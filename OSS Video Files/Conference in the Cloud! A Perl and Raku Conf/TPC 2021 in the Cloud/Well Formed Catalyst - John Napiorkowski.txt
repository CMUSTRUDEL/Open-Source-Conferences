Title: Well Formed Catalyst - John Napiorkowski
Publication date: 2021-06-09
Playlist: TPC 2021 in the Cloud
Description: 
	Over the past decade+ I've consulted on nearly a score of Perl Catalyst based applications while building dozens more in my spare time and these are the facts of life I've found which lead to a maintainable and scalable code base.

In its nearly 20 years of existence many companies have built web applications and APIs on top of the Perl Catalyst web framework.   A Perl programmer working in the field or seeking a position has a not unreasonable chance of coming across Catalyst on the job.   For "greenfield" projects many people may consider Catalyst due to its reputation for long term stability and commitment to backward compatibility.   For a Perl programmer in either bucket it would be ideal to have a set of design patterns aimed at solving some of the most common programming tasks and issues one encounters when using this venerable framework.  I've been using and maintaining Catalyst for nearly 20 years, I've seen some great ideas and some astounding blunders.   The goal of this talk is to distill what I've learned into a comprehensive approach to building "Well Formed Catalyst" web applications.   A Well Formed Catalyst application uses simple, repeatable design patterns which enhance developer speed while promoting long term code comprehension and maintainability.  The goal of Well Formed Catalyst is to build applications and APIs that stand the test of time.
Captions: 
	00:00:01,439 --> 00:00:07,680
i guess i can't full screen huh

00:00:04,640 --> 00:00:07,680
uh you should be able to

00:00:08,639 --> 00:00:10,960
see

00:00:13,200 --> 00:00:17,520
what's your operating system i am on a

00:00:16,560 --> 00:00:20,160
mac

00:00:17,520 --> 00:00:21,680
yeah should should be straightforward

00:00:20,160 --> 00:00:22,000
the controls just move around when

00:00:21,680 --> 00:00:24,560
you're

00:00:22,000 --> 00:00:26,960
uh full screen so that can be confusing

00:00:24,560 --> 00:00:30,240
sometimes

00:00:26,960 --> 00:00:33,520
okay cool let me just uh

00:00:30,240 --> 00:00:36,960
i'm gonna turn off my personal videos

00:00:33,520 --> 00:00:42,399
i did screen share did it start

00:00:36,960 --> 00:00:43,840
it did i can see outline right now

00:00:42,399 --> 00:00:46,000
oh you're you're not going to use your

00:00:43,840 --> 00:00:46,559
video the video uh your video is

00:00:46,000 --> 00:00:50,000
typically

00:00:46,559 --> 00:00:51,840
in uh the uh talk

00:00:50,000 --> 00:00:54,160
oh video you mean the video feed in my

00:00:51,840 --> 00:00:54,160
face

00:00:56,000 --> 00:00:59,840
to your call yeah i'd like to i'd prefer

00:00:58,480 --> 00:01:01,199
to leave it off i'm having trouble with

00:00:59,840 --> 00:01:03,359
my internet today

00:01:01,199 --> 00:01:04,960
we had a big storm here in texas and i

00:01:03,359 --> 00:01:07,040
don't want to uh

00:01:04,960 --> 00:01:09,680
overload my system and get kicked out in

00:01:07,040 --> 00:01:09,680
the middle of this

00:01:10,840 --> 00:01:13,840
understood

00:01:16,000 --> 00:01:19,119
and sadly that means just you all will

00:01:17,600 --> 00:01:22,320
be able to see that i'm wearing my

00:01:19,119 --> 00:01:24,720
yapsi 2012 t-shirt

00:01:22,320 --> 00:01:26,320
i know which i put on specifically for

00:01:24,720 --> 00:01:27,759
this me for this but uh

00:01:26,320 --> 00:01:29,360
i think it's better if i leave the video

00:01:27,759 --> 00:01:30,960
off just so that i think what you all

00:01:29,360 --> 00:01:33,360
care about is the slides right

00:01:30,960 --> 00:01:35,280
so okay we are streaming and you're

00:01:33,360 --> 00:01:37,119
ready to go

00:01:35,280 --> 00:01:38,560
okay we want to give people a few misti

00:01:37,119 --> 00:01:42,960
this starts at 11 right

00:01:38,560 --> 00:01:42,960
yeah let's wait till 11. okay

00:01:46,880 --> 00:01:55,840
so uh anyway let's wait 11 and i'll

00:01:49,520 --> 00:01:55,840
start it up

00:02:04,240 --> 00:02:08,879
hope everybody's having fun ea with the

00:02:07,600 --> 00:02:11,200
remote

00:02:08,879 --> 00:02:12,640
hope that in the future we you we keep

00:02:11,200 --> 00:02:14,720
this remote as an option i think it

00:02:12,640 --> 00:02:17,920
might enable more presenters

00:02:14,720 --> 00:02:19,920
not everybody can travel um it might be

00:02:17,920 --> 00:02:23,520
cool to have like a in the future

00:02:19,920 --> 00:02:26,000
even after pandemic uh being able to

00:02:23,520 --> 00:02:27,680
to do remote presenting is uh is a good

00:02:26,000 --> 00:02:31,519
option

00:02:27,680 --> 00:02:34,319
not as much fun as live but uh given

00:02:31,519 --> 00:02:36,000
uh given the uh difficulty of travel and

00:02:34,319 --> 00:02:40,160
costs and

00:02:36,000 --> 00:02:43,840
everything and hello can you hear me

00:02:40,160 --> 00:02:47,440
i hear somebody hey this is brett

00:02:43,840 --> 00:02:48,959
i'm the presenter brett you're in the

00:02:47,440 --> 00:02:52,480
wrong channel

00:02:48,959 --> 00:02:54,319
oh sorry this is about the same man we

00:02:52,480 --> 00:02:55,120
could roll off for it i got dice right

00:02:54,319 --> 00:02:58,800
here

00:02:55,120 --> 00:03:05,840
no no sorry about that

00:02:58,800 --> 00:03:05,840
see you later

00:03:08,159 --> 00:03:12,400
i can't be the only one with dice on my

00:03:09,840 --> 00:03:12,400
desk right

00:03:15,120 --> 00:03:22,239
i have many dice

00:03:19,519 --> 00:03:24,879
so um i can't actually see let me see if

00:03:22,239 --> 00:03:26,480
i can see the chat window somehow

00:03:24,879 --> 00:03:27,920
yeah i can't i can't actually see the

00:03:26,480 --> 00:03:31,360
chat window

00:03:27,920 --> 00:03:33,920
uh so if people have questions

00:03:31,360 --> 00:03:36,239
you need to shout it out and not be shy

00:03:33,920 --> 00:03:37,920
don't worry i won't be offended

00:03:36,239 --> 00:03:47,840
i guess we got another minute let's wait

00:03:37,920 --> 00:03:47,840
another minute

00:04:05,920 --> 00:04:09,120
what kind of weather you all got in the

00:04:07,599 --> 00:04:11,360
places you're at here in

00:04:09,120 --> 00:04:12,239
here in texas it's been crazy cold hot

00:04:11,360 --> 00:04:13,920
rainy

00:04:12,239 --> 00:04:16,239
all sorts of bizarre weather totally

00:04:13,920 --> 00:04:17,840
mordor anybody out there got good

00:04:16,239 --> 00:04:20,880
weather now

00:04:17,840 --> 00:04:23,600
yeah it's hot in toronto it's hot in

00:04:20,880 --> 00:04:23,600
toronto

00:04:23,759 --> 00:04:30,960
yeah it's pretty warm in the uk too

00:04:27,840 --> 00:04:32,160
it's it's in the 30s which is uh i guess

00:04:30,960 --> 00:04:35,520
that's uh

00:04:32,160 --> 00:04:38,720
about wow 30 c that's heavy

00:04:35,520 --> 00:04:41,840
yeah high 90s it's like that yeah

00:04:38,720 --> 00:04:44,000
and it's humid so

00:04:41,840 --> 00:04:45,120
ac running 24 hours a day for a while

00:04:44,000 --> 00:04:47,520
now

00:04:45,120 --> 00:04:49,040
in in in houston i'm not in houston i'm

00:04:47,520 --> 00:04:51,199
in austin but in houston they call that

00:04:49,040 --> 00:04:54,800
dog breath weather

00:04:51,199 --> 00:04:57,440
hot hot stinky and wet

00:04:54,800 --> 00:04:58,080
yeah it's um first thing in the morning

00:04:57,440 --> 00:05:00,320
it's fine

00:04:58,080 --> 00:05:01,360
you go outside about lunchtime not so

00:05:00,320 --> 00:05:03,840
fine

00:05:01,360 --> 00:05:05,360
yeah i get up like at five something

00:05:03,840 --> 00:05:07,199
because it's the only time i can do

00:05:05,360 --> 00:05:08,960
anything

00:05:07,199 --> 00:05:11,120
i used to be like mr like the party

00:05:08,960 --> 00:05:13,680
doesn't start until midnight

00:05:11,120 --> 00:05:16,479
yeah now i'm done now i'm at the now i'm

00:05:13,680 --> 00:05:16,479
up at five something

00:05:17,840 --> 00:05:20,880
all right looks like it's 11. why don't

00:05:19,360 --> 00:05:24,800
we just kick it off

00:05:20,880 --> 00:05:27,600
oh thank you um so hello everybody

00:05:24,800 --> 00:05:28,160
and hello uh for my internet viewers uh

00:05:27,600 --> 00:05:30,720
either

00:05:28,160 --> 00:05:32,400
live or in the future my name is john

00:05:30,720 --> 00:05:34,080
napokowski i'm a pearl developer i've

00:05:32,400 --> 00:05:34,880
been programming in pearl since the mid

00:05:34,080 --> 00:05:37,360
90s

00:05:34,880 --> 00:05:38,639
i guess i shouldn't say that aging

00:05:37,360 --> 00:05:41,199
myself but there you go

00:05:38,639 --> 00:05:42,320
and i've been using catalyst for about

00:05:41,199 --> 00:05:45,680
15 years

00:05:42,320 --> 00:05:48,080
uh give or take um and i know

00:05:45,680 --> 00:05:49,600
and just to just i'm going to assume

00:05:48,080 --> 00:05:51,039
that people that are watching this know

00:05:49,600 --> 00:05:53,759
a little bit about pearl and no

00:05:51,039 --> 00:05:55,600
no know basically what catalyst is if

00:05:53,759 --> 00:05:57,600
you're a catalyst beginner watching this

00:05:55,600 --> 00:05:58,160
video you may want to look for something

00:05:57,600 --> 00:06:00,080
else

00:05:58,160 --> 00:06:01,360
uh because this probably is not a an

00:06:00,080 --> 00:06:03,039
overview of basically all of your

00:06:01,360 --> 00:06:04,960
catalysts i'm making some assumptions

00:06:03,039 --> 00:06:06,160
that you know what catalyst is and pearl

00:06:04,960 --> 00:06:08,080
is and that you've

00:06:06,160 --> 00:06:10,000
you know you've played with it so that's

00:06:08,080 --> 00:06:14,000
just setting uh expectations

00:06:10,000 --> 00:06:16,880
so anyway uh catalyst is a is a a web

00:06:14,000 --> 00:06:17,759
model view controller framework um uh

00:06:16,880 --> 00:06:20,319
for pro

00:06:17,759 --> 00:06:20,880
and it's been around for a long time um

00:06:20,319 --> 00:06:23,600
and

00:06:20,880 --> 00:06:24,639
uh i've i've been supporting catalyst

00:06:23,600 --> 00:06:27,759
applications at

00:06:24,639 --> 00:06:29,600
several companies over many years um

00:06:27,759 --> 00:06:31,039
and i've seen a lot of like decently

00:06:29,600 --> 00:06:32,880
written applications i've seen a lot of

00:06:31,039 --> 00:06:34,400
messes and i've seen a lot of both mixed

00:06:32,880 --> 00:06:35,919
together

00:06:34,400 --> 00:06:37,520
and my intention here with this

00:06:35,919 --> 00:06:38,639
presentation is just to talk a little

00:06:37,520 --> 00:06:40,560
bit about

00:06:38,639 --> 00:06:42,080
some of the patterns and anti-patterns

00:06:40,560 --> 00:06:43,919
that i've seen

00:06:42,080 --> 00:06:45,680
in catalyst things that work things that

00:06:43,919 --> 00:06:48,080
didn't work so that if you are

00:06:45,680 --> 00:06:49,440
supporting a catalyst application

00:06:48,080 --> 00:06:51,919
or if you're starting building a new

00:06:49,440 --> 00:06:54,720
from scratch which is cool too

00:06:51,919 --> 00:06:56,960
these are things to keep in mind and of

00:06:54,720 --> 00:06:58,960
course this is my dogmatic viewpoint

00:06:56,960 --> 00:07:00,720
feel free to argue with me now i got a

00:06:58,960 --> 00:07:02,560
lot of slides here

00:07:00,720 --> 00:07:03,919
but i don't actually care if we get

00:07:02,560 --> 00:07:05,919
through all of them um

00:07:03,919 --> 00:07:07,599
if we get on a certain slide and you all

00:07:05,919 --> 00:07:08,880
want to like talk about that one for

00:07:07,599 --> 00:07:11,039
20-30 minutes

00:07:08,880 --> 00:07:12,160
that's cool don't be shy about asking

00:07:11,039 --> 00:07:14,960
questions um

00:07:12,160 --> 00:07:16,319
i can't actually see the zoom chat

00:07:14,960 --> 00:07:17,199
window for some reason while i'm

00:07:16,319 --> 00:07:20,000
presenting

00:07:17,199 --> 00:07:21,199
so uh if you need to ask a question just

00:07:20,000 --> 00:07:22,880
shout it out i can't

00:07:21,199 --> 00:07:24,479
see that or somebody starts typing it if

00:07:22,880 --> 00:07:25,840
somebody could watch that chat for me

00:07:24,479 --> 00:07:27,599
for those people who are shy and prefer

00:07:25,840 --> 00:07:28,400
to type uh somebody keep an eye on the

00:07:27,599 --> 00:07:30,479
chat let me know if

00:07:28,400 --> 00:07:32,000
chat questions come in uh does anybody

00:07:30,479 --> 00:07:34,160
want to volunteer to watch the chat for

00:07:32,000 --> 00:07:34,160
me

00:07:34,479 --> 00:07:37,840
i can watch it for you john this is jay

00:07:36,800 --> 00:07:40,639
hey jay thank you

00:07:37,840 --> 00:07:41,360
cool okay you're welcome all right uh so

00:07:40,639 --> 00:07:43,360
if anything

00:07:41,360 --> 00:07:44,639
otherwise just shout out again like i

00:07:43,360 --> 00:07:47,840
said i won't be insulted

00:07:44,639 --> 00:07:49,280
um and i'm more than happy to like not

00:07:47,840 --> 00:07:51,039
get through all these slides all right

00:07:49,280 --> 00:07:53,599
so um

00:07:51,039 --> 00:07:54,879
let's um again we all i'm assuming you

00:07:53,599 --> 00:07:55,440
know catalyst improving all those kind

00:07:54,879 --> 00:07:57,280
of things

00:07:55,440 --> 00:07:58,800
so what's the outline for today it's

00:07:57,280 --> 00:08:00,720
actually very simple i'm going to talk

00:07:58,800 --> 00:08:02,000
about design patterns catalysts

00:08:00,720 --> 00:08:03,759
and i'm going to talk about the most

00:08:02,000 --> 00:08:04,639
common anti-patterns that you should try

00:08:03,759 --> 00:08:08,319
to avoid

00:08:04,639 --> 00:08:08,319
and some ways to avoid them

00:08:08,400 --> 00:08:12,319
okay so we're going to design patterns

00:08:11,919 --> 00:08:15,039
so

00:08:12,319 --> 00:08:16,319
what's a design pattern uh it's this is

00:08:15,039 --> 00:08:19,840
a big conversation

00:08:16,319 --> 00:08:21,280
in uh in in computer science and

00:08:19,840 --> 00:08:24,479
programming

00:08:21,280 --> 00:08:26,000
the basic idea is that there are it's

00:08:24,479 --> 00:08:26,879
basically a formalization of a good

00:08:26,000 --> 00:08:29,280
practice

00:08:26,879 --> 00:08:30,319
um to solve the types of common problems

00:08:29,280 --> 00:08:31,919
that we all face

00:08:30,319 --> 00:08:34,240
now that's not to say that it's the only

00:08:31,919 --> 00:08:37,039
solution uh to solving the problem

00:08:34,240 --> 00:08:38,399
but uh what i found is that when you're

00:08:37,039 --> 00:08:40,399
writing an application

00:08:38,399 --> 00:08:42,159
in catalyst and you have an application

00:08:40,399 --> 00:08:45,360
that's been around for 10 years or more

00:08:42,159 --> 00:08:48,640
in which case many are it's better

00:08:45,360 --> 00:08:50,160
to settle on on common practices

00:08:48,640 --> 00:08:51,680
even if you all don't agree that that's

00:08:50,160 --> 00:08:54,720
the best way to do something

00:08:51,680 --> 00:08:55,360
because what has killed applications the

00:08:54,720 --> 00:08:58,560
most

00:08:55,360 --> 00:09:00,000
in my experience is when people have 20

00:08:58,560 --> 00:09:02,080
different ways to do the same thing

00:09:00,000 --> 00:09:06,080
because i couldn't come up with

00:09:02,080 --> 00:09:08,080
with one way that was acceptable okay

00:09:06,080 --> 00:09:09,440
now again that one way may not

00:09:08,080 --> 00:09:10,160
necessarily be the best possible

00:09:09,440 --> 00:09:11,839
approach

00:09:10,160 --> 00:09:13,680
but it's a good common approach that

00:09:11,839 --> 00:09:17,680
makes sense and has some

00:09:13,680 --> 00:09:17,680
some pragmatic experience behind it

00:09:19,360 --> 00:09:24,080
so what are the very common design

00:09:22,000 --> 00:09:27,120
patterns that are in catalyst

00:09:24,080 --> 00:09:29,200
so one uh

00:09:27,120 --> 00:09:31,120
design pattern is called the command

00:09:29,200 --> 00:09:32,800
design pattern and the command design

00:09:31,120 --> 00:09:36,399
pattern is basically

00:09:32,800 --> 00:09:39,120
uh it's a it's a complex

00:09:36,399 --> 00:09:39,839
set of behaviors represented by an

00:09:39,120 --> 00:09:41,920
object

00:09:39,839 --> 00:09:44,399
and it's exposed as a single function

00:09:41,920 --> 00:09:46,000
and the concept of a command pattern

00:09:44,399 --> 00:09:48,000
is it's going to as it's going to

00:09:46,000 --> 00:09:49,040
abstract everything needed to perform a

00:09:48,000 --> 00:09:51,279
particular action

00:09:49,040 --> 00:09:52,160
now when would you use a command design

00:09:51,279 --> 00:09:54,640
pattern

00:09:52,160 --> 00:09:56,320
generally it's really useful for things

00:09:54,640 --> 00:09:57,920
the most classic example that

00:09:56,320 --> 00:09:59,600
if you read the design pattern book it's

00:09:57,920 --> 00:10:00,720
going to be like we're doing things like

00:09:59,600 --> 00:10:01,839
the undo buffer

00:10:00,720 --> 00:10:04,079
now we don't have that in web

00:10:01,839 --> 00:10:06,800
development but any kind of

00:10:04,079 --> 00:10:08,959
behavior that is cross-cutting and not

00:10:06,800 --> 00:10:10,720
like really strongly coupled to a

00:10:08,959 --> 00:10:12,560
business that's a business logic

00:10:10,720 --> 00:10:13,839
maybe things like authorization

00:10:12,560 --> 00:10:15,440
authentication

00:10:13,839 --> 00:10:17,200
logging all these things are

00:10:15,440 --> 00:10:19,680
cross-cutting concerns

00:10:17,200 --> 00:10:20,880
and you can consider encapsulating them

00:10:19,680 --> 00:10:22,800
in a command pattern

00:10:20,880 --> 00:10:24,880
now how is the command pattern used in

00:10:22,800 --> 00:10:27,519
catalyst

00:10:24,880 --> 00:10:29,200
so you're all using uh the command

00:10:27,519 --> 00:10:32,959
pattern all the time in catalyst

00:10:29,200 --> 00:10:36,320
when you write a an action

00:10:32,959 --> 00:10:39,519
so who wants to tell me what is the

00:10:36,320 --> 00:10:43,920
action here in this piece of

00:10:39,519 --> 00:10:43,920
this example code what's the action

00:10:44,240 --> 00:10:50,320
list thank you okay so

00:10:47,680 --> 00:10:52,320
right it's basically in catalyst um an

00:10:50,320 --> 00:10:54,560
action is just a method

00:10:52,320 --> 00:10:55,440
uh that's been decorated uh with an

00:10:54,560 --> 00:10:59,760
attribute

00:10:55,440 --> 00:11:02,959
uh to tell the um to tell the the

00:10:59,760 --> 00:11:04,320
uh how this um particular action is

00:11:02,959 --> 00:11:06,079
mapped to a url

00:11:04,320 --> 00:11:08,560
now i'm using the most obviously very

00:11:06,079 --> 00:11:09,519
simple just like this is gonna map to

00:11:08,560 --> 00:11:12,720
the list

00:11:09,519 --> 00:11:16,560
um url okay and

00:11:12,720 --> 00:11:18,720
this this method here uh list

00:11:16,560 --> 00:11:19,760
uh you you you as you know you put all

00:11:18,720 --> 00:11:22,000
your logic

00:11:19,760 --> 00:11:24,240
inside the the function but actually

00:11:22,000 --> 00:11:26,959
behind the scenes when catalyst

00:11:24,240 --> 00:11:29,200
sets itself up it grabs this this

00:11:26,959 --> 00:11:30,399
function and it wraps it in an action

00:11:29,200 --> 00:11:33,440
object

00:11:30,399 --> 00:11:36,959
and that action object has a

00:11:33,440 --> 00:11:40,240
um an api that you can work with okay

00:11:36,959 --> 00:11:43,519
and the primarily the primary method

00:11:40,240 --> 00:11:44,800
that it has is for things it it it wraps

00:11:43,519 --> 00:11:47,519
how to execute

00:11:44,800 --> 00:11:49,040
and how matching happens okay it has a

00:11:47,519 --> 00:11:52,160
couple other things there too

00:11:49,040 --> 00:11:53,760
but the two most useful ones to um to

00:11:52,160 --> 00:11:54,480
link into are going to be matching and

00:11:53,760 --> 00:11:59,040
execute

00:11:54,480 --> 00:12:02,240
okay so here's an example of

00:11:59,040 --> 00:12:05,519
uh okay so here's an example of a of an

00:12:02,240 --> 00:12:06,880
action okay that i'm i'm what i'm what

00:12:05,519 --> 00:12:07,440
i'm trying to do here is i'm trying to

00:12:06,880 --> 00:12:10,480
say

00:12:07,440 --> 00:12:14,320
i want this action

00:12:10,480 --> 00:12:15,200
to match only when the incoming http

00:12:14,320 --> 00:12:19,120
scheme

00:12:15,200 --> 00:12:20,880
is a specific scheme either http or

00:12:19,120 --> 00:12:23,600
https

00:12:20,880 --> 00:12:25,040
so this logic here unfortunately you

00:12:23,600 --> 00:12:27,920
need to

00:12:25,040 --> 00:12:28,399
wrap both match args and match captures

00:12:27,920 --> 00:12:30,720
um

00:12:28,399 --> 00:12:32,399
just simply because captures and orgs do

00:12:30,720 --> 00:12:35,600
slightly different things but they

00:12:32,399 --> 00:12:36,560
they have the exact same um api so you

00:12:35,600 --> 00:12:39,680
can just

00:12:36,560 --> 00:12:40,160
cargo cult this uh around here let me

00:12:39,680 --> 00:12:41,600
show you

00:12:40,160 --> 00:12:43,839
let me show you the example how this is

00:12:41,600 --> 00:12:48,000
used and then we'll go back to the code

00:12:43,839 --> 00:12:51,440
okay so here's how you might use it

00:12:48,000 --> 00:12:54,320
so i i'm i'm i'm augmenting my action

00:12:51,440 --> 00:12:54,800
uh by using the scheme does scheme so

00:12:54,320 --> 00:12:58,240
again

00:12:54,800 --> 00:13:00,399
oops this is called a catalyst action

00:12:58,240 --> 00:13:02,560
role scheme

00:13:00,399 --> 00:13:04,560
and again i'm i'm including with does

00:13:02,560 --> 00:13:06,560
and then i'm i'm adding some additional

00:13:04,560 --> 00:13:09,360
information i'm saying which what is the

00:13:06,560 --> 00:13:10,480
url scheme that i want to match okay so

00:13:09,360 --> 00:13:13,600
in this case

00:13:10,480 --> 00:13:17,120
this is the this gives you the ability

00:13:13,600 --> 00:13:20,240
to say to customize how your

00:13:17,120 --> 00:13:23,760
actions will actually match um an

00:13:20,240 --> 00:13:26,079
incoming uh url request okay

00:13:23,760 --> 00:13:26,880
let's go back to the code real quick yep

00:13:26,079 --> 00:13:29,279
all right

00:13:26,880 --> 00:13:30,240
um so i'm just simply pulling out the

00:13:29,279 --> 00:13:32,720
url scheme

00:13:30,240 --> 00:13:34,079
it's it's a there's actually a psgi

00:13:32,720 --> 00:13:37,040
environment for it

00:13:34,079 --> 00:13:38,000
and i'm just simply returning yes or no

00:13:37,040 --> 00:13:40,240
so basically match

00:13:38,000 --> 00:13:41,440
args match captures every you have to

00:13:40,240 --> 00:13:43,600
return a boolean

00:13:41,440 --> 00:13:45,199
if the boolean that's returned is is

00:13:43,600 --> 00:13:47,360
true uh then

00:13:45,199 --> 00:13:48,560
the action will match and if it's zero

00:13:47,360 --> 00:13:52,240
then the action will match

00:13:48,560 --> 00:13:55,279
if the action doesn't match then the um

00:13:52,240 --> 00:13:59,360
the system will just move on to the next

00:13:55,279 --> 00:13:59,360
most likely action to match it

00:13:59,440 --> 00:14:06,639
uh i have a question question yes

00:14:02,560 --> 00:14:06,639
uh where does ctx come from

00:14:08,240 --> 00:14:11,600
that's uh excellent that's a typo in my

00:14:11,120 --> 00:14:15,440
code

00:14:11,600 --> 00:14:16,720
it should be c yes but it's it's it gets

00:14:15,440 --> 00:14:18,320
the catalyst context

00:14:16,720 --> 00:14:20,720
you're correct thank you for pointing

00:14:18,320 --> 00:14:24,079
that out and that line here at the end

00:14:20,720 --> 00:14:26,160
self-origin um ctx that should that

00:14:24,079 --> 00:14:28,800
should actually be c

00:14:26,160 --> 00:14:29,199
i i i prefer to say c t x over c just

00:14:28,800 --> 00:14:32,320
because

00:14:29,199 --> 00:14:34,160
it's harder to when i'm writing um my

00:14:32,320 --> 00:14:36,959
my code because it's harder to actually

00:14:34,160 --> 00:14:37,600
make a typo um i see a lot of people hit

00:14:36,959 --> 00:14:39,680
like

00:14:37,600 --> 00:14:40,880
like v instead of c that's a very common

00:14:39,680 --> 00:14:44,240
typo that i see

00:14:40,880 --> 00:14:46,959
um but for the purposes of

00:14:44,240 --> 00:14:47,440
this demo code i just changed it to c

00:14:46,959 --> 00:14:49,440
because

00:14:47,440 --> 00:14:50,720
that's where that's how most of the

00:14:49,440 --> 00:14:53,760
catalyst stocks are

00:14:50,720 --> 00:14:54,240
and also it just took up less space so

00:14:53,760 --> 00:14:56,480
you could

00:14:54,240 --> 00:14:57,839
i could get more code into an example so

00:14:56,480 --> 00:15:01,760
that's

00:14:57,839 --> 00:15:03,120
okay no worries um no problem um

00:15:01,760 --> 00:15:04,639
does everybody understand i mean i'm

00:15:03,120 --> 00:15:05,680
assuming then again as like i said i

00:15:04,639 --> 00:15:06,399
assumed you know a little bit about

00:15:05,680 --> 00:15:08,399
pearl and

00:15:06,399 --> 00:15:10,079
and how catalyst and moose works so you

00:15:08,399 --> 00:15:11,120
all understand like what around here is

00:15:10,079 --> 00:15:13,600
doing and

00:15:11,120 --> 00:15:14,639
how much role works and all those kind

00:15:13,600 --> 00:15:16,079
of things

00:15:14,639 --> 00:15:18,639
whereas anybody need me to go through

00:15:16,079 --> 00:15:18,639
that quickly

00:15:20,000 --> 00:15:28,160
cool so again here you can do

00:15:24,000 --> 00:15:30,399
any type of uh composable

00:15:28,160 --> 00:15:31,759
execution or matching that you want to

00:15:30,399 --> 00:15:34,160
do for example like

00:15:31,759 --> 00:15:34,800
uh if you want to add some code around

00:15:34,160 --> 00:15:37,440
all the

00:15:34,800 --> 00:15:38,079
authorization you know authentication uh

00:15:37,440 --> 00:15:41,040
it could go

00:15:38,079 --> 00:15:41,839
in here if you want to add some like

00:15:41,040 --> 00:15:44,399
logging

00:15:41,839 --> 00:15:47,839
right you could do that here as well so

00:15:44,399 --> 00:15:47,839
it's cross-cutting concerns

00:15:51,040 --> 00:15:54,959
any other questions about the command

00:15:53,920 --> 00:15:58,880
pattern

00:15:54,959 --> 00:15:58,880
as an action in catalyst

00:16:00,560 --> 00:16:05,360
you can always shout out later or hit me

00:16:03,920 --> 00:16:06,959
up on irc

00:16:05,360 --> 00:16:08,560
so that one was a little boring let's

00:16:06,959 --> 00:16:11,120
look at a little

00:16:08,560 --> 00:16:14,560
uh more interesting one so this is the

00:16:11,120 --> 00:16:17,279
this is a big one model view controller

00:16:14,560 --> 00:16:18,880
model view controller it's it's it does

00:16:17,279 --> 00:16:20,079
it's considered a design pattern of

00:16:18,880 --> 00:16:22,240
design patterns

00:16:20,079 --> 00:16:23,600
because it encompasses itself can

00:16:22,240 --> 00:16:24,720
encapsulate several design patterns

00:16:23,600 --> 00:16:28,000
underneath it

00:16:24,720 --> 00:16:29,440
um and the idea here was to separate

00:16:28,000 --> 00:16:31,920
your concerns

00:16:29,440 --> 00:16:33,680
um for handling business logic

00:16:31,920 --> 00:16:36,240
abstracting business logic

00:16:33,680 --> 00:16:37,680
from user interfaces and it was

00:16:36,240 --> 00:16:41,120
originally written for

00:16:37,680 --> 00:16:41,120
desktop gui applications

00:16:41,440 --> 00:16:45,199
and in the desktop gui application it's

00:16:43,040 --> 00:16:49,279
often represented this way

00:16:45,199 --> 00:16:52,240
unfortunately since http

00:16:49,279 --> 00:16:53,440
is request response unless of course

00:16:52,240 --> 00:16:54,240
you're doing something like websockets

00:16:53,440 --> 00:16:57,040
or something

00:16:54,240 --> 00:16:58,959
um we it we end up doing a slightly

00:16:57,040 --> 00:17:01,920
different version

00:16:58,959 --> 00:17:02,959
for catalyst to work so in the classic

00:17:01,920 --> 00:17:06,240
mvc

00:17:02,959 --> 00:17:08,959
you have a user agent is

00:17:06,240 --> 00:17:10,160
actually is is interacting with the view

00:17:08,959 --> 00:17:12,640
via controllers

00:17:10,160 --> 00:17:14,240
so they hit the controller and they send

00:17:12,640 --> 00:17:17,360
their controller a request

00:17:14,240 --> 00:17:18,720
do something right the controller then

00:17:17,360 --> 00:17:22,160
is responsible

00:17:18,720 --> 00:17:24,799
for abstracting and handling all aspects

00:17:22,160 --> 00:17:27,520
of understanding what that request means

00:17:24,799 --> 00:17:29,520
and then signaling a model

00:17:27,520 --> 00:17:31,600
for the requested changes whether it's

00:17:29,520 --> 00:17:35,360
displaying something or changing data

00:17:31,600 --> 00:17:38,080
again in classic mvc the model

00:17:35,360 --> 00:17:39,840
and the view are bound so that when the

00:17:38,080 --> 00:17:41,760
model changes the view automatically

00:17:39,840 --> 00:17:44,080
updates and that's what the user sees

00:17:41,760 --> 00:17:45,600
okay on the web it has to be a little

00:17:44,080 --> 00:17:47,039
different because we don't have a

00:17:45,600 --> 00:17:50,240
persistent connection

00:17:47,039 --> 00:17:52,480
so in the web context we

00:17:50,240 --> 00:17:53,919
tend to think of the controller as

00:17:52,480 --> 00:17:56,720
handling both

00:17:53,919 --> 00:17:58,400
manipulating the model as well as

00:17:56,720 --> 00:18:00,640
manipulating the view

00:17:58,400 --> 00:18:01,760
and returning the view to the user so

00:18:00,640 --> 00:18:05,200
that's a slight

00:18:01,760 --> 00:18:07,840
difference okay and what we'll see is

00:18:05,200 --> 00:18:09,200
um in catalyst your your intention for

00:18:07,840 --> 00:18:12,160
the controller is

00:18:09,200 --> 00:18:14,080
to abstract and hold anything that has

00:18:12,160 --> 00:18:16,559
to do with the web request

00:18:14,080 --> 00:18:18,480
okay goes in the controller that way

00:18:16,559 --> 00:18:21,039
your models and views can be as abstract

00:18:18,480 --> 00:18:21,039
as possible

00:18:21,919 --> 00:18:26,799
so let's get some real examples okay so

00:18:25,039 --> 00:18:29,360
here's an example

00:18:26,799 --> 00:18:31,840
it's a user controller and it's simply

00:18:29,360 --> 00:18:34,880
uh the point of this controller is

00:18:31,840 --> 00:18:37,440
where we are asking a user model

00:18:34,880 --> 00:18:38,480
for a list okay we're getting a list of

00:18:37,440 --> 00:18:41,919
users

00:18:38,480 --> 00:18:43,360
and again here since uh since again the

00:18:41,919 --> 00:18:46,160
view is not persistent

00:18:43,360 --> 00:18:46,720
right in http it's response request so

00:18:46,160 --> 00:18:49,200
it's

00:18:46,720 --> 00:18:51,600
uh we're we're to the the controller

00:18:49,200 --> 00:18:54,720
then itself has the responsibility

00:18:51,600 --> 00:18:57,760
of mapping that user

00:18:54,720 --> 00:18:58,799
model data to a view okay so that i'm

00:18:57,760 --> 00:19:01,360
just simply saying

00:18:58,799 --> 00:19:02,640
all right here's my list of users and

00:19:01,360 --> 00:19:05,200
i'm saying view

00:19:02,640 --> 00:19:07,600
here's the users do your thing and let's

00:19:05,200 --> 00:19:09,919
look at the view

00:19:07,600 --> 00:19:11,600
i'm sorry let's look at the model the

00:19:09,919 --> 00:19:12,880
model here is actually just very simple

00:19:11,600 --> 00:19:15,919
it's just here's a list of

00:19:12,880 --> 00:19:16,880
users just list the names srinivas joe

00:19:15,919 --> 00:19:19,919
and holly

00:19:16,880 --> 00:19:23,280
and the viewers next

00:19:19,919 --> 00:19:24,880
so again i i just wrote a view by hand

00:19:23,280 --> 00:19:26,799
obviously in real life you're going to

00:19:24,880 --> 00:19:28,960
use like a templating system

00:19:26,799 --> 00:19:30,559
whether it's x-lit or template toolkit

00:19:28,960 --> 00:19:33,200
or if you're doing json stuff

00:19:30,559 --> 00:19:34,559
you'll be using one of those but for the

00:19:33,200 --> 00:19:36,240
purposes of

00:19:34,559 --> 00:19:38,240
of just like showing how the view works

00:19:36,240 --> 00:19:40,240
here but just simply showing

00:19:38,240 --> 00:19:41,600
all right the view is just returning

00:19:40,240 --> 00:19:44,320
some html

00:19:41,600 --> 00:19:45,039
it's it gets the the user list that was

00:19:44,320 --> 00:19:48,160
sent

00:19:45,039 --> 00:19:49,440
uh from the forward and it's responsible

00:19:48,160 --> 00:19:53,039
for

00:19:49,440 --> 00:19:56,080
composing uh the response now again

00:19:53,039 --> 00:19:58,960
uh in general it's thought

00:19:56,080 --> 00:20:00,559
that it's best to use the controller as

00:19:58,960 --> 00:20:02,880
much as possible for

00:20:00,559 --> 00:20:03,840
interfacing between the request and the

00:20:02,880 --> 00:20:06,880
response

00:20:03,840 --> 00:20:10,240
but traditionally in catalyst

00:20:06,880 --> 00:20:11,679
we delegate to the view the a certain

00:20:10,240 --> 00:20:14,799
amount of ability to

00:20:11,679 --> 00:20:17,600
actually create the response so we allow

00:20:14,799 --> 00:20:19,600
the view to do things like create the

00:20:17,600 --> 00:20:22,000
the response body and typically

00:20:19,600 --> 00:20:23,280
the set response headers like what the

00:20:22,000 --> 00:20:25,200
what the uh

00:20:23,280 --> 00:20:26,480
what the response is the content type is

00:20:25,200 --> 00:20:30,159
going to be and

00:20:26,480 --> 00:20:33,360
so forth okay so uh

00:20:30,159 --> 00:20:34,640
as much as possible things to do with

00:20:33,360 --> 00:20:36,480
with with like munching and

00:20:34,640 --> 00:20:38,880
understanding the request response

00:20:36,480 --> 00:20:40,559
should go into the controller but the

00:20:38,880 --> 00:20:42,960
bits that are reusable

00:20:40,559 --> 00:20:44,480
uh can go either into a viewer into a

00:20:42,960 --> 00:20:48,799
model we'll show an example of a model a

00:20:44,480 --> 00:20:50,640
little bit later

00:20:48,799 --> 00:20:54,080
anybody have any questions about this

00:20:50,640 --> 00:20:54,080
piece of code before i move on

00:20:54,640 --> 00:20:58,320
so this is a very simple like here's the

00:20:56,320 --> 00:21:02,159
controller

00:20:58,320 --> 00:21:04,000
very simple model very simple feel

00:21:02,159 --> 00:21:06,880
and this ends up then the user gets the

00:21:04,000 --> 00:21:06,880
gets to see the list

00:21:12,720 --> 00:21:20,000
excuse me okay all right so that's

00:21:16,000 --> 00:21:20,000
the generics of model view controller

00:21:20,240 --> 00:21:25,840
let's move on to chain of responsibility

00:21:24,159 --> 00:21:28,159
so chain of responsibility is another

00:21:25,840 --> 00:21:28,480
design pattern uh and the concept of a

00:21:28,159 --> 00:21:32,000
chain

00:21:28,480 --> 00:21:34,559
responsibility is you when you have a

00:21:32,000 --> 00:21:37,360
complicated workflow

00:21:34,559 --> 00:21:38,799
instead of having one big method to try

00:21:37,360 --> 00:21:41,720
to handle everything

00:21:38,799 --> 00:21:43,200
you want to try to decompose the

00:21:41,720 --> 00:21:45,840
responsibilities

00:21:43,200 --> 00:21:46,400
into discrete quotable methods now this

00:21:45,840 --> 00:21:49,679
is a

00:21:46,400 --> 00:21:51,440
reuse reuse pattern um and usually when

00:21:49,679 --> 00:21:52,880
we think of reuse patterns we think of

00:21:51,440 --> 00:21:54,000
object orientation we think of

00:21:52,880 --> 00:21:56,559
inheritance

00:21:54,000 --> 00:21:58,640
and in in perl using moose or moo you

00:21:56,559 --> 00:22:02,400
might be thinking of roles okay

00:21:58,640 --> 00:22:04,799
uh but because the the uh

00:22:02,400 --> 00:22:06,480
web frameworks and working with the web

00:22:04,799 --> 00:22:08,320
it tends to be sort of a pipeline thing

00:22:06,480 --> 00:22:10,720
right like the request comes in

00:22:08,320 --> 00:22:13,039
you do some stuff you build a response

00:22:10,720 --> 00:22:15,280
each of these are discrete steps right

00:22:13,039 --> 00:22:16,559
uh you might have some authorization uh

00:22:15,280 --> 00:22:17,760
you might have so i think you might have

00:22:16,559 --> 00:22:18,640
some authentication and then some

00:22:17,760 --> 00:22:20,400
authorization

00:22:18,640 --> 00:22:22,400
et cetera et cetera et cetera right so

00:22:20,400 --> 00:22:25,440
these are individual discrete steps

00:22:22,400 --> 00:22:26,240
so um the chain of responsibility

00:22:25,440 --> 00:22:28,559
pattern

00:22:26,240 --> 00:22:29,520
actually fits i think the web a little

00:22:28,559 --> 00:22:32,720
bit better

00:22:29,520 --> 00:22:35,840
than classic thoughts of reusability

00:22:32,720 --> 00:22:39,280
with roles and and inheritance so let's

00:22:35,840 --> 00:22:42,559
look at example of this

00:22:39,280 --> 00:22:45,679
okay so in catalyst um

00:22:42,559 --> 00:22:48,880
we can break up a request

00:22:45,679 --> 00:22:52,559
across multiple chained actions

00:22:48,880 --> 00:22:53,760
okay so in this case my request will

00:22:52,559 --> 00:22:55,840
come in

00:22:53,760 --> 00:22:57,280
it first hits it will first hit the root

00:22:55,840 --> 00:22:59,120
action

00:22:57,280 --> 00:23:00,799
and then depending on whether the

00:22:59,120 --> 00:23:03,520
request is a get

00:23:00,799 --> 00:23:04,799
or a post it will either go to the

00:23:03,520 --> 00:23:09,120
summary list

00:23:04,799 --> 00:23:12,559
action or to the add action

00:23:09,120 --> 00:23:14,320
excuse me um i'm gonna pause here for a

00:23:12,559 --> 00:23:17,200
moment and talk about chaining

00:23:14,320 --> 00:23:18,799
i understand that a lot of people find

00:23:17,200 --> 00:23:22,000
chaining complicated

00:23:18,799 --> 00:23:24,880
it's actually not that hard okay

00:23:22,000 --> 00:23:26,480
what you need to think about is there's

00:23:24,880 --> 00:23:30,080
two parts to the chaining

00:23:26,480 --> 00:23:33,600
okay there's the the change attribute

00:23:30,080 --> 00:23:36,240
which we which refers to the action name

00:23:33,600 --> 00:23:37,679
that you're chaining from or in the case

00:23:36,240 --> 00:23:40,159
of the first

00:23:37,679 --> 00:23:41,440
element of the chain it's just the slash

00:23:40,159 --> 00:23:44,080
so you can see there

00:23:41,440 --> 00:23:45,600
where it says root chain slash that

00:23:44,080 --> 00:23:48,880
means it's the beginning of the chain

00:23:45,600 --> 00:23:51,360
okay then down here it says summary list

00:23:48,880 --> 00:23:53,520
it says chained root now one thing that

00:23:51,360 --> 00:23:56,960
gets people confused sometimes

00:23:53,520 --> 00:24:00,400
is they they they don't realize

00:23:56,960 --> 00:24:02,640
that the value of change is

00:24:00,400 --> 00:24:04,559
supposed to be the action that you're

00:24:02,640 --> 00:24:06,320
chaining from right

00:24:04,559 --> 00:24:07,760
people have a tendency to think in terms

00:24:06,320 --> 00:24:10,640
of urls

00:24:07,760 --> 00:24:12,080
or url parts which is fine but in the

00:24:10,640 --> 00:24:15,279
case of chaining

00:24:12,080 --> 00:24:18,000
that value for chained is

00:24:15,279 --> 00:24:19,200
it should be the name of the action

00:24:18,000 --> 00:24:22,320
you're chaining from

00:24:19,200 --> 00:24:24,080
now that name can be a relative name or

00:24:22,320 --> 00:24:26,880
it can be an absolute name

00:24:24,080 --> 00:24:28,000
okay so in this case i'm using a rel a

00:24:26,880 --> 00:24:30,080
relative name

00:24:28,000 --> 00:24:31,760
it's relative to the to the current

00:24:30,080 --> 00:24:35,120
controller okay

00:24:31,760 --> 00:24:38,480
but you could easily chain uh from a

00:24:35,120 --> 00:24:40,960
action in a con in a controller

00:24:38,480 --> 00:24:42,960
uh in a different name space by by just

00:24:40,960 --> 00:24:46,080
simply putting in the full

00:24:42,960 --> 00:24:49,679
or additional relative name spacing

00:24:46,080 --> 00:24:51,440
information here okay and path part

00:24:49,679 --> 00:24:53,440
now path part changes a little bit

00:24:51,440 --> 00:24:55,840
because path part actually refers

00:24:53,440 --> 00:24:56,640
to the part of the url that you're

00:24:55,840 --> 00:24:59,600
mapping

00:24:56,640 --> 00:25:00,240
okay and then finally args or capture

00:24:59,600 --> 00:25:03,120
args

00:25:00,240 --> 00:25:04,400
capture args indicates that it's not the

00:25:03,120 --> 00:25:06,480
end of the chain

00:25:04,400 --> 00:25:07,440
whereas args means yes i'm at the end of

00:25:06,480 --> 00:25:09,360
the chain

00:25:07,440 --> 00:25:10,720
okay so that's why rude is saying

00:25:09,360 --> 00:25:13,679
capture args

00:25:10,720 --> 00:25:15,120
whereas summary list and ed are saying

00:25:13,679 --> 00:25:18,640
art because those are those are

00:25:15,120 --> 00:25:20,480
end points okay um and in any case you

00:25:18,640 --> 00:25:22,559
could add

00:25:20,480 --> 00:25:24,080
anywhere from zero to as many capture

00:25:22,559 --> 00:25:27,440
bits as you want

00:25:24,080 --> 00:25:28,400
okay do you have a question about that

00:25:27,440 --> 00:25:30,080
i'm sure you i'm

00:25:28,400 --> 00:25:33,200
you must because i know people always

00:25:30,080 --> 00:25:33,200
have questions about chaining

00:25:37,840 --> 00:25:42,320
you're all very shy today all right well

00:25:40,799 --> 00:25:42,720
let's just move on if you come up with

00:25:42,320 --> 00:25:45,760
it

00:25:42,720 --> 00:25:48,159
later on feel free to to stop me

00:25:45,760 --> 00:25:49,039
all right so just to go through it uh so

00:25:48,159 --> 00:25:51,679
we'll see here

00:25:49,039 --> 00:25:53,440
a request will come in um and if it's a

00:25:51,679 --> 00:25:54,640
get it goes first to root and then the

00:25:53,440 --> 00:25:56,559
summary list

00:25:54,640 --> 00:25:58,320
and then if it's a if it's a post it

00:25:56,559 --> 00:25:59,279
goes to root and then to add

00:25:58,320 --> 00:26:02,000
and we're breaking up the

00:25:59,279 --> 00:26:04,480
responsibilities here by saying that

00:26:02,000 --> 00:26:06,320
first we're creating a view called

00:26:04,480 --> 00:26:06,880
summary list and we're populating with

00:26:06,320 --> 00:26:09,679
items

00:26:06,880 --> 00:26:10,400
now both summary list and add need that

00:26:09,679 --> 00:26:13,200
model

00:26:10,400 --> 00:26:13,440
okay they need that view but in the case

00:26:13,200 --> 00:26:16,080
of

00:26:13,440 --> 00:26:17,120
get i'm simply saying okay just go ahead

00:26:16,080 --> 00:26:20,320
and

00:26:17,120 --> 00:26:22,000
http okay you know display it whereas if

00:26:20,320 --> 00:26:23,600
it's a post

00:26:22,000 --> 00:26:25,679
i'm going to do something i'm going to

00:26:23,600 --> 00:26:28,720
be doing some validation

00:26:25,679 --> 00:26:30,559
on the incoming post and saying if it's

00:26:28,720 --> 00:26:33,279
okay or if it's a bad request

00:26:30,559 --> 00:26:33,799
right so in this case we've broken up

00:26:33,279 --> 00:26:38,320
the

00:26:33,799 --> 00:26:43,120
responsibilities of preparing the view

00:26:38,320 --> 00:26:43,120
from what to do with the view okay

00:26:43,600 --> 00:26:50,400
now and and you can use this

00:26:46,640 --> 00:26:53,520
to break up your logical flow

00:26:50,400 --> 00:26:55,919
in a w that helps promote reusability

00:26:53,520 --> 00:26:56,640
if you didn't have chaining you what you

00:26:55,919 --> 00:26:59,360
would end up

00:26:56,640 --> 00:27:00,159
probably end up having to do is you'd be

00:26:59,360 --> 00:27:03,200
preparing that

00:27:00,159 --> 00:27:07,840
that view in both methods separately so

00:27:03,200 --> 00:27:07,840
you would have repeated code

00:27:10,159 --> 00:27:14,480
questions about change of responsibility

00:27:17,120 --> 00:27:21,279
okay now let's talk about catalyst

00:27:18,960 --> 00:27:24,399
components so what's a component

00:27:21,279 --> 00:27:26,080
um you use components all the time

00:27:24,399 --> 00:27:27,520
the controller is a component a model is

00:27:26,080 --> 00:27:31,039
a component a viewer's

00:27:27,520 --> 00:27:33,200
component um all three inherit from the

00:27:31,039 --> 00:27:36,159
catalyst component base class

00:27:33,200 --> 00:27:38,240
and a component is basically it's just

00:27:36,159 --> 00:27:41,279
an abstraction

00:27:38,240 --> 00:27:43,039
that allows us to separate how an object

00:27:41,279 --> 00:27:49,840
is created

00:27:43,039 --> 00:27:49,840
from the use where that object is used

00:27:50,559 --> 00:27:54,960
so here's an example okay of not using a

00:27:54,080 --> 00:27:58,559
component

00:27:54,960 --> 00:27:59,279
right let's say you know that you need

00:27:58,559 --> 00:28:02,480
to get

00:27:59,279 --> 00:28:03,440
a result set of users you know a list of

00:28:02,480 --> 00:28:06,640
users

00:28:03,440 --> 00:28:08,480
and in order to do that you need to

00:28:06,640 --> 00:28:10,399
get the schema object and connect it to

00:28:08,480 --> 00:28:13,200
a database

00:28:10,399 --> 00:28:15,039
so you could do this and you could

00:28:13,200 --> 00:28:17,120
repeat it everywhere you need it

00:28:15,039 --> 00:28:19,440
which would as we all know not be the

00:28:17,120 --> 00:28:21,840
best thing to do

00:28:19,440 --> 00:28:22,640
you'd end up with a lot of repeated code

00:28:21,840 --> 00:28:24,559
um

00:28:22,640 --> 00:28:25,840
and in addition if you needed to do

00:28:24,559 --> 00:28:27,760
something like

00:28:25,840 --> 00:28:29,279
change the database or point the

00:28:27,760 --> 00:28:30,720
database someplace else

00:28:29,279 --> 00:28:32,480
you would have to fix this code

00:28:30,720 --> 00:28:34,159
everywhere okay

00:28:32,480 --> 00:28:36,640
additionally it's got some other

00:28:34,159 --> 00:28:40,559
downsides as you can see

00:28:36,640 --> 00:28:43,760
you need to this controller becomes tied

00:28:40,559 --> 00:28:45,840
to dbi as well as dvd pg so

00:28:43,760 --> 00:28:47,679
let's just say someday in the future you

00:28:45,840 --> 00:28:51,200
move from postgres

00:28:47,679 --> 00:28:55,840
um to some other storage system

00:28:51,200 --> 00:28:59,039
okay uh and

00:28:55,840 --> 00:29:02,399
all your logic has been tied to

00:28:59,039 --> 00:29:04,880
a specific implementation right

00:29:02,399 --> 00:29:06,159
so in your code as to the degree that's

00:29:04,880 --> 00:29:08,399
reasonable and possible

00:29:06,159 --> 00:29:09,520
you want to avoid tying your code to an

00:29:08,399 --> 00:29:12,480
implementation

00:29:09,520 --> 00:29:15,200
you prefer to tie it to an interface an

00:29:12,480 --> 00:29:17,919
interface can be re-implemented

00:29:15,200 --> 00:29:19,279
a if you're tied to an implementation

00:29:17,919 --> 00:29:20,799
obviously you have to change all your

00:29:19,279 --> 00:29:23,360
code

00:29:20,799 --> 00:29:25,039
so here's what it looks like and what

00:29:23,360 --> 00:29:28,720
you're probably used to seeing it used

00:29:25,039 --> 00:29:28,720
looking like when you do catalyst

00:29:29,760 --> 00:29:33,919
so here i don't need to use dbi or dbd

00:29:32,399 --> 00:29:35,840
or any of the other bits

00:29:33,919 --> 00:29:37,200
i get to remove that code so my

00:29:35,840 --> 00:29:40,720
controller is not

00:29:37,200 --> 00:29:42,960
tied to that and i am not

00:29:40,720 --> 00:29:46,240
implementing or creating the schema or

00:29:42,960 --> 00:29:50,000
anything i'm just simply saying give me

00:29:46,240 --> 00:29:51,840
uh a user model and i'm going to

00:29:50,000 --> 00:29:55,840
abstract into the user model all the

00:29:51,840 --> 00:29:55,840
necessary bits

00:30:02,000 --> 00:30:06,159
so this is um just a quick overview of

00:30:04,960 --> 00:30:08,320
what a catalyst component

00:30:06,159 --> 00:30:09,760
sort of looks like under the hood it's

00:30:08,320 --> 00:30:10,559
got it's got actually a number of

00:30:09,760 --> 00:30:12,159
methods

00:30:10,559 --> 00:30:14,880
but the three methods that we care about

00:30:12,159 --> 00:30:18,720
the most the first one is config

00:30:14,880 --> 00:30:21,279
config handles um any uh

00:30:18,720 --> 00:30:22,320
any like application level settings for

00:30:21,279 --> 00:30:24,399
your component

00:30:22,320 --> 00:30:25,440
so for example a good a good example of

00:30:24,399 --> 00:30:27,679
an implementation

00:30:25,440 --> 00:30:28,559
of a of a application setting would be

00:30:27,679 --> 00:30:31,120
things like

00:30:28,559 --> 00:30:32,559
your database password right because

00:30:31,120 --> 00:30:33,919
that doesn't change

00:30:32,559 --> 00:30:35,919
while the application is running

00:30:33,919 --> 00:30:37,039
generally it lasts for as long as the

00:30:35,919 --> 00:30:40,399
application runs

00:30:37,039 --> 00:30:41,279
now generally when you're doing this in

00:30:40,399 --> 00:30:43,600
catalyst

00:30:41,279 --> 00:30:46,080
you won't put the those kind of things

00:30:43,600 --> 00:30:48,320
directly into the component

00:30:46,080 --> 00:30:50,720
you'll put them in either in your

00:30:48,320 --> 00:30:51,440
application class or in a configuration

00:30:50,720 --> 00:30:54,480
file

00:30:51,440 --> 00:30:56,320
but the configuration method is here

00:30:54,480 --> 00:30:59,600
and then you have two other bits of

00:30:56,320 --> 00:31:02,480
component uh the first part is

00:30:59,600 --> 00:31:02,880
is is the component method this method

00:31:02,480 --> 00:31:06,080
gets

00:31:02,880 --> 00:31:10,399
called when the application is set up

00:31:06,080 --> 00:31:12,399
okay and it's expected to return a class

00:31:10,399 --> 00:31:13,840
which is then considered an application

00:31:12,399 --> 00:31:16,960
singleton

00:31:13,840 --> 00:31:18,960
right optionally

00:31:16,960 --> 00:31:20,480
you can in addition having a component

00:31:18,960 --> 00:31:23,200
you could add an accept

00:31:20,480 --> 00:31:25,519
context method when you have an accept

00:31:23,200 --> 00:31:28,799
context method on catalyst component

00:31:25,519 --> 00:31:30,559
what that does is it makes it so that

00:31:28,799 --> 00:31:33,760
you can tweak

00:31:30,559 --> 00:31:37,039
your component per request

00:31:33,760 --> 00:31:38,960
so what does that mean uh application

00:31:37,039 --> 00:31:40,320
something that's an application scope to

00:31:38,960 --> 00:31:42,880
might be something like

00:31:40,320 --> 00:31:44,880
a connection to your database right

00:31:42,880 --> 00:31:46,720
because that doesn't change

00:31:44,880 --> 00:31:49,600
something that would be context-based

00:31:46,720 --> 00:31:52,399
that might accept context would be

00:31:49,600 --> 00:31:53,440
a model that would validate incoming

00:31:52,399 --> 00:31:55,679
parameters

00:31:53,440 --> 00:31:57,519
to make sure that they're valid right

00:31:55,679 --> 00:31:58,399
because that changes for every single

00:31:57,519 --> 00:32:00,880
request

00:31:58,399 --> 00:32:02,480
you'll have different parameters right

00:32:00,880 --> 00:32:05,200
so you can use

00:32:02,480 --> 00:32:06,399
either one or both in concert to build

00:32:05,200 --> 00:32:09,519
components

00:32:06,399 --> 00:32:11,039
uh that map to the life cycle that

00:32:09,519 --> 00:32:12,399
you're looking for either application

00:32:11,039 --> 00:32:15,840
life cycle or

00:32:12,399 --> 00:32:15,840
request life cycle

00:32:17,919 --> 00:32:21,679
as i said before everything is a

00:32:19,840 --> 00:32:22,640
component in in catalyst including

00:32:21,679 --> 00:32:24,720
controllers

00:32:22,640 --> 00:32:25,840
generally we see control we leave

00:32:24,720 --> 00:32:28,559
controllers as

00:32:25,840 --> 00:32:30,080
as singletons because we just want to

00:32:28,559 --> 00:32:31,760
avoid the overhead

00:32:30,080 --> 00:32:34,000
of making of creating a new controller

00:32:31,760 --> 00:32:35,679
every single time

00:32:34,000 --> 00:32:37,279
but there's no reason why you couldn't i

00:32:35,679 --> 00:32:41,200
just generally don't

00:32:37,279 --> 00:32:44,000
okay let's see what the time is kind of

00:32:41,200 --> 00:32:45,679
running short so let's move through

00:32:44,000 --> 00:32:47,519
so as i mentioned there's a component

00:32:45,679 --> 00:32:48,960
life cycle and that's controlled by

00:32:47,519 --> 00:32:51,440
whether and generally

00:32:48,960 --> 00:32:52,159
it's going to be whether or not you have

00:32:51,440 --> 00:32:55,440
out except

00:32:52,159 --> 00:32:56,000
context okay if you're if your component

00:32:55,440 --> 00:32:57,679
only has

00:32:56,000 --> 00:32:59,760
a comp point component only as it does

00:32:57,679 --> 00:33:02,080
the component method that means

00:32:59,760 --> 00:33:03,600
that it's this life cycle is the life

00:33:02,080 --> 00:33:05,360
cycle of the entire application

00:33:03,600 --> 00:33:07,039
every time you call every time you call

00:33:05,360 --> 00:33:08,840
for that component you get the exact

00:33:07,039 --> 00:33:11,279
same one

00:33:08,840 --> 00:33:12,240
okay and since you're getting the exact

00:33:11,279 --> 00:33:14,480
same one

00:33:12,240 --> 00:33:18,000
you really don't pass arguments to it

00:33:14,480 --> 00:33:18,000
because the arguments are useless

00:33:18,799 --> 00:33:23,039
so here's an example of a model that

00:33:21,600 --> 00:33:26,080
would that would be useful

00:33:23,039 --> 00:33:26,480
from the context of application you

00:33:26,080 --> 00:33:28,559
might

00:33:26,480 --> 00:33:30,240
have a model that represents the

00:33:28,559 --> 00:33:30,960
licensing information copyright

00:33:30,240 --> 00:33:33,360
versioning of

00:33:30,960 --> 00:33:34,799
information about your application and

00:33:33,360 --> 00:33:39,200
this doesn't change while the

00:33:34,799 --> 00:33:41,440
application is running

00:33:39,200 --> 00:33:43,440
you might configure it this way remember

00:33:41,440 --> 00:33:45,120
i mean i said that your configuration

00:33:43,440 --> 00:33:47,039
usually goes either in the application

00:33:45,120 --> 00:33:49,360
class or into a standalone configuration

00:33:47,039 --> 00:33:49,360
file

00:33:49,679 --> 00:33:53,840
so that's how that see how that fits

00:33:56,159 --> 00:33:59,679
and here's how you might use it in a

00:33:57,519 --> 00:34:01,200
controller right somebody

00:33:59,679 --> 00:34:04,399
requests the info method and you're

00:34:01,200 --> 00:34:07,519
going to give the version information

00:34:04,399 --> 00:34:10,639
again this never changes

00:34:07,519 --> 00:34:12,800
during the life cycle of the application

00:34:10,639 --> 00:34:14,320
but what about when you want to have

00:34:12,800 --> 00:34:14,720
thing you will you want to have a model

00:34:14,320 --> 00:34:17,359
that

00:34:14,720 --> 00:34:19,040
that is that does change on the per

00:34:17,359 --> 00:34:19,839
request and it can know about the

00:34:19,040 --> 00:34:21,440
request

00:34:19,839 --> 00:34:23,839
as i said maybe things like incoming

00:34:21,440 --> 00:34:25,119
parameters well let's look at an example

00:34:23,839 --> 00:34:28,000
of something like that

00:34:25,119 --> 00:34:30,000
so i've taken the previous one and i've

00:34:28,000 --> 00:34:33,280
made it a little more complicated

00:34:30,000 --> 00:34:37,119
okay and we've added a

00:34:33,280 --> 00:34:40,240
an attribute called total requests

00:34:37,119 --> 00:34:41,200
and this model accepts context as you

00:34:40,240 --> 00:34:44,240
can see here it

00:34:41,200 --> 00:34:45,839
it looks at the the there's a there's a

00:34:44,240 --> 00:34:48,399
an environ there's a variable a global

00:34:45,839 --> 00:34:49,599
variable in in the catalyst application

00:34:48,399 --> 00:34:52,320
class called count

00:34:49,599 --> 00:34:54,560
which just basically keeps count of the

00:34:52,320 --> 00:34:57,359
number of requests that have happened

00:34:54,560 --> 00:34:58,560
uh during the entire life cycle of the

00:34:57,359 --> 00:35:00,320
of the application

00:34:58,560 --> 00:35:01,920
so it's got a couple of bits here that

00:35:00,320 --> 00:35:03,359
never change and then the request

00:35:01,920 --> 00:35:04,560
changes so that's why it needs to accept

00:35:03,359 --> 00:35:05,200
contacts because that's going to be

00:35:04,560 --> 00:35:08,000
different

00:35:05,200 --> 00:35:08,000
every single time

00:35:10,160 --> 00:35:14,079
um just going back here what i mean by a

00:35:12,480 --> 00:35:17,359
factory component in this case

00:35:14,079 --> 00:35:20,240
you can see i'm saying return new

00:35:17,359 --> 00:35:22,079
on this actual on the actual model

00:35:20,240 --> 00:35:25,599
generally

00:35:22,079 --> 00:35:28,640
it's better to abstract

00:35:25,599 --> 00:35:32,000
your model into

00:35:28,640 --> 00:35:35,359
a standalone class okay

00:35:32,000 --> 00:35:38,160
so here i have my app model application

00:35:35,359 --> 00:35:39,119
meta factory right that's what catalyst

00:35:38,160 --> 00:35:42,079
knows about

00:35:39,119 --> 00:35:44,960
and it it's saying accept context and

00:35:42,079 --> 00:35:47,359
it's returning an instance not of

00:35:44,960 --> 00:35:49,599
my app model application meta factory

00:35:47,359 --> 00:35:51,760
it's returning an instance of my app

00:35:49,599 --> 00:35:53,200
application meta so the reason you'd

00:35:51,760 --> 00:35:55,599
want to do this is

00:35:53,200 --> 00:35:58,079
ideally you want your models and views

00:35:55,599 --> 00:36:01,599
and everything as much as possible

00:35:58,079 --> 00:36:04,640
to be standalone so that it's not

00:36:01,599 --> 00:36:05,839
tied into catalyst you're using your

00:36:04,640 --> 00:36:09,200
model

00:36:05,839 --> 00:36:10,960
as a proxy for that underlying

00:36:09,200 --> 00:36:12,320
concrete class just to show you what the

00:36:10,960 --> 00:36:15,920
concrete class looks like

00:36:12,320 --> 00:36:18,000
it looks like this right and it's

00:36:15,920 --> 00:36:19,040
it's not under the uh catalyst name

00:36:18,000 --> 00:36:21,839
space at all

00:36:19,040 --> 00:36:23,359
right it's just a standalone bit this is

00:36:21,839 --> 00:36:24,800
nice because it makes it easier for

00:36:23,359 --> 00:36:27,280
testing as well by the way

00:36:24,800 --> 00:36:27,839
like you can easily write a test case

00:36:27,280 --> 00:36:31,200
for

00:36:27,839 --> 00:36:33,280
for this whereas right

00:36:31,200 --> 00:36:34,400
in this case this is much harder because

00:36:33,280 --> 00:36:35,680
you have to create an instance of

00:36:34,400 --> 00:36:36,560
catalyst and you got to do a bunch of

00:36:35,680 --> 00:36:40,640
other things

00:36:36,560 --> 00:36:43,040
okay it also is cool because

00:36:40,640 --> 00:36:45,359
you can change the implementation here

00:36:43,040 --> 00:36:47,520
now this is a very simple

00:36:45,359 --> 00:36:49,200
class but just imagine it might be

00:36:47,520 --> 00:36:51,359
complicated it might be

00:36:49,200 --> 00:36:52,560
something that's backed by a database

00:36:51,359 --> 00:36:55,599
right

00:36:52,560 --> 00:36:57,280
and you might be using say my sequel

00:36:55,599 --> 00:36:58,560
for your database and then someday you

00:36:57,280 --> 00:36:59,280
get smart and you want to change the

00:36:58,560 --> 00:37:02,880
postgres

00:36:59,280 --> 00:37:05,920
right then you can change it here

00:37:02,880 --> 00:37:09,359
at your at your class level

00:37:05,920 --> 00:37:10,960
and it does you won't it won't actually

00:37:09,359 --> 00:37:13,359
break anything in catalyst

00:37:10,960 --> 00:37:14,800
right because you've separated out your

00:37:13,359 --> 00:37:17,280
actual implementation

00:37:14,800 --> 00:37:19,119
from the interface so the interface is

00:37:17,280 --> 00:37:20,240
version license copyright total request

00:37:19,119 --> 00:37:22,400
and any methods

00:37:20,240 --> 00:37:23,839
that it creates whereas your

00:37:22,400 --> 00:37:25,680
implementation this is your actual

00:37:23,839 --> 00:37:27,440
concrete implementation

00:37:25,680 --> 00:37:29,119
does anybody have any questions about

00:37:27,440 --> 00:37:30,079
what i mean here by the differences

00:37:29,119 --> 00:37:32,720
between the com

00:37:30,079 --> 00:37:33,920
a concrete implementation of something

00:37:32,720 --> 00:37:38,240
versus

00:37:33,920 --> 00:37:38,240
using a mapping the interface

00:37:39,520 --> 00:37:44,560
which i could see people's faces since i

00:37:41,359 --> 00:37:44,560
would know if you're confused or not

00:37:48,079 --> 00:37:51,200
by the way can somebody shout out so i

00:37:49,599 --> 00:37:53,359
know that i'm still connected my

00:37:51,200 --> 00:37:54,960
internet's kind of shaky

00:37:53,359 --> 00:37:57,839
somebody just say like yeah i'm here

00:37:54,960 --> 00:38:01,839
you're good everything's fine

00:37:57,839 --> 00:38:04,880
thank you thank you all right

00:38:01,839 --> 00:38:09,280
so just a couple bits on components

00:38:04,880 --> 00:38:11,520
just remember um a context

00:38:09,280 --> 00:38:12,480
if we were if we were redoing catalyst

00:38:11,520 --> 00:38:14,320
from scratch

00:38:12,480 --> 00:38:15,520
we probably would only have context

00:38:14,320 --> 00:38:17,280
scoped components

00:38:15,520 --> 00:38:18,960
because the context scope components can

00:38:17,280 --> 00:38:20,480
be used to build any other type of scope

00:38:18,960 --> 00:38:23,520
including application

00:38:20,480 --> 00:38:24,720
this was the approach that sri took when

00:38:23,520 --> 00:38:27,920
he did

00:38:24,720 --> 00:38:28,720
mojolicious the in general everything is

00:38:27,920 --> 00:38:30,400
cold

00:38:28,720 --> 00:38:32,560
from what i can tell everything is

00:38:30,400 --> 00:38:35,599
called in what we would call um

00:38:32,560 --> 00:38:38,000
uh except context scope and then he just

00:38:35,599 --> 00:38:39,280
returns makes global variables and stuff

00:38:38,000 --> 00:38:41,839
uh for when something is

00:38:39,280 --> 00:38:42,800
is meant as to be a uh to be an

00:38:41,839 --> 00:38:44,720
application scope

00:38:42,800 --> 00:38:46,560
it's this way in catalyst because

00:38:44,720 --> 00:38:48,320
application scope came first

00:38:46,560 --> 00:38:49,680
and except context scope was an idea

00:38:48,320 --> 00:38:50,960
that was added in afterwards when it

00:38:49,680 --> 00:38:53,200
turned out to be useful

00:38:50,960 --> 00:38:54,079
um but there's one thing that's really

00:38:53,200 --> 00:38:57,119
handy about it

00:38:54,079 --> 00:39:00,160
is that it makes it so that you can

00:38:57,119 --> 00:39:02,400
you can actually create a class in your

00:39:00,160 --> 00:39:04,560
application scope and then have that

00:39:02,400 --> 00:39:06,640
class return a different class in

00:39:04,560 --> 00:39:08,079
context scope and that can be used for

00:39:06,640 --> 00:39:09,040
doing really interesting complicated

00:39:08,079 --> 00:39:10,720
things

00:39:09,040 --> 00:39:12,160
that you might want to avoid unless you

00:39:10,720 --> 00:39:14,800
really need it

00:39:12,160 --> 00:39:16,880
but in any case your main goal here is

00:39:14,800 --> 00:39:18,079
you want to separate the wiring between

00:39:16,880 --> 00:39:21,520
all your bits

00:39:18,079 --> 00:39:23,200
um one thing to watch out for is

00:39:21,520 --> 00:39:25,119
watch out for performance because again

00:39:23,200 --> 00:39:26,000
it's this is perl it's an interpreted

00:39:25,119 --> 00:39:28,000
language

00:39:26,000 --> 00:39:29,440
uh you could easily end up creating tons

00:39:28,000 --> 00:39:31,920
and tons of objects

00:39:29,440 --> 00:39:33,599
this way and that might kill performance

00:39:31,920 --> 00:39:35,839
uh so that's something just to keep in

00:39:33,599 --> 00:39:35,839
mind

00:39:37,119 --> 00:39:41,040
and just again repeated uh context

00:39:39,440 --> 00:39:42,400
scoping can be used to build any other

00:39:41,040 --> 00:39:44,240
type of scope

00:39:42,400 --> 00:39:45,520
including something so what's another

00:39:44,240 --> 00:39:46,400
type of scope so we've talked about

00:39:45,520 --> 00:39:47,680
application scope

00:39:46,400 --> 00:39:50,240
and we've targeted we've talked about

00:39:47,680 --> 00:39:52,000
except context scope which returns a new

00:39:50,240 --> 00:39:53,280
model every single time review every

00:39:52,000 --> 00:39:56,000
single time you call it

00:39:53,280 --> 00:39:56,720
uh what happens if you want to what you

00:39:56,000 --> 00:39:59,839
might want a

00:39:56,720 --> 00:40:02,320
a model that endures uh

00:39:59,839 --> 00:40:03,760
for the entire request cycle right in

00:40:02,320 --> 00:40:05,119
other words every time you call for it

00:40:03,760 --> 00:40:07,839
you get the same one

00:40:05,119 --> 00:40:09,680
but only for a single request so this is

00:40:07,839 --> 00:40:13,440
what the code for that might look like

00:40:09,680 --> 00:40:14,000
right in this case what i'm doing here

00:40:13,440 --> 00:40:17,280
is

00:40:14,000 --> 00:40:20,880
um yeah i'm saying i'm looking here

00:40:17,280 --> 00:40:22,560
and if the model exists i return it

00:40:20,880 --> 00:40:25,520
otherwise build it

00:40:22,560 --> 00:40:26,079
okay um this is actually a really useful

00:40:25,520 --> 00:40:28,319
pattern

00:40:26,079 --> 00:40:29,200
and because it's useful uh it's been

00:40:28,319 --> 00:40:33,440
abstracted

00:40:29,200 --> 00:40:35,839
into a control a component role

00:40:33,440 --> 00:40:37,520
which you should be familiar with

00:40:35,839 --> 00:40:41,040
catalyst component instance for

00:40:37,520 --> 00:40:42,319
context and it basically just

00:40:41,040 --> 00:40:44,240
you just do an implement you have to

00:40:42,319 --> 00:40:45,599
implement a method called build for

00:40:44,240 --> 00:40:48,000
context instance

00:40:45,599 --> 00:40:48,880
then this is basically it it returns to

00:40:48,000 --> 00:40:52,240
you

00:40:48,880 --> 00:40:53,200
um either a new instance of what you're

00:40:52,240 --> 00:40:55,520
calling for

00:40:53,200 --> 00:40:56,880
or if it's already been created once

00:40:55,520 --> 00:40:58,960
during the

00:40:56,880 --> 00:41:00,720
life cycle of the request it returns the

00:40:58,960 --> 00:41:03,200
same one

00:41:00,720 --> 00:41:04,960
that could be confusing i know one of

00:41:03,200 --> 00:41:09,760
you must be confused about that

00:41:04,960 --> 00:41:09,760
don't be shy ask me a question

00:41:11,040 --> 00:41:15,680
it's like if you just spin up a foo out

00:41:13,920 --> 00:41:17,359
of nowhere

00:41:15,680 --> 00:41:18,880
these things don't look familiar to me

00:41:17,359 --> 00:41:22,319
like if you do the

00:41:18,880 --> 00:41:23,839
starter package and create a foo app

00:41:22,319 --> 00:41:26,000
i don't i don't recognize these things

00:41:23,839 --> 00:41:26,880
from the for the scaffolding that it

00:41:26,000 --> 00:41:29,359
builds

00:41:26,880 --> 00:41:31,920
sure i mean unfortunately the scaffold

00:41:29,359 --> 00:41:31,920
yeah i mean

00:41:32,839 --> 00:41:38,480
the it would probably be ideal if there

00:41:36,880 --> 00:41:39,839
was like a totally new like catalyst

00:41:38,480 --> 00:41:43,520
book or catalyst like

00:41:39,839 --> 00:41:44,880
how to thing um i don't have time to

00:41:43,520 --> 00:41:46,880
write it myself

00:41:44,880 --> 00:41:48,079
somebody wants to work on that with me

00:41:46,880 --> 00:41:51,119
please hit me up on

00:41:48,079 --> 00:41:54,319
irc and we can we can build it out um

00:41:51,119 --> 00:41:56,560
yeah i mean unfortunately a lot of these

00:41:54,319 --> 00:41:58,720
uh uh when when that stuff was written

00:41:56,560 --> 00:41:59,440
uh at the very beginning of the catalyst

00:41:58,720 --> 00:42:00,960
project

00:41:59,440 --> 00:42:02,480
a lot of these ideas hadn't popped up

00:42:00,960 --> 00:42:05,200
yet

00:42:02,480 --> 00:42:07,599
and as a result when they did pop up

00:42:05,200 --> 00:42:10,560
people implemented it implemented them

00:42:07,599 --> 00:42:13,440
documented them on uh on cpan and then

00:42:10,560 --> 00:42:16,480
moved on with their work

00:42:13,440 --> 00:42:18,560
i mean yes no doubt the project does

00:42:16,480 --> 00:42:20,079
does suffer from a lack of volunteers to

00:42:18,560 --> 00:42:21,920
keep the to keep all these best

00:42:20,079 --> 00:42:23,599
practices and documentation up

00:42:21,920 --> 00:42:26,319
up to date with all the examples you

00:42:23,599 --> 00:42:29,119
know we do the best we can but it's uh

00:42:26,319 --> 00:42:30,480
you know it's a i mean it's pearl's her

00:42:29,119 --> 00:42:32,000
community is small

00:42:30,480 --> 00:42:33,760
most of us who do pearl are working

00:42:32,000 --> 00:42:36,400
full-time and uh

00:42:33,760 --> 00:42:37,200
it's you know difficult to keep it up

00:42:36,400 --> 00:42:39,680
but

00:42:37,200 --> 00:42:41,359
uh yeah sorry i know you've probably

00:42:39,680 --> 00:42:45,839
never seen this before then

00:42:41,359 --> 00:42:45,839
well i'm showing it to you now

00:42:47,599 --> 00:42:50,960
nobody else has got any questions i'll

00:42:49,520 --> 00:42:52,880
i'll send i'll send

00:42:50,960 --> 00:42:54,240
bitcoin satoshi's to anybody to ask me a

00:42:52,880 --> 00:42:58,720
question just send me your

00:42:54,240 --> 00:42:59,119
your your key address i get satoshi's

00:42:58,720 --> 00:43:01,200
for the

00:42:59,119 --> 00:43:03,440
questions i've already asked do i get

00:43:01,200 --> 00:43:07,119
more if i ask more

00:43:03,440 --> 00:43:07,119
if you ask me more you'll get more yeah

00:43:07,280 --> 00:43:10,560
just send me your key i'll send

00:43:09,119 --> 00:43:10,960
everybody i'll send anybody ask me a

00:43:10,560 --> 00:43:13,440
question

00:43:10,960 --> 00:43:15,280
a couple satoshis can you go back to the

00:43:13,440 --> 00:43:16,560
slide where you showed the chained

00:43:15,280 --> 00:43:18,880
actions

00:43:16,560 --> 00:43:20,000
sure of course and like i said i don't

00:43:18,880 --> 00:43:20,880
care we don't have to get through all

00:43:20,000 --> 00:43:22,800
these slides

00:43:20,880 --> 00:43:27,839
i just just go over the bits you want to

00:43:22,800 --> 00:43:27,839
talk about

00:43:30,480 --> 00:43:36,160
this one is this the one you mean oh

00:43:33,520 --> 00:43:38,240
that one yes why are we passing zero to

00:43:36,160 --> 00:43:41,359
capture args and args

00:43:38,240 --> 00:43:43,920
okay awesome

00:43:41,359 --> 00:43:44,640
by default when you say capture args or

00:43:43,920 --> 00:43:48,480
args

00:43:44,640 --> 00:43:52,960
and you don't specify a number

00:43:48,480 --> 00:43:54,800
that means capture as many as possible

00:43:52,960 --> 00:43:56,800
as in other words it'll match it'll

00:43:54,800 --> 00:43:59,680
matches and it'll match one to

00:43:56,800 --> 00:44:00,560
as many right and you might not want

00:43:59,680 --> 00:44:03,599
that

00:44:00,560 --> 00:44:06,720
right um so

00:44:03,599 --> 00:44:07,520
it's it's unfortunate that that's the

00:44:06,720 --> 00:44:10,000
default

00:44:07,520 --> 00:44:11,440
like i think like when you when you

00:44:10,000 --> 00:44:13,280
don't specify most people think that

00:44:11,440 --> 00:44:16,400
that should means none

00:44:13,280 --> 00:44:19,280
right um but

00:44:16,400 --> 00:44:21,200
it's it's better to be pedantic so it's

00:44:19,280 --> 00:44:23,599
like why are you even saying arg0

00:44:21,200 --> 00:44:25,680
if i mean none just not saying it

00:44:23,599 --> 00:44:28,319
shouldn't that be good enough

00:44:25,680 --> 00:44:30,240
unfortunately for historical purposes

00:44:28,319 --> 00:44:33,680
when chaining got added on

00:44:30,240 --> 00:44:35,040
to catalyst this because args already

00:44:33,680 --> 00:44:36,720
existed

00:44:35,040 --> 00:44:38,480
they had a and they needed to do this

00:44:36,720 --> 00:44:40,880
for backward compatibility

00:44:38,480 --> 00:44:42,400
um i've actually tried to write layers

00:44:40,880 --> 00:44:44,880
on top of chaining

00:44:42,400 --> 00:44:46,240
uh that help with this to try to make it

00:44:44,880 --> 00:44:48,319
more sane

00:44:46,240 --> 00:44:51,760
and i considered showing that here in

00:44:48,319 --> 00:44:53,839
this presentation but i decided not to

00:44:51,760 --> 00:44:55,440
because um i guess it could be i mean

00:44:53,839 --> 00:44:57,599
it's my opinion it's controversial

00:44:55,440 --> 00:44:58,800
i wanted to stick to the by the book

00:44:57,599 --> 00:45:01,760
stuff but

00:44:58,800 --> 00:45:02,560
um there's very little doubt in my mind

00:45:01,760 --> 00:45:06,800
that the

00:45:02,560 --> 00:45:10,560
syntax for creating chains is not as

00:45:06,800 --> 00:45:12,160
obvious as it could be um and uh happy

00:45:10,560 --> 00:45:14,160
to

00:45:12,160 --> 00:45:16,240
work on improving that with anybody who

00:45:14,160 --> 00:45:18,800
wants to play with it at a later time

00:45:16,240 --> 00:45:19,839
i actually have some some prior art on

00:45:18,800 --> 00:45:22,000
cpan

00:45:19,839 --> 00:45:23,119
uh that i that i use and i think work

00:45:22,000 --> 00:45:24,720
pretty well but

00:45:23,119 --> 00:45:26,800
i didn't want to show that here because

00:45:24,720 --> 00:45:29,280
this this wasn't going to be a

00:45:26,800 --> 00:45:32,800
a presentation on show off all of john

00:45:29,280 --> 00:45:34,240
cpan modules uh thank you i didn't mean

00:45:32,800 --> 00:45:35,760
to derail the talk

00:45:34,240 --> 00:45:38,160
no that's not derailed that's the

00:45:35,760 --> 00:45:39,440
question uh like i said i don't care we

00:45:38,160 --> 00:45:40,800
don't have to get to all these slides

00:45:39,440 --> 00:45:43,200
does anybody have any questions about

00:45:40,800 --> 00:45:43,200
this stuff

00:45:45,359 --> 00:45:48,240
so we're worried

00:45:57,599 --> 00:46:02,560
okay so we're here catalyst components

00:45:59,839 --> 00:46:02,560
and for context

00:46:04,480 --> 00:46:07,599
lifecycle questions

00:46:12,160 --> 00:46:19,440
you could always hit me up on irc later

00:46:15,280 --> 00:46:21,680
okay um oops wrong direction

00:46:19,440 --> 00:46:23,839
so dependency injection what is

00:46:21,680 --> 00:46:26,800
dependency injection as a design pattern

00:46:23,839 --> 00:46:29,200
so again again the idea of a dependency

00:46:26,800 --> 00:46:32,000
injection is you want to separate

00:46:29,200 --> 00:46:33,040
how an object is created from how it's

00:46:32,000 --> 00:46:35,520
being used

00:46:33,040 --> 00:46:36,880
and the upside to doing that it adds

00:46:35,520 --> 00:46:38,960
some complexity

00:46:36,880 --> 00:46:41,280
but the upside to it is that it allows

00:46:38,960 --> 00:46:43,440
you to abstract away

00:46:41,280 --> 00:46:45,920
your actual concrete implementations of

00:46:43,440 --> 00:46:47,599
things from how they're being used

00:46:45,920 --> 00:46:49,119
so that makes it easier for you to

00:46:47,599 --> 00:46:51,200
change how something it works

00:46:49,119 --> 00:46:52,400
under the hood without breaking all your

00:46:51,200 --> 00:46:56,640
existing code

00:46:52,400 --> 00:47:00,160
okay so here's an example of a

00:46:56,640 --> 00:47:01,520
of a uh some business logic uh you maybe

00:47:00,160 --> 00:47:04,400
you may not be familiar with

00:47:01,520 --> 00:47:05,680
uh html form handler but html forehand

00:47:04,400 --> 00:47:08,160
blue handler is

00:47:05,680 --> 00:47:09,680
a system uh made by gerda shank who i

00:47:08,160 --> 00:47:12,160
used to actually work with

00:47:09,680 --> 00:47:14,720
for doing validation okay and for

00:47:12,160 --> 00:47:16,079
creating user interfaces

00:47:14,720 --> 00:47:17,760
just check the time here i got a couple

00:47:16,079 --> 00:47:20,720
minutes uh so

00:47:17,760 --> 00:47:22,240
basically it just simply is saying that

00:47:20,720 --> 00:47:23,920
you have

00:47:22,240 --> 00:47:25,440
you you're required to have these these

00:47:23,920 --> 00:47:28,319
fields name and password

00:47:25,440 --> 00:47:28,640
so how much you want to bring that into

00:47:28,319 --> 00:47:31,359
uh

00:47:28,640 --> 00:47:32,079
here's a way to bring that into catalyst

00:47:31,359 --> 00:47:33,760
right

00:47:32,079 --> 00:47:37,040
uh so you have that concs again you have

00:47:33,760 --> 00:47:37,040
your concrete implementation

00:47:37,440 --> 00:47:43,200
um you have a model which

00:47:40,559 --> 00:47:44,480
which basically is a proxy for bringing

00:47:43,200 --> 00:47:46,640
that

00:47:44,480 --> 00:47:48,400
um concrete implement exposing that

00:47:46,640 --> 00:47:51,440
concrete implementation

00:47:48,400 --> 00:47:54,000
to controller and it here is

00:47:51,440 --> 00:47:54,800
encapsulating all the bits that it needs

00:47:54,000 --> 00:47:56,720
to do

00:47:54,800 --> 00:47:59,280
now again you may not be familiar with

00:47:56,720 --> 00:48:00,880
form handler but formula handler just

00:47:59,280 --> 00:48:02,800
takes the param options

00:48:00,880 --> 00:48:04,720
which in this case is the body param

00:48:02,800 --> 00:48:07,440
parameters of the request

00:48:04,720 --> 00:48:09,119
and it does process does the validation

00:48:07,440 --> 00:48:12,160
work

00:48:09,119 --> 00:48:14,960
so here i'm just basically encapsulating

00:48:12,160 --> 00:48:16,400
all the details about how that works so

00:48:14,960 --> 00:48:18,640
that if someday we want to move from

00:48:16,400 --> 00:48:21,200
form handler to something else

00:48:18,640 --> 00:48:22,880
we can change the here without having to

00:48:21,200 --> 00:48:24,160
change it in every single controller so

00:48:22,880 --> 00:48:25,760
here it is in the controller

00:48:24,160 --> 00:48:29,599
so in this case i'm just simply calling

00:48:25,760 --> 00:48:29,599
it and i'm expecting it to just simply

00:48:32,839 --> 00:48:38,079
work

00:48:34,720 --> 00:48:40,000
so again don't write a model write a

00:48:38,079 --> 00:48:42,480
class and use a model adapter or do

00:48:40,000 --> 00:48:42,480
injection

00:48:42,800 --> 00:48:48,720
uh to make this easy on cpan we have

00:48:46,079 --> 00:48:50,319
catalyst model adapter which will

00:48:48,720 --> 00:48:51,520
encapsulate the three most common

00:48:50,319 --> 00:48:54,720
patterns

00:48:51,520 --> 00:48:56,000
the application which means one model

00:48:54,720 --> 00:48:57,440
for the life cycle of the entire

00:48:56,000 --> 00:48:59,200
application

00:48:57,440 --> 00:49:01,440
factory which means giving me a new

00:48:59,200 --> 00:49:04,000
model every time i ask for it

00:49:01,440 --> 00:49:06,240
per request which is sort of a mix it

00:49:04,000 --> 00:49:07,520
will it's like factory and that it will

00:49:06,240 --> 00:49:10,079
create a new

00:49:07,520 --> 00:49:11,839
instance every time you call but it will

00:49:10,079 --> 00:49:12,800
only do it once for the duration of the

00:49:11,839 --> 00:49:14,319
request

00:49:12,800 --> 00:49:16,559
so the first time you ask for it in a

00:49:14,319 --> 00:49:20,240
request you get you'll create it

00:49:16,559 --> 00:49:20,240
and after that it uses the same one

00:49:22,000 --> 00:49:25,599
i would encourage people to look at

00:49:23,680 --> 00:49:29,200
catalyst model adapter on cpan

00:49:25,599 --> 00:49:29,200
but this is a simple example of it

00:49:29,280 --> 00:49:32,640
i've created a here i'm creating a base

00:49:31,359 --> 00:49:36,240
concrete class

00:49:32,640 --> 00:49:37,760
which encapsulates uh a schema

00:49:36,240 --> 00:49:41,599
requirement

00:49:37,760 --> 00:49:43,200
then i'm exposing it to catalyst here

00:49:41,599 --> 00:49:44,880
um and i'm simply using it in the

00:49:43,200 --> 00:49:48,160
controller and

00:49:44,880 --> 00:49:52,160
this allows will allow me to

00:49:48,160 --> 00:49:53,440
um separate out the use of that entities

00:49:52,160 --> 00:49:54,720
model

00:49:53,440 --> 00:49:57,040
and the actual implementation of the

00:49:54,720 --> 00:49:58,480
entities model from how it's being used

00:49:57,040 --> 00:50:01,119
so you could totally change it again

00:49:58,480 --> 00:50:02,640
like you might be using dpic

00:50:01,119 --> 00:50:05,440
and then you may change to like using

00:50:02,640 --> 00:50:06,960
elasticsearch or mongodb or something

00:50:05,440 --> 00:50:08,640
else under the hood

00:50:06,960 --> 00:50:10,079
and you don't have to it doesn't break

00:50:08,640 --> 00:50:12,000
any of your existing code

00:50:10,079 --> 00:50:13,119
as long as you've been very careful to

00:50:12,000 --> 00:50:15,760
properly

00:50:13,119 --> 00:50:16,720
isolate your implementation details from

00:50:15,760 --> 00:50:21,119
your

00:50:16,720 --> 00:50:21,119
public exposed interface

00:50:21,760 --> 00:50:26,640
i got a couple of minutes any questions

00:50:23,440 --> 00:50:29,440
about that

00:50:26,640 --> 00:50:29,760
excuse me uh let's see if we can hit

00:50:29,440 --> 00:50:31,200
some

00:50:29,760 --> 00:50:33,040
and i got a couple of minutes right

00:50:31,200 --> 00:50:34,160
let's hit an anti-pattern my favorite

00:50:33,040 --> 00:50:37,520
subject

00:50:34,160 --> 00:50:40,319
so the one of the more commented

00:50:37,520 --> 00:50:43,440
anti-patterns in catalyst is crazy

00:50:40,319 --> 00:50:43,440
complicated controllers

00:50:43,680 --> 00:50:47,599
so we we often hear about um don't

00:50:45,920 --> 00:50:49,040
prematurely optimize

00:50:47,599 --> 00:50:51,119
and when people think of premature

00:50:49,040 --> 00:50:53,680
optimization they're generally

00:50:51,119 --> 00:50:55,359
thinking of performance right you know

00:50:53,680 --> 00:50:56,559
you don't want to prematurely optimize

00:50:55,359 --> 00:50:58,160
the performance of something because

00:50:56,559 --> 00:51:00,400
that all in order to do that

00:50:58,160 --> 00:51:01,760
you may then often means you end up with

00:51:00,400 --> 00:51:03,359
obsolete codes

00:51:01,760 --> 00:51:05,520
right but there's another type of

00:51:03,359 --> 00:51:06,559
premature optimization which i call

00:51:05,520 --> 00:51:09,040
premature task

00:51:06,559 --> 00:51:11,040
optimization what that means is so

00:51:09,040 --> 00:51:13,599
here's an example of a controller

00:51:11,040 --> 00:51:14,880
that's been in my opinion prematurely

00:51:13,599 --> 00:51:17,119
optimized for task

00:51:14,880 --> 00:51:17,119
okay

00:51:18,319 --> 00:51:23,920
somebody has been presented with a

00:51:21,520 --> 00:51:24,720
a business something business a business

00:51:23,920 --> 00:51:29,119
case

00:51:24,720 --> 00:51:32,640
and they've broken it up into

00:51:29,119 --> 00:51:35,200
a base class and a bunch of roles right

00:51:32,640 --> 00:51:35,680
and they think wow this is awesome i

00:51:35,200 --> 00:51:38,160
follow

00:51:35,680 --> 00:51:40,319
the commandment make thin controllers

00:51:38,160 --> 00:51:43,920
controllers that don't do a lot

00:51:40,319 --> 00:51:46,880
but which is cool okay but

00:51:43,920 --> 00:51:48,000
in order to do that they've taken the

00:51:46,880 --> 00:51:49,920
tasks that they've been given the

00:51:48,000 --> 00:51:52,240
business logic test they've been given

00:51:49,920 --> 00:51:55,359
and broken it up so much

00:51:52,240 --> 00:51:57,040
that if that business logic changes

00:51:55,359 --> 00:51:59,440
it's now very very difficult to figure

00:51:57,040 --> 00:52:02,960
out what to do right

00:51:59,440 --> 00:52:06,079
um and my recommendation here

00:52:02,960 --> 00:52:08,319
is to not it's just so

00:52:06,079 --> 00:52:09,920
you know you do want thin controllers

00:52:08,319 --> 00:52:13,280
but

00:52:09,920 --> 00:52:15,440
don't make don't go so wild with like

00:52:13,280 --> 00:52:17,280
with like base classes and and control

00:52:15,440 --> 00:52:19,440
the roles i actually

00:52:17,280 --> 00:52:21,440
myself and this is maybe heresy but i

00:52:19,440 --> 00:52:23,359
very very rarely use

00:52:21,440 --> 00:52:24,559
uh controllers for anything other than

00:52:23,359 --> 00:52:28,559
namespace

00:52:24,559 --> 00:52:29,520
uh collections and try not to do a lot

00:52:28,559 --> 00:52:32,640
of this kind of thing

00:52:29,520 --> 00:52:34,800
and the biggest reason is this if when

00:52:32,640 --> 00:52:36,880
you go to work on something in catalyst

00:52:34,800 --> 00:52:38,880
you have a a problem you've been given a

00:52:36,880 --> 00:52:41,119
bug the first thing that you would

00:52:38,880 --> 00:52:42,480
usually do is say well okay what's the

00:52:41,119 --> 00:52:44,559
url

00:52:42,480 --> 00:52:46,000
that the bug is being presented at and

00:52:44,559 --> 00:52:48,800
then i want to go look at the

00:52:46,000 --> 00:52:49,839
actions that are connected to that url

00:52:48,800 --> 00:52:53,440
right

00:52:49,839 --> 00:52:54,640
and if i have to open up five classes to

00:52:53,440 --> 00:52:56,960
figure that out

00:52:54,640 --> 00:52:58,079
that makes my life as it as a debugger

00:52:56,960 --> 00:53:00,800
very difficult

00:52:58,079 --> 00:53:01,680
right um so you don't want to make it

00:53:00,800 --> 00:53:04,640
too hard

00:53:01,680 --> 00:53:05,920
for somebody to find your entry point

00:53:04,640 --> 00:53:08,160
into the problem

00:53:05,920 --> 00:53:08,160
okay

00:53:10,720 --> 00:53:15,440
and thick controller is the other more

00:53:13,440 --> 00:53:17,599
common one

00:53:15,440 --> 00:53:18,640
so that's the example of a thick

00:53:17,599 --> 00:53:21,119
controller

00:53:18,640 --> 00:53:22,000
right tons and tons and tons of logic

00:53:21,119 --> 00:53:26,160
and thought

00:53:22,000 --> 00:53:28,800
in the controller now of the two

00:53:26,160 --> 00:53:30,160
if i if i had a if i had to choose one

00:53:28,800 --> 00:53:31,760
that i had to deal with

00:53:30,160 --> 00:53:33,839
i would rather work with thick

00:53:31,760 --> 00:53:35,920
controller because thick controller at

00:53:33,839 --> 00:53:38,319
least has one upside

00:53:35,920 --> 00:53:40,079
which which is i only have to open up

00:53:38,319 --> 00:53:43,280
one file to see everything

00:53:40,079 --> 00:53:44,960
right so if you're going to like if you

00:53:43,280 --> 00:53:47,119
can't figure out what to do

00:53:44,960 --> 00:53:48,640
and you're not sure you know i know that

00:53:47,119 --> 00:53:50,480
again you hear the commandment make your

00:53:48,640 --> 00:53:52,559
controllers thin

00:53:50,480 --> 00:53:54,400
uh but if you can't do a good job of

00:53:52,559 --> 00:53:56,800
that making your control is a little

00:53:54,400 --> 00:53:59,359
thicker is probably like the better bet

00:53:56,800 --> 00:54:00,160
than over breaking up your control the

00:53:59,359 --> 00:54:03,839
logic

00:54:00,160 --> 00:54:04,640
okay because at least again the upside

00:54:03,839 --> 00:54:07,920
here is

00:54:04,640 --> 00:54:11,839
i i i can open i i at least can see

00:54:07,920 --> 00:54:11,839
everything in one file

00:54:12,800 --> 00:54:19,680
so again when people say uh

00:54:17,040 --> 00:54:20,960
the writing thin controllers a thin

00:54:19,680 --> 00:54:22,480
controller doesn't mean

00:54:20,960 --> 00:54:24,000
a controller with fewer lines

00:54:22,480 --> 00:54:27,040
necessarily what

00:54:24,000 --> 00:54:28,400
it means is bright controllers that do

00:54:27,040 --> 00:54:30,800
controller things

00:54:28,400 --> 00:54:33,040
what i mean by controller things is

00:54:30,800 --> 00:54:36,319
mapping request information

00:54:33,040 --> 00:54:39,040
to models and views okay

00:54:36,319 --> 00:54:40,720
and maybe doing some munging like you

00:54:39,040 --> 00:54:42,319
pull in the parameters

00:54:40,720 --> 00:54:45,200
maybe you need to change the parameters

00:54:42,319 --> 00:54:46,480
a little bit then do some validation

00:54:45,200 --> 00:54:48,480
and then send those parameters to a

00:54:46,480 --> 00:54:50,079
model to update a model and then take

00:54:48,480 --> 00:54:52,079
that model and send it to a view

00:54:50,079 --> 00:54:53,839
okay all those things that are part of

00:54:52,079 --> 00:54:56,079
controller can be in there

00:54:53,839 --> 00:54:57,520
if that makes a lot of lines that's okay

00:54:56,079 --> 00:54:58,799
if they get a thin controller doesn't

00:54:57,520 --> 00:55:02,480
mean a controller with

00:54:58,799 --> 00:55:04,480
fewer lines it means a controller that

00:55:02,480 --> 00:55:06,240
only does specifically control their

00:55:04,480 --> 00:55:08,720
things as much as possible

00:55:06,240 --> 00:55:10,960
a thick controller in my mind is stuff

00:55:08,720 --> 00:55:11,520
like a controller with a lot of sql in

00:55:10,960 --> 00:55:15,440
it

00:55:11,520 --> 00:55:21,839
or a controller that is building

00:55:15,440 --> 00:55:21,839
that is building views

00:55:22,720 --> 00:55:27,200
this is basically what i just said and i

00:55:25,599 --> 00:55:27,920
think i got 30 seconds so i'll just jump

00:55:27,200 --> 00:55:30,480
into it

00:55:27,920 --> 00:55:32,240
the other problem that i often see is

00:55:30,480 --> 00:55:34,799
overuse of the stash

00:55:32,240 --> 00:55:35,680
so here's an example of problems with

00:55:34,799 --> 00:55:37,200
the stash

00:55:35,680 --> 00:55:39,599
can anybody who wants to shout out and

00:55:37,200 --> 00:55:42,240
earn a couple satoshi

00:55:39,599 --> 00:55:45,280
what's the problem here i think i got 15

00:55:42,240 --> 00:55:45,280
seconds left so be quick

00:55:46,880 --> 00:55:53,920
nobody sees it i got typo right yeah

00:55:52,000 --> 00:55:55,599
and this is actually impossible that

00:55:53,920 --> 00:55:56,640
like this would actually kill you if you

00:55:55,599 --> 00:55:58,160
were over

00:55:56,640 --> 00:56:00,160
because it would be very very difficult

00:55:58,160 --> 00:56:02,480
to find right so

00:56:00,160 --> 00:56:03,280
i rec you can't avoid using the stash

00:56:02,480 --> 00:56:05,920
and catalyst

00:56:03,280 --> 00:56:07,119
um i i've tried like i've actually went

00:56:05,920 --> 00:56:08,799
and tried to build applications that

00:56:07,119 --> 00:56:11,359
didn't use the stash at all

00:56:08,799 --> 00:56:12,480
um and it ends up being worse so you can

00:56:11,359 --> 00:56:15,920
use the stash but

00:56:12,480 --> 00:56:17,440
but use it intelligently and one

00:56:15,920 --> 00:56:18,559
one thing that i often do and i'll show

00:56:17,440 --> 00:56:19,119
this and i guess i'll stop because

00:56:18,559 --> 00:56:21,599
sometimes

00:56:19,119 --> 00:56:21,599
time is up

00:56:22,799 --> 00:56:26,799
and sometimes what i'll do is i'll map

00:56:25,119 --> 00:56:29,359
the stash to a model

00:56:26,799 --> 00:56:30,960
so you can see what i've done here and

00:56:29,359 --> 00:56:34,319
the model will sort of act as

00:56:30,960 --> 00:56:37,119
as a sort of a strongly type stash

00:56:34,319 --> 00:56:38,079
right so instead of passing to the view

00:56:37,119 --> 00:56:42,160
the stash

00:56:38,079 --> 00:56:43,839
i'm passing to the view uh list model

00:56:42,160 --> 00:56:45,599
okay and just to show you what that

00:56:43,839 --> 00:56:47,920
would look potentially look like

00:56:45,599 --> 00:56:49,839
it just might look like this right and

00:56:47,920 --> 00:56:51,200
so in this case i'm avoiding the problem

00:56:49,839 --> 00:56:54,480
of typo

00:56:51,200 --> 00:56:55,359
because if i mistyped the method name on

00:56:54,480 --> 00:56:56,960
this model

00:56:55,359 --> 00:56:58,319
that would actually give me an error

00:56:56,960 --> 00:57:00,000
like when the code is running right

00:56:58,319 --> 00:57:02,559
because it would be a it would be a

00:57:00,000 --> 00:57:04,079
method that didn't exist whereas in this

00:57:02,559 --> 00:57:07,599
version of it

00:57:04,079 --> 00:57:09,200
your code just continue right along

00:57:07,599 --> 00:57:10,559
and it would really kill you other

00:57:09,200 --> 00:57:11,280
things the problems i've seen with the

00:57:10,559 --> 00:57:13,599
stash

00:57:11,280 --> 00:57:14,799
is like people use it so much like i've

00:57:13,599 --> 00:57:16,160
actually worked at companies where they

00:57:14,799 --> 00:57:18,720
had to have a wiki page

00:57:16,160 --> 00:57:20,400
to track all the stash variables right

00:57:18,720 --> 00:57:22,079
okay like when you're doing that you're

00:57:20,400 --> 00:57:24,480
probably overdoing it

00:57:22,079 --> 00:57:26,720
uh and and again a way to one way around

00:57:24,480 --> 00:57:28,640
that is to do these is that you do these

00:57:26,720 --> 00:57:32,640
request scopes like cash

00:57:28,640 --> 00:57:35,839
class models to like encapsulate data

00:57:32,640 --> 00:57:37,760
uh for you and i think i'm out of time

00:57:35,839 --> 00:57:38,960
so i'll just simply stop anybody want to

00:57:37,760 --> 00:57:42,160
hit me with questions

00:57:38,960 --> 00:57:42,160
that was pretty much it anyway

00:57:43,760 --> 00:57:48,880
it doesn't have to be funny thanks john

00:57:47,040 --> 00:57:52,160
thank you nobody's gotta you can't ask

00:57:48,880 --> 00:57:52,160
me questions unrelated

00:57:53,359 --> 00:57:58,960
no um you want to tell us about

00:57:56,640 --> 00:58:00,319
anything about the future of catalyst or

00:57:58,960 --> 00:58:02,160
not during this talk

00:58:00,319 --> 00:58:03,920
uh i think i've sort of used up my time

00:58:02,160 --> 00:58:05,200
i don't want to i that's a really kind

00:58:03,920 --> 00:58:08,880
of a big topic

00:58:05,200 --> 00:58:11,280
um so uh we can't have anybody

00:58:08,880 --> 00:58:12,880
not dead i guess that's the point if

00:58:11,280 --> 00:58:15,200
anybody wants to talk about like the

00:58:12,880 --> 00:58:15,839
future of catalyst feel free to chat me

00:58:15,200 --> 00:58:18,400
up on

00:58:15,839 --> 00:58:19,839
irc on the catalyst system i would be

00:58:18,400 --> 00:58:21,760
happy to like

00:58:19,839 --> 00:58:24,319
go over with anybody and see what they

00:58:21,760 --> 00:58:24,319
have to think

00:58:25,839 --> 00:58:29,599
all right anybody for those of you that

00:58:27,680 --> 00:58:31,280
earn satoshi by asking me questions send

00:58:29,599 --> 00:58:32,160
me your bitcoin address and i'll send

00:58:31,280 --> 00:58:33,920
you a few

00:58:32,160 --> 00:58:35,440
uh you can hit me up on i think there's

00:58:33,920 --> 00:58:37,280
a a slack

00:58:35,440 --> 00:58:39,839
associated with this or just send them

00:58:37,280 --> 00:58:41,920
to me on irc

00:58:39,839 --> 00:58:43,520
cool thanks everybody for showing up and

00:58:41,920 --> 00:58:44,480
uh for those of you viewing this in the

00:58:43,520 --> 00:58:48,079
future

00:58:44,480 --> 00:58:50,799
um on youtube uh i hope the future is

00:58:48,079 --> 00:58:50,799

YouTube URL: https://www.youtube.com/watch?v=lKmQDqoYRF4


