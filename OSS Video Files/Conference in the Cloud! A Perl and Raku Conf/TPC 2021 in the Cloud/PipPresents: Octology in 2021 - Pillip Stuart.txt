Title: PipPresents: Octology in 2021 - Pillip Stuart
Publication date: 2021-06-09
Playlist: TPC 2021 in the Cloud
Description: 
	Standard ANSI Escape codes have been around a long time for representing colors (as well as several other lesser attributes). Their definition has remained obtuse (obscene even?) for far too long. Let's change that. Learn d8-bow (ROYGCBMP) with blacK && White ends. Zero to reset && 21 is good-to-go!

Pip's Octology (on GitHub) shows how to export Bash and Zsh environment variables, which mainly emphasize 21 escape values which gr8ly simplify command-line coloriz8ion. The a8.pm Perl-Module does something very similar for any Perl code which uses it. The result is a minimalist approach to mnemonic and growing comprehension of how to colorize almost any text (almost anywhere in a terminal) quickly, easily, uniformly, and memorably. Please learn these 21 and go cast your Perls-B4-Hogs-Wild coloring whatever you find. Learn from `S` and `c` which gener8 much more than just 20 basic Fore-ground color codes. `tsgr` will add Select-Graphic-Rendition capabilities to your Perl tool-chest (well endowed?  ;P  ). Follow Pip and Octology if you want to bask in gr8r living color ahead, please.
Captions: 
	00:00:00,960 --> 00:00:06,960
great thank you um so hi everybody

00:00:03,679 --> 00:00:10,240
um my name is pip stewart and

00:00:06,960 --> 00:00:13,759
um i'm gonna be giving a talk

00:00:10,240 --> 00:00:16,800
um about the year 2021 and

00:00:13,759 --> 00:00:20,160
the theme is blackjack since 21 is

00:00:16,800 --> 00:00:22,240
so tightly associated with um

00:00:20,160 --> 00:00:24,560
the game of blackjack the gambling

00:00:22,240 --> 00:00:26,400
casino game usually um

00:00:24,560 --> 00:00:28,480
so i have a couple things that i wanted

00:00:26,400 --> 00:00:30,880
to try to

00:00:28,480 --> 00:00:31,599
explain and be disclaimers to get out of

00:00:30,880 --> 00:00:34,559
the way uh

00:00:31,599 --> 00:00:36,079
early um i have very little experience

00:00:34,559 --> 00:00:38,239
giving talks

00:00:36,079 --> 00:00:39,520
i've given two lightning talks at two

00:00:38,239 --> 00:00:43,280
past pearl

00:00:39,520 --> 00:00:46,160
conferences and um most people

00:00:43,280 --> 00:00:47,039
uh pointed out that i have a high

00:00:46,160 --> 00:00:49,440
tendency to

00:00:47,039 --> 00:00:51,520
use profanity particularly when i'm

00:00:49,440 --> 00:00:54,640
nervous or stressed out or

00:00:51,520 --> 00:00:57,520
um uh uncomfortable so

00:00:54,640 --> 00:00:58,879
um hopefully that won't be too offensive

00:00:57,520 --> 00:01:02,079
to anybody if

00:00:58,879 --> 00:01:04,720
uh i start cursing because it's part of

00:01:02,079 --> 00:01:06,640
i have bipolar disorder and i've been on

00:01:04,720 --> 00:01:08,880
disability for 11 years and

00:01:06,640 --> 00:01:10,240
part of it is that i use a lot of

00:01:08,880 --> 00:01:12,000
profanity because it

00:01:10,240 --> 00:01:13,600
it happens when i'm stressed so please

00:01:12,000 --> 00:01:15,200
forgive me for that and

00:01:13,600 --> 00:01:17,680
don't take offense to it it's not meant

00:01:15,200 --> 00:01:19,520
to be offensive but it's uh

00:01:17,680 --> 00:01:21,040
one of my coping mechanisms apparently

00:01:19,520 --> 00:01:23,600
or something um

00:01:21,040 --> 00:01:24,799
so that's one thing um just wanted to

00:01:23,600 --> 00:01:27,840
prepare you for that

00:01:24,799 --> 00:01:28,960
in in mania and hypermania often i curse

00:01:27,840 --> 00:01:31,520
a lot and

00:01:28,960 --> 00:01:32,000
some of my code is also using curses um

00:01:31,520 --> 00:01:35,600
so

00:01:32,000 --> 00:01:39,680
so that's kind of funny and

00:01:35,600 --> 00:01:42,159
um also last year i had uh

00:01:39,680 --> 00:01:44,560
some mania and a joke at the end of my

00:01:42,159 --> 00:01:46,560
credits and that caused me not to be on

00:01:44,560 --> 00:01:48,640
the website either so hopefully that

00:01:46,560 --> 00:01:51,920
doesn't happen again this year i'm

00:01:48,640 --> 00:01:54,000
gonna try to be family friendly but

00:01:51,920 --> 00:01:56,000
that's hard for me

00:01:54,000 --> 00:01:58,000
then the last thing is that my octology

00:01:56,000 --> 00:02:00,880
code is on github

00:01:58,000 --> 00:02:02,799
and it's not ready for prime time please

00:02:00,880 --> 00:02:04,640
don't use it in a production environment

00:02:02,799 --> 00:02:06,240
if anything's mission critical keep my

00:02:04,640 --> 00:02:09,039
code away from it because

00:02:06,240 --> 00:02:09,759
it's poorly tested it it serves its

00:02:09,039 --> 00:02:12,239
function

00:02:09,759 --> 00:02:13,680
almost all of the code runs and achieves

00:02:12,239 --> 00:02:15,760
what it was designed to

00:02:13,680 --> 00:02:18,319
but um there are certainly bugs there

00:02:15,760 --> 00:02:21,599
are certainly shortcomings and

00:02:18,319 --> 00:02:24,319
poor documentation and security

00:02:21,599 --> 00:02:24,879
issues very likely so please it's

00:02:24,319 --> 00:02:28,400
version

00:02:24,879 --> 00:02:30,080
0.0 right now um to mean that it's not

00:02:28,400 --> 00:02:32,560
even in an alpha state

00:02:30,080 --> 00:02:33,840
like it it could almost be alpha

00:02:32,560 --> 00:02:36,480
sometime soon but

00:02:33,840 --> 00:02:38,160
um please just audit it carefully if you

00:02:36,480 --> 00:02:38,720
want to try to run any of it and don't

00:02:38,160 --> 00:02:41,599
do it

00:02:38,720 --> 00:02:41,920
in in an important situation um unless

00:02:41,599 --> 00:02:44,720
it's

00:02:41,920 --> 00:02:45,120
well understood and thoroughly audited

00:02:44,720 --> 00:02:47,200
um

00:02:45,120 --> 00:02:49,760
okay so that stuff out of the way um

00:02:47,200 --> 00:02:52,319
then i have three goals for this talk

00:02:49,760 --> 00:02:54,080
goal zero is to impart at least some

00:02:52,319 --> 00:02:56,800
sharp audience members

00:02:54,080 --> 00:02:58,879
that the year 21 is partly here now so

00:02:56,800 --> 00:03:00,959
that hackers pearl hackers can learn

00:02:58,879 --> 00:03:03,280
to use 21 shell and pearl color

00:03:00,959 --> 00:03:05,040
variables effectively and efficiently

00:03:03,280 --> 00:03:06,800
that's the main goal of the talk the

00:03:05,040 --> 00:03:07,599
second one is to convey that every

00:03:06,800 --> 00:03:10,800
letter

00:03:07,599 --> 00:03:14,319
punctuation mark um

00:03:10,800 --> 00:03:17,360
character symbol shape etc should be

00:03:14,319 --> 00:03:18,000
eventually well understood as bigger and

00:03:17,360 --> 00:03:21,440
better than

00:03:18,000 --> 00:03:23,920
numbered quantities zero to nine um

00:03:21,440 --> 00:03:24,959
that's a stretch that it's a more medium

00:03:23,920 --> 00:03:28,560
term goal but

00:03:24,959 --> 00:03:31,120
that uh zero to nine is um decimal

00:03:28,560 --> 00:03:32,159
numbers and uh they're vastly inferior

00:03:31,120 --> 00:03:34,720
to

00:03:32,159 --> 00:03:36,000
representation of larger and more

00:03:34,720 --> 00:03:38,879
comprehensive

00:03:36,000 --> 00:03:39,519
quantities and enumeration um that's

00:03:38,879 --> 00:03:43,040
based

00:03:39,519 --> 00:03:44,799
more in nature and um

00:03:43,040 --> 00:03:47,440
digital computers particularly for

00:03:44,799 --> 00:03:50,480
programmers but also like the way that

00:03:47,440 --> 00:03:51,200
uh living organisms uh have cellular

00:03:50,480 --> 00:03:53,599
division

00:03:51,200 --> 00:03:54,560
they're doing doublings and decimal

00:03:53,599 --> 00:03:57,360
doesn't do that

00:03:54,560 --> 00:03:58,720
when you cut a ten and a half you get

00:03:57,360 --> 00:04:00,080
five when you cut five and half you

00:03:58,720 --> 00:04:02,480
don't have integers anymore

00:04:00,080 --> 00:04:04,239
but you can keep taking 16 and half it

00:04:02,480 --> 00:04:04,799
and half and half it down to one or

00:04:04,239 --> 00:04:08,000
double it

00:04:04,799 --> 00:04:10,080
and double it and so like that's

00:04:08,000 --> 00:04:11,200
goal two is is longer and we're not

00:04:10,080 --> 00:04:13,760
going to get much into that

00:04:11,200 --> 00:04:15,120
and i mean goal one was that and the

00:04:13,760 --> 00:04:16,959
other one is

00:04:15,120 --> 00:04:19,120
well i already touched on that that

00:04:16,959 --> 00:04:21,199
eventually um it would be rad to

00:04:19,120 --> 00:04:23,600
to collaborate with people to deprecate

00:04:21,199 --> 00:04:26,080
decimal because decimal notation

00:04:23,600 --> 00:04:28,160
seems to uh have caused a lot of death

00:04:26,080 --> 00:04:31,440
and suffering throughout the history of

00:04:28,160 --> 00:04:33,759
uh human civilization and i think

00:04:31,440 --> 00:04:36,080
it's a hard sell obviously but we should

00:04:33,759 --> 00:04:38,639
abandon decimal and adopt

00:04:36,080 --> 00:04:40,639
at least octal if not dozenal dozenal

00:04:38,639 --> 00:04:42,320
has really good properties too but

00:04:40,639 --> 00:04:45,440
um hexadecimal if you're familiar with

00:04:42,320 --> 00:04:47,759
html it is vastly superior to

00:04:45,440 --> 00:04:48,720
to decimal so that that's longer longer

00:04:47,759 --> 00:04:51,759
term stuff

00:04:48,720 --> 00:04:55,040
okay so now we can get into my main um

00:04:51,759 --> 00:04:58,479
material so this is uh

00:04:55,040 --> 00:05:01,280
a 40 by 12 text uh terminal

00:04:58,479 --> 00:05:01,840
window that um i just made a really

00:05:01,280 --> 00:05:05,680
simple

00:05:01,840 --> 00:05:08,240
um curses uh

00:05:05,680 --> 00:05:09,280
script that would um display the title

00:05:08,240 --> 00:05:11,680
blackjack and

00:05:09,280 --> 00:05:13,759
just number the um remaining columns

00:05:11,680 --> 00:05:16,320
that aren't being used for the block

00:05:13,759 --> 00:05:17,280
but so if you notice in the second

00:05:16,320 --> 00:05:20,400
column

00:05:17,280 --> 00:05:24,560
um here there are 10 uppercase

00:05:20,400 --> 00:05:27,520
letters um the middle eight are um

00:05:24,560 --> 00:05:28,560
what i call the date bow and it's like a

00:05:27,520 --> 00:05:30,320
rainbow

00:05:28,560 --> 00:05:32,080
like red orange yellow green is already

00:05:30,320 --> 00:05:32,720
probably pretty commonplace to people

00:05:32,080 --> 00:05:34,400
when they

00:05:32,720 --> 00:05:36,320
think about rainbows red orange yellow

00:05:34,400 --> 00:05:38,080
green and so you just use the uppercase

00:05:36,320 --> 00:05:39,919
letter for the bright versions

00:05:38,080 --> 00:05:41,280
and then the other four that i use are

00:05:39,919 --> 00:05:44,560
cbmp for

00:05:41,280 --> 00:05:46,560
cyan blue magenta and purple um

00:05:44,560 --> 00:05:48,320
and they all have uppercase forms that

00:05:46,560 --> 00:05:49,199
are bright lowercase forms that tend to

00:05:48,320 --> 00:05:51,199
be darker

00:05:49,199 --> 00:05:52,400
and then if you have k for what for

00:05:51,199 --> 00:05:55,919
black at the top

00:05:52,400 --> 00:05:57,919
and w or at the left um k

00:05:55,919 --> 00:05:59,919
since b is already taken for blue and

00:05:57,919 --> 00:06:00,880
you're familiar probably with html and

00:05:59,919 --> 00:06:04,080
rgb

00:06:00,880 --> 00:06:07,199
um rgg bb and hexadecimal for

00:06:04,080 --> 00:06:09,680
cascading style sheets or um html

00:06:07,199 --> 00:06:10,400
uh with a pound sign or octothorpe a

00:06:09,680 --> 00:06:13,199
hash

00:06:10,400 --> 00:06:15,120
symbol usually before the um three or

00:06:13,199 --> 00:06:18,400
six hexadecimal digits that you can

00:06:15,120 --> 00:06:22,639
specify colors in more typically um

00:06:18,400 --> 00:06:26,000
eight bits per rgb so 24-bit color or

00:06:22,639 --> 00:06:27,600
um for a nibble or half of a byte for

00:06:26,000 --> 00:06:30,880
each of the hex digits and

00:06:27,600 --> 00:06:33,360
pairs of them um to to describe the

00:06:30,880 --> 00:06:34,639
each of the um color channels for a

00:06:33,360 --> 00:06:37,680
composite color

00:06:34,639 --> 00:06:40,400
and um so b uh

00:06:37,680 --> 00:06:41,919
b is taken by blue rgb and if you're

00:06:40,400 --> 00:06:43,919
familiar with print media there's a

00:06:41,919 --> 00:06:44,880
standard called cmyk which is cyan

00:06:43,919 --> 00:06:48,000
magenta

00:06:44,880 --> 00:06:51,199
um yellow uh black and k is

00:06:48,000 --> 00:06:53,919
is commonplace for black in in like

00:06:51,199 --> 00:06:55,039
uh magazines and billboards and t-shirt

00:06:53,919 --> 00:06:57,599
printing and other

00:06:55,039 --> 00:06:58,240
other stuff so rgb and cmyk get you

00:06:57,599 --> 00:07:01,440
seven

00:06:58,240 --> 00:07:03,599
if you add o for orange and p for purple

00:07:01,440 --> 00:07:04,479
you're at nine and you just need then w

00:07:03,599 --> 00:07:07,520
for white

00:07:04,479 --> 00:07:07,840
and you've got your base ten uh colors

00:07:07,520 --> 00:07:09,199
the

00:07:07,840 --> 00:07:12,000
the the bright ones are the ones that

00:07:09,199 --> 00:07:15,039
are most useful and if you

00:07:12,000 --> 00:07:16,960
um can remember them and the special

00:07:15,039 --> 00:07:20,080
exception that black is k

00:07:16,960 --> 00:07:21,919
and b is already taken by blue then um

00:07:20,080 --> 00:07:23,759
these ten uppercase colors you can

00:07:21,919 --> 00:07:27,360
export them from

00:07:23,759 --> 00:07:27,360
here let me see uh g um

00:07:28,479 --> 00:07:34,960
x uh l b

00:07:31,520 --> 00:07:38,400
j dot z shark

00:07:34,960 --> 00:07:40,960
boom and i should do it in a different

00:07:38,400 --> 00:07:44,879
one this one's too big

00:07:40,960 --> 00:07:48,240
um g is a an alias ad

00:07:44,879 --> 00:07:51,919
for grep um or a shell function actually

00:07:48,240 --> 00:07:56,800
you can see here um so it's simple but

00:07:51,919 --> 00:07:56,800
um g x lb

00:07:56,840 --> 00:08:00,240
um uh

00:08:01,360 --> 00:08:13,840
oh it's coming out well let me do the

00:08:04,800 --> 00:08:13,840
yeah so

00:08:15,199 --> 00:08:18,240
so you can see here that these are the

00:08:17,199 --> 00:08:22,160
lines that um

00:08:18,240 --> 00:08:27,840
do the exporting of um

00:08:22,160 --> 00:08:27,840
like these four in the middle um

00:08:31,280 --> 00:08:33,840
have um

00:08:34,640 --> 00:08:37,680
the primary there's a special exception

00:08:36,560 --> 00:08:39,839
for um

00:08:37,680 --> 00:08:40,880
uh the dark blue that you can see in the

00:08:39,839 --> 00:08:43,599
middle um

00:08:40,880 --> 00:08:44,000
i put a uppercase s before that because

00:08:43,599 --> 00:08:45,760
um

00:08:44,000 --> 00:08:47,680
even though it works in shell if you

00:08:45,760 --> 00:08:49,440
export these and you want to use them in

00:08:47,680 --> 00:08:49,920
any aliases or shell scripts that you

00:08:49,440 --> 00:08:51,440
have

00:08:49,920 --> 00:08:53,440
because then they can be found in your

00:08:51,440 --> 00:08:53,839
shell environment and they also work

00:08:53,440 --> 00:08:56,880
almost

00:08:53,839 --> 00:09:00,160
identical syntax in bash rcs so

00:08:56,880 --> 00:09:03,200
if if you uh um like

00:09:00,160 --> 00:09:04,000
use these um they should work um the

00:09:03,200 --> 00:09:06,160
same in

00:09:04,000 --> 00:09:08,240
i have literal um escape characters but

00:09:06,160 --> 00:09:11,440
you can use backslash e

00:09:08,240 --> 00:09:12,880
um to generate the escapes instead of

00:09:11,440 --> 00:09:15,600
having a literal one in

00:09:12,880 --> 00:09:16,480
the config files but for some certain

00:09:15,600 --> 00:09:18,399
expansion

00:09:16,480 --> 00:09:20,480
uh situations like if you're using them

00:09:18,399 --> 00:09:21,120
in the generation of your prompt or

00:09:20,480 --> 00:09:24,240
something

00:09:21,120 --> 00:09:26,160
uh the point at which they do expansion

00:09:24,240 --> 00:09:27,680
might change or whether it's handling

00:09:26,160 --> 00:09:30,000
the backslash escapes

00:09:27,680 --> 00:09:30,880
correctly so sometimes the literal is

00:09:30,000 --> 00:09:33,120
more effective

00:09:30,880 --> 00:09:34,000
it looks like a carrot left square

00:09:33,120 --> 00:09:36,720
bracket but

00:09:34,000 --> 00:09:37,360
it's actually a single character in bim

00:09:36,720 --> 00:09:40,880
and

00:09:37,360 --> 00:09:42,720
um and you can use it literally but

00:09:40,880 --> 00:09:44,399
then when you do like a grep on it and

00:09:42,720 --> 00:09:47,040
it comes back out to your shell

00:09:44,399 --> 00:09:47,440
then it'll read the literal and and the

00:09:47,040 --> 00:09:50,560
code

00:09:47,440 --> 00:09:53,440
right away and and read it as a

00:09:50,560 --> 00:09:55,519
an escaped color code that isn't the

00:09:53,440 --> 00:09:57,680
text of the config file that you were

00:09:55,519 --> 00:09:59,279
looking for to grep that's why i opened

00:09:57,680 --> 00:10:00,959
the file instead of

00:09:59,279 --> 00:10:03,360
i tried to set up comments so that i

00:10:00,959 --> 00:10:06,959
could do um like export and

00:10:03,360 --> 00:10:10,399
l is 21. like if you see in my clock um

00:10:06,959 --> 00:10:13,120
down down in the uh lower right here um

00:10:10,399 --> 00:10:13,120
oh i missed

00:10:13,519 --> 00:10:20,800
i'm so fast the l is the year

00:10:17,680 --> 00:10:23,440
um six is the month nine is the day

00:10:20,800 --> 00:10:24,079
m is the time zone um then hour minute

00:10:23,440 --> 00:10:27,200
second and

00:10:24,079 --> 00:10:30,720
sixteenth of a second um and

00:10:27,200 --> 00:10:32,160
uh mi vim generates that uh for the last

00:10:30,720 --> 00:10:35,920
time it did an update and

00:10:32,160 --> 00:10:39,920
and the start point in um a dark red

00:10:35,920 --> 00:10:42,160
uh so i added those oh escape

00:10:39,920 --> 00:10:43,760
um so here here's the way that they're

00:10:42,160 --> 00:10:46,320
exported the up sb is

00:10:43,760 --> 00:10:46,800
special because pearl uses dollar a and

00:10:46,320 --> 00:10:49,760
dollar b

00:10:46,800 --> 00:10:50,959
the lower case a and b for all the sorts

00:10:49,760 --> 00:10:54,399
that it performs

00:10:50,959 --> 00:10:55,040
and the sort function um is using a

00:10:54,399 --> 00:10:58,079
global

00:10:55,040 --> 00:10:59,839
low a and low b and so that's

00:10:58,079 --> 00:11:01,200
way more important sometimes if you try

00:10:59,839 --> 00:11:03,279
to use b

00:11:01,200 --> 00:11:05,120
for other purposes in pearl anything

00:11:03,279 --> 00:11:06,880
that happens to sort like other modules

00:11:05,120 --> 00:11:08,320
you're using

00:11:06,880 --> 00:11:10,079
they'll get screwed up or they'll screw

00:11:08,320 --> 00:11:11,920
up your colors if you try to use it so

00:11:10,079 --> 00:11:13,120
stay away from dollar low a and dollar

00:11:11,920 --> 00:11:14,880
low b leave them for

00:11:13,120 --> 00:11:16,399
all the sort purposes that pearl needs

00:11:14,880 --> 00:11:17,120
and that's why this one's special in two

00:11:16,399 --> 00:11:20,560
characters up

00:11:17,120 --> 00:11:23,040
s love b um in the the shell also

00:11:20,560 --> 00:11:23,680
um so that it can be consistent in pearl

00:11:23,040 --> 00:11:27,040
and

00:11:23,680 --> 00:11:28,000
um shell but dark blue background i use

00:11:27,040 --> 00:11:30,959
for the

00:11:28,000 --> 00:11:31,519
status bar in my vim down here and i

00:11:30,959 --> 00:11:33,760
make it

00:11:31,519 --> 00:11:35,680
i customize it so that it's a good deal

00:11:33,760 --> 00:11:38,160
darker and closer to black than

00:11:35,680 --> 00:11:40,000
um the normal dark blue would be in the

00:11:38,160 --> 00:11:43,839
default settings of them but

00:11:40,000 --> 00:11:43,839
so uh here's the um

00:11:44,079 --> 00:11:50,399
way that they're exported um and

00:11:47,120 --> 00:11:52,000
uh i could

00:11:50,399 --> 00:11:54,839
the way that they're done in the pro

00:11:52,000 --> 00:11:57,600
module um so lib

00:11:54,839 --> 00:12:02,720
octology uh

00:11:57,600 --> 00:12:02,720
b um a pm in uh

00:12:05,600 --> 00:12:09,120
that i have a whole bunch of exports of

00:12:08,079 --> 00:12:12,720
of them

00:12:09,120 --> 00:12:15,600
um mainly right here so dollar zed is

00:12:12,720 --> 00:12:16,560
uh the special zero reset that's why

00:12:15,600 --> 00:12:19,360
it's 21

00:12:16,560 --> 00:12:21,440
colors in this talk um there's the dapo

00:12:19,360 --> 00:12:23,680
which is red orange yellow green

00:12:21,440 --> 00:12:25,519
cyan blue magenta purple there's four

00:12:23,680 --> 00:12:27,279
and four of the depot

00:12:25,519 --> 00:12:29,279
that are used in the colors for your

00:12:27,279 --> 00:12:31,519
month day hour minute second fast

00:12:29,279 --> 00:12:33,360
fast is like a phase or a pass it's a

00:12:31,519 --> 00:12:37,040
hybrid of phase and pass

00:12:33,360 --> 00:12:38,000
and p-h-a-s-s it's a 60th of a second

00:12:37,040 --> 00:12:40,959
kind of like

00:12:38,000 --> 00:12:42,240
uh fighting game frame rates on video on

00:12:40,959 --> 00:12:46,240
playstation and stuff

00:12:42,240 --> 00:12:49,519
or um ac dc uh alternating current

00:12:46,240 --> 00:12:51,760
uh frequency 60 hertz it's 60th of a

00:12:49,519 --> 00:12:54,519
second and so it gives you a pretty high

00:12:51,760 --> 00:12:57,440
resolution sub second precision

00:12:54,519 --> 00:13:00,720
.0167 um

00:12:57,440 --> 00:13:03,519
seconds per fast and um

00:13:00,720 --> 00:13:05,200
with the date encoding i'll show you the

00:13:03,519 --> 00:13:06,000
expanded form too here let me pull my

00:13:05,200 --> 00:13:08,560
other

00:13:06,000 --> 00:13:10,000
oh and it's it's hiding let me get that

00:13:08,560 --> 00:13:14,480
guy out of the way

00:13:10,000 --> 00:13:16,560
um that i have another um

00:13:14,480 --> 00:13:17,600
version of the clock in one of my other

00:13:16,560 --> 00:13:21,120
uh

00:13:17,600 --> 00:13:23,200
um screens on my other windows

00:13:21,120 --> 00:13:24,880
and you can see that it it toggles bold

00:13:23,200 --> 00:13:27,200
each time that it updates

00:13:24,880 --> 00:13:28,560
and uh and the so so does the original

00:13:27,200 --> 00:13:30,880
one this but so you could

00:13:28,560 --> 00:13:31,920
you can set it up to have both at once

00:13:30,880 --> 00:13:34,240
and um

00:13:31,920 --> 00:13:35,040
you can change the update speed too so

00:13:34,240 --> 00:13:36,880
now it's doing

00:13:35,040 --> 00:13:38,959
a minimal it's drawing as fast as it can

00:13:36,880 --> 00:13:42,480
and you can see the fastest go pretty

00:13:38,959 --> 00:13:44,160
fast um they're really fast 60s of a

00:13:42,480 --> 00:13:46,560
second are very very short

00:13:44,160 --> 00:13:48,000
most human activities uh take much a

00:13:46,560 --> 00:13:51,360
good deal longer than a 60th of

00:13:48,000 --> 00:13:53,920
a second uh the way that date works um

00:13:51,360 --> 00:13:55,199
it can describe over a thousand years um

00:13:53,920 --> 00:13:57,760
from like 14

00:13:55,199 --> 00:13:59,279
anything that happened in 1489 until

00:13:57,760 --> 00:14:01,680
anything that happens in 25

00:13:59,279 --> 00:14:02,480
11. uh you can have 60th of a second

00:14:01,680 --> 00:14:06,040
precision

00:14:02,480 --> 00:14:08,880
in any time zone for that

00:14:06,040 --> 00:14:11,519
1023 year span and

00:14:08,880 --> 00:14:13,120
um you know only eight characters and

00:14:11,519 --> 00:14:15,760
because they're organized

00:14:13,120 --> 00:14:17,680
uh with with a few exceptions for the

00:14:15,760 --> 00:14:21,120
special cases of the years

00:14:17,680 --> 00:14:23,360
um they are in descending order of uh

00:14:21,120 --> 00:14:25,360
the size of the fields so since year

00:14:23,360 --> 00:14:28,720
comes first and then month and then day

00:14:25,360 --> 00:14:32,160
um if you do normal uh sorting of

00:14:28,720 --> 00:14:32,480
the um characters like if you use them

00:14:32,160 --> 00:14:34,399
in

00:14:32,480 --> 00:14:36,160
a consistent position in file names or

00:14:34,399 --> 00:14:37,760
something um

00:14:36,160 --> 00:14:39,600
just a regular sort will be

00:14:37,760 --> 00:14:42,639
chronological in most cases

00:14:39,600 --> 00:14:45,920
um and and if not it's easy to um

00:14:42,639 --> 00:14:47,680
manipulate so that it will be um so that

00:14:45,920 --> 00:14:50,480
there's there's a good deal more

00:14:47,680 --> 00:14:54,079
trickery in the pearl code to um

00:14:50,480 --> 00:14:55,760
do uh the exporting because there's a

00:14:54,079 --> 00:14:58,480
lot of support for a whole bunch of

00:14:55,760 --> 00:14:59,519
extra options but here's the main

00:14:58,480 --> 00:15:02,560
structure

00:14:59,519 --> 00:15:05,839
that um is used to to map

00:15:02,560 --> 00:15:08,880
the so like here's the um

00:15:05,839 --> 00:15:12,399
the main ones that are not including the

00:15:08,880 --> 00:15:14,399
escape the um csi is the code for

00:15:12,399 --> 00:15:16,560
having the escape character and then the

00:15:14,399 --> 00:15:19,760
left square bracket as the opening for

00:15:16,560 --> 00:15:22,480
the ansi standards of color encoding and

00:15:19,760 --> 00:15:24,160
um then they include decimal digits

00:15:22,480 --> 00:15:27,839
semicolons separated for

00:15:24,160 --> 00:15:29,199
all of the um uh color specification

00:15:27,839 --> 00:15:31,759
that's part of the ansi

00:15:29,199 --> 00:15:32,560
escape coding mechanism for having

00:15:31,759 --> 00:15:34,399
coloration

00:15:32,560 --> 00:15:35,680
and then you follow it with an m and you

00:15:34,399 --> 00:15:38,720
can also use

00:15:35,680 --> 00:15:41,440
it for um other uh

00:15:38,720 --> 00:15:43,199
text attributes besides just colors but

00:15:41,440 --> 00:15:44,560
uh most of the colors are mutually

00:15:43,199 --> 00:15:46,320
exclusive and a lot of the text

00:15:44,560 --> 00:15:49,440
attributes they're called sgr

00:15:46,320 --> 00:15:49,839
or select graphic rendition and um up

00:15:49,440 --> 00:15:53,040
here

00:15:49,839 --> 00:15:55,120
is the my mapping of the sgr's

00:15:53,040 --> 00:15:56,399
um to letters which they didn't

00:15:55,120 --> 00:15:58,720
originally have

00:15:56,399 --> 00:16:00,240
same with the my my system for the

00:15:58,720 --> 00:16:03,920
coloring that i

00:16:00,240 --> 00:16:06,160
set up names for all the um

00:16:03,920 --> 00:16:07,920
all the colors based on abbreviations of

00:16:06,160 --> 00:16:09,199
the expanded name of the color and map

00:16:07,920 --> 00:16:11,040
them to the ansi

00:16:09,199 --> 00:16:12,399
codes so that you can use the color

00:16:11,040 --> 00:16:15,440
names instead of

00:16:12,399 --> 00:16:16,320
um knowing needing to know any of the

00:16:15,440 --> 00:16:19,600
decimal

00:16:16,320 --> 00:16:22,480
um indices that they were allocated with

00:16:19,600 --> 00:16:23,600
um it's like a it's it's got a lossless

00:16:22,480 --> 00:16:26,000
conversion system

00:16:23,600 --> 00:16:26,959
and i've done this where i've made four

00:16:26,000 --> 00:16:29,360
different layers

00:16:26,959 --> 00:16:31,360
so up f is for foreground and low b is

00:16:29,360 --> 00:16:32,240
for background but those are implicit or

00:16:31,360 --> 00:16:35,279
implied

00:16:32,240 --> 00:16:37,279
by um the things that can handle all of

00:16:35,279 --> 00:16:40,320
the 256 colors that

00:16:37,279 --> 00:16:43,920
modern terminal programs like uh

00:16:40,320 --> 00:16:46,880
gnome terminal and sakura and

00:16:43,920 --> 00:16:48,800
there's a whole bunch q term and of

00:16:46,880 --> 00:16:52,320
course x term

00:16:48,800 --> 00:16:53,600
256 and a library called vte that is

00:16:52,320 --> 00:16:56,320
pretty commonplace

00:16:53,600 --> 00:16:57,279
and um standardized and has a great many

00:16:56,320 --> 00:17:00,160
functions and

00:16:57,279 --> 00:17:01,279
uh regularly gets uh new better

00:17:00,160 --> 00:17:06,240
abilities too

00:17:01,279 --> 00:17:10,480
um so i can show um a tsgr will show um

00:17:06,240 --> 00:17:12,480
the the mapping i've made for um

00:17:10,480 --> 00:17:13,679
olive and it demonstrates them that you

00:17:12,480 --> 00:17:16,959
can see um

00:17:13,679 --> 00:17:20,799
on the left are the original decimal um

00:17:16,959 --> 00:17:23,439
codes that uh each of the um

00:17:20,799 --> 00:17:24,000
sgr attributes bound to and the right is

00:17:23,439 --> 00:17:26,240
just showing

00:17:24,000 --> 00:17:27,280
the date stamp of what when you can see

00:17:26,240 --> 00:17:29,120
that the fastest

00:17:27,280 --> 00:17:30,640
are ticking by every two or three or

00:17:29,120 --> 00:17:34,240
whatever one or two

00:17:30,640 --> 00:17:37,360
um but so i've

00:17:34,240 --> 00:17:39,039
made up the um letters that map to it so

00:17:37,360 --> 00:17:39,840
you don't need to use the decimal

00:17:39,039 --> 00:17:43,600
numbers

00:17:39,840 --> 00:17:45,440
and um they can be combined and stuff

00:17:43,600 --> 00:17:47,600
in a little trickier way than the colors

00:17:45,440 --> 00:17:49,200
but you barely ever need these they're

00:17:47,600 --> 00:17:51,280
they're useful once in a while

00:17:49,200 --> 00:17:52,400
but for the most part um they're in

00:17:51,280 --> 00:17:54,640
essential and

00:17:52,400 --> 00:17:55,600
not not here's here's a map of all the

00:17:54,640 --> 00:17:59,840
00:17:55,600 --> 00:18:02,000
as as they're allocated initially and um

00:17:59,840 --> 00:18:03,120
it's just a reference but there's uh

00:18:02,000 --> 00:18:08,559
others that are

00:18:03,120 --> 00:18:12,840
um available to you so um

00:18:08,559 --> 00:18:15,840
let's see uh

00:18:12,840 --> 00:18:15,840
so

00:18:17,039 --> 00:18:22,480
i think i've shown the exporting from z

00:18:20,799 --> 00:18:25,679
shell and bash rc works

00:18:22,480 --> 00:18:26,480
um almost identically like in in most

00:18:25,679 --> 00:18:28,400
cases the

00:18:26,480 --> 00:18:29,679
syntax for exporting the variables from

00:18:28,400 --> 00:18:33,600
z shells

00:18:29,679 --> 00:18:35,600
dot z shrc file it can be identical in

00:18:33,600 --> 00:18:37,440
rc in your home directory and when your

00:18:35,600 --> 00:18:39,919
bash shell starts up like i can show you

00:18:37,440 --> 00:18:39,919
that mine

00:18:40,559 --> 00:18:44,799
is almost identical and uses the same

00:18:43,200 --> 00:18:48,320
stuff in my prompt and like

00:18:44,799 --> 00:18:52,720
i can do um echo uh

00:18:48,320 --> 00:18:56,720
um abc dollar

00:18:52,720 --> 00:19:00,240
red bright red up r um def

00:18:56,720 --> 00:19:03,840
uh dollar orange

00:19:00,240 --> 00:19:04,160
ghi um dollar zed reset and you can see

00:19:03,840 --> 00:19:07,760
that

00:19:04,160 --> 00:19:10,080
it um uses the default green

00:19:07,760 --> 00:19:11,840
text color for the abc that was just

00:19:10,080 --> 00:19:12,400
following right off my prompt that sets

00:19:11,840 --> 00:19:15,360
green

00:19:12,400 --> 00:19:16,960
and then the r sets red for the def and

00:19:15,360 --> 00:19:19,760
orange for the ghi

00:19:16,960 --> 00:19:21,600
and then zed resets it if i put other

00:19:19,760 --> 00:19:22,559
text beyond it it would be back to the

00:19:21,600 --> 00:19:25,679
zero normal

00:19:22,559 --> 00:19:28,799
but normally you can just set a color in

00:19:25,679 --> 00:19:30,720
your strings and um you may need uh

00:19:28,799 --> 00:19:32,799
curly braces around it if you wanted to

00:19:30,720 --> 00:19:34,880
make the r right next to the d

00:19:32,799 --> 00:19:37,520
so that it would curly brace before the

00:19:34,880 --> 00:19:39,200
r and a closed curly brace after

00:19:37,520 --> 00:19:41,360
so it would only interpret the r as the

00:19:39,200 --> 00:19:43,440
variable name and not r d e f

00:19:41,360 --> 00:19:44,799
um but if you space separate them that's

00:19:43,440 --> 00:19:47,200
not necessary so

00:19:44,799 --> 00:19:48,240
it's minutiae but uh it's worth knowing

00:19:47,200 --> 00:19:51,200
about so

00:19:48,240 --> 00:19:52,080
um this is my dash and z shells look

00:19:51,200 --> 00:19:56,240
pretty similar

00:19:52,080 --> 00:19:59,360
um and mostly function the same way but

00:19:56,240 --> 00:20:01,679
a whole lot of stuff is in my z shell

00:19:59,360 --> 00:20:03,440
config file that hasn't made its way

00:20:01,679 --> 00:20:06,640
into my bash rc yet so

00:20:03,440 --> 00:20:09,200
if you want to try um octology out

00:20:06,640 --> 00:20:10,720
or any of this stuff from my repository

00:20:09,200 --> 00:20:12,799
um just be warned that

00:20:10,720 --> 00:20:14,000
bash is lagging pretty significantly

00:20:12,799 --> 00:20:16,000
behind z shell but

00:20:14,000 --> 00:20:17,200
eventually i'll sync them up again soon

00:20:16,000 --> 00:20:20,559
hopefully soon and

00:20:17,200 --> 00:20:23,039
um i don't use bash much but um it's

00:20:20,559 --> 00:20:24,240
probably good since it's the default and

00:20:23,039 --> 00:20:27,919
uh common standard

00:20:24,240 --> 00:20:32,080
that many people rely on um every day so

00:20:27,919 --> 00:20:34,080
i'd like to try to support it too um

00:20:32,080 --> 00:20:36,400
i think the 20-minute window if you want

00:20:34,080 --> 00:20:37,679
to wrap it up on answer of your question

00:20:36,400 --> 00:20:40,880
you still have a few minutes

00:20:37,679 --> 00:20:45,440
to do that oh yeah

00:20:40,880 --> 00:20:45,440
um so uh there's like um

00:20:45,679 --> 00:20:53,200
the i have a dick command um

00:20:49,679 --> 00:20:55,440
that uh shows um how to use a whole

00:20:53,200 --> 00:21:00,240
bunch of them like um

00:20:55,440 --> 00:21:00,240
um i see bang and

00:21:00,840 --> 00:21:06,320
um

00:21:03,679 --> 00:21:06,320
oh wait um

00:21:13,600 --> 00:21:17,840
i don't need it yeah

00:21:19,919 --> 00:21:23,840
why is it not working yeah

00:21:25,919 --> 00:21:34,400
i i don't know yeah

00:21:30,960 --> 00:21:37,440
i don't know it used to work but okay um

00:21:34,400 --> 00:21:41,600
so anyway this is an example of um

00:21:37,440 --> 00:21:41,600
using a whole lot of the um variables um

00:21:42,720 --> 00:21:46,080
and it shows that it's just doing a

00:21:44,960 --> 00:21:48,240
whole bunch of regexes

00:21:46,080 --> 00:21:49,280
using the dollar one and then the colors

00:21:48,240 --> 00:21:51,520
and they align they

00:21:49,280 --> 00:21:52,320
match so there too and um there's a a

00:21:51,520 --> 00:21:56,159
bunch of

00:21:52,320 --> 00:21:59,200
usages um so like uh

00:21:56,159 --> 00:22:00,400
like this is calling it and the normal

00:21:59,200 --> 00:22:03,919
dictionary

00:22:00,400 --> 00:22:06,000
um output is colorless and

00:22:03,919 --> 00:22:08,960
you can do reformatting in the reg x's

00:22:06,000 --> 00:22:11,840
too and my dictionary dic command

00:22:08,960 --> 00:22:13,520
that calls dict um does re formatting

00:22:11,840 --> 00:22:16,080
and coloration of this stuff

00:22:13,520 --> 00:22:17,039
so like um it's a it's one of the best

00:22:16,080 --> 00:22:20,799
examples

00:22:17,039 --> 00:22:22,000
uh where it reformats and heavily colors

00:22:20,799 --> 00:22:23,520
all sorts of stuff and there's a

00:22:22,000 --> 00:22:26,559
built-in with dict

00:22:23,520 --> 00:22:28,480
called color it and it's weak and my

00:22:26,559 --> 00:22:30,240
mine is way better and it so it should

00:22:28,480 --> 00:22:35,200
be easy if you um

00:22:30,240 --> 00:22:35,200
if you just like focus on um

00:22:35,360 --> 00:22:42,080
the the main 21 of

00:22:39,200 --> 00:22:43,840
dollar zed to reset the zero and the

00:22:42,080 --> 00:22:45,679
lowercase 10 and the uppercase 10. you

00:22:43,840 --> 00:22:49,760
can use them in shell scripts and

00:22:45,679 --> 00:22:53,280
like i have um clrz goes through

00:22:49,760 --> 00:22:56,720
uh the um the shell ones

00:22:53,280 --> 00:22:57,520
and uh you can um put them in pearl

00:22:56,720 --> 00:23:00,080
scripts too

00:22:57,520 --> 00:23:02,080
what what's pretty neat is that you can

00:23:00,080 --> 00:23:05,360
um

00:23:02,080 --> 00:23:08,799
use uh um like bj

00:23:05,360 --> 00:23:12,320
will uh show um which bj

00:23:08,799 --> 00:23:12,320
or pew is um

00:23:13,360 --> 00:23:18,159
it's a an alias to the blackjack little

00:23:16,559 --> 00:23:21,120
script that i have that runs through

00:23:18,159 --> 00:23:22,640
blackjack hands and um sets up three

00:23:21,120 --> 00:23:25,760
players with purses and

00:23:22,640 --> 00:23:26,240
a dealer with a purse and then um runs

00:23:25,760 --> 00:23:29,120
through

00:23:26,240 --> 00:23:30,640
pseudo-random card allocation for all

00:23:29,120 --> 00:23:33,039
the players and scores them up

00:23:30,640 --> 00:23:34,159
and then says whether they win against

00:23:33,039 --> 00:23:36,400
the dealer or not

00:23:34,159 --> 00:23:37,520
and then um tabulates what their purse

00:23:36,400 --> 00:23:40,400
is at the end

00:23:37,520 --> 00:23:41,360
and um it it's piped through normally it

00:23:40,400 --> 00:23:44,799
doesn't uh like

00:23:41,360 --> 00:23:47,840
pl ah

00:23:44,799 --> 00:23:50,080
okay we're we're running out of time

00:23:47,840 --> 00:23:52,080
okay cool well yeah so like the

00:23:50,080 --> 00:23:53,120
variables are pretty easy and there's a

00:23:52,080 --> 00:23:55,600
whole bunch of other

00:23:53,120 --> 00:23:56,799
abilities that are more more advanced

00:23:55,600 --> 00:23:59,520
but rarely needed

00:23:56,799 --> 00:24:01,200
so please adopt these these 20 colors

00:23:59,520 --> 00:24:04,240
like export them from your shelves

00:24:01,200 --> 00:24:05,360
and and export them or or put them in

00:24:04,240 --> 00:24:06,799
export okay at least

00:24:05,360 --> 00:24:09,360
and specify that you want them in your

00:24:06,799 --> 00:24:10,080
perl code and you can just embed them in

00:24:09,360 --> 00:24:13,200
your strings

00:24:10,080 --> 00:24:14,880
anywhere and it's um it's pretty rad to

00:24:13,200 --> 00:24:17,039
be able to put reg x's

00:24:14,880 --> 00:24:18,080
and do your captures and stuff and have

00:24:17,039 --> 00:24:21,279
dollar one two

00:24:18,080 --> 00:24:22,559
nine um and the color code's also one

00:24:21,279 --> 00:24:24,640
character so that they can all

00:24:22,559 --> 00:24:25,600
line up with slash x at the end of your

00:24:24,640 --> 00:24:28,159
reg x's

00:24:25,600 --> 00:24:30,000
um it's powerful and it's easy and it's

00:24:28,159 --> 00:24:32,480
expressive and if you need more

00:24:30,000 --> 00:24:34,400
advanced stuff octology does it so

00:24:32,480 --> 00:24:37,039
hopefully this is a good introduction

00:24:34,400 --> 00:24:37,840
and if anybody has any questions or um

00:24:37,039 --> 00:24:39,919
comments or

00:24:37,840 --> 00:24:41,120
feedback or whatever please email me on

00:24:39,919 --> 00:24:44,240
pip at cpan

00:24:41,120 --> 00:24:47,440
or pip stewart gmail.com and

00:24:44,240 --> 00:24:48,480
um i'd really like to get feedback and

00:24:47,440 --> 00:24:50,240
help people to be

00:24:48,480 --> 00:24:52,480
more colorful and more expressive in

00:24:50,240 --> 00:24:53,840
their code and um have it be intuitive

00:24:52,480 --> 00:24:57,679
and efficient and

00:24:53,840 --> 00:24:59,440
um unambiguous and stuff to you so uh

00:24:57,679 --> 00:25:00,799
thanks everybody for attending my talk

00:24:59,440 --> 00:25:02,159
and i

00:25:00,799 --> 00:25:04,240
hope you enjoy the whole rest of the

00:25:02,159 --> 00:25:06,400
conference and i'd

00:25:04,240 --> 00:25:08,080
love to hear whatever any of your

00:25:06,400 --> 00:25:11,440
opinions are about anything you've seen

00:25:08,080 --> 00:25:11,440

YouTube URL: https://www.youtube.com/watch?v=FgS6IXq-xVE


