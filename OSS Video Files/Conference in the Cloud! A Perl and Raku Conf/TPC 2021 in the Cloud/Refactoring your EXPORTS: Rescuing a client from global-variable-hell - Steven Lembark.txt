Title: Refactoring your EXPORTS: Rescuing a client from global-variable-hell - Steven Lembark
Publication date: 2021-06-08
Playlist: TPC 2021 in the Cloud
Description: 
	At first @EXPORT seemed natural, at least to  C programmers: Everyone sees everything, uses what they need. Fast forward a few decades, with a GlobalVariableModule that can't be modified because nobody knows what is really used. This is the story of what to do next.

What's next is a sequence of converting it all from @EXPORT to @EXPORT_OK and refactoring the contents into saner modules with external configurations using objects. One stage is appreciating the patterns and structure of 600 variables defined in terms of one another, another is extracting that into YAML structs [with comments], another is re-exporting it all via that most beautiful and under-appreciated of Perly tools: Symbol. The final conversion replaces @EXPORT with @EXPORT_OK so that we know what is actually being exported... which is probably a reasonable chunk of code for 40 minutes. Converting @EXPORT_OK imports to configuration-object calls isn't all that complicated. Part of the technique involves global unit testing (see my other talk) that allows tracking down what's missing when @EXPORT becomes just OK.

This matters because too many places are stuck on v5.8 because they don't actually know how to validate their code moving forward; they no longer know what it does. What this one case shows is how to get over the hump and start moving forward on a route to more modern, validated, documented code.
Captions: 
	00:00:01,360 --> 00:00:06,480
finger

00:00:03,199 --> 00:00:07,759
yes we can see your slides okay so i

00:00:06,480 --> 00:00:10,000
didn't screw that up too loudly now

00:00:07,759 --> 00:00:14,240
let's see if i can advance the screens

00:00:10,000 --> 00:00:16,080
uh what i'm going to be talking about is

00:00:14,240 --> 00:00:19,359
is a waste of time if it isn't on the

00:00:16,080 --> 00:00:23,039
screen what the hell just happened

00:00:19,359 --> 00:00:26,080
okay abracadabra

00:00:23,039 --> 00:00:30,080
this is uh mostly the result

00:00:26,080 --> 00:00:31,920
of a lot of time spent beating up on old

00:00:30,080 --> 00:00:33,680
pearl code

00:00:31,920 --> 00:00:35,200
and one of the things you know we all

00:00:33,680 --> 00:00:37,200
want to leave a legacy you want to leave

00:00:35,200 --> 00:00:38,960
something behind you that matters that

00:00:37,200 --> 00:00:41,520
people use

00:00:38,960 --> 00:00:42,879
and but if you leave your mark on

00:00:41,520 --> 00:00:46,320
history if the only thing you

00:00:42,879 --> 00:00:50,879
have a history it never changes

00:00:46,320 --> 00:00:53,360
it never has any effect on the future

00:00:50,879 --> 00:00:54,800
you can find yourself frozen in 5.8

00:00:53,360 --> 00:00:56,480
until you die

00:00:54,800 --> 00:00:58,079
and a number of companies i've worked

00:00:56,480 --> 00:01:01,280
for have been in just that position

00:00:58,079 --> 00:01:05,280
they've been using user bin perl for

00:01:01,280 --> 00:01:07,280
20 years and on platforms like aix and

00:01:05,280 --> 00:01:10,840
hp ux

00:01:07,280 --> 00:01:12,479
it you know time became frozen in around

00:01:10,840 --> 00:01:14,159
2005.

00:01:12,479 --> 00:01:16,479
then they realized gee we're missing out

00:01:14,159 --> 00:01:19,360
on stuff now they've got to

00:01:16,479 --> 00:01:21,680
try and get forward so the question is

00:01:19,360 --> 00:01:21,680
how

00:01:22,080 --> 00:01:25,680
one problem you've got that you've got

00:01:23,680 --> 00:01:27,360
to outgrow is legacy code

00:01:25,680 --> 00:01:28,960
people have code that nobody's touched

00:01:27,360 --> 00:01:31,680
the people have left

00:01:28,960 --> 00:01:33,119
uh in one case the the major person who

00:01:31,680 --> 00:01:34,799
knew it

00:01:33,119 --> 00:01:36,320
hit senility i mean he just couldn't

00:01:34,799 --> 00:01:37,680
remember what he was typing anymore they

00:01:36,320 --> 00:01:41,119
had to get rid of the guy

00:01:37,680 --> 00:01:43,439
but then nobody knew it but

00:01:41,119 --> 00:01:44,159
now let's say you want to upgrade this

00:01:43,439 --> 00:01:45,439
stuff

00:01:44,159 --> 00:01:46,799
i want to be talking about today

00:01:45,439 --> 00:01:47,520
tomorrow's and other problems if you

00:01:46,799 --> 00:01:49,920
have just

00:01:47,520 --> 00:01:51,040
a lot of it but what are some things you

00:01:49,920 --> 00:01:54,320
can do to at least

00:01:51,040 --> 00:01:56,159
validate the steps you're taking now the

00:01:54,320 --> 00:01:57,680
first thing people say is well

00:01:56,159 --> 00:01:59,360
you know what what if let's say we

00:01:57,680 --> 00:02:01,280
upgrade to 5 30 tomorrow what's going to

00:01:59,360 --> 00:02:03,040
work what's not

00:02:01,280 --> 00:02:05,520
and have any anyone ever been in that

00:02:03,040 --> 00:02:05,520
position

00:02:07,680 --> 00:02:11,520
everyone with a heartbeat say hello

00:02:12,000 --> 00:02:15,760
hi hello hello hello

00:02:16,080 --> 00:02:19,360
that's the quiz anyone here ever been in

00:02:17,920 --> 00:02:20,480
a position where you've got a bunch of

00:02:19,360 --> 00:02:22,239
ancient code

00:02:20,480 --> 00:02:24,400
but no one will let you update it

00:02:22,239 --> 00:02:29,360
because it might break

00:02:24,400 --> 00:02:31,440
yes and no test possibly maybe

00:02:29,360 --> 00:02:33,200
possibly maybe well and so is it because

00:02:31,440 --> 00:02:36,400
there are no tests

00:02:33,200 --> 00:02:39,360
now a lot of people for some reason

00:02:36,400 --> 00:02:40,560
require okay has a bad rap but i'm going

00:02:39,360 --> 00:02:42,879
to show you that

00:02:40,560 --> 00:02:44,000
you can have tests for everything that

00:02:42,879 --> 00:02:47,519
you have

00:02:44,000 --> 00:02:48,800
in about 30 minutes and you can test

00:02:47,519 --> 00:02:50,800
everything there to the point where you

00:02:48,800 --> 00:02:53,440
can at least say yeah the language

00:02:50,800 --> 00:02:56,239
hasn't fried it

00:02:53,440 --> 00:02:58,000
um and that the things yeah if you've

00:02:56,239 --> 00:03:01,840
let's find out what works

00:02:58,000 --> 00:03:04,159
the first step is to find a corner

00:03:01,840 --> 00:03:07,200
in var temp or something where you can

00:03:04,159 --> 00:03:11,519
try everything and just see what works

00:03:07,200 --> 00:03:12,760
now there was one company was 520 they

00:03:11,519 --> 00:03:17,120
were going from

00:03:12,760 --> 00:03:19,200
5.12 to 5.20 something a few years ago

00:03:17,120 --> 00:03:20,319
and they hit all of the curly braces in

00:03:19,200 --> 00:03:22,080
regex the

00:03:20,319 --> 00:03:26,000
basic you know everything that happened

00:03:22,080 --> 00:03:28,959
the the all the broken tests in 516

00:03:26,000 --> 00:03:29,840
and they want the no joke they wanted to

00:03:28,959 --> 00:03:32,879
undo

00:03:29,840 --> 00:03:35,200
20 years of technical debt in

00:03:32,879 --> 00:03:37,920
six to eight weeks which is where a lot

00:03:35,200 --> 00:03:39,599
of this came from

00:03:37,920 --> 00:03:40,959
and you have to be able to test

00:03:39,599 --> 00:03:46,959
everything

00:03:40,959 --> 00:03:48,879
and does anyone remember red flags

00:03:46,959 --> 00:03:50,239
oh come on people no one goes back that

00:03:48,879 --> 00:03:53,920
far

00:03:50,239 --> 00:03:56,400
okay red flags if you're cutting and

00:03:53,920 --> 00:03:56,400
pasting

00:03:56,560 --> 00:04:00,959
holy cow we gotta get people i i think

00:03:59,519 --> 00:04:02,799
the uh

00:04:00,959 --> 00:04:04,159
i think the kids today call it code

00:04:02,799 --> 00:04:07,360
smells

00:04:04,159 --> 00:04:08,159
good smells uh mjd used to call it red

00:04:07,360 --> 00:04:09,599
flags

00:04:08,159 --> 00:04:11,760
if you're cutting and pasting you're

00:04:09,599 --> 00:04:12,400
doing it wrong especially in pearl

00:04:11,760 --> 00:04:16,079
because

00:04:12,400 --> 00:04:18,400
pearl is such a dynamic language that

00:04:16,079 --> 00:04:20,000
writing pearl that tests itself is

00:04:18,400 --> 00:04:23,040
blindingly easy

00:04:20,000 --> 00:04:27,600
if you're lazy here's a really

00:04:23,040 --> 00:04:29,360
start here man just i'll put this on the

00:04:27,600 --> 00:04:30,960
i'll stick this on slideshare but just

00:04:29,360 --> 00:04:32,560
cut and paste it and start going through

00:04:30,960 --> 00:04:36,560
those old

00:04:32,560 --> 00:04:38,720
um pearl repair shops

00:04:36,560 --> 00:04:41,199
the a lot of the stuff he said it

00:04:38,720 --> 00:04:43,680
applies to every language

00:04:41,199 --> 00:04:45,520
uh mjd is odd he's actually a computer

00:04:43,680 --> 00:04:48,960
scientist that got into pearl so he

00:04:45,520 --> 00:04:50,800
he applied real thought to it and

00:04:48,960 --> 00:04:53,360
he shows a lot of the mistakes that i've

00:04:50,800 --> 00:04:56,639
dealt with over and over again

00:04:53,360 --> 00:04:58,639
the first one is don't use user bini and

00:04:56,639 --> 00:05:00,400
you know use user bid env perl instead

00:04:58,639 --> 00:05:02,639
of user bin

00:05:00,400 --> 00:05:04,400
a lot of the problems i've seen is

00:05:02,639 --> 00:05:06,240
people say we can't upgrade the system

00:05:04,400 --> 00:05:06,960
for all to break the system and that's

00:05:06,240 --> 00:05:09,039
true

00:05:06,960 --> 00:05:10,000
a lot of systems today even red hat if

00:05:09,039 --> 00:05:12,720
you take pearl

00:05:10,000 --> 00:05:14,560
off of them they break but they won't

00:05:12,720 --> 00:05:15,360
update pearl because they won't check

00:05:14,560 --> 00:05:18,639
their own

00:05:15,360 --> 00:05:19,039
code that uses pearl so yeah you may be

00:05:18,639 --> 00:05:22,240
stuck

00:05:19,039 --> 00:05:24,080
installing opt-in pearl i you know i

00:05:22,240 --> 00:05:25,759
hate the pearl brew approach if everyone

00:05:24,080 --> 00:05:27,840
has their own copy of pearl in their

00:05:25,759 --> 00:05:30,320
home directory

00:05:27,840 --> 00:05:32,000
but you may have to have opt pearl

00:05:30,320 --> 00:05:33,759
something

00:05:32,000 --> 00:05:36,080
and replace it that way so that might be

00:05:33,759 --> 00:05:38,479
the first step

00:05:36,080 --> 00:05:40,400
now one of the things you have is let's

00:05:38,479 --> 00:05:42,639
find what we have

00:05:40,400 --> 00:05:44,639
a lot of places i've been to they can't

00:05:42,639 --> 00:05:44,960
tell you how much of their code is corn

00:05:44,639 --> 00:05:48,960
or

00:05:44,960 --> 00:05:52,240
bash or or pearl or what

00:05:48,960 --> 00:05:54,560
if oops

00:05:52,240 --> 00:05:55,759
if if can people see the screen by the

00:05:54,560 --> 00:05:59,759
way

00:05:55,759 --> 00:06:03,360
yes yes okay

00:05:59,759 --> 00:06:06,080
the the trick here is

00:06:03,360 --> 00:06:08,000
if you look at whatever directories

00:06:06,080 --> 00:06:11,280
contain your stuff

00:06:08,000 --> 00:06:14,400
and you find all the files you can run

00:06:11,280 --> 00:06:16,240
file on them oops

00:06:14,400 --> 00:06:17,840
i thought i highlighted that you can run

00:06:16,240 --> 00:06:21,120
file on them all

00:06:17,840 --> 00:06:22,880
file will tell you if it's perl only

00:06:21,120 --> 00:06:25,680
test those files

00:06:22,880 --> 00:06:26,880
how's that for a novel thought the great

00:06:25,680 --> 00:06:30,000
thing about that is

00:06:26,880 --> 00:06:31,919
i can use x args to generate all my

00:06:30,000 --> 00:06:33,199
tests or i can i can use a loop and a

00:06:31,919 --> 00:06:36,080
shell

00:06:33,199 --> 00:06:37,199
so i can say let's test every pearl

00:06:36,080 --> 00:06:39,520
program

00:06:37,199 --> 00:06:42,240
and i don't have to look at any of them

00:06:39,520 --> 00:06:42,240
by hand

00:06:43,039 --> 00:06:46,400
okay so now i can find a copy of every

00:06:45,600 --> 00:06:48,639
file or something

00:06:46,400 --> 00:06:49,520
i can see oh gee just copy the test for

00:06:48,639 --> 00:06:52,560
everything

00:06:49,520 --> 00:06:55,599
no you don't need really

00:06:52,560 --> 00:06:58,639
much of anything to test these

00:06:55,599 --> 00:07:00,479
the first thing you need really to test

00:06:58,639 --> 00:07:02,800
a file is its path

00:07:00,479 --> 00:07:05,280
if you go through file and you find all

00:07:02,800 --> 00:07:08,960
the pearly stuff

00:07:05,280 --> 00:07:12,319
i can take that path

00:07:08,960 --> 00:07:16,560
and turn it into a sim link with a dot

00:07:12,319 --> 00:07:19,520
t on the end of it

00:07:16,560 --> 00:07:20,080
i don't hear any again everywhere

00:07:19,520 --> 00:07:22,800
breathing

00:07:20,080 --> 00:07:23,280
say good morning good morning good

00:07:22,800 --> 00:07:26,400
morning

00:07:23,280 --> 00:07:30,400
good morning good afternoon yeah

00:07:26,400 --> 00:07:34,720
here's the point if i

00:07:30,400 --> 00:07:38,479
if i encode the path as a sim link

00:07:34,720 --> 00:07:40,960
i can go back and i can find that file

00:07:38,479 --> 00:07:43,120
again trivially trivially

00:07:40,960 --> 00:07:45,039
that means i can write a test that wakes

00:07:43,120 --> 00:07:48,800
up and asks what am i testing

00:07:45,039 --> 00:07:50,400
another thing i found at one place now

00:07:48,800 --> 00:07:52,400
different places i've been at had

00:07:50,400 --> 00:07:54,479
different versions of this one

00:07:52,400 --> 00:07:56,240
they got started on modules really early

00:07:54,479 --> 00:07:58,080
before anyone really knew how the paths

00:07:56,240 --> 00:08:00,319
and the package names related

00:07:58,080 --> 00:08:02,240
so what they had is a pearl 5 live that

00:08:00,319 --> 00:08:05,280
included every directory

00:08:02,240 --> 00:08:07,199
and all the packages were base names and

00:08:05,280 --> 00:08:09,280
then to pick which ones you needed you

00:08:07,199 --> 00:08:11,520
modified your pearl 5 before you ran

00:08:09,280 --> 00:08:11,520
things

00:08:11,599 --> 00:08:15,520
another place i was at they had

00:08:13,599 --> 00:08:17,599
overlapping directories

00:08:15,520 --> 00:08:19,919
so everyone understood the directories

00:08:17,599 --> 00:08:23,280
but not everyone understood the idea of

00:08:19,919 --> 00:08:24,960
unique directories so under live

00:08:23,280 --> 00:08:26,319
there was a fubar but then there was a

00:08:24,960 --> 00:08:27,759
fubar bletch

00:08:26,319 --> 00:08:29,919
and there were things that based their

00:08:27,759 --> 00:08:30,960
package name on fubar

00:08:29,919 --> 00:08:32,560
and there were things that based their

00:08:30,960 --> 00:08:34,399
package name on foo and you had to know

00:08:32,560 --> 00:08:37,680
which was which

00:08:34,399 --> 00:08:40,080
so by just doubling one character here

00:08:37,680 --> 00:08:41,039
if i know what i'm looking at i can tell

00:08:40,080 --> 00:08:44,399
you

00:08:41,039 --> 00:08:46,000
what part of the path should be deriving

00:08:44,399 --> 00:08:50,560
the packet

00:08:46,000 --> 00:08:50,560
for that 1.t file for that pm file

00:08:51,760 --> 00:08:56,240
so i can go from there to here to double

00:08:55,120 --> 00:08:59,279
colons

00:08:56,240 --> 00:09:01,760
and bingo

00:08:59,279 --> 00:09:05,120
i can actually check a file and ask if

00:09:01,760 --> 00:09:07,680
it has the right package in it

00:09:05,120 --> 00:09:09,440
so i can start with something like this

00:09:07,680 --> 00:09:11,040
using nothing but file base name and

00:09:09,440 --> 00:09:14,480
subtest

00:09:11,040 --> 00:09:15,519
if i look up the first character in my

00:09:14,480 --> 00:09:16,880
file maybe till

00:09:15,519 --> 00:09:18,640
maybe you don't like tildes you like

00:09:16,880 --> 00:09:22,480
plus signs i don't care

00:09:18,640 --> 00:09:26,080
pick whatever but you can split the

00:09:22,480 --> 00:09:29,440
thing and join it back together again

00:09:26,080 --> 00:09:31,360
and i can just do a require okay at that

00:09:29,440 --> 00:09:35,200
point i can look at where i've got a

00:09:31,360 --> 00:09:37,040
doubled separator and i can split that

00:09:35,200 --> 00:09:38,240
apart and make the package name out of

00:09:37,040 --> 00:09:41,040
it

00:09:38,240 --> 00:09:43,360
at that point i can ask two things can i

00:09:41,040 --> 00:09:47,440
require this thing

00:09:43,360 --> 00:09:50,000
and does it can it do a version

00:09:47,440 --> 00:09:52,399
does anyone realize why can version is

00:09:50,000 --> 00:09:52,399
important

00:09:54,080 --> 00:09:58,959
so that when you make changes you can

00:09:57,040 --> 00:10:00,880
bump up the version

00:09:58,959 --> 00:10:02,959
no there's another what what do we know

00:10:00,880 --> 00:10:06,480
about the version

00:10:02,959 --> 00:10:06,480
what package is version in

00:10:09,440 --> 00:10:16,480
universal if i

00:10:12,880 --> 00:10:18,000
load a module and you fat fingered the

00:10:16,480 --> 00:10:20,959
package name

00:10:18,000 --> 00:10:22,880
then the package name that i expect from

00:10:20,959 --> 00:10:24,800
the path

00:10:22,880 --> 00:10:27,680
won't be able to version because it

00:10:24,800 --> 00:10:27,680
won't be installed

00:10:28,240 --> 00:10:32,079
i'm raising my hand how many people here

00:10:30,240 --> 00:10:34,720
have fat fingered to package name before

00:10:32,079 --> 00:10:34,720
in their lives

00:10:35,279 --> 00:10:38,640
all the time okay well you now have a

00:10:37,920 --> 00:10:41,600
one-step

00:10:38,640 --> 00:10:45,279
check do all of my package names seem

00:10:41,600 --> 00:10:45,279
reasonable for the paths that they're in

00:10:45,760 --> 00:10:49,360
how many i mean you look at the number

00:10:47,120 --> 00:10:53,120
of lines of code

00:10:49,360 --> 00:10:56,560
i don't have to rewrite any of this

00:10:53,120 --> 00:11:01,279
i just run a shell script that sim links

00:10:56,560 --> 00:11:03,600
in one case about 75 000 files

00:11:01,279 --> 00:11:05,440
and just runs this for each one of them

00:11:03,600 --> 00:11:07,200
if i'm upgrading on a version

00:11:05,440 --> 00:11:09,040
i can find out pretty quickly that i've

00:11:07,200 --> 00:11:10,560
got unescaped braces and

00:11:09,040 --> 00:11:13,279
i mean you've got to start correcting

00:11:10,560 --> 00:11:15,760
things but you don't have to copy or

00:11:13,279 --> 00:11:17,680
edit or modify anything you don't have

00:11:15,760 --> 00:11:20,000
to really know much about these files

00:11:17,680 --> 00:11:22,880
other than hey this is pearl it's a dot

00:11:20,000 --> 00:11:24,720
pm in this case because it's a required

00:11:22,880 --> 00:11:26,079
so as long as if you want to check all

00:11:24,720 --> 00:11:28,079
your pro modules

00:11:26,079 --> 00:11:29,360
this will do it this in one shell script

00:11:28,079 --> 00:11:32,560
with x-args

00:11:29,360 --> 00:11:32,560
and and grep pearl

00:11:33,120 --> 00:11:37,200
but one of the other things and this is

00:11:35,200 --> 00:11:39,760
a recent thing i was dealing with

00:11:37,200 --> 00:11:43,040
these people wanted to be able to test

00:11:39,760 --> 00:11:44,560
their exports

00:11:43,040 --> 00:11:46,160
thinking that i mean those of us with

00:11:44,560 --> 00:11:47,519
gray enough hair remember remember when

00:11:46,160 --> 00:11:49,519
the c

00:11:47,519 --> 00:11:51,600
journal was a monthly that everyone

00:11:49,519 --> 00:11:53,839
actually read

00:11:51,600 --> 00:11:55,279
bloggers columns well that's where

00:11:53,839 --> 00:11:57,279
exports come from

00:11:55,279 --> 00:12:00,079
that's c you just you shove variables

00:11:57,279 --> 00:12:03,600
into a space you pass around structs

00:12:00,079 --> 00:12:07,360
so what happens is a lot of places

00:12:03,600 --> 00:12:10,880
they have export lists that are

00:12:07,360 --> 00:12:12,800
you know pages long people typo the

00:12:10,880 --> 00:12:15,279
names they do whatever but nobody really

00:12:12,800 --> 00:12:17,600
knows what's in them no one really knows

00:12:15,279 --> 00:12:18,560
whether or not everything being exported

00:12:17,600 --> 00:12:21,360
is used

00:12:18,560 --> 00:12:22,160
or whether it's usable does anyone ever

00:12:21,360 --> 00:12:25,839
run into that

00:12:22,160 --> 00:12:25,839
that situation

00:12:27,519 --> 00:12:33,600
hello no one's seen that anymore

00:12:30,959 --> 00:12:34,880
hello experts it's gonna get boring real

00:12:33,600 --> 00:12:38,000
fast

00:12:34,880 --> 00:12:41,760
uh most of our code base is moose so

00:12:38,000 --> 00:12:45,600
no okay well you're lucky man

00:12:41,760 --> 00:12:48,959
so the trick is uh

00:12:45,600 --> 00:12:48,959
folks use symbol very much

00:12:49,839 --> 00:12:56,800
no no qualify to ref learn

00:12:53,600 --> 00:12:59,839
this is for testing this and

00:12:56,800 --> 00:13:03,279
and for metadata driven code this is

00:12:59,839 --> 00:13:06,720
the greatest thing since peanut butter

00:13:03,279 --> 00:13:08,880
uh the basic thing is given i have a

00:13:06,720 --> 00:13:12,160
path and given i have a package

00:13:08,880 --> 00:13:13,680
from it i can require it i can look at

00:13:12,160 --> 00:13:17,120
export and export okay

00:13:13,680 --> 00:13:20,320
i can walk down all the contents of them

00:13:17,120 --> 00:13:23,760
and i can ask does that thing exist

00:13:20,320 --> 00:13:27,600
in the package is it defined

00:13:23,760 --> 00:13:29,279
and the way to do that i can ask first

00:13:27,600 --> 00:13:31,360
if the package is an exporter

00:13:29,279 --> 00:13:34,720
if it isn't i don't really care very

00:13:31,360 --> 00:13:38,079
much because nobody's using those

00:13:34,720 --> 00:13:39,680
i can also ask if it can import

00:13:38,079 --> 00:13:41,519
what's important about that is if i

00:13:39,680 --> 00:13:45,279
require the thing

00:13:41,519 --> 00:13:47,360
and it uses exporter and the

00:13:45,279 --> 00:13:49,120
and actually i screwed it by the way i

00:13:47,360 --> 00:13:50,480
guarantee there's a lot of bad code in

00:13:49,120 --> 00:13:51,279
here because i wrote this stream of

00:13:50,480 --> 00:13:53,519
consciousness

00:13:51,279 --> 00:13:54,320
last night usually i would spend about

00:13:53,519 --> 00:13:56,000
40 hours

00:13:54,320 --> 00:13:58,160
putting one of these together but with

00:13:56,000 --> 00:13:59,839
the time we got

00:13:58,160 --> 00:14:01,199
so i have to change that that should be

00:13:59,839 --> 00:14:05,040
packaged

00:14:01,199 --> 00:14:08,079
if the package can import

00:14:05,040 --> 00:14:09,839
then it's worth checking the export okay

00:14:08,079 --> 00:14:13,440
and the exports

00:14:09,839 --> 00:14:16,800
if the package can't import but it is an

00:14:13,440 --> 00:14:20,000
exporter you've got a problem

00:14:16,800 --> 00:14:21,920
maybe the package wasn't defined but

00:14:20,000 --> 00:14:23,519
something is pretty strange if you can't

00:14:21,920 --> 00:14:28,160
export your parent as

00:14:23,519 --> 00:14:31,760
exporter as your parent after that

00:14:28,160 --> 00:14:33,680
i can ask for export and expert okay

00:14:31,760 --> 00:14:34,880
qualify to ref will give me a symbol

00:14:33,680 --> 00:14:37,600
table entry

00:14:34,880 --> 00:14:39,600
i can look up the name inside of a

00:14:37,600 --> 00:14:42,320
package

00:14:39,600 --> 00:14:43,839
and have people seen thingy notation

00:14:42,320 --> 00:14:49,440
array

00:14:43,839 --> 00:14:49,440
io code you can attach those to a symbol

00:14:49,519 --> 00:14:55,360
anybody no no

00:14:52,560 --> 00:14:56,320
well this is a great thing for looking

00:14:55,360 --> 00:14:58,880
up

00:14:56,320 --> 00:15:00,000
does something exist if if you're trying

00:14:58,880 --> 00:15:01,839
to do

00:15:00,000 --> 00:15:03,040
and also again for metadata-driven

00:15:01,839 --> 00:15:06,560
programming

00:15:03,040 --> 00:15:09,600
can i find an array named export

00:15:06,560 --> 00:15:11,839
if i take this reference and i expand it

00:15:09,600 --> 00:15:15,279
into a glob

00:15:11,839 --> 00:15:16,160
simple table entry and then i look for

00:15:15,279 --> 00:15:18,480
an array

00:15:16,160 --> 00:15:18,480
in it

00:15:19,199 --> 00:15:24,480
if there is an at export defined in that

00:15:23,199 --> 00:15:26,000
package

00:15:24,480 --> 00:15:28,959
then i'm going to get a reference back

00:15:26,000 --> 00:15:32,240
to it dollar found at dollar found is

00:15:28,959 --> 00:15:33,920
is the contents of it if i don't

00:15:32,240 --> 00:15:35,839
then i'm probably going to skip this

00:15:33,920 --> 00:15:36,720
round and actually that shouldn't be a

00:15:35,839 --> 00:15:40,399
skip

00:15:36,720 --> 00:15:43,839
that should be a next it's another bug

00:15:40,399 --> 00:15:45,680
um so export might be empty export okay

00:15:43,839 --> 00:15:48,399
might be empty

00:15:45,680 --> 00:15:50,720
if i can't find an array with that name

00:15:48,399 --> 00:15:53,040
in the package

00:15:50,720 --> 00:15:55,600
don't bother with the rest of this

00:15:53,040 --> 00:15:57,519
otherwise you can see here i can explain

00:15:55,600 --> 00:16:00,480
dollar found that's going to give me a

00:15:57,519 --> 00:16:00,480
dump of what's in it

00:16:00,720 --> 00:16:04,639
for a lot of places where they've got a

00:16:02,399 --> 00:16:06,959
lot of files and a lot of exports

00:16:04,639 --> 00:16:10,079
just getting a list of all of them is

00:16:06,959 --> 00:16:12,160
something nobody could do before

00:16:10,079 --> 00:16:13,680
but now i can say for all the names and

00:16:12,160 --> 00:16:16,720
what i found i could have

00:16:13,680 --> 00:16:19,600
export and it might be empty so again

00:16:16,720 --> 00:16:20,959
if they're names and it's empty that

00:16:19,600 --> 00:16:23,199
shouldn't be a skip that should be in

00:16:20,959 --> 00:16:26,399
next i'm sorry

00:16:23,199 --> 00:16:29,440
at that point if if

00:16:26,399 --> 00:16:31,600
what i'm looking at is export

00:16:29,440 --> 00:16:33,680
and the thing is an exporter and it has

00:16:31,600 --> 00:16:37,120
an import sub

00:16:33,680 --> 00:16:37,920
i can call package to import on that

00:16:37,120 --> 00:16:39,600
thing

00:16:37,920 --> 00:16:41,199
and i will actually that shouldn't be in

00:16:39,600 --> 00:16:43,839
or that should just be done

00:16:41,199 --> 00:16:45,759
the pack is i did a require now to use

00:16:43,839 --> 00:16:49,199
if i do the package to import

00:16:45,759 --> 00:16:51,600
on all of those names all of those names

00:16:49,199 --> 00:16:54,639
should be shoved into my package space

00:16:51,600 --> 00:16:54,639
and i can look for them

00:16:55,519 --> 00:17:00,880
so for each of the names you've seen in

00:16:59,120 --> 00:17:04,959
exporter you you people usually put

00:17:00,880 --> 00:17:06,160
sigils you can't export a a table entry

00:17:04,959 --> 00:17:10,000
you export just

00:17:06,160 --> 00:17:13,039
one thing a scalar an array whatever

00:17:10,000 --> 00:17:14,720
at that point you can have a hash with a

00:17:13,039 --> 00:17:17,039
dollar sign and a scalar and an

00:17:14,720 --> 00:17:19,039
at sign in the word array and a percent

00:17:17,039 --> 00:17:21,360
with the word hash

00:17:19,039 --> 00:17:22,959
and i can say well if what you're

00:17:21,360 --> 00:17:27,520
exporting

00:17:22,959 --> 00:17:30,160
is an ampersand if it's an executable

00:17:27,520 --> 00:17:31,600
by the time i get here i should be able

00:17:30,160 --> 00:17:34,799
to do that thing

00:17:31,600 --> 00:17:38,160
and so should you so i can do a can okay

00:17:34,799 --> 00:17:40,799
of your package with that name

00:17:38,160 --> 00:17:44,320
if that fails then you exported a

00:17:40,799 --> 00:17:47,600
subroutine you didn't bother to define

00:17:44,320 --> 00:17:50,160
if i can't do it then you screwed up

00:17:47,600 --> 00:17:53,520
exporting it and that's really weird

00:17:50,160 --> 00:17:55,120
that should be logged also for variables

00:17:53,520 --> 00:17:57,200
it's pretty much the same if i've got

00:17:55,120 --> 00:18:00,720
sigils and types i've got an array a

00:17:57,200 --> 00:18:04,559
hash a scalar a file handle whatever

00:18:00,720 --> 00:18:06,720
i can look the thing up i can qualify it

00:18:04,559 --> 00:18:07,919
in your package i can qualify it in my

00:18:06,720 --> 00:18:10,640
package

00:18:07,919 --> 00:18:13,280
i can look for that type and i can

00:18:10,640 --> 00:18:13,280
compare them

00:18:13,440 --> 00:18:17,039
well i should also have a check for oak

00:18:16,320 --> 00:18:21,919
is

00:18:17,039 --> 00:18:25,280
for okay your thing is defined

00:18:21,919 --> 00:18:25,280
i left that out of here too

00:18:25,360 --> 00:18:29,280
the point is i can check all of this

00:18:28,320 --> 00:18:31,440
notice i haven't

00:18:29,280 --> 00:18:33,120
i haven't copied anything this is the

00:18:31,440 --> 00:18:36,080
same code

00:18:33,120 --> 00:18:39,760
for every single file that you've got

00:18:36,080 --> 00:18:39,760
that's a module that has export in it

00:18:41,600 --> 00:18:45,840
now another thing people use pearl minus

00:18:44,799 --> 00:18:47,880
wk you do

00:18:45,840 --> 00:18:49,039
everyone's done this a million times a

00:18:47,880 --> 00:18:53,600
wkwc

00:18:49,039 --> 00:18:57,840
holy cow you do a pearl minus wc

00:18:53,600 --> 00:18:59,600
and you want to check

00:18:57,840 --> 00:19:01,120
a lot of files you don't want to type

00:18:59,600 --> 00:19:02,640
this you want pearl to do it for you you

00:19:01,120 --> 00:19:05,440
have to stare at that wk a bunch of

00:19:02,640 --> 00:19:11,039
times i apologize

00:19:05,440 --> 00:19:14,720
if i take pearl and i look up where i am

00:19:11,039 --> 00:19:17,120
and i look up the program i'm running

00:19:14,720 --> 00:19:18,080
and change the tildes to slashes again i

00:19:17,120 --> 00:19:23,520
can look at the base

00:19:18,080 --> 00:19:26,720
of it if i'm checking a script

00:19:23,520 --> 00:19:29,520
i can say okay does pearl run

00:19:26,720 --> 00:19:32,080
does this thing exist is it readable

00:19:29,520 --> 00:19:34,880
does it have a size

00:19:32,080 --> 00:19:36,720
if all of these things are true then

00:19:34,880 --> 00:19:39,520
it's probably worth using pearl to check

00:19:36,720 --> 00:19:42,880
that file

00:19:39,520 --> 00:19:45,600
at that point if

00:19:42,880 --> 00:19:47,840
i use the current version of pearl

00:19:45,600 --> 00:19:51,679
that's running

00:19:47,840 --> 00:19:52,000
and then capped the path out i can stick

00:19:51,679 --> 00:19:54,160
that

00:19:52,000 --> 00:19:55,919
into pearl minus wc for some reason i

00:19:54,160 --> 00:19:58,400
spelled it correctly there

00:19:55,919 --> 00:20:00,799
with minus using standard in is as the

00:19:58,400 --> 00:20:00,799
source

00:20:02,080 --> 00:20:05,360
then i can run that here's the cute

00:20:03,840 --> 00:20:06,080
thing if i do it too greater than an

00:20:05,360 --> 00:20:10,080
ampersand

00:20:06,080 --> 00:20:12,960
one i can save the output

00:20:10,080 --> 00:20:14,480
i can check for pearl not puking but i

00:20:12,960 --> 00:20:17,360
can do another neat thing

00:20:14,480 --> 00:20:19,039
normally when you do a pearl minus wc

00:20:17,360 --> 00:20:22,880
improve

00:20:19,039 --> 00:20:26,720
you lose all of the warnings

00:20:22,880 --> 00:20:29,440
all the diagnostic messages get stripped

00:20:26,720 --> 00:20:30,400
so the trick here is if the output

00:20:29,440 --> 00:20:35,760
wasn't just

00:20:30,400 --> 00:20:38,400
syntax okay dump it out as a diagnostic

00:20:35,760 --> 00:20:40,240
now you can see every missing variable

00:20:38,400 --> 00:20:41,360
anything that's got no diagnostic just

00:20:40,240 --> 00:20:44,640
goes by

00:20:41,360 --> 00:20:47,039
but now you can do things like grip out

00:20:44,640 --> 00:20:47,760
missing variables you can find the paths

00:20:47,039 --> 00:20:50,720
you can find

00:20:47,760 --> 00:20:51,200
all of the things that are screwed up

00:20:50,720 --> 00:20:53,360
again

00:20:51,200 --> 00:20:55,919
without having to run pro minus wc on

00:20:53,360 --> 00:20:55,919
each of those

00:20:57,840 --> 00:21:02,720
and yeah the real magic here is checking

00:21:00,799 --> 00:21:05,039
for the output if i didn't do it two

00:21:02,720 --> 00:21:07,360
greater than ampersand one above that

00:21:05,039 --> 00:21:10,320
i wouldn't have the output it would get

00:21:07,360 --> 00:21:12,799
lost to standard error

00:21:10,320 --> 00:21:13,600
the other neat thing about this then is

00:21:12,799 --> 00:21:16,400
uh if i

00:21:13,600 --> 00:21:18,080
t the result of the proof i get a

00:21:16,400 --> 00:21:19,440
complete list of everything i've got to

00:21:18,080 --> 00:21:21,200
fix in my code

00:21:19,440 --> 00:21:24,000
this is where you can tell people you

00:21:21,200 --> 00:21:26,880
know here are 45 files that have got

00:21:24,000 --> 00:21:28,080
unescaped curly braces in the reg x's

00:21:26,880 --> 00:21:30,240
you can grep for that

00:21:28,080 --> 00:21:31,520
you can find them stick it in an issue

00:21:30,240 --> 00:21:34,400
in gitlab and say

00:21:31,520 --> 00:21:36,159
go fix these but it makes it a whole lot

00:21:34,400 --> 00:21:38,559
easier than telling people

00:21:36,159 --> 00:21:40,960
open these files one by one and see what

00:21:38,559 --> 00:21:40,960
you find

00:21:42,720 --> 00:21:48,159
another thing is if you look at the

00:21:44,720 --> 00:21:50,159
output you get from a pearl diagnostic

00:21:48,159 --> 00:21:51,600
if you're using git lab which which my

00:21:50,159 --> 00:21:53,679
current client is

00:21:51,600 --> 00:21:54,720
you can the markup if you do a triple

00:21:53,679 --> 00:21:58,159
tilde pearl

00:21:54,720 --> 00:22:00,880
it'll format that markup

00:21:58,159 --> 00:22:03,520
excuse me it'll format the diagnostic as

00:22:00,880 --> 00:22:05,280
perl code

00:22:03,520 --> 00:22:07,520
the great thing about that is then

00:22:05,280 --> 00:22:09,280
people can actually the syntax

00:22:07,520 --> 00:22:11,440
highlighting helps you show where the

00:22:09,280 --> 00:22:12,880
error is in a lot of cases the syntax

00:22:11,440 --> 00:22:15,120
highlight will show you the arrow being

00:22:12,880 --> 00:22:17,919
red or something like that

00:22:15,120 --> 00:22:19,520
so this makes it pretty easy to go

00:22:17,919 --> 00:22:21,120
through and say okay here's everything

00:22:19,520 --> 00:22:23,520
that failed

00:22:21,120 --> 00:22:25,120
take everything that failed grab the

00:22:23,520 --> 00:22:26,880
diagnostics

00:22:25,120 --> 00:22:28,880
maybe you grep out all the files that

00:22:26,880 --> 00:22:32,400
have got the same kind of diagnostic and

00:22:28,880 --> 00:22:32,400
hand that to one or two people to fix

00:22:33,760 --> 00:22:39,840
now one this one place which is the the

00:22:37,200 --> 00:22:42,080
real topic here was cleaning this up

00:22:39,840 --> 00:22:44,720
they had a global stop you know module

00:22:42,080 --> 00:22:46,640
that defined every variable that

00:22:44,720 --> 00:22:48,960
everyone ever shared

00:22:46,640 --> 00:22:50,919
no there were no objects anywhere

00:22:48,960 --> 00:22:52,559
everything everywhere was just in

00:22:50,919 --> 00:22:56,000
globals.pm

00:22:52,559 --> 00:22:59,520
and it had an export that was was

00:22:56,000 --> 00:23:03,000
80 columns wide and took two screens

00:22:59,520 --> 00:23:04,159
in x11 with small type there were around

00:23:03,000 --> 00:23:07,360
00:23:04,159 --> 00:23:10,880
entries in it and it was in at export

00:23:07,360 --> 00:23:11,360
not export okay a lot of this code goes

00:23:10,880 --> 00:23:13,679
back

00:23:11,360 --> 00:23:14,799
20 something years people didn't use

00:23:13,679 --> 00:23:17,360
strict

00:23:14,799 --> 00:23:20,080
they had two argument opens with bare

00:23:17,360 --> 00:23:23,280
word file handles that style

00:23:20,080 --> 00:23:24,960
so the problem you get is

00:23:23,280 --> 00:23:26,480
no one will let you touch anything in

00:23:24,960 --> 00:23:28,159
that export

00:23:26,480 --> 00:23:29,760
or anything in this globals because you

00:23:28,159 --> 00:23:32,799
don't know who's using it you can't

00:23:29,760 --> 00:23:34,640
find it and that's one of those big

00:23:32,799 --> 00:23:36,080
barriers to getting past five oh we

00:23:34,640 --> 00:23:38,720
can't change it because it

00:23:36,080 --> 00:23:39,679
it might break something so the answer

00:23:38,720 --> 00:23:45,039
here is

00:23:39,679 --> 00:23:49,039
let's find out what i can do is

00:23:45,039 --> 00:23:52,559
go through and break it

00:23:49,039 --> 00:23:54,720
and use the automatic testing to fix it

00:23:52,559 --> 00:23:54,720
all

00:23:57,919 --> 00:24:02,000
was it was that someone choking or was

00:24:00,480 --> 00:24:05,279
he

00:24:02,000 --> 00:24:08,240
that's my chair

00:24:05,279 --> 00:24:08,960
it's just my chair creaking sorry oh no

00:24:08,240 --> 00:24:10,000
okay i did

00:24:08,960 --> 00:24:12,240
i just want to make sure i didn't get

00:24:10,000 --> 00:24:14,240
someone a heart attack um

00:24:12,240 --> 00:24:16,240
so the real thing is i can now i've

00:24:14,240 --> 00:24:17,840
shown you if we can test this

00:24:16,240 --> 00:24:19,440
i can do a require i can check the

00:24:17,840 --> 00:24:20,880
package i can check exports on

00:24:19,440 --> 00:24:23,120
everything

00:24:20,880 --> 00:24:24,799
so the first thing we did is i went into

00:24:23,120 --> 00:24:28,000
that globals module

00:24:24,799 --> 00:24:32,159
and i just took the ok off the end of it

00:24:28,000 --> 00:24:35,120
and that broke everything

00:24:32,159 --> 00:24:36,080
but because i had the diagnostics with

00:24:35,120 --> 00:24:37,919
proof

00:24:36,080 --> 00:24:39,520
i could grep out all the missing

00:24:37,919 --> 00:24:41,360
variables

00:24:39,520 --> 00:24:43,600
i could write some pretty simple pearl

00:24:41,360 --> 00:24:44,799
code that for every path that had

00:24:43,600 --> 00:24:47,279
missing variables

00:24:44,799 --> 00:24:49,919
it gave me a list of the missing

00:24:47,279 --> 00:24:52,159
variables

00:24:49,919 --> 00:24:54,320
at that point i can generate a whole

00:24:52,159 --> 00:24:56,240
bunch of lines that look like u's

00:24:54,320 --> 00:24:59,760
globals

00:24:56,240 --> 00:25:01,039
whatever whatever your globals module is

00:24:59,760 --> 00:25:05,120
i can update it all

00:25:01,039 --> 00:25:09,279
with pro minus ip i can go through

00:25:05,120 --> 00:25:11,440
and and we went through and in one pass

00:25:09,279 --> 00:25:12,320
we added a line that used all of the

00:25:11,440 --> 00:25:15,840
globals that

00:25:12,320 --> 00:25:15,840
everyone needed

00:25:17,520 --> 00:25:23,440
the next thing is i could now

00:25:20,559 --> 00:25:26,159
because once that worked you know we'd

00:25:23,440 --> 00:25:29,520
missed a few the first time

00:25:26,159 --> 00:25:33,600
once i ran proof and i didn't get a

00:25:29,520 --> 00:25:33,600
bazillion missing variables

00:25:33,679 --> 00:25:38,240
that same list that i had used to do the

00:25:36,640 --> 00:25:39,840
replacements from

00:25:38,240 --> 00:25:42,799
that gave me a list of the variables

00:25:39,840 --> 00:25:46,320
that were actually used

00:25:42,799 --> 00:25:48,080
we commented everything else out

00:25:46,320 --> 00:25:49,440
now some of the variables depended on

00:25:48,080 --> 00:25:52,640
other variables

00:25:49,440 --> 00:25:55,520
but once i commented something out

00:25:52,640 --> 00:25:57,120
i could run the test again and we could

00:25:55,520 --> 00:25:59,679
look for missing variables

00:25:57,120 --> 00:26:02,000
and we could uncomment those that took a

00:25:59,679 --> 00:26:03,840
few iterations

00:26:02,000 --> 00:26:06,559
pretty soon by looking at the test

00:26:03,840 --> 00:26:08,480
diagnostics we could tell hey

00:26:06,559 --> 00:26:10,000
these are the variables that we actually

00:26:08,480 --> 00:26:13,279
need everything else

00:26:10,000 --> 00:26:13,279
is commented out

00:26:15,520 --> 00:26:19,520
now one thing you know you might say but

00:26:18,240 --> 00:26:23,039
i get sick of writing proof

00:26:19,520 --> 00:26:26,480
every five minutes if you have

00:26:23,039 --> 00:26:29,120
jenkins available i can create

00:26:26,480 --> 00:26:31,039
a file as a shell script called run

00:26:29,120 --> 00:26:34,559
tests

00:26:31,039 --> 00:26:37,919
and all that if people are familiar with

00:26:34,559 --> 00:26:38,799
with jenkins this is a declarative stage

00:26:37,919 --> 00:26:40,640
i would suggest

00:26:38,799 --> 00:26:43,039
putting this in everything you ever

00:26:40,640 --> 00:26:45,279
write with jenkins it's like adding

00:26:43,039 --> 00:26:47,840
a set to the top of your cron jobs so

00:26:45,279 --> 00:26:50,799
that you know what you're missing

00:26:47,840 --> 00:26:52,400
you could spend hours banging your head

00:26:50,799 --> 00:26:54,640
out nothing else you'll find because

00:26:52,400 --> 00:26:56,080
jenkins will install stuff in j random

00:26:54,640 --> 00:26:57,919
locations

00:26:56,080 --> 00:26:59,760
if somebody changes the name of your

00:26:57,919 --> 00:27:01,600
jenkins job you can find yourself

00:26:59,760 --> 00:27:04,320
installing in the wrong place and not

00:27:01,600 --> 00:27:06,480
looking for the right things the set is

00:27:04,320 --> 00:27:07,760
useful because jenkins defines a bunch

00:27:06,480 --> 00:27:09,200
of variables

00:27:07,760 --> 00:27:11,200
and you want to be able to know that

00:27:09,200 --> 00:27:11,760
you're using reasonable values for them

00:27:11,200 --> 00:27:15,600
or that

00:27:11,760 --> 00:27:15,600
the variables you're looking for to find

00:27:15,679 --> 00:27:23,919
after that there's oops typo

00:27:20,399 --> 00:27:27,679
there's a a very an environment variable

00:27:23,919 --> 00:27:31,200
called workspace underscore tmp

00:27:27,679 --> 00:27:35,440
that's given to you as part of jenkins

00:27:31,200 --> 00:27:38,880
if you tech prove on to the end of that

00:27:35,440 --> 00:27:42,720
you can get a a

00:27:38,880 --> 00:27:46,159
reasonable path to a

00:27:42,720 --> 00:27:48,000
static dot proof file that you can

00:27:46,159 --> 00:27:51,279
generate with proof and come back

00:27:48,000 --> 00:27:53,679
afterwards and re-execute

00:27:51,279 --> 00:27:55,760
in our case we use sub-modules i can

00:27:53,679 --> 00:27:57,039
show you a couple ways that we use those

00:27:55,760 --> 00:28:01,360
but you want to make sure everything is

00:27:57,039 --> 00:28:03,440
up to date and then run all your tests

00:28:01,360 --> 00:28:05,200
um

00:28:03,440 --> 00:28:07,120
and i get the uh and i corrected it

00:28:05,200 --> 00:28:09,600
there not in the previous slide

00:28:07,120 --> 00:28:12,080
the trick here is because i can put i

00:28:09,600 --> 00:28:13,440
can put my proof file in a temporary

00:28:12,080 --> 00:28:16,399
directory

00:28:13,440 --> 00:28:17,600
that's outside of where i'm actually

00:28:16,399 --> 00:28:19,760
running everything

00:28:17,600 --> 00:28:20,880
i can come back and rerun proof minus

00:28:19,760 --> 00:28:24,720
state equal failed

00:28:20,880 --> 00:28:24,720
later on and get a better summary

00:28:25,120 --> 00:28:30,640
at that point i can run i can validate

00:28:28,080 --> 00:28:34,559
my perl improve versions

00:28:30,640 --> 00:28:36,320
uh run 4-way parallel whatever your

00:28:34,559 --> 00:28:41,039
number is

00:28:36,320 --> 00:28:43,760
save it in a path and i'm done

00:28:41,039 --> 00:28:45,600
the cute thing here is i can attach this

00:28:43,760 --> 00:28:46,960
so that every time you say commit the

00:28:45,600 --> 00:28:50,159
master branch

00:28:46,960 --> 00:28:50,640
i'm going to run these tests at that

00:28:50,159 --> 00:28:53,760
point

00:28:50,640 --> 00:28:55,039
about 90 seconds these run actually

00:28:53,760 --> 00:28:57,520
pretty quickly because all i'm doing is

00:28:55,039 --> 00:29:00,159
a require on most things

00:28:57,520 --> 00:29:01,120
within a fairly short time i can tell

00:29:00,159 --> 00:29:04,000
you

00:29:01,120 --> 00:29:05,360
whether or not you've fried the code to

00:29:04,000 --> 00:29:07,520
the point where it doesn't compile

00:29:05,360 --> 00:29:09,919
whether the exports are reasonable and

00:29:07,520 --> 00:29:11,360
everything's defined that's listed

00:29:09,919 --> 00:29:14,240
and i can tell you if anything is

00:29:11,360 --> 00:29:14,240
missing a variable

00:29:15,120 --> 00:29:22,559
um so again this is a

00:29:18,399 --> 00:29:25,039
i can have one sim linked test

00:29:22,559 --> 00:29:26,720
for everything if i have something

00:29:25,039 --> 00:29:29,360
called install sim links that just sim

00:29:26,720 --> 00:29:34,080
links one test

00:29:29,360 --> 00:29:36,960
into a a zero one pm directory say

00:29:34,080 --> 00:29:39,200
this will give me all the stuff that has

00:29:36,960 --> 00:29:41,120
to be checked with pearl

00:29:39,200 --> 00:29:42,960
i can i can wake up and say if the base

00:29:41,120 --> 00:29:45,200
name has got a dot pm on it

00:29:42,960 --> 00:29:46,799
require it do this otherwise do a pearl

00:29:45,200 --> 00:29:49,279
minus wc

00:29:46,799 --> 00:29:51,279
i can make it so that i do a find minus

00:29:49,279 --> 00:29:53,200
name equal pm and do one set of tests

00:29:51,279 --> 00:29:55,760
and then

00:29:53,200 --> 00:29:58,559
grab the pearl everywhere but that is in

00:29:55,760 --> 00:30:01,600
the pm and do something else

00:29:58,559 --> 00:30:05,279
it's easy enough to test all of this

00:30:01,600 --> 00:30:08,080
without having to touch any of it

00:30:05,279 --> 00:30:08,720
another thing we found that helped there

00:30:08,080 --> 00:30:10,320
is

00:30:08,720 --> 00:30:12,640
when you run stuff with jenkins you

00:30:10,320 --> 00:30:14,960
might be running on a j random node

00:30:12,640 --> 00:30:16,640
in order to be consistent with the cpan

00:30:14,960 --> 00:30:19,440
modules you're using

00:30:16,640 --> 00:30:20,559
it turns out to be pretty easy to just

00:30:19,440 --> 00:30:24,240
have a site

00:30:20,559 --> 00:30:27,840
pearl directory and you distribute it as

00:30:24,240 --> 00:30:31,520
as part of with git as part of your

00:30:27,840 --> 00:30:34,799
your test code at that point

00:30:31,520 --> 00:30:37,039
i can run cpan m on a we'll call it

00:30:34,799 --> 00:30:40,480
directory we call psycperl

00:30:37,039 --> 00:30:43,039
and create a self-contained minus update

00:30:40,480 --> 00:30:44,559
or install all the modules you use uh

00:30:43,039 --> 00:30:45,200
one thing i did i didn't show here you

00:30:44,559 --> 00:30:47,120
can grab

00:30:45,200 --> 00:30:48,320
all the use statements that aren't five

00:30:47,120 --> 00:30:50,960
dot something

00:30:48,320 --> 00:30:52,320
and just install all of them cpanem will

00:30:50,960 --> 00:30:54,159
skip the core ones

00:30:52,320 --> 00:30:55,600
but if you do a local live and have it

00:30:54,159 --> 00:30:58,640
self-contained

00:30:55,600 --> 00:31:00,880
you can create a git repository of all

00:30:58,640 --> 00:31:03,039
the cpan modules that you actually are

00:31:00,880 --> 00:31:06,399
using now

00:31:03,039 --> 00:31:08,240
you can then distribute them with your

00:31:06,399 --> 00:31:11,760
code

00:31:08,240 --> 00:31:14,640
what's cute about that is in jenkins

00:31:11,760 --> 00:31:15,519
you can define because of that workspace

00:31:14,640 --> 00:31:18,480
variable

00:31:15,519 --> 00:31:22,000
you know where the stuff is installed at

00:31:18,480 --> 00:31:24,640
that point i can set pearl 5 live

00:31:22,000 --> 00:31:27,360
equal to where i'm running site parole

00:31:24,640 --> 00:31:27,360
live pro 5.

00:31:27,679 --> 00:31:34,240
done i can now find all my cpan modules

00:31:31,200 --> 00:31:37,360
if you have uh

00:31:34,240 --> 00:31:38,320
uh platform specific directories what i

00:31:37,360 --> 00:31:41,519
do is i add

00:31:38,320 --> 00:31:45,120
one module that i call psyc that's

00:31:41,519 --> 00:31:47,200
psycperl that finds the dollar up

00:31:45,120 --> 00:31:49,200
you know any of the pearl five

00:31:47,200 --> 00:31:49,760
directories that has dollar up carrot o

00:31:49,200 --> 00:31:53,279
in it

00:31:49,760 --> 00:31:53,279
gets added to ink

00:31:53,440 --> 00:31:59,919
you can also create a attempter

00:31:57,440 --> 00:32:01,600
that your your standard shells that are

00:31:59,919 --> 00:32:02,159
used to having a temporary directory can

00:32:01,600 --> 00:32:05,600
find

00:32:02,159 --> 00:32:05,600
that's specific to jenkins

00:32:06,159 --> 00:32:14,960
so the net result of all of this

00:32:10,720 --> 00:32:16,240
is that the paths are pretty easy to

00:32:14,960 --> 00:32:18,720
find

00:32:16,240 --> 00:32:20,159
with find and file or find minus name

00:32:18,720 --> 00:32:21,679
star pm

00:32:20,159 --> 00:32:23,279
and it doesn't take much more than the

00:32:21,679 --> 00:32:26,840
path name

00:32:23,279 --> 00:32:28,640
to successfully test most of what you

00:32:26,840 --> 00:32:30,000
have

00:32:28,640 --> 00:32:31,919
and you can explore them if you haven't

00:32:30,000 --> 00:32:35,679
played with symbol before symbol

00:32:31,919 --> 00:32:38,559
qualified a ref makes it so bloody easy

00:32:35,679 --> 00:32:38,880
to test modules you can test all sorts

00:32:38,559 --> 00:32:42,159
of

00:32:38,880 --> 00:32:44,080
of things without resorted eval and

00:32:42,159 --> 00:32:46,640
most important without resorting to cut

00:32:44,080 --> 00:32:48,559
and paste and hardwired package names

00:32:46,640 --> 00:32:50,399
because you can manufacture all of that

00:32:48,559 --> 00:32:52,880
stuff on the fly it's all just metadata

00:32:50,399 --> 00:32:54,720
driven testing

00:32:52,880 --> 00:32:56,399
and that's as far as i got oh the other

00:32:54,720 --> 00:32:57,360
thing is yeah jenkins does play nicely

00:32:56,399 --> 00:33:01,120
with pearl

00:32:57,360 --> 00:33:03,200
if you go into it there's a

00:33:01,120 --> 00:33:05,120
bunch of good articles online about

00:33:03,200 --> 00:33:07,440
integrating pearl into jenkins you can

00:33:05,120 --> 00:33:10,240
use your own tap harness

00:33:07,440 --> 00:33:11,600
and there's a j unit tap harness that

00:33:10,240 --> 00:33:14,720
will output

00:33:11,600 --> 00:33:16,399
test results that jenkins can report

00:33:14,720 --> 00:33:19,519
directly as passed or failed

00:33:16,399 --> 00:33:21,519
and if you get any not okays the problem

00:33:19,519 --> 00:33:22,559
is proof puts extra header and footer

00:33:21,519 --> 00:33:25,279
information in

00:33:22,559 --> 00:33:27,440
that confuses jenkins and if you use

00:33:25,279 --> 00:33:29,919
some of the other modules you can

00:33:27,440 --> 00:33:31,200
actually jenkins will know if it's all

00:33:29,919 --> 00:33:33,120
okay

00:33:31,200 --> 00:33:35,760
and at that point like i said every time

00:33:33,120 --> 00:33:38,799
you do a push or every morning at 1 am

00:33:35,760 --> 00:33:40,240
you can have jenkins do as many tests as

00:33:38,799 --> 00:33:41,600
you need

00:33:40,240 --> 00:33:44,240
the great thing about combining that

00:33:41,600 --> 00:33:47,279
with your own copy of

00:33:44,240 --> 00:33:50,799
the site pearl is you can test

00:33:47,279 --> 00:33:53,840
all of the updates to the pearl modules

00:33:50,799 --> 00:33:55,679
and if anything new breaks it you don't

00:33:53,840 --> 00:33:58,399
distribute that version

00:33:55,679 --> 00:34:00,320
so you can actually go through and tag

00:33:58,399 --> 00:34:02,000
what you know if something

00:34:00,320 --> 00:34:04,000
blows up in the install it won't get

00:34:02,000 --> 00:34:06,640
installed if

00:34:04,000 --> 00:34:07,039
something breaks your code you just

00:34:06,640 --> 00:34:10,320
don't

00:34:07,039 --> 00:34:12,879
tag that version of site perl

00:34:10,320 --> 00:34:14,159
and you keep it at a previous commit so

00:34:12,879 --> 00:34:16,639
you can distribute

00:34:14,159 --> 00:34:17,679
working copies of the modules and test

00:34:16,639 --> 00:34:22,320
them

00:34:17,679 --> 00:34:24,240
pretty rigorously so it it makes it

00:34:22,320 --> 00:34:26,000
pretty straightforward to test all this

00:34:24,240 --> 00:34:28,560
stuff and you can answer the question

00:34:26,000 --> 00:34:32,839
yeah it works

00:34:28,560 --> 00:34:34,560
and that is as far as i got is anyone

00:34:32,839 --> 00:34:38,879
awake

00:34:34,560 --> 00:34:41,520
is anyone there we are there

00:34:38,879 --> 00:34:42,800
okay you didn't run screaming out of

00:34:41,520 --> 00:34:44,480
that you didn't hit the leave button i

00:34:42,800 --> 00:34:48,960
wasn't that bad at it

00:34:44,480 --> 00:34:52,000
um was this useful to anybody

00:34:48,960 --> 00:34:52,000
well to me

00:34:52,159 --> 00:34:57,040
to me it's just a new way of thinking

00:34:54,480 --> 00:35:00,720
about this so i thought this was great

00:34:57,040 --> 00:35:02,240
oh okay what is what do you consider new

00:35:00,720 --> 00:35:04,160
about it

00:35:02,240 --> 00:35:05,359
i've never had the problem that you're

00:35:04,160 --> 00:35:07,599
facing where you have this

00:35:05,359 --> 00:35:09,440
ancient code base and you're trying to

00:35:07,599 --> 00:35:10,000
you know prove will it work or what can

00:35:09,440 --> 00:35:12,079
i fix

00:35:10,000 --> 00:35:13,280
and make it work but the way you

00:35:12,079 --> 00:35:16,720
approach the problem

00:35:13,280 --> 00:35:18,079
was very interesting well thank you

00:35:16,720 --> 00:35:20,160
well the thing is even if you've got a

00:35:18,079 --> 00:35:23,599
perfectly modern code base

00:35:20,160 --> 00:35:27,599
if you ran all of these unit tests on it

00:35:23,599 --> 00:35:30,560
running these on a code base of

00:35:27,599 --> 00:35:32,240
one client i had they had 1200 files

00:35:30,560 --> 00:35:34,079
which is you know a reasonable number of

00:35:32,240 --> 00:35:36,880
dot pms

00:35:34,079 --> 00:35:38,000
running all of this on their pro modules

00:35:36,880 --> 00:35:40,320
and their scripts

00:35:38,000 --> 00:35:42,079
running four ways parallel on a virtual

00:35:40,320 --> 00:35:47,440
machine in an lpar

00:35:42,079 --> 00:35:47,440
on an ibm 360 takes us about 90 seconds

00:35:47,520 --> 00:35:52,160
so there's no reason in hell not to unit

00:35:49,760 --> 00:35:54,320
test everything you have

00:35:52,160 --> 00:35:57,119
every bloody time someone does a push to

00:35:54,320 --> 00:35:57,119
the master branch

00:35:57,680 --> 00:36:01,359
and that works perfectly well even if

00:35:59,119 --> 00:36:03,599
you got the most modern code there is

00:36:01,359 --> 00:36:06,560
steven we have some answer for question

00:36:03,599 --> 00:36:06,560
michael as a question

00:36:09,680 --> 00:36:14,880
hello can you see the people

00:36:13,200 --> 00:36:17,599
listed who are watching you and one of

00:36:14,880 --> 00:36:20,960
them has a the one at the top has a hand

00:36:17,599 --> 00:36:23,760
symbol no because i'm staring at

00:36:20,960 --> 00:36:26,720
a pdf uh that that's filling my screen

00:36:23,760 --> 00:36:30,560
so that you see it filling your screen

00:36:26,720 --> 00:36:33,119
if i poke the button here and get back

00:36:30,560 --> 00:36:33,119
to zoom

00:36:35,520 --> 00:36:38,320
participants

00:36:38,640 --> 00:36:44,240
you guys can see my screen or no yes

00:36:42,480 --> 00:36:45,520
what do i poke to see who's got a hand

00:36:44,240 --> 00:36:49,040
up

00:36:45,520 --> 00:36:51,760
and the arms is not up anymore yo

00:36:49,040 --> 00:36:52,480
sorry use my hand do me a favor just ask

00:36:51,760 --> 00:36:55,040
the question

00:36:52,480 --> 00:36:58,000
i promise i won't i won't slap you with

00:36:55,040 --> 00:37:01,280
a ruler for talking out of turn

00:36:58,000 --> 00:37:01,280
yeah it's not working

00:37:02,960 --> 00:37:12,000
but what was the question

00:37:08,800 --> 00:37:14,640
oh the way harry no well yeah

00:37:12,000 --> 00:37:15,760
i was just testing it so now now you see

00:37:14,640 --> 00:37:19,280
how it works

00:37:15,760 --> 00:37:20,880
yeah oh okay yeah sorry

00:37:19,280 --> 00:37:22,560
when i share the screen i can't see

00:37:20,880 --> 00:37:25,839
anything with this

00:37:22,560 --> 00:37:30,560
boy does anyone have any questions

00:37:25,839 --> 00:37:33,359
does this seem useful okay so you you um

00:37:30,560 --> 00:37:36,800
you wrote all of those yesterday in a

00:37:33,359 --> 00:37:37,599
stream of consciousness i apologize for

00:37:36,800 --> 00:37:40,320
that

00:37:37,599 --> 00:37:41,359
two weeks was not enough time how how

00:37:40,320 --> 00:37:42,880
long

00:37:41,359 --> 00:37:46,240
how long have you been kind of working

00:37:42,880 --> 00:37:50,320
at that approach

00:37:46,240 --> 00:37:54,079
about 20 years um

00:37:50,320 --> 00:37:57,920
i know actually when salzenberg

00:37:54,079 --> 00:37:59,599
wrote symbol uh i did a really shitty

00:37:57,920 --> 00:38:00,960
lightning talk trying to show people

00:37:59,599 --> 00:38:04,000
that this changes the way

00:38:00,960 --> 00:38:04,480
everyone does everything because you can

00:38:04,000 --> 00:38:07,040
now

00:38:04,480 --> 00:38:09,040
ask about something by package and it

00:38:07,040 --> 00:38:11,119
makes metadata driven programming

00:38:09,040 --> 00:38:14,640
trivial

00:38:11,119 --> 00:38:19,359
the basic idea of having a

00:38:14,640 --> 00:38:22,079
metadata driven testing i gave a talk

00:38:19,359 --> 00:38:26,079
i don't know how many years ago on using

00:38:22,079 --> 00:38:26,079
the base names of files to test them

00:38:27,440 --> 00:38:30,640
the point is even if i'm not just doing

00:38:29,440 --> 00:38:32,800
require okay

00:38:30,640 --> 00:38:35,040
i can create 500 let's say you're

00:38:32,800 --> 00:38:37,280
testing a database

00:38:35,040 --> 00:38:39,440
and i want to look at a table and i want

00:38:37,280 --> 00:38:41,280
to validate does this table have these

00:38:39,440 --> 00:38:43,440
columns

00:38:41,280 --> 00:38:45,040
i can create 500 sim links in a

00:38:43,440 --> 00:38:46,640
directory that are table names with the

00:38:45,040 --> 00:38:49,680
columns i expect

00:38:46,640 --> 00:38:52,720
and i read dollar zero i strip the dot t

00:38:49,680 --> 00:38:55,119
off the end i split it on non-words and

00:38:52,720 --> 00:38:55,119
i check

00:38:55,200 --> 00:39:01,839
you can do all sorts of things to not

00:38:58,240 --> 00:39:05,119
have to have anything more than a test

00:39:01,839 --> 00:39:06,880
and the test every test is identical

00:39:05,119 --> 00:39:09,280
except for the base name on the file

00:39:06,880 --> 00:39:09,280
system

00:39:10,240 --> 00:39:16,320
and that may be all you need um

00:39:14,240 --> 00:39:17,839
so yeah this basic idea of doing

00:39:16,320 --> 00:39:20,160
metadata driven testing i've been

00:39:17,839 --> 00:39:22,720
banging my head out against for decades

00:39:20,160 --> 00:39:24,160
perl makes it easy to do you cannot do

00:39:22,720 --> 00:39:27,920
this kind of testing

00:39:24,160 --> 00:39:28,720
in java or i don't even think in python

00:39:27,920 --> 00:39:30,160
very well

00:39:28,720 --> 00:39:33,119
because you don't have a way of

00:39:30,160 --> 00:39:36,240
investigating the other packages

00:39:33,119 --> 00:39:37,920
you're kind of stuck so the test code

00:39:36,240 --> 00:39:39,359
has to be hardwired in a lot of those

00:39:37,920 --> 00:39:42,880
cases

00:39:39,359 --> 00:39:44,960
if you look at object exercise it allows

00:39:42,880 --> 00:39:47,920
you to do stuff like this where i can

00:39:44,960 --> 00:39:49,520
i can generate arrays of tests on the

00:39:47,920 --> 00:39:52,240
fly

00:39:49,520 --> 00:39:53,280
and and have a method name encoded in an

00:39:52,240 --> 00:39:55,280
array

00:39:53,280 --> 00:39:57,680
and dispatch dollar object points to

00:39:55,280 --> 00:39:59,680
dollar method name

00:39:57,680 --> 00:40:01,280
and pearl doesn't care if long if as

00:39:59,680 --> 00:40:03,839
long as the name resolves to something

00:40:01,280 --> 00:40:03,839
you'll run it

00:40:05,280 --> 00:40:09,359
but none of these tests took a lot of

00:40:06,960 --> 00:40:10,880
lines to write

00:40:09,359 --> 00:40:12,800
but one of the problems i've got is

00:40:10,880 --> 00:40:16,000
because my clients own all the code i

00:40:12,800 --> 00:40:17,680
had to write all this code on the fly

00:40:16,000 --> 00:40:20,000
that's why there's so many bugs in it i

00:40:17,680 --> 00:40:25,839
hacked these in libra office

00:40:20,000 --> 00:40:25,839
while i was writing the talk

00:40:27,440 --> 00:40:30,560
yeah i apologize for a number of errors

00:40:29,119 --> 00:40:32,160
i normally

00:40:30,560 --> 00:40:34,640
i've got to give one more talk tomorrow

00:40:32,160 --> 00:40:36,640
which is another part of this which is

00:40:34,640 --> 00:40:38,079
let's just say you've got more than the

00:40:36,640 --> 00:40:40,720
usual number of

00:40:38,079 --> 00:40:41,520
files you want to check and at that

00:40:40,720 --> 00:40:44,800
place

00:40:41,520 --> 00:40:48,880
we started checking 75 000

00:40:44,800 --> 00:40:50,640
files by pruning it down to things that

00:40:48,880 --> 00:40:51,839
we realize we didn't care about it got

00:40:50,640 --> 00:40:54,960
down to doing

00:40:51,839 --> 00:40:56,640
40 000 files

00:40:54,960 --> 00:40:58,000
but we were doing the same kind of thing

00:40:56,640 --> 00:40:59,680
you know he

00:40:58,000 --> 00:41:01,520
showed me all the diagnostics for all of

00:40:59,680 --> 00:41:03,359
forty thousand files

00:41:01,520 --> 00:41:05,839
go through them and find all the missing

00:41:03,359 --> 00:41:07,839
cpan modules

00:41:05,839 --> 00:41:10,640
install a virgin copy of pearl so that

00:41:07,839 --> 00:41:11,839
you know everything is broken

00:41:10,640 --> 00:41:15,359
and at that point go down the

00:41:11,839 --> 00:41:17,839
diagnostics i can't find module x

00:41:15,359 --> 00:41:19,599
and you can actually write pearl code

00:41:17,839 --> 00:41:21,599
that will go through and find you all

00:41:19,599 --> 00:41:23,760
the names of the missing modules

00:41:21,599 --> 00:41:26,079
you pipe the output of prove into a

00:41:23,760 --> 00:41:28,160
pearl filter and pipe that into cpan m

00:41:26,079 --> 00:41:30,319
and you will install all the modules

00:41:28,160 --> 00:41:34,400
that are actually used in your code

00:41:30,319 --> 00:41:35,680
period that's tomorrow's funny games and

00:41:34,400 --> 00:41:37,440
i i actually did have

00:41:35,680 --> 00:41:41,119
more time to proofread that so i think

00:41:37,440 --> 00:41:41,119
it's it's not quite as screwy

00:41:42,319 --> 00:41:45,839
would anyone use any of this sort of

00:41:47,520 --> 00:41:51,599
i testing know yet but i'll be honest

00:41:51,760 --> 00:41:58,319
what what are you thinking about it

00:41:55,280 --> 00:42:01,599
the meta data

00:41:58,319 --> 00:42:03,920
aspect of it i mean i'm not i'm not

00:42:01,599 --> 00:42:07,119
coming across these

00:42:03,920 --> 00:42:08,800
kind of uh code bases like you are

00:42:07,119 --> 00:42:11,280
yeah but let's just how many you know

00:42:08,800 --> 00:42:13,520
let's say you've got 75 files

00:42:11,280 --> 00:42:14,880
and you want to check every time someone

00:42:13,520 --> 00:42:17,680
commits them

00:42:14,880 --> 00:42:18,720
to get you just want to check are they

00:42:17,680 --> 00:42:20,960
screwed up

00:42:18,720 --> 00:42:22,160
did someone fat finger a package name

00:42:20,960 --> 00:42:25,520
well okay so

00:42:22,160 --> 00:42:27,040
what i do is i i write stuff and then i

00:42:25,520 --> 00:42:30,480
write tests for it

00:42:27,040 --> 00:42:31,440
right so right i'm not i'm not coming

00:42:30,480 --> 00:42:35,040
across

00:42:31,440 --> 00:42:39,680
untested code that's my responsibility

00:42:35,040 --> 00:42:42,880
like well the point is though that you

00:42:39,680 --> 00:42:42,880
even for your own stuff

00:42:43,119 --> 00:42:49,520
laziness is a virtue yes

00:42:46,319 --> 00:42:52,000
we can agree to that what if

00:42:49,520 --> 00:42:54,240
for the first order of testing you

00:42:52,000 --> 00:42:57,200
didn't have to write tests

00:42:54,240 --> 00:42:59,839
you had a canned shell script that did

00:42:57,200 --> 00:43:02,160
all of the first pass testing for you

00:42:59,839 --> 00:43:04,240
and you never had to write a low-level

00:43:02,160 --> 00:43:06,319
test again

00:43:04,240 --> 00:43:07,839
yeah that would be wonderful but i

00:43:06,319 --> 00:43:11,280
you've got it right here

00:43:07,839 --> 00:43:14,480
that that you know prove i get back what

00:43:11,280 --> 00:43:14,480
i think i'm gonna get back

00:43:14,560 --> 00:43:19,040
well not just something that evaluates

00:43:17,280 --> 00:43:21,200
i'm gonna get back

00:43:19,040 --> 00:43:22,640
something that evaluates the way i want

00:43:21,200 --> 00:43:26,960
it to

00:43:22,640 --> 00:43:30,319
oh and unit testing is not a replacement

00:43:26,960 --> 00:43:33,119
for functional testing i i wouldn't tell

00:43:30,319 --> 00:43:36,640
anyone to substitute one for the other

00:43:33,119 --> 00:43:38,079
but it is a helpful thing

00:43:36,640 --> 00:43:39,920
you know if you're dealing with a dozen

00:43:38,079 --> 00:43:40,960
files sure you know write a test for

00:43:39,920 --> 00:43:43,040
each of them

00:43:40,960 --> 00:43:44,400
but if you did basic unit testing on

00:43:43,040 --> 00:43:47,599
everything

00:43:44,400 --> 00:43:49,280
you could you know hit escape k in a

00:43:47,599 --> 00:43:52,319
spare window somewhere

00:43:49,280 --> 00:43:54,160
and check your code pretty often yes

00:43:52,319 --> 00:43:56,800
i'm not arguing against you i'm only

00:43:54,160 --> 00:44:00,560
answering your questions there yeah okay

00:43:56,800 --> 00:44:01,200
well that would be but this doesn't rep

00:44:00,560 --> 00:44:04,240
your

00:44:01,200 --> 00:44:07,520
your very right it doesn't replace unit

00:44:04,240 --> 00:44:09,599
the the functional testing that you

00:44:07,520 --> 00:44:12,560
would write

00:44:09,599 --> 00:44:13,440
but it even if you've got a small code

00:44:12,560 --> 00:44:16,240
base

00:44:13,440 --> 00:44:17,520
and even if you write specific tests for

00:44:16,240 --> 00:44:20,000
everything

00:44:17,520 --> 00:44:21,680
you might find that you spent less time

00:44:20,000 --> 00:44:24,960
chasing

00:44:21,680 --> 00:44:28,400
really minor typo-ish syntax

00:44:24,960 --> 00:44:30,160
error oopsie bugs if you could test

00:44:28,400 --> 00:44:32,800
everything you do unit tests on

00:44:30,160 --> 00:44:34,480
everything quickly

00:44:32,800 --> 00:44:36,400
and it just helps you catch those things

00:44:34,480 --> 00:44:38,160
before you waste time

00:44:36,400 --> 00:44:39,520
trying to figure out why a bigger test

00:44:38,160 --> 00:44:42,640
fails

00:44:39,520 --> 00:44:42,640
yeah yeah

00:44:43,040 --> 00:44:46,079
and that's the point the the only thing

00:44:45,040 --> 00:44:48,839
you need to do

00:44:46,079 --> 00:44:51,839
basic testing in perl is the path to the

00:44:48,839 --> 00:44:51,839
file

00:44:51,920 --> 00:44:58,079
and and what are the exceptions that

00:44:55,119 --> 00:44:58,079
you've come across

00:44:58,400 --> 00:45:02,800
exceptions to where i can't test it or

00:45:01,119 --> 00:45:04,800
exceptions to something that

00:45:02,800 --> 00:45:06,560
you were forced to actually open the

00:45:04,800 --> 00:45:08,160
file in the editor and see what was

00:45:06,560 --> 00:45:09,680
going on

00:45:08,160 --> 00:45:12,319
oh well i mean once you get these

00:45:09,680 --> 00:45:15,040
diagnostics um

00:45:12,319 --> 00:45:16,240
you know one one project we were on you

00:45:15,040 --> 00:45:18,720
had

00:45:16,240 --> 00:45:19,359
you know 200 modules not a ridiculous

00:45:18,720 --> 00:45:22,720
number

00:45:19,359 --> 00:45:25,440
but they all were written in 2002

00:45:22,720 --> 00:45:27,920
with bare word file handles and two

00:45:25,440 --> 00:45:30,560
argument opens

00:45:27,920 --> 00:45:33,520
and the mission was make them all three

00:45:30,560 --> 00:45:37,040
argument with lexical file handles

00:45:33,520 --> 00:45:40,160
and so pass one is replace

00:45:37,040 --> 00:45:42,000
all of the bare words with my dollar

00:45:40,160 --> 00:45:43,359
you know it just live with it because

00:45:42,000 --> 00:45:44,160
then the rest of everything gets it

00:45:43,359 --> 00:45:46,000
right

00:45:44,160 --> 00:45:47,359
and then you have to put dollar signs in

00:45:46,000 --> 00:45:50,800
front of all of them

00:45:47,359 --> 00:45:52,640
okay well now you do that you find

00:45:50,800 --> 00:45:54,400
people use the same bare words which is

00:45:52,640 --> 00:45:55,920
why you had all those order of execution

00:45:54,400 --> 00:45:57,440
errors that people wanted you to check

00:45:55,920 --> 00:46:00,480
for

00:45:57,440 --> 00:46:02,400
but the diagnostics will show you that

00:46:00,480 --> 00:46:03,839
and now you're stuck opening the editor

00:46:02,400 --> 00:46:06,560
and saying okay

00:46:03,839 --> 00:46:08,079
here's a case where dollar foo you know

00:46:06,560 --> 00:46:09,839
overwrites a variable that's already

00:46:08,079 --> 00:46:11,359
been defined further up the code

00:46:09,839 --> 00:46:15,359
and you find a better name for it or you

00:46:11,359 --> 00:46:17,839
stick it in an if block

00:46:15,359 --> 00:46:18,560
but if if you're cleaning up even your

00:46:17,839 --> 00:46:22,079
own code

00:46:18,560 --> 00:46:24,400
from five years ago

00:46:22,079 --> 00:46:26,720
it's it's easy to have you know lots of

00:46:24,400 --> 00:46:30,480
little gotchas

00:46:26,720 --> 00:46:34,000
uh the other thing this is useful for

00:46:30,480 --> 00:46:36,240
is if you're about to upgrade to 5.34

00:46:34,000 --> 00:46:39,839
things change uh people learn that in

00:46:36,240 --> 00:46:41,520
516 when hashes got randomized

00:46:39,839 --> 00:46:42,960
and you know the code still worked but

00:46:41,520 --> 00:46:44,160
all the tests failed because they

00:46:42,960 --> 00:46:46,240
assumed everything would come out in the

00:46:44,160 --> 00:46:48,720
same order every time

00:46:46,240 --> 00:46:50,079
so one of the things you might want to

00:46:48,720 --> 00:46:52,640
do is

00:46:50,079 --> 00:46:53,520
if everything is based on user bin env

00:46:52,640 --> 00:46:56,400
perl

00:46:53,520 --> 00:46:58,480
put pearl 534 at the top of your path

00:46:56,400 --> 00:47:02,480
and then run all the unit tests

00:46:58,480 --> 00:47:02,480
and see how much stuff blows up

00:47:03,200 --> 00:47:08,079
that's got nothing to do with whether

00:47:05,040 --> 00:47:11,280
you have tests that really test the

00:47:08,079 --> 00:47:14,079
that validate real data it's

00:47:11,280 --> 00:47:17,119
you know is the new version of pearl are

00:47:14,079 --> 00:47:19,280
changes in the syntax gonna fry me

00:47:17,119 --> 00:47:21,839
uh hopefully pretty soon we'll have pro

00:47:19,280 --> 00:47:24,319
5.7

00:47:21,839 --> 00:47:26,240
and you're going to want to have

00:47:24,319 --> 00:47:28,720
something like this

00:47:26,240 --> 00:47:30,160
especially if you've got really high

00:47:28,720 --> 00:47:32,400
quality

00:47:30,160 --> 00:47:33,599
data-driven testing that you know looks

00:47:32,400 --> 00:47:35,599
at all the structures and looks at

00:47:33,599 --> 00:47:38,800
everything

00:47:35,599 --> 00:47:40,720
finding bugs that are

00:47:38,800 --> 00:47:42,319
just syntax errors and you know the

00:47:40,720 --> 00:47:43,040
whole thing with curly braces and reg

00:47:42,319 --> 00:47:46,720
x's

00:47:43,040 --> 00:47:47,040
tracking all those down in the output

00:47:46,720 --> 00:47:49,040
from

00:47:47,040 --> 00:47:50,559
something that is more than a unit test

00:47:49,040 --> 00:47:51,920
can drive you crazy

00:47:50,559 --> 00:47:53,599
because then you get all the structures

00:47:51,920 --> 00:47:55,119
aren't defined you get all these red

00:47:53,599 --> 00:47:58,079
hairing messages

00:47:55,119 --> 00:47:59,839
about the structures disagreeing at

00:47:58,079 --> 00:48:01,520
least if you go down to a unit test

00:47:59,839 --> 00:48:02,880
all you've got is the basic pearl

00:48:01,520 --> 00:48:07,040
diagnostics

00:48:02,880 --> 00:48:10,400
it's easy enough to read it

00:48:07,040 --> 00:48:10,400
did that make sense the way i said it

00:48:11,440 --> 00:48:16,800
is the is whether there is a module

00:48:14,720 --> 00:48:20,319
oh it went off the screen i'm sorry just

00:48:16,800 --> 00:48:23,040
ask me

00:48:20,319 --> 00:48:25,599
um the question was uh you know the

00:48:23,040 --> 00:48:27,760
obvious question i think follow-up is

00:48:25,599 --> 00:48:29,680
you know and here it is is is there a

00:48:27,760 --> 00:48:31,359
module that we can use that we can point

00:48:29,680 --> 00:48:33,359
at a file that'll do you know some or

00:48:31,359 --> 00:48:36,400
all of this testing

00:48:33,359 --> 00:48:39,200
if people thought this was useful i

00:48:36,400 --> 00:48:42,720
could stick this on git lab

00:48:39,200 --> 00:48:44,880
um i've got the current iterations that

00:48:42,720 --> 00:48:46,720
i'm using of these there's one thing

00:48:44,880 --> 00:48:50,079
that if you

00:48:46,720 --> 00:48:52,480
give it if you've got a directory

00:48:50,079 --> 00:48:53,440
there is one thing you have to curate by

00:48:52,480 --> 00:48:55,520
hand

00:48:53,440 --> 00:48:58,720
which is the list of directories to

00:48:55,520 --> 00:49:01,359
search for pearly files

00:48:58,720 --> 00:49:02,319
if you can do if you'll do that much

00:49:01,359 --> 00:49:05,920
this will find

00:49:02,319 --> 00:49:08,000
all the it will find all the files

00:49:05,920 --> 00:49:10,559
that are and again you can whichever you

00:49:08,000 --> 00:49:12,480
use that are yaml or any or something

00:49:10,559 --> 00:49:13,920
and it runs every single one of the

00:49:12,480 --> 00:49:17,119
config files

00:49:13,920 --> 00:49:19,680
through config colon colon any

00:49:17,119 --> 00:49:21,440
and it lists all the config files that

00:49:19,680 --> 00:49:23,040
aren't readable has anyone here gotten

00:49:21,440 --> 00:49:26,720
screwed up testing something

00:49:23,040 --> 00:49:26,720
because the config file is fried

00:49:27,040 --> 00:49:31,280
oh yeah well anyway yeah for that one

00:49:29,200 --> 00:49:34,559
for that reason and many others

00:49:31,280 --> 00:49:37,599
yeah so then i'd like to see this on

00:49:34,559 --> 00:49:39,359
gitlab steve okay um

00:49:37,599 --> 00:49:40,880
well i'll tell you what would anyone

00:49:39,359 --> 00:49:41,280
want to see it well enough to help me

00:49:40,880 --> 00:49:44,880
finish

00:49:41,280 --> 00:49:46,960
documenting it over the next few hours

00:49:44,880 --> 00:49:49,200
or two you know after this conference is

00:49:46,960 --> 00:49:49,200
over

00:49:49,440 --> 00:49:52,480
i'm just going to be happy today

00:49:55,839 --> 00:49:59,040
if someone would help me write the pot i

00:49:57,440 --> 00:50:02,400
could have it on

00:49:59,040 --> 00:50:02,400
on git lab by saturday

00:50:03,680 --> 00:50:10,960
somebody in the chat said yes okay

00:50:07,119 --> 00:50:12,319
um if you look up lemberg on the

00:50:10,960 --> 00:50:17,440
internet

00:50:12,319 --> 00:50:17,440

YouTube URL: https://www.youtube.com/watch?v=Jyamk3d-KDE


