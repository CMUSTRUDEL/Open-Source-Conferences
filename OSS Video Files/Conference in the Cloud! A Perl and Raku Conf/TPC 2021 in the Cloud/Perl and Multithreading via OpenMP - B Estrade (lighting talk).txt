Title: Perl and Multithreading via OpenMP - B Estrade (lighting talk)
Publication date: 2021-06-10
Playlist: TPC 2021 in the Cloud
Description: 
	
Captions: 
	00:00:00,080 --> 00:00:04,240
all right can y'all see that yep

00:00:02,480 --> 00:00:08,160
whatever all right

00:00:04,240 --> 00:00:09,120
okay um i'm talking about openmp openmp

00:00:08,160 --> 00:00:12,480
is a high level

00:00:09,120 --> 00:00:14,719
declarative pragma based uh

00:00:12,480 --> 00:00:16,160
uh i don't know what to call it thing

00:00:14,719 --> 00:00:18,720
that you can insert into

00:00:16,160 --> 00:00:19,520
uh your c code your c plus plus code

00:00:18,720 --> 00:00:22,560
your fortran

00:00:19,520 --> 00:00:23,920
code and uh it's it's it describes

00:00:22,560 --> 00:00:26,320
declaratively

00:00:23,920 --> 00:00:28,160
uh threading things for uh like for

00:00:26,320 --> 00:00:32,079
example if you have tight loops

00:00:28,160 --> 00:00:33,280
um and uh it's used primarily in high

00:00:32,079 --> 00:00:36,239
performance computing

00:00:33,280 --> 00:00:36,960
but it's supported by compilers it's uh

00:00:36,239 --> 00:00:39,840
it's

00:00:36,960 --> 00:00:42,000
created by an arc uh a standards board

00:00:39,840 --> 00:00:44,719
that encompasses like intel

00:00:42,000 --> 00:00:45,760
uh hp bunch all the all the compiler

00:00:44,719 --> 00:00:47,200
writers

00:00:45,760 --> 00:00:48,879
uh so what i'm going to show you right

00:00:47,200 --> 00:00:52,399
now is this is a c

00:00:48,879 --> 00:00:56,239
program that has uh mp openmp in it

00:00:52,399 --> 00:00:59,680
and it is computing pi uh using some

00:00:56,239 --> 00:01:01,840
some iterative method um and

00:00:59,680 --> 00:01:03,280
what i wanted to show here this it's

00:01:01,840 --> 00:01:05,439
otherwise it's a normal c

00:01:03,280 --> 00:01:06,560
program but you've got these fragment

00:01:05,439 --> 00:01:08,960
here's that

00:01:06,560 --> 00:01:10,720
define where you would like the compiler

00:01:08,960 --> 00:01:11,600
to consider the parallel section to

00:01:10,720 --> 00:01:14,479
start

00:01:11,600 --> 00:01:15,920
and then it does all the magic to to uh

00:01:14,479 --> 00:01:18,960
to thread it internally

00:01:15,920 --> 00:01:22,080
there's a translation phase where

00:01:18,960 --> 00:01:25,439
if you have openmp enabled

00:01:22,080 --> 00:01:27,360
the compiler will basically insert

00:01:25,439 --> 00:01:28,799
p thread calls and that's what's

00:01:27,360 --> 00:01:32,079
normally used

00:01:28,799 --> 00:01:32,799
gcc is most likely the most common

00:01:32,079 --> 00:01:35,040
avenue for

00:01:32,799 --> 00:01:36,320
for everybody to try it it's done

00:01:35,040 --> 00:01:39,840
through libgomp

00:01:36,320 --> 00:01:40,960
so it's the the gomp the gomp openmp

00:01:39,840 --> 00:01:42,960
library

00:01:40,960 --> 00:01:44,000
so what i've got here this is a c

00:01:42,960 --> 00:01:47,200
program

00:01:44,000 --> 00:01:50,880
that computes pi this is another one

00:01:47,200 --> 00:01:54,320
but what i want to show is

00:01:50,880 --> 00:01:57,360
an example where i'm actually using in

00:01:54,320 --> 00:02:00,880
line c which is right here

00:01:57,360 --> 00:02:04,000
and i'm utilizing uh this alien module

00:02:00,880 --> 00:02:06,079
for openmp and what it is doing

00:02:04,000 --> 00:02:08,000
through this i don't know how many

00:02:06,079 --> 00:02:09,840
people are familiar with inline c

00:02:08,000 --> 00:02:11,520
but in any case what i'm doing here is

00:02:09,840 --> 00:02:13,760
i'm defining that the c

00:02:11,520 --> 00:02:16,560
code is in the data section which is at

00:02:13,760 --> 00:02:19,920
the bottom of this file here

00:02:16,560 --> 00:02:23,760
and then with alien openmp

00:02:19,920 --> 00:02:26,640
if alien modules include a uh

00:02:23,760 --> 00:02:27,599
what is it an inline this is the alien

00:02:26,640 --> 00:02:31,280
openmp

00:02:27,599 --> 00:02:33,599
implementation if inline c

00:02:31,280 --> 00:02:34,800
detects or inline detects that there is

00:02:33,599 --> 00:02:38,239
a

00:02:34,800 --> 00:02:39,120
or use it with some alien module or some

00:02:38,239 --> 00:02:41,760
other module

00:02:39,120 --> 00:02:42,560
the inline module will call this inline

00:02:41,760 --> 00:02:45,040
method

00:02:42,560 --> 00:02:47,200
and it's expecting basically the

00:02:45,040 --> 00:02:50,319
compiler flags that are required

00:02:47,200 --> 00:02:51,120
in order to compile some program in this

00:02:50,319 --> 00:02:53,840
case

00:02:51,120 --> 00:02:54,720
where since openmp is is enabled through

00:02:53,840 --> 00:02:57,680
the compiler

00:02:54,720 --> 00:02:59,599
itself there's a uh there's some flags

00:02:57,680 --> 00:03:01,680
that need to be

00:02:59,599 --> 00:03:03,120
inserted or passed on to in this case

00:03:01,680 --> 00:03:05,599
we're using gcc

00:03:03,120 --> 00:03:06,319
now the compiler flags just real quick

00:03:05,599 --> 00:03:09,120
um

00:03:06,319 --> 00:03:11,040
in order to compile which with openmp

00:03:09,120 --> 00:03:14,560
ngcc you need to pass

00:03:11,040 --> 00:03:17,760
this this f openmp flag that tells

00:03:14,560 --> 00:03:19,920
gcc to look for those those pragmas

00:03:17,760 --> 00:03:21,040
and otherwise they're ignored as as

00:03:19,920 --> 00:03:24,879
comments

00:03:21,040 --> 00:03:27,120
uh this is uh this is providing a the

00:03:24,879 --> 00:03:27,599
library so lib gaunt for the linker

00:03:27,120 --> 00:03:30,319
phase

00:03:27,599 --> 00:03:32,239
of the compilation and this is the

00:03:30,319 --> 00:03:34,080
header file that's required when you put

00:03:32,239 --> 00:03:36,560
it inside of a c

00:03:34,080 --> 00:03:37,360
program there's uh equivalence for c

00:03:36,560 --> 00:03:40,799
plus plus and

00:03:37,360 --> 00:03:40,799
fortran um

00:03:41,280 --> 00:03:44,879
let me show you the make file that's

00:03:42,799 --> 00:03:47,599
actually so

00:03:44,879 --> 00:03:49,040
the compilation of the c files the c

00:03:47,599 --> 00:03:51,760
programs that i showed

00:03:49,040 --> 00:03:52,400
um are under these two targets pi and pi

00:03:51,760 --> 00:03:54,319
two

00:03:52,400 --> 00:03:55,840
and this just shows if you were to

00:03:54,319 --> 00:03:58,239
compile command line

00:03:55,840 --> 00:04:00,560
uh through gcc what it would look like

00:03:58,239 --> 00:04:01,200
and the same thing here uh what we're

00:04:00,560 --> 00:04:04,319
doing

00:04:01,200 --> 00:04:07,040
with the alien module is

00:04:04,319 --> 00:04:08,080
we're i'm compiling this subroutine to

00:04:07,040 --> 00:04:11,040
compute pi

00:04:08,080 --> 00:04:12,799
in a threaded fashion and i'm running it

00:04:11,040 --> 00:04:15,680
through pearl so let me run it run it in

00:04:12,799 --> 00:04:29,840
pro before

00:04:15,680 --> 00:04:29,840
before i run out of time here

00:04:34,560 --> 00:04:36,880
okay

00:04:37,759 --> 00:04:42,479
so inline c was invoked although i think

00:04:41,040 --> 00:04:44,479
i had it already cached

00:04:42,479 --> 00:04:46,720
the shared library already cached but it

00:04:44,479 --> 00:04:47,680
it compiles that c code and now it's

00:04:46,720 --> 00:04:50,560
accessing

00:04:47,680 --> 00:04:52,320
the the subroutine or the the function

00:04:50,560 --> 00:04:55,120
that i've defined here

00:04:52,320 --> 00:04:56,080
uh through through this uh interface

00:04:55,120 --> 00:04:59,040
here

00:04:56,080 --> 00:04:59,600
right here pi so down in the c code i've

00:04:59,040 --> 00:05:02,080
defined

00:04:59,600 --> 00:05:04,160
pi now now when it calls this pi

00:05:02,080 --> 00:05:07,360
function through the perl script

00:05:04,160 --> 00:05:09,840
this is actually threaded so what this

00:05:07,360 --> 00:05:12,000
shows is a pretty concise example

00:05:09,840 --> 00:05:13,440
if you wanted to to create a set of

00:05:12,000 --> 00:05:16,479
subroutines

00:05:13,440 --> 00:05:18,320
through through say inline c

00:05:16,479 --> 00:05:19,919
that were threaded you could actually

00:05:18,320 --> 00:05:23,600
create a nice library

00:05:19,919 --> 00:05:25,440
and access multi-threading using openmp

00:05:23,600 --> 00:05:27,280
with some compiled code and then access

00:05:25,440 --> 00:05:29,759
that through your pearl program

00:05:27,280 --> 00:05:30,880
so um i had some other things to show

00:05:29,759 --> 00:05:33,759
but i think that's probably

00:05:30,880 --> 00:05:35,840
it anyway look for alien openmp i also

00:05:33,759 --> 00:05:39,199
have alien i mean i'm sorry uh

00:05:35,840 --> 00:05:42,720
openmp environment which manages

00:05:39,199 --> 00:05:45,120
some other things with that

00:05:42,720 --> 00:05:52,800
anyway happy to happy to answer

00:05:45,120 --> 00:05:52,800

YouTube URL: https://www.youtube.com/watch?v=LWs_rJT9lg4


