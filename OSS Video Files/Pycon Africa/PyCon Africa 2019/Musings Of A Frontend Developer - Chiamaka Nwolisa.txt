Title: Musings Of A Frontend Developer - Chiamaka Nwolisa
Publication date: 2019-11-18
Playlist: PyCon Africa 2019
Description: 
	Chiamaka, a frontend engineer shares her experience with us on how she took on an audacious task of building an API that transcribes audio files to text.
Captions: 
	00:00:00,179 --> 00:00:05,400
I'm saying I'm a front-end engineer at M

00:00:02,669 --> 00:00:07,680
pharma an M Pharma well the mission to

00:00:05,400 --> 00:00:09,900
provide accessible affordable health

00:00:07,680 --> 00:00:11,219
care to everyone in Africa and they can

00:00:09,900 --> 00:00:14,190
check out some of the stuff that I have

00:00:11,219 --> 00:00:17,520
on the interwebs on github YouTube and

00:00:14,190 --> 00:00:20,640
my medium blog so I'd like to set

00:00:17,520 --> 00:00:21,900
expectations early on before I start so

00:00:20,640 --> 00:00:24,420
you can decide if you want to listen to

00:00:21,900 --> 00:00:26,340
me or probably going to town so this

00:00:24,420 --> 00:00:28,980
talk is about my experience as a

00:00:26,340 --> 00:00:32,189
front-end engineer building an audio

00:00:28,980 --> 00:00:36,420
text app in Python with no prior

00:00:32,189 --> 00:00:38,460
experience in Python so I really

00:00:36,420 --> 00:00:41,570
appreciate learning i've been coding

00:00:38,460 --> 00:00:44,100
Python now for about three months and

00:00:41,570 --> 00:00:45,629
its really an honor to be here and

00:00:44,100 --> 00:00:48,870
thanks to organizers for the opportunity

00:00:45,629 --> 00:00:50,879
that being said I really appreciate

00:00:48,870 --> 00:00:53,640
learning so if you see anything that you

00:00:50,879 --> 00:00:55,559
think any feedback you have for me

00:00:53,640 --> 00:00:59,190
please let me know and just grab me

00:00:55,559 --> 00:01:01,140
afterwards and have a quick chat so let

00:00:59,190 --> 00:01:05,070
me give you a brief history of my dance

00:01:01,140 --> 00:01:08,970
with Python my first encounter with

00:01:05,070 --> 00:01:11,760
Python was in 2012 2013 I was coming

00:01:08,970 --> 00:01:16,770
from languages like C++ and Java which

00:01:11,760 --> 00:01:19,140
if you know are pretty heavy and at the

00:01:16,770 --> 00:01:21,570
time I was using editor like notepad

00:01:19,140 --> 00:01:24,420
plus plus which didn't really have auto

00:01:21,570 --> 00:01:28,159
formatting capabilities so with the

00:01:24,420 --> 00:01:31,110
indentation style of Python I Paul like

00:01:28,159 --> 00:01:35,250
really annoyed me and I after a few days

00:01:31,110 --> 00:01:39,329
I quit and then seven past four seven

00:01:35,250 --> 00:01:42,799
years as developers it's a duty to keep

00:01:39,329 --> 00:01:46,229
learning so at the beginning of the year

00:01:42,799 --> 00:01:49,259
beginning of the year I wanted to learn

00:01:46,229 --> 00:01:52,290
a new language so I had never done my

00:01:49,259 --> 00:01:54,360
search to closure and Python I decided

00:01:52,290 --> 00:01:56,430
to go Python because of all the use

00:01:54,360 --> 00:01:58,380
cases that permits the language and I

00:01:56,430 --> 00:02:00,659
have a long human resources around me an

00:01:58,380 --> 00:02:02,790
M Pharma we are heavily invested in

00:02:00,659 --> 00:02:06,469
Python so it made more sense for me to

00:02:02,790 --> 00:02:08,429
take on Python at this time so I did a

00:02:06,469 --> 00:02:11,220
few weeks after I started learning

00:02:08,429 --> 00:02:11,910
Python my mom calls me and asked me my

00:02:11,220 --> 00:02:14,220
mom

00:02:11,910 --> 00:02:16,590
so honest Vika so she called me and

00:02:14,220 --> 00:02:18,390
asked me if how she can get the content

00:02:16,590 --> 00:02:20,640
from her speaking engagement to using

00:02:18,390 --> 00:02:22,170
her books and a light bulb went off in

00:02:20,640 --> 00:02:27,090
my head and I knew I could build it in

00:02:22,170 --> 00:02:30,030
Python so I built the Mars the Mars is a

00:02:27,090 --> 00:02:35,430
Python app that transcribed audio files

00:02:30,030 --> 00:02:37,260
to text that - what he went through the

00:02:35,430 --> 00:02:40,500
audio file you want to transcribe and

00:02:37,260 --> 00:02:41,820
the email address of the email address

00:02:40,500 --> 00:02:43,950
that you want the transcription to be

00:02:41,820 --> 00:02:47,690
sent to and I'll talk about my decision

00:02:43,950 --> 00:02:50,130
for using the email address later on

00:02:47,690 --> 00:02:52,050
select talk about my approach I'm a

00:02:50,130 --> 00:02:54,510
front-end engineer this is my first time

00:02:52,050 --> 00:02:57,720
coding anything in Python is my first

00:02:54,510 --> 00:02:59,970
Python project as a phone an engineer

00:02:57,720 --> 00:03:02,490
the first thing the finds the first

00:02:59,970 --> 00:03:04,680
point of contact when you are when you

00:03:02,490 --> 00:03:07,500
want to communicate with an API is to

00:03:04,680 --> 00:03:09,380
read documentation so I decided to go

00:03:07,500 --> 00:03:11,730
with documentation - in development

00:03:09,380 --> 00:03:13,950
documentation during development or read

00:03:11,730 --> 00:03:14,700
me - development simply means write your

00:03:13,950 --> 00:03:17,070
with me first

00:03:14,700 --> 00:03:18,959
so this enabled me to things with the

00:03:17,070 --> 00:03:21,090
API to think through the arguments that

00:03:18,959 --> 00:03:24,240
I wanted to take and then the in the

00:03:21,090 --> 00:03:30,480
output that I wanted to give so this is

00:03:24,240 --> 00:03:32,550
a non-visible this is a basic my first

00:03:30,480 --> 00:03:34,920
draft so I have the definitions the

00:03:32,550 --> 00:03:36,840
description the arguments I wanted to

00:03:34,920 --> 00:03:39,270
take which is an audio file which at

00:03:36,840 --> 00:03:43,230
this time must be empty to be and the

00:03:39,270 --> 00:03:45,360
email address I want to send you after

00:03:43,230 --> 00:03:47,310
thinking about the structure after

00:03:45,360 --> 00:03:50,010
thinking about other planning the next

00:03:47,310 --> 00:03:52,800
step is implementation so I decided to

00:03:50,010 --> 00:03:56,910
employ a few technologies

00:03:52,800 --> 00:03:59,489
the first was flask I know most of us

00:03:56,910 --> 00:04:01,860
know what flask is here but for the

00:03:59,489 --> 00:04:05,010
benefit of those who don't know flask is

00:04:01,860 --> 00:04:06,390
a microwave framework for Python it's

00:04:05,010 --> 00:04:09,000
really simple

00:04:06,390 --> 00:04:11,730
it implements the barest minimum and it

00:04:09,000 --> 00:04:14,340
allows you it provides you with a very

00:04:11,730 --> 00:04:17,510
very simple web api interface that

00:04:14,340 --> 00:04:19,890
enables you to build web apps quickly

00:04:17,510 --> 00:04:23,840
second technology i decided to employ

00:04:19,890 --> 00:04:26,360
was dhoka dhoka is a soft

00:04:23,840 --> 00:04:29,360
from that enables you to build test and

00:04:26,360 --> 00:04:30,949
deploy your applications quickly and I

00:04:29,360 --> 00:04:33,260
wanted to use this because I didn't want

00:04:30,949 --> 00:04:35,720
to hit on my computer with a lot of

00:04:33,260 --> 00:04:39,380
Python packages and different Python

00:04:35,720 --> 00:04:41,900
rations I tend to containerize all the

00:04:39,380 --> 00:04:43,490
applications that I build so and it

00:04:41,900 --> 00:04:46,250
gives you a consistent development

00:04:43,490 --> 00:04:49,220
environment you can always go from a Mac

00:04:46,250 --> 00:04:50,840
to Windows machine or Linux machine and

00:04:49,220 --> 00:04:53,060
still be up and running in no time

00:04:50,840 --> 00:04:55,100
and the type technology I decided to

00:04:53,060 --> 00:04:56,090
employ was the Google's cloud

00:04:55,100 --> 00:04:59,090
speech-to-text

00:04:56,090 --> 00:05:01,280
API frankly because it's the only making

00:04:59,090 --> 00:05:04,490
sense API our theorists pitched XDP out

00:05:01,280 --> 00:05:10,160
there and there's great documentation

00:05:04,490 --> 00:05:12,530
and it's Google so before I show you

00:05:10,160 --> 00:05:15,080
some code I like to walk through a basic

00:05:12,530 --> 00:05:19,520
flow chart of what the application looks

00:05:15,080 --> 00:05:21,650
like so we have to transcribe audio

00:05:19,520 --> 00:05:24,010
endpoints and then we have a health

00:05:21,650 --> 00:05:26,419
check we'll talk about that later

00:05:24,010 --> 00:05:28,850
apart from the health check we have the

00:05:26,419 --> 00:05:31,310
request so the first thing if we want to

00:05:28,850 --> 00:05:32,840
check if the audio file is valid if it's

00:05:31,310 --> 00:05:36,080
not valid we'll send the appropriate

00:05:32,840 --> 00:05:38,570
error response if it is valid we move on

00:05:36,080 --> 00:05:41,570
to check if the email is valid it is not

00:05:38,570 --> 00:05:43,220
valid who send an error response it is

00:05:41,570 --> 00:05:45,560
valid then we'll go to the cost of the

00:05:43,220 --> 00:05:47,389
application which is we'll convert from

00:05:45,560 --> 00:05:51,139
mp3 to weave I'll talk about that in

00:05:47,389 --> 00:05:54,380
depth in a bit and then we check the

00:05:51,139 --> 00:05:56,180
length of the file it is less than 60

00:05:54,380 --> 00:05:58,099
seconds we take a different approach

00:05:56,180 --> 00:06:01,220
from if is less than it was greater than

00:05:58,099 --> 00:06:04,280
60 seconds 60 seconds will transcribe

00:06:01,220 --> 00:06:05,990
the file synchronously and then send the

00:06:04,280 --> 00:06:08,120
results as an email and at the end of

00:06:05,990 --> 00:06:13,010
the program if it's greater than 60

00:06:08,120 --> 00:06:15,370
seconds Google Cloud Storage first they

00:06:13,010 --> 00:06:17,660
will transcribe the far as synchronously

00:06:15,370 --> 00:06:20,510
using the Google Cloud storage URI

00:06:17,660 --> 00:06:22,250
then we send the results as an email and

00:06:20,510 --> 00:06:24,830
at the end of the program so this is

00:06:22,250 --> 00:06:28,340
just the basic flow chart of what the

00:06:24,830 --> 00:06:33,740
application does so let's look at some

00:06:28,340 --> 00:06:36,370
code now what good look at it

00:06:33,740 --> 00:06:36,370
chunk by chunk

00:06:49,189 --> 00:06:55,689
was fine I'm going to look at the

00:06:52,489 --> 00:06:55,689
Chocolate Chunk any reason

00:07:04,700 --> 00:07:12,260
all right we'll continue like that so

00:07:08,330 --> 00:07:13,130
the first thing is the health check what

00:07:12,260 --> 00:07:15,440
is a health check

00:07:13,130 --> 00:07:18,500
he'll check is simply a way to know if

00:07:15,440 --> 00:07:22,310
your API is alive to receive requests or

00:07:18,500 --> 00:07:24,950
not and it's is a very good practice for

00:07:22,310 --> 00:07:28,070
every API built to have health checks

00:07:24,950 --> 00:07:30,920
and these days modern infrastructures

00:07:28,070 --> 00:07:33,350
tie into your health check to know how

00:07:30,920 --> 00:07:35,480
to spin up instances or to tear down

00:07:33,350 --> 00:07:38,480
functional instances so it's always a

00:07:35,480 --> 00:07:40,870
good rule of thumb to always incorporate

00:07:38,480 --> 00:07:43,810
health checks in every API that we build

00:07:40,870 --> 00:07:46,160
so for this one we just have a basic

00:07:43,810 --> 00:07:48,680
health check that says on the CAG

00:07:46,160 --> 00:07:52,340
request if everything is okay we turn it

00:07:48,680 --> 00:07:54,470
to hundred okey that's all after

00:07:52,340 --> 00:07:56,890
fleshing out the health check the next

00:07:54,470 --> 00:07:59,090
step is validation who have a

00:07:56,890 --> 00:08:01,760
client-side validation and we have

00:07:59,090 --> 00:08:04,280
server-side validation for client-side

00:08:01,760 --> 00:08:07,360
validation this just provides a great

00:08:04,280 --> 00:08:09,590
user experience but the server-side

00:08:07,360 --> 00:08:13,610
validation is where the juice is

00:08:09,590 --> 00:08:16,160
actually eyes so for here and as this

00:08:13,610 --> 00:08:19,340
rule of thumb that says never trust user

00:08:16,160 --> 00:08:21,230
imputes I take that very seriously so

00:08:19,340 --> 00:08:23,540
for here all we're just trying to do is

00:08:21,230 --> 00:08:26,120
check in the audio file and the email

00:08:23,540 --> 00:08:28,750
address is present if those two things

00:08:26,120 --> 00:08:32,390
are not present then we return the

00:08:28,750 --> 00:08:34,640
correct status code and extensible error

00:08:32,390 --> 00:08:36,350
message now this is very important

00:08:34,640 --> 00:08:39,470
because at the front-end engineer I've

00:08:36,350 --> 00:08:41,350
worked with api's that something is

00:08:39,470 --> 00:08:45,350
obviously wrong it's a 400 bad request

00:08:41,350 --> 00:08:46,280
but you see it 200 cookie that doesn't

00:08:45,350 --> 00:08:49,070
make any sense to me

00:08:46,280 --> 00:08:51,980
and sometimes where you also have the

00:08:49,070 --> 00:08:53,570
scenario where there's an there's the

00:08:51,980 --> 00:08:55,880
status code but there's no message

00:08:53,570 --> 00:08:59,660
there's no sensible message to help you

00:08:55,880 --> 00:09:02,420
who's consuming the API both faster so

00:08:59,660 --> 00:09:05,030
it's a good practice to always be

00:09:02,420 --> 00:09:08,990
intentional about the status codes that

00:09:05,030 --> 00:09:10,340
will return and the messages as well so

00:09:08,990 --> 00:09:11,230
move to the second phase of the

00:09:10,340 --> 00:09:13,730
validation

00:09:11,230 --> 00:09:16,400
after checking that the audio file and

00:09:13,730 --> 00:09:17,279
the email address is present we also

00:09:16,400 --> 00:09:19,259
have to check

00:09:17,279 --> 00:09:23,399
the audiophile make sure that it is what

00:09:19,259 --> 00:09:25,170
we expect somebody can send in JPEG file

00:09:23,399 --> 00:09:27,120
and say that that's what they want to

00:09:25,170 --> 00:09:30,300
transcribe that would crush our program

00:09:27,120 --> 00:09:33,870
so that we have to also check and make

00:09:30,300 --> 00:09:36,000
sure that files like that are not

00:09:33,870 --> 00:09:38,250
allowed in our system so here we just

00:09:36,000 --> 00:09:41,639
check that the file is valid it was not

00:09:38,250 --> 00:09:45,000
valid we returned with the error message

00:09:41,639 --> 00:09:47,250
and the status could we do the same

00:09:45,000 --> 00:09:48,899
thing for the email as well we'll try to

00:09:47,250 --> 00:09:52,170
validate the email and check if it is

00:09:48,899 --> 00:09:55,560
according it is according to the

00:09:52,170 --> 00:09:57,240
standard email format if it isn't we do

00:09:55,560 --> 00:10:00,709
the same thing we return the status code

00:09:57,240 --> 00:10:04,920
400 signifying as a bad request we

00:10:00,709 --> 00:10:06,209
return a sensible error message so if a

00:10:04,920 --> 00:10:08,639
program is still running at this point

00:10:06,209 --> 00:10:10,980
it means that we've gone through all the

00:10:08,639 --> 00:10:12,089
checks and everything is okey so we go

00:10:10,980 --> 00:10:17,310
to the main part of the application

00:10:12,089 --> 00:10:18,810
which is transcribing the audio file so

00:10:17,310 --> 00:10:21,540
the beginning if you can remember from

00:10:18,810 --> 00:10:24,120
the flowcharts after the validations are

00:10:21,540 --> 00:10:27,149
done we come to the main part of the

00:10:24,120 --> 00:10:30,029
application which is converting from mp3

00:10:27,149 --> 00:10:32,459
to weave and this is because according

00:10:30,029 --> 00:10:35,759
to the Google API the Google speech to

00:10:32,459 --> 00:10:38,370
text API it says that for optimal

00:10:35,759 --> 00:10:41,550
results you should use a lossless codec

00:10:38,370 --> 00:10:44,910
lossless codecs like Aflac or linear 16

00:10:41,550 --> 00:10:47,939
and linear 16 is the codec for a WAV

00:10:44,910 --> 00:10:51,180
file and if you if you do not have

00:10:47,939 --> 00:10:52,769
access to it loves this correct it's

00:10:51,180 --> 00:10:55,740
only a lossy connect you have a lossy

00:10:52,769 --> 00:10:58,319
codecs like mp3 and before and for it

00:10:55,740 --> 00:11:01,139
then you can transcode from a lossless

00:10:58,319 --> 00:11:03,180
from a lossy codec - lossless codec so

00:11:01,139 --> 00:11:05,129
that what is doing here but converting

00:11:03,180 --> 00:11:07,379
from every sweet sweet so from a loss to

00:11:05,129 --> 00:11:09,930
connect to a lossless codec now we will

00:11:07,379 --> 00:11:12,180
check the duration of the file and then

00:11:09,930 --> 00:11:15,180
based on the duration we do something

00:11:12,180 --> 00:11:16,949
different so if the duration is less

00:11:15,180 --> 00:11:19,559
than 60 seconds we take a different

00:11:16,949 --> 00:11:22,139
approach want to transcribe the fowl

00:11:19,559 --> 00:11:24,329
look at the first thing so we have a

00:11:22,139 --> 00:11:27,209
transcribe class and then this is a

00:11:24,329 --> 00:11:28,310
method on the transcribe class so what

00:11:27,209 --> 00:11:30,230
what to do is one

00:11:28,310 --> 00:11:32,360
the contents of the file if you read the

00:11:30,230 --> 00:11:34,850
content of the file read the content of

00:11:32,360 --> 00:11:37,540
it an audio file it is binary so wanna

00:11:34,850 --> 00:11:40,310
read the binary contents of the file

00:11:37,540 --> 00:11:42,380
pass it to the recognition audio the

00:11:40,310 --> 00:11:43,160
recognition audio comes from the

00:11:42,380 --> 00:11:46,279
speech-to-text

00:11:43,160 --> 00:11:48,890
api library and i will also set up the

00:11:46,279 --> 00:11:50,480
config then when we're done we can pass

00:11:48,890 --> 00:11:52,370
the config and the audio to the

00:11:50,480 --> 00:11:55,700
recognised function that also comes from

00:11:52,370 --> 00:11:57,860
the speech-to-text api then this

00:11:55,700 --> 00:12:00,260
function synchronously transcribes the

00:11:57,860 --> 00:12:03,350
file and gives us the response and we

00:12:00,260 --> 00:12:05,540
save it in the variable response then

00:12:03,350 --> 00:12:07,160
when we are done with that we can try to

00:12:05,540 --> 00:12:10,279
loop through we look through and they

00:12:07,160 --> 00:12:12,620
writes it to the file I'm so sorry this

00:12:10,279 --> 00:12:14,390
is not visible at all I will try to

00:12:12,620 --> 00:12:16,910
write it to the power then we were done

00:12:14,390 --> 00:12:19,750
with that after one worked on creating

00:12:16,910 --> 00:12:22,220
the file we can send the email

00:12:19,750 --> 00:12:22,910
now the duration is greater than 60

00:12:22,220 --> 00:12:24,830
seconds

00:12:22,910 --> 00:12:26,810
we want to take a different approach the

00:12:24,830 --> 00:12:29,420
first thing we have to do is upload to

00:12:26,810 --> 00:12:32,780
Google Cloud Storage so this is as

00:12:29,420 --> 00:12:35,750
simple as just the scripts we get the

00:12:32,780 --> 00:12:38,330
clients get the storage clients will get

00:12:35,750 --> 00:12:41,150
the bucket on the clients we create a

00:12:38,330 --> 00:12:43,460
block on that bucket then we upload the

00:12:41,150 --> 00:12:45,250
file that we want to the wav file that

00:12:43,460 --> 00:12:48,500
we have we uploaded to the blob and then

00:12:45,250 --> 00:12:51,170
every Google Cloud Storage URI follows

00:12:48,500 --> 00:12:56,000
this format so we can interpolate it and

00:12:51,170 --> 00:12:57,830
then get the URI and return it they

00:12:56,000 --> 00:12:59,660
won't want to transcribe it remove files

00:12:57,830 --> 00:13:02,690
almost the same thing as transcribing a

00:12:59,660 --> 00:13:04,070
local file so the only difference is

00:13:02,690 --> 00:13:06,350
this time around instead of reading the

00:13:04,070 --> 00:13:09,440
contents of the file we passing the

00:13:06,350 --> 00:13:12,050
Google Cloud Storage URI so you can see

00:13:09,440 --> 00:13:15,320
the x dot recognition audio be passing

00:13:12,050 --> 00:13:17,450
the you are instead of content and then

00:13:15,320 --> 00:13:20,620
after that we construct the configure

00:13:17,450 --> 00:13:24,350
game now just a side note

00:13:20,620 --> 00:13:27,290
you can use the ffmpeg library I think

00:13:24,350 --> 00:13:28,940
it comes with Mac and Linux I'm not sure

00:13:27,290 --> 00:13:33,140
about Windows but I can also always use

00:13:28,940 --> 00:13:35,209
it to inspect the headers of any audio

00:13:33,140 --> 00:13:37,700
file so the four-foot four thousand

00:13:35,209 --> 00:13:40,720
hundred I have there the audio channel

00:13:37,700 --> 00:13:44,660
counts the encoding at

00:13:40,720 --> 00:13:46,639
so I just you can inspect the headers of

00:13:44,660 --> 00:13:49,699
any audio file then expect ahead of the

00:13:46,639 --> 00:13:54,069
mp3 and before wave and then you see

00:13:49,699 --> 00:13:54,069
different values and if I use them there

00:13:54,220 --> 00:13:57,920
then after doing that this time around

00:13:56,389 --> 00:14:00,889
sort of calling the first time we called

00:13:57,920 --> 00:14:02,360
a client or recognized function but this

00:14:00,889 --> 00:14:04,759
time are all would call inclined the

00:14:02,360 --> 00:14:08,779
long-running recognized with the same

00:14:04,759 --> 00:14:09,829
parameters and what this does is it sets

00:14:08,779 --> 00:14:12,889
up a job

00:14:09,829 --> 00:14:15,069
Google sets up a job to do this a

00:14:12,889 --> 00:14:17,360
synchronously the first time we're

00:14:15,069 --> 00:14:19,730
transcribing it synchronously this time

00:14:17,360 --> 00:14:22,639
it's as important then we'll get the

00:14:19,730 --> 00:14:25,430
results again we loop over it and write

00:14:22,639 --> 00:14:28,850
it to a file then when we're done we can

00:14:25,430 --> 00:14:31,189
send the email successfully now this is

00:14:28,850 --> 00:14:32,839
a good point for me to talk about the

00:14:31,189 --> 00:14:36,110
reason why I decided to use email

00:14:32,839 --> 00:14:38,240
instead of other than the normal way

00:14:36,110 --> 00:14:40,220
that I was thinking about it no matter

00:14:38,240 --> 00:14:42,050
what you are thinking about is like if

00:14:40,220 --> 00:14:45,949
you use eyes on the web page and the

00:14:42,050 --> 00:14:48,680
user uploads the audio file that they

00:14:45,949 --> 00:14:50,689
want to transcribe they have to wait and

00:14:48,680 --> 00:14:54,370
then when it's ready they can't download

00:14:50,689 --> 00:14:58,189
it but actually make much sense for me

00:14:54,370 --> 00:15:00,860
user experience perspective so we

00:14:58,189 --> 00:15:03,170
decided to use the email address so that

00:15:00,860 --> 00:15:04,309
if the user uploads the file that you

00:15:03,170 --> 00:15:07,879
want to transcribe they can't forget

00:15:04,309 --> 00:15:09,920
about it and whenever is ready whenever

00:15:07,879 --> 00:15:12,439
the transcription is ready it descends

00:15:09,920 --> 00:15:14,990
to their email and then it can also

00:15:12,439 --> 00:15:16,309
serve as a storage very cool because if

00:15:14,990 --> 00:15:20,449
you have it in your email you always

00:15:16,309 --> 00:15:26,029
have it accept utility yourself so let's

00:15:20,449 --> 00:15:27,529
look at the same email function so the

00:15:26,029 --> 00:15:31,160
first thing you notice is there is no

00:15:27,529 --> 00:15:33,199
self this in this same email function is

00:15:31,160 --> 00:15:34,790
not part of the transcribe class because

00:15:33,199 --> 00:15:38,439
it has nothing to do with transcription

00:15:34,790 --> 00:15:42,529
/ see so it's just a function on its own

00:15:38,439 --> 00:15:44,779
and then I use the same with API to help

00:15:42,529 --> 00:15:46,339
me out with this so the first thing

00:15:44,779 --> 00:15:48,410
let's think about the first thing is you

00:15:46,339 --> 00:15:50,559
want to create an email and then you

00:15:48,410 --> 00:15:53,300
want to attach the transcription to it

00:15:50,559 --> 00:15:55,880
so here we just create

00:15:53,300 --> 00:15:57,350
a male object from the middle class and

00:15:55,880 --> 00:15:59,720
we passing the email I wanted to come

00:15:57,350 --> 00:16:03,709
from the email one is sent to the

00:15:59,720 --> 00:16:07,850
subjects and the plain text content then

00:16:03,709 --> 00:16:10,580
with the read the file read the binary

00:16:07,850 --> 00:16:14,510
file the file that we have created but

00:16:10,580 --> 00:16:16,730
there's a caveat when you want to attach

00:16:14,510 --> 00:16:19,970
a file to an email you have to

00:16:16,730 --> 00:16:20,990
base64-encoded so that what we do here

00:16:19,970 --> 00:16:23,480
on the second line

00:16:20,990 --> 00:16:25,100
we try the encoding and then we want to

00:16:23,480 --> 00:16:28,070
create the attachment object from the

00:16:25,100 --> 00:16:30,440
attachment class as i doing now that we

00:16:28,070 --> 00:16:33,740
add the file content which is what we

00:16:30,440 --> 00:16:36,649
just included the file type and then the

00:16:33,740 --> 00:16:39,980
file name then we attach the attachments

00:16:36,649 --> 00:16:42,050
to the mail I know so when we're done

00:16:39,980 --> 00:16:44,899
with that we're trying to send the email

00:16:42,050 --> 00:16:47,660
if we work successfully good love dies

00:16:44,899 --> 00:16:51,680
good if it doesn't work we know that

00:16:47,660 --> 00:16:58,600
there was a problem this is how it looks

00:16:51,680 --> 00:17:01,640
like we have the text plain text that we

00:16:58,600 --> 00:17:03,680
specified we'll have the subject who

00:17:01,640 --> 00:17:05,329
have the email address is coming from

00:17:03,680 --> 00:17:10,670
and then we have the transcription

00:17:05,329 --> 00:17:12,890
attached now I don't know if you were

00:17:10,670 --> 00:17:17,179
paying attention you see logs littered

00:17:12,890 --> 00:17:19,699
everywhere this is very simple but that

00:17:17,179 --> 00:17:22,550
one does not simply write perfect

00:17:19,699 --> 00:17:25,540
software you can never write perfect

00:17:22,550 --> 00:17:27,850
software and no matter how much you try

00:17:25,540 --> 00:17:30,650
software will always break at some point

00:17:27,850 --> 00:17:36,679
so it's always a good idea to leave

00:17:30,650 --> 00:17:39,559
bread crumbs for yourself and we do this

00:17:36,679 --> 00:17:41,450
by you can use print statements to do

00:17:39,559 --> 00:17:44,990
this so every action that goes through

00:17:41,450 --> 00:17:49,940
you write the print statement but python

00:17:44,990 --> 00:17:53,780
has provided the logic module so I use

00:17:49,940 --> 00:17:56,150
that so I created function called the

00:17:53,780 --> 00:17:58,970
logger I specified love format in which

00:17:56,150 --> 00:18:00,710
I want all my logs to coming I specify

00:17:58,970 --> 00:18:03,140
the file where I want all my looks to be

00:18:00,710 --> 00:18:05,330
aggregated and then I have a basic

00:18:03,140 --> 00:18:06,090
conflict when I set up everything this

00:18:05,330 --> 00:18:09,029
is

00:18:06,090 --> 00:18:10,980
with Python and then I use this log

00:18:09,029 --> 00:18:14,840
everywhere in every action that happens

00:18:10,980 --> 00:18:17,760
in my system and this just enables me to

00:18:14,840 --> 00:18:20,490
know in case there's any problem because

00:18:17,760 --> 00:18:22,470
like I said you can never rise perfect

00:18:20,490 --> 00:18:25,380
software so if kids any problem I can

00:18:22,470 --> 00:18:29,850
always go back in fare the log file and

00:18:25,380 --> 00:18:31,289
then see where there was a problem so

00:18:29,850 --> 00:18:37,110
you can always check out the full

00:18:31,289 --> 00:18:40,260
project on my github account I have set

00:18:37,110 --> 00:18:41,669
up the readme there's a readme there and

00:18:40,260 --> 00:18:44,850
there's instructions on how to set this

00:18:41,669 --> 00:18:46,080
up for yourself so if you want to if you

00:18:44,850 --> 00:18:49,260
see anything that could be made better

00:18:46,080 --> 00:18:52,380
please send a PR I'm just learning like

00:18:49,260 --> 00:18:54,630
I said I'm a beginner in Python so if

00:18:52,380 --> 00:18:57,330
you see anything that you think could be

00:18:54,630 --> 00:18:59,669
me better please let me know Sani PR are

00:18:57,330 --> 00:19:04,679
more than happy to review it and let you

00:18:59,669 --> 00:19:09,000
know and maybe budgets before I wrap up

00:19:04,679 --> 00:19:11,429
I like to talk about MPharm RFP we're

00:19:09,000 --> 00:19:14,760
hiring at M pharma and in pharma is in

00:19:11,429 --> 00:19:16,770
China and we're also in Lagos Nigeria we

00:19:14,760 --> 00:19:18,510
have offices in Ghana and it goes we

00:19:16,770 --> 00:19:22,890
have offices as well in Zambia and

00:19:18,510 --> 00:19:25,830
Zimbabwe so if you'd like to join we

00:19:22,890 --> 00:19:27,600
have Rose open for software for foreign

00:19:25,830 --> 00:19:30,240
engineers for backing engineers on for

00:19:27,600 --> 00:19:32,760
their web engineers so if you like to

00:19:30,240 --> 00:19:34,409
work in a very inclusive environment I

00:19:32,760 --> 00:19:36,899
would love to have you

00:19:34,409 --> 00:19:39,510
mission like I said at the beginning is

00:19:36,899 --> 00:19:41,970
to provide accessible and affordable

00:19:39,510 --> 00:19:43,200
health care to everyone in Africa so

00:19:41,970 --> 00:19:46,049
please you can go to the link and

00:19:43,200 --> 00:19:48,390
famicom slash carriages and in the world

00:19:46,049 --> 00:19:52,529
of our CEO we're building on africa

00:19:48,390 --> 00:19:55,289
that's a good good health so thank you

00:19:52,529 --> 00:19:58,440
to my friends nobody learned how to code

00:19:55,289 --> 00:20:01,890
alone and I had friends I had support

00:19:58,440 --> 00:20:03,840
from my guys Selassie Larry booboo one

00:20:01,890 --> 00:20:06,299
Pope I really appreciate you guys thank

00:20:03,840 --> 00:20:07,080
you so much for your help and thank you

00:20:06,299 --> 00:20:10,490
all for listening

00:20:07,080 --> 00:20:10,490
any question

00:20:12,430 --> 00:20:16,670
thank you very much for that thank you

00:20:15,920 --> 00:20:18,080
to your mother

00:20:16,670 --> 00:20:19,730
having the problem in the first place

00:20:18,080 --> 00:20:20,990
because that's the most that's where

00:20:19,730 --> 00:20:25,280
these things come from that was really

00:20:20,990 --> 00:20:26,630
interesting expiring we have just a

00:20:25,280 --> 00:20:28,760
couple of minutes because we're going to

00:20:26,630 --> 00:20:30,760
have our keynote with Allison but I'm

00:20:28,760 --> 00:20:33,290
sure there must be some questions for

00:20:30,760 --> 00:20:36,860
tomorrow so please raise your hand now

00:20:33,290 --> 00:20:40,970
we'll find a microphone for you so my

00:20:36,860 --> 00:20:43,240
question is a was it deployed and what

00:20:40,970 --> 00:20:43,240
form

00:20:51,280 --> 00:20:58,700
no it hasn't been employed yet but it's

00:20:54,650 --> 00:21:00,470
going to be non webform API so I'm gonna

00:20:58,700 --> 00:21:02,299
build a front-end application I'm a

00:21:00,470 --> 00:21:03,799
front-end engineer so I'm going to be

00:21:02,299 --> 00:21:07,040
the front-end application to consume

00:21:03,799 --> 00:21:33,850
this API but for now it's I use it from

00:21:07,040 --> 00:21:33,850
my user to transcribe about four years

00:21:35,320 --> 00:21:42,569
[Music]

00:21:37,660 --> 00:21:42,569
[Applause]

00:21:47,360 --> 00:21:54,110

YouTube URL: https://www.youtube.com/watch?v=0c2_6WA_KeI


