Title: Inheriting codeâ€¦ and I donâ€™t mean classes - Flavio Percoco
Publication date: 2019-11-20
Playlist: PyCon Africa 2019
Description: 
	One of the hardest things to do for developers, especially freelancers, is to inherit someone else's code, regardless it's an open source project, an internal project, or some small web page that your best friend asked you to fix. 
Flavio shares some of his experiences on this topic, some strategies to inherit old code without (totally) going mental, and how to rant about it without looking like a douchebag.
Captions: 
	00:00:00,000 --> 00:00:09,420
morning oh that's way better that's

00:00:03,720 --> 00:00:10,650
Africa I want so yeah so what the whole

00:00:09,420 --> 00:00:13,380
presentation today is about in

00:00:10,650 --> 00:00:15,420
Harrington code and by Harrington code

00:00:13,380 --> 00:00:16,710
if you are developer whenever you're

00:00:15,420 --> 00:00:18,750
hearing Harrington code whatever you

00:00:16,710 --> 00:00:20,250
mean like whatever you think about or

00:00:18,750 --> 00:00:22,080
the first thing you think about is about

00:00:20,250 --> 00:00:23,910
classes and how you inherit classes but

00:00:22,080 --> 00:00:27,119
this is not about that it's not about

00:00:23,910 --> 00:00:29,340
objects it has very little to do with

00:00:27,119 --> 00:00:32,070
code specifically it is more like a

00:00:29,340 --> 00:00:34,020
process to actually get some code that

00:00:32,070 --> 00:00:36,270
is not yours and make it yours or that

00:00:34,020 --> 00:00:37,649
used to be yours and then after a year

00:00:36,270 --> 00:00:39,469
you just don't know what happened there

00:00:37,649 --> 00:00:42,899
and then you got to make it yours again

00:00:39,469 --> 00:00:46,440
that is me it's flapper 87 pretty much

00:00:42,899 --> 00:00:47,700
everywhere on the web up here there's

00:00:46,440 --> 00:00:49,829
this thing called Twitter that is gonna

00:00:47,700 --> 00:00:54,860
be a really famous in the future you can

00:00:49,829 --> 00:00:58,020
follow me there if you like the talk I

00:00:54,860 --> 00:00:59,690
let me know if you don't like it that is

00:00:58,020 --> 00:01:01,710
not me that is not my twitter handler

00:00:59,690 --> 00:01:03,989
forget I was ever here now I'm just

00:01:01,710 --> 00:01:05,670
kidding I love feedback so whatever

00:01:03,989 --> 00:01:07,290
feedback you have about a talk by all

00:01:05,670 --> 00:01:09,570
means come by and and talk to me I'm

00:01:07,290 --> 00:01:11,310
gonna be here the whole day don't follow

00:01:09,570 --> 00:01:12,750
me I need someone to feed my ego so that

00:01:11,310 --> 00:01:15,090
would be awesome

00:01:12,750 --> 00:01:16,920
slides are up already there are ones

00:01:15,090 --> 00:01:19,049
like sure that is the link on the show

00:01:16,920 --> 00:01:20,909
if you can read it but I thought was

00:01:19,049 --> 00:01:22,979
gonna upload them right away today

00:01:20,909 --> 00:01:25,020
during breakfast because I'm on top of

00:01:22,979 --> 00:01:26,780
my shade today so I decided to just put

00:01:25,020 --> 00:01:30,259
everything there right away

00:01:26,780 --> 00:01:34,530
all right that's me I do work at elastic

00:01:30,259 --> 00:01:36,240
and if you know anything about me is

00:01:34,530 --> 00:01:38,360
that I used to work out right hard and I

00:01:36,240 --> 00:01:41,729
worked out right hard for quite a while

00:01:38,360 --> 00:01:43,950
the reasons why I left we had our hour

00:01:41,729 --> 00:01:45,450
long to explain in the two minutes that

00:01:43,950 --> 00:01:47,729
I like to dedicate just to talk about

00:01:45,450 --> 00:01:49,049
myself and fit my ego so I'll buy you a

00:01:47,729 --> 00:01:51,390
coffee we can talk about right height

00:01:49,049 --> 00:01:53,990
and all you want I work at elastic so

00:01:51,390 --> 00:01:56,640
thank elastic for letting me be here and

00:01:53,990 --> 00:02:00,630
let's get to business all right

00:01:56,640 --> 00:02:03,030
so inherited stuff as a mission like

00:02:00,630 --> 00:02:05,479
we're gonna be going through a little

00:02:03,030 --> 00:02:08,580
process that I kind of put together

00:02:05,479 --> 00:02:10,649
throughout the years while I continue to

00:02:08,580 --> 00:02:12,270
change jobs and kind of like adopting

00:02:10,649 --> 00:02:13,590
open source software out there and

00:02:12,270 --> 00:02:13,960
trying to contribute to software that I

00:02:13,590 --> 00:02:18,430
was not

00:02:13,960 --> 00:02:20,110
Miller with and like the steps and the

00:02:18,430 --> 00:02:22,810
things are I'm gonna be talking about

00:02:20,110 --> 00:02:25,420
today in isolation the Sun kind of

00:02:22,810 --> 00:02:27,100
obvious if you think about it but when

00:02:25,420 --> 00:02:28,990
you put them together in kind of like a

00:02:27,100 --> 00:02:30,970
process then it kind of make more sense

00:02:28,990 --> 00:02:33,070
and it they're less obvious and probably

00:02:30,970 --> 00:02:35,770
even more helpful I think or at least I

00:02:33,070 --> 00:02:37,810
found it more helpful so inheriting code

00:02:35,770 --> 00:02:39,850
when we talk about it here to go there

00:02:37,810 --> 00:02:41,620
are different scenarios or types of code

00:02:39,850 --> 00:02:43,330
that we can hear it right there's a good

00:02:41,620 --> 00:02:45,280
code which is the one we like and the

00:02:43,330 --> 00:02:48,430
one that has a bunch of documentation

00:02:45,280 --> 00:02:50,680
and and like a ton of tests and

00:02:48,430 --> 00:02:53,980
then you run everything works and like

00:02:50,680 --> 00:02:55,720
the defaults are amazing and the amazing

00:02:53,980 --> 00:02:58,000
defaults they let you run the software

00:02:55,720 --> 00:03:00,640
without even setting anything in the

00:02:58,000 --> 00:03:02,290
config file and that is a deal scenario

00:03:00,640 --> 00:03:03,820
and talk about the ideal scenario is

00:03:02,290 --> 00:03:04,960
actually pretty boring because then

00:03:03,820 --> 00:03:06,790
everything works and then there's

00:03:04,960 --> 00:03:08,140
nothing for you to do there no reason

00:03:06,790 --> 00:03:10,900
for you to actually get paid about the

00:03:08,140 --> 00:03:14,470
work but the

00:03:10,900 --> 00:03:16,870
I guess the the more interesting

00:03:14,470 --> 00:03:19,090
scenario is the one where you are trying

00:03:16,870 --> 00:03:21,040
to adopt code from someone and I hate

00:03:19,090 --> 00:03:22,720
you right like someone that just wrote

00:03:21,040 --> 00:03:24,010
code in a way that is impossible to

00:03:22,720 --> 00:03:25,630
understand and there are no tests and

00:03:24,010 --> 00:03:28,090
there is no documentation and the api's

00:03:25,630 --> 00:03:30,880
are not clear and the use cases are even

00:03:28,090 --> 00:03:35,200
less clear than the rest of the piece of

00:03:30,880 --> 00:03:37,810
software so what is that what is that

00:03:35,200 --> 00:03:39,250
sad story so the sad story is you add up

00:03:37,810 --> 00:03:42,700
some code that doesn't have any

00:03:39,250 --> 00:03:45,010
documentation you get there you you're

00:03:42,700 --> 00:03:47,500
given this link to hopefully a

00:03:45,010 --> 00:03:50,980
repository that you can clone and you

00:03:47,500 --> 00:03:52,690
realize that nowhere in the URLs or the

00:03:50,980 --> 00:03:54,220
code base you can find any documentation

00:03:52,690 --> 00:03:54,700
buddies go so you've no idea how it

00:03:54,220 --> 00:03:56,560
works

00:03:54,700 --> 00:03:59,530
you've no idea how it was implemented

00:03:56,560 --> 00:04:01,540
you have no idea you know what the

00:03:59,530 --> 00:04:05,110
thought the thoughts behind a software

00:04:01,540 --> 00:04:07,150
were or are so there are no tests of

00:04:05,110 --> 00:04:09,340
course because this person hated you so

00:04:07,150 --> 00:04:10,990
they decided to just write this software

00:04:09,340 --> 00:04:14,260
in a way that there's no way for you to

00:04:10,990 --> 00:04:16,720
actually verify that it works there's no

00:04:14,260 --> 00:04:17,950
way for you to make changes and make

00:04:16,720 --> 00:04:20,380
sure and be sure that you're not

00:04:17,950 --> 00:04:22,270
breaking something code is written

00:04:20,380 --> 00:04:26,020
poorly this is a matter of opinion and

00:04:22,270 --> 00:04:27,850
taste so for the person that wrote it it

00:04:26,020 --> 00:04:29,890
might be great and amazing code

00:04:27,850 --> 00:04:31,480
for you and my know be as good but let's

00:04:29,890 --> 00:04:33,370
assume that they're all trying to follow

00:04:31,480 --> 00:04:34,600
the best practices and this piece of

00:04:33,370 --> 00:04:37,780
code doesn't really follow the best

00:04:34,600 --> 00:04:39,280
practices the use cases are unclear this

00:04:37,780 --> 00:04:43,000
is actually pretty common like most of

00:04:39,280 --> 00:04:44,980
the time at least these days you find

00:04:43,000 --> 00:04:46,780
code that has some test you find code

00:04:44,980 --> 00:04:48,730
that has some documentation might not be

00:04:46,780 --> 00:04:50,590
the best one but it has some of it but

00:04:48,730 --> 00:04:53,830
the like it's very common to find some

00:04:50,590 --> 00:04:55,540
some software out there that whose use

00:04:53,830 --> 00:04:57,040
cases are not entirely clear it doesn't

00:04:55,540 --> 00:04:58,720
matter if it is open source actually

00:04:57,040 --> 00:05:00,550
open source software most of the time

00:04:58,720 --> 00:05:03,340
has clear use cases that the ones built

00:05:00,550 --> 00:05:07,180
by companies because well you know money

00:05:03,340 --> 00:05:08,980
and whatever but and and then you know

00:05:07,180 --> 00:05:10,300
like you go to this place and you adopt

00:05:08,980 --> 00:05:12,670
this code but then you also have

00:05:10,300 --> 00:05:14,230
deadlines and the deadlines are all

00:05:12,670 --> 00:05:15,610
around the corner so you're adopting

00:05:14,230 --> 00:05:17,080
this piece of software you have no idea

00:05:15,610 --> 00:05:19,150
what it does there's no documentation or

00:05:17,080 --> 00:05:21,490
tests but someone is asking you to get

00:05:19,150 --> 00:05:23,020
 done in a week because everything

00:05:21,490 --> 00:05:24,220
has to go what ending has to go to

00:05:23,020 --> 00:05:27,790
production and make millions and

00:05:24,220 --> 00:05:30,790
millions for a company now what is this

00:05:27,790 --> 00:05:33,430
what is this process about I tried to

00:05:30,790 --> 00:05:35,380
break this process down in like five I

00:05:33,430 --> 00:05:37,240
am NOT gonna say simple and I'm not

00:05:35,380 --> 00:05:40,540
gonna say short but they are definitely

00:05:37,240 --> 00:05:44,710
steps so five steps that we can follow

00:05:40,540 --> 00:05:46,600
and they like if you look at them in the

00:05:44,710 --> 00:05:48,430
whole diagram at the end they look kind

00:05:46,600 --> 00:05:49,630
of like obnoxious but and really boring

00:05:48,430 --> 00:05:51,100
to go through but they're really

00:05:49,630 --> 00:05:52,840
important and and in the long run

00:05:51,100 --> 00:05:57,040
they're gonna make the whole process

00:05:52,840 --> 00:05:58,380
easier or at least I believe so so it

00:05:57,040 --> 00:06:01,980
must be true I'm just kidding

00:05:58,380 --> 00:06:05,770
so the first step understand the what

00:06:01,980 --> 00:06:07,810
don't how and then the why so before you

00:06:05,770 --> 00:06:09,340
even touch anything

00:06:07,810 --> 00:06:11,950
before you even start thinking about

00:06:09,340 --> 00:06:15,100
modifying anything in the codebase you

00:06:11,950 --> 00:06:18,520
can understand what the hell and finally

00:06:15,100 --> 00:06:20,920
the why the software exists so the what

00:06:18,520 --> 00:06:22,510
you need to understand what the use

00:06:20,920 --> 00:06:25,060
cases are you need to understand why

00:06:22,510 --> 00:06:27,250
that's like what what use cases that

00:06:25,060 --> 00:06:29,890
software has behind like what what it

00:06:27,250 --> 00:06:31,720
was built for who's using it what is

00:06:29,890 --> 00:06:34,240
that doctrine it has you know how many

00:06:31,720 --> 00:06:36,190
uses there are and the reason you care

00:06:34,240 --> 00:06:38,290
about how many users there are is not

00:06:36,190 --> 00:06:39,669
it's not so much because you wanna you

00:06:38,290 --> 00:06:40,910
only want to contribute to software that

00:06:39,669 --> 00:06:43,090
has millions and millions of you

00:06:40,910 --> 00:06:45,830
like I mean that's pretty cool but

00:06:43,090 --> 00:06:47,840
software like when you modify software

00:06:45,830 --> 00:06:50,240
it is extremely important to just not

00:06:47,840 --> 00:06:51,980
break it especially if it has users it

00:06:50,240 --> 00:06:55,640
doesn't matter if it is a single user or

00:06:51,980 --> 00:06:57,380
a million users out there it is very

00:06:55,640 --> 00:06:59,990
important to just like try not break the

00:06:57,380 --> 00:07:02,630
software that you that you're modifying

00:06:59,990 --> 00:07:04,220
the adoption question is important

00:07:02,630 --> 00:07:07,190
because then at least you know how bad

00:07:04,220 --> 00:07:09,590
it is gonna be if you break it or at

00:07:07,190 --> 00:07:11,240
least it allows you to it helps you also

00:07:09,590 --> 00:07:12,410
to you kind of like be a lot better plan

00:07:11,240 --> 00:07:14,180
if you have millions and millions of

00:07:12,410 --> 00:07:16,100
users you might want to release the new

00:07:14,180 --> 00:07:17,750
version to just a few of them and then

00:07:16,100 --> 00:07:19,130
like do some kind of like a be testing

00:07:17,750 --> 00:07:21,050
there's a bunch of other strategies that

00:07:19,130 --> 00:07:23,120
we're not really gonna talk about today

00:07:21,050 --> 00:07:26,360
but they exist and you should probably

00:07:23,120 --> 00:07:27,890
take them under consideration you also

00:07:26,360 --> 00:07:29,840
should know what the plant work is

00:07:27,890 --> 00:07:31,700
you're taking some software this

00:07:29,840 --> 00:07:33,140
software has probably some deadlines

00:07:31,700 --> 00:07:35,150
they might not have deadlines but it has

00:07:33,140 --> 00:07:37,190
some roadmaps and some work to plan

00:07:35,150 --> 00:07:38,720
ahead right some issues probably there

00:07:37,190 --> 00:07:41,180
are that have been created some feature

00:07:38,720 --> 00:07:42,800
requests you gotta know all these things

00:07:41,180 --> 00:07:46,460
like everything that is behind this

00:07:42,800 --> 00:07:48,710
software that is pushing it you to be

00:07:46,460 --> 00:07:50,870
enhanced and to be modified in the

00:07:48,710 --> 00:07:53,150
future so that whatever changes you make

00:07:50,870 --> 00:07:54,770
you also take on their consideration the

00:07:53,150 --> 00:07:57,560
future state of the software so that

00:07:54,770 --> 00:08:00,350
they are in relation to what's been

00:07:57,560 --> 00:08:03,350
planned of course are you gonna know

00:08:00,350 --> 00:08:05,600
what has been done already once you know

00:08:03,350 --> 00:08:07,670
all these words and they're this list

00:08:05,600 --> 00:08:09,650
this list is not exhaustive actually

00:08:07,670 --> 00:08:11,330
like there could be more questions or

00:08:09,650 --> 00:08:12,560
like you can ignore some of these it

00:08:11,330 --> 00:08:14,060
really depends on the piece of thought

00:08:12,560 --> 00:08:15,890
or data software that you're adopting

00:08:14,060 --> 00:08:18,290
the next thing that you want to know is

00:08:15,890 --> 00:08:22,940
how is implemented and this is probably

00:08:18,290 --> 00:08:25,550
one of the most difficult things and the

00:08:22,940 --> 00:08:28,940
whole process is understanding how it

00:08:25,550 --> 00:08:31,760
was implemented without without biases

00:08:28,940 --> 00:08:33,919
it's really hard to go through some

00:08:31,760 --> 00:08:35,870
software start reading the co-star in

00:08:33,919 --> 00:08:37,940
reading how it was implemented without

00:08:35,870 --> 00:08:39,770
putting our own tastes and our own

00:08:37,940 --> 00:08:41,300
thoughts in the middle but it's

00:08:39,770 --> 00:08:43,580
important to do it it is important to

00:08:41,300 --> 00:08:47,120
try to understand how it was implemented

00:08:43,580 --> 00:08:48,500
without judging the why or how like or

00:08:47,120 --> 00:08:50,690
like the techniques that were using the

00:08:48,500 --> 00:08:52,160
methodologies that were used so how are

00:08:50,690 --> 00:08:54,050
things and you need to understand and

00:08:52,160 --> 00:08:55,000
how was the software written it's very

00:08:54,050 --> 00:08:58,750
simple step

00:08:55,000 --> 00:09:01,959
it sounds simple but this this specific

00:08:58,750 --> 00:09:04,720
test here requires you to get into the

00:09:01,959 --> 00:09:06,970
implementers mind so you need to

00:09:04,720 --> 00:09:09,370
understand how it was implemented and

00:09:06,970 --> 00:09:10,870
and why these methodologies were used

00:09:09,370 --> 00:09:13,449
and they're like the high on the wire

00:09:10,870 --> 00:09:14,920
very correlated to each other and then

00:09:13,449 --> 00:09:16,180
you start implementing like deserve it

00:09:14,920 --> 00:09:18,550
and then you start going through the why

00:09:16,180 --> 00:09:20,319
was implemented that way you try to

00:09:18,550 --> 00:09:21,850
understand why this person decided to

00:09:20,319 --> 00:09:25,990
you implement that function that way why

00:09:21,850 --> 00:09:29,980
these classes exist why why are the

00:09:25,990 --> 00:09:31,449
tests missing like sometimes and again

00:09:29,980 --> 00:09:34,420
like this it is extremely important to

00:09:31,449 --> 00:09:37,899
go through this process with a few

00:09:34,420 --> 00:09:41,410
biases or no biases if possible as

00:09:37,899 --> 00:09:43,540
possible because if you if you come in

00:09:41,410 --> 00:09:46,569
with your biases you might start judging

00:09:43,540 --> 00:09:48,040
the software or the implementation the

00:09:46,569 --> 00:09:49,839
wrong way and actually you might start

00:09:48,040 --> 00:09:51,939
just judging the implement of the person

00:09:49,839 --> 00:09:54,100
that implemented this code without

00:09:51,939 --> 00:09:55,600
really knowing whether the code was

00:09:54,100 --> 00:09:58,899
implemented that way because this person

00:09:55,600 --> 00:10:00,790
has really bad taste and bad technique

00:09:58,899 --> 00:10:03,250
or whether it was like this person was

00:10:00,790 --> 00:10:04,420
put in the in the person was not put in

00:10:03,250 --> 00:10:07,750
a better position to actually do a

00:10:04,420 --> 00:10:10,389
better job which is an excuse that you

00:10:07,750 --> 00:10:11,800
can use sometimes so what are the test

00:10:10,389 --> 00:10:12,790
misses why are the test machines for

00:10:11,800 --> 00:10:14,649
instance why is the documentation

00:10:12,790 --> 00:10:15,939
missing is the documentation or the test

00:10:14,649 --> 00:10:17,680
missing because the person doesn't like

00:10:15,939 --> 00:10:19,029
writing tests user person doesn't

00:10:17,680 --> 00:10:21,009
believe that tests are useful for the

00:10:19,029 --> 00:10:23,259
software or in or are these things

00:10:21,009 --> 00:10:25,750
missing because the culture behind the

00:10:23,259 --> 00:10:27,399
company or in the company that is behind

00:10:25,750 --> 00:10:29,529
this software is just not good enough

00:10:27,399 --> 00:10:31,329
right like the company itself doesn't

00:10:29,529 --> 00:10:32,620
believe that spending time writing tests

00:10:31,329 --> 00:10:34,029
or spending time writing the commutation

00:10:32,620 --> 00:10:35,680
is something that people should be doing

00:10:34,029 --> 00:10:37,449
like these kind of things are important

00:10:35,680 --> 00:10:38,800
because as a three lines for instance if

00:10:37,449 --> 00:10:40,449
you are a freelance and your contract

00:10:38,800 --> 00:10:41,500
you're contracting for a company you

00:10:40,449 --> 00:10:42,910
want to know what kind of culture that

00:10:41,500 --> 00:10:44,079
you're gonna be faced with right you

00:10:42,910 --> 00:10:45,819
want to know what kind of culture you're

00:10:44,079 --> 00:10:47,470
gonna be part of whenever you start

00:10:45,819 --> 00:10:52,329
working on this on this piece of

00:10:47,470 --> 00:10:53,800
software so I wanted to put this this

00:10:52,329 --> 00:10:56,139
quote here in the middle just kind of

00:10:53,800 --> 00:10:58,420
like to reflect a little bit a mature

00:10:56,139 --> 00:11:02,199
developer seeks for the why before

00:10:58,420 --> 00:11:03,459
judging the how because if you start if

00:11:02,199 --> 00:11:05,050
you start judging how with our

00:11:03,459 --> 00:11:06,009
understanding why things were

00:11:05,050 --> 00:11:08,170
implemented the way they were

00:11:06,009 --> 00:11:10,540
implemented again you might

00:11:08,170 --> 00:11:12,190
judging the wrong person or might start

00:11:10,540 --> 00:11:14,380
making your conclusions based on the

00:11:12,190 --> 00:11:16,180
wrong facts so getting your facts

00:11:14,380 --> 00:11:19,209
straight is extremely important to

00:11:16,180 --> 00:11:20,769
actually start contributing to a piece

00:11:19,209 --> 00:11:23,410
of software that is not yours that

00:11:20,769 --> 00:11:25,600
you're adopting so the second step would

00:11:23,410 --> 00:11:27,850
be familiarize yourself with environment

00:11:25,600 --> 00:11:31,060
the user base and literally try to

00:11:27,850 --> 00:11:35,050
evaluate whether a rewrite of the entire

00:11:31,060 --> 00:11:38,320
software is is ideal it makes sense for

00:11:35,050 --> 00:11:40,690
for this case so learn how how users are

00:11:38,320 --> 00:11:41,829
consuming the software this is again in

00:11:40,690 --> 00:11:44,380
isolation

00:11:41,829 --> 00:11:46,480
these steps are these things might sound

00:11:44,380 --> 00:11:49,120
kind of obvious but many times we just

00:11:46,480 --> 00:11:50,620
thought we just ignore them as we go

00:11:49,120 --> 00:11:53,050
through this process now learn how our

00:11:50,620 --> 00:11:56,170
users are consuming the software many

00:11:53,050 --> 00:11:59,079
times software is developed for a very

00:11:56,170 --> 00:12:00,880
specific use case and users just end up

00:11:59,079 --> 00:12:04,690
using it for a different use case that

00:12:00,880 --> 00:12:06,880
it was implemented and this is common

00:12:04,690 --> 00:12:08,769
for what frameworks this is common for

00:12:06,880 --> 00:12:11,199
databases it is common for scripts this

00:12:08,769 --> 00:12:13,899
is common for many software out there so

00:12:11,199 --> 00:12:16,589
learn how your users are actually

00:12:13,899 --> 00:12:19,149
consuming the software so that whenever

00:12:16,589 --> 00:12:20,860
you change the stuff that you want to

00:12:19,149 --> 00:12:23,079
change in the software you don't end up

00:12:20,860 --> 00:12:24,610
breaking use cases that you are not

00:12:23,079 --> 00:12:26,050
familiar with because sometimes we just

00:12:24,610 --> 00:12:28,480
build software and we document all these

00:12:26,050 --> 00:12:30,160
use cases and we believe everyone is

00:12:28,480 --> 00:12:31,540
just using they're using the software

00:12:30,160 --> 00:12:33,670
that we want that will grow it in the

00:12:31,540 --> 00:12:35,350
way we expect them to use it but more

00:12:33,670 --> 00:12:37,149
often than not they're just end up doing

00:12:35,350 --> 00:12:40,800
their own thing and using it in a way

00:12:37,149 --> 00:12:44,230
that they believe is more useful I guess

00:12:40,800 --> 00:12:46,750
so after that you got to start running

00:12:44,230 --> 00:12:48,310
the software use it live changes for

00:12:46,750 --> 00:12:51,430
later if you notice that we haven't

00:12:48,310 --> 00:12:52,930
touched the codebase yet we haven't

00:12:51,430 --> 00:12:55,630
modified anything we haven't even

00:12:52,930 --> 00:12:57,250
written a single test so far we're just

00:12:55,630 --> 00:13:00,069
reading and reading and reading and

00:12:57,250 --> 00:13:01,720
familiarizing ourselves leave changes

00:13:00,069 --> 00:13:04,630
for later for now like just run the

00:13:01,720 --> 00:13:06,730
software clone it or get it like unpack

00:13:04,630 --> 00:13:09,279
at whatever form of delivery that your

00:13:06,730 --> 00:13:11,769
software has in try to run it try to run

00:13:09,279 --> 00:13:14,829
it with a default values as it comes

00:13:11,769 --> 00:13:15,220
with see how it breaks learn how it

00:13:14,829 --> 00:13:19,510
breaks

00:13:15,220 --> 00:13:21,339
expect it to break because again

00:13:19,510 --> 00:13:22,060
software that has same defaults and that

00:13:21,339 --> 00:13:24,010
just works out of

00:13:22,060 --> 00:13:26,320
about is very rare so expected to break

00:13:24,010 --> 00:13:28,570
and don't be like a surprise or

00:13:26,320 --> 00:13:30,520
frustrated if it breaks learn how it is

00:13:28,570 --> 00:13:32,650
breaking learn why it is breaking learn

00:13:30,520 --> 00:13:35,380
why does default values in the config

00:13:32,650 --> 00:13:38,380
files are not same enough for this piece

00:13:35,380 --> 00:13:40,410
of software and you are may you'll be

00:13:38,380 --> 00:13:42,670
amazed of how much you can learn from

00:13:40,410 --> 00:13:44,920
about this software that you're running

00:13:42,670 --> 00:13:47,980
if you try to run it yourself most of

00:13:44,920 --> 00:13:49,570
the time and this happens a lot so when

00:13:47,980 --> 00:13:53,020
I worked out right hard is to work on

00:13:49,570 --> 00:13:56,620
OpenStack OpenStack big cloud provider

00:13:53,020 --> 00:14:00,760
open-source out there as a developer I

00:13:56,620 --> 00:14:03,220
was not I was not in constant contact

00:14:00,760 --> 00:14:06,580
and interaction with our customers would

00:14:03,220 --> 00:14:10,510
only get into customer cases if like

00:14:06,580 --> 00:14:12,460
 went south for real and and then if

00:14:10,510 --> 00:14:14,170
that never happened I would never get in

00:14:12,460 --> 00:14:16,570
contact with the with the with the

00:14:14,170 --> 00:14:18,280
customers so I really didn't know how

00:14:16,570 --> 00:14:19,810
the software is being used how do you

00:14:18,280 --> 00:14:23,740
know what kind of configurations was

00:14:19,810 --> 00:14:25,420
come where common across the you know

00:14:23,740 --> 00:14:27,040
our customers I guess and this was one

00:14:25,420 --> 00:14:28,720
of the first things that when we started

00:14:27,040 --> 00:14:30,970
building the OpenStack team at Red Hat I

00:14:28,720 --> 00:14:33,340
kind of like pushed on like I want to

00:14:30,970 --> 00:14:35,800
know how the software is being used I

00:14:33,340 --> 00:14:39,730
want to know what confessions people are

00:14:35,800 --> 00:14:42,610
using stop flickering

00:14:39,730 --> 00:14:43,930
alright good also I want to know what

00:14:42,610 --> 00:14:46,990
kind of config options people are using

00:14:43,930 --> 00:14:49,510
because whenever I run it I run it with

00:14:46,990 --> 00:14:50,950
my developer mind and I run it with the

00:14:49,510 --> 00:14:52,780
defaults that just work for me like

00:14:50,950 --> 00:14:55,090
whatever makes the software run in my

00:14:52,780 --> 00:14:57,100
laptop is what I'm gonna use because I'm

00:14:55,090 --> 00:14:59,470
just developing and I just want to make

00:14:57,100 --> 00:15:01,630
it work and test a single thing but if I

00:14:59,470 --> 00:15:03,610
don't build a CI environment that runs

00:15:01,630 --> 00:15:05,860
everything and that makes sure that I

00:15:03,610 --> 00:15:08,200
test the default options or the config

00:15:05,860 --> 00:15:10,510
options that our customers are using I'm

00:15:08,200 --> 00:15:12,190
not going to be able to provide a good

00:15:10,510 --> 00:15:18,610
service to them you want to mess with

00:15:12,190 --> 00:15:28,660
the latter and finally I guess in this

00:15:18,610 --> 00:15:31,360
in this second step is okay now finally

00:15:28,660 --> 00:15:33,880
this in this last step is that too

00:15:31,360 --> 00:15:35,870
annoying for people it's not for me

00:15:33,880 --> 00:15:38,240
because I'm not looking at it but

00:15:35,870 --> 00:15:40,040
is written documentation and again that

00:15:38,240 --> 00:15:42,260
we haven't touched the code yet we

00:15:40,040 --> 00:15:45,460
haven't we haven't modified anything we

00:15:42,260 --> 00:15:47,630
haven't refactored anything we're just

00:15:45,460 --> 00:15:48,770
reading and reading and reading so read

00:15:47,630 --> 00:15:50,360
the commutation if there's some

00:15:48,770 --> 00:15:53,570
documentation if there's another

00:15:50,360 --> 00:15:55,670
commutation well again that story the

00:15:53,570 --> 00:15:57,440
commutation will have to be written but

00:15:55,670 --> 00:15:58,580
read the commutation read the test read

00:15:57,440 --> 00:16:00,260
the code read everything there is

00:15:58,580 --> 00:16:04,010
familiarize yourself as much as possible

00:16:00,260 --> 00:16:06,550
with this code base because now you have

00:16:04,010 --> 00:16:09,890
an important question to answer which is

00:16:06,550 --> 00:16:11,720
whether you have to refactor or like

00:16:09,890 --> 00:16:13,820
rewrite the entire software that you

00:16:11,720 --> 00:16:15,500
have in hand to actually be able to

00:16:13,820 --> 00:16:18,670
deliver what you're supposed to be

00:16:15,500 --> 00:16:22,970
delivering now this is something that is

00:16:18,670 --> 00:16:24,680
hardly applied to open source software

00:16:22,970 --> 00:16:26,570
in the sense that if you are joining a

00:16:24,680 --> 00:16:27,950
community the community has already some

00:16:26,570 --> 00:16:30,650
history they've been evolving the

00:16:27,950 --> 00:16:32,240
software for a while and so refactoring

00:16:30,650 --> 00:16:33,500
an open source project just because you

00:16:32,240 --> 00:16:35,779
want to contribute to it is probably not

00:16:33,500 --> 00:16:37,760
the right the right strategy to

00:16:35,779 --> 00:16:40,100
contribute to that software however if

00:16:37,760 --> 00:16:42,860
you are hired at a company and you're

00:16:40,100 --> 00:16:44,540
given I don't like calling it legacy

00:16:42,860 --> 00:16:45,980
code but if you're if you're given some

00:16:44,540 --> 00:16:48,650
legacy code or some code that is not

00:16:45,980 --> 00:16:50,930
yours you do have to evaluate you have

00:16:48,650 --> 00:16:54,440
to evaluate whether to deliver what you

00:16:50,930 --> 00:16:58,040
have to deliver a complete rewrite would

00:16:54,440 --> 00:17:01,730
be better than just modifying this often

00:16:58,040 --> 00:17:03,290
and and and doing small reflectors to do

00:17:01,730 --> 00:17:05,179
that you have to do everything we've

00:17:03,290 --> 00:17:06,949
already talked about now

00:17:05,179 --> 00:17:08,240
you've done everything we've talked

00:17:06,949 --> 00:17:09,949
about and now you're faced with the

00:17:08,240 --> 00:17:12,250
question whether you have to rewrite it

00:17:09,949 --> 00:17:12,250
or not

00:17:16,070 --> 00:17:22,520
so there's some questions that I like to

00:17:19,490 --> 00:17:25,430
ask myself whenever I'm faced with this

00:17:22,520 --> 00:17:29,420
kind of like dilemma because as

00:17:25,430 --> 00:17:30,770
developers who like I don't know what

00:17:29,420 --> 00:17:33,230
I'll guess I found this to be very

00:17:30,770 --> 00:17:35,540
common across developers or Mon

00:17:33,230 --> 00:17:37,280
developers across the world as we like

00:17:35,540 --> 00:17:39,680
building software from from from the

00:17:37,280 --> 00:17:41,300
bottom up like we like building software

00:17:39,680 --> 00:17:42,950
from scratch and like making like

00:17:41,300 --> 00:17:44,420
putting all of our ideas there and like

00:17:42,950 --> 00:17:45,710
doing all these diagrams and Mike coming

00:17:44,420 --> 00:17:48,530
up with these amazing architectures that

00:17:45,710 --> 00:17:50,240
then you know we implement and then we

00:17:48,530 --> 00:17:51,860
run and then everything works amazingly

00:17:50,240 --> 00:17:56,840
and we feel like heroes and we feel

00:17:51,860 --> 00:17:58,700
great about it but it's it's really like

00:17:56,840 --> 00:18:00,830
it's not always there the good answer is

00:17:58,700 --> 00:18:02,360
not always the right answer to how to

00:18:00,830 --> 00:18:06,170
top sauce sports so the first things

00:18:02,360 --> 00:18:07,070
that I like to ask myself whether when

00:18:06,170 --> 00:18:08,300
when I'm faced with this kind of

00:18:07,070 --> 00:18:10,160
question is whether I'm familiar with

00:18:08,300 --> 00:18:11,300
the ecosystem or not now if I joined a

00:18:10,160 --> 00:18:13,250
company but you an ecosystem in the

00:18:11,300 --> 00:18:14,810
entire development ecosystem if I join a

00:18:13,250 --> 00:18:18,110
company and I'm given a piece of

00:18:14,810 --> 00:18:21,200
software I gotta like understand whether

00:18:18,110 --> 00:18:23,930
I can't code in that language like if

00:18:21,200 --> 00:18:26,510
I'm given you know piece of software

00:18:23,930 --> 00:18:28,940
that is written in Java or even worse in

00:18:26,510 --> 00:18:30,830
Perl then I need to understand whether

00:18:28,940 --> 00:18:33,830
I'm gonna be able to modify it in a way

00:18:30,830 --> 00:18:35,560
that I can I can reach my goal right and

00:18:33,830 --> 00:18:37,850
if I'm familiar with the entire

00:18:35,560 --> 00:18:40,520
ecosystem Arana like the whole unit

00:18:37,850 --> 00:18:42,290
testing and etc etc etc like even even

00:18:40,520 --> 00:18:44,720
if it is written in Python you have to

00:18:42,290 --> 00:18:46,580
answer this question because maybe it is

00:18:44,720 --> 00:18:48,320
all written in Python but is it uses

00:18:46,580 --> 00:18:50,780
flask and you're not familiar with flask

00:18:48,320 --> 00:18:52,700
you're just familiar with Django and you

00:18:50,780 --> 00:18:54,950
know like it's not it's definitely not a

00:18:52,700 --> 00:18:56,780
good motivation for you to rewrite

00:18:54,950 --> 00:18:58,790
everything but it's still this is still

00:18:56,780 --> 00:18:59,810
part of the like the process and you

00:18:58,790 --> 00:19:01,370
still have to answer that kind of

00:18:59,810 --> 00:19:02,420
questions like I'm not extremely

00:19:01,370 --> 00:19:04,520
familiar with Django I'm extremely

00:19:02,420 --> 00:19:06,740
familiar with flatso is how long is it

00:19:04,520 --> 00:19:08,690
gonna take me to actually ramp up in

00:19:06,740 --> 00:19:09,980
Django compared to you how long it's

00:19:08,690 --> 00:19:14,120
gonna take me to rewrite everything

00:19:09,980 --> 00:19:14,780
right would a rewrite be faster that is

00:19:14,120 --> 00:19:18,350
another question

00:19:14,780 --> 00:19:20,720
like if I'm asked to add a simple

00:19:18,350 --> 00:19:22,940
feature we're writing the entire thing

00:19:20,720 --> 00:19:24,560
be faster than me trying to figure out

00:19:22,940 --> 00:19:26,150
how to implement it in this exact

00:19:24,560 --> 00:19:28,160
language and with this exciting Co

00:19:26,150 --> 00:19:29,419
system I don't know you got to answer

00:19:28,160 --> 00:19:31,940
that question

00:19:29,419 --> 00:19:34,279
without right make it easier to maintain

00:19:31,940 --> 00:19:36,619
sometimes code is actually written in

00:19:34,279 --> 00:19:38,960
Python but is it it was using I don't

00:19:36,619 --> 00:19:42,190
know like Python 2.3 and now I have to

00:19:38,960 --> 00:19:47,929
migrate it to you know Python 3.8 and

00:19:42,190 --> 00:19:51,169
you know like migrating 2.3 Python based

00:19:47,929 --> 00:19:52,549
code base to you 3.8 it's probably gonna

00:19:51,169 --> 00:19:53,960
take longer than just rewriting the

00:19:52,549 --> 00:19:56,960
whole thing actually I'm not even sure

00:19:53,960 --> 00:20:00,200
if you can do that but anyway to the

00:19:56,960 --> 00:20:02,570
point will migrate in the code base make

00:20:00,200 --> 00:20:04,279
it easier to maintain it in the long run

00:20:02,570 --> 00:20:06,349
so I rewrite everything now have

00:20:04,279 --> 00:20:08,749
everything in 3.8 which is supported and

00:20:06,349 --> 00:20:11,029
it's actively being developed in all the

00:20:08,749 --> 00:20:12,289
new libraries and and and tools out

00:20:11,029 --> 00:20:14,119
there are being built for this version

00:20:12,289 --> 00:20:15,379
of Python so is that gonna make it

00:20:14,119 --> 00:20:17,599
easier to maintain I think the answer is

00:20:15,379 --> 00:20:19,309
just in this case but you do have to

00:20:17,599 --> 00:20:23,149
answer that do you know whether you want

00:20:19,309 --> 00:20:25,369
to rewrite or not so we write have side

00:20:23,149 --> 00:20:26,779
effects and the users users users that

00:20:25,369 --> 00:20:28,399
are consuming our software so these

00:20:26,779 --> 00:20:29,929
users are the ones that are keeping the

00:20:28,399 --> 00:20:31,070
software alive actually it's not it's

00:20:29,929 --> 00:20:33,499
not just the code that you're writing

00:20:31,070 --> 00:20:35,690
it's the fact that you have users that

00:20:33,499 --> 00:20:38,059
still motivates you or motivates a

00:20:35,690 --> 00:20:40,369
company to actually contact you to

00:20:38,059 --> 00:20:43,519
maintain and add new features to these

00:20:40,369 --> 00:20:46,339
software so will a RIT right hat but

00:20:43,519 --> 00:20:49,009
side effects on our users like if I

00:20:46,339 --> 00:20:51,529
rewrite an entire API and we have users

00:20:49,009 --> 00:20:53,389
consuming those api's will I be able to

00:20:51,529 --> 00:20:55,969
respect the same API guarantees that we

00:20:53,389 --> 00:20:57,950
have today if I change the api's will I

00:20:55,969 --> 00:21:00,649
break how many users will a break right

00:20:57,950 --> 00:21:02,839
and will that breakage be horrible for

00:21:00,649 --> 00:21:07,789
our users do you have a migration plan

00:21:02,839 --> 00:21:08,629
that I can apply Oh apply sorry if my

00:21:07,789 --> 00:21:13,940
screen locks

00:21:08,629 --> 00:21:16,249
it means I'm talking too much well I'm

00:21:13,940 --> 00:21:17,779
Italian I just talk will other members

00:21:16,249 --> 00:21:19,399
of the team be able to contribute like

00:21:17,779 --> 00:21:20,839
if I rewrite everything and I come in

00:21:19,399 --> 00:21:23,419
and someone gives me a piece of like

00:21:20,839 --> 00:21:24,499
Ruby and then I was like ah I don't like

00:21:23,419 --> 00:21:26,779
Reba I'm just gonna rewrite everything

00:21:24,499 --> 00:21:28,519
in Python will the rest of the team that

00:21:26,779 --> 00:21:30,440
I'm working with be able to contribute

00:21:28,519 --> 00:21:33,019
to the software am I the only Python

00:21:30,440 --> 00:21:34,759
user in this team is everyone else doing

00:21:33,019 --> 00:21:36,200
Ruby like will rewriting this whole

00:21:34,759 --> 00:21:37,879
software just break the entire

00:21:36,200 --> 00:21:39,679
contributions that other people can do

00:21:37,879 --> 00:21:41,059
if the answer is yes you probably don't

00:21:39,679 --> 00:21:42,059
want to rewrite it it's better for you

00:21:41,059 --> 00:21:43,440
to just learn Ruby

00:21:42,059 --> 00:21:48,539
and I can't believe I just said that on

00:21:43,440 --> 00:21:52,229
camera but I did now the third step

00:21:48,539 --> 00:21:54,029
would be building your Ganges you need

00:21:52,229 --> 00:21:56,969
to build your guarantees your guarantees

00:21:54,029 --> 00:21:59,239
first and then you can start refactoring

00:21:56,969 --> 00:22:02,460
or refactoring or implementing things

00:21:59,239 --> 00:22:04,590
and building your guarantees is

00:22:02,460 --> 00:22:06,389
extremely important because your

00:22:04,590 --> 00:22:08,669
guarantees are your source of truth

00:22:06,389 --> 00:22:10,679
right those are the things that you are

00:22:08,669 --> 00:22:12,960
going to build a software based on top

00:22:10,679 --> 00:22:14,489
off if you don't have any source of

00:22:12,960 --> 00:22:16,979
truth if you don't have any guarantees

00:22:14,489 --> 00:22:20,269
then you're up for breaking whatever

00:22:16,979 --> 00:22:23,339
software you're you've been given and

00:22:20,269 --> 00:22:24,839
whether it is a full refactor or not if

00:22:23,339 --> 00:22:25,889
you are not familiar with the software

00:22:24,839 --> 00:22:27,330
if you're not familiar with the

00:22:25,889 --> 00:22:29,549
guarantees and you don't have any

00:22:27,330 --> 00:22:32,219
guidelines that you can base all your

00:22:29,549 --> 00:22:35,309
work on you are up for breaking this

00:22:32,219 --> 00:22:37,739
piece of software so if there are no

00:22:35,309 --> 00:22:39,809
guidelines right then if there are no

00:22:37,739 --> 00:22:43,909
you know test guidelines coding

00:22:39,809 --> 00:22:46,229
guidelines documentation guidelines user

00:22:43,909 --> 00:22:47,789
use cases guidelines any kind of

00:22:46,229 --> 00:22:50,219
guidelines that you can think of if

00:22:47,789 --> 00:22:52,219
there are no guidelines you should write

00:22:50,219 --> 00:22:56,339
them write them before you start coding

00:22:52,219 --> 00:22:59,219
because it again it sounds boring as

00:22:56,339 --> 00:23:02,129
hell but is extremely important to do

00:22:59,219 --> 00:23:03,779
all these pre documentation steps before

00:23:02,129 --> 00:23:06,299
you actually start coding because you're

00:23:03,779 --> 00:23:08,999
gonna modify something that you are not

00:23:06,299 --> 00:23:10,259
extremely familiar with and if you're

00:23:08,999 --> 00:23:12,839
not familiar with a piece of software

00:23:10,259 --> 00:23:15,210
you again are up for breaking things and

00:23:12,839 --> 00:23:17,460
you don't want that you want to do

00:23:15,210 --> 00:23:22,499
whatever you have to do meet your goals

00:23:17,460 --> 00:23:23,129
and move on with your life document

00:23:22,499 --> 00:23:26,039
everything

00:23:23,129 --> 00:23:27,389
usability api's environment you've got

00:23:26,039 --> 00:23:28,710
to start writing in the commutation for

00:23:27,389 --> 00:23:30,089
everything that you find if there's no

00:23:28,710 --> 00:23:31,679
documentation or if there's a

00:23:30,089 --> 00:23:33,479
commutation just improve it if it is not

00:23:31,679 --> 00:23:35,429
good enough but you have to document

00:23:33,479 --> 00:23:37,830
everything and document it everything in

00:23:35,429 --> 00:23:39,599
this case it helps you building more

00:23:37,830 --> 00:23:41,789
knowledge it helps you build in the

00:23:39,599 --> 00:23:43,499
knowledge base that you need for not

00:23:41,789 --> 00:23:45,359
only you to contribute to the software

00:23:43,499 --> 00:23:47,429
but also future contributors to come in

00:23:45,359 --> 00:23:50,099
and be able to contribute to it so if

00:23:47,429 --> 00:23:52,440
there if the API is that you're touching

00:23:50,099 --> 00:23:54,869
and by API is I don't only mean HTTP API

00:23:52,440 --> 00:23:55,960
is I'm also talking about programmatic

00:23:54,869 --> 00:23:57,879
API is I

00:23:55,960 --> 00:23:59,619
functions signatures and all that if

00:23:57,879 --> 00:24:01,629
those API is done have proper

00:23:59,619 --> 00:24:04,090
documentation write it write it down

00:24:01,629 --> 00:24:05,950
because by writing it down you're gonna

00:24:04,090 --> 00:24:07,419
make better conclusions that just

00:24:05,950 --> 00:24:09,340
starting to modify the software in

00:24:07,419 --> 00:24:10,629
assuming you know how it works also by

00:24:09,340 --> 00:24:12,659
running it down you can talk to people

00:24:10,629 --> 00:24:15,249
and try to see if their expectations

00:24:12,659 --> 00:24:18,129
they have are the ones that you were

00:24:15,249 --> 00:24:20,259
able to hear it and learn from or by

00:24:18,129 --> 00:24:22,570
reading the software enter comment in a

00:24:20,259 --> 00:24:25,029
document environment how it's being run

00:24:22,570 --> 00:24:26,559
how it's been deployed what kind of

00:24:25,029 --> 00:24:28,570
service what kind of architectures in

00:24:26,559 --> 00:24:30,009
needs how it's being consumed how it's

00:24:28,570 --> 00:24:32,019
being released everything has to be

00:24:30,009 --> 00:24:34,840
documented before you start modifying

00:24:32,019 --> 00:24:36,039
these software if you don't build these

00:24:34,840 --> 00:24:39,119
guidelines if you don't build your

00:24:36,039 --> 00:24:45,789
guarantees again you are up for breaking

00:24:39,119 --> 00:24:47,860
stuff all tests must pass if they exist

00:24:45,789 --> 00:24:50,139
if they don't exist again write them and

00:24:47,860 --> 00:24:52,779
now we start writing some code and

00:24:50,139 --> 00:24:54,999
you're like oh finally but yeah

00:24:52,779 --> 00:24:58,929
like it's not not refactor things yet

00:24:54,999 --> 00:25:03,190
make sure you have a good test base and

00:24:58,929 --> 00:25:08,200
this is not me trying to peach TDD all

00:25:03,190 --> 00:25:09,480
the way down I I prefer a more balanced

00:25:08,200 --> 00:25:12,480
kind of like approach to things like

00:25:09,480 --> 00:25:15,159
testing first this is definitely a great

00:25:12,480 --> 00:25:17,019
idea and a great methodology only

00:25:15,159 --> 00:25:21,369
testing before coding is probably not as

00:25:17,019 --> 00:25:23,369
good but all right de grÃ¢ce but yeah

00:25:21,369 --> 00:25:26,769
just bright test if they don't exist

00:25:23,369 --> 00:25:28,990
write it because again you're touching

00:25:26,769 --> 00:25:30,730
some code that exists already and it's

00:25:28,990 --> 00:25:33,129
just it actually just happened to me I

00:25:30,730 --> 00:25:35,499
joined elastic and I was given this I

00:25:33,129 --> 00:25:38,080
joined a repository where everyone has

00:25:35,499 --> 00:25:42,369
been contributing for years already and

00:25:38,080 --> 00:25:45,580
there are these two scripts to Python

00:25:42,369 --> 00:25:47,470
scripts that do you something very

00:25:45,580 --> 00:25:49,389
critical for our infrastructure actually

00:25:47,470 --> 00:25:51,399
and they were reading they were written

00:25:49,389 --> 00:25:52,960
just like scripts they don't have any

00:25:51,399 --> 00:25:54,909
functions around it's like reading a

00:25:52,960 --> 00:25:58,779
bash script basically everything is

00:25:54,909 --> 00:26:00,879
global everything is in the main context

00:25:58,779 --> 00:26:04,210
and you just run it by running Python

00:26:00,879 --> 00:26:07,539
right and that works fine it you know

00:26:04,210 --> 00:26:09,039
the scripts do their job but I was

00:26:07,539 --> 00:26:09,820
porting and this doe scripts were

00:26:09,039 --> 00:26:11,650
written for pi

00:26:09,820 --> 00:26:12,880
- so I was putting into Python 3 because

00:26:11,650 --> 00:26:14,740
I was pulling my hair off it's like oh

00:26:12,880 --> 00:26:16,060
my god Python 2 is going out it's gonna

00:26:14,740 --> 00:26:17,230
be sunset this year so we need to

00:26:16,060 --> 00:26:18,490
migrate everything so I started

00:26:17,230 --> 00:26:19,090
migrating those crates I broke

00:26:18,490 --> 00:26:22,900
everything

00:26:19,090 --> 00:26:25,630
because like string changed in in Python

00:26:22,900 --> 00:26:27,160
3 like you know the way you interact

00:26:25,630 --> 00:26:29,800
with the CLI the way you interact with

00:26:27,160 --> 00:26:32,560
the inputs the users give and everything

00:26:29,800 --> 00:26:34,000
that many things changed and there were

00:26:32,560 --> 00:26:35,530
no tests for these crates because like

00:26:34,000 --> 00:26:37,210
everything was put in the main context

00:26:35,530 --> 00:26:39,700
and there was no way for us to actually

00:26:37,210 --> 00:26:43,120
be able to run everything and make sure

00:26:39,700 --> 00:26:45,880
that they worked so I I decided to

00:26:43,120 --> 00:26:47,770
ignore my own tog and my own advice in

00:26:45,880 --> 00:26:50,530
my own process and say like just this is

00:26:47,770 --> 00:26:51,940
I just need to modify a couple of lines

00:26:50,530 --> 00:26:54,760
of codes and it's gonna be fine well I

00:26:51,940 --> 00:26:56,860
broke everything and then I had to fix

00:26:54,760 --> 00:27:00,100
it all then we decided to merge the

00:26:56,860 --> 00:27:01,450
patch and I was like all right now that

00:27:00,100 --> 00:27:04,120
the patch is in I'm gonna start

00:27:01,450 --> 00:27:06,640
rewriting everything I'm gonna rewrite

00:27:04,120 --> 00:27:09,670
the script using you know more modern

00:27:06,640 --> 00:27:13,720
tools and Python 3 and and adding some

00:27:09,670 --> 00:27:16,660
tests for it now that worked samite fine

00:27:13,720 --> 00:27:18,940
for me I did break things but it wasn't

00:27:16,660 --> 00:27:19,840
as critical as I thought however I

00:27:18,940 --> 00:27:21,370
should have done it the other way around

00:27:19,840 --> 00:27:24,070
I should have written the tests first I

00:27:21,370 --> 00:27:25,600
should have I should have written the

00:27:24,070 --> 00:27:28,060
tests first I should have made sure that

00:27:25,600 --> 00:27:29,620
we had a good source of truth and that I

00:27:28,060 --> 00:27:34,090
understood the code before I actually

00:27:29,620 --> 00:27:35,530
started modifying everything so I guess

00:27:34,090 --> 00:27:36,730
the lesson here is that if you talk

00:27:35,530 --> 00:27:41,020
about inheriting code don't ignore

00:27:36,730 --> 00:27:43,210
yourself and the fourth the fourth step

00:27:41,020 --> 00:27:45,100
is is breaking breaking down your

00:27:43,210 --> 00:27:46,930
workload like you want to do once one

00:27:45,100 --> 00:27:48,250
small change at a time you wanna take

00:27:46,930 --> 00:27:50,110
one separate it's not gonna I guess

00:27:48,250 --> 00:27:51,910
sounds kind of obvious but it is very

00:27:50,110 --> 00:27:53,440
like it's very common to just like see

00:27:51,910 --> 00:27:54,940
some code that you want to rewrite and

00:27:53,440 --> 00:27:56,470
that you want to refactor like you know

00:27:54,940 --> 00:27:57,730
the rewrite part like say you have a

00:27:56,470 --> 00:27:58,900
function that you want to refactor and

00:27:57,730 --> 00:28:01,120
then you start modifying the entire

00:27:58,900 --> 00:28:04,780
function try not to do that try to

00:28:01,120 --> 00:28:07,420
actually Nick's talk he he he went from

00:28:04,780 --> 00:28:09,460
having a scrape that was all in the main

00:28:07,420 --> 00:28:12,310
context into having some extra functions

00:28:09,460 --> 00:28:14,380
and something more organized and he did

00:28:12,310 --> 00:28:16,450
it like in several slides small steps

00:28:14,380 --> 00:28:17,650
one change at a time do it it sounds

00:28:16,450 --> 00:28:19,840
like more work it sounds like more

00:28:17,650 --> 00:28:22,090
patches have to be written they do have

00:28:19,840 --> 00:28:23,620
to be written but it's going to give you

00:28:22,090 --> 00:28:27,790
some extra guarantees it's going to

00:28:23,620 --> 00:28:30,580
the whole migration safer for you focus

00:28:27,790 --> 00:28:32,080
on progress not perfection this is this

00:28:30,580 --> 00:28:33,309
applies actually everywhere it doesn't

00:28:32,080 --> 00:28:35,320
matter whether you're refactoring code

00:28:33,309 --> 00:28:37,750
implementing new features or rewriting

00:28:35,320 --> 00:28:40,270
the entire code in general whenever you

00:28:37,750 --> 00:28:42,430
are writing software and contributing to

00:28:40,270 --> 00:28:43,720
projects try to focus on progress not

00:28:42,430 --> 00:28:45,700
necessarily on perfection be more

00:28:43,720 --> 00:28:47,080
pragmatic because if you try to be

00:28:45,700 --> 00:28:50,080
perfect especially when you're

00:28:47,080 --> 00:28:52,210
refactoring code you are again up for

00:28:50,080 --> 00:28:54,130
going down the rabbit hole and then

00:28:52,210 --> 00:28:56,410
ended up refactoring the whole thing and

00:28:54,130 --> 00:28:58,240
rewriting the whole project without even

00:28:56,410 --> 00:28:59,620
noticing it you start refactoring a

00:28:58,240 --> 00:29:01,720
single function and then you don't like

00:28:59,620 --> 00:29:03,850
it anymore because I give it would be

00:29:01,720 --> 00:29:05,290
more pythonic so to speak to do it in

00:29:03,850 --> 00:29:06,880
another way and then you start modifying

00:29:05,290 --> 00:29:08,140
it again and then you modify something

00:29:06,880 --> 00:29:09,070
else and then you modify something else

00:29:08,140 --> 00:29:10,809
and then you end up rewriting everything

00:29:09,070 --> 00:29:13,480
you don't want to do that you want to

00:29:10,809 --> 00:29:14,710
take small changes small steps and you

00:29:13,480 --> 00:29:16,600
want to focus on progress you want to

00:29:14,710 --> 00:29:19,740
get to your goal you want to be able to

00:29:16,600 --> 00:29:21,670
deliver whatever you have to deliver and

00:29:19,740 --> 00:29:23,500
don't change your form checking out the

00:29:21,670 --> 00:29:25,360
functionality doing the factor like

00:29:23,500 --> 00:29:27,370
refactoring code doesn't necessarily

00:29:25,360 --> 00:29:29,080
mean change in functionality or adding

00:29:27,370 --> 00:29:33,160
functionality to your code refactoring

00:29:29,080 --> 00:29:34,660
code in most of the time means keeping

00:29:33,160 --> 00:29:37,120
and preserving the actual functionality

00:29:34,660 --> 00:29:39,460
the way it does it the way it works but

00:29:37,120 --> 00:29:41,290
implementing it in a better way in a way

00:29:39,460 --> 00:29:43,300
that is more like not necessarily I hate

00:29:41,290 --> 00:29:44,920
the term pythonic but like in a cleaner

00:29:43,300 --> 00:29:46,750
way in a way that is more maintainable

00:29:44,920 --> 00:29:48,100
more readable than a way that you can

00:29:46,750 --> 00:29:49,420
actually test that like I didn't change

00:29:48,100 --> 00:29:52,150
the functionality of the scripts that I

00:29:49,420 --> 00:29:54,040
wrote sorry that I was modifying I only

00:29:52,150 --> 00:29:57,520
changed the way they were implemented so

00:29:54,040 --> 00:30:00,280
that I could add tests to them right and

00:29:57,520 --> 00:30:02,260
the fifth and last step is get paid and

00:30:00,280 --> 00:30:03,820
run from far and fast before you break

00:30:02,260 --> 00:30:05,650
everyone no that's not what you got to

00:30:03,820 --> 00:30:08,230
do you got to repeat three and four you

00:30:05,650 --> 00:30:09,730
got a repeat three and four as many

00:30:08,230 --> 00:30:10,480
times as needed you got to build your

00:30:09,730 --> 00:30:12,640
guarantees

00:30:10,480 --> 00:30:14,920
refactor later then you got to break

00:30:12,640 --> 00:30:16,540
down your strategy do your work and do

00:30:14,920 --> 00:30:18,550
one small change at a time and you got

00:30:16,540 --> 00:30:21,340
to repeat that until you're done and

00:30:18,550 --> 00:30:23,170
you've met your goals and well at the

00:30:21,340 --> 00:30:26,429
point you congratulations you have a new

00:30:23,170 --> 00:30:30,220
baby you are familiar with your codebase

00:30:26,429 --> 00:30:30,790
at the final quote because also I've run

00:30:30,220 --> 00:30:33,010
out of time

00:30:30,790 --> 00:30:35,130
don't take the shortest path aim for the

00:30:33,010 --> 00:30:37,389
fastest one even if it looks longer and

00:30:35,130 --> 00:30:40,929
there's a good analogy to it

00:30:37,389 --> 00:30:42,339
and I forgot the source but if the

00:30:40,929 --> 00:30:44,649
source is listening to this stuff I'm

00:30:42,339 --> 00:30:46,149
sorry but anyway the good analogy is and

00:30:44,649 --> 00:30:49,329
already is in a blog post the good

00:30:46,149 --> 00:30:51,759
analogy is if you need to go to to a

00:30:49,329 --> 00:30:53,979
city to a second series so we're gonna

00:30:51,759 --> 00:30:56,049
call them CDA and city B and you need to

00:30:53,979 --> 00:30:59,079
go from city to city B the shortest path

00:30:56,049 --> 00:31:00,789
might be going through downtown to get

00:30:59,079 --> 00:31:03,820
from City a to city B but downtown might

00:31:00,789 --> 00:31:05,289
be just congested and it might be a rush

00:31:03,820 --> 00:31:07,539
hour so it's gonna take you three hours

00:31:05,289 --> 00:31:09,839
to get from City a to city B the second

00:31:07,539 --> 00:31:12,519
option would be driving ten minutes

00:31:09,839 --> 00:31:14,769
towards a highway and then taking the

00:31:12,519 --> 00:31:16,179
half way and and hitting the gas until

00:31:14,769 --> 00:31:17,619
you get to see the B and that's gonna

00:31:16,179 --> 00:31:19,869
take you to see the B in half an hour

00:31:17,619 --> 00:31:21,999
now the part of going out of downtown

00:31:19,869 --> 00:31:23,889
and get it to the highway and then

00:31:21,999 --> 00:31:25,450
taking the highway down to city B it's

00:31:23,889 --> 00:31:27,999
way longer than going through downtown

00:31:25,450 --> 00:31:30,249
but it's way faster and the reason I'm

00:31:27,999 --> 00:31:31,959
bringing this up is because doing the

00:31:30,249 --> 00:31:34,629
whole process and going through one step

00:31:31,959 --> 00:31:36,429
one to step five it looks like a longer

00:31:34,629 --> 00:31:38,739
path to actually do whatever you have to

00:31:36,429 --> 00:31:40,239
do but in the long run if you care about

00:31:38,739 --> 00:31:42,099
your working you care about that code

00:31:40,239 --> 00:31:44,139
base that you're just joining and trying

00:31:42,099 --> 00:31:46,749
to learn it is gonna make your life

00:31:44,139 --> 00:31:48,159
simpler it's gonna make your life better

00:31:46,749 --> 00:31:50,799
it's gonna make this source code more

00:31:48,159 --> 00:31:53,499
maintainable and it's also B is gonna be

00:31:50,799 --> 00:31:55,269
a better reputation for yourself in the

00:31:53,499 --> 00:31:57,009
future now and it's also gonna make you

00:31:55,269 --> 00:31:58,899
feel better I think unless it makes me

00:31:57,009 --> 00:32:02,529
feel better it said that I ignore myself

00:31:58,899 --> 00:32:04,299
and the last case but anyway so finally

00:32:02,529 --> 00:32:04,749
some highlights understand what the why

00:32:04,299 --> 00:32:06,940
and the how

00:32:04,749 --> 00:32:09,759
build your guarantee is before changing

00:32:06,940 --> 00:32:12,519
the software focus on progress not

00:32:09,759 --> 00:32:15,039
perfection know who the consumers are

00:32:12,519 --> 00:32:17,079
and document everything API architecture

00:32:15,039 --> 00:32:19,599
environment everything you have at hand

00:32:17,079 --> 00:32:22,529
and I am gonna shut up right now

00:32:19,599 --> 00:32:22,529
thank you very much

00:32:23,170 --> 00:32:25,230

YouTube URL: https://www.youtube.com/watch?v=6XONxxHxxms


