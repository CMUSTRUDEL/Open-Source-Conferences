Title: Python Powered Disease Classification Web Application - Daniel Phiri
Publication date: 2019-12-05
Playlist: PyCon Africa 2019
Description: 
	Python of late isn't viewed as the first choice to build web based Machine Learning solutions. In this talk Daniel will take the audience through why they can still rely on Python and walk them through how he built a robust and performant Web App to Classify Lung diseases on the fly.
Captions: 
	00:00:01,010 --> 00:00:09,540
okay hi hi everyone thank you okay so

00:00:07,500 --> 00:00:11,790
I'll be talking about Python part

00:00:09,540 --> 00:00:15,570
disease classification web applications

00:00:11,790 --> 00:00:15,990
it's a mouthful but yeah it's it's right

00:00:15,570 --> 00:00:18,840
there

00:00:15,990 --> 00:00:22,590
Python power disease classification web

00:00:18,840 --> 00:00:25,080
applications so a bit about myself

00:00:22,590 --> 00:00:28,099
I'm Daniel Medela so Pirie my middle

00:00:25,080 --> 00:00:30,750
name Matt early so the T is silent means

00:00:28,099 --> 00:00:34,710
blessings and I'm hoping I can spread

00:00:30,750 --> 00:00:37,170
some across the room iMac organizer for

00:00:34,710 --> 00:00:38,879
a conference called DEFCON Salem that's

00:00:37,170 --> 00:00:41,760
the annual developer conference in

00:00:38,879 --> 00:00:45,300
Zambia and you can find me literally

00:00:41,760 --> 00:00:51,449
anywhere online by mal Gambas so that's

00:00:45,300 --> 00:00:53,219
mal GA mvs okay so just a side note I

00:00:51,449 --> 00:00:57,480
really like engaging crowds so can I

00:00:53,219 --> 00:01:01,559
hear some energy no like some real

00:00:57,480 --> 00:01:05,309
energy yeah okay so let's let's maintain

00:01:01,559 --> 00:01:06,390
that okay yeah great okay because you

00:01:05,309 --> 00:01:10,650
give me energy

00:01:06,390 --> 00:01:12,390
cool all right cool yeah so yes Python

00:01:10,650 --> 00:01:14,130
disease havin power disease

00:01:12,390 --> 00:01:17,220
classification web applications

00:01:14,130 --> 00:01:21,930
what is that right how many people are

00:01:17,220 --> 00:01:26,159
curious and in the back there no one's

00:01:21,930 --> 00:01:29,150
interested okay cool yeah okay it sounds

00:01:26,159 --> 00:01:29,150
like a lot but it really isn't

00:01:29,400 --> 00:01:33,180
this talk is basically about machine

00:01:30,990 --> 00:01:34,710
learning and how many people have done

00:01:33,180 --> 00:01:38,880
anything close to machine learning

00:01:34,710 --> 00:01:42,540
before okay how many people have used

00:01:38,880 --> 00:01:46,229
scikit-learn before there you go your

00:01:42,540 --> 00:01:48,450
machine learning engineer so machine

00:01:46,229 --> 00:01:49,829
learning is basically like telling

00:01:48,450 --> 00:01:52,170
computers to do something that you

00:01:49,829 --> 00:01:55,549
didn't explicitly program them to do and

00:01:52,170 --> 00:01:59,009
I'll explain more about this as I go on

00:01:55,549 --> 00:02:01,649
I'll tell a bit of my story my made a

00:01:59,009 --> 00:02:03,270
joke when I was asking questions someone

00:02:01,649 --> 00:02:04,740
was like don't you know

00:02:03,270 --> 00:02:07,110
Telos new life story I'm like I'm pretty

00:02:04,740 --> 00:02:10,020
young so my life story is pretty short

00:02:07,110 --> 00:02:12,090
so I'm I just finished my computer

00:02:10,020 --> 00:02:13,950
science degree and when I started that

00:02:12,090 --> 00:02:15,660
we had Python as a class

00:02:13,950 --> 00:02:18,239
and I'm like okay what can I do with

00:02:15,660 --> 00:02:20,489
Python so I think pretty much everyone

00:02:18,239 --> 00:02:22,980
takes this journey they make like a you

00:02:20,489 --> 00:02:24,720
know a simple game they create some

00:02:22,980 --> 00:02:27,090
variables everything is dynamic Python

00:02:24,720 --> 00:02:29,099
is pretty cool and then I'm like okay

00:02:27,090 --> 00:02:30,630
what more can we do so I'm like machine

00:02:29,099 --> 00:02:33,780
learning right so I get into tensorflow

00:02:30,630 --> 00:02:36,480
I get into scikit-learn it was that time

00:02:33,780 --> 00:02:37,650
when everyone was like you know machine

00:02:36,480 --> 00:02:39,120
learning was the in thing everyone

00:02:37,650 --> 00:02:41,340
wanted to be like a data scientist

00:02:39,120 --> 00:02:42,810
everyone you know was installing

00:02:41,340 --> 00:02:45,599
tensorflow and then just leaving it

00:02:42,810 --> 00:02:49,650
there yeah so it was it was a nice time

00:02:45,599 --> 00:02:51,239
and was really cool so yeah it was

00:02:49,650 --> 00:02:52,739
basically you get a machine learning you

00:02:51,239 --> 00:02:54,959
get a machine learning you get a machine

00:02:52,739 --> 00:02:57,630
learning everyone gets a machine

00:02:54,959 --> 00:03:01,110
learning and yeah it was very hyped but

00:02:57,630 --> 00:03:03,569
then it leaves a lot of questions what

00:03:01,110 --> 00:03:05,040
actual effect can we have in society

00:03:03,569 --> 00:03:07,380
with machine learning and I really like

00:03:05,040 --> 00:03:10,319
that the keynote speaker yesterday

00:03:07,380 --> 00:03:11,970
mentioned having actual if like actual

00:03:10,319 --> 00:03:15,900
projects on the ground affecting

00:03:11,970 --> 00:03:18,239
people's lives they have the flood the

00:03:15,900 --> 00:03:20,220
flood thing that they have in India

00:03:18,239 --> 00:03:23,430
where they predict where which area is

00:03:20,220 --> 00:03:25,799
going to be flooded and that's a really

00:03:23,430 --> 00:03:29,250
cool resource and they can predict

00:03:25,799 --> 00:03:32,639
weather and diagnose diabetic

00:03:29,250 --> 00:03:35,190
retinopathy I'm not like medical so yeah

00:03:32,639 --> 00:03:37,400
it's an eye disease and it's really hard

00:03:35,190 --> 00:03:39,660
to predict but machines when trained

00:03:37,400 --> 00:03:42,120
explicitly to do that do it far much

00:03:39,660 --> 00:03:45,090
better than humans and that's pretty

00:03:42,120 --> 00:03:47,430
interesting so yeah you probably get it

00:03:45,090 --> 00:03:50,810
machine learning was cool but what

00:03:47,430 --> 00:03:55,290
effect does it have on society right

00:03:50,810 --> 00:03:56,970
cool so the whole issue is solving

00:03:55,290 --> 00:03:59,819
complex problems and that's what I'll be

00:03:56,970 --> 00:04:02,340
getting into and that's why I call this

00:03:59,819 --> 00:04:07,049
presentation Python powered disease

00:04:02,340 --> 00:04:08,900
classification web applications all

00:04:07,049 --> 00:04:11,250
right so how many people here have used

00:04:08,900 --> 00:04:16,289
something that's known as a Jupiter

00:04:11,250 --> 00:04:19,289
notebook okay just so that I don't a

00:04:16,289 --> 00:04:22,639
lien eight everyone I'm going to run a

00:04:19,289 --> 00:04:22,639
simple Jupiter notebook

00:04:23,680 --> 00:04:33,040
so I'm in my terminal and all I have to

00:04:27,820 --> 00:04:35,199
say is Jupiter notebook so it's a really

00:04:33,040 --> 00:04:36,820
interactive way to run Python code in

00:04:35,199 --> 00:04:38,650
your browser that's basically what a

00:04:36,820 --> 00:04:40,600
notebook is it might take some time to

00:04:38,650 --> 00:04:42,940
come up but basically you get these

00:04:40,600 --> 00:04:51,550
cells and you type in Python code so I

00:04:42,940 --> 00:04:53,889
just okay yeah so you just say new and

00:04:51,550 --> 00:04:57,010
you choose your language Python 3 and

00:04:53,889 --> 00:05:00,070
you get a new notebook and anyone who's

00:04:57,010 --> 00:05:02,500
done anything close to data science has

00:05:00,070 --> 00:05:04,150
probably used one of these so I'll just

00:05:02,500 --> 00:05:07,240
say something really simple and print

00:05:04,150 --> 00:05:12,360
out what should I print out no that's

00:05:07,240 --> 00:05:17,530
boring what do I yeah okay hello hello

00:05:12,360 --> 00:05:19,090
akuaba do people say that okay there we

00:05:17,530 --> 00:05:22,770
go hello comma so I can basically run

00:05:19,090 --> 00:05:26,889
Python code in cells right and yeah

00:05:22,770 --> 00:05:30,880
where's my slide okay yeah and it's

00:05:26,889 --> 00:05:31,900
pretty cool because if you have to write

00:05:30,880 --> 00:05:34,990
scripts for certain things like

00:05:31,900 --> 00:05:38,020
visualization it gets hard to have that

00:05:34,990 --> 00:05:41,110
flow and have that pipeline where you

00:05:38,020 --> 00:05:43,450
get from data messy data to clean data

00:05:41,110 --> 00:05:45,250
and then having to actually train a

00:05:43,450 --> 00:05:47,800
model so Jupiter notebooks have changed

00:05:45,250 --> 00:05:49,090
a lot and before we get deeper into

00:05:47,800 --> 00:05:53,320
Jupiter notebooks I don't talk about

00:05:49,090 --> 00:05:54,970
lungs I'm assuming everyone has lungs so

00:05:53,320 --> 00:05:59,110
everyone knows what lungs are right show

00:05:54,970 --> 00:06:00,880
of hands great okay so like in the human

00:05:59,110 --> 00:06:02,919
body we have these things that help us

00:06:00,880 --> 00:06:04,720
breathe so you're literally alive

00:06:02,919 --> 00:06:08,919
because of your lungs but I won't talk

00:06:04,720 --> 00:06:12,190
about bad lungs so it's very hard to

00:06:08,919 --> 00:06:15,190
diagnose diseases that affect the lungs

00:06:12,190 --> 00:06:16,840
and the respiratory system as a whole so

00:06:15,190 --> 00:06:21,250
this was a huge problem

00:06:16,840 --> 00:06:24,699
I found a data set of about a hundred

00:06:21,250 --> 00:06:28,810
thousand chest x-rays and what we had

00:06:24,699 --> 00:06:32,409
was a massive label data set and a huge

00:06:28,810 --> 00:06:34,160
problem to diagnose lung diseases so

00:06:32,409 --> 00:06:37,500
what do we do

00:06:34,160 --> 00:06:38,820
machine learning right yeah because it's

00:06:37,500 --> 00:06:41,130
the cool thing to do but then this is

00:06:38,820 --> 00:06:41,700
the right thing to apply the cool thing

00:06:41,130 --> 00:06:45,900
to do

00:06:41,700 --> 00:06:56,370
yeah so notebooks are great and I'll

00:06:45,900 --> 00:07:02,940
show you how just give me a minute don't

00:06:56,370 --> 00:07:06,180
judge my folder names so what we had was

00:07:02,940 --> 00:07:08,580
a huge problem we had a massive data set

00:07:06,180 --> 00:07:11,790
that luckily was labeled and we wanted

00:07:08,580 --> 00:07:16,710
to be able to classify chest x-ray

00:07:11,790 --> 00:07:18,630
images and say what disease a patient is

00:07:16,710 --> 00:07:21,540
most likely suffering from with an

00:07:18,630 --> 00:07:23,400
amount of accuracy of course so I just

00:07:21,540 --> 00:07:26,130
browsed through quickly the notebook

00:07:23,400 --> 00:07:28,230
because we did a lot of visualization we

00:07:26,130 --> 00:07:34,290
had to import the we had to import the

00:07:28,230 --> 00:07:39,200
data and see sorry we had to import the

00:07:34,290 --> 00:07:42,330
data and see what actually what features

00:07:39,200 --> 00:07:45,450
yeah we had to see what features would

00:07:42,330 --> 00:07:49,260
help us classify and determine what type

00:07:45,450 --> 00:07:55,010
of diseases what type of condition was

00:07:49,260 --> 00:07:59,880
affecting someone so I'll just skip to a

00:07:55,010 --> 00:08:01,440
little bit lower yeah okay so you can

00:07:59,880 --> 00:08:02,910
see the titles and then we have to

00:08:01,440 --> 00:08:05,040
prepare the data it's like a whole

00:08:02,910 --> 00:08:08,880
process and Jupiter notebooks make this

00:08:05,040 --> 00:08:11,460
really easy and then this is something

00:08:08,880 --> 00:08:13,710
that everyone would have to do at a

00:08:11,460 --> 00:08:16,470
point so we have something called a

00:08:13,710 --> 00:08:21,180
model which we can test and then use to

00:08:16,470 --> 00:08:22,800
predict data that the that the algorithm

00:08:21,180 --> 00:08:25,260
hasn't seen before and then with some

00:08:22,800 --> 00:08:28,020
accuracy we can get a prediction so we

00:08:25,260 --> 00:08:32,190
put in an extra image into the model and

00:08:28,020 --> 00:08:37,800
it says this person probably has lung

00:08:32,190 --> 00:08:40,020
cancer or pneumonia and here all we're

00:08:37,800 --> 00:08:44,459
doing I want you to pay attention to

00:08:40,020 --> 00:08:46,770
this history so we do is fit a model and

00:08:44,459 --> 00:08:47,310
we used a concept called transfer

00:08:46,770 --> 00:08:51,120
learning

00:08:47,310 --> 00:08:52,920
it's a very interesting concept because

00:08:51,120 --> 00:08:54,480
I want all of you and it's a very

00:08:52,920 --> 00:08:56,879
integral part of this presentation

00:08:54,480 --> 00:08:59,370
because a big problem that we faced was

00:08:56,879 --> 00:09:05,339
compute power we have a hundred thousand

00:08:59,370 --> 00:09:08,399
images and I only have an i7 with barely

00:09:05,339 --> 00:09:11,069
a GPU and this is image data and to

00:09:08,399 --> 00:09:12,480
train that would take so much time but

00:09:11,069 --> 00:09:13,980
there are many tools lots of cloud

00:09:12,480 --> 00:09:17,639
services that give you machine learning

00:09:13,980 --> 00:09:20,309
platforms where you can put up put up a

00:09:17,639 --> 00:09:22,290
Linux kernel put in an install Python

00:09:20,309 --> 00:09:25,980
and train your model you have access to

00:09:22,290 --> 00:09:27,930
infinite GPUs infinite but yeah it makes

00:09:25,980 --> 00:09:29,459
everything much much easier so there are

00:09:27,930 --> 00:09:32,730
so many options I don't want to push

00:09:29,459 --> 00:09:34,740
anything to you but yeah once you do

00:09:32,730 --> 00:09:37,879
this you train your model everything

00:09:34,740 --> 00:09:40,860
that you can put in no matter what long

00:09:37,879 --> 00:09:42,689
chest x-ray you put into the model it

00:09:40,860 --> 00:09:46,199
will give you with a certain percent of

00:09:42,689 --> 00:09:48,149
accuracy an analysis and a prediction

00:09:46,199 --> 00:09:51,389
that says these are the most likely

00:09:48,149 --> 00:09:53,850
diseases that this person who took this

00:09:51,389 --> 00:09:58,350
x-ray is suffering from so what we do is

00:09:53,850 --> 00:10:06,180
we fit them we train the model and I

00:09:58,350 --> 00:10:09,509
want you to pay attention to this so

00:10:06,180 --> 00:10:14,730
with our data we're able to reach about

00:10:09,509 --> 00:10:17,370
91% accuracy which I must say is a bit

00:10:14,730 --> 00:10:21,870
skewed because a majority of the images

00:10:17,370 --> 00:10:25,439
that we that we took in our dataset were

00:10:21,870 --> 00:10:28,050
for a specific lung image and I think

00:10:25,439 --> 00:10:31,309
that was a constraint on the part of the

00:10:28,050 --> 00:10:35,160
data set and not on the algorithm

00:10:31,309 --> 00:10:37,009
nonetheless another thing I want

00:10:35,160 --> 00:10:39,779
everyone to pay attention to is this

00:10:37,009 --> 00:10:43,290
because this is practically what makes

00:10:39,779 --> 00:10:45,870
our web application so we have model we

00:10:43,290 --> 00:10:49,470
have this model safe weights and we name

00:10:45,870 --> 00:10:51,449
our model model h5 so this is the format

00:10:49,470 --> 00:10:54,209
that most machine learning models can

00:10:51,449 --> 00:10:56,939
get saved in into I was talking to

00:10:54,209 --> 00:10:57,810
someone earlier about a better way to do

00:10:56,939 --> 00:11:00,209
this

00:10:57,810 --> 00:11:02,069
and they're still coming up with I'm

00:11:00,209 --> 00:11:03,360
happy to say that they're still coming

00:11:02,069 --> 00:11:07,470
up with it so my talk isn't that

00:11:03,360 --> 00:11:09,689
outdated yeah so we saved the model and

00:11:07,470 --> 00:11:14,189
we can put this in our project directory

00:11:09,689 --> 00:11:19,110
and now I'll go back to my slides so

00:11:14,189 --> 00:11:22,649
yeah oh no one more thing actually so we

00:11:19,110 --> 00:11:26,689
saved the model but in our notebook

00:11:22,649 --> 00:11:28,410
Python environment how do we check or

00:11:26,689 --> 00:11:30,709
predict anything

00:11:28,410 --> 00:11:36,420
I think everyone's asking that right

00:11:30,709 --> 00:11:40,050
nope are we together okay how are you

00:11:36,420 --> 00:11:41,639
together okay yeah so I mean you're

00:11:40,050 --> 00:11:46,439
probably wondering how do we predict

00:11:41,639 --> 00:11:48,660
something how do we test it and so more

00:11:46,439 --> 00:11:53,370
training more training and we'll get

00:11:48,660 --> 00:11:55,939
there so what we want to do is test out

00:11:53,370 --> 00:11:55,939
our model

00:11:59,710 --> 00:12:08,920
yeah so we feed in some data here right

00:12:04,920 --> 00:12:12,010
this is what we're doing here and then

00:12:08,920 --> 00:12:13,330
we store the prediction so model dot

00:12:12,010 --> 00:12:16,899
predict is what we use to actually

00:12:13,330 --> 00:12:22,080
predict I'm sorry for my terrible naming

00:12:16,899 --> 00:12:25,600
conventions with my variables yeah so we

00:12:22,080 --> 00:12:27,310
get it we get an image here in this line

00:12:25,600 --> 00:12:30,760
image path we get the path to an image

00:12:27,310 --> 00:12:33,310
and we pre process it a bit we turn the

00:12:30,760 --> 00:12:34,959
image into an array so that computers

00:12:33,310 --> 00:12:37,480
can understand what's going on and then

00:12:34,959 --> 00:12:39,910
we use model that predict to actually

00:12:37,480 --> 00:12:40,620
make a prediction and we save that in

00:12:39,910 --> 00:12:42,880
the Preds

00:12:40,620 --> 00:12:44,560
variable and if we print the Preds

00:12:42,880 --> 00:12:47,200
variable this looks like this is what

00:12:44,560 --> 00:12:48,670
we'll get and this is not much value to

00:12:47,200 --> 00:12:53,560
anyone in this state

00:12:48,670 --> 00:12:56,560
I'll assume unless someone is that could

00:12:53,560 --> 00:12:59,050
add whatever but yeah this is of not

00:12:56,560 --> 00:13:01,360
much value and what we want to do is to

00:12:59,050 --> 00:13:03,209
be able to display this alongside the

00:13:01,360 --> 00:13:08,230
possible diseases because these are

00:13:03,209 --> 00:13:13,029
percentages of possible diseases and

00:13:08,230 --> 00:13:15,100
that's why I say yeah

00:13:13,029 --> 00:13:17,680
notebooks are great but how would this

00:13:15,100 --> 00:13:20,380
work in the real world you won't tell a

00:13:17,680 --> 00:13:23,230
doctor to go into his Jupiter notebook

00:13:20,380 --> 00:13:25,510
and start to type model dot predict X

00:13:23,230 --> 00:13:29,200
and start importing image files it just

00:13:25,510 --> 00:13:32,589
doesn't work right yeah so I'm here to

00:13:29,200 --> 00:13:35,770
show you how and summary this is just a

00:13:32,589 --> 00:13:39,910
talk about flask tensorflow and open CV

00:13:35,770 --> 00:13:42,220
so nothing complicated yeah I think

00:13:39,910 --> 00:13:43,810
already touched on the compute power it

00:13:42,220 --> 00:13:47,110
was also a huge problem that we faced

00:13:43,810 --> 00:13:49,959
coming to the coming to building this

00:13:47,110 --> 00:13:52,690
project so I want to think of a mind map

00:13:49,959 --> 00:13:54,430
in our heads we have a jupiter notebook

00:13:52,690 --> 00:13:58,720
and we have a model that's stored right

00:13:54,430 --> 00:14:02,170
and we can access this model with python

00:13:58,720 --> 00:14:05,079
but we want to be able to get an image

00:14:02,170 --> 00:14:07,779
from where it comes from and put that

00:14:05,079 --> 00:14:09,970
into and predict using our model and use

00:14:07,779 --> 00:14:11,000
that to predict I'd actually show what's

00:14:09,970 --> 00:14:13,760
going on

00:14:11,000 --> 00:14:18,470
to someone who wouldn't be as tech savvy

00:14:13,760 --> 00:14:21,260
as us so what I'll be going through here

00:14:18,470 --> 00:14:23,330
is a very basic architecture how to

00:14:21,260 --> 00:14:26,030
implement that I've talked a bit about

00:14:23,330 --> 00:14:33,440
that but I'll get deeper into it and how

00:14:26,030 --> 00:14:37,460
to deploy it cool cool all right yeah so

00:14:33,440 --> 00:14:38,690
of course instinctively you think okay

00:14:37,460 --> 00:14:42,080
let me have a client let me have a

00:14:38,690 --> 00:14:45,050
server write the client queries the

00:14:42,080 --> 00:14:48,200
server but we have a problem our models

00:14:45,050 --> 00:14:54,290
in an h5 file how do we do that

00:14:48,200 --> 00:15:01,330
cool so should I demo it do you think it

00:14:54,290 --> 00:15:06,610
works thanks for the confidence yeah so

00:15:01,330 --> 00:15:06,610
let's let's let's do it is this visible

00:15:07,960 --> 00:15:18,860
you can see this right okay

00:15:12,170 --> 00:15:20,810
so let's let's close that and then I'm

00:15:18,860 --> 00:15:27,740
using anaconda so what I want to do is

00:15:20,810 --> 00:15:29,950
exit the anaconda environment forgot how

00:15:27,740 --> 00:15:29,950
this

00:15:39,360 --> 00:15:42,079
okay

00:15:45,540 --> 00:15:57,459
should be so yeah like I mentioned

00:15:51,149 --> 00:15:59,100
client-server some yeah let's let's

00:15:57,459 --> 00:16:02,470
let's check that out

00:15:59,100 --> 00:16:04,660
so this I built using particle J s it's

00:16:02,470 --> 00:16:08,760
just something that looks bit flashy but

00:16:04,660 --> 00:16:12,190
nothing nothing fancy so I call this

00:16:08,760 --> 00:16:14,500
respiratory buddy yeah I feel good this

00:16:12,190 --> 00:16:20,079
is just yeah so diagnosed click

00:16:14,500 --> 00:16:24,880
diagnosed it's very minimal don't judge

00:16:20,079 --> 00:16:28,959
my design this is my client yeah so I

00:16:24,880 --> 00:16:35,829
have like an x-ray here that it will put

00:16:28,959 --> 00:16:43,480
into it and we press go good i press car

00:16:35,829 --> 00:16:45,310
i should zoom in a bit or zoom out okay

00:16:43,480 --> 00:16:46,690
so you didn't see the cool things

00:16:45,310 --> 00:16:51,730
happening in the background but there is

00:16:46,690 --> 00:16:57,850
the x-ray and these are the possible

00:16:51,730 --> 00:17:06,600
diseases that could be in that x-ray so

00:16:57,850 --> 00:17:11,370
it works yeah yeah except for the lungs

00:17:06,600 --> 00:17:11,370
but yeah that's not in our power anymore

00:17:12,600 --> 00:17:16,360
let me just close that go back to the

00:17:14,799 --> 00:17:19,049
presentation okay so we're done with the

00:17:16,360 --> 00:17:21,549
demo but I want to take you through how

00:17:19,049 --> 00:17:26,949
the application actually works can I do

00:17:21,549 --> 00:17:30,669
that yeah okay so let's see how

00:17:26,949 --> 00:17:36,850
everything works I use vs code I hope

00:17:30,669 --> 00:17:44,350
that's okay you've got no choice

00:17:36,850 --> 00:17:47,100
yeah no answer please so this is how I'm

00:17:44,350 --> 00:17:49,020
very clear is it should i zoom in more

00:17:47,100 --> 00:17:53,700
okay

00:17:49,020 --> 00:17:55,169
it's a bit messy my bad but we have the

00:17:53,700 --> 00:17:57,539
model here it's really important to have

00:17:55,169 --> 00:18:00,600
the model in like the source directory

00:17:57,539 --> 00:18:04,080
and we have the file code server which I

00:18:00,600 --> 00:18:09,020
ran to get the application going and we

00:18:04,080 --> 00:18:11,580
import a bunch of of things that help us

00:18:09,020 --> 00:18:12,630
do the work and we have a bunch of

00:18:11,580 --> 00:18:15,029
functions and I'll go through those

00:18:12,630 --> 00:18:19,409
functions but I want to go to the bottom

00:18:15,029 --> 00:18:23,909
of the file and show you the route that

00:18:19,409 --> 00:18:28,950
we used so what we have is this route

00:18:23,909 --> 00:18:41,059
classify URL so what this does is call a

00:18:28,950 --> 00:18:44,520
function up there oh yeah thank you

00:18:41,059 --> 00:18:48,690
cool ok so I want to highlight this

00:18:44,520 --> 00:18:53,399
function this function predict so what

00:18:48,690 --> 00:18:59,010
we're doing here is we're loading in the

00:18:53,399 --> 00:19:01,700
Model Ts code ok yeah what we're doing

00:18:59,010 --> 00:19:05,279
here is we're loading in the model and

00:19:01,700 --> 00:19:08,789
feeding in the image we get the image

00:19:05,279 --> 00:19:13,710
from the system because we are loaded

00:19:08,789 --> 00:19:17,880
right so here is the function to load

00:19:13,710 --> 00:19:19,590
the image from the URL and then turn it

00:19:17,880 --> 00:19:22,679
into an array so that the computer can

00:19:19,590 --> 00:19:24,120
understand what's going on and another

00:19:22,679 --> 00:19:27,659
important thing is pre-processing

00:19:24,120 --> 00:19:30,179
everything we have to crop the image so

00:19:27,659 --> 00:19:33,120
that it can fit the parameters of the

00:19:30,179 --> 00:19:35,490
model and we have to invert the colors

00:19:33,120 --> 00:19:39,299
so these are a few functions from OpenCV

00:19:35,490 --> 00:19:41,640
that do that and yeah we return an image

00:19:39,299 --> 00:19:44,330
which we pass here to turn into an array

00:19:41,640 --> 00:19:47,549
which we then pass into the predict

00:19:44,330 --> 00:19:49,020
function which predicts everything but

00:19:47,549 --> 00:19:51,240
I'm guessing you want to have a look at

00:19:49,020 --> 00:19:56,120
the HTML how many people here are

00:19:51,240 --> 00:19:57,990
comfortable with HTML great thank you

00:19:56,120 --> 00:20:02,840
yeah

00:19:57,990 --> 00:20:08,999
this should be it oh no that's the

00:20:02,840 --> 00:20:14,840
landing page okay so we have a few

00:20:08,999 --> 00:20:20,210
functions and where is this

00:20:14,840 --> 00:20:24,330
yeah people loading we have the button

00:20:20,210 --> 00:20:27,600
so basically what happens is you press

00:20:24,330 --> 00:20:29,429
the button and a function is called and

00:20:27,600 --> 00:20:31,799
that function then calls the predict

00:20:29,429 --> 00:20:35,179
function which predicts and then

00:20:31,799 --> 00:20:39,749
displays the information on the webpage

00:20:35,179 --> 00:20:42,809
so it's really just putting HTML and

00:20:39,749 --> 00:20:45,539
flash to work together to push data

00:20:42,809 --> 00:20:47,970
around both type both file types and

00:20:45,539 --> 00:20:49,889
then display that data that you used in

00:20:47,970 --> 00:20:55,110
the model and there is your

00:20:49,889 --> 00:20:56,940
classification I'm a bit disappointed

00:20:55,110 --> 00:20:58,980
because then I feel like it should have

00:20:56,940 --> 00:21:00,360
been a bit more complicated but then

00:20:58,980 --> 00:21:03,919
that's the beauty of it it's not that

00:21:00,360 --> 00:21:03,919
hard right yeah

00:21:06,110 --> 00:21:12,059
yeah it's not as complicated as many

00:21:08,610 --> 00:21:14,700
people make it seem but this being my

00:21:12,059 --> 00:21:16,769
very first pikin by the way I'm I've met

00:21:14,700 --> 00:21:20,399
a few they're like a ton of interesting

00:21:16,769 --> 00:21:21,869
people have amazing conversations but

00:21:20,399 --> 00:21:26,929
one thing I talked about that I had to

00:21:21,869 --> 00:21:26,929
add into my slides was the way the model

00:21:27,590 --> 00:21:35,369
imagine having to retrain the model and

00:21:30,990 --> 00:21:37,379
then feeding it back into the app so

00:21:35,369 --> 00:21:38,730
this project is on github at the end

00:21:37,379 --> 00:21:40,590
I'll give you a link if anyone wants to

00:21:38,730 --> 00:21:43,409
have a look and tweak it and contribute

00:21:40,590 --> 00:21:48,269
or fork a make your own thing I've had a

00:21:43,409 --> 00:21:51,450
friend who built an application to check

00:21:48,269 --> 00:21:54,749
skin conditions and that was pretty cool

00:21:51,450 --> 00:21:57,539
so you can play around with it and do do

00:21:54,749 --> 00:21:59,190
with it as you wish and yeah so imagine

00:21:57,539 --> 00:22:00,779
I want to retrain the model and put the

00:21:59,190 --> 00:22:04,070
model back into my application that

00:22:00,779 --> 00:22:06,419
means having to go back to the notebook

00:22:04,070 --> 00:22:07,040
training everything doing the analysis

00:22:06,419 --> 00:22:10,400
and

00:22:07,040 --> 00:22:12,980
in saving the model taking the model

00:22:10,400 --> 00:22:14,150
putting it in the source file then if

00:22:12,980 --> 00:22:16,430
you change the name you have changed the

00:22:14,150 --> 00:22:18,080
name in the file also and it's it's not

00:22:16,430 --> 00:22:23,300
the best it's not the best workflow

00:22:18,080 --> 00:22:26,000
right and the ideal scenario would be to

00:22:23,300 --> 00:22:28,610
have the model hosted and be able to

00:22:26,000 --> 00:22:32,890
query it and get the results and then

00:22:28,610 --> 00:22:36,020
display them in some sort of function

00:22:32,890 --> 00:22:39,740
you run you run that part as a function

00:22:36,020 --> 00:22:41,990
and that would be cool and if anyone at

00:22:39,740 --> 00:22:43,340
the moment can figure it out and find a

00:22:41,990 --> 00:22:45,860
better way of doing that I think I

00:22:43,340 --> 00:22:47,630
missed a talk about how to do something

00:22:45,860 --> 00:22:51,590
similar with Redis and that's amazing

00:22:47,630 --> 00:22:53,810
and that's something that at the moment

00:22:51,590 --> 00:22:57,170
is a problem with the project and could

00:22:53,810 --> 00:23:00,530
be done better and probably will be done

00:22:57,170 --> 00:23:03,910
looking at the crowd so that's basically

00:23:00,530 --> 00:23:07,610
how to create a disease classification

00:23:03,910 --> 00:23:10,670
web application another thing you all

00:23:07,610 --> 00:23:13,010
have to remember is this is very domain

00:23:10,670 --> 00:23:16,220
specific so this is lung diseases

00:23:13,010 --> 00:23:18,890
you'd have to tweak the the ipython

00:23:16,220 --> 00:23:21,110
notebook the jupiter notebook a lot to

00:23:18,890 --> 00:23:22,670
actually get it to work for data that

00:23:21,110 --> 00:23:25,820
you have so you can do this for any data

00:23:22,670 --> 00:23:29,630
that you have the image data be a text

00:23:25,820 --> 00:23:31,550
data I do it audio data it's fun to

00:23:29,630 --> 00:23:33,440
change but then this is my specific

00:23:31,550 --> 00:23:35,720
implementation for a problem I had and

00:23:33,440 --> 00:23:38,840
you can change this as you wish as I

00:23:35,720 --> 00:23:40,820
mentioned before and because we're

00:23:38,840 --> 00:23:45,950
embracing open source software you can

00:23:40,820 --> 00:23:49,310
go to that link and contribute I'll give

00:23:45,950 --> 00:23:55,640
you some time to take a picture or I

00:23:49,310 --> 00:23:57,640
don't know write it down yeah I'll have

00:23:55,640 --> 00:24:03,690
water

00:23:57,640 --> 00:24:07,690
although I'm not gonna oh that's fine

00:24:03,690 --> 00:24:09,220
yeah I'm done but I just wanted I just

00:24:07,690 --> 00:24:11,170
wanted to let you know that I really

00:24:09,220 --> 00:24:14,230
need feedback for how this talk went so

00:24:11,170 --> 00:24:16,840
just wow people are asking questions you

00:24:14,230 --> 00:24:18,160
can just take that down and yeah so you

00:24:16,840 --> 00:24:20,710
can go to that website I don't know if

00:24:18,160 --> 00:24:25,000
it's visible but if you want to tweet me

00:24:20,710 --> 00:24:27,100
Instagram me what else do I do yeah just

00:24:25,000 --> 00:24:56,920
that feel free Thanks

00:24:27,100 --> 00:24:58,540
thank you okay so when we ran our when

00:24:56,920 --> 00:25:02,650
we tried to check the accuracy it said

00:24:58,540 --> 00:25:06,730
91% but then I did mention that because

00:25:02,650 --> 00:25:09,910
our data set was a bit skewed it wasn't

00:25:06,730 --> 00:25:12,310
as good as we think it is so one thing

00:25:09,910 --> 00:25:14,830
that we wanted to take this to do to

00:25:12,310 --> 00:25:18,700
take the project ahead is actually go

00:25:14,830 --> 00:25:21,400
into hospitals and do some sort of pilot

00:25:18,700 --> 00:25:25,270
and see how something like this would

00:25:21,400 --> 00:25:27,670
fit in that scenario but with something

00:25:25,270 --> 00:25:29,410
as sensitive as chest x-rays it's not

00:25:27,670 --> 00:25:31,000
something anyone can just say okay hey

00:25:29,410 --> 00:25:35,680
come into our Hospital and do this but

00:25:31,000 --> 00:25:37,600
yeah we are trying to actually get a

00:25:35,680 --> 00:25:40,390
better data set so you can train a

00:25:37,600 --> 00:25:42,340
better model and then be more

00:25:40,390 --> 00:25:45,240
comfortable with the accuracy that we

00:25:42,340 --> 00:25:45,240
are told we got

00:25:53,060 --> 00:25:59,940

YouTube URL: https://www.youtube.com/watch?v=BSVi9pixCPo


