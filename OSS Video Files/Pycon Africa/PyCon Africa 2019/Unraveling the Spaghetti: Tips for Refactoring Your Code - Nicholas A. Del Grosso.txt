Title: Unraveling the Spaghetti: Tips for Refactoring Your Code - Nicholas A. Del Grosso
Publication date: 2019-11-20
Playlist: PyCon Africa 2019
Description: 
	Working with disorganized code, especially someone else's legacy code, can be overwhelming sometimes!  In this talk, Nick will teach refactoring practices for legacy code--how to recognize common design problems that lead to untestable functions, side effects, and spaghetti code, and then the process of methodically improving that code base.
Captions: 
	00:00:03,080 --> 00:00:11,880
thank you very much so I really love

00:00:07,770 --> 00:00:13,380
these AC xkcd comics so much showing

00:00:11,880 --> 00:00:14,910
someone else their code and they're

00:00:13,380 --> 00:00:16,830
saying it's a little messy and a little

00:00:14,910 --> 00:00:18,960
bit anxious my person says it's no

00:00:16,830 --> 00:00:23,570
problem it's no problem I can code and

00:00:18,960 --> 00:00:26,279
they sit down and the response is oh I

00:00:23,570 --> 00:00:29,340
don't understand this this looks a

00:00:26,279 --> 00:00:31,650
little bit messy all of us have had this

00:00:29,340 --> 00:00:34,530
experience where we wrote something that

00:00:31,650 --> 00:00:35,730
we were proud of we created it and we

00:00:34,530 --> 00:00:37,320
knew there was something a little bit

00:00:35,730 --> 00:00:39,149
off but when we showed it to someone

00:00:37,320 --> 00:00:40,530
else their response wasn't the same as

00:00:39,149 --> 00:00:42,809
we liked who here has had this

00:00:40,530 --> 00:00:46,860
experience before it's happened to all

00:00:42,809 --> 00:00:49,410
of us right part of this is because when

00:00:46,860 --> 00:00:53,219
we create something the thing we see

00:00:49,410 --> 00:00:55,890
isn't all that's there half of it is

00:00:53,219 --> 00:00:57,120
living inside our own heads and of

00:00:55,890 --> 00:01:00,140
course the person we're showing it to

00:00:57,120 --> 00:01:02,250
can't see what's inside our heads

00:01:00,140 --> 00:01:06,119
sometimes the person you're showing it

00:01:02,250 --> 00:01:07,530
to is yourself a week later and you've

00:01:06,119 --> 00:01:12,150
forgotten everything that was in your

00:01:07,530 --> 00:01:15,000
head I love this quote about programming

00:01:12,150 --> 00:01:17,400
the programmer works slightly removed

00:01:15,000 --> 00:01:19,770
from pure thought stuff like a poet he

00:01:17,400 --> 00:01:22,070
builds his castles in the air from air

00:01:19,770 --> 00:01:25,380
creating by exertion of the imagination

00:01:22,070 --> 00:01:28,500
few media of creation are so flexible so

00:01:25,380 --> 00:01:31,170
easy to polish and to rework so readily

00:01:28,500 --> 00:01:35,909
capable of realizing grand conceptual

00:01:31,170 --> 00:01:38,729
structures a means that we can create so

00:01:35,909 --> 00:01:43,049
many beautiful things but they all start

00:01:38,729 --> 00:01:45,600
here but what often happens is something

00:01:43,049 --> 00:01:47,070
called spaghetti code spaghetti code is

00:01:45,600 --> 00:01:50,009
a loose term it's come to mean many

00:01:47,070 --> 00:01:52,259
things basically code that is difficult

00:01:50,009 --> 00:01:55,649
to understand because it seems overly

00:01:52,259 --> 00:02:01,350
complex or obtuse simple examples are a

00:01:55,649 --> 00:02:03,600
script in this day a script that first

00:02:01,350 --> 00:02:05,310
seems simple I mean all scripts run from

00:02:03,600 --> 00:02:06,920
top to bottom there's no there's no

00:02:05,310 --> 00:02:09,140
complexity there

00:02:06,920 --> 00:02:12,500
good half but because we can have go

00:02:09,140 --> 00:02:14,060
twos or loops or whatever it's possible

00:02:12,500 --> 00:02:15,950
to read a script and not half and in

00:02:14,060 --> 00:02:18,200
your eye and not go from top to bottom

00:02:15,950 --> 00:02:20,270
like we're reading a paper it may go up

00:02:18,200 --> 00:02:21,739
and down and up and down and you have

00:02:20,270 --> 00:02:23,569
this experience where you realize the

00:02:21,739 --> 00:02:25,310
variables created here and its hues down

00:02:23,569 --> 00:02:26,930
here but it uses other variable and goes

00:02:25,310 --> 00:02:28,730
up and down and up and down until your

00:02:26,930 --> 00:02:30,440
eyes are getting a little tired you know

00:02:28,730 --> 00:02:32,930
just from looking at it if you rearrange

00:02:30,440 --> 00:02:35,000
it and just something linear you can

00:02:32,930 --> 00:02:36,920
have the exact same logic but the whole

00:02:35,000 --> 00:02:40,100
thing can feel clear like a progression

00:02:36,920 --> 00:02:43,780
progressive idea going from setting up a

00:02:40,100 --> 00:02:46,690
world to outputting sometimes old

00:02:43,780 --> 00:02:49,519
calling functions can have spaghetti

00:02:46,690 --> 00:02:53,930
kind of scenarios here's two different

00:02:49,519 --> 00:02:55,459
kinds of models this one right here and

00:02:53,930 --> 00:02:56,750
this linear one here where you have a

00:02:55,459 --> 00:02:59,030
function that calls a function that

00:02:56,750 --> 00:03:00,590
calls a function where's your hand if

00:02:59,030 --> 00:03:03,730
you think the one on this side looks

00:03:00,590 --> 00:03:07,480
more spaghetti and than the other one

00:03:03,730 --> 00:03:07,480
what about the other side

00:03:09,980 --> 00:03:15,230
the left this this side looks a lot more

00:03:12,860 --> 00:03:18,739
simple one calls another calls another

00:03:15,230 --> 00:03:21,890
but this one often ends up being the

00:03:18,739 --> 00:03:23,660
most maintainable of the two that's

00:03:21,890 --> 00:03:25,069
because whenever you're reading code you

00:03:23,660 --> 00:03:28,400
want to understand what's happening

00:03:25,069 --> 00:03:30,200
underneath and these have fewer chains

00:03:28,400 --> 00:03:32,360
to find out what's happening Ernie it

00:03:30,200 --> 00:03:33,140
also means that if you change some

00:03:32,360 --> 00:03:35,510
function

00:03:33,140 --> 00:03:38,900
it affects fewer parts of your code

00:03:35,510 --> 00:03:42,800
we're here the code at the bottom is so

00:03:38,900 --> 00:03:44,630
stable because you know as the writer if

00:03:42,800 --> 00:03:46,069
you change one thing about this has a

00:03:44,630 --> 00:03:49,160
potential to affect everything in your

00:03:46,069 --> 00:03:54,910
code this ends up being the more stable

00:03:49,160 --> 00:03:57,830
structure what about this here we have

00:03:54,910 --> 00:04:00,890
some objects that call each other here's

00:03:57,830 --> 00:04:03,110
only four so it's pretty short here's

00:04:00,890 --> 00:04:05,209
another one it's much longer chain but

00:04:03,110 --> 00:04:07,280
we have arrows that point up and down we

00:04:05,209 --> 00:04:10,250
have things that call each other and we

00:04:07,280 --> 00:04:12,500
have this other thing over here raise

00:04:10,250 --> 00:04:15,070
your hand if you think this one is the

00:04:12,500 --> 00:04:19,669
easiest to understand of the other three

00:04:15,070 --> 00:04:20,540
all right what about this one here what

00:04:19,669 --> 00:04:22,120
up this one here

00:04:20,540 --> 00:04:24,800
[Music]

00:04:22,120 --> 00:04:26,750
series okay now you've seen if it's wide

00:04:24,800 --> 00:04:29,150
then it's easier to understand but did

00:04:26,750 --> 00:04:31,039
you know that this one here and this one

00:04:29,150 --> 00:04:33,380
here are exactly the same

00:04:31,039 --> 00:04:37,430
it's just rearranged so that all of them

00:04:33,380 --> 00:04:39,110
point downwards there's a trick in

00:04:37,430 --> 00:04:41,780
object-oriented programming called a

00:04:39,110 --> 00:04:45,140
dependency inversion through abstract

00:04:41,780 --> 00:04:46,970
methods that allows you to reverse the

00:04:45,140 --> 00:04:50,000
direction of line so that way your stack

00:04:46,970 --> 00:04:52,160
of code well can call top to bottom can

00:04:50,000 --> 00:04:53,570
actually be maintainable that's not

00:04:52,160 --> 00:04:55,039
really what we're gonna be talking about

00:04:53,570 --> 00:04:56,900
because what ends up happening is not

00:04:55,039 --> 00:04:59,240
something that's this nice stable

00:04:56,900 --> 00:05:00,560
structure eventually whenever someone

00:04:59,240 --> 00:05:02,000
doesn't understand it they find

00:05:00,560 --> 00:05:03,650
something they do understand and they

00:05:02,000 --> 00:05:05,660
add something they add something until

00:05:03,650 --> 00:05:07,820
it becomes what's known as the big ball

00:05:05,660 --> 00:05:08,440
of mud and once you have the big ball of

00:05:07,820 --> 00:05:10,060
mud

00:05:08,440 --> 00:05:12,280
never lose the big ball of mud because

00:05:10,060 --> 00:05:13,900
someone needs to add and add in that

00:05:12,280 --> 00:05:16,060
until finally they throw it away because

00:05:13,900 --> 00:05:17,530
it's no longer useful we have to find

00:05:16,060 --> 00:05:20,200
ways to get around the big ball of mud

00:05:17,530 --> 00:05:23,370
in order to understand been doing that

00:05:20,200 --> 00:05:26,260
we need to understand what we're writing

00:05:23,370 --> 00:05:28,900
this mostly comes from that first

00:05:26,260 --> 00:05:31,390
feeling of pressure that wanting to

00:05:28,900 --> 00:05:35,110
continue to create when you write code

00:05:31,390 --> 00:05:38,050
just so it works you end up creating

00:05:35,110 --> 00:05:39,730
structures that become harder to

00:05:38,050 --> 00:05:41,590
understand that means harder to

00:05:39,730 --> 00:05:45,790
communicate someone else and harder to

00:05:41,590 --> 00:05:48,700
allow them to extend Robert Martin who

00:05:45,790 --> 00:05:50,860
gives these great talks on clean coding

00:05:48,700 --> 00:05:53,740
and clean architecture and and just good

00:05:50,860 --> 00:05:57,640
software practices talks a lot about how

00:05:53,740 --> 00:06:00,250
most of our time is spent reading code

00:05:57,640 --> 00:06:02,140
rather than writing it readability

00:06:00,250 --> 00:06:04,120
counts as a big model of the Python

00:06:02,140 --> 00:06:06,190
ecosystem and a lot of the Python

00:06:04,120 --> 00:06:07,510
language the decisions about the Python

00:06:06,190 --> 00:06:10,090
language were about what would make

00:06:07,510 --> 00:06:11,920
something more readable as a community

00:06:10,090 --> 00:06:14,050
then we have a good head start when it

00:06:11,920 --> 00:06:15,760
comes to creating readable code because

00:06:14,050 --> 00:06:18,760
we've already decided that we prize that

00:06:15,760 --> 00:06:20,650
let's see what we can do in a very small

00:06:18,760 --> 00:06:23,500
example in order to produce something

00:06:20,650 --> 00:06:24,520
that is more readable in this case we're

00:06:23,500 --> 00:06:26,890
gonna have this hypothetical example

00:06:24,520 --> 00:06:27,850
where I've written this code and I'm

00:06:26,890 --> 00:06:30,370
giving it to you

00:06:27,850 --> 00:06:34,930
I'm person saying hey look at this thing

00:06:30,370 --> 00:06:38,020
I made what do you think it's simple

00:06:34,930 --> 00:06:40,419
it's simple code and it doesn't use any

00:06:38,020 --> 00:06:43,060
complex Python structures it just

00:06:40,419 --> 00:06:45,910
assigns variables it just uses a few

00:06:43,060 --> 00:06:47,830
operators down here you've looked at it

00:06:45,910 --> 00:06:50,910
now for almost a minute raise your hand

00:06:47,830 --> 00:06:50,910
if you understand what this code does

00:06:51,360 --> 00:06:56,050
good a lot of people understand what it

00:06:53,830 --> 00:07:00,040
does raise your hand if you understand

00:06:56,050 --> 00:07:01,090
why I wrote it you have no idea of

00:07:00,040 --> 00:07:04,080
course not

00:07:01,090 --> 00:07:08,050
so where's the value in this code

00:07:04,080 --> 00:07:09,730
there's none it does do exactly what I

00:07:08,050 --> 00:07:11,940
wanted to do but because we don't know

00:07:09,730 --> 00:07:14,400
why what it's good for what can

00:07:11,940 --> 00:07:15,990
by two and other problems this code ends

00:07:14,400 --> 00:07:19,200
up having very little value and will

00:07:15,990 --> 00:07:21,060
eventually be done now you may say Nick

00:07:19,200 --> 00:07:23,610
well if you just written some comments

00:07:21,060 --> 00:07:26,850
jeez I don't leave I barely even have a

00:07:23,610 --> 00:07:33,450
file name then I could understand the

00:07:26,850 --> 00:07:34,680
rest so I'll add comments that's usually

00:07:33,450 --> 00:07:36,030
the first thing people do when they

00:07:34,680 --> 00:07:38,190
wouldn't explain code to someone else

00:07:36,030 --> 00:07:39,990
they don't want to break the code so

00:07:38,190 --> 00:07:42,420
they'll add things that Python won't see

00:07:39,990 --> 00:07:45,810
in order to explain to whoever might be

00:07:42,420 --> 00:07:48,060
reading it what's happening now who has

00:07:45,810 --> 00:07:52,080
a better idea of why this code was

00:07:48,060 --> 00:07:54,450
written a little bit better right now we

00:07:52,080 --> 00:07:58,940
have some some some things that relate

00:07:54,450 --> 00:08:04,470
to the world red green blue readiness

00:07:58,940 --> 00:08:06,540
readiness we know we're trying to get at

00:08:04,470 --> 00:08:09,300
the end the mean brightness of some

00:08:06,540 --> 00:08:11,490
pixels so that's pretty useful but if so

00:08:09,300 --> 00:08:13,200
if you were to be asked to extend it or

00:08:11,490 --> 00:08:16,980
in order to to to apply it to something

00:08:13,200 --> 00:08:18,570
else but readiness thing that thing that

00:08:16,980 --> 00:08:21,060
variable that if you look at closely

00:08:18,570 --> 00:08:22,860
never gets used anywhere else ends up

00:08:21,060 --> 00:08:24,120
interfering with your ability to

00:08:22,860 --> 00:08:26,490
understand it or even be comfortable

00:08:24,120 --> 00:08:29,070
applying it to other situations is this

00:08:26,490 --> 00:08:31,260
a bug the whole thing seems to work but

00:08:29,070 --> 00:08:36,000
someone wrote this code was there a

00:08:31,260 --> 00:08:37,169
purpose for it at this point if you if I

00:08:36,000 --> 00:08:38,910
were trying to give you this code you

00:08:37,169 --> 00:08:41,370
probably say well maybe you should clean

00:08:38,910 --> 00:08:42,990
it up before you give it to me all right

00:08:41,370 --> 00:08:47,190
we're gonna go through now the some

00:08:42,990 --> 00:08:49,470
processes of safely refactoring code so

00:08:47,190 --> 00:08:51,840
that way it slowly gets more information

00:08:49,470 --> 00:08:55,080
in it it slowly becomes more flexible

00:08:51,840 --> 00:09:00,090
and more modular and as a result gains

00:08:55,080 --> 00:09:02,990
more value everyone would think before

00:09:00,090 --> 00:09:02,990
we start though

00:09:03,140 --> 00:09:08,160
we're gonna change code changed code

00:09:06,120 --> 00:09:09,779
means breaking code as soon as you touch

00:09:08,160 --> 00:09:11,370
the keyboard the very first time the

00:09:09,779 --> 00:09:13,500
whole thing's gonna fall apart so we

00:09:11,370 --> 00:09:15,540
need some some tools that will allow us

00:09:13,500 --> 00:09:17,390
to make these changes safely we never

00:09:15,540 --> 00:09:19,980
want to be in situation and as

00:09:17,390 --> 00:09:22,560
creationists a creationist is create

00:09:19,980 --> 00:09:25,050
creating people's creative people where

00:09:22,560 --> 00:09:26,310
we don't want to continue making things

00:09:25,050 --> 00:09:28,140
just because we're afraid of what we

00:09:26,310 --> 00:09:30,029
might lose so we're gonna bring two

00:09:28,140 --> 00:09:32,910
tools with us the first one being a

00:09:30,029 --> 00:09:34,589
version control system I get at the very

00:09:32,910 --> 00:09:37,950
least we want to be able to save our

00:09:34,589 --> 00:09:40,500
code and say this is where it was while

00:09:37,950 --> 00:09:43,410
it works so I can always do press the

00:09:40,500 --> 00:09:44,760
big undo button and go back the good now

00:09:43,410 --> 00:09:46,589
you may say well I can just make a copy

00:09:44,760 --> 00:09:48,600
of my code that way I've got my good

00:09:46,589 --> 00:09:49,920
code and I've got my new code but you're

00:09:48,600 --> 00:09:51,510
gonna be you're gonna want to make new

00:09:49,920 --> 00:09:53,640
changes all the time but you won't have

00:09:51,510 --> 00:09:55,110
Toffees lying around this way you can

00:09:53,640 --> 00:09:56,990
always move forward and you can always

00:09:55,110 --> 00:10:00,600
go back as many steps as you like a

00:09:56,990 --> 00:10:02,910
second is a test runner you if you know

00:10:00,600 --> 00:10:04,740
one thing that the code should do when

00:10:02,910 --> 00:10:06,900
you say whoa look if it does this that

00:10:04,740 --> 00:10:09,540
I'm still happy then you can write one

00:10:06,900 --> 00:10:11,220
test that's that just runs and checks to

00:10:09,540 --> 00:10:12,690
see if it still does that thing that

00:10:11,220 --> 00:10:14,820
will give you some confidence that at

00:10:12,690 --> 00:10:17,330
least the code runs to the end if you

00:10:14,820 --> 00:10:19,680
can write more tests than all the better

00:10:17,330 --> 00:10:21,060
let's assume we've done that we've saved

00:10:19,680 --> 00:10:22,440
the code we're willing to make some

00:10:21,060 --> 00:10:24,600
change and we want to make sure that

00:10:22,440 --> 00:10:25,740
this result never changes I'm just gonna

00:10:24,600 --> 00:10:29,190
assume that it's gonna do that this

00:10:25,740 --> 00:10:33,870
whole time let's look at this this bar

00:10:29,190 --> 00:10:35,670
right here how do we refactor code for

00:10:33,870 --> 00:10:39,360
the variables that are created but never

00:10:35,670 --> 00:10:42,990
used it's very simple we call it dead

00:10:39,360 --> 00:10:45,060
code code that's never used by your

00:10:42,990 --> 00:10:47,130
program has no value because it doesn't

00:10:45,060 --> 00:10:49,350
actually contribute to the final

00:10:47,130 --> 00:10:52,230
behavior of the program it's a zombie

00:10:49,350 --> 00:10:54,270
it's code that starts out looking like

00:10:52,230 --> 00:10:57,360
it might have value but it slowly eats

00:10:54,270 --> 00:10:58,650
away as it starts to to to to distract

00:10:57,360 --> 00:11:01,529
you from the actual purpose your code

00:10:58,650 --> 00:11:02,310
how do you refactor dead code you kill

00:11:01,529 --> 00:11:04,720
it

00:11:02,310 --> 00:11:08,410
look at that isn't already cleaner it's

00:11:04,720 --> 00:11:11,260
beautiful but what about this part right

00:11:08,410 --> 00:11:12,670
here they may say you look this thick

00:11:11,260 --> 00:11:14,230
these comments are not code in fact

00:11:12,670 --> 00:11:16,660
they're helping me understand it but in

00:11:14,230 --> 00:11:18,700
the extreme program this whole movement

00:11:16,660 --> 00:11:20,970
called extreme programming they they

00:11:18,700 --> 00:11:23,320
stipulated that comments are actually

00:11:20,970 --> 00:11:24,910
contributing to code there and they're

00:11:23,320 --> 00:11:27,610
another type of dead code because when

00:11:24,910 --> 00:11:29,350
you change code that's that's run you

00:11:27,610 --> 00:11:32,260
rarely change the code that's not right

00:11:29,350 --> 00:11:33,940
if I were to change this from being

00:11:32,260 --> 00:11:35,440
representing red to blue I would

00:11:33,940 --> 00:11:37,180
probably not touch the comment I'd

00:11:35,440 --> 00:11:41,890
forget it because it's just it's just

00:11:37,180 --> 00:11:44,710
not my highest priority comments at best

00:11:41,890 --> 00:11:46,690
are a little helpful at worst are

00:11:44,710 --> 00:11:48,310
actually wrong and make it harder for

00:11:46,690 --> 00:11:50,080
you to understand the code we should get

00:11:48,310 --> 00:11:52,060
rid of these comments and make the goal

00:11:50,080 --> 00:11:53,980
to not have comments comments are a

00:11:52,060 --> 00:11:56,740
symptom better code is not easy

00:11:53,980 --> 00:11:58,360
understand that's why we wrote it but

00:11:56,740 --> 00:11:59,650
now the word since we're fixing our code

00:11:58,360 --> 00:12:01,780
making more an easy understand the

00:11:59,650 --> 00:12:04,630
comments have to go the symptom has to

00:12:01,780 --> 00:12:07,630
go so we get rid of it

00:12:04,630 --> 00:12:09,070
we make clear variable names when you

00:12:07,630 --> 00:12:10,270
have a line comment it's telling you

00:12:09,070 --> 00:12:12,970
that the variable should be called that

00:12:10,270 --> 00:12:19,090
thing look at that he's not easier to

00:12:12,970 --> 00:12:20,830
understand next problem ever in order to

00:12:19,090 --> 00:12:23,080
understand the flow this program I have

00:12:20,830 --> 00:12:25,360
to jump my eyes back and forth I have

00:12:23,080 --> 00:12:26,830
read up here and to use down here then I

00:12:25,360 --> 00:12:29,680
see there's green oh it's used up here

00:12:26,830 --> 00:12:31,150
back and forth and back and forth one

00:12:29,680 --> 00:12:33,010
way that you can simplify the flow of

00:12:31,150 --> 00:12:36,040
your programs is to is to make sure that

00:12:33,010 --> 00:12:40,150
wherever a variable is being used where

00:12:36,040 --> 00:12:41,830
it was created is close close by to move

00:12:40,150 --> 00:12:43,720
the distance between them as close as

00:12:41,830 --> 00:12:46,510
possible this is where spaghetti cook

00:12:43,720 --> 00:12:49,330
spaghetti code starts coming in so now

00:12:46,510 --> 00:12:51,850
we cluster this isn't this easier it's

00:12:49,330 --> 00:12:53,470
the whole thing goes top to bottom red

00:12:51,850 --> 00:12:55,270
green and blue or created right where

00:12:53,470 --> 00:12:57,900
they're actually used and we have an

00:12:55,270 --> 00:13:01,740
idea of these steps but the whole thing

00:12:57,900 --> 00:13:03,330
going through but look we still have

00:13:01,740 --> 00:13:05,480
some dead code some comments floating

00:13:03,330 --> 00:13:08,100
around when you have blocks we have a

00:13:05,480 --> 00:13:10,500
comment that's describing a block of

00:13:08,100 --> 00:13:12,570
code you can get rid of that comment

00:13:10,500 --> 00:13:15,090
what you're saying is that this chunk of

00:13:12,570 --> 00:13:16,950
code does one thing well we've got a

00:13:15,090 --> 00:13:22,290
name for that in Python it's called a

00:13:16,950 --> 00:13:23,970
function so let's kill it the very

00:13:22,290 --> 00:13:27,870
simplest kind of function that you can

00:13:23,970 --> 00:13:30,120
make is something a macro it takes no

00:13:27,870 --> 00:13:32,400
inputs it just returns an output you

00:13:30,120 --> 00:13:35,940
just put a big wall around that code and

00:13:32,400 --> 00:13:38,430
say this thing outputs this one thing we

00:13:35,940 --> 00:13:40,470
walk it off and now we output this one

00:13:38,430 --> 00:13:42,000
thing now this may seem a little bit

00:13:40,470 --> 00:13:44,070
more complex already sometimes it gets

00:13:42,000 --> 00:13:45,690
more complex for a with a little bit

00:13:44,070 --> 00:13:47,250
while you're refactoring but the good

00:13:45,690 --> 00:13:49,290
thing about it is that there are only

00:13:47,250 --> 00:13:51,450
three variables now that this this

00:13:49,290 --> 00:13:55,230
program depends on no longer twelve

00:13:51,450 --> 00:13:56,610
variables like before but we can

00:13:55,230 --> 00:13:58,530
continue refactoring because now we've

00:13:56,610 --> 00:14:01,380
got a spaghetti code problem now we have

00:13:58,530 --> 00:14:05,010
to jump jump down let's let's just kind

00:14:01,380 --> 00:14:06,900
of cluster it together now our whole

00:14:05,010 --> 00:14:08,430
script is just these three lines of

00:14:06,900 --> 00:14:10,050
course it's using functions up here but

00:14:08,430 --> 00:14:16,200
each of those can be understand on their

00:14:10,050 --> 00:14:20,160
own but there's something that's not

00:14:16,200 --> 00:14:22,320
labeled here hard-coded values there are

00:14:20,160 --> 00:14:24,840
three types of hard-coded values in code

00:14:22,320 --> 00:14:26,340
they all represent things with them

00:14:24,840 --> 00:14:30,770
because they represent different

00:14:26,340 --> 00:14:34,800
concepts these numbers 3 3 and to

00:14:30,770 --> 00:14:38,130
represent domain knowledge in the person

00:14:34,800 --> 00:14:40,410
writing it we read this more carefully

00:14:38,130 --> 00:14:42,690
we'll see that before we use the 3 were

00:14:40,410 --> 00:14:44,520
summing three numbers and down here

00:14:42,690 --> 00:14:48,060
three numbers and down here two numbers

00:14:44,520 --> 00:14:51,890
the numbers 3 3 to represent the concept

00:14:48,060 --> 00:14:54,450
of an average we can make our code more

00:14:51,890 --> 00:14:56,610
understandable if we replace these

00:14:54,450 --> 00:14:58,350
values with the concept that they're

00:14:56,610 --> 00:15:01,610
supposed to represent and we have a

00:14:58,350 --> 00:15:05,540
function built into Python for that

00:15:01,610 --> 00:15:08,500
this contributes to ravioli code there's

00:15:05,540 --> 00:15:12,350
all kinds of pasta code out there

00:15:08,500 --> 00:15:14,240
ravioli code is code that is

00:15:12,350 --> 00:15:16,460
understandable when you look at pieces

00:15:14,240 --> 00:15:18,500
but you can't but don't come together in

00:15:16,460 --> 00:15:20,630
a clear hole all right

00:15:18,500 --> 00:15:22,280
these numbers are giving in the wave on

00:15:20,630 --> 00:15:26,270
to us understanding the whole process

00:15:22,280 --> 00:15:27,740
the whole concept underlying to code so

00:15:26,270 --> 00:15:31,190
let's take the mean function from the

00:15:27,740 --> 00:15:35,150
statistics library and now we've gotten

00:15:31,190 --> 00:15:36,620
rid of our hard-coded values we're

00:15:35,150 --> 00:15:37,970
starting to see that these two functions

00:15:36,620 --> 00:15:39,380
are very similar to each other we

00:15:37,970 --> 00:15:43,190
probably knew that already because it

00:15:39,380 --> 00:15:44,450
has if one has a two next to it but we

00:15:43,190 --> 00:15:46,220
need to get rid of more hard-coded

00:15:44,450 --> 00:15:50,150
values before they become exactly

00:15:46,220 --> 00:15:51,920
similar these this starts to represent

00:15:50,150 --> 00:15:56,570
one of the other two kinds of hard-coded

00:15:51,920 --> 00:16:00,980
values either an expected use case or

00:15:56,570 --> 00:16:03,800
data expected use cases mean that that's

00:16:00,980 --> 00:16:05,690
a value that is often used you that the

00:16:03,800 --> 00:16:07,520
person creating and will say look I know

00:16:05,690 --> 00:16:10,420
that if you use this function you're

00:16:07,520 --> 00:16:12,710
probably gonna have this value all right

00:16:10,420 --> 00:16:14,540
that happens all the times plotting

00:16:12,710 --> 00:16:19,520
libraries have tons of inputs and most

00:16:14,540 --> 00:16:22,070
of them are set as default values but

00:16:19,520 --> 00:16:25,400
this this isn't like that this is data

00:16:22,070 --> 00:16:27,800
these are actual pixel values pixel

00:16:25,400 --> 00:16:31,130
values don't belong here pixel volley

00:16:27,800 --> 00:16:33,320
values belong in the function in the

00:16:31,130 --> 00:16:34,500
code that calls the function someone

00:16:33,320 --> 00:16:36,840
gives you these

00:16:34,500 --> 00:16:39,570
the function doesn't suggest these

00:16:36,840 --> 00:16:46,190
values to the user so we move them down

00:16:39,570 --> 00:16:49,080
here and now our code is a lot simpler

00:16:46,190 --> 00:16:50,940
and we have two functions that are

00:16:49,080 --> 00:16:53,310
exactly the same that's when you know

00:16:50,940 --> 00:16:55,080
that you're safe to kill the the

00:16:53,310 --> 00:16:59,040
duplicated function your code is

00:16:55,080 --> 00:17:02,040
suddenly not dry dry sense for a dupe

00:16:59,040 --> 00:17:03,870
don't repeat yourself it's an acronym

00:17:02,040 --> 00:17:05,490
that people say often now you have to be

00:17:03,870 --> 00:17:06,780
careful around dry because sometimes

00:17:05,490 --> 00:17:08,040
when you delete something you delete

00:17:06,780 --> 00:17:10,110
something that looks similar on the

00:17:08,040 --> 00:17:11,910
surface but naturality is being repeated

00:17:10,110 --> 00:17:13,320
for a different reason if it's for a

00:17:11,910 --> 00:17:15,300
different reason you don't want to

00:17:13,320 --> 00:17:17,070
delete it because it's different in this

00:17:15,300 --> 00:17:19,800
case they're exactly the same we can

00:17:17,070 --> 00:17:21,630
kill that and now our code is a lot

00:17:19,800 --> 00:17:24,769
simpler isn't that nice

00:17:21,630 --> 00:17:24,769
[Music]

00:17:30,400 --> 00:17:38,919
and you're coughing now cuz you think

00:17:32,350 --> 00:17:40,779
I'm done but look we can go keep on

00:17:38,919 --> 00:17:42,940
going forever I'm gonna go a little bit

00:17:40,779 --> 00:17:45,630
further but this whole thing can can be

00:17:42,940 --> 00:17:49,330
broken down into just these lines okay

00:17:45,630 --> 00:17:52,029
if we do that though if the whole thing

00:17:49,330 --> 00:17:54,460
becomes reduced and people get obsessed

00:17:52,029 --> 00:17:56,559
with reducing code and deleting lines we

00:17:54,460 --> 00:17:58,179
start to lose the thing that with that

00:17:56,559 --> 00:18:02,409
that causes to refactor in the first

00:17:58,179 --> 00:18:03,730
place the understandability I love this

00:18:02,409 --> 00:18:05,470
phrase and it's used a lot in the

00:18:03,730 --> 00:18:08,860
refactoring community or and even like

00:18:05,470 --> 00:18:10,539
style guide discussions let's see what

00:18:08,860 --> 00:18:12,340
we can do to continue to refactor it

00:18:10,539 --> 00:18:16,440
continue to reduce replication while at

00:18:12,340 --> 00:18:19,779
the same time increasing the the

00:18:16,440 --> 00:18:22,299
communication in the code a lot of that

00:18:19,779 --> 00:18:23,860
comes here look we're calling the same

00:18:22,299 --> 00:18:25,659
function twice that means we're really

00:18:23,860 --> 00:18:28,000
just trying to do one thing when two

00:18:25,659 --> 00:18:28,960
pieces of data let's just do one thing

00:18:28,000 --> 00:18:33,120
with two pieces of data

00:18:28,960 --> 00:18:36,100
by pulling the data out of the functions

00:18:33,120 --> 00:18:38,620
we've got more variables now but look

00:18:36,100 --> 00:18:40,210
I'm first I'm saying this is a set of

00:18:38,620 --> 00:18:42,789
data that has to be created at the same

00:18:40,210 --> 00:18:44,590
time to couple unpacking is a really

00:18:42,789 --> 00:18:46,630
nice way to be able to do that make a

00:18:44,590 --> 00:18:49,240
single state change in a single line of

00:18:46,630 --> 00:18:52,559
code and now because this code is

00:18:49,240 --> 00:18:57,880
together it should probably be packaged

00:18:52,559 --> 00:18:59,950
this is now two pixels to two containers

00:18:57,880 --> 00:19:01,870
of data we're actually telling Python

00:18:59,950 --> 00:19:05,230
now that these variables belong together

00:19:01,870 --> 00:19:07,270
and since they belong together and they

00:19:05,230 --> 00:19:08,470
have the same the same variable names as

00:19:07,270 --> 00:19:10,799
our function we can just pass the

00:19:08,470 --> 00:19:13,270
dictionaries directly to our function

00:19:10,799 --> 00:19:16,000
but this already is repeated now we're

00:19:13,270 --> 00:19:17,470
setting a dictionary twice and what

00:19:16,000 --> 00:19:18,700
would and what Python doesn't know is

00:19:17,470 --> 00:19:21,090
that these two things are related to

00:19:18,700 --> 00:19:24,490
each other they should probably be a

00:19:21,090 --> 00:19:26,980
list of dictionaries now it's a list of

00:19:24,490 --> 00:19:29,860
pixels there's so much more information

00:19:26,980 --> 00:19:30,880
already here we can create all of our

00:19:29,860 --> 00:19:34,350
brightnesses at the same

00:19:30,880 --> 00:19:37,360
time we could just do the mean of those

00:19:34,350 --> 00:19:39,880
but now we have an intermediate variable

00:19:37,360 --> 00:19:41,770
that doesn't actually represent the

00:19:39,880 --> 00:19:43,600
final goal or code instead of having

00:19:41,770 --> 00:19:46,060
three steps well we just have two steps

00:19:43,600 --> 00:19:47,920
define our data calculate the thing we

00:19:46,060 --> 00:19:53,380
care about wouldn't that be easier to

00:19:47,920 --> 00:19:55,060
understand we can do that now it's also

00:19:53,380 --> 00:19:57,190
faster because we didn't create a list

00:19:55,060 --> 00:20:03,340
of intermediate results in the in the

00:19:57,190 --> 00:20:05,620
middle at this point is this little

00:20:03,340 --> 00:20:07,240
thing that always bothers me when I

00:20:05,620 --> 00:20:09,220
start looking at code that's gotten to

00:20:07,240 --> 00:20:11,800
this point there's this tiny thing you

00:20:09,220 --> 00:20:14,080
start to notice your first you notice

00:20:11,800 --> 00:20:16,410
how these the red the green these two

00:20:14,080 --> 00:20:20,310
rows are exactly in line with each other

00:20:16,410 --> 00:20:22,510
there is no reason for them start of the

00:20:20,310 --> 00:20:23,710
Python style guide says actually you

00:20:22,510 --> 00:20:26,020
shouldn't even do this if you run a

00:20:23,710 --> 00:20:27,640
linter on this it'll delete those but

00:20:26,020 --> 00:20:30,670
there's a reason why we write it in the

00:20:27,640 --> 00:20:33,520
first place because we know that these

00:20:30,670 --> 00:20:36,520
two dictionaries represent the same

00:20:33,520 --> 00:20:39,960
concept there is so much information

00:20:36,520 --> 00:20:42,970
encoded in that extra space right there

00:20:39,960 --> 00:20:44,470
we can communicate that too and that's

00:20:42,970 --> 00:20:47,110
where we start to use some of some of

00:20:44,470 --> 00:20:49,540
pythons more advanced features we want

00:20:47,110 --> 00:20:51,610
to bring that domain knowledge out we

00:20:49,540 --> 00:20:53,470
could make a collection that's a special

00:20:51,610 --> 00:20:56,440
type representing that concept for

00:20:53,470 --> 00:20:58,900
example a names couple names couple is

00:20:56,440 --> 00:21:00,640
an object works similar to it's like a

00:20:58,900 --> 00:21:03,160
hybrid between the dictionary and a

00:21:00,640 --> 00:21:05,590
tough one we can create this and now it

00:21:03,160 --> 00:21:08,950
is a pixel art collection of pixels is

00:21:05,590 --> 00:21:11,500
made up of pixel objects so much richer

00:21:08,950 --> 00:21:14,700
than what we have before floral complex

00:21:11,500 --> 00:21:18,869
to use them but now all that information

00:21:14,700 --> 00:21:21,779
there but we're missing now is the

00:21:18,869 --> 00:21:25,710
relationship between our pixel and get

00:21:21,779 --> 00:21:27,480
brightness we could tell our color get

00:21:25,710 --> 00:21:29,989
brightness function that it's expected

00:21:27,480 --> 00:21:35,129
to be used on pixels

00:21:29,989 --> 00:21:36,809
well the typing module now has a new

00:21:35,129 --> 00:21:38,309
type way of way of defining name

00:21:36,809 --> 00:21:40,619
to oppose they look like this a lot like

00:21:38,309 --> 00:21:43,320
like models if you if you've used

00:21:40,619 --> 00:21:46,019
various web frameworks and you can add a

00:21:43,320 --> 00:21:48,419
property of this you could say that the

00:21:46,019 --> 00:21:51,840
pixels brightness can be created by

00:21:48,419 --> 00:21:54,090
using the get brightness function and

00:21:51,840 --> 00:21:55,980
once you've done that all you have to do

00:21:54,090 --> 00:22:01,739
is say give me the brightness for each

00:21:55,980 --> 00:22:03,779
pixel and this function here if you're

00:22:01,739 --> 00:22:05,580
just to read it alone you might not know

00:22:03,779 --> 00:22:07,139
you might not know because Python is

00:22:05,580 --> 00:22:08,519
dynamically typed that it's expected to

00:22:07,139 --> 00:22:12,389
be used on numbers and what's supposed

00:22:08,519 --> 00:22:15,210
to come out well you can use tight pins

00:22:12,389 --> 00:22:16,739
and suddenly you have three integers

00:22:15,210 --> 00:22:18,570
that are going to functions expect to

00:22:16,739 --> 00:22:20,609
return a float you have a duck string

00:22:18,570 --> 00:22:22,169
that explains what's going on at this

00:22:20,609 --> 00:22:27,659
point I see some of you found me you're

00:22:22,169 --> 00:22:31,799
saying whoa it was fine up until right

00:22:27,659 --> 00:22:35,369
then this is roy roy haynes ooh complex

00:22:31,799 --> 00:22:37,440
this is ridiculous are we now in a

00:22:35,369 --> 00:22:39,480
ravioli code situation we have a lot of

00:22:37,440 --> 00:22:40,710
information here but how they connect is

00:22:39,480 --> 00:22:44,519
being hard to understand

00:22:40,710 --> 00:22:48,179
well maybe think about this example in a

00:22:44,519 --> 00:22:50,249
bigger sense if you have many files many

00:22:48,179 --> 00:22:51,840
modules and a team of people working on

00:22:50,249 --> 00:22:53,190
different parts of it they're not going

00:22:51,840 --> 00:22:55,139
to see all the things that you just saw

00:22:53,190 --> 00:22:57,029
at once that ability to see everything

00:22:55,139 --> 00:22:59,070
at once is huge we put tons of

00:22:57,029 --> 00:23:01,200
information together imagine if someone

00:22:59,070 --> 00:23:04,230
is just looking at the application and

00:23:01,200 --> 00:23:05,789
all they see is this now without seeing

00:23:04,230 --> 00:23:09,929
the rest of it they can understand the

00:23:05,789 --> 00:23:13,289
purpose of this code on its own the

00:23:09,929 --> 00:23:16,620
person who's writing the models they can

00:23:13,289 --> 00:23:18,780
describe the interfaces to that model

00:23:16,620 --> 00:23:19,890
their own be confident that others using

00:23:18,780 --> 00:23:22,890
them will be able to use them for good

00:23:19,890 --> 00:23:25,800
purposes and the person writing the

00:23:22,890 --> 00:23:28,290
algorithms will be able to define them

00:23:25,800 --> 00:23:30,059
on their own and explain their purposes

00:23:28,290 --> 00:23:32,670
without relying on the other parts of

00:23:30,059 --> 00:23:35,100
code if your code gets to be so big that

00:23:32,670 --> 00:23:37,440
you can't hold all of it in your mind at

00:23:35,100 --> 00:23:39,330
once or expect any one person to even

00:23:37,440 --> 00:23:41,280
try to hold all of it in mind you might

00:23:39,330 --> 00:23:43,440
want to want to consider using some of

00:23:41,280 --> 00:23:47,820
these more more extensive features of

00:23:43,440 --> 00:23:51,240
Python but in the case of one what a one

00:23:47,820 --> 00:23:53,100
screen this is quite good enough you can

00:23:51,240 --> 00:23:55,290
see all that information the extra space

00:23:53,100 --> 00:23:57,690
does tell us that extra thing look how

00:23:55,290 --> 00:24:00,360
far we've come these two piece of code

00:23:57,690 --> 00:24:02,070
do the same thing they and from Python

00:24:00,360 --> 00:24:04,950
standpoint from the computer standpoint

00:24:02,070 --> 00:24:08,370
they're exactly the same code this code

00:24:04,950 --> 00:24:09,750
even though it's not essentially

00:24:08,370 --> 00:24:11,550
different it's linearized on the

00:24:09,750 --> 00:24:14,490
computer it's so much more easy to

00:24:11,550 --> 00:24:18,630
manage to understand and easier to

00:24:14,490 --> 00:24:21,690
extend the big picture I want you to get

00:24:18,630 --> 00:24:25,050
from this is that the code is meant for

00:24:21,690 --> 00:24:26,640
humans that when code doesn't explain

00:24:25,050 --> 00:24:28,530
the writers thoughts it's difficult to

00:24:26,640 --> 00:24:30,720
understand that makes it difficult to

00:24:28,530 --> 00:24:33,270
extend it's why pair programming is so

00:24:30,720 --> 00:24:34,559
important if you just work alone and

00:24:33,270 --> 00:24:35,100
you're just writing you'll be alone with

00:24:34,559 --> 00:24:37,020
your thoughts

00:24:35,100 --> 00:24:38,520
living in an echo chamber then it's it's

00:24:37,020 --> 00:24:40,590
no wonder it's a surprise when we show

00:24:38,520 --> 00:24:43,679
our code to someone else I always strive

00:24:40,590 --> 00:24:45,870
to least use Python as your collaborator

00:24:43,679 --> 00:24:46,920
explaining your intention explaining the

00:24:45,870 --> 00:24:48,530
knowledge that you have

00:24:46,920 --> 00:24:51,030
why you're creating what you're creating

00:24:48,530 --> 00:24:53,040
and there's some techniques the terms

00:24:51,030 --> 00:24:54,900
that I hope you've learned what dead

00:24:53,040 --> 00:24:56,940
code is that dead code should be killed

00:24:54,900 --> 00:24:59,640
anything that doesn't contribute should

00:24:56,940 --> 00:25:01,470
be gone spaghetti code is code that

00:24:59,640 --> 00:25:03,630
that's hard hard to understand because

00:25:01,470 --> 00:25:05,100
you have to jump make leaps and logic

00:25:03,630 --> 00:25:05,610
and track things in your memory all the

00:25:05,100 --> 00:25:07,800
time

00:25:05,610 --> 00:25:09,600
ravioli code is simple to understand

00:25:07,800 --> 00:25:12,030
that in pieces were hard and understand

00:25:09,600 --> 00:25:14,580
as a whole and that code that has

00:25:12,030 --> 00:25:16,320
repetition it doesn't need it that you

00:25:14,580 --> 00:25:20,100
that you can manage it a lot simpler by

00:25:16,320 --> 00:25:21,510
removing the repetition but thank you

00:25:20,100 --> 00:25:22,920
for attention I recommend martin

00:25:21,510 --> 00:25:24,840
fowler's refactoring book which has a

00:25:22,920 --> 00:25:37,140
labas and greater detail than i heard

00:25:24,840 --> 00:25:39,720
back today thank you so much Nick that

00:25:37,140 --> 00:25:41,670
was interesting and I was thinking about

00:25:39,720 --> 00:25:45,000
my own coding thinking about what I have

00:25:41,670 --> 00:25:47,850
to change in there and Kelvin is next is

00:25:45,000 --> 00:25:50,550
Kelvin in the household a fantastic we

00:25:47,850 --> 00:25:54,270
all have time for just one or two quick

00:25:50,550 --> 00:25:55,980
questions before Kelvin comes on so ask

00:25:54,270 --> 00:25:57,930
requests Nick and he'll also be around

00:25:55,980 --> 00:26:00,480
and we'll be happy to talk to you as

00:25:57,930 --> 00:26:03,980
well so please any questions for Nick on

00:26:00,480 --> 00:26:03,980
the topic of refactoring

00:26:10,190 --> 00:26:18,830
hello my name is Aslam my question here

00:26:15,170 --> 00:26:21,470
is when we went or you started your

00:26:18,830 --> 00:26:23,960
presentation and there was the code that

00:26:21,470 --> 00:26:26,360
was hard to trace or read and/or not

00:26:23,960 --> 00:26:27,710
organized and then we moved on to stage

00:26:26,360 --> 00:26:32,510
at different stages until it got

00:26:27,710 --> 00:26:35,990
organized event my question here is how

00:26:32,510 --> 00:26:39,140
can one practice to reach from the first

00:26:35,990 --> 00:26:43,550
stage to the last stage easily so how

00:26:39,140 --> 00:26:47,060
can one manage to directly write this

00:26:43,550 --> 00:26:50,530
code to end up with this end result that

00:26:47,060 --> 00:26:54,110
we seen in your presentation thank you

00:26:50,530 --> 00:26:56,660
thank you for your question there are

00:26:54,110 --> 00:26:58,250
two things that come out when when

00:26:56,660 --> 00:26:59,990
someone's refactoring code one of them

00:26:58,250 --> 00:27:02,870
is something that's gained purely by

00:26:59,990 --> 00:27:05,300
experience it's a it's a something

00:27:02,870 --> 00:27:08,000
called code smell when you read enough

00:27:05,300 --> 00:27:09,560
code you can start to detect aspects of

00:27:08,000 --> 00:27:11,930
it over time you start to understand the

00:27:09,560 --> 00:27:14,120
relationship between that sense and the

00:27:11,930 --> 00:27:18,830
things that are actually implemented the

00:27:14,120 --> 00:27:21,560
way I try to approach code that then is

00:27:18,830 --> 00:27:24,670
easy to understand is by by separating

00:27:21,560 --> 00:27:27,440
the concept of complexity into two parts

00:27:24,670 --> 00:27:28,730
essential complexity which describes the

00:27:27,440 --> 00:27:30,920
complexity of the problem you're trying

00:27:28,730 --> 00:27:32,480
to solve an artificial complexity the

00:27:30,920 --> 00:27:34,700
complexity the complexity that arises

00:27:32,480 --> 00:27:35,720
merely as a result of trying to solve

00:27:34,700 --> 00:27:39,280
that problem

00:27:35,720 --> 00:27:43,060
it's the instance talked about a lot

00:27:39,280 --> 00:27:44,260
circles as humans were always creating

00:27:43,060 --> 00:27:48,400
things that are more complex than we

00:27:44,260 --> 00:27:51,400
wanted to and we as as as professionals

00:27:48,400 --> 00:27:53,170
as builders we must always strive to to

00:27:51,400 --> 00:27:55,750
then take away the scaffolding that we

00:27:53,170 --> 00:27:57,550
used to get there one of the simplest

00:27:55,750 --> 00:27:59,200
things you can do is pair programming

00:27:57,550 --> 00:28:01,810
explain to someone else what each line

00:27:59,200 --> 00:28:03,850
does if you don't have a partner find a

00:28:01,810 --> 00:28:05,170
rubber duck rubber duck programming is

00:28:03,850 --> 00:28:06,790
talking to someone else

00:28:05,170 --> 00:28:08,320
explaining your code when they're not

00:28:06,790 --> 00:28:10,120
even a living person if you just have

00:28:08,320 --> 00:28:11,950
your coffee cup explains your coffee cup

00:28:10,120 --> 00:28:14,620
with those lines of pepper what would do

00:28:11,950 --> 00:28:17,260
if you can't explain one sentence and

00:28:14,620 --> 00:28:18,700
magic line by line in your code there's

00:28:17,260 --> 00:28:20,440
probably some hidden artificial

00:28:18,700 --> 00:28:22,060
complexity and you'll start saying well

00:28:20,440 --> 00:28:24,700
actually these three lines of code do

00:28:22,060 --> 00:28:26,920
this one thing this should be a function

00:28:24,700 --> 00:28:28,180
well actually okay if we go over to this

00:28:26,920 --> 00:28:29,410
other module then you'll see that

00:28:28,180 --> 00:28:31,060
there's some steps here and actually if

00:28:29,410 --> 00:28:33,070
we go over here maybe you got some

00:28:31,060 --> 00:28:34,510
spaghetti code going on you'll notice

00:28:33,070 --> 00:28:36,940
just like when you're doing doing

00:28:34,510 --> 00:28:39,340
rehearsals for a talk where that where

00:28:36,940 --> 00:28:40,870
that roughness is and that speaking

00:28:39,340 --> 00:28:42,610
gives you the feedback you need to in

00:28:40,870 --> 00:28:44,910
order to find the strategies that will

00:28:42,610 --> 00:28:44,910
get you there

00:28:45,420 --> 00:28:54,220
um um I wanted to know because earlier

00:28:51,190 --> 00:28:58,750
you set out with um to pull unpacking

00:28:54,220 --> 00:29:08,080
you went home for that to read some

00:28:58,750 --> 00:29:08,710
dictionary and then the dictionary yes

00:29:08,080 --> 00:29:12,160
yes

00:29:08,710 --> 00:29:13,420
on the other yes he then moved on to

00:29:12,160 --> 00:29:18,310
name to prove

00:29:13,420 --> 00:29:20,500
yes yes I wanna know the reason for that

00:29:18,310 --> 00:29:24,400
and I want to know since you created a

00:29:20,500 --> 00:29:26,320
name - who and I feel like you have to

00:29:24,400 --> 00:29:30,520
do something like that when you have to

00:29:26,320 --> 00:29:33,640
be creative pixels a lot as opposed to

00:29:30,520 --> 00:29:36,090
this method where you can just some get

00:29:33,640 --> 00:29:36,090
brightness

00:29:36,370 --> 00:29:40,990
you know stuff also and if you're not

00:29:39,040 --> 00:29:42,970
using something like that like oh if

00:29:40,990 --> 00:29:46,630
you're not you don't really have to work

00:29:42,970 --> 00:29:49,440
with pictures all the time what's the

00:29:46,630 --> 00:29:49,440
need of like creating

00:29:51,099 --> 00:29:57,149
yeah this one - more time for you can't

00:29:53,679 --> 00:29:57,149
use it pretty

00:29:58,920 --> 00:30:02,120
thank you for your question

00:30:02,240 --> 00:30:07,280
dictionaries and tuples have some some

00:30:04,850 --> 00:30:08,810
trade-offs and advantages dictionaries

00:30:07,280 --> 00:30:11,510
are mutable which means that if you

00:30:08,810 --> 00:30:12,830
change one value and you can keep the

00:30:11,510 --> 00:30:15,050
same identity without changing the

00:30:12,830 --> 00:30:17,930
others that essentially says that you

00:30:15,050 --> 00:30:20,480
don't care so much about the identity of

00:30:17,930 --> 00:30:22,820
the whole of the collection in the case

00:30:20,480 --> 00:30:25,310
of a pixel if we change one brightness

00:30:22,820 --> 00:30:27,980
value of the blue it changes our

00:30:25,310 --> 00:30:30,410
perception of it that pixels color so by

00:30:27,980 --> 00:30:32,780
choosing an immutable immutable sequence

00:30:30,410 --> 00:30:34,610
we're also saying that that collection

00:30:32,780 --> 00:30:36,020
matters to us if you want to change one

00:30:34,610 --> 00:30:38,390
thing you have to make a copy of the

00:30:36,020 --> 00:30:40,220
whole data structure the other nice

00:30:38,390 --> 00:30:42,140
thing about named tuple is that it pre

00:30:40,220 --> 00:30:44,870
defines the total amount of information

00:30:42,140 --> 00:30:47,870
and its location in a dictionary we can

00:30:44,870 --> 00:30:50,840
always add keys and remove keys bycel by

00:30:47,870 --> 00:30:53,810
choosing a data structure that is set

00:30:50,840 --> 00:30:55,970
upon creation we will get errors

00:30:53,810 --> 00:30:58,520
whenever we try to add or change change

00:30:55,970 --> 00:31:00,890
things I wish there was at least I don't

00:30:58,520 --> 00:31:04,550
I'm not aware right now I hope someone

00:31:00,890 --> 00:31:07,910
will tell me after the talk of a an

00:31:04,550 --> 00:31:10,880
immutable structure in Python that has a

00:31:07,910 --> 00:31:13,730
dictionary like interface and can be

00:31:10,880 --> 00:31:15,250
freed to pre Defiance at the beginning

00:31:13,730 --> 00:31:17,530
without going through a full

00:31:15,250 --> 00:31:20,840
object-oriented

00:31:17,530 --> 00:31:22,550
but that's why I chose that I would love

00:31:20,840 --> 00:31:26,530
for there to be a special like star star

00:31:22,550 --> 00:31:26,530
interface for our objects but this

00:31:30,520 --> 00:31:35,690
[Music]

00:31:32,750 --> 00:31:38,270
I'd like to have a quick check on do you

00:31:35,690 --> 00:31:46,040
have a quick take on tip a flip eight

00:31:38,270 --> 00:31:48,650
and formatting oh yeah so happy is the

00:31:46,040 --> 00:31:51,200
one the first style guides for Python

00:31:48,650 --> 00:31:53,060
and was designed to help us create code

00:31:51,200 --> 00:31:54,980
that looks similar to everyone else's

00:31:53,060 --> 00:31:56,690
code right some of the Python language

00:31:54,980 --> 00:31:58,250
itself was already created to make sure

00:31:56,690 --> 00:32:01,010
that everyone's code but similar like

00:31:58,250 --> 00:32:05,180
that's why we have that's why we have

00:32:01,010 --> 00:32:06,800
meaningful whitespace there have been a

00:32:05,180 --> 00:32:09,560
few other style guide selections and

00:32:06,800 --> 00:32:10,940
eventually some tools of linters that

00:32:09,560 --> 00:32:13,790
help you create code that looks similar

00:32:10,940 --> 00:32:15,560
to each other the problem comes when

00:32:13,790 --> 00:32:17,570
you're working in the team there's

00:32:15,560 --> 00:32:19,820
always one person on the team that cares

00:32:17,570 --> 00:32:21,800
more about the style guide then about

00:32:19,820 --> 00:32:24,170
than everyone else and they're always

00:32:21,800 --> 00:32:26,270
the person that has to say like oh you

00:32:24,170 --> 00:32:28,000
know you should put a space here oh you

00:32:26,270 --> 00:32:31,160
shouldn't put a comment here because

00:32:28,000 --> 00:32:33,200
that gets annoying black is a tool that

00:32:31,160 --> 00:32:35,360
does exactly that it fixes the code and

00:32:33,200 --> 00:32:37,880
conforms a spot style guide

00:32:35,360 --> 00:32:39,740
but it has no options which means that

00:32:37,880 --> 00:32:43,070
if the team chooses black basically

00:32:39,740 --> 00:32:44,480
black becomes the bad guy and if you

00:32:43,070 --> 00:32:46,910
don't like the style that comes up

00:32:44,480 --> 00:32:48,980
everyone can just say well you know it's

00:32:46,910 --> 00:32:51,770
the style person and the team can feel

00:32:48,980 --> 00:32:56,780
feel close together using tools like

00:32:51,770 --> 00:32:58,400
black does help you internalize the the

00:32:56,780 --> 00:33:01,690
style guide but they're also ways and

00:32:58,400 --> 00:33:01,690
quickly refactoring your coding

00:33:02,000 --> 00:33:06,740
[Music]

00:33:05,020 --> 00:33:09,690
thank you once again

00:33:06,740 --> 00:33:14,209
Nick yes please

00:33:09,690 --> 00:33:14,209

YouTube URL: https://www.youtube.com/watch?v=0dMz-bv_wUw


