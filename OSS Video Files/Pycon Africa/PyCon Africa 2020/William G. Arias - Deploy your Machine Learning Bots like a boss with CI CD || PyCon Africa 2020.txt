Title: William G. Arias - Deploy your Machine Learning Bots like a boss with CI CD || PyCon Africa 2020
Publication date: 2020-08-30
Playlist: PyCon Africa 2020
Description: 
	Context:
- Today is relatively easy to create and train a conversational agent using Machine Learning Techniques, fire it up and showcase it in your computer

Problem:
- Sharing your chatbot with the outside world is not as easy as training your models. Load Balancer, Unit Test, Integration Tests, Differential Tests ... Text Analytics and retrain the models to better serve your audience goes way beyond the simple agent that runs in the developer environment

Solution:
-  I want to show how from my experience of deploying bots to production, leveraging DevOps + DataScience skills along with an entry level knowledge of Databases, CI/CD and distributed systems you can take your prototypes to a next level, deploy, iterate and re-train your models faster
Captions: 
	00:00:17,119 --> 00:00:20,320
okay

00:00:17,760 --> 00:00:21,279
so thank you for coming i'm very happy

00:00:20,320 --> 00:00:23,840
to be here

00:00:21,279 --> 00:00:26,720
virtually i was looking forward for this

00:00:23,840 --> 00:00:30,080
event and today i want to share with you

00:00:26,720 --> 00:00:32,719
one of the experiences and scars

00:00:30,080 --> 00:00:33,280
that come while you implement chatbots

00:00:32,719 --> 00:00:35,280
and how

00:00:33,280 --> 00:00:36,719
using other tools that can make your

00:00:35,280 --> 00:00:40,000
life easier

00:00:36,719 --> 00:00:42,640
and in incorporate developer workflows

00:00:40,000 --> 00:00:44,000
in applications like machine learning or

00:00:42,640 --> 00:00:47,200
machine learning chatbots in this

00:00:44,000 --> 00:00:50,320
case so what is the inspiration and why

00:00:47,200 --> 00:00:52,160
why i started this project so if if any

00:00:50,320 --> 00:00:53,680
of you have been working

00:00:52,160 --> 00:00:55,680
in machine learning let's say if you

00:00:53,680 --> 00:00:58,399
want if you crashed in in this field

00:00:55,680 --> 00:00:59,520
you will see that in the beginning we

00:00:58,399 --> 00:01:01,760
behave pretty much

00:00:59,520 --> 00:01:02,879
like a one person band and what do i

00:01:01,760 --> 00:01:05,199
mean by this

00:01:02,879 --> 00:01:06,320
that we all start playing with jupiter

00:01:05,199 --> 00:01:08,400
notebook

00:01:06,320 --> 00:01:09,920
and it works pretty well when you are

00:01:08,400 --> 00:01:12,320
only in jupiter notebook

00:01:09,920 --> 00:01:13,439
but once you realize that your model is

00:01:12,320 --> 00:01:15,840
not

00:01:13,439 --> 00:01:17,520
supposed to live in in jupiter network

00:01:15,840 --> 00:01:19,840
but you want to expose it

00:01:17,520 --> 00:01:21,680
and share it with other people then you

00:01:19,840 --> 00:01:24,840
realize that you need to learn about how

00:01:21,680 --> 00:01:28,159
to configure a database how to configure

00:01:24,840 --> 00:01:30,799
nginx a different decisions that

00:01:28,159 --> 00:01:32,560
how to design the api to serve the model

00:01:30,799 --> 00:01:35,439
and all of these decisions

00:01:32,560 --> 00:01:36,000
are the ones that are driving today the

00:01:35,439 --> 00:01:38,640
field

00:01:36,000 --> 00:01:40,000
to to be called like full stack data

00:01:38,640 --> 00:01:43,439
scientists or machine learning

00:01:40,000 --> 00:01:45,600
engineer so if like me you started alone

00:01:43,439 --> 00:01:46,640
you will find out that you were a one

00:01:45,600 --> 00:01:48,799
person band

00:01:46,640 --> 00:01:50,000
and the intent of this presentation is

00:01:48,799 --> 00:01:52,320
to show you how

00:01:50,000 --> 00:01:53,439
you can make your life easier by using

00:01:52,320 --> 00:01:56,240
another tools

00:01:53,439 --> 00:01:56,799
while learning all these instruments so

00:01:56,240 --> 00:01:58,880
why

00:01:56,799 --> 00:02:00,960
why do i say instruments because all of

00:01:58,880 --> 00:02:01,520
these technologies they are instrumental

00:02:00,960 --> 00:02:04,000
for you

00:02:01,520 --> 00:02:06,159
to be able to serve a machine learning

00:02:04,000 --> 00:02:07,360
model in this case a natural language

00:02:06,159 --> 00:02:09,840
understanding

00:02:07,360 --> 00:02:10,479
model that you want to share with other

00:02:09,840 --> 00:02:12,879
people

00:02:10,479 --> 00:02:14,400
and it seems when we when we think about

00:02:12,879 --> 00:02:16,000
chat bots it seems

00:02:14,400 --> 00:02:18,000
like yeah it's just a little micro

00:02:16,000 --> 00:02:19,440
services a very easy piece of software

00:02:18,000 --> 00:02:21,680
that you can develop but

00:02:19,440 --> 00:02:23,680
it it has lots of things that you need

00:02:21,680 --> 00:02:26,720
to consider if you want to serve it

00:02:23,680 --> 00:02:28,319
to other people to use it so things that

00:02:26,720 --> 00:02:29,920
i went through and you probably are

00:02:28,319 --> 00:02:30,959
going through or you will go through is

00:02:29,920 --> 00:02:32,480
that

00:02:30,959 --> 00:02:34,160
there are different architectural

00:02:32,480 --> 00:02:36,560
decisions and technologies

00:02:34,160 --> 00:02:38,560
so one thing as i was mentioning is you

00:02:36,560 --> 00:02:39,920
do all data exploration and training of

00:02:38,560 --> 00:02:43,120
the model

00:02:39,920 --> 00:02:43,680
and testing of the model in jupiter

00:02:43,120 --> 00:02:45,840
notebook

00:02:43,680 --> 00:02:46,959
possibly but once you realize that you

00:02:45,840 --> 00:02:49,519
want to keep track

00:02:46,959 --> 00:02:50,800
of your experiments then you will start

00:02:49,519 --> 00:02:52,959
hearing words like git

00:02:50,800 --> 00:02:55,360
and version control if you want to

00:02:52,959 --> 00:02:57,760
expose your model as an api so probably

00:02:55,360 --> 00:02:58,720
you will go for flask or fast api that

00:02:57,760 --> 00:03:01,680
is like pretty

00:02:58,720 --> 00:03:02,080
popular these days and if you want to to

00:03:01,680 --> 00:03:03,760
have

00:03:02,080 --> 00:03:05,599
data that you have to reach somewhere

00:03:03,760 --> 00:03:07,519
for example i don't know recommendations

00:03:05,599 --> 00:03:09,440
engines or other stuff like this

00:03:07,519 --> 00:03:12,000
you will start to think okay so i need

00:03:09,440 --> 00:03:13,440
that i need persistence i need database

00:03:12,000 --> 00:03:15,040
what is the type of database that i

00:03:13,440 --> 00:03:16,239
should use should i use cassandra should

00:03:15,040 --> 00:03:18,159
i use my sql

00:03:16,239 --> 00:03:20,159
you will this all of these things start

00:03:18,159 --> 00:03:21,519
to come into play and to make it even

00:03:20,159 --> 00:03:23,519
more interesting

00:03:21,519 --> 00:03:25,120
then you will see that okay we have to

00:03:23,519 --> 00:03:27,120
serve the things using docker

00:03:25,120 --> 00:03:28,799
and where do i put my containers so

00:03:27,120 --> 00:03:30,319
should i create a virtual machine should

00:03:28,799 --> 00:03:31,120
i go for a platform as a service should

00:03:30,319 --> 00:03:33,599
i use some

00:03:31,120 --> 00:03:35,200
service and also the engine x that i was

00:03:33,599 --> 00:03:37,040
mentioning that makes it possible

00:03:35,200 --> 00:03:38,959
for you to serve your model with the

00:03:37,040 --> 00:03:41,920
other outside world

00:03:38,959 --> 00:03:43,120
so how and what are the lessons learned

00:03:41,920 --> 00:03:45,120
from

00:03:43,120 --> 00:03:46,720
my experience and the things i have

00:03:45,120 --> 00:03:49,360
worked when we were

00:03:46,720 --> 00:03:50,080
creating chat bots that use machine

00:03:49,360 --> 00:03:53,920
learning

00:03:50,080 --> 00:03:54,879
um techniques to be smarter and more

00:03:53,920 --> 00:03:57,680
rule based

00:03:54,879 --> 00:03:58,560
so what do we learn so this starts uh

00:03:57,680 --> 00:04:00,480
borderline

00:03:58,560 --> 00:04:01,840
the theory that you will start reading

00:04:00,480 --> 00:04:02,799
more and more about machine learning

00:04:01,840 --> 00:04:04,640
operations

00:04:02,799 --> 00:04:08,239
so first and this is like for

00:04:04,640 --> 00:04:11,280
documentation purposes of the project

00:04:08,239 --> 00:04:13,200
model life cycle you should create in

00:04:11,280 --> 00:04:14,080
the documentation the life cycle view of

00:04:13,200 --> 00:04:16,639
your model

00:04:14,080 --> 00:04:18,400
so this is very important to understand

00:04:16,639 --> 00:04:20,479
how do you do data ingestion

00:04:18,400 --> 00:04:21,680
how do you version the data what type of

00:04:20,479 --> 00:04:23,040
labeling you need to do

00:04:21,680 --> 00:04:24,960
in the case of chatbots you need to

00:04:23,040 --> 00:04:25,919
create the intents the entities the

00:04:24,960 --> 00:04:27,680
synonyms

00:04:25,919 --> 00:04:29,600
and how do you know that the data that

00:04:27,680 --> 00:04:31,759
you are creating is valid for the

00:04:29,600 --> 00:04:34,160
for the let's say the json that your

00:04:31,759 --> 00:04:35,919
chatbot needs to read in order to learn

00:04:34,160 --> 00:04:38,000
and the pre-processing training the

00:04:35,919 --> 00:04:40,400
model and then closing the loop

00:04:38,000 --> 00:04:41,360
so lesson learned first of the lessons

00:04:40,400 --> 00:04:43,840
that we learned is

00:04:41,360 --> 00:04:45,120
let's think in terms of like like today

00:04:43,840 --> 00:04:47,040
is called machine learning operations

00:04:45,120 --> 00:04:49,600
but let's just bring the model

00:04:47,040 --> 00:04:51,280
life cycle view and this is this only

00:04:49,600 --> 00:04:53,040
pertains to the data scientist or the

00:04:51,280 --> 00:04:53,919
machine learning engineer or the person

00:04:53,040 --> 00:04:56,320
that is into

00:04:53,919 --> 00:04:57,759
machine learning but then and very

00:04:56,320 --> 00:05:00,560
important to make these

00:04:57,759 --> 00:05:02,160
projects comfortable to life we need to

00:05:00,560 --> 00:05:05,199
also think in the process

00:05:02,160 --> 00:05:08,080
because it's not enough

00:05:05,199 --> 00:05:10,240
if you know how to create a chatbot or

00:05:08,080 --> 00:05:11,120
at least how to code a neural network

00:05:10,240 --> 00:05:14,000
that can learn

00:05:11,120 --> 00:05:14,560
an intent and can learn an entity you

00:05:14,000 --> 00:05:16,960
will

00:05:14,560 --> 00:05:18,400
you will find out that the people that

00:05:16,960 --> 00:05:21,520
are a cornerstone

00:05:18,400 --> 00:05:23,440
cornerstone are very important for you

00:05:21,520 --> 00:05:25,600
to create a good chatbot are what is

00:05:23,440 --> 00:05:27,520
called usually dialog contributors

00:05:25,600 --> 00:05:28,639
and they are not necessarily technical

00:05:27,520 --> 00:05:32,400
people

00:05:28,639 --> 00:05:34,960
in the case this this in recent case

00:05:32,400 --> 00:05:36,639
uh some months ago we created a chatbot

00:05:34,960 --> 00:05:39,759
for a frequent ask questions

00:05:36,639 --> 00:05:43,039
in colombia in regards to the

00:05:39,759 --> 00:05:46,400
coronavirus pandemic and we found out

00:05:43,039 --> 00:05:47,680
that the people the developers they

00:05:46,400 --> 00:05:49,759
don't really know

00:05:47,680 --> 00:05:51,520
or they don't they don't need to know

00:05:49,759 --> 00:05:53,600
all the data or the frequent ask

00:05:51,520 --> 00:05:55,360
questions that they were asking in

00:05:53,600 --> 00:05:57,120
in different areas or regions from the

00:05:55,360 --> 00:05:59,120
country so there were

00:05:57,120 --> 00:06:00,639
there were another profile of people

00:05:59,120 --> 00:06:01,440
that they were not technical but they

00:06:00,639 --> 00:06:02,960
were

00:06:01,440 --> 00:06:04,639
very important because they were the

00:06:02,960 --> 00:06:07,039
ones creating

00:06:04,639 --> 00:06:07,680
and and adding to the knowledge base of

00:06:07,039 --> 00:06:09,440
the bot

00:06:07,680 --> 00:06:11,199
the actual questions that people were

00:06:09,440 --> 00:06:13,680
having and you don't need

00:06:11,199 --> 00:06:15,600
these people to understand what is nlp

00:06:13,680 --> 00:06:17,440
what is nlu what is a chatbot you just

00:06:15,600 --> 00:06:18,639
need content creators or in this case

00:06:17,440 --> 00:06:20,720
the other contributors

00:06:18,639 --> 00:06:22,240
so when you define your process and you

00:06:20,720 --> 00:06:24,400
start finding out

00:06:22,240 --> 00:06:26,479
where what are the different roles of

00:06:24,400 --> 00:06:28,080
type of people that they will be part of

00:06:26,479 --> 00:06:31,039
your success to deploy

00:06:28,080 --> 00:06:31,520
uh software this is where this process

00:06:31,039 --> 00:06:35,199
view

00:06:31,520 --> 00:06:36,639
is is is very important because also in

00:06:35,199 --> 00:06:38,240
terms of project

00:06:36,639 --> 00:06:40,960
if you leave the project or there is a

00:06:38,240 --> 00:06:43,199
new person coming to to the chatbot

00:06:40,960 --> 00:06:44,240
and development it will be very easy to

00:06:43,199 --> 00:06:46,080
understand

00:06:44,240 --> 00:06:47,440
who is who and how are we creating the

00:06:46,080 --> 00:06:49,759
thing

00:06:47,440 --> 00:06:50,720
and then what are the benefits because

00:06:49,759 --> 00:06:53,840
this is usually

00:06:50,720 --> 00:06:56,160
documentation as i many of you know is

00:06:53,840 --> 00:06:58,960
is boring and usually we document later

00:06:56,160 --> 00:07:00,080
not before but this is very important

00:06:58,960 --> 00:07:00,880
because this gives us a common

00:07:00,080 --> 00:07:02,639
understanding

00:07:00,880 --> 00:07:04,080
for everyone who comes and reads if i

00:07:02,639 --> 00:07:05,599
show you this you know how we are

00:07:04,080 --> 00:07:07,440
creating a chatbot you know that there

00:07:05,599 --> 00:07:08,720
are usually two profiles of people and

00:07:07,440 --> 00:07:10,880
that we are using devops

00:07:08,720 --> 00:07:12,560
for this and that this process here is a

00:07:10,880 --> 00:07:16,560
typical developer workflow

00:07:12,560 --> 00:07:18,960
to create an artifact so when we

00:07:16,560 --> 00:07:20,400
also use this what we do is that we are

00:07:18,960 --> 00:07:23,440
setting from the

00:07:20,400 --> 00:07:25,199
poc level let's say or the most basic

00:07:23,440 --> 00:07:26,960
iteration of the bot we are just

00:07:25,199 --> 00:07:29,360
creating something with a very strong

00:07:26,960 --> 00:07:31,120
baseline that will allow us to iterate

00:07:29,360 --> 00:07:32,880
and improve with the passive time the

00:07:31,120 --> 00:07:34,960
performance of the chatbot

00:07:32,880 --> 00:07:36,240
and how does this look in terms of

00:07:34,960 --> 00:07:39,520
components view

00:07:36,240 --> 00:07:42,080
so in this case i am using

00:07:39,520 --> 00:07:43,440
gitlab ci and with that gitlab c

00:07:42,080 --> 00:07:45,120
continuous delivery

00:07:43,440 --> 00:07:46,879
and an open source framework that is

00:07:45,120 --> 00:07:48,160
called rasa that is for converge

00:07:46,879 --> 00:07:50,639
conversational agents

00:07:48,160 --> 00:07:52,160
these users these use transformers

00:07:50,639 --> 00:07:54,240
architecture

00:07:52,160 --> 00:07:56,160
to be able to understand intents and

00:07:54,240 --> 00:07:58,240
entities and create a conversation that

00:07:56,160 --> 00:08:00,240
probably you are familiar with a boat so

00:07:58,240 --> 00:08:01,440
we will go deeper in this architecture

00:08:00,240 --> 00:08:03,360
and i will show you

00:08:01,440 --> 00:08:05,280
how it works and then we will we will

00:08:03,360 --> 00:08:08,479
also i will show a demo

00:08:05,280 --> 00:08:10,160
so how this how this thing works and why

00:08:08,479 --> 00:08:13,199
gitlab first i work at gitlab

00:08:10,160 --> 00:08:15,280
as a technical marketing engineer

00:08:13,199 --> 00:08:16,479
and i have been using this and i let me

00:08:15,280 --> 00:08:18,960
tell you that

00:08:16,479 --> 00:08:20,160
this really makes your life easier this

00:08:18,960 --> 00:08:21,759
is something that i just want to share

00:08:20,160 --> 00:08:22,400
with you because i believe that if you

00:08:21,759 --> 00:08:25,120
use it

00:08:22,400 --> 00:08:25,599
you can focus more in the development of

00:08:25,120 --> 00:08:27,599
the bot

00:08:25,599 --> 00:08:29,520
you make it a greater bot and you don't

00:08:27,599 --> 00:08:30,639
have to worry that much about all the

00:08:29,520 --> 00:08:34,159
manual steps

00:08:30,639 --> 00:08:36,640
so um what do you

00:08:34,159 --> 00:08:38,399
in this in this workflow how it starts

00:08:36,640 --> 00:08:40,000
let's imagine that i have the dialog

00:08:38,399 --> 00:08:41,919
contributor that i was mentioning or

00:08:40,000 --> 00:08:43,839
just some developer that they want to

00:08:41,919 --> 00:08:44,800
add two more sentences to the knowledge

00:08:43,839 --> 00:08:46,080
base of the bot

00:08:44,800 --> 00:08:48,320
and when you have all of these things

00:08:46,080 --> 00:08:50,880
configured when you make this one effort

00:08:48,320 --> 00:08:52,720
to configure these things you just need

00:08:50,880 --> 00:08:54,480
to do a git commit get push

00:08:52,720 --> 00:08:56,800
and then you send it to gitlab and once

00:08:54,480 --> 00:08:59,600
he's in gitlab the the

00:08:56,800 --> 00:09:01,040
technology of ci and cd is going to take

00:08:59,600 --> 00:09:04,399
care of all the steps

00:09:01,040 --> 00:09:06,320
that usually you have to do manually so

00:09:04,399 --> 00:09:08,080
you need to know if you want to start

00:09:06,320 --> 00:09:11,040
training the bot you need a test

00:09:08,080 --> 00:09:12,959
and you need to test is the data is is

00:09:11,040 --> 00:09:15,120
is conforming to some

00:09:12,959 --> 00:09:16,560
template or format so you don't have to

00:09:15,120 --> 00:09:18,080
do this manually you don't have to open

00:09:16,560 --> 00:09:18,959
a command terminal this will just happen

00:09:18,080 --> 00:09:21,760
automatically

00:09:18,959 --> 00:09:23,440
when you use continuous integration and

00:09:21,760 --> 00:09:25,040
you use the service runners or these

00:09:23,440 --> 00:09:26,240
machines that are running each one of

00:09:25,040 --> 00:09:28,720
the steps that you need

00:09:26,240 --> 00:09:30,800
but very interesting here is that

00:09:28,720 --> 00:09:32,720
traditionally in software engineering

00:09:30,800 --> 00:09:35,279
you do unit testing or other type of

00:09:32,720 --> 00:09:36,160
tests in this one i am using the runners

00:09:35,279 --> 00:09:38,560
to do

00:09:36,160 --> 00:09:39,600
testing but in the in the context of

00:09:38,560 --> 00:09:42,560
machine learning

00:09:39,600 --> 00:09:43,600
so i am bringing data to the runner like

00:09:42,560 --> 00:09:45,920
the dialogues

00:09:43,600 --> 00:09:48,000
and i am training a neural network using

00:09:45,920 --> 00:09:50,160
the runners and i am serving

00:09:48,000 --> 00:09:52,160
the model or the neural network of the

00:09:50,160 --> 00:09:54,720
bot to the model server

00:09:52,160 --> 00:09:55,200
everything automatically so the intent

00:09:54,720 --> 00:09:58,800
of this

00:09:55,200 --> 00:09:59,440
is i just wanted to automate as much as

00:09:58,800 --> 00:10:01,760
possible

00:09:59,440 --> 00:10:03,760
to make my life easier and along the way

00:10:01,760 --> 00:10:06,079
i'm very important you will see

00:10:03,760 --> 00:10:08,399
that when we execute this pipeline this

00:10:06,079 --> 00:10:10,720
creates the model that ultimately

00:10:08,399 --> 00:10:12,320
it's like the brain of the bot is the

00:10:10,720 --> 00:10:13,920
the brain of the chatbot that will be

00:10:12,320 --> 00:10:15,360
the one that is able to understand

00:10:13,920 --> 00:10:16,640
natural language and will serve the

00:10:15,360 --> 00:10:19,120
conversations

00:10:16,640 --> 00:10:19,920
and if you are working in a company that

00:10:19,120 --> 00:10:22,800
you need to

00:10:19,920 --> 00:10:23,760
explain why your bot answer what it

00:10:22,800 --> 00:10:26,079
answered

00:10:23,760 --> 00:10:27,040
so you need to create a paper trail or

00:10:26,079 --> 00:10:29,440
something that will

00:10:27,040 --> 00:10:30,160
provide you with some record that if you

00:10:29,440 --> 00:10:32,640
need to get

00:10:30,160 --> 00:10:34,320
to if you ever get updated you can show

00:10:32,640 --> 00:10:36,000
look this is my model these are the

00:10:34,320 --> 00:10:37,839
artifacts and this is all the version

00:10:36,000 --> 00:10:38,880
control that made possible this model to

00:10:37,839 --> 00:10:41,279
be created

00:10:38,880 --> 00:10:42,640
so in this first step all of this

00:10:41,279 --> 00:10:44,959
happens automatically

00:10:42,640 --> 00:10:46,000
we create a model that later in the

00:10:44,959 --> 00:10:48,079
second part

00:10:46,000 --> 00:10:49,839
what i do also automatically is that i

00:10:48,079 --> 00:10:53,440
use the api rest of the

00:10:49,839 --> 00:10:55,440
rasa conversational library and i

00:10:53,440 --> 00:10:56,880
serve the model to this model server and

00:10:55,440 --> 00:11:00,399
i make it active

00:10:56,880 --> 00:11:02,640
and in this stage i am already um

00:11:00,399 --> 00:11:03,920
ready to start serving the conversations

00:11:02,640 --> 00:11:06,560
and i close the loop

00:11:03,920 --> 00:11:07,600
by bringing with jupiter notebook again

00:11:06,560 --> 00:11:09,360
the

00:11:07,600 --> 00:11:10,959
conversations of the real life

00:11:09,360 --> 00:11:11,920
conversations that my body is having

00:11:10,959 --> 00:11:14,160
with the users

00:11:11,920 --> 00:11:16,399
and use this as a playground where i can

00:11:14,160 --> 00:11:17,760
start exploring the data and learning

00:11:16,399 --> 00:11:19,920
what the people are saying

00:11:17,760 --> 00:11:21,040
to the to the bot what are they texting

00:11:19,920 --> 00:11:22,959
and with this

00:11:21,040 --> 00:11:25,120
create a new knowledge base and continue

00:11:22,959 --> 00:11:28,560
iterating and as i said before

00:11:25,120 --> 00:11:30,880
this will with the passive time enhance

00:11:28,560 --> 00:11:32,560
and the performance of your bot so what

00:11:30,880 --> 00:11:34,399
i want to say is that when you adopt

00:11:32,560 --> 00:11:36,640
this ci cd you are bringing like a

00:11:34,399 --> 00:11:40,240
conductor to your orchestra

00:11:36,640 --> 00:11:42,560
that using the developer workflows and

00:11:40,240 --> 00:11:44,399
all these philosophy of cicd

00:11:42,560 --> 00:11:47,040
into machine learning projects in this

00:11:44,399 --> 00:11:49,760
case in this case a chatbot

00:11:47,040 --> 00:11:51,120
this will ultimately will make your life

00:11:49,760 --> 00:11:54,399
easier

00:11:51,120 --> 00:11:57,920
i i have i believe this and i am

00:11:54,399 --> 00:12:01,279
enjoying using these um pipelines

00:11:57,920 --> 00:12:03,120
to deliver faster and easier chatbots in

00:12:01,279 --> 00:12:06,320
my clients or

00:12:03,120 --> 00:12:07,920
in devops with the both philosophy so

00:12:06,320 --> 00:12:10,399
everything works in keynote or

00:12:07,920 --> 00:12:11,839
powerpoint let me show you how it can

00:12:10,399 --> 00:12:14,480
this this can look

00:12:11,839 --> 00:12:15,279
so basically here i have a pre-recorded

00:12:14,480 --> 00:12:17,120
demo

00:12:15,279 --> 00:12:19,920
that what i'm doing here is that this

00:12:17,120 --> 00:12:23,600
can be the developer environment

00:12:19,920 --> 00:12:25,600
this is spycharm where typical

00:12:23,600 --> 00:12:27,760
developer task i'm just creating a new

00:12:25,600 --> 00:12:31,920
branch and in this new branch

00:12:27,760 --> 00:12:33,519
i am i want to add to the to the

00:12:31,920 --> 00:12:35,839
knowledge base of the bot so in this

00:12:33,519 --> 00:12:37,920
case i'm adding

00:12:35,839 --> 00:12:39,680
more more knowledge on how to understand

00:12:37,920 --> 00:12:42,079
an intent that is supposed to be

00:12:39,680 --> 00:12:43,040
to to affirm or to deny and this is

00:12:42,079 --> 00:12:45,360
small change

00:12:43,040 --> 00:12:46,880
if for example you don't use automation

00:12:45,360 --> 00:12:47,440
and you just need to do this small

00:12:46,880 --> 00:12:49,600
change

00:12:47,440 --> 00:12:51,360
this is time consuming sometimes in real

00:12:49,600 --> 00:12:52,880
life you actually you only have to do

00:12:51,360 --> 00:12:54,880
that you only have to add

00:12:52,880 --> 00:12:56,959
one sentence or one word and then you

00:12:54,880 --> 00:12:58,800
have to retrain the model for this

00:12:56,959 --> 00:13:00,320
and if you have only for one word or one

00:12:58,800 --> 00:13:01,680
sentence to go through all the steps

00:13:00,320 --> 00:13:03,120
that i was mentioning this is very time

00:13:01,680 --> 00:13:05,120
consuming and efficient

00:13:03,120 --> 00:13:06,639
so what i'm doing here is that okay i'm

00:13:05,120 --> 00:13:09,839
the developer in this case

00:13:06,639 --> 00:13:10,639
and i just needed to add two sentences

00:13:09,839 --> 00:13:13,440
to words

00:13:10,639 --> 00:13:14,240
and then as i say git commit i'm just

00:13:13,440 --> 00:13:16,639
explaining

00:13:14,240 --> 00:13:17,920
remember to add a nice commit message

00:13:16,639 --> 00:13:20,160
and then git push

00:13:17,920 --> 00:13:21,839
and what is happening here when i do get

00:13:20,160 --> 00:13:24,160
push is that

00:13:21,839 --> 00:13:26,240
this will start this this will bring the

00:13:24,160 --> 00:13:27,519
conductor of my orchestra this is what

00:13:26,240 --> 00:13:30,800
will help me to not be

00:13:27,519 --> 00:13:32,560
the one person band and here when i do

00:13:30,800 --> 00:13:35,200
get pushed to my

00:13:32,560 --> 00:13:36,000
remote repository i'm creating a merge

00:13:35,200 --> 00:13:39,600
request

00:13:36,000 --> 00:13:41,680
in in gitlab and and this stage

00:13:39,600 --> 00:13:43,760
is where all the traceability and

00:13:41,680 --> 00:13:46,079
reproducibility of the experiment or

00:13:43,760 --> 00:13:48,079
the bot starts because i will have

00:13:46,079 --> 00:13:50,880
record of every single thing thing

00:13:48,079 --> 00:13:52,959
that happened in the bot who did it when

00:13:50,880 --> 00:13:54,639
it was on it and what was the outcome or

00:13:52,959 --> 00:13:56,480
the accuracy of the model

00:13:54,639 --> 00:13:58,639
and i will have in other words version

00:13:56,480 --> 00:13:59,279
control around a machine learning

00:13:58,639 --> 00:14:01,680
project

00:13:59,279 --> 00:14:02,399
so when i click insert submit merge

00:14:01,680 --> 00:14:05,680
requests

00:14:02,399 --> 00:14:07,440
this is the famous pipeline this cycle

00:14:05,680 --> 00:14:10,079
here

00:14:07,440 --> 00:14:12,000
all of these steps or jobs that are

00:14:10,079 --> 00:14:13,680
being executed here

00:14:12,000 --> 00:14:15,040
if you don't use this you have to do

00:14:13,680 --> 00:14:17,839
them manually

00:14:15,040 --> 00:14:19,680
and prone to error so i you can define

00:14:17,839 --> 00:14:20,959
for your own purposes what is the

00:14:19,680 --> 00:14:24,240
pipeline that you need

00:14:20,959 --> 00:14:26,639
in this case i just want to first test

00:14:24,240 --> 00:14:27,600
that the data that we added to the bot

00:14:26,639 --> 00:14:31,040
in that

00:14:27,600 --> 00:14:32,639
md format is correct i want to see what

00:14:31,040 --> 00:14:34,320
was the things that were added because

00:14:32,639 --> 00:14:35,680
this could be another person adding this

00:14:34,320 --> 00:14:38,079
so i want to have

00:14:35,680 --> 00:14:39,600
version i mean i want to see the diff of

00:14:38,079 --> 00:14:41,680
the

00:14:39,600 --> 00:14:43,360
training data this is actually training

00:14:41,680 --> 00:14:45,920
data and once

00:14:43,360 --> 00:14:46,880
i go back to the pipelines i can see in

00:14:45,920 --> 00:14:49,600
the jobs

00:14:46,880 --> 00:14:50,720
in this case that the first one that was

00:14:49,600 --> 00:14:52,880
the testing the

00:14:50,720 --> 00:14:55,120
the first thing that i needed to know is

00:14:52,880 --> 00:14:55,839
is the data in the correct data format

00:14:55,120 --> 00:14:58,240
because if it

00:14:55,839 --> 00:14:59,199
isn't so there is it is not supposed to

00:14:58,240 --> 00:15:02,320
train the model

00:14:59,199 --> 00:15:03,760
so all of these things the data was

00:15:02,320 --> 00:15:05,120
correct the requirements to build the

00:15:03,760 --> 00:15:07,440
bot was correct and here

00:15:05,120 --> 00:15:08,720
when i click and i enter in each one of

00:15:07,440 --> 00:15:11,680
the runners

00:15:08,720 --> 00:15:12,880
that are executing these jobs i can see

00:15:11,680 --> 00:15:15,519
that

00:15:12,880 --> 00:15:16,160
it's taking my training data and doing

00:15:15,519 --> 00:15:18,160
the test

00:15:16,160 --> 00:15:20,000
in one of these machines and moving

00:15:18,160 --> 00:15:22,000
moving forward in the pipeline so

00:15:20,000 --> 00:15:24,079
this is actually sometimes interesting

00:15:22,000 --> 00:15:27,199
to to observe

00:15:24,079 --> 00:15:28,959
if you want to burn some time and here

00:15:27,199 --> 00:15:30,959
this is the visual representation of the

00:15:28,959 --> 00:15:32,399
pipeline as i said you you will define

00:15:30,959 --> 00:15:34,639
for your own for your own

00:15:32,399 --> 00:15:36,800
purposes in this case what i'm doing is

00:15:34,639 --> 00:15:38,959
that my first step is to test

00:15:36,800 --> 00:15:40,079
the integrity of the data and now that i

00:15:38,959 --> 00:15:42,079
know that the data is correct

00:15:40,079 --> 00:15:43,759
i'm training the model and in this

00:15:42,079 --> 00:15:46,079
training model if i click

00:15:43,759 --> 00:15:47,440
in the runner in this case that is doing

00:15:46,079 --> 00:15:50,959
that i can see

00:15:47,440 --> 00:15:53,680
that the machine in this in this case

00:15:50,959 --> 00:15:54,079
is now training the transformers or the

00:15:53,680 --> 00:15:56,560
neural

00:15:54,079 --> 00:16:00,000
the neural network that will be able to

00:15:56,560 --> 00:16:00,000
understand the natural language

00:16:00,399 --> 00:16:06,639
dialogues and at this stage

00:16:03,759 --> 00:16:08,800
i have traceability of every single

00:16:06,639 --> 00:16:11,120
thing that is going on in the boat

00:16:08,800 --> 00:16:12,160
and along the way i am creating

00:16:11,120 --> 00:16:13,920
artifacts

00:16:12,160 --> 00:16:15,279
so in this case we can see that when

00:16:13,920 --> 00:16:17,920
this is with this job

00:16:15,279 --> 00:16:19,600
finished i have a model artifact this is

00:16:17,920 --> 00:16:21,040
the actual model this is the brain of

00:16:19,600 --> 00:16:22,639
the boat this is what i will serve in

00:16:21,040 --> 00:16:25,600
production or pre-production

00:16:22,639 --> 00:16:27,680
and i have it here with a time stamp and

00:16:25,600 --> 00:16:28,240
who created it and in which pipeline and

00:16:27,680 --> 00:16:31,279
which

00:16:28,240 --> 00:16:33,440
which which commit and here this lastly

00:16:31,279 --> 00:16:34,320
almost the last step is the testing of

00:16:33,440 --> 00:16:36,560
the model

00:16:34,320 --> 00:16:38,560
and this is not the traditional testing

00:16:36,560 --> 00:16:39,360
of software engineering terms what i'm

00:16:38,560 --> 00:16:42,560
doing here

00:16:39,360 --> 00:16:43,680
is that i have a set of dialogues that i

00:16:42,560 --> 00:16:46,800
want to test

00:16:43,680 --> 00:16:48,480
how the model will respond to unknown

00:16:46,800 --> 00:16:51,920
sentences or how good

00:16:48,480 --> 00:16:54,639
it is at understanding instead of hello

00:16:51,920 --> 00:16:56,000
hi or whatsapp if it's able to say okay

00:16:54,639 --> 00:16:59,120
this is a grid

00:16:56,000 --> 00:17:00,480
intent grid so when i finish this

00:16:59,120 --> 00:17:02,959
and all of these things that are

00:17:00,480 --> 00:17:07,120
automated one of the coolest things

00:17:02,959 --> 00:17:09,600
is that i create a paper trail

00:17:07,120 --> 00:17:10,959
with different assets that can help can

00:17:09,600 --> 00:17:13,120
help me later

00:17:10,959 --> 00:17:14,319
to if i want to change something from

00:17:13,120 --> 00:17:16,480
the model

00:17:14,319 --> 00:17:18,000
in this case the the output of the model

00:17:16,480 --> 00:17:20,079
is giving me this jason that is telling

00:17:18,000 --> 00:17:24,079
me what was the confidence that

00:17:20,079 --> 00:17:27,520
one word was belong to the category of

00:17:24,079 --> 00:17:28,319
of denial or affirm or grit so one of

00:17:27,520 --> 00:17:31,360
the cool things

00:17:28,319 --> 00:17:33,280
is that when i use this and for

00:17:31,360 --> 00:17:35,600
for other team members or just for me

00:17:33,280 --> 00:17:37,919
later i can create automatically

00:17:35,600 --> 00:17:39,280
like in this case serving all of these

00:17:37,919 --> 00:17:40,960
json files of

00:17:39,280 --> 00:17:43,280
all these assets like this image that is

00:17:40,960 --> 00:17:44,960
showing me the the distribution of the

00:17:43,280 --> 00:17:48,080
intents that i detected

00:17:44,960 --> 00:17:50,480
in a nice in a nice report nicely format

00:17:48,080 --> 00:17:51,440
like this so if tomorrow you want to

00:17:50,480 --> 00:17:53,679
change something

00:17:51,440 --> 00:17:54,960
you can see okay let me let me compare

00:17:53,679 --> 00:17:56,799
if how

00:17:54,960 --> 00:17:58,480
what is the precision of this model

00:17:56,799 --> 00:17:59,520
compared to my previous one because i

00:17:58,480 --> 00:18:01,679
have reporting

00:17:59,520 --> 00:18:02,799
and you can configure this and you can

00:18:01,679 --> 00:18:05,120
customize

00:18:02,799 --> 00:18:06,720
your your reports and at the end of the

00:18:05,120 --> 00:18:08,480
day this is just

00:18:06,720 --> 00:18:09,679
you cannot improve something that you

00:18:08,480 --> 00:18:10,400
are not measuring so if you are

00:18:09,679 --> 00:18:12,240
measuring

00:18:10,400 --> 00:18:14,880
the precision in every step of your

00:18:12,240 --> 00:18:16,080
experiment and you are using reports for

00:18:14,880 --> 00:18:17,760
this you will make more

00:18:16,080 --> 00:18:19,200
and better informed decisions for the

00:18:17,760 --> 00:18:21,679
next iteration

00:18:19,200 --> 00:18:23,520
so and again all of this is happening

00:18:21,679 --> 00:18:24,799
automatically this is like you just have

00:18:23,520 --> 00:18:26,799
to work once

00:18:24,799 --> 00:18:29,600
to make all of this possible and then

00:18:26,799 --> 00:18:32,240
only with git git commit and get push

00:18:29,600 --> 00:18:33,919
you get all of these benefits in once in

00:18:32,240 --> 00:18:37,200
two single

00:18:33,919 --> 00:18:39,919
uh commands so

00:18:37,200 --> 00:18:41,760
here we can see that my pipeline passed

00:18:39,919 --> 00:18:44,080
so i'm ready to merge and this is ready

00:18:41,760 --> 00:18:45,440
to merge can mean that i'm ready to

00:18:44,080 --> 00:18:47,520
push it to production or to

00:18:45,440 --> 00:18:49,520
pre-production and here

00:18:47,520 --> 00:18:51,440
again the pipeline will this is the

00:18:49,520 --> 00:18:52,160
python that is merging my results to to

00:18:51,440 --> 00:18:54,640
production

00:18:52,160 --> 00:18:56,799
and i want to show you that i have the

00:18:54,640 --> 00:18:58,799
model server in the components view

00:18:56,799 --> 00:19:00,880
at that stage when i was running this

00:18:58,799 --> 00:19:04,240
the the model that was active

00:19:00,880 --> 00:19:05,600
was one from sunday july 19th and when i

00:19:04,240 --> 00:19:08,960
was running this

00:19:05,600 --> 00:19:13,039
um experiment

00:19:08,960 --> 00:19:16,720
added data once i finished and once the

00:19:13,039 --> 00:19:19,280
the the deployment is successful

00:19:16,720 --> 00:19:21,440
as you will see here at this point all

00:19:19,280 --> 00:19:23,520
of the steps that i need for production

00:19:21,440 --> 00:19:25,360
were successful and i am in the last one

00:19:23,520 --> 00:19:26,799
that is deploying to production or

00:19:25,360 --> 00:19:30,240
deploying to my server

00:19:26,799 --> 00:19:33,840
so as you will see here

00:19:30,240 --> 00:19:37,760
once it's done and the deployment is

00:19:33,840 --> 00:19:39,760
successful this on the under a table

00:19:37,760 --> 00:19:41,679
this is calling the api of the model

00:19:39,760 --> 00:19:42,880
server and it's saying i have a better

00:19:41,679 --> 00:19:45,360
model for you

00:19:42,880 --> 00:19:46,960
that as you can see here is a more

00:19:45,360 --> 00:19:48,799
recent one but back there was a more

00:19:46,960 --> 00:19:49,679
recent one and it's telling i have a new

00:19:48,799 --> 00:19:51,679
model for you

00:19:49,679 --> 00:19:52,799
that i want you to use and please make

00:19:51,679 --> 00:19:55,120
active

00:19:52,799 --> 00:19:55,919
and again this was the result this is

00:19:55,120 --> 00:19:58,960
the result

00:19:55,919 --> 00:20:00,080
of the just doing git commit and get

00:19:58,960 --> 00:20:01,200
push

00:20:00,080 --> 00:20:03,120
all of these things are happening

00:20:01,200 --> 00:20:06,080
automatically and then i

00:20:03,120 --> 00:20:06,720
now using these tools like from raza x

00:20:06,080 --> 00:20:09,200
the the

00:20:06,720 --> 00:20:10,320
framework for conversational agents i

00:20:09,200 --> 00:20:12,320
can quickly

00:20:10,320 --> 00:20:13,600
use part of the features that they offer

00:20:12,320 --> 00:20:16,080
to serve

00:20:13,600 --> 00:20:18,000
the chatbot with the newly created model

00:20:16,080 --> 00:20:18,799
to testers or to other people so they

00:20:18,000 --> 00:20:21,520
can they can

00:20:18,799 --> 00:20:24,080
they can chat with the bot and we start

00:20:21,520 --> 00:20:26,830
closing the loop so in this case

00:20:24,080 --> 00:20:28,480
as you can see it was very easy to to

00:20:26,830 --> 00:20:31,440
[Music]

00:20:28,480 --> 00:20:32,240
just deploy to production let's say the

00:20:31,440 --> 00:20:34,960
the model

00:20:32,240 --> 00:20:37,440
and to close the loop using it now we go

00:20:34,960 --> 00:20:39,840
where we are comfortable if you are into

00:20:37,440 --> 00:20:43,039
python for data analysis and what i'm

00:20:39,840 --> 00:20:45,840
doing here is i just want to consume

00:20:43,039 --> 00:20:48,000
and read the database of my bot using

00:20:45,840 --> 00:20:50,159
like jupiter notebook and i want to this

00:20:48,000 --> 00:20:51,520
is just a small example of what you can

00:20:50,159 --> 00:20:54,240
do and i want to see

00:20:51,520 --> 00:20:55,760
i want to understand the the the users

00:20:54,240 --> 00:20:56,320
of this bot that is called adriano what

00:20:55,760 --> 00:20:59,120
are they

00:20:56,320 --> 00:20:59,840
texting to the bot so if you just a

00:20:59,120 --> 00:21:03,039
simple

00:20:59,840 --> 00:21:04,640
simple chart like let's count sentences

00:21:03,039 --> 00:21:06,640
this can give me an impression that for

00:21:04,640 --> 00:21:09,280
example it is saying i'm a bit mad

00:21:06,640 --> 00:21:10,720
call your supervisor so first of all

00:21:09,280 --> 00:21:13,600
there are two benefits here

00:21:10,720 --> 00:21:14,400
i am learning how the real users what

00:21:13,600 --> 00:21:16,400
are the words

00:21:14,400 --> 00:21:18,480
that they are using and then i can take

00:21:16,400 --> 00:21:19,120
this and add it to my knowledge base of

00:21:18,480 --> 00:21:20,799
the bot

00:21:19,120 --> 00:21:22,640
and also i can use all of this

00:21:20,799 --> 00:21:24,000
information to create for example an

00:21:22,640 --> 00:21:25,919
emotion detector

00:21:24,000 --> 00:21:27,600
understand that this is negative so if

00:21:25,919 --> 00:21:30,640
this is negative what should i do what

00:21:27,600 --> 00:21:34,000
actually what custom action can i create

00:21:30,640 --> 00:21:34,640
and in this case there are more contents

00:21:34,000 --> 00:21:37,039
of

00:21:34,640 --> 00:21:39,919
if the course is expired because this is

00:21:37,039 --> 00:21:39,919
inspired by a

00:21:40,799 --> 00:21:46,159
fake platform learning that we sell

00:21:43,679 --> 00:21:48,400
courses this is the whole intent so

00:21:46,159 --> 00:21:50,159
in this case you can even drive business

00:21:48,400 --> 00:21:51,520
decisions you can say this the people

00:21:50,159 --> 00:21:53,120
are asking about

00:21:51,520 --> 00:21:54,559
these questions about the business if

00:21:53,120 --> 00:21:56,640
the course is expired

00:21:54,559 --> 00:21:58,880
and then you add it and back you go back

00:21:56,640 --> 00:22:02,159
to the to your chatbot and you enhance

00:21:58,880 --> 00:22:02,799
the knowledge base so with this i want

00:22:02,159 --> 00:22:06,240
to

00:22:02,799 --> 00:22:09,919
almost finish showing you that

00:22:06,240 --> 00:22:11,600
once you create you create your your

00:22:09,919 --> 00:22:13,919
machine learning pipelines and you are

00:22:11,600 --> 00:22:17,200
ready to

00:22:13,919 --> 00:22:19,520
start implementing automations you have

00:22:17,200 --> 00:22:21,919
a full-blown orchestra for you

00:22:19,520 --> 00:22:23,760
and you only care about the content and

00:22:21,919 --> 00:22:25,840
the the intelligence on the bot

00:22:23,760 --> 00:22:27,840
because you you do one effort at

00:22:25,840 --> 00:22:29,679
configuring and using these tools and

00:22:27,840 --> 00:22:30,240
develop devops philosophy for machine

00:22:29,679 --> 00:22:32,320
learning

00:22:30,240 --> 00:22:34,320
and then you just enjoy the benefits

00:22:32,320 --> 00:22:36,159
that if you work alone

00:22:34,320 --> 00:22:38,080
makes your life easier if you work in a

00:22:36,159 --> 00:22:39,679
team this will increase communication

00:22:38,080 --> 00:22:41,200
and collaboration with other teams as i

00:22:39,679 --> 00:22:41,679
said there are technical people and but

00:22:41,200 --> 00:22:43,280
there are

00:22:41,679 --> 00:22:45,600
also other people that they just add

00:22:43,280 --> 00:22:47,679
dialogues

00:22:45,600 --> 00:22:49,520
by using developer workflows and

00:22:47,679 --> 00:22:51,440
adopting ci cd

00:22:49,520 --> 00:22:53,120
you will have a more reliable solution

00:22:51,440 --> 00:22:53,679
with version control that can be easily

00:22:53,120 --> 00:22:56,000
updated

00:22:53,679 --> 00:22:57,440
and you can reproduce that is one of the

00:22:56,000 --> 00:22:59,200
main challenges of

00:22:57,440 --> 00:23:00,559
of machine learning that it works in my

00:22:59,200 --> 00:23:02,080
machine but it doesn't work the same

00:23:00,559 --> 00:23:03,600
other machine when you have this

00:23:02,080 --> 00:23:05,360
you are ensuring you're you're moving

00:23:03,600 --> 00:23:07,039
one step forward to have more

00:23:05,360 --> 00:23:08,640
reproducible solutions

00:23:07,039 --> 00:23:11,760
and very important and this is the way

00:23:08,640 --> 00:23:13,840
that i like to see it is that

00:23:11,760 --> 00:23:15,120
you can start from manual development

00:23:13,840 --> 00:23:17,440
like i used to do

00:23:15,120 --> 00:23:19,600
four years ago or three and then when

00:23:17,440 --> 00:23:20,480
you discover the power of pipelines and

00:23:19,600 --> 00:23:23,120
how you can

00:23:20,480 --> 00:23:24,799
outsource let's say to a devops platform

00:23:23,120 --> 00:23:26,640
all of the manual steps

00:23:24,799 --> 00:23:27,840
you are just setting yourself for an

00:23:26,640 --> 00:23:29,840
end-to-end automation

00:23:27,840 --> 00:23:32,000
where you can start thinking of how can

00:23:29,840 --> 00:23:34,000
i automate business processes

00:23:32,000 --> 00:23:36,320
imagine that instead of me calling the

00:23:34,000 --> 00:23:38,720
api of the rasa server to bring the

00:23:36,320 --> 00:23:41,840
conversation and then start using

00:23:38,720 --> 00:23:44,000
jupiter lab or jupiter notebook i can

00:23:41,840 --> 00:23:44,880
create a full end-to-end automation

00:23:44,000 --> 00:23:47,360
where

00:23:44,880 --> 00:23:49,919
even this call to the api will be done

00:23:47,360 --> 00:23:51,760
automatically and even the exploration

00:23:49,919 --> 00:23:53,760
like the continent of words can be also

00:23:51,760 --> 00:23:55,440
automated and i just get as

00:23:53,760 --> 00:23:57,039
a business person let's say or the

00:23:55,440 --> 00:23:59,440
manager of this project

00:23:57,039 --> 00:24:00,400
a report with the most frequent free

00:23:59,440 --> 00:24:03,440
frequent words

00:24:00,400 --> 00:24:04,400
that the bot is is receiving so this

00:24:03,440 --> 00:24:07,360
just set us

00:24:04,400 --> 00:24:08,799
for let's say faster iteration and

00:24:07,360 --> 00:24:11,600
better chatbots

00:24:08,799 --> 00:24:13,600
and if you want to know more i have

00:24:11,600 --> 00:24:16,640
created a starter project

00:24:13,600 --> 00:24:18,320
in this in gitlab where you can clone

00:24:16,640 --> 00:24:19,679
the project and you can basically

00:24:18,320 --> 00:24:22,559
reproduce

00:24:19,679 --> 00:24:24,320
what i show you in the video so now we

00:24:22,559 --> 00:24:33,840
can move if you have

00:24:24,320 --> 00:24:33,840
questions i will be happy to answer

00:24:35,679 --> 00:24:38,720
okay first question

00:24:38,960 --> 00:24:45,360
so yes in this case uh rasa

00:24:42,080 --> 00:24:48,480
i created a virtual machine in google

00:24:45,360 --> 00:24:51,600
and i install it using uh the one the

00:24:48,480 --> 00:24:55,120
docker compose one so

00:24:51,600 --> 00:24:58,400
for me i'm using it as my own

00:24:55,120 --> 00:25:01,840
instance in the cloud self-hosted

00:24:58,400 --> 00:25:01,840
yeah it's not sass

00:25:02,880 --> 00:25:07,440
another question it says what do you

00:25:05,039 --> 00:25:11,200
like about your model in the perpetrator

00:25:07,440 --> 00:25:12,159
so you can lock whatever you want if

00:25:11,200 --> 00:25:14,480
your tooling

00:25:12,159 --> 00:25:16,320
is creating this in the actual locks in

00:25:14,480 --> 00:25:16,880
this case for this example i just wanted

00:25:16,320 --> 00:25:20,000
to know

00:25:16,880 --> 00:25:22,080
the f1 score the precision

00:25:20,000 --> 00:25:24,320
and the accuracy of the bot when it's

00:25:22,080 --> 00:25:25,360
understanding when it's when is facing

00:25:24,320 --> 00:25:27,360
some sentence

00:25:25,360 --> 00:25:29,279
but you if you want because this is part

00:25:27,360 --> 00:25:30,400
of the log of the solution it is also

00:25:29,279 --> 00:25:32,480
having the weights

00:25:30,400 --> 00:25:34,960
so you can also add this and this is the

00:25:32,480 --> 00:25:36,640
power i was saying because

00:25:34,960 --> 00:25:38,159
then you start to realize what are the

00:25:36,640 --> 00:25:39,039
things that maybe make sense for you to

00:25:38,159 --> 00:25:41,200
log

00:25:39,039 --> 00:25:43,840
and you can create a report with with

00:25:41,200 --> 00:25:43,840
that

00:25:46,320 --> 00:25:52,480
yes i will i will share everything

00:25:50,000 --> 00:25:52,480
for sure

00:25:53,440 --> 00:26:00,880
okay and is there more questions

00:25:56,960 --> 00:26:03,440
i think no so folks thank you very much

00:26:00,880 --> 00:26:04,400
i'm very happy to be here i hope that i

00:26:03,440 --> 00:26:06,960
can inspire you to

00:26:04,400 --> 00:26:09,120
go for automation and devops in machine

00:26:06,960 --> 00:26:11,840
learning of what they are calling it now

00:26:09,120 --> 00:26:13,679
mlops or machine learning operations

00:26:11,840 --> 00:26:16,320
that is like a very cool name

00:26:13,679 --> 00:26:16,720
but it's devops with machine learning uh

00:26:16,320 --> 00:26:19,120
how

00:26:16,720 --> 00:26:20,880
did i did it okay another question how

00:26:19,120 --> 00:26:21,600
do you set up the pipeline so yes i can

00:26:20,880 --> 00:26:26,240
show you

00:26:21,600 --> 00:26:28,799
so let me share again my screen

00:26:26,240 --> 00:26:29,840
and i will show how i set up the the

00:26:28,799 --> 00:26:32,080
pipeline

00:26:29,840 --> 00:26:33,760
so in this project that you can clone is

00:26:32,080 --> 00:26:36,400
public and you can use

00:26:33,760 --> 00:26:38,320
in in gitlab there is a file that is

00:26:36,400 --> 00:26:41,360
called the gitlab ci jammel

00:26:38,320 --> 00:26:43,679
that in this file i defined the jobs

00:26:41,360 --> 00:26:44,720
all of these things that you saw step by

00:26:43,679 --> 00:26:47,279
step the

00:26:44,720 --> 00:26:48,880
to in pre-production or production they

00:26:47,279 --> 00:26:51,520
are defined under this format in

00:26:48,880 --> 00:26:52,000
under this jam so this is actually what

00:26:51,520 --> 00:26:55,279
made it

00:26:52,000 --> 00:26:57,919
possible that i said once i do git

00:26:55,279 --> 00:26:58,799
push to this remote this is bringing

00:26:57,919 --> 00:27:01,679
this image

00:26:58,799 --> 00:27:02,000
from from rasa and it's executing all of

00:27:01,679 --> 00:27:06,400
these

00:27:02,000 --> 00:27:09,679
stages in the in in in gitlab

00:27:06,400 --> 00:27:11,520
and it every every step that is executed

00:27:09,679 --> 00:27:13,679
is creating an artifact like

00:27:11,520 --> 00:27:14,880
example this is the report that i was

00:27:13,679 --> 00:27:17,200
showing in the wiki

00:27:14,880 --> 00:27:17,919
you can you can create more more more

00:27:17,200 --> 00:27:21,120
artifacts

00:27:17,919 --> 00:27:23,600
it is up to you depending on each

00:27:21,120 --> 00:27:24,480
each job and in this one for example

00:27:23,600 --> 00:27:27,039
this is the one

00:27:24,480 --> 00:27:28,799
that i'm deploying to the server so by

00:27:27,039 --> 00:27:31,520
using tools like this

00:27:28,799 --> 00:27:33,840
i can in one in one shot let's say

00:27:31,520 --> 00:27:35,679
configure the where is the model my my

00:27:33,840 --> 00:27:36,880
server model what is the end point that

00:27:35,679 --> 00:27:38,720
i want to call

00:27:36,880 --> 00:27:40,559
and all of these things that just happen

00:27:38,720 --> 00:27:41,840
automatically and this is the script for

00:27:40,559 --> 00:27:44,320
example that i show you

00:27:41,840 --> 00:27:45,279
that once i am happy with the results of

00:27:44,320 --> 00:27:47,840
my model

00:27:45,279 --> 00:27:48,799
if the accuracy or the f1 score is is

00:27:47,840 --> 00:27:51,440
acceptable

00:27:48,799 --> 00:27:52,880
i can make it active the model and start

00:27:51,440 --> 00:27:54,399
serving it

00:27:52,880 --> 00:27:56,080
in production so it's able to start

00:27:54,399 --> 00:27:58,799
having conversations with

00:27:56,080 --> 00:27:59,279
with users so i hope this answer your

00:27:58,799 --> 00:28:01,039
question

00:27:59,279 --> 00:28:02,799
this is how you define the pipeline and

00:28:01,039 --> 00:28:06,240
this is all in gitlab and it's just

00:28:02,799 --> 00:28:06,240
using this simple jumbo file

00:28:10,240 --> 00:28:14,159
yes if you this is a boilerplate code

00:28:12,720 --> 00:28:16,000
this is a very basic

00:28:14,159 --> 00:28:17,919
this is very basic one this is like the

00:28:16,000 --> 00:28:19,279
steps that you just do a git push and

00:28:17,919 --> 00:28:21,279
then you have it on production

00:28:19,279 --> 00:28:23,120
so i will i will say that this is my

00:28:21,279 --> 00:28:24,880
boilerplate code that you can just clone

00:28:23,120 --> 00:28:30,399
and from here you can change

00:28:24,880 --> 00:28:34,000
for up to your needs

00:28:30,399 --> 00:28:36,720
right awesome so thank you team

00:28:34,000 --> 00:28:38,159
i'm very happy to be here with you i

00:28:36,720 --> 00:28:38,880
hope that next year we can meet in

00:28:38,159 --> 00:28:42,159
person

00:28:38,880 --> 00:28:44,960
and exchange beers and books

00:28:42,159 --> 00:28:57,039
so i'm leaving now thank you very much

00:28:44,960 --> 00:28:57,039

YouTube URL: https://www.youtube.com/watch?v=6mLAOgFoEJk


