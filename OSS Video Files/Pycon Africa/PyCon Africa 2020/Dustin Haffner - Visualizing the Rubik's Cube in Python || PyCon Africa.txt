Title: Dustin Haffner - Visualizing the Rubik's Cube in Python || PyCon Africa
Publication date: 2020-08-30
Playlist: PyCon Africa 2020
Description: 
	The Rubik's Cube is a fun puzzle, enjoyed by people of all ages. It has some very interesting mathematical properties. In this talk we will explore the Rubik's Cube under the lens of Graph Theory and use Python to create a visualization of the Rubik's Cube for the web.
Captions: 
	00:00:15,040 --> 00:00:17,920
cool

00:00:16,160 --> 00:00:19,760
so the name of this talk is visualizing

00:00:17,920 --> 00:00:22,640
rubik's cube with python

00:00:19,760 --> 00:00:24,000
uh i think uh you know the two links

00:00:22,640 --> 00:00:25,359
here are shown as well they're placed

00:00:24,000 --> 00:00:26,480
pasted in the chat if you'd rather just

00:00:25,359 --> 00:00:28,960
click them

00:00:26,480 --> 00:00:30,080
um so first i'll start off with a little

00:00:28,960 --> 00:00:32,320
bit about me

00:00:30,080 --> 00:00:34,399
my name is dustin hafner i'm a senior

00:00:32,320 --> 00:00:37,440
software engineer at netflix i'm based

00:00:34,399 --> 00:00:38,879
in oakland california as well netflix is

00:00:37,440 --> 00:00:40,719
based in silicon valley it's all

00:00:38,879 --> 00:00:42,719
generally the same place

00:00:40,719 --> 00:00:44,160
i've been at netflix for about three and

00:00:42,719 --> 00:00:46,879
a half year or three years

00:00:44,160 --> 00:00:48,480
in december i'm nigerian american born

00:00:46,879 --> 00:00:50,079
and raised in america but i

00:00:48,480 --> 00:00:51,760
spend time in nigeria when there's not

00:00:50,079 --> 00:00:54,960
pandemics going on

00:00:51,760 --> 00:00:56,239
um so i always like to to do things that

00:00:54,960 --> 00:00:58,640
address you know both my love of

00:00:56,239 --> 00:00:59,920
programming my love of nigerian culture

00:00:58,640 --> 00:01:03,440
west african culture

00:00:59,920 --> 00:01:05,439
etc i've been a python user since python

00:01:03,440 --> 00:01:06,960
2.6

00:01:05,439 --> 00:01:08,720
but as we all know that doesn't really

00:01:06,960 --> 00:01:10,880
mean anything you know it's all about

00:01:08,720 --> 00:01:12,000
the code you right now and you know some

00:01:10,880 --> 00:01:15,119
of the best programmers

00:01:12,000 --> 00:01:17,119
are those newer ones but that's when i

00:01:15,119 --> 00:01:18,479
started using python and

00:01:17,119 --> 00:01:20,880
i've been using it ever since it's my

00:01:18,479 --> 00:01:23,680
favorite language i don't even use it

00:01:20,880 --> 00:01:24,880
too much on the job but uh for hobby

00:01:23,680 --> 00:01:28,080
code and etc

00:01:24,880 --> 00:01:30,640
i love to use python and you can find me

00:01:28,080 --> 00:01:32,720
at d hefner and most social networks

00:01:30,640 --> 00:01:34,159
twitter github in linkedin you can

00:01:32,720 --> 00:01:37,439
google my full name

00:01:34,159 --> 00:01:40,079
always welcome to connect with me

00:01:37,439 --> 00:01:41,840
so cool get into the talk now so first

00:01:40,079 --> 00:01:44,240
i'll talk about the goal

00:01:41,840 --> 00:01:45,840
and this is kind of a goal relevant to

00:01:44,240 --> 00:01:48,320
this talk but a goal

00:01:45,840 --> 00:01:50,399
i think more relevant to uh personal

00:01:48,320 --> 00:01:53,600
projects in general

00:01:50,399 --> 00:01:55,200
uh exploring new tools you know on a day

00:01:53,600 --> 00:01:58,000
to day basis we don't always get the

00:01:55,200 --> 00:01:59,759
chance to use the coolest new thing or

00:01:58,000 --> 00:02:01,680
use the coolest new framework or tools

00:01:59,759 --> 00:02:04,240
so it's always fun to

00:02:01,680 --> 00:02:05,280
take personal projects to as an excuse

00:02:04,240 --> 00:02:07,119
to do that

00:02:05,280 --> 00:02:09,119
so in this project my goal was to

00:02:07,119 --> 00:02:11,360
explore graphql

00:02:09,119 --> 00:02:14,400
network visualization so displaying

00:02:11,360 --> 00:02:16,480
graphs displaying nodes edges etc

00:02:14,400 --> 00:02:18,319
and play with react javascript this is a

00:02:16,480 --> 00:02:19,680
python talk but you know at times we

00:02:18,319 --> 00:02:20,080
need to write front ends and we need to

00:02:19,680 --> 00:02:21,760
write

00:02:20,080 --> 00:02:23,200
code that runs in the browser so

00:02:21,760 --> 00:02:26,879
naturally we all tend to

00:02:23,200 --> 00:02:28,319
javascript um so just a quick overview

00:02:26,879 --> 00:02:29,599
of this talk

00:02:28,319 --> 00:02:31,760
i'm going to talk a little bit about

00:02:29,599 --> 00:02:33,519
rubik's cube what it is

00:02:31,760 --> 00:02:34,959
for anybody not familiar who hasn't

00:02:33,519 --> 00:02:37,599
played with one

00:02:34,959 --> 00:02:38,160
i'll talk about graphs as a concept i

00:02:37,599 --> 00:02:40,560
think we all

00:02:38,160 --> 00:02:43,200
know graphs in day to day life but i'll

00:02:40,560 --> 00:02:44,560
just give a quick definition

00:02:43,200 --> 00:02:46,640
and then i'll talk about cube graph

00:02:44,560 --> 00:02:48,080
which is this code i wrote to kind of

00:02:46,640 --> 00:02:50,000
tie together these two

00:02:48,080 --> 00:02:51,280
concepts the rubik's cube and graphs in

00:02:50,000 --> 00:02:54,400
general

00:02:51,280 --> 00:02:56,400
so let's jump into it first uh i'll show

00:02:54,400 --> 00:02:58,400
what a rubik's cube is

00:02:56,400 --> 00:02:59,599
um so this is a solved rubik's cube it's

00:02:58,400 --> 00:03:02,720
actually mine i have

00:02:59,599 --> 00:03:06,319
the scrambled version here

00:03:02,720 --> 00:03:08,720
but rubik's cube is invented in 1974 by

00:03:06,319 --> 00:03:12,080
a hungarian named erno rubik

00:03:08,720 --> 00:03:13,920
uh it can be scrambled in in 43

00:03:12,080 --> 00:03:14,879
quintillion ways and that's just a huge

00:03:13,920 --> 00:03:17,519
number i wrote it

00:03:14,879 --> 00:03:18,720
um i wrote it out just to emphasize it's

00:03:17,519 --> 00:03:20,640
10 followed by

00:03:18,720 --> 00:03:23,040
or one followed by 18 zeros you know

00:03:20,640 --> 00:03:25,040
times 43

00:03:23,040 --> 00:03:26,720
and there's many variations on the cube

00:03:25,040 --> 00:03:27,440
and the one picture here is the three by

00:03:26,720 --> 00:03:29,200
three by three

00:03:27,440 --> 00:03:31,840
you know there's the four by four five

00:03:29,200 --> 00:03:32,480
by five etc there's sudoku cubes puzzle

00:03:31,840 --> 00:03:34,239
cubes

00:03:32,480 --> 00:03:35,920
all types of varieties but this it's a

00:03:34,239 --> 00:03:38,080
popular puzzle it's

00:03:35,920 --> 00:03:40,159
for me i like it because it's sort of

00:03:38,080 --> 00:03:42,000
simple in concept but it's not actually

00:03:40,159 --> 00:03:44,000
trivial to solve

00:03:42,000 --> 00:03:46,319
until you learn it then it feels easy

00:03:44,000 --> 00:03:48,720
like most things

00:03:46,319 --> 00:03:49,599
so uh now i'll digress a bit just to

00:03:48,720 --> 00:03:51,920
talk about

00:03:49,599 --> 00:03:53,200
cube notation which is relevant later in

00:03:51,920 --> 00:03:56,400
these slides

00:03:53,200 --> 00:03:59,360
um so breaking it down

00:03:56,400 --> 00:04:00,959
the rubik's cube has six faces uh we

00:03:59,360 --> 00:04:03,680
denote them

00:04:00,959 --> 00:04:04,560
by kind of their orientation so l for

00:04:03,680 --> 00:04:07,840
left

00:04:04,560 --> 00:04:09,360
f for front right for the right face and

00:04:07,840 --> 00:04:12,400
so forth bottom down

00:04:09,360 --> 00:04:15,840
upwards each of these faces

00:04:12,400 --> 00:04:20,000
has nine squares and

00:04:15,840 --> 00:04:23,440
going in order of uh certain faces urf

00:04:20,000 --> 00:04:24,160
dlb we can encode any scramble of the

00:04:23,440 --> 00:04:27,199
cube with

00:04:24,160 --> 00:04:28,240
54 letters just by ordering out each

00:04:27,199 --> 00:04:31,680
face color

00:04:28,240 --> 00:04:32,880
from 1 to 54. so below at the bottom of

00:04:31,680 --> 00:04:35,840
this slide we see

00:04:32,880 --> 00:04:37,919
an encoding of the solved cube right as

00:04:35,840 --> 00:04:40,080
a string of 54.

00:04:37,919 --> 00:04:40,960
so going on i'll talk about turn

00:04:40,080 --> 00:04:42,960
notation

00:04:40,960 --> 00:04:44,320
so what is a turn uh in terms of a

00:04:42,960 --> 00:04:47,520
rubik's cube

00:04:44,320 --> 00:04:49,600
a turn is a rotation on a face

00:04:47,520 --> 00:04:50,720
so to the right here we see four

00:04:49,600 --> 00:04:54,560
examples of turns

00:04:50,720 --> 00:04:57,199
a right turn a right prime which is

00:04:54,560 --> 00:04:58,800
to mean right turn the right face 90

00:04:57,199 --> 00:05:01,919
degrees clockwise

00:04:58,800 --> 00:05:05,440
i'll demonstrate it here also on camera

00:05:01,919 --> 00:05:05,840
just a simple turn and r prime would

00:05:05,440 --> 00:05:08,960
mean

00:05:05,840 --> 00:05:11,680
the same turn but the other direction

00:05:08,960 --> 00:05:12,560
and similarly we can use u2 to say turn

00:05:11,680 --> 00:05:15,759
this face

00:05:12,560 --> 00:05:18,639
turn this upper face 180 degrees

00:05:15,759 --> 00:05:18,960
so the utility of that is you can list

00:05:18,639 --> 00:05:22,080
out

00:05:18,960 --> 00:05:23,039
lists of turns to describe any scramble

00:05:22,080 --> 00:05:25,039
state of the cube

00:05:23,039 --> 00:05:27,039
right if i tell you to take the cube and

00:05:25,039 --> 00:05:27,520
and do this series of turns i can tell

00:05:27,039 --> 00:05:30,479
you

00:05:27,520 --> 00:05:32,639
what cube you'll end up at so it sort of

00:05:30,479 --> 00:05:35,520
forms a path

00:05:32,639 --> 00:05:37,039
and with that notion we'll touch on

00:05:35,520 --> 00:05:39,360
graphs briefly

00:05:37,039 --> 00:05:40,880
so we might all come to this without

00:05:39,360 --> 00:05:42,800
with a different understanding of graphs

00:05:40,880 --> 00:05:44,960
but just to get us all aligned uh just

00:05:42,800 --> 00:05:46,400
give a quick example of a graph here as

00:05:44,960 --> 00:05:49,520
we talk about

00:05:46,400 --> 00:05:52,240
um just a series of of circles and

00:05:49,520 --> 00:05:54,560
and lines basically so the fancy

00:05:52,240 --> 00:05:56,639
wikipedia definition you'll find says

00:05:54,560 --> 00:05:59,520
mathematical structures used to model

00:05:56,639 --> 00:06:01,120
pairwise relations between objects

00:05:59,520 --> 00:06:03,280
but concretely in this picture that

00:06:01,120 --> 00:06:06,240
means that okay let's take

00:06:03,280 --> 00:06:07,600
the nodes of the graph to be these

00:06:06,240 --> 00:06:09,680
numbers one two three four five

00:06:07,600 --> 00:06:11,280
six and then we see that between certain

00:06:09,680 --> 00:06:14,400
numbers there's links

00:06:11,280 --> 00:06:17,039
those are the edges they join two nodes

00:06:14,400 --> 00:06:19,120
or two numbers in this case and uh we

00:06:17,039 --> 00:06:19,600
see some examples of edges four comma

00:06:19,120 --> 00:06:22,720
six

00:06:19,600 --> 00:06:24,479
four comma five five comma one and so

00:06:22,720 --> 00:06:27,360
forth

00:06:24,479 --> 00:06:28,000
and in some graphs edges can be given a

00:06:27,360 --> 00:06:30,160
direction

00:06:28,000 --> 00:06:31,600
so the classical example of this would

00:06:30,160 --> 00:06:33,919
be google maps

00:06:31,600 --> 00:06:35,919
or anything that does specific routing

00:06:33,919 --> 00:06:38,080
flight itineraries etc

00:06:35,919 --> 00:06:40,080
and we see an example of that directed

00:06:38,080 --> 00:06:42,639
graph with edges to the to the right on

00:06:40,080 --> 00:06:42,639
this slide

00:06:43,520 --> 00:06:46,880
cool so math definitions out of the way

00:06:46,479 --> 00:06:48,160
uh

00:06:46,880 --> 00:06:51,039
what we're here to do is tie this

00:06:48,160 --> 00:06:54,639
together and with that um

00:06:51,039 --> 00:06:54,639
that would be with cube graph for me

00:06:54,720 --> 00:06:58,479
before this i'll just talk about um yeah

00:06:57,840 --> 00:07:00,880
why did i

00:06:58,479 --> 00:07:02,000
like how did i come up with this idea i

00:07:00,880 --> 00:07:03,520
i've always been

00:07:02,000 --> 00:07:05,199
i guess i learned how to solve a rubik's

00:07:03,520 --> 00:07:06,880
cube in college and i've always been

00:07:05,199 --> 00:07:07,840
kind of a nerd about it i studied math

00:07:06,880 --> 00:07:09,599
in college

00:07:07,840 --> 00:07:11,280
but i love the rubik's cube because it's

00:07:09,599 --> 00:07:12,960
a good um

00:07:11,280 --> 00:07:14,800
it's a good puzzle and having a puzzle

00:07:12,960 --> 00:07:17,199
that you know you can always solve

00:07:14,800 --> 00:07:19,039
it i feel like it gave me a quick route

00:07:17,199 --> 00:07:20,800
to get out of a mental block or you know

00:07:19,039 --> 00:07:21,199
creative rut if i'm dealing with a bug

00:07:20,800 --> 00:07:24,080
that

00:07:21,199 --> 00:07:26,080
is you know racking my brain i can solve

00:07:24,080 --> 00:07:27,680
a rubik's cube real quick and hopefully

00:07:26,080 --> 00:07:30,080
clear my mind enough to get an insight

00:07:27,680 --> 00:07:32,160
to keep pushing onto that problem so

00:07:30,080 --> 00:07:34,000
that's kind of what what sparked my

00:07:32,160 --> 00:07:36,080
interest in exploring this rubik's cube

00:07:34,000 --> 00:07:38,080
via code

00:07:36,080 --> 00:07:39,280
so just a quick visualization almost a

00:07:38,080 --> 00:07:42,639
preview of

00:07:39,280 --> 00:07:42,639
the app itself that i wrote

00:07:43,440 --> 00:07:47,599
so now we get to visualizing the cubic

00:07:45,520 --> 00:07:48,960
the cube graph with python so first what

00:07:47,599 --> 00:07:50,639
is this mean cube graph

00:07:48,960 --> 00:07:52,800
well i've just described what a rubik's

00:07:50,639 --> 00:07:56,160
cube is i just described what a graph

00:07:52,800 --> 00:07:58,560
is um so let's tie them together

00:07:56,160 --> 00:07:59,680
so let's call the cube graph the graph

00:07:58,560 --> 00:08:02,879
in which

00:07:59,680 --> 00:08:06,080
all all rubik's cube states are nodes

00:08:02,879 --> 00:08:08,720
and those nodes are each connected by

00:08:06,080 --> 00:08:09,759
one move so essentially meaning you can

00:08:08,720 --> 00:08:12,560
get to

00:08:09,759 --> 00:08:13,039
node a from node a to one node b by

00:08:12,560 --> 00:08:16,560
turning

00:08:13,039 --> 00:08:16,560
the cube in some direction

00:08:17,759 --> 00:08:21,680
and with this definition let's make the

00:08:20,560 --> 00:08:23,199
goal

00:08:21,680 --> 00:08:25,120
to visualize this cube graph in

00:08:23,199 --> 00:08:27,520
interesting ways

00:08:25,120 --> 00:08:29,840
so how do we do that first now let's

00:08:27,520 --> 00:08:33,039
talk about the anatomy of the app itself

00:08:29,840 --> 00:08:36,240
uh back end first api first

00:08:33,039 --> 00:08:38,000
i chose to use flask and graphql

00:08:36,240 --> 00:08:40,000
and you might see an asterisk on that

00:08:38,000 --> 00:08:41,839
graphql and the only reason

00:08:40,000 --> 00:08:44,000
is because it has the word graph in it

00:08:41,839 --> 00:08:45,600
and because it's a shiny new tool in the

00:08:44,000 --> 00:08:47,200
industry and i wanted a reason to

00:08:45,600 --> 00:08:49,680
learn it and play with it at least in

00:08:47,200 --> 00:08:53,040
python

00:08:49,680 --> 00:08:54,080
so with that i started the back end

00:08:53,040 --> 00:08:57,600
first the graphql

00:08:54,080 --> 00:08:59,600
server and i

00:08:57,600 --> 00:09:00,720
started schema first which if you dive

00:08:59,600 --> 00:09:02,800
into graphql

00:09:00,720 --> 00:09:04,959
um there's a heavy emphasis on

00:09:02,800 --> 00:09:06,080
describing your data first before you

00:09:04,959 --> 00:09:07,839
implement it so

00:09:06,080 --> 00:09:09,120
you kind of get the the picture straight

00:09:07,839 --> 00:09:10,880
in your head

00:09:09,120 --> 00:09:13,680
so working from our previous definition

00:09:10,880 --> 00:09:15,200
on cubes we say cubes are 54 character

00:09:13,680 --> 00:09:18,880
strings

00:09:15,200 --> 00:09:22,160
and that in graphql we will take a query

00:09:18,880 --> 00:09:24,320
to get a path between any two cubes

00:09:22,160 --> 00:09:25,920
uh so this is using graphql parlance

00:09:24,320 --> 00:09:28,399
where i describe a type and then i

00:09:25,920 --> 00:09:30,959
describe a query on that type

00:09:28,399 --> 00:09:32,399
and to do this i used a pip package

00:09:30,959 --> 00:09:35,600
called ariadna

00:09:32,399 --> 00:09:39,680
that uh exposes graphql utilities

00:09:35,600 --> 00:09:41,680
in a really clean way so i'll show a

00:09:39,680 --> 00:09:43,040
code example just a plain screenshot

00:09:41,680 --> 00:09:46,800
from vs code

00:09:43,040 --> 00:09:49,920
of this schema that i used

00:09:46,800 --> 00:09:52,399
so basically you see three types here

00:09:49,920 --> 00:09:54,240
type query type cube and type step

00:09:52,399 --> 00:09:56,480
and this is essentially just giving me

00:09:54,240 --> 00:09:59,600
the machinery that i need to ask

00:09:56,480 --> 00:10:01,279
how do i get from cube a to cube b

00:09:59,600 --> 00:10:03,279
uh and what steps do i need to take

00:10:01,279 --> 00:10:07,040
there so concretely

00:10:03,279 --> 00:10:10,160
cube is our node and step is the edge

00:10:07,040 --> 00:10:12,160
that might connect nodes

00:10:10,160 --> 00:10:15,120
so what does this look like in code so

00:10:12,160 --> 00:10:17,200
again the picture of the schema itself

00:10:15,120 --> 00:10:18,720
we know that ultimately we're talking

00:10:17,200 --> 00:10:21,360
python here so what does that look like

00:10:18,720 --> 00:10:23,920
in python

00:10:21,360 --> 00:10:25,040
so to the right is the implementation of

00:10:23,920 --> 00:10:28,160
the schema

00:10:25,040 --> 00:10:30,079
and anybody who's familiar with

00:10:28,160 --> 00:10:31,360
flask or has played with any any

00:10:30,079 --> 00:10:32,399
framework that makes heavy use of

00:10:31,360 --> 00:10:35,600
decorators

00:10:32,399 --> 00:10:38,160
should should look at this code and

00:10:35,600 --> 00:10:39,760
feel familiar and that's exactly how i

00:10:38,160 --> 00:10:40,640
felt when i first saw it i said okay i

00:10:39,760 --> 00:10:42,399
can just

00:10:40,640 --> 00:10:43,839
write some functions and then tie them

00:10:42,399 --> 00:10:45,920
to the fields that i

00:10:43,839 --> 00:10:46,959
define in my graphql schema that's easy

00:10:45,920 --> 00:10:48,560
enough

00:10:46,959 --> 00:10:51,120
and really the entire server is

00:10:48,560 --> 00:10:51,920
essentially shown in these like 40 lines

00:10:51,120 --> 00:10:55,200
of code

00:10:51,920 --> 00:10:57,040
the only omission was you know the small

00:10:55,200 --> 00:10:59,120
amount of glue code to make it work with

00:10:57,040 --> 00:11:02,560
flask which was very nice so

00:10:59,120 --> 00:11:04,560
again python tooling saves the day and

00:11:02,560 --> 00:11:06,160
lets me focus more on the task that i

00:11:04,560 --> 00:11:08,959
want to do

00:11:06,160 --> 00:11:11,600
so with that those pieces together what

00:11:08,959 --> 00:11:13,680
what an example graphql query look like

00:11:11,600 --> 00:11:15,519
and again you're free to click this

00:11:13,680 --> 00:11:16,320
graphql link and try it out yourself but

00:11:15,519 --> 00:11:18,480
i'll show

00:11:16,320 --> 00:11:20,720
you know just the example call and

00:11:18,480 --> 00:11:23,040
response on the screen as well

00:11:20,720 --> 00:11:25,120
um so this is a query as defined on the

00:11:23,040 --> 00:11:26,399
last slide a path to get from a source

00:11:25,120 --> 00:11:29,920
to a target node

00:11:26,399 --> 00:11:32,000
in this graph and i'm essentially saying

00:11:29,920 --> 00:11:33,120
this is a query and the query i'm

00:11:32,000 --> 00:11:36,000
calling is path

00:11:33,120 --> 00:11:37,120
here are the arguments source and target

00:11:36,000 --> 00:11:39,600
and i'm asking

00:11:37,120 --> 00:11:42,079
from the response i care about the move

00:11:39,600 --> 00:11:44,560
source and target fields

00:11:42,079 --> 00:11:46,079
so we can see what that example response

00:11:44,560 --> 00:11:49,760
looks like

00:11:46,079 --> 00:11:51,920
on this next slide so

00:11:49,760 --> 00:11:54,800
one of the niceties that of graphql that

00:11:51,920 --> 00:11:56,800
i love is your query essentially

00:11:54,800 --> 00:11:58,959
your query shape essentially matches

00:11:56,800 --> 00:11:59,920
your response shape so we see in the

00:11:58,959 --> 00:12:03,519
query

00:11:59,920 --> 00:12:05,200
if i go to the previous slide that

00:12:03,519 --> 00:12:07,839
i'm asking for a path and i'm saying

00:12:05,200 --> 00:12:10,320
give me move source target

00:12:07,839 --> 00:12:11,040
and then my response shape is exactly

00:12:10,320 --> 00:12:13,600
that

00:12:11,040 --> 00:12:15,360
it's a it's an object with a field

00:12:13,600 --> 00:12:18,240
called path and in that path

00:12:15,360 --> 00:12:19,680
is an array of move source target

00:12:18,240 --> 00:12:22,320
objects

00:12:19,680 --> 00:12:23,600
so your your response shape essentially

00:12:22,320 --> 00:12:26,639
matches your data shape

00:12:23,600 --> 00:12:28,000
which i think is very nice a nice design

00:12:26,639 --> 00:12:30,480
of graphql

00:12:28,000 --> 00:12:31,680
so with that out of the way the graphql

00:12:30,480 --> 00:12:34,160
server

00:12:31,680 --> 00:12:36,160
will consider it implemented at least

00:12:34,160 --> 00:12:37,600
schema at the schema level so

00:12:36,160 --> 00:12:38,959
we know that at some point we actually

00:12:37,600 --> 00:12:40,720
need to solve the cube we actually need

00:12:38,959 --> 00:12:41,839
to find that path between cube a and

00:12:40,720 --> 00:12:44,320
cube b

00:12:41,839 --> 00:12:45,519
um so with that i used another python

00:12:44,320 --> 00:12:47,839
package by

00:12:45,519 --> 00:12:50,399
a man named cosiemba or an algorithm by

00:12:47,839 --> 00:12:52,079
a man named cosiemba

00:12:50,399 --> 00:12:54,480
and there's a visualization of that

00:12:52,079 --> 00:12:56,639
algorithm in play on the right here

00:12:54,480 --> 00:12:58,880
so the cool thing about it is it works

00:12:56,639 --> 00:13:01,839
very fast it finds your solution path

00:12:58,880 --> 00:13:03,680
um literally in milliseconds it doesn't

00:13:01,839 --> 00:13:06,720
feel like any lag at all

00:13:03,680 --> 00:13:07,360
it's a a graph-based search ida star

00:13:06,720 --> 00:13:10,639
using

00:13:07,360 --> 00:13:13,279
heuristics to find shorter paths and

00:13:10,639 --> 00:13:15,040
uh for me it's fascinating uh in a

00:13:13,279 --> 00:13:15,440
theoretical perspective because we know

00:13:15,040 --> 00:13:18,079
this

00:13:15,440 --> 00:13:19,279
state space is super large 43

00:13:18,079 --> 00:13:20,959
quintillion

00:13:19,279 --> 00:13:22,720
and this algorithm is essentially

00:13:20,959 --> 00:13:25,839
searching that in

00:13:22,720 --> 00:13:28,399
in almost no time at all so

00:13:25,839 --> 00:13:29,920
um how i use it in python how we touch

00:13:28,399 --> 00:13:32,800
it in python is very simple

00:13:29,920 --> 00:13:33,600
and i i love it it's i love this api is

00:13:32,800 --> 00:13:37,440
perfect to me

00:13:33,600 --> 00:13:39,120
whoever designed this i give them kudos

00:13:37,440 --> 00:13:40,959
so i showed an example usage at the

00:13:39,120 --> 00:13:42,760
bottom of the slide import kocimba and

00:13:40,959 --> 00:13:44,560
then just pass your cube state to

00:13:42,760 --> 00:13:48,240
cosimba.solve and you get your

00:13:44,560 --> 00:13:49,760
algorithm so it's perfect and it's uh

00:13:48,240 --> 00:13:51,440
it's there was the perfect building

00:13:49,760 --> 00:13:52,800
building block for me to make this

00:13:51,440 --> 00:13:55,839
project

00:13:52,800 --> 00:13:59,040
so how do we tie those together and

00:13:55,839 --> 00:14:02,160
visualize that on the front end

00:13:59,040 --> 00:14:03,360
so for the front end i used react and

00:14:02,160 --> 00:14:06,079
apollo graph tools

00:14:03,360 --> 00:14:07,440
um maybe a lot of people have played

00:14:06,079 --> 00:14:08,480
with reactive a little bit but if you

00:14:07,440 --> 00:14:09,839
haven't it's

00:14:08,480 --> 00:14:11,839
currently like a really popular

00:14:09,839 --> 00:14:14,160
framework for working with javascript

00:14:11,839 --> 00:14:17,279
and creating components in the browser

00:14:14,160 --> 00:14:19,120
and it plays well it has a lot of uh

00:14:17,279 --> 00:14:21,760
nice integrations with graphql

00:14:19,120 --> 00:14:23,279
especially via apollo so the graphql

00:14:21,760 --> 00:14:26,399
server out of the way

00:14:23,279 --> 00:14:27,760
and the cube solver integrated we move

00:14:26,399 --> 00:14:30,160
on to the cube ui

00:14:27,760 --> 00:14:31,839
right so we don't want to just graph

00:14:30,160 --> 00:14:34,880
show a random graph in the browser we

00:14:31,839 --> 00:14:36,959
want to show an actual cube

00:14:34,880 --> 00:14:39,680
um so at the right here i have a quick

00:14:36,959 --> 00:14:41,440
animation or a quick screen cap of

00:14:39,680 --> 00:14:44,480
the cube solver and play kind of an

00:14:41,440 --> 00:14:48,399
early iteration as i was developing this

00:14:44,480 --> 00:14:49,600
of me just executing turns on the cube

00:14:48,399 --> 00:14:51,519
and that's essentially what i wanted

00:14:49,600 --> 00:14:53,040
that was like my first personal

00:14:51,519 --> 00:14:54,880
milestone for this like i just wanted a

00:14:53,040 --> 00:14:57,279
cube in the browser

00:14:54,880 --> 00:14:58,320
and buttons to execute turns i didn't

00:14:57,279 --> 00:15:01,519
really care about

00:14:58,320 --> 00:15:01,920
gesture controls on the cube itself but

00:15:01,519 --> 00:15:04,639
um

00:15:01,920 --> 00:15:05,760
i wanted to be able to execute turns and

00:15:04,639 --> 00:15:07,600
i also wanted to show

00:15:05,760 --> 00:15:09,279
a list of turns that will get me to the

00:15:07,600 --> 00:15:11,839
solved cube so in this

00:15:09,279 --> 00:15:13,920
example in this video all i'm doing is

00:15:11,839 --> 00:15:16,160
looking at this list of turns that pop

00:15:13,920 --> 00:15:17,360
up and executing them so you can see i

00:15:16,160 --> 00:15:21,760
finish here with

00:15:17,360 --> 00:15:24,160
u2 and then b2 solves the cube

00:15:21,760 --> 00:15:25,600
boom so that's all i wanted that was the

00:15:24,160 --> 00:15:27,600
first milestone and then after

00:15:25,600 --> 00:15:29,759
i was satisfied with this and this

00:15:27,600 --> 00:15:31,920
worked properly

00:15:29,759 --> 00:15:34,800
i wanted to graph it right i wanted to

00:15:31,920 --> 00:15:37,519
try to tie this together with the graph

00:15:34,800 --> 00:15:39,040
so i essentially took that code and to

00:15:37,519 --> 00:15:42,079
the right of it literally to the right

00:15:39,040 --> 00:15:45,360
of it i just put a force graph

00:15:42,079 --> 00:15:47,759
that was built as

00:15:45,360 --> 00:15:49,120
the cubist turn so we execute a turn we

00:15:47,759 --> 00:15:51,040
get to a new cube state

00:15:49,120 --> 00:15:52,160
we update the graph that's essentially

00:15:51,040 --> 00:15:55,839
the

00:15:52,160 --> 00:15:58,079
feedback loop here

00:15:55,839 --> 00:15:59,440
and then the current cube the cube

00:15:58,079 --> 00:16:01,920
displayed on the screen is always in

00:15:59,440 --> 00:16:04,240
purple

00:16:01,920 --> 00:16:05,759
uh here the neighbor neighbor cubes are

00:16:04,240 --> 00:16:07,839
pink neighbors being

00:16:05,759 --> 00:16:09,360
those cubes one turn away from your

00:16:07,839 --> 00:16:11,600
current cube

00:16:09,360 --> 00:16:13,519
and then any path that gets calculated

00:16:11,600 --> 00:16:15,199
whether it be from one cube to another

00:16:13,519 --> 00:16:17,680
or one cube to the solved cube

00:16:15,199 --> 00:16:20,079
um they're always highlighted in blue so

00:16:17,680 --> 00:16:23,519
this was my first iteration of the graph

00:16:20,079 --> 00:16:25,759
thanks vince appreciate that

00:16:23,519 --> 00:16:27,360
and um yeah so essentially when i got to

00:16:25,759 --> 00:16:29,040
this point i felt like okay mission

00:16:27,360 --> 00:16:30,720
accomplished like this is pretty

00:16:29,040 --> 00:16:32,720
and then i i just spent a little bit of

00:16:30,720 --> 00:16:34,160
time um

00:16:32,720 --> 00:16:35,839
cleaning up the ux and the user

00:16:34,160 --> 00:16:39,519
experience and some of the uh the bugs

00:16:35,839 --> 00:16:39,519
that i introduced in the front end code

00:16:39,680 --> 00:16:44,000
so with that uh i'll talk about just

00:16:41,600 --> 00:16:45,440
give an inventory of both python modules

00:16:44,000 --> 00:16:47,920
and front end code used

00:16:45,440 --> 00:16:49,199
and then we can look at i guess the the

00:16:47,920 --> 00:16:52,240
current version of it so

00:16:49,199 --> 00:16:53,759
as i spoke of cosiemba and the algorithm

00:16:52,240 --> 00:16:56,560
for solving the cube

00:16:53,759 --> 00:16:58,560
a module named picuber gave me a cube

00:16:56,560 --> 00:16:59,680
object that i subclassed and added a few

00:16:58,560 --> 00:17:02,720
methods to and

00:16:59,680 --> 00:17:04,319
pretty much was good to go ariadna is

00:17:02,720 --> 00:17:06,319
the library that i use for implementing

00:17:04,319 --> 00:17:09,679
the graphql server and of course

00:17:06,319 --> 00:17:10,319
flask um the web framework we all know

00:17:09,679 --> 00:17:12,720
and love

00:17:10,319 --> 00:17:15,120
other than django and others that works

00:17:12,720 --> 00:17:18,160
well with ariadna

00:17:15,120 --> 00:17:20,160
and then front-end tooling i used a

00:17:18,160 --> 00:17:21,360
react force graph for drawing this graph

00:17:20,160 --> 00:17:24,480
that you see behind

00:17:21,360 --> 00:17:25,679
behind the slide super easy so basically

00:17:24,480 --> 00:17:27,439
i had to maintain

00:17:25,679 --> 00:17:29,120
the graph itself the list of nodes and

00:17:27,439 --> 00:17:31,679
edges and then

00:17:29,120 --> 00:17:32,160
pass that to this component as well as

00:17:31,679 --> 00:17:34,480
some

00:17:32,160 --> 00:17:35,600
display properties but it wasn't i

00:17:34,480 --> 00:17:38,320
didn't have to go and write a whole

00:17:35,600 --> 00:17:41,120
graph library to do this

00:17:38,320 --> 00:17:43,120
and then similarly apollo client let me

00:17:41,120 --> 00:17:45,600
interface with my graphql server

00:17:43,120 --> 00:17:47,039
so i i liked it because i got to keep

00:17:45,600 --> 00:17:48,880
everything separate i got to

00:17:47,039 --> 00:17:50,720
make my server in python like i usually

00:17:48,880 --> 00:17:53,520
like to do and then just pass

00:17:50,720 --> 00:17:54,640
a nice graphql api to the front end i

00:17:53,520 --> 00:17:57,840
use material ui

00:17:54,640 --> 00:17:59,679
to layout the grid on the page and

00:17:57,840 --> 00:18:00,880
render some buttons and just generally

00:17:59,679 --> 00:18:02,720
house everything

00:18:00,880 --> 00:18:04,559
and then at the core of it all is react

00:18:02,720 --> 00:18:05,840
and of course javascript and one cool

00:18:04,559 --> 00:18:08,799
thing is the cube itself

00:18:05,840 --> 00:18:09,360
um i found as a web component so it was

00:18:08,799 --> 00:18:11,360
fun

00:18:09,360 --> 00:18:13,039
integrating web components with react

00:18:11,360 --> 00:18:16,160
for anybody who does framework

00:18:13,039 --> 00:18:17,760
uh front-end work that's non-trivial so

00:18:16,160 --> 00:18:20,480
it was kind of it was fun to do that

00:18:17,760 --> 00:18:22,400
and the cube itself is fully uh html and

00:18:20,480 --> 00:18:25,280
css which i like a lot

00:18:22,400 --> 00:18:27,919
and it was easy to work with and then

00:18:25,280 --> 00:18:30,320
working between node and flask i used a

00:18:27,919 --> 00:18:32,640
proxy server

00:18:30,320 --> 00:18:34,080
so with that i'll say thank you and

00:18:32,640 --> 00:18:36,400
thank you all for listening i'll

00:18:34,080 --> 00:18:37,760
switch from these slides to the page

00:18:36,400 --> 00:18:40,320
itself and hopefully

00:18:37,760 --> 00:18:41,520
you'll get a chance to check it out or

00:18:40,320 --> 00:18:43,280
send me a pr

00:18:41,520 --> 00:18:46,320
an issue on github if you see something

00:18:43,280 --> 00:18:46,320
that could be improved

00:18:49,280 --> 00:18:55,440
yeah thank you yeah so on this

00:18:53,200 --> 00:18:57,520
now i'm just showing the uh the current

00:18:55,440 --> 00:19:00,799
page itself so feel free to check it out

00:18:57,520 --> 00:19:02,720
but um yeah i've um obviously i wrote

00:19:00,799 --> 00:19:04,240
this but i've spent uh

00:19:02,720 --> 00:19:05,600
i'm not ashamed to say i've spent a lot

00:19:04,240 --> 00:19:07,679
of time just clicking this and just

00:19:05,600 --> 00:19:10,160
watching the solver in action

00:19:07,679 --> 00:19:11,760
uh it's kind of fun if you're learning

00:19:10,160 --> 00:19:14,960
to solve the cube

00:19:11,760 --> 00:19:17,520
um it could be you know

00:19:14,960 --> 00:19:19,520
kind of a good learning tool as well for

00:19:17,520 --> 00:19:22,080
demystifying it

00:19:19,520 --> 00:19:23,039
and uh yeah i don't know for me this was

00:19:22,080 --> 00:19:26,160
a good

00:19:23,039 --> 00:19:29,280
a good uh just exploration and

00:19:26,160 --> 00:19:30,400
kind of thinking of scott's um scott's

00:19:29,280 --> 00:19:33,919
talk earlier

00:19:30,400 --> 00:19:35,760
of you know just doing things and and

00:19:33,919 --> 00:19:38,080
kind of finding the joy in things i i

00:19:35,760 --> 00:19:40,559
kind of it run true to me in doing this

00:19:38,080 --> 00:19:41,520
okay so i see vince's question he says

00:19:40,559 --> 00:19:42,799
can i clarify

00:19:41,520 --> 00:19:45,120
that i'm understanding correctly the

00:19:42,799 --> 00:19:46,880
visualization is essentially

00:19:45,120 --> 00:19:48,160
a visualization of the solution

00:19:46,880 --> 00:19:50,880
heuristic

00:19:48,160 --> 00:19:52,160
um technique no it's not a visualization

00:19:50,880 --> 00:19:54,880
of the heuristic so the

00:19:52,160 --> 00:19:55,360
the graph itself is our actual cube

00:19:54,880 --> 00:19:58,640
nodes

00:19:55,360 --> 00:20:01,039
so what we're looking at here is a path

00:19:58,640 --> 00:20:02,960
essentially from a random node to solve

00:20:01,039 --> 00:20:03,679
nodes let me refresh real quick and get

00:20:02,960 --> 00:20:05,360
a fresh

00:20:03,679 --> 00:20:06,960
scramble so right here what we're

00:20:05,360 --> 00:20:08,640
looking at is the output of the

00:20:06,960 --> 00:20:10,799
algorithm

00:20:08,640 --> 00:20:13,039
so the algorithm says essentially take

00:20:10,799 --> 00:20:15,280
these steps to get to the solved cube

00:20:13,039 --> 00:20:20,000
and then we're just displaying those

00:20:15,280 --> 00:20:21,919
intermediate nodes

00:20:20,000 --> 00:20:23,360
path from a random note to a solve node

00:20:21,919 --> 00:20:24,720
so that

00:20:23,360 --> 00:20:26,480
yeah that's correct that's the path that

00:20:24,720 --> 00:20:28,159
the yeah that the heuristic took this is

00:20:26,480 --> 00:20:28,960
the path that the algorithm that uh

00:20:28,159 --> 00:20:31,360
figured it out

00:20:28,960 --> 00:20:32,640
yeah sorry i misunderstood your initial

00:20:31,360 --> 00:20:34,640
question

00:20:32,640 --> 00:20:35,679
great question yeah and it's kind of

00:20:34,640 --> 00:20:37,679
it's kind of cool as well

00:20:35,679 --> 00:20:39,679
um i add there's buttons up in the right

00:20:37,679 --> 00:20:41,679
for adding random cubes

00:20:39,679 --> 00:20:42,880
and it's fun to see kind of where where

00:20:41,679 --> 00:20:44,720
the algorithm goes

00:20:42,880 --> 00:20:46,080
astray or where the algorithm doesn't

00:20:44,720 --> 00:20:49,200
follow the same

00:20:46,080 --> 00:20:50,080
path uh but yeah it's cool so like right

00:20:49,200 --> 00:20:52,640
now

00:20:50,080 --> 00:20:54,799
i'm on a random cube it's right here

00:20:52,640 --> 00:20:57,120
right this dark one is my current cube

00:20:54,799 --> 00:20:59,679
and if i click any other cube um i make

00:20:57,120 --> 00:21:02,000
the algorithm generate a path to it

00:20:59,679 --> 00:21:03,600
and then those new nodes get added but

00:21:02,000 --> 00:21:05,200
then if i'm at this cube

00:21:03,600 --> 00:21:07,679
this this cube here and let's say i

00:21:05,200 --> 00:21:11,840
click up a node that's already in a path

00:21:07,679 --> 00:21:13,440
on the screen you see that the algorithm

00:21:11,840 --> 00:21:15,679
takes essentially the same path but

00:21:13,440 --> 00:21:17,360
there's one node that it diverged on

00:21:15,679 --> 00:21:18,880
which i think is pretty interesting you

00:21:17,360 --> 00:21:20,880
know i wish i knew what was going on

00:21:18,880 --> 00:21:24,159
deep under the hood but uh

00:21:20,880 --> 00:21:25,760
yeah so it's a fun thing yeah thank you

00:21:24,159 --> 00:21:31,840
all for thank you all for joining me

00:21:25,760 --> 00:21:31,840
uh any other questions

00:21:32,830 --> 00:21:36,000
[Music]

00:21:36,080 --> 00:21:45,840
awesome go for it vince

00:21:52,159 --> 00:21:58,000
yeah that's a great question um

00:21:55,520 --> 00:21:59,280
yeah my only there's the first thing i

00:21:58,000 --> 00:22:00,799
think about when i saw the

00:21:59,280 --> 00:22:02,720
the question that vince asked was any

00:22:00,799 --> 00:22:06,240
thoughts of expanding this to

00:22:02,720 --> 00:22:07,919
four by four by four cubes or etc

00:22:06,240 --> 00:22:10,559
um the first thing that comes to mind is

00:22:07,919 --> 00:22:13,039
the branching factor just from um

00:22:10,559 --> 00:22:13,919
yeah the number of options that you have

00:22:13,039 --> 00:22:17,760
for turns on

00:22:13,919 --> 00:22:19,840
on a given face so on this one i even um

00:22:17,760 --> 00:22:20,960
like on this cube i guess from any turn

00:22:19,840 --> 00:22:24,000
you have

00:22:20,960 --> 00:22:25,520
what do we see 18 possible turns

00:22:24,000 --> 00:22:27,280
so for the four by four i don't even

00:22:25,520 --> 00:22:29,360
know off the top of my head but um

00:22:27,280 --> 00:22:30,640
yeah you'd have it would be a chat it

00:22:29,360 --> 00:22:31,760
would be a fun challenge to try and

00:22:30,640 --> 00:22:33,360
represent um

00:22:31,760 --> 00:22:36,080
all of the turns that one can make on

00:22:33,360 --> 00:22:37,760
the screen without overwhelming the user

00:22:36,080 --> 00:22:41,360
and then another challenge would be

00:22:37,760 --> 00:22:41,360
displaying the graph in a way that

00:22:41,919 --> 00:22:46,240
yeah that's still visually appealing

00:22:44,159 --> 00:22:48,799
maybe i don't maybe that would um

00:22:46,240 --> 00:22:49,919
maybe that would be fun to draw in 3d

00:22:48,799 --> 00:22:51,520
like a 3d graph

00:22:49,919 --> 00:22:53,600
this this same component that i use

00:22:51,520 --> 00:22:56,720
supports 3d i just rather

00:22:53,600 --> 00:22:57,360
do 2d but yeah maybe the 4x4 by 4 could

00:22:56,720 --> 00:22:59,840
um

00:22:57,360 --> 00:23:02,799
could be visualized in 3d in a cool way

00:22:59,840 --> 00:23:09,120
yeah that's awesome idea maybe that's a

00:23:02,799 --> 00:23:10,799
picon africa 2021 talk right there

00:23:09,120 --> 00:23:13,039
yeah you see you read my mind yeah

00:23:10,799 --> 00:23:23,840
awesome

00:23:13,039 --> 00:23:23,840
thanks yeah thanks

00:23:24,400 --> 00:23:29,039
yeah the two by two would be simpler

00:23:25,840 --> 00:23:29,039
still and i think um

00:23:29,120 --> 00:23:34,000
yeah the two by two would be fun

00:23:32,640 --> 00:23:36,159
there'd probably be i think there'd be

00:23:34,000 --> 00:23:37,600
even a fun or maybe a fun challenge

00:23:36,159 --> 00:23:40,559
you're visualizing that since you would

00:23:37,600 --> 00:23:40,960
you have less complexity i've actually

00:23:40,559 --> 00:23:43,279
never

00:23:40,960 --> 00:23:45,200
um i've never solved a two by two i've

00:23:43,279 --> 00:23:47,279
solved actually i have a four by four

00:23:45,200 --> 00:23:48,240
but i can only solve it treating it like

00:23:47,279 --> 00:23:50,400
a two by two

00:23:48,240 --> 00:23:52,000
so so that's the only two by two i've

00:23:50,400 --> 00:23:53,760
solved i can't solve the four by four i

00:23:52,000 --> 00:23:56,880
could solve this one but um i

00:23:53,760 --> 00:23:56,880
i won't be put on the spot

00:23:57,360 --> 00:24:02,720
yeah you probably could draw the full

00:23:59,279 --> 00:24:02,720
state space for the smaller cube

00:24:03,679 --> 00:24:07,919
are any any of you all uh cubers i'll

00:24:06,320 --> 00:24:11,440
call them cubers anybody

00:24:07,919 --> 00:24:11,440
like to solve the cube just for fun

00:24:11,600 --> 00:24:19,840
yeah yeah nicoletta awesome

00:24:20,000 --> 00:24:33,120
well awesome i'll uh let's see i can

00:24:22,080 --> 00:24:33,120

YouTube URL: https://www.youtube.com/watch?v=iXIaCW2cxdw


