Title: Psalms Kalu - Serving Deep Neural Networks through Django || PyCon Africa 2020
Publication date: 2020-08-26
Playlist: PyCon Africa 2020
Description: 
	There has been a lot of interest in Machine Learning and Artificial Intelligence lately. Everyone seems from the data scientists to the business analysts, and the web developers are so interested in this fields. I notice that most people who build machine learning models are not good in web development and deployment. So most times it is left for the web developer to deploy those models and integrate them into the web project.

As a Django developer, this is an important knowledge to possess as more and more machine learning models are being built these days. Sooner or later you will find yourself having to do this or even having this become part of your daily work demands.

This is going to be a hands-on workshop session in which we will build a simple deep neural network from scratch using Keras and deploy it into a Django project so that users visiting our website can supply data which our model can make predictions from.

The workshop is practically going to consist of two parts. The first part is where we build the neural network. This part of the workshop will introduce Django developers to how neural networks work and how they are built, and the second part will be the deployment of the neural network in a Django project.

Truth is whether it is a neural network, regression model or any other form of machine learning model, the process we will use to deploy this neural network can be applied to deploy any form of machine learning model in Django.
Captions: 
	00:00:14,320 --> 00:00:17,440
hello everyone my name is sam scarlow

00:00:17,119 --> 00:00:19,119
and

00:00:17,440 --> 00:00:20,560
i'm going to be taking you through this

00:00:19,119 --> 00:00:24,000
workshop session

00:00:20,560 --> 00:00:25,519
on serving deep neural network in jungle

00:00:24,000 --> 00:00:27,920
it's basically about how you can

00:00:25,519 --> 00:00:30,000
integrate machine learning model

00:00:27,920 --> 00:00:31,920
into a jungle web app so that the

00:00:30,000 --> 00:00:34,480
inference becomes available

00:00:31,920 --> 00:00:35,840
to the end users this is going to be a

00:00:34,480 --> 00:00:38,480
hands-on session

00:00:35,840 --> 00:00:40,719
so let's get started right away by first

00:00:38,480 --> 00:00:42,559
building a simple deep neural network

00:00:40,719 --> 00:00:44,399
that we're going to deploy in our jungle

00:00:42,559 --> 00:00:44,850
app later on i hope you enjoyed this

00:00:44,399 --> 00:00:45,920
session

00:00:44,850 --> 00:00:48,399
[Music]

00:00:45,920 --> 00:00:50,879
so uh welcome to the first part of this

00:00:48,399 --> 00:00:53,680
workshop which is where we build

00:00:50,879 --> 00:00:55,680
a deep neural network if you're going to

00:00:53,680 --> 00:00:56,800
build a deep neural network or any other

00:00:55,680 --> 00:01:00,960
kind of model

00:00:56,800 --> 00:01:04,559
for that matter you will

00:01:00,960 --> 00:01:05,360
usually use the anaconda so we're just

00:01:04,559 --> 00:01:08,960
gonna blow

00:01:05,360 --> 00:01:12,320
anaconda from our system

00:01:08,960 --> 00:01:13,280
and the anaconda is a beautiful software

00:01:12,320 --> 00:01:15,600
because

00:01:13,280 --> 00:01:17,920
it has everything you need to do your

00:01:15,600 --> 00:01:20,240
data science and the

00:01:17,920 --> 00:01:21,520
machine learning of either all the

00:01:20,240 --> 00:01:23,920
libraries and two

00:01:21,520 --> 00:01:25,040
kits you're going to be needing uh you

00:01:23,920 --> 00:01:28,720
have

00:01:25,040 --> 00:01:30,079
number a vampires pandas skilling and

00:01:28,720 --> 00:01:33,439
all those stuffs

00:01:30,079 --> 00:01:36,640
are all they even carers so we'll just

00:01:33,439 --> 00:01:37,920
go ahead and launch the jupiter notebook

00:01:36,640 --> 00:01:41,600
is where we're gonna be

00:01:37,920 --> 00:01:45,200
writing the codes for our model

00:01:41,600 --> 00:01:47,840
so um so what we'll do

00:01:45,200 --> 00:01:50,399
is first it's always good to create a

00:01:47,840 --> 00:01:53,360
folder where you can organize

00:01:50,399 --> 00:01:54,399
all your work so since we're creating a

00:01:53,360 --> 00:01:57,840
food and just

00:01:54,399 --> 00:02:01,119
gets there so i'm gonna

00:01:57,840 --> 00:02:05,280
keep these and rename me too

00:02:01,119 --> 00:02:08,759
okay let's call it pycon

00:02:05,280 --> 00:02:11,759
um africa

00:02:08,759 --> 00:02:11,759
00:02:12,160 --> 00:02:20,400
watch deep neural network

00:02:17,040 --> 00:02:20,400
class so

00:02:20,560 --> 00:02:23,920
so it's right there so i'm just gonna go

00:02:23,200 --> 00:02:28,000
ahead

00:02:23,920 --> 00:02:32,080
and load the deep neura

00:02:28,000 --> 00:02:35,200
network so i'm gonna open this

00:02:32,080 --> 00:02:39,840
um folder and

00:02:35,200 --> 00:02:42,160
i like to add some other folder here

00:02:39,840 --> 00:02:43,920
so the first food i'm going to add here

00:02:42,160 --> 00:02:49,519
is for

00:02:43,920 --> 00:02:49,519
storing my data set okay so

00:02:50,560 --> 00:02:57,840
at the end of this workshop we will

00:02:53,920 --> 00:02:58,400
also uh be saving the modern review so

00:02:57,840 --> 00:03:01,840
let's

00:02:58,400 --> 00:03:02,840
have a folder for that we're going to

00:03:01,840 --> 00:03:06,159
call it

00:03:02,840 --> 00:03:09,120
model and sometimes if i was having an

00:03:06,159 --> 00:03:11,920
add some assets to add to this

00:03:09,120 --> 00:03:12,800
folder for assets but this is okay for

00:03:11,920 --> 00:03:16,080
now

00:03:12,800 --> 00:03:19,280
so just go ahead and start a new project

00:03:16,080 --> 00:03:23,120
for on train

00:03:19,280 --> 00:03:25,760
um so right here we are about to begin

00:03:23,120 --> 00:03:26,480
building our model so the first step is

00:03:25,760 --> 00:03:30,319
to

00:03:26,480 --> 00:03:30,319
import our dependencies

00:03:30,959 --> 00:03:35,920
the thermal dependencies are always

00:03:34,000 --> 00:03:39,840
going to be

00:03:35,920 --> 00:03:43,519
numpy and pandas so

00:03:39,840 --> 00:03:47,200
that should end them

00:03:43,519 --> 00:03:50,480
so we'll go ahead and just import

00:03:47,200 --> 00:03:53,920
numpy as mp

00:03:50,480 --> 00:03:57,200
and we also import

00:03:53,920 --> 00:04:00,560
pandas as pd

00:03:57,200 --> 00:04:01,599
okay so once we have done this the next

00:04:00,560 --> 00:04:05,280
thing will be to

00:04:01,599 --> 00:04:07,840
read our data set uh into the

00:04:05,280 --> 00:04:10,480
uh notebook that we're going to be using

00:04:07,840 --> 00:04:12,239
remember that was not

00:04:10,480 --> 00:04:13,599
that i said another thing we're actually

00:04:12,239 --> 00:04:16,160
using for this

00:04:13,599 --> 00:04:17,359
is from cargo uh the link is right here

00:04:16,160 --> 00:04:20,239
on the video

00:04:17,359 --> 00:04:22,240
uh i've already downloaded this so

00:04:20,239 --> 00:04:23,360
downloaded to my downloads folders i'm

00:04:22,240 --> 00:04:26,639
using the windows

00:04:23,360 --> 00:04:28,960
uh operating system so what i'll just do

00:04:26,639 --> 00:04:28,960
is to

00:04:31,040 --> 00:04:34,960
so i'm just going to upload it so this

00:04:33,680 --> 00:04:37,520
is the folder uh

00:04:34,960 --> 00:04:38,880
this is my downloads so it's like the

00:04:37,520 --> 00:04:42,720
folder that comes from

00:04:38,880 --> 00:04:44,800
cargo and i'll be using the trend

00:04:42,720 --> 00:04:46,400
and so it's a csv file so i'm just going

00:04:44,800 --> 00:04:49,680
to say open

00:04:46,400 --> 00:04:53,040
and then i will upload it so once i

00:04:49,680 --> 00:04:56,400
upload is not available for me to use so

00:04:53,040 --> 00:04:59,600
i'm going to create a new variable data

00:04:56,400 --> 00:05:02,320
we have say pd dot read

00:04:59,600 --> 00:05:02,320
csv

00:05:02,720 --> 00:05:09,520
so data sets slash

00:05:06,240 --> 00:05:14,160
trend dot c s v

00:05:09,520 --> 00:05:16,720
okay so the wrist has been just a pandas

00:05:14,160 --> 00:05:17,199
uh function for which is 75 that we

00:05:16,720 --> 00:05:19,600
didn't

00:05:17,199 --> 00:05:21,120
find different formats so let's be sure

00:05:19,600 --> 00:05:23,280
that this worked

00:05:21,120 --> 00:05:24,720
so i'm just going to look at the first

00:05:23,280 --> 00:05:28,479
00:05:24,720 --> 00:05:29,840
columns oh so we have an error right all

00:05:28,479 --> 00:05:33,120
of them

00:05:29,840 --> 00:05:35,120
okay so yeah so we watch here uh we're

00:05:33,120 --> 00:05:37,840
looking at the first 10 rules in

00:05:35,120 --> 00:05:38,560
our data set and look at all the

00:05:37,840 --> 00:05:43,039
features

00:05:38,560 --> 00:05:46,160
that uh make up the data center about 21

00:05:43,039 --> 00:05:47,680
columns okay so what that means is that

00:05:46,160 --> 00:05:51,120
00:05:47,680 --> 00:05:54,320
uh 20 features

00:05:51,120 --> 00:05:57,199
and then the last one is

00:05:54,320 --> 00:05:58,160
the price range that we actually want to

00:05:57,199 --> 00:06:01,520
know

00:05:58,160 --> 00:06:05,039
so using all of these features

00:06:01,520 --> 00:06:07,039
the battery power the

00:06:05,039 --> 00:06:08,240
whether it has bluetooth or noise the

00:06:07,039 --> 00:06:10,479
clock speed

00:06:08,240 --> 00:06:12,400
but they have lower same the front

00:06:10,479 --> 00:06:15,280
camera megapixel

00:06:12,400 --> 00:06:16,720
value is a 4g phone internet memory and

00:06:15,280 --> 00:06:18,400
all of these

00:06:16,720 --> 00:06:19,680
you know there are about 20 features

00:06:18,400 --> 00:06:20,880
here that will have to put into

00:06:19,680 --> 00:06:23,919
consideration

00:06:20,880 --> 00:06:26,800
to be able to properly classify a

00:06:23,919 --> 00:06:29,680
phone and then price range zero or price

00:06:26,800 --> 00:06:32,319
range one or two or three and then

00:06:29,680 --> 00:06:33,199
there is actually no way we're gonna

00:06:32,319 --> 00:06:36,080
have to

00:06:33,199 --> 00:06:38,000
code these decisions ourselves so best

00:06:36,080 --> 00:06:39,759
thing is to have a

00:06:38,000 --> 00:06:42,400
model do this for us and that's what

00:06:39,759 --> 00:06:45,600
we're just gonna do right away

00:06:42,400 --> 00:06:48,560
and so from what we have here uh we can

00:06:45,600 --> 00:06:52,560
see that

00:06:48,560 --> 00:06:55,120
oh how we can see that we have

00:06:52,560 --> 00:06:56,639
all of these uh features are gonna work

00:06:55,120 --> 00:06:59,520
together for us

00:06:56,639 --> 00:07:01,440
to create this so um next thing we're

00:06:59,520 --> 00:07:02,960
gonna do right now is to try and split

00:07:01,440 --> 00:07:06,400
our data set

00:07:02,960 --> 00:07:08,479
into the x and y variables okay

00:07:06,400 --> 00:07:09,919
the y variable is the prediction we're

00:07:08,479 --> 00:07:13,120
trying to make

00:07:09,919 --> 00:07:14,720
and the x variables are the features

00:07:13,120 --> 00:07:17,199
that we needed for those

00:07:14,720 --> 00:07:17,759
for that prediction so the x is what we

00:07:17,199 --> 00:07:20,479
call the

00:07:17,759 --> 00:07:22,479
independent variables and the y is the

00:07:20,479 --> 00:07:25,599
dependent variable so right here now

00:07:22,479 --> 00:07:27,520
the only dependent variable is the price

00:07:25,599 --> 00:07:29,520
range that is just the only thing that

00:07:27,520 --> 00:07:32,080
is going to be

00:07:29,520 --> 00:07:34,479
making decisions about and the whole of

00:07:32,080 --> 00:07:35,039
this is included we might have a work

00:07:34,479 --> 00:07:37,680
where

00:07:35,039 --> 00:07:39,759
we don't need to you know include all

00:07:37,680 --> 00:07:42,080
the features but here we actually need

00:07:39,759 --> 00:07:45,680
to include the whole 20

00:07:42,080 --> 00:07:49,039
features uh very very important to us

00:07:45,680 --> 00:07:52,960
in this so so we're going to do that

00:07:49,039 --> 00:07:56,840
as oh just um

00:07:52,960 --> 00:08:00,400
quickly just how we're going to do that

00:07:56,840 --> 00:08:05,440
is i'm going to say

00:08:00,400 --> 00:08:08,720
split delta set

00:08:05,440 --> 00:08:13,199
into x

00:08:08,720 --> 00:08:17,599
and y okay

00:08:13,199 --> 00:08:21,520
our x is going to be the whole of

00:08:17,599 --> 00:08:22,960
the features from first row to the 20th

00:08:21,520 --> 00:08:25,759
from the first column to the trinidad

00:08:22,960 --> 00:08:26,720
column and the way we're going to select

00:08:25,759 --> 00:08:30,240
that

00:08:26,720 --> 00:08:33,279
is we're going to use the i

00:08:30,240 --> 00:08:36,399
lock okay

00:08:33,279 --> 00:08:40,560
and so what this does is

00:08:36,399 --> 00:08:44,959
it doesn't just select the rules

00:08:40,560 --> 00:08:48,080
was it also converts this from a panda

00:08:44,959 --> 00:08:51,440
data frame into a numpy

00:08:48,080 --> 00:08:54,320
uh array of

00:08:51,440 --> 00:08:56,480
a lot of times so what is this the first

00:08:54,320 --> 00:08:57,680
one is i'm gonna need to select all the

00:08:56,480 --> 00:09:00,320
rows so

00:08:57,680 --> 00:09:01,279
color nothing but the second one is for

00:09:00,320 --> 00:09:03,760
the

00:09:01,279 --> 00:09:05,279
column so i'm selecting from the first

00:09:03,760 --> 00:09:09,920
to the 20th

00:09:05,279 --> 00:09:13,440
so if we if we take a look at this

00:09:09,920 --> 00:09:13,839
so this is also for y uh we're gonna

00:09:13,440 --> 00:09:17,360
have

00:09:13,839 --> 00:09:21,040
uh that i lock

00:09:17,360 --> 00:09:23,279
okay so i'm also selecting all the rows

00:09:21,040 --> 00:09:24,880
but i'm just going to select the last

00:09:23,279 --> 00:09:27,040
column

00:09:24,880 --> 00:09:27,040
so

00:09:28,720 --> 00:09:34,480
all right so if you want to see what you

00:09:30,560 --> 00:09:37,839
have in your x right now you can

00:09:34,480 --> 00:09:37,839
see this

00:09:45,040 --> 00:09:50,000
so we'll split this into x and y uh our

00:09:48,560 --> 00:09:52,720
data set

00:09:50,000 --> 00:09:53,839
and then the next thing we're going to

00:09:52,720 --> 00:09:56,399
do is

00:09:53,839 --> 00:09:57,839
we're going to normalize or evenly

00:09:56,399 --> 00:10:01,600
distribute

00:09:57,839 --> 00:10:05,360
the values on our x

00:10:01,600 --> 00:10:08,160
features because look at this we have

00:10:05,360 --> 00:10:08,800
some of the values are way high above

00:10:08,160 --> 00:10:12,000
the other

00:10:08,800 --> 00:10:14,480
so this is going to create a lot of uh

00:10:12,000 --> 00:10:16,079
uh inefficiency in our monitor so we're

00:10:14,480 --> 00:10:19,440
going to find a way to

00:10:16,079 --> 00:10:22,320
you know evenly distribute are these uh

00:10:19,440 --> 00:10:25,360
values without actually losing their

00:10:22,320 --> 00:10:28,000
proper significance so we can do this

00:10:25,360 --> 00:10:28,959
using the standard scala from sql and we

00:10:28,000 --> 00:10:32,480
can use the

00:10:28,959 --> 00:10:33,120
using the random one functions i prefer

00:10:32,480 --> 00:10:37,920
to just

00:10:33,120 --> 00:10:40,720
use that sql and

00:10:37,920 --> 00:10:41,760
standard scala for something like this

00:10:40,720 --> 00:10:46,560
so

00:10:41,760 --> 00:10:49,200
from skllen or processing

00:10:46,560 --> 00:10:49,200
import

00:10:49,839 --> 00:10:53,760
standard scale so so we're going to do

00:10:53,200 --> 00:10:58,399
this on

00:10:53,760 --> 00:11:01,600
our one i'm going to do this on our x

00:10:58,399 --> 00:11:06,959
values so let's first of all create

00:11:01,600 --> 00:11:06,959
an object of this standard class

00:11:09,680 --> 00:11:14,800
so now we can completely say x we call

00:11:12,720 --> 00:11:18,640
this scalar

00:11:14,800 --> 00:11:18,640
dot fit transform

00:11:20,560 --> 00:11:26,560
x so we're going to fit

00:11:23,760 --> 00:11:27,200
transform x and then we're going to see

00:11:26,560 --> 00:11:30,720
what x

00:11:27,200 --> 00:11:32,640
looks like now so what so x is kind of a

00:11:30,720 --> 00:11:34,800
big one if you haven't lost some kind of

00:11:32,640 --> 00:11:38,000
graph now of x you will see that

00:11:34,800 --> 00:11:42,640
it will pass on even distribution

00:11:38,000 --> 00:11:44,079
uh or unlike what we had before

00:11:42,640 --> 00:11:46,640
okay then there's something that we're

00:11:44,079 --> 00:11:49,760
gonna do for our y as is

00:11:46,640 --> 00:11:52,720
um our y as is

00:11:49,760 --> 00:11:55,040
okay kind of have our one yeah or white

00:11:52,720 --> 00:11:58,800
values whereas easier

00:11:55,040 --> 00:11:58,800
so y has

00:11:59,040 --> 00:12:03,680
four distinct values

00:12:04,720 --> 00:12:13,279
okay so it's just like 0 1 2

00:12:08,639 --> 00:12:13,279
3. if this is 6 like this

00:12:14,079 --> 00:12:19,040
this this this this is actually a

00:12:16,920 --> 00:12:22,800
categorical value

00:12:19,040 --> 00:12:25,040
okay even though it has numbers

00:12:22,800 --> 00:12:26,240
in it so it's actually a category

00:12:25,040 --> 00:12:30,079
compiler

00:12:26,240 --> 00:12:32,720
and the way to treat a categorical value

00:12:30,079 --> 00:12:35,120
is to find a way to turn it into a

00:12:32,720 --> 00:12:38,079
numerical value that

00:12:35,120 --> 00:12:39,120
the uh algorithm or the model can work

00:12:38,079 --> 00:12:43,360
with

00:12:39,120 --> 00:12:45,360
now if we leave this as as an integer or

00:12:43,360 --> 00:12:47,600
just leave it at the weighties or just

00:12:45,360 --> 00:12:48,959
okay since it's already in number so

00:12:47,600 --> 00:12:50,800
that's what we need

00:12:48,959 --> 00:12:53,120
what's gonna happen is our model is

00:12:50,800 --> 00:12:55,839
gonna think that

00:12:53,120 --> 00:12:57,519
zero is a progression to a one is a

00:12:55,839 --> 00:13:01,200
progression from zero to one

00:12:57,519 --> 00:13:04,079
and then so forth so it's gonna actually

00:13:01,200 --> 00:13:05,600
treat these as a progression instead of

00:13:04,079 --> 00:13:07,600
as a range

00:13:05,600 --> 00:13:09,360
and this is not going to work so well

00:13:07,600 --> 00:13:11,120
for our model

00:13:09,360 --> 00:13:12,720
so what we're going to do is we're going

00:13:11,120 --> 00:13:16,079
to actually make this

00:13:12,720 --> 00:13:18,399
uh into a pure

00:13:16,079 --> 00:13:20,320
category color file we're going to

00:13:18,399 --> 00:13:24,240
engineer this into a categorical

00:13:20,320 --> 00:13:28,000
representation using one heart encoding

00:13:24,240 --> 00:13:33,360
okay function so um

00:13:28,000 --> 00:13:36,399
from s key length dot pre-processing

00:13:33,360 --> 00:13:39,519
so we're going to import one hulk

00:13:36,399 --> 00:13:41,360
encoder so i will explain what one what

00:13:39,519 --> 00:13:44,800
it could indulge briefly

00:13:41,360 --> 00:13:46,240
so uh it's kind of creating binary

00:13:44,800 --> 00:13:48,240
values

00:13:46,240 --> 00:13:49,360
for representation for each of these

00:13:48,240 --> 00:13:52,880
values

00:13:49,360 --> 00:13:56,880
all right so as we have one we have two

00:13:52,880 --> 00:13:58,160
we have zero we have three okay

00:13:56,880 --> 00:14:00,000
so we're just going to have this

00:13:58,160 --> 00:14:02,880
representation for one

00:14:00,000 --> 00:14:04,320
one is gonna be uh zero is gonna be zero

00:14:02,880 --> 00:14:07,279
zero zero zero

00:14:04,320 --> 00:14:08,160
and then one is gonna be zero one zero

00:14:07,279 --> 00:14:10,800
zero

00:14:08,160 --> 00:14:11,680
and two is gonna be zero zero one zero

00:14:10,800 --> 00:14:14,720
and three is going to be

00:14:11,680 --> 00:14:18,560
zero zero zero one so

00:14:14,720 --> 00:14:22,720
as the case might be

00:14:18,560 --> 00:14:26,320
so uh what's going on i'll create

00:14:22,720 --> 00:14:26,320
an encoder class of course

00:14:28,000 --> 00:14:34,880
one of them coda

00:14:31,279 --> 00:14:37,519
okay so um so go ahead and

00:14:34,880 --> 00:14:38,950
call white so why is going to be equal

00:14:37,519 --> 00:14:42,029
to

00:14:38,950 --> 00:14:42,029
[Music]

00:14:55,760 --> 00:15:01,120
okay so it's done and you're gonna be

00:14:58,880 --> 00:15:03,680
careful not to run this twice because

00:15:01,120 --> 00:15:06,079
keep running it again you should keep

00:15:03,680 --> 00:15:07,600
generating and encoding from the already

00:15:06,079 --> 00:15:09,920
generated encoding

00:15:07,600 --> 00:15:11,360
so we want to see why we should do that

00:15:09,920 --> 00:15:14,320
in a separate cell

00:15:11,360 --> 00:15:16,480
so right now we're looking at y so you

00:15:14,320 --> 00:15:19,040
cannot see that zero one zero zero is

00:15:16,480 --> 00:15:22,399
one zero zero one zero is two zero

00:15:19,040 --> 00:15:23,360
zero one zero either two and so on and

00:15:22,399 --> 00:15:27,360
so forth

00:15:23,360 --> 00:15:30,959
so that's uh our y so we have uh

00:15:27,360 --> 00:15:33,120
uh engineered the features for the x

00:15:30,959 --> 00:15:34,399
and also for output so this is going to

00:15:33,120 --> 00:15:37,120
actually

00:15:34,399 --> 00:15:38,240
factor into our model and the way it's

00:15:37,120 --> 00:15:39,600
gonna work

00:15:38,240 --> 00:15:42,160
now the next thing that we're going to

00:15:39,600 --> 00:15:45,360
do now is to

00:15:42,160 --> 00:15:49,519
split our data set into

00:15:45,360 --> 00:15:51,680
a training set and then testing set

00:15:49,519 --> 00:15:53,040
now why we do this is it's important

00:15:51,680 --> 00:15:56,560
that

00:15:53,040 --> 00:15:59,279
you actually use a part of the uh

00:15:56,560 --> 00:16:02,240
prelabeled dataset to be able to

00:15:59,279 --> 00:16:05,600
evaluate and see if your dataset

00:16:02,240 --> 00:16:07,199
is performing as it should so so what we

00:16:05,600 --> 00:16:11,360
just do here is

00:16:07,199 --> 00:16:15,759
we're going to use another imbued

00:16:11,360 --> 00:16:18,320
um function from sklen

00:16:15,759 --> 00:16:21,040
the model selection we're going to

00:16:18,320 --> 00:16:25,040
import a function that is called

00:16:21,040 --> 00:16:28,800
trend test split

00:16:25,040 --> 00:16:28,800
so let me try and just do some

00:16:28,880 --> 00:16:37,839
splits that that set into

00:16:33,519 --> 00:16:37,839
20 says

00:16:48,839 --> 00:16:51,839
um

00:16:53,759 --> 00:17:01,040
so it goes first

00:16:56,800 --> 00:17:03,120
trim split okay so before i proceed i'm

00:17:01,040 --> 00:17:06,559
gonna show you what's going on here

00:17:03,120 --> 00:17:10,400
uh this test trend split

00:17:06,559 --> 00:17:13,919
is gonna accept the first parameter

00:17:10,400 --> 00:17:14,640
x uh which is of course our x comma

00:17:13,919 --> 00:17:17,360
delta set

00:17:14,640 --> 00:17:18,160
and it's gonna split it into two put

00:17:17,360 --> 00:17:21,360
some part

00:17:18,160 --> 00:17:22,959
as x string and some bad as x there you

00:17:21,360 --> 00:17:24,319
could actually name this anything but

00:17:22,959 --> 00:17:27,120
this is kind of like

00:17:24,319 --> 00:17:30,720
what's then almost at the time okay and

00:17:27,120 --> 00:17:30,720
then it's also going to take our

00:17:31,280 --> 00:17:33,840
y

00:17:37,760 --> 00:17:43,679
and split it into some part will become

00:17:41,120 --> 00:17:44,559
wide trend and some parts become white

00:17:43,679 --> 00:17:47,280
text

00:17:44,559 --> 00:17:49,200
so how does he know to split this we're

00:17:47,280 --> 00:17:52,559
going to

00:17:49,200 --> 00:17:55,919
prepare a test size so

00:17:52,559 --> 00:17:59,840
uh 0.1 is 10 so now

00:17:55,919 --> 00:18:00,720
split the data set 90 10 so the 19

00:17:59,840 --> 00:18:03,360
percent of the

00:18:00,720 --> 00:18:04,559
data set will go to the trending x trend

00:18:03,360 --> 00:18:08,480
y trend

00:18:04,559 --> 00:18:11,760
the 10 percent will do x test y test

00:18:08,480 --> 00:18:13,440
all right so that makes sense and if we

00:18:11,760 --> 00:18:16,480
kind of like run

00:18:13,440 --> 00:18:19,600
okay let's see that's in a

00:18:16,480 --> 00:18:22,720
little boxy oh no this is trending

00:18:19,600 --> 00:18:25,200
test trend texts

00:18:22,720 --> 00:18:26,240
please not they are done so just watch

00:18:25,200 --> 00:18:29,760
out for

00:18:26,240 --> 00:18:29,760
little errors like this

00:18:30,480 --> 00:18:35,840
okay so if you want to check how you can

00:18:33,760 --> 00:18:38,320
take a look at your extreme what does it

00:18:35,840 --> 00:18:38,320
look like

00:18:38,559 --> 00:18:45,280
look at your experience so

00:18:42,480 --> 00:18:47,919
so what this means is we now have four

00:18:45,280 --> 00:18:51,120
variables to work with

00:18:47,919 --> 00:18:54,160
and i have four variables to work with

00:18:51,120 --> 00:18:54,160
oh sorry

00:18:54,640 --> 00:18:58,160
okay so we have white trend and we have

00:18:57,600 --> 00:19:03,120
right

00:18:58,160 --> 00:19:03,120
yes okay so

00:19:03,440 --> 00:19:07,200
and we're going to be working with all

00:19:05,440 --> 00:19:11,039
of these

00:19:07,200 --> 00:19:11,039
that's coming from what i said

00:19:11,280 --> 00:19:17,360
so uh so we are actually finished with

00:19:14,799 --> 00:19:18,400
pre-processing our data says so let's go

00:19:17,360 --> 00:19:20,160
ahead

00:19:18,400 --> 00:19:21,679
and actually do the model let's do the

00:19:20,160 --> 00:19:25,200
fun thing okay

00:19:21,679 --> 00:19:25,200
so uh let me cover this

00:19:28,080 --> 00:19:32,799
let's view the model right

00:19:33,520 --> 00:19:41,200
okay okay so

00:19:38,400 --> 00:19:42,720
we are building a deep neural network

00:19:41,200 --> 00:19:44,240
and we're going to be doing that with

00:19:42,720 --> 00:19:47,360
the carers

00:19:44,240 --> 00:19:50,880
so um we're going to import the

00:19:47,360 --> 00:19:55,440
dependencies we will need um to build

00:19:50,880 --> 00:19:58,480
this neural network called dependency

00:19:55,440 --> 00:19:59,120
so they're going to include of course we

00:19:58,480 --> 00:20:04,159
start by

00:19:59,120 --> 00:20:07,600
folding keras we'll import

00:20:04,159 --> 00:20:08,720
keras more death okay so we're going to

00:20:07,600 --> 00:20:11,600
actually

00:20:08,720 --> 00:20:12,400
post everything yes and just go back

00:20:11,600 --> 00:20:15,520
there

00:20:12,400 --> 00:20:19,360
and see from keras and

00:20:15,520 --> 00:20:21,440
models import

00:20:19,360 --> 00:20:23,760
sequential so we're building a

00:20:21,440 --> 00:20:26,080
sequential model one of the simplest

00:20:23,760 --> 00:20:28,559
neural network we can do

00:20:26,080 --> 00:20:29,760
there actually other ones so so let's

00:20:28,559 --> 00:20:33,679
just do

00:20:29,760 --> 00:20:39,280
a sequential and then we are trying to

00:20:33,679 --> 00:20:39,280
use uh just simple gas layers

00:20:45,919 --> 00:20:52,159
okay so we are all uh impulse

00:20:49,120 --> 00:20:54,480
you know matches into the outpost and

00:20:52,159 --> 00:20:58,480
sequential also means that

00:20:54,480 --> 00:21:00,720
um the impute from one layer becomes

00:20:58,480 --> 00:21:02,559
so the output from one layer becomes the

00:21:00,720 --> 00:21:04,320
intro to the nest there so it's just

00:21:02,559 --> 00:21:07,600
sequential

00:21:04,320 --> 00:21:07,600
all right the way it is

00:21:08,240 --> 00:21:14,559
in terms of flow back and right there

00:21:11,280 --> 00:21:15,919
okay so this is form actually this is

00:21:14,559 --> 00:21:17,919
very fun so we're going to build this

00:21:15,919 --> 00:21:21,760
neural network we're going to have a

00:21:17,919 --> 00:21:24,880
deep neural network uh generally network

00:21:21,760 --> 00:21:25,840
are divided into three layers the input

00:21:24,880 --> 00:21:28,880
layer

00:21:25,840 --> 00:21:31,919
the hidden layer and

00:21:28,880 --> 00:21:34,880
the output layer so the the

00:21:31,919 --> 00:21:36,880
input layer is starting from our input

00:21:34,880 --> 00:21:38,720
features the output layer is going to

00:21:36,880 --> 00:21:40,400
form what we're trying to predict

00:21:38,720 --> 00:21:42,000
so where are kind of where we play

00:21:40,400 --> 00:21:46,000
around is from the

00:21:42,000 --> 00:21:48,720
hidden layers so with more layers we add

00:21:46,000 --> 00:21:50,799
that's just gonna make things uh work

00:21:48,720 --> 00:21:54,080
the way we want it to work

00:21:50,799 --> 00:21:57,400
okay so um let's start building this

00:21:54,080 --> 00:22:00,720
model let's say motels and force

00:21:57,400 --> 00:22:03,120
sequential so we are building a

00:22:00,720 --> 00:22:05,200
sequential model

00:22:03,120 --> 00:22:08,480
now let's start adding layers to this

00:22:05,200 --> 00:22:12,240
model the first layer we're going to add

00:22:08,480 --> 00:22:14,880
uh is the first hidden layer

00:22:12,240 --> 00:22:15,919
okay so and it's a dense layer like i

00:22:14,880 --> 00:22:18,159
mentioned

00:22:15,919 --> 00:22:19,440
and we're going to include 16 neurons on

00:22:18,159 --> 00:22:23,760
16 nodes

00:22:19,440 --> 00:22:27,760
at that layer and

00:22:23,760 --> 00:22:31,280
it's going to have an input dimension of

00:22:27,760 --> 00:22:37,600
20 so this impute dimension

00:22:31,280 --> 00:22:40,480
is actually the 20 features from our x

00:22:37,600 --> 00:22:42,080
values the battery speed the battery

00:22:40,480 --> 00:22:45,440
power clock speed

00:22:42,080 --> 00:22:46,640
uh 4g that they have 20 features so

00:22:45,440 --> 00:22:49,679
they are the first thing that we're

00:22:46,640 --> 00:22:52,640
going to feed into the neural network

00:22:49,679 --> 00:22:53,600
and then the output from there is going

00:22:52,640 --> 00:22:57,520
to get

00:22:53,600 --> 00:23:00,159
to this next layer inside a hidden layer

00:22:57,520 --> 00:23:01,360
that's going to have 16 nodes so which

00:23:00,159 --> 00:23:03,520
will work on it

00:23:01,360 --> 00:23:04,640
and let's go ahead and add one more

00:23:03,520 --> 00:23:07,280
layer

00:23:04,640 --> 00:23:08,240
to the hidden layer so see how the dense

00:23:07,280 --> 00:23:11,520
layer

00:23:08,240 --> 00:23:14,559
uh let's just give it 12.

00:23:11,520 --> 00:23:16,480
uh okay we're going to specify an input

00:23:14,559 --> 00:23:17,840
dimension again because automatically

00:23:16,480 --> 00:23:22,960
because this is

00:23:17,840 --> 00:23:22,960
a sequential layer switch out

00:23:32,820 --> 00:23:38,720
[Music]

00:23:35,520 --> 00:23:43,360
so our model the

00:23:38,720 --> 00:23:46,400
is now at the last layer which is our

00:23:43,360 --> 00:23:51,840
output layer

00:23:46,400 --> 00:23:51,840
form because then

00:24:01,760 --> 00:24:04,799
okay so that's done believe it or not we

00:24:04,480 --> 00:24:09,039
have

00:24:04,799 --> 00:24:13,440
built a deep neural network okay so

00:24:09,039 --> 00:24:16,880
i'll just have two hidden layers

00:24:13,440 --> 00:24:19,520
the one with 16 and 12.

00:24:16,880 --> 00:24:21,760
so the the actually of course has four

00:24:19,520 --> 00:24:24,000
because we go back to our y

00:24:21,760 --> 00:24:26,320
you see that there are four different

00:24:24,000 --> 00:24:30,720
ones we need to look at zero points

00:24:26,320 --> 00:24:32,960
so it's gonna give us four output um

00:24:30,720 --> 00:24:32,960
four

00:24:33,840 --> 00:24:41,600
all right so um the next stage after

00:24:38,559 --> 00:24:45,279
you know setting up the layout and stuff

00:24:41,600 --> 00:24:48,480
is to compile a neural network

00:24:45,279 --> 00:24:51,600
so compiling the neural network is

00:24:48,480 --> 00:24:52,960
what's actually going to make it uh fit

00:24:51,600 --> 00:24:55,039
in together

00:24:52,960 --> 00:24:57,120
and right where we're doing it we're

00:24:55,039 --> 00:24:59,600
going to provide the loss function we're

00:24:57,120 --> 00:25:03,120
going to provide the optimizer

00:24:59,600 --> 00:25:06,320
will also provide the metrics we are

00:25:03,120 --> 00:25:10,640
very much interested in so we just mod

00:25:06,320 --> 00:25:15,279
the compile and we're going to specify

00:25:10,640 --> 00:25:15,279
the loss as the

00:25:15,320 --> 00:25:18,320
categorical

00:25:19,679 --> 00:25:26,320
cross entropy okay

00:25:22,960 --> 00:25:29,520
and then we'll specify and

00:25:26,320 --> 00:25:33,360
optimize that uh

00:25:29,520 --> 00:25:37,440
adam there are other ones sigmoid and

00:25:33,360 --> 00:25:41,600
stuff like that so uh metrics here

00:25:37,440 --> 00:25:44,960
is of course we are looking for accuracy

00:25:41,600 --> 00:25:48,159
which okay so

00:25:44,960 --> 00:25:51,279
um let's make sure this is working

00:25:48,159 --> 00:25:52,240
always before the progress okay so uh

00:25:51,279 --> 00:25:54,480
now we have done

00:25:52,240 --> 00:25:55,520
the next thing will be to train the

00:25:54,480 --> 00:25:59,360
model okay

00:25:55,520 --> 00:26:03,200
so train the model that's the easy part

00:25:59,360 --> 00:26:05,120
so we just do model dot feet

00:26:03,200 --> 00:26:06,320
because we want to attach this to the

00:26:05,120 --> 00:26:10,559
result

00:26:06,320 --> 00:26:16,159
after training so mother of the feet

00:26:10,559 --> 00:26:16,159
we should have x trend

00:26:17,919 --> 00:26:26,159
y trend to specify the epochs

00:26:21,520 --> 00:26:26,159
to be 100 and then

00:26:26,400 --> 00:26:33,200
batch size to be 64.

00:26:29,440 --> 00:26:36,000
so i'll explain this um

00:26:33,200 --> 00:26:38,260
so they they the external white training

00:26:36,000 --> 00:26:39,919
is what we're familiar

00:26:38,260 --> 00:26:42,400
[Music]

00:26:39,919 --> 00:26:43,039
telling the model how many times it has

00:26:42,400 --> 00:26:45,520
to

00:26:43,039 --> 00:26:47,440
you know go to the data set the cycle is

00:26:45,520 --> 00:26:48,640
gonna have to run so we're gonna do this

00:26:47,440 --> 00:26:50,960
hundred times

00:26:48,640 --> 00:26:55,039
during the training process the back

00:26:50,960 --> 00:26:55,039
side refers to the amount of the

00:26:55,520 --> 00:27:01,600
you know rules that is part of the

00:26:58,720 --> 00:27:02,880
says we're going to be picking up 64 at

00:27:01,600 --> 00:27:06,159
a time

00:27:02,880 --> 00:27:09,520
while he's uh doing this training so

00:27:06,159 --> 00:27:11,760
uh if you run this you will see some

00:27:09,520 --> 00:27:15,120
stuff display on your

00:27:11,760 --> 00:27:17,520
screen while this is going on

00:27:15,120 --> 00:27:20,399
and you're gonna be also seeing some

00:27:17,520 --> 00:27:22,880
accuracy results okay

00:27:20,399 --> 00:27:25,039
so so here you may have seen something

00:27:22,880 --> 00:27:28,159
like 1.0

00:27:25,039 --> 00:27:31,600
or 0.99 bloodborne this

00:27:28,159 --> 00:27:36,000
might not represent the final accuracy

00:27:31,600 --> 00:27:38,559
of your money but everything seems okay

00:27:36,000 --> 00:27:38,559
from here

00:27:40,320 --> 00:27:45,360
okay but we're not gonna just take our

00:27:42,880 --> 00:27:48,399
word for it we're gonna actually

00:27:45,360 --> 00:27:51,840
uh confirm that these works

00:27:48,399 --> 00:27:55,039
as we assumed so what we do

00:27:51,840 --> 00:27:57,200
is uh remember that we split our data

00:27:55,039 --> 00:27:58,640
set into training and the testing

00:27:57,200 --> 00:28:00,159
there's a reason why we do that is

00:27:58,640 --> 00:28:03,200
because of this

00:28:00,159 --> 00:28:07,120
we're gonna see why we did that so

00:28:03,200 --> 00:28:10,159
um if we run x trend and

00:28:07,120 --> 00:28:11,679
um use this to test so what this means

00:28:10,159 --> 00:28:13,039
if our model is going to make

00:28:11,679 --> 00:28:16,080
predictions

00:28:13,039 --> 00:28:16,960
if he makes prediction to supply it the

00:28:16,080 --> 00:28:21,039
information

00:28:16,960 --> 00:28:24,559
in x text then it should be able to

00:28:21,039 --> 00:28:27,760
give exact results of what

00:28:24,559 --> 00:28:28,640
is in our y test because those values in

00:28:27,760 --> 00:28:31,440
the x

00:28:28,640 --> 00:28:32,799
test actually what's generated the

00:28:31,440 --> 00:28:35,840
widest

00:28:32,799 --> 00:28:38,480
resource so so so we're going to

00:28:35,840 --> 00:28:40,159
do a little something i'm going to say

00:28:38,480 --> 00:28:44,559
why prediction

00:28:40,159 --> 00:28:47,840
is because mother don't predict

00:28:44,559 --> 00:28:51,279
so let's see predict our x test

00:28:47,840 --> 00:28:54,720
and let's see whether it gives us

00:28:51,279 --> 00:28:56,880
x test uh sorry white text so whether it

00:28:54,720 --> 00:28:58,399
will give us y test within this white

00:28:56,880 --> 00:29:01,440
prediction will be

00:28:58,399 --> 00:29:04,720
accepting us our

00:29:01,440 --> 00:29:08,399
um white house okay that makes sense

00:29:04,720 --> 00:29:10,640
all right um we'll simply look at our

00:29:08,399 --> 00:29:13,360
white test remember when

00:29:10,640 --> 00:29:14,480
one was encoded so let's kind of bring

00:29:13,360 --> 00:29:19,600
it back to the

00:29:14,480 --> 00:29:22,080
mama label so this was a white test

00:29:19,600 --> 00:29:22,640
so let's let's create a little list

00:29:22,080 --> 00:29:25,520
that's gonna

00:29:22,640 --> 00:29:26,720
contain all of these and then we're

00:29:25,520 --> 00:29:30,240
going to

00:29:26,720 --> 00:29:34,880
do something like for i in

00:29:30,240 --> 00:29:34,880
range then

00:29:35,520 --> 00:29:41,840
white test so we are going to say

00:29:42,559 --> 00:29:47,120
test on append and one of the reason i

00:29:45,679 --> 00:29:50,240
can just use a list and

00:29:47,120 --> 00:29:54,080
compile all of these are empty dots

00:29:50,240 --> 00:29:58,240
and mass is gonna help us to

00:29:54,080 --> 00:30:03,360
convert this back to the labels okay so

00:29:58,240 --> 00:30:03,360
and then we're going to print

00:30:03,440 --> 00:30:09,600
test so let's see what

00:30:07,039 --> 00:30:10,880
that is so this is our test right three

00:30:09,600 --> 00:30:13,600
zero three

00:30:10,880 --> 00:30:14,640
zero zero two three one one one so this

00:30:13,600 --> 00:30:17,279
is the

00:30:14,640 --> 00:30:18,159
what actually was in the test or white

00:30:17,279 --> 00:30:21,120
test

00:30:18,159 --> 00:30:22,080
uh i thought i'm splitting so let's see

00:30:21,120 --> 00:30:25,760
if the

00:30:22,080 --> 00:30:28,720
predictions met matches these

00:30:25,760 --> 00:30:30,399
okay so this makes sense also so let's

00:30:28,720 --> 00:30:34,000
call

00:30:30,399 --> 00:30:34,000
the new list predictions

00:30:34,080 --> 00:30:41,640
list and let's say for i

00:30:37,520 --> 00:30:44,480
in range learn

00:30:41,640 --> 00:30:50,240
predictions okay

00:30:44,480 --> 00:30:52,880
so so does the predictions

00:30:50,240 --> 00:30:55,760
sorry so this is going to actually be

00:30:52,880 --> 00:30:55,760
white red

00:30:56,000 --> 00:31:02,799
white thread the variable here

00:30:59,440 --> 00:31:05,120
so so predictions that attend

00:31:02,799 --> 00:31:05,120
okay

00:31:17,039 --> 00:31:19,840
traditions

00:31:20,480 --> 00:31:24,480
okay so if you're looking at this it's

00:31:22,159 --> 00:31:25,519
almost identical right three zero three

00:31:24,480 --> 00:31:27,760
zero zero

00:31:25,519 --> 00:31:30,720
so this is like a manual way of kind of

00:31:27,760 --> 00:31:33,120
like chicken i think one's a little

00:31:30,720 --> 00:31:33,120
young

00:31:45,760 --> 00:31:49,519
means uh the conditions okay

00:31:49,760 --> 00:31:55,840
so i'm just gonna do this right here um

00:31:53,039 --> 00:31:58,240
what we do right here now is we're

00:31:55,840 --> 00:32:00,960
actually going to use a standard

00:31:58,240 --> 00:32:03,279
accuracy measurement function to see the

00:32:00,960 --> 00:32:04,000
proper accuracy of what has happened

00:32:03,279 --> 00:32:06,320
here

00:32:04,000 --> 00:32:07,679
okay so what i just this this is okay we

00:32:06,320 --> 00:32:10,320
can just

00:32:07,679 --> 00:32:12,640
manually uh look at it and try to say

00:32:10,320 --> 00:32:15,679
okay

00:32:12,640 --> 00:32:16,960
let's find out the actual accuracy using

00:32:15,679 --> 00:32:20,960
uh

00:32:16,960 --> 00:32:24,720
stlan accuracy's score function

00:32:20,960 --> 00:32:29,840
so dot metrics

00:32:24,720 --> 00:32:29,840
import accuracy

00:32:30,880 --> 00:32:37,760
accuracy is called

00:32:34,080 --> 00:32:40,720
okay so so we're not going to say

00:32:37,760 --> 00:32:41,200
um we're going to measure the accuracy

00:32:40,720 --> 00:32:45,840
right

00:32:41,200 --> 00:32:49,600
now so we simply say accuracy

00:32:45,840 --> 00:32:54,799
because accuracy is

00:32:49,600 --> 00:32:54,799
called predictions

00:32:55,120 --> 00:33:01,600
and test so once the accuracy is called

00:32:59,120 --> 00:33:01,600
on this

00:33:04,159 --> 00:33:11,840
actually print this

00:33:13,360 --> 00:33:21,120
okay so it's 0.905

00:33:17,519 --> 00:33:24,960
okay that's the accuracy all right

00:33:21,120 --> 00:33:27,279
so 0.905 five and uh

00:33:24,960 --> 00:33:28,880
that was like nineteen percent so if you

00:33:27,279 --> 00:33:30,760
wanted to

00:33:28,880 --> 00:33:33,760
do this you could actually say

00:33:30,760 --> 00:33:33,760
percentage

00:33:36,840 --> 00:33:39,840
so

00:33:50,399 --> 00:33:53,760
okay so uh if i can see if we can

00:33:52,720 --> 00:33:58,640
improve

00:33:53,760 --> 00:33:58,640
this by retraining this model

00:33:59,440 --> 00:34:04,559
you can improve the accuracy by training

00:34:02,320 --> 00:34:07,039
the model

00:34:04,559 --> 00:34:07,039
okay

00:34:17,119 --> 00:34:21,200
so it doesn't improve you know so most

00:34:19,520 --> 00:34:24,240
times the more you train is the

00:34:21,200 --> 00:34:26,000
more is accuracy groups all right so

00:34:24,240 --> 00:34:27,679
now i have 91 percent but we're gonna

00:34:26,000 --> 00:34:30,480
just leave this

00:34:27,679 --> 00:34:31,679
uh this is not only to train and see how

00:34:30,480 --> 00:34:33,280
to build and trade we're just

00:34:31,679 --> 00:34:34,240
demonstrating how to build a neural

00:34:33,280 --> 00:34:38,079
network

00:34:34,240 --> 00:34:39,760
and then to deploy the in our django

00:34:38,079 --> 00:34:41,919
application remember that's actually

00:34:39,760 --> 00:34:45,200
where all of this is going

00:34:41,919 --> 00:34:45,679
okay so so what's remain now is uh we

00:34:45,200 --> 00:34:48,800
need to

00:34:45,679 --> 00:34:50,800
actually save this model uh so that we

00:34:48,800 --> 00:34:53,359
can take it to our jungle application

00:34:50,800 --> 00:34:56,079
right here it doesn't do well much good

00:34:53,359 --> 00:34:57,040
the the good of this is in the inference

00:34:56,079 --> 00:35:00,960
part of this

00:34:57,040 --> 00:35:05,520
model so uh we're gonna save this

00:35:00,960 --> 00:35:07,680
model to an h5 format

00:35:05,520 --> 00:35:09,520
and then we will be able to include that

00:35:07,680 --> 00:35:12,160
in our java application there actually

00:35:09,520 --> 00:35:15,920
other format you can save as json

00:35:12,160 --> 00:35:16,720
you can see that pb and another format

00:35:15,920 --> 00:35:19,760
like that

00:35:16,720 --> 00:35:22,160
but i always just prefer the h5

00:35:19,760 --> 00:35:24,079
uh because it gives me one single file i

00:35:22,160 --> 00:35:25,839
can always just work with

00:35:24,079 --> 00:35:27,280
i don't know i just i love simple things

00:35:25,839 --> 00:35:30,320
that's why so

00:35:27,280 --> 00:35:33,440
um if we're going to do this is not

00:35:30,320 --> 00:35:33,440
rocket science so

00:35:34,160 --> 00:35:40,079
that we actually have a

00:35:37,440 --> 00:35:40,720
function already to do this remember we

00:35:40,079 --> 00:35:44,160
said we

00:35:40,720 --> 00:35:47,599
want um to save this

00:35:44,160 --> 00:35:48,079
english folder save mode so that's where

00:35:47,599 --> 00:35:52,160
we are

00:35:48,079 --> 00:35:55,920
actually going to save it

00:35:52,160 --> 00:35:55,920
so let's call it my

00:35:56,839 --> 00:36:02,720
model.h5 okay

00:35:59,520 --> 00:36:04,160
so if that works we should see our model

00:36:02,720 --> 00:36:07,760
right here

00:36:04,160 --> 00:36:10,800
okay so we have built uh

00:36:07,760 --> 00:36:12,880
the model this neural network

00:36:10,800 --> 00:36:13,839
if you walked along with me congrats you

00:36:12,880 --> 00:36:15,359
just built

00:36:13,839 --> 00:36:16,960
you'll be running without your first

00:36:15,359 --> 00:36:19,920
time you deserve

00:36:16,960 --> 00:36:22,160
uh yourself some club i will have gone

00:36:19,920 --> 00:36:24,400
through so many things including

00:36:22,160 --> 00:36:27,200
feature engineering here preparing a

00:36:24,400 --> 00:36:27,200
data set

00:36:29,040 --> 00:36:33,200
so let's move over to the next segment

00:36:32,320 --> 00:36:36,400
of the workshop

00:36:33,200 --> 00:36:38,400
deploying this in a django app

00:36:36,400 --> 00:36:40,960
the second part of this workshop is

00:36:38,400 --> 00:36:43,040
where we show how to deploy

00:36:40,960 --> 00:36:44,320
this neural network we created in the

00:36:43,040 --> 00:36:46,640
jungle app

00:36:44,320 --> 00:36:49,040
it is assumed that you already know how

00:36:46,640 --> 00:36:51,359
to create a new jungle project

00:36:49,040 --> 00:36:52,640
set up a virtual environment and install

00:36:51,359 --> 00:36:54,960
requirements

00:36:52,640 --> 00:36:57,760
from your requirements text file those

00:36:54,960 --> 00:37:00,160
basics are not covered in this workshop

00:36:57,760 --> 00:37:01,920
we'll be focusing only on the path that

00:37:00,160 --> 00:37:05,119
they never lost to deploy

00:37:01,920 --> 00:37:06,000
our model in a project okay so let's get

00:37:05,119 --> 00:37:10,079
to it

00:37:06,000 --> 00:37:13,359
okay um welcome to the

00:37:10,079 --> 00:37:16,960
second part of this workshop

00:37:13,359 --> 00:37:17,680
in this part um we are just going to be

00:37:16,960 --> 00:37:19,599
working

00:37:17,680 --> 00:37:21,359
and building these uh interface i just

00:37:19,599 --> 00:37:23,920
want to show you what the

00:37:21,359 --> 00:37:25,440
finished project will look like so we're

00:37:23,920 --> 00:37:27,680
going to have these

00:37:25,440 --> 00:37:29,200
with the phone features where the user

00:37:27,680 --> 00:37:31,200
can type in

00:37:29,200 --> 00:37:32,880
the features on their phone battery

00:37:31,200 --> 00:37:36,000
power clock speed

00:37:32,880 --> 00:37:39,280
front camera and so on some of these are

00:37:36,000 --> 00:37:40,960
float values and then right here we have

00:37:39,280 --> 00:37:43,680
all the boolean

00:37:40,960 --> 00:37:44,800
features bluetooth yeah this one has

00:37:43,680 --> 00:37:47,359
bluetooth

00:37:44,800 --> 00:37:48,800
no dual sim and so on and so forth so

00:37:47,359 --> 00:37:53,200
after all this

00:37:48,800 --> 00:37:55,440
uh the user is going to click on

00:37:53,200 --> 00:37:56,560
predict and then gets that this is

00:37:55,440 --> 00:37:58,480
successful

00:37:56,560 --> 00:38:00,480
it's predicted that this phone should

00:37:58,480 --> 00:38:02,079
fall on range two

00:38:00,480 --> 00:38:04,640
which is between a thousand three

00:38:02,079 --> 00:38:07,040
hundred to two thousand 000

00:38:04,640 --> 00:38:09,280
uh again you have to note that these are

00:38:07,040 --> 00:38:10,880
all just action prices for the purpose

00:38:09,280 --> 00:38:13,119
of this workshop

00:38:10,880 --> 00:38:14,079
they don't actually represent actual

00:38:13,119 --> 00:38:17,119
price range

00:38:14,079 --> 00:38:20,000
of phones so it's not like you can just

00:38:17,119 --> 00:38:20,640
take this and they argued with the

00:38:20,000 --> 00:38:22,079
seller

00:38:20,640 --> 00:38:24,800
right now okay but this is a

00:38:22,079 --> 00:38:28,000
demonstration to show how we can

00:38:24,800 --> 00:38:30,839
uh deploy a deep neural network

00:38:28,000 --> 00:38:32,960
to a django app so let's get to the

00:38:30,839 --> 00:38:34,560
coding

00:38:32,960 --> 00:38:36,240
okay so the first thing we're going to

00:38:34,560 --> 00:38:38,320
do is we're going to go to

00:38:36,240 --> 00:38:40,640
github and clone the ripple for this

00:38:38,320 --> 00:38:43,839
workshop to be able to carry on

00:38:40,640 --> 00:38:45,100
with the second part i have this triple

00:38:43,839 --> 00:38:46,640
sam scala slash

00:38:45,100 --> 00:38:48,880
[Music]

00:38:46,640 --> 00:38:50,640
africa 2020 workshop so you're going to

00:38:48,880 --> 00:38:54,160
clone this repo

00:38:50,640 --> 00:38:57,359
to your local pc to be able to

00:38:54,160 --> 00:38:59,599
uh work with me in this second part so

00:38:57,359 --> 00:39:03,200
when you do this you're going to have

00:38:59,599 --> 00:39:06,880
these uh directories and files

00:39:03,200 --> 00:39:08,640
as part of what you just opened and then

00:39:06,880 --> 00:39:10,560
the one we're going to be using is the

00:39:08,640 --> 00:39:12,000
student template it's kind of like the

00:39:10,560 --> 00:39:14,720
entire project

00:39:12,000 --> 00:39:16,880
you know inside the project so the whole

00:39:14,720 --> 00:39:18,960
of this is the entire project if you run

00:39:16,880 --> 00:39:20,480
this the price manager fire on server

00:39:18,960 --> 00:39:23,280
you are running the entire project

00:39:20,480 --> 00:39:25,280
but if you look at the student folder or

00:39:23,280 --> 00:39:27,760
student template is like

00:39:25,280 --> 00:39:29,200
i'm not a smaller portion of this

00:39:27,760 --> 00:39:31,520
project so that we can just

00:39:29,200 --> 00:39:33,359
work with independently i don't want to

00:39:31,520 --> 00:39:34,320
put it in a separate repo so you just

00:39:33,359 --> 00:39:36,320
download that

00:39:34,320 --> 00:39:37,520
so the one we're going to be opening is

00:39:36,320 --> 00:39:39,839
the student

00:39:37,520 --> 00:39:41,040
template file uh student template

00:39:39,839 --> 00:39:44,240
directory so i'm gonna

00:39:41,040 --> 00:39:48,160
gonna use my vs code and

00:39:44,240 --> 00:39:49,440
open the folder right here so the one

00:39:48,160 --> 00:39:53,920
i'm looking to open

00:39:49,440 --> 00:39:56,960
is this the student template

00:39:53,920 --> 00:40:01,200
okay so once i open the

00:39:56,960 --> 00:40:05,520
student template um i will

00:40:01,200 --> 00:40:08,000
have let's just see what this looks like

00:40:05,520 --> 00:40:09,599
oh let's see what this looks like right

00:40:08,000 --> 00:40:13,200
here i'm gonna

00:40:09,599 --> 00:40:16,640
start a new command prompt

00:40:13,200 --> 00:40:20,160
and go right where

00:40:16,640 --> 00:40:21,520
every of these is so um you're gonna

00:40:20,160 --> 00:40:24,960
create also

00:40:21,520 --> 00:40:26,160
a virtual and then you're going to

00:40:24,960 --> 00:40:28,160
install

00:40:26,160 --> 00:40:31,520
all the things that you have in these

00:40:28,160 --> 00:40:33,920
requirements folder right here

00:40:31,520 --> 00:40:36,160
so everything here you're going to have

00:40:33,920 --> 00:40:40,720
to install it on your

00:40:36,160 --> 00:40:41,920
uh system uh so that's just it again

00:40:40,720 --> 00:40:44,000
so all of these you're gonna have to

00:40:41,920 --> 00:40:44,640
install it you're gonna create virtual

00:40:44,000 --> 00:40:46,480
environment

00:40:44,640 --> 00:40:48,319
right now which i've already done and

00:40:46,480 --> 00:40:51,200
installed the rest of this

00:40:48,319 --> 00:40:52,160
so i'm just gonna quickly test out uh

00:40:51,200 --> 00:40:55,440
what

00:40:52,160 --> 00:40:58,640
the page looks like so let me first

00:40:55,440 --> 00:41:01,440
activate my virtual environment

00:40:58,640 --> 00:41:01,440
okay quickly

00:41:02,079 --> 00:41:06,240
i'm using the windows operating system

00:41:05,520 --> 00:41:09,280
so

00:41:06,240 --> 00:41:12,720
filling that on linux or mac you should

00:41:09,280 --> 00:41:16,000
know how to activate that as well source

00:41:12,720 --> 00:41:20,640
beam slash activate so um

00:41:16,000 --> 00:41:22,560
i'll just go ahead and open the student

00:41:20,640 --> 00:41:25,440
actually never detect project model

00:41:22,560 --> 00:41:27,599
server so so let me look at what i have

00:41:25,440 --> 00:41:30,880
here and then i can just say

00:41:27,599 --> 00:41:35,520
um python manage the

00:41:30,880 --> 00:41:39,040
pi run seven

00:41:35,520 --> 00:41:43,599
okay so i i want to see what the

00:41:39,040 --> 00:41:46,839
student stuff looks like um

00:41:43,599 --> 00:41:48,880
i'm checking at this now so one two

00:41:46,839 --> 00:41:51,920
seven

00:41:48,880 --> 00:41:54,480
so so this is like the project

00:41:51,920 --> 00:41:56,640
so the front page is already front end

00:41:54,480 --> 00:41:58,880
is already completed i don't want us to

00:41:56,640 --> 00:41:59,760
go into doing the html unknown it's just

00:41:58,880 --> 00:42:02,880
gonna take

00:41:59,760 --> 00:42:03,920
a lot of time so that's why i prepared

00:42:02,880 --> 00:42:06,480
it

00:42:03,920 --> 00:42:08,960
so that we can just work on the

00:42:06,480 --> 00:42:11,599
deployment side for our model

00:42:08,960 --> 00:42:13,359
okay so if we have all of these i'm

00:42:11,599 --> 00:42:16,079
going to show you also some part of this

00:42:13,359 --> 00:42:18,800
code so that makes sense the whole pages

00:42:16,079 --> 00:42:19,599
that you saw first is being started from

00:42:18,800 --> 00:42:23,119
here

00:42:19,599 --> 00:42:24,960
i have a form not a model form but just

00:42:23,119 --> 00:42:26,640
an ordinary django form i don't have any

00:42:24,960 --> 00:42:29,280
models set up because

00:42:26,640 --> 00:42:30,720
i'm not going to be saving this up to a

00:42:29,280 --> 00:42:33,520
database

00:42:30,720 --> 00:42:36,720
or anything like that okay so that's why

00:42:33,520 --> 00:42:40,079
i don't have any model configured

00:42:36,720 --> 00:42:43,599
for this particular uh

00:42:40,079 --> 00:42:47,040
project yeah so no more there okay

00:42:43,599 --> 00:42:49,359
but then i have a form that you know

00:42:47,040 --> 00:42:51,280
provides all these features battery

00:42:49,359 --> 00:42:54,880
power clock speed

00:42:51,280 --> 00:42:57,200
and the levels are there so for user to

00:42:54,880 --> 00:42:59,119
enter all of this which is just what we

00:42:57,200 --> 00:43:01,359
have uh seen here

00:42:59,119 --> 00:43:02,960
and i have some boolean values which i

00:43:01,359 --> 00:43:06,160
did with the check field that could be

00:43:02,960 --> 00:43:10,839
done true or false and

00:43:06,160 --> 00:43:14,160
i kind of noticed that this wants you to

00:43:10,839 --> 00:43:16,400
always uh you know feel it or check this

00:43:14,160 --> 00:43:18,800
like required by default

00:43:16,400 --> 00:43:20,480
so i just kind of disabled that using

00:43:18,800 --> 00:43:22,960
required of course first

00:43:20,480 --> 00:43:24,560
so that when you don't have any of those

00:43:22,960 --> 00:43:26,800
features you could leave it empty and

00:43:24,560 --> 00:43:29,520
then we'll process it as force

00:43:26,800 --> 00:43:30,720
from the back end and so this is where

00:43:29,520 --> 00:43:34,000
we just add some

00:43:30,720 --> 00:43:37,200
bootstrap a class to our

00:43:34,000 --> 00:43:39,359
form fields so this is what is giving us

00:43:37,200 --> 00:43:40,640
the front end there are some dummy pages

00:43:39,359 --> 00:43:43,680
as well that

00:43:40,640 --> 00:43:47,040
we could go ahead and fill something in

00:43:43,680 --> 00:43:48,800
but this is where our interest is at the

00:43:47,040 --> 00:43:51,040
moment like i showed you

00:43:48,800 --> 00:43:52,160
uh previously the completed work we're

00:43:51,040 --> 00:43:56,079
gonna do the

00:43:52,160 --> 00:43:58,560
and build the completed work right away

00:43:56,079 --> 00:44:00,319
okay so let's get started with this next

00:43:58,560 --> 00:44:02,319
the first thing we're going to do

00:44:00,319 --> 00:44:04,240
if we're going to build a completed work

00:44:02,319 --> 00:44:08,720
is we are going to create

00:44:04,240 --> 00:44:12,720
um we're going to create a new

00:44:08,720 --> 00:44:16,160
oh just going to say python

00:44:12,720 --> 00:44:19,440
manage.pi start app

00:44:16,160 --> 00:44:23,920
api so let's create a new app called

00:44:19,440 --> 00:44:25,359
api and it does it right there so we

00:44:23,920 --> 00:44:29,119
have this

00:44:25,359 --> 00:44:31,440
api so this api is where we are going to

00:44:29,119 --> 00:44:34,000
you know integrate our mod there because

00:44:31,440 --> 00:44:38,000
we're going to actually serving it on

00:44:34,000 --> 00:44:40,960
jungle rest with django rest framework

00:44:38,000 --> 00:44:44,319
and if you look at our model server

00:44:40,960 --> 00:44:47,599
settings we already have

00:44:44,319 --> 00:44:50,240
the rest framework app added and then

00:44:47,599 --> 00:44:50,640
our pages so we're going to go ahead and

00:44:50,240 --> 00:44:54,160
add

00:44:50,640 --> 00:44:57,760
api to this okay

00:44:54,160 --> 00:45:02,800
so then we will

00:44:57,760 --> 00:45:02,800
also update the url so we should

00:45:02,839 --> 00:45:12,160
have path api

00:45:07,119 --> 00:45:14,240
and we should change this to api.urls

00:45:12,160 --> 00:45:15,520
and we should change the namespace to

00:45:14,240 --> 00:45:19,760
api

00:45:15,520 --> 00:45:22,640
okay so then that means we need to

00:45:19,760 --> 00:45:24,720
uh we're going to need to create an api

00:45:22,640 --> 00:45:28,400
a url

00:45:24,720 --> 00:45:31,119
of dot pi on our api app

00:45:28,400 --> 00:45:32,319
so i'm just going to get the api from

00:45:31,119 --> 00:45:35,760
here

00:45:32,319 --> 00:45:38,800
copy the whole of this and come to the

00:45:35,760 --> 00:45:42,240
um api app and

00:45:38,800 --> 00:45:44,400
create a new urls.pi

00:45:42,240 --> 00:45:45,359
i'll just paste the whole of this

00:45:44,400 --> 00:45:50,240
changes to

00:45:45,359 --> 00:45:53,839
api so what i actually need is to have

00:45:50,240 --> 00:45:57,680
a predict um

00:45:53,839 --> 00:46:01,680
endpoint so we have this

00:45:57,680 --> 00:46:06,079
and so this is gonna be views dot

00:46:01,680 --> 00:46:07,920
predict and so this is gonna be ups name

00:46:06,079 --> 00:46:11,040
of course

00:46:07,920 --> 00:46:14,160
3d so the rest of these are

00:46:11,040 --> 00:46:17,680
not gonna be needed here

00:46:14,160 --> 00:46:18,720
okay so we save uh vs code of course has

00:46:17,680 --> 00:46:22,240
some

00:46:18,720 --> 00:46:24,079
git um compatibilities part of our

00:46:22,240 --> 00:46:26,319
liking you can just

00:46:24,079 --> 00:46:28,319
bash and control your stuff right away

00:46:26,319 --> 00:46:32,560
from the stamina here

00:46:28,319 --> 00:46:33,440
so i could do some uh his titles and see

00:46:32,560 --> 00:46:36,880
that

00:46:33,440 --> 00:46:40,839
i have a lot of uh on trend

00:46:36,880 --> 00:46:44,319
files okay so um i'm gonna

00:46:40,839 --> 00:46:46,000
deactivate that base conduct-based stuff

00:46:44,319 --> 00:46:49,599
so

00:46:46,000 --> 00:46:52,640
all right so i'll just do git add um

00:46:49,599 --> 00:46:56,960
just to keep everything going on

00:46:52,640 --> 00:47:00,319
and then um git commits

00:46:56,960 --> 00:47:04,640
iphone m so i'm gonna call this

00:47:00,319 --> 00:47:06,880
created created the api

00:47:04,640 --> 00:47:06,880
app

00:47:08,240 --> 00:47:12,000
all right so we have the api app right

00:47:11,200 --> 00:47:14,720
now

00:47:12,000 --> 00:47:15,359
we've set it up in settings and a url so

00:47:14,720 --> 00:47:16,960
it's

00:47:15,359 --> 00:47:18,720
time we're going to already see that

00:47:16,960 --> 00:47:21,200
we're going to have a if you stop

00:47:18,720 --> 00:47:24,720
predict here so we're going to

00:47:21,200 --> 00:47:26,240
create this right away so this is

00:47:24,720 --> 00:47:29,520
actually where

00:47:26,240 --> 00:47:30,000
uh our you know integration is going to

00:47:29,520 --> 00:47:33,520
happen

00:47:30,000 --> 00:47:38,000
in the views uh file

00:47:33,520 --> 00:47:40,960
so it's just uh very much important for

00:47:38,000 --> 00:47:42,160
us mulchika was causing erosion so let's

00:47:40,960 --> 00:47:45,280
see

00:47:42,160 --> 00:47:45,280
okay so that's it

00:47:46,559 --> 00:47:51,760
okay so um

00:47:49,760 --> 00:47:53,520
is where we're going to have all the

00:47:51,760 --> 00:47:55,119
integration happen

00:47:53,520 --> 00:47:57,680
so i'm going to go ahead and begin to

00:47:55,119 --> 00:48:02,880
import some of the features we need

00:47:57,680 --> 00:48:04,720
skill and dot pre-processing

00:48:02,880 --> 00:48:08,559
okay so we're going to say from sklearn

00:48:04,720 --> 00:48:08,559
dot pre-processing import

00:48:08,880 --> 00:48:12,559
standard scala

00:48:13,280 --> 00:48:22,000
we're going to save from keras

00:48:17,760 --> 00:48:22,000
dot models

00:48:22,800 --> 00:48:30,880
import load model

00:48:27,440 --> 00:48:34,359
and then from

00:48:30,880 --> 00:48:37,359
rest framework dot

00:48:34,359 --> 00:48:37,359
decorators

00:48:37,520 --> 00:48:43,440
impose api

00:48:41,119 --> 00:48:43,440
view

00:48:44,160 --> 00:48:53,839
and then from rest

00:48:49,359 --> 00:48:53,839
framework okay

00:48:53,920 --> 00:48:57,200
okay import response which you're gonna

00:48:56,559 --> 00:49:00,640
use to

00:48:57,200 --> 00:49:04,079
give the user back the feedback

00:49:00,640 --> 00:49:08,000
so we're also going to uh import

00:49:04,079 --> 00:49:11,200
numpy as mp and

00:49:08,000 --> 00:49:15,040
okay we'll just have that for now so

00:49:11,200 --> 00:49:18,880
let's go ahead and create these uh

00:49:15,040 --> 00:49:23,760
at api

00:49:18,880 --> 00:49:23,760
view okay

00:49:26,240 --> 00:49:34,480
so let's call this dev predict

00:49:31,359 --> 00:49:37,280
request all right

00:49:34,480 --> 00:49:37,280
so we're going to

00:49:37,760 --> 00:49:44,800
get the input from the user

00:49:41,599 --> 00:49:47,520
from our form so those inputs are just

00:49:44,800 --> 00:49:50,800
uh the rest of all we have in our file

00:49:47,520 --> 00:49:55,280
battery power clock speed front camera

00:49:50,800 --> 00:49:58,400
okay so i'm going to um

00:49:55,280 --> 00:50:00,000
copy the whole of this

00:49:58,400 --> 00:50:02,880
because it's virtually what we're going

00:50:00,000 --> 00:50:06,559
to be using for this and

00:50:02,880 --> 00:50:10,319
let's see what happens okay so i

00:50:06,559 --> 00:50:14,960
get that get that

00:50:10,319 --> 00:50:16,960
okay i think this to just

00:50:14,960 --> 00:50:18,480
this might take longer if you use this

00:50:16,960 --> 00:50:23,839
so battery

00:50:18,480 --> 00:50:23,839
power um yeah it calls a

00:50:24,839 --> 00:50:29,839
request.data dot get

00:50:31,280 --> 00:50:38,319
battery power so if there is no value

00:50:35,280 --> 00:50:41,760
provided we default it to none

00:50:38,319 --> 00:50:43,760
so let's also uh so we're going to do

00:50:41,760 --> 00:50:47,359
this for the entire

00:50:43,760 --> 00:50:50,640
20 um variables

00:50:47,359 --> 00:50:54,480
or features from our phone

00:50:50,640 --> 00:50:58,559
so this is going to be clock

00:50:54,480 --> 00:51:01,119
speed then we have the front

00:50:58,559 --> 00:51:01,119
camera

00:51:03,920 --> 00:51:10,400
so which is also going to end up

00:51:06,960 --> 00:51:10,400
on the front camera

00:51:14,240 --> 00:51:20,400
okay so i just completed um

00:51:17,599 --> 00:51:22,079
the rest of the entering everything

00:51:20,400 --> 00:51:25,280
about the feature so

00:51:22,079 --> 00:51:27,040
i paused the video and just went

00:51:25,280 --> 00:51:28,720
straight ahead so

00:51:27,040 --> 00:51:30,480
if you haven't got up the point you

00:51:28,720 --> 00:51:32,240
could just pause it as well and

00:51:30,480 --> 00:51:36,319
just enter it's kind of a repetitive

00:51:32,240 --> 00:51:40,000
stuff getting all the data from

00:51:36,319 --> 00:51:41,280
the you know form we have at the front

00:51:40,000 --> 00:51:43,200
end so we have

00:51:41,280 --> 00:51:44,640
the whole 20 features battery power

00:51:43,200 --> 00:51:47,359
clock speed

00:51:44,640 --> 00:51:48,960
now our all the other fuels we default

00:51:47,359 --> 00:51:51,520
to non if

00:51:48,960 --> 00:51:52,640
it's not uh they use that fails to enter

00:51:51,520 --> 00:51:56,160
anything

00:51:52,640 --> 00:51:56,960
and the boolean uh part will default to

00:51:56,160 --> 00:51:59,599
zero

00:51:56,960 --> 00:52:00,640
if the user fails to enter something

00:51:59,599 --> 00:52:02,720
right there

00:52:00,640 --> 00:52:04,079
all right so there's a try statement

00:52:02,720 --> 00:52:06,480
there so let's

00:52:04,079 --> 00:52:06,480
kind of

00:52:07,280 --> 00:52:11,359
put the exception you know part of that

00:52:10,319 --> 00:52:15,280
the

00:52:11,359 --> 00:52:18,640
code okay so it doesn't keep hanging

00:52:15,280 --> 00:52:23,119
as exception

00:52:18,640 --> 00:52:26,880
okay so um i'm gonna do something

00:52:23,119 --> 00:52:28,000
right there soon okay so let's just keep

00:52:26,880 --> 00:52:31,440
it at pass

00:52:28,000 --> 00:52:32,240
but then um after getting the whole of

00:52:31,440 --> 00:52:34,960
this

00:52:32,240 --> 00:52:36,960
so what we're going to do next is uh

00:52:34,960 --> 00:52:38,079
we're going to try to be sure that the

00:52:36,960 --> 00:52:41,520
user

00:52:38,079 --> 00:52:42,960
have not entered that there is no known

00:52:41,520 --> 00:52:44,400
in any of those features

00:52:42,960 --> 00:52:46,079
so what we're going to do is we're going

00:52:44,400 --> 00:52:49,280
to create

00:52:46,079 --> 00:52:52,720
uh a list

00:52:49,280 --> 00:52:56,079
and in all of these

00:52:52,720 --> 00:52:58,319
data we just got from the form so we're

00:52:56,079 --> 00:53:03,599
gonna have a

00:52:58,319 --> 00:53:06,880
battery power clock speed

00:53:03,599 --> 00:53:11,599
front camera okay

00:53:06,880 --> 00:53:15,200
just the whole of them in thunder memory

00:53:11,599 --> 00:53:18,559
all right and

00:53:15,200 --> 00:53:22,559
internal memory will have mobile

00:53:18,559 --> 00:53:25,760
depth so i'm just kind of keeping it

00:53:22,559 --> 00:53:27,760
in another with the way it appears and

00:53:25,760 --> 00:53:30,880
calls

00:53:27,760 --> 00:53:34,480
primary camera uh

00:53:30,880 --> 00:53:39,119
pixel height okay then we have

00:53:34,480 --> 00:53:43,760
pixel with half pixel wheel to have

00:53:39,119 --> 00:53:47,920
ram size and then we have the screen

00:53:43,760 --> 00:53:52,960
height and the screen with

00:53:47,920 --> 00:53:52,960
okay and then there's the top time

00:53:53,839 --> 00:53:57,520
then i have the bluetooth i have the

00:53:57,040 --> 00:54:01,119
dual

00:53:57,520 --> 00:54:04,960
sim the

00:54:01,119 --> 00:54:09,599
4g and then

00:54:04,960 --> 00:54:14,160
3g 3g

00:54:09,599 --> 00:54:18,000
touchscreen and finally the wi-fi

00:54:14,160 --> 00:54:20,800
so so just

00:54:18,000 --> 00:54:21,920
uh making sure that we have all the

00:54:20,800 --> 00:54:24,960
theme

00:54:21,920 --> 00:54:26,260
um the user has entered you know

00:54:24,960 --> 00:54:28,880
together so if

00:54:26,260 --> 00:54:31,839
[Music]

00:54:28,880 --> 00:54:33,440
so this is going to actually be an if so

00:54:31,839 --> 00:54:35,839
we can only progress

00:54:33,440 --> 00:54:37,280
if there are no minimum values and

00:54:35,839 --> 00:54:39,520
features

00:54:37,280 --> 00:54:41,599
so if not known and future then this is

00:54:39,520 --> 00:54:44,960
where we can actually

00:54:41,599 --> 00:54:46,799
uh begin to progress okay

00:54:44,960 --> 00:54:48,640
so what we're going to do now since we

00:54:46,799 --> 00:54:50,720
don't have any known if we have no

00:54:48,640 --> 00:54:52,400
known if there's a non of course an

00:54:50,720 --> 00:54:55,520
error will be drawn

00:54:52,400 --> 00:54:56,000
somewhere here so for now let's just say

00:54:55,520 --> 00:54:59,200
pass

00:54:56,000 --> 00:54:59,200
we'll get back to it

00:54:59,520 --> 00:55:05,520
if not none in futures so we're going to

00:55:02,400 --> 00:55:09,119
convert all these

00:55:05,520 --> 00:55:12,559
values to their appropriate type

00:55:09,119 --> 00:55:14,480
because these are just um strings gotten

00:55:12,559 --> 00:55:18,880
from

00:55:14,480 --> 00:55:22,160
the forms on our website so

00:55:18,880 --> 00:55:25,119
we will want to convert all of these

00:55:22,160 --> 00:55:26,400
to their proper data type so it's going

00:55:25,119 --> 00:55:29,760
to be like

00:55:26,400 --> 00:55:30,559
typing the whole of this again once more

00:55:29,760 --> 00:55:34,240
but

00:55:30,559 --> 00:55:37,040
to save ourselves that much trouble i'm

00:55:34,240 --> 00:55:40,880
just going to

00:55:37,040 --> 00:55:44,400
just do some

00:55:40,880 --> 00:55:44,400
hack let's make sure the

00:55:46,160 --> 00:56:03,839
in the intense eye anoda

00:56:06,079 --> 00:56:09,839
okay so once in this another so what i'm

00:56:08,240 --> 00:56:12,000
going to just do is i'm going to be

00:56:09,839 --> 00:56:16,000
converting some of these to end

00:56:12,000 --> 00:56:20,079
and and the sun to float so um

00:56:16,000 --> 00:56:22,960
let me get this and convert

00:56:20,079 --> 00:56:22,960
these two

00:56:23,119 --> 00:56:27,440
ends because i'm not gonna do that for

00:56:26,000 --> 00:56:32,480
all of it so let me just

00:56:27,440 --> 00:56:32,480
pick just a few of them

00:56:32,640 --> 00:56:36,000
okay so i would have to stop that

00:56:34,400 --> 00:56:36,880
because we actually need those other

00:56:36,000 --> 00:56:40,160
ones

00:56:36,880 --> 00:56:43,200
okay so and then i'm going to convert

00:56:40,160 --> 00:56:43,680
the whole of these to it's kind of like

00:56:43,200 --> 00:56:46,480
some

00:56:43,680 --> 00:56:48,000
lazy hack you can use to do some

00:56:46,480 --> 00:56:50,559
repetitive stuff

00:56:48,000 --> 00:56:51,760
okay so i'm gonna remove all of these

00:56:50,559 --> 00:56:55,920
all of these

00:56:51,760 --> 00:56:59,599
all of these i love these

00:56:55,920 --> 00:57:00,799
okay so this goes off um i'm going to do

00:56:59,599 --> 00:57:03,119
that also for

00:57:00,799 --> 00:57:03,119
here

00:57:06,640 --> 00:57:10,839
start not here it's going to do that for

00:57:09,599 --> 00:57:15,200
here

00:57:10,839 --> 00:57:20,079
and change

00:57:15,200 --> 00:57:24,440
these to this okay so so these are like

00:57:20,079 --> 00:57:26,640
getting input from the user and then

00:57:24,440 --> 00:57:28,000
pre-processing the input because we

00:57:26,640 --> 00:57:30,480
actually now clock

00:57:28,000 --> 00:57:32,079
speed is actually supposed to be in

00:57:30,480 --> 00:57:36,559
float from the data set

00:57:32,079 --> 00:57:37,119
and the mobile depth is also supposed to

00:57:36,559 --> 00:57:41,599
be in

00:57:37,119 --> 00:57:43,520
float okay so and uh

00:57:41,599 --> 00:57:46,319
what we're gonna do here is we have to

00:57:43,520 --> 00:57:50,240
first of all convert this to

00:57:46,319 --> 00:57:52,480
boolean because if um the user enters

00:57:50,240 --> 00:57:54,480
if she checks the button it's actually

00:57:52,480 --> 00:57:57,760
gonna return

00:57:54,480 --> 00:58:01,440
on like a string on

00:57:57,760 --> 00:58:05,280
okay or off so so we have to

00:58:01,440 --> 00:58:09,839
convert that to boolean and then before

00:58:05,280 --> 00:58:09,839
putting that into an integer so

00:58:12,000 --> 00:58:18,160
so when converts to boolean it gives us

00:58:15,200 --> 00:58:20,839
it gives us true or false which we

00:58:18,160 --> 00:58:24,720
cannot convert to

00:58:20,839 --> 00:58:29,440
uh an integer

00:58:24,720 --> 00:58:32,079
so if all of this goes fine and

00:58:29,440 --> 00:58:35,040
the user have done now i've not entered

00:58:32,079 --> 00:58:37,200
any non so we can process this then

00:58:35,040 --> 00:58:39,040
we need to recreate this with the new

00:58:37,200 --> 00:58:41,200
values so

00:58:39,040 --> 00:58:44,640
i'm just going to read just the same

00:58:41,200 --> 00:58:47,920
thing but this one will be

00:58:44,640 --> 00:58:51,040
my clean features because i've actually

00:58:47,920 --> 00:58:52,400
cleaned and processed some of these okay

00:58:51,040 --> 00:58:53,520
so remember what we did when we were

00:58:52,400 --> 00:58:56,640
building the model

00:58:53,520 --> 00:58:58,079
we were testing our model we built uh we

00:58:56,640 --> 00:59:01,520
had to

00:58:58,079 --> 00:59:03,599
scale these uh values you know to evenly

00:59:01,520 --> 00:59:04,000
distribute that we also need to do that

00:59:03,599 --> 00:59:07,280
from the

00:59:04,000 --> 00:59:10,960
value we receive from the user so

00:59:07,280 --> 00:59:10,960
let's say perform

00:59:11,200 --> 00:59:17,200
standard scaling on values

00:59:15,119 --> 00:59:19,040
okay so we already know why we're doing

00:59:17,200 --> 00:59:22,400
this from the model

00:59:19,040 --> 00:59:25,040
session so we're going to have a scala

00:59:22,400 --> 00:59:25,040
of course

00:59:25,599 --> 00:59:33,280
standard scala okay so

00:59:29,839 --> 00:59:36,480
scala dot feed transform

00:59:33,280 --> 00:59:38,240
so we're going to is actually expecting

00:59:36,480 --> 00:59:41,359
uh

00:59:38,240 --> 00:59:45,040
an array so we do that here

00:59:41,359 --> 00:59:45,040
so this double scale our

00:59:45,680 --> 00:59:49,280
i think we should also assign this to a

00:59:47,520 --> 00:59:50,559
verb so let's just call it x straight

00:59:49,280 --> 00:59:53,760
away

00:59:50,559 --> 00:59:57,119
so we have a prepared our

00:59:53,760 --> 00:59:58,799
input ready to

00:59:57,119 --> 01:00:01,200
you know make prediction on it so the

00:59:58,799 --> 01:00:04,240
next thing we'll do is

01:00:01,200 --> 01:00:09,520
to load the model so we have the

01:00:04,240 --> 01:00:09,520
keras for that so we're going to use a

01:00:09,839 --> 01:00:16,960
model it calls load model

01:00:13,200 --> 01:00:19,440
now our model is saved um

01:00:16,960 --> 01:00:21,359
somewhere in our so we're gonna actually

01:00:19,440 --> 01:00:24,160
need to bring it into our

01:00:21,359 --> 01:00:25,040
project so i'm just going to look for

01:00:24,160 --> 01:00:30,079
where

01:00:25,040 --> 01:00:36,160
i saved it i saved this as my model.h5

01:00:30,079 --> 01:00:37,760
so where is it my model.h5

01:00:36,160 --> 01:00:39,599
okay so the idea is i'm going to open

01:00:37,760 --> 01:00:45,599
the file location

01:00:39,599 --> 01:00:49,040
and get it okay so i'll copy this

01:00:45,599 --> 01:00:52,400
and then i will need to go to

01:00:49,040 --> 01:00:55,680
uh my projects inside the api

01:00:52,400 --> 01:01:00,799
app i'll create a new directory

01:00:55,680 --> 01:01:04,720
i'm gonna call this saved model

01:01:00,799 --> 01:01:09,119
okay and that's where i'm gonna

01:01:04,720 --> 01:01:12,319
paste this trend model

01:01:09,119 --> 01:01:15,440
okay so it is

01:01:12,319 --> 01:01:18,880
right there my trend model

01:01:15,440 --> 01:01:22,880
is right there so i'm gonna

01:01:18,880 --> 01:01:27,119
get this api slash

01:01:22,880 --> 01:01:30,559
save model slash

01:01:27,119 --> 01:01:32,319
my model.h5 so that's how i load the

01:01:30,559 --> 01:01:35,760
modem

01:01:32,319 --> 01:01:39,440
so we're going to go ahead and make

01:01:35,760 --> 01:01:41,040
prediction from the model so we're gonna

01:01:39,440 --> 01:01:44,799
say

01:01:41,040 --> 01:01:44,799
prediction equal

01:01:45,960 --> 01:01:48,960
model.predict

01:01:51,599 --> 01:01:59,039
x okay

01:01:55,440 --> 01:02:00,799
so model the predict x and then

01:01:59,039 --> 01:02:02,880
after making the prediction we're going

01:02:00,799 --> 01:02:04,079
to need to convert the prediction back

01:02:02,880 --> 01:02:08,559
to

01:02:04,079 --> 01:02:10,240
lambda so convert the prediction

01:02:08,559 --> 01:02:11,839
back to a lobby because it's actually

01:02:10,240 --> 01:02:14,960
going to give us

01:02:11,839 --> 01:02:18,079
a hot encoded prediction like zero

01:02:14,960 --> 01:02:18,960
one zero zero or whatever so to do that

01:02:18,079 --> 01:02:23,280
we just say

01:02:18,960 --> 01:02:23,280
prediction equals

01:02:23,599 --> 01:02:32,799
mp dot add max

01:02:28,400 --> 01:02:36,400
okay prediction

01:02:32,799 --> 01:02:40,319
all right so so we're going to now have

01:02:36,400 --> 01:02:42,559
to send response data so let's prepare

01:02:40,319 --> 01:02:43,920
response data we're going to send

01:02:42,559 --> 01:02:47,599
adjusting

01:02:43,920 --> 01:02:53,119
our data back with our

01:02:47,599 --> 01:02:56,319
so let's call this predictions calls are

01:02:53,119 --> 01:03:00,559
let's put some values here status

01:02:56,319 --> 01:03:00,559
status let's say 201

01:03:00,839 --> 01:03:05,359
201 um

01:03:02,550 --> 01:03:09,920
[Music]

01:03:05,359 --> 01:03:10,400
message so this is for when everything

01:03:09,920 --> 01:03:17,280
works

01:03:10,400 --> 01:03:20,799
so we're just gonna say successful

01:03:17,280 --> 01:03:22,079
and then prediction of course is gonna

01:03:20,799 --> 01:03:25,119
be what

01:03:22,079 --> 01:03:28,319
uh our model predicted here

01:03:25,119 --> 01:03:32,480
okay so if there was an error we

01:03:28,319 --> 01:03:35,839
still have to send the user back

01:03:32,480 --> 01:03:37,359
uh this so we'll just say but here we're

01:03:35,839 --> 01:03:42,079
gonna have to give him an

01:03:37,359 --> 01:03:47,599
error so let's say it was a 301

01:03:42,079 --> 01:03:51,280
um invalid feature

01:03:47,599 --> 01:03:54,640
value okay so

01:03:51,280 --> 01:03:58,319
so in this case uh there's no prediction

01:03:54,640 --> 01:04:00,000
coming up um

01:03:58,319 --> 01:04:02,559
okay so in this case there's no

01:04:00,000 --> 01:04:06,480
prediction coming up there

01:04:02,559 --> 01:04:11,599
so we will have uh the last

01:04:06,480 --> 01:04:15,359
would be for um our exception

01:04:11,599 --> 01:04:20,000
so if an error occurred

01:04:15,359 --> 01:04:20,000
let's call this this code is a 501

01:04:23,920 --> 01:04:29,119
let's just return a string value for our

01:04:27,039 --> 01:04:32,319
exception okay

01:04:29,119 --> 01:04:36,240
and then no

01:04:32,319 --> 01:04:39,520
predictions okay so um

01:04:36,240 --> 01:04:39,520
at the end of the day

01:04:39,680 --> 01:04:48,000
we should return response

01:04:43,280 --> 01:04:48,000
back to the user

01:04:52,070 --> 01:04:57,760
[Music]

01:04:53,520 --> 01:05:00,799
all right so this is our uh model let's

01:04:57,760 --> 01:05:04,400
check it out make sure it's

01:05:00,799 --> 01:05:07,599
is actually doing this right now

01:05:04,400 --> 01:05:13,119
so we are going to

01:05:07,599 --> 01:05:13,119
okay so our uh let's say python

01:05:13,760 --> 01:05:19,200
manager pi run

01:05:17,200 --> 01:05:21,520
server let's see if there's anything

01:05:19,200 --> 01:05:24,400
broken

01:05:21,520 --> 01:05:26,880
okay so there's an error here um you can

01:05:24,400 --> 01:05:26,880
import

01:05:27,039 --> 01:05:31,599
response okay

01:05:34,839 --> 01:05:38,240
so

01:05:36,079 --> 01:05:39,920
okay okay so what you're supposed to

01:05:38,240 --> 01:05:43,359
have said dot

01:05:39,920 --> 01:05:46,640
response okay so that was an

01:05:43,359 --> 01:05:51,839
error so kind of practice

01:05:46,640 --> 01:05:51,839
and we do this

01:05:55,280 --> 01:06:00,880
okay so our server is uh um

01:05:59,119 --> 01:06:02,880
if this took a little while before

01:06:00,880 --> 01:06:05,839
coming up for you that's because you're

01:06:02,880 --> 01:06:07,839
actually loading keras and tensorflow

01:06:05,839 --> 01:06:09,599
okay it tends to be a little bit heavy

01:06:07,839 --> 01:06:12,960
on some pieces

01:06:09,599 --> 01:06:15,280
uh so let's enter some

01:06:12,960 --> 01:06:16,559
test features and then check out what

01:06:15,280 --> 01:06:19,839
our model

01:06:16,559 --> 01:06:23,599
gives us as a prediction

01:06:19,839 --> 01:06:27,200
so let's say we have multiple 563

01:06:23,599 --> 01:06:31,039
we have a clock speed of 0.6

01:06:27,200 --> 01:06:35,920
and then front camera 0

01:06:31,039 --> 01:06:38,960
is 40 mobile dev 0.6

01:06:35,920 --> 01:06:43,520
uh 150 number of

01:06:38,960 --> 01:06:43,520
calls let's say four

01:06:44,559 --> 01:06:51,280
four let's say two six two six zero

01:06:48,000 --> 01:06:54,400
two or four ram size

01:06:51,280 --> 01:06:57,520
back camera let's just say zero

01:06:54,400 --> 01:07:01,280
and then this put it at eleven

01:06:57,520 --> 01:07:01,920
pixel height nine pixel width one zero

01:07:01,280 --> 01:07:05,680
zero

01:07:01,920 --> 01:07:06,559
four uh screen height we can put it at

01:07:05,680 --> 01:07:09,680
01:07:06,559 --> 01:07:11,280
and screen weight at eight okay then

01:07:09,680 --> 01:07:14,160
we're left with some of these boolean

01:07:11,280 --> 01:07:17,280
values we can say bluetooth is one

01:07:14,160 --> 01:07:21,280
uh two are same yeah one

01:07:17,280 --> 01:07:25,039
then um three g

01:07:21,280 --> 01:07:26,079
is actually zero this is one this is one

01:07:25,039 --> 01:07:29,359
and then

01:07:26,079 --> 01:07:32,240
there's no wi-fi and so we run this

01:07:29,359 --> 01:07:35,920
prediction and see what it gives us

01:07:32,240 --> 01:07:39,440
okay so we're having 200 error

01:07:35,920 --> 01:07:44,720
okay i think

01:07:39,440 --> 01:07:48,000
our form let's have a look at our form

01:07:44,720 --> 01:07:48,000
see if we have

01:07:48,400 --> 01:07:54,880
okay so on the templates

01:07:51,440 --> 01:07:54,880
let's see if we have

01:07:55,680 --> 01:08:02,880
added this to a form here

01:07:59,119 --> 01:08:04,880
so we have our form form so there's

01:08:02,880 --> 01:08:11,119
actually no

01:08:04,880 --> 01:08:15,359
um action on the form so

01:08:11,119 --> 01:08:19,199
i'm gonna have to do that api dot

01:08:15,359 --> 01:08:19,199
predict okay

01:08:20,000 --> 01:08:29,520
all right so let's reload this

01:08:24,239 --> 01:08:29,520
and try this again okay

01:08:31,920 --> 01:08:39,600
okay so it predicts successful that this

01:08:35,839 --> 01:08:43,359
phone should belong to range one

01:08:39,600 --> 01:08:47,359
you see that so that's between 500

01:08:43,359 --> 01:08:49,199
to 750 dollars so

01:08:47,359 --> 01:08:50,960
if this took time also you have to know

01:08:49,199 --> 01:08:53,120
because you're looting a

01:08:50,960 --> 01:08:54,560
tensorflow so that's that is predicted

01:08:53,120 --> 01:08:57,759
that this phone

01:08:54,560 --> 01:09:01,120
is in range one

01:08:57,759 --> 01:09:02,960
okay so we have successfully deployed

01:09:01,120 --> 01:09:05,839
our model

01:09:02,960 --> 01:09:06,719
um in a django app but then there's a

01:09:05,839 --> 01:09:10,480
little tweak

01:09:06,719 --> 01:09:14,880
i feel we can still do to make a model

01:09:10,480 --> 01:09:19,199
perform better if you look here

01:09:14,880 --> 01:09:23,040
you will see that um we are actually

01:09:19,199 --> 01:09:24,239
loading our model each time a request is

01:09:23,040 --> 01:09:27,440
sent

01:09:24,239 --> 01:09:29,040
to the list so this is actually not a

01:09:27,440 --> 01:09:32,000
very

01:09:29,040 --> 01:09:33,279
good way to do this so we're going to

01:09:32,000 --> 01:09:36,960
load this

01:09:33,279 --> 01:09:40,799
and in an app

01:09:36,960 --> 01:09:43,679
dot py file so that

01:09:40,799 --> 01:09:45,600
it loads automatically and becomes

01:09:43,679 --> 01:09:48,719
available and doesn't need to be

01:09:45,600 --> 01:09:50,239
loaded each time so i'm going to put

01:09:48,719 --> 01:09:53,520
this here

01:09:50,239 --> 01:09:55,840
i'll slow model so what this means

01:09:53,520 --> 01:09:57,679
is i'm going to need to i'm just going

01:09:55,840 --> 01:10:03,840
to have to now

01:09:57,679 --> 01:10:03,840
uh bring down the you know loading uh

01:10:06,080 --> 01:10:13,440
back into this place okay

01:10:09,920 --> 01:10:16,719
so that my model is loaded there so

01:10:13,440 --> 01:10:20,640
i will have to

01:10:16,719 --> 01:10:24,480
import that api so i'll just save from

01:10:20,640 --> 01:10:28,960
dot apps import api

01:10:24,480 --> 01:10:32,159
config api config

01:10:28,960 --> 01:10:35,840
yeah so we are going to

01:10:32,159 --> 01:10:37,199
have so instead of learning this here we

01:10:35,840 --> 01:10:41,520
just say

01:10:37,199 --> 01:10:45,280
model equals api config dot

01:10:41,520 --> 01:10:48,960
or model okay

01:10:45,280 --> 01:10:53,040
so so what this does for us is right now

01:10:48,960 --> 01:10:55,520
um our model is always loaded

01:10:53,040 --> 01:10:56,719
as soon as our project starts we don't

01:10:55,520 --> 01:11:00,320
need to load it

01:10:56,719 --> 01:11:01,840
at each request okay so so that that's

01:11:00,320 --> 01:11:04,080
actually what the apps

01:11:01,840 --> 01:11:05,280
that python that does for us here so we

01:11:04,080 --> 01:11:08,560
just load it here

01:11:05,280 --> 01:11:10,159
so it becomes available to us um every

01:11:08,560 --> 01:11:12,159
time we don't need to keep loading it

01:11:10,159 --> 01:11:16,080
each time we make a request

01:11:12,159 --> 01:11:19,040
so we're going to try that and see um

01:11:16,080 --> 01:11:19,040
what happens

01:11:19,679 --> 01:11:24,880
okay so i think i might have so so this

01:11:22,880 --> 01:11:28,159
is going to actually reload

01:11:24,880 --> 01:11:31,600
and then my mother

01:11:28,159 --> 01:11:34,719
should be available to me now okay

01:11:31,600 --> 01:11:38,400
so so this is how you

01:11:34,719 --> 01:11:40,400
deploy a deep neural network or any kind

01:11:38,400 --> 01:11:42,640
of machine learning model

01:11:40,400 --> 01:11:44,400
in the jungle web app it's been a

01:11:42,640 --> 01:11:46,560
wonderful session

01:11:44,400 --> 01:11:47,920
and i hope you enjoyed it so if you have

01:11:46,560 --> 01:11:50,480
any question

01:11:47,920 --> 01:11:52,320
feel free to drop i'm standing by right

01:11:50,480 --> 01:11:53,280
now to attend to any of the questions

01:11:52,320 --> 01:11:55,199
thank you

01:11:53,280 --> 01:12:07,199
it's been a wonderful session for me

01:11:55,199 --> 01:12:07,199

YouTube URL: https://www.youtube.com/watch?v=TwJFVqF7XF8


