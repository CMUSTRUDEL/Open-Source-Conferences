Title: David R  Pugh -  Managing your data science project environments with Conda +pip | PyCon Africa 2020
Publication date: 2020-08-20
Playlist: PyCon Africa 2020
Description: 
	This workshop is a Software Carpentry-style introduction to Conda (+pip) for (data) scientists. Conda is an open source package and environment management system that runs on Windows, Mac OS and Linux.  Although Conda was created for Python packages, Conda can package and distribute software for any language (which makes Conda well suited to manage environments for data science and machine learning projects!). Pip is the de facto standard package-management system used to install and manage software packages written in Python: if it's written in Python, then it will be available on the [Python Package Index (PyPI) via pip. Conda and pip work great as a team and this workshop will cover when and how to use pip to install packages into Conda environments.

This workshop motivates the use of Conda (+pip) as a development tool for building and sharing project specific software environments that facilitate reproducible (data) science workflows. Particular attention is given to using Conda to create reproducible environments with NVIDIA GPU dependencies (including environments for Horovod, TensorFlow, PyTorch, and NVIDIA RAPIDS).
Captions: 
	00:00:11,120 --> 00:00:13,920
i'm very excited to be here at python

00:00:12,880 --> 00:00:18,240
africa

00:00:13,920 --> 00:00:20,800
2020 this is my first pycon

00:00:18,240 --> 00:00:23,920
i have given other talks at various

00:00:20,800 --> 00:00:26,320
scientific python computing conferences

00:00:23,920 --> 00:00:28,640
my name is dr david pugh i am a staff

00:00:26,320 --> 00:00:30,240
scientist at the research computing

00:00:28,640 --> 00:00:32,559
core laboratory and the kaust

00:00:30,240 --> 00:00:35,680
visualization core laboratory

00:00:32,559 --> 00:00:37,040
um which are labs at the king abdullah

00:00:35,680 --> 00:00:39,760
university of science and technology

00:00:37,040 --> 00:00:42,840
which is based in sewall saudi arabia

00:00:39,760 --> 00:00:44,000
about an hour and a half drive north of

00:00:42,840 --> 00:00:45,360
mecca

00:00:44,000 --> 00:00:47,360
just across the red sea from the

00:00:45,360 --> 00:00:51,039
continent of africa right about

00:00:47,360 --> 00:00:51,840
um well i guess if i were to get on a

00:00:51,039 --> 00:00:55,039
boat and go

00:00:51,840 --> 00:00:59,600
due west of my house

00:00:55,039 --> 00:01:01,920
i would hit the border between sudan

00:00:59,600 --> 00:01:04,080
just to give you a rough idea of where

00:01:01,920 --> 00:01:06,960
uh where i'm located

00:01:04,080 --> 00:01:07,840
um so today i'm going to give you an

00:01:06,960 --> 00:01:10,880
introduction

00:01:07,840 --> 00:01:14,720
to a tool called conda for managing

00:01:10,880 --> 00:01:18,080
project specific virtual environments

00:01:14,720 --> 00:01:19,680
for primarily focused for data science

00:01:18,080 --> 00:01:23,520
or scientific computing

00:01:19,680 --> 00:01:24,720
projects so just a few kind of

00:01:23,520 --> 00:01:27,600
preliminaries

00:01:24,720 --> 00:01:28,560
at the very top of the chat for this

00:01:27,600 --> 00:01:30,880
workshop

00:01:28,560 --> 00:01:32,400
or this session i've placed a bunch of

00:01:30,880 --> 00:01:35,920
links

00:01:32,400 --> 00:01:35,920
one is to the

00:01:36,240 --> 00:01:40,159
the course materials lesson materials

00:01:38,400 --> 00:01:42,560
for today

00:01:40,159 --> 00:01:45,119
so i'm just going to share my screen

00:01:42,560 --> 00:01:45,119
briefly

00:01:53,040 --> 00:01:56,240
so the first link that i put in the chat

00:01:55,600 --> 00:01:59,280
um

00:01:56,240 --> 00:02:01,360
will take you here so these are the

00:01:59,280 --> 00:02:02,320
workshop materials for today they are

00:02:01,360 --> 00:02:05,439
online

00:02:02,320 --> 00:02:06,799
on github they're always available i'm

00:02:05,439 --> 00:02:07,280
not going to take them down or anything

00:02:06,799 --> 00:02:10,560
like that

00:02:07,280 --> 00:02:12,879
so um as you can see there's

00:02:10,560 --> 00:02:13,840
quite a lot of material here we're

00:02:12,879 --> 00:02:17,440
likely to cover

00:02:13,840 --> 00:02:21,360
only um episodes one two and

00:02:17,440 --> 00:02:23,200
three uh in this two-hour session today

00:02:21,360 --> 00:02:24,480
leaving the more advanced material in

00:02:23,200 --> 00:02:28,160
sessions four and five

00:02:24,480 --> 00:02:31,040
kind of as follow-on homework or

00:02:28,160 --> 00:02:32,480
continued learning as you wish i

00:02:31,040 --> 00:02:33,680
particularly encourage you to take a

00:02:32,480 --> 00:02:35,760
look at

00:02:33,680 --> 00:02:36,720
episode five on managing gpu

00:02:35,760 --> 00:02:39,920
dependencies

00:02:36,720 --> 00:02:41,760
if you are doing anything with the gpu

00:02:39,920 --> 00:02:43,680
conda can make your life a lot simpler

00:02:41,760 --> 00:02:45,760
by helping you install all the libraries

00:02:43,680 --> 00:02:47,200
that you need to work with gpus

00:02:45,760 --> 00:02:49,120
but i'm not going to cover that today

00:02:47,200 --> 00:02:51,120
i'm going to focus more on

00:02:49,120 --> 00:02:52,640
the basics of getting started using

00:02:51,120 --> 00:02:53,680
conda and how to use it to manage

00:02:52,640 --> 00:02:55,120
environments and how to share

00:02:53,680 --> 00:02:58,400
environments

00:02:55,120 --> 00:02:59,440
things like this the second link that i

00:02:58,400 --> 00:03:02,560
put in the chat

00:02:59,440 --> 00:03:04,319
takes you to the setup instructions now

00:03:02,560 --> 00:03:07,920
the setup instructions

00:03:04,319 --> 00:03:09,680
um is basically

00:03:07,920 --> 00:03:11,200
all the relevant links and instructions

00:03:09,680 --> 00:03:14,800
to install

00:03:11,200 --> 00:03:17,280
uh a python distribution that contains

00:03:14,800 --> 00:03:19,360
the condit tool on your local computer

00:03:17,280 --> 00:03:20,640
whether you're using mac or windows or

00:03:19,360 --> 00:03:24,159
linux

00:03:20,640 --> 00:03:26,480
all those instructions are here

00:03:24,159 --> 00:03:28,000
so hopefully you can walk through them

00:03:26,480 --> 00:03:30,239
on your own

00:03:28,000 --> 00:03:32,000
it's not required for you to install the

00:03:30,239 --> 00:03:34,239
software in order to participate in the

00:03:32,000 --> 00:03:38,879
hands-on section of this lab

00:03:34,239 --> 00:03:40,560
or this workshop at the top i've

00:03:38,879 --> 00:03:42,560
placed a little button which you can

00:03:40,560 --> 00:03:44,239
click and

00:03:42,560 --> 00:03:46,000
probably right click and open it in a

00:03:44,239 --> 00:03:49,680
new tab

00:03:46,000 --> 00:03:53,360
and if you do that then

00:03:49,680 --> 00:03:56,239
you will be taken to the landing page

00:03:53,360 --> 00:03:58,080
for the mybinder service which is this

00:03:56,239 --> 00:04:02,239
just fantastic service for

00:03:58,080 --> 00:04:06,720
taking github or git lab or any kind of

00:04:02,239 --> 00:04:08,239
git repo and turning it

00:04:06,720 --> 00:04:10,799
into an interactive computing

00:04:08,239 --> 00:04:12,799
environment that runs on top of

00:04:10,799 --> 00:04:14,879
public cloud services in this case i

00:04:12,799 --> 00:04:17,120
think gcp

00:04:14,879 --> 00:04:18,160
or google compute platform so everything

00:04:17,120 --> 00:04:20,560
that you need today

00:04:18,160 --> 00:04:22,960
is already pre-installed and available

00:04:20,560 --> 00:04:26,320
and you can run it in the cloud

00:04:22,960 --> 00:04:29,040
so no issues

00:04:26,320 --> 00:04:30,639
no issues there so i'm going to stop

00:04:29,040 --> 00:04:33,759
sharing for a moment

00:04:30,639 --> 00:04:37,040
and just go back to the q

00:04:33,759 --> 00:04:38,400
a or to the the chat window and

00:04:37,040 --> 00:04:41,840
just check and see if i have any

00:04:38,400 --> 00:04:44,880
questions uh about what is expected

00:04:41,840 --> 00:04:44,880
to kind of get started

00:04:45,199 --> 00:04:48,639
oh hello aya i see that you've joined us

00:04:47,919 --> 00:04:52,560
now

00:04:48,639 --> 00:04:55,840
um aya if you could um

00:04:52,560 --> 00:04:57,840
during the session um just pop in and

00:04:55,840 --> 00:04:59,520
stop me if you see a lot of

00:04:57,840 --> 00:05:02,000
questions kind of building up in the

00:04:59,520 --> 00:05:02,639
chat window because once i start sharing

00:05:02,000 --> 00:05:07,680
screen

00:05:02,639 --> 00:05:07,680
for teaching i won't be able to

00:05:07,840 --> 00:05:11,680
very easily see any questions as they

00:05:09,600 --> 00:05:14,479
come in

00:05:11,680 --> 00:05:16,880
as they come in in the chat window so

00:05:14,479 --> 00:05:19,759
thank you ahead of time for that

00:05:16,880 --> 00:05:21,840
okay so the way this is going to work is

00:05:19,759 --> 00:05:22,720
i'm going to when i start sharing my

00:05:21,840 --> 00:05:24,639
screen

00:05:22,720 --> 00:05:25,919
i'm going to share the jupiter lab

00:05:24,639 --> 00:05:30,240
landing page

00:05:25,919 --> 00:05:33,520
and then i am going to lecture

00:05:30,240 --> 00:05:36,479
based off of the the lecture materials

00:05:33,520 --> 00:05:38,000
uh the link that i shared with you and

00:05:36,479 --> 00:05:39,680
then we're going to kind of

00:05:38,000 --> 00:05:41,280
lecture for a little bit and then there

00:05:39,680 --> 00:05:42,320
are some exercises and some hands-on

00:05:41,280 --> 00:05:44,880
components

00:05:42,320 --> 00:05:46,000
um and i'm going to type along the

00:05:44,880 --> 00:05:48,960
commands that are

00:05:46,000 --> 00:05:51,360
in the the lecture notes as i go and i

00:05:48,960 --> 00:05:53,039
would encourage you to do the same

00:05:51,360 --> 00:05:55,600
because the best way to learn how to use

00:05:53,039 --> 00:05:57,360
this tool is is really by doing

00:05:55,600 --> 00:06:00,319
and again you know you're running you'll

00:05:57,360 --> 00:06:02,479
be running these commands

00:06:00,319 --> 00:06:03,440
in an instance that will be running in

00:06:02,479 --> 00:06:05,280
the cloud

00:06:03,440 --> 00:06:06,639
and so there's nothing that you can do

00:06:05,280 --> 00:06:09,840
to break the

00:06:06,639 --> 00:06:12,479
instance or the or anything in any way

00:06:09,840 --> 00:06:14,560
and you can always just close the tab

00:06:12,479 --> 00:06:19,199
and go back and click the link

00:06:14,560 --> 00:06:19,199
and get a new fresh fresh instance so

00:06:19,520 --> 00:06:23,520
okay so unless i see any questions come

00:06:22,319 --> 00:06:27,520
flooding in on the chat

00:06:23,520 --> 00:06:27,520
i'm gonna go ahead and get started

00:06:31,360 --> 00:06:37,360
okay cool well let's start sharing

00:06:34,639 --> 00:06:37,360
screen again

00:06:41,919 --> 00:06:49,599
okay so here we go

00:06:46,000 --> 00:06:51,280
right um so this is an introduction to

00:06:49,599 --> 00:06:54,319
condo for data scientists

00:06:51,280 --> 00:06:56,080
so uh conda is an open source package

00:06:54,319 --> 00:06:58,080
and environment management system

00:06:56,080 --> 00:07:00,160
it's cross-platform so you can use it on

00:06:58,080 --> 00:07:04,720
windows mac or linux

00:07:00,160 --> 00:07:04,720
it's going to do a lot of things that um

00:07:04,880 --> 00:07:10,160
you might have used a tool called pip

00:07:07,919 --> 00:07:12,000
to do it's going to install run and

00:07:10,160 --> 00:07:13,599
update packages and dependencies

00:07:12,000 --> 00:07:16,080
and then it's going to do something

00:07:13,599 --> 00:07:19,680
which pip on its own doesn't do

00:07:16,080 --> 00:07:22,400
which is create safe load uh

00:07:19,680 --> 00:07:23,360
different kind of virtual environments

00:07:22,400 --> 00:07:25,520
for

00:07:23,360 --> 00:07:26,560
for your python projects so one of the

00:07:25,520 --> 00:07:28,800
cool things about

00:07:26,560 --> 00:07:30,880
conda that differentiates it from kind

00:07:28,800 --> 00:07:32,400
of other

00:07:30,880 --> 00:07:34,240
package management tools out there and

00:07:32,400 --> 00:07:34,720
that makes it very useful for data

00:07:34,240 --> 00:07:37,199
science

00:07:34,720 --> 00:07:38,560
and scientific computing is that python

00:07:37,199 --> 00:07:41,199
or conduct can

00:07:38,560 --> 00:07:41,199
distribute

00:07:41,599 --> 00:07:45,440
packages for software that is written in

00:07:44,160 --> 00:07:48,319
other languages besides

00:07:45,440 --> 00:07:49,840
just python this is important because a

00:07:48,319 --> 00:07:53,919
lot of scientific computing

00:07:49,840 --> 00:07:57,120
uh builds on c and c plus plus fortran

00:07:53,919 --> 00:08:01,120
um also cuda

00:07:57,120 --> 00:08:03,840
now any for anything using a gpu

00:08:01,120 --> 00:08:05,199
some scientific computing pipelines that

00:08:03,840 --> 00:08:06,560
are using machine learning and data

00:08:05,199 --> 00:08:08,879
science now in genomics and

00:08:06,560 --> 00:08:13,199
bioinformatics

00:08:08,879 --> 00:08:15,280
need java or ruby

00:08:13,199 --> 00:08:16,319
r is also very popular so the fact that

00:08:15,280 --> 00:08:19,440
conda can

00:08:16,319 --> 00:08:21,440
create and distribute uh packages

00:08:19,440 --> 00:08:22,479
and software for all of these languages

00:08:21,440 --> 00:08:24,400
kind of makes it

00:08:22,479 --> 00:08:26,560
particularly useful for data scientists

00:08:24,400 --> 00:08:29,759
and for scientific computing

00:08:26,560 --> 00:08:32,640
in general so

00:08:29,759 --> 00:08:33,599
what we're going to do is we're going to

00:08:32,640 --> 00:08:37,279
start off

00:08:33,599 --> 00:08:40,000
with getting started

00:08:37,279 --> 00:08:40,719
with conda so if you could go ahead and

00:08:40,000 --> 00:08:43,760
just

00:08:40,719 --> 00:08:45,440
click that link i'm going to open it in

00:08:43,760 --> 00:08:47,279
a new tab

00:08:45,440 --> 00:08:48,560
and so then these are the the teaching

00:08:47,279 --> 00:08:50,399
materials that we're going to use for

00:08:48,560 --> 00:08:54,240
this first kind of lesson

00:08:50,399 --> 00:08:55,200
and as i go through in lecture i'm going

00:08:54,240 --> 00:08:59,200
to be typing

00:08:55,200 --> 00:09:02,399
commands into a terminal and jupiter hub

00:08:59,200 --> 00:09:03,760
so what i want to do now is just make

00:09:02,399 --> 00:09:06,160
sure that everybody can

00:09:03,760 --> 00:09:07,440
see my my screen and the text once i

00:09:06,160 --> 00:09:11,600
start typing

00:09:07,440 --> 00:09:11,600
so if i go ahead and launch the terminal

00:09:12,480 --> 00:09:17,440
by clicking here so

00:09:18,399 --> 00:09:26,399
can you read this

00:09:22,800 --> 00:09:29,040
okay so

00:09:26,399 --> 00:09:30,720
now i'm gonna have to stop sharing just

00:09:29,040 --> 00:09:33,200
briefly

00:09:30,720 --> 00:09:34,839
and go back and just check the chat to

00:09:33,200 --> 00:09:37,839
see if everybody was

00:09:34,839 --> 00:09:37,839
able

00:09:38,320 --> 00:09:47,120
to read font size for everybody

00:09:43,120 --> 00:09:47,120
i'm seeing a lot of yeses

00:09:47,279 --> 00:09:51,120
okay cool all right so now i'm gonna go

00:09:50,000 --> 00:09:53,920
back and share screen

00:09:51,120 --> 00:09:55,360
well i guess has everybody um or has

00:09:53,920 --> 00:09:58,560
anybody managed to

00:09:55,360 --> 00:10:01,279
uh launch jupiter lab running on uh

00:09:58,560 --> 00:10:01,279
on binder

00:10:07,040 --> 00:10:09,760
okay cool

00:10:11,120 --> 00:10:16,320
excellent awesome all right yeah so

00:10:14,320 --> 00:10:18,320
the folks at my binder are absolutely

00:10:16,320 --> 00:10:19,440
fantastic so i i let them know that i

00:10:18,320 --> 00:10:20,640
was going to have

00:10:19,440 --> 00:10:22,160
potentially quite a few people

00:10:20,640 --> 00:10:24,320
participating in this workshop and they

00:10:22,160 --> 00:10:27,440
were able to bump my resources

00:10:24,320 --> 00:10:28,079
um for the number of concurrent users

00:10:27,440 --> 00:10:30,000
for

00:10:28,079 --> 00:10:32,240
uh for my repo so we shouldn't have any

00:10:30,000 --> 00:10:33,920
problems with uh

00:10:32,240 --> 00:10:35,600
with computing resources so i see

00:10:33,920 --> 00:10:37,920
there's some person that needs

00:10:35,600 --> 00:10:37,920
help

00:10:38,720 --> 00:10:47,839
so hopefully i will just put the link

00:10:43,360 --> 00:10:47,839
again in the chat

00:10:48,160 --> 00:11:00,959
because hopefully there shouldn't be

00:10:49,760 --> 00:11:03,839
anything else so

00:11:00,959 --> 00:11:04,959
okay so hopefully that will take you uh

00:11:03,839 --> 00:11:09,519
where you need to go

00:11:04,959 --> 00:11:09,519
with binder okay so now we're gonna jump

00:11:12,839 --> 00:11:18,959
in

00:11:15,200 --> 00:11:22,399
okay so getting started with condom

00:11:18,959 --> 00:11:24,079
so this first lesson is um not quite as

00:11:22,399 --> 00:11:25,279
hands-on as most of the other lessons

00:11:24,079 --> 00:11:26,959
because it's just kind of a lot of

00:11:25,279 --> 00:11:29,360
preliminaries about you know what is

00:11:26,959 --> 00:11:31,470
conda what problems does it solve

00:11:29,360 --> 00:11:32,560
why should you use it um

00:11:31,470 --> 00:11:34,640
[Music]

00:11:32,560 --> 00:11:36,240
but hopefully by by the end of this uh

00:11:34,640 --> 00:11:37,839
this first episode you also have some

00:11:36,240 --> 00:11:40,560
understanding of why

00:11:37,839 --> 00:11:42,240
um why you need a tool to manage your

00:11:40,560 --> 00:11:43,680
packages and environments

00:11:42,240 --> 00:11:46,079
and why you should make a tool like

00:11:43,680 --> 00:11:48,880
conda as part of your

00:11:46,079 --> 00:11:50,560
data science or scientific computing

00:11:48,880 --> 00:11:52,079
workflows

00:11:50,560 --> 00:11:54,160
and then to be able to explain some of

00:11:52,079 --> 00:11:57,360
the benefits of using

00:11:54,160 --> 00:12:00,959
honda and pip okay

00:11:57,360 --> 00:12:01,920
so what is condo so i mentioned this

00:12:00,959 --> 00:12:02,880
briefly in the

00:12:01,920 --> 00:12:05,279
in the read-in but i'm going to

00:12:02,880 --> 00:12:06,480
re-emphasize it again so conda is an

00:12:05,279 --> 00:12:08,399
open source package

00:12:06,480 --> 00:12:10,240
and environment management system that

00:12:08,399 --> 00:12:13,519
runs on all major

00:12:10,240 --> 00:12:14,880
operating systems it can do a lot of

00:12:13,519 --> 00:12:16,240
things

00:12:14,880 --> 00:12:18,079
that you might be used to doing with

00:12:16,240 --> 00:12:20,320
python which is installing

00:12:18,079 --> 00:12:22,959
running updating packages and all their

00:12:20,320 --> 00:12:22,959
dependencies

00:12:23,440 --> 00:12:26,480
conda can create save load and switch

00:12:25,920 --> 00:12:29,200
between

00:12:26,480 --> 00:12:30,320
different uh software environments on

00:12:29,200 --> 00:12:32,800
the same computer

00:12:30,320 --> 00:12:34,480
so this way if you have different

00:12:32,800 --> 00:12:36,399
projects that require different versions

00:12:34,480 --> 00:12:37,839
of python or different versions of the

00:12:36,399 --> 00:12:38,800
key dependencies that you're used to

00:12:37,839 --> 00:12:42,240
working with

00:12:38,800 --> 00:12:43,839
you can have all of those

00:12:42,240 --> 00:12:45,760
different versions installed on the same

00:12:43,839 --> 00:12:47,279
machine just each project gets its own

00:12:45,760 --> 00:12:48,639
environment and gets its own version of

00:12:47,279 --> 00:12:50,399
python its own

00:12:48,639 --> 00:12:51,760
version of dependencies or whatever

00:12:50,399 --> 00:12:54,480
whatever you need you're not going to

00:12:51,760 --> 00:12:57,760
need to install software

00:12:54,480 --> 00:13:00,399
system wide and manage

00:12:57,760 --> 00:13:01,279
and manage system-wide installs anymore

00:13:00,399 --> 00:13:04,000
and

00:13:01,279 --> 00:13:05,120
again one of the differentiating factors

00:13:04,000 --> 00:13:08,079
of conda

00:13:05,120 --> 00:13:10,000
versus just using a tool like pip or

00:13:08,079 --> 00:13:12,320
some of the other

00:13:10,000 --> 00:13:14,480
environment or package managers is that

00:13:12,320 --> 00:13:17,600
honda can distribute software for

00:13:14,480 --> 00:13:17,600
pretty much any language

00:13:17,839 --> 00:13:24,880
r ruby lua scala java javascript c

00:13:21,519 --> 00:13:25,920
c plus plus fortran cuda pretty much

00:13:24,880 --> 00:13:28,320
anything

00:13:25,920 --> 00:13:30,000
um so conda you're gonna we're gonna use

00:13:28,320 --> 00:13:31,600
conda to solve kind of two problems and

00:13:30,000 --> 00:13:33,120
i'm gonna talk about what those problems

00:13:31,600 --> 00:13:34,160
are in just a minute but one is package

00:13:33,120 --> 00:13:35,600
management

00:13:34,160 --> 00:13:37,519
so it helps you find and install

00:13:35,600 --> 00:13:39,920
packages

00:13:37,519 --> 00:13:42,320
and it's also an environment manager and

00:13:39,920 --> 00:13:44,800
so it will help you

00:13:42,320 --> 00:13:46,079
basically set up different environments

00:13:44,800 --> 00:13:47,600
that you can install

00:13:46,079 --> 00:13:49,279
different versions of various packages

00:13:47,600 --> 00:13:51,040
into it and keep everything kind of nice

00:13:49,279 --> 00:13:52,800
and neat and tidy and organized on your

00:13:51,040 --> 00:13:56,320
on your computer

00:13:52,800 --> 00:13:57,680
um when users are just getting started a

00:13:56,320 --> 00:14:00,880
common point of confusion

00:13:57,680 --> 00:14:01,440
is that once you start kind of googling

00:14:00,880 --> 00:14:02,880
in

00:14:01,440 --> 00:14:04,720
on on condo and things you're going to

00:14:02,880 --> 00:14:06,000
run into conda and mini conda and

00:14:04,720 --> 00:14:08,320
anaconda

00:14:06,000 --> 00:14:09,519
and it's a bit it can be a bit confusing

00:14:08,320 --> 00:14:12,880
so this uh

00:14:09,519 --> 00:14:15,360
kind of venn diagram is to try to

00:14:12,880 --> 00:14:17,040
explain the differences between these

00:14:15,360 --> 00:14:18,720
things so that you won't be so confused

00:14:17,040 --> 00:14:20,079
once you start kind of googling

00:14:18,720 --> 00:14:23,199
and trying to learn more about these

00:14:20,079 --> 00:14:26,720
tools and how to use them so

00:14:23,199 --> 00:14:28,639
at the biggest level is a

00:14:26,720 --> 00:14:30,000
very popular within data science and

00:14:28,639 --> 00:14:32,959
scientific commuting

00:14:30,000 --> 00:14:34,160
distribution of python called anaconda

00:14:32,959 --> 00:14:37,040
it's provided by

00:14:34,160 --> 00:14:38,399
a company of the same name but it is

00:14:37,040 --> 00:14:41,839
completely free

00:14:38,399 --> 00:14:43,360
and open source it contains the mini

00:14:41,839 --> 00:14:46,720
conda distribution

00:14:43,360 --> 00:14:48,880
as well as many

00:14:46,720 --> 00:14:49,839
or several hundred i think at this point

00:14:48,880 --> 00:14:53,600
of the

00:14:49,839 --> 00:14:56,839
most commonly used python packages

00:14:53,600 --> 00:14:59,920
like all set up and ready to go now

00:14:56,839 --> 00:15:04,000
miniconda contains just

00:14:59,920 --> 00:15:08,399
conda the tool plus

00:15:04,000 --> 00:15:10,720
a version of python

00:15:08,399 --> 00:15:12,079
and some base packages that are needed

00:15:10,720 --> 00:15:13,519
for conda to interact with your

00:15:12,079 --> 00:15:14,720
operating system and these things might

00:15:13,519 --> 00:15:17,199
be a little bit different depending

00:15:14,720 --> 00:15:19,040
whether you're on windows mac or linux

00:15:17,199 --> 00:15:20,560
and then of course conda itself conda is

00:15:19,040 --> 00:15:20,800
just the tool so kanda is the tool that

00:15:20,560 --> 00:15:22,639
we

00:15:20,800 --> 00:15:24,560
that we're going to learn to use today

00:15:22,639 --> 00:15:27,199
and these other two distributions

00:15:24,560 --> 00:15:28,959
mini conda which just contains conda

00:15:27,199 --> 00:15:32,480
plus a base python

00:15:28,959 --> 00:15:34,399
and some os dependent system packages

00:15:32,480 --> 00:15:35,920
and then anaconda which kind of contains

00:15:34,399 --> 00:15:39,440
everything

00:15:35,920 --> 00:15:42,480
but all both miniconda and anaconda

00:15:39,440 --> 00:15:43,920
include the conda tool so you can

00:15:42,480 --> 00:15:46,079
i've recommended that you install

00:15:43,920 --> 00:15:47,680
miniconda and provided instructions on

00:15:46,079 --> 00:15:49,199
the setup page for that but if you

00:15:47,680 --> 00:15:51,120
already have anaconda or

00:15:49,199 --> 00:15:55,680
you want to install anaconda you can do

00:15:51,120 --> 00:15:58,079
that as well okay

00:15:55,680 --> 00:15:59,440
so just to provide a little bit of

00:15:58,079 --> 00:16:02,399
motivation about why

00:15:59,440 --> 00:16:03,920
you should use a package and environment

00:16:02,399 --> 00:16:07,519
management system

00:16:03,920 --> 00:16:09,680
tool like conda so if

00:16:07,519 --> 00:16:11,839
it doesn't take long you know once you

00:16:09,680 --> 00:16:14,399
started kind of using python

00:16:11,839 --> 00:16:15,759
um that are just getting started with

00:16:14,399 --> 00:16:17,519
python even that you just have to

00:16:15,759 --> 00:16:18,480
install a lot of software and installing

00:16:17,519 --> 00:16:22,399
software is

00:16:18,480 --> 00:16:25,920
hard and tricky and it's easy to uh

00:16:22,399 --> 00:16:28,639
it's easy to screw things up and

00:16:25,920 --> 00:16:29,839
for new users who are getting started it

00:16:28,639 --> 00:16:31,519
can sometimes be hard to

00:16:29,839 --> 00:16:33,279
figure out what they've done wrong or

00:16:31,519 --> 00:16:35,519
how to backtrack and how to

00:16:33,279 --> 00:16:37,040
undo what they've just done it's a

00:16:35,519 --> 00:16:38,480
challenge installing software

00:16:37,040 --> 00:16:40,800
is just a challenge installing

00:16:38,480 --> 00:16:42,800
scientific software is sometimes even

00:16:40,800 --> 00:16:45,199
more challenging

00:16:42,800 --> 00:16:47,199
because oftentimes scientific software

00:16:45,199 --> 00:16:49,360
is written by academics and researchers

00:16:47,199 --> 00:16:53,440
not professional software engineers

00:16:49,360 --> 00:16:55,600
and the documentation might not be as

00:16:53,440 --> 00:16:58,399
complete things might not be as polished

00:16:55,600 --> 00:17:00,000
um certain things about the build

00:16:58,399 --> 00:17:01,440
process might be very complicated

00:17:00,000 --> 00:17:05,280
because it involves

00:17:01,440 --> 00:17:07,760
compiling c c plus and fortran

00:17:05,280 --> 00:17:09,520
or other things so science installing

00:17:07,760 --> 00:17:12,480
scientific software is

00:17:09,520 --> 00:17:12,480
even more of a challenge

00:17:13,039 --> 00:17:21,360
so installing

00:17:17,600 --> 00:17:22,640
installing software kind of system wide

00:17:21,360 --> 00:17:23,679
or because because of all these

00:17:22,640 --> 00:17:25,919
challenges

00:17:23,679 --> 00:17:27,120
typically the solution is that people

00:17:25,919 --> 00:17:31,280
install software

00:17:27,120 --> 00:17:33,760
system wide on their computer

00:17:31,280 --> 00:17:35,760
the problem with that is that it can

00:17:33,760 --> 00:17:37,120
often be difficult to figure out exactly

00:17:35,760 --> 00:17:40,240
what software is

00:17:37,120 --> 00:17:41,840
really required for any like uh project

00:17:40,240 --> 00:17:43,200
that you're working on

00:17:41,840 --> 00:17:45,200
because everything is just installed on

00:17:43,200 --> 00:17:46,960
your computer and you work on your

00:17:45,200 --> 00:17:47,840
project and you use stuff that's on your

00:17:46,960 --> 00:17:49,280
computer

00:17:47,840 --> 00:17:52,960
but if you were to go and try to

00:17:49,280 --> 00:17:56,559
describe to a colleague or research peer

00:17:52,960 --> 00:17:59,360
exactly what software you use to

00:17:56,559 --> 00:18:00,400
get your project to work it might be

00:17:59,360 --> 00:18:01,840
difficult because

00:18:00,400 --> 00:18:03,520
everything is kind of installed on your

00:18:01,840 --> 00:18:05,200
computer it could potentially have

00:18:03,520 --> 00:18:07,679
dependencies on

00:18:05,200 --> 00:18:09,039
uh operating system libraries and things

00:18:07,679 --> 00:18:12,799
like that

00:18:09,039 --> 00:18:14,320
um it's also sometimes very difficult to

00:18:12,799 --> 00:18:15,600
install different versions of the same

00:18:14,320 --> 00:18:18,000
package at the same time

00:18:15,600 --> 00:18:19,440
if you install everything at once onto

00:18:18,000 --> 00:18:22,720
your computer

00:18:19,440 --> 00:18:23,919
um and what if your project needs

00:18:22,720 --> 00:18:25,760
different versions than the ones that

00:18:23,919 --> 00:18:26,720
you have then maybe you have to update

00:18:25,760 --> 00:18:30,559
in order to

00:18:26,720 --> 00:18:33,200
work on your new project

00:18:30,559 --> 00:18:35,039
or then when you want to go and work on

00:18:33,200 --> 00:18:36,160
your old project you have to downgrade

00:18:35,039 --> 00:18:39,120
your software

00:18:36,160 --> 00:18:39,120
it's just very messy

00:18:39,360 --> 00:18:43,440
and it's easy to break software as you

00:18:41,120 --> 00:18:45,120
move from one project to another as

00:18:43,440 --> 00:18:47,360
you're installing everything system-wide

00:18:45,120 --> 00:18:50,720
it's easy to break stuff

00:18:47,360 --> 00:18:52,960
so rather than install system-wide

00:18:50,720 --> 00:18:54,559
what i would like to teach you to do

00:18:52,960 --> 00:18:56,480
today is to learn to have

00:18:54,559 --> 00:18:58,320
project specific software environments

00:18:56,480 --> 00:19:00,480
and use a tool like conda

00:18:58,320 --> 00:19:02,799
to manage all of your software

00:19:00,480 --> 00:19:06,480
dependencies at the project level

00:19:02,799 --> 00:19:09,440
so that way you can keep all of these

00:19:06,480 --> 00:19:10,400
software dependencies separated neat

00:19:09,440 --> 00:19:13,840
tidy

00:19:10,400 --> 00:19:16,559
and you won't have to won't have to

00:19:13,840 --> 00:19:19,840
worry about all of these problems

00:19:16,559 --> 00:19:24,559
okay so i mentioned

00:19:19,840 --> 00:19:27,840
that conda solves

00:19:24,559 --> 00:19:31,440
two two challenges so one

00:19:27,840 --> 00:19:33,919
is uh environment management

00:19:31,440 --> 00:19:35,520
and so environment management is really

00:19:33,919 --> 00:19:37,280
what allows you to have

00:19:35,520 --> 00:19:39,280
different versions of the same software

00:19:37,280 --> 00:19:41,520
installed on one computer at the same

00:19:39,280 --> 00:19:41,520
time

00:19:42,559 --> 00:19:48,559
and you are

00:19:45,840 --> 00:19:50,160
going to have you know these multiple

00:19:48,559 --> 00:19:52,000
project specific software environments

00:19:50,160 --> 00:19:54,320
you need a tool that allows you to

00:19:52,000 --> 00:19:55,280
create new environments switch between

00:19:54,320 --> 00:19:57,760
different environments

00:19:55,280 --> 00:19:59,200
maybe remove environments that you're no

00:19:57,760 --> 00:20:00,720
longer using

00:19:59,200 --> 00:20:03,679
and just to be able to kind of keep

00:20:00,720 --> 00:20:06,000
everything nice and nice and separate

00:20:03,679 --> 00:20:07,120
now a tool that you might have heard of

00:20:06,000 --> 00:20:09,440
or had some

00:20:07,120 --> 00:20:10,880
interaction with that is kind of a very

00:20:09,440 --> 00:20:13,760
general solution to environment

00:20:10,880 --> 00:20:18,320
management as a tool like docker

00:20:13,760 --> 00:20:19,919
so docker containers are kind of the um

00:20:18,320 --> 00:20:21,360
you know kind of held up in some sense

00:20:19,919 --> 00:20:24,159
as the ideal solution

00:20:21,360 --> 00:20:25,360
for uh environment management and

00:20:24,159 --> 00:20:27,039
environment

00:20:25,360 --> 00:20:28,880
isolation because within a docker

00:20:27,039 --> 00:20:30,640
container you can have an entirely

00:20:28,880 --> 00:20:32,480
separate operating system

00:20:30,640 --> 00:20:33,760
like you could be running linux inside a

00:20:32,480 --> 00:20:35,280
docker container but

00:20:33,760 --> 00:20:38,880
have windows installed on your local

00:20:35,280 --> 00:20:38,880
machine or something like this

00:20:39,039 --> 00:20:43,120
but even if you're using a very

00:20:44,559 --> 00:20:48,240
more general environment management

00:20:46,159 --> 00:20:50,080
solution like docker you still have to

00:20:48,240 --> 00:20:53,039
solve the second problem that you

00:20:50,080 --> 00:20:53,039
encounter when you're doing

00:20:53,440 --> 00:20:57,840
these kinds of workflows and that's

00:20:55,919 --> 00:20:59,919
package management because inside the

00:20:57,840 --> 00:21:02,240
docker container

00:20:59,919 --> 00:21:04,799
you still have to install and manage all

00:21:02,240 --> 00:21:07,919
of your python specific

00:21:04,799 --> 00:21:12,240
software like numpy or scipy

00:21:07,919 --> 00:21:14,880
or pandas or matplotlib things like this

00:21:12,240 --> 00:21:16,080
so you still need a package manager and

00:21:14,880 --> 00:21:17,919
you know so a good tool

00:21:16,080 --> 00:21:19,360
for a package manager is of course going

00:21:17,919 --> 00:21:21,120
to identify and install

00:21:19,360 --> 00:21:22,960
compatible versions of software and all

00:21:21,120 --> 00:21:25,039
their required dependencies

00:21:22,960 --> 00:21:26,799
um handle the process of updating

00:21:25,039 --> 00:21:29,520
software as more recent versions become

00:21:26,799 --> 00:21:32,400
available and things like this

00:21:29,520 --> 00:21:34,240
um if you use linux you may have

00:21:32,400 --> 00:21:37,360
experience with your operating system

00:21:34,240 --> 00:21:38,880
package managers like after yum

00:21:37,360 --> 00:21:41,200
on mac they have something called home

00:21:38,880 --> 00:21:42,159
brew which is an interesting project to

00:21:41,200 --> 00:21:44,080
bring

00:21:42,159 --> 00:21:45,919
something linux like as a package

00:21:44,080 --> 00:21:48,080
management system to mac

00:21:45,919 --> 00:21:49,919
um there's really not nothing similar

00:21:48,080 --> 00:21:53,360
that i've encountered for windows

00:21:49,919 --> 00:21:54,880
if you're a windows user okay

00:21:53,360 --> 00:21:57,120
so those are the two problems that you

00:21:54,880 --> 00:21:59,280
want to solve so environment management

00:21:57,120 --> 00:22:01,280
and package management and what we're

00:21:59,280 --> 00:22:03,039
going to see today is that conda solves

00:22:01,280 --> 00:22:04,320
both of these with a single tool

00:22:03,039 --> 00:22:06,320
and that's what i think is kind of nice

00:22:04,320 --> 00:22:08,240
you just wanted one tool maybe

00:22:06,320 --> 00:22:10,320
as we're going to also see maybe six to

00:22:08,240 --> 00:22:10,720
ten kind of key commands to use this

00:22:10,320 --> 00:22:12,400
tool

00:22:10,720 --> 00:22:15,600
and you can automatically solve these

00:22:12,400 --> 00:22:19,679
environment package management problems

00:22:15,600 --> 00:22:22,080
okay so

00:22:19,679 --> 00:22:24,000
why should you use conda and then plus

00:22:22,080 --> 00:22:27,039
pip

00:22:24,000 --> 00:22:28,960
when necessary instead of uh you know

00:22:27,039 --> 00:22:32,240
perhaps some other solution so

00:22:28,960 --> 00:22:34,080
one is that uh conda distributes

00:22:32,240 --> 00:22:37,360
pre-built packages

00:22:34,080 --> 00:22:39,600
um so binaries so this is really

00:22:37,360 --> 00:22:42,000
nice because it avoids the need to deal

00:22:39,600 --> 00:22:44,000
with compilots

00:22:42,000 --> 00:22:47,280
or to work out exactly how to build a

00:22:44,000 --> 00:22:47,280
particular tool from source

00:22:47,840 --> 00:22:52,240
a lot of times in scientific computing

00:22:51,200 --> 00:22:54,480
projects

00:22:52,240 --> 00:22:56,480
there is a really messy build and

00:22:54,480 --> 00:22:58,799
compilation step or steps that have to

00:22:56,480 --> 00:23:00,640
be done to get

00:22:58,799 --> 00:23:02,640
an executable binary that you could

00:23:00,640 --> 00:23:05,919
actually use in your project

00:23:02,640 --> 00:23:05,919
and conda kind of

00:23:06,000 --> 00:23:09,039
goes around all of that complexity by

00:23:08,000 --> 00:23:11,520
just distributing

00:23:09,039 --> 00:23:13,200
pre-compiled binaries targeting specific

00:23:11,520 --> 00:23:15,200
hardware architectures

00:23:13,200 --> 00:23:17,120
and then conda will also manage

00:23:15,200 --> 00:23:18,480
installing the right binary for the

00:23:17,120 --> 00:23:22,240
hardware that you have

00:23:18,480 --> 00:23:24,559
on your local machine um

00:23:22,240 --> 00:23:25,440
there's a link here to an astronomy code

00:23:24,559 --> 00:23:27,440
that is

00:23:25,440 --> 00:23:29,679
a good example of something that's very

00:23:27,440 --> 00:23:33,360
very difficult to install from source

00:23:29,679 --> 00:23:36,400
um tensorflow is a tool

00:23:33,360 --> 00:23:36,799
that's widely used in deep learning that

00:23:36,400 --> 00:23:39,280
was

00:23:36,799 --> 00:23:42,400
developed by google building tensorflow

00:23:39,280 --> 00:23:45,520
from source is really really challenging

00:23:42,400 --> 00:23:48,960
but getting cpu or gpu

00:23:45,520 --> 00:23:52,320
optimized binaries for tensorflow is

00:23:48,960 --> 00:23:54,159
one line when using conda

00:23:52,320 --> 00:23:57,120
again i mentioned cross platform as

00:23:54,159 --> 00:23:57,120
being a good good

00:23:57,440 --> 00:24:01,600
good reason to use conda so it should

00:23:58,960 --> 00:24:03,840
work on windows mac or linux

00:24:01,600 --> 00:24:06,400
also can target different hardware

00:24:03,840 --> 00:24:08,960
architectures

00:24:06,400 --> 00:24:10,080
if you're working on something that's

00:24:08,960 --> 00:24:12,159
not

00:24:10,080 --> 00:24:13,200
the x86 which is probably the most

00:24:12,159 --> 00:24:15,279
common

00:24:13,200 --> 00:24:17,039
and it plays nicely with tools like pips

00:24:15,279 --> 00:24:17,440
so we'll see some examples today of how

00:24:17,039 --> 00:24:19,440
to

00:24:17,440 --> 00:24:21,840
if you're already an experienced user of

00:24:19,440 --> 00:24:25,600
pip you can see how you can use conda

00:24:21,840 --> 00:24:27,279
and pip to complement one another

00:24:25,600 --> 00:24:29,279
to solve your environment and package

00:24:27,279 --> 00:24:33,039
management issues

00:24:29,279 --> 00:24:36,880
another another nice benefit is that

00:24:33,039 --> 00:24:38,480
anaconda which maintains the python the

00:24:36,880 --> 00:24:39,440
anaconda python distribution and

00:24:38,480 --> 00:24:43,120
miniconda

00:24:39,440 --> 00:24:45,760
and honda and open source projects

00:24:43,120 --> 00:24:46,799
they distribute optimized binaries for

00:24:45,760 --> 00:24:48,559
many

00:24:46,799 --> 00:24:51,279
of the core packages so things that i

00:24:48,559 --> 00:24:54,080
use intel's mapped kernel libraries

00:24:51,279 --> 00:24:55,919
or cuda you can get binaries that

00:24:54,080 --> 00:24:57,600
already have these things enabled

00:24:55,919 --> 00:25:00,159
so they're already highly optimized and

00:24:57,600 --> 00:25:04,159
very very performant

00:25:00,159 --> 00:25:07,039
okay so just a reminder so conda

00:25:04,159 --> 00:25:08,400
is a platform agnostic open source

00:25:07,039 --> 00:25:10,080
package and environment management

00:25:08,400 --> 00:25:13,440
system

00:25:10,080 --> 00:25:15,120
um using package and environment

00:25:13,440 --> 00:25:16,159
management tools like conda it helps

00:25:15,120 --> 00:25:18,000
facilitate

00:25:16,159 --> 00:25:20,720
portability and reproducibility of your

00:25:18,000 --> 00:25:22,880
data science workflows

00:25:20,720 --> 00:25:24,400
and conda plus pip solves both the

00:25:22,880 --> 00:25:26,159
package and environment management

00:25:24,400 --> 00:25:27,120
systems and targets multiple programming

00:25:26,159 --> 00:25:29,200
languages

00:25:27,120 --> 00:25:31,600
so other solutions i've come across

00:25:29,200 --> 00:25:31,600
either

00:25:31,679 --> 00:25:36,159
solve just package management or just

00:25:34,559 --> 00:25:38,000
environment management

00:25:36,159 --> 00:25:40,000
or they target a particular programming

00:25:38,000 --> 00:25:41,919
language okay

00:25:40,000 --> 00:25:43,760
so with that i'm going to just stop

00:25:41,919 --> 00:25:46,799
sharing briefly

00:25:43,760 --> 00:25:49,919
um and try to go back and take a look

00:25:46,799 --> 00:25:54,240
at the questions

00:25:49,919 --> 00:25:54,240
uh and just see what kind of

00:25:55,120 --> 00:25:58,559
the questions we have in here

00:25:59,760 --> 00:26:02,080
okay

00:26:03,840 --> 00:26:07,360
thank you for pinning the link um that's

00:26:06,000 --> 00:26:08,720
really useful don't know if i could have

00:26:07,360 --> 00:26:12,880
done that myself

00:26:08,720 --> 00:26:14,240
but thank you for whoever did that um

00:26:12,880 --> 00:26:16,720
actually there's a package manager

00:26:14,240 --> 00:26:20,080
called scoop i've not heard of scoop

00:26:16,720 --> 00:26:22,000
uh zoma thank you for for that i will uh

00:26:20,080 --> 00:26:24,640
i will just put it in another tab to

00:26:22,000 --> 00:26:24,640
look at later

00:26:25,760 --> 00:26:29,039
and chocolaty i had heard about

00:26:27,520 --> 00:26:30,799
chocolatey

00:26:29,039 --> 00:26:32,400
and i think i had a link to chocolatey

00:26:30,799 --> 00:26:33,679
in the project or in the the lesson

00:26:32,400 --> 00:26:34,320
materials it didn't look like it was

00:26:33,679 --> 00:26:36,720
super

00:26:34,320 --> 00:26:38,799
well developed last i checked and

00:26:36,720 --> 00:26:44,159
microsoft announced their old

00:26:38,799 --> 00:26:44,159
uh winget okay that seems uh

00:26:45,279 --> 00:26:48,480
winged something else i should take a

00:26:46,720 --> 00:26:50,559
look at okay

00:26:48,480 --> 00:26:52,480
when is it better to use conda alone or

00:26:50,559 --> 00:26:55,679
pip alone

00:26:52,480 --> 00:26:58,000
um okay so that's a very good

00:26:55,679 --> 00:26:58,000
um

00:26:59,440 --> 00:27:06,720
that's a very good question so um

00:27:03,600 --> 00:27:07,440
that we will talk about um kind of come

00:27:06,720 --> 00:27:09,279
out

00:27:07,440 --> 00:27:11,039
in the next couple episodes we will look

00:27:09,279 --> 00:27:12,480
at specifically like when you should use

00:27:11,039 --> 00:27:15,679
conda alone

00:27:12,480 --> 00:27:19,520
um i almost never use

00:27:15,679 --> 00:27:22,559
pip alone so the general way that i work

00:27:19,520 --> 00:27:23,919
is conda wherever possible and pip only

00:27:22,559 --> 00:27:27,279
when necessary

00:27:23,919 --> 00:27:29,120
so there are some libraries that are not

00:27:27,279 --> 00:27:31,440
have not been made available by their

00:27:29,120 --> 00:27:33,760
authors for distribution via conda

00:27:31,440 --> 00:27:34,720
and for those you have to use pip but

00:27:33,760 --> 00:27:38,799
for

00:27:34,720 --> 00:27:41,360
i would say probably 85 to 95

00:27:38,799 --> 00:27:42,799
of the libraries that i use on a day and

00:27:41,360 --> 00:27:47,279
day out basis

00:27:42,799 --> 00:27:49,360
are all available via conda

00:27:47,279 --> 00:27:51,600
and then for that last like five to ten

00:27:49,360 --> 00:27:53,520
percent um

00:27:51,600 --> 00:27:55,600
i can get via pip and i'll show you how

00:27:53,520 --> 00:27:57,120
to combine the two together to solve

00:27:55,600 --> 00:28:00,320
those problems

00:27:57,120 --> 00:28:01,039
um okay so does conda provide an image

00:28:00,320 --> 00:28:04,320
builder

00:28:01,039 --> 00:28:06,080
like docker so the short answer to that

00:28:04,320 --> 00:28:08,720
question is no

00:28:06,080 --> 00:28:09,360
as you'll see conda environments are

00:28:08,720 --> 00:28:12,640
more

00:28:09,360 --> 00:28:16,640
like structured directories instead

00:28:12,640 --> 00:28:18,399
of instead of images but if you remind

00:28:16,640 --> 00:28:21,279
me later i will provide a link

00:28:18,399 --> 00:28:22,480
to um an article that i wrote on medium

00:28:21,279 --> 00:28:25,919
on how to combine

00:28:22,480 --> 00:28:27,600
conda with um

00:28:25,919 --> 00:28:29,120
how to basically inject the document

00:28:27,600 --> 00:28:30,799
environment or sorry

00:28:29,120 --> 00:28:33,440
inject a conda environment inside of a

00:28:30,799 --> 00:28:35,039
docker a docker image and build an image

00:28:33,440 --> 00:28:37,279
and run containers based on that

00:28:35,039 --> 00:28:38,159
and that's what i use if i want to

00:28:37,279 --> 00:28:41,760
deploy

00:28:38,159 --> 00:28:44,880
my content environments into the cloud

00:28:41,760 --> 00:28:44,880
and the

00:28:48,880 --> 00:28:54,000
so i will answer that question um which

00:28:51,840 --> 00:28:56,000
is quite specific once we get to

00:28:54,000 --> 00:28:57,360
uh get to the point where we start

00:28:56,000 --> 00:29:00,480
actually creating environments

00:28:57,360 --> 00:29:02,640
okay cool so let's

00:29:00,480 --> 00:29:04,080
let's create some content environment so

00:29:02,640 --> 00:29:06,320
now i'm going to start sharing my screen

00:29:04,080 --> 00:29:06,320
again

00:29:07,200 --> 00:29:09,600
share

00:29:10,960 --> 00:29:16,559
and we will go to the next lesson

00:29:17,919 --> 00:29:24,840
working with environments okay

00:29:21,279 --> 00:29:28,000
so um in this

00:29:24,840 --> 00:29:30,799
episode which is one of the

00:29:28,000 --> 00:29:33,440
the three kind of uh big episodes that

00:29:30,799 --> 00:29:35,120
we're going to cover today

00:29:33,440 --> 00:29:37,760
we're going to talk about the basics of

00:29:35,120 --> 00:29:40,320
conda so what is a content environment

00:29:37,760 --> 00:29:41,919
how do you create delete environments

00:29:40,320 --> 00:29:43,279
how do you activate or deactivate

00:29:41,919 --> 00:29:45,120
environments which is like switching

00:29:43,279 --> 00:29:47,279
between different environments

00:29:45,120 --> 00:29:48,960
um how do you install packages into an

00:29:47,279 --> 00:29:50,960
existing environment so that's kind of a

00:29:48,960 --> 00:29:53,200
key thing

00:29:50,960 --> 00:29:54,399
where should you create them as we'll

00:29:53,200 --> 00:29:56,080
see condo environments are like

00:29:54,399 --> 00:29:57,520
directories so like where should you

00:29:56,080 --> 00:30:01,360
store your

00:29:57,520 --> 00:30:01,360
directories for your condo environment

00:30:01,760 --> 00:30:05,279
how do you find out what you've

00:30:02,960 --> 00:30:06,640
installed in an environment how to find

00:30:05,279 --> 00:30:08,640
out what environments exist on your

00:30:06,640 --> 00:30:11,520
machine if you've created a lot of them

00:30:08,640 --> 00:30:12,880
and how again deleting them if you don't

00:30:11,520 --> 00:30:15,039
need it anymore

00:30:12,880 --> 00:30:16,720
so by the end of this all the objectives

00:30:15,039 --> 00:30:17,200
the objectives are basically to show you

00:30:16,720 --> 00:30:22,080
how to

00:30:17,200 --> 00:30:25,440
to answer those questions using condom

00:30:22,080 --> 00:30:27,120
okay so what is a condo environment so a

00:30:25,440 --> 00:30:28,960
condo environment and there's a link

00:30:27,120 --> 00:30:30,640
there to the official documentation it's

00:30:28,960 --> 00:30:32,159
just a directory that contains a

00:30:30,640 --> 00:30:35,840
specific collection

00:30:32,159 --> 00:30:37,760
of conda packages and and associated

00:30:35,840 --> 00:30:41,039
metadata that's installed uh

00:30:37,760 --> 00:30:43,120
structured in a very very specific way

00:30:41,039 --> 00:30:44,559
um if you have one research project and

00:30:43,120 --> 00:30:47,279
requires numpy

00:30:44,559 --> 00:30:49,039
1.18 which is a very recent very new

00:30:47,279 --> 00:30:51,600
version of numpy

00:30:49,039 --> 00:30:52,559
and you have you can install that in one

00:30:51,600 --> 00:30:55,520
environment

00:30:52,559 --> 00:30:57,360
um you might have another environment um

00:30:55,520 --> 00:30:58,720
that is associated with a project that

00:30:57,360 --> 00:31:02,399
you finished

00:30:58,720 --> 00:31:03,120
and maybe that version of numpy that

00:31:02,399 --> 00:31:05,360
worked

00:31:03,120 --> 00:31:07,519
that was that you used on that project

00:31:05,360 --> 00:31:08,960
is 1.12

00:31:07,519 --> 00:31:11,039
and that's fine you can have those

00:31:08,960 --> 00:31:12,159
environments so you can basically have

00:31:11,039 --> 00:31:14,799
old work that has

00:31:12,159 --> 00:31:16,480
environments pinned to the versions of

00:31:14,799 --> 00:31:18,240
the dependencies that you used

00:31:16,480 --> 00:31:19,919
at the time that you were working on the

00:31:18,240 --> 00:31:22,080
project so that you can go back to it

00:31:19,919 --> 00:31:23,440
and you'll know it will always work

00:31:22,080 --> 00:31:25,279
and then you can have another project

00:31:23,440 --> 00:31:26,559
that is kind of in development and using

00:31:25,279 --> 00:31:27,760
kind of the bleeding edge of the most

00:31:26,559 --> 00:31:29,360
recent versions

00:31:27,760 --> 00:31:33,679
of the library and you can switch back

00:31:29,360 --> 00:31:36,720
and forth between these different farms

00:31:33,679 --> 00:31:37,519
so one tip is there is a when you

00:31:36,720 --> 00:31:40,799
install

00:31:37,519 --> 00:31:42,159
uh anaconda or mini conda and get the

00:31:40,799 --> 00:31:44,320
condit tool

00:31:42,159 --> 00:31:46,000
the conda tool sets up a base conda

00:31:44,320 --> 00:31:51,039
environment and that base

00:31:46,000 --> 00:31:53,679
condo environment isolates um

00:31:51,039 --> 00:31:55,200
conda and its own version of python from

00:31:53,679 --> 00:31:57,440
your system python

00:31:55,200 --> 00:31:58,960
so you never really want to use the

00:31:57,440 --> 00:32:01,440
python that has been

00:31:58,960 --> 00:32:02,320
installed on your system because it's

00:32:01,440 --> 00:32:04,159
there for doing

00:32:02,320 --> 00:32:05,919
operating system specific things like

00:32:04,159 --> 00:32:06,799
interacting with windows or interacting

00:32:05,919 --> 00:32:09,679
with mac os

00:32:06,799 --> 00:32:11,679
or things like this and it's included by

00:32:09,679 --> 00:32:13,519
the developers of the operating system

00:32:11,679 --> 00:32:15,679
specifically for the operating system to

00:32:13,519 --> 00:32:16,799
use to do stuff not for you to do your

00:32:15,679 --> 00:32:19,679
work with

00:32:16,799 --> 00:32:21,120
so the base conda environment is like a

00:32:19,679 --> 00:32:24,000
level of isolation

00:32:21,120 --> 00:32:26,080
for your python projects from system

00:32:24,000 --> 00:32:27,760
python

00:32:26,080 --> 00:32:29,120
but you never really want to install

00:32:27,760 --> 00:32:30,960
anything into your base condo

00:32:29,120 --> 00:32:32,880
environment it's much better to just let

00:32:30,960 --> 00:32:35,120
that base conda environment just

00:32:32,880 --> 00:32:36,480
have the conda tool and the non-system

00:32:35,120 --> 00:32:38,159
python

00:32:36,480 --> 00:32:39,760
and other stuff and then create

00:32:38,159 --> 00:32:42,720
additional environments

00:32:39,760 --> 00:32:43,919
for each of your projects so how do we

00:32:42,720 --> 00:32:45,279
do that

00:32:43,919 --> 00:32:47,120
so at this point i'm going to start

00:32:45,279 --> 00:32:50,159
typing commands so i'm going to continue

00:32:47,120 --> 00:32:50,159
using the lectures

00:32:50,640 --> 00:32:53,840
and lecturing based off of the lecture

00:32:53,279 --> 00:32:55,039
notes

00:32:53,840 --> 00:32:57,360
but now i'm going to switch over to

00:32:55,039 --> 00:33:00,480
jupiter lab um

00:32:57,360 --> 00:33:02,000
and actually start typing some some code

00:33:00,480 --> 00:33:05,120
so hopefully now

00:33:02,000 --> 00:33:07,360
you can follow along with me and i'm

00:33:05,120 --> 00:33:09,039
just going to close this

00:33:07,360 --> 00:33:11,200
and so go back so this is the landing

00:33:09,039 --> 00:33:14,640
page um that you would have hit

00:33:11,200 --> 00:33:17,039
with um once you click the link that i

00:33:14,640 --> 00:33:19,519
shared and takes you to jupiter lab if

00:33:17,039 --> 00:33:21,120
you've not used jupiter lab before

00:33:19,519 --> 00:33:22,960
um i'll just do kind of a quick

00:33:21,120 --> 00:33:25,279
introduction so

00:33:22,960 --> 00:33:26,159
this big area over on the right-hand

00:33:25,279 --> 00:33:29,120
side that has

00:33:26,159 --> 00:33:30,159
notebooks and consoles and other stuff

00:33:29,120 --> 00:33:33,600
like terminals

00:33:30,159 --> 00:33:36,640
text files uh markdown and editor

00:33:33,600 --> 00:33:39,360
this is called the working area

00:33:36,640 --> 00:33:40,159
and the launcher so here you can launch

00:33:39,360 --> 00:33:43,200
notebooks

00:33:40,159 --> 00:33:44,399
or python console terminals or other

00:33:43,200 --> 00:33:48,320
stuff

00:33:44,399 --> 00:33:51,519
um over here is kind of like the

00:33:48,320 --> 00:33:55,840
the file manager window and

00:33:51,519 --> 00:33:57,440
we'll do some stuff with a little bit of

00:33:55,840 --> 00:33:58,480
stuff with the file manager but mostly

00:33:57,440 --> 00:34:01,120
we're just going to be using the

00:33:58,480 --> 00:34:06,240
terminal today

00:34:01,120 --> 00:34:08,079
so if you go ahead and click terminal

00:34:06,240 --> 00:34:09,760
then you'll get a new terminal with a

00:34:08,079 --> 00:34:12,960
very long prompt

00:34:09,760 --> 00:34:14,480
um and i've not quite figured out

00:34:12,960 --> 00:34:15,599
exactly the best way to shorten that

00:34:14,480 --> 00:34:16,399
prompt so you're going to have to bear

00:34:15,599 --> 00:34:19,200
with me on the long

00:34:16,399 --> 00:34:20,720
the long prompt today and now to give

00:34:19,200 --> 00:34:22,320
myself a little bit more space i'm just

00:34:20,720 --> 00:34:25,440
going to go over here and click this

00:34:22,320 --> 00:34:28,800
folder which will toggle the

00:34:25,440 --> 00:34:30,240
uh the file manager basically so that

00:34:28,800 --> 00:34:34,159
just gives me a little bit more space

00:34:30,240 --> 00:34:36,560
okay so here we go um

00:34:34,159 --> 00:34:38,079
so let's create some environments so

00:34:36,560 --> 00:34:39,040
let's suppose that we wanted to create

00:34:38,079 --> 00:34:42,480
an environment

00:34:39,040 --> 00:34:45,839
uh for python 3 development um

00:34:42,480 --> 00:34:48,240
so we could do conda

00:34:45,839 --> 00:34:50,079
create so the command for creating an

00:34:48,240 --> 00:34:52,560
environment with conda is conduct

00:34:50,079 --> 00:34:52,560
create

00:34:53,839 --> 00:34:58,960
and then we have to name our

00:34:56,960 --> 00:35:00,040
our python environment and we'll just

00:34:58,960 --> 00:35:03,440
call it

00:35:00,040 --> 00:35:05,440
python3 emv

00:35:03,440 --> 00:35:06,480
what you name your environment is kind

00:35:05,440 --> 00:35:09,040
of up to you

00:35:06,480 --> 00:35:10,320
i would encourage you to to try to be

00:35:09,040 --> 00:35:12,000
consistent

00:35:10,320 --> 00:35:14,320
adopt some kind of a naming convention

00:35:12,000 --> 00:35:16,880
and be consistent

00:35:14,320 --> 00:35:17,680
just to to make your life life easier so

00:35:16,880 --> 00:35:19,680
that you

00:35:17,680 --> 00:35:22,240
and then i will install into this

00:35:19,680 --> 00:35:24,640
environment python

00:35:22,240 --> 00:35:25,359
and a tool called pip which is the

00:35:24,640 --> 00:35:29,599
default

00:35:25,359 --> 00:35:31,599
uh package manager i every uh

00:35:29,599 --> 00:35:33,520
con environment i create i always

00:35:31,599 --> 00:35:36,000
install python i always install

00:35:33,520 --> 00:35:37,839
pip because i always i always want want

00:35:36,000 --> 00:35:41,359
this

00:35:37,839 --> 00:35:44,240
now i hit enter and

00:35:41,359 --> 00:35:45,040
you'll start seeing conda doing its

00:35:44,240 --> 00:35:48,560
thing so

00:35:45,040 --> 00:35:52,160
condo will go off to

00:35:48,560 --> 00:35:53,839
the it will go off and gather

00:35:52,160 --> 00:35:56,839
metadata and information about the

00:35:53,839 --> 00:36:00,400
packages that is required

00:35:56,839 --> 00:36:01,680
um so for example here it's telling us a

00:36:00,400 --> 00:36:03,119
little bit of a warning saying that

00:36:01,680 --> 00:36:04,160
there's actually a slightly newer

00:36:03,119 --> 00:36:07,760
version of conda

00:36:04,160 --> 00:36:09,520
than what we're using that's okay um

00:36:07,760 --> 00:36:11,520
gives you some a command that you can

00:36:09,520 --> 00:36:14,000
run to update your version of conduct

00:36:11,520 --> 00:36:15,440
don't need to worry about that and then

00:36:14,000 --> 00:36:18,079
it gives you what's called a package

00:36:15,440 --> 00:36:20,240
plan it's basically some information

00:36:18,079 --> 00:36:21,920
about what conda is going to do

00:36:20,240 --> 00:36:23,760
so it's going to create an environment

00:36:21,920 --> 00:36:25,520
in a particular location we'll talk more

00:36:23,760 --> 00:36:27,599
about how to change this later

00:36:25,520 --> 00:36:28,640
but you can see here's the absolute path

00:36:27,599 --> 00:36:31,040
from the root

00:36:28,640 --> 00:36:31,760
of the file system inside the container

00:36:31,040 --> 00:36:35,200
in this case

00:36:31,760 --> 00:36:39,280
down to the directory

00:36:35,200 --> 00:36:41,760
python3 dash env where the python

00:36:39,280 --> 00:36:43,040
environment will be created and then

00:36:41,760 --> 00:36:45,839
these are

00:36:43,040 --> 00:36:47,599
the packages that we wanted to install

00:36:45,839 --> 00:36:49,920
this is these the ones that we listed to

00:36:47,599 --> 00:36:51,839
install

00:36:49,920 --> 00:36:53,119
these are all the packages that actually

00:36:51,839 --> 00:36:55,160
will get installed

00:36:53,119 --> 00:36:56,320
so this includes basically so here's

00:36:55,160 --> 00:36:58,160
python38

00:36:56,320 --> 00:36:59,680
that's the most recent version of python

00:36:58,160 --> 00:37:02,880
that is available

00:36:59,680 --> 00:37:04,079
pip 20.2.1 and then all these other

00:37:02,880 --> 00:37:07,440
things

00:37:04,079 --> 00:37:10,880
are actually linux specific

00:37:07,440 --> 00:37:14,480
dependencies or dependencies of python

00:37:10,880 --> 00:37:16,800
or pip and operating specific stuff that

00:37:14,480 --> 00:37:18,640
either python or pip acquired so you can

00:37:16,800 --> 00:37:19,760
see here just installing python or pip

00:37:18,640 --> 00:37:22,480
you're going to need

00:37:19,760 --> 00:37:24,000
you know two dozen other libraries or

00:37:22,480 --> 00:37:27,359
packages

00:37:24,000 --> 00:37:29,040
conda has found

00:37:27,359 --> 00:37:31,040
a set of versions of all of these

00:37:29,040 --> 00:37:34,560
dependencies that are

00:37:31,040 --> 00:37:37,040
the most recent and mutually compatible

00:37:34,560 --> 00:37:39,040
versions of the software so that's kind

00:37:37,040 --> 00:37:40,160
of the package management aspect of

00:37:39,040 --> 00:37:42,640
conda at work

00:37:40,160 --> 00:37:43,200
it's finding all of the things that you

00:37:42,640 --> 00:37:45,040
need

00:37:43,200 --> 00:37:46,800
for the software to support the software

00:37:45,040 --> 00:37:48,560
that you want to install

00:37:46,800 --> 00:37:50,079
plus versions of all of these things

00:37:48,560 --> 00:37:52,720
that are mutually compatible

00:37:50,079 --> 00:37:54,400
so that it'll work nicely together so

00:37:52,720 --> 00:37:56,880
it's going to download all of that

00:37:54,400 --> 00:37:58,720
and then install them and it asks do you

00:37:56,880 --> 00:37:59,520
want to proceed yes or no so you type

00:37:58,720 --> 00:38:02,320
yes

00:37:59,520 --> 00:38:02,320
and hit enter

00:38:02,720 --> 00:38:06,240
and then it's actually going to start

00:38:04,560 --> 00:38:09,119
downloading things so during the

00:38:06,240 --> 00:38:10,560
the environment creation step you

00:38:09,119 --> 00:38:11,839
generally are going to need an internet

00:38:10,560 --> 00:38:14,079
connection

00:38:11,839 --> 00:38:15,839
because conda is going to need to

00:38:14,079 --> 00:38:19,440
download all these binaries

00:38:15,839 --> 00:38:20,960
and packages from online but once

00:38:19,440 --> 00:38:22,400
they're downloaded you don't need to

00:38:20,960 --> 00:38:24,960
have an internet connection necessarily

00:38:22,400 --> 00:38:24,960
to use them

00:38:25,520 --> 00:38:30,079
okay and so that's it so now we've

00:38:27,280 --> 00:38:32,720
created our first python3 environment

00:38:30,079 --> 00:38:34,480
and there's some commands here to

00:38:32,720 --> 00:38:35,839
activate and deactivate the environment

00:38:34,480 --> 00:38:36,800
we're going to talk about these commands

00:38:35,839 --> 00:38:38,960
in a minute but

00:38:36,800 --> 00:38:40,079
every environment you create conda will

00:38:38,960 --> 00:38:41,920
always tell you

00:38:40,079 --> 00:38:43,200
here's a command that you can run to

00:38:41,920 --> 00:38:45,119
activate the environment

00:38:43,200 --> 00:38:47,760
and here's a command you can run to

00:38:45,119 --> 00:38:51,920
deactivate that

00:38:47,760 --> 00:38:53,680
okay now so we've created our first

00:38:51,920 --> 00:38:57,359
environment

00:38:53,680 --> 00:38:59,920
um and as i as i said the

00:38:57,359 --> 00:39:01,520
if you don't specify ahead of time which

00:38:59,920 --> 00:39:04,079
versions that you want

00:39:01,520 --> 00:39:04,079
so notice

00:39:08,560 --> 00:39:16,640
notice that when i specified python

00:39:13,200 --> 00:39:18,720
and then pip i didn't say anything about

00:39:16,640 --> 00:39:21,920
any particular version so by default

00:39:18,720 --> 00:39:23,839
honda will find the most recent

00:39:21,920 --> 00:39:25,839
mutually compatible versions of these

00:39:23,839 --> 00:39:30,240
packages to install

00:39:25,839 --> 00:39:34,800
that's why we got python 3.8.5

00:39:30,240 --> 00:39:36,240
here and pip 20.2.1

00:39:34,800 --> 00:39:37,920
those are the most recent versions of

00:39:36,240 --> 00:39:41,280
those packages that are available and

00:39:37,920 --> 00:39:41,280
they just happen to also be

00:39:41,359 --> 00:39:45,760
work together with one another but what

00:39:44,079 --> 00:39:48,480
if we wanted to do something

00:39:45,760 --> 00:39:50,720
uh different so what if we actually

00:39:48,480 --> 00:39:54,400
specifically needed a version of python

00:39:50,720 --> 00:39:55,359
like python36 so we could go back here

00:39:54,400 --> 00:39:56,839
and we say well

00:39:55,359 --> 00:39:59,839
we'll create a new environment called

00:39:56,839 --> 00:39:59,839
python36

00:40:02,000 --> 00:40:08,240
and then we type python equals 3.6

00:40:05,839 --> 00:40:08,240
and

00:40:09,520 --> 00:40:14,240
we can let's say we want a specific

00:40:12,640 --> 00:40:18,319
version of pip

00:40:14,240 --> 00:40:21,440
so let's do pip 20.1

00:40:18,319 --> 00:40:22,880
for example so not the most recent

00:40:21,440 --> 00:40:25,599
version of pip but

00:40:22,880 --> 00:40:27,760
a slightly older version of pit so if we

00:40:25,599 --> 00:40:30,160
were to hit enter

00:40:27,760 --> 00:40:31,440
then again we're going to get the exact

00:40:30,160 --> 00:40:34,640
same thing

00:40:31,440 --> 00:40:36,880
so now specific versions of python

00:40:34,640 --> 00:40:38,720
are going to be installed and this is

00:40:36,880 --> 00:40:40,000
the location where the environment will

00:40:38,720 --> 00:40:41,920
be installed

00:40:40,000 --> 00:40:43,280
and then this is all the specifics about

00:40:41,920 --> 00:40:44,319
what actually is going to be installed

00:40:43,280 --> 00:40:48,319
so we want to proceed

00:40:44,319 --> 00:40:50,040
we type y and hit enter and then

00:40:48,319 --> 00:40:51,920
we download some stuff so you can see

00:40:50,040 --> 00:40:54,400
3.6.11 is actually what's being

00:40:51,920 --> 00:40:54,400
installed

00:40:55,839 --> 00:40:59,200
and there we go so now we've got another

00:40:57,440 --> 00:41:00,560
environment with a different version of

00:40:59,200 --> 00:41:04,000
python

00:41:00,560 --> 00:41:05,599
we could actually do should actually be

00:41:04,000 --> 00:41:06,079
able to do this with python 2. so let's

00:41:05,599 --> 00:41:08,800
suppose

00:41:06,079 --> 00:41:08,800
that you needed

00:41:09,200 --> 00:41:14,079
a project that only works with python 2.

00:41:11,839 --> 00:41:15,839
so even though python 2 is no longer

00:41:14,079 --> 00:41:18,240
supported there's still a lot of legacy

00:41:15,839 --> 00:41:21,520
code around that requires python 2.

00:41:18,240 --> 00:41:24,400
so we could do um

00:41:21,520 --> 00:41:24,400
conda create

00:41:25,920 --> 00:41:33,760
python 2 environment

00:41:29,599 --> 00:41:33,760
and then change this to python

00:41:35,119 --> 00:41:39,839
maybe 27 so let's call this python27 to

00:41:39,200 --> 00:41:43,200
be more

00:41:39,839 --> 00:41:46,319
specific python 2.7 was the

00:41:43,200 --> 00:41:47,520
last version of python 2 that was made

00:41:46,319 --> 00:41:50,000
available

00:41:47,520 --> 00:41:50,720
um the last minor version at least i

00:41:50,000 --> 00:41:53,119
think

00:41:50,720 --> 00:41:55,040
and then pip i don't actually know what

00:41:53,119 --> 00:41:56,240
the most recent version of pip that will

00:41:55,040 --> 00:41:58,960
work with python 2

00:41:56,240 --> 00:42:00,480
is and so i'm just going to leave no no

00:41:58,960 --> 00:42:03,839
specific version on pip

00:42:00,480 --> 00:42:03,839
then if i hit enter

00:42:12,480 --> 00:42:17,359
conda is going to run off and so now

00:42:15,760 --> 00:42:18,960
what it's doing is just trying to figure

00:42:17,359 --> 00:42:21,200
out kind of what set of

00:42:18,960 --> 00:42:21,200
uh

00:42:23,520 --> 00:42:29,680
libraries is needed to work with

00:42:26,720 --> 00:42:29,680
python 2.

00:42:29,760 --> 00:42:37,520
and so there we go so let's see

00:42:33,040 --> 00:42:40,160
python 2.7.15 and pip 20.1

00:42:37,520 --> 00:42:41,359
so we can just hit yes and hit enter and

00:42:40,160 --> 00:42:43,599
again it's going to download all of

00:42:41,359 --> 00:42:44,960
these things

00:42:43,599 --> 00:42:48,560
check that they all work properly with

00:42:44,960 --> 00:42:52,560
one another and installed

00:42:48,560 --> 00:42:55,760
right so uh what we've done now

00:42:52,560 --> 00:43:00,560
within the last like 10 minutes solved

00:42:55,760 --> 00:43:03,040
an enormous problem over the last like

00:43:00,560 --> 00:43:04,480
five plus years as the community was

00:43:03,040 --> 00:43:07,200
transitioning between python 2 and

00:43:04,480 --> 00:43:09,599
python 3 and it's still a major problem

00:43:07,200 --> 00:43:11,280
there are there's a lot of legacy code

00:43:09,599 --> 00:43:12,240
that still only works on python 2 and

00:43:11,280 --> 00:43:14,720
hasn't been

00:43:12,240 --> 00:43:15,280
hasn't been updated to python 3 yet and

00:43:14,720 --> 00:43:18,480
having

00:43:15,280 --> 00:43:20,160
the ability to have two major versions

00:43:18,480 --> 00:43:22,400
of python that are different installed

00:43:20,160 --> 00:43:25,680
on the same machine

00:43:22,400 --> 00:43:28,800
solves what had pretty much been a a

00:43:25,680 --> 00:43:28,800
very difficult problem

00:43:29,520 --> 00:43:32,960
so now you know how to install python 2

00:43:31,440 --> 00:43:35,760
in python 3 or

00:43:32,960 --> 00:43:36,640
any versions of python that you want

00:43:35,760 --> 00:43:40,960
okay

00:43:36,640 --> 00:43:42,319
now i personally would recommend that

00:43:40,960 --> 00:43:46,079
you always specify

00:43:42,319 --> 00:43:47,200
specific versions um of your packages

00:43:46,079 --> 00:43:49,520
when you install them into an

00:43:47,200 --> 00:43:52,720
environment this just helps

00:43:49,520 --> 00:43:54,000
keep your life simpler and you always

00:43:52,720 --> 00:43:56,000
know exactly what

00:43:54,000 --> 00:43:57,280
uh versions that you're using in each of

00:43:56,000 --> 00:43:59,680
your

00:43:57,280 --> 00:44:00,720
in each of your environments all right

00:43:59,680 --> 00:44:03,760
so we're gonna do

00:44:00,720 --> 00:44:05,280
uh a couple more examples and then we're

00:44:03,760 --> 00:44:07,280
gonna there's gonna be an exercise and

00:44:05,280 --> 00:44:08,960
i'm gonna switch back and start taking

00:44:07,280 --> 00:44:10,960
questions

00:44:08,960 --> 00:44:12,960
that you post in the chat in the chat

00:44:10,960 --> 00:44:14,319
window so i haven't forgotten about you

00:44:12,960 --> 00:44:16,400
if you have a question languishing in

00:44:14,319 --> 00:44:20,240
the in the chat menu

00:44:16,400 --> 00:44:22,000
um okay so i said it's very important to

00:44:20,240 --> 00:44:24,560
specify version numbers but then what

00:44:22,000 --> 00:44:25,200
if you don't know what version is

00:44:24,560 --> 00:44:26,800
available

00:44:25,200 --> 00:44:28,720
or what is even the most recent version

00:44:26,800 --> 00:44:30,240
of a package you want to work with

00:44:28,720 --> 00:44:33,200
well there's another handy command

00:44:30,240 --> 00:44:35,520
called conda search

00:44:33,200 --> 00:44:37,040
and conda search will allow you to

00:44:35,520 --> 00:44:39,119
search for a particular package that you

00:44:37,040 --> 00:44:42,000
might want to install

00:44:39,119 --> 00:44:45,040
so let's try scikit-learn so

00:44:42,000 --> 00:44:46,960
scikit-learn is a very popular

00:44:45,040 --> 00:44:48,839
machine learning library very widely

00:44:46,960 --> 00:44:52,240
used

00:44:48,839 --> 00:44:55,040
both research and

00:44:52,240 --> 00:44:57,119
it's available via condom so if we do

00:44:55,040 --> 00:44:59,920
conda search scikit-learn

00:44:57,119 --> 00:45:01,760
then we'll see a complete list of all

00:44:59,920 --> 00:45:04,319
the different versions of scikit-learn

00:45:01,760 --> 00:45:08,319
that are available

00:45:04,319 --> 00:45:12,640
so the last version

00:45:08,319 --> 00:45:15,760
is 0.17 and the most recent version

00:45:12,640 --> 00:45:16,560
is 0.23 so there's probably two to three

00:45:15,760 --> 00:45:18,880
years worth

00:45:16,560 --> 00:45:19,760
of versions of scikit-learn available

00:45:18,880 --> 00:45:23,520
via

00:45:19,760 --> 00:45:26,480
via content okay

00:45:23,520 --> 00:45:28,240
and there are quite a few options that

00:45:26,480 --> 00:45:30,000
you can do in terms of pattern matching

00:45:28,240 --> 00:45:31,359
and wild card searches and things like

00:45:30,000 --> 00:45:34,720
that with conda search

00:45:31,359 --> 00:45:39,040
but you can type conda search

00:45:34,720 --> 00:45:42,160
help and hit enter to get a

00:45:39,040 --> 00:45:43,760
help menu that kind of explains

00:45:42,160 --> 00:45:47,280
what you can the different options that

00:45:43,760 --> 00:45:50,079
you can use

00:45:47,280 --> 00:45:51,520
the syntax for using the command and

00:45:50,079 --> 00:45:56,000
some examples at the bottom

00:45:51,520 --> 00:45:56,000
so there's some wild card examples for

00:45:56,079 --> 00:46:01,599
for searching and pattern matching okay

00:45:59,599 --> 00:46:03,040
so let's see i'm gonna type the clear

00:46:01,599 --> 00:46:06,000
command just to clear out

00:46:03,040 --> 00:46:07,280
the uh the history or the not the

00:46:06,000 --> 00:46:09,200
history of the screen

00:46:07,280 --> 00:46:11,280
um so let's try another example so what

00:46:09,200 --> 00:46:14,640
if we wanted to create

00:46:11,280 --> 00:46:15,839
um an environment for like a kind of a

00:46:14,640 --> 00:46:18,640
base environment for

00:46:15,839 --> 00:46:18,960
scientific computing so we might call

00:46:18,640 --> 00:46:23,040
that

00:46:18,960 --> 00:46:25,920
base scipy environment

00:46:23,040 --> 00:46:28,160
um and into this environment we're going

00:46:25,920 --> 00:46:31,599
to install

00:46:28,160 --> 00:46:32,720
ipython which is a interactive version

00:46:31,599 --> 00:46:35,520
of the python

00:46:32,720 --> 00:46:37,599
interpreter which has been around for

00:46:35,520 --> 00:46:40,319
quite a long time now

00:46:37,599 --> 00:46:41,680
and we'll install version 7.13 not sure

00:46:40,319 --> 00:46:44,800
that's the most recent version

00:46:41,680 --> 00:46:47,119
that's available we're installed

00:46:44,800 --> 00:46:50,160
matplotlib which is a

00:46:47,119 --> 00:46:53,359
a plotting and visualization package

00:46:50,160 --> 00:46:55,040
that has one of the kind of default

00:46:53,359 --> 00:46:58,800
packages

00:46:55,040 --> 00:47:02,000
widely used in scientific computing um

00:46:58,800 --> 00:47:06,720
numpy so numpy is a package

00:47:02,000 --> 00:47:09,040
for manipulating n-dimensional arrays

00:47:06,720 --> 00:47:10,079
of numbers so it again is one of the

00:47:09,040 --> 00:47:13,359
foundational packages

00:47:10,079 --> 00:47:16,480
in scientific commuting python ecosystem

00:47:13,359 --> 00:47:20,559
we'll do pip and with 20.1

00:47:16,480 --> 00:47:23,040
and then scipy 1 4.

00:47:20,559 --> 00:47:23,760
so the combination of numpy and scipy

00:47:23,040 --> 00:47:26,240
are

00:47:23,760 --> 00:47:29,119
basically python ecosystem replacements

00:47:26,240 --> 00:47:32,160
for matlab and the matlab toolkit

00:47:29,119 --> 00:47:35,200
so if you've ever used if you use matlab

00:47:32,160 --> 00:47:36,559
and haven't come across your python

00:47:35,200 --> 00:47:38,079
alternatives so now

00:47:36,559 --> 00:47:40,319
these are the alternatives numpy and

00:47:38,079 --> 00:47:45,280
scifi

00:47:40,319 --> 00:47:49,359
cover 95 of what you can do in matlab

00:47:45,280 --> 00:47:52,240
um and there's even another

00:47:49,359 --> 00:47:54,400
package called senpai which i didn't put

00:47:52,240 --> 00:47:58,400
in my lecture notes that you can install

00:47:54,400 --> 00:48:00,240
that is symbolic algebra

00:47:58,400 --> 00:48:02,720
similar to mathematica although not

00:48:00,240 --> 00:48:06,240
quite as fully featured as mathematica

00:48:02,720 --> 00:48:08,559
so let's go ahead and hit enter

00:48:06,240 --> 00:48:08,559
and

00:48:10,240 --> 00:48:13,280
this might take a little bit longer

00:48:11,599 --> 00:48:15,599
we're asking to install a few more

00:48:13,280 --> 00:48:15,599
things

00:48:18,079 --> 00:48:21,440
so in the background what's going on

00:48:19,520 --> 00:48:22,880
when it says solving the environment so

00:48:21,440 --> 00:48:25,359
conda

00:48:22,880 --> 00:48:27,599
sets up a mathematical problem uh called

00:48:25,359 --> 00:48:29,200
a satisfiability problem where it

00:48:27,599 --> 00:48:30,880
takes the packages that you want to

00:48:29,200 --> 00:48:32,800
install and

00:48:30,880 --> 00:48:34,079
constraints any constraints on the

00:48:32,800 --> 00:48:37,200
version numbers

00:48:34,079 --> 00:48:37,839
and then sets up a kind of a set of

00:48:37,200 --> 00:48:40,160
logical

00:48:37,839 --> 00:48:41,680
equations that it can then solve to

00:48:40,160 --> 00:48:44,880
figure out what is the most

00:48:41,680 --> 00:48:47,119
current mutually consistent set of

00:48:44,880 --> 00:48:49,280
packages to install

00:48:47,119 --> 00:48:50,800
and sometimes that can take a little bit

00:48:49,280 --> 00:48:52,720
if the number of packages that need to

00:48:50,800 --> 00:48:56,000
be checked is large

00:48:52,720 --> 00:48:56,000
and so we'll just hit yes

00:48:59,440 --> 00:49:03,520
and while this is just downloading some

00:49:01,119 --> 00:49:04,480
stuff we can go up here and just take a

00:49:03,520 --> 00:49:09,040
look at what

00:49:04,480 --> 00:49:09,040
has been installed

00:49:09,680 --> 00:49:13,839
if there's anything interesting or worth

00:49:11,200 --> 00:49:13,839
pointing out

00:49:14,839 --> 00:49:19,520
so here this lid blast lipsy blast

00:49:18,240 --> 00:49:22,640
these things these are the linear

00:49:19,520 --> 00:49:25,920
algebra um packages that

00:49:22,640 --> 00:49:27,760
numpy uses these are written in

00:49:25,920 --> 00:49:30,319
c c plus plus or four trams so they're

00:49:27,760 --> 00:49:33,119
very very fast

00:49:30,319 --> 00:49:34,000
and but you won't you don't need to know

00:49:33,119 --> 00:49:35,760
or use

00:49:34,000 --> 00:49:37,280
c c plus pulse or fortran in order to

00:49:35,760 --> 00:49:38,640
make use of them because numpy

00:49:37,280 --> 00:49:41,119
allows you to use them from within

00:49:38,640 --> 00:49:41,119
python

00:49:43,520 --> 00:49:48,240
not sure there's anything else of note

00:49:45,359 --> 00:49:48,240
in there present

00:49:49,040 --> 00:49:55,920
um so there's senpai

00:49:52,640 --> 00:49:59,839
one six so that was the version uh

00:49:55,920 --> 00:49:59,839
that i didn't know

00:50:00,480 --> 00:50:03,359
so now it's downloaded everything and

00:50:02,000 --> 00:50:04,480
now it's just checking that everything

00:50:03,359 --> 00:50:07,280
matches

00:50:04,480 --> 00:50:09,440
um as expected and now it's actually

00:50:07,280 --> 00:50:10,960
installing things

00:50:09,440 --> 00:50:13,599
which is basically populating the

00:50:10,960 --> 00:50:16,400
contents of the directory

00:50:13,599 --> 00:50:16,400
that is

00:50:18,480 --> 00:50:24,000
here so this directory has been created

00:50:22,400 --> 00:50:26,000
and when the transaction starts

00:50:24,000 --> 00:50:29,920
executing files are actually

00:50:26,000 --> 00:50:33,119
being installed in particular locations

00:50:29,920 --> 00:50:35,680
within this directory

00:50:33,119 --> 00:50:35,680
and we're done

00:50:36,400 --> 00:50:41,599
okay and uh

00:50:39,520 --> 00:50:43,040
just to show you that that we were done

00:50:41,599 --> 00:50:45,359
so i'll talk about how

00:50:43,040 --> 00:50:47,520
uh activating more specifically in a

00:50:45,359 --> 00:50:50,720
moment but if we were to do conda

00:50:47,520 --> 00:50:54,480
activate uh basic

00:50:50,720 --> 00:50:56,720
scipy environment and then once we have

00:50:54,480 --> 00:51:01,040
that environment activated

00:50:56,720 --> 00:51:03,920
we can go and type uh python

00:51:01,040 --> 00:51:08,400
to drop into a python interpreter so

00:51:03,920 --> 00:51:11,040
we're using python 3.8.5

00:51:08,400 --> 00:51:12,640
and then if i was to try to import

00:51:11,040 --> 00:51:13,920
something that i just installed i could

00:51:12,640 --> 00:51:16,960
do import numpy

00:51:13,920 --> 00:51:20,160
as mp and

00:51:16,960 --> 00:51:24,240
we're good to go or um

00:51:20,160 --> 00:51:26,000
from scipy import optimize

00:51:24,240 --> 00:51:28,000
which would be importing the

00:51:26,000 --> 00:51:33,599
optimization toolkit from

00:51:28,000 --> 00:51:37,839
scipy so we do that

00:51:33,599 --> 00:51:37,839
what else did we install

00:51:38,319 --> 00:51:43,839
to import the plotting live bear live

00:51:40,240 --> 00:51:48,160
layer the library you can have import

00:51:43,839 --> 00:51:48,160
map plot lib

00:51:48,559 --> 00:51:51,839
dot pi plot

00:51:52,160 --> 00:51:57,680
has plot that's plot

00:51:56,000 --> 00:52:00,880
so these are like the standard imports

00:51:57,680 --> 00:52:02,079
for for these kinds of libraries

00:52:00,880 --> 00:52:04,319
so that's just to show you that it

00:52:02,079 --> 00:52:08,800
actually worked as i i said that it did

00:52:04,319 --> 00:52:10,000
um and then we can exit

00:52:08,800 --> 00:52:12,640
and then again i'll talk about

00:52:10,000 --> 00:52:14,640
deactivation and activation in a minute

00:52:12,640 --> 00:52:17,119
okay so there is an exercise for you

00:52:14,640 --> 00:52:19,200
guys to work on on your own

00:52:17,119 --> 00:52:20,720
for the the next few minutes so i'm

00:52:19,200 --> 00:52:22,319
going to stop sharing my screen

00:52:20,720 --> 00:52:23,920
and then go back and start looking for

00:52:22,319 --> 00:52:25,839
questions that i can answer

00:52:23,920 --> 00:52:27,839
and in the meantime if you can take a

00:52:25,839 --> 00:52:31,280
look at the creating a new environment

00:52:27,839 --> 00:52:32,400
just walking you through again the steps

00:52:31,280 --> 00:52:33,280
that we've done to create these

00:52:32,400 --> 00:52:34,960
environments

00:52:33,280 --> 00:52:36,480
but creating a new environment called

00:52:34,960 --> 00:52:40,640
machine learning

00:52:36,480 --> 00:52:43,359
uh m that has python and then ipython

00:52:40,640 --> 00:52:45,359
matplotlib pandas and slidekit learn

00:52:43,359 --> 00:52:46,480
so if you would just go and install or

00:52:45,359 --> 00:52:48,800
create a new environment

00:52:46,480 --> 00:52:51,599
and see how you get on with that i'm

00:52:48,800 --> 00:52:52,880
going to stop sharing my screen

00:52:51,599 --> 00:52:56,319
and go back and see what kind of

00:52:52,880 --> 00:52:56,319
questions have accumulated

00:52:58,839 --> 00:53:03,760
um all right so i'm just going to scroll

00:53:01,040 --> 00:53:03,760
back up here

00:53:03,839 --> 00:53:07,839
and right

00:53:11,520 --> 00:53:15,920
so there's a question about i always use

00:53:14,079 --> 00:53:16,880
condo for packages installation i once

00:53:15,920 --> 00:53:18,800
had an issue

00:53:16,880 --> 00:53:20,240
that used zookeeper after i had

00:53:18,800 --> 00:53:22,400
installed it

00:53:20,240 --> 00:53:25,200
with conda and i solved it by

00:53:22,400 --> 00:53:25,200
deactivating

00:53:27,520 --> 00:53:34,480
so that is a good

00:53:30,839 --> 00:53:40,160
question zoo keeper

00:53:34,480 --> 00:53:40,160
is that's from like the

00:53:40,800 --> 00:53:44,240
is that the tool from the kind of the

00:53:43,119 --> 00:53:47,359
big data

00:53:44,240 --> 00:53:50,960
java ecosystem uh

00:53:47,359 --> 00:53:52,880
like hadoop spark that kind of thing

00:53:50,960 --> 00:53:54,640
zookeeper does something in that

00:53:52,880 --> 00:53:57,680
ecosystem

00:53:54,640 --> 00:54:00,960
i don't really know

00:53:57,680 --> 00:54:02,480
what cause did it's interesting that

00:54:00,960 --> 00:54:03,839
it's installed that you can install it

00:54:02,480 --> 00:54:05,440
via condo though

00:54:03,839 --> 00:54:07,839
um i'm not sure i would have thought to

00:54:05,440 --> 00:54:07,839
do that

00:54:08,839 --> 00:54:11,839
um

00:54:13,040 --> 00:54:17,520
yes so zeiden it is kind of like

00:54:15,359 --> 00:54:20,559
creating little separate containers

00:54:17,520 --> 00:54:20,960
um in that each directory can be thought

00:54:20,559 --> 00:54:26,160
of

00:54:20,960 --> 00:54:29,359
as a an it's an isolated container-like

00:54:26,160 --> 00:54:31,760
thing yeah so that's a good way to think

00:54:29,359 --> 00:54:31,760
about it

00:54:37,440 --> 00:54:43,599
right so uh joseph so if you installed

00:54:41,680 --> 00:54:45,280
conda and installed so many packages for

00:54:43,599 --> 00:54:47,119
me without giving me control to decide

00:54:45,280 --> 00:54:49,359
which libraries i wanted to install

00:54:47,119 --> 00:54:51,280
so you may have installed the anaconda

00:54:49,359 --> 00:54:54,960
python distribution which includes

00:54:51,280 --> 00:54:58,160
conda plus about 300 other packages

00:54:54,960 --> 00:54:58,640
and library so i i recommend that people

00:54:58,160 --> 00:55:00,799
install

00:54:58,640 --> 00:55:01,680
mini conda because that just brings

00:55:00,799 --> 00:55:05,280
conda

00:55:01,680 --> 00:55:07,359
plus its own python

00:55:05,280 --> 00:55:08,640
and that's pretty much it and so that

00:55:07,359 --> 00:55:10,559
way you have complete

00:55:08,640 --> 00:55:12,079
control over exactly what's installed

00:55:10,559 --> 00:55:14,319
and you only install the things that you

00:55:12,079 --> 00:55:14,319
need

00:55:16,960 --> 00:55:20,319
um so do different environments set up

00:55:19,440 --> 00:55:22,079
by conda

00:55:20,319 --> 00:55:24,640
in the same machine share the cpu

00:55:22,079 --> 00:55:26,640
resources like a docker container

00:55:24,640 --> 00:55:28,000
so yes all you're doing is creating a

00:55:26,640 --> 00:55:31,680
directory

00:55:28,000 --> 00:55:33,680
with with software installed in that

00:55:31,680 --> 00:55:34,960
directory and then conda basically makes

00:55:33,680 --> 00:55:36,720
sure that when you

00:55:34,960 --> 00:55:38,000
activate an environment as we'll talk

00:55:36,720 --> 00:55:41,280
about in a minute

00:55:38,000 --> 00:55:43,280
um it will use everything that you've

00:55:41,280 --> 00:55:45,040
installed inside that directory and not

00:55:43,280 --> 00:55:48,480
some other versions that might exist

00:55:45,040 --> 00:55:50,640
on your machine but everyone all

00:55:48,480 --> 00:55:52,240
all condo environments are going to be

00:55:50,640 --> 00:55:53,839
using and will be limited by the

00:55:52,240 --> 00:55:55,599
hardware resources

00:55:53,839 --> 00:55:57,920
um on the machine on which they're

00:55:55,599 --> 00:56:02,079
installed so cpu memory

00:55:57,920 --> 00:56:05,760
uh gpu availability things like that

00:56:02,079 --> 00:56:09,200
pip has two versions of 20.1.1

00:56:05,760 --> 00:56:13,119
for build pi 3 7 and build pi 3 8.

00:56:09,200 --> 00:56:14,640
so how how would it identify

00:56:13,119 --> 00:56:16,160
well it depends on what version of

00:56:14,640 --> 00:56:18,720
python that you specified so if you

00:56:16,160 --> 00:56:19,040
specified version python37 it would pick

00:56:18,720 --> 00:56:22,319
up

00:56:19,040 --> 00:56:25,359
pip 20.1.1 for python37

00:56:22,319 --> 00:56:28,280
if you didn't specify

00:56:25,359 --> 00:56:29,520
your python version it would pick up

00:56:28,280 --> 00:56:30,960
python38

00:56:29,520 --> 00:56:32,640
because that's the most recent version

00:56:30,960 --> 00:56:33,440
of python and then it would pick up the

00:56:32,640 --> 00:56:38,079
pip version

00:56:33,440 --> 00:56:42,839
for python38 if that makes sense

00:56:38,079 --> 00:56:46,799
uh-oh audio video issues

00:56:42,839 --> 00:56:48,960
um hopefully

00:56:46,799 --> 00:56:49,920
i say hopefully it's just issues on on

00:56:48,960 --> 00:56:52,240
your end and that

00:56:49,920 --> 00:56:54,079
there will be a good solid recording um

00:56:52,240 --> 00:56:55,680
of both audio and video that will be

00:56:54,079 --> 00:56:57,359
available later

00:56:55,680 --> 00:56:59,760
if you are having issues on your end but

00:56:57,359 --> 00:57:01,200
i have when i have had them i have

00:56:59,760 --> 00:57:03,280
refreshed and that has helped solve the

00:57:01,200 --> 00:57:04,880
problem

00:57:03,280 --> 00:57:06,319
okay what is the difference between pip

00:57:04,880 --> 00:57:09,200
and condom

00:57:06,319 --> 00:57:10,799
um okay so this is a important question

00:57:09,200 --> 00:57:14,559
we're going to come back

00:57:10,799 --> 00:57:18,880
to it um a little bit more later but

00:57:14,559 --> 00:57:21,920
um so pip is the default python package

00:57:18,880 --> 00:57:23,200
uh management solution it's part of the

00:57:21,920 --> 00:57:25,280
python

00:57:23,200 --> 00:57:26,960
standard library i believe and it's just

00:57:25,280 --> 00:57:31,119
kind of the default solution

00:57:26,960 --> 00:57:34,319
so pip doesn't do environment management

00:57:31,119 --> 00:57:35,359
so you have to use another another tool

00:57:34,319 --> 00:57:38,079
i believe it's called pip

00:57:35,359 --> 00:57:38,640
ins together with pip to get environment

00:57:38,079 --> 00:57:41,200
management

00:57:38,640 --> 00:57:43,280
and package management so that's one

00:57:41,200 --> 00:57:47,760
difference between pip and conda

00:57:43,280 --> 00:57:49,680
pip manages packages for only for python

00:57:47,760 --> 00:57:52,079
so for more complicated projects or

00:57:49,680 --> 00:57:54,160
workflows where you need

00:57:52,079 --> 00:57:55,599
not just python dependencies but

00:57:54,160 --> 00:57:57,440
dependencies from other languages

00:57:55,599 --> 00:58:00,880
possibly even java

00:57:57,440 --> 00:58:02,720
um or c c plus plus or fortran or cuda

00:58:00,880 --> 00:58:04,240
conda can handle those cases as well

00:58:02,720 --> 00:58:08,160
whereas pip

00:58:04,240 --> 00:58:09,280
pip cannot um however there are there

00:58:08,160 --> 00:58:12,400
are

00:58:09,280 --> 00:58:14,559
instances where conda

00:58:12,400 --> 00:58:16,559
will not be able to install a package by

00:58:14,559 --> 00:58:17,920
itself because that package has not been

00:58:16,559 --> 00:58:20,319
made available

00:58:17,920 --> 00:58:22,000
for distribution via conda in which case

00:58:20,319 --> 00:58:24,960
you can use conda to install

00:58:22,000 --> 00:58:26,079
pip and then pip to install those those

00:58:24,960 --> 00:58:28,240
dependencies

00:58:26,079 --> 00:58:30,160
that's why i always install pip in all

00:58:28,240 --> 00:58:31,680
of my condo environments because

00:58:30,160 --> 00:58:33,119
at some point there i might need a

00:58:31,680 --> 00:58:34,000
package for that environment that

00:58:33,119 --> 00:58:36,799
project

00:58:34,000 --> 00:58:39,440
that isn't available via conda and then

00:58:36,799 --> 00:58:42,559
i'll just use pip

00:58:39,440 --> 00:58:44,160
okay so that's the end of the chat um

00:58:42,559 --> 00:58:45,760
hopefully that's given you enough time

00:58:44,160 --> 00:58:50,640
to kind of go over that

00:58:45,760 --> 00:58:50,640
uh the creation of that environment

00:58:51,040 --> 00:58:56,799
so i'm going to start sharing my my

00:58:54,160 --> 00:58:56,799
screen again

00:58:56,880 --> 00:59:00,960
and we'll just kind of pick up where i

00:58:58,400 --> 00:59:00,960
left off

00:59:03,200 --> 00:59:06,160
working with environments

00:59:06,480 --> 00:59:12,240
okay so um

00:59:10,400 --> 00:59:13,599
all of the exercises that are in these

00:59:12,240 --> 00:59:15,359
materials have solution

00:59:13,599 --> 00:59:17,119
so in the interest of time i'm not going

00:59:15,359 --> 00:59:20,160
to go over this

00:59:17,119 --> 00:59:21,839
this exercise together but if you click

00:59:20,160 --> 00:59:25,040
the little

00:59:21,839 --> 00:59:27,599
this arrow it toggles the

00:59:25,040 --> 00:59:30,319
the solution and you can see again it's

00:59:27,599 --> 00:59:32,160
using that con to create command

00:59:30,319 --> 00:59:33,680
with a particular name and then i'm just

00:59:32,160 --> 00:59:34,799
listing off the things that i want to

00:59:33,680 --> 00:59:37,599
install

00:59:34,799 --> 00:59:38,240
and i can put particular versions to

00:59:37,599 --> 00:59:41,359
those things

00:59:38,240 --> 00:59:45,040
if i want particular versions okay

00:59:41,359 --> 00:59:47,599
so environment activation so

00:59:45,040 --> 00:59:49,040
um once you create environments of

00:59:47,599 --> 00:59:50,960
course you have to activate it and

00:59:49,040 --> 00:59:52,319
activating and deactivating is how we

00:59:50,960 --> 00:59:53,440
switch between different content

00:59:52,319 --> 00:59:54,720
environments that are installed on the

00:59:53,440 --> 00:59:57,520
same machine

00:59:54,720 --> 00:59:58,559
so activation does a couple of things so

00:59:57,520 --> 01:00:01,920
first off it adds

00:59:58,559 --> 01:00:04,559
entries to your system path variable

01:00:01,920 --> 01:00:05,520
for that environment so that your system

01:00:04,559 --> 01:00:08,319
path

01:00:05,520 --> 01:00:10,240
variable is how your operating system

01:00:08,319 --> 01:00:13,359
figures out

01:00:10,240 --> 01:00:14,000
how to load libraries and software

01:00:13,359 --> 01:00:17,280
that's installed

01:00:14,000 --> 01:00:18,960
on your computer it starts on the the

01:00:17,280 --> 01:00:20,640
first entry in the path and it kind of

01:00:18,960 --> 01:00:22,319
goes through the different

01:00:20,640 --> 01:00:24,559
directories which are entries in your

01:00:22,319 --> 01:00:27,520
path until it finds

01:00:24,559 --> 01:00:28,720
the executable that it's looking for or

01:00:27,520 --> 01:00:30,400
it throws an error

01:00:28,720 --> 01:00:32,640
if it can't find it in any of the

01:00:30,400 --> 01:00:34,000
entries in the pack so when you activate

01:00:32,640 --> 01:00:35,839
a content environment the

01:00:34,000 --> 01:00:37,280
absolute path to that content

01:00:35,839 --> 01:00:40,799
environment

01:00:37,280 --> 01:00:42,720
is prepended to your system path so

01:00:40,799 --> 01:00:43,920
your computer will always look in that

01:00:42,720 --> 01:00:46,960
environment first

01:00:43,920 --> 01:00:48,079
for any software and that that you want

01:00:46,960 --> 01:00:49,839
to use

01:00:48,079 --> 01:00:51,680
and then the second thing that

01:00:49,839 --> 01:00:53,200
acceleration does is it runs any

01:00:51,680 --> 01:00:56,480
activation scripts that

01:00:53,200 --> 01:00:58,240
the authors would have put um

01:00:56,480 --> 01:01:00,319
as part of the package installation

01:00:58,240 --> 01:01:03,119
process with conda

01:01:00,319 --> 01:01:04,400
this is mostly used i guess in

01:01:03,119 --> 01:01:06,240
scientific computing

01:01:04,400 --> 01:01:07,839
data science applications where certain

01:01:06,240 --> 01:01:10,880
environment variables need to be set

01:01:07,839 --> 01:01:12,559
or configured a certain way those

01:01:10,880 --> 01:01:14,400
scripts will be run which will configure

01:01:12,559 --> 01:01:18,960
the environment variables appropriately

01:01:14,400 --> 01:01:22,880
when you activate the environment okay

01:01:18,960 --> 01:01:24,000
so we can activate environments i'll go

01:01:22,880 --> 01:01:26,880
back over to jupiter lab

01:01:24,000 --> 01:01:28,640
now so we can activate environments by

01:01:26,880 --> 01:01:30,190
using the conda activate command

01:01:28,640 --> 01:01:32,319
so

01:01:30,190 --> 01:01:37,040
[Music]

01:01:32,319 --> 01:01:39,520
the conda

01:01:37,040 --> 01:01:40,880
activate and then you need to provide

01:01:39,520 --> 01:01:42,480
the name or the path

01:01:40,880 --> 01:01:44,960
to the environment that you want to

01:01:42,480 --> 01:01:47,599
activate so if we want to activate

01:01:44,960 --> 01:01:47,599
the basic

01:01:48,160 --> 01:01:53,599
scipy environment

01:01:51,280 --> 01:01:54,720
we just do conda activate and then basic

01:01:53,599 --> 01:01:57,280
scipy environment

01:01:54,720 --> 01:01:58,640
and hit enter and then notice that on

01:01:57,280 --> 01:02:00,799
the prompt

01:01:58,640 --> 01:02:02,000
you always get an indication or you will

01:02:00,799 --> 01:02:04,000
typically get

01:02:02,000 --> 01:02:06,000
an indication of which environment that

01:02:04,000 --> 01:02:07,680
you're using you'll have the name of the

01:02:06,000 --> 01:02:09,760
environment or the path to the

01:02:07,680 --> 01:02:13,119
environment will show up in

01:02:09,760 --> 01:02:14,799
uh in parentheses that's the start of

01:02:13,119 --> 01:02:17,760
the prompt

01:02:14,799 --> 01:02:19,599
okay so that's environment activation if

01:02:17,760 --> 01:02:23,599
you want to deactivate

01:02:19,599 --> 01:02:26,640
you just type conda deactivate

01:02:23,599 --> 01:02:27,839
okay and so now we've deactivated and

01:02:26,640 --> 01:02:29,200
now we're in this environment called

01:02:27,839 --> 01:02:29,760
notebook and you might think like well

01:02:29,200 --> 01:02:32,400
what is this

01:02:29,760 --> 01:02:32,880
notebook environment excuse me i didn't

01:02:32,400 --> 01:02:35,920
create

01:02:32,880 --> 01:02:36,640
this this environment yeah so that's

01:02:35,920 --> 01:02:40,000
what that's

01:02:36,640 --> 01:02:40,559
a default environment that is uh created

01:02:40,000 --> 01:02:44,000
by

01:02:40,559 --> 01:02:46,799
uh binder when we launched um

01:02:44,000 --> 01:02:48,079
when you launch this instance uh in the

01:02:46,799 --> 01:02:52,640
cloud it's just part of

01:02:48,079 --> 01:02:55,039
the uh the internals of the binder tool

01:02:52,640 --> 01:02:56,880
um we can deactivate that environment if

01:02:55,039 --> 01:03:01,039
we wanted by doing honda

01:02:56,880 --> 01:03:02,079
deactivate yup and so now we no longer

01:03:01,039 --> 01:03:05,200
have

01:03:02,079 --> 01:03:05,760
any environment activated and that's

01:03:05,200 --> 01:03:07,119
okay

01:03:05,760 --> 01:03:09,280
if we want to activate the base

01:03:07,119 --> 01:03:13,039
environment you can just type

01:03:09,280 --> 01:03:15,359
conda activate and you'll get

01:03:13,039 --> 01:03:17,520
the base environment so this is the base

01:03:15,359 --> 01:03:20,799
environment that i was talking about

01:03:17,520 --> 01:03:22,799
before now i'm just going to type clear

01:03:20,799 --> 01:03:24,480
just to get some more more space to work

01:03:22,799 --> 01:03:28,319
with

01:03:24,480 --> 01:03:29,280
um there's some activation deactivation

01:03:28,319 --> 01:03:31,440
environment

01:03:29,280 --> 01:03:32,319
exercises that are are there for you i'm

01:03:31,440 --> 01:03:33,839
going to skip those

01:03:32,319 --> 01:03:35,359
in the interest of time but you can play

01:03:33,839 --> 01:03:38,480
around with them as you

01:03:35,359 --> 01:03:41,359
as you wish okay so the

01:03:38,480 --> 01:03:42,960
environment that we've created thus far

01:03:41,359 --> 01:03:44,720
we've focused on

01:03:42,960 --> 01:03:46,160
kind of listing the things that we want

01:03:44,720 --> 01:03:47,520
to install when we create the

01:03:46,160 --> 01:03:49,200
environment itself

01:03:47,520 --> 01:03:51,280
but what if we i don't know what if we

01:03:49,200 --> 01:03:53,200
forget a package that we actually want

01:03:51,280 --> 01:03:56,240
how do we install a package that we

01:03:53,200 --> 01:03:58,079
into an existing environment um or what

01:03:56,240 --> 01:03:59,760
if we just don't know actually what what

01:03:58,079 --> 01:04:01,039
we want other than python and pip and

01:03:59,760 --> 01:04:02,079
then we're going to figure it out as we

01:04:01,039 --> 01:04:03,839
go along

01:04:02,079 --> 01:04:05,440
um so for that you need to know how to

01:04:03,839 --> 01:04:06,079
install package into an existing

01:04:05,440 --> 01:04:08,480
environment so

01:04:06,079 --> 01:04:10,839
let's see how we might do that so first

01:04:08,480 --> 01:04:14,640
we're going to

01:04:10,839 --> 01:04:18,640
um activate

01:04:14,640 --> 01:04:20,240
uh basic scipy environment

01:04:18,640 --> 01:04:22,400
so we're gonna activate our basic scipy

01:04:20,240 --> 01:04:25,599
environment um

01:04:22,400 --> 01:04:26,720
and now let's install another package

01:04:25,599 --> 01:04:29,839
in particular we're going to install in

01:04:26,720 --> 01:04:29,839
package called number

01:04:31,280 --> 01:04:36,000
so for those of you who might be

01:04:33,839 --> 01:04:40,240
unfamiliar with number

01:04:36,000 --> 01:04:42,720
so number is a really cool project

01:04:40,240 --> 01:04:43,440
for doing uh what's called just-in-time

01:04:42,720 --> 01:04:46,720
compiling

01:04:43,440 --> 01:04:49,599
of python so

01:04:46,720 --> 01:04:51,039
it takes pure python code and then

01:04:49,599 --> 01:04:54,079
compiles it down

01:04:51,039 --> 01:04:57,760
into very

01:04:54,079 --> 01:05:00,400
very efficient um

01:04:57,760 --> 01:05:02,640
optimized machine code and that

01:05:00,400 --> 01:05:04,240
optimized machine code is then used at

01:05:02,640 --> 01:05:05,760
runtime

01:05:04,240 --> 01:05:07,520
so there are many ways you can use it

01:05:05,760 --> 01:05:09,200
you can actually compile it to target

01:05:07,520 --> 01:05:12,400
different architectures

01:05:09,200 --> 01:05:16,400
you can compile stuff to run on gpus

01:05:12,400 --> 01:05:19,119
and other optimized cpus

01:05:16,400 --> 01:05:20,880
it is quickly becoming kind of one of

01:05:19,119 --> 01:05:23,440
another foundational tool

01:05:20,880 --> 01:05:25,200
in the scientific python and data

01:05:23,440 --> 01:05:28,160
science machine learning python

01:05:25,200 --> 01:05:29,200
ecosystems so you might want to install

01:05:28,160 --> 01:05:31,920
it at some point so

01:05:29,200 --> 01:05:32,960
if we wanted to install number into this

01:05:31,920 --> 01:05:35,119
environment we could do

01:05:32,960 --> 01:05:36,559
conda after we've activated the

01:05:35,119 --> 01:05:38,720
environment this is important you need

01:05:36,559 --> 01:05:41,119
to activate the environment first

01:05:38,720 --> 01:05:44,960
and then if you want to install a number

01:05:41,119 --> 01:05:44,960
you just do conda install number

01:05:46,079 --> 01:05:49,680
and this will go off and figure out okay

01:05:47,920 --> 01:05:51,280
you want to install number

01:05:49,680 --> 01:05:52,799
well what are the dependencies of number

01:05:51,280 --> 01:05:55,039
you need to go and find those and need

01:05:52,799 --> 01:05:57,440
to find

01:05:55,039 --> 01:05:59,039
versions of number as well as the

01:05:57,440 --> 01:06:00,799
dependencies of number that are

01:05:59,039 --> 01:06:02,720
consistent with the other packages that

01:06:00,799 --> 01:06:05,520
are already installed in the environment

01:06:02,720 --> 01:06:07,359
so that conda has to figure that out we

01:06:05,520 --> 01:06:10,640
just hit yes

01:06:07,359 --> 01:06:14,079
and um that we're done

01:06:10,640 --> 01:06:15,760
that didn't take long so now now we have

01:06:14,079 --> 01:06:18,799
number

01:06:15,760 --> 01:06:20,640
um what else so

01:06:18,799 --> 01:06:22,400
we could try another example so if we

01:06:20,640 --> 01:06:24,000
want to install scikit-learn so

01:06:22,400 --> 01:06:25,680
we didn't have scikit-learn before we

01:06:24,000 --> 01:06:30,240
could do

01:06:25,680 --> 01:06:31,280
conda install scikit-learn

01:06:30,240 --> 01:06:33,680
and this is going to install

01:06:31,280 --> 01:06:34,480
scikit-learn into our existing

01:06:33,680 --> 01:06:36,160
environment

01:06:34,480 --> 01:06:38,160
and if we wanted to again pick a

01:06:36,160 --> 01:06:40,960
particular version

01:06:38,160 --> 01:06:41,920
we could do 0.22 or something we just

01:06:40,960 --> 01:06:44,839
specify

01:06:41,920 --> 01:06:47,839
use equals and then the the version

01:06:44,839 --> 01:06:47,839
number

01:07:00,240 --> 01:07:03,760
and so you'll see that there's a warning

01:07:01,839 --> 01:07:06,480
here it says failed with initial frozen

01:07:03,760 --> 01:07:11,359
solve retrying with flexible solve

01:07:06,480 --> 01:07:13,839
now what that means is that when condo

01:07:11,359 --> 01:07:15,280
when you install a package into an

01:07:13,839 --> 01:07:19,920
existing environment

01:07:15,280 --> 01:07:22,240
conda will try to keep all of the

01:07:19,920 --> 01:07:23,119
existing packages frozen at their

01:07:22,240 --> 01:07:27,280
current version

01:07:23,119 --> 01:07:29,839
and simply try to install the version of

01:07:27,280 --> 01:07:30,960
learn that you want in this case into

01:07:29,839 --> 01:07:33,119
that environment

01:07:30,960 --> 01:07:34,880
however if that particular version of

01:07:33,119 --> 01:07:37,920
scikit-learn

01:07:34,880 --> 01:07:41,760
will requires maybe

01:07:37,920 --> 01:07:44,240
a a newer or slightly different version

01:07:41,760 --> 01:07:45,440
of a package

01:07:44,240 --> 01:07:48,079
than the one that you have in your

01:07:45,440 --> 01:07:50,720
environment um

01:07:48,079 --> 01:07:53,599
condo will then retry with what's called

01:07:50,720 --> 01:07:56,079
a flexible solve in which case it's

01:07:53,599 --> 01:07:57,680
updating existing packages in the

01:07:56,079 --> 01:07:59,119
environment so that you can then install

01:07:57,680 --> 01:08:00,640
scikit-learn

01:07:59,119 --> 01:08:02,720
apparently there was something in the

01:08:00,640 --> 01:08:03,760
environment that was needed a newer

01:08:02,720 --> 01:08:06,480
version

01:08:03,760 --> 01:08:08,839
um or maybe an older version to install

01:08:06,480 --> 01:08:11,359
scikit-learn

01:08:08,839 --> 01:08:13,359
0.22 but in the end

01:08:11,359 --> 01:08:24,719
we were able to get everything working

01:08:13,359 --> 01:08:26,960
and we're going to install

01:08:24,719 --> 01:08:26,960
okay

01:08:32,560 --> 01:08:35,679
okay that's it and so now we have

01:08:34,799 --> 01:08:39,279
scikit-learn

01:08:35,679 --> 01:08:41,199
is is installed

01:08:39,279 --> 01:08:42,319
i so now there's a couple of more

01:08:41,199 --> 01:08:45,359
exercises here

01:08:42,319 --> 01:08:47,359
on um installing a package into a

01:08:45,359 --> 01:08:50,839
specific environment so there's a

01:08:47,359 --> 01:08:53,839
a really cool package called

01:08:50,839 --> 01:08:53,839
dask

01:09:00,719 --> 01:09:08,319
which is for parallelizing and scaling

01:09:04,640 --> 01:09:10,560
up on one machine or out to many

01:09:08,319 --> 01:09:12,719
machines

01:09:10,560 --> 01:09:15,199
data science and machine learning or

01:09:12,719 --> 01:09:18,839
scientific computing

01:09:15,199 --> 01:09:20,159
workflows data analytics and things like

01:09:18,839 --> 01:09:22,480
this

01:09:20,159 --> 01:09:23,679
really really cool project that i use

01:09:22,480 --> 01:09:27,120
quite often in my

01:09:23,679 --> 01:09:29,040
in my work at kaust um so that first

01:09:27,120 --> 01:09:30,319
exercise is about installing das

01:09:29,040 --> 01:09:31,799
into the machine learning environment

01:09:30,319 --> 01:09:34,799
that you created in the previous

01:09:31,799 --> 01:09:38,799
exercise um

01:09:34,799 --> 01:09:40,880
and then um there's another exercise

01:09:38,799 --> 01:09:42,960
which is installing packages into a

01:09:40,880 --> 01:09:45,279
condo environment using pip

01:09:42,960 --> 01:09:45,279
and

01:09:46,239 --> 01:09:51,440
and that one we'll do together so i'll

01:09:49,359 --> 01:09:52,319
show you a particular specific example

01:09:51,440 --> 01:09:55,760
of that

01:09:52,319 --> 01:09:58,239
um and

01:09:55,760 --> 01:09:58,800
in fact what i'm going to do now is i'm

01:09:58,239 --> 01:10:01,280
going to stop

01:09:58,800 --> 01:10:02,800
sharing my screen and then i'm going to

01:10:01,280 --> 01:10:03,760
go back and see if there's any questions

01:10:02,800 --> 01:10:05,199
in the chat

01:10:03,760 --> 01:10:07,520
and i'll give you some time to work on

01:10:05,199 --> 01:10:10,960
those two

01:10:07,520 --> 01:10:14,560
these two exercises here

01:10:10,960 --> 01:10:17,920
so installing dask and then

01:10:14,560 --> 01:10:20,480
installing a package using tip inside of

01:10:17,920 --> 01:10:24,239
a content environment

01:10:20,480 --> 01:10:28,159
okay and

01:10:24,239 --> 01:10:31,840
just a moment i

01:10:28,159 --> 01:10:31,840
as i'm going back

01:10:32,239 --> 01:10:35,040
i realize i need to create a machine

01:10:34,000 --> 01:10:37,280
learning environment so i'm going to

01:10:35,040 --> 01:10:44,960
create that really quickly

01:10:37,280 --> 01:10:48,239
and then i will

01:10:44,960 --> 01:10:51,520
and then i will come and do q a

01:10:48,239 --> 01:10:51,520
while you guys are working on this

01:10:56,840 --> 01:10:59,840
exercise

01:11:04,239 --> 01:11:13,840
i'm talking

01:11:24,840 --> 01:11:27,840
okay

01:11:30,560 --> 01:11:43,280
okay so

01:11:40,640 --> 01:11:44,719
okay uh godlifer can we have access with

01:11:43,280 --> 01:11:46,719
the materials used in this session so

01:11:44,719 --> 01:11:49,760
yes so the materials

01:11:46,719 --> 01:11:54,480
uh are online at the links provided and

01:11:49,760 --> 01:11:54,480
always available um maybe

01:11:55,040 --> 01:12:00,640
maybe the link to the lesson materials

01:11:56,960 --> 01:12:00,640
can be pinned in the chat

01:12:01,440 --> 01:12:05,679
together with the link to binder the

01:12:03,760 --> 01:12:06,960
binder service is also always available

01:12:05,679 --> 01:12:08,480
so as long as you have an internet

01:12:06,960 --> 01:12:09,520
connection if you don't want to install

01:12:08,480 --> 01:12:12,560
anything

01:12:09,520 --> 01:12:14,480
you just want to come back and and use

01:12:12,560 --> 01:12:15,679
the the binder service you can use that

01:12:14,480 --> 01:12:19,199
it's free

01:12:15,679 --> 01:12:19,199
and and available as well

01:12:21,600 --> 01:12:25,120
joseph great question so when you use

01:12:23,440 --> 01:12:27,120
pip does it install into the virtual

01:12:25,120 --> 01:12:29,360
environment you created with conda

01:12:27,120 --> 01:12:29,360
uh

01:12:31,840 --> 01:12:35,280
and the answer is partially given in

01:12:33,840 --> 01:12:38,640
that follow-up comment by

01:12:35,280 --> 01:12:41,040
uh and go um

01:12:38,640 --> 01:12:42,800
it depends so the reason that i always

01:12:41,040 --> 01:12:43,920
install pip into every virtual

01:12:42,800 --> 01:12:46,560
environment that i have

01:12:43,920 --> 01:12:47,840
is because that way i know that when i

01:12:46,560 --> 01:12:50,239
use pip

01:12:47,840 --> 01:12:52,080
it will use the pip that is installed in

01:12:50,239 --> 01:12:52,719
that virtual environment to install

01:12:52,080 --> 01:12:55,760
packages

01:12:52,719 --> 01:12:58,640
into that same virtual environment

01:12:55,760 --> 01:12:59,840
this is a bit tricky because many

01:12:58,640 --> 01:13:03,120
operating systems

01:12:59,840 --> 01:13:05,920
already have python and pip installed

01:13:03,120 --> 01:13:06,560
and so if you didn't install pip into

01:13:05,920 --> 01:13:10,320
your virtu

01:13:06,560 --> 01:13:12,719
into your condo environment um

01:13:10,320 --> 01:13:13,679
but pip already existed unbeknownst to

01:13:12,719 --> 01:13:16,640
you

01:13:13,679 --> 01:13:18,080
on your your computer already and you

01:13:16,640 --> 01:13:21,440
activated a con environment

01:13:18,080 --> 01:13:24,719
and started typing tip install that

01:13:21,440 --> 01:13:27,120
pip would be the system pip which might

01:13:24,719 --> 01:13:28,320
install your packages not into the

01:13:27,120 --> 01:13:29,840
virtual environment the content

01:13:28,320 --> 01:13:33,679
environment that you intend

01:13:29,840 --> 01:13:36,960
but somewhere else entirely and

01:13:33,679 --> 01:13:37,440
that still might might work in some

01:13:36,960 --> 01:13:40,080
sense

01:13:37,440 --> 01:13:40,560
um but probably not and if it doesn't

01:13:40,080 --> 01:13:43,679
it's going to

01:13:40,560 --> 01:13:45,679
give weird error messages so definitely

01:13:43,679 --> 01:13:46,480
always want to install pip in your condo

01:13:45,679 --> 01:13:49,280
environment

01:13:46,480 --> 01:13:51,520
and we'll see an example of that in the

01:13:49,280 --> 01:13:51,520
second

01:13:58,840 --> 01:14:03,120
exercise

01:14:00,159 --> 01:14:04,239
and vince also had a another way to use

01:14:03,120 --> 01:14:07,600
pip

01:14:04,239 --> 01:14:08,480
by first using the python to call the

01:14:07,600 --> 01:14:10,239
module pip

01:14:08,480 --> 01:14:12,480
and install a particular library and so

01:14:10,239 --> 01:14:12,480
that

01:14:12,719 --> 01:14:17,520
that is one way if you're not sure to

01:14:14,880 --> 01:14:21,199
guarantee that you will get

01:14:17,520 --> 01:14:29,120
the right pip um because you will use

01:14:21,199 --> 01:14:30,560
the python from the environment itself

01:14:29,120 --> 01:14:32,480
do you run das on a cluster on a

01:14:30,560 --> 01:14:35,920
day-to-day basis

01:14:32,480 --> 01:14:38,239
so we have at cals we have

01:14:35,920 --> 01:14:40,400
a what we call ibax which is our

01:14:38,239 --> 01:14:42,560
commodity cluster

01:14:40,400 --> 01:14:44,400
and it has it's very similar in terms of

01:14:42,560 --> 01:14:47,520
its hardware specs that you'd find

01:14:44,400 --> 01:14:51,679
um on aws or google um

01:14:47,520 --> 01:14:52,960
obviously not in volume but in uh

01:14:51,679 --> 01:14:55,360
in terms of the individual node

01:14:52,960 --> 01:14:57,040
characteristics um and we do have users

01:14:55,360 --> 01:15:02,080
that run to ask

01:14:57,040 --> 01:15:02,080
on that cluster as part of their jobs um

01:15:03,360 --> 01:15:07,920
jean can conda update packages installed

01:15:06,560 --> 01:15:11,679
with pip

01:15:07,920 --> 01:15:15,600
um so yes

01:15:11,679 --> 01:15:18,239
um yeah so once you've uh

01:15:15,600 --> 01:15:19,920
once you have installed a library via

01:15:18,239 --> 01:15:22,719
pip these are all good questions

01:15:19,920 --> 01:15:24,239
by the way um condo will have a record

01:15:22,719 --> 01:15:26,000
of what's installed in that environment

01:15:24,239 --> 01:15:27,440
and then if you go and use conda to

01:15:26,000 --> 01:15:28,880
update a package

01:15:27,440 --> 01:15:30,719
it will know what version has been

01:15:28,880 --> 01:15:34,159
installed by pip and it will update it

01:15:30,719 --> 01:15:34,159
to some more recent version if

01:15:34,880 --> 01:15:41,360
if need be okay cool so that's the end

01:15:39,199 --> 01:15:42,480
of the the questions i have there

01:15:41,360 --> 01:15:45,440
so now what i'm going to do is i'm going

01:15:42,480 --> 01:15:45,440
to start sharing again

01:15:46,239 --> 01:15:52,880
uh share screen

01:15:49,440 --> 01:15:55,840
and i'm going to go back to

01:15:52,880 --> 01:15:56,400
the lecture notes and i'm going to skip

01:15:55,840 --> 01:16:01,120
this

01:15:56,400 --> 01:16:04,840
um well

01:16:01,120 --> 01:16:07,360
i won't scale we'll just do both of them

01:16:04,840 --> 01:16:11,520
so uh i need to do

01:16:07,360 --> 01:16:11,520
a conda deactivate

01:16:11,840 --> 01:16:19,520
and then a conda activate

01:16:14,880 --> 01:16:23,440
machine learning environment

01:16:19,520 --> 01:16:24,640
okay and now that i have

01:16:23,440 --> 01:16:26,400
activated my machine learning

01:16:24,640 --> 01:16:27,280
environment i wanted to use condit to

01:16:26,400 --> 01:16:35,840
install das

01:16:27,280 --> 01:16:35,840
so i'll just do conda install dask

01:16:39,840 --> 01:16:42,159
okay

01:16:43,120 --> 01:16:49,840
and you'll see das has quite a lot of

01:16:46,320 --> 01:16:49,840
a lot of dependencies

01:16:51,440 --> 01:16:54,800
um okay so that's all done and so now i

01:16:54,080 --> 01:17:00,320
want to use

01:16:54,800 --> 01:17:00,320
pip to install

01:17:01,600 --> 01:17:08,719
yeah um to install

01:17:05,120 --> 01:17:12,159
a package called combo i think

01:17:08,719 --> 01:17:15,199
combo is a um i have a link

01:17:12,159 --> 01:17:16,640
to combo there's a link to combo in the

01:17:15,199 --> 01:17:19,679
lecture notes

01:17:16,640 --> 01:17:21,840
combo is a really cool little package

01:17:19,679 --> 01:17:23,360
for solving what's called ensemble

01:17:21,840 --> 01:17:25,280
learning problems so

01:17:23,360 --> 01:17:26,560
it's a way of approaching machine

01:17:25,280 --> 01:17:28,159
learning

01:17:26,560 --> 01:17:30,000
a machine learning problem where instead

01:17:28,159 --> 01:17:32,320
of using one model you might

01:17:30,000 --> 01:17:33,199
use i don't know six or twelve different

01:17:32,320 --> 01:17:34,960
models

01:17:33,199 --> 01:17:36,640
and then average the predictions of

01:17:34,960 --> 01:17:39,120
those several

01:17:36,640 --> 01:17:40,159
models together to obtain like a meta

01:17:39,120 --> 01:17:41,440
model which

01:17:40,159 --> 01:17:43,440
might be better than any of the

01:17:41,440 --> 01:17:45,280
individual models so that's called

01:17:43,440 --> 01:17:47,120
creating an ensemble of models and using

01:17:45,280 --> 01:17:48,560
the ensemble to make prediction

01:17:47,120 --> 01:17:50,320
combo is a really cool tool for doing

01:17:48,560 --> 01:17:53,679
that for helping make that easily

01:17:50,320 --> 01:17:55,600
more done more easily using scikit-learn

01:17:53,679 --> 01:17:56,800
but it's not available via condo or at

01:17:55,600 --> 01:18:00,159
least it wasn't when

01:17:56,800 --> 01:18:01,199
i checked most recently so if you want

01:18:00,159 --> 01:18:03,679
to see

01:18:01,199 --> 01:18:06,080
so we're going to install that via pip i

01:18:03,679 --> 01:18:09,280
ran this command which

01:18:06,080 --> 01:18:13,679
pip and which is a linux or unix command

01:18:09,280 --> 01:18:15,679
for telling you like where the

01:18:13,679 --> 01:18:17,040
where's the particular executable in

01:18:15,679 --> 01:18:19,679
this case pip

01:18:17,040 --> 01:18:20,960
and you can see that the path to the pip

01:18:19,679 --> 01:18:22,800
executable

01:18:20,960 --> 01:18:24,560
is actually goes into the machine

01:18:22,800 --> 01:18:25,440
learning environment and into the bin

01:18:24,560 --> 01:18:27,199
directory

01:18:25,440 --> 01:18:28,719
so that's how you can convince yourself

01:18:27,199 --> 01:18:30,159
that the pip that you're going to use

01:18:28,719 --> 01:18:33,440
when you type pip

01:18:30,159 --> 01:18:35,199
install is actually in the active

01:18:33,440 --> 01:18:41,840
environment

01:18:35,199 --> 01:18:41,840
so if we type pip install combo

01:18:42,560 --> 01:18:45,679
and so you'll see in the logs so these

01:18:44,880 --> 01:18:47,440
are all the pip

01:18:45,679 --> 01:18:50,320
pip logs and it had to install a few

01:18:47,440 --> 01:18:52,159
things um

01:18:50,320 --> 01:18:54,159
in particular how to install number and

01:18:52,159 --> 01:18:56,159
numbers dependencies because number

01:18:54,159 --> 01:18:57,840
although we installed it we did install

01:18:56,159 --> 01:18:59,360
number but if you remember we installed

01:18:57,840 --> 01:19:01,360
it into the

01:18:59,360 --> 01:19:02,480
basic scipy environment not into the

01:19:01,360 --> 01:19:05,679
machine learning environment

01:19:02,480 --> 01:19:06,560
so pip has now installed uh number for

01:19:05,679 --> 01:19:09,840
us

01:19:06,560 --> 01:19:09,840
and and then combo

01:19:10,560 --> 01:19:16,400
okay um so now

01:19:14,159 --> 01:19:17,600
uh there's another command which we need

01:19:16,400 --> 01:19:19,120
to learn about well

01:19:17,600 --> 01:19:21,040
how do we know what's been installed

01:19:19,120 --> 01:19:24,400
inside of a condo environment

01:19:21,040 --> 01:19:24,880
there's a command called well first we

01:19:24,400 --> 01:19:27,840
can run

01:19:24,880 --> 01:19:29,600
conda dash dash help to see what other

01:19:27,840 --> 01:19:31,600
commands are available

01:19:29,600 --> 01:19:34,840
and then here's an interesting one so

01:19:31,600 --> 01:19:36,159
list list packages in a conda

01:19:34,840 --> 01:19:40,000
environment

01:19:36,159 --> 01:19:43,840
so if we run conda list

01:19:40,000 --> 01:19:45,840
it's going to list packages by default

01:19:43,840 --> 01:19:47,840
the package is installed in the current

01:19:45,840 --> 01:19:49,600
active environment

01:19:47,840 --> 01:19:51,199
so if i run condo list now i'm going to

01:19:49,600 --> 01:19:53,679
get a complete specification

01:19:51,199 --> 01:19:54,719
of everything that's installed in this

01:19:53,679 --> 01:19:56,880
environment

01:19:54,719 --> 01:19:59,199
in particular what did we install so we

01:19:56,880 --> 01:20:00,719
install where's combo

01:19:59,199 --> 01:20:02,400
so they're in alphabetical order so you

01:20:00,719 --> 01:20:06,000
can go up here and find

01:20:02,400 --> 01:20:06,639
combo and you can see that version 0.1.1

01:20:06,000 --> 01:20:08,960
was

01:20:06,639 --> 01:20:10,719
installed these numbers in the third

01:20:08,960 --> 01:20:13,520
column are called the build numbers

01:20:10,719 --> 01:20:13,520
we don't need to

01:20:14,239 --> 01:20:18,000
bother with those at present and then in

01:20:16,480 --> 01:20:21,280
the last column you can see like

01:20:18,000 --> 01:20:23,280
where was this installed from and we can

01:20:21,280 --> 01:20:24,800
see that it was installed from pi pi so

01:20:23,280 --> 01:20:26,560
everything that you install from pip

01:20:24,800 --> 01:20:29,120
will come from the python package index

01:20:26,560 --> 01:20:29,120
pi pi

01:20:29,679 --> 01:20:38,159
okay so there you go

01:20:33,840 --> 01:20:38,159
um okay

01:20:38,400 --> 01:20:42,719
so the next thing that i want to cover

01:20:40,639 --> 01:20:45,840
is um

01:20:42,719 --> 01:20:46,320
so we've seen how to activate or how to

01:20:45,840 --> 01:20:48,320
create

01:20:46,320 --> 01:20:50,560
environments we've seen how to activate

01:20:48,320 --> 01:20:54,000
and deactivate environments

01:20:50,560 --> 01:20:56,080
um now i want to talk about where

01:20:54,000 --> 01:20:57,679
condo environments live and how you can

01:20:56,080 --> 01:21:01,840
change the location if you want to

01:20:57,679 --> 01:21:01,840
install them somewhere else

01:21:04,560 --> 01:21:10,000
right so how do i specif or how do i

01:21:08,159 --> 01:21:12,840
find out where cond environments live

01:21:10,000 --> 01:21:15,760
okay so if you install

01:21:12,840 --> 01:21:21,760
um if you

01:21:15,760 --> 01:21:24,159
install miniconda or anaconda locally

01:21:21,760 --> 01:21:26,800
then your conda environments are going

01:21:24,159 --> 01:21:26,800
to live

01:21:27,679 --> 01:21:32,159
in a specific subdirectory inside your

01:21:30,560 --> 01:21:34,800
home directory

01:21:32,159 --> 01:21:35,840
so if you install anaconda or anaconda

01:21:34,800 --> 01:21:38,719
or miniconda

01:21:35,840 --> 01:21:40,239
it will always install in user home or

01:21:38,719 --> 01:21:41,520
typically we'll install and use your

01:21:40,239 --> 01:21:43,840
home by default

01:21:41,520 --> 01:21:45,120
so like so something like flash users

01:21:43,840 --> 01:21:46,639
your username

01:21:45,120 --> 01:21:48,400
and then it will be miniconda or

01:21:46,639 --> 01:21:50,239
anaconda3 and then

01:21:48,400 --> 01:21:52,239
within that there's a directory called

01:21:50,239 --> 01:21:54,159
envs

01:21:52,239 --> 01:21:57,600
and within that directory is where all

01:21:54,159 --> 01:21:59,199
your content environments will go

01:21:57,600 --> 01:22:00,719
and we've seen that a little bit in the

01:21:59,199 --> 01:22:03,440
package plans as we've been creating

01:22:00,719 --> 01:22:03,440
these environments

01:22:03,520 --> 01:22:07,440
in the package plans they always tell

01:22:05,679 --> 01:22:09,520
you the absolute path

01:22:07,440 --> 01:22:12,239
to the environment to the directory

01:22:09,520 --> 01:22:13,600
where the environment will be created

01:22:12,239 --> 01:22:15,520
it's a little bit different just because

01:22:13,600 --> 01:22:17,440
the way that they've been conda has been

01:22:15,520 --> 01:22:21,120
installed

01:22:17,440 --> 01:22:22,639
in the docker image that is used to

01:22:21,120 --> 01:22:24,239
build the containers that we're running

01:22:22,639 --> 01:22:26,400
in at present in the cloud

01:22:24,239 --> 01:22:28,000
to fill in a different location so it's

01:22:26,400 --> 01:22:31,679
just slash srb

01:22:28,000 --> 01:22:32,560
conduct tmvs so for example if we were

01:22:31,679 --> 01:22:36,320
to

01:22:32,560 --> 01:22:37,760
run the command lf which lists

01:22:36,320 --> 01:22:39,760
the unix command for listing the

01:22:37,760 --> 01:22:44,000
contents of the directory

01:22:39,760 --> 01:22:48,480
in uh srv slash

01:22:44,000 --> 01:22:50,320
condo slash env

01:22:48,480 --> 01:22:51,760
you'll see here here all of these

01:22:50,320 --> 01:22:53,360
environments are created so here's our

01:22:51,760 --> 01:22:56,400
python 3

01:22:53,360 --> 01:23:01,040
python 36

01:22:56,400 --> 01:23:01,040
notebook was um

01:23:01,199 --> 01:23:05,120
notebook was one that was created by the

01:23:02,800 --> 01:23:07,600
binder team and then basic scipy

01:23:05,120 --> 01:23:09,199
and machine learning and python c7 and

01:23:07,600 --> 01:23:10,480
so that's that's where they live

01:23:09,199 --> 01:23:13,360
so what if you want to change the

01:23:10,480 --> 01:23:17,040
location so how would you do that

01:23:13,360 --> 01:23:20,480
um well one way

01:23:17,040 --> 01:23:24,880
that we can do that would be

01:23:20,480 --> 01:23:26,159
um when we create the environment you

01:23:24,880 --> 01:23:29,679
can pass a path

01:23:26,159 --> 01:23:35,520
to a directory rather than a name so

01:23:29,679 --> 01:23:38,639
uh i'm first i'm going to go over here

01:23:35,520 --> 01:23:40,880
and so inside the home directory if we

01:23:38,639 --> 01:23:40,880
run

01:23:42,000 --> 01:23:47,920
ls you'll see inside this directory

01:23:46,159 --> 01:23:49,360
there are two directories binder and

01:23:47,920 --> 01:23:51,760
introduction to conda

01:23:49,360 --> 01:23:54,800
so i'm just going to cd into

01:23:51,760 --> 01:23:58,159
introduction to conda

01:23:54,800 --> 01:24:00,320
um so that we're in

01:23:58,159 --> 01:24:02,560
this introduction to conjug directory

01:24:00,320 --> 01:24:06,400
just to keep everything neat uh

01:24:02,560 --> 01:24:10,080
neat and tidy so now if we create

01:24:06,400 --> 01:24:13,520
uh if we did conda

01:24:10,080 --> 01:24:14,159
create um and now instead of passing a

01:24:13,520 --> 01:24:15,920
name

01:24:14,159 --> 01:24:17,760
we're gonna pass a prefix which is

01:24:15,920 --> 01:24:19,679
basically a

01:24:17,760 --> 01:24:21,679
path to a directory where we want to

01:24:19,679 --> 01:24:25,440
create the environment

01:24:21,679 --> 01:24:25,440
and so we're going to pass as our prefix

01:24:25,840 --> 01:24:34,239
dot slash env um

01:24:31,280 --> 01:24:36,000
dot in unix is shorthand notation for

01:24:34,239 --> 01:24:37,760
the current working directory

01:24:36,000 --> 01:24:40,400
so another way we could do it would be

01:24:37,760 --> 01:24:45,600
to use an environment variable

01:24:40,400 --> 01:24:47,600
pwd for the print working directory

01:24:45,600 --> 01:24:48,800
um and then we're going to list off some

01:24:47,600 --> 01:24:53,760
packages so let's do

01:24:48,800 --> 01:24:59,840
ipython map plot lib

01:24:53,760 --> 01:24:59,840
pandas python

01:25:01,199 --> 01:25:07,120
that's good enough okay

01:25:04,239 --> 01:25:07,120
and now we hit enter

01:25:08,320 --> 01:25:10,400
so now we're just creating an

01:25:09,360 --> 01:25:12,480
environment again it's going through the

01:25:10,400 --> 01:25:16,159
same mechanics as before

01:25:12,480 --> 01:25:19,280
but now if we go here and we look

01:25:16,159 --> 01:25:21,520
at the environment location

01:25:19,280 --> 01:25:24,480
we're actually creating this environment

01:25:21,520 --> 01:25:27,840
not in the default location but in a

01:25:24,480 --> 01:25:29,760
directory called env that is inside the

01:25:27,840 --> 01:25:31,280
current working directory

01:25:29,760 --> 01:25:33,040
and as we're going to see so this is

01:25:31,280 --> 01:25:34,639
going to be a best practice that i would

01:25:33,040 --> 01:25:36,800
encourage you to follow so

01:25:34,639 --> 01:25:38,560
if you have a new project that project

01:25:36,800 --> 01:25:39,440
is going to exist in its own directory

01:25:38,560 --> 01:25:41,520
somewhere

01:25:39,440 --> 01:25:43,520
and then within that direct the project

01:25:41,520 --> 01:25:45,040
directory you can create your conda

01:25:43,520 --> 01:25:48,800
environment

01:25:45,040 --> 01:25:48,800
in a directory called enb

01:25:48,880 --> 01:25:55,280
i always do that so that means i

01:25:52,639 --> 01:25:57,040
basically run the same condo create

01:25:55,280 --> 01:25:57,840
command over and over and over condo

01:25:57,040 --> 01:26:01,360
create

01:25:57,840 --> 01:26:05,280
dash dash prefix dot slash env

01:26:01,360 --> 01:26:05,280
then the stuff that i want to install

01:26:05,440 --> 01:26:09,600
okay so that's that's that now if we

01:26:07,840 --> 01:26:12,800
want to activate the environment

01:26:09,600 --> 01:26:15,920
instead we don't have a name

01:26:12,800 --> 01:26:19,679
um we have to pass

01:26:15,920 --> 01:26:23,600
the path so here's the path

01:26:19,679 --> 01:26:27,679
so we can just type

01:26:23,600 --> 01:26:29,600
dot slash env if we want

01:26:27,679 --> 01:26:32,480
yeah and so now our prompt is like

01:26:29,600 --> 01:26:32,480
massively long

01:26:34,840 --> 01:26:42,400
and make it a little bit less long

01:26:39,440 --> 01:26:44,639
but there you go so now we have

01:26:42,400 --> 01:26:47,840
environment that's active

01:26:44,639 --> 01:26:47,840
this super long prompt

01:26:48,159 --> 01:26:53,920
and then uh well now we've activated

01:26:51,920 --> 01:26:58,400
this environment

01:26:53,920 --> 01:27:01,440
okay so let's uh deactivate so conda

01:26:58,400 --> 01:27:04,159
deactivate okay so that's how

01:27:01,440 --> 01:27:05,120
um that's how you can change the

01:27:04,159 --> 01:27:09,360
location

01:27:05,120 --> 01:27:11,440
um just a note on naming conventions for

01:27:09,360 --> 01:27:15,120
your

01:27:11,440 --> 01:27:18,480
for the prefix of your environment um

01:27:15,120 --> 01:27:20,639
i always use slash enb as the

01:27:18,480 --> 01:27:24,159
subdirectory of my

01:27:20,639 --> 01:27:25,679
of my um project for my condo

01:27:24,159 --> 01:27:28,159
environment and the reason

01:27:25,679 --> 01:27:30,080
is that um it's the same convention

01:27:28,159 --> 01:27:33,760
that's used by other tools like pip

01:27:30,080 --> 01:27:35,760
m for vm and it will make sure that the

01:27:33,760 --> 01:27:36,639
directory is properly ignored if you're

01:27:35,760 --> 01:27:38,800
using git

01:27:36,639 --> 01:27:39,840
and dot git ignore in a dot get ignore

01:27:38,800 --> 01:27:42,639
file

01:27:39,840 --> 01:27:44,000
for your version control which is really

01:27:42,639 --> 01:27:47,199
handy because we don't really want to

01:27:44,000 --> 01:27:50,960
version control this directory at all

01:27:47,199 --> 01:27:51,760
as we'll we'll see in a later episode we

01:27:50,960 --> 01:27:55,199
can create

01:27:51,760 --> 01:27:56,560
a file that has all of the packages that

01:27:55,199 --> 01:27:57,840
are installed in our environment and

01:27:56,560 --> 01:27:59,760
then whenever we want we can just

01:27:57,840 --> 01:28:02,880
recreate the environment from that file

01:27:59,760 --> 01:28:04,719
and then we can version control the file

01:28:02,880 --> 01:28:08,880
so we'll talk about the details of how

01:28:04,719 --> 01:28:08,880
to do that in a in a future episode

01:28:09,199 --> 01:28:14,800
okay so there is an another exercise for

01:28:13,360 --> 01:28:16,880
you to follow along with but i'm

01:28:14,800 --> 01:28:19,199
very conscious this time so i'm going to

01:28:16,880 --> 01:28:22,880
skip it and kind of leave it

01:28:19,199 --> 01:28:22,880
for you to to go over as homework

01:28:24,080 --> 01:28:28,639
there's some other stuff here about how

01:28:25,520 --> 01:28:29,520
to how to configure conda so that your

01:28:28,639 --> 01:28:31,600
prompt

01:28:29,520 --> 01:28:33,360
does not contain the name of the active

01:28:31,600 --> 01:28:36,080
environment if you want to do that

01:28:33,360 --> 01:28:38,960
um it's there for you to look over i'm

01:28:36,080 --> 01:28:38,960
not going to go through it here

01:28:40,560 --> 01:28:46,960
we did activating by path um you can

01:28:44,159 --> 01:28:48,639
use conda uh conda to manage

01:28:46,960 --> 01:28:53,199
environments for our projects

01:28:48,639 --> 01:28:54,880
um although given that we're a python

01:28:53,199 --> 01:28:56,239
centric group i'm not gonna go through

01:28:54,880 --> 01:28:58,159
that exercise

01:28:56,239 --> 01:28:59,360
as well but again like you can use conda

01:28:58,159 --> 01:29:00,960
to manage

01:28:59,360 --> 01:29:03,360
packages for other other kinds of

01:29:00,960 --> 01:29:06,719
software okay

01:29:03,360 --> 01:29:08,480
listing conda environments so

01:29:06,719 --> 01:29:10,080
we've created a lot of environments you

01:29:08,480 --> 01:29:11,199
know how can we list what environments

01:29:10,080 --> 01:29:16,960
are available

01:29:11,199 --> 01:29:16,960
so we can do uh conda environment list

01:29:17,920 --> 01:29:22,880
and that is a command that lists all of

01:29:20,080 --> 01:29:25,679
the environments that have been created

01:29:22,880 --> 01:29:27,600
where they live and then this star

01:29:25,679 --> 01:29:27,920
indicates the environment that's active

01:29:27,600 --> 01:29:29,520
so

01:29:27,920 --> 01:29:31,760
currently the base environment is the

01:29:29,520 --> 01:29:32,960
active environment which is consistent

01:29:31,760 --> 01:29:36,320
with

01:29:32,960 --> 01:29:36,320
base being here

01:29:36,840 --> 01:29:41,520
okay um

01:29:44,560 --> 01:29:49,920
okay so deleting environment

01:29:48,000 --> 01:29:52,480
so we have all these environments here

01:29:49,920 --> 01:29:53,199
so what happens if we we no longer need

01:29:52,480 --> 01:29:56,800
an environment

01:29:53,199 --> 01:29:58,320
or we just want to delete it or we we

01:29:56,800 --> 01:29:59,600
you know we created the environment we

01:29:58,320 --> 01:30:01,199
don't feel like we did it right we just

01:29:59,600 --> 01:30:01,920
want to delete it and start over how can

01:30:01,199 --> 01:30:06,400
we do that

01:30:01,920 --> 01:30:09,040
well there's a command called conda

01:30:06,400 --> 01:30:09,440
can look at the help menu again so in

01:30:09,040 --> 01:30:12,800
here

01:30:09,440 --> 01:30:14,320
in the help menu so here's a remove

01:30:12,800 --> 01:30:16,560
remove a list of packages from a

01:30:14,320 --> 01:30:20,639
specified condo environment

01:30:16,560 --> 01:30:24,239
so we're going to use conda

01:30:20,639 --> 01:30:26,800
remove to remove an entire

01:30:24,239 --> 01:30:26,800
environment

01:30:27,520 --> 01:30:32,800
so now i've forgotten all the

01:30:30,159 --> 01:30:36,320
environments that are available

01:30:32,800 --> 01:30:39,679
so let's look at that again so let's

01:30:36,320 --> 01:30:43,120
remove um

01:30:39,679 --> 01:30:46,480
the python

01:30:43,120 --> 01:30:49,679
27 environment

01:30:46,480 --> 01:30:51,920
and the dash dash all me is

01:30:49,679 --> 01:30:53,360
how you indicate that you want to remove

01:30:51,920 --> 01:31:02,719
the entire environment

01:30:53,360 --> 01:31:06,880
so um there would be a typo there

01:31:02,719 --> 01:31:09,440
uh python27

01:31:06,880 --> 01:31:09,440
tmv

01:31:11,360 --> 01:31:19,920
deactivate and run condo remove

01:31:16,159 --> 01:31:24,960
again ah there is a typo

01:31:19,920 --> 01:31:24,960
so what happened here so um

01:31:25,120 --> 01:31:31,920
i forgot to put dash dash

01:31:28,159 --> 01:31:34,159
name in front of python27emv

01:31:31,920 --> 01:31:37,440
this interpreted the command kind of

01:31:34,159 --> 01:31:39,280
removed interpreted this python27-env as

01:31:37,440 --> 01:31:40,560
a package that existed in the base

01:31:39,280 --> 01:31:42,840
environment

01:31:40,560 --> 01:31:44,960
and when it couldn't find it it threw an

01:31:42,840 --> 01:31:47,840
error

01:31:44,960 --> 01:31:50,159
so if we go in here and type dash dash

01:31:47,840 --> 01:31:50,159
name

01:31:52,400 --> 01:31:57,920
it gives you a package plan so

01:31:56,080 --> 01:31:59,440
environment location so you can go

01:31:57,920 --> 01:32:00,960
through here and basically confirm that

01:31:59,440 --> 01:32:03,600
yes this is what you want to do and so

01:32:00,960 --> 01:32:03,600
we hit yes

01:32:05,600 --> 01:32:09,120
and now we're done and i believe now if

01:32:07,920 --> 01:32:12,239
we run

01:32:09,120 --> 01:32:13,600
conda emv list

01:32:12,239 --> 01:32:16,400
yeah as you can see now our

01:32:13,600 --> 01:32:16,400
environment's gone

01:32:17,679 --> 01:32:23,440
right okay and

01:32:21,840 --> 01:32:24,880
there's an exercise about deleting the

01:32:23,440 --> 01:32:27,920
basic side environment that

01:32:24,880 --> 01:32:29,199
if you want to want to look at that you

01:32:27,920 --> 01:32:31,920
can do that

01:32:29,199 --> 01:32:33,120
right okay so now we've covered we've

01:32:31,920 --> 01:32:36,320
spent about an hour

01:32:33,120 --> 01:32:40,000
covering um pretty much

01:32:36,320 --> 01:32:43,679
all of the basics enough for you to um

01:32:40,000 --> 01:32:46,080
get up and moving with uh

01:32:43,679 --> 01:32:48,320
with python or with condo rather so we

01:32:46,080 --> 01:32:50,400
covered how to

01:32:48,320 --> 01:32:51,360
create and remove new environments using

01:32:50,400 --> 01:32:54,080
condo create

01:32:51,360 --> 01:32:56,080
con to remove commands we activated and

01:32:54,080 --> 01:32:56,400
deactivated using combat activate or

01:32:56,080 --> 01:32:59,600
comp

01:32:56,400 --> 01:33:01,360
deactivate we installed packages into an

01:32:59,600 --> 01:33:02,480
existing environment using call to

01:33:01,360 --> 01:33:04,480
install

01:33:02,480 --> 01:33:05,600
we saw an example of how did you also do

01:33:04,480 --> 01:33:07,440
that using pip

01:33:05,600 --> 01:33:09,520
using pip install and we talked about

01:33:07,440 --> 01:33:10,880
the importance of making sure that

01:33:09,520 --> 01:33:13,440
you're using

01:33:10,880 --> 01:33:14,960
pips that's installed that makes the

01:33:13,440 --> 01:33:17,520
importance of installing pip

01:33:14,960 --> 01:33:18,320
into every condo environment so that you

01:33:17,520 --> 01:33:20,159
can be certain

01:33:18,320 --> 01:33:22,639
that the pip that you're using with pip

01:33:20,159 --> 01:33:25,600
install is the right pip

01:33:22,639 --> 01:33:27,199
the one that's in the environment i

01:33:25,600 --> 01:33:28,719
encourage you to install each

01:33:27,199 --> 01:33:30,560
environment as a subdirectory

01:33:28,719 --> 01:33:33,120
inside your corresponding project

01:33:30,560 --> 01:33:33,120
directory

01:33:33,440 --> 01:33:39,679
and then i showed you how to use

01:33:37,199 --> 01:33:39,679
conda

01:33:40,719 --> 01:33:44,800
emv list to list environments in their

01:33:43,840 --> 01:33:46,960
locations and then

01:33:44,800 --> 01:33:48,719
conda list is a command that you can run

01:33:46,960 --> 01:33:49,679
to list the packages installed in the

01:33:48,719 --> 01:33:52,800
current

01:33:49,679 --> 01:33:56,000
in an environment right

01:33:52,800 --> 01:33:59,920
okay so i'm going to just

01:33:56,000 --> 01:34:03,120
stop sharing

01:33:59,920 --> 01:34:06,000
or maybe i have stopped sharing

01:34:03,120 --> 01:34:07,120
yes i guess i did stop sharing okay um

01:34:06,000 --> 01:34:11,280
just gonna check

01:34:07,120 --> 01:34:11,280
the uh the chat

01:34:12,000 --> 01:34:17,360
and then i will uh go back and we'll

01:34:15,199 --> 01:34:18,719
finish up the tutorial with the last

01:34:17,360 --> 01:34:20,960
episode that we'll have time to cover

01:34:18,719 --> 01:34:20,960
today

01:34:30,000 --> 01:34:34,000
how do you export your libraries to be

01:34:31,679 --> 01:34:35,280
used in another project when using conda

01:34:34,000 --> 01:34:37,760
excellent question we're going to talk

01:34:35,280 --> 01:34:40,080
about that in the next episode

01:34:37,760 --> 01:34:40,080
um

01:34:41,119 --> 01:34:45,520
bruno has pit freeze question mark so

01:34:43,440 --> 01:34:50,000
there is a command called conda export

01:34:45,520 --> 01:34:50,000
which is very similar to pip freeze

01:34:54,639 --> 01:34:58,480
and what pip export is going to do is

01:34:56,560 --> 01:35:00,560
going sorry not pip export what conda

01:34:58,480 --> 01:35:02,480
export is going to do is going to export

01:35:00,560 --> 01:35:04,760
something called an environment file

01:35:02,480 --> 01:35:07,760
which is the conda equivalent of a pip

01:35:04,760 --> 01:35:07,760
requirements.txt

01:35:08,800 --> 01:35:15,840
okay cool so i'm going to start sharing

01:35:12,840 --> 01:35:15,840
again

01:35:18,239 --> 01:35:22,159
no i don't seem to be sharing

01:35:26,080 --> 01:35:29,840
all right now we're sharing again there

01:35:28,159 --> 01:35:32,159
we go okay

01:35:29,840 --> 01:35:32,880
um right so now we're going to move on

01:35:32,159 --> 01:35:36,000
to

01:35:32,880 --> 01:35:39,199
sharing environment and

01:35:36,000 --> 01:35:41,280
so we've got about 20 minutes um

01:35:39,199 --> 01:35:42,560
to cover this so it's going to be a bit

01:35:41,280 --> 01:35:44,639
speedy

01:35:42,560 --> 01:35:46,960
to make sure that i that i finish on

01:35:44,639 --> 01:35:46,960
time

01:35:47,360 --> 01:35:51,520
but this episode is about sharing

01:35:50,080 --> 01:35:53,040
environments and working with

01:35:51,520 --> 01:35:54,560
importantly working with environment

01:35:53,040 --> 01:35:56,400
files because the environment file is

01:35:54,560 --> 01:35:57,679
going to be the mechanism

01:35:56,400 --> 01:35:59,920
by which you will share your

01:35:57,679 --> 01:36:01,679
environments with either

01:35:59,920 --> 01:36:04,239
your peers colleagues or research

01:36:01,679 --> 01:36:06,400
collaborators or you can think of

01:36:04,239 --> 01:36:07,920
sharing environments with yourself where

01:36:06,400 --> 01:36:09,920
if you have a local

01:36:07,920 --> 01:36:12,320
laptop or workstation and then maybe you

01:36:09,920 --> 01:36:15,520
have a vm running in the cloud

01:36:12,320 --> 01:36:17,840
or you have a remote cluster you need to

01:36:15,520 --> 01:36:19,840
share your condo environment on one

01:36:17,840 --> 01:36:22,000
machine with yourself

01:36:19,840 --> 01:36:23,280
as a user of some other machine and

01:36:22,000 --> 01:36:26,239
environment files are going to be the

01:36:23,280 --> 01:36:26,239
mechanism to do this

01:36:26,400 --> 01:36:29,840
so we're going to focus on

01:36:31,280 --> 01:36:34,400
kind of motivating why you would want to

01:36:33,119 --> 01:36:36,239
share environment files

01:36:34,400 --> 01:36:38,080
how to create them and how to use them

01:36:36,239 --> 01:36:39,760
and then i will probably wrap up

01:36:38,080 --> 01:36:41,440
today by showing you how to create a

01:36:39,760 --> 01:36:43,920
custom kernel for your content

01:36:41,440 --> 01:36:46,080
environment inside of jupyter lab

01:36:43,920 --> 01:36:47,119
so that you can launch notebooks and

01:36:46,080 --> 01:36:50,480
launch

01:36:47,119 --> 01:36:54,239
python ipython consoles um that are

01:36:50,480 --> 01:36:54,239
attached to a specific environment

01:36:54,639 --> 01:36:57,760
um and we're going to see how to create

01:36:56,719 --> 01:37:00,960
environment files

01:36:57,760 --> 01:37:04,080
okay so

01:37:00,960 --> 01:37:06,239
as i said environment files are

01:37:04,080 --> 01:37:08,239
the mechanism through which you will

01:37:06,239 --> 01:37:09,520
share like the complete specification of

01:37:08,239 --> 01:37:11,199
a condo environment with

01:37:09,520 --> 01:37:12,960
others or with yourself on another

01:37:11,199 --> 01:37:16,159
machine so

01:37:12,960 --> 01:37:19,199
creating environment files is done

01:37:16,159 --> 01:37:22,480
by writing a yaml file

01:37:19,199 --> 01:37:25,679
so yaml is short for yaml

01:37:22,480 --> 01:37:28,719
markup language it's a very

01:37:25,679 --> 01:37:32,239
common kind of structured text format

01:37:28,719 --> 01:37:34,880
for writing configuration files

01:37:32,239 --> 01:37:37,119
it's used by docker it's used by

01:37:34,880 --> 01:37:39,040
kubernetes it's used by

01:37:37,119 --> 01:37:42,719
many many different frameworks for

01:37:39,040 --> 01:37:46,840
specifying configuration files and

01:37:42,719 --> 01:37:49,280
conda uses it for writing environment

01:37:46,840 --> 01:37:52,239
files

01:37:49,280 --> 01:37:53,600
i always create an environment file for

01:37:52,239 --> 01:37:56,239
every

01:37:53,600 --> 01:37:58,080
project and every content environment

01:37:56,239 --> 01:37:59,920
because that way i always have this file

01:37:58,080 --> 01:38:01,840
which i can version control

01:37:59,920 --> 01:38:03,840
and i can share it with my colleagues or

01:38:01,840 --> 01:38:04,239
with myself on another machine and i can

01:38:03,840 --> 01:38:07,119
use

01:38:04,239 --> 01:38:09,360
this file to recreate a content

01:38:07,119 --> 01:38:13,119
environment wherever i want

01:38:09,360 --> 01:38:14,480
okay by convention

01:38:13,119 --> 01:38:16,320
the environment file is called

01:38:14,480 --> 01:38:17,840
environment.yaml you can call it

01:38:16,320 --> 01:38:21,280
whatever you want

01:38:17,840 --> 01:38:22,880
but if you call it something else then

01:38:21,280 --> 01:38:26,159
you have to pass the dash

01:38:22,880 --> 01:38:31,119
file option to the conda emv create

01:38:26,159 --> 01:38:32,880
command as we'll see in a minute

01:38:31,119 --> 01:38:35,040
so all right so let's take a look at an

01:38:32,880 --> 01:38:35,760
environment file so here is an example

01:38:35,040 --> 01:38:37,679
of what a

01:38:35,760 --> 01:38:39,199
simple environment file would look like

01:38:37,679 --> 01:38:43,920
it has a name uh

01:38:39,199 --> 01:38:46,880
machine learning ends has some

01:38:43,920 --> 01:38:47,920
dependencies um here's a dependent so

01:38:46,880 --> 01:38:50,560
this is basically just

01:38:47,920 --> 01:38:52,880
recreating using an environment file the

01:38:50,560 --> 01:38:56,960
machine learning environment

01:38:52,880 --> 01:39:00,239
okay here's another example so

01:38:56,960 --> 01:39:03,440
if you wanted to create

01:39:00,239 --> 01:39:04,159
um environment by name you can give it a

01:39:03,440 --> 01:39:05,440
name

01:39:04,159 --> 01:39:07,280
if you don't if you're going to create

01:39:05,440 --> 01:39:08,320
the environment and put the environment

01:39:07,280 --> 01:39:11,199
in a different location

01:39:08,320 --> 01:39:12,880
using prefix then which is what i

01:39:11,199 --> 01:39:15,920
typically do

01:39:12,880 --> 01:39:18,480
i just put a name of no but environment

01:39:15,920 --> 01:39:19,679
file always has to start with a name

01:39:18,480 --> 01:39:21,840
so if you're not going to give it a name

01:39:19,679 --> 01:39:23,280
you can just put null

01:39:21,840 --> 01:39:24,800
and then you list the dependencies if

01:39:23,280 --> 01:39:25,520
you want to be explicit about version

01:39:24,800 --> 01:39:26,800
numbers

01:39:25,520 --> 01:39:30,159
then you can just list the version

01:39:26,800 --> 01:39:30,159
numbers that you want

01:39:31,119 --> 01:39:39,040
as well right okay so you should always

01:39:35,679 --> 01:39:42,480
version control always version control

01:39:39,040 --> 01:39:42,480
your environment.yml file

01:39:42,880 --> 01:39:47,360
this is this is what i mentioned earlier

01:39:45,040 --> 01:39:48,719
you never version control the emv

01:39:47,360 --> 01:39:50,159
directory

01:39:48,719 --> 01:39:52,560
which could be quite big it could have

01:39:50,159 --> 01:39:54,080
gigabytes of stuff of software installed

01:39:52,560 --> 01:39:55,679
into that emv directory

01:39:54,080 --> 01:39:58,480
but as long as you have an environment

01:39:55,679 --> 01:39:59,840
file and you version control environment

01:39:58,480 --> 01:40:03,280
file

01:39:59,840 --> 01:40:05,600
then create that amv directory whenever

01:40:03,280 --> 01:40:08,719
you want

01:40:05,600 --> 01:40:12,000
okay so let's see an example of how

01:40:08,719 --> 01:40:16,000
how we might do this so

01:40:12,000 --> 01:40:18,639
i am going to go over to jupiter lab

01:40:16,000 --> 01:40:20,000
and i'm going to go over here to the

01:40:18,639 --> 01:40:23,840
file manager

01:40:20,000 --> 01:40:27,040
and so inside of introduction to conda

01:40:23,840 --> 01:40:28,000
so this is that emv environment that we

01:40:27,040 --> 01:40:30,000
created earlier

01:40:28,000 --> 01:40:32,000
i'm going to create a new directory i'm

01:40:30,000 --> 01:40:35,360
going to call it

01:40:32,000 --> 01:40:38,480
my project

01:40:35,360 --> 01:40:41,520
dir and then inside

01:40:38,480 --> 01:40:41,520
my projector

01:40:42,000 --> 01:40:48,159
i am going to create

01:40:45,520 --> 01:40:48,159
a new

01:40:48,880 --> 01:40:51,840
text file

01:40:52,639 --> 01:40:58,960
and then i will rename

01:40:56,800 --> 01:41:01,119
so you can right click on the file and

01:40:58,960 --> 01:41:05,440
then tap rename

01:41:01,119 --> 01:41:09,520
and i'm going to call this environment

01:41:05,440 --> 01:41:09,520
dot yml for environment.yml

01:41:09,679 --> 01:41:19,840
and um now i'm going to go back

01:41:13,199 --> 01:41:19,840
and just copy just copy and paste

01:41:21,199 --> 01:41:24,960
now notice that here on jupiter lab the

01:41:23,280 --> 01:41:26,639
jupiter lab nose

01:41:24,960 --> 01:41:29,119
uh has nice syntax highlighting and

01:41:26,639 --> 01:41:30,880
things like that for yaml files

01:41:29,119 --> 01:41:32,080
so it's done some nice kind of syntax

01:41:30,880 --> 01:41:34,880
highlighting and formatting so we're

01:41:32,080 --> 01:41:34,880
going to save this

01:41:36,800 --> 01:41:40,800
which you can do with like a command or

01:41:38,320 --> 01:41:44,000
ctrl s or just go file

01:41:40,800 --> 01:41:48,000
save yml file okay

01:41:44,000 --> 01:41:49,280
so now get rid of that and so inside our

01:41:48,000 --> 01:41:52,239
introduction to conda

01:41:49,280 --> 01:41:54,000
we now have this my projector so i'm

01:41:52,239 --> 01:41:57,119
going to change directory

01:41:54,000 --> 01:42:01,600
into my projector

01:41:57,119 --> 01:42:04,560
and now um i'm just going to type clear

01:42:01,600 --> 01:42:07,520
so you can get some more more real

01:42:04,560 --> 01:42:09,520
estate to work with

01:42:07,520 --> 01:42:11,600
um and so now we're going to run the

01:42:09,520 --> 01:42:14,719
command to create a conda environment

01:42:11,600 --> 01:42:18,639
from this yaml file

01:42:14,719 --> 01:42:23,520
and the command is conda

01:42:18,639 --> 01:42:27,040
env create

01:42:23,520 --> 01:42:30,080
and now i'm going to use a slash to

01:42:27,040 --> 01:42:31,520
do multi-line commands so that it wraps

01:42:30,080 --> 01:42:33,760
a little better

01:42:31,520 --> 01:42:33,760
um

01:42:35,040 --> 01:42:38,880
prefix so i'm going to create the

01:42:37,760 --> 01:42:41,360
environment in

01:42:38,880 --> 01:42:42,000
as a subdirectory within my project

01:42:41,360 --> 01:42:43,679
directory so

01:42:42,000 --> 01:42:47,360
this is following the best practice that

01:42:43,679 --> 01:42:47,360
i am encouraging to follow

01:42:54,000 --> 01:42:57,679
and then i i don't need to pass the dash

01:42:56,239 --> 01:42:59,199
dash file because i followed the

01:42:57,679 --> 01:43:01,380
convention by

01:42:59,199 --> 01:43:02,560
um naming the environment

01:43:01,380 --> 01:43:04,719
[Music]

01:43:02,560 --> 01:43:06,080
yaml file environment.yaml but i'm just

01:43:04,719 --> 01:43:09,440
showing you how

01:43:06,080 --> 01:43:09,440
to do that um

01:43:09,600 --> 01:43:14,560
and then hit enter and now

01:43:12,639 --> 01:43:15,920
at this point conda is just going to be

01:43:14,560 --> 01:43:18,400
doing the exact same thing that it's

01:43:15,920 --> 01:43:21,760
been doing when we created environments

01:43:18,400 --> 01:43:23,360
using the the basic condo create command

01:43:21,760 --> 01:43:25,360
it's just reading all of the

01:43:23,360 --> 01:43:26,159
specifications for the packages that we

01:43:25,360 --> 01:43:29,760
want to install

01:43:26,159 --> 01:43:29,760
from the environment.yml file

01:43:30,239 --> 01:43:39,840
which we specified here

01:43:41,520 --> 01:43:45,600
right okay so while this is going i'll

01:43:44,400 --> 01:43:48,880
talk about the next little

01:43:45,600 --> 01:43:50,080
tip um which is beware the conda emv

01:43:48,880 --> 01:43:54,080
export command

01:43:50,080 --> 01:43:56,320
so uh the conda emv export command

01:43:54,080 --> 01:43:57,760
is the kind of like the pip freeze

01:43:56,320 --> 01:44:00,800
command in that it

01:43:57,760 --> 01:44:03,920
um it exports

01:44:00,800 --> 01:44:07,440
um an environment file for

01:44:03,920 --> 01:44:09,199
the currently active environment the

01:44:07,440 --> 01:44:11,119
the only kind of but there are some

01:44:09,199 --> 01:44:11,840
caveats so like this is a great command

01:44:11,119 --> 01:44:15,760
to use

01:44:11,840 --> 01:44:17,199
if you um if you and your research peers

01:44:15,760 --> 01:44:19,040
or colleagues have a common

01:44:17,199 --> 01:44:20,719
operating system so like you're all

01:44:19,040 --> 01:44:22,159
using windows you're all using linux

01:44:20,719 --> 01:44:26,480
you're all using mac

01:44:22,159 --> 01:44:28,159
or you um on your laptop or workstation

01:44:26,480 --> 01:44:29,040
have the same operating system that is

01:44:28,159 --> 01:44:32,239
running

01:44:29,040 --> 01:44:33,760
on whatever remote cluster or on the

01:44:32,239 --> 01:44:35,760
public cloud

01:44:33,760 --> 01:44:37,520
which is probably going to be linux in

01:44:35,760 --> 01:44:39,679
those contacts

01:44:37,520 --> 01:44:41,600
and i'll explain the reason for that in

01:44:39,679 --> 01:44:43,679
just a moment

01:44:41,600 --> 01:44:48,000
so now we've created this environment if

01:44:43,679 --> 01:44:51,760
we do conda activate

01:44:48,000 --> 01:44:53,440
emv dot slash emv

01:44:51,760 --> 01:44:54,800
to activate the environment that we just

01:44:53,440 --> 01:44:58,719
created

01:44:54,800 --> 01:44:58,719
and now we were to write condyle list

01:44:59,280 --> 01:45:05,840
so it's just listing off all of the

01:45:02,719 --> 01:45:07,360
the packages that we installed yeah so

01:45:05,840 --> 01:45:08,560
that's just the commands that we learned

01:45:07,360 --> 01:45:10,320
before

01:45:08,560 --> 01:45:11,920
but now we've created this environment

01:45:10,320 --> 01:45:15,920
from this dot this

01:45:11,920 --> 01:45:20,719
environment.yaml file if we were to run

01:45:15,920 --> 01:45:20,719
conda emv export

01:45:22,800 --> 01:45:28,480
what comes back in the terminal is now

01:45:25,040 --> 01:45:28,480
actually a properly formatted

01:45:29,040 --> 01:45:33,600
uh condi a comma environment file so it

01:45:32,320 --> 01:45:34,960
has channels we're not going to talk

01:45:33,600 --> 01:45:37,520
about channels today

01:45:34,960 --> 01:45:38,880
except i'll say that channels are a

01:45:37,520 --> 01:45:42,960
prioritized list

01:45:38,880 --> 01:45:46,320
of urls where condo will look to find

01:45:42,960 --> 01:45:47,520
existing packages and then our

01:45:46,320 --> 01:45:49,360
dependencies and so

01:45:47,520 --> 01:45:51,840
but look how specific these dependencies

01:45:49,360 --> 01:45:54,080
are it's like not only the package name

01:45:51,840 --> 01:45:55,760
but the version number and this thing

01:45:54,080 --> 01:45:59,119
called the build number which

01:45:55,760 --> 01:46:00,639
we saw when we ran the conda emv

01:45:59,119 --> 01:46:03,840
or the conda lift command so these are

01:46:00,639 --> 01:46:06,880
the build numbers here this third column

01:46:03,840 --> 01:46:09,760
you can specify specific builds if you

01:46:06,880 --> 01:46:11,760
if you want to you typically don't need

01:46:09,760 --> 01:46:15,040
to

01:46:11,760 --> 01:46:16,560
and then and that's it if there was

01:46:15,040 --> 01:46:20,239
stuff that had been installed via pip

01:46:16,560 --> 01:46:24,320
it would show up as pip installed here

01:46:20,239 --> 01:46:24,320
in the environment.yml file

01:46:25,119 --> 01:46:30,639
however included in this list

01:46:28,480 --> 01:46:31,679
will be things that are operating system

01:46:30,639 --> 01:46:33,480
specific

01:46:31,679 --> 01:46:35,360
so if i was to take this

01:46:33,480 --> 01:46:37,360
environment.yaml file and give it to a

01:46:35,360 --> 01:46:40,480
windows user or a mac user

01:46:37,360 --> 01:46:41,679
it would fail but condo would fail to

01:46:40,480 --> 01:46:44,320
create an environment

01:46:41,679 --> 01:46:45,280
from this because it's too specific it's

01:46:44,320 --> 01:46:48,719
basically pinned

01:46:45,280 --> 01:46:51,760
things these build numbers are operating

01:46:48,719 --> 01:46:53,280
system specific and they might not

01:46:51,760 --> 01:46:55,920
or they might be operating system

01:46:53,280 --> 01:46:57,360
specific and it might fail

01:46:55,920 --> 01:46:59,440
so it's just something to be aware of

01:46:57,360 --> 01:47:04,000
now you can actually

01:46:59,440 --> 01:47:04,000
pass the no builds option

01:47:04,080 --> 01:47:09,520
to get a version of the

01:47:07,679 --> 01:47:11,520
environment.yml file that doesn't have

01:47:09,520 --> 01:47:14,719
the builds numbers

01:47:11,520 --> 01:47:17,920
and this is better and has a

01:47:14,719 --> 01:47:20,800
is more likely to work across operating

01:47:17,920 --> 01:47:23,360
systems but there still might be stuff

01:47:20,800 --> 01:47:24,000
like these things for example which

01:47:23,360 --> 01:47:27,760
might be

01:47:24,000 --> 01:47:30,880
linux specific that will not exist

01:47:27,760 --> 01:47:34,320
for windows and mac so

01:47:30,880 --> 01:47:36,320
the conda emv export command is great

01:47:34,320 --> 01:47:37,440
if you're sharing within a common

01:47:36,320 --> 01:47:39,199
operating system

01:47:37,440 --> 01:47:42,800
it will give you exactly what was

01:47:39,199 --> 01:47:44,560
involved but in general

01:47:42,800 --> 01:47:46,880
it has it just has some caveats that you

01:47:44,560 --> 01:47:50,080
need to be aware of and this is why

01:47:46,880 --> 01:47:51,760
i tend to write my environment.yml files

01:47:50,080 --> 01:47:54,400
at the start of the project and maintain

01:47:51,760 --> 01:47:59,119
them myself rather than depend on

01:47:54,400 --> 01:47:59,119
the conda emv export um

01:47:59,600 --> 01:48:04,480
i mostly use the conda emv export when

01:48:02,320 --> 01:48:07,840
i'm working with users

01:48:04,480 --> 01:48:08,960
at kaust where we're all using the same

01:48:07,840 --> 01:48:11,360
machine

01:48:08,960 --> 01:48:13,119
and so the operating system is common

01:48:11,360 --> 01:48:15,199
amongst us and in which case if they

01:48:13,119 --> 01:48:16,639
if users have problems i will ask them

01:48:15,199 --> 01:48:19,360
to run this conda emv

01:48:16,639 --> 01:48:20,320
export command so i can see exactly what

01:48:19,360 --> 01:48:22,159
their

01:48:20,320 --> 01:48:24,880
what they've installed and what their

01:48:22,159 --> 01:48:27,199
version numbers and things are

01:48:24,880 --> 01:48:27,199
okay

01:48:29,600 --> 01:48:36,320
so there's an exercise on

01:48:33,760 --> 01:48:38,800
creating a new environment from an

01:48:36,320 --> 01:48:41,199
environment.yaml file

01:48:38,800 --> 01:48:41,199
and

01:48:43,600 --> 01:48:47,280
so you can go ahead and take a look at

01:48:44,960 --> 01:48:48,719
that that exercise i'll stop sharing and

01:48:47,280 --> 01:48:50,159
go back and see

01:48:48,719 --> 01:48:52,239
usually at this point there are a fair

01:48:50,159 --> 01:48:56,320
number of questions about

01:48:52,239 --> 01:48:56,320
environment.yaml file so let's see what

01:48:59,119 --> 01:49:01,840
what comes up

01:49:05,600 --> 01:49:09,040
um i guess pit freeze will work once you

01:49:07,760 --> 01:49:12,400
have pip installed

01:49:09,040 --> 01:49:14,719
um i actually am not sure

01:49:12,400 --> 01:49:15,599
if it would because i well conda is

01:49:14,719 --> 01:49:19,199
aware of

01:49:15,599 --> 01:49:21,119
pip i'm not sure that pip is aware of

01:49:19,199 --> 01:49:22,480
everything that conda will have

01:49:21,119 --> 01:49:25,520
installed

01:49:22,480 --> 01:49:28,800
um i guess we could test that

01:49:25,520 --> 01:49:30,560
uh we could test the hypothesis so if

01:49:28,800 --> 01:49:32,960
you run it if you ran the pip freeze

01:49:30,560 --> 01:49:32,960
command

01:49:40,840 --> 01:49:43,840
um

01:49:44,719 --> 01:49:46,960
so

01:49:47,760 --> 01:49:51,599
when i guess i need to share my screen

01:49:50,320 --> 01:49:54,639
quickly again so if i

01:49:51,599 --> 01:49:54,639
share my screen now

01:49:55,440 --> 01:50:02,880
um so i ran the pip freeze command

01:49:59,119 --> 01:50:04,960
um and you get back a lot but not

01:50:02,880 --> 01:50:07,440
entirely everything so if you compare

01:50:04,960 --> 01:50:09,920
the list of stuff that's here

01:50:07,440 --> 01:50:10,639
at the output of pip freeze with

01:50:09,920 --> 01:50:13,920
everything

01:50:10,639 --> 01:50:14,960
that is here there's a lot more stuff

01:50:13,920 --> 01:50:16,880
that's here so

01:50:14,960 --> 01:50:18,000
basically i it looks like what pip is

01:50:16,880 --> 01:50:22,400
able to do

01:50:18,000 --> 01:50:22,400
is it can detect things that are

01:50:22,960 --> 01:50:27,440
that it can detect some stuff but it's

01:50:25,199 --> 01:50:29,040
clearly not everything

01:50:27,440 --> 01:50:31,199
so definitely don't rely on the pip

01:50:29,040 --> 01:50:33,520
freeze command to give you

01:50:31,199 --> 01:50:35,920
uh a complete listing of everything

01:50:33,520 --> 01:50:39,840
that's that's there

01:50:35,920 --> 01:50:39,840
all right let's see what else

01:50:40,639 --> 01:50:43,040
um

01:50:47,440 --> 01:50:53,280
okay is there a more general alternative

01:50:50,320 --> 01:50:54,000
that produces os agnostic dependencies

01:50:53,280 --> 01:50:57,040
only

01:50:54,000 --> 01:51:00,800
so uh that's a great question

01:50:57,040 --> 01:51:02,320
to my knowledge they're to my knowledge

01:51:00,800 --> 01:51:05,520
there isn't

01:51:02,320 --> 01:51:07,599
um and this is why i

01:51:05,520 --> 01:51:09,119
kind of create my own environment.yaml

01:51:07,599 --> 01:51:11,440
files and just manage them myself

01:51:09,119 --> 01:51:14,239
because i often want to make sure that

01:51:11,440 --> 01:51:16,960
things are os system agnostic or

01:51:14,239 --> 01:51:19,280
operating system agnostic

01:51:16,960 --> 01:51:20,400
and the easiest way to do that is to

01:51:19,280 --> 01:51:22,320
just maintain them

01:51:20,400 --> 01:51:24,000
yourself from the start it's also a good

01:51:22,320 --> 01:51:25,520
practice because it just gets you off

01:51:24,000 --> 01:51:30,719
headed in that direction

01:51:25,520 --> 01:51:30,719
of using environment.yaml file

01:51:32,840 --> 01:51:37,360
okay

01:51:35,360 --> 01:51:40,400
and it looks like we're not quite going

01:51:37,360 --> 01:51:40,400
to have time to do

01:51:42,880 --> 01:51:45,679
i'll show you

01:51:45,920 --> 01:51:50,639
well no i think rather than rush through

01:51:49,679 --> 01:51:53,920
some more

01:51:50,639 --> 01:51:54,800
uh hands-on examples i'll just talk you

01:51:53,920 --> 01:51:58,159
through

01:51:54,800 --> 01:52:02,239
the last part of this um

01:51:58,159 --> 01:52:05,199
the last part of this episode

01:52:02,239 --> 01:52:05,520
okay so updating an environment so you

01:52:05,199 --> 01:52:08,000
can

01:52:05,520 --> 01:52:09,840
update an environment um using an

01:52:08,000 --> 01:52:12,880
environment.yaml file

01:52:09,840 --> 01:52:14,320
um but the way that i uh i

01:52:12,880 --> 01:52:16,080
there's two ways to do it and one of

01:52:14,320 --> 01:52:18,800
which is the way that i

01:52:16,080 --> 01:52:21,119
i tend to do it which is rebuilding a

01:52:18,800 --> 01:52:24,400
combat environment from scratch

01:52:21,119 --> 01:52:26,400
so you can run this conda emv

01:52:24,400 --> 01:52:28,159
update command which has the same

01:52:26,400 --> 01:52:29,679
structure as the conda emv create

01:52:28,159 --> 01:52:30,960
command

01:52:29,679 --> 01:52:33,040
so if you go in and you edit your

01:52:30,960 --> 01:52:35,679
environment.yaml file remove some

01:52:33,040 --> 01:52:37,840
dependencies add some dependencies

01:52:35,679 --> 01:52:39,199
change version numbers whatever save the

01:52:37,840 --> 01:52:41,760
file and then run this

01:52:39,199 --> 01:52:42,800
update command it will recreate the

01:52:41,760 --> 01:52:45,679
environment

01:52:42,800 --> 01:52:46,400
and just change whatever is required

01:52:45,679 --> 01:52:47,920
that

01:52:46,400 --> 01:52:49,760
has been changed from the environment

01:52:47,920 --> 01:52:51,840
file so it will add dependencies that

01:52:49,760 --> 01:52:53,679
didn't previously exist

01:52:51,840 --> 01:52:55,280
if you add the dash dash prune option it

01:52:53,679 --> 01:52:56,880
will remove stuff that's no longer

01:52:55,280 --> 01:52:59,599
needed

01:52:56,880 --> 01:53:01,520
i tend to rebuild from scratch which

01:52:59,599 --> 01:53:04,080
takes a little bit longer but we're

01:53:01,520 --> 01:53:07,119
talking like generally

01:53:04,080 --> 01:53:09,119
order of a couple of minutes longer

01:53:07,119 --> 01:53:10,400
than just running the update command and

01:53:09,119 --> 01:53:12,880
i do this because

01:53:10,400 --> 01:53:13,440
then i only have to remember one command

01:53:12,880 --> 01:53:16,719
conda

01:53:13,440 --> 01:53:19,760
emv create dash dash prefix

01:53:16,719 --> 01:53:21,599
dot slash emv if you always

01:53:19,760 --> 01:53:23,920
put your environments in the same place

01:53:21,599 --> 01:53:24,480
then you can always use this dot slash

01:53:23,920 --> 01:53:26,159
emv

01:53:24,480 --> 01:53:29,119
to put the environment in the exact same

01:53:26,159 --> 01:53:31,199
place for every project

01:53:29,119 --> 01:53:32,880
same environment.yaml naming convention

01:53:31,199 --> 01:53:36,000
so you don't have to remember

01:53:32,880 --> 01:53:37,119
anything by environment.yaml and this

01:53:36,000 --> 01:53:39,840
dash dash force

01:53:37,119 --> 01:53:41,840
and the force just basically blows away

01:53:39,840 --> 01:53:43,679
whatever environment directory

01:53:41,840 --> 01:53:54,320
was there previously and just rebuilds

01:53:43,679 --> 01:53:56,400
the whole thing from scratch

01:53:54,320 --> 01:53:56,400

YouTube URL: https://www.youtube.com/watch?v=EiA__10cTkg


