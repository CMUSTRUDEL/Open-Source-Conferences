Title: Prajjwal Nijhara - Lightning Talk || PyCon Africa 2020
Publication date: 2020-09-26
Playlist: PyCon Africa 2020
Description: 
	
Captions: 
	00:00:13,840 --> 00:00:17,600
so i am prajwal nidhara

00:00:15,519 --> 00:00:19,840
currently a electrical engineering

00:00:17,600 --> 00:00:23,279
student at a lighter muslim university

00:00:19,840 --> 00:00:24,160
and i'm i've been working as a developer

00:00:23,279 --> 00:00:25,760
relation intern

00:00:24,160 --> 00:00:27,519
at deep source india private limited

00:00:25,760 --> 00:00:30,560
it's the code coverage quality

00:00:27,519 --> 00:00:31,199
assurance team and you can follow me on

00:00:30,560 --> 00:00:34,000
uh

00:00:31,199 --> 00:00:35,120
twitter at nitharafridwell and otherwise

00:00:34,000 --> 00:00:38,000
i'll be available at

00:00:35,120 --> 00:00:40,200
uh you know at internet at pinishara i

00:00:38,000 --> 00:00:42,800
write my blogs at

00:00:40,200 --> 00:00:43,360
pinishah.getup.io so let us begin with

00:00:42,800 --> 00:00:45,520
my

00:00:43,360 --> 00:00:46,559
talk so i will be talking on that on the

00:00:45,520 --> 00:00:48,399
topic uh

00:00:46,559 --> 00:00:51,280
where and how to use asserts in your

00:00:48,399 --> 00:00:54,320
python code so let's begin

00:00:51,280 --> 00:00:56,239
so let us first know what azure mean so

00:00:54,320 --> 00:00:57,600
others a statement exists almost in

00:00:56,239 --> 00:00:58,000
every programming language as we all

00:00:57,600 --> 00:01:00,000
know

00:00:58,000 --> 00:01:01,039
uh it helps detect problems early in

00:01:00,000 --> 00:01:03,760
your program

00:01:01,039 --> 00:01:05,199
uh where where the cause is clear the

00:01:03,760 --> 00:01:07,280
most important point is where the

00:01:05,199 --> 00:01:08,640
cause is clear rather than data as a

00:01:07,280 --> 00:01:11,280
side effect or uh

00:01:08,640 --> 00:01:11,680
of some other operation okay so it is

00:01:11,280 --> 00:01:13,360
just

00:01:11,680 --> 00:01:15,600
you know uh can be uh called as

00:01:13,360 --> 00:01:19,200
debugging tool instead of uh

00:01:15,600 --> 00:01:22,000
try you try and accept uh statement uh

00:01:19,200 --> 00:01:23,200
so let us first know how how does alerts

00:01:22,000 --> 00:01:25,119
work

00:01:23,200 --> 00:01:27,520
others and as you all can see that other

00:01:25,119 --> 00:01:28,320
is a uh is a statement which accepts a

00:01:27,520 --> 00:01:30,880
condition

00:01:28,320 --> 00:01:31,600
it must be a boolean uh it must be a

00:01:30,880 --> 00:01:35,040
boolean

00:01:31,600 --> 00:01:37,119
and it uh eventually must give

00:01:35,040 --> 00:01:38,560
true true or false as written value and

00:01:37,119 --> 00:01:41,439
and as an optional

00:01:38,560 --> 00:01:42,479
content can be an error message it is it

00:01:41,439 --> 00:01:45,119
is equivalent to

00:01:42,479 --> 00:01:45,680
you know uh if our else statement like

00:01:45,119 --> 00:01:47,439
the one

00:01:45,680 --> 00:01:49,200
you can see if not condition raise

00:01:47,439 --> 00:01:50,399
aggression error uh

00:01:49,200 --> 00:01:52,640
then an error message followed by

00:01:50,399 --> 00:01:55,680
another error message

00:01:52,640 --> 00:01:58,159
so let us go for an example here here we

00:01:55,680 --> 00:02:00,399
in this code snippet we are

00:01:58,159 --> 00:02:01,439
we are getting a length of the system

00:02:00,399 --> 00:02:04,320
argument that is

00:02:01,439 --> 00:02:05,920
it must be in the system arguments must

00:02:04,320 --> 00:02:08,560
be greater than 5.

00:02:05,920 --> 00:02:09,280
if it is greater than 5 you can we can

00:02:08,560 --> 00:02:11,360
print the

00:02:09,280 --> 00:02:12,720
following statement else we can we will

00:02:11,360 --> 00:02:15,120
raise an assumption error

00:02:12,720 --> 00:02:16,319
with the following uh you know with the

00:02:15,120 --> 00:02:19,280
following uh

00:02:16,319 --> 00:02:21,440
error message so the here the output is

00:02:19,280 --> 00:02:25,200
if we are calling our file as

00:02:21,440 --> 00:02:27,440
my dot py as our for one of the

00:02:25,200 --> 00:02:29,120
uh system argument then followed by

00:02:27,440 --> 00:02:30,560
three other arguments one two three

00:02:29,120 --> 00:02:32,160
here it is clearly we can see that the

00:02:30,560 --> 00:02:32,800
three though that four arguments are

00:02:32,160 --> 00:02:34,400
less than

00:02:32,800 --> 00:02:36,160
five so we can we are raising an

00:02:34,400 --> 00:02:38,720
assumption in it all good

00:02:36,160 --> 00:02:39,519
it is what observations have made for

00:02:38,720 --> 00:02:42,480
but

00:02:39,519 --> 00:02:42,800
where is the problem the problem here is

00:02:42,480 --> 00:02:45,040
my

00:02:42,800 --> 00:02:46,800
friends problem is with optimization

00:02:45,040 --> 00:02:48,400
supply pythons optimization lag so

00:02:46,800 --> 00:02:50,959
python's optimization flag

00:02:48,400 --> 00:02:53,200
is everything about optimization but

00:02:50,959 --> 00:02:54,160
with optimization you have to sacrifice

00:02:53,200 --> 00:02:56,800
something

00:02:54,160 --> 00:02:58,080
what goes down with optimization when

00:02:56,800 --> 00:03:00,560
you raise a when you

00:02:58,080 --> 00:03:02,400
open a file with an optimization flag

00:03:00,560 --> 00:03:03,840
all the observed statements are removed

00:03:02,400 --> 00:03:04,080
although dock strings are removed when

00:03:03,840 --> 00:03:06,400
you

00:03:04,080 --> 00:03:07,920
play when you select a double o flat and

00:03:06,400 --> 00:03:10,080
the most important thing is value of

00:03:07,920 --> 00:03:13,519
debug build in variable is also set to

00:03:10,080 --> 00:03:15,840
false okay so

00:03:13,519 --> 00:03:17,360
let us face the upper code with an o

00:03:15,840 --> 00:03:19,200
flat we are

00:03:17,360 --> 00:03:20,800
raising we are again opening this

00:03:19,200 --> 00:03:23,280
executing this file in the

00:03:20,800 --> 00:03:24,799
interpreter with an o flash here you can

00:03:23,280 --> 00:03:28,239
clearly see a o

00:03:24,799 --> 00:03:31,040
capital o then four uh you know

00:03:28,239 --> 00:03:32,080
we have four arguments here the observed

00:03:31,040 --> 00:03:34,319
statement is

00:03:32,080 --> 00:03:35,360
clearly removed from the state from the

00:03:34,319 --> 00:03:38,640
code and we

00:03:35,360 --> 00:03:39,440
are we are accepting an uh argument

00:03:38,640 --> 00:03:42,480
variable

00:03:39,440 --> 00:03:45,920
as my pi one two three as an array

00:03:42,480 --> 00:03:49,040
all good so what can go wrong with uh

00:03:45,920 --> 00:03:50,959
optimization flag let us read this if

00:03:49,040 --> 00:03:52,959
other statements are used for facing

00:03:50,959 --> 00:03:54,480
validation projection code the block

00:03:52,959 --> 00:03:57,120
won't be executed at all

00:03:54,480 --> 00:03:58,879
that is if you execute a python file

00:03:57,120 --> 00:04:01,680
which is

00:03:58,879 --> 00:04:02,159
using exertion in validation with an o

00:04:01,680 --> 00:04:03,920
flat

00:04:02,159 --> 00:04:05,840
but it will potentially open up a

00:04:03,920 --> 00:04:06,560
security vulnerability let us see an

00:04:05,840 --> 00:04:10,000
example

00:04:06,560 --> 00:04:12,239
in the coming side look how this uh

00:04:10,000 --> 00:04:14,879
this project validates the mail in the

00:04:12,239 --> 00:04:18,479
line 127 you can clearly see that uh

00:04:14,879 --> 00:04:20,720
it is using azure rematch so if

00:04:18,479 --> 00:04:22,960
i execute this file in the production

00:04:20,720 --> 00:04:26,080
code as

00:04:22,960 --> 00:04:26,720
in o flat it will automatically removes

00:04:26,080 --> 00:04:28,160
or it

00:04:26,720 --> 00:04:29,840
will automatically remove the azure

00:04:28,160 --> 00:04:31,840
statement and this

00:04:29,840 --> 00:04:33,360
will potentially open the security

00:04:31,840 --> 00:04:36,240
vulnerability

00:04:33,360 --> 00:04:36,560
so what is the fix it is recommended to

00:04:36,240 --> 00:04:39,520
use

00:04:36,560 --> 00:04:41,199
others only in the test okay the tests

00:04:39,520 --> 00:04:44,560
are the files which are

00:04:41,199 --> 00:04:46,000
you know uh are not like the part of the

00:04:44,560 --> 00:04:48,960
actual code base

00:04:46,000 --> 00:04:49,840
okay so we can use other statements in

00:04:48,960 --> 00:04:52,880
test cases

00:04:49,840 --> 00:04:53,520
but if then what else can we use in

00:04:52,880 --> 00:04:55,520
other

00:04:53,520 --> 00:04:57,360
words can be used in place of asserts

00:04:55,520 --> 00:04:59,280
let us see an example

00:04:57,360 --> 00:05:00,639
here i have opened an issue which is

00:04:59,280 --> 00:05:03,680
clearly closed uh

00:05:00,639 --> 00:05:06,479
this was a pr which closed it so it was

00:05:03,680 --> 00:05:08,400
in an issue in mobility

00:05:06,479 --> 00:05:11,120
that other statements are used outside

00:05:08,400 --> 00:05:14,160
of this which is not to be meant for

00:05:11,120 --> 00:05:16,080
so it clearly says that since azure pro

00:05:14,160 --> 00:05:18,080
provides an easy way to check some

00:05:16,080 --> 00:05:20,000
condition and fail execution

00:05:18,080 --> 00:05:22,560
it's very common for developer to use it

00:05:20,000 --> 00:05:24,000
as uh check quality

00:05:22,560 --> 00:05:25,680
but when the python interpreter is

00:05:24,000 --> 00:05:27,120
booked with inbox with the optimization

00:05:25,680 --> 00:05:28,639
flag the other statements are removed

00:05:27,120 --> 00:05:30,880
from the files

00:05:28,639 --> 00:05:32,720
from the bytecode so the files using are

00:05:30,880 --> 00:05:34,560
this much you know five files are using

00:05:32,720 --> 00:05:37,199
just a lot of other statements

00:05:34,560 --> 00:05:38,000
if i execute the whole you know program

00:05:37,199 --> 00:05:41,280
with optimization

00:05:38,000 --> 00:05:42,479
tag everything will get down but is the

00:05:41,280 --> 00:05:45,600
fixed

00:05:42,479 --> 00:05:46,960
condition and we can say that uh raise

00:05:45,600 --> 00:05:50,800
an assortation error it is

00:05:46,960 --> 00:05:53,440
quite a simple you know fixed and

00:05:50,800 --> 00:05:55,840
good first i know that uh some people

00:05:53,440 --> 00:05:58,960
like to use azure as the single line uh

00:05:55,840 --> 00:06:01,919
you know single line usage and uh

00:05:58,960 --> 00:06:03,520
who uses optimization flash but still if

00:06:01,919 --> 00:06:05,199
python has a library or has

00:06:03,520 --> 00:06:06,639
which is given your optimization line we

00:06:05,199 --> 00:06:10,400
should take care of

00:06:06,639 --> 00:06:12,240
the things and use assets in uh

00:06:10,400 --> 00:06:14,000
test cases and not in the files which

00:06:12,240 --> 00:06:17,120
are not not tests

00:06:14,000 --> 00:06:17,759
okay so this was all from my side thank

00:06:17,120 --> 00:06:20,479
you

00:06:17,759 --> 00:06:21,840
uh president sarah signing off and you

00:06:20,479 --> 00:06:24,800
can follow me on twitter

00:06:21,840 --> 00:06:28,160
at nishar prajwal github at pinisar and

00:06:24,800 --> 00:06:30,319
i write my blogs on https.i o

00:06:28,160 --> 00:06:32,080
that's all from us i uh these are the

00:06:30,319 --> 00:06:34,000
references i have used

00:06:32,080 --> 00:06:35,360
the deep source discussion forum do

00:06:34,000 --> 00:06:38,960
check that out or

00:06:35,360 --> 00:06:39,520
if so deep source do a quite a lot of uh

00:06:38,960 --> 00:06:42,800
you know

00:06:39,520 --> 00:06:44,720
amazing tasks and on code quality and

00:06:42,800 --> 00:06:47,039
the github links are all here thank you

00:06:44,720 --> 00:06:49,840
all from my site

00:06:47,039 --> 00:06:49,840

YouTube URL: https://www.youtube.com/watch?v=BGz7d-cg8F0


