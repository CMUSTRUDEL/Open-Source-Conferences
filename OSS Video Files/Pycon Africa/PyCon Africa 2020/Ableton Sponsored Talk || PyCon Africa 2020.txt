Title: Ableton Sponsored Talk || PyCon Africa 2020
Publication date: 2020-08-30
Playlist: PyCon Africa 2020
Description: 
	
Captions: 
	00:00:15,360 --> 00:00:18,960
hey pycon africa

00:00:16,720 --> 00:00:20,400
greetings from berlin germany my name is

00:00:18,960 --> 00:00:22,000
erica and i'm going to be talking about

00:00:20,400 --> 00:00:25,359
playing around with the basic audio and

00:00:22,000 --> 00:00:25,359
imaging processing in python

00:00:25,599 --> 00:00:28,800
so before we get started i'll take a

00:00:27,119 --> 00:00:31,359
quick second to introduce myself

00:00:28,800 --> 00:00:32,559
so hi i'm a software engineer at a

00:00:31,359 --> 00:00:35,680
company called ableton

00:00:32,559 --> 00:00:38,079
which i joined four years ago

00:00:35,680 --> 00:00:39,920
so what is ableton ableton is a software

00:00:38,079 --> 00:00:41,840
and hardware company making products for

00:00:39,920 --> 00:00:43,840
music makers and creators

00:00:41,840 --> 00:00:45,280
we're one of the few sponsors bike on

00:00:43,840 --> 00:00:46,320
africa so if you have any questions or

00:00:45,280 --> 00:00:48,000
feel like saying hi

00:00:46,320 --> 00:00:50,879
feel free to stop by our virtual booth

00:00:48,000 --> 00:00:50,879
or just get in touch

00:00:52,079 --> 00:00:55,199
these are the two of the products that

00:00:53,199 --> 00:00:56,480
we make on the right is live our

00:00:55,199 --> 00:00:58,960
flagship product

00:00:56,480 --> 00:01:00,320
um i flagship product which is the

00:00:58,960 --> 00:01:01,359
software for music creation and

00:01:00,320 --> 00:01:03,120
performance

00:01:01,359 --> 00:01:05,199
and on the left is push a playable

00:01:03,120 --> 00:01:06,479
hardware instrument for music making

00:01:05,199 --> 00:01:09,200
this is the team which i'm currently

00:01:06,479 --> 00:01:09,200
working on myself

00:01:09,840 --> 00:01:14,799
so what's this thing all about our goal

00:01:13,119 --> 00:01:16,479
in the next 15 minutes is to show how

00:01:14,799 --> 00:01:18,640
simply we can manipulate

00:01:16,479 --> 00:01:20,320
how an audio clip sounds on how an image

00:01:18,640 --> 00:01:21,840
looks using python

00:01:20,320 --> 00:01:24,000
to do this we will be implementing a

00:01:21,840 --> 00:01:27,680
basic effect which we can apply to both

00:01:24,000 --> 00:01:30,400
the sound as well as an image

00:01:27,680 --> 00:01:32,560
okay so the agenda we'll first cover the

00:01:30,400 --> 00:01:35,360
basics of digitalizing an audio file

00:01:32,560 --> 00:01:37,840
then the basics of digitalizing an image

00:01:35,360 --> 00:01:39,520
the illuminati effect

00:01:37,840 --> 00:01:41,840
the demo and we'll walk through the

00:01:39,520 --> 00:01:41,840
script

00:01:42,479 --> 00:01:47,680
so let's talk about how we digitalize

00:01:45,360 --> 00:01:47,680
things

00:01:49,680 --> 00:01:52,960
the definition of digitalization taken

00:01:51,600 --> 00:01:54,560
from wikipedia

00:01:52,960 --> 00:01:56,159
is the process of converting information

00:01:54,560 --> 00:01:59,520
into a digital format in which the

00:01:56,159 --> 00:02:02,000
information is organized in space

00:01:59,520 --> 00:02:03,200
so we know that in order to apply the

00:02:02,000 --> 00:02:05,759
effects

00:02:03,200 --> 00:02:08,239
of the audio audio to the audio to the

00:02:05,759 --> 00:02:11,920
image we first need to represent each as

00:02:08,239 --> 00:02:15,120
arrays of data so let's start off by

00:02:11,920 --> 00:02:15,120
digitalizing audio

00:02:15,599 --> 00:02:20,800
so on a high level

00:02:18,959 --> 00:02:22,000
on a high level we sample bits of audio

00:02:20,800 --> 00:02:23,760
by taking in chunks

00:02:22,000 --> 00:02:25,920
in equal time intervals called the

00:02:23,760 --> 00:02:26,959
sample rates in order to represent the

00:02:25,920 --> 00:02:28,560
digital

00:02:26,959 --> 00:02:30,959
uh represent the signal in a digital

00:02:28,560 --> 00:02:30,959
format

00:02:33,200 --> 00:02:37,680
so an audio file is an array um here is

00:02:36,480 --> 00:02:42,239
an audio file

00:02:37,680 --> 00:02:44,560
as an array represented by a numpy array

00:02:42,239 --> 00:02:45,599
and internally in illuminati we use this

00:02:44,560 --> 00:02:48,560
type of uh

00:02:45,599 --> 00:02:50,000
we use this type uh we use the type of a

00:02:48,560 --> 00:02:51,920
16-bit

00:02:50,000 --> 00:02:53,680
signed integer which determines the

00:02:51,920 --> 00:02:55,120
resolution of our sounds

00:02:53,680 --> 00:02:56,720
since we're using numpy it's easy to

00:02:55,120 --> 00:02:59,040
specify this is the data type for this

00:02:56,720 --> 00:02:59,040
array

00:02:59,360 --> 00:03:03,840
so let's get into a little bit of the

00:03:00,800 --> 00:03:05,440
characteristics of a wav file

00:03:03,840 --> 00:03:07,519
and for the purposes of this project

00:03:05,440 --> 00:03:10,560
we're talking about wav files because

00:03:07,519 --> 00:03:11,760
uh wave is wave is an uncompressed form

00:03:10,560 --> 00:03:14,640
of audio

00:03:11,760 --> 00:03:15,040
which has all the raw data that we need

00:03:14,640 --> 00:03:17,120
so

00:03:15,040 --> 00:03:19,519
what's in a wav file we have the raw

00:03:17,120 --> 00:03:22,319
data as we've seen on the previous slide

00:03:19,519 --> 00:03:23,120
and we have some metadata um these bits

00:03:22,319 --> 00:03:25,040
of metadata

00:03:23,120 --> 00:03:27,200
we will go into later into more detail

00:03:25,040 --> 00:03:28,720
about the talk um technically there are

00:03:27,200 --> 00:03:31,920
more points of metadata

00:03:28,720 --> 00:03:32,400
included in the wave format but we go

00:03:31,920 --> 00:03:33,599
into

00:03:32,400 --> 00:03:35,440
but we won't go into them as they

00:03:33,599 --> 00:03:36,720
weren't relevant for this talk so

00:03:35,440 --> 00:03:38,480
some of the ones that we'll talk about

00:03:36,720 --> 00:03:40,959
later are sample rate

00:03:38,480 --> 00:03:43,360
sample width number of channels and the

00:03:40,959 --> 00:03:43,360
frame rate

00:03:43,599 --> 00:03:47,280
so let's take a closer look at the raw

00:03:45,440 --> 00:03:50,400
data

00:03:47,280 --> 00:03:51,920
so here plotted we have 16 values from

00:03:50,400 --> 00:03:53,840
negative 8 to 7

00:03:51,920 --> 00:03:55,360
to represent the points on our waveform

00:03:53,840 --> 00:03:56,879
which determine the resolution of this

00:03:55,360 --> 00:04:00,239
data

00:03:56,879 --> 00:04:01,840
since 16 translates to 2 to the power 4

00:04:00,239 --> 00:04:03,519
it means that the bit depth or the

00:04:01,840 --> 00:04:06,000
resolution of the data

00:04:03,519 --> 00:04:06,000
is 4.

00:04:07,280 --> 00:04:11,519
okay now let's talk about digitalizing

00:04:09,040 --> 00:04:11,519
an image

00:04:11,760 --> 00:04:14,799
so this is image this is an image as an

00:04:14,000 --> 00:04:16,320
array

00:04:14,799 --> 00:04:18,479
it's quite a bit different than the

00:04:16,320 --> 00:04:23,280
audio file

00:04:18,479 --> 00:04:23,280
so taking a closer look at this um

00:04:23,360 --> 00:04:26,960
it's actually just a collection of 8-bit

00:04:25,199 --> 00:04:28,320
unsigned ins since internally in

00:04:26,960 --> 00:04:29,919
illuminating this is how we're

00:04:28,320 --> 00:04:32,960
representing it

00:04:29,919 --> 00:04:34,960
um also this is a typical um

00:04:32,960 --> 00:04:36,000
this is typical to rgb notation where

00:04:34,960 --> 00:04:37,680
the values are

00:04:36,000 --> 00:04:39,759
eight bit unsigned ins ranging from two

00:04:37,680 --> 00:04:42,000
to 255.

00:04:39,759 --> 00:04:45,520
um each each row of data represents the

00:04:42,000 --> 00:04:45,520
corresponding rgb values

00:04:46,240 --> 00:04:50,639
so it looks like an intimidating amount

00:04:48,560 --> 00:04:53,280
of data but in the end it's quite simple

00:04:50,639 --> 00:04:54,400
so here's a little haiku to explain it a

00:04:53,280 --> 00:04:56,800
list of rows

00:04:54,400 --> 00:05:00,960
where each row is a list of pixels and

00:04:56,800 --> 00:05:00,960
each pixel is a list of rgb values

00:05:01,440 --> 00:05:05,759
so now we get into applying the

00:05:03,360 --> 00:05:07,120
illuminati effect

00:05:05,759 --> 00:05:10,080
so it's actually in the end just a

00:05:07,120 --> 00:05:11,680
simple multiplication function

00:05:10,080 --> 00:05:13,440
which multiplies all the values of

00:05:11,680 --> 00:05:14,960
either the audio or the image arrays by

00:05:13,440 --> 00:05:18,400
a certain factor

00:05:14,960 --> 00:05:21,120
so here we're using a numpy array

00:05:18,400 --> 00:05:23,680
and multiplying it by the factor x in

00:05:21,120 --> 00:05:26,479
this case we're actually able to

00:05:23,680 --> 00:05:26,880
use multiplication by in the same way

00:05:26,479 --> 00:05:29,280
that we're

00:05:26,880 --> 00:05:32,479
writing now due to the internal workings

00:05:29,280 --> 00:05:32,479
of how numpy is working

00:05:33,039 --> 00:05:37,280
so let's say let's take a case let's say

00:05:35,280 --> 00:05:38,960
the multiplication factor is 2.

00:05:37,280 --> 00:05:40,880
when applied to an image we double all

00:05:38,960 --> 00:05:43,039
the rgb values resulting in the image

00:05:40,880 --> 00:05:44,960
appearing more bright

00:05:43,039 --> 00:05:46,400
when an audio when applied to the audio

00:05:44,960 --> 00:05:48,479
file we double the audio

00:05:46,400 --> 00:05:50,479
audio data points resulting in the

00:05:48,479 --> 00:05:53,840
changes to the perceived loudness

00:05:50,479 --> 00:05:53,840
and making it sounding louder

00:05:54,000 --> 00:05:57,600
so we don't see much we don't do much

00:05:56,000 --> 00:06:06,720
but the change is quite significant so

00:05:57,600 --> 00:06:10,000
let's take a look in a demo

00:06:06,720 --> 00:06:10,000
so let's first take a look

00:06:10,400 --> 00:06:15,680
at the starting data so we have an audio

00:06:16,140 --> 00:06:20,720
[Music]

00:06:18,840 --> 00:06:22,319
file

00:06:20,720 --> 00:06:24,160
which is just a loop of syndrome that i

00:06:22,319 --> 00:06:28,400
made

00:06:24,160 --> 00:06:29,919
and we have an image here

00:06:28,400 --> 00:06:31,520
so if we take the case that we talked

00:06:29,919 --> 00:06:35,840
about previously with

00:06:31,520 --> 00:06:35,840
the factor of two applied to both

00:06:51,840 --> 00:06:56,960
and check the values again there should

00:06:53,599 --> 00:06:56,960
be a new file for each of them

00:06:57,120 --> 00:07:00,400
let's compare just to see make sure we

00:06:58,960 --> 00:07:01,599
see the difference and hear the

00:07:00,400 --> 00:07:03,010
difference

00:07:01,599 --> 00:07:08,540
but here's the original

00:07:03,010 --> 00:07:08,540
[Music]

00:07:09,039 --> 00:07:15,440
and the new one

00:07:11,360 --> 00:07:19,039
[Music]

00:07:15,440 --> 00:07:19,039
so we can hear that it got a bit louder

00:07:19,120 --> 00:07:23,680
and here's the original image and here's

00:07:21,919 --> 00:07:25,520
the new image

00:07:23,680 --> 00:07:27,919
so the effect on the image is a lot

00:07:25,520 --> 00:07:30,800
stronger than it is on the audio

00:07:27,919 --> 00:07:31,280
okay so let's do another example let's

00:07:30,800 --> 00:07:34,240
take

00:07:31,280 --> 00:07:35,840
let's try to make it a little bit dimmer

00:07:34,240 --> 00:07:39,440
and a little bit quieter

00:07:35,840 --> 00:07:45,840
so if we pass let's say

00:07:39,440 --> 00:07:45,840
a floating point

00:07:49,759 --> 00:07:54,400
and we pass a

00:07:53,039 --> 00:07:59,840
more significant floating point to the

00:07:54,400 --> 00:07:59,840
audience so we hear the effects more

00:08:01,840 --> 00:08:04,720
and now we'll check again

00:08:05,599 --> 00:08:14,960
so the original audio

00:08:12,160 --> 00:08:14,960
and the new one

00:08:15,759 --> 00:08:19,680
as you can tell it's much quieter

00:08:17,900 --> 00:08:23,520
[Music]

00:08:19,680 --> 00:08:23,520
and now we have the image

00:08:23,919 --> 00:08:27,840
and the new image which is much dimmer

00:08:29,360 --> 00:08:31,599
so

00:08:36,479 --> 00:08:40,240
so now let's take a closer look at

00:08:37,839 --> 00:08:43,440
what's actually going on

00:08:40,240 --> 00:08:45,120
so we start off by reading in the audio

00:08:43,440 --> 00:08:47,600
and we have some we have some attributes

00:08:45,120 --> 00:08:49,680
of path which is the path to the image

00:08:47,600 --> 00:08:51,760
pass through the audio the data type

00:08:49,680 --> 00:08:53,680
which we talked about is the bit depth

00:08:51,760 --> 00:08:54,959
the number of channels which determines

00:08:53,680 --> 00:08:57,519
whether the sample is mono

00:08:54,959 --> 00:08:58,080
stereo the sample width represented in

00:08:57,519 --> 00:09:00,399
bytes so

00:08:58,080 --> 00:09:02,000
the bit depth of eight would be sample

00:09:00,399 --> 00:09:03,839
width of one for example

00:09:02,000 --> 00:09:05,279
and the bit of 16 would be a sample

00:09:03,839 --> 00:09:07,760
width of two

00:09:05,279 --> 00:09:09,120
then we have the sample rate which is

00:09:07,760 --> 00:09:10,240
how many samples we're taking in per

00:09:09,120 --> 00:09:12,399
second

00:09:10,240 --> 00:09:15,360
and the audio array which we use as a

00:09:12,399 --> 00:09:15,360
numpy all yoga

00:09:15,839 --> 00:09:20,720
so for reading in the audio we have an

00:09:18,959 --> 00:09:23,680
extra step

00:09:20,720 --> 00:09:24,800
so we have the setup wave data function

00:09:23,680 --> 00:09:26,880
and we're using the

00:09:24,800 --> 00:09:28,720
to read in to read and wave files we're

00:09:26,880 --> 00:09:32,560
using the built-in the python built-in

00:09:28,720 --> 00:09:33,920
library wave um so this script does a

00:09:32,560 --> 00:09:35,200
couple of things

00:09:33,920 --> 00:09:36,720
or this function does a couple of things

00:09:35,200 --> 00:09:37,839
so what it first does is it opens the

00:09:36,720 --> 00:09:39,760
wav file

00:09:37,839 --> 00:09:41,920
with the caveat that it can't open a

00:09:39,760 --> 00:09:45,279
32-bit depth

00:09:41,920 --> 00:09:46,399
sample and then it sets the necessary

00:09:45,279 --> 00:09:49,519
metadata

00:09:46,399 --> 00:09:51,760
with an additional caveat that since

00:09:49,519 --> 00:09:53,040
numpy doesn't support the data type of

00:09:51,760 --> 00:09:54,800
n24

00:09:53,040 --> 00:09:56,080
in the case that we have a sample with

00:09:54,800 --> 00:09:59,200
the data type of internet

00:09:56,080 --> 00:10:01,360
of 24-bit depth we convert it to 16-bit

00:09:59,200 --> 00:10:04,480
depth using the sox library

00:10:01,360 --> 00:10:07,920
so we downgrade it and then this

00:10:04,480 --> 00:10:07,920
function also closes the file

00:10:09,279 --> 00:10:13,839
so let's look at reading in an image so

00:10:12,399 --> 00:10:16,000
we're using a library called pill to

00:10:13,839 --> 00:10:19,200
help reading and writing the image

00:10:16,000 --> 00:10:22,480
and the attributes we have are here are

00:10:19,200 --> 00:10:23,920
the path to the image the data type um

00:10:22,480 --> 00:10:24,560
which as mentioned earlier is the

00:10:23,920 --> 00:10:27,839
standard

00:10:24,560 --> 00:10:29,680
or rgb model um

00:10:27,839 --> 00:10:32,000
which is just the eight bit unsigned in

00:10:29,680 --> 00:10:36,160
ranging zero to 255 and

00:10:32,000 --> 00:10:36,160
the image array also a numpair

00:10:36,399 --> 00:10:41,120
so applying the effect

00:10:39,440 --> 00:10:42,480
all we're really doing is multiplying by

00:10:41,120 --> 00:10:44,240
the factor

00:10:42,480 --> 00:10:45,519
and we're additionally double checking

00:10:44,240 --> 00:10:47,600
to make sure that the

00:10:45,519 --> 00:10:48,640
that the float that the value is a float

00:10:47,600 --> 00:10:51,120
during multiplication

00:10:48,640 --> 00:10:52,880
and converting back to an int afterwards

00:10:51,120 --> 00:10:54,240
this usually would happen internally but

00:10:52,880 --> 00:10:56,720
we've done this explicitly just the

00:10:54,240 --> 00:10:56,720
safeguard

00:10:57,519 --> 00:11:01,279
so the next step would be writing back

00:10:58,880 --> 00:11:03,519
to a wav file

00:11:01,279 --> 00:11:04,880
so what we do here is really just set

00:11:03,519 --> 00:11:09,040
the metadata

00:11:04,880 --> 00:11:09,040
and write the wav file to a new file

00:11:09,360 --> 00:11:15,920
and secondly same for the image here

00:11:12,800 --> 00:11:18,399
to write back to an image we simply just

00:11:15,920 --> 00:11:21,279
write back the new data the new array

00:11:18,399 --> 00:11:22,800
into an image file

00:11:21,279 --> 00:11:24,079
if you're curious to learn more or to

00:11:22,800 --> 00:11:25,360
check it out or play with it yourself

00:11:24,079 --> 00:11:26,240
you can check out the source code in my

00:11:25,360 --> 00:11:29,680
github

00:11:26,240 --> 00:11:31,519
you can follow the link here and

00:11:29,680 --> 00:11:33,120
in essence what we've covered is in a

00:11:31,519 --> 00:11:34,000
hundred lines of code we were able to

00:11:33,120 --> 00:11:36,000
actually achieve

00:11:34,000 --> 00:11:38,160
um we were able to actually read in an

00:11:36,000 --> 00:11:39,360
audio file and an image and create new

00:11:38,160 --> 00:11:41,839
versions of each with the

00:11:39,360 --> 00:11:42,560
effect applied so although we're not

00:11:41,839 --> 00:11:44,000
changing

00:11:42,560 --> 00:11:45,760
we're not changing much or using any

00:11:44,000 --> 00:11:47,519
complicated math we're actually able to

00:11:45,760 --> 00:11:50,399
make a notable change in the appearance

00:11:47,519 --> 00:11:50,399
or sound of each

00:11:50,560 --> 00:11:53,839
so can we do audio processing with

00:11:52,800 --> 00:11:56,320
python

00:11:53,839 --> 00:11:57,600
the short answer is yes things become a

00:11:56,320 --> 00:12:00,240
little bit more complicated when

00:11:57,600 --> 00:12:02,079
processing audio or visuals in real time

00:12:00,240 --> 00:12:03,920
however for the offline processing

00:12:02,079 --> 00:12:05,680
python gets the job done

00:12:03,920 --> 00:12:08,959
when latency is critical we need a lower

00:12:05,680 --> 00:12:12,240
level language such as c plus plus

00:12:08,959 --> 00:12:12,240
and that's it thank you

00:12:14,560 --> 00:12:17,680
hey popcorn africa

00:12:19,440 --> 00:12:24,800
my name is erica um and um

00:12:23,200 --> 00:12:26,160
this is my colleague anna and we're both

00:12:24,800 --> 00:12:28,320
working at ableton and we're here to

00:12:26,160 --> 00:12:31,680
take any questions that you might have

00:12:28,320 --> 00:12:34,480
okay so i can see the first question by

00:12:31,680 --> 00:12:36,959
marlene about ableton i'm happy to take

00:12:34,480 --> 00:12:38,639
questions about ableton and

00:12:36,959 --> 00:12:40,480
leave the talk related questions for

00:12:38,639 --> 00:12:43,600
erica so

00:12:40,480 --> 00:12:47,279
ableton is based in berlin in germany

00:12:43,600 --> 00:12:50,160
we have offices in japan and

00:12:47,279 --> 00:12:50,639
california as well but these are rather

00:12:50,160 --> 00:12:54,480
small

00:12:50,639 --> 00:12:57,680
business-based based like brand base

00:12:54,480 --> 00:12:59,360
brand related offices the whole product

00:12:57,680 --> 00:13:04,240
development

00:12:59,360 --> 00:13:04,240
is located in here in germany in berlin

00:13:04,399 --> 00:13:08,880
okay the next question is about the

00:13:06,320 --> 00:13:12,399
colors of the first image

00:13:08,880 --> 00:13:13,920
um do you want to read it there we go

00:13:12,399 --> 00:13:15,440
a question from rob i noticed that the

00:13:13,920 --> 00:13:17,440
colors in the first image after you

00:13:15,440 --> 00:13:19,680
process it seem really freaky

00:13:17,440 --> 00:13:21,200
i was expecting it to tend bright white

00:13:19,680 --> 00:13:24,480
what's up with that

00:13:21,200 --> 00:13:24,720
um so in effect i what actually happened

00:13:24,480 --> 00:13:26,560
is

00:13:24,720 --> 00:13:28,000
all the all the rgb values were just

00:13:26,560 --> 00:13:31,279
multiplied by two

00:13:28,000 --> 00:13:34,000
and i i think it just made every

00:13:31,279 --> 00:13:34,639
all the colors stronger so i think that

00:13:34,000 --> 00:13:37,920
because

00:13:34,639 --> 00:13:39,920
you're just making the values of the rgb

00:13:37,920 --> 00:13:43,199
values are bigger so i think it just

00:13:39,920 --> 00:13:46,320
then makes them more um

00:13:43,199 --> 00:13:48,639
perceived stronger to our eyes

00:13:46,320 --> 00:13:50,079
i hope that's i hope that's answering

00:13:48,639 --> 00:13:51,920
your curiosity

00:13:50,079 --> 00:13:54,480
um as for the quest question or the

00:13:51,920 --> 00:13:56,000
comment from joseph um

00:13:54,480 --> 00:13:57,920
so anna can also talk on this really

00:13:56,000 --> 00:14:01,519
well she's a professional

00:13:57,920 --> 00:14:04,079
python audio adventurer

00:14:01,519 --> 00:14:04,800
um for this project what what we used

00:14:04,079 --> 00:14:06,560
was just

00:14:04,800 --> 00:14:08,480
wave which is built in the python

00:14:06,560 --> 00:14:12,079
library um

00:14:08,480 --> 00:14:14,399
and socks to in order to um

00:14:12,079 --> 00:14:15,120
at some point i needed to transcribe and

00:14:14,399 --> 00:14:17,839
kind of

00:14:15,120 --> 00:14:19,680
downgrade the 24 bits and rewrite it

00:14:17,839 --> 00:14:21,920
back to a new file and

00:14:19,680 --> 00:14:22,880
for this i use socks to help me do this

00:14:21,920 --> 00:14:25,519
and then

00:14:22,880 --> 00:14:26,320
um that was kind of it as far as audio

00:14:25,519 --> 00:14:29,120
then pill

00:14:26,320 --> 00:14:29,839
pillow we use for image processing but i

00:14:29,120 --> 00:14:32,720
think anna

00:14:29,839 --> 00:14:33,199
knows a few other regular libraries for

00:14:32,720 --> 00:14:36,560
um

00:14:33,199 --> 00:14:36,560
processing audio in python

00:14:36,880 --> 00:14:41,760
so i usually try to stay

00:14:41,920 --> 00:14:45,839
stick with vanilla python as much as

00:14:43,519 --> 00:14:46,399
possible so as you noticed erika used

00:14:45,839 --> 00:14:50,800
that

00:14:46,399 --> 00:14:52,320
wave library to read and write

00:14:50,800 --> 00:14:54,079
wav files and this is actually a

00:14:52,320 --> 00:14:57,839
built-in library

00:14:54,079 --> 00:15:00,639
from the standard pattern

00:14:57,839 --> 00:15:01,279
and uh but if you wanted to experiment

00:15:00,639 --> 00:15:04,560
with

00:15:01,279 --> 00:15:07,519
uh music in python they're like

00:15:04,560 --> 00:15:08,720
quite some extensive comprehensive

00:15:07,519 --> 00:15:12,639
libraries

00:15:08,720 --> 00:15:16,160
that i would recommend like rosa or pio

00:15:12,639 --> 00:15:18,560
for flirters i'd say they offer a lot of

00:15:16,160 --> 00:15:21,680
functionalities out of the box and it's

00:15:18,560 --> 00:15:24,720
great to play around with them

00:15:21,680 --> 00:15:28,000
and when it comes to ableton

00:15:24,720 --> 00:15:28,880
and the libraries we use in our python

00:15:28,000 --> 00:15:31,920
teams

00:15:28,880 --> 00:15:34,800
uh when it's when it comes to

00:15:31,920 --> 00:15:37,360
the teams that focus on our products we

00:15:34,800 --> 00:15:42,320
actually don't really use a lot of

00:15:37,360 --> 00:15:42,320
libraries we develop our own frameworks

00:15:43,360 --> 00:15:47,680
hi daniela nice to see you here as a

00:15:46,320 --> 00:15:49,279
long time

00:15:47,680 --> 00:15:50,959
like an africa supporter we're super

00:15:49,279 --> 00:15:54,000
excited to be here finally

00:15:50,959 --> 00:15:57,199
and hope to meet you all in person one

00:15:54,000 --> 00:15:59,040
day in a year or two that would be

00:15:57,199 --> 00:16:01,920
lovely

00:15:59,040 --> 00:16:03,199
um we have another question from ahmed

00:16:01,920 --> 00:16:05,440
saying what is the business problem

00:16:03,199 --> 00:16:08,160
abelson is trying to solve

00:16:05,440 --> 00:16:08,480
um so in essence ableton is trying to

00:16:08,160 --> 00:16:11,600
make

00:16:08,480 --> 00:16:14,880
um tools for music makers and creators

00:16:11,600 --> 00:16:18,639
so making being creative in music making

00:16:14,880 --> 00:16:21,759
easier and more fun and intuitive

00:16:18,639 --> 00:16:23,360
and um yeah this is the

00:16:21,759 --> 00:16:25,519
essence i don't know if anyone you also

00:16:23,360 --> 00:16:30,000
want to add something

00:16:25,519 --> 00:16:32,720
right so one thing you could say

00:16:30,000 --> 00:16:34,079
as erika said make music making more

00:16:32,720 --> 00:16:38,000
accessible since

00:16:34,079 --> 00:16:40,079
uh back in the day um electronic

00:16:38,000 --> 00:16:41,360
alexa gear for making electronic music

00:16:40,079 --> 00:16:44,320
was very expensive

00:16:41,360 --> 00:16:45,120
before not many people had the

00:16:44,320 --> 00:16:48,399
opportunity

00:16:45,120 --> 00:16:49,040
to experiment with it and that would be

00:16:48,399 --> 00:16:51,839
one thing

00:16:49,040 --> 00:16:53,199
i'd say but our flagship product ableton

00:16:51,839 --> 00:16:56,079
live was

00:16:53,199 --> 00:16:57,920
built most people to let people perform

00:16:56,079 --> 00:16:58,720
music life and this is how it started

00:16:57,920 --> 00:17:01,360
now

00:16:58,720 --> 00:17:02,639
brilliant is something bigger and our

00:17:01,360 --> 00:17:05,679
offering

00:17:02,639 --> 00:17:07,600
is extended but first i believe

00:17:05,679 --> 00:17:09,039
this is why it's called right because it

00:17:07,600 --> 00:17:13,120
lets people perform

00:17:09,039 --> 00:17:15,760
electronic music live so you treat this

00:17:13,120 --> 00:17:18,319
digital audio workstation as you can see

00:17:15,760 --> 00:17:21,280
if you like

00:17:18,319 --> 00:17:24,319
so there's a question from joseph

00:17:21,280 --> 00:17:26,640
wondering how code transforms into music

00:17:24,319 --> 00:17:26,640
um

00:17:28,480 --> 00:17:33,840
generally the philosophical question in

00:17:30,480 --> 00:17:33,840
a way

00:17:35,280 --> 00:17:43,520
technically or metaphorically

00:17:39,120 --> 00:17:45,600
um so technically speaking um

00:17:43,520 --> 00:17:47,679
in my talk i also touch it a little bit

00:17:45,600 --> 00:17:50,400
so the computer understands just

00:17:47,679 --> 00:17:52,400
like bytes and numbers so we first

00:17:50,400 --> 00:17:53,520
transform it like we do the digitizing

00:17:52,400 --> 00:17:56,720
which i spoke about

00:17:53,520 --> 00:18:00,160
um and then it's it's read into the

00:17:56,720 --> 00:18:03,600
computer and then transformed back out

00:18:00,160 --> 00:18:04,799
on a metal philosophical level

00:18:03,600 --> 00:18:07,520
i don't know probably in a very

00:18:04,799 --> 00:18:10,799
beautiful way right and we can even

00:18:07,520 --> 00:18:14,640
talk about the current trends in

00:18:10,799 --> 00:18:17,200
automatic music generation right which

00:18:14,640 --> 00:18:18,720
involves artificial intelligence neural

00:18:17,200 --> 00:18:21,440
networks

00:18:18,720 --> 00:18:23,440
so maybe you can train your neural

00:18:21,440 --> 00:18:25,840
network to generate patterns for you

00:18:23,440 --> 00:18:26,640
or there's even the whole demo scene

00:18:25,840 --> 00:18:29,360
that

00:18:26,640 --> 00:18:30,720
focuses on automatic generation of audio

00:18:29,360 --> 00:18:33,919
visuals

00:18:30,720 --> 00:18:36,400
um so yeah um if you could be more

00:18:33,919 --> 00:18:38,720
concrete maybe you could

00:18:36,400 --> 00:18:41,039
go one of these directions if it's

00:18:38,720 --> 00:18:44,400
interesting

00:18:41,039 --> 00:18:46,320
and yes hope to meet you in person

00:18:44,400 --> 00:18:47,840
yes i'm very impressed with all your

00:18:46,320 --> 00:18:53,280
work within the python

00:18:47,840 --> 00:18:53,280
software foundation big fan big fan

00:18:53,520 --> 00:18:58,480
okay so follow-up question so does that

00:18:56,080 --> 00:19:00,559
make ableton do stuff like fruity loops

00:18:58,480 --> 00:19:02,480
um pretty lips is also something that we

00:19:00,559 --> 00:19:04,559
call digital audio workstation as

00:19:02,480 --> 00:19:06,080
as it's our software live so they do

00:19:04,559 --> 00:19:07,679
they do achieve similar things so you

00:19:06,080 --> 00:19:11,039
can make music and create

00:19:07,679 --> 00:19:12,400
and um yeah i don't know like a lot

00:19:11,039 --> 00:19:14,880
about three loops itself

00:19:12,400 --> 00:19:16,559
but um with live you can also perform an

00:19:14,880 --> 00:19:18,720
expensive performance tool for a lot of

00:19:16,559 --> 00:19:21,520
artists that i use on stage

00:19:18,720 --> 00:19:22,880
as well as push it's probably the main

00:19:21,520 --> 00:19:25,280
difference right then

00:19:22,880 --> 00:19:26,400
yeah yeah fruity loops was my first uh

00:19:25,280 --> 00:19:29,120
audio preparation

00:19:26,400 --> 00:19:29,760
for looping drums for my practice

00:19:29,120 --> 00:19:32,720
practice

00:19:29,760 --> 00:19:35,039
it's awesome thanks for bringing back

00:19:32,720 --> 00:19:38,640
good memories

00:19:35,039 --> 00:19:41,679
yeah thank you okay i hope there's

00:19:38,640 --> 00:19:43,520
uh more questions coming but if not now

00:19:41,679 --> 00:19:44,559
if you have something coming up later

00:19:43,520 --> 00:19:47,679
we'll be

00:19:44,559 --> 00:19:49,440
available in our group so please feel

00:19:47,679 --> 00:19:52,080
free to say hi later and

00:19:49,440 --> 00:19:53,840
chat with us over there okay there's

00:19:52,080 --> 00:19:57,200
another question

00:19:53,840 --> 00:19:57,200
from daniela

00:20:01,120 --> 00:20:04,240
if you're asking philosophical questions

00:20:02,880 --> 00:20:06,559
do you think that programmers and

00:20:04,240 --> 00:20:08,240
musicians are solving similar problems

00:20:06,559 --> 00:20:09,280
they both try to achieve a certain

00:20:08,240 --> 00:20:11,679
effect

00:20:09,280 --> 00:20:13,280
express a certain idea solve a problem

00:20:11,679 --> 00:20:15,520
with limited and what

00:20:13,280 --> 00:20:16,320
quite well defined resources within

00:20:15,520 --> 00:20:19,679
structures

00:20:16,320 --> 00:20:19,679
that are also

00:20:19,760 --> 00:20:25,440
i really like this question really nice

00:20:23,120 --> 00:20:25,440
question

00:20:25,679 --> 00:20:32,799
i do think programming is a creative

00:20:29,360 --> 00:20:36,960
job actually as well like we do solve

00:20:32,799 --> 00:20:40,559
problems and want to turn ideas into

00:20:36,960 --> 00:20:41,840
something um other people

00:20:40,559 --> 00:20:44,480
yeah something that would connect us

00:20:41,840 --> 00:20:47,200
with other people let's say

00:20:44,480 --> 00:20:48,000
also it's actually interesting just

00:20:47,200 --> 00:20:51,600
maybe to

00:20:48,000 --> 00:20:55,120
see how the concept of music like the

00:20:51,600 --> 00:20:56,799
ways programmers uh communicate with

00:20:55,120 --> 00:20:57,919
each other mathematicians communicate

00:20:56,799 --> 00:20:59,760
with each other and musicians

00:20:57,919 --> 00:21:01,520
communicate with each other are similar

00:20:59,760 --> 00:21:04,799
we have our domain languages

00:21:01,520 --> 00:21:08,480
right like music notation or

00:21:04,799 --> 00:21:10,559
like code how to call them like they're

00:21:08,480 --> 00:21:11,919
the same concepts that we can translate

00:21:10,559 --> 00:21:14,559
between

00:21:11,919 --> 00:21:16,159
different languages um there are some

00:21:14,559 --> 00:21:18,320
patterns that we use

00:21:16,159 --> 00:21:20,320
that are pretty well known just like

00:21:18,320 --> 00:21:21,440
movie patterns in music composition

00:21:20,320 --> 00:21:24,480
right

00:21:21,440 --> 00:21:27,120
or um some notations that everybody

00:21:24,480 --> 00:21:30,159
understands

00:21:27,120 --> 00:21:32,000
or the same for mathematics

00:21:30,159 --> 00:21:34,559
and equations i think it's all like

00:21:32,000 --> 00:21:36,559
beautiful and relates to each other

00:21:34,559 --> 00:21:37,919
i think it's also said that people who

00:21:36,559 --> 00:21:40,720
tend who are

00:21:37,919 --> 00:21:41,280
good with maths tend to be good with

00:21:40,720 --> 00:21:43,440
like

00:21:41,280 --> 00:21:44,799
music to languages this is all

00:21:43,440 --> 00:21:48,159
interesting that make

00:21:44,799 --> 00:21:49,360
thinking patterns are similar or the

00:21:48,159 --> 00:21:52,320
parts of our

00:21:49,360 --> 00:21:53,520
brains that connect together to solve

00:21:52,320 --> 00:21:56,240
these problems in

00:21:53,520 --> 00:21:58,080
creative ways are usually same the same

00:21:56,240 --> 00:22:02,000
parts of our brains are

00:21:58,080 --> 00:22:03,440
activated which is very interesting

00:22:02,000 --> 00:22:04,960
and yeah i have to work with kind of a

00:22:03,440 --> 00:22:05,440
grammar too yeah exactly then you know

00:22:04,960 --> 00:22:08,159
this

00:22:05,440 --> 00:22:08,880
is what i was aiming at i think this is

00:22:08,159 --> 00:22:12,080
uh

00:22:08,880 --> 00:22:14,240
very true and uh

00:22:12,080 --> 00:22:16,480
yeah as i said it seems to have been

00:22:14,240 --> 00:22:19,520
noticed that

00:22:16,480 --> 00:22:21,280
but people who are good with maths or

00:22:19,520 --> 00:22:22,880
are good with music like show interest

00:22:21,280 --> 00:22:25,600
in both domains so

00:22:22,880 --> 00:22:26,799
i find it fascinating and like to think

00:22:25,600 --> 00:22:28,559
about it

00:22:26,799 --> 00:22:31,440
uh there is i think erica you have this

00:22:28,559 --> 00:22:34,559
book music medics or something like that

00:22:31,440 --> 00:22:37,600
yeah maybe you can tell more about this

00:22:34,559 --> 00:22:40,559
it's actually sitting on my desk but i

00:22:37,600 --> 00:22:42,880
wanted to i think while a quota

00:22:40,559 --> 00:22:45,600
um i think i like the philosophical

00:22:42,880 --> 00:22:47,280
question because i find that the

00:22:45,600 --> 00:22:48,960
when you're going really deep into

00:22:47,280 --> 00:22:50,480
solving a coding problem you kind of get

00:22:48,960 --> 00:22:51,760
into this very meditative

00:22:50,480 --> 00:22:53,360
creative state where you're kind of

00:22:51,760 --> 00:22:54,720
going okay one more thing at a time and

00:22:53,360 --> 00:22:55,280
you really kind of go into it and you

00:22:54,720 --> 00:22:57,280
can lose

00:22:55,280 --> 00:22:58,400
your sense of time a little bit i find

00:22:57,280 --> 00:22:59,600
that it's the same type of feeling that

00:22:58,400 --> 00:23:01,280
you have when you're

00:22:59,600 --> 00:23:02,799
kind of putting together like a musical

00:23:01,280 --> 00:23:04,400
piece or somehow the feeling that you

00:23:02,799 --> 00:23:06,320
have when you're solving through it or

00:23:04,400 --> 00:23:08,159
thinking in these patterns is very

00:23:06,320 --> 00:23:12,080
similar and i think that's also

00:23:08,159 --> 00:23:14,960
something yeah why i enjoy both

00:23:12,080 --> 00:23:18,000
a lot the state of being in a flow this

00:23:14,960 --> 00:23:19,679
blissful state right

00:23:18,000 --> 00:23:21,280
yeah i can show off this book that i've

00:23:19,679 --> 00:23:23,520
opened a few times but it's very

00:23:21,280 --> 00:23:26,559
very nice music maddox and it's showing

00:23:23,520 --> 00:23:26,559
the link between the two

00:23:29,840 --> 00:23:35,520
cool yeah please share your

00:23:33,679 --> 00:23:37,600
findings from the book it would be super

00:23:35,520 --> 00:23:40,240
interesting

00:23:37,600 --> 00:23:41,760
i mean i think it touches on kind of

00:23:40,240 --> 00:23:45,120
like not necessarily

00:23:41,760 --> 00:23:46,960
super um hard uh digital signal

00:23:45,120 --> 00:23:47,440
processing stuff but rather really nice

00:23:46,960 --> 00:23:49,200
like

00:23:47,440 --> 00:23:50,880
simple applications and functions that

00:23:49,200 --> 00:23:53,440
you know in music and

00:23:50,880 --> 00:23:56,159
yeah maybe a talk if you read it with me

00:23:53,440 --> 00:23:56,159
make a talk on it

00:23:56,400 --> 00:23:59,440
not a better idea at least a lightning

00:23:58,400 --> 00:24:03,279
to it

00:23:59,440 --> 00:24:03,279
yeah i might be talking a second

00:24:03,600 --> 00:24:08,000
cool does anyone else have any more

00:24:05,600 --> 00:24:08,000
questions

00:24:10,159 --> 00:24:13,760
philosophical technical

00:24:16,840 --> 00:24:20,320
generals

00:24:18,320 --> 00:24:22,559
maybe in the meantime uh we could

00:24:20,320 --> 00:24:25,679
mention that after the conference

00:24:22,559 --> 00:24:28,640
you can uh reach our team or both of us

00:24:25,679 --> 00:24:31,520
on twitter we have a

00:24:28,640 --> 00:24:33,039
special twitter account dedicated to our

00:24:31,520 --> 00:24:34,159
product development team it's called

00:24:33,039 --> 00:24:38,159
ableton dev

00:24:34,159 --> 00:24:40,799
maybe we can link to it to always

00:24:38,159 --> 00:24:43,520
reach out to us there very happy to meet

00:24:40,799 --> 00:24:46,720
you all and talk with you

00:24:43,520 --> 00:24:50,080
yeah our python teams are growing so

00:24:46,720 --> 00:24:52,000
this is like like we are like our

00:24:50,080 --> 00:24:54,000
flagship software live is built in c

00:24:52,000 --> 00:24:56,159
plus plus but it's nice to see that the

00:24:54,000 --> 00:24:59,520
python community within our

00:24:56,159 --> 00:25:00,559
company is also growing actually it's

00:24:59,520 --> 00:25:02,799
maybe good to mention

00:25:00,559 --> 00:25:04,480
um so the the team that i'm working on

00:25:02,799 --> 00:25:05,360
the push team and anna used to also work

00:25:04,480 --> 00:25:08,400
on this team

00:25:05,360 --> 00:25:11,039
so we are using primarily python um to

00:25:08,400 --> 00:25:12,240
um control the hardware to to write the

00:25:11,039 --> 00:25:14,320
features for the hardware

00:25:12,240 --> 00:25:15,600
which is actually quite cool it seems

00:25:14,320 --> 00:25:18,320
you wouldn't guess that like

00:25:15,600 --> 00:25:20,480
python is running on this uh or a python

00:25:18,320 --> 00:25:22,480
that the computer is running with um

00:25:20,480 --> 00:25:24,320
python on it to control the hardware but

00:25:22,480 --> 00:25:25,679
it's really awesome and so we work in

00:25:24,320 --> 00:25:27,440
in python and a couple of different

00:25:25,679 --> 00:25:28,480
teams of ableton so it's not just c plus

00:25:27,440 --> 00:25:32,880
plus

00:25:28,480 --> 00:25:37,200
ah thank you rob thanks for listening

00:25:32,880 --> 00:25:40,159
okay no other questions

00:25:37,200 --> 00:25:42,880
maybe just as a if anybody is um

00:25:40,159 --> 00:25:47,279
interested in learning more about

00:25:42,880 --> 00:25:49,760
music theory or learning um

00:25:47,279 --> 00:25:50,799
sound design like some basics of uh

00:25:49,760 --> 00:25:52,880
computer music

00:25:50,799 --> 00:25:53,840
like synthesizer sounds maybe we can

00:25:52,880 --> 00:25:56,320
link to

00:25:53,840 --> 00:25:56,960
or ableton's learning offer that's

00:25:56,320 --> 00:26:00,400
available

00:25:56,960 --> 00:26:02,400
for free in in a browser i think

00:26:00,400 --> 00:26:04,799
chrome currently has the best support

00:26:02,400 --> 00:26:07,360
for web audio

00:26:04,799 --> 00:26:08,400
and is therefore a recommended browser

00:26:07,360 --> 00:26:11,600
to be used but

00:26:08,400 --> 00:26:11,919
um yeah we have like two websites that

00:26:11,600 --> 00:26:14,960
are

00:26:11,919 --> 00:26:18,000
we think fun to play with and quite

00:26:14,960 --> 00:26:19,760
educational so um the

00:26:18,000 --> 00:26:21,760
erica please correct me if i'm wrong are

00:26:19,760 --> 00:26:24,240
the links

00:26:21,760 --> 00:26:26,480
learning music that ableton to come and

00:26:24,240 --> 00:26:29,440
learning sin

00:26:26,480 --> 00:26:30,000
we'll link to them in the chat i just i

00:26:29,440 --> 00:26:33,520
just talked

00:26:30,000 --> 00:26:33,520
perfect thank you very much learning

00:26:33,799 --> 00:26:36,159
syntheticmusic.ableton.com please feel

00:26:35,360 --> 00:26:38,000
free to

00:26:36,159 --> 00:26:39,360
check them out and let us know what you

00:26:38,000 --> 00:26:42,240
think of them

00:26:39,360 --> 00:26:42,240
it'll be super cool

00:26:45,360 --> 00:26:50,159
okay maybe

00:26:50,320 --> 00:26:54,159
uh i think just one thing i think we

00:26:52,559 --> 00:26:57,600
lost the lengthy for

00:26:54,159 --> 00:26:57,600
uh repo erica

00:26:58,159 --> 00:27:02,159
if you could share this also that would

00:27:00,320 --> 00:27:05,679
be great

00:27:02,159 --> 00:27:07,440
cool yes here's the natural repository

00:27:05,679 --> 00:27:11,440
wait some snippets there

00:27:07,440 --> 00:27:11,440
complete ready to be reused

00:27:12,240 --> 00:27:14,480
yes

00:27:16,400 --> 00:27:21,600
cool okay if there's no further

00:27:19,039 --> 00:27:25,200
questions then maybe

00:27:21,600 --> 00:27:25,200
i think we'll sign off

00:27:25,279 --> 00:27:29,039
cool thank you everybody it was really

00:27:27,279 --> 00:27:31,440
lovely being here

00:27:29,039 --> 00:27:35,840
have a nice day thank you visit that us

00:27:31,440 --> 00:27:35,840
at the booth

00:27:42,360 --> 00:27:45,360

YouTube URL: https://www.youtube.com/watch?v=6pnJ3tWfC3o


