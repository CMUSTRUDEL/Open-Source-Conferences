Title: Vonage Sponsored Talk || PyCon Africa 2020
Publication date: 2020-08-30
Playlist: PyCon Africa 2020
Description: 
	
Captions: 
	00:00:16,160 --> 00:00:19,359
hello

00:00:17,039 --> 00:00:22,400
my name is diana rodriguez i'm going to

00:00:19,359 --> 00:00:24,480
share my slides

00:00:22,400 --> 00:00:26,480
right now and i'm really excited for

00:00:24,480 --> 00:00:28,880
this opportunity to

00:00:26,480 --> 00:00:30,000
share some knowledge with you and the

00:00:28,880 --> 00:00:33,280
name of my talk

00:00:30,000 --> 00:00:35,440
is smile the web is your photo booth

00:00:33,280 --> 00:00:37,360
i'd like to introduce myself my name is

00:00:35,440 --> 00:00:39,120
diana rodriguez and i'm a python

00:00:37,360 --> 00:00:41,760
developer at wikileaks

00:00:39,120 --> 00:00:42,399
you can find me on twitter co2582 and my

00:00:41,760 --> 00:00:45,120
website

00:00:42,399 --> 00:00:45,600
superdie dev i'm also a google developer

00:00:45,120 --> 00:00:47,760
expert

00:00:45,600 --> 00:00:48,960
i would zero ambassador and microsoft

00:00:47,760 --> 00:00:52,160
mvp

00:00:48,960 --> 00:00:53,039
since we know who am i i would like to

00:00:52,160 --> 00:00:56,559
remind you all

00:00:53,039 --> 00:00:58,559
of who am i not i'm not the oracle

00:00:56,559 --> 00:01:00,399
that means i don't know all the answers

00:00:58,559 --> 00:01:01,359
and after 20 years in this industry i

00:01:00,399 --> 00:01:04,799
feel like

00:01:01,359 --> 00:01:05,920
um we're at the point where you know we

00:01:04,799 --> 00:01:08,960
learn something

00:01:05,920 --> 00:01:11,200
new every day but let's

00:01:08,960 --> 00:01:12,479
get to our application and what we're

00:01:11,200 --> 00:01:16,640
going to be building

00:01:12,479 --> 00:01:20,080
with python and vue.js

00:01:16,640 --> 00:01:21,280
so what does it do it's it's a photo

00:01:20,080 --> 00:01:23,600
booth right

00:01:21,280 --> 00:01:24,400
so we have to capture a stream from a

00:01:23,600 --> 00:01:27,439
webcam

00:01:24,400 --> 00:01:31,119
we also need a snap pick button

00:01:27,439 --> 00:01:34,079
with a countdown a five second uh

00:01:31,119 --> 00:01:35,200
countdown it has auto mode so when it

00:01:34,079 --> 00:01:38,320
detects a smile

00:01:35,200 --> 00:01:39,520
it will snap a picture um a jar or a

00:01:38,320 --> 00:01:40,720
drawer for captures

00:01:39,520 --> 00:01:42,960
where we're going to put our pictures

00:01:40,720 --> 00:01:47,200
once we snap them and

00:01:42,960 --> 00:01:50,479
i click to download button button

00:01:47,200 --> 00:01:51,840
and an sms sharing capability and the

00:01:50,479 --> 00:01:55,920
tools we're going to use

00:01:51,840 --> 00:01:58,159
of course flask because

00:01:55,920 --> 00:01:59,840
for me flask is very special i love

00:01:58,159 --> 00:02:02,640
python and i love flask

00:01:59,840 --> 00:02:05,600
we'll be using the vonage video and

00:02:02,640 --> 00:02:07,759
communications apis

00:02:05,600 --> 00:02:09,440
for capturing the script the stream and

00:02:07,759 --> 00:02:13,200
the screen

00:02:09,440 --> 00:02:16,480
and for the sms we're going to use

00:02:13,200 --> 00:02:17,760
azure app service and azure cognitive

00:02:16,480 --> 00:02:21,200
services

00:02:17,760 --> 00:02:25,920
excuse me i'm going to be using um

00:02:21,200 --> 00:02:28,720
javascript for the front end with ujs

00:02:25,920 --> 00:02:30,640
so this for me is the perfect

00:02:28,720 --> 00:02:33,200
combination

00:02:30,640 --> 00:02:34,640
but i think it's time to talk about the

00:02:33,200 --> 00:02:37,680
code

00:02:34,640 --> 00:02:41,280
and this app was very friendly and

00:02:37,680 --> 00:02:43,040
and very nice to develop so to

00:02:41,280 --> 00:02:44,879
implement this project we use view for

00:02:43,040 --> 00:02:46,000
the front end and on the back end we use

00:02:44,879 --> 00:02:48,239
flask

00:02:46,000 --> 00:02:50,000
um the strategy is to create a static

00:02:48,239 --> 00:02:53,280
version using

00:02:50,000 --> 00:02:54,640
vue.js and then we're going to read that

00:02:53,280 --> 00:02:57,280
static build

00:02:54,640 --> 00:02:59,200
from our flash server so um and here we

00:02:57,280 --> 00:03:00,879
can appreciate that we're creating a

00:02:59,200 --> 00:03:02,840
vue.js instance

00:03:00,879 --> 00:03:05,040
that we're going to use to render our

00:03:02,840 --> 00:03:09,280
templates and we're using

00:03:05,040 --> 00:03:12,400
beautify as our graphic plugin

00:03:09,280 --> 00:03:15,040
then we have all the variables of our

00:03:12,400 --> 00:03:15,040
application

00:03:15,120 --> 00:03:20,560
the reason why i chose to do this on the

00:03:18,239 --> 00:03:22,560
view side is because

00:03:20,560 --> 00:03:23,680
the variables that are defined in the

00:03:22,560 --> 00:03:25,360
data section

00:03:23,680 --> 00:03:27,599
in the case of ugs have the

00:03:25,360 --> 00:03:31,440
characteristic of being reactive

00:03:27,599 --> 00:03:33,120
so anything we make any changes we make

00:03:31,440 --> 00:03:34,560
is going to be in that section it's

00:03:33,120 --> 00:03:36,400
going to be reflected in the template

00:03:34,560 --> 00:03:40,239
automatically

00:03:36,400 --> 00:03:42,159
um so the medullary point

00:03:40,239 --> 00:03:43,599
the the most important part is our

00:03:42,159 --> 00:03:47,200
camera and

00:03:43,599 --> 00:03:50,159
we we have to capture obviously um

00:03:47,200 --> 00:03:51,200
everything from the camera so we're

00:03:50,159 --> 00:03:54,640
gonna have a

00:03:51,200 --> 00:03:57,519
video div with a publisher

00:03:54,640 --> 00:03:58,560
which is what you see right now and and

00:03:57,519 --> 00:04:01,920
here we're going to

00:03:58,560 --> 00:04:05,040
insert the video stream and this is

00:04:01,920 --> 00:04:08,400
by initializing open talk and

00:04:05,040 --> 00:04:09,519
let's see um there's a method called

00:04:08,400 --> 00:04:12,239
initialize session

00:04:09,519 --> 00:04:14,879
this is still on the client side on on

00:04:12,239 --> 00:04:17,680
the front end um

00:04:14,879 --> 00:04:19,440
so once we initialize all the data

00:04:17,680 --> 00:04:22,560
usually using the um

00:04:19,440 --> 00:04:25,440
session id and tokens um this

00:04:22,560 --> 00:04:26,560
will have the browser to ask for

00:04:25,440 --> 00:04:28,560
permission

00:04:26,560 --> 00:04:30,240
and then when we allow it it's going to

00:04:28,560 --> 00:04:33,360
show our cam and then

00:04:30,240 --> 00:04:37,440
we can capture the stream uh

00:04:33,360 --> 00:04:40,880
we'll need uh take a snap picture

00:04:37,440 --> 00:04:42,400
um so we need a button and once we click

00:04:40,880 --> 00:04:43,520
on that button then we're going to

00:04:42,400 --> 00:04:45,600
execute

00:04:43,520 --> 00:04:47,280
a method called analyze and it's going

00:04:45,600 --> 00:04:49,919
to detect the emotion

00:04:47,280 --> 00:04:51,919
in the users so this to detect if

00:04:49,919 --> 00:04:54,000
someone has smile or not

00:04:51,919 --> 00:04:55,840
and if not it will return an error

00:04:54,000 --> 00:04:58,960
message

00:04:55,840 --> 00:05:02,479
and this is a very extensive

00:04:58,960 --> 00:05:05,759
and and an interesting method um

00:05:02,479 --> 00:05:07,680
so in short words we're basically

00:05:05,759 --> 00:05:10,720
capturing a frame from the stream

00:05:07,680 --> 00:05:11,120
using um the publisher then we convert

00:05:10,720 --> 00:05:14,639
those

00:05:11,120 --> 00:05:17,840
to blob and then we send those through

00:05:14,639 --> 00:05:21,360
an age expedition to the

00:05:17,840 --> 00:05:23,980
face api and then

00:05:21,360 --> 00:05:25,520
we have to analyze if the

00:05:23,980 --> 00:05:28,800
[Music]

00:05:25,520 --> 00:05:31,120
um if the there's a response

00:05:28,800 --> 00:05:32,720
there's an emotion if happiness is

00:05:31,120 --> 00:05:36,720
detected it's a float between

00:05:32,720 --> 00:05:38,560
0 and and and 1 so if it's 0.5 which

00:05:36,720 --> 00:05:39,520
means there's a probability that there's

00:05:38,560 --> 00:05:42,479
a smile

00:05:39,520 --> 00:05:43,520
it's enough for us if not then it will

00:05:42,479 --> 00:05:47,680
return

00:05:43,520 --> 00:05:50,000
an error message and this is the method

00:05:47,680 --> 00:05:50,960
then in the control panel we have to

00:05:50,000 --> 00:05:55,280
download the

00:05:50,960 --> 00:05:59,199
images and then also have to send sms

00:05:55,280 --> 00:06:03,120
the download images button executes

00:05:59,199 --> 00:06:06,000
a method called download images and

00:06:03,120 --> 00:06:07,199
it basically will go through each of the

00:06:06,000 --> 00:06:08,960
images

00:06:07,199 --> 00:06:10,240
and it will apply a method called

00:06:08,960 --> 00:06:13,039
forcefi file

00:06:10,240 --> 00:06:15,919
download that creates a link to the

00:06:13,039 --> 00:06:18,639
image without inserting it in the dom

00:06:15,919 --> 00:06:19,680
and then it will execute a click from

00:06:18,639 --> 00:06:23,039
javascript

00:06:19,680 --> 00:06:26,880
to force that

00:06:23,039 --> 00:06:28,690
that download on a python site which is

00:06:26,880 --> 00:06:30,080
my most favorite site

00:06:28,690 --> 00:06:32,880
[Music]

00:06:30,080 --> 00:06:35,120
we had to do a very special

00:06:32,880 --> 00:06:36,160
configuration and don't worry about this

00:06:35,120 --> 00:06:39,759
wall of code

00:06:36,160 --> 00:06:42,880
i just love showing my work

00:06:39,759 --> 00:06:43,120
so we need a directory for our snaps to

00:06:42,880 --> 00:06:47,039
be

00:06:43,120 --> 00:06:50,400
stored to be able to share them

00:06:47,039 --> 00:06:53,440
so the the main function of this um

00:06:50,400 --> 00:06:55,840
script is to serve the front end to

00:06:53,440 --> 00:06:58,400
serve the static build of view

00:06:55,840 --> 00:06:59,120
and we're also creating an endpoint

00:06:58,400 --> 00:07:02,960
where the

00:06:59,120 --> 00:07:03,680
um what we can send the sms we can send

00:07:02,960 --> 00:07:06,000
the images

00:07:03,680 --> 00:07:08,240
in this case to make it even easier

00:07:06,000 --> 00:07:12,800
we're going to send the direct link

00:07:08,240 --> 00:07:16,319
to that image so

00:07:12,800 --> 00:07:17,680
here we're basically defining the nexmo

00:07:16,319 --> 00:07:21,360
client

00:07:17,680 --> 00:07:24,800
for forum rsms and

00:07:21,360 --> 00:07:26,080
uh we have to verify if the snaps

00:07:24,800 --> 00:07:29,280
directory exists

00:07:26,080 --> 00:07:30,880
if and if not we create it and then we

00:07:29,280 --> 00:07:31,759
make it public and that's where we're

00:07:30,880 --> 00:07:35,199
going to store

00:07:31,759 --> 00:07:38,560
our pictures then from

00:07:35,199 --> 00:07:39,840
um we take from our from our static

00:07:38,560 --> 00:07:42,960
build

00:07:39,840 --> 00:07:47,120
and then we have to

00:07:42,960 --> 00:07:50,319
um send the messages so

00:07:47,120 --> 00:07:52,800
what this do what this does is to

00:07:50,319 --> 00:07:55,039
move the image to the snaps directory

00:07:52,800 --> 00:07:58,479
with an auto generated name

00:07:55,039 --> 00:08:01,120
and send the text message to the user

00:07:58,479 --> 00:08:02,479
using the link of the image that we just

00:08:01,120 --> 00:08:04,800
generated

00:08:02,479 --> 00:08:06,479
and one thing i love about flask is the

00:08:04,800 --> 00:08:09,120
simplicity of the code

00:08:06,479 --> 00:08:10,879
the fact that is readable and and the

00:08:09,120 --> 00:08:13,599
right decorators

00:08:10,879 --> 00:08:16,720
make it really understandable so i am a

00:08:13,599 --> 00:08:20,000
big fan of flask

00:08:16,720 --> 00:08:23,120
then this is the body of the message

00:08:20,000 --> 00:08:26,560
and in case of having

00:08:23,120 --> 00:08:30,400
any errors from um

00:08:26,560 --> 00:08:31,919
the view side when you click on on the

00:08:30,400 --> 00:08:35,440
send sms

00:08:31,919 --> 00:08:37,919
uh button two things will happen

00:08:35,440 --> 00:08:38,479
the value of the variable next mode

00:08:37,919 --> 00:08:42,240
dialog

00:08:38,479 --> 00:08:46,000
will change its value to true showing

00:08:42,240 --> 00:08:49,360
that the um the message is being sent

00:08:46,000 --> 00:08:49,760
um this is where we're going to input

00:08:49,360 --> 00:08:52,000
the

00:08:49,760 --> 00:08:53,120
the phone number to where we're going to

00:08:52,000 --> 00:08:55,680
send the messages

00:08:53,120 --> 00:08:56,880
and we're going to select the image that

00:08:55,680 --> 00:09:00,080
we want to send

00:08:56,880 --> 00:09:00,720
and then the second action is the method

00:09:00,080 --> 00:09:04,240
get strip

00:09:00,720 --> 00:09:08,000
image which consists

00:09:04,240 --> 00:09:11,120
on applying filters and if we apply

00:09:08,000 --> 00:09:15,200
the filters then all the images will get

00:09:11,120 --> 00:09:20,399
um concatenated and it will basically

00:09:15,200 --> 00:09:23,440
make it a as a strip like a photo booth

00:09:20,399 --> 00:09:24,399
and then from there we have the send

00:09:23,440 --> 00:09:27,600
button

00:09:24,399 --> 00:09:30,399
and um if if the

00:09:27,600 --> 00:09:31,680
the the method didn't fail if everything

00:09:30,399 --> 00:09:35,360
went okay

00:09:31,680 --> 00:09:38,480
uh the cinemas uh method

00:09:35,360 --> 00:09:40,399
will execute an ajax petition to the end

00:09:38,480 --> 00:09:43,680
point we created

00:09:40,399 --> 00:09:45,200
and then that's how it goes this is this

00:09:43,680 --> 00:09:48,959
is basically

00:09:45,200 --> 00:09:53,040
the body of the message and

00:09:48,959 --> 00:09:56,880
then that's it then it's time

00:09:53,040 --> 00:10:00,240
for my favorite part deployment

00:09:56,880 --> 00:10:04,160
setting everything on fire so for this

00:10:00,240 --> 00:10:06,640
i decided to use azure app service

00:10:04,160 --> 00:10:08,240
because it's much friendlier we're

00:10:06,640 --> 00:10:11,360
basically configuring

00:10:08,240 --> 00:10:13,040
to deploy from a docker container you

00:10:11,360 --> 00:10:16,560
will see the repo

00:10:13,040 --> 00:10:17,279
i'm using docker hub for my container so

00:10:16,560 --> 00:10:20,560
it's

00:10:17,279 --> 00:10:24,240
much easier to do it um this is

00:10:20,560 --> 00:10:26,640
what i use this container and then um

00:10:24,240 --> 00:10:27,279
just include the details the repository

00:10:26,640 --> 00:10:29,519
name

00:10:27,279 --> 00:10:32,800
issue the repository the container name

00:10:29,519 --> 00:10:32,800
etc as you can see

00:10:33,200 --> 00:10:36,320
my username and password and it will

00:10:35,200 --> 00:10:39,519
pull the image

00:10:36,320 --> 00:10:40,720
with whatever tag i specify in this case

00:10:39,519 --> 00:10:44,240
this one

00:10:40,720 --> 00:10:48,000
and in a few clicks the deployment is

00:10:44,240 --> 00:10:48,959
on its way and i'm sure you want to see

00:10:48,000 --> 00:10:53,200
a demo

00:10:48,959 --> 00:10:53,200
so go to

00:10:55,000 --> 00:10:59,360
opentalk.nexmo.azurewebsites.net

00:10:57,040 --> 00:11:00,399
and you can also find the give her

00:10:59,360 --> 00:11:03,680
repository

00:11:00,399 --> 00:11:04,959
it's github open talk community forward

00:11:03,680 --> 00:11:08,240
slash open talk

00:11:04,959 --> 00:11:10,240
photo booth i um

00:11:08,240 --> 00:11:11,920
have to say that this was an amazing

00:11:10,240 --> 00:11:15,440
experience um

00:11:11,920 --> 00:11:18,480
building it and the idea with this is

00:11:15,440 --> 00:11:20,800
to show you that we can we can have the

00:11:18,480 --> 00:11:22,560
best of both worlds the best of

00:11:20,800 --> 00:11:23,839
front-end development with whatever

00:11:22,560 --> 00:11:26,880
framework of choice

00:11:23,839 --> 00:11:27,440
the best of python using flask as a back

00:11:26,880 --> 00:11:30,000
end

00:11:27,440 --> 00:11:31,519
we can also use flask as our

00:11:30,000 --> 00:11:35,120
full-fledged server

00:11:31,519 --> 00:11:38,160
deploying front-end and and our back-end

00:11:35,120 --> 00:11:42,160
capabilities and then um adding the

00:11:38,160 --> 00:11:45,200
deployment side uh with uh docker

00:11:42,160 --> 00:11:48,320
containers and and that

00:11:45,200 --> 00:11:51,440
um little bit of of

00:11:48,320 --> 00:11:54,959
um yeah the devops infrastructure

00:11:51,440 --> 00:11:57,839
side of the operation

00:11:54,959 --> 00:12:00,160
thank you very much i really enjoyed

00:11:57,839 --> 00:12:03,240
sharing this with you very briefly

00:12:00,160 --> 00:12:04,720
again you can find me on twitter

00:12:03,240 --> 00:12:08,000
atka2582

00:12:04,720 --> 00:12:08,399
my website is superdye.dev and that's

00:12:08,000 --> 00:12:11,839
the

00:12:08,399 --> 00:12:12,480
um the slides url so you can check them

00:12:11,839 --> 00:12:16,000
out

00:12:12,480 --> 00:12:18,959
make sure you check the repository

00:12:16,000 --> 00:12:21,120
and i will go back to this slide again

00:12:18,959 --> 00:12:22,639
make sure you you check the repository

00:12:21,120 --> 00:12:24,560
there are two branches

00:12:22,639 --> 00:12:25,839
one where i'm doing the same thing with

00:12:24,560 --> 00:12:29,440
javascript then

00:12:25,839 --> 00:12:32,639
the one where i'm using flask

00:12:29,440 --> 00:12:33,440
for this beautiful application i hope

00:12:32,639 --> 00:12:36,560
you have

00:12:33,440 --> 00:12:39,200
an amazing amazing time

00:12:36,560 --> 00:12:41,440
and it was great to share this with you

00:12:39,200 --> 00:12:41,440
stay

00:12:49,160 --> 00:12:52,160

YouTube URL: https://www.youtube.com/watch?v=reDjhZ1AdWk


