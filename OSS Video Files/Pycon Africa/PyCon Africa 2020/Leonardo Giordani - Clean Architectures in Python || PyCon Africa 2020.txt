Title: Leonardo Giordani - Clean Architectures in Python || PyCon Africa 2020
Publication date: 2020-08-29
Playlist: PyCon Africa 2020
Description: 
	Architectural considerations are often overlooked by developers or completely delegated to a framework. We should start once again discussing how applications are structured, how components are connected and how to lower coupling between different parts of a system, to avoid creating software that cannot easily be maintained or changed. The "clean architecture" model predates Robert Martin, who recently brought it back to the attention of the community, and is a way of structuring applications that leverages layers separation and internal APIs to achieve a very tidy, fully-tested, and loosely coupled system.


The talk introduces the main ideas of the architecture, showing how the layers can be implemented in Python, following the content of the book "Clean Architectures in Python" edited by Leanpub. The book recently reached 8,000 downloads and many readers found it useful to start learning how to test software and how to structure an application without relying entirely on the framework.
Captions: 
	00:00:14,719 --> 00:00:20,720
so first of all let me say

00:00:16,800 --> 00:00:24,400
i am so happy to be uh with you

00:00:20,720 --> 00:00:27,359
today uh i i like the python

00:00:24,400 --> 00:00:30,160
african community a lot i believe it's i

00:00:27,359 --> 00:00:34,399
i was telling marlene

00:00:30,160 --> 00:00:36,000
i think it's a very alive community i

00:00:34,399 --> 00:00:38,079
like this

00:00:36,000 --> 00:00:39,280
at the same time i'm a bit sad because

00:00:38,079 --> 00:00:41,120
i'm not really there

00:00:39,280 --> 00:00:42,320
i'm not there with you right wherever

00:00:41,120 --> 00:00:45,600
you are

00:00:42,320 --> 00:00:47,200
so i i just want to say

00:00:45,600 --> 00:00:49,520
okay it's okay to have these

00:00:47,200 --> 00:00:54,320
technologies but the human touches

00:00:49,520 --> 00:00:57,600
is invaluable um take this coronavirus

00:00:54,320 --> 00:01:01,199
um leaving aside this let's go on with

00:00:57,600 --> 00:01:02,960
today's topic the clean architectures

00:01:01,199 --> 00:01:05,119
today i will talk about clean

00:01:02,960 --> 00:01:07,680
architectures in python or

00:01:05,119 --> 00:01:08,799
more in general clean architectures and

00:01:07,680 --> 00:01:10,799
the

00:01:08,799 --> 00:01:12,320
subtitle of this presentation is a tale

00:01:10,799 --> 00:01:15,520
of durability utility

00:01:12,320 --> 00:01:16,640
and beauty and i hope it will be clear

00:01:15,520 --> 00:01:20,240
in minutes why

00:01:16,640 --> 00:01:22,960
i gave this subtitle to the presentation

00:01:20,240 --> 00:01:24,080
very quickly about me i am a software

00:01:22,960 --> 00:01:28,479
engineer and

00:01:24,080 --> 00:01:30,720
a blogger i currently work in london uk

00:01:28,479 --> 00:01:32,640
i use the blog on the digital cart

00:01:30,720 --> 00:01:34,159
online as you can see i'm reachable on

00:01:32,640 --> 00:01:37,759
twitter

00:01:34,159 --> 00:01:40,720
i am a cat person and i want to say it

00:01:37,759 --> 00:01:41,439
because there is one thing i value in

00:01:40,720 --> 00:01:42,880
cats

00:01:41,439 --> 00:01:45,200
aside from the fact that they are very

00:01:42,880 --> 00:01:47,920
beautiful they are

00:01:45,200 --> 00:01:48,799
curious they are full of curiosity they

00:01:47,920 --> 00:01:50,399
want to know

00:01:48,799 --> 00:01:52,560
you know if you put something new in a

00:01:50,399 --> 00:01:53,680
room the cat goes immediately to see

00:01:52,560 --> 00:01:56,240
what it is and

00:01:53,680 --> 00:01:57,040
i value this and i want to encourage you

00:01:56,240 --> 00:02:00,399
to be

00:01:57,040 --> 00:02:03,439
curious with life in general

00:02:00,399 --> 00:02:06,240
in in software development

00:02:03,439 --> 00:02:08,319
as well don't don't be you know don't be

00:02:06,240 --> 00:02:08,879
satisfied with just the surface don't be

00:02:08,319 --> 00:02:11,360
shallow

00:02:08,879 --> 00:02:12,480
go go deep into things that you like

00:02:11,360 --> 00:02:14,800
because this is where

00:02:12,480 --> 00:02:16,560
you can discover a path for you i

00:02:14,800 --> 00:02:20,080
believe

00:02:16,560 --> 00:02:22,160
okay so enough about me

00:02:20,080 --> 00:02:23,360
about clean architectures the first

00:02:22,160 --> 00:02:26,959
question i have

00:02:23,360 --> 00:02:28,800
today i want to answer try and answer

00:02:26,959 --> 00:02:30,239
is what is the definition of

00:02:28,800 --> 00:02:33,120
architecture

00:02:30,239 --> 00:02:35,519
i have here on in the slides uh the

00:02:33,120 --> 00:02:38,400
beautiful cathedral of florence

00:02:35,519 --> 00:02:38,959
and i i went there many times and i was

00:02:38,400 --> 00:02:40,640
like

00:02:38,959 --> 00:02:42,800
oh this is so this is amazing this is

00:02:40,640 --> 00:02:45,920
beautiful right what what a beautiful

00:02:42,800 --> 00:02:48,640
architecture what a beautiful building

00:02:45,920 --> 00:02:49,519
and so my question was why do we need

00:02:48,640 --> 00:02:52,560
why do we use

00:02:49,519 --> 00:02:53,200
this word architecture in software what

00:02:52,560 --> 00:02:57,120
is

00:02:53,200 --> 00:03:00,159
architecture and vitruvius

00:02:57,120 --> 00:03:03,120
who was a roman architect he

00:03:00,159 --> 00:03:05,040
was born around the 70 bc so more than

00:03:03,120 --> 00:03:07,120
2000 years ago

00:03:05,040 --> 00:03:09,280
and he wrote this book called the

00:03:07,120 --> 00:03:12,400
architecture which means

00:03:09,280 --> 00:03:14,480
about architecture in which

00:03:12,400 --> 00:03:15,680
it says many things and one of the

00:03:14,480 --> 00:03:18,000
important things

00:03:15,680 --> 00:03:19,920
he left us was this description of a

00:03:18,000 --> 00:03:22,239
building he says a building should have

00:03:19,920 --> 00:03:22,239
three

00:03:22,959 --> 00:03:28,319
features firmitas utilitas

00:03:26,159 --> 00:03:29,599
and venustas and they can be translated

00:03:28,319 --> 00:03:33,360
in english

00:03:29,599 --> 00:03:37,280
into durability utility and beauty

00:03:33,360 --> 00:03:39,840
and the subtitle of the talk

00:03:37,280 --> 00:03:41,040
durability might be translated as

00:03:39,840 --> 00:03:44,239
strength

00:03:41,040 --> 00:03:46,720
but i like i like doability more because

00:03:44,239 --> 00:03:48,879
i like the idea of something that

00:03:46,720 --> 00:03:50,560
lasts you know the stands the test of

00:03:48,879 --> 00:03:52,959
time

00:03:50,560 --> 00:03:53,840
think about your software now just just

00:03:52,959 --> 00:03:57,280
a second

00:03:53,840 --> 00:04:01,120
how many times is it durable

00:03:57,280 --> 00:04:04,959
useful and beautiful at the same time

00:04:01,120 --> 00:04:04,959
not many as for me

00:04:05,280 --> 00:04:08,959
i give you an example of what i mean

00:04:07,280 --> 00:04:12,319
with durability

00:04:08,959 --> 00:04:16,079
the unix operating system was

00:04:12,319 --> 00:04:17,280
conceived around the 70s so it's more

00:04:16,079 --> 00:04:20,880
than 40 years

00:04:17,280 --> 00:04:24,960
it's almost 50 now and now

00:04:20,880 --> 00:04:26,720
50 years after someone came up with unix

00:04:24,960 --> 00:04:28,960
system in a world that was

00:04:26,720 --> 00:04:31,040
so different from ours you know they

00:04:28,960 --> 00:04:32,400
didn't have mobile phones they didn't

00:04:31,040 --> 00:04:34,880
have laptops

00:04:32,400 --> 00:04:36,160
it was so different but 50 years after

00:04:34,880 --> 00:04:39,199
that

00:04:36,160 --> 00:04:41,280
we are still using i am giving you this

00:04:39,199 --> 00:04:43,600
presentation on a linux system

00:04:41,280 --> 00:04:44,639
and many of you are probably using an

00:04:43,600 --> 00:04:47,440
apple mac

00:04:44,639 --> 00:04:48,639
which are both derived from unix this is

00:04:47,440 --> 00:04:52,080
what i mean with your ability

00:04:48,639 --> 00:04:54,320
50 years guys not not 50 days

00:04:52,080 --> 00:04:55,600
which is the usual span of my software

00:04:54,320 --> 00:04:59,440
right

00:04:55,600 --> 00:05:02,560
okay so durability utility and beauty

00:04:59,440 --> 00:05:04,000
when i went a bit deeper into software

00:05:02,560 --> 00:05:07,600
architecture so not

00:05:04,000 --> 00:05:09,919
moving away from the buildings i found

00:05:07,600 --> 00:05:11,360
this interesting definition in the

00:05:09,919 --> 00:05:13,759
dictionary

00:05:11,360 --> 00:05:15,600
because i'm not a native speaker so i go

00:05:13,759 --> 00:05:17,039
to the dictionary many times to see what

00:05:15,600 --> 00:05:19,120
things are

00:05:17,039 --> 00:05:21,600
and the dictionary says the art and

00:05:19,120 --> 00:05:22,720
science in which the components of a

00:05:21,600 --> 00:05:25,919
computer system

00:05:22,720 --> 00:05:28,160
are organized and integrated

00:05:25,919 --> 00:05:30,080
so the first thing i want to point out

00:05:28,160 --> 00:05:33,280
is art and science

00:05:30,080 --> 00:05:36,160
now how many of you coders

00:05:33,280 --> 00:05:38,720
programmers consider themselves artists

00:05:36,160 --> 00:05:41,120
and scientists it's

00:05:38,720 --> 00:05:42,400
it's amazing i mean we have to stop

00:05:41,120 --> 00:05:45,600
considering ourselves

00:05:42,400 --> 00:05:49,360
coders we have to start thinking

00:05:45,600 --> 00:05:53,039
at ourselves as artists and scientists

00:05:49,360 --> 00:05:56,319
this is what we are an architecture

00:05:53,039 --> 00:05:59,840
is where the art and science of

00:05:56,319 --> 00:06:03,600
all these meet okay

00:05:59,840 --> 00:06:06,160
and they meet doing this in deciding

00:06:03,600 --> 00:06:07,039
how components of computer system are

00:06:06,160 --> 00:06:10,160
organized and

00:06:07,039 --> 00:06:12,639
integrated organization is about

00:06:10,160 --> 00:06:14,560
where components are so where the

00:06:12,639 --> 00:06:18,240
components of your hardware

00:06:14,560 --> 00:06:22,319
or software are located in your system

00:06:18,240 --> 00:06:25,199
an integration is about

00:06:22,319 --> 00:06:27,280
how data flows between them so what

00:06:25,199 --> 00:06:29,199
happens when you log in into the system

00:06:27,280 --> 00:06:30,000
what happens when you run that function

00:06:29,199 --> 00:06:33,680
what happens

00:06:30,000 --> 00:06:36,960
and so on in the background

00:06:33,680 --> 00:06:40,000
of this slide i put

00:06:36,960 --> 00:06:43,520
part of the board of the amiga system

00:06:40,000 --> 00:06:44,319
which is an impressive example of art

00:06:43,520 --> 00:06:47,199
and science

00:06:44,319 --> 00:06:48,080
put together so yeah this is what we aim

00:06:47,199 --> 00:06:50,319
to

00:06:48,080 --> 00:06:50,319
do

00:06:52,000 --> 00:06:59,520
the second question i have is do we need

00:06:55,599 --> 00:07:03,039
architecture and let me say this

00:06:59,520 --> 00:07:06,319
many many people when they see this um

00:07:03,039 --> 00:07:08,319
this slide believe that i chose this

00:07:06,319 --> 00:07:12,400
picture because it's not

00:07:08,319 --> 00:07:14,960
very impressive right on the contrary

00:07:12,400 --> 00:07:16,560
i chose it because i was struck by this

00:07:14,960 --> 00:07:16,880
so when i saw the picture i don't know

00:07:16,560 --> 00:07:19,120
where

00:07:16,880 --> 00:07:20,720
where this was taken but when i saw the

00:07:19,120 --> 00:07:24,160
picture i thought

00:07:20,720 --> 00:07:27,919
look at this the person or the people

00:07:24,160 --> 00:07:28,400
who built this house didn't have the

00:07:27,919 --> 00:07:30,960
best

00:07:28,400 --> 00:07:31,680
materials right and probably they didn't

00:07:30,960 --> 00:07:34,880
have the best

00:07:31,680 --> 00:07:35,280
science at hand because it's arguably a

00:07:34,880 --> 00:07:38,880
bit

00:07:35,280 --> 00:07:42,560
leaning on the side it's not perfect

00:07:38,880 --> 00:07:46,080
but they wanted this to be

00:07:42,560 --> 00:07:48,319
beautiful they wanted this to be durable

00:07:46,080 --> 00:07:50,560
because look at look this has a roof

00:07:48,319 --> 00:07:50,960
this has a door i mean it's just just a

00:07:50,560 --> 00:07:54,560
lump

00:07:50,960 --> 00:07:58,560
of stuff tone there it's a house right

00:07:54,560 --> 00:08:01,280
so what i want to tell you is this

00:07:58,560 --> 00:08:01,680
why do we need the architecture in in

00:08:01,280 --> 00:08:04,720
life

00:08:01,680 --> 00:08:07,759
and in software engineering because

00:08:04,720 --> 00:08:11,120
we need it because this is what we need

00:08:07,759 --> 00:08:13,919
as human beings we need things to be

00:08:11,120 --> 00:08:15,440
well done you are more satisfied when

00:08:13,919 --> 00:08:17,680
you do something well

00:08:15,440 --> 00:08:20,000
then when you just throw there a bunch

00:08:17,680 --> 00:08:24,720
of code that doesn't leave you for

00:08:20,000 --> 00:08:27,759
many days okay more technically

00:08:24,720 --> 00:08:29,919
we need architecture because if we don't

00:08:27,759 --> 00:08:30,479
decide for an architecture if you if we

00:08:29,919 --> 00:08:33,760
don't

00:08:30,479 --> 00:08:37,599
think about it and and take action

00:08:33,760 --> 00:08:39,839
towards a specific architecture

00:08:37,599 --> 00:08:41,440
something else or someone else will

00:08:39,839 --> 00:08:44,640
decide for us

00:08:41,440 --> 00:08:47,040
and many times

00:08:44,640 --> 00:08:48,320
requirements decided for us because we

00:08:47,040 --> 00:08:50,560
we just react

00:08:48,320 --> 00:08:52,480
to requirements you know you know

00:08:50,560 --> 00:08:54,160
clients right the requirements change

00:08:52,480 --> 00:08:57,360
every second

00:08:54,160 --> 00:09:00,320
and you just react to them touching

00:08:57,360 --> 00:09:01,120
your system and not getting anywhere so

00:09:00,320 --> 00:09:04,160
requirements

00:09:01,120 --> 00:09:06,240
dictate on architecture

00:09:04,160 --> 00:09:07,920
or the framework dictates an

00:09:06,240 --> 00:09:09,760
architecture i'm pretty sure there are

00:09:07,920 --> 00:09:11,519
many django users among you

00:09:09,760 --> 00:09:13,120
which jungle is an impressive framework

00:09:11,519 --> 00:09:16,240
i like it a lot

00:09:13,120 --> 00:09:17,519
but django pushes for specific

00:09:16,240 --> 00:09:19,360
architecture i'm

00:09:17,519 --> 00:09:21,040
saying something more about this later

00:09:19,360 --> 00:09:23,279
maybe but

00:09:21,040 --> 00:09:26,399
what i want to say is that if you don't

00:09:23,279 --> 00:09:30,000
understand this if you don't

00:09:26,399 --> 00:09:30,720
learn and and understand the django

00:09:30,000 --> 00:09:33,040
architecture

00:09:30,720 --> 00:09:34,080
you just leave everything to the

00:09:33,040 --> 00:09:35,600
framework and this is

00:09:34,080 --> 00:09:37,360
this is not good because in the end you

00:09:35,600 --> 00:09:39,360
are not in control anymore this is what

00:09:37,360 --> 00:09:42,399
i wanted to say

00:09:39,360 --> 00:09:45,440
okay uh moving on

00:09:42,399 --> 00:09:47,440
the software architectures and design

00:09:45,440 --> 00:09:49,600
sort of architecture and design is

00:09:47,440 --> 00:09:50,480
something that has been studied from the

00:09:49,600 --> 00:09:52,720
very beginning

00:09:50,480 --> 00:09:54,240
of computer of the computer science

00:09:52,720 --> 00:09:57,120
journey in the world

00:09:54,240 --> 00:09:57,600
and these are some of the books that i

00:09:57,120 --> 00:10:02,240
found

00:09:57,600 --> 00:10:02,240
very useful for my

00:10:02,839 --> 00:10:07,200
apologies

00:10:05,200 --> 00:10:09,360
for my career from my understanding of

00:10:07,200 --> 00:10:11,519
the architecture

00:10:09,360 --> 00:10:13,440
uh a lot of warning these are door

00:10:11,519 --> 00:10:16,000
stoppers sometimes they're very thick

00:10:13,440 --> 00:10:17,279
um and you have to study these books

00:10:16,000 --> 00:10:18,160
they are not just you know you can't

00:10:17,279 --> 00:10:21,440
read them

00:10:18,160 --> 00:10:23,279
while you are sometiming on the beach uh

00:10:21,440 --> 00:10:25,040
so if you don't want to commit to these

00:10:23,279 --> 00:10:29,040
books i understand

00:10:25,040 --> 00:10:30,240
and i have two books to point out so

00:10:29,040 --> 00:10:33,440
design patterns

00:10:30,240 --> 00:10:35,839
and enterprise integration patterns read

00:10:33,440 --> 00:10:37,519
the introduction just the introduction

00:10:35,839 --> 00:10:40,320
to those books

00:10:37,519 --> 00:10:41,519
um because both introductions are very

00:10:40,320 --> 00:10:44,000
narrative they are not

00:10:41,519 --> 00:10:45,360
too technical okay they are lightweight

00:10:44,000 --> 00:10:49,040
somehow

00:10:45,360 --> 00:10:52,079
but they give you an impressive overview

00:10:49,040 --> 00:10:53,600
of what happens when you design a system

00:10:52,079 --> 00:10:57,040
in particular design patterns you know

00:10:53,600 --> 00:10:59,440
it was written many years ago 94

00:10:57,040 --> 00:11:01,600
and these guys were discussing how to

00:10:59,440 --> 00:11:04,640
design an object-oriented system

00:11:01,600 --> 00:11:06,000
like a clone of like a word you know

00:11:04,640 --> 00:11:09,120
word processing

00:11:06,000 --> 00:11:12,240
software and it's impressive

00:11:09,120 --> 00:11:14,160
how they keep putting requirements and

00:11:12,240 --> 00:11:15,279
discussing them and trying to find the

00:11:14,160 --> 00:11:19,760
best

00:11:15,279 --> 00:11:22,640
overall architecture for them okay

00:11:19,760 --> 00:11:23,040
today i in this presentation i will give

00:11:22,640 --> 00:11:26,320
you

00:11:23,040 --> 00:11:28,320
an example of a software architecture

00:11:26,320 --> 00:11:30,240
in python a very simple example

00:11:28,320 --> 00:11:32,240
unfortunately you don't have

00:11:30,240 --> 00:11:33,839
that much time and i don't want to i

00:11:32,240 --> 00:11:37,040
don't want to bore you to death

00:11:33,839 --> 00:11:40,079
so i'm getting i'm being shallow today

00:11:37,040 --> 00:11:42,480
um so

00:11:40,079 --> 00:11:43,839
um the next thing i want to i want to

00:11:42,480 --> 00:11:47,600
discuss sorry is

00:11:43,839 --> 00:11:50,000
um what is the meaning of clean

00:11:47,600 --> 00:11:51,040
so we we define i define i try to define

00:11:50,000 --> 00:11:53,519
architecture now

00:11:51,040 --> 00:11:56,160
let's go on with clean because we are

00:11:53,519 --> 00:11:59,920
discussing the clean architecture

00:11:56,160 --> 00:12:03,200
i have an example of what is not clean

00:11:59,920 --> 00:12:06,800
here look at this

00:12:03,200 --> 00:12:10,320
mess i don't want to work

00:12:06,800 --> 00:12:12,000
here because it's not clean

00:12:10,320 --> 00:12:13,839
and what does it mean it's not clean it

00:12:12,000 --> 00:12:15,760
means that i i don't know

00:12:13,839 --> 00:12:18,240
i don't know what's going on i don't

00:12:15,760 --> 00:12:21,600
know which cable to pull

00:12:18,240 --> 00:12:24,079
or which is the right one right so in a

00:12:21,600 --> 00:12:25,120
in an emergency but probably in every

00:12:24,079 --> 00:12:28,560
day's work

00:12:25,120 --> 00:12:32,160
this is a mess yes it's not clean

00:12:28,560 --> 00:12:35,360
okay while this instead

00:12:32,160 --> 00:12:36,480
is clean and the definition i can give

00:12:35,360 --> 00:12:39,680
off clean now

00:12:36,480 --> 00:12:42,000
is is that three w

00:12:39,680 --> 00:12:43,440
right so you know where things are why

00:12:42,000 --> 00:12:45,360
components are there

00:12:43,440 --> 00:12:46,480
and what something is look look at the

00:12:45,360 --> 00:12:49,600
picture

00:12:46,480 --> 00:12:50,560
i feel much more relaxed in such an

00:12:49,600 --> 00:12:53,120
environment

00:12:50,560 --> 00:12:55,920
i used to say that we engineers worship

00:12:53,120 --> 00:12:55,920
these things but

00:12:56,079 --> 00:13:00,639
yeah this is the definition of clean

00:12:57,920 --> 00:13:03,279
something where you know

00:13:00,639 --> 00:13:03,680
where things are and what's what happens

00:13:03,279 --> 00:13:05,600
okay

00:13:03,680 --> 00:13:09,040
it's easy to understand what happens

00:13:05,600 --> 00:13:11,040
what which actors are involved

00:13:09,040 --> 00:13:13,200
speaking of the example that we give you

00:13:11,040 --> 00:13:15,120
today i

00:13:13,200 --> 00:13:16,720
wrote a book about clean architectures

00:13:15,120 --> 00:13:18,959
in python

00:13:16,720 --> 00:13:20,240
where the example that i give you today

00:13:18,959 --> 00:13:24,320
in a very shallow

00:13:20,240 --> 00:13:24,959
way is described in all its gory details

00:13:24,320 --> 00:13:27,200
so

00:13:24,959 --> 00:13:28,000
in the book the example i give you today

00:13:27,200 --> 00:13:30,639
is

00:13:28,000 --> 00:13:31,279
um it's it's basically the book is

00:13:30,639 --> 00:13:34,880
around

00:13:31,279 --> 00:13:36,639
that example only the book is freely

00:13:34,880 --> 00:13:37,120
available so you get there you download

00:13:36,639 --> 00:13:39,600
it

00:13:37,120 --> 00:13:40,399
thank you for uh doing it thank you for

00:13:39,600 --> 00:13:44,320
reading it

00:13:40,399 --> 00:13:48,959
so feel free to go and check it out

00:13:44,320 --> 00:13:51,680
okay let's discuss the architecture

00:13:48,959 --> 00:13:52,480
what is the clean architecture it's an

00:13:51,680 --> 00:13:56,079
approach

00:13:52,480 --> 00:13:59,279
to the design of your software

00:13:56,079 --> 00:14:02,320
that is a layered approach

00:13:59,279 --> 00:14:04,639
so the idea is that there are at least

00:14:02,320 --> 00:14:06,160
four layers there might be more but in

00:14:04,639 --> 00:14:09,600
this example i will give you

00:14:06,160 --> 00:14:11,360
uh i use the standard four ones which

00:14:09,600 --> 00:14:14,800
are entities use cases

00:14:11,360 --> 00:14:18,000
gateways and external systems and it's

00:14:14,800 --> 00:14:19,360
layered and circular the idea is these

00:14:18,000 --> 00:14:21,680
layers are completely

00:14:19,360 --> 00:14:23,519
virtual okay it just means that we are

00:14:21,680 --> 00:14:24,160
writing python code we are writing

00:14:23,519 --> 00:14:26,880
classes

00:14:24,160 --> 00:14:27,680
functions modules everything but

00:14:26,880 --> 00:14:30,240
virtually

00:14:27,680 --> 00:14:31,680
these classes these modules belong to a

00:14:30,240 --> 00:14:33,920
layer

00:14:31,680 --> 00:14:35,360
because we decide okay we decided we

00:14:33,920 --> 00:14:37,600
create something that belongs to the

00:14:35,360 --> 00:14:39,120
entities we decide we

00:14:37,600 --> 00:14:40,720
create something that belongs to the use

00:14:39,120 --> 00:14:45,279
cases and so on

00:14:40,720 --> 00:14:48,480
and the idea is there are rules

00:14:45,279 --> 00:14:51,199
that components have to follow if they

00:14:48,480 --> 00:14:54,079
want to communicate with each other

00:14:51,199 --> 00:14:56,320
do you remember integration organization

00:14:54,079 --> 00:15:00,560
where components are in the layers

00:14:56,320 --> 00:15:04,079
and integration how components um

00:15:00,560 --> 00:15:06,000
send data to each other and the

00:15:04,079 --> 00:15:07,360
main rule i'm going to give you an

00:15:06,000 --> 00:15:09,519
example in a

00:15:07,360 --> 00:15:10,959
concrete example in a second but the

00:15:09,519 --> 00:15:14,240
main rule of the

00:15:10,959 --> 00:15:17,279
the clean architecture the golden rule

00:15:14,240 --> 00:15:20,320
is talk inward with simple structures

00:15:17,279 --> 00:15:21,120
talk outwards through interfaces what

00:15:20,320 --> 00:15:24,959
does it mean

00:15:21,120 --> 00:15:25,440
it means that a component in a certain

00:15:24,959 --> 00:15:27,440
layer

00:15:25,440 --> 00:15:28,720
for example a component in external

00:15:27,440 --> 00:15:31,920
systems

00:15:28,720 --> 00:15:34,399
can see everything that happens in

00:15:31,920 --> 00:15:38,079
gateways use cases entities

00:15:34,399 --> 00:15:41,519
in python firms for example

00:15:38,079 --> 00:15:43,839
a component in external systems can

00:15:41,519 --> 00:15:44,880
instantiate a class that is defined in

00:15:43,839 --> 00:15:48,639
entities

00:15:44,880 --> 00:15:51,920
it's known okay it's part of the system

00:15:48,639 --> 00:15:56,000
so whenever a component in an external

00:15:51,920 --> 00:15:59,279
layer talks inward it has to pass

00:15:56,000 --> 00:16:00,800
something that everybody knows simple

00:15:59,279 --> 00:16:02,639
structures means for example the

00:16:00,800 --> 00:16:05,839
structures defined by the language

00:16:02,639 --> 00:16:08,959
dictionaries lists you know or simple

00:16:05,839 --> 00:16:10,720
simple things sets but also

00:16:08,959 --> 00:16:12,880
things that are defined in a layer that

00:16:10,720 --> 00:16:16,160
everybody can see

00:16:12,880 --> 00:16:18,240
well outside outwards sorry

00:16:16,160 --> 00:16:19,759
we have to work through interfaces and

00:16:18,240 --> 00:16:21,199
again i'm gonna show you a concrete

00:16:19,759 --> 00:16:23,920
example in a second but let me

00:16:21,199 --> 00:16:25,600
say this what are interfaces the idea of

00:16:23,920 --> 00:16:28,240
interfaces

00:16:25,600 --> 00:16:29,360
is that you don't know and you don't

00:16:28,240 --> 00:16:31,519
want to know

00:16:29,360 --> 00:16:33,839
the type of something you don't know how

00:16:31,519 --> 00:16:37,279
something is internally you know how it

00:16:33,839 --> 00:16:39,680
behaves so you use something that you

00:16:37,279 --> 00:16:39,680
don't know

00:16:40,160 --> 00:16:43,199
through its methods for example through

00:16:42,639 --> 00:16:46,160
its

00:16:43,199 --> 00:16:48,480
interface i'll show you in a second

00:16:46,160 --> 00:16:51,600
something more concrete

00:16:48,480 --> 00:16:54,320
let's see let's discuss the example that

00:16:51,600 --> 00:16:58,000
i want to give you today

00:16:54,320 --> 00:17:01,360
yes i am utah um the example

00:16:58,000 --> 00:17:04,720
i have is that of a simple very

00:17:01,360 --> 00:17:05,760
very simple list of objects so think

00:17:04,720 --> 00:17:09,919
about the framework

00:17:05,760 --> 00:17:12,799
you want to publish a web page

00:17:09,919 --> 00:17:13,120
where people can you know the web page

00:17:12,799 --> 00:17:15,600
like

00:17:13,120 --> 00:17:16,240
slash items where they can see a list of

00:17:15,600 --> 00:17:18,799
items

00:17:16,240 --> 00:17:19,839
that you have in your database or

00:17:18,799 --> 00:17:21,760
something

00:17:19,839 --> 00:17:23,760
this is the the real really really

00:17:21,760 --> 00:17:24,480
trivial example i i wrote a book on this

00:17:23,760 --> 00:17:28,160
so it's not

00:17:24,480 --> 00:17:28,559
that trivial probably but i i understand

00:17:28,160 --> 00:17:30,240
that

00:17:28,559 --> 00:17:31,760
it might sound trivial because you know

00:17:30,240 --> 00:17:32,000
in the standard framework you can create

00:17:31,760 --> 00:17:34,480
this

00:17:32,000 --> 00:17:35,440
in seconds right let's see what happens

00:17:34,480 --> 00:17:38,799
behind

00:17:35,440 --> 00:17:40,320
the scenes first of all let me define

00:17:38,799 --> 00:17:41,840
entities so

00:17:40,320 --> 00:17:43,760
what are entities in a clean

00:17:41,840 --> 00:17:46,960
architecture they are simple

00:17:43,760 --> 00:17:49,039
models in this case as i am listing

00:17:46,960 --> 00:17:52,720
items i have the class

00:17:49,039 --> 00:17:53,919
item written in python as you can see

00:17:52,720 --> 00:17:56,960
this is a very

00:17:53,919 --> 00:17:59,760
very simple class it's almost

00:17:56,960 --> 00:18:00,320
just data because it has set codes that

00:17:59,760 --> 00:18:03,360
price

00:18:00,320 --> 00:18:04,559
that's it it might have some methods i

00:18:03,360 --> 00:18:07,120
didn't i didn't

00:18:04,559 --> 00:18:09,039
put them there because i wanted to keep

00:18:07,120 --> 00:18:10,880
the example simple

00:18:09,039 --> 00:18:12,400
but the main thing i want to point out

00:18:10,880 --> 00:18:16,240
especially if there are

00:18:12,400 --> 00:18:19,200
flask or jungle users among you

00:18:16,240 --> 00:18:20,240
these entities are not connected with

00:18:19,200 --> 00:18:22,480
the database

00:18:20,240 --> 00:18:23,919
this might be surprising for you because

00:18:22,480 --> 00:18:25,520
jungle models for example they are

00:18:23,919 --> 00:18:27,120
immediately connected with the database

00:18:25,520 --> 00:18:28,960
you inherit from model

00:18:27,120 --> 00:18:30,240
and you get you can save you can

00:18:28,960 --> 00:18:32,000
retrieve the object

00:18:30,240 --> 00:18:34,080
this is not what happens in the clean

00:18:32,000 --> 00:18:34,799
architecture entities are entities they

00:18:34,080 --> 00:18:38,000
just

00:18:34,799 --> 00:18:40,840
represent something in your system

00:18:38,000 --> 00:18:43,200
this is important for something we see

00:18:40,840 --> 00:18:45,600
later

00:18:43,200 --> 00:18:46,320
okay the use case the use case is

00:18:45,600 --> 00:18:48,320
probably

00:18:46,320 --> 00:18:49,360
the most important thing and the most

00:18:48,320 --> 00:18:51,200
important layer

00:18:49,360 --> 00:18:52,559
in the clean architecture because the

00:18:51,200 --> 00:18:55,760
idea of the use case

00:18:52,559 --> 00:18:58,240
is that i put there

00:18:55,760 --> 00:19:00,559
my business logic let me say something

00:18:58,240 --> 00:19:03,520
about the business logic what is it

00:19:00,559 --> 00:19:05,120
the business logic is the reason why you

00:19:03,520 --> 00:19:09,039
are in the business

00:19:05,120 --> 00:19:12,080
so for example everybody can

00:19:09,039 --> 00:19:13,200
index websites it's that easy you just

00:19:12,080 --> 00:19:15,440
download the website

00:19:13,200 --> 00:19:16,880
you you create an uh you know a

00:19:15,440 --> 00:19:19,039
dictionary of terms

00:19:16,880 --> 00:19:20,640
you rank them everybody can do it

00:19:19,039 --> 00:19:22,799
nowadays

00:19:20,640 --> 00:19:24,720
but only google does it in that

00:19:22,799 --> 00:19:27,360
particular way

00:19:24,720 --> 00:19:28,640
i'm not saying it's the best way we can

00:19:27,360 --> 00:19:30,400
we can discuss about this it might be

00:19:28,640 --> 00:19:32,960
good it might be bad i don't i don't

00:19:30,400 --> 00:19:34,640
care now but the problem is there is

00:19:32,960 --> 00:19:38,400
something that makes

00:19:34,640 --> 00:19:38,960
google google and that is the business

00:19:38,400 --> 00:19:42,559
logic

00:19:38,960 --> 00:19:45,039
is that they only know how to

00:19:42,559 --> 00:19:47,280
rank and to to you know index websites

00:19:45,039 --> 00:19:50,240
in that particular way

00:19:47,280 --> 00:19:52,080
so whenever you create a startup

00:19:50,240 --> 00:19:53,760
whenever you write some software

00:19:52,080 --> 00:19:55,600
you write an open source marketing

00:19:53,760 --> 00:19:57,280
whatever you have a

00:19:55,600 --> 00:19:59,360
business logic you have something that

00:19:57,280 --> 00:20:00,400
you know and this is why you created

00:19:59,360 --> 00:20:02,159
that software

00:20:00,400 --> 00:20:03,520
and this is arguably the most important

00:20:02,159 --> 00:20:07,280
thing you have

00:20:03,520 --> 00:20:11,280
because everybody can you know

00:20:07,280 --> 00:20:14,480
stream um tv series

00:20:11,280 --> 00:20:17,600
netflix does it at the best yeah

00:20:14,480 --> 00:20:20,240
so that is important you have to take

00:20:17,600 --> 00:20:22,320
care of your use cases this is why in

00:20:20,240 --> 00:20:23,760
the clean architecture we isolate them

00:20:22,320 --> 00:20:27,919
as much as possible

00:20:23,760 --> 00:20:31,200
again i have an example with jungle

00:20:27,919 --> 00:20:34,640
jungle views many times contain the

00:20:31,200 --> 00:20:37,840
well almost always contain

00:20:34,640 --> 00:20:39,919
the business logic and

00:20:37,840 --> 00:20:41,600
this is what i i mean with business

00:20:39,919 --> 00:20:42,400
logic or something that happens when

00:20:41,600 --> 00:20:44,559
someone

00:20:42,400 --> 00:20:45,760
accesses your system when someone uses

00:20:44,559 --> 00:20:48,880
your system

00:20:45,760 --> 00:20:50,640
in this case i have this items list use

00:20:48,880 --> 00:20:51,919
case which is a class

00:20:50,640 --> 00:20:54,320
and actually in the the clean

00:20:51,919 --> 00:20:57,840
architecture use cases don't do that

00:20:54,320 --> 00:21:00,799
much they can just be executed

00:20:57,840 --> 00:21:02,720
let's go on we need okay now we have the

00:21:00,799 --> 00:21:05,120
entities we have the use cases but

00:21:02,720 --> 00:21:07,280
after all and you know we want people to

00:21:05,120 --> 00:21:11,039
use the system so we have to give them

00:21:07,280 --> 00:21:14,320
some some way to access the system

00:21:11,039 --> 00:21:14,640
and since it's 2020 you know many things

00:21:14,320 --> 00:21:16,559
are

00:21:14,640 --> 00:21:19,039
web applications so we can decide to

00:21:16,559 --> 00:21:22,240
create that it's one option

00:21:19,039 --> 00:21:24,960
but it's the most likely option so

00:21:22,240 --> 00:21:27,039
the web application here i'm using flask

00:21:24,960 --> 00:21:30,080
for simplicity's sake

00:21:27,039 --> 00:21:31,600
i just created a route this is very

00:21:30,080 --> 00:21:32,480
similar to what you do in jungle by the

00:21:31,600 --> 00:21:35,600
way

00:21:32,480 --> 00:21:38,960
which is slash items

00:21:35,600 --> 00:21:39,760
and people accessing that do something

00:21:38,960 --> 00:21:41,919
they

00:21:39,760 --> 00:21:42,880
they make the system do something in

00:21:41,919 --> 00:21:44,559
this case nothing

00:21:42,880 --> 00:21:46,480
at the moment because i want to go on

00:21:44,559 --> 00:21:49,280
and describe it in details

00:21:46,480 --> 00:21:49,679
what does the web framework do what is

00:21:49,280 --> 00:21:52,880
the

00:21:49,679 --> 00:21:57,440
task of the web framework

00:21:52,880 --> 00:22:01,200
it is to receive http

00:21:57,440 --> 00:22:04,080
requests and to convert them

00:22:01,200 --> 00:22:05,919
so the web framework receives http

00:22:04,080 --> 00:22:09,760
requests because this is what a web

00:22:05,919 --> 00:22:14,880
framework does and has to convert

00:22:09,760 --> 00:22:16,559
that request into simple structures

00:22:14,880 --> 00:22:17,919
what does it mean simple structures here

00:22:16,559 --> 00:22:20,559
something that the use case

00:22:17,919 --> 00:22:21,360
can understand and the use case can see

00:22:20,559 --> 00:22:24,720
only

00:22:21,360 --> 00:22:25,440
entities and the language and python

00:22:24,720 --> 00:22:28,960
right

00:22:25,440 --> 00:22:31,039
so when i pass here something i can't

00:22:28,960 --> 00:22:32,880
pass down something that is defined in

00:22:31,039 --> 00:22:33,440
flask for example the use case doesn't

00:22:32,880 --> 00:22:36,400
know it

00:22:33,440 --> 00:22:36,960
and and shouldn't know it okay it's not

00:22:36,400 --> 00:22:38,559
allowed

00:22:36,960 --> 00:22:40,799
because this is these are the rules of

00:22:38,559 --> 00:22:44,640
our little clean

00:22:40,799 --> 00:22:45,360
universe so the web framework has to

00:22:44,640 --> 00:22:47,919
convert

00:22:45,360 --> 00:22:48,559
the http request to process it you know

00:22:47,919 --> 00:22:50,400
to do

00:22:48,559 --> 00:22:52,400
everything the web framework has to do

00:22:50,400 --> 00:22:54,799
which is an important task

00:22:52,400 --> 00:22:57,120
but then eventually has to get the

00:22:54,799 --> 00:22:59,440
arguments of this http request and pass

00:22:57,120 --> 00:22:59,440
it down

00:23:01,360 --> 00:23:04,880
at this point the use case has to do

00:23:03,840 --> 00:23:09,039
something in this case

00:23:04,880 --> 00:23:11,440
it has to show us a list of items

00:23:09,039 --> 00:23:12,640
where are these items eventually they

00:23:11,440 --> 00:23:15,039
have to be stored

00:23:12,640 --> 00:23:16,559
somewhere right and this is what is

00:23:15,039 --> 00:23:20,799
called a repository

00:23:16,559 --> 00:23:22,880
in the clean architecture immediately

00:23:20,799 --> 00:23:25,679
this is the example i have here we think

00:23:22,880 --> 00:23:25,679
about the database

00:23:26,480 --> 00:23:32,880
we have nowadays now think about it we

00:23:29,840 --> 00:23:33,600
are not forced to use a database we want

00:23:32,880 --> 00:23:38,159
to

00:23:33,600 --> 00:23:40,320
retrieve data that after somewhere

00:23:38,159 --> 00:23:42,400
a database maybe might be a good

00:23:40,320 --> 00:23:45,200
solution but i didn't say for example a

00:23:42,400 --> 00:23:48,320
relational database it might be

00:23:45,200 --> 00:23:50,720
no sql database but it might be an

00:23:48,320 --> 00:23:51,919
external sensor like a physical sensor

00:23:50,720 --> 00:23:54,000
that they put somewhere you want to

00:23:51,919 --> 00:23:56,480
record the temperature for example

00:23:54,000 --> 00:23:58,799
or it might be a rest api it might be a

00:23:56,480 --> 00:24:02,480
bunch of files on my systems

00:23:58,799 --> 00:24:03,840
i'm not fast okay this is most powerful

00:24:02,480 --> 00:24:06,400
things about the clean architecture is

00:24:03,840 --> 00:24:09,200
not opinionated

00:24:06,400 --> 00:24:10,559
it's a double episode but it's also a

00:24:09,200 --> 00:24:12,960
great strength

00:24:10,559 --> 00:24:14,159
so i have a database in this case which

00:24:12,960 --> 00:24:16,000
is fine it's probably a

00:24:14,159 --> 00:24:18,000
relational database but as i said it

00:24:16,000 --> 00:24:21,360
might be

00:24:18,000 --> 00:24:22,960
so the use case has to extract data from

00:24:21,360 --> 00:24:26,000
the database but look at this

00:24:22,960 --> 00:24:27,679
the use case is here why the database is

00:24:26,000 --> 00:24:31,279
an external system

00:24:27,679 --> 00:24:35,440
it's in an external layer why is it

00:24:31,279 --> 00:24:38,960
there because the database is something

00:24:35,440 --> 00:24:41,760
it's it's what we call we designers

00:24:38,960 --> 00:24:43,440
call a detail and people are so

00:24:41,760 --> 00:24:45,039
scandalized when they say the database

00:24:43,440 --> 00:24:48,400
is a detail

00:24:45,039 --> 00:24:52,159
because detail doesn't mean it's

00:24:48,400 --> 00:24:55,440
simple because i know believe me that

00:24:52,159 --> 00:24:58,480
databases are not simple it's not easy

00:24:55,440 --> 00:24:59,600
to set up you know postgres seek my

00:24:58,480 --> 00:25:01,760
sequel or whatever

00:24:59,600 --> 00:25:04,320
you know and to configure it to use it

00:25:01,760 --> 00:25:05,679
sql is a complicated language or mongodb

00:25:04,320 --> 00:25:07,679
you know whatever it's it's a

00:25:05,679 --> 00:25:10,720
complicated part of the system

00:25:07,679 --> 00:25:12,960
it's an important one but it's a detail

00:25:10,720 --> 00:25:14,799
because the idea as i said is that i

00:25:12,960 --> 00:25:19,039
want to extract data from

00:25:14,799 --> 00:25:19,679
some that's somewhere what the

00:25:19,039 --> 00:25:22,720
repository

00:25:19,679 --> 00:25:24,400
repository is it's okay we have to

00:25:22,720 --> 00:25:25,679
decide it eventually but it's not

00:25:24,400 --> 00:25:29,679
paramount

00:25:25,679 --> 00:25:31,600
so when you search for pages in google

00:25:29,679 --> 00:25:32,720
you are not asking yourself oh wait a

00:25:31,600 --> 00:25:34,799
minute where

00:25:32,720 --> 00:25:36,880
is google storing this data is it a

00:25:34,799 --> 00:25:37,600
postgres database is it my secret you

00:25:36,880 --> 00:25:39,840
don't care

00:25:37,600 --> 00:25:41,840
because this is not important it's a

00:25:39,840 --> 00:25:42,480
little see it's important for the

00:25:41,840 --> 00:25:44,240
engineers

00:25:42,480 --> 00:25:45,600
in google obviously but it's not

00:25:44,240 --> 00:25:48,159
important for you as a user

00:25:45,600 --> 00:25:48,799
okay enough rambling about this let's

00:25:48,159 --> 00:25:51,600
move on

00:25:48,799 --> 00:25:53,520
what happens that the use case can't

00:25:51,600 --> 00:25:54,480
access the database directly because we

00:25:53,520 --> 00:25:58,480
don't want

00:25:54,480 --> 00:26:00,320
to have code in the use case the usage

00:25:58,480 --> 00:26:03,679
of the database for example this is

00:26:00,320 --> 00:26:04,480
i don't know postgres i'm using sql

00:26:03,679 --> 00:26:07,760
alchemy

00:26:04,480 --> 00:26:09,600
i don't want to put sql alchemy

00:26:07,760 --> 00:26:12,240
code in my use case because at that

00:26:09,600 --> 00:26:14,640
point it becomes a use case that uses

00:26:12,240 --> 00:26:15,279
a relational database what if i want to

00:26:14,640 --> 00:26:19,039
access

00:26:15,279 --> 00:26:20,320
mongodb so what i do is to create an

00:26:19,039 --> 00:26:23,600
interface

00:26:20,320 --> 00:26:27,919
which is something that receives

00:26:23,600 --> 00:26:31,120
data from the use case and maps

00:26:27,919 --> 00:26:33,520
as an interface the most common

00:26:31,120 --> 00:26:35,520
features the most common methods that i

00:26:33,520 --> 00:26:39,760
want to use in the database

00:26:35,520 --> 00:26:41,840
so i'm passing again simple structures

00:26:39,760 --> 00:26:42,799
to the database interface which is

00:26:41,840 --> 00:26:45,039
something that the

00:26:42,799 --> 00:26:47,279
database interface should know and the

00:26:45,039 --> 00:26:50,559
database interface

00:26:47,279 --> 00:26:53,440
has to convert

00:26:50,559 --> 00:26:54,080
the data i'm passing into specific

00:26:53,440 --> 00:26:57,279
language

00:26:54,080 --> 00:26:57,279
here these two

00:27:00,880 --> 00:27:06,960
secret well this one is not a sql query

00:27:04,320 --> 00:27:10,240
this one is just a method

00:27:06,960 --> 00:27:12,320
it's a call i'm calling a method right

00:27:10,240 --> 00:27:13,520
so this happens in the specific language

00:27:12,320 --> 00:27:16,720
the database or

00:27:13,520 --> 00:27:16,720
answers in the specific

00:27:16,880 --> 00:27:20,159
sql alchemy so these returns a query

00:27:19,840 --> 00:27:23,039
right

00:27:20,159 --> 00:27:25,120
this is specific to the language but

00:27:23,039 --> 00:27:28,720
then eventually the database interface

00:27:25,120 --> 00:27:30,799
has to return this data to the use case

00:27:28,720 --> 00:27:33,600
in this case we are we are

00:27:30,799 --> 00:27:34,640
in this case in this yeah in this case

00:27:33,600 --> 00:27:38,080
we are

00:27:34,640 --> 00:27:40,320
extracting a list of items so

00:27:38,080 --> 00:27:42,480
eventually what the database interface

00:27:40,320 --> 00:27:45,279
has to return to the use case is this

00:27:42,480 --> 00:27:45,279
list of items

00:27:45,520 --> 00:27:52,720
i mean this is not different from

00:27:49,200 --> 00:27:55,200
the orm in django which returns models

00:27:52,720 --> 00:27:57,360
right given that entities are not

00:27:55,200 --> 00:28:00,960
modulus but this is similar

00:27:57,360 --> 00:28:03,440
and this can happen because the data

00:28:00,960 --> 00:28:04,720
both can see entities they are like

00:28:03,440 --> 00:28:08,080
looking downwards

00:28:04,720 --> 00:28:11,760
you see or in words

00:28:08,080 --> 00:28:13,039
now the use case has the list of

00:28:11,760 --> 00:28:16,399
entities

00:28:13,039 --> 00:28:20,080
and what shall it do it just it just

00:28:16,399 --> 00:28:22,559
has to apply the business logic and

00:28:20,080 --> 00:28:24,799
return it to the web framework

00:28:22,559 --> 00:28:25,919
in this case i'm not applying anything

00:28:24,799 --> 00:28:27,679
because

00:28:25,919 --> 00:28:29,840
there is no business logic i'm just

00:28:27,679 --> 00:28:33,760
extracting the list of

00:28:29,840 --> 00:28:37,440
lists of items but think about it

00:28:33,760 --> 00:28:40,559
if i was you know i just invented an

00:28:37,440 --> 00:28:42,799
incredibly smart way to rank

00:28:40,559 --> 00:28:44,640
items so to list them so i am applying

00:28:42,799 --> 00:28:45,520
my business logic before i return

00:28:44,640 --> 00:28:47,200
something

00:28:45,520 --> 00:28:48,559
it might not happen but it happens

00:28:47,200 --> 00:28:51,200
usually

00:28:48,559 --> 00:28:53,279
and the web framework again receives

00:28:51,200 --> 00:28:54,880
entities also infrastructures whatever

00:28:53,279 --> 00:28:56,960
they are

00:28:54,880 --> 00:28:58,000
and the second thing that the web

00:28:56,960 --> 00:29:01,120
framework has to do

00:28:58,000 --> 00:29:01,679
is to get these results from the use

00:29:01,120 --> 00:29:05,200
case

00:29:01,679 --> 00:29:08,399
this very generic result and convert it

00:29:05,200 --> 00:29:09,840
generic information and convert it into

00:29:08,399 --> 00:29:11,600
an http

00:29:09,840 --> 00:29:14,240
response because this is what the web

00:29:11,600 --> 00:29:14,240
framework does

00:29:15,440 --> 00:29:22,960
okay one thing before i move on

00:29:19,039 --> 00:29:22,960
with the concludes

00:29:23,840 --> 00:29:26,880
what's the power of this structure why

00:29:26,240 --> 00:29:29,039
why

00:29:26,880 --> 00:29:30,960
do we both are doing all this we we

00:29:29,039 --> 00:29:33,279
might just use jungle right which is

00:29:30,960 --> 00:29:34,399
again impressive it's something you can

00:29:33,279 --> 00:29:36,240
use there are

00:29:34,399 --> 00:29:37,600
use cases for the cleanup that you are a

00:29:36,240 --> 00:29:40,080
bit different

00:29:37,600 --> 00:29:40,640
but the idea that one of the powerful

00:29:40,080 --> 00:29:42,159
things

00:29:40,640 --> 00:29:44,080
there are there are two main things i

00:29:42,159 --> 00:29:45,440
want to mention one is testing and i'm

00:29:44,080 --> 00:29:46,000
going to show you in a second and the

00:29:45,440 --> 00:29:49,919
other one

00:29:46,000 --> 00:29:51,600
is mutability so the clean architecture

00:29:49,919 --> 00:29:54,640
can be changed

00:29:51,600 --> 00:29:57,520
easily so let's say for example that i

00:29:54,640 --> 00:29:59,200
i don't want a web framework i want a

00:29:57,520 --> 00:30:02,320
mobile application

00:29:59,200 --> 00:30:06,080
right so i i want to create something

00:30:02,320 --> 00:30:09,440
written for android for ios whatever

00:30:06,080 --> 00:30:11,360
um what what shall i change in this

00:30:09,440 --> 00:30:13,360
architecture well definitely have to

00:30:11,360 --> 00:30:15,039
change this part the web framework

00:30:13,360 --> 00:30:16,559
because it's not a web framework anymore

00:30:15,039 --> 00:30:18,480
right it's a mobile application so it

00:30:16,559 --> 00:30:19,919
doesn't receive http requests but it

00:30:18,480 --> 00:30:21,200
receives something else i don't know i'm

00:30:19,919 --> 00:30:23,600
not a mobile programmer but

00:30:21,200 --> 00:30:25,360
you know there's an interface you're

00:30:23,600 --> 00:30:27,600
tapping on the screen there's there's

00:30:25,360 --> 00:30:30,880
something happening there

00:30:27,600 --> 00:30:33,039
but as soon as this component here

00:30:30,880 --> 00:30:35,760
receives what it has to receive from

00:30:33,039 --> 00:30:39,279
from my tapping you know from my phone

00:30:35,760 --> 00:30:41,360
then it sends the very same

00:30:39,279 --> 00:30:43,520
information to the use case and the use

00:30:41,360 --> 00:30:44,080
case has to discuss with the database

00:30:43,520 --> 00:30:47,120
interface

00:30:44,080 --> 00:30:50,320
database again everything here

00:30:47,120 --> 00:30:55,120
happens the same way so

00:30:50,320 --> 00:30:58,480
i am i just changed part of my system

00:30:55,120 --> 00:31:00,880
creating a mobile application

00:30:58,480 --> 00:31:02,000
or a cli for example you know a command

00:31:00,880 --> 00:31:05,840
line interface

00:31:02,000 --> 00:31:08,240
program and the rest is the same

00:31:05,840 --> 00:31:09,840
conversely let's see what happens is if

00:31:08,240 --> 00:31:13,679
i want to

00:31:09,840 --> 00:31:15,919
move from uh postgres to mongodb

00:31:13,679 --> 00:31:17,600
i understand that this doesn't happen

00:31:15,919 --> 00:31:18,000
many times you know it's not that every

00:31:17,600 --> 00:31:19,919
day

00:31:18,000 --> 00:31:21,679
people say oh yeah we have been using

00:31:19,919 --> 00:31:24,399
postcards

00:31:21,679 --> 00:31:25,519
you know for three years but now we want

00:31:24,399 --> 00:31:27,120
to move to mongodb

00:31:25,519 --> 00:31:30,240
it might happen it doesn't happen every

00:31:27,120 --> 00:31:33,200
day but what might happen

00:31:30,240 --> 00:31:34,320
is that part of your system has to work

00:31:33,200 --> 00:31:36,320
with something different

00:31:34,320 --> 00:31:37,440
so for example you have editing in

00:31:36,320 --> 00:31:40,000
posters

00:31:37,440 --> 00:31:41,760
but you realize that for a specific use

00:31:40,000 --> 00:31:45,039
case for specific

00:31:41,760 --> 00:31:47,039
logic mongodb is performing better

00:31:45,039 --> 00:31:48,320
and you want to store some data in a

00:31:47,039 --> 00:31:50,720
mongodb

00:31:48,320 --> 00:31:51,519
database and look up what look at this

00:31:50,720 --> 00:31:54,880
structure

00:31:51,519 --> 00:31:56,720
you have just to

00:31:54,880 --> 00:31:58,840
replace the database interface in the

00:31:56,720 --> 00:32:00,000
database again i'm not saying this is

00:31:58,840 --> 00:32:03,120
simple

00:32:00,000 --> 00:32:04,240
but this is better than re writing the

00:32:03,120 --> 00:32:07,519
whole thing

00:32:04,240 --> 00:32:08,399
okay let's let me move on with the

00:32:07,519 --> 00:32:11,200
second

00:32:08,399 --> 00:32:11,200
great advantage

00:32:12,240 --> 00:32:15,840
so let's just

00:32:17,840 --> 00:32:23,440
test because as i told you

00:32:21,600 --> 00:32:25,600
the use case is the most important thing

00:32:23,440 --> 00:32:28,320
it's the business logic so i want it

00:32:25,600 --> 00:32:29,039
to work despite of the i don't i don't i

00:32:28,320 --> 00:32:30,799
don't know

00:32:29,039 --> 00:32:33,039
about frameworks i don't know about

00:32:30,799 --> 00:32:34,960
databases the business logic has to work

00:32:33,039 --> 00:32:36,480
right because this is this is what my

00:32:34,960 --> 00:32:40,080
company thrives

00:32:36,480 --> 00:32:43,840
on so that's that's bad and

00:32:40,080 --> 00:32:43,840
i can sorry

00:32:44,640 --> 00:32:48,880
thanks to the structure that i have in

00:32:47,279 --> 00:32:51,279
the clean architecture

00:32:48,880 --> 00:32:52,720
i can isolate the use case because look

00:32:51,279 --> 00:32:56,159
at this the use case

00:32:52,720 --> 00:32:58,000
receives a dictionary from

00:32:56,159 --> 00:32:59,519
something i don't know what from

00:32:58,000 --> 00:32:59,919
something i can pass the dictionary

00:32:59,519 --> 00:33:02,000
during

00:32:59,919 --> 00:33:04,080
doing tests right i can just create a

00:33:02,000 --> 00:33:07,440
dictionary pass it the use case

00:33:04,080 --> 00:33:09,600
it's really just simple dictionary

00:33:07,440 --> 00:33:11,039
and then the use case sends a dictionary

00:33:09,600 --> 00:33:13,039
to something

00:33:11,039 --> 00:33:14,080
i said that this is a database interface

00:33:13,039 --> 00:33:17,360
but this might be

00:33:14,080 --> 00:33:19,200
a mock object that just pretends to be a

00:33:17,360 --> 00:33:22,720
database interface but actually

00:33:19,200 --> 00:33:26,320
just returns test data

00:33:22,720 --> 00:33:29,760
right because this just has to return

00:33:26,320 --> 00:33:31,919
entities this is test data and the use

00:33:29,760 --> 00:33:34,159
case has to return these entities after

00:33:31,919 --> 00:33:36,480
it applied the business logic so as you

00:33:34,159 --> 00:33:38,799
can see i can completely detach

00:33:36,480 --> 00:33:40,799
the use case from the rest of the system

00:33:38,799 --> 00:33:43,360
and test it in isolation

00:33:40,799 --> 00:33:44,480
this is unit testing this is something

00:33:43,360 --> 00:33:46,640
that allows me

00:33:44,480 --> 00:33:47,840
to test the use case the business logic

00:33:46,640 --> 00:33:52,000
in seconds

00:33:47,840 --> 00:33:55,039
okay while you code

00:33:52,000 --> 00:33:58,399
there is another category of tests

00:33:55,039 --> 00:34:00,399
which is integration tests and these are

00:33:58,399 --> 00:34:02,240
the ones that i have to perform with the

00:34:00,399 --> 00:34:04,559
web framework and the database so the

00:34:02,240 --> 00:34:07,519
web framework is an integration test

00:34:04,559 --> 00:34:08,240
because what i have to check is that

00:34:07,519 --> 00:34:11,839
sending

00:34:08,240 --> 00:34:15,679
http requests i get the right

00:34:11,839 --> 00:34:18,720
calls to my use cases okay they use the

00:34:15,679 --> 00:34:21,679
fake use case receives the right

00:34:18,720 --> 00:34:22,560
dictionary and when it sends the

00:34:21,679 --> 00:34:25,359
entities

00:34:22,560 --> 00:34:26,000
the web framework returns the right http

00:34:25,359 --> 00:34:29,440
response

00:34:26,000 --> 00:34:32,079
this is the idea

00:34:29,440 --> 00:34:33,839
of the web framework and the problem is

00:34:32,079 --> 00:34:36,240
i need the web framework running you

00:34:33,839 --> 00:34:37,679
know so if i'm using flask i need flask

00:34:36,240 --> 00:34:39,520
running so maybe i have docker

00:34:37,679 --> 00:34:41,440
containers something similar

00:34:39,520 --> 00:34:43,520
and this is what we call an integration

00:34:41,440 --> 00:34:44,320
test because it requires an external

00:34:43,520 --> 00:34:46,480
system

00:34:44,320 --> 00:34:47,839
remember the layer external system to be

00:34:46,480 --> 00:34:51,679
run

00:34:47,839 --> 00:34:51,679
and this slows down the whole thing

00:34:51,760 --> 00:34:58,800
again the same thing happens

00:34:55,359 --> 00:35:02,079
with with the database

00:34:58,800 --> 00:35:05,359
where i need a proper database

00:35:02,079 --> 00:35:06,320
running i need my postgres database

00:35:05,359 --> 00:35:08,160
running

00:35:06,320 --> 00:35:09,599
but this is what i mentioned before

00:35:08,160 --> 00:35:12,400
about entities

00:35:09,599 --> 00:35:12,880
so why am i concerned that entities are

00:35:12,400 --> 00:35:15,200
not

00:35:12,880 --> 00:35:16,560
connected with the database because when

00:35:15,200 --> 00:35:19,680
you run

00:35:16,560 --> 00:35:20,960
when you use django again of flask when

00:35:19,680 --> 00:35:24,240
you test

00:35:20,960 --> 00:35:25,440
your business logic your models you need

00:35:24,240 --> 00:35:27,599
the database running

00:35:25,440 --> 00:35:29,359
for example this is a great limitation

00:35:27,599 --> 00:35:32,400
because you need that system

00:35:29,359 --> 00:35:33,119
up and running or for example think

00:35:32,400 --> 00:35:36,640
about this

00:35:33,119 --> 00:35:39,839
if my source of data is uh

00:35:36,640 --> 00:35:40,720
an internet an api rest api okay so i'm

00:35:39,839 --> 00:35:43,680
calling

00:35:40,720 --> 00:35:45,359
some rest api on internet and then fetch

00:35:43,680 --> 00:35:47,599
the results and doing something

00:35:45,359 --> 00:35:49,599
when i want to test this i need an

00:35:47,599 --> 00:35:52,240
internet connection

00:35:49,599 --> 00:35:54,000
and you know people say oh yeah it's 20

00:35:52,240 --> 00:35:55,359
20 we have an internet connection

00:35:54,000 --> 00:35:58,079
everywhere

00:35:55,359 --> 00:35:58,640
really not everywhere i mean i live in

00:35:58,079 --> 00:36:02,480
london

00:35:58,640 --> 00:36:04,640
uk and as soon as you get into the tube

00:36:02,480 --> 00:36:06,720
yeah we don't do it that much lately

00:36:04,640 --> 00:36:08,400
because of the coronavirus but

00:36:06,720 --> 00:36:10,000
as soon as you get into the tube you

00:36:08,400 --> 00:36:13,359
don't have an internet connection

00:36:10,000 --> 00:36:16,560
if you have to work there okay

00:36:13,359 --> 00:36:17,040
right you can read the book but my point

00:36:16,560 --> 00:36:20,000
is

00:36:17,040 --> 00:36:21,280
you are depending on an external system

00:36:20,000 --> 00:36:25,040
that is not

00:36:21,280 --> 00:36:27,119
the main thing when you test the

00:36:25,040 --> 00:36:29,040
business logic it's the main thing when

00:36:27,119 --> 00:36:31,119
you test the integration okay so

00:36:29,040 --> 00:36:32,400
this is integration tests they require

00:36:31,119 --> 00:36:34,240
an external system

00:36:32,400 --> 00:36:36,720
you can isolate them from the business

00:36:34,240 --> 00:36:40,560
logic as well

00:36:36,720 --> 00:36:42,880
okay to conclude

00:36:40,560 --> 00:36:44,720
two questions is it possible to migrate

00:36:42,880 --> 00:36:46,960
an existing system to the clean

00:36:44,720 --> 00:36:47,839
architecture so i have a system written

00:36:46,960 --> 00:36:51,680
with django

00:36:47,839 --> 00:36:54,240
or flask or any other framework

00:36:51,680 --> 00:36:55,680
and i want to migrate it you know and

00:36:54,240 --> 00:36:57,440
it's always possible

00:36:55,680 --> 00:36:58,800
it's always possible to use something

00:36:57,440 --> 00:37:00,640
new and this is probably

00:36:58,800 --> 00:37:02,800
the answer to this is very it's a bit

00:37:00,640 --> 00:37:06,240
generic but it's an advice

00:37:02,800 --> 00:37:09,520
for you friends about design never

00:37:06,240 --> 00:37:10,160
never never or he plays the whole thing

00:37:09,520 --> 00:37:13,200
at the same

00:37:10,160 --> 00:37:16,800
in the you know in a single goal

00:37:13,200 --> 00:37:20,160
never many people try to do it

00:37:16,800 --> 00:37:20,960
uh in in the computer science history

00:37:20,160 --> 00:37:24,880
and

00:37:20,960 --> 00:37:29,040
they mostly fade so my advice

00:37:24,880 --> 00:37:32,320
is for web applications for example

00:37:29,040 --> 00:37:35,040
think about using load balancers and

00:37:32,320 --> 00:37:36,240
routing parts of your system to to

00:37:35,040 --> 00:37:38,160
something else

00:37:36,240 --> 00:37:39,680
so if you have the bulk of your

00:37:38,160 --> 00:37:40,720
application written in django and you

00:37:39,680 --> 00:37:41,839
want to try

00:37:40,720 --> 00:37:43,760
something written with the clean

00:37:41,839 --> 00:37:47,200
architecture you might say just

00:37:43,760 --> 00:37:49,599
this url goes there with a load balance

00:37:47,200 --> 00:37:51,040
okay so this is the most general advice

00:37:49,599 --> 00:37:52,560
i can i can tell you

00:37:51,040 --> 00:37:54,079
the same if you have a clean

00:37:52,560 --> 00:37:55,119
architecture you want to implement

00:37:54,079 --> 00:37:58,640
something

00:37:55,119 --> 00:38:00,480
uh written in a in a very you know

00:37:58,640 --> 00:38:02,240
smaller framework or something similar

00:38:00,480 --> 00:38:04,400
right you can do this

00:38:02,240 --> 00:38:05,520
so but but yeah keep this in mind never

00:38:04,400 --> 00:38:07,920
never try okay

00:38:05,520 --> 00:38:09,760
if you if i convince you i don't know if

00:38:07,920 --> 00:38:12,400
i did it but if i convince you that the

00:38:09,760 --> 00:38:12,800
clean architecture is the future don't

00:38:12,400 --> 00:38:14,640
go

00:38:12,800 --> 00:38:16,400
and replace everything in in one go

00:38:14,640 --> 00:38:18,480
don't do it don't don't say i tell i

00:38:16,400 --> 00:38:20,240
told you to do it okay

00:38:18,480 --> 00:38:21,599
i don't want the responsibility the

00:38:20,240 --> 00:38:25,280
other question i have

00:38:21,599 --> 00:38:26,160
is is clean architecture the definitive

00:38:25,280 --> 00:38:30,079
architecture

00:38:26,160 --> 00:38:33,680
is that the best thing ever

00:38:30,079 --> 00:38:37,040
hardly okay no so no

00:38:33,680 --> 00:38:40,960
i believe there is no such a thing

00:38:37,040 --> 00:38:44,000
because uh this might be i i told my

00:38:40,960 --> 00:38:47,040
friends at the jungle meetup this

00:38:44,000 --> 00:38:48,320
is the answer to every single or

00:38:47,040 --> 00:38:51,359
probably 99

00:38:48,320 --> 00:38:55,200
of the questions in computer science it

00:38:51,359 --> 00:38:57,040
depends it depends on the requirements

00:38:55,200 --> 00:38:58,480
it depends on what you want to do it

00:38:57,040 --> 00:39:02,160
depends on how much

00:38:58,480 --> 00:39:03,680
time you have to spend on the system a

00:39:02,160 --> 00:39:07,280
clean architecture

00:39:03,680 --> 00:39:08,960
is complicated it requires a lot of work

00:39:07,280 --> 00:39:11,839
you have basically to write everything

00:39:08,960 --> 00:39:13,760
from scratch but obviously

00:39:11,839 --> 00:39:15,200
your screen in general you just fire it

00:39:13,760 --> 00:39:16,240
up you write a couple of things and

00:39:15,200 --> 00:39:18,720
everything works

00:39:16,240 --> 00:39:19,599
great amazing it depends on what you

00:39:18,720 --> 00:39:22,560
want to do

00:39:19,599 --> 00:39:23,359
it depends on your requirements and your

00:39:22,560 --> 00:39:27,280
future

00:39:23,359 --> 00:39:30,400
requirements okay so think about it

00:39:27,280 --> 00:39:33,040
as i said i wrote a book on this so

00:39:30,400 --> 00:39:34,720
i greatly appreciate if you go and

00:39:33,040 --> 00:39:35,280
download it it's free if you want to

00:39:34,720 --> 00:39:37,440
donate

00:39:35,280 --> 00:39:38,880
i'm not going to complain but it's free

00:39:37,440 --> 00:39:42,079
it has been downloaded by

00:39:38,880 --> 00:39:43,040
13 000 people so fast i believe there is

00:39:42,079 --> 00:39:46,400
something

00:39:43,040 --> 00:39:47,839
good in it and i'm proud of it there is

00:39:46,400 --> 00:39:50,320
another book

00:39:47,839 --> 00:39:51,040
uh that my friend harry possible

00:39:50,320 --> 00:39:54,160
together with

00:39:51,040 --> 00:39:55,040
his boss bob gregory wrote recently it's

00:39:54,160 --> 00:39:58,880
architecture but

00:39:55,040 --> 00:39:59,200
with python it's published by already

00:39:58,880 --> 00:40:02,240
it's

00:39:59,200 --> 00:40:04,960
freely available in online

00:40:02,240 --> 00:40:08,880
because already kindly agreed on this

00:40:04,960 --> 00:40:12,240
you can find it at cosmicpython.com

00:40:08,880 --> 00:40:15,599
and that's it for today i

00:40:12,240 --> 00:40:17,680
made it in 40 minutes which leaves a lot

00:40:15,599 --> 00:40:25,839
of time to you for networking

00:40:17,680 --> 00:40:25,839
or for questions if you have thank you

00:40:27,040 --> 00:40:39,839
okay so let me read

00:40:30,160 --> 00:40:39,839
questions on the in the chart

00:40:42,560 --> 00:40:47,359
oh complex multi-stage interaction with

00:40:45,520 --> 00:40:49,119
a user single user okay so would you

00:40:47,359 --> 00:40:50,400
reflect that in the clean action break

00:40:49,119 --> 00:40:52,880
into mind small

00:40:50,400 --> 00:40:53,599
okay yes rob interesting question so rob

00:40:52,880 --> 00:40:56,000
is asking

00:40:53,599 --> 00:40:57,839
when uh we are modeling a complex

00:40:56,000 --> 00:40:59,680
interaction with a user

00:40:57,839 --> 00:41:01,200
as a single use case how would you

00:40:59,680 --> 00:41:04,079
reflect that in the clean architecture

00:41:01,200 --> 00:41:07,440
break it into multiple small use cases

00:41:04,079 --> 00:41:11,359
uh yes generally speaking

00:41:07,440 --> 00:41:13,760
you tend to try and break things

00:41:11,359 --> 00:41:14,560
um there is there is an interesting

00:41:13,760 --> 00:41:17,760
thing to say

00:41:14,560 --> 00:41:17,760
here uh that

00:41:18,319 --> 00:41:23,040
there is a philosophy you know among

00:41:20,319 --> 00:41:23,040
programmers

00:41:23,599 --> 00:41:29,599
that models sorry that methods

00:41:26,880 --> 00:41:32,400
should be very very small and objects

00:41:29,599 --> 00:41:35,280
should be very small as more as possible

00:41:32,400 --> 00:41:36,960
it's interesting to discuss what's as

00:41:35,280 --> 00:41:39,599
small as possible means

00:41:36,960 --> 00:41:40,319
because again it depends you see this is

00:41:39,599 --> 00:41:43,040
the

00:41:40,319 --> 00:41:43,920
it's for real it's the the answer to

00:41:43,040 --> 00:41:47,359
every question

00:41:43,920 --> 00:41:51,200
you know it's like 42. um

00:41:47,359 --> 00:41:54,319
it depends on what your use case is

00:41:51,200 --> 00:41:55,920
so the point is you should try this is

00:41:54,319 --> 00:41:56,400
what you have to keep in mind you should

00:41:55,920 --> 00:42:00,560
try

00:41:56,400 --> 00:42:01,599
not to do too many different things in

00:42:00,560 --> 00:42:04,319
your use case

00:42:01,599 --> 00:42:06,160
so for example if you are logging in

00:42:04,319 --> 00:42:10,319
someone in a system that's the point

00:42:06,160 --> 00:42:12,000
login then you might want to

00:42:10,319 --> 00:42:13,440
show something in the dashboard for

00:42:12,000 --> 00:42:15,040
example or to perform

00:42:13,440 --> 00:42:16,640
other security checks this is something

00:42:15,040 --> 00:42:21,760
different so yes

00:42:16,640 --> 00:42:24,319
if you can decompose your use case into

00:42:21,760 --> 00:42:25,839
simpler things but then you know this is

00:42:24,319 --> 00:42:29,119
a very generic answer so

00:42:25,839 --> 00:42:30,880
we should discuss a concrete example i'm

00:42:29,119 --> 00:42:33,440
available if you want to discuss but

00:42:30,880 --> 00:42:36,800
yeah this is my

00:42:33,440 --> 00:42:36,800
my hunch about it

00:42:37,680 --> 00:42:42,480
okay so another question daniele

00:42:40,720 --> 00:42:44,400
provocative question if we never do it

00:42:42,480 --> 00:42:45,440
at once where is the best place to start

00:42:44,400 --> 00:42:47,440
especially if

00:42:45,440 --> 00:42:48,800
we are new to this and not quite sure

00:42:47,440 --> 00:42:52,400
where we are going with it

00:42:48,800 --> 00:42:55,040
okay great so um

00:42:52,400 --> 00:42:55,040
interesting

00:42:56,960 --> 00:43:00,400
i would say one of the best thing that

00:42:59,920 --> 00:43:03,040
people

00:43:00,400 --> 00:43:04,400
find in frameworks uh let's say for

00:43:03,040 --> 00:43:06,720
example jungle

00:43:04,400 --> 00:43:07,440
is that it provides out of the box many

00:43:06,720 --> 00:43:09,839
things

00:43:07,440 --> 00:43:10,960
like you know the login the management

00:43:09,839 --> 00:43:14,000
of users

00:43:10,960 --> 00:43:16,000
all these things that are actually a bit

00:43:14,000 --> 00:43:17,359
they're not complicated but they might

00:43:16,000 --> 00:43:20,800
not be trivial for

00:43:17,359 --> 00:43:21,680
for newcomers so i would say probably

00:43:20,800 --> 00:43:25,760
the best

00:43:21,680 --> 00:43:28,240
place to start is an internal

00:43:25,760 --> 00:43:29,119
business logic so for example let's say

00:43:28,240 --> 00:43:31,280
i'm giving

00:43:29,119 --> 00:43:33,760
you you know generic examples now but

00:43:31,280 --> 00:43:36,160
let's say you have a

00:43:33,760 --> 00:43:38,480
booking system you know for conference

00:43:36,160 --> 00:43:42,079
and at certain point you want to show

00:43:38,480 --> 00:43:44,319
the schedule of uh one day of the

00:43:42,079 --> 00:43:46,640
conference you want to

00:43:44,319 --> 00:43:47,920
show people the tickets they have those

00:43:46,640 --> 00:43:50,960
are nice

00:43:47,920 --> 00:43:52,240
very little self-contained use cases you

00:43:50,960 --> 00:43:54,880
know you have to show

00:43:52,240 --> 00:43:55,280
something you have to list something

00:43:54,880 --> 00:43:57,200
it's

00:43:55,280 --> 00:43:58,319
it's really self-contained this is what

00:43:57,200 --> 00:44:00,079
i mean it doesn't

00:43:58,319 --> 00:44:01,920
interact that much with the with the

00:44:00,079 --> 00:44:05,280
rest of the life

00:44:01,920 --> 00:44:07,440
of a web framework user

00:44:05,280 --> 00:44:08,720
i don't know daniel if this answers your

00:44:07,440 --> 00:44:11,119
question

00:44:08,720 --> 00:44:11,920
but this is where i would start also

00:44:11,119 --> 00:44:15,440
because

00:44:11,920 --> 00:44:15,920
you know what these these are the places

00:44:15,440 --> 00:44:19,040
where

00:44:15,920 --> 00:44:21,280
the problems are so what i mean is

00:44:19,040 --> 00:44:22,560
first of all you are not forced to use

00:44:21,280 --> 00:44:24,480
the clean architecture okay

00:44:22,560 --> 00:44:26,319
if you are using the framework and

00:44:24,480 --> 00:44:26,720
everything works for you why should you

00:44:26,319 --> 00:44:30,480
change

00:44:26,720 --> 00:44:31,359
so don't do it the point is i saw many

00:44:30,480 --> 00:44:33,280
systems

00:44:31,359 --> 00:44:34,560
where people are struggling so for

00:44:33,280 --> 00:44:37,680
example you

00:44:34,560 --> 00:44:38,319
implemented something uh with jungle

00:44:37,680 --> 00:44:41,599
with fl

00:44:38,319 --> 00:44:44,640
flask with with any other system and you

00:44:41,599 --> 00:44:44,960
find a specific query a specific page to

00:44:44,640 --> 00:44:48,000
be

00:44:44,960 --> 00:44:48,480
extremely slow or you know maybe the orm

00:44:48,000 --> 00:44:50,720
doesn't

00:44:48,480 --> 00:44:51,839
exactly do what you want and and you

00:44:50,720 --> 00:44:54,000
think oh

00:44:51,839 --> 00:44:56,319
if i could use my mom would be you know

00:44:54,000 --> 00:44:58,960
which is much better than postcards

00:44:56,319 --> 00:44:59,520
i don't know uh postmas is amazing but

00:44:58,960 --> 00:45:02,079
you know it's

00:44:59,520 --> 00:45:02,960
going to be it's different so it has use

00:45:02,079 --> 00:45:06,640
cases

00:45:02,960 --> 00:45:07,119
okay so that is your point where you can

00:45:06,640 --> 00:45:10,240
say

00:45:07,119 --> 00:45:14,160
okay why don't i start there and

00:45:10,240 --> 00:45:16,000
detach that part that's specific url

00:45:14,160 --> 00:45:17,280
for my system and maybe implement this

00:45:16,000 --> 00:45:20,480
with something different

00:45:17,280 --> 00:45:23,200
micro services are very similar to the

00:45:20,480 --> 00:45:25,200
clean architecture because in the end

00:45:23,200 --> 00:45:25,920
you are saying that you have a big

00:45:25,200 --> 00:45:27,839
system

00:45:25,920 --> 00:45:30,000
and you start thinking okay don't

00:45:27,839 --> 00:45:33,440
convert it don't convert everything into

00:45:30,000 --> 00:45:36,000
microservices at the same time in one go

00:45:33,440 --> 00:45:36,880
implement one single thing and you know

00:45:36,000 --> 00:45:40,319
enroute

00:45:36,880 --> 00:45:43,119
your request there

00:45:40,319 --> 00:45:43,119
yeah that's it

00:45:43,440 --> 00:45:48,160
we don't have other questions

00:45:46,560 --> 00:45:50,480
that does oh yeah with this we have

00:45:48,160 --> 00:45:53,920
that's oop or design patterns

00:45:50,480 --> 00:45:56,079
augment the clean architecture um okay

00:45:53,920 --> 00:45:57,440
i think that you can implement others

00:45:56,079 --> 00:46:00,800
are clean architecture in

00:45:57,440 --> 00:46:04,160
whatever language you want okay so

00:46:00,800 --> 00:46:06,720
that's not uh directly connected with

00:46:04,160 --> 00:46:08,000
oop i gave you an example in python so i

00:46:06,720 --> 00:46:09,760
obviously use

00:46:08,000 --> 00:46:11,440
object during the programming you can

00:46:09,760 --> 00:46:12,560
implement that in functional programming

00:46:11,440 --> 00:46:15,599
language

00:46:12,560 --> 00:46:18,560
um definitely so i wouldn't say

00:46:15,599 --> 00:46:19,920
they are directly connected it's

00:46:18,560 --> 00:46:24,000
interesting

00:46:19,920 --> 00:46:26,480
though that so thank you joseph for your

00:46:24,000 --> 00:46:28,240
question because i gave a workshop on

00:46:26,480 --> 00:46:29,910
object-oriented on wednesday which is

00:46:28,240 --> 00:46:31,040
available online by the way

00:46:29,910 --> 00:46:32,960
[Music]

00:46:31,040 --> 00:46:35,599
one thing i mentioned is that object

00:46:32,960 --> 00:46:38,960
oriented was invented by people

00:46:35,599 --> 00:46:41,920
who dreamt

00:46:38,960 --> 00:46:42,480
so who wanted to replicate a computer

00:46:41,920 --> 00:46:44,640
system

00:46:42,480 --> 00:46:47,440
into her so you know they wanted to have

00:46:44,640 --> 00:46:48,640
uh small computer systems interacting

00:46:47,440 --> 00:46:50,400
with each other

00:46:48,640 --> 00:46:52,319
these are the objects does it does it

00:46:50,400 --> 00:46:53,280
ring a bell that's that's microservices

00:46:52,319 --> 00:46:55,760
right so

00:46:53,280 --> 00:46:56,400
uh you see computer science is just very

00:46:55,760 --> 00:46:59,040
you know like

00:46:56,400 --> 00:46:59,599
discovering over and over this the very

00:46:59,040 --> 00:47:02,720
same things

00:46:59,599 --> 00:47:03,680
the very same concepts so i would say

00:47:02,720 --> 00:47:05,839
that

00:47:03,680 --> 00:47:07,839
it's interesting that object-oriented

00:47:05,839 --> 00:47:09,520
can be a clean architecture inside an

00:47:07,839 --> 00:47:12,720
object-oriented

00:47:09,520 --> 00:47:14,880
system you can start thinking clean and

00:47:12,720 --> 00:47:16,800
thinking what the responsibilities of

00:47:14,880 --> 00:47:20,160
objects and the relationship

00:47:16,800 --> 00:47:21,119
between them but in the first place i

00:47:20,160 --> 00:47:22,960
wouldn't say

00:47:21,119 --> 00:47:25,119
that object or entity is directly

00:47:22,960 --> 00:47:28,000
connected with the clean architecture

00:47:25,119 --> 00:47:29,680
they are they are somehow independent

00:47:28,000 --> 00:47:31,359
okay and this is the point

00:47:29,680 --> 00:47:33,200
sorry and then i stopped maybe rambling

00:47:31,359 --> 00:47:37,200
but this is the point

00:47:33,200 --> 00:47:40,319
of the clean architecture i don't know

00:47:37,200 --> 00:47:42,720
well i might know but i don't need

00:47:40,319 --> 00:47:44,160
to know how something is implemented

00:47:42,720 --> 00:47:46,800
internally

00:47:44,160 --> 00:47:48,880
so how is the framework implemented i

00:47:46,800 --> 00:47:50,960
don't know

00:47:48,880 --> 00:47:52,079
how is the database implemented i don't

00:47:50,960 --> 00:47:55,200
know think

00:47:52,079 --> 00:47:57,920
about this just to to give you a final

00:47:55,200 --> 00:47:59,040
idea of why this this discussion about

00:47:57,920 --> 00:48:01,280
architectures is

00:47:59,040 --> 00:48:02,160
important when you go and visit a

00:48:01,280 --> 00:48:04,160
website

00:48:02,160 --> 00:48:06,720
right for example google right or you

00:48:04,160 --> 00:48:10,319
use aws maybe

00:48:06,720 --> 00:48:14,160
do you know how google is implemented

00:48:10,319 --> 00:48:16,559
i don't i mean i don't know

00:48:14,160 --> 00:48:17,839
what how is it implemented maybe there

00:48:16,559 --> 00:48:20,079
are people knowing this you know

00:48:17,839 --> 00:48:21,040
maybe among you but i personally don't

00:48:20,079 --> 00:48:23,520
know this

00:48:21,040 --> 00:48:25,280
doesn't you know stop me from using

00:48:23,520 --> 00:48:29,680
google every day

00:48:25,280 --> 00:48:32,079
because what i want to use is interface

00:48:29,680 --> 00:48:33,200
so again you see we are living in a

00:48:32,079 --> 00:48:35,839
world where we

00:48:33,200 --> 00:48:35,839
keep

00:48:36,240 --> 00:48:40,640
interacting with interfaces and using

00:48:39,119 --> 00:48:43,040
them and trying to detach

00:48:40,640 --> 00:48:44,640
ourselves we don't want to know how

00:48:43,040 --> 00:48:45,440
google is implemented because we don't

00:48:44,640 --> 00:48:48,880
need

00:48:45,440 --> 00:48:50,640
to couple our system with the syst with

00:48:48,880 --> 00:48:52,319
the internal system of google there is a

00:48:50,640 --> 00:48:55,599
rest api

00:48:52,319 --> 00:48:56,559
you know whatever that that's our

00:48:55,599 --> 00:48:59,040
connection

00:48:56,559 --> 00:49:00,640
and this is the maximum coupling that we

00:48:59,040 --> 00:49:04,319
want to establish

00:49:00,640 --> 00:49:07,359
okay so this is about it i i hope i

00:49:04,319 --> 00:49:07,359
answered the question

00:49:09,839 --> 00:49:13,920
i believe that's it i don't see other

00:49:13,040 --> 00:49:17,040
questions

00:49:13,920 --> 00:49:17,680
um i'm as i said i'm i'm available i'm

00:49:17,040 --> 00:49:20,880
reachable

00:49:17,680 --> 00:49:23,839
online on twitter uh

00:49:20,880 --> 00:49:24,800
download the book visit my website i'm

00:49:23,839 --> 00:49:26,640
i'm really

00:49:24,800 --> 00:49:28,480
i made myself a point of answering

00:49:26,640 --> 00:49:29,440
whoever gets in touch with me so if you

00:49:28,480 --> 00:49:32,319
drop me a message

00:49:29,440 --> 00:49:34,000
if you have questions or anything feel

00:49:32,319 --> 00:49:35,520
free to ask and

00:49:34,000 --> 00:49:37,200
thank you thank you for thank you for

00:49:35,520 --> 00:49:40,880
being here thank you for your patience

00:49:37,200 --> 00:49:45,839
40 50 minutes wow

00:49:40,880 --> 00:49:45,839
thank you

00:49:50,160 --> 00:49:52,240

YouTube URL: https://www.youtube.com/watch?v=pKJ4FXijva0


