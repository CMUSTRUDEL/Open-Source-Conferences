Title: Thomas Ayih-Akakpo - Turn Django admin into a lightweight dashboard || PyCon Africa 2020
Publication date: 2020-08-29
Playlist: PyCon Africa 2020
Description: 
	This talk is about crafting a very simple tool for data insights in Django-admin.
Without dependencies, and with super tricks using the Django's ORM, you will be able to create useful summary tables and a few charts.
I will try as much as possible to share my journey in this exploration, the obstacles I stumbled upon and how I overcame them.
Captions: 
	00:00:14,639 --> 00:00:18,480
hello everybody and

00:00:16,240 --> 00:00:20,240
welcome to my talk turn django admin

00:00:18,480 --> 00:00:23,600
into a lights dashboard

00:00:20,240 --> 00:00:25,199
um my name is thomas ayakagbo i am a

00:00:23,600 --> 00:00:29,519
software developer

00:00:25,199 --> 00:00:31,920
based in madagascar um my day-to-day job

00:00:29,519 --> 00:00:32,559
involve actually working on data

00:00:31,920 --> 00:00:35,680
projects

00:00:32,559 --> 00:00:37,040
i have to collect data uh store them do

00:00:35,680 --> 00:00:40,320
some computation

00:00:37,040 --> 00:00:42,399
and make sense out of them um

00:00:40,320 --> 00:00:44,399
you can find me on the internet uh under

00:00:42,399 --> 00:00:47,440
the handler drawlap

00:00:44,399 --> 00:00:49,039
be it on twitter or github and feel free

00:00:47,440 --> 00:00:50,480
to ping me so we can have a good chat

00:00:49,039 --> 00:00:54,079
about python

00:00:50,480 --> 00:00:56,480
and also star wars yeah so

00:00:54,079 --> 00:00:57,360
today i want to talk about django and

00:00:56,480 --> 00:01:00,640
especially

00:00:57,360 --> 00:01:03,760
django admin um

00:01:00,640 --> 00:01:04,640
because to me django is exactly what it

00:01:03,760 --> 00:01:06,880
says it is

00:01:04,640 --> 00:01:08,080
a web framework for perfectionists with

00:01:06,880 --> 00:01:12,720
deadlines

00:01:08,080 --> 00:01:16,000
um every time i had a data project

00:01:12,720 --> 00:01:18,720
i always had to go with django because

00:01:16,000 --> 00:01:19,200
django to me is really straightforward

00:01:18,720 --> 00:01:23,040
um

00:01:19,200 --> 00:01:27,840
the orm is so simple oh well

00:01:23,040 --> 00:01:30,960
at least i find it simple i'm sorry

00:01:27,840 --> 00:01:33,759
is it it's simple is is so simple for me

00:01:30,960 --> 00:01:34,240
that uh describing my data in the models

00:01:33,759 --> 00:01:38,000
is

00:01:34,240 --> 00:01:38,799
really a no-brainer when i have a clear

00:01:38,000 --> 00:01:41,840
vision of

00:01:38,799 --> 00:01:45,680
what my data actually look like

00:01:41,840 --> 00:01:48,799
the django orm is a tool that let me

00:01:45,680 --> 00:01:51,759
interact with those data really easily

00:01:48,799 --> 00:01:52,320
and django comes also with tons of

00:01:51,759 --> 00:01:55,439
useful

00:01:52,320 --> 00:01:56,479
middlewares so you can have lots of

00:01:55,439 --> 00:01:59,680
functionalities

00:01:56,479 --> 00:02:00,079
um already embedded in django and django

00:01:59,680 --> 00:02:03,600
also

00:02:00,079 --> 00:02:08,560
takes care of permissions authentication

00:02:03,600 --> 00:02:12,160
and it also comes with um django admin

00:02:08,560 --> 00:02:16,000
another perk of django uh for me are

00:02:12,160 --> 00:02:19,280
database migrations whenever i was

00:02:16,000 --> 00:02:23,040
confronted to a data project

00:02:19,280 --> 00:02:27,760
i always had this issue what if

00:02:23,040 --> 00:02:30,239
my data model change in the future

00:02:27,760 --> 00:02:31,280
will i have to always rebuild the

00:02:30,239 --> 00:02:34,319
database

00:02:31,280 --> 00:02:37,599
or delete the table create new tables

00:02:34,319 --> 00:02:38,080
um dealing with migrations was really a

00:02:37,599 --> 00:02:41,280
pain

00:02:38,080 --> 00:02:42,080
at a certain moment for me and with

00:02:41,280 --> 00:02:44,959
django

00:02:42,080 --> 00:02:45,680
uh i think migrations are done the right

00:02:44,959 --> 00:02:48,800
way and

00:02:45,680 --> 00:02:51,760
they it it is really really simple

00:02:48,800 --> 00:02:53,440
um so yeah those are all the reasons why

00:02:51,760 --> 00:02:57,280
i tend to prefer django

00:02:53,440 --> 00:03:00,400
um over other frameworks that exists

00:02:57,280 --> 00:03:00,959
and about django admin we will come back

00:03:00,400 --> 00:03:03,519
to it

00:03:00,959 --> 00:03:04,560
later uh before that i want to talk

00:03:03,519 --> 00:03:08,080
about dashboards

00:03:04,560 --> 00:03:09,280
um dashboards are la are what i like to

00:03:08,080 --> 00:03:12,480
call the ui

00:03:09,280 --> 00:03:15,599
or and the ux of your data projects

00:03:12,480 --> 00:03:19,360
uh maybe i'm misusing the terms here but

00:03:15,599 --> 00:03:22,080
what i mean by this is um dashboards

00:03:19,360 --> 00:03:22,879
represents the interface that your users

00:03:22,080 --> 00:03:26,000
have

00:03:22,879 --> 00:03:26,720
to interact with data and dashboards are

00:03:26,000 --> 00:03:30,640
also

00:03:26,720 --> 00:03:34,400
um they are they are also um

00:03:30,640 --> 00:03:37,120
how can i say this um each user have

00:03:34,400 --> 00:03:38,239
a particular experience with a dashboard

00:03:37,120 --> 00:03:40,640
what i mean by this

00:03:38,239 --> 00:03:42,720
is um when you create a dashboard you

00:03:40,640 --> 00:03:45,760
have users in mind

00:03:42,720 --> 00:03:46,400
because your dashboard needs to be

00:03:45,760 --> 00:03:49,200
easily

00:03:46,400 --> 00:03:51,200
readable your dashboard needs to provide

00:03:49,200 --> 00:03:53,680
certain insights okay so

00:03:51,200 --> 00:03:55,120
not everybody will need the same

00:03:53,680 --> 00:03:58,239
insights on data

00:03:55,120 --> 00:04:00,480
okay um it goes also

00:03:58,239 --> 00:04:02,080
it's also the same for forecasting uh

00:04:00,480 --> 00:04:05,760
not all users needs that

00:04:02,080 --> 00:04:06,400
functionality and not every users will

00:04:05,760 --> 00:04:09,680
forecast

00:04:06,400 --> 00:04:12,959
the same way not every users will uh

00:04:09,680 --> 00:04:13,519
try to uh make sense uh out of data the

00:04:12,959 --> 00:04:16,400
same way

00:04:13,519 --> 00:04:17,359
some will search for certain matrix

00:04:16,400 --> 00:04:20,400
right

00:04:17,359 --> 00:04:21,120
and your dashboard also need to provide

00:04:20,400 --> 00:04:24,400
summaries

00:04:21,120 --> 00:04:26,880
and chart and etc um so

00:04:24,400 --> 00:04:28,080
in all this why are we talking about

00:04:26,880 --> 00:04:31,680
django admin

00:04:28,080 --> 00:04:34,400
as a dashboard because most of the time

00:04:31,680 --> 00:04:37,440
in your data project

00:04:34,400 --> 00:04:41,280
you you well you need

00:04:37,440 --> 00:04:44,639
to provide a dashboard okay but

00:04:41,280 --> 00:04:45,360
most of the time uh what you need to

00:04:44,639 --> 00:04:48,080
provide

00:04:45,360 --> 00:04:49,280
are just simple summaries right or

00:04:48,080 --> 00:04:52,080
simple trends

00:04:49,280 --> 00:04:53,440
you need to to to display simple charts

00:04:52,080 --> 00:04:56,560
or you need to display

00:04:53,440 --> 00:05:00,080
a simple uh simple time series

00:04:56,560 --> 00:05:02,240
okay and with django orm

00:05:00,080 --> 00:05:04,160
you can actually create those

00:05:02,240 --> 00:05:05,360
aggregations those summaries you can

00:05:04,160 --> 00:05:07,919
create them easily

00:05:05,360 --> 00:05:08,479
and with django admin you can display

00:05:07,919 --> 00:05:10,160
them

00:05:08,479 --> 00:05:12,080
right so that's why i'm talking about

00:05:10,160 --> 00:05:15,360
django admin as a dashboard

00:05:12,080 --> 00:05:16,080
and in my experience um this is

00:05:15,360 --> 00:05:19,199
something

00:05:16,080 --> 00:05:22,479
that uh had led me to

00:05:19,199 --> 00:05:26,320
uh providing a

00:05:22,479 --> 00:05:29,039
faster insight to my to my users well uh

00:05:26,320 --> 00:05:29,600
what i mean by this is um i start a

00:05:29,039 --> 00:05:32,960
project

00:05:29,600 --> 00:05:35,840
uh i choose django as a framework

00:05:32,960 --> 00:05:36,639
and i choose django admin to let my

00:05:35,840 --> 00:05:39,919
users

00:05:36,639 --> 00:05:42,080
create read update and delete data okay

00:05:39,919 --> 00:05:43,199
because i don't want to create forms

00:05:42,080 --> 00:05:45,280
again

00:05:43,199 --> 00:05:46,639
and i don't want to create the tables

00:05:45,280 --> 00:05:51,039
again

00:05:46,639 --> 00:05:54,240
because yeah yeah i'm a bit lazy

00:05:51,039 --> 00:05:56,319
and yeah so i use django admin for that

00:05:54,240 --> 00:05:57,280
and i don't want my user to leave django

00:05:56,319 --> 00:06:00,400
admin uh

00:05:57,280 --> 00:06:00,880
so i don't want to create a second um a

00:06:00,400 --> 00:06:03,039
second

00:06:00,880 --> 00:06:04,800
setup for the dashboard even though

00:06:03,039 --> 00:06:06,479
there are excellent framework out there

00:06:04,800 --> 00:06:08,240
for dashboards um

00:06:06,479 --> 00:06:10,400
on top of my mind i have graffana

00:06:08,240 --> 00:06:14,080
grafana which is good for time series

00:06:10,400 --> 00:06:15,759
um well django dash django dash is

00:06:14,080 --> 00:06:18,000
something really really really

00:06:15,759 --> 00:06:20,800
interesting in this sector

00:06:18,000 --> 00:06:21,759
and yeah well in in the early stage of

00:06:20,800 --> 00:06:24,800
the projects

00:06:21,759 --> 00:06:25,600
usually uh users tend to need only

00:06:24,800 --> 00:06:28,800
summaries

00:06:25,600 --> 00:06:29,440
and simple charts okay so if i can do

00:06:28,800 --> 00:06:31,919
that with

00:06:29,440 --> 00:06:32,960
with django admin or within django admin

00:06:31,919 --> 00:06:35,360
well

00:06:32,960 --> 00:06:36,720
this for me is a plus okay so i don't

00:06:35,360 --> 00:06:39,440
create dependencies

00:06:36,720 --> 00:06:41,199
uh the early stages of my projects uh

00:06:39,440 --> 00:06:44,319
are really simple

00:06:41,199 --> 00:06:48,880
and i can actually build upon that

00:06:44,319 --> 00:06:53,199
later okay so let's see um

00:06:48,880 --> 00:06:56,479
in practice how we can do this okay

00:06:53,199 --> 00:06:59,840
in django we have a neat trick

00:06:56,479 --> 00:07:00,639
which is called a proxy model the proxy

00:06:59,840 --> 00:07:03,599
models

00:07:00,639 --> 00:07:04,160
are actually objects that mimic a real

00:07:03,599 --> 00:07:06,720
model

00:07:04,160 --> 00:07:08,639
without creating a table in the database

00:07:06,720 --> 00:07:11,120
for it

00:07:08,639 --> 00:07:12,319
we can do whatever we want with that

00:07:11,120 --> 00:07:15,520
proxy

00:07:12,319 --> 00:07:16,800
and it will actually act as if it was

00:07:15,520 --> 00:07:20,479
the real model

00:07:16,800 --> 00:07:22,639
say you can make query set on it uh

00:07:20,479 --> 00:07:24,560
you can make aggregation on it and this

00:07:22,639 --> 00:07:27,360
is exactly what we will leverage

00:07:24,560 --> 00:07:29,039
here so as you can see in the for

00:07:27,360 --> 00:07:30,800
instance in the example here

00:07:29,039 --> 00:07:32,800
we have the reading summary which is a

00:07:30,800 --> 00:07:35,440
proxy of reading

00:07:32,800 --> 00:07:37,039
uh reading itself is a model describing

00:07:35,440 --> 00:07:40,400
uh the measurements we

00:07:37,039 --> 00:07:43,440
have for each basin um

00:07:40,400 --> 00:07:46,800
uh for yeah every day uh

00:07:43,440 --> 00:07:47,120
at certain times okay so for a basin we

00:07:46,800 --> 00:07:49,759
have

00:07:47,120 --> 00:07:50,479
multiple temperature oxygen readings per

00:07:49,759 --> 00:07:54,720
day

00:07:50,479 --> 00:07:56,400
okay um by the way this example is

00:07:54,720 --> 00:07:56,879
actually an extract of my day-to-day

00:07:56,400 --> 00:08:00,960
work

00:07:56,879 --> 00:08:01,360
right currently i am working in a fish

00:08:00,960 --> 00:08:04,479
farm

00:08:01,360 --> 00:08:06,400
where they have to monitor um well the

00:08:04,479 --> 00:08:08,080
fish farming

00:08:06,400 --> 00:08:09,919
and they have to manage the temperature

00:08:08,080 --> 00:08:12,400
oxy oxygen of the water

00:08:09,919 --> 00:08:13,520
in the water they have to monitor also

00:08:12,400 --> 00:08:16,080
temperature of the air

00:08:13,520 --> 00:08:17,120
et cetera et cetera so they have a bunch

00:08:16,080 --> 00:08:18,879
of environmental

00:08:17,120 --> 00:08:20,400
and so technical data that i have to

00:08:18,879 --> 00:08:22,879
store compute on

00:08:20,400 --> 00:08:25,039
and provide insights so they can

00:08:22,879 --> 00:08:27,199
actually forecast

00:08:25,039 --> 00:08:29,039
forecast the quality of the products uh

00:08:27,199 --> 00:08:32,080
in the end

00:08:29,039 --> 00:08:34,320
so yeah in here after creating though so

00:08:32,080 --> 00:08:34,959
the proxy we can actually add that proxy

00:08:34,320 --> 00:08:39,120
model

00:08:34,959 --> 00:08:42,159
to admin just like uh just like a normal

00:08:39,120 --> 00:08:43,440
model okay and as you can see on the

00:08:42,159 --> 00:08:45,279
right

00:08:43,440 --> 00:08:46,720
the template will create a custom

00:08:45,279 --> 00:08:49,839
template for that

00:08:46,720 --> 00:08:51,360
that extends the base change list

00:08:49,839 --> 00:08:54,240
template of admin

00:08:51,360 --> 00:08:55,440
the channel list template of admin is

00:08:54,240 --> 00:08:58,480
that page you see

00:08:55,440 --> 00:08:58,800
when you click um on the model and you

00:08:58,480 --> 00:09:01,360
have

00:08:58,800 --> 00:09:02,480
the table presenting the actual data in

00:09:01,360 --> 00:09:04,560
the database

00:09:02,480 --> 00:09:06,240
that is the template here and this

00:09:04,560 --> 00:09:08,880
template we extend it

00:09:06,240 --> 00:09:09,680
and we will just populate the block

00:09:08,880 --> 00:09:13,760
result list

00:09:09,680 --> 00:09:16,800
where the actual table goes okay

00:09:13,760 --> 00:09:20,880
so in practice it looks like this

00:09:16,800 --> 00:09:24,320
after doing all this we have this result

00:09:20,880 --> 00:09:26,959
a blank page for our reading summary

00:09:24,320 --> 00:09:28,480
and here in the blank part this is what

00:09:26,959 --> 00:09:31,519
we call the table

00:09:28,480 --> 00:09:32,399
the table with the summaries okay so

00:09:31,519 --> 00:09:36,160
those summaries

00:09:32,399 --> 00:09:37,279
as i said will be uh will be computed by

00:09:36,160 --> 00:09:41,279
aggregation

00:09:37,279 --> 00:09:43,040
right and as you can see here

00:09:41,279 --> 00:09:44,800
in the model admin of the reading

00:09:43,040 --> 00:09:47,120
summary um

00:09:44,800 --> 00:09:48,399
we have the changelist view which is the

00:09:47,120 --> 00:09:51,040
actual view

00:09:48,399 --> 00:09:51,680
that is called by django admin to be

00:09:51,040 --> 00:09:55,120
rendered

00:09:51,680 --> 00:09:57,600
into changelist.html okay

00:09:55,120 --> 00:09:58,240
and in this view we do a bunch of stuff

00:09:57,600 --> 00:10:00,080
uh

00:09:58,240 --> 00:10:01,279
where we actually take advantage of

00:10:00,080 --> 00:10:04,160
django admin

00:10:01,279 --> 00:10:04,880
we don't compute anything new we just

00:10:04,160 --> 00:10:07,120
extract

00:10:04,880 --> 00:10:08,079
the presets that django created from the

00:10:07,120 --> 00:10:11,519
context

00:10:08,079 --> 00:10:12,160
okay and we we don't we don't reinvent

00:10:11,519 --> 00:10:15,440
the wheel

00:10:12,160 --> 00:10:18,480
right and we create aggregations

00:10:15,440 --> 00:10:21,200
on that query set see here

00:10:18,480 --> 00:10:22,880
we have a dictionary called metrics

00:10:21,200 --> 00:10:25,920
where we actually create

00:10:22,880 --> 00:10:27,519
the aggregations for instance here we

00:10:25,920 --> 00:10:31,200
count the total samples

00:10:27,519 --> 00:10:34,240
so the total readings okay

00:10:31,200 --> 00:10:37,839
we calculate the average temperature

00:10:34,240 --> 00:10:39,760
and by grouping the the the values in

00:10:37,839 --> 00:10:42,959
the query set by basing

00:10:39,760 --> 00:10:47,200
uh we annotate with those metrics

00:10:42,959 --> 00:10:50,399
right so in results we have a dictionary

00:10:47,200 --> 00:10:53,680
here summary where where we have

00:10:50,399 --> 00:10:57,839
per basin the total samples

00:10:53,680 --> 00:11:00,480
and the average temperature

00:10:57,839 --> 00:11:01,519
and we can even create an aggregation on

00:11:00,480 --> 00:11:04,320
that query set

00:11:01,519 --> 00:11:05,920
where we where we will have the total of

00:11:04,320 --> 00:11:09,760
total samples

00:11:05,920 --> 00:11:12,880
and the average of all temperature

00:11:09,760 --> 00:11:16,000
uh readings and with

00:11:12,880 --> 00:11:20,160
all this a bunch of

00:11:16,000 --> 00:11:21,920
html here where we will create the

00:11:20,160 --> 00:11:23,279
actual table with basic number of

00:11:21,920 --> 00:11:26,800
samples temperature

00:11:23,279 --> 00:11:30,480
even oxygen if you want uh as columns

00:11:26,800 --> 00:11:33,519
and the rows are actually extracted

00:11:30,480 --> 00:11:35,600
from the summary dictionary i see here

00:11:33,519 --> 00:11:35,920
that in my example i have mean oxygen

00:11:35,600 --> 00:11:38,240
that

00:11:35,920 --> 00:11:40,240
doesn't appear here but you get the

00:11:38,240 --> 00:11:42,320
points right

00:11:40,240 --> 00:11:43,839
and you can also use custom tags to

00:11:42,320 --> 00:11:47,519
prettify the results uh

00:11:43,839 --> 00:11:50,880
for instance roundup values etc etc okay

00:11:47,519 --> 00:11:54,160
and in practice it gives

00:11:50,880 --> 00:11:57,600
that kind of results see we even

00:11:54,160 --> 00:12:01,120
have the date hierarchy here

00:11:57,600 --> 00:12:04,399
and we have the column

00:12:01,120 --> 00:12:07,040
basing number of samples temperature

00:12:04,399 --> 00:12:08,079
and oxygen and at the bottom we have the

00:12:07,040 --> 00:12:10,720
aggregation line

00:12:08,079 --> 00:12:12,800
where we have the total of total samples

00:12:10,720 --> 00:12:14,320
we have the mean value of temperature

00:12:12,800 --> 00:12:17,839
the mean value of oxygen

00:12:14,320 --> 00:12:21,360
so if you do click on the date hierarchy

00:12:17,839 --> 00:12:25,120
filter here you will go um deeper

00:12:21,360 --> 00:12:28,160
in the in the results i mean it will

00:12:25,120 --> 00:12:28,959
automatically create the correct query

00:12:28,160 --> 00:12:32,639
sets

00:12:28,959 --> 00:12:35,120
so for instance if you click on 2020

00:12:32,639 --> 00:12:35,680
then the query set will change to only

00:12:35,120 --> 00:12:38,800
um

00:12:35,680 --> 00:12:41,040
take in account the readings of 2020

00:12:38,800 --> 00:12:42,959
and so the value that you will have

00:12:41,040 --> 00:12:44,079
automatically will be computed on this

00:12:42,959 --> 00:12:46,560
period right

00:12:44,079 --> 00:12:48,560
and this is where it is so insanely

00:12:46,560 --> 00:12:50,480
great to use django admin

00:12:48,560 --> 00:12:52,639
it already creates the queries that you

00:12:50,480 --> 00:12:57,120
don't have to do to do anything about it

00:12:52,639 --> 00:13:00,560
right so we've been talking about charts

00:12:57,120 --> 00:13:03,440
in dashboards okay so uh but

00:13:00,560 --> 00:13:03,760
now what we've been doing is just using

00:13:03,440 --> 00:13:06,959
um

00:13:03,760 --> 00:13:10,720
django orm to compute

00:13:06,959 --> 00:13:14,000
data and let's jungle admin to its magic

00:13:10,720 --> 00:13:16,800
to display data okay so with charts what

00:13:14,000 --> 00:13:19,600
we can do we can visualize those data

00:13:16,800 --> 00:13:20,000
remember we need no dependencies right

00:13:19,600 --> 00:13:23,279
um

00:13:20,000 --> 00:13:26,160
i'm sorry we remember

00:13:23,279 --> 00:13:26,800
we we don't want any dependencies okay

00:13:26,160 --> 00:13:30,000
so

00:13:26,800 --> 00:13:33,040
we'll go full css here um

00:13:30,000 --> 00:13:37,120
i apologize in advance i'm not a

00:13:33,040 --> 00:13:37,680
great css developer so what you will see

00:13:37,120 --> 00:13:40,399
after

00:13:37,680 --> 00:13:42,399
if you are a good css developer please

00:13:40,399 --> 00:13:45,839
uh we can talk after this

00:13:42,399 --> 00:13:50,480
after this so we can make this better

00:13:45,839 --> 00:13:54,160
okay um so

00:13:50,480 --> 00:13:58,320
what we have here in admin admin.pi um

00:13:54,160 --> 00:14:02,880
is to create the to create the chart

00:13:58,320 --> 00:14:06,320
we will uh draw lines uh

00:14:02,880 --> 00:14:09,440
from the bottom to the top okay

00:14:06,320 --> 00:14:12,800
and we won't draw um the actual

00:14:09,440 --> 00:14:15,760
values but we will just draw um

00:14:12,800 --> 00:14:16,320
the proportion right so that's why here

00:14:15,760 --> 00:14:18,880
uh

00:14:16,320 --> 00:14:19,920
i do take the minimum and the maximum

00:14:18,880 --> 00:14:22,880
value

00:14:19,920 --> 00:14:23,440
and then i calculate the percentage here

00:14:22,880 --> 00:14:27,199
so that's

00:14:23,440 --> 00:14:28,560
i know exactly the percentage or the

00:14:27,199 --> 00:14:32,079
area that i have to

00:14:28,560 --> 00:14:35,519
to color in my css right so

00:14:32,079 --> 00:14:39,040
this typically here on the right

00:14:35,519 --> 00:14:41,839
looks like this in this div

00:14:39,040 --> 00:14:42,560
class bar with the style which is the

00:14:41,839 --> 00:14:44,399
height

00:14:42,560 --> 00:14:45,839
right the height here being the

00:14:44,399 --> 00:14:49,360
percentage that

00:14:45,839 --> 00:14:52,399
i've been computing here okay

00:14:49,360 --> 00:14:55,920
so blah blah blah all this

00:14:52,399 --> 00:14:56,839
gives this right see how beautiful is

00:14:55,920 --> 00:14:59,839
that

00:14:56,839 --> 00:15:03,040
um here you can see that

00:14:59,839 --> 00:15:06,720
uh it displays uh the graph

00:15:03,040 --> 00:15:10,079
of values computed over time okay

00:15:06,720 --> 00:15:13,440
so what we did is to actually

00:15:10,079 --> 00:15:17,279
group values per period okay

00:15:13,440 --> 00:15:20,079
and that period being days we can have

00:15:17,279 --> 00:15:21,040
months we can have weeks we can have

00:15:20,079 --> 00:15:24,480
years

00:15:21,040 --> 00:15:27,600
you can even make this period um

00:15:24,480 --> 00:15:28,480
let's say uh functional what i mean by

00:15:27,600 --> 00:15:32,320
functional is

00:15:28,480 --> 00:15:35,440
um you can actually say if for instance

00:15:32,320 --> 00:15:38,480
uh in the date hierarchy i choose

00:15:35,440 --> 00:15:41,920
years then period becomes

00:15:38,480 --> 00:15:45,360
weak if i do choose

00:15:41,920 --> 00:15:48,560
months then periods become days

00:15:45,360 --> 00:15:51,360
etc etc see i guess you

00:15:48,560 --> 00:15:52,639
i think you see the point right so it

00:15:51,360 --> 00:15:55,839
gives something like this

00:15:52,639 --> 00:15:57,519
okay so at this point you have a fully

00:15:55,839 --> 00:15:58,399
functional dashboard where you have a

00:15:57,519 --> 00:16:00,560
summary

00:15:58,399 --> 00:16:01,759
and you have a chart uh presenting the

00:16:00,560 --> 00:16:04,800
data over time

00:16:01,759 --> 00:16:05,440
and with the date hierarchy in in django

00:16:04,800 --> 00:16:08,560
admin

00:16:05,440 --> 00:16:10,079
in the module admin you are able to have

00:16:08,560 --> 00:16:13,360
a neat filter

00:16:10,079 --> 00:16:16,720
of your values over time and

00:16:13,360 --> 00:16:18,880
this all this is exactly what

00:16:16,720 --> 00:16:20,480
makes django admin so interesting to me

00:16:18,880 --> 00:16:24,240
because um

00:16:20,480 --> 00:16:27,279
in less than maybe uh

00:16:24,240 --> 00:16:30,800
an hour yeah you can provide

00:16:27,279 --> 00:16:34,160
insights uh to your users uh uh

00:16:30,800 --> 00:16:37,199
on the data you have in django admin

00:16:34,160 --> 00:16:40,240
uh yeah so

00:16:37,199 --> 00:16:44,240
to be um to be uh precise

00:16:40,240 --> 00:16:47,199
uh this is how i actually uh

00:16:44,240 --> 00:16:48,560
uh did it uh on the project that i'm

00:16:47,199 --> 00:16:51,680
currently working on

00:16:48,560 --> 00:16:54,800
uh with the fish farm

00:16:51,680 --> 00:16:57,279
within uh within a few weeks

00:16:54,800 --> 00:16:58,240
i was able to collect the data gather

00:16:57,279 --> 00:17:00,240
them store them

00:16:58,240 --> 00:17:01,839
and provide that kind of dashboard so

00:17:00,240 --> 00:17:04,720
that we could move forward

00:17:01,839 --> 00:17:05,120
faster okay and then after build up on

00:17:04,720 --> 00:17:07,919
that

00:17:05,120 --> 00:17:08,799
and have another framework dedicated to

00:17:07,919 --> 00:17:11,520
dashboards but

00:17:08,799 --> 00:17:12,400
that came in the second position but the

00:17:11,520 --> 00:17:15,439
point of

00:17:12,400 --> 00:17:19,679
all this is that you can actually

00:17:15,439 --> 00:17:22,160
emit deadlines quickly with django admin

00:17:19,679 --> 00:17:24,079
in your data projects and you don't need

00:17:22,160 --> 00:17:27,120
to reinvent the wheel

00:17:24,079 --> 00:17:27,760
and when from there from here where you

00:17:27,120 --> 00:17:31,039
can go

00:17:27,760 --> 00:17:32,320
is uh actually use a dedicated library

00:17:31,039 --> 00:17:34,720
to plot the charts

00:17:32,320 --> 00:17:36,320
okay still within django admin you so

00:17:34,720 --> 00:17:36,960
you can write a bit of javascript if you

00:17:36,320 --> 00:17:38,880
want

00:17:36,960 --> 00:17:40,000
um if you don't want that you can

00:17:38,880 --> 00:17:43,039
actually use

00:17:40,000 --> 00:17:46,880
a dedicated dashboard framework

00:17:43,039 --> 00:17:47,840
right but you can also customize the

00:17:46,880 --> 00:17:50,559
queries that uh

00:17:47,840 --> 00:17:52,320
that you have in the model admin so that

00:17:50,559 --> 00:17:55,520
your django admin renders

00:17:52,320 --> 00:17:56,080
faster uh for those that are uh used to

00:17:55,520 --> 00:17:58,080
django

00:17:56,080 --> 00:17:59,760
and django admin in particular you know

00:17:58,080 --> 00:18:01,679
that if you don't quite

00:17:59,760 --> 00:18:03,280
understand how query set are made in

00:18:01,679 --> 00:18:06,559
django then

00:18:03,280 --> 00:18:08,960
your application can be a bit slow

00:18:06,559 --> 00:18:10,240
uh i've been experiencing it myself and

00:18:08,960 --> 00:18:13,760
trust me annotations

00:18:10,240 --> 00:18:16,160
and aggregations are very very powerful

00:18:13,760 --> 00:18:17,679
tools that you you could use in django

00:18:16,160 --> 00:18:21,039
to make it faster

00:18:17,679 --> 00:18:23,440
and you can also add custom interaction

00:18:21,039 --> 00:18:24,559
for users like custom functions custom

00:18:23,440 --> 00:18:27,679
filters

00:18:24,559 --> 00:18:28,320
um you can add custom buttons custom

00:18:27,679 --> 00:18:31,840
columns

00:18:28,320 --> 00:18:35,039
etc etc all this together

00:18:31,840 --> 00:18:37,360
will make a better django admin

00:18:35,039 --> 00:18:39,200
application without you having

00:18:37,360 --> 00:18:42,880
reinventing the wheel again

00:18:39,200 --> 00:18:46,080
okay and yeah

00:18:42,880 --> 00:18:49,679
we've reached the end of the talk um

00:18:46,080 --> 00:18:51,440
i hope um diving into django admin with

00:18:49,679 --> 00:18:55,200
me was quite interesting

00:18:51,440 --> 00:18:58,400
i hope so um and

00:18:55,200 --> 00:19:01,360
if you have any questions yeah i

00:18:58,400 --> 00:19:02,480
i i i think we have a community session

00:19:01,360 --> 00:19:04,960
after that

00:19:02,480 --> 00:19:06,240
and if you have any questions uh i'll be

00:19:04,960 --> 00:19:09,600
glad to answer them

00:19:06,240 --> 00:19:12,080
answer them uh as much as i can so yeah

00:19:09,600 --> 00:19:13,039
thank you very much for sticking with me

00:19:12,080 --> 00:19:25,360
here

00:19:13,039 --> 00:19:25,360

YouTube URL: https://www.youtube.com/watch?v=_IeWyFvqp9o


