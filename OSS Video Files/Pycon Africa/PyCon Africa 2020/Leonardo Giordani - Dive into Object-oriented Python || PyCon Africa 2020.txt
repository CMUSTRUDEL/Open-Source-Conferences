Title: Leonardo Giordani - Dive into Object-oriented Python || PyCon Africa 2020
Publication date: 2020-08-26
Playlist: PyCon Africa 2020
Description: 
	I see many Python programmers, not only beginners, that struggle to understand how to achieve some effects or what happens in their favourite library/framework. Class-based views in Django, high-order functions in the standard library, and sometimes the very class/instance difference can be perceived as magic, thus preventing the programmer to fully exploit their power and to avoid pitfalls.

In this tutorial I will go through the pillars of Object-oriented programming (encapsulation, delegation, polymorphism) showing how they are implemented in Python, with theoretical explanations and exercises. I already run this workshop ten times since 2014 and I always registered a great interest in the matter and a rewarding satisfaction from the attendees when they finally grasp the (eventually very simple) mechanisms that Python is based on.
Captions: 
	00:00:15,599 --> 00:00:20,640
okay great

00:00:17,039 --> 00:00:23,840
uh so um welcome

00:00:20,640 --> 00:00:25,920
to the workshop this is dive into object

00:00:23,840 --> 00:00:29,199
oriented python

00:00:25,920 --> 00:00:31,920
um it's a long workshop it's three hours

00:00:29,199 --> 00:00:34,000
um but i will try to respect the breaks

00:00:31,920 --> 00:00:37,680
uh marine imposed on me yeah

00:00:34,000 --> 00:00:40,719
just okay um so

00:00:37,680 --> 00:00:44,000
first of all the uh this workshop

00:00:40,719 --> 00:00:47,600
uh comes from a set of posts that

00:00:44,000 --> 00:00:48,719
i wrote so what i want to say is today i

00:00:47,600 --> 00:00:52,399
won't cover

00:00:48,719 --> 00:00:56,719
everything because uh

00:00:52,399 --> 00:01:00,000
there is a lot to cover okay so um

00:00:56,719 --> 00:01:02,879
i will just give you glimpses of what

00:01:00,000 --> 00:01:04,879
uh object oriented is in python we will

00:01:02,879 --> 00:01:08,320
try to understand some of the

00:01:04,879 --> 00:01:09,119
tricks and the main things um i'm always

00:01:08,320 --> 00:01:12,400
available

00:01:09,119 --> 00:01:13,439
uh later after the workshop so get in

00:01:12,400 --> 00:01:16,560
touch

00:01:13,439 --> 00:01:20,159
okay uh without further ado i

00:01:16,560 --> 00:01:22,720
will check here sometimes

00:01:20,159 --> 00:01:24,640
if we have questions uh okay this is the

00:01:22,720 --> 00:01:26,640
workshop

00:01:24,640 --> 00:01:28,640
about me very quickly because i don't

00:01:26,640 --> 00:01:30,880
have that much time i'm just an engineer

00:01:28,640 --> 00:01:34,400
i like python i like many things

00:01:30,880 --> 00:01:37,920
uh i blog on the digital digital card

00:01:34,400 --> 00:01:38,799
online this is my blog and i mention it

00:01:37,920 --> 00:01:42,159
because

00:01:38,799 --> 00:01:45,439
if you want this whole workshop

00:01:42,159 --> 00:01:49,439
is available here as a set of

00:01:45,439 --> 00:01:52,479
six posts that i wrote some time ago

00:01:49,439 --> 00:01:54,640
so if i skip something important

00:01:52,479 --> 00:01:56,079
if something is not clear you can just

00:01:54,640 --> 00:02:00,719
head to my blog and

00:01:56,079 --> 00:02:03,600
read it and then get in touch um

00:02:00,719 --> 00:02:04,799
what you will learn today i will touch

00:02:03,600 --> 00:02:07,759
on these things so

00:02:04,799 --> 00:02:08,640
first of all the principles of object

00:02:07,759 --> 00:02:11,840
and

00:02:08,640 --> 00:02:13,360
there is behind them why we are using

00:02:11,840 --> 00:02:15,920
object-oriented

00:02:13,360 --> 00:02:17,440
more than 40 years after it was

00:02:15,920 --> 00:02:20,840
conceived

00:02:17,440 --> 00:02:22,959
and how python implements

00:02:20,840 --> 00:02:25,280
object-oriented

00:02:22,959 --> 00:02:27,040
and you know some of the magic things

00:02:25,280 --> 00:02:30,480
magic things that happen

00:02:27,040 --> 00:02:31,280
behind the scenes and the meaning of

00:02:30,480 --> 00:02:33,519
words like

00:02:31,280 --> 00:02:34,560
class instance attribute inheritance

00:02:33,519 --> 00:02:36,879
composition

00:02:34,560 --> 00:02:37,920
many others uh i won't cover meta

00:02:36,879 --> 00:02:40,160
classes they are

00:02:37,920 --> 00:02:41,040
far too complicated for the time we have

00:02:40,160 --> 00:02:44,319
and they are not

00:02:41,040 --> 00:02:45,920
that important for your uh careers

00:02:44,319 --> 00:02:47,519
python developers at least for the

00:02:45,920 --> 00:02:50,640
initial one

00:02:47,519 --> 00:02:53,519
as for the schedule i'm already late but

00:02:50,640 --> 00:02:54,080
i will cover the intro which i am giving

00:02:53,519 --> 00:02:58,080
now and

00:02:54,080 --> 00:03:00,159
the first part in um in this first hour

00:02:58,080 --> 00:03:02,159
then we have a break second part a break

00:03:00,159 --> 00:03:05,120
and the third part i will try to finish

00:03:02,159 --> 00:03:08,159
for two and to be respectful of the

00:03:05,120 --> 00:03:08,159
timing of the conference

00:03:08,239 --> 00:03:15,120
questions no questions okay great um

00:03:11,760 --> 00:03:18,640
okay um as for the workshop proper so

00:03:15,120 --> 00:03:21,920
if you installed the jupiter notebook

00:03:18,640 --> 00:03:25,680
that i i sent

00:03:21,920 --> 00:03:26,239
instructions so if you have it you can

00:03:25,680 --> 00:03:29,920
just

00:03:26,239 --> 00:03:29,920
run the jupiter notebook

00:03:30,840 --> 00:03:37,280
command and this will

00:03:33,840 --> 00:03:38,239
open the notebook here so this is what

00:03:37,280 --> 00:03:40,799
i'm gonna use

00:03:38,239 --> 00:03:43,280
for the workshop today uh i invite you

00:03:40,799 --> 00:03:45,200
to run the same thing on your computer

00:03:43,280 --> 00:03:49,200
and to try and follow

00:03:45,200 --> 00:03:52,959
along also the exercises are in the

00:03:49,200 --> 00:03:56,000
are here so i will read the exercises

00:03:52,959 --> 00:03:56,720
give you some time to perform them to

00:03:56,000 --> 00:04:00,000
solve them

00:03:56,720 --> 00:04:02,480
and then give you my solution please

00:04:00,000 --> 00:04:03,200
remember that my solution is not the

00:04:02,480 --> 00:04:04,879
solution

00:04:03,200 --> 00:04:06,560
so it's one one of the solutions

00:04:04,879 --> 00:04:07,120
sometimes it's the only one sometimes

00:04:06,560 --> 00:04:11,680
it's just

00:04:07,120 --> 00:04:11,680
you know what i think we might do

00:04:12,080 --> 00:04:18,320
okay um let's go

00:04:15,200 --> 00:04:18,320
i hope you're ready

00:04:20,239 --> 00:04:23,360
cool so object-oriented programming

00:04:22,000 --> 00:04:25,840
where do we start

00:04:23,360 --> 00:04:27,199
let's start with this um there is no

00:04:25,840 --> 00:04:28,639
prior

00:04:27,199 --> 00:04:30,400
knowledge that you need for this

00:04:28,639 --> 00:04:34,800
workshop you just need to you know

00:04:30,400 --> 00:04:38,160
be able to fire python and you know

00:04:34,800 --> 00:04:40,960
conceive what a computer can do um

00:04:38,160 --> 00:04:42,000
this is what happened in this 6070s

00:04:40,960 --> 00:04:44,080
people were like

00:04:42,000 --> 00:04:45,840
you know starting using computers they

00:04:44,080 --> 00:04:46,960
were starting doing things like this so

00:04:45,840 --> 00:04:50,320
they were

00:04:46,960 --> 00:04:52,479
uh creating

00:04:50,320 --> 00:04:54,639
putting data into computers like this is

00:04:52,479 --> 00:04:56,400
a tuple in python but after all you know

00:04:54,639 --> 00:04:58,800
like a least the tuple is

00:04:56,400 --> 00:05:00,479
sort of the same thing it's just a bunch

00:04:58,800 --> 00:05:03,680
of data

00:05:00,479 --> 00:05:04,479
and and they were creating functions to

00:05:03,680 --> 00:05:07,759
work

00:05:04,479 --> 00:05:10,080
on those uh values

00:05:07,759 --> 00:05:10,800
so in this case if you don't know python

00:05:10,080 --> 00:05:13,919
notebooks

00:05:10,800 --> 00:05:17,199
very quickly with ctrl enter you can

00:05:13,919 --> 00:05:20,000
run a cell so this is what

00:05:17,199 --> 00:05:20,320
i'm doing now and i'm running control

00:05:20,000 --> 00:05:22,320
and

00:05:20,320 --> 00:05:24,000
i'm running the cell so this as you can

00:05:22,320 --> 00:05:26,720
see this works okay it's

00:05:24,000 --> 00:05:28,639
pretty easy we defined data with the

00:05:26,720 --> 00:05:31,680
final function that accepts

00:05:28,639 --> 00:05:33,440
that data and returns in this case the

00:05:31,680 --> 00:05:34,560
average you know the sum of all the data

00:05:33,440 --> 00:05:38,479
divided by the length

00:05:34,560 --> 00:05:41,440
and this works i hope

00:05:38,479 --> 00:05:42,160
and so far so good we went to the moon

00:05:41,440 --> 00:05:45,840
with this

00:05:42,160 --> 00:05:45,840
uh so pretty good

00:05:46,080 --> 00:05:52,240
the problem is that then we go on

00:05:49,199 --> 00:05:55,600
and we try to create uh data

00:05:52,240 --> 00:05:57,840
that and functions that can change

00:05:55,600 --> 00:05:59,280
modify the data so in this case this is

00:05:57,840 --> 00:06:01,680
the example i will

00:05:59,280 --> 00:06:03,120
you know uh give for the whole workshop

00:06:01,680 --> 00:06:05,440
we i created a

00:06:03,120 --> 00:06:07,520
lift it's it's like you know a model for

00:06:05,440 --> 00:06:10,639
a lift in a hotel or something

00:06:07,520 --> 00:06:14,880
we have the floor and we have

00:06:10,639 --> 00:06:15,600
the um status of the the lift you know

00:06:14,880 --> 00:06:18,400
if the

00:06:15,600 --> 00:06:18,880
doors are open or closed that's it so i

00:06:18,400 --> 00:06:23,280
define

00:06:18,880 --> 00:06:26,319
two of these uh type of data

00:06:23,280 --> 00:06:29,759
then i define a function that prints the

00:06:26,319 --> 00:06:33,280
inter you know these values which uh

00:06:29,759 --> 00:06:34,479
let me execute them this works okay lift

00:06:33,280 --> 00:06:36,720
is a floor one

00:06:34,479 --> 00:06:37,759
those are closed and then i define a

00:06:36,720 --> 00:06:41,039
function that

00:06:37,759 --> 00:06:44,639
is a bit different this changes

00:06:41,039 --> 00:06:44,639
the value inside the lift

00:06:45,199 --> 00:06:50,800
and it works okay now the lift is

00:06:48,479 --> 00:06:52,319
is at floor one and they are and the

00:06:50,800 --> 00:06:55,680
doors are open

00:06:52,319 --> 00:06:57,680
what's the problem here that's when

00:06:55,680 --> 00:06:59,919
i define something don't look at the

00:06:57,680 --> 00:07:02,479
duck here when i define something

00:06:59,919 --> 00:07:03,520
different like a security lift let's say

00:07:02,479 --> 00:07:05,599
i want to define

00:07:03,520 --> 00:07:06,720
a slightly different type of data right

00:07:05,599 --> 00:07:09,680
so i have

00:07:06,720 --> 00:07:11,360
one closed these are the flow and the

00:07:09,680 --> 00:07:14,800
status

00:07:11,360 --> 00:07:18,080
but then i define a lock unlocked value

00:07:14,800 --> 00:07:20,720
because i want this lift to be you know

00:07:18,080 --> 00:07:22,000
they it is lockable basically you know i

00:07:20,720 --> 00:07:24,880
can lock it and i can

00:07:22,000 --> 00:07:26,080
open it only if it's unlocked which is

00:07:24,880 --> 00:07:29,280
what happens here

00:07:26,080 --> 00:07:31,599
i define open security list

00:07:29,280 --> 00:07:32,639
if leave two is unlocked then lift one

00:07:31,599 --> 00:07:37,680
is open

00:07:32,639 --> 00:07:40,720
nothing complicated and it works

00:07:37,680 --> 00:07:44,960
yes it was what is the problem that i

00:07:40,720 --> 00:07:48,080
see as a programmer as a designer then

00:07:44,960 --> 00:07:48,879
here you have to keep in mind as a

00:07:48,080 --> 00:07:51,360
programmer

00:07:48,879 --> 00:07:52,720
you have to keep in your mind the

00:07:51,360 --> 00:07:56,160
connection between

00:07:52,720 --> 00:08:00,400
lift and open lift

00:07:56,160 --> 00:08:04,160
and security lift and open security lift

00:08:00,400 --> 00:08:05,840
and this is problematic because

00:08:04,160 --> 00:08:07,199
well you have to keep it in mind you

00:08:05,840 --> 00:08:11,599
have to remember it

00:08:07,199 --> 00:08:13,440
if you use open lift on a security lift

00:08:11,599 --> 00:08:15,039
things are not working maybe it works

00:08:13,440 --> 00:08:18,879
but it doesn't work

00:08:15,039 --> 00:08:22,560
well okay so what people

00:08:18,879 --> 00:08:25,120
thought in the late 70s in the 80s

00:08:22,560 --> 00:08:26,319
one of the things they thought was okay

00:08:25,120 --> 00:08:28,319
if i keep

00:08:26,319 --> 00:08:29,360
if i can keep it in mind if i can

00:08:28,319 --> 00:08:33,200
remember it

00:08:29,360 --> 00:08:35,519
why can't the computer do it so

00:08:33,200 --> 00:08:37,599
this is where object oriented starts and

00:08:35,519 --> 00:08:41,200
this is the first part of the workshop

00:08:37,599 --> 00:08:44,080
encapsulation can we keep data

00:08:41,200 --> 00:08:46,160
and functions together instead of

00:08:44,080 --> 00:08:47,839
dividing them we keep them together in

00:08:46,160 --> 00:08:50,080
something

00:08:47,839 --> 00:08:53,200
so that we don't have to keep in mind

00:08:50,080 --> 00:08:53,200
the connection between them

00:08:53,279 --> 00:09:00,640
let's check no questions okay so

00:08:56,880 --> 00:09:04,320
um let's go on uh very quickly

00:09:00,640 --> 00:09:05,360
i said type a lot of times here so i

00:09:04,320 --> 00:09:07,680
said i create

00:09:05,360 --> 00:09:08,480
a type lift i create a type security

00:09:07,680 --> 00:09:11,200
lift

00:09:08,480 --> 00:09:11,760
what is type okay let's look at this uh

00:09:11,200 --> 00:09:15,120
i believe

00:09:11,760 --> 00:09:18,640
everybody agrees this is a duck right

00:09:15,120 --> 00:09:21,120
why do i say this is a duck because it

00:09:18,640 --> 00:09:22,240
looks like a duck right and if this was

00:09:21,120 --> 00:09:25,120
a movie or

00:09:22,240 --> 00:09:26,399
like an animated gif you would see it

00:09:25,120 --> 00:09:29,519
moving

00:09:26,399 --> 00:09:32,880
around like a duck

00:09:29,519 --> 00:09:35,600
and that's fine so i say the type

00:09:32,880 --> 00:09:36,399
of this animal is duck why because it

00:09:35,600 --> 00:09:40,080
behaves

00:09:36,399 --> 00:09:42,720
like a duck okay it behaves in terms of

00:09:40,080 --> 00:09:43,680
how it moves or it behaves in terms of

00:09:42,720 --> 00:09:46,880
how it looks

00:09:43,680 --> 00:09:49,200
like but then i catch the duck

00:09:46,880 --> 00:09:50,080
because i want to prepare a meal sorry

00:09:49,200 --> 00:09:53,200
vegetarians

00:09:50,080 --> 00:09:54,959
and what i discover is that how the

00:09:53,200 --> 00:09:58,320
naked truth is that this is

00:09:54,959 --> 00:10:00,560
instead a very sophisticated well

00:09:58,320 --> 00:10:01,519
robot right so this is not a duck this

00:10:00,560 --> 00:10:05,120
is a robot

00:10:01,519 --> 00:10:09,120
so suddenly i say oh the type of this

00:10:05,120 --> 00:10:12,000
thing is not dark but it's wrong

00:10:09,120 --> 00:10:13,360
what is the difference why did the type

00:10:12,000 --> 00:10:16,000
change

00:10:13,360 --> 00:10:18,000
because now i'm looking at the

00:10:16,000 --> 00:10:21,440
structural meaning how

00:10:18,000 --> 00:10:24,000
it is internally okay so let's keep this

00:10:21,440 --> 00:10:26,720
in mind that's that's enough for now

00:10:24,000 --> 00:10:29,120
um there are two definitions of type the

00:10:26,720 --> 00:10:33,600
structural meaning how something is made

00:10:29,120 --> 00:10:33,600
internally and um

00:10:35,839 --> 00:10:39,440
how something behaves

00:10:39,519 --> 00:10:42,880
and in is that the behavioral meaning is

00:10:42,320 --> 00:10:46,000
important

00:10:42,880 --> 00:10:50,720
we it's not that we don't care

00:10:46,000 --> 00:10:53,760
but we value much more how things behave

00:10:50,720 --> 00:10:56,399
much more than how they are so when we

00:10:53,760 --> 00:10:59,680
say in python this is a list

00:10:56,399 --> 00:11:01,040
we usually mean this behaves like a list

00:10:59,680 --> 00:11:03,519
we are not saying

00:11:01,040 --> 00:11:05,120
this internally is a list this might be

00:11:03,519 --> 00:11:07,040
something different we will have

00:11:05,120 --> 00:11:08,480
examples later but keep this in mind for

00:11:07,040 --> 00:11:08,959
the whole workshop the behavioral

00:11:08,480 --> 00:11:11,120
meaning

00:11:08,959 --> 00:11:12,800
is important okay that's enough i

00:11:11,120 --> 00:11:16,000
believe uh whenever you

00:11:12,800 --> 00:11:16,959
hear that typing in python or in other

00:11:16,000 --> 00:11:19,440
object-oriented

00:11:16,959 --> 00:11:21,200
programming languages this is something

00:11:19,440 --> 00:11:24,240
that alex martelly

00:11:21,200 --> 00:11:26,320
came up with in 2000 it means you know

00:11:24,240 --> 00:11:28,800
that you take something like the robot

00:11:26,320 --> 00:11:33,279
and you make it behave like a duck

00:11:28,800 --> 00:11:36,720
as you see the problem is the behavior

00:11:33,279 --> 00:11:39,680
more on this later hopefully uh

00:11:36,720 --> 00:11:40,079
okay just since uh commas are important

00:11:39,680 --> 00:11:44,480
in

00:11:40,079 --> 00:11:47,680
python in english uh this is a duck

00:11:44,480 --> 00:11:49,279
typing okay so this is not what we are

00:11:47,680 --> 00:11:50,240
talking about it's just a joke sorry

00:11:49,279 --> 00:11:53,519
just to you know

00:11:50,240 --> 00:11:56,959
give you a fun time before we dig into

00:11:53,519 --> 00:12:00,399
the um workshop

00:11:56,959 --> 00:12:03,279
okay so let me head to this was about

00:12:00,399 --> 00:12:04,480
object 20 let me head to the first part

00:12:03,279 --> 00:12:07,519
of the

00:12:04,480 --> 00:12:10,639
workshop itself i

00:12:07,519 --> 00:12:14,320
have 45 minutes okay so the good news

00:12:10,639 --> 00:12:17,360
about objects objects are what we

00:12:14,320 --> 00:12:21,600
invent what we come up with

00:12:17,360 --> 00:12:24,959
to keep data and functions together

00:12:21,600 --> 00:12:27,200
that's it okay this is what allows us to

00:12:24,959 --> 00:12:28,160
keep this connection and you already

00:12:27,200 --> 00:12:30,320
used objects

00:12:28,160 --> 00:12:32,079
whatever you did in python if you just

00:12:30,320 --> 00:12:35,920
fired up your shell and you

00:12:32,079 --> 00:12:38,959
typed you know a equal uh sorry let me

00:12:35,920 --> 00:12:39,839
run all these sets if you type a equals

00:12:38,959 --> 00:12:43,360
six

00:12:39,839 --> 00:12:46,639
then a is an object it has a type

00:12:43,360 --> 00:12:49,760
remember behavioral meaning type of a is

00:12:46,639 --> 00:12:51,040
int it behaves like an integer it is an

00:12:49,760 --> 00:12:54,079
integer

00:12:51,040 --> 00:12:57,680
and you can also use

00:12:54,079 --> 00:12:58,720
the type as a function to create

00:12:57,680 --> 00:13:01,760
something

00:12:58,720 --> 00:13:03,120
of that type okay i hope this makes

00:13:01,760 --> 00:13:05,360
sense

00:13:03,120 --> 00:13:06,800
one other thing that you already know

00:13:05,360 --> 00:13:09,760
probably about objects

00:13:06,800 --> 00:13:10,240
is that they have functions and we call

00:13:09,760 --> 00:13:12,800
them

00:13:10,240 --> 00:13:13,760
methods a method or function is this

00:13:12,800 --> 00:13:16,800
very same thing it's just

00:13:13,760 --> 00:13:18,959
a method is a function that behave sorry

00:13:16,800 --> 00:13:21,760
that belongs to an object okay but it's

00:13:18,959 --> 00:13:23,920
really function

00:13:21,760 --> 00:13:25,440
as you can see here there is a

00:13:23,920 --> 00:13:27,600
connection between the

00:13:25,440 --> 00:13:29,279
data and the function because you are

00:13:27,600 --> 00:13:32,480
not running up

00:13:29,279 --> 00:13:36,880
on welcome but you are running up off

00:13:32,480 --> 00:13:40,079
welcome that's subtle but it's different

00:13:36,880 --> 00:13:42,079
since i don't have that much time i'm

00:13:40,079 --> 00:13:45,839
gonna

00:13:42,079 --> 00:13:47,440
skip the first exercises sorry

00:13:45,839 --> 00:13:49,360
they are very simple and giving you the

00:13:47,440 --> 00:13:50,079
solutions directly they are really

00:13:49,360 --> 00:13:52,480
simple

00:13:50,079 --> 00:13:54,240
then next exercise is um more

00:13:52,480 --> 00:13:57,839
interesting

00:13:54,240 --> 00:14:00,800
um these exercises are like this

00:13:57,839 --> 00:14:02,000
find some types that python provides out

00:14:00,800 --> 00:14:04,240
of the box

00:14:02,000 --> 00:14:06,320
the hint is use the function type on

00:14:04,240 --> 00:14:09,360
some values so

00:14:06,320 --> 00:14:10,079
what i do is sorry i'm jumping around if

00:14:09,360 --> 00:14:14,399
i do

00:14:10,079 --> 00:14:18,079
is what i do or what i did

00:14:14,399 --> 00:14:21,839
was to run type the function type

00:14:18,079 --> 00:14:24,240
on values like four for five uh a string

00:14:21,839 --> 00:14:25,680
string with uh double quotes these are

00:14:24,240 --> 00:14:28,560
all things that you

00:14:25,680 --> 00:14:29,760
might be already familiar with in python

00:14:28,560 --> 00:14:32,240
you see these are

00:14:29,760 --> 00:14:34,320
built-in types that python provides and

00:14:32,240 --> 00:14:39,279
this is interesting you know we can

00:14:34,320 --> 00:14:41,600
know what types are important

00:14:39,279 --> 00:14:43,440
the exercise number two was can you

00:14:41,600 --> 00:14:44,000
create a float variable without using

00:14:43,440 --> 00:14:49,440
the dot

00:14:44,000 --> 00:14:52,480
character so you can't write a equal 5.4

00:14:49,440 --> 00:14:53,920
and we

00:14:52,480 --> 00:14:56,160
which works but you are not allowed to

00:14:53,920 --> 00:14:59,600
do it and the solution

00:14:56,160 --> 00:15:02,240
is to use float as a

00:14:59,600 --> 00:15:04,959
function so remember that this is

00:15:02,240 --> 00:15:07,040
important you can use the type

00:15:04,959 --> 00:15:10,399
uh as a function you can use it to

00:15:07,040 --> 00:15:12,160
initialize something of that time

00:15:10,399 --> 00:15:14,079
as you can see here i'm using an integer

00:15:12,160 --> 00:15:16,160
and getting a float and the third

00:15:14,079 --> 00:15:17,839
exercise very simple is what is the

00:15:16,160 --> 00:15:19,440
difference between these and i'm gonna

00:15:17,839 --> 00:15:21,440
i'm not gonna read it it's complicated

00:15:19,440 --> 00:15:23,440
and this other thing

00:15:21,440 --> 00:15:25,760
how can you tell it again you can use

00:15:23,440 --> 00:15:29,600
type and say this is a set

00:15:25,760 --> 00:15:31,839
and this is a dictionary okay that's it

00:15:29,600 --> 00:15:33,680
very very simple don't worry it will be

00:15:31,839 --> 00:15:37,680
complicated later

00:15:33,680 --> 00:15:42,959
um so that yes

00:15:37,680 --> 00:15:42,959
let me move on on classes and instances

00:15:46,240 --> 00:15:49,839
okay classes

00:15:50,240 --> 00:15:55,279
what are classes this what are classes

00:15:53,279 --> 00:15:58,000
and instances so we understood what

00:15:55,279 --> 00:15:58,880
an object is let me see if there are

00:15:58,000 --> 00:16:02,240
questions no

00:15:58,880 --> 00:16:02,240
okay um

00:16:03,600 --> 00:16:08,079
actually i yes i'm looking at the right

00:16:06,160 --> 00:16:11,839
thing um

00:16:08,079 --> 00:16:15,360
so what are what are

00:16:11,839 --> 00:16:15,360
classes and instances

00:16:16,160 --> 00:16:22,720
let's say this if i say there is uh

00:16:19,600 --> 00:16:25,199
there is a house with a door if i

00:16:22,720 --> 00:16:26,160
say this you immediately understand what

00:16:25,199 --> 00:16:28,079
i'm saying

00:16:26,160 --> 00:16:29,920
leave it aside my accent but you

00:16:28,079 --> 00:16:31,839
understand what a house is

00:16:29,920 --> 00:16:33,759
and you understand the door right you

00:16:31,839 --> 00:16:36,240
picture it in your mind

00:16:33,759 --> 00:16:38,399
but i just mentioned a generic house and

00:16:36,240 --> 00:16:40,240
a generic door so

00:16:38,399 --> 00:16:41,920
each one of us pictures something

00:16:40,240 --> 00:16:44,399
different in the mind

00:16:41,920 --> 00:16:45,199
well if i show you the door that is in

00:16:44,399 --> 00:16:47,839
my room

00:16:45,199 --> 00:16:48,399
but that is a concrete though it's it's

00:16:47,839 --> 00:16:50,800
real

00:16:48,399 --> 00:16:51,759
it has a specific color has a specific

00:16:50,800 --> 00:16:54,720
handle

00:16:51,759 --> 00:16:55,040
you can't just think it's red it's not

00:16:54,720 --> 00:16:57,839
red

00:16:55,040 --> 00:16:58,399
it's white okay this is the difference

00:16:57,839 --> 00:17:00,560
between

00:16:58,399 --> 00:17:02,079
i hope it's clear between classes and

00:17:00,560 --> 00:17:06,240
instances so classes

00:17:02,079 --> 00:17:08,240
are ideas right so when i say house

00:17:06,240 --> 00:17:09,679
house it's an idea you know what is a

00:17:08,240 --> 00:17:12,319
house it's a building

00:17:09,679 --> 00:17:14,000
it has probably windows doors you know a

00:17:12,319 --> 00:17:16,839
lot of space a kitchen maybe

00:17:14,000 --> 00:17:18,480
this is the idea but then we have a

00:17:16,839 --> 00:17:22,000
concrete

00:17:18,480 --> 00:17:23,839
instance of the idea the instance

00:17:22,000 --> 00:17:25,439
is something that we can touch and it's

00:17:23,839 --> 00:17:29,120
different from another

00:17:25,439 --> 00:17:30,720
okay i hope this is clear enough

00:17:29,120 --> 00:17:32,480
the first class that we have you

00:17:30,720 --> 00:17:34,000
probably you probably already wrote

00:17:32,480 --> 00:17:36,320
classes in python but let me

00:17:34,000 --> 00:17:37,840
indulge me in this i'm going a bit

00:17:36,320 --> 00:17:41,360
slower

00:17:37,840 --> 00:17:44,320
slowly um the class is

00:17:41,360 --> 00:17:45,440
a collection of data and functions

00:17:44,320 --> 00:17:48,000
everything that is

00:17:45,440 --> 00:17:49,360
under the definition class is part of

00:17:48,000 --> 00:17:51,919
the class

00:17:49,360 --> 00:17:52,720
these are functions we call them methods

00:17:51,919 --> 00:17:54,480
as i said

00:17:52,720 --> 00:17:56,160
they are exactly the same things the

00:17:54,480 --> 00:17:58,559
only difference is they

00:17:56,160 --> 00:18:01,360
accept self i'm gonna tell you in a

00:17:58,559 --> 00:18:04,720
second what this is

00:18:01,360 --> 00:18:07,679
and i can if i run this thing

00:18:04,720 --> 00:18:08,240
i can use this name lift the name of the

00:18:07,679 --> 00:18:11,440
class

00:18:08,240 --> 00:18:14,400
as a type you remember i used

00:18:11,440 --> 00:18:14,880
float to create a float value and i can

00:18:14,400 --> 00:18:17,840
use

00:18:14,880 --> 00:18:17,840
lift to

00:18:18,799 --> 00:18:22,240
instantiate this is a complicated word

00:18:21,200 --> 00:18:25,520
instantiated means

00:18:22,240 --> 00:18:28,320
to create an instance of this class

00:18:25,520 --> 00:18:29,840
now i have lift1 is an instance lift is

00:18:28,320 --> 00:18:32,880
the plus

00:18:29,840 --> 00:18:34,720
as you can see here it pads values

00:18:32,880 --> 00:18:36,799
and the values this is something that

00:18:34,720 --> 00:18:40,559
happens internally

00:18:36,799 --> 00:18:44,160
in python it's implicit

00:18:40,559 --> 00:18:47,039
this calls the method init

00:18:44,160 --> 00:18:48,880
passing these two values as these two

00:18:47,039 --> 00:18:52,080
arguments

00:18:48,880 --> 00:18:54,320
and doing something here what

00:18:52,080 --> 00:18:55,600
might not be clear is what happens with

00:18:54,320 --> 00:18:58,640
self

00:18:55,600 --> 00:19:01,520
what is self here self is the

00:18:58,640 --> 00:19:02,320
instance that we are creating so the

00:19:01,520 --> 00:19:04,720
class

00:19:02,320 --> 00:19:05,440
has access to the instance that you are

00:19:04,720 --> 00:19:09,200
creating

00:19:05,440 --> 00:19:12,080
as you can see here lift is creating

00:19:09,200 --> 00:19:12,720
self so this instance here and is

00:19:12,080 --> 00:19:16,080
passing

00:19:12,720 --> 00:19:19,360
one enclosed putting them

00:19:16,080 --> 00:19:22,640
into the instance

00:19:19,360 --> 00:19:26,240
okay so now lift one which is self

00:19:22,640 --> 00:19:29,440
has a floor which is one one

00:19:26,240 --> 00:19:32,160
and has a status which is closed

00:19:29,440 --> 00:19:33,600
okay this close goes here goes into cell

00:19:32,160 --> 00:19:36,880
status which is this one

00:19:33,600 --> 00:19:40,640
i hope this is clear and when you run

00:19:36,880 --> 00:19:42,720
lift one open which is this

00:19:40,640 --> 00:19:44,320
as you can see you run it on the

00:19:42,720 --> 00:19:47,120
instance

00:19:44,320 --> 00:19:48,880
but the method is defined in the class

00:19:47,120 --> 00:19:51,200
this is important we are gonna we're

00:19:48,880 --> 00:19:54,480
gonna investigate this a bit later

00:19:51,200 --> 00:19:57,840
what happens is that open changes

00:19:54,480 --> 00:20:00,240
something in self again self is the

00:19:57,840 --> 00:20:03,840
instance that you are

00:20:00,240 --> 00:20:06,240
dealing with and open works okay so

00:20:03,840 --> 00:20:08,320
if i if i do it the status changes to

00:20:06,240 --> 00:20:12,080
open from close to open so

00:20:08,320 --> 00:20:15,280
to recap quickly classes ideas

00:20:12,080 --> 00:20:18,320
collection of a behavior okay so this

00:20:15,280 --> 00:20:20,080
the classes say the door is something

00:20:18,320 --> 00:20:22,559
that rotates on hinges

00:20:20,080 --> 00:20:23,440
it has a handle in this case the lift

00:20:22,559 --> 00:20:25,360
has a flow

00:20:23,440 --> 00:20:26,799
has a status you know but these are

00:20:25,360 --> 00:20:27,360
generic things and then you have an

00:20:26,799 --> 00:20:29,919
instance

00:20:27,360 --> 00:20:30,480
which has the proper values one and

00:20:29,919 --> 00:20:32,480
closed

00:20:30,480 --> 00:20:34,799
and when you run the method these values

00:20:32,480 --> 00:20:37,840
change okay

00:20:34,799 --> 00:20:41,120
cool um really i hope this

00:20:37,840 --> 00:20:44,559
is uh clear let me

00:20:41,120 --> 00:20:44,559
give you some exercises

00:20:45,440 --> 00:20:51,440
here we are so

00:20:49,120 --> 00:20:52,960
here we go okay so i'm gonna read the

00:20:51,440 --> 00:20:56,000
exercises now i'm gonna

00:20:52,960 --> 00:20:57,440
give you some time uh to run the

00:20:56,000 --> 00:20:59,520
exercise to solve them

00:20:57,440 --> 00:21:01,760
on your own and then i give you the

00:20:59,520 --> 00:21:02,240
solution in the meanwhile i will try to

00:21:01,760 --> 00:21:06,240
uh

00:21:02,240 --> 00:21:08,880
see if there are if there are questions

00:21:06,240 --> 00:21:09,679
um let's let's go and then yeah get in

00:21:08,880 --> 00:21:12,799
touch with me if

00:21:09,679 --> 00:21:13,919
something is not clear um exercises

00:21:12,799 --> 00:21:17,120
exercise one

00:21:13,919 --> 00:21:17,919
is using the lift class as an example so

00:21:17,120 --> 00:21:21,520
this is thing

00:21:17,919 --> 00:21:23,280
you can just copy it create a security

00:21:21,520 --> 00:21:25,919
lift class

00:21:23,280 --> 00:21:26,720
that has the flow status and locked

00:21:25,919 --> 00:21:28,559
attributes

00:21:26,720 --> 00:21:30,240
don't use if you know how to use

00:21:28,559 --> 00:21:32,400
inheritance don't do it

00:21:30,240 --> 00:21:33,360
don't do it forbidden okay inheritance

00:21:32,400 --> 00:21:35,679
doesn't exist

00:21:33,360 --> 00:21:36,880
because we haven't studied it yet so

00:21:35,679 --> 00:21:39,120
don't do it

00:21:36,880 --> 00:21:40,080
just just create something say class

00:21:39,120 --> 00:21:42,000
security lift

00:21:40,080 --> 00:21:44,400
colon and then go on okay copy this

00:21:42,000 --> 00:21:47,760
thing change it a bit so you

00:21:44,400 --> 00:21:49,440
need these three attributes as i said

00:21:47,760 --> 00:21:52,880
you're forbidden to use inheritance

00:21:49,440 --> 00:21:56,320
exercise two create a closed lift class

00:21:52,880 --> 00:21:58,960
so another class that has a default

00:21:56,320 --> 00:22:00,880
status of closed

00:21:58,960 --> 00:22:03,200
and the third one create a toggle lift

00:22:00,880 --> 00:22:05,120
class that has a method toggle

00:22:03,200 --> 00:22:07,440
which toggles you know between open and

00:22:05,120 --> 00:22:10,720
closed if you haven't used

00:22:07,440 --> 00:22:14,240
uh python notebook jupiter notebook

00:22:10,720 --> 00:22:16,320
so if you press alt enter

00:22:14,240 --> 00:22:17,360
you can create a new cell and then you

00:22:16,320 --> 00:22:20,240
can type

00:22:17,360 --> 00:22:21,600
python here okay so you can do class

00:22:20,240 --> 00:22:24,960
security

00:22:21,600 --> 00:22:28,080
lift secure i can't type security lift

00:22:24,960 --> 00:22:31,360
and so on okay security

00:22:28,080 --> 00:22:33,760
um yeah you have some time let's say

00:22:31,360 --> 00:22:41,840
five minutes to do this and then coming

00:22:33,760 --> 00:22:41,840
back with the solutions

00:22:52,840 --> 00:22:55,840
so

00:23:48,840 --> 00:23:51,840
so

00:24:44,840 --> 00:24:47,840
uh

00:25:26,159 --> 00:25:31,039
leonardo you have some questions on the

00:25:28,320 --> 00:25:31,039
stage chat

00:25:31,360 --> 00:25:38,799
you just take a look at that uh

00:25:34,559 --> 00:25:42,640
there is a question here where is it

00:25:38,799 --> 00:25:45,360
oh chat

00:25:42,640 --> 00:25:45,360
sorry i

00:25:46,320 --> 00:26:00,880
this can't see it

00:25:57,679 --> 00:26:11,840
stage i'm i'm sorry guys i'm

00:26:00,880 --> 00:26:11,840
really stupid

00:26:14,880 --> 00:26:19,440
so is this the question you you're

00:26:16,960 --> 00:26:22,480
asking um

00:26:19,440 --> 00:26:25,279
sorry uh so yeah you you you don't have

00:26:22,480 --> 00:26:27,039
to use jupyter notebooks no no no

00:26:25,279 --> 00:26:28,720
that's that's fine if you want to do it

00:26:27,039 --> 00:26:32,000
on the python shallow you

00:26:28,720 --> 00:26:35,360
editor it's just you know

00:26:32,000 --> 00:26:36,000
python notebooks are i don't know they

00:26:35,360 --> 00:26:38,000
are they're

00:26:36,000 --> 00:26:39,840
good to do these things because you can

00:26:38,000 --> 00:26:41,200
write text you can write your python but

00:26:39,840 --> 00:26:45,039
yeah definitely this is

00:26:41,200 --> 00:26:53,840
pure python okay so python 3

00:26:45,039 --> 00:26:53,840
but that's it python31 it's perfect

00:26:56,559 --> 00:27:00,240
i hope i answered the question

00:27:01,200 --> 00:27:07,520
i'm sorry for looking at the wrong chat

00:27:04,640 --> 00:27:09,679
apparently i'm not smart enough to use

00:27:07,520 --> 00:27:13,200
the online tools

00:27:09,679 --> 00:27:20,320
okay let me go

00:27:13,200 --> 00:27:23,760
on with the solutions

00:27:20,320 --> 00:27:26,159
here we go so okay as for the first one

00:27:23,760 --> 00:27:27,200
using the lift class as an example

00:27:26,159 --> 00:27:29,760
create a new

00:27:27,200 --> 00:27:31,679
uh class security leaf that has

00:27:29,760 --> 00:27:35,840
different attributes so floor status

00:27:31,679 --> 00:27:35,840
same thing and then locked

00:27:36,559 --> 00:27:40,240
okay as i am forbidden to use

00:27:38,880 --> 00:27:42,000
inheritance i just

00:27:40,240 --> 00:27:43,600
rewrite the whole thing so class

00:27:42,000 --> 00:27:46,799
security leave i define

00:27:43,600 --> 00:27:50,240
init method and the init method

00:27:46,799 --> 00:27:52,960
has to receive self okay so you have to

00:27:50,240 --> 00:27:53,600
pass it otherwise nothing works and then

00:27:52,960 --> 00:27:56,159
i

00:27:53,600 --> 00:27:56,799
created these three attributes f for

00:27:56,159 --> 00:27:59,919
floor

00:27:56,799 --> 00:28:03,120
s for status and l for locked and

00:27:59,919 --> 00:28:04,080
i put them into my instance okay so

00:28:03,120 --> 00:28:06,080
suddenly

00:28:04,080 --> 00:28:07,120
my instance doesn't have only floor and

00:28:06,080 --> 00:28:10,799
status but also

00:28:07,120 --> 00:28:12,720
locked um

00:28:10,799 --> 00:28:14,080
open and closed are the same the this

00:28:12,720 --> 00:28:16,480
doesn't say anything okay

00:28:14,080 --> 00:28:17,840
so let's see if this works i can

00:28:16,480 --> 00:28:21,919
instantiate

00:28:17,840 --> 00:28:25,600
this as a lift no i can't why

00:28:21,919 --> 00:28:28,720
because i added an attribute here

00:28:25,600 --> 00:28:31,600
so here i'm passing one and closed and

00:28:28,720 --> 00:28:32,480
these wants another attribute so this

00:28:31,600 --> 00:28:35,760
doesn't work

00:28:32,480 --> 00:28:39,440
it's correct this works now

00:28:35,760 --> 00:28:42,960
l is a security lift okay so if i say

00:28:39,440 --> 00:28:44,880
type of l

00:28:42,960 --> 00:28:46,159
yeah main security lift okay leave it

00:28:44,880 --> 00:28:48,720
aside the main that's

00:28:46,159 --> 00:28:50,880
that's not important security is the the

00:28:48,720 --> 00:28:53,200
important part

00:28:50,880 --> 00:28:55,279
uh as you can see this the important

00:28:53,200 --> 00:28:58,480
part of the exercise is

00:28:55,279 --> 00:29:00,960
the type the class behaves as a method

00:28:58,480 --> 00:29:03,120
in itself and it says you know in

00:29:00,960 --> 00:29:06,880
internal using in it

00:29:03,120 --> 00:29:07,520
the second exercise is create a closed

00:29:06,880 --> 00:29:09,600
lift

00:29:07,520 --> 00:29:10,720
class that has the default status of

00:29:09,600 --> 00:29:14,320
clause so

00:29:10,720 --> 00:29:16,720
i said methods are functions so

00:29:14,320 --> 00:29:17,600
as they are functions you can use

00:29:16,720 --> 00:29:20,640
default

00:29:17,600 --> 00:29:22,960
values so it's just a matter of you know

00:29:20,640 --> 00:29:26,240
creating another class with the init

00:29:22,960 --> 00:29:29,279
and then saying f is just the floor

00:29:26,240 --> 00:29:30,960
the standard thing but then s has a

00:29:29,279 --> 00:29:34,720
default value

00:29:30,960 --> 00:29:37,200
how does it work well when i instantiate

00:29:34,720 --> 00:29:38,159
closed lift as a lift normal thing

00:29:37,200 --> 00:29:40,559
passing

00:29:38,159 --> 00:29:42,000
flow and status but everything works

00:29:40,559 --> 00:29:45,520
okay so this is

00:29:42,000 --> 00:29:48,640
the status perfect we are okay with this

00:29:45,520 --> 00:29:50,000
but and you know if i pass something

00:29:48,640 --> 00:29:54,240
different like open

00:29:50,000 --> 00:29:57,760
that words but now the what if

00:29:54,240 --> 00:30:00,240
i just passed the floor

00:29:57,760 --> 00:30:01,200
this works as well why because

00:30:00,240 --> 00:30:04,559
internally

00:30:01,200 --> 00:30:05,360
this uses init and init wants just self

00:30:04,559 --> 00:30:08,880
which is passed

00:30:05,360 --> 00:30:12,399
automatically remember f which is

00:30:08,880 --> 00:30:14,320
given here and then since s is not given

00:30:12,399 --> 00:30:16,799
well it receives the default value

00:30:14,320 --> 00:30:18,000
okay so remember objects are a bit

00:30:16,799 --> 00:30:21,360
complicated

00:30:18,000 --> 00:30:23,520
but eventually so

00:30:21,360 --> 00:30:24,880
they are just a collection of methods

00:30:23,520 --> 00:30:28,000
and the methods are functions

00:30:24,880 --> 00:30:29,600
same thing okay uh

00:30:28,000 --> 00:30:31,279
exercise number three and then i'm gonna

00:30:29,600 --> 00:30:33,520
look at the uh questions

00:30:31,279 --> 00:30:35,520
hopefully the right chat this time

00:30:33,520 --> 00:30:37,919
create a toggle lift that has a metal

00:30:35,520 --> 00:30:39,039
toggle that toggles between open and

00:30:37,919 --> 00:30:41,919
close again

00:30:39,039 --> 00:30:42,720
very simple i create a new method here

00:30:41,919 --> 00:30:45,760
and i just

00:30:42,720 --> 00:30:48,799
use the values that i have inside my

00:30:45,760 --> 00:30:50,640
instance so let's see if it works i can

00:30:48,799 --> 00:30:53,679
instantiate it

00:30:50,640 --> 00:30:54,399
giving two values here i can read the

00:30:53,679 --> 00:30:56,320
status

00:30:54,399 --> 00:30:57,679
i can toggle the status and then the

00:30:56,320 --> 00:31:00,399
status is

00:30:57,679 --> 00:31:01,279
different okay just just to see that you

00:31:00,399 --> 00:31:04,559
can add

00:31:01,279 --> 00:31:07,679
methods to your classes

00:31:04,559 --> 00:31:08,480
that's it for these exercises uh let me

00:31:07,679 --> 00:31:12,799
close this

00:31:08,480 --> 00:31:12,799
and let's wait and see

00:31:16,880 --> 00:31:22,000
yeah keyword arguments uh okay about

00:31:20,080 --> 00:31:23,440
keyword keyword arguments in argument i

00:31:22,000 --> 00:31:25,600
know i'm not gonna touch those things

00:31:23,440 --> 00:31:29,519
but yeah

00:31:25,600 --> 00:31:31,519
methods are functions so you can use

00:31:29,519 --> 00:31:33,440
star arcs and star style keyboards

00:31:31,519 --> 00:31:35,279
that's that's perfectly allowed you can

00:31:33,440 --> 00:31:38,320
see these in many libraries

00:31:35,279 --> 00:31:39,519
uh again that that is just a way for the

00:31:38,320 --> 00:31:42,799
function to

00:31:39,519 --> 00:31:45,919
uh collect the arguments and pass them

00:31:42,799 --> 00:31:47,360
right so this works with methods as well

00:31:45,919 --> 00:31:51,440
cool

00:31:47,360 --> 00:31:55,760
so let's go on i'm on time 420

00:31:51,440 --> 00:31:58,640
um instances

00:31:55,760 --> 00:31:59,200
okay so now we we we discussed you know

00:31:58,640 --> 00:32:01,679
classes

00:31:59,200 --> 00:32:02,240
ideas instances concrete objects we

00:32:01,679 --> 00:32:05,279
wrote

00:32:02,240 --> 00:32:07,279
a class then it's time to understand

00:32:05,279 --> 00:32:09,440
and this is very important it's time to

00:32:07,279 --> 00:32:11,519
understand the

00:32:09,440 --> 00:32:13,120
connection some of the quirks of

00:32:11,519 --> 00:32:15,120
instances and the connection between

00:32:13,120 --> 00:32:17,360
instances and classes this is

00:32:15,120 --> 00:32:18,399
this is paramount in python i saw so

00:32:17,360 --> 00:32:21,760
many people

00:32:18,399 --> 00:32:24,320
who are not beginners

00:32:21,760 --> 00:32:25,279
not grasping exactly what happens here

00:32:24,320 --> 00:32:28,399
and and to be honest

00:32:25,279 --> 00:32:29,120
this is if i if i can give you my my

00:32:28,399 --> 00:32:32,159
personal

00:32:29,120 --> 00:32:34,960
witnesses um i was

00:32:32,159 --> 00:32:35,679
i i i used python for many years before

00:32:34,960 --> 00:32:37,679
i started

00:32:35,679 --> 00:32:39,840
thinking you know really wha what's

00:32:37,679 --> 00:32:42,159
going on here so what are the

00:32:39,840 --> 00:32:43,840
internal mechanisms and and i started

00:32:42,159 --> 00:32:47,840
studying it so okay sorry

00:32:43,840 --> 00:32:50,880
i'm remembering instances first of all

00:32:47,840 --> 00:32:53,440
instances are writable and this is

00:32:50,880 --> 00:32:54,720
so important so let me run all these

00:32:53,440 --> 00:32:58,159
cells

00:32:54,720 --> 00:33:00,159
oh sorry this goes to the bottom uh

00:32:58,159 --> 00:33:02,399
here we are instances are writable okay

00:33:00,159 --> 00:33:04,720
so what i did here again

00:33:02,399 --> 00:33:06,880
you might be bored by this example sorry

00:33:04,720 --> 00:33:09,919
this is the example of my workshop

00:33:06,880 --> 00:33:10,320
class lift same thing throw status open

00:33:09,919 --> 00:33:13,679
close

00:33:10,320 --> 00:33:18,640
nothing new i instantiate it and then

00:33:13,679 --> 00:33:21,600
i can read the floor attribute it works

00:33:18,640 --> 00:33:21,600
i can also

00:33:21,760 --> 00:33:26,320
write it which is something you might

00:33:24,240 --> 00:33:30,080
have expected right i can say floor

00:33:26,320 --> 00:33:32,960
is 42 now suddenly and this changes

00:33:30,080 --> 00:33:34,480
perfect fine it works okay we are

00:33:32,960 --> 00:33:37,200
confident

00:33:34,480 --> 00:33:39,200
but pay attention you can create new

00:33:37,200 --> 00:33:42,559
attributes on the fly

00:33:39,200 --> 00:33:44,559
so if you say lift one color and

00:33:42,559 --> 00:33:45,760
remember color is not here there is

00:33:44,559 --> 00:33:48,159
nothing i

00:33:45,760 --> 00:33:50,880
if i say lift one color here it doesn't

00:33:48,159 --> 00:33:54,159
work but if i create it

00:33:50,880 --> 00:33:54,640
giving a value suddenly lift one has a

00:33:54,159 --> 00:33:58,000
color

00:33:54,640 --> 00:34:01,200
that's a very nice color lift right

00:33:58,000 --> 00:34:03,840
why is this important because

00:34:01,200 --> 00:34:05,120
in python how many times it happened to

00:34:03,840 --> 00:34:08,240
me

00:34:05,120 --> 00:34:11,200
that i mistyped an attribute

00:34:08,240 --> 00:34:11,760
i wanted to you know i was here i wanted

00:34:11,200 --> 00:34:15,040
to

00:34:11,760 --> 00:34:15,040
um sorry

00:34:16,560 --> 00:34:21,839
i'm destroying this thing let me start

00:34:19,359 --> 00:34:21,839
again

00:34:28,560 --> 00:34:35,760
okay here i was trying to say i don't

00:34:31,760 --> 00:34:39,359
know lift one floor is

00:34:35,760 --> 00:34:42,159
100 but i mistyped this i say

00:34:39,359 --> 00:34:43,839
flop with one o instead of two i just

00:34:42,159 --> 00:34:46,879
mistake it you know it happens

00:34:43,839 --> 00:34:48,960
all the time and your editor might

00:34:46,879 --> 00:34:50,240
detect it but you know you might you

00:34:48,960 --> 00:34:53,280
might not notice it

00:34:50,240 --> 00:34:55,280
if you do it this works

00:34:53,280 --> 00:34:56,560
but then when you go and you in your

00:34:55,280 --> 00:35:00,160
code you say

00:34:56,560 --> 00:35:03,599
floor well suddenly this is

00:35:00,160 --> 00:35:05,200
still one so this is why it's important

00:35:03,599 --> 00:35:07,280
remember that you can create

00:35:05,200 --> 00:35:09,200
attributes on the fly this is very

00:35:07,280 --> 00:35:10,000
powerful in python but it's a double

00:35:09,200 --> 00:35:13,040
edged sword

00:35:10,000 --> 00:35:15,200
it's also very dangerous in c plus plus

00:35:13,040 --> 00:35:18,000
or java for example you can't do it

00:35:15,200 --> 00:35:19,839
so when you say my class has a floor and

00:35:18,000 --> 00:35:21,359
a status that's it you can't create

00:35:19,839 --> 00:35:24,560
attitudes from the flag okay enough

00:35:21,359 --> 00:35:26,320
about this i hope it's clear

00:35:24,560 --> 00:35:27,920
python instances are not connected to

00:35:26,320 --> 00:35:28,960
each other this is simple to understand

00:35:27,920 --> 00:35:31,760
so if i create

00:35:28,960 --> 00:35:32,160
two instances with the same values you

00:35:31,760 --> 00:35:35,440
know

00:35:32,160 --> 00:35:37,599
both one and closed

00:35:35,440 --> 00:35:38,800
they are not connected what hap what

00:35:37,599 --> 00:35:41,359
what does it mean so

00:35:38,800 --> 00:35:42,720
if i check where things are in memory

00:35:41,359 --> 00:35:44,880
you know this is a computer

00:35:42,720 --> 00:35:47,119
so python is creating objects somewhere

00:35:44,880 --> 00:35:49,839
in memory and the address in memory

00:35:47,119 --> 00:35:50,960
not not that we have to know exactly

00:35:49,839 --> 00:35:52,880
where it is in memory but

00:35:50,960 --> 00:35:54,320
it's interesting to understand this

00:35:52,880 --> 00:35:57,520
these objects are somewhere

00:35:54,320 --> 00:35:59,839
if i use the id um

00:35:57,520 --> 00:36:00,800
built-in function i get this strange

00:35:59,839 --> 00:36:02,960
number that is

00:36:00,800 --> 00:36:05,200
somewhere in memory okay and as you can

00:36:02,960 --> 00:36:07,760
see lift one is somewhere in memory

00:36:05,200 --> 00:36:08,800
and v2 is somewhere else in memory this

00:36:07,760 --> 00:36:10,960
is comforting

00:36:08,800 --> 00:36:12,480
so even though they have the same values

00:36:10,960 --> 00:36:13,680
they are not the same thing okay they

00:36:12,480 --> 00:36:15,599
are not connected

00:36:13,680 --> 00:36:17,599
and if i change the attributes in the

00:36:15,599 --> 00:36:18,960
first one the attribute the same

00:36:17,599 --> 00:36:19,520
activity in the second one doesn't

00:36:18,960 --> 00:36:22,320
change

00:36:19,520 --> 00:36:23,119
this is okay well i mean just just to

00:36:22,320 --> 00:36:26,640
reiterate

00:36:23,119 --> 00:36:29,760
python behaves correctly

00:36:26,640 --> 00:36:31,359
and instances have introspection this is

00:36:29,760 --> 00:36:34,720
a very powerful thing

00:36:31,359 --> 00:36:35,839
in python if you run for example the

00:36:34,720 --> 00:36:38,400
deer

00:36:35,839 --> 00:36:39,359
built in function you can see there is a

00:36:38,400 --> 00:36:42,880
lot

00:36:39,359 --> 00:36:45,040
inside this object look at the look here

00:36:42,880 --> 00:36:47,359
so we have oh these are old friends of

00:36:45,040 --> 00:36:50,400
ours status open floor close

00:36:47,359 --> 00:36:51,200
we define them right they are part of

00:36:50,400 --> 00:36:54,720
the class

00:36:51,200 --> 00:36:56,240
here but as you can see there are so

00:36:54,720 --> 00:36:58,560
many other things

00:36:56,240 --> 00:36:59,760
overwhelming class that are addictive

00:36:58,560 --> 00:37:02,000
what are all these things

00:36:59,760 --> 00:37:04,160
we are going to discover it in a second

00:37:02,000 --> 00:37:07,839
some of them at least

00:37:04,160 --> 00:37:11,839
the important thing is that you can look

00:37:07,839 --> 00:37:14,480
into the object and see what you have

00:37:11,839 --> 00:37:16,400
and this is important because i asked

00:37:14,480 --> 00:37:18,480
myself at a certain point in my career

00:37:16,400 --> 00:37:19,200
how does python know the class of an

00:37:18,480 --> 00:37:22,720
object

00:37:19,200 --> 00:37:26,079
the class of an instance actually so

00:37:22,720 --> 00:37:29,520
it's very simple so if you read

00:37:26,079 --> 00:37:32,320
the thunderclass attribute okay sorry

00:37:29,520 --> 00:37:34,160
if you don't know this all these

00:37:32,320 --> 00:37:36,560
attributes all these methods

00:37:34,160 --> 00:37:37,920
begin with two underscores and end with

00:37:36,560 --> 00:37:40,160
two underscores

00:37:37,920 --> 00:37:40,960
so i might call this underscore

00:37:40,160 --> 00:37:44,079
underscore class

00:37:40,960 --> 00:37:46,160
underscore underscore but as it's pretty

00:37:44,079 --> 00:37:49,280
complicated to say it then they're both

00:37:46,160 --> 00:37:51,119
we call them thunder class okay then the

00:37:49,280 --> 00:37:51,760
methods dunder stands for double

00:37:51,119 --> 00:37:53,599
underscore

00:37:51,760 --> 00:37:54,720
so dunder class okay the underclass

00:37:53,599 --> 00:37:55,599
means underscore underscore class

00:37:54,720 --> 00:37:59,440
underscore

00:37:55,599 --> 00:38:04,160
so if you read lift one than the class

00:37:59,440 --> 00:38:07,520
oh here we are so main lift

00:38:04,160 --> 00:38:11,040
which means that python

00:38:07,520 --> 00:38:11,599
writes the class you use to instantiate

00:38:11,040 --> 00:38:14,880
this

00:38:11,599 --> 00:38:19,119
instance here directly into this the

00:38:14,880 --> 00:38:21,280
the instance is very simple

00:38:19,119 --> 00:38:23,119
i'm i don't know if unfortunately but

00:38:21,280 --> 00:38:24,640
this is this is a trick this is very

00:38:23,119 --> 00:38:27,440
important in python

00:38:24,640 --> 00:38:29,359
if you look at lift one class where it

00:38:27,440 --> 00:38:32,720
is in memory

00:38:29,359 --> 00:38:36,960
a lift 2 class where it is in memory

00:38:32,720 --> 00:38:41,280
well look at this these are the same

00:38:36,960 --> 00:38:41,280
this is so important because

00:38:41,599 --> 00:38:48,240
instances are separated but the class

00:38:45,200 --> 00:38:50,800
they come from is the same

00:38:48,240 --> 00:38:53,520
and instances are linked with the class

00:38:50,800 --> 00:38:53,520
at runtime

00:38:54,800 --> 00:38:59,520
keep it there for a second let's move

00:38:57,359 --> 00:39:02,000
into class attributes and we will see

00:38:59,520 --> 00:39:03,599
why this is important i have 50 minutes

00:39:02,000 --> 00:39:07,280
i hope i can

00:39:03,599 --> 00:39:11,680
make it classes can have attributes

00:39:07,280 --> 00:39:13,520
so if i define this max weight equal 120

00:39:11,680 --> 00:39:15,520
as you can see there is no self in front

00:39:13,520 --> 00:39:17,040
of it it's not self that much weight

00:39:15,520 --> 00:39:19,200
this is the class it's not

00:39:17,040 --> 00:39:20,720
just like saying uh i don't know our

00:39:19,200 --> 00:39:23,920
door has hinges

00:39:20,720 --> 00:39:25,200
okay or all the doors in my this is

00:39:23,920 --> 00:39:27,680
you know this is python this is a

00:39:25,200 --> 00:39:30,240
universe in itself we are like the

00:39:27,680 --> 00:39:31,040
gods small gods of this universe and we

00:39:30,240 --> 00:39:33,599
say

00:39:31,040 --> 00:39:35,200
all the lifts in this universe have a

00:39:33,599 --> 00:39:39,280
max weight 120

00:39:35,200 --> 00:39:42,400
no no changes okay so all the lifts

00:39:39,280 --> 00:39:45,839
have that so when i

00:39:42,400 --> 00:39:48,800
instantiate the uh this class

00:39:45,839 --> 00:39:49,200
twice in lift one and lift two look at

00:39:48,800 --> 00:39:52,000
this

00:39:49,200 --> 00:39:52,480
well the class has an attribute i can

00:39:52,000 --> 00:39:55,440
read it

00:39:52,480 --> 00:39:56,880
saying lift one dot much weight fair

00:39:55,440 --> 00:40:00,720
enough

00:39:56,880 --> 00:40:02,960
and lift one and leave two as instances

00:40:00,720 --> 00:40:05,040
have the same attribute well this is

00:40:02,960 --> 00:40:07,599
expected because somehow you know they

00:40:05,040 --> 00:40:09,680
are lifts

00:40:07,599 --> 00:40:10,960
and the important thing is that these

00:40:09,680 --> 00:40:14,160
attributes are not

00:40:10,960 --> 00:40:18,640
written into lift one but they are reds

00:40:14,160 --> 00:40:18,640
directly from lift let me show you this

00:40:18,800 --> 00:40:25,839
if i say lift one max weight

00:40:22,839 --> 00:40:25,839
sorry

00:40:26,960 --> 00:40:34,960
if i say lift one sorry lift as a class

00:40:31,040 --> 00:40:35,920
much weight equal 400. remember i'm god

00:40:34,960 --> 00:40:39,280
in this little

00:40:35,920 --> 00:40:42,640
universe you know small gods and

00:40:39,280 --> 00:40:45,440
lower case and i am i can say suddenly

00:40:42,640 --> 00:40:45,920
all the lifts in this universe they

00:40:45,440 --> 00:40:49,440
change

00:40:45,920 --> 00:40:51,760
they have a max weight of 400 click done

00:40:49,440 --> 00:40:54,240
yes done because suddenly lift 1 and

00:40:51,760 --> 00:40:57,680
lift 2 have a max weight of 400

00:40:54,240 --> 00:40:57,680
oh amazing that works

00:40:58,079 --> 00:41:02,400
what happens and this is the trick the

00:41:01,040 --> 00:41:05,520
tricky part

00:41:02,400 --> 00:41:08,480
if i change the max weight

00:41:05,520 --> 00:41:09,040
in lift one in an instance not in a

00:41:08,480 --> 00:41:10,960
class

00:41:09,040 --> 00:41:12,240
let's look at it lift one much weight

00:41:10,960 --> 00:41:15,280
00:41:12,240 --> 00:41:18,480
lift one max weight is 500 perfect

00:41:15,280 --> 00:41:20,960
that works but lift too much weight is

00:41:18,480 --> 00:41:25,599
still 400

00:41:20,960 --> 00:41:25,599
and this should be lift there's an error

00:41:26,319 --> 00:41:32,640
and the cost didn't change so

00:41:29,520 --> 00:41:33,599
what happens here that i can change the

00:41:32,640 --> 00:41:35,520
value in an

00:41:33,599 --> 00:41:37,280
instance and this doesn't affect the

00:41:35,520 --> 00:41:38,560
other instances of the class but if i

00:41:37,280 --> 00:41:41,680
change the value in the class

00:41:38,560 --> 00:41:43,839
the instances are affected that's

00:41:41,680 --> 00:41:44,960
i need to understand this what happens

00:41:43,839 --> 00:41:48,000
behind the scenes

00:41:44,960 --> 00:41:51,040
let's look at this let's look

00:41:48,000 --> 00:41:54,400
at what lift one has in

00:41:51,040 --> 00:41:56,000
itself i look at dunder addict which is

00:41:54,400 --> 00:41:59,040
a sort of a

00:41:56,000 --> 00:41:59,760
record of what's inside the object i

00:41:59,040 --> 00:42:02,960
have flow

00:41:59,760 --> 00:42:06,079
i have status and i have max weight

00:42:02,960 --> 00:42:09,440
look at lift let me

00:42:06,079 --> 00:42:10,880
let me have a look at lift two thunder

00:42:09,440 --> 00:42:14,319
dict

00:42:10,880 --> 00:42:15,920
light coding let's see if it works okay

00:42:14,319 --> 00:42:18,960
amazing this is what i wanted to show

00:42:15,920 --> 00:42:22,319
you leave 2 has flow has 6 but as

00:42:18,960 --> 00:42:24,560
doesn't have much weight but i can i can

00:42:22,319 --> 00:42:27,520
read it

00:42:24,560 --> 00:42:29,359
so how does it work in python very very

00:42:27,520 --> 00:42:31,760
simple

00:42:29,359 --> 00:42:32,960
there is a mechanism called attribute

00:42:31,760 --> 00:42:35,200
resolution

00:42:32,960 --> 00:42:36,560
which works with these get attributes

00:42:35,200 --> 00:42:39,920
value function

00:42:36,560 --> 00:42:40,960
that is transparent what happens is that

00:42:39,920 --> 00:42:43,359
when you ask

00:42:40,960 --> 00:42:44,400
lift one to give you much weight lift

00:42:43,359 --> 00:42:47,040
one says

00:42:44,400 --> 00:42:48,319
i have much weight i have my own max

00:42:47,040 --> 00:42:50,880
weight so i give you

00:42:48,319 --> 00:42:52,720
the value i know but there is also flow

00:42:50,880 --> 00:42:56,079
don't worry this is the mistake i did

00:42:52,720 --> 00:42:56,400
i made before this is the max weight i

00:42:56,079 --> 00:42:58,880
have

00:42:56,400 --> 00:43:01,040
i give it to you well when you go and

00:42:58,880 --> 00:43:03,599
ask leave too little says

00:43:01,040 --> 00:43:04,960
wait a second max wait i don't know

00:43:03,599 --> 00:43:08,240
anything about much weight

00:43:04,960 --> 00:43:10,400
um but python this is interesting python

00:43:08,240 --> 00:43:12,079
doesn't like to throw arrows at you it's

00:43:10,400 --> 00:43:15,680
very friendly

00:43:12,079 --> 00:43:17,280
so it says wait a minute

00:43:15,680 --> 00:43:18,720
i don't know anything about mass weight

00:43:17,280 --> 00:43:22,000
but i know

00:43:18,720 --> 00:43:26,000
who to ask for it so it goes to the

00:43:22,000 --> 00:43:26,960
lift class and asks for much weight and

00:43:26,000 --> 00:43:29,680
clown and the class

00:43:26,960 --> 00:43:30,400
says yeah i know about max weight here

00:43:29,680 --> 00:43:33,520
here it is

00:43:30,400 --> 00:43:35,839
400. so

00:43:33,520 --> 00:43:37,440
long story short sorry for being a bit

00:43:35,839 --> 00:43:39,839
burbose

00:43:37,440 --> 00:43:40,560
instances and classes are connected in

00:43:39,839 --> 00:43:42,960
python

00:43:40,560 --> 00:43:43,680
not only instances know where they come

00:43:42,960 --> 00:43:47,520
from

00:43:43,680 --> 00:43:50,800
but they can go to the class and ask

00:43:47,520 --> 00:43:52,560
for attributes and for methods when they

00:43:50,800 --> 00:43:56,000
don't have them locally

00:43:52,560 --> 00:43:58,800
okay i hope this is

00:43:56,000 --> 00:44:01,280
clear let me see if people are getting

00:43:58,800 --> 00:44:01,280
crazy

00:44:06,319 --> 00:44:09,920
is there a way to know how many

00:44:07,680 --> 00:44:13,839
instances a class has

00:44:09,920 --> 00:44:18,880
uh i am not sure

00:44:13,839 --> 00:44:18,880
i think there might be a way but

00:44:19,200 --> 00:44:22,800
yeah exactly exactly rob says you have

00:44:22,240 --> 00:44:24,400
to

00:44:22,800 --> 00:44:26,640
implement the behavior into the class so

00:44:24,400 --> 00:44:28,800
you have to count them yeah

00:44:26,640 --> 00:44:30,240
yeah that's that's possible not by

00:44:28,800 --> 00:44:32,319
defaulting python

00:44:30,240 --> 00:44:33,680
okay let's go on and then we have the

00:44:32,319 --> 00:44:37,280
break

00:44:33,680 --> 00:44:40,319
sorry i'm a you know fast-paced but yeah

00:44:37,280 --> 00:44:43,440
um there's also an advanced part here

00:44:40,319 --> 00:44:47,040
uh read it on your own uh it's part of

00:44:43,440 --> 00:44:49,040
the workshop but i don't have time to

00:44:47,040 --> 00:44:50,480
look at look at this it's method

00:44:49,040 --> 00:44:52,319
resolution it's a bit different from

00:44:50,480 --> 00:44:55,359
attributes resolution

00:44:52,319 --> 00:44:58,400
so the exercises for next five

00:44:55,359 --> 00:44:59,200
five six minutes are modify the lift

00:44:58,400 --> 00:45:02,240
class as

00:44:59,200 --> 00:45:06,079
shown so copy this you know open a new

00:45:02,240 --> 00:45:09,599
the new um cell and just copy this

00:45:06,079 --> 00:45:13,599
here uh adding a class

00:45:09,599 --> 00:45:15,839
attribute status class attribute okay

00:45:13,599 --> 00:45:16,720
status with value undefined this thing

00:45:15,839 --> 00:45:19,520
here

00:45:16,720 --> 00:45:21,760
now create an instance what value does

00:45:19,520 --> 00:45:25,200
the status attribute of the instance

00:45:21,760 --> 00:45:27,680
have and why what happens if you change

00:45:25,200 --> 00:45:30,319
the value status in the class

00:45:27,680 --> 00:45:31,040
okay experiment a bit so i try to

00:45:30,319 --> 00:45:33,520
understand

00:45:31,040 --> 00:45:36,800
how this thing works it's a bit more an

00:45:33,520 --> 00:45:39,359
experimentation than an exercise

00:45:36,800 --> 00:45:40,400
and the second one is modify the lift

00:45:39,359 --> 00:45:44,160
class as shown

00:45:40,400 --> 00:45:47,520
status closed but now this time the init

00:45:44,160 --> 00:45:51,119
doesn't have status okay so

00:45:47,520 --> 00:45:54,560
initialize it and look at what happens

00:45:51,119 --> 00:45:57,040
at the status value in the class

00:45:54,560 --> 00:45:59,119
call open what is the value status in in

00:45:57,040 --> 00:46:01,359
the in the instance

00:45:59,119 --> 00:46:02,800
explore explore and try to understand

00:46:01,359 --> 00:46:05,040
how this connection between

00:46:02,800 --> 00:46:06,480
classes sorry between instances and

00:46:05,040 --> 00:46:09,520
classes

00:46:06,480 --> 00:46:11,280
behaves because this is one of the most

00:46:09,520 --> 00:46:13,440
important things in python

00:46:11,280 --> 00:46:15,119
believe me i've been using python for 20

00:46:13,440 --> 00:46:18,720
years that's

00:46:15,119 --> 00:46:22,720
paramount so yeah

00:46:18,720 --> 00:46:25,599
enjoy let me see if there are questions

00:46:22,720 --> 00:46:25,599
not yet okay

00:46:26,240 --> 00:46:30,720
marlene your probably listening if you

00:46:28,800 --> 00:46:33,839
see people you know asking questions and

00:46:30,720 --> 00:46:34,160
um and me not paying attention just ping

00:46:33,839 --> 00:46:43,839
me

00:46:34,160 --> 00:46:43,839
and say wake up

00:46:49,440 --> 00:46:53,760
let's say five minutes then i give you

00:46:51,200 --> 00:46:57,839
the solutions and then we have the break

00:46:53,760 --> 00:46:57,839
50 minutes at noon

00:46:58,160 --> 00:47:10,960
so marlene doesn't scold

00:47:01,200 --> 00:47:14,160
me because i'm running late

00:47:10,960 --> 00:47:16,720
that's fine yeah i will not call to you

00:47:14,160 --> 00:47:16,720
it's okay

00:47:17,920 --> 00:47:25,839
yeah i'm just joking

00:47:46,400 --> 00:47:50,640
if you are a javascript programmer

00:47:48,880 --> 00:47:53,119
remember that undefined is nothing

00:47:50,640 --> 00:47:54,800
but it's just a string don't sorry it's

00:47:53,119 --> 00:47:57,119
a bad choice

00:47:54,800 --> 00:47:58,800
of of value probably should have say

00:47:57,119 --> 00:48:00,400
something different but

00:47:58,800 --> 00:48:02,079
because i gave this workshop to some

00:48:00,400 --> 00:48:03,359
javascript programmers that were like oh

00:48:02,079 --> 00:48:06,000
this is on the phone no no no no no no

00:48:03,359 --> 00:48:21,839
this is just a string okay fuba whatever

00:48:06,000 --> 00:48:21,839
cut don't worry

00:49:00,839 --> 00:49:03,839
uh

00:49:14,839 --> 00:49:17,839
is

00:49:56,839 --> 00:49:59,839
so

00:50:09,520 --> 00:50:16,160
okay let me give you my solutions

00:50:13,440 --> 00:50:17,440
command them at least and then we can

00:50:16,160 --> 00:50:19,760
have the break

00:50:17,440 --> 00:50:22,559
what is this python for instance

00:50:19,760 --> 00:50:22,559
solutions yes

00:50:24,640 --> 00:50:29,040
cool so okay this is the this is the new

00:50:28,000 --> 00:50:32,160
class that i have

00:50:29,040 --> 00:50:35,599
that i should run all my sets yes

00:50:32,160 --> 00:50:37,520
here we go this is the new class i have

00:50:35,599 --> 00:50:38,800
uh what is the problem here obviously

00:50:37,520 --> 00:50:43,040
this is something you should

00:50:38,800 --> 00:50:45,440
do okay good example well done

00:50:43,040 --> 00:50:47,200
you shouldn't do it because this is an

00:50:45,440 --> 00:50:47,920
example to show you what happens when

00:50:47,200 --> 00:50:51,280
you have

00:50:47,920 --> 00:50:53,520
a clash between names

00:50:51,280 --> 00:50:54,480
status is here and status is here okay

00:50:53,520 --> 00:50:57,839
this is a bad

00:50:54,480 --> 00:50:59,520
choice so get take it as a

00:50:57,839 --> 00:51:02,000
an example what you shouldn't do but

00:50:59,520 --> 00:51:05,280
let's let's see what happens and

00:51:02,000 --> 00:51:07,839
how and why maybe so

00:51:05,280 --> 00:51:08,400
i instantiate it lift one open that's

00:51:07,839 --> 00:51:11,839
okay

00:51:08,400 --> 00:51:15,359
f unless so suddenly lift one status

00:51:11,839 --> 00:51:18,559
is open why is it open because i passed

00:51:15,359 --> 00:51:21,680
open which goes here which goes here

00:51:18,559 --> 00:51:22,079
which goes directly into self status so

00:51:21,680 --> 00:51:26,079
when

00:51:22,079 --> 00:51:30,160
lift one is asked for status

00:51:26,079 --> 00:51:33,920
lift one has status in its lived one

00:51:30,160 --> 00:51:36,720
under addict in its sorry

00:51:33,920 --> 00:51:38,480
it's dictionary it's here so lift one

00:51:36,720 --> 00:51:39,760
when you go to lift one says what's your

00:51:38,480 --> 00:51:41,760
status lift one says

00:51:39,760 --> 00:51:43,839
i know about my status i don't know i

00:51:41,760 --> 00:51:47,119
don't have to ask anyone anybody else

00:51:43,839 --> 00:51:47,599
right because it's here and if you

00:51:47,119 --> 00:51:49,839
change

00:51:47,599 --> 00:51:51,359
the status in the lift like let's say

00:51:49,839 --> 00:51:53,200
disabled for example because

00:51:51,359 --> 00:51:54,800
you know again you are the small god of

00:51:53,200 --> 00:51:55,760
this universe you want to disable all

00:51:54,800 --> 00:51:58,640
the lifts in this

00:51:55,760 --> 00:52:00,720
universe lift one doesn't care because

00:51:58,640 --> 00:52:04,880
lift one knows about the status so

00:52:00,720 --> 00:52:07,040
this is ineffective which is why this

00:52:04,880 --> 00:52:08,480
example is not a good one right it's a

00:52:07,040 --> 00:52:09,359
good example what you shouldn't do so

00:52:08,480 --> 00:52:11,520
it's a good

00:52:09,359 --> 00:52:12,960
example what you shouldn't do good

00:52:11,520 --> 00:52:16,480
negative example so

00:52:12,960 --> 00:52:18,720
my point is as you create a status

00:52:16,480 --> 00:52:21,200
inside the instance

00:52:18,720 --> 00:52:22,640
the state the same attribute in the

00:52:21,200 --> 00:52:24,720
class is ignored

00:52:22,640 --> 00:52:26,720
okay it's pointless so this might go

00:52:24,720 --> 00:52:29,200
away

00:52:26,720 --> 00:52:31,119
let's see what happens in exercise two

00:52:29,200 --> 00:52:33,440
things are a bit different here

00:52:31,119 --> 00:52:34,800
because i have the attribute status in

00:52:33,440 --> 00:52:38,559
the class but i don't

00:52:34,800 --> 00:52:40,480
have it in the instance self status is

00:52:38,559 --> 00:52:42,960
not here okay

00:52:40,480 --> 00:52:45,200
so i instantiate it obviously you know

00:52:42,960 --> 00:52:48,640
now i can't pass the status because the

00:52:45,200 --> 00:52:51,040
init prototype okay the the the

00:52:48,640 --> 00:52:53,119
set of attributes the init ones is

00:52:51,040 --> 00:52:56,319
different

00:52:53,119 --> 00:52:56,800
when i ask for lift one status uh i get

00:52:56,319 --> 00:53:00,480
close

00:52:56,800 --> 00:53:04,240
why do i get close because uh well lift

00:53:00,480 --> 00:53:04,240
one than the dick

00:53:05,040 --> 00:53:11,599
sorry doesn't have sorry

00:53:08,319 --> 00:53:14,720
it has it because it's here um

00:53:11,599 --> 00:53:18,079
okay let's forget about this sorry

00:53:14,720 --> 00:53:21,440
uh this one status works why

00:53:18,079 --> 00:53:21,920
because it goes into the class to have

00:53:21,440 --> 00:53:25,599
it

00:53:21,920 --> 00:53:26,480
to retrieve it uh this doesn't didn't

00:53:25,599 --> 00:53:30,240
work sorry because

00:53:26,480 --> 00:53:33,040
uh jupiter notebook the the cell that i

00:53:30,240 --> 00:53:34,640
that i entered here is using the values

00:53:33,040 --> 00:53:36,400
that i created here so sorry

00:53:34,640 --> 00:53:38,640
for that example forget what i did with

00:53:36,400 --> 00:53:42,720
that cell forget it

00:53:38,640 --> 00:53:45,040
so lift one status is open is

00:53:42,720 --> 00:53:46,800
sorry let me restart and run everything

00:53:45,040 --> 00:53:49,040
because i messed it up

00:53:46,800 --> 00:53:50,800
yes this is this is what happens when

00:53:49,040 --> 00:53:53,680
you do things live

00:53:50,800 --> 00:53:56,079
cool now we are here lift one is

00:53:53,680 --> 00:53:59,040
instantiated this one status is

00:53:56,079 --> 00:54:01,200
closed why because lift one doesn't know

00:53:59,040 --> 00:54:03,920
anything about the status

00:54:01,200 --> 00:54:04,319
and it goes to the class and the star

00:54:03,920 --> 00:54:08,240
class

00:54:04,319 --> 00:54:11,359
says your status is close that's it

00:54:08,240 --> 00:54:13,920
if i change lift status to disabled

00:54:11,359 --> 00:54:16,880
suddenly lift one becomes disabled

00:54:13,920 --> 00:54:19,040
because they are still connected

00:54:16,880 --> 00:54:20,400
look at what happens here however this

00:54:19,040 --> 00:54:23,280
is uh

00:54:20,400 --> 00:54:25,440
this is very tricky okay i saw it

00:54:23,280 --> 00:54:26,960
happening many times in my python code

00:54:25,440 --> 00:54:30,400
and in the other people's

00:54:26,960 --> 00:54:32,880
code now i call lift one open because i

00:54:30,400 --> 00:54:35,040
want to open the lift right and lift

00:54:32,880 --> 00:54:36,640
status if one status is open that's

00:54:35,040 --> 00:54:38,400
that's okay

00:54:36,640 --> 00:54:40,319
a look at what happens here then i

00:54:38,400 --> 00:54:42,720
change the status in the

00:54:40,319 --> 00:54:44,720
class and the change the status in the

00:54:42,720 --> 00:54:48,880
lift doesn't change in the instance

00:54:44,720 --> 00:54:52,400
why because the instance doesn't have

00:54:48,880 --> 00:54:55,920
self status but when i run open

00:54:52,400 --> 00:54:58,640
i do this and this creates

00:54:55,920 --> 00:54:59,760
the status attribute in the instance

00:54:58,640 --> 00:55:02,799
remember when i

00:54:59,760 --> 00:55:05,359
first created a floor attributes you

00:55:02,799 --> 00:55:07,920
know with a with a typo in it

00:55:05,359 --> 00:55:09,440
that's what happens i suddenly create

00:55:07,920 --> 00:55:12,400
the status

00:55:09,440 --> 00:55:14,559
attribute in the instance and now lift

00:55:12,400 --> 00:55:19,440
one is disconnected from lift

00:55:14,559 --> 00:55:22,720
as for status this is important so

00:55:19,440 --> 00:55:25,200
class attributes are useful

00:55:22,720 --> 00:55:26,400
you can find them in many python

00:55:25,200 --> 00:55:29,599
libraries but they are

00:55:26,400 --> 00:55:33,040
tricky so my point is

00:55:29,599 --> 00:55:36,319
uh and with this i come to an end

00:55:33,040 --> 00:55:37,280
for this first part remember classes

00:55:36,319 --> 00:55:41,200
ideas

00:55:37,280 --> 00:55:43,520
instances concrete uh incarnations or

00:55:41,200 --> 00:55:44,400
very religious what of these or these

00:55:43,520 --> 00:55:48,079
ideas

00:55:44,400 --> 00:55:50,400
um instances

00:55:48,079 --> 00:55:51,200
are connected with classes and they can

00:55:50,400 --> 00:55:54,880
go there

00:55:51,200 --> 00:55:57,920
at runtime to retrieve attributes and

00:55:54,880 --> 00:56:01,520
methods remember also however

00:55:57,920 --> 00:56:04,160
that it's tricky to have

00:56:01,520 --> 00:56:04,960
to use class attributes in methods if

00:56:04,160 --> 00:56:08,000
you do this

00:56:04,960 --> 00:56:09,440
you are overriding status and it doesn't

00:56:08,000 --> 00:56:12,480
work that it doesn't work as

00:56:09,440 --> 00:56:13,599
expected probably so yeah keep it in

00:56:12,480 --> 00:56:16,799
mind

00:56:13,599 --> 00:56:18,319
okay cool i'm in time i'm time uh 50

00:56:16,799 --> 00:56:21,440
minutes of breaks see you

00:56:18,319 --> 00:56:24,480
in uh at noon 15 for

00:56:21,440 --> 00:56:26,559
the second part of the workshop in the

00:56:24,480 --> 00:56:29,280
meanwhile if you want to ping me send me

00:56:26,559 --> 00:56:31,839
questions i'm here

00:56:29,280 --> 00:56:31,839
thank you

00:56:42,160 --> 00:56:50,160
great cool so welcome back

00:56:46,640 --> 00:56:53,040
i hope you had a good break ready for

00:56:50,160 --> 00:56:55,119
you know to hear me rambling again for

00:56:53,040 --> 00:56:58,160
50 uh 45 minutes

00:56:55,119 --> 00:57:00,799
um okay let's move on

00:56:58,160 --> 00:57:02,880
with the second part of the workshop and

00:57:00,799 --> 00:57:04,960
the second part of object oriented so

00:57:02,880 --> 00:57:06,240
i didn't mention it before object

00:57:04,960 --> 00:57:09,920
oriented traditionally

00:57:06,240 --> 00:57:11,839
has three pillars which are named

00:57:09,920 --> 00:57:15,040
encapsulation

00:57:11,839 --> 00:57:16,960
delegation and polymorphism and

00:57:15,040 --> 00:57:20,640
this is my personal delegation is my

00:57:16,960 --> 00:57:23,839
personal war against the establishment

00:57:20,640 --> 00:57:26,480
because every time you read

00:57:23,839 --> 00:57:27,280
about object-oriented around on books

00:57:26,480 --> 00:57:30,720
and

00:57:27,280 --> 00:57:32,720
articles or whatever people mention

00:57:30,720 --> 00:57:34,160
inheritance as the second pillar so

00:57:32,720 --> 00:57:35,280
encapsulation inheritance and

00:57:34,160 --> 00:57:38,799
polymorphism

00:57:35,280 --> 00:57:41,200
i disagree with all myself so

00:57:38,799 --> 00:57:43,040
it's not inheritance but it's delegation

00:57:41,200 --> 00:57:45,920
which is something a bit

00:57:43,040 --> 00:57:47,599
broader i'm gonna show you in a second

00:57:45,920 --> 00:57:49,200
so let's talk about delegation this is

00:57:47,599 --> 00:57:52,240
my workshop so we are talking about

00:57:49,200 --> 00:57:55,520
what i want sorry just joking

00:57:52,240 --> 00:57:57,680
um let's talk about specialization first

00:57:55,520 --> 00:57:58,799
so what does it mean that i specialize

00:57:57,680 --> 00:58:01,359
in something

00:57:58,799 --> 00:58:02,319
let's talk about ideas i have the class

00:58:01,359 --> 00:58:05,520
animal

00:58:02,319 --> 00:58:09,280
and the class cat okay here

00:58:05,520 --> 00:58:12,559
what does it mean that cat specializes

00:58:09,280 --> 00:58:16,559
the class animal well let's see

00:58:12,559 --> 00:58:17,280
first of all cat has all the features of

00:58:16,559 --> 00:58:19,200
animal

00:58:17,280 --> 00:58:21,359
so for example an animal is an animal

00:58:19,200 --> 00:58:25,359
because it moves right

00:58:21,359 --> 00:58:28,160
and a cat moves same feature

00:58:25,359 --> 00:58:29,119
cat can provide new features so for

00:58:28,160 --> 00:58:32,240
example the cat

00:58:29,119 --> 00:58:34,240
has whiskers right uh

00:58:32,240 --> 00:58:36,240
not all animals have whiskers for

00:58:34,240 --> 00:58:38,400
example attack is an animal but doesn't

00:58:36,240 --> 00:58:40,640
have whiskers so this is a new feature

00:58:38,400 --> 00:58:43,920
that card provides

00:58:40,640 --> 00:58:47,440
and third cut performs

00:58:43,920 --> 00:58:49,119
some of or all the tasks performed by

00:58:47,440 --> 00:58:52,960
animal in a different way

00:58:49,119 --> 00:58:55,599
so the cat moves as any other animal

00:58:52,960 --> 00:58:56,720
but it moves silently i'm pretty sure

00:58:55,599 --> 00:58:59,520
that like

00:58:56,720 --> 00:59:01,359
an elephant doesn't move very silently

00:58:59,520 --> 00:59:04,319
like the cat is more silent

00:59:01,359 --> 00:59:05,520
so this is the definition of

00:59:04,319 --> 00:59:09,280
specialization

00:59:05,520 --> 00:59:12,480
so cuts implements only new

00:59:09,280 --> 00:59:14,160
or changed features and delegates here

00:59:12,480 --> 00:59:15,200
we have delegation delegates the

00:59:14,160 --> 00:59:18,400
remaining features

00:59:15,200 --> 00:59:19,359
to animal which is why the arrow is in

00:59:18,400 --> 00:59:21,680
this direction

00:59:19,359 --> 00:59:23,440
a cat specializes animal because it

00:59:21,680 --> 00:59:27,440
delegates to animal

00:59:23,440 --> 00:59:30,319
what it can do okay

00:59:27,440 --> 00:59:30,319
there are two

00:59:30,480 --> 00:59:34,000
types so two ways to implement

00:59:33,040 --> 00:59:37,359
delegation

00:59:34,000 --> 00:59:38,480
in every object-oriented programming

00:59:37,359 --> 00:59:41,920
language

00:59:38,480 --> 00:59:42,799
so python scala in java whatever c plus

00:59:41,920 --> 00:59:45,599
plus

00:59:42,799 --> 00:59:46,240
the first one is composition the second

00:59:45,599 --> 00:59:49,520
one is

00:59:46,240 --> 00:59:51,359
inheritance i'm working on this there

00:59:49,520 --> 00:59:53,599
are many ways to introduce these things

00:59:51,359 --> 00:59:55,440
i don't want to ramble for one hour so i

00:59:53,599 --> 00:59:58,480
will i will try to be a bit

00:59:55,440 --> 01:00:01,599
compact in my explanation uh i

00:59:58,480 --> 01:00:05,280
associate composition with the verb

01:00:01,599 --> 01:00:08,480
to have so when you think about a car

01:00:05,280 --> 01:00:11,680
as in the example here the car

01:00:08,480 --> 01:00:13,520
has an engine and has wheels

01:00:11,680 --> 01:00:15,920
and probably something more if if it's a

01:00:13,520 --> 01:00:18,880
good car it should have other things but

01:00:15,920 --> 01:00:19,280
let's give this as a simple example the

01:00:18,880 --> 01:00:22,640
car

01:00:19,280 --> 01:00:24,880
has an engine the car doesn't

01:00:22,640 --> 01:00:26,240
the car isn't the engine okay it's not

01:00:24,880 --> 01:00:29,359
just the engine

01:00:26,240 --> 01:00:31,760
it's a composition of parts that you can

01:00:29,359 --> 01:00:34,799
isolate you can open the bonnet

01:00:31,760 --> 01:00:36,480
and extract the engine and and go around

01:00:34,799 --> 01:00:37,760
with your engine just just the engine

01:00:36,480 --> 01:00:40,960
right

01:00:37,760 --> 01:00:43,119
um so the car is composed

01:00:40,960 --> 01:00:45,280
by the engine by the wheels by blah blah

01:00:43,119 --> 01:00:46,880
blah and the car can delegate to the

01:00:45,280 --> 01:00:49,200
engine because when you say

01:00:46,880 --> 01:00:50,000
start the car okay you go into the car

01:00:49,200 --> 01:00:51,520
you start it

01:00:50,000 --> 01:00:53,520
well actually you're starting the engine

01:00:51,520 --> 01:00:56,559
you're not starting the car but

01:00:53,520 --> 01:01:00,319
you know by extension this is delegation

01:00:56,559 --> 01:01:03,200
card delegates to the engine the second

01:01:00,319 --> 01:01:03,520
type of delegation is inheritance and

01:01:03,200 --> 01:01:05,680
you

01:01:03,520 --> 01:01:06,720
might know this a bit more a bit better

01:01:05,680 --> 01:01:08,799
than composition

01:01:06,720 --> 01:01:10,400
what is inheritance inheritance is

01:01:08,799 --> 01:01:14,400
connected with the verb

01:01:10,400 --> 01:01:17,680
to be because you see the cat

01:01:14,400 --> 01:01:21,040
is an animal you you can't say the cat

01:01:17,680 --> 01:01:23,280
has an animal yeah i mean where

01:01:21,040 --> 01:01:24,400
if you if you dissect the cat you

01:01:23,280 --> 01:01:26,640
shouldn't but

01:01:24,400 --> 01:01:28,319
if you do it there is no there is no

01:01:26,640 --> 01:01:31,200
animal part in it you know like

01:01:28,319 --> 01:01:32,559
you say oh this is the cat this side and

01:01:31,200 --> 01:01:34,480
this is the animal

01:01:32,559 --> 01:01:35,920
part of the car no that doesn't work

01:01:34,480 --> 01:01:39,440
animal is part

01:01:35,920 --> 01:01:44,000
of the whole thing it is an animal okay

01:01:39,440 --> 01:01:46,640
does it make sense i hope so again

01:01:44,000 --> 01:01:47,359
it can delegate because when i ask the

01:01:46,640 --> 01:01:50,559
cat to

01:01:47,359 --> 01:01:53,760
meow it's the cat that meows right

01:01:50,559 --> 01:01:57,039
while the move comes from its animal

01:01:53,760 --> 01:02:01,359
nature i i hope this makes sense so

01:01:57,039 --> 01:02:04,079
composition inheritance

01:02:01,359 --> 01:02:05,280
okay composition is something you can do

01:02:04,079 --> 01:02:07,520
in every single

01:02:05,280 --> 01:02:09,920
object-oriented language and you don't

01:02:07,520 --> 01:02:13,680
need any support by the language while

01:02:09,920 --> 01:02:16,240
inheritance goes by the rules set by the

01:02:13,680 --> 01:02:18,240
the language i'm not talking about

01:02:16,240 --> 01:02:20,079
composition too much today

01:02:18,240 --> 01:02:21,280
because i don't have the time and it's a

01:02:20,079 --> 01:02:24,160
pity

01:02:21,280 --> 01:02:25,920
because composition is important and so

01:02:24,160 --> 01:02:29,200
my advice before i go on

01:02:25,920 --> 01:02:32,319
my my hint is please don't forget

01:02:29,200 --> 01:02:35,520
composition there is a mantra which is

01:02:32,319 --> 01:02:38,079
composition over inheritance not because

01:02:35,520 --> 01:02:39,680
composition is more important than

01:02:38,079 --> 01:02:43,520
inheritance they are both

01:02:39,680 --> 01:02:44,319
equally powerful but people tend to use

01:02:43,520 --> 01:02:48,240
inheritance

01:02:44,319 --> 01:02:50,960
everywhere and this is problematic

01:02:48,240 --> 01:02:51,599
i'm i'm not saying more than this or we

01:02:50,960 --> 01:02:53,200
can

01:02:51,599 --> 01:02:55,520
hang out you know and chat a bit now

01:02:53,200 --> 01:02:57,760
about this when you when you design up

01:02:55,520 --> 01:02:59,359
when you design some software think

01:02:57,760 --> 01:03:02,160
about composition

01:02:59,359 --> 01:03:03,920
learn to use it that's it let's go into

01:03:02,160 --> 01:03:07,119
inheritance

01:03:03,920 --> 01:03:09,520
how do we implement how do we implement

01:03:07,119 --> 01:03:10,240
inheritance in python you might know

01:03:09,520 --> 01:03:13,440
this but

01:03:10,240 --> 01:03:14,079
yeah indulge me so i have here my class

01:03:13,440 --> 01:03:16,960
lift

01:03:14,079 --> 01:03:17,280
as i had before with the max weight as

01:03:16,960 --> 01:03:20,400
well

01:03:17,280 --> 01:03:22,240
as a class attribute and i can create

01:03:20,400 --> 01:03:22,960
this other class security lift and

01:03:22,240 --> 01:03:26,160
specify

01:03:22,960 --> 01:03:27,280
lift here this syntax means that

01:03:26,160 --> 01:03:30,880
security lift

01:03:27,280 --> 01:03:34,079
inherits from lift it specializes

01:03:30,880 --> 01:03:35,920
lift okay as you see as you can see

01:03:34,079 --> 01:03:38,640
security lift is empty

01:03:35,920 --> 01:03:39,119
let's see how it works let me run this

01:03:38,640 --> 01:03:42,160
as

01:03:39,119 --> 01:03:45,440
always it goes to the bottom sorry

01:03:42,160 --> 01:03:47,920
where where we okay here

01:03:45,440 --> 01:03:50,000
so i have lived and i have security if

01:03:47,920 --> 01:03:54,240
that specializes lift

01:03:50,000 --> 01:03:56,720
i can instantiate security lift

01:03:54,240 --> 01:03:59,039
um and this already tells you something

01:03:56,720 --> 01:04:02,400
because i'm using security lift

01:03:59,039 --> 01:04:04,400
as i used lift giving the same thing

01:04:02,400 --> 01:04:07,359
basically using the same init

01:04:04,400 --> 01:04:09,039
method and there is no unit method here

01:04:07,359 --> 01:04:10,720
so

01:04:09,039 --> 01:04:12,640
hints that there is some connection

01:04:10,720 --> 01:04:16,000
between the two right

01:04:12,640 --> 01:04:19,119
remember the delegation concept

01:04:16,000 --> 01:04:22,160
as lift has max width which is

01:04:19,119 --> 01:04:26,000
you know this as lift

01:04:22,160 --> 01:04:28,880
much weight is security lift max weight

01:04:26,000 --> 01:04:30,000
okay so let's look at this is in python

01:04:28,880 --> 01:04:33,200
mean doesn't mean

01:04:30,000 --> 01:04:36,240
it has the same value okay is

01:04:33,200 --> 01:04:37,520
means it is the same thing exactly the

01:04:36,240 --> 01:04:39,680
very same thing in memory

01:04:37,520 --> 01:04:41,760
okay keep it in mind different it's not

01:04:39,680 --> 01:04:45,200
equal equal it's different

01:04:41,760 --> 01:04:48,000
so when i say s lift as an instance

01:04:45,200 --> 01:04:48,720
is max weight is a security lift i'm

01:04:48,000 --> 01:04:50,960
saying that

01:04:48,720 --> 01:04:52,799
the instance and the class have a

01:04:50,960 --> 01:04:54,559
connection we already know this we saw

01:04:52,799 --> 01:04:56,720
it in the previous part

01:04:54,559 --> 01:04:58,720
so as lib doesn't have the max weight it

01:04:56,720 --> 01:05:02,559
goes to the class

01:04:58,720 --> 01:05:04,000
easy-peasy right so they are the same

01:05:02,559 --> 01:05:06,880
but there is something more that we can

01:05:04,000 --> 01:05:09,920
discover that security lift max weight

01:05:06,880 --> 01:05:12,400
is lift much weight and

01:05:09,920 --> 01:05:14,319
now we are talking about two classes

01:05:12,400 --> 01:05:15,359
this is an instance and this is a class

01:05:14,319 --> 01:05:16,559
and we know there is a connection

01:05:15,359 --> 01:05:18,240
between the two

01:05:16,559 --> 01:05:20,640
but this is a class and this is another

01:05:18,240 --> 01:05:23,520
class so

01:05:20,640 --> 01:05:25,920
we discovered something interesting here

01:05:23,520 --> 01:05:28,400
how does delegation work how does

01:05:25,920 --> 01:05:30,160
inheritance work in python there is a

01:05:28,400 --> 01:05:32,480
connection between this class

01:05:30,160 --> 01:05:33,440
and this class uh the same connection

01:05:32,480 --> 01:05:36,640
that we had

01:05:33,440 --> 01:05:39,359
that we had before um yeah between the

01:05:36,640 --> 01:05:40,880
instance and the class we had the same

01:05:39,359 --> 01:05:44,160
connection between the class

01:05:40,880 --> 01:05:46,480
and the super glass okay this is called

01:05:44,160 --> 01:05:47,359
superclass this is called child class oh

01:05:46,480 --> 01:05:50,559
yeah there's a

01:05:47,359 --> 01:05:52,240
inheritance between the two

01:05:50,559 --> 01:05:53,920
okay let's look at behind the scenes

01:05:52,240 --> 01:05:56,160
this is a workshop

01:05:53,920 --> 01:05:57,280
about behind the scenes okay so let's

01:05:56,160 --> 01:06:01,200
look at what happens

01:05:57,280 --> 01:06:04,720
inside python uh s lift done addict

01:06:01,200 --> 01:06:05,920
what does as lift have as lift is an

01:06:04,720 --> 01:06:08,720
instance of these

01:06:05,920 --> 01:06:10,480
i instantiated it giving one and closed

01:06:08,720 --> 01:06:11,359
so i created the flow and status and

01:06:10,480 --> 01:06:14,799
this is what i

01:06:11,359 --> 01:06:16,640
i find into as lift

01:06:14,799 --> 01:06:19,280
not different from what i found into

01:06:16,640 --> 01:06:23,599
lift one and f2 in the previous part

01:06:19,280 --> 01:06:26,000
let's look into security lift as a class

01:06:23,599 --> 01:06:27,520
it's surprisingly empty there are a

01:06:26,000 --> 01:06:28,400
couple of things here than the module

01:06:27,520 --> 01:06:30,079
under dock

01:06:28,400 --> 01:06:32,079
not interesting about them they are not

01:06:30,079 --> 01:06:34,720
very important in this context

01:06:32,079 --> 01:06:37,039
it's pretty empty you know where is max

01:06:34,720 --> 01:06:39,520
weight where is open where is closed

01:06:37,039 --> 01:06:40,079
there is nothing yeah there is nothing

01:06:39,520 --> 01:06:43,280
because

01:06:40,079 --> 01:06:47,039
the class is empty everything is

01:06:43,280 --> 01:06:48,640
in lift as it was before so

01:06:47,039 --> 01:06:50,720
question where is the connection between

01:06:48,640 --> 01:06:52,480
security lift and lift

01:06:50,720 --> 01:06:53,839
we know that the connection between s

01:06:52,480 --> 01:06:57,119
lift and security lift

01:06:53,839 --> 01:07:00,160
or between lift one and lift before

01:06:57,119 --> 01:07:00,960
it's into than the class right if you

01:07:00,160 --> 01:07:04,000
type that

01:07:00,960 --> 01:07:06,240
you get the connection the connection

01:07:04,000 --> 01:07:09,599
between a class and a super class

01:07:06,240 --> 01:07:10,640
is in two basis databases okay same

01:07:09,599 --> 01:07:13,280
thing

01:07:10,640 --> 01:07:14,319
python is really straightforward on this

01:07:13,280 --> 01:07:16,400
just writes

01:07:14,319 --> 01:07:17,520
it just writes into the class the

01:07:16,400 --> 01:07:19,520
superplus

01:07:17,520 --> 01:07:21,920
you may notice this is a tuple because

01:07:19,520 --> 01:07:23,839
python allows you to use multiple

01:07:21,920 --> 01:07:26,000
inheritance it's amazing

01:07:23,839 --> 01:07:27,039
uh it's really really dangerous and

01:07:26,000 --> 01:07:28,880
complicated

01:07:27,039 --> 01:07:30,559
no it's not really complicated but it's

01:07:28,880 --> 01:07:31,200
it's a double i just saw so i'm not

01:07:30,559 --> 01:07:33,359
talking about

01:07:31,200 --> 01:07:34,720
multiple inheritance i have some posts

01:07:33,359 --> 01:07:37,760
on my blog if you want

01:07:34,720 --> 01:07:40,559
uh to read them not

01:07:37,760 --> 01:07:41,520
for now just think about single

01:07:40,559 --> 01:07:45,119
inheritance

01:07:41,520 --> 01:07:45,599
single class inheritance what can you do

01:07:45,119 --> 01:07:48,079
when you

01:07:45,599 --> 01:07:48,720
inherit remember delegation you

01:07:48,079 --> 01:07:51,760
implement

01:07:48,720 --> 01:07:53,119
only the new or the changed features so

01:07:51,760 --> 01:07:56,559
what you can do is to

01:07:53,119 --> 01:07:59,920
re-implement or override the

01:07:56,559 --> 01:08:03,039
methods so if you say depth open

01:07:59,920 --> 01:08:04,720
in security lift then suddenly you can

01:08:03,039 --> 01:08:07,359
use this

01:08:04,720 --> 01:08:08,000
in as lift instead of the one that you

01:08:07,359 --> 01:08:11,359
defined

01:08:08,000 --> 01:08:13,920
in lyft

01:08:11,359 --> 01:08:15,039
same thing that happens between instance

01:08:13,920 --> 01:08:18,239
and class again

01:08:15,039 --> 01:08:18,719
so there's a delegation you asked for as

01:08:18,239 --> 01:08:21,520
lift

01:08:18,719 --> 01:08:23,679
open as lift as an instance says i don't

01:08:21,520 --> 01:08:24,000
know anything about open let me ask my

01:08:23,679 --> 01:08:26,880
super

01:08:24,000 --> 01:08:28,480
class right my class sorry it goes to

01:08:26,880 --> 01:08:29,920
security leave and he says do you know

01:08:28,480 --> 01:08:32,719
anything about open

01:08:29,920 --> 01:08:34,560
and securely if it says yes sure i have

01:08:32,719 --> 01:08:36,080
my method open i don't have to ask

01:08:34,560 --> 01:08:39,600
anybody else

01:08:36,080 --> 01:08:40,480
well if you use clothes security lift

01:08:39,600 --> 01:08:42,319
itself says

01:08:40,480 --> 01:08:44,319
i don't know anything about clothes let

01:08:42,319 --> 01:08:46,960
me ask my super glass maybe okay

01:08:44,319 --> 01:08:46,960
delegation

01:08:47,120 --> 01:08:50,799
by the way i'm just mentioning it

01:08:49,920 --> 01:08:55,359
instead

01:08:50,799 --> 01:08:58,960
of so what you can do when you when you

01:08:55,359 --> 01:09:02,560
override the method is to use super

01:08:58,960 --> 01:09:06,480
super is automatically giving you

01:09:02,560 --> 01:09:09,759
the super class so you can use it

01:09:06,480 --> 01:09:11,359
to avoid or implementing code i'm going

01:09:09,759 --> 01:09:13,759
very quickly on this because i want to

01:09:11,359 --> 01:09:17,600
go to the exercises

01:09:13,759 --> 01:09:20,880
i have time the point here

01:09:17,600 --> 01:09:24,640
is look at this self status equal

01:09:20,880 --> 01:09:29,279
open if i go to the lift

01:09:24,640 --> 01:09:32,719
class here look at this same code

01:09:29,279 --> 01:09:36,560
here and here

01:09:32,719 --> 01:09:40,480
now if i have an advice for

01:09:36,560 --> 01:09:40,480
young programmers is that

01:09:40,640 --> 01:09:47,040
duplicated code is evil okay

01:09:44,960 --> 01:09:48,719
sometimes it's worth having duplicated

01:09:47,040 --> 01:09:52,000
code i'm not saying that you

01:09:48,719 --> 01:09:52,480
should be ocd about it but yes a bit you

01:09:52,000 --> 01:09:55,920
should be

01:09:52,480 --> 01:09:57,040
ocd so what happens with duplicated code

01:09:55,920 --> 01:09:58,719
did in this case

01:09:57,040 --> 01:10:00,719
come on this is just an example okay

01:09:58,719 --> 01:10:03,760
save status open that shouldn't

01:10:00,719 --> 01:10:05,600
there shouldn't be any bug in this line

01:10:03,760 --> 01:10:07,920
because it's very simple but think about

01:10:05,600 --> 01:10:09,040
it if if this was a very complicated

01:10:07,920 --> 01:10:12,080
algorithm

01:10:09,040 --> 01:10:14,400
right that you are implementing

01:10:12,080 --> 01:10:16,080
you have the algorithm here and you have

01:10:14,400 --> 01:10:19,120
the algorithm even here

01:10:16,080 --> 01:10:19,840
same code if you discover a bug chances

01:10:19,120 --> 01:10:23,440
are

01:10:19,840 --> 01:10:27,199
that you solve the bag in only one

01:10:23,440 --> 01:10:28,560
of the two or three duplications

01:10:27,199 --> 01:10:30,000
and this shouldn't happen because

01:10:28,560 --> 01:10:31,600
suddenly you have something that works

01:10:30,000 --> 01:10:35,679
sometimes and it doesn't work

01:10:31,600 --> 01:10:38,960
other times so my point here

01:10:35,679 --> 01:10:39,679
is duplicated code should be avoided

01:10:38,960 --> 01:10:42,480
unless

01:10:39,679 --> 01:10:44,640
you exactly know what you are doing okay

01:10:42,480 --> 01:10:46,800
and the case is very simple so

01:10:44,640 --> 01:10:48,800
to avoid duplicating this code long

01:10:46,800 --> 01:10:49,760
story short what i do instead of

01:10:48,800 --> 01:10:52,880
duplicating it

01:10:49,760 --> 01:10:56,080
i call the code that my

01:10:52,880 --> 01:10:59,120
super class provides

01:10:56,080 --> 01:11:02,320
in python you can use super the

01:10:59,120 --> 01:11:05,360
call for the code of the superclass is

01:11:02,320 --> 01:11:08,239
not automatic python doesn't do it

01:11:05,360 --> 01:11:09,600
at all if you override it python doesn't

01:11:08,239 --> 01:11:11,440
know anything about the superclass you

01:11:09,600 --> 01:11:13,840
have to do it explicitly

01:11:11,440 --> 01:11:14,480
and you can do it before doing other

01:11:13,840 --> 01:11:16,000
things

01:11:14,480 --> 01:11:18,239
after doing other things in the

01:11:16,000 --> 01:11:19,760
meanwhile it's up to you you have to

01:11:18,239 --> 01:11:23,600
decide when to do it okay

01:11:19,760 --> 01:11:26,320
enough let's discuss a bit about

01:11:23,600 --> 01:11:27,679
composition i'm gonna show you probably

01:11:26,320 --> 01:11:29,600
a

01:11:27,679 --> 01:11:32,159
baddex not a bad example i'm going to

01:11:29,600 --> 01:11:35,199
show you the limitations of composition

01:11:32,159 --> 01:11:37,600
uh again i don't have time to show you

01:11:35,199 --> 01:11:40,159
the virtues because there are many but

01:11:37,600 --> 01:11:41,840
they they come into play in more

01:11:40,159 --> 01:11:44,000
complicated cases so

01:11:41,840 --> 01:11:45,679
just let me show you what happens with

01:11:44,000 --> 01:11:48,159
composition

01:11:45,679 --> 01:11:50,000
this is a composed class so security

01:11:48,159 --> 01:11:53,520
lift is not inheriting from

01:11:50,000 --> 01:11:55,600
lift it has a lift inside it

01:11:53,520 --> 01:11:56,960
like the engine for the car right so

01:11:55,600 --> 01:11:58,640
this is not a good example for a

01:11:56,960 --> 01:11:59,760
security leaf doesn't have another lift

01:11:58,640 --> 01:12:03,520
but yeah

01:11:59,760 --> 01:12:08,080
think theoretically now it has

01:12:03,520 --> 01:12:08,880
an instance of the other class inside so

01:12:08,080 --> 01:12:12,000
you can

01:12:08,880 --> 01:12:14,080
instantiate it and this works because

01:12:12,000 --> 01:12:17,120
init is delegating

01:12:14,080 --> 01:12:18,159
explicitly to the init of the lift it

01:12:17,120 --> 01:12:21,040
works

01:12:18,159 --> 01:12:21,760
but as soon as you try to read the floor

01:12:21,040 --> 01:12:24,159
attributes

01:12:21,760 --> 01:12:25,920
it doesn't work why because security

01:12:24,159 --> 01:12:28,000
leave doesn't have it

01:12:25,920 --> 01:12:29,679
and there is no automatic delegation

01:12:28,000 --> 01:12:30,000
because the automatic delegation comes

01:12:29,679 --> 01:12:31,760
from

01:12:30,000 --> 01:12:33,280
inheritance not from composition in

01:12:31,760 --> 01:12:37,120
composition you have to

01:12:33,280 --> 01:12:40,480
implement everything on your own

01:12:37,120 --> 01:12:43,679
so for example here

01:12:40,480 --> 01:12:44,560
i might want to create this which is a

01:12:43,679 --> 01:12:46,159
property

01:12:44,560 --> 01:12:48,159
i hope you you know how to use

01:12:46,159 --> 01:12:49,040
properties these are methods that behave

01:12:48,159 --> 01:12:51,280
like

01:12:49,040 --> 01:12:52,320
attributes or attributes yeah methods

01:12:51,280 --> 01:12:55,360
that we hate like

01:12:52,320 --> 01:12:55,840
attributes so this method flow gets

01:12:55,360 --> 01:12:59,040
called

01:12:55,840 --> 01:12:59,920
whenever i run self have sleeved the

01:12:59,040 --> 01:13:01,840
floor

01:12:59,920 --> 01:13:02,960
and what i'm doing here look at this

01:13:01,840 --> 01:13:06,320
this is the

01:13:02,960 --> 01:13:09,840
explicit delegation i'm returning self

01:13:06,320 --> 01:13:13,040
lift floor i have to do it

01:13:09,840 --> 01:13:15,840
and i have to do it for status and i

01:13:13,040 --> 01:13:19,920
have to do it with open

01:13:15,840 --> 01:13:24,000
so at this point you might think um

01:13:19,920 --> 01:13:25,920
you know the composition is is terrible

01:13:24,000 --> 01:13:28,159
because i have to do it i have to do

01:13:25,920 --> 01:13:31,440
anything on my own right

01:13:28,159 --> 01:13:34,239
two two you have to do everything

01:13:31,440 --> 01:13:36,000
but this is a bad example because in

01:13:34,239 --> 01:13:38,880
this case a security lift

01:13:36,000 --> 01:13:40,400
is a lift so this is a good case for

01:13:38,880 --> 01:13:42,719
inheritance

01:13:40,400 --> 01:13:44,719
think about the car and the engine what

01:13:42,719 --> 01:13:46,400
do you have to delegate from the car to

01:13:44,719 --> 01:13:48,560
the engine maybe just a method

01:13:46,400 --> 01:13:49,920
just the start method and you have to

01:13:48,560 --> 01:13:53,120
write something like this

01:13:49,920 --> 01:13:55,120
devstart self.engine

01:13:53,120 --> 01:13:56,560
dot start and that's it and you

01:13:55,120 --> 01:14:00,000
delegated the part that you

01:13:56,560 --> 01:14:01,679
need to delegate so my point here

01:14:00,000 --> 01:14:03,040
is i don't have the time to give you a

01:14:01,679 --> 01:14:05,040
proper example of composition

01:14:03,040 --> 01:14:06,159
probably i might already work a bit of

01:14:05,040 --> 01:14:09,760
workshop but yeah

01:14:06,159 --> 01:14:12,840
uh again and then i stop rambling i

01:14:09,760 --> 01:14:15,360
promise don't forget

01:14:12,840 --> 01:14:16,880
composition because it's very very

01:14:15,360 --> 01:14:20,719
powerful if you

01:14:16,880 --> 01:14:23,520
say the car is an engine

01:14:20,719 --> 01:14:25,440
then suddenly you have all the problems

01:14:23,520 --> 01:14:28,880
of dealing with the fact that

01:14:25,440 --> 01:14:32,400
the car doesn't want to expose methods

01:14:28,880 --> 01:14:35,679
that are that belong to the engine

01:14:32,400 --> 01:14:38,719
because the car isn't an engine

01:14:35,679 --> 01:14:41,040
okay so you spend a lot when

01:14:38,719 --> 01:14:42,080
as soon as you spend time trying to

01:14:41,040 --> 01:14:44,239
avoid

01:14:42,080 --> 01:14:47,199
your class using methods of the

01:14:44,239 --> 01:14:48,880
superclass because you don't want them

01:14:47,199 --> 01:14:51,040
chances are that you are using

01:14:48,880 --> 01:14:53,440
inheritance instead

01:14:51,040 --> 01:14:54,719
in view of composition okay just that

01:14:53,440 --> 01:14:57,760
that's it uh

01:14:54,719 --> 01:15:00,480
okay as well i i stop rounding up

01:14:57,760 --> 01:15:01,679
all these things but keep it in mind

01:15:00,480 --> 01:15:06,159
let's go into

01:15:01,679 --> 01:15:08,640
exercises um where are we

01:15:06,159 --> 01:15:09,840
delegation inheritance exercises as i

01:15:08,640 --> 01:15:11,840
said

01:15:09,840 --> 01:15:13,040
exercise is about inheritance not about

01:15:11,840 --> 01:15:16,159
composition because

01:15:13,040 --> 01:15:19,120
probably we don't have the time

01:15:16,159 --> 01:15:20,080
cool the exercises are the following

01:15:19,120 --> 01:15:23,600
starting with

01:15:20,080 --> 01:15:27,120
lift and security lift so go and grab

01:15:23,600 --> 01:15:30,640
sorry i i should have copied them

01:15:27,120 --> 01:15:33,679
um go and grab the

01:15:30,640 --> 01:15:37,280
lift and security lift that i have

01:15:33,679 --> 01:15:41,199
here so these two okay

01:15:37,280 --> 01:15:44,880
starting from starting with those

01:15:41,199 --> 01:15:48,239
modify security lift adding a custom

01:15:44,880 --> 01:15:51,360
init method that creates the attribute

01:15:48,239 --> 01:15:54,800
self a lot so you have to go here and

01:15:51,360 --> 01:15:57,600
write here def init self f s

01:15:54,800 --> 01:15:59,040
and then do something to create the

01:15:57,600 --> 01:16:02,480
attribute locked okay

01:15:59,040 --> 01:16:04,560
try to do it the exercise two is

01:16:02,480 --> 01:16:06,080
go on with what you did change the

01:16:04,560 --> 01:16:09,920
security method

01:16:06,080 --> 01:16:12,320
open to work so define it

01:16:09,920 --> 01:16:13,280
and make it work with self-locked so the

01:16:12,320 --> 01:16:15,280
idea is what we

01:16:13,280 --> 01:16:16,800
what we started with at the very

01:16:15,280 --> 01:16:17,679
beginning of the workshop you know the

01:16:16,800 --> 01:16:22,000
security lift

01:16:17,679 --> 01:16:24,880
should be opened only if it's not locked

01:16:22,000 --> 01:16:26,080
so there should be a difference because

01:16:24,880 --> 01:16:29,040
as for the lift

01:16:26,080 --> 01:16:30,960
you have this just just gets open right

01:16:29,040 --> 01:16:34,239
instead the security lift should say

01:16:30,960 --> 01:16:35,760
if it's locked oh if it's not locked

01:16:34,239 --> 01:16:39,520
open otherwise

01:16:35,760 --> 01:16:41,679
stay closed and exercise three

01:16:39,520 --> 01:16:42,800
go on again change the security lift

01:16:41,679 --> 01:16:46,239
method close

01:16:42,800 --> 01:16:49,280
to accept an optional parameter lock

01:16:46,239 --> 01:16:54,719
that sets the locked attribute okay

01:16:49,280 --> 01:16:54,719
this should be um like this

01:16:56,080 --> 01:17:02,239
cool so enjoy the exercises

01:16:59,199 --> 01:17:17,840
i'm checking questions now and then

01:17:02,239 --> 01:17:17,840
coming back for the solutions

01:17:28,840 --> 01:17:31,840
so

01:18:10,840 --> 01:18:13,840
so

01:18:52,840 --> 01:18:55,840
so

01:19:21,679 --> 01:19:23,840
you

01:19:48,840 --> 01:19:51,840
so

01:20:44,840 --> 01:20:47,840
hmm

01:23:13,580 --> 01:23:16,630
[Music]

01:23:18,840 --> 01:23:21,840
do

01:23:32,840 --> 01:23:35,840
so

01:24:09,440 --> 01:24:14,800
okay sorry i was answering some of the

01:24:12,800 --> 01:24:17,040
questions i finally managed to

01:24:14,800 --> 01:24:18,239
see to look at the chart under the

01:24:17,040 --> 01:24:23,199
screen at the same time

01:24:18,239 --> 01:24:23,199
um let me discuss a solution

01:24:23,280 --> 01:24:29,199
for these exercises uh

01:24:26,480 --> 01:24:31,840
where are we five dedication written

01:24:29,199 --> 01:24:31,840
solutions yes

01:24:36,239 --> 01:24:39,679
there was an interesting discussion here

01:24:38,159 --> 01:24:41,840
i believe about you know

01:24:39,679 --> 01:24:43,280
what what i said about object-oriented

01:24:41,840 --> 01:24:46,880
functional in the chat

01:24:43,280 --> 01:24:50,320
these are i i don't i don't

01:24:46,880 --> 01:24:52,080
i don't have you know final

01:24:50,320 --> 01:24:53,360
answers to these things because they are

01:24:52,080 --> 01:24:55,520
very interesting

01:24:53,360 --> 01:24:56,800
um just to say follow up with the

01:24:55,520 --> 01:24:59,040
discussion there and

01:24:56,800 --> 01:25:01,199
and get in touch i mean i'm so happy to

01:24:59,040 --> 01:25:06,000
discuss this about these things

01:25:01,199 --> 01:25:08,560
uh in general are my approaches

01:25:06,000 --> 01:25:09,679
i like the theoretical part of languages

01:25:08,560 --> 01:25:12,960
you know but in the end

01:25:09,679 --> 01:25:15,679
we have to bring home the bacon

01:25:12,960 --> 01:25:17,760
as we say in in uk you know like we have

01:25:15,679 --> 01:25:20,800
to get the job done

01:25:17,760 --> 01:25:24,480
and we should aim

01:25:20,800 --> 01:25:27,120
to have the job done not trying to mess

01:25:24,480 --> 01:25:30,239
up everything okay we should try to do

01:25:27,120 --> 01:25:31,360
things the proper way this is why i tend

01:25:30,239 --> 01:25:34,719
to

01:25:31,360 --> 01:25:35,520
discuss about the internals of the

01:25:34,719 --> 01:25:37,280
language

01:25:35,520 --> 01:25:39,520
understanding what the language can do

01:25:37,280 --> 01:25:41,840
understanding what he can't do

01:25:39,520 --> 01:25:42,880
i'm not against changing the language

01:25:41,840 --> 01:25:46,159
for example right

01:25:42,880 --> 01:25:49,040
if we can wait okay enough uh

01:25:46,159 --> 01:25:49,679
inheritance exercises exercise one uh

01:25:49,040 --> 01:25:52,639
said

01:25:49,679 --> 01:25:54,239
start with lift that we have here and

01:25:52,639 --> 01:25:57,520
security lift

01:25:54,239 --> 01:26:01,280
and adding a custom done init

01:25:57,520 --> 01:26:05,440
is just a matter of adding it here

01:26:01,280 --> 01:26:05,440
um with some code okay

01:26:06,880 --> 01:26:12,880
so what is the uh thank you david i'm

01:26:09,520 --> 01:26:12,880
gonna answer you later um

01:26:13,040 --> 01:26:17,600
so what what there are several ways to

01:26:15,760 --> 01:26:19,760
solve this exercise so i have

01:26:17,600 --> 01:26:21,760
four four different solutions so let me

01:26:19,760 --> 01:26:25,040
commend them

01:26:21,760 --> 01:26:27,520
first solution i read

01:26:25,040 --> 01:26:29,440
you know literally this says init method

01:26:27,520 --> 01:26:32,239
that creates the attribute self-locked

01:26:29,440 --> 01:26:33,520
that's it and i do exactly what it says

01:26:32,239 --> 01:26:36,239
so init method

01:26:33,520 --> 01:26:37,199
creates the self-locked attribute with

01:26:36,239 --> 01:26:39,760
the value

01:26:37,199 --> 01:26:41,840
for example false okay i don't accept it

01:26:39,760 --> 01:26:44,960
here

01:26:41,840 --> 01:26:44,960
uh i just created

01:26:45,280 --> 01:26:48,560
fine that there might be a better

01:26:46,960 --> 01:26:51,920
solution but let me let me

01:26:48,560 --> 01:26:54,159
go let me go on slowly so

01:26:51,920 --> 01:26:55,040
the first thing i notice about this

01:26:54,159 --> 01:26:58,400
method

01:26:55,040 --> 01:26:58,800
is that there is duplicated code so self

01:26:58,400 --> 01:27:02,000
law

01:26:58,800 --> 01:27:02,480
equal f status equal s is the same code

01:27:02,000 --> 01:27:06,639
that i

01:27:02,480 --> 01:27:09,440
have here again just to be

01:27:06,639 --> 01:27:10,880
crystal clear this example is very

01:27:09,440 --> 01:27:14,800
simple in this case

01:27:10,880 --> 01:27:16,320
i wouldn't uh argue okay i would encode

01:27:14,800 --> 01:27:18,560
review this code saying

01:27:16,320 --> 01:27:20,480
what are you doing duplicating code your

01:27:18,560 --> 01:27:23,120
evil programmer right no no

01:27:20,480 --> 01:27:24,320
no that's perfectly okay i mean that's

01:27:23,120 --> 01:27:26,880
that's very simple

01:27:24,320 --> 01:27:28,159
but in general i use a simple example to

01:27:26,880 --> 01:27:31,040
signify something

01:27:28,159 --> 01:27:32,080
bigger right and i saw bigger systems i

01:27:31,040 --> 01:27:35,679
saw big

01:27:32,080 --> 01:27:37,760
functions and big algorithms so

01:27:35,679 --> 01:27:40,080
this is this is why i insist on code

01:27:37,760 --> 01:27:43,520
duplication in this case it might be not

01:27:40,080 --> 01:27:45,760
that's dangerous okay but

01:27:43,520 --> 01:27:46,719
if i want to get rid of this duplication

01:27:45,760 --> 01:27:50,159
i can do it

01:27:46,719 --> 01:27:53,440
with super so i can call the init

01:27:50,159 --> 01:27:56,719
of my superclass so superinit

01:27:53,440 --> 01:28:00,639
of f and s okay

01:27:56,719 --> 01:28:04,159
this calls

01:28:00,639 --> 01:28:06,719
this function here and initializes flow

01:28:04,159 --> 01:28:06,719
and status

01:28:07,280 --> 01:28:14,080
okay the point is i'm just

01:28:10,639 --> 01:28:18,000
creating the locked attribute without

01:28:14,080 --> 01:28:21,040
passing a value so i might add it here

01:28:18,000 --> 01:28:23,600
i can add l and say self locked is

01:28:21,040 --> 01:28:24,239
l so now when i instantiate security

01:28:23,600 --> 01:28:28,159
lift

01:28:24,239 --> 01:28:31,600
i can pass false or two right

01:28:28,159 --> 01:28:35,040
this works but has a limitation

01:28:31,600 --> 01:28:36,960
which is what i'm i say here um

01:28:35,040 --> 01:28:38,320
i am changing the interface of the

01:28:36,960 --> 01:28:41,360
method of the

01:28:38,320 --> 01:28:42,159
class sorry the prototype what do i mean

01:28:41,360 --> 01:28:44,400
with interface

01:28:42,159 --> 01:28:46,239
let's go back to what i said at the very

01:28:44,400 --> 01:28:49,280
beginning of the workshop behavior

01:28:46,239 --> 01:28:53,360
meaning is important right so here

01:28:49,280 --> 01:28:57,679
we say that security lift is a lift

01:28:53,360 --> 01:29:00,400
okay so i expect security lift

01:28:57,679 --> 01:29:01,360
externally speaking behaviorally

01:29:00,400 --> 01:29:04,719
speaking

01:29:01,360 --> 01:29:06,800
to be sorry yeah i

01:29:04,719 --> 01:29:08,800
expect it to behave like a lift this is

01:29:06,800 --> 01:29:11,120
what i mean

01:29:08,800 --> 01:29:13,360
for example if i say oh you know this is

01:29:11,120 --> 01:29:14,960
a lift but it doesn't have a button it

01:29:13,360 --> 01:29:17,760
doesn't have a door

01:29:14,960 --> 01:29:19,120
it doesn't go up and down um yeah so

01:29:17,760 --> 01:29:21,199
it's not a lift

01:29:19,120 --> 01:29:22,800
okay because it doesn't have doesn't

01:29:21,199 --> 01:29:26,080
behave like a lid

01:29:22,800 --> 01:29:28,800
so here i am changing the prototype

01:29:26,080 --> 01:29:30,719
so suddenly if i want to instantiate

01:29:28,800 --> 01:29:31,280
this i have to say security lift and

01:29:30,719 --> 01:29:34,159
then i

01:29:31,280 --> 01:29:35,520
have to give the floor the status and

01:29:34,159 --> 01:29:39,600
the locked

01:29:35,520 --> 01:29:43,199
i can't initialize it as a lift anymore

01:29:39,600 --> 01:29:47,360
so i can leverage

01:29:43,199 --> 01:29:51,280
default values because i want to augment

01:29:47,360 --> 01:29:53,280
my method not to change

01:29:51,280 --> 01:29:54,719
it completely does it make sense i hope

01:29:53,280 --> 01:29:57,920
so if not

01:29:54,719 --> 01:29:58,800
ping me in the chat so i am basically

01:29:57,920 --> 01:30:01,920
saying

01:29:58,800 --> 01:30:03,520
my security lift can also be locked but

01:30:01,920 --> 01:30:04,159
if you don't want to lock it you can

01:30:03,520 --> 01:30:06,560
just use it

01:30:04,159 --> 01:30:08,000
as a lift right and nothing changes

01:30:06,560 --> 01:30:10,320
great

01:30:08,000 --> 01:30:12,080
so this is my final so this will be my

01:30:10,320 --> 01:30:13,120
final solution this is probably what i

01:30:12,080 --> 01:30:15,520
believe is the best

01:30:13,120 --> 01:30:17,920
solution for the exercise depending on

01:30:15,520 --> 01:30:20,239
the requirements however

01:30:17,920 --> 01:30:21,520
the exercise two is change the security

01:30:20,239 --> 01:30:25,440
lift so this that i

01:30:21,520 --> 01:30:28,480
came up with uh adding the method open

01:30:25,440 --> 01:30:30,960
to work with self locked so

01:30:28,480 --> 01:30:33,199
you can open it only if it's not locked

01:30:30,960 --> 01:30:34,239
so that's just a matter of adding this

01:30:33,199 --> 01:30:38,480
okay

01:30:34,239 --> 01:30:38,960
open overrides lift open so now security

01:30:38,480 --> 01:30:42,480
leave

01:30:38,960 --> 01:30:45,120
lift has its own open method

01:30:42,480 --> 01:30:45,600
and what i do is just saying if not self

01:30:45,120 --> 01:30:47,840
locked

01:30:45,600 --> 01:30:50,000
self status open okay so this is what if

01:30:47,840 --> 01:30:54,000
you go and check what i have

01:30:50,000 --> 01:30:56,000
in my very first notebook about

01:30:54,000 --> 01:30:58,080
object oriented this is where we started

01:30:56,000 --> 01:31:02,639
right we started from

01:30:58,080 --> 01:31:05,760
can we you know connect data and

01:31:02,639 --> 01:31:07,120
methods and we we did it now we also

01:31:05,760 --> 01:31:10,080
have a way to

01:31:07,120 --> 01:31:11,120
connect them and reuse what we already

01:31:10,080 --> 01:31:14,560
wrote

01:31:11,120 --> 01:31:17,280
speaking of reuse i see

01:31:14,560 --> 01:31:20,480
code repetition here yes i am ocd about

01:31:17,280 --> 01:31:22,719
code repetition and code duplication

01:31:20,480 --> 01:31:23,600
but yeah again it's an example sub

01:31:22,719 --> 01:31:27,679
status open

01:31:23,600 --> 01:31:31,840
is exactly what i have in

01:31:27,679 --> 01:31:35,600
open so i might say okay

01:31:31,840 --> 01:31:38,639
open security lift open wants to do

01:31:35,600 --> 01:31:42,159
exactly what lift open does

01:31:38,639 --> 01:31:45,520
but only in the case

01:31:42,159 --> 01:31:46,400
it's not locked as you can see as i told

01:31:45,520 --> 01:31:49,520
you before

01:31:46,400 --> 01:31:51,520
python doesn't call the super method

01:31:49,520 --> 01:31:52,560
automatically this doesn't happen in

01:31:51,520 --> 01:31:55,679
python okay

01:31:52,560 --> 01:31:57,120
it's up to you to decide if you want to

01:31:55,679 --> 01:32:00,480
call it

01:31:57,120 --> 01:32:03,440
and when you want to call it so

01:32:00,480 --> 01:32:05,679
in this case i call it conditionally

01:32:03,440 --> 01:32:05,679
okay

01:32:05,840 --> 01:32:09,040
exercise number three

01:32:11,440 --> 01:32:18,800
oh yes i uh sorry uh

01:32:14,480 --> 01:32:21,600
so uh i i thought this was um

01:32:18,800 --> 01:32:22,880
shared by uh from the from the uh on the

01:32:21,600 --> 01:32:25,440
on the um

01:32:22,880 --> 01:32:26,560
conference website i'm gonna i'm gonna

01:32:25,440 --> 01:32:29,760
share it in the

01:32:26,560 --> 01:32:29,760
in the chat in a second

01:32:31,760 --> 01:32:36,639
what was i saying yes exercise number

01:32:33,840 --> 01:32:39,840
three change the security method close

01:32:36,639 --> 01:32:42,080
to accept an optional parameter lock

01:32:39,840 --> 01:32:43,920
that sets the locked article so when you

01:32:42,080 --> 01:32:44,719
close the security lift you also want to

01:32:43,920 --> 01:32:47,840
lock it okay

01:32:44,719 --> 01:32:48,639
i don't know if it makes sense um in

01:32:47,840 --> 01:32:51,920
real life

01:32:48,639 --> 01:32:54,159
but this is what happens in my code so

01:32:51,920 --> 01:32:55,679
this is just a matter of defining the

01:32:54,159 --> 01:32:58,960
close method

01:32:55,679 --> 01:33:00,560
but as you can see if i want to accept

01:32:58,960 --> 01:33:01,679
this parameter i have to make it

01:33:00,560 --> 01:33:04,719
optional why

01:33:01,679 --> 01:33:08,080
i no no no wait sorry i don't have to

01:33:04,719 --> 01:33:10,719
i want to because if i just say lock if

01:33:08,080 --> 01:33:13,679
i remove this part

01:33:10,719 --> 01:33:15,120
this changes the prototype this changes

01:33:13,679 --> 01:33:18,320
the interface of my

01:33:15,120 --> 01:33:19,360
method so suddenly security lift can't

01:33:18,320 --> 01:33:22,159
be used as

01:33:19,360 --> 01:33:23,840
a lift anymore this is important for the

01:33:22,159 --> 01:33:26,400
next part by the way but let's see

01:33:23,840 --> 01:33:26,960
we discuss about it so lock equal force

01:33:26,400 --> 01:33:29,360
so now

01:33:26,960 --> 01:33:30,400
close can be just called as close or

01:33:29,360 --> 01:33:33,679
closed

01:33:30,400 --> 01:33:36,719
lock equals something i again

01:33:33,679 --> 01:33:40,000
try to avoid code repetitions so i

01:33:36,719 --> 01:33:42,159
call what the close of my super class

01:33:40,000 --> 01:33:47,440
does and then i lock it

01:33:42,159 --> 01:33:49,120
um quickly about what i was saying

01:33:47,440 --> 01:33:51,760
that python doesn't call the super

01:33:49,120 --> 01:33:54,719
automatically so here i have to decide

01:33:51,760 --> 01:33:55,760
if and where to call it in this case i

01:33:54,719 --> 01:33:58,080
might do

01:33:55,760 --> 01:33:58,080
this

01:33:58,960 --> 01:34:04,560
this works is exactly the same because

01:34:02,080 --> 01:34:06,960
i just set locked and then i close it or

01:34:04,560 --> 01:34:10,719
i close it in a set lock

01:34:06,960 --> 01:34:12,239
i don't care in other cases however you

01:34:10,719 --> 01:34:13,199
you can't do this okay you have to

01:34:12,239 --> 01:34:16,000
decide

01:34:13,199 --> 01:34:16,560
if you want to first go super and then

01:34:16,000 --> 01:34:18,560
act

01:34:16,560 --> 01:34:20,400
if you want the first act and then go

01:34:18,560 --> 01:34:21,760
super or if you want to you know do

01:34:20,400 --> 01:34:22,480
something call super and then do

01:34:21,760 --> 01:34:24,719
something else

01:34:22,480 --> 01:34:27,120
it's up to you so this is part of the

01:34:24,719 --> 01:34:28,960
design

01:34:27,120 --> 01:34:31,199
yeah since i have five minutes let me

01:34:28,960 --> 01:34:34,000
remember a bit about this and then we

01:34:31,199 --> 01:34:34,000
can have the break

01:34:34,800 --> 01:34:38,639
working with languages working with a

01:34:37,040 --> 01:34:39,360
functional programming language or

01:34:38,639 --> 01:34:42,320
working with

01:34:39,360 --> 01:34:44,719
object-oriented programming languages is

01:34:42,320 --> 01:34:48,000
not about

01:34:44,719 --> 01:34:51,440
writing code or not not just about that

01:34:48,000 --> 01:34:54,000
and please get away you know

01:34:51,440 --> 01:34:56,000
get out of this mentality a lot of

01:34:54,000 --> 01:34:56,400
people say i'm a coder i produce code

01:34:56,000 --> 01:35:00,239
right

01:34:56,400 --> 01:35:03,920
no no wait that's okay that's what we do

01:35:00,239 --> 01:35:05,840
uh practically speaking but the most

01:35:03,920 --> 01:35:08,960
important thing we do is to design

01:35:05,840 --> 01:35:11,760
software we are designers i

01:35:08,960 --> 01:35:13,199
have a talk on friday you are kind of

01:35:11,760 --> 01:35:15,760
invited to join me

01:35:13,199 --> 01:35:17,040
about clean architecture in this

01:35:15,760 --> 01:35:20,480
conference

01:35:17,040 --> 01:35:21,119
it's about design so when you write your

01:35:20,480 --> 01:35:24,560
code

01:35:21,119 --> 01:35:27,520
you have to think to think if you want

01:35:24,560 --> 01:35:29,760
to use inheritance or composition

01:35:27,520 --> 01:35:31,119
to think if it's worth creating another

01:35:29,760 --> 01:35:34,639
class

01:35:31,119 --> 01:35:38,880
to think if it's worth duplicating codes

01:35:34,639 --> 01:35:41,920
or not and you have to design

01:35:38,880 --> 01:35:43,360
and this is this is particularly

01:35:41,920 --> 01:35:45,119
important this is parliament in

01:35:43,360 --> 01:35:46,159
object-oriented programming languages

01:35:45,119 --> 01:35:48,000
because

01:35:46,159 --> 01:35:49,760
what you have object-oriented

01:35:48,000 --> 01:35:53,280
programming languages are

01:35:49,760 --> 01:35:55,280
all about uh

01:35:53,280 --> 01:35:57,360
this is interesting this is exactly what

01:35:55,280 --> 01:35:59,280
uh the creator of small talk one of the

01:35:57,360 --> 01:36:01,360
creators small talk

01:35:59,280 --> 01:36:03,920
said about it small talk is is one of

01:36:01,360 --> 01:36:07,360
the languages python derives from

01:36:03,920 --> 01:36:10,080
comes from his head the initial idea of

01:36:07,360 --> 01:36:13,280
object oriented was to create

01:36:10,080 --> 01:36:16,639
a computer in a computer so

01:36:13,280 --> 01:36:17,360
an object is a mini computer it has data

01:36:16,639 --> 01:36:21,440
memory

01:36:17,360 --> 01:36:24,480
and methods like a cpu that does

01:36:21,440 --> 01:36:25,760
things and you have many objects in your

01:36:24,480 --> 01:36:28,800
software that

01:36:25,760 --> 01:36:31,199
interact they collaborate

01:36:28,800 --> 01:36:32,880
and this requires this design because if

01:36:31,199 --> 01:36:36,000
you don't design it

01:36:32,880 --> 01:36:37,040
it's a mess how many times you end with

01:36:36,000 --> 01:36:39,679
a mess

01:36:37,040 --> 01:36:40,719
a mess of methods that are in the wrong

01:36:39,679 --> 01:36:42,880
objects

01:36:40,719 --> 01:36:44,560
a mess of objects inheriting from

01:36:42,880 --> 01:36:44,880
objects they shouldn't inherit from and

01:36:44,560 --> 01:36:47,760
they

01:36:44,880 --> 01:36:48,239
and then you are like oh why you know i

01:36:47,760 --> 01:36:52,080
should have

01:36:48,239 --> 01:36:54,719
used composition i told you um you know

01:36:52,080 --> 01:36:56,560
so this is what i mean and then now i i

01:36:54,719 --> 01:36:57,199
stopped rambling but this is important

01:36:56,560 --> 01:36:59,119
uh

01:36:57,199 --> 01:37:01,760
you have to design yourself to have to

01:36:59,119 --> 01:37:04,239
think about it and this is why i believe

01:37:01,760 --> 01:37:06,880
a perfect companion to the

01:37:04,239 --> 01:37:10,159
object-oriented programming is the tdd

01:37:06,880 --> 01:37:13,199
methodology so testing tdd allows you

01:37:10,159 --> 01:37:13,920
at any time to redesign your application

01:37:13,199 --> 01:37:16,400
to

01:37:13,920 --> 01:37:18,080
stop and think as i'd like to say you

01:37:16,400 --> 01:37:21,280
know stop and think

01:37:18,080 --> 01:37:22,800
is what i'm doing correct can i try

01:37:21,280 --> 01:37:23,920
something different can i try to

01:37:22,800 --> 01:37:26,159
reorganize

01:37:23,920 --> 01:37:27,520
everything you know and and come up with

01:37:26,159 --> 01:37:30,320
a better

01:37:27,520 --> 01:37:32,320
a better solution that does the same

01:37:30,320 --> 01:37:36,000
refactoring

01:37:32,320 --> 01:37:37,679
does the same it's the behavior meaning

01:37:36,000 --> 01:37:39,520
the important part is the behavior i

01:37:37,679 --> 01:37:42,400
mean you see this repeats

01:37:39,520 --> 01:37:43,840
itself at a larger scale stop i stopped

01:37:42,400 --> 01:37:47,040
running sorry i'm i'm

01:37:43,840 --> 01:37:48,560
chatting too much uh it's time let me

01:37:47,040 --> 01:37:50,239
let me see there's a question there's a

01:37:48,560 --> 01:37:50,800
three three minutes so what does the

01:37:50,239 --> 01:37:54,320
super

01:37:50,800 --> 01:37:54,880
calling the close function does oh sorry

01:37:54,320 --> 01:37:57,920
okay

01:37:54,880 --> 01:38:02,239
joseph i'm answering now so

01:37:57,920 --> 01:38:04,800
what does it do um i want to close

01:38:02,239 --> 01:38:05,679
the security lift so what i want to do

01:38:04,800 --> 01:38:07,679
is to say

01:38:05,679 --> 01:38:09,280
so let me let me write it properly i

01:38:07,679 --> 01:38:13,199
want to i would say

01:38:09,280 --> 01:38:13,199
self dot closed e

01:38:14,000 --> 01:38:22,560
self dot close close on our self

01:38:17,760 --> 01:38:25,840
status equal

01:38:22,560 --> 01:38:29,280
close this is what i i would

01:38:25,840 --> 01:38:30,400
do because this is what's closing the

01:38:29,280 --> 01:38:32,480
lift means right

01:38:30,400 --> 01:38:34,239
setting the status to close and then

01:38:32,480 --> 01:38:37,520
since this is a security lift

01:38:34,239 --> 01:38:40,000
i'm also setting the locked okay so this

01:38:37,520 --> 01:38:43,440
is exactly the same thing that happened

01:38:40,000 --> 01:38:45,600
here um you know sub-status open

01:38:43,440 --> 01:38:47,600
and then i repeat i replace it with

01:38:45,600 --> 01:38:50,159
super open because

01:38:47,600 --> 01:38:50,800
this is perfectly fine okay this works

01:38:50,159 --> 01:38:54,239
done

01:38:50,800 --> 01:38:55,920
job done but then the ocd programmer you

01:38:54,239 --> 01:38:58,719
know comes in and says yeah you know

01:38:55,920 --> 01:39:01,840
what self status equal closed

01:38:58,719 --> 01:39:03,440
is exactly what you have here

01:39:01,840 --> 01:39:05,520
come on it's the same thing why are you

01:39:03,440 --> 01:39:07,920
duplicating code you're bad programmer

01:39:05,520 --> 01:39:09,280
right you are evil the source of even in

01:39:07,920 --> 01:39:12,320
the world

01:39:09,280 --> 01:39:13,040
so this is why i go here and i'm joking

01:39:12,320 --> 01:39:16,080
about the evil

01:39:13,040 --> 01:39:19,119
in the world um i

01:39:16,080 --> 01:39:22,960
i just say close and this

01:39:19,119 --> 01:39:27,840
is the way i avoid the repetition

01:39:22,960 --> 01:39:27,840
of the code joseph is it's clear

01:39:30,800 --> 01:39:34,159
yeah there's a there's some luck so

01:39:32,480 --> 01:39:34,880
probably he would answer in a second

01:39:34,159 --> 01:39:39,119
okay it's

01:39:34,880 --> 01:39:41,520
time for a break so um

01:39:39,119 --> 01:39:42,320
well see you later i'm gonna well thank

01:39:41,520 --> 01:39:45,760
you kojo

01:39:42,320 --> 01:39:48,239
he just shared the repository uh soon

01:39:45,760 --> 01:39:50,000
50 minutes for the polymorphism ping me

01:39:48,239 --> 01:39:55,840
in the chat if you have questions

01:39:50,000 --> 01:39:55,840
thank you

01:40:00,880 --> 01:40:08,159
great hi everybody welcome back for the

01:40:03,840 --> 01:40:09,119
third and final part of the workshop we

01:40:08,159 --> 01:40:12,560
are on time

01:40:09,119 --> 01:40:14,239
it's we're doing well so i i swear i

01:40:12,560 --> 01:40:17,520
will finish for

01:40:14,239 --> 01:40:20,400
2 p.m that will be

01:40:17,520 --> 01:40:21,040
writing time um i was looking at this

01:40:20,400 --> 01:40:24,320
interesting

01:40:21,040 --> 01:40:28,000
article that rob shared on the

01:40:24,320 --> 01:40:31,360
chat thank you rob it's very interesting

01:40:28,000 --> 01:40:34,080
um it's a bit outside the scope of this

01:40:31,360 --> 01:40:36,480
workshop but it discusses default

01:40:34,080 --> 01:40:38,719
arguments and immutability

01:40:36,480 --> 01:40:40,800
uh that's very interesting it also shows

01:40:38,719 --> 01:40:42,320
you something that will happen in python

01:40:40,800 --> 01:40:45,520
probably

01:40:42,320 --> 01:40:47,679
with a pap pp um

01:40:45,520 --> 01:40:49,199
non-aware operators which is very

01:40:47,679 --> 01:40:53,040
interesting read it

01:40:49,199 --> 01:40:54,320
and actually i reminded me that i had

01:40:53,040 --> 01:40:57,760
the very same

01:40:54,320 --> 01:41:01,199
uh problem exactly this day

01:40:57,760 --> 01:41:03,679
so the day before actually and this

01:41:01,199 --> 01:41:06,239
is the article that i wrote on my blog

01:41:03,679 --> 01:41:07,840
exactly to expose that bug

01:41:06,239 --> 01:41:09,520
so that's that's interesting because

01:41:07,840 --> 01:41:11,440
when you read things and you think all

01:41:09,520 --> 01:41:14,480
this happened to me so many times

01:41:11,440 --> 01:41:15,119
so dangerous okay enough rambling about

01:41:14,480 --> 01:41:18,320
my

01:41:15,119 --> 01:41:19,760
bags uh let's talk about polymorphism is

01:41:18,320 --> 01:41:23,520
the third pillar

01:41:19,760 --> 01:41:25,920
in object oriented so again um

01:41:23,520 --> 01:41:25,920
sorry

01:41:26,960 --> 01:41:35,199
we have um encapsulation

01:41:30,880 --> 01:41:39,040
we put data and functions together

01:41:35,199 --> 01:41:42,400
in classes in objects we have

01:41:39,040 --> 01:41:44,840
a delegation i hopefully

01:41:42,400 --> 01:41:46,000
convinced you that is not just

01:41:44,840 --> 01:41:49,119
inheritance

01:41:46,000 --> 01:41:51,920
however that's the thing

01:41:49,119 --> 01:41:54,800
the connection between classes now we

01:41:51,920 --> 01:41:55,679
have polymorphism um polymorphism comes

01:41:54,800 --> 01:41:58,880
that the words

01:41:55,679 --> 01:41:59,679
polymorphic comes from greek and it

01:41:58,880 --> 01:42:03,760
means

01:41:59,679 --> 01:42:07,520
it has many shapes okay polymorphic

01:42:03,760 --> 01:42:07,920
uh what does what does have many shapes

01:42:07,520 --> 01:42:10,560
let's

01:42:07,920 --> 01:42:11,440
let's look at this uh let's just start

01:42:10,560 --> 01:42:14,239
discussing

01:42:11,440 --> 01:42:14,800
uh python's type system because we

01:42:14,239 --> 01:42:16,719
discussed

01:42:14,800 --> 01:42:18,080
we are talking about type basically okay

01:42:16,719 --> 01:42:21,280
this workshop is about

01:42:18,080 --> 01:42:21,679
type what is the type system in python

01:42:21,280 --> 01:42:24,800
well

01:42:21,679 --> 01:42:26,239
uh we saw something at the very

01:42:24,800 --> 01:42:28,719
beginning that's i

01:42:26,239 --> 01:42:30,880
coming from sea and coming from

01:42:28,719 --> 01:42:33,040
languages you know assembly and see

01:42:30,880 --> 01:42:34,560
low-level languages found very

01:42:33,040 --> 01:42:35,840
surprising at the very beginning i'm

01:42:34,560 --> 01:42:43,840
talking about 10 years

01:42:35,840 --> 01:42:43,840
20 years ago now um

01:42:44,159 --> 01:42:49,119
yes so i'm gonna answer you later um

01:42:46,960 --> 01:42:52,110
sorry i was checking the charts

01:42:49,119 --> 01:42:54,719
what i found surprising was these um

01:42:52,110 --> 01:42:57,679
[Music]

01:42:54,719 --> 01:42:58,080
if in python i write a equal five let me

01:42:57,679 --> 01:43:00,639
run

01:42:58,080 --> 01:43:02,800
all this says every time i forget to do

01:43:00,639 --> 01:43:02,800
it

01:43:04,480 --> 01:43:11,119
yes thank you okay so if i say a

01:43:07,840 --> 01:43:14,880
equal five um well this works

01:43:11,119 --> 01:43:17,679
type of a isn't the a has a

01:43:14,880 --> 01:43:19,280
place in memory okay it's a very low

01:43:17,679 --> 01:43:20,480
place by the way this is a fun fact

01:43:19,280 --> 01:43:23,600
about python the

01:43:20,480 --> 01:43:25,840
numbers are pre-allocated in python so

01:43:23,600 --> 01:43:26,639
some of the integers because they are

01:43:25,840 --> 01:43:30,239
they're used

01:43:26,639 --> 01:43:33,119
a lot okay so this is a very low

01:43:30,239 --> 01:43:33,840
region in memory but then when you're

01:43:33,119 --> 01:43:35,520
right

01:43:33,840 --> 01:43:37,760
this is a fun fact doesn't have anything

01:43:35,520 --> 01:43:40,320
to do with polymorphism

01:43:37,760 --> 01:43:41,679
then when you write a equal five five is

01:43:40,320 --> 01:43:45,600
in a string right

01:43:41,679 --> 01:43:48,800
uh again it works type of a is a string

01:43:45,600 --> 01:43:51,280
now and the id is different

01:43:48,800 --> 01:43:53,040
and this surprised me it might not

01:43:51,280 --> 01:43:55,600
surprise you but it surprised the

01:43:53,040 --> 01:43:56,719
you know the c programmer that i was i

01:43:55,600 --> 01:44:01,040
still am

01:43:56,719 --> 01:44:03,760
uh it's like how how comes a

01:44:01,040 --> 01:44:06,000
changes nature a is a variable contains

01:44:03,760 --> 01:44:08,400
an integer why does it suddenly

01:44:06,000 --> 01:44:10,400
contain a string why is why does it

01:44:08,400 --> 01:44:13,119
change the type

01:44:10,400 --> 01:44:14,639
so what i discovered what i discovered

01:44:13,119 --> 01:44:16,880
yes i discovered about

01:44:14,639 --> 01:44:18,239
this public domain right it's not that i

01:44:16,880 --> 01:44:21,280
invented anything

01:44:18,239 --> 01:44:22,000
um python type system is strong and

01:44:21,280 --> 01:44:24,560
dynamic

01:44:22,000 --> 01:44:25,199
what does it mean a strong type system

01:44:24,560 --> 01:44:28,239
means that

01:44:25,199 --> 01:44:30,880
every variable has a type so if

01:44:28,239 --> 01:44:31,520
a equal 5 and b equal to x then type of

01:44:30,880 --> 01:44:34,560
a is in

01:44:31,520 --> 01:44:35,360
and type of b is string this is not true

01:44:34,560 --> 01:44:38,480
for example

01:44:35,360 --> 01:44:40,480
in i don't know bash bash as in the

01:44:38,480 --> 01:44:43,920
terminal you know like the shell

01:44:40,480 --> 01:44:45,760
that has a programming language and

01:44:43,920 --> 01:44:47,280
everything in bash is basically a string

01:44:45,760 --> 01:44:49,920
okay so

01:44:47,280 --> 01:44:50,400
there is an initial concept of types but

01:44:49,920 --> 01:44:53,600
they are

01:44:50,400 --> 01:44:56,080
there are no real times so in python as

01:44:53,600 --> 01:44:59,199
in javascript as in many other languages

01:44:56,080 --> 01:45:03,119
everything has a type this is

01:44:59,199 --> 01:45:06,560
strong it's dynamic however

01:45:03,119 --> 01:45:10,080
because the type of variables

01:45:06,560 --> 01:45:12,000
changes with the content so in python

01:45:10,080 --> 01:45:13,280
you say a equal five then suddenly the

01:45:12,000 --> 01:45:15,760
type of a is it

01:45:13,280 --> 01:45:16,639
if you say a equal text then the type of

01:45:15,760 --> 01:45:19,840
a changes

01:45:16,639 --> 01:45:21,360
okay so variables are not box immutable

01:45:19,840 --> 01:45:23,760
boxes this is what i mean

01:45:21,360 --> 01:45:24,800
immutable as in the type they contain

01:45:23,760 --> 01:45:27,920
this is true in c

01:45:24,800 --> 01:45:30,080
in c you say int a

01:45:27,920 --> 01:45:32,080
and you say a is a variable of type int

01:45:30,080 --> 01:45:32,480
that's it if you you can't put a string

01:45:32,080 --> 01:45:35,520
in it

01:45:32,480 --> 01:45:38,560
in python you can so

01:45:35,520 --> 01:45:40,719
what does it mean all these for python

01:45:38,560 --> 01:45:42,480
uh for for you as a python programmer

01:45:40,719 --> 01:45:44,560
that in python you can run

01:45:42,480 --> 01:45:45,840
something like this which is a very

01:45:44,560 --> 01:45:49,440
simple

01:45:45,840 --> 01:45:52,800
function that just returns the input

01:45:49,440 --> 01:45:54,800
and it's incredibly powerful it can be

01:45:52,800 --> 01:45:57,199
simple but it can be powerful

01:45:54,800 --> 01:45:58,239
if you think about it this function

01:45:57,199 --> 01:46:02,159
returns

01:45:58,239 --> 01:46:04,320
whatever you give to it whatever

01:46:02,159 --> 01:46:05,520
if a is an integer it restarts the

01:46:04,320 --> 01:46:07,679
integer if it's a

01:46:05,520 --> 01:46:08,800
string it returns a string if you give

01:46:07,679 --> 01:46:10,639
this a

01:46:08,800 --> 01:46:12,639
database connection it returns a

01:46:10,639 --> 01:46:14,880
database connection that that doesn't

01:46:12,639 --> 01:46:16,639
doesn't mean anything for python it just

01:46:14,880 --> 01:46:18,960
says this is an object

01:46:16,639 --> 01:46:21,679
this is why in python we said well this

01:46:18,960 --> 01:46:23,360
is in we express this in python saying

01:46:21,679 --> 01:46:24,960
everything is an object and python is

01:46:23,360 --> 01:46:27,840
just concerned with one type

01:46:24,960 --> 01:46:27,840
object

01:46:28,159 --> 01:46:33,040
this is interesting but what why does it

01:46:31,360 --> 01:46:35,679
have with polymorphism

01:46:33,040 --> 01:46:37,199
well first of all because polymorph is

01:46:35,679 --> 01:46:40,320
many shapes

01:46:37,199 --> 01:46:41,199
and you can see that here a can have

01:46:40,320 --> 01:46:43,520
many shapes

01:46:41,199 --> 01:46:44,719
it can have the shape of an integer can

01:46:43,520 --> 01:46:47,199
have the shape of a

01:46:44,719 --> 01:46:48,719
string can have a shape of a dictionary

01:46:47,199 --> 01:46:52,159
whatever else

01:46:48,719 --> 01:46:55,760
and it works okay this is an initial

01:46:52,159 --> 01:46:59,199
hint of what is going on let's

01:46:55,760 --> 01:47:02,800
look uh in detail about uh polymorphism

01:46:59,199 --> 01:47:06,320
let's do this so if i write

01:47:02,800 --> 01:47:08,880
five plus six it works okay yeah

01:47:06,320 --> 01:47:10,080
great we know that python is works as a

01:47:08,880 --> 01:47:13,600
calculator

01:47:10,080 --> 01:47:16,480
we can also sum floats

01:47:13,600 --> 01:47:18,400
with the same operator plus we can sum

01:47:16,480 --> 01:47:20,159
strings

01:47:18,400 --> 01:47:22,080
which was surprising when i first

01:47:20,159 --> 01:47:25,360
started using python was like oh finally

01:47:22,080 --> 01:47:25,360
a language that can you know

01:47:25,520 --> 01:47:32,159
merge strings easily it works with

01:47:28,960 --> 01:47:35,040
lists and with tuples but

01:47:32,159 --> 01:47:36,239
it doesn't work with dictionaries that's

01:47:35,040 --> 01:47:39,440
interesting

01:47:36,239 --> 01:47:42,639
because plus is

01:47:39,440 --> 01:47:46,560
polymorphic it has many shapes here

01:47:42,639 --> 01:47:50,080
it's some an addition between integers

01:47:46,560 --> 01:47:50,480
here is an addition between floats and

01:47:50,080 --> 01:47:52,159
you

01:47:50,480 --> 01:47:53,840
might think okay these are just numbers

01:47:52,159 --> 01:47:56,000
it's the same thing right

01:47:53,840 --> 01:47:58,080
yeah but this works with strings and

01:47:56,000 --> 01:48:00,480
lists all these additions

01:47:58,080 --> 01:48:02,239
have a different meaning i mean it's

01:48:00,480 --> 01:48:05,600
addition what does it mean you know

01:48:02,239 --> 01:48:06,880
to add strings and

01:48:05,600 --> 01:48:08,800
actually it doesn't work with

01:48:06,880 --> 01:48:10,400
dictionaries because the addition

01:48:08,800 --> 01:48:13,360
between dictionaries is not

01:48:10,400 --> 01:48:15,280
defined we we can define it okay but

01:48:13,360 --> 01:48:15,840
it's not defined by default in python

01:48:15,280 --> 01:48:17,920
because

01:48:15,840 --> 01:48:18,960
the idea is you know what happens if i

01:48:17,920 --> 01:48:21,360
have the key c

01:48:18,960 --> 01:48:22,639
here and i have the key c here what's

01:48:21,360 --> 01:48:25,600
what's

01:48:22,639 --> 01:48:27,600
the final result not defined okay so it

01:48:25,600 --> 01:48:30,639
doesn't work

01:48:27,600 --> 01:48:31,280
so it's polymorphic but not for every

01:48:30,639 --> 01:48:36,159
type

01:48:31,280 --> 01:48:36,159
okay let's go on let's do cats then

01:48:36,480 --> 01:48:42,800
len of just a sentence it was

01:48:39,760 --> 01:48:43,360
it gives me the length of this string it

01:48:42,800 --> 01:48:46,560
works

01:48:43,360 --> 01:48:48,880
with lists and it works

01:48:46,560 --> 01:48:50,400
with dictionaries this time or finally

01:48:48,880 --> 01:48:50,800
something that works with dictions as

01:48:50,400 --> 01:48:52,639
well

01:48:50,800 --> 01:48:54,400
counts the keys or the values is the

01:48:52,639 --> 01:48:56,080
same number

01:48:54,400 --> 01:48:58,400
unfortunately it doesn't work with

01:48:56,080 --> 01:49:01,760
integers why

01:48:58,400 --> 01:49:05,920
because integers don't have a length

01:49:01,760 --> 01:49:09,199
okay so what is the length of 123

01:49:05,920 --> 01:49:10,320
so the no not defined and it's

01:49:09,199 --> 01:49:13,199
interesting what

01:49:10,320 --> 01:49:14,320
python says here because this was a hint

01:49:13,199 --> 01:49:17,119
for me to understand

01:49:14,320 --> 01:49:19,199
what was going on behind the scenes

01:49:17,119 --> 01:49:22,320
object of type int

01:49:19,199 --> 01:49:24,639
has no lan and i thought

01:49:22,320 --> 01:49:25,679
at the time well wait wait a minute i

01:49:24,639 --> 01:49:29,119
didn't ask

01:49:25,679 --> 01:49:32,400
for len of the object i i asked for

01:49:29,119 --> 01:49:33,360
len off you know like as i'm sorry i

01:49:32,400 --> 01:49:37,119
said the same thing

01:49:33,360 --> 01:49:39,199
i i didn't i i didn't run the function

01:49:37,119 --> 01:49:41,199
that belongs to the object i just run a

01:49:39,199 --> 01:49:44,159
function on the object

01:49:41,199 --> 01:49:46,000
but yeah this is what python says so

01:49:44,159 --> 01:49:49,520
what's going on behind the scenes

01:49:46,000 --> 01:49:51,119
uh going a bit further into the

01:49:49,520 --> 01:49:54,239
polymorphism

01:49:51,119 --> 01:49:58,080
what happens is that length of

01:49:54,239 --> 01:50:01,119
s as an string works because

01:49:58,080 --> 01:50:04,480
s as a string has a dunder len

01:50:01,119 --> 01:50:08,080
method so when you when you say len

01:50:04,480 --> 01:50:11,199
of these this goes into

01:50:08,080 --> 01:50:14,880
the just a sentence object and

01:50:11,199 --> 01:50:17,760
runs automatically this dandelion method

01:50:14,880 --> 01:50:20,159
the same for lists the same for

01:50:17,760 --> 01:50:22,400
dictionaries

01:50:20,159 --> 01:50:25,440
why doesn't it work for integers because

01:50:22,400 --> 01:50:29,280
integers don't have the dandelion

01:50:25,440 --> 01:50:31,520
method so

01:50:29,280 --> 01:50:33,599
let's recap a bit before we give the

01:50:31,520 --> 01:50:36,880
final solution how polymorphism

01:50:33,599 --> 01:50:39,679
works when you run something like this

01:50:36,880 --> 01:50:41,679
when you run something like this there

01:50:39,679 --> 01:50:44,960
is something that python does

01:50:41,679 --> 01:50:48,320
using the methods of the objects

01:50:44,960 --> 01:50:52,000
as in len of just a sentence is

01:50:48,320 --> 01:50:55,840
len of belongs

01:50:52,000 --> 01:50:58,480
to the the object okay

01:50:55,840 --> 01:50:59,599
let's look at these polymorphism is

01:50:58,480 --> 01:51:02,719
based on delegation

01:50:59,599 --> 01:51:07,040
okay so when i run one two three

01:51:02,719 --> 01:51:09,920
as a list dot done add four five 456

01:51:07,040 --> 01:51:11,280
i am using a method you you know this

01:51:09,920 --> 01:51:14,320
right you are delegating

01:51:11,280 --> 01:51:16,480
to the list the addition but this is

01:51:14,320 --> 01:51:19,440
exactly what happens when you do

01:51:16,480 --> 01:51:20,320
i should have i should have written here

01:51:19,440 --> 01:51:23,760
it here

01:51:20,320 --> 01:51:26,560
this is what happens when you do this

01:51:23,760 --> 01:51:26,560
four five six

01:51:27,679 --> 01:51:33,440
this plus delegates the addition

01:51:31,520 --> 01:51:35,199
to one through three the plus doesn't

01:51:33,440 --> 01:51:36,960
know anything basically plus is not

01:51:35,199 --> 01:51:39,760
implemented in python

01:51:36,960 --> 01:51:40,480
there is no code in the python codebase

01:51:39,760 --> 01:51:43,199
that says

01:51:40,480 --> 01:51:44,719
plus does this with integers plus does

01:51:43,199 --> 01:51:48,000
this with pictures not at

01:51:44,719 --> 01:51:51,199
all integers know how to be summed

01:51:48,000 --> 01:51:52,480
uh lists know how to be summed okay or

01:51:51,199 --> 01:51:55,840
added

01:51:52,480 --> 01:51:59,280
um i hope this is clear look at this

01:51:55,840 --> 01:52:00,000
dear of one two three look what we have

01:51:59,280 --> 01:52:03,840
inside

01:52:00,000 --> 01:52:06,159
a list add then we have eq

01:52:03,840 --> 01:52:07,440
which is what python calls when you do

01:52:06,159 --> 01:52:10,239
equal equal

01:52:07,440 --> 01:52:11,119
we have g e which is what python calls

01:52:10,239 --> 01:52:14,639
when you

01:52:11,119 --> 01:52:15,440
use the greater than and so on and so

01:52:14,639 --> 01:52:18,719
forth mal

01:52:15,440 --> 01:52:20,400
for the multiplication many things okay

01:52:18,719 --> 01:52:21,760
plus all the methods that you already

01:52:20,400 --> 01:52:24,800
know

01:52:21,760 --> 01:52:26,480
so when for example you say one

01:52:24,800 --> 01:52:27,920
in one two three this is something you

01:52:26,480 --> 01:52:30,080
can do in python right

01:52:27,920 --> 01:52:31,840
and what works right it gives you two

01:52:30,080 --> 01:52:35,040
what happens behind the scenes

01:52:31,840 --> 01:52:38,080
that's python delegates this to

01:52:35,040 --> 01:52:38,719
the list saying one two three then the

01:52:38,080 --> 01:52:44,000
contains

01:52:38,719 --> 01:52:46,400
of one which gives you true

01:52:44,000 --> 01:52:48,480
one thing that i have to say about

01:52:46,400 --> 01:52:49,840
python i like the language so much i'm a

01:52:48,480 --> 01:52:52,639
python programmer i've been

01:52:49,840 --> 01:52:53,199
using it for 20 years it's so amazing

01:52:52,639 --> 01:52:56,239
but

01:52:53,199 --> 01:52:56,960
there is one thing i don't like but a

01:52:56,239 --> 01:53:01,119
couple

01:52:56,960 --> 01:53:03,760
but one thing in particular there is no

01:53:01,119 --> 01:53:05,679
direct connection a direct connection

01:53:03,760 --> 01:53:09,520
sorry

01:53:05,679 --> 01:53:13,520
between operators like len

01:53:09,520 --> 01:53:16,239
plus in and the method

01:53:13,520 --> 01:53:18,000
the dunder method used for them so for

01:53:16,239 --> 01:53:20,960
example len

01:53:18,000 --> 01:53:22,159
goes into dandelion so you think okay

01:53:20,960 --> 01:53:26,239
makes sense right len

01:53:22,159 --> 01:53:30,320
dunderland great a plus goes into

01:53:26,239 --> 01:53:33,679
than the ad she's like okay plus ads

01:53:30,320 --> 01:53:36,560
makes some sense okay in

01:53:33,679 --> 01:53:38,840
goes in contains which is like okay

01:53:36,560 --> 01:53:42,400
really

01:53:38,840 --> 01:53:42,960
um in scala for example i'm a big fan of

01:53:42,400 --> 01:53:46,239
scala

01:53:42,960 --> 01:53:48,560
uh it's a great language uh probably

01:53:46,239 --> 01:53:50,480
the best match between functional and

01:53:48,560 --> 01:53:54,880
object-oriented programming that i i saw

01:53:50,480 --> 01:53:57,840
in my life is amazing um

01:53:54,880 --> 01:53:59,199
in scala you have that plus maps to the

01:53:57,840 --> 01:54:02,639
method called

01:53:59,199 --> 01:54:06,000
plus plus as in the the symbol

01:54:02,639 --> 01:54:08,400
you know uh so yeah

01:54:06,000 --> 01:54:10,560
i just just to mention i wanted to

01:54:08,400 --> 01:54:12,960
ramble a bit about python probably

01:54:10,560 --> 01:54:14,880
uh against um there is no connection

01:54:12,960 --> 01:54:18,000
between these two things so expect

01:54:14,880 --> 01:54:19,599
um when you implement operators you have

01:54:18,000 --> 01:54:20,800
to go and check the documentation to

01:54:19,599 --> 01:54:25,040
discover you know

01:54:20,800 --> 01:54:27,119
what is gt what is ga what is eq mal

01:54:25,040 --> 01:54:29,119
all these things okay so keep it in mind

01:54:27,119 --> 01:54:30,639
okay enough about that

01:54:29,119 --> 01:54:33,360
i'm gonna show you something and then we

01:54:30,639 --> 01:54:36,000
have a lot of exercises for polymorphism

01:54:33,360 --> 01:54:39,119
because the this part of the

01:54:36,000 --> 01:54:42,000
lesson is partly really the exercises

01:54:39,119 --> 01:54:43,280
polymorphism in action why why is it

01:54:42,000 --> 01:54:47,280
useful to

01:54:43,280 --> 01:54:49,119
have a polymorphic language like that

01:54:47,280 --> 01:54:50,320
i want to create an infinite number

01:54:49,119 --> 01:54:52,239
container

01:54:50,320 --> 01:54:53,679
what is an infinite number container you

01:54:52,239 --> 01:54:56,880
know i can do this right

01:54:53,679 --> 01:54:59,679
one in one two three and it's two

01:54:56,880 --> 01:55:00,960
but if i say four is in one two three it

01:54:59,679 --> 01:55:03,679
doesn't work

01:55:00,960 --> 01:55:04,239
because four is not in one two three one

01:55:03,679 --> 01:55:07,440
two

01:55:04,239 --> 01:55:10,400
three i want to create a container

01:55:07,440 --> 01:55:11,920
that contains an infinite number of

01:55:10,400 --> 01:55:15,360
numbers

01:55:11,920 --> 01:55:17,599
let's see how i can do this i define a

01:55:15,360 --> 01:55:20,080
class number container

01:55:17,599 --> 01:55:21,360
by the final in it it's just a matter of

01:55:20,080 --> 01:55:24,719
saying for example are

01:55:21,360 --> 01:55:26,800
an infinite container of even or odd

01:55:24,719 --> 01:55:29,679
numbers for example right so i

01:55:26,800 --> 01:55:30,320
i just have a flag here even just sets

01:55:29,679 --> 01:55:33,360
of lock

01:55:30,320 --> 01:55:36,320
that's it then i define

01:55:33,360 --> 01:55:37,119
dander contains you know the data

01:55:36,320 --> 01:55:40,960
contains

01:55:37,119 --> 01:55:42,159
is linked within right what does dander

01:55:40,960 --> 01:55:46,639
contain

01:55:42,159 --> 01:55:50,320
to contains do if self even is true

01:55:46,639 --> 01:55:53,760
this is gonna return if the element

01:55:50,320 --> 01:55:56,480
that i am considering is true

01:55:53,760 --> 01:55:57,520
so this is basically a way to say is

01:55:56,480 --> 01:56:00,719
element

01:55:57,520 --> 01:56:03,280
even or odd

01:56:00,719 --> 01:56:04,000
but look at what happens i hope this is

01:56:03,280 --> 01:56:08,159
clear

01:56:04,000 --> 01:56:12,080
what look at what happens if i use it

01:56:08,159 --> 01:56:14,960
so i define this i instantiate it

01:56:12,080 --> 01:56:16,560
even is number container even is true by

01:56:14,960 --> 01:56:20,080
default

01:56:16,560 --> 01:56:23,599
two in even yes two is in even

01:56:20,080 --> 01:56:25,679
because two goes here contains

01:56:23,599 --> 01:56:26,960
and then it says if self even so like

01:56:25,679 --> 01:56:29,679
two is

01:56:26,960 --> 01:56:31,840
so sorry um it returns sorry

01:56:29,679 --> 01:56:35,119
self-evidence 2 it returns

01:56:31,840 --> 01:56:39,199
2 divided by 2 equal equals 0.

01:56:35,119 --> 01:56:42,639
that's true so 2 is even 1 2 3

01:56:39,199 --> 01:56:45,840
1 2 4 is even this number that i

01:56:42,639 --> 01:56:48,000
i'm not gonna read it is even

01:56:45,840 --> 01:56:49,760
yes this is my infinite number

01:56:48,000 --> 01:56:52,080
containers you see what i

01:56:49,760 --> 01:56:53,440
realized i realized something in python

01:56:52,080 --> 01:56:57,040
that contains

01:56:53,440 --> 01:57:00,400
all the even number numbers even though

01:56:57,040 --> 01:57:02,800
it doesn't really contain them okay

01:57:00,400 --> 01:57:03,679
this is polymorphism this behaves like a

01:57:02,800 --> 01:57:07,199
container

01:57:03,679 --> 01:57:10,159
but doesn't contain them for for real

01:57:07,199 --> 01:57:12,000
okay so obviously this works with odd

01:57:10,159 --> 01:57:13,840
numbers they are not contained i can

01:57:12,000 --> 01:57:15,440
define the odd container and

01:57:13,840 --> 01:57:17,840
five is it not okay it's the same thing

01:57:15,440 --> 01:57:19,119
but what i wanted to point out before we

01:57:17,840 --> 01:57:22,639
move to the exercises

01:57:19,119 --> 01:57:23,520
is remember what i said at the very

01:57:22,639 --> 01:57:26,880
beginning

01:57:23,520 --> 01:57:30,480
the behavioral meaning is important

01:57:26,880 --> 01:57:34,080
so this number container might be

01:57:30,480 --> 01:57:35,199
it is a container but internally the

01:57:34,080 --> 01:57:37,280
structure of this thing

01:57:35,199 --> 01:57:38,880
is is not a container because the

01:57:37,280 --> 01:57:42,000
numbers are not there

01:57:38,880 --> 01:57:43,760
there's just a logic but the behavior

01:57:42,000 --> 01:57:45,520
is important and whenever i need

01:57:43,760 --> 01:57:46,320
something that contains all the numbers

01:57:45,520 --> 01:57:48,960
i have it

01:57:46,320 --> 01:57:50,880
okay i hope this must make sense i'm

01:57:48,960 --> 01:57:52,880
gonna say something about

01:57:50,880 --> 01:57:54,960
behavior and meaning at the at the very

01:57:52,880 --> 01:57:57,199
end um

01:57:54,960 --> 01:57:59,360
for the time being let's move to the

01:57:57,199 --> 01:58:00,480
exercises i have a lot of them so we

01:57:59,360 --> 01:58:04,480
have half an hour

01:58:00,480 --> 01:58:06,800
i'm gonna split it into uh sessions

01:58:04,480 --> 01:58:08,560
maybe we can just discuss about the last

01:58:06,800 --> 01:58:11,599
exercises i don't know

01:58:08,560 --> 01:58:12,639
so the first exercises are as i said

01:58:11,599 --> 01:58:16,560
there are many

01:58:12,639 --> 01:58:17,119
um first exercises are number one create

01:58:16,560 --> 01:58:20,239
a class

01:58:17,119 --> 01:58:21,040
custom integer so just create it don't

01:58:20,239 --> 01:58:24,080
ignore it for

01:58:21,040 --> 01:58:27,360
anything just a class that contains

01:58:24,080 --> 01:58:30,639
an integer as a self value and

01:58:27,360 --> 01:58:32,719
with a dandelion method that returns the

01:58:30,639 --> 01:58:36,719
number of digits of the integer

01:58:32,719 --> 01:58:40,000
so what i mean is five as one digit

01:58:36,719 --> 01:58:42,880
so 12 has two digits 123

01:58:40,000 --> 01:58:43,199
has three digits okay so len of this

01:58:42,880 --> 01:58:46,239
thing

01:58:43,199 --> 01:58:49,679
should return the number of digits

01:58:46,239 --> 01:58:52,960
does len not dunderland but len

01:58:49,679 --> 01:58:54,719
work for instances of the class okay

01:58:52,960 --> 01:58:56,239
there's a hint here convert the integer

01:58:54,719 --> 01:58:59,440
into a string

01:58:56,239 --> 01:59:01,119
try to do it but my point is i want to i

01:58:59,440 --> 01:59:02,880
told you there is no definition

01:59:01,119 --> 01:59:04,159
for the length of an integer right we

01:59:02,880 --> 01:59:07,280
said it before

01:59:04,159 --> 01:59:08,639
i want to define an integer that has a

01:59:07,280 --> 01:59:11,119
length

01:59:08,639 --> 01:59:12,320
so this is what i want you to do to try

01:59:11,119 --> 01:59:15,760
and do

01:59:12,320 --> 01:59:18,719
exercise number two add dander contains

01:59:15,760 --> 01:59:20,080
method to custom integer that returns

01:59:18,719 --> 01:59:23,840
two

01:59:20,080 --> 01:59:27,920
if self value contains the given digit

01:59:23,840 --> 01:59:27,920
does in work for this type

01:59:28,800 --> 01:59:35,280
yes that's the blog post i

01:59:32,159 --> 01:59:38,800
wrote it's a series of six

01:59:35,280 --> 01:59:39,360
posts by the way uh exercise number

01:59:38,800 --> 01:59:42,880
three

01:59:39,360 --> 01:59:43,199
uh try to use string as the str actually

01:59:42,880 --> 01:59:46,080
so

01:59:43,199 --> 01:59:46,639
as a function on an instance of custom

01:59:46,080 --> 01:59:49,920
integer

01:59:46,639 --> 01:59:51,679
like string of c what happens

01:59:49,920 --> 01:59:53,920
how can you return a better string

01:59:51,679 --> 01:59:55,360
representation for example showing the

01:59:53,920 --> 01:59:57,920
actual value so

01:59:55,360 --> 01:59:58,480
try to do these three exercises i'll

01:59:57,920 --> 02:00:00,320
give you

01:59:58,480 --> 02:00:01,599
like five minutes and then gonna commend

02:00:00,320 --> 02:00:04,560
these

02:00:01,599 --> 02:00:07,040
then go on uh chatting a bit about the

02:00:04,560 --> 02:00:13,840
the following exercises and then

02:00:07,040 --> 02:00:13,840
you know wrapping up enjoy the exercises

02:01:06,840 --> 02:01:09,840
so

02:01:21,760 --> 02:01:23,840
you

02:01:48,840 --> 02:01:51,840
uh

02:02:30,840 --> 02:02:33,840
so

02:02:41,040 --> 02:02:47,840
it's too long

02:02:58,840 --> 02:03:01,840
hmm

02:03:03,599 --> 02:03:09,440
so i was asked about encapsulation

02:03:06,800 --> 02:03:10,480
um sorry so why do you think about the

02:03:09,440 --> 02:03:13,520
exercises

02:03:10,480 --> 02:03:17,040
uh was too long to write it so i

02:03:13,520 --> 02:03:20,159
just say it so encapsulation

02:03:17,040 --> 02:03:24,400
is again these um

02:03:20,159 --> 02:03:25,920
you put data and functions together so

02:03:24,400 --> 02:03:28,080
at the very beginning of the workshop i

02:03:25,920 --> 02:03:29,280
show you something which is like you

02:03:28,080 --> 02:03:32,080
have a data like

02:03:29,280 --> 02:03:33,840
a lift and you have a function that

02:03:32,080 --> 02:03:36,000
opens that lift and then you have

02:03:33,840 --> 02:03:38,480
another data a type of data which is a

02:03:36,000 --> 02:03:41,119
security slightly different

02:03:38,480 --> 02:03:43,679
and you have to create another function

02:03:41,119 --> 02:03:45,040
that you call security lift open or open

02:03:43,679 --> 02:03:47,119
security lift

02:03:45,040 --> 02:03:49,280
and you have to remember the connection

02:03:47,119 --> 02:03:52,320
between the two

02:03:49,280 --> 02:03:57,280
in object oriented what we do is to put

02:03:52,320 --> 02:04:00,639
data and functions together so objects

02:03:57,280 --> 02:04:03,920
classes and instances are

02:04:00,639 --> 02:04:06,560
both data and functions so an

02:04:03,920 --> 02:04:08,239
object like lift that we are discussing

02:04:06,560 --> 02:04:09,599
here or the custom integer that you are

02:04:08,239 --> 02:04:12,800
creating

02:04:09,599 --> 02:04:14,000
contains a status contains soy status a

02:04:12,800 --> 02:04:17,440
state

02:04:14,000 --> 02:04:20,400
so data right some data a string

02:04:17,440 --> 02:04:22,239
an integer a dictionary whatever and

02:04:20,400 --> 02:04:26,960
contains the functions

02:04:22,239 --> 02:04:29,760
that work on those values

02:04:26,960 --> 02:04:30,320
and this is revolutionary i mean it's

02:04:29,760 --> 02:04:33,599
not

02:04:30,320 --> 02:04:35,920
it's not anymore in 2020 right it was 40

02:04:33,599 --> 02:04:37,920
years ago

02:04:35,920 --> 02:04:40,400
because at the time people were used to

02:04:37,920 --> 02:04:42,560
say i have a function add that

02:04:40,400 --> 02:04:46,079
has two integers and then i have a

02:04:42,560 --> 02:04:48,560
function add float that adds two floats

02:04:46,079 --> 02:04:49,119
right now we have the integer type and

02:04:48,560 --> 02:04:52,719
the flow

02:04:49,119 --> 02:04:55,520
type they can support the addition

02:04:52,719 --> 02:04:57,360
so this is an encapsulation encapsulate

02:04:55,520 --> 02:05:01,840
means to put together

02:04:57,360 --> 02:05:05,119
okay you know absolutely um

02:05:01,840 --> 02:05:06,480
as for getter setters there are common

02:05:05,119 --> 02:05:08,400
names for

02:05:06,480 --> 02:05:10,719
the idea that when you have an object

02:05:08,400 --> 02:05:14,320
that has data

02:05:10,719 --> 02:05:17,840
you want to get the data so read it and

02:05:14,320 --> 02:05:18,560
write it so what you want to do

02:05:17,840 --> 02:05:22,719
sometimes

02:05:18,560 --> 02:05:25,840
is to change the way you read

02:05:22,719 --> 02:05:28,960
and the way you write so for example

02:05:25,840 --> 02:05:30,400
the the object inside has number as the

02:05:28,960 --> 02:05:35,119
number four

02:05:30,400 --> 02:05:38,000
but when you read it you want to get

02:05:35,119 --> 02:05:39,199
a different number like four times two

02:05:38,000 --> 02:05:42,159
and this is a getter

02:05:39,199 --> 02:05:43,440
because you say i want to get the value

02:05:42,159 --> 02:05:45,679
through a function

02:05:43,440 --> 02:05:47,679
you can do it with properties in python

02:05:45,679 --> 02:05:51,040
so if you don't know about properties

02:05:47,679 --> 02:05:53,360
go and check these properties

02:05:51,040 --> 02:05:54,960
sectors are the same thing so when i

02:05:53,360 --> 02:05:56,880
write something

02:05:54,960 --> 02:05:59,199
i might want to write it in a different

02:05:56,880 --> 02:06:03,199
format like for example let's say

02:05:59,199 --> 02:06:04,239
i have something uh a string that i i

02:06:03,199 --> 02:06:07,360
just set

02:06:04,239 --> 02:06:10,000
but i want to write it in unicode or in

02:06:07,360 --> 02:06:11,520
well this is by default in python 3 but

02:06:10,000 --> 02:06:14,719
i want to write it in a different

02:06:11,520 --> 02:06:16,340
encoding or i have a number and i want

02:06:14,719 --> 02:06:17,440
to write it as a

02:06:16,340 --> 02:06:20,560
[Music]

02:06:17,440 --> 02:06:21,199
multiplication between two prime numbers

02:06:20,560 --> 02:06:23,280
you know like

02:06:21,199 --> 02:06:25,520
all these things so you want to set it

02:06:23,280 --> 02:06:30,239
through a function these are getters

02:06:25,520 --> 02:06:33,920
and setters i hope it's clear

02:06:30,239 --> 02:06:37,280
as for the exercises sorry i i chatted

02:06:33,920 --> 02:06:41,040
the whole time um let me give you

02:06:37,280 --> 02:06:44,719
my uh solution and then can go on

02:06:41,040 --> 02:06:47,360
with the rest uh not this is not the

02:06:44,719 --> 02:06:47,360
right one

02:06:47,840 --> 02:06:59,840
this is the right one

02:07:01,360 --> 02:07:06,960
okay so exercise one was create a class

02:07:04,560 --> 02:07:09,520
custom integer that contains an integer

02:07:06,960 --> 02:07:10,400
as a self value so this is my custom

02:07:09,520 --> 02:07:13,840
integer class

02:07:10,400 --> 02:07:16,400
it just contains a value as you see

02:07:13,840 --> 02:07:17,040
here i said contains an integer set

02:07:16,400 --> 02:07:19,760
value but

02:07:17,040 --> 02:07:21,040
you know it's polymorphic so this

02:07:19,760 --> 02:07:23,280
accepts

02:07:21,040 --> 02:07:24,320
anything so if you pass it a dictionary

02:07:23,280 --> 02:07:26,079
this this

02:07:24,320 --> 02:07:28,400
works this doesn't work but this works

02:07:26,079 --> 02:07:30,239
okay so

02:07:28,400 --> 02:07:32,159
we say that custom integer is

02:07:30,239 --> 02:07:36,159
polymorphic on init

02:07:32,159 --> 02:07:38,480
because it accepts everything anything

02:07:36,159 --> 02:07:41,840
and with a len method than the then

02:07:38,480 --> 02:07:41,840
method that

02:07:43,679 --> 02:07:47,040
that returns the number of digits of the

02:07:46,239 --> 02:07:50,320
integer

02:07:47,040 --> 02:07:52,960
so let's see what happens here tango n

02:07:50,320 --> 02:07:54,159
returns something a bit complicated okay

02:07:52,960 --> 02:07:57,440
so i have the

02:07:54,159 --> 02:07:59,119
value that i stored i

02:07:57,440 --> 02:08:00,880
transform it into a string and then i

02:07:59,119 --> 02:08:03,440
get the length let me show you

02:08:00,880 --> 02:08:04,960
the example so we can easily understand

02:08:03,440 --> 02:08:08,079
what's going on

02:08:04,960 --> 02:08:10,239
so this is c is an instance

02:08:08,079 --> 02:08:11,440
of custom integer and this is the

02:08:10,239 --> 02:08:15,280
integer i have

02:08:11,440 --> 02:08:16,239
one three five seven this becomes value

02:08:15,280 --> 02:08:19,360
and this becomes

02:08:16,239 --> 02:08:23,119
self value so if i go here and i say

02:08:19,360 --> 02:08:27,520
c dot value

02:08:23,119 --> 02:08:30,960
here we go okay so this is this is it

02:08:27,520 --> 02:08:33,760
when i run len of c

02:08:30,960 --> 02:08:36,079
what happens is that python actually

02:08:33,760 --> 02:08:36,079
runs

02:08:37,760 --> 02:08:43,840
okay this is what happens

02:08:40,800 --> 02:08:46,239
and then the len does the following

02:08:43,840 --> 02:08:47,280
converts the value in a string so this

02:08:46,239 --> 02:08:50,239
becomes the string

02:08:47,280 --> 02:08:51,679
one three five seven okay destroying one

02:08:50,239 --> 02:08:55,440
three five seven

02:08:51,679 --> 02:08:59,920
seven and it gives me the length of that

02:08:55,440 --> 02:09:02,480
which is four so suddenly what do i have

02:08:59,920 --> 02:09:02,480
i have

02:09:03,040 --> 02:09:08,800
an integer that has a len

02:09:06,560 --> 02:09:11,280
where i defined the length of the

02:09:08,800 --> 02:09:15,520
integer as the number of digits

02:09:11,280 --> 02:09:18,560
and i provided support for len

02:09:15,520 --> 02:09:20,320
just by adding these dandelion if

02:09:18,560 --> 02:09:23,119
dandelion is not here

02:09:20,320 --> 02:09:24,880
custom integer doesn't work with them

02:09:23,119 --> 02:09:27,920
okay

02:09:24,880 --> 02:09:31,119
this is a very simple example

02:09:27,920 --> 02:09:34,800
but this happens all the time in python

02:09:31,119 --> 02:09:38,159
in many libraries uh i agree with david

02:09:34,800 --> 02:09:40,719
who says it's quite complicated i know

02:09:38,159 --> 02:09:42,159
i don't have the time to you know i

02:09:40,719 --> 02:09:45,360
don't want to bore you to death

02:09:42,159 --> 02:09:46,639
and to keep you all the time or the

02:09:45,360 --> 02:09:48,239
other day you know discussing these

02:09:46,639 --> 02:09:50,000
things this is complicated you have to

02:09:48,239 --> 02:09:52,239
study it you have to dig into it

02:09:50,000 --> 02:09:54,880
i want to give you a glimpse at least of

02:09:52,239 --> 02:09:56,800
what's going on in python

02:09:54,880 --> 02:09:58,639
uh so apologies if it's a bit too

02:09:56,800 --> 02:10:02,320
complicated it's sort of a

02:09:58,639 --> 02:10:02,320
start of the journey and

02:10:02,480 --> 02:10:06,800
add then the contains method to custom

02:10:05,199 --> 02:10:08,880
integer that returns

02:10:06,800 --> 02:10:10,159
true if self value contains the given

02:10:08,880 --> 02:10:13,599
digit so

02:10:10,159 --> 02:10:15,760
okay i add the contents

02:10:13,599 --> 02:10:17,520
and i say well this is very simple

02:10:15,760 --> 02:10:22,320
string of digits

02:10:17,520 --> 02:10:25,040
is in string of self value that's

02:10:22,320 --> 02:10:28,000
good i believe it's a way to say that

02:10:25,040 --> 02:10:30,159
that digit is in that string

02:10:28,000 --> 02:10:31,040
but suddenly look at what happens that

02:10:30,159 --> 02:10:34,560
if i say

02:10:31,040 --> 02:10:37,840
5 in c it works it says 2

02:10:34,560 --> 02:10:40,960
why because 5 goes here digit

02:10:37,840 --> 02:10:43,760
it becomes a string the string 5 as

02:10:40,960 --> 02:10:44,639
a character and the character five is in

02:10:43,760 --> 02:10:48,159
the string

02:10:44,639 --> 02:10:50,239
one three five seven so it's two

02:10:48,159 --> 02:10:51,360
while eight is not in five one three

02:10:50,239 --> 02:10:54,840
five seven

02:10:51,360 --> 02:10:58,000
but look at this this is not actually

02:10:54,840 --> 02:11:01,119
checking if the number five

02:10:58,000 --> 02:11:02,079
is in the number one three five seven i

02:11:01,119 --> 02:11:03,760
changed the

02:11:02,079 --> 02:11:06,320
the meaning of the whole thing and i

02:11:03,760 --> 02:11:10,079
said for my class i define

02:11:06,320 --> 02:11:14,000
in as that digit

02:11:10,079 --> 02:11:17,360
is among the digits of my integer it's

02:11:14,000 --> 02:11:18,480
delegate in delegates to your class so

02:11:17,360 --> 02:11:22,239
the meaning of

02:11:18,480 --> 02:11:25,040
in changes according to what you define

02:11:22,239 --> 02:11:26,000
this is extremely powerful in python

02:11:25,040 --> 02:11:29,520
because

02:11:26,000 --> 02:11:33,679
all the things like lan for loops

02:11:29,520 --> 02:11:36,159
in equal greater than

02:11:33,679 --> 02:11:38,320
less than all these things they depend

02:11:36,159 --> 02:11:41,119
on what you

02:11:38,320 --> 02:11:42,320
class implements not on what python

02:11:41,119 --> 02:11:44,719
decides

02:11:42,320 --> 02:11:45,440
okay i hope if if you go home with this

02:11:44,719 --> 02:11:48,960
in mind

02:11:45,440 --> 02:11:49,520
that's amazing i i i made it my day okay

02:11:48,960 --> 02:11:52,560
it made my

02:11:49,520 --> 02:11:54,880
my day exercise three

02:11:52,560 --> 02:11:56,239
uh just to show you further this uh try

02:11:54,880 --> 02:11:58,480
to use str

02:11:56,239 --> 02:11:59,280
okay on insta so what happens if i use

02:11:58,480 --> 02:12:02,159
str

02:11:59,280 --> 02:12:02,719
this is a way in python to provide a

02:12:02,159 --> 02:12:06,159
string

02:12:02,719 --> 02:12:08,480
representation of anything and the

02:12:06,159 --> 02:12:09,599
standard representation the python gives

02:12:08,480 --> 02:12:12,800
you is

02:12:09,599 --> 02:12:15,280
uh angle braces

02:12:12,800 --> 02:12:16,000
the name the cl the class of the in of

02:12:15,280 --> 02:12:20,000
the object

02:12:16,000 --> 02:12:23,280
and then the position in memory okay

02:12:20,000 --> 02:12:25,520
okay fine is not really useful because

02:12:23,280 --> 02:12:27,119
i might want to see something more i

02:12:25,520 --> 02:12:29,920
want to see the value

02:12:27,119 --> 02:12:30,480
of c maybe to you know to just to tell

02:12:29,920 --> 02:12:32,800
them

02:12:30,480 --> 02:12:34,320
to tell c from the i don't know i want

02:12:32,800 --> 02:12:39,040
to see the value

02:12:34,320 --> 02:12:39,040
so i add this than the str

02:12:41,920 --> 02:12:49,199
sorry i add the thunder str and i say

02:12:46,000 --> 02:12:53,280
super str which is

02:12:49,199 --> 02:12:58,320
the standard thing that python does

02:12:53,280 --> 02:13:00,480
plus classes in you know another string

02:12:58,320 --> 02:13:02,880
that contains the value look at what

02:13:00,480 --> 02:13:04,079
happens see custom integer and then when

02:13:02,880 --> 02:13:08,400
i

02:13:04,079 --> 02:13:10,400
run string of cstr of c i get this

02:13:08,400 --> 02:13:12,639
which contains this part which is the

02:13:10,400 --> 02:13:16,239
one that i added

02:13:12,639 --> 02:13:17,280
so as you can see this this is what i

02:13:16,239 --> 02:13:20,639
wanted to show you

02:13:17,280 --> 02:13:25,520
i am changing the behavior

02:13:20,639 --> 02:13:28,079
of python python is not as powerful as

02:13:25,520 --> 02:13:29,280
lisp if you want to see a language that

02:13:28,079 --> 02:13:33,199
is really

02:13:29,280 --> 02:13:35,119
really incredibly powerful learn lisp i

02:13:33,199 --> 02:13:36,880
i believe it's worth learning lisp

02:13:35,119 --> 02:13:37,920
because it gives you a completely

02:13:36,880 --> 02:13:40,639
different

02:13:37,920 --> 02:13:41,119
perspective on programming that's python

02:13:40,639 --> 02:13:44,560
java

02:13:41,119 --> 02:13:46,560
script or rust or whatever doesn't okay

02:13:44,560 --> 02:13:48,719
so this is completely different

02:13:46,560 --> 02:13:50,800
it's interesting for you maybe not not

02:13:48,719 --> 02:13:52,480
useful for your job i don't know but

02:13:50,800 --> 02:13:54,639
it's it's useful for your career for

02:13:52,480 --> 02:13:58,639
your mindset okay

02:13:54,639 --> 02:14:01,040
uh in lisp you can basically change

02:13:58,639 --> 02:14:02,560
everything the the language is defined

02:14:01,040 --> 02:14:05,599
in in the language itself

02:14:02,560 --> 02:14:08,800
it's it's mind-blowing but

02:14:05,599 --> 02:14:10,800
in python you can do something very

02:14:08,800 --> 02:14:13,119
no maybe not the same but very similar

02:14:10,800 --> 02:14:15,280
so you can change the behavior of the

02:14:13,119 --> 02:14:16,320
language according to what you define in

02:14:15,280 --> 02:14:19,199
your classes that's it

02:14:16,320 --> 02:14:20,320
go home with this and since we have 10

02:14:19,199 --> 02:14:23,199
minutes

02:14:20,320 --> 02:14:24,239
i'm gonna run through the exercises four

02:14:23,199 --> 02:14:27,440
to nine a bit

02:14:24,239 --> 02:14:28,159
and showing you something uh you are

02:14:27,440 --> 02:14:30,079
free to

02:14:28,159 --> 02:14:31,840
revisit the workshop whenever you want

02:14:30,079 --> 02:14:32,880
so that you have the code so feel free

02:14:31,840 --> 02:14:35,280
to go and

02:14:32,880 --> 02:14:36,079
and try to do the exercises okay i want

02:14:35,280 --> 02:14:38,840
to show you

02:14:36,079 --> 02:14:41,040
what uh what the point of the exercises

02:14:38,840 --> 02:14:44,639
is

02:14:41,040 --> 02:14:47,840
so here the exercise asks you for

02:14:44,639 --> 02:14:49,199
to define the class shapes list which is

02:14:47,840 --> 02:14:52,079
this one

02:14:49,199 --> 02:14:52,880
it's just a class that contains uh an

02:14:52,079 --> 02:14:55,920
attribute

02:14:52,880 --> 02:14:58,480
sorry i do it all the time um

02:14:55,920 --> 02:15:00,800
contains an attribute shapes which is a

02:14:58,480 --> 02:15:04,159
list of something

02:15:00,800 --> 02:15:05,520
it has an add method that adds whatever

02:15:04,159 --> 02:15:08,560
you pass to it

02:15:05,520 --> 02:15:12,880
to this list okay so

02:15:08,560 --> 02:15:16,159
so far so good but it's just a list

02:15:12,880 --> 02:15:19,760
and then an areas method that

02:15:16,159 --> 02:15:23,119
runs this it runs the method area

02:15:19,760 --> 02:15:26,880
for each shape of each object

02:15:23,119 --> 02:15:29,920
in this list okay so

02:15:26,880 --> 02:15:33,119
up to here it's just a list

02:15:29,920 --> 02:15:33,760
this defines something a bit more

02:15:33,119 --> 02:15:37,440
advanced

02:15:33,760 --> 02:15:40,960
it says let's run this method for each

02:15:37,440 --> 02:15:43,360
thing in the list now define two classes

02:15:40,960 --> 02:15:44,079
triangle and rectangle that represents a

02:15:43,360 --> 02:15:46,719
shape

02:15:44,079 --> 02:15:47,199
don't use inheritance they both should

02:15:46,719 --> 02:15:49,920
accept

02:15:47,199 --> 02:15:51,520
base and high as initialization

02:15:49,920 --> 02:15:54,719
parameters so

02:15:51,520 --> 02:15:57,599
let's look at them class triangle

02:15:54,719 --> 02:15:59,440
has an in it with a base and a height

02:15:57,599 --> 02:16:02,639
surf base have height nothing

02:15:59,440 --> 02:16:03,520
complicated here and an area metal

02:16:02,639 --> 02:16:06,480
because this is

02:16:03,520 --> 02:16:07,679
this is asked by the by the exercise so

02:16:06,480 --> 02:16:09,840
the area method

02:16:07,679 --> 02:16:11,119
it has the area of the triangles which

02:16:09,840 --> 02:16:14,239
is base times

02:16:11,119 --> 02:16:18,000
half height divided by two if i

02:16:14,239 --> 02:16:20,159
remember my geometry well

02:16:18,000 --> 02:16:21,280
then i create a rectangle i don't use

02:16:20,159 --> 02:16:23,599
inheritance i create

02:16:21,280 --> 02:16:26,400
something which is basically the same

02:16:23,599 --> 02:16:29,440
okay duplication here all the way

02:16:26,400 --> 02:16:30,880
don't worry don't worry it's basically

02:16:29,440 --> 02:16:32,399
the same but the area

02:16:30,880 --> 02:16:34,960
is different obviously it's not divided

02:16:32,399 --> 02:16:37,519
by two right cool

02:16:34,960 --> 02:16:38,080
the exercises number five said instant

02:16:37,519 --> 02:16:41,519
shade

02:16:38,080 --> 02:16:44,880
shapes list triangle and rectangle

02:16:41,519 --> 02:16:45,599
add the shapes to the through the add

02:16:44,880 --> 02:16:47,760
method

02:16:45,599 --> 02:16:49,439
and then around the areas so look at

02:16:47,760 --> 02:16:51,920
this i instantiate

02:16:49,439 --> 02:16:52,559
the shapes list uh it doesn't it doesn't

02:16:51,920 --> 02:16:57,120
require

02:16:52,559 --> 02:16:59,439
any any attribute here any parameter so

02:16:57,120 --> 02:17:00,160
then i instantiate the triangle base and

02:16:59,439 --> 02:17:04,000
height

02:17:00,160 --> 02:17:06,479
the rectangle base and height and then i

02:17:04,000 --> 02:17:07,040
add the triangle and the rectangle to

02:17:06,479 --> 02:17:10,800
the shape

02:17:07,040 --> 02:17:14,639
list so now the shapes list inside its

02:17:10,800 --> 02:17:17,519
shapes internal list or attribute

02:17:14,639 --> 02:17:17,519
has these two

02:17:18,559 --> 02:17:25,599
instances t and r

02:17:22,080 --> 02:17:29,280
if i print t dot area it gives me 10.

02:17:25,599 --> 02:17:30,719
if i print r dot area gives me 300 okay

02:17:29,280 --> 02:17:34,800
these are the areas of the

02:17:30,719 --> 02:17:37,359
single shapes and when i run sl

02:17:34,800 --> 02:17:38,240
shifts this dot areas i get the same

02:17:37,359 --> 02:17:42,240
values

02:17:38,240 --> 02:17:43,040
because the function here is just

02:17:42,240 --> 02:17:46,719
running

02:17:43,040 --> 02:17:51,599
shape area for every shape in shapes

02:17:46,719 --> 02:17:54,840
so far i hope so good that's nothing

02:17:51,599 --> 02:17:56,639
complicated the interesting part here is

02:17:54,840 --> 02:17:59,840
that

02:17:56,639 --> 02:18:03,120
this shapes list is a list of

02:17:59,840 --> 02:18:06,399
things we don't specify what

02:18:03,120 --> 02:18:10,319
the only attribute these shapes

02:18:06,399 --> 02:18:12,960
should have is to have an area method

02:18:10,319 --> 02:18:13,679
i don't say anything about them i don't

02:18:12,960 --> 02:18:16,240
say they

02:18:13,679 --> 02:18:17,120
have to inherit from the same class i

02:18:16,240 --> 02:18:19,679
don't say they

02:18:17,120 --> 02:18:21,120
have to have a base and the height this

02:18:19,679 --> 02:18:23,200
is just because

02:18:21,120 --> 02:18:24,399
actually triangle and rectangular have a

02:18:23,200 --> 02:18:27,120
base in the height but

02:18:24,399 --> 02:18:29,280
the only thing they have to do is area

02:18:27,120 --> 02:18:31,840
so you see this is polymorphism

02:18:29,280 --> 02:18:32,880
because i'm not saying you have to give

02:18:31,840 --> 02:18:35,200
me

02:18:32,880 --> 02:18:37,200
shapes or you have to give me triangles

02:18:35,200 --> 02:18:38,000
i'm saying you have to give me something

02:18:37,200 --> 02:18:41,760
that

02:18:38,000 --> 02:18:45,519
has the area method again behavior

02:18:41,760 --> 02:18:48,800
it has to behave a certain way i hope

02:18:45,519 --> 02:18:51,439
it makes some sense let's go on and then

02:18:48,800 --> 02:18:54,160
we can wrap it up

02:18:51,439 --> 02:18:56,080
specialized triangular rectangle

02:18:54,160 --> 02:18:57,040
creating a colored rectangle okay i'm

02:18:56,080 --> 02:18:59,760
going to skip this

02:18:57,040 --> 02:19:01,519
uh if you just quickly if you create

02:18:59,760 --> 02:19:02,479
color rectangle you inherit from

02:19:01,519 --> 02:19:05,840
rectangle

02:19:02,479 --> 02:19:06,880
this works into the shapes list try it

02:19:05,840 --> 02:19:09,840
okay because

02:19:06,880 --> 02:19:10,960
i'm passing something that has the same

02:19:09,840 --> 02:19:14,479
interface

02:19:10,960 --> 02:19:14,880
area the area method the interesting

02:19:14,479 --> 02:19:16,559
thing

02:19:14,880 --> 02:19:19,439
that i wanted to show you and then i

02:19:16,559 --> 02:19:23,920
really really swear i'm going to stop

02:19:19,439 --> 02:19:26,080
rambling define a class circle

02:19:23,920 --> 02:19:27,280
that requires only single initialization

02:19:26,080 --> 02:19:29,280
parameter okay

02:19:27,280 --> 02:19:30,399
so only a single initialization

02:19:29,280 --> 02:19:33,599
parameter so

02:19:30,399 --> 02:19:36,960
circle doesn't have a base and height

02:19:33,599 --> 02:19:39,920
doesn't it has only the radius

02:19:36,960 --> 02:19:40,639
so it it's different okay circle is

02:19:39,920 --> 02:19:44,800
different

02:19:40,639 --> 02:19:48,080
it's not like a triangular rectangle

02:19:44,800 --> 02:19:50,720
it's a shape but it's different

02:19:48,080 --> 02:19:51,680
but since it has the area method that i

02:19:50,720 --> 02:19:54,720
can you know like

02:19:51,680 --> 02:19:58,319
i can do this fine this is

02:19:54,720 --> 02:20:01,120
base geometry right as long as this area

02:19:58,319 --> 02:20:03,359
method works

02:20:01,120 --> 02:20:04,240
you can add the circle to the shapes

02:20:03,359 --> 02:20:07,359
list

02:20:04,240 --> 02:20:10,160
and you can run the areas method

02:20:07,359 --> 02:20:10,160
and that works

02:20:11,120 --> 02:20:16,000
i i gave you this example because i

02:20:14,080 --> 02:20:18,800
wanted to show you that's

02:20:16,000 --> 02:20:20,640
this is polymorphism triangle rectangle

02:20:18,800 --> 02:20:22,319
you might argue well you know come on

02:20:20,640 --> 02:20:24,720
right triangles and rectangles have

02:20:22,319 --> 02:20:26,080
similar somehow base and high you know

02:20:24,720 --> 02:20:29,760
like okay fine

02:20:26,080 --> 02:20:30,479
let's let's let's throw a circle on the

02:20:29,760 --> 02:20:33,520
table

02:20:30,479 --> 02:20:35,760
which is completely different but since

02:20:33,520 --> 02:20:37,600
it has the area method

02:20:35,760 --> 02:20:39,920
that's good because this is what my

02:20:37,600 --> 02:20:42,800
shapes list

02:20:39,920 --> 02:20:42,800
object wants

02:20:43,200 --> 02:20:49,920
there are two exercises here uh

02:20:46,240 --> 02:20:53,359
that are interesting because they change

02:20:49,920 --> 02:20:54,080
the shapes list except in order to

02:20:53,359 --> 02:20:56,479
accept

02:20:54,080 --> 02:20:58,640
classes and not on instances i'm not

02:20:56,479 --> 02:21:00,560
gonna show you them uh

02:20:58,640 --> 02:21:02,240
this code now because it's a bit too

02:21:00,560 --> 02:21:06,800
complicated we don't have time

02:21:02,240 --> 02:21:08,640
go and read the uh read

02:21:06,800 --> 02:21:11,840
try to solve the exercise and then read

02:21:08,640 --> 02:21:15,280
my solution you have the code

02:21:11,840 --> 02:21:18,240
so four minutes to wrap it up

02:21:15,280 --> 02:21:19,200
cool so first of all thank you for uh

02:21:18,240 --> 02:21:22,479
you know the patient

02:21:19,200 --> 02:21:25,840
uh focus is a long time uh

02:21:22,479 --> 02:21:26,319
what what did we discover first of all

02:21:25,840 --> 02:21:30,000
what

02:21:26,319 --> 02:21:32,399
object-oriented is and why we do it

02:21:30,000 --> 02:21:34,319
again i'm not saying object-oriented is

02:21:32,399 --> 02:21:35,760
better than functional

02:21:34,319 --> 02:21:38,399
but functional programming is a

02:21:35,760 --> 02:21:40,640
completely different padding

02:21:38,399 --> 02:21:43,040
they can be mixed scala for example

02:21:40,640 --> 02:21:44,560
python mixes them a bit

02:21:43,040 --> 02:21:46,479
but they are different okay and

02:21:44,560 --> 02:21:49,280
object-oriented has

02:21:46,479 --> 02:21:50,080
uh an idea behind it which is that of

02:21:49,280 --> 02:21:53,439
the

02:21:50,080 --> 02:21:54,479
uh data and methods together or if you

02:21:53,439 --> 02:21:59,280
want the

02:21:54,479 --> 02:22:01,600
mini computers um working together

02:21:59,280 --> 02:22:02,960
nikki i'm gonna answer you in a second

02:22:01,600 --> 02:22:06,479
uh

02:22:02,960 --> 02:22:09,680
second thing what was it dedication yeah

02:22:06,479 --> 02:22:13,760
we can reuse code

02:22:09,680 --> 02:22:16,319
as someone said cody said i believe

02:22:13,760 --> 02:22:17,760
you want to achieve the dry like don't

02:22:16,319 --> 02:22:18,720
repeat yourself so you don't want to

02:22:17,760 --> 02:22:21,520
repeat code

02:22:18,720 --> 02:22:24,160
you use inheritance or composition

02:22:21,520 --> 02:22:27,840
remember composition

02:22:24,160 --> 02:22:31,520
and third polymorphism in python as in

02:22:27,840 --> 02:22:35,359
other languages we can basically

02:22:31,520 --> 02:22:38,560
use objects of different type

02:22:35,359 --> 02:22:39,200
because they expose a similar interface

02:22:38,560 --> 02:22:41,040
look at

02:22:39,200 --> 02:22:42,720
the triangle and the rectangle and the

02:22:41,040 --> 02:22:46,319
circle they expose

02:22:42,720 --> 02:22:49,680
the same thing the area as long as i'm

02:22:46,319 --> 02:22:50,399
interested in the area i don't care

02:22:49,680 --> 02:22:53,120
about

02:22:50,399 --> 02:22:54,160
the class so in python generally

02:22:53,120 --> 02:22:56,160
speaking we don't care

02:22:54,160 --> 02:22:57,280
that much about the type we care about

02:22:56,160 --> 02:22:59,439
the behavior

02:22:57,280 --> 02:23:01,359
we don't want to know if something is a

02:22:59,439 --> 02:23:03,920
list we want to know if something

02:23:01,359 --> 02:23:06,080
behaves like a list

02:23:03,920 --> 02:23:08,160
usually then we have type hinting

02:23:06,080 --> 02:23:09,920
because it's useful sometimes but yeah

02:23:08,160 --> 02:23:13,600
that's that's another thing let me read

02:23:09,920 --> 02:23:13,600
the question question sample shapes

02:23:16,880 --> 02:23:23,280
oh yeah uh right nikki uh

02:23:20,000 --> 02:23:26,640
definitely we can create a a base

02:23:23,280 --> 02:23:30,000
shape for a triangle

02:23:26,640 --> 02:23:32,800
and uh where is it

02:23:30,000 --> 02:23:33,520
for triangle rectangle uh it might make

02:23:32,800 --> 02:23:36,479
sense

02:23:33,520 --> 02:23:37,439
so uh i i don't know if i probably

02:23:36,479 --> 02:23:39,520
wouldn't

02:23:37,439 --> 02:23:41,280
i don't know if i i would do this in you

02:23:39,520 --> 02:23:44,560
know in some code it depends

02:23:41,280 --> 02:23:47,200
you know in this case i would probably

02:23:44,560 --> 02:23:48,720
yeah maybe inherit a bit but you see

02:23:47,200 --> 02:23:51,840
what happens if you define

02:23:48,720 --> 02:23:55,120
the base shape

02:23:51,840 --> 02:23:58,319
and you want to specify what init does

02:23:55,120 --> 02:24:01,439
it doesn't work for circle so

02:23:58,319 --> 02:24:02,080
you see again you have to decide if you

02:24:01,439 --> 02:24:05,040
want to use

02:24:02,080 --> 02:24:05,359
inheritance or not so yes you can you

02:24:05,040 --> 02:24:07,680
can

02:24:05,359 --> 02:24:08,960
do many things it might make sense it

02:24:07,680 --> 02:24:11,439
might also

02:24:08,960 --> 02:24:13,600
not make sense so yeah i don't have a

02:24:11,439 --> 02:24:15,520
solution it depends on the case okay

02:24:13,600 --> 02:24:16,880
but let's discuss about this i'm

02:24:15,520 --> 02:24:20,880
available whenever you want

02:24:16,880 --> 02:24:23,520
speaking of this wrapping up

02:24:20,880 --> 02:24:24,399
i hope you enjoyed the workshop i know i

02:24:23,520 --> 02:24:27,520
went a bit

02:24:24,399 --> 02:24:28,240
fast on some things the code is

02:24:27,520 --> 02:24:31,280
available

02:24:28,240 --> 02:24:34,720
the posts the workshop comes from

02:24:31,280 --> 02:24:36,640
are available on my blog i am available

02:24:34,720 --> 02:24:39,280
uh ping me on twitter

02:24:36,640 --> 02:24:41,439
i'm unfortunately not being here for the

02:24:39,280 --> 02:24:44,000
networking later because i have to work

02:24:41,439 --> 02:24:45,200
and my people in my office are waiting

02:24:44,000 --> 02:24:47,920
for me so i'm just

02:24:45,200 --> 02:24:48,880
you know switching context uh but i'm

02:24:47,920 --> 02:24:51,120
available they're

02:24:48,880 --> 02:24:52,560
really ping me i made myself a point of

02:24:51,120 --> 02:24:55,280
answering whoever

02:24:52,560 --> 02:24:56,479
gets in touch with me on twitter or

02:24:55,280 --> 02:24:58,560
email

02:24:56,479 --> 02:25:00,080
if you enjoy the workshop and you want

02:24:58,560 --> 02:25:02,080
for example me to give it

02:25:00,080 --> 02:25:04,000
to another community maybe a local

02:25:02,080 --> 02:25:06,880
community or another conference

02:25:04,000 --> 02:25:08,080
ping me i'm always available uh if it's

02:25:06,880 --> 02:25:10,640
for the

02:25:08,080 --> 02:25:11,920
community if it's for the conferences or

02:25:10,640 --> 02:25:14,640
things like that

02:25:11,920 --> 02:25:16,160
it's for free i'm definitely more than

02:25:14,640 --> 02:25:19,200
happy to contribute

02:25:16,160 --> 02:25:21,359
to the community i

02:25:19,200 --> 02:25:25,840
really hope you enjoyed it and thank you

02:25:21,359 --> 02:25:25,840

YouTube URL: https://www.youtube.com/watch?v=__NUbjZUXNY


