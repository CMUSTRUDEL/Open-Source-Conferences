Title: OpenTimelineIO BoF, SIGGRAPH 2019
Publication date: 2019-08-08
Playlist: SIGGRAPH 2019: Open Source Day
Description: 
	Progress update and open discussion about OpenTimelineIO, an API and interchange format for editorial cut information used in production at a variety of studios. Part of Open Source Day at SIGGRAPH 2019, hosted by Academy Software Foundation.

Speakers:
Joshua Minor, Pixar
Stephan Steinbach, Pixar
Josh Burnell, Dreamworks
Sean Wallitsch, Dreamworks
Thibault Saunier, Igalia
Simon Inwood, Imaginary Spaces
Mathieu Muller, Unity
Vince Cerundolo, Marvel
Eric Reinecke, Netflix
Captions: 
	00:00:00,000 --> 00:00:05,640
good afternoon we're here to talk about

00:00:02,730 --> 00:00:08,069
open timeline IO my name is Joshua miner

00:00:05,640 --> 00:00:10,559
I work at Pixar here with my colleagues

00:00:08,069 --> 00:00:12,059
to fajn Steinbach we're gonna talk for a

00:00:10,559 --> 00:00:14,849
little bit about our sort of roadmap of

00:00:12,059 --> 00:00:16,529
the project and then we have five guest

00:00:14,849 --> 00:00:20,340
presenters to talk about how they're

00:00:16,529 --> 00:00:22,380
using it so but we wanted to start off

00:00:20,340 --> 00:00:23,789
with just a quick informal poll this has

00:00:22,380 --> 00:00:27,380
helped us in the past to kind of gauge

00:00:23,789 --> 00:00:29,519
who's using what technologies out there

00:00:27,380 --> 00:00:34,200
raise your hand if you are actively

00:00:29,519 --> 00:00:36,750
using OTO in some form okay okay awesome

00:00:34,200 --> 00:00:40,290
excellent raise your hand if you were

00:00:36,750 --> 00:00:43,640
using AAF in some form okay okay how

00:00:40,290 --> 00:00:50,760
about about split okay how about EDL

00:00:43,640 --> 00:00:53,969
okay all right final cut XML I ever okay

00:00:50,760 --> 00:00:56,840
and if you are brand-new to ot IO you

00:00:53,969 --> 00:01:01,379
don't really know that much about it

00:00:56,840 --> 00:01:03,870
okay and then are you using ot IO for

00:01:01,379 --> 00:01:09,030
exchange between one company to another

00:01:03,870 --> 00:01:12,240
company okay we got one all right

00:01:09,030 --> 00:01:13,590
excellent okay thank you so much okay so

00:01:12,240 --> 00:01:16,110
we're gonna just give kind of an update

00:01:13,590 --> 00:01:19,860
about the the project where we are with

00:01:16,110 --> 00:01:21,270
the Academy Software Foundation and the

00:01:19,860 --> 00:01:25,920
guest presenters and we'll leave some

00:01:21,270 --> 00:01:29,640
time for Q&A at the end so to start with

00:01:25,920 --> 00:01:31,860
roti IO just to remind you is it's a

00:01:29,640 --> 00:01:34,799
interchange format for editorial

00:01:31,860 --> 00:01:38,100
timeline information it's also an API

00:01:34,799 --> 00:01:39,720
for working with that data model and

00:01:38,100 --> 00:01:41,790
then we include a bunch of adapter

00:01:39,720 --> 00:01:43,920
plugins for converting to and from other

00:01:41,790 --> 00:01:46,259
file formats and we try to emphasize

00:01:43,920 --> 00:01:48,210
these sort of three aspects they're each

00:01:46,259 --> 00:01:51,509
independently valuable for different use

00:01:48,210 --> 00:01:54,720
cases the data model itself is about

00:01:51,509 --> 00:01:56,759
tracks and clips and cross dissolves and

00:01:54,720 --> 00:02:00,840
markers kind of usual sort of video

00:01:56,759 --> 00:02:02,820
editing concepts and importantly there's

00:02:00,840 --> 00:02:05,250
media references so we point out to

00:02:02,820 --> 00:02:07,170
where media is like external to the ot

00:02:05,250 --> 00:02:09,899
IO we don't bundle the pixels or the

00:02:07,170 --> 00:02:11,970
audio like in the file and so it's very

00:02:09,899 --> 00:02:15,000
similar to ETL or final

00:02:11,970 --> 00:02:17,880
xml and in that respect we also include

00:02:15,000 --> 00:02:19,620
a sort of debugging kind of diagnostic

00:02:17,880 --> 00:02:21,420
viewer program so this is showing you

00:02:19,620 --> 00:02:22,860
the structure of the timeline but it's

00:02:21,420 --> 00:02:25,320
not actually playing back media or

00:02:22,860 --> 00:02:27,270
anything like that and you can't edit

00:02:25,320 --> 00:02:29,760
things in here it's just kind of seeing

00:02:27,270 --> 00:02:33,840
like the timing of everything and the

00:02:29,760 --> 00:02:35,700
the track layout this is our URL it's

00:02:33,840 --> 00:02:39,800
all open source it's all there on github

00:02:35,700 --> 00:02:39,800
so feel free to check that out

00:02:39,830 --> 00:02:44,340
internally at Pixar you know we've been

00:02:42,600 --> 00:02:46,830
past few years sort of rolling that out

00:02:44,340 --> 00:02:49,620
through our pipeline kind of replacing a

00:02:46,830 --> 00:02:52,230
bunch of old legacy stuff there we've

00:02:49,620 --> 00:02:54,870
been using it since cocoa and then

00:02:52,230 --> 00:02:57,330
Incredibles 2 twice Story 4 and our

00:02:54,870 --> 00:02:59,040
upcoming film onward and all these shows

00:02:57,330 --> 00:03:00,540
beyond that as well

00:02:59,040 --> 00:03:01,950
and we're currently working on

00:03:00,540 --> 00:03:05,100
integrating it directly into our

00:03:01,950 --> 00:03:06,480
in-house animation system and just to

00:03:05,100 --> 00:03:10,230
kind of highlight that a little bit the

00:03:06,480 --> 00:03:13,650
sort of evolution we started on sort of

00:03:10,230 --> 00:03:16,230
Incredibles to era exporting EDL's

00:03:13,650 --> 00:03:17,730
converting that to ot IO and running it

00:03:16,230 --> 00:03:19,110
through our review system and onto our

00:03:17,730 --> 00:03:21,420
grading system and this allowed us to

00:03:19,110 --> 00:03:23,220
improve that pipeline and actually I

00:03:21,420 --> 00:03:25,260
could pass cross-dissolve information

00:03:23,220 --> 00:03:26,400
that previously was not supported in our

00:03:25,260 --> 00:03:30,570
pipeline but we could carried that

00:03:26,400 --> 00:03:34,320
through a ot IO moving beyond that on

00:03:30,570 --> 00:03:38,310
Toy Story 4 we switched to pull AF out

00:03:34,320 --> 00:03:40,739
of the avid and that gives us a much

00:03:38,310 --> 00:03:44,670
richer set of data coming out then the

00:03:40,739 --> 00:03:46,140
EDL's had AF is we classified it as kind

00:03:44,670 --> 00:03:48,630
of expensive to work with it's a little

00:03:46,140 --> 00:03:50,640
that's kind of like complicated so we

00:03:48,630 --> 00:03:52,650
right away convert that to ot IO and

00:03:50,640 --> 00:03:55,590
then everything downstream uses that ot

00:03:52,650 --> 00:03:57,209
IO representation to be sort of very

00:03:55,590 --> 00:04:00,810
accessible like easy way to find out

00:03:57,209 --> 00:04:02,459
what is the cut of the film in our model

00:04:00,810 --> 00:04:04,470
you know the Edit cut is changing

00:04:02,459 --> 00:04:06,420
dynamically on a you know day to day

00:04:04,470 --> 00:04:08,190
basis and so we want the downstream

00:04:06,420 --> 00:04:11,820
departments to be informed about what's

00:04:08,190 --> 00:04:14,130
going on with the cut in our sort of

00:04:11,820 --> 00:04:16,560
current film pipeline we can actually

00:04:14,130 --> 00:04:18,870
round-trip this information so we can

00:04:16,560 --> 00:04:21,930
have a AF coming out of avid turned into

00:04:18,870 --> 00:04:24,360
ot IO going into our review system or an

00:04:21,930 --> 00:04:26,220
system all the others are downstream

00:04:24,360 --> 00:04:28,500
departments but also those departments

00:04:26,220 --> 00:04:30,419
importantly can their often making their

00:04:28,500 --> 00:04:31,979
own playlists or their splicing in their

00:04:30,419 --> 00:04:33,660
their latest renders those kinds of

00:04:31,979 --> 00:04:35,610
things and so we can take those oti

00:04:33,660 --> 00:04:37,889
o--'s and we can turn them back into an

00:04:35,610 --> 00:04:39,240
AE I can go back into editorial and this

00:04:37,889 --> 00:04:41,190
is really really helpful for that sort

00:04:39,240 --> 00:04:43,680
of collaboration that round trips so

00:04:41,190 --> 00:04:46,080
that you know for example the layout

00:04:43,680 --> 00:04:48,440
Department can do a couple of different

00:04:46,080 --> 00:04:50,639
you know cuts of the fill of a sequence

00:04:48,440 --> 00:04:52,320
different Oscar alternate versions or

00:04:50,639 --> 00:04:56,880
whatever they need to do and communicate

00:04:52,320 --> 00:04:59,940
that back in anti editorial so that's

00:04:56,880 --> 00:05:01,440
kind of how we're using it we may have

00:04:59,940 --> 00:05:03,479
noticed that were part of the Academy

00:05:01,440 --> 00:05:05,100
Software Foundation track today and

00:05:03,479 --> 00:05:07,289
we're excited to announce that we've

00:05:05,100 --> 00:05:10,770
just as of last week actually been

00:05:07,289 --> 00:05:13,199
accepted into the incubation stage into

00:05:10,770 --> 00:05:14,729
the Academy Software Foundation so we're

00:05:13,199 --> 00:05:20,220
excited about that it's a cool new

00:05:14,729 --> 00:05:22,590
community to join and this kind of we're

00:05:20,220 --> 00:05:25,740
hoping this kind of aligns with our sort

00:05:22,590 --> 00:05:28,199
of forward roadmap there's a couple of

00:05:25,740 --> 00:05:30,150
things that we want to do that we can't

00:05:28,199 --> 00:05:32,490
really do just by ourselves as just

00:05:30,150 --> 00:05:35,699
Pixar you know we have a community of

00:05:32,490 --> 00:05:37,770
contributors already but we really want

00:05:35,699 --> 00:05:40,620
to try to make sure that the sort of

00:05:37,770 --> 00:05:43,770
file format that we're creating is more

00:05:40,620 --> 00:05:46,050
well specified so netflix is helping us

00:05:43,770 --> 00:05:48,449
with that and we also want to aim for

00:05:46,050 --> 00:05:50,520
more sort of native vendor integration

00:05:48,449 --> 00:05:51,720
and I'll talk about that in a minute and

00:05:50,520 --> 00:05:52,860
we also just want to have to make sure

00:05:51,720 --> 00:05:54,780
that we're planning the future of the

00:05:52,860 --> 00:05:56,820
project as a community-based thing

00:05:54,780 --> 00:05:59,460
rather than like driven by a single

00:05:56,820 --> 00:06:01,409
studio it's being successful for us we

00:05:59,460 --> 00:06:02,820
like that but we think that the project

00:06:01,409 --> 00:06:05,760
will be more healthy if it's more of a

00:06:02,820 --> 00:06:07,979
community effort and so you know which

00:06:05,760 --> 00:06:10,050
community well the the Academy Software

00:06:07,979 --> 00:06:12,349
Foundation aligns very much with sort of

00:06:10,050 --> 00:06:16,050
our identity as a as a animation studio

00:06:12,349 --> 00:06:19,289
and as you know with Disney as a whole

00:06:16,050 --> 00:06:23,030
and and reaching beyond that to all the

00:06:19,289 --> 00:06:26,250
other members of sort of our community

00:06:23,030 --> 00:06:28,169
so drilling in for a minute about the

00:06:26,250 --> 00:06:31,110
vendor integration so our model right

00:06:28,169 --> 00:06:33,389
now is you have some third-party

00:06:31,110 --> 00:06:34,680
applications and maybe you have your

00:06:33,389 --> 00:06:37,230
in-house tools

00:06:34,680 --> 00:06:39,690
and we're doing a lot of file format

00:06:37,230 --> 00:06:43,770
conversion to and from whatever sort of

00:06:39,690 --> 00:06:46,410
mmm sort of native format um is used by

00:06:43,770 --> 00:06:49,530
these applications so here we can take

00:06:46,410 --> 00:06:51,600
an AAF turn it into ot IO do some

00:06:49,530 --> 00:06:53,630
manipulations on it turn it into an RV

00:06:51,600 --> 00:06:55,740
session file and show it in review and

00:06:53,630 --> 00:07:00,480
so that's the model right now and

00:06:55,740 --> 00:07:01,890
there's a lot of a castle or just kind

00:07:00,480 --> 00:07:05,910
of like messiness around these these

00:07:01,890 --> 00:07:08,400
conversions and it works in practice

00:07:05,910 --> 00:07:10,050
we're able to customize things and it's

00:07:08,400 --> 00:07:12,330
it's kind of ok but it's not like the

00:07:10,050 --> 00:07:14,580
ideal situation but we'd rather have is

00:07:12,330 --> 00:07:17,550
like native support in a lot of these

00:07:14,580 --> 00:07:19,710
applications and we kind of like floated

00:07:17,550 --> 00:07:21,330
this idea around with a lot of folks one

00:07:19,710 --> 00:07:22,860
of the key things there was they didn't

00:07:21,330 --> 00:07:24,660
a lot of these applications didn't want

00:07:22,860 --> 00:07:26,880
to have a Python interpreter added to

00:07:24,660 --> 00:07:28,970
their their application so we'll talk

00:07:26,880 --> 00:07:31,050
about the C++ support in a little bit

00:07:28,970 --> 00:07:33,120
but this is kind of where we want to go

00:07:31,050 --> 00:07:35,040
and we also feel that by joining the

00:07:33,120 --> 00:07:36,450
Academy Software Foundation and kind of

00:07:35,040 --> 00:07:39,120
being more of a community driven thing

00:07:36,450 --> 00:07:40,710
that the third-party vendors will

00:07:39,120 --> 00:07:43,350
hopefully kind of see this as like

00:07:40,710 --> 00:07:44,790
alignment but ok if we all sort of want

00:07:43,350 --> 00:07:45,210
that like if that makes sense to

00:07:44,790 --> 00:07:47,730
everybody

00:07:45,210 --> 00:07:49,580
then that can be actually like a cost

00:07:47,730 --> 00:07:51,750
savings across the industry it can be

00:07:49,580 --> 00:07:55,230
some like facilitating that sort of

00:07:51,750 --> 00:07:56,490
collaboration so currently we're still

00:07:55,230 --> 00:07:58,470
following sort of production driven

00:07:56,490 --> 00:08:01,500
priorities but we do want to kind of

00:07:58,470 --> 00:08:07,470
shift to more of that community sort of

00:08:01,500 --> 00:08:09,540
roadmap for the project we've been

00:08:07,470 --> 00:08:11,100
accepted into the incubation stage and

00:08:09,540 --> 00:08:13,440
part of that is that we actually need to

00:08:11,100 --> 00:08:17,010
form our technical steering committee

00:08:13,440 --> 00:08:19,110
and adopt a governance model and there's

00:08:17,010 --> 00:08:22,980
some specific sort of procedural steps

00:08:19,110 --> 00:08:24,900
as well as some technical steps so

00:08:22,980 --> 00:08:26,880
actually this week we're reaching out to

00:08:24,900 --> 00:08:28,380
the other sort open source projects to

00:08:26,880 --> 00:08:30,720
find out like how does your governance

00:08:28,380 --> 00:08:33,600
work you know how are you able to foster

00:08:30,720 --> 00:08:35,760
a good sort of community involvement so

00:08:33,600 --> 00:08:37,380
if you have thoughts on that if you've

00:08:35,760 --> 00:08:40,500
seen it done well or badly or whatever

00:08:37,380 --> 00:08:42,449
like find us and talk to us we'd love to

00:08:40,500 --> 00:08:44,279
kind of learn from the

00:08:42,449 --> 00:08:47,519
from the community that we're trying to

00:08:44,279 --> 00:08:49,740
join and with that I'd like to hand it

00:08:47,519 --> 00:08:51,899
over to Stefan who's going to talk about

00:08:49,740 --> 00:08:54,470
the specifics of what we've been up to

00:08:51,899 --> 00:08:54,470
on the project

00:09:00,380 --> 00:09:04,949
hey everyone so I'm Stefan I work with

00:09:03,180 --> 00:09:06,329
Josh on open time Leo and I'm gonna talk

00:09:04,949 --> 00:09:08,519
a little bit that what we've been doing

00:09:06,329 --> 00:09:12,329
since the last time we all met in

00:09:08,519 --> 00:09:15,000
Vancouver so the work broadly falls into

00:09:12,329 --> 00:09:17,160
three categories there's been as always

00:09:15,000 --> 00:09:19,050
a bunch of work a lot from the community

00:09:17,160 --> 00:09:20,519
on the adapters we've got some new

00:09:19,050 --> 00:09:21,990
plug-in systems that were directly

00:09:20,519 --> 00:09:23,399
requested by the community and then

00:09:21,990 --> 00:09:25,440
finally I'll talk a little bit about the

00:09:23,399 --> 00:09:27,630
C++ core that we've been working on a

00:09:25,440 --> 00:09:32,459
lot over the last over the last couple

00:09:27,630 --> 00:09:34,139
months so I'm the biggest one for us

00:09:32,459 --> 00:09:36,329
internally is that we've built out

00:09:34,139 --> 00:09:39,000
support for writing AFS as well as

00:09:36,329 --> 00:09:40,620
reading them and I need to clarify this

00:09:39,000 --> 00:09:43,560
a little bit we're writing composition

00:09:40,620 --> 00:09:45,839
AF so there's no pixel data in these is

00:09:43,560 --> 00:09:48,509
still just just track and information

00:09:45,839 --> 00:09:50,670
but for our use case that's been already

00:09:48,509 --> 00:09:53,040
super helpful and I also want to

00:09:50,670 --> 00:09:55,199
specifically thank the cargo cult folks

00:09:53,040 --> 00:09:57,180
out in New Zealand have supplied a ton

00:09:55,199 --> 00:09:58,560
of test data which is really valuable

00:09:57,180 --> 00:09:59,610
and I want to put that out there also

00:09:58,560 --> 00:10:01,740
that if you're looking for a way to

00:09:59,610 --> 00:10:03,000
contribute test data is super helpful

00:10:01,740 --> 00:10:05,490
especially with the format as

00:10:03,000 --> 00:10:07,339
complicated as AF but thanks to their

00:10:05,490 --> 00:10:09,899
contributions we've gotten a lot more

00:10:07,339 --> 00:10:12,480
robustness enhancements out of our AF

00:10:09,899 --> 00:10:14,579
adapter and then of course as Josh

00:10:12,480 --> 00:10:16,380
mentioned that's now been put in a

00:10:14,579 --> 00:10:19,019
pretty heavy production use at Pixar

00:10:16,380 --> 00:10:20,550
it's the main interface between our

00:10:19,019 --> 00:10:23,490
editorial staff and our production

00:10:20,550 --> 00:10:25,620
departments contributed from the

00:10:23,490 --> 00:10:28,319
community we've got a Final Cut Pro X

00:10:25,620 --> 00:10:30,209
XML adapter and then also a gstreamer

00:10:28,319 --> 00:10:32,459
plug-in that will have one of our guest

00:10:30,209 --> 00:10:35,130
presenters talk about a little bit in a

00:10:32,459 --> 00:10:36,540
little bit so I'm going to talk a little

00:10:35,130 --> 00:10:39,029
bit about some of the new plugins we've

00:10:36,540 --> 00:10:40,769
introduced so if you're familiar with

00:10:39,029 --> 00:10:44,279
the project you've probably come across

00:10:40,769 --> 00:10:45,779
this idea of a media linker Josh alluded

00:10:44,279 --> 00:10:47,279
to the fact that we don't we don't

00:10:45,779 --> 00:10:49,380
encode any media instead we have these

00:10:47,279 --> 00:10:51,660
media references and the idea is that

00:10:49,380 --> 00:10:52,950
the media linker is a plug-in that you

00:10:51,660 --> 00:10:54,630
author that has

00:10:52,950 --> 00:10:57,480
you're you know your business logic for

00:10:54,630 --> 00:10:59,100
your studio that tells OPI yo how and

00:10:57,480 --> 00:11:01,470
where to find the media out on your

00:10:59,100 --> 00:11:03,780
specific database dis farm whatever

00:11:01,470 --> 00:11:06,000
however it is that you do it and the way

00:11:03,780 --> 00:11:09,840
that we had done that is it runs once

00:11:06,000 --> 00:11:11,220
per clip and what we found was that you

00:11:09,840 --> 00:11:13,050
know it's it's specifically meant to

00:11:11,220 --> 00:11:15,810
replace an edit that the only that media

00:11:13,050 --> 00:11:17,280
reference and while we like the plugin

00:11:15,810 --> 00:11:19,230
Ness of it we found that there's

00:11:17,280 --> 00:11:20,760
actually a lot of other things that we

00:11:19,230 --> 00:11:22,080
wanted to attach and we got some

00:11:20,760 --> 00:11:24,330
requests from the community about this

00:11:22,080 --> 00:11:28,320
as well so we introduced the idea of

00:11:24,330 --> 00:11:31,260
hook scripts so these plugins are

00:11:28,320 --> 00:11:33,960
modeled after get hooks if you've

00:11:31,260 --> 00:11:36,380
encountered that and what they are it's

00:11:33,960 --> 00:11:38,970
it's all Python and it's basically a

00:11:36,380 --> 00:11:40,530
'get hook or sorry a hook script is a

00:11:38,970 --> 00:11:42,180
function that takes a timeline and

00:11:40,530 --> 00:11:43,530
returns a timeline and has the

00:11:42,180 --> 00:11:47,100
opportunity to operate on the entire

00:11:43,530 --> 00:11:49,620
timeline in one shot the hooks are

00:11:47,100 --> 00:11:50,670
defined by the manifest so maybe it's

00:11:49,620 --> 00:11:52,770
kind of hard to see here but on the

00:11:50,670 --> 00:11:54,930
right this is what the plug-in manifest

00:11:52,770 --> 00:11:56,280
looks like so you can you can point at a

00:11:54,930 --> 00:11:58,260
particular hook script it lives in a

00:11:56,280 --> 00:12:00,780
Python file and then you can attach that

00:11:58,260 --> 00:12:02,310
hook to these events that we that we

00:12:00,780 --> 00:12:04,980
described and you can you can define

00:12:02,310 --> 00:12:07,740
your own events that your your own

00:12:04,980 --> 00:12:09,930
plugins can call but the core API has a

00:12:07,740 --> 00:12:12,180
hook that runs once after a file gets

00:12:09,930 --> 00:12:14,970
read once after the media linker gets

00:12:12,180 --> 00:12:16,800
run and then once before the media leav

00:12:14,970 --> 00:12:19,470
sorry once before the adapter writes it

00:12:16,800 --> 00:12:21,090
back out the disk so like one example

00:12:19,470 --> 00:12:22,800
use cases maybe you have data that you

00:12:21,090 --> 00:12:24,420
want to inject after you read the file

00:12:22,800 --> 00:12:25,770
you do your stuff and then you strip it

00:12:24,420 --> 00:12:27,000
back out again before you write it back

00:12:25,770 --> 00:12:29,040
out because you're going to share it

00:12:27,000 --> 00:12:30,420
with another studio or you don't want to

00:12:29,040 --> 00:12:32,580
archive that data in there it's

00:12:30,420 --> 00:12:35,130
transient or something so that's where

00:12:32,580 --> 00:12:38,820
plugins like the hook step like the hook

00:12:35,130 --> 00:12:40,320
scripts come in and I know we've had it

00:12:38,820 --> 00:12:41,340
we've gotten feedback from the community

00:12:40,320 --> 00:12:43,290
that these are starting to make their

00:12:41,340 --> 00:12:44,640
way out there so if you're using these

00:12:43,290 --> 00:12:47,060
things and you do have feedback please

00:12:44,640 --> 00:12:47,060
let us know

00:12:47,700 --> 00:12:53,280
also we've introduced the idea of a

00:12:49,620 --> 00:12:55,290
schema dev plugin so the entire schema

00:12:53,280 --> 00:12:57,330
system inside of open timeline IO the

00:12:55,290 --> 00:12:59,370
base class for that is a serializable

00:12:57,330 --> 00:13:02,400
object and it provides a whole bunch of

00:12:59,370 --> 00:13:04,080
different functionality like you know

00:13:02,400 --> 00:13:06,690
versioning the schema is doing version

00:13:04,080 --> 00:13:09,630
upgrading serializing the data

00:13:06,690 --> 00:13:11,340
those different pieces but we pretty

00:13:09,630 --> 00:13:12,720
quickly hit this idea that like actually

00:13:11,340 --> 00:13:14,040
they're a proprietary schema is that

00:13:12,720 --> 00:13:15,810
we'd like to introduce as well and

00:13:14,040 --> 00:13:18,240
that's what the schema def plug-in lets

00:13:15,810 --> 00:13:21,720
you do so here's here's um the one from

00:13:18,240 --> 00:13:22,920
the example well actually this this is

00:13:21,720 --> 00:13:24,540
just showing the use case of the

00:13:22,920 --> 00:13:26,400
serializable object is actually how the

00:13:24,540 --> 00:13:29,070
manifest and plug-in system itself is

00:13:26,400 --> 00:13:31,500
implemented but the schema def plug-in

00:13:29,070 --> 00:13:34,500
is defined in python using the exact

00:13:31,500 --> 00:13:35,910
same api as the core classes so if

00:13:34,500 --> 00:13:37,920
you've looked inside the core you'll see

00:13:35,910 --> 00:13:40,050
the serializable field and that it

00:13:37,920 --> 00:13:42,300
inherits from serializable object and it

00:13:40,050 --> 00:13:45,240
uses the write the type registry so it's

00:13:42,300 --> 00:13:47,430
in an exact peer of the of the built-in

00:13:45,240 --> 00:13:51,600
classes with the sort of special

00:13:47,430 --> 00:13:53,550
exception that if if you don't have the

00:13:51,600 --> 00:13:55,230
plug-in loaded ot IO will still

00:13:53,550 --> 00:13:57,360
round-trip the data but instead of

00:13:55,230 --> 00:13:59,190
giving you a concrete type in memory it

00:13:57,360 --> 00:14:00,810
gives you an unknown schema object and

00:13:59,190 --> 00:14:02,160
if you know what you're looking for you

00:14:00,810 --> 00:14:03,720
can still access the data dictionary

00:14:02,160 --> 00:14:05,820
that's on there it just won't give you

00:14:03,720 --> 00:14:07,440
like a proper type with classes it

00:14:05,820 --> 00:14:09,690
doesn't have enough information to do

00:14:07,440 --> 00:14:11,580
that but it has the same versioning

00:14:09,690 --> 00:14:13,110
system available to the core schemas and

00:14:11,580 --> 00:14:16,980
you can put additional methods on there

00:14:13,110 --> 00:14:19,020
as well so internally what we've done is

00:14:16,980 --> 00:14:21,420
we've wrapped up a sort of metadata

00:14:19,020 --> 00:14:23,100
container for Pixar metadata that

00:14:21,420 --> 00:14:24,990
includes methods that knows how to like

00:14:23,100 --> 00:14:27,570
look up information in the database or

00:14:24,990 --> 00:14:30,780
you know populate various fields based

00:14:27,570 --> 00:14:32,850
on information that's present and that

00:14:30,780 --> 00:14:35,280
automatically serializes and deserialize

00:14:32,850 --> 00:14:39,840
--is with with the timelines that we

00:14:35,280 --> 00:14:41,250
encode like I mentioned if the plug-in

00:14:39,840 --> 00:14:43,140
isn't present you'll get an unknown

00:14:41,250 --> 00:14:46,230
schema object so all the data will still

00:14:43,140 --> 00:14:48,420
round-trip correctly if the hope is that

00:14:46,230 --> 00:14:49,740
if you you know had to hand the timeline

00:14:48,420 --> 00:14:51,210
across to another studio that had a

00:14:49,740 --> 00:14:52,350
different plug-in they could still give

00:14:51,210 --> 00:14:55,380
you the thing back and you'd get the

00:14:52,350 --> 00:14:56,670
original blobs that were in there but

00:14:55,380 --> 00:15:01,440
you could also strip them out with a

00:14:56,670 --> 00:15:03,990
hook function if you want it to so

00:15:01,440 --> 00:15:06,089
obviously the like really huge amount of

00:15:03,990 --> 00:15:07,410
work that we've been even if you

00:15:06,089 --> 00:15:09,420
following along you've noticed it's been

00:15:07,410 --> 00:15:10,920
a little bit quiet for the last like six

00:15:09,420 --> 00:15:13,560
months or so we've been focused really

00:15:10,920 --> 00:15:15,750
heavily on this but the branch has been

00:15:13,560 --> 00:15:16,300
landed and master so if you look at the

00:15:15,750 --> 00:15:18,460
repo

00:15:16,300 --> 00:15:22,300
day and you install open timeline oh you

00:15:18,460 --> 00:15:24,550
are getting the C++ core and that

00:15:22,300 --> 00:15:26,380
process has been based on a ton of

00:15:24,550 --> 00:15:28,000
community input like I know we talked to

00:15:26,380 --> 00:15:29,650
a lot of you last year and over the last

00:15:28,000 --> 00:15:32,260
couple years actually and gotten a lot

00:15:29,650 --> 00:15:33,940
of feedback so just to drill in you know

00:15:32,260 --> 00:15:37,750
we got the message we built it all on

00:15:33,940 --> 00:15:39,550
boost yeah it's okay

00:15:37,750 --> 00:15:41,740
but the one thing I did want to mention

00:15:39,550 --> 00:15:43,570
is the other requests that that did come

00:15:41,740 --> 00:15:46,450
up was that we use the hourglass pattern

00:15:43,570 --> 00:15:48,130
we did not end up doing this we found

00:15:46,450 --> 00:15:50,260
that it was going to significantly

00:15:48,130 --> 00:15:52,000
increase the development time and the

00:15:50,260 --> 00:15:56,200
use cases that we encountered

00:15:52,000 --> 00:15:57,730
we just didn't need it so you know it's

00:15:56,200 --> 00:16:00,070
something that can be added in later we

00:15:57,730 --> 00:16:01,540
feel like we feel like it wasn't

00:16:00,070 --> 00:16:03,460
necessary here but you know please give

00:16:01,540 --> 00:16:06,430
us feedback if that if that is already a

00:16:03,460 --> 00:16:08,800
deal-breaker for you on the flip side

00:16:06,430 --> 00:16:10,420
though its header only dependencies the

00:16:08,800 --> 00:16:11,920
thing is in a version namespace and it's

00:16:10,420 --> 00:16:13,990
been built with thread safety in mind so

00:16:11,920 --> 00:16:17,830
hopefully it's safe to include in your

00:16:13,990 --> 00:16:20,730
application the dependencies that we

00:16:17,830 --> 00:16:24,580
ended up using so optional light and any

00:16:20,730 --> 00:16:26,470
are both actually just you know I forget

00:16:24,580 --> 00:16:28,750
what the term is but there are C++ 17

00:16:26,470 --> 00:16:31,960
features that aren't present in the VFX

00:16:28,750 --> 00:16:33,670
platform c++ 14 so those are those are

00:16:31,960 --> 00:16:35,110
filling those gaps and when the effects

00:16:33,670 --> 00:16:37,750
platform moves ahead we can strip those

00:16:35,110 --> 00:16:40,120
out rapid json is being used for the

00:16:37,750 --> 00:16:42,040
JSON parsing which is the same as USD

00:16:40,120 --> 00:16:45,340
and then pi by and 11 is what we're

00:16:42,040 --> 00:16:47,500
using to do the python binding so it's

00:16:45,340 --> 00:16:48,610
been a pretty pretty pleasant that's

00:16:47,500 --> 00:16:51,400
been a pretty good set of dependencies

00:16:48,610 --> 00:16:53,530
and we feel like it's it should be

00:16:51,400 --> 00:16:55,120
pretty easy to integrate in your system

00:16:53,530 --> 00:16:56,650
and you don't have to build the Python

00:16:55,120 --> 00:17:01,620
bindings if you don't want to that's an

00:16:56,650 --> 00:17:04,540
optional piece I should say that so also

00:17:01,620 --> 00:17:06,220
the part that we ported was not the

00:17:04,540 --> 00:17:09,430
Python plugin so we actually left those

00:17:06,220 --> 00:17:11,620
in Python from C++ you can read and

00:17:09,430 --> 00:17:13,030
write the dot ot IO format and you can

00:17:11,620 --> 00:17:15,970
still traverse and manipulate all the

00:17:13,030 --> 00:17:18,520
data but if you want to use the if you

00:17:15,970 --> 00:17:20,440
want to use the adapters you need to

00:17:18,520 --> 00:17:21,820
you're going to need to do another trick

00:17:20,440 --> 00:17:24,910
which I'll talk about in a second but

00:17:21,820 --> 00:17:26,620
just to just to clarify this one thing

00:17:24,910 --> 00:17:27,270
we heard from people is I was important

00:17:26,620 --> 00:17:30,090
that

00:17:27,270 --> 00:17:32,130
folks who don't want Python in there say

00:17:30,090 --> 00:17:33,600
nonlinear editing system don't have to

00:17:32,130 --> 00:17:35,910
actually introduce it as a dependency

00:17:33,600 --> 00:17:37,500
that they can just get the core if they

00:17:35,910 --> 00:17:40,050
want to read and write the format and

00:17:37,500 --> 00:17:41,130
use the API but at the same time we

00:17:40,050 --> 00:17:42,929
didn't want to throw away all the work

00:17:41,130 --> 00:17:44,610
that's gone into those plugins and those

00:17:42,929 --> 00:17:46,800
adapters is it's still super useful and

00:17:44,610 --> 00:17:48,630
valuable to the project so what we're

00:17:46,800 --> 00:17:51,120
what we're sort of proposing is because

00:17:48,630 --> 00:17:52,860
it's you know JSON format that you can

00:17:51,120 --> 00:17:57,240
do something in a Python sub shell if

00:17:52,860 --> 00:17:59,700
you need to access those those adapters

00:17:57,240 --> 00:18:01,170
and read the read the JSON back into

00:17:59,700 --> 00:18:02,790
your system if you do need to go from

00:18:01,170 --> 00:18:05,670
another format but as Josh mentioned

00:18:02,790 --> 00:18:06,990
we're hoping that as time goes on we can

00:18:05,670 --> 00:18:08,460
get more direct integration with the

00:18:06,990 --> 00:18:11,100
vendors and we don't need as many of the

00:18:08,460 --> 00:18:15,780
adapters to hook up workflows and

00:18:11,100 --> 00:18:17,250
pipelines for first studio work pip

00:18:15,780 --> 00:18:19,080
install and all the ways that you're

00:18:17,250 --> 00:18:21,000
using open timeline o should still work

00:18:19,080 --> 00:18:24,360
if it doesn't definitely let us know

00:18:21,000 --> 00:18:27,210
that our hope is that the set up top UI

00:18:24,360 --> 00:18:29,400
takes care of everything and it's out

00:18:27,210 --> 00:18:30,929
there last week David Barrett did a ton

00:18:29,400 --> 00:18:33,510
of the work at Pixar so I would like to

00:18:30,929 --> 00:18:36,030
thank him for contributing the core and

00:18:33,510 --> 00:18:37,530
the Python bindings and while he was in

00:18:36,030 --> 00:18:39,510
there he also built preliminary Swift

00:18:37,530 --> 00:18:43,850
bindings so if you need to run it on iOS

00:18:39,510 --> 00:18:45,960
or Mac go ahead and try that out as well

00:18:43,850 --> 00:18:47,429
ok so we're gonna we're going to hand it

00:18:45,960 --> 00:18:49,980
over to our guest presenters who have

00:18:47,429 --> 00:18:52,010
some really cool mini talks on how

00:18:49,980 --> 00:18:55,740
they're using it in their pipelines and

00:18:52,010 --> 00:18:57,140
first up we got DreamWorks so let's give

00:18:55,740 --> 00:19:05,609
a hand to Josh and strong

00:18:57,140 --> 00:19:05,609
[Applause]

00:19:07,510 --> 00:19:12,230
hi my name is Sean Wallach

00:19:09,980 --> 00:19:14,450
I am a lead department TD at DreamWorks

00:19:12,230 --> 00:19:16,970
I'm working on our new pipeline X

00:19:14,450 --> 00:19:18,920
project hey I'm Josh for now I'm part of

00:19:16,970 --> 00:19:22,100
the media team I'm the tech lead and we

00:19:18,920 --> 00:19:23,960
are focused on editorial and playback

00:19:22,100 --> 00:19:26,330
tools we're going to talk a little bit

00:19:23,960 --> 00:19:28,820
about how we're using ot IO to run

00:19:26,330 --> 00:19:30,620
timings through the pipeline and I guess

00:19:28,820 --> 00:19:37,160
the disclaimer is none of these images

00:19:30,620 --> 00:19:38,660
are relevant very cool all right so we

00:19:37,160 --> 00:19:40,550
came into this with a big desire of a

00:19:38,660 --> 00:19:42,200
pipeline unified timing format a

00:19:40,550 --> 00:19:44,870
DreamWorks has been making animated

00:19:42,200 --> 00:19:46,730
movies for a long time but with that we

00:19:44,870 --> 00:19:49,340
had a lot of assumptions about how

00:19:46,730 --> 00:19:51,770
timing looked in our pipeline so we

00:19:49,340 --> 00:19:54,730
usually assume things like 24 frames per

00:19:51,770 --> 00:19:58,370
second or a nice single layer timeline

00:19:54,730 --> 00:20:01,250
nice simple cross dissolves between our

00:19:58,370 --> 00:20:02,750
shots and as we got our parts our

00:20:01,250 --> 00:20:03,860
projects out more and more varied we

00:20:02,750 --> 00:20:05,360
found more and more products for

00:20:03,860 --> 00:20:07,760
breaking those rules and having more

00:20:05,360 --> 00:20:09,440
requirements on them so as they broke

00:20:07,760 --> 00:20:11,330
those rules and had more requirements

00:20:09,440 --> 00:20:12,950
and started wanting to use different

00:20:11,330 --> 00:20:15,770
editorial software from our standard

00:20:12,950 --> 00:20:18,980
editorial software we kept having to

00:20:15,770 --> 00:20:21,140
deal with proprietary EDL formats and

00:20:18,980 --> 00:20:22,820
every new thing we got required a large

00:20:21,140 --> 00:20:28,340
amount of ingestion work to make this

00:20:22,820 --> 00:20:29,420
stuff work so be more varied as our

00:20:28,340 --> 00:20:32,420
price low continues to become more

00:20:29,420 --> 00:20:34,760
varied so do the demands that we have on

00:20:32,420 --> 00:20:37,070
our editorial workflows all right he's

00:20:34,760 --> 00:20:40,640
off microphone and I'm on microphone are

00:20:37,070 --> 00:20:43,910
we good no all right well both be on

00:20:40,640 --> 00:20:46,430
microphone so anyway our first idea was

00:20:43,910 --> 00:20:48,320
to unify on an EDL format that was like

00:20:46,430 --> 00:20:50,360
standard to one of our third-party

00:20:48,320 --> 00:20:53,240
editors which will remain nameless but

00:20:50,360 --> 00:20:54,770
we all know what it is we just weren't

00:20:53,240 --> 00:20:56,570
able to do that there wasn't enough

00:20:54,770 --> 00:20:59,270
color in it there wasn't enough stuff in

00:20:56,570 --> 00:21:01,910
it and so it's similar to what was

00:20:59,270 --> 00:21:05,210
mentioned before we had the AAF so we

00:21:01,910 --> 00:21:08,690
went over to using the AAF but then that

00:21:05,210 --> 00:21:12,230
was just kind of too rich for downstream

00:21:08,690 --> 00:21:13,309
pipeline tools so we went to e to the ot

00:21:12,230 --> 00:21:15,379
IO format

00:21:13,309 --> 00:21:19,039
provided us a ground truth that we could

00:21:15,379 --> 00:21:20,899
kind of keep everybody standard on and

00:21:19,039 --> 00:21:22,909
then the OT i/o format allows us to

00:21:20,899 --> 00:21:25,909
store our media in non-standard and

00:21:22,909 --> 00:21:27,740
mixed locations so using media

00:21:25,909 --> 00:21:30,529
references subclasses of media

00:21:27,740 --> 00:21:32,960
references and resolvers we've been able

00:21:30,529 --> 00:21:37,299
to move our media off disk for some

00:21:32,960 --> 00:21:39,710
workflows now I'm on microphone as well

00:21:37,299 --> 00:21:42,259
so I should mention that our current

00:21:39,710 --> 00:21:44,210
implementation here refers to one of our

00:21:42,259 --> 00:21:45,440
pipelines and Dreamworks is probably not

00:21:44,210 --> 00:21:47,389
unique in that we have multiple

00:21:45,440 --> 00:21:49,399
pipelines at our studio at the same time

00:21:47,389 --> 00:21:51,230
as we migrate from one to another so

00:21:49,399 --> 00:21:52,879
where it says current implementation

00:21:51,230 --> 00:21:54,769
that's a current implementation that we

00:21:52,879 --> 00:21:58,190
are talking about right now

00:21:54,769 --> 00:22:01,190
our creative pipeline across most of our

00:21:58,190 --> 00:22:03,499
pipeline fermentations though is that it

00:22:01,190 --> 00:22:06,230
is fuelled by the editorial round trip

00:22:03,499 --> 00:22:06,740
much like the Pixar presentation we just

00:22:06,230 --> 00:22:08,779
went over

00:22:06,740 --> 00:22:10,909
so editors publish the official timing

00:22:08,779 --> 00:22:13,340
for a sequence artist view that timing

00:22:10,909 --> 00:22:16,669
they can make suggestions to change shot

00:22:13,340 --> 00:22:18,249
links shot order things like that they

00:22:16,669 --> 00:22:22,009
do that with popular third-party

00:22:18,249 --> 00:22:24,499
proprietary tools the editorial then can

00:22:22,009 --> 00:22:26,600
ingest those changes they take some they

00:22:24,499 --> 00:22:28,009
ignore others and they publish a new

00:22:26,600 --> 00:22:30,529
official timing back out into the

00:22:28,009 --> 00:22:32,629
pipeline so yeah we use ot IO is just

00:22:30,529 --> 00:22:34,490
the interim with all those tools so it

00:22:32,629 --> 00:22:37,039
comes out of editorial gets translated

00:22:34,490 --> 00:22:40,279
into ot IO it gets ingested into the

00:22:37,039 --> 00:22:42,320
next tool using ot IO that tool makes

00:22:40,279 --> 00:22:45,889
its own changes and publishes out an OT

00:22:42,320 --> 00:22:49,009
io the nice part is that it allows us to

00:22:45,889 --> 00:22:53,299
well currently we're using those OTA O's

00:22:49,009 --> 00:22:55,610
to track timing playback speed playback

00:22:53,299 --> 00:22:58,909
order obviously in transitions so we're

00:22:55,610 --> 00:23:00,830
still pretty basic but again we're able

00:22:58,909 --> 00:23:03,740
to kind of keep share that media across

00:23:00,830 --> 00:23:05,330
different type of storage services along

00:23:03,740 --> 00:23:07,999
the way we're also storing metadata

00:23:05,330 --> 00:23:10,669
inside of the OT O's so we're keeping

00:23:07,999 --> 00:23:14,570
pipeline IDs in there this allows us to

00:23:10,669 --> 00:23:16,369
keep track of what a shot actually is no

00:23:14,570 --> 00:23:17,509
matter how much the clip information

00:23:16,369 --> 00:23:20,509
itself changes and becomes

00:23:17,509 --> 00:23:21,919
unrecognizable but in essence we're

00:23:20,509 --> 00:23:23,869
giving everyone in the entire pipeline

00:23:21,919 --> 00:23:27,020
the ability to contribute to the timing

00:23:23,869 --> 00:23:28,940
of the sequence using a variety

00:23:27,020 --> 00:23:30,290
of editors that we have in it they can

00:23:28,940 --> 00:23:32,059
create new versions they can push it

00:23:30,290 --> 00:23:33,320
back to editorial editorial then

00:23:32,059 --> 00:23:36,980
round-trips it and we track the entire

00:23:33,320 --> 00:23:39,160
thing yeah we have a lot of editors they

00:23:36,980 --> 00:23:41,000
want to at each level of the pipeline

00:23:39,160 --> 00:23:43,610
people want to be able to at least

00:23:41,000 --> 00:23:45,230
suggest timing changes so last but not

00:23:43,610 --> 00:23:48,980
least things that we're working on for

00:23:45,230 --> 00:23:50,090
the future we are looking our next big

00:23:48,980 --> 00:23:54,440
thing is going to be multi-layer

00:23:50,090 --> 00:23:57,890
timelines like the ability to do stacks

00:23:54,440 --> 00:24:01,700
and things like that live in the

00:23:57,890 --> 00:24:03,650
timeline it would allow us to express

00:24:01,700 --> 00:24:05,179
much richer multiple shot transitions

00:24:03,650 --> 00:24:07,520
and picture-in-picture we do a lot of

00:24:05,179 --> 00:24:09,230
picture-in-picture and tracking picture

00:24:07,520 --> 00:24:11,450
and picture throughout the timeline in

00:24:09,230 --> 00:24:13,580
an AF format is incredibly complicated

00:24:11,450 --> 00:24:16,790
and in an EDL format is almost

00:24:13,580 --> 00:24:18,380
impossible complex transitions kind of

00:24:16,790 --> 00:24:21,890
falls out of that three movie

00:24:18,380 --> 00:24:23,030
transitions things like that it's kind

00:24:21,890 --> 00:24:24,860
of a stack it's kind of a

00:24:23,030 --> 00:24:26,690
picture-in-picture it's neither of those

00:24:24,860 --> 00:24:29,540
at the same time so tracking mat is

00:24:26,690 --> 00:24:32,030
going to be a next big step native media

00:24:29,540 --> 00:24:33,950
generated on the fly when you ingest the

00:24:32,030 --> 00:24:36,080
oti oh that's essentially a hook script

00:24:33,950 --> 00:24:37,910
which was kind of interesting so that's

00:24:36,080 --> 00:24:41,150
one of our next big projects that were

00:24:37,910 --> 00:24:43,220
kind of embarking on and then one the

00:24:41,150 --> 00:24:45,500
ability to track the change of a shot

00:24:43,220 --> 00:24:47,960
over time like the hierarchy of that

00:24:45,500 --> 00:24:49,700
shot or history of that shot essentially

00:24:47,960 --> 00:24:51,410
the ability to know that this was a

00:24:49,700 --> 00:24:53,690
previous shot and now it's a production

00:24:51,410 --> 00:24:55,760
shot and then it might become it might

00:24:53,690 --> 00:24:57,620
be two shots that became one or one shot

00:24:55,760 --> 00:25:00,050
that became two and tracking that

00:24:57,620 --> 00:25:01,760
through the OT i/o timeline as it comes

00:25:00,050 --> 00:25:04,910
in and out of editorial will be really

00:25:01,760 --> 00:25:07,490
powerful for our tracking down stream so

00:25:04,910 --> 00:25:11,540
ot IO has made a lot of aspects of our

00:25:07,490 --> 00:25:14,059
timing pipeline a lot easier but as Josh

00:25:11,540 --> 00:25:15,740
spoke to earlier right now we're still

00:25:14,059 --> 00:25:17,840
having to do a bunch of the transition

00:25:15,740 --> 00:25:20,000
layers between our applications so we're

00:25:17,840 --> 00:25:22,550
excited if ot IO can get better support

00:25:20,000 --> 00:25:24,170
in those aspects but also one thing

00:25:22,550 --> 00:25:26,570
being able to rely on a single

00:25:24,170 --> 00:25:29,000
documented format has been really nice

00:25:26,570 --> 00:25:31,160
for timing data through the pipe through

00:25:29,000 --> 00:25:33,050
the various pipeline because a lot of

00:25:31,160 --> 00:25:34,670
applications don't even agree on how to

00:25:33,050 --> 00:25:37,130
write certain data to certain data

00:25:34,670 --> 00:25:40,050
formats or even what a certain data

00:25:37,130 --> 00:25:42,210
format is and consists of so works

00:25:40,050 --> 00:25:56,670
see with new versions of ot IO bring us

00:25:42,210 --> 00:25:59,430
as the format library mature thanks hi

00:25:56,670 --> 00:26:01,520
everyone i'm t-bo I work for Galia it's

00:25:59,430 --> 00:26:06,210
an open source consultancy company

00:26:01,520 --> 00:26:09,360
mostly specialized in web engines chrome

00:26:06,210 --> 00:26:11,280
and and WebKit 5 etc but we have a

00:26:09,360 --> 00:26:13,050
multimedia team where we work with J's

00:26:11,280 --> 00:26:16,920
swimmer so just rumor is a

00:26:13,050 --> 00:26:19,290
cross-platform open-source multimedia

00:26:16,920 --> 00:26:21,660
framework so you can deal with audio and

00:26:19,290 --> 00:26:22,140
video for anything you work with just

00:26:21,660 --> 00:26:25,140
swimmer

00:26:22,140 --> 00:26:27,450
it basically wraps other API is like the

00:26:25,140 --> 00:26:30,120
Corazon code etc and then you can deal

00:26:27,450 --> 00:26:33,210
with it with a standardized API on top

00:26:30,120 --> 00:26:36,390
of all that it's installed on all Linux

00:26:33,210 --> 00:26:39,840
distribution by default and it's used in

00:26:36,390 --> 00:26:42,630
many industries such as TVs set-top

00:26:39,840 --> 00:26:45,990
boxes rendering farms and things like

00:26:42,630 --> 00:26:47,640
that and on top of that we have the gist

00:26:45,990 --> 00:26:51,270
remelting services which is a high-level

00:26:47,640 --> 00:26:53,790
API to do video editing only like

00:26:51,270 --> 00:26:56,130
post-production video editing where we

00:26:53,790 --> 00:27:00,990
introduce high-level concepts such as

00:26:56,130 --> 00:27:02,100
timeline projects layer strikes etc so

00:27:00,990 --> 00:27:08,100
what we thought would be very

00:27:02,100 --> 00:27:10,860
interesting for us is to to integrate a

00:27:08,100 --> 00:27:13,620
streamer and open time on Io

00:27:10,860 --> 00:27:17,460
so what we started doing is implementing

00:27:13,620 --> 00:27:21,480
XJS adapter inside open timeline area so

00:27:17,460 --> 00:27:26,880
that we could convert it or cut from any

00:27:21,480 --> 00:27:30,300
software any supported formats to to the

00:27:26,880 --> 00:27:34,200
jet stream internal format X J's and the

00:27:30,300 --> 00:27:36,630
other way also so that we are like

00:27:34,200 --> 00:27:39,650
compatible with all formats supported by

00:27:36,630 --> 00:27:41,490
over time 9 io and on top of that we

00:27:39,650 --> 00:27:43,830
implemented we wanted to have like

00:27:41,490 --> 00:27:46,200
native support inside the just emerging

00:27:43,830 --> 00:27:49,350
services for the open time 9 io format

00:27:46,200 --> 00:27:51,580
so we're implementing the GS o geofoam

00:27:49,350 --> 00:27:54,820
ro which means that

00:27:51,580 --> 00:27:57,309
you can load any file supported by OTO

00:27:54,820 --> 00:27:59,259
or not you'll find itself inside just

00:27:57,309 --> 00:28:03,279
amazing services and playback the

00:27:59,259 --> 00:28:12,039
timeline as with any other as with

00:28:03,279 --> 00:28:14,619
native XG s format so we have full

00:28:12,039 --> 00:28:16,210
support of open timeline area inside the

00:28:14,619 --> 00:28:18,610
destroy waiting services which means

00:28:16,210 --> 00:28:20,259
that you can just play back J's lunch is

00:28:18,610 --> 00:28:22,179
a very simple command-line tool that

00:28:20,259 --> 00:28:23,859
allows you to you can describe a

00:28:22,179 --> 00:28:25,600
timeline with a specific format or you

00:28:23,859 --> 00:28:28,029
can load like an external timeline from

00:28:25,600 --> 00:28:31,509
a file so here the first example we just

00:28:28,029 --> 00:28:33,249
play a food Oh Cho and it just like

00:28:31,509 --> 00:28:37,600
plays back doing everything internally

00:28:33,249 --> 00:28:38,830
as if it was X J's file I mean yeah just

00:28:37,600 --> 00:28:41,739
a description of the timeline we just

00:28:38,830 --> 00:28:43,840
support it then you can render that in

00:28:41,739 --> 00:28:46,090
the format you MA so here in the second

00:28:43,840 --> 00:28:49,299
example we just load the food at audio

00:28:46,090 --> 00:28:52,419
file Oh Jo and we're underway to

00:28:49,299 --> 00:28:54,730
rendered food that MKV and we specify

00:28:52,419 --> 00:28:58,389
the formats like we say okay we want

00:28:54,730 --> 00:28:59,649
that to be in matroska with a v1 video

00:28:58,389 --> 00:29:02,230
codec and

00:28:59,649 --> 00:29:04,299
opus has an audio codec so that just

00:29:02,230 --> 00:29:08,169
like randos the timelines described by

00:29:04,299 --> 00:29:13,659
the food a toteal file and we can also

00:29:08,169 --> 00:29:17,649
use a J's lunch like Co version tool so

00:29:13,659 --> 00:29:19,629
here we can just like launch food at XML

00:29:17,649 --> 00:29:22,179
which will be in that case like Final

00:29:19,629 --> 00:29:23,739
Cut Pro XML file and just save it on

00:29:22,179 --> 00:29:25,539
disk so it's very similar to dojo

00:29:23,739 --> 00:29:27,129
converting but we can just use like the

00:29:25,539 --> 00:29:30,179
essence because that's a feature that we

00:29:27,129 --> 00:29:33,009
already added it all like natively

00:29:30,179 --> 00:29:42,070
supported in jazz so we can take avenjet

00:29:33,009 --> 00:29:44,879
of take advantage of that I think you

00:29:42,070 --> 00:29:44,879
missed the slide

00:29:45,570 --> 00:29:51,690
this light was about we actually have

00:29:48,060 --> 00:29:55,140
went one step down but all that and we

00:29:51,690 --> 00:29:56,670
implement GSD mixer inside gstreamer so

00:29:55,140 --> 00:30:00,600
that inside Jess trimmer we have like

00:29:56,670 --> 00:30:02,460
full support of editorial files format

00:30:00,600 --> 00:30:07,230
and like if you have a jet stream herb

00:30:02,460 --> 00:30:09,810
bass player you can just play Final Cut

00:30:07,230 --> 00:30:12,300
Pro let's say fire code profiles and we

00:30:09,810 --> 00:30:14,100
internally just like run a GS timeline

00:30:12,300 --> 00:30:17,910
and play it back as if it was like a

00:30:14,100 --> 00:30:22,200
native multimedia file and all that

00:30:17,910 --> 00:30:23,940
allows us to in video editing

00:30:22,200 --> 00:30:26,640
application that choose the destroying

00:30:23,940 --> 00:30:28,920
services we can just like load a file

00:30:26,640 --> 00:30:30,840
that was edited in Final Cut Pro X for

00:30:28,920 --> 00:30:33,270
example and then just load it in DTV

00:30:30,840 --> 00:30:36,180
which is the video editing tool that we

00:30:33,270 --> 00:30:41,870
build on top of the destroy building

00:30:36,180 --> 00:30:44,820
services so it's pretty pretty nice and

00:30:41,870 --> 00:30:47,550
in the future we are planning on moving

00:30:44,820 --> 00:30:51,030
to for the GS Ocho for Mara would like

00:30:47,550 --> 00:30:53,670
to use the C++ API some bits are missing

00:30:51,030 --> 00:30:55,500
as you cannot like to do conversion with

00:30:53,670 --> 00:30:58,860
the adapters with the plain C++ API

00:30:55,500 --> 00:31:01,410
right now from what I can see something

00:30:58,860 --> 00:31:03,780
to be done I guess and while walking

00:31:01,410 --> 00:31:07,590
actually working on implementing listed

00:31:03,780 --> 00:31:09,840
timeless in the XG so2 adapter we have

00:31:07,590 --> 00:31:12,330
added support for nested timelines

00:31:09,840 --> 00:31:17,130
recently in GS itself and now we'd just

00:31:12,330 --> 00:31:19,560
leverage that you know Jo and all that

00:31:17,130 --> 00:31:21,240
work is all in just from a master so you

00:31:19,560 --> 00:31:23,340
can just grab it you have to build

00:31:21,240 --> 00:31:26,010
master right now but like in six months

00:31:23,340 --> 00:31:29,580
is going to be released all that our own

00:31:26,010 --> 00:31:36,800
six months and then we provide binaries

00:31:29,580 --> 00:31:40,260
for Mac Windows Linux obviously and and

00:31:36,800 --> 00:31:42,360
iOS and Android also not very

00:31:40,260 --> 00:31:46,610
interesting but is but you could use

00:31:42,360 --> 00:31:46,610
that they are - thank you

00:31:50,940 --> 00:32:01,420
okay next up we have unity percent hello

00:31:58,870 --> 00:32:04,030
I'm Matthew Muller I'm the technical

00:32:01,420 --> 00:32:08,110
project manager for film animation a

00:32:04,030 --> 00:32:11,230
unity and hi I'm Simon would I help

00:32:08,110 --> 00:32:12,670
animation studios use game technology

00:32:11,230 --> 00:32:14,950
and we're their tech team behind

00:32:12,670 --> 00:32:17,380
integration yeah so we've been working

00:32:14,950 --> 00:32:19,270
with Simon's team for the past year to

00:32:17,380 --> 00:32:22,240
improve the integration of unity into

00:32:19,270 --> 00:32:26,950
production pipelines which are three

00:32:22,240 --> 00:32:29,800
areas the inter up with DC sees a Python

00:32:26,950 --> 00:32:31,660
integration into unity and our subject

00:32:29,800 --> 00:32:35,290
which is open timeline IO which is based

00:32:31,660 --> 00:32:40,290
on the Python integration we also have

00:32:35,290 --> 00:32:43,210
images which have nothing to do and so

00:32:40,290 --> 00:32:46,390
integrating editorial into a real-time

00:32:43,210 --> 00:32:49,000
pipeline you get the control and

00:32:46,390 --> 00:32:51,940
organization of your project over

00:32:49,000 --> 00:32:54,970
sequences through the shots linking to a

00:32:51,940 --> 00:32:57,700
media or portion of the media this media

00:32:54,970 --> 00:33:00,400
can be a snapshot or video like in a

00:32:57,700 --> 00:33:01,960
classic editorial thing but what is

00:33:00,400 --> 00:33:05,140
unique about real-time is like you

00:33:01,960 --> 00:33:07,720
actually actually get a live assembly

00:33:05,140 --> 00:33:09,670
also control of a live media which is a

00:33:07,720 --> 00:33:13,570
live assembly of your lighting your set

00:33:09,670 --> 00:33:17,830
dressing your FX and so on and that you

00:33:13,570 --> 00:33:23,220
can turn on and off so yeah a heavy use

00:33:17,830 --> 00:33:27,010
of nested timelines is way so usage

00:33:23,220 --> 00:33:30,190
storyboard you start to expect taking

00:33:27,010 --> 00:33:33,310
the storyboard media and editorial you

00:33:30,190 --> 00:33:35,500
can import it in unity editor as a

00:33:33,310 --> 00:33:40,690
reference for blocking out placing

00:33:35,500 --> 00:33:42,520
cameras placing actors maybe to mocap or

00:33:40,690 --> 00:33:47,380
you can start some people start directly

00:33:42,520 --> 00:33:49,570
blocking out in unity doing like again

00:33:47,380 --> 00:33:52,450
placing characters doing previous doing

00:33:49,570 --> 00:33:55,000
layout and exporting it as a reference

00:33:52,450 --> 00:33:59,049
for for the animatic storyboard or even

00:33:55,000 --> 00:34:02,110
the mood board and also we see upon

00:33:59,049 --> 00:34:04,389
tamanna also as a good bridge to between

00:34:02,110 --> 00:34:06,999
project many production management asset

00:34:04,389 --> 00:34:10,179
management and actually assembling the

00:34:06,999 --> 00:34:14,200
scenes together and following the

00:34:10,179 --> 00:34:17,819
progress of the of the production and if

00:34:14,200 --> 00:34:21,839
you connect the things the two things

00:34:17,819 --> 00:34:24,220
going in and out basically you have the

00:34:21,839 --> 00:34:26,020
editorial which happens at the place

00:34:24,220 --> 00:34:28,270
where it makes sense you if it makes

00:34:26,020 --> 00:34:29,770
sense to change the editorial in unity

00:34:28,270 --> 00:34:32,559
because you have control over the media

00:34:29,770 --> 00:34:34,299
it's good if you have somebody who is

00:34:32,559 --> 00:34:35,589
using a third-party tool then you can

00:34:34,299 --> 00:34:38,889
export it because it makes more sense

00:34:35,589 --> 00:34:42,190
there let's see we actually have a video

00:34:38,889 --> 00:34:49,379
in an open timeline area talk to show

00:34:42,190 --> 00:34:49,379
that in action I hope it works yes

00:34:50,940 --> 00:34:56,129
there's no music

00:34:52,599 --> 00:34:56,129
I have to see

00:34:56,320 --> 00:35:02,980
what's happening you okay yeah so we're

00:35:00,970 --> 00:35:03,340
we're in we're in storyboard here we're

00:35:02,980 --> 00:35:06,250
in

00:35:03,340 --> 00:35:08,200
- boom storyboard Pro and so we're using

00:35:06,250 --> 00:35:10,000
they're exporting system into edia

00:35:08,200 --> 00:35:12,820
that's are really really fast you can

00:35:10,000 --> 00:35:14,920
drag and drop it inside to unity

00:35:12,820 --> 00:35:18,460
automatically it sends the timeline we

00:35:14,920 --> 00:35:22,690
set up the the overlay on the in the

00:35:18,460 --> 00:35:24,280
viewport and now we're showing like okay

00:35:22,690 --> 00:35:25,570
well now I have that as a reference I

00:35:24,280 --> 00:35:29,050
can start building out I can start

00:35:25,570 --> 00:35:31,270
creating assets inside of unity using

00:35:29,050 --> 00:35:33,720
their asset modeling tools but none of

00:35:31,270 --> 00:35:36,820
this is in project management right now

00:35:33,720 --> 00:35:38,020
okay now yet so now I can export its all

00:35:36,820 --> 00:35:39,520
those stuff all those things who are

00:35:38,020 --> 00:35:41,440
reference and they can be uploaded up

00:35:39,520 --> 00:35:46,510
into shotgun or whatever your revision

00:35:41,440 --> 00:35:48,070
tracking tool is and now we're going to

00:35:46,510 --> 00:35:50,080
go back again so we can actually go back

00:35:48,070 --> 00:35:52,270
again we can go back into we can do this

00:35:50,080 --> 00:35:53,530
at the conform pop back into storyboard

00:35:52,270 --> 00:35:55,900
as well so once you've made some changes

00:35:53,530 --> 00:35:57,190
then you need some extra detail added to

00:35:55,900 --> 00:36:00,100
place you can send it back to storyboard

00:35:57,190 --> 00:36:02,800
so here we recall in the the sequence

00:36:00,100 --> 00:36:04,660
and plus the editorial and then you can

00:36:02,800 --> 00:36:07,390
load it automatically in the editing

00:36:04,660 --> 00:36:09,760
file then you change the editing your

00:36:07,390 --> 00:36:13,750
export back and when you open it again

00:36:09,760 --> 00:36:15,850
in a in unity you have the editorial

00:36:13,750 --> 00:36:20,140
which has changed we're seeing popping

00:36:15,850 --> 00:36:24,340
up boom yeah that's it so yeah we've

00:36:20,140 --> 00:36:27,190
been working on that for for the past

00:36:24,340 --> 00:36:29,110
few months and it's accessible its

00:36:27,190 --> 00:36:32,070
private alpha but we want to have as

00:36:29,110 --> 00:36:35,650
soon as possible it usable by anyone

00:36:32,070 --> 00:36:37,510
okay some of the features some of the

00:36:35,650 --> 00:36:39,880
features yes we have the timeline

00:36:37,510 --> 00:36:41,830
integration so it's integrated the LTI

00:36:39,880 --> 00:36:44,440
outcomes into and builds a unity

00:36:41,830 --> 00:36:46,930
timeline which we use the scripted

00:36:44,440 --> 00:36:50,440
importer inside of unity so it's treated

00:36:46,930 --> 00:36:54,340
as like a native unity asset now and you

00:36:50,440 --> 00:36:56,080
can use you can render out a media clips

00:36:54,340 --> 00:36:58,780
directly from the timeline using the

00:36:56,080 --> 00:37:01,000
Unity recorder and then we're using the

00:36:58,780 --> 00:37:05,290
adapters so we're doing the export out

00:37:01,000 --> 00:37:07,090
and conform back using well EDL and XML

00:37:05,290 --> 00:37:07,640
when we go over to like up the shotgun

00:37:07,090 --> 00:37:11,240
or up

00:37:07,640 --> 00:37:13,850
- boom or over to Adobe Premiere and

00:37:11,240 --> 00:37:16,370
it's yeah it's fully customizable both

00:37:13,850 --> 00:37:18,440
in Python and in c-sharp so the Python

00:37:16,370 --> 00:37:20,480
for the unity plugin allows you to go

00:37:18,440 --> 00:37:23,840
into c-sharp land as well so you can

00:37:20,480 --> 00:37:27,500
start writing c-sharp ot IO code and

00:37:23,840 --> 00:37:31,460
it's supported on Windows Linux Center

00:37:27,500 --> 00:37:33,020
Wes and Mac and some of the future work

00:37:31,460 --> 00:37:35,510
so we're building out a roadmap and

00:37:33,020 --> 00:37:38,270
we're really curious to hear from you so

00:37:35,510 --> 00:37:39,740
please come and see us next some of the

00:37:38,270 --> 00:37:42,320
things we're thinking about is multi

00:37:39,740 --> 00:37:44,660
takes the audio edit so that's why I'm

00:37:42,320 --> 00:37:47,930
interested in the AAF going over into

00:37:44,660 --> 00:37:50,180
Pro Tools transitions handing them at

00:37:47,930 --> 00:37:52,160
least keeping them and not losing that

00:37:50,180 --> 00:37:54,740
data doing the just-in-time

00:37:52,160 --> 00:37:56,720
linking with the real-time media so if I

00:37:54,740 --> 00:37:58,340
at the moment we expect the scene to be

00:37:56,720 --> 00:38:00,620
there before we load the ot IO and then

00:37:58,340 --> 00:38:03,440
we use the media linker to bind it we

00:38:00,620 --> 00:38:06,470
want to do more work on the you know

00:38:03,440 --> 00:38:08,450
export or publish and then back with the

00:38:06,470 --> 00:38:12,590
conform and repeat as well as supporting

00:38:08,450 --> 00:38:14,060
more editorial tools and inclusion as as

00:38:12,590 --> 00:38:16,250
much she was saying you know it allows

00:38:14,060 --> 00:38:18,590
us to have editorial wherever it makes

00:38:16,250 --> 00:38:20,210
sense it's you to the first in is the

00:38:18,590 --> 00:38:22,790
first in and the last doubt is that

00:38:20,210 --> 00:38:24,920
that's the same now with ot IO we think

00:38:22,790 --> 00:38:26,930
it's awesome because it allows the Edit

00:38:24,920 --> 00:38:28,610
into actually in the game engine and let

00:38:26,930 --> 00:38:31,070
the game engine be part part of that

00:38:28,610 --> 00:38:36,970
story so one of the open questions is

00:38:31,070 --> 00:38:39,770
about that linking of that linking of

00:38:36,970 --> 00:38:41,270
shots to the real-time media how do we

00:38:39,770 --> 00:38:42,590
how do we have what how does how does

00:38:41,270 --> 00:38:45,050
that work and how does it make sense how

00:38:42,590 --> 00:38:47,120
is he for example us like maybe USD

00:38:45,050 --> 00:38:49,070
press open tomorrow and then you have

00:38:47,120 --> 00:38:50,990
full control of the relationships

00:38:49,070 --> 00:38:53,240
between your shots and your progression

00:38:50,990 --> 00:38:54,430
so that would be great thank you thank

00:38:53,240 --> 00:39:03,030
you

00:38:54,430 --> 00:39:03,030
[Applause]

00:39:06,500 --> 00:39:12,360
hi so my name is Vince Trinculo I'm a

00:39:09,480 --> 00:39:15,780
senior software developer at Marvel

00:39:12,360 --> 00:39:17,400
Studios and we started using open time

00:39:15,780 --> 00:39:21,050
money oh about two years ago when I

00:39:17,400 --> 00:39:26,580
started at Marvel to start using some

00:39:21,050 --> 00:39:30,120
self-service stuff services - for our

00:39:26,580 --> 00:39:34,530
editorial staff to do turnovers for our

00:39:30,120 --> 00:39:37,080
di basically at Marvel we turnaround

00:39:34,530 --> 00:39:38,970
movies pretty quickly and also a warning

00:39:37,080 --> 00:39:44,550
there are no images in this one because

00:39:38,970 --> 00:39:46,740
I'm not allowed to show you any so all

00:39:44,550 --> 00:39:49,230
right so what Oh TA o provided us was a

00:39:46,740 --> 00:39:50,850
reliable EDL parsing mechanism basically

00:39:49,230 --> 00:39:54,810
our method of handing over her di is

00:39:50,850 --> 00:40:00,450
using the traditional gmx 3600 ETL as a

00:39:54,810 --> 00:40:02,640
standard which is standard and since

00:40:00,450 --> 00:40:05,550
this in Python it made us easy for us to

00:40:02,640 --> 00:40:09,300
do a django development develop them

00:40:05,550 --> 00:40:11,400
there it's self-service and since it's

00:40:09,300 --> 00:40:13,560
self-service and it's a web we're using

00:40:11,400 --> 00:40:14,940
a web integration there it makes it

00:40:13,560 --> 00:40:18,180
accurate real-time feedback for

00:40:14,940 --> 00:40:19,980
editorial staff and it allows us to

00:40:18,180 --> 00:40:21,960
share our code easily within our

00:40:19,980 --> 00:40:26,490
environment including any changes we

00:40:21,960 --> 00:40:31,410
make for our customer development so in

00:40:26,490 --> 00:40:34,710
its Django it's Python easy what we did

00:40:31,410 --> 00:40:36,090
in in Okayama NATO was we extended it a

00:40:34,710 --> 00:40:39,630
little bit we needed some extra many

00:40:36,090 --> 00:40:40,800
they does so we added and unfortunately

00:40:39,630 --> 00:40:42,870
haven't published this back into open

00:40:40,800 --> 00:40:44,100
timeline arrows so we should talk about

00:40:42,870 --> 00:40:46,530
doing that whether we want to do that or

00:40:44,100 --> 00:40:48,630
not but our integration of Marvel has a

00:40:46,530 --> 00:40:55,200
bit of a custom integration into the cmx

00:40:48,630 --> 00:40:58,650
3600 adapter and basically that allowed

00:40:55,200 --> 00:41:00,540
us to do all of our self services and

00:40:58,650 --> 00:41:00,990
and that environment works pretty well

00:41:00,540 --> 00:41:04,140
for us

00:41:00,990 --> 00:41:06,030
oops and I'm sorry it supposed to be

00:41:04,140 --> 00:41:08,820
animated and

00:41:06,030 --> 00:41:18,900
that about it and it works pretty well

00:41:08,820 --> 00:41:22,590
so thank you open timely oh hey everyone

00:41:18,900 --> 00:41:25,650
my name is Eric Ronnie key and I work at

00:41:22,590 --> 00:41:29,280
Netflix we're in the beginning of our

00:41:25,650 --> 00:41:31,350
adoption of a IO but we're already

00:41:29,280 --> 00:41:33,900
really excited to be contributing and

00:41:31,350 --> 00:41:35,340
using it in a few places so today I'm

00:41:33,900 --> 00:41:38,040
going to talk about two places where

00:41:35,340 --> 00:41:39,960
we're using it one use case where I was

00:41:38,040 --> 00:41:42,690
able to enhance a developer experience

00:41:39,960 --> 00:41:45,060
taking advantage of the ot IO toolset

00:41:42,690 --> 00:41:47,370
and then another place we were able to

00:41:45,060 --> 00:41:51,780
create a new trailer conform workflow

00:41:47,370 --> 00:41:53,940
using open timeline so the first one is

00:41:51,780 --> 00:41:56,280
this a developer experience use case we

00:41:53,940 --> 00:41:58,980
have a lot of these sort of one-minute

00:41:56,280 --> 00:42:01,800
trailers that are cut in Adobe Premiere

00:41:58,980 --> 00:42:04,380
by our in-house editing staff and what

00:42:01,800 --> 00:42:10,230
they do is they start out with the full

00:42:04,380 --> 00:42:13,020
set of finished videos from a TV series

00:42:10,230 --> 00:42:15,480
and from that they select about a minute

00:42:13,020 --> 00:42:19,710
worth of content to generate the trailer

00:42:15,480 --> 00:42:21,780
so what's ended up happening is that oh

00:42:19,710 --> 00:42:23,550
you know what I jumped ahead in my

00:42:21,780 --> 00:42:25,080
explanation actually what we're going to

00:42:23,550 --> 00:42:28,140
talk about first and this developer

00:42:25,080 --> 00:42:31,160
experience is sort of the things that

00:42:28,140 --> 00:42:33,870
end up falling on editors to do that

00:42:31,160 --> 00:42:37,050
aren't really part of editorial ideally

00:42:33,870 --> 00:42:41,820
in a film editor is working on selecting

00:42:37,050 --> 00:42:44,520
bits of material from all these these

00:42:41,820 --> 00:42:47,450
sources all your dailies to creatively

00:42:44,520 --> 00:42:49,470
assemble that into a compelling story

00:42:47,450 --> 00:42:52,620
unfortunately what ends up happening is

00:42:49,470 --> 00:42:55,020
on editorial staff it'll fall to them to

00:42:52,620 --> 00:42:56,970
do any sort of simple compositing

00:42:55,020 --> 00:42:59,610
operation like just quickly cutting

00:42:56,970 --> 00:43:01,500
together two clips or doing a quick

00:42:59,610 --> 00:43:03,210
overlay that's not really something an

00:43:01,500 --> 00:43:05,420
editor wants to do and it Rob's time

00:43:03,210 --> 00:43:07,680
from them making creative decisions so

00:43:05,420 --> 00:43:10,530
internally we've created a service that

00:43:07,680 --> 00:43:12,690
will helps with being able to do these

00:43:10,530 --> 00:43:16,660
sort of simple editorial operations and

00:43:12,690 --> 00:43:18,579
this is what the the request format

00:43:16,660 --> 00:43:20,920
for it what's like so if you look at it

00:43:18,579 --> 00:43:22,990
you see there's a few tracks in there

00:43:20,920 --> 00:43:26,589
each track is composed of a few clips

00:43:22,990 --> 00:43:29,410
and it's a overlaying some graphics on

00:43:26,589 --> 00:43:32,260
some base media it's you know pretty

00:43:29,410 --> 00:43:34,930
simplistic but actually if you look at

00:43:32,260 --> 00:43:37,150
this there are two errors when this

00:43:34,930 --> 00:43:40,180
timeline renders out there is a big

00:43:37,150 --> 00:43:42,579
blank spot in it and the audio ends too

00:43:40,180 --> 00:43:45,849
early so can you see why that's

00:43:42,579 --> 00:43:48,880
happening from this yeah

00:43:45,849 --> 00:43:51,250
I'm not stupid great at converting in

00:43:48,880 --> 00:43:53,859
and out of twenty at fourth forty eight

00:43:51,250 --> 00:43:57,119
thousand twenty four thousand over one

00:43:53,859 --> 00:44:00,210
third one thousand once in my head so

00:43:57,119 --> 00:44:03,430
what I did is I went ahead and I built a

00:44:00,210 --> 00:44:05,770
adapter which is something that opened

00:44:03,430 --> 00:44:07,900
timeline il lets you do so we we built

00:44:05,770 --> 00:44:09,880
this adapter we submit it to our

00:44:07,900 --> 00:44:13,510
internal paper industry and that means

00:44:09,880 --> 00:44:16,839
that any any developer within that Plex

00:44:13,510 --> 00:44:19,180
can go ahead and pip install this ot IO

00:44:16,839 --> 00:44:21,130
adapter for this specific service and

00:44:19,180 --> 00:44:23,289
that gives them full support for

00:44:21,130 --> 00:44:26,369
generating both reading and writing

00:44:23,289 --> 00:44:28,539
those requests jason's

00:44:26,369 --> 00:44:31,150
using the opening timeline io and

00:44:28,539 --> 00:44:34,150
because we're an open timeline io that

00:44:31,150 --> 00:44:36,010
gives us ot IO view now for free so now

00:44:34,150 --> 00:44:39,190
that we look at this trailer with this

00:44:36,010 --> 00:44:41,440
adapter support we can see why there's

00:44:39,190 --> 00:44:43,240
that blank spot up here at the top and

00:44:41,440 --> 00:44:45,099
you can see why the audio is ending

00:44:43,240 --> 00:44:48,579
quickly what this does is this makes it

00:44:45,099 --> 00:44:51,670
very easy for a service developer when

00:44:48,579 --> 00:44:53,799
they run into an issue to get really

00:44:51,670 --> 00:44:55,180
good visual feedback to explore their

00:44:53,799 --> 00:44:56,859
timeline this is a simple case but

00:44:55,180 --> 00:45:00,910
imagine once you get into timelines

00:44:56,859 --> 00:45:03,849
they're two hours long and they have no

00:45:00,910 --> 00:45:06,520
tons of tracks so that's been really

00:45:03,849 --> 00:45:08,529
effective for us the second is the

00:45:06,520 --> 00:45:09,970
trailer conform workflow now we're back

00:45:08,529 --> 00:45:12,279
on the right track we have these

00:45:09,970 --> 00:45:14,200
one-minute trailers we generate and what

00:45:12,279 --> 00:45:17,200
they do is they start these editors

00:45:14,200 --> 00:45:19,930
working premiere start with full seasons

00:45:17,200 --> 00:45:22,720
of TV series that they're working from

00:45:19,930 --> 00:45:25,569
and they cut these things down now we

00:45:22,720 --> 00:45:27,420
are a cloud native we have cloud native

00:45:25,569 --> 00:45:29,700
pipelines in our workflow

00:45:27,420 --> 00:45:32,309
so those editors are working on proxy

00:45:29,700 --> 00:45:34,019
material and the idea is that once

00:45:32,309 --> 00:45:36,660
they've arrived at in edit a trailer

00:45:34,019 --> 00:45:39,900
they'll pull down the ProRes and conform

00:45:36,660 --> 00:45:41,849
that well there's issues with that it

00:45:39,900 --> 00:45:45,359
can be able to a bit tough to download

00:45:41,849 --> 00:45:47,460
all that data so what we've done is sort

00:45:45,359 --> 00:45:49,170
of a two-pronged approach to adding

00:45:47,460 --> 00:45:51,420
efficiency to this particular workflow

00:45:49,170 --> 00:45:54,390
one we've created a premier panel

00:45:51,420 --> 00:45:56,910
plug-in that will go and walk through

00:45:54,390 --> 00:46:01,529
the timeline and analyze what's actually

00:45:56,910 --> 00:46:04,799
used in the media and then secondly we

00:46:01,529 --> 00:46:07,650
take that and we turn that into a very

00:46:04,799 --> 00:46:10,140
simplified JSON format which is a

00:46:07,650 --> 00:46:12,769
manifest of what frames were actually

00:46:10,140 --> 00:46:15,089
used in the the output trailer so

00:46:12,769 --> 00:46:16,950
actually if you look closely at this you

00:46:15,089 --> 00:46:19,859
can notice that we're encoding open

00:46:16,950 --> 00:46:21,720
timeline i/o style rational times and

00:46:19,859 --> 00:46:27,059
you'll notice that right there that's an

00:46:21,720 --> 00:46:29,039
enormous number that's a premier tick so

00:46:27,059 --> 00:46:32,759
if we look at this and we say ok this is

00:46:29,039 --> 00:46:34,200
the full set of episodes the full length

00:46:32,759 --> 00:46:35,940
episodes and you'll notice that little

00:46:34,200 --> 00:46:40,109
teeny one up there is the intro sequence

00:46:35,940 --> 00:46:43,680
to this TV show and we apply that data

00:46:40,109 --> 00:46:45,509
we had from before this is done in a

00:46:43,680 --> 00:46:47,700
docker container that runs locally on

00:46:45,509 --> 00:46:49,470
that machine this is the timeline of

00:46:47,700 --> 00:46:50,869
what actually got used in that output

00:46:49,470 --> 00:46:53,609
trailer so it's just those little

00:46:50,869 --> 00:46:55,799
slivers all in there are the material

00:46:53,609 --> 00:46:57,630
that's actually used so within the

00:46:55,799 --> 00:47:00,420
stalker container running locally on the

00:46:57,630 --> 00:47:03,329
editors machine we can then build a new

00:47:00,420 --> 00:47:06,869
timeline where and we fill in all those

00:47:03,329 --> 00:47:09,150
blank spaces with just black synthesized

00:47:06,869 --> 00:47:12,599
frames and so we now have a timeline

00:47:09,150 --> 00:47:16,230
where is all blank space with a locally

00:47:12,599 --> 00:47:17,940
generated black frame and just the

00:47:16,230 --> 00:47:21,720
little slivers where they're actually

00:47:17,940 --> 00:47:23,970
using real content we can then use mxf

00:47:21,720 --> 00:47:25,559
for app or sorry we use two pieces of

00:47:23,970 --> 00:47:28,170
technology we have something called meds

00:47:25,559 --> 00:47:30,599
FS that we use internally that allows us

00:47:28,170 --> 00:47:34,650
to mount the frames that are actually

00:47:30,599 --> 00:47:38,400
used and then by linking in those black

00:47:34,650 --> 00:47:39,650
frames we can use the MXF wrapper to

00:47:38,400 --> 00:47:43,010
pull our original

00:47:39,650 --> 00:47:45,890
IMF frames in cash an IMF to local

00:47:43,010 --> 00:47:48,320
storage that is only the stuff we need

00:47:45,890 --> 00:47:52,100
so we're data German company let's talk

00:47:48,320 --> 00:47:54,980
about the data of about four hours of

00:47:52,100 --> 00:47:56,840
source content we only used about 59

00:47:54,980 --> 00:47:59,960
seconds of it and the output trailer

00:47:56,840 --> 00:48:04,090
that maps to about 0.4 percent of the

00:47:59,960 --> 00:48:09,050
source material which means we only use

00:48:04,090 --> 00:48:11,780
1.3 gigabytes of 388 point 2 gigabytes

00:48:09,050 --> 00:48:13,700
worth of frames so let's turn on to

00:48:11,780 --> 00:48:16,520
download time if you're running at a

00:48:13,700 --> 00:48:20,180
gigabit per second you go from you know

00:48:16,520 --> 00:48:22,460
around 52 minutes to 11 seconds of

00:48:20,180 --> 00:48:24,920
download time this is time an editor can

00:48:22,460 --> 00:48:26,360
then spend plussing out that trailer and

00:48:24,920 --> 00:48:28,670
building something that's going to

00:48:26,360 --> 00:48:32,090
connect our members with the content

00:48:28,670 --> 00:48:35,140
they're going to love so that's about it

00:48:32,090 --> 00:48:35,140
thank you guys very much

00:48:40,640 --> 00:48:45,060
all right thank you to all of our guest

00:48:43,740 --> 00:48:47,820
presenters it's really cool to see how

00:48:45,060 --> 00:48:50,940
this is being used in all kinds of

00:48:47,820 --> 00:48:52,650
really cool contexts just to wrap up we

00:48:50,940 --> 00:48:54,210
want to talk about some of our like next

00:48:52,650 --> 00:48:57,690
steps and there's a little bit of time

00:48:54,210 --> 00:49:01,080
for Q&A some of the things on our

00:48:57,690 --> 00:49:03,120
roadmap coming up are we have an

00:49:01,080 --> 00:49:05,940
addition like a revision to how we

00:49:03,120 --> 00:49:07,530
actually store time so I've got a lot in

00:49:05,940 --> 00:49:09,120
a feedback that currently that we're

00:49:07,530 --> 00:49:10,920
storing things as floating-point numbers

00:49:09,120 --> 00:49:13,890
occasionally that ends up with some

00:49:10,920 --> 00:49:16,560
roundoff errors and there's there's some

00:49:13,890 --> 00:49:18,060
rough edges to that sometimes so we have

00:49:16,560 --> 00:49:19,650
a proposal that we haven't posted

00:49:18,060 --> 00:49:21,870
publicly yet but we've been sort of

00:49:19,650 --> 00:49:23,970
working on to to move forward on that

00:49:21,870 --> 00:49:26,760
and do something that we think will work

00:49:23,970 --> 00:49:29,580
better we've also been working on the

00:49:26,760 --> 00:49:32,700
timing effects and trying to handle like

00:49:29,580 --> 00:49:35,660
a fancier more complicated ones and as

00:49:32,700 --> 00:49:37,710
well as a redesigned to how we handle

00:49:35,660 --> 00:49:41,700
the cost dissolves and chicken

00:49:37,710 --> 00:49:43,500
transitions so a more like no easy way

00:49:41,700 --> 00:49:46,230
of looking at that is we can look at

00:49:43,500 --> 00:49:48,240
this sort of feature matrix so along one

00:49:46,230 --> 00:49:50,940
side we have a bunch of features of ot

00:49:48,240 --> 00:49:52,620
IO and then across the top we have like

00:49:50,940 --> 00:49:55,260
all the different file formats and like

00:49:52,620 --> 00:49:57,960
so was representing for each adapter can

00:49:55,260 --> 00:49:59,520
we read and/or write these different

00:49:57,960 --> 00:50:02,130
features of things so they can all

00:49:59,520 --> 00:50:04,080
handle us you know single track of clips

00:50:02,130 --> 00:50:05,550
but as we go down we've been sort of

00:50:04,080 --> 00:50:07,860
building out more and more features so

00:50:05,550 --> 00:50:11,130
the ones highlighted in blue are newly

00:50:07,860 --> 00:50:13,880
added recently so the AF support is now

00:50:11,130 --> 00:50:16,350
both read and write for most of those

00:50:13,880 --> 00:50:18,360
there's a couple of pieces that need to

00:50:16,350 --> 00:50:21,300
be filled in there the gstreamer adapter

00:50:18,360 --> 00:50:23,520
is new and then where we're sort of

00:50:21,300 --> 00:50:26,430
headed next with this is the kind of

00:50:23,520 --> 00:50:28,590
fancy speed effects here so we have sort

00:50:26,430 --> 00:50:31,710
of sporadic support for that in some of

00:50:28,590 --> 00:50:33,510
the adapters and we have a conversation

00:50:31,710 --> 00:50:35,520
going on with avid about trying to get

00:50:33,510 --> 00:50:39,300
the non linear speed effects information

00:50:35,520 --> 00:50:42,360
out of Media Composer and we're trying

00:50:39,300 --> 00:50:44,970
to kind of thread a align there of not

00:50:42,360 --> 00:50:46,950
bringing in all the complexity of the

00:50:44,970 --> 00:50:48,339
superset of how everybody does timing

00:50:46,950 --> 00:50:50,559
effects but to have like

00:50:48,339 --> 00:50:55,239
nicer a middle ground that captures the

00:50:50,559 --> 00:50:57,880
sort of creative intent of that and with

00:50:55,239 --> 00:51:00,130
that I think we were open for Q&A we

00:50:57,880 --> 00:51:01,839
have a few minutes um you can ask us or

00:51:00,130 --> 00:51:04,229
any of the guest presenters for

00:51:01,839 --> 00:51:04,229
questions

00:51:16,569 --> 00:51:20,769
sorry two parts one could you go back to

00:51:19,359 --> 00:51:22,559
the other slides as well we do the QA

00:51:20,769 --> 00:51:25,059
there's a lot of good information there

00:51:22,559 --> 00:51:28,299
second is I was wondering if you get

00:51:25,059 --> 00:51:30,119
into a little bit more of the vendor

00:51:28,299 --> 00:51:32,949
partnerships and software vendors

00:51:30,119 --> 00:51:35,589
specifically who are participating in

00:51:32,949 --> 00:51:38,919
how and how TI o support is going to be

00:51:35,589 --> 00:51:42,640
integrated into those software packages

00:51:38,919 --> 00:51:45,189
and used variety of ways anything that

00:51:42,640 --> 00:51:47,919
you could share there sure we've had

00:51:45,189 --> 00:51:49,569
some conversations with autodesk about

00:51:47,919 --> 00:51:51,669
some of their products

00:51:49,569 --> 00:51:54,219
we haven't gotten into super sort of

00:51:51,669 --> 00:51:58,150
details with them yet and then we've had

00:51:54,219 --> 00:52:00,549
some sort of you know pixar specific

00:51:58,150 --> 00:52:03,160
conversations with avid and then some

00:52:00,549 --> 00:52:06,039
informal conversations with the final

00:52:03,160 --> 00:52:08,709
cut team and i think that's kind of part

00:52:06,039 --> 00:52:10,269
of our hope with sort of representing

00:52:08,709 --> 00:52:11,859
like a broader community through the

00:52:10,269 --> 00:52:13,329
academy software foundation or just

00:52:11,859 --> 00:52:15,969
through having more involvement for more

00:52:13,329 --> 00:52:17,949
people that if we can create like a

00:52:15,969 --> 00:52:19,989
stronger bond with with those those

00:52:17,949 --> 00:52:21,549
third-party applications that we think

00:52:19,989 --> 00:52:24,069
that would be great I mean seeing what

00:52:21,549 --> 00:52:26,169
the unity folks just showed of like we

00:52:24,069 --> 00:52:28,749
want that level of support in like all

00:52:26,169 --> 00:52:31,269
the applications right and so having

00:52:28,749 --> 00:52:33,309
having a company really sort of embrace

00:52:31,269 --> 00:52:34,959
that and move forward on that like

00:52:33,309 --> 00:52:37,979
devote resources to that I think that's

00:52:34,959 --> 00:52:40,150
kind of like where we want this to go

00:52:37,979 --> 00:52:42,309
but I would say it's sort of like early

00:52:40,150 --> 00:52:44,829
days on some of those relationships and

00:52:42,309 --> 00:52:47,529
I totally sympathize a lot of them are

00:52:44,829 --> 00:52:49,329
sort of kind of waiting to see does this

00:52:47,529 --> 00:52:51,969
have adoption you know this is something

00:52:49,329 --> 00:52:53,709
they should spend time on and and I

00:52:51,969 --> 00:52:55,659
think we're part of what we're trying to

00:52:53,709 --> 00:52:57,909
show us yes this is like this was

00:52:55,659 --> 00:52:59,559
growing in the industry people are

00:52:57,909 --> 00:53:01,329
finding finding use for it but there's

00:52:59,559 --> 00:53:03,609
definitely room to go ahead with that so

00:53:01,329 --> 00:53:05,259
if you have a specific like third-party

00:53:03,609 --> 00:53:07,329
applications that you really really want

00:53:05,259 --> 00:53:09,880
ot IO support in like ask them directly

00:53:07,329 --> 00:53:12,219
say hey you know Marvel wants this or

00:53:09,880 --> 00:53:14,140
whatever your company is you know if we

00:53:12,219 --> 00:53:15,699
really want this and that can help them

00:53:14,140 --> 00:53:17,849
to kind of I can see the importance of

00:53:15,699 --> 00:53:17,849
it

00:53:20,369 --> 00:53:23,580
last question

00:53:25,210 --> 00:53:29,349
so right now shotgun is said they were

00:53:27,250 --> 00:53:31,630
working on some open timeline i/o based

00:53:29,349 --> 00:53:33,670
stuff for doing like grease pencil type

00:53:31,630 --> 00:53:36,730
overlays okay I'm curious if you have

00:53:33,670 --> 00:53:38,260
any plans to either standardize some

00:53:36,730 --> 00:53:39,670
kind of best practices or maybe there's

00:53:38,260 --> 00:53:41,140
another format for that sort of thing I

00:53:39,670 --> 00:53:43,030
know you said you're not really focused

00:53:41,140 --> 00:53:44,770
on recording pixel data but maybe

00:53:43,030 --> 00:53:46,030
there's some kind of standard way to do

00:53:44,770 --> 00:53:48,250
that so I can imagine it could be really

00:53:46,030 --> 00:53:50,109
useful if you're doing interchange on

00:53:48,250 --> 00:53:52,119
timelines to sort of support those notes

00:53:50,109 --> 00:53:54,130
hitting a lot of different targets you

00:53:52,119 --> 00:53:56,710
can see you know the full graphical

00:53:54,130 --> 00:53:58,720
overlay and time yeah it's interesting

00:53:56,710 --> 00:54:00,460
our in-house animation system actually

00:53:58,720 --> 00:54:02,109
has those kinds of overlays so we were

00:54:00,460 --> 00:54:03,910
just talking about like how should we do

00:54:02,109 --> 00:54:05,950
that should we embed that in the file

00:54:03,910 --> 00:54:08,230
should we point to an external file that

00:54:05,950 --> 00:54:09,550
those kinds of things so um I think we

00:54:08,230 --> 00:54:09,880
don't have any concrete plans for that

00:54:09,550 --> 00:54:11,980
right now

00:54:09,880 --> 00:54:14,680
and actually that's the first I've heard

00:54:11,980 --> 00:54:16,900
of the shotgun feature related to that

00:54:14,680 --> 00:54:18,820
but I'm but we go we'd love to sort of

00:54:16,900 --> 00:54:20,080
engage in that conversation I think one

00:54:18,820 --> 00:54:21,760
of the other things that were kinda

00:54:20,080 --> 00:54:23,589
hoping happens is that some of those

00:54:21,760 --> 00:54:25,630
conversations happen a little more kind

00:54:23,589 --> 00:54:27,430
of face-to-face or via email and like

00:54:25,630 --> 00:54:29,530
the more we can draw those to sort of

00:54:27,430 --> 00:54:32,170
happen on like either our mailing list

00:54:29,530 --> 00:54:33,849
or the github issues or something so

00:54:32,170 --> 00:54:37,089
that we can we can draw in the voices

00:54:33,849 --> 00:54:38,410
that are that are interested in that and

00:54:37,089 --> 00:54:41,740
can really participate in that because

00:54:38,410 --> 00:54:42,940
certainly having having that variety of

00:54:41,740 --> 00:54:44,440
people to work on it like there's some

00:54:42,940 --> 00:54:44,859
really really good ideas that can come

00:54:44,440 --> 00:54:47,320
from

00:54:44,859 --> 00:54:49,270
maybe unexpected places or just fake

00:54:47,320 --> 00:54:55,650
places that we don't have the contacts

00:54:49,270 --> 00:54:58,930
for so so yeah oh the question was about

00:54:55,650 --> 00:55:02,500
attaching like sketches like markup

00:54:58,930 --> 00:55:07,990
overlay things like those drawings onto

00:55:02,500 --> 00:55:10,690
the timeline all right I think we're out

00:55:07,990 --> 00:55:15,390
of time thank you everybody for coming

00:55:10,690 --> 00:55:15,390

YouTube URL: https://www.youtube.com/watch?v=aGfR0pu3k6E


