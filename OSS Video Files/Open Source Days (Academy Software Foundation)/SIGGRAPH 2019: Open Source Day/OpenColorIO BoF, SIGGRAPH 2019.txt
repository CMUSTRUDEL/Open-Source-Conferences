Title: OpenColorIO BoF, SIGGRAPH 2019
Publication date: 2019-08-22
Playlist: SIGGRAPH 2019: Open Source Day
Description: 
	Discuss topics related to the open source project OpenColorIO, including new governance as an Academy Software Foundation hosted project, progress on OCIO version 2, and Q&A. Part of Open Source Day at SIGGRAPH 2019, hosted by Academy Software Foundation.

Speakers:
Michael Dolan, Sony Pictures Imageworks
Doug Walker, Autodesk
Patrick Hodoul, Autodesk
Mark Boorer, Industrial Light & Magic
Captions: 
	00:00:00,060 --> 00:00:07,350
thanks everyone for sticking around

00:00:02,220 --> 00:00:09,360
following aces so I'm Michael Dolan um

00:00:07,350 --> 00:00:12,200
color scientists at Imageworks and

00:00:09,360 --> 00:00:16,410
current chair of open claro project

00:00:12,200 --> 00:00:18,029
through the a SWF so our agenda today

00:00:16,410 --> 00:00:21,359
i'm going to give a brief update on the

00:00:18,029 --> 00:00:23,760
overall project kind of our transition

00:00:21,359 --> 00:00:25,560
into academy software foundation

00:00:23,760 --> 00:00:27,150
I mean how that's gone and some of the

00:00:25,560 --> 00:00:28,830
updates that have come as a result of

00:00:27,150 --> 00:00:31,439
that to our code into our infrastructure

00:00:28,830 --> 00:00:33,930
I'm and then Doug Walker and Patrick

00:00:31,439 --> 00:00:35,969
O'Toole will cover some of the open

00:00:33,930 --> 00:00:38,610
Calero version 2 work that's been going

00:00:35,969 --> 00:00:41,250
on which is sure everyone's excited to

00:00:38,610 --> 00:00:42,989
hear about that and then mark for from

00:00:41,250 --> 00:00:45,870
ILM will cover some work he's been doing

00:00:42,989 --> 00:00:47,969
on a new companion project to open

00:00:45,870 --> 00:00:50,190
killari oh god open color math and then

00:00:47,969 --> 00:00:54,510
we'll have some time for discussion and

00:00:50,190 --> 00:00:56,430
Q&A at the end so yes so said I'm gonna

00:00:54,510 --> 00:00:59,100
give a brief project update so as you

00:00:56,430 --> 00:01:01,079
probably aware open color i/o we join

00:00:59,100 --> 00:01:03,809
the Academy Software Foundation this

00:01:01,079 --> 00:01:07,560
past year it was a unanimous vote back

00:01:03,809 --> 00:01:10,080
in January to join and that has sparked

00:01:07,560 --> 00:01:12,750
a lot of discussion and growth for the

00:01:10,080 --> 00:01:14,780
project and sort of reorganization of a

00:01:12,750 --> 00:01:17,400
lot of our structure so one of the first

00:01:14,780 --> 00:01:18,659
objectives as when B became Academy

00:01:17,400 --> 00:01:20,189
Software Foundation project was

00:01:18,659 --> 00:01:22,380
establishing technical steering

00:01:20,189 --> 00:01:24,090
committee which we have pretty good

00:01:22,380 --> 00:01:27,330
representation in the industry on that

00:01:24,090 --> 00:01:30,229
I'll point out those names briefly we

00:01:27,330 --> 00:01:32,759
meet weekly for a TSC meeting on Mondays

00:01:30,229 --> 00:01:36,299
it's public you're welcome to join if

00:01:32,759 --> 00:01:37,979
you ever want to have input part of the

00:01:36,299 --> 00:01:42,000
handoff from Imageworks

00:01:37,979 --> 00:01:43,979
to a SWF so our license remain the same

00:01:42,000 --> 00:01:46,979
we didn't change any of that so nothing

00:01:43,979 --> 00:01:50,189
too scary we moved our mail lists to the

00:01:46,979 --> 00:01:52,860
SWF if you're we're on them previously

00:01:50,189 --> 00:01:55,259
and you're probably on the new ones and

00:01:52,860 --> 00:01:58,979
nice thing is with the new mail list

00:01:55,259 --> 00:02:01,320
system we have with sov FIO we also have

00:01:58,979 --> 00:02:03,619
calendars and wikis and other things for

00:02:01,320 --> 00:02:06,810
its kind of aiding community discussion

00:02:03,619 --> 00:02:08,250
we are will be moving the repo soon to

00:02:06,810 --> 00:02:09,690
the Academy Software Foundation github

00:02:08,250 --> 00:02:11,129
account it's currently still on

00:02:09,690 --> 00:02:13,340
Imageworks while we were working out

00:02:11,129 --> 00:02:16,640
some remaining

00:02:13,340 --> 00:02:20,220
issues before we were able to move it

00:02:16,640 --> 00:02:22,709
also so if you looking in our github so

00:02:20,220 --> 00:02:24,360
part of joining a SWF is really

00:02:22,709 --> 00:02:28,650
establishing a better governance

00:02:24,360 --> 00:02:30,629
structure and our policies on everything

00:02:28,650 --> 00:02:33,120
from contributing governance security

00:02:30,629 --> 00:02:35,040
there's also a project charter a new

00:02:33,120 --> 00:02:37,739
clas so all of that is in our github

00:02:35,040 --> 00:02:39,060
repo please reference it it's a great

00:02:37,739 --> 00:02:40,980
way if you're interested in contributing

00:02:39,060 --> 00:02:45,629
or learning more about the project those

00:02:40,980 --> 00:02:46,799
are a great place to start so one of the

00:02:45,629 --> 00:02:48,959
things we've been working through this

00:02:46,799 --> 00:02:51,329
last year is when you join the SWF you

00:02:48,959 --> 00:02:52,799
become an incubator in Cubase in project

00:02:51,329 --> 00:02:54,390
which means you're a part of the

00:02:52,799 --> 00:02:55,920
organization but you're the foundation

00:02:54,390 --> 00:02:59,099
but you have to kind of you know work

00:02:55,920 --> 00:03:02,069
through some objectives before you

00:02:59,099 --> 00:03:03,829
become an adopted project and so we have

00:03:02,069 --> 00:03:06,989
been working hard at that this past year

00:03:03,829 --> 00:03:09,209
one of the steps we completed for that

00:03:06,989 --> 00:03:11,430
was achieving our core infrastructure

00:03:09,209 --> 00:03:13,140
initiative badge which is a program

00:03:11,430 --> 00:03:15,060
sponsored through the Linux Foundation

00:03:13,140 --> 00:03:18,060
which basically just make sure that our

00:03:15,060 --> 00:03:20,669
code is following good protocols of

00:03:18,060 --> 00:03:22,730
security and testability and you know

00:03:20,669 --> 00:03:24,930
all the other things to make software

00:03:22,730 --> 00:03:26,340
everyone be comfortable using it in

00:03:24,930 --> 00:03:27,989
their application and in their

00:03:26,340 --> 00:03:29,760
facilities make sure that we're you know

00:03:27,989 --> 00:03:32,419
following best practices so we've

00:03:29,760 --> 00:03:35,310
achieved a passing status on that badge

00:03:32,419 --> 00:03:37,769
and then the other thing is we have to

00:03:35,310 --> 00:03:39,900
pass a license scan before we that was

00:03:37,769 --> 00:03:41,609
sort of the blocker with us moving our

00:03:39,900 --> 00:03:43,260
repository to the Academy Software

00:03:41,609 --> 00:03:45,720
Foundation is passing a license scan and

00:03:43,260 --> 00:03:47,700
I'll talk a little bit more about sort

00:03:45,720 --> 00:03:49,470
of what we had to do to solve some

00:03:47,700 --> 00:03:53,069
issues that were in our repository in a

00:03:49,470 --> 00:03:55,650
little bit but but the issues that we

00:03:53,069 --> 00:03:58,109
did have have been solved so all the

00:03:55,650 --> 00:03:59,940
requirements for us to become an adopted

00:03:58,109 --> 00:04:02,849
project have been fulfilled and so we'll

00:03:59,940 --> 00:04:04,680
be up for a vote soon to become the

00:04:02,849 --> 00:04:08,370
second adopted project following open

00:04:04,680 --> 00:04:10,260
BTB this is our technical steering

00:04:08,370 --> 00:04:12,299
committee and so I'm the chair dog

00:04:10,260 --> 00:04:15,510
walker is our chief architect and then

00:04:12,299 --> 00:04:17,940
Sean Cooper Edina is our aces tech rep

00:04:15,510 --> 00:04:20,340
so he's sort of our person to be our

00:04:17,940 --> 00:04:22,320
official representative with aces and

00:04:20,340 --> 00:04:25,860
you can see we have representation from

00:04:22,320 --> 00:04:27,310
ILM Dean AG Imageworks foundry Autodesk

00:04:25,860 --> 00:04:30,250
and Framestore

00:04:27,310 --> 00:04:32,260
and you know open to other ideas of

00:04:30,250 --> 00:04:34,540
people in the community who would want

00:04:32,260 --> 00:04:37,510
to participate so please you know reach

00:04:34,540 --> 00:04:39,700
out our meeting notes are all on a

00:04:37,510 --> 00:04:43,000
github repo so you can see what we're

00:04:39,700 --> 00:04:44,800
talking about and that this link will

00:04:43,000 --> 00:04:47,650
have our schedule these slides will be

00:04:44,800 --> 00:04:50,500
posted to the OCIO mail lists and slack

00:04:47,650 --> 00:04:54,100
following this so don't feel like I've

00:04:50,500 --> 00:04:56,650
taken notes you can get all this info so

00:04:54,100 --> 00:04:59,890
one of the big things we've been

00:04:56,650 --> 00:05:03,120
tackling in our incubation process along

00:04:59,890 --> 00:05:07,300
with open VDB in openexr is re

00:05:03,120 --> 00:05:09,160
structuring our CI and build and all the

00:05:07,300 --> 00:05:12,310
infrastructure that makes open Calero

00:05:09,160 --> 00:05:13,780
and one of the goals for swf this past

00:05:12,310 --> 00:05:15,340
year was to get all these projects and

00:05:13,780 --> 00:05:17,680
it's more of a uniform continuous

00:05:15,340 --> 00:05:19,930
integration platform and so that we all

00:05:17,680 --> 00:05:22,810
kind of are working the same way and you

00:05:19,930 --> 00:05:25,300
know can share ideas and so there's been

00:05:22,810 --> 00:05:27,190
a SWF CI working group that we've all

00:05:25,300 --> 00:05:29,710
been a part of discussing these things

00:05:27,190 --> 00:05:31,960
between the projects and collaborating

00:05:29,710 --> 00:05:35,010
on solving them before we got there

00:05:31,960 --> 00:05:37,860
though thankfully mark or kindly

00:05:35,010 --> 00:05:41,320
restructured our repository and

00:05:37,860 --> 00:05:43,480
modernized RC makes so we're in a good

00:05:41,320 --> 00:05:45,700
place there and then following that was

00:05:43,480 --> 00:05:49,120
our CI work with the other projects and

00:05:45,700 --> 00:05:50,860
so part of that is the as all the

00:05:49,120 --> 00:05:53,260
projects needs to be F together we

00:05:50,860 --> 00:05:55,390
agreed that as your pipelines was the

00:05:53,260 --> 00:05:57,010
right approach for our CI primarily

00:05:55,390 --> 00:06:00,550
because it has full cross-platform

00:05:57,010 --> 00:06:02,650
support Windows Mac OS and Linux so we

00:06:00,550 --> 00:06:05,530
have successfully moved our entire CI

00:06:02,650 --> 00:06:07,300
system to Azure and it's working on all

00:06:05,530 --> 00:06:10,380
three platforms in one place which is

00:06:07,300 --> 00:06:13,750
really helpful for testing our builds

00:06:10,380 --> 00:06:15,670
and also one of the big things behind us

00:06:13,750 --> 00:06:17,950
er that was of interest to us is that

00:06:15,670 --> 00:06:20,200
you can hook up your own machines to run

00:06:17,950 --> 00:06:23,590
builds on which will allow us to support

00:06:20,200 --> 00:06:25,330
testing our GPU functionality a big part

00:06:23,590 --> 00:06:26,740
of open Calero is having a GPU render

00:06:25,330 --> 00:06:29,290
which is something we can't currently

00:06:26,740 --> 00:06:32,170
test in CI so that's a big thing we want

00:06:29,290 --> 00:06:34,030
to solve and so some preliminary work to

00:06:32,170 --> 00:06:35,530
test that has been done and we're that's

00:06:34,030 --> 00:06:39,729
future work is to actually get that

00:06:35,530 --> 00:06:40,779
integrated into our CI there's part of

00:06:39,729 --> 00:06:43,209
the working group was

00:06:40,779 --> 00:06:46,659
some of the projects together we've

00:06:43,209 --> 00:06:49,709
created a VFX reference platform

00:06:46,659 --> 00:06:52,179
implementation docker images it's it's a

00:06:49,709 --> 00:06:54,249
essentially it's a hierarchy of dr. of

00:06:52,179 --> 00:06:56,589
docker images that inherit each other

00:06:54,249 --> 00:07:01,089
that build a common VFX reference

00:06:56,589 --> 00:07:03,099
platform image / and we tagged it per

00:07:01,089 --> 00:07:05,529
year and so there there's like a base

00:07:03,099 --> 00:07:06,599
image and then a common image inherits

00:07:05,529 --> 00:07:09,219
from that and it has all the

00:07:06,599 --> 00:07:11,379
dependencies that all the a SWF projects

00:07:09,219 --> 00:07:13,989
rely on and everything is you know

00:07:11,379 --> 00:07:15,519
adherence to the strict spec VFX

00:07:13,989 --> 00:07:18,099
reference platform and then each of the

00:07:15,519 --> 00:07:19,959
individual projects has an image on top

00:07:18,099 --> 00:07:23,139
of that so open call area we have a

00:07:19,959 --> 00:07:25,449
docker image just available to anyone

00:07:23,139 --> 00:07:28,149
who wants to have a you know easy way to

00:07:25,449 --> 00:07:31,509
build and test the project in all our

00:07:28,149 --> 00:07:33,999
Linux CI is using that docker platform

00:07:31,509 --> 00:07:36,729
now which is which is great and so as we

00:07:33,999 --> 00:07:39,189
move towards VFX reference platform 2020

00:07:36,729 --> 00:07:41,169
and Python 3 and all these things will

00:07:39,189 --> 00:07:43,839
be able to be really efficiently testing

00:07:41,169 --> 00:07:45,429
it and everyone that's you know working

00:07:43,839 --> 00:07:47,259
on their third party or you know all the

00:07:45,429 --> 00:07:49,419
companies they're writing software and

00:07:47,259 --> 00:07:51,749
sticking to the VFX reference platform

00:07:49,419 --> 00:07:53,979
spec will know that our stuff will work

00:07:51,749 --> 00:07:56,229
and then the other side of it is we

00:07:53,979 --> 00:07:58,329
implemented sonar cloud for our static

00:07:56,229 --> 00:08:00,069
analysis so we could really test our

00:07:58,329 --> 00:08:02,079
code and make sure that we're you know

00:08:00,069 --> 00:08:04,269
following good security practices and

00:08:02,079 --> 00:08:06,219
code quality and we've already had a

00:08:04,269 --> 00:08:08,439
number of pull requests towards

00:08:06,219 --> 00:08:12,279
resolving some of the issues that Sun or

00:08:08,439 --> 00:08:14,619
cloud has helped us find in our code so

00:08:12,279 --> 00:08:16,179
I mention license scan earlier the

00:08:14,619 --> 00:08:18,369
reason we haven't been able to move our

00:08:16,179 --> 00:08:20,559
project over at a SWF github account was

00:08:18,369 --> 00:08:22,689
because if any of you familiar with open

00:08:20,559 --> 00:08:25,479
call area repo we've had a lot of our

00:08:22,689 --> 00:08:28,059
dependencies embedded in archives in

00:08:25,479 --> 00:08:29,889
this directory called ext and that was

00:08:28,059 --> 00:08:31,239
there to make it so that if anyone

00:08:29,889 --> 00:08:32,949
wanted to build up in Calero you could

00:08:31,239 --> 00:08:34,329
just clone a repo just build you don't

00:08:32,949 --> 00:08:36,399
have to worry about pulling dependencies

00:08:34,329 --> 00:08:38,019
and building everything else so that was

00:08:36,399 --> 00:08:39,579
really convenient but it presents

00:08:38,019 --> 00:08:41,740
various problems because some of those

00:08:39,579 --> 00:08:44,079
projects don't have Foss compatible

00:08:41,740 --> 00:08:46,029
licenses which is a requirement of the

00:08:44,079 --> 00:08:48,850
you know Linux Foundation projects so

00:08:46,029 --> 00:08:50,199
we've I've just finished some work or

00:08:48,850 --> 00:08:52,590
we're in still in progress and kind of

00:08:50,199 --> 00:08:53,880
completing it or we basically have

00:08:52,590 --> 00:08:55,890
tripped all those third-party

00:08:53,880 --> 00:09:00,570
dependencies out of the Oakland Claro

00:08:55,890 --> 00:09:03,180
repo so now if you clone if you clone

00:09:00,570 --> 00:09:04,260
our master branch and try to build it

00:09:03,180 --> 00:09:06,570
it's going to look for those

00:09:04,260 --> 00:09:09,630
dependencies on your system so you can

00:09:06,570 --> 00:09:11,070
or you can point openko you know you can

00:09:09,630 --> 00:09:14,340
point see make towards where your

00:09:11,070 --> 00:09:16,170
dependencies exist and build but one of

00:09:14,340 --> 00:09:17,430
the objectives we wanted to tackle with

00:09:16,170 --> 00:09:19,140
that too is that because people have

00:09:17,430 --> 00:09:20,820
grown so used to building open claro and

00:09:19,140 --> 00:09:22,710
it's very easy to just you know clone

00:09:20,820 --> 00:09:25,610
and build we wanted to still be able to

00:09:22,710 --> 00:09:29,370
kind of support that ease of build for

00:09:25,610 --> 00:09:31,950
users and so we rewrote a lot of our c

00:09:29,370 --> 00:09:33,390
mcfine modules so that if you don't have

00:09:31,950 --> 00:09:36,030
the dependencies on your system and if

00:09:33,390 --> 00:09:38,280
you don't feel like building them we

00:09:36,030 --> 00:09:40,340
there is an option to option OCIO

00:09:38,280 --> 00:09:44,550
install ext packages which will actually

00:09:40,340 --> 00:09:47,640
clone those upstream github repos and it

00:09:44,550 --> 00:09:48,900
will build and statically link all the

00:09:47,640 --> 00:09:51,720
dependencies that build time

00:09:48,900 --> 00:09:53,460
automatically so we're trying to still

00:09:51,720 --> 00:09:56,700
support that kind of ease of build but

00:09:53,460 --> 00:09:59,100
for facilities that want to have more

00:09:56,700 --> 00:10:04,500
control and you know and use their own

00:09:59,100 --> 00:10:06,510
stuff that's supported as well just

00:10:04,500 --> 00:10:10,890
highlight this year we did release open

00:10:06,510 --> 00:10:13,770
Calero 1.1.1 and that was primarily just

00:10:10,890 --> 00:10:15,300
a bug fix build but as there was an

00:10:13,770 --> 00:10:17,430
announcement made recently that new 12

00:10:15,300 --> 00:10:19,920
from foundry will be using that

00:10:17,430 --> 00:10:22,200
primarily because it fixes some bugs we

00:10:19,920 --> 00:10:24,990
had with default view and display

00:10:22,200 --> 00:10:28,230
handling so that release has been up for

00:10:24,990 --> 00:10:29,940
a while and we are in discussion as to

00:10:28,230 --> 00:10:33,150
whether or not we'll do another point

00:10:29,940 --> 00:10:35,040
release bug fix release in the near

00:10:33,150 --> 00:10:37,620
future which more than likely there's

00:10:35,040 --> 00:10:39,840
there's always a number of pull requests

00:10:37,620 --> 00:10:43,530
that we could back port from our master

00:10:39,840 --> 00:10:46,290
branch to the RB 1.1 and we're

00:10:43,530 --> 00:10:50,300
discussing that are open to input there

00:10:46,290 --> 00:10:52,620
as well oh and then also the 1.1 to 1

00:10:50,300 --> 00:10:55,250
opened up compatibility with newer

00:10:52,620 --> 00:10:58,470
versions of open image i/o which we had

00:10:55,250 --> 00:11:01,080
versions 1.9 a newer implemented some

00:10:58,470 --> 00:11:03,000
C++ 11 functionality which was

00:11:01,080 --> 00:11:04,770
incompatible

00:11:03,000 --> 00:11:08,460
the way our apps were being built

00:11:04,770 --> 00:11:10,730
previously so now we you can build the

00:11:08,460 --> 00:11:14,130
open Calero apps like OCIO convert and

00:11:10,730 --> 00:11:15,630
all all the apps that we supply those

00:11:14,130 --> 00:11:20,130
will build with newer versions of open

00:11:15,630 --> 00:11:23,940
image i/o which is a good thing

00:11:20,130 --> 00:11:28,050
Tomas couldn't be here but Mexico but he

00:11:23,940 --> 00:11:31,200
has been working on the Aces 1.1 OC out

00:11:28,050 --> 00:11:33,620
config which is it's currently available

00:11:31,200 --> 00:11:36,480
in his Fork of the open Collier configs

00:11:33,620 --> 00:11:39,120
repository but he couldn't be here but

00:11:36,480 --> 00:11:41,070
he supply to some information I could

00:11:39,120 --> 00:11:43,200
present on kind of talking about some of

00:11:41,070 --> 00:11:45,480
the things that's tackling of course a

00:11:43,200 --> 00:11:48,990
lot of you are aware of the changes in

00:11:45,480 --> 00:11:51,510
Aces 1.1 but um it's adds support for

00:11:48,990 --> 00:11:53,880
the single stage tone scale output

00:11:51,510 --> 00:11:56,660
transforms for the blue light artifact

00:11:53,880 --> 00:12:00,540
fix LMT that was discussed in the Aces

00:11:56,660 --> 00:12:02,550
meeting and the unnecessary white space

00:12:00,540 --> 00:12:04,770
and let's remove so a lot of the lot

00:12:02,550 --> 00:12:08,100
files that were bundled in the earlier

00:12:04,770 --> 00:12:10,920
versions of the Aces o co config had a

00:12:08,100 --> 00:12:12,450
had a lot of whitespace prior to the

00:12:10,920 --> 00:12:14,340
numbers in the lot and which was just

00:12:12,450 --> 00:12:16,340
kind of you know taking up space in the

00:12:14,340 --> 00:12:18,540
files so that has been kind of reduced

00:12:16,340 --> 00:12:22,920
to just be a little bit more efficient

00:12:18,540 --> 00:12:24,510
and then he implemented a post process

00:12:22,920 --> 00:12:27,120
after the lots are generated which will

00:12:24,510 --> 00:12:28,710
go in and remove any man's with and

00:12:27,120 --> 00:12:31,710
replace them as zeros which will help

00:12:28,710 --> 00:12:33,570
nuke not complain about that and other

00:12:31,710 --> 00:12:36,930
applications that don't like to have

00:12:33,570 --> 00:12:38,670
Mane's and lots the precision of the

00:12:36,930 --> 00:12:41,610
Lots has been increased there's now

00:12:38,670 --> 00:12:44,400
inverse versions of a lot of the

00:12:41,610 --> 00:12:46,710
transfer function lots like the linear

00:12:44,400 --> 00:12:48,960
tests RGB you know srgb to linear it

00:12:46,710 --> 00:12:51,840
goes both ways for higher roundtrip

00:12:48,960 --> 00:12:55,470
precision and then a big one I know for

00:12:51,840 --> 00:12:57,720
frost is there's a new log to shaper the

00:12:55,470 --> 00:12:59,540
previous shaper had a limited domain

00:12:57,720 --> 00:13:02,040
that could support so if you had really

00:12:59,540 --> 00:13:03,570
like really saturated colors and over

00:13:02,040 --> 00:13:05,460
exposed areas you could encounter

00:13:03,570 --> 00:13:06,690
clipping issues which would diverge

00:13:05,460 --> 00:13:09,390
pretty greatly from other

00:13:06,690 --> 00:13:14,300
implementations of the Aces OD T's so

00:13:09,390 --> 00:13:18,230
the new shaper uses the same ACCC domain

00:13:14,300 --> 00:13:21,410
negative some 0.25 the positive 10.27

00:13:18,230 --> 00:13:25,640
stops and so that should resolve a lot

00:13:21,410 --> 00:13:27,649
of of those issues that's up for me I'm

00:13:25,640 --> 00:13:29,959
going to hand it over to dog and Patrick

00:13:27,649 --> 00:13:39,770
to talk about open Calero version two

00:13:29,959 --> 00:13:42,350
thank you thank you Michael actually

00:13:39,770 --> 00:13:43,670
before we get into a ob2 I just wanted

00:13:42,350 --> 00:13:46,040
to mention that that you know the big

00:13:43,670 --> 00:13:47,839
change from last year for those of you

00:13:46,040 --> 00:13:50,620
who were here at the birds of a feather

00:13:47,839 --> 00:13:53,390
is that we're now part of the a SWF and

00:13:50,620 --> 00:13:55,910
from my point of view that's a great

00:13:53,390 --> 00:13:58,270
thing it makes it easier to contribute

00:13:55,910 --> 00:14:00,560
to the project it makes it easier for

00:13:58,270 --> 00:14:03,410
you to find out what's going on with the

00:14:00,560 --> 00:14:06,250
project and track the progress but it's

00:14:03,410 --> 00:14:09,200
it doesn't come for free as Michael was

00:14:06,250 --> 00:14:11,899
going over there's there's a lot of

00:14:09,200 --> 00:14:14,750
things in terms of adopting best

00:14:11,899 --> 00:14:16,070
practices and so on and it was Michael

00:14:14,750 --> 00:14:19,430
actually who did the lion's share of

00:14:16,070 --> 00:14:21,020
that work so I just wanted to make sure

00:14:19,430 --> 00:14:25,459
that we recognize Imageworks and

00:14:21,020 --> 00:14:29,200
especially Michael for taking I was it

00:14:25,459 --> 00:14:33,980
was it was definitely a lot of work so

00:14:29,200 --> 00:14:35,180
on to open Claire IV - so I'm Doug

00:14:33,980 --> 00:14:39,200
Walker for those of you who don't know

00:14:35,180 --> 00:14:41,540
me on the project lead for OCIO v2 and

00:14:39,200 --> 00:14:44,480
I'm also serving as the chief architect

00:14:41,540 --> 00:14:46,700
for open claw Rio on the technical

00:14:44,480 --> 00:14:50,570
steering committee I'd like to introduce

00:14:46,700 --> 00:14:54,410
Patrick O'Toole so Patrick is the lead

00:14:50,570 --> 00:14:57,200
developer on the project for those of

00:14:54,410 --> 00:15:00,709
you who don't recognize Patrick you

00:14:57,200 --> 00:15:04,100
probably would recognize his avatar and

00:15:00,709 --> 00:15:05,810
his pirate avatar on github so if you've

00:15:04,100 --> 00:15:07,700
ever been on github and wonder who's

00:15:05,810 --> 00:15:09,950
who's checking in all of those open

00:15:07,700 --> 00:15:13,660
kario we separate that's checking in all

00:15:09,950 --> 00:15:16,190
the zocalo features it's now you know

00:15:13,660 --> 00:15:19,889
although otherwise I noticed you changed

00:15:16,190 --> 00:15:21,929
your your avatar - yeah

00:15:19,889 --> 00:15:28,290
chansu you can recognize it you can

00:15:21,929 --> 00:15:31,160
recognize this this is this is a SWF you

00:15:28,290 --> 00:15:36,179
know is no more messing around here so

00:15:31,160 --> 00:15:39,089
so we've been we've been busy since last

00:15:36,179 --> 00:15:41,999
time we presented at SIGGRAPH last year

00:15:39,089 --> 00:15:44,609
so Autodesk has three full-time

00:15:41,999 --> 00:15:46,230
engineers working on this so in addition

00:15:44,609 --> 00:15:49,139
to myself and Patrick we have Bernard

00:15:46,230 --> 00:15:51,839
LaFave back in Montreal who's been

00:15:49,139 --> 00:15:55,319
working with us we've merged about a

00:15:51,839 --> 00:15:57,980
hundred pr's since last SIGGRAPH 68,000

00:15:55,319 --> 00:16:00,410
lines of code approximately added

00:15:57,980 --> 00:16:05,970
increased the number of unit tests from

00:16:00,410 --> 00:16:08,879
85 to 709 709 so far and we're having

00:16:05,970 --> 00:16:10,709
monthly v2 working group meetings so for

00:16:08,879 --> 00:16:13,109
those of you who are who are interested

00:16:10,709 --> 00:16:14,939
we we have these on the web via zoom

00:16:13,109 --> 00:16:18,299
you're welcome to participate I'll give

00:16:14,939 --> 00:16:22,259
you the details for how to join that at

00:16:18,299 --> 00:16:23,879
the end but we we present the work that

00:16:22,259 --> 00:16:26,819
we've just completed and the work that

00:16:23,879 --> 00:16:28,679
we're about to start and we've gotten a

00:16:26,819 --> 00:16:32,279
lot of great feedback from people who

00:16:28,679 --> 00:16:33,929
have participated in that a little bit

00:16:32,279 --> 00:16:36,179
about the development process but before

00:16:33,929 --> 00:16:39,059
as a number of unit test is really a

00:16:36,179 --> 00:16:42,449
critical point for us because it's a way

00:16:39,059 --> 00:16:44,220
to guarantee some kind of quality it

00:16:42,449 --> 00:16:47,100
does not mean but before it was not

00:16:44,220 --> 00:16:50,040
working but not at all but just one day

00:16:47,100 --> 00:16:53,459
we will have OCI uv2 ready so it will be

00:16:50,040 --> 00:16:55,529
something to check to see how what is

00:16:53,459 --> 00:16:58,230
the code coverage but what does a unit

00:16:55,529 --> 00:17:00,600
test so but we can guarantee a level of

00:16:58,230 --> 00:17:03,419
quality for you guys which is extremely

00:17:00,600 --> 00:17:05,909
important and extremely important for us

00:17:03,419 --> 00:17:08,730
also as my guys

00:17:05,909 --> 00:17:12,179
okay so development process so after a

00:17:08,730 --> 00:17:14,880
lot of discussion and tries we now have

00:17:12,179 --> 00:17:16,769
a way to work which is efficient for

00:17:14,880 --> 00:17:18,360
everyone so if you shine for us so we

00:17:16,769 --> 00:17:21,360
can make good progress but also

00:17:18,360 --> 00:17:24,510
efficient for the community so we you

00:17:21,360 --> 00:17:28,130
have time to review a command post

00:17:24,510 --> 00:17:31,490
question or whatever so mainly what we

00:17:28,130 --> 00:17:35,590
what we are this any time there isn't a

00:17:31,490 --> 00:17:36,970
pull request we reply to reviewer oh

00:17:35,590 --> 00:17:42,470
sorry

00:17:36,970 --> 00:17:44,570
any time there is a yes far better I did

00:17:42,470 --> 00:17:46,960
you are you listening what I was saying

00:17:44,570 --> 00:17:49,940
before or just sleeping guys

00:17:46,960 --> 00:17:53,180
so any time very simple requests we need

00:17:49,940 --> 00:17:55,880
to have to reviewer and we put also

00:17:53,180 --> 00:17:59,930
deadlines with not too long for us to

00:17:55,880 --> 00:18:01,340
make some porous for normal I would say

00:17:59,930 --> 00:18:03,770
normal and big poll requests

00:18:01,340 --> 00:18:05,450
unfortunately we try to limit big poll

00:18:03,770 --> 00:18:08,480
requests but it's not always the case we

00:18:05,450 --> 00:18:10,070
are doing a huge ground walk to be able

00:18:08,480 --> 00:18:13,370
to implement all the feature you would

00:18:10,070 --> 00:18:17,240
see and this is not one line of code I'm

00:18:13,370 --> 00:18:21,710
sorry guys but for very small we accept

00:18:17,240 --> 00:18:25,760
one and it cannot quite fast

00:18:21,710 --> 00:18:29,560
we also encourage everyone to look at

00:18:25,760 --> 00:18:32,000
what we are doing so to come and see

00:18:29,560 --> 00:18:35,440
whatever command it is it doesn't matter

00:18:32,000 --> 00:18:38,840
just to have your feedback so and also

00:18:35,440 --> 00:18:42,040
after a little bit before two weeks

00:18:38,840 --> 00:18:46,010
varies or any time I try to put

00:18:42,040 --> 00:18:47,900
something a reminder everyone so you can

00:18:46,010 --> 00:18:50,150
have a look because I understand but

00:18:47,900 --> 00:18:52,550
everyone is really busy so sometimes

00:18:50,150 --> 00:18:54,740
it's good to have a reminder on that so

00:18:52,550 --> 00:18:58,460
for us it's a good improvement as you

00:18:54,740 --> 00:19:01,790
see we measure lots of stuff and because

00:18:58,460 --> 00:19:05,090
we win based on the amount of work we

00:19:01,790 --> 00:19:07,700
have to do we have to to speed a little

00:19:05,090 --> 00:19:10,450
bit so we try to find a good balance

00:19:07,700 --> 00:19:10,450
between the two

00:19:10,600 --> 00:19:18,080
right so for those of you who were here

00:19:14,600 --> 00:19:21,830
in 2017 at the birds of a feather we we

00:19:18,080 --> 00:19:26,780
presented our proposed feature set for

00:19:21,830 --> 00:19:29,780
open claro v2 there's a 16 page document

00:19:26,780 --> 00:19:31,730
that we published OCIO dev we got a lot

00:19:29,780 --> 00:19:35,570
of great feedback on that

00:19:31,730 --> 00:19:36,950
so you for those of you or have been

00:19:35,570 --> 00:19:38,570
tracking the project you've seen the

00:19:36,950 --> 00:19:40,890
list of features before so i'm not going

00:19:38,570 --> 00:19:43,470
to go through these in

00:19:40,890 --> 00:19:45,180
great detail we did that in in Prior

00:19:43,470 --> 00:19:46,560
birds of a feather sessions but just

00:19:45,180 --> 00:19:48,900
wanted to give you a sense of kind of

00:19:46,560 --> 00:19:52,500
where we are on the various features so

00:19:48,900 --> 00:19:54,720
yeah this is kind of giving you a sense

00:19:52,500 --> 00:19:57,060
these are not all the same amount of

00:19:54,720 --> 00:19:59,580
work to implement but nevertheless it's

00:19:57,060 --> 00:20:01,830
it's if you want to draw the conclusion

00:19:59,580 --> 00:20:03,570
that were a bit more than halfway

00:20:01,830 --> 00:20:07,860
through the project that would be a fair

00:20:03,570 --> 00:20:13,250
conclusion to draw so here is the

00:20:07,860 --> 00:20:13,250
release plan for open choreo v2 so our

00:20:13,520 --> 00:20:18,510
you know project estimates that Patrick

00:20:16,620 --> 00:20:20,880
and I have done indicate that we should

00:20:18,510 --> 00:20:23,550
be feature complete by SIGGRAPH of next

00:20:20,880 --> 00:20:26,700
year for those of you who have seen the

00:20:23,550 --> 00:20:29,150
VFX reference platform the draft has

00:20:26,700 --> 00:20:31,950
been out for a couple of months now the

00:20:29,150 --> 00:20:36,570
the quote for next year's reference

00:20:31,950 --> 00:20:37,620
platform is 1.1 X with v2 in calendar

00:20:36,570 --> 00:20:40,950
year 2021

00:20:37,620 --> 00:20:44,250
so we feel that feature complete by

00:20:40,950 --> 00:20:47,580
SIGGRAPH next year makes sense it would

00:20:44,250 --> 00:20:51,150
allow products to start beta testing q3

00:20:47,580 --> 00:20:54,870
q4 of next year stabilizing and bug

00:20:51,150 --> 00:20:59,850
fixing during that period with you know

00:20:54,870 --> 00:21:02,040
a stable release of the library by the

00:20:59,850 --> 00:21:05,100
end of next year and products shipping

00:21:02,040 --> 00:21:10,680
in hopefully the start of calendar year

00:21:05,100 --> 00:21:12,870
2021 so this is a this is a you know a

00:21:10,680 --> 00:21:16,200
major upgrade and we felt it was

00:21:12,870 --> 00:21:17,610
important to you give people you know

00:21:16,200 --> 00:21:19,590
good advance notice so that they can

00:21:17,610 --> 00:21:24,390
plan this into their development

00:21:19,590 --> 00:21:25,620
schedules so in terms of the

00:21:24,390 --> 00:21:28,200
compatibility and the amount of work

00:21:25,620 --> 00:21:30,870
that's going to be involved to to

00:21:28,200 --> 00:21:34,070
transition to open claro v2 from a user

00:21:30,870 --> 00:21:37,620
point of view if you're a config author

00:21:34,070 --> 00:21:40,800
v1 configs are fully supported so those

00:21:37,620 --> 00:21:42,660
should just work there are new features

00:21:40,800 --> 00:21:45,300
that are being added and to take

00:21:42,660 --> 00:21:47,130
advantage of those it will require using

00:21:45,300 --> 00:21:50,700
you know bumping the version in the

00:21:47,130 --> 00:21:52,770
config - - version 2 the syntax is the

00:21:50,700 --> 00:21:54,419
same it's basically just adding optional

00:21:52,770 --> 00:21:57,509
new fee

00:21:54,419 --> 00:22:00,659
if you're a software developer the API

00:21:57,509 --> 00:22:04,950
changes very depending on the area so

00:22:00,659 --> 00:22:09,419
for the GPU API it was necessary to make

00:22:04,950 --> 00:22:12,360
substantial changes in order to bring

00:22:09,419 --> 00:22:14,220
the GPU render up to the same level of

00:22:12,360 --> 00:22:15,870
quality that the CPU renderer provides

00:22:14,220 --> 00:22:19,499
so there are some large changes in that

00:22:15,870 --> 00:22:22,950
area for the CPU API we made some minor

00:22:19,499 --> 00:22:25,220
changes we wanted to provide direct

00:22:22,950 --> 00:22:28,110
support for integer pixel formats

00:22:25,220 --> 00:22:29,369
provide more optimization options and so

00:22:28,110 --> 00:22:33,869
forth so there are some minor changes

00:22:29,369 --> 00:22:36,299
but very simple - to adapt to and of

00:22:33,869 --> 00:22:40,289
course there will be new API calls for

00:22:36,299 --> 00:22:42,779
new features all of the work is being

00:22:40,289 --> 00:22:44,549
done in the master branch so those pull

00:22:42,779 --> 00:22:48,990
requests are going into master you can

00:22:44,549 --> 00:22:51,179
you know check the changes in the API at

00:22:48,990 --> 00:22:54,149
the v2 working group meetings that we

00:22:51,179 --> 00:22:55,440
have every month we make presentation

00:22:54,149 --> 00:22:58,259
that kind of goes through the changes to

00:22:55,440 --> 00:23:00,570
the API so and and we post those zoom

00:22:58,259 --> 00:23:03,360
sessions the recordings of the zoom

00:23:00,570 --> 00:23:06,480
sessions online so that's the best way

00:23:03,360 --> 00:23:10,139
of kind of tracking the feature progress

00:23:06,480 --> 00:23:13,110
right now if I can add something just to

00:23:10,139 --> 00:23:15,480
mention but we try to minimize the

00:23:13,110 --> 00:23:18,179
amount of changes because we would like

00:23:15,480 --> 00:23:21,269
but it's easy for developers to

00:23:18,179 --> 00:23:23,369
integrate the OCIO v2 but sometimes we

00:23:21,269 --> 00:23:27,330
have to because we internal features etc

00:23:23,369 --> 00:23:30,230
and the philosophy we following is that

00:23:27,330 --> 00:23:33,659
it will break but it you will not have

00:23:30,230 --> 00:23:37,259
side effect it's working but partially

00:23:33,659 --> 00:23:40,379
working so for the Osseo config it will

00:23:37,259 --> 00:23:42,450
load it will work as is and for the api

00:23:40,379 --> 00:23:46,110
if there is a chance you will have a big

00:23:42,450 --> 00:23:47,879
break and an easy path to change so for

00:23:46,110 --> 00:23:53,009
you it would be extremely clear what to

00:23:47,879 --> 00:23:56,519
do but extremely important for us right

00:23:53,009 --> 00:23:58,139
so last year we did a demo this year in

00:23:56,519 --> 00:24:00,509
the interest of time and trying to leave

00:23:58,139 --> 00:24:02,279
more time for questions where we're just

00:24:00,509 --> 00:24:05,710
gonna run through a couple of the new

00:24:02,279 --> 00:24:10,870
feature highlights so

00:24:05,710 --> 00:24:13,630
you want to cover the okay so that's one

00:24:10,870 --> 00:24:18,820
of the major work we remained recently

00:24:13,630 --> 00:24:20,670
no CEO ambassador CoV - so because we we

00:24:18,820 --> 00:24:25,000
have the request to support more

00:24:20,670 --> 00:24:28,750
bit-depth so now with the API you can

00:24:25,000 --> 00:24:31,270
have that and we have also a channel of

00:24:28,750 --> 00:24:34,180
the Ring it was already supported but it

00:24:31,270 --> 00:24:38,620
was quite it require a lot of knowledge

00:24:34,180 --> 00:24:41,350
about how to do that but in fact what we

00:24:38,620 --> 00:24:45,370
proposed also is if there is a small

00:24:41,350 --> 00:24:49,240
utility library which is outside the

00:24:45,370 --> 00:24:51,760
library which will help you from to move

00:24:49,240 --> 00:24:57,430
from the open imager your files back

00:24:51,760 --> 00:25:00,190
directly to the OCIO image desk so it's

00:24:57,430 --> 00:25:03,820
one line and you have the full support

00:25:00,190 --> 00:25:07,690
native support ok so that's really what

00:25:03,820 --> 00:25:09,580
we try to do is you have the four out

00:25:07,690 --> 00:25:12,790
core guys let's say you can do whatever

00:25:09,580 --> 00:25:15,040
you want obviously as it was before plus

00:25:12,790 --> 00:25:16,060
a lot of unit tests to validate that but

00:25:15,040 --> 00:25:19,030
this Nanavati

00:25:16,060 --> 00:25:22,030
but for only of people which would like

00:25:19,030 --> 00:25:24,700
just straightforward implementation you

00:25:22,030 --> 00:25:26,980
use what Alper and it's really one line

00:25:24,700 --> 00:25:31,420
so you have almost nothing to do

00:25:26,980 --> 00:25:35,110
also we have added a new command line

00:25:31,420 --> 00:25:38,230
tool which is not a tool to do something

00:25:35,110 --> 00:25:40,750
but to validate the performance because

00:25:38,230 --> 00:25:44,800
as you will see we introduced a lot of

00:25:40,750 --> 00:25:47,020
improvement but it was everything was

00:25:44,800 --> 00:25:51,510
done in our context we are images

00:25:47,020 --> 00:25:56,110
machine and so on but most of the time

00:25:51,510 --> 00:25:58,090
you can have issue on your context we

00:25:56,110 --> 00:26:01,030
also do in your pipeline whatever and

00:25:58,090 --> 00:26:03,220
you need to have tools to to understand

00:26:01,030 --> 00:26:07,090
that so I don't know if you remember but

00:26:03,220 --> 00:26:09,910
worthy add argument come online the

00:26:07,090 --> 00:26:13,180
argument to existing tools so you can

00:26:09,910 --> 00:26:15,520
have a feedback they are both feedback

00:26:13,180 --> 00:26:15,940
or whatever is done for example when you

00:26:15,520 --> 00:26:18,310
do

00:26:15,940 --> 00:26:21,130
Oh CEO convert when you display and so

00:26:18,310 --> 00:26:23,560
on and we will have OCIO path which is a

00:26:21,130 --> 00:26:26,020
command-line tool just to you have your

00:26:23,560 --> 00:26:27,520
image you have your config you want to

00:26:26,020 --> 00:26:29,770
see what is the performance of that you

00:26:27,520 --> 00:26:33,250
can run it on and you have numbers so

00:26:29,770 --> 00:26:40,030
just to help you to isolate where this

00:26:33,250 --> 00:26:44,470
slowdown could could be located ok these

00:26:40,030 --> 00:26:48,010
are numbers we have now as I said it's

00:26:44,470 --> 00:26:51,460
based on our environment so it's the

00:26:48,010 --> 00:26:54,190
reason why we just put increase but as

00:26:51,460 --> 00:26:57,430
you see we we have increased even in

00:26:54,190 --> 00:26:58,900
floating cut paths which is quite good

00:26:57,430 --> 00:27:01,650
because it was already existing and

00:26:58,900 --> 00:27:05,170
already good but we also have

00:27:01,650 --> 00:27:07,990
improvement in the integer code pad

00:27:05,170 --> 00:27:10,060
because before the one of the problem

00:27:07,990 --> 00:27:12,490
limitation let's say from our say oh you

00:27:10,060 --> 00:27:16,930
have to load your image convert to float

00:27:12,490 --> 00:27:18,850
and do your processing and convert back

00:27:16,930 --> 00:27:22,120
to whatever bit that you would like to

00:27:18,850 --> 00:27:26,230
add and now we natively support that and

00:27:22,120 --> 00:27:28,210
we use that to improve the internal

00:27:26,230 --> 00:27:31,630
pipeline so we have quite very

00:27:28,210 --> 00:27:35,050
interesting improvement and also this is

00:27:31,630 --> 00:27:38,350
not the last pull request it's all the

00:27:35,050 --> 00:27:41,440
work we did during one year by adding

00:27:38,350 --> 00:27:44,140
new new ups new improvement every one

00:27:41,440 --> 00:27:47,650
the code so it's really a long term work

00:27:44,140 --> 00:27:48,910
on that right but yeah hopefully people

00:27:47,650 --> 00:27:51,940
would be pleased to see that we're

00:27:48,910 --> 00:27:54,970
getting between 3 X + 9 X performance

00:27:51,940 --> 00:27:59,830
improvements on the CPU path at the same

00:27:54,970 --> 00:28:01,570
quality level soon ok so another of the

00:27:59,830 --> 00:28:05,290
new features that we added has to do

00:28:01,570 --> 00:28:07,240
with the Aces output transform and as

00:28:05,290 --> 00:28:11,010
Michael was saying earlier Thomas Manson

00:28:07,240 --> 00:28:16,750
column has done some work recently on

00:28:11,010 --> 00:28:19,360
the Aces 1.1 OCIO config building on the

00:28:16,750 --> 00:28:21,010
work that HP did along with

00:28:19,360 --> 00:28:24,190
contributions from a lot of the people

00:28:21,010 --> 00:28:25,780
in this room and one of the things that

00:28:24,190 --> 00:28:27,090
Thomas addressed that that Michael

00:28:25,780 --> 00:28:30,360
mentioned was that you know

00:28:27,090 --> 00:28:32,490
there have been various foreign posts

00:28:30,360 --> 00:28:35,700
from people generally who have tried

00:28:32,490 --> 00:28:38,220
sending very bright colors through the V

00:28:35,700 --> 00:28:40,290
output transforms and they've compared

00:28:38,220 --> 00:28:43,620
it to the CTL and found that it doesn't

00:28:40,290 --> 00:28:47,210
match exactly and posted on forum saying

00:28:43,620 --> 00:28:51,570
hey what's up with this and so Thomas

00:28:47,210 --> 00:28:54,150
extended the shaper basically to try to

00:28:51,570 --> 00:28:59,820
address the problem with bright colors

00:28:54,150 --> 00:29:01,320
but and you know the the the issue with

00:28:59,820 --> 00:29:03,810
this is that we're kind of running up

00:29:01,320 --> 00:29:05,280
against the limitations of 3d lots so 3d

00:29:03,810 --> 00:29:08,040
let's work great for film print

00:29:05,280 --> 00:29:09,360
emulations where you're modeling

00:29:08,040 --> 00:29:11,640
something that has a limited dynamic

00:29:09,360 --> 00:29:14,010
range but the Aces output transforms are

00:29:11,640 --> 00:29:17,880
designed to work with very high dynamic

00:29:14,010 --> 00:29:20,640
range wide color gamut source materials

00:29:17,880 --> 00:29:22,950
so 3d lots are ultimately not going to

00:29:20,640 --> 00:29:24,450
be able to represent it perfectly so

00:29:22,950 --> 00:29:28,920
what I'm showing here is sort of a

00:29:24,450 --> 00:29:31,890
visualization of the errors in the 103

00:29:28,920 --> 00:29:34,860
config for the rec 709 output transform

00:29:31,890 --> 00:29:39,480
using one of the standard aces test

00:29:34,860 --> 00:29:41,430
Church the and Thomas has managed to

00:29:39,480 --> 00:29:45,180
improve this somewhat but there there's

00:29:41,430 --> 00:29:48,750
still some significant errors and so the

00:29:45,180 --> 00:29:51,960
and by the way I have the if anyone

00:29:48,750 --> 00:29:53,190
wants to see more details and compare

00:29:51,960 --> 00:29:54,900
with Thomas's work I have that on my

00:29:53,190 --> 00:29:58,260
laptop catch you later

00:29:54,900 --> 00:30:01,490
but the ultimate solution to this is is

00:29:58,260 --> 00:30:06,900
not to rely on 3d lots so we've added

00:30:01,490 --> 00:30:08,700
some new support for aces math we didn't

00:30:06,900 --> 00:30:10,020
have to code up the entire output

00:30:08,700 --> 00:30:12,090
transform or anything like that it

00:30:10,020 --> 00:30:13,350
turned out there was relatively small

00:30:12,090 --> 00:30:15,390
amount of math that needed to be added

00:30:13,350 --> 00:30:17,730
so we just added a few building blocks

00:30:15,390 --> 00:30:19,770
that allow us to implement the output

00:30:17,730 --> 00:30:22,860
transforms without meeting 3d lots and

00:30:19,770 --> 00:30:27,060
that reduces the error to basically an

00:30:22,860 --> 00:30:29,460
exact match to the to the AMPA CTL the

00:30:27,060 --> 00:30:31,740
other sort of aces related feature that

00:30:29,460 --> 00:30:35,940
we added is support for the common luck

00:30:31,740 --> 00:30:37,830
format so we have now full read and

00:30:35,940 --> 00:30:42,360
write support for

00:30:37,830 --> 00:30:43,710
as 2014 - Table six which is the one of

00:30:42,360 --> 00:30:46,020
the documents that was published with

00:30:43,710 --> 00:30:49,980
the Aces 1.0 release a couple years ago

00:30:46,020 --> 00:30:52,080
and as as you

00:30:49,980 --> 00:30:55,770
I hope heard in in the Aces birds of a

00:30:52,080 --> 00:30:58,950
feather there's work going on now in a

00:30:55,770 --> 00:31:01,590
virtual working group and JD Vandenberg

00:30:58,950 --> 00:31:04,200
has been doing great job on that with

00:31:01,590 --> 00:31:07,470
help from Scott Dyer and and others so

00:31:04,200 --> 00:31:10,680
there's a seal at v3 on its way for this

00:31:07,470 --> 00:31:14,010
fall and I encourage you to get involved

00:31:10,680 --> 00:31:18,570
in the virtual working group on that we

00:31:14,010 --> 00:31:22,710
intend to support version three in open

00:31:18,570 --> 00:31:24,960
call once it's published so you know we

00:31:22,710 --> 00:31:29,250
think that this is offers up a lot of

00:31:24,960 --> 00:31:30,930
very interesting workflow advantages one

00:31:29,250 --> 00:31:32,010
of the things about this format that's a

00:31:30,930 --> 00:31:34,350
little bit different from other lot

00:31:32,010 --> 00:31:37,860
formats is the amount of metadata in the

00:31:34,350 --> 00:31:40,770
lot so we're supporting the rich xml

00:31:37,860 --> 00:31:42,240
metadata that's in the standard in the

00:31:40,770 --> 00:31:44,960
existing standard which includes things

00:31:42,240 --> 00:31:47,520
like description elements ID attributes

00:31:44,960 --> 00:31:50,130
input output color space descriptors and

00:31:47,520 --> 00:31:54,060
so forth so you can both read and write

00:31:50,130 --> 00:31:57,350
that from open chloro yo now we've also

00:31:54,060 --> 00:32:00,870
added support for autodesk CTF support a

00:31:57,350 --> 00:32:03,180
format which is commonly format plus the

00:32:00,870 --> 00:32:05,520
extensions needed to losslessly

00:32:03,180 --> 00:32:08,430
serialize any open Claudio transform

00:32:05,520 --> 00:32:11,930
into an XML file so this is something

00:32:08,430 --> 00:32:15,060
that we think is very useful for

00:32:11,930 --> 00:32:16,590
debugging amongst other alternatives to

00:32:15,060 --> 00:32:20,130
be able sometimes if you're trying to

00:32:16,590 --> 00:32:21,390
debug a config and you are you know

00:32:20,130 --> 00:32:23,760
going from one color space to another

00:32:21,390 --> 00:32:26,430
there hasn't been an easy way in the

00:32:23,760 --> 00:32:28,920
past to kind of see under the hood what

00:32:26,430 --> 00:32:30,570
open Claudio was you know how it was

00:32:28,920 --> 00:32:32,820
actually constructing that transform

00:32:30,570 --> 00:32:35,130
sequence so now there's a way of doing

00:32:32,820 --> 00:32:38,250
that and there's a OCIO right command

00:32:35,130 --> 00:32:44,430
line tool for producing the unbaked

00:32:38,250 --> 00:32:45,720
output okay so in terms of areas to

00:32:44,430 --> 00:32:47,570
contribute we'd like to encourage people

00:32:45,720 --> 00:32:49,060
to contribute and get involved

00:32:47,570 --> 00:32:52,130
[Music]

00:32:49,060 --> 00:32:53,510
regardless of what your skills are what

00:32:52,130 --> 00:32:56,750
your interests are how much time you

00:32:53,510 --> 00:32:58,880
have we'll find a way for you to help so

00:32:56,750 --> 00:33:01,400
as a developer we have a bunch of things

00:32:58,880 --> 00:33:04,130
that we're looking for as a tester we're

00:33:01,400 --> 00:33:06,590
looking for help and also has

00:33:04,130 --> 00:33:10,490
documentation writer we're looking for

00:33:06,590 --> 00:33:13,600
help so join so we have a Google group

00:33:10,490 --> 00:33:16,880
for the v-2 working group

00:33:13,600 --> 00:33:20,510
please join that and we're having a

00:33:16,880 --> 00:33:22,430
meeting tomorrow here at the JW Marriott

00:33:20,510 --> 00:33:29,000
in the only big three room from 12:00 to

00:33:22,430 --> 00:33:31,430
2:00 and we hope you can I try to put

00:33:29,000 --> 00:33:36,320
some energy to maintain good first issue

00:33:31,430 --> 00:33:39,200
or Lebel so anyone with whatever your

00:33:36,320 --> 00:33:41,900
level of expertise or whatever you want

00:33:39,200 --> 00:33:44,360
to contribute to documentation test code

00:33:41,900 --> 00:33:47,240
or whatever you can check for that label

00:33:44,360 --> 00:33:50,360
in in Geetha you will see a bunch of

00:33:47,240 --> 00:33:53,720
stuff to improve which is quite small

00:33:50,360 --> 00:33:55,250
and even you can ask question we are

00:33:53,720 --> 00:33:58,250
really open to have external

00:33:55,250 --> 00:34:00,650
contribution because as you you saw we

00:33:58,250 --> 00:34:03,710
have already a lot of work to do on our

00:34:00,650 --> 00:34:05,930
side so if we can receive help from your

00:34:03,710 --> 00:34:09,620
community it will be great thanks guys

00:34:05,930 --> 00:34:12,620
yeah okay and I just wanted to give a

00:34:09,620 --> 00:34:14,240
shout out to autodesk for supporting

00:34:12,620 --> 00:34:17,390
this work and particularly the maya and

00:34:14,240 --> 00:34:19,910
flame teams for recognizing value of

00:34:17,390 --> 00:34:22,210
open source software and making the

00:34:19,910 --> 00:34:25,570
investment to contribute to that so

00:34:22,210 --> 00:34:25,570
thank you very much

00:34:29,510 --> 00:34:43,129
and with that I'll turn it over to mark

00:34:32,570 --> 00:34:44,960
were from Island thank you okay so for

00:34:43,129 --> 00:34:46,450
those of you who were well let's speak

00:34:44,960 --> 00:34:50,359
into the microphone

00:34:46,450 --> 00:34:53,060
yeah thanks all right for those of you

00:34:50,359 --> 00:34:55,730
who are at SIGGRAPH in vancouver last

00:34:53,060 --> 00:34:58,310
year we kind of spit balled a few ideas

00:34:55,730 --> 00:35:01,700
about potentially extending some of open

00:34:58,310 --> 00:35:04,070
Calleros math capabilities there's a

00:35:01,700 --> 00:35:06,020
couple of things in the v2 feature set

00:35:04,070 --> 00:35:08,810
that include things like fixed

00:35:06,020 --> 00:35:09,830
transforms or you know providing some

00:35:08,810 --> 00:35:12,140
industry-standard

00:35:09,830 --> 00:35:14,210
math transforms out of the box so you

00:35:12,140 --> 00:35:16,790
weren't going away and writing your own

00:35:14,210 --> 00:35:19,369
sRGB luck just to have you know simple

00:35:16,790 --> 00:35:21,590
conversions and things like that and so

00:35:19,369 --> 00:35:23,780
we've been spitballing a bit on that

00:35:21,590 --> 00:35:28,040
over the last year and so I'd like to

00:35:23,780 --> 00:35:30,170
just give a quick demo of a new library

00:35:28,040 --> 00:35:31,640
that we're hoping to accompany open

00:35:30,170 --> 00:35:33,859
Colorado to handle some of that

00:35:31,640 --> 00:35:35,600
mathematical stuff and yeah just give

00:35:33,859 --> 00:35:37,910
you a bit of a taste of what kind of

00:35:35,600 --> 00:35:40,250
features it would have and gather a

00:35:37,910 --> 00:35:42,170
feedback from the room here today to see

00:35:40,250 --> 00:35:46,609
you know what direction we should go

00:35:42,170 --> 00:35:47,780
with it so first what is open karma and

00:35:46,609 --> 00:35:50,450
so it's gonna be a new library

00:35:47,780 --> 00:35:54,800
complementing up in Colorado it provides

00:35:50,450 --> 00:35:57,800
both a C and a C++ API and it contains

00:35:54,800 --> 00:36:00,560
data types for describing things like

00:35:57,800 --> 00:36:04,060
color primitives such as XY chromaticity

00:36:00,560 --> 00:36:06,740
coordinates Korean response matrices

00:36:04,060 --> 00:36:09,700
color space conversion matrices things

00:36:06,740 --> 00:36:11,930
like that and at the moment for a lot of

00:36:09,700 --> 00:36:13,400
color codes are certainly at least in in

00:36:11,930 --> 00:36:14,900
my areas of the world you know you kind

00:36:13,400 --> 00:36:16,580
of just used a Veck 3 and passed it

00:36:14,900 --> 00:36:18,710
through all of the functions but this is

00:36:16,580 --> 00:36:20,720
kind of hoping to provide a more type

00:36:18,710 --> 00:36:22,790
safe secure way of describing well this

00:36:20,720 --> 00:36:24,980
is a function that needs you know an XY

00:36:22,790 --> 00:36:26,869
chromaticity so make sure you pass that

00:36:24,980 --> 00:36:28,730
instead of accidentally giving it you

00:36:26,869 --> 00:36:30,460
know an X Y Zed coordinate or something

00:36:28,730 --> 00:36:33,470
like that

00:36:30,460 --> 00:36:35,570
another feature is that it contains a

00:36:33,470 --> 00:36:38,270
JIT compiled mathematical expression

00:36:35,570 --> 00:36:39,890
evaluator so for those of you who have

00:36:38,270 --> 00:36:42,289
kind of looked on open chloro for a

00:36:39,890 --> 00:36:44,989
while a few years ago now I

00:36:42,289 --> 00:36:47,239
an expression transform that we never

00:36:44,989 --> 00:36:49,160
actually ended up merging into the the

00:36:47,239 --> 00:36:50,539
code base because it kind of it didn't

00:36:49,160 --> 00:36:54,019
quite fit and it also brought along a

00:36:50,539 --> 00:36:57,079
few larger dependencies at the time but

00:36:54,019 --> 00:36:58,849
I'm hoping that that same kind of math

00:36:57,079 --> 00:37:00,410
and logic can find its way into this

00:36:58,849 --> 00:37:02,599
library as well and complement the

00:37:00,410 --> 00:37:04,369
features then and yet and there's

00:37:02,599 --> 00:37:07,339
additional command-line tools as well

00:37:04,369 --> 00:37:11,329
just to give you a few extra things in

00:37:07,339 --> 00:37:13,759
your tool belt and so the core of open

00:37:11,329 --> 00:37:17,089
column F is yet another excellent Yael

00:37:13,759 --> 00:37:19,789
file at the moment it's just called

00:37:17,089 --> 00:37:21,890
config OC m and I'm kind of envisaging

00:37:19,789 --> 00:37:24,079
it just sitting alongside your conflict

00:37:21,890 --> 00:37:26,029
OCIO file we could potentially talk

00:37:24,079 --> 00:37:29,059
about merging it as part of the OCIO

00:37:26,029 --> 00:37:30,979
configures well it has a couple of

00:37:29,059 --> 00:37:33,259
sections so I'm going to blast through

00:37:30,979 --> 00:37:34,519
the sections on the screen as well but

00:37:33,259 --> 00:37:36,319
just to give you an upfront there's

00:37:34,519 --> 00:37:39,650
sections for things like white points

00:37:36,319 --> 00:37:42,109
for chromaticities of color spaces for

00:37:39,650 --> 00:37:43,880
listing transfer functions cone response

00:37:42,109 --> 00:37:48,229
matrices and and other random matrices

00:37:43,880 --> 00:37:49,699
that you might have and so yeah this is

00:37:48,229 --> 00:37:50,929
the first little bit so this is kind of

00:37:49,699 --> 00:37:52,459
an example of what the white point

00:37:50,929 --> 00:37:56,419
section of that config file might look

00:37:52,459 --> 00:37:57,859
like we're using yellow references and

00:37:56,419 --> 00:38:00,319
if I mouse cursor to I oh yeah there we

00:37:57,859 --> 00:38:03,469
go so this little funny

00:38:00,319 --> 00:38:06,169
ampersand it syntax is a gamble feature

00:38:03,469 --> 00:38:09,229
called referencing so in the config file

00:38:06,169 --> 00:38:11,390
you'll often have a chromaticity

00:38:09,229 --> 00:38:12,829
coordinates a white space and rather

00:38:11,390 --> 00:38:14,209
than having to copy-paste the same white

00:38:12,829 --> 00:38:15,739
space again and again again throughout

00:38:14,209 --> 00:38:17,989
the file you can use these reference

00:38:15,739 --> 00:38:19,999
names to reference other parts of the

00:38:17,989 --> 00:38:22,369
document and so in this case we have

00:38:19,999 --> 00:38:25,849
just a few example random ones with XY

00:38:22,369 --> 00:38:27,799
coordinates and then we have a section

00:38:25,849 --> 00:38:30,140
of the file for listing primary

00:38:27,799 --> 00:38:33,199
chromaticities so here's a small snippet

00:38:30,140 --> 00:38:36,019
I have an example config that is quite a

00:38:33,199 --> 00:38:37,789
lot more advanced so these ones are all

00:38:36,019 --> 00:38:40,009
kind of industry standard color spaces

00:38:37,789 --> 00:38:41,689
but you might find that you have your

00:38:40,009 --> 00:38:44,419
own in your studio and want to add

00:38:41,689 --> 00:38:46,489
additional color spaces to this kind of

00:38:44,419 --> 00:38:48,709
list so you can see they're just simply

00:38:46,489 --> 00:38:50,989
named and the library has a few features

00:38:48,709 --> 00:38:53,829
where it looks up color spaces based on

00:38:50,989 --> 00:38:53,829
the names in this list

00:38:54,140 --> 00:39:00,960
we then have transfer functions so this

00:38:58,140 --> 00:39:03,900
is the part that pretty much resembles

00:39:00,960 --> 00:39:07,080
the expression transform from a few

00:39:03,900 --> 00:39:10,020
years ago so the expression language is

00:39:07,080 --> 00:39:12,450
very similar to sort of C or C++ with

00:39:10,020 --> 00:39:15,000
the same sort of operators and order of

00:39:12,450 --> 00:39:17,730
precedents and things like that it has a

00:39:15,000 --> 00:39:21,060
couple of built-in variables so for

00:39:17,730 --> 00:39:23,670
instance if you're running a 1d lut you

00:39:21,060 --> 00:39:27,000
can use the value V to represent either

00:39:23,670 --> 00:39:29,580
our G or B as the lot is evaluated on

00:39:27,000 --> 00:39:31,320
each of those planes but otherwise you

00:39:29,580 --> 00:39:34,950
can reference just the are channel

00:39:31,320 --> 00:39:37,470
directly or things like that it has some

00:39:34,950 --> 00:39:39,660
built-in functions as well like log and

00:39:37,470 --> 00:39:41,220
POW and sign and all those sorts of

00:39:39,660 --> 00:39:43,680
things that you'd expect to find in a

00:39:41,220 --> 00:39:46,110
mathematical language and we can extend

00:39:43,680 --> 00:39:47,490
that as needed if people find that

00:39:46,110 --> 00:39:49,620
there's certain mathematical functions

00:39:47,490 --> 00:39:54,270
that they want and one thing I'll say is

00:39:49,620 --> 00:39:56,810
in so it isn't a programming language so

00:39:54,270 --> 00:39:59,670
although we have support for sort of

00:39:56,810 --> 00:40:01,560
conditionals and sort of a ternary

00:39:59,670 --> 00:40:04,230
operator there these are really meant to

00:40:01,560 --> 00:40:05,940
be short expressions so if we have

00:40:04,230 --> 00:40:07,680
really really complicated mathematical

00:40:05,940 --> 00:40:11,520
processes it's probably not the best fit

00:40:07,680 --> 00:40:13,680
for these but yeah in the places where

00:40:11,520 --> 00:40:16,020
I've used it and this has been perfectly

00:40:13,680 --> 00:40:20,100
sufficient for handling most kind of 1d

00:40:16,020 --> 00:40:22,260
in and even some 3d lots as well and yet

00:40:20,100 --> 00:40:24,360
we here we have to represent both r2 and

00:40:22,260 --> 00:40:27,800
up from transformation for getting to

00:40:24,360 --> 00:40:30,450
and from those those transfer functions

00:40:27,800 --> 00:40:34,740
this bits kind of bit self-explanatory

00:40:30,450 --> 00:40:37,530
but would you support any custom current

00:40:34,740 --> 00:40:40,350
response matrix if you're doing you know

00:40:37,530 --> 00:40:41,940
adaptive transforms so the Bradford and

00:40:40,350 --> 00:40:43,230
cut outs who are here and if by some

00:40:41,940 --> 00:40:44,550
miracle someone invents a new one

00:40:43,230 --> 00:40:46,700
tomorrow you would just be able to edit

00:40:44,550 --> 00:40:50,010
this file and add them in if you liked

00:40:46,700 --> 00:40:53,280
and the last one is kind of a

00:40:50,010 --> 00:40:55,920
get-out-of-jail-free card if you ever

00:40:53,280 --> 00:40:57,570
have a matrix that you don't know any

00:40:55,920 --> 00:40:59,400
other information about but you still

00:40:57,570 --> 00:41:01,770
want to be able to use it in your color

00:40:59,400 --> 00:41:03,150
chain this lets you just put a matrix in

00:41:01,770 --> 00:41:05,220
as long as you know what the source

00:41:03,150 --> 00:41:06,830
color space was it treats the name of

00:41:05,220 --> 00:41:08,750
this as the destination and

00:41:06,830 --> 00:41:10,700
we'll know where to fit it in when it's

00:41:08,750 --> 00:41:15,770
building an opportune to dip transform

00:41:10,700 --> 00:41:18,320
stuff so just a very brief show of some

00:41:15,770 --> 00:41:20,000
of the C++ API and C I'm sorry for

00:41:18,320 --> 00:41:25,010
putting code on a screen no one wants to

00:41:20,000 --> 00:41:28,880
read short bit of it is in the C++ land

00:41:25,010 --> 00:41:30,560
there's templated classes and functions

00:41:28,880 --> 00:41:33,140
that you know this is an example where

00:41:30,560 --> 00:41:36,500
you could paste in the names of some

00:41:33,140 --> 00:41:38,390
known chromaticities and what

00:41:36,500 --> 00:41:41,150
transmission you'd like and then the end

00:41:38,390 --> 00:41:43,960
result will be a matrix that you can you

00:41:41,150 --> 00:41:46,700
know express that transformation and

00:41:43,960 --> 00:41:50,600
here's kind of the same program written

00:41:46,700 --> 00:41:53,590
again in C instead so here I've got the

00:41:50,600 --> 00:41:55,580
types for describing the matrix class

00:41:53,590 --> 00:41:57,650
rather than being templated because we

00:41:55,580 --> 00:42:01,100
don't have templates in see there just

00:41:57,650 --> 00:42:03,080
underscore prefixed so suffixed with the

00:42:01,100 --> 00:42:05,000
tighter type so this is a matrix

00:42:03,080 --> 00:42:06,440
returning doubles and there's a function

00:42:05,000 --> 00:42:09,230
here calculate color space matrices

00:42:06,440 --> 00:42:11,150
that's also taking doubles and you can

00:42:09,230 --> 00:42:15,590
access the elements and print out your

00:42:11,150 --> 00:42:17,000
matrices so yet I mentioned it there'd

00:42:15,590 --> 00:42:19,220
be a couple of command-line tools with

00:42:17,000 --> 00:42:20,900
it so one that I play with reasonably

00:42:19,220 --> 00:42:23,720
frequently in kind of when I'm building

00:42:20,900 --> 00:42:27,140
my own open Calero configs is this sort

00:42:23,720 --> 00:42:29,150
of ocm matrix tool and as you can kind

00:42:27,140 --> 00:42:30,380
of see from the command line here all

00:42:29,150 --> 00:42:33,380
you do is you just write the names of

00:42:30,380 --> 00:42:35,300
the color spaces in in my case I also

00:42:33,380 --> 00:42:37,490
added a dash dash nuke argument so that

00:42:35,300 --> 00:42:39,050
it would just spit me out of a new color

00:42:37,490 --> 00:42:40,910
space note that I can copy paste into

00:42:39,050 --> 00:42:44,090
nuke but I also have another argument

00:42:40,910 --> 00:42:45,860
that spits it out in OCIO kind of config

00:42:44,090 --> 00:42:48,950
file syntax so it's easier to copy

00:42:45,860 --> 00:42:50,600
pasted into an OCR config as well the

00:42:48,950 --> 00:42:53,780
idea is though that with this library

00:42:50,600 --> 00:42:55,340
under the hood we could just do this

00:42:53,780 --> 00:42:57,860
kind of stuff in a transform you know so

00:42:55,340 --> 00:43:03,500
rather than needing to bake out matrices

00:42:57,860 --> 00:43:05,180
or embed matrices in the config files so

00:43:03,500 --> 00:43:09,260
yep that kind of comes to another tool

00:43:05,180 --> 00:43:11,480
we have which is ocm lot so in a similar

00:43:09,260 --> 00:43:14,930
problem I often when I'm generating

00:43:11,480 --> 00:43:17,420
config files from scratch we often want

00:43:14,930 --> 00:43:19,690
to write out one d-lux for various

00:43:17,420 --> 00:43:21,369
transfer functions that we have so

00:43:19,690 --> 00:43:23,200
this tool also lets you just bake out

00:43:21,369 --> 00:43:25,150
any other one deluxe or any of the

00:43:23,200 --> 00:43:27,039
transformations either a lintel log or

00:43:25,150 --> 00:43:33,160
log to linen or whatever format you'd

00:43:27,039 --> 00:43:35,710
like yeah so that most of those parts

00:43:33,160 --> 00:43:37,030
are in and working there's still some

00:43:35,710 --> 00:43:40,359
cleanup that needs to happen on the code

00:43:37,030 --> 00:43:42,430
but I'm hoping to have it kind of

00:43:40,359 --> 00:43:44,490
uploaded and ready for people to to play

00:43:42,430 --> 00:43:47,349
with within the next couple of weeks

00:43:44,490 --> 00:43:49,059
this slide kind of has some future ideas

00:43:47,349 --> 00:43:50,770
well it has the only one that I've come

00:43:49,059 --> 00:43:53,049
up with which is to add an additional

00:43:50,770 --> 00:43:54,789
ocm expression node inside of nuke I

00:43:53,049 --> 00:43:57,190
don't know how many people use the new

00:43:54,789 --> 00:43:59,589
expression node that I find it a tiny

00:43:57,190 --> 00:44:02,140
bit limiting sometimes so I'm hoping to

00:43:59,589 --> 00:44:05,319
you know get a few a bit more riches in

00:44:02,140 --> 00:44:06,970
tax or some some better features to be

00:44:05,319 --> 00:44:13,059
able to you know using an interactive

00:44:06,970 --> 00:44:15,579
way yeah and I Lim is hiring in all of

00:44:13,059 --> 00:44:17,920
our sites so if anyone's interested yeah

00:44:15,579 --> 00:44:22,230
please visit our recruiting team or come

00:44:17,920 --> 00:44:22,230
have a chat with me afterwards thank you

00:44:26,349 --> 00:44:33,849
Thanks thanks mark yes no we have a bit

00:44:29,799 --> 00:44:36,089
of time for Q&A anything for anyone that

00:44:33,849 --> 00:44:36,089
presented

00:44:42,120 --> 00:44:49,110
I made a question for mark could you

00:44:47,760 --> 00:44:51,540
talk a little bit about the choice to

00:44:49,110 --> 00:44:53,760
use external configs versus potentially

00:44:51,540 --> 00:44:55,500
sort of hard-coding some of the common

00:44:53,760 --> 00:44:58,290
color spaces I know there's been a

00:44:55,500 --> 00:44:59,850
little bit of discussion about the need

00:44:58,290 --> 00:45:01,500
for something like this for things like

00:44:59,850 --> 00:45:03,840
USD that want to do sort of trivial

00:45:01,500 --> 00:45:05,280
color transforms for previz and come up

00:45:03,840 --> 00:45:08,210
in the context of simple texture

00:45:05,280 --> 00:45:11,190
transforms I'm just curious what the

00:45:08,210 --> 00:45:12,930
yeah so the other is I guess I should

00:45:11,190 --> 00:45:15,900
mention this is kind of meant to

00:45:12,930 --> 00:45:17,670
compliment if we did decide to have some

00:45:15,900 --> 00:45:19,170
of these pre baked and provided by open

00:45:17,670 --> 00:45:21,140
color II that that's still kind of on

00:45:19,170 --> 00:45:24,750
the roadmap and one of the ideas to have

00:45:21,140 --> 00:45:26,010
it's just we wanted a system where if

00:45:24,750 --> 00:45:27,960
you were in a facility where you needed

00:45:26,010 --> 00:45:29,370
to either override that or change the

00:45:27,960 --> 00:45:31,020
way it worked or add your own

00:45:29,370 --> 00:45:33,740
transformations we kind of wanted it to

00:45:31,020 --> 00:45:36,150
be all in the same ecosystem

00:45:33,740 --> 00:45:38,070
whereas we didn't want there to be a

00:45:36,150 --> 00:45:40,050
divide between oh these are the things

00:45:38,070 --> 00:45:42,630
that are built in but now I need to make

00:45:40,050 --> 00:45:44,250
a new thing to you know do my

00:45:42,630 --> 00:45:47,010
transformations that my company requires

00:45:44,250 --> 00:45:49,100
or things like that yeah that makes

00:45:47,010 --> 00:45:49,100
sense

00:46:01,940 --> 00:46:07,490
any last questions as long as you're on

00:46:04,280 --> 00:46:09,799
that slide so access to variables of

00:46:07,490 --> 00:46:11,869
constants so you have there there are

00:46:09,799 --> 00:46:15,710
certain built-in variables like the you

00:46:11,869 --> 00:46:17,930
match the V or the RGB but no you can't

00:46:15,710 --> 00:46:19,490
least or tap values in like user defined

00:46:17,930 --> 00:46:22,339
variables or is that beyond the scope

00:46:19,490 --> 00:46:23,960
it's not beyond the scope so under the

00:46:22,339 --> 00:46:26,630
hood the system that does the expression

00:46:23,960 --> 00:46:28,609
evaluation can take a dictionary of kind

00:46:26,630 --> 00:46:30,079
of like key values for assigning

00:46:28,609 --> 00:46:32,690
variables I haven't quite worked out a

00:46:30,079 --> 00:46:34,940
nice pleasant way to express that in a

00:46:32,690 --> 00:46:37,910
config file there's other things too

00:46:34,940 --> 00:46:39,920
like yeah technically should you allow

00:46:37,910 --> 00:46:42,170
multiple arguments into your functions

00:46:39,920 --> 00:46:44,390
so if you had things like say I don't

00:46:42,170 --> 00:46:46,819
know the arrow transforms and you wanted

00:46:44,390 --> 00:46:48,619
to pass in the exposure index things

00:46:46,819 --> 00:46:51,410
like that like it would be nice to be

00:46:48,619 --> 00:46:52,849
able to express those in here as well so

00:46:51,410 --> 00:46:54,950
yeah that those are all things that are

00:46:52,849 --> 00:46:56,869
definitely not out of scope but I

00:46:54,950 --> 00:47:00,170
haven't quite thought of a nice way to

00:46:56,869 --> 00:47:04,059
present that and and show it but yeah

00:47:00,170 --> 00:47:04,059
it's definitely not my question

00:47:11,140 --> 00:47:20,460
any last questions cool thank you all

00:47:17,029 --> 00:47:24,889
for joining us and in the update

00:47:20,460 --> 00:47:24,889

YouTube URL: https://www.youtube.com/watch?v=L5dpFtgZuhQ


