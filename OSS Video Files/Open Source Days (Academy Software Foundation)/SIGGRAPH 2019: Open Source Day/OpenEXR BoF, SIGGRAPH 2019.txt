Title: OpenEXR BoF, SIGGRAPH 2019
Publication date: 2019-08-22
Playlist: SIGGRAPH 2019: Open Source Day
Description: 
	Discuss the latest on OpenEXR, a project hosted at Academy Software Foundation, and future areas of development. Part of Open Source Day at SIGGRAPH 2019, hosted by Academy Software Foundation.

Speaker: 
Cary Phillips, Industrial Light & Magic
Captions: 
	00:00:00,060 --> 00:00:05,970
thanks for coming I assume that most of

00:00:04,680 --> 00:00:11,670
you are here because you want to talk

00:00:05,970 --> 00:00:13,110
about X arts itself I wanted to give a

00:00:11,670 --> 00:00:14,730
little bit of background about the

00:00:13,110 --> 00:00:17,690
Academy Software Foundation and what

00:00:14,730 --> 00:00:19,859
that means for the project we'll go over

00:00:17,690 --> 00:00:22,350
some of the recent stuff that's been

00:00:19,859 --> 00:00:25,199
going on and kind of how we got here

00:00:22,350 --> 00:00:28,050
the release that we're planning and some

00:00:25,199 --> 00:00:32,930
of the coming work and then most of the

00:00:28,050 --> 00:00:39,540
time will be opened up for a discussion

00:00:32,930 --> 00:00:41,940
about the future start with an

00:00:39,540 --> 00:00:45,110
introduction I'm Kerry Phillips I'm Rd

00:00:41,940 --> 00:00:49,680
supervisor at ILM I was around at ILM

00:00:45,110 --> 00:00:52,890
when Florian and ride and Drew and the

00:00:49,680 --> 00:00:56,550
others developed openexr from the very

00:00:52,890 --> 00:00:58,649
beginning I really had very little to do

00:00:56,550 --> 00:01:02,129
with it until very recently I was a part

00:00:58,649 --> 00:01:03,809
of the Academy Science and Technology

00:01:02,129 --> 00:01:07,740
Council that led to the development of

00:01:03,809 --> 00:01:13,979
the foundation and so through that and

00:01:07,740 --> 00:01:16,229
you know my history at ILM I felt a real

00:01:13,979 --> 00:01:18,750
conviction to see that the project is

00:01:16,229 --> 00:01:23,640
sort of shepherded into the foundation

00:01:18,750 --> 00:01:26,490
and that it it you know is well

00:01:23,640 --> 00:01:31,650
established as a success story for the

00:01:26,490 --> 00:01:34,400
foundation you know for anyone who's not

00:01:31,650 --> 00:01:37,939
familiar the software foundation was

00:01:34,400 --> 00:01:40,950
founded a year ago with the mission of

00:01:37,939 --> 00:01:42,600
ensuring the health of the open source

00:01:40,950 --> 00:01:46,079
software that we depend on in the

00:01:42,600 --> 00:01:47,720
industry there's a lot of organizations

00:01:46,079 --> 00:01:50,520
that put their support behind the

00:01:47,720 --> 00:01:53,310
foundation you know where all of this

00:01:50,520 --> 00:01:55,829
rubber hits the road is the actual

00:01:53,310 --> 00:01:59,130
projects and it's interesting that each

00:01:55,829 --> 00:02:03,930
of these projects and open timeline oh

00:01:59,130 --> 00:02:05,820
should be up here as of this week each

00:02:03,930 --> 00:02:11,700
of these projects is in a very different

00:02:05,820 --> 00:02:13,950
state of its lifecycle which is a kind

00:02:11,700 --> 00:02:17,790
of different test case for what the

00:02:13,950 --> 00:02:20,250
the foundation has to offer when I think

00:02:17,790 --> 00:02:23,310
about opening XR and what does success

00:02:20,250 --> 00:02:26,099
look like I think you know if you're a

00:02:23,310 --> 00:02:27,870
developer a group company or whatever in

00:02:26,099 --> 00:02:31,560
search of an imaging format and you

00:02:27,870 --> 00:02:33,480
happen upon the XR you know the repo the

00:02:31,560 --> 00:02:35,640
website or whatever you should see a

00:02:33,480 --> 00:02:40,050
healthy project you should not see a

00:02:35,640 --> 00:02:42,120
derelict neglected codebase C code

00:02:40,050 --> 00:02:43,530
that's maintained and modern and a

00:02:42,120 --> 00:02:47,310
healthy community people asking

00:02:43,530 --> 00:02:49,410
questions and getting help and in

00:02:47,310 --> 00:02:53,400
particular you know the particular phase

00:02:49,410 --> 00:02:57,890
that openexr is in right now is you know

00:02:53,400 --> 00:03:01,049
there was a period of time when it was a

00:02:57,890 --> 00:03:03,620
system developed by an internal group

00:03:01,049 --> 00:03:05,970
internal to ILM or you know what and

00:03:03,620 --> 00:03:07,620
Dreamworks other major contributors who

00:03:05,970 --> 00:03:09,630
were releasing it to the outside world

00:03:07,620 --> 00:03:11,670
that's not the phase that it's in right

00:03:09,630 --> 00:03:13,500
now and I think one of the things that

00:03:11,670 --> 00:03:15,720
the software foundation has to offer is

00:03:13,500 --> 00:03:17,280
to ensure that this is a community

00:03:15,720 --> 00:03:19,950
effort not dependent on any one

00:03:17,280 --> 00:03:21,959
individual or any one organization the

00:03:19,950 --> 00:03:24,090
other thing is that I think what the

00:03:21,959 --> 00:03:27,180
community needs out of openexr is

00:03:24,090 --> 00:03:29,100
primarily stability it's this should not

00:03:27,180 --> 00:03:32,760
be a project that sees a tremendous

00:03:29,100 --> 00:03:35,070
amount of churn or or change but

00:03:32,760 --> 00:03:39,540
reliability and instability and staying

00:03:35,070 --> 00:03:44,730
true to the original vision a little bit

00:03:39,540 --> 00:03:46,410
of history started in 2003 first

00:03:44,730 --> 00:03:51,840
released in 2003

00:03:46,410 --> 00:03:55,680
Florian wins saitec award in 2007 2010

00:03:51,840 --> 00:03:59,880
12 14 major new features from Wetty and

00:03:55,680 --> 00:04:05,549
and DreamWorks and then a kind of period

00:03:59,880 --> 00:04:10,380
of dormancy 15 16 17 not much happening

00:04:05,549 --> 00:04:13,910
and we two years ago succeeded in eking

00:04:10,380 --> 00:04:16,500
out a release that addressed some of the

00:04:13,910 --> 00:04:20,039
security vulnerabilities that had been

00:04:16,500 --> 00:04:23,520
been filed and then last year another

00:04:20,039 --> 00:04:26,159
maintenance release but that was quite a

00:04:23,520 --> 00:04:27,040
bit of effort to muster to get that out

00:04:26,159 --> 00:04:29,640
and

00:04:27,040 --> 00:04:32,470
so you know along comes the foundation

00:04:29,640 --> 00:04:37,030
there's a lot that's happened in the few

00:04:32,470 --> 00:04:40,960
months since the the project was brought

00:04:37,030 --> 00:04:44,050
into the foundation a lot of stuff going

00:04:40,960 --> 00:04:49,260
in we started out with something like a

00:04:44,050 --> 00:04:52,150
hundred and thirty open github issues

00:04:49,260 --> 00:04:55,390
thirty some poll requests I think we've

00:04:52,150 --> 00:04:59,560
succeeded in getting those down to a

00:04:55,390 --> 00:05:04,600
very manageable level and in general

00:04:59,560 --> 00:05:07,480
there's been a lot of traffic on the the

00:05:04,600 --> 00:05:08,740
repo people commenting which is really

00:05:07,480 --> 00:05:12,040
good to see and a lot of different

00:05:08,740 --> 00:05:15,910
people commenting which is good so who's

00:05:12,040 --> 00:05:18,910
doing this steering committee is me

00:05:15,910 --> 00:05:24,190
Cristina Templar elites from epic John

00:05:18,910 --> 00:05:27,070
Murdoch for the Linux Foundation Kimball

00:05:24,190 --> 00:05:30,610
Thurston Larry grits Nick Pacino Peter

00:05:27,070 --> 00:05:33,460
Hillman rod Bogart Nick Rasmussen is the

00:05:30,610 --> 00:05:34,900
the resident expert at ILM not formally

00:05:33,460 --> 00:05:38,890
a part of the steering committee but one

00:05:34,900 --> 00:05:42,840
of the the github repo committers and

00:05:38,890 --> 00:05:45,400
one most knowledgeable about the library

00:05:42,840 --> 00:05:47,110
so one of the things this kind of shape

00:05:45,400 --> 00:05:48,790
to the effort that's been going on is

00:05:47,110 --> 00:05:50,890
the Linux foundation's core

00:05:48,790 --> 00:05:56,860
infrastructure initiative it's a set of

00:05:50,890 --> 00:06:00,930
requirements that that are the the the

00:05:56,860 --> 00:06:03,670
core sort of gate to the project being

00:06:00,930 --> 00:06:05,770
fully adopted by the the Software

00:06:03,670 --> 00:06:08,850
Foundation and it's a set of guidelines

00:06:05,770 --> 00:06:11,680
that that sort of ensure the proper

00:06:08,850 --> 00:06:14,850
health and robustness of the project in

00:06:11,680 --> 00:06:17,440
general a lot of it has to do with

00:06:14,850 --> 00:06:20,770
licensing both cleaning up licenses and

00:06:17,440 --> 00:06:23,530
copyrights as well as easing the the the

00:06:20,770 --> 00:06:25,990
contribution mechanism we're right on

00:06:23,530 --> 00:06:28,990
the cusp of putting in place the

00:06:25,990 --> 00:06:30,310
automated CLA mechanism so that when you

00:06:28,990 --> 00:06:32,020
submit a pull request it'll

00:06:30,310 --> 00:06:35,020
automatically verify that you have the

00:06:32,020 --> 00:06:38,380
the right legal authorization to do that

00:06:35,020 --> 00:06:40,810
the License Agreement in place

00:06:38,380 --> 00:06:43,570
we've spent a lot of time cleaning

00:06:40,810 --> 00:06:45,220
the documentation in the library not so

00:06:43,570 --> 00:06:47,139
much the technical documentation but

00:06:45,220 --> 00:06:50,590
just the information about how to get

00:06:47,139 --> 00:06:52,210
help how to contribute you know better

00:06:50,590 --> 00:06:54,370
release notes that kind of thing and

00:06:52,210 --> 00:06:56,950
then a lot of effort has gone into the

00:06:54,370 --> 00:06:59,980
bill system Kimball has completely

00:06:56,950 --> 00:07:06,370
rewritten our see make system so it

00:06:59,980 --> 00:07:10,540
actually works he's also gotten the

00:07:06,370 --> 00:07:12,960
library to be warning free so dresses

00:07:10,540 --> 00:07:16,240
all compiler warnings and we also have

00:07:12,960 --> 00:07:19,840
code analysis in place some of the

00:07:16,240 --> 00:07:25,919
earlier speakers have mentioned as your

00:07:19,840 --> 00:07:29,110
pipelines is the CI system of that the

00:07:25,919 --> 00:07:31,840
software foundation is settled on that's

00:07:29,110 --> 00:07:33,630
up and running so you submit a PR and it

00:07:31,840 --> 00:07:37,150
will automatically kick off a build and

00:07:33,630 --> 00:07:39,910
reject if it fails torture Linux Windows

00:07:37,150 --> 00:07:46,360
and Mac OS and simultaneous he runs on

00:07:39,910 --> 00:07:49,180
the different VFX platforms this is all

00:07:46,360 --> 00:07:54,880
very fresh so it's still a work in

00:07:49,180 --> 00:07:57,840
progress and the analysis through sonar

00:07:54,880 --> 00:08:01,120
cloud is is up and up and going as well

00:07:57,840 --> 00:08:04,380
so we're still in the process of

00:08:01,120 --> 00:08:07,630
establishing this but it's a good thing

00:08:04,380 --> 00:08:11,950
the code coverage on the test suite and

00:08:07,630 --> 00:08:15,220
openexr the initial report is pretty

00:08:11,950 --> 00:08:16,510
pretty good to start out with security

00:08:15,220 --> 00:08:21,669
is one of the things that we've had to

00:08:16,510 --> 00:08:24,400
address openexr has the noble

00:08:21,669 --> 00:08:26,830
distinction of being the one Software

00:08:24,400 --> 00:08:29,320
Foundation project to have public

00:08:26,830 --> 00:08:31,720
security vulnerabilities filed against

00:08:29,320 --> 00:08:35,200
it they've all been addressed there are

00:08:31,720 --> 00:08:37,779
a couple that have been are waiting in

00:08:35,200 --> 00:08:40,270
the wings for the next release but just

00:08:37,779 --> 00:08:43,539
feeling our way through the the proper

00:08:40,270 --> 00:08:45,670
process of dealing with with reporting

00:08:43,539 --> 00:08:48,360
of security issues is something that the

00:08:45,670 --> 00:08:51,749
the foundation has been very helpful

00:08:48,360 --> 00:08:54,089
with the issues involved involve things

00:08:51,749 --> 00:08:56,600
like buffer overflow in integer overflow

00:08:54,089 --> 00:09:01,379
primarily with images that are either

00:08:56,600 --> 00:09:03,299
garbage or maliciously designed to like

00:09:01,379 --> 00:09:06,179
very large images we're still in the

00:09:03,299 --> 00:09:08,339
process of figuring out exactly how to

00:09:06,179 --> 00:09:11,279
handle these these these edge cases

00:09:08,339 --> 00:09:17,220
properly an interesting thing that came

00:09:11,279 --> 00:09:20,519
up was the Google fuzz team suggested

00:09:17,220 --> 00:09:22,230
that we integrate the the library with

00:09:20,519 --> 00:09:24,899
their their fuzzing service that

00:09:22,230 --> 00:09:31,529
basically bombarded it with with all

00:09:24,899 --> 00:09:33,629
kinds of data to test edge cases we

00:09:31,529 --> 00:09:36,209
decided that that's a level of security

00:09:33,629 --> 00:09:38,220
of attention that we don't really have

00:09:36,209 --> 00:09:40,529
the capacity to deal with and it's not

00:09:38,220 --> 00:09:42,869
that important our industry so we've

00:09:40,529 --> 00:09:45,209
declined on that but although they have

00:09:42,869 --> 00:09:47,610
actually run the service and reported a

00:09:45,209 --> 00:09:53,610
bunch of issues that we've dealt with

00:09:47,610 --> 00:09:57,919
most of so bag we had hoped to have a

00:09:53,610 --> 00:10:00,720
release by SIGGRAPH but decided not to

00:09:57,919 --> 00:10:02,819
kill ourselves but give a little bit

00:10:00,720 --> 00:10:04,769
more time to to get it out but it should

00:10:02,819 --> 00:10:08,309
be coming soon this is maintenance only

00:10:04,769 --> 00:10:12,149
it should be API compatible again the

00:10:08,309 --> 00:10:15,959
the main thing is the C make system that

00:10:12,149 --> 00:10:19,160
is up to modern standards a lot of bug

00:10:15,959 --> 00:10:22,049
fixes and a lot of code improvements

00:10:19,160 --> 00:10:23,759
making the transition to C++ 11 kind of

00:10:22,049 --> 00:10:27,989
removing some of the old cruft force

00:10:23,759 --> 00:10:30,269
supporting C++ 98 our hope is to migrate

00:10:27,989 --> 00:10:33,629
the release process to use the automated

00:10:30,269 --> 00:10:36,239
github release process the automated

00:10:33,629 --> 00:10:38,279
tarball generation thing so we haven't

00:10:36,239 --> 00:10:42,119
made a release in that mechanism yet so

00:10:38,279 --> 00:10:43,470
that's that's coming a few more things

00:10:42,119 --> 00:10:47,089
that are kind of waiting in the wings

00:10:43,470 --> 00:10:49,470
the the as a part of the adoption the

00:10:47,089 --> 00:10:50,839
the github repo is going to move into

00:10:49,470 --> 00:10:52,709
the Academy Software Foundation

00:10:50,839 --> 00:10:55,679
organization this hasn't happened yet

00:10:52,709 --> 00:10:58,399
but that'll happen in the next few weeks

00:10:55,679 --> 00:11:01,140
I guess word is that could be completely

00:10:58,399 --> 00:11:03,840
transparent to everybody so

00:11:01,140 --> 00:11:04,950
yeah I shouldn't really cause anybody

00:11:03,840 --> 00:11:08,340
any issues

00:11:04,950 --> 00:11:11,130
there's our intention is to continue the

00:11:08,340 --> 00:11:15,660
modernization process and migrating

00:11:11,130 --> 00:11:18,090
fully to to C++ 11 we've been talking in

00:11:15,660 --> 00:11:21,690
the steering committee about code

00:11:18,090 --> 00:11:24,510
formatting and code style and I think

00:11:21,690 --> 00:11:26,400
we've settled on that we're gonna run it

00:11:24,510 --> 00:11:30,510
through playing tidy and get it all

00:11:26,400 --> 00:11:32,910
nights and and neat and be done with it

00:11:30,510 --> 00:11:37,850
the downside to that is kind of losing

00:11:32,910 --> 00:11:43,020
line by line history and the repo but

00:11:37,850 --> 00:11:44,850
the our senses that past projects that

00:11:43,020 --> 00:11:47,480
have dealt with this have been thankful

00:11:44,850 --> 00:11:50,000
that they've done it after the fact

00:11:47,480 --> 00:11:53,460
another thing we would like to

00:11:50,000 --> 00:11:57,500
eventually deprecated the use of Island

00:11:53,460 --> 00:12:00,900
thread and migrate to C++ 11 threading

00:11:57,500 --> 00:12:05,610
we don't want to have to maintain two

00:12:00,900 --> 00:12:07,790
different bill systems the C make system

00:12:05,610 --> 00:12:12,120
has not been reliable enough to really

00:12:07,790 --> 00:12:14,250
count on that as our as our bill system

00:12:12,120 --> 00:12:17,220
of choice but it is of course the only

00:12:14,250 --> 00:12:20,520
system that works on Windows so we would

00:12:17,220 --> 00:12:22,560
we think like to be able to deprecated

00:12:20,520 --> 00:12:25,020
the the auto tools configuration but

00:12:22,560 --> 00:12:27,330
we're only going to do that until we if

00:12:25,020 --> 00:12:32,550
we decide that there's no people out

00:12:27,330 --> 00:12:37,260
there that are not willing to use the

00:12:32,550 --> 00:12:38,640
the C make system or any way we we don't

00:12:37,260 --> 00:12:42,570
want have to continue maintaining to

00:12:38,640 --> 00:12:44,700
build systems another thing a major

00:12:42,570 --> 00:12:48,360
source of issues that people in the

00:12:44,700 --> 00:12:50,930
community have is the the runtime code

00:12:48,360 --> 00:12:57,000
generation that's that's built in the

00:12:50,930 --> 00:12:58,560
half and compression table code that's

00:12:57,000 --> 00:13:01,610
generated on the fly

00:12:58,560 --> 00:13:05,760
that's the failing is a major source of

00:13:01,610 --> 00:13:07,440
problems and we we think what we want to

00:13:05,760 --> 00:13:09,050
do is just completely deprecated that

00:13:07,440 --> 00:13:14,300
generate the code

00:13:09,050 --> 00:13:15,860
and check it in to the repo so this is

00:13:14,300 --> 00:13:20,480
the point at which I'd like to emphasize

00:13:15,860 --> 00:13:22,100
how much fun this is and it is so much

00:13:20,480 --> 00:13:26,750
fun that you want to be doing this

00:13:22,100 --> 00:13:29,860
yourself you really do you know in all

00:13:26,750 --> 00:13:33,610
seriousness it is fun and although our

00:13:29,860 --> 00:13:36,680
organizations I am what a face book epic

00:13:33,610 --> 00:13:39,649
fully embrace and support us doing this

00:13:36,680 --> 00:13:42,110
for the most part we're doing this kind

00:13:39,649 --> 00:13:45,860
of out of time stolen from lunchtime and

00:13:42,110 --> 00:13:49,399
nights and weekends and you know it is a

00:13:45,860 --> 00:13:51,950
volunteer hobby basically that we do

00:13:49,399 --> 00:13:54,260
because we and we enjoy it I say this

00:13:51,950 --> 00:13:56,360
for two reasons one is it's not like

00:13:54,260 --> 00:13:59,240
there's a standing team of people that

00:13:56,360 --> 00:14:01,010
are waiting to you know have work

00:13:59,240 --> 00:14:03,170
requested of us that we can implement

00:14:01,010 --> 00:14:07,490
and roll out this needs to be a

00:14:03,170 --> 00:14:09,050
community effort and so if there's

00:14:07,490 --> 00:14:13,190
things you want out of the out of the

00:14:09,050 --> 00:14:15,529
library step up and help and I mean in

00:14:13,190 --> 00:14:20,810
big ways and small ways if you find a

00:14:15,529 --> 00:14:22,220
bug try to fix it and submit request the

00:14:20,810 --> 00:14:25,220
idea is the steering committee is the

00:14:22,220 --> 00:14:29,410
the gatekeepers that ensure that what

00:14:25,220 --> 00:14:32,600
goes in is valid and and proper but

00:14:29,410 --> 00:14:34,459
we've been doing more work lately over

00:14:32,600 --> 00:14:37,120
the last couple months then we're gonna

00:14:34,459 --> 00:14:40,820
be able to sustain going forward so

00:14:37,120 --> 00:14:45,860
anyway one of the main ways to get

00:14:40,820 --> 00:14:48,050
involved is comment the steering

00:14:45,860 --> 00:14:50,089
committee kind of as we've been getting

00:14:48,050 --> 00:14:53,750
our legs under the project and dealing

00:14:50,089 --> 00:14:55,670
with a bit of the past you know but kind

00:14:53,750 --> 00:14:57,770
of deferred maintenance well as kind of

00:14:55,670 --> 00:14:59,660
lack of organization it's been having a

00:14:57,770 --> 00:15:01,970
lot of discussions kind of internally

00:14:59,660 --> 00:15:05,000
we're gonna be opening that to the

00:15:01,970 --> 00:15:06,740
opening XR dev male alias so expect to

00:15:05,000 --> 00:15:09,560
see a lot more traffic on there and

00:15:06,740 --> 00:15:11,350
traffic of the form of hey what do we do

00:15:09,560 --> 00:15:14,180
here what's the right thing to do here

00:15:11,350 --> 00:15:16,820
that it really ought to be a community

00:15:14,180 --> 00:15:19,430
effort talk with us if you want to get

00:15:16,820 --> 00:15:21,180
involved read over the contributing

00:15:19,430 --> 00:15:23,880
guidelines

00:15:21,180 --> 00:15:26,070
you'll need a license agreement but

00:15:23,880 --> 00:15:28,280
hopefully with the the foundation in

00:15:26,070 --> 00:15:31,350
place that should be easier to come by

00:15:28,280 --> 00:15:33,000
submit a pull request and we're going to

00:15:31,350 --> 00:15:36,630
expect that anything that goes into the

00:15:33,000 --> 00:15:38,880
library will will will will have a

00:15:36,630 --> 00:15:43,290
corresponding you know validation test

00:15:38,880 --> 00:15:44,940
as a part of the the test suite several

00:15:43,290 --> 00:15:47,250
of the topics that have come up in

00:15:44,940 --> 00:15:52,010
discussion that we want to open up the

00:15:47,250 --> 00:15:53,780
floor to proposal about I math

00:15:52,010 --> 00:15:57,900
lightweight reader

00:15:53,780 --> 00:15:59,640
multiframe file format and multi-part

00:15:57,900 --> 00:16:01,500
ordering I want to spend a little bit of

00:15:59,640 --> 00:16:04,860
time talking about the first one and

00:16:01,500 --> 00:16:06,510
then we'll open up for the rest so if

00:16:04,860 --> 00:16:10,020
any of you were in the session this

00:16:06,510 --> 00:16:15,420
morning at 8:00 the the general software

00:16:10,020 --> 00:16:19,410
foundation overview the high math came

00:16:15,420 --> 00:16:23,190
up as one issue that the people seem

00:16:19,410 --> 00:16:25,710
keen on the idea is that there's a bunch

00:16:23,190 --> 00:16:28,020
of different vector matrix math

00:16:25,710 --> 00:16:31,020
utilities out there lots of projects

00:16:28,020 --> 00:16:34,230
have got to develop their own for one

00:16:31,020 --> 00:16:36,930
reason wouldn't it be better if if

00:16:34,230 --> 00:16:42,210
multiple projects could use the same

00:16:36,930 --> 00:16:45,650
thing and I math has a lot of fans and

00:16:42,210 --> 00:16:48,930
supporters and and it's it's used the

00:16:45,650 --> 00:16:53,880
thing that we've been talking about

00:16:48,930 --> 00:16:57,450
proposing to do is to one modernize it

00:16:53,880 --> 00:17:01,020
and you know update the code in various

00:16:57,450 --> 00:17:07,440
ways split it out from openexr so that

00:17:01,020 --> 00:17:09,480
it's a separate independent entity that

00:17:07,440 --> 00:17:11,880
makes it easier to build and and and

00:17:09,480 --> 00:17:15,720
distribute and integrate with other

00:17:11,880 --> 00:17:18,030
applications one of the main objections

00:17:15,720 --> 00:17:21,990
that people have about the library is

00:17:18,030 --> 00:17:23,310
the use of exceptions and whether you

00:17:21,990 --> 00:17:26,520
agree with it or not there's a lot of

00:17:23,310 --> 00:17:32,370
people that want a vector matrix math

00:17:26,520 --> 00:17:34,710
library that does not have support for

00:17:32,370 --> 00:17:38,270
expression exceptions so

00:17:34,710 --> 00:17:41,100
idea is to to make that configurable

00:17:38,270 --> 00:17:43,950
there are literally millions of lines of

00:17:41,100 --> 00:17:46,830
code that are built on top of this this

00:17:43,950 --> 00:17:49,610
library and that Island in particular

00:17:46,830 --> 00:17:52,350
and I think one of the things that we

00:17:49,610 --> 00:17:54,720
feel going into this is that we're not

00:17:52,350 --> 00:17:56,250
willing to make non backwards compatible

00:17:54,720 --> 00:17:58,799
changes to the library I think there's

00:17:56,250 --> 00:18:01,230
certain you know ship has sailed and in

00:17:58,799 --> 00:18:03,419
certain aspects and we're not willing to

00:18:01,230 --> 00:18:06,600
to make changes in the library that

00:18:03,419 --> 00:18:08,580
would necessitate breaking you're fixing

00:18:06,600 --> 00:18:10,220
a lot of code on top of it so that's

00:18:08,580 --> 00:18:13,830
kind of one of the ground rules

00:18:10,220 --> 00:18:18,630
but what we're imagining is this doesn't

00:18:13,830 --> 00:18:21,029
exist yet but a repo at the level of the

00:18:18,630 --> 00:18:24,360
Academy Software Foundation that's the

00:18:21,029 --> 00:18:26,460
vector matrix box color quaternion

00:18:24,360 --> 00:18:31,549
frustum that kind of thing as well as a

00:18:26,460 --> 00:18:34,140
half library again giving an option

00:18:31,549 --> 00:18:35,820
whether that's if deafs or templates or

00:18:34,140 --> 00:18:39,020
something that would allow you to have a

00:18:35,820 --> 00:18:39,020
version of the library without

00:18:39,169 --> 00:18:48,659
exceptions possibly header only we want

00:18:44,610 --> 00:18:53,360
to move a thread and and hopefully ie X

00:18:48,659 --> 00:18:57,059
out of Island Basin into the VXR proper

00:18:53,360 --> 00:18:59,880
this general utility oughta come with

00:18:57,059 --> 00:19:05,460
Python bindings which are in pi PI I

00:18:59,880 --> 00:19:07,760
math Pie Island base the kind of

00:19:05,460 --> 00:19:11,010
universal consensus is boost Python is a

00:19:07,760 --> 00:19:15,419
pain to deal with and people seem to

00:19:11,010 --> 00:19:18,240
prefer PI by and 11 so migrating to PI

00:19:15,419 --> 00:19:19,679
bind 11 is something that that we

00:19:18,240 --> 00:19:21,779
generally think would be a good idea

00:19:19,679 --> 00:19:24,090
what this would mean is that openexr

00:19:21,779 --> 00:19:26,490
proper would have an external dependency

00:19:24,090 --> 00:19:29,010
on I math but hopefully a lot of the the

00:19:26,490 --> 00:19:32,130
CI infrastructure stuff that's going on

00:19:29,010 --> 00:19:36,779
now should make that a lot easier to

00:19:32,130 --> 00:19:38,520
deal with so before we go into the other

00:19:36,779 --> 00:19:39,419
topics I'd like to open this up for

00:19:38,520 --> 00:19:46,010
discussion

00:19:39,419 --> 00:19:46,010
does anybody have any comments on this

00:19:53,670 --> 00:19:58,120
I'd like to see the half library move

00:19:56,530 --> 00:20:00,280
completely out of my mouth and stand

00:19:58,120 --> 00:20:02,830
alone because it's often the only thing

00:20:00,280 --> 00:20:06,250
that we're bringing in openexr 4 is

00:20:02,830 --> 00:20:08,530
access to half or if we could even move

00:20:06,250 --> 00:20:10,120
towards asking the C++ standards

00:20:08,530 --> 00:20:11,680
committees to include it as a standard

00:20:10,120 --> 00:20:14,860
type or simple things like that would

00:20:11,680 --> 00:20:16,960
make it a bit easier to use so you want

00:20:14,860 --> 00:20:18,850
it you want it separate so you can

00:20:16,960 --> 00:20:28,620
include just that and nothing else

00:20:18,850 --> 00:20:28,620
yep probably yes

00:20:34,810 --> 00:20:40,330
I mean potentially it really depends

00:20:38,050 --> 00:20:42,190
like having header only libraries is

00:20:40,330 --> 00:20:46,330
also not super awesome for your build

00:20:42,190 --> 00:20:49,620
times and things like that so if it just

00:20:46,330 --> 00:20:49,620
still needing to have it as a thing

00:21:27,080 --> 00:21:30,080
yeah

00:21:33,309 --> 00:21:39,440
right so if you just want if you just

00:21:36,260 --> 00:21:42,490
want to pull out half that H out of EXR

00:21:39,440 --> 00:21:46,630
I math you have to you know your full

00:21:42,490 --> 00:21:49,160
build time dependency resolution has to

00:21:46,630 --> 00:21:53,900
support that properly and you can get

00:21:49,160 --> 00:21:55,610
into compatibility issues there so

00:21:53,900 --> 00:21:58,940
oftentimes you'll have a plugin that

00:21:55,610 --> 00:22:00,500
needs half a little little small module

00:21:58,940 --> 00:22:03,790
but you don't want to bring in the

00:22:00,500 --> 00:22:03,790
dependency on the entire library

00:22:50,660 --> 00:22:56,510
you know and and and machine learning as

00:22:53,000 --> 00:22:57,980
well like I believe that's already on

00:22:56,510 --> 00:23:01,850
their radar but I don't know what the

00:22:57,980 --> 00:23:04,520
implementation will end up paying with

00:23:01,850 --> 00:23:07,580
their B floats I guess for brain floats

00:23:04,520 --> 00:23:08,480
or something so that's an adjacent

00:23:07,580 --> 00:23:10,490
proposal

00:23:08,480 --> 00:23:13,100
I guess there's probably a little bit of

00:23:10,490 --> 00:23:14,810
research that needs to go into sorry a

00:23:13,100 --> 00:23:17,830
little bit of research that needs to go

00:23:14,810 --> 00:23:21,050
into the ultimate disposition of half

00:23:17,830 --> 00:23:23,810
but it's probably not a bad idea for us

00:23:21,050 --> 00:23:26,330
somehow collectively to be involved with

00:23:23,810 --> 00:23:27,680
that just because as as the industry

00:23:26,330 --> 00:23:29,780
like we probably have a longer

00:23:27,680 --> 00:23:32,600
experience dealing with half than

00:23:29,780 --> 00:23:34,850
anybody else right yeah

00:23:32,600 --> 00:23:36,910
especially we've done a lot of work with

00:23:34,850 --> 00:23:39,020
really weird corner cases like

00:23:36,910 --> 00:23:40,640
exceptional value propagation and stuff

00:23:39,020 --> 00:23:41,990
like that that if you're just coming to

00:23:40,640 --> 00:23:43,790
it fresh because you're solving for

00:23:41,990 --> 00:23:49,790
machine learning or whatever might not

00:23:43,790 --> 00:23:52,850
have been an issue for you yet to split

00:23:49,790 --> 00:23:54,530
it out as a separate library would make

00:23:52,850 --> 00:23:56,690
life easier for the people that want to

00:23:54,530 --> 00:24:00,190
use that and and nothing else it makes

00:23:56,690 --> 00:24:03,710
it a little bit more cumbersome for

00:24:00,190 --> 00:24:06,880
openexr because it it means it's another

00:24:03,710 --> 00:24:06,880
external dependency

00:24:16,800 --> 00:24:19,760
anybody else

00:24:23,980 --> 00:24:28,610
yeah no I just want to take a

00:24:26,149 --> 00:24:30,799
temperature in the room of like if if

00:24:28,610 --> 00:24:34,130
this split and the kinds of changes we

00:24:30,799 --> 00:24:36,860
talked about we're making would people

00:24:34,130 --> 00:24:38,600
would that actually cause those of you

00:24:36,860 --> 00:24:41,590
who I will not name but know who they

00:24:38,600 --> 00:24:44,210
are to stop making additional

00:24:41,590 --> 00:24:59,600
incompatible vector libraries separately

00:24:44,210 --> 00:25:01,940
for every open source project so a

00:24:59,600 --> 00:25:04,970
little earlier this year I think the

00:25:01,940 --> 00:25:07,309
ffmpeg maintainer for openexr support

00:25:04,970 --> 00:25:10,490
dropped out so has there been any

00:25:07,309 --> 00:25:12,980
thought about trying to push open EXR

00:25:10,490 --> 00:25:16,090
support and ffmpeg a little bit more and

00:25:12,980 --> 00:25:16,090
support that effort

00:25:27,300 --> 00:25:30,990
yeah we were talking about sort of

00:25:29,010 --> 00:25:32,730
improving the state of the C bindings

00:25:30,990 --> 00:25:34,110
that are kind of in there

00:25:32,730 --> 00:25:36,720
and then that becomes a lot more

00:25:34,110 --> 00:25:37,980
palatable for those guys to to adopt the

00:25:36,720 --> 00:25:41,520
dependency because they they like to

00:25:37,980 --> 00:25:44,660
build against C but we like I know we

00:25:41,520 --> 00:25:57,120
have an internal version of the XR

00:25:44,660 --> 00:25:58,500
reader for ffmpeg well so like we use it

00:25:57,120 --> 00:26:02,930
to bake dailies for example right we

00:25:58,500 --> 00:26:02,930
just pipe the XR straight into yeah

00:26:05,420 --> 00:26:12,480
right yeah I don't know that we're

00:26:10,010 --> 00:26:15,740
talking about FF play being able to be

00:26:12,480 --> 00:26:15,740
the primary player yeah yeah

00:26:20,780 --> 00:26:29,240
that's a good segue to the next topic

00:26:24,480 --> 00:26:33,390
unless you want to just related to this

00:26:29,240 --> 00:26:36,330
no there's a unofficial subset of

00:26:33,390 --> 00:26:40,280
openexr that standardized as the asus

00:26:36,330 --> 00:26:44,730
container format simp TST 2065 - for

00:26:40,280 --> 00:26:46,290
that standard mandates no compression

00:26:44,730 --> 00:26:50,100
can be used people ignore that all the

00:26:46,290 --> 00:26:52,380
time but that's the mandate because the

00:26:50,100 --> 00:26:55,890
standard the compression types that are

00:26:52,380 --> 00:26:59,790
built into openexr are not nominative

00:26:55,890 --> 00:27:02,730
lis referenceable standards has there

00:26:59,790 --> 00:27:05,340
been any thought to standardizing some

00:27:02,730 --> 00:27:12,500
of the compression methods that are

00:27:05,340 --> 00:27:12,500
embodied in openexr anybody

00:27:26,549 --> 00:27:31,689
they're not they're not they're not

00:27:29,649 --> 00:27:35,379
likes empty spit standards though that's

00:27:31,689 --> 00:27:39,669
the problem so so Joseph come to the

00:27:35,379 --> 00:27:41,649
ASIS I'm right here in your row come to

00:27:39,669 --> 00:27:44,049
the ASIS of birds of a feather at two

00:27:41,649 --> 00:27:46,809
o'clock you have a little bit of a chat

00:27:44,049 --> 00:27:57,699
about that yeah I would just also add

00:27:46,809 --> 00:28:00,579
that there's a bird flying around no I I

00:27:57,699 --> 00:28:02,409
would just say that the advice to people

00:28:00,579 --> 00:28:04,179
who have questions like that of like

00:28:02,409 --> 00:28:05,499
have you considered and then we all like

00:28:04,179 --> 00:28:07,899
look at each other like no we haven't

00:28:05,499 --> 00:28:10,749
considered that like that is your cue to

00:28:07,899 --> 00:28:13,059
get involved in the project if you want

00:28:10,749 --> 00:28:16,559
a particular future for EXR be the

00:28:13,059 --> 00:28:16,559
person who makes that feature happen

00:28:18,779 --> 00:28:23,739
that's a good segue to the next thing

00:28:21,519 --> 00:28:25,929
that's come up that this was raised last

00:28:23,739 --> 00:28:31,779
year at the birds of a feather it was

00:28:25,929 --> 00:28:34,569
the question of a lightweight sea

00:28:31,779 --> 00:28:39,669
version of the library this comes up in

00:28:34,569 --> 00:28:42,039
various situations for for one reason or

00:28:39,669 --> 00:28:44,229
another applications that don't want to

00:28:42,039 --> 00:28:48,269
have to deal with the full complexity of

00:28:44,229 --> 00:28:48,269
the library for embedded systems or

00:28:49,109 --> 00:28:57,069
they're there is actually a sea API for

00:28:53,309 --> 00:28:59,349
reading or GBA images in openexr I'm not

00:28:57,069 --> 00:29:02,739
sure how widely it's used I have a sense

00:28:59,349 --> 00:29:06,969
of where this is coming from that's not

00:29:02,739 --> 00:29:09,599
really as a solution there is a library

00:29:06,969 --> 00:29:13,869
out there called tiny EXR that is

00:29:09,599 --> 00:29:17,739
maintained by a totally different

00:29:13,869 --> 00:29:19,029
project and but it's just again this is

00:29:17,739 --> 00:29:22,149
not something that the steering

00:29:19,029 --> 00:29:23,949
committee is planning and thing out

00:29:22,149 --> 00:29:26,559
there but if this is something that's of

00:29:23,949 --> 00:29:29,759
interest to the community did I get a

00:29:26,559 --> 00:29:29,759
volunteer over here and

00:30:15,600 --> 00:30:20,640
as someone who still files everything

00:30:30,960 --> 00:30:42,040
only six another topic that has come up

00:30:39,730 --> 00:30:46,840
in discussion was the idea of a multi

00:30:42,040 --> 00:30:48,520
frame pxr format and again I'm bringing

00:30:46,840 --> 00:30:51,850
this up just because it came up in

00:30:48,520 --> 00:30:56,050
discussion and not because we have a

00:30:51,850 --> 00:31:01,200
particular proposal but does anybody

00:30:56,050 --> 00:31:04,950
have anything to suggest or comment on

00:31:01,200 --> 00:31:04,950
good idea a bad idea

00:31:16,120 --> 00:31:20,420
there's already a lot of container

00:31:18,260 --> 00:31:23,900
formats around I'm not sure that

00:31:20,420 --> 00:31:26,690
inventing another one is should socially

00:31:23,900 --> 00:31:28,910
be more like EXR media in mxf or

00:31:26,690 --> 00:31:33,560
something that would be a better

00:31:28,910 --> 00:31:35,840
alternative I don't know I think the

00:31:33,560 --> 00:31:38,270
only reason this didn't get total

00:31:35,840 --> 00:31:40,520
silence was that Peter Hillman wetter

00:31:38,270 --> 00:31:42,230
who's not here said that he had actually

00:31:40,520 --> 00:31:48,800
implemented something like this at

00:31:42,230 --> 00:31:51,920
weather some time ago and so next topic

00:31:48,800 --> 00:31:53,690
I'd come up is there anybody here from

00:31:51,920 --> 00:31:56,000
foundry Oh

00:31:53,690 --> 00:32:03,220
okay do you want to you want to

00:31:56,000 --> 00:32:03,220
introduce the issue yeah or microphone

00:32:06,580 --> 00:32:11,860
so foundry we've implemented behavior

00:32:09,440 --> 00:32:15,680
for multi-part exile rendering in nuke

00:32:11,860 --> 00:32:16,700
so the RGB a part when it's present is

00:32:15,680 --> 00:32:19,010
always the first part

00:32:16,700 --> 00:32:21,920
we've also added functionality so that

00:32:19,010 --> 00:32:25,160
users can completely override the first

00:32:21,920 --> 00:32:28,070
part to be anything that they want this

00:32:25,160 --> 00:32:30,860
has given benefits for I think avi can

00:32:28,070 --> 00:32:33,230
now read only the first part which gives

00:32:30,860 --> 00:32:36,020
performance improvements and we would

00:32:33,230 --> 00:32:39,710
like to see this workflow added to the

00:32:36,020 --> 00:32:42,970
openexr specifications so that it can be

00:32:39,710 --> 00:32:42,970
adopted as a recognized workflow

00:32:52,149 --> 00:32:57,340
we needed a lot in post-production after

00:32:54,640 --> 00:33:00,370
VFX like for the final D I will get

00:32:57,340 --> 00:33:03,130
these openexr s that have you know 47

00:33:00,370 --> 00:33:05,679
mats all as just separate channels in

00:33:03,130 --> 00:33:07,299
the first layer and most of the software

00:33:05,679 --> 00:33:09,250
will sit there and try to you know

00:33:07,299 --> 00:33:11,320
uncompress or deal with all of those

00:33:09,250 --> 00:33:13,360
channels when what we want to do we have

00:33:11,320 --> 00:33:15,549
to just play the RGB once in real time

00:33:13,360 --> 00:33:17,799
and deal with those if we want to stop

00:33:15,549 --> 00:33:20,980
and access one of the mats we can always

00:33:17,799 --> 00:33:22,299
do that so what we get openexr from

00:33:20,980 --> 00:33:23,529
visual effects facilities with all those

00:33:22,299 --> 00:33:25,570
matte channels it's during the

00:33:23,529 --> 00:33:27,669
conforming process our editors have to

00:33:25,570 --> 00:33:30,520
go through and split them out into

00:33:27,669 --> 00:33:32,799
different layers so we would love it if

00:33:30,520 --> 00:33:34,330
it became more of a standard that matte

00:33:32,799 --> 00:33:35,679
channels and ancillary channels were in

00:33:34,330 --> 00:33:37,419
separate layers rather than just

00:33:35,679 --> 00:33:39,940
additional channels of them in the first

00:33:37,419 --> 00:33:43,480
layering things this is what you're

00:33:39,940 --> 00:33:49,200
suggesting then just a convention or is

00:33:43,480 --> 00:33:51,940
there any actual change to the library

00:33:49,200 --> 00:33:54,570
I'm I don't know if it's a convention or

00:33:51,940 --> 00:33:58,809
change the library but it saved my ass

00:33:54,570 --> 00:34:00,340
in that when I have a player going I can

00:33:58,809 --> 00:34:02,679
automatically open the first layer of

00:34:00,340 --> 00:34:04,750
files and give the user something that

00:34:02,679 --> 00:34:06,159
they're happy about while I sneak in the

00:34:04,750 --> 00:34:09,669
background and start loading all the

00:34:06,159 --> 00:34:16,780
other ones so yeah it's it's a good good

00:34:09,669 --> 00:34:18,310
good thing you know maybe it is just a

00:34:16,780 --> 00:34:20,710
convention but the other things that

00:34:18,310 --> 00:34:22,810
seems to you know the ability to do this

00:34:20,710 --> 00:34:24,700
even a nuke is sort of like you know

00:34:22,810 --> 00:34:26,740
well how do we do that you know what

00:34:24,700 --> 00:34:29,320
menus do we have to go so if it was more

00:34:26,740 --> 00:34:31,720
of the default operation you know maybe

00:34:29,320 --> 00:34:35,190
that that would help and other

00:34:31,720 --> 00:34:35,190
compositing platforms too

00:34:43,440 --> 00:34:47,819
yeah just to reiterate the how useful

00:34:46,230 --> 00:34:50,720
this has been and this was something

00:34:47,819 --> 00:34:53,190
that we ran into with a variety of

00:34:50,720 --> 00:34:55,589
visual effects vendors and software

00:34:53,190 --> 00:34:58,380
handling this differently and I think

00:34:55,589 --> 00:35:00,359
you can handle it as a convention but I

00:34:58,380 --> 00:35:03,150
think it would be better off actually

00:35:00,359 --> 00:35:03,809
put into putting some controls into

00:35:03,150 --> 00:35:06,660
openexr

00:35:03,809 --> 00:35:10,799
so it's something that like Josh was

00:35:06,660 --> 00:35:11,789
saying developers of different software

00:35:10,799 --> 00:35:14,010
are not trying to figure out how to

00:35:11,789 --> 00:35:17,819
implement that but it's actually a

00:35:14,010 --> 00:35:19,460
requirement in some way to identify the

00:35:17,819 --> 00:35:21,660
RGB layer your beauty layer and

00:35:19,460 --> 00:35:23,190
something that you you don't have to

00:35:21,660 --> 00:35:24,930
guess whether some software is

00:35:23,190 --> 00:35:26,430
implementing that correctly or they

00:35:24,930 --> 00:35:28,140
followed that version of a convention

00:35:26,430 --> 00:35:29,460
but it's just if they're using that

00:35:28,140 --> 00:35:32,369
version of the library they have to

00:35:29,460 --> 00:35:33,960
register that in a way that all of the

00:35:32,369 --> 00:35:36,030
software is going to handle consistently

00:35:33,960 --> 00:35:39,869
so I definitely think this would be a

00:35:36,030 --> 00:35:42,630
key part moving forward to moving toward

00:35:39,869 --> 00:35:44,849
multi-party xrs and and my experience

00:35:42,630 --> 00:35:47,960
has been the biggest hindrance moving to

00:35:44,849 --> 00:35:47,960
multi part from Singapore

00:36:11,829 --> 00:36:17,210
so kind of related I think it I think

00:36:15,349 --> 00:36:21,140
everybody's talking about reasons here

00:36:17,210 --> 00:36:22,460
about performance about real time I had

00:36:21,140 --> 00:36:25,190
a question I wondered if anybody else

00:36:22,460 --> 00:36:27,109
had come across the problem of actually

00:36:25,190 --> 00:36:29,270
having to decompress the file before we

00:36:27,109 --> 00:36:32,810
upload it to the GPU because we run out

00:36:29,270 --> 00:36:35,300
of bandwidth very rapidly and so I

00:36:32,810 --> 00:36:38,150
wondered about has anyone talked to

00:36:35,300 --> 00:36:39,890
Nvidia I know I have about could they

00:36:38,150 --> 00:36:45,710
support some form of decompression on

00:36:39,890 --> 00:36:49,700
the GPU I just say 60 frames a second

00:36:45,710 --> 00:36:53,410
stereo 4k plus resolutions any form of

00:36:49,700 --> 00:36:53,410
ride any form of er

00:37:09,849 --> 00:37:14,859
I'm wondering if you have any plan to

00:37:12,369 --> 00:37:18,040
support any other float formats

00:37:14,859 --> 00:37:21,060
especially be float16 currently my

00:37:18,040 --> 00:37:23,619
understanding is FB 16 from a

00:37:21,060 --> 00:37:31,290
perspective of other vendors then Nvidia

00:37:23,619 --> 00:37:31,290
be float16 and seems more performant I

00:37:34,500 --> 00:37:39,119
didn't quite get to what the question is

00:37:39,300 --> 00:37:43,309
[Laughter]

00:37:47,010 --> 00:37:52,780
that's easier so my understanding of the

00:37:50,710 --> 00:37:55,930
current format is that it's using FP 16

00:37:52,780 --> 00:37:59,050
right so 10 and the 5 bits respectively

00:37:55,930 --> 00:38:00,790
oh I see and the question is whether

00:37:59,050 --> 00:38:04,270
there is any plan to support any other

00:38:00,790 --> 00:38:06,460
format so for machine learning it would

00:38:04,270 --> 00:38:10,000
be great for us to use be float 16 which

00:38:06,460 --> 00:38:12,099
is a different distribution is 8 & 7 so

00:38:10,000 --> 00:38:15,220
is there any plan for Dart

00:38:12,099 --> 00:38:17,440
you mean just to the extent that openexr

00:38:15,220 --> 00:38:22,030
files themselves are providing training

00:38:17,440 --> 00:38:23,160
data or is that it's hasn't been on our

00:38:22,030 --> 00:38:24,480
radar

00:38:23,160 --> 00:38:27,849
[Music]

00:38:24,480 --> 00:38:30,339
frankly I mean the other sort of yeah

00:38:27,849 --> 00:38:32,560
I'm gonna twister your a question a

00:38:30,339 --> 00:38:33,700
little bit like we have occasionally you

00:38:32,560 --> 00:38:35,950
know had requests

00:38:33,700 --> 00:38:38,200
maybe I'm the person who requested it I

00:38:35,950 --> 00:38:40,510
don't know um for you know supporting

00:38:38,200 --> 00:38:43,480
integer formats which some people still

00:38:40,510 --> 00:38:45,550
use and are handy for things so the

00:38:43,480 --> 00:38:48,490
maybe this just falls into that same

00:38:45,550 --> 00:38:51,310
category of other you know other pixel

00:38:48,490 --> 00:38:54,280
data types but we've never discussed

00:38:51,310 --> 00:38:55,510
that but it's valid if you're interested

00:38:54,280 --> 00:38:58,200
in that I will be more than happy to

00:38:55,510 --> 00:38:58,200
talk to you about it

00:39:00,340 --> 00:39:06,800
some of the EXR it would complicate some

00:39:04,190 --> 00:39:09,080
of the efficiency of the EXR compression

00:39:06,800 --> 00:39:11,150
schemes which are shockingly

00:39:09,080 --> 00:39:13,580
knowledgeable about the ten bits and

00:39:11,150 --> 00:39:16,910
five bits and you know how they go about

00:39:13,580 --> 00:39:19,100
doing that compression so not all of

00:39:16,910 --> 00:39:32,690
them so why require a lot more work than

00:39:19,100 --> 00:39:33,950
just simply supporting it so in terms of

00:39:32,690 --> 00:39:36,890
the hardware that supports that it's

00:39:33,950 --> 00:39:39,710
mostly machine learning directed

00:39:36,890 --> 00:39:43,940
hardware mainly FPGA CPUs from Google

00:39:39,710 --> 00:39:51,170
and Zeon's from Intel and other hard

00:39:43,940 --> 00:39:52,910
work from Intel also that's 2019 thing

00:39:51,170 --> 00:39:54,320
so I assume there will be more

00:39:52,910 --> 00:40:00,950
discussion happening around the be

00:39:54,320 --> 00:40:02,210
float16 hopefully in the future I just

00:40:00,950 --> 00:40:04,580
want to make one more comment which is

00:40:02,210 --> 00:40:07,550
to support that it would be useful to

00:40:04,580 --> 00:40:08,360
have machine learning compatible or

00:40:07,550 --> 00:40:10,940
useful

00:40:08,360 --> 00:40:13,520
EXR files because right now we're forced

00:40:10,940 --> 00:40:16,520
to store our corpuses like in tiff which

00:40:13,520 --> 00:40:17,840
makes me cry every time I see it it's

00:40:16,520 --> 00:40:22,940
like why aren't you using the library

00:40:17,840 --> 00:40:25,190
that I'm working on so I'd like to say

00:40:22,940 --> 00:40:28,820
that we've had occasional need for more

00:40:25,190 --> 00:40:31,220
than 16-bit float so we can have a

00:40:28,820 --> 00:40:33,110
32-bit instrument Tiff's some some

00:40:31,220 --> 00:40:35,830
things just don't we need more dynamic

00:40:33,110 --> 00:40:35,830
range for some things

00:40:59,040 --> 00:41:04,410
so on the note of 32-bit and floats one

00:41:02,430 --> 00:41:06,380
thing I noticed actually was a ticket in

00:41:04,410 --> 00:41:08,760
about this and I think it got closed

00:41:06,380 --> 00:41:10,890
probably because I didn't answer when I

00:41:08,760 --> 00:41:12,960
took confidants actually comment she's

00:41:10,890 --> 00:41:15,840
been busy but in 32-bit float some of

00:41:12,960 --> 00:41:17,790
the compression is currently as far as I

00:41:15,840 --> 00:41:20,490
can tell compressing pairs of bytes

00:41:17,790 --> 00:41:23,190
instead of compared compressing you know

00:41:20,490 --> 00:41:25,280
four byte spans so as a result you can

00:41:23,190 --> 00:41:27,480
very easily just get non compressing

00:41:25,280 --> 00:41:29,099
32-bit files even if they sort of

00:41:27,480 --> 00:41:30,359
obviously you should compress and

00:41:29,099 --> 00:41:32,280
something discussion in that ticket was

00:41:30,359 --> 00:41:34,740
sort of you know maybe it's time to add

00:41:32,280 --> 00:41:36,390
a new compression codec anyway and that

00:41:34,740 --> 00:41:37,800
would be an easier way to sort of fix

00:41:36,390 --> 00:41:40,349
that problem and then just steer people

00:41:37,800 --> 00:41:41,609
in that direction but you know with

00:41:40,349 --> 00:41:43,950
everything moving in the cloud it would

00:41:41,609 --> 00:41:45,359
actually be very advantageous to squeeze

00:41:43,950 --> 00:41:46,650
some of those files down you know and

00:41:45,359 --> 00:41:49,109
maybe see if there's anything that can

00:41:46,650 --> 00:41:50,490
get the sizes down a little more and you

00:41:49,109 --> 00:41:52,770
know low-hanging fruit ways and then

00:41:50,490 --> 00:41:54,300
also you know potentially some you know

00:41:52,770 --> 00:41:57,480
maybe some more advanced ways as well

00:41:54,300 --> 00:41:58,740
like more modern compression one thing I

00:41:57,480 --> 00:42:01,890
was looking at just elaborating that a

00:41:58,740 --> 00:42:03,510
bit there's the discussion about you

00:42:01,890 --> 00:42:05,730
know multi-frame codecs you know

00:42:03,510 --> 00:42:07,200
presumably to reduce the size a lot

00:42:05,730 --> 00:42:08,670
there are some compression codecs that

00:42:07,200 --> 00:42:11,220
allow you to sort of pre compute a

00:42:08,670 --> 00:42:12,540
dictionary of compression tables you

00:42:11,220 --> 00:42:14,099
know maybe that would be a compromise

00:42:12,540 --> 00:42:16,349
where you know we could have some pre

00:42:14,099 --> 00:42:17,970
computed compression so that we squeeze

00:42:16,349 --> 00:42:19,890
the files down a bit more without having

00:42:17,970 --> 00:42:23,869
to deal with sort of random access

00:42:19,890 --> 00:42:23,869
problems just a thought

00:42:27,750 --> 00:42:36,720
oh yeah almir Larry with that one go

00:42:32,220 --> 00:42:38,190
ahead and suggest it contribute this was

00:42:36,720 --> 00:42:41,190
briefly mentioned in a conversation on

00:42:38,190 --> 00:42:43,890
the on the list but uh have you guys

00:42:41,190 --> 00:42:46,440
looked at like Z standard or other zeal

00:42:43,890 --> 00:42:50,099
impressions or sorry not see the but

00:42:46,440 --> 00:42:53,310
others equations the subject of doing

00:42:50,099 --> 00:42:57,810
different levels of Z lib compression

00:42:53,310 --> 00:42:59,010
has definitely come up recently yeah

00:42:57,810 --> 00:43:00,510
that's the one

00:42:59,010 --> 00:43:01,849
there's a mention of someone saying oh

00:43:00,510 --> 00:43:04,500
yeah we're starting to look at other

00:43:01,849 --> 00:43:05,640
compressions and I was like see Sanders

00:43:04,500 --> 00:43:11,700
I noticed that one it's been coming up

00:43:05,640 --> 00:43:13,230
on lately right I don't want to derail

00:43:11,700 --> 00:43:16,710
but we only have five minutes or so left

00:43:13,230 --> 00:43:18,720
one of the other things that that we

00:43:16,710 --> 00:43:21,119
have been at what I've been thinking

00:43:18,720 --> 00:43:27,599
about contributing is sort of a grouped

00:43:21,119 --> 00:43:30,540
metadata attribute so basically you

00:43:27,599 --> 00:43:33,150
could have a group of metadata that is

00:43:30,540 --> 00:43:35,160
not it's just basically brought in and

00:43:33,150 --> 00:43:37,800
not necessarily parsed through we should

00:43:35,160 --> 00:43:39,210
help with the playback performance in

00:43:37,800 --> 00:43:43,320
the real time scenario but also means

00:43:39,210 --> 00:43:45,510
that we have large you could compress

00:43:43,320 --> 00:43:47,790
that things have a smaller file these

00:43:45,510 --> 00:43:49,650
words of things so I don't know if

00:43:47,790 --> 00:43:55,050
there's any other I see Joseph racing

00:43:49,650 --> 00:44:00,089
for the mic so at the moment if you want

00:43:55,050 --> 00:44:00,480
to change one bit of metadata in the

00:44:00,089 --> 00:44:04,980
file

00:44:00,480 --> 00:44:08,490
supposedly say that it was shot at

00:44:04,980 --> 00:44:12,300
what it was accidentally left to the

00:44:08,490 --> 00:44:13,859
camera at like II I 400 that's wrong you

00:44:12,300 --> 00:44:17,220
want to fix it you have to copy the

00:44:13,859 --> 00:44:18,000
entire file there is no metadata update

00:44:17,220 --> 00:44:20,790
in place

00:44:18,000 --> 00:44:22,730
should there be that's sort of another

00:44:20,790 --> 00:44:24,960
thing that's been related to this that

00:44:22,730 --> 00:44:28,589
we've we've talked about where you

00:44:24,960 --> 00:44:29,890
basically lightweight if it's size

00:44:28,589 --> 00:44:34,989
compatible then

00:44:29,890 --> 00:44:36,160
be able to just poke it in I don't know

00:44:34,989 --> 00:44:45,700
I don't know where we'll get to with it

00:44:36,160 --> 00:44:53,650
but that has definitely come up and

00:44:45,700 --> 00:44:57,130
you'll ask one more question thank you

00:44:53,650 --> 00:44:59,019
and there's box lunches back there if

00:44:57,130 --> 00:45:01,259
you guys are staying around rez is up

00:44:59,019 --> 00:45:01,259

YouTube URL: https://www.youtube.com/watch?v=qOlmRiHwRck


