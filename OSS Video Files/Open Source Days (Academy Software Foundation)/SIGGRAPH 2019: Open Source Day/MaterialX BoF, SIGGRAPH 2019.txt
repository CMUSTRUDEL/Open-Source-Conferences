Title: MaterialX BoF, SIGGRAPH 2019
Publication date: 2019-08-23
Playlist: SIGGRAPH 2019: Open Source Day
Description: 
	A discussion of the latest updates to the MaterialX open standard for rich material and lookdev content, including its new physically-based shading nodes and code generation framework. Part of Open Source Day at SIGGRAPH, hosted by Academy Software Foundation.

Speakers:
Doug Smythe, Industrial Light & Magic
Jonathan Stone, Lucasfilm
Davide Pesare, Adobe
Henrik Edstrom, Autodesk
Captions: 
	00:00:00,030 --> 00:00:05,069
right hello everyone thanks for coming

00:00:02,240 --> 00:00:08,250
we are here today to discuss material X

00:00:05,069 --> 00:00:11,700
and open standard for network based CG

00:00:08,250 --> 00:00:14,059
object looks as I can read slides we

00:00:11,700 --> 00:00:15,990
have five presentations for you today

00:00:14,059 --> 00:00:18,180
there should be plenty of time at the

00:00:15,990 --> 00:00:19,590
end for Q&A so we're going to hold all

00:00:18,180 --> 00:00:21,150
of our questions until the end if that's

00:00:19,590 --> 00:00:23,580
okay with y'all

00:00:21,150 --> 00:00:26,279
I'm Doug Smith I will start with a quick

00:00:23,580 --> 00:00:28,470
recap of what material X is and discuss

00:00:26,279 --> 00:00:31,500
what's new and approved in the latest

00:00:28,470 --> 00:00:34,620
version then Jonathan stone will come up

00:00:31,500 --> 00:00:37,890
and describe even more new technology in

00:00:34,620 --> 00:00:39,780
the open-source library then David APIs

00:00:37,890 --> 00:00:41,309
re will come up and talk a little bit

00:00:39,780 --> 00:00:43,649
about some prototype work to support

00:00:41,309 --> 00:00:45,840
portable shaders using material X in

00:00:43,649 --> 00:00:49,410
Adobe's substance painter and substance

00:00:45,840 --> 00:00:51,120
designer tools very cool I'll be back up

00:00:49,410 --> 00:00:53,280
to talk a little bit about a material X

00:00:51,120 --> 00:00:56,250
based material interchange system we

00:00:53,280 --> 00:00:57,960
developed at ILM and finally Hendrick

00:00:56,250 --> 00:01:00,629
edge trim will give us an update on

00:00:57,960 --> 00:01:04,559
material X support in some of Autodesk's

00:01:00,629 --> 00:01:06,299
architecture and design products I said

00:01:04,559 --> 00:01:08,729
we have five today but there's also more

00:01:06,299 --> 00:01:11,520
presentations and discussions tomorrow

00:01:08,729 --> 00:01:14,760
at the Autodesk exhibitor session it's

00:01:11,520 --> 00:01:16,229
tomorrow 3:15 in room 404 a if you're

00:01:14,760 --> 00:01:18,509
interested in what you're hearing today

00:01:16,229 --> 00:01:20,960
even more so tomorrow because it's going

00:01:18,509 --> 00:01:24,180
to be jam-packed with action and demos

00:01:20,960 --> 00:01:26,640
we'll be showing some things from the

00:01:24,180 --> 00:01:28,470
Autodesk and Adobe teams some exciting

00:01:26,640 --> 00:01:30,930
prototypes and research projects

00:01:28,470 --> 00:01:33,360
including material design editing and

00:01:30,930 --> 00:01:35,579
transfer between substance designer maya

00:01:33,360 --> 00:01:37,890
new prototype looked of editor from

00:01:35,579 --> 00:01:40,290
Autodesk and rendering in various GCC

00:01:37,890 --> 00:01:43,619
viewports the material x viewer and the

00:01:40,290 --> 00:01:45,390
Arnold renderer so how many of you here

00:01:43,619 --> 00:01:48,299
at least somewhat familiar with what

00:01:45,390 --> 00:01:50,970
material X is hopefully most of you okay

00:01:48,299 --> 00:01:52,950
so just a very very quick overview of

00:01:50,970 --> 00:01:54,780
what material X is for those who are a

00:01:52,950 --> 00:01:57,149
little new to it

00:01:54,780 --> 00:01:59,310
it's a schema and a file format that's

00:01:57,149 --> 00:02:01,469
used to describe complete CG object

00:01:59,310 --> 00:02:02,759
looks the idea is that using material X

00:02:01,469 --> 00:02:05,009
you should be able to describe your

00:02:02,759 --> 00:02:06,329
shading networks your materials your

00:02:05,009 --> 00:02:08,459
rendering assignments and we hope

00:02:06,329 --> 00:02:11,550
everything soup-to-nuts that you might

00:02:08,459 --> 00:02:14,150
need to describe the look of a CG asset

00:02:11,550 --> 00:02:16,620
in an application independent portable

00:02:14,150 --> 00:02:18,710
open-source format that's the goal

00:02:16,620 --> 00:02:21,570
hopefully we're achieving some of that

00:02:18,710 --> 00:02:23,340
the specification also just defines

00:02:21,570 --> 00:02:25,260
exact behavior for a large number of

00:02:23,340 --> 00:02:27,150
standard nodes for things like reading

00:02:25,260 --> 00:02:29,070
texture images procedural pattern

00:02:27,150 --> 00:02:31,200
generation and various mathematical and

00:02:29,070 --> 00:02:33,120
image processing operations which all

00:02:31,200 --> 00:02:35,070
implementations are expected to support

00:02:33,120 --> 00:02:36,840
which provides a consistent predictable

00:02:35,070 --> 00:02:40,560
result when you're evaluating networks

00:02:36,840 --> 00:02:42,120
regardless of the application material X

00:02:40,560 --> 00:02:45,780
has a number of key features that make

00:02:42,120 --> 00:02:49,320
it pretty good it has strong data typing

00:02:45,780 --> 00:02:51,990
no fuzzing of value types it's fully

00:02:49,320 --> 00:02:54,930
color managed so you can keep track of

00:02:51,990 --> 00:02:56,490
what color spaces everything is in it's

00:02:54,930 --> 00:02:58,560
compatible with but doesn't require a

00:02:56,490 --> 00:03:01,950
lot of other open standards which we

00:02:58,560 --> 00:03:03,630
like around here it's live not baked

00:03:01,950 --> 00:03:05,640
which means that setups retain their

00:03:03,630 --> 00:03:07,500
original editable representation rather

00:03:05,640 --> 00:03:09,480
than having everything get down on two

00:03:07,500 --> 00:03:11,700
attributes on geometry but most

00:03:09,480 --> 00:03:14,010
importantly it's extremely extensible

00:03:11,700 --> 00:03:16,470
you can have user-defined those and

00:03:14,010 --> 00:03:18,090
shaders application specific node

00:03:16,470 --> 00:03:19,860
parameters and attributes if you need to

00:03:18,090 --> 00:03:22,410
branch off from the default and

00:03:19,860 --> 00:03:23,940
user-defined data types which is going

00:03:22,410 --> 00:03:27,390
to be really important coming up in some

00:03:23,940 --> 00:03:29,040
of the upcoming presentations over the

00:03:27,390 --> 00:03:32,160
past year we've been working with the

00:03:29,040 --> 00:03:35,220
Autodesk and Adobe folks to integrate

00:03:32,160 --> 00:03:37,620
material X capabilities into their

00:03:35,220 --> 00:03:39,060
products and prototypes and address the

00:03:37,620 --> 00:03:41,610
various things that came up along the

00:03:39,060 --> 00:03:43,500
way these have led to significant

00:03:41,610 --> 00:03:45,390
updates to the material X specification

00:03:43,500 --> 00:03:50,040
and library which is it now at version

00:03:45,390 --> 00:03:52,140
1.3 seven and a lot of that is available

00:03:50,040 --> 00:03:54,209
right now on our github which you can

00:03:52,140 --> 00:03:56,040
access through material X or by finding

00:03:54,209 --> 00:03:58,500
the big blue github button and clicking

00:03:56,040 --> 00:04:00,209
on it to go there and speaking of the

00:03:58,500 --> 00:04:02,340
neutral export site it's been updated

00:04:00,209 --> 00:04:05,130
with a lot of new information as well as

00:04:02,340 --> 00:04:06,660
some new fully functional sample Python

00:04:05,130 --> 00:04:08,070
scripts to read parsed and right

00:04:06,660 --> 00:04:09,930
material x files which is something I

00:04:08,070 --> 00:04:13,380
needed to last year that we needed

00:04:09,930 --> 00:04:16,830
examples of so what's new and improved

00:04:13,380 --> 00:04:18,600
in 137 I'm gonna cover just a few things

00:04:16,830 --> 00:04:21,030
here I'm assuming that you guys have

00:04:18,600 --> 00:04:23,130
memorized the one three six spec top to

00:04:21,030 --> 00:04:25,139
bottom if not you can download online

00:04:23,130 --> 00:04:27,240
it's 77 pages of rivet

00:04:25,139 --> 00:04:29,759
reading I highly encourage you to get it

00:04:27,240 --> 00:04:31,710
if you want a good night's sleep the

00:04:29,759 --> 00:04:33,680
most important and biggest changed since

00:04:31,710 --> 00:04:36,300
last year is the addition of shader Jen

00:04:33,680 --> 00:04:38,520
this is a module to generate complex

00:04:36,300 --> 00:04:40,469
portable rendering shaders using node

00:04:38,520 --> 00:04:41,969
graphs along with the creation of a

00:04:40,469 --> 00:04:44,129
number of physically based shading those

00:04:41,969 --> 00:04:46,199
to use in these shader definition

00:04:44,129 --> 00:04:48,060
diagraphs it's all really cool stuff and

00:04:46,199 --> 00:04:50,639
Jonathan Stone will tell us all about it

00:04:48,060 --> 00:04:53,310
in the next presentation

00:04:50,639 --> 00:04:54,990
besides the shader Jen library in the

00:04:53,310 --> 00:04:57,180
PBR nodes there is a number of other

00:04:54,990 --> 00:04:59,370
additions several new nodes that are

00:04:57,180 --> 00:05:01,949
described it there and the functionality

00:04:59,370 --> 00:05:04,979
of many existing standard nodes has been

00:05:01,949 --> 00:05:06,270
expanded with new things don't worry

00:05:04,979 --> 00:05:08,340
about taking notes on this because it's

00:05:06,270 --> 00:05:10,439
all in the changeless stock online so

00:05:08,340 --> 00:05:12,830
I'm just you know trying to give you the

00:05:10,439 --> 00:05:15,000
high level coverage of what we have here

00:05:12,830 --> 00:05:18,930
some other things that are actually new

00:05:15,000 --> 00:05:20,699
concepts in 1:37 first a look in

00:05:18,930 --> 00:05:22,560
material X is a particular combination

00:05:20,699 --> 00:05:24,330
of assignments of materials rendering

00:05:22,560 --> 00:05:26,789
property and visibility to various

00:05:24,330 --> 00:05:28,770
geometries material X has always been

00:05:26,789 --> 00:05:30,569
able to specify a number of looks within

00:05:28,770 --> 00:05:33,750
a file but there wasn't a mechanism to

00:05:30,569 --> 00:05:36,180
say these four looks go together or this

00:05:33,750 --> 00:05:39,509
is the set of defined looks for my asset

00:05:36,180 --> 00:05:41,339
so in 137 we added look groups to do

00:05:39,509 --> 00:05:43,439
this as well as a way to say which look

00:05:41,339 --> 00:05:46,169
is the currently active one so it's good

00:05:43,439 --> 00:05:50,099
but if you're writing a you eyes using

00:05:46,169 --> 00:05:52,339
material X to maintain your looks

00:05:50,099 --> 00:05:55,680
another thing that got reworked was

00:05:52,339 --> 00:05:57,990
geometric attributes in 136 and earlier

00:05:55,680 --> 00:05:59,490
we had something called geometers which

00:05:57,990 --> 00:06:01,379
were used to define and retrieve at

00:05:59,490 --> 00:06:03,839
route values associated associated with

00:06:01,379 --> 00:06:05,939
geometries but it turned out that using

00:06:03,839 --> 00:06:08,250
these in filing strings were problematic

00:06:05,939 --> 00:06:10,439
because of evaluation scope and so we

00:06:08,250 --> 00:06:13,319
introduced the idea of tokens last year

00:06:10,439 --> 00:06:15,089
in 136 so now this year the

00:06:13,319 --> 00:06:16,529
functionality that was left over has

00:06:15,089 --> 00:06:18,210
been moved into something called geom

00:06:16,529 --> 00:06:20,759
props which are now semantically

00:06:18,210 --> 00:06:22,710
equivalent to us d's prim VARs we're

00:06:20,759 --> 00:06:26,250
trying to be on the same page as our USD

00:06:22,710 --> 00:06:27,779
friends so geometric properties are

00:06:26,250 --> 00:06:29,580
defined using a new gene on prop def

00:06:27,779 --> 00:06:31,470
element and you can view the value of it

00:06:29,580 --> 00:06:36,600
using a jump value in your

00:06:31,470 --> 00:06:38,730
no graph the next big change has to do

00:06:36,600 --> 00:06:41,670
with the way that outputs of nodes are

00:06:38,730 --> 00:06:43,410
defined for several years interlocks has

00:06:41,670 --> 00:06:45,270
two supported nodes with multiple

00:06:43,410 --> 00:06:47,040
outputs but it always felt like a bit of

00:06:45,270 --> 00:06:49,200
an afterthought the node was declared

00:06:47,040 --> 00:06:51,420
with this weird multi output type and

00:06:49,200 --> 00:06:53,550
the multi output nodes had explicit

00:06:51,420 --> 00:06:55,980
outputs while single output nodes had an

00:06:53,550 --> 00:06:58,350
implicit but unnamed output but worse

00:06:55,980 --> 00:07:00,570
the way that you access the nodes actual

00:06:58,350 --> 00:07:02,880
outputs and types through the API was

00:07:00,570 --> 00:07:07,110
different for single output versus multi

00:07:02,880 --> 00:07:08,640
output types so in 137 we have unified

00:07:07,110 --> 00:07:11,010
the definition of single and multiple

00:07:08,640 --> 00:07:12,660
output types into a single syntax so

00:07:11,010 --> 00:07:15,210
output names and types are now always

00:07:12,660 --> 00:07:17,370
declared using child output elements and

00:07:15,210 --> 00:07:20,100
the node def itself no longer declares a

00:07:17,370 --> 00:07:23,130
type at all one side benefit of this

00:07:20,100 --> 00:07:25,650
change is that you can now have default

00:07:23,130 --> 00:07:28,320
input pass-through per output so you can

00:07:25,650 --> 00:07:30,150
say default layer' this output is this

00:07:28,320 --> 00:07:32,700
input the default value of this output

00:07:30,150 --> 00:07:33,990
is that other input so systems that

00:07:32,700 --> 00:07:36,780
don't understand your node will know

00:07:33,990 --> 00:07:40,110
what to do to pass through values you

00:07:36,780 --> 00:07:42,030
couldn't do this at all in 1:36 a few

00:07:40,110 --> 00:07:44,340
other miscellaneous changes due to

00:07:42,030 --> 00:07:48,660
popular demand Swizzle on input channel

00:07:44,340 --> 00:07:49,919
attribute is back so it's back and there

00:07:48,660 --> 00:07:51,810
it's really great for on-the-fly type

00:07:49,919 --> 00:07:54,720
conversion in channel extraction we've

00:07:51,810 --> 00:07:57,750
added a few new UI related parameters

00:07:54,720 --> 00:07:59,790
and attributes for the inputs there's a

00:07:57,750 --> 00:08:02,729
new mirror mode to make it a little bit

00:07:59,790 --> 00:08:05,580
more like you know the OS l set we

00:08:02,729 --> 00:08:07,560
renamed the black mode to constant

00:08:05,580 --> 00:08:10,140
because we felt that was more useful in

00:08:07,560 --> 00:08:13,560
things like bump maps that don't have a

00:08:10,140 --> 00:08:15,330
zero point zero value default value and

00:08:13,560 --> 00:08:19,860
a bunch of other changes that you can

00:08:15,330 --> 00:08:22,410
read about in the changed dock at the

00:08:19,860 --> 00:08:24,240
moment as far as the library API we're a

00:08:22,410 --> 00:08:26,280
little bit in the bifurcated State the

00:08:24,240 --> 00:08:30,210
currently released code base is called

00:08:26,280 --> 00:08:32,729
one 36.3 which is 136 with all the stuff

00:08:30,210 --> 00:08:34,140
from 137 that we added to get shader gen

00:08:32,729 --> 00:08:36,630
up and running and implement the

00:08:34,140 --> 00:08:38,729
Autodesk standard surface Pixar's USD

00:08:36,630 --> 00:08:41,729
preview service and Island unified surf

00:08:38,729 --> 00:08:44,140
shaders entirely as node graphs plus

00:08:41,729 --> 00:08:45,100
whatever else we had time to fit in

00:08:44,140 --> 00:08:46,660
- that didn't break a

00:08:45,100 --> 00:08:48,610
backwards-compatibility or more

00:08:46,660 --> 00:08:50,140
importantly didn't break the demos that

00:08:48,610 --> 00:08:52,240
we wanted to show you at SIGGRAPH this

00:08:50,140 --> 00:08:53,890
year so on the top is what is in the

00:08:52,240 --> 00:08:56,230
library now and below is some the stuff

00:08:53,890 --> 00:08:59,530
that is coming real soon as soon as we

00:08:56,230 --> 00:09:01,660
get back to work in the future

00:08:59,530 --> 00:09:04,150
well more nodes more PBR knows we'll

00:09:01,660 --> 00:09:05,910
always be great I'm actually hoping that

00:09:04,150 --> 00:09:09,850
some of you guys can start contributing

00:09:05,910 --> 00:09:13,330
nodes as material X's are files that we

00:09:09,850 --> 00:09:14,890
can put into user contributed libraries

00:09:13,330 --> 00:09:16,120
that would be really cool and I know

00:09:14,890 --> 00:09:18,670
Jonathan's going to mention some new

00:09:16,120 --> 00:09:20,650
things in his talk but mostly the

00:09:18,670 --> 00:09:23,680
features whatever you guys want it to be

00:09:20,650 --> 00:09:26,230
please join the discussion forum on

00:09:23,680 --> 00:09:28,210
material x.org there's the button to get

00:09:26,230 --> 00:09:30,250
to it on the website and let us know

00:09:28,210 --> 00:09:31,840
what you think and yes the joining

00:09:30,250 --> 00:09:33,730
button was broken for a little while

00:09:31,840 --> 00:09:36,880
because of a change to Google Groups but

00:09:33,730 --> 00:09:39,040
we think that's fixed now so that's it

00:09:36,880 --> 00:09:40,540
for my part before I turn it over to

00:09:39,040 --> 00:09:42,460
Jonathan like to thank all you for

00:09:40,540 --> 00:09:44,200
coming and your interested in material X

00:09:42,460 --> 00:09:45,580
and I would especially like to thank the

00:09:44,200 --> 00:09:47,410
Academy Software Foundation for

00:09:45,580 --> 00:09:51,250
organizing and sponsoring open-source

00:09:47,410 --> 00:09:52,570
State here at SIGGRAPH and doing all the

00:09:51,250 --> 00:09:54,280
legwork to get this thing put together

00:09:52,570 --> 00:09:56,170
cuz it's a lot of work to put these

00:09:54,280 --> 00:09:58,090
events together so thank you thank you

00:09:56,170 --> 00:09:59,850
thank you now I'd like to turn over to

00:09:58,090 --> 00:10:04,020
Jonathan stone who will talk more about

00:09:59,850 --> 00:10:04,020
new stuff in the open source library

00:10:07,220 --> 00:10:10,399
thank you

00:10:25,779 --> 00:10:31,069
all right thank you very much Doug um so

00:10:29,990 --> 00:10:33,170
yeah let's see

00:10:31,069 --> 00:10:35,269
I'm Jonathan stone from the Lucasfilm

00:10:33,170 --> 00:10:36,980
ADG and in this section I wanted to give

00:10:35,269 --> 00:10:38,600
a high-level overview of the new

00:10:36,980 --> 00:10:40,939
features in the material X codebase and

00:10:38,600 --> 00:10:43,069
tool set and then talk briefly about

00:10:40,939 --> 00:10:48,470
some more forward-looking work at

00:10:43,069 --> 00:10:50,569
Lucasfilm Autodesk and Adobe so first to

00:10:48,470 --> 00:10:52,730
give a bit of backstory many of the

00:10:50,569 --> 00:10:54,019
technology updates this year had their

00:10:52,730 --> 00:10:56,389
roots in a collaboration between

00:10:54,019 --> 00:10:59,029
Lucasfilm and Autodesk that began back

00:10:56,389 --> 00:11:01,519
in 2016 in the early days of the

00:10:59,029 --> 00:11:03,379
material X project Autodesk had been

00:11:01,519 --> 00:11:05,930
developing their own internal material

00:11:03,379 --> 00:11:08,240
format called abstract material graphs

00:11:05,930 --> 00:11:10,399
and after a few discussions both of our

00:11:08,240 --> 00:11:12,500
teams recognized that the two systems

00:11:10,399 --> 00:11:14,870
were very closely aligned and that the

00:11:12,500 --> 00:11:17,060
unique ideas and Autodesk's approach

00:11:14,870 --> 00:11:19,759
would make material X more effective and

00:11:17,060 --> 00:11:21,620
Universal so Autodesk soon moved their

00:11:19,759 --> 00:11:23,569
development resources over to material X

00:11:21,620 --> 00:11:25,069
and started developing a set of key

00:11:23,569 --> 00:11:27,620
extensions that were given the name

00:11:25,069 --> 00:11:29,810
shader X there were two main features

00:11:27,620 --> 00:11:33,319
that shader X brought to the material X

00:11:29,810 --> 00:11:36,319
project the first is a set of true

00:11:33,319 --> 00:11:37,519
physically-based shading nodes so before

00:11:36,319 --> 00:11:39,110
the shader X collaboration a

00:11:37,519 --> 00:11:41,839
physically-based shader like standard

00:11:39,110 --> 00:11:43,610
surface was effectively a black box with

00:11:41,839 --> 00:11:46,160
material X able to describe the patterns

00:11:43,610 --> 00:11:48,560
that fed into the shaders inputs but not

00:11:46,160 --> 00:11:50,480
the shader itself now on material X has

00:11:48,560 --> 00:11:51,740
a rich set of physically-based shading

00:11:50,480 --> 00:11:53,540
notes to describe the different

00:11:51,740 --> 00:11:56,029
distribution functions and layering

00:11:53,540 --> 00:11:58,519
operations that compose a physically

00:11:56,029 --> 00:12:00,649
based shader and the repository contains

00:11:58,519 --> 00:12:03,230
shading graphs for both standard surface

00:12:00,649 --> 00:12:05,420
and USB preview surface as initial

00:12:03,230 --> 00:12:09,079
examples of how you can use the the near

00:12:05,420 --> 00:12:11,029
node set the second new feature is the

00:12:09,079 --> 00:12:12,920
one that Doug referenced earlier is a

00:12:11,029 --> 00:12:14,809
general-purpose framework for shader

00:12:12,920 --> 00:12:16,670
code generation which makes it

00:12:14,809 --> 00:12:18,740
straightforward to convert a material x

00:12:16,670 --> 00:12:21,589
document into domain specific shading

00:12:18,740 --> 00:12:23,750
code in a language such as OS l or GLSL

00:12:21,589 --> 00:12:25,970
now this this feature marks a pretty

00:12:23,750 --> 00:12:27,620
fundamental shift for material acts as

00:12:25,970 --> 00:12:29,870
it means that the application no longer

00:12:27,620 --> 00:12:32,029
needs to encode either the rules of

00:12:29,870 --> 00:12:34,040
material acts or the details of the node

00:12:32,029 --> 00:12:35,630
set that it's using by converting

00:12:34,040 --> 00:12:37,150
material directly into shader code it

00:12:35,630 --> 00:12:39,250
can render any content

00:12:37,150 --> 00:12:41,230
the material contains even a document

00:12:39,250 --> 00:12:43,450
that's based on completely custom nodes

00:12:41,230 --> 00:12:45,580
that can be rendered in this way as long

00:12:43,450 --> 00:12:49,260
as the definitions of those custom nodes

00:12:45,580 --> 00:12:52,720
are available at shader generation time

00:12:49,260 --> 00:12:54,940
so early in the shader X collaboration

00:12:52,720 --> 00:12:57,070
with Autodesk it became clear that the

00:12:54,940 --> 00:12:59,050
combination of these two features would

00:12:57,070 --> 00:13:01,600
enable the construction of a material X

00:12:59,050 --> 00:13:04,300
viewer where cogeneration would be used

00:13:01,600 --> 00:13:06,850
to convert the content into GLSL for the

00:13:04,300 --> 00:13:08,860
application viewport we started on a

00:13:06,850 --> 00:13:11,320
public prototype for this project in

00:13:08,860 --> 00:13:14,080
early 2019 building upon the in progress

00:13:11,320 --> 00:13:16,690
work at Autodesk and it's now been

00:13:14,080 --> 00:13:19,330
published back to material X master in

00:13:16,690 --> 00:13:22,620
these two images you can see eylem X lab

00:13:19,330 --> 00:13:25,870
production materials for bb-8 and r2d2

00:13:22,620 --> 00:13:29,140
rendering in the material x viewer and

00:13:25,870 --> 00:13:31,450
you'll see more of these assets at the

00:13:29,140 --> 00:13:34,780
auto decision series talks and in some

00:13:31,450 --> 00:13:36,370
other sessions that you'll see here one

00:13:34,780 --> 00:13:38,680
important advantage of having a standard

00:13:36,370 --> 00:13:40,690
viewer in the repository is that it

00:13:38,680 --> 00:13:43,060
provides a ground truth reference for

00:13:40,690 --> 00:13:44,370
renders of material X content which can

00:13:43,060 --> 00:13:47,020
easily be compared to other

00:13:44,370 --> 00:13:48,910
implementations additionally we've

00:13:47,020 --> 00:13:51,250
strive to keep the application the

00:13:48,910 --> 00:13:52,840
viewer application simple enough that it

00:13:51,250 --> 00:13:55,120
provides a good reference for how

00:13:52,840 --> 00:13:59,140
material X shader code Jen can be

00:13:55,120 --> 00:14:00,730
integrated into other applications so

00:13:59,140 --> 00:14:02,980
taking this work forward into the future

00:14:00,730 --> 00:14:04,810
we believe there's another compelling

00:14:02,980 --> 00:14:07,150
use case for physically based shading

00:14:04,810 --> 00:14:09,550
graphs which is in the translation from

00:14:07,150 --> 00:14:11,200
one shading model to another this is a

00:14:09,550 --> 00:14:12,730
feature that we've long wanted at

00:14:11,200 --> 00:14:15,610
Lucasfilm and it came up very recently

00:14:12,730 --> 00:14:17,530
in the development of our bb-8 and r2d2

00:14:15,610 --> 00:14:20,350
your assets for SIGGRAPH where we wanted

00:14:17,530 --> 00:14:22,660
a simple consistent way to translate our

00:14:20,350 --> 00:14:24,850
assets from lucasfilm's unified surf

00:14:22,660 --> 00:14:27,220
just standard surface for rendering in

00:14:24,850 --> 00:14:28,540
nan Lucasfilm tools and the left

00:14:27,220 --> 00:14:31,360
screenshot you're seeing the original

00:14:28,540 --> 00:14:33,040
bb-8 asset with unified surf and on the

00:14:31,360 --> 00:14:35,260
right screenshot you're seeing the same

00:14:33,040 --> 00:14:37,510
asset with a translation graph that

00:14:35,260 --> 00:14:40,510
remap sits shading inputs from unified

00:14:37,510 --> 00:14:42,010
surf to standard surface it's worth

00:14:40,510 --> 00:14:44,350
noting this technology is still quite

00:14:42,010 --> 00:14:47,260
early in development and the creation of

00:14:44,350 --> 00:14:48,400
the translation graph itself is still a

00:14:47,260 --> 00:14:52,720
manual process

00:14:48,400 --> 00:14:56,950
but we believe it's very compelling for

00:14:52,720 --> 00:14:58,680
the future and and I'm sorry we believe

00:14:56,950 --> 00:15:01,870
this very compelling for the future and

00:14:58,680 --> 00:15:04,150
it's something we wanted to discuss with

00:15:01,870 --> 00:15:07,720
the community and bring up for others to

00:15:04,150 --> 00:15:09,520
give feedback on so another compelling

00:15:07,720 --> 00:15:11,920
project that could potentially be built

00:15:09,520 --> 00:15:14,800
upon the new shader generation framework

00:15:11,920 --> 00:15:16,420
is an automated texture Baker which

00:15:14,800 --> 00:15:18,279
would flatten an arbitrarily complex

00:15:16,420 --> 00:15:20,800
material X graphed down to a single

00:15:18,279 --> 00:15:24,250
texture or a single udimm set for each

00:15:20,800 --> 00:15:26,350
shader input this could be combined with

00:15:24,250 --> 00:15:28,240
the shader translation graphs to provide

00:15:26,350 --> 00:15:30,040
efficient preparation of materials for

00:15:28,240 --> 00:15:32,110
different rendering targets in

00:15:30,040 --> 00:15:34,900
situations where the flexibility of the

00:15:32,110 --> 00:15:36,220
full node graph isn't required this is a

00:15:34,900 --> 00:15:38,860
project that we're currently discussing

00:15:36,220 --> 00:15:40,750
with a bunch of our partner Studios and

00:15:38,860 --> 00:15:42,100
we'd encourage other teams to reach out

00:15:40,750 --> 00:15:46,270
if they would be interested in

00:15:42,100 --> 00:15:48,430
participating in that so finally I

00:15:46,270 --> 00:15:50,080
wanted to know some of the pretty

00:15:48,430 --> 00:15:52,210
fabulous new work that Autodesk and

00:15:50,080 --> 00:15:54,700
Adobe are building upon the new feature

00:15:52,210 --> 00:15:56,589
set in material X in this screenshot

00:15:54,700 --> 00:15:58,540
you're seeing a prototype of material X

00:15:56,589 --> 00:16:00,339
support in Maya with shader code

00:15:58,540 --> 00:16:04,120
generation being used to automatically

00:16:00,339 --> 00:16:06,370
generate the GLSL and OSL shaders that

00:16:04,120 --> 00:16:08,560
are respectively rendered in the OpenGL

00:16:06,370 --> 00:16:10,300
and Arnold viewports um

00:16:08,560 --> 00:16:11,740
it's worth noting that not only the

00:16:10,300 --> 00:16:13,630
pattern graphs are being converted to

00:16:11,740 --> 00:16:15,550
shading code and rendered but also the

00:16:13,630 --> 00:16:17,350
physically-based shading graphs using

00:16:15,550 --> 00:16:19,060
the latest graph definition of standard

00:16:17,350 --> 00:16:21,580
surface that Albert asked is added to

00:16:19,060 --> 00:16:23,709
the material X repository ah this is

00:16:21,580 --> 00:16:26,170
just a very first look at this this new

00:16:23,709 --> 00:16:27,730
technology it's just a prototype but

00:16:26,170 --> 00:16:29,320
much more detailed demos will be

00:16:27,730 --> 00:16:31,360
provided at the Autodesk vision series

00:16:29,320 --> 00:16:34,240
tomorrow so I encourage you guys to come

00:16:31,360 --> 00:16:36,220
and check it out and on the adobe side

00:16:34,240 --> 00:16:38,260
this is a prototype of material x

00:16:36,220 --> 00:16:40,060
support in substance designer with a

00:16:38,260 --> 00:16:42,339
portable material graph shown at the top

00:16:40,060 --> 00:16:45,310
and the two viewports showing equivalent

00:16:42,339 --> 00:16:46,390
visuals in opengl and array I won't go

00:16:45,310 --> 00:16:48,400
into too much detail on this because

00:16:46,390 --> 00:16:50,290
Java de pez array will be presenting

00:16:48,400 --> 00:16:52,810
more details on this work later in the

00:16:50,290 --> 00:16:54,940
session and also David Larson from ah

00:16:52,810 --> 00:16:56,860
from the same team will show some cool

00:16:54,940 --> 00:16:58,930
demos in substance designer and painter

00:16:56,860 --> 00:17:00,540
at the Autodesk vision series tomorrow

00:16:58,930 --> 00:17:02,680
afternoon

00:17:00,540 --> 00:17:04,480
funnily I just wanted to express my

00:17:02,680 --> 00:17:06,640
gratitude for the contributions of all

00:17:04,480 --> 00:17:08,380
the people on this slide particular I

00:17:06,640 --> 00:17:10,360
wanted to call out a new class Harrison

00:17:08,380 --> 00:17:12,430
who couldn't be here at SIGGRAPH this

00:17:10,360 --> 00:17:13,810
year but whose work was critical to many

00:17:12,430 --> 00:17:14,350
of the advances that we're presenting

00:17:13,810 --> 00:17:16,920
today

00:17:14,350 --> 00:17:25,659
thank you very much

00:17:16,920 --> 00:17:25,659
[Applause]

00:17:28,180 --> 00:17:32,150
[Music]

00:17:43,760 --> 00:17:49,830
hello everyone so yeah I am David

00:17:47,430 --> 00:17:52,770
appeaser I had the lab that the

00:17:49,830 --> 00:17:54,600
substance from Adobe and I'm going to

00:17:52,770 --> 00:17:57,960
talk about why we care about material

00:17:54,600 --> 00:18:01,200
acts today so I for you probably know it

00:17:57,960 --> 00:18:03,059
but for those who don't making materials

00:18:01,200 --> 00:18:04,650
and sharing them is really at the core

00:18:03,059 --> 00:18:08,520
of what we do

00:18:04,650 --> 00:18:11,760
substance and you know to for this to be

00:18:08,520 --> 00:18:13,680
effective we really need to maximize the

00:18:11,760 --> 00:18:16,320
portability of the the materials we

00:18:13,680 --> 00:18:18,330
built so the way we usually go about it

00:18:16,320 --> 00:18:21,059
is to build procedural textures and

00:18:18,330 --> 00:18:24,570
those come usually from arbitrarily

00:18:21,059 --> 00:18:26,640
complex compositing graphs which get

00:18:24,570 --> 00:18:29,520
packaged nicely into archives that later

00:18:26,640 --> 00:18:31,770
get baked now they get baked too touches

00:18:29,520 --> 00:18:34,500
whether they're in memory or to watch

00:18:31,770 --> 00:18:37,620
your files but usually what they get

00:18:34,500 --> 00:18:39,780
back to is two standard shaders or the

00:18:37,620 --> 00:18:41,700
other standard channels they get read

00:18:39,780 --> 00:18:44,130
making assumptions on what the shader

00:18:41,700 --> 00:18:47,760
knows about them that is albedo

00:18:44,130 --> 00:18:50,700
roughness specular level normal map and

00:18:47,760 --> 00:18:53,130
such so I really relies on knowing that

00:18:50,700 --> 00:18:56,340
the consumer of these textures will know

00:18:53,130 --> 00:18:58,770
what to do with them and now having

00:18:56,340 --> 00:19:02,030
standard shader in our case we have a

00:18:58,770 --> 00:19:06,540
model that's also based on the Disney

00:19:02,030 --> 00:19:08,940
principle shared from 2012 that is an

00:19:06,540 --> 00:19:10,530
assumption doesn't always hold for very

00:19:08,940 --> 00:19:14,429
good reasons in across different

00:19:10,530 --> 00:19:16,500
industries there's a need to have custom

00:19:14,429 --> 00:19:19,350
shaders and disgusting shaders are not

00:19:16,500 --> 00:19:21,059
just about how you layer your loops it's

00:19:19,350 --> 00:19:24,330
also about are you going to modulate

00:19:21,059 --> 00:19:27,840
your data and how you wanna modify your

00:19:24,330 --> 00:19:30,990
patterns so we need some kind of editors

00:19:27,840 --> 00:19:33,600
for shaders and this is actually

00:19:30,990 --> 00:19:35,280
something we recognized years ago and we

00:19:33,600 --> 00:19:38,309
shipped in 2015

00:19:35,280 --> 00:19:42,179
shader graph which was mostly successful

00:19:38,309 --> 00:19:44,460
with architecture and design clients and

00:19:42,179 --> 00:19:47,040
that was built in in partnership with

00:19:44,460 --> 00:19:50,610
our friends at Nvidia was built on the

00:19:47,040 --> 00:19:53,750
MDL language and API which was

00:19:50,610 --> 00:19:56,210
particularly good for layering

00:19:53,750 --> 00:19:59,920
thumpy ideas and that enabled us to

00:19:56,210 --> 00:20:02,840
embed our partager inside our tools and

00:19:59,920 --> 00:20:05,990
other you know also be compatible with

00:20:02,840 --> 00:20:07,640
our MDL compliant renderers that was

00:20:05,990 --> 00:20:09,920
great we were happy with the quality we

00:20:07,640 --> 00:20:15,650
got out but this was largely not taken

00:20:09,920 --> 00:20:17,720
advantage of by the film and the effects

00:20:15,650 --> 00:20:20,420
and animation industry for a number of

00:20:17,720 --> 00:20:23,320
reasons the principle one being that OSL

00:20:20,420 --> 00:20:28,430
is the language of choice in in film

00:20:23,320 --> 00:20:30,230
path tracers for number reasons and so

00:20:28,430 --> 00:20:33,080
you know we started looking something

00:20:30,230 --> 00:20:35,000
some other vector for carrying portable

00:20:33,080 --> 00:20:38,690
networks and so we looked at material

00:20:35,000 --> 00:20:40,040
acts which is not new for substance not

00:20:38,690 --> 00:20:41,780
new for me I've been working on it for a

00:20:40,040 --> 00:20:43,760
while but it's definitely not new

00:20:41,780 --> 00:20:47,030
substance last year at the birds of a

00:20:43,760 --> 00:20:50,620
feather we we showed a little prototype

00:20:47,030 --> 00:20:52,760
to import material libraries that were

00:20:50,620 --> 00:20:55,100
Danielson in collaboration with Island

00:20:52,760 --> 00:20:56,990
and material libraries work you know

00:20:55,100 --> 00:20:58,490
kept in sync and basically used as a

00:20:56,990 --> 00:21:00,730
palette of colors that you can paint

00:20:58,490 --> 00:21:03,920
instead of painting colors you painted

00:21:00,730 --> 00:21:06,590
materials and these you know you could

00:21:03,920 --> 00:21:08,390
export them these presets along with the

00:21:06,590 --> 00:21:11,200
textures and your bindings into material

00:21:08,390 --> 00:21:13,730
X package that was ready to be consumed

00:21:11,200 --> 00:21:16,490
so we wanted to build on this idea but

00:21:13,730 --> 00:21:17,900
now that there is shaky racks extension

00:21:16,490 --> 00:21:23,030
to material X we could really push a

00:21:17,900 --> 00:21:25,190
little further so we decided to work on

00:21:23,030 --> 00:21:30,050
the material workflows and limit the

00:21:25,190 --> 00:21:31,610
scope for efficiency to the area of

00:21:30,050 --> 00:21:35,480
pattern modulation and stick with a

00:21:31,610 --> 00:21:38,090
standard with a uber shader at the brdf

00:21:35,480 --> 00:21:41,210
level and so we picked a standard

00:21:38,090 --> 00:21:44,540
surface for that and so the idea was to

00:21:41,210 --> 00:21:48,380
build an alternate node graph to our nd

00:21:44,540 --> 00:21:50,810
l1 and guess what is still renders and

00:21:48,380 --> 00:21:52,370
yell in fact it's really using the same

00:21:50,810 --> 00:21:55,280
core and it's an entirely compatible

00:21:52,370 --> 00:21:58,310
what we had before so you can send save

00:21:55,280 --> 00:22:01,280
an MDL and export it to to your clients

00:21:58,310 --> 00:22:02,370
already but there's a couple of ways we

00:22:01,280 --> 00:22:05,610
can do this

00:22:02,370 --> 00:22:08,250
we could have added back end for MDL on

00:22:05,610 --> 00:22:10,559
shadrach's we decided not to do it

00:22:08,250 --> 00:22:12,809
because in our implementation is more

00:22:10,559 --> 00:22:15,420
efficient to use the native the native

00:22:12,809 --> 00:22:17,460
implementation of MDR in substance but

00:22:15,420 --> 00:22:19,320
we also made sure that it can export

00:22:17,460 --> 00:22:21,090
material acts and the way we went about

00:22:19,320 --> 00:22:24,420
it is to basically implement every

00:22:21,090 --> 00:22:26,340
single material ex node in MDL and make

00:22:24,420 --> 00:22:30,059
that our new dictionary of note our new

00:22:26,340 --> 00:22:32,430
shed the registry of of notes that along

00:22:30,059 --> 00:22:34,350
with any sub graph you want to decide to

00:22:32,430 --> 00:22:36,210
build and maybe custom graph custom

00:22:34,350 --> 00:22:37,980
custom notes and once you have that

00:22:36,210 --> 00:22:42,360
thanks to the magic of shielded arcs you

00:22:37,980 --> 00:22:45,210
have oil OpenGL and OSL and you can

00:22:42,360 --> 00:22:47,130
start massaging it for a little bit so

00:22:45,210 --> 00:22:49,110
it fits your renderer in our case

00:22:47,130 --> 00:22:52,230
renders we were targeting where our

00:22:49,110 --> 00:22:54,540
internal renders so the MDL one of

00:22:52,230 --> 00:22:59,070
course the IRA and our opengl viewport

00:22:54,540 --> 00:23:01,679
in designer and it was cool because we

00:22:59,070 --> 00:23:03,600
were able actually to live edit both and

00:23:01,679 --> 00:23:06,360
they will confirm that it matches and

00:23:03,600 --> 00:23:08,250
with a simple pressure of a button we

00:23:06,360 --> 00:23:11,070
can export textures and send them to

00:23:08,250 --> 00:23:13,980
material x view and verify that what you

00:23:11,070 --> 00:23:16,130
export it actually looks with the way

00:23:13,980 --> 00:23:18,390
you expect and play with parameters and

00:23:16,130 --> 00:23:20,610
verify that they have they feel good

00:23:18,390 --> 00:23:23,790
they have a good range they are well you

00:23:20,610 --> 00:23:27,570
know organized and parameterised so this

00:23:23,790 --> 00:23:29,309
is really the best initial validation -

00:23:27,570 --> 00:23:33,390
we had because we know that this is not

00:23:29,309 --> 00:23:35,760
something we wrote to extend on the

00:23:33,390 --> 00:23:39,030
asset workflow on the other hand back go

00:23:35,760 --> 00:23:42,179
back to model work we had to import

00:23:39,030 --> 00:23:45,960
these materials into the shaders into

00:23:42,179 --> 00:23:48,270
painter so we built a pipeline to import

00:23:45,960 --> 00:23:51,000
this material shader shadows in painter

00:23:48,270 --> 00:23:53,070
and if we could start playing the same

00:23:51,000 --> 00:23:55,500
parameters but not only that if you

00:23:53,070 --> 00:23:57,510
choose the right channels and you expose

00:23:55,500 --> 00:23:59,280
them in a way that painter knows how to

00:23:57,510 --> 00:24:01,950
use you can paint these parameters and

00:23:59,280 --> 00:24:05,700
you can plug textures to them and you

00:24:01,950 --> 00:24:07,710
can have fun with cleaning the model

00:24:05,700 --> 00:24:11,160
before giving it back to autodesk to

00:24:07,710 --> 00:24:14,460
continue to the next demo but

00:24:11,160 --> 00:24:14,740
key takeaways let's see obviously we

00:24:14,460 --> 00:24:16,420
think

00:24:14,740 --> 00:24:19,300
is worth pursuing portable shaders that

00:24:16,420 --> 00:24:22,000
was my premise we think material acts as

00:24:19,300 --> 00:24:24,250
an effective carrier for it and not just

00:24:22,000 --> 00:24:26,860
in its xml implementation but we're also

00:24:24,250 --> 00:24:30,460
interested in moving forward and bad

00:24:26,860 --> 00:24:32,500
between us d one of the nice side

00:24:30,460 --> 00:24:34,450
effects of this is that we were able to

00:24:32,500 --> 00:24:37,870
improve the api on designer for custom

00:24:34,450 --> 00:24:39,040
no graphs so not available yet but by

00:24:37,870 --> 00:24:42,130
the end of the year we should have a

00:24:39,040 --> 00:24:44,530
designer version that has you can build

00:24:42,130 --> 00:24:45,850
your own custom no graphs on and in our

00:24:44,530 --> 00:24:48,940
case its material acts may be in your

00:24:45,850 --> 00:24:52,390
case will be something else and because

00:24:48,940 --> 00:24:55,710
of that our prototypes are and almost

00:24:52,390 --> 00:25:00,100
entirely coded in the python plugin that

00:24:55,710 --> 00:25:04,660
it's not yet but it's not unrealistic to

00:25:00,100 --> 00:25:05,800
see it on github someday to download so

00:25:04,660 --> 00:25:09,190
if you want to see more in depth come

00:25:05,800 --> 00:25:10,630
see my colleague David Larsen presenting

00:25:09,190 --> 00:25:12,480
at the artists vision series tomorrow

00:25:10,630 --> 00:25:15,070
will go more in depth from these

00:25:12,480 --> 00:25:17,280
prototypes or come to find us that the

00:25:15,070 --> 00:25:18,740
substance booth

00:25:17,280 --> 00:25:27,279
Thanks

00:25:18,740 --> 00:25:27,279
[Applause]

00:25:49,100 --> 00:25:54,200
okay here right I mean here this time to

00:25:52,009 --> 00:25:55,970
talk a little bit about a new material

00:25:54,200 --> 00:25:59,659
ex based material interchange system

00:25:55,970 --> 00:26:00,830
developed at ILM the problem that we're

00:25:59,659 --> 00:26:03,049
trying to solve here is pretty

00:26:00,830 --> 00:26:05,299
straightforward we have artists working

00:26:03,049 --> 00:26:07,009
in several different content and

00:26:05,299 --> 00:26:09,230
creating packages for doing lighting

00:26:07,009 --> 00:26:11,149
texturing to create materials for our CG

00:26:09,230 --> 00:26:12,500
assets and we'd like to be able to apply

00:26:11,149 --> 00:26:14,029
high-quality materials from a

00:26:12,500 --> 00:26:16,730
centralized library very quickly

00:26:14,029 --> 00:26:19,039
regardless of what package the artist is

00:26:16,730 --> 00:26:21,049
using refine that material using the

00:26:19,039 --> 00:26:23,090
native application tools to a final

00:26:21,049 --> 00:26:25,399
quality level and then export it back

00:26:23,090 --> 00:26:28,279
into the centralized library so we can

00:26:25,399 --> 00:26:31,250
use it and modify in other packages with

00:26:28,279 --> 00:26:33,679
minimal effort on the artists part so to

00:26:31,250 --> 00:26:36,200
that end we've created a common material

00:26:33,679 --> 00:26:37,820
library API built on material X with

00:26:36,200 --> 00:26:39,500
other you know things like material

00:26:37,820 --> 00:26:42,350
publishing and version control and other

00:26:39,500 --> 00:26:44,419
glue functions like that and then we

00:26:42,350 --> 00:26:47,269
wrote a material browser panel which

00:26:44,419 --> 00:26:49,669
looks like this for that library with

00:26:47,269 --> 00:26:51,950
drag-and-drop capability it can run as

00:26:49,669 --> 00:26:53,990
either a standalone tool or as a plug-in

00:26:51,950 --> 00:26:56,539
for various applications and it's the

00:26:53,990 --> 00:26:58,129
hub for our shared materials all the

00:26:56,539 --> 00:27:00,559
materials in the library our store is an

00:26:58,129 --> 00:27:02,659
empty LX file which contains a material

00:27:00,559 --> 00:27:04,879
with value and texture bindings as well

00:27:02,659 --> 00:27:07,549
as a set of texture image files that the

00:27:04,879 --> 00:27:10,100
shader inputs we are using for that

00:27:07,549 --> 00:27:13,490
particular material so we can have rich

00:27:10,100 --> 00:27:16,070
textured materials in our library so we

00:27:13,490 --> 00:27:17,960
then wrote plug-ins for our DCC packages

00:27:16,070 --> 00:27:19,429
to handle drop events from the common

00:27:17,960 --> 00:27:22,190
material library and build native

00:27:19,429 --> 00:27:23,809
materials in the application using the

00:27:22,190 --> 00:27:25,759
values and textures from the the

00:27:23,809 --> 00:27:27,379
Angelics file so here's a little video

00:27:25,759 --> 00:27:29,269
demo and hopefully it will play for me

00:27:27,379 --> 00:27:31,220
when I click on it to show how we can

00:27:29,269 --> 00:27:34,580
use the commentary library to add

00:27:31,220 --> 00:27:38,419
materials to our untextured bb-8 model

00:27:34,580 --> 00:27:40,220
in katana so playing okay so we have a

00:27:38,419 --> 00:27:42,440
bunch of materials up on the right thing

00:27:40,220 --> 00:27:44,120
and you know choose you know metal or

00:27:42,440 --> 00:27:45,919
plastic whatever I'm going to start with

00:27:44,120 --> 00:27:48,470
this paint material I click on it and

00:27:45,919 --> 00:27:50,419
you see some details of it and then drag

00:27:48,470 --> 00:27:52,279
it over and drop it on my material stack

00:27:50,419 --> 00:27:54,110
and you see it gets created down on

00:27:52,279 --> 00:27:57,289
materials if I open it up in my stack

00:27:54,110 --> 00:28:01,010
and click it then it I see come on click

00:27:57,289 --> 00:28:02,540
on there you go good boy you can see it

00:28:01,010 --> 00:28:05,420
has all the values that are in there

00:28:02,540 --> 00:28:06,950
from the reset so I'm going to turn up

00:28:05,420 --> 00:28:08,990
and brighten it up a little bit to an

00:28:06,950 --> 00:28:11,630
appropriate brightness level for a BB a

00:28:08,990 --> 00:28:12,680
body color and let's see now I need to

00:28:11,630 --> 00:28:14,990
do something else is grab another

00:28:12,680 --> 00:28:15,500
material with this brick one drag it on

00:28:14,990 --> 00:28:17,990
up

00:28:15,500 --> 00:28:20,150
it appears down below so now I have a

00:28:17,990 --> 00:28:22,580
couple of assigns already a set up with

00:28:20,150 --> 00:28:25,940
the sell statements drag it up into

00:28:22,580 --> 00:28:28,130
there and now I have my material

00:28:25,940 --> 00:28:29,300
assignment on there but if I don't like

00:28:28,130 --> 00:28:31,040
that one I can choose a different one

00:28:29,300 --> 00:28:33,260
like maybe if I wanted to do a little

00:28:31,040 --> 00:28:35,330
bit of car paint I can do that drag it

00:28:33,260 --> 00:28:37,130
up there I have my material drag it up

00:28:35,330 --> 00:28:41,180
onto the material assign and now I have

00:28:37,130 --> 00:28:44,150
car paint on my model one last thing I'm

00:28:41,180 --> 00:28:47,690
going to yeah any self-respecting of all

00:28:44,150 --> 00:28:49,760
droid needs a glass lens material for

00:28:47,690 --> 00:28:53,450
their eyeball so drag up some dirty

00:28:49,760 --> 00:28:56,000
glass drop it on there like the thing up

00:28:53,450 --> 00:28:58,880
to my material assignment and now he has

00:28:56,000 --> 00:29:00,560
a glass shader on his eyeball so this is

00:28:58,880 --> 00:29:02,660
you can see how I can very very quickly

00:29:00,560 --> 00:29:05,660
get to a good starting point for doing

00:29:02,660 --> 00:29:07,700
my real look dev with this things built

00:29:05,660 --> 00:29:09,410
from a common you know starting point

00:29:07,700 --> 00:29:11,420
that you know artists in any package can

00:29:09,410 --> 00:29:13,670
use I can refine it until I'm happy with

00:29:11,420 --> 00:29:15,410
it and then when I have a material that

00:29:13,670 --> 00:29:17,120
I like I can publish it back into the

00:29:15,410 --> 00:29:18,680
commentary library as a preset using

00:29:17,120 --> 00:29:21,470
this expert panel where it's now

00:29:18,680 --> 00:29:23,540
available for either me the user my show

00:29:21,470 --> 00:29:25,130
or the whole facility to use in any

00:29:23,540 --> 00:29:27,440
other tool that supports common material

00:29:25,130 --> 00:29:29,120
library so for example now I'm going to

00:29:27,440 --> 00:29:31,280
take one of these some of these

00:29:29,120 --> 00:29:35,180
materials that we're in koma Tyrael and

00:29:31,280 --> 00:29:37,270
drag them in and you Maya here so it's a

00:29:35,180 --> 00:29:40,700
plane yeah so you select some geometry

00:29:37,270 --> 00:29:43,340
drag it on it's like another piece of

00:29:40,700 --> 00:29:45,530
geometry search for it by typing there's

00:29:43,340 --> 00:29:47,840
our concrete library drag it on and

00:29:45,530 --> 00:29:51,890
there we have our concrete things so

00:29:47,840 --> 00:29:55,130
very very fast and it's all the texture

00:29:51,890 --> 00:29:59,000
detail so what are we doing under the

00:29:55,130 --> 00:30:01,370
hood it's not really magic the key is

00:29:59,000 --> 00:30:02,810
that each material is referencing one of

00:30:01,370 --> 00:30:05,930
a fixed set of shader interface

00:30:02,810 --> 00:30:07,910
definitions which is a node F in

00:30:05,930 --> 00:30:10,520
material xpeke and there's an

00:30:07,910 --> 00:30:12,080
implementation of those shaders in each

00:30:10,520 --> 00:30:14,059
of the packages so

00:30:12,080 --> 00:30:15,799
for applications like Mari the mire

00:30:14,059 --> 00:30:18,919
viewport and material X view which

00:30:15,799 --> 00:30:21,769
support you know GLSL we can use native

00:30:18,919 --> 00:30:25,610
material X and shader gen for other

00:30:21,769 --> 00:30:27,350
applications like if you don't have you

00:30:25,610 --> 00:30:29,029
know all the OS l and your random

00:30:27,350 --> 00:30:32,059
anything we have native knows you can do

00:30:29,029 --> 00:30:33,890
it with custom network nodes or Clarisse

00:30:32,059 --> 00:30:35,179
you can you know custom dos written in

00:30:33,890 --> 00:30:38,720
that language as long as it implements

00:30:35,179 --> 00:30:41,510
the top-level shader that you need you

00:30:38,720 --> 00:30:44,149
have complete parity and it all works so

00:30:41,510 --> 00:30:46,840
it's a nice easy way to ease material X

00:30:44,149 --> 00:30:50,179
into your workflows and get really high

00:30:46,840 --> 00:30:52,370
good results very quickly I would like

00:30:50,179 --> 00:30:56,000
to acknowledge and thank the project

00:30:52,370 --> 00:30:59,269
team ILM who did all this work thank you

00:30:56,000 --> 00:31:00,889
to those folks and the obligatory we are

00:30:59,269 --> 00:31:03,620
hiring so if you would like to join our

00:31:00,889 --> 00:31:06,200
merry band of people at all five ILM

00:31:03,620 --> 00:31:07,789
studios across the world now please stop

00:31:06,200 --> 00:31:10,429
by the Disney Studios weekend room for

00:31:07,789 --> 00:31:12,049
attend and that's it for my talk thanks

00:31:10,429 --> 00:31:14,740
again

00:31:12,049 --> 00:31:18,549
like to bring up a Henrik to talk about

00:31:14,740 --> 00:31:18,549
agriculture and design products

00:31:35,520 --> 00:31:39,960
okay so I'm gonna give you a quick

00:31:37,440 --> 00:31:42,090
update on the talk we gave last year at

00:31:39,960 --> 00:31:45,809
the ball around using material acts for

00:31:42,090 --> 00:31:47,460
architecture and design so I work in the

00:31:45,809 --> 00:31:49,710
platform group at all risk where we

00:31:47,460 --> 00:31:51,600
develop graphics technology for a lot of

00:31:49,710 --> 00:31:55,230
our different products across our

00:31:51,600 --> 00:31:56,700
different industries and yeah we have

00:31:55,230 --> 00:31:59,730
well over a hundred product at all risk

00:31:56,700 --> 00:32:01,530
it's not just max Maya Arnold the media

00:31:59,730 --> 00:32:03,419
and entertainment side most of our

00:32:01,530 --> 00:32:06,960
products are actually for our other

00:32:03,419 --> 00:32:10,950
industries like AAC architecture like

00:32:06,960 --> 00:32:12,679
this building I created in Revit and a

00:32:10,950 --> 00:32:15,809
product design and manufacturing like

00:32:12,679 --> 00:32:17,370
machine like this and obviously we need

00:32:15,809 --> 00:32:21,900
materials for from all these different

00:32:17,370 --> 00:32:24,000
products so one thing we're looking for

00:32:21,900 --> 00:32:26,390
our orders is standardizing or rational

00:32:24,000 --> 00:32:28,380
rationalizing all our types of data

00:32:26,390 --> 00:32:30,540
materials being one of them so

00:32:28,380 --> 00:32:33,270
preferably we want to see one standard

00:32:30,540 --> 00:32:35,220
that we can use across all all our

00:32:33,270 --> 00:32:36,480
industries and obviously there's been

00:32:35,220 --> 00:32:38,970
great work on a media and entertainment

00:32:36,480 --> 00:32:42,630
side especially from the Mayan oral team

00:32:38,970 --> 00:32:44,640
Rama's here Alex so it makes a lot of

00:32:42,630 --> 00:32:49,890
sense to to use material acts across the

00:32:44,640 --> 00:32:52,260
board for all industries and we really

00:32:49,890 --> 00:32:54,600
want to look for open standards and open

00:32:52,260 --> 00:32:56,400
source as much as possible so that's

00:32:54,600 --> 00:32:59,070
another reason why why material access

00:32:56,400 --> 00:33:00,660
is really attractive for us and like a

00:32:59,070 --> 00:33:03,600
unit I mentioned we've had this

00:33:00,660 --> 00:33:05,160
collaboration since 2016 so it's

00:33:03,600 --> 00:33:06,530
something we've been working on for a

00:33:05,160 --> 00:33:08,370
while

00:33:06,530 --> 00:33:10,080
so I'm not going to touch on the

00:33:08,370 --> 00:33:11,760
immediate entertainment side like the

00:33:10,080 --> 00:33:14,580
management before we have a full session

00:33:11,760 --> 00:33:17,040
tomorrow in our vision series where

00:33:14,580 --> 00:33:19,110
we're gonna dive deep into that side so

00:33:17,040 --> 00:33:22,080
I'm going to touch on the on the left

00:33:19,110 --> 00:33:25,320
side here or a/c and manufacturing side

00:33:22,080 --> 00:33:28,700
of things so last year at the both we

00:33:25,320 --> 00:33:31,890
gave a quick proof of concept demo on

00:33:28,700 --> 00:33:35,280
Kanban org this workflow going from

00:33:31,890 --> 00:33:37,110
Revit into max unity and using substance

00:33:35,280 --> 00:33:39,570
and rendering it in various different

00:33:37,110 --> 00:33:40,950
renderers so if you're interested you

00:33:39,570 --> 00:33:44,400
can you can check out the slides from

00:33:40,950 --> 00:33:46,799
from last year and what we've been

00:33:44,400 --> 00:33:48,300
working on this year is converting all

00:33:46,799 --> 00:33:50,400
our existing materials

00:33:48,300 --> 00:33:52,500
so we have a share material library that

00:33:50,400 --> 00:33:55,320
we use in all the products you see down

00:33:52,500 --> 00:33:58,110
here which is AutoCAD any mentor Revit

00:33:55,320 --> 00:34:01,380
max fusion Navisworks and infraworks and

00:33:58,110 --> 00:34:04,620
we just call the more risk materials so

00:34:01,380 --> 00:34:06,150
we're mapping that to use material X and

00:34:04,620 --> 00:34:09,270
standard surface so standard surface as

00:34:06,150 --> 00:34:13,560
the common people are modeled for for

00:34:09,270 --> 00:34:15,090
all this so the the PPR classes that we

00:34:13,560 --> 00:34:17,429
used to have you know before in our

00:34:15,090 --> 00:34:21,030
library and we've created no graphs and

00:34:17,429 --> 00:34:24,020
that Maps those two to stand the surface

00:34:21,030 --> 00:34:27,120
and all of this is eruption material X

00:34:24,020 --> 00:34:29,100
and this is the simplest class is metal

00:34:27,120 --> 00:34:31,140
but we have the similar mapping for all

00:34:29,100 --> 00:34:35,970
the classes or materials like opaque

00:34:31,140 --> 00:34:38,040
layer transparent and so on so now we

00:34:35,970 --> 00:34:40,710
can render all the materials in from

00:34:38,040 --> 00:34:42,840
Revit and in fusion 360 this is an

00:34:40,710 --> 00:34:48,179
example in my ass taking the diffusion

00:34:42,840 --> 00:34:49,530
materials and opening them in Maya and

00:34:48,179 --> 00:34:51,390
you know he just works out of the box

00:34:49,530 --> 00:34:54,929
with a with a material X and standard

00:34:51,390 --> 00:34:56,610
surface representation and of course as

00:34:54,929 --> 00:34:58,560
is representing the no graph the no

00:34:56,610 --> 00:35:00,920
graph automatically shows up in in Maya

00:34:58,560 --> 00:35:04,110
and you can continue working on it

00:35:00,920 --> 00:35:06,630
inside of Maya which which is a really

00:35:04,110 --> 00:35:10,470
nice benefit of this type of

00:35:06,630 --> 00:35:12,810
representation and yeah

00:35:10,470 --> 00:35:14,280
since the node graph is is you know what

00:35:12,810 --> 00:35:15,960
we use to transport and then the

00:35:14,280 --> 00:35:18,060
material X document not only can we open

00:35:15,960 --> 00:35:20,760
in Maya it obviously shows up in

00:35:18,060 --> 00:35:22,260
material X view and you get all the

00:35:20,760 --> 00:35:25,740
parameters exposed and you can tweak

00:35:22,260 --> 00:35:27,510
them and we can open it in our node

00:35:25,740 --> 00:35:31,980
graph editor locked of X which we'll

00:35:27,510 --> 00:35:34,170
talk more about tomorrow so you can

00:35:31,980 --> 00:35:36,090
continue working on the material it's

00:35:34,170 --> 00:35:38,130
not baked down to something that you can

00:35:36,090 --> 00:35:39,570
just pass around between renders you can

00:35:38,130 --> 00:35:41,760
actually continue working on it in

00:35:39,570 --> 00:35:43,680
different DC's like the last year we

00:35:41,760 --> 00:35:46,560
showed unity and you you know get it

00:35:43,680 --> 00:35:48,140
into the unity no graph editor so that's

00:35:46,560 --> 00:35:51,210
one of the really strong benefits of

00:35:48,140 --> 00:35:54,650
material X and using that level of

00:35:51,210 --> 00:35:56,550
abstraction for for material transport

00:35:54,650 --> 00:35:58,860
so a couple of things that we've been

00:35:56,550 --> 00:35:59,910
working on that we need for for

00:35:58,860 --> 00:36:02,730
rx

00:35:59,910 --> 00:36:05,309
library one thing is units so Eunice is

00:36:02,730 --> 00:36:08,520
very important like in this example down

00:36:05,309 --> 00:36:10,349
here to the right and you have a you

00:36:08,520 --> 00:36:11,700
know a real physical material swatch

00:36:10,349 --> 00:36:14,220
that you want to represent so in this

00:36:11,700 --> 00:36:15,990
case it's you know it's 36 by 36 inches

00:36:14,220 --> 00:36:18,809
and you want to define that in your

00:36:15,990 --> 00:36:21,539
material so when are used to create

00:36:18,809 --> 00:36:24,150
materials usually have you know a real

00:36:21,539 --> 00:36:27,539
physical you know material they don't

00:36:24,150 --> 00:36:29,760
want to match and also our products have

00:36:27,539 --> 00:36:31,500
different working spaces and as you move

00:36:29,760 --> 00:36:35,579
your assets or aggregate assets from

00:36:31,500 --> 00:36:38,220
different products you want to have that

00:36:35,579 --> 00:36:40,140
work automatically so our current

00:36:38,220 --> 00:36:42,750
proposal is to treat unit similar to

00:36:40,140 --> 00:36:47,190
what we have four color spaces in MMC

00:36:42,750 --> 00:36:50,160
relax so you have a working space whips

00:36:47,190 --> 00:36:52,289
which is going to be the default for

00:36:50,160 --> 00:36:54,329
them for the document and then you can

00:36:52,289 --> 00:36:56,789
optionally override that for any

00:36:54,329 --> 00:36:59,970
individual parameters yeah

00:36:56,789 --> 00:37:01,710
if needed so this is currently working

00:36:59,970 --> 00:37:03,000
progress but this is something that we

00:37:01,710 --> 00:37:06,119
would need to support our current

00:37:03,000 --> 00:37:08,819
material library another thing that

00:37:06,119 --> 00:37:10,890
we're working on is GLSL es backend so

00:37:08,819 --> 00:37:13,920
WebGL is a very important platform for

00:37:10,890 --> 00:37:17,250
us all our design products can export

00:37:13,920 --> 00:37:19,020
you know they're designed to our shared

00:37:17,250 --> 00:37:21,980
web viewer which we call the forge

00:37:19,020 --> 00:37:24,180
viewer and and this is also something we

00:37:21,980 --> 00:37:27,089
expose a third parties so they can build

00:37:24,180 --> 00:37:30,510
custom web solutions on on top of that's

00:37:27,089 --> 00:37:33,900
a text ax or like this configurator here

00:37:30,510 --> 00:37:37,470
for for shares and so that's another

00:37:33,900 --> 00:37:38,849
thing that's coming up so that's what

00:37:37,470 --> 00:37:40,440
we'll do two main things I wanna give

00:37:38,849 --> 00:37:42,599
special thanks to to Ashley and Bernard

00:37:40,440 --> 00:37:44,970
and Roberto on on our team that's doing

00:37:42,599 --> 00:37:47,039
most of the work on the architecture and

00:37:44,970 --> 00:37:50,160
design side of things and of course

00:37:47,039 --> 00:37:52,170
special thanks to Jonathan and doggin

00:37:50,160 --> 00:37:54,900
and everyone at Lucasfilm and ILM for

00:37:52,170 --> 00:37:59,369
for the great collaboration we have on

00:37:54,900 --> 00:38:02,160
material X and yeah two things I want to

00:37:59,369 --> 00:38:04,020
mention before I wrap up we talked about

00:38:02,160 --> 00:38:07,680
standard servers quite a bit already in

00:38:04,020 --> 00:38:09,510
in previous presentations we published

00:38:07,680 --> 00:38:10,740
the white paper on that and we strongly

00:38:09,510 --> 00:38:14,820
encouraged

00:38:10,740 --> 00:38:17,070
everyone to you know give pull requests

00:38:14,820 --> 00:38:18,869
and comment on that so we can all work

00:38:17,070 --> 00:38:21,450
together in improving that specification

00:38:18,869 --> 00:38:24,990
and it's on github github or risk

00:38:21,450 --> 00:38:26,430
standardized surface and like Jonathan

00:38:24,990 --> 00:38:29,099
mentioned we have a reference

00:38:26,430 --> 00:38:32,430
implementation in material X so you can

00:38:29,099 --> 00:38:33,869
use that IRA box and you will you know

00:38:32,430 --> 00:38:36,180
automatically have this PBR model

00:38:33,869 --> 00:38:39,960
working in all the renders that support

00:38:36,180 --> 00:38:42,420
material X and last thing we have the

00:38:39,960 --> 00:38:45,170
vision series tomorrow we're we going to

00:38:42,420 --> 00:38:48,030
talk much more on the Emma nice space

00:38:45,170 --> 00:38:49,800
when in Jonathan and they've Larson from

00:38:48,030 --> 00:38:52,109
from Adobe so he are not I'm from

00:38:49,800 --> 00:38:54,420
Lucasfilm and David Larsen from from the

00:38:52,109 --> 00:38:59,880
substance team I was going to talk about

00:38:54,420 --> 00:39:06,939
a many worthless so thanks a lot

00:38:59,880 --> 00:39:06,939
[Applause]

00:39:14,610 --> 00:39:19,110
all right so that's the end of the

00:39:16,680 --> 00:39:20,910
prepared content since this is a birds

00:39:19,110 --> 00:39:23,130
of a feather meeting we're going to

00:39:20,910 --> 00:39:25,020
devote a lot of time I've got 20 minutes

00:39:23,130 --> 00:39:26,490
on the clock before we run out of the

00:39:25,020 --> 00:39:28,260
thing but I think we might be able to

00:39:26,490 --> 00:39:30,360
stay a few minutes later if there's more

00:39:28,260 --> 00:39:33,450
questions or discussion or things that

00:39:30,360 --> 00:39:36,210
you guys want to bring up things that

00:39:33,450 --> 00:39:39,840
would be good additions things that you

00:39:36,210 --> 00:39:42,030
wondered why the heck did we do this or

00:39:39,840 --> 00:39:43,410
just whatever I just want to open up the

00:39:42,030 --> 00:39:46,410
floor you know ask questions about our

00:39:43,410 --> 00:39:52,310
presentations you can ask the speakers

00:39:46,410 --> 00:39:52,310
any questions so any questions uh happy

00:39:55,040 --> 00:40:01,310
can you spell out like the current and

00:39:58,440 --> 00:40:05,460
potential future relationships between

00:40:01,310 --> 00:40:07,530
material X and USD where the lines are

00:40:05,460 --> 00:40:09,990
and how they coexist and like what the

00:40:07,530 --> 00:40:12,120
evolution of that is likely to be sure I

00:40:09,990 --> 00:40:14,750
mean I can I can jump in with some of

00:40:12,120 --> 00:40:19,710
the so we've been working a lot with

00:40:14,750 --> 00:40:24,510
spiff and Jeremiah's on the USD team -

00:40:19,710 --> 00:40:27,090
Ally on the the USD shade portion of USD

00:40:24,510 --> 00:40:28,280
with material acts and I think this at

00:40:27,090 --> 00:40:31,470
this point they're very nearly

00:40:28,280 --> 00:40:33,930
isomorphic to each other and the idea is

00:40:31,470 --> 00:40:37,830
that when the USD team does move forward

00:40:33,930 --> 00:40:39,860
with a portable Network description that

00:40:37,830 --> 00:40:43,020
that description will be material acts

00:40:39,860 --> 00:40:45,510
right now they have these these sort of

00:40:43,020 --> 00:40:48,390
early node descriptions that handle the

00:40:45,510 --> 00:40:50,280
render man node set and that handle USD

00:40:48,390 --> 00:40:52,830
preview surface and a handful of friend

00:40:50,280 --> 00:40:55,310
nodes that interact with USB preview

00:40:52,830 --> 00:40:58,470
surface but there isn't there isn't a

00:40:55,310 --> 00:41:01,650
truly portable no description of

00:40:58,470 --> 00:41:04,260
materials but I believe the plan is as

00:41:01,650 --> 00:41:07,910
it has been that when that is

00:41:04,260 --> 00:41:07,910
implemented it will be material acts

00:41:16,940 --> 00:41:19,990
oh come on don't be shy

00:41:23,370 --> 00:41:30,990
okay I guess we did a great job again I

00:41:28,380 --> 00:41:33,090
would encourage our folks to come to the

00:41:30,990 --> 00:41:34,620
thing tomorrow afternoon's the Autodesk

00:41:33,090 --> 00:41:37,790
vision series that shows up in the

00:41:34,620 --> 00:41:43,050
program of the Zipporah session it's

00:41:37,790 --> 00:41:46,820
3:15 well and it's over the main four

00:41:43,050 --> 00:41:46,820
and we hope to see you all there

00:41:47,790 --> 00:41:52,530
and if you haven't gotten a shirt or

00:41:50,130 --> 00:41:55,040
stickers we have them outside so make

00:41:52,530 --> 00:41:55,040
sure you get one

00:41:55,720 --> 00:42:00,390

YouTube URL: https://www.youtube.com/watch?v=pQ11A9i0-no


