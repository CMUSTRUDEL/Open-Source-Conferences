Title: OpenVDB BoF, SIGGRAPH 2019
Publication date: 2019-08-19
Playlist: SIGGRAPH 2019: Open Source Day
Description: 
	Discussion on topics related to OpenVDB, including new governance as an Academy Software Foundation hosted project, ideas and plans for future development, and Q&A. Part of Open Source Day at SIGGRAPH 2019, hosted by Academy Software Foundation.

Speakers:
Ken Museth, Weta Digital 
Dan Bailey, Industrial Light & Magic
Jeff Lait, SideFX
Nick Avramoussis, DNEG
Peter Cucka, DreamWorks
Captions: 
	00:00:00,030 --> 00:00:07,290
all right so hi everyone my name is Ken

00:00:02,939 --> 00:00:09,240
Moo sets I am head of simulation R&D at

00:00:07,290 --> 00:00:12,210
Wella and the chair of the Technical

00:00:09,240 --> 00:00:13,590
Committee for open MIDI be this is

00:00:12,210 --> 00:00:16,049
actually the first time we've we've done

00:00:13,590 --> 00:00:17,609
many buff before on open MIDI but it's

00:00:16,049 --> 00:00:19,260
the first time we've ever done slice so

00:00:17,609 --> 00:00:20,580
we'll see how that goes

00:00:19,260 --> 00:00:25,260
it's normally just a sort of a very

00:00:20,580 --> 00:00:26,760
improvised live session but these are

00:00:25,260 --> 00:00:30,140
the the member of the technical steering

00:00:26,760 --> 00:00:33,239
committee we have representations from

00:00:30,140 --> 00:00:35,489
DreamWorks Peter cuca one of the

00:00:33,239 --> 00:00:38,190
original developers deflate from side

00:00:35,489 --> 00:00:42,890
effects then Bailey from ILM and Nick

00:00:38,190 --> 00:00:46,920
from doneck and I'm representing whether

00:00:42,890 --> 00:00:50,969
we have been meeting very regularly oops

00:00:46,920 --> 00:00:56,760
the lights don't it's not shifting

00:00:50,969 --> 00:01:01,579
anymore so we've been meeting pretty

00:00:56,760 --> 00:01:08,689
regularly about once a week for the past

00:01:01,579 --> 00:01:11,700
seven eight months nine months and I

00:01:08,689 --> 00:01:13,920
would say the prime focus actually so

00:01:11,700 --> 00:01:15,600
yeah the minutes of course are in the

00:01:13,920 --> 00:01:19,619
github repo as well if you're interested

00:01:15,600 --> 00:01:26,130
and we also have listeners from I

00:01:19,619 --> 00:01:28,890
believe Intel and Autodesk and the

00:01:26,130 --> 00:01:32,280
minutes are uploaded to the Cape report

00:01:28,890 --> 00:01:34,799
in case you're interested so the main

00:01:32,280 --> 00:01:37,380
focus in these past nine months has been

00:01:34,799 --> 00:01:40,049
of course adoption by the Academy

00:01:37,380 --> 00:01:43,170
Software Foundation so we spent a lot of

00:01:40,049 --> 00:01:45,600
time talking about processes documenting

00:01:43,170 --> 00:01:48,689
things actually these are some of the

00:01:45,600 --> 00:01:52,710
things that Daniel already covered but

00:01:48,689 --> 00:01:56,700
we also did two releases we did one

00:01:52,710 --> 00:01:59,009
major release and follow up a minor

00:01:56,700 --> 00:02:03,149
release most of these are not really

00:01:59,009 --> 00:02:05,070
focusing so much on features as probably

00:02:03,149 --> 00:02:09,000
the biggest change was the the change

00:02:05,070 --> 00:02:11,160
from from vanilla make to see make but

00:02:09,000 --> 00:02:13,500
there's a lot of bug fixes optimizations

00:02:11,160 --> 00:02:15,900
and other changes that you can see in

00:02:13,500 --> 00:02:20,129
the change notes and we're currently

00:02:15,900 --> 00:02:23,390
working on a another minor release 6.2

00:02:20,129 --> 00:02:26,280
that will have many new features in it

00:02:23,390 --> 00:02:28,879
and then we've also started

00:02:26,280 --> 00:02:34,379
collaborating with new external

00:02:28,879 --> 00:02:37,080
companies like Autodesk and NVIDIA so

00:02:34,379 --> 00:02:39,269
and then yeah for the big the big news

00:02:37,080 --> 00:02:41,629
of course was last week we were adopted

00:02:39,269 --> 00:02:44,310
as a full member

00:02:41,629 --> 00:02:48,989
we left the incubation stage which was

00:02:44,310 --> 00:02:50,760
quite exciting this is just talking

00:02:48,989 --> 00:02:54,540
about some of the things that we are

00:02:50,760 --> 00:02:56,129
planning to put in 62 we haven't exactly

00:02:54,540 --> 00:02:57,720
decide on when this will happen but it

00:02:56,129 --> 00:03:02,940
will hopefully be a couple of months

00:02:57,720 --> 00:03:06,480
after cigarette so the biggest the

00:03:02,940 --> 00:03:10,530
biggest new addition to this release I'm

00:03:06,480 --> 00:03:15,810
putting on the spot here actually is ax

00:03:10,530 --> 00:03:18,840
you've committed all right we talked

00:03:15,810 --> 00:03:25,140
about it so we actually want to talk

00:03:18,840 --> 00:03:27,629
about what it is very briefly or so yeah

00:03:25,140 --> 00:03:30,000
so I did a bit of a talk about this on

00:03:27,629 --> 00:03:32,099
Sunday for the up MIDI B course but for

00:03:30,000 --> 00:03:34,290
those that don't know Adina we developed

00:03:32,099 --> 00:03:35,489
something called a X which we funneled

00:03:34,290 --> 00:03:37,049
together with VBB which is a

00:03:35,489 --> 00:03:39,989
just-in-time compiled expression

00:03:37,049 --> 00:03:44,400
language to more easily allow you to

00:03:39,989 --> 00:03:46,620
interface directly with BB primitives so

00:03:44,400 --> 00:03:49,260
that's point solving to be voxel values

00:03:46,620 --> 00:03:51,540
and the whole idea is that you can it

00:03:49,260 --> 00:03:53,459
gives you that window just to start

00:03:51,540 --> 00:03:56,189
writing fast paralyzed herbal kernels

00:03:53,459 --> 00:03:59,010
over VDB data it's been pretty useful

00:03:56,189 --> 00:04:01,739
DNA it came up as we decided on it as a

00:03:59,010 --> 00:04:03,360
solution because of various pipeline

00:04:01,739 --> 00:04:06,860
related issues with plug-in V DB into

00:04:03,360 --> 00:04:09,510
countless D CCS and in-house software so

00:04:06,860 --> 00:04:11,610
and yeah we've just recently done a null

00:04:09,510 --> 00:04:13,709
point one release of ax it currently

00:04:11,610 --> 00:04:16,049
exists as a standalone piece of software

00:04:13,709 --> 00:04:18,030
on D next github so please feel free to

00:04:16,049 --> 00:04:19,530
go check it out and yeah the entire plan

00:04:18,030 --> 00:04:20,340
is for this to go into V DB as another

00:04:19,530 --> 00:04:22,140
complain

00:04:20,340 --> 00:04:24,320
which you can build it the only other

00:04:22,140 --> 00:04:29,000
dependency that it brings in is LLVM and

00:04:24,320 --> 00:04:29,000
I think it's a good freeway with you

00:04:30,470 --> 00:04:38,280
there are also new tools to compute

00:04:33,630 --> 00:04:42,180
distance functions more robust than what

00:04:38,280 --> 00:04:45,080
we currently have today there are

00:04:42,180 --> 00:04:46,190
sharpening filters Peters working on

00:04:45,080 --> 00:04:50,130
[Music]

00:04:46,190 --> 00:04:55,290
we have improvements in delayed loading

00:04:50,130 --> 00:04:58,020
from from Dan LM and then I'm expecting

00:04:55,290 --> 00:05:02,540
you to to add more improvements to the

00:04:58,020 --> 00:05:04,980
point support sort of in general and

00:05:02,540 --> 00:05:07,710
then so this is this is sort of

00:05:04,980 --> 00:05:11,550
outlining some of the things that is

00:05:07,710 --> 00:05:14,370
sort of is under construction so to

00:05:11,550 --> 00:05:16,290
speak we're not committing to this yet

00:05:14,370 --> 00:05:18,750
but we're hoping this will come in the

00:05:16,290 --> 00:05:23,700
libraries in probably a next major

00:05:18,750 --> 00:05:27,240
release so true outer core so currently

00:05:23,700 --> 00:05:30,060
really be supports delayed loading which

00:05:27,240 --> 00:05:32,220
means it will only load what you are

00:05:30,060 --> 00:05:35,010
touching in the client code the problem

00:05:32,220 --> 00:05:37,530
is it's not unloading it again so the

00:05:35,010 --> 00:05:39,840
the highest sort of watermark in terms

00:05:37,530 --> 00:05:42,240
of memory footprint is whatever you have

00:05:39,840 --> 00:05:43,500
ever touched so as you can imagine if

00:05:42,240 --> 00:05:45,390
you're trying to render something and

00:05:43,500 --> 00:05:47,610
the and the raytrace I actually touches

00:05:45,390 --> 00:05:50,340
every single voxel well the maximum

00:05:47,610 --> 00:05:53,850
footprint will be whatever the volume is

00:05:50,340 --> 00:05:57,870
as a whole so this is an attempt to also

00:05:53,850 --> 00:06:00,000
do unloading again so you can you can

00:05:57,870 --> 00:06:02,640
you can render a volume with a with a

00:06:00,000 --> 00:06:04,380
pre fixed memory for inverse Moll memory

00:06:02,640 --> 00:06:09,690
footprint so this only works for

00:06:04,380 --> 00:06:11,900
read-only applications we're also hoping

00:06:09,690 --> 00:06:13,890
to add some more high-level applications

00:06:11,900 --> 00:06:19,500
especially in the problem space of

00:06:13,890 --> 00:06:21,270
fluids fluid solvers and we're also

00:06:19,500 --> 00:06:23,610
talking about distributing potential

00:06:21,270 --> 00:06:26,220
distributing VDB so using MPI message

00:06:23,610 --> 00:06:30,970
passing interface for

00:06:26,220 --> 00:06:34,120
simulations and then we're talking to

00:06:30,970 --> 00:06:37,000
Autodesk so order disk or the Bifrost

00:06:34,120 --> 00:06:40,330
team has developed a multi resolution

00:06:37,000 --> 00:06:41,770
grid and they have offered to put it

00:06:40,330 --> 00:06:43,360
into the library so we're in talks with

00:06:41,770 --> 00:06:47,670
them to see if that's possible or what

00:06:43,360 --> 00:06:47,670
that entails but that's quite exciting

00:06:48,780 --> 00:06:56,740
that's it for me who's hello I'm Jeff

00:06:54,910 --> 00:06:58,870
late I worked for side effects software

00:06:56,740 --> 00:07:01,510
but side effects has had a long history

00:06:58,870 --> 00:07:04,150
with VDB because we were like when the

00:07:01,510 --> 00:07:08,170
first integrators it of it in directly

00:07:04,150 --> 00:07:09,670
into a DCC and so thus we ended up on

00:07:08,170 --> 00:07:12,610
the technical steering committee as well

00:07:09,670 --> 00:07:13,870
to try and guide this project and it's

00:07:12,610 --> 00:07:15,700
been quite an interesting experience

00:07:13,870 --> 00:07:17,650
working with this so there's going to go

00:07:15,700 --> 00:07:20,350
through the various things that we ran

00:07:17,650 --> 00:07:21,610
into in this process the first is as

00:07:20,350 --> 00:07:23,260
computer programmers you always have

00:07:21,610 --> 00:07:24,430
tons of acronyms that you deal with but

00:07:23,260 --> 00:07:26,800
there's a whole bunch of new ones that

00:07:24,430 --> 00:07:29,800
came across here the first one actually

00:07:26,800 --> 00:07:31,630
is a SWF that's W stands for software

00:07:29,800 --> 00:07:33,160
the things been explained earlier I'm

00:07:31,630 --> 00:07:35,590
actually curious if it's pronounced a

00:07:33,160 --> 00:07:40,480
SWF for a swift because I've heard both

00:07:35,590 --> 00:07:44,140
now can I have hands-free SWF ok hands

00:07:40,480 --> 00:07:45,850
for a swift I think it's a SWF I'm sorry

00:07:44,140 --> 00:07:48,700
it says it's been I think we have a

00:07:45,850 --> 00:07:50,920
quorum here has been voted that way the

00:07:48,700 --> 00:07:52,450
TAC is the technical advisory committee

00:07:50,920 --> 00:07:54,700
and that seems to be the organization at

00:07:52,450 --> 00:07:56,380
the top and below that each project has

00:07:54,700 --> 00:07:57,790
the TSC which is a technical steering

00:07:56,380 --> 00:07:59,470
committee and we have the entire

00:07:57,790 --> 00:08:02,350
technical steering committee here for

00:07:59,470 --> 00:08:04,540
VDB so when you ask questions were

00:08:02,350 --> 00:08:06,430
actually all here and then we get into

00:08:04,540 --> 00:08:07,030
licensing issues which gets very

00:08:06,430 --> 00:08:09,250
exciting

00:08:07,030 --> 00:08:10,930
DCO is developer certificate of origin

00:08:09,250 --> 00:08:13,140
and this is where each of the year

00:08:10,930 --> 00:08:16,330
commits you have to sign them off and

00:08:13,140 --> 00:08:18,810
this is because the lawyers leave that

00:08:16,330 --> 00:08:21,160
the commit history is not an accurate

00:08:18,810 --> 00:08:22,900
proof of who actually committed it they

00:08:21,160 --> 00:08:24,700
wanted actually listed of who actually

00:08:22,900 --> 00:08:26,740
committed with commit log unfortunately

00:08:24,700 --> 00:08:29,080
means if you make a commit and mess that

00:08:26,740 --> 00:08:31,000
up you get to roll everything back and

00:08:29,080 --> 00:08:35,890
try again but you know you learn

00:08:31,000 --> 00:08:38,140
eventually CLA is for though contributor

00:08:35,890 --> 00:08:39,490
License Agreement there we go and so

00:08:38,140 --> 00:08:40,060
this is what every contributor needs to

00:08:39,490 --> 00:08:41,560
have

00:08:40,060 --> 00:08:44,050
if you actually look up on the Internet

00:08:41,560 --> 00:08:45,610
DCO and CLA they will say which one

00:08:44,050 --> 00:08:49,090
should you use and the answer is we get

00:08:45,610 --> 00:08:51,040
to use both of them but so so that's

00:08:49,090 --> 00:08:52,450
that was very interesting as PDX though

00:08:51,040 --> 00:08:54,100
is a nice acronym that solves a lot of

00:08:52,450 --> 00:08:56,560
problems because this is a way to deal

00:08:54,100 --> 00:08:58,420
with licensing in in a consistent manner

00:08:56,560 --> 00:09:00,160
where you're not dumping at tons tons of

00:08:58,420 --> 00:09:01,600
boilerplate on every file and then

00:09:00,160 --> 00:09:02,920
worrying that you've dropped the knot

00:09:01,600 --> 00:09:05,440
somewhere and changed completely the

00:09:02,920 --> 00:09:07,480
meaning of your license so with that in

00:09:05,440 --> 00:09:09,550
mind we can go actually look at licenses

00:09:07,480 --> 00:09:12,339
because one of the processes to graduate

00:09:09,550 --> 00:09:13,960
is the the source code is swept four

00:09:12,339 --> 00:09:16,690
licenses defined and if there's any

00:09:13,960 --> 00:09:18,490
difficulties because everything was

00:09:16,690 --> 00:09:22,170
wrapped with the dreamworks copyright

00:09:18,490 --> 00:09:24,700
when VDB first went into open source and

00:09:22,170 --> 00:09:25,900
then this result in some stuff for

00:09:24,700 --> 00:09:28,270
example that side effects are

00:09:25,900 --> 00:09:30,070
contributed to be double licensed so it

00:09:28,270 --> 00:09:32,410
was just wrapped twice which apparently

00:09:30,070 --> 00:09:33,820
is perfectly legitimate but those

00:09:32,410 --> 00:09:36,700
licenses might be slightly different

00:09:33,820 --> 00:09:39,310
like there ones in MPL 2.0 and in others

00:09:36,700 --> 00:09:41,350
a PSD with extensions are ones a

00:09:39,310 --> 00:09:43,510
proprietary license and you're wondering

00:09:41,350 --> 00:09:45,790
what's that's doing in there so we had

00:09:43,510 --> 00:09:47,200
to go through and resolve these so you'd

00:09:45,790 --> 00:09:50,020
have something like this a double

00:09:47,200 --> 00:09:52,300
license file and then we'd have to cross

00:09:50,020 --> 00:09:53,950
out all the special side effects stuff

00:09:52,300 --> 00:09:57,160
because it's the same as a stuff above

00:09:53,950 --> 00:09:59,140
and so we just have to make sure the

00:09:57,160 --> 00:10:00,400
owner of that particular copyright side

00:09:59,140 --> 00:10:03,670
effects gave permission for it to be

00:10:00,400 --> 00:10:05,830
removed the next level is one that we

00:10:03,670 --> 00:10:07,330
haven't done because we need permission

00:10:05,830 --> 00:10:09,400
from Dreamworks directly to remove it

00:10:07,330 --> 00:10:11,140
but this is when you have extensions and

00:10:09,400 --> 00:10:12,550
clarifications of a license this causes

00:10:11,140 --> 00:10:13,900
a hiccup on anyone trying to use your

00:10:12,550 --> 00:10:16,300
project so when the strong

00:10:13,900 --> 00:10:18,850
recommendations is that you restrict it

00:10:16,300 --> 00:10:21,910
to just the actual licensing question so

00:10:18,850 --> 00:10:25,420
there's no endorsement clauses and the

00:10:21,910 --> 00:10:26,980
no liability disclaimer which people

00:10:25,420 --> 00:10:28,480
like to put in there extra because they

00:10:26,980 --> 00:10:30,730
want people that really know it's there

00:10:28,480 --> 00:10:33,820
but then anyone who uses it needs to

00:10:30,730 --> 00:10:34,930
double check so the the simplified forms

00:10:33,820 --> 00:10:37,690
you can get it right down to something

00:10:34,930 --> 00:10:39,310
like this in that SPD X line there it's

00:10:37,690 --> 00:10:42,730
the one that allows it to link directly

00:10:39,310 --> 00:10:46,180
to the MPL world without having to

00:10:42,730 --> 00:10:48,810
dumping the whole license so from that

00:10:46,180 --> 00:10:51,580
I'm going switch to version numbers

00:10:48,810 --> 00:10:53,500
thanks Jeff hi I'm Dan from

00:10:51,580 --> 00:10:55,029
I'm gonna talk a little bit about the

00:10:53,500 --> 00:10:56,440
version numbers goose this is something

00:10:55,029 --> 00:10:58,990
that comes up quite regularly about how

00:10:56,440 --> 00:11:00,399
VDB is integrated into Houdini I think

00:10:58,990 --> 00:11:01,660
it's a pretty elegant solution so I

00:11:00,399 --> 00:11:05,019
thought I'd explain it in a bit more

00:11:01,660 --> 00:11:06,130
detail firstly in terms of the three

00:11:05,019 --> 00:11:08,110
version numbers that we have a major

00:11:06,130 --> 00:11:11,529
minor and a patch version the major

00:11:08,110 --> 00:11:13,570
number means the grid or transform ABI

00:11:11,529 --> 00:11:15,339
so we'll only change the major number

00:11:13,570 --> 00:11:17,079
once a year in line with the VFX

00:11:15,339 --> 00:11:18,310
reference platform and that's any time

00:11:17,079 --> 00:11:21,700
that we essentially change the size or

00:11:18,310 --> 00:11:23,470
the layout of a VDB grid in memory the

00:11:21,700 --> 00:11:26,260
minor version means any changes to the

00:11:23,470 --> 00:11:27,640
API that don't touch the ABI and finally

00:11:26,260 --> 00:11:31,120
the patch version is any changes that

00:11:27,640 --> 00:11:34,180
needed to touch the API nor the ABI and

00:11:31,120 --> 00:11:36,190
there's also an implication for the file

00:11:34,180 --> 00:11:39,399
format versions as well but I didn't

00:11:36,190 --> 00:11:41,769
cover that here and then just to look at

00:11:39,399 --> 00:11:44,440
how that integrates into Houdini we've

00:11:41,769 --> 00:11:46,209
obviously got open BBB integrations into

00:11:44,440 --> 00:11:48,459
many other DTC's so I thought this is

00:11:46,209 --> 00:11:50,050
particularly relevant if you're if

00:11:48,459 --> 00:11:52,209
you're a vendor looking to integrate VDB

00:11:50,050 --> 00:11:53,500
as well but essentially we have the kind

00:11:52,209 --> 00:11:55,420
of on the on the left here we have the

00:11:53,500 --> 00:11:57,550
native Houdini libraries and in blue is

00:11:55,420 --> 00:11:58,930
the is the core library and then in the

00:11:57,550 --> 00:12:01,000
orange we have the different kind of

00:11:58,930 --> 00:12:02,980
Houdini toolkit libraries so we

00:12:01,000 --> 00:12:04,480
essentially have first first thing that

00:12:02,980 --> 00:12:06,880
we do is we make sure that the libraries

00:12:04,480 --> 00:12:10,329
are suffix twith a kind of vendor suffix

00:12:06,880 --> 00:12:12,279
like under Scorcese and then the the Lib

00:12:10,329 --> 00:12:14,260
Houdini geo includes a bunch of other

00:12:12,279 --> 00:12:17,230
stuff including the the VDB primitive

00:12:14,260 --> 00:12:18,910
and then the soft v DB DSO is

00:12:17,230 --> 00:12:19,990
essentially the equivalent of everything

00:12:18,910 --> 00:12:23,310
on the right there so these two sides

00:12:19,990 --> 00:12:25,510
are intended to be sort of equivalent

00:12:23,310 --> 00:12:27,339
and if I show you what the actual

00:12:25,510 --> 00:12:28,870
namespaces that are being used it should

00:12:27,339 --> 00:12:32,230
become clear how this is how this is

00:12:28,870 --> 00:12:33,579
helpful so for example in Houdini 17:5

00:12:32,230 --> 00:12:36,959
which is what I'm using as a reference

00:12:33,579 --> 00:12:39,730
here has the namespace v to says e

00:12:36,959 --> 00:12:42,940
whereas if you install the open source

00:12:39,730 --> 00:12:44,949
library we're actually installing 6.1

00:12:42,940 --> 00:12:47,500
here so it's the later major version so

00:12:44,949 --> 00:12:48,730
it's a new API so what we actually do

00:12:47,500 --> 00:12:51,070
here is we have an api compatibility

00:12:48,730 --> 00:12:53,829
flag where we can say let's compile it

00:12:51,070 --> 00:12:57,130
but for ABI 5 and that means that we can

00:12:53,829 --> 00:12:58,779
incur a copy passing data backwards and

00:12:57,130 --> 00:13:00,320
forwards between kind of native Houdini

00:12:58,779 --> 00:13:03,740
nodes and our

00:13:00,320 --> 00:13:05,510
nodes which is really helpful and then

00:13:03,740 --> 00:13:06,800
just a kind of minor clarification as

00:13:05,510 --> 00:13:07,970
well because I've heard a few people get

00:13:06,800 --> 00:13:10,430
a little bit confused by this

00:13:07,970 --> 00:13:12,430
so because of course we're building a

00:13:10,430 --> 00:13:15,440
later version of all of the Houdini

00:13:12,430 --> 00:13:17,630
toolkit it's not possible to build that

00:13:15,440 --> 00:13:19,460
against the version of open B DB that

00:13:17,630 --> 00:13:21,320
shipped with Houdini because they are

00:13:19,460 --> 00:13:23,150
going to be not in sync and it's gonna

00:13:21,320 --> 00:13:24,620
be quite hard to sync those things up so

00:13:23,150 --> 00:13:27,260
the simple solution is just to install

00:13:24,620 --> 00:13:28,610
your own core open source library and

00:13:27,260 --> 00:13:30,350
then to build against that the fact that

00:13:28,610 --> 00:13:31,970
there are two kind of core libraries

00:13:30,350 --> 00:13:33,770
available isn't really a big problem as

00:13:31,970 --> 00:13:36,890
long as you can sort of easily pass the

00:13:33,770 --> 00:13:38,780
data back and forth and then just to

00:13:36,890 --> 00:13:40,040
highlight that of course the difference

00:13:38,780 --> 00:13:43,760
in the version numbers the fact that we

00:13:40,040 --> 00:13:46,280
were able to use the 5.2 release of open

00:13:43,760 --> 00:13:48,020
V DB and concurrently with a much later

00:13:46,280 --> 00:13:49,940
release that was done just a few months

00:13:48,020 --> 00:13:57,920
ago and have the to kind of play nicely

00:13:49,940 --> 00:14:00,200
together is really cool thank you

00:13:57,920 --> 00:14:02,240
one of the other processes involved to

00:14:00,200 --> 00:14:04,100
graduate was to complete their best

00:14:02,240 --> 00:14:06,470
practices badge and part of the best

00:14:04,100 --> 00:14:08,420
practices badge was we needed to have a

00:14:06,470 --> 00:14:11,600
security policy and a security expert

00:14:08,420 --> 00:14:13,610
and the security expert search was a

00:14:11,600 --> 00:14:16,700
little bit difficult because it needed

00:14:13,610 --> 00:14:19,550
to be someone on the TSC that would be

00:14:16,700 --> 00:14:21,590
knowledgeable about security and no one

00:14:19,550 --> 00:14:22,670
was volunteering to be identified as the

00:14:21,590 --> 00:14:26,770
person that was knowledgeable about

00:14:22,670 --> 00:14:31,610
security so our solution mm-hmm

00:14:26,770 --> 00:14:35,690
identified you so the solution is to

00:14:31,610 --> 00:14:37,130
have a have a secret security expert so

00:14:35,690 --> 00:14:38,570
we do have a security experts we can

00:14:37,130 --> 00:14:40,760
provide a zero knowledge proof that

00:14:38,570 --> 00:14:42,830
there exists a security expert but we

00:14:40,760 --> 00:14:47,270
won't identify the exact identity of the

00:14:42,830 --> 00:14:49,610
person so so having a security expert

00:14:47,270 --> 00:14:52,670
the the the teamwork to work together

00:14:49,610 --> 00:14:54,710
develop a security policy where we try

00:14:52,670 --> 00:14:56,210
to address what it meant for security in

00:14:54,710 --> 00:14:57,530
the VDB context because a lot of the

00:14:56,210 --> 00:14:59,380
best practices was talking more about

00:14:57,530 --> 00:15:01,940
web services where you've got crossed

00:14:59,380 --> 00:15:02,990
cross-site scripting issues and things

00:15:01,940 --> 00:15:05,150
like that but those obviously don't

00:15:02,990 --> 00:15:07,250
apply to B DB so we said okay what are

00:15:05,150 --> 00:15:09,230
the attack vectors for V DB and what are

00:15:07,250 --> 00:15:11,000
the security things we will identify as

00:15:09,230 --> 00:15:13,760
being serious and which ones will we say

00:15:11,000 --> 00:15:15,769
are acceptable risks

00:15:13,760 --> 00:15:17,930
so the first question is with files and

00:15:15,769 --> 00:15:19,610
we really think that when you read a VDB

00:15:17,930 --> 00:15:22,130
file they get from an untrusted source

00:15:19,610 --> 00:15:24,170
it shouldn't execute arbitrary code that

00:15:22,130 --> 00:15:27,350
seems pretty straightforward to make

00:15:24,170 --> 00:15:29,899
that a hard requirement but it might run

00:15:27,350 --> 00:15:31,550
out of memory and it might run forever

00:15:29,899 --> 00:15:33,110
we are not going to guarantee our file

00:15:31,550 --> 00:15:35,029
format doesn't have a way to basically

00:15:33,110 --> 00:15:37,459
allocate infinite memory because when

00:15:35,029 --> 00:15:39,350
the purposes of EDB is to compress giant

00:15:37,459 --> 00:15:41,029
datasets into small amount of data so

00:15:39,350 --> 00:15:43,190
when you expand it a memory might become

00:15:41,029 --> 00:15:44,690
huge so this means in particular that's

00:15:43,190 --> 00:15:46,250
probably really easy to make a denial of

00:15:44,690 --> 00:15:47,839
service attack with VDB files if you

00:15:46,250 --> 00:15:51,709
don't set you limits or something that

00:15:47,839 --> 00:15:53,870
around it when it comes to the API where

00:15:51,709 --> 00:15:55,550
again it might run out of memory and run

00:15:53,870 --> 00:15:57,019
forever if you check if you make your

00:15:55,550 --> 00:16:00,079
voxel size zero or something like that

00:15:57,019 --> 00:16:01,670
are very close to zero and then if the

00:16:00,079 --> 00:16:05,269
parameters are invalid it might execute

00:16:01,670 --> 00:16:07,910
a random code and this is partly because

00:16:05,269 --> 00:16:09,350
V DB is designed for speed first of all

00:16:07,910 --> 00:16:11,389
we're not going to validate all of your

00:16:09,350 --> 00:16:13,399
input if you're trying to access a

00:16:11,389 --> 00:16:15,529
certain grid location that doesn't exist

00:16:13,399 --> 00:16:17,810
we might just access random memory and

00:16:15,529 --> 00:16:20,089
because it we very much have to put it

00:16:17,810 --> 00:16:22,160
on on your shoes there so this is more

00:16:20,089 --> 00:16:23,839
just saying that we are not taking

00:16:22,160 --> 00:16:25,640
responsibility for this layer of the

00:16:23,839 --> 00:16:29,839
security and that has to be at a higher

00:16:25,640 --> 00:16:31,790
level but this caused us to think about

00:16:29,839 --> 00:16:33,829
another aspect of security besides just

00:16:31,790 --> 00:16:36,350
running oxic Wrentham code namely the

00:16:33,829 --> 00:16:37,640
question of redaction and this is when

00:16:36,350 --> 00:16:38,930
you have a file you won't give it to

00:16:37,640 --> 00:16:40,339
someone else but you don't give all of

00:16:38,930 --> 00:16:42,290
it to someone else and this might be

00:16:40,339 --> 00:16:44,209
either on disk or maybe even in memory

00:16:42,290 --> 00:16:47,329
or in process to another untrusted

00:16:44,209 --> 00:16:50,060
application somewhere else and I thought

00:16:47,329 --> 00:16:52,010
redaction was a well simplified thing of

00:16:50,060 --> 00:16:53,930
how to redact PDS for example you just

00:16:52,010 --> 00:16:56,600
draw black boxes over it right or you

00:16:53,930 --> 00:16:58,069
change the background color to block but

00:16:56,600 --> 00:17:00,680
yes so people are still making those

00:16:58,069 --> 00:17:02,209
redaction errors with PDF today so

00:17:00,680 --> 00:17:05,089
hopefully we don't make those redaction

00:17:02,209 --> 00:17:06,650
areas errors with VD B's because in

00:17:05,089 --> 00:17:09,620
particular VD B's have a strange

00:17:06,650 --> 00:17:11,329
property where each voxel is storing

00:17:09,620 --> 00:17:13,189
whether it's active or not and what its

00:17:11,329 --> 00:17:14,449
data is so you can have the case where

00:17:13,189 --> 00:17:17,120
you zero out all the data so it

00:17:14,449 --> 00:17:18,880
disappears but the activity field still

00:17:17,120 --> 00:17:21,319
tells you what that surfaces or

00:17:18,880 --> 00:17:23,299
conversely you might deactivate a voxel

00:17:21,319 --> 00:17:26,179
so it disappears but in memory it will

00:17:23,299 --> 00:17:26,720
still have the actual value there so if

00:17:26,179 --> 00:17:28,429
you want to

00:17:26,720 --> 00:17:30,110
we docked something either rebuild the

00:17:28,429 --> 00:17:31,639
grid directly with the values you want

00:17:30,110 --> 00:17:34,070
to keep which is probably the safest way

00:17:31,639 --> 00:17:36,649
or make sure you zero in activate and

00:17:34,070 --> 00:17:39,049
then prune all the inactive tiles so the

00:17:36,649 --> 00:17:41,240
higher-level quality doesn't exist I'd

00:17:39,049 --> 00:17:42,919
like to just show how that works just to

00:17:41,240 --> 00:17:44,779
to show the reduction does mean

00:17:42,919 --> 00:17:47,000
something so this is the squab it's half

00:17:44,779 --> 00:17:50,149
a squid half a crab and I've turned it

00:17:47,000 --> 00:17:52,159
into a V DP and now I ran a wrangle and

00:17:50,149 --> 00:17:54,559
I set it to zero so just zeroed out this

00:17:52,159 --> 00:17:56,200
whole VDP so I'm like here you go you

00:17:54,559 --> 00:17:59,210
can't tell what I have here it's gone

00:17:56,200 --> 00:18:02,269
but I can just convert the topology into

00:17:59,210 --> 00:18:04,669
a fog and use that to convert into a

00:18:02,269 --> 00:18:07,070
level set and then erode that level set

00:18:04,669 --> 00:18:09,259
and I've restored pretty much the

00:18:07,070 --> 00:18:11,480
original squad so it's just to

00:18:09,259 --> 00:18:14,360
demonstrate there is actually data still

00:18:11,480 --> 00:18:16,370
bare so be careful with that the other

00:18:14,360 --> 00:18:19,940
interest insecurity problem is

00:18:16,370 --> 00:18:20,990
steganography which probably is not an

00:18:19,940 --> 00:18:23,059
attack you won't actually protect

00:18:20,990 --> 00:18:24,830
against because if someone's that trying

00:18:23,059 --> 00:18:27,470
to leak data out this way you're

00:18:24,830 --> 00:18:29,450
probably screwed anyways and so this is

00:18:27,470 --> 00:18:31,490
steganography is when you can hide a

00:18:29,450 --> 00:18:34,100
hidden message inside an innocuous image

00:18:31,490 --> 00:18:36,230
and so like if I have a pixel image I

00:18:34,100 --> 00:18:37,639
could put slight noise values that

00:18:36,230 --> 00:18:39,200
provide my hidden message for someone

00:18:37,639 --> 00:18:41,750
knows how to decode it so all the

00:18:39,200 --> 00:18:44,870
standard approaches for images or voxel

00:18:41,750 --> 00:18:46,669
betas would apply for V DB s like you

00:18:44,870 --> 00:18:48,379
can either do like some large level

00:18:46,669 --> 00:18:50,120
distortion and fast for it like in

00:18:48,379 --> 00:18:51,679
Fourier space or maybe you can put

00:18:50,120 --> 00:18:53,419
individual speckles in at the noise

00:18:51,679 --> 00:18:55,159
level but there's a kind of a neat trick

00:18:53,419 --> 00:18:56,899
you can do a scientist ins fields where

00:18:55,159 --> 00:18:58,820
when we reconstruct the signed distance

00:18:56,899 --> 00:19:00,230
field for display we only really use the

00:18:58,820 --> 00:19:02,860
voxels immediately beside the zero

00:19:00,230 --> 00:19:05,120
crossing but we have like a 3x3

00:19:02,860 --> 00:19:07,039
bandwidth around there that we actually

00:19:05,120 --> 00:19:08,690
store because you know we need it for

00:19:07,039 --> 00:19:11,120
more accuracy or we're not growing

00:19:08,690 --> 00:19:14,059
around and those those things still hold

00:19:11,120 --> 00:19:16,129
value so in this case I've got two grids

00:19:14,059 --> 00:19:19,460
and this is the same grid the one on the

00:19:16,129 --> 00:19:21,639
left it looks like a plain flat box but

00:19:19,460 --> 00:19:24,500
if I add a slight bias to it of like

00:19:21,639 --> 00:19:26,389
0.05 and just add that to all the voxel

00:19:24,500 --> 00:19:29,259
values suddenly the secret message pops

00:19:26,389 --> 00:19:32,600
up because it's actually stored in the

00:19:29,259 --> 00:19:35,590
out-of-band foxhole values so I thought

00:19:32,600 --> 00:19:35,590
that was kind of interesting

00:19:38,220 --> 00:19:40,890
and then the last slide on this bit and

00:19:39,900 --> 00:19:42,360
then we're gonna hand over to Nick to

00:19:40,890 --> 00:19:43,890
talk a little bit more about see make

00:19:42,360 --> 00:19:45,360
side of things I just thought it'd be

00:19:43,890 --> 00:19:47,070
useful to put together a slide to

00:19:45,360 --> 00:19:50,640
mention kind of how you'd actually

00:19:47,070 --> 00:19:52,560
contribute to open VDB we very much

00:19:50,640 --> 00:19:54,450
welcome external contributions to the

00:19:52,560 --> 00:19:55,950
library but I thought I'd just quickly

00:19:54,450 --> 00:19:58,590
run through different bits and pieces

00:19:55,950 --> 00:20:00,570
that are involved first of all if you

00:19:58,590 --> 00:20:02,250
are looking to contribute to open BD be

00:20:00,570 --> 00:20:03,330
please to feel free to reach out to us

00:20:02,250 --> 00:20:04,710
and kind of ask whether your

00:20:03,330 --> 00:20:06,360
contribution makes sense whether it's

00:20:04,710 --> 00:20:08,370
something that we think kind of might be

00:20:06,360 --> 00:20:09,780
a good fit for the library we're more

00:20:08,370 --> 00:20:11,640
than happy to kind of answer those types

00:20:09,780 --> 00:20:13,980
of questions before you've done a ton of

00:20:11,640 --> 00:20:15,300
work to try and get things in the next

00:20:13,980 --> 00:20:17,580
step obviously is to fork the actual

00:20:15,300 --> 00:20:19,740
repo you'll need to sign the CLA either

00:20:17,580 --> 00:20:21,780
an individual one or a corporate one and

00:20:19,740 --> 00:20:23,340
then finally making a pull request and

00:20:21,780 --> 00:20:24,900
I've just quickly kind of listed all the

00:20:23,340 --> 00:20:25,860
different sort of CI things that we

00:20:24,900 --> 00:20:27,960
check forward and make sure that

00:20:25,860 --> 00:20:29,190
everything's okay so typically what will

00:20:27,960 --> 00:20:30,690
happen is if you're starting out of

00:20:29,190 --> 00:20:32,250
fresh and you make a pull request a

00:20:30,690 --> 00:20:33,780
bunch of things will fail because you

00:20:32,250 --> 00:20:35,250
know you've got a few warnings in place

00:20:33,780 --> 00:20:36,930
or you know it doesn't work in a

00:20:35,250 --> 00:20:38,160
particular situation or you've

00:20:36,930 --> 00:20:39,870
accidentally got a few trailing spaces

00:20:38,160 --> 00:20:41,280
and this generally cannot catch people

00:20:39,870 --> 00:20:43,110
out so I thought I just mentioned that

00:20:41,280 --> 00:20:44,070
this is kind of what we test against to

00:20:43,110 --> 00:20:45,720
make sure that everything everything

00:20:44,070 --> 00:20:47,970
kind of works and I expect they will

00:20:45,720 --> 00:20:49,380
gradually increase our CI to kind of

00:20:47,970 --> 00:20:50,460
handle different situations and

00:20:49,380 --> 00:20:52,380
different things so hopefully we'll

00:20:50,460 --> 00:20:53,700
automate some of that process of making

00:20:52,380 --> 00:20:55,770
sure that everything is kind of

00:20:53,700 --> 00:20:58,080
sanitized before we can kind of accept

00:20:55,770 --> 00:21:00,300
things in so yeah with that I think

00:20:58,080 --> 00:21:02,600
we'll Hanover to Nick to talk about so

00:21:00,300 --> 00:21:02,600
you making

00:21:17,950 --> 00:21:21,220
you should keep

00:21:36,530 --> 00:21:41,660
cool everyone and in case I forgot to

00:21:40,250 --> 00:21:46,820
mention before my name is Nick and I'm

00:21:41,660 --> 00:21:48,920
from Dean egg and as part of the 6.1

00:21:46,820 --> 00:21:51,980
release we spent a lot of time looking

00:21:48,920 --> 00:21:54,890
at the existing build systems in VDB and

00:21:51,980 --> 00:21:56,450
that resulted in a new revamp to see

00:21:54,890 --> 00:21:58,160
make system so you make already existed

00:21:56,450 --> 00:21:59,630
and I'll touch more on Envy

00:21:58,160 --> 00:22:02,960
I've touched more on that in a second

00:21:59,630 --> 00:22:04,460
but the idea here was to well we

00:22:02,960 --> 00:22:07,220
understood how important it was for C

00:22:04,460 --> 00:22:08,870
make and well we understood how

00:22:07,220 --> 00:22:10,100
important it was for build systems like

00:22:08,870 --> 00:22:12,770
C made to exist in these kind of

00:22:10,100 --> 00:22:14,720
projects to make it more portable and

00:22:12,770 --> 00:22:18,080
easier to build not just in studios but

00:22:14,720 --> 00:22:19,790
at home as well so hopefully this kind

00:22:18,080 --> 00:22:21,860
of first pass this first refactor has

00:22:19,790 --> 00:22:25,700
solved a lot of issues with the current

00:22:21,860 --> 00:22:27,890
C make the previously make system so

00:22:25,700 --> 00:22:30,770
first of all massive thanks to Nikolas

00:22:27,890 --> 00:22:32,750
and Frederick who never had the pleasure

00:22:30,770 --> 00:22:35,240
of meeting but our two contributors to

00:22:32,750 --> 00:22:39,230
VB be back in 2016

00:22:35,240 --> 00:22:40,670
yeah Nikolas who implemented the first

00:22:39,230 --> 00:22:42,500
part of the c-max system and without

00:22:40,670 --> 00:22:46,580
them it would have been impossible to

00:22:42,500 --> 00:22:48,020
really do this refactor so as I

00:22:46,580 --> 00:22:52,910
mentioned it's been heavily factored for

00:22:48,020 --> 00:22:56,840
obv 6.1 so this has been the result of a

00:22:52,910 --> 00:22:59,870
big PR which is if you're interested 382

00:22:56,840 --> 00:23:01,870
so 117 PR comments took month and a half

00:22:59,870 --> 00:23:04,400
to get in is one of the biggest you know

00:23:01,870 --> 00:23:06,140
PRS that has gone into VB in terms of

00:23:04,400 --> 00:23:09,410
the amount of collaboration on it the

00:23:06,140 --> 00:23:12,170
amount of feedback but yeah I do want to

00:23:09,410 --> 00:23:13,970
mention that and I'll positive a

00:23:12,170 --> 00:23:15,860
dramatic effect in case I'm speaking too

00:23:13,970 --> 00:23:24,890
much for someone but and none of us are

00:23:15,860 --> 00:23:27,860
see make gurus okay so this was a

00:23:24,890 --> 00:23:30,170
learning process for us all and I really

00:23:27,860 --> 00:23:31,880
encourage the community to if you're

00:23:30,170 --> 00:23:34,790
going to be using VDB to give us

00:23:31,880 --> 00:23:36,710
constant feedback on this because yeah

00:23:34,790 --> 00:23:38,960
there's gonna be bound to be something

00:23:36,710 --> 00:23:40,850
that we've done perhaps not as standard

00:23:38,960 --> 00:23:42,250
as C make would like and one of the

00:23:40,850 --> 00:23:45,200
beauties of C make Bulls one of its

00:23:42,250 --> 00:23:46,370
curses is that it's very easy to do

00:23:45,200 --> 00:23:48,320
basically anything you want to break

00:23:46,370 --> 00:23:49,460
from tradition of what C make allows you

00:23:48,320 --> 00:23:51,770
to do

00:23:49,460 --> 00:23:53,630
oh please do get in touch if you find

00:23:51,770 --> 00:23:56,680
something which is not as he was

00:23:53,630 --> 00:23:59,060
consider standard with the build system

00:23:56,680 --> 00:24:01,490
so the entire process was tested on a

00:23:59,060 --> 00:24:03,850
variety of platforms one of the biggest

00:24:01,490 --> 00:24:05,810
things that keeps coming up is Windows

00:24:03,850 --> 00:24:09,680
hopefully it won't anymore I don't know

00:24:05,810 --> 00:24:12,680
we'll see but all the CI that has been

00:24:09,680 --> 00:24:15,860
you know touched on just now runs on

00:24:12,680 --> 00:24:20,780
Linux and Apple I don't think it was on

00:24:15,860 --> 00:24:23,060
Windows yet does it yeah it does okay

00:24:20,780 --> 00:24:25,400
cool so old Linux and Windows right okay

00:24:23,060 --> 00:24:27,710
so yeah not Mac as of yet but I hope you

00:24:25,400 --> 00:24:29,930
that's in the near future and it

00:24:27,710 --> 00:24:31,760
exclusively uses the new C make build so

00:24:29,930 --> 00:24:33,320
we've progressed from the old make files

00:24:31,760 --> 00:24:35,510
but we're constantly finding

00:24:33,320 --> 00:24:37,610
improvements for different and different

00:24:35,510 --> 00:24:39,140
you know build matrices and different

00:24:37,610 --> 00:24:41,180
platforms it's very difficult to test

00:24:39,140 --> 00:24:42,710
everything especially because BTB comes

00:24:41,180 --> 00:24:45,140
with a wide set of dependencies which

00:24:42,710 --> 00:24:46,970
I'll touch on in a second and so

00:24:45,140 --> 00:24:51,530
obviously if anything does crop up we're

00:24:46,970 --> 00:24:53,480
constantly adding improvements there so

00:24:51,530 --> 00:24:55,730
all this documentation is online links

00:24:53,480 --> 00:24:56,780
at the bottom there we had a lot of

00:24:55,730 --> 00:24:59,060
documentation for the make files

00:24:56,780 --> 00:25:01,130
previews previously but this is now

00:24:59,060 --> 00:25:02,930
online and not only has kind of an

00:25:01,130 --> 00:25:04,190
introduction to what C make is how you

00:25:02,930 --> 00:25:07,610
should use it how you can look into your

00:25:04,190 --> 00:25:08,840
projects how you can you know deal with

00:25:07,610 --> 00:25:13,070
different errors that C make might crop

00:25:08,840 --> 00:25:14,540
up but also a kind of a boast list of B

00:25:13,070 --> 00:25:16,580
B's dependencies what that relates to

00:25:14,540 --> 00:25:18,020
different DC C's what you need to bear

00:25:16,580 --> 00:25:19,280
in mind when trying to install VDB

00:25:18,020 --> 00:25:21,200
relating to different dependency

00:25:19,280 --> 00:25:23,540
versions so hopefully this documentation

00:25:21,200 --> 00:25:24,800
it will alleviate more problems in the

00:25:23,540 --> 00:25:26,600
future that people run into with

00:25:24,800 --> 00:25:33,650
incompatible versions and things like

00:25:26,600 --> 00:25:36,080
that so that is kind of the ideal like

00:25:33,650 --> 00:25:37,490
bash script that you want to run when

00:25:36,080 --> 00:25:39,830
building V DB that's kind of what we

00:25:37,490 --> 00:25:41,480
wanted to get to just the idea that like

00:25:39,830 --> 00:25:43,370
you've downloaded VD b I just want to

00:25:41,480 --> 00:25:45,920
build it and tell me you know

00:25:43,370 --> 00:25:47,180
progressively what's going wrong would

00:25:45,920 --> 00:25:48,650
like for both information that will

00:25:47,180 --> 00:25:50,390
allow me to help help me solve this

00:25:48,650 --> 00:25:52,940
problem the idea being that if C make

00:25:50,390 --> 00:25:54,290
succeeds that's it like good job well

00:25:52,940 --> 00:25:57,890
done now you can run making it's going

00:25:54,290 --> 00:26:01,120
to work so that was the idea behind this

00:25:57,890 --> 00:26:03,539
new C make system so to help with

00:26:01,120 --> 00:26:05,250
handling dependencies and handling

00:26:03,539 --> 00:26:06,620
like look we have a whole range of

00:26:05,250 --> 00:26:08,940
dependencies that we do becomes with

00:26:06,620 --> 00:26:10,950
implemented a whole range of extensive

00:26:08,940 --> 00:26:12,360
Stan extensive search paths for standard

00:26:10,950 --> 00:26:15,149
systems included like including the

00:26:12,360 --> 00:26:17,460
three platforms as I said previously in

00:26:15,149 --> 00:26:21,120
terms of the default components that are

00:26:17,460 --> 00:26:23,549
built with vbb we only enable the set of

00:26:21,120 --> 00:26:26,279
components that would make VDB operates

00:26:23,549 --> 00:26:28,169
to its fullest shall we say so the core

00:26:26,279 --> 00:26:30,600
library need to be printing the Python

00:26:28,169 --> 00:26:33,929
modules encompass dependencies which are

00:26:30,600 --> 00:26:36,690
usually standard on people's systems

00:26:33,929 --> 00:26:38,760
without going too crazy so for example

00:26:36,690 --> 00:26:40,889
VDP view requires quite a few heavy

00:26:38,760 --> 00:26:42,450
department but a few other dependencies

00:26:40,889 --> 00:26:44,220
that aren't standard you notice again

00:26:42,450 --> 00:26:46,019
require cpp unit stuff like this isn't

00:26:44,220 --> 00:26:47,519
usually installed so again the whole

00:26:46,019 --> 00:26:48,720
idea being that we should wanna you know

00:26:47,519 --> 00:26:54,299
get me to be up and running as quickly

00:26:48,720 --> 00:26:55,679
as possible there is quite a as I

00:26:54,299 --> 00:26:57,929
mentioned many because of a lot of

00:26:55,679 --> 00:27:00,510
dependencies in relative to other

00:26:57,929 --> 00:27:02,309
open-source projects so this was one of

00:27:00,510 --> 00:27:05,399
the beauties of see make is allowing you

00:27:02,309 --> 00:27:09,000
allowing us to help kind of guide the

00:27:05,399 --> 00:27:10,169
user of what exactly should be installed

00:27:09,000 --> 00:27:12,600
what if there's any problems with

00:27:10,169 --> 00:27:15,179
existing dependency versions but also

00:27:12,600 --> 00:27:17,309
being able to completely skip that

00:27:15,179 --> 00:27:18,960
process if you need to and customize the

00:27:17,309 --> 00:27:23,279
dependency options and configurations

00:27:18,960 --> 00:27:25,200
and depending on what you need and so

00:27:23,279 --> 00:27:27,539
yeah just just to quickly go over this

00:27:25,200 --> 00:27:29,519
these are kind of a boast list of all

00:27:27,539 --> 00:27:31,919
dependencies that BTB comes with and

00:27:29,519 --> 00:27:35,340
obviously you only one compiler and c

00:27:31,919 --> 00:27:36,990
makes required and but all these if you

00:27:35,340 --> 00:27:38,399
want to build the entire library all the

00:27:36,990 --> 00:27:40,019
binary is the Python module so you make

00:27:38,399 --> 00:27:43,380
the Houdini everything these are all the

00:27:40,019 --> 00:27:45,360
dependencies that you need and regarding

00:27:43,380 --> 00:27:47,100
the default options these are the only

00:27:45,360 --> 00:27:48,779
the only ones that you actually need

00:27:47,100 --> 00:27:52,340
enter to build the core library need to

00:27:48,779 --> 00:27:54,419
be print and in the python module so

00:27:52,340 --> 00:27:56,519
here's a quick example of just running

00:27:54,419 --> 00:27:58,889
so you make now this will be the new

00:27:56,519 --> 00:28:00,120
scene maple system looks like standard c

00:27:58,889 --> 00:28:02,549
make prints to begin with if you know

00:28:00,120 --> 00:28:03,840
your compiler versions etc etc it will

00:28:02,549 --> 00:28:05,639
print the version of BTB that you're

00:28:03,840 --> 00:28:07,679
building this is also true if you're

00:28:05,639 --> 00:28:09,179
using B DB it sorry if you've already

00:28:07,679 --> 00:28:11,399
built BBB and you're using it from

00:28:09,179 --> 00:28:14,639
another application it will request and

00:28:11,399 --> 00:28:16,110
try and configure the VB ABI and API

00:28:14,639 --> 00:28:18,419
versions for you

00:28:16,110 --> 00:28:19,919
and just off that is an example of what

00:28:18,419 --> 00:28:22,440
this emic system would look like if it

00:28:19,919 --> 00:28:26,070
can't find a dependency on your system

00:28:22,440 --> 00:28:28,320
and so because we're all from studios

00:28:26,070 --> 00:28:32,070
and we don't have too much experience

00:28:28,320 --> 00:28:34,590
you know well it's more we need that

00:28:32,070 --> 00:28:35,850
customizable control to allow us to link

00:28:34,590 --> 00:28:37,649
to different dependencies and different

00:28:35,850 --> 00:28:39,019
installation locations especially when

00:28:37,649 --> 00:28:44,669
you're building against different DC C's

00:28:39,019 --> 00:28:46,740
so we have developed a system where if

00:28:44,669 --> 00:28:49,200
you can't find a dependency you have the

00:28:46,740 --> 00:28:50,279
ability to provide it a route location

00:28:49,200 --> 00:28:53,100
for that dependency so in the previous

00:28:50,279 --> 00:28:54,720
example can find Ireland base you can

00:28:53,100 --> 00:28:56,970
either provide a installation directory

00:28:54,720 --> 00:28:59,539
where the libraries and include desist

00:28:56,970 --> 00:29:01,940
paths include headers or install sorry

00:28:59,539 --> 00:29:04,440
or you can provide them separately and

00:29:01,940 --> 00:29:07,200
this latter point is quite important for

00:29:04,440 --> 00:29:08,789
things like turn against Houdini where

00:29:07,200 --> 00:29:09,929
things are deployed in separate folders

00:29:08,789 --> 00:29:12,450
not necessarily in the same kind of

00:29:09,929 --> 00:29:16,260
hierarchical like gnu structure of like

00:29:12,450 --> 00:29:17,820
was it included in lib and these are

00:29:16,260 --> 00:29:19,139
prioritized over your system search

00:29:17,820 --> 00:29:23,809
paths so you can completely customize

00:29:19,139 --> 00:29:26,820
the installation so regarding Houdini

00:29:23,809 --> 00:29:29,220
one of the common things that people

00:29:26,820 --> 00:29:30,929
have a constantly commented on forums

00:29:29,220 --> 00:29:33,179
with people trying to running into

00:29:30,929 --> 00:29:35,940
difficulties building BBB is just edenia

00:29:33,179 --> 00:29:39,240
apprentice and it's super super easy to

00:29:35,940 --> 00:29:40,799
to set up leave Yates the problem with

00:29:39,240 --> 00:29:41,909
downloading that big dependency list it

00:29:40,799 --> 00:29:44,330
comes with a lot of those standard

00:29:41,909 --> 00:29:47,039
installations and so as you can see

00:29:44,330 --> 00:29:49,139
Eenie comes with those and all you

00:29:47,039 --> 00:29:51,299
really end up needing a see maker C++ 11

00:29:49,139 --> 00:29:53,190
compiler or for the time being and boost

00:29:51,299 --> 00:29:54,299
and hopefully the boost thing actually

00:29:53,190 --> 00:29:57,179
will go away but there's some work there

00:29:54,299 --> 00:29:58,320
to be done so by default if you enable

00:29:57,179 --> 00:29:59,639
the Houdini plug-in it will come

00:29:58,320 --> 00:30:02,220
reconfigure all these dependencies for

00:29:59,639 --> 00:30:03,510
you or even let's say you don't want to

00:30:02,220 --> 00:30:06,899
build a new plugin but you have

00:30:03,510 --> 00:30:09,480
apprentice installed you can just set

00:30:06,899 --> 00:30:10,950
usually need to be on and provided aim

00:30:09,480 --> 00:30:12,630
for the location to your Houdini

00:30:10,950 --> 00:30:14,490
installation and it will configure

00:30:12,630 --> 00:30:18,230
everything for you so no need no hassle

00:30:14,490 --> 00:30:18,230
that of downloading custom dependencies

00:30:18,590 --> 00:30:23,820
this is just a typical example of what C

00:30:21,690 --> 00:30:25,200
make come on looks like now so a lot of

00:30:23,820 --> 00:30:29,190
these options default to honor just

00:30:25,200 --> 00:30:31,349
Blissett them here to be verbose the

00:30:29,190 --> 00:30:33,960
the last four options they're V to be

00:30:31,349 --> 00:30:35,340
print V to be LOD etc I think V DB

00:30:33,960 --> 00:30:38,369
prints the only one that defaults to on

00:30:35,340 --> 00:30:40,379
as I mentioned so it those last three

00:30:38,369 --> 00:30:43,229
would be required that the others not so

00:30:40,379 --> 00:30:44,580
much and yet this is this is this would

00:30:43,229 --> 00:30:47,369
be this is commonly how I'm building it

00:30:44,580 --> 00:30:49,590
on this machine providing it with any

00:30:47,369 --> 00:30:50,999
routes on a Mac freighting an

00:30:49,590 --> 00:30:55,169
installation prefix and then the

00:30:50,999 --> 00:30:57,179
components I want to use yes just in

00:30:55,169 --> 00:30:58,619
last tidbits I didn't know how much time

00:30:57,179 --> 00:31:02,220
this was going to take so I just wanted

00:30:58,619 --> 00:31:03,809
to cover a couple of other things there

00:31:02,220 --> 00:31:05,729
are a suite of Advanced Options as well

00:31:03,809 --> 00:31:07,440
that we've incorporated into the semuc

00:31:05,729 --> 00:31:10,049
system and probably a lot more that we

00:31:07,440 --> 00:31:10,889
need to do as well for example one of

00:31:10,049 --> 00:31:12,690
the things I'm running into at the

00:31:10,889 --> 00:31:14,639
moment is I want custom control over

00:31:12,690 --> 00:31:15,899
where different modules get installed so

00:31:14,639 --> 00:31:17,669
behind reasons tilt here the core

00:31:15,899 --> 00:31:19,710
plug-in core library installed here so

00:31:17,669 --> 00:31:21,749
there's there's lots of other extensions

00:31:19,710 --> 00:31:24,090
to the CMake system we need to do but

00:31:21,749 --> 00:31:27,570
just to go over a few advanced ones so

00:31:24,090 --> 00:31:29,759
clang GCC and ICC are all supported and

00:31:27,570 --> 00:31:31,619
with that you can unable to print strict

00:31:29,759 --> 00:31:32,479
compilation so if any warnings get

00:31:31,619 --> 00:31:34,859
treated as errors

00:31:32,479 --> 00:31:36,809
lots of warnings are still present in

00:31:34,859 --> 00:31:39,599
the library so we are actively trying to

00:31:36,809 --> 00:31:41,489
finesse all that outs use system library

00:31:39,599 --> 00:31:42,629
paths is helpful for users at home who

00:31:41,489 --> 00:31:45,119
just want to be able to build against

00:31:42,629 --> 00:31:47,099
system dependencies you can also skip

00:31:45,119 --> 00:31:48,659
all of the kind of validations that

00:31:47,099 --> 00:31:50,460
we've implemented if you so choose it's

00:31:48,659 --> 00:31:52,169
at your own risk but we don't want

00:31:50,460 --> 00:31:54,479
everyone to impose any you know like

00:31:52,169 --> 00:31:56,070
restrictions unnecessarily so using

00:31:54,479 --> 00:31:59,159
deprecated API order skipping those

00:31:56,070 --> 00:32:00,899
checks is possible and finally and just

00:31:59,159 --> 00:32:01,889
recently enable support for concurrent

00:32:00,899 --> 00:32:03,979
malloc corporations which already

00:32:01,889 --> 00:32:06,539
existed in to make files birth have also

00:32:03,979 --> 00:32:11,179
transitioned over so that's TVB malloc J

00:32:06,539 --> 00:32:16,499
malloc I think that's it yeah

00:32:11,179 --> 00:32:19,859
and that's it from me I think cool

00:32:16,499 --> 00:32:23,460
thanks guys this is the part where we go

00:32:19,859 --> 00:32:25,200
to a live session and I think one of the

00:32:23,460 --> 00:32:26,909
first questions we'd like to ask you

00:32:25,200 --> 00:32:29,519
guys well actually how many of you guys

00:32:26,909 --> 00:32:35,580
are using OB to be honest all familiar

00:32:29,519 --> 00:32:37,559
with most that's cool so yeah I'm

00:32:35,580 --> 00:32:39,899
curious to know what would you like to

00:32:37,559 --> 00:32:42,460
see in the library and what you feel is

00:32:39,899 --> 00:32:44,560
missing what's not working

00:32:42,460 --> 00:32:47,470
I'm hoping so we had this session last

00:32:44,560 --> 00:32:49,030
year and some of the feedback regard is

00:32:47,470 --> 00:32:51,390
actually being reflected in what we're

00:32:49,030 --> 00:32:55,420
working on like those comments about

00:32:51,390 --> 00:32:57,580
adding multi-resolution supports to the

00:32:55,420 --> 00:33:00,340
bread the late loading was also brought

00:32:57,580 --> 00:33:01,660
up so we're certainly working about

00:33:00,340 --> 00:33:04,050
other other things that you guys would

00:33:01,660 --> 00:33:04,050
like to see

00:33:46,280 --> 00:33:49,280
right

00:33:51,440 --> 00:33:56,600
this is a classic problem and it's

00:33:53,880 --> 00:34:00,090
actually something that we we worked on

00:33:56,600 --> 00:34:02,909
at DreamWorks me hi Alden one of the

00:34:00,090 --> 00:34:05,159
original developers came up with a very

00:34:02,909 --> 00:34:07,020
clever trick so and it's actually

00:34:05,159 --> 00:34:10,619
exposed I believe in one of the Houdini

00:34:07,020 --> 00:34:13,950
notes so you can when you so the program

00:34:10,619 --> 00:34:18,330
of course is when you go from a mesh to

00:34:13,950 --> 00:34:21,960
a voxel representation you are softening

00:34:18,330 --> 00:34:24,300
up sharp edges that's just a fact

00:34:21,960 --> 00:34:27,869
but you can actually retain the sharp

00:34:24,300 --> 00:34:30,119
edges when you mesh back again so in the

00:34:27,869 --> 00:34:32,879
there's there's a node that takes a

00:34:30,119 --> 00:34:34,800
volume and it has a second optional

00:34:32,879 --> 00:34:37,109
input which is actually your D original

00:34:34,800 --> 00:34:38,669
mesh if you if you feed it in the

00:34:37,109 --> 00:34:40,500
original mesh before you started

00:34:38,669 --> 00:34:42,780
fracturing it it will use that as a

00:34:40,500 --> 00:34:48,090
guide and actually retain very sharp

00:34:42,780 --> 00:34:51,840
corners so like cool I think it's

00:34:48,090 --> 00:34:57,869
exposed in this up isn't it yeah i know

00:34:51,840 --> 00:35:00,800
the trolls there oh yeah that one will

00:34:57,869 --> 00:35:00,800
be tried a long time ago

00:35:56,500 --> 00:35:59,130
right

00:36:03,110 --> 00:36:10,670
are you thinking in terms of like a

00:36:05,850 --> 00:36:10,670
brick map MIT MIT map like okay

00:36:19,190 --> 00:36:22,960
right

00:36:21,620 --> 00:36:28,589
[Music]

00:36:22,960 --> 00:36:31,300
I definitely think it's an interesting

00:36:28,589 --> 00:36:34,150
idea I'd not sure exactly what it would

00:36:31,300 --> 00:36:38,460
entail but but I can't tell you that in

00:36:34,150 --> 00:36:41,290
my opinion we're open Willoughby is

00:36:38,460 --> 00:36:43,510
lacking behind is actually in terms of

00:36:41,290 --> 00:36:46,869
rendering support so we've also had

00:36:43,510 --> 00:36:48,940
people ask us for support for a motion

00:36:46,869 --> 00:36:53,410
blur volumetric motion blur temporal

00:36:48,940 --> 00:36:57,490
samples so it would be interesting if

00:36:53,410 --> 00:37:08,730
you could yeah I know you guys figure it

00:36:57,490 --> 00:37:08,730
out but right yeah yeah

00:37:16,470 --> 00:37:28,170
that would be fantastic yeah yep I think

00:37:25,859 --> 00:37:30,510
I mean I'm speaking for all of you you

00:37:28,170 --> 00:37:32,430
should shut up but I don't think we have

00:37:30,510 --> 00:37:35,400
rendering experts on the steering

00:37:32,430 --> 00:37:36,930
committee so we are bit weary sort of

00:37:35,400 --> 00:37:39,839
proposing ideas without actually having

00:37:36,930 --> 00:38:10,430
experts so yeah if you guys could help

00:37:39,839 --> 00:38:10,430
us I will be fantastic that's very cool

00:38:11,119 --> 00:38:23,609
well you wanna well you also have

00:38:15,720 --> 00:38:26,250
something you know they don't so hi I'm

00:38:23,609 --> 00:38:27,990
will from Nvidia I don't have any

00:38:26,250 --> 00:38:31,290
beautiful slides nothing like that

00:38:27,990 --> 00:38:35,670
but we've been working on better

00:38:31,290 --> 00:38:39,900
compatibility with open VDB and really

00:38:35,670 --> 00:38:42,990
looking at exactly what minimal minimal

00:38:39,900 --> 00:38:47,069
ABI breaking changes we can do to

00:38:42,990 --> 00:38:48,869
leverage CUDA with open B DB and our

00:38:47,069 --> 00:38:52,560
initial experiments have been very

00:38:48,869 --> 00:38:54,210
successful so this is something that we

00:38:52,560 --> 00:38:56,369
know is is very important there are a

00:38:54,210 --> 00:38:57,750
lot of people out there with with GPUs

00:38:56,369 --> 00:39:03,150
that they want to harness with their

00:38:57,750 --> 00:39:04,710
open VB data sets the goal is to be able

00:39:03,150 --> 00:39:07,410
to take existing

00:39:04,710 --> 00:39:09,180
open V DB and run some of the

00:39:07,410 --> 00:39:10,589
low-hanging fruit which would be a lot

00:39:09,180 --> 00:39:12,230
of the you know basic for each

00:39:10,589 --> 00:39:14,760
operations or dilations

00:39:12,230 --> 00:39:17,990
to morphological changes filtering

00:39:14,760 --> 00:39:24,150
things like that all on the GPU

00:39:17,990 --> 00:39:26,520
there'll be no nothing Hardware specific

00:39:24,150 --> 00:39:28,500
about it you're still program open B to

00:39:26,520 --> 00:39:29,970
be exactly the same as you do you'll

00:39:28,500 --> 00:39:33,150
just have to compile things with

00:39:29,970 --> 00:39:35,400
MVCC compiler which based on clang it

00:39:33,150 --> 00:39:37,800
should be theoretically seamless so

00:39:35,400 --> 00:39:40,260
that's that's something with we're very

00:39:37,800 --> 00:39:43,650
much focused on doing right now and the

00:39:40,260 --> 00:39:48,420
changes that are required to open VDB as

00:39:43,650 --> 00:39:50,550
it stands now are quite subtle and I

00:39:48,420 --> 00:39:53,040
think there's probably a way of doing it

00:39:50,550 --> 00:39:54,750
that you wouldn't need to see any change

00:39:53,040 --> 00:39:57,060
at all if you weren't going to use any

00:39:54,750 --> 00:40:00,900
of this CUDA those CUDA side of things

00:39:57,060 --> 00:40:02,609
example the abstraction of execution

00:40:00,900 --> 00:40:05,609
system and the abstraction of the

00:40:02,609 --> 00:40:08,010
allocation system would need to occur so

00:40:05,609 --> 00:40:09,840
there may be you know some small changes

00:40:08,010 --> 00:40:11,849
especially down at the lower levels like

00:40:09,840 --> 00:40:13,710
towards the lead buffers and things like

00:40:11,849 --> 00:40:17,400
that where we have to actually template

00:40:13,710 --> 00:40:20,040
in the allocator type but I think we can

00:40:17,400 --> 00:40:21,570
default to the existing mechanism so it

00:40:20,040 --> 00:40:23,490
should just work with your your build

00:40:21,570 --> 00:40:26,460
systems and your compile settings

00:40:23,490 --> 00:40:27,930
already and that's if you have any

00:40:26,460 --> 00:40:30,180
specific questions about what we might

00:40:27,930 --> 00:40:32,369
do I can't I can't say everything here

00:40:30,180 --> 00:40:33,720
obviously but you can come and find me

00:40:32,369 --> 00:40:35,150
and we can chat about it if you have

00:40:33,720 --> 00:40:44,790
specific needs and requirements

00:40:35,150 --> 00:40:46,490
regarding this aspect so this this might

00:40:44,790 --> 00:40:49,170
tie into it because I don't know what

00:40:46,490 --> 00:40:50,760
tree topology are necessarily planning

00:40:49,170 --> 00:40:52,530
on using because we've been looking

00:40:50,760 --> 00:40:55,260
we've had we have the complete template

00:40:52,530 --> 00:40:57,240
at the possibility of change in your

00:40:55,260 --> 00:40:59,400
tree branch size at each level of the

00:40:57,240 --> 00:41:03,030
BTB hierarchy but we found in practice

00:40:59,400 --> 00:41:04,770
we've just locked it down and haven't

00:41:03,030 --> 00:41:06,450
wanted to change it and we're looking at

00:41:04,770 --> 00:41:08,550
giant build times and using tons of

00:41:06,450 --> 00:41:09,869
memory for VDB so we're saying is there

00:41:08,550 --> 00:41:12,690
some of this we could improve if we

00:41:09,869 --> 00:41:15,540
start d templatized and stuff so one of

00:41:12,690 --> 00:41:18,119
our questions is do people use different

00:41:15,540 --> 00:41:23,640
tree topologies or would you be upset if

00:41:18,119 --> 00:41:27,599
we only had one tree topology or do you

00:41:23,640 --> 00:41:30,030
know what I'm talking about so so VB is

00:41:27,599 --> 00:41:32,940
a tree right and and you can actually

00:41:30,030 --> 00:41:35,599
design your own tree you can decide how

00:41:32,940 --> 00:41:38,390
deep it is the size of the leaf nodes

00:41:35,599 --> 00:41:41,460
even you know size of intermediate nodes

00:41:38,390 --> 00:41:44,130
and because it's because

00:41:41,460 --> 00:41:47,730
it's very configurable it also means

00:41:44,130 --> 00:41:49,800
it's slow to compile and as Jeff said we

00:41:47,730 --> 00:41:52,140
often been thinking like who actually

00:41:49,800 --> 00:41:55,970
changes who actually plays with these

00:41:52,140 --> 00:41:55,970
parameters can we just lock them down or

00:42:01,730 --> 00:42:07,609
is it I'm actually curious is it just a

00:42:04,349 --> 00:42:07,609
leaf notes or is it the whole thing

00:42:36,200 --> 00:42:49,070
okay okay I think okay right right

00:42:52,710 --> 00:43:00,160
something yeah yeah yeah I mean in

00:42:57,540 --> 00:43:02,350
principle you could actually take a VDP

00:43:00,160 --> 00:43:05,310
and turn it into an octree but we don't

00:43:02,350 --> 00:43:05,310
know anybody's ever done that

00:43:27,110 --> 00:43:38,340
right right okay we might be looking

00:43:31,830 --> 00:43:42,090
into that so I'm the fall guy the other

00:43:38,340 --> 00:43:44,010
question is custom types so like you

00:43:42,090 --> 00:43:46,560
have a grid of we have built-in grids

00:43:44,010 --> 00:43:49,020
for like factory float and factory

00:43:46,560 --> 00:43:51,540
double and float and double an int and

00:43:49,020 --> 00:43:54,510
similarly with the point grid types and

00:43:51,540 --> 00:43:57,060
I know as a DCC we ran into a trouble

00:43:54,510 --> 00:43:59,100
where someone used an unsigned int type

00:43:57,060 --> 00:44:01,980
that they added to their particular

00:43:59,100 --> 00:44:04,050
build of evb so of course we couldn't

00:44:01,980 --> 00:44:07,440
load it and it's not in the standard

00:44:04,050 --> 00:44:09,690
either and so a question is how how

00:44:07,440 --> 00:44:11,190
should we try and limit the number of

00:44:09,690 --> 00:44:13,050
types we have so again we might be able

00:44:11,190 --> 00:44:17,070
to pre-compile all these different types

00:44:13,050 --> 00:44:22,200
or our people actually generate in new

00:44:17,070 --> 00:44:31,680
types of grids so or do people know what

00:44:22,200 --> 00:44:35,670
I'm saying so how many people here are

00:44:31,680 --> 00:44:41,600
actually developing code with me as

00:44:35,670 --> 00:44:45,480
opposed to using it a couple okay it's

00:44:41,600 --> 00:44:48,390
open maybe is not I think the barrier to

00:44:45,480 --> 00:44:49,890
entry is pretty high you know I'm

00:44:48,390 --> 00:44:55,190
certainly the first to admit that it's

00:44:49,890 --> 00:44:55,190
not an easy API or API to to work with

00:44:56,270 --> 00:45:09,060
all right in this define you know say

00:45:07,170 --> 00:45:11,310
for increased call this before it's call

00:45:09,060 --> 00:45:12,510
this for vector3 glyphs all this of

00:45:11,310 --> 00:45:15,030
course you don't put yourself in that

00:45:12,510 --> 00:45:16,890
list you aren't called so that's why

00:45:15,030 --> 00:45:20,150
we'd like to be able to say this is the

00:45:16,890 --> 00:45:20,150
only set of grids that we've have

00:45:28,980 --> 00:45:31,700
right

00:45:36,870 --> 00:45:47,590
[Laughter]

00:45:40,020 --> 00:45:49,690
good yeah and I'm assuming as a it's a

00:45:47,590 --> 00:45:51,370
DCC you would prefer to limit the number

00:45:49,690 --> 00:45:52,870
of types well it's not so much I want to

00:45:51,370 --> 00:45:54,100
limit the number types as I want to

00:45:52,870 --> 00:45:56,680
limit it to the ones that are in the

00:45:54,100 --> 00:45:58,510
standard so if people push that back to

00:45:56,680 --> 00:46:00,760
the b2b standard then the next iteration

00:45:58,510 --> 00:46:02,380
of edenia will get those types and so I

00:46:00,760 --> 00:46:07,290
guess if you need a custom type then

00:46:02,380 --> 00:46:07,290
contact the TSC and we can adjust that

00:46:14,380 --> 00:46:18,560
yeah and we'll just be passed with

00:46:16,610 --> 00:46:20,270
flying data everywhere I mean it should

00:46:18,560 --> 00:46:23,470
still move through the pipe but just no

00:46:20,270 --> 00:46:23,470
one will know how to use it right

00:46:25,210 --> 00:46:28,940
something I didn't mention in the in the

00:46:27,530 --> 00:46:30,710
slide deck I just thought of it's worth

00:46:28,940 --> 00:46:32,510
kind of bringing up one of the things

00:46:30,710 --> 00:46:34,720
that we did over the last year is kind

00:46:32,510 --> 00:46:37,160
of formalize the deprecation policy

00:46:34,720 --> 00:46:39,410
which is basically what is going to be a

00:46:37,160 --> 00:46:42,680
minimum version of everything that we

00:46:39,410 --> 00:46:44,720
currently support if you download the

00:46:42,680 --> 00:46:45,110
repo and the latest version of it right

00:46:44,720 --> 00:46:46,760
now

00:46:45,110 --> 00:46:47,990
and ultimately what we came up with us

00:46:46,760 --> 00:46:49,520
we're going to support the current and

00:46:47,990 --> 00:46:51,980
then the last two years of the visual

00:46:49,520 --> 00:46:53,660
visual effects reference platform which

00:46:51,980 --> 00:46:56,120
gives us a really nice way of kind of

00:46:53,660 --> 00:46:58,430
dropping support for you know you've got

00:46:56,120 --> 00:46:59,540
at least two years to move off that onto

00:46:58,430 --> 00:47:01,490
the newer version of everything which

00:46:59,540 --> 00:47:02,690
hopefully will will mean that as vendors

00:47:01,490 --> 00:47:04,490
keep picking up the newer versions of

00:47:02,690 --> 00:47:06,470
the VFX reference platform in studios

00:47:04,490 --> 00:47:07,820
kind of lag behind with shows that the

00:47:06,470 --> 00:47:09,740
delivering and things like that you can

00:47:07,820 --> 00:47:12,800
still use the new features for a sort of

00:47:09,740 --> 00:47:14,930
a period of time so as an example of

00:47:12,800 --> 00:47:16,430
what that might mean we're currently

00:47:14,930 --> 00:47:18,470
supporting the VFX reference platform

00:47:16,430 --> 00:47:19,850
2017 but we're going to be dropping

00:47:18,470 --> 00:47:21,050
support for that at the end of this year

00:47:19,850 --> 00:47:23,870
which means that we'll be able to use

00:47:21,050 --> 00:47:25,460
C++ 14 features as a result and so

00:47:23,870 --> 00:47:28,340
you'll need to need to we're already

00:47:25,460 --> 00:47:30,200
using GCC 63 so hopefully that should be

00:47:28,340 --> 00:47:33,440
a relatively seamless transition that's

00:47:30,200 --> 00:47:34,970
a useful one to mention and then I

00:47:33,440 --> 00:47:36,260
thought it might touch on something that

00:47:34,970 --> 00:47:38,120
Nick was saying earlier as well about

00:47:36,260 --> 00:47:40,190
the different libraries and dependencies

00:47:38,120 --> 00:47:42,440
and things we've been kind of talking

00:47:40,190 --> 00:47:44,300
for a while about how do we reduce the

00:47:42,440 --> 00:47:45,350
number of mandatory dependencies in BDB

00:47:44,300 --> 00:47:46,970
so I thought it was worth kind of

00:47:45,350 --> 00:47:48,260
highlighting that you know boost was one

00:47:46,970 --> 00:47:49,640
that we wanted to kind of gradually cut

00:47:48,260 --> 00:47:51,680
back on as more the standard library

00:47:49,640 --> 00:47:53,960
supported the stuff that was that we've

00:47:51,680 --> 00:47:55,970
kind of turned to boost to support and

00:47:53,960 --> 00:47:57,560
things like TVB is is currently a

00:47:55,970 --> 00:48:00,260
mandatory dependency and doesn't

00:47:57,560 --> 00:48:02,180
necessarily need to be one of the other

00:48:00,260 --> 00:48:04,130
areas that we've kind of talked about in

00:48:02,180 --> 00:48:06,290
the past is something that might be

00:48:04,130 --> 00:48:07,520
interesting is is and this is kind of

00:48:06,290 --> 00:48:09,050
briefly mentioned in terms of texture

00:48:07,520 --> 00:48:11,300
maps and things like that is the ability

00:48:09,050 --> 00:48:13,130
to gather support 2d grids as well which

00:48:11,300 --> 00:48:15,620
you currently can't do and things like

00:48:13,130 --> 00:48:16,910
that so I just wanted to kind of make

00:48:15,620 --> 00:48:18,770
the pointer we're kind of thinking about

00:48:16,910 --> 00:48:21,320
lots of these types of ideas but we're

00:48:18,770 --> 00:48:23,690
very receptive to anything that you guys

00:48:21,320 --> 00:48:24,539
are running into so if if you're willing

00:48:23,690 --> 00:48:26,400
to kind of share

00:48:24,539 --> 00:48:28,109
stuff that you kind of kind of run up

00:48:26,400 --> 00:48:29,729
against then yeah definitely get in

00:48:28,109 --> 00:48:31,679
touch with us and we can kind of factor

00:48:29,729 --> 00:48:32,849
that into how we develop the library in

00:48:31,679 --> 00:48:34,739
how we can i progress it and things i

00:48:32,849 --> 00:48:36,989
know yeah i should point out that we hit

00:48:34,739 --> 00:48:40,769
there's a mailing list set up by a SWF

00:48:36,989 --> 00:48:42,809
for talking about it is that on my slide

00:48:40,769 --> 00:48:45,089
Oh awesome

00:48:42,809 --> 00:48:48,449
and so that's one way you can conjoining

00:48:45,089 --> 00:48:50,640
in the conversation so we're at we got

00:48:48,449 --> 00:48:53,150
two minutes left before we switch over

00:48:50,640 --> 00:48:53,150
so last

00:49:16,270 --> 00:49:22,760
no it's a good idea I think we certainly

00:49:19,910 --> 00:49:25,099
thought about it I think that the

00:49:22,760 --> 00:49:26,750
problem potential problem is that you

00:49:25,099 --> 00:49:30,380
will have to maintain that right as you

00:49:26,750 --> 00:49:33,650
as you as you modify values lower down

00:49:30,380 --> 00:49:46,730
in the tree when when when I use syncing

00:49:33,650 --> 00:49:50,500
up that statistics right yeah because

00:49:46,730 --> 00:49:50,500
then the new tree has a state machine

00:49:56,859 --> 00:50:01,150
right yeah

00:50:06,800 --> 00:50:09,370
yeah

00:50:14,190 --> 00:50:19,170
ya know it's it's not a bad idea at all

00:50:16,799 --> 00:50:21,329
I mean we to some extent we're doing it

00:50:19,170 --> 00:50:23,640
as metadata you know sometimes we bake

00:50:21,329 --> 00:50:26,210
metadata into but that's global to the

00:50:23,640 --> 00:50:45,990
whole grid so you just you just sort of

00:50:26,210 --> 00:50:48,559
suggesting that we do that all right

00:50:45,990 --> 00:50:48,559
thanks very much

00:50:48,980 --> 00:50:53,219

YouTube URL: https://www.youtube.com/watch?v=iWGXFWmOvfc


