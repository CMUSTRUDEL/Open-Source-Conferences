Title: OpenCue: Open Source Render Management
Publication date: 2020-08-24
Playlist: Open Source Days 2020
Description: 
	OpenCue: Open Source Render Management
Speakers: Eoin Bailey, Brian Cipriano, Benjamin Dines, Diego Tavares

For more information about the Academy Software Foundation go to: https://www.aswf.io/

The OpenCue Steering Committee gives a project update from the past year, an OpenCue user provides a real-world use case for using OpenCue in production, and we walk through an automated deployment of OpenCue in the cloud using Terraform.
Captions: 
	00:00:00,160 --> 00:00:04,000
okay i think we can get started uh

00:00:02,879 --> 00:00:06,080
welcome

00:00:04,000 --> 00:00:08,000
uh i'm brian cipriano i'm the project

00:00:06,080 --> 00:00:11,280
chairperson of the uh

00:00:08,000 --> 00:00:12,080
open qtsc uh to our open source day

00:00:11,280 --> 00:00:15,360
presentation

00:00:12,080 --> 00:00:16,320
um so we have a few speakers today

00:00:15,360 --> 00:00:18,640
i'm going to be running through a quick

00:00:16,320 --> 00:00:19,760
project update um

00:00:18,640 --> 00:00:21,680
and then i'll hand off to some of the

00:00:19,760 --> 00:00:24,800
other folks we have

00:00:21,680 --> 00:00:26,560
we'll have a hopefully

00:00:24,800 --> 00:00:28,640
hopefully some time for q a at the at

00:00:26,560 --> 00:00:32,079
the ends so feel free to

00:00:28,640 --> 00:00:35,040
drop your q a questions uh in the uh

00:00:32,079 --> 00:00:36,480
in the q a box and uh we'll get to them

00:00:35,040 --> 00:00:38,800
afterwards uh we may

00:00:36,480 --> 00:00:40,559
run out of time so at the end we'll move

00:00:38,800 --> 00:00:41,600
to the open cue slack where we'll

00:00:40,559 --> 00:00:44,239
continue to

00:00:41,600 --> 00:00:46,559
be online for a while and get to get any

00:00:44,239 --> 00:00:51,440
any leftover questions there

00:00:46,559 --> 00:00:53,280
um cool so i'll get started

00:00:51,440 --> 00:00:55,120
um i'm just going to give a quick quick

00:00:53,280 --> 00:00:56,079
update on what opencue's been up to for

00:00:55,120 --> 00:00:58,800
the past

00:00:56,079 --> 00:01:02,640
year since our last uh last open source

00:00:58,800 --> 00:01:02,640
day session at sigraph last year

00:01:03,280 --> 00:01:06,479
um cool so some of the stuff we've we've

00:01:05,040 --> 00:01:09,760
come out with in the last year

00:01:06,479 --> 00:01:11,200
um we released uh

00:01:09,760 --> 00:01:13,680
so the original guide that we came out

00:01:11,200 --> 00:01:16,240
with when openq was first released was a

00:01:13,680 --> 00:01:17,600
bit complex pretty long

00:01:16,240 --> 00:01:19,439
you know we heard some some feedback

00:01:17,600 --> 00:01:20,479
that it was tough to kind of get get up

00:01:19,439 --> 00:01:22,560
and running quickly

00:01:20,479 --> 00:01:23,520
just to try open queue out first so we

00:01:22,560 --> 00:01:26,000
put together a

00:01:23,520 --> 00:01:27,040
a sandbox deployment that uses docker

00:01:26,000 --> 00:01:29,040
compose and

00:01:27,040 --> 00:01:31,040
runs on a single machine you know

00:01:29,040 --> 00:01:33,280
basically lets you get an open cue

00:01:31,040 --> 00:01:34,320
deployment up and running with a couple

00:01:33,280 --> 00:01:36,880
of commands

00:01:34,320 --> 00:01:38,240
um so we'll share uh we'll have our

00:01:36,880 --> 00:01:39,759
slides posted after this

00:01:38,240 --> 00:01:41,520
you can follow a link here it just goes

00:01:39,759 --> 00:01:43,920
to our website openq.io where there's

00:01:41,520 --> 00:01:45,119
some some getting started docs

00:01:43,920 --> 00:01:47,360
uh we also released a bunch of

00:01:45,119 --> 00:01:48,880
contributor guides um

00:01:47,360 --> 00:01:50,799
we've had a lot of kind of interesting

00:01:48,880 --> 00:01:53,600
new contributors and we used that

00:01:50,799 --> 00:01:55,360
that experience to put together guides

00:01:53,600 --> 00:01:56,799
for getting started within a development

00:01:55,360 --> 00:01:58,479
environment for

00:01:56,799 --> 00:02:01,040
all you know mac windows and linux we

00:01:58,479 --> 00:02:04,000
have separate guides for each of them

00:02:01,040 --> 00:02:05,360
the um the kind of biggest new feature

00:02:04,000 --> 00:02:07,600
that we've been working on

00:02:05,360 --> 00:02:09,200
is windows support i think at this time

00:02:07,600 --> 00:02:11,599
last year we had

00:02:09,200 --> 00:02:12,879
zero window support so since then we've

00:02:11,599 --> 00:02:14,319
moved through

00:02:12,879 --> 00:02:16,160
through an alpha phase and did a bunch

00:02:14,319 --> 00:02:17,200
of testing and now that's

00:02:16,160 --> 00:02:19,360
we're happy to announce that that's

00:02:17,200 --> 00:02:21,280
moved into a beta phase now

00:02:19,360 --> 00:02:22,480
um we have a few a few folks who are

00:02:21,280 --> 00:02:25,760
running it uh

00:02:22,480 --> 00:02:28,400
steadily in production and um uh

00:02:25,760 --> 00:02:29,840
seem to be quite happy with it so that's

00:02:28,400 --> 00:02:32,000
good to see

00:02:29,840 --> 00:02:33,760
uh we have we participated along with

00:02:32,000 --> 00:02:36,800
the rest of the aswf in

00:02:33,760 --> 00:02:38,959
uh google summer code this year uh

00:02:36,800 --> 00:02:40,160
and our uh summer codes student has been

00:02:38,959 --> 00:02:42,080
working on some uh

00:02:40,160 --> 00:02:43,360
some cloud support a cloud support

00:02:42,080 --> 00:02:46,319
plug-in for uh

00:02:43,360 --> 00:02:46,720
the q gui which i'll i'll show a bit of

00:02:46,319 --> 00:02:50,080
in

00:02:46,720 --> 00:02:52,239
a second we have uh

00:02:50,080 --> 00:02:53,920
recently completed our migrate migrating

00:02:52,239 --> 00:02:56,000
all of our ci environment to

00:02:53,920 --> 00:02:57,519
github actions to align with the rest of

00:02:56,000 --> 00:03:00,480
the aswf

00:02:57,519 --> 00:03:01,680
um so happy to see that wrapped up and

00:03:00,480 --> 00:03:03,599
then kind of the biggest

00:03:01,680 --> 00:03:05,519
uh i think the kind of biggest thing

00:03:03,599 --> 00:03:07,200
we've been working on is uh

00:03:05,519 --> 00:03:09,120
tons of kind of small improvements and

00:03:07,200 --> 00:03:09,920
bug fixes and stuff like that really

00:03:09,120 --> 00:03:12,400
worked on

00:03:09,920 --> 00:03:13,519
you know stability and uh performance

00:03:12,400 --> 00:03:15,760
and kind of

00:03:13,519 --> 00:03:17,440
finishing up all of the stuff that went

00:03:15,760 --> 00:03:19,440
on during the open source uh

00:03:17,440 --> 00:03:21,040
open sourcing process uh before it was

00:03:19,440 --> 00:03:22,879
released um

00:03:21,040 --> 00:03:24,400
i would say that you know kind of the

00:03:22,879 --> 00:03:26,080
big thing that we've we learned in the

00:03:24,400 --> 00:03:26,560
last year was we spent a lot more time

00:03:26,080 --> 00:03:28,799
on

00:03:26,560 --> 00:03:30,080
on fixing minor stuff than and we didn't

00:03:28,799 --> 00:03:31,440
get to some of the bigger ticket items

00:03:30,080 --> 00:03:34,959
that we had hoped but

00:03:31,440 --> 00:03:36,480
um i think it was all well worth it and

00:03:34,959 --> 00:03:39,840
a good lesson learned um

00:03:36,480 --> 00:03:41,200
so we just a couple days ago days ago

00:03:39,840 --> 00:03:45,040
cut a new release

00:03:41,200 --> 00:03:47,200
uh 0.4.55 that's up on github now

00:03:45,040 --> 00:03:48,640
that contains that is basically

00:03:47,200 --> 00:03:49,599
basically all the way up to date with

00:03:48,640 --> 00:03:51,599
the master branch

00:03:49,599 --> 00:03:52,959
of open cues so it has all the latest

00:03:51,599 --> 00:03:54,560
bug fixes and

00:03:52,959 --> 00:03:56,319
stuff like that i think the some of the

00:03:54,560 --> 00:03:59,840
biggest stuff it contains is a

00:03:56,319 --> 00:04:01,760
big batch of the fixes for windows so

00:03:59,840 --> 00:04:03,760
big thanks to the folks from from

00:04:01,760 --> 00:04:05,120
microsoft and from sbi who have done a

00:04:03,760 --> 00:04:07,760
lot of the kind of heavy lifting on the

00:04:05,120 --> 00:04:10,319
windows support

00:04:07,760 --> 00:04:11,439
um so just a quick preview of the cloud

00:04:10,319 --> 00:04:14,720
manager plugin

00:04:11,439 --> 00:04:16,160
that is uh coming out soon

00:04:14,720 --> 00:04:17,840
we're going to have some functionality

00:04:16,160 --> 00:04:21,280
built into qgui for

00:04:17,840 --> 00:04:22,560
uh creating groups of machines in the

00:04:21,280 --> 00:04:23,919
cloud

00:04:22,560 --> 00:04:26,639
this will be this has been designed in a

00:04:23,919 --> 00:04:28,240
way where it'll work with

00:04:26,639 --> 00:04:29,759
with really any cloud we're hoping to

00:04:28,240 --> 00:04:32,800
release it with uh

00:04:29,759 --> 00:04:33,440
gcp and azure and aws support um but it

00:04:32,800 --> 00:04:35,600
will basically

00:04:33,440 --> 00:04:36,479
allow you to you know create and scale

00:04:35,600 --> 00:04:38,479
machine groups

00:04:36,479 --> 00:04:40,479
it's all seamlessly integrated with open

00:04:38,479 --> 00:04:43,040
cue um

00:04:40,479 --> 00:04:44,560
and the existing rpd setup so it's

00:04:43,040 --> 00:04:45,360
really nice to see this is a screenshot

00:04:44,560 --> 00:04:48,160
of the

00:04:45,360 --> 00:04:49,919
uh the ui as we have it now for creating

00:04:48,160 --> 00:04:53,520
cloud groups

00:04:49,919 --> 00:04:55,199
and then a shot of what it'll look like

00:04:53,520 --> 00:04:56,639
when you have groups existing already

00:04:55,199 --> 00:04:58,080
you can see that they're see what

00:04:56,639 --> 00:04:58,800
they're doing and how many machines are

00:04:58,080 --> 00:05:00,720
in there and

00:04:58,800 --> 00:05:02,960
a little bit of other information about

00:05:00,720 --> 00:05:02,960
them

00:05:03,199 --> 00:05:06,960
um so actually a bit more on that so

00:05:05,360 --> 00:05:07,680
summer code wraps up soon at the end of

00:05:06,960 --> 00:05:09,600
this month

00:05:07,680 --> 00:05:11,039
and hopefully the initial version of

00:05:09,600 --> 00:05:13,360
this should get released uh

00:05:11,039 --> 00:05:14,880
shortly after that but we'll see where

00:05:13,360 --> 00:05:18,000
where things are at at the end of

00:05:14,880 --> 00:05:18,000
the summer code period

00:05:18,080 --> 00:05:21,280
uh some quick stats from the past year

00:05:20,240 --> 00:05:23,120
uh we've seen

00:05:21,280 --> 00:05:26,080
both the pool of contributors and

00:05:23,120 --> 00:05:28,800
committers grow pretty significantly

00:05:26,080 --> 00:05:30,080
you know we have 24 folks who have

00:05:28,800 --> 00:05:32,080
contributed code

00:05:30,080 --> 00:05:34,160
six people now in the uh in the

00:05:32,080 --> 00:05:37,120
committers pool which is great to see

00:05:34,160 --> 00:05:38,800
really nice growth there um merged about

00:05:37,120 --> 00:05:40,560
three and a half pr's a week which is

00:05:38,800 --> 00:05:41,759
about the same as we were at last year

00:05:40,560 --> 00:05:43,199
so that's good kind of maintaining

00:05:41,759 --> 00:05:43,759
velocity there except it's coming from a

00:05:43,199 --> 00:05:45,680
much

00:05:43,759 --> 00:05:47,440
more diverse pool of contributors which

00:05:45,680 --> 00:05:49,360
which is good and much more

00:05:47,440 --> 00:05:51,199
kind of maintainable and we're closing

00:05:49,360 --> 00:05:52,080
about 100 and we've closed about 112

00:05:51,199 --> 00:05:55,039
issues in the past

00:05:52,080 --> 00:05:56,800
year which is gives you an idea of many

00:05:55,039 --> 00:06:00,080
many kind of minor issues that we've

00:05:56,800 --> 00:06:02,720
that we've closed up a few bits

00:06:00,080 --> 00:06:03,840
uh pieces from uh that we're looking at

00:06:02,720 --> 00:06:04,960
for the next year some of these will

00:06:03,840 --> 00:06:06,240
look familiar since

00:06:04,960 --> 00:06:08,080
as i mentioned we spent a lot more time

00:06:06,240 --> 00:06:10,240
on the kind of minor stuff

00:06:08,080 --> 00:06:12,000
recently we definitely want to keep

00:06:10,240 --> 00:06:13,600
working on uh windows support and

00:06:12,000 --> 00:06:16,080
getting that a lot uh

00:06:13,600 --> 00:06:17,600
you know a lot more stable i think we're

00:06:16,080 --> 00:06:20,160
still lacking in the docs

00:06:17,600 --> 00:06:21,680
department there so we'd like to see our

00:06:20,160 --> 00:06:23,440
documentation grow

00:06:21,680 --> 00:06:24,800
especially around getting started guides

00:06:23,440 --> 00:06:27,199
the kind of stuff we have

00:06:24,800 --> 00:06:28,240
good support for on linux and uh already

00:06:27,199 --> 00:06:30,560
so

00:06:28,240 --> 00:06:32,800
um user management and permission system

00:06:30,560 --> 00:06:33,440
that's that's been a kind of big ask and

00:06:32,800 --> 00:06:35,199
a big

00:06:33,440 --> 00:06:37,840
piece of work that's still high on our

00:06:35,199 --> 00:06:40,720
list we'd like to see happen

00:06:37,840 --> 00:06:41,199
uh packaging and installers you know

00:06:40,720 --> 00:06:44,720
kind of

00:06:41,199 --> 00:06:47,039
make it make it a lot easier to

00:06:44,720 --> 00:06:48,960
install the opeq components especially

00:06:47,039 --> 00:06:51,520
the client-side stuff

00:06:48,960 --> 00:06:53,599
um it's i think we've made some progress

00:06:51,520 --> 00:06:54,080
we have an rpms installer for cubot now

00:06:53,599 --> 00:06:55,759
but the

00:06:54,080 --> 00:06:57,680
the client-side stuff is still kind of

00:06:55,759 --> 00:06:59,840
lacking still requires a lot of

00:06:57,680 --> 00:07:01,360
creating virtual environments and

00:06:59,840 --> 00:07:02,960
running python commands and

00:07:01,360 --> 00:07:04,560
we'd like to see that get get a lot

00:07:02,960 --> 00:07:07,599
smoother and integrated with some native

00:07:04,560 --> 00:07:07,599
os tools

00:07:07,680 --> 00:07:10,720
expanded cloud support we want to keep

00:07:09,520 --> 00:07:11,840
building on the stuff that we're

00:07:10,720 --> 00:07:13,759
building as part of summer

00:07:11,840 --> 00:07:15,120
code we'd like to see that grow even

00:07:13,759 --> 00:07:17,199
more

00:07:15,120 --> 00:07:18,479
you know have to get things to work even

00:07:17,199 --> 00:07:20,240
better in the cloud and in hybrid

00:07:18,479 --> 00:07:22,400
environments

00:07:20,240 --> 00:07:23,840
uh you know we want to keep growing the

00:07:22,400 --> 00:07:24,960
contributor pool as well i think the

00:07:23,840 --> 00:07:26,880
progress we made is good

00:07:24,960 --> 00:07:28,560
and we've made some good we have some

00:07:26,880 --> 00:07:29,520
pretty good procedures now for

00:07:28,560 --> 00:07:31,440
you know trying to bring in new

00:07:29,520 --> 00:07:32,720
contributors and promote existing

00:07:31,440 --> 00:07:36,000
contributors to committers

00:07:32,720 --> 00:07:37,120
we want to keep doing more of that and

00:07:36,000 --> 00:07:39,680
uh

00:07:37,120 --> 00:07:40,319
big thing on the aswf front we want to

00:07:39,680 --> 00:07:42,240
get the

00:07:40,319 --> 00:07:43,520
project to graduate to full status we

00:07:42,240 --> 00:07:45,120
recently had our

00:07:43,520 --> 00:07:46,400
uh incubation period standard for

00:07:45,120 --> 00:07:46,800
another six months to the end of the

00:07:46,400 --> 00:07:48,639
year

00:07:46,800 --> 00:07:50,160
and we're looking to to wrap that up

00:07:48,639 --> 00:07:52,160
soon and get

00:07:50,160 --> 00:07:54,960
get the project to be a fully

00:07:52,160 --> 00:07:54,960
established project

00:07:56,879 --> 00:08:01,599
a few bits to get involved uh those will

00:07:59,680 --> 00:08:04,960
all be linked in the in the slides after

00:08:01,599 --> 00:08:07,199
openq dot io is uh you know has

00:08:04,960 --> 00:08:08,479
all the documentation links to basically

00:08:07,199 --> 00:08:11,120
all this other stuff

00:08:08,479 --> 00:08:12,879
um so definitely start there link to our

00:08:11,120 --> 00:08:14,560
github repo

00:08:12,879 --> 00:08:16,319
uh the users and developers mailing

00:08:14,560 --> 00:08:18,319
lists uh which we've seen some good

00:08:16,319 --> 00:08:20,240
activity on and the uh

00:08:18,319 --> 00:08:21,440
the slack channel uh you know we're

00:08:20,240 --> 00:08:24,800
definitely around there

00:08:21,440 --> 00:08:27,759
slap go to uh slack.aswf.io to

00:08:24,800 --> 00:08:28,240
sign up and join slack um we're on the

00:08:27,759 --> 00:08:31,520
open q

00:08:28,240 --> 00:08:32,159
channel and uh yes it's also been linked

00:08:31,520 --> 00:08:35,440
in the chat

00:08:32,159 --> 00:08:37,519
um so yeah definitely uh check that out

00:08:35,440 --> 00:08:38,880
and we'll we'll be around in the slack

00:08:37,519 --> 00:08:40,479
after this session to answer any

00:08:38,880 --> 00:08:41,120
questions you have in addition to the q

00:08:40,479 --> 00:08:44,320
a that

00:08:41,120 --> 00:08:44,320
we're doing as part of this session

00:08:44,880 --> 00:08:52,720
so um next i will hand it off to

00:08:48,160 --> 00:08:52,720
ben dynes with sony pictures imageworks

00:08:53,440 --> 00:08:56,480
hey everyone my name is ben dines and i

00:08:56,000 --> 00:08:58,959
work at

00:08:56,480 --> 00:09:00,320
sony pictures image works at last year's

00:08:58,959 --> 00:09:02,560
open source day i talked about the

00:09:00,320 --> 00:09:05,120
history of q3 which was our internal

00:09:02,560 --> 00:09:09,839
render management software that became

00:09:05,120 --> 00:09:09,839
open queue

00:09:10,399 --> 00:09:13,680
since last year we've begun the

00:09:11,600 --> 00:09:16,800
transition from our old q3 system to the

00:09:13,680 --> 00:09:16,800
standard open cue build

00:09:16,959 --> 00:09:21,120
and uh for our transition we've had two

00:09:19,279 --> 00:09:23,519
major milestones so far

00:09:21,120 --> 00:09:25,600
in january we kicked off our first show

00:09:23,519 --> 00:09:28,480
entirely on openq

00:09:25,600 --> 00:09:30,560
and then in may we migrated our entire

00:09:28,480 --> 00:09:33,040
database backend for

00:09:30,560 --> 00:09:34,160
for open queue from oracle to postgres

00:09:33,040 --> 00:09:36,800
which

00:09:34,160 --> 00:09:38,480
then opened the door for uh the open

00:09:36,800 --> 00:09:40,959
source project to drop

00:09:38,480 --> 00:09:43,839
oracle support completely which was a

00:09:40,959 --> 00:09:47,680
blocking issue for a number of things

00:09:43,839 --> 00:09:49,040
and uh so now that that's in progress i

00:09:47,680 --> 00:09:50,480
you know i'd love to be able to tell you

00:09:49,040 --> 00:09:52,160
some interesting stories about the

00:09:50,480 --> 00:09:54,080
migration progress and all the profound

00:09:52,160 --> 00:09:56,399
things we learned

00:09:54,080 --> 00:09:57,519
but uh it actually went really really

00:09:56,399 --> 00:10:00,800
smoothly

00:09:57,519 --> 00:10:02,880
for what it's worth other than just

00:10:00,800 --> 00:10:05,760
straightforward database migrations and

00:10:02,880 --> 00:10:06,720
the usual stuff there were no major

00:10:05,760 --> 00:10:09,279
caveats

00:10:06,720 --> 00:10:10,880
or anything like that so hopefully that

00:10:09,279 --> 00:10:14,640
would bode well for anyone else

00:10:10,880 --> 00:10:14,640
attempting to do something similar

00:10:15,200 --> 00:10:18,640
so in the meantime we had a lot of code

00:10:17,680 --> 00:10:21,680
to pour over

00:10:18,640 --> 00:10:23,680
uh to the new tool set and api uh there

00:10:21,680 --> 00:10:26,800
are really two parts to this

00:10:23,680 --> 00:10:28,959
the command line and the gui tools

00:10:26,800 --> 00:10:32,160
uh the built-in ones and our own

00:10:28,959 --> 00:10:33,600
internal queue management tools

00:10:32,160 --> 00:10:34,959
getting the built-in tools up and

00:10:33,600 --> 00:10:36,880
running was a close collaboration

00:10:34,959 --> 00:10:40,720
between our own internal dev team

00:10:36,880 --> 00:10:42,800
and the open source team and porting our

00:10:40,720 --> 00:10:44,000
internal queue management tools involved

00:10:42,800 --> 00:10:46,480
converting

00:10:44,000 --> 00:10:47,600
over 12 years worth of python scripts of

00:10:46,480 --> 00:10:49,440
varying quality

00:10:47,600 --> 00:10:51,040
uh and so it was a task that we

00:10:49,440 --> 00:10:53,279
distributed across

00:10:51,040 --> 00:10:55,600
our dev team and our render management

00:10:53,279 --> 00:10:55,600
teams

00:10:56,959 --> 00:11:00,560
and uh just to quickly go over the

00:10:58,480 --> 00:11:02,880
transition to postgres it was

00:11:00,560 --> 00:11:04,880
uh it was actually a big deal for us

00:11:02,880 --> 00:11:07,839
after so many years of relying on oracle

00:11:04,880 --> 00:11:08,320
so heavily and their support contracts

00:11:07,839 --> 00:11:11,279
uh

00:11:08,320 --> 00:11:12,240
but uh in preparation for the switch we

00:11:11,279 --> 00:11:14,160
needed to make sure

00:11:12,240 --> 00:11:15,440
we had worked out uh whatever support

00:11:14,160 --> 00:11:17,920
contracts we needed

00:11:15,440 --> 00:11:19,519
for postgres and uh had a solid backup

00:11:17,920 --> 00:11:21,120
and restore strategy

00:11:19,519 --> 00:11:24,399
and had performance and health

00:11:21,120 --> 00:11:24,399
monitoring tools in place

00:11:24,800 --> 00:11:29,200
and as i just mentioned we rely on a

00:11:27,519 --> 00:11:31,120
number of custom-built tools for

00:11:29,200 --> 00:11:32,959
interacting with opencue

00:11:31,120 --> 00:11:34,399
most of these were actually built under

00:11:32,959 --> 00:11:35,760
q3

00:11:34,399 --> 00:11:39,040
but luckily porting them was just a

00:11:35,760 --> 00:11:40,720
matter of updating api calls

00:11:39,040 --> 00:11:42,399
and while these are all tools that are

00:11:40,720 --> 00:11:43,040
internal to image works they should

00:11:42,399 --> 00:11:45,120
illustrate

00:11:43,040 --> 00:11:47,360
how much is possible with the built-in

00:11:45,120 --> 00:11:49,519
frameworks whether it comes to

00:11:47,360 --> 00:11:50,560
building pipelines or just retrieving

00:11:49,519 --> 00:11:53,680
useful information

00:11:50,560 --> 00:11:56,399
about rendering progress in a way that's

00:11:53,680 --> 00:11:58,240
easy to scale and support a render farm

00:11:56,399 --> 00:12:00,800
on the order of hundreds of thousands of

00:11:58,240 --> 00:12:00,800
processors

00:12:02,639 --> 00:12:07,920
in open queue job submission is done via

00:12:05,680 --> 00:12:08,639
outline files which describe the job in

00:12:07,920 --> 00:12:10,560
full detail

00:12:08,639 --> 00:12:12,240
including the tasks to be performed the

00:12:10,560 --> 00:12:14,240
arrangement into layers

00:12:12,240 --> 00:12:16,720
and any necessary dependencies to

00:12:14,240 --> 00:12:18,720
dictate execution order

00:12:16,720 --> 00:12:20,639
these outline files can be composed in

00:12:18,720 --> 00:12:22,639
either xml or yaml

00:12:20,639 --> 00:12:25,120
of course neither of these two formats

00:12:22,639 --> 00:12:26,880
lends itself to the amount of data entry

00:12:25,120 --> 00:12:29,360
necessary

00:12:26,880 --> 00:12:30,959
for a large rendering pipeline but

00:12:29,360 --> 00:12:33,920
fortunately

00:12:30,959 --> 00:12:35,040
there is openq includes the framework pi

00:12:33,920 --> 00:12:36,560
outline

00:12:35,040 --> 00:12:38,480
which wraps around those built-in

00:12:36,560 --> 00:12:40,399
outline specifications

00:12:38,480 --> 00:12:42,240
allowing rendering jobs to be created

00:12:40,399 --> 00:12:44,160
programmatically

00:12:42,240 --> 00:12:45,920
in fact it's it's actually very rare for

00:12:44,160 --> 00:12:48,880
a user to need to manipulate those

00:12:45,920 --> 00:12:51,279
outline files directly

00:12:48,880 --> 00:12:53,120
describing and composing render jobs

00:12:51,279 --> 00:12:55,200
programmatically then also opens the

00:12:53,120 --> 00:12:57,440
door to significant automation

00:12:55,200 --> 00:13:00,720
especially when it comes to integrating

00:12:57,440 --> 00:13:00,720
with existing pipelines

00:13:02,000 --> 00:13:06,160
at imageworks we've leveraged this

00:13:04,959 --> 00:13:07,839
advantage into

00:13:06,160 --> 00:13:09,600
custom uis actually for most of our

00:13:07,839 --> 00:13:12,959
dcc's

00:13:09,600 --> 00:13:12,959
here's an example from nuke

00:13:17,279 --> 00:13:23,279
and because we were oh

00:13:20,639 --> 00:13:25,440
and uh to oh and to elaborate a little

00:13:23,279 --> 00:13:26,639
bit more here's houdini uh this is a

00:13:25,440 --> 00:13:29,279
standard node graph it should look

00:13:26,639 --> 00:13:29,279
pretty familiar

00:13:32,160 --> 00:13:35,440
and uh because we're able to integrate

00:13:34,880 --> 00:13:38,639
job

00:13:35,440 --> 00:13:40,079
submission uh so easily with houdini uh

00:13:38,639 --> 00:13:41,680
something like this where you have

00:13:40,079 --> 00:13:44,160
elaborate node graphs

00:13:41,680 --> 00:13:45,440
uh those can be easily translated into

00:13:44,160 --> 00:13:48,880
uh cue jobs

00:13:45,440 --> 00:13:49,920
uh for instance in this case each node

00:13:48,880 --> 00:13:51,920
that you're seeing

00:13:49,920 --> 00:13:54,240
in the node graph becomes a separate

00:13:51,920 --> 00:13:56,240
layer

00:13:54,240 --> 00:13:58,480
and and then the flow between the nodes

00:13:56,240 --> 00:14:03,839
is translated into layer dependencies

00:13:58,480 --> 00:14:03,839
in the cue job itself

00:14:05,199 --> 00:14:09,199
besides pi outline another area where

00:14:07,760 --> 00:14:11,519
we've been able to use the

00:14:09,199 --> 00:14:13,440
the python api to our advantage is in

00:14:11,519 --> 00:14:15,680
queue monitoring tools

00:14:13,440 --> 00:14:16,880
these are crucial for ensuring render

00:14:15,680 --> 00:14:20,639
farm efficiency

00:14:16,880 --> 00:14:23,199
tracking progress and spotting problems

00:14:20,639 --> 00:14:24,639
the apis provide real-time information

00:14:23,199 --> 00:14:26,959
pulled directly from the backend

00:14:24,639 --> 00:14:30,000
database

00:14:26,959 --> 00:14:33,839
the apis for high-level job info

00:14:30,000 --> 00:14:35,120
are also very lightweight which means

00:14:33,839 --> 00:14:37,120
thousands of jobs can actually be

00:14:35,120 --> 00:14:39,920
queried in a matter of seconds

00:14:37,120 --> 00:14:41,360
this also makes extracting data insights

00:14:39,920 --> 00:14:43,440
from open cue

00:14:41,360 --> 00:14:44,560
very easy we have a number of relatively

00:14:43,440 --> 00:14:46,480
simple scripts

00:14:44,560 --> 00:14:47,600
and other automations that record the

00:14:46,480 --> 00:14:51,199
goings-on

00:14:47,600 --> 00:14:51,199
of queue at all times

00:14:52,560 --> 00:14:56,079
here's an example of one of the

00:14:54,240 --> 00:14:57,680
web-based monitoring tools that we built

00:14:56,079 --> 00:15:00,399
for q3

00:14:57,680 --> 00:15:02,079
it will display all the cue jobs for a

00:15:00,399 --> 00:15:04,240
given substring match

00:15:02,079 --> 00:15:06,639
and then gives you vital stats about

00:15:04,240 --> 00:15:06,639
each one

00:15:08,880 --> 00:15:13,839
another extremely useful way of tracking

00:15:11,279 --> 00:15:16,560
q data is with time series reporting

00:15:13,839 --> 00:15:17,040
for example we have several tools built

00:15:16,560 --> 00:15:20,240
around

00:15:17,040 --> 00:15:20,240
rrd and grafana

00:15:21,760 --> 00:15:30,639
here's a grafana page report showing

00:15:26,240 --> 00:15:30,639
show level frame stats and course stats

00:15:32,480 --> 00:15:37,199
and here's one reporting department

00:15:34,320 --> 00:15:39,759
level frame in course stats

00:15:37,199 --> 00:15:40,320
and for us at imageworks data insights

00:15:39,759 --> 00:15:42,480
like this

00:15:40,320 --> 00:15:44,160
are absolutely critical for projecting

00:15:42,480 --> 00:15:45,839
future render farm needs

00:15:44,160 --> 00:15:47,279
especially in the long term since they

00:15:45,839 --> 00:15:49,199
can be correlated with

00:15:47,279 --> 00:15:51,680
past current and future production

00:15:49,199 --> 00:15:51,680
workload

00:15:53,519 --> 00:16:00,160
and uh finally here's some rrd

00:15:56,800 --> 00:16:01,680
examples that we built originally for q3

00:16:00,160 --> 00:16:03,680
and those are reporting cluster level

00:16:01,680 --> 00:16:04,880
stats for monitoring the overall health

00:16:03,680 --> 00:16:07,600
of the system

00:16:04,880 --> 00:16:08,399
uh which is obviously very important as

00:16:07,600 --> 00:16:11,440
the whole thing

00:16:08,399 --> 00:16:14,320
scales up uh and moves into the cloud

00:16:11,440 --> 00:16:14,959
and uh now i will hand off to diego

00:16:14,320 --> 00:16:16,639
about

00:16:14,959 --> 00:16:23,839
some of the development efforts we've

00:16:16,639 --> 00:16:23,839
been doing at imageworks

00:16:23,920 --> 00:16:27,680
hi everyone i'm diego i work at

00:16:25,759 --> 00:16:32,639
imageworks with man

00:16:27,680 --> 00:16:35,440
and let's get control

00:16:32,639 --> 00:16:36,240
and as been mentioned we were running

00:16:35,440 --> 00:16:38,800
open queue

00:16:36,240 --> 00:16:40,480
on oracle before as oracle was the

00:16:38,800 --> 00:16:44,079
database we were used to

00:16:40,480 --> 00:16:46,560
and the q3 which originated looking q

00:16:44,079 --> 00:16:48,480
used to run an oracle but it was part of

00:16:46,560 --> 00:16:50,959
our plan to migrate to postgres

00:16:48,480 --> 00:16:51,839
and before pushing the change to

00:16:50,959 --> 00:16:54,880
prediction

00:16:51,839 --> 00:16:57,040
we really wanted to be sure that

00:16:54,880 --> 00:16:58,880
the plus response resolution with open

00:16:57,040 --> 00:16:59,440
queue will handle the load that we used

00:16:58,880 --> 00:17:02,079
to handle

00:16:59,440 --> 00:17:02,800
on oracle before and for that we decided

00:17:02,079 --> 00:17:06,559
to go with

00:17:02,800 --> 00:17:07,520
a stress test just to assess the booking

00:17:06,559 --> 00:17:10,240
capacity

00:17:07,520 --> 00:17:11,039
running the solution of postgres and

00:17:10,240 --> 00:17:13,439
just to go

00:17:11,039 --> 00:17:14,799
to have an idea of the hardware that

00:17:13,439 --> 00:17:17,360
we're running on

00:17:14,799 --> 00:17:18,959
for the server side that you bought we

00:17:17,360 --> 00:17:22,559
were running on previums

00:17:18,959 --> 00:17:24,799
with 12 gigabytes of ram each and

00:17:22,559 --> 00:17:26,640
those vms will be on under a load

00:17:24,799 --> 00:17:28,720
balancer so they will be getting all the

00:17:26,640 --> 00:17:31,840
load distributed

00:17:28,720 --> 00:17:33,520
and for the hosts the rendered form you

00:17:31,840 --> 00:17:37,200
are running around 63

00:17:33,520 --> 00:17:38,400
000 cores and for

00:17:37,200 --> 00:17:41,679
those who are running on bare metal

00:17:38,400 --> 00:17:45,120
machines and for the database we have

00:17:41,679 --> 00:17:46,080
two new bare metal machines with 16

00:17:45,120 --> 00:17:49,039
cores each

00:17:46,080 --> 00:17:50,960
and 90 gigabytes of ram and they were

00:17:49,039 --> 00:17:52,160
running on a monster standby mode so

00:17:50,960 --> 00:17:54,480
only one of the

00:17:52,160 --> 00:17:56,080
hosts would be getting the the hits the

00:17:54,480 --> 00:18:00,160
other one would just come up

00:17:56,080 --> 00:18:02,559
if the the master one fails

00:18:00,160 --> 00:18:04,080
and to give an idea of the kind of jobs

00:18:02,559 --> 00:18:06,640
we were running we were running

00:18:04,080 --> 00:18:08,400
one to two minute jobs and they were

00:18:06,640 --> 00:18:10,320
just simulation jobs

00:18:08,400 --> 00:18:12,640
and the the way the tasks would work you

00:18:10,320 --> 00:18:14,960
will start to book a queue slowly

00:18:12,640 --> 00:18:15,679
and ramp up up to a point where i will

00:18:14,960 --> 00:18:18,880
try to book

00:18:15,679 --> 00:18:22,480
as many jobs as it will be possible

00:18:18,880 --> 00:18:26,320
and on the biggest task we ran we had

00:18:22,480 --> 00:18:29,840
120 000 jobs and we were able to run

00:18:26,320 --> 00:18:33,760
63 000 jobs at the same time

00:18:29,840 --> 00:18:35,919
and if you remember on the last slide

00:18:33,760 --> 00:18:37,840
this is the amount of hosts we have so

00:18:35,919 --> 00:18:38,799
we were able to fully book the whole

00:18:37,840 --> 00:18:41,760
queue

00:18:38,799 --> 00:18:42,160
uh running jobs on this test and with

00:18:41,760 --> 00:18:45,520
the

00:18:42,160 --> 00:18:48,640
this big test we were only using

00:18:45,520 --> 00:18:51,600
18 of them the memory of the server

00:18:48,640 --> 00:18:53,200
big times and 21 of the memory of the

00:18:51,600 --> 00:18:56,080
database

00:18:53,200 --> 00:18:56,799
and for the tasks we what we ran a set

00:18:56,080 --> 00:19:00,320
of tests

00:18:56,799 --> 00:19:03,919
ranging from five jobs on a test

00:19:00,320 --> 00:19:05,679
up to 120 000 jobs and the idea with

00:19:03,919 --> 00:19:08,400
that is that we'll be able to

00:19:05,679 --> 00:19:09,280
to have a curve on how the system will

00:19:08,400 --> 00:19:11,440
behave

00:19:09,280 --> 00:19:12,799
overload so we can see how the system is

00:19:11,440 --> 00:19:16,000
behaving

00:19:12,799 --> 00:19:18,400
under low load and under heavy load

00:19:16,000 --> 00:19:19,360
and as we can see it's free linear which

00:19:18,400 --> 00:19:22,080
is a good thing

00:19:19,360 --> 00:19:23,039
and this means that open q didn't get in

00:19:22,080 --> 00:19:25,120
the way so

00:19:23,039 --> 00:19:28,559
it will handle distributing the jobs as

00:19:25,120 --> 00:19:31,039
fast as it's possible to distribute

00:19:28,559 --> 00:19:31,039
and

00:19:32,720 --> 00:19:36,720
one good news that we had as brian

00:19:34,559 --> 00:19:37,520
mentioned we are finally on beginner

00:19:36,720 --> 00:19:40,880
stage or

00:19:37,520 --> 00:19:43,440
open key on windows and

00:19:40,880 --> 00:19:44,080
we are clearly on image works running

00:19:43,440 --> 00:19:47,280
windows

00:19:44,080 --> 00:19:49,440
hosts one open q and production

00:19:47,280 --> 00:19:51,360
and what this means that we are able to

00:19:49,440 --> 00:19:54,240
have one single server

00:19:51,360 --> 00:19:56,799
that is running on linux managing jobs

00:19:54,240 --> 00:19:58,799
that run on windows or on linux

00:19:56,799 --> 00:20:00,960
so we can have unreal running on windows

00:19:58,799 --> 00:20:02,000
and at the same time have new to running

00:20:00,960 --> 00:20:04,240
on linux

00:20:02,000 --> 00:20:06,559
for the same show and having the server

00:20:04,240 --> 00:20:11,360
distributing the jobs based on the

00:20:06,559 --> 00:20:11,360
os that the job is tagged to run on

00:20:12,480 --> 00:20:16,240
and as we are talking about windows now

00:20:14,799 --> 00:20:19,679
i'll pass the word to

00:20:16,240 --> 00:20:23,039
aoi from microsoft

00:20:19,679 --> 00:20:26,080
thanks diego yeah so my name is

00:20:23,039 --> 00:20:28,320
owen bailey i work at microsoft let me

00:20:26,080 --> 00:20:31,280
just uh

00:20:28,320 --> 00:20:31,280
take my control

00:20:32,840 --> 00:20:39,039
okay and i'm on the

00:20:35,679 --> 00:20:42,720
azure storage media and edge team

00:20:39,039 --> 00:20:44,559
and i'm gonna talk about uh deploying

00:20:42,720 --> 00:20:45,280
open queue on azure this is gonna be a

00:20:44,559 --> 00:20:46,720
little bit of a

00:20:45,280 --> 00:20:48,960
call back to two things that brian

00:20:46,720 --> 00:20:49,840
mentioned actually so how can you make

00:20:48,960 --> 00:20:53,360
it easier

00:20:49,840 --> 00:20:56,240
to deploy an environment and also

00:20:53,360 --> 00:20:56,240
make use of the client

00:20:56,640 --> 00:21:00,960
and very briefly i'm just going to

00:21:00,320 --> 00:21:03,840
mention

00:21:00,960 --> 00:21:05,640
one thing about this so in the last week

00:21:03,840 --> 00:21:08,080
we have released

00:21:05,640 --> 00:21:11,600
opensource.microsoft.com it's our new

00:21:08,080 --> 00:21:13,200
central hub central location for the

00:21:11,600 --> 00:21:13,760
thousands of open source projects that

00:21:13,200 --> 00:21:17,919
we

00:21:13,760 --> 00:21:19,760
both are releasing ourselves and support

00:21:17,919 --> 00:21:21,200
and it just is a great place to go and

00:21:19,760 --> 00:21:22,559
see information about

00:21:21,200 --> 00:21:25,919
the philosophy of open source at

00:21:22,559 --> 00:21:30,240
microsoft which may be different to

00:21:25,919 --> 00:21:33,840
or you may have heard in the past

00:21:30,240 --> 00:21:35,520
okay so the the number one location

00:21:33,840 --> 00:21:37,919
uh that we're going to go for this demo

00:21:35,520 --> 00:21:41,120
is aka dot ms

00:21:37,919 --> 00:21:42,320
forward slash open cue that's a github

00:21:41,120 --> 00:21:44,159
repository

00:21:42,320 --> 00:21:46,240
there's dozens of different examples in

00:21:44,159 --> 00:21:47,520
there that are all media focused

00:21:46,240 --> 00:21:50,080
but that link is going to bring you

00:21:47,520 --> 00:21:53,200
straight to the open cue specific

00:21:50,080 --> 00:21:54,880
examples so let me

00:21:53,200 --> 00:21:58,000
just go straight over there now that's

00:21:54,880 --> 00:22:01,360
probably the easiest

00:21:58,000 --> 00:22:01,360
and we'll reconnect that

00:22:02,240 --> 00:22:09,840
okay so in here

00:22:05,840 --> 00:22:12,880
let me go back we have

00:22:09,840 --> 00:22:15,280
two different open cue examples

00:22:12,880 --> 00:22:17,280
one is if you already have your data

00:22:15,280 --> 00:22:19,520
stored into in an azure

00:22:17,280 --> 00:22:21,200
blob account which is very useful if you

00:22:19,520 --> 00:22:23,039
don't want to be downloading large range

00:22:21,200 --> 00:22:24,880
of assets over and over again

00:22:23,039 --> 00:22:26,559
but we're going to start on this new

00:22:24,880 --> 00:22:29,360
storage one so this is

00:22:26,559 --> 00:22:30,000
where you have no environment setup in

00:22:29,360 --> 00:22:33,200
azure at all

00:22:30,000 --> 00:22:34,559
no data at all and we have a

00:22:33,200 --> 00:22:35,600
you know high level overview of the

00:22:34,559 --> 00:22:37,039
architecture for what we're going to

00:22:35,600 --> 00:22:39,600
deploy now and how we're going to go

00:22:37,039 --> 00:22:42,159
about deploying this

00:22:39,600 --> 00:22:43,200
so we're going to end up with a network

00:22:42,159 --> 00:22:47,039
a virtual network

00:22:43,200 --> 00:22:48,559
with multiple subnets uh one for our

00:22:47,039 --> 00:22:51,200
openq server

00:22:48,559 --> 00:22:53,760
that will only have access to uh two

00:22:51,200 --> 00:22:55,440
ports so there'll be ssh and one for a

00:22:53,760 --> 00:22:58,400
vnc connection

00:22:55,440 --> 00:22:58,799
we're gonna have our render nodes um and

00:22:58,400 --> 00:23:00,480
our

00:22:58,799 --> 00:23:02,320
caching cluster which will be connected

00:23:00,480 --> 00:23:05,120
to our azure blob storage

00:23:02,320 --> 00:23:07,280
so azure blob storage is you know it's

00:23:05,120 --> 00:23:08,400
it's low cost it's durable

00:23:07,280 --> 00:23:10,320
but it's not going to give you the

00:23:08,400 --> 00:23:13,200
performance you need to be feeding

00:23:10,320 --> 00:23:15,280
data to hundreds of different node

00:23:13,200 --> 00:23:17,679
instances so that's why we have a cache

00:23:15,280 --> 00:23:17,679
as well

00:23:18,480 --> 00:23:21,919
so here are the deployment instructions

00:23:20,159 --> 00:23:23,760
we're going to use the azure cloud shell

00:23:21,919 --> 00:23:26,720
so let me just

00:23:23,760 --> 00:23:27,280
split these ice oh no that's not what i

00:23:26,720 --> 00:23:29,840
want to do

00:23:27,280 --> 00:23:29,840
there we go

00:23:30,480 --> 00:23:37,840
ah dear

00:23:42,240 --> 00:23:44,720
go on

00:23:48,840 --> 00:23:53,120
okay

00:23:50,000 --> 00:23:54,960
okay so

00:23:53,120 --> 00:23:56,640
the readme contains all the steps that

00:23:54,960 --> 00:23:59,520
we're going to go through now

00:23:56,640 --> 00:24:01,679
so the azure cloud shell is a bash and

00:23:59,520 --> 00:24:03,919
powershell environment if you choose

00:24:01,679 --> 00:24:05,679
uh it has your azure cli already built

00:24:03,919 --> 00:24:07,760
in it has terraform and a couple of

00:24:05,679 --> 00:24:09,840
other tools we're going to use

00:24:07,760 --> 00:24:11,520
um second step make sure you're in the

00:24:09,840 --> 00:24:13,440
right subscription and azure i already

00:24:11,520 --> 00:24:15,600
know i am in my account here

00:24:13,440 --> 00:24:16,640
uh accept the terms and conditions for

00:24:15,600 --> 00:24:18,720
the fxt

00:24:16,640 --> 00:24:20,640
so the fxd is the the caching device

00:24:18,720 --> 00:24:22,880
that we're going to use

00:24:20,640 --> 00:24:24,080
make sure you have the terraform

00:24:22,880 --> 00:24:27,760
provider

00:24:24,080 --> 00:24:31,279
installed into your client shell

00:24:27,760 --> 00:24:34,480
again i already have that here

00:24:31,279 --> 00:24:37,760
so we can see it's in terraform here

00:24:34,480 --> 00:24:40,480
that is the provider for the avira vfxt

00:24:37,760 --> 00:24:43,840
and hpc cache so that's open source

00:24:40,480 --> 00:24:47,279
again it's part of the same repository

00:24:43,840 --> 00:25:01,840
so now let's

00:24:47,279 --> 00:25:01,840
clone this repository

00:25:10,159 --> 00:25:15,520
and once that is done we'll set up the

00:25:14,080 --> 00:25:18,240
sparse checkout just to make sure we

00:25:15,520 --> 00:25:29,840
only have the files that we

00:25:18,240 --> 00:25:29,840
are interested in right now

00:25:32,480 --> 00:25:34,799
okay

00:25:40,000 --> 00:25:44,960
okay so now let's take a look at that

00:25:43,039 --> 00:25:45,919
terraform file we can open it up in the

00:25:44,960 --> 00:25:48,960
code editor

00:25:45,919 --> 00:25:50,240
directly in the cloud shell

00:25:48,960 --> 00:25:52,240
let's make it a little bit bigger for a

00:25:50,240 --> 00:25:54,000
minus uh

00:25:52,240 --> 00:25:55,279
i'm not going to go into the details of

00:25:54,000 --> 00:25:56,640
everything that's in this terraform

00:25:55,279 --> 00:25:58,240
script

00:25:56,640 --> 00:26:01,520
but for now there's really just a few

00:25:58,240 --> 00:26:04,000
things that we need to assess

00:26:01,520 --> 00:26:05,039
to make sure that we can deploy this so

00:26:04,000 --> 00:26:11,840
we need to get

00:26:05,039 --> 00:26:11,840
my ssh key

00:26:16,400 --> 00:26:19,360
we're going to deploy

00:26:19,440 --> 00:26:27,679
let's say let's say we deploy 16 nodes

00:26:24,640 --> 00:26:30,400
of 64 cores each

00:26:27,679 --> 00:26:31,919
so we'll get over a thousand cores and

00:26:30,400 --> 00:26:32,640
that's it everything else we can leave

00:26:31,919 --> 00:26:36,960
as the

00:26:32,640 --> 00:26:40,240
defaults so we'll initialize

00:26:36,960 --> 00:26:42,240
our terraform environment

00:26:40,240 --> 00:26:43,919
this is going to download any modules

00:26:42,240 --> 00:26:46,559
that are referenced in here

00:26:43,919 --> 00:26:47,840
it's going to make sure that the hpc

00:26:46,559 --> 00:26:50,880
cache provider

00:26:47,840 --> 00:26:53,760
is accessible

00:26:50,880 --> 00:26:53,760
and uh

00:26:54,320 --> 00:26:56,640
oh

00:26:59,440 --> 00:27:02,640
that's always fun isn't this

00:27:04,960 --> 00:27:12,880
well luckily i have a backup plan

00:27:10,080 --> 00:27:12,880
so we can

00:27:14,400 --> 00:27:22,480
go over here

00:27:20,880 --> 00:27:24,960
so it looks like i may run out of space

00:27:22,480 --> 00:27:24,960
in my

00:27:25,039 --> 00:27:35,840
environment um

00:27:29,760 --> 00:27:35,840
so this one's already initialized um

00:27:40,640 --> 00:27:44,000
so it's already initialized the

00:27:42,799 --> 00:27:47,120
terraform

00:27:44,000 --> 00:27:50,320
uh modules and scripts or

00:27:47,120 --> 00:27:51,360
very end and the provider is already

00:27:50,320 --> 00:27:54,399
there

00:27:51,360 --> 00:27:58,720
and then it's a matter of terraform

00:27:54,399 --> 00:27:59,919
apply auto approve

00:27:58,720 --> 00:28:02,320
and that's going to make sure that

00:27:59,919 --> 00:28:03,600
everything is deployed as it should be

00:28:02,320 --> 00:28:04,720
because i've already deployed this one

00:28:03,600 --> 00:28:05,840
because we're not going to wait 20

00:28:04,720 --> 00:28:09,840
minutes it's saying

00:28:05,840 --> 00:28:09,840
yes everything is the way it should be

00:28:11,600 --> 00:28:16,960
so we will take a look at what's being

00:28:15,200 --> 00:28:18,720
deployed in a minute

00:28:16,960 --> 00:28:20,480
but i really want to talk about what is

00:28:18,720 --> 00:28:22,640
going on in that terraform script

00:28:20,480 --> 00:28:22,640
so

00:28:24,320 --> 00:28:30,559
the terraform script itself is as i said

00:28:27,520 --> 00:28:33,120
is deploying your network it's deploying

00:28:30,559 --> 00:28:34,480
storage accounts it's deploying the

00:28:33,120 --> 00:28:39,200
cache

00:28:34,480 --> 00:28:39,200
most of these are either modules or

00:28:39,679 --> 00:28:46,399
using the provider and then the

00:28:43,360 --> 00:28:50,000
open cue is

00:28:46,399 --> 00:28:53,440
the the cubot here it's simply a vm

00:28:50,000 --> 00:28:56,720
where we use cloudiness to

00:28:53,440 --> 00:28:56,720
set up all the various

00:28:56,799 --> 00:29:01,760
various installs that we need so i want

00:28:58,480 --> 00:29:04,320
to take a look in there as well

00:29:01,760 --> 00:29:04,880
let's make it a little bit bigger um i'd

00:29:04,320 --> 00:29:07,120
love to get

00:29:04,880 --> 00:29:08,399
any feedback on how to make this better

00:29:07,120 --> 00:29:10,559
as well so for example

00:29:08,399 --> 00:29:12,320
at low hanging fruit at the moment this

00:29:10,559 --> 00:29:14,880
is all installed on one machine

00:29:12,320 --> 00:29:16,399
for for open queue so like the database

00:29:14,880 --> 00:29:19,440
exists on the same

00:29:16,399 --> 00:29:21,279
uh the same machine uh you know next

00:29:19,440 --> 00:29:22,320
steps is definitely to split that eight

00:29:21,279 --> 00:29:25,279
into its own

00:29:22,320 --> 00:29:27,840
uh platform service so that it it can be

00:29:25,279 --> 00:29:27,840
more performant

00:29:28,320 --> 00:29:31,679
uh one other thing that's sort of

00:29:30,080 --> 00:29:33,440
interesting and here i mean most of

00:29:31,679 --> 00:29:34,960
these steps are the the standard steps

00:29:33,440 --> 00:29:35,760
from the documentation for how you

00:29:34,960 --> 00:29:38,240
install

00:29:35,760 --> 00:29:39,440
uh it's called cubos and soul cue gui

00:29:38,240 --> 00:29:43,120
excuse miss

00:29:39,440 --> 00:29:43,760
pi outline um but it's maintaining the

00:29:43,120 --> 00:29:47,600
cache

00:29:43,760 --> 00:29:50,240
so all of the uh the nodes both the qbos

00:29:47,600 --> 00:29:50,880
vm and the render nodes are going to

00:29:50,240 --> 00:29:55,600
mount

00:29:50,880 --> 00:29:58,880
one of the vms from the caching cluster

00:29:55,600 --> 00:30:00,080
and so we'll pop over here so we use two

00:29:58,880 --> 00:30:03,440
different techniques

00:30:00,080 --> 00:30:05,120
in this demo so one is cloudiness to set

00:30:03,440 --> 00:30:07,360
up the eq boss

00:30:05,120 --> 00:30:10,240
and then this is using a shell script

00:30:07,360 --> 00:30:11,760
instead that is

00:30:10,240 --> 00:30:13,840
it's actually downloaded and stored in

00:30:11,760 --> 00:30:15,520
the cache so that all of the render

00:30:13,840 --> 00:30:19,440
nodes as they come up can can pull down

00:30:15,520 --> 00:30:22,320
the script and deploy it as needed

00:30:19,440 --> 00:30:23,919
so we make sure that we have the cache

00:30:22,320 --> 00:30:26,480
maintenance

00:30:23,919 --> 00:30:27,520
and then this is these are the steps

00:30:26,480 --> 00:30:30,000
that are more interesting and more

00:30:27,520 --> 00:30:33,200
specific to this demonstration so

00:30:30,000 --> 00:30:34,000
we install pbrt install the requirements

00:30:33,200 --> 00:30:36,159
for that

00:30:34,000 --> 00:30:37,360
and the reason that we use pbrt here is

00:30:36,159 --> 00:30:41,440
because we're using the

00:30:37,360 --> 00:30:45,360
disney moana islands scene and there are

00:30:41,440 --> 00:30:47,600
um frames ready to render with pbrt

00:30:45,360 --> 00:30:48,799
uh there's samples here for if that was

00:30:47,600 --> 00:30:50,960
already in your cache

00:30:48,799 --> 00:30:53,440
so using the pre-existing storage i have

00:30:50,960 --> 00:30:56,480
a pre-built version of pbrt

00:30:53,440 --> 00:30:59,840
and yum if you're using using

00:30:56,480 --> 00:31:02,320
yum-based installs and then the same is

00:30:59,840 --> 00:31:04,799
true down here for setting up our qd

00:31:02,320 --> 00:31:05,760
and making sure that it connects back to

00:31:04,799 --> 00:31:08,480
the

00:31:05,760 --> 00:31:10,640
cubot which we'll go take a quick look

00:31:08,480 --> 00:31:12,720
at now

00:31:10,640 --> 00:31:13,840
so this is uh windows terminal by the

00:31:12,720 --> 00:31:17,200
way which if you haven't seen

00:31:13,840 --> 00:31:19,200
is i i think is great i've got my ubuntu

00:31:17,200 --> 00:31:21,760
powershell command prompt and i can add

00:31:19,200 --> 00:31:23,840
azure cloud shell and other

00:31:21,760 --> 00:31:25,600
linux distributions through windows

00:31:23,840 --> 00:31:28,640
subsystem for linux 2 which is

00:31:25,600 --> 00:31:32,240
kind of great so let me

00:31:28,640 --> 00:31:35,279
set up an ssh tunnel

00:31:32,240 --> 00:31:35,279
i'm going to connect

00:31:35,360 --> 00:31:38,080
to the machine

00:31:38,799 --> 00:31:41,039
okay

00:31:42,080 --> 00:31:47,840
and let me just make that a little bit

00:31:45,279 --> 00:31:47,840
larger

00:31:49,760 --> 00:31:56,159
okay so here we have

00:31:53,679 --> 00:31:56,960
the different nodes that i started up

00:31:56,159 --> 00:31:59,760
earlier

00:31:56,960 --> 00:32:00,159
i started one job earlier already this

00:31:59,760 --> 00:32:04,240
is

00:32:00,159 --> 00:32:04,240
one of the 4k frames

00:32:04,880 --> 00:32:10,320
so i just started one but we can start

00:32:07,840 --> 00:32:10,320
another

00:32:12,960 --> 00:32:15,840
so we'll

00:32:17,600 --> 00:32:21,120
just submit another job obviously it's

00:32:19,760 --> 00:32:21,919
just going to appear here be picked up

00:32:21,120 --> 00:32:29,679
by one of the

00:32:21,919 --> 00:32:32,480
waiting nodes

00:32:29,679 --> 00:32:33,440
i have the completed frames just for

00:32:32,480 --> 00:32:36,960
convenience

00:32:33,440 --> 00:32:36,960
obviously all the logs are available

00:32:37,039 --> 00:32:42,399
and here we have the 4k scene

00:32:40,559 --> 00:32:44,720
it's not going to look amazing obviously

00:32:42,399 --> 00:32:46,240
on a remote connection and then streamed

00:32:44,720 --> 00:32:48,559
as well

00:32:46,240 --> 00:32:49,679
we have several other frames available

00:32:48,559 --> 00:32:53,760
from that same

00:32:49,679 --> 00:32:53,760
moana island scene collection

00:32:54,480 --> 00:32:59,519
so any any questions please feel free to

00:32:57,840 --> 00:33:02,000
share the mouse put them in the q a

00:32:59,519 --> 00:33:03,120
put them in the slack channel and that

00:33:02,000 --> 00:33:05,760
is

00:33:03,120 --> 00:33:08,480
open cue running on azure scale this up

00:33:05,760 --> 00:33:11,840
as large as you want

00:33:08,480 --> 00:33:11,840
thank you very much

00:33:13,120 --> 00:33:19,760
awesome thank you that looks great

00:33:16,480 --> 00:33:22,480
uh so cool so we can move to q

00:33:19,760 --> 00:33:23,760
a now uh yeah as owen said drop in the q

00:33:22,480 --> 00:33:26,320
a window

00:33:23,760 --> 00:33:28,240
and get to them or yeah feel free to

00:33:26,320 --> 00:33:31,760
also visit our slack at any

00:33:28,240 --> 00:33:34,080
time you know we're always always there

00:33:31,760 --> 00:33:35,279
and uh happy to get to get to your

00:33:34,080 --> 00:33:38,559
questions then

00:33:35,279 --> 00:33:43,279
um so yeah so we've got a few

00:33:38,559 --> 00:33:45,039
questions in the uh the q a right now um

00:33:43,279 --> 00:33:46,799
so let's start with this first one uh

00:33:45,039 --> 00:33:47,360
are there any planned integrations

00:33:46,799 --> 00:33:50,480
between

00:33:47,360 --> 00:33:53,600
open queue and any bi or data analytics

00:33:50,480 --> 00:33:56,320
toolsets visualization tools

00:33:53,600 --> 00:33:57,120
um yeah so i think greg actually i think

00:33:56,320 --> 00:33:58,720
you were maybe

00:33:57,120 --> 00:33:59,919
the most recent person to be taking a

00:33:58,720 --> 00:34:00,880
look at some of this i will say that

00:33:59,919 --> 00:34:03,519
there's no

00:34:00,880 --> 00:34:04,799
there's uh nothing like that is i think

00:34:03,519 --> 00:34:06,720
super high priority on the

00:34:04,799 --> 00:34:08,079
like the project quad road map right now

00:34:06,720 --> 00:34:10,079
though we have definitely

00:34:08,079 --> 00:34:11,280
kicked around some some ideas about the

00:34:10,079 --> 00:34:13,200
best uh

00:34:11,280 --> 00:34:15,440
best tools that we can integrate with uh

00:34:13,200 --> 00:34:18,639
in the future

00:34:15,440 --> 00:34:19,040
yeah exactly i think um one of the keys

00:34:18,639 --> 00:34:21,280
here

00:34:19,040 --> 00:34:23,760
is i don't we don't necessarily have any

00:34:21,280 --> 00:34:27,280
specific integrations planned

00:34:23,760 --> 00:34:28,800
but um i what we want to really do is

00:34:27,280 --> 00:34:30,800
expose the hooks

00:34:28,800 --> 00:34:32,159
so that way you can create any

00:34:30,800 --> 00:34:34,320
integration you want

00:34:32,159 --> 00:34:35,679
to your analytics platform and really

00:34:34,320 --> 00:34:37,679
make it flexible

00:34:35,679 --> 00:34:39,599
so that way some of the the queueing

00:34:37,679 --> 00:34:41,919
decisions things like that uh

00:34:39,599 --> 00:34:43,119
some of the resource information that's

00:34:41,919 --> 00:34:46,480
flowing into

00:34:43,119 --> 00:34:46,480
openq right now and

00:34:47,119 --> 00:34:50,800
the same type of information that ben

00:34:49,040 --> 00:34:54,320
was showing scraping

00:34:50,800 --> 00:34:57,440
uh from the open cue db

00:34:54,320 --> 00:34:59,359
and uh piping into grafana and

00:34:57,440 --> 00:35:03,200
uh their analytics platform just making

00:34:59,359 --> 00:35:06,240
that easier to really access and get at

00:35:03,200 --> 00:35:09,599
um so that that's really the work

00:35:06,240 --> 00:35:11,920
that we have planned i would say yeah

00:35:09,599 --> 00:35:13,200
and definitely once we like when that

00:35:11,920 --> 00:35:15,839
does develop

00:35:13,200 --> 00:35:16,400
uh the ideas i think that we would uh

00:35:15,839 --> 00:35:18,240
you know

00:35:16,400 --> 00:35:20,000
because we're shipping uh like docker

00:35:18,240 --> 00:35:21,920
images of all the main

00:35:20,000 --> 00:35:23,760
components we would be able to basically

00:35:21,920 --> 00:35:25,520
release a version of the docker image

00:35:23,760 --> 00:35:25,920
that has like an example deployment here

00:35:25,520 --> 00:35:27,920
so

00:35:25,920 --> 00:35:29,599
you know probably something like grafana

00:35:27,920 --> 00:35:31,599
uh just that's set up to run alongside

00:35:29,599 --> 00:35:33,599
cubot or the database and

00:35:31,599 --> 00:35:37,200
uh you know give give folks something

00:35:33,599 --> 00:35:37,200
that they can build on from that

00:35:38,480 --> 00:35:43,680
um okay so

00:35:41,520 --> 00:35:44,560
let's see the next question is kind of

00:35:43,680 --> 00:35:46,400
related

00:35:44,560 --> 00:35:48,320
uh will any of the tools internal to

00:35:46,400 --> 00:35:49,040
image works make it into the open cue

00:35:48,320 --> 00:35:51,119
package

00:35:49,040 --> 00:35:52,240
um yeah i mean i will say in general

00:35:51,119 --> 00:35:54,400
that we've

00:35:52,240 --> 00:35:55,440
we've seen a bunch of uh stuff make its

00:35:54,400 --> 00:35:57,680
way back into the

00:35:55,440 --> 00:35:58,880
um the main open cube branch already and

00:35:57,680 --> 00:36:01,200
this has been mostly

00:35:58,880 --> 00:36:03,200
things like uh you know the window

00:36:01,200 --> 00:36:04,160
support and bug fixes and and stuff like

00:36:03,200 --> 00:36:08,240
that

00:36:04,160 --> 00:36:10,640
um i'm not sure if

00:36:08,240 --> 00:36:13,839
uh if band or diego you have anything

00:36:10,640 --> 00:36:13,839
specific you'd like to mention there

00:36:18,560 --> 00:36:21,200
yeah okay

00:36:24,800 --> 00:36:28,400
but yeah we're definitely always we're

00:36:26,400 --> 00:36:30,079
we're uh you know constantly kind of

00:36:28,400 --> 00:36:31,040
talking to image works to see what we

00:36:30,079 --> 00:36:33,200
can do to

00:36:31,040 --> 00:36:34,400
kind of uh if they come up with any cool

00:36:33,200 --> 00:36:38,079
stuff fold it back into the

00:36:34,400 --> 00:36:39,440
main branch and on our side everything

00:36:38,079 --> 00:36:41,839
that

00:36:39,440 --> 00:36:43,520
it's generic enough that we can share

00:36:41,839 --> 00:36:45,920
we'll definitely post to the open source

00:36:43,520 --> 00:36:45,920
version

00:36:48,800 --> 00:36:52,800
uh okay we've got let's see

00:36:53,520 --> 00:36:57,119
question uh it might be obvious to read

00:36:55,440 --> 00:36:59,280
the docs but how are licenses for

00:36:57,119 --> 00:37:01,040
applications and renderers solved right

00:36:59,280 --> 00:37:03,200
so uh so right now openq

00:37:01,040 --> 00:37:04,320
does not really do anything around uh

00:37:03,200 --> 00:37:06,400
licensing or

00:37:04,320 --> 00:37:08,240
around kind of managing the

00:37:06,400 --> 00:37:10,400
configuration of the render nodes uh

00:37:08,240 --> 00:37:11,760
it does rely or i guess the other big

00:37:10,400 --> 00:37:13,599
thing to mention there is the uh

00:37:11,760 --> 00:37:15,119
the file server like asset storage as

00:37:13,599 --> 00:37:18,079
well i think owen

00:37:15,119 --> 00:37:20,079
showed a way where you can uh use like

00:37:18,079 --> 00:37:22,640
uh of your vfxds to

00:37:20,079 --> 00:37:24,400
provide that but it is definitely a

00:37:22,640 --> 00:37:27,280
thing that users have to provide

00:37:24,400 --> 00:37:27,280
on their own right now

00:37:34,160 --> 00:37:38,320
so the question is uh does sony feel

00:37:36,320 --> 00:37:41,359
they've reached parity with q3

00:37:38,320 --> 00:37:42,960
on the show uh done on open cue so i'll

00:37:41,359 --> 00:37:45,520
answer that uh

00:37:42,960 --> 00:37:46,800
yeah in fact uh open queue i would say

00:37:45,520 --> 00:37:49,920
is already

00:37:46,800 --> 00:37:50,480
you know well beyond where q3 is the

00:37:49,920 --> 00:37:53,280
reason

00:37:50,480 --> 00:37:54,960
for our slow adoption of it has nothing

00:37:53,280 --> 00:37:56,320
to do with feature parity and everything

00:37:54,960 --> 00:37:58,480
to do with

00:37:56,320 --> 00:37:59,520
that database migration that i talked

00:37:58,480 --> 00:38:01,359
about

00:37:59,520 --> 00:38:03,040
that was kind of the biggest thing just

00:38:01,359 --> 00:38:04,560
because

00:38:03,040 --> 00:38:06,720
the the scale that we're using a

00:38:04,560 --> 00:38:09,200
database like that um

00:38:06,720 --> 00:38:10,079
really demands um solid support

00:38:09,200 --> 00:38:12,240
contracts and

00:38:10,079 --> 00:38:14,000
uh given that we're used to dealing

00:38:12,240 --> 00:38:14,960
directly with a company like oracle we

00:38:14,000 --> 00:38:17,680
had to

00:38:14,960 --> 00:38:18,400
reevaluate how we were gonna you know

00:38:17,680 --> 00:38:20,800
have

00:38:18,400 --> 00:38:22,000
you know uh service license agreements

00:38:20,800 --> 00:38:25,359
and all that stuff

00:38:22,000 --> 00:38:25,760
um and uh and also just making sure that

00:38:25,359 --> 00:38:27,280
uh

00:38:25,760 --> 00:38:28,800
that we could put everything kind of

00:38:27,280 --> 00:38:30,640
through its paces

00:38:28,800 --> 00:38:32,160
uh we didn't wanna go and start the

00:38:30,640 --> 00:38:34,880
whole thing off just

00:38:32,160 --> 00:38:35,920
you know dumping you know 100 000 procs

00:38:34,880 --> 00:38:38,640
on it all at once so

00:38:35,920 --> 00:38:46,560
that's why we started off a little you

00:38:38,640 --> 00:38:50,480
know a little bit at a time

00:38:46,560 --> 00:38:52,400
cool next question is um

00:38:50,480 --> 00:38:53,920
there's all right could you talk a bit

00:38:52,400 --> 00:38:56,079
about multi-platform support

00:38:53,920 --> 00:38:58,160
uh how linux windows would play together

00:38:56,079 --> 00:39:01,520
from a user's perspective

00:38:58,160 --> 00:39:03,839
yeah so um so right now the

00:39:01,520 --> 00:39:04,560
uh open cue is fairly agnostic when it

00:39:03,839 --> 00:39:07,359
comes to the

00:39:04,560 --> 00:39:07,760
uh the render hosts it it doesn't uh

00:39:07,359 --> 00:39:09,520
okay

00:39:07,760 --> 00:39:11,440
doesn't isn't very opinionated about you

00:39:09,520 --> 00:39:12,800
know what what os it's running or where

00:39:11,440 --> 00:39:14,079
it's running whether it's on-prem or in

00:39:12,800 --> 00:39:15,440
the cloud

00:39:14,079 --> 00:39:16,880
pretty much if you're able to get rqd

00:39:15,440 --> 00:39:17,760
running it's able to do that

00:39:16,880 --> 00:39:21,680
communication

00:39:17,760 --> 00:39:23,280
um so in in that sense things play well

00:39:21,680 --> 00:39:24,400
together the the big caveat to that

00:39:23,280 --> 00:39:26,400
right now

00:39:24,400 --> 00:39:27,440
is that there is there isn't really a

00:39:26,400 --> 00:39:30,320
concept of

00:39:27,440 --> 00:39:31,280
like drive mapping in open queue so you

00:39:30,320 --> 00:39:32,480
know

00:39:31,280 --> 00:39:33,599
when you're when you're building a job

00:39:32,480 --> 00:39:34,960
submission and submitting your job

00:39:33,599 --> 00:39:35,760
you're basically specifying either

00:39:34,960 --> 00:39:37,760
windows or

00:39:35,760 --> 00:39:39,040
linux paths and those are kind of making

00:39:37,760 --> 00:39:42,079
their way back to the

00:39:39,040 --> 00:39:45,040
rqd instance so kind of

00:39:42,079 --> 00:39:45,839
the jobs need to pick one platform um

00:39:45,040 --> 00:39:47,839
for now

00:39:45,839 --> 00:39:49,440
but um i think that's the that's the

00:39:47,839 --> 00:39:52,000
main caveat i think we do

00:39:49,440 --> 00:39:53,839
we have it kicking around ideas for uh

00:39:52,000 --> 00:39:55,280
for how to fix that i mean obviously the

00:39:53,839 --> 00:39:57,040
the concept of drive mapping is pretty

00:39:55,280 --> 00:39:58,640
well established concepts uh within the

00:39:57,040 --> 00:40:00,000
industry and other tools so

00:39:58,640 --> 00:40:02,000
we're not really shredding any new

00:40:00,000 --> 00:40:03,599
ground there but uh it's definitely

00:40:02,000 --> 00:40:05,280
you know when when i we talk about how

00:40:03,599 --> 00:40:06,880
we want to build out window support more

00:40:05,280 --> 00:40:08,480
in the next uh over the next year i

00:40:06,880 --> 00:40:08,880
think that's definitely a big thing that

00:40:08,480 --> 00:40:11,760
that

00:40:08,880 --> 00:40:12,720
we'll want to cover the ability to to

00:40:11,760 --> 00:40:16,400
kind of

00:40:12,720 --> 00:40:16,400
send jobs to a mixed platform

00:40:20,640 --> 00:40:26,720
it looks like greg's got the next one

00:40:25,040 --> 00:40:28,480
yeah the next question was is there any

00:40:26,720 --> 00:40:29,839
plans to break out the database and

00:40:28,480 --> 00:40:32,160
other components into a more

00:40:29,839 --> 00:40:33,440
pay as you go or serverless type setup

00:40:32,160 --> 00:40:35,839
like brian was talking about

00:40:33,440 --> 00:40:36,720
openq you know we really want to

00:40:35,839 --> 00:40:40,000
maintain

00:40:36,720 --> 00:40:42,079
that open nature with it and allow it to

00:40:40,000 --> 00:40:43,200
run anywhere so it can be hybrid it can

00:40:42,079 --> 00:40:46,319
be

00:40:43,200 --> 00:40:49,760
run on any cladding wherever

00:40:46,319 --> 00:40:54,240
you can run it it should run

00:40:49,760 --> 00:40:56,000
and so uh to answer the question there

00:40:54,240 --> 00:40:58,720
you can certainly break out the database

00:40:56,000 --> 00:41:02,560
and run it on any of the cloud providers

00:40:58,720 --> 00:41:03,200
uh kind of uh serverless database

00:41:02,560 --> 00:41:06,079
options

00:41:03,200 --> 00:41:06,960
or managed database options if you want

00:41:06,079 --> 00:41:10,000
but

00:41:06,960 --> 00:41:10,800
if you have an on-prem machine that you

00:41:10,000 --> 00:41:14,319
want to run

00:41:10,800 --> 00:41:16,400
on as well you can certainly run the

00:41:14,319 --> 00:41:18,240
same code there

00:41:16,400 --> 00:41:20,560
we don't want to kind of push in any

00:41:18,240 --> 00:41:22,000
specific direction what what your

00:41:20,560 --> 00:41:24,720
infrastructure requirements are

00:41:22,000 --> 00:41:27,359
and really want to adapt to you know as

00:41:24,720 --> 00:41:30,640
many environments as we can

00:41:27,359 --> 00:41:30,640
brian anything to add there

00:41:31,040 --> 00:41:35,839
um no i think i think that covers it

00:41:32,880 --> 00:41:35,839
well yeah

00:41:38,960 --> 00:41:45,040
um okay let's see next question

00:41:42,000 --> 00:41:45,920
is uh can we view images in kugui not

00:41:45,040 --> 00:41:49,520
using katana

00:41:45,920 --> 00:41:51,599
right yeah so we uh um

00:41:49,520 --> 00:41:53,599
so right now that the some of the image

00:41:51,599 --> 00:41:54,480
viewing code is built uh just used like

00:41:53,599 --> 00:41:58,400
a local

00:41:54,480 --> 00:42:00,480
uh katana web uh like web instance

00:41:58,400 --> 00:42:02,560
um i would say that's probably still a

00:42:00,480 --> 00:42:03,520
kind of imageworks specific bit that's

00:42:02,560 --> 00:42:05,359
in there

00:42:03,520 --> 00:42:06,800
but yeah we definitely have a we have an

00:42:05,359 --> 00:42:09,760
issue logged for uh

00:42:06,800 --> 00:42:09,760
for taking care of that

00:42:11,760 --> 00:42:16,160
and then following up on the license

00:42:14,240 --> 00:42:19,599
management features

00:42:16,160 --> 00:42:22,079
we do have a limiting

00:42:19,599 --> 00:42:23,280
functionality that is part of openq

00:42:22,079 --> 00:42:26,960
something we added

00:42:23,280 --> 00:42:29,119
in them about a year ago and

00:42:26,960 --> 00:42:31,839
it allows you to just specify arbitrary

00:42:29,119 --> 00:42:31,839
limits

00:42:35,720 --> 00:42:38,810
[Music]

00:42:42,960 --> 00:42:49,040
refuses those licenses you just specify

00:42:46,480 --> 00:42:49,920
that limit and it'll make sure that you

00:42:49,040 --> 00:42:53,040
don't consume

00:42:49,920 --> 00:42:53,839
more licenses than you have set up the

00:42:53,040 --> 00:42:58,240
one

00:42:53,839 --> 00:43:00,640
problem there is i it's not dynamic

00:42:58,240 --> 00:43:02,960
it's not looking at your your license

00:43:00,640 --> 00:43:04,880
count from the license server directly

00:43:02,960 --> 00:43:07,920
it's kind of a static fixed number that

00:43:04,880 --> 00:43:07,920
you're going against

00:43:09,680 --> 00:43:13,280
yeah as i saw that question it did occur

00:43:11,280 --> 00:43:14,640
to me that the license limits is

00:43:13,280 --> 00:43:16,960
one of the big things that we added

00:43:14,640 --> 00:43:19,440
since since last year

00:43:16,960 --> 00:43:27,520
i didn't cover that on my slide but yes

00:43:19,440 --> 00:43:30,640
definitely check that out

00:43:27,520 --> 00:43:32,720
um let's see shin uh do we know

00:43:30,640 --> 00:43:34,560
of any other studios beside sbi that

00:43:32,720 --> 00:43:35,680
have adopted open q as their primary

00:43:34,560 --> 00:43:40,000
scheduler

00:43:35,680 --> 00:43:42,079
um no one that i can uh

00:43:40,000 --> 00:43:43,760
mention right now i i i guess i'll

00:43:42,079 --> 00:43:44,480
answer it in a more general way and say

00:43:43,760 --> 00:43:48,079
that uh

00:43:44,480 --> 00:43:50,880
you know kind of collecting uh

00:43:48,079 --> 00:43:52,400
metrics on opeq usage is uh definitely

00:43:50,880 --> 00:43:53,119
something we've we've talked a lot about

00:43:52,400 --> 00:43:55,040
doing and

00:43:53,119 --> 00:43:56,400
are and are working on as a very high

00:43:55,040 --> 00:44:00,000
priority uh

00:43:56,400 --> 00:44:01,920
so look out for um uh

00:44:00,000 --> 00:44:04,160
what should be a user survey uh coming

00:44:01,920 --> 00:44:07,119
pretty soon um

00:44:04,160 --> 00:44:08,240
and we should be able to get some uh you

00:44:07,119 --> 00:44:10,400
know be able to publish some

00:44:08,240 --> 00:44:13,599
some more detailed metrics at the end of

00:44:10,400 --> 00:44:13,599
it that survey

00:44:21,200 --> 00:44:25,520
um okay let's see uh where can i find

00:44:23,839 --> 00:44:27,680
information on wrangling how to alter

00:44:25,520 --> 00:44:29,280
the priorities of jobs in the queue

00:44:27,680 --> 00:44:30,880
limiting a job or layer from picking up

00:44:29,280 --> 00:44:33,920
additional nodes

00:44:30,880 --> 00:44:35,680
um yeah i think that documentation is is

00:44:33,920 --> 00:44:36,079
definitely an area where we could still

00:44:35,680 --> 00:44:38,319
use

00:44:36,079 --> 00:44:39,839
a lot of work particularly user guides

00:44:38,319 --> 00:44:40,720
around the gui and some of that other

00:44:39,839 --> 00:44:45,040
functionality

00:44:40,720 --> 00:44:46,640
um it's it's not not covered very well

00:44:45,040 --> 00:44:49,200
right now or at all i think we have a

00:44:46,640 --> 00:44:51,359
lot of guides on

00:44:49,200 --> 00:44:52,960
getting deployments set up and getting

00:44:51,359 --> 00:44:56,960
development environments set up but

00:44:52,960 --> 00:44:58,319
uh the actual use is uh

00:44:56,960 --> 00:45:02,480
documentation's kind of lacking right

00:44:58,319 --> 00:45:04,000
now um so yeah i can definitely uh

00:45:02,480 --> 00:45:06,880
we should be making more progress on

00:45:04,000 --> 00:45:06,880
that soon hopefully

00:45:13,440 --> 00:45:18,400
okay is there support for a hybrid

00:45:16,079 --> 00:45:19,760
on-prem and cloud burst model

00:45:18,400 --> 00:45:22,000
or would that be something you'd have to

00:45:19,760 --> 00:45:24,480
manage separate open cube

00:45:22,000 --> 00:45:25,359
deployments to manage um no so there's

00:45:24,480 --> 00:45:29,200
definitely

00:45:25,359 --> 00:45:31,760
it is uh supported right now um

00:45:29,200 --> 00:45:33,920
i think it's right now openq is uh you

00:45:31,760 --> 00:45:36,400
know like i said very agnostic about

00:45:33,920 --> 00:45:36,960
uh where those nodes are running as long

00:45:36,400 --> 00:45:39,839
as

00:45:36,960 --> 00:45:41,280
um you know it's able to the the cubot

00:45:39,839 --> 00:45:43,280
is able to

00:45:41,280 --> 00:45:44,960
communicate with all the rpg instances

00:45:43,280 --> 00:45:46,640
uh it

00:45:44,960 --> 00:45:48,000
will be able to distribute jobs to those

00:45:46,640 --> 00:45:50,079
uh of course there's

00:45:48,000 --> 00:45:51,760
there are some caveats there about

00:45:50,079 --> 00:45:53,920
setting up your cloud machines for

00:45:51,760 --> 00:45:56,160
licensing and uh file management and all

00:45:53,920 --> 00:45:58,000
that and making sure your assets

00:45:56,160 --> 00:45:59,280
are available to those render nodes so

00:45:58,000 --> 00:46:01,280
that is definitely a

00:45:59,280 --> 00:46:02,800
consideration you have to make but um

00:46:01,280 --> 00:46:04,240
there's nothing in opeq that would

00:46:02,800 --> 00:46:05,599
prevent you from from doing that in a

00:46:04,240 --> 00:46:08,240
single deployment as well

00:46:05,599 --> 00:46:09,839
and there are there are a few different

00:46:08,240 --> 00:46:10,800
ways that folks are managing that i mean

00:46:09,839 --> 00:46:13,359
some folks are doing

00:46:10,800 --> 00:46:14,480
a kind of uh just like a multiple

00:46:13,359 --> 00:46:16,400
facility

00:46:14,480 --> 00:46:17,760
deployment where they're using they're

00:46:16,400 --> 00:46:18,240
keeping cloud and on-prem completely

00:46:17,760 --> 00:46:21,599
separate

00:46:18,240 --> 00:46:25,920
um and kind of you know uh setting the

00:46:21,599 --> 00:46:28,160
the show uh you know resource limits to

00:46:25,920 --> 00:46:29,599
you know kind of approve shows to go to

00:46:28,160 --> 00:46:32,560
the cloud um

00:46:29,599 --> 00:46:33,920
but there are also uh uh you know single

00:46:32,560 --> 00:46:34,400
facility deployments as well that just

00:46:33,920 --> 00:46:35,680
have

00:46:34,400 --> 00:46:37,440
different instance groups running in

00:46:35,680 --> 00:46:40,880
different places um

00:46:37,440 --> 00:46:43,359
so uh and that will all

00:46:40,880 --> 00:46:45,119
become uh hopefully easier as we build

00:46:43,359 --> 00:46:45,760
out more of this cloud functionality uh

00:46:45,119 --> 00:46:47,200
with

00:46:45,760 --> 00:46:49,359
the summer of code work that's going on

00:46:47,200 --> 00:46:49,760
we'll kind of lay a good base layer and

00:46:49,359 --> 00:46:51,839
then

00:46:49,760 --> 00:46:53,040
we'll build on that from there to uh

00:46:51,839 --> 00:46:54,560
make it easier to manage those

00:46:53,040 --> 00:46:55,520
deployments directly from open cue so

00:46:54,560 --> 00:46:58,000
you don't have to

00:46:55,520 --> 00:46:58,880
bounce back and forth between uh cue gui

00:46:58,000 --> 00:47:02,079
and other tools

00:46:58,880 --> 00:47:03,440
quite so often but um yeah it's

00:47:02,079 --> 00:47:04,400
definitely but we've definitely kept in

00:47:03,440 --> 00:47:07,760
mind that

00:47:04,400 --> 00:47:10,000
you know folks have uh pretty complex

00:47:07,760 --> 00:47:11,200
existing cloud deployments already so

00:47:10,000 --> 00:47:12,720
we're

00:47:11,200 --> 00:47:13,920
trying to make sure as we develop the

00:47:12,720 --> 00:47:14,960
cloud tools that we're not interfering

00:47:13,920 --> 00:47:18,079
with that in any way

00:47:14,960 --> 00:47:19,760
so yeah we don't want you to require we

00:47:18,079 --> 00:47:21,440
don't want to require anyone to you know

00:47:19,760 --> 00:47:24,079
use our gui to create cloud groups or

00:47:21,440 --> 00:47:24,079
anything like that

00:47:30,160 --> 00:47:34,000
let's see any of the presenters more

00:47:32,960 --> 00:47:39,359
familiar with uh

00:47:34,000 --> 00:47:41,760
houdini pdg than i am

00:47:39,359 --> 00:47:42,880
not super familiar with it personally i

00:47:41,760 --> 00:47:45,520
know this has been

00:47:42,880 --> 00:47:46,000
a thing that has been uh that has come

00:47:45,520 --> 00:47:48,800
up

00:47:46,000 --> 00:47:50,640
a few times before so i i think it's

00:47:48,800 --> 00:47:54,800
certainly something we need to

00:47:50,640 --> 00:47:57,839
look into is how to better integrate pdg

00:47:54,800 --> 00:48:01,040
um as

00:47:57,839 --> 00:48:04,720
a kind of scheduling extension for

00:48:01,040 --> 00:48:07,760
houdini so yeah if there's anyone

00:48:04,720 --> 00:48:10,400
with specific houdini experiences that

00:48:07,760 --> 00:48:11,520
you know is interested in contributing

00:48:10,400 --> 00:48:20,240
yeah we'd love to

00:48:11,520 --> 00:48:22,640
to have help in that area i think yeah

00:48:20,240 --> 00:48:22,640
definitely

00:48:25,599 --> 00:48:29,040
okay looks like uh that's all we've got

00:48:28,480 --> 00:48:31,760
for q

00:48:29,040 --> 00:48:31,760
a in the chat

00:48:32,240 --> 00:48:39,200
yes as it says in the chat um

00:48:35,680 --> 00:48:40,720
if you uh if you have any any follow-up

00:48:39,200 --> 00:48:42,160
questions definitely join us on the uh

00:48:40,720 --> 00:48:45,200
aswf slack

00:48:42,160 --> 00:48:46,880
on the open q channel um you know just

00:48:45,200 --> 00:48:50,640
uh either either for this session

00:48:46,880 --> 00:48:52,160
or uh you know in general

00:48:50,640 --> 00:48:54,480
we're happy to answer questions there or

00:48:52,160 --> 00:48:59,839
on the mailing list or

00:48:54,480 --> 00:48:59,839

YouTube URL: https://www.youtube.com/watch?v=fnbRcTeKirw


