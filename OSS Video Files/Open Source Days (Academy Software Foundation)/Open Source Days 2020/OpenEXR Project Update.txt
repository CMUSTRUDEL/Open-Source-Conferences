Title: OpenEXR Project Update
Publication date: 2020-08-24
Playlist: Open Source Days 2020
Description: 
	OpenEXR Project Update
Speakers: Joseph Goldstone, Kimball Thurston, Christina Tempelaar-Lietz, Nick Porcino, Larry Gritz, Rod Bogart, Peter Hillman, Cary Phillips, Owen Thompson, Sarah Martin

For more information about the Academy Software Foundation go to: https://www.aswf.io/

The OpenEXR Open Source Day Session will review the latest developments and discuss the upcoming 3.0 release of OpenEXR. We will also introduce Imath as an independent project/library.

In recent developments, the 2.5.3 release of OpenEXR includes many small bug/security and build/install fixes and a read performance optimization. It includes all the recent improvements that are production-ready. We've also updated the technical documentation and the openexr.com website.

Looking forward, the 3.0 release will deliver a major reorganization and cleanup of the project, which should make building and installing OpenEXR simpler and more reliable. It will include a major rewrite of the core library that promises to significantly improve read/write performance by reducing buffer copies and improving thread-safety. It will also include a C-language version of the low-level IO.

The new Imath release features some significant improvements and modernizations to the code: modern C++, improved CUDA-compatibility, online documentation.

We would like to solicit feedback and suggestions on all these developments from the developer community.

We would also like to discuss with the motion picture community what role, if any, the reference implementation of OpenEXR should play in encouraging consistent use of attributes in the ACES Container spec (SMPTE ST 2065-4).
Captions: 
	00:00:00,399 --> 00:00:03,199
let's dive in and start we have a lot to

00:00:02,639 --> 00:00:06,640
cover

00:00:03,199 --> 00:00:09,920
um we'd like to start off with a review

00:00:06,640 --> 00:00:11,120
of what's gone on with openexr in the

00:00:09,920 --> 00:00:13,759
last year

00:00:11,120 --> 00:00:16,560
we want to kick off a discussion around

00:00:13,759 --> 00:00:19,279
standard optional attributes in the asus

00:00:16,560 --> 00:00:21,039
basis container spec but most of the

00:00:19,279 --> 00:00:22,720
presentation is going to be about

00:00:21,039 --> 00:00:26,000
opening xr 3.0

00:00:22,720 --> 00:00:29,119
and the soon to be independent

00:00:26,000 --> 00:00:29,119
imath library

00:00:29,359 --> 00:00:32,640
starting off with some introductions i'm

00:00:31,039 --> 00:00:33,280
carrie phillips from industrial light

00:00:32,640 --> 00:00:36,719
magic

00:00:33,280 --> 00:00:39,200
the technical steering committee is

00:00:36,719 --> 00:00:40,480
uh christina templar elites from uh epic

00:00:39,200 --> 00:00:42,559
games

00:00:40,480 --> 00:00:45,039
joseph goldstone from ari kimball

00:00:42,559 --> 00:00:47,760
thurston from wetta

00:00:45,039 --> 00:00:48,160
larry grits from image works nick pacino

00:00:47,760 --> 00:00:50,960
from

00:00:48,160 --> 00:00:52,879
pixar peter hillman from wetta and rob

00:00:50,960 --> 00:00:56,320
bogart from epic

00:00:52,879 --> 00:01:00,559
i just want to add that um we're not

00:00:56,320 --> 00:01:03,520
a sort of dedicated corporate

00:01:00,559 --> 00:01:05,280
team this is all kind of a of a side

00:01:03,520 --> 00:01:08,240
project for for all of us

00:01:05,280 --> 00:01:10,560
um we all have day jobs that that are

00:01:08,240 --> 00:01:13,680
our primary responsibility so

00:01:10,560 --> 00:01:14,640
we contribute to the um maintenance of

00:01:13,680 --> 00:01:16,960
open exr

00:01:14,640 --> 00:01:18,159
just kind of in in spare time here and

00:01:16,960 --> 00:01:20,560
there

00:01:18,159 --> 00:01:23,119
just because we enjoy it it's a valuable

00:01:20,560 --> 00:01:23,119
thing to do

00:01:23,439 --> 00:01:26,799
you can contact us through the openexr

00:01:26,000 --> 00:01:28,799
dev

00:01:26,799 --> 00:01:30,000
mail alias at the academy software

00:01:28,799 --> 00:01:33,200
foundation

00:01:30,000 --> 00:01:36,159
that that mail group is archived for

00:01:33,200 --> 00:01:37,680
you know as a as a knowledge base on the

00:01:36,159 --> 00:01:40,640
aswf

00:01:37,680 --> 00:01:41,200
um site you can reach us at our slack

00:01:40,640 --> 00:01:43,920
channel

00:01:41,200 --> 00:01:44,479
or another good way to reach us is

00:01:43,920 --> 00:01:47,600
through

00:01:44,479 --> 00:01:50,720
um filing an issue on the github repo

00:01:47,600 --> 00:01:53,680
we meet every other thursday

00:01:50,720 --> 00:01:56,960
for the the steering committee meeting

00:01:53,680 --> 00:01:56,960
so feel free to join us

00:01:58,240 --> 00:02:01,520
we're going to assume that openexr

00:01:59,759 --> 00:02:03,280
doesn't need a lot of technical

00:02:01,520 --> 00:02:05,040
introduction

00:02:03,280 --> 00:02:07,600
but i did want to start off by just

00:02:05,040 --> 00:02:10,160
restating the the project mission

00:02:07,600 --> 00:02:11,280
the goal of the openexr project is to

00:02:10,160 --> 00:02:13,599
keep the exr

00:02:11,280 --> 00:02:15,520
format reliable and modern and to

00:02:13,599 --> 00:02:17,760
maintain its place as the preferred

00:02:15,520 --> 00:02:19,280
image format for entertainment content

00:02:17,760 --> 00:02:22,640
creation

00:02:19,280 --> 00:02:25,280
the the principles that guide us in

00:02:22,640 --> 00:02:27,760
in maintaining the library are

00:02:25,280 --> 00:02:30,239
robustness reliability security

00:02:27,760 --> 00:02:31,599
compatibility performance simplicity

00:02:30,239 --> 00:02:34,239
adoption

00:02:31,599 --> 00:02:36,160
this is a decidedly conservative

00:02:34,239 --> 00:02:39,120
philosophy this is not

00:02:36,160 --> 00:02:39,440
a library that should see a whole lot of

00:02:39,120 --> 00:02:42,879
of

00:02:39,440 --> 00:02:45,280
churn or new features and that's

00:02:42,879 --> 00:02:46,319
certainly borne out over the last year

00:02:45,280 --> 00:02:49,840
we've put out

00:02:46,319 --> 00:02:51,280
eight releases in the last since the the

00:02:49,840 --> 00:02:54,080
birds of a feather at siggraph

00:02:51,280 --> 00:02:55,040
last year that's as many releases as

00:02:54,080 --> 00:02:58,400
open exr

00:02:55,040 --> 00:03:00,800
saw in the previous nine years

00:02:58,400 --> 00:03:01,760
there's not a lot of new features here

00:03:00,800 --> 00:03:05,040
most of this

00:03:01,760 --> 00:03:07,599
is um bug fixes um

00:03:05,040 --> 00:03:08,400
fixes to the build system improvements

00:03:07,599 --> 00:03:12,480
in the

00:03:08,400 --> 00:03:14,800
installation process and

00:03:12,480 --> 00:03:16,319
patches for potential security

00:03:14,800 --> 00:03:18,720
vulnerabilities

00:03:16,319 --> 00:03:19,599
something we did um a couple months ago

00:03:18,720 --> 00:03:22,640
was to integrate

00:03:19,599 --> 00:03:24,799
open exr with uh google's oss

00:03:22,640 --> 00:03:26,879
fuzz service it's a cloud-based

00:03:24,799 --> 00:03:29,360
automated fuzzing service

00:03:26,879 --> 00:03:30,879
so for the last couple months the google

00:03:29,360 --> 00:03:33,920
servers have been

00:03:30,879 --> 00:03:36,959
bombarding open exr with a stream of

00:03:33,920 --> 00:03:38,799
garbage input data searching for

00:03:36,959 --> 00:03:40,959
failures that could be potentially

00:03:38,799 --> 00:03:44,400
leveraged as security

00:03:40,959 --> 00:03:46,640
vulnerabilities we found about 30 issues

00:03:44,400 --> 00:03:49,519
found and fixed about 30 issues none

00:03:46,640 --> 00:03:51,840
that i think you could really argue are

00:03:49,519 --> 00:03:54,239
exploitable vulnerabilities but

00:03:51,840 --> 00:03:56,239
this is still a valuable thing to do for

00:03:54,239 --> 00:03:59,280
the library in the community to verify

00:03:56,239 --> 00:04:02,640
the resilience of the image format

00:03:59,280 --> 00:04:04,480
to uh potential attack

00:04:02,640 --> 00:04:05,680
another thing we've been doing is giving

00:04:04,480 --> 00:04:10,640
a facelift to

00:04:05,680 --> 00:04:13,360
the the um openaxr.com website

00:04:10,640 --> 00:04:14,319
and technical documentation sarah martin

00:04:13,360 --> 00:04:17,040
from ilm

00:04:14,319 --> 00:04:20,160
has been um has been looking into this

00:04:17,040 --> 00:04:23,440
and i'm gonna pass it off to sarah to uh

00:04:20,160 --> 00:04:23,440
to step us through what she's done

00:04:24,639 --> 00:04:28,000
hi everybody my name is sarah martin and

00:04:27,120 --> 00:04:30,320
i am a technical

00:04:28,000 --> 00:04:31,360
assistant uh technical assistant here at

00:04:30,320 --> 00:04:33,360
ilm

00:04:31,360 --> 00:04:35,199
so earlier this year as kerry said he

00:04:33,360 --> 00:04:37,680
asked me to take a look into updating

00:04:35,199 --> 00:04:39,919
the current open exr website

00:04:37,680 --> 00:04:42,080
which you can see here the design is a

00:04:39,919 --> 00:04:43,280
little outdated and the html was a bit

00:04:42,080 --> 00:04:44,800
hard to maintain

00:04:43,280 --> 00:04:46,720
so i've been working on giving it a

00:04:44,800 --> 00:04:48,880
modern facelift

00:04:46,720 --> 00:04:50,639
the site is still a work in progress so

00:04:48,880 --> 00:04:51,759
i'm presenting today to show the work

00:04:50,639 --> 00:04:53,360
that has been done

00:04:51,759 --> 00:04:55,440
and to give the community a chance to

00:04:53,360 --> 00:04:57,120
offer any feedback

00:04:55,440 --> 00:05:00,400
so first i'm going to give a short

00:04:57,120 --> 00:05:02,639
breakdown of what work has been done

00:05:00,400 --> 00:05:03,440
the biggest change is the style of the

00:05:02,639 --> 00:05:06,479
new site

00:05:03,440 --> 00:05:08,800
which was based on a mock-up the design

00:05:06,479 --> 00:05:09,600
that i presented to the openexr steering

00:05:08,800 --> 00:05:11,520
committee

00:05:09,600 --> 00:05:13,600
this design has given the site a more

00:05:11,520 --> 00:05:15,360
modern look and feel

00:05:13,600 --> 00:05:17,440
um the content and the wording of the

00:05:15,360 --> 00:05:21,280
site itself has been updated by

00:05:17,440 --> 00:05:22,160
carrie and i cleaned up the html and

00:05:21,280 --> 00:05:24,400
added new

00:05:22,160 --> 00:05:25,600
style sheets to drive the look of each

00:05:24,400 --> 00:05:27,280
page

00:05:25,600 --> 00:05:28,880
this makes the content a lot easier to

00:05:27,280 --> 00:05:32,160
maintain

00:05:28,880 --> 00:05:33,680
previously the documentations

00:05:32,160 --> 00:05:35,600
for the original techno technical

00:05:33,680 --> 00:05:39,440
documentations were authored in

00:05:35,600 --> 00:05:41,759
open open and brawl of latex

00:05:39,440 --> 00:05:43,600
and we're only available in pdf form so

00:05:41,759 --> 00:05:44,639
i migrated those docs from their

00:05:43,600 --> 00:05:47,280
original sources

00:05:44,639 --> 00:05:48,000
into a github wiki page where it is now

00:05:47,280 --> 00:05:51,120
available

00:05:48,000 --> 00:05:54,080
online um so

00:05:51,120 --> 00:05:55,680
i took uh the original files and i

00:05:54,080 --> 00:05:59,759
formatted them to fit

00:05:55,680 --> 00:06:03,759
uh with markdown and did some

00:05:59,759 --> 00:06:03,759
formatting to just make it look nice and

00:06:04,840 --> 00:06:07,919
clean

00:06:06,560 --> 00:06:10,479
all right um and so i'm currently

00:06:07,919 --> 00:06:12,800
working on adding a gallery to browse

00:06:10,479 --> 00:06:15,840
the images from the open exr

00:06:12,800 --> 00:06:18,240
images repo this is a set of test uh

00:06:15,840 --> 00:06:21,120
images that illustrates various features

00:06:18,240 --> 00:06:23,280
of the open exr file format

00:06:21,120 --> 00:06:24,639
and hopefully this will this update will

00:06:23,280 --> 00:06:26,639
make

00:06:24,639 --> 00:06:28,319
the images much more easily easily

00:06:26,639 --> 00:06:31,680
accessible to the community

00:06:28,319 --> 00:06:34,560
to be used for tests as i mentioned the

00:06:31,680 --> 00:06:35,600
site is still a work in progress and i'm

00:06:34,560 --> 00:06:38,560
aiming to have it

00:06:35,600 --> 00:06:39,440
be completely live in the next few weeks

00:06:38,560 --> 00:06:41,199
for now

00:06:39,440 --> 00:06:44,319
it is available at a link that i will

00:06:41,199 --> 00:06:44,319
put into the chat

00:06:44,479 --> 00:06:48,240
um and we would absolutely love your

00:06:46,479 --> 00:06:52,199
suggestions and or comments so

00:06:48,240 --> 00:06:54,800
please feel free to email me at s martin

00:06:52,199 --> 00:06:58,080
s-m-a-r-t-i-n iln.com

00:06:54,800 --> 00:06:59,919
or file an issue at our repo it's been a

00:06:58,080 --> 00:07:01,599
really great experience updating this

00:06:59,919 --> 00:07:02,000
site and please look forward to seeing

00:07:01,599 --> 00:07:06,400
it live

00:07:02,000 --> 00:07:06,400
in a couple of weeks thank you so much

00:07:11,599 --> 00:07:17,759
uh back to here so

00:07:14,800 --> 00:07:19,520
sarah mentioned the open exr images repo

00:07:17,759 --> 00:07:22,160
um this is a

00:07:19,520 --> 00:07:23,840
a repo of example images that that

00:07:22,160 --> 00:07:24,880
demonstrate all the different features

00:07:23,840 --> 00:07:29,039
of the library

00:07:24,880 --> 00:07:32,160
that are useful in

00:07:29,039 --> 00:07:33,599
um validating testing the library um it

00:07:32,160 --> 00:07:36,960
hasn't been updated in some time

00:07:33,599 --> 00:07:40,560
arco rossia has volunteered to

00:07:36,960 --> 00:07:43,759
take a new um set of images

00:07:40,560 --> 00:07:44,560
and and integrate them with the um the

00:07:43,759 --> 00:07:47,759
repo so

00:07:44,560 --> 00:07:47,759
that should be coming soon

00:07:47,919 --> 00:07:53,120
uh next i'll pass it off to joseph

00:07:50,960 --> 00:07:57,039
goldstone from ari to talk about the

00:07:53,120 --> 00:07:57,039
aces image container attributes

00:07:57,280 --> 00:08:04,879
joseph did that take

00:08:00,800 --> 00:08:07,919
am i here okay

00:08:04,879 --> 00:08:10,080
okay good so um yeah my name is joseph

00:08:07,919 --> 00:08:12,960
goldstone i'm an image science engineer

00:08:10,080 --> 00:08:14,720
at re working for both munich and

00:08:12,960 --> 00:08:17,039
burbank

00:08:14,720 --> 00:08:19,039
i was an ilm employee at the time that

00:08:17,039 --> 00:08:22,160
we designed openexr

00:08:19,039 --> 00:08:23,520
i was also one of the people who helped

00:08:22,160 --> 00:08:26,639
start the asus project

00:08:23,520 --> 00:08:29,199
back in 2004 or so

00:08:26,639 --> 00:08:30,240
it's been a long time uh there was a

00:08:29,199 --> 00:08:33,200
certain point

00:08:30,240 --> 00:08:34,800
when asus was becoming real where we

00:08:33,200 --> 00:08:39,279
realized that we wanted

00:08:34,800 --> 00:08:40,880
um to have openexr basically be our

00:08:39,279 --> 00:08:42,959
standard format

00:08:40,880 --> 00:08:44,399
but for various reasons standardizing

00:08:42,959 --> 00:08:46,880
the full open exr

00:08:44,399 --> 00:08:48,000
just wasn't possible so we chose a

00:08:46,880 --> 00:08:51,279
subset

00:08:48,000 --> 00:08:54,800
of openexr and

00:08:51,279 --> 00:08:55,839
in this timeline and by the way the url

00:08:54,800 --> 00:08:58,320
at the bottom

00:08:55,839 --> 00:09:00,480
you can see this there so don't bother

00:08:58,320 --> 00:09:04,000
scribbling this enormous diagram down

00:09:00,480 --> 00:09:07,040
um it's for your review anytime you want

00:09:04,000 --> 00:09:08,959
um anyway the solid black line is the

00:09:07,040 --> 00:09:12,000
main open exr timeline

00:09:08,959 --> 00:09:14,560
um somewhere around 2012

00:09:12,000 --> 00:09:17,279
there was the drafting group to come up

00:09:14,560 --> 00:09:20,720
with this empty standard for this subset

00:09:17,279 --> 00:09:23,440
that split off here and

00:09:20,720 --> 00:09:24,800
just about the time that we finished and

00:09:23,440 --> 00:09:27,519
a little bit after

00:09:24,800 --> 00:09:29,200
deep images and open exr 2.0 were

00:09:27,519 --> 00:09:33,120
released

00:09:29,200 --> 00:09:34,839
maintenance on um on openexr

00:09:33,120 --> 00:09:36,670
kind of went into this super long

00:09:34,839 --> 00:09:38,640
drought and so

00:09:36,670 --> 00:09:42,399
[Music]

00:09:38,640 --> 00:09:45,680
we defined uh optional attributes

00:09:42,399 --> 00:09:47,279
with standardized uh meaning

00:09:45,680 --> 00:09:49,760
standardized names

00:09:47,279 --> 00:09:50,480
as part of the simply standardization

00:09:49,760 --> 00:09:52,320
work

00:09:50,480 --> 00:09:54,399
but that was never actually rolled back

00:09:52,320 --> 00:09:57,360
into the reference implementation

00:09:54,399 --> 00:09:59,120
and so what this tiny talk about what

00:09:57,360 --> 00:10:01,839
this tiny talk is about

00:09:59,120 --> 00:10:02,399
is doing just that so we are getting

00:10:01,839 --> 00:10:05,680
ready

00:10:02,399 --> 00:10:07,360
to migrate the attributes that we

00:10:05,680 --> 00:10:09,120
defined with their semantics and their

00:10:07,360 --> 00:10:13,120
types

00:10:09,120 --> 00:10:15,680
in the sympt 2065-4

00:10:13,120 --> 00:10:19,120
was officially called asus container

00:10:15,680 --> 00:10:21,360
file layout is the name of the standard

00:10:19,120 --> 00:10:22,880
into the open xr reference reference

00:10:21,360 --> 00:10:26,000
implementation

00:10:22,880 --> 00:10:28,720
and so let me go to the next slide

00:10:26,000 --> 00:10:29,839
so this is terrifyingly long it's

00:10:28,720 --> 00:10:32,880
actually 33

00:10:29,839 --> 00:10:35,600
attributes and again

00:10:32,880 --> 00:10:38,000
that url at the bottom will let you

00:10:35,600 --> 00:10:40,480
peruse these at your leisure

00:10:38,000 --> 00:10:41,600
um but these are the ones that we

00:10:40,480 --> 00:10:44,959
defined

00:10:41,600 --> 00:10:46,720
back in the day and i would roughly

00:10:44,959 --> 00:10:47,760
categorize these into two different

00:10:46,720 --> 00:10:50,480
groups

00:10:47,760 --> 00:10:50,880
there are what i would call forensic um

00:10:50,480 --> 00:10:54,399
it's

00:10:50,880 --> 00:10:56,560
documentation so um

00:10:54,399 --> 00:10:58,640
if you see something funky while you're

00:10:56,560 --> 00:11:01,440
doing a comp that turns out to be

00:10:58,640 --> 00:11:03,120
like fixed pattern noise or something

00:11:01,440 --> 00:11:03,680
and you want to check all the other

00:11:03,120 --> 00:11:05,200
shots

00:11:03,680 --> 00:11:07,760
that were done on that camera well

00:11:05,200 --> 00:11:08,800
there's a standard camera serial number

00:11:07,760 --> 00:11:10,240
attribute

00:11:08,800 --> 00:11:12,079
which assuming that you've been doing

00:11:10,240 --> 00:11:13,680
your book keeping right will help you

00:11:12,079 --> 00:11:15,279
very readily identify what other

00:11:13,680 --> 00:11:17,040
material you might want to screen

00:11:15,279 --> 00:11:19,200
but it's it's sort of a backwards

00:11:17,040 --> 00:11:21,600
looking attribute

00:11:19,200 --> 00:11:22,959
it's documentation if you need it

00:11:21,600 --> 00:11:26,079
there's another type

00:11:22,959 --> 00:11:28,640
um which is probably best exemplified

00:11:26,079 --> 00:11:30,800
by lens metadata dynamic metadata that

00:11:28,640 --> 00:11:34,399
can change from frame to frame

00:11:30,800 --> 00:11:38,079
um and there's three different

00:11:34,399 --> 00:11:41,200
meta datums metadata that are

00:11:38,079 --> 00:11:42,480
defined for that in the container spec

00:11:41,200 --> 00:11:44,160
but again they're not yet in the

00:11:42,480 --> 00:11:47,920
reference implementation

00:11:44,160 --> 00:11:51,279
um one of them actually i think focus

00:11:47,920 --> 00:11:53,839
distance is but focal length is not

00:11:51,279 --> 00:11:55,519
and aperture is also in the standard so

00:11:53,839 --> 00:11:59,200
it's kind of weird to have two but not

00:11:55,519 --> 00:12:02,000
three um in any case um

00:11:59,200 --> 00:12:04,480
this adds focal length to the trio uh

00:12:02,000 --> 00:12:07,360
there's a bunch of other stuff in here

00:12:04,480 --> 00:12:09,040
what we're interested in and why i

00:12:07,360 --> 00:12:11,680
implore you to go

00:12:09,040 --> 00:12:12,959
here and then at your leisure look at

00:12:11,680 --> 00:12:15,040
this and

00:12:12,959 --> 00:12:16,000
and this is basically a pointer to a

00:12:15,040 --> 00:12:18,959
thread

00:12:16,000 --> 00:12:20,320
reply to the thread and tell us oh yes i

00:12:18,959 --> 00:12:23,920
independently

00:12:20,320 --> 00:12:25,360
uh implemented a an attribute called

00:12:23,920 --> 00:12:28,800
image rotation

00:12:25,360 --> 00:12:32,160
and um its units are radians and

00:12:28,800 --> 00:12:34,450
uh it's counterclockwise or whatever

00:12:32,160 --> 00:12:35,920
we'd love to hear from you

00:12:34,450 --> 00:12:40,480
[Music]

00:12:35,920 --> 00:12:42,000
we can't change the spec but when we

00:12:40,480 --> 00:12:43,839
put the release notes out for the

00:12:42,000 --> 00:12:46,560
reference implementation

00:12:43,839 --> 00:12:47,760
we can certainly make people aware

00:12:46,560 --> 00:12:48,800
because you don't want to be into

00:12:47,760 --> 00:12:50,320
in a situation where you've

00:12:48,800 --> 00:12:51,519
independently developed one of these

00:12:50,320 --> 00:12:52,800
attributes

00:12:51,519 --> 00:12:55,360
you're exchanging it with some other

00:12:52,800 --> 00:12:56,639
facility and then

00:12:55,360 --> 00:12:58,240
once the reference reference

00:12:56,639 --> 00:12:59,519
implementation is out there in a couple

00:12:58,240 --> 00:13:01,760
years you start getting

00:12:59,519 --> 00:13:02,959
plates that have the same attributes but

00:13:01,760 --> 00:13:06,320
different semantics

00:13:02,959 --> 00:13:10,639
so help us give you a heads up

00:13:06,320 --> 00:13:13,680
now um again this went out

00:13:10,639 --> 00:13:14,560
as a standard seven years ago simply

00:13:13,680 --> 00:13:16,480
standards

00:13:14,560 --> 00:13:18,240
the life cycle is kind of like this it

00:13:16,480 --> 00:13:21,120
takes an agonizingly long

00:13:18,240 --> 00:13:22,639
amount of um bureaucracy and committee

00:13:21,120 --> 00:13:25,040
work to produce one

00:13:22,639 --> 00:13:26,160
a year after that there's the so-called

00:13:25,040 --> 00:13:29,519
one-year review

00:13:26,160 --> 00:13:32,320
which is is course corrections

00:13:29,519 --> 00:13:34,800
um any of those are made and then it

00:13:32,320 --> 00:13:37,040
goes into a five-year review period and

00:13:34,800 --> 00:13:38,720
once that five years is up then again

00:13:37,040 --> 00:13:40,880
any course corrections that might need

00:13:38,720 --> 00:13:43,199
to be made there's the opportunity

00:13:40,880 --> 00:13:45,839
well the asus container spec is up for

00:13:43,199 --> 00:13:49,760
its five-year review this year

00:13:45,839 --> 00:13:53,279
so my experience answering

00:13:49,760 --> 00:13:55,839
customer agitated questions um

00:13:53,279 --> 00:13:57,199
and talking to the community a lot here

00:13:55,839 --> 00:14:01,040
are the ones that

00:13:57,199 --> 00:14:04,079
we are intending to propose for the

00:14:01,040 --> 00:14:05,519
year revision and um assuming that

00:14:04,079 --> 00:14:07,279
they're accepted that we would also put

00:14:05,519 --> 00:14:09,100
into the reference implementation

00:14:07,279 --> 00:14:10,320
so the um

00:14:09,100 --> 00:14:13,279
[Music]

00:14:10,320 --> 00:14:14,639
existing implementation it's in the

00:14:13,279 --> 00:14:15,600
reference implementation the aperture

00:14:14,639 --> 00:14:17,920
attribute

00:14:15,600 --> 00:14:20,079
is kind of terribly defined in that it

00:14:17,920 --> 00:14:22,079
says something like

00:14:20,079 --> 00:14:24,000
aperture means t stop unless you don't

00:14:22,079 --> 00:14:25,760
know t-stop in which case feel free to

00:14:24,000 --> 00:14:28,720
use f-stop instead

00:14:25,760 --> 00:14:30,000
this is bad because you have no idea

00:14:28,720 --> 00:14:33,600
when you get it which one it

00:14:30,000 --> 00:14:35,760
is so um we'll be proposing

00:14:33,600 --> 00:14:36,720
deprecation of this an introduction of

00:14:35,760 --> 00:14:40,240
two separate

00:14:36,720 --> 00:14:40,560
optional attributes so that when you get

00:14:40,240 --> 00:14:44,560
it

00:14:40,560 --> 00:14:45,120
you know what it means um two other ones

00:14:44,560 --> 00:14:47,839
that

00:14:45,120 --> 00:14:49,199
um we should have seen this coming focal

00:14:47,839 --> 00:14:52,880
plane image size

00:14:49,199 --> 00:14:55,040
um 3d solvers for camera position

00:14:52,880 --> 00:14:56,959
and orientation need to know what the

00:14:55,040 --> 00:14:59,360
actual size on the imager was

00:14:56,959 --> 00:15:01,600
and that wasn't part of the original

00:14:59,360 --> 00:15:03,839
spec so that's in there

00:15:01,600 --> 00:15:04,880
um people have gotten so sophisticated

00:15:03,839 --> 00:15:07,040
in the interim in

00:15:04,880 --> 00:15:07,920
terms of their measurement of lens

00:15:07,040 --> 00:15:10,160
distortion

00:15:07,920 --> 00:15:13,279
that they measure at different lens

00:15:10,160 --> 00:15:15,279
element temperatures and there are

00:15:13,279 --> 00:15:16,720
sensors inside the lenses that will tell

00:15:15,279 --> 00:15:20,000
you what it is so you can

00:15:16,720 --> 00:15:21,600
know which distortion map to use so

00:15:20,000 --> 00:15:23,760
we'll standardize provision for carrying

00:15:21,600 --> 00:15:25,839
that as well

00:15:23,760 --> 00:15:27,279
again lens firmware version the lenses

00:15:25,839 --> 00:15:29,360
have gotten so complicated that

00:15:27,279 --> 00:15:31,600
they're essentially little computers

00:15:29,360 --> 00:15:33,759
that go onto the front of your camera

00:15:31,600 --> 00:15:34,800
and um when there's a firmware change

00:15:33,759 --> 00:15:36,720
their behavior can change

00:15:34,800 --> 00:15:38,079
so it's important to know forensically

00:15:36,720 --> 00:15:41,759
which one was on there

00:15:38,079 --> 00:15:44,959
color temperature intent not so much

00:15:41,759 --> 00:15:46,160
an asus linear thing but it's often good

00:15:44,959 --> 00:15:49,199
to know

00:15:46,160 --> 00:15:52,079
um just what the camera was set to um

00:15:49,199 --> 00:15:52,480
more for edge cases lastly frame lines

00:15:52,079 --> 00:15:53,759
uh

00:15:52,480 --> 00:15:56,240
and this is an area that's getting a

00:15:53,759 --> 00:15:57,360
little attention in the asc groups right

00:15:56,240 --> 00:16:00,959
now

00:15:57,360 --> 00:16:03,839
um both for marking action areas and for

00:16:00,959 --> 00:16:04,560
setting up a cropping rectangle for

00:16:03,839 --> 00:16:07,759
dailies

00:16:04,560 --> 00:16:09,199
or screeners or whatever

00:16:07,759 --> 00:16:10,560
this is to help you automate those

00:16:09,199 --> 00:16:11,519
workflows and get them to be more

00:16:10,560 --> 00:16:16,240
consistent

00:16:11,519 --> 00:16:18,880
so again this url at the bottom

00:16:16,240 --> 00:16:20,320
if you'll go there if you'll take a look

00:16:18,880 --> 00:16:23,519
at these attributes

00:16:20,320 --> 00:16:25,920
if there's anything there that um

00:16:23,519 --> 00:16:26,560
if you don't recognize anything there uh

00:16:25,920 --> 00:16:28,240
i

00:16:26,560 --> 00:16:29,440
don't quite want to say great but that

00:16:28,240 --> 00:16:31,120
means that you don't have anything

00:16:29,440 --> 00:16:33,199
conflicting which is good

00:16:31,120 --> 00:16:34,800
um if you do see something there though

00:16:33,199 --> 00:16:38,160
please comment on the thread

00:16:34,800 --> 00:16:41,680
um so that we can just have a heads up

00:16:38,160 --> 00:16:43,839
and if you feel like there's something

00:16:41,680 --> 00:16:46,560
that's critical for your work

00:16:43,839 --> 00:16:48,000
that's not either in the ones in the

00:16:46,560 --> 00:16:49,519
asus spec that will soon be in the

00:16:48,000 --> 00:16:50,480
reference implementation or these new

00:16:49,519 --> 00:16:52,480
ones

00:16:50,480 --> 00:16:54,480
please put that on the common thread as

00:16:52,480 --> 00:16:58,000
well so that's it for me

00:16:54,480 --> 00:17:01,600
and i'll try and relinquish this

00:16:58,000 --> 00:17:02,959
um how do i do that oh stop remote

00:17:01,600 --> 00:17:06,319
control

00:17:02,959 --> 00:17:09,839
okay you should have it back thanks

00:17:06,319 --> 00:17:12,160
so moving on to imath and open exr3

00:17:09,839 --> 00:17:13,039
so there's really three parts to what

00:17:12,160 --> 00:17:14,799
we're uh

00:17:13,039 --> 00:17:16,720
what we're contemplating here the first

00:17:14,799 --> 00:17:19,839
is a reorganization

00:17:16,720 --> 00:17:23,360
of the the openexr

00:17:19,839 --> 00:17:27,039
repo a cleaving off of

00:17:23,360 --> 00:17:30,640
the imaf and half libraries

00:17:27,039 --> 00:17:33,520
into a separate repo to be managed and

00:17:30,640 --> 00:17:38,080
released independently

00:17:33,520 --> 00:17:39,120
and then a light kind of modernization

00:17:38,080 --> 00:17:42,720
of the imaf

00:17:39,120 --> 00:17:46,240
code so we pitched this as a

00:17:42,720 --> 00:17:49,360
google summer of code project and found

00:17:46,240 --> 00:17:50,720
owen thompson at um rochester institute

00:17:49,360 --> 00:17:53,120
of technology

00:17:50,720 --> 00:17:53,919
who has been working with us over the

00:17:53,120 --> 00:17:56,960
summer to

00:17:53,919 --> 00:17:59,360
uh to to roll this out so

00:17:56,960 --> 00:18:00,480
um owen is gonna step us through what

00:17:59,360 --> 00:18:01,919
he's done

00:18:00,480 --> 00:18:03,600
i'll give you just a little bit of a

00:18:01,919 --> 00:18:05,919
preview

00:18:03,600 --> 00:18:07,360
one of the things that newcomers to open

00:18:05,919 --> 00:18:09,440
the openexr

00:18:07,360 --> 00:18:12,160
library have always been puzzled by is

00:18:09,440 --> 00:18:14,640
the name ilm imf

00:18:12,160 --> 00:18:16,240
we've decided to rename that to simply

00:18:14,640 --> 00:18:18,240
open exr

00:18:16,240 --> 00:18:20,720
um we're not moving we're not renaming

00:18:18,240 --> 00:18:21,360
any header files so any code that links

00:18:20,720 --> 00:18:24,240
against

00:18:21,360 --> 00:18:26,080
um compiles against openexr will

00:18:24,240 --> 00:18:28,880
continue to compile

00:18:26,080 --> 00:18:30,320
fine without changes um the only change

00:18:28,880 --> 00:18:33,520
will be in the dependency the

00:18:30,320 --> 00:18:36,799
the link line and then uh how um

00:18:33,520 --> 00:18:39,600
the external imath library is is linked

00:18:36,799 --> 00:18:40,480
the um um and that's going to be done

00:18:39,600 --> 00:18:43,600
through the

00:18:40,480 --> 00:18:47,520
cmake external project

00:18:43,600 --> 00:18:51,520
mechanism ix and island thread

00:18:47,520 --> 00:18:54,160
are staying a part of of the openexr

00:18:51,520 --> 00:18:54,720
repo there'll be no more ilm base no

00:18:54,160 --> 00:18:57,760
more pi

00:18:54,720 --> 00:19:00,000
ilm base because all of that code has

00:18:57,760 --> 00:19:02,400
moved into the imath repo

00:19:00,000 --> 00:19:04,160
we're retiring the viewers code because

00:19:02,400 --> 00:19:06,160
it was

00:19:04,160 --> 00:19:07,280
hopelessly out of date we're also

00:19:06,160 --> 00:19:10,480
retiring the auto

00:19:07,280 --> 00:19:13,679
tools build infrastructure in favor of

00:19:10,480 --> 00:19:17,200
of cmake so with that

00:19:13,679 --> 00:19:24,720
i'll oh one other thing we're taking

00:19:17,200 --> 00:19:27,440
the opportunity to um convert to

00:19:24,720 --> 00:19:29,760
a more inclusive uh naming convention

00:19:27,440 --> 00:19:32,720
for our branches we're gonna

00:19:29,760 --> 00:19:34,559
have two branches in the repo one is

00:19:32,720 --> 00:19:36,000
release which will point to the latest

00:19:34,559 --> 00:19:38,480
stable release

00:19:36,000 --> 00:19:40,880
and dev which will point to the the tip

00:19:38,480 --> 00:19:42,880
of most recent development where

00:19:40,880 --> 00:19:45,840
pull requests are merged and there'll be

00:19:42,880 --> 00:19:48,160
no more master branch

00:19:45,840 --> 00:19:50,559
uh and with that i'll pass it over to

00:19:48,160 --> 00:19:50,559
owen

00:19:50,960 --> 00:19:56,880
thank you carrie um so

00:19:54,080 --> 00:19:58,640
with the separation of imap um we took

00:19:56,880 --> 00:20:01,280
that as an opportunity to

00:19:58,640 --> 00:20:02,799
make a few organizational changes with

00:20:01,280 --> 00:20:05,440
the project structure

00:20:02,799 --> 00:20:06,640
if you look over here on the right um

00:20:05,440 --> 00:20:08,559
you can see

00:20:06,640 --> 00:20:10,159
there's a new structure the most

00:20:08,559 --> 00:20:13,120
important aspect of which is

00:20:10,159 --> 00:20:13,600
the this directory labeled python which

00:20:13,120 --> 00:20:17,280
holds

00:20:13,600 --> 00:20:20,640
all of the python bindings um

00:20:17,280 --> 00:20:24,400
for imath and the

00:20:20,640 --> 00:20:26,880
reasoning behind putting it in there is

00:20:24,400 --> 00:20:28,480
multiple reasons first of all a lot of

00:20:26,880 --> 00:20:32,559
issues people were having with

00:20:28,480 --> 00:20:34,799
building open exr um stemmed from

00:20:32,559 --> 00:20:35,600
imath and particularly the python

00:20:34,799 --> 00:20:39,039
bindings

00:20:35,600 --> 00:20:39,840
and boost python and a lot of the people

00:20:39,039 --> 00:20:41,760
that were having

00:20:39,840 --> 00:20:43,039
issues with that weren't even interested

00:20:41,760 --> 00:20:46,000
in having the

00:20:43,039 --> 00:20:48,000
python buildings built at all so they're

00:20:46,000 --> 00:20:51,440
put in their own subdirectory and

00:20:48,000 --> 00:20:55,039
are by default not compiled

00:20:51,440 --> 00:20:57,840
when you install imath and open exr

00:20:55,039 --> 00:20:58,880
consequentially so you have to

00:20:57,840 --> 00:21:00,799
specifically

00:20:58,880 --> 00:21:02,640
specify you want the python bindings

00:21:00,799 --> 00:21:05,760
because a

00:21:02,640 --> 00:21:07,679
um as i said before is tripping a lot of

00:21:05,760 --> 00:21:09,840
people up and also it takes up majority

00:21:07,679 --> 00:21:12,159
of the compilation time anyway so

00:21:09,840 --> 00:21:14,400
we'd rather not have any redundancy in

00:21:12,159 --> 00:21:14,400
that

00:21:14,840 --> 00:21:17,840
vein

00:21:18,240 --> 00:21:23,840
um so there was another avenue

00:21:21,840 --> 00:21:26,159
that we sought to improve imath in and

00:21:23,840 --> 00:21:30,080
that was with modernization

00:21:26,159 --> 00:21:33,039
and these two macros kind of uh

00:21:30,080 --> 00:21:34,080
show a large portion of the changes um

00:21:33,039 --> 00:21:35,520
here

00:21:34,080 --> 00:21:37,679
in the top half of the screen you can

00:21:35,520 --> 00:21:39,919
see that we have a macro called

00:21:37,679 --> 00:21:42,720
imathconst expert14

00:21:39,919 --> 00:21:44,000
which basically is defined to be

00:21:42,720 --> 00:21:47,280
constant expert

00:21:44,000 --> 00:21:48,240
if you are using c plus plus version 14

00:21:47,280 --> 00:21:50,480
or greater

00:21:48,240 --> 00:21:51,440
and the reason we have this is so that

00:21:50,480 --> 00:21:54,880
we can have

00:21:51,440 --> 00:21:58,080
um as many possible uh

00:21:54,880 --> 00:22:00,640
functions as defined as const expert

00:21:58,080 --> 00:22:01,760
in imap while still maintaining

00:22:00,640 --> 00:22:06,000
compatibility with

00:22:01,760 --> 00:22:07,600
older versions of c plus plus 11 and

00:22:06,000 --> 00:22:09,280
there's a great deal of change

00:22:07,600 --> 00:22:11,679
difference between the what you can

00:22:09,280 --> 00:22:12,320
define as context for between 11 and 14.

00:22:11,679 --> 00:22:15,360
so

00:22:12,320 --> 00:22:17,679
this macro was important

00:22:15,360 --> 00:22:20,080
we also have a another macro called

00:22:17,679 --> 00:22:22,960
imath host device which

00:22:20,080 --> 00:22:25,520
is defined based on whether or not

00:22:22,960 --> 00:22:28,799
you're compiling for the cuda kernel

00:22:25,520 --> 00:22:32,880
and with the current

00:22:28,799 --> 00:22:34,960
setup you can compile any imap function

00:22:32,880 --> 00:22:38,320
on the cuda kernel

00:22:34,960 --> 00:22:40,159
and run it on the cpu or the gpu

00:22:38,320 --> 00:22:42,000
and if you are not compiling for cuda

00:22:40,159 --> 00:22:45,360
nothing changes at all for you

00:22:42,000 --> 00:22:45,360
so nothing to worry about

00:22:48,559 --> 00:22:55,280
and this is just a example of what that

00:22:50,720 --> 00:22:58,880
would look like in code

00:22:55,280 --> 00:23:02,320
in this case for a vic 2.

00:22:58,880 --> 00:23:04,480
um we also took this

00:23:02,320 --> 00:23:05,919
to as an opportunity to get rid of some

00:23:04,480 --> 00:23:08,880
redundancy in imath

00:23:05,919 --> 00:23:09,919
specifically iex which was an exception

00:23:08,880 --> 00:23:13,679
library

00:23:09,919 --> 00:23:14,400
um here you can see that if you try to

00:23:13,679 --> 00:23:18,159
get the length

00:23:14,400 --> 00:23:19,840
of a vector here um or i'm sorry if you

00:23:18,159 --> 00:23:20,720
try to normalize a vector that has a

00:23:19,840 --> 00:23:23,840
length of zero

00:23:20,720 --> 00:23:26,320
it gives you a domain error now it used

00:23:23,840 --> 00:23:29,520
to just give you an error called

00:23:26,320 --> 00:23:33,440
i think it was vector norm something

00:23:29,520 --> 00:23:37,679
it this seems like a more pragmatic

00:23:33,440 --> 00:23:40,799
use and it also eliminates unneeded

00:23:37,679 --> 00:23:40,799
code with iex

00:23:45,360 --> 00:23:51,279
and this is another change that is

00:23:48,400 --> 00:23:52,320
being proposed um if you look at the

00:23:51,279 --> 00:23:55,679
union

00:23:52,320 --> 00:23:59,360
uh part at the top of this

00:23:55,679 --> 00:24:03,120
template class you can see that there

00:23:59,360 --> 00:24:06,960
is a struct with uh

00:24:03,120 --> 00:24:10,080
uh um

00:24:06,960 --> 00:24:13,360
variables x and y are of object

00:24:10,080 --> 00:24:15,520
t and then um you're able to index into

00:24:13,360 --> 00:24:18,559
them using

00:24:15,520 --> 00:24:22,159
the uh

00:24:18,559 --> 00:24:25,679
bracket operators down here um with this

00:24:22,159 --> 00:24:29,279
implementation you are able to

00:24:25,679 --> 00:24:32,480
auto vectorize um with

00:24:29,279 --> 00:24:34,240
compilers more easily as opposed to

00:24:32,480 --> 00:24:35,520
the current implementation which only

00:24:34,240 --> 00:24:37,200
has

00:24:35,520 --> 00:24:38,720
the first half of the union it doesn't

00:24:37,200 --> 00:24:41,919
have a vector

00:24:38,720 --> 00:24:45,120
so indexing with the brackets is

00:24:41,919 --> 00:24:46,960
um not as clean

00:24:45,120 --> 00:24:49,600
so this is a proposed change and if

00:24:46,960 --> 00:24:51,600
people have any issues with it

00:24:49,600 --> 00:24:54,559
or just want to discuss it we welcome

00:24:51,600 --> 00:24:54,559
any input

00:24:55,919 --> 00:24:59,679
and we also have developed a claim

00:24:59,120 --> 00:25:03,360
format

00:24:59,679 --> 00:25:05,679
standard for imath it has been um

00:25:03,360 --> 00:25:07,039
run and is included in the repo and you

00:25:05,679 --> 00:25:11,200
can run it yourself

00:25:07,039 --> 00:25:14,000
on any code that you hope to submit um

00:25:11,200 --> 00:25:14,720
but that is not going to be reflected in

00:25:14,000 --> 00:25:16,640
the

00:25:14,720 --> 00:25:18,880
uh repo history because it's been added

00:25:16,640 --> 00:25:22,159
to the get blame ignore

00:25:18,880 --> 00:25:23,520
um so because like if you run clean

00:25:22,159 --> 00:25:24,480
format on all the code it's going to

00:25:23,520 --> 00:25:26,000
look like somebody

00:25:24,480 --> 00:25:28,159
changes almost everything in the library

00:25:26,000 --> 00:25:32,480
when it's not really the case so

00:25:28,159 --> 00:25:34,720
yeah and i think that's it for me

00:25:32,480 --> 00:25:34,720
yep

00:25:36,880 --> 00:25:40,720
so turn it over to kimball thurston

00:25:38,640 --> 00:25:46,159
who's gonna talk about

00:25:40,720 --> 00:25:46,159
changes for open xr3

00:25:47,039 --> 00:25:53,840
sure um

00:25:50,559 --> 00:25:53,840
so i uh

00:25:55,760 --> 00:25:59,840
kerry's talked a little bit about

00:25:56,799 --> 00:26:03,120
reformatting the um

00:25:59,840 --> 00:26:06,640
uh the webs the website the web the

00:26:03,120 --> 00:26:08,880
the repository layout and owen's been

00:26:06,640 --> 00:26:11,279
working away in imap which is awesome

00:26:08,880 --> 00:26:12,080
um we've had a number of requests we've

00:26:11,279 --> 00:26:14,159
had for uh

00:26:12,080 --> 00:26:16,240
last couple of weeks came up at the last

00:26:14,159 --> 00:26:18,159
ball for siggraph last year was to

00:26:16,240 --> 00:26:20,720
do some things like allow uh things like

00:26:18,159 --> 00:26:23,520
b float 16 as a pixel data type

00:26:20,720 --> 00:26:24,000
um and so we've been and um we've been

00:26:23,520 --> 00:26:27,039
looking

00:26:24,000 --> 00:26:28,799
a little bit at that but also um with

00:26:27,039 --> 00:26:29,840
all the renewed thing in the attributes

00:26:28,799 --> 00:26:33,520
we've also been

00:26:29,840 --> 00:26:35,200
talking about um either um

00:26:33,520 --> 00:26:36,640
changing the layout slightly of the

00:26:35,200 --> 00:26:39,039
files we're gonna if we're gonna

00:26:36,640 --> 00:26:40,159
if we're to add a data type then we

00:26:39,039 --> 00:26:41,760
should go ahead and make some other

00:26:40,159 --> 00:26:44,000
changes and so we've been looking at

00:26:41,760 --> 00:26:45,679
maybe relaying out the attributes at the

00:26:44,000 --> 00:26:47,600
beginning of the file

00:26:45,679 --> 00:26:48,640
so that we can do some faster loading of

00:26:47,600 --> 00:26:50,480
that and i'll get more into that in a

00:26:48,640 --> 00:26:53,039
moment

00:26:50,480 --> 00:26:54,400
or maybe um making a whole new part type

00:26:53,039 --> 00:26:55,520
that is just a chunk of metadata and

00:26:54,400 --> 00:26:58,799
some of this stuff we're still

00:26:55,520 --> 00:27:01,440
we're still talking through um uh but

00:26:58,799 --> 00:27:02,720
uh we'll we'll get more into that um a

00:27:01,440 --> 00:27:05,679
little bit later

00:27:02,720 --> 00:27:05,679
the um

00:27:05,760 --> 00:27:09,840
the the the part metadata type would

00:27:08,240 --> 00:27:11,840
would um

00:27:09,840 --> 00:27:13,760
it would just be sort of like a pseudo

00:27:11,840 --> 00:27:15,760
image where the the metadata is actually

00:27:13,760 --> 00:27:18,720
the in the data chunks

00:27:15,760 --> 00:27:19,279
uh carry i seem to oh no there it goes

00:27:18,720 --> 00:27:21,279
um

00:27:19,279 --> 00:27:22,399
and so but one of the things that i

00:27:21,279 --> 00:27:25,679
really wanted to talk about

00:27:22,399 --> 00:27:26,720
um that uh i've been looking at off and

00:27:25,679 --> 00:27:29,840
on for the last year

00:27:26,720 --> 00:27:35,120
is um is the uh

00:27:29,840 --> 00:27:38,720
is the performance of open xr and so um

00:27:35,120 --> 00:27:41,279
uh this hits us a lot

00:27:38,720 --> 00:27:42,480
in when we use exr images for texturing

00:27:41,279 --> 00:27:45,039
but it also i think

00:27:42,480 --> 00:27:47,120
has um impact when people are just

00:27:45,039 --> 00:27:50,240
trying to stream images off a disc

00:27:47,120 --> 00:27:52,240
in a play or any sorts of things and the

00:27:50,240 --> 00:27:55,440
the way that the threading was written

00:27:52,240 --> 00:27:59,840
um in island imf has sort of

00:27:55,440 --> 00:27:59,840
an inherent overhead to it that

00:28:00,240 --> 00:28:03,679
didn't quite know how to overcome

00:28:01,600 --> 00:28:07,039
without sort of visiting large chunks

00:28:03,679 --> 00:28:10,480
of the code base um and so

00:28:07,039 --> 00:28:13,520
to do that what um started doing

00:28:10,480 --> 00:28:15,840
is uh written a thing calling the the

00:28:13,520 --> 00:28:18,320
core library

00:28:15,840 --> 00:28:19,039
and i've chosen to do this in in raw c

00:28:18,320 --> 00:28:23,760
code

00:28:19,039 --> 00:28:23,760
which will um uh

00:28:23,919 --> 00:28:27,200
be sort of a fulfillment of another

00:28:25,919 --> 00:28:30,640
request that we've had

00:28:27,200 --> 00:28:31,440
um and uh which is to have sort of a

00:28:30,640 --> 00:28:33,200
more minimal

00:28:31,440 --> 00:28:34,559
um library that makes it easier for it

00:28:33,200 --> 00:28:37,600
for some people to do

00:28:34,559 --> 00:28:39,760
to use um but uh

00:28:37,600 --> 00:28:40,720
the the idea is that we rebuild open xr

00:28:39,760 --> 00:28:43,200
on top of this

00:28:40,720 --> 00:28:44,480
um and have sort of some more uh threat

00:28:43,200 --> 00:28:48,640
oriented apis

00:28:44,480 --> 00:28:50,720
um and so what does this really

00:28:48,640 --> 00:28:52,320
what does this entail and what is this

00:28:50,720 --> 00:28:54,799
um

00:28:52,320 --> 00:28:56,559
what what does this this mean um i

00:28:54,799 --> 00:28:57,760
thought it would show a couple of charts

00:28:56,559 --> 00:28:59,840
and sort of talk through some of the

00:28:57,760 --> 00:29:01,200
things that have been that i've been

00:28:59,840 --> 00:29:02,880
focusing on

00:29:01,200 --> 00:29:04,720
the first one is just literally opening

00:29:02,880 --> 00:29:07,200
up a file um

00:29:04,720 --> 00:29:08,640
you know when you have a cpus plus class

00:29:07,200 --> 00:29:09,840
it's got a standard map that has all

00:29:08,640 --> 00:29:11,679
your attributes in it

00:29:09,840 --> 00:29:13,120
you end up doing lots of news and freeze

00:29:11,679 --> 00:29:15,200
and these sorts of things

00:29:13,120 --> 00:29:16,640
and so um the next couple of charts that

00:29:15,200 --> 00:29:19,760
i'll show you they're all

00:29:16,640 --> 00:29:20,320
um basically doing the same test which

00:29:19,760 --> 00:29:24,480
is

00:29:20,320 --> 00:29:27,919
reading um i think 120

00:29:24,480 --> 00:29:31,360
exr images uh off of disc

00:29:27,919 --> 00:29:32,880
that are um zip s compressed so that's

00:29:31,360 --> 00:29:36,880
the 16 scan lines per

00:29:32,880 --> 00:29:39,200
per chunk um compression um

00:29:36,880 --> 00:29:40,000
and so this this first one is just

00:29:39,200 --> 00:29:42,880
literally the time

00:29:40,000 --> 00:29:43,840
it takes if you when you say open right

00:29:42,880 --> 00:29:47,039
so basically

00:29:43,840 --> 00:29:48,000
when you construct the the um the the

00:29:47,039 --> 00:29:50,640
input file

00:29:48,000 --> 00:29:51,760
uh class and it parses the header um and

00:29:50,640 --> 00:29:54,320
so the red the red

00:29:51,760 --> 00:29:56,640
chunk is how long it takes existing plus

00:29:54,320 --> 00:29:57,360
class and the the blue line is is the

00:29:56,640 --> 00:29:59,760
the new

00:29:57,360 --> 00:30:01,279
thing um and so you can see that this

00:29:59,760 --> 00:30:03,360
lower overhead and

00:30:01,279 --> 00:30:06,080
largely this is around new and delete

00:30:03,360 --> 00:30:09,120
and creating maps versus just having um

00:30:06,080 --> 00:30:11,279
a structure um

00:30:09,120 --> 00:30:12,640
and so that's maybe not so interesting

00:30:11,279 --> 00:30:13,440
one of the things that starts getting

00:30:12,640 --> 00:30:14,960
more interesting

00:30:13,440 --> 00:30:16,960
is this is the same thing but when you

00:30:14,960 --> 00:30:18,399
actually close the files so you

00:30:16,960 --> 00:30:20,799
i'm not talking about reading data but

00:30:18,399 --> 00:30:22,240
just saying you know effectively close

00:30:20,799 --> 00:30:24,080
right and one of the things you begin

00:30:22,240 --> 00:30:25,440
noticing is again it's basically

00:30:24,080 --> 00:30:27,840
constant speed

00:30:25,440 --> 00:30:29,520
but in in the existing open xl library

00:30:27,840 --> 00:30:32,399
there's actually a growing

00:30:29,520 --> 00:30:33,760
time to close as the number of number of

00:30:32,399 --> 00:30:36,320
threads

00:30:33,760 --> 00:30:37,600
increases and this is because internally

00:30:36,320 --> 00:30:39,520
it's having to create a bunch

00:30:37,600 --> 00:30:41,679
of internal structures so that it can

00:30:39,520 --> 00:30:44,000
keep threads happy

00:30:41,679 --> 00:30:45,200
and there's a different way of building

00:30:44,000 --> 00:30:46,799
building the

00:30:45,200 --> 00:30:49,039
data structures to to not have to do

00:30:46,799 --> 00:30:49,039
that

00:30:49,520 --> 00:30:56,399
and um this final chart um

00:30:53,200 --> 00:30:57,840
is uh is is the ratio it's

00:30:56,399 --> 00:30:59,679
it's i couldn't figure out a good way of

00:30:57,840 --> 00:31:02,080
drawing this but this is the ratio

00:30:59,679 --> 00:31:03,919
between the old library and this new

00:31:02,080 --> 00:31:08,480
core layer

00:31:03,919 --> 00:31:10,320
in terms of of doing actual image read

00:31:08,480 --> 00:31:12,640
and what i'm doing is i'm reading the

00:31:10,320 --> 00:31:13,519
image off disk and reformatting it into

00:31:12,640 --> 00:31:16,720
rgba

00:31:13,519 --> 00:31:18,000
interleaved and so the majority of the

00:31:16,720 --> 00:31:21,760
time is of course spent

00:31:18,000 --> 00:31:23,120
um in an unzip um but one of the things

00:31:21,760 --> 00:31:25,200
you'll immediately see

00:31:23,120 --> 00:31:26,640
is that my machine that i was testing on

00:31:25,200 --> 00:31:27,679
only has eight threads and hyper

00:31:26,640 --> 00:31:29,679
threading

00:31:27,679 --> 00:31:30,960
helps a little bit but isn't the

00:31:29,679 --> 00:31:33,279
greatest thing ever

00:31:30,960 --> 00:31:34,320
uh but that there's uh that we're

00:31:33,279 --> 00:31:36,720
getting some serious

00:31:34,320 --> 00:31:37,519
wins um in terms of reducing the

00:31:36,720 --> 00:31:39,919
overhead

00:31:37,519 --> 00:31:42,240
um of of having multiple threads

00:31:39,919 --> 00:31:45,519
hammering away at the same file

00:31:42,240 --> 00:31:46,159
um and so uh that that seems like a good

00:31:45,519 --> 00:31:48,480
thing

00:31:46,159 --> 00:31:48,480
um

00:31:49,840 --> 00:31:57,519
and and so

00:31:54,399 --> 00:31:57,519
darn it sorry

00:31:58,080 --> 00:32:04,240
wait go back um

00:32:01,440 --> 00:32:06,720
i uh the the thing that we're still

00:32:04,240 --> 00:32:10,159
working on is finishing uh right support

00:32:06,720 --> 00:32:12,880
for this um and then starting to replace

00:32:10,159 --> 00:32:14,559
the underlying c plus bits and so we

00:32:12,880 --> 00:32:15,519
aren't envisioning any sort of change

00:32:14,559 --> 00:32:17,519
for the existing c

00:32:15,519 --> 00:32:19,360
plus api so everyone should sort of

00:32:17,519 --> 00:32:22,159
transparently get this

00:32:19,360 --> 00:32:23,279
um we will be adding some uh additional

00:32:22,159 --> 00:32:26,840
api

00:32:23,279 --> 00:32:30,320
as we move forward to expose

00:32:26,840 --> 00:32:33,360
um some of this sort of low level access

00:32:30,320 --> 00:32:36,880
to this one example of that is in

00:32:33,360 --> 00:32:38,159
in when you're reading a a tiled file

00:32:36,880 --> 00:32:39,919
rather than having to say set frame

00:32:38,159 --> 00:32:42,399
buffer and then read

00:32:39,919 --> 00:32:43,600
as separate calls which of course

00:32:42,399 --> 00:32:46,399
introduces a

00:32:43,600 --> 00:32:47,760
thread unsafe uh point we'll make a

00:32:46,399 --> 00:32:48,159
we'll add a call that basically just

00:32:47,760 --> 00:32:51,039
says

00:32:48,159 --> 00:32:51,679
you know read and unpack um a tile all

00:32:51,039 --> 00:32:55,039
at once

00:32:51,679 --> 00:32:58,480
um and and so we'll be adding some api

00:32:55,039 --> 00:33:01,679
but the existing api shouldn't change

00:32:58,480 --> 00:33:04,640
and so um with that

00:33:01,679 --> 00:33:06,480
um i'll thank owen once again for for

00:33:04,640 --> 00:33:09,039
spending the summer with us

00:33:06,480 --> 00:33:10,880
it's been great having him be involved

00:33:09,039 --> 00:33:11,760
and uh i think we're going to start

00:33:10,880 --> 00:33:15,200
doing some

00:33:11,760 --> 00:33:17,760
questions right carrie yeah i'll just uh

00:33:15,200 --> 00:33:18,559
add my thanks to owen and say to

00:33:17,760 --> 00:33:21,360
everybody

00:33:18,559 --> 00:33:23,440
that uh owen's looking for a job if

00:33:21,360 --> 00:33:25,440
you're hiring let him know

00:33:23,440 --> 00:33:26,720
this is it's been a great project and a

00:33:25,440 --> 00:33:31,120
great experience um

00:33:26,720 --> 00:33:32,720
working with him um which is a

00:33:31,120 --> 00:33:34,720
testament to him and to the google

00:33:32,720 --> 00:33:38,159
summer code project

00:33:34,720 --> 00:33:40,399
so um uh thanks again

00:33:38,159 --> 00:33:41,760
um one final thing that i wanted to

00:33:40,399 --> 00:33:45,279
mention um

00:33:41,760 --> 00:33:48,559
openexr is migrating to a new

00:33:45,279 --> 00:33:50,960
contributor license agreement this um

00:33:48,559 --> 00:33:52,080
there were some companies balked at the

00:33:50,960 --> 00:33:55,120
terms of the

00:33:52,080 --> 00:34:00,399
um the existing agreement and

00:33:55,120 --> 00:34:03,360
the software foundation

00:34:00,399 --> 00:34:04,000
governing board legal committee worked

00:34:03,360 --> 00:34:07,519
out

00:34:04,000 --> 00:34:09,280
a new set of terms which we've

00:34:07,519 --> 00:34:11,599
we're in the process of adopting for the

00:34:09,280 --> 00:34:14,639
the library which means that all

00:34:11,599 --> 00:34:18,800
contributors need to resign

00:34:14,639 --> 00:34:19,919
the new cla um it's not

00:34:18,800 --> 00:34:22,320
from layman's point of view

00:34:19,919 --> 00:34:25,599
significantly different but um

00:34:22,320 --> 00:34:26,480
um but anyway if you're uh in a position

00:34:25,599 --> 00:34:29,440
to submit a

00:34:26,480 --> 00:34:31,679
a pull request to the library you're

00:34:29,440 --> 00:34:33,679
going to need to have signed the cla

00:34:31,679 --> 00:34:36,960
first

00:34:33,679 --> 00:34:40,399
and again

00:34:36,960 --> 00:34:46,159
our contact information and with that

00:34:40,399 --> 00:34:46,159
we can go over questions

00:34:46,879 --> 00:34:51,679
so uh we have one question that's open

00:34:49,599 --> 00:34:54,079
right now from dimitro korolov

00:34:51,679 --> 00:34:54,800
it's he asks will python binding be

00:34:54,079 --> 00:34:57,760
included in

00:34:54,800 --> 00:34:58,560
opening xr3 or other planned versions

00:34:57,760 --> 00:35:01,280
and

00:34:58,560 --> 00:35:02,000
like in the current uh like currently

00:35:01,280 --> 00:35:03,680
and the third

00:35:02,000 --> 00:35:07,200
part binding and he gave a link

00:35:03,680 --> 00:35:08,480
referring to um

00:35:07,200 --> 00:35:10,079
i have to look what the link is

00:35:08,480 --> 00:35:10,720
referring to carrie do you want to

00:35:10,079 --> 00:35:14,079
answer that

00:35:10,720 --> 00:35:16,000
are you shh

00:35:14,079 --> 00:35:17,520
yeah kimball you want to describe the

00:35:16,000 --> 00:35:21,119
mechanism through which

00:35:17,520 --> 00:35:24,160
um um open exr will build

00:35:21,119 --> 00:35:26,720
imaf oh well um

00:35:24,160 --> 00:35:27,839
you know okay i mean imath will be

00:35:26,720 --> 00:35:30,880
building through a

00:35:27,839 --> 00:35:31,200
uh an external project thing um however

00:35:30,880 --> 00:35:34,400
the

00:35:31,200 --> 00:35:37,440
the thing to note um and

00:35:34,400 --> 00:35:39,040
is that um the the python bindings that

00:35:37,440 --> 00:35:40,800
have been in the opening cyberpuzzler

00:35:39,040 --> 00:35:43,520
were only for uh imath

00:35:40,800 --> 00:35:44,000
uh previously and we never actually had

00:35:43,520 --> 00:35:45,680
python

00:35:44,000 --> 00:35:47,040
bindings for opening xr they were always

00:35:45,680 --> 00:35:50,560
an external project

00:35:47,040 --> 00:35:53,680
um and so i think as we move forward

00:35:50,560 --> 00:35:56,240
one of the things that we will uh

00:35:53,680 --> 00:35:58,079
we will look at doing is converting the

00:35:56,240 --> 00:35:59,119
existing imath bindings to use pi bind

00:35:58,079 --> 00:36:02,640
00:35:59,119 --> 00:36:04,320
and then potentially add at open exr

00:36:02,640 --> 00:36:06,400
versions of that to read the opening sr

00:36:04,320 --> 00:36:08,720
files directly

00:36:06,400 --> 00:36:10,240
and that may involve talking to the

00:36:08,720 --> 00:36:13,119
folks that maintain the

00:36:10,240 --> 00:36:15,920
pi open exr bindings and and getting

00:36:13,119 --> 00:36:17,200
them to contribute or

00:36:15,920 --> 00:36:19,440
i don't think we've we've gotten that

00:36:17,200 --> 00:36:20,720
far yet but

00:36:19,440 --> 00:36:23,280
hopefully that hopefully that answers

00:36:20,720 --> 00:36:23,280
that question

00:36:24,880 --> 00:36:28,720
and then we have another um answered

00:36:27,200 --> 00:36:29,680
question shall i go ahead and read that

00:36:28,720 --> 00:36:32,880
so that it's on the

00:36:29,680 --> 00:36:36,800
recording sure um

00:36:32,880 --> 00:36:38,960
that is uh eric reineke asked

00:36:36,800 --> 00:36:41,040
what are the expected uses of display

00:36:38,960 --> 00:36:41,599
window versus two frame line attributes

00:36:41,040 --> 00:36:43,119
and

00:36:41,599 --> 00:36:45,359
joseph do you want to read your answer

00:36:43,119 --> 00:36:48,640
since uh or

00:36:45,359 --> 00:36:52,320
it's inordinately long um but

00:36:48,640 --> 00:36:54,480
um let's see i mean i think

00:36:52,320 --> 00:36:55,680
that the proposed frame line thing is in

00:36:54,480 --> 00:36:59,119
a way more general

00:36:55,680 --> 00:37:02,160
um the asc is is

00:36:59,119 --> 00:37:04,160
starting this project and it's

00:37:02,160 --> 00:37:05,280
not going to be a simple attribute it'll

00:37:04,160 --> 00:37:07,599
probably be like

00:37:05,280 --> 00:37:08,800
json serialized something like that it's

00:37:07,599 --> 00:37:12,079
intended

00:37:08,800 --> 00:37:13,839
to be applicable not just to open the xr

00:37:12,079 --> 00:37:15,760
but to a variety of other

00:37:13,839 --> 00:37:17,680
file formats as well which is why we

00:37:15,760 --> 00:37:19,839
carry it as a serialized stream

00:37:17,680 --> 00:37:22,079
and you could carry in theory you know n

00:37:19,839 --> 00:37:25,359
different

00:37:22,079 --> 00:37:27,119
frame lines within there for

00:37:25,359 --> 00:37:29,119
people have discussed having different

00:37:27,119 --> 00:37:33,280
crops for screeners versus

00:37:29,119 --> 00:37:35,119
for dailies other applications as well

00:37:33,280 --> 00:37:38,000
so

00:37:35,119 --> 00:37:38,480
i think it's more general than that than

00:37:38,000 --> 00:37:39,920
the

00:37:38,480 --> 00:37:42,480
display window versus data window

00:37:39,920 --> 00:37:42,480
dichotomy

00:37:43,920 --> 00:37:47,680
yeah i think further joseph is that they

00:37:45,920 --> 00:37:49,599
don't guarantee that they even make a

00:37:47,680 --> 00:37:51,280
rectangle

00:37:49,599 --> 00:37:53,200
whereas the display window is a

00:37:51,280 --> 00:37:53,920
rectangle the frame lines could cross

00:37:53,200 --> 00:37:56,320
each other

00:37:53,920 --> 00:37:58,320
for example and the continuation of that

00:37:56,320 --> 00:38:00,640
cross could be present

00:37:58,320 --> 00:38:02,000
not in what's being discussed this week

00:38:00,640 --> 00:38:06,240
okay but so far

00:38:02,000 --> 00:38:08,800
yeah but but um this could happen

00:38:06,240 --> 00:38:10,560
yeah i mean i would encourage anybody

00:38:08,800 --> 00:38:13,040
who really cares about this you can

00:38:10,560 --> 00:38:14,560
email me i it's jay goldstone at

00:38:13,040 --> 00:38:16,240
erie.com

00:38:14,560 --> 00:38:19,119
and i could put you in touch with jesse

00:38:16,240 --> 00:38:21,119
carosi who is

00:38:19,119 --> 00:38:24,160
kind of writing heard on the whole asc

00:38:21,119 --> 00:38:25,520
advanced metadata stuff and

00:38:24,160 --> 00:38:33,839
if you're not getting enough slack

00:38:25,520 --> 00:38:33,839
action then definitely this is for you

00:38:34,079 --> 00:38:38,079
and that appears to wrap it up for our

00:38:35,599 --> 00:38:38,079
questions

00:38:39,920 --> 00:38:48,560
so the imaf repo is available now

00:38:43,359 --> 00:38:48,560
for um for preview at uh

00:38:48,880 --> 00:38:52,480
github.com academy software foundation

00:38:51,520 --> 00:38:55,839
slash imath

00:38:52,480 --> 00:38:58,800
um take a look um it's pre-release

00:38:55,839 --> 00:39:00,720
there's a number of other things we need

00:38:58,800 --> 00:39:03,760
to finish off before we

00:39:00,720 --> 00:39:04,400
um we make an official release in the

00:39:03,760 --> 00:39:06,240
next

00:39:04,400 --> 00:39:08,000
week or so the changes that we

00:39:06,240 --> 00:39:10,720
highlighted in

00:39:08,000 --> 00:39:11,920
the the organization of the imac of the

00:39:10,720 --> 00:39:16,560
open xr repo

00:39:11,920 --> 00:39:18,400
are going to go live so as of a couple

00:39:16,560 --> 00:39:20,079
within the next week or so the master

00:39:18,400 --> 00:39:23,280
branch will go away

00:39:20,079 --> 00:39:27,359
and the layout of the

00:39:23,280 --> 00:39:30,720
um the the dev branch will change

00:39:27,359 --> 00:39:32,160
significantly and will

00:39:30,720 --> 00:39:34,160
start to roll out the changes that

00:39:32,160 --> 00:39:37,440
kimball has has been working on

00:39:34,160 --> 00:39:40,240
has been describing and go through

00:39:37,440 --> 00:39:42,560
a lot of pre-release you know discussion

00:39:40,240 --> 00:39:45,280
and evaluation and testing so

00:39:42,560 --> 00:39:45,920
um take a look give us any feedback

00:39:45,280 --> 00:39:48,880
we're

00:39:45,920 --> 00:39:50,880
um we're more than open to uh to taking

00:39:48,880 --> 00:39:52,480
any suggestions about

00:39:50,880 --> 00:39:54,240
you know what you'd like to see what

00:39:52,480 --> 00:39:58,480
you'd like to not see

00:39:54,240 --> 00:39:59,760
um so um please let us know

00:39:58,480 --> 00:40:01,680
but i think we will mail out

00:39:59,760 --> 00:40:02,480
instructions when we just because we're

00:40:01,680 --> 00:40:04,079
going to have to

00:40:02,480 --> 00:40:05,599
force push a couple of things to the git

00:40:04,079 --> 00:40:07,200
repo um to

00:40:05,599 --> 00:40:09,280
to do that rename we will send out

00:40:07,200 --> 00:40:11,680
instructions um so that you can

00:40:09,280 --> 00:40:12,880
sort of have an easy path to upgrading

00:40:11,680 --> 00:40:16,000
if you have a local

00:40:12,880 --> 00:40:18,319
local clone of the repo i

00:40:16,000 --> 00:40:19,599
i'd like to add a note about the imath

00:40:18,319 --> 00:40:23,119
which is just that

00:40:19,599 --> 00:40:26,800
um part of the original point of that

00:40:23,119 --> 00:40:27,280
body of work in particular of cleaning

00:40:26,800 --> 00:40:31,040
it off

00:40:27,280 --> 00:40:32,720
is to make it easier for other projects

00:40:31,040 --> 00:40:36,079
to be able to use

00:40:32,720 --> 00:40:38,079
the straightforward vector and matrix

00:40:36,079 --> 00:40:40,960
and other math odds and ends part of

00:40:38,079 --> 00:40:43,040
imap without like i think in the past

00:40:40,960 --> 00:40:45,440
many projects who maybe wanted to do

00:40:43,040 --> 00:40:47,920
that felt like having to pull in

00:40:45,440 --> 00:40:49,440
all of openexr even if they weren't

00:40:47,920 --> 00:40:51,280
interested in reading and writing images

00:40:49,440 --> 00:40:53,920
through that interface was

00:40:51,280 --> 00:40:56,400
a bit of a high bar and a bigger

00:40:53,920 --> 00:41:00,400
dependency to have to swallow

00:40:56,400 --> 00:41:01,040
and so because our intent is to make

00:41:00,400 --> 00:41:04,000
this

00:41:01,040 --> 00:41:05,680
you know painless and attractive for

00:41:04,000 --> 00:41:08,240
people to use

00:41:05,680 --> 00:41:08,720
these vector classes instead of making

00:41:08,240 --> 00:41:11,520
you know

00:41:08,720 --> 00:41:13,280
yet another equivalent set for every

00:41:11,520 --> 00:41:16,480
other library

00:41:13,280 --> 00:41:19,599
we were especially keen to hear feedback

00:41:16,480 --> 00:41:21,680
from the other library maintainers about

00:41:19,599 --> 00:41:22,720
whether we've done everything that you

00:41:21,680 --> 00:41:24,880
need

00:41:22,720 --> 00:41:26,000
in order to do that or if there's still

00:41:24,880 --> 00:41:35,040
time to fix

00:41:26,000 --> 00:41:36,720
anything is what i'm trying to say

00:41:35,040 --> 00:41:38,800
i think another positive aspect of that

00:41:36,720 --> 00:41:41,359
larry is that now imaf

00:41:38,800 --> 00:41:42,800
can continue on and do things that it

00:41:41,359 --> 00:41:43,680
might not have originally been thought

00:41:42,800 --> 00:41:46,160
of because

00:41:43,680 --> 00:41:47,920
it was part of exr but now it can have

00:41:46,160 --> 00:41:49,280
its own future that could be bigger and

00:41:47,920 --> 00:41:50,240
better than that i think that's kind of

00:41:49,280 --> 00:41:51,920
an exciting

00:41:50,240 --> 00:41:53,280
opportunity because when we first wrote

00:41:51,920 --> 00:41:54,079
it one of the things that was

00:41:53,280 --> 00:41:56,880
interesting about

00:41:54,079 --> 00:41:58,079
uptake on openexr is how much feedback

00:41:56,880 --> 00:42:00,319
we got

00:41:58,079 --> 00:42:02,000
about how nifty it was that there's this

00:42:00,319 --> 00:42:04,240
imath library in there

00:42:02,000 --> 00:42:05,520
and people were excited about that you

00:42:04,240 --> 00:42:08,560
know all those years ago

00:42:05,520 --> 00:42:10,160
and but then it sort of stagnated and it

00:42:08,560 --> 00:42:10,800
stayed what it was so it's nice that we

00:42:10,160 --> 00:42:13,200
could now

00:42:10,800 --> 00:42:14,640
continue and have other sort of 3d

00:42:13,200 --> 00:42:16,720
library or whatever

00:42:14,640 --> 00:42:18,160
kind of convenient functions that might

00:42:16,720 --> 00:42:19,839
go in there that i think will be nifty

00:42:18,160 --> 00:42:22,240
for the future

00:42:19,839 --> 00:42:23,119
but i think one of the main nifty things

00:42:22,240 --> 00:42:25,760
about imath

00:42:23,119 --> 00:42:27,760
is the fact that it's simple it's simple

00:42:25,760 --> 00:42:30,079
it's lightweight

00:42:27,760 --> 00:42:31,119
it doesn't do there's a lot of things

00:42:30,079 --> 00:42:33,040
that it doesn't do

00:42:31,119 --> 00:42:34,160
but our philosophy is if you want a

00:42:33,040 --> 00:42:36,960
whole lot more

00:42:34,160 --> 00:42:38,960
use eigen or use something else the

00:42:36,960 --> 00:42:40,560
value of this library is that it's

00:42:38,960 --> 00:42:42,160
primarily just a lightweight

00:42:40,560 --> 00:42:45,359
representation

00:42:42,160 --> 00:42:47,119
so i think when we first you know over

00:42:45,359 --> 00:42:49,599
the last couple years we've been

00:42:47,119 --> 00:42:50,720
talking about this project um we've

00:42:49,599 --> 00:42:53,839
raised several

00:42:50,720 --> 00:42:57,359
possibilities for big changes or

00:42:53,839 --> 00:43:00,000
you know scope creep or whatever and i

00:42:57,359 --> 00:43:02,160
i think we want to do whatever we can to

00:43:00,000 --> 00:43:04,960
keep that in check to a certain degree

00:43:02,160 --> 00:43:07,440
i think we we are willing to entertain

00:43:04,960 --> 00:43:10,560
breaking backwards compatibility

00:43:07,440 --> 00:43:11,359
um if the situation calls for it if

00:43:10,560 --> 00:43:14,880
there's a really good

00:43:11,359 --> 00:43:16,800
there's a logic behind it but again this

00:43:14,880 --> 00:43:17,599
is not a library that we're expecting to

00:43:16,800 --> 00:43:27,280
see

00:43:17,599 --> 00:43:30,160
grow tremendously

00:43:27,280 --> 00:43:32,000
well if there's no other questions we'll

00:43:30,160 --> 00:43:40,880
call it a wrap thanks for

00:43:32,000 --> 00:43:40,880

YouTube URL: https://www.youtube.com/watch?v=ktAJch1u5BE


