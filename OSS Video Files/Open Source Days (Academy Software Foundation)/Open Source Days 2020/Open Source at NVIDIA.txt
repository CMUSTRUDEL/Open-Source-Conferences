Title: Open Source at NVIDIA
Publication date: 2020-08-24
Playlist: Open Source Days 2020
Description: 
	Open Source at NVIDIA
Speakers: Dirk Van Gelder

For more information about the Academy Software Foundation go to: https://www.aswf.io/

NVIDIA is a part of the open source community. We use open source software is used in almost every software project at toe company. In addition, we create and maintain dozens of open source software libraries for areas like deep learning, HPC, autonomous machines, rendering, design & visualization, and others. In this talk we will discuss the processes NVIDIA has put in place to streamline the licensing and intellectual property issues around open source software adoption, and discuss some of the public contributions the company has made. Recently NVIDIA has embraced Pixarâ€™s USD and Hydra as open standards to describe and render complex 3D worlds. We will discuss how these libraries are being adapted within NVIDIA to enable real time performance on complex virtual worlds, ray tracing with Vulkan and DX12, drawing many viewports concurrently, and streaming computational results from libraries like our PhysX simulation engine.
Captions: 
	00:00:00,160 --> 00:00:03,360
hi everybody uh thanks for joining us

00:00:02,080 --> 00:00:05,120
today um

00:00:03,360 --> 00:00:06,560
so we're here to talk about open source

00:00:05,120 --> 00:00:08,880
at nvidia

00:00:06,560 --> 00:00:10,559
how we use open source software how we

00:00:08,880 --> 00:00:12,480
contribute to open source software and

00:00:10,559 --> 00:00:13,679
how we modify open source software to

00:00:12,480 --> 00:00:16,640
meet our needs

00:00:13,679 --> 00:00:18,880
um a little bit about me um my name is

00:00:16,640 --> 00:00:20,400
dirk van gelder i just joined nvidia so

00:00:18,880 --> 00:00:22,720
i'm a newbie and i'm trying to learn

00:00:20,400 --> 00:00:24,240
as we go um but before that i was an

00:00:22,720 --> 00:00:27,359
engineering lead at pixar animation

00:00:24,240 --> 00:00:28,880
studios for uh 23 years

00:00:27,359 --> 00:00:30,480
but very excited to be here with you

00:00:28,880 --> 00:00:31,920
today

00:00:30,480 --> 00:00:33,520
so i wanted to talk a little bit about

00:00:31,920 --> 00:00:34,160
the history of open source and computer

00:00:33,520 --> 00:00:36,320
graphics

00:00:34,160 --> 00:00:37,680
because it used to be really hard to do

00:00:36,320 --> 00:00:40,079
when i started

00:00:37,680 --> 00:00:41,760
at pixar in the 90s when steve jobs ran

00:00:40,079 --> 00:00:43,680
the company

00:00:41,760 --> 00:00:45,440
a lot of the studios you know the full

00:00:43,680 --> 00:00:46,719
proprietary code stacks were considered

00:00:45,440 --> 00:00:48,399
a competitive advantage

00:00:46,719 --> 00:00:50,559
um you know you wanted to lock away your

00:00:48,399 --> 00:00:52,000
intellectual property your patents

00:00:50,559 --> 00:00:53,520
um and you wanted to keep that to

00:00:52,000 --> 00:00:55,680
yourself because that was what was

00:00:53,520 --> 00:00:57,680
considered to give you an edge

00:00:55,680 --> 00:00:59,039
so we gave we made a lot of cool

00:00:57,680 --> 00:01:00,399
technology but it was really hard to

00:00:59,039 --> 00:01:01,840
share that with other people we couldn't

00:01:00,399 --> 00:01:03,120
talk about it with our co-workers at

00:01:01,840 --> 00:01:04,400
other companies and that felt kind of

00:01:03,120 --> 00:01:07,280
isolating

00:01:04,400 --> 00:01:09,680
um so i led uh pixar's first open source

00:01:07,280 --> 00:01:11,280
project open subdiv

00:01:09,680 --> 00:01:12,960
and it was really hard to figure out

00:01:11,280 --> 00:01:13,760
what we do with the patents what we do

00:01:12,960 --> 00:01:15,840
with

00:01:13,760 --> 00:01:17,920
licenses and what it even means and it

00:01:15,840 --> 00:01:20,080
was you know we managed to get through

00:01:17,920 --> 00:01:21,200
that and get it out there but it was it

00:01:20,080 --> 00:01:23,040
was harder

00:01:21,200 --> 00:01:25,040
and now it's much easier to do you see

00:01:23,040 --> 00:01:26,320
open source software in every place in

00:01:25,040 --> 00:01:27,840
computer graphics

00:01:26,320 --> 00:01:29,920
visual effects studios are running on

00:01:27,840 --> 00:01:32,240
open source operating systems

00:01:29,920 --> 00:01:34,720
and packages across the board and now we

00:01:32,240 --> 00:01:36,640
have an academy software foundation

00:01:34,720 --> 00:01:38,720
which runs this for us and i think it's

00:01:36,640 --> 00:01:40,000
uh it's a very cool development it was

00:01:38,720 --> 00:01:41,360
not always like this

00:01:40,000 --> 00:01:44,079
and it's pretty psyched i'm pretty

00:01:41,360 --> 00:01:45,520
psyched that it is the way it is

00:01:44,079 --> 00:01:47,200
now if you want to use open source

00:01:45,520 --> 00:01:48,479
software i want to talk a little bit

00:01:47,200 --> 00:01:50,560
about some of the things you might want

00:01:48,479 --> 00:01:52,960
to do

00:01:50,560 --> 00:01:54,880
one of those is licenses now this is

00:01:52,960 --> 00:01:55,759
review for a lot of people on this call

00:01:54,880 --> 00:01:57,920
but just in case

00:01:55,759 --> 00:01:58,799
um to talk about these things some

00:01:57,920 --> 00:02:00,640
licenses are

00:01:58,799 --> 00:02:02,240
permissive uh some software could come

00:02:00,640 --> 00:02:04,560
with a bsd and mit

00:02:02,240 --> 00:02:06,320
or apache license those are pretty

00:02:04,560 --> 00:02:07,439
equivalent apache says some things about

00:02:06,320 --> 00:02:08,640
patents

00:02:07,439 --> 00:02:10,399
i believe the academy software

00:02:08,640 --> 00:02:12,560
foundation is trying to standardize on

00:02:10,399 --> 00:02:14,319
you know something around apache

00:02:12,560 --> 00:02:15,599
and those generally if you're at a

00:02:14,319 --> 00:02:17,520
company who knows

00:02:15,599 --> 00:02:19,120
who has a pipeline for this setup if you

00:02:17,520 --> 00:02:20,080
have software with one of these licenses

00:02:19,120 --> 00:02:22,080
you can just ask

00:02:20,080 --> 00:02:24,080
and go through a process and use it and

00:02:22,080 --> 00:02:25,920
that's fantastic

00:02:24,080 --> 00:02:27,680
the software i work on omniverse has

00:02:25,920 --> 00:02:30,239
over 100 open source license

00:02:27,680 --> 00:02:32,239
licenses included within it but there

00:02:30,239 --> 00:02:33,680
are some things to watch out for

00:02:32,239 --> 00:02:36,000
some of the licenses are more

00:02:33,680 --> 00:02:38,000
restrictive like the gnu public license

00:02:36,000 --> 00:02:40,080
and the lesser-known public license the

00:02:38,000 --> 00:02:42,959
gnu public license says things about

00:02:40,080 --> 00:02:44,160
if you use software with a gpl license

00:02:42,959 --> 00:02:46,800
then your own software

00:02:44,160 --> 00:02:48,720
uh is it needs to be open source um the

00:02:46,800 --> 00:02:50,000
lgpl doesn't say that but it says some

00:02:48,720 --> 00:02:51,280
other things so

00:02:50,000 --> 00:02:52,640
if you do want to use open source

00:02:51,280 --> 00:02:53,760
software and it has one of those

00:02:52,640 --> 00:02:56,560
licenses

00:02:53,760 --> 00:02:58,159
be very sure to ask at your company what

00:02:56,560 --> 00:02:59,440
that means and make sure that that's

00:02:58,159 --> 00:03:01,840
cleared before you use it

00:02:59,440 --> 00:03:03,440
just to avoid complications with a

00:03:01,840 --> 00:03:07,200
disclaimer that i'm not a lawyer but

00:03:03,440 --> 00:03:07,200
these are just things to keep in mind

00:03:08,000 --> 00:03:12,080
now one question is why would nvidia

00:03:10,640 --> 00:03:13,760
want to use open source want to

00:03:12,080 --> 00:03:15,120
contribute to open source software why

00:03:13,760 --> 00:03:17,680
is that important

00:03:15,120 --> 00:03:19,440
now the thing is you know we make

00:03:17,680 --> 00:03:20,720
platforms and we make chips and we make

00:03:19,440 --> 00:03:22,879
a whole bunch of other things but we

00:03:20,720 --> 00:03:24,319
want to empower developers to use them

00:03:22,879 --> 00:03:25,920
and so if you're using a chip that has

00:03:24,319 --> 00:03:27,280
several thousand cores on it and you

00:03:25,920 --> 00:03:28,560
want to run the software on it that's

00:03:27,280 --> 00:03:30,319
hard to do

00:03:28,560 --> 00:03:32,080
that takes a lot to do so we want to

00:03:30,319 --> 00:03:33,519
give developers software

00:03:32,080 --> 00:03:35,760
to be able to get the best use out of

00:03:33,519 --> 00:03:37,120
their gpus and particularly to use their

00:03:35,760 --> 00:03:38,560
latest features when we roll out a

00:03:37,120 --> 00:03:40,319
feature we want to have open source

00:03:38,560 --> 00:03:41,760
software that backs that feature

00:03:40,319 --> 00:03:43,599
so that people can learn how to use it

00:03:41,760 --> 00:03:44,720
and really take advantage of the gpu to

00:03:43,599 --> 00:03:46,400
their best abilities

00:03:44,720 --> 00:03:48,000
the gpus best abilities and their best

00:03:46,400 --> 00:03:49,920
abilities

00:03:48,000 --> 00:03:51,519
so i'm going to talk about a couple

00:03:49,920 --> 00:03:54,080
contributions that

00:03:51,519 --> 00:03:55,519
open that nvidia has made to open source

00:03:54,080 --> 00:03:56,360
but note on the bottom of the slide

00:03:55,519 --> 00:03:59,439
there

00:03:56,360 --> 00:04:01,519
developer.nvidia.com open dash source

00:03:59,439 --> 00:04:03,040
almost all of the software packages that

00:04:01,519 --> 00:04:04,959
we're going to talk about today

00:04:03,040 --> 00:04:07,040
are listed on that page and their github

00:04:04,959 --> 00:04:09,760
links are there and includes their open

00:04:07,040 --> 00:04:09,760
source licenses

00:04:10,720 --> 00:04:14,000
so if you want to find out more please

00:04:12,000 --> 00:04:15,519
do go there and and find out

00:04:14,000 --> 00:04:17,600
what those things are now the first

00:04:15,519 --> 00:04:18,880
category is deep learning

00:04:17,600 --> 00:04:21,280
deep learning is a really important

00:04:18,880 --> 00:04:22,720
market for nvidia this is

00:04:21,280 --> 00:04:24,720
you want to have a data center with

00:04:22,720 --> 00:04:26,400
thousands of gpus spinning up

00:04:24,720 --> 00:04:28,160
crunching a bunch of data and training

00:04:26,400 --> 00:04:29,919
neural networks to learn about that data

00:04:28,160 --> 00:04:32,000
and do things with it

00:04:29,919 --> 00:04:33,600
so these are all software open source

00:04:32,000 --> 00:04:35,280
software packages that nvidia has

00:04:33,600 --> 00:04:38,639
created or contributed to

00:04:35,280 --> 00:04:40,800
that allow you to do deep learning

00:04:38,639 --> 00:04:43,280
another area is containers we've made

00:04:40,800 --> 00:04:45,520
contributions to container runtimes

00:04:43,280 --> 00:04:46,320
to enable nvidia gpus to work with these

00:04:45,520 --> 00:04:48,800
containers

00:04:46,320 --> 00:04:50,240
we didn't invent docker or kubernetes

00:04:48,800 --> 00:04:52,240
but we've made contributions to help

00:04:50,240 --> 00:04:53,040
them run with nvidia gpus because that's

00:04:52,240 --> 00:04:57,280
very important

00:04:53,040 --> 00:04:59,199
in data centers in particular

00:04:57,280 --> 00:05:01,360
design and visualization remember these

00:04:59,199 --> 00:05:03,440
two material definition language is

00:05:01,360 --> 00:05:04,800
one of our contributions and universal

00:05:03,440 --> 00:05:06,960
scene description

00:05:04,800 --> 00:05:08,400
is a contribution by pixar we're going

00:05:06,960 --> 00:05:08,800
to come back to these and talk about

00:05:08,400 --> 00:05:11,840
these

00:05:08,800 --> 00:05:11,840
in more detail in a little bit

00:05:13,120 --> 00:05:16,639
autonomous vehicles we have our physics

00:05:15,199 --> 00:05:18,880
simulation engine

00:05:16,639 --> 00:05:20,720
which is super cool a gpu simulation

00:05:18,880 --> 00:05:22,000
where you can have thousands of objects

00:05:20,720 --> 00:05:24,720
simulating in real time i've been

00:05:22,000 --> 00:05:27,039
playing with that recently

00:05:24,720 --> 00:05:28,560
in addition we have image classification

00:05:27,039 --> 00:05:30,160
image classification means

00:05:28,560 --> 00:05:32,240
as you have an autonomous vehicle that's

00:05:30,160 --> 00:05:32,560
driving around you have to recognize

00:05:32,240 --> 00:05:34,560
like

00:05:32,560 --> 00:05:36,639
where's the what's a fire hydrant what's

00:05:34,560 --> 00:05:38,639
a stop sign what's another car

00:05:36,639 --> 00:05:40,080
what's a pedestrian so these are

00:05:38,639 --> 00:05:41,440
libraries that use artificial

00:05:40,080 --> 00:05:43,520
intelligence to

00:05:41,440 --> 00:05:44,960
help classify what's in the camera

00:05:43,520 --> 00:05:47,199
sensor that's coming to an

00:05:44,960 --> 00:05:49,440
autonomous vehicle and help that vehicle

00:05:47,199 --> 00:05:51,840
reason about what's in front of it

00:05:49,440 --> 00:05:53,840
similarly with redtail redtail is for

00:05:51,840 --> 00:05:55,919
autonomous mobile robotics

00:05:53,840 --> 00:05:56,960
but that allows perception and ai

00:05:55,919 --> 00:06:00,960
contributions

00:05:56,960 --> 00:06:00,960
for autonomous mobile robotics

00:06:01,199 --> 00:06:05,280
high performance computing you know if

00:06:03,280 --> 00:06:07,440
you want to take those thousands of

00:06:05,280 --> 00:06:08,880
cuda cores on your nvidia gpu and you

00:06:07,440 --> 00:06:10,400
want to crunch numbers with it

00:06:08,880 --> 00:06:12,240
we want to give you the math libraries

00:06:10,400 --> 00:06:12,720
to help you crunch those numbers without

00:06:12,240 --> 00:06:14,080
writing

00:06:12,720 --> 00:06:16,000
every single bit of low-level code

00:06:14,080 --> 00:06:17,280
yourself we want to give you libraries

00:06:16,000 --> 00:06:18,720
that allow you to get best gpu

00:06:17,280 --> 00:06:21,199
utilization so that your

00:06:18,720 --> 00:06:23,440
your methods run as fast as possible

00:06:21,199 --> 00:06:25,120
high performance computing

00:06:23,440 --> 00:06:26,880
and research this is where it gets kind

00:06:25,120 --> 00:06:28,319
of wild a lot of the

00:06:26,880 --> 00:06:30,560
research i wasn't aware of all the

00:06:28,319 --> 00:06:31,759
research that happens at nvidia

00:06:30,560 --> 00:06:34,240
i'm going to talk about a couple

00:06:31,759 --> 00:06:34,960
examples today one example that i'm

00:06:34,240 --> 00:06:38,080
going to talk about

00:06:34,960 --> 00:06:39,759
is gagan at the bottom image generation

00:06:38,080 --> 00:06:40,720
with generative adversarial neural

00:06:39,759 --> 00:06:45,520
networks

00:06:40,720 --> 00:06:45,520
and also kaulin inverse graphics

00:06:45,680 --> 00:06:49,520
so let me jump in here so what we're

00:06:47,840 --> 00:06:51,440
just what we're showing here is a video

00:06:49,520 --> 00:06:53,520
about gogong

00:06:51,440 --> 00:06:55,280
so again what this does is use

00:06:53,520 --> 00:06:56,479
generative adversarial neural networks

00:06:55,280 --> 00:06:57,919
literally neural networks that are

00:06:56,479 --> 00:06:59,919
fighting with each other

00:06:57,919 --> 00:07:02,080
which sounds amazing to be able to take

00:06:59,919 --> 00:07:04,720
that segmentation map on the left

00:07:02,080 --> 00:07:05,840
and say that color brown is rock and

00:07:04,720 --> 00:07:08,240
it's been trained

00:07:05,840 --> 00:07:09,840
on gazillions of pictures of nature

00:07:08,240 --> 00:07:11,840
about what rock looks like

00:07:09,840 --> 00:07:12,880
so it knows if you put brown there i'm

00:07:11,840 --> 00:07:14,639
going to figure out

00:07:12,880 --> 00:07:16,000
what rock is and i'm going to put rock

00:07:14,639 --> 00:07:17,919
in that scene

00:07:16,000 --> 00:07:19,199
using artificial intelligence here i'm

00:07:17,919 --> 00:07:20,720
going to put a rock i'm going to put a

00:07:19,199 --> 00:07:22,400
rock on the left-hand side

00:07:20,720 --> 00:07:24,319
and it knows that that rock needs to

00:07:22,400 --> 00:07:25,599
reflect in the water

00:07:24,319 --> 00:07:27,120
even though you didn't tell it to

00:07:25,599 --> 00:07:28,880
reflect in the water it's just looked at

00:07:27,120 --> 00:07:30,000
lots of pictures of rocks and water and

00:07:28,880 --> 00:07:32,319
it knows that there's reflection

00:07:30,000 --> 00:07:33,520
there similarly for the vegetation

00:07:32,319 --> 00:07:36,080
that's added

00:07:33,520 --> 00:07:37,599
for the clouds in the sky all the images

00:07:36,080 --> 00:07:38,720
on the right side are generated by a

00:07:37,599 --> 00:07:40,319
neural network

00:07:38,720 --> 00:07:42,319
it knows what mountains look like and it

00:07:40,319 --> 00:07:44,319
knows that mountains reflect in water

00:07:42,319 --> 00:07:45,919
and it knows here when you add snow into

00:07:44,319 --> 00:07:47,199
this particular scene that the sky

00:07:45,919 --> 00:07:48,560
should look different because it's been

00:07:47,199 --> 00:07:52,319
trained on images

00:07:48,560 --> 00:07:53,360
of the sky i'm going to talk about

00:07:52,319 --> 00:07:55,360
another one here

00:07:53,360 --> 00:07:57,440
this is an application which has been

00:07:55,360 --> 00:07:58,879
trained you see these pictures of cars

00:07:57,440 --> 00:08:00,800
on the left hand side

00:07:58,879 --> 00:08:03,520
it's never been shown a 3d model of a

00:08:00,800 --> 00:08:05,360
car this is with the library cowlin

00:08:03,520 --> 00:08:07,039
it's only been shown lots and lots and

00:08:05,360 --> 00:08:09,039
lots of pictures of cars

00:08:07,039 --> 00:08:11,440
and from that it's figured out how to

00:08:09,039 --> 00:08:13,120
make a 3d model of a car

00:08:11,440 --> 00:08:15,440
this is a process called inverse

00:08:13,120 --> 00:08:17,440
graphics graphics is the process where

00:08:15,440 --> 00:08:19,599
you take a 3d geometry

00:08:17,440 --> 00:08:21,360
and then from that 3d geometry you

00:08:19,599 --> 00:08:23,919
create a 2d image

00:08:21,360 --> 00:08:24,479
inverse graphics is create taking a 2d

00:08:23,919 --> 00:08:26,720
image

00:08:24,479 --> 00:08:28,319
and generating 3d geometry from it this

00:08:26,720 --> 00:08:29,280
takes advantage of a differential

00:08:28,319 --> 00:08:31,120
renderer

00:08:29,280 --> 00:08:32,800
to be able to render things and learn

00:08:31,120 --> 00:08:33,839
when you render an object in 3d what

00:08:32,800 --> 00:08:36,560
that does to the image

00:08:33,839 --> 00:08:38,240
such that it can invert that this is

00:08:36,560 --> 00:08:41,039
from the research department led by

00:08:38,240 --> 00:08:41,519
sanja fidler and it's just amazing that

00:08:41,039 --> 00:08:43,680
the work

00:08:41,519 --> 00:08:45,279
it just seems like magic like how can

00:08:43,680 --> 00:08:46,560
you take a picture of the side of a car

00:08:45,279 --> 00:08:49,200
and make the back of it

00:08:46,560 --> 00:08:49,760
because the computer knows what cars are

00:08:49,200 --> 00:08:51,120
so

00:08:49,760 --> 00:08:53,760
eventually i hope to understand this

00:08:51,120 --> 00:08:56,959
stuff but i find it fascinating to see

00:08:53,760 --> 00:08:58,240
and to watch literally magic well maybe

00:08:56,959 --> 00:08:59,600
not literally

00:08:58,240 --> 00:09:01,360
so one other thing that happens is you

00:08:59,600 --> 00:09:02,720
saw that segmentation map

00:09:01,360 --> 00:09:04,560
where there was different colors that

00:09:02,720 --> 00:09:07,120
showed the pieces of the car

00:09:04,560 --> 00:09:09,040
so this is generating a segmentation map

00:09:07,120 --> 00:09:10,800
it knows what parts the windshield and

00:09:09,040 --> 00:09:12,640
what's the hood and what's the tire and

00:09:10,800 --> 00:09:14,959
what's the front headlight

00:09:12,640 --> 00:09:16,880
and thus it generates on the 3d model a

00:09:14,959 --> 00:09:17,920
segmentation of that 3d model into

00:09:16,880 --> 00:09:19,440
different parts

00:09:17,920 --> 00:09:21,120
and you can take advantage of that in

00:09:19,440 --> 00:09:24,160
order to generate different materials

00:09:21,120 --> 00:09:24,160
for those different parts

00:09:25,440 --> 00:09:30,480
excuse me so you need you know you need

00:09:28,800 --> 00:09:31,600
to know that the windshield is made of

00:09:30,480 --> 00:09:33,120
glass and you need to know that the

00:09:31,600 --> 00:09:33,839
headlight is made of glass but the hood

00:09:33,120 --> 00:09:35,279
is not

00:09:33,839 --> 00:09:37,120
and those segmentation maps are

00:09:35,279 --> 00:09:39,120
generated by the ai technology from

00:09:37,120 --> 00:09:42,000
nvidia research that is open source

00:09:39,120 --> 00:09:42,000
in order to do that

00:09:42,160 --> 00:09:45,839
so now i'm going to talk about something

00:09:44,000 --> 00:09:49,120
if you saw ken youssef talk

00:09:45,839 --> 00:09:50,959
this morning nano vdb is a

00:09:49,120 --> 00:09:52,160
package that was released in open source

00:09:50,959 --> 00:09:55,839
today by nvidia

00:09:52,160 --> 00:09:58,800
at 10 am this is openvdb

00:09:55,839 --> 00:09:59,440
is a package developed by ken at digital

00:09:58,800 --> 00:10:02,399
domain

00:09:59,440 --> 00:10:04,320
and dreamworks and weda to be able to

00:10:02,399 --> 00:10:05,360
take volumes and describe and process

00:10:04,320 --> 00:10:07,519
those volumes

00:10:05,360 --> 00:10:10,320
and nano vdb is a way of taking those

00:10:07,519 --> 00:10:11,920
open vp volumes and turn them into

00:10:10,320 --> 00:10:13,760
something that's a contiguous block of

00:10:11,920 --> 00:10:15,200
memory that's very gpu friendly it's a

00:10:13,760 --> 00:10:17,600
contiguous block of memory

00:10:15,200 --> 00:10:19,440
with very few dependencies so that it

00:10:17,600 --> 00:10:21,760
can really crank on the gpu and do

00:10:19,440 --> 00:10:23,920
real-time retracing

00:10:21,760 --> 00:10:24,800
here we have work by andrew andrew

00:10:23,920 --> 00:10:28,160
reedmeyer

00:10:24,800 --> 00:10:30,000
which is taking open nanovdb as a source

00:10:28,160 --> 00:10:32,560
and then feeding it into a fluid sim

00:10:30,000 --> 00:10:34,959
called flow on the gpu so this is all

00:10:32,560 --> 00:10:37,360
enabled by nano vdb

00:10:34,959 --> 00:10:38,880
released as open source today um one

00:10:37,360 --> 00:10:40,640
thing i really like about nano vdb is

00:10:38,880 --> 00:10:42,399
that it's just a single header

00:10:40,640 --> 00:10:44,399
you can use it without any dependencies

00:10:42,399 --> 00:10:46,720
and so it's when it says nano it is

00:10:44,399 --> 00:10:49,519
really small and lightweight

00:10:46,720 --> 00:10:51,200
and it enables you to do these things so

00:10:49,519 --> 00:10:54,000
we're pretty psyched to contribute

00:10:51,200 --> 00:10:56,079
nanovdb to the open source community

00:10:54,000 --> 00:10:57,279
this may be one too many armadillos but

00:10:56,079 --> 00:10:57,920
i can't get enough of watching these

00:10:57,279 --> 00:11:02,959
clouds

00:10:57,920 --> 00:11:02,959
float off this armadillo in real time

00:11:03,200 --> 00:11:06,240
now one more example so this is not um

00:11:05,760 --> 00:11:08,079
tracing

00:11:06,240 --> 00:11:10,320
this is tracing a volume but it's

00:11:08,079 --> 00:11:12,880
generating surfaces from that volume

00:11:10,320 --> 00:11:13,680
in real time and this is 2.2 billion

00:11:12,880 --> 00:11:16,240
voxels

00:11:13,680 --> 00:11:17,920
so nanovdb gives you the ability to do

00:11:16,240 --> 00:11:19,760
real-time ray tracing

00:11:17,920 --> 00:11:22,160
at interactive frame rates almost

00:11:19,760 --> 00:11:23,839
independent of the underlying complexity

00:11:22,160 --> 00:11:26,240
of the scene

00:11:23,839 --> 00:11:27,600
this is all real time recorded recorded

00:11:26,240 --> 00:11:30,480
off someone's desktop

00:11:27,600 --> 00:11:32,720
so please do check out nanovdb

00:11:30,480 --> 00:11:34,160
contribution

00:11:32,720 --> 00:11:36,399
now i told you i was going to come back

00:11:34,160 --> 00:11:39,920
to the material definition language

00:11:36,399 --> 00:11:42,240
so mdl is a language which describes how

00:11:39,920 --> 00:11:42,959
light interacts with surfaces it does

00:11:42,240 --> 00:11:45,600
that

00:11:42,959 --> 00:11:46,000
with energy conserving bsdfs and very

00:11:45,600 --> 00:11:48,079
well

00:11:46,000 --> 00:11:49,680
understood physically based properties

00:11:48,079 --> 00:11:51,120
so that we can define physically based

00:11:49,680 --> 00:11:52,959
materials and really understand how

00:11:51,120 --> 00:11:56,320
light interacts with them

00:11:52,959 --> 00:11:57,519
it was started in 2011 but has now

00:11:56,320 --> 00:12:00,800
become open source

00:11:57,519 --> 00:12:03,839
as of 2018 with a bsd license

00:12:00,800 --> 00:12:05,519
um so some of the nice things about the

00:12:03,839 --> 00:12:06,880
material definition language

00:12:05,519 --> 00:12:08,639
are that because we have a well

00:12:06,880 --> 00:12:10,160
understood we really understand how

00:12:08,639 --> 00:12:11,680
light interacts with these surfaces and

00:12:10,160 --> 00:12:13,040
how these surfaces how these surface

00:12:11,680 --> 00:12:14,880
materials work

00:12:13,040 --> 00:12:16,320
we can have standardization among

00:12:14,880 --> 00:12:18,480
different renderers

00:12:16,320 --> 00:12:20,000
so we can generate something for inter

00:12:18,480 --> 00:12:22,240
for real time rasterizing

00:12:20,000 --> 00:12:23,839
interactive ray tracing and path tracing

00:12:22,240 --> 00:12:24,480
and really know how they agree with each

00:12:23,839 --> 00:12:26,320
other

00:12:24,480 --> 00:12:29,920
a consistent look because of these

00:12:26,320 --> 00:12:29,920
energy conserving vsdfs

00:12:30,240 --> 00:12:35,120
so model defines how the light interacts

00:12:33,200 --> 00:12:36,000
with a surface in a language in a c-like

00:12:35,120 --> 00:12:37,519
language

00:12:36,000 --> 00:12:39,680
um so it's a this is a you know it's a

00:12:37,519 --> 00:12:41,839
blob of c like language which describes

00:12:39,680 --> 00:12:43,760
it's a program now i'm going to jump

00:12:41,839 --> 00:12:45,120
away from mdl and then jump right back

00:12:43,760 --> 00:12:46,959
to it

00:12:45,120 --> 00:12:48,560
i'm going to talk about usd this is

00:12:46,959 --> 00:12:51,440
universal scene description

00:12:48,560 --> 00:12:53,040
um developed by pixar animation studios

00:12:51,440 --> 00:12:54,800
i may be biased but i think it's really

00:12:53,040 --> 00:12:56,480
awesome

00:12:54,800 --> 00:12:58,160
and we're very grateful for the for

00:12:56,480 --> 00:12:59,680
pixar for contributing this to open

00:12:58,160 --> 00:13:00,320
source and continuing to put the effort

00:12:59,680 --> 00:13:03,600
that they do

00:13:00,320 --> 00:13:05,600
into usd um it's built it's the it's the

00:13:03,600 --> 00:13:06,959
culmination of several decades worth of

00:13:05,600 --> 00:13:09,360
representations for

00:13:06,959 --> 00:13:10,880
3d worlds and how you have hundreds of

00:13:09,360 --> 00:13:12,160
people collaborating on a film all

00:13:10,880 --> 00:13:13,040
collaborating on in different parts of

00:13:12,160 --> 00:13:14,560
that world

00:13:13,040 --> 00:13:16,320
and how you do interchange among

00:13:14,560 --> 00:13:18,079
different applications

00:13:16,320 --> 00:13:20,000
and how you do that really scalably how

00:13:18,079 --> 00:13:22,399
you have really complicated worlds flow

00:13:20,000 --> 00:13:23,200
from one place to another within pixar

00:13:22,399 --> 00:13:26,240
and that

00:13:23,200 --> 00:13:28,560
is open sourced and it's gaining

00:13:26,240 --> 00:13:30,320
widespread support in many dcc apps and

00:13:28,560 --> 00:13:32,160
other production studios

00:13:30,320 --> 00:13:33,440
and we're pretty psyched about it nvidia

00:13:32,160 --> 00:13:35,839
is all in on usd

00:13:33,440 --> 00:13:36,800
we think it's the bomb and you know we

00:13:35,839 --> 00:13:38,800
just want to use it

00:13:36,800 --> 00:13:40,240
it's being used throughout the company

00:13:38,800 --> 00:13:43,360
uh the project that i'm working on

00:13:40,240 --> 00:13:46,480
omniverse is based around usd and

00:13:43,360 --> 00:13:49,199
you know we're psyched usd is great and

00:13:46,480 --> 00:13:52,079
just to come back to muddle

00:13:49,199 --> 00:13:54,079
to mdl so this is how you would take mdl

00:13:52,079 --> 00:13:56,800
and embed it inside of usd

00:13:54,079 --> 00:13:59,600
so here we have a program written in mdl

00:13:56,800 --> 00:14:01,519
this nvidia slash coredefinitions.mdl

00:13:59,600 --> 00:14:04,399
and that is embedded in a shader and a

00:14:01,519 --> 00:14:06,880
material inside of usd so this becomes

00:14:04,399 --> 00:14:07,920
a node inside of usd that interacts with

00:14:06,880 --> 00:14:10,480
your renderer

00:14:07,920 --> 00:14:12,399
so usb for us becomes a place where you

00:14:10,480 --> 00:14:13,360
can encapsulate many different open

00:14:12,399 --> 00:14:15,519
source

00:14:13,360 --> 00:14:17,279
open source and not open source nodes

00:14:15,519 --> 00:14:18,800
inside of a 3d world it becomes a

00:14:17,279 --> 00:14:19,920
gathering place for many different

00:14:18,800 --> 00:14:21,680
technologies

00:14:19,920 --> 00:14:23,040
and we think that that's a pretty sweet

00:14:21,680 --> 00:14:24,160
property

00:14:23,040 --> 00:14:25,279
and there's a link on the bottom of the

00:14:24,160 --> 00:14:27,279
page if you'd like to know more about

00:14:25,279 --> 00:14:29,440
that

00:14:27,279 --> 00:14:30,880
now i'm going to talk a little bit about

00:14:29,440 --> 00:14:33,360
usd and hydra

00:14:30,880 --> 00:14:33,920
and what they do and how we use them so

00:14:33,360 --> 00:14:35,519
hydra

00:14:33,920 --> 00:14:37,360
is the rendering architecture that's

00:14:35,519 --> 00:14:39,199
included as part of usd

00:14:37,360 --> 00:14:41,440
and so usd is the definition of the

00:14:39,199 --> 00:14:42,959
scene hydra is the architecture which

00:14:41,440 --> 00:14:44,720
can take that scene definition

00:14:42,959 --> 00:14:46,079
and render it and produce pixels on the

00:14:44,720 --> 00:14:47,279
back end

00:14:46,079 --> 00:14:49,600
and we're going to talk a lot about

00:14:47,279 --> 00:14:51,040
hydra particularly and usd

00:14:49,600 --> 00:14:53,440
and what we've been doing to modify

00:14:51,040 --> 00:14:54,079
those and enhance those for our work

00:14:53,440 --> 00:14:57,440
within

00:14:54,079 --> 00:15:00,240
nvidia so one of the things we noticed

00:14:57,440 --> 00:15:01,920
is that usd you know you can go to one

00:15:00,240 --> 00:15:02,560
app and save usd and go to another and

00:15:01,920 --> 00:15:04,639
load it

00:15:02,560 --> 00:15:05,839
but it also gives us the opportunity to

00:15:04,639 --> 00:15:07,920
collaborate among

00:15:05,839 --> 00:15:10,800
multiple among multiple users and

00:15:07,920 --> 00:15:12,800
multiple apps interactively in real time

00:15:10,800 --> 00:15:14,079
so i'm going to show you an example

00:15:12,800 --> 00:15:17,360
where one can take

00:15:14,079 --> 00:15:20,480
rhino 3d 3d studio max and revit and

00:15:17,360 --> 00:15:21,600
using usd and our nucleus server be able

00:15:20,480 --> 00:15:23,760
to communicate with

00:15:21,600 --> 00:15:25,839
with omniverse interactively while you

00:15:23,760 --> 00:15:29,680
work using the standard definition of

00:15:25,839 --> 00:15:29,680
the 3d world that usb provides us

00:15:32,639 --> 00:15:36,000
so here again we're going to talk about

00:15:34,639 --> 00:15:36,560
three different apps we're going to talk

00:15:36,000 --> 00:15:39,440
about

00:15:36,560 --> 00:15:40,959
rhino 3d we're going to talk about 3d

00:15:39,440 --> 00:15:43,279
studio max and revit

00:15:40,959 --> 00:15:45,040
and how those things can use usd and

00:15:43,279 --> 00:15:47,040
omniverse nucleus server

00:15:45,040 --> 00:15:48,480
to communicate and give us real-time

00:15:47,040 --> 00:15:50,639
path tracing

00:15:48,480 --> 00:15:51,839
so this is the soho tower in beijing

00:15:50,639 --> 00:15:53,279
it's a beautiful building

00:15:51,839 --> 00:15:55,360
and the images that you're seeing here

00:15:53,279 --> 00:15:56,800
are generated in real time in omniverse

00:15:55,360 --> 00:16:00,399
they're real-time ray tracing

00:15:56,800 --> 00:16:00,399
representations of that building

00:16:01,440 --> 00:16:05,279
now we want to give artists working in

00:16:03,519 --> 00:16:06,639
so here with rhino you have someone

00:16:05,279 --> 00:16:08,160
shaping rhino on the left

00:16:06,639 --> 00:16:09,759
and then bringing it into omniverse on

00:16:08,160 --> 00:16:11,360
the right and showing how light plays

00:16:09,759 --> 00:16:13,519
across that scene

00:16:11,360 --> 00:16:14,639
similarly here we have an artist who is

00:16:13,519 --> 00:16:16,720
moving buildings around

00:16:14,639 --> 00:16:18,160
in 3d studio max and in real time

00:16:16,720 --> 00:16:20,480
communicating with omniverse to be able

00:16:18,160 --> 00:16:23,199
to see how the light plays

00:16:20,480 --> 00:16:24,320
and then we also have this is in revit

00:16:23,199 --> 00:16:26,160
someone putting buildings

00:16:24,320 --> 00:16:28,480
someone putting desks and computers and

00:16:26,160 --> 00:16:30,240
then seeing in omniverse on the right

00:16:28,480 --> 00:16:32,560
how the light plays across the scene

00:16:30,240 --> 00:16:34,480
interactively so this is an example of

00:16:32,560 --> 00:16:35,600
interactive collaboration through usd

00:16:34,480 --> 00:16:39,040
and the nucleus server

00:16:35,600 --> 00:16:40,639
with omniverse i'm going to talk a

00:16:39,040 --> 00:16:42,880
little bit about

00:16:40,639 --> 00:16:44,399
how getting real-time response getting

00:16:42,880 --> 00:16:46,399
rapid response and real-time response

00:16:44,399 --> 00:16:48,800
from usd and hydra

00:16:46,399 --> 00:16:50,959
so this is a description of usd as it

00:16:48,800 --> 00:16:52,959
exists in the open source repo

00:16:50,959 --> 00:16:54,560
so you have usd on the left your scene

00:16:52,959 --> 00:16:55,680
and you change an attribute say you

00:16:54,560 --> 00:16:57,040
change a color

00:16:55,680 --> 00:16:58,800
that's going to send a notice over to

00:16:57,040 --> 00:17:01,040
usd imaging which is

00:16:58,800 --> 00:17:02,240
the scene delegate which gathers

00:17:01,040 --> 00:17:04,000
together all the information about

00:17:02,240 --> 00:17:05,919
changing things in usd

00:17:04,000 --> 00:17:07,280
and through an intermediate data

00:17:05,919 --> 00:17:08,720
structure called the render index

00:17:07,280 --> 00:17:10,559
communicates to the render delegate

00:17:08,720 --> 00:17:12,559
which renders the picture now that's the

00:17:10,559 --> 00:17:14,559
normal path that's great

00:17:12,559 --> 00:17:16,000
but it's not super fast if you change

00:17:14,559 --> 00:17:17,120
thousands of attributes all at the same

00:17:16,000 --> 00:17:18,640
time

00:17:17,120 --> 00:17:20,160
and so if you wanted to change thousands

00:17:18,640 --> 00:17:22,000
of attributes all at the same time and

00:17:20,160 --> 00:17:23,919
get really fast updates

00:17:22,000 --> 00:17:25,760
you would need something like this other

00:17:23,919 --> 00:17:28,000
people have done this animal logic has a

00:17:25,760 --> 00:17:30,000
custom scene delegate that they use

00:17:28,000 --> 00:17:31,039
as well as autodesk in their maya

00:17:30,000 --> 00:17:33,120
application and

00:17:31,039 --> 00:17:35,520
pixar has done this internally as well

00:17:33,120 --> 00:17:38,320
custom team delegates for fast response

00:17:35,520 --> 00:17:39,919
so here we use usd as the definition of

00:17:38,320 --> 00:17:41,440
the world it is the ground truth

00:17:39,919 --> 00:17:43,039
of what exists on the world where all

00:17:41,440 --> 00:17:43,360
the objects are where all the materials

00:17:43,039 --> 00:17:46,320
are

00:17:43,360 --> 00:17:47,120
that's defined by usd now that static

00:17:46,320 --> 00:17:49,760
scene is

00:17:47,120 --> 00:17:51,520
is given to usd imaging and it's given

00:17:49,760 --> 00:17:53,039
to our physics engine and the physics

00:17:51,520 --> 00:17:54,080
engine takes that definition of the

00:17:53,039 --> 00:17:56,000
world

00:17:54,080 --> 00:17:57,760
and you know understands oh this is what

00:17:56,000 --> 00:17:59,600
i need to do to run my physics and then

00:17:57,760 --> 00:18:01,600
it starts running its physics and

00:17:59,600 --> 00:18:02,799
say 5 000 objects start falling from the

00:18:01,600 --> 00:18:04,080
sky

00:18:02,799 --> 00:18:05,840
physics is communicating with the

00:18:04,080 --> 00:18:08,400
omniverse steam delegate through a fast

00:18:05,840 --> 00:18:10,240
path we have a set of data structures

00:18:08,400 --> 00:18:11,840
that are really fast at sending all of

00:18:10,240 --> 00:18:13,360
that data into the omniverse scene

00:18:11,840 --> 00:18:14,320
delegate the omniverse team delegate

00:18:13,360 --> 00:18:17,039
here acts

00:18:14,320 --> 00:18:18,480
like an overlay on top of usd imaging

00:18:17,039 --> 00:18:20,000
for the attributes that we know are

00:18:18,480 --> 00:18:22,240
changing really rapidly

00:18:20,000 --> 00:18:24,559
and so in that way we get real-time

00:18:22,240 --> 00:18:25,039
updates with omniverse as an extension

00:18:24,559 --> 00:18:29,039
to

00:18:25,039 --> 00:18:30,559
um to usd and hydra

00:18:29,039 --> 00:18:32,720
now another thing that we wanted to do

00:18:30,559 --> 00:18:35,280
was we wanted to use vulcan and directx

00:18:32,720 --> 00:18:36,000
12. now this is open source hydra as it

00:18:35,280 --> 00:18:37,679
exists

00:18:36,000 --> 00:18:39,120
usd commutes to communicates to the

00:18:37,679 --> 00:18:40,559
scene delegate we've cracked open those

00:18:39,120 --> 00:18:41,360
render delegates and shown that we have

00:18:40,559 --> 00:18:44,000
a pr man

00:18:41,360 --> 00:18:45,919
storm and every render delegate in there

00:18:44,000 --> 00:18:47,120
and the entity that wraps those up is a

00:18:45,919 --> 00:18:48,880
hydra engine

00:18:47,120 --> 00:18:51,760
and the hydra engines and the open

00:18:48,880 --> 00:18:54,160
source repo have open gl dependencies

00:18:51,760 --> 00:18:55,280
hydra started out entirely as an open as

00:18:54,160 --> 00:18:57,200
an opengl thing

00:18:55,280 --> 00:18:59,120
and pixar has been working to reduce the

00:18:57,200 --> 00:18:59,760
opengl dependencies in hydra which is

00:18:59,120 --> 00:19:01,120
awesome

00:18:59,760 --> 00:19:03,280
and we're not totally there yet but we

00:19:01,120 --> 00:19:04,400
see the progress but we wanted to jump

00:19:03,280 --> 00:19:07,520
in and really get going

00:19:04,400 --> 00:19:10,320
with vulcan and directx 12.

00:19:07,520 --> 00:19:12,320
so in order to do that we have a

00:19:10,320 --> 00:19:12,640
separate hydra engine that is customized

00:19:12,320 --> 00:19:15,200
for

00:19:12,640 --> 00:19:16,559
vulcan and direct x12 to work with our

00:19:15,200 --> 00:19:18,080
omniverse scene delegate and our

00:19:16,559 --> 00:19:19,840
omniverse render delegate

00:19:18,080 --> 00:19:21,840
this is so that we can pass down command

00:19:19,840 --> 00:19:22,640
cues and fill up those command cues with

00:19:21,840 --> 00:19:25,440
all of the

00:19:22,640 --> 00:19:27,120
commands necessary to draw the scene

00:19:25,440 --> 00:19:28,080
we've abstracted away some of the vulcan

00:19:27,120 --> 00:19:29,679
and directx 12

00:19:28,080 --> 00:19:31,600
dependencies there so that the code can

00:19:29,679 --> 00:19:33,360
work with both of those but it required

00:19:31,600 --> 00:19:35,600
a customized hydra engine

00:19:33,360 --> 00:19:37,120
um and and that's the way that we

00:19:35,600 --> 00:19:38,400
accomplish that and then we have another

00:19:37,120 --> 00:19:39,760
hydra engine

00:19:38,400 --> 00:19:41,600
which is based on opengl for the

00:19:39,760 --> 00:19:43,679
existing render delegates now

00:19:41,600 --> 00:19:46,160
there's an asterisk there because this

00:19:43,679 --> 00:19:48,400
is all work that's in progress

00:19:46,160 --> 00:19:50,240
omniverse is the is the encapsulation of

00:19:48,400 --> 00:19:51,760
a number of technical prototypes and

00:19:50,240 --> 00:19:53,200
experiments that we've done

00:19:51,760 --> 00:19:55,919
to figure out how to get best

00:19:53,200 --> 00:19:57,360
performance out of hydra and usd

00:19:55,919 --> 00:19:59,120
and what we're trying to do now is take

00:19:57,360 --> 00:20:00,000
those things and refactor them into a

00:19:59,120 --> 00:20:02,080
structure

00:20:00,000 --> 00:20:03,520
that gives us that allows us to

00:20:02,080 --> 00:20:05,039
interchange that allows us to use

00:20:03,520 --> 00:20:06,960
different render delegates that allows

00:20:05,039 --> 00:20:08,960
us to use our own render delegate

00:20:06,960 --> 00:20:10,400
allows us to use real-time updates with

00:20:08,960 --> 00:20:11,600
the omniverse scene delegate

00:20:10,400 --> 00:20:13,840
and do that in a way that's well

00:20:11,600 --> 00:20:14,480
structured i personally hope that this

00:20:13,840 --> 00:20:16,960
also

00:20:14,480 --> 00:20:18,240
allows us to create a contribution that

00:20:16,960 --> 00:20:19,120
we can give back to the open source

00:20:18,240 --> 00:20:20,400
community but

00:20:19,120 --> 00:20:22,320
we're not committing to that but that's

00:20:20,400 --> 00:20:25,760
what i personally hope

00:20:22,320 --> 00:20:27,520
will end up with so i wanted to show you

00:20:25,760 --> 00:20:29,679
an example of what happens when all of

00:20:27,520 --> 00:20:31,919
these pieces come together

00:20:29,679 --> 00:20:34,320
so this is a marbles demo that we did

00:20:31,919 --> 00:20:36,320
for gtc 2020

00:20:34,320 --> 00:20:37,600
as you'll see this is running on a

00:20:36,320 --> 00:20:40,640
single person's desktop

00:20:37,600 --> 00:20:44,000
in real time showing physics

00:20:40,640 --> 00:20:46,080
showing real-time ray tracing and

00:20:44,000 --> 00:20:48,000
a number of artists contributed to this

00:20:46,080 --> 00:20:50,320
work and it really shows off

00:20:48,000 --> 00:20:51,840
what we're able to achieve in a system

00:20:50,320 --> 00:20:52,720
that is built around open source

00:20:51,840 --> 00:20:54,880
software

00:20:52,720 --> 00:20:56,320
open source software is the core here

00:20:54,880 --> 00:20:58,400
and it's an open standard and we want to

00:20:56,320 --> 00:21:01,200
support that and build upon that

00:20:58,400 --> 00:21:03,760
in ways that allow you to make a complex

00:21:01,200 --> 00:21:06,799
interactive world

00:21:03,760 --> 00:21:07,360
here you can see somebody running the

00:21:06,799 --> 00:21:09,360
game

00:21:07,360 --> 00:21:12,000
live this is all live none of this is

00:21:09,360 --> 00:21:13,520
baked out and rendered

00:21:12,000 --> 00:21:15,600
and so this is the work that we're doing

00:21:13,520 --> 00:21:17,280
it's definitely a work in progress

00:21:15,600 --> 00:21:19,120
but we want to continue to refine these

00:21:17,280 --> 00:21:19,919
things to be able to best take advantage

00:21:19,120 --> 00:21:22,400
of

00:21:19,919 --> 00:21:25,039
hydra and usd um in real time with

00:21:22,400 --> 00:21:27,280
real-time ray tracing

00:21:25,039 --> 00:21:28,240
now this is all stuff that we're you

00:21:27,280 --> 00:21:29,600
know this is all stuff that we're

00:21:28,240 --> 00:21:31,039
working on as we said and if you're

00:21:29,600 --> 00:21:31,840
working on similar things please do

00:21:31,039 --> 00:21:34,080
reach out to us

00:21:31,840 --> 00:21:35,600
um you know if you're doing vulcan with

00:21:34,080 --> 00:21:36,559
hydra you're trying to do real-time

00:21:35,600 --> 00:21:39,840
things with hydra

00:21:36,559 --> 00:21:41,919
real-time ray tracing um usd interaction

00:21:39,840 --> 00:21:43,280
um we'd love to chat you know this is um

00:21:41,919 --> 00:21:45,280
it's open source and let's all be a

00:21:43,280 --> 00:21:46,720
community and talk about it

00:21:45,280 --> 00:21:49,440
because that's a thing that i'm very

00:21:46,720 --> 00:21:49,440
excited to do

00:21:50,080 --> 00:21:53,280
this is the end of our presentation i do

00:21:52,480 --> 00:21:55,360
want to thank

00:21:53,280 --> 00:21:56,640
the academy software foundation and the

00:21:55,360 --> 00:21:59,200
linux foundation

00:21:56,640 --> 00:22:01,600
for putting together such a sweet uh set

00:21:59,200 --> 00:22:02,960
of presentations today and yesterday

00:22:01,600 --> 00:22:05,360
it's just nice to see the community get

00:22:02,960 --> 00:22:06,880
together and be able to talk about open

00:22:05,360 --> 00:22:08,159
source software in this way and to be

00:22:06,880 --> 00:22:10,320
able to have the visual effects and

00:22:08,159 --> 00:22:13,600
animation community in particular

00:22:10,320 --> 00:22:15,360
be a strong member of that community um

00:22:13,600 --> 00:22:17,120
so thank you very much for joining us

00:22:15,360 --> 00:22:19,120
today we have the esteemed ryan

00:22:17,120 --> 00:22:22,480
stelzleny on our slack chat

00:22:19,120 --> 00:22:22,880
um and um if there are any questions uh

00:22:22,480 --> 00:22:24,320
we

00:22:22,880 --> 00:22:27,840
we still have a few minutes to answer

00:22:24,320 --> 00:22:27,840
them thank you for coming

00:22:30,000 --> 00:22:34,240
i'm going to stop sharing and then go

00:22:32,720 --> 00:22:37,039
over here

00:22:34,240 --> 00:22:39,520
and then see we have 86 people which is

00:22:37,039 --> 00:22:39,520
very cool

00:22:39,679 --> 00:22:44,320
oh larry grits hi larry nice to see you

00:22:44,799 --> 00:22:47,360
i'm just going to read larry's thing

00:22:46,000 --> 00:22:48,720
because larry's awesome i worked with

00:22:47,360 --> 00:22:50,880
larry back in the day and

00:22:48,720 --> 00:22:52,960
i think he's amazing derek an important

00:22:50,880 --> 00:22:54,799
glt gpl subtlety

00:22:52,960 --> 00:22:57,039
it's not the case that you if you use

00:22:54,799 --> 00:22:58,559
gpl software that you were obligated to

00:22:57,039 --> 00:23:00,080
open source your package

00:22:58,559 --> 00:23:02,640
it's that you are only permitted to

00:23:00,080 --> 00:23:05,280
redistribute a combined package of your

00:23:02,640 --> 00:23:07,679
code and the gpl code if the whole thing

00:23:05,280 --> 00:23:09,360
is licensed under gpo if you aren't

00:23:07,679 --> 00:23:10,400
redistributing the software outside your

00:23:09,360 --> 00:23:12,400
company eg an

00:23:10,400 --> 00:23:14,720
internal tool you are under no such

00:23:12,400 --> 00:23:16,799
obligation but one reason to be wary of

00:23:14,720 --> 00:23:17,840
gpl code is that you may think today

00:23:16,799 --> 00:23:19,919
that you have no interest in

00:23:17,840 --> 00:23:22,080
redistributing your combined tool

00:23:19,919 --> 00:23:23,520
but if later you change your mind and

00:23:22,080 --> 00:23:25,760
want to turn it into an op

00:23:23,520 --> 00:23:27,520
a commercial or open source app the use

00:23:25,760 --> 00:23:30,080
of gpl software is internal

00:23:27,520 --> 00:23:31,600
internal to it may may be the may limit

00:23:30,080 --> 00:23:32,480
the means and licenses that you can

00:23:31,600 --> 00:23:34,480
distribute it

00:23:32,480 --> 00:23:36,000
so when in doubt with open source

00:23:34,480 --> 00:23:39,120
software listen to larry grits

00:23:36,000 --> 00:23:39,120
and thank you larry

00:23:40,000 --> 00:23:48,640
and let's see

00:23:43,039 --> 00:23:48,640
is there any other chat how exciting

00:23:49,039 --> 00:23:53,200
that seems rather quiet i hope i didn't

00:23:51,760 --> 00:23:56,080
bore you all to death or say things that

00:23:53,200 --> 00:23:56,080
are completely obvious

00:24:00,080 --> 00:24:04,880
oh there's a question in the qa or

00:24:01,760 --> 00:24:10,080
there's a qa

00:24:04,880 --> 00:24:10,080
oh where does mdl fit in with material x

00:24:10,159 --> 00:24:15,120
that's a good question i think that

00:24:13,760 --> 00:24:17,520
there are a number of developments i

00:24:15,120 --> 00:24:18,400
believe happening with material x as a

00:24:17,520 --> 00:24:20,159
standard

00:24:18,400 --> 00:24:22,320
to be able to have material x work with

00:24:20,159 --> 00:24:22,720
things like model and osl and other

00:24:22,320 --> 00:24:25,279
things

00:24:22,720 --> 00:24:25,760
um i don't i can't speak to those at the

00:24:25,279 --> 00:24:27,360
moment

00:24:25,760 --> 00:24:28,880
um i believe pixar is working on these

00:24:27,360 --> 00:24:31,039
things and other people are

00:24:28,880 --> 00:24:32,960
so i believe that um there's something

00:24:31,039 --> 00:24:34,960
coming where material x and model can

00:24:32,960 --> 00:24:37,440
work together

00:24:34,960 --> 00:24:39,200
but i can't speak to that myself because

00:24:37,440 --> 00:24:42,240
it's not an area of expertise

00:24:39,200 --> 00:24:47,840
for me personally

00:24:42,240 --> 00:24:47,840
i think materialx is great by the way

00:24:50,880 --> 00:24:53,520
so quiet

00:24:58,840 --> 00:25:01,840
and

00:25:02,799 --> 00:25:09,360
i think if there are no questions

00:25:06,720 --> 00:25:10,320
um i think if there are any questions

00:25:09,360 --> 00:25:13,760
there is a

00:25:10,320 --> 00:25:14,000
uh open source days nvidia channel on

00:25:13,760 --> 00:25:16,960
the

00:25:14,000 --> 00:25:17,679
aswf slack so please if you have any

00:25:16,960 --> 00:25:20,480
questions

00:25:17,679 --> 00:25:21,840
please go there and ask away on the

00:25:20,480 --> 00:25:26,080
slack channel

00:25:21,840 --> 00:25:26,080

YouTube URL: https://www.youtube.com/watch?v=ZQ6mTg3BEVg


