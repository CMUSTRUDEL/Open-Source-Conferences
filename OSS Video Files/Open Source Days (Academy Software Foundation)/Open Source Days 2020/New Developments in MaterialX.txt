Title: New Developments in MaterialX
Publication date: 2020-08-24
Playlist: Open Source Days 2020
Description: 
	New Developments in MaterialX
Speakers: Doug Smythe, Jonathan Stone

For more information about the Academy Software Foundation go to: https://www.aswf.io/

MaterialX is an open standard for the description and transfer of rich material, shading and lookdev content between different DCC tools and renderers. In this session, we discuss many of the additions and improvements to the MaterialX specification, library, shader generation module and viewer from the past year, as well as providing a brief preview of current and future developments.
Captions: 
	00:00:00,160 --> 00:00:03,520
all right hopefully we have everybody uh

00:00:02,639 --> 00:00:06,480
on board now

00:00:03,520 --> 00:00:08,240
um so let's get started uh hello

00:00:06,480 --> 00:00:10,080
everyone thanks for coming um

00:00:08,240 --> 00:00:12,400
i'm a doug smythe from industrial light

00:00:10,080 --> 00:00:14,000
magic and i'm here today to discuss some

00:00:12,400 --> 00:00:15,519
of the many additions and improvements

00:00:14,000 --> 00:00:16,480
that have been made to materialx over

00:00:15,519 --> 00:00:18,320
the past year

00:00:16,480 --> 00:00:20,640
and i'll also give you a brief preview

00:00:18,320 --> 00:00:22,480
of some current and future developments

00:00:20,640 --> 00:00:24,080
uh in the chat we have jonathan stone

00:00:22,480 --> 00:00:24,560
from lucasfilm's advanced development

00:00:24,080 --> 00:00:26,880
group

00:00:24,560 --> 00:00:28,480
and uh he can answer questions uh as

00:00:26,880 --> 00:00:29,519
they come up and will both be available

00:00:28,480 --> 00:00:33,600
afterwards for

00:00:29,519 --> 00:00:35,360
general q a so for those of you who are

00:00:33,600 --> 00:00:38,079
not as familiar with material x

00:00:35,360 --> 00:00:39,680
here's a brief overview it's a schema

00:00:38,079 --> 00:00:42,399
and file format that can be used to

00:00:39,680 --> 00:00:44,719
describe complete cg object looks

00:00:42,399 --> 00:00:45,760
using materialx you can describe your

00:00:44,719 --> 00:00:47,520
shading networks

00:00:45,760 --> 00:00:49,200
your materials your rendering

00:00:47,520 --> 00:00:49,680
assignments and hopefully everything you

00:00:49,200 --> 00:00:52,000
need

00:00:49,680 --> 00:00:53,840
to fully describe the look of a cg asset

00:00:52,000 --> 00:00:57,120
in an application independent

00:00:53,840 --> 00:00:59,440
portable open source format

00:00:57,120 --> 00:01:01,280
the specification also defines exact

00:00:59,440 --> 00:01:01,840
behavior for a large number of standard

00:01:01,280 --> 00:01:03,440
nodes

00:01:01,840 --> 00:01:05,360
for things like reading textures

00:01:03,440 --> 00:01:06,880
procedural pattern generation

00:01:05,360 --> 00:01:08,479
various mathematical and image

00:01:06,880 --> 00:01:10,479
processing operations

00:01:08,479 --> 00:01:11,680
various commonly used bsdf shading

00:01:10,479 --> 00:01:13,840
operations

00:01:11,680 --> 00:01:16,159
and nodes to blend and layer them all

00:01:13,840 --> 00:01:18,640
together in an energy conserving way

00:01:16,159 --> 00:01:19,520
this provides consistent predictable

00:01:18,640 --> 00:01:21,119
results

00:01:19,520 --> 00:01:24,240
when evaluating shading networks

00:01:21,119 --> 00:01:26,159
regardless of the application

00:01:24,240 --> 00:01:27,600
some key features of materialx include

00:01:26,159 --> 00:01:29,520
strong data typing

00:01:27,600 --> 00:01:31,920
full color management and compatibility

00:01:29,520 --> 00:01:33,439
with open with other open standards

00:01:31,920 --> 00:01:35,600
but most importantly it's very

00:01:33,439 --> 00:01:36,400
extensible with support for user-defined

00:01:35,600 --> 00:01:38,960
nodes

00:01:36,400 --> 00:01:40,079
shaders and data types as well as

00:01:38,960 --> 00:01:43,280
application specific

00:01:40,079 --> 00:01:45,280
attributes and parameters the bulk of

00:01:43,280 --> 00:01:47,840
material x is based on the idea of

00:01:45,280 --> 00:01:49,600
graphs of nodes with encapsulation

00:01:47,840 --> 00:01:51,520
rendering materials are associated with

00:01:49,600 --> 00:01:52,399
geometries in a look as seen in the

00:01:51,520 --> 00:01:54,079
upper right

00:01:52,399 --> 00:01:55,439
and the materials reference one and

00:01:54,079 --> 00:01:57,360
where shaders or

00:01:55,439 --> 00:01:59,600
other or surfaces or other types of

00:01:57,360 --> 00:02:00,880
shaders whose inputs can in turn be

00:01:59,600 --> 00:02:03,280
connected to graphs

00:02:00,880 --> 00:02:05,200
of pattern nodes but the nodes within a

00:02:03,280 --> 00:02:06,159
node graph can also be implemented as a

00:02:05,200 --> 00:02:08,080
graph of nodes

00:02:06,159 --> 00:02:09,599
and even the shaders themselves can be

00:02:08,080 --> 00:02:12,720
expressed as a grass

00:02:09,599 --> 00:02:14,640
a graph of bsdf and other nodes

00:02:12,720 --> 00:02:16,480
the parameter interface for every node

00:02:14,640 --> 00:02:18,080
regardless of type is defined using what

00:02:16,480 --> 00:02:20,160
we call a node def

00:02:18,080 --> 00:02:22,319
and the materialx specification provides

00:02:20,160 --> 00:02:26,319
definitions and implementations for a

00:02:22,319 --> 00:02:27,760
large set of pattern and bsdf nodes

00:02:26,319 --> 00:02:29,040
so for the rest of the talk i'm just

00:02:27,760 --> 00:02:31,280
going to assume that everyone is

00:02:29,040 --> 00:02:33,920
familiar with materialx and its nodes

00:02:31,280 --> 00:02:35,519
library and viewer and focus on what's

00:02:33,920 --> 00:02:38,000
changed over the past year

00:02:35,519 --> 00:02:40,319
to catch up on all things material x

00:02:38,000 --> 00:02:43,040
including current specification pdfs

00:02:40,319 --> 00:02:44,319
developer links and a developer guide

00:02:43,040 --> 00:02:47,920
and a link to our github

00:02:44,319 --> 00:02:47,920
please go to materialx.org

00:02:49,440 --> 00:02:53,040
so in this talk i'll go over new

00:02:50,879 --> 00:02:54,319
developments in five specific areas of

00:02:53,040 --> 00:02:56,319
material x

00:02:54,319 --> 00:02:58,159
updates to the specification where the

00:02:56,319 --> 00:03:01,040
standard nodes and structural elements

00:02:58,159 --> 00:03:04,080
that make up material x are defined

00:03:01,040 --> 00:03:05,920
updates to the shader generation module

00:03:04,080 --> 00:03:09,280
updates to the standalone viewer for

00:03:05,920 --> 00:03:11,280
materialx content materialx view

00:03:09,280 --> 00:03:13,840
updates to the open source materialx

00:03:11,280 --> 00:03:15,360
library and its api

00:03:13,840 --> 00:03:16,959
and improvements to the build

00:03:15,360 --> 00:03:18,319
environment to support more development

00:03:16,959 --> 00:03:20,400
platforms

00:03:18,319 --> 00:03:22,560
i'll also note some newly added and

00:03:20,400 --> 00:03:26,560
upcoming support for materialx content

00:03:22,560 --> 00:03:26,560
in digital content creation applications

00:03:26,720 --> 00:03:29,760
the first big update to the

00:03:27,920 --> 00:03:31,280
specifications since last year is

00:03:29,760 --> 00:03:33,280
support for units

00:03:31,280 --> 00:03:34,400
the values for floating point and vector

00:03:33,280 --> 00:03:36,319
inputs may

00:03:34,400 --> 00:03:38,400
optionally be defined in terms of a

00:03:36,319 --> 00:03:40,000
specific unit and unit type

00:03:38,400 --> 00:03:41,920
which allows applications to

00:03:40,000 --> 00:03:43,920
automatically convert values

00:03:41,920 --> 00:03:46,319
from their specified unit into a scene

00:03:43,920 --> 00:03:48,640
unit specified by the application

00:03:46,319 --> 00:03:50,959
this way images and the quantities they

00:03:48,640 --> 00:03:53,200
represent such as displacement amount

00:03:50,959 --> 00:03:55,840
or the size of an image tile can be

00:03:53,200 --> 00:03:57,760
specified in an absolute real-world size

00:03:55,840 --> 00:04:00,720
and be converted automatically to the

00:03:57,760 --> 00:04:02,720
expected scene units of the application

00:04:00,720 --> 00:04:04,879
node definitions can also declare what

00:04:02,720 --> 00:04:05,280
unit an implementation expects values to

00:04:04,879 --> 00:04:07,760
be in

00:04:05,280 --> 00:04:10,239
such as radians for trigonometric math

00:04:07,760 --> 00:04:10,239
functions

00:04:10,799 --> 00:04:14,400
in material x a single node class is

00:04:13,120 --> 00:04:16,639
allowed to have multiple

00:04:14,400 --> 00:04:17,759
node def signatures a to support

00:04:16,639 --> 00:04:19,600
different combinations

00:04:17,759 --> 00:04:22,320
of value types for the inputs and

00:04:19,600 --> 00:04:23,440
outputs like float versus color

00:04:22,320 --> 00:04:25,360
we found that there are a number of

00:04:23,440 --> 00:04:27,199
situations where it could be impossible

00:04:25,360 --> 00:04:29,680
to resolve exactly which node

00:04:27,199 --> 00:04:32,880
signature to apply when some inputs were

00:04:29,680 --> 00:04:35,120
unconnected and left at default values

00:04:32,880 --> 00:04:36,960
so these have been corrected by creating

00:04:35,120 --> 00:04:38,560
new nodes

00:04:36,960 --> 00:04:40,400
so that all variants of a node have

00:04:38,560 --> 00:04:41,199
exactly the same input and parameter

00:04:40,400 --> 00:04:42,800
names

00:04:41,199 --> 00:04:44,720
with only the types of the inputs and

00:04:42,800 --> 00:04:45,360
the output varying from one node dev to

00:04:44,720 --> 00:04:46,639
another

00:04:45,360 --> 00:04:48,800
so these are the nodes that have been

00:04:46,639 --> 00:04:50,880
affected by this change

00:04:48,800 --> 00:04:53,280
we also introduced a complete set of

00:04:50,880 --> 00:04:56,320
value comparison nodes so any desired

00:04:53,280 --> 00:04:58,000
value test is now possible

00:04:56,320 --> 00:04:59,360
of course we're continuing to work on

00:04:58,000 --> 00:05:00,880
new ideas for the next version of

00:04:59,360 --> 00:05:03,199
material x and i'll get to that in a

00:05:00,880 --> 00:05:03,199
little bit

00:05:04,639 --> 00:05:08,000
a large part of the work done in the

00:05:05,919 --> 00:05:10,000
past year has been in improving the

00:05:08,000 --> 00:05:11,840
quality of the shading in our shader gen

00:05:10,000 --> 00:05:14,880
node implementations particularly for

00:05:11,840 --> 00:05:16,800
glsl as seen in material xview

00:05:14,880 --> 00:05:18,800
one big example of this is the addition

00:05:16,800 --> 00:05:20,560
of energy compensation within certain

00:05:18,800 --> 00:05:22,320
bsdf nodes

00:05:20,560 --> 00:05:24,479
to compensate for energy missing from

00:05:22,320 --> 00:05:26,240
multiple scattering on rough surfaces we

00:05:24,479 --> 00:05:28,080
now use the method from turken

00:05:26,240 --> 00:05:30,160
which is simple enough to be used both

00:05:28,080 --> 00:05:31,840
offline and real-time rendering and

00:05:30,160 --> 00:05:33,919
gives very good results

00:05:31,840 --> 00:05:35,919
so here we can see a gold material that

00:05:33,919 --> 00:05:38,000
was rendered in material x view

00:05:35,919 --> 00:05:40,400
with energy compensation enabled on the

00:05:38,000 --> 00:05:43,919
bottom compared to what we had before

00:05:40,400 --> 00:05:43,919
without energy compensation

00:05:45,360 --> 00:05:49,840
another very new big new addition is mdl

00:05:48,400 --> 00:05:52,639
shader generation

00:05:49,840 --> 00:05:53,600
joining the existing osl and glsl shader

00:05:52,639 --> 00:05:55,440
generators

00:05:53,600 --> 00:05:57,680
this work was a collaboration between

00:05:55,440 --> 00:05:58,240
nvidia and autodesk and was presented

00:05:57,680 --> 00:06:01,039
this year

00:05:58,240 --> 00:06:02,080
at gtc 2020 as you can see in the images

00:06:01,039 --> 00:06:04,560
the results are

00:06:02,080 --> 00:06:06,000
very very close match including the

00:06:04,560 --> 00:06:09,039
fractal noise pattern on the

00:06:06,000 --> 00:06:09,840
marble object on the right we expect

00:06:09,039 --> 00:06:12,720
this

00:06:09,840 --> 00:06:14,800
work to be merged into the 1.38 branch

00:06:12,720 --> 00:06:15,759
of the public material distribution on

00:06:14,800 --> 00:06:20,400
github soon

00:06:15,759 --> 00:06:22,319
like hopefully within the week or so

00:06:20,400 --> 00:06:24,400
in the visual effects production world a

00:06:22,319 --> 00:06:26,880
wedge is a series of images where one

00:06:24,400 --> 00:06:29,520
value is gradually changed over a range

00:06:26,880 --> 00:06:31,120
while all other values are held constant

00:06:29,520 --> 00:06:32,000
materialx viewer has picked up a cool

00:06:31,120 --> 00:06:33,840
new feature

00:06:32,000 --> 00:06:35,680
where you can now generate a wedge image

00:06:33,840 --> 00:06:38,800
of a float shader parameter by

00:06:35,680 --> 00:06:40,400
hitting w images of the object geometry

00:06:38,800 --> 00:06:41,759
are rendered into an offscreen buffer

00:06:40,400 --> 00:06:43,280
and saved to disk

00:06:41,759 --> 00:06:45,199
and all the shader ball images in the

00:06:43,280 --> 00:06:46,400
talk today were generated using this new

00:06:45,199 --> 00:06:48,000
feature

00:06:46,400 --> 00:06:49,599
now the implementation is currently a

00:06:48,000 --> 00:06:51,280
little bit primitive since you have to

00:06:49,599 --> 00:06:52,960
edit a string of what parameter you want

00:06:51,280 --> 00:06:54,000
to wedge in the viewer's source code and

00:06:52,960 --> 00:06:55,759
then recompile

00:06:54,000 --> 00:06:57,440
but it should be possible to add a more

00:06:55,759 --> 00:07:00,000
friendly user interface for the feature

00:06:57,440 --> 00:07:00,000
at some point

00:07:00,560 --> 00:07:04,000
there's also a now a slider that you can

00:07:02,319 --> 00:07:05,199
use to rotate the lighting environment i

00:07:04,000 --> 00:07:06,000
don't know if you can see it in there

00:07:05,199 --> 00:07:07,520
it's the

00:07:06,000 --> 00:07:09,919
red box and there are any advanced

00:07:07,520 --> 00:07:10,479
options um but it's really handy if you

00:07:09,919 --> 00:07:12,560
want to see

00:07:10,479 --> 00:07:13,759
like how highlights move over a surface

00:07:12,560 --> 00:07:16,160
material or

00:07:13,759 --> 00:07:17,440
to align the environment of the material

00:07:16,160 --> 00:07:18,960
x view with

00:07:17,440 --> 00:07:21,280
any other reference renders you might

00:07:18,960 --> 00:07:23,759
have and then we also added a few more

00:07:21,280 --> 00:07:27,199
command line options and hotkeys to make

00:07:23,759 --> 00:07:27,199
using the program a little bit easier

00:07:27,440 --> 00:07:31,440
a recently added feature is the ability

00:07:29,360 --> 00:07:32,080
to take arbitrary material x pattern

00:07:31,440 --> 00:07:34,000
graphs

00:07:32,080 --> 00:07:35,199
and bake them down to a single texture

00:07:34,000 --> 00:07:37,680
per shader input

00:07:35,199 --> 00:07:39,440
including prop proper processing of

00:07:37,680 --> 00:07:41,520
multiple udems

00:07:39,440 --> 00:07:44,080
under the hood it's using the existing

00:07:41,520 --> 00:07:47,039
shader gen glsl code generator to build

00:07:44,080 --> 00:07:48,800
a shader execute that shader code and

00:07:47,039 --> 00:07:50,720
write out a texture image

00:07:48,800 --> 00:07:52,080
you can do this in material x view or

00:07:50,720 --> 00:07:54,080
from a python script

00:07:52,080 --> 00:07:55,919
and there's a sample python texture

00:07:54,080 --> 00:07:59,840
baking script provided to show how to

00:07:55,919 --> 00:07:59,840
use the new texture baker class

00:08:00,080 --> 00:08:03,840
since last siggraph the materialx code

00:08:01,919 --> 00:08:06,319
base has been updated to fully implement

00:08:03,840 --> 00:08:08,800
the changes and features of the 1.37

00:08:06,319 --> 00:08:10,479
rev2 specification that was released in

00:08:08,800 --> 00:08:11,840
january 2020

00:08:10,479 --> 00:08:13,840
and its built-in document version

00:08:11,840 --> 00:08:14,639
upgrade capability has been updated as

00:08:13,840 --> 00:08:16,479
well

00:08:14,639 --> 00:08:19,199
there's a few new utility methods in the

00:08:16,479 --> 00:08:20,240
api to support new element types like gm

00:08:19,199 --> 00:08:22,960
props and backdrop

00:08:20,240 --> 00:08:24,960
elements as well as a standard platform

00:08:22,960 --> 00:08:27,360
independent method to obtain the default

00:08:24,960 --> 00:08:28,800
search path for documents

00:08:27,360 --> 00:08:30,639
we also change the internal

00:08:28,800 --> 00:08:32,320
representation of matrix types

00:08:30,639 --> 00:08:34,240
so they are consistent with the

00:08:32,320 --> 00:08:38,320
representation used in imath

00:08:34,240 --> 00:08:38,320
usd and other commonly used libraries

00:08:38,959 --> 00:08:43,200
for materialx builds we now support the

00:08:41,519 --> 00:08:46,560
use of vs 2019

00:08:43,200 --> 00:08:48,480
clang 9 and gcc 10 and we're working on

00:08:46,560 --> 00:08:50,320
adding support for github actions to

00:08:48,480 --> 00:08:52,800
provide continuous integration and cloud

00:08:50,320 --> 00:08:52,800
testing

00:08:53,519 --> 00:08:58,160
in april of this year the substance team

00:08:56,080 --> 00:09:00,480
at adobe released a beta version

00:08:58,160 --> 00:09:03,040
of the materialx plugin for substance

00:09:00,480 --> 00:09:04,720
designer 2020.1

00:09:03,040 --> 00:09:06,640
with this plugin you can create shader

00:09:04,720 --> 00:09:08,959
graphs in substance designer

00:09:06,640 --> 00:09:11,360
and then view the graph in either opengl

00:09:08,959 --> 00:09:13,440
or irae in the substance viewer

00:09:11,360 --> 00:09:14,640
see your material directly in materialx

00:09:13,440 --> 00:09:16,399
view or

00:09:14,640 --> 00:09:19,600
export it into other materialx

00:09:16,399 --> 00:09:19,600
compatible applications

00:09:21,120 --> 00:09:25,519
there's also work being done in

00:09:22,959 --> 00:09:27,120
autodesk's 3ds max team to add material

00:09:25,519 --> 00:09:28,720
support there

00:09:27,120 --> 00:09:30,959
exceeding it's currently at the level of

00:09:28,720 --> 00:09:32,560
what they would call a technology demo

00:09:30,959 --> 00:09:34,160
and even though they're issuing the

00:09:32,560 --> 00:09:36,000
standard you know we make no promises

00:09:34,160 --> 00:09:37,920
and there's no delivery date disclaimer

00:09:36,000 --> 00:09:39,920
at this time they do have imported

00:09:37,920 --> 00:09:41,680
materialx content working in the max

00:09:39,920 --> 00:09:45,040
viewport and even at this stage it's

00:09:41,680 --> 00:09:45,040
starting to look really really cool

00:09:45,920 --> 00:09:50,399
autodesk has also continued to work on

00:09:48,000 --> 00:09:52,080
the lookdevx editor for maya

00:09:50,399 --> 00:09:53,519
which it showed a preview of at last

00:09:52,080 --> 00:09:55,680
year's siggraph um

00:09:53,519 --> 00:09:57,279
i don't know if there's anything said

00:09:55,680 --> 00:09:58,080
about a release date or anything for the

00:09:57,279 --> 00:10:00,000
product but

00:09:58,080 --> 00:10:01,600
they are coming along very very nicely

00:10:00,000 --> 00:10:05,519
and we'll see more

00:10:01,600 --> 00:10:06,959
on that soon i'm sure

00:10:05,519 --> 00:10:09,120
other things that are currently in the

00:10:06,959 --> 00:10:11,200
works include

00:10:09,120 --> 00:10:12,399
adding support for displacement shaders

00:10:11,200 --> 00:10:15,839
in the osl

00:10:12,399 --> 00:10:16,240
shader gen code generator improvements

00:10:15,839 --> 00:10:17,920
to how

00:10:16,240 --> 00:10:19,600
documents and their include files are

00:10:17,920 --> 00:10:21,519
imported

00:10:19,600 --> 00:10:23,279
oh i love this one a new shader

00:10:21,519 --> 00:10:24,880
generator back end for spear view which

00:10:23,279 --> 00:10:28,640
will enable the generation of

00:10:24,880 --> 00:10:31,440
hlsl metal sl and webgl shaders

00:10:28,640 --> 00:10:33,200
and javascript bindings for the

00:10:31,440 --> 00:10:36,320
materialx api

00:10:33,200 --> 00:10:38,000
yay um again i'll add that this

00:10:36,320 --> 00:10:40,000
uh the little disclaimer that this is

00:10:38,000 --> 00:10:41,920
work in progress in various forks of the

00:10:40,000 --> 00:10:43,760
code base and we don't have an official

00:10:41,920 --> 00:10:44,640
time frame for this to be merged in to

00:10:43,760 --> 00:10:46,320
the main line

00:10:44,640 --> 00:10:47,760
but this is all cool enough stuff that i

00:10:46,320 --> 00:10:48,320
thought you guys would all be uh

00:10:47,760 --> 00:10:51,760
interested

00:10:48,320 --> 00:10:51,760
in hearing about it

00:10:52,560 --> 00:10:57,200
as i mentioned earlier we are continuing

00:10:54,640 --> 00:10:59,600
to work on improving material x

00:10:57,200 --> 00:11:00,240
to that we are releasing a draft one

00:10:59,600 --> 00:11:03,200
version

00:11:00,240 --> 00:11:04,000
of the 1.38 specification next week at

00:11:03,200 --> 00:11:05,920
seagraph

00:11:04,000 --> 00:11:07,839
and here's a little sneak peek at some

00:11:05,920 --> 00:11:10,320
of the upcoming enhancements that will

00:11:07,839 --> 00:11:10,320
be added

00:11:10,720 --> 00:11:14,880
the big one is material nodes these are

00:11:13,920 --> 00:11:17,440
regular nodes

00:11:14,880 --> 00:11:18,880
with material output types this replaces

00:11:17,440 --> 00:11:21,920
the old material element

00:11:18,880 --> 00:11:23,200
and shader refs and bind inputs and all

00:11:21,920 --> 00:11:25,200
those things

00:11:23,200 --> 00:11:26,640
should be much much nicer to work with

00:11:25,200 --> 00:11:28,160
and i think that you will all really

00:11:26,640 --> 00:11:30,399
like it

00:11:28,160 --> 00:11:32,480
we're also adding a formalized target

00:11:30,399 --> 00:11:36,160
definition element which will support

00:11:32,480 --> 00:11:36,640
inheritance some new standard nodes

00:11:36,160 --> 00:11:40,240
because

00:11:36,640 --> 00:11:40,240
who doesn't like new nodes to play with

00:11:40,320 --> 00:11:43,440
some new mechanisms for node

00:11:41,920 --> 00:11:46,640
documentation and

00:11:43,440 --> 00:11:47,839
nerd node organization um and we're also

00:11:46,640 --> 00:11:50,079
taking the opportunity

00:11:47,839 --> 00:11:52,240
to clean up uh some annoying legacy

00:11:50,079 --> 00:11:54,160
things that made support in materialx in

00:11:52,240 --> 00:11:55,360
applications a little bit more difficult

00:11:54,160 --> 00:11:59,200
than it should be and

00:11:55,360 --> 00:12:01,600
you know a whole lot more so that's a

00:11:59,200 --> 00:12:03,120
brief overview what's coming in 1.38

00:12:01,600 --> 00:12:04,240
we'll be talking about all of these

00:12:03,120 --> 00:12:06,160
changes and more

00:12:04,240 --> 00:12:09,360
at siggraph at our birds of a feather

00:12:06,160 --> 00:12:10,399
session which is on tuesday august 25th

00:12:09,360 --> 00:12:12,160
at 10 a.m

00:12:10,399 --> 00:12:13,680
we have a bunch of great speakers and

00:12:12,160 --> 00:12:15,760
presentations and demos

00:12:13,680 --> 00:12:17,519
and all that lined up and we'll be going

00:12:15,760 --> 00:12:18,720
into a lot more detail on everything i

00:12:17,519 --> 00:12:20,560
talked about today

00:12:18,720 --> 00:12:22,079
as well as show and discuss other new

00:12:20,560 --> 00:12:23,519
and future developments so if you're

00:12:22,079 --> 00:12:26,320
registered for siggraph i hope that

00:12:23,519 --> 00:12:28,720
you'll be able to join us

00:12:26,320 --> 00:12:30,480
also at siggraph uh jonathan stone from

00:12:28,720 --> 00:12:31,360
lucasfilm and nicholas harrison from

00:12:30,480 --> 00:12:33,360
autodesk

00:12:31,360 --> 00:12:35,279
will be discussing the material

00:12:33,360 --> 00:12:36,079
physically based shading nodes in great

00:12:35,279 --> 00:12:38,000
detail

00:12:36,079 --> 00:12:41,760
at the physically based shading course

00:12:38,000 --> 00:12:41,760
on wednesday morning the 26th

00:12:42,399 --> 00:12:47,040
so that's it for my talk thanks to all

00:12:45,279 --> 00:12:48,560
of you for logging in and watching

00:12:47,040 --> 00:12:50,000
and i'd especially like to thank the

00:12:48,560 --> 00:12:51,839
academy software foundation for

00:12:50,000 --> 00:12:52,480
organizing and sponsoring open source

00:12:51,839 --> 00:12:54,000
days

00:12:52,480 --> 00:12:56,000
and for inviting me here to speak with

00:12:54,000 --> 00:12:59,279
you all today so with that

00:12:56,000 --> 00:13:07,839
i'll open up to uh questions and

00:12:59,279 --> 00:13:07,839
go there thanks everyone

00:13:32,839 --> 00:13:35,839
okay

00:13:36,560 --> 00:13:39,760
all right uh so how do we deal with

00:13:38,720 --> 00:13:41,360
questions we uh

00:13:39,760 --> 00:13:42,959
enter uh questions into the chat i

00:13:41,360 --> 00:13:46,000
believe so

00:13:42,959 --> 00:13:48,160
uh i can uh i can tackle some of the

00:13:46,000 --> 00:13:50,240
questions that were just posted

00:13:48,160 --> 00:13:51,440
um and answer them live um and of course

00:13:50,240 --> 00:13:53,360
will be available

00:13:51,440 --> 00:13:55,199
after this session as well uh if you

00:13:53,360 --> 00:13:59,519
want to ask questions either

00:13:55,199 --> 00:14:02,800
here or in the um asw up asws slack

00:13:59,519 --> 00:14:05,519
but see i see a question from kristen

00:14:02,800 --> 00:14:06,160
asking unreal engine supports this tech

00:14:05,519 --> 00:14:08,639
um

00:14:06,160 --> 00:14:10,560
we're working with epic to move that

00:14:08,639 --> 00:14:14,160
forward there isn't anything

00:14:10,560 --> 00:14:15,360
uh yet available in terms of material x

00:14:14,160 --> 00:14:18,240
import export

00:14:15,360 --> 00:14:18,880
for unreal engine but it's something

00:14:18,240 --> 00:14:21,120
that

00:14:18,880 --> 00:14:22,320
uh both we and epic are very interested

00:14:21,120 --> 00:14:25,519
in and it's something we

00:14:22,320 --> 00:14:27,600
we expect to see appear at some point

00:14:25,519 --> 00:14:28,800
there's another question here from

00:14:27,600 --> 00:14:31,360
ernest lee

00:14:28,800 --> 00:14:33,040
i see when i looked at materialx in may

00:14:31,360 --> 00:14:35,519
it seemed to lack a metallic

00:14:33,040 --> 00:14:36,959
roughness material workflow there was a

00:14:35,519 --> 00:14:40,880
disney material support

00:14:36,959 --> 00:14:43,360
what is that um so you can define

00:14:40,880 --> 00:14:44,000
something like a substance designer

00:14:43,360 --> 00:14:47,440
metallic

00:14:44,000 --> 00:14:49,279
roughness bsdf through the the core

00:14:47,440 --> 00:14:50,959
material x physically based shading

00:14:49,279 --> 00:14:52,880
nodes um we haven't

00:14:50,959 --> 00:14:56,240
we haven't done that exercise inside of

00:14:52,880 --> 00:14:58,880
the material xcode base but i believe

00:14:56,240 --> 00:14:59,519
that adobe has already uh made some

00:14:58,880 --> 00:15:02,639
strides

00:14:59,519 --> 00:15:04,480
in that direction um and i'm not sure if

00:15:02,639 --> 00:15:06,160
they're yet using bsdf graph to

00:15:04,480 --> 00:15:08,800
represent but they certainly

00:15:06,160 --> 00:15:09,360
uh can can express materials based on

00:15:08,800 --> 00:15:12,800
the

00:15:09,360 --> 00:15:14,720
metalness roughness workflow

00:15:12,800 --> 00:15:17,680
in the same fashion that you can express

00:15:14,720 --> 00:15:20,000
other shading models in in material acts

00:15:17,680 --> 00:15:21,199
we're interested in having the disney

00:15:20,000 --> 00:15:24,000
principled model

00:15:21,199 --> 00:15:26,160
be added as an official graph so just a

00:15:24,000 --> 00:15:28,399
little piece of data that describes the

00:15:26,160 --> 00:15:30,000
connections between the bsdf nodes to

00:15:28,399 --> 00:15:33,360
create disney principle

00:15:30,000 --> 00:15:34,639
inside of um the materialx codebase

00:15:33,360 --> 00:15:36,000
it's not something that we've had the

00:15:34,639 --> 00:15:37,680
chance to do yet but it should be

00:15:36,000 --> 00:15:39,360
straightforward to accomplish that

00:15:37,680 --> 00:15:41,279
with the physically based shading nodes

00:15:39,360 --> 00:15:42,959
similarly i think if

00:15:41,279 --> 00:15:44,800
if a specific vendor wanted to

00:15:42,959 --> 00:15:48,639
contribute a metalness

00:15:44,800 --> 00:15:50,160
roughness graph for their particular

00:15:48,639 --> 00:15:52,399
shading model we would definitely be

00:15:50,160 --> 00:15:54,000
open to taking that as a contribution

00:15:52,399 --> 00:15:55,600
to the materialx code base so that we

00:15:54,000 --> 00:15:57,600
probably wouldn't author that

00:15:55,600 --> 00:15:58,399
ourselves just unilaterally we'd want

00:15:57,600 --> 00:15:59,759
that to be something that was

00:15:58,399 --> 00:16:01,279
contributed by the vendor

00:15:59,759 --> 00:16:03,120
that supports that particular shading

00:16:01,279 --> 00:16:06,480
model

00:16:03,120 --> 00:16:08,320
and also uh just point out in the um

00:16:06,480 --> 00:16:10,000
you know the slides that i showed one of

00:16:08,320 --> 00:16:12,320
the wedges was

00:16:10,000 --> 00:16:14,480
the gold material that had the roughness

00:16:12,320 --> 00:16:16,800
uh varying over the surface

00:16:14,480 --> 00:16:17,680
um i believe that's using the conductor

00:16:16,800 --> 00:16:20,639
brdf

00:16:17,680 --> 00:16:21,519
um node internally uh to get the

00:16:20,639 --> 00:16:23,440
metallic

00:16:21,519 --> 00:16:24,639
look um so hopefully that's at least a

00:16:23,440 --> 00:16:27,199
good starting point and

00:16:24,639 --> 00:16:27,839
if not let us know what uh you think is

00:16:27,199 --> 00:16:30,320
missing

00:16:27,839 --> 00:16:32,079
and we'll be sure that proper support is

00:16:30,320 --> 00:16:33,920
uh added you know we want to

00:16:32,079 --> 00:16:36,720
be able to render whatever it is that

00:16:33,920 --> 00:16:38,880
you guys need yeah

00:16:36,720 --> 00:16:40,720
you could either create uh such a

00:16:38,880 --> 00:16:42,720
workflow based on something like the

00:16:40,720 --> 00:16:45,199
conductor node or based on the um

00:16:42,720 --> 00:16:45,759
generalized schlick node depending on

00:16:45,199 --> 00:16:47,199
how it's

00:16:45,759 --> 00:16:48,800
how the underlying implementation is

00:16:47,199 --> 00:16:50,240
done in the particular shader that

00:16:48,800 --> 00:16:52,959
you're interested in

00:16:50,240 --> 00:16:54,320
um in in something like unreal engine

00:16:52,959 --> 00:16:57,519
for example that would be based

00:16:54,320 --> 00:16:59,920
on the generalized schlick uh brdf

00:16:57,519 --> 00:17:00,639
we can go into further details on that

00:16:59,920 --> 00:17:02,320
in the

00:17:00,639 --> 00:17:04,720
materialx discussion forum if you're

00:17:02,320 --> 00:17:06,720
interested um i see one additional

00:17:04,720 --> 00:17:08,720
question this is a really popular one

00:17:06,720 --> 00:17:10,319
can you please talk a bit about usd and

00:17:08,720 --> 00:17:12,559
materialx workflows

00:17:10,319 --> 00:17:14,559
so i i don't want to steal the thunder

00:17:12,559 --> 00:17:16,319
of what pixar plans to present

00:17:14,559 --> 00:17:18,319
at siggraph but there's definitely new

00:17:16,319 --> 00:17:19,839
developments in that space

00:17:18,319 --> 00:17:21,600
that pixar will have a chance to talk

00:17:19,839 --> 00:17:23,760
about um but

00:17:21,600 --> 00:17:25,600
i don't want to yeah go into the details

00:17:23,760 --> 00:17:26,959
of what what is being developed

00:17:25,600 --> 00:17:29,280
just yet because i'd like to give them a

00:17:26,959 --> 00:17:31,440
chance to speak to that

00:17:29,280 --> 00:17:32,480
well when i see one more is there

00:17:31,440 --> 00:17:35,840
support coming for

00:17:32,480 --> 00:17:37,840
vulcan in the future so spear v uh would

00:17:35,840 --> 00:17:40,799
be potentially a way to

00:17:37,840 --> 00:17:41,360
integrate vulcan into the mix um our

00:17:40,799 --> 00:17:43,440
viewer

00:17:41,360 --> 00:17:45,039
is currently not based on vulcan but

00:17:43,440 --> 00:17:46,080
we're very interested in creating a

00:17:45,039 --> 00:17:48,559
version of that

00:17:46,080 --> 00:17:50,080
that's falcon based in the future right

00:17:48,559 --> 00:17:52,240
now it's based on opengl

00:17:50,080 --> 00:17:53,840
but the same code generation approach

00:17:52,240 --> 00:17:55,520
that works for opengl

00:17:53,840 --> 00:17:57,360
or any other shooting language would

00:17:55,520 --> 00:17:59,120
work for spear v

00:17:57,360 --> 00:18:00,880
as well and there's no reason why it

00:17:59,120 --> 00:18:04,480
couldn't be extended to vulcan-based

00:18:00,880 --> 00:18:07,280
rendering engines in the future as well

00:18:04,480 --> 00:18:09,280
yeah as far as uh there's a question a

00:18:07,280 --> 00:18:10,160
follow-up about the usd and materialx

00:18:09,280 --> 00:18:12,559
workflow

00:18:10,160 --> 00:18:14,640
um that uh running the impression pixar

00:18:12,559 --> 00:18:17,760
is not having a usd buff

00:18:14,640 --> 00:18:20,320
um that i believe is true um

00:18:17,760 --> 00:18:21,760
i i don't want to speak for them or

00:18:20,320 --> 00:18:22,480
whatever but you know for whatever

00:18:21,760 --> 00:18:25,840
reasons they

00:18:22,480 --> 00:18:26,720
decided not to hold one um so they will

00:18:25,840 --> 00:18:28,320
be making

00:18:26,720 --> 00:18:30,480
whatever announcements they're going to

00:18:28,320 --> 00:18:32,880
make at whatever time frame

00:18:30,480 --> 00:18:34,320
uh they feel is right i i don't think

00:18:32,880 --> 00:18:35,919
it's that far away but

00:18:34,320 --> 00:18:38,080
you know i i certainly don't want to set

00:18:35,919 --> 00:18:40,240
a time frame for them but

00:18:38,080 --> 00:18:42,320
i'm very excited about it as well as you

00:18:40,240 --> 00:18:43,679
are i can't wait to

00:18:42,320 --> 00:18:45,360
hear what they say when they do say

00:18:43,679 --> 00:18:47,840
something about it

00:18:45,360 --> 00:18:47,840
absolutely

00:18:54,320 --> 00:18:57,840
all right we have a few more minutes any

00:18:56,400 --> 00:19:11,840
other questions in the

00:18:57,840 --> 00:19:11,840
q a or the chat

00:19:15,280 --> 00:19:18,720
i think that's it for the questions that

00:19:16,720 --> 00:19:20,720
i see um at least

00:19:18,720 --> 00:19:22,320
in the zoom chat but feel free to follow

00:19:20,720 --> 00:19:24,960
up on the aswf

00:19:22,320 --> 00:19:26,320
slack after this presentation and we can

00:19:24,960 --> 00:19:28,799
we can help answer any additional

00:19:26,320 --> 00:19:28,799
questions

00:19:28,960 --> 00:19:32,000
keep an eye out for that and we also do

00:19:31,360 --> 00:19:35,200
have

00:19:32,000 --> 00:19:35,840
the uh official materialx discussion

00:19:35,200 --> 00:19:37,919
group

00:19:35,840 --> 00:19:39,360
uh if you want to open up to a wider

00:19:37,919 --> 00:19:41,240
audience um

00:19:39,360 --> 00:19:42,880
that you know you can join that through

00:19:41,240 --> 00:19:46,400
materialx.org

00:19:42,880 --> 00:19:47,120
um and there's also lots of ways to get

00:19:46,400 --> 00:19:50,840
a hold of us

00:19:47,120 --> 00:19:53,840
and the other developers working on

00:19:50,840 --> 00:19:53,840
materialx

00:20:00,480 --> 00:20:04,640

YouTube URL: https://www.youtube.com/watch?v=kvYHVSkbaoM


