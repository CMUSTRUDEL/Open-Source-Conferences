Title: ASWF Continuous Integration Working Group
Publication date: 2020-08-24
Playlist: Open Source Days 2020
Description: 
	ASWF Continuous Integration Working Group
Speakers: Christina Tempelaar-Lietz, Daniel Heckenberg, JF Panisset, Aloys Baillet

For more information about the Academy Software Foundation go to: https://www.aswf.io/
Captions: 
	00:00:00,240 --> 00:00:04,960
uh welcome everyone to um

00:00:03,120 --> 00:00:07,279
this session where we will update the

00:00:04,960 --> 00:00:08,800
progress of the continuous integration

00:00:07,279 --> 00:00:09,840
working group the academy software

00:00:08,800 --> 00:00:13,440
foundation

00:00:09,840 --> 00:00:16,960
um we will have a few presentations

00:00:13,440 --> 00:00:20,080
uh i'll go through uh the proper agenda

00:00:16,960 --> 00:00:21,920
in a moment once um everyone's had a few

00:00:20,080 --> 00:00:24,480
seconds to uh to land

00:00:21,920 --> 00:00:24,480
and adjust

00:00:26,560 --> 00:00:33,280
as usual we do have

00:00:30,000 --> 00:00:35,440
both chat and q a in this session and as

00:00:33,280 --> 00:00:38,399
a fairly short session

00:00:35,440 --> 00:00:39,360
please don't feel that you need to wait

00:00:38,399 --> 00:00:42,719
until the end

00:00:39,360 --> 00:00:44,879
to post into the chat or the q a we'll

00:00:42,719 --> 00:00:46,399
do our best to overlap things as much as

00:00:44,879 --> 00:00:49,920
possible in order to

00:00:46,399 --> 00:00:53,520
um allow us to make best use of the time

00:00:49,920 --> 00:00:55,120
and um if uh we're planning on having a

00:00:53,520 --> 00:00:58,160
little bit of time at the end so

00:00:55,120 --> 00:00:59,120
we'll choose uh some of the questions

00:00:58,160 --> 00:01:02,239
that um

00:00:59,120 --> 00:01:03,920
have been upvoted uh in order to

00:01:02,239 --> 00:01:07,920
uh to answer those live the others we'll

00:01:03,920 --> 00:01:07,920
try and answer in the text box itself

00:01:10,960 --> 00:01:14,560
okay we have 50. that was our magic

00:01:12,640 --> 00:01:27,840
number so

00:01:14,560 --> 00:01:27,840
we will dive right in

00:01:30,640 --> 00:01:35,360
okay so today uh we'll give a quick

00:01:33,600 --> 00:01:36,720
update on

00:01:35,360 --> 00:01:39,439
what it is that we're trying to do with

00:01:36,720 --> 00:01:40,960
ci uh in the working group and for

00:01:39,439 --> 00:01:42,880
the academy software foundation in

00:01:40,960 --> 00:01:45,920
general with of course

00:01:42,880 --> 00:01:48,240
uh a short note to explain how

00:01:45,920 --> 00:01:50,880
these efforts uh relate to the vfx

00:01:48,240 --> 00:01:53,920
reference platform

00:01:50,880 --> 00:01:54,399
jf will be giving a bit of a background

00:01:53,920 --> 00:01:56,399
and

00:01:54,399 --> 00:01:57,840
also highlighting the current entry

00:01:56,399 --> 00:01:59,280
points in order to understand and

00:01:57,840 --> 00:02:02,479
redeploy

00:01:59,280 --> 00:02:04,159
the ci system for other needs alois will

00:02:02,479 --> 00:02:07,119
be giving an overview of

00:02:04,159 --> 00:02:08,479
the docker infrastructure that we're

00:02:07,119 --> 00:02:11,920
using to provide

00:02:08,479 --> 00:02:14,000
uh repeatable and efficient uh

00:02:11,920 --> 00:02:15,520
configuration and environments for our

00:02:14,000 --> 00:02:17,760
ci needs

00:02:15,520 --> 00:02:19,440
um christina will be giving us a case

00:02:17,760 --> 00:02:22,480
study example of how

00:02:19,440 --> 00:02:24,480
the ci system is being in use for one of

00:02:22,480 --> 00:02:26,640
our projects openexr

00:02:24,480 --> 00:02:28,560
and then we'll be going back to jf to

00:02:26,640 --> 00:02:30,560
discuss some of the

00:02:28,560 --> 00:02:31,680
active challenges that we're working on

00:02:30,560 --> 00:02:35,360
within the working group

00:02:31,680 --> 00:02:37,519
and that is definitely a hook for

00:02:35,360 --> 00:02:39,040
involvement from any of you or others

00:02:37,519 --> 00:02:40,959
that you may know who have

00:02:39,040 --> 00:02:42,080
interest or expertise in these

00:02:40,959 --> 00:02:43,599
challenging areas

00:02:42,080 --> 00:02:46,400
and lastly of course we'll have some

00:02:43,599 --> 00:02:46,400
time for discussion

00:02:47,120 --> 00:02:52,400
okay so as we move through you will hear

00:02:50,640 --> 00:02:55,519
from each of these people

00:02:52,400 --> 00:02:57,519
and hopefully see them on your screen

00:02:55,519 --> 00:02:58,720
and obviously they can each introduce

00:02:57,519 --> 00:03:01,680
themselves they go

00:02:58,720 --> 00:03:03,360
my name is daniel heckenberg i'm an rd

00:03:01,680 --> 00:03:07,040
supervisor at animal logic

00:03:03,360 --> 00:03:10,400
and i also serve as the chair of the

00:03:07,040 --> 00:03:11,680
aswf technical advisory committee and

00:03:10,400 --> 00:03:14,560
i've also been chairing the

00:03:11,680 --> 00:03:14,560
ci working group

00:03:17,120 --> 00:03:20,800
um contact details of course these are

00:03:19,519 --> 00:03:22,560
available elsewhere

00:03:20,800 --> 00:03:24,000
but if you'd like to take the moment now

00:03:22,560 --> 00:03:24,959
just to find the slack channel in

00:03:24,000 --> 00:03:26,239
particular

00:03:24,959 --> 00:03:30,480
we'll have this slide at the end of

00:03:26,239 --> 00:03:30,480
course of the session as well

00:03:31,040 --> 00:03:34,799
great so the ci infrastructure that we

00:03:34,159 --> 00:03:37,840
have

00:03:34,799 --> 00:03:40,959
developed uh was an attempt

00:03:37,840 --> 00:03:44,159
to uh provide modern

00:03:40,959 --> 00:03:44,560
uh ci infrastructure that would work

00:03:44,159 --> 00:03:46,720
well

00:03:44,560 --> 00:03:48,959
in an open source setting using

00:03:46,720 --> 00:03:51,280
primarily sort of github as the core of

00:03:48,959 --> 00:03:51,280
our

00:03:51,840 --> 00:03:55,680
as our open source control model

00:03:55,840 --> 00:03:59,280
this has undergone a number of

00:03:57,040 --> 00:04:00,959
evolutions and jf will talk to those in

00:03:59,280 --> 00:04:05,280
a moment but our goals

00:04:00,959 --> 00:04:07,200
were not only to serve our

00:04:05,280 --> 00:04:10,400
projects very well but also to really

00:04:07,200 --> 00:04:14,239
make it easy and encourage

00:04:10,400 --> 00:04:16,880
best practice as a start so extending

00:04:14,239 --> 00:04:18,160
our use of ci uh to things like static

00:04:16,880 --> 00:04:22,320
analysis and so on

00:04:18,160 --> 00:04:24,560
um and secondly also extending

00:04:22,320 --> 00:04:26,080
um making making an infrastructure that

00:04:24,560 --> 00:04:29,840
would make it easy for other

00:04:26,080 --> 00:04:31,759
uh projects and other um

00:04:29,840 --> 00:04:33,280
open source endeavors in order to pick

00:04:31,759 --> 00:04:35,440
up parts of

00:04:33,280 --> 00:04:37,199
sorry open source and proprietary studio

00:04:35,440 --> 00:04:39,520
endeavors to pick up parts of

00:04:37,199 --> 00:04:41,759
uh the system that we were developing

00:04:39,520 --> 00:04:43,600
and reuse those in other contexts

00:04:41,759 --> 00:04:45,440
and we'll be able to see how that's come

00:04:43,600 --> 00:04:48,800
about particularly through the evolution

00:04:45,440 --> 00:04:48,800
of the architecture that we're using

00:04:50,479 --> 00:04:53,520
so a word about the vfx reference

00:04:52,800 --> 00:04:55,280
platform

00:04:53,520 --> 00:04:56,639
those of you who've been involved in

00:04:55,280 --> 00:04:57,759
software development in our industry

00:04:56,639 --> 00:05:00,960
will know that

00:04:57,759 --> 00:05:03,759
the particular mix of commercial

00:05:00,960 --> 00:05:04,720
binary components and large amounts of

00:05:03,759 --> 00:05:07,199
open source

00:05:04,720 --> 00:05:08,160
and proprietary in-house software create

00:05:07,199 --> 00:05:10,720
a

00:05:08,160 --> 00:05:12,560
a particular challenge for integration

00:05:10,720 --> 00:05:15,280
and version management

00:05:12,560 --> 00:05:16,800
um the vfx reference platform obviously

00:05:15,280 --> 00:05:20,080
it was an attempt to

00:05:16,800 --> 00:05:21,919
coordinate changes and testing

00:05:20,080 --> 00:05:23,199
of all of those different combinations

00:05:21,919 --> 00:05:26,320
in order to provide much

00:05:23,199 --> 00:05:30,639
a much narrower matrix of configurations

00:05:26,320 --> 00:05:31,199
and we are we are of course using that

00:05:30,639 --> 00:05:34,560
uh

00:05:31,199 --> 00:05:37,199
as the embodiment of our uh build

00:05:34,560 --> 00:05:38,320
um configuration environment uh eloise

00:05:37,199 --> 00:05:40,479
will talk a lot about

00:05:38,320 --> 00:05:42,080
how we're actually taking the

00:05:40,479 --> 00:05:42,720
essentially the specifications that the

00:05:42,080 --> 00:05:45,440
best

00:05:42,720 --> 00:05:46,000
vfx reform reference platform provides

00:05:45,440 --> 00:05:48,080
and

00:05:46,000 --> 00:05:49,840
uh turning those into concrete recipes

00:05:48,080 --> 00:05:52,160
which we then use to build

00:05:49,840 --> 00:05:53,440
uh docker containers which can be used

00:05:52,160 --> 00:05:56,880
by our projects uh

00:05:53,440 --> 00:06:00,160
or um for other purposes and indeed

00:05:56,880 --> 00:06:02,720
uh we're doing that not only now for um

00:06:00,160 --> 00:06:04,080
current and historical uh versions of

00:06:02,720 --> 00:06:06,240
the reference platform but it also

00:06:04,080 --> 00:06:08,319
allows us to do testing

00:06:06,240 --> 00:06:10,240
for new and current versions as the

00:06:08,319 --> 00:06:12,080
various components are developed

00:06:10,240 --> 00:06:13,680
um there will be another session

00:06:12,080 --> 00:06:15,199
specifically talking about the vfx

00:06:13,680 --> 00:06:16,080
reference platform as part of open

00:06:15,199 --> 00:06:17,840
source days

00:06:16,080 --> 00:06:21,840
um happening tomorrow so please join in

00:06:17,840 --> 00:06:21,840
there for more details

00:06:23,440 --> 00:06:28,960
and with that uh we'll move over

00:06:26,800 --> 00:06:28,960
to

00:06:30,240 --> 00:06:36,160
just lost control good

00:06:34,080 --> 00:06:39,840
sorry we're just having a mouse tussle

00:06:36,160 --> 00:06:39,840
and with that we'll move over to

00:06:40,240 --> 00:06:47,120
jf all yours uh

00:06:43,600 --> 00:06:49,919
yes the remote control is

00:06:47,120 --> 00:06:50,560
not working oh there we go just there's

00:06:49,919 --> 00:06:53,680
a delay

00:06:50,560 --> 00:06:54,560
okay uh so when the academy software

00:06:53,680 --> 00:06:58,240
foundation

00:06:54,560 --> 00:07:01,599
was uh first set up uh ci was

00:06:58,240 --> 00:07:02,720
identified as one of the initial

00:07:01,599 --> 00:07:05,120
deliverables

00:07:02,720 --> 00:07:07,039
and the initial implementation was based

00:07:05,120 --> 00:07:08,240
on a reference design that the linux

00:07:07,039 --> 00:07:11,440
foundation had used

00:07:08,240 --> 00:07:13,520
for some of its other uh

00:07:11,440 --> 00:07:14,720
some of the other foundations that it

00:07:13,520 --> 00:07:17,840
had helped

00:07:14,720 --> 00:07:22,479
uh put in place so this was

00:07:17,840 --> 00:07:31,360
a um and i am on the wrong slide

00:07:22,479 --> 00:07:33,759
uh if anybody

00:07:31,360 --> 00:07:34,560
is there any way that somebody could try

00:07:33,759 --> 00:07:38,000
to control this

00:07:34,560 --> 00:07:40,479
and move it backwards for me yes

00:07:38,000 --> 00:07:41,120
i'll step in there we go there we go

00:07:40,479 --> 00:07:45,599
okay

00:07:41,120 --> 00:07:48,319
uh so the system was still using github

00:07:45,599 --> 00:07:48,960
for and get for source code management

00:07:48,319 --> 00:07:52,560
uh but

00:07:48,960 --> 00:07:56,319
all other components uh were open source

00:07:52,560 --> 00:07:59,680
and were hosted on a um

00:07:56,319 --> 00:08:03,120
openstack uh cloud provider

00:07:59,680 --> 00:08:07,919
and uh the

00:08:03,120 --> 00:08:12,160
uh and then the system for managing

00:08:07,919 --> 00:08:15,759
uh everything was based on uh

00:08:12,160 --> 00:08:19,759
was based on jenkins and then a set

00:08:15,759 --> 00:08:22,960
of predefined vms would host uh jenkins

00:08:19,759 --> 00:08:26,160
linux and windows builders uh nexus for

00:08:22,960 --> 00:08:30,000
artifact storage and then um

00:08:26,160 --> 00:08:32,479
sonar cube for static analysis um

00:08:30,000 --> 00:08:33,440
it turns out that it didn't work all

00:08:32,479 --> 00:08:36,479
that well

00:08:33,440 --> 00:08:40,000
for our needs it was somewhat

00:08:36,479 --> 00:08:41,760
um it was uh somewhat uh java

00:08:40,000 --> 00:08:44,159
centric because it had been really put

00:08:41,760 --> 00:08:46,640
in place for uh

00:08:44,159 --> 00:08:47,760
uh java based projects so it didn't work

00:08:46,640 --> 00:08:50,000
as well for c

00:08:47,760 --> 00:08:51,040
for our c mostly c plus and python

00:08:50,000 --> 00:08:54,399
projects

00:08:51,040 --> 00:08:56,320
um so and also it did not so the support

00:08:54,399 --> 00:08:58,720
for windows was really not

00:08:56,320 --> 00:08:59,839
quite there yet and it did not support

00:08:58,720 --> 00:09:03,279
mac

00:08:59,839 --> 00:09:06,320
so we then moved on to uh

00:09:03,279 --> 00:09:08,480
a system fully based on github and azure

00:09:06,320 --> 00:09:10,399
pipelines and the integration the

00:09:08,480 --> 00:09:12,560
the interest of azure pipelines is that

00:09:10,399 --> 00:09:15,680
it offered a modern

00:09:12,560 --> 00:09:19,120
yaml based pipeline so you could define

00:09:15,680 --> 00:09:22,560
uh your ci steps uh in a yaml file that

00:09:19,120 --> 00:09:25,680
was controlled as part of your uh

00:09:22,560 --> 00:09:28,160
of your source uh and it also

00:09:25,680 --> 00:09:29,839
offered uh builder free builders for

00:09:28,160 --> 00:09:32,560
linux windows and mac

00:09:29,839 --> 00:09:34,480
uh which was a great attraction and

00:09:32,560 --> 00:09:35,200
meant that our projects no longer had to

00:09:34,480 --> 00:09:37,760
have

00:09:35,200 --> 00:09:39,600
different ci's to cover different

00:09:37,760 --> 00:09:44,240
platforms

00:09:39,600 --> 00:09:48,800
it also supported build in container

00:09:44,240 --> 00:09:50,000
workflows on linux and windows and

00:09:48,800 --> 00:09:52,720
it had a number of third-party

00:09:50,000 --> 00:09:55,040
integrations and we also

00:09:52,720 --> 00:09:57,279
at that point we also moved to using the

00:09:55,040 --> 00:09:58,959
sas based sonar cloud for static

00:09:57,279 --> 00:10:02,399
analysis

00:09:58,959 --> 00:10:03,279
but then um github basically azure

00:10:02,399 --> 00:10:05,279
pipelines

00:10:03,279 --> 00:10:07,760
kind of in a way although it is still

00:10:05,279 --> 00:10:11,440
offered morphed into

00:10:07,760 --> 00:10:12,480
uh github actions and github actions

00:10:11,440 --> 00:10:15,279
having

00:10:12,480 --> 00:10:16,959
kind of instantly so much mind share in

00:10:15,279 --> 00:10:20,079
the open source community

00:10:16,959 --> 00:10:24,399
we decided to transition to

00:10:20,079 --> 00:10:26,720
github actions uh having ever you know

00:10:24,399 --> 00:10:29,360
not having a separate ci system from the

00:10:26,720 --> 00:10:31,680
scm system met fewer moving parts

00:10:29,360 --> 00:10:32,720
it allowed us to do things like fairly

00:10:31,680 --> 00:10:35,200
simply share

00:10:32,720 --> 00:10:35,760
organizational level secrets so for

00:10:35,200 --> 00:10:39,040
instance

00:10:35,760 --> 00:10:40,399
a single token for sonar cloud analysis

00:10:39,040 --> 00:10:43,120
or a single token

00:10:40,399 --> 00:10:45,120
for github sorry pushing to docker

00:10:43,120 --> 00:10:46,880
repositories could be shared across all

00:10:45,120 --> 00:10:50,480
of our projects

00:10:46,880 --> 00:10:53,519
it does offer uh linux windows

00:10:50,480 --> 00:10:54,480
and mac builder builders and as i said

00:10:53,519 --> 00:10:57,360
earlier it has

00:10:54,480 --> 00:10:59,600
the widest develo open source developer

00:10:57,360 --> 00:11:02,399
mindshare

00:10:59,600 --> 00:11:02,800
a couple things that came up during the

00:11:02,399 --> 00:11:06,480
the

00:11:02,800 --> 00:11:09,519
keynote session is uh

00:11:06,480 --> 00:11:11,040
the the desire to have a

00:11:09,519 --> 00:11:12,839
a build infrastructure or a ci

00:11:11,040 --> 00:11:15,839
infrastructure that is reproducible by

00:11:12,839 --> 00:11:15,839
studios

00:11:16,079 --> 00:11:19,200
see you cannot you know basically we it

00:11:18,640 --> 00:11:20,959
is felt

00:11:19,200 --> 00:11:22,320
that github at this point is

00:11:20,959 --> 00:11:25,600
sufficiently

00:11:22,320 --> 00:11:27,519
uh well known and even private

00:11:25,600 --> 00:11:28,640
github instances are used by multiple

00:11:27,519 --> 00:11:30,880
studios

00:11:28,640 --> 00:11:32,720
that it really should and similarly

00:11:30,880 --> 00:11:36,399
there are private versions

00:11:32,720 --> 00:11:39,120
of external services like sonar cloud

00:11:36,399 --> 00:11:40,079
that you could basically use the same

00:11:39,120 --> 00:11:43,040
infrastructure

00:11:40,079 --> 00:11:44,800
for building uh for either a private

00:11:43,040 --> 00:11:48,640
build of an aswf project

00:11:44,800 --> 00:11:52,000
or your own builds and then i also

00:11:48,640 --> 00:11:55,200
wanted to uh point out that

00:11:52,000 --> 00:11:57,920
we have a um

00:11:55,200 --> 00:11:58,320
a reference project or a sample project

00:11:57,920 --> 00:12:02,160
in

00:11:58,320 --> 00:12:06,240
the uh aswf uh github

00:12:02,160 --> 00:12:09,519
repo which uh is meant to capture

00:12:06,240 --> 00:12:12,720
kind of the best practices and where

00:12:09,519 --> 00:12:13,200
the projects what projects are agreeing

00:12:12,720 --> 00:12:17,200
to

00:12:13,200 --> 00:12:20,240
in terms of uh developer infrastructure

00:12:17,200 --> 00:12:22,320
so it's kind of a developer-centric

00:12:20,240 --> 00:12:23,279
piece of documentation if we want if you

00:12:22,320 --> 00:12:25,600
want so

00:12:23,279 --> 00:12:27,040
everybody is uh is who's interested is

00:12:25,600 --> 00:12:30,399
encouraging he can look

00:12:27,040 --> 00:12:39,839
and to contribute and that's it for me

00:12:30,399 --> 00:12:39,839
so on to eloise

00:12:49,200 --> 00:12:52,959
hi my name is i'm a development lead at

00:12:52,079 --> 00:12:56,240
animal logic

00:12:52,959 --> 00:12:58,560
and i've been involved with the aswf for

00:12:56,240 --> 00:12:59,680
about a bit more than a year now year

00:12:58,560 --> 00:13:02,959
and a half

00:12:59,680 --> 00:13:06,000
um we started using docker

00:13:02,959 --> 00:13:09,519
at animal logic in my personal

00:13:06,000 --> 00:13:10,000
time a few years ago now and it felt

00:13:09,519 --> 00:13:13,839
like

00:13:10,000 --> 00:13:17,360
a good fit for the aswf needs

00:13:13,839 --> 00:13:21,040
in terms of trying to have a platform

00:13:17,360 --> 00:13:23,600
that would be consistent um and flexible

00:13:21,040 --> 00:13:27,040
enough to run

00:13:23,600 --> 00:13:30,639
unit test builds for many of the vfx

00:13:27,040 --> 00:13:30,639
platform packages

00:13:31,040 --> 00:13:36,079
one thing the main benefits we found

00:13:33,839 --> 00:13:38,240
with the docker-based

00:13:36,079 --> 00:13:39,360
approach that we used was mostly the

00:13:38,240 --> 00:13:42,720
speed

00:13:39,360 --> 00:13:44,560
when we run the test at the moment

00:13:42,720 --> 00:13:46,079
in some of the platforms you still have

00:13:44,560 --> 00:13:47,519
to build boost you still

00:13:46,079 --> 00:13:49,760
have to build some of the upstream

00:13:47,519 --> 00:13:52,880
dependencies before you can start

00:13:49,760 --> 00:13:54,639
building um let's say open exr or

00:13:52,880 --> 00:13:56,480
some of the other packages and then

00:13:54,639 --> 00:13:56,880
running the test so you lose a lot of

00:13:56,480 --> 00:13:59,199
time

00:13:56,880 --> 00:14:01,360
before you know if you've broken

00:13:59,199 --> 00:14:04,800
something in your builds

00:14:01,360 --> 00:14:07,199
um so doca

00:14:04,800 --> 00:14:08,959
allows you as a very lightweight virtual

00:14:07,199 --> 00:14:12,240
machine to

00:14:08,959 --> 00:14:15,440
have the same environment on it

00:14:12,240 --> 00:14:17,519
at home on the cloud and to

00:14:15,440 --> 00:14:19,760
know exactly how your tests are going to

00:14:17,519 --> 00:14:19,760
land

00:14:20,079 --> 00:14:22,320
um

00:14:23,519 --> 00:14:35,040
so i'm trying to scroll down

00:14:30,399 --> 00:14:39,199
thank you um so over the years

00:14:35,040 --> 00:14:43,600
we've um created a vfx platform

00:14:39,199 --> 00:14:47,040
2018 which was the new gcc

00:14:43,600 --> 00:14:51,279
we've added 2019 with the new qt 2020

00:14:47,040 --> 00:14:54,079
with five and three um but the

00:14:51,279 --> 00:14:55,839
making of the images for the year 2020

00:14:54,079 --> 00:14:58,639
were quite um

00:14:55,839 --> 00:14:58,959
interesting because it was early on when

00:14:58,639 --> 00:15:02,880
not

00:14:58,959 --> 00:15:05,920
all packages had python3

00:15:02,880 --> 00:15:06,880
were not quite compatible yet but it was

00:15:05,920 --> 00:15:09,600
a great place

00:15:06,880 --> 00:15:11,120
to for people to actually try and make

00:15:09,600 --> 00:15:12,639
sure that they had the python3

00:15:11,120 --> 00:15:15,760
environment working

00:15:12,639 --> 00:15:18,160
and a few months ago we started with a

00:15:15,760 --> 00:15:20,959
00:15:18,160 --> 00:15:22,160
vfx here which is a brand new compiler

00:15:20,959 --> 00:15:26,320
with new c plus

00:15:22,160 --> 00:15:27,360
standard so these images have been able

00:15:26,320 --> 00:15:30,240
to

00:15:27,360 --> 00:15:32,560
allow all the different teams working on

00:15:30,240 --> 00:15:34,880
on different packages to really test

00:15:32,560 --> 00:15:36,079
their new the new compilers and make

00:15:34,880 --> 00:15:38,720
sure that they

00:15:36,079 --> 00:15:39,759
didn't break the old ones so if you go

00:15:38,720 --> 00:15:43,440
on the

00:15:39,759 --> 00:15:45,199
home page of the aswff github repository

00:15:43,440 --> 00:15:46,560
you will see on in the readme all the

00:15:45,199 --> 00:15:55,839
little all the

00:15:46,560 --> 00:15:55,839
various images that we have um

00:15:58,480 --> 00:16:05,040
i wanted to have a quick um

00:16:01,759 --> 00:16:06,480
um recap on how much the images were

00:16:05,040 --> 00:16:10,399
used so i ran some stats

00:16:06,480 --> 00:16:12,800
and it's been quite popular openvdb

00:16:10,399 --> 00:16:14,079
uh thanks to dan bailey was one of the

00:16:12,800 --> 00:16:17,360
first clients of

00:16:14,079 --> 00:16:22,079
uh pswf docker images um it's

00:16:17,360 --> 00:16:24,800
now cloaking at 21 000 docker pools uh

00:16:22,079 --> 00:16:26,240
open colorado was quite an early adopter

00:16:24,800 --> 00:16:29,040
as well openyxr

00:16:26,240 --> 00:16:29,600
um christina will talk about that a bit

00:16:29,040 --> 00:16:32,240
more

00:16:29,600 --> 00:16:33,279
open shading language uh as started

00:16:32,240 --> 00:16:36,480
using this

00:16:33,279 --> 00:16:40,240
just a few months ago open queue

00:16:36,480 --> 00:16:44,000
was there as well we have pushed about

00:16:40,240 --> 00:16:46,560
220 gigabytes of docker images

00:16:44,000 --> 00:16:47,040
in the cloud that it's a non-negligible

00:16:46,560 --> 00:16:49,360
of

00:16:47,040 --> 00:16:50,320
amount of data when you think about it

00:16:49,360 --> 00:16:53,600
it's

00:16:50,320 --> 00:16:57,279
um the biggest

00:16:53,600 --> 00:17:00,399
packages are qt clang they're

00:16:57,279 --> 00:17:01,360
all hundreds of megabytes each or more

00:17:00,399 --> 00:17:04,400
than a gigabyte

00:17:01,360 --> 00:17:07,520
for claims so it it takes a while to

00:17:04,400 --> 00:17:08,799
upload and but the download on the cloud

00:17:07,520 --> 00:17:10,319
is very quick so

00:17:08,799 --> 00:17:12,400
it's still faster to download the

00:17:10,319 --> 00:17:13,120
gigabyte of docker images than to

00:17:12,400 --> 00:17:17,039
rebuild

00:17:13,120 --> 00:17:20,240
um some of these packages like qt

00:17:17,039 --> 00:17:23,280
we maintain actively about 45

00:17:20,240 --> 00:17:24,959
um ci images so

00:17:23,280 --> 00:17:27,439
that's the combination of all of the

00:17:24,959 --> 00:17:28,400
fxes and the different packages that you

00:17:27,439 --> 00:17:31,360
have here

00:17:28,400 --> 00:17:32,000
and we have 85 intermediary packages

00:17:31,360 --> 00:17:35,760
like qt

00:17:32,000 --> 00:17:38,480
itself like um clang open exr

00:17:35,760 --> 00:17:40,880
etc that are also maintained on the side

00:17:38,480 --> 00:17:43,120
and used

00:17:40,880 --> 00:17:43,120
so

00:17:44,160 --> 00:17:49,600
go to the next slide slowly um

00:17:47,360 --> 00:17:50,799
one of the things we're starting to work

00:17:49,600 --> 00:17:53,919
on is

00:17:50,799 --> 00:17:55,840
a set of runtime docker images so

00:17:53,919 --> 00:17:57,200
the docker images that are used by the

00:17:55,840 --> 00:18:00,240
ci system

00:17:57,200 --> 00:18:02,720
are geared towards building software

00:18:00,240 --> 00:18:04,080
and they have a lot of compilers a lot

00:18:02,720 --> 00:18:07,760
of headers

00:18:04,080 --> 00:18:09,280
um we can actually build slimmer images

00:18:07,760 --> 00:18:10,400
for just runtime

00:18:09,280 --> 00:18:13,600
that's something we started to

00:18:10,400 --> 00:18:16,400
experiment with the usd working group

00:18:13,600 --> 00:18:19,600
to be able to run usd on the cloud

00:18:16,400 --> 00:18:22,960
inside jupyter notebooks for example

00:18:19,600 --> 00:18:24,240
and we're also investigating how we can

00:18:22,960 --> 00:18:27,760
make gpu

00:18:24,240 --> 00:18:30,000
work in those docker

00:18:27,760 --> 00:18:31,679
on the cloud you can make it work

00:18:30,000 --> 00:18:35,039
locally on your workstation

00:18:31,679 --> 00:18:39,280
quite easily but on the cloud is a

00:18:35,039 --> 00:18:42,480
different problem altogether

00:18:39,280 --> 00:18:46,160
so one of the things that

00:18:42,480 --> 00:18:49,200
uh we're going to focus on now is

00:18:46,160 --> 00:18:51,280
um how we go to provide this kind of

00:18:49,200 --> 00:18:54,559
convenience on windows and mac

00:18:51,280 --> 00:18:57,440
where containers are not as

00:18:54,559 --> 00:18:59,360
experienced not as refined the

00:18:57,440 --> 00:19:00,880
experience is quite rough to build

00:18:59,360 --> 00:19:03,760
containers for windows

00:19:00,880 --> 00:19:05,200
and mac does not actually support mac os

00:19:03,760 --> 00:19:08,559
docker images

00:19:05,200 --> 00:19:10,640
and in order to achieve that my hunch is

00:19:08,559 --> 00:19:13,280
that we need to figure out a

00:19:10,640 --> 00:19:15,520
package manager to build our packages

00:19:13,280 --> 00:19:17,280
and to download them quickly

00:19:15,520 --> 00:19:19,919
we'll still keep the docker convenience

00:19:17,280 --> 00:19:21,919
for linux obviously where we can

00:19:19,919 --> 00:19:23,200
but in order to replicate the ease of

00:19:21,919 --> 00:19:26,080
use for ci

00:19:23,200 --> 00:19:27,120
use cases i think we'll have to start

00:19:26,080 --> 00:19:31,679
building

00:19:27,120 --> 00:19:34,400
smaller packages and i'll leave

00:19:31,679 --> 00:19:34,400
now the

00:19:35,280 --> 00:19:40,240
to prisoner hi

00:19:38,480 --> 00:19:41,840
so i'm christina templar elites i'm a

00:19:40,240 --> 00:19:43,200
software engineer at epic games and i'm

00:19:41,840 --> 00:19:46,559
also on the

00:19:43,200 --> 00:19:47,200
tsc for openexr and i'm going to talk

00:19:46,559 --> 00:19:49,520
about

00:19:47,200 --> 00:19:50,480
continuous integration how we use it in

00:19:49,520 --> 00:19:53,200
openexr

00:19:50,480 --> 00:19:54,480
so our openasrci consists of two github

00:19:53,200 --> 00:19:57,520
actions workflows

00:19:54,480 --> 00:19:58,799
we have a ci workflow that is uh um we

00:19:57,520 --> 00:20:00,640
call the ci workflow which is a

00:19:58,799 --> 00:20:02,480
multi-platform multi-configuration set

00:20:00,640 --> 00:20:04,080
of build jobs which are invoked upon

00:20:02,480 --> 00:20:05,679
pull request and push

00:20:04,080 --> 00:20:07,440
and then we also have an analysis

00:20:05,679 --> 00:20:09,039
workflow that's a variety of slower

00:20:07,440 --> 00:20:09,679
running jobs that are scheduled to run

00:20:09,039 --> 00:20:12,240
weekly they

00:20:09,679 --> 00:20:13,679
perform analysis on the on the library

00:20:12,240 --> 00:20:14,480
and give us feedback like potential

00:20:13,679 --> 00:20:16,400
security

00:20:14,480 --> 00:20:19,280
vulnerabilities or potential memory

00:20:16,400 --> 00:20:21,280
issues and so forth

00:20:19,280 --> 00:20:23,280
these workflow files are described in

00:20:21,280 --> 00:20:24,960
the repository in a directory called

00:20:23,280 --> 00:20:26,720
github workflows and the name of the two

00:20:24,960 --> 00:20:29,360
yaml files you'll see

00:20:26,720 --> 00:20:32,799
listed here and let's see it do i have

00:20:29,360 --> 00:20:36,000
control to go to the next slide

00:20:32,799 --> 00:20:38,320
oh thank you so uh this is what you'll

00:20:36,000 --> 00:20:39,919
see when you uh when you issue a pull

00:20:38,320 --> 00:20:42,000
request to openexr

00:20:39,919 --> 00:20:43,679
you'll see there's a section in the pull

00:20:42,000 --> 00:20:45,520
request for checks

00:20:43,679 --> 00:20:47,520
and it checks things like such that

00:20:45,520 --> 00:20:49,840
you've signed off on your

00:20:47,520 --> 00:20:51,360
on your submission and that you have are

00:20:49,840 --> 00:20:53,360
signed up on your commit and that you've

00:20:51,360 --> 00:20:55,120
assigned a cla and then now you'll also

00:20:53,360 --> 00:20:56,400
see a series of builds get kicked off

00:20:55,120 --> 00:20:58,240
which are a

00:20:56,400 --> 00:20:59,520
bunch of different permutations of

00:20:58,240 --> 00:21:02,320
different configurations

00:20:59,520 --> 00:21:04,720
operating system different compilers

00:21:02,320 --> 00:21:07,520
different vfx reference platforms

00:21:04,720 --> 00:21:08,240
and these will all uh initially show a

00:21:07,520 --> 00:21:10,159
small

00:21:08,240 --> 00:21:12,000
yellow circle to the left of the job

00:21:10,159 --> 00:21:13,520
that indicates it's running and once

00:21:12,000 --> 00:21:16,640
they've completed they'll either have

00:21:13,520 --> 00:21:18,480
a little green check mark or a little

00:21:16,640 --> 00:21:21,360
red x indicating whether it's passed or

00:21:18,480 --> 00:21:23,360
failed if your job does fail you can

00:21:21,360 --> 00:21:24,559
click on the details link to the right

00:21:23,360 --> 00:21:26,400
and that will take you to the output

00:21:24,559 --> 00:21:27,600
logs to give you an indication of why it

00:21:26,400 --> 00:21:29,360
failed

00:21:27,600 --> 00:21:30,799
uh if someone could advance to the next

00:21:29,360 --> 00:21:33,039
slide thank you

00:21:30,799 --> 00:21:34,799
uh and then this is what the logs look

00:21:33,039 --> 00:21:36,720
like you can also get to these logs by

00:21:34,799 --> 00:21:38,799
clicking on the actions tab at the top

00:21:36,720 --> 00:21:40,480
and if you click on if you come to them

00:21:38,799 --> 00:21:41,120
via the actions tab you'll have to drill

00:21:40,480 --> 00:21:43,440
down

00:21:41,120 --> 00:21:44,799
into the ci to find your particular run

00:21:43,440 --> 00:21:46,080
of the workflow

00:21:44,799 --> 00:21:48,320
and then once you click on that you'll

00:21:46,080 --> 00:21:50,480
see the list of jobs on the left

00:21:48,320 --> 00:21:52,400
and then selecting a job which brings up

00:21:50,480 --> 00:21:53,280
the logs for that job and within the

00:21:52,400 --> 00:21:56,799
logs you'll see

00:21:53,280 --> 00:21:58,480
a bunch of steps for that for that job

00:21:56,799 --> 00:22:00,320
and then to the left of the step there's

00:21:58,480 --> 00:22:00,880
a little carrot that you can twirl open

00:22:00,320 --> 00:22:02,720
to see the

00:22:00,880 --> 00:22:04,240
log output for that particular job to

00:22:02,720 --> 00:22:06,640
give you some indication of why

00:22:04,240 --> 00:22:08,080
the particular job failed is sometimes

00:22:06,640 --> 00:22:09,600
they'll fail and have absolutely nothing

00:22:08,080 --> 00:22:10,559
to do with your pull request sometimes

00:22:09,600 --> 00:22:12,799
they

00:22:10,559 --> 00:22:14,480
the checkout fails it freezes up or the

00:22:12,799 --> 00:22:15,840
node entirely freezes up and doesn't run

00:22:14,480 --> 00:22:17,360
anything and in that case

00:22:15,840 --> 00:22:19,280
on the upper right here you can select

00:22:17,360 --> 00:22:21,120
to rerun all jobs there isn't an option

00:22:19,280 --> 00:22:23,360
to rerun just a single job

00:22:21,120 --> 00:22:25,200
but usually if you just rerun all jobs

00:22:23,360 --> 00:22:27,840
it runs everything and usually it

00:22:25,200 --> 00:22:28,799
it it clears up any issues like a frozen

00:22:27,840 --> 00:22:33,200
node that doesn't

00:22:28,799 --> 00:22:33,200
happen too frequently um the next slide

00:22:33,600 --> 00:22:37,280
so now i'm going to talk briefly about

00:22:35,280 --> 00:22:39,520
what our what's in our analysis jobs and

00:22:37,280 --> 00:22:41,919
our analysis workflow that runs weekly

00:22:39,520 --> 00:22:43,919
we have a sonar cloud scan that performs

00:22:41,919 --> 00:22:46,559
static analysis and it's configured to

00:22:43,919 --> 00:22:48,240
also uh run coverage analysis we have a

00:22:46,559 --> 00:22:49,600
valgrind memtrek job and then we have

00:22:48,240 --> 00:22:52,799
openexr's

00:22:49,600 --> 00:22:56,240
own fuzz test ilm imf fuzz test

00:22:52,799 --> 00:22:57,840
next slide and uh

00:22:56,240 --> 00:22:59,600
this is what the sonar cloud scan looks

00:22:57,840 --> 00:23:01,760
like the center step the center filed

00:22:59,600 --> 00:23:03,679
scan performs static analysis on both

00:23:01,760 --> 00:23:05,679
compiled and source code

00:23:03,679 --> 00:23:07,120
and it also uh is configured to run

00:23:05,679 --> 00:23:09,440
coverage analysis

00:23:07,120 --> 00:23:11,120
and this is uh this is what the sonar

00:23:09,440 --> 00:23:13,360
cloud project page looks like for

00:23:11,120 --> 00:23:14,960
openexr basically there's a

00:23:13,360 --> 00:23:16,960
lot of information that you get back

00:23:14,960 --> 00:23:18,720
from the scan it reports potential bugs

00:23:16,960 --> 00:23:21,039
potential security vulnerabilities

00:23:18,720 --> 00:23:22,880
code smells it gives an indication of

00:23:21,039 --> 00:23:23,760
how well the library's code is covered

00:23:22,880 --> 00:23:27,200
by the tests

00:23:23,760 --> 00:23:28,000
in the library um the url is at the top

00:23:27,200 --> 00:23:29,919
there

00:23:28,000 --> 00:23:32,480
and uh there's there's a lot of

00:23:29,919 --> 00:23:35,200
interesting information in here a lot of

00:23:32,480 --> 00:23:36,480
historical metrics a lot of just fun

00:23:35,200 --> 00:23:37,600
things to drill into so i encourage

00:23:36,480 --> 00:23:39,280
people to go

00:23:37,600 --> 00:23:40,880
look at this project page and poke

00:23:39,280 --> 00:23:42,400
around and i think it's there's a lot of

00:23:40,880 --> 00:23:45,520
fun information in there

00:23:42,400 --> 00:23:47,039
next slide and then

00:23:45,520 --> 00:23:49,120
as i said we also have a valgrind

00:23:47,039 --> 00:23:50,799
memcheck job this profiles and debugs

00:23:49,120 --> 00:23:53,039
the library detecting memory leaks and

00:23:50,799 --> 00:23:56,720
errors things like uninitialized memory

00:23:53,039 --> 00:23:59,360
or arrays out of bounds array access

00:23:56,720 --> 00:24:01,440
and then we have openaxr's own fuzz test

00:23:59,360 --> 00:24:04,559
ilm imf fuzz test this is

00:24:01,440 --> 00:24:07,039
runs of its own fuzzing engine to uh

00:24:04,559 --> 00:24:07,919
damage exr image files and then attempts

00:24:07,039 --> 00:24:09,919
to

00:24:07,919 --> 00:24:12,080
read them back in and see how resilient

00:24:09,919 --> 00:24:15,679
the library is see if it produces any

00:24:12,080 --> 00:24:17,279
failing assertions or any uh

00:24:15,679 --> 00:24:18,720
if there's any potential memory leaks or

00:24:17,279 --> 00:24:20,000
potential crashes

00:24:18,720 --> 00:24:22,159
and then i also want to mention that

00:24:20,000 --> 00:24:24,320
external to our ci were also now

00:24:22,159 --> 00:24:26,000
monitored by google oss fuzz project

00:24:24,320 --> 00:24:29,440
which is an online fuzzing

00:24:26,000 --> 00:24:31,279
tool and that performs a comba it com

00:24:29,440 --> 00:24:32,720
combines a bunch of different fuzzing

00:24:31,279 --> 00:24:34,640
engines with a bunch of different

00:24:32,720 --> 00:24:35,600
sanitizers and then reports back to us

00:24:34,640 --> 00:24:37,360
potential

00:24:35,600 --> 00:24:39,600
security vulnerabilities or potential

00:24:37,360 --> 00:24:42,960
stability issues that we can

00:24:39,600 --> 00:24:44,640
address and next slide

00:24:42,960 --> 00:24:46,240
and then i also want to point out that

00:24:44,640 --> 00:24:47,520
in the readme file which you

00:24:46,240 --> 00:24:49,360
would have seen also in the docker

00:24:47,520 --> 00:24:50,960
readme file um there's this

00:24:49,360 --> 00:24:52,640
set of widgets here at the top and they

00:24:50,960 --> 00:24:54,480
show this the current status of the

00:24:52,640 --> 00:24:55,120
latest run of the ci workflow the latest

00:24:54,480 --> 00:24:57,919
front of the

00:24:55,120 --> 00:24:59,120
analysis workflow as well as the the

00:24:57,919 --> 00:25:01,520
status of the latest

00:24:59,120 --> 00:25:02,799
sonar cloud scan these are also links so

00:25:01,520 --> 00:25:04,799
they're kind of convenient for being

00:25:02,799 --> 00:25:06,159
able to get to that sonar cloud project

00:25:04,799 --> 00:25:07,360
page if you don't want to go look for

00:25:06,159 --> 00:25:09,279
that long url

00:25:07,360 --> 00:25:10,559
and it also if you click on the cin

00:25:09,279 --> 00:25:12,320
analysis uh

00:25:10,559 --> 00:25:14,080
those links will take you to the the

00:25:12,320 --> 00:25:15,360
logs for the latest uh runs of those

00:25:14,080 --> 00:25:17,360
workflows

00:25:15,360 --> 00:25:19,039
the next slide and then lastly i just

00:25:17,360 --> 00:25:21,520
want to acknowledge michael dolan of

00:25:19,039 --> 00:25:24,000
epic games who developed open colorio ci

00:25:21,520 --> 00:25:26,000
and then dan bailey of ilm who developed

00:25:24,000 --> 00:25:26,960
openvdb ci i leveraged their work

00:25:26,000 --> 00:25:30,400
heavily and

00:25:26,960 --> 00:25:32,080
developing open exrci and you'll see

00:25:30,400 --> 00:25:33,520
if you look at the ci for the different

00:25:32,080 --> 00:25:35,279
aswf projects there's a lot of

00:25:33,520 --> 00:25:36,080
commonality so knowing this kind of

00:25:35,279 --> 00:25:37,919
overview you

00:25:36,080 --> 00:25:39,760
probably would be comfortable looking at

00:25:37,919 --> 00:25:41,760
ci for the other projects

00:25:39,760 --> 00:25:43,279
thank you and now i'll pass it back to

00:25:41,760 --> 00:25:45,600
jf

00:25:43,279 --> 00:25:47,120
perfect thank you and i did want to

00:25:45,600 --> 00:25:47,520
while we're mentioning thanks to of

00:25:47,120 --> 00:25:50,400
course

00:25:47,520 --> 00:25:52,000
include a big thank you to the linux

00:25:50,400 --> 00:25:54,400
foundation release engineering team

00:25:52,000 --> 00:25:55,360
who provide underlying support for all

00:25:54,400 --> 00:25:57,520
of the

00:25:55,360 --> 00:26:00,720
infrastructure and expertise from other

00:25:57,520 --> 00:26:00,720
projects are associated with

00:26:02,159 --> 00:26:10,240
chess okay so next slide please

00:26:06,799 --> 00:26:13,440
so um a very specific need that

00:26:10,240 --> 00:26:17,120
our projects some of our projects have

00:26:13,440 --> 00:26:21,279
is the ability to run opengl workloads

00:26:17,120 --> 00:26:22,159
during the during the testing phase and

00:26:21,279 --> 00:26:24,320
not only

00:26:22,159 --> 00:26:25,360
opengl but actually hardware accelerated

00:26:24,320 --> 00:26:28,159
opengl

00:26:25,360 --> 00:26:29,600
in order to do conformance and exactness

00:26:28,159 --> 00:26:32,960
testing in particular opens

00:26:29,600 --> 00:26:33,760
ocio has both gpu and cpu paths and

00:26:32,960 --> 00:26:36,880
needs to

00:26:33,760 --> 00:26:37,600
uh verify those uh so that's proven to

00:26:36,880 --> 00:26:41,279
be

00:26:37,600 --> 00:26:44,080
quite a challenge to um

00:26:41,279 --> 00:26:45,120
to provide this because free runners

00:26:44,080 --> 00:26:47,520
provided

00:26:45,120 --> 00:26:48,960
for open source uh in open source ci

00:26:47,520 --> 00:26:52,960
systems typically do not

00:26:48,960 --> 00:26:56,240
have uh gpus and systems that do have

00:26:52,960 --> 00:26:57,919
gpus such as aws code builder typically

00:26:56,240 --> 00:27:00,320
target cuda applications

00:26:57,919 --> 00:27:01,679
not opengl applications that need an x

00:27:00,320 --> 00:27:05,440
server

00:27:01,679 --> 00:27:07,760
um there is a there's a tease

00:27:05,440 --> 00:27:08,559
from one of the github roadmap issues

00:27:07,760 --> 00:27:10,960
and that they

00:27:08,559 --> 00:27:11,919
there may be an offering with gpu

00:27:10,960 --> 00:27:15,360
accelerated

00:27:11,919 --> 00:27:18,240
uh builders at some point in the future

00:27:15,360 --> 00:27:18,559
but that is currently not uh available

00:27:18,240 --> 00:27:23,840
uh

00:27:18,559 --> 00:27:26,960
next slide please so one of the attempts

00:27:23,840 --> 00:27:31,279
that we tried was to try to stand up

00:27:26,960 --> 00:27:33,919
builders on the fly with uh terraform

00:27:31,279 --> 00:27:34,559
and there's a number of requirements

00:27:33,919 --> 00:27:37,600
that were

00:27:34,559 --> 00:27:39,120
found you need a the nvidia grid driver

00:27:37,600 --> 00:27:41,679
that provides accelerate hardware

00:27:39,120 --> 00:27:44,399
accelerated opengl you need x server

00:27:41,679 --> 00:27:47,120
uh you need to start your container with

00:27:44,399 --> 00:27:51,279
very specific command line agreements

00:27:47,120 --> 00:27:53,440
uh so right now we have a prototype but

00:27:51,279 --> 00:27:57,120
we have not been able to productize that

00:27:53,440 --> 00:27:59,360
yet and deliver that functionality uh

00:27:57,120 --> 00:28:00,240
and we're looking at other options such

00:27:59,360 --> 00:28:03,200
as using

00:28:00,240 --> 00:28:04,399
uh libraries such as egl that avoid the

00:28:03,200 --> 00:28:07,200
need for next server

00:28:04,399 --> 00:28:09,039
and allow applications to speak directly

00:28:07,200 --> 00:28:12,000
to the gpu

00:28:09,039 --> 00:28:13,279
without requiring external machinery

00:28:12,000 --> 00:28:14,880
we're

00:28:13,279 --> 00:28:17,679
very much hoping to fight to have a

00:28:14,880 --> 00:28:21,120
final solution in the next few weeks

00:28:17,679 --> 00:28:23,600
next slide please and then

00:28:21,120 --> 00:28:25,600
the other big deliverable is support for

00:28:23,600 --> 00:28:28,240
windows and mac builds

00:28:25,600 --> 00:28:30,240
and uh the what's interesting there is

00:28:28,240 --> 00:28:33,279
the vfx reference platform

00:28:30,240 --> 00:28:36,159
is now starting to specify baselines of

00:28:33,279 --> 00:28:37,360
compiler and os versions for those

00:28:36,159 --> 00:28:39,679
platforms

00:28:37,360 --> 00:28:40,559
and that is what we're going to be

00:28:39,679 --> 00:28:42,640
targeting

00:28:40,559 --> 00:28:44,480
uh for now we don't think that we will

00:28:42,640 --> 00:28:47,600
be you able to use

00:28:44,480 --> 00:28:49,279
uh the container well especially uh as

00:28:47,600 --> 00:28:52,640
there is no container support

00:28:49,279 --> 00:28:56,480
on mac os except for the maximum orca

00:28:52,640 --> 00:28:58,399
offering uh but there are enough

00:28:56,480 --> 00:28:59,919
uh package managers that support those

00:28:58,399 --> 00:29:00,880
platforms that we should be able to make

00:28:59,919 --> 00:29:03,760
it work

00:29:00,880 --> 00:29:03,760
and that's it for me

00:29:05,679 --> 00:29:09,840
great thank you we've managed to get

00:29:07,679 --> 00:29:12,960
through a lot of content

00:29:09,840 --> 00:29:14,880
and uh unfortunately not much time for

00:29:12,960 --> 00:29:18,080
discussion but that is an excellent hook

00:29:14,880 --> 00:29:19,440
for uh to draw all of you into

00:29:18,080 --> 00:29:21,120
further discussion on the slack channel

00:29:19,440 --> 00:29:21,840
where we have all the time in the world

00:29:21,120 --> 00:29:24,000
of course

00:29:21,840 --> 00:29:25,600
um thanks again for all the presenters

00:29:24,000 --> 00:29:27,720
and for all the work that others in the

00:29:25,600 --> 00:29:30,720
working group have done over the last

00:29:27,720 --> 00:29:30,720

YouTube URL: https://www.youtube.com/watch?v=BcCVHa5VH90


