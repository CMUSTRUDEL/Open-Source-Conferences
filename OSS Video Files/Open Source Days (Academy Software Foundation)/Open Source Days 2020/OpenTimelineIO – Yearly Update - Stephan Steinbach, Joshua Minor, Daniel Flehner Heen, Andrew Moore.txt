Title: OpenTimelineIO – Yearly Update - Stephan Steinbach, Joshua Minor, Daniel Flehner Heen, Andrew Moore
Publication date: 2020-09-10
Playlist: Open Source Days 2020
Description: 
	OpenTimelineIO – Yearly Update - Stephan Steinbach, Joshua Minor, Daniel Flehner Heen, Andrew Moore, Mike Mahony

We will present an overview of OpenTimelineIO project enhancements over the last year, our roadmap moving forward, as well as community use cases and contributions.
Captions: 
	00:00:00,000 --> 00:00:06,399
hello everybody um uh

00:00:04,160 --> 00:00:07,520
i'm joshua miner and i'd like to welcome

00:00:06,399 --> 00:00:10,000
you all to

00:00:07,520 --> 00:00:11,840
the open timeline i o segment of the

00:00:10,000 --> 00:00:14,639
academy software foundation's open

00:00:11,840 --> 00:00:15,839
source days for 2020

00:00:14,639 --> 00:00:18,400
and today we're going to talk about open

00:00:15,839 --> 00:00:20,080
timeline io um

00:00:18,400 --> 00:00:22,080
uh first i'm going to give you an

00:00:20,080 --> 00:00:24,800
overview sort of status update

00:00:22,080 --> 00:00:26,480
uh you know what is otio and um what

00:00:24,800 --> 00:00:27,119
have we been up to for the past year or

00:00:26,480 --> 00:00:29,920
so

00:00:27,119 --> 00:00:30,560
um we have a couple of co-presenters

00:00:29,920 --> 00:00:32,239
from

00:00:30,560 --> 00:00:34,399
the community talking about use cases

00:00:32,239 --> 00:00:35,840
and how they're using otio in the in

00:00:34,399 --> 00:00:37,840
practice

00:00:35,840 --> 00:00:40,079
we do a little bit of road map um and

00:00:37,840 --> 00:00:44,079
then there'll be a good segment for

00:00:40,079 --> 00:00:45,680
uh live questions and answers at the end

00:00:44,079 --> 00:00:47,920
um so first let's start with just an

00:00:45,680 --> 00:00:48,640
overview of what is open timeline io in

00:00:47,920 --> 00:00:52,079
case um

00:00:48,640 --> 00:00:52,960
in case you're wondering um so open

00:00:52,079 --> 00:00:55,440
timeline io is

00:00:52,960 --> 00:00:57,760
it's an open source project it has three

00:00:55,440 --> 00:01:00,800
sort of main important parts

00:00:57,760 --> 00:01:04,000
the first is it's a file format

00:01:00,800 --> 00:01:05,519
for storing editorial timelines there's

00:01:04,000 --> 00:01:08,400
also

00:01:05,519 --> 00:01:09,840
an api for software engineers to use

00:01:08,400 --> 00:01:12,479
when building

00:01:09,840 --> 00:01:14,080
applications and workflows that use um

00:01:12,479 --> 00:01:16,880
timelines

00:01:14,080 --> 00:01:18,159
um it's also a set of adapter plug-ins

00:01:16,880 --> 00:01:20,479
for converting

00:01:18,159 --> 00:01:23,600
between open timeline io and other

00:01:20,479 --> 00:01:23,600
timeline form formats

00:01:23,759 --> 00:01:26,799
so just to sort of talk about in general

00:01:26,159 --> 00:01:28,880
like

00:01:26,799 --> 00:01:29,840
an editorial timeline um could be quite

00:01:28,880 --> 00:01:33,360
complex

00:01:29,840 --> 00:01:35,680
quite complex um kind of lots of tracks

00:01:33,360 --> 00:01:37,680
thousands of clips um and it can really

00:01:35,680 --> 00:01:40,720
kind of capture years of

00:01:37,680 --> 00:01:41,360
creative filmmaking decisions um so this

00:01:40,720 --> 00:01:44,399
image here

00:01:41,360 --> 00:01:47,759
is about 20 minutes of running time of

00:01:44,399 --> 00:01:51,200
toy story 4. and you can see there's a

00:01:47,759 --> 00:01:52,560
whole boatload of audio tracks and video

00:01:51,200 --> 00:01:55,439
tracks and

00:01:52,560 --> 00:01:57,360
lots of stuff going on in there um um so

00:01:55,439 --> 00:02:00,479
open timeline ao tries to capture this

00:01:57,360 --> 00:02:01,119
um uh the file format and the api for

00:02:00,479 --> 00:02:04,320
otio

00:02:01,119 --> 00:02:07,040
have a unified data model

00:02:04,320 --> 00:02:09,200
that has concepts like tracks and clips

00:02:07,040 --> 00:02:12,560
transitions like cross dissolves

00:02:09,200 --> 00:02:14,480
markers things like that

00:02:12,560 --> 00:02:17,440
so most of the things that you would see

00:02:14,480 --> 00:02:21,200
in an audio or video editing application

00:02:17,440 --> 00:02:22,480
can be represented in otio however otio

00:02:21,200 --> 00:02:25,599
doesn't actually deal with the

00:02:22,480 --> 00:02:28,319
actual like video or audio media itself

00:02:25,599 --> 00:02:28,800
um instead we use a media reference to

00:02:28,319 --> 00:02:32,319
point

00:02:28,800 --> 00:02:36,319
to where that audio or video is um in a

00:02:32,319 --> 00:02:39,040
file or url or wherever you want so

00:02:36,319 --> 00:02:39,760
otio is um dealing with the structure of

00:02:39,040 --> 00:02:44,000
everything and

00:02:39,760 --> 00:02:44,000
sort of pointers to the media um

00:02:45,120 --> 00:02:50,720
so um open timeline io can hold

00:02:48,400 --> 00:02:53,200
all that timeline information in a file

00:02:50,720 --> 00:02:54,400
um and then with adapters we can convert

00:02:53,200 --> 00:02:57,440
to and from

00:02:54,400 --> 00:02:59,040
uh lots of other formats um and since

00:02:57,440 --> 00:03:01,680
the adapters are plugins

00:02:59,040 --> 00:03:02,319
um the system can be extended um to

00:03:01,680 --> 00:03:03,920
support

00:03:02,319 --> 00:03:06,080
various you know common file formats in

00:03:03,920 --> 00:03:09,519
the industry as well as um formats

00:03:06,080 --> 00:03:11,519
that might be special to your workflow

00:03:09,519 --> 00:03:12,959
um and so by converting to and from

00:03:11,519 --> 00:03:15,200
those different formats

00:03:12,959 --> 00:03:16,720
um it allows us to interoperate with

00:03:15,200 --> 00:03:19,360
lots of applications

00:03:16,720 --> 00:03:21,519
um so we can interoperate in some form

00:03:19,360 --> 00:03:24,400
with all of these ones here

00:03:21,519 --> 00:03:26,000
and we also strongly encourage uh

00:03:24,400 --> 00:03:28,560
developers to add native

00:03:26,000 --> 00:03:30,560
otio support to their applications we'll

00:03:28,560 --> 00:03:33,920
talk about that a little bit

00:03:30,560 --> 00:03:36,080
later as well um so

00:03:33,920 --> 00:03:37,840
whether your application is some as a

00:03:36,080 --> 00:03:39,920
third party like commercial product

00:03:37,840 --> 00:03:41,200
or whether it's an in-house tool you can

00:03:39,920 --> 00:03:42,879
use uh

00:03:41,200 --> 00:03:44,640
software engineers can use the open

00:03:42,879 --> 00:03:47,920
timeline io api

00:03:44,640 --> 00:03:49,760
um to directly read and write otio files

00:03:47,920 --> 00:03:52,560
as well as to manipulate the those data

00:03:49,760 --> 00:03:55,760
structures in memory

00:03:52,560 --> 00:03:57,360
um and so by doing so your ability your

00:03:55,760 --> 00:04:00,480
application

00:03:57,360 --> 00:04:01,840
will gain the ability to work with this

00:04:00,480 --> 00:04:04,720
growing set of

00:04:01,840 --> 00:04:06,000
adapters and gives your application the

00:04:04,720 --> 00:04:07,200
flexibility to

00:04:06,000 --> 00:04:10,239
read and write all these different

00:04:07,200 --> 00:04:10,239
different file formats

00:04:13,280 --> 00:04:19,680
otio also includes a utility application

00:04:16,560 --> 00:04:21,519
and we call it otio view that lets you

00:04:19,680 --> 00:04:24,800
look at the structure of a timeline

00:04:21,519 --> 00:04:25,199
um and so this is meant for developers

00:04:24,800 --> 00:04:27,120
who are

00:04:25,199 --> 00:04:29,199
debugging or learning how the system

00:04:27,120 --> 00:04:30,639
works it's not really meant to be an end

00:04:29,199 --> 00:04:32,000
user tool

00:04:30,639 --> 00:04:34,560
but it's really helpful for looking at

00:04:32,000 --> 00:04:37,840
the structure of a timeline so here's um

00:04:34,560 --> 00:04:40,560
here's a timeline a segment from one of

00:04:37,840 --> 00:04:40,560
our recent films

00:04:41,040 --> 00:04:47,600
and um uh you can see that

00:04:44,479 --> 00:04:49,199
on the uh right side we're showing the

00:04:47,600 --> 00:04:52,160
actual sort of contents of the

00:04:49,199 --> 00:04:52,960
otio file format itself um so it's meant

00:04:52,160 --> 00:04:56,240
to be

00:04:52,960 --> 00:04:56,800
fairly readable um lots of words that

00:04:56,240 --> 00:05:00,240
you might

00:04:56,800 --> 00:05:02,400
expect um are in there um and you can

00:05:00,240 --> 00:05:03,120
also see one of the key features of otio

00:05:02,400 --> 00:05:05,520
in here

00:05:03,120 --> 00:05:07,039
which is the ability for us to attach

00:05:05,520 --> 00:05:10,080
arbitrary metadata

00:05:07,039 --> 00:05:13,199
to basically any object within

00:05:10,080 --> 00:05:15,919
an otio data structure so here i've

00:05:13,199 --> 00:05:18,720
highlighted one of the clips

00:05:15,919 --> 00:05:20,479
and you can see there's a dictionary of

00:05:18,720 --> 00:05:22,880
metadata with some custom

00:05:20,479 --> 00:05:23,520
pixar like production tracking

00:05:22,880 --> 00:05:25,759
information

00:05:23,520 --> 00:05:27,360
attached to this clip um so you can put

00:05:25,759 --> 00:05:29,280
your metadata here as well

00:05:27,360 --> 00:05:30,720
and that can coexist with other people's

00:05:29,280 --> 00:05:34,000
metadata

00:05:30,720 --> 00:05:35,919
so that's meant to be very extendable um

00:05:34,000 --> 00:05:38,400
and so using that sort of metadata

00:05:35,919 --> 00:05:40,880
capabilities to carry production

00:05:38,400 --> 00:05:42,800
tracking information we can build

00:05:40,880 --> 00:05:44,160
flexible workflows

00:05:42,800 --> 00:05:45,919
with handoffs between different

00:05:44,160 --> 00:05:49,280
commercial applications

00:05:45,919 --> 00:05:51,759
legacy formats in-house tools you know

00:05:49,280 --> 00:05:53,199
sort of whatever whatever is necessary

00:05:51,759 --> 00:05:56,160
so this

00:05:53,199 --> 00:05:56,560
round-trip example shows a workflow that

00:05:56,160 --> 00:05:59,759
we have

00:05:56,560 --> 00:06:03,759
in use at pixar

00:05:59,759 --> 00:06:04,400
where we use aaf and edl to interoperate

00:06:03,759 --> 00:06:06,240
between

00:06:04,400 --> 00:06:07,759
third-party tools but pretty much

00:06:06,240 --> 00:06:10,960
everything else

00:06:07,759 --> 00:06:12,080
uses open timeline io and the adapters

00:06:10,960 --> 00:06:13,680
allow us to

00:06:12,080 --> 00:06:16,080
to bridge the gaps between those other

00:06:13,680 --> 00:06:18,160
formats

00:06:16,080 --> 00:06:19,360
we'd love in the future to have the

00:06:18,160 --> 00:06:22,720
entire ecosystem

00:06:19,360 --> 00:06:26,080
use otio natively to do away with the

00:06:22,720 --> 00:06:28,560
adapters and so we're hoping to do this

00:06:26,080 --> 00:06:28,560
in the future

00:06:28,960 --> 00:06:33,039
um so now let's talk about the things

00:06:32,000 --> 00:06:35,199
that we've done

00:06:33,039 --> 00:06:37,520
over the past year or so since our last

00:06:35,199 --> 00:06:37,520
update

00:06:37,919 --> 00:06:41,440
one of the key things we did was we've

00:06:40,560 --> 00:06:42,560
added

00:06:41,440 --> 00:06:44,800
support for a bunch of different

00:06:42,560 --> 00:06:47,199
programming languages

00:06:44,800 --> 00:06:49,440
so previously open timelineo was

00:06:47,199 --> 00:06:50,880
implemented in the pure python

00:06:49,440 --> 00:06:52,960
um and this was great for getting the

00:06:50,880 --> 00:06:53,759
api up and running it fits really well

00:06:52,960 --> 00:06:55,840
with a lot of the

00:06:53,759 --> 00:06:57,120
visual effects on animation studio

00:06:55,840 --> 00:06:59,840
pipelines

00:06:57,120 --> 00:07:01,599
and python is great we we love python

00:06:59,840 --> 00:07:02,080
but it's not the right fit for everybody

00:07:01,599 --> 00:07:05,199
um

00:07:02,080 --> 00:07:07,919
and so uh we ported the core of

00:07:05,199 --> 00:07:09,440
open timeline io to c plus plus um and

00:07:07,919 --> 00:07:11,599
then wrapped that back

00:07:09,440 --> 00:07:12,720
into python so you can get the same

00:07:11,599 --> 00:07:16,080
functionality

00:07:12,720 --> 00:07:19,440
um uh both both ways

00:07:16,080 --> 00:07:20,639
um and uh this was meant to be backwards

00:07:19,440 --> 00:07:22,720
compatible so

00:07:20,639 --> 00:07:24,319
um python developers shouldn't really

00:07:22,720 --> 00:07:24,720
have noticed much difference um there

00:07:24,319 --> 00:07:26,880
was

00:07:24,720 --> 00:07:28,840
maybe a little bit here and there but it

00:07:26,880 --> 00:07:30,880
should have been a pretty smooth

00:07:28,840 --> 00:07:33,120
transition

00:07:30,880 --> 00:07:34,160
and then having the core in oti and sql

00:07:33,120 --> 00:07:36,479
plus

00:07:34,160 --> 00:07:37,360
lets applications and developers use

00:07:36,479 --> 00:07:38,960
otio

00:07:37,360 --> 00:07:41,039
without needing to include python in

00:07:38,960 --> 00:07:43,199
their application

00:07:41,039 --> 00:07:44,479
so in addition to the c plus api we now

00:07:43,199 --> 00:07:48,080
have

00:07:44,479 --> 00:07:52,960
swift bindings as well as a c api

00:07:48,080 --> 00:07:56,080
and a java api and actually

00:07:52,960 --> 00:07:59,199
two of those the java and c api

00:07:56,080 --> 00:08:01,039
were done by our through um the google

00:07:59,199 --> 00:08:04,160
summer of code project um

00:08:01,039 --> 00:08:05,599
so karthik ayer was selected as our

00:08:04,160 --> 00:08:08,960
google summer of code

00:08:05,599 --> 00:08:12,080
intern um and karthik's project um

00:08:08,960 --> 00:08:13,919
uh just wrapping up right now and we're

00:08:12,080 --> 00:08:15,280
really happy with karthik's work i mean

00:08:13,919 --> 00:08:17,039
he's been fantastic

00:08:15,280 --> 00:08:18,800
um and participating in the google

00:08:17,039 --> 00:08:21,440
summer of code was a really great

00:08:18,800 --> 00:08:22,560
uh experience for all of us um and we we

00:08:21,440 --> 00:08:24,000
um we thank

00:08:22,560 --> 00:08:25,520
the academy software foundation for

00:08:24,000 --> 00:08:26,560
setting that up and supporting us in

00:08:25,520 --> 00:08:29,759
that way

00:08:26,560 --> 00:08:32,800
and we look forward to um working

00:08:29,759 --> 00:08:35,360
with google summer of code again

00:08:32,800 --> 00:08:36,159
um and um karthik is amazing so thank

00:08:35,360 --> 00:08:39,200
you

00:08:36,159 --> 00:08:41,120
um so now that we have these different

00:08:39,200 --> 00:08:42,880
apis so applications

00:08:41,120 --> 00:08:44,560
written in in any of those languages can

00:08:42,880 --> 00:08:47,680
use open timeline io

00:08:44,560 --> 00:08:50,640
much much more easily um

00:08:47,680 --> 00:08:51,920
so for example with the c plus plus api

00:08:50,640 --> 00:08:54,560
reported the core

00:08:51,920 --> 00:08:56,560
of otio and that actually doesn't

00:08:54,560 --> 00:08:57,760
include the adapter so the adapters are

00:08:56,560 --> 00:09:01,040
still

00:08:57,760 --> 00:09:02,320
in python um but that means that your

00:09:01,040 --> 00:09:04,000
application can

00:09:02,320 --> 00:09:05,760
uh still read and write those other

00:09:04,000 --> 00:09:07,519
formats by running them through a

00:09:05,760 --> 00:09:08,959
utility that we provide called otio

00:09:07,519 --> 00:09:10,560
convert

00:09:08,959 --> 00:09:12,000
so that still gives your application all

00:09:10,560 --> 00:09:13,279
those benefits without having to

00:09:12,000 --> 00:09:17,200
actually include all of the

00:09:13,279 --> 00:09:21,360
adapter code in your application

00:09:17,200 --> 00:09:24,959
um so at pixar we've actually integrated

00:09:21,360 --> 00:09:28,240
exactly in this way so our in-house

00:09:24,959 --> 00:09:30,240
animation system called presto uses uh

00:09:28,240 --> 00:09:31,360
the c plus plus api directly to read and

00:09:30,240 --> 00:09:34,399
write otio

00:09:31,360 --> 00:09:38,399
and we use otio convert to convert from

00:09:34,399 --> 00:09:40,640
af for example um and a bunch of other

00:09:38,399 --> 00:09:41,600
legacy proprietary formats that we've

00:09:40,640 --> 00:09:42,800
used over the years

00:09:41,600 --> 00:09:44,959
so this has been a great way to sort of

00:09:42,800 --> 00:09:47,040
modernize our pipeline

00:09:44,959 --> 00:09:48,880
without dropping support for those old

00:09:47,040 --> 00:09:51,839
things

00:09:48,880 --> 00:09:51,839
um

00:09:52,560 --> 00:09:56,240
next um another um new feature that

00:09:55,279 --> 00:09:59,200
we've added

00:09:56,240 --> 00:10:00,000
last year is support for image sequences

00:09:59,200 --> 00:10:01,920
um

00:10:00,000 --> 00:10:03,120
and so if we go back to this diagram for

00:10:01,920 --> 00:10:06,079
a minute

00:10:03,120 --> 00:10:07,440
uh we can see that um this clip on the

00:10:06,079 --> 00:10:10,640
the bottom track there

00:10:07,440 --> 00:10:14,079
has a media reference uh which points to

00:10:10,640 --> 00:10:19,839
uh the actual media on disk

00:10:14,079 --> 00:10:19,839
um via a url url excuse me

00:10:22,079 --> 00:10:26,800
um so lots of workflows involve sort of

00:10:25,200 --> 00:10:27,440
relinking from one piece of media to

00:10:26,800 --> 00:10:29,200
another

00:10:27,440 --> 00:10:31,920
whether that's switching proxies or

00:10:29,200 --> 00:10:33,120
doing some sort of online offline

00:10:31,920 --> 00:10:35,839
conform

00:10:33,120 --> 00:10:37,360
um and so uh new in this most recent

00:10:35,839 --> 00:10:39,200
release of open timelineo

00:10:37,360 --> 00:10:41,839
we have support for image sequence uh

00:10:39,200 --> 00:10:41,839
references

00:10:42,079 --> 00:10:47,920
um so an image sequence reference points

00:10:44,399 --> 00:10:51,680
to a numbered sequence of image files

00:10:47,920 --> 00:10:51,680
commonly in a folder on disk

00:10:52,240 --> 00:10:57,120
and a lot of other systems will use like

00:10:55,920 --> 00:11:00,160
a very compact

00:10:57,120 --> 00:11:02,720
format for specifying how those you know

00:11:00,160 --> 00:11:04,880
zero padding and things like that work

00:11:02,720 --> 00:11:07,440
um the schema that we developed allows

00:11:04,880 --> 00:11:09,440
for a really clear specification of the

00:11:07,440 --> 00:11:12,480
naming conventions for those files

00:11:09,440 --> 00:11:13,120
um so we have a prefix a suffix a start

00:11:12,480 --> 00:11:16,800
frame

00:11:13,120 --> 00:11:18,800
a frame step and zero padding

00:11:16,800 --> 00:11:20,560
information um and so we believe that

00:11:18,800 --> 00:11:21,839
this will support all the common file

00:11:20,560 --> 00:11:26,079
naming conventions

00:11:21,839 --> 00:11:28,160
used in our industry and

00:11:26,079 --> 00:11:29,440
doing the schema like this is in line

00:11:28,160 --> 00:11:31,360
with the design for

00:11:29,440 --> 00:11:33,519
many other parts of otio where we're

00:11:31,360 --> 00:11:36,880
favoring readability and clarity

00:11:33,519 --> 00:11:38,079
over compactness um and adapters are

00:11:36,880 --> 00:11:41,279
free to convert

00:11:38,079 --> 00:11:42,640
to and from this and other syntax

00:11:41,279 --> 00:11:44,800
like you might see in an application

00:11:42,640 --> 00:11:48,000
like nuke or rv

00:11:44,800 --> 00:11:50,000
that are more compact um

00:11:48,000 --> 00:11:53,120
uh also i just want to highlight the

00:11:50,000 --> 00:11:56,320
work for this was done

00:11:53,120 --> 00:11:58,000
by netflix and storm studios and we

00:11:56,320 --> 00:12:00,320
really appreciate the the collaboration

00:11:58,000 --> 00:12:00,320
in them

00:12:01,360 --> 00:12:06,079
next look at some of the improvements

00:12:04,399 --> 00:12:08,720
we've done to the adapters

00:12:06,079 --> 00:12:09,519
um so we made a bunch of improvements to

00:12:08,720 --> 00:12:12,480
the

00:12:09,519 --> 00:12:14,160
aaf adapter and this is mainly focused

00:12:12,480 --> 00:12:18,480
on reading and writing

00:12:14,160 --> 00:12:18,480
interoperating with avid media composer

00:12:18,959 --> 00:12:25,360
we support more complex nesting and very

00:12:22,079 --> 00:12:27,920
mixed frame rates um and

00:12:25,360 --> 00:12:29,760
we got a lot of assistance and

00:12:27,920 --> 00:12:32,639
participation from

00:12:29,760 --> 00:12:34,000
cargo cult as well as technical

00:12:32,639 --> 00:12:36,720
assistance from avid

00:12:34,000 --> 00:12:37,680
so we really appreciate that we've come

00:12:36,720 --> 00:12:40,720
a long way there's still

00:12:37,680 --> 00:12:42,720
more more to add obviously but uh but it

00:12:40,720 --> 00:12:45,040
works pretty well

00:12:42,720 --> 00:12:46,480
um we've also had lots of community

00:12:45,040 --> 00:12:49,839
contributions to

00:12:46,480 --> 00:12:54,399
the final cut xml support um

00:12:49,839 --> 00:12:57,519
edl improvements from rodeo effects

00:12:54,399 --> 00:12:57,920
as well as improvements to the acadian

00:12:57,519 --> 00:13:02,959
live

00:12:57,920 --> 00:13:02,959
and xges support as well

00:13:03,279 --> 00:13:10,320
next i want we want to highlight um

00:13:06,639 --> 00:13:13,760
otio's integration with autodesk rv

00:13:10,320 --> 00:13:16,480
application um

00:13:13,760 --> 00:13:17,519
so what we've done is we've built a

00:13:16,480 --> 00:13:20,639
plugin

00:13:17,519 --> 00:13:23,440
for autodesk rv playback tool that

00:13:20,639 --> 00:13:27,279
supports reading and writing otio files

00:13:23,440 --> 00:13:27,279
directly in the rv interface

00:13:27,360 --> 00:13:33,760
so rv supports python plugins and so

00:13:30,639 --> 00:13:36,000
using the otio python api

00:13:33,760 --> 00:13:39,200
we're able to read and write any format

00:13:36,000 --> 00:13:39,200
that otio supports

00:13:40,639 --> 00:13:46,399
and so just as an example here's an otio

00:13:44,240 --> 00:13:49,040
file that we have from our editorial

00:13:46,399 --> 00:13:51,040
department it's got two tracks in it

00:13:49,040 --> 00:13:52,079
the video track has dozens of clips in

00:13:51,040 --> 00:13:54,160
it

00:13:52,079 --> 00:13:55,760
and the audio has a mix down of the

00:13:54,160 --> 00:13:57,040
sequence so this just

00:13:55,760 --> 00:13:59,279
happens to be one of the ways that we

00:13:57,040 --> 00:14:03,519
work at pixar

00:13:59,279 --> 00:14:06,959
um and so via this plugin within rv

00:14:03,519 --> 00:14:08,240
you can select an otio file in the file

00:14:06,959 --> 00:14:09,839
open dialog

00:14:08,240 --> 00:14:12,639
and you can actually support any format

00:14:09,839 --> 00:14:15,440
that otio supports

00:14:12,639 --> 00:14:16,320
in here as well and click open and then

00:14:15,440 --> 00:14:19,600
rv then

00:14:16,320 --> 00:14:22,079
uses the otio api to read the timeline

00:14:19,600 --> 00:14:24,320
and it builds an in-memory session with

00:14:22,079 --> 00:14:26,720
all of the linked media spliced together

00:14:24,320 --> 00:14:29,360
um so here we've we've loaded the same

00:14:26,720 --> 00:14:31,360
document that we looked at before

00:14:29,360 --> 00:14:33,040
and you'll notice the timeline down at

00:14:31,360 --> 00:14:35,199
the bottom um you can see it has

00:14:33,040 --> 00:14:36,880
all those dozens of clips um spliced

00:14:35,199 --> 00:14:37,360
together and then if i were to press

00:14:36,880 --> 00:14:39,680
play

00:14:37,360 --> 00:14:41,680
you would hear the audio for this um

00:14:39,680 --> 00:14:43,040
since we've we've recreated that

00:14:41,680 --> 00:14:46,160
composition

00:14:43,040 --> 00:14:46,160
in rv's node graph

00:14:46,320 --> 00:14:54,480
um so uh this example sort of plug-in is

00:14:50,639 --> 00:14:56,560
included in the open timeline

00:14:54,480 --> 00:14:57,519
repository and this was a really nice

00:14:56,560 --> 00:14:59,839
collaboration

00:14:57,519 --> 00:15:01,519
between folks at pixar um some help from

00:14:59,839 --> 00:15:03,680
people at dreamworks

00:15:01,519 --> 00:15:04,720
um and and also technical support from

00:15:03,680 --> 00:15:07,600
from autodesk

00:15:04,720 --> 00:15:08,560
um so this is a really nice um thing uh

00:15:07,600 --> 00:15:10,160
we hope to

00:15:08,560 --> 00:15:11,839
add some more features to in the future

00:15:10,160 --> 00:15:14,160
um but it's good to see this coming

00:15:11,839 --> 00:15:14,160
together

00:15:15,120 --> 00:15:20,639
um and next we'd like to

00:15:18,560 --> 00:15:22,000
invite some of the folks from the

00:15:20,639 --> 00:15:22,800
community to talk about how they're

00:15:22,000 --> 00:15:26,399
using

00:15:22,800 --> 00:15:27,680
open timeline io um and

00:15:26,399 --> 00:15:29,759
for logistical reasons we've

00:15:27,680 --> 00:15:32,320
pre-recorded these segments um

00:15:29,759 --> 00:15:35,040
so um uh we're gonna start off with

00:15:32,320 --> 00:15:38,399
welcoming daniel um he's also here for

00:15:35,040 --> 00:15:42,000
q a later um to talk about how

00:15:38,399 --> 00:15:44,959
um he's working with otio in hero and

00:15:42,000 --> 00:15:44,959
in nuke studio

00:15:46,720 --> 00:15:50,160
hi my name is daniel flanerheen and i'm

00:15:49,120 --> 00:15:52,560
a pipeline developer

00:15:50,160 --> 00:15:54,079
at storm studios in oslo norway and i've

00:15:52,560 --> 00:15:55,920
written a plugin for hero

00:15:54,079 --> 00:15:59,279
and the studio that lets you import and

00:15:55,920 --> 00:16:01,920
export open timeline i o files directly

00:15:59,279 --> 00:16:02,320
quick feature overview uh you can import

00:16:01,920 --> 00:16:04,240
and

00:16:02,320 --> 00:16:06,639
export entire timelines with audio video

00:16:04,240 --> 00:16:09,360
tracks you can do constant

00:16:06,639 --> 00:16:10,160
speed up or down or reverse you can do

00:16:09,360 --> 00:16:13,759
cross dissolve

00:16:10,160 --> 00:16:15,440
and fades tags and you can append tracks

00:16:13,759 --> 00:16:19,120
to existing sequences to build

00:16:15,440 --> 00:16:20,800
timelines since nested sequences aren't

00:16:19,120 --> 00:16:22,560
supported in hero

00:16:20,800 --> 00:16:24,160
this is solved by leaving a gap in the

00:16:22,560 --> 00:16:27,759
original timeline

00:16:24,160 --> 00:16:30,160
and creating additional sequences

00:16:27,759 --> 00:16:30,880
i preserve links between audio video

00:16:30,160 --> 00:16:34,560
tracks

00:16:30,880 --> 00:16:37,199
for clips and

00:16:34,560 --> 00:16:39,759
you can export a selection from the

00:16:37,199 --> 00:16:42,639
timeline if you like

00:16:39,759 --> 00:16:45,440
you get this additional import action in

00:16:42,639 --> 00:16:50,320
your context menu either in the bin view

00:16:45,440 --> 00:16:54,000
or in the sequence or timeline view

00:16:50,320 --> 00:16:57,680
here i've imported a sample

00:16:54,000 --> 00:17:02,079
timeline from the main repo

00:16:57,680 --> 00:17:05,439
and when you export you set up this new

00:17:02,079 --> 00:17:07,439
otio exporter content to get the oto

00:17:05,439 --> 00:17:10,160
files

00:17:07,439 --> 00:17:12,480
here's an example in otio view of the

00:17:10,160 --> 00:17:14,880
result

00:17:12,480 --> 00:17:16,079
and the plugin was originally written as

00:17:14,880 --> 00:17:19,199
a part of

00:17:16,079 --> 00:17:20,959
our delivery tools so

00:17:19,199 --> 00:17:22,720
uh at the bottom left here we usually

00:17:20,959 --> 00:17:25,280
start with the delivery specs from the

00:17:22,720 --> 00:17:28,079
clients which we then parse and turn

00:17:25,280 --> 00:17:31,200
into a bunch of json and python files

00:17:28,079 --> 00:17:32,320
that describe the outputs we then pass

00:17:31,200 --> 00:17:35,840
the

00:17:32,320 --> 00:17:37,120
vfx edit from hero to our delivery tools

00:17:35,840 --> 00:17:40,320
via

00:17:37,120 --> 00:17:41,600
oto file uh and the delivery tools make

00:17:40,320 --> 00:17:44,160
sure that we gather

00:17:41,600 --> 00:17:45,120
the correct source files and convert the

00:17:44,160 --> 00:17:48,559
naming

00:17:45,120 --> 00:17:51,840
convention to the clients

00:17:48,559 --> 00:17:54,640
and set up a bunch of batch renders

00:17:51,840 --> 00:17:55,360
for the render farm which then produce

00:17:54,640 --> 00:17:58,400
the movie

00:17:55,360 --> 00:18:00,160
or image files and updates the

00:17:58,400 --> 00:18:04,240
submission form

00:18:00,160 --> 00:18:07,679
all based on the otio file

00:18:04,240 --> 00:18:11,600
so we start in the in the timeline

00:18:07,679 --> 00:18:14,799
of the hero update our edit

00:18:11,600 --> 00:18:18,480
we add submission notes

00:18:14,799 --> 00:18:21,760
as tags to the clips and we export

00:18:18,480 --> 00:18:26,000
the selected shots

00:18:21,760 --> 00:18:29,120
uh here we see it notio view again and

00:18:26,000 --> 00:18:31,760
we can use uh the tag information

00:18:29,120 --> 00:18:33,039
uh or the submission notes uh for the

00:18:31,760 --> 00:18:36,080
slate frame for instance

00:18:33,039 --> 00:18:37,840
and here we see that uh we use the note

00:18:36,080 --> 00:18:40,160
uh which is more of a boss in the slave

00:18:37,840 --> 00:18:43,360
frame and we use the

00:18:40,160 --> 00:18:47,120
label or the subject uh

00:18:43,360 --> 00:18:49,600
as a burning and we also

00:18:47,120 --> 00:18:52,320
pass the the note to the submission form

00:18:49,600 --> 00:18:52,320
at the bottom there

00:18:52,400 --> 00:18:57,520
uh when required by the clients to

00:18:55,520 --> 00:18:59,520
create a mini cut or if you want one

00:18:57,520 --> 00:19:00,799
ourselves we can export the entire

00:18:59,520 --> 00:19:05,039
timeline

00:19:00,799 --> 00:19:08,400
to get the offline audio etc

00:19:05,039 --> 00:19:09,440
and we then pass that to our custom mlt

00:19:08,400 --> 00:19:13,280
adapter

00:19:09,440 --> 00:19:15,200
and that goes to melt which is a

00:19:13,280 --> 00:19:16,559
media loving toolkit's command line

00:19:15,200 --> 00:19:19,360
video editor

00:19:16,559 --> 00:19:21,360
which produces i mean cuts for us on the

00:19:19,360 --> 00:19:25,200
farm

00:19:21,360 --> 00:19:28,799
yeah so the plugin should be available

00:19:25,200 --> 00:19:30,640
through the main open timeline i o repo

00:19:28,799 --> 00:19:32,880
please check it out and thanks for your

00:19:30,640 --> 00:19:32,880
time

00:19:34,400 --> 00:19:37,440
all right thanks daniel um that's really

00:19:36,240 --> 00:19:40,400
exciting to see um

00:19:37,440 --> 00:19:42,160
i'm glad to see both an example of uh

00:19:40,400 --> 00:19:45,520
you know integrations with the

00:19:42,160 --> 00:19:47,360
uh third-party tools as well as a nice

00:19:45,520 --> 00:19:48,960
studio workflow um really coming

00:19:47,360 --> 00:19:52,080
together

00:19:48,960 --> 00:19:55,440
in a powerful way so check out the code

00:19:52,080 --> 00:19:57,280
that um they've contributed um

00:19:55,440 --> 00:19:58,640
all right next i'd like to welcome

00:19:57,280 --> 00:20:00,720
andrew moore from

00:19:58,640 --> 00:20:04,799
the cargo cult to talk about how they're

00:20:00,720 --> 00:20:04,799
using otio in their new product called

00:20:04,840 --> 00:20:09,840
matchbox

00:20:07,440 --> 00:20:10,960
hi there and greetings from wellington

00:20:09,840 --> 00:20:13,679
new zealand

00:20:10,960 --> 00:20:15,679
my name is andrew moore i'm a sound

00:20:13,679 --> 00:20:16,480
editor and software developer based here

00:20:15,679 --> 00:20:18,720
in wellington

00:20:16,480 --> 00:20:20,880
and today i would like to share with you

00:20:18,720 --> 00:20:24,480
a brand new change management tool

00:20:20,880 --> 00:20:26,480
from the cargo cult it's called matchbox

00:20:24,480 --> 00:20:27,840
and we've designed it from the ground up

00:20:26,480 --> 00:20:31,200
with support for

00:20:27,840 --> 00:20:34,080
the open timeline io platform

00:20:31,200 --> 00:20:36,480
first let me give you a brief rundown of

00:20:34,080 --> 00:20:39,120
where matchbox has come from

00:20:36,480 --> 00:20:39,760
and why these kinds of tools have become

00:20:39,120 --> 00:20:42,000
such an

00:20:39,760 --> 00:20:44,640
invaluable part of our workflow here in

00:20:42,000 --> 00:20:44,640
soundpost

00:20:46,640 --> 00:20:50,400
as budgets decrease post-production

00:20:48,880 --> 00:20:52,400
schedules shorten

00:20:50,400 --> 00:20:53,919
and directors and editors become more

00:20:52,400 --> 00:20:56,320
accustomed to making changes

00:20:53,919 --> 00:20:57,120
right up to the last minute a hugely

00:20:56,320 --> 00:21:00,159
important part

00:20:57,120 --> 00:21:02,400
of our job has become chasing the cut

00:21:00,159 --> 00:21:03,520
or reconforming all of our sound

00:21:02,400 --> 00:21:05,280
editorial work

00:21:03,520 --> 00:21:07,039
to meet the latest version of the

00:21:05,280 --> 00:21:09,600
picture edit

00:21:07,039 --> 00:21:10,720
for a long time getting edls from the

00:21:09,600 --> 00:21:14,000
editorial department

00:21:10,720 --> 00:21:14,640
was our lifeline providing a systematic

00:21:14,000 --> 00:21:17,280
way to

00:21:14,640 --> 00:21:18,000
track the changes that are being made

00:21:17,280 --> 00:21:20,720
out of this

00:21:18,000 --> 00:21:22,080
mess of shot names version numbers and

00:21:20,720 --> 00:21:25,200
time code strings

00:21:22,080 --> 00:21:26,720
conformalizer was born a dedicated tool

00:21:25,200 --> 00:21:29,360
for comparing edls

00:21:26,720 --> 00:21:30,640
and showing the differences finding the

00:21:29,360 --> 00:21:32,799
bits that match

00:21:30,640 --> 00:21:36,080
where they've shifted to and where the

00:21:32,799 --> 00:21:38,720
new material is that you need to look at

00:21:36,080 --> 00:21:40,080
you can then apply those changes to a

00:21:38,720 --> 00:21:42,559
pro tools timeline

00:21:40,080 --> 00:21:44,240
patch the holes smooth the edit points

00:21:42,559 --> 00:21:46,320
and you're ready to continue on with

00:21:44,240 --> 00:21:48,400
your work

00:21:46,320 --> 00:21:50,240
etls have been good but they're not

00:21:48,400 --> 00:21:52,159
without their problems

00:21:50,240 --> 00:21:53,600
as the complexity of an editor's

00:21:52,159 --> 00:21:56,240
timeline increases

00:21:53,600 --> 00:21:58,240
say building comps applying effects or

00:21:56,240 --> 00:22:01,039
creating nested sequences

00:21:58,240 --> 00:22:03,280
so does the complexity of generating an

00:22:01,039 --> 00:22:05,280
edl that we can use for a broader

00:22:03,280 --> 00:22:07,200
top-down comparison

00:22:05,280 --> 00:22:08,880
the better solution is just to work with

00:22:07,200 --> 00:22:10,559
what the editor works with

00:22:08,880 --> 00:22:12,000
no stripping of information or

00:22:10,559 --> 00:22:14,320
flattening of tracks

00:22:12,000 --> 00:22:16,159
just give us your multitrack timeline

00:22:14,320 --> 00:22:19,200
and let us do the rest

00:22:16,159 --> 00:22:21,360
it'll save time it'll save money

00:22:19,200 --> 00:22:22,720
it'll get us a better result and it'll

00:22:21,360 --> 00:22:24,880
help with communication between

00:22:22,720 --> 00:22:27,360
departments

00:22:24,880 --> 00:22:29,440
so this brings us to 2019 and to the

00:22:27,360 --> 00:22:31,039
beginnings of creating the successor to

00:22:29,440 --> 00:22:33,200
conformalizer 4

00:22:31,039 --> 00:22:35,039
which by now is one of the most widely

00:22:33,200 --> 00:22:41,840
used reconforming tools in the sound

00:22:35,039 --> 00:22:41,840
post industry worldwide

00:22:44,880 --> 00:22:49,840
and it's also where open timeline

00:22:46,480 --> 00:22:55,360
becomes an integral part of the story

00:22:49,840 --> 00:22:58,159
so why use otio

00:22:55,360 --> 00:22:58,640
for us the answer is obvious this is all

00:22:58,159 --> 00:23:01,360
about

00:22:58,640 --> 00:23:03,200
timeline information we don't care where

00:23:01,360 --> 00:23:06,000
the information has come from

00:23:03,200 --> 00:23:06,640
or how it was generated we just want to

00:23:06,000 --> 00:23:09,840
see it

00:23:06,640 --> 00:23:10,720
we want to compare it and we want to try

00:23:09,840 --> 00:23:13,200
and make sense

00:23:10,720 --> 00:23:14,240
of what the differences are through open

00:23:13,200 --> 00:23:16,400
timeline

00:23:14,240 --> 00:23:18,320
not only do we have access to the native

00:23:16,400 --> 00:23:20,799
and third-party adapters

00:23:18,320 --> 00:23:21,679
af and xml being the most prevalent for

00:23:20,799 --> 00:23:23,600
us

00:23:21,679 --> 00:23:25,280
but also to all future developments that

00:23:23,600 --> 00:23:27,120
happen as this platform evolves

00:23:25,280 --> 00:23:28,559
and gets more widely adopted across the

00:23:27,120 --> 00:23:30,720
industry

00:23:28,559 --> 00:23:31,760
one parser can open the door to many

00:23:30,720 --> 00:23:33,520
formats

00:23:31,760 --> 00:23:35,200
and this then opens the door to anyone

00:23:33,520 --> 00:23:36,559
who wants to build custom workflows

00:23:35,200 --> 00:23:38,320
using otio

00:23:36,559 --> 00:23:40,960
and leveraging matchbox's incredibly

00:23:38,320 --> 00:23:42,880
powerful comparison tools

00:23:40,960 --> 00:23:45,039
so let's take a look at all of this in

00:23:42,880 --> 00:23:48,559
action and see just how powerful the

00:23:45,039 --> 00:23:50,880
combination of matchbox and otio can be

00:23:48,559 --> 00:23:52,880
here we have the latest version of the

00:23:50,880 --> 00:23:54,159
cut handed over to us by the editorial

00:23:52,880 --> 00:23:56,240
department

00:23:54,159 --> 00:23:58,480
a pretty standard collection of files a

00:23:56,240 --> 00:24:02,080
quicktime some audio guide tracks

00:23:58,480 --> 00:24:03,760
an edl and we also have an aaf file

00:24:02,080 --> 00:24:05,840
so let's just go ahead and import this

00:24:03,760 --> 00:24:05,840
now

00:24:06,720 --> 00:24:11,200
this af file here is simply a direct

00:24:09,360 --> 00:24:12,720
export of the editor's timeline

00:24:11,200 --> 00:24:15,600
as they're working on it in the cutting

00:24:12,720 --> 00:24:18,799
room no pre-processing necessary

00:24:15,600 --> 00:24:20,240
just select and export using open

00:24:18,799 --> 00:24:22,080
timeline behind the scenes

00:24:20,240 --> 00:24:23,760
we can simply drag and drop this file

00:24:22,080 --> 00:24:25,440
onto the matchbox timeline

00:24:23,760 --> 00:24:27,520
and we begin extracting all of the

00:24:25,440 --> 00:24:30,159
necessary information

00:24:27,520 --> 00:24:31,520
there is now also an otio file on disk

00:24:30,159 --> 00:24:33,919
right next to the af

00:24:31,520 --> 00:24:35,840
ready to be used for next time all ready

00:24:33,919 --> 00:24:38,480
to be analyzed with any other otio

00:24:35,840 --> 00:24:40,559
compatible tool

00:24:38,480 --> 00:24:41,600
now let's grab the quicktime and those

00:24:40,559 --> 00:24:43,679
audio guides

00:24:41,600 --> 00:24:44,720
and let's also load the previous version

00:24:43,679 --> 00:24:47,120
of the cart

00:24:44,720 --> 00:24:48,799
which is conveniently stored in one easy

00:24:47,120 --> 00:24:51,679
to access file right here

00:24:48,799 --> 00:24:53,279
we simply call it a sequence file now

00:24:51,679 --> 00:24:54,000
that we have everything loaded to our

00:24:53,279 --> 00:24:55,840
new timeline

00:24:54,000 --> 00:24:58,080
on the bottom and our old timeline on

00:24:55,840 --> 00:25:01,360
the top let's just compare these two

00:24:58,080 --> 00:25:03,440
and see what the differences are

00:25:01,360 --> 00:25:05,120
what matchbox has done here is create a

00:25:03,440 --> 00:25:07,520
number of events that are a match

00:25:05,120 --> 00:25:09,520
between the old and new cuts

00:25:07,520 --> 00:25:10,960
we can see where these sections have

00:25:09,520 --> 00:25:13,679
been moved

00:25:10,960 --> 00:25:14,000
where new shots have been inserted where

00:25:13,679 --> 00:25:16,559
old

00:25:14,000 --> 00:25:17,279
shots have been dropped where sections

00:25:16,559 --> 00:25:19,919
have been

00:25:17,279 --> 00:25:22,320
reordered and where shots have been

00:25:19,919 --> 00:25:25,760
updated for a vfx update

00:25:22,320 --> 00:25:26,799
very handy if we switch to the diffs

00:25:25,760 --> 00:25:29,360
layer briefly

00:25:26,799 --> 00:25:31,279
we can see here where matchbox has found

00:25:29,360 --> 00:25:32,720
some things that we will be particularly

00:25:31,279 --> 00:25:35,679
interested in

00:25:32,720 --> 00:25:37,520
using the vfx tracing ability it has

00:25:35,679 --> 00:25:38,720
found a clip here that has gone from

00:25:37,520 --> 00:25:41,520
version 6 to

00:25:38,720 --> 00:25:42,240
version 7 and will automatically do a

00:25:41,520 --> 00:25:44,720
comparison

00:25:42,240 --> 00:25:46,159
of the images and show us exactly what's

00:25:44,720 --> 00:25:48,159
changed

00:25:46,159 --> 00:25:50,480
a helicopter has been added to the shot

00:25:48,159 --> 00:25:52,559
here so we'd better make sure that the

00:25:50,480 --> 00:25:57,039
sound effects editor knows about this

00:25:52,559 --> 00:25:58,960
and adds one in for the next review

00:25:57,039 --> 00:26:00,640
now that we have all of this info here

00:25:58,960 --> 00:26:01,440
showing the matches between these two

00:26:00,640 --> 00:26:04,880
versions

00:26:01,440 --> 00:26:06,880
what can we do with it well we can run a

00:26:04,880 --> 00:26:08,720
reconform to update all of our material

00:26:06,880 --> 00:26:10,960
to this new version

00:26:08,720 --> 00:26:12,320
we simply click on the run reconform

00:26:10,960 --> 00:26:15,360
button up here

00:26:12,320 --> 00:26:17,440
and get the process underway now

00:26:15,360 --> 00:26:19,360
for us in the soundpost world we are

00:26:17,440 --> 00:26:21,520
reconforming a pro tools session

00:26:19,360 --> 00:26:24,080
which happens in real time as matchbox

00:26:21,520 --> 00:26:26,080
does all the necessary editing for you

00:26:24,080 --> 00:26:27,760
but what else can you do you can

00:26:26,080 --> 00:26:30,000
reconform any text files

00:26:27,760 --> 00:26:31,679
tab or comma separated that has standard

00:26:30,000 --> 00:26:33,760
time code strings in it

00:26:31,679 --> 00:26:36,480
perfect for reconforming a database of

00:26:33,760 --> 00:26:38,400
dialogue or a list of specific vfx shots

00:26:36,480 --> 00:26:40,720
that you might be interested in

00:26:38,400 --> 00:26:41,679
you can also reconform a closed captions

00:26:40,720 --> 00:26:42,720
file

00:26:41,679 --> 00:26:44,960
but this isn't just about

00:26:42,720 --> 00:26:46,559
post-production sound we can now

00:26:44,960 --> 00:26:48,400
programmatically reconform a hero

00:26:46,559 --> 00:26:51,200
timeline by selecting the

00:26:48,400 --> 00:26:53,200
export hero reconform data option here

00:26:51,200 --> 00:26:55,760
and then using our specialized system

00:26:53,200 --> 00:26:57,039
inside hero to update your timeline to

00:26:55,760 --> 00:26:58,559
the new cut

00:26:57,039 --> 00:27:00,159
keep all of the work you've already done

00:26:58,559 --> 00:27:02,080
getting your timeline set up

00:27:00,159 --> 00:27:04,559
and just link to your new plates and get

00:27:02,080 --> 00:27:06,480
back to the job at hand

00:27:04,559 --> 00:27:08,320
all this data has obviously come out of

00:27:06,480 --> 00:27:11,039
a non-linear editing system

00:27:08,320 --> 00:27:11,840
in this case media composer but with

00:27:11,039 --> 00:27:13,520
otio

00:27:11,840 --> 00:27:15,679
you have the ability to incorporate

00:27:13,520 --> 00:27:18,960
matchbox's powerful comparison tools

00:27:15,679 --> 00:27:21,200
into your pipeline natively as a very

00:27:18,960 --> 00:27:22,559
very basic example i have a simple

00:27:21,200 --> 00:27:25,440
script set up here

00:27:22,559 --> 00:27:26,720
to create an otio timeline there's

00:27:25,440 --> 00:27:28,960
nothing fancy going on

00:27:26,720 --> 00:27:30,240
we're just creating a few clips adding

00:27:28,960 --> 00:27:33,840
them to our timeline

00:27:30,240 --> 00:27:35,360
and creating an otio file now let's just

00:27:33,840 --> 00:27:37,520
tweak things slightly

00:27:35,360 --> 00:27:39,840
here's one where we've got version two

00:27:37,520 --> 00:27:41,919
being generated right in front of us

00:27:39,840 --> 00:27:44,080
after generating these files which you

00:27:41,919 --> 00:27:45,279
can do using whatever data you have in

00:27:44,080 --> 00:27:46,720
your pipeline

00:27:45,279 --> 00:27:50,000
we can simply drag and drop these

00:27:46,720 --> 00:27:52,080
directly into matchbox and hit compare

00:27:50,000 --> 00:27:53,919
we immediately see where the matches are

00:27:52,080 --> 00:27:55,679
and where the changes are

00:27:53,919 --> 00:27:58,559
we can see there's been a new shot added

00:27:55,679 --> 00:28:02,080
here and that this shot here has rolled

00:27:58,559 --> 00:28:03,840
a certain number of frames

00:28:02,080 --> 00:28:05,440
is just barely scratching the surface of

00:28:03,840 --> 00:28:06,240
what can be done using this powerful

00:28:05,440 --> 00:28:08,080
system

00:28:06,240 --> 00:28:10,000
and we're very excited to see what kind

00:28:08,080 --> 00:28:12,720
of workflows people will start to create

00:28:10,000 --> 00:28:14,080
to streamline the process of comparison

00:28:12,720 --> 00:28:16,799
of reconforming

00:28:14,080 --> 00:28:18,080
of review but most importantly getting

00:28:16,799 --> 00:28:20,159
the complicated work

00:28:18,080 --> 00:28:22,000
of tracking changes out of the way so we

00:28:20,159 --> 00:28:23,919
can all focus on creating beautiful

00:28:22,000 --> 00:28:27,520
sounding and looking films

00:28:23,919 --> 00:28:29,600
episodic shows commercials games

00:28:27,520 --> 00:28:31,840
just telling stories and entertaining

00:28:29,600 --> 00:28:31,840
people

00:28:31,919 --> 00:28:35,679
so that's all for today thanks very much

00:28:34,399 --> 00:28:38,559
for checking out this

00:28:35,679 --> 00:28:40,320
quick demo of matchbox and how we are

00:28:38,559 --> 00:28:43,840
utilizing open timeline io

00:28:40,320 --> 00:28:46,240
to help people work smarter work faster

00:28:43,840 --> 00:28:49,360
and have more time to focus on the

00:28:46,240 --> 00:28:49,360
creative stuff that matters

00:28:52,080 --> 00:28:56,240
awesome thank you andrew that was really

00:28:54,799 --> 00:28:58,559
fantastic

00:28:56,240 --> 00:28:59,840
i'm especially excited to see this uh

00:28:58,559 --> 00:29:02,880
coming together

00:28:59,840 --> 00:29:04,159
uh with the flexibility of otio all the

00:29:02,880 --> 00:29:05,840
different adapters

00:29:04,159 --> 00:29:07,840
um and having these sort of change

00:29:05,840 --> 00:29:10,480
management things available in

00:29:07,840 --> 00:29:12,480
our industry um we've been approached

00:29:10,480 --> 00:29:13,120
many many times over the past few years

00:29:12,480 --> 00:29:15,679
about

00:29:13,120 --> 00:29:16,159
how do i compare two otio files and how

00:29:15,679 --> 00:29:17,679
can i

00:29:16,159 --> 00:29:19,600
how can i do this sort of comparison

00:29:17,679 --> 00:29:22,880
stuff so um uh

00:29:19,600 --> 00:29:26,080
i'm i'm really excited to check this out

00:29:22,880 --> 00:29:29,520
um next we're going to talk uh

00:29:26,080 --> 00:29:32,559
with mike mahoney from pixar

00:29:29,520 --> 00:29:35,520
about the open timeline neo web service

00:29:32,559 --> 00:29:37,440
that he's developed

00:29:35,520 --> 00:29:38,559
hi everyone my name is mike mahoney i'm

00:29:37,440 --> 00:29:40,399
a software engineer

00:29:38,559 --> 00:29:42,720
in the production support engineering

00:29:40,399 --> 00:29:44,000
team here at pixar i wanted to show you

00:29:42,720 --> 00:29:47,200
today how we

00:29:44,000 --> 00:29:49,039
use otio via a web service

00:29:47,200 --> 00:29:50,240
to start off here is our place in the

00:29:49,039 --> 00:29:52,480
pixar pipeline

00:29:50,240 --> 00:29:54,320
we receive submissions from editorial

00:29:52,480 --> 00:29:55,919
the domestic production version of the

00:29:54,320 --> 00:29:58,000
film as well as any trailers

00:29:55,919 --> 00:30:00,320
any of the 43 different localized

00:29:58,000 --> 00:30:02,080
versions of the film and stereo versions

00:30:00,320 --> 00:30:03,520
of the film they're submitted to a web

00:30:02,080 --> 00:30:06,000
application that the user then

00:30:03,520 --> 00:30:07,200
interacts with to vet and catalog and

00:30:06,000 --> 00:30:08,960
approve and store

00:30:07,200 --> 00:30:11,840
the submissions they're then passed to

00:30:08,960 --> 00:30:15,120
color grading and packaging and shipping

00:30:11,840 --> 00:30:16,159
so we started using otio back on

00:30:15,120 --> 00:30:19,039
incredibles 2

00:30:16,159 --> 00:30:20,080
in 2017 in order to do dissolves in a

00:30:19,039 --> 00:30:22,480
different way

00:30:20,080 --> 00:30:24,799
prior to the movie dissolves were

00:30:22,480 --> 00:30:26,799
handled on the production side of things

00:30:24,799 --> 00:30:28,640
they were turned into a d shot which was

00:30:26,799 --> 00:30:29,520
then passed to mastering for color

00:30:28,640 --> 00:30:32,080
grading

00:30:29,520 --> 00:30:32,960
incredibles 2 requested that we keep the

00:30:32,080 --> 00:30:34,880
shots separate

00:30:32,960 --> 00:30:36,880
apply the grades in mastering and then

00:30:34,880 --> 00:30:37,600
allow the mastering software to do the

00:30:36,880 --> 00:30:39,600
dissolve

00:30:37,600 --> 00:30:41,279
so at the time and for the previous

00:30:39,600 --> 00:30:43,120
20ish years submissions were made to

00:30:41,279 --> 00:30:45,279
mastering in the form of a film log

00:30:43,120 --> 00:30:46,559
that's just a playlist of shots but no

00:30:45,279 --> 00:30:48,880
transition information

00:30:46,559 --> 00:30:50,399
serendipitously the open timeline io

00:30:48,880 --> 00:30:52,080
project was just spinning up

00:30:50,399 --> 00:30:54,399
and as you can see here in this sample

00:30:52,080 --> 00:30:55,360
otio file there was the concept of

00:30:54,399 --> 00:30:57,360
transitions

00:30:55,360 --> 00:30:59,440
seemed like a great place to start as we

00:30:57,360 --> 00:31:01,679
dug in we started to find more useful

00:30:59,440 --> 00:31:02,640
aspects of the otio project that really

00:31:01,679 --> 00:31:05,279
sweetened the deal

00:31:02,640 --> 00:31:05,919
the format conversion plug-ins provided

00:31:05,279 --> 00:31:07,440
in the base

00:31:05,919 --> 00:31:10,080
as well as the idea of the contrib

00:31:07,440 --> 00:31:11,840
adapters and internal pixar adapters

00:31:10,080 --> 00:31:14,080
meant that we could support in our

00:31:11,840 --> 00:31:14,399
pipeline any of the various file formats

00:31:14,080 --> 00:31:16,080
that

00:31:14,399 --> 00:31:17,679
individual pieces of the pipeline might

00:31:16,080 --> 00:31:19,840
need along the way so

00:31:17,679 --> 00:31:21,600
when editorial would submit to this

00:31:19,840 --> 00:31:23,120
cataloging web application you can see

00:31:21,600 --> 00:31:24,960
here highlighted in yellow we

00:31:23,120 --> 00:31:26,799
we immediately saved the submission in

00:31:24,960 --> 00:31:28,880
its original file format to storage

00:31:26,799 --> 00:31:30,240
and we found that a versatile way to

00:31:28,880 --> 00:31:32,720
incorporate otio

00:31:30,240 --> 00:31:34,320
into this application as well as others

00:31:32,720 --> 00:31:36,480
was as a web application

00:31:34,320 --> 00:31:37,760
that all playlists would pass through

00:31:36,480 --> 00:31:40,320
upon retrieval from

00:31:37,760 --> 00:31:42,640
storage you can see here that now by

00:31:40,320 --> 00:31:43,600
virtue of the adapters we can support

00:31:42,640 --> 00:31:46,240
either in or

00:31:43,600 --> 00:31:48,080
out any of the file formats supported by

00:31:46,240 --> 00:31:51,039
the open timeline io community

00:31:48,080 --> 00:31:52,159
now a quick but important aside the cmx

00:31:51,039 --> 00:31:54,720
00:31:52,159 --> 00:31:56,320
edl adapter at the time didn't actually

00:31:54,720 --> 00:31:57,760
support transitions but

00:31:56,320 --> 00:31:59,600
after a bit of research figuring out

00:31:57,760 --> 00:32:01,919
exactly how transitions were represented

00:31:59,600 --> 00:32:04,240
in edls the actual implementation

00:32:01,919 --> 00:32:04,960
inside the adapter to support writing

00:32:04,240 --> 00:32:07,600
transitions

00:32:04,960 --> 00:32:08,640
was super straightforward so as we

00:32:07,600 --> 00:32:10,640
pulled the edls

00:32:08,640 --> 00:32:13,200
out of the system for color grading as

00:32:10,640 --> 00:32:14,000
requested by incredibles 2 production we

00:32:13,200 --> 00:32:16,720
can now

00:32:14,000 --> 00:32:18,720
satisfy that request along the way we

00:32:16,720 --> 00:32:20,640
also began to realize that otio would

00:32:18,720 --> 00:32:23,440
help us with catalog remastering

00:32:20,640 --> 00:32:24,880
as new technology like hdr and 4k come

00:32:23,440 --> 00:32:26,640
along thanks to the

00:32:24,880 --> 00:32:28,799
up versioning built into the open

00:32:26,640 --> 00:32:30,880
timeline io base any media that we pull

00:32:28,799 --> 00:32:33,600
out whether it's legacy film logs

00:32:30,880 --> 00:32:34,799
legacy otio versions it's all taken care

00:32:33,600 --> 00:32:36,399
of and we always get

00:32:34,799 --> 00:32:39,039
the latest and greatest when pulling

00:32:36,399 --> 00:32:40,960
from storage so this primary application

00:32:39,039 --> 00:32:44,000
as well as others we've written since

00:32:40,960 --> 00:32:46,000
and scripts interact with otio via

00:32:44,000 --> 00:32:47,840
a micro service you can see here it's

00:32:46,000 --> 00:32:48,399
deployed to our internal cloud at a

00:32:47,840 --> 00:32:50,159
production

00:32:48,399 --> 00:32:52,320
and a staging environment as well as dev

00:32:50,159 --> 00:32:54,480
environments and provides endpoints for

00:32:52,320 --> 00:32:56,480
listing adapters as well as any kind of

00:32:54,480 --> 00:32:58,480
conversion adapters are configured for

00:32:56,480 --> 00:33:00,399
you can see in the example usage here

00:32:58,480 --> 00:33:03,840
that we can take binary aaf

00:33:00,399 --> 00:33:05,519
as input or edls or logs or urls with

00:33:03,840 --> 00:33:07,279
authentication cookies which is actually

00:33:05,519 --> 00:33:09,279
what we use most in this primary

00:33:07,279 --> 00:33:12,799
application to fetch playlists from

00:33:09,279 --> 00:33:14,320
an s3 like storage system here i'm using

00:33:12,799 --> 00:33:17,440
the httpi

00:33:14,320 --> 00:33:19,039
command line utility for listing all of

00:33:17,440 --> 00:33:20,320
the adapters that are currently

00:33:19,039 --> 00:33:23,919
registered with

00:33:20,320 --> 00:33:25,279
this host here's an example otio file

00:33:23,919 --> 00:33:27,440
that is actually pretty

00:33:25,279 --> 00:33:29,600
sparse one thing that i love about the

00:33:27,440 --> 00:33:29,919
current otio implementation is that we

00:33:29,600 --> 00:33:32,080
can

00:33:29,919 --> 00:33:34,240
thin down to just the basics and it will

00:33:32,080 --> 00:33:36,159
still be parsable upon ingest

00:33:34,240 --> 00:33:38,159
we can then pipe that into our web

00:33:36,159 --> 00:33:41,279
service and get it out as

00:33:38,159 --> 00:33:43,200
a up versioned otio file

00:33:41,279 --> 00:33:44,960
you can see here that media references

00:33:43,200 --> 00:33:48,720
are actually connected through the

00:33:44,960 --> 00:33:50,720
pixar media linker we can get it out as

00:33:48,720 --> 00:33:53,519
an edl for example

00:33:50,720 --> 00:33:54,159
we can get a as an edl that is in the

00:33:53,519 --> 00:33:56,000
nucoda

00:33:54,159 --> 00:33:58,320
style you can see here the two different

00:33:56,000 --> 00:33:59,360
styles deal with the from comment in

00:33:58,320 --> 00:34:02,399
different ways

00:33:59,360 --> 00:34:05,200
we can get the media out as

00:34:02,399 --> 00:34:06,240
play format for example pixar presto

00:34:05,200 --> 00:34:09,440
playlist format

00:34:06,240 --> 00:34:13,040
or as a film log saved to disk

00:34:09,440 --> 00:34:13,040
via our utility here

00:34:15,440 --> 00:34:19,200
pretty easy the microservice code itself

00:34:17,679 --> 00:34:21,280
is pretty small only a couple hundred

00:34:19,200 --> 00:34:22,639
lines written in the tornado framework

00:34:21,280 --> 00:34:25,119
with python27

00:34:22,639 --> 00:34:25,919
benefits of this microweb service

00:34:25,119 --> 00:34:27,599
architecture

00:34:25,919 --> 00:34:29,839
include independent continuous

00:34:27,599 --> 00:34:30,879
deployment to either a staging or

00:34:29,839 --> 00:34:32,800
production environment

00:34:30,879 --> 00:34:34,079
into multiple nodes since it's all

00:34:32,800 --> 00:34:35,839
transient we can spin

00:34:34,079 --> 00:34:38,000
up as many nodes as we need concurrent

00:34:35,839 --> 00:34:39,679
processing any external dependencies

00:34:38,000 --> 00:34:41,520
required by any of the adapters

00:34:39,679 --> 00:34:43,440
are contained to the nodes that don't

00:34:41,520 --> 00:34:45,599
need to be installed in every using

00:34:43,440 --> 00:34:47,440
software package any number of using

00:34:45,599 --> 00:34:48,000
services get to share the benefits of

00:34:47,440 --> 00:34:50,320
maintaining

00:34:48,000 --> 00:34:51,760
a single micro service deployment and

00:34:50,320 --> 00:34:52,079
we've actually found that we can pass

00:34:51,760 --> 00:34:54,879
the

00:34:52,079 --> 00:34:56,240
endpoint off to our users and they find

00:34:54,879 --> 00:34:58,720
it straightforward to

00:34:56,240 --> 00:35:00,240
prototype and play with in script we

00:34:58,720 --> 00:35:01,680
find that the development workflow is

00:35:00,240 --> 00:35:04,320
also pretty straightforward

00:35:01,680 --> 00:35:05,040
it involves three main players docker

00:35:04,320 --> 00:35:07,599
get lab

00:35:05,040 --> 00:35:08,560
and openshift which is actually a

00:35:07,599 --> 00:35:10,320
container

00:35:08,560 --> 00:35:12,079
orchestration platform built on top of

00:35:10,320 --> 00:35:12,880
kubernetes our local development all

00:35:12,079 --> 00:35:15,440
happens within

00:35:12,880 --> 00:35:17,040
docker containers the otio package as

00:35:15,440 --> 00:35:19,119
well as our pixar adapters

00:35:17,040 --> 00:35:20,079
are pip installed via requirements text

00:35:19,119 --> 00:35:22,480
file via

00:35:20,079 --> 00:35:24,800
our internal px pi pi service and we use

00:35:22,480 --> 00:35:25,920
a simple make file to spin up our dev

00:35:24,800 --> 00:35:28,160
containers and run

00:35:25,920 --> 00:35:30,079
unit tests and end-to-end tests which

00:35:28,160 --> 00:35:31,200
have proved handy as the open timeline

00:35:30,079 --> 00:35:34,320
io core package

00:35:31,200 --> 00:35:37,920
evolves we use git lab to build and run

00:35:34,320 --> 00:35:40,079
tests and perform reviews and deploy to

00:35:37,920 --> 00:35:41,119
our various environments with the push

00:35:40,079 --> 00:35:42,960
of a button

00:35:41,119 --> 00:35:44,880
that's it thank you so much for watching

00:35:42,960 --> 00:35:47,599
feel free to send me a message if you

00:35:44,880 --> 00:35:47,599
have any questions

00:35:49,119 --> 00:35:54,079
all right thanks mike um i'm i'm really

00:35:52,160 --> 00:35:57,760
excited you know this is uh

00:35:54,079 --> 00:36:00,480
to see um oti i used you know

00:35:57,760 --> 00:36:01,839
close to home um but also in a really

00:36:00,480 --> 00:36:02,880
flexible way that's that's made our

00:36:01,839 --> 00:36:05,359
pipeline uh run

00:36:02,880 --> 00:36:06,079
a lot a lot smoother so i appreciate

00:36:05,359 --> 00:36:09,040
that

00:36:06,079 --> 00:36:10,400
um okay next up let's talk about um our

00:36:09,040 --> 00:36:11,280
road map and sort of where the project

00:36:10,400 --> 00:36:14,400
is going

00:36:11,280 --> 00:36:16,160
um in the future um and as part of that

00:36:14,400 --> 00:36:18,000
we really want to highlight that

00:36:16,160 --> 00:36:19,599
there's been a in the last year or so

00:36:18,000 --> 00:36:22,800
there's been a really uh

00:36:19,599 --> 00:36:24,560
strong sort of uptick in community

00:36:22,800 --> 00:36:26,480
activity in the project um

00:36:24,560 --> 00:36:28,800
we're getting a lot of questions and

00:36:26,480 --> 00:36:29,599
ideas and code contributions from a lot

00:36:28,800 --> 00:36:31,760
of different folks

00:36:29,599 --> 00:36:33,680
um and we really appreciate this this

00:36:31,760 --> 00:36:35,520
was one of the main reasons why

00:36:33,680 --> 00:36:36,880
we wanted to open source open timeline

00:36:35,520 --> 00:36:38,839
io and also to

00:36:36,880 --> 00:36:40,000
engage with the academy and software

00:36:38,839 --> 00:36:42,800
foundation

00:36:40,000 --> 00:36:44,560
and to really find um you know our peers

00:36:42,800 --> 00:36:45,920
working on the same kind of stuff

00:36:44,560 --> 00:36:48,560
in lots of different companies lots of

00:36:45,920 --> 00:36:48,960
different um use cases um and be able to

00:36:48,560 --> 00:36:50,800
like

00:36:48,960 --> 00:36:52,400
cooperate with each other which is

00:36:50,800 --> 00:36:54,480
really great um

00:36:52,400 --> 00:36:55,760
uh so what we're trying to do is we're

00:36:54,480 --> 00:36:57,440
trying to shift to

00:36:55,760 --> 00:36:58,880
some more community leadership on

00:36:57,440 --> 00:37:01,599
specific projects

00:36:58,880 --> 00:37:02,480
um and uh to set up some more sort of

00:37:01,599 --> 00:37:04,400
working group

00:37:02,480 --> 00:37:06,839
meetings and help kind of facilitate

00:37:04,400 --> 00:37:10,400
people working on things so

00:37:06,839 --> 00:37:13,440
um uh the um

00:37:10,400 --> 00:37:15,040
recent uh image sequence uh support

00:37:13,440 --> 00:37:16,800
project i think was a great example of

00:37:15,040 --> 00:37:18,160
that where um

00:37:16,800 --> 00:37:20,240
folks from a couple different companies

00:37:18,160 --> 00:37:21,359
were able to um cooperate with each

00:37:20,240 --> 00:37:23,760
other and

00:37:21,359 --> 00:37:24,480
build an improvement to otio without our

00:37:23,760 --> 00:37:27,839
sort of

00:37:24,480 --> 00:37:29,920
um uh you know sort of core

00:37:27,839 --> 00:37:31,040
team needing to do a lot of that that

00:37:29,920 --> 00:37:32,960
work um

00:37:31,040 --> 00:37:34,800
and and inviting new people into into

00:37:32,960 --> 00:37:36,400
the project as well

00:37:34,800 --> 00:37:38,079
um so we have a bunch of sort of

00:37:36,400 --> 00:37:40,079
projects that are um

00:37:38,079 --> 00:37:41,359
active in some form or another um some

00:37:40,079 --> 00:37:45,440
more so than others

00:37:41,359 --> 00:37:48,160
um there's been some improvements to our

00:37:45,440 --> 00:37:48,960
continuous integration build system uh

00:37:48,160 --> 00:37:51,040
we're switching

00:37:48,960 --> 00:37:52,640
from travis to github actions for

00:37:51,040 --> 00:37:56,160
example um

00:37:52,640 --> 00:37:59,599
as well as improving our

00:37:56,160 --> 00:38:01,280
cmake system um the google summer of

00:37:59,599 --> 00:38:04,160
code project that i mentioned earlier

00:38:01,280 --> 00:38:05,760
is wrapping up there's an effort

00:38:04,160 --> 00:38:07,520
underway to

00:38:05,760 --> 00:38:10,079
more formally document a sort of

00:38:07,520 --> 00:38:13,440
specification for the otio

00:38:10,079 --> 00:38:17,040
file format and data model

00:38:13,440 --> 00:38:18,160
there's a contribution from autodesk

00:38:17,040 --> 00:38:20,640
that's um

00:38:18,160 --> 00:38:22,240
specifying a spatial coordinate system

00:38:20,640 --> 00:38:25,200
schema

00:38:22,240 --> 00:38:25,440
there's discussion about uh a prototype

00:38:25,200 --> 00:38:29,200
of

00:38:25,440 --> 00:38:32,480
an editing api so um with methods for

00:38:29,200 --> 00:38:35,359
doing the sort of like overwrite insert

00:38:32,480 --> 00:38:36,880
um those kinds of things that were

00:38:35,359 --> 00:38:38,720
previously not

00:38:36,880 --> 00:38:40,000
those operations were not really

00:38:38,720 --> 00:38:42,800
represented in

00:38:40,000 --> 00:38:43,920
otio um there's a blender integration

00:38:42,800 --> 00:38:46,560
underway

00:38:43,920 --> 00:38:46,960
um and improvements to the lens metadata

00:38:46,560 --> 00:38:49,440
so

00:38:46,960 --> 00:38:50,720
these are all like all sort of going in

00:38:49,440 --> 00:38:52,160
some form or another

00:38:50,720 --> 00:38:54,800
so if you want to participate in any of

00:38:52,160 --> 00:38:57,359
those um you're welcome to

00:38:54,800 --> 00:38:57,920
um uh there's also you know future

00:38:57,359 --> 00:38:59,920
projects

00:38:57,920 --> 00:39:01,920
things that we've we've talked about um

00:38:59,920 --> 00:39:04,480
that are um

00:39:01,920 --> 00:39:05,359
not necessarily underway at the moment

00:39:04,480 --> 00:39:07,280
um but that we're

00:39:05,359 --> 00:39:09,280
we're hoping that folks from the

00:39:07,280 --> 00:39:13,440
community will will step up and

00:39:09,280 --> 00:39:14,400
um and uh try to uh champion these

00:39:13,440 --> 00:39:17,440
things so

00:39:14,400 --> 00:39:18,880
um one of which is uh the non-linear

00:39:17,440 --> 00:39:20,400
time warp effects

00:39:18,880 --> 00:39:21,920
um we've made some stabs with this in

00:39:20,400 --> 00:39:25,280
the past

00:39:21,920 --> 00:39:27,040
uh somewhat unsuccessfully but um

00:39:25,280 --> 00:39:28,640
but we would love to just move forward

00:39:27,040 --> 00:39:28,960
on that that's something that comes up

00:39:28,640 --> 00:39:31,599
quite

00:39:28,960 --> 00:39:32,640
quite a lot um there's discussion about

00:39:31,599 --> 00:39:35,920
annotations

00:39:32,640 --> 00:39:38,720
um so draw overs and textual annotations

00:39:35,920 --> 00:39:40,480
uh there's been requests for time

00:39:38,720 --> 00:39:42,240
varying metadata so

00:39:40,480 --> 00:39:44,400
something that might be sort of animated

00:39:42,240 --> 00:39:47,359
over the course of a clip

00:39:44,400 --> 00:39:47,760
or change over the course of a clip um

00:39:47,359 --> 00:39:50,560
we

00:39:47,760 --> 00:39:51,520
hope to uh do some improvements to the

00:39:50,560 --> 00:39:55,440
way we represent

00:39:51,520 --> 00:39:58,560
time um there's definitely some room for

00:39:55,440 --> 00:40:00,240
uh improvement in our documentation um

00:39:58,560 --> 00:40:02,800
and we'd like to support video effects

00:40:00,240 --> 00:40:05,440
in the future as well

00:40:02,800 --> 00:40:06,880
um and also just a shout out to you know

00:40:05,440 --> 00:40:08,240
if you have an application that deals

00:40:06,880 --> 00:40:11,599
with timelines

00:40:08,240 --> 00:40:13,200
um please add otio support

00:40:11,599 --> 00:40:14,640
into your application i think we're

00:40:13,200 --> 00:40:16,480
getting we're getting pretty far with

00:40:14,640 --> 00:40:18,720
the notion of adapters

00:40:16,480 --> 00:40:19,920
um and plugins from from coming from the

00:40:18,720 --> 00:40:23,359
community

00:40:19,920 --> 00:40:26,400
but we really like to see uh developers

00:40:23,359 --> 00:40:29,520
uh in this in in this realm uh

00:40:26,400 --> 00:40:31,760
really adding native support um so

00:40:29,520 --> 00:40:34,079
um we'll help to answer your questions

00:40:31,760 --> 00:40:35,760
and and uh figure things out so

00:40:34,079 --> 00:40:37,520
please reach out to us if you need some

00:40:35,760 --> 00:40:41,760
help with that

00:40:37,520 --> 00:40:44,280
um so if you'd like to get involved um

00:40:41,760 --> 00:40:46,400
our our website is available at

00:40:44,280 --> 00:40:49,680
opentimeline.io

00:40:46,400 --> 00:40:52,400
we have a mailing list which is uh

00:40:49,680 --> 00:40:53,280
mostly sort of announcements but we're

00:40:52,400 --> 00:40:55,520
open to questions

00:40:53,280 --> 00:40:56,960
and discussion on there as well um

00:40:55,520 --> 00:40:59,119
there's a slack channel which

00:40:56,960 --> 00:41:00,720
has quite a few people in it now that's

00:40:59,119 --> 00:41:02,079
where a lot of the discussion is going

00:41:00,720 --> 00:41:04,000
on

00:41:02,079 --> 00:41:05,359
so you can join that there and we also

00:41:04,000 --> 00:41:08,880
have every other week

00:41:05,359 --> 00:41:11,839
um our steering committee meetings

00:41:08,880 --> 00:41:13,280
which are open to everyone and we've

00:41:11,839 --> 00:41:13,760
seen new people sort of showing up to

00:41:13,280 --> 00:41:15,760
that

00:41:13,760 --> 00:41:17,520
i'm getting a good discussion and that's

00:41:15,760 --> 00:41:17,839
a great way to to meet the people who

00:41:17,520 --> 00:41:21,599
are

00:41:17,839 --> 00:41:24,079
involved and to talk about things

00:41:21,599 --> 00:41:24,800
that you want to contribute with to or

00:41:24,079 --> 00:41:28,160
or

00:41:24,800 --> 00:41:30,880
or influence in our roadmap

00:41:28,160 --> 00:41:33,440
and with that we'd like to open it up to

00:41:30,880 --> 00:41:35,839
questions

00:41:33,440 --> 00:41:36,480
and uh we have a bunch of people from

00:41:35,839 --> 00:41:38,400
our

00:41:36,480 --> 00:41:41,440
community here who are available to

00:41:38,400 --> 00:41:41,440
answer things as well

00:41:42,720 --> 00:41:50,240
hey we uh yeah we have one in the

00:41:45,920 --> 00:41:53,280
q a list here from uh simran

00:41:50,240 --> 00:41:55,119
and he asks will adapters be ported to c

00:41:53,280 --> 00:41:56,960
plus officially or will this be up to

00:41:55,119 --> 00:41:58,560
the community or is python going to be

00:41:56,960 --> 00:42:00,880
this whole option

00:41:58,560 --> 00:42:02,160
okay that's a great question um i would

00:42:00,880 --> 00:42:04,000
say at the moment

00:42:02,160 --> 00:42:06,000
we've we've got a few questions about

00:42:04,000 --> 00:42:08,240
that at the moment we don't really have

00:42:06,000 --> 00:42:08,960
plans to port those to seepless plus

00:42:08,240 --> 00:42:11,359
it's not

00:42:08,960 --> 00:42:12,240
really the top at the top of our list um

00:42:11,359 --> 00:42:14,720
i think that

00:42:12,240 --> 00:42:16,000
uh we're open to discussing that um

00:42:14,720 --> 00:42:19,200
there's nothing really

00:42:16,000 --> 00:42:20,000
preventing that um we were i think a

00:42:19,200 --> 00:42:23,599
little shy

00:42:20,000 --> 00:42:25,760
about introducing a plug-in mechanism to

00:42:23,599 --> 00:42:27,440
the c-plus plus infrastructure there's a

00:42:25,760 --> 00:42:28,480
bunch of different ways of doing that um

00:42:27,440 --> 00:42:29,920
so if you have

00:42:28,480 --> 00:42:32,000
sort of thoughts on how how that could

00:42:29,920 --> 00:42:35,200
work well um that uh

00:42:32,000 --> 00:42:35,680
it'll be it'll be good to know um so

00:42:35,200 --> 00:42:37,680
it's not

00:42:35,680 --> 00:42:39,280
it's not really high on our list but um

00:42:37,680 --> 00:42:41,760
but if you want it like that's part of

00:42:39,280 --> 00:42:42,880
this being a community driven project

00:42:41,760 --> 00:42:45,119
um if that's something that the

00:42:42,880 --> 00:42:47,920
community wants i'm more happy to help

00:42:45,119 --> 00:42:47,920
facilitate that

00:42:49,280 --> 00:42:53,040
great and uh we've got one other one

00:42:52,640 --> 00:42:56,480
here

00:42:53,040 --> 00:42:57,440
from him uh if the otio format is

00:42:56,480 --> 00:42:58,880
extensible

00:42:57,440 --> 00:43:00,720
would you recommend it as a native

00:42:58,880 --> 00:43:04,400
storage format for an nle

00:43:00,720 --> 00:43:06,560
any pitfalls um

00:43:04,400 --> 00:43:07,680
yeah that's a great question um i think

00:43:06,560 --> 00:43:11,119
that uh

00:43:07,680 --> 00:43:13,920
you know we originated um

00:43:11,119 --> 00:43:14,640
open timeline i o as an interchange

00:43:13,920 --> 00:43:17,440
format

00:43:14,640 --> 00:43:18,000
um and an interchange sort of workflow

00:43:17,440 --> 00:43:19,760
thing

00:43:18,000 --> 00:43:20,960
uh which is meant for the you know

00:43:19,760 --> 00:43:22,480
something you would find in the sort of

00:43:20,960 --> 00:43:26,160
import or export

00:43:22,480 --> 00:43:28,560
dialogue in an application or

00:43:26,160 --> 00:43:30,880
files that you're handing off but we

00:43:28,560 --> 00:43:34,079
have had quite a few people ask about

00:43:30,880 --> 00:43:36,000
uh you know using it more as like

00:43:34,079 --> 00:43:37,680
the native file format for something or

00:43:36,000 --> 00:43:39,839
using otio as the

00:43:37,680 --> 00:43:40,880
sort of in-memory representation for for

00:43:39,839 --> 00:43:44,160
something um

00:43:40,880 --> 00:43:45,599
i would say that um if you were to go

00:43:44,160 --> 00:43:46,400
that route you might be the first ones

00:43:45,599 --> 00:43:48,319
to do it

00:43:46,400 --> 00:43:50,400
um so it would be interesting to sort of

00:43:48,319 --> 00:43:54,400
find out how that how that goes

00:43:50,400 --> 00:43:56,000
um uh i think that um

00:43:54,400 --> 00:43:58,240
we've certainly done some things

00:43:56,000 --> 00:44:00,079
in-house where we're using otio as like

00:43:58,240 --> 00:44:00,880
the primary file format for some of our

00:44:00,079 --> 00:44:02,160
workflows

00:44:00,880 --> 00:44:04,160
and just putting a lot of interesting

00:44:02,160 --> 00:44:07,200
things into the metadata

00:44:04,160 --> 00:44:09,040
for it um that's worked okay it doesn't

00:44:07,200 --> 00:44:10,319
sometimes an application or a specific

00:44:09,040 --> 00:44:13,760
workflow will want

00:44:10,319 --> 00:44:14,480
um you know larger sort of binary things

00:44:13,760 --> 00:44:16,720
or

00:44:14,480 --> 00:44:18,480
or other stuff like that in in their

00:44:16,720 --> 00:44:21,200
their native file format

00:44:18,480 --> 00:44:22,160
so you may find some challenges there um

00:44:21,200 --> 00:44:23,680
but uh

00:44:22,160 --> 00:44:25,520
um but yeah i think that would be a

00:44:23,680 --> 00:44:28,880
great thing to sort of um

00:44:25,520 --> 00:44:31,119
talk with us more on on slack and and uh

00:44:28,880 --> 00:44:32,000
at our tsc meetings and kind of find out

00:44:31,119 --> 00:44:37,839
some more of like

00:44:32,000 --> 00:44:37,839
what you have in mind with that

00:44:38,480 --> 00:44:51,839
great any other questions

00:44:52,240 --> 00:44:55,440
i think one question maybe we have for

00:44:54,000 --> 00:44:58,560
the community is

00:44:55,440 --> 00:45:01,680
um uh how did the

00:44:58,560 --> 00:45:05,200
transition from the pure python to the

00:45:01,680 --> 00:45:07,760
um c plus plus core work for people

00:45:05,200 --> 00:45:09,280
um hopefully that went pretty smoothly

00:45:07,760 --> 00:45:10,160
um i know we did hear from a couple

00:45:09,280 --> 00:45:11,920
people who had some

00:45:10,160 --> 00:45:14,000
some problems so if there's anybody

00:45:11,920 --> 00:45:16,000
who's sort of still having problems

00:45:14,000 --> 00:45:18,880
uh crossing that transition it would be

00:45:16,000 --> 00:45:20,560
good for us to know

00:45:18,880 --> 00:45:33,839
because we don't want folks having to

00:45:20,560 --> 00:45:33,839
linger back on old versions of otio

00:45:59,599 --> 00:46:02,640
and are there other things that you uh

00:46:01,839 --> 00:46:05,200
feel that we should

00:46:02,640 --> 00:46:06,400
have on our our roadmap that you that

00:46:05,200 --> 00:46:08,480
you didn't see there or

00:46:06,400 --> 00:46:09,680
the things that you're particularly

00:46:08,480 --> 00:46:11,760
excited about

00:46:09,680 --> 00:46:13,599
um feel free to chime in if there's

00:46:11,760 --> 00:46:29,839
something that you want to

00:46:13,599 --> 00:46:29,839
sort of upvote a bit

00:46:54,960 --> 00:46:59,520
oh i see oh go ahead oh yeah i see a

00:46:58,400 --> 00:47:02,560
question about

00:46:59,520 --> 00:47:04,640
uh will otio help unify editorial

00:47:02,560 --> 00:47:06,800
ingestion and interchange between

00:47:04,640 --> 00:47:08,480
uh various editorial packages like avid

00:47:06,800 --> 00:47:11,599
premiere final cut and

00:47:08,480 --> 00:47:13,839
hero um i think that um

00:47:11,599 --> 00:47:16,000
going straight from one non-linear

00:47:13,839 --> 00:47:18,720
editing application to another

00:47:16,000 --> 00:47:19,520
is something that oti could certainly

00:47:18,720 --> 00:47:22,559
help with

00:47:19,520 --> 00:47:23,839
um several of those uh sort of already

00:47:22,559 --> 00:47:27,280
have

00:47:23,839 --> 00:47:29,760
some uh some support for um

00:47:27,280 --> 00:47:30,960
things like the final cut xml or aaf

00:47:29,760 --> 00:47:34,240
format

00:47:30,960 --> 00:47:36,240
um uh so that's something that

00:47:34,240 --> 00:47:38,240
we'd love to sort of see in the future i

00:47:36,240 --> 00:47:39,760
think our emphasis has been getting

00:47:38,240 --> 00:47:41,359
things from non-linear editing

00:47:39,760 --> 00:47:43,200
applications out to

00:47:41,359 --> 00:47:44,880
sort of the rest of a visual effects

00:47:43,200 --> 00:47:47,760
pipeline for example

00:47:44,880 --> 00:47:50,319
um uh but there's nothing sort of

00:47:47,760 --> 00:47:52,480
stopping us there i think that the

00:47:50,319 --> 00:47:54,000
developers of several of those

00:47:52,480 --> 00:47:57,200
applications have been

00:47:54,000 --> 00:47:59,280
um maybe a little sort of uh

00:47:57,200 --> 00:48:00,720
cautious or you know maybe supportive of

00:47:59,280 --> 00:48:04,000
us but but not really like

00:48:00,720 --> 00:48:07,599
um jumping in head first

00:48:04,000 --> 00:48:08,400
um which is fine i think um uh i think

00:48:07,599 --> 00:48:09,839
that's something that

00:48:08,400 --> 00:48:11,440
as long as the community is sort of

00:48:09,839 --> 00:48:14,000
asking for that from from those

00:48:11,440 --> 00:48:15,920
um those folks i think that um i think

00:48:14,000 --> 00:48:21,520
that could be really helpful

00:48:15,920 --> 00:48:24,400
um yeah hopefully i answer your question

00:48:21,520 --> 00:48:26,160
um the question do we support time based

00:48:24,400 --> 00:48:30,960
conversions between

00:48:26,160 --> 00:48:34,000
the ntsc non-integer rates and

00:48:30,960 --> 00:48:37,760
integer rates we do have

00:48:34,000 --> 00:48:38,640
some api for um for working with some of

00:48:37,760 --> 00:48:40,880
those things

00:48:38,640 --> 00:48:43,040
um we don't really have something to say

00:48:40,880 --> 00:48:45,359
like conform your timeline

00:48:43,040 --> 00:48:46,160
um uh from one of those rates to another

00:48:45,359 --> 00:48:48,400
if that's

00:48:46,160 --> 00:48:50,480
that's your question um so there's sort

00:48:48,400 --> 00:48:53,920
of like low-level support for

00:48:50,480 --> 00:48:58,160
uh for those rates um

00:48:53,920 --> 00:49:00,319
but um uh but i think it would be up to

00:48:58,160 --> 00:49:02,960
you to to write something to actually

00:49:00,319 --> 00:49:06,079
define how you want to

00:49:02,960 --> 00:49:07,839
snap things from from one to another

00:49:06,079 --> 00:49:09,280
and that would be a great sort of use

00:49:07,839 --> 00:49:13,839
case a great sort of

00:49:09,280 --> 00:49:15,440
workflow use case to get into um so yeah

00:49:13,839 --> 00:49:17,680
i was going to say maybe to add some

00:49:15,440 --> 00:49:21,040
clarity to that also um

00:49:17,680 --> 00:49:24,079
open timeline i o is frame rate agnostic

00:49:21,040 --> 00:49:24,880
so you know unlike some other formats

00:49:24,079 --> 00:49:28,160
that might

00:49:24,880 --> 00:49:30,079
specify that everything is is in terms

00:49:28,160 --> 00:49:32,800
of a given edit rate

00:49:30,079 --> 00:49:33,440
um you're able to specify your time sort

00:49:32,800 --> 00:49:35,760
of

00:49:33,440 --> 00:49:38,319
in whatever way is native for the media

00:49:35,760 --> 00:49:40,000
or if you wanted to specify everything

00:49:38,319 --> 00:49:41,680
is being snapped to a given edit rate

00:49:40,000 --> 00:49:44,160
you could do that

00:49:41,680 --> 00:49:46,240
but again that's as josh was alluding to

00:49:44,160 --> 00:49:47,520
that's an exercise for the user of open

00:49:46,240 --> 00:49:50,640
timeline i o

00:49:47,520 --> 00:49:52,720
to decide when they want to you know

00:49:50,640 --> 00:49:55,680
use things at a certain rate or express

00:49:52,720 --> 00:49:55,680
it in media native

00:49:56,960 --> 00:50:00,559
um the next question is about is a rough

00:49:59,920 --> 00:50:03,920
eta

00:50:00,559 --> 00:50:07,200
for the um documentation overhaul uh

00:50:03,920 --> 00:50:11,040
and no there isn't um uh

00:50:07,200 --> 00:50:11,040
one thing that we're um

00:50:11,680 --> 00:50:16,880
disgusting is uh you know as a community

00:50:15,040 --> 00:50:18,559
based project it's a little hard for us

00:50:16,880 --> 00:50:19,599
to sort of put deadlines on a lot of

00:50:18,559 --> 00:50:21,200
things um

00:50:19,599 --> 00:50:23,040
we've we've tried that in a few cases

00:50:21,200 --> 00:50:26,880
that we're on our release schedule

00:50:23,040 --> 00:50:28,960
um but at the moment there's no um

00:50:26,880 --> 00:50:31,839
there's no schedule for the

00:50:28,960 --> 00:50:33,599
documentation overhaul

00:50:31,839 --> 00:50:35,920
if there's particular areas that you

00:50:33,599 --> 00:50:36,480
feel uh we should focus on first or

00:50:35,920 --> 00:50:41,839
whatever that

00:50:36,480 --> 00:50:41,839
will be good to know

00:51:05,359 --> 00:51:09,359
um let's see is anybody uh attempting to

00:51:08,480 --> 00:51:12,480
use

00:51:09,359 --> 00:51:23,839
the c plus api directly in their

00:51:12,480 --> 00:51:23,839
native application

00:51:48,559 --> 00:51:52,960
all right well perhaps we've um used up

00:51:51,599 --> 00:51:54,720
all of everybody's questions

00:51:52,960 --> 00:51:57,040
um maybe next time we'll do some prizes

00:51:54,720 --> 00:52:00,800
for people that ask questions

00:51:57,040 --> 00:52:02,559
um uh if you have other questions

00:52:00,800 --> 00:52:04,240
later feel free to reach out to us on

00:52:02,559 --> 00:52:06,160
the slack channel is probably our

00:52:04,240 --> 00:52:08,160
preferred way of just sort of

00:52:06,160 --> 00:52:09,200
sort of q a um the mailing list works

00:52:08,160 --> 00:52:11,040
great as well

00:52:09,200 --> 00:52:12,240
um and that's on the slide here i

00:52:11,040 --> 00:52:14,319
believe that this

00:52:12,240 --> 00:52:16,000
uh the recording of this session will be

00:52:14,319 --> 00:52:20,319
available um

00:52:16,000 --> 00:52:22,960
sometime soon and we're really glad to

00:52:20,319 --> 00:52:22,960
talk with you all

00:52:29,520 --> 00:52:32,640
and thanks to everybody who contributed

00:52:31,040 --> 00:52:34,880
to the presentation

00:52:32,640 --> 00:52:35,760
and everybody who's uh working on the

00:52:34,880 --> 00:52:37,760
project um

00:52:35,760 --> 00:52:38,960
it's been really really great to have

00:52:37,760 --> 00:52:42,559
meet new people and

00:52:38,960 --> 00:52:44,839
and to make uh make progress on on this

00:52:42,559 --> 00:52:47,839
this project together so thank you

00:52:44,839 --> 00:52:47,839

YouTube URL: https://www.youtube.com/watch?v=PeePyVrGY-M


