Title: Open Shading Language Community Meeting
Publication date: 2020-08-24
Playlist: Open Source Days 2020
Description: 
	Open Shading Language Community Meeting
Speakers: Larry Gritz, Declan Russell, Zap Andersson, Adrien Herubel, Chris Kulla

For more information about the Academy Software Foundation go to: https://www.aswf.io/

Open Shading Language users and contributors will get a project update including the following topics:
* Project overview and brief introduction to OSL for new users.
* Adoption of OSL into the Academy Software Foundation, and what that means for the leadership and future of the project.
* Recap of recent changes, leading to release 1.10.
* Current status and roadmap, including update on major initiatives such as GPU support with OptiX and SIMD batch shading on CPU.
* Ways to participate and help steer the project.
* Q&A and community discussion
Captions: 
	00:00:00,160 --> 00:00:04,799
uh so hello welcome to the open shading

00:00:02,879 --> 00:00:08,000
language community meeting

00:00:04,799 --> 00:00:11,280
uh i'm larry gritz i'm on the tsc

00:00:08,000 --> 00:00:14,320
and i'm the chief architect of asl um

00:00:11,280 --> 00:00:16,480
so uh briefly today um

00:00:14,320 --> 00:00:18,720
we're gonna give a little bit of a an

00:00:16,480 --> 00:00:22,080
introduction to the project

00:00:18,720 --> 00:00:23,119
um we have a wonderful section from zach

00:00:22,080 --> 00:00:26,240
anderson

00:00:23,119 --> 00:00:29,840
um that is a video giving

00:00:26,240 --> 00:00:30,320
both a an overview of what osl is all

00:00:29,840 --> 00:00:32,320
about

00:00:30,320 --> 00:00:33,920
um sort of from a user perspective as

00:00:32,320 --> 00:00:37,680
well as a brilliant

00:00:33,920 --> 00:00:39,440
demo of what the implementation

00:00:37,680 --> 00:00:41,280
is looking like from a user experience

00:00:39,440 --> 00:00:42,399
perspective in 3d studio max which i

00:00:41,280 --> 00:00:44,079
think is really kind of

00:00:42,399 --> 00:00:45,920
best for class of these things at this

00:00:44,079 --> 00:00:48,719
point um i

00:00:45,920 --> 00:00:49,280
will return to me for a general project

00:00:48,719 --> 00:00:51,120
update

00:00:49,280 --> 00:00:53,120
on you know what our status is and what

00:00:51,120 --> 00:00:54,399
we've done over the last year since

00:00:53,120 --> 00:00:56,399
since the last of these meetings at

00:00:54,399 --> 00:00:59,520
siggraph

00:00:56,399 --> 00:01:02,399
we will then uh go back to um

00:00:59,520 --> 00:01:02,960
to declan and adrian to talk about the

00:01:02,399 --> 00:01:05,760
progress

00:01:02,960 --> 00:01:07,119
on osl running on the gpu and their

00:01:05,760 --> 00:01:10,479
experience integrating that

00:01:07,119 --> 00:01:12,720
into the arnold renderer um

00:01:10,479 --> 00:01:13,600
back to me to finish a little bit of uh

00:01:12,720 --> 00:01:16,000
future looking

00:01:13,600 --> 00:01:16,960
road map for the project and then

00:01:16,000 --> 00:01:20,000
hopefully we'll have

00:01:16,960 --> 00:01:23,040
lots of time left for uh general q

00:01:20,000 --> 00:01:27,680
a and uh chris culla who is the

00:01:23,040 --> 00:01:30,880
the chair of the tse long time

00:01:27,680 --> 00:01:34,400
developer on osl will moderate the

00:01:30,880 --> 00:01:36,000
q a for us so

00:01:34,400 --> 00:01:38,720
let me start with a little bit of a

00:01:36,000 --> 00:01:41,040
brief intro and a recap on

00:01:38,720 --> 00:01:43,280
the important details about the project

00:01:41,040 --> 00:01:45,439
that everybody here should know

00:01:43,280 --> 00:01:47,119
so just in case there are people who are

00:01:45,439 --> 00:01:48,159
not super familiar with it you're just

00:01:47,119 --> 00:01:49,600
passing through

00:01:48,159 --> 00:01:52,880
this is your first introduction to the

00:01:49,600 --> 00:01:55,840
project open shading language or osl

00:01:52,880 --> 00:01:57,840
is a domain specific language that is

00:01:55,840 --> 00:02:00,560
geared toward describing

00:01:57,840 --> 00:02:02,000
uh patterns and materials um that you

00:02:00,560 --> 00:02:04,079
typically find as a way to

00:02:02,000 --> 00:02:05,439
extend programmability to uh to

00:02:04,079 --> 00:02:07,119
renderers but they're not

00:02:05,439 --> 00:02:08,560
exclusively for that but that's that's

00:02:07,119 --> 00:02:12,000
the main target

00:02:08,560 --> 00:02:15,440
it's delivered as a software uh system

00:02:12,000 --> 00:02:16,000
that is um it's not an end user system

00:02:15,440 --> 00:02:18,080
that

00:02:16,000 --> 00:02:19,520
that users you know sort of directly

00:02:18,080 --> 00:02:21,760
interact with this map

00:02:19,520 --> 00:02:22,640
but rather as a library that different

00:02:21,760 --> 00:02:25,840
renderers

00:02:22,640 --> 00:02:28,400
embed in their core to handle the

00:02:25,840 --> 00:02:28,959
handler sharing it is an open source

00:02:28,400 --> 00:02:33,440
project

00:02:28,959 --> 00:02:35,920
has been for 11 years

00:02:33,440 --> 00:02:38,000
under the bsd license we have a pretty

00:02:35,920 --> 00:02:39,920
broad

00:02:38,000 --> 00:02:42,640
participation we've had over 50

00:02:39,920 --> 00:02:45,519
contributors from across the industry

00:02:42,640 --> 00:02:46,080
and and in case you haven't seen it on

00:02:45,519 --> 00:02:48,239
the

00:02:46,080 --> 00:02:49,599
here's the github link to go to the

00:02:48,239 --> 00:02:51,599
heart of the project page

00:02:49,599 --> 00:02:52,640
this will eventually be moving but even

00:02:51,599 --> 00:02:54,480
when it does

00:02:52,640 --> 00:02:56,640
um this link will always take you to the

00:02:54,480 --> 00:03:00,319
right place

00:02:56,640 --> 00:03:02,080
so the core design goals for osl

00:03:00,319 --> 00:03:04,159
is that we wanted to make a chain

00:03:02,080 --> 00:03:07,360
language that was really

00:03:04,159 --> 00:03:11,040
um sort of modern and geared toward

00:03:07,360 --> 00:03:13,920
today's uh and future physically based

00:03:11,040 --> 00:03:15,200
path tracers a lot of the other

00:03:13,920 --> 00:03:16,319
languages out there

00:03:15,200 --> 00:03:18,640
that have been used for shaving

00:03:16,319 --> 00:03:21,440
historically had really been designed

00:03:18,640 --> 00:03:22,560
around much older technology older

00:03:21,440 --> 00:03:25,120
rendering methods

00:03:22,560 --> 00:03:26,640
and had become a bit of a mismatch to

00:03:25,120 --> 00:03:30,319
where the rendering field

00:03:26,640 --> 00:03:32,319
had been going lately so in particular

00:03:30,319 --> 00:03:33,760
some of the things that we changed

00:03:32,319 --> 00:03:35,920
versus other languages

00:03:33,760 --> 00:03:37,440
are to make much more of an effort to

00:03:35,920 --> 00:03:38,480
have a view independent material

00:03:37,440 --> 00:03:41,360
description

00:03:38,480 --> 00:03:42,480
um we compute what we call closures

00:03:41,360 --> 00:03:44,640
rather than

00:03:42,480 --> 00:03:46,400
the final lit colors from the particular

00:03:44,640 --> 00:03:47,760
direction and that's what gives us a lot

00:03:46,400 --> 00:03:49,920
of the flexibility

00:03:47,760 --> 00:03:50,799
and we inside the shaders you know a

00:03:49,920 --> 00:03:53,280
cell shader

00:03:50,799 --> 00:03:54,640
you don't the shader code itself does

00:03:53,280 --> 00:03:57,840
not directly

00:03:54,640 --> 00:03:58,560
um loop over lights or cast rays inside

00:03:57,840 --> 00:03:59,840
the shader

00:03:58,560 --> 00:04:01,360
and those things have been pushed back

00:03:59,840 --> 00:04:02,080
to the renderer that's where it can

00:04:01,360 --> 00:04:05,680
really be done

00:04:02,080 --> 00:04:09,280
better we base this implementation

00:04:05,680 --> 00:04:11,760
on a lot of modern compiler technology

00:04:09,280 --> 00:04:12,799
with llvm at the heart of that and that

00:04:11,760 --> 00:04:15,519
means that

00:04:12,799 --> 00:04:16,639
we assembling these shaders on the fly

00:04:15,519 --> 00:04:19,280
at run time

00:04:16,639 --> 00:04:20,720
and jitting all the way down to direct

00:04:19,280 --> 00:04:23,840
machine code that can be

00:04:20,720 --> 00:04:25,520
executed very quickly down to the

00:04:23,840 --> 00:04:27,600
hardware level

00:04:25,520 --> 00:04:29,360
and yet we keep the language itself

00:04:27,600 --> 00:04:30,720
really free from any kind of hardware

00:04:29,360 --> 00:04:32,800
specific idioms so we're

00:04:30,720 --> 00:04:34,320
we're trying very hard not to tie it to

00:04:32,800 --> 00:04:35,840
any current hardware

00:04:34,320 --> 00:04:37,440
anything that might change we want these

00:04:35,840 --> 00:04:41,360
things to last

00:04:37,440 --> 00:04:44,240
um as well to not have

00:04:41,360 --> 00:04:45,040
very many artifacts that that would make

00:04:44,240 --> 00:04:46,800
you need to be

00:04:45,040 --> 00:04:48,320
especially aware of which renderer

00:04:46,800 --> 00:04:50,240
you're you're running on

00:04:48,320 --> 00:04:51,440
um there are there are some details uh

00:04:50,240 --> 00:04:53,360
of course they creep in

00:04:51,440 --> 00:04:56,000
but in general the language is meant to

00:04:53,360 --> 00:04:58,639
not reflect any particular renderer or

00:04:56,000 --> 00:05:00,160
or rendering algorithm uh and of course

00:04:58,639 --> 00:05:03,039
it's all open source

00:05:00,160 --> 00:05:04,160
um so a brief idea of the timeline for

00:05:03,039 --> 00:05:06,720
people who are new

00:05:04,160 --> 00:05:07,440
um at sony imageworks we were starting

00:05:06,720 --> 00:05:09,759
to look at this

00:05:07,440 --> 00:05:10,800
as a project um really really as an

00:05:09,759 --> 00:05:14,320
internal project

00:05:10,800 --> 00:05:16,080
um back around mid-2008

00:05:14,320 --> 00:05:18,800
by the time it was really starting to

00:05:16,080 --> 00:05:20,320
take shape as a company we were

00:05:18,800 --> 00:05:22,880
becoming very committed to open source

00:05:20,320 --> 00:05:25,440
projects and this became one of our

00:05:22,880 --> 00:05:27,280
early ones so we announced that it would

00:05:25,440 --> 00:05:28,960
be an open source project in the summer

00:05:27,280 --> 00:05:31,199
of 2009

00:05:28,960 --> 00:05:33,120
by the following winter the code was

00:05:31,199 --> 00:05:35,199
live i think we're on

00:05:33,120 --> 00:05:36,800
google code at the time and later

00:05:35,199 --> 00:05:39,919
switched to github

00:05:36,800 --> 00:05:43,039
the following summer in 2010 um chris

00:05:39,919 --> 00:05:45,919
myself cliff stein and alex conte

00:05:43,039 --> 00:05:47,840
uh gave a sgraph talk um really letting

00:05:45,919 --> 00:05:51,280
out a bunch of the details

00:05:47,840 --> 00:05:53,520
um and following that we were actually

00:05:51,280 --> 00:05:54,320
working on getting production ready and

00:05:53,520 --> 00:05:57,440
the first

00:05:54,320 --> 00:05:59,680
real movie that we saw released that was

00:05:57,440 --> 00:06:02,800
relying completely on osl

00:05:59,680 --> 00:06:03,600
was men in black three in 2012. so if

00:06:02,800 --> 00:06:06,880
that was our

00:06:03,600 --> 00:06:07,759
childhood the adolescence was a

00:06:06,880 --> 00:06:10,240
whirlwind

00:06:07,759 --> 00:06:10,960
of our little project getting picked up

00:06:10,240 --> 00:06:13,280
by

00:06:10,960 --> 00:06:14,160
more and more studios uh embedded in

00:06:13,280 --> 00:06:17,280
more and more

00:06:14,160 --> 00:06:21,280
commercial and other product products

00:06:17,280 --> 00:06:21,840
and in 2017 this work was awarded an

00:06:21,280 --> 00:06:24,639
academy

00:06:21,840 --> 00:06:25,840
scitec award to recognize you know how

00:06:24,639 --> 00:06:29,919
transformative

00:06:25,840 --> 00:06:32,960
it had been earlier this year

00:06:29,919 --> 00:06:35,360
we also applied for

00:06:32,960 --> 00:06:36,639
adoption as a academy software

00:06:35,360 --> 00:06:39,680
foundation project

00:06:36,639 --> 00:06:41,840
which we now are so where

00:06:39,680 --> 00:06:43,680
will you see this in the wild um you

00:06:41,840 --> 00:06:46,880
know the majority

00:06:43,680 --> 00:06:49,199
of the high-end film oriented

00:06:46,880 --> 00:06:51,360
commercial renderers and now have

00:06:49,199 --> 00:06:53,919
various levels of support

00:06:51,360 --> 00:06:54,639
including for many of them oso being the

00:06:53,919 --> 00:06:57,520
sole

00:06:54,639 --> 00:06:59,199
or primary method for programmable

00:06:57,520 --> 00:07:02,240
shading and patterns

00:06:59,199 --> 00:07:05,599
it's also the shading system in

00:07:02,240 --> 00:07:08,639
a variety of studio internal

00:07:05,599 --> 00:07:11,919
uh renders and in a growing number of

00:07:08,639 --> 00:07:11,919
open source projects as well

00:07:12,160 --> 00:07:18,639
and uh just the films that we

00:07:15,280 --> 00:07:19,520
super uh surely know about um we're kind

00:07:18,639 --> 00:07:22,720
of well over

00:07:19,520 --> 00:07:26,000
120 or so films that are osl based

00:07:22,720 --> 00:07:28,960
um but um the actual number is probably

00:07:26,000 --> 00:07:30,240
uh vastly greater than that because osl

00:07:28,960 --> 00:07:32,479
is

00:07:30,240 --> 00:07:34,160
embedded in so many renderers um people

00:07:32,479 --> 00:07:35,680
just use it as a matter of course

00:07:34,160 --> 00:07:37,360
and it's actually quite hard for us to

00:07:35,680 --> 00:07:39,280
keep track of all the projects they use

00:07:37,360 --> 00:07:42,479
it on

00:07:39,280 --> 00:07:46,000
so with that i would like to play

00:07:42,479 --> 00:07:49,120
the video from zap uh that goes much

00:07:46,000 --> 00:07:52,400
more um eloquently than me uh

00:07:49,120 --> 00:07:54,720
into uh user perspective um and really

00:07:52,400 --> 00:07:59,599
shows off i think what oso can be

00:07:54,720 --> 00:08:02,319
for a more comprehensive system

00:07:59,599 --> 00:08:03,599
hello i'm zap anderson from autodesk

00:08:02,319 --> 00:08:05,759
today i'm going to do a little

00:08:03,599 --> 00:08:08,400
introduction to osl

00:08:05,759 --> 00:08:09,360
and i'm going to exemplify that with the

00:08:08,400 --> 00:08:13,599
implementation

00:08:09,360 --> 00:08:15,759
in 3d studio max so what is osl

00:08:13,599 --> 00:08:17,360
well it stands obviously from open

00:08:15,759 --> 00:08:20,400
shading language

00:08:17,360 --> 00:08:22,479
and larry made it of course but what's a

00:08:20,400 --> 00:08:23,280
shading language well it's basically a

00:08:22,479 --> 00:08:25,280
way to make

00:08:23,280 --> 00:08:27,520
procedural fun things happen with your

00:08:25,280 --> 00:08:28,720
objects without relying on texture so

00:08:27,520 --> 00:08:30,879
what you're seeing here

00:08:28,720 --> 00:08:32,560
the steampunk teapot or the knotted wood

00:08:30,879 --> 00:08:35,200
these are not bitmap textures

00:08:32,560 --> 00:08:35,680
these are pieces of code that generate

00:08:35,200 --> 00:08:38,080
this

00:08:35,680 --> 00:08:39,279
appearance that's what you can do with

00:08:38,080 --> 00:08:41,839
the shader

00:08:39,279 --> 00:08:43,680
now in classic shader right here you

00:08:41,839 --> 00:08:45,600
basically have to write one for every

00:08:43,680 --> 00:08:47,680
render there were lots of different

00:08:45,600 --> 00:08:49,519
kinds so for instance you had to write

00:08:47,680 --> 00:08:50,080
something in c plus plus running through

00:08:49,519 --> 00:08:53,279
a

00:08:50,080 --> 00:08:55,040
slow c compiler and maybe egypt

00:08:53,279 --> 00:08:57,440
dll that you can only load when the

00:08:55,040 --> 00:08:59,839
application starts having your iteration

00:08:57,440 --> 00:09:02,560
cycle be really slow

00:08:59,839 --> 00:09:03,279
or if you wrote something in hlsl you

00:09:02,560 --> 00:09:05,200
would take a

00:09:03,279 --> 00:09:06,399
different compiler and a different

00:09:05,200 --> 00:09:08,399
pipeline

00:09:06,399 --> 00:09:10,240
and maybe for some other render it was

00:09:08,399 --> 00:09:12,720
still c plus plus but it was

00:09:10,240 --> 00:09:15,200
different maybe different compiler other

00:09:12,720 --> 00:09:17,120
dll incompatible dlls completely

00:09:15,200 --> 00:09:18,720
different syntax of the shader

00:09:17,120 --> 00:09:20,560
it was kind of a mess and how this

00:09:18,720 --> 00:09:22,080
applies to max is that

00:09:20,560 --> 00:09:24,959
you see on the top line that's what you

00:09:22,080 --> 00:09:27,279
do for the shaders for the max c

00:09:24,959 --> 00:09:28,480
plus api and the renders such as the

00:09:27,279 --> 00:09:30,399
built-in scan line

00:09:28,480 --> 00:09:31,760
or other renders built on that api like

00:09:30,399 --> 00:09:34,320
v-ray or corona

00:09:31,760 --> 00:09:36,080
will be served by that approach the

00:09:34,320 --> 00:09:38,640
middle line is what you would need to do

00:09:36,080 --> 00:09:39,839
for the nitrous viewport which runs hsl

00:09:38,640 --> 00:09:40,640
and the bottom line is what you would

00:09:39,839 --> 00:09:42,560
have to do for

00:09:40,640 --> 00:09:45,120
renders that were external to macs like

00:09:42,560 --> 00:09:46,640
arnold or mental ray or whatever

00:09:45,120 --> 00:09:48,880
so basically you have to write

00:09:46,640 --> 00:09:51,360
everything four or five times

00:09:48,880 --> 00:09:52,880
but with osl you write your shader once

00:09:51,360 --> 00:09:53,680
run it through the really quick osl

00:09:52,880 --> 00:09:55,600
compiler

00:09:53,680 --> 00:09:57,440
and it turns into a thing called oso

00:09:55,600 --> 00:09:58,880
which can be loaded at runtime now

00:09:57,440 --> 00:10:01,440
waiting for an application

00:09:58,880 --> 00:10:03,760
a bunch of osls are plugged together in

00:10:01,440 --> 00:10:04,480
the shading group and sent to llvm which

00:10:03,760 --> 00:10:06,720
performs

00:10:04,480 --> 00:10:08,320
magic and turns this into running code

00:10:06,720 --> 00:10:10,000
and sends to the render

00:10:08,320 --> 00:10:11,360
but you can also take the osos

00:10:10,000 --> 00:10:12,320
themselves and information from the

00:10:11,360 --> 00:10:14,160
shading group and

00:10:12,320 --> 00:10:16,880
transcode them into some other shading

00:10:14,160 --> 00:10:18,959
language like for instance hlsl

00:10:16,880 --> 00:10:20,880
or if you have a third-party renderer

00:10:18,959 --> 00:10:22,720
plug-in render to your application

00:10:20,880 --> 00:10:25,519
that you don't have control over but it

00:10:22,720 --> 00:10:28,000
accepts osl well just send it the osl

00:10:25,519 --> 00:10:29,040
the renderer does whatever it wants and

00:10:28,000 --> 00:10:32,000
then it works

00:10:29,040 --> 00:10:32,480
so in the 3ds max context the top line

00:10:32,000 --> 00:10:34,720
again

00:10:32,480 --> 00:10:36,000
covers the c plus plus shaders the scan

00:10:34,720 --> 00:10:37,519
library corona

00:10:36,000 --> 00:10:39,519
the middle line that's the viewport and

00:10:37,519 --> 00:10:41,920
the bottom line does external render

00:10:39,519 --> 00:10:43,839
surrenders that translate through scenes

00:10:41,920 --> 00:10:46,399
and not using the max api like for

00:10:43,839 --> 00:10:46,959
instance arnold or maybe v-ray in gpu

00:10:46,399 --> 00:10:49,839
mode

00:10:46,959 --> 00:10:51,920
or many other examples so one funny

00:10:49,839 --> 00:10:53,920
thing with oslo in spite of being called

00:10:51,920 --> 00:10:54,959
a shading language it doesn't actually

00:10:53,920 --> 00:10:56,480
shade anything

00:10:54,959 --> 00:10:58,240
normal shading language tends to look

00:10:56,480 --> 00:11:00,320
like on the left there's loops over

00:10:58,240 --> 00:11:02,160
lights there's a bunch of ray tracing

00:11:00,320 --> 00:11:02,640
going on and all this kind of stuff to

00:11:02,160 --> 00:11:06,560
make

00:11:02,640 --> 00:11:06,959
a material but in osl you use something

00:11:06,560 --> 00:11:09,200
known

00:11:06,959 --> 00:11:10,720
as closures you basically tell the

00:11:09,200 --> 00:11:12,079
renderer i wouldn't want this much

00:11:10,720 --> 00:11:14,399
diffuse and this much

00:11:12,079 --> 00:11:15,839
fong or whatever and the renderer

00:11:14,399 --> 00:11:18,640
figures this out

00:11:15,839 --> 00:11:19,120
this has a giant benefit it moves the

00:11:18,640 --> 00:11:22,720
actual

00:11:19,120 --> 00:11:25,040
algorithm into the rendering side so if

00:11:22,720 --> 00:11:27,279
it's a vr engine for instance it can

00:11:25,040 --> 00:11:28,800
fake glossy reflections with blurry

00:11:27,279 --> 00:11:31,279
environments

00:11:28,800 --> 00:11:34,000
it has one giant drawback though the

00:11:31,279 --> 00:11:36,880
closures are not standardized

00:11:34,000 --> 00:11:38,800
so if you look at a classic osl shade

00:11:36,880 --> 00:11:40,560
tree here which contains a bunch of

00:11:38,800 --> 00:11:42,399
texturing shaders which send quite

00:11:40,560 --> 00:11:44,000
normal data back and forth like points

00:11:42,399 --> 00:11:46,000
and colors or whatever

00:11:44,000 --> 00:11:48,160
they somewhere go into a surface shader

00:11:46,000 --> 00:11:51,040
and what comes out of the surface shader

00:11:48,160 --> 00:11:52,000
is a closure and that goes to the

00:11:51,040 --> 00:11:54,320
renderer

00:11:52,000 --> 00:11:55,040
the way we solve this in max is that we

00:11:54,320 --> 00:11:57,440
actually

00:11:55,040 --> 00:11:59,279
intercede before the surface shader we

00:11:57,440 --> 00:12:00,160
take colors and this kind of stuff from

00:11:59,279 --> 00:12:02,160
osl

00:12:00,160 --> 00:12:03,200
but the surface shader is based on

00:12:02,160 --> 00:12:04,880
native code

00:12:03,200 --> 00:12:06,720
so it's basically the autodesk standard

00:12:04,880 --> 00:12:09,040
surface or as it's known in max the

00:12:06,720 --> 00:12:12,800
physical material that the render runs

00:12:09,040 --> 00:12:16,160
natively so we don't support closures

00:12:12,800 --> 00:12:21,040
for now at least in macs so osl itself

00:12:16,160 --> 00:12:22,639
is only used for textures not materials

00:12:21,040 --> 00:12:24,560
the benefit here is of course you have

00:12:22,639 --> 00:12:26,399
one shader and it runs everywhere real

00:12:24,560 --> 00:12:27,760
time in the viewport offline on your

00:12:26,399 --> 00:12:30,079
render farm wherever

00:12:27,760 --> 00:12:30,800
and we can switch renderers because we

00:12:30,079 --> 00:12:33,360
do the

00:12:30,800 --> 00:12:35,279
surface shader bit natively we can

00:12:33,360 --> 00:12:37,519
switch and get the same appearance

00:12:35,279 --> 00:12:39,680
we don't care if arnold have different

00:12:37,519 --> 00:12:40,320
closers than v-ray because we don't use

00:12:39,680 --> 00:12:42,000
them

00:12:40,320 --> 00:12:43,600
of course this all gives a very quick

00:12:42,000 --> 00:12:45,920
development time for shaders

00:12:43,600 --> 00:12:48,560
and they're easy to deploy it's just a

00:12:45,920 --> 00:12:50,720
text file

00:12:48,560 --> 00:12:52,639
so what do we have in max well max has a

00:12:50,720 --> 00:12:54,639
built-in osl editor

00:12:52,639 --> 00:12:56,320
syntax highlighting all sorts of things

00:12:54,639 --> 00:12:59,040
you just hit the compile button

00:12:56,320 --> 00:13:00,880
and it immediately happens since we have

00:12:59,040 --> 00:13:02,880
the automatic transcoding for the

00:13:00,880 --> 00:13:04,079
viewport this actually happens straight

00:13:02,880 --> 00:13:06,240
in the viewport

00:13:04,079 --> 00:13:07,360
interactively you don't even need to hit

00:13:06,240 --> 00:13:10,480
the render button

00:13:07,360 --> 00:13:13,120
to develop osl shaders in max also

00:13:10,480 --> 00:13:14,480
we embed the osel source in the scene so

00:13:13,120 --> 00:13:16,480
when i send the file to you

00:13:14,480 --> 00:13:18,000
or to a render farm you would never run

00:13:16,480 --> 00:13:18,800
into the problem of oh i'm missing

00:13:18,000 --> 00:13:21,519
shader x

00:13:18,800 --> 00:13:23,519
it's always in there we also build ui

00:13:21,519 --> 00:13:26,639
automatically for the shaders

00:13:23,519 --> 00:13:29,920
but we also added the option to build a

00:13:26,639 --> 00:13:32,320
qt dot ui file you use qt designer

00:13:29,920 --> 00:13:34,560
and build the user interface and then

00:13:32,320 --> 00:13:38,320
that user interface can simply be used

00:13:34,560 --> 00:13:39,279
on the shader we also support dynamic ui

00:13:38,320 --> 00:13:41,440
in some cases

00:13:39,279 --> 00:13:43,120
so you can have these action buttons

00:13:41,440 --> 00:13:46,240
that run scripts that actually

00:13:43,120 --> 00:13:47,920
modifies the shaders at runtime and for

00:13:46,240 --> 00:13:49,600
instance in this case adds removes

00:13:47,920 --> 00:13:52,639
inputs to a gradient shader

00:13:49,600 --> 00:13:53,519
pretty clever actually the entire

00:13:52,639 --> 00:13:56,160
prototype

00:13:53,519 --> 00:13:58,399
for the material x implementation is max

00:13:56,160 --> 00:14:02,000
that you will see in the material x buff

00:13:58,399 --> 00:14:04,000
spoiler is completely done via osl so

00:14:02,000 --> 00:14:08,320
3ds max 2021

00:14:04,000 --> 00:14:10,639
update 2 ships with 135

00:14:08,320 --> 00:14:11,519
osl shaders i'm going to show you a

00:14:10,639 --> 00:14:14,560
couple of those

00:14:11,519 --> 00:14:16,480
real quick now for instance we have this

00:14:14,560 --> 00:14:18,399
environment mapping shader that allows

00:14:16,480 --> 00:14:19,600
ground projections it flattens out the

00:14:18,399 --> 00:14:21,519
bottom of the environment

00:14:19,600 --> 00:14:23,519
it looks like objects are standing

00:14:21,519 --> 00:14:27,839
properly on the ground

00:14:23,519 --> 00:14:30,880
quite nice we also have this hdri light

00:14:27,839 --> 00:14:32,800
designer where you can basically add in

00:14:30,880 --> 00:14:34,240
images of lights and treat them as light

00:14:32,800 --> 00:14:35,120
cards they basically add to the

00:14:34,240 --> 00:14:37,199
environment

00:14:35,120 --> 00:14:39,519
and we can even interactively drag

00:14:37,199 --> 00:14:42,639
reflections of the light on the surface

00:14:39,519 --> 00:14:43,040
very nice little feature we have our

00:14:42,639 --> 00:14:46,000
cool

00:14:43,040 --> 00:14:49,600
texture look up randomizer which removes

00:14:46,000 --> 00:14:52,160
all repetitiveness from your textures

00:14:49,600 --> 00:14:54,079
so this is also very cool so you can use

00:14:52,160 --> 00:14:57,680
like a single square of gravel and

00:14:54,079 --> 00:15:00,880
fill a whole gravel road

00:14:57,680 --> 00:15:03,519
or whatever we have the uber noise

00:15:00,880 --> 00:15:04,399
which basically is all the noises at the

00:15:03,519 --> 00:15:07,760
same time

00:15:04,399 --> 00:15:10,720
much fun and we

00:15:07,760 --> 00:15:12,399
do texture protection you can project

00:15:10,720 --> 00:15:13,519
and of course it works interactively in

00:15:12,399 --> 00:15:17,279
the viewport

00:15:13,519 --> 00:15:21,199
did i mention that before and of course

00:15:17,279 --> 00:15:23,440
me being me there's a sushi shader

00:15:21,199 --> 00:15:25,199
so you want to play with any of this

00:15:23,440 --> 00:15:27,040
well you can check out the trial version

00:15:25,199 --> 00:15:29,279
of max of course but you can also join

00:15:27,040 --> 00:15:31,199
the beta that's where all the fun is

00:15:29,279 --> 00:15:34,399
you can also check on the max osel

00:15:31,199 --> 00:15:37,839
github all our shaders are apache 2.0

00:15:34,399 --> 00:15:40,480
and the osl shaders facebook group

00:15:37,839 --> 00:15:41,360
follow me on twitter if you want and of

00:15:40,480 --> 00:15:43,440
course

00:15:41,360 --> 00:15:44,480
i didn't put any links in because if you

00:15:43,440 --> 00:15:46,880
literally google

00:15:44,480 --> 00:15:47,600
any of those things the first hit is the

00:15:46,880 --> 00:15:50,399
right link

00:15:47,600 --> 00:15:52,639
so let's do that that's all from me zap

00:15:50,399 --> 00:15:52,639
out

00:15:52,839 --> 00:15:55,839
bye

00:15:58,240 --> 00:16:04,720
great uh so with with that uh i'll give

00:16:01,360 --> 00:16:06,160
a bit of a project update of uh the most

00:16:04,720 --> 00:16:09,519
important things that have happened

00:16:06,160 --> 00:16:11,759
uh in our world in the uh in the last

00:16:09,519 --> 00:16:14,800
year for osl

00:16:11,759 --> 00:16:17,279
so a big one for us

00:16:14,800 --> 00:16:19,680
is the transfer of the project to the

00:16:17,279 --> 00:16:22,079
academy software foundation

00:16:19,680 --> 00:16:24,160
so very close to the beginning of the

00:16:22,079 --> 00:16:26,399
year we submitted an application

00:16:24,160 --> 00:16:27,199
um this was not a project that was

00:16:26,399 --> 00:16:30,800
unknown

00:16:27,199 --> 00:16:34,079
uh to the foundation uh and uh

00:16:30,800 --> 00:16:37,600
and it was uh unanimously accepted

00:16:34,079 --> 00:16:39,600
with much fanfare um in short order

00:16:37,600 --> 00:16:41,120
uh i think this was one of the projects

00:16:39,600 --> 00:16:43,839
that many people would

00:16:41,120 --> 00:16:45,040
always wish would come on board but what

00:16:43,839 --> 00:16:48,399
does that mean for

00:16:45,040 --> 00:16:50,880
us as a project and a community

00:16:48,399 --> 00:16:51,839
mostly uh extremely good things i think

00:16:50,880 --> 00:16:55,680
it will really

00:16:51,839 --> 00:16:58,240
turbo charge our efforts um so

00:16:55,680 --> 00:16:58,959
the first thing is um you know rather

00:16:58,240 --> 00:17:03,199
than being

00:16:58,959 --> 00:17:06,000
a an ad hoc organization

00:17:03,199 --> 00:17:06,959
where the project was sponsored by one

00:17:06,000 --> 00:17:09,839
company

00:17:06,959 --> 00:17:11,439
even though we always took contributions

00:17:09,839 --> 00:17:14,079
from anyone

00:17:11,439 --> 00:17:14,079
you know really

00:17:14,480 --> 00:17:17,679
part of the purpose of going into the

00:17:16,799 --> 00:17:20,799
foundation

00:17:17,679 --> 00:17:21,760
is to sort of dispel this idea that it's

00:17:20,799 --> 00:17:24,880
one

00:17:21,760 --> 00:17:26,160
it's one company's project and everyone

00:17:24,880 --> 00:17:28,480
else is just the user

00:17:26,160 --> 00:17:30,559
we really are very committed to making

00:17:28,480 --> 00:17:32,720
this um

00:17:30,559 --> 00:17:33,679
an industry project lots of people

00:17:32,720 --> 00:17:36,000
depend on this

00:17:33,679 --> 00:17:37,760
there are many stakeholders and they

00:17:36,000 --> 00:17:40,960
really should all have a hand

00:17:37,760 --> 00:17:43,520
in steering it and contributing to it

00:17:40,960 --> 00:17:46,480
and feeling a joint ownership

00:17:43,520 --> 00:17:48,240
so that it's not dependent on on just me

00:17:46,480 --> 00:17:49,039
or just the company that i work for in

00:17:48,240 --> 00:17:52,320
any way

00:17:49,039 --> 00:17:55,120
um so we now have a a formal charter

00:17:52,320 --> 00:17:56,080
and a set of governance rules um you can

00:17:55,120 --> 00:17:57,840
actually

00:17:56,080 --> 00:18:00,000
the documents that define both of those

00:17:57,840 --> 00:18:03,679
are just in the repo they're pretty easy

00:18:00,000 --> 00:18:06,000
to find and we have a technical security

00:18:03,679 --> 00:18:09,600
committee

00:18:06,000 --> 00:18:13,120
the tsc as we call it consists

00:18:09,600 --> 00:18:16,400
of a number of representatives from many

00:18:13,120 --> 00:18:20,480
studios and and uh software vendors that

00:18:16,400 --> 00:18:23,679
uh were the big um the big stakeholders

00:18:20,480 --> 00:18:24,080
um and uh and we meet uh every second

00:18:23,679 --> 00:18:26,559
week

00:18:24,080 --> 00:18:29,760
uh with the zoom call um the meetings

00:18:26,559 --> 00:18:32,880
are open they're on the aswf calendar

00:18:29,760 --> 00:18:34,880
uh anyone is welcome to join uh whether

00:18:32,880 --> 00:18:36,640
it's just as an observer or a

00:18:34,880 --> 00:18:39,520
participant um

00:18:36,640 --> 00:18:41,200
uh all are welcome here and there is

00:18:39,520 --> 00:18:44,080
there's not really any magic to

00:18:41,200 --> 00:18:45,200
who's on on the tse either um you know

00:18:44,080 --> 00:18:48,000
basically if

00:18:45,200 --> 00:18:50,240
if you're a major contributor uh with

00:18:48,000 --> 00:18:52,960
the track record or your company

00:18:50,240 --> 00:18:54,720
um you know is a major user or

00:18:52,960 --> 00:18:56,320
integrator of this technology and you

00:18:54,720 --> 00:18:56,799
feel like you have an important stake in

00:18:56,320 --> 00:18:58,960
it

00:18:56,799 --> 00:19:02,320
um that's that's basically the path to

00:18:58,960 --> 00:19:02,320
to getting representation here

00:19:02,559 --> 00:19:06,720
so in in addition to the tsc and sort of

00:19:05,760 --> 00:19:09,280
formal

00:19:06,720 --> 00:19:10,400
governance documents we've also switched

00:19:09,280 --> 00:19:14,720
our mail list

00:19:10,400 --> 00:19:17,919
away from an old google group and into

00:19:14,720 --> 00:19:20,160
an aswf managed mail list

00:19:17,919 --> 00:19:22,320
we will have a new set of contributor

00:19:20,160 --> 00:19:24,640
license agreements that will

00:19:22,320 --> 00:19:26,240
get voted on and take effect uh shortly

00:19:24,640 --> 00:19:27,919
so even if you've been a contributor in

00:19:26,240 --> 00:19:29,120
the past you might want to sign a new

00:19:27,919 --> 00:19:31,919
cla when that is done

00:19:29,120 --> 00:19:33,840
uh coming up soon um it is very similar

00:19:31,919 --> 00:19:36,160
to the one we used before it's based

00:19:33,840 --> 00:19:37,120
on apache two there's some really minor

00:19:36,160 --> 00:19:40,880
differences

00:19:37,120 --> 00:19:43,760
um but no no new uh food groups here

00:19:40,880 --> 00:19:44,080
um the the cla that we used when it was

00:19:43,760 --> 00:19:46,880
in

00:19:44,080 --> 00:19:47,600
an image works project uh is is very

00:19:46,880 --> 00:19:50,080
close to

00:19:47,600 --> 00:19:52,960
identical so hopefully this should just

00:19:50,080 --> 00:19:56,080
sail through your organizations

00:19:52,960 --> 00:19:59,280
after that is done and a couple of other

00:19:56,080 --> 00:20:01,760
you know remaining paperwork issues

00:19:59,280 --> 00:20:04,400
we will move the project from the

00:20:01,760 --> 00:20:04,400
imageworks

00:20:04,799 --> 00:20:08,799
github accounts to the academy software

00:20:07,440 --> 00:20:11,039
foundation github account

00:20:08,799 --> 00:20:12,320
uh the old one will be direct so you

00:20:11,039 --> 00:20:14,080
know don't worry about anything getting

00:20:12,320 --> 00:20:16,640
lost along the way

00:20:14,080 --> 00:20:19,039
but we will officially move it to be a

00:20:16,640 --> 00:20:22,240
direct sibling of the other aswf

00:20:19,039 --> 00:20:25,679
uh projects um and we are

00:20:22,240 --> 00:20:27,440
also um you know officially

00:20:25,679 --> 00:20:29,440
we're in what they call an incubating

00:20:27,440 --> 00:20:31,520
project and what we really what we

00:20:29,440 --> 00:20:35,919
really want to do is move to

00:20:31,520 --> 00:20:38,640
uh graduation to be a you know a fully

00:20:35,919 --> 00:20:39,280
you know adult project under the aswf

00:20:38,640 --> 00:20:43,600
and a very

00:20:39,280 --> 00:20:46,400
important uh part of that is going to be

00:20:43,600 --> 00:20:47,919
um community diversity we talk about

00:20:46,400 --> 00:20:49,919
diversity a lot

00:20:47,919 --> 00:20:51,520
but in this context i'm actually not

00:20:49,919 --> 00:20:54,320
talking about

00:20:51,520 --> 00:20:55,120
demographic diversity which of course we

00:20:54,320 --> 00:20:58,240
also

00:20:55,120 --> 00:21:01,600
are very committed to but in this case

00:20:58,240 --> 00:21:04,880
this is the um this is diversity of

00:21:01,600 --> 00:21:07,360
participants as being um

00:21:04,880 --> 00:21:08,640
multiple people lots of uh people who

00:21:07,360 --> 00:21:11,520
know how things work

00:21:08,640 --> 00:21:11,840
um representatives of many companies so

00:21:11,520 --> 00:21:14,159
this

00:21:11,840 --> 00:21:16,000
is the this is the risk mitigation um

00:21:14,159 --> 00:21:18,559
that is part of the purpose of

00:21:16,000 --> 00:21:19,440
putting the project into this

00:21:18,559 --> 00:21:22,159
organization

00:21:19,440 --> 00:21:23,200
it is making sure that um if something

00:21:22,159 --> 00:21:25,440
happens to

00:21:23,200 --> 00:21:26,480
an existing one or a couple of key

00:21:25,440 --> 00:21:29,039
developers

00:21:26,480 --> 00:21:30,960
or uh if they're distracted by things

00:21:29,039 --> 00:21:32,480
that work or if one company that's

00:21:30,960 --> 00:21:34,080
running a project

00:21:32,480 --> 00:21:36,400
doesn't have the resources or the

00:21:34,080 --> 00:21:37,679
interest it is not putting

00:21:36,400 --> 00:21:39,520
everyone else in the industry who's

00:21:37,679 --> 00:21:42,559
dependent on the project

00:21:39,520 --> 00:21:44,400
in some kind of very risky position

00:21:42,559 --> 00:21:46,159
right it's it's spreading the

00:21:44,400 --> 00:21:50,000
responsibility and the knowledge

00:21:46,159 --> 00:21:53,039
and the contributions um across

00:21:50,000 --> 00:21:54,000
the stakeholders in a more even way so

00:21:53,039 --> 00:21:57,200
that

00:21:54,000 --> 00:21:58,320
there's very low risk um from any one

00:21:57,200 --> 00:22:01,679
person or any

00:21:58,320 --> 00:22:03,440
one company being able to jeopardize the

00:22:01,679 --> 00:22:04,720
project and i don't mean through any

00:22:03,440 --> 00:22:06,400
malicious way i just mean

00:22:04,720 --> 00:22:07,840
you know people's attentions and

00:22:06,400 --> 00:22:09,760
abilities to contribute uh

00:22:07,840 --> 00:22:13,280
wax and win and we don't want that to

00:22:09,760 --> 00:22:16,559
hold up on all of the many uses

00:22:13,280 --> 00:22:21,200
another uh big thing that

00:22:16,559 --> 00:22:24,480
is going on in osl is we have finally

00:22:21,200 --> 00:22:26,640
are in the middle of a 1.11 release

00:22:24,480 --> 00:22:27,520
this is long overdue we apologize for

00:22:26,640 --> 00:22:29,440
that uh

00:22:27,520 --> 00:22:31,280
we have not had a although we do um

00:22:29,440 --> 00:22:33,200
minor you know sort of patch

00:22:31,280 --> 00:22:34,559
on you know fixes minor enhancements

00:22:33,200 --> 00:22:37,520
sort of spiral releases

00:22:34,559 --> 00:22:39,280
approximately monthly um the the big

00:22:37,520 --> 00:22:40,000
changes that introduce new features and

00:22:39,280 --> 00:22:42,559
can potentially

00:22:40,000 --> 00:22:43,679
break compatibility um we only do every

00:22:42,559 --> 00:22:45,440
once in a while and

00:22:43,679 --> 00:22:46,720
unfortunately we have not had one of

00:22:45,440 --> 00:22:50,720
those um

00:22:46,720 --> 00:22:53,760
since the end of 2018 i'm sorry to say

00:22:50,720 --> 00:22:55,440
um which means that a lot of great

00:22:53,760 --> 00:22:56,880
features and improvements that have been

00:22:55,440 --> 00:22:59,280
locked up

00:22:56,880 --> 00:23:01,600
in the development branch have not made

00:22:59,280 --> 00:23:05,039
it into a supported official release

00:23:01,600 --> 00:23:05,440
for quite some time we've been in beta

00:23:05,039 --> 00:23:08,320
now

00:23:05,440 --> 00:23:09,600
since the beginning of the month i just

00:23:08,320 --> 00:23:12,640
tagged a

00:23:09,600 --> 00:23:14,559
release candidate last night i hope that

00:23:12,640 --> 00:23:15,039
that means that there won't be any other

00:23:14,559 --> 00:23:18,960
changes

00:23:15,039 --> 00:23:20,320
other than critical bug fixes

00:23:18,960 --> 00:23:22,559
between now and the beginning of

00:23:20,320 --> 00:23:24,720
september when we'll call it

00:23:22,559 --> 00:23:26,640
the official release then that will be

00:23:24,720 --> 00:23:29,280
the supported release branch

00:23:26,640 --> 00:23:30,159
um and the older one 1.10 and older will

00:23:29,280 --> 00:23:32,559
be

00:23:30,159 --> 00:23:33,440
obsolete and will really only be patched

00:23:32,559 --> 00:23:36,799
if there

00:23:33,440 --> 00:23:38,640
are emergencies meanwhile

00:23:36,799 --> 00:23:41,039
in the main development branch that is

00:23:38,640 --> 00:23:42,080
where um all the big changes continue to

00:23:41,039 --> 00:23:45,039
happen

00:23:42,080 --> 00:23:46,799
so highlights of this release from the

00:23:45,039 --> 00:23:50,080
language standpoint someone who

00:23:46,799 --> 00:23:51,440
is writing osl shader source code

00:23:50,080 --> 00:23:54,000
you know probably the biggest

00:23:51,440 --> 00:23:56,480
convenience factor that that you'll see

00:23:54,000 --> 00:23:57,840
is that we've uh finally allowed our

00:23:56,480 --> 00:23:59,840
components of

00:23:57,840 --> 00:24:01,840
colors and vectors and points and so on

00:23:59,840 --> 00:24:05,440
to be addressed by the field names like

00:24:01,840 --> 00:24:06,720
dot x dot y dot z x.y.z.r.g.b and so on

00:24:05,440 --> 00:24:08,640
um you used to have to use the

00:24:06,720 --> 00:24:10,080
subscripting notation which still works

00:24:08,640 --> 00:24:11,600
but a lot of people like this so we

00:24:10,080 --> 00:24:14,640
added it

00:24:11,600 --> 00:24:18,080
there have also been a bunch of oslc

00:24:14,640 --> 00:24:20,159
compilers improvements uh

00:24:18,080 --> 00:24:21,760
in the handling of polymorphic functions

00:24:20,159 --> 00:24:23,279
uh polymorphic means

00:24:21,760 --> 00:24:24,480
there are multiple functions with the

00:24:23,279 --> 00:24:25,279
same name but they take different

00:24:24,480 --> 00:24:28,080
arguments

00:24:25,279 --> 00:24:28,880
and sometimes you can get yourself into

00:24:28,080 --> 00:24:31,279
cases where

00:24:28,880 --> 00:24:33,120
the arguments you try to pass could

00:24:31,279 --> 00:24:35,200
potentially

00:24:33,120 --> 00:24:37,360
match more than one function signature

00:24:35,200 --> 00:24:40,640
um or have ambiguity

00:24:37,360 --> 00:24:44,159
and so there was a big overhaul where we

00:24:40,640 --> 00:24:44,480
greatly improved the consistency of how

00:24:44,159 --> 00:24:46,320
we

00:24:44,480 --> 00:24:48,960
resolve which of the polymorphic

00:24:46,320 --> 00:24:51,600
functions it chooses for you

00:24:48,960 --> 00:24:52,799
and greatly improves the error messages

00:24:51,600 --> 00:24:54,640
that you get if you

00:24:52,799 --> 00:24:57,520
do something that's ambiguous and it's

00:24:54,640 --> 00:24:57,520
not sure what to do

00:24:57,600 --> 00:25:00,960
a few important dependencies have

00:24:59,360 --> 00:25:02,559
changed

00:25:00,960 --> 00:25:04,159
i'm only talking about changes in

00:25:02,559 --> 00:25:06,720
minimum dependencies here

00:25:04,159 --> 00:25:08,080
of course as compilers and other

00:25:06,720 --> 00:25:10,559
libraries

00:25:08,080 --> 00:25:11,760
that we depend on advance we're always

00:25:10,559 --> 00:25:14,000
making the changes

00:25:11,760 --> 00:25:15,120
to support the newer versions of those

00:25:14,000 --> 00:25:15,679
that's not what i'm talking about at the

00:25:15,120 --> 00:25:17,120
moment

00:25:15,679 --> 00:25:19,120
this is about things that we're dropping

00:25:17,120 --> 00:25:21,360
support for so right now

00:25:19,120 --> 00:25:22,480
um one of the biggest baddest

00:25:21,360 --> 00:25:26,159
dependencies we have

00:25:22,480 --> 00:25:28,880
is oodm and so for 1.11

00:25:26,159 --> 00:25:29,520
the lvm versions we're supporting are

00:25:28,880 --> 00:25:31,440
opm

00:25:29,520 --> 00:25:33,520
seven through eleven so we've we've

00:25:31,440 --> 00:25:36,000
added several new versions uh but we've

00:25:33,520 --> 00:25:36,640
also dropped the old lvm four five and

00:25:36,000 --> 00:25:39,440
six

00:25:36,640 --> 00:25:40,080
and primarily that's because they are

00:25:39,440 --> 00:25:43,279
lacking

00:25:40,080 --> 00:25:44,159
um some support for features that we are

00:25:43,279 --> 00:25:46,400
needed

00:25:44,159 --> 00:25:47,440
needing for some of our forward moving

00:25:46,400 --> 00:25:49,679
work

00:25:47,440 --> 00:25:50,799
um also open image i o is a major

00:25:49,679 --> 00:25:52,480
dependency

00:25:50,799 --> 00:25:54,080
um yeah i hope this isn't true

00:25:52,480 --> 00:25:57,600
controversial but we've dropped

00:25:54,080 --> 00:26:00,240
um the old one point x uh support

00:25:57,600 --> 00:26:00,799
it's got to be open image io 2.0 or

00:26:00,240 --> 00:26:03,120
above

00:26:00,799 --> 00:26:04,320
for this release um that's already two

00:26:03,120 --> 00:26:06,159
years old so i don't

00:26:04,320 --> 00:26:08,720
i don't think this should be a big thing

00:26:06,159 --> 00:26:10,400
for people uh also our build system

00:26:08,720 --> 00:26:12,080
for quite some time has been dependent

00:26:10,400 --> 00:26:14,720
on cmake

00:26:12,080 --> 00:26:16,000
but in this release we bumped the

00:26:14,720 --> 00:26:18,720
mandatory minimum to

00:26:16,000 --> 00:26:20,480
3.12 and we because we take a lot of

00:26:18,720 --> 00:26:24,799
advantage of that

00:26:20,480 --> 00:26:28,640
to simplify a lot of the build scripts

00:26:24,799 --> 00:26:32,080
as far as uh internal uh changes that

00:26:28,640 --> 00:26:34,480
renderer uh authors will appreciate

00:26:32,080 --> 00:26:36,159
um we have changed the way through the

00:26:34,480 --> 00:26:38,640
api that you specify

00:26:36,159 --> 00:26:40,080
shader groups to have thread safe

00:26:38,640 --> 00:26:41,039
versions so you can have multiple

00:26:40,080 --> 00:26:43,440
threads setting up

00:26:41,039 --> 00:26:45,039
shader groups uh in parallel they're not

00:26:43,440 --> 00:26:47,440
staple anymore

00:26:45,039 --> 00:26:48,159
uh and we've improved uh as always some

00:26:47,440 --> 00:26:49,840
of the runtime

00:26:48,159 --> 00:26:51,279
optimizations so your shaders should run

00:26:49,840 --> 00:26:54,559
a little faster

00:26:51,279 --> 00:26:54,880
and we've also improved the jit time so

00:26:54,559 --> 00:26:56,400
that

00:26:54,880 --> 00:26:57,919
startup time that we're generating

00:26:56,400 --> 00:27:01,440
machine curve from

00:26:57,919 --> 00:27:04,240
from the shaders at one time and

00:27:01,440 --> 00:27:07,360
it's not really supported features in

00:27:04,240 --> 00:27:10,320
this version but in along the road here

00:27:07,360 --> 00:27:11,679
we've made a lot of progress on the both

00:27:10,320 --> 00:27:14,400
the batch speeding

00:27:11,679 --> 00:27:14,880
uh and the gpu projects which are talked

00:27:14,400 --> 00:27:18,320
about

00:27:14,880 --> 00:27:20,320
shortly um so let's that was recap

00:27:18,320 --> 00:27:22,000
let's talk a little bit about roadmap in

00:27:20,320 --> 00:27:25,039
the future

00:27:22,000 --> 00:27:28,559
so as i just referred to um the two um

00:27:25,039 --> 00:27:28,960
big transformative uh subprojects that

00:27:28,559 --> 00:27:32,159
are

00:27:28,960 --> 00:27:33,440
in progress right now are a batch

00:27:32,159 --> 00:27:36,559
shading mode

00:27:33,440 --> 00:27:39,039
based on cpu cmd instructions

00:27:36,559 --> 00:27:39,919
uh and a gpu shading that are primarily

00:27:39,039 --> 00:27:43,919
targeted at

00:27:39,919 --> 00:27:46,640
optics so this this batch shading

00:27:43,919 --> 00:27:49,039
this is work that is um being led by

00:27:46,640 --> 00:27:50,960
intel and pixar um the lead author on

00:27:49,039 --> 00:27:53,279
that is alex wells from intel

00:27:50,960 --> 00:27:55,279
uh the idea here is that on the old

00:27:53,279 --> 00:27:57,279
style uh primary interface

00:27:55,279 --> 00:27:58,320
to osl from the renderer's standpoint of

00:27:57,279 --> 00:28:00,960
getting it to shape things

00:27:58,320 --> 00:28:02,880
is you're saving the point of time um

00:28:00,960 --> 00:28:03,840
and so this is presenting a second

00:28:02,880 --> 00:28:06,799
interface

00:28:03,840 --> 00:28:09,120
where you can shade uh collections of um

00:28:06,799 --> 00:28:11,840
either eight or sixteen points at a time

00:28:09,120 --> 00:28:13,279
and do so very efficiently by taking

00:28:11,840 --> 00:28:16,159
advantage of

00:28:13,279 --> 00:28:18,080
um cindy hardware that can do uh eight

00:28:16,159 --> 00:28:20,480
or 16 wide operations in

00:28:18,080 --> 00:28:21,520
in one instruction each um on some of

00:28:20,480 --> 00:28:24,720
the newer

00:28:21,520 --> 00:28:28,720
uh cpu program

00:28:24,720 --> 00:28:32,320
and so um you know very very basically

00:28:28,720 --> 00:28:35,279
um we're in isolated shader only tests

00:28:32,320 --> 00:28:37,120
we're seeing you know between a 2x and a

00:28:35,279 --> 00:28:41,679
sometimes faster than 16x

00:28:37,120 --> 00:28:44,000
speed up where we're really isolating

00:28:41,679 --> 00:28:45,760
these particular things in the context

00:28:44,000 --> 00:28:47,440
of a larger renderer

00:28:45,760 --> 00:28:48,960
there are many factors that affect

00:28:47,440 --> 00:28:50,799
performance and of course

00:28:48,960 --> 00:28:52,159
shading isn't all of rendering time it's

00:28:50,799 --> 00:28:54,640
just a fraction of that

00:28:52,159 --> 00:28:55,679
um so like i said this was been

00:28:54,640 --> 00:28:59,120
implemented already

00:28:55,679 --> 00:29:00,080
in renderman and using production pixar

00:28:59,120 --> 00:29:03,279
and so

00:29:00,080 --> 00:29:05,919
they have been reporting that um

00:29:03,279 --> 00:29:06,640
in sort of old style render man tests

00:29:05,919 --> 00:29:09,200
they're seeing

00:29:06,640 --> 00:29:11,120
about a 1.2 x factor improvement when

00:29:09,200 --> 00:29:13,840
using the cindy instructions

00:29:11,120 --> 00:29:14,399
for a newer uh research initiative they

00:29:13,840 --> 00:29:16,720
have called the

00:29:14,399 --> 00:29:18,399
underground xpu look for their toxins

00:29:16,720 --> 00:29:21,679
they're seeing more like a

00:29:18,399 --> 00:29:23,600
a 1.7 or better x speed up like this is

00:29:21,679 --> 00:29:25,760
all told this isn't just isolated

00:29:23,600 --> 00:29:27,679
the shading time and this is for some

00:29:25,760 --> 00:29:30,880
plus they were doing fully shaded

00:29:27,679 --> 00:29:34,559
objects in the real scene um

00:29:30,880 --> 00:29:36,480
this is uh this is in a private branch

00:29:34,559 --> 00:29:38,559
um and it was based off a slightly older

00:29:36,480 --> 00:29:41,440
version of osl so we're in the process

00:29:38,559 --> 00:29:43,279
of a big project to slowly port the

00:29:41,440 --> 00:29:46,320
pieces back to the current

00:29:43,279 --> 00:29:48,240
osl main line and so

00:29:46,320 --> 00:29:49,919
we've got a lot of it there all the

00:29:48,240 --> 00:29:51,039
pieces aren't there but it's an ongoing

00:29:49,919 --> 00:29:53,120
project so

00:29:51,039 --> 00:29:55,760
certainly the next major release should

00:29:53,120 --> 00:29:59,279
have this uh fully working

00:29:55,760 --> 00:30:00,640
and if you uh if you snapchat this or go

00:29:59,279 --> 00:30:04,240
back and look at the video

00:30:00,640 --> 00:30:07,279
um there is a a talk

00:30:04,240 --> 00:30:08,960
that um telling people did about some of

00:30:07,279 --> 00:30:10,000
the gory technical details if you're

00:30:08,960 --> 00:30:12,960
really into that stuff

00:30:10,000 --> 00:30:13,919
uh i recommend it um the other big

00:30:12,960 --> 00:30:17,200
project is

00:30:13,919 --> 00:30:19,120
uh is gpu sharing the trend

00:30:17,200 --> 00:30:20,320
among all of these high-end film

00:30:19,120 --> 00:30:23,200
renderers is that

00:30:20,320 --> 00:30:23,919
long last um they're all in various

00:30:23,200 --> 00:30:27,039
stages

00:30:23,919 --> 00:30:31,200
of having gpu ports um

00:30:27,039 --> 00:30:34,960
largely based on nvidia's optics

00:30:31,200 --> 00:30:37,679
ray tracing toolkit and so that is the

00:30:34,960 --> 00:30:41,120
primary target right now for for direct

00:30:37,679 --> 00:30:42,880
gpu support of osl uh so currently we

00:30:41,120 --> 00:30:44,240
have quite a bit of it working a lot of

00:30:42,880 --> 00:30:47,120
basic shaders just work

00:30:44,240 --> 00:30:47,919
with both optics six and seven but there

00:30:47,120 --> 00:30:50,399
is

00:30:47,919 --> 00:30:51,440
uh not complete support of everything

00:30:50,399 --> 00:30:53,279
you can do in oso

00:30:51,440 --> 00:30:54,559
and in fact there's a lot of work that

00:30:53,279 --> 00:30:56,480
we still need to do

00:30:54,559 --> 00:30:58,159
to really support it all well this is an

00:30:56,480 --> 00:31:01,360
ongoing project

00:30:58,159 --> 00:31:04,399
so what i would like to do now

00:31:01,360 --> 00:31:07,440
actually is um switch to adrian and

00:31:04,399 --> 00:31:10,640
declan they also have some video

00:31:07,440 --> 00:31:12,159
and material to present that will flesh

00:31:10,640 --> 00:31:14,080
out a little bit more about the state of

00:31:12,159 --> 00:31:17,600
this project and in particular

00:31:14,080 --> 00:31:21,600
um how its current shape

00:31:17,600 --> 00:31:25,120
in in arnold limited so i'm gonna

00:31:21,600 --> 00:31:25,120
unshare my screen

00:31:26,480 --> 00:31:32,159
and adrian's gonna take over

00:31:29,519 --> 00:31:33,919
um hi everyone i'm irian i'm the arnold

00:31:32,159 --> 00:31:35,919
colleague at autodesk and i'll be

00:31:33,919 --> 00:31:37,120
co-presenting with declan also an arnold

00:31:35,919 --> 00:31:39,360
core developer

00:31:37,120 --> 00:31:40,559
so we're going to talk about the the

00:31:39,360 --> 00:31:44,000
status of the

00:31:40,559 --> 00:31:45,200
osl gpu project and then we're going to

00:31:44,000 --> 00:31:48,480
talk about

00:31:45,200 --> 00:31:50,880
what's the status in arnold and and

00:31:48,480 --> 00:31:51,679
we're going also to talk about like how

00:31:50,880 --> 00:31:54,799
uh

00:31:51,679 --> 00:31:57,200
different you integrate sol gpu

00:31:54,799 --> 00:31:59,200
product project into your renderer and

00:31:57,200 --> 00:32:01,039
the few caveats that are still there

00:31:59,200 --> 00:32:02,480
and then we'll end up by showing or

00:32:01,039 --> 00:32:06,240
showing off the on

00:32:02,480 --> 00:32:06,240
gpu in a in a demo

00:32:10,000 --> 00:32:15,760
okay so um osl gpu

00:32:13,120 --> 00:32:19,200
has initially contributed by nvidia the

00:32:15,760 --> 00:32:22,480
first pull request was in 2018 i think

00:32:19,200 --> 00:32:25,360
and and it's been steadily improving

00:32:22,480 --> 00:32:27,039
uh since and and i really want to thank

00:32:25,360 --> 00:32:27,600
tim grant from nvidia who contributed

00:32:27,039 --> 00:32:29,840
the first

00:32:27,600 --> 00:32:31,440
pull request and has been super active

00:32:29,840 --> 00:32:33,840
in fixing bugs and adding

00:32:31,440 --> 00:32:33,840
features

00:32:34,799 --> 00:32:40,240
so currently osl gpu is fully integrated

00:32:38,640 --> 00:32:41,600
in current osl in master if you're

00:32:40,240 --> 00:32:42,880
building yourself from master you simply

00:32:41,600 --> 00:32:46,640
build with optics

00:32:42,880 --> 00:32:50,320
it relies on the nvpx 11 back back end

00:32:46,640 --> 00:32:53,760
most of the easy native shadows

00:32:50,320 --> 00:32:53,760
in osl are supported

00:32:54,799 --> 00:32:59,039
what requires a bit more work if you're

00:32:57,200 --> 00:33:01,039
interested integrating or sell gpu in

00:32:59,039 --> 00:33:01,840
your own renderer is all the shared up

00:33:01,039 --> 00:33:03,679
that are

00:33:01,840 --> 00:33:05,440
depending on the renderer services or

00:33:03,679 --> 00:33:06,480
platform dependent like printf and stuff

00:33:05,440 --> 00:33:11,200
like that

00:33:06,480 --> 00:33:13,840
um for those you do have to

00:33:11,200 --> 00:33:15,200
send your own llvm bitcode to your

00:33:13,840 --> 00:33:17,919
search engine system

00:33:15,200 --> 00:33:19,679
um so yeah a bit more work but as you

00:33:17,919 --> 00:33:21,039
all know like gpu programming is harder

00:33:19,679 --> 00:33:24,720
it's a

00:33:21,039 --> 00:33:26,960
constant the main limitations

00:33:24,720 --> 00:33:28,720
are really the absence of dynamic

00:33:26,960 --> 00:33:31,919
strings and string arrays

00:33:28,720 --> 00:33:34,320
those require some sort of global logs

00:33:31,919 --> 00:33:36,480
and memory allocation which never

00:33:34,320 --> 00:33:38,640
help you although some people would

00:33:36,480 --> 00:33:39,360
argue that it's not a good idea on cpu

00:33:38,640 --> 00:33:41,360
either

00:33:39,360 --> 00:33:42,799
and are actually glad that this

00:33:41,360 --> 00:33:46,080
limitation exists so

00:33:42,799 --> 00:33:48,480
it's ongoing debates um and and

00:33:46,080 --> 00:33:50,080
for the status of the project one major

00:33:48,480 --> 00:33:51,919
contribution that was added recently is

00:33:50,080 --> 00:33:52,720
optic seven support like basic optic

00:33:51,919 --> 00:33:55,360
seven support

00:33:52,720 --> 00:33:56,159
which is going to be if you all if you

00:33:55,360 --> 00:33:59,360
know optic seven

00:33:56,159 --> 00:34:01,360
is the big rewrite of the optics api uh

00:33:59,360 --> 00:34:03,039
it's completely breaking its new and

00:34:01,360 --> 00:34:07,200
modern way of using optics and it's

00:34:03,039 --> 00:34:11,119
really the way to go forward

00:34:07,200 --> 00:34:13,280
um so arnold as though as you all know

00:34:11,119 --> 00:34:14,000
probably arnold is a path forcing a

00:34:13,280 --> 00:34:17,280
prediction

00:34:14,000 --> 00:34:19,520
renderer arnold is has been

00:34:17,280 --> 00:34:21,839
fully compatible with osl we have full

00:34:19,520 --> 00:34:24,560
support for sl not just buttons

00:34:21,839 --> 00:34:26,079
like we also support closures and and so

00:34:24,560 --> 00:34:28,000
it was super important when we

00:34:26,079 --> 00:34:29,200
introduced our gpu that we were also

00:34:28,000 --> 00:34:32,560
supporting

00:34:29,200 --> 00:34:35,440
uh osl on the gpu and

00:34:32,560 --> 00:34:37,599
and we released uh arnold with gpu

00:34:35,440 --> 00:34:38,639
support and osl gpu support last year at

00:34:37,599 --> 00:34:41,200
seagraph

00:34:38,639 --> 00:34:42,480
at first it was like with very basic osl

00:34:41,200 --> 00:34:45,520
functionality

00:34:42,480 --> 00:34:48,159
uh and we've been uh adding uh

00:34:45,520 --> 00:34:50,079
building up on top of what we've we had

00:34:48,159 --> 00:34:51,520
and adding a support for more and more

00:34:50,079 --> 00:34:53,520
osl features

00:34:51,520 --> 00:34:54,879
until last month when we released

00:34:53,520 --> 00:34:57,280
another 604 with

00:34:54,879 --> 00:34:59,760
uh ray tracing in osl and and attribute

00:34:57,280 --> 00:34:59,760
queries

00:35:00,400 --> 00:35:04,400
and then although hand over to declan

00:35:02,560 --> 00:35:08,640
who is going to talk a bit more about

00:35:04,400 --> 00:35:17,839
how to uh how we integrated

00:35:08,640 --> 00:35:17,839
osl gpu into arnold

00:35:21,760 --> 00:35:25,680
okay so here's a kind of basic overview

00:35:24,240 --> 00:35:28,800
of how the

00:35:25,680 --> 00:35:32,160
osl gpu pipeline works uh if you've

00:35:28,800 --> 00:35:33,839
implemented a uh osl on the cpu and your

00:35:32,160 --> 00:35:36,960
renderer before this is all going to be

00:35:33,839 --> 00:35:39,280
quite familiar so you have your osl

00:35:36,960 --> 00:35:41,040
you create your your shader group which

00:35:39,280 --> 00:35:42,960
is like a shading network

00:35:41,040 --> 00:35:44,800
and then you give it to the oso runtime

00:35:42,960 --> 00:35:47,599
time so runtime

00:35:44,800 --> 00:35:48,800
jits all this and then produces sub

00:35:47,599 --> 00:35:52,560
machine code

00:35:48,800 --> 00:35:54,800
in on the gpu this is in the

00:35:52,560 --> 00:35:56,240
in the form of a callable program this

00:35:54,800 --> 00:35:58,000
is a optics feature which is

00:35:56,240 --> 00:36:00,400
functionally equivalent to

00:35:58,000 --> 00:36:01,839
a function pointer but it runs on the

00:36:00,400 --> 00:36:04,400
gpu

00:36:01,839 --> 00:36:05,599
and then execution time it's very

00:36:04,400 --> 00:36:07,520
similar to the cpu

00:36:05,599 --> 00:36:09,440
you set up your shader globals you

00:36:07,520 --> 00:36:11,200
execute your shader group in this

00:36:09,440 --> 00:36:13,119
in this in the gpu this will be your

00:36:11,200 --> 00:36:14,079
coolable program and then you read the

00:36:13,119 --> 00:36:18,000
outputs

00:36:14,079 --> 00:36:20,400
after your your program is run

00:36:18,000 --> 00:36:21,440
so let's have a take a little bit more

00:36:20,400 --> 00:36:26,079
of a deeper look

00:36:21,440 --> 00:36:26,079
at what's going on in

00:36:26,800 --> 00:36:34,800
the compilation so

00:36:30,240 --> 00:36:37,760
when oso jit compiles your osl code

00:36:34,800 --> 00:36:38,400
on the gpu we we take some of your

00:36:37,760 --> 00:36:40,320
render

00:36:38,400 --> 00:36:42,079
specific shading ops which you

00:36:40,320 --> 00:36:46,160
pre-compile into

00:36:42,079 --> 00:36:47,119
llvm bit code then osl turns this all

00:36:46,160 --> 00:36:50,880
into

00:36:47,119 --> 00:36:53,440
into its love immediate

00:36:50,880 --> 00:36:54,240
representation and then hands it to the

00:36:53,440 --> 00:36:57,520
llvm

00:36:54,240 --> 00:37:01,760
nv ptx back end which produces ptx

00:36:57,520 --> 00:37:05,040
which is like a as like a ascii based

00:37:01,760 --> 00:37:07,520
like um assembly like language for for

00:37:05,040 --> 00:37:08,640
nvidia cards and then this ptx is given

00:37:07,520 --> 00:37:11,119
to optics

00:37:08,640 --> 00:37:12,800
which is then jig compiled again and

00:37:11,119 --> 00:37:14,320
turned into your callable program that

00:37:12,800 --> 00:37:17,839
you can then call

00:37:14,320 --> 00:37:20,400
uh when you run your optics renderer

00:37:17,839 --> 00:37:21,119
so this is where some of the challenges

00:37:20,400 --> 00:37:25,200
sort of

00:37:21,119 --> 00:37:28,160
start uh the generating gpu code can be

00:37:25,200 --> 00:37:29,680
a lot more expensive than than cpu code

00:37:28,160 --> 00:37:32,160
there's

00:37:29,680 --> 00:37:32,880
a for starter there's a one one more

00:37:32,160 --> 00:37:36,160
level of

00:37:32,880 --> 00:37:38,400
indirection from where like on the cpu

00:37:36,160 --> 00:37:40,160
you would just compile your code into

00:37:38,400 --> 00:37:43,200
like machine code and then run

00:37:40,160 --> 00:37:43,680
here we go to ptx and then optics and

00:37:43,200 --> 00:37:46,400
then

00:37:43,680 --> 00:37:47,040
the call will program we have to compile

00:37:46,400 --> 00:37:48,880
everything

00:37:47,040 --> 00:37:51,359
up front we can't do it lazily because

00:37:48,880 --> 00:37:55,359
everything has to be done before the gpu

00:37:51,359 --> 00:37:57,680
kernel launches uh gpu ptx takes

00:37:55,359 --> 00:38:00,720
longer to compile anyway because it more

00:37:57,680 --> 00:38:02,880
aggressively inlines and optimizes code

00:38:00,720 --> 00:38:05,359
currently there's a limitation with the

00:38:02,880 --> 00:38:06,800
nvptx back end where you can't compile

00:38:05,359 --> 00:38:10,240
stuff in parallel

00:38:06,800 --> 00:38:12,880
which makes the problem even

00:38:10,240 --> 00:38:13,680
more difficult as uh we're seeing some

00:38:12,880 --> 00:38:17,040
shaders

00:38:13,680 --> 00:38:18,240
hit kind of take minutes to compile and

00:38:17,040 --> 00:38:21,040
the fact that we can't do this in

00:38:18,240 --> 00:38:22,800
parallel makes it even longer

00:38:21,040 --> 00:38:24,400
and it's wrecking sort of time to first

00:38:22,800 --> 00:38:28,079
pixel and

00:38:24,400 --> 00:38:30,480
makes ipr pretty painful so

00:38:28,079 --> 00:38:32,240
we've done some things in in arnold to

00:38:30,480 --> 00:38:34,880
to kind of mitigate

00:38:32,240 --> 00:38:36,000
um this this compile time so so how do

00:38:34,880 --> 00:38:38,240
we do this well

00:38:36,000 --> 00:38:39,599
the problem is that we have too much

00:38:38,240 --> 00:38:41,520
llvm bit code

00:38:39,599 --> 00:38:42,640
like some of this is coming from the oso

00:38:41,520 --> 00:38:44,720
code that you

00:38:42,640 --> 00:38:46,640
your user is providing to the renderer

00:38:44,720 --> 00:38:48,480
and but most of it is coming from

00:38:46,640 --> 00:38:50,079
shading ops which are being inlined over

00:38:48,480 --> 00:38:51,760
and over again and you're just producing

00:38:50,079 --> 00:38:54,079
huge amounts of code

00:38:51,760 --> 00:38:55,520
so how do we solve this well the simple

00:38:54,079 --> 00:38:57,920
answer is we want to compile

00:38:55,520 --> 00:38:58,880
less code so you can do some simple

00:38:57,920 --> 00:39:00,960
stuff like

00:38:58,880 --> 00:39:02,480
reduce any redundant code you may have

00:39:00,960 --> 00:39:04,320
written or

00:39:02,480 --> 00:39:05,520
try and reduce the amount of templates

00:39:04,320 --> 00:39:06,800
you're using which generate a lot of

00:39:05,520 --> 00:39:08,960
code

00:39:06,800 --> 00:39:10,480
but the main thing well the best thing

00:39:08,960 --> 00:39:12,640
that we found worked

00:39:10,480 --> 00:39:13,680
was to take advantage of some of

00:39:12,640 --> 00:39:16,800
optics's

00:39:13,680 --> 00:39:18,960
features this callable program and

00:39:16,800 --> 00:39:20,079
move some of the logic there so these

00:39:18,960 --> 00:39:22,560
callable programs

00:39:20,079 --> 00:39:23,680
generated by optics are once they're

00:39:22,560 --> 00:39:25,280
compiled by optics

00:39:23,680 --> 00:39:26,800
they're cached to disk and then you

00:39:25,280 --> 00:39:28,640
don't need to recompile them later you

00:39:26,800 --> 00:39:31,520
can just

00:39:28,640 --> 00:39:32,240
call them straight away so what we do is

00:39:31,520 --> 00:39:35,359
we move

00:39:32,240 --> 00:39:37,200
the logic from the from osl shade ops

00:39:35,359 --> 00:39:38,800
into these callable programs

00:39:37,200 --> 00:39:40,400
and then just call them from the shade

00:39:38,800 --> 00:39:43,920
ups

00:39:40,400 --> 00:39:45,440
so this reduces the amount of code

00:39:43,920 --> 00:39:48,240
that's actually jit compiled

00:39:45,440 --> 00:39:50,160
by osl significantly so see on the left

00:39:48,240 --> 00:39:50,880
we would have a traditional kind of osl

00:39:50,160 --> 00:39:52,960
shader

00:39:50,880 --> 00:39:54,800
which has many lines of code and this

00:39:52,960 --> 00:39:58,240
effectively turns into

00:39:54,800 --> 00:40:01,040
two lines of code there is

00:39:58,240 --> 00:40:01,599
still an investigation to go on about

00:40:01,040 --> 00:40:03,599
with this

00:40:01,599 --> 00:40:05,280
indirection like there's not going to be

00:40:03,599 --> 00:40:08,000
as much lines of

00:40:05,280 --> 00:40:09,839
code in lined when you get jit compile

00:40:08,000 --> 00:40:10,800
so there might be some performance loss

00:40:09,839 --> 00:40:13,200
but

00:40:10,800 --> 00:40:14,880
we haven't really found that in our

00:40:13,200 --> 00:40:17,760
results so far

00:40:14,880 --> 00:40:19,040
so let's look at the numbers using one

00:40:17,760 --> 00:40:21,280
of zapp's

00:40:19,040 --> 00:40:23,119
shaders that he he mentioned earlier

00:40:21,280 --> 00:40:25,440
from from max

00:40:23,119 --> 00:40:26,160
so we're using the randomized bitmap

00:40:25,440 --> 00:40:28,640
shader

00:40:26,160 --> 00:40:30,319
uh it's got five textuals uh get

00:40:28,640 --> 00:40:31,200
actually cool and i get texture info

00:40:30,319 --> 00:40:34,160
call

00:40:31,200 --> 00:40:35,200
so this used to take about nine and a

00:40:34,160 --> 00:40:36,960
half seconds

00:40:35,200 --> 00:40:39,200
and then we've done all our

00:40:36,960 --> 00:40:43,359
optimizations and it's taking about

00:40:39,200 --> 00:40:46,240
1.2 seconds which is roughly a 7.8

00:40:43,359 --> 00:40:48,079
times speed up which is great but

00:40:46,240 --> 00:40:50,480
compared to cpu we're still

00:40:48,079 --> 00:40:52,480
orders of magnitude away and we need to

00:40:50,480 --> 00:40:55,760
we need to do better which um

00:40:52,480 --> 00:40:56,319
we're still working on so other things

00:40:55,760 --> 00:40:58,480
we can

00:40:56,319 --> 00:41:00,240
look at improving is there's there's

00:40:58,480 --> 00:41:02,480
some balance to

00:41:00,240 --> 00:41:03,920
investigate between llvm and optics

00:41:02,480 --> 00:41:06,480
because optics is also

00:41:03,920 --> 00:41:08,240
compiling the code there's some argument

00:41:06,480 --> 00:41:09,040
that we don't need to jit compile it in

00:41:08,240 --> 00:41:10,560
llvm

00:41:09,040 --> 00:41:12,560
because some of these optimizations

00:41:10,560 --> 00:41:15,440
might be redundant and redone

00:41:12,560 --> 00:41:17,119
however if you don't do any optimization

00:41:15,440 --> 00:41:19,200
in llvm then you're not doing any dead

00:41:17,119 --> 00:41:21,839
code elimination and you're just giving

00:41:19,200 --> 00:41:23,440
optics heaps and heaps of ptx which it

00:41:21,839 --> 00:41:24,079
just has to deal with which which would

00:41:23,440 --> 00:41:27,920
also

00:41:24,079 --> 00:41:27,920
be a bottleneck eventually

00:41:28,079 --> 00:41:31,599
so some other caveats that are still

00:41:30,400 --> 00:41:34,160
sort of open problems

00:41:31,599 --> 00:41:35,119
is the current attribute and user data

00:41:34,160 --> 00:41:38,880
binding mechanism

00:41:35,119 --> 00:41:41,040
isn't very gpu friendly uh it's not

00:41:38,880 --> 00:41:42,640
it's very flexible in osl but it's still

00:41:41,040 --> 00:41:43,520
there's a lot of performance that could

00:41:42,640 --> 00:41:44,960
be improved

00:41:43,520 --> 00:41:46,800
because at the moment it pretty much

00:41:44,960 --> 00:41:47,520
just requires a lot of like dictionary

00:41:46,800 --> 00:41:49,839
lookups

00:41:47,520 --> 00:41:52,160
a lot of random memory accesses and this

00:41:49,839 --> 00:41:53,839
is the the same on the gpu

00:41:52,160 --> 00:41:55,599
uh there's a really interesting proposal

00:41:53,839 --> 00:41:58,480
by luke emers from

00:41:55,599 --> 00:42:00,319
animal logic on the osl mailing list

00:41:58,480 --> 00:42:03,280
which is definitely worth checking out

00:42:00,319 --> 00:42:04,560
uh basically we just uh you can you

00:42:03,280 --> 00:42:07,760
write all your

00:42:04,560 --> 00:42:10,079
known attributes to a predefined

00:42:07,760 --> 00:42:11,359
memory block as much as you can up front

00:42:10,079 --> 00:42:13,359
and then

00:42:11,359 --> 00:42:14,560
when you need these like dynamic lookups

00:42:13,359 --> 00:42:16,319
because you can't know

00:42:14,560 --> 00:42:18,400
what you need then we drop back to these

00:42:16,319 --> 00:42:22,319
this sort of slow dynamic

00:42:18,400 --> 00:42:25,599
dictionary lookup case so now i have a

00:42:22,319 --> 00:42:28,640
demo of osl running on the gpu

00:42:25,599 --> 00:42:32,319
in arnold in in maya using

00:42:28,640 --> 00:42:33,520
m2a's osl editor

00:42:32,319 --> 00:42:35,119
so here we have our robot with this

00:42:33,520 --> 00:42:36,160
simple shading network applied the

00:42:35,119 --> 00:42:38,160
shading network has

00:42:36,160 --> 00:42:40,160
an oso shader some arnold shaders and

00:42:38,160 --> 00:42:41,760
this is all running on the gpu

00:42:40,160 --> 00:42:43,760
this is a good example of the level of

00:42:41,760 --> 00:42:44,160
support we had for ursa on the gpu last

00:42:43,760 --> 00:42:45,680
year

00:42:44,160 --> 00:42:47,440
so we have some closures we have simple

00:42:45,680 --> 00:42:50,720
arithmetic we have

00:42:47,440 --> 00:42:51,680
arnold and osl shader interop and we can

00:42:50,720 --> 00:42:55,280
run the same thing

00:42:51,680 --> 00:42:58,079
on the cpu and expect the same result

00:42:55,280 --> 00:42:59,200
uh this was a good starting point for us

00:42:58,079 --> 00:43:01,200
for the gpu we could

00:42:59,200 --> 00:43:02,400
expose a way for users to write custom

00:43:01,200 --> 00:43:03,680
patterns and stuff but there were some

00:43:02,400 --> 00:43:04,560
big parts of our cell that were still

00:43:03,680 --> 00:43:07,440
missing

00:43:04,560 --> 00:43:08,720
we've implemented over the last year so

00:43:07,440 --> 00:43:13,520
first off i'm going to show off

00:43:08,720 --> 00:43:16,480
some attributes which were added in 604

00:43:13,520 --> 00:43:17,599
so previously i've added some user data

00:43:16,480 --> 00:43:21,119
to this mesh

00:43:17,599 --> 00:43:24,319
to drive the color of each metal plate

00:43:21,119 --> 00:43:26,079
and we're going to use the oso's get

00:43:24,319 --> 00:43:30,000
attribute function

00:43:26,079 --> 00:43:34,400
to grab this color and

00:43:30,000 --> 00:43:40,160
uh drive the color of our metal shader

00:43:34,400 --> 00:43:44,319
so it's going to call attribute

00:43:40,160 --> 00:43:47,040
uh on the attribute

00:43:44,319 --> 00:43:47,040
metal color

00:43:50,960 --> 00:43:59,520
i'm gonna go ahead and compile that

00:43:55,520 --> 00:44:03,599
and now once it is all jitted

00:43:59,520 --> 00:44:07,280
uh by osl start rendering and

00:44:03,599 --> 00:44:09,280
see the result so as you can see now the

00:44:07,280 --> 00:44:10,640
color is being grabbed by the mesh and

00:44:09,280 --> 00:44:14,079
it's driving the

00:44:10,640 --> 00:44:15,599
color of our metal so this is looking a

00:44:14,079 --> 00:44:17,200
bit too new for my liking we kind of

00:44:15,599 --> 00:44:18,800
want this robot to look a bit more like

00:44:17,200 --> 00:44:19,839
old and worn out so

00:44:18,800 --> 00:44:21,920
we're going to do something a bit more

00:44:19,839 --> 00:44:22,240
complicated so previously i've written

00:44:21,920 --> 00:44:24,240
this

00:44:22,240 --> 00:44:25,680
shader that it basically does the same

00:44:24,240 --> 00:44:27,760
thing as our last shader

00:44:25,680 --> 00:44:29,359
but it also has a diffuse closure which

00:44:27,760 --> 00:44:31,680
is being driven by a

00:44:29,359 --> 00:44:32,560
dirt color and a rust color and then we

00:44:31,680 --> 00:44:34,319
have some weights

00:44:32,560 --> 00:44:36,400
applied to both of these so we could for

00:44:34,319 --> 00:44:41,280
instance up the weight of the

00:44:36,400 --> 00:44:42,880
dirt and compare the shader again

00:44:41,280 --> 00:44:45,040
and then once it's jitted we're gonna

00:44:42,880 --> 00:44:45,920
see basically there's gonna be like a

00:44:45,040 --> 00:44:50,160
diffuse

00:44:45,920 --> 00:44:52,079
brown layer across our surface too

00:44:50,160 --> 00:44:53,280
so this doesn't look too realistic we

00:44:52,079 --> 00:44:55,280
kind of want to break up our

00:44:53,280 --> 00:44:56,880
a little bit uh so we're going to use a

00:44:55,280 --> 00:44:58,800
texture to do this

00:44:56,880 --> 00:45:00,480
so i have this sort of like grunge

00:44:58,800 --> 00:45:03,680
texture on my system

00:45:00,480 --> 00:45:08,800
and we're going to use this to mask

00:45:03,680 --> 00:45:11,200
i would do it so simply have the

00:45:08,800 --> 00:45:11,200
get the

00:45:15,119 --> 00:45:19,839
file path

00:45:21,359 --> 00:45:27,760
and then we're just going to call osl's

00:45:25,119 --> 00:45:34,480
texture function

00:45:27,760 --> 00:45:34,480
on the file shadow again

00:45:37,599 --> 00:45:39,920
and

00:45:43,280 --> 00:45:49,760
now we have our texture driving

00:45:47,520 --> 00:45:51,200
the the weight of the dirt on our

00:45:49,760 --> 00:45:53,839
texture and we can of course

00:45:51,200 --> 00:45:55,760
switch back to cpu and we'll get the

00:45:53,839 --> 00:45:58,480
same result

00:45:55,760 --> 00:45:59,200
so i also want to add some like rust to

00:45:58,480 --> 00:46:01,280
this

00:45:59,200 --> 00:46:02,560
mesh i kind of want it to fall in these

00:46:01,280 --> 00:46:04,720
sort of corners where the

00:46:02,560 --> 00:46:05,680
plates of the metal meet and to do that

00:46:04,720 --> 00:46:08,000
we're going to use a

00:46:05,680 --> 00:46:09,280
trace call so i previously written this

00:46:08,000 --> 00:46:12,960
function

00:46:09,280 --> 00:46:16,240
to do this essentially it just

00:46:12,960 --> 00:46:19,520
traces rays uh from the shading point

00:46:16,240 --> 00:46:21,200
around the uh near points of that

00:46:19,520 --> 00:46:23,760
surface and then just

00:46:21,200 --> 00:46:25,119
gets the the average angle between the

00:46:23,760 --> 00:46:26,800
normals and then we normalize that

00:46:25,119 --> 00:46:28,960
between zero and one

00:46:26,800 --> 00:46:30,400
so we're just simply gonna call this

00:46:28,960 --> 00:46:34,240
function

00:46:30,400 --> 00:46:42,720
uh on our

00:46:34,240 --> 00:46:45,760
rust weight

00:46:42,720 --> 00:46:47,680
let me compile our shadow again

00:46:45,760 --> 00:46:49,280
and then we're going to go ahead and jit

00:46:47,680 --> 00:46:52,720
this

00:46:49,280 --> 00:46:53,280
and then because this is using a tracing

00:46:52,720 --> 00:46:54,880
cool

00:46:53,280 --> 00:46:57,040
this can take a little bit longer

00:46:54,880 --> 00:46:58,319
because optics has to recompile the

00:46:57,040 --> 00:47:01,760
whole shading network

00:46:58,319 --> 00:47:11,839
for tracing shaders once it's done we'll

00:47:01,760 --> 00:47:14,960
see the result

00:47:11,839 --> 00:47:17,599
so as you can see now uh we have

00:47:14,960 --> 00:47:18,160
some nice sort of like orange sort of

00:47:17,599 --> 00:47:20,960
rust

00:47:18,160 --> 00:47:21,760
in the edges where these plates are

00:47:20,960 --> 00:47:26,160
meeting

00:47:21,760 --> 00:47:30,079
and our old kind of robot

00:47:26,160 --> 00:47:30,079
is looking nice and it's done

00:47:32,400 --> 00:47:36,800
cheers and uh back to you larry

00:47:37,520 --> 00:47:42,160
great okay let me reshare my screen

00:47:51,280 --> 00:47:54,640
great uh so just to to really briefly

00:47:53,680 --> 00:47:56,480
talk about some other

00:47:54,640 --> 00:47:57,839
uh smaller things that are on our

00:47:56,480 --> 00:48:01,520
roadmap um

00:47:57,839 --> 00:48:05,119
we we will be working on uh built-in

00:48:01,520 --> 00:48:07,119
um two and and four vectors um

00:48:05,119 --> 00:48:09,200
largely so that we can play a little bit

00:48:07,119 --> 00:48:11,920
better in the material x

00:48:09,200 --> 00:48:12,559
uh ecosystem um right now they would

00:48:11,920 --> 00:48:15,359
have they're

00:48:12,559 --> 00:48:16,160
implemented as structs and classes in

00:48:15,359 --> 00:48:17,440
osl but

00:48:16,160 --> 00:48:19,839
you want to make those into into

00:48:17,440 --> 00:48:23,599
built-ins and be first-class

00:48:19,839 --> 00:48:27,200
types as uh

00:48:23,599 --> 00:48:27,520
as just uh referred to there is a plan

00:48:27,200 --> 00:48:31,359
of

00:48:27,520 --> 00:48:34,480
foot to change the way renders explain

00:48:31,359 --> 00:48:36,319
to osl on what the memory layout

00:48:34,480 --> 00:48:37,599
is of various things that it needs and

00:48:36,319 --> 00:48:39,599
so the

00:48:37,599 --> 00:48:41,280
shaders will then jit in such a way that

00:48:39,599 --> 00:48:44,559
they just directly pull

00:48:41,280 --> 00:48:46,319
uh or write to those areas instead of

00:48:44,559 --> 00:48:48,000
this will eliminate a lot of data

00:48:46,319 --> 00:48:50,800
shuffling and copying

00:48:48,000 --> 00:48:52,880
and they've done a similar thing in the

00:48:50,800 --> 00:48:53,440
osl implementation of animal logic and

00:48:52,880 --> 00:48:56,240
report

00:48:53,440 --> 00:48:57,359
a substantial performance improvement

00:48:56,240 --> 00:48:58,720
from it

00:48:57,359 --> 00:49:01,200
and then there are a variety of other

00:48:58,720 --> 00:49:04,400
odds and ends

00:49:01,200 --> 00:49:04,880
that will get us in full uh compliance

00:49:04,400 --> 00:49:08,160
for

00:49:04,880 --> 00:49:10,559
for graduation uh in the foundation um

00:49:08,160 --> 00:49:12,640
and an endless uh you know array of

00:49:10,559 --> 00:49:14,319
other small tasks and whatever other

00:49:12,640 --> 00:49:16,319
features we think of in the future that

00:49:14,319 --> 00:49:18,240
we want to put in

00:49:16,319 --> 00:49:19,599
so if you're thinking you know this

00:49:18,240 --> 00:49:21,040
looks like an interesting project to get

00:49:19,599 --> 00:49:24,079
involved with

00:49:21,040 --> 00:49:27,440
there is no shortage of ways to help

00:49:24,079 --> 00:49:29,280
we need all the hands that we can get

00:49:27,440 --> 00:49:30,480
look for us on the mail list and

00:49:29,280 --> 00:49:32,880
subscribe

00:49:30,480 --> 00:49:34,400
um you know watch the issues on the

00:49:32,880 --> 00:49:36,319
github

00:49:34,400 --> 00:49:37,920
there's an open invitation for anyone to

00:49:36,319 --> 00:49:40,800
join the the technical

00:49:37,920 --> 00:49:42,160
steering committee meetings and the

00:49:40,800 --> 00:49:43,920
bottom line is

00:49:42,160 --> 00:49:46,079
as they like to say in the linux

00:49:43,920 --> 00:49:49,280
foundation uh this is a duocracy

00:49:46,079 --> 00:49:50,240
um you get uh you get um capital in this

00:49:49,280 --> 00:49:52,880
organization

00:49:50,240 --> 00:49:54,240
um by actually chipping in and uh and

00:49:52,880 --> 00:49:57,359
making things happen

00:49:54,240 --> 00:49:59,280
um uh and uh

00:49:57,359 --> 00:50:01,040
you know we we talked about this but

00:49:59,280 --> 00:50:01,520
like many of us on the tse and other

00:50:01,040 --> 00:50:03,680
people

00:50:01,520 --> 00:50:04,720
involved um this isn't just a you know

00:50:03,680 --> 00:50:07,839
hobby for us

00:50:04,720 --> 00:50:08,960
um this is this is a part of our jobs uh

00:50:07,839 --> 00:50:11,040
and so that's another

00:50:08,960 --> 00:50:13,119
route to get involved with these things

00:50:11,040 --> 00:50:14,480
and i can't speak for any of the other

00:50:13,119 --> 00:50:16,880
companies but i know that

00:50:14,480 --> 00:50:17,920
that at my place we're actually hiring

00:50:16,880 --> 00:50:19,760
uh right now for

00:50:17,920 --> 00:50:21,599
engineers in a variety of ways including

00:50:19,760 --> 00:50:23,839
for both shader development

00:50:21,599 --> 00:50:24,640
and uh and renderer development and both

00:50:23,839 --> 00:50:27,680
of those

00:50:24,640 --> 00:50:28,480
are areas where one would directly be

00:50:27,680 --> 00:50:31,599
involved

00:50:28,480 --> 00:50:34,400
with this project i'd also like to

00:50:31,599 --> 00:50:35,119
direct you to a couple of other things

00:50:34,400 --> 00:50:37,599
coming up

00:50:35,119 --> 00:50:38,960
over the next week or so related to oso

00:50:37,599 --> 00:50:40,640
at siggraph

00:50:38,960 --> 00:50:42,319
i encourage you to look at the

00:50:40,640 --> 00:50:43,119
physically based shading and theory and

00:50:42,319 --> 00:50:46,240
practice

00:50:43,119 --> 00:50:47,839
course that is live on wednesday

00:50:46,240 --> 00:50:49,520
not only is that just a great set of

00:50:47,839 --> 00:50:52,800
topics generally but

00:50:49,520 --> 00:50:54,319
um tsc member and imageworks head of

00:50:52,800 --> 00:50:55,599
shading lee curley is one of the

00:50:54,319 --> 00:50:56,800
speakers there

00:50:55,599 --> 00:50:58,720
there's also a really interesting

00:50:56,800 --> 00:51:00,000
siggraph talk i just watched yesterday

00:50:58,720 --> 00:51:01,920
on on demand

00:51:00,000 --> 00:51:03,599
from pixar about their use of open

00:51:01,920 --> 00:51:05,520
shading language

00:51:03,599 --> 00:51:07,119
for procedural geometry i thought that

00:51:05,520 --> 00:51:10,480
was super interesting

00:51:07,119 --> 00:51:12,720
i didn't know a thing about it until i

00:51:10,480 --> 00:51:15,359
saw it on the siggraph program

00:51:12,720 --> 00:51:16,200
which i would like to think speaks for

00:51:15,359 --> 00:51:18,559
the

00:51:16,200 --> 00:51:20,800
implementability of such things without

00:51:18,559 --> 00:51:22,640
having to

00:51:20,800 --> 00:51:24,640
beg for too much help from us they they

00:51:22,640 --> 00:51:27,920
did it all and it's uh it's quite a neat

00:51:24,640 --> 00:51:31,040
uh set of tools um so with that

00:51:27,920 --> 00:51:34,319
um for the rest of our time

00:51:31,040 --> 00:51:35,359
um let's just open it to any uh q a or

00:51:34,319 --> 00:51:39,200
discussion

00:51:35,359 --> 00:51:41,359
and um yeah how about it

00:51:39,200 --> 00:51:42,720
let me unshare and we can all switch to

00:51:41,359 --> 00:51:45,359
our

00:51:42,720 --> 00:51:45,359
faces again

00:51:45,760 --> 00:51:51,839
if i can find my mouse

00:51:52,079 --> 00:51:54,640
there we go

00:51:57,920 --> 00:52:01,599
okay well thanks guys oh that was great

00:52:00,160 --> 00:52:04,800
um

00:52:01,599 --> 00:52:06,319
i am looking at the q a box right here i

00:52:04,800 --> 00:52:10,559
don't see any q a

00:52:06,319 --> 00:52:13,680
um uh

00:52:10,559 --> 00:52:15,440
i've seen any questions lined up yet but

00:52:13,680 --> 00:52:20,480
feel free don't be shy

00:52:15,440 --> 00:52:20,480
ask any questions you may have oh so

00:52:20,640 --> 00:52:26,559
um so okay

00:52:23,760 --> 00:52:27,040
one question that just came in um how

00:52:26,559 --> 00:52:30,839
does

00:52:27,040 --> 00:52:33,119
or uh how does spear v relate to oso

00:52:30,839 --> 00:52:35,440
and what might we see there in the

00:52:33,119 --> 00:52:35,440
future

00:52:37,040 --> 00:52:41,119
uh yeah maybe uh maybe i'll take it

00:52:38,880 --> 00:52:43,359
though yeah so

00:52:41,119 --> 00:52:44,160
spuri is another one of these sort of

00:52:43,359 --> 00:52:47,280
abstracted

00:52:44,160 --> 00:52:48,400
kind of assembly languages virtually

00:52:47,280 --> 00:52:51,520
speaking

00:52:48,400 --> 00:52:52,480
that is the basis of going to a lot of

00:52:51,520 --> 00:52:56,000
the other

00:52:52,480 --> 00:52:58,079
non-cuda hardware implementations

00:52:56,000 --> 00:52:59,040
i think in the materialx talk that we

00:52:58,079 --> 00:53:01,520
just saw

00:52:59,040 --> 00:53:03,440
um they were talking about a spear b

00:53:01,520 --> 00:53:06,800
generator for material x

00:53:03,440 --> 00:53:09,440
and that unlocks access to um

00:53:06,800 --> 00:53:10,000
you know vulcan and metal and other such

00:53:09,440 --> 00:53:13,359
things

00:53:10,000 --> 00:53:15,920
i think that would be great um i think

00:53:13,359 --> 00:53:18,000
that um that we could have something

00:53:15,920 --> 00:53:20,640
like that as an alternate back end

00:53:18,000 --> 00:53:22,720
uh in much the same way that we have uh

00:53:20,640 --> 00:53:25,359
cuda and other things as a back end and

00:53:22,720 --> 00:53:25,920
it may be similar to some of the way

00:53:25,359 --> 00:53:28,720
that

00:53:25,920 --> 00:53:29,440
zaps team has done the transcoding to

00:53:28,720 --> 00:53:32,480
get to

00:53:29,440 --> 00:53:34,960
um i think it was hlsl max um

00:53:32,480 --> 00:53:36,160
to have viewport uh visualization of

00:53:34,960 --> 00:53:39,359
those cell shaders

00:53:36,160 --> 00:53:42,000
um i i think that that is just

00:53:39,359 --> 00:53:44,000
a project that is waiting for a champion

00:53:42,000 --> 00:53:47,359
to step forward

00:53:44,000 --> 00:53:50,640
and want to both advocate for it

00:53:47,359 --> 00:53:54,240
and help organize and tackle some of the

00:53:50,640 --> 00:53:57,359
work but architecturally speaking

00:53:54,240 --> 00:53:59,359
i think we know where it fits in um

00:53:57,359 --> 00:54:01,040
and we just lack the hands to do it all

00:53:59,359 --> 00:54:02,400
at the same time as these major projects

00:54:01,040 --> 00:54:04,960
unless some other people

00:54:02,400 --> 00:54:06,240
can help out which we would love to have

00:54:04,960 --> 00:54:07,359
but but i think that's a really

00:54:06,240 --> 00:54:10,880
important project i think

00:54:07,359 --> 00:54:13,839
it is it would be the key to um

00:54:10,880 --> 00:54:14,880
to more people sort of being able to do

00:54:13,839 --> 00:54:16,720
the stuff

00:54:14,880 --> 00:54:18,559
that zap was showing in 3d studio max

00:54:16,720 --> 00:54:20,079
where you can have like full viewport

00:54:18,559 --> 00:54:22,800
osl shaders

00:54:20,079 --> 00:54:24,720
um but without everyone who wants that

00:54:22,800 --> 00:54:26,160
having to completely re-implement it as

00:54:24,720 --> 00:54:28,880
x team has done that's a

00:54:26,160 --> 00:54:29,760
that's a pretty high bar uh and that's

00:54:28,880 --> 00:54:31,520
sort of the point

00:54:29,760 --> 00:54:34,000
in my mind of these open source projects

00:54:31,520 --> 00:54:35,760
is it gives us the ability to do some of

00:54:34,000 --> 00:54:40,000
these hard tasks once

00:54:35,760 --> 00:54:42,480
and then have many products and studios

00:54:40,000 --> 00:54:43,040
and other projects use them without

00:54:42,480 --> 00:54:46,319
having to

00:54:43,040 --> 00:54:46,319
redo them from the ground up

00:54:47,839 --> 00:54:54,880
yeah great so

00:54:50,960 --> 00:54:58,640
what gpu ci capabilities would help osl

00:54:54,880 --> 00:55:01,040
um i mean i can take a stab maybe

00:54:58,640 --> 00:55:02,079
um by saying that i think the the main

00:55:01,040 --> 00:55:04,000
thing

00:55:02,079 --> 00:55:06,160
uh like larry alluded to in the talk the

00:55:04,000 --> 00:55:09,680
main thing we're developing is

00:55:06,160 --> 00:55:12,960
an optics cuda back end and

00:55:09,680 --> 00:55:14,319
that specifically ties to

00:55:12,960 --> 00:55:17,280
at the minimum requires some kind of

00:55:14,319 --> 00:55:20,240
cuda capable hardware

00:55:17,280 --> 00:55:20,799
and ideally something with rtx support

00:55:20,240 --> 00:55:23,680
as well

00:55:20,799 --> 00:55:25,200
um so that's that's kind of what we're

00:55:23,680 --> 00:55:28,240
hoping to see there

00:55:25,200 --> 00:55:30,720
um yeah i i know

00:55:28,240 --> 00:55:32,640
through tangential association with the

00:55:30,720 --> 00:55:35,920
open colorio project

00:55:32,640 --> 00:55:39,440
that they are working on getting

00:55:35,920 --> 00:55:42,160
um gpu ci because they they have

00:55:39,440 --> 00:55:43,760
a cpu path and a gpu path they're a

00:55:42,160 --> 00:55:44,400
little different because they are their

00:55:43,760 --> 00:55:48,240
gpu

00:55:44,400 --> 00:55:48,720
is based on um opengl functionality um

00:55:48,240 --> 00:55:49,920
but

00:55:48,720 --> 00:55:52,160
in the course of trying to make this

00:55:49,920 --> 00:55:52,880
work they're you know basically finding

00:55:52,160 --> 00:55:56,480
ways to work

00:55:52,880 --> 00:55:59,520
into their ci the provisioning of um

00:55:56,480 --> 00:56:02,720
you know amazon cloud instances

00:55:59,520 --> 00:56:04,319
that have the gpus that they need and so

00:56:02,720 --> 00:56:06,079
this is another one of those benefits of

00:56:04,319 --> 00:56:08,240
being part of the aswf

00:56:06,079 --> 00:56:10,079
is we're going to wait for them to

00:56:08,240 --> 00:56:13,200
figure some of those details out

00:56:10,079 --> 00:56:13,920
and then draft off of everything they've

00:56:13,200 --> 00:56:17,599
learned to

00:56:13,920 --> 00:56:21,839
set those up github we're using github

00:56:17,599 --> 00:56:25,200
actions ci for for our ci right now

00:56:21,839 --> 00:56:28,799
on their roadmap they mention gpus

00:56:25,200 --> 00:56:29,440
um i it's not clear exactly when those

00:56:28,799 --> 00:56:31,599
will come

00:56:29,440 --> 00:56:33,200
if we if they'll be kind of in time for

00:56:31,599 --> 00:56:34,640
us or if we have to

00:56:33,200 --> 00:56:36,319
do more of this you know provisioning

00:56:34,640 --> 00:56:39,760
the instances that we need

00:56:36,319 --> 00:56:41,520
is kind of a special route but um

00:56:39,760 --> 00:56:43,680
if someone knows about how this stuff

00:56:41,520 --> 00:56:46,000
works and wants to tackle it it would be

00:56:43,680 --> 00:56:47,119
hugely helpful like we've already had

00:56:46,000 --> 00:56:49,839
problems where

00:56:47,119 --> 00:56:50,319
we've accidentally checked things in

00:56:49,839 --> 00:56:52,079
from

00:56:50,319 --> 00:56:54,079
someone who didn't thoroughly test the

00:56:52,079 --> 00:56:54,720
gpu path and it broke it in some sort of

00:56:54,079 --> 00:56:56,799
way

00:56:54,720 --> 00:56:58,319
being even if you're not working on the

00:56:56,799 --> 00:57:00,240
gpu stuff itself

00:56:58,319 --> 00:57:02,400
just knowing that as you submit the pull

00:57:00,240 --> 00:57:03,359
requests that it's going through ci

00:57:02,400 --> 00:57:05,200
tests and you know

00:57:03,359 --> 00:57:06,400
it's not breaking anything on the gpu

00:57:05,200 --> 00:57:09,680
path is just

00:57:06,400 --> 00:57:09,680
it would be a huge step forward

00:57:10,839 --> 00:57:18,640
yeah um so one more question

00:57:14,160 --> 00:57:18,640
um how does material x relate to osl

00:57:20,400 --> 00:57:23,440
i can can we start to answer that

00:57:22,319 --> 00:57:26,559
question uh

00:57:23,440 --> 00:57:28,400
so material x is essentially a higher

00:57:26,559 --> 00:57:31,359
level than osl

00:57:28,400 --> 00:57:32,240
material x will describe like whole

00:57:31,359 --> 00:57:34,640
materials

00:57:32,240 --> 00:57:35,520
and shading networks and and and so it's

00:57:34,640 --> 00:57:38,720
kind of a very

00:57:35,520 --> 00:57:42,240
high level xml based representation now

00:57:38,720 --> 00:57:44,880
osl will be a back end for

00:57:42,240 --> 00:57:45,680
whatever shaders are generated by meta

00:57:44,880 --> 00:57:47,680
lx

00:57:45,680 --> 00:57:49,440
for for example if you load the metalx

00:57:47,680 --> 00:57:52,839
file in arnold right now

00:57:49,440 --> 00:57:56,960
it will rely on the osl code gen

00:57:52,839 --> 00:57:59,920
to render the material as specified

00:57:56,960 --> 00:58:01,119
though they they they overlap slightly

00:57:59,920 --> 00:58:03,680
in some ways but in general like

00:58:01,119 --> 00:58:06,880
metallics is higher level than than also

00:58:03,680 --> 00:58:10,559
i think i think perhaps of osl as being

00:58:06,880 --> 00:58:13,040
the primary um thing that

00:58:10,559 --> 00:58:14,400
materialx is targeting as it generates

00:58:13,040 --> 00:58:16,319
you know things that will execute the

00:58:14,400 --> 00:58:17,920
materialized descriptions so we're

00:58:16,319 --> 00:58:19,920
we're an important part of their

00:58:17,920 --> 00:58:22,160
ecosystem and vice versa

00:58:19,920 --> 00:58:22,960
but we are we're kind of adjacent to

00:58:22,160 --> 00:58:24,880
each other

00:58:22,960 --> 00:58:26,720
um rather than either one really trying

00:58:24,880 --> 00:58:28,559
to do what the other does but they

00:58:26,720 --> 00:58:31,839
they play well together and we want to

00:58:28,559 --> 00:58:31,839
further that relationship

00:58:33,119 --> 00:58:37,760
we're pretty short on time so for

00:58:35,440 --> 00:58:40,559
whatever questions we don't get to

00:58:37,760 --> 00:58:41,760
point people to the slack channel but

00:58:40,559 --> 00:58:44,000
before

00:58:41,760 --> 00:58:44,960
or if we have a minute maybe you can say

00:58:44,000 --> 00:58:51,839
something about

00:58:44,960 --> 00:58:51,839
any other gpu back-ends

00:58:57,280 --> 00:59:03,440
sorry sorry was that a question for me

00:59:00,400 --> 00:59:04,480
yeah other gpu back-ends other gpu back

00:59:03,440 --> 00:59:05,839
ends uh

00:59:04,480 --> 00:59:08,160
yeah i think we're waiting for people to

00:59:05,839 --> 00:59:10,640
suggest what they should be

00:59:08,160 --> 00:59:12,799
uh the main debut effort we have going

00:59:10,640 --> 00:59:13,839
right now the primary target is cuda and

00:59:12,799 --> 00:59:16,880
optics

00:59:13,839 --> 00:59:17,359
um it would be great to have more it

00:59:16,880 --> 00:59:20,480
just

00:59:17,359 --> 00:59:20,480
it requires a champion

00:59:22,160 --> 00:59:27,839
um okay so i think that's

00:59:25,920 --> 00:59:29,280
a wrap on the questions we have so far

00:59:27,839 --> 00:59:31,359
like i said um

00:59:29,280 --> 00:59:33,040
if you have more questions feel free to

00:59:31,359 --> 00:59:37,440
meet us on slack

00:59:33,040 --> 00:59:39,839
and i think um

00:59:37,440 --> 00:59:41,119
i think that covers it for for today

00:59:39,839 --> 00:59:46,400
thank you all for joining

00:59:41,119 --> 00:59:46,400

YouTube URL: https://www.youtube.com/watch?v=WL9FBwV0-3E


