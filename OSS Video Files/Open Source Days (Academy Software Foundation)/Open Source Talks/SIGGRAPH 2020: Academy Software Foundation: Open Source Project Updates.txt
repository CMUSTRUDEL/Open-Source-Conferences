Title: SIGGRAPH 2020: Academy Software Foundation: Open Source Project Updates
Publication date: 2020-08-31
Playlist: Open Source Talks
Description: 
	A whirlwind tour of the latest updates to the six open source projects hosted at the Academy Software Foundation: OpenVDB, OpenColorIO, OpenCue, OpenEXR, OpenTimelineIO, and Open Shading Language.
Captions: 
	00:00:01,199 --> 00:00:05,279
myself

00:00:03,280 --> 00:00:06,799
and your development actually goes all

00:00:05,279 --> 00:00:10,160
the way back to 2009

00:00:06,799 --> 00:00:12,240
and it was open sourced in 2012. um

00:00:10,160 --> 00:00:13,280
as you probably know it's uh it's

00:00:12,240 --> 00:00:15,280
essentially two things

00:00:13,280 --> 00:00:16,640
it's a it's a data structure and it's a

00:00:15,280 --> 00:00:19,520
toolbox of

00:00:16,640 --> 00:00:21,199
of tools that you can use to do uh

00:00:19,520 --> 00:00:24,160
sparse simulations for

00:00:21,199 --> 00:00:25,279
things like water fire and smoke and

00:00:24,160 --> 00:00:29,119
stuff like that

00:00:25,279 --> 00:00:31,679
um so next please

00:00:29,119 --> 00:00:32,960
so uh this is the the technical steering

00:00:31,679 --> 00:00:35,760
committee the current one

00:00:32,960 --> 00:00:36,640
um it has changed a little bit from from

00:00:35,760 --> 00:00:39,760
last year

00:00:36,640 --> 00:00:43,200
um so we have nick from double negative

00:00:39,760 --> 00:00:45,120
dan from industrial light magic peter

00:00:43,200 --> 00:00:47,440
unfortunately used to represent uh

00:00:45,120 --> 00:00:48,000
dreamworks but is currently on leave and

00:00:47,440 --> 00:00:49,760
we're

00:00:48,000 --> 00:00:51,680
sort of trying to to groom someone else

00:00:49,760 --> 00:00:53,680
to take over his spot

00:00:51,680 --> 00:00:55,600
uh we have jeff late from side effects

00:00:53,680 --> 00:00:59,760
and then i'm from uh

00:00:55,600 --> 00:01:03,039
from nvidia starting this year

00:00:59,760 --> 00:01:05,280
so this is uh a list of uh the current

00:01:03,039 --> 00:01:06,640
uh third-party software packages that

00:01:05,280 --> 00:01:09,600
have adopted openvdb

00:01:06,640 --> 00:01:11,920
and in the past couple of actually the

00:01:09,600 --> 00:01:15,439
past half year we had two new uh

00:01:11,920 --> 00:01:19,200
exciting companies so we have blender

00:01:15,439 --> 00:01:21,200
and we have ambergen a real-time fluid

00:01:19,200 --> 00:01:24,000
simulation that exports and imports

00:01:21,200 --> 00:01:24,880
openvdb so that's that's that's quite

00:01:24,000 --> 00:01:28,240
exciting

00:01:24,880 --> 00:01:31,360
next please so

00:01:28,240 --> 00:01:32,240
a few weeks ago we had the last major

00:01:31,360 --> 00:01:36,240
release it was

00:01:32,240 --> 00:01:38,720
7.1 it's a it's a it's a big release

00:01:36,240 --> 00:01:40,479
that's a there's a very long change list

00:01:38,720 --> 00:01:43,680
but in terms of new features

00:01:40,479 --> 00:01:45,439
uh it basically boils down to a new

00:01:43,680 --> 00:01:48,479
tools that allow us to

00:01:45,439 --> 00:01:51,920
very efficiently compute distances

00:01:48,479 --> 00:01:54,240
so we can use it to re-distance

00:01:51,920 --> 00:01:55,520
distance fields we can also use them to

00:01:54,240 --> 00:01:57,280
do something that we've never been able

00:01:55,520 --> 00:01:59,520
to do before which is

00:01:57,280 --> 00:02:00,799
take attributes that are associated with

00:01:59,520 --> 00:02:03,520
a surface

00:02:00,799 --> 00:02:04,000
and then propagate it into the embedding

00:02:03,520 --> 00:02:07,280
space

00:02:04,000 --> 00:02:09,520
of the surface which is uh very useful

00:02:07,280 --> 00:02:10,959
this is a a new algorithm uh that

00:02:09,520 --> 00:02:14,640
actually outperforms

00:02:10,959 --> 00:02:16,319
uh the existing functionality in openvdb

00:02:14,640 --> 00:02:18,400
uh and there are as you can see there

00:02:16,319 --> 00:02:20,560
are actually eight different

00:02:18,400 --> 00:02:22,000
tools that you can use they will

00:02:20,560 --> 00:02:24,879
currently it's just a tool

00:02:22,000 --> 00:02:26,239
but it will be exposed as houdini sobs

00:02:24,879 --> 00:02:29,760
in the future

00:02:26,239 --> 00:02:32,239
next please so

00:02:29,760 --> 00:02:33,280
one of the new exciting announcements we

00:02:32,239 --> 00:02:36,560
made this week

00:02:33,280 --> 00:02:37,840
was the intent to to adopt what's called

00:02:36,560 --> 00:02:41,040
nanovdb

00:02:37,840 --> 00:02:43,680
so nanovdb is uh sort of

00:02:41,040 --> 00:02:45,200
the first time that openvdb officially

00:02:43,680 --> 00:02:48,239
adds support for

00:02:45,200 --> 00:02:51,519
gpu for gpus gpu acceleration

00:02:48,239 --> 00:02:55,440
um so next piece it's contributed from

00:02:51,519 --> 00:02:56,480
um nvidia um and it's sort of it's

00:02:55,440 --> 00:02:59,920
characterized

00:02:56,480 --> 00:03:00,879
by by two things uh one is obviously the

00:02:59,920 --> 00:03:04,080
fact that it

00:03:00,879 --> 00:03:06,400
runs on the gpu uh so openvdb

00:03:04,080 --> 00:03:07,280
despite its success uh has never

00:03:06,400 --> 00:03:10,159
actually been

00:03:07,280 --> 00:03:10,720
um able to run on the gpu both because

00:03:10,159 --> 00:03:12,239
of

00:03:10,720 --> 00:03:14,159
the algorithms themselves but also

00:03:12,239 --> 00:03:17,840
because of the dependencies

00:03:14,159 --> 00:03:21,519
so nanovdb has very few dependencies

00:03:17,840 --> 00:03:24,560
so in a nutshell it's a serialized

00:03:21,519 --> 00:03:27,760
representation of the tree

00:03:24,560 --> 00:03:29,440
that is the backbone of a vdb grid

00:03:27,760 --> 00:03:31,360
so it's pointless which means that we

00:03:29,440 --> 00:03:34,799
can copy it very efficiently from

00:03:31,360 --> 00:03:35,840
the gpu to the cpu it offers the same

00:03:34,799 --> 00:03:39,280
benefits

00:03:35,840 --> 00:03:41,360
as we currently have in openmdb

00:03:39,280 --> 00:03:42,799
uh in fact a lot of our benchmarks have

00:03:41,360 --> 00:03:46,159
shown that it's faster than

00:03:42,799 --> 00:03:48,400
what we currently have in openmdb

00:03:46,159 --> 00:03:51,120
it's initially sort of targeting

00:03:48,400 --> 00:03:54,560
real-time rendering applications

00:03:51,120 --> 00:03:57,280
so unlike openvdb it actually

00:03:54,560 --> 00:03:58,640
includes meta-information metadata that

00:03:57,280 --> 00:04:01,680
can benefit

00:03:58,640 --> 00:04:02,159
ray tracing and volume integration so it

00:04:01,680 --> 00:04:03,840
has

00:04:02,159 --> 00:04:05,200
bounding box information baked into the

00:04:03,840 --> 00:04:07,519
data structure and it also has

00:04:05,200 --> 00:04:10,480
statistics like min and max

00:04:07,519 --> 00:04:11,280
um you can do round trips so you can

00:04:10,480 --> 00:04:13,920
serialize

00:04:11,280 --> 00:04:15,760
an open vdb to a nano vdb and you can go

00:04:13,920 --> 00:04:18,560
back again you can do round trips

00:04:15,760 --> 00:04:20,079
um and it supports all the the value

00:04:18,560 --> 00:04:23,520
types that you find in openvp

00:04:20,079 --> 00:04:26,639
including points um another thing that

00:04:23,520 --> 00:04:28,479
is is very unique is that it's agnostic

00:04:26,639 --> 00:04:31,680
and it's nimble here's the name nano

00:04:28,479 --> 00:04:33,520
um it's actually the

00:04:31,680 --> 00:04:34,720
the sort of core functionality is a

00:04:33,520 --> 00:04:37,040
single header file

00:04:34,720 --> 00:04:38,320
um so one of the complaints that we've

00:04:37,040 --> 00:04:41,680
had in the past

00:04:38,320 --> 00:04:44,639
uh when people try to adopt open vdb is

00:04:41,680 --> 00:04:45,680
there's a lot of dependencies um and

00:04:44,639 --> 00:04:48,720
some of them are

00:04:45,680 --> 00:04:50,320
quite tricky to to build and some of

00:04:48,720 --> 00:04:53,440
them you might not want in your project

00:04:50,320 --> 00:04:56,080
so nanovdb has has none of those it

00:04:53,440 --> 00:04:57,840
the dependency on openvdb is completely

00:04:56,080 --> 00:04:59,440
optional

00:04:57,840 --> 00:05:00,880
it's actually implemented in two

00:04:59,440 --> 00:05:04,720
languages

00:05:00,880 --> 00:05:07,520
c plus plus 11 and c99

00:05:04,720 --> 00:05:08,720
it also uses explicit memory alignment

00:05:07,520 --> 00:05:10,800
which is new

00:05:08,720 --> 00:05:12,240
and that actually allows it to uh sort

00:05:10,800 --> 00:05:14,240
of tap into

00:05:12,240 --> 00:05:15,919
a lot of different graphics apis so even

00:05:14,240 --> 00:05:19,280
though it's developed at nvidia

00:05:15,919 --> 00:05:21,199
it's not sort of it's not biased against

00:05:19,280 --> 00:05:23,680
let's say cooler and opt cooler and

00:05:21,199 --> 00:05:27,280
optics but it also supports things like

00:05:23,680 --> 00:05:28,639
opengl and opencl dsl and in the future

00:05:27,280 --> 00:05:32,000
we plan to add

00:05:28,639 --> 00:05:33,360
webgl metal vulcan um

00:05:32,000 --> 00:05:36,080
and then it's also worth noting that it

00:05:33,360 --> 00:05:39,039
has a gpu sorry a cpu fallback

00:05:36,080 --> 00:05:40,560
so even though it's it's designed to run

00:05:39,039 --> 00:05:43,039
on a graphics card

00:05:40,560 --> 00:05:45,360
you can also run it on on the cpu and

00:05:43,039 --> 00:05:46,560
and the benchmarks that we've

00:05:45,360 --> 00:05:52,400
performed actually shows that it's

00:05:46,560 --> 00:05:55,440
slightly faster uh next place

00:05:52,400 --> 00:05:56,240
so another uh exciting addition to the

00:05:55,440 --> 00:05:59,440
library

00:05:56,240 --> 00:06:03,120
is ax so ax comes from

00:05:59,440 --> 00:06:05,360
double negative it's just in time compil

00:06:03,120 --> 00:06:06,479
compile expression language that's sort

00:06:05,360 --> 00:06:09,919
of specific to

00:06:06,479 --> 00:06:13,360
a vdb it was actually announced

00:06:09,919 --> 00:06:16,400
and released in a bitter form at digipro

00:06:13,360 --> 00:06:16,800
two years ago but now is the time when

00:06:16,400 --> 00:06:18,319
we

00:06:16,800 --> 00:06:19,919
believe that it will actually be ready

00:06:18,319 --> 00:06:21,199
for our production release probably

00:06:19,919 --> 00:06:23,120
before the end of the year or at least

00:06:21,199 --> 00:06:26,000
hopefully

00:06:23,120 --> 00:06:26,960
so you're sort of seeing uh three

00:06:26,000 --> 00:06:30,720
screenshots

00:06:26,960 --> 00:06:33,600
uh the the two

00:06:30,720 --> 00:06:35,520
brown uh screenshots we code in a sort

00:06:33,600 --> 00:06:37,919
of illustrates the

00:06:35,520 --> 00:06:39,199
the departure from sort of vanilla c

00:06:37,919 --> 00:06:41,039
plus plus

00:06:39,199 --> 00:06:43,520
code that you would need to write in

00:06:41,039 --> 00:06:46,479
order to have a procedure to

00:06:43,520 --> 00:06:48,240
modify uh the partic particle simulation

00:06:46,479 --> 00:06:50,080
that you see on the right and at the

00:06:48,240 --> 00:06:53,039
very bottom you see the same

00:06:50,080 --> 00:06:53,919
code written in ax so it's it's very

00:06:53,039 --> 00:06:57,120
compact

00:06:53,919 --> 00:06:58,639
uh it's it's very intuitive um and it's

00:06:57,120 --> 00:06:59,520
actually also very performant which is

00:06:58,639 --> 00:07:02,479
really cool

00:06:59,520 --> 00:07:04,240
so it actually targets the same speed as

00:07:02,479 --> 00:07:05,199
as you would get with the raw c plus

00:07:04,240 --> 00:07:07,680
plus

00:07:05,199 --> 00:07:07,680
next place

00:07:09,199 --> 00:07:14,560
so this is uh sort of a dump of

00:07:12,400 --> 00:07:15,440
of what we have on the roadmap right now

00:07:14,560 --> 00:07:17,360
so

00:07:15,440 --> 00:07:19,120
as you can imagine we are very busy

00:07:17,360 --> 00:07:22,639
integrating uh

00:07:19,120 --> 00:07:25,520
ax and nanovdb we expect it to come out

00:07:22,639 --> 00:07:26,160
uh hopefully before the end of the year

00:07:25,520 --> 00:07:29,039
so we have

00:07:26,160 --> 00:07:30,560
one major release coming up soon but we

00:07:29,039 --> 00:07:33,360
still have a lot of other things on

00:07:30,560 --> 00:07:34,240
on the roadmap so we still want to uh

00:07:33,360 --> 00:07:36,479
adopt

00:07:34,240 --> 00:07:38,319
a true multi-resolution in vdb so we're

00:07:36,479 --> 00:07:40,639
still collaborating with

00:07:38,319 --> 00:07:41,360
autodesk and the bifrost team that have

00:07:40,639 --> 00:07:44,080
a very

00:07:41,360 --> 00:07:44,800
uh cool approach to this we are also

00:07:44,080 --> 00:07:47,440
talking

00:07:44,800 --> 00:07:48,639
to double negative potentially to adopt

00:07:47,440 --> 00:07:52,240
distributed

00:07:48,639 --> 00:07:54,879
mpi support into vdb

00:07:52,240 --> 00:07:56,240
um and a ton of other tools that you can

00:07:54,879 --> 00:07:57,120
see on this line i won't go into all the

00:07:56,240 --> 00:08:01,520
details

00:07:57,120 --> 00:08:04,000
uh sort of in the the more uh sort of

00:08:01,520 --> 00:08:05,759
uh what should i say things that that

00:08:04,000 --> 00:08:08,400
you might feel on a day-to-day

00:08:05,759 --> 00:08:09,039
uh changes will be will probably get rid

00:08:08,400 --> 00:08:13,840
of

00:08:09,039 --> 00:08:16,319
uh the the new make system build system

00:08:13,840 --> 00:08:18,000
we want to re-haul all the documentation

00:08:16,319 --> 00:08:18,639
uh we'll actually even re-haul some of

00:08:18,000 --> 00:08:22,160
the

00:08:18,639 --> 00:08:25,039
the file structures we also want to take

00:08:22,160 --> 00:08:28,560
another look at the math library

00:08:25,039 --> 00:08:30,560
the unit tests needs to be beefed up and

00:08:28,560 --> 00:08:31,919
some of the units are actually too slow

00:08:30,560 --> 00:08:35,039
so there's a lot of work

00:08:31,919 --> 00:08:35,519
uh in that space as well but yeah as you

00:08:35,039 --> 00:08:38,719
can see

00:08:35,519 --> 00:08:41,039
there's a lot of work ahead of us so if

00:08:38,719 --> 00:08:42,159
any of you are interested uh we would

00:08:41,039 --> 00:08:44,080
love to

00:08:42,159 --> 00:08:46,000
accept you into the project so next

00:08:44,080 --> 00:08:49,200
please

00:08:46,000 --> 00:08:50,880
so um we have a website um

00:08:49,200 --> 00:08:52,560
there is a forum where you can ask

00:08:50,880 --> 00:08:55,600
questions uh

00:08:52,560 --> 00:08:58,320
we also have a weekly meeting

00:08:55,600 --> 00:08:59,200
it's a tuesday 10 a.m it's public anyone

00:08:58,320 --> 00:09:01,519
can drop in

00:08:59,200 --> 00:09:02,800
um you can also find a link to the

00:09:01,519 --> 00:09:05,120
calendar sometimes we

00:09:02,800 --> 00:09:06,160
may actually end up canceling or

00:09:05,120 --> 00:09:08,959
changing the time

00:09:06,160 --> 00:09:09,600
so keep an eye on that but yeah i hope

00:09:08,959 --> 00:09:12,240
to

00:09:09,600 --> 00:09:14,480
meet some of you online in in the future

00:09:12,240 --> 00:09:14,480
thanks

00:09:16,560 --> 00:09:21,120
great hi i'm doug walker i'm the

00:09:19,279 --> 00:09:23,200
technology lead for color science at

00:09:21,120 --> 00:09:25,680
autodesk and i'm serving as the chief

00:09:23,200 --> 00:09:27,920
architect on the open clario tsc

00:09:25,680 --> 00:09:29,120
i'm going to give you a whirlwind update

00:09:27,920 --> 00:09:32,240
on the progress

00:09:29,120 --> 00:09:34,880
of open clario over the past year next

00:09:32,240 --> 00:09:34,880
slide please

00:09:35,040 --> 00:09:40,399
so openclario is an open source library

00:09:37,279 --> 00:09:42,880
for color management it joined the aswf

00:09:40,399 --> 00:09:45,120
in february of 2019 and reached adopted

00:09:42,880 --> 00:09:46,800
status in november of last year

00:09:45,120 --> 00:09:48,240
it was developed at sony pictures

00:09:46,800 --> 00:09:50,720
imageworks and it's

00:09:48,240 --> 00:09:53,200
supported in dozens of applications that

00:09:50,720 --> 00:09:56,000
are used in the vfx industry

00:09:53,200 --> 00:09:56,000
next slide please

00:09:57,839 --> 00:10:02,000
so the technical steering committee

00:09:59,760 --> 00:10:05,200
provides the governance for the project

00:10:02,000 --> 00:10:07,760
and we meet weekly at 12 30

00:10:05,200 --> 00:10:08,560
eastern time these are public meetings

00:10:07,760 --> 00:10:12,079
on zoom and

00:10:08,560 --> 00:10:15,200
anyone is welcome to join uh the current

00:10:12,079 --> 00:10:16,320
um leadership which our elected roles on

00:10:15,200 --> 00:10:18,959
the tsc

00:10:16,320 --> 00:10:20,079
michael dolan is from epic games as the

00:10:18,959 --> 00:10:22,160
chairperson

00:10:20,079 --> 00:10:23,760
i'm serving as the chief architect and

00:10:22,160 --> 00:10:26,160
shawn cooper from dnag

00:10:23,760 --> 00:10:27,600
is the representative to the aces

00:10:26,160 --> 00:10:29,839
project

00:10:27,600 --> 00:10:30,640
we welcomed three new members on to the

00:10:29,839 --> 00:10:33,680
tsc

00:10:30,640 --> 00:10:36,079
this year mate shu from image works

00:10:33,680 --> 00:10:36,880
carol payne from netflix and mark

00:10:36,079 --> 00:10:40,800
titchener from

00:10:36,880 --> 00:10:40,800
foundry next slide please

00:10:41,360 --> 00:10:44,640
so this is a huge year for our project

00:10:44,000 --> 00:10:47,200
because

00:10:44,640 --> 00:10:49,279
we are launching our new version open

00:10:47,200 --> 00:10:53,120
clario v2

00:10:49,279 --> 00:10:57,279
so this has um this initiative started

00:10:53,120 --> 00:10:58,320
in uh 2017 sc ref with a proposal from

00:10:57,279 --> 00:11:01,839
autodesk

00:10:58,320 --> 00:11:02,720
we formed a ocio v2 working group that

00:11:01,839 --> 00:11:06,079
year

00:11:02,720 --> 00:11:08,320
and i'd like to thank the participants

00:11:06,079 --> 00:11:09,120
from the vfx studios and interested in

00:11:08,320 --> 00:11:12,320
vendors

00:11:09,120 --> 00:11:12,320
for taking time to

00:11:12,959 --> 00:11:17,040
guide us on new feature development

00:11:14,880 --> 00:11:18,320
review the code etc their their

00:11:17,040 --> 00:11:21,760
participation has been

00:11:18,320 --> 00:11:25,279
invaluable uh and autodesk stepped up

00:11:21,760 --> 00:11:27,440
and sponsored myself uh patrick o'doul

00:11:25,279 --> 00:11:28,959
and bernard of the fed to work full-time

00:11:27,440 --> 00:11:31,680
on this project

00:11:28,959 --> 00:11:33,120
patrick has been the lead developer for

00:11:31,680 --> 00:11:35,600
us

00:11:33,120 --> 00:11:35,600
thanks a lot

00:11:37,279 --> 00:11:42,079
so this is um as i said it's three years

00:11:40,000 --> 00:11:44,560
in the making and there are a ton of new

00:11:42,079 --> 00:11:48,560
features and i don't have time to

00:11:44,560 --> 00:11:51,760
go into all of them uh some of the

00:11:48,560 --> 00:11:52,480
key ones are a new gpu renderer native

00:11:51,760 --> 00:11:56,399
support

00:11:52,480 --> 00:11:58,000
for aces many user experience

00:11:56,399 --> 00:12:01,440
enhancements to

00:11:58,000 --> 00:12:03,680
make life easier for artists uh python

00:12:01,440 --> 00:12:06,800
new set of python bindings that

00:12:03,680 --> 00:12:08,079
michael contributed and and many other

00:12:06,800 --> 00:12:11,519
new features

00:12:08,079 --> 00:12:14,720
michael patrick and i wrote a paper for

00:12:11,519 --> 00:12:15,680
digit pro this year and we went into

00:12:14,720 --> 00:12:18,480
more detail on

00:12:15,680 --> 00:12:20,480
on all the new features and we're

00:12:18,480 --> 00:12:23,120
planning on posting that on the ocio

00:12:20,480 --> 00:12:25,839
website shortly

00:12:23,120 --> 00:12:25,839
next slide please

00:12:26,240 --> 00:12:29,440
so this is our uh our timeline for the

00:12:28,880 --> 00:12:32,480
project

00:12:29,440 --> 00:12:35,440
so uh we

00:12:32,480 --> 00:12:37,600
if for those of you who um were with us

00:12:35,440 --> 00:12:41,120
at siggraph last year

00:12:37,600 --> 00:12:42,959
in our roadmap presentation we indicated

00:12:41,120 --> 00:12:45,279
that

00:12:42,959 --> 00:12:46,880
we would be feature complete with v2 at

00:12:45,279 --> 00:12:49,279
siggraph this year

00:12:46,880 --> 00:12:50,160
i'm pleased to report that we've tracked

00:12:49,279 --> 00:12:53,440
that schedule

00:12:50,160 --> 00:12:56,320
well we have a couple of pull requests

00:12:53,440 --> 00:12:56,880
landing last week and this week but

00:12:56,320 --> 00:12:59,839
feature

00:12:56,880 --> 00:13:00,480
development is essentially finished and

00:12:59,839 --> 00:13:02,160
we're now

00:13:00,480 --> 00:13:04,320
entering a four-month period of

00:13:02,160 --> 00:13:08,079
stabilization and bug fixing

00:13:04,320 --> 00:13:11,360
so this is the point in time where

00:13:08,079 --> 00:13:13,760
we are inviting developers to start

00:13:11,360 --> 00:13:14,880
integrating the new version into their

00:13:13,760 --> 00:13:18,560
applications

00:13:14,880 --> 00:13:21,680
and provide us feedback we will use this

00:13:18,560 --> 00:13:24,320
four month period to do any fine

00:13:21,680 --> 00:13:25,200
tuning of features and fix bugs and so

00:13:24,320 --> 00:13:26,959
forth

00:13:25,200 --> 00:13:29,440
and then at the end of this year

00:13:26,959 --> 00:13:33,519
planning on making the official

00:13:29,440 --> 00:13:36,399
stable v2 release and that will be

00:13:33,519 --> 00:13:37,200
what products will start shipping with

00:13:36,399 --> 00:13:40,560
next year

00:13:37,200 --> 00:13:43,279
oh lawrence yeah uh we are open clario

00:13:40,560 --> 00:13:45,680
v2 is in the vfx reference platform for

00:13:43,279 --> 00:13:48,399
calendar year 2021

00:13:45,680 --> 00:13:51,199
and so we're looking forward to seeing a

00:13:48,399 --> 00:13:55,120
product ship next year with v2

00:13:51,199 --> 00:13:58,079
next slide please so i'd like to give a

00:13:55,120 --> 00:14:00,160
shout out to mario rokiki from dnag for

00:13:58,079 --> 00:14:03,199
coming up with a cool new logo for the

00:14:00,160 --> 00:14:05,600
project and a visual identity guide

00:14:03,199 --> 00:14:06,880
this is really exciting and we are

00:14:05,600 --> 00:14:10,240
leveraging that

00:14:06,880 --> 00:14:13,519
for in next slide please

00:14:10,240 --> 00:14:16,880
we are leveraging that for our

00:14:13,519 --> 00:14:19,600
refreshed website and documentation so

00:14:16,880 --> 00:14:21,760
if you go to opencolorio.org you'll see

00:14:19,600 --> 00:14:25,600
our new landing page and this will

00:14:21,760 --> 00:14:27,839
direct you to our new documentation

00:14:25,600 --> 00:14:29,040
the documentation is a work in progress

00:14:27,839 --> 00:14:31,680
but

00:14:29,040 --> 00:14:33,600
we do have preliminary information on

00:14:31,680 --> 00:14:38,320
all of the new v2 features

00:14:33,600 --> 00:14:40,880
and guide to upgrading to uh to v2 so

00:14:38,320 --> 00:14:42,880
we hope you'll check that out uh that

00:14:40,880 --> 00:14:44,079
was that initiative was led by carol

00:14:42,880 --> 00:14:47,199
payne of netflix

00:14:44,079 --> 00:14:48,079
and sean cooper at d-neg and want to

00:14:47,199 --> 00:14:50,160
extend my

00:14:48,079 --> 00:14:51,920
sincere thanks to them for leading this

00:14:50,160 --> 00:14:54,959
initiative

00:14:51,920 --> 00:14:57,839
next slide so we're looking for

00:14:54,959 --> 00:15:00,160
help and volunteers first of all to test

00:14:57,839 --> 00:15:01,760
the new version

00:15:00,160 --> 00:15:04,320
we're also looking for people to write

00:15:01,760 --> 00:15:06,880
tutorials and review the documentation

00:15:04,320 --> 00:15:07,920
and let us know if there are things that

00:15:06,880 --> 00:15:12,160
they'd like to see

00:15:07,920 --> 00:15:15,279
added there's a new version

00:15:12,160 --> 00:15:18,480
of the aces config for open color i o

00:15:15,279 --> 00:15:21,040
underway that will take advantage of the

00:15:18,480 --> 00:15:23,600
new features in the library to

00:15:21,040 --> 00:15:24,399
make the to improve the accuracy to

00:15:23,600 --> 00:15:26,399
improve the

00:15:24,399 --> 00:15:28,399
user experience for artists and to make

00:15:26,399 --> 00:15:30,480
the config more compact

00:15:28,399 --> 00:15:32,240
and so if you're interested in that we

00:15:30,480 --> 00:15:33,199
encourage you to get involved that group

00:15:32,240 --> 00:15:36,000
is meeting

00:15:33,199 --> 00:15:37,680
every other week on tuesdays we're

00:15:36,000 --> 00:15:40,480
looking for people to write new plugins

00:15:37,680 --> 00:15:43,759
using v2 and many more things just

00:15:40,480 --> 00:15:45,920
just ask thanks a lot

00:15:43,759 --> 00:15:46,880
so here's how to get involved the new

00:15:45,920 --> 00:15:49,759
code is

00:15:46,880 --> 00:15:50,639
available in the master branch on github

00:15:49,759 --> 00:15:52,839
the new

00:15:50,639 --> 00:15:54,480
website and documentation is at

00:15:52,839 --> 00:15:58,160
opencolorio.org

00:15:54,480 --> 00:16:00,240
we have two mailing lists ocio dash dev

00:15:58,160 --> 00:16:04,079
no cio dash user

00:16:00,240 --> 00:16:07,040
you can join these at the aswf website

00:16:04,079 --> 00:16:08,399
and we also have an active discussion on

00:16:07,040 --> 00:16:10,079
slacks so

00:16:08,399 --> 00:16:12,160
you're welcome to join the slack

00:16:10,079 --> 00:16:15,680
instance as well

00:16:12,160 --> 00:16:19,440
so that's uh that's it i hope you enjoy

00:16:15,680 --> 00:16:23,279
the new features in openclario v2

00:16:19,440 --> 00:16:25,600
and uh that concludes the project update

00:16:23,279 --> 00:16:25,600
thanks

00:16:28,399 --> 00:16:32,880
hi everyone i'm brian cipriano i'm a

00:16:30,959 --> 00:16:33,279
senior software engineer at google and

00:16:32,880 --> 00:16:36,320
the

00:16:33,279 --> 00:16:39,199
chairperson of the openqtsc and i'm

00:16:36,320 --> 00:16:42,959
giving an update on the openq project

00:16:39,199 --> 00:16:45,920
next slide please yeah so uh opeq

00:16:42,959 --> 00:16:48,079
if you're not familiar with it is a

00:16:45,920 --> 00:16:49,440
fully featured render manager

00:16:48,079 --> 00:16:51,040
we call it a render manager as a

00:16:49,440 --> 00:16:52,720
shorthand but really any kind of

00:16:51,040 --> 00:16:53,759
distributed work can go through it uh

00:16:52,720 --> 00:16:55,600
it's

00:16:53,759 --> 00:16:57,680
agnostic to the software that that runs

00:16:55,600 --> 00:16:58,720
on it so i can really run any kind of

00:16:57,680 --> 00:17:02,560
workloads you have

00:16:58,720 --> 00:17:05,039
um it we joined the aswf uh about a year

00:17:02,560 --> 00:17:08,240
and a half ago

00:17:05,039 --> 00:17:10,400
just before last last year's siggraph

00:17:08,240 --> 00:17:12,079
so openq was developed originally

00:17:10,400 --> 00:17:16,160
internally as a project

00:17:12,079 --> 00:17:18,400
at sony pictures image works and

00:17:16,160 --> 00:17:20,160
we here at google cloud worked with spi

00:17:18,400 --> 00:17:22,720
to to open source it

00:17:20,160 --> 00:17:24,240
uh around january of last year uh was

00:17:22,720 --> 00:17:26,640
adopted by the aswf

00:17:24,240 --> 00:17:27,839
uh shortly after that uh and since then

00:17:26,640 --> 00:17:30,160
we've built out

00:17:27,839 --> 00:17:31,919
a good pool of contributors and

00:17:30,160 --> 00:17:33,679
committers especially on our tsc

00:17:31,919 --> 00:17:35,840
from a bunch of different companies all

00:17:33,679 --> 00:17:38,640
the major cloud providers are

00:17:35,840 --> 00:17:39,120
are included there as well um so we do

00:17:38,640 --> 00:17:41,760
uh

00:17:39,120 --> 00:17:42,960
regular releases and uh we've done a

00:17:41,760 --> 00:17:43,919
bunch of work over the past year that

00:17:42,960 --> 00:17:47,520
i'll get to in

00:17:43,919 --> 00:17:49,760
a bit next slide please

00:17:47,520 --> 00:17:50,720
yeah so um we've done a lot of work over

00:17:49,760 --> 00:17:54,640
the past year

00:17:50,720 --> 00:17:57,760
um we've uh we've done a lot of work on

00:17:54,640 --> 00:17:59,840
uh you know kind of sandbox deployments

00:17:57,760 --> 00:18:01,440
and documentation you know help getting

00:17:59,840 --> 00:18:02,960
up and running open queue quickly

00:18:01,440 --> 00:18:05,200
i think when we launched originally it

00:18:02,960 --> 00:18:07,280
was it's quite complex to set up an opeq

00:18:05,200 --> 00:18:10,000
deployment even just to try it out so

00:18:07,280 --> 00:18:10,799
uh we we specifically targeted that and

00:18:10,000 --> 00:18:12,640
have some uh

00:18:10,799 --> 00:18:14,400
some good stuff linked on our uh on the

00:18:12,640 --> 00:18:16,240
openq website for how to get

00:18:14,400 --> 00:18:18,240
uh uh an example deployment up and

00:18:16,240 --> 00:18:20,880
running quickly

00:18:18,240 --> 00:18:21,760
we've uh in in working to expand our

00:18:20,880 --> 00:18:23,280
contributor pool

00:18:21,760 --> 00:18:24,880
we've put together a bunch of uh

00:18:23,280 --> 00:18:27,520
contributor guides um

00:18:24,880 --> 00:18:28,000
guides for helping folks get set up on

00:18:27,520 --> 00:18:29,840
all the different

00:18:28,000 --> 00:18:31,280
platforms for making changes to the

00:18:29,840 --> 00:18:35,360
system

00:18:31,280 --> 00:18:37,520
um we just just recently announced that

00:18:35,360 --> 00:18:39,440
our windows support is moving to beta

00:18:37,520 --> 00:18:41,440
i think at this time at siggraph last

00:18:39,440 --> 00:18:44,160
year we had no windows support

00:18:41,440 --> 00:18:45,440
that was a few months ago we released an

00:18:44,160 --> 00:18:47,200
alpha version of that

00:18:45,440 --> 00:18:49,440
that's being now successfully used in

00:18:47,200 --> 00:18:52,320
production by a few folks so we promoted

00:18:49,440 --> 00:18:53,679
that to beta status

00:18:52,320 --> 00:18:55,600
so we're very happy to see that move

00:18:53,679 --> 00:18:57,600
along

00:18:55,600 --> 00:18:58,720
we have also participated in google's

00:18:57,600 --> 00:19:01,120
summer code program

00:18:58,720 --> 00:19:02,720
this year uh which has been a really big

00:19:01,120 --> 00:19:05,280
success uh we have

00:19:02,720 --> 00:19:07,120
been working on a cloud plug-in for

00:19:05,280 --> 00:19:10,559
managing render nodes in the cloud

00:19:07,120 --> 00:19:12,400
vl and queue which should be

00:19:10,559 --> 00:19:14,320
coming out within the next hopefully

00:19:12,400 --> 00:19:16,799
making its way into the main branch of

00:19:14,320 --> 00:19:19,600
open cue within the next month or so

00:19:16,799 --> 00:19:20,160
we did a big a big migration to uh along

00:19:19,600 --> 00:19:21,919
with the other

00:19:20,160 --> 00:19:23,440
aswf projects to migrate our ci

00:19:21,919 --> 00:19:23,919
pipelines and release pipelines into

00:19:23,440 --> 00:19:26,160
github

00:19:23,919 --> 00:19:27,679
actions we recently completed that so

00:19:26,160 --> 00:19:29,919
everything is kind of nicely natively

00:19:27,679 --> 00:19:33,039
integrated in github now

00:19:29,919 --> 00:19:33,520
works works quite well uh kind of the

00:19:33,039 --> 00:19:34,799
biggest

00:19:33,520 --> 00:19:36,720
the biggest piece of work we've done

00:19:34,799 --> 00:19:38,559
over the last year was all the kind of

00:19:36,720 --> 00:19:40,320
small improvements and bug fixes and

00:19:38,559 --> 00:19:42,000
stuff like that i think that probably

00:19:40,320 --> 00:19:43,919
took the bulk of our time and and

00:19:42,000 --> 00:19:46,160
a bit more than expected but uh as a

00:19:43,919 --> 00:19:48,240
result open cue is is much more stable

00:19:46,160 --> 00:19:49,200
and then nice to use than it was a year

00:19:48,240 --> 00:19:51,039
ago so

00:19:49,200 --> 00:19:52,240
if you haven't checked it out in a while

00:19:51,039 --> 00:19:53,679
it's definitely worth again worth

00:19:52,240 --> 00:19:56,160
another look again i think

00:19:53,679 --> 00:19:57,640
um all that is kind of wrapped up in the

00:19:56,160 --> 00:20:00,400
uh version

00:19:57,640 --> 00:20:02,320
0.4.5.5 which just got released

00:20:00,400 --> 00:20:03,600
about a week ago so that should be

00:20:02,320 --> 00:20:04,799
almost completely up to date with the

00:20:03,600 --> 00:20:09,200
with the master branch

00:20:04,799 --> 00:20:09,200
so check that out next slide

00:20:09,440 --> 00:20:15,200
um yeah but a bit of statistics on our

00:20:13,760 --> 00:20:18,400
on what we've been doing so we brought

00:20:15,200 --> 00:20:21,760
the pool of contributors from about six

00:20:18,400 --> 00:20:23,120
a year ago to 24 now um any of those are

00:20:21,760 --> 00:20:24,400
you know active regular contributors

00:20:23,120 --> 00:20:25,919
which is very nice to see the pool

00:20:24,400 --> 00:20:28,400
committers went from two to six

00:20:25,919 --> 00:20:30,080
as well you know we kind of have been

00:20:28,400 --> 00:20:31,919
very active in seeking out amongst our

00:20:30,080 --> 00:20:32,720
regular contributors folks who are ready

00:20:31,919 --> 00:20:34,480
to be

00:20:32,720 --> 00:20:37,280
you know reviewing code and merging it

00:20:34,480 --> 00:20:40,320
in uh which is very nice to see

00:20:37,280 --> 00:20:41,600
uh we we merge about three and a half

00:20:40,320 --> 00:20:44,480
pr's per week

00:20:41,600 --> 00:20:45,919
um which is pretty about about the same

00:20:44,480 --> 00:20:47,679
place we were about a year ago

00:20:45,919 --> 00:20:49,200
but uh it's in a much bigger pool of

00:20:47,679 --> 00:20:49,840
contributors now so it's nice to see

00:20:49,200 --> 00:20:52,320
things

00:20:49,840 --> 00:20:53,039
uh keeping pace there and over the past

00:20:52,320 --> 00:20:55,120
year we've closed

00:20:53,039 --> 00:20:56,159
112 issues which was which was great to

00:20:55,120 --> 00:21:00,080
see

00:20:56,159 --> 00:21:02,880
next uh for the next year

00:21:00,080 --> 00:21:04,799
um some of these will look familiar from

00:21:02,880 --> 00:21:06,240
from past presentations uh like i said

00:21:04,799 --> 00:21:08,640
we spent spent a lot of time on kind of

00:21:06,240 --> 00:21:10,559
smaller changes over the past year so

00:21:08,640 --> 00:21:12,320
uh now kind of turning our attention

00:21:10,559 --> 00:21:13,919
more towards the bigger ticket items

00:21:12,320 --> 00:21:15,919
we definitely want to keep building out

00:21:13,919 --> 00:21:17,120
more windows support

00:21:15,919 --> 00:21:18,559
you know things like i think most of our

00:21:17,120 --> 00:21:20,960
documentation is still geared towards

00:21:18,559 --> 00:21:23,919
linux users getting started guys as well

00:21:20,960 --> 00:21:25,360
um we we want to we want to you know

00:21:23,919 --> 00:21:26,960
build out windows versions of that much

00:21:25,360 --> 00:21:30,559
more as we now that we've entered beta

00:21:26,960 --> 00:21:32,799
phase and things are more stable there

00:21:30,559 --> 00:21:34,240
user management permissions is a big big

00:21:32,799 --> 00:21:36,080
ticket item right now it's uh

00:21:34,240 --> 00:21:38,000
kind of things are fairly open within

00:21:36,080 --> 00:21:40,559
the system right now and and

00:21:38,000 --> 00:21:42,080
we're working on working on designing a

00:21:40,559 --> 00:21:45,039
kind of fine grain permissions model for

00:21:42,080 --> 00:21:47,120
the system uh packaging installers

00:21:45,039 --> 00:21:48,400
is a big thing right now there's a lot

00:21:47,120 --> 00:21:50,799
of you know it's still

00:21:48,400 --> 00:21:52,320
a fairly technical task to uh to set up

00:21:50,799 --> 00:21:55,120
and run open queue

00:21:52,320 --> 00:21:56,400
um lots of command line to run so we

00:21:55,120 --> 00:21:58,720
hope to kind of

00:21:56,400 --> 00:21:59,840
uh package that up and then build into

00:21:58,720 --> 00:22:02,559
uh build some

00:21:59,840 --> 00:22:04,400
some os native packages which will make

00:22:02,559 --> 00:22:07,520
things a lot easier

00:22:04,400 --> 00:22:08,720
um as we wrap up summer code we're

00:22:07,520 --> 00:22:10,159
definitely going to be building more on

00:22:08,720 --> 00:22:12,720
the cloud support that we have

00:22:10,159 --> 00:22:14,720
um i think the base the kind of base

00:22:12,720 --> 00:22:17,440
layer of it is coming from our summer

00:22:14,720 --> 00:22:19,760
code student and uh we definitely plan

00:22:17,440 --> 00:22:23,039
to build on that some more

00:22:19,760 --> 00:22:25,120
um we

00:22:23,039 --> 00:22:26,559
we will definitely want to keep growing

00:22:25,120 --> 00:22:27,840
in the contributor pool i think we're

00:22:26,559 --> 00:22:29,280
very happy with what's happened in the

00:22:27,840 --> 00:22:31,760
past year but we're always seeking out

00:22:29,280 --> 00:22:34,559
new folks to contribute and

00:22:31,760 --> 00:22:36,559
graduate to become committers as well so

00:22:34,559 --> 00:22:39,120
always on the lookout for that

00:22:36,559 --> 00:22:41,360
and we're also looking to get openq

00:22:39,120 --> 00:22:42,720
graduated as a project within the aswf

00:22:41,360 --> 00:22:45,039
we're still currently in

00:22:42,720 --> 00:22:46,159
incubation status and hopefully to

00:22:45,039 --> 00:22:50,159
graduate on that soon

00:22:46,159 --> 00:22:50,159
in the next few months next

00:22:50,480 --> 00:22:55,919
cool so getting involved with open cue

00:22:53,600 --> 00:22:58,080
link openq.io is a great place to start

00:22:55,919 --> 00:22:59,760
for users or developers

00:22:58,080 --> 00:23:02,159
that'll get you started with

00:22:59,760 --> 00:23:03,360
documentation installers all that kind

00:23:02,159 --> 00:23:05,280
of stuff

00:23:03,360 --> 00:23:06,480
our main our main repo is linked here

00:23:05,280 --> 00:23:07,440
where you can track our development

00:23:06,480 --> 00:23:10,559
status and

00:23:07,440 --> 00:23:12,000
file issues all that good stuff

00:23:10,559 --> 00:23:14,400
we have a few we have users and

00:23:12,000 --> 00:23:16,080
developers lists and forums linked here

00:23:14,400 --> 00:23:18,240
as well

00:23:16,080 --> 00:23:19,960
and we are also active on our slack

00:23:18,240 --> 00:23:22,799
channel as well at

00:23:19,960 --> 00:23:24,720
slack.aswf.io on the openq channel so

00:23:22,799 --> 00:23:26,080
definitely find us there where we're

00:23:24,720 --> 00:23:28,640
always hanging out and happy to answer

00:23:26,080 --> 00:23:28,640
any questions

00:23:28,880 --> 00:23:32,159
and i think that's it for me

00:23:35,280 --> 00:23:42,000
hello um i guess good

00:23:38,559 --> 00:23:44,400
emily thanks um so yeah so i'll give you

00:23:42,000 --> 00:23:47,840
a brief update uh on openexr

00:23:44,400 --> 00:23:49,440
um and uh i think i see a bunch of

00:23:47,840 --> 00:23:50,960
questions in chat so i think i'll kind

00:23:49,440 --> 00:23:54,159
of plow through a bunch of this stuff so

00:23:50,960 --> 00:23:54,159
maybe go ahead and go next

00:23:54,640 --> 00:23:58,799
and so i'll give a quick quick year in

00:23:56,559 --> 00:24:00,240
view a little talk about aces

00:23:58,799 --> 00:24:02,400
some of the stuff that we're doing for

00:24:00,240 --> 00:24:05,600
our next version of opening xr

00:24:02,400 --> 00:24:06,799
and um uh uh interesting development and

00:24:05,600 --> 00:24:10,480
split out uh fro

00:24:06,799 --> 00:24:14,320
of imath um so uh

00:24:10,480 --> 00:24:16,799
next so over the past uh

00:24:14,320 --> 00:24:17,440
years we've released i think eight

00:24:16,799 --> 00:24:21,360
versions

00:24:17,440 --> 00:24:24,720
of uh exr people quickly count

00:24:21,360 --> 00:24:26,640
um and uh this actually represents more

00:24:24,720 --> 00:24:29,520
than had been done

00:24:26,640 --> 00:24:30,960
in the previous uh probably 10 years or

00:24:29,520 --> 00:24:32,559
so

00:24:30,960 --> 00:24:34,320
and you'd think that's a lot of turn but

00:24:32,559 --> 00:24:37,279
it's actually uh stability

00:24:34,320 --> 00:24:38,240
uh what we did uh earlier this year is

00:24:37,279 --> 00:24:42,080
is

00:24:38,240 --> 00:24:46,000
join up with the google um auto fuzz um

00:24:42,080 --> 00:24:47,760
uh project and and have have had them uh

00:24:46,000 --> 00:24:49,679
pounding away at opening xr

00:24:47,760 --> 00:24:51,440
feeding all kinds of garbage uh images

00:24:49,679 --> 00:24:52,240
to it and so this is really about

00:24:51,440 --> 00:24:56,480
stability

00:24:52,240 --> 00:24:57,200
and um and making sure that it's a solid

00:24:56,480 --> 00:24:59,200
secure

00:24:57,200 --> 00:25:00,559
uh library for being as foundational as

00:24:59,200 --> 00:25:02,880
it is

00:25:00,559 --> 00:25:02,880
next

00:25:03,760 --> 00:25:07,039
uh some of the other work that's been

00:25:05,360 --> 00:25:11,200
going on that that we'll

00:25:07,039 --> 00:25:12,559
we'll see um happening is that um

00:25:11,200 --> 00:25:14,480
during one of the quiet periods of

00:25:12,559 --> 00:25:18,000
opening are that

00:25:14,480 --> 00:25:20,159
asus container spec chose to use um

00:25:18,000 --> 00:25:22,000
open xr as the foundation of the the

00:25:20,159 --> 00:25:24,480
storage format for asus

00:25:22,000 --> 00:25:25,200
and they actually forked off sort of the

00:25:24,480 --> 00:25:28,400
definition

00:25:25,200 --> 00:25:32,799
of exr

00:25:28,400 --> 00:25:32,799
and they introduced a whole number of

00:25:33,440 --> 00:25:37,039
uh optional standard optional attributes

00:25:36,240 --> 00:25:39,840
soas

00:25:37,039 --> 00:25:39,840
um and

00:25:40,159 --> 00:25:44,240
and and published a subset of open xr as

00:25:42,960 --> 00:25:47,840
as a container spec

00:25:44,240 --> 00:25:49,520
um and uh this was never actually rolled

00:25:47,840 --> 00:25:53,200
back into open xr

00:25:49,520 --> 00:25:55,440
um and so we'll be we'll be doing that

00:25:53,200 --> 00:25:57,200
uh over the next little while and so if

00:25:55,440 --> 00:25:59,520
you could go

00:25:57,200 --> 00:25:59,520
next

00:26:01,440 --> 00:26:06,880
and so this is a a

00:26:04,480 --> 00:26:06,880
list

00:26:07,760 --> 00:26:12,080
there we go um this is a list of of

00:26:10,400 --> 00:26:14,320
those those attributes um

00:26:12,080 --> 00:26:15,440
and the the reason we're calling this

00:26:14,320 --> 00:26:18,000
out here um

00:26:15,440 --> 00:26:19,760
is to if you could uh look at this this

00:26:18,000 --> 00:26:21,200
link at the bottom and and take a look

00:26:19,760 --> 00:26:22,400
at these and see if you're using them

00:26:21,200 --> 00:26:24,480
internally

00:26:22,400 --> 00:26:26,720
um and see if the definition differs

00:26:24,480 --> 00:26:29,120
from um

00:26:26,720 --> 00:26:30,240
uh what what you have internally then

00:26:29,120 --> 00:26:32,480
i'm sure the

00:26:30,240 --> 00:26:33,360
asus container folks would would really

00:26:32,480 --> 00:26:36,000
like to hear

00:26:33,360 --> 00:26:36,880
how they differ from what you're using

00:26:36,000 --> 00:26:39,840
um

00:26:36,880 --> 00:26:41,679
and and so we can resolve any uh any

00:26:39,840 --> 00:26:44,880
potential conflicts there

00:26:41,679 --> 00:26:50,080
um i think i'll i'll leave the

00:26:44,880 --> 00:26:50,080
i won't read them all out um and so next

00:26:50,640 --> 00:26:54,080
there are a couple of new attributes um

00:26:53,120 --> 00:26:56,880
in this uh

00:26:54,080 --> 00:26:58,080
one is to remove some vague things such

00:26:56,880 --> 00:26:59,679
as aperture

00:26:58,080 --> 00:27:01,919
so this is called out specifically as

00:26:59,679 --> 00:27:04,880
f-stop or t-stop um

00:27:01,919 --> 00:27:05,520
color temperature firmware version and

00:27:04,880 --> 00:27:07,039
you know as

00:27:05,520 --> 00:27:08,400
as things have gotten more advanced and

00:27:07,039 --> 00:27:09,200
people are tracking temperature of

00:27:08,400 --> 00:27:12,400
lenses for

00:27:09,200 --> 00:27:14,559
for uh correcting distortion um

00:27:12,400 --> 00:27:17,120
some other things just sort of became uh

00:27:14,559 --> 00:27:17,120
necessary

00:27:18,840 --> 00:27:23,919
next

00:27:20,000 --> 00:27:26,080
and so on to the openexr uh sort of uh

00:27:23,919 --> 00:27:28,720
major rewrite for for or not rewrite

00:27:26,080 --> 00:27:32,159
major major update for for 3.0

00:27:28,720 --> 00:27:35,279
um we've done a couple of things uh

00:27:32,159 --> 00:27:38,720
one is we're getting rid of the ilm imf

00:27:35,279 --> 00:27:40,559
uh name in terms of the library

00:27:38,720 --> 00:27:41,840
uh and the folder and it'll just be open

00:27:40,559 --> 00:27:44,799
exr

00:27:41,840 --> 00:27:46,399
um this if you're using the cmg layer

00:27:44,799 --> 00:27:49,440
will be transparent to you because it'll

00:27:46,399 --> 00:27:49,440
just be the same

00:27:50,000 --> 00:27:53,840
scenic alias the header file names are

00:27:52,559 --> 00:27:55,440
all staying the same

00:27:53,840 --> 00:27:57,360
they're not changing so you don't have

00:27:55,440 --> 00:28:00,559
to change your code that

00:27:57,360 --> 00:28:04,240
um we're we're we've split out

00:28:00,559 --> 00:28:05,039
imath um and i'll talk more about that

00:28:04,240 --> 00:28:08,159
in a moment

00:28:05,039 --> 00:28:11,360
um and and sort of merging

00:28:08,159 --> 00:28:13,039
iex and the ilm thread into open xr

00:28:11,360 --> 00:28:16,480
just because that's where its primary

00:28:13,039 --> 00:28:19,279
use was um

00:28:16,480 --> 00:28:19,279
and uh

00:28:19,520 --> 00:28:22,799
and and you can see the directory

00:28:20,960 --> 00:28:24,320
structure there um and

00:28:22,799 --> 00:28:26,320
and part of this cleanup is we're

00:28:24,320 --> 00:28:28,399
actually we've we deprecated and we're

00:28:26,320 --> 00:28:30,080
gonna remove the auto tools and other

00:28:28,399 --> 00:28:34,240
similar things like that

00:28:30,080 --> 00:28:36,559
that are sort of outdated next

00:28:34,240 --> 00:28:39,520
well while we're at that sort of giant

00:28:36,559 --> 00:28:41,440
reorg we also are going to

00:28:39,520 --> 00:28:43,200
get rid of the master branch and have a

00:28:41,440 --> 00:28:46,720
dev and a release branch

00:28:43,200 --> 00:28:49,039
in the name of more inclusive language

00:28:46,720 --> 00:28:50,320
but it also is clear just to know you

00:28:49,039 --> 00:28:51,760
know where

00:28:50,320 --> 00:28:54,240
development is happening and you know

00:28:51,760 --> 00:28:59,840
what a stable release

00:28:54,240 --> 00:28:59,840
branch is that you can pull on so next

00:29:00,640 --> 00:29:05,440
so um as i mentioned imath um

00:29:03,840 --> 00:29:07,039
we've we've pulled that out it's a

00:29:05,440 --> 00:29:10,320
separate repository

00:29:07,039 --> 00:29:13,520
uh in 3.0 um and

00:29:10,320 --> 00:29:16,000
it's uh largely going to be

00:29:13,520 --> 00:29:17,360
header only and it's the subset that

00:29:16,000 --> 00:29:18,799
people found useful to integrate

00:29:17,360 --> 00:29:22,559
elsewhere

00:29:18,799 --> 00:29:26,000
such as i think larry uses it in uh

00:29:22,559 --> 00:29:28,799
in uh open shading language a bit and

00:29:26,000 --> 00:29:30,640
things like that so uh maybe openvdb as

00:29:28,799 --> 00:29:34,000
well uses it

00:29:30,640 --> 00:29:37,360
next and so it

00:29:34,000 --> 00:29:40,640
um one of the things that we've had

00:29:37,360 --> 00:29:43,760
a google summer of code uh student

00:29:40,640 --> 00:29:45,200
owen um working on on this as his

00:29:43,760 --> 00:29:47,600
primary task

00:29:45,200 --> 00:29:48,720
and so part of what he's done is uh

00:29:47,600 --> 00:29:51,200
modernize

00:29:48,720 --> 00:29:52,480
um the library a bit keeping a simple

00:29:51,200 --> 00:29:54,799
api

00:29:52,480 --> 00:29:56,240
there's more inline headers we've

00:29:54,799 --> 00:30:00,960
removed

00:29:56,240 --> 00:30:04,720
the iex and have

00:30:00,960 --> 00:30:04,720
it's clear when you have

00:30:04,799 --> 00:30:07,919
a function that can throw an exception

00:30:06,399 --> 00:30:09,440
when you when you have one that doesn't

00:30:07,919 --> 00:30:11,200
throw exceptions

00:30:09,440 --> 00:30:13,600
uh he's done a lot of work with making

00:30:11,200 --> 00:30:14,559
things uh const experts such that they

00:30:13,600 --> 00:30:18,000
can be

00:30:14,559 --> 00:30:20,240
more closely optimized

00:30:18,000 --> 00:30:21,200
and finally the library is cuda

00:30:20,240 --> 00:30:24,159
compatible with

00:30:21,200 --> 00:30:26,080
a half type in in cuda and so you can

00:30:24,159 --> 00:30:29,120
actually use

00:30:26,080 --> 00:30:32,480
imath both in host code and in

00:30:29,120 --> 00:30:34,799
cuda kernels which is pretty neat

00:30:32,480 --> 00:30:34,799
next

00:30:35,600 --> 00:30:41,919
so uh the back to open exr

00:30:38,720 --> 00:30:42,960
um we are still looking at a couple of

00:30:41,919 --> 00:30:44,880
of things that

00:30:42,960 --> 00:30:46,320
actually cause the file format to change

00:30:44,880 --> 00:30:49,679
slightly

00:30:46,320 --> 00:30:49,679
um the

00:30:49,840 --> 00:30:53,600
we're still examining whether to add to

00:30:51,600 --> 00:30:56,640
be float 16 support

00:30:53,600 --> 00:30:58,000
as as a supported data type we're also

00:30:56,640 --> 00:31:02,480
looking at

00:30:58,000 --> 00:31:04,960
sort of compressing and making

00:31:02,480 --> 00:31:06,480
some of the parsing of openings our

00:31:04,960 --> 00:31:08,399
files a little bit more efficient

00:31:06,480 --> 00:31:10,559
um and and one of those methods might be

00:31:08,399 --> 00:31:12,640
to move uh required attributes

00:31:10,559 --> 00:31:13,919
um up to being a little structure at the

00:31:12,640 --> 00:31:17,440
beginning of the file

00:31:13,919 --> 00:31:19,360
um and another method might be to

00:31:17,440 --> 00:31:22,559
actually move large chunks of metadata

00:31:19,360 --> 00:31:24,799
into their own part type

00:31:22,559 --> 00:31:24,799
next

00:31:26,720 --> 00:31:30,960
um the other thing that we're doing in

00:31:27,840 --> 00:31:34,240
open exr3 is

00:31:30,960 --> 00:31:36,320
making a new uh core i o layer um

00:31:34,240 --> 00:31:39,440
this is largely driven out of a need for

00:31:36,320 --> 00:31:42,880
for more performance

00:31:39,440 --> 00:31:45,919
the existing library has some

00:31:42,880 --> 00:31:47,200
good threading support but it also has a

00:31:45,919 --> 00:31:51,360
fair amount of overhead

00:31:47,200 --> 00:31:54,000
um associated with that um

00:31:51,360 --> 00:31:56,320
and uh we're so we're rewriting the core

00:31:54,000 --> 00:31:58,960
of of open xr

00:31:56,320 --> 00:32:00,320
to have a low level c api which will be

00:31:58,960 --> 00:32:03,600
fairly minimal but

00:32:00,320 --> 00:32:05,840
um about complete and then

00:32:03,600 --> 00:32:08,799
rebuilding the cos plus on top of that

00:32:05,840 --> 00:32:08,799
and it gives us a good

00:32:08,960 --> 00:32:13,360
way of making sure that we have we're

00:32:11,519 --> 00:32:17,120
retaining exactly the same

00:32:13,360 --> 00:32:19,679
api and the same behavior

00:32:17,120 --> 00:32:20,159
but it should be this also enables us to

00:32:19,679 --> 00:32:23,200
add

00:32:20,159 --> 00:32:25,440
new more thread friendly api

00:32:23,200 --> 00:32:26,640
such that you can have 48 threads or

00:32:25,440 --> 00:32:27,200
however many threads you have in your

00:32:26,640 --> 00:32:31,519
machine

00:32:27,200 --> 00:32:31,519
blasting away at the same exr file

00:32:32,159 --> 00:32:40,000
next and so just a quick preview of that

00:32:36,320 --> 00:32:43,200
this is on my little machine at home

00:32:40,000 --> 00:32:44,000
this is a ratio of the old library to

00:32:43,200 --> 00:32:47,200
the new core

00:32:44,000 --> 00:32:50,159
um in terms of reading an image sequence

00:32:47,200 --> 00:32:51,679
um and and so it's a percentage of uh or

00:32:50,159 --> 00:32:55,279
ratio of improvement

00:32:51,679 --> 00:32:56,480
so you can see that um even up in the

00:32:55,279 --> 00:32:58,880
into hyper threading

00:32:56,480 --> 00:32:59,679
um there's still some performance gains

00:32:58,880 --> 00:33:04,320
to be had

00:32:59,679 --> 00:33:06,000
um from from just a

00:33:04,320 --> 00:33:07,440
better management of of threads and

00:33:06,000 --> 00:33:11,039
lower i o

00:33:07,440 --> 00:33:11,440
next and so again thank you to owen

00:33:11,039 --> 00:33:14,000
who's

00:33:11,440 --> 00:33:15,760
spent the summer with us um and has

00:33:14,000 --> 00:33:16,799
really helped clean up the repository

00:33:15,760 --> 00:33:20,480
quite a bit and

00:33:16,799 --> 00:33:22,399
and modernized it um and if you

00:33:20,480 --> 00:33:24,320
go on to the next slide emily it's the

00:33:22,399 --> 00:33:25,600
last one is just how to how to get

00:33:24,320 --> 00:33:28,480
involved

00:33:25,600 --> 00:33:29,600
and uh the usual list of things the

00:33:28,480 --> 00:33:32,720
email list the

00:33:29,600 --> 00:33:37,840
mail archive our repository um

00:33:32,720 --> 00:33:40,480
we meet uh every uh every other week

00:33:37,840 --> 00:33:41,519
for me it's friday but i think for those

00:33:40,480 --> 00:33:44,880
in america it's in

00:33:41,519 --> 00:33:53,840
um it's on thursday afternoon and so

00:33:44,880 --> 00:33:53,840
hope to see you guys there thanks

00:33:55,279 --> 00:33:58,960
hello um i'm nick porcino i am

00:33:57,760 --> 00:34:00,480
representing the

00:33:58,960 --> 00:34:03,919
i'm representing the tsc for open

00:34:00,480 --> 00:34:06,559
timeline i o at slide police

00:34:03,919 --> 00:34:08,960
so uh open timeline io is a project

00:34:06,559 --> 00:34:12,000
developed by pixar animation studios

00:34:08,960 --> 00:34:15,119
uh we joined the aswf

00:34:12,000 --> 00:34:17,280
last summer and um so

00:34:15,119 --> 00:34:19,359
we're pretty new it's an open source

00:34:17,280 --> 00:34:21,520
interchange format for editorial

00:34:19,359 --> 00:34:22,560
timeline information so the kind of

00:34:21,520 --> 00:34:24,320
information that you're going to read

00:34:22,560 --> 00:34:26,960
and write out of like avid or

00:34:24,320 --> 00:34:27,599
adobe premiere things like that it's a

00:34:26,960 --> 00:34:30,800
collection

00:34:27,599 --> 00:34:32,320
of adapters for common file formats um

00:34:30,800 --> 00:34:34,560
that used for use throughout the

00:34:32,320 --> 00:34:37,200
industry all the way back to

00:34:34,560 --> 00:34:38,000
edl's and we also have a set of

00:34:37,200 --> 00:34:39,440
libraries

00:34:38,000 --> 00:34:41,119
that you can use to develop new

00:34:39,440 --> 00:34:42,560
functionality and directly integrate

00:34:41,119 --> 00:34:44,639
open timeline io

00:34:42,560 --> 00:34:46,480
we have a very active community that

00:34:44,639 --> 00:34:50,800
we're very grateful for

00:34:46,480 --> 00:34:53,520
and today we're releasing public beta 13

00:34:50,800 --> 00:34:54,240
and has a number of interesting new

00:34:53,520 --> 00:34:55,919
features

00:34:54,240 --> 00:34:59,280
in it and i direct you to the release

00:34:55,919 --> 00:35:03,200
notes next slide please

00:34:59,280 --> 00:35:04,640
so the motivation for having uh

00:35:03,200 --> 00:35:06,480
motivation for having something like

00:35:04,640 --> 00:35:10,160
open timeline io is

00:35:06,480 --> 00:35:12,079
that uh over time huge numbers of

00:35:10,160 --> 00:35:12,960
editorial decisions accumulate into a

00:35:12,079 --> 00:35:15,440
project

00:35:12,960 --> 00:35:16,000
it can represent thousands of clips and

00:35:15,440 --> 00:35:19,119
dozens

00:35:16,000 --> 00:35:21,359
if not hundreds of tracks and on the

00:35:19,119 --> 00:35:22,320
little small screenshot that we've got

00:35:21,359 --> 00:35:24,320
here is a

00:35:22,320 --> 00:35:26,160
portion of our recent film like just

00:35:24,320 --> 00:35:28,000
kind of zoomed in to give you an

00:35:26,160 --> 00:35:29,760
idea of what the complexity of a

00:35:28,000 --> 00:35:32,560
timeline like this is

00:35:29,760 --> 00:35:33,599
there's years of decisions in there and

00:35:32,560 --> 00:35:35,680
being able to

00:35:33,599 --> 00:35:36,800
take that information consistently and

00:35:35,680 --> 00:35:39,040
losslessly

00:35:36,800 --> 00:35:40,480
between the various tools and the

00:35:39,040 --> 00:35:43,280
editorial pipeline

00:35:40,480 --> 00:35:45,760
is really crucial for maintaining like

00:35:43,280 --> 00:35:49,119
the coherency of the timeline

00:35:45,760 --> 00:35:52,640
and creative decisions across

00:35:49,119 --> 00:35:56,000
the workflow next slide please

00:35:52,640 --> 00:35:58,320
so an open timeline io file itself um

00:35:56,000 --> 00:35:59,520
is the collection of tracks the tracks

00:35:58,320 --> 00:36:02,560
have clips

00:35:59,520 --> 00:36:05,680
the clips reference media that can be

00:36:02,560 --> 00:36:08,079
in any kind of format and the

00:36:05,680 --> 00:36:10,079
clips are composed onto a track via like

00:36:08,079 --> 00:36:11,200
gaps and transitions and are annotated

00:36:10,079 --> 00:36:13,359
with markers

00:36:11,200 --> 00:36:16,880
and this is all done in a consistent and

00:36:13,359 --> 00:36:16,880
coherent way next slide please

00:36:16,960 --> 00:36:21,520
so the way that you interoperate with

00:36:19,520 --> 00:36:23,680
open timeline io presently is via the

00:36:21,520 --> 00:36:26,000
open timeline io convert tool

00:36:23,680 --> 00:36:26,720
command line tool takes open timeline i

00:36:26,000 --> 00:36:30,240
o files

00:36:26,720 --> 00:36:34,480
and converts it to and from edls

00:36:30,240 --> 00:36:35,440
ales final cut xmls avid aff files and

00:36:34,480 --> 00:36:38,640
so on

00:36:35,440 --> 00:36:39,119
and you can extend the system yourself

00:36:38,640 --> 00:36:40,560
by

00:36:39,119 --> 00:36:42,160
writing your own plugins for your own

00:36:40,560 --> 00:36:45,760
formats in python

00:36:42,160 --> 00:36:49,520
next slide please so

00:36:45,760 --> 00:36:51,680
the uh let's see this slide is the

00:36:49,520 --> 00:36:53,520
native c plus plus integration native c

00:36:51,680 --> 00:36:54,079
plus plus integration uh lets you read

00:36:53,520 --> 00:36:56,880
and write

00:36:54,079 --> 00:36:58,320
and operate with the open timeline i o

00:36:56,880 --> 00:36:59,520
data structures in memory in your

00:36:58,320 --> 00:37:01,760
application

00:36:59,520 --> 00:37:02,720
directly this kind of integration is

00:37:01,760 --> 00:37:05,760
much more seamless

00:37:02,720 --> 00:37:08,960
than going through file adapters and um

00:37:05,760 --> 00:37:11,440
pipeline file based workflows

00:37:08,960 --> 00:37:12,720
so we're hoping that we're going to see

00:37:11,440 --> 00:37:14,320
a migration

00:37:12,720 --> 00:37:15,920
over the next little while to native

00:37:14,320 --> 00:37:19,680
integration of this nature

00:37:15,920 --> 00:37:23,280
next slide please so

00:37:19,680 --> 00:37:25,280
in addition to the bindings and the

00:37:23,280 --> 00:37:28,000
conversions and the file format

00:37:25,280 --> 00:37:30,079
and we've also got a timeline viewer and

00:37:28,000 --> 00:37:31,920
this is just a little screenshot of open

00:37:30,079 --> 00:37:33,839
timeline i o view

00:37:31,920 --> 00:37:35,040
showing how you can inspect a clip and

00:37:33,839 --> 00:37:37,760
look at a bunch of

00:37:35,040 --> 00:37:39,520
metadata this is super helpful for

00:37:37,760 --> 00:37:41,839
understanding how data is transformed as

00:37:39,520 --> 00:37:43,680
it moves through your pipeline and just

00:37:41,839 --> 00:37:45,200
inspecting things for basic workflow and

00:37:43,680 --> 00:37:48,560
debugging operations

00:37:45,200 --> 00:37:50,800
my next slide please so

00:37:48,560 --> 00:37:51,680
today and this is our battle tested

00:37:50,800 --> 00:37:53,760
workflow

00:37:51,680 --> 00:37:54,800
and the hat with the ears is our

00:37:53,760 --> 00:37:57,920
proprietary

00:37:54,800 --> 00:37:59,599
presto animation system so presto reads

00:37:57,920 --> 00:38:02,880
and writes open timeline io

00:37:59,599 --> 00:38:04,640
uh open timeline o converts to aaf um it

00:38:02,880 --> 00:38:07,040
heads over to the avid and

00:38:04,640 --> 00:38:08,800
for editorial decisions and editing and

00:38:07,040 --> 00:38:10,320
finally comes all the way back to presto

00:38:08,800 --> 00:38:13,680
and on the way

00:38:10,320 --> 00:38:14,880
it can be sent out to rv for viewing or

00:38:13,680 --> 00:38:17,760
for archive

00:38:14,880 --> 00:38:19,200
and we can also send edls over to

00:38:17,760 --> 00:38:21,440
grading

00:38:19,200 --> 00:38:24,400
this is uh this is the historic workflow

00:38:21,440 --> 00:38:24,400
next slide please

00:38:24,480 --> 00:38:27,680
oops uh one back please

00:38:28,240 --> 00:38:32,800
so as it as we move forward with

00:38:31,760 --> 00:38:34,880
integration

00:38:32,800 --> 00:38:36,240
things should be much smoother and much

00:38:34,880 --> 00:38:38,960
more streamlined

00:38:36,240 --> 00:38:40,320
where open timeline io files are

00:38:38,960 --> 00:38:41,760
first-class citizens throughout the

00:38:40,320 --> 00:38:45,040
entire pipeline

00:38:41,760 --> 00:38:46,480
yeah next slide please the original

00:38:45,040 --> 00:38:49,920
release of open timeline

00:38:46,480 --> 00:38:51,440
last year was uh implemented in python

00:38:49,920 --> 00:38:52,400
and it included open timeline i o

00:38:51,440 --> 00:38:55,599
convert

00:38:52,400 --> 00:38:58,400
next slide please uh earlier this year

00:38:55,599 --> 00:38:58,960
we released a version uh where we built

00:38:58,400 --> 00:39:02,079
a c

00:38:58,960 --> 00:39:02,960
plus core api uh rebuilt the python api

00:39:02,079 --> 00:39:04,640
on top of that

00:39:02,960 --> 00:39:07,839
and uh the rest of the pipeline remains

00:39:04,640 --> 00:39:11,280
the same next slide please

00:39:07,839 --> 00:39:14,320
this year as a result of having the c

00:39:11,280 --> 00:39:17,520
plus plus integration we've been able

00:39:14,320 --> 00:39:19,599
also uh thanks in large part to uh

00:39:17,520 --> 00:39:22,400
karthik writer our google summer of

00:39:19,599 --> 00:39:23,680
code student uh we've been able to

00:39:22,400 --> 00:39:26,880
introduce new bindings

00:39:23,680 --> 00:39:30,079
particularly uh for c and

00:39:26,880 --> 00:39:31,920
java which really broadens the

00:39:30,079 --> 00:39:33,440
places that open timeline io can be

00:39:31,920 --> 00:39:37,119
natively integrated

00:39:33,440 --> 00:39:37,119
um next slide please

00:39:37,280 --> 00:39:41,920
another contribution this one is a

00:39:40,320 --> 00:39:42,960
community contribution that we're very

00:39:41,920 --> 00:39:45,520
grateful for

00:39:42,960 --> 00:39:46,560
is the ability to ingest image sequences

00:39:45,520 --> 00:39:49,040
directly

00:39:46,560 --> 00:39:50,000
so previously with open timeline io when

00:39:49,040 --> 00:39:51,440
you had a

00:39:50,000 --> 00:39:53,280
directory full of images that might have

00:39:51,440 --> 00:39:55,119
come from a rendering application

00:39:53,280 --> 00:39:56,800
they were in the form they would have

00:39:55,119 --> 00:39:57,599
been in the form of a big pile of loose

00:39:56,800 --> 00:39:58,960
files

00:39:57,599 --> 00:40:00,800
and you would have to reference them

00:39:58,960 --> 00:40:03,280
individually into clips

00:40:00,800 --> 00:40:04,400
the contribution here was to describe

00:40:03,280 --> 00:40:07,280
what the naming

00:40:04,400 --> 00:40:08,240
convention is for files in a directory

00:40:07,280 --> 00:40:11,359
and then

00:40:08,240 --> 00:40:13,839
make image sequences within your tracks

00:40:11,359 --> 00:40:15,359
and that can automatically uh discover

00:40:13,839 --> 00:40:16,240
the files and incorporate them into the

00:40:15,359 --> 00:40:19,280
timeline

00:40:16,240 --> 00:40:22,480
and without that time-consuming uh

00:40:19,280 --> 00:40:24,640
extra step of needing to make clips next

00:40:22,480 --> 00:40:28,319
slide please

00:40:24,640 --> 00:40:30,720
so um this is just a quick summary of um

00:40:28,319 --> 00:40:32,240
updates on our adapters and improved

00:40:30,720 --> 00:40:34,800
file format support

00:40:32,240 --> 00:40:35,839
there's uh the af adapter for media

00:40:34,800 --> 00:40:39,440
composer

00:40:35,839 --> 00:40:40,079
and the final cut the final cut adapter

00:40:39,440 --> 00:40:42,880
has

00:40:40,079 --> 00:40:44,319
uh learned all about complex nesting and

00:40:42,880 --> 00:40:47,119
varied frame rates

00:40:44,319 --> 00:40:49,040
uh our edl support now supports wipes

00:40:47,119 --> 00:40:51,839
reverses markers and

00:40:49,040 --> 00:40:53,040
um a lot of other interesting new things

00:40:51,839 --> 00:40:56,240
and

00:40:53,040 --> 00:40:59,599
you can see a couple of other new

00:40:56,240 --> 00:41:00,079
form excuse me a couple of other plugins

00:40:59,599 --> 00:41:02,240
that have

00:41:00,079 --> 00:41:04,079
just recently been introduced next slide

00:41:02,240 --> 00:41:06,000
please

00:41:04,079 --> 00:41:07,119
so another development that we're

00:41:06,000 --> 00:41:10,000
excited about is

00:41:07,119 --> 00:41:12,000
integration with rv so previously otio

00:41:10,000 --> 00:41:12,960
convert could create rv files and then

00:41:12,000 --> 00:41:15,599
rv could

00:41:12,960 --> 00:41:16,079
open up a playlist for uh preview or

00:41:15,599 --> 00:41:19,200
review

00:41:16,079 --> 00:41:22,319
next slide please now

00:41:19,200 --> 00:41:24,720
there's a native plugin so

00:41:22,319 --> 00:41:25,760
rv can read open timeline io files

00:41:24,720 --> 00:41:28,160
directly

00:41:25,760 --> 00:41:29,040
and which is a great workflow

00:41:28,160 --> 00:41:32,319
improvement

00:41:29,040 --> 00:41:35,359
we can't write playlists from

00:41:32,319 --> 00:41:36,400
rv so if anybody's looking for a place

00:41:35,359 --> 00:41:37,440
where we would love to have a

00:41:36,400 --> 00:41:40,079
contribution

00:41:37,440 --> 00:41:41,440
being able to export a playlist from rv

00:41:40,079 --> 00:41:42,400
out to open timeline io would be

00:41:41,440 --> 00:41:45,920
fantastic

00:41:42,400 --> 00:41:49,280
next slide please so here's uh

00:41:45,920 --> 00:41:50,800
here's a screenshot in rv um showing a

00:41:49,280 --> 00:41:51,520
little bit of that really complicated

00:41:50,800 --> 00:41:53,839
timeline

00:41:51,520 --> 00:41:55,280
uh from the earlier slide just uh

00:41:53,839 --> 00:41:58,400
playing back natively in rv

00:41:55,280 --> 00:42:00,560
so this is uh very exciting next slide

00:41:58,400 --> 00:42:03,680
please

00:42:00,560 --> 00:42:05,920
so um how to get involved

00:42:03,680 --> 00:42:07,040
we have a number of community projects

00:42:05,920 --> 00:42:10,640
underway right now

00:42:07,040 --> 00:42:11,280
um and well obviously i'm very excited

00:42:10,640 --> 00:42:13,920
about this so

00:42:11,280 --> 00:42:15,760
anyway we've got uh effort to improve

00:42:13,920 --> 00:42:17,280
continuous integration and how our build

00:42:15,760 --> 00:42:20,160
systems work

00:42:17,280 --> 00:42:21,040
there's language bindings underway we've

00:42:20,160 --> 00:42:23,680
got an effort

00:42:21,040 --> 00:42:24,560
to fully specify what the open timeline

00:42:23,680 --> 00:42:26,400
io file

00:42:24,560 --> 00:42:28,640
format looks like and what it contains

00:42:26,400 --> 00:42:31,599
and what the expected operations

00:42:28,640 --> 00:42:33,440
on open timeline ior there's work on

00:42:31,599 --> 00:42:36,000
coordinate systems both temporal

00:42:33,440 --> 00:42:36,960
and spatial and the hierarchies they're

00:42:36,000 --> 00:42:39,440
upon

00:42:36,960 --> 00:42:40,400
and this is important so that we can

00:42:39,440 --> 00:42:42,960
start to

00:42:40,400 --> 00:42:44,720
encode information in timelines like the

00:42:42,960 --> 00:42:47,760
position of a clip region for example

00:42:44,720 --> 00:42:49,680
over time and there's work underway to

00:42:47,760 --> 00:42:51,520
design an editing api

00:42:49,680 --> 00:42:54,160
and this will have common operations in

00:42:51,520 --> 00:42:56,880
it like splitting and merging clips

00:42:54,160 --> 00:42:58,960
and calculating intersections between

00:42:56,880 --> 00:43:01,599
elements and so on and so forth

00:42:58,960 --> 00:43:02,880
there's blender integration underway

00:43:01,599 --> 00:43:05,119
that will provide

00:43:02,880 --> 00:43:05,920
interoperation with blender's fantastic

00:43:05,119 --> 00:43:08,319
sequencing

00:43:05,920 --> 00:43:09,359
tool that they've introduced in the last

00:43:08,319 --> 00:43:11,280
release

00:43:09,359 --> 00:43:13,680
and we're also starting to carry lens

00:43:11,280 --> 00:43:14,800
metadata and which is really quite an

00:43:13,680 --> 00:43:17,760
important thing because

00:43:14,800 --> 00:43:18,400
if something comes along some media

00:43:17,760 --> 00:43:20,000
source

00:43:18,400 --> 00:43:22,000
and it's referenced into the timeline

00:43:20,000 --> 00:43:24,000
and it goes through a number of

00:43:22,000 --> 00:43:26,880
transformations along the way

00:43:24,000 --> 00:43:28,560
and in some cases we're going to want to

00:43:26,880 --> 00:43:30,880
be able to recover data like the stuff

00:43:28,560 --> 00:43:34,240
that uh kimball was mentioning earlier

00:43:30,880 --> 00:43:35,599
um with the aces effort and we might

00:43:34,240 --> 00:43:37,200
like to keep that information throughout

00:43:35,599 --> 00:43:39,040
the pipeline recover it later

00:43:37,200 --> 00:43:40,720
and then potentially put it back into

00:43:39,040 --> 00:43:42,960
the files where it needs to be

00:43:40,720 --> 00:43:44,800
so this provides a way that the lens

00:43:42,960 --> 00:43:46,160
metadata can actually survive

00:43:44,800 --> 00:43:47,839
transformations through the entire

00:43:46,160 --> 00:43:50,720
editorial pipeline

00:43:47,839 --> 00:43:50,720
next slide please

00:43:51,920 --> 00:43:57,760
so how to get in touch with us i've got

00:43:55,119 --> 00:44:00,319
the url there for our landing page

00:43:57,760 --> 00:44:01,280
and the landing page has links to our

00:44:00,319 --> 00:44:03,760
slack channel

00:44:01,280 --> 00:44:04,800
our github and our read the docs

00:44:03,760 --> 00:44:07,440
information

00:44:04,800 --> 00:44:09,280
our mailing list and every two weeks we

00:44:07,440 --> 00:44:11,119
have a meeting and you can find it on

00:44:09,280 --> 00:44:13,760
the aswf calendar and

00:44:11,119 --> 00:44:16,160
invite you to to join us so thank you

00:44:13,760 --> 00:44:16,160
very much

00:44:20,839 --> 00:44:23,839
bye

00:44:27,200 --> 00:44:30,960
hello am i on very good

00:44:31,040 --> 00:44:36,319
um so i'm going to give an update on

00:44:34,400 --> 00:44:39,359
open chatting language

00:44:36,319 --> 00:44:39,359
uh next slide please

00:44:39,520 --> 00:44:44,800
thanks uh so just to review uh

00:44:42,640 --> 00:44:46,400
shading is the part of 3d rendering that

00:44:44,800 --> 00:44:47,599
makes objects look like different

00:44:46,400 --> 00:44:50,800
materials like

00:44:47,599 --> 00:44:53,119
wood rusty metal concrete or cloth

00:44:50,800 --> 00:44:54,560
at each point on the object what color

00:44:53,119 --> 00:44:56,640
is it how bright is it

00:44:54,560 --> 00:44:57,760
um how much light reflects to which

00:44:56,640 --> 00:45:00,800
directions

00:44:57,760 --> 00:45:02,800
next slide place so

00:45:00,800 --> 00:45:04,480
open shading language is a domain

00:45:02,800 --> 00:45:08,240
specific language

00:45:04,480 --> 00:45:09,760
that um that is used uh as an extension

00:45:08,240 --> 00:45:12,000
language for renderers

00:45:09,760 --> 00:45:13,359
to let people describe patterns and

00:45:12,000 --> 00:45:15,680
materials

00:45:13,359 --> 00:45:17,040
the software is delivered in the form of

00:45:15,680 --> 00:45:19,359
a library

00:45:17,040 --> 00:45:21,920
that's embedded into render so it's not

00:45:19,359 --> 00:45:24,079
really a user

00:45:21,920 --> 00:45:25,920
a user level app but it goes inside

00:45:24,079 --> 00:45:28,720
other apps and numbers

00:45:25,920 --> 00:45:30,400
this was a project that was started in

00:45:28,720 --> 00:45:33,599
2008 at suny pictures

00:45:30,400 --> 00:45:34,240
image works for use in our proprietary

00:45:33,599 --> 00:45:37,680
renderer

00:45:34,240 --> 00:45:41,040
but fairly early in its life

00:45:37,680 --> 00:45:44,560
we decided to open source it

00:45:41,040 --> 00:45:47,760
um under a fairly permissive bsd license

00:45:44,560 --> 00:45:50,960
and since then it has been adopted

00:45:47,760 --> 00:45:52,800
into many other renders both

00:45:50,960 --> 00:45:55,200
uh open source commercial and

00:45:52,800 --> 00:45:58,480
proprietary across the industry

00:45:55,200 --> 00:46:00,960
uh and has had over

00:45:58,480 --> 00:46:02,800
50 contributors to the code itself uh

00:46:00,960 --> 00:46:05,920
from across the industry

00:46:02,800 --> 00:46:08,560
um it's rapid uh

00:46:05,920 --> 00:46:10,400
adoption uh in so many products and and

00:46:08,560 --> 00:46:12,800
to become the de facto standard

00:46:10,400 --> 00:46:15,520
uh earned it an academy science and

00:46:12,800 --> 00:46:19,119
technology award in 2017

00:46:15,520 --> 00:46:19,760
and uh earlier this year we submitted

00:46:19,119 --> 00:46:22,800
the project

00:46:19,760 --> 00:46:25,440
and were adopted into the aswei next

00:46:22,800 --> 00:46:28,160
slide list

00:46:25,440 --> 00:46:29,599
so there have been other shading

00:46:28,160 --> 00:46:32,880
languages before

00:46:29,599 --> 00:46:35,839
but some of the design goals that really

00:46:32,880 --> 00:46:36,800
make osl a little bit different are that

00:46:35,839 --> 00:46:40,000
we really

00:46:36,800 --> 00:46:42,000
designed it to be used in modern

00:46:40,000 --> 00:46:43,599
physically based path tracers which is

00:46:42,000 --> 00:46:47,040
the direction that the

00:46:43,599 --> 00:46:49,680
industry is clearly going um and and

00:46:47,040 --> 00:46:51,200
at the core of it is a lot of new

00:46:49,680 --> 00:46:54,319
compiler tech

00:46:51,200 --> 00:46:56,720
so we can be very efficient by doing a

00:46:54,319 --> 00:46:59,920
lot of very aggressive

00:46:56,720 --> 00:47:01,680
optimization and compilation down to

00:46:59,920 --> 00:47:03,119
machine code on the fly

00:47:01,680 --> 00:47:05,760
in the in the middle of the rendering

00:47:03,119 --> 00:47:07,119
process we worked very hard to make sure

00:47:05,760 --> 00:47:08,880
that the language was

00:47:07,119 --> 00:47:11,520
not tied to any specific piece of

00:47:08,880 --> 00:47:15,599
hardware um

00:47:11,520 --> 00:47:15,599
and also not tied to

00:47:16,000 --> 00:47:19,680
any particular rendering algorithm um

00:47:18,400 --> 00:47:23,520
and certainly not to any

00:47:19,680 --> 00:47:26,319
product and because of that and it's

00:47:23,520 --> 00:47:27,359
as an open source project um really this

00:47:26,319 --> 00:47:29,440
is probably the only

00:47:27,359 --> 00:47:30,559
language implementation that's been used

00:47:29,440 --> 00:47:32,640
you know in many different

00:47:30,559 --> 00:47:33,599
products from different companies and

00:47:32,640 --> 00:47:36,880
with different

00:47:33,599 --> 00:47:41,280
um rendering algorithms

00:47:36,880 --> 00:47:41,280
under next slide quiz

00:47:42,640 --> 00:47:49,440
next uh so um uh we know

00:47:45,680 --> 00:47:51,680
at least 120 uh movies uh depend on

00:47:49,440 --> 00:47:53,119
open shading language for their shading

00:47:51,680 --> 00:47:56,160
and that's probably a vast

00:47:53,119 --> 00:47:59,359
undercount because at this point nearly

00:47:56,160 --> 00:48:02,079
all of the high-end

00:47:59,359 --> 00:48:02,800
rendering systems used for film support

00:48:02,079 --> 00:48:04,960
osl

00:48:02,800 --> 00:48:06,000
to varying degrees so it's actually

00:48:04,960 --> 00:48:07,359
quite challenging to

00:48:06,000 --> 00:48:09,200
try to keep track of all the projects

00:48:07,359 --> 00:48:13,040
that that music next slide

00:48:09,200 --> 00:48:16,000
is nice uh so

00:48:13,040 --> 00:48:17,040
yeah great uh so uh update on uh on

00:48:16,000 --> 00:48:18,480
important things that have happened to

00:48:17,040 --> 00:48:20,880
us in the last year

00:48:18,480 --> 00:48:21,599
as i said we were adopted as an asw

00:48:20,880 --> 00:48:25,359
project

00:48:21,599 --> 00:48:28,000
so rather than being a bit of an ad hoc

00:48:25,359 --> 00:48:29,040
run project primarily from one company

00:48:28,000 --> 00:48:32,400
now we have a

00:48:29,040 --> 00:48:33,200
former uh chart formal charter uh and

00:48:32,400 --> 00:48:36,480
governance

00:48:33,200 --> 00:48:37,920
uh rules for the project and a uh and a

00:48:36,480 --> 00:48:40,640
technical steering committee

00:48:37,920 --> 00:48:41,359
that is comprised of representatives um

00:48:40,640 --> 00:48:43,599
from many

00:48:41,359 --> 00:48:46,240
of the major stakeholders uh including

00:48:43,599 --> 00:48:50,559
sony animal logic nvidia pixar

00:48:46,240 --> 00:48:52,480
enag autodesk like a blunder project

00:48:50,559 --> 00:48:53,680
and there are many other participants uh

00:48:52,480 --> 00:48:56,079
as well

00:48:53,680 --> 00:48:56,720
um we have a new set of millis so if you

00:48:56,079 --> 00:49:00,480
found yourself

00:48:56,720 --> 00:49:03,839
on the old mail list just go to the aswf

00:49:00,480 --> 00:49:04,960
uh page and and sign up for the new one

00:49:03,839 --> 00:49:06,720
that's where all the exciting

00:49:04,960 --> 00:49:09,760
conversations are happening

00:49:06,720 --> 00:49:11,359
um we are in the midst of uh

00:49:09,760 --> 00:49:13,119
signing new contributor license

00:49:11,359 --> 00:49:14,480
agreements uh again if you

00:49:13,119 --> 00:49:16,079
if you sign the old ones as a

00:49:14,480 --> 00:49:16,559
contributor you will need to do the new

00:49:16,079 --> 00:49:19,119
ones

00:49:16,559 --> 00:49:20,559
but uh but they're very closely related

00:49:19,119 --> 00:49:22,880
it's only a minor change from the ones

00:49:20,559 --> 00:49:24,559
we had in place before so hopefully

00:49:22,880 --> 00:49:26,079
this will be straightforward for you and

00:49:24,559 --> 00:49:29,040
once that's done we will

00:49:26,079 --> 00:49:31,760
formally move the repository for the

00:49:29,040 --> 00:49:34,559
code from the imageworks github page

00:49:31,760 --> 00:49:36,240
onto the academy software foundation

00:49:34,559 --> 00:49:38,720
account

00:49:36,240 --> 00:49:39,920
and one of our big goals like when we

00:49:38,720 --> 00:49:42,640
submitted the project

00:49:39,920 --> 00:49:43,119
um like the major part of the motivation

00:49:42,640 --> 00:49:45,040
there

00:49:43,119 --> 00:49:48,160
was to take this project that is

00:49:45,040 --> 00:49:52,000
important industry-wide infrastructure

00:49:48,160 --> 00:49:54,400
and and really um emphasize that

00:49:52,000 --> 00:49:56,319
it needs to be a community project there

00:49:54,400 --> 00:49:58,240
are many stakeholders

00:49:56,319 --> 00:49:59,359
and and we don't want it to be perceived

00:49:58,240 --> 00:50:02,640
as as

00:49:59,359 --> 00:50:04,000
um owned by a particular company it's

00:50:02,640 --> 00:50:07,280
it's too important for that

00:50:04,000 --> 00:50:10,160
um so part of our goal here for

00:50:07,280 --> 00:50:11,599
graduation uh from an incubating project

00:50:10,160 --> 00:50:13,200
uh to a

00:50:11,599 --> 00:50:14,800
fully admitted one is committed

00:50:13,200 --> 00:50:16,000
diversity and we don't mean that in the

00:50:14,800 --> 00:50:18,720
demographic sense

00:50:16,000 --> 00:50:20,160
we mean um making sure that the people

00:50:18,720 --> 00:50:22,640
steering it and the people

00:50:20,160 --> 00:50:23,599
writing the code and commuting the code

00:50:22,640 --> 00:50:26,800
and ideas

00:50:23,599 --> 00:50:28,480
are really not bottlenecked on any small

00:50:26,800 --> 00:50:32,640
number of people or companies

00:50:28,480 --> 00:50:35,680
but is is broadly representative of um

00:50:32,640 --> 00:50:40,160
of the uh of the major stakeholding

00:50:35,680 --> 00:50:42,079
companies and projects next please

00:50:40,160 --> 00:50:43,680
nice uh we also are in the middle of a

00:50:42,079 --> 00:50:46,960
major release right now

00:50:43,680 --> 00:50:50,240
um so um we entered

00:50:46,960 --> 00:50:52,240
uh beta at the beginning of august uh we

00:50:50,240 --> 00:50:54,880
hope to have a final release

00:50:52,240 --> 00:50:55,280
uh on september 1st which will make this

00:50:54,880 --> 00:50:58,640
the

00:50:55,280 --> 00:51:01,040
um the new uh supported uh production

00:50:58,640 --> 00:51:02,880
release family and we have some language

00:51:01,040 --> 00:51:04,720
improvements for shader writers

00:51:02,880 --> 00:51:06,559
uh we've updated some of the major

00:51:04,720 --> 00:51:08,160
dependencies in particular

00:51:06,559 --> 00:51:10,559
we've dropped support for some of the

00:51:08,160 --> 00:51:12,000
older llvm versions and added for some

00:51:10,559 --> 00:51:15,280
of the newer ones

00:51:12,000 --> 00:51:17,839
for renderers incorporating it we took

00:51:15,280 --> 00:51:21,200
some care to make sure that we

00:51:17,839 --> 00:51:23,920
now support thread safe on parallel

00:51:21,200 --> 00:51:26,079
uh shader setup on the renderer side and

00:51:23,920 --> 00:51:30,000
we've also improved some of the

00:51:26,079 --> 00:51:32,400
um the just-in-time compilation speed um

00:51:30,000 --> 00:51:34,160
right so uh test if you haven't already

00:51:32,400 --> 00:51:37,760
uh we would like to

00:51:34,160 --> 00:51:39,520
to obsolete the older uh 1.10 release

00:51:37,760 --> 00:51:40,160
and make this the supported one moving

00:51:39,520 --> 00:51:42,800
forward

00:51:40,160 --> 00:51:44,559
um in fairly short order uh next slide

00:51:42,800 --> 00:51:47,359
please

00:51:44,559 --> 00:51:49,359
great um so there there are many things

00:51:47,359 --> 00:51:51,760
that we can and will do in the future

00:51:49,359 --> 00:51:52,800
um right right now there are two big

00:51:51,760 --> 00:51:55,520
development efforts

00:51:52,800 --> 00:51:56,400
underway um that i want you to be uh

00:51:55,520 --> 00:51:58,960
appraised of

00:51:56,400 --> 00:52:00,240
um the first one is there's an effort

00:51:58,960 --> 00:52:03,440
that is led by

00:52:00,240 --> 00:52:06,480
intel and pixar to add a new

00:52:03,440 --> 00:52:07,680
interface for renders onto osl that

00:52:06,480 --> 00:52:09,520
allows you to shade

00:52:07,680 --> 00:52:10,720
not just one point at a time as we

00:52:09,520 --> 00:52:13,040
currently do

00:52:10,720 --> 00:52:14,640
but to shade in batches of eight or

00:52:13,040 --> 00:52:16,880
sixteen points

00:52:14,640 --> 00:52:18,800
at once with batches of points with the

00:52:16,880 --> 00:52:21,920
same needing the same material shader

00:52:18,800 --> 00:52:26,160
to be run and the point here is to

00:52:21,920 --> 00:52:30,079
take advantage of widely available

00:52:26,160 --> 00:52:32,800
hardware in particular intel's avx

00:52:30,079 --> 00:52:33,599
and avx 512 instruction sets that can

00:52:32,800 --> 00:52:35,839
operate

00:52:33,599 --> 00:52:36,880
in a parallel manner on sets of eight or

00:52:35,839 --> 00:52:39,520
00:52:36,880 --> 00:52:40,400
floats at a time and so we are we're

00:52:39,520 --> 00:52:42,960
reducing the

00:52:40,400 --> 00:52:43,839
the cost of evaluating any points at

00:52:42,960 --> 00:52:46,319
once

00:52:43,839 --> 00:52:47,520
the work is mostly done uh and it's it's

00:52:46,319 --> 00:52:50,240
already being used

00:52:47,520 --> 00:52:52,400
you know in production uh and in the

00:52:50,240 --> 00:52:54,880
runaround product uh at pixar

00:52:52,400 --> 00:52:57,599
um and we're we are breaking it into

00:52:54,880 --> 00:53:00,880
chunks um to integrate back into the

00:52:57,599 --> 00:53:03,040
main branch of osl development

00:53:00,880 --> 00:53:04,720
so we're in the midst of that now the

00:53:03,040 --> 00:53:07,760
other major project that's going

00:53:04,720 --> 00:53:08,240
uh forward which um has had a lot of

00:53:07,760 --> 00:53:11,119
work

00:53:08,240 --> 00:53:12,160
uh initially by nvidia and is now

00:53:11,119 --> 00:53:16,079
getting work from

00:53:12,160 --> 00:53:17,119
from others is to make a gpu back-end

00:53:16,079 --> 00:53:19,920
for osl

00:53:17,119 --> 00:53:21,839
um particularly targeting uh cuda and

00:53:19,920 --> 00:53:22,480
optics which seems to be the direction

00:53:21,839 --> 00:53:24,480
that

00:53:22,480 --> 00:53:25,680
most of the high-end film renderers are

00:53:24,480 --> 00:53:29,280
going for their

00:53:25,680 --> 00:53:30,160
gpu support um now we already have the

00:53:29,280 --> 00:53:32,960
basics

00:53:30,160 --> 00:53:33,520
working for many shaders um but um there

00:53:32,960 --> 00:53:35,280
are many

00:53:33,520 --> 00:53:37,599
corners of the language that have not

00:53:35,280 --> 00:53:38,240
been fully fleshed out on the gpu side

00:53:37,599 --> 00:53:41,359
so this is

00:53:38,240 --> 00:53:44,400
ongoing work but a future major

00:53:41,359 --> 00:53:46,400
release um you know we hope we'll

00:53:44,400 --> 00:53:48,400
um we'll be able to say that we really

00:53:46,400 --> 00:53:49,920
do support like all reasonable things

00:53:48,400 --> 00:53:53,200
you can do in your language

00:53:49,920 --> 00:53:56,160
next slide please great

00:53:53,200 --> 00:53:58,559
um so you know if this interests you um

00:53:56,160 --> 00:54:02,240
the obvious way is to follow along

00:53:58,559 --> 00:54:05,119
are to um to watch the um

00:54:02,240 --> 00:54:06,400
the issues and and pull requests on our

00:54:05,119 --> 00:54:10,000
github page

00:54:06,400 --> 00:54:12,400
um subscribe to the aswf uh mail list

00:54:10,000 --> 00:54:13,119
where the development discussions happen

00:54:12,400 --> 00:54:15,440
and we

00:54:13,119 --> 00:54:16,800
like i said we do have this formal

00:54:15,440 --> 00:54:19,280
technical steering committee

00:54:16,800 --> 00:54:21,520
the meetings are open and they happen

00:54:19,280 --> 00:54:22,559
every second week on thursdays at two

00:54:21,520 --> 00:54:25,520
pacific time

00:54:22,559 --> 00:54:26,720
as as a zoom call um those are those are

00:54:25,520 --> 00:54:30,000
public um just look

00:54:26,720 --> 00:54:32,400
on the aswf um median calendar and

00:54:30,000 --> 00:54:35,040
and drop in if you're interested in um

00:54:32,400 --> 00:54:38,480
seeing how this sausage is made so

00:54:35,040 --> 00:54:40,880
uh next slide please

00:54:38,480 --> 00:54:44,079
great and uh that's all i have for you

00:54:40,880 --> 00:54:44,079
so thanks for your attention

00:54:45,920 --> 00:54:49,280
so now we can open it up um if there are

00:54:47,920 --> 00:54:51,599
any q a's

00:54:49,280 --> 00:54:53,119
um i did see that there was one i think

00:54:51,599 --> 00:54:55,359
this one's for you larry about

00:54:53,119 --> 00:54:56,720
are existing clas invalidated with the

00:54:55,359 --> 00:55:00,160
new repo

00:54:56,720 --> 00:55:00,160
uh yes

00:55:00,319 --> 00:55:04,559
the old clas for the old commits are

00:55:02,559 --> 00:55:07,359
fine you don't have to resign

00:55:04,559 --> 00:55:08,160
clas for uh for the things you did

00:55:07,359 --> 00:55:09,839
before

00:55:08,160 --> 00:55:11,280
but even if you signed one of the old

00:55:09,839 --> 00:55:12,880
ones um

00:55:11,280 --> 00:55:14,400
that that basically covered

00:55:12,880 --> 00:55:16,960
contributions to

00:55:14,400 --> 00:55:19,040
the imageworks owned repository so when

00:55:16,960 --> 00:55:21,520
we move the repository over

00:55:19,040 --> 00:55:23,599
to the aswf account you will need to

00:55:21,520 --> 00:55:26,799
have your company sign the new

00:55:23,599 --> 00:55:28,480
cla for the new repository um that this

00:55:26,799 --> 00:55:34,160
is true of all of these projects it's

00:55:28,480 --> 00:55:37,359
not specific to oslo

00:55:34,160 --> 00:55:37,359
any other questions

00:55:39,200 --> 00:55:42,960
okay um well in addition we will be

00:55:42,079 --> 00:55:45,200
trying to post this

00:55:42,960 --> 00:55:46,319
probably later next week on youtube and

00:55:45,200 --> 00:55:48,160
for those who

00:55:46,319 --> 00:55:50,400
missed our open source days which was

00:55:48,160 --> 00:55:52,000
last week all of our projects did give

00:55:50,400 --> 00:55:54,079
in-depth talks

00:55:52,000 --> 00:55:55,119
and those will be posted on the academy

00:55:54,079 --> 00:55:57,760
software foundation

00:55:55,119 --> 00:55:59,440
youtube channel later this week as well

00:55:57,760 --> 00:56:00,240
i encourage you to join our slack

00:55:59,440 --> 00:56:02,400
channel

00:56:00,240 --> 00:56:04,000
and then if you want to fight figure out

00:56:02,400 --> 00:56:05,280
also how to get involved with all the

00:56:04,000 --> 00:56:09,440
different projects

00:56:05,280 --> 00:56:11,599
on the aswf site um aswf.ios

00:56:09,440 --> 00:56:13,040
projects and i'll post it in the chat uh

00:56:11,599 --> 00:56:15,520
there's all the different channels for

00:56:13,040 --> 00:56:21,119
all the projects

00:56:15,520 --> 00:56:21,119
so great so thank you everybody for

00:56:28,839 --> 00:56:31,839
joining

00:56:40,559 --> 00:56:42,640

YouTube URL: https://www.youtube.com/watch?v=OXvm_5jTguk


