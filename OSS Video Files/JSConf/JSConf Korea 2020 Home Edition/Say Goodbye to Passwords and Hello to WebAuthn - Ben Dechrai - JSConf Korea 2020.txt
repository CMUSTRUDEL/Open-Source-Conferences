Title: Say Goodbye to Passwords and Hello to WebAuthn - Ben Dechrai - JSConf Korea 2020
Publication date: 2020-10-14
Playlist: JSConf Korea 2020 Home Edition
Description: 
	Dozens of times a day, we identify ourselves online.

But as the nearly 10 billion leaked accounts documented by ';--have i been pwned? attest, this process has a fatal weaknessâ€“passwords.

The Web Authentication API (or WebAuthn) is a standard from the W3C and FIDO that "allows servers to register and authenticate users using public key cryptography instead of a password". WebAuthn is part of a set of standards that enable passwordless authentication between servers, browsers, and authenticators. It's supported in all modern browsers.

This talk will outline how the technologies work, and how you can take advantage of them today to create a far more secure experience for your users.
Captions: 
	00:00:13,513 --> 00:00:15,382
Hi, yeah, thanks, it's great to be here.

00:00:15,382 --> 00:00:17,584
It's a privilege to be speaking to you today,

00:00:17,584 --> 00:00:19,853
I'm really excited to share with you

00:00:19,853 --> 00:00:21,788
my thoughts around WebAuthn.

00:00:21,788 --> 00:00:24,524
And why we should start forgetting about passwords.

00:00:24,524 --> 00:00:26,126
My name is Ben Dechrai.

00:00:26,126 --> 00:00:29,262
I've been a software engineer now for about 20 years,

00:00:29,262 --> 00:00:30,530
just over 20 years.

00:00:30,530 --> 00:00:33,633
And my passion has always been around security and privacy.

00:00:34,534 --> 00:00:36,903
One of the things that really excites me about WebAuthn

00:00:36,903 --> 00:00:39,406
is that we live in a world nowadays

00:00:39,406 --> 00:00:42,642
where it's quite common to outsource

00:00:42,642 --> 00:00:45,045
all of the authentication to a cloud provider

00:00:45,045 --> 00:00:48,081
like Auth0, who will allow you to integrate

00:00:48,081 --> 00:00:50,884
an SDK with your application and get login

00:00:50,884 --> 00:00:53,286
and single sign on and multifactor authentication,

00:00:53,286 --> 00:00:55,321
all these mechanisms out of the box.

00:00:55,321 --> 00:00:58,158
But the credentials are all stored in one place.

00:00:58,158 --> 00:01:01,161
Now arguably, it's better to give that to a company

00:01:01,161 --> 00:01:03,396
who is dedicated to making sure that it's secure,

00:01:03,396 --> 00:01:05,665
but WebAuthn helps us one step further

00:01:05,665 --> 00:01:08,902
by making sure that the credentials can't actually be

00:01:08,902 --> 00:01:09,869
leaked at any point

00:01:09,869 --> 00:01:12,639
because they exist on these tiny little devices

00:01:12,639 --> 00:01:15,909
or in your phones or on your laptops.

00:01:15,909 --> 00:01:18,611
So the hardware authenticators become the mechanism

00:01:18,611 --> 00:01:20,680
that prove your credentials,

00:01:20,680 --> 00:01:23,249
rather than remembering a password for example.

00:01:23,249 --> 00:01:26,653
So I think the future of WebAuthn

00:01:26,653 --> 00:01:29,389
is that it's going to make our lives as users

00:01:29,389 --> 00:01:31,624
a lot easier and our lives as developers

00:01:31,624 --> 00:01:35,028
and even the infrastructure side of things

00:01:35,028 --> 00:01:37,664
a lot less stressful, so it can only be a good thing.

00:01:38,665 --> 00:01:41,201
Before we have a look in depth at what WebAuthn is

00:01:41,201 --> 00:01:43,436
and how it works, let's look at passwords

00:01:43,436 --> 00:01:44,971
and other credentials,

00:01:44,971 --> 00:01:47,340
lets look at the characteristics that we look for

00:01:47,340 --> 00:01:50,743
in sets of credentials and work out where they sit,

00:01:50,743 --> 00:01:51,845
how they relate to each other

00:01:51,845 --> 00:01:54,747
and what the pros and cons of each are.

00:01:54,747 --> 00:01:57,250
So, when I look at a set of credentials,

00:01:57,250 --> 00:02:00,787
there are three main groups of characteristics

00:02:00,787 --> 00:02:02,922
that I look at to work out whether or not

00:02:02,922 --> 00:02:05,125
I think it's a good performing,

00:02:05,125 --> 00:02:07,627
a well performing credential set.

00:02:07,627 --> 00:02:09,696
The first thing is, is it easy to use?

00:02:09,696 --> 00:02:11,030
Is it easy to remember?

00:02:11,030 --> 00:02:13,166
Is it going to be hard for somebody else to guess?

00:02:13,166 --> 00:02:15,602
Or in the case of where it's not something that's guessable,

00:02:15,602 --> 00:02:18,004
it can can be easily cloned.

00:02:18,004 --> 00:02:20,006
The second thing is, how easy is it to change?

00:02:20,006 --> 00:02:22,108
If somebody does manage to guess my password for example,

00:02:22,108 --> 00:02:23,176
how easy can I change it?

00:02:23,176 --> 00:02:25,411
If somebody manages to get access to my phone,

00:02:25,411 --> 00:02:26,746
how easily can I change it?

00:02:27,614 --> 00:02:29,916
The change mechanisms is really important.

00:02:29,916 --> 00:02:32,385
But if it's really easy to remember, and hard to guess,

00:02:32,385 --> 00:02:34,120
and really easy to change,

00:02:34,120 --> 00:02:35,922
those two by themselves don't help,

00:02:35,922 --> 00:02:37,624
if they're also easy to intercept.

00:02:37,624 --> 00:02:39,659
So obviously, we want any credential mechanism

00:02:39,659 --> 00:02:41,094
to be hard to intercept.

00:02:41,094 --> 00:02:43,296
So if it's hard to intercept, if it's easy to change

00:02:43,296 --> 00:02:45,331
and if it's easy to remember and hard to guess,

00:02:45,331 --> 00:02:47,200
then it's a good set of credentials.

00:02:47,200 --> 00:02:48,301
Let's have a look at some of these credentials

00:02:48,301 --> 00:02:50,103
and see how they stack up.

00:02:50,103 --> 00:02:53,273
I'm going to use a very non scientific mechanism here,

00:02:53,273 --> 00:02:56,776
basically, to plunk onto a graph,

00:02:56,776 --> 00:02:59,012
the performance that I think that each of these

00:02:59,012 --> 00:03:00,380
credential types have

00:03:00,380 --> 00:03:02,949
with the correct characteristics that we've just looked at.

00:03:02,949 --> 00:03:04,050
I'm basically going to say

00:03:04,050 --> 00:03:06,186
that they either perform really well really badly

00:03:06,186 --> 00:03:07,120
or somewhere in the middle,

00:03:07,120 --> 00:03:09,689
i.e. "is it a bit of a gray area situation?"

00:03:09,689 --> 00:03:11,758
And I've mentioned passwords already, let's start there,

00:03:11,758 --> 00:03:13,293
because that's a credential mechanism

00:03:13,293 --> 00:03:14,694
that we're all familiar with.

00:03:14,694 --> 00:03:17,530
Usually tied with a username or an email address

00:03:17,664 --> 00:03:19,832
a password is something we have to remember,

00:03:19,832 --> 00:03:21,434
which means that they're increasingly

00:03:21,434 --> 00:03:23,269
or significantly hard to use

00:03:23,269 --> 00:03:26,739
in terms of how easy it is to remember.

00:03:26,739 --> 00:03:30,944
They're also somewhat easy to guess insofar as,

00:03:30,944 --> 00:03:33,613
if I have a password that's easy for me to remember then

00:03:33,613 --> 00:03:36,082
it's either going to be one of many passwords

00:03:36,082 --> 00:03:37,150
that are quite common,

00:03:37,150 --> 00:03:40,320
or the length of the password is going to be

00:03:40,320 --> 00:03:42,722
such that a computer could iterate through

00:03:42,722 --> 00:03:44,857
and do a brute force attack and get to it

00:03:44,857 --> 00:03:46,226
relatively quickly.

00:03:46,226 --> 00:03:48,061
The easier it is for me to remember a password,

00:03:48,061 --> 00:03:50,630
the easier it is for a computer or a human

00:03:50,630 --> 00:03:52,966
to generate or guess that password.

00:03:54,767 --> 00:03:57,503
The ease of change though,

00:03:57,503 --> 00:04:00,373
is something that passwords are probably the best at,

00:04:00,373 --> 00:04:03,109
which is not necessarily a saving grace for passwords,

00:04:03,109 --> 00:04:04,244
it's just a fact

00:04:04,244 --> 00:04:06,546
that a password is basically is stored in a database

00:04:06,546 --> 00:04:09,115
or in some kind of storage mechanism somewhere.

00:04:09,115 --> 00:04:10,450
Ideally, it's gonna be hashed

00:04:10,450 --> 00:04:13,553
so that it can't be reverse engineered from the hash.

00:04:13,553 --> 00:04:15,188
But to change a password

00:04:15,188 --> 00:04:17,223
just requires you to prove your identity

00:04:17,223 --> 00:04:19,425
and then provide a new password which will then get hashed

00:04:19,425 --> 00:04:22,028
using the same mechanism and stored in the database table.

00:04:22,028 --> 00:04:24,897
So it's basically, it's the hash and a database update

00:04:24,897 --> 00:04:26,833
and that's all it's technically required

00:04:26,833 --> 00:04:28,301
to perform a password change.

00:04:28,301 --> 00:04:30,303
So changing a password, really easy.

00:04:31,304 --> 00:04:33,573
Intercept is, I'm gonna put it

00:04:33,573 --> 00:04:37,877
slightly down towards the negative side of the gray area.

00:04:37,877 --> 00:04:40,446
It's becoming a lot harder to intercept because nowadays,

00:04:40,446 --> 00:04:43,383
we're a lot more focused on HTTPS everywhere.

00:04:43,383 --> 00:04:45,752
It's more common to find even your standard blog

00:04:45,752 --> 00:04:48,888
that doesn't even require you to log in to view it,

00:04:48,888 --> 00:04:50,356
will still be able to reach HTTPS.

00:04:50,356 --> 00:04:52,725
And there are various other reasons why we run

00:04:52,725 --> 00:04:54,761
all our websites over HTTPS,

00:04:54,761 --> 00:04:57,830
in terms of security and privacy and tracking

00:04:57,830 --> 00:04:58,998
and various other things.

00:04:58,998 --> 00:05:01,567
But it does mean that when the passwords are in transit,

00:05:01,567 --> 00:05:04,270
when we're sending details from a browser to a server,

00:05:04,270 --> 00:05:05,738
they're a lot more secure ready than

00:05:05,738 --> 00:05:07,307
they might have been in the past where

00:05:07,307 --> 00:05:12,211
it was possibly commonplace for less security,

00:05:12,211 --> 00:05:16,416
strict web applications to encrypt those passwords

00:05:16,416 --> 00:05:17,317
in transit.

00:05:17,317 --> 00:05:19,686
But we still have an issue when it's at rest

00:05:19,686 --> 00:05:21,321
or before it's even sent.

00:05:21,321 --> 00:05:23,923
So if there's a malicious plugin in your browser,

00:05:23,923 --> 00:05:27,060
or there's a cross site scripting attack in the application,

00:05:27,060 --> 00:05:28,661
then the password could be intercepted

00:05:28,661 --> 00:05:30,596
before it's even sent to the server.

00:05:30,596 --> 00:05:33,266
And once it's at the server, if it's not hashed properly

00:05:33,266 --> 00:05:36,202
or there's a disgruntled employee who leaks the data,

00:05:36,202 --> 00:05:38,338
or a hacker who gets in and leaks the data,

00:05:38,338 --> 00:05:40,640
there are all sorts of ways that passwords can be leaked.

00:05:40,640 --> 00:05:42,575
And we're all probably familiar with the,

00:05:42,575 --> 00:05:44,277
Have I Been Pwned website,

00:05:44,277 --> 00:05:46,512
which is run by a fellow Australian,

00:05:46,512 --> 00:05:49,782
basically a database of a whole lot of large data breaches

00:05:49,782 --> 00:05:52,051
and passwords that have been leaked,

00:05:52,051 --> 00:05:53,986
so that people are able to find out

00:05:53,986 --> 00:05:55,421
whether or not they've been affected by this,

00:05:55,421 --> 00:05:57,957
but the pure existence of Have I Been Pwned

00:05:57,957 --> 00:06:00,827
points to the fact that passwords are really,

00:06:00,827 --> 00:06:03,563
are not a very secure credential mechanism

00:06:03,563 --> 00:06:04,831
for us to use nowadays.

00:06:05,765 --> 00:06:06,733
So we tend to layer it,

00:06:06,733 --> 00:06:08,167
let's have a look at a different kind of credential

00:06:08,167 --> 00:06:09,469
that we can use.

00:06:09,469 --> 00:06:13,906
The SMS's, we've mentioned SMS's and emails a little already,

00:06:15,775 --> 00:06:17,043
they're basically in the same kind of bucket,

00:06:17,043 --> 00:06:18,978
it's a message that gets sent to you somehow,

00:06:18,978 --> 00:06:20,146
and you can act on that message,

00:06:20,146 --> 00:06:21,948
maybe you get sent a six digit code,

00:06:21,948 --> 00:06:23,916
or a four digit code or a password

00:06:23,916 --> 00:06:25,685
or some sort of one time password.

00:06:25,685 --> 00:06:27,019
Or maybe it's the link that you click on.

00:06:27,019 --> 00:06:29,055
And that link will die once you've clicked on it,

00:06:29,055 --> 00:06:31,924
but it'll verify that you have access to the device

00:06:31,924 --> 00:06:35,328
or the email account that that message was sent to.

00:06:35,328 --> 00:06:36,996
So in terms of remembering and really,

00:06:36,996 --> 00:06:38,131
it's quite easy to remember,

00:06:38,131 --> 00:06:39,766
in fact, there is nothing to remember,

00:06:39,766 --> 00:06:41,200
you need to have your phone on you

00:06:41,200 --> 00:06:42,702
or access to your email account.

00:06:42,702 --> 00:06:44,871
But then that one time code is something you type in

00:06:44,871 --> 00:06:46,472
or the link of something you click.

00:06:46,472 --> 00:06:47,740
It's ideally one time

00:06:47,740 --> 00:06:50,009
so that nobody else can then use it in the future.

00:06:50,009 --> 00:06:52,512
But there's nothing actually to remember.

00:06:52,512 --> 00:06:54,614
It's also gonna be quite hard to guess,

00:06:54,614 --> 00:06:57,350
because it's gonna be a random code each time.

00:06:57,350 --> 00:07:01,754
And the the URL is going to be randomized each time ideally.

00:07:01,754 --> 00:07:04,323
So in terms of hard to guess, easy to remember,

00:07:04,323 --> 00:07:06,058
scores pretty highly.

00:07:06,058 --> 00:07:08,728
Changing is about as easy as a password

00:07:08,728 --> 00:07:09,929
or maybe a little harder.

00:07:09,929 --> 00:07:11,998
Essentially, it's just an email address or phone number

00:07:11,998 --> 00:07:13,332
in a database field.

00:07:13,332 --> 00:07:15,001
But we need as developers,

00:07:15,001 --> 00:07:16,869
when we're looking at the security side of things,

00:07:16,869 --> 00:07:19,772
to take extra precautions when changing a password.

00:07:19,772 --> 00:07:22,942
When changing an email address, rather or an SMS,

00:07:22,942 --> 00:07:25,044
in that, we need to make sure that

00:07:25,044 --> 00:07:27,213
if they change their phone number, for example,

00:07:27,213 --> 00:07:29,515
we send the user a message to the new phone

00:07:29,515 --> 00:07:31,250
to make sure they actually have access to it.

00:07:31,250 --> 00:07:33,853
We might also want to send a message their old phone number

00:07:33,853 --> 00:07:36,088
saying, hey, somebody just changed your phone number.

00:07:36,088 --> 00:07:37,056
So that if it was somebody

00:07:37,056 --> 00:07:38,791
who's not supposed to be changing this,

00:07:38,791 --> 00:07:39,959
that the original users made aware of it.

00:07:39,959 --> 00:07:41,828
And the same counts emails as well,

00:07:41,828 --> 00:07:43,996
we're changing our email or phone numbers

00:07:43,996 --> 00:07:46,299
or any kind of communication endpoints

00:07:46,299 --> 00:07:49,302
and mechanisms for the website to get in touch with us.

00:07:49,302 --> 00:07:51,270
We need to both verify

00:07:51,270 --> 00:07:52,905
that we have access to the new account

00:07:52,905 --> 00:07:54,907
and the old account needs to be told

00:07:54,907 --> 00:07:56,909
that the change has been made.

00:07:58,711 --> 00:07:59,579
In terms of intercept,

00:07:59,579 --> 00:08:01,948
it's gonna be harder to intercept than a password.

00:08:01,948 --> 00:08:03,850
But there are still a number of vulnerabilities.

00:08:03,850 --> 00:08:05,718
So I'm not gonna put it into the green area,

00:08:05,718 --> 00:08:10,723
there are issues with email, not with email itself per se.

00:08:10,890 --> 00:08:13,459
But if somebody does have access to your email,

00:08:13,459 --> 00:08:15,228
then they have access to pretty much any site

00:08:15,228 --> 00:08:17,830
that uses email as a password reset mechanism.

00:08:17,830 --> 00:08:20,600
So that puts us into a little bit of a dangerous territory,

00:08:20,600 --> 00:08:22,768
when it comes to SMS is the SM protocol,

00:08:22,768 --> 00:08:25,771
which is the mechanism used by the mobile carriers

00:08:25,771 --> 00:08:28,674
around the world to make sure that SMS's get delivered

00:08:28,674 --> 00:08:29,876
between networks.

00:08:30,710 --> 00:08:34,247
The protocol itself has a couple of vulnerabilities,

00:08:34,247 --> 00:08:36,849
which are not necessarily easy to perform.

00:08:36,849 --> 00:08:39,285
But they do allow somebody for example, to say,

00:08:39,285 --> 00:08:42,121
hey, I want to intercept an SMS going to Ben.

00:08:42,121 --> 00:08:43,890
So I know Ben's mobile number,

00:08:43,890 --> 00:08:46,792
I'm going to put in an S7 network attack

00:08:46,792 --> 00:08:49,862
to have any messages sent to Ben come to me instead.

00:08:49,862 --> 00:08:52,098
And in fact, maybe you could even set it

00:08:52,098 --> 00:08:55,601
to send Ben a different response,

00:08:55,601 --> 00:08:56,836
or still the same response.

00:08:56,836 --> 00:08:58,905
So there's nothing out of the ordinary,

00:08:58,905 --> 00:09:00,606
but intercepts are possible.

00:09:00,606 --> 00:09:03,142
So, in this case, it's a targeted attack,

00:09:03,142 --> 00:09:04,277
they have to specifically say,

00:09:04,277 --> 00:09:06,612
we want to attack that phone number, one case of an email,

00:09:06,612 --> 00:09:08,581
they'd have to attack a certain email address,

00:09:08,581 --> 00:09:11,384
unless the passwords come up in a password leak,

00:09:11,384 --> 00:09:13,352
such as through how have I been pwned?

00:09:14,353 --> 00:09:16,255
So there are a number of issues.

00:09:16,255 --> 00:09:20,326
But certainly intercepts are harder than pure passwords.

00:09:20,326 --> 00:09:21,561
So I've scored it slightly higher,

00:09:21,561 --> 00:09:23,996
you can probably see that is slightly more towards the green

00:09:23,996 --> 00:09:26,599
area there, slipping in the middle of the gray area.

00:09:27,600 --> 00:09:29,035
Then we've got voice or biometrics,

00:09:29,035 --> 00:09:30,636
maybe it's a fingerprint.

00:09:30,636 --> 00:09:34,974
The advantage with these types of credentials,

00:09:34,974 --> 00:09:37,076
the biometric credentials is,

00:09:37,076 --> 00:09:38,644
I don't remember the last time I left home

00:09:38,644 --> 00:09:41,814
without my fingerprint, or without my voice.

00:09:41,814 --> 00:09:43,849
Obviously, there are things that can change them.

00:09:43,849 --> 00:09:46,252
And from using that as a pure credential mechanism

00:09:46,252 --> 00:09:48,421
or as a sole credential mechanism--

00:09:48,421 --> 00:09:51,123
my fingerprint can get damaged if I'm doing woodwork,

00:09:51,123 --> 00:09:54,293
my voice get damaged if I I'm singing a lot,

00:09:54,293 --> 00:09:57,463
not that I sing very much, but maybe I've have had a cold,

00:09:57,463 --> 00:09:58,431
and my voice has changed.

00:09:58,431 --> 00:10:00,600
So there are various things that can change

00:10:03,336 --> 00:10:04,971
the credential, essentially.

00:10:04,971 --> 00:10:06,372
But it's not really something I have to remember,

00:10:06,372 --> 00:10:09,542
so in terms of easy to remember, hard to clone,

00:10:09,542 --> 00:10:11,510
or hard to emulate.

00:10:11,510 --> 00:10:13,179
I'm gonna score it pretty highly.

00:10:14,146 --> 00:10:16,582
In terms of changing however, it's nigh on impossible,

00:10:16,582 --> 00:10:18,250
I can't change my fingerprint.

00:10:18,250 --> 00:10:19,685
I do have 10 fingerprints,

00:10:19,685 --> 00:10:21,587
so I can definitely I can technically change

00:10:21,587 --> 00:10:25,024
which fingerprint I use to authenticate nine times,

00:10:25,024 --> 00:10:27,460
but then I'm out of fingers.

00:10:27,460 --> 00:10:29,895
I can't go beyond that.

00:10:29,895 --> 00:10:31,697
And also, once one fingerprint has been leaked,

00:10:31,697 --> 00:10:33,466
I need to make sure that it's never used anywhere else

00:10:33,466 --> 00:10:36,202
because I can't change, I can't invalidate this fingerprint.

00:10:36,202 --> 00:10:37,770
If somebody has a fingerprint,

00:10:37,770 --> 00:10:40,439
and I'll talk about how that could happen in a second.

00:10:41,374 --> 00:10:43,175
We can't change it, I can't change my voice.

00:10:43,175 --> 00:10:44,810
It changes slightly over time.

00:10:44,810 --> 00:10:45,978
That's a different issue.

00:10:45,978 --> 00:10:49,382
But I can't say, look, my voice has been compromised,

00:10:49,382 --> 00:10:50,483
I need a different one.

00:10:50,483 --> 00:10:52,184
That's not possible.

00:10:52,184 --> 00:10:54,020
In terms of except, I'm scoring it quite highly,

00:10:54,020 --> 00:10:55,821
but it's not quite in the green area.

00:10:55,821 --> 00:10:57,923
Because there are a couple of little issues.

00:10:57,923 --> 00:11:00,960
We know nowadays and you might have seen it yourselves,

00:11:00,960 --> 00:11:02,995
some of these videos with a side and side video

00:11:02,995 --> 00:11:06,699
where there's some gentleman [inaudible] public talking.

00:11:06,699 --> 00:11:08,134
And then on the other side,

00:11:08,134 --> 00:11:11,737
there's an artificially intelligently created video

00:11:11,737 --> 00:11:14,940
of let's say, for example, Barack Obama, and it's his face,

00:11:14,940 --> 00:11:16,909
his lips are moving in time to the words,

00:11:16,909 --> 00:11:18,477
and the words are coming out in his voice.

00:11:18,477 --> 00:11:19,879
And that's all computer generated

00:11:19,879 --> 00:11:21,480
using artificial intelligence

00:11:21,480 --> 00:11:23,482
based on what this person over here is saying.

00:11:23,482 --> 00:11:26,485
So technically, it's possible to emulate voice.

00:11:26,485 --> 00:11:29,488
Technically, it's possible to also emulate fingerprints.

00:11:29,488 --> 00:11:32,625
There's another story where somebody was able to take

00:11:32,625 --> 00:11:36,062
a high resolution photo of a fingerprint on a glass

00:11:36,062 --> 00:11:38,030
and taking that high resolution photo

00:11:38,030 --> 00:11:42,034
into a 3d rendering software, turning into a 3d model

00:11:42,034 --> 00:11:44,904
and then printing it with a 3d printer using a material

00:11:44,904 --> 00:11:47,807
that was accepted by the fingerprint scanner as skin,

00:11:47,807 --> 00:11:49,975
they were able to unlock a mechanism using

00:11:49,975 --> 00:11:51,610
a cloned fingerprint.

00:11:51,610 --> 00:11:54,113
So it's technically possible but in both of these cases,

00:11:54,113 --> 00:11:57,283
there are getting targeted attacks like the SMS situation,

00:11:57,283 --> 00:11:59,719
you have to, you can only emulate one voice at a time.

00:11:59,719 --> 00:12:01,320
You can't just break all voices,

00:12:01,320 --> 00:12:03,723
you have to find the fingerprint that you need to unlock.

00:12:03,723 --> 00:12:05,191
So they're targeted attacks,

00:12:05,191 --> 00:12:08,761
the Intercept is performs well in terms of,

00:12:08,761 --> 00:12:10,129
it's hard to intercept.

00:12:10,129 --> 00:12:13,265
But it is still possible, and we need to remember that.

00:12:13,265 --> 00:12:14,700
And you've probably noticed that

00:12:14,700 --> 00:12:17,369
there are three main characteristics here of password types.

00:12:17,369 --> 00:12:19,371
And we call this multi-factor authentication.

00:12:19,371 --> 00:12:21,540
We have passwords, which is something that you know,

00:12:21,540 --> 00:12:24,610
something in your head. We have SMS's or emails,

00:12:24,610 --> 00:12:25,578
which is something you have,

00:12:25,578 --> 00:12:27,046
you have access to the email account,

00:12:27,046 --> 00:12:29,882
or you have the SIM card that's in your phone.

00:12:29,882 --> 00:12:31,851
And then we've got voice and fingerprint,

00:12:31,851 --> 00:12:33,018
which is something that you are,

00:12:33,018 --> 00:12:35,387
it's a biometric authentication mechanism.

00:12:35,387 --> 00:12:39,158
So in order to make users more secure,

00:12:39,158 --> 00:12:42,428
we now tend to look towards multi-factor authentication

00:12:42,428 --> 00:12:45,064
where we need at least two, possibly three

00:12:45,064 --> 00:12:45,965
of these characteristics.

00:12:45,965 --> 00:12:47,299
You can't have two password types

00:12:47,299 --> 00:12:49,135
or two something's you know,

00:12:49,135 --> 00:12:51,771
you have to have one from each of these three columns.

00:12:51,771 --> 00:12:53,539
And they could be things like a pin number,

00:12:53,539 --> 00:12:55,975
an access card and a client certificate in the browser.

00:12:55,975 --> 00:12:59,411
But having a client certificate isn't something you are,

00:13:01,881 --> 00:13:02,882
but it's actually something you have.

00:13:02,882 --> 00:13:04,984
But you could have a voice, for example, still.

00:13:04,984 --> 00:13:08,220
So getting multiples of these factors make us more secure.

00:13:08,220 --> 00:13:11,290
And the downside to that, though, is that

00:13:11,290 --> 00:13:13,726
we're making it less convenient for people to log in,

00:13:13,726 --> 00:13:15,628
we're putting extra layers of security in,

00:13:15,628 --> 00:13:16,896
which makes convenience harder,

00:13:16,896 --> 00:13:18,564
and people are going to be slightly more annoyed

00:13:18,564 --> 00:13:19,632
at having to log in.

00:13:19,632 --> 00:13:23,269
So we have to balance the user experience journey here

00:13:23,269 --> 00:13:25,938
with proving who we are as users.

00:13:25,938 --> 00:13:27,740
So what you'll find is that maybe

00:13:27,740 --> 00:13:29,441
to access the system in the first place,

00:13:29,441 --> 00:13:30,643
you just need a username and password,

00:13:30,643 --> 00:13:33,379
and that'll get you in, you can see your dashboard.

00:13:33,379 --> 00:13:35,381
Perhaps if it's internet banking, for example,

00:13:35,381 --> 00:13:36,982
you can see your statements.

00:13:36,982 --> 00:13:38,818
But if you want to do a transfer then,

00:13:38,818 --> 00:13:41,554
you've got to give it a second factor of authentication.

00:13:41,554 --> 00:13:44,623
Maybe they'll send you a code via SMS,

00:13:44,623 --> 00:13:46,859
or maybe if it's a physical presence

00:13:46,859 --> 00:13:47,693
you're trying to log into,

00:13:47,693 --> 00:13:49,528
you'll need to use your fingerprint scanner

00:13:49,528 --> 00:13:52,531
to access whatever it is you're trying to get to.

00:13:52,531 --> 00:13:54,800
So we can do this step up authentication,

00:13:54,800 --> 00:13:57,403
where higher levels of authentication are required

00:13:57,403 --> 00:13:59,772
for more sensitive actions that we want to take.

00:14:01,707 --> 00:14:04,410
Let's consider not using passwords

00:14:04,410 --> 00:14:06,212
or anything that you know at all,

00:14:06,212 --> 00:14:07,680
you might have heard of the term passwordless.

00:14:07,680 --> 00:14:10,850
This is where we get rid of the need to remember things.

00:14:10,850 --> 00:14:11,684
Obviously, you need to remember your phone

00:14:11,684 --> 00:14:13,552
or your hardware authenticator.

00:14:13,552 --> 00:14:16,055
But the need to remember things in your brain

00:14:16,055 --> 00:14:19,191
in terms of what was my password, and when did I change it?

00:14:19,191 --> 00:14:20,659
These kind of things are thrown out

00:14:20,659 --> 00:14:21,927
when we look at passwordless.

00:14:21,927 --> 00:14:23,362
And if we look at just things that we are

00:14:23,362 --> 00:14:24,530
and things that we have,

00:14:24,530 --> 00:14:26,232
we can get passwordless authentication,

00:14:26,232 --> 00:14:28,000
which is a lot more convenient,

00:14:28,000 --> 00:14:29,268
people that need to remember things.

00:14:29,268 --> 00:14:30,803
If you're using a different computer

00:14:30,803 --> 00:14:32,071
and you have a password manager,

00:14:32,071 --> 00:14:34,573
you don't need access to your password manager anymore.

00:14:34,573 --> 00:14:36,742
So we're making it easier for people to log in.

00:14:36,742 --> 00:14:38,210
But now we're also

00:14:38,210 --> 00:14:40,012
reducing the number of factors that we can use.

00:14:40,012 --> 00:14:43,182
So if we go purely passwordless, convenience is high.

00:14:43,182 --> 00:14:45,618
And we've still got good levels of authentication,

00:14:45,618 --> 00:14:47,186
and credential checking.

00:14:47,186 --> 00:14:49,288
But we've lost one of the factors that we can use.

00:14:49,288 --> 00:14:51,357
So technically, maybe you could consider

00:14:51,357 --> 00:14:53,058
that it's getting slightly weaker,

00:14:53,058 --> 00:14:55,761
for the sake of slightly more convenience,

00:14:55,761 --> 00:14:57,596
so ease of use for our users.

00:14:58,731 --> 00:15:01,533
So let's bring in the FIDO security key now.

00:15:01,533 --> 00:15:03,636
And that's the, things like these little

00:15:03,636 --> 00:15:05,404
USB devices or your mobile phones

00:15:05,404 --> 00:15:07,873
that have a hardware authenticator built in.

00:15:07,873 --> 00:15:11,443
These are what WebAuthn uses for authentication.

00:15:11,443 --> 00:15:12,811
The advantage with these,

00:15:12,811 --> 00:15:15,514
is that they have a public-private key onboard,

00:15:15,514 --> 00:15:18,751
which means that the credentials are always stored,

00:15:18,751 --> 00:15:22,421
or the mechanism for identifying yourself

00:15:22,421 --> 00:15:25,291
is contained within the key itself.

00:15:25,291 --> 00:15:28,193
This makes it really easy to use or really hard to guess,

00:15:28,193 --> 00:15:31,096
the public-private key pair, the only way of generating

00:15:31,096 --> 00:15:32,831
a signature of a payload

00:15:32,831 --> 00:15:35,734
--and we'll look into the technicalities of how WebAuthn works

00:15:35,734 --> 00:15:36,568
in a minute--

00:15:36,568 --> 00:15:39,939
but the ability to clone a public-private key pair

00:15:39,939 --> 00:15:41,907
is mathematically improbable.

00:15:41,907 --> 00:15:42,975
I'm not gonna say it's impossible,

00:15:42,975 --> 00:15:45,811
there's probably some minuscule probability

00:15:45,811 --> 00:15:47,880
that somebody somewhere might be able to do this.

00:15:47,880 --> 00:15:49,615
But again, it would have to be a targeted attack,

00:15:49,615 --> 00:15:52,051
it's gonna take a huge amount of computing resources,

00:15:52,051 --> 00:15:54,219
so we can essentially call it impossible.

00:15:54,219 --> 00:15:56,021
For most intents and purposes,

00:15:56,021 --> 00:15:58,457
it's impossible to clone a public-private key pair

00:15:58,457 --> 00:16:02,094
for the purposes of breaking a FIDO security key

00:16:02,094 --> 00:16:03,095
sign-in mechanism.

00:16:04,663 --> 00:16:05,564
In terms of changing,

00:16:05,564 --> 00:16:08,200
it's about as easy to change as changing your phone number

00:16:08,200 --> 00:16:09,935
or your email address on a website,

00:16:09,935 --> 00:16:11,870
you just register a new FIDO security key

00:16:11,870 --> 00:16:13,739
with a web application you're trying to log into.

00:16:13,739 --> 00:16:16,475
And if you need to, you can de-register the old one.

00:16:16,475 --> 00:16:18,510
Often, you might find that it's useful

00:16:18,510 --> 00:16:20,879
for your users to have multiple keys anyway,

00:16:20,879 --> 00:16:22,848
because then if they lose one, they've got a backup,

00:16:22,848 --> 00:16:24,049
maybe they have one in their pocket

00:16:24,049 --> 00:16:27,252
or on their key chain, and one in a safe somewhere

00:16:27,252 --> 00:16:28,821
just in case something goes wrong.

00:16:28,821 --> 00:16:31,190
And that way, they can use either of them to log in,

00:16:31,190 --> 00:16:33,826
and they have a backup mechanism.

00:16:33,826 --> 00:16:37,730
Because the ability to recreate like I say,

00:16:37,730 --> 00:16:40,766
the public private key pair is so mathematically improbable

00:16:40,766 --> 00:16:41,934
that if they lost their key,

00:16:41,934 --> 00:16:43,936
they've lost their credential mechanism.

00:16:44,870 --> 00:16:46,772
In terms of intercept, again, really high

00:16:46,772 --> 00:16:49,475
and there's an additional thing that I'm gonna add on.

00:16:49,475 --> 00:16:51,877
Like I say, generating public-private key pair

00:16:51,877 --> 00:16:53,846
or cloning it, it is so improbable

00:16:53,846 --> 00:16:56,215
that you're not going to be able to clone

00:16:57,182 --> 00:16:59,852
the public-private key pair.

00:16:59,852 --> 00:17:04,223
Similarly, when the signed challenges

00:17:04,223 --> 00:17:05,290
which we'll look at in a second

00:17:05,290 --> 00:17:07,092
and the keys are passed around,

00:17:07,092 --> 00:17:09,595
the public key is the only one that ever leaves

00:17:09,595 --> 00:17:12,064
the FIDO security key.

00:17:12,064 --> 00:17:14,066
So, public keys are public,

00:17:14,066 --> 00:17:15,401
it doesn't matter if there leaked,

00:17:15,401 --> 00:17:16,802
and the signed challenge

00:17:16,802 --> 00:17:18,904
is only good for one request anyway.

00:17:18,904 --> 00:17:21,940
So intercept, even if you could intercept the data,

00:17:21,940 --> 00:17:24,610
it doesn't matter because it's a single purpose, single use,

00:17:24,610 --> 00:17:26,278
and it can't be used against

00:17:26,278 --> 00:17:28,947
the wrong web application you're trying to look into.

00:17:28,947 --> 00:17:31,517
And this is a really important additional feature,

00:17:31,517 --> 00:17:34,420
is that it eliminates phishing attempts.

00:17:34,420 --> 00:17:37,456
You might find, and we'll have a look at phishing,

00:17:37,456 --> 00:17:39,425
actually how it works in a second.

00:17:39,425 --> 00:17:42,594
But you might find that if you're,

00:17:42,594 --> 00:17:45,230
if you provide credentials to the wrong application,

00:17:45,230 --> 00:17:47,800
then obviously that malicious user

00:17:47,800 --> 00:17:49,868
is going to be able to use that data,

00:17:49,868 --> 00:17:52,137
the credentials to log in as you,

00:17:52,137 --> 00:17:54,406
phishing is is how that works.

00:17:55,240 --> 00:17:56,708
Let's have a look at that, in fact.

00:17:56,708 --> 00:17:59,378
So you've got a user, let's say this is you

00:17:59,378 --> 00:18:04,383
trying to have a lovely day watching videos

00:18:04,716 --> 00:18:06,885
at JSConf Korea.

00:18:06,885 --> 00:18:09,588
And you get an SMS or you get an email at some point.

00:18:09,588 --> 00:18:11,590
And I had one of these emails just the other day,

00:18:11,590 --> 00:18:13,025
it was from Google and they said,

00:18:13,025 --> 00:18:15,627
"You've run out of cloud storage,..."

00:18:15,627 --> 00:18:17,663
"...we're not able to backup your device anymore...."

00:18:17,663 --> 00:18:20,866
"...Click here to upgrade your your account to get more storage."

00:18:22,000 --> 00:18:22,935
Let's say you've got one of those.

00:18:22,935 --> 00:18:24,203
But it wasn't actually from Google,

00:18:24,203 --> 00:18:25,370
let's say it was from,

00:18:25,370 --> 00:18:28,140
let's say, I was trying to get into your Google account.

00:18:28,140 --> 00:18:30,042
I sent you the the message.

00:18:30,042 --> 00:18:32,611
But it actually took you to a website that looks

00:18:32,611 --> 00:18:33,846
very much like Google.

00:18:33,846 --> 00:18:35,514
And to your brain,

00:18:35,514 --> 00:18:36,882
it felt like you're logging into Google

00:18:36,882 --> 00:18:38,283
and all the messaging felt right.

00:18:38,283 --> 00:18:40,786
So you just clicked on it, and you get this login page,

00:18:40,786 --> 00:18:43,355
and you provide your actual credentials to this website.

00:18:43,355 --> 00:18:44,656
But your brain doesn't notice

00:18:44,656 --> 00:18:46,992
the the domain is actually slightly different.

00:18:46,992 --> 00:18:48,026
So you provide these credentials.

00:18:48,026 --> 00:18:50,362
And the first thing I'm going to do as an attacker

00:18:50,362 --> 00:18:53,632
is I'm going to send you to a fake success page,

00:18:53,632 --> 00:18:55,367
I could send you to the actual Google website.

00:18:55,367 --> 00:18:57,536
And the likelihood is if you're a Google user,

00:18:57,536 --> 00:18:58,871
because you're logged in,

00:18:58,871 --> 00:19:00,105
then you're probably actually logged in already.

00:19:00,105 --> 00:19:02,007
So you'd get to the Google website

00:19:02,007 --> 00:19:03,509
after I redirect you there.

00:19:03,509 --> 00:19:06,478
And it would look like you've successfully logged in.

00:19:06,478 --> 00:19:08,714
But there's a reason I'm using a fake success page.

00:19:08,714 --> 00:19:10,883
We'll come back to that in a second.

00:19:10,883 --> 00:19:13,585
Meanwhile, you've sent your actual Google credentials to me,

00:19:13,585 --> 00:19:16,421
or more likely to a script that I've got running somewhere.

00:19:16,421 --> 00:19:18,357
And that script is then going to take those credentials

00:19:18,357 --> 00:19:19,791
and pass them to the Google server and say,

00:19:19,791 --> 00:19:22,528
"Hey, I want to log in with this username and password

00:19:22,528 --> 00:19:23,829
to see whether or not they work."

00:19:23,829 --> 00:19:25,964
And in an ideal situation, what happens is,

00:19:25,964 --> 00:19:30,068
I get a 200 confirmed it's okay, yes, you're logged in.

00:19:30,068 --> 00:19:33,238
And I now have access to your Google account.

00:19:33,238 --> 00:19:35,674
I can change your credentials and hijack your account

00:19:35,674 --> 00:19:39,378
or I could use your account for fake reviews

00:19:39,378 --> 00:19:40,579
or whatever it is that I want to do

00:19:40,579 --> 00:19:44,116
with your Google details, I now have your credentials.

00:19:44,116 --> 00:19:46,818
Now, let's go back to the fake success page for a second.

00:19:46,818 --> 00:19:48,320
You might be aware

00:19:48,320 --> 00:19:50,422
that if I did try to log into your Google account,

00:19:50,422 --> 00:19:51,857
and Google's probably going to notice

00:19:51,857 --> 00:19:53,859
and all of the larger websites

00:19:53,859 --> 00:19:56,061
and any of the websites out there that

00:19:57,729 --> 00:19:59,831
will check where you're logging in from

00:19:59,831 --> 00:20:02,267
will alert you if you're logging in from a system

00:20:02,267 --> 00:20:03,468
that has not been recognized.

00:20:03,468 --> 00:20:06,238
So you might get a message on the browser,

00:20:06,238 --> 00:20:08,874
if you're doing with legitimately saying "Hey,"

00:20:08,874 --> 00:20:10,876
"it looks like you're logging in from a new device"

00:20:10,876 --> 00:20:14,046
"or from a new country, we're going to send you an SMS,"

00:20:14,046 --> 00:20:16,148
"please enter your code in here"

00:20:16,148 --> 00:20:18,150
to verify that you are who you say you are.

00:20:18,150 --> 00:20:19,284
This is the step of authentication

00:20:19,284 --> 00:20:20,852
that we were talking about before.

00:20:20,852 --> 00:20:22,020
Maybe it's a push notification,

00:20:22,020 --> 00:20:24,389
we're sending a push notification, hit the yes button,

00:20:24,389 --> 00:20:25,791
and then we'll log you in.

00:20:25,791 --> 00:20:29,027
So if that happens to me while I'm trying to log in as you

00:20:29,027 --> 00:20:31,730
then if you get the push notification, you hit 'yes' ,

00:20:31,730 --> 00:20:33,465
I'm logged in. If you get the SMS,

00:20:34,366 --> 00:20:35,734
where do you put the code?

00:20:35,734 --> 00:20:38,036
So if I give you a fake success page that says,

00:20:38,036 --> 00:20:40,272
hey, I need this code, you type your code in,

00:20:40,272 --> 00:20:41,940
then I have your code, I can use that to login.

00:20:41,940 --> 00:20:44,977
And the likelihood is, if in your brain you think

00:20:44,977 --> 00:20:46,912
you're logging into the real Google website,

00:20:46,912 --> 00:20:48,647
and you get the notification saying, "hey,"

00:20:48,647 --> 00:20:49,481
"it looks like somebody"

00:20:49,481 --> 00:20:50,882
"is trying to log into your Google account."

00:20:50,882 --> 00:20:52,451
You're gonna hit yes without noticing.

00:20:52,451 --> 00:20:53,885
But down at the bottom it says

00:20:53,885 --> 00:20:55,520
"You're logging in from Melbourne, Australia",

00:20:55,520 --> 00:20:56,922
which is me, not you.

00:20:57,923 --> 00:21:00,525
So basically what phishing is

00:21:00,525 --> 00:21:02,094
is the ability to trick somebody

00:21:02,094 --> 00:21:06,131
to provide their credentials into a fake login page.

00:21:06,131 --> 00:21:07,666
Let's have a look at how WebAuthn's

00:21:07,666 --> 00:21:10,202
registration and the login process work now,

00:21:10,202 --> 00:21:14,106
and how they stop the fake login page scenario or phishing,

00:21:14,106 --> 00:21:15,741
from happening.

00:21:15,741 --> 00:21:16,775
So let's say this is you

00:21:16,775 --> 00:21:18,510
and you're trying to log into my website,

00:21:18,510 --> 00:21:19,378
you go to your browser,

00:21:19,378 --> 00:21:21,079
you type in the URL for my website,

00:21:21,079 --> 00:21:22,714
you hit the Register button, and you say,

00:21:22,714 --> 00:21:24,116
I want to create a new account.

00:21:24,116 --> 00:21:25,651
My name is Susan.

00:21:25,651 --> 00:21:28,220
So you provide the username Susan to my server,

00:21:28,220 --> 00:21:29,054
my server says,

00:21:29,054 --> 00:21:30,989
hey, it looks like you're trying to create a new account

00:21:30,989 --> 00:21:33,058
using FIDO or using WebAuthn.

00:21:33,058 --> 00:21:35,427
So what I'm going to do is I'm going to return to you,

00:21:35,427 --> 00:21:36,261
or rather to your browser,

00:21:36,261 --> 00:21:37,996
I'm going to send you a challenge.

00:21:37,996 --> 00:21:40,265
And this is some randomly generated code,

00:21:40,265 --> 00:21:43,802
some texts and some data that I require

00:21:43,802 --> 00:21:46,204
a signed response for.

00:21:46,204 --> 00:21:48,273
Let's have a look at that signature happens.

00:21:48,273 --> 00:21:50,742
So the data gets sent to the browser.

00:21:50,742 --> 00:21:53,445
The browser then uses the `navigator.credentials` API,

00:21:53,445 --> 00:21:56,682
which is the API available in the newer browsers

00:21:56,682 --> 00:22:00,519
to enable WebAuthn. And this `navigator.credentials` API

00:22:00,652 --> 00:22:01,787
has two methods on it.

00:22:01,787 --> 00:22:02,988
The first one that we're gonna look at

00:22:02,988 --> 00:22:04,923
is the create or as a number of methods.

00:22:04,923 --> 00:22:07,893
But the first one we'll look at is the `create` method.

00:22:07,893 --> 00:22:10,462
And into it, we pass the challenge

00:22:10,462 --> 00:22:12,030
that got sent from the server.

00:22:12,030 --> 00:22:13,699
And also we pass in the web origin.

00:22:13,699 --> 00:22:16,868
So if you're looking at google.com, it'll say google.com.

00:22:16,868 --> 00:22:19,604
If you're looking at g00gl3.com,

00:22:19,604 --> 00:22:21,540
it'll have that in the web origin.

00:22:21,540 --> 00:22:23,875
So each key pair is now locked into the domain.

00:22:23,875 --> 00:22:26,411
And no matter how confused your brain might be,

00:22:26,411 --> 00:22:28,113
your browser is never going to get confused

00:22:28,113 --> 00:22:30,716
about the web origin that gets sent to the,

00:22:31,550 --> 00:22:33,652
as part of the WebAuthn and login process.

00:22:34,586 --> 00:22:38,457
So that web origin is used by the security key

00:22:38,457 --> 00:22:40,692
to generate a new public-private key pair,

00:22:40,692 --> 00:22:42,728
locks to that web origin,

00:22:42,728 --> 00:22:44,763
and then it will take the challenge that it received as well

00:22:44,763 --> 00:22:47,299
and it will use the private key to sign the challenge

00:22:47,299 --> 00:22:50,335
and then it will return just that signed challenge

00:22:50,335 --> 00:22:52,871
and the public key back to the browser.

00:22:52,871 --> 00:22:55,707
The private key gets stored on the security key

00:22:55,707 --> 00:22:59,811
on the actual device and only the public key

00:22:59,811 --> 00:23:01,213
gets sent back to the browser,

00:23:01,213 --> 00:23:04,916
along with a public key identifier or a key pair identifier

00:23:04,916 --> 00:23:06,852
and the sign to challenge.

00:23:06,852 --> 00:23:08,220
The browser doesn't do anything with this

00:23:08,220 --> 00:23:10,222
other than send it straight onto the server.

00:23:10,222 --> 00:23:12,724
So when Susan has created her account,

00:23:12,724 --> 00:23:14,726
the final response to the server

00:23:14,726 --> 00:23:17,262
includes the the public key,

00:23:17,262 --> 00:23:20,766
or rather the public key ID and the signed challenge.

00:23:20,766 --> 00:23:22,367
So my server can now say,

00:23:22,367 --> 00:23:24,770
hey, I know that Susan tried to create an account,

00:23:24,770 --> 00:23:27,272
and I know that I sent her browser this challenge,

00:23:27,272 --> 00:23:29,674
and I've just received this signed challenge in return

00:23:29,674 --> 00:23:30,942
which I can verify

00:23:30,942 --> 00:23:34,446
is a signed version of the original challenge.

00:23:34,446 --> 00:23:36,982
And it's also been signed with the key pair

00:23:36,982 --> 00:23:39,851
that's associated with this public key that's come back.

00:23:39,851 --> 00:23:42,320
So essentially, this is now in effect,

00:23:42,320 --> 00:23:45,390
my password, it's the way that I verify

00:23:45,390 --> 00:23:47,659
that Susan is the person who's logging in next time.

00:23:47,659 --> 00:23:50,662
So into my database, I'll store Susan's username,

00:23:50,662 --> 00:23:54,232
the public key and the public key ID,

00:23:54,232 --> 00:23:56,668
they're the three bits of information that I need to store.

00:23:56,668 --> 00:23:58,336
So now Susan comes back and she wants to log in.

00:23:58,336 --> 00:23:59,604
She's got an account already.

00:23:59,604 --> 00:24:02,507
And she says hey, my username is Susan, I want to login.

00:24:02,507 --> 00:24:03,942
And my server is now gonna say,

00:24:03,942 --> 00:24:06,111
well, I know that there is a user called Susan already,

00:24:06,111 --> 00:24:10,315
and in effect, Susan's got this public-private key pair ID

00:24:10,315 --> 00:24:11,983
that I'm aware of.

00:24:12,050 --> 00:24:15,520
So I'm now going to send back to Susan's browser,

00:24:15,520 --> 00:24:19,157
the challenge, and also the ID

00:24:19,157 --> 00:24:21,693
of the public-private key pair that I expect

00:24:21,693 --> 00:24:24,896
her to sign this challenge with, and return back to me.

00:24:24,896 --> 00:24:26,498
So I need to make sure that she has

00:24:26,498 --> 00:24:28,166
the same key available to her

00:24:28,166 --> 00:24:30,469
that was used when she registered her account.

00:24:31,336 --> 00:24:34,272
So we now call the `get` method

00:24:34,272 --> 00:24:36,508
on the `navigator.credentials` API.

00:24:36,508 --> 00:24:38,176
And into that, again, we pass the challenge,

00:24:38,176 --> 00:24:39,110
we pass the web origin,

00:24:39,110 --> 00:24:41,980
and we also pass in the ID this time.

00:24:41,980 --> 00:24:44,015
So the hardware authenticator

00:24:44,015 --> 00:24:46,184
can now pull out the public-private key pair

00:24:46,184 --> 00:24:49,020
or rather the private key associated with that ID.

00:24:49,020 --> 00:24:51,423
We can use that private key to sign the challenge

00:24:51,423 --> 00:24:53,225
that got sent in, and then return

00:24:53,225 --> 00:24:55,360
just that signed challenge.

00:24:55,360 --> 00:24:57,062
The sign challenge goes back to the browser,

00:24:57,062 --> 00:24:59,097
and the browser then returns that signed challenge

00:24:59,097 --> 00:25:00,632
back to the server.

00:25:00,632 --> 00:25:03,268
So in logging in, Susan told me her username,

00:25:03,268 --> 00:25:05,170
I sent a challenge plus an ID,

00:25:05,170 --> 00:25:07,439
that ID referenced the public private key pair

00:25:07,439 --> 00:25:08,907
that was used to sign the challenge,

00:25:08,907 --> 00:25:11,109
which is then returned back to the server.

00:25:11,109 --> 00:25:14,513
And I can verify that the signed challenge that came back

00:25:14,513 --> 00:25:16,047
is a signed version of the challenge

00:25:16,047 --> 00:25:17,482
that I sent for the login process,

00:25:17,482 --> 00:25:18,917
which will be different to the one that was used

00:25:18,917 --> 00:25:20,452
for the registration process.

00:25:20,452 --> 00:25:23,221
But I can also verify that it was signed with a key pair

00:25:23,221 --> 00:25:26,424
that matches the public key that I have on record already.

00:25:26,424 --> 00:25:27,359
So I'm not updating that,

00:25:27,359 --> 00:25:31,129
I'm using the previously stored public key to verify

00:25:31,129 --> 00:25:34,566
that the signature was generated by the same device.

00:25:34,566 --> 00:25:37,135
So it's essentially proving that the person who's logged in

00:25:37,135 --> 00:25:39,471
has access to the hardware authenticator,

00:25:39,471 --> 00:25:41,473
which in the case of some hardware authenticators

00:25:41,473 --> 00:25:44,776
might just prove that they have possession.

00:25:44,776 --> 00:25:47,746
But in the case of ones where, like the Pixel 2,

00:25:47,746 --> 00:25:49,748
where you have the fingerprint reader on the back,

00:25:49,748 --> 00:25:50,916
or maybe the MacBook Pro,

00:25:50,916 --> 00:25:52,884
where you need to talk to the fingerprint scanner

00:25:52,884 --> 00:25:54,719
to activate the hardware authenticator.

00:25:54,719 --> 00:25:56,221
It also proves who's there,

00:25:56,221 --> 00:25:58,557
because while you don't know what the fingerprint is,

00:25:58,557 --> 00:26:01,126
you know that it was the same person

00:26:01,126 --> 00:26:03,495
who was able to unlock the key the first time.

00:26:04,362 --> 00:26:06,264
So I hope that's given you a bit of an insight

00:26:06,264 --> 00:26:08,667
into how WebAuthn works, how the flow works,

00:26:08,667 --> 00:26:10,969
how we manage to eliminate phishing attacks

00:26:10,969 --> 00:26:13,471
through the tying of the web origin

00:26:13,471 --> 00:26:17,075
to the public-private key, and how it makes us as developers

00:26:17,075 --> 00:26:20,912
more secure, the applications we develop more secure.

00:26:20,912 --> 00:26:23,715
Insofar as we don't have to store credentials

00:26:23,715 --> 00:26:25,283
in our databases anymore,

00:26:25,283 --> 00:26:27,519
--we're actually just storing a public key,

00:26:27,519 --> 00:26:29,721
which we can use to verify future signatures

00:26:29,721 --> 00:26:32,891
generated by the hardware authenticators

00:26:32,891 --> 00:26:35,627
that are used in the WebAuthn login flow.

00:26:37,295 --> 00:26:39,497
I'm gonna be sticking around after this for Q&A.

00:26:39,497 --> 00:26:40,966
I'm more than happy to take any questions.

00:26:40,966 --> 00:26:43,602
And I'd also love to show you a demo using webauthn.me,

00:26:43,602 --> 00:26:46,438
which is a website written by one of my colleagues.

00:26:46,438 --> 00:26:50,375
I'm also available on Twitter, my DMs are open,

00:26:50,375 --> 00:26:51,543
here's my email address.

00:26:51,543 --> 00:26:53,912
I'd love for you to get in contact with me afterwards.

00:26:53,912 --> 00:26:55,347
Connect with me via LinkedIn.

00:26:55,347 --> 00:26:56,848
I'd love to hear your stories

00:26:56,848 --> 00:27:00,085
about the kinds of problems you're trying to solve,

00:27:00,085 --> 00:27:03,421
and just to generally connect. Thank you for your time

00:27:03,421 --> 00:27:05,390

YouTube URL: https://www.youtube.com/watch?v=rUqhBkt0xIc


