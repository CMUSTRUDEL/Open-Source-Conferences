Title: Turning on an Air-Con 10 Mins before Arriving at Home - Justin Yoo [Korean language]
Publication date: 2020-10-22
Playlist: JSConf Korea 2020 Home Edition
Description: 
	Imagine one hot and humid day in summer. Would you expect your air-con at home has already been cooling down the air so that you feel refreshed on arrival? It would be perfect if I can turn on the air-con just 10 minutes before home! Are you to die for it? What if I can connect my air-con with Raspberry PI that runs a serverless application, which is triggered by a public cloud application? It sounds so sweet! But... life is not that easy. I'd like to share my hard learning experiences while setting up this home automation system, using Raspberry PI, Azure Functions, Power Automate and Power Apps.
Captions: 
	00:00:13,775 --> 00:00:18,374
Hello. This session has a pretty big title.

00:00:18,375 --> 00:00:24,046
It says 'What I did to get some cool air

00:00:24,047 --> 00:00:27,884
10 minutes before getting home after work in the hot summer.'

00:00:28,735 --> 00:00:34,465
Now, whether or not it was successful

00:00:34,466 --> 00:00:36,754
will be found out in 25 minutes.

00:00:37,525 --> 00:00:40,154
It's a short period of time, but I'll try my best.

00:00:41,065 --> 00:00:44,754
Let me introduce myself first. I'm Justin.

00:00:44,965 --> 00:00:48,251
I work for Microsoft as a cloud advocate.

00:00:48,252 --> 00:00:53,324
You can see my Twitter and Github profiles here.

00:00:53,525 --> 00:01:00,313
If you're curious about my personal information, please check out the introduction page below.

00:01:00,314 --> 00:01:04,873
And I'm almost living in twitter, 그리고 좀 거의 이제 트위터에서 지박령으로 활동을 하고 있기 때문에

00:01:04,875 --> 00:01:08,225
so if you're in twitter too,

00:01:08,226 --> 00:01:12,864
I'd like you to greet me there as well.

00:01:14,322 --> 00:01:22,480
I think I need to give you a brief introduction to why I started this project first.

00:01:22,481 --> 00:01:28,024
Because you might wonder how JavaScript and home automation are related at all,

00:01:28,025 --> 00:01:34,385
first of all, around the end of May,

00:01:34,386 --> 00:01:37,324
I tried live coding with a guest

00:01:37,325 --> 00:01:44,164
for building a smart-home IoT using Azure Functions

00:01:44,335 --> 00:01:49,426
on my own Youtube channel.

00:01:49,427 --> 00:01:52,504
And a lot of people were interested in it.

00:01:52,755 --> 00:01:56,744
Now, if you're curious about it, see the address down here,

00:01:56,945 --> 00:02:01,824
you can go, and check it out. You can also see other things there, so you'd better take a look.

00:02:02,585 --> 00:02:06,014
But the test taker was so witty in it,

00:02:06,315 --> 00:02:09,478
so I was very encouraged as well.

00:02:09,479 --> 00:02:14,217
Because I have lived abroad for a long time, and came back to Korea not so long ago,

00:02:14,218 --> 00:02:19,442
and I knew that summer in Korea is very hot

00:02:19,443 --> 00:02:23,577
considering the time before I went abroad,

00:02:23,578 --> 00:02:28,159
I mean, I knew that Korea was very hot because it was getting hotter than before,

00:02:28,160 --> 00:02:31,919
like the news says that it's going to be incredibly hot,

00:02:31,920 --> 00:02:35,594
something like that,

00:02:36,105 --> 00:02:40,535
so I was worried. But right after that session,

00:02:40,536 --> 00:02:43,120
I was like 'Oh? Well, I have a raspberry pi at home.

00:02:43,121 --> 00:02:46,964
so let me make one too. I'll try to make it similar.'

00:02:47,295 --> 00:02:49,694
So,

00:02:49,895 --> 00:02:51,514
if I'm going for it anyway,

00:02:51,755 --> 00:02:54,644
I wanted to make it better.

00:02:54,815 --> 00:02:59,134
Like I thought of adding some more features and upgrading it.

00:03:00,305 --> 00:03:03,114
That's how motivated I was.

00:03:03,505 --> 00:03:09,384
But, like always, we begin something with enough motivation,

00:03:09,655 --> 00:03:13,116
but there are some obstacles here and there along the way, right?

00:03:13,117 --> 00:03:16,286
So it wasn't as easy as I thought.

00:03:16,287 --> 00:03:20,679
on the way from start to finish,

00:03:20,680 --> 00:03:22,564
there're a lot of problems here and there, and I wanted to beat head against a wall,

00:03:22,565 --> 00:03:29,452
but I somehow made it after all that.

00:03:29,453 --> 00:03:32,634
I did make it. It was really difficult.

00:03:32,945 --> 00:03:38,773
So, to organize, and to share it with you,

00:03:38,774 --> 00:03:42,504
I'm here with you today.

00:03:43,555 --> 00:03:46,589
First of all, this is home automation.

00:03:47,972 --> 00:03:52,659
To implement home automation, there are a few things that you need to do with your hardware.

00:03:52,660 --> 00:03:56,524
I think I need to explain a little bit about the overall architecture.

00:03:57,335 --> 00:04:01,484
I had an old Raspberry Pi that was now rolling around in my house.

00:04:01,735 --> 00:04:07,595
As far as I know, Raspberry pi is out to version 4.

00:04:07,596 --> 00:04:11,358
My model was an old model that came out around 2014.

00:04:11,359 --> 00:04:15,414
Yes, it was about Raspberry Pi 2 model B.

00:04:15,835 --> 00:04:20,757
It's still working well.

00:04:20,757 --> 00:04:25,653
So we don't have to buy a new raspberry pi, let's just use it.

00:04:25,654 --> 00:04:27,774
So I decided to just use the old model.

00:04:28,425 --> 00:04:35,043
And my ultimate goal is to get all the remote controls at home.

00:04:35,044 --> 00:04:39,292
Let's integrate with one of these raspberry pies and make an all-round remote control.

00:04:39,293 --> 00:04:44,412
Well, that was the goal.

00:04:44,413 --> 00:04:48,604
And most of the remote controls at home are infrared.

00:04:48,605 --> 00:04:55,653
So we needed a sensor module to attach to a raspberry pie that could replace the infrared signal on the remote.

00:04:55,654 --> 00:04:57,304
I needed an infrared sensor module. 적외선 센서 모듈이 필요했어요.

00:04:57,305 --> 00:05:02,178
Fortunately, these sensor modules are already in Amazon and online shopping malls.

00:05:02,179 --> 00:05:07,854
But fortunately, I got it from someone I knew.

00:05:08,055 --> 00:05:11,667
I didn't force him to do it. I just...

00:05:11,668 --> 00:05:15,924
Yes, he gave it to me, so I got it and used it.

00:05:16,654 --> 00:05:21,187
If you look at this picture, there's a receiver here, right?

00:05:21,188 --> 00:05:24,954
This is ir sensor. So it's the part that receives the infrared signal.

00:05:25,185 --> 00:05:28,074
This is the part that now sends out infrared signals.

00:05:28,355 --> 00:05:31,645
So what this infrared light signal is used for example,

00:05:31,646 --> 00:05:34,164
We're going to have raspberry pi,

00:05:34,165 --> 00:05:40,694
It's what I need to store my remote controller data.

00:05:40,695 --> 00:05:45,978
Now, the thing is, we're going to use the remote data that's stored.

00:05:45,979 --> 00:05:50,203
It's like a raspberry pi is a real remote control.

00:05:50,204 --> 00:05:53,714
That's what happens. I don't need two buttons.

00:05:54,752 --> 00:06:00,508
So, this infrared sensor worked really well now.

00:06:01,459 --> 00:06:05,908
So this is the big, big, big... It's a rough architecture.

00:06:06,419 --> 00:06:10,288
Uh, Raspberry pi played the role of a remote first,

00:06:10,479 --> 00:06:13,368
I built an api server in here with node.js.

00:06:13,809 --> 00:06:16,758
As an api server with node.js,

00:06:16,929 --> 00:06:22,089
This server works as if it were a remote control.

00:06:22,090 --> 00:06:25,574
And now I'm going to put this on my home network.

00:06:25,575 --> 00:06:30,798
Rather than open this home network to the public at once,

00:06:30,799 --> 00:06:36,518
Only the necessary parts. I tunneled the api part a little bit so that it could be used.

00:06:36,929 --> 00:06:42,948
Then I encapsulated the tunnel data

00:06:42,949 --> 00:06:47,418
needed for this tunneling. And I made a facade with an Azure Function.

00:06:47,449 --> 00:06:53,538
I've encapsulated it so that everything can be done if you just run the function outside.

00:06:53,959 --> 00:07:00,183
Now, let's get the Azure Functions running on mobile apps.

00:07:00,184 --> 00:07:06,191
I rolled it with a power app and a power automate. For our users,

00:07:06,192 --> 00:07:11,328
like me and my family, if you just run the power app, 저나 저희 가족 같은 저희 사용자 입장에서는 파워 앱만 실행을 시키면은

00:07:12,920 --> 00:07:17,228
I've been working on home appliances so that I can turn the air conditioner off and on.

00:07:17,469 --> 00:07:20,898
I think that's the rough architecture now.

00:07:22,909 --> 00:07:30,678
So let's start with the first steps that I did to implement this architecture as it is.

00:07:31,699 --> 00:07:37,228
The first thing I had to do was to change this raspberry pi to a remote control.

00:07:37,574 --> 00:07:44,248
Because, as I said for a second, my ultimate goal was to make Raspberry pi a universal remote control.

00:07:44,449 --> 00:07:47,628
It was supposed to change this, but in order to do that,

00:07:48,759 --> 00:07:53,998
You're saying you've installed the infrared sensor module and now you have to set it up?

00:07:53,999 --> 00:07:55,793
Actually, this part was really hard.

00:07:55,794 --> 00:08:02,518
Because, you know, it's okay to set it up, but you set it up

00:08:02,519 --> 00:08:07,755
There's, like, a little. The methods of setting things up,

00:08:07,756 --> 00:08:13,384
It was very different. Every resources are old.

00:08:13,385 --> 00:08:16,328
It didn't fit my situation. But even if these old info

00:08:16,519 --> 00:08:22,628
are from around 2018, 2019. It didn't fit my situation.

00:08:23,009 --> 00:08:25,508
So I'm pretty much going to use this.

00:08:27,539 --> 00:08:31,371
What should I say, Trial and error? I've been going through trial and error

00:08:31,372 --> 00:08:34,934
I tried this and that and that, so I succeeded.

00:08:34,936 --> 00:08:39,347
Sometimes on the menu. If you go with the manual on the Internet,

00:08:39,529 --> 00:08:43,590
The module that receives the sensor works well, but the module that you send doesn't work.

00:08:43,591 --> 00:08:48,250
On the other hand, the sending module works, but the receiving module doesn't work.

00:08:48,251 --> 00:08:51,318
So I tried to do something about it and it worked.

00:08:51,509 --> 00:08:56,722
It works well, so I don't want to forget this, so I'm going to do it again and again.

00:08:56,723 --> 00:09:02,037
It happened by chance, so I re-produced it a few times just in case.

00:09:02,038 --> 00:09:06,102
So I thought, "Oh, this is how it works!" So I recorded it well.

00:09:06,103 --> 00:09:10,413
I wrote it on my blog. So I'll share it with you later on.

00:09:10,414 --> 00:09:17,278
That's how the work is done. Based on the old info, I worked hard.

00:09:17,279 --> 00:09:21,578
The work up to here is, the infrared sensors started working.

00:09:21,929 --> 00:09:25,608
Now, the second thing I have to do is,

00:09:25,609 --> 00:09:28,668
Now I need to register with my remote raspberry pi.

00:09:28,999 --> 00:09:34,034
But the funny thing is, there's a database for remote control.

00:09:34,035 --> 00:09:37,402
There's a database that has all the remote control data in the world.

00:09:37,403 --> 00:09:41,608
There's a repository called lirc-remotes in Source Forge.

00:09:41,889 --> 00:09:46,698
There are all kinds of remote controls here.

00:09:47,029 --> 00:09:51,138
But the problem is that the latest update is in 2018.

00:09:51,559 --> 00:09:56,389
It was two years ago. But that doesn't mean it has every remote

00:09:56,390 --> 00:10:01,299
It says that it covers every remote control in the world, but if you actually search,

00:10:01,300 --> 00:10:07,547
There are things about famous brands, but not all.

00:10:07,849 --> 00:10:12,188
For example, things that are famous only in Korea. There's nothing.

00:10:12,399 --> 00:10:15,514
So, even though I searched, my remote control wasn't there.

00:10:15,515 --> 00:10:18,760
So I couldn't use this database.

00:10:18,761 --> 00:10:22,598
So I had to make my own remote control data.

00:10:23,479 --> 00:10:26,958
The funny thing about making remote control data was,

00:10:27,119 --> 00:10:33,016
Infrared sensors are signals. It's a light signal. It's a number-converting process.

00:10:33,017 --> 00:10:35,483
It wasn't as easy as I thought because...

00:10:35,484 --> 00:10:40,656
Infrared is light, isn't it? But when you do that, there's always light around it.

00:10:40,657 --> 00:10:44,569
Depending on the amount of light, this infrared signal keeps getting interrupted.

00:10:44,570 --> 00:10:50,842
So even if you press the same button,

00:10:50,843 --> 00:10:53,107
you might not get the same data. So I'll show you this.

00:10:53,108 --> 00:10:55,388
This was actually a capture of the data.

00:10:55,729 --> 00:11:01,277
I run it with a program called mode2. So every time I press a button,

00:11:01,278 --> 00:11:05,908
So whenever I press a button the number blocks are increased one by one. It comes out like this.

00:11:06,379 --> 00:11:09,298
So if you look here, there's a number block here, right?

00:11:09,479 --> 00:11:14,956
The larger the block, the more complicated the remote control is.

00:11:14,957 --> 00:11:17,498
The more complex the remote control is, the larger the number block.

00:11:17,649 --> 00:11:20,148
The simpler the remote control, the smaller the block of these numbers.

00:11:20,709 --> 00:11:23,098
So my remote control is somewhere in the middle.

00:11:23,309 --> 00:11:25,938
Anyway, so I got the remote control signal.

00:11:26,459 --> 00:11:30,196
After catching it, what I made was a TV remote control.

00:11:30,197 --> 00:11:34,700
Because the TV remote control was the simplest one in my house.

00:11:34,701 --> 00:11:35,989
First of all, I made this.

00:11:35,990 --> 00:11:40,229
I actually ran it like this. If you look here, you can see the command, right?

00:11:40,230 --> 00:11:44,982
irsend SEND_ONCE tv SWITCH_ON. I sent the order like this.

00:11:44,983 --> 00:11:50,530
Then the TV in the back turns on. It turns on, and It's a smart TV,

00:11:50,531 --> 00:11:54,473
so it takes time to boot up. I've already sent a signal,

00:11:54,474 --> 00:11:56,592
It took me a while to turn it in the back on.

00:11:57,023 --> 00:12:01,389
When it turns on like this, Eventually,

00:12:01,390 --> 00:12:03,094
You can see the Netflix screen.

00:12:03,095 --> 00:12:09,290
And then next time, If you send again through the command

00:12:09,291 --> 00:12:13,920
irsend SEND_ONCE TV SWITCH_OFF, the television will be turned off. Okay, it's off, right?

00:12:13,921 --> 00:12:21,042
And so I was able to see that the remote control app actually works.

00:12:21,773 --> 00:12:24,602
So, of the whole architecture, we're going to be able to do that

00:12:24,833 --> 00:12:30,192
We've gone so far as to attach the raspberry pi to the Wi-Fi and use it as a remote control.

00:12:31,383 --> 00:12:33,761
There's a long way to go, right?

00:12:33,762 --> 00:12:36,462
I'm sure some of you are curious about this.

00:12:36,463 --> 00:12:40,260
Okay, then the TV's fine. OK. What about the air conditioner?

00:12:40,261 --> 00:12:42,885
I'm sure some of you are wondering about the air conditioner.

00:12:42,886 --> 00:12:47,272
That's not important, so let's move on. First, I will continue with the TV remote control.

00:12:48,333 --> 00:12:55,229
Now that we're done with the remote control, we're going to actually control it through the app.

00:12:55,230 --> 00:12:59,255
Let me tell you a little bit about that. It's a remote control for now.

00:12:59,256 --> 00:13:04,012
You just sent me the word 'irsend SEND_ONCE TV SWITCH_ON.

00:13:04,223 --> 00:13:09,633
They're amazing, aren't they?

00:13:09,634 --> 00:13:12,846
People have already made it into an NPM package.

00:13:12,847 --> 00:13:18,262
So I use it to use a very simple remote control server. I'm going to create an api server.

00:13:18,583 --> 00:13:23,622
So this remote control. using the npm package called lirc_node,

00:13:23,793 --> 00:13:26,202
I made it. It's very easy to make.

00:13:26,543 --> 00:13:32,802
In fact, the remote control module is a very simple code, about 21 lines long.

00:13:33,393 --> 00:13:38,695
So now I'm going to import a package called lirc_node, and if you look at it,

00:13:38,696 --> 00:13:44,725
If you look at line 6, there's an end.send_once, device, command.

00:13:44,726 --> 00:13:47,467
That device was a TV, and the command was SWITCH_ON now?

00:13:47,468 --> 00:13:51,042
So, what you saw in the video clip in front of you,

00:13:51,043 --> 00:13:56,397
It's in the same order as the order 'irsend SEND_ONCE TV SWITCH_ON, right?

00:13:56,398 --> 00:14:00,572
It's a very intuitive module.

00:14:00,573 --> 00:14:02,592
So I created a function called Remote.

00:14:02,743 --> 00:14:07,623
You can use that function to create an object called Remote Control, and you can use it to create an object inside it.

00:14:07,624 --> 00:14:11,584
We created a function called onSwitchOn, a function called onSwitchOff.

00:14:11,585 --> 00:14:15,032
I made the simplest remote controller module.

00:14:15,033 --> 00:14:18,641
We can use this to create an api server.

00:14:18,642 --> 00:14:23,727
Two end points were created using the express module, express package.

00:14:23,728 --> 00:14:26,296
The first endpoint is remote/switchon

00:14:26,297 --> 00:14:30,631
The second endpoint is remote/switchoff. So inside the switchon,

00:14:30,632 --> 00:14:34,240
I've called a remote.onSwitchOn.

00:14:34,241 --> 00:14:39,791
An endpoint called switchoff called a function called onSwitchOff.

00:14:39,792 --> 00:14:42,752
This is how we created the api server.

00:14:43,423 --> 00:14:49,070
I'm not, in fact, a JavaScript developer anymore.

00:14:49,071 --> 00:14:50,842
I'm not a professional developer.

00:14:51,013 --> 00:14:54,352
node.js says 'very easy to write'

00:14:54,985 --> 00:14:58,982
I tried it. 'Oh really?' Haha, I was a little suspicious.

00:14:58,983 --> 00:15:04,885
But in fact, there's only about 21 or 26 lines of code to build this api server.

00:15:04,886 --> 00:15:07,492
It's about being able to develop something really fast.

00:15:07,563 --> 00:15:11,200
node.js can develop really fast,

00:15:11,201 --> 00:15:14,648
When you develop prototyping or Proof Of Concept,

00:15:14,649 --> 00:15:17,702
I felt that it was really good.

00:15:17,703 --> 00:15:22,441
Now, of course, at the end, are we actually able going to be able to do some enterprise-level work after the POC

00:15:22,442 --> 00:15:25,572
It's another question, but it was okay for now.

00:15:27,353 --> 00:15:30,627
Let's do this and turn the code.

00:15:30,628 --> 00:15:34,138
If you look at the bottom, you can see that there's a visual studio code.

00:15:34,139 --> 00:15:37,949
I accessed the raspberry pi, and I started npm there.

00:15:37,950 --> 00:15:40,238
Starting to spin up the api server. api 서버를 돌리기 시작하고 있습니다.

00:15:40,239 --> 00:15:44,323
It's back, right? I turned it to port 4000.

00:15:44,324 --> 00:15:49,543
So here, I'm going to type in the ip address, port 4000 and send the switchon

00:15:49,544 --> 00:15:54,030
It's on now. Let's send the switchoff again.

00:15:54,031 --> 00:15:55,842
If you send a switchoff,

00:15:58,238 --> 00:16:02,428
If you look at the bottom, you can see SWITCH_OFF, right? It says switchoff.

00:16:02,429 --> 00:16:05,875
That means my api server is working right now.

00:16:05,876 --> 00:16:12,542
Now, I'm in a home network called 172.30.1.29.

00:16:13,673 --> 00:16:20,092
I paged this. In other words, my computer is also in the home network, so I could call it directly.

00:16:20,583 --> 00:16:26,142
Now, now, let's go ahead and do this with raspberry pie.

00:16:26,143 --> 00:16:28,485
You just created and uploaded a node.js server, right?

00:16:28,486 --> 00:16:30,312
Now the home network is working.

00:16:30,693 --> 00:16:35,601
Now, it works only within the home network. But our ultimate purpose is to...

00:16:35,602 --> 00:16:39,282
Outside the house. I want to run the remote.

00:16:39,603 --> 00:16:44,282
We need to expose this Raspberry Pi remote control to the public Internet.

00:16:44,283 --> 00:16:48,016
The first way is to expose the entire home network, right?

00:16:48,017 --> 00:16:52,892
But you know, this is never recommended for security reasons.

00:16:53,343 --> 00:16:59,961
So the second method is tunneling only the applications that are needed. Create a secure tunnel.

00:16:59,962 --> 00:17:05,442
So that data can go back and forth only through that tunnel. I'd like to expose them selectively.

00:17:05,603 --> 00:17:09,912
This was actually one of the most complicated processes in the past.

00:17:10,143 --> 00:17:15,192
Now it's software-proof. Have you ever heard of ngrok? If you use ngrok,

00:17:15,953 --> 00:17:18,622
It's very easy to make a secure tunnel like this.

00:17:18,772 --> 00:17:23,733
Just in time, for raspberry pi, ngrok now has an application.

00:17:23,734 --> 00:17:26,867
Download it to raspberry pie and run it.

00:17:26,867 --> 00:17:31,992
And if you link that to node.js api,

00:17:32,173 --> 00:17:38,375
Because of this ngrok, only certain api servers are exposed to the Internet.

00:17:39,693 --> 00:17:42,523
Then I'll show you like this. Let's look at the screen.

00:17:42,524 --> 00:17:45,462
Now, if you look at the bottom left, you can see it again.

00:17:45,587 --> 00:17:49,748
Now I run the api server. Can you see the execution?

00:17:49,749 --> 00:17:55,385
Api went back. Let me look to the right for a second. Now, if you look to the right,

00:17:55,386 --> 00:18:02,428
I'm in the raspberry pi, and now, ngrock and http 4000 port.

00:18:02,429 --> 00:18:09,124
It's done like this. So, http, we're going to open the api server with only 4000 ports.

00:18:09,125 --> 00:18:14,178
And then randomly, the Url that ngrok makes is caught.

00:18:14,179 --> 00:18:20,580
So if you take this url and write it down instead of the ip address and port number, it'll be like this.

00:18:20,581 --> 00:18:23,107
So you can run it outside of your home network.

00:18:23,108 --> 00:18:26,234
Did you turn on the switch with the remote control?

00:18:26,235 --> 00:18:31,307
So this time, I've turned the switch off again. So this is how you do it, random.

00:18:31,308 --> 00:18:33,352
With the url that ngrok makes,

00:18:33,353 --> 00:18:36,986
Now you can run it outside of your home network.

00:18:37,347 --> 00:18:43,082
So we've been trying to get access to the home network from the public Internet.

00:18:43,083 --> 00:18:45,886
We even implemented a secure channel.

00:18:47,237 --> 00:18:50,602
Well, then it's about done.

00:18:50,603 --> 00:18:54,811
It's almost done. What's left is. Then, on the public cloud.

00:18:54,812 --> 00:18:59,786
How can I get in this direction from the cloud? Now I have to make this part for you know what?

00:19:00,937 --> 00:19:04,954
As you can see, ngrok has a free version and a paid version.

00:19:04,955 --> 00:19:09,363
It doesn't matter if it's a paid version, but we use a free version for now, right?

00:19:09,364 --> 00:19:13,546
If this is a free version, the address changes every time you run ngrock.

00:19:13,837 --> 00:19:16,466
So it's very difficult to use it directly.

00:19:16,657 --> 00:19:21,549
For direct external use. That's why I wanted to protect this channel.

00:19:21,550 --> 00:19:27,973
And then to prevent the random url that keeps changing like this ngrok.

00:19:27,974 --> 00:19:29,666
I decided to make a facade.

00:19:29,937 --> 00:19:34,896
I could have made a facade with nodejs and Azure function, too.

00:19:34,897 --> 00:19:38,969
If you're curious about how to make an Azure Function with JavaScript,

00:19:38,970 --> 00:19:44,900
If you go to aka.ms/jsconf/azfunc-nodejs,

00:19:44,901 --> 00:19:48,055
There are a lot of references. So it's very easy to make.

00:19:48,056 --> 00:19:51,256
It would be nice to take a look. It's very easy to make.

00:19:51,407 --> 00:19:55,186
It's about 22 lines long.

00:19:55,696 --> 00:20:02,856
As you can see, through Query String and Request Body,

00:20:02,857 --> 00:20:08,616
TV. Device. That's TV here, right? Power, switch on, off.

00:20:08,617 --> 00:20:11,521
I got these two data. next time

00:20:11,522 --> 00:20:14,922
There is a variable value called REMOTE_BASE_URI.

00:20:14,923 --> 00:20:21,110
The value of the environment variable is the url that the ngrok accepts, the constant change of ngrok, the end point.

00:20:21,111 --> 00:20:27,573
We'll combine these two, and we'll take the url and we'll go through the axios.

00:20:27,574 --> 00:20:30,226
Now, call the node.js api server.

00:20:30,737 --> 00:20:35,556
So you made the code now? It's very easy to make now. in this way

00:20:36,047 --> 00:20:41,736
We can encapsulate the random url that ngrok makes.

00:20:42,017 --> 00:20:45,286
Let me show you. in the same way

00:20:45,617 --> 00:20:48,236
We're going to run the api server with npm.

00:20:49,277 --> 00:20:53,901
On the right, run ngrok 그 다음에 오른쪽에서 ngrok으로 돌립니다?

00:20:53,902 --> 00:20:57,286
Then a different url was made. 그러면 아까와 다른 url이 만들어 졌죠.

00:20:57,287 --> 00:21:03,094
Now, we've just created a random url, and we've distributed it to Azure.

00:21:03,095 --> 00:21:05,456
You put it in the environment variable.

00:21:05,777 --> 00:21:09,376
Once we put it in, and now we're running it again.

00:21:09,567 --> 00:21:13,634
If I do this, you're ready for the next function, right? The address of the Azure Function is...

00:21:13,635 --> 00:21:17,286
It says fncap-rpi-proxy-krc.

00:21:17,287 --> 00:21:22,474
I'm going to take this address and actually put it. So...

00:21:22,475 --> 00:21:27,046
With Query String, device is TV and power is on. It turned on like this.

00:21:27,267 --> 00:21:31,802
Now you can see that it's switched on. If you look at the bottom right, you can see the result is still coming out, right?

00:21:31,803 --> 00:21:36,501
Now, we went to power off this time off. I turned off the TV when I turned it off.

00:21:36,502 --> 00:21:43,042
So if you look down here, you can see that switch off, then the endpoint, remote/switchoff, was called, right?

00:21:43,043 --> 00:21:47,236
Like this, I made the facade with the azure function.

00:21:47,607 --> 00:21:50,496
So, I made a facade.

00:21:50,647 --> 00:21:54,281
In fact, it doesn't really matter if we go this far.

00:21:54,282 --> 00:21:58,472
I don't really care, but here's one problem, not a problem, but a problem.

00:21:58,473 --> 00:21:59,571
It's already made.

00:21:59,572 --> 00:22:05,440
It's already been made, Nevertheless, in order for me to turn

00:22:06,747 --> 00:22:10,288
the air conditioner on and off outside,

00:22:11,147 --> 00:22:15,117
I'm supposed to open a web browser or Postman or something like that.

00:22:15,118 --> 00:22:18,563
Rather, why don't we make mobile apps a little easier?

00:22:18,564 --> 00:22:21,065
So I decided to make a mobile app.

00:22:21,066 --> 00:22:24,116
It's hard to make a mobile app.

00:22:24,117 --> 00:22:30,666
For example, you have to open up a React Native thing, do it, publish it, and so on.

00:22:30,667 --> 00:22:33,086
It's too much trouble to do that.

00:22:33,267 --> 00:22:37,872
So I thought about how I could make a mobile app very easily.

00:22:37,873 --> 00:22:40,535
And now there's a power platform.

00:22:40,536 --> 00:22:44,656
There's a power platform that Microsoft is talking about.

00:22:44,817 --> 00:22:48,442
It's incredibly easy to create applications.

00:22:48,443 --> 00:22:52,911
If you want to know more about the power platform,

00:22:52,912 --> 00:22:59,656
If you go to aka.ms/jsconf/power-platform, you'll find out more.

00:22:59,827 --> 00:23:02,898
Let me tell you about Power Automate first.

00:23:02,899 --> 00:23:05,676
Power automates basically manage workflows.

00:23:05,754 --> 00:23:14,233
The only thing this AutoMate Workflow does is, the Azure Function. You know the facade I made earlier?

00:23:14,234 --> 00:23:16,001
All I have to do is call the facade.

00:23:16,002 --> 00:23:19,871
So I'm gonna call the end point, put the api key in,

00:23:19,872 --> 00:23:26,371
And then you get the device and power from the mobile app and you send it right away.

00:23:26,372 --> 00:23:28,368
This is the only role .

00:23:28,369 --> 00:23:31,016
So there's a very simple workflow, right?

00:23:31,097 --> 00:23:34,621
And then, this is the power app screen.

00:23:35,483 --> 00:23:39,047
Power apps are very easy to make, and if you know how to do things like Excel,

00:23:39,048 --> 00:23:41,548
There's a lot of funtion in the excel, right? Excel functions

00:23:41,549 --> 00:23:45,979
You can use it like you're using those Excel functions.

00:23:45,980 --> 00:23:50,340
So there is Power AutoMate, HomeAppliancesRemoteController which I made earlier.

00:23:50,501 --> 00:23:52,290
As you can see here,

00:23:53,181 --> 00:23:55,888
There's an on button, there's an off button,

00:23:55,889 --> 00:24:00,790
Send variables like this when you press this on button.

00:24:00,791 --> 00:24:04,661
When you press the off button, 'TV off'. Send it like this.

00:24:04,662 --> 00:24:09,081
If you send it now, the results are actually like this.

00:24:09,082 --> 00:24:11,554
The television turned on when I pressed the on button.

00:24:11,555 --> 00:24:14,480
If you press the off button, it will be off now. This is what happens.

00:24:14,771 --> 00:24:18,430
So I've finished writing the application.

00:24:18,781 --> 00:24:22,340
That's how I organized the entire architecture.

00:24:22,551 --> 00:24:25,457
Then I'll actually run it.

00:24:25,458 --> 00:24:28,400
Now, the api server is running again, right?

00:24:31,041 --> 00:24:35,870
Then, make a new url with ngrok.

00:24:36,121 --> 00:24:42,330
I'm going to save this as an old one as a new one as an environmental variable.

00:24:42,331 --> 00:24:43,820
Save it again.

00:24:45,231 --> 00:24:46,220
Well, it's saved.

00:24:46,871 --> 00:24:48,410
After this was saved,

00:24:49,561 --> 00:24:53,803
Then, let's go to the next one.The facade is done.

00:24:53,804 --> 00:24:56,986
I'm already using the Power app to call a function.

00:24:56,987 --> 00:25:00,320
I just took a screenshot of my app.

00:25:00,641 --> 00:25:04,260
So I'm actually running my app.

00:25:04,441 --> 00:25:08,090
You turned it to remote control, right? When I actually pressed the on button,

00:25:08,623 --> 00:25:13,394
Let's take a look. If you press it, you'll see the results on the right side.

00:25:13,395 --> 00:25:16,057
Now, it becomes switch on, it becomes switch on.

00:25:16,058 --> 00:25:19,530
You see the result turned on? Now, I've pressed off this time.

00:25:19,701 --> 00:25:25,150
You can see that switch off, switch off, and the result is switch off.

00:25:25,351 --> 00:25:28,390
You can actually see the apps working like this.

00:25:28,631 --> 00:25:31,530
So I actually did this in front of the TV.

00:25:31,691 --> 00:25:35,735
Does it really work? Does it really work? I've tried it.

00:25:36,631 --> 00:25:40,026
So, I guess we're going to turn it on here.

00:25:40,027 --> 00:25:42,525
All right, turn it on and press the on button.

00:25:43,391 --> 00:25:48,207
As I mentioned earlier, it's a smart TV.

00:25:48,208 --> 00:25:52,900
It's a smart TV, so it's kind of smart. It turns on slowly, right? I guess you have a lot of thoughts.

00:25:52,901 --> 00:25:57,572
So, it's on, right? After it's on, at the back, it's...

00:25:57,573 --> 00:25:59,530
You'll see the Netflix screen for a moment.

00:25:59,531 --> 00:26:02,530
I just showed you a little bit to make sure that the TV is actually on.

00:26:03,091 --> 00:26:05,080
Okay, now its on

00:26:05,661 --> 00:26:09,963
Now, let's press the off button. If you press the off button,

00:26:10,551 --> 00:26:13,070
Now, you'll see that the television is going to turn off.

00:26:13,873 --> 00:26:18,660
It's off, right? So, the screen is turned off.

00:26:18,831 --> 00:26:25,860
I actually filmed myself turning the TV on and off through my phone.

00:26:25,861 --> 00:26:33,007
So I run the JavaScript app on the iot device.

00:26:33,008 --> 00:26:37,188
So we've done a lot of home automation.

00:26:37,189 --> 00:26:42,380
In the meantime, I learned a lot of things. Actually, I had a hard time, but I learned a lot of things.

00:26:43,491 --> 00:26:46,580
First of all, I made the remote control data.

00:26:47,151 --> 00:26:54,582
If I had already had the remote control data, I wouldn't have done this.

00:26:54,583 --> 00:26:57,470
Because I didn't, I actually started making remote control data.

00:26:57,911 --> 00:27:01,775
Second, I created the api app with node.js.

00:27:01,776 --> 00:27:07,890
The fact that the api itself is very easy to make, I really liked it.

00:27:08,101 --> 00:27:13,805
And then, thirdly, use ngrok to create secure tunneling.

00:27:13,806 --> 00:27:18,210
I tried to expose my home network on the Internet.

00:27:18,211 --> 00:27:24,440
And the fourth thing is, we encapsulated the secure tunnel with the Azure Function, and we encapsulated it.

00:27:24,441 --> 00:27:27,959
I've been working on it so it's hard to tell from the outside.

00:27:27,960 --> 00:27:37,710
Lastly, I even showed developing mobile apps using power apps and power automate.

00:27:37,711 --> 00:27:40,415
But, actually, the consumer electronics are...

00:27:40,416 --> 00:27:44,374
If your home appliances now support Wi-Fi,

00:27:44,375 --> 00:27:46,070
Actually, I don't think I had to do this kind of work.

00:27:46,411 --> 00:27:49,800
But now, there's still a lot of appliances.

00:27:50,101 --> 00:27:54,164
We're still using the remote control, infrared.

00:27:54,165 --> 00:27:59,230
If you're still curious, you might want to try something like this.

00:27:59,669 --> 00:28:07,490
And the funny thing is that everything I needed has already been done before

00:28:07,891 --> 00:28:13,550
So I just took it and put it together. That's all I've ever done. Actually.

00:28:14,251 --> 00:28:17,470
That's all I've prepared.

00:28:17,781 --> 00:28:21,359
Now I want to give you homework instead.

00:28:21,360 --> 00:28:26,230
So just in case, I have a raspberry pi. Or I'm planning to buy a raspberry pi.

00:28:26,231 --> 00:28:28,982
So if you say, "I want to try this!"

00:28:28,983 --> 00:28:34,440
These two links are on my blog, so please read them and follow them.

00:28:36,980 --> 00:28:42,040
So 10 minutes before I get home after work in the hot summer.

00:28:42,461 --> 00:28:48,048
I told you about the story of how I worked to turn on the air conditioner

00:28:48,351 --> 00:28:49,130
Thank you.

00:28:49,421 --> 00:28:53,173
Well, the title is air conditioner. It's still air conditioner. But the title is air conditioner.

00:28:53,174 --> 00:28:55,183
I've never told you about the air conditioner.

00:28:55,184 --> 00:28:59,770
Actually, I failed to make the remote control data for the air conditioner.

00:29:00,261 --> 00:29:05,889
Everything else is ready. Everything else is done, but I couldn't run the air conditioner.

00:29:05,890 --> 00:29:08,890
Unfortunately, I've registered every remote control in my house

00:29:08,891 --> 00:29:10,750
Only the air conditioner didn't work. I don't know why.

00:29:11,491 --> 00:29:15,520
That's why it's still hot, isn't it? It's a little hot. It's very hot.

00:29:18,401 --> 00:29:24,085
So the title is "home electronics," "out of the house."

00:29:24,086 --> 00:29:29,530
Slightly change it to run it on your cell phone.

00:29:29,531 --> 00:29:32,952

YouTube URL: https://www.youtube.com/watch?v=xDd2B9uzqkc


