Title: Inaccessible websites? - it's you, not JavaScript - Anuradha Kumari - JSConf Korea 2020
Publication date: 2020-10-13
Playlist: JSConf Korea 2020 Home Edition
Description: 
	Accessibility is an inherent aspect of the web. And yet it is often neglected and considered as an afterthought. There are certain misconceptions lingering around it and it might appear burdensome or confusing as a result.

As we will explore the accessibility in this session, we will discover the ways in which JavaScript code can make or break the website accessibility. The objective of the talk is to enable the audience to apply the concepts learned within their projects/frameworks allowing everyone to write accessible and interactive interfaces/websites.
Captions: 
	00:00:13,230 --> 00:00:14,330
- Hi everyone.

00:00:14,330 --> 00:00:15,800
My name is Anuradha Kumari

00:00:15,800 --> 00:00:19,150
and today we are here to talk about inaccessibility

00:00:19,150 --> 00:00:22,133
in websites and relation of JavaScript with it.

00:00:22,970 --> 00:00:26,690
Before we start, little bit of introduction about myself.

00:00:26,690 --> 00:00:28,130
My name is Anuradha Kumari.

00:00:28,130 --> 00:00:31,480
I'm working as a development specialist at Mediaocean.

00:00:31,480 --> 00:00:34,870
I'm really passionate about JavaScript and accessibility.

00:00:34,870 --> 00:00:36,730
My handle, Twitter handle is miracle_404

00:00:38,280 --> 00:00:40,450
So if you would like to talk about anything

00:00:40,450 --> 00:00:42,090
from JavaScript accessibility

00:00:42,090 --> 00:00:44,140
to other technologies in general,

00:00:44,140 --> 00:00:46,803
you can reach out to me and I will be happy to help.

00:00:48,300 --> 00:00:50,100
What are we going to cover today?

00:00:50,100 --> 00:00:51,310
Today we will start

00:00:51,310 --> 00:00:53,470
with a basic introduction of accessibility

00:00:53,470 --> 00:00:56,500
and dive into why it is important

00:00:56,500 --> 00:00:58,640
and some of the demos and examples

00:00:58,640 --> 00:01:02,053
of how JavaScript can make or break accessibility.

00:01:02,890 --> 00:01:04,560
The first and foremost question

00:01:04,560 --> 00:01:06,830
is, what exactly is accessibility?

00:01:06,830 --> 00:01:09,200
Accessibility means making resources and services

00:01:09,200 --> 00:01:12,610
usable by everyone regardless of their ability

00:01:12,610 --> 00:01:13,443
or disability.

00:01:15,210 --> 00:01:16,150
Why do we care?

00:01:16,150 --> 00:01:18,790
Why is accessibility so important?

00:01:18,790 --> 00:01:21,520
To understand that we must first understand

00:01:21,520 --> 00:01:24,010
why did we really create websites or applications.

00:01:24,010 --> 00:01:26,900
We create them so that the users can use them.

00:01:26,900 --> 00:01:30,770
Now, if some of the features are not accessible by users,

00:01:30,770 --> 00:01:32,070
they can not use them.

00:01:32,070 --> 00:01:35,310
So accessibility actually equals usability.

00:01:35,310 --> 00:01:37,010
If the user cannot use them,

00:01:37,010 --> 00:01:41,303
what is the motive of creating a website or application?

00:01:42,520 --> 00:01:46,010
As Tim Berners-Lee the creator of Web has rightly told

00:01:46,010 --> 00:01:48,930
that the power of the Web is in its universality

00:01:48,930 --> 00:01:51,450
and access by everyone, regardless of disability

00:01:52,490 --> 00:01:54,530
is an essential aspect.

00:01:54,530 --> 00:01:58,070
If we think about accessibility, it's not a new concept.

00:01:58,070 --> 00:02:01,010
It has always been there since the beginning of Web.

00:02:01,010 --> 00:02:04,140
World's first website is totally accessible.

00:02:04,140 --> 00:02:06,700
If you go ahead and check it out,

00:02:06,700 --> 00:02:08,250
this is the world's first website

00:02:08,250 --> 00:02:10,990
and I'm using one of the assistive technology,

00:02:10,990 --> 00:02:11,920
which is keyboard.

00:02:11,920 --> 00:02:14,910
And I can totally navigate to all the links

00:02:14,910 --> 00:02:16,403
using just my keyboard.

00:02:18,630 --> 00:02:21,980
So we do not really know about our user,

00:02:21,980 --> 00:02:24,090
that how they're going to use our website

00:02:24,090 --> 00:02:25,560
or what they could be going through

00:02:25,560 --> 00:02:27,150
when are using our website.

00:02:27,150 --> 00:02:28,520
So it highly advice advisable

00:02:28,520 --> 00:02:31,003
that we should always keep it accessible.

00:02:31,990 --> 00:02:35,150
World Health Organization or WHO says that

00:02:35,150 --> 00:02:39,410
15% of world's population lives with some kind of disability

00:02:39,410 --> 00:02:40,243
Let's see through

00:02:40,243 --> 00:02:41,890
what are the different kinds of disability,

00:02:41,890 --> 00:02:45,270
which our users can be living with.

00:02:45,270 --> 00:02:47,720
Like there are different categories,

00:02:47,720 --> 00:02:50,260
permanent, temporary and situational.

00:02:50,260 --> 00:02:53,220
To take an example of a sight disability,

00:02:53,220 --> 00:02:56,360
if a user is blind, it's a permanent disability.

00:02:56,360 --> 00:02:58,860
But another user might be having some

00:02:58,860 --> 00:03:00,060
infection in their eyes.

00:03:00,060 --> 00:03:02,350
And they're still not able to see something.

00:03:02,350 --> 00:03:05,635
Then it's called temporary disability.

00:03:05,635 --> 00:03:08,250
Then there comes a situation that our eyes are totally fine,

00:03:08,250 --> 00:03:09,790
but we are in a bright environment

00:03:09,790 --> 00:03:12,223
and we are not able to see what is on our screen.

00:03:12,223 --> 00:03:16,670
We are not able to navigate on our tablets, on our mobile

00:03:16,670 --> 00:03:20,220
then this is called situational disability.

00:03:20,220 --> 00:03:21,240
Apart from that,

00:03:21,240 --> 00:03:23,750
there are people who have some cognitive

00:03:23,750 --> 00:03:25,270
or neurological condition.

00:03:25,270 --> 00:03:29,150
They face some difficulty in understanding the content,

00:03:29,150 --> 00:03:32,210
or they might feel uneasy when see animation

00:03:32,210 --> 00:03:33,583
or time-sensitive content.

00:03:35,060 --> 00:03:36,480
Then there are users

00:03:36,480 --> 00:03:38,320
who might be facing some technical challenges

00:03:38,320 --> 00:03:40,380
like they are accessing our websites

00:03:40,380 --> 00:03:43,630
on a slow internet connection or an older technology

00:03:43,630 --> 00:03:45,930
or on a smaller screen device.

00:03:45,930 --> 00:03:48,010
So is our website accessible

00:03:48,010 --> 00:03:49,730
for all of these kinds of users?

00:03:49,730 --> 00:03:54,730
Also there are certain issues which come with aging

00:03:55,230 --> 00:03:59,140
like a sight issues or motor disabilities and so on.

00:03:59,140 --> 00:04:01,700
There could also be a situation where our user

00:04:01,700 --> 00:04:03,720
is in panic mode or stress.

00:04:03,720 --> 00:04:08,190
So have we made our website easily structured

00:04:08,190 --> 00:04:11,070
and navigable by such kind of users?

00:04:11,070 --> 00:04:14,330
We must always think about these things.

00:04:14,330 --> 00:04:16,340
So by now, I might have convinced you

00:04:16,340 --> 00:04:20,470
to understand that, okay, accessibility is important.

00:04:20,470 --> 00:04:22,463
And we must be thinking about accessibility

00:04:22,463 --> 00:04:24,910
when we're creating websites and applications.

00:04:24,910 --> 00:04:28,337
So you might ask, "Well, how do I start with accessibility?"

00:04:29,320 --> 00:04:33,380
My first advice is that we must always think about users.

00:04:33,380 --> 00:04:36,870
We must think from user perspective what the user needs

00:04:36,870 --> 00:04:39,050
or what is the issue we are trying to resolve.

00:04:39,050 --> 00:04:41,010
If we are thinking from user perspective,

00:04:41,010 --> 00:04:45,160
then we have already taken a big step towards accessibility.

00:04:45,160 --> 00:04:48,545
Apart from that, there are certain resources on internet,

00:04:48,545 --> 00:04:52,377
which contain very good information about accessibility.

00:04:52,377 --> 00:04:56,250
You should go ahead and read it and see what we require

00:04:56,250 --> 00:04:59,470
and there are official websites for W3C

00:04:59,470 --> 00:05:03,700
and MDN also has a very good documentation on accessibility.

00:05:03,700 --> 00:05:06,600
And they have rules, which suggests that

00:05:06,600 --> 00:05:09,078
if we are using a certain kind of component,

00:05:09,078 --> 00:05:11,270
how user can navigate through them

00:05:11,270 --> 00:05:14,853
and how we can make them more accessible.

00:05:15,720 --> 00:05:17,802
Normally when we we talk about accessibility

00:05:17,802 --> 00:05:20,873
we always talk about HTML and CSS.

00:05:20,873 --> 00:05:22,720
We think about the rules

00:05:22,720 --> 00:05:25,180
through which we can make our websites more accessible.

00:05:25,180 --> 00:05:28,120
But today we are going to focus on JavaScript

00:05:28,120 --> 00:05:32,338
and see how writing good JavaScript

00:05:32,338 --> 00:05:35,883
can really make websites more accessible.

00:05:36,720 --> 00:05:37,960
We are going through some of the rules

00:05:37,960 --> 00:05:39,880
and we will see some examples

00:05:39,880 --> 00:05:42,886
of how we can create highly accessible websites.

00:05:42,886 --> 00:05:46,170
The rule number one is using semantic HTML.

00:05:46,170 --> 00:05:49,020
Semantic HTML tags are the tags

00:05:49,020 --> 00:05:51,290
which have some meaning attached to them.

00:05:51,290 --> 00:05:56,020
They do not affect the presentation of our website,

00:05:56,020 --> 00:05:57,760
but they contain the information

00:05:57,760 --> 00:06:00,710
which is used by the assistive technologies

00:06:00,710 --> 00:06:02,400
and which is used by the users

00:06:02,400 --> 00:06:04,880
who are suffering from some kind of disability

00:06:04,880 --> 00:06:07,243
or [other] users also sometimes.

00:06:08,140 --> 00:06:09,960
So we are going to see one classic example

00:06:09,960 --> 00:06:12,080
of div versus button.

00:06:12,080 --> 00:06:14,530
When we are trying to introduce interactivity

00:06:15,490 --> 00:06:16,323
within our website,

00:06:16,323 --> 00:06:18,360
button is one of the things which we use

00:06:18,360 --> 00:06:21,810
so that a user can go ahead and trigger some action on it.

00:06:21,810 --> 00:06:24,200
But there are multiple ways to create a button,

00:06:24,200 --> 00:06:27,740
we can even use a div or span to create a button

00:06:27,740 --> 00:06:29,750
and make it look and feel like button,

00:06:29,750 --> 00:06:32,420
or we can use 'button',

00:06:32,420 --> 00:06:35,589
which is a semantic tag for interactivity.

00:06:35,589 --> 00:06:38,190
Let's go ahead and see what is the difference

00:06:38,190 --> 00:06:40,750
and how it can affect the accessibility.

00:06:40,750 --> 00:06:42,155
So before that,

00:06:42,155 --> 00:06:45,252
this is one of the websites which I have created

00:06:45,252 --> 00:06:48,730
to help spread awareness around accessibility.

00:06:48,730 --> 00:06:51,327
And it contains some of the basic examples now

00:06:51,327 --> 00:06:53,760
around accessibility.

00:06:53,760 --> 00:06:57,000
So let's go and check out the button example.

00:06:57,000 --> 00:07:00,500
For button, if we go ahead and see, these are the buttons,

00:07:00,500 --> 00:07:02,430
button one and button three,

00:07:02,430 --> 00:07:05,400
which I have created using button semantic tag

00:07:05,400 --> 00:07:09,670
but the second button is created using div.

00:07:09,670 --> 00:07:11,670
Now as a mouse user,

00:07:11,670 --> 00:07:14,780
I can go ahead and click on any of them

00:07:14,780 --> 00:07:16,620
and it will work perfectly fine,

00:07:16,620 --> 00:07:20,120
but let's try to navigate it through our keyboard.

00:07:20,120 --> 00:07:22,503
Keyboard users use tab key to navigate

00:07:22,503 --> 00:07:24,710
through the interactive elements.

00:07:24,710 --> 00:07:26,103
So I will click on tab.

00:07:27,330 --> 00:07:29,680
I go to button one perfectly fine.

00:07:29,680 --> 00:07:31,252
Now I want to do something

00:07:31,252 --> 00:07:33,650
which can happen on click on button two.

00:07:33,650 --> 00:07:36,120
So I will tab again, because I want to go to button two.

00:07:36,120 --> 00:07:39,600
I tab over it, but I cannot access button two.

00:07:39,600 --> 00:07:41,790
I directly went to button three.

00:07:41,790 --> 00:07:46,180
So by using div tag, what I have done,

00:07:46,180 --> 00:07:49,660
is that I have essentially blocked my keyboard users

00:07:49,660 --> 00:07:50,840
out of the flow.

00:07:50,850 --> 00:07:52,540
They cannot access my button

00:07:52,540 --> 00:07:54,490
so they can not trigger that action.

00:07:54,490 --> 00:07:56,133
They can not perform the action.

00:07:57,000 --> 00:07:59,020
So it's not a good user experience, right?

00:07:59,020 --> 00:07:59,860
We have blocked the user

00:07:59,860 --> 00:08:02,910
from what they came on our website to do.

00:08:02,910 --> 00:08:04,850
So to fix that, there are two options,

00:08:04,850 --> 00:08:08,240
the first one is obviously using a semantic button tag,

00:08:08,240 --> 00:08:11,050
but in case there is a situation

00:08:11,050 --> 00:08:14,970
where we are not using a semantic HTML,

00:08:14,970 --> 00:08:17,980
and we still can go ahead and add some code

00:08:17,980 --> 00:08:19,620
to make it more semantic.

00:08:19,620 --> 00:08:21,090
So how you can do that [is]--

00:08:21,090 --> 00:08:23,770
before that let's see the example for that.

00:08:23,770 --> 00:08:27,040
So if you go through the accessible button

00:08:27,040 --> 00:08:31,480
example, I am tabbing on it and I can go ahead and tab

00:08:31,480 --> 00:08:34,190
and now button two is focused.

00:08:34,190 --> 00:08:37,090
So user can go ahead and perform the action

00:08:37,090 --> 00:08:38,540
through keyboard as well.

00:08:39,470 --> 00:08:43,380
And so I'm trying to click on it using keyboard,

00:08:43,380 --> 00:08:45,310
and I'm able to do that too.

00:08:45,310 --> 00:08:48,110
So, wow we have just made it accessible

00:08:48,110 --> 00:08:51,200
for different kinds of users and all users are happy.

00:08:51,200 --> 00:08:52,790
So how to do that?

00:08:52,790 --> 00:08:55,300
So first rule is using a tab index.

00:08:55,300 --> 00:08:57,320
Using tab index, what we do,

00:08:57,320 --> 00:09:00,580
we make any non semantic HTML focusable.

00:09:01,500 --> 00:09:06,500
And then to make it interact well by our keyboard,

00:09:07,310 --> 00:09:09,820
we need to add event listener to it.

00:09:09,820 --> 00:09:12,720
So in this case we are using a keydown event listener.

00:09:12,720 --> 00:09:15,260
So if we go ahead and see the code for it,

00:09:15,260 --> 00:09:17,930
it's the div, which is acting as a button.

00:09:17,930 --> 00:09:21,070
And I have provided tab and next zero roll up button

00:09:21,070 --> 00:09:23,800
because I want to let the screen readers

00:09:23,800 --> 00:09:25,730
and other assistive technologies know that

00:09:25,730 --> 00:09:28,373
there is a button which they have encountered.

00:09:29,220 --> 00:09:33,800
Now what I do, I'm finding the button to get element by ID.

00:09:33,800 --> 00:09:35,250
We find out the button

00:09:35,250 --> 00:09:38,100
and we still need to add event listener using click

00:09:38,100 --> 00:09:40,510
because the actions will happen

00:09:40,510 --> 00:09:42,458
when we're clicking on that button.

00:09:42,458 --> 00:09:45,030
Extra thing which we need to do now

00:09:45,030 --> 00:09:47,810
is that we need to add a keydown event listener

00:09:47,810 --> 00:09:49,480
as well to that button,

00:09:49,480 --> 00:09:53,030
because this is required for keyboard accessibility.

00:09:53,030 --> 00:09:57,510
Now keydown will be fired every time user presses, any key

00:09:57,510 --> 00:10:00,560
so we need to check for the specific keys.

00:10:00,560 --> 00:10:02,880
So as part of accessibility rules,

00:10:02,880 --> 00:10:06,480
a user can either press the space key or the enter key

00:10:06,480 --> 00:10:07,910
to trigger any action.

00:10:07,910 --> 00:10:08,743
So what I will do,

00:10:08,743 --> 00:10:12,120
I will check if the key pressed by user

00:10:12,120 --> 00:10:14,400
was space or enter.

00:10:14,400 --> 00:10:18,080
If yes, I'm going ahead and again doing the action,

00:10:18,080 --> 00:10:20,730
which is supposed to be done on the click of that button.

00:10:20,730 --> 00:10:23,160
Apart from that one more thing which we need to do is

00:10:23,160 --> 00:10:26,960
that we need to prevent a default behavior of the click,

00:10:26,960 --> 00:10:28,000
of the event.

00:10:28,000 --> 00:10:32,150
So this is required because when you click on space,

00:10:32,150 --> 00:10:35,110
when you press the space button by default

00:10:35,110 --> 00:10:36,880
the screen scrolls.

00:10:36,880 --> 00:10:40,250
We want to prevent that action for the button.

00:10:40,250 --> 00:10:45,250
That's why we will use this preventDefault to block that.

00:10:45,810 --> 00:10:50,140
So we just saw how using a semantic HTML tag

00:10:50,140 --> 00:10:53,190
enhances accessibility.

00:10:53,190 --> 00:10:54,900
And if we don't want to use that,

00:10:54,900 --> 00:10:57,810
or in any case, if we are using a non semantic HTML,

00:10:57,810 --> 00:11:01,790
how by writing that extra JavaScript code,

00:11:01,790 --> 00:11:03,770
we have just enhanced the accessibility

00:11:03,770 --> 00:11:07,003
and it is now usable by any kind of user.

00:11:08,120 --> 00:11:10,650
So rule number two is all the functionality

00:11:10,650 --> 00:11:12,820
must be accessible through keyboard.

00:11:12,820 --> 00:11:14,670
We saw one of the examples here.

00:11:14,670 --> 00:11:17,230
So what other interactions

00:11:17,230 --> 00:11:19,470
[do] users performs using keyboards?

00:11:19,470 --> 00:11:22,280
The first one obviously navigating through the elements.

00:11:22,280 --> 00:11:25,010
We can trigger any actions, submit any form,

00:11:25,010 --> 00:11:28,220
or you can exit any current component.

00:11:28,220 --> 00:11:30,810
So like if there's a pop over on it

00:11:30,810 --> 00:11:33,920
and using just key press I would like to exit

00:11:33,920 --> 00:11:36,643
that dialogue or that modal from that screen.

00:11:38,080 --> 00:11:39,590
One of the examples could be

00:11:39,590 --> 00:11:41,460
when we have any horizontal scroll

00:11:41,460 --> 00:11:44,220
or next or previous buttons on our website,

00:11:44,220 --> 00:11:48,260
in that case, we do want to add arrow key event handling

00:11:48,260 --> 00:11:50,520
so that the users who are using keyboard,

00:11:50,520 --> 00:11:53,410
they can press the arrow keys

00:11:53,410 --> 00:11:55,120
and they should be able to scroll

00:11:55,120 --> 00:11:58,653
or navigate to next and previous content on the website.

00:12:00,160 --> 00:12:04,740
The important keys that user presses are enter, space bar,

00:12:04,740 --> 00:12:05,580
tab, and escape.

00:12:05,580 --> 00:12:08,820
And we must always remember the key values for it,

00:12:08,820 --> 00:12:11,990
so that we can go ahead and add event listeners

00:12:11,990 --> 00:12:13,760
as and when required.

00:12:13,760 --> 00:12:17,040
This is a sample code of how we can add an event listener

00:12:17,040 --> 00:12:20,313
to any element of our website.

00:12:21,720 --> 00:12:23,020
Rule number three is that

00:12:23,020 --> 00:12:26,010
event listeners, which we just saw an example of,

00:12:26,010 --> 00:12:28,400
they should be device independent.

00:12:28,400 --> 00:12:29,980
What do we mean by that?

00:12:29,980 --> 00:12:33,080
So JavaScript has many event handlers,

00:12:33,080 --> 00:12:36,126
there are many like mouseup, mousedown, mouseover,

00:12:36,126 --> 00:12:36,959
keyup, keydown.

00:12:36,959 --> 00:12:39,470
So why do we want to do that?

00:12:39,470 --> 00:12:41,860
Whenever we want them to trigger any action,

00:12:41,860 --> 00:12:43,850
we must use keyup or keydown

00:12:43,850 --> 00:12:45,700
in place of mouseup and mousedown

00:12:45,700 --> 00:12:47,070
because mouseup and mousedown

00:12:47,070 --> 00:12:49,920
are device dependent event listeners.

00:12:49,920 --> 00:12:53,350
So they will be only accessed through mouse.

00:12:53,350 --> 00:12:58,350
So if I have a button and I have a task, a mouse upon it,

00:12:58,500 --> 00:13:00,870
then I can click on it only using mouse.

00:13:00,870 --> 00:13:04,780
If I do want other users to access that trigger action

00:13:04,780 --> 00:13:07,730
or access that button and click over it,

00:13:07,730 --> 00:13:11,130
I should be adding the keyup or keydown event handlers

00:13:11,130 --> 00:13:12,290
in that case.

00:13:12,290 --> 00:13:14,920
Now, if there is any business requirement

00:13:14,920 --> 00:13:16,370
or any such a condition

00:13:16,370 --> 00:13:19,650
where we really want to have mousedown and mouseup event

00:13:19,650 --> 00:13:21,630
for some of our elements,

00:13:21,630 --> 00:13:24,130
we must also include a complimentary keyup

00:13:24,130 --> 00:13:25,610
or keydown event listener

00:13:25,610 --> 00:13:29,840
so that we are not blocking the assistive technology users

00:13:29,840 --> 00:13:30,883
out of our flow.

00:13:33,530 --> 00:13:36,280
Rule number four is managing focus.

00:13:36,280 --> 00:13:38,173
So we must manage the focus on our website.

00:13:38,173 --> 00:13:41,150
Well, what do we mean by focus?

00:13:41,150 --> 00:13:46,150
So focus is actually something like, you know,

00:13:46,460 --> 00:13:50,940
it has a very bad reputation of seemingly ugly outline

00:13:50,940 --> 00:13:52,920
over the interactive elements.

00:13:52,920 --> 00:13:55,110
So if you see here in this button,

00:13:55,110 --> 00:13:56,880
there is this a black outline.

00:13:56,880 --> 00:13:58,000
And if we're in dark mode,

00:13:58,000 --> 00:14:00,473
it has this white outline by default.

00:14:01,640 --> 00:14:05,960
And what happens in general that many designers suggest

00:14:05,960 --> 00:14:07,300
or many developers also,

00:14:07,300 --> 00:14:09,570
we do not like this on our element by default.

00:14:09,570 --> 00:14:12,300
So what we do, we go ahead and hide it.

00:14:12,300 --> 00:14:13,560
And when we hide it,

00:14:13,560 --> 00:14:15,360
as a mouse user we are still able

00:14:15,360 --> 00:14:18,120
to navigate perfectly fine.

00:14:18,120 --> 00:14:22,560
But when it comes to the users who rely only on keyboard

00:14:22,560 --> 00:14:24,220
for navigating through our elements,

00:14:24,220 --> 00:14:26,060
we have just blocked them out

00:14:26,060 --> 00:14:27,630
because they're not able to understand

00:14:27,630 --> 00:14:29,260
what is the current active element

00:14:29,260 --> 00:14:31,759
on their web page right now.

00:14:31,759 --> 00:14:35,476
So to understand this better, I have created some demos.

00:14:35,476 --> 00:14:38,023
So the first demo will be,

00:14:38,915 --> 00:14:43,140
where what we are doing, that I have hidden the outline.

00:14:43,140 --> 00:14:44,590
So which we normally do.

00:14:44,590 --> 00:14:46,680
So if you see I'm using my mouse

00:14:46,680 --> 00:14:50,300
and I'm perfectly able to go anywhere on this website,

00:14:50,300 --> 00:14:53,790
and I know that where I am currently and I can click on it

00:14:53,790 --> 00:14:54,700
and it will work.

00:14:54,700 --> 00:14:57,730
But now as a keyboard user, if I'm a keyboard user now,

00:14:57,730 --> 00:15:00,290
and I will try to navigate it only through my keyboard,

00:15:00,290 --> 00:15:03,540
if you see, the outline,

00:15:03,540 --> 00:15:06,810
it never comes on the web content.

00:15:06,810 --> 00:15:09,990
So I'm not able to access any of the links or buttons

00:15:09,990 --> 00:15:11,430
on this website.

00:15:11,430 --> 00:15:15,963
So it's a very bad user experience for keyboard users.

00:15:17,200 --> 00:15:20,980
So now, normally what happens that we say this,

00:15:20,980 --> 00:15:23,640
we give this example, we preach about this,

00:15:23,640 --> 00:15:26,310
we think about it and then we forget.

00:15:26,310 --> 00:15:29,820
The next time again, we might be doing the same thing.

00:15:29,820 --> 00:15:32,167
Unless we are in the situation

00:15:32,167 --> 00:15:36,540
where we are blocked due to such behavior.

00:15:36,540 --> 00:15:39,090
So one such a behavior for a mouse user

00:15:39,090 --> 00:15:41,790
could be that the cursor is not there, right?

00:15:41,790 --> 00:15:44,960
So what I have done here now is effectively,

00:15:44,960 --> 00:15:49,607
this content is totally accessible by a other keyboards.

00:15:50,460 --> 00:15:51,550
So if you go out and see

00:15:51,550 --> 00:15:53,890
through keyboard I'm able to access everything,

00:15:53,890 --> 00:15:55,630
but as a mouse user,

00:15:55,630 --> 00:15:57,760
so my cursor is there now,

00:15:57,760 --> 00:16:00,980
and now I want to perform something using my mouse.

00:16:00,980 --> 00:16:04,070
So if you see the cursor's invisible now,

00:16:04,070 --> 00:16:08,400
just like I had outlined in the previous example,

00:16:08,400 --> 00:16:10,700
I have just hidden cursor in this example.

00:16:10,700 --> 00:16:14,040
And I am not sure where I am on this webpage,

00:16:14,040 --> 00:16:16,013
so I'm not able to do anything.

00:16:17,176 --> 00:16:21,410
So I highly suggest you to go through this a small example

00:16:21,410 --> 00:16:24,300
and see for yourself how frustrating it is

00:16:24,300 --> 00:16:27,782
if we do not understand where we are currently.

00:16:27,782 --> 00:16:30,370
So we cannot proceed to do the action

00:16:30,370 --> 00:16:32,267
which we came to do here.

00:16:32,267 --> 00:16:33,761
It's highly frustrating.

00:16:33,761 --> 00:16:37,880
It really helps us to understand that if we hide outline,

00:16:37,880 --> 00:16:41,360
or if we do not provide users with any measures

00:16:41,360 --> 00:16:44,080
to understand which is their current active element,

00:16:44,080 --> 00:16:47,512
how frustrating it could be for the users--

00:16:47,512 --> 00:16:50,923
it's such a bad user experience.

00:16:55,519 --> 00:16:57,130
Now what we're going to do.

00:16:57,130 --> 00:16:58,950
This is one of my favorite quote,

00:16:58,950 --> 00:17:01,093
I read it somewhere and I really liked it.

00:17:01,093 --> 00:17:03,440
"Outline is to keyboard users,

00:17:03,440 --> 00:17:07,240
what cursor is to mouse users." And this is so true.

00:17:07,240 --> 00:17:11,440
This really relates so much.

00:17:11,440 --> 00:17:12,730
So what we're going to do today,

00:17:12,730 --> 00:17:15,220
we are going to see one of the use cases where

00:17:16,120 --> 00:17:19,250
using JavaScript will really enhance the accessibility

00:17:19,250 --> 00:17:20,370
of our website.

00:17:20,370 --> 00:17:22,900
That use case is modal interaction.

00:17:22,900 --> 00:17:25,820
Whenever we are having a dialogue on our website,

00:17:25,820 --> 00:17:29,560
how can we use JavaScript to make it highly accessible

00:17:29,560 --> 00:17:30,663
for any kind of user?

00:17:32,780 --> 00:17:35,300
Let's jump back again to the examples.

00:17:35,300 --> 00:17:39,860
We go back to our website and modals. Here we are.

00:17:39,860 --> 00:17:42,150
So what I'm going to do,

00:17:42,150 --> 00:17:44,140
I am directly going to use my keyboard

00:17:44,140 --> 00:17:45,780
to access to all of these.

00:17:45,780 --> 00:17:48,930
And so what is the behavior of an inaccessible website

00:17:48,930 --> 00:17:52,033
and then how we can make it accessible.

00:17:53,510 --> 00:17:54,820
I'm using my tab.

00:17:54,820 --> 00:17:59,000
I came on the button, which is going to open my modal.

00:17:59,000 --> 00:18:01,480
I entered on it, the modal opened.

00:18:01,480 --> 00:18:03,410
But now if you notice one thing,

00:18:03,410 --> 00:18:06,130
the focus, which we just talked about.

00:18:06,130 --> 00:18:08,330
The focus is still on the back of the modal.

00:18:08,330 --> 00:18:12,827
It's still on the view, which is now not active.

00:18:12,827 --> 00:18:14,360
The modal is active now,

00:18:14,360 --> 00:18:16,420
but the focus is in back off it.

00:18:16,420 --> 00:18:19,983
So the user wanted the focus shifted to the modal,

00:18:19,983 --> 00:18:22,824
which clearly didn't happen. That's okay.

00:18:22,824 --> 00:18:26,302
I click on tab again. Still the focus does not come here.

00:18:26,302 --> 00:18:29,343
So it's confusing to the user.

00:18:30,190 --> 00:18:32,840
However, if the user clicks on tab, two, three times,

00:18:32,840 --> 00:18:35,650
it will come after the flow of interactive elements

00:18:35,650 --> 00:18:38,940
reaches the modal, it will still come to the modal.

00:18:38,940 --> 00:18:41,320
Now the focus is there on the modal

00:18:41,320 --> 00:18:43,050
and we can perform an interaction.

00:18:43,050 --> 00:18:43,883
What I want to do,

00:18:43,883 --> 00:18:45,360
maybe there was a form or something,

00:18:45,360 --> 00:18:46,930
I want to go ahead and submit.

00:18:46,930 --> 00:18:48,810
But let's say I'm tabbing here

00:18:48,810 --> 00:18:52,560
and by mistake, I tabbed one more time.

00:18:52,560 --> 00:18:56,040
So the normal behavior or the accessibility rule,

00:18:56,040 --> 00:18:58,670
it says that the focus must be trapped

00:18:58,670 --> 00:19:02,260
into the active container right now, the active modal,

00:19:02,260 --> 00:19:04,960
which is where the focus should have been

00:19:04,960 --> 00:19:06,180
in this modal itself.

00:19:06,180 --> 00:19:07,860
It should not have moved out.

00:19:07,860 --> 00:19:09,270
But what happened right now

00:19:09,270 --> 00:19:11,290
that the focus moved out of this modal

00:19:11,290 --> 00:19:13,720
and went again back to the modal.

00:19:13,720 --> 00:19:16,193
This again confuses the users.

00:19:17,250 --> 00:19:18,930
However, I can use shift tab again,

00:19:18,930 --> 00:19:22,010
and I can come back to this modal.

00:19:22,010 --> 00:19:23,903
Now the third rule says that,

00:19:26,350 --> 00:19:28,350
if a modal has opened,

00:19:28,350 --> 00:19:31,340
or if we have a close icon or something like that,

00:19:31,340 --> 00:19:36,273
the user must be able to close that modal using a keyboard,

00:19:36,273 --> 00:19:39,010
using the escape button on keyboard.

00:19:39,010 --> 00:19:42,590
So I tried to click on escape, but the modal will not close.

00:19:42,590 --> 00:19:46,930
I have to go back to the cross icon and that button,

00:19:46,930 --> 00:19:49,350
and then I can click either enter or space

00:19:49,350 --> 00:19:51,650
and now the modal is closed.

00:19:51,650 --> 00:19:55,040
So we see that user has to perform some extra steps.

00:19:55,040 --> 00:19:58,140
And there were some steps which really confused the users.

00:19:58,140 --> 00:19:59,750
And we are not clearly following

00:19:59,750 --> 00:20:03,520
all the rules of accessibility while creating this modal.

00:20:03,520 --> 00:20:07,610
So let's see how accessible modals should behave.

00:20:07,610 --> 00:20:11,330
So if you go to the third button, click here to open modal,

00:20:11,330 --> 00:20:14,410
this is going to open accessible modal.

00:20:14,410 --> 00:20:17,450
Let's see, I click enter on it.

00:20:17,450 --> 00:20:18,970
And if you see the modal is open

00:20:18,970 --> 00:20:22,170
and the focus came right to the first interactive element

00:20:22,170 --> 00:20:23,003
in this modal,

00:20:23,003 --> 00:20:25,510
which means that user now knows that,

00:20:25,510 --> 00:20:26,670
okay, we are in the modal,

00:20:26,670 --> 00:20:28,637
focus is in the modal and I can go ahead

00:20:28,637 --> 00:20:30,310
and perform any action.

00:20:30,310 --> 00:20:31,483
Now I'm pressing tab.

00:20:31,483 --> 00:20:34,403
It came to the last interactive element of modal.

00:20:35,610 --> 00:20:37,080
I press tab again.

00:20:37,080 --> 00:20:39,650
And it went back to the first interactive element

00:20:39,650 --> 00:20:40,570
on the modal.

00:20:40,570 --> 00:20:42,420
So this is called focus trapping.

00:20:42,420 --> 00:20:45,507
Whenever the user presses tab or shift tab,

00:20:45,507 --> 00:20:48,770
the focus must be trapped in this modal itself.

00:20:48,770 --> 00:20:52,313
And it should never go behind the modal.

00:20:53,290 --> 00:20:55,380
So now the third rule again,

00:20:55,380 --> 00:20:57,980
that a user must be able to close this modal,

00:20:57,980 --> 00:20:59,800
using escape press.

00:20:59,800 --> 00:21:03,230
I'm pressing the key escape and yes, it closed.

00:21:03,230 --> 00:21:04,410
So it's good.

00:21:04,410 --> 00:21:05,550
Now, one more thing,

00:21:05,550 --> 00:21:09,010
which has happened that the focus went right back

00:21:09,010 --> 00:21:11,960
to the same button from where the user had started.

00:21:11,960 --> 00:21:15,380
So the context has not been lost for the user.

00:21:15,380 --> 00:21:17,790
They know that, okay, I had started from here,

00:21:17,790 --> 00:21:20,010
I went to the modal, I did something

00:21:20,010 --> 00:21:22,883
and now I'm back at this button. I can proceed now.

00:21:23,890 --> 00:21:28,890
So this is an example of a good accessible modal,

00:21:29,480 --> 00:21:30,450
which we can create.

00:21:30,450 --> 00:21:33,510
And let's see how we can achieve these functionalities

00:21:33,510 --> 00:21:34,990
using JavaScript.

00:21:34,990 --> 00:21:38,035
So in the example section below, in the sample code,

00:21:38,035 --> 00:21:41,100
we have an HTML, we have a button

00:21:41,100 --> 00:21:42,540
which is going to open the modal

00:21:42,540 --> 00:21:46,050
and there is a div which contains all the modal content.

00:21:46,050 --> 00:21:48,640
And if you see, I provided it a role of dialogue,

00:21:48,640 --> 00:21:51,520
because we want to let the assistive technologies know

00:21:51,520 --> 00:21:54,636
that this content is going to be a dialogue.

00:21:54,636 --> 00:21:56,570
Let's jump to JavaScript section.

00:21:56,570 --> 00:21:58,386
In JavaScript we have,

00:21:58,386 --> 00:22:02,000
you summed up the credit selectors to get our modal,

00:22:02,000 --> 00:22:04,820
to get our different interactions on the modal,

00:22:04,820 --> 00:22:08,280
as well as the button, which is going to open our modal.

00:22:08,280 --> 00:22:10,970
Now, let's see what happens when we click

00:22:10,970 --> 00:22:13,620
on the open modal button.

00:22:13,620 --> 00:22:17,460
So as soon as we click on the open modal button,

00:22:17,460 --> 00:22:19,247
three things are happening here.

00:22:19,247 --> 00:22:21,940
The first thing is we have a variable

00:22:21,940 --> 00:22:24,210
which stores the previous active element

00:22:24,210 --> 00:22:25,430
and what with that,

00:22:25,430 --> 00:22:28,790
we save that current active element of document,

00:22:28,790 --> 00:22:30,530
which was that button,

00:22:30,530 --> 00:22:32,370
which opens the modal.

00:22:32,370 --> 00:22:36,300
So we store that into this previous active element.

00:22:36,300 --> 00:22:38,370
After we had stored it, we toggle it.

00:22:38,370 --> 00:22:43,080
It means that we are now putting the modal in front,

00:22:43,080 --> 00:22:45,030
we are making it visible.

00:22:45,030 --> 00:22:47,700
After that, what we do, the third thing which we do,

00:22:47,700 --> 00:22:51,500
that we go through all the focusable elements

00:22:51,500 --> 00:22:52,333
of the modal.

00:22:52,333 --> 00:22:53,770
If you see here, what we are doing,

00:22:53,770 --> 00:22:55,920
we are currently selecting into the modal.

00:22:55,920 --> 00:22:59,980
And for my scenario, I only had buttons on the modal.

00:22:59,980 --> 00:23:03,210
So I will go ahead and check how many buttons I have.

00:23:03,210 --> 00:23:07,600
And I select the first one and put the focus on it.

00:23:07,600 --> 00:23:10,560
So I say that, hey, by default when the modal opens,

00:23:10,560 --> 00:23:12,810
you have to focus on the first interactive element,

00:23:12,810 --> 00:23:15,170
which is the cross icon for us.

00:23:15,170 --> 00:23:20,170
Now, when we close the modal using either close button

00:23:21,350 --> 00:23:23,560
or the submit button, what we are doing here,

00:23:23,560 --> 00:23:26,579
that we are toggling the modal with focus restore.

00:23:26,579 --> 00:23:28,720
What does this mean?

00:23:28,720 --> 00:23:30,690
Is that first we toggle the modal

00:23:30,690 --> 00:23:32,870
to now disappear. We want it to hide.

00:23:32,870 --> 00:23:34,330
So we hide it through this.

00:23:34,330 --> 00:23:37,160
And then, if you remember

00:23:37,160 --> 00:23:38,840
that when we were opening the modal,

00:23:38,840 --> 00:23:42,880
we had saved the reference of the button into this variable.

00:23:42,880 --> 00:23:46,470
What we do now essentially is we go ahead and focus on it.

00:23:46,470 --> 00:23:49,990
So now that button is focused when the modal closes

00:23:49,990 --> 00:23:51,680
due to this line of code.

00:23:51,680 --> 00:23:52,600
Apart from that,

00:23:52,600 --> 00:23:57,600
there is also code of trapping the focus inside the modal

00:23:57,980 --> 00:24:01,070
where we are checking on the keydown

00:24:01,070 --> 00:24:03,150
so it is attached to keydown event

00:24:03,150 --> 00:24:05,680
and we are checking if the user is pressing tab.

00:24:05,680 --> 00:24:08,470
And then we see if the combination is shift / tab

00:24:08,470 --> 00:24:09,873
or normal tab.

00:24:09,873 --> 00:24:11,440
And according to that,

00:24:11,440 --> 00:24:14,660
we go ahead and focus the elements.

00:24:14,660 --> 00:24:18,080
Then there is one more code for escape.

00:24:18,080 --> 00:24:20,770
So if the user will press the escape key,

00:24:20,770 --> 00:24:21,603
what will happen?

00:24:21,603 --> 00:24:22,880
That we are again,

00:24:22,880 --> 00:24:25,710
going to hide the modal and restore the focus

00:24:25,710 --> 00:24:28,410
back to the button from the other modal that got open.

00:24:29,780 --> 00:24:32,330
And the reference for this is also there

00:24:32,330 --> 00:24:35,710
in case you are interested, you can go explore it further.

00:24:38,027 --> 00:24:42,023
Then the rule number five, this is our last rule for today.

00:24:42,944 --> 00:24:45,410
We should be honoring the user's device settings.

00:24:45,410 --> 00:24:48,980
So we are going to see a use case of animations.

00:24:48,980 --> 00:24:51,773
Normally, what happens that animations,

00:24:51,773 --> 00:24:55,012
this is not like against using animation.

00:24:55,012 --> 00:24:57,560
We can use animations for all we want.

00:24:57,560 --> 00:24:59,610
Animations really make our websites beautiful

00:24:59,610 --> 00:25:00,930
and attractive,

00:25:00,930 --> 00:25:03,170
but there are some of the users

00:25:03,170 --> 00:25:05,073
who have certain conditions

00:25:05,073 --> 00:25:07,240
that they feel uneasy when they see animation

00:25:07,240 --> 00:25:11,360
or the flashing content on their screen.

00:25:11,360 --> 00:25:15,640
So there is these settings in every operating system

00:25:15,640 --> 00:25:18,180
or in every device where we can go ahead

00:25:18,180 --> 00:25:22,070
and set if we want to see animation or not.

00:25:22,070 --> 00:25:24,425
So if you, for Windows what it is is

00:25:24,425 --> 00:25:26,592
that if you type animation

00:25:27,667 --> 00:25:30,334
and we get a setting right here.

00:25:32,447 --> 00:25:35,579
In the setting by default it's on.

00:25:35,579 --> 00:25:38,931
So this means that, okay, I want to see any animations

00:25:38,931 --> 00:25:43,880
which occurred in any of our websites which I am accessing.

00:25:43,880 --> 00:25:48,680
So let's see an example of how it will affect.

00:25:48,680 --> 00:25:51,700
So this is the example for animation.

00:25:51,700 --> 00:25:54,800
So if you see now, for now I don't have any preference.

00:25:54,800 --> 00:25:57,250
What I want that okay if animations are there,

00:25:57,250 --> 00:26:00,140
I should be able to see and that's fine.

00:26:00,140 --> 00:26:02,410
We are able to see the animations on our screen.

00:26:02,410 --> 00:26:05,180
Now let's say I do not want to see the animation.

00:26:05,180 --> 00:26:07,180
So my device settings says that,

00:26:07,180 --> 00:26:10,470
okay, turn off the animations on any content

00:26:10,470 --> 00:26:13,510
which I see on my windows machine.

00:26:13,510 --> 00:26:16,853
So if I refresh again, if you see,

00:26:19,370 --> 00:26:22,833
okay it takes a while maybe.

00:26:25,010 --> 00:26:28,870
Yes. So if you see now that this animation has stopped.

00:26:28,870 --> 00:26:32,140
So we have written a code to honor device settings of users.

00:26:32,140 --> 00:26:34,350
So animation is stopped right now. It's still.

00:26:34,350 --> 00:26:36,431
So user will not face any kind of issues.

00:26:36,431 --> 00:26:39,670
But in this example, this is still going on.

00:26:39,670 --> 00:26:41,520
The animation is still going on.

00:26:41,520 --> 00:26:44,810
So this is not a very good user experience.

00:26:44,810 --> 00:26:47,630
Let's see how we can achieve this through our code.

00:26:47,630 --> 00:26:49,680
There are two ways of doing that.

00:26:49,680 --> 00:26:51,420
We can achieve it using CSS.

00:26:51,420 --> 00:26:52,780
In CSS we have a media query,

00:26:52,780 --> 00:26:55,930
which says prefers reduced motion.

00:26:55,930 --> 00:26:58,610
So if the user will not have any preference,

00:26:58,610 --> 00:27:00,360
what we do inside media query,

00:27:00,360 --> 00:27:03,580
we can go ahead and write all our code of animation.

00:27:03,580 --> 00:27:05,000
So the styling,

00:27:05,000 --> 00:27:08,090
which will attach the animation to any element

00:27:08,090 --> 00:27:12,555
on our webpage, that can go inside this media query.

00:27:12,555 --> 00:27:13,830
So what this will do

00:27:13,830 --> 00:27:16,030
is that if user will have any kind of preference,

00:27:16,030 --> 00:27:16,923
this code is not gonna run.

00:27:16,923 --> 00:27:20,743
And this CSS is not gonna get applied to our website.

00:27:21,690 --> 00:27:23,170
If we want to use JavaScript,

00:27:23,170 --> 00:27:25,890
in JavaScript we have a match media API,

00:27:25,890 --> 00:27:27,760
and we can check for again,

00:27:27,760 --> 00:27:30,900
the same media query, prefers reduced motion.

00:27:30,900 --> 00:27:33,090
So this is going to return True

00:27:33,090 --> 00:27:35,953
if user has set their device settings,

00:27:37,149 --> 00:27:40,350
to say that, hey, I do not want to see any animation.

00:27:40,350 --> 00:27:41,870
In that case what we will do,

00:27:41,870 --> 00:27:44,930
is we are not going to apply any classes,

00:27:44,930 --> 00:27:47,170
but if user has no such settings,

00:27:47,170 --> 00:27:51,650
we will go ahead and apply this class, whichever we want.

00:27:51,650 --> 00:27:54,473
And it contains all the animation code for us.

00:27:55,400 --> 00:27:59,930
So using preferred, reduced motion media query,

00:27:59,930 --> 00:28:04,930
we can really use it to detect the device settings of users

00:28:06,960 --> 00:28:11,303
and we can help them in getting the more accessible content.

00:28:14,491 --> 00:28:17,130
We are done with the rules and now

00:28:17,130 --> 00:28:19,380
I've listed down some tools and extensions,

00:28:19,380 --> 00:28:22,630
which we can use to see how accessible

00:28:22,630 --> 00:28:24,570
our websites really are.

00:28:24,570 --> 00:28:28,180
So these are some of the dev tools, extensions,

00:28:28,180 --> 00:28:30,077
which we can really use and those are the extensions,

00:28:30,077 --> 00:28:34,053
which we can use to test our website accessibility.

00:28:35,210 --> 00:28:39,260
I will go and quickly run you through these.

00:28:41,250 --> 00:28:42,560
First and foremost,

00:28:42,560 --> 00:28:45,070
things which we already have in our dev tools

00:28:45,070 --> 00:28:47,660
is the accessibility pane.

00:28:47,660 --> 00:28:49,940
So what accessibility pane does is,

00:28:49,940 --> 00:28:54,000
that you can go ahead and select any element on your screen

00:28:54,000 --> 00:28:57,040
and see what is the accessibility information for it.

00:28:57,040 --> 00:29:00,070
So I select it and I go to the accessibility pane.

00:29:00,070 --> 00:29:01,040
And if you see,

00:29:01,040 --> 00:29:03,940
there are many accessibility information here

00:29:03,940 --> 00:29:06,200
and also the tree of accessibility.

00:29:06,200 --> 00:29:08,820
This is how the assistive technologies

00:29:08,820 --> 00:29:11,550
read our element on our webpage.

00:29:11,550 --> 00:29:13,068
So they can go ahead and see it

00:29:13,068 --> 00:29:15,860
to see if there are any accessibility issues

00:29:15,860 --> 00:29:17,150
with our website.

00:29:17,150 --> 00:29:20,170
There is another one which is called Lighthouse.

00:29:20,170 --> 00:29:21,600
In Lighthouse what we can do is

00:29:21,600 --> 00:29:23,220
that we can select accessibility,

00:29:23,220 --> 00:29:25,460
we can select the device for which we want to see,

00:29:25,460 --> 00:29:27,600
and we can generate the report for it.

00:29:27,600 --> 00:29:29,530
It generates an audit report

00:29:29,530 --> 00:29:32,880
for the accessibility of our current webpage.

00:29:32,880 --> 00:29:35,610
And it gives you information on what is accessible,

00:29:35,610 --> 00:29:38,300
what is not, a score for accessibility

00:29:38,300 --> 00:29:41,050
and how you can fix something which is not accessible.

00:29:41,050 --> 00:29:43,630
In my case, there is one accessibility issue.

00:29:43,630 --> 00:29:46,300
And it's going to tell me how I can fix it.

00:29:46,300 --> 00:29:49,820
Also some things which we can manually check on our website

00:29:49,820 --> 00:29:52,263
to see if they are still working or not.

00:29:53,190 --> 00:29:56,190
And this actually works.

00:29:56,190 --> 00:29:57,970
And there is one more, which is called aXe.

00:29:57,970 --> 00:30:00,410
So aXe is also an extension,

00:30:00,410 --> 00:30:03,210
which we need to add from browser extensions.

00:30:03,210 --> 00:30:04,190
This is the extension,

00:30:04,190 --> 00:30:06,700
and it also gets added to the dev tools itself.

00:30:06,700 --> 00:30:09,560
Here, aXe, it works similar to the Lighthouse.

00:30:09,560 --> 00:30:13,330
Then we have Wave, which is an extension of a browser.

00:30:13,330 --> 00:30:15,350
So this is Wave extension.

00:30:15,350 --> 00:30:20,210
For that what we need to do, right click and Wave this page.

00:30:20,210 --> 00:30:21,640
So when I Wave this page,

00:30:21,640 --> 00:30:22,483
what it will do,

00:30:22,483 --> 00:30:25,480
it is going to give me all the accessibility information

00:30:25,480 --> 00:30:26,350
of this page.

00:30:26,350 --> 00:30:28,120
And it has very detailed information.

00:30:28,120 --> 00:30:30,360
Personally I really like it a lot.

00:30:30,360 --> 00:30:34,060
And you can go ahead and check about all the elements,

00:30:34,060 --> 00:30:36,870
their information and what they do.

00:30:36,870 --> 00:30:38,290
This is really helpful.

00:30:38,290 --> 00:30:42,010
So I recommend you to go ahead and check out these tools

00:30:42,010 --> 00:30:45,400
and see how your website is doing in terms of accessibility

00:30:46,620 --> 00:30:49,430
and fix if possible.

00:30:49,430 --> 00:30:53,580
And these are for the testing, for testing our websites.

00:30:53,580 --> 00:30:56,600
But now I really believe that we should be thinking

00:30:56,600 --> 00:30:58,740
about accessibility from the very start.

00:30:58,740 --> 00:31:02,600
So there are some tools which help us detect accessibility

00:31:02,600 --> 00:31:04,550
at development phase itself.

00:31:04,550 --> 00:31:06,540
So Web Accessibility and webhint

00:31:06,540 --> 00:31:10,080
are some of the IDE extensions

00:31:10,080 --> 00:31:13,190
so I have added them in my VS Code extension,

00:31:13,190 --> 00:31:14,850
and I just wanted to show you

00:31:14,850 --> 00:31:18,550
how they help us detect accessibility issues

00:31:18,550 --> 00:31:20,410
during the development phase itself.

00:31:20,410 --> 00:31:23,460
So I have the extensions installed in my VS Code,

00:31:23,460 --> 00:31:24,293
and if you see,

00:31:24,293 --> 00:31:27,053
I'm trying to add a click handler on a div.

00:31:28,100 --> 00:31:29,310
So it detects that.

00:31:29,310 --> 00:31:31,030
Okay there is a click handler

00:31:31,030 --> 00:31:32,440
and it's going to tell me

00:31:32,440 --> 00:31:35,100
that we should at least specify a role for it

00:31:35,100 --> 00:31:38,920
so that the assisted users understand about these things.

00:31:38,920 --> 00:31:40,880
And then I have another one,

00:31:40,880 --> 00:31:43,730
which is an image and it does not have alt

00:31:43,730 --> 00:31:46,010
and alt is really important for accessibility.

00:31:46,010 --> 00:31:48,550
So it's going to go ahead and tell me that,

00:31:48,550 --> 00:31:50,537
hey, you should add an alt for it.

00:31:51,940 --> 00:31:53,630
It gives very good information.

00:31:53,630 --> 00:31:57,170
And so what these tools do is they really help

00:31:57,170 --> 00:31:58,920
when I'm typing, when I'm coding,

00:31:58,920 --> 00:32:03,920
so that I do not write any inaccessible code by mistake.

00:32:04,430 --> 00:32:07,490
Although the support which they have is really limited,

00:32:07,490 --> 00:32:08,850
but still, it really helps

00:32:08,850 --> 00:32:12,150
in some of the major rules of HTML.

00:32:12,150 --> 00:32:17,000
So it helps a lot in preventing the inaccessible code,

00:32:17,000 --> 00:32:19,490
getting sipped to the production.

00:32:19,490 --> 00:32:21,010
Also, there are different plugins

00:32:21,010 --> 00:32:23,610
like this one, eslint-plugin for JSX.

00:32:23,610 --> 00:32:26,997
What it does that it's obviously for JSX code

00:32:26,997 --> 00:32:28,400
as the name suggests.

00:32:28,400 --> 00:32:31,120
It's an estlin-plugin and we can configure it.

00:32:31,120 --> 00:32:33,030
And whenever we are coding in JSX,

00:32:33,030 --> 00:32:36,430
it will give us good information of

00:32:37,349 --> 00:32:39,650
what is the accessibility of our current code,

00:32:39,650 --> 00:32:40,700
which we are writing.

00:32:41,710 --> 00:32:43,940
So to conclude,

00:32:43,940 --> 00:32:46,010
we must always consider the users

00:32:46,010 --> 00:32:48,460
with wide range of abilities and technologies

00:32:48,460 --> 00:32:49,370
when we are coding,

00:32:49,370 --> 00:32:52,610
or when we are creating an application or website.

00:32:52,610 --> 00:32:56,030
Always use proper semantic HTML wherever possible,

00:32:56,030 --> 00:32:58,710
or remember to add that extra code

00:32:58,710 --> 00:33:00,953
so that it's accessible for everyone.

00:33:01,790 --> 00:33:04,860
We must always manage the focus and keyboard interactivity

00:33:04,860 --> 00:33:08,100
of the elements on our webpages or applications.

00:33:08,100 --> 00:33:12,720
And always, always, always focus on accessibility,

00:33:12,720 --> 00:33:15,250
just like we focus on everything else

00:33:15,250 --> 00:33:18,463
on our webpage, websites, applications.

00:33:20,739 --> 00:33:24,125
Always code with accessibility in mind.

00:33:24,125 --> 00:33:28,550
These are some of the resources which I took reference from

00:33:28,550 --> 00:33:30,770
when I was creating this talk.

00:33:30,770 --> 00:33:32,130
It also contains the website,

00:33:32,130 --> 00:33:34,600
which I used to demo and some Codepen links,

00:33:34,600 --> 00:33:37,637
which I've used in the presentation.

00:33:37,637 --> 00:33:40,430
I will be sharing this slide after the talk.

00:33:40,430 --> 00:33:43,473
You can go through all the links and explore yourself.

00:33:45,160 --> 00:33:47,743
I also have an action item for you today.

00:33:48,720 --> 00:33:50,710
If you have learned anything from this talk,

00:33:50,710 --> 00:33:54,010
I highly encourage you to pass on that learning,

00:33:54,010 --> 00:33:57,450
or go ahead and talk with someone or your team mate,

00:33:57,450 --> 00:33:58,970
or a friend you are working with,

00:33:58,970 --> 00:34:01,410
and you can discuss about accessibility.

00:34:01,410 --> 00:34:04,790
And this is something that we need really everyone

00:34:04,790 --> 00:34:06,310
to be highly aware of.

00:34:06,310 --> 00:34:09,210
So let's all spread this light of awareness.

00:34:09,210 --> 00:34:12,000
And so that the world is highly accessible place

00:34:12,000 --> 00:34:12,903
for everyone.

00:34:14,700 --> 00:34:18,193
Let's all work toward a more inclusive world.

00:34:19,170 --> 00:34:24,170
Keep learning everyone, stay safe and thanks a lot.

00:34:24,420 --> 00:34:26,803

YouTube URL: https://www.youtube.com/watch?v=J42a3SP9obY


