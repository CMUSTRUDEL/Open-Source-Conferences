Title: Making VR More Interesting With JavaScript and Machine Learning -Milecia McGregor-JSConf Korea 2020
Publication date: 2020-10-14
Playlist: JSConf Korea 2020 Home Edition
Description: 
	If you are familiar with JavaScript, you can start making VR applications right now. Once you have your VR app ready to go, you can go a step further and add Brain.js to start getting insights about how users interact with your app and make real-time updates to the UI.

In this talk, attendees will learn how to start making VR apps, how to integrate Brain.js into a VR project, and how to use this information to make apps more accessible and interesting for users. We will cover some background material on machine learning and VR, then bring everything together in a live demo. By the end of the talk, the audience will know how to put all of these things together in a real, production-like app.
Captions: 
	00:00:13,840 --> 00:00:14,673
- Hey everybody,

00:00:14,673 --> 00:00:17,040
my name is Milecia McGregor.

00:00:17,040 --> 00:00:19,670
And today I'll be talking to you

00:00:19,670 --> 00:00:22,070
about making VR more interesting

00:00:22,070 --> 00:00:24,690
with JavaScript and Brain.js.

00:00:24,690 --> 00:00:28,150
So, I'm a developer advocate at Conducto

00:00:28,150 --> 00:00:30,770
where we make CI/CD tools

00:00:30,770 --> 00:00:31,700
and if you want

00:00:31,700 --> 00:00:33,943
you can follow me on Twitter @FlippedCoding.

00:00:35,830 --> 00:00:37,240
So to get started,

00:00:37,240 --> 00:00:40,423
I'll give you a background on VR,

00:00:42,110 --> 00:00:45,643
then we'll actually make a small VR app.

00:00:47,970 --> 00:00:49,180
Then we'll go over

00:00:49,180 --> 00:00:51,480
a little bit of background on machine learning,

00:00:51,480 --> 00:00:52,923
mainly neural networks.

00:00:54,700 --> 00:00:57,620
And then we'll actually add the machine learning code

00:00:57,620 --> 00:00:58,773
to the VR app.

00:01:00,570 --> 00:01:03,380
Then we'll go over a few other considerations

00:01:03,380 --> 00:01:06,320
when you're working with a VR application.

00:01:06,320 --> 00:01:09,643
And then we'll just go through some key takeaways.

00:01:10,870 --> 00:01:14,140
So just to get started with a little background on VR,

00:01:14,140 --> 00:01:17,710
it's a relatively new area of tech,

00:01:17,710 --> 00:01:19,760
just because the hardware

00:01:19,760 --> 00:01:22,870
has been more recently created,

00:01:22,870 --> 00:01:25,750
but the applications for virtual reality

00:01:25,750 --> 00:01:28,430
span across all kinds of industries

00:01:28,430 --> 00:01:31,480
from training medical students,

00:01:31,480 --> 00:01:33,210
to video games,

00:01:33,210 --> 00:01:35,623
to different forms of entertainment.

00:01:37,330 --> 00:01:40,150
And so this leads to a different career path

00:01:40,150 --> 00:01:42,030
that developers can take.

00:01:42,030 --> 00:01:43,420
It doesn't matter if you know,

00:01:43,420 --> 00:01:45,990
C, C# or JavaScript,

00:01:45,990 --> 00:01:48,883
you can find a place for you in VR.

00:01:50,660 --> 00:01:53,756
And then as this hardware starts to improve,

00:01:53,756 --> 00:01:56,140
you'll notice that virtual reality

00:01:56,140 --> 00:01:57,940
is gaining more momentum

00:01:57,940 --> 00:02:01,600
as something that companies are looking to invest in.

00:02:01,600 --> 00:02:03,530
So, that's where we

00:02:03,530 --> 00:02:06,723
get a lot of the different career opportunities,

00:02:07,810 --> 00:02:09,430
but this is the fun part.

00:02:09,430 --> 00:02:12,360
So we're gonna go through a live demo

00:02:12,360 --> 00:02:15,073
of how to make a VR app.

00:02:18,190 --> 00:02:22,300
Okay, so one thing that might be surprising

00:02:22,300 --> 00:02:26,520
is that you just start with an HTML file.

00:02:26,520 --> 00:02:28,780
This is the A-Frame library.

00:02:28,780 --> 00:02:30,950
So all you have to do is,

00:02:30,950 --> 00:02:32,690
import the code here,

00:02:32,690 --> 00:02:36,100
just in a script file like anything else.

00:02:36,100 --> 00:02:39,800
And we also import another package

00:02:39,800 --> 00:02:43,470
that gives us access to some pre-made environments,

00:02:43,470 --> 00:02:46,840
because when you are working with the VR application

00:02:46,840 --> 00:02:48,690
you need different assets

00:02:48,690 --> 00:02:50,750
in the world that you create.

00:02:50,750 --> 00:02:52,740
And those take a lot of time

00:02:52,740 --> 00:02:54,660
and different skillsets.

00:02:54,660 --> 00:02:56,270
So when you can take advantage

00:02:56,270 --> 00:02:58,030
of a pre-made package,

00:02:58,030 --> 00:02:59,223
it's okay to do that.

00:03:00,510 --> 00:03:03,500
And then we have a few other JavaScript files

00:03:03,500 --> 00:03:06,020
that we'll talk about a little bit later.

00:03:06,020 --> 00:03:07,330
But just so you know

00:03:07,330 --> 00:03:10,670
how a VR application works,

00:03:10,670 --> 00:03:13,740
its just a web application,

00:03:13,740 --> 00:03:16,360
but with different kinds of tags.

00:03:16,360 --> 00:03:19,120
So you'll see we're just inside the body,

00:03:19,120 --> 00:03:22,840
but A-Frame uses these different A-tags.

00:03:22,840 --> 00:03:26,960
So when you're working on a VR application,

00:03:26,960 --> 00:03:28,720
you'll have a scene.

00:03:28,720 --> 00:03:30,270
And basically what this is,

00:03:30,270 --> 00:03:35,270
is everything that is in your VR world.

00:03:35,540 --> 00:03:37,970
But the first thing you do in a scene,

00:03:37,970 --> 00:03:41,480
is import all of the assets that you wanna use.

00:03:41,480 --> 00:03:42,810
So in this case,

00:03:42,810 --> 00:03:44,830
we have a few JPEGs

00:03:44,830 --> 00:03:47,800
that we're going to make into textures

00:03:47,800 --> 00:03:49,180
for the different objects

00:03:49,180 --> 00:03:50,730
we put in the world.

00:03:50,730 --> 00:03:53,580
And I did have music for this game,

00:03:53,580 --> 00:03:57,080
but once I realized this talk was gonna be recorded,

00:03:57,080 --> 00:03:58,910
I don't think you wanna hear that

00:03:58,910 --> 00:04:00,700
playing over and over again.

00:04:00,700 --> 00:04:03,210
But if you want it to include music,

00:04:03,210 --> 00:04:04,920
you just use the audio tag

00:04:04,920 --> 00:04:07,653
like you would in any other JavaScript project.

00:04:08,670 --> 00:04:10,540
So we have our assets,

00:04:10,540 --> 00:04:13,650
that means it's time to start putting objects

00:04:13,650 --> 00:04:15,930
into the VR world.

00:04:15,930 --> 00:04:19,209
And the first thing we're gonna put in those just blocks,

00:04:19,209 --> 00:04:21,259
just a regular box.

00:04:21,260 --> 00:04:24,960
And what makes this one kind of special,

00:04:24,960 --> 00:04:27,250
is that if you see here

00:04:27,250 --> 00:04:30,700
the source is actually the same

00:04:30,700 --> 00:04:33,200
as this wooden texture asset.

00:04:33,200 --> 00:04:34,980
That means that this block

00:04:34,980 --> 00:04:37,063
is gonna look like a piece of wood.

00:04:38,230 --> 00:04:40,810
And this attribute

00:04:40,810 --> 00:04:42,440
is the height of the object.

00:04:42,440 --> 00:04:45,920
So in A-Frame you can set different attributes

00:04:45,920 --> 00:04:47,700
on these A-Tags

00:04:47,700 --> 00:04:51,600
and they determine how the shape is built

00:04:51,600 --> 00:04:53,110
inside of the world.

00:04:53,110 --> 00:04:54,900
So in this case,

00:04:54,900 --> 00:04:56,333
our box is gonna have,

00:04:56,333 --> 00:04:58,270
a height of three meters

00:04:58,270 --> 00:05:01,263
because A-Frame measures everything in meters.

00:05:02,690 --> 00:05:05,010
And then it's rotated a little bit

00:05:05,010 --> 00:05:08,110
around the Y and the Z-axis,

00:05:08,110 --> 00:05:10,923
just to show you something different in the world.

00:05:11,780 --> 00:05:13,670
And here you'll see the position.

00:05:13,670 --> 00:05:15,580
This one is really important

00:05:15,580 --> 00:05:18,730
because this is exactly where

00:05:18,730 --> 00:05:21,970
the object is going to be in the world.

00:05:21,970 --> 00:05:24,290
So this means that

00:05:24,290 --> 00:05:29,290
it's gonna be 37 meters in the X direction,

00:05:29,520 --> 00:05:32,740
it's gonna be one meter off of the ground

00:05:32,740 --> 00:05:36,790
and then it's gonna be 37 meters

00:05:36,790 --> 00:05:39,220
in the Z direction behind us.

00:05:39,220 --> 00:05:44,220
So that's how the positioning works with A-Frame.

00:05:44,420 --> 00:05:46,050
And another attribute

00:05:46,050 --> 00:05:48,760
is this animation position,

00:05:48,760 --> 00:05:50,290
basically what this does,

00:05:50,290 --> 00:05:54,280
it lets you customize animations on objects.

00:05:54,280 --> 00:05:55,700
So what we're doing here

00:05:55,700 --> 00:05:58,010
is taking the property that we want

00:05:58,010 --> 00:06:00,090
to animate for this block,

00:06:00,090 --> 00:06:04,660
and we're say we want to change the Y position

00:06:04,660 --> 00:06:09,280
to 2.2 meters every two seconds.

00:06:09,280 --> 00:06:10,900
So that means this block

00:06:10,900 --> 00:06:12,630
will just float up and down

00:06:12,630 --> 00:06:15,323
between one meter and 2.2 meters.

00:06:16,730 --> 00:06:20,230
And then the last thing here for attributes,

00:06:20,230 --> 00:06:22,070
is this custom attribute.

00:06:22,070 --> 00:06:24,820
So this is one that we'll talk about

00:06:24,820 --> 00:06:27,363
as soon as we're done in this file.

00:06:28,300 --> 00:06:29,660
And if you'll notice

00:06:29,660 --> 00:06:31,860
there are some just primitive shapes here.

00:06:31,860 --> 00:06:36,070
So you can use boxes, spheres, cylinders,

00:06:36,070 --> 00:06:38,243
they're all built into A-Frame.

00:06:39,610 --> 00:06:43,080
But down here we have something just a little bit different,

00:06:43,080 --> 00:06:44,380
this is a plane

00:06:44,380 --> 00:06:47,970
and all that is is, a plane,

00:06:47,970 --> 00:06:50,660
it's like having a sheet of paper

00:06:50,660 --> 00:06:54,610
that you can make magically float in your world.

00:06:54,610 --> 00:06:57,110
And what we've done with this plane,

00:06:57,110 --> 00:07:00,010
is just write down a few of the things

00:07:00,010 --> 00:07:03,320
that we want the user to find in the game

00:07:03,320 --> 00:07:04,830
that we're making.

00:07:04,830 --> 00:07:05,950
And to do that,

00:07:05,950 --> 00:07:09,360
we use the base A-Frame tag,

00:07:09,360 --> 00:07:11,160
which is 

00:07:11,160 --> 00:07:15,480
and you can set which kind of primitive shape

00:07:15,480 --> 00:07:18,000
it should be with an attribute.

00:07:18,000 --> 00:07:19,190
So in this case,

00:07:19,190 --> 00:07:20,680
we just wanna text

00:07:20,680 --> 00:07:23,010
because it's a list of items

00:07:23,010 --> 00:07:26,210
that the player needs to find in the game.

00:07:26,210 --> 00:07:28,250
And it's right at the beginning

00:07:28,250 --> 00:07:29,440
where they can see it,

00:07:29,440 --> 00:07:31,783
so they don't need to walk around to find it.

00:07:33,170 --> 00:07:35,300
Then down here,

00:07:35,300 --> 00:07:36,900
we get to another entity,

00:07:36,900 --> 00:07:38,890
which has the environment.

00:07:38,890 --> 00:07:43,320
And that is what really makes the layout for your world.

00:07:43,320 --> 00:07:46,400
So that library that we imported in the beginning,

00:07:46,450 --> 00:07:49,070
it's responsible for building a world

00:07:49,070 --> 00:07:51,690
based on these different attributes,

00:07:51,690 --> 00:07:53,863
which you'll get to see in a few seconds.

00:07:54,710 --> 00:07:56,900
But the last thing that I wanna show you

00:07:56,900 --> 00:07:59,050
before we get into the game,

00:07:59,050 --> 00:08:04,000
is probably the most important part of a VR application,

00:08:04,000 --> 00:08:05,650
and that's the camera.

00:08:05,650 --> 00:08:08,390
So where you position your camera

00:08:08,390 --> 00:08:12,010
changes the entire game play for a user.

00:08:12,010 --> 00:08:13,900
And that could be,

00:08:13,900 --> 00:08:16,380
you put the camera behind them

00:08:16,380 --> 00:08:18,770
so that they can see themselves walk around,

00:08:18,770 --> 00:08:21,240
you can make it into first person view

00:08:21,240 --> 00:08:23,920
so that it looks like you're just looking around

00:08:23,920 --> 00:08:24,880
in the game

00:08:24,880 --> 00:08:28,290
or you can do any kind of camera positioning

00:08:28,290 --> 00:08:30,420
that makes sense for what you're making.

00:08:30,420 --> 00:08:31,830
But what we have here

00:08:31,830 --> 00:08:33,220
is just a camera

00:08:33,220 --> 00:08:35,230
that's slightly behind the user.

00:08:35,230 --> 00:08:37,919
So it looks like a first person view

00:08:37,919 --> 00:08:41,849
and we've added just a little ring to the center

00:08:41,850 --> 00:08:42,960
of the camera,

00:08:42,960 --> 00:08:45,040
so that as the user moves around

00:08:45,040 --> 00:08:47,483
they can determine what they're looking at.

00:08:48,780 --> 00:08:51,930
So now let's just go ahead

00:08:51,930 --> 00:08:53,193
and run this app.

00:09:02,570 --> 00:09:04,683
So it should be running.

00:09:11,830 --> 00:09:15,140
It takes a little while for A-Frame to load sometimes,

00:09:15,140 --> 00:09:18,230
but it's a really good library

00:09:18,230 --> 00:09:20,300
to get started with.

00:09:20,300 --> 00:09:21,133
Now, you see,

00:09:21,133 --> 00:09:22,340
this is the environment

00:09:22,340 --> 00:09:24,880
that we imported from that library.

00:09:24,880 --> 00:09:27,600
And we have our list of things,

00:09:27,600 --> 00:09:29,560
we can look around,

00:09:29,560 --> 00:09:33,300
walk around and maybe find something

00:09:33,300 --> 00:09:35,700
I'm not sure exactly where it is, right...

00:09:35,700 --> 00:09:38,570
Oh, I think we found some...

00:09:38,570 --> 00:09:41,990
Hey, so we found this object

00:09:41,990 --> 00:09:43,550
and when you click on it,

00:09:43,550 --> 00:09:46,410
that sends it back to the starting position

00:09:46,410 --> 00:09:48,770
because you're collecting this.

00:09:48,770 --> 00:09:50,690
So the way that that works

00:09:50,690 --> 00:09:52,740
is in this found item,

00:09:52,740 --> 00:09:54,740
this is that custom attribute

00:09:54,740 --> 00:09:57,130
that we briefly mentioned earlier.

00:09:57,130 --> 00:10:00,970
And whenever you want to make a specific action

00:10:00,970 --> 00:10:03,150
for a VR object,

00:10:03,150 --> 00:10:05,660
this is how you do it in A-Frame.

00:10:05,660 --> 00:10:08,500
So whenever you click on one of the objects

00:10:08,500 --> 00:10:10,230
you're looking for in the game,

00:10:10,230 --> 00:10:13,470
it goes to a specific position

00:10:13,470 --> 00:10:15,850
back at the starting point,

00:10:15,850 --> 00:10:17,033
and that's it.

00:10:18,610 --> 00:10:21,500
So back to the presentation,

00:10:21,500 --> 00:10:25,040
now that you have seen the VR app,

00:10:25,040 --> 00:10:27,910
we'll talk a little bit about machine learning.

00:10:27,910 --> 00:10:32,910
So neural networks are a form of machine learning algorithm

00:10:32,980 --> 00:10:35,403
and they're just used to make predictions.

00:10:36,630 --> 00:10:40,290
So a neural network is made of layers of notes,

00:10:40,290 --> 00:10:42,720
because it's supposed to try to represent

00:10:42,720 --> 00:10:44,660
what the brain is like.

00:10:44,660 --> 00:10:47,960
And basically you give it a set of inputs,

00:10:47,960 --> 00:10:50,410
you assign some weighted values to it

00:10:50,410 --> 00:10:54,200
to highlight the importance of each input.

00:10:54,200 --> 00:10:56,010
And then the neural network

00:10:56,010 --> 00:10:59,040
goes and makes different connections and assumptions

00:10:59,040 --> 00:11:00,413
and gives you an output.

00:11:01,870 --> 00:11:05,260
So you've probably heard of deep learning before

00:11:05,260 --> 00:11:06,640
and all this is,

00:11:06,640 --> 00:11:08,189
is just a neural network

00:11:08,189 --> 00:11:10,580
with multiple nodes.

00:11:10,580 --> 00:11:13,800
So if you have two nodes in your neural network,

00:11:13,800 --> 00:11:15,803
you're doing deep learning already.

00:11:17,490 --> 00:11:20,020
Then a little bit about the library

00:11:20,020 --> 00:11:20,990
that we'll be using,

00:11:20,990 --> 00:11:22,880
which is Brain.js.

00:11:22,880 --> 00:11:25,190
And I'm sure you've heard of TensorFlow,

00:11:25,190 --> 00:11:26,940
but there's a few reasons

00:11:26,940 --> 00:11:30,210
that I chose Brain.js over TensorFlow.

00:11:30,210 --> 00:11:33,360
First, it's a lot easier to use.

00:11:33,360 --> 00:11:35,840
I'm not sure if you looked at their documentation,

00:11:35,840 --> 00:11:39,230
but you have to learn a lot of new terminology

00:11:39,230 --> 00:11:40,480
and a lot of new things

00:11:40,480 --> 00:11:42,330
when you're using TensorFlow,

00:11:42,330 --> 00:11:43,660
where with Brain.js,

00:11:43,660 --> 00:11:46,880
if you know how to work with objects and arrays

00:11:46,880 --> 00:11:48,633
it's really easy to get started.

00:11:50,110 --> 00:11:51,100
Then with Brain,

00:11:51,100 --> 00:11:53,770
you also don't need as much background

00:11:53,770 --> 00:11:55,250
in machine learning.

00:11:55,250 --> 00:11:57,060
As long as you have your data

00:11:57,060 --> 00:12:00,300
and you know which algorithm you want to use,

00:12:00,300 --> 00:12:02,180
you don't have to know about the math

00:12:02,180 --> 00:12:03,950
or anything else behind it,

00:12:03,950 --> 00:12:07,003
you have to know which methods to call.

00:12:08,300 --> 00:12:10,950
And then the tutorials for Brain.js

00:12:10,950 --> 00:12:12,730
are really straight to the point

00:12:12,730 --> 00:12:14,260
and easy to follow.

00:12:14,260 --> 00:12:16,350
So if you go through their tutorials

00:12:16,350 --> 00:12:19,010
you'll find out you have a few,

00:12:19,010 --> 00:12:21,853
really cool useful projects at the end.

00:12:24,050 --> 00:12:27,600
And to get into a machine learning project,

00:12:27,600 --> 00:12:29,870
there are few things you need to do

00:12:29,870 --> 00:12:31,390
when you're choosing features

00:12:31,390 --> 00:12:34,310
or those inputs for each of the nodes.

00:12:34,310 --> 00:12:35,410
You have to ask,

00:12:35,410 --> 00:12:38,840
what will add the most value for a user?

00:12:38,840 --> 00:12:40,460
So that means,

00:12:40,460 --> 00:12:43,900
is it something that's gonna make their experience better,

00:12:43,900 --> 00:12:45,590
or is it something missing

00:12:45,590 --> 00:12:47,770
that they've been asking for?

00:12:47,770 --> 00:12:49,120
You just wanna make sure

00:12:49,120 --> 00:12:51,860
that whatever features you choose

00:12:51,860 --> 00:12:54,380
are going to lead to a prediction

00:12:54,380 --> 00:12:56,653
that adds value for the user.

00:12:58,300 --> 00:12:59,240
And then ask,

00:12:59,240 --> 00:13:02,570
how do you get the information you need from a user?

00:13:02,570 --> 00:13:04,870
Do you ask them for it?

00:13:04,870 --> 00:13:07,330
Do you have them fill out surveys?

00:13:07,330 --> 00:13:09,540
Do you data mine them,

00:13:09,540 --> 00:13:12,240
while they're using their web browser?

00:13:12,240 --> 00:13:15,090
How are you gonna get the information you need

00:13:15,090 --> 00:13:17,493
to get those features?

00:13:19,350 --> 00:13:21,570
And then this is a really important question

00:13:21,570 --> 00:13:23,540
you should ask in the beginning:

00:13:23,540 --> 00:13:25,130
What are you trying to predict

00:13:25,130 --> 00:13:28,480
with all of the information you get from a user?

00:13:28,480 --> 00:13:29,700
So that's the point

00:13:29,700 --> 00:13:31,210
of the machine learning problem,

00:13:31,210 --> 00:13:33,120
is you're trying to make a prediction

00:13:33,120 --> 00:13:35,323
based on previous information.

00:13:36,400 --> 00:13:39,840
And then one that we probably run into a lot

00:13:39,840 --> 00:13:43,190
with just JavaScript and web apps in general,

00:13:43,190 --> 00:13:45,970
is will the user actually care

00:13:45,970 --> 00:13:48,690
if we make this kind of update.

00:13:48,690 --> 00:13:50,120
That kind of goes back to

00:13:50,120 --> 00:13:52,870
what adds the most value for a user

00:13:52,870 --> 00:13:56,380
because even if it does add value,

00:13:56,380 --> 00:13:58,170
if they don't care,

00:13:58,170 --> 00:14:01,764
then you might want to consider if it's worth

00:14:01,764 --> 00:14:03,830
all of the work and effort

00:14:03,830 --> 00:14:07,330
to build this model to make predictions for that.

00:14:07,330 --> 00:14:10,670
So make sure that any changes you make

00:14:10,670 --> 00:14:13,200
or any predictions you're trying to make

00:14:13,200 --> 00:14:15,880
are things that a user will care about

00:14:15,880 --> 00:14:17,083
when you apply them.

00:14:18,910 --> 00:14:21,240
Now we get to go back to the fun part

00:14:21,240 --> 00:14:23,060
and do some more coding

00:14:23,060 --> 00:14:25,543
and we'll add machine learning to this app.

00:14:28,030 --> 00:14:31,420
So back in the HTML file,

00:14:31,420 --> 00:14:33,390
I wanted show you

00:14:33,390 --> 00:14:38,010
a property on one of these objects called cursor listen.

00:14:38,010 --> 00:14:41,880
So whenever we find this box,

00:14:41,880 --> 00:14:45,530
this function will get triggered.

00:14:45,530 --> 00:14:50,530
So cursor listener basically just,

00:14:51,070 --> 00:14:54,100
cause a function on the backend

00:14:54,100 --> 00:14:57,520
to get a new predicted position

00:14:57,520 --> 00:15:01,100
for all of the remaining objects.

00:15:01,100 --> 00:15:03,173
And what's happening here,

00:15:04,420 --> 00:15:07,920
is that it imports this user model

00:15:07,920 --> 00:15:11,120
and when it gets called,

00:15:11,120 --> 00:15:14,090
it goes to this backend API

00:15:14,090 --> 00:15:17,430
and it sends back the users X, Y

00:15:17,430 --> 00:15:18,960
and Z position,

00:15:18,960 --> 00:15:20,500
how many steps they've taken

00:15:20,500 --> 00:15:23,450
and whether they found an item or not.

00:15:23,450 --> 00:15:25,430
And what that does for us

00:15:25,430 --> 00:15:26,640
is on the backend,

00:15:26,640 --> 00:15:28,640
we get to make our machine learning app.

00:15:29,510 --> 00:15:32,530
So if you're familiar with node.js at all,

00:15:32,530 --> 00:15:35,150
this is just an express app.

00:15:35,150 --> 00:15:38,680
So we import all of our libraries and packages,

00:15:38,680 --> 00:15:40,450
we set up an express app

00:15:40,450 --> 00:15:43,760
and do some regular use stuff.

00:15:43,760 --> 00:15:44,593
But down here,

00:15:44,593 --> 00:15:46,870
is where we get into the machine learning.

00:15:46,870 --> 00:15:50,780
So this is our initial training data.

00:15:50,780 --> 00:15:52,880
And basically these are values

00:15:52,880 --> 00:15:56,345
that we've gotten from users over time.

00:15:56,345 --> 00:16:01,190
Like this is their current position right here,

00:16:01,190 --> 00:16:04,200
and whether they found the item or not

00:16:04,200 --> 00:16:05,880
which would be the box

00:16:05,880 --> 00:16:09,350
and how many steps they've taken in the game so far.

00:16:09,350 --> 00:16:10,300
So as you see,

00:16:10,300 --> 00:16:12,450
this is just an array of objects

00:16:12,450 --> 00:16:13,770
for our data,

00:16:13,770 --> 00:16:14,603
that's all.

00:16:15,610 --> 00:16:20,390
Then we have to have our initial training data output.

00:16:20,390 --> 00:16:23,200
So based on these inputs,

00:16:23,200 --> 00:16:24,770
we're trying to predict

00:16:24,770 --> 00:16:28,170
how likely a person is to finish the game.

00:16:28,170 --> 00:16:32,280
And, usually when they've taken more steps,

00:16:32,280 --> 00:16:34,160
they haven't found an item

00:16:34,160 --> 00:16:37,760
and they're really far away from the initial position.

00:16:37,760 --> 00:16:39,830
They have a lower likelihood

00:16:39,830 --> 00:16:41,163
of finishing the game,

00:16:42,270 --> 00:16:45,880
which you can see with this array of objects.

00:16:45,880 --> 00:16:48,330
So when we have our initial input data,

00:16:48,330 --> 00:16:50,430
we have our initial output data.

00:16:50,430 --> 00:16:52,120
So we put them together

00:16:52,120 --> 00:16:54,680
into a single object

00:16:54,680 --> 00:16:57,820
that we'll use in the Brain.js library.

00:16:57,820 --> 00:16:59,330
So this training set

00:16:59,330 --> 00:17:02,260
is just a combination of our input

00:17:02,260 --> 00:17:04,173
and output arrays.

00:17:05,940 --> 00:17:07,859
Now that we have all the training data

00:17:07,859 --> 00:17:10,259
this is probably one of the best parts,

00:17:10,260 --> 00:17:12,069
is building the model.

00:17:12,069 --> 00:17:17,069
So with Brain.js is super easy to build a Neural Network.

00:17:17,760 --> 00:17:18,849
This is it,

00:17:18,849 --> 00:17:20,529
this is the one line of code

00:17:20,530 --> 00:17:25,130
that it takes to make a Neural Network in practice.

00:17:25,130 --> 00:17:26,819
And all this is,

00:17:26,819 --> 00:17:29,300
it just has three hidden layers,

00:17:29,300 --> 00:17:33,330
which is how you add a little bit more complexity

00:17:33,330 --> 00:17:34,710
to some of the connections

00:17:34,710 --> 00:17:36,170
that the Neural Network makes,

00:17:36,170 --> 00:17:38,830
as it's trying to get a prediction

00:17:38,830 --> 00:17:41,480
based off of the features you chose.

00:17:41,480 --> 00:17:44,530
So we have our model here,

00:17:44,530 --> 00:17:47,120
and then this is definitely the best part.

00:17:47,120 --> 00:17:50,340
You get to train the model with the data that you have,

00:17:50,340 --> 00:17:53,330
and all it takes is one method call.

00:17:53,330 --> 00:17:56,240
So we've made the model up here

00:17:56,240 --> 00:17:57,430
and you train it

00:17:57,430 --> 00:17:59,720
just by calling the train method

00:17:59,720 --> 00:18:02,570
and passing it the training data set,

00:18:02,570 --> 00:18:03,403
that's all.

00:18:03,403 --> 00:18:07,900
We have trained a neural network to make predictions

00:18:07,900 --> 00:18:10,900
about whether a user will finish the game or not

00:18:10,900 --> 00:18:14,040
based on how they've been moving around so far.

00:18:15,210 --> 00:18:18,330
So all we've done here is,

00:18:18,330 --> 00:18:21,600
when Brain.js runs the train method,

00:18:21,600 --> 00:18:24,180
it collects statistics around

00:18:24,180 --> 00:18:27,400
how many iterations it took to get the final value

00:18:27,400 --> 00:18:32,400
and how the error rate decreases with those iterations.

00:18:32,467 --> 00:18:34,970
And then we just do a quick run

00:18:34,970 --> 00:18:37,400
to see if the model works,

00:18:37,400 --> 00:18:38,580
that's all this is here.

00:18:38,580 --> 00:18:40,020
So we trained it,

00:18:40,020 --> 00:18:41,790
we got our statistics

00:18:41,790 --> 00:18:43,970
on how well the model trained

00:18:43,970 --> 00:18:45,780
and then we tested it.

00:18:45,780 --> 00:18:47,630
So now we know that this model

00:18:47,630 --> 00:18:50,603
is ready for user play.

00:18:51,680 --> 00:18:55,890
So we've set up just a simple backend API

00:18:55,890 --> 00:19:00,400
and all it does is get the data from the user,

00:19:00,400 --> 00:19:01,770
which if you remember

00:19:01,770 --> 00:19:03,630
that happens right here.

00:19:03,630 --> 00:19:07,100
So we just get the position of the objects

00:19:07,100 --> 00:19:12,100
and then we take the position of everything

00:19:12,290 --> 00:19:13,520
and move it around

00:19:13,520 --> 00:19:15,100
based on the likelihood

00:19:15,100 --> 00:19:17,660
of a user to finish the game or not.

00:19:17,660 --> 00:19:21,620
So if the user is more likely to finish the game,

00:19:21,620 --> 00:19:24,410
we'll move the objects further away

00:19:24,410 --> 00:19:26,420
to keep them playing longer.

00:19:26,420 --> 00:19:29,370
And if they're less likely to finish the game,

00:19:29,370 --> 00:19:31,710
we try to move the objects closer to them

00:19:31,710 --> 00:19:33,270
so they'll find one

00:19:33,270 --> 00:19:35,163
and keep playing and finish it.

00:19:36,560 --> 00:19:39,210
Then at the very end of this call,

00:19:39,210 --> 00:19:42,660
we just send the new position back

00:19:42,660 --> 00:19:47,300
to the items that are still on the playing field

00:19:47,300 --> 00:19:50,193
and they'll move around accordingly.

00:19:51,700 --> 00:19:54,250
And that's all for the machine learning part.

00:19:54,250 --> 00:19:57,010
So hopefully you see that machine learning

00:19:57,010 --> 00:19:59,020
doesn't have to be really hard

00:19:59,020 --> 00:20:00,640
or really complicated.

00:20:00,640 --> 00:20:03,240
It just depends on what you're trying to do

00:20:03,240 --> 00:20:05,723
and which libraries you need to use.

00:20:10,720 --> 00:20:13,680
So now that you've seen the VR App in action

00:20:13,680 --> 00:20:16,770
and you've seen how machine learning integration works,

00:20:16,770 --> 00:20:19,540
there's a few other considerations.

00:20:19,540 --> 00:20:23,560
First off, is the overall user experience.

00:20:23,560 --> 00:20:26,950
Everything you design for a virtual reality world

00:20:26,950 --> 00:20:29,600
should have the user experience in mind

00:20:29,770 --> 00:20:31,780
because they're being submersed

00:20:31,780 --> 00:20:34,240
in a completely different environment.

00:20:34,240 --> 00:20:36,370
You don't want them to feel lost

00:20:36,370 --> 00:20:38,250
or like they don't know what they're doing,

00:20:38,250 --> 00:20:41,493
because then they'll abandon your app completely.

00:20:43,200 --> 00:20:44,520
And another thing,

00:20:44,520 --> 00:20:49,520
is that you want to make sure you're using data ethically,

00:20:49,690 --> 00:20:53,260
especially when it comes to machine learning projects.

00:20:53,260 --> 00:20:56,760
You don't want to take people's personal data

00:20:56,760 --> 00:21:00,480
and do just unethical things with them,

00:21:00,480 --> 00:21:01,810
like sell it

00:21:01,810 --> 00:21:04,260
or use it to try to manipulate them

00:21:04,260 --> 00:21:05,850
into buying things.

00:21:05,850 --> 00:21:09,810
So make sure that all of the data you collect for users

00:21:09,810 --> 00:21:11,973
is being used ethically.

00:21:13,650 --> 00:21:15,360
And then this is a question

00:21:15,360 --> 00:21:17,920
that comes up a lot in machine learning is,

00:21:17,920 --> 00:21:20,160
what's the best algorithm.

00:21:20,160 --> 00:21:24,250
Well, there really isn't a best algorithm overall.

00:21:24,250 --> 00:21:26,760
It depends on your application.

00:21:26,760 --> 00:21:28,400
So for example,

00:21:28,400 --> 00:21:29,233
with this,

00:21:29,233 --> 00:21:31,610
we were just trying to predict whether

00:21:31,610 --> 00:21:33,950
a user will finish a game or not.

00:21:33,950 --> 00:21:36,910
That could have been done with something like

00:21:36,910 --> 00:21:40,960
a multivariate regression algorithm

00:21:40,960 --> 00:21:44,270
or any number of other algorithms.

00:21:44,270 --> 00:21:48,400
It's just what feels better for your data,

00:21:48,400 --> 00:21:50,670
what gives you faster results

00:21:50,670 --> 00:21:53,390
and what gives you the most accurate results.

00:21:53,390 --> 00:21:55,610
Those are the metrics you should use

00:21:55,610 --> 00:21:58,410
when you're trying to pick a machine learning algorithm.

00:21:59,800 --> 00:22:03,560
And then as much as I love JavaScript and Brain.js,

00:22:03,560 --> 00:22:06,850
when you get into the bigger machine learning problems

00:22:06,850 --> 00:22:09,740
you'll definitely want to switch to Python,

00:22:09,740 --> 00:22:13,300
just because they have a lot of different libraries

00:22:13,300 --> 00:22:16,540
for things like natural language processing

00:22:16,540 --> 00:22:19,360
and image processing

00:22:19,360 --> 00:22:23,450
and just all of the bigger machine learning problems.

00:22:23,450 --> 00:22:28,450
So if you want to do work with millions of data points,

00:22:28,450 --> 00:22:31,410
Python is probably gonna handle it better

00:22:31,410 --> 00:22:32,593
than JavaScript will.

00:22:34,701 --> 00:22:39,030
And so, we wanna wrap up with some key takeaways.

00:22:39,030 --> 00:22:40,170
It's really important

00:22:40,170 --> 00:22:43,720
that you try to combine multiple areas of tech.

00:22:43,720 --> 00:22:45,880
This is where you get to have fun

00:22:45,880 --> 00:22:46,980
and be creative

00:22:46,980 --> 00:22:48,590
and make new things

00:22:48,590 --> 00:22:50,760
that nobody's ever seen before.

00:22:50,760 --> 00:22:55,480
So don't be afraid to combine multiple areas of tech

00:22:55,480 --> 00:22:57,170
that sound difficult,

00:22:57,170 --> 00:22:59,733
because that might not be as hard as you think.

00:23:01,620 --> 00:23:02,740
And then always,

00:23:02,740 --> 00:23:06,810
always remember the ethics surrounding data

00:23:06,810 --> 00:23:10,130
is so important that we keep our data secure

00:23:10,130 --> 00:23:13,800
and that we make sure nobody's using it inappropriately

00:23:13,800 --> 00:23:16,280
because I'm sure you've heard in the news

00:23:16,280 --> 00:23:17,850
about data breaches

00:23:17,850 --> 00:23:21,180
or people using personal information

00:23:21,180 --> 00:23:25,290
to open credit cards or buy things.

00:23:25,290 --> 00:23:27,150
So you really want to make sure

00:23:27,150 --> 00:23:30,710
that all of your data is always secure

00:23:30,710 --> 00:23:32,803
and being used ethically.

00:23:34,810 --> 00:23:37,140
And of course just try new things.

00:23:37,140 --> 00:23:39,700
It's okay if you don't understand it at first,

00:23:39,700 --> 00:23:41,810
or if it doesn't make much sense,

00:23:41,810 --> 00:23:44,590
but the point is to just try it.

00:23:44,590 --> 00:23:47,670
With JavaScript we can do basically anything

00:23:47,670 --> 00:23:51,370
from web apps to robots to machine learning.

00:23:51,370 --> 00:23:54,010
So don't be afraid to take your skills

00:23:54,010 --> 00:23:55,593
and just try new things.

00:23:57,770 --> 00:23:59,730
And try to learn something

00:23:59,730 --> 00:24:01,360
that you're interested in

00:24:01,360 --> 00:24:03,830
and it solves a problem you have.

00:24:03,830 --> 00:24:06,080
So with this VR game that I made,

00:24:06,080 --> 00:24:08,820
I wanted a really easy game to play,

00:24:08,820 --> 00:24:11,030
but not too easy.

00:24:11,030 --> 00:24:13,050
So the machine learning really adds

00:24:13,050 --> 00:24:14,910
that extra layer of complexity

00:24:14,910 --> 00:24:17,370
that I was personally looking for.

00:24:17,370 --> 00:24:20,450
And when you start to combine your interests

00:24:20,450 --> 00:24:22,190
with some of your problems,

00:24:22,190 --> 00:24:23,850
you get to make really,

00:24:23,850 --> 00:24:25,710
really cool products.

00:24:25,710 --> 00:24:27,090
And of course it's better

00:24:27,090 --> 00:24:29,513
because everything is in JavaScript.

00:24:31,030 --> 00:24:34,130
So this is all I have to share with you today.

00:24:34,130 --> 00:24:36,220
I really, really hope that you liked it

00:24:36,220 --> 00:24:37,750
and you learned something.

00:24:37,750 --> 00:24:39,260
And if you have any questions

00:24:39,260 --> 00:24:42,090
or you're interested in more of the things I'm doing,

00:24:42,090 --> 00:24:44,503
remember to follow me on Twitter @Flippedcoding.

00:24:45,600 --> 00:24:47,453

YouTube URL: https://www.youtube.com/watch?v=qgBFdVIRTu4


