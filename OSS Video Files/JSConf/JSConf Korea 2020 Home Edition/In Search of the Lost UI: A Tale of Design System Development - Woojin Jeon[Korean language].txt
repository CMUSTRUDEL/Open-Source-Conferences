Title: In Search of the Lost UI: A Tale of Design System Development - Woojin Jeon[Korean language]
Publication date: 2020-10-24
Playlist: JSConf Korea 2020 Home Edition
Description: 
	When we code, we value efficiency. We try to reuse the code, keep it concise, and be as clear as possible so our teammates have little trouble understanding it.

But as the system grows and new teammates join, our codes begin to evolve in a different way than intended. The same UI components end up having different functions, or the same functions end up having different UIs, or we end up with redundant implementations of UI components and functions.

In this talk, I will share my experience of unifying such fragmented UI/UX components by building a design system for Kakao Integrated Search.
Captions: 
	00:00:13,660 --> 00:00:19,470
Hello, I'm Jeon Woo-jin and I'm a front-end developer for Kakao's AI Search team.

00:00:19,900 --> 00:00:25,740
Today, I'm going to talk about design systems , under the title 'In Search of the Lost Ui.'

00:00:27,820 --> 00:00:34,550
First of all, I'll talk about the problems that arise as the system grows as we develop it,

00:00:34,840 --> 00:00:37,440
with Daum Search as an example.

00:00:37,890 --> 00:00:42,980
Next, we'll look at the cause of the problem and find out what we've done to solve it,

00:00:42,980 --> 00:00:45,650
which was our design system project.

00:00:46,410 --> 00:00:51,190
And lastly, I'll finish by sharing some of the

00:00:51,190 --> 00:00:53,980
issues I encountered along the way.

00:00:56,720 --> 00:01:02,350
Reuseability. Developers have probably heard this word a lot.

00:01:03,350 --> 00:01:07,800
When we developers, when we code, when we develop something

00:01:07,800 --> 00:01:11,930
we want to design and develop so that it can be reused elsewhere.

00:01:13,250 --> 00:01:19,550
If you think about reusability, it's a common goal for all developers

00:01:20,050 --> 00:01:23,520
to create an environment that can produce something efficiently

00:01:23,950 --> 00:01:27,860
by saving time and effort in repetitive tasks.

00:01:29,970 --> 00:01:34,410
In order to actually implement this reuse, we generally,

00:01:34,970 --> 00:01:39,640
We divide frequently used things into components

00:01:39,820 --> 00:01:42,890
and manage them together.

00:01:43,510 --> 00:01:48,630
Now, if you manage it like that, you'll be able to see the pages on which this component is used

00:01:49,030 --> 00:01:53,260
in just one source file, and modify its function as a whole.

00:01:53,720 --> 00:02:00,910
And when the same functionality is added to the new page, you can just take it and use it without any further development.

00:02:01,110 --> 00:02:03,850
That's how we save a lot of time.

00:02:05,990 --> 00:02:08,480
But on the other hand, there are some disadvantages.

00:02:08,670 --> 00:02:14,900
As the systems we've develop get bigger and bigger, the common components that we've created become

00:02:14,900 --> 00:02:20,960
dependent on multiple pages, and it'll be more difficult to manage.

00:02:21,670 --> 00:02:28,000
For example, if the markup is changed and a functional error occurs on all pages applied,

00:02:28,570 --> 00:02:35,220
When you modify a script or work on something similar, you often get errors when handling exceptions.

00:02:36,350 --> 00:02:40,130
In Daum Search which my team runs,

00:02:40,540 --> 00:02:44,930
as the system continues to grow, some issues have arisen.

00:02:45,580 --> 00:02:49,590
Using an example from our company, I will explain how systems grew and

00:02:49,710 --> 00:02:52,700
what types of problems occurred.

00:02:55,520 --> 00:03:00,760
The main search function is an amalgamation of various search services, represented in a single UI.

00:03:01,330 --> 00:03:05,580
On the screen you see, there's a search service called "Site"

00:03:06,090 --> 00:03:10,730
and the 'Company Information' search service are combined to form this UI.

00:03:12,610 --> 00:03:18,310
And these individual search services have no dependencies with other search services.

00:03:18,680 --> 00:03:22,020
It's operating a independently, similarly to MSA.

00:03:22,740 --> 00:03:29,250
And there are separate things, markups, js, and css related to each search service.

00:03:29,600 --> 00:03:37,090
The team's planners, designers, and developers are assigned separately to carry out the development.

00:03:39,810 --> 00:03:41,850
Now there are a lot of these search services.

00:03:42,050 --> 00:03:46,960
There are so many services that it's hard to manage.

00:03:47,340 --> 00:03:54,130
And as we continue to add topics of interest, this dependency continues to grow.

00:03:56,560 --> 00:03:59,980
As for Daum Search, it used to run as a portal

00:03:59,980 --> 00:04:03,730
and now, only on the Web, but over time,

00:04:04,690 --> 00:04:10,980
we've added Hashtag Search, which is a search function inside KakaoTalk chats.

00:04:13,810 --> 00:04:17,130
And the third #tag on Kakao Talk,

00:04:17,620 --> 00:04:21,020
if you search here, we've added these search methods.

00:04:22,650 --> 00:04:24,840
And lastly, Nate.

00:04:24,840 --> 00:04:27,500
Nate also internally uses Daum Search.

00:04:27,500 --> 00:04:32,740
With the addition of Nate, more and more platforms are using our search.

00:04:34,960 --> 00:04:41,940
As the number of search systems continues to increase, and there are more ways to search,

00:04:42,080 --> 00:04:43,770
some problems start to occur.

00:04:45,400 --> 00:04:49,990
There was a common guideline, but it wasn't kept to date or managed,

00:04:50,240 --> 00:04:54,270
and because the system didn't provide any management methods,

00:04:55,440 --> 00:04:58,440
firstly, there were problems with adding, changing, and deleting things.

00:04:58,440 --> 00:05:04,780
And also it was difficult to work in collaboration

00:05:05,280 --> 00:05:08,210
when we have to develop something new, or want to upgrade.

00:05:08,650 --> 00:05:11,560
Let's look at some of the problems.

00:05:14,810 --> 00:05:17,880
First, the problem is when something is added.

00:05:17,880 --> 00:05:20,070
When you want to add a new service,

00:05:20,820 --> 00:05:24,330
The new service includes a function called Tooltip.

00:05:24,850 --> 00:05:28,990
But now that we're looking at what the existing services are using,

00:05:29,570 --> 00:05:32,500
The tooltips used in each service have different markups.

00:05:33,680 --> 00:05:40,010
Well, in this situation, it is correct .

00:05:40,010 --> 00:05:42,680
But, there are problems that you can't easily judge.

00:05:44,570 --> 00:05:46,740
Next is the issue of when we change the service.

00:05:47,110 --> 00:05:49,440
Well, for example, we're reorganizing our services.

00:05:49,750 --> 00:05:54,670
The circle thumbnail you see? If I change this, will it cause problems in other services,

00:05:55,400 --> 00:05:59,160
or will the overall UX break somewhere,

00:05:59,310 --> 00:06:02,810
so these types of dependency problems could occur.

00:06:05,100 --> 00:06:08,630
Now if I'm trying to shut down a service,

00:06:08,920 --> 00:06:13,570
I'm trying to remove the code for ThumbList, like you see here

00:06:14,090 --> 00:06:16,620
But I'd have to check if it's been used somewhere else

00:06:17,200 --> 00:06:22,680
and I'd have to rely on someone's memory to know, which is a problem.

00:06:25,010 --> 00:06:28,180
Next is the issue of collaboration.

00:06:28,530 --> 00:06:34,460
I'm planning to combine some of the UI's that I like from certain services

00:06:34,460 --> 00:06:37,330
I want to prototype this and actually see the result.

00:06:37,930 --> 00:06:41,570
In this case, there's a situation where I have to ask the designer

00:06:41,800 --> 00:06:44,310
and the schedule might get delayed

00:06:47,020 --> 00:06:50,160
And lastly, there could be a terminology issue.

00:06:50,310 --> 00:06:53,880
As you can see in horizontal component sliders,

00:06:54,150 --> 00:06:56,910
Well, some people call it Carousel.

00:06:56,910 --> 00:07:01,050
Some might call it a Swiper, or Flicking.

00:07:01,460 --> 00:07:04,860
There are components with lots of names

00:07:05,380 --> 00:07:11,590
If the terms don't get unified, there can be miscommunication

00:07:12,190 --> 00:07:16,670
or misunderstanding, and delay things

00:07:16,670 --> 00:07:22,730
Or some other problems with miscommunication

00:07:24,870 --> 00:07:30,240
Well, I'm trying to figure out what's the root cause of this problem.

00:07:30,240 --> 00:07:35,330
We're going to use that 5 WHYS technique to find the cause of this problem.

00:07:37,040 --> 00:07:39,470
This 5 WHYS technique is...

00:07:39,950 --> 00:07:47,000
I'll give you a brief explanation. It's a method in which I repeatedly ask 'why?'

00:07:47,000 --> 00:07:50,230
to get closer to the root of the problem.

00:07:52,800 --> 00:07:59,480
Now as a little break, let's take a look at some of the examples of this method

00:07:59,770 --> 00:08:06,430
The most famous example is how the Jefferson Memorial in the U.S. solved the problem of building corrosion.

00:08:07,650 --> 00:08:11,000
In this memorial, the building was corroding unusually fast

00:08:11,140 --> 00:08:15,100
Let's take a look at the steps they took to solve it.

00:08:17,160 --> 00:08:21,030
The starting point is: "the building has severe corrosion"

00:08:21,160 --> 00:08:24,820
So they asked, "Why is the building so corroded?"

00:08:25,080 --> 00:08:28,530
Turns out it was because the building was being cleaned frequently.

00:08:28,870 --> 00:08:33,270
Then again, "Why did we clean the building so often?"

00:08:33,610 --> 00:08:36,320
It's because there was a lot of pigeon droppings.

00:08:36,940 --> 00:08:42,030
Then they asked, "Why are there so many pigeon droppings?"

00:08:42,380 --> 00:08:46,800
Because there were plenty of food for the pigeons like spiders around.

00:08:47,430 --> 00:08:49,860
And they thought about why there were so many spiders.

00:08:49,970 --> 00:08:54,970
They find that there are many moths around, that spiders eat.

00:08:55,970 --> 00:09:00,640
And then finally, why are there so many moths there?

00:09:01,000 --> 00:09:04,480
It was because the lights were turned on a little earlier than the surroundings.

00:09:05,140 --> 00:09:12,720
So the solution they found was 'to turn on the lights later.'

00:09:14,700 --> 00:09:17,550
I'll apply this to our project.

00:09:17,890 --> 00:09:23,390
Our problem starts with the fact that it's hard to add, change, or delete UI.

00:09:24,090 --> 00:09:27,370
So I thought, "Why is it so hard?"

00:09:27,950 --> 00:09:32,490
There was a problem, but I couldn't figure out which service was using the problematic part

00:09:33,510 --> 00:09:35,540
And I asked, "Why?"

00:09:36,030 --> 00:09:41,540
It turned out that the planning and development of each service was slightly different from the guide.

00:09:42,200 --> 00:09:46,810
"Why did they go differently than the guide?," I thought,

00:09:48,170 --> 00:09:51,960
Turns out the component's common guide was not being managed.

00:09:52,220 --> 00:09:58,790
Of course, we've had a common template guide before, but it hasn't been kept up-to-date or managed.

00:10:00,280 --> 00:10:03,770
"So why was it not managed?"

00:10:04,480 --> 00:10:07,740
Well, there was no system in place to manage it.

00:10:08,840 --> 00:10:11,910
So our conclusion is to manage the components,

00:10:11,910 --> 00:10:15,830
We are working on the project with the goal of building a system that can be recycled.

00:10:18,050 --> 00:10:22,400
Before we proceed with the project, let me motivate you about the direction of the project.

00:10:22,510 --> 00:10:28,400
As I explained earlier, reusing is now a world with limited resources.

00:10:29,040 --> 00:10:34,130
Every industry is probably headed for reuse and efficiency.

00:10:35,450 --> 00:10:39,190
But we're developers who use code to develop.

00:10:39,290 --> 00:10:43,210
So we can do things like reuse and efficiency through code.

00:10:43,970 --> 00:10:48,550
It's a mission that gives people an easy way to collaborate.

00:10:48,960 --> 00:10:51,260
I started a design system project.

00:10:52,220 --> 00:10:54,800
All planning and design development is available.

00:10:55,060 --> 00:11:01,280
Also, to eliminate unnecessary communication, reusable components.

00:11:01,280 --> 00:11:04,880
The project, which started with the idea of 'Let's organize it into a system

00:11:07,120 --> 00:11:10,960
It is a KST project called KAKAO SEARCH TEMPLATE.

00:11:11,760 --> 00:11:15,830
Planning, design, and development worked together on this project.

00:11:15,830 --> 00:11:20,430
After the project, we are continuing to use it together and updating it.

00:11:23,190 --> 00:11:26,550
There were some previous works before the project started.

00:11:26,930 --> 00:11:30,820
First, I organized some of the common ui.

00:11:31,880 --> 00:11:36,240
We've been working on some old-age, old-fashioned UX.

00:11:36,790 --> 00:11:42,600
After that, to recycle the ui, we did some structural work on the ui.

00:11:44,290 --> 00:11:47,890
When you structure ui, refer to the Atomic design.

00:11:48,100 --> 00:11:54,270
We've structured ui from the smallest unit to the page.

00:11:55,390 --> 00:12:02,550
We internally set the rule to manage ui in three units, Brick, Block, Carrier.

00:12:04,200 --> 00:12:10,010
In the case of Brick, you can consider it to be a minimum component, similar to the html tag.

00:12:10,760 --> 00:12:17,100
You can think of Block as a combination of these Brick units.

00:12:17,700 --> 00:12:21,910
And we're going to combine these blocks into a unit called Carrier.

00:12:22,170 --> 00:12:27,250
Now, you can take the Carrier configured ui and put it somewhere else,

00:12:27,420 --> 00:12:31,640
Think of it as a unit that can be reused that has the same function.

00:12:33,070 --> 00:12:36,020
For example, if you look at the tab in the middle,

00:12:37,200 --> 00:12:42,030
Each of these text on the tab. These texts are called Brick.

00:12:42,540 --> 00:12:46,000
And then the bricks come together and they form tabs.

00:12:46,560 --> 00:12:52,270
Content blocks are then created that show content .

00:12:52,830 --> 00:12:58,690
These two blocks come together to create a tab carrier.

00:13:03,140 --> 00:13:06,840
The KST project is divided into four main functions.

00:13:06,840 --> 00:13:11,890
The first is a template guide that lets you update and manage common templates.

00:13:12,430 --> 00:13:16,690
The second is, what services are those templates being used for?

00:13:16,690 --> 00:13:19,660
This is a dashboard that can be logged and searched.

00:13:20,330 --> 00:13:24,960
And the third is the templates that we defined in the template guide.

00:13:24,960 --> 00:13:31,710
A builder that can automatically bring and prototype the original source.

00:13:32,330 --> 00:13:38,110
And lastly, the Markup developers will be able to see the results that they've actually worked on.

00:13:38,690 --> 00:13:41,500
Markup outputs arranged in service units. 각각 서비스 단위로 정리해 놓은 마크업 산출물.

00:13:41,780 --> 00:13:43,920
So we're offering four functions.

00:13:45,330 --> 00:13:48,740
Let's take a look at the template guide one by one.

00:13:51,940 --> 00:13:58,070
As for the template guide, we are providing it through an open source service called Storybook.

00:13:58,460 --> 00:14:02,180
I've prepared a demonstration video to present this.

00:14:02,770 --> 00:14:06,830
Due to the company's internal regulations, there are a lot of mosaic in the video.

00:14:07,210 --> 00:14:09,950
I know it's a little inconvenient, but please excuse me.

00:14:13,170 --> 00:14:18,250
When you enter the Templates menu, the list of templates is now displayed on the left.

00:14:18,250 --> 00:14:24,170
Carrier, Layout, Block, Brick. The components are divided by these categories.

00:14:25,200 --> 00:14:31,290
It's called a Full Case for a component, so you can check the entire use case of a particular component.

00:14:32,510 --> 00:14:38,450
You can check which types are available for each unit of template.

00:14:39,710 --> 00:14:44,770
You can use the Knobs add-on to check out the actual mark-up source of this template.

00:14:45,640 --> 00:14:48,960
You can also do some brief editing here.

00:14:49,560 --> 00:14:54,910
As you can see, we can see how the ui changes when it gets longer.

00:14:55,770 --> 00:15:02,240
Using the note add-on, it connects to the logging dashboard to show you where the current template is being used.

00:15:02,900 --> 00:15:06,340
I'll explain the dashboard in more detail in the back.

00:15:07,430 --> 00:15:14,690
And what you're looking at is how much of the template, the carrier title, is being exposed.

00:15:16,830 --> 00:15:20,840
Let's take a closer look at the logging dashboard you just saw.

00:15:22,470 --> 00:15:27,480
In the case of dashboards, there are three main criteria.

00:15:27,880 --> 00:15:32,420
You can check by service, type of template, and group.

00:15:32,940 --> 00:15:38,740
You can query by search service under specific template types or groups.

00:15:39,450 --> 00:15:45,670
What kind of service is the template type of item list shown on the screen?

00:15:45,680 --> 00:15:54,100
We can see how much this template is being used, and how many times this template is being shown.

00:15:55,480 --> 00:16:01,210
For example, if you change it to a template called the carrier title,

00:16:02,050 --> 00:16:08,730
We'll check which services used the template, how much it were shown, and what queries caused it to be shown.

00:16:08,730 --> 00:16:11,580
It will have the ability to track components.

00:16:14,960 --> 00:16:17,120
The third is a builder.

00:16:17,120 --> 00:16:21,620
In the case of a builder, the templates in the template guide that I described earlier are not available.

00:16:21,960 --> 00:16:26,400
We'll automatically link the data, and now we'll divide it into components.

00:16:26,410 --> 00:16:29,180
Provides the ability to configure and view the screen

00:16:29,930 --> 00:16:32,550
I'm going to give you a little bit more detail about this.

00:16:34,070 --> 00:16:38,610
Builders can be managed in units called projects.

00:16:38,780 --> 00:16:41,930
We have separate mobile and PC templates.

00:16:42,060 --> 00:16:45,030
You can create a project by selecting this when you create it.

00:16:45,890 --> 00:16:53,370
If you look to the left, the components defined in the template guide that I explained before will be displayed according to the category.

00:16:54,500 --> 00:17:01,290
You can drag and drop these components to see the same screen as you actually see.

00:17:02,210 --> 00:17:07,290
And the right side can change which components were used, and change the order.

00:17:07,880 --> 00:17:11,970
Editor mode allows you to actually change the text on the screen or change it.

00:17:12,730 --> 00:17:19,050
You can delete and add to list like tabs, and you can use these to organize the ui.

00:17:20,210 --> 00:17:23,940
You can check how it looks depending on the screen size.

00:17:24,700 --> 00:17:28,800
We now have two functions that we can share for collaboration.

00:17:28,990 --> 00:17:36,800
First, you can export the image and attach it somewhere or share it.

00:17:37,470 --> 00:17:42,220
Create a shared url, share it with designers and developers.

00:17:42,220 --> 00:17:48,090
It provides the ability to see which components have been used.

00:17:51,120 --> 00:17:53,580
The last one is the markup output function.

00:17:54,520 --> 00:18:02,800
This is where the actual markup developers finish their development and organize the final output for use by a service.

00:18:04,840 --> 00:18:08,580
If you go through the PREVIEW menu, what services will you have on the right?

00:18:08,780 --> 00:18:10,860
Now we have categories for the service.

00:18:11,270 --> 00:18:16,780
For example, you can check which types of screens are in the music service.

00:18:18,160 --> 00:18:20,950
It's possible to see how it changes depending on the size of the screen.

00:18:22,670 --> 00:18:25,690
And it's the same thing with a shared url.

00:18:26,610 --> 00:18:33,190
It provides a function that allows developers, planners, and designers to see and collaborate.

00:18:36,700 --> 00:18:40,590
Next, let's look at the KST technology stack.

00:18:40,660 --> 00:18:44,560
It can be largely divided into FE and back-end areas.

00:18:45,230 --> 00:18:51,470
For FE area, we use React & Mobx for now.

00:18:52,300 --> 00:18:58,240
And the ui is composed using the material ui components and the styled components.

00:18:59,190 --> 00:19:04,610
For drag & drop in Builder, we use a component called react-beautiful-dnd.

00:19:04,610 --> 00:19:06,510
Which implements drag & drop.

00:19:07,610 --> 00:19:12,640
And as I said earlier, the template guide was organized using Storybook.

00:19:14,300 --> 00:19:18,490
The app is served using NGNIX.

00:19:18,860 --> 00:19:21,290
And the template guide I mentioned earlier.

00:19:21,290 --> 00:19:27,090
To link the template source to the builder, we used a library called Puppeteer.

00:19:27,090 --> 00:19:29,000
We're working on the layout.

00:19:31,130 --> 00:19:37,640
The api server is operating with node express, and the process management is done with PM2.

00:19:38,710 --> 00:19:44,910
And it was developed with TypeScript, and authentication is using the passport library.

00:19:46,030 --> 00:19:51,410
In cases like db, we use mysql and we use Sequelize ORM.

00:19:52,700 --> 00:19:59,050
And for the logging dashboard you saw earlier, we're using a system that our company provides.

00:19:59,460 --> 00:20:02,100
This uses the ELK STACK.

00:20:03,420 --> 00:20:06,910
Well, if you look, it's not that different from other projects.

00:20:07,220 --> 00:20:12,580
The special part is

00:20:14,080 --> 00:20:18,550
It's a part that links template data using storybook and Puppeteer.

00:20:18,870 --> 00:20:21,460
The brief explanation is.

00:20:23,100 --> 00:20:26,410
The first is client api.

00:20:26,520 --> 00:20:33,370
If the storybook passes certain id query parameters to the iframe,

00:20:33,370 --> 00:20:39,440
We provide console api to crawl data related to storybooks.

00:20:39,870 --> 00:20:43,960
So I'm going to use a raw method or getStorybook method.

00:20:44,560 --> 00:20:49,010
The actual registered data in the storybook can be imported from the console.

00:20:50,980 --> 00:20:55,910
And to bring this data, we're using a tool called Puppeteer.

00:20:57,320 --> 00:21:06,230
Puppeteer is something that uses a chrome headless browser to access a specific page or perform actions on a specific page.

00:21:06,380 --> 00:21:10,060
It's a library that allows you to control those behaviors with code.

00:21:10,700 --> 00:21:13,920
It's mainly used for automation and crawling.

00:21:14,450 --> 00:21:18,780
The KST project is designed to create a client api in the storybook you saw earlier.

00:21:19,020 --> 00:21:27,020
Now, we're using it for poking, parsing, and looking through Puppeter.

00:21:28,250 --> 00:21:32,790
If you look at this in more detail through the server structure,

00:21:34,560 --> 00:21:39,240
Once all template sources are managed in a repository called components.

00:21:39,310 --> 00:21:42,900
We have markup developers in different organizations,

00:21:43,250 --> 00:21:46,990
The push the source for the template into the component repository.

00:21:47,420 --> 00:21:51,960
We have component repository as sub-module in our builder repository.

00:21:53,440 --> 00:21:59,280
So we're now organizing storybooks with template sources referenced in the Builder repository.

00:22:00,730 --> 00:22:06,560
Now we have access to the storybook with the original data of the template through Puppeteer.

00:22:06,740 --> 00:22:09,610
JSON data will be forwarded to the builder.

00:22:10,050 --> 00:22:16,720
The builder then builds a React component that allows you to drag and drop based on that data.

00:22:18,640 --> 00:22:22,780
The api server is pretty much the same as the normal configuration.

00:22:22,920 --> 00:22:31,530
The process is managed by node express and PM2, and we use mysql, sequelize.

00:22:34,370 --> 00:22:37,560
So far, I've explained the project about KST.

00:22:37,560 --> 00:22:41,270
So, using this design system,

00:22:41,270 --> 00:22:44,700
Let's take a look at how the problems are solved.

00:22:46,680 --> 00:22:52,230
I want to use the first problem, Tooltip, but I don't know which is the latest version.

00:22:52,750 --> 00:22:57,980
If you don't know which one is the correct guide, use the template guide.

00:22:59,160 --> 00:23:08,160
Search for tooltips and see what type of tooltip are available.

00:23:10,310 --> 00:23:15,250
You can choose the appropriate template and just use it.

00:23:18,060 --> 00:23:26,660
And the second question was whether there was any issue with the revision of that circle thumbnail during the music service reorganization.

00:23:26,940 --> 00:23:28,650
Let's try and figure this out.

00:23:30,580 --> 00:23:36,470
Let's see what kind of template that list is using.

00:23:37,030 --> 00:23:42,130
It is an ItemList music type and lets verify with the template guide.

00:23:44,280 --> 00:23:50,430
Check this out in the guide and see what service this template is actually using.

00:23:50,660 --> 00:23:54,280
You can check through the logging dashboard.

00:23:57,550 --> 00:24:02,850
You can't really see it well, but I think I'm using it in about six different places.

00:24:02,850 --> 00:24:10,860
So I think we can talk to the planners and developers of the search services that are in charge of this and make changes.

00:24:13,070 --> 00:24:17,080
Oh, and the festival that was the third problem.

00:24:17,610 --> 00:24:23,300
I'm trying to terminate this festival service, can I delete ThumbList?

00:24:27,770 --> 00:24:31,410
Check ThumbList in the template guide.

00:24:36,720 --> 00:24:44,730
Also, check the services that is using it through the logging dashboard

00:24:44,730 --> 00:24:51,770
Since there is no data right now, this one is not being used and I think I can delete it now.

00:24:54,790 --> 00:25:01,820
And the need to make a preview of a particular service with ui, which was a communication issue.

00:25:02,690 --> 00:25:08,290
Now, we can actually construct the screen through the builder without needing the designer.

00:25:10,040 --> 00:25:14,630
Put an image or edit text and implement similarly

00:25:15,050 --> 00:25:17,940
See what happens when the size changes

00:25:18,480 --> 00:25:30,380
You can export it as an image, or you can preview it to show the planner or developer

00:25:30,550 --> 00:25:35,970
designers can share this with each other, communicate which templates are used.

00:25:36,400 --> 00:25:38,870
I think we can save time if we collaborate.

00:25:41,400 --> 00:25:48,160
Finally, to find the name of this slide component is to see what component you're using.

00:25:48,880 --> 00:25:53,590
We're using the name CarouselList now. You can see that.

00:25:53,590 --> 00:26:00,200
Now, I think we can reduce the confusion by using this name when we communicating.

00:26:02,550 --> 00:26:08,010
Now, as you can see, it's important to solve the problem through the design system.

00:26:08,520 --> 00:26:15,320
How to maintain components using the newly developed design system is also critical.

00:26:16,390 --> 00:26:21,050
We've added a logical organization called the Search ui Council internally.

00:26:22,030 --> 00:26:26,840
Using the design system and this organization, we'll be able to create new workflows and work with them.

00:26:26,840 --> 00:26:29,250
I am continuously managing these things.

00:26:29,990 --> 00:26:32,540
Let me give you a brief overview of the workflow.

00:26:33,720 --> 00:26:40,540
The planner will now see if the templates of the service he wants to construct are in the design system called the KST.

00:26:41,410 --> 00:26:44,860
See if it's managed as a template here.

00:26:45,020 --> 00:26:48,010
If you say, "All the templates exist,"

00:26:48,650 --> 00:26:52,510
I'll plan the screen through the builder you saw earlier.

00:26:53,100 --> 00:26:55,760
We'll share these with the developers.

00:26:56,520 --> 00:27:01,110
It will be a flow that will lead to development and the service starting.

00:27:02,960 --> 00:27:10,280
Conversely, if the template for the service that the planner wants to construct does not exist in this design system,

00:27:10,870 --> 00:27:17,220
You will post an agenda for adding templates to the Search ui Council.

00:27:17,830 --> 00:27:23,110
So whether the search ui council will add to this or change the existing one.

00:27:23,110 --> 00:27:28,840
Well, if we get approval to add a new one,

00:27:28,840 --> 00:27:35,630
Now we design the template, mark it up, and register it with the design system.

00:27:36,700 --> 00:27:43,190
After that, like the flow before you, make sure the template is added to the design system.

00:27:43,740 --> 00:27:50,480
The work will be carried out by planning on the screen and sharing it with developers and opening it as a service.

00:27:52,900 --> 00:27:58,650
Lastly, I'll share some of the issues that I've been thinking about while working on the project.

00:27:58,660 --> 00:28:01,000
There are some things that are still going on.

00:28:02,850 --> 00:28:04,620
The first is MobX.

00:28:04,620 --> 00:28:10,360
The reason why we used MobX for the first time was that logic was simple and simple.

00:28:10,680 --> 00:28:14,490
It was a library I've never used before, so I applied it experimentally.

00:28:15,200 --> 00:28:22,900
At first, I used the React-MOBX library to create class-based components.

00:28:23,660 --> 00:28:27,410
Because of the guide using the React Hook within the team,

00:28:27,410 --> 00:28:37,510
we went through a refactoring process and we changed it to a library called REACT-MOBX-LITE that supports the functional components.

00:28:38,380 --> 00:28:42,560
I'm using it in connection with REACT-CONTEXT api.

00:28:44,340 --> 00:28:53,690
In the case of MobX, since there is no set pattern, it seems that the advantage and the disadvantage that various patterns can be applied.

00:28:54,010 --> 00:29:00,930
It's comfortable and free, but I was wondering what the correct ways were.

00:29:02,820 --> 00:29:11,970
I think it's a bit of a disadvantage because it lack resources compared to other libraries.

00:29:15,380 --> 00:29:18,680
The second issue is about Puppeteer.

00:29:18,840 --> 00:29:23,160
We use both Ubuntu and CentOS servers.

00:29:23,270 --> 00:29:28,960
Ubuntu was fine, but when you ran Puppeteer in CentOS,

00:29:29,420 --> 00:29:32,490
An error called NO USABLE SANDBOX occurred.

00:29:32,840 --> 00:29:36,220
I looked for it and I had to trouble shoot this problem.

00:29:36,320 --> 00:29:41,600
To summarize the trouble shooting, there are three solutions.

00:29:41,690 --> 00:29:48,860
First, disable SANDBOXED option if the page you are trying to access in the Puppeter is a trusted page.

00:29:48,870 --> 00:29:51,940
But this is not a recommended method.

00:29:53,500 --> 00:29:55,620
The second method is recommended.

00:29:55,620 --> 00:30:00,760
Change the kernel value so that you can clone the name space to the os.

00:30:01,430 --> 00:30:07,560
But we're internally using an in-house cloud, and we have limited access to servers.

00:30:07,940 --> 00:30:13,500
So I didn't use this method because I didn't want to change the kernel value.

00:30:14,140 --> 00:30:22,040
I applied the third method. Download a fixed version of the npm module.

00:30:22,040 --> 00:30:25,850
and the available sandbox will be downloaded with the package.

00:30:26,490 --> 00:30:32,990
So we've changed the environment variables to connect to the downloaded sandbox.

00:30:33,230 --> 00:30:38,710
And we used the sandbox to execute Puppeteer.

00:30:41,530 --> 00:30:44,520
Next, we're going to talk about the storybook component.

00:30:44,520 --> 00:30:52,040
Like we said earlier, Markup developers are now pushing to the component repository.

00:30:52,540 --> 00:30:58,440
Currently, we have brought a template based on html and use react to make it into a component.

00:30:58,900 --> 00:31:04,100
That's why I'm using the dangerouslySetInnerHTML.

00:31:04,840 --> 00:31:11,960
It's got some cross-site security issues, and when you edit it internally, like you're changing that text from the builder.

00:31:12,180 --> 00:31:15,370
It's not easy to control inside.

00:31:17,090 --> 00:31:22,490
We're working on changing the React component base in the future.

00:31:25,290 --> 00:31:30,540
There's a little bit of a connection to the storybook React component change.

00:31:30,920 --> 00:31:40,540
CONTENTEDITABLE is also used to prototype blocks. We're using them for editing.

00:31:41,060 --> 00:31:48,560
Currently, we are toggling the CONTENTEDITABLE property to selected elements when in Edit mode.

00:31:49,140 --> 00:31:54,090
But if you add that attribute to the element that has the tag at the bottom and modify it,

00:31:54,470 --> 00:31:58,000
There's an issue where even the markup below is deleted.

00:31:58,690 --> 00:32:04,550
So now I'm using an element with tags and custom attributes to make exceptions.

00:32:05,260 --> 00:32:12,760
The more exceptions there are, the more difficult it is to manage and the more dirty the source is.

00:32:14,290 --> 00:32:20,510
I'm thinking about switching to the React component that I mentioned earlier, and I'm testing it.

00:32:21,160 --> 00:32:27,960
If I can't do that, I'm considering a way to fix something like an editing layer.

00:32:30,750 --> 00:32:35,130
That's it for my presentation, and thank you for listening for such a long time.

00:32:35,920 --> 00:32:39,380

YouTube URL: https://www.youtube.com/watch?v=3Qo9mMT9VvU


