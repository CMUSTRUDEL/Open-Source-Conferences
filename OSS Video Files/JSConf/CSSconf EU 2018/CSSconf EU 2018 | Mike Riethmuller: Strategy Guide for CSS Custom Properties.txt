Title: CSSconf EU 2018 | Mike Riethmuller: Strategy Guide for CSS Custom Properties
Publication date: 2018-06-02
Playlist: CSSconf EU 2018
Description: 
	Static variables are not always global, but global variables are almost always static, therefore dynamic variables should almost always be local. Did you follow that? If not, you might need to see my talk. I will cover HOW to use CSS variables correctly for things like: theming, responsive design, prototyping, animation and much more. A practical guide that tells you more than how the syntax works.

CSSconf EU will be back on May 31st 2019: https://2019.cssconf.eu/
Captions: 
	00:00:05,100 --> 00:00:06,660
Okay, hi, everyone.

00:00:06,860 --> 00:00:09,180
I'm going to dive straight in.

00:00:09,180 --> 00:00:12,339
Custom properties are now supported in all modern browsers, and this is great.

00:00:12,339 --> 00:00:16,189
It means we are starting to see examples of people using them in production.

00:00:16,189 --> 00:00:19,180
But they're different from variables in preprocessors.

00:00:19,180 --> 00:00:22,599
And I've already seen a lot of examples where people are using them in a similar way without

00:00:22,599 --> 00:00:26,810
necessarily considering what specific advantages they have to offer.

00:00:26,810 --> 00:00:30,910
That might include one European web development conference as well.

00:00:30,910 --> 00:00:31,910
But that's okay.

00:00:31,910 --> 00:00:37,030
I think custom properties have a huge potential to change how we write and structure CSS,

00:00:37,030 --> 00:00:40,680
and to a lesser extent as well, how we use JavaScript to interact with UI components.

00:00:40,680 --> 00:00:46,040
I will not focus as much on the syntax and how they work.

00:00:46,040 --> 00:00:50,260
What separates the best players of any game is strategy.

00:00:50,260 --> 00:00:54,430
I'm going to focus more on the strategies today.

00:00:54,430 --> 00:01:02,570
Can I get help?

00:01:02,570 --> 00:01:07,230
I need a cursor.

00:01:07,230 --> 00:01:10,570
So, custom properties are a little bit like variables in preprocessors.

00:01:10,570 --> 00:01:15,630
But they have some very important differences, and one of the first and most obvious differences

00:01:15,630 --> 00:01:16,630
is the syntax.

00:01:16,630 --> 00:01:23,860
So, in Sass, we might have used a dollar sign to denote a variable, and, in Less, we use

00:01:23,860 --> 00:01:25,420
an @ symbol.

00:01:25,420 --> 00:01:35,100
Custom properties use a dash-dash.

00:01:35,100 --> 00:01:42,110
We use a different type of syntax for assigning a value than we do for retrieving the value.

00:01:42,110 --> 00:01:48,590
When retrieving the value, we use the va function here, for anyone who has used things like

00:01:48,590 --> 00:01:57,880
calc or the functional parts of CSS that are making their way into the modern language.

00:01:57,880 --> 00:02:01,640
The next most obvious difference is in the same.

00:02:01,640 --> 00:02:05,830
They are called custom properties because they really are CSS properties.

00:02:05,830 --> 00:02:11,780
In preprocessors, you can define the variable almost anywhere.

00:02:11,780 --> 00:02:17,350
This means outside declaration blocks, inside media rules, you can even use them as part

00:02:17,350 --> 00:02:24,050
of a selector, and all of those examples would be invalid with custom properties.

00:02:24,050 --> 00:02:28,150
Custom properties have the same rules about where they can be used as normal CSS properties.

00:02:28,150 --> 00:02:32,599
In fact, it is far better to think of them as dynamic properties than it is to think

00:02:32,599 --> 00:02:34,460
of them as variables.

00:02:34,460 --> 00:02:39,200
This means that they can only be used inside declaration blocks.

00:02:39,200 --> 00:02:42,630
In other words, between these curly braces here.

00:02:42,630 --> 00:02:46,930
This means they are tied to a specific selector, and that can be the root selector - you might

00:02:46,930 --> 00:02:53,130
have seen this in a lot of examples - but it can be any other valid CSS selector which

00:02:53,130 --> 00:02:55,459
can include inside a media query.

00:02:55,459 --> 00:03:01,270
So, similarly, you can retrieve the value of a custom property anywhere you would normally

00:03:01,270 --> 00:03:05,520
use a value in CSS.

00:03:05,520 --> 00:03:10,910
So this means that they can be part of a single value, or a shorthand statement, or they can

00:03:10,910 --> 00:03:15,470
even be used inside calc next to other key words and other values.

00:03:15,470 --> 00:03:21,020
However, they can't be used inside media rules, and they can't be used inside selectors, so

00:03:21,020 --> 00:03:27,819
that means like Nth child are out which is unfortunate.

00:03:27,819 --> 00:03:32,150
That ends my crash course on custom properties.

00:03:32,150 --> 00:03:36,349
There's probably a lot more that you want to know about the syntax and how they work,

00:03:36,349 --> 00:03:41,820
like how do we use fallback values and assign custom properties to others, and the answer

00:03:41,820 --> 00:03:46,850
to that one is yes, but this should be enough of an understanding so that we can get to

00:03:46,850 --> 00:03:50,110
know some of the other strategies we have in this talk.

00:03:50,110 --> 00:03:54,370
Cosmetic differences aside, one of the most significant differences between variables

00:03:54,370 --> 00:03:58,640
and preprocessors and custom properties is how they are scoped.

00:03:58,640 --> 00:04:03,040
We can refer to variables as statically or dynamically scoped.

00:04:03,040 --> 00:04:05,500
And preprocessors are static.

00:04:05,500 --> 00:04:12,379
So where CSS is concerned, static means that - static means we can update the value of

00:04:12,379 --> 00:04:16,789
a variable at different points in the compilation process, but we can't change the value of

00:04:16,789 --> 00:04:18,259
the variables that came before it.

00:04:18,259 --> 00:04:22,780
You can see, even though I'm using the same variable name and targeting the same selector,

00:04:22,780 --> 00:04:28,690
the output or generated CSS on this side is going to be whatever the value was at that

00:04:28,690 --> 00:04:30,419
time it was read.

00:04:30,419 --> 00:04:37,139
This means that we could potentially read an entire document css file without knowing

00:04:37,139 --> 00:04:44,839
what the - and that's not something that we can do with custom properties.

00:04:44,839 --> 00:04:47,139
Custom properties work differently.

00:04:47,139 --> 00:04:52,180
Where custom properties are concerned, dynamically scoped means they're subject to inheritance

00:04:52,180 --> 00:04:53,860
in the cascade.

00:04:53,860 --> 00:04:58,110
It means this property is tied to a selector, and, if the value changes, it affects all

00:04:58,110 --> 00:05:02,039
matching DOM elements, like any other CSS selector would.

00:05:02,039 --> 00:05:06,569
This is great because it means that we can update the value of a custom property using

00:05:06,569 --> 00:05:12,039
a media query, a hover state, or a JavaScript, and we don't have to change which custom property

00:05:12,039 --> 00:05:15,879
we're using, just need to update its value with CSS.

00:05:15,879 --> 00:05:19,909
I want to show you a little bit of an example of this which is why I was struggling to see

00:05:19,909 --> 00:05:21,020
the cursor here before.

00:05:21,020 --> 00:05:26,259
So, if I apply this example to my slides, you can see that the heading colour is picked

00:05:26,259 --> 00:05:31,729
up this light salmon which will affect all of my slides, including the previous one there.

00:05:31,729 --> 00:05:37,099
However, I can scope this to just slide 15 as well.

00:05:37,099 --> 00:05:46,630
And you will see that none of the previous slides are going to be affected any more.

00:05:46,630 --> 00:05:52,789
In addition to being static or dynamic, variables can be global or local.

00:05:52,789 --> 00:05:55,189
If you write JavaScript, you will know what I mean here.

00:05:55,189 --> 00:05:59,279
Variables can be assigned to everything inside an application, or their scope can be limited

00:05:59,279 --> 00:06:02,539
to specific functions or blocks of code.

00:06:02,539 --> 00:06:04,789
Custom properties are kind of similar.

00:06:04,789 --> 00:06:09,949
So, custom properties are by fault locally scoped to the selectors that we've applied

00:06:09,949 --> 00:06:13,430
them to, so they're like local variables.

00:06:13,430 --> 00:06:19,090
However, because custom properties are also inherited, this means in many situations,

00:06:19,090 --> 00:06:23,229
they can behave a lot like global variables as well, especially if we're using them on

00:06:23,229 --> 00:06:27,930
the root selector but they're kind of global.

00:06:27,930 --> 00:06:32,629
When it comes to CSS, we have some things that are global, and we want them applied

00:06:32,629 --> 00:06:38,599
consistently across our application - things like topography, spacing, colours - these

00:06:38,599 --> 00:06:43,059
are all examples of you might want to apply globally and consistently across your application.

00:06:43,059 --> 00:06:51,369
This is a section from the Lonely Planet Style Guide.

00:06:51,369 --> 00:06:54,099
It contains things like the colour palettes and the topography.

00:06:54,099 --> 00:06:56,460
They have local things too.

00:06:56,460 --> 00:06:59,089
So, for example, a button component.

00:06:59,089 --> 00:07:02,439
That's in a section called "UI components", and, when we use those terms would be , we're

00:07:02,439 --> 00:07:04,539
often talking about local things.

00:07:04,539 --> 00:07:11,029
There will be variables for these things too, colour variations, the sizes we have for buttons.

00:07:11,029 --> 00:07:13,779
All of these would be local variables.

00:07:13,779 --> 00:07:17,849
This is something we are familiar with in CSS as well.

00:07:17,849 --> 00:07:22,029
We've created things like design systems, style guides, naming conventions, JavaScript

00:07:22,029 --> 00:07:27,240
libraries, all to help with dealing with this problem of global sign elements, and isolating

00:07:27,240 --> 00:07:28,929
them from local component concerns.

00:07:28,929 --> 00:07:34,190
I think that custom properties now provide some new opportunities for dealing with this

00:07:34,190 --> 00:07:36,479
old problem.

00:07:36,479 --> 00:07:42,439
So, as it turns out, most global things in CSS are also static.

00:07:42,439 --> 00:07:46,749
Your brand colours, your topography, don't - typography don't change of from one component

00:07:46,749 --> 00:07:48,149
to another.

00:07:48,149 --> 00:07:52,830
Of course, these can change, but where it does, it tends to be a global rebrand and

00:07:52,830 --> 00:07:58,569
not something that happens very often on any mature product.

00:07:58,569 --> 00:08:03,690
And this is why I think it makes sense to continue using a preprocessor for static variables.

00:08:03,690 --> 00:08:09,699
So, aside from helping keep dynamic and static concerns separate in the code, it visually

00:08:09,699 --> 00:08:14,300
denotes static variables and this means that you instantly know when something is going

00:08:14,300 --> 00:08:20,349
to change globally, or when something sort of more dynamic and local, and therefore we're

00:08:20,349 --> 00:08:23,409
probably using a custom property.

00:08:23,409 --> 00:08:27,729
This will make CSS a whole lot easier to read and therefore easier to maintain.

00:08:27,729 --> 00:08:32,580
There are a few small exceptions to this rule, and one of them is client-side theming.

00:08:32,580 --> 00:08:37,280
For the most part, I would call in a 90-per cent rule, and one of the most important strategies

00:08:37,280 --> 00:08:39,520
for working with custom properties effectively.

00:08:39,520 --> 00:08:46,180
If you're taking notes, I can this is one that you should possibly write down.

00:08:46,180 --> 00:08:52,010
You might think that, given my strong stance there on global variables being static, the

00:08:52,010 --> 00:08:56,800
buy reflection, perhaps all local things should be dynamic.

00:08:56,800 --> 00:09:01,720
And whilst it's true that local variables do tend to be dynamic, this is nowhere near

00:09:01,720 --> 00:09:06,700
as strong as the tendency for global things to be static, and, in many situations, it

00:09:06,700 --> 00:09:12,250
makes a lot of sense still to have local variables that are static or use preprocessors.

00:09:12,250 --> 00:09:15,910
That's especially the case for more complex UI components.

00:09:15,910 --> 00:09:20,760
But of course, complex UI components don't make great slides, so I've come up with a

00:09:20,760 --> 00:09:22,050
fairly simple example here.

00:09:22,050 --> 00:09:27,500
Again, I'm using the example of different size variations for a button component.

00:09:27,500 --> 00:09:32,750
I use variables like this mostly as a developer convenience, and you can see I've got things

00:09:32,750 --> 00:09:36,560
like button small, medium, and large.

00:09:36,560 --> 00:09:41,640
And I prefixed those variables with the component name so that I know that these are local variables

00:09:41,640 --> 00:09:47,220
but you could use a different prefix, like C for component, or L for local, with , or

00:09:47,220 --> 00:09:50,790
even prefix global variables if you wanted to.

00:09:50,790 --> 00:09:54,910
Whatever you choose to do, I think it makes sense to differentiate between local static

00:09:54,910 --> 00:09:59,330
variables, or preprocessor variables, and global static variables.

00:09:59,330 --> 00:10:05,020
Now, if we take this simple example, and I decide that I want all of the buttons to use

00:10:05,020 --> 00:10:10,470
the small size on mobile devices or small screens, we suddenly have a more dynamic sort

00:10:10,470 --> 00:10:16,200
of situation here, and this is something that means that custom properties possibly make

00:10:16,200 --> 00:10:19,330
a lot more sense.

00:10:19,330 --> 00:10:24,020
So luckily, we can assign preprocessor variables to custom properties.

00:10:24,020 --> 00:10:30,810
Now, you might be wondering what this hash and curly braces around the variable are.

00:10:30,810 --> 00:10:41,050
This is because $.button.small is a recent value, and we need to interpolate these variables,

00:10:41,050 --> 00:10:47,211
and tells Sass that you want to output the variable and not $.button.small in the style

00:10:47,211 --> 00:10:48,211
sheet.

00:10:48,211 --> 00:10:56,340
This is needed where variables are valid CSS or variable names are valid CSS.

00:10:56,340 --> 00:11:02,990
Okay, so here you can see I've started off with a button class and created a button property

00:11:02,990 --> 00:11:04,680
with the size of button small.

00:11:04,680 --> 00:11:09,040
That would be on all of those buttons there.

00:11:09,040 --> 00:11:13,421
Using a media query above 600 pixels, I'm changing the value of that custom property

00:11:13,421 --> 00:11:20,120
to button large or medium, and I don't need to change the small one because it stays the

00:11:20,120 --> 00:11:21,120
same.

00:11:21,120 --> 00:11:25,040
What this results this is static variables becoming locally dynamic, so you can still

00:11:25,040 --> 00:11:26,420
use a mix of two.

00:11:26,420 --> 00:11:30,050
If you're refactoring, this is a pattern you might want to consider.

00:11:30,050 --> 00:11:34,470
Then finally here, you can see that I'm retrieving the value of that custom property just in

00:11:34,470 --> 00:11:37,870
one place, and, once again, it is only on the button class which would be on all of

00:11:37,870 --> 00:11:38,870
those buttons.

00:11:38,870 --> 00:11:43,160
Yet it's going to have a different value, depending on the conditions above.

00:11:43,160 --> 00:11:47,960
Okay, so just a little deviation here.

00:11:47,960 --> 00:11:51,610
Hands up anyone who has written an overly complexion Sass abstraction only to get their

00:11:51,610 --> 00:11:52,610
hands burnt?

00:11:52,610 --> 00:11:53,740
A few people.

00:11:53,740 --> 00:11:59,260
A few people who have gone back to using Sass for variables?

00:11:59,260 --> 00:12:05,530
That describes my experience initially, and I read a really interesting block post on

00:12:05,530 --> 00:12:11,050
this topic recently, on the free code camp, saying don't do it at run time but do it at

00:12:11,050 --> 00:12:16,220
design time, by Bill Sawyer, and he gave this example here.

00:12:16,220 --> 00:12:17,220
This is really clever.

00:12:17,220 --> 00:12:22,200
What it does is creates an array of letters of the alphabet by looping over different

00:12:22,200 --> 00:12:24,430
character codes and pushing them into the array.

00:12:24,430 --> 00:12:29,420
Obviously, it is like a really nice concise bit of code, smaller, go going to be faster

00:12:29,420 --> 00:12:33,850
than writing out all of those values by hand but I agree with the author.

00:12:33,850 --> 00:12:36,240
The alphabet is not likely to change.

00:12:36,240 --> 00:12:38,000
And I want to see what is in that array.

00:12:38,000 --> 00:12:43,790
So code like this, whilst clever, isn't necessarily helpful in a production setting.

00:12:43,790 --> 00:12:50,080
The dynamic nature of custom properties allows us to create clever and complicated abstractions.

00:12:50,080 --> 00:12:53,080
This example here generates a modular scale.

00:12:53,080 --> 00:12:58,210
A modular scale is like a series of numbers that relate to each other with a given ratio,

00:12:58,210 --> 00:13:02,420
and they're often used for things lying heading and font sizes, and spacing, in web design.

00:13:02,420 --> 00:13:07,000
And I could talk a whole lot about modular scales and how we might use them.

00:13:07,000 --> 00:13:17,000
In this talk, the modular scale is generated at run time using custom properties, and the

00:13:17,000 --> 00:13:18,820
ratio there.

00:13:18,820 --> 00:13:25,351
The value of each of these is calculated using that ratio and the value of the custom property

00:13:25,351 --> 00:13:27,460
that came before it.

00:13:27,460 --> 00:13:33,060
What this means is we can change the ratio, and all of those custom properties are going

00:13:33,060 --> 00:13:39,890
to be recalculated live in the browser at run time.

00:13:39,890 --> 00:13:45,510
Custom properties shouldn't be and won't be immune to this experimentation and innovation.

00:13:45,510 --> 00:13:49,320
We did it with preprocessors as well.

00:13:49,320 --> 00:13:54,330
In the long run, I think that readable, maintainable code, is going to win over clever abstraction

00:13:54,330 --> 00:13:56,529
s like this, at least in production.

00:13:56,529 --> 00:14:02,840
In production, I might like to see something a little bit more like this.

00:14:02,840 --> 00:14:07,740
Here I can easily read what the value of each of those custom properties is going to be.

00:14:07,740 --> 00:14:09,029
This is good.

00:14:09,029 --> 00:14:12,020
Because we recode many more times than we write it.

00:14:12,020 --> 00:14:15,860
Once I figured out what I think these values should be, it's not likely that these are

00:14:15,860 --> 00:14:19,310
going to change of in my application.

00:14:19,310 --> 00:14:23,860
That's why I think it makes sense to generate code like this at design time.

00:14:23,860 --> 00:14:26,940
Of course, this example here can still be improved.

00:14:26,940 --> 00:14:31,510
It violates the rule earlier that sort of all global variables should be static, and

00:14:31,510 --> 00:14:33,590
I consider these fairly global.

00:14:33,590 --> 00:14:38,050
I would much prefer to make these pro processor variables and then convert them to locally

00:14:38,050 --> 00:14:43,210
dynamic custom properties as required, using the technique that I showed you before with

00:14:43,210 --> 00:14:45,070
the buttons.

00:14:45,070 --> 00:14:49,250
I think that is also important to avoid situations where we name custom properties like this

00:14:49,250 --> 00:14:54,820
- font size 1, 2, et cetera, because this can result in a situation where we go from

00:14:54,820 --> 00:14:58,800
using one custom property to a different custom property.

00:14:58,800 --> 00:15:01,520
That brings me to my next strategy.

00:15:01,520 --> 00:15:04,210
That is change the value, not the variable.

00:15:04,210 --> 00:15:07,580
Once again, this is one of the most important strategies for working with custom properties

00:15:07,580 --> 00:15:11,430
effectively: if you're taking notes, perhaps underline that one.

00:15:11,430 --> 00:15:16,940
So, unfortunately, I see a lot of examples like this with custom properties.

00:15:16,940 --> 00:15:21,530
Here we have two custom properties, one called font size small, one called font size large,

00:15:21,530 --> 00:15:26,410
and then using a media query, I'm switching from using the small to the large one.

00:15:26,410 --> 00:15:31,810
This is exactly how we would have done things with preprocessors, but with custom properties,

00:15:31,810 --> 00:15:33,970
this doesn't make a great deal of sense.

00:15:33,970 --> 00:15:39,210
So, with custom properties, a far better way to do this would be to define a single custom

00:15:39,210 --> 00:15:44,890
property, and we zero that to the component, and in this case, it is the example component.

00:15:44,890 --> 00:15:48,980
As a general rule, we should never change which custom property we're using for any

00:15:48,980 --> 00:15:50,090
single purpose.

00:15:50,090 --> 00:15:56,110
So, with the media query, I'm updating the value of the same custom property here.

00:15:56,110 --> 00:16:00,190
Then once again, in a single place, I'm retrieving the value of that custom property.

00:16:00,190 --> 00:16:05,130
And you will notice that the media query here is only used to change the value of the custom

00:16:05,130 --> 00:16:08,000
property, not to retrieve that value.

00:16:08,000 --> 00:16:11,360
And there's very good reasons why I've done this, and you will see this pattern again

00:16:11,360 --> 00:16:15,779
throughout my talk, and it brings me to my next set of strategies which is for responsive

00:16:15,779 --> 00:16:17,540
design.

00:16:17,540 --> 00:16:23,160
So, one of the problems with responsive design when it relies heavily on media queries is

00:16:23,160 --> 00:16:28,170
that, no matter how we organise our CSS, all of the styles relating to particular components

00:16:28,170 --> 00:16:32,920
become fragmented across the style sheet, and it can be difficult to know which CSS

00:16:32,920 --> 00:16:35,830
properties are going to change.

00:16:35,830 --> 00:16:40,370
So custom properties can help us organise some of this logic related to responsive design

00:16:40,370 --> 00:16:44,070
and make working with media queries a whole lot easier.

00:16:44,070 --> 00:16:49,940
So, my first strategy for responsive design is if it changes, it's a variable.

00:16:49,940 --> 00:16:55,529
What I mean by this is if you're using a media query or a hover state to update the value

00:16:55,529 --> 00:17:00,930
of a CSS property, perhaps you should replace this in a custom property and move it along

00:17:00,930 --> 00:17:05,689
with a selector and the media query whatever else changes its value up to the top of the

00:17:05,689 --> 00:17:08,250
document.

00:17:08,250 --> 00:17:13,679
If done correctly, this means that media queries will only be used to update the value of custom

00:17:13,679 --> 00:17:17,610
properties.

00:17:17,610 --> 00:17:22,749
As a result of that, we will have a clear separation of logic from its implementation.

00:17:22,749 --> 00:17:26,250
This means that all the logic will be at the top of the do you mean, and wherever we see

00:17:26,250 --> 00:17:30,860
a vast statement, we immediately know that this is something that changes in our CSS,

00:17:30,860 --> 00:17:35,149
and with traditional methods of writing CSS, there's no way of knowing this.

00:17:35,149 --> 00:17:41,450
It creates a link between logic and its implementation, and I find that incredibly useful.

00:17:41,450 --> 00:17:46,009
So the idea of declaring variables at the top of a document is not a new idea, it's

00:17:46,009 --> 00:17:49,669
something we've done in many programming languages, and it's something we do with preprocessors

00:17:49,669 --> 00:17:55,019
instinctively, and it's something we can do with regular CSS as well.

00:17:55,019 --> 00:18:00,869
So, writing CSS in this way creates a clear distinction between the CSS at the top of

00:18:00,869 --> 00:18:03,779
the document and the CSS below.

00:18:03,779 --> 00:18:06,841
And I need a way to differentiate between these sections when I talk about them, so

00:18:06,841 --> 00:18:09,759
I've come up with this metaphor of logic fold.

00:18:09,759 --> 00:18:15,230
Above the fold contains all the custom properties, and the selectors that might change those

00:18:15,230 --> 00:18:20,539
values, and, below the fold, it's highly declarative and straightforward and easy to read, and,

00:18:20,539 --> 00:18:25,499
in fact, it feels like the kind of CSS we used to write some years ago before media

00:18:25,499 --> 00:18:29,679
queries and other complexities of the modern language.

00:18:29,679 --> 00:18:32,289
So this is what it might look like above the fold.

00:18:32,289 --> 00:18:36,929
As you can see here, this section only contains custom properties, and more than that, it

00:18:36,929 --> 00:18:40,889
only contains examples where we're assigning values to custom properties, not retrieving

00:18:40,889 --> 00:18:41,990
them.

00:18:41,990 --> 00:18:46,270
You might have figured out this is for a basic six-column Flexbox grid system and I have

00:18:46,270 --> 00:18:52,480
a Flexbox there called row display, and using media query, updating the value from block

00:18:52,480 --> 00:18:58,499
to flex, so all of those custom properties will come into effect.

00:18:58,499 --> 00:19:03,860
So, below the fold, I can see which CSS properties are going to be changed.

00:19:03,860 --> 00:19:08,230
I know that the row classes using the row display one, and for the display report, which

00:19:08,230 --> 00:19:15,470
isn't surprising, and I can see that the value used for the flex basis and what is interesting

00:19:15,470 --> 00:19:19,850
is the value of that custom property will be different depending on which of the classes

00:19:19,850 --> 00:19:22,090
is applied in the HTML.

00:19:22,090 --> 00:19:25,070
And it can make CSS like that a lot less verbose.

00:19:25,070 --> 00:19:29,830
We only need the one place where we are defining the styles, and I can look back above the

00:19:29,830 --> 00:19:34,409
fold, and I can see what those values are going to be in the different situations that

00:19:34,409 --> 00:19:37,419
might exist within the browser.

00:19:37,419 --> 00:19:44,090
So, writing CSS in this way is easy to maintain because all of the logic is in one place,

00:19:44,090 --> 00:19:46,519
and all the declarative code is somewhere else.

00:19:46,519 --> 00:19:48,850
It's easy to read because we know what is changing.

00:19:48,850 --> 00:19:53,029
Anything without reading and interpreting the whole style sheet, as many of us have

00:19:53,029 --> 00:19:59,179
become good at doing, and what it will result is all the styles and design concerns being

00:19:59,179 --> 00:20:04,049
in one place for each individual component, and separating the logic from the implementation

00:20:04,049 --> 00:20:10,010
like this is again another important strategy for working effectively with custom properties.

00:20:10,010 --> 00:20:15,080
Of course, all rules are meant to be broken, and that brings me to my next set of strategies

00:20:15,080 --> 00:20:17,190
for theming.

00:20:17,190 --> 00:20:22,169
So, throughout this talk, there are a lot of places where I've already argued against

00:20:22,169 --> 00:20:27,830
using custom properties for sort of global, dynamic variables, and hopefully, I've implied

00:20:27,830 --> 00:20:33,679
that assigning custom properties to the root selector is in many cases considered harmful,

00:20:33,679 --> 00:20:37,149
but like I said, every rule has an exception, and for the custom properties, it is theming,

00:20:37,149 --> 00:20:44,429
and I think that limited use of global dynamic variables for theming makes it a lot of sense.

00:20:44,429 --> 00:20:49,410
So theming generally refers to updating the UI in some way, could be something like the

00:20:49,410 --> 00:20:53,259
Twitter profile page here, changing the colours, the background image of a profile picture,

00:20:53,259 --> 00:20:54,259
et cetera.

00:20:54,259 --> 00:20:58,260
Or it could also be something more localised, so, for example, changing the colour of a

00:20:58,260 --> 00:21:04,389
note in Google Keep application, or you might have used a similar note-keeping application

00:21:04,389 --> 00:21:06,249
like that.

00:21:06,249 --> 00:21:10,369
Theming usually involves compiling a separate style sheet for user preferences and this

00:21:10,369 --> 00:21:11,369
can be difficult.

00:21:11,369 --> 00:21:15,970
It is not very performant because it means we might be re-rendering the page in many

00:21:15,970 --> 00:21:16,970
situations.

00:21:16,970 --> 00:21:20,909
So, with custom properties, we don't compile the separate style sheets, all we need to

00:21:20,909 --> 00:21:25,279
do is put the user variables or the user custom property up on the root selector, and these

00:21:25,279 --> 00:21:29,059
can be inherited by the default style sheet.

00:21:29,059 --> 00:21:41,929
So, Ida and Dag will show you practical examples later on.

00:21:41,929 --> 00:21:46,159
I think that we should be very deliberate and considerate about the use of custom properties

00:21:46,159 --> 00:21:51,059
when it comes to theming, because these global dynamic variables can be a lot harder to maintain,

00:21:51,059 --> 00:21:56,669
but lately, custom properties are case-sensitive, and since most of our custom properties are

00:21:56,669 --> 00:22:01,940
going to be local, if we're using dynamic global custom properties, it can make sense

00:22:01,940 --> 00:22:03,480
to capitalise them.

00:22:03,480 --> 00:22:09,009
So, capitalisation of variables often signifies global constants, and for us, this is going

00:22:09,009 --> 00:22:14,009
to signify that the value of the custom property might be set somewhere else in the application,

00:22:14,009 --> 00:22:18,080
and we probably should not change it locally.

00:22:18,080 --> 00:22:24,559
I think that it can be useful to avoid directly overriding these global theme values, and

00:22:24,559 --> 00:22:26,299
that's why I've used an example like this.

00:22:26,299 --> 00:22:32,230
Here I'm setting the value of theme colour to the value of user theme colour, if it exists,

00:22:32,230 --> 00:22:37,330
and then this value here is a fallback value for when the user theme colour doesn't exist.

00:22:37,330 --> 00:22:41,690
So, if we're using theme colour throughout our application, it's going to fall back nicely

00:22:41,690 --> 00:22:45,179
whenever the user has not set that preference.

00:22:45,179 --> 00:22:47,549
So I want to show you a quick example of this.

00:22:47,549 --> 00:22:55,049
Here, I've set the value of the background to theme colour, and if I apply this to my

00:22:55,049 --> 00:22:57,889
slides, the background colour is going to change.

00:22:57,889 --> 00:23:04,320
Now, I want you to have a think about what will happen when using a theme colour available

00:23:04,320 --> 00:23:08,700
in the body here.

00:23:08,700 --> 00:23:14,630
The answer might surprise you, that we are still falling back to this default value here,

00:23:14,630 --> 00:23:18,679
and the reason for that value is the value of the user theme colour has been set on the

00:23:18,679 --> 00:23:23,499
root element, and that's where we are this value is free from.

00:23:23,499 --> 00:23:36,419
So, obviously, when I move through the [ ...]. That can be a useful pattern if you want to avoid

00:23:36,419 --> 00:23:42,730
people from overriding these global values in different places in your application.

00:23:42,730 --> 00:23:49,049
Also, something a bit more complicated, it can be helpful sometimes to expose those variables

00:23:49,049 --> 00:23:51,029
with a star selector.

00:23:51,029 --> 00:23:58,120
This makes the theme colour custom property on every element, and then that means that

00:23:58,120 --> 00:24:02,879
it is recalculated for the body element and we're able to pick you want value of that

00:24:02,879 --> 00:24:04,159
user theme colour.

00:24:04,159 --> 00:24:09,320
I'm going to delete that and put my slides back to the normal colour.

00:24:09,320 --> 00:24:15,509
Okay, so, if you want to set the value of custom properties with JavaScript, there's

00:24:15,509 --> 00:24:19,869
a fairly simple API, and it looks a little bit like this.

00:24:19,869 --> 00:24:25,881
I'm setting the theme colour to tomato, doing it on the document element there which is

00:24:25,881 --> 00:24:29,440
the equivalent of the root element.

00:24:29,440 --> 00:24:34,190
One of the really cool things about this is, if you have a technical design team, you can

00:24:34,190 --> 00:24:38,730
assign these variables up on the root element there, and then they can decide how they should

00:24:38,730 --> 00:24:42,929
be used throughout the style sheet, and this allows you to make large changes to how theming

00:24:42,929 --> 00:24:48,289
works in your application without having to touch any backend code and without necessarily

00:24:48,289 --> 00:24:53,450
having to touch any JavaScript, so that can be really useful as well before if you're

00:24:53,450 --> 00:24:54,649
- as well.

00:24:54,649 --> 00:25:00,470
If you're using a static site generator, or something like React or vue, you can write

00:25:00,470 --> 00:25:04,980
these custom properties out to style attributes as well, and these are going to have greater

00:25:04,980 --> 00:25:08,399
specificity than any defaults in the style sheets, so these values are likely to be picked

00:25:08,399 --> 00:25:10,450
up if used correctly.

00:25:10,450 --> 00:25:17,379
It's like a component-level thing except the props are passed through the style attributes,

00:25:17,379 --> 00:25:24,419
and I've seen it used for things like getting multi-coloured icons with SVG, and a whole

00:25:24,419 --> 00:25:28,450
lot of tricks you can do with this pattern, and I'm a big fan of that.

00:25:28,450 --> 00:25:35,149
So the final strategy I have for you is to started using custom properties today.

00:25:35,149 --> 00:25:39,980
Even if you're supporting IE10 and 11, you can start using some of these techniques.

00:25:39,980 --> 00:25:45,520
So much of what I've been talking about today is how we write and structure CSS, and this

00:25:45,520 --> 00:25:50,649
means that we can use tools like post-CSS to write this out to a static representation

00:25:50,649 --> 00:25:53,250
of the same code.

00:25:53,250 --> 00:25:58,510
I use a tool called post-CSS variables, and I know it is a little bit confusing but not

00:25:58,510 --> 00:26:03,590
post-CSS variables and not post-CSS custom properties, the reason for that is am so of

00:26:03,590 --> 00:26:08,539
those libraries can't determine what the custom properties will be inside media queries and

00:26:08,539 --> 00:26:14,019
other things, they treat them custom properties a lot like static variables, or a lot like

00:26:14,019 --> 00:26:19,429
preprocessor variables, but that first one will do a better job of that.

00:26:19,429 --> 00:26:23,640
Obviously, this technique won't be able to do some of the dynamic things, like some of

00:26:23,640 --> 00:26:26,679
the theming examples that I've talked about, but that might be okay.

00:26:26,679 --> 00:26:31,309
It might be perfectly acceptable for older browsers to fall back to a default theme,

00:26:31,309 --> 00:26:36,210
and you apply theming and customisation and a progressive enhancement.

00:26:36,210 --> 00:26:40,961
If you want to know more about the specific techniques I use for generating this, come

00:26:40,961 --> 00:26:47,110
and talk to me afterwards because I don't have time to go into the build process.

00:26:47,110 --> 00:26:50,440
I know what you're thinking here.

00:26:50,440 --> 00:26:53,200
Mike, this is great, but I haven't been listening.

00:26:53,200 --> 00:26:56,039
Could you give me the whole talk again in one sentence?

00:26:56,039 --> 00:26:57,999
Yes, I can!

00:26:57,999 --> 00:27:02,570
It comes down to understanding the difference between dynamic and static variables in CSS,

00:27:02,570 --> 00:27:05,320
and, a few simple rules.

00:27:05,320 --> 00:27:09,029
Global variables are usually static, separate logic from design.

00:27:09,029 --> 00:27:15,789
If a CSS changes, it might be a custom property, and change the value, not which custom property

00:27:15,789 --> 00:27:16,789
is used.

00:27:16,789 --> 00:27:19,590
If you follow these conventions, you might find that working with custom properties is

00:27:19,590 --> 00:27:24,799
a whole lot easier than you think, and it might even change how you approach CSS in

00:27:24,799 --> 00:27:30,890
general, and, yes, that was one sentence and I can't use a full stop.

00:27:30,890 --> 00:27:32,830
If you have any questions, please come and see me.

00:27:32,830 --> 00:27:35,119
There are other examples that I would love to show people.

00:27:35,119 --> 00:27:36,260
Thanks very much for your time!

00:27:36,260 --> 00:27:36,760

YouTube URL: https://www.youtube.com/watch?v=pF0pSwbZV9Y


