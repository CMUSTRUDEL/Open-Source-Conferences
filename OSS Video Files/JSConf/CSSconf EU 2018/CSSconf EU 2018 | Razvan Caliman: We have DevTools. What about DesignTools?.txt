Title: CSSconf EU 2018 | Razvan Caliman: We have DevTools. What about DesignTools?
Publication date: 2018-06-02
Playlist: CSSconf EU 2018
Description: 
	The DevTools in all current modern browsers provide a valuable set of instruments for web developers to create, inspect and debug their work. But what about web designers?

Sophisticated tools for creating and experimenting freely with CSS have been missing from browsers. But thereâ€™s a recent uptick in specialised tools for CSS which bring the creative empowerment web designers expect from professional editors right into their browser: tools like the CSS Grid Inspector in Firefox, in-context editors for CSS Shapes, fonts, animations, transforms, gradients, backgrounds and many others.

This talk provides an overview of the specialised tools for CSS available today and ventures a look ahead at the tooling opportunities that will give web designers the creative freedom they need in order to truly design in the browser.

CSSconf EU will be back on May 31st 2019: https://2019.cssconf.eu/
Captions: 
	00:00:05,700 --> 00:00:14,269
I would like to begin with an acknowledgement that we live in a golden age of the web platform.

00:00:14,269 --> 00:00:18,250
Every now and then, there's an article which comes and does the rounds which states that

00:00:18,250 --> 00:00:27,380
the web is dying, or already dead, and I really disagree with this.

00:00:27,380 --> 00:00:33,530
CSS Grid, Flexbox, variable fonts, service workers, the tools we need to build progressive

00:00:33,530 --> 00:00:39,280
web applications - we have very powerful building blocks at our disposal.

00:00:39,280 --> 00:00:44,429
This is not the sign of a web dying, this is the sign of a web which is very much alive

00:00:44,429 --> 00:00:46,140
and thriving.

00:00:46,140 --> 00:00:50,920
We have these web standards coming in browsers at a faster rate than ever before.

00:00:50,920 --> 00:00:53,670
The process is more transparent than ever before.

00:00:53,670 --> 00:00:56,370
The gaps are narrowing.

00:00:56,370 --> 00:01:01,760
We also have access to a litany of frameworks and libraries, and, while there is cause to

00:01:01,760 --> 00:01:07,330
feel overwhelmed - I know - I need to acknowledge that we have a tremendous amount of choice

00:01:07,330 --> 00:01:10,890
out there with which to build our tools.

00:01:10,890 --> 00:01:18,730
And, to get us through that, we have at our disposal a lot of developer tools from build

00:01:18,730 --> 00:01:25,360
tool chains all the way through to DevTools and browsers, and, acknowledging the differences,

00:01:25,360 --> 00:01:31,270
I could still say that DevTools in all browsers today provide a robust tool kit that empower

00:01:31,270 --> 00:01:35,450
web developers to create for the web platform.

00:01:35,450 --> 00:01:37,670
Web developers.

00:01:37,670 --> 00:01:41,240
What about web designers?

00:01:41,240 --> 00:01:46,100
My name is Razvan, and, today, I want to talk about DevTools for web designers.

00:01:46,100 --> 00:01:51,290
I'm a software engineer at Mozilla, I work on Firefox DevTools, and, previously to this,

00:01:51,290 --> 00:01:57,200
I worked on a bunch of things at Adobe like CSS Shapes, regions, masking, blend modes,

00:01:57,200 --> 00:02:00,620
and many other things that never actually made it.

00:02:00,620 --> 00:02:05,650
Throughout my career, I always have been interested in the sort of tools we can provide for these

00:02:05,650 --> 00:02:07,780
powerful new features.

00:02:07,780 --> 00:02:14,019
Now, it's good to begin with a bit of back story of how we got to this point.

00:02:14,019 --> 00:02:21,480
Firebug was a very, very popular Firefox extension which revolutionised the way we develop.

00:02:21,480 --> 00:02:27,090
Itself was inspired, and it competed with, the sort of tools like DOM inspector.

00:02:27,090 --> 00:02:33,180
What set apart Firebug was a community of enthusiast developer from different companies,

00:02:33,180 --> 00:02:40,579
ecosystem of extensions, and people who wanted to build better tools right into the context

00:02:40,579 --> 00:02:45,840
of the browser so we could get inspection, we dug debugging, and many other things.

00:02:45,840 --> 00:02:52,300
Firebug was a pioneer in developer tools, and it is the pioneer of and which many DevTools

00:02:52,300 --> 00:02:54,069
are based today.

00:02:54,069 --> 00:02:59,400
When it comes to web design features, the pioneer I would like to point out is Dabblet,

00:02:59,400 --> 00:03:07,909
CSS playground built by Lea Verou, which is an interesting way of showing property previews

00:03:07,909 --> 00:03:09,860
on CSS.

00:03:09,860 --> 00:03:17,209
She collected some of the examples at the time and collected them into Dabblet for us

00:03:17,209 --> 00:03:18,319
to use.

00:03:18,319 --> 00:03:24,180
It serves as an inspiration for DevTools, and sometimes, it makes me sad would be today,

00:03:24,180 --> 00:03:33,060
we have DevTools which do not yet match Dabblet in expressiveness.

00:03:33,060 --> 00:03:37,459
What do web designers actually need in order to design in the browser?

00:03:37,459 --> 00:03:41,400
I think it is good to make the distinction by what I mean by web designers, and that

00:03:41,400 --> 00:03:46,469
is people who predominantly use CSS and HTML in their work.

00:03:46,469 --> 00:03:51,950
Not to say they don't use JavaScript, but their work is primarily in CSS and HTML.

00:03:51,950 --> 00:03:57,349
I think there are a few key principles that DevTools would need to solve in order for

00:03:57,349 --> 00:03:59,949
people to truly design in the browser.

00:03:59,949 --> 00:04:06,029
These are things like the free form canvas where you can explore ideas in an unhindered

00:04:06,029 --> 00:04:09,659
manner with less structure to worry about.

00:04:09,659 --> 00:04:14,680
The confidence that your changes will not be lost and you can undo them.

00:04:14,680 --> 00:04:18,820
Web designers also need specialised tools for the sort of problems they solve.

00:04:18,820 --> 00:04:24,140
A simple form with input fields is not enough, and they also want their tools to be flexible

00:04:24,140 --> 00:04:27,640
and customisable to fit the way they work.

00:04:27,640 --> 00:04:29,580
So let's get into it.

00:04:29,580 --> 00:04:30,970
Freedom.

00:04:30,970 --> 00:04:36,840
By freedom here, I mean bringing in some of the creative freedom that people have in tools

00:04:36,840 --> 00:04:41,920
like Photoshop or Sketch, where it is easy to start designing something and let your

00:04:41,920 --> 00:04:48,060
creativity flow and allow for the serendipitous moments when you stumble upon a design that

00:04:48,060 --> 00:04:49,060
you like.

00:04:49,060 --> 00:04:56,700
That's not to say we do it in tools or in the browser today, but that it is less expressive

00:04:56,700 --> 00:05:01,870
and conducive to experimentation to write code when you want the solution as opposed

00:05:01,870 --> 00:05:04,220
to free-form editing.

00:05:04,220 --> 00:05:13,500
No DevTools actually solves this today because this is a very complex problem to solve.

00:05:13,500 --> 00:05:18,371
The web is built over very many years, and it has to be backwards compatible, and it

00:05:18,371 --> 00:05:21,390
has to lend itself to progressive enhancement.

00:05:21,390 --> 00:05:25,430
With one tool which comes close to this is web flow.

00:05:25,430 --> 00:05:32,970
Web flow is a tool, an online he had for for creating websites in a completely manual way,

00:05:32,970 --> 00:05:35,640
just dragging things around, and using specialised editors.

00:05:35,640 --> 00:05:39,540
This is a video I pulled from their website which highlights some of the functionality

00:05:39,540 --> 00:05:40,540
you have there.

00:05:40,540 --> 00:05:46,850
It is a lot more expressive, and it is a lot more fast to get to results with web flow.

00:05:46,850 --> 00:05:53,950
Even it, which exports good-quality code, from the editor, it needs to fit into their

00:05:53,950 --> 00:05:59,710
CMS ecosystem, and it needs some form of structure in order to build these things, so you don't

00:05:59,710 --> 00:06:06,110
have true free capabilities to put things wherever you want, you still have some form

00:06:06,110 --> 00:06:09,820
of limitations in structure, but it's getting very close.

00:06:09,820 --> 00:06:14,710
While the freedom aspect of DevTools is not solved in a general sense, I do believe per

00:06:14,710 --> 00:06:21,740
component, key can still have tools which give you free-form editing capabilities.

00:06:21,740 --> 00:06:24,330
Next up is confidence.

00:06:24,330 --> 00:06:29,980
Picture this: you're doing a design in Photoshop, you make some changes, you made a mistake.

00:06:29,980 --> 00:06:32,560
There is no way to go back.

00:06:32,560 --> 00:06:37,280
Or you accidentally refresh the tool, and all of your changes have gone.

00:06:37,280 --> 00:06:41,960
Well, sadly, that is the situation in many of the DevTools today.

00:06:41,960 --> 00:06:43,530
The changes are very ephemeral.

00:06:43,530 --> 00:06:46,950
You come in, make tweaks, refresh the page, and they're gone.

00:06:46,950 --> 00:06:52,120
That's not something you can use as a professional tool if you don't have control over these

00:06:52,120 --> 00:06:53,540
tweaks.

00:06:53,540 --> 00:06:55,060
Changes are happening, though.

00:06:55,060 --> 00:07:00,020
There is a new feature launched recently in Chrome called Local Overrides.

00:07:00,020 --> 00:07:06,770
What that does is it tracks changes happening in DevTools, writes them to a file, and then

00:07:06,770 --> 00:07:11,280
reapplies them every time you refresh the browser, so you don't lose changes any more.

00:07:11,280 --> 00:07:13,900
Here's a video of it in action in Chrome.

00:07:13,900 --> 00:07:15,880
You find it under the sources panel.

00:07:15,880 --> 00:07:18,160
There's the overrides sub panel there.

00:07:18,160 --> 00:07:24,140
You first need to select the folder where you would save the changes, the whole file

00:07:24,140 --> 00:07:25,140
changes.

00:07:25,140 --> 00:07:28,410
Once you allow this, you can return to your normal work flow in DevTools.

00:07:28,410 --> 00:07:33,150
So you can start making changes to properties and the browser will start monitoring those

00:07:33,150 --> 00:07:39,640
changes, and it essentially saves an entire copy of the file to disk, so, then, when you

00:07:39,640 --> 00:07:44,290
refresh, even hard refresh, like clearing the cache, you always get your changes back

00:07:44,290 --> 00:07:45,470
from that file on disk.

00:07:45,470 --> 00:07:50,590
There is an indicator in the network panel saying, "By the way we may be overwriting

00:07:50,590 --> 00:07:51,590
properties."

00:07:51,590 --> 00:07:56,530
As soon as you disable DevTools, you're back to the normal website.

00:07:56,530 --> 00:08:00,490
When you re-enable DevTools, local changes are always reapplied.

00:08:00,490 --> 00:08:05,130
Essentially, it's taking the local file and using it instead of what is coming from the

00:08:05,130 --> 00:08:10,000
server, which is great, but there's a caveat: if you forget this thing open, you may not

00:08:10,000 --> 00:08:14,400
know why your dev changes are not applying on your machines.

00:08:14,400 --> 00:08:17,100
There's a caveat there on which you need to be mindful.

00:08:17,100 --> 00:08:20,990
The indicator next to the network panel is a hint there.

00:08:20,990 --> 00:08:26,440
An alternative to local overrides is a Chrome developer tools citizens called Finch Developer

00:08:26,440 --> 00:08:27,690
Tools.

00:08:27,690 --> 00:08:29,520
It does pretty much the same thing.

00:08:29,520 --> 00:08:31,280
You have to explicitly enable it.

00:08:31,280 --> 00:08:33,470
There is no folder to save.

00:08:33,470 --> 00:08:38,229
Once you enable Finch, you can start making changes to your style and DevTools as usual.

00:08:38,229 --> 00:08:42,099
It monitors the changes and saves them into memory.

00:08:42,099 --> 00:08:46,770
Every time you refresh the page, it goes to memory and brings the changes back.

00:08:46,770 --> 00:08:52,340
You have the panel called DevTools which shows you a diff of everything you've done which

00:08:52,340 --> 00:08:58,780
you can toggle on and off, and you can export these changes.

00:08:58,780 --> 00:09:03,560
And the difference with Finch is that you can export just the subset of changes you

00:09:03,560 --> 00:09:11,450
made immediately of having a future file saved locally to disk.

00:09:11,450 --> 00:09:15,530
Next up, it is specialised tool, and there's lots to talk in specialised tools.

00:09:15,530 --> 00:09:21,350
By this, I mean editors focused on doing one thing and doing it very, very well.

00:09:21,350 --> 00:09:25,710
Probably, the classic example in specialised tools, is the colour-picker.

00:09:25,710 --> 00:09:32,000
The colour-picker in Chrome, I'm convinced everyone has used it before, you start inspecting

00:09:32,000 --> 00:09:37,080
an element, you find a colour value, and you trigger the colour-picker over there, and

00:09:37,080 --> 00:09:40,370
you make changes to the hue and see your changes live on the page.

00:09:40,370 --> 00:09:43,970
This is powerful because we want contextual changes.

00:09:43,970 --> 00:09:49,940
I don't know if you've noticed recently, there's a recent addition of contrast ratio which

00:09:49,940 --> 00:09:54,430
tells you if the colours you're picking are compliant with accessibility guidelines which

00:09:54,430 --> 00:10:01,490
make text easier to read for people who have difficulty reading text of different colours.

00:10:01,490 --> 00:10:06,010
Once you change colours, you actually get a line over there, and it shows you the threshold

00:10:06,010 --> 00:10:11,820
above which colours are not considered compliant with the standards, double A or AAA.

00:10:11,820 --> 00:10:17,270
I particularly like this integration of accessibility right into the tool when you're developing

00:10:17,270 --> 00:10:21,339
as opposed to having an accessibility step later down the road.

00:10:21,339 --> 00:10:25,600
It brings the importance of the field up close and personal.

00:10:25,600 --> 00:10:28,070
I like this.

00:10:28,070 --> 00:10:31,110
Next up, the text shadow editor, also in Chrome DevTools.

00:10:31,110 --> 00:10:36,150
I don't know if you've noticed this because it is very subtle, but in the styles panel

00:10:36,150 --> 00:10:43,140
of Chrome DevTools, there's a hamburger, or meat ball menu, giving you more options to

00:10:43,140 --> 00:10:44,630
add properties.

00:10:44,630 --> 00:10:48,000
One of these is properties is adding the shadow.

00:10:48,000 --> 00:10:52,640
This gives you a specialised editor which gives you a lot more flexibility in playing

00:10:52,640 --> 00:10:58,380
around with the shadow, changing the direction of it, or the spread, or the blur, which,

00:10:58,380 --> 00:11:05,610
again, lends itself to creativity, to exploration, to figuring out what works and what doesn't.

00:11:05,610 --> 00:11:09,380
Next up, the CSS Grid inspector.

00:11:09,380 --> 00:11:15,620
People love CSS grids because they're an amazing new layout tool and they need help designing

00:11:15,620 --> 00:11:16,920
with Grid.

00:11:16,920 --> 00:11:21,200
CSS Grid is actually being used on the website conference right now.

00:11:21,200 --> 00:11:26,640
The Grid inspector gives you a preview of the grid so you can inspect where the elements

00:11:26,640 --> 00:11:29,880
are actually positioned on that grid.

00:11:29,880 --> 00:11:34,390
Here's a more complex example built by my colleagues, Jen Simmons, where the need for

00:11:34,390 --> 00:11:39,740
the Grid inspector comes in handy because you want to know where the positions are on

00:11:39,740 --> 00:11:40,740
the grid.

00:11:40,740 --> 00:11:47,000
You can toggle the display line numbers, and you can extend the lines infinitely if that

00:11:47,000 --> 00:11:48,290
helps you or not.

00:11:48,290 --> 00:11:52,910
A cool thing is you can change the colour of the grid, so you maybe have more contrast

00:11:52,910 --> 00:11:57,520
if it doesn't work well with your design, and the setting is maintained after you refresh

00:11:57,520 --> 00:11:58,520
the page.

00:11:58,520 --> 00:12:04,650
So I know for a fact that this demo is also responsive, and, when you make changes, this

00:12:04,650 --> 00:12:08,780
is where the inspector comes in very hand which, because some elements may have repositioned,

00:12:08,780 --> 00:12:14,260
and then you can see them on the grid inspector, and you can understand what changed in your

00:12:14,260 --> 00:12:15,260
layout.

00:12:15,260 --> 00:12:19,300
This is an invaluable tool if you're learning Grid, or if you're playing with Grid, because

00:12:19,300 --> 00:12:24,720
it can get very complex, and having a specialised preview in the grid inspector is really useful

00:12:24,720 --> 00:12:26,460
for people.

00:12:26,460 --> 00:12:31,940
CSS filters in Firefox: they have an editor in Firefox DevTools.

00:12:31,940 --> 00:12:38,130
There are really cool ways of changing the graphic of something, the styling.

00:12:38,130 --> 00:12:45,480
So, over here, we're using the filter editor to add a hue rotate and dragging against that

00:12:45,480 --> 00:12:51,339
label over there to pick up colours for a hue rotate, and we can also add, for example,

00:12:51,339 --> 00:12:56,250
brightness, so we can change and stack multiple filters together, and, what makes this very

00:12:56,250 --> 00:13:01,020
powerful is that, instead of writing the values manually, you can play around with them, and

00:13:01,020 --> 00:13:03,630
you don't need to know their limits, their constraints.

00:13:03,630 --> 00:13:10,000
You can also saturation to see what desaturation does, and an important thing about filters

00:13:10,000 --> 00:13:14,339
is that their order is important, so you can change the order in the editor, and you can

00:13:14,339 --> 00:13:19,040
live-preview that on the page to understand the subtle differences that are actually happening

00:13:19,040 --> 00:13:21,300
when you're doing that.

00:13:21,300 --> 00:13:26,050
One thing which is not shown in the video is that you can also save these filters presets,

00:13:26,050 --> 00:13:30,520
so you can reapply them next time you want to edit.

00:13:30,520 --> 00:13:32,590
Next up, the CSS gradient editor.

00:13:32,590 --> 00:13:37,800
We have a gradient editor integrated into the Safari DevTools, wherever you see a linear

00:13:37,800 --> 00:13:45,910
repeat ing gradient, you get a contextual editor to do this, and this is on grabient.com

00:13:45,910 --> 00:13:52,570
which is a playground for choosing gradients or creating them online and getting them.

00:13:52,570 --> 00:13:56,970
There are a lot of great editors out there.

00:13:56,970 --> 00:14:01,140
People are trying to solve this problem in many different ways, and it's really good

00:14:01,140 --> 00:14:04,310
to have a lot of different opinions.

00:14:04,310 --> 00:14:09,630
One very cool gradient editor that I found recently is one for easing gradients.

00:14:09,630 --> 00:14:16,089
So, Andreas Larsen suggested introducing the concept of easing to your gradients like we

00:14:16,089 --> 00:14:21,050
have in animations, so you don't have a straight gradient, you can have a curve.

00:14:21,050 --> 00:14:26,110
He built this specialised editor to represent what this a would mean.

00:14:26,110 --> 00:14:28,340
This is a CSS working group proposal now.

00:14:28,340 --> 00:14:30,440
You can use the editor to understand the intent.

00:14:30,440 --> 00:14:36,360
You can change the angle of the grade went, change colours, one cool feature which I love

00:14:36,360 --> 00:14:42,990
a lot is using steps to have a stepped linear gradient over there, and I love this tool

00:14:42,990 --> 00:14:48,589
so much because it's so focused on letting you explore different things.

00:14:48,589 --> 00:14:51,840
I have literally spent hours playing with this tool.

00:14:51,840 --> 00:14:56,161
And, yes, it doesn't solve all problems for Grid but this is a prime example of a tool

00:14:56,161 --> 00:15:00,930
doing one thing and doing it very well while encouraging creative exploration.

00:15:00,930 --> 00:15:05,530
I really, really like this.

00:15:05,530 --> 00:15:09,500
Enough of video demos, let's switch to some code.

00:15:09,500 --> 00:15:16,350
This is something being developed now in Firefox Nightly, and called the font editor.

00:15:16,350 --> 00:15:21,130
For this, I'm going to switch over and over and open up the Firefox DevTools.

00:15:21,130 --> 00:15:24,410
I'm showing this in Firefox nightly.

00:15:24,410 --> 00:15:28,680
We built this thing called the font editor which is an extra panel over here in the side

00:15:28,680 --> 00:15:35,461
bar that allows you to edit things for fonts, like you can change the size, - sorry, we

00:15:35,461 --> 00:15:48,380
need to inspect the element, and then we need to not have our demo crash on stage.

00:15:48,380 --> 00:15:55,890
Sorry.

00:15:55,890 --> 00:16:06,480
That's why it's behind the flag right now.

00:16:06,480 --> 00:16:08,560
Finally to the it working.

00:16:08,560 --> 00:16:09,970
This is behind the flag ... [Applause].

00:16:09,970 --> 00:16:14,480
This is behind the flag in Firefox Nightly because it has bugs.

00:16:14,480 --> 00:16:17,610
It won't have bugs soon enough.

00:16:17,610 --> 00:16:21,899
What we can do with the font editor, check the element and then the size of it.

00:16:21,899 --> 00:16:25,080
We're used to this and make it Italic or not.

00:16:25,080 --> 00:16:32,260
The font editor is built for helping you use variable fonts, and variable fonts are very,

00:16:32,260 --> 00:16:36,680
very cool because they change the way we use fonts in our website, instead of downloading

00:16:36,680 --> 00:16:43,560
multiple font files, variable fonts include information in the font file that allows the

00:16:43,560 --> 00:16:51,980
browser to generate bold, italic, or many different things with axis.

00:16:51,980 --> 00:16:56,040
It goes and reads the font file and give you access to those axis.

00:16:56,040 --> 00:17:00,060
We're changing the weight of our font here.

00:17:00,060 --> 00:17:04,480
You can probably see that the font weight doesn't go up in increments of 100, you can

00:17:04,480 --> 00:17:08,380
have fined-grained control depending on the font author.

00:17:08,380 --> 00:17:22,059
We can change the width of the font.

00:17:22,059 --> 00:17:26,140
These are called registered axis which means they're expected to be there for the most

00:17:26,140 --> 00:17:27,140
variable fonts.

00:17:27,140 --> 00:17:32,300
They're not expected but - the very, very cool thing about variable fonts is that you

00:17:32,300 --> 00:17:37,490
can build custom axes into the font file as an author, and we can expose those in the

00:17:37,490 --> 00:17:38,570
font editor.

00:17:38,570 --> 00:17:46,220
Here, we can change the ascender height, so the ascender is making our case, our Bs, our

00:17:46,220 --> 00:17:54,110
Ks, a lot small, or change the serif height is more subtle to see on stage, but it definitely

00:17:54,110 --> 00:18:01,020
works in tweaking the font to your desired behaviour.

00:18:01,020 --> 00:18:04,850
What makes this very powerful is that, in order to do these things are variable fonts,

00:18:04,850 --> 00:18:11,090
you have to read the font file, read the documentation, and know that piece custom axes exist.

00:18:11,090 --> 00:18:18,200
I'm going to turn on a mode called Free Paint Mode in Firefox so you can see what is happening.

00:18:18,200 --> 00:18:23,710
The actual notation you need to write by hand is in font variation he gets settings.

00:18:23,710 --> 00:18:27,370
It is a bit cryptic if you want to write this.

00:18:27,370 --> 00:18:32,380
The font editor comes in handy when you want to do these things and explore, and drive-by

00:18:32,380 --> 00:18:35,400
exploration of variable fonts on the web.

00:18:35,400 --> 00:18:37,610
We're working on this in Firefox Nightly.

00:18:37,610 --> 00:18:41,550
Thankfully, it's behind the flag.

00:18:41,550 --> 00:18:45,110
This and variable fonts are coming very, very soon.

00:18:45,110 --> 00:18:49,940
If you're interested in variable fonts, this is a website I recommend you check out.

00:18:49,940 --> 00:18:56,630
Axispraxis is a playground for variable fonts which does pretty the same as our font editor.

00:18:56,630 --> 00:18:59,710
It gives you the axis so you can play with them.

00:18:59,710 --> 00:19:06,080
The font editor, you can go on any website and have them work for you.

00:19:06,080 --> 00:19:09,230
Next, the shape path editor.

00:19:09,230 --> 00:19:17,770
This is an editor for helping you use CSS shapes and clip path notation in a very visual

00:19:17,770 --> 00:19:18,770
way.

00:19:18,770 --> 00:19:22,840
So, over here, I'm going to turn on this demo again, and, what is probably very visible

00:19:22,840 --> 00:19:25,690
is that I have my text wrapping around the tree over there.

00:19:25,690 --> 00:19:31,320
The way it's doing that is using a CSS property called shapeoutside which changes the float

00:19:31,320 --> 00:19:36,080
rectangle.

00:19:36,080 --> 00:19:41,390
That's a Polygon representation over there which I doubt anyone would write by hand.

00:19:41,390 --> 00:19:45,400
For this, we have the CSS shaped path editor.

00:19:45,400 --> 00:19:47,390
We can enable it by clicking here.

00:19:47,390 --> 00:19:53,250
We get an overlay of an editor, so we can drag these points around.

00:19:53,250 --> 00:19:54,900
[Applause].

00:19:54,900 --> 00:19:56,360
Thank you.

00:19:56,360 --> 00:20:01,000
So we can drag these points around, double-click to remove them, and we can see our changes

00:20:01,000 --> 00:20:02,490
happening contextually on the page.

00:20:02,490 --> 00:20:05,760
This is important because it interacts.

00:20:05,760 --> 00:20:09,410
You need to do this on the page so you can understand what is going on.

00:20:09,410 --> 00:20:10,410
Here's a trick.

00:20:10,410 --> 00:20:14,850
We can hold down the control key on windows or the command key, and press this thing.

00:20:14,850 --> 00:20:20,450
Now we get a transforms editor which allows us to change the entire shape up and down.

00:20:20,450 --> 00:20:23,440
We can also rotate the shape.

00:20:23,440 --> 00:20:27,470
We can scale it, many crazy different things.

00:20:27,470 --> 00:20:34,160
This is working for shape-outside properties right now, but it also works for clip paths

00:20:34,160 --> 00:20:36,710
because they use the same value notation.

00:20:36,710 --> 00:20:39,740
What is an Alice in Wonderland demo without the Cheshire Cat?

00:20:39,740 --> 00:20:44,130
It has been watching us from up here.

00:20:44,130 --> 00:20:45,130
I can review.

00:20:45,130 --> 00:20:49,470
By watching this element which has a clip path circle very small.

00:20:49,470 --> 00:20:52,860
As I drag this handle here, I can reveal ... [Applause].

00:20:52,860 --> 00:20:53,860
[Laughter].

00:20:53,860 --> 00:20:59,260
We were clipping an element.

00:20:59,260 --> 00:21:00,270
Thank you.

00:21:00,270 --> 00:21:03,460
We were actually clipping this element with the clip path.

00:21:03,460 --> 00:21:07,660
Again, the notation for circle is relatively easy, but you can imagine this being handy

00:21:07,660 --> 00:21:10,620
for polygons which it also works for.

00:21:10,620 --> 00:21:15,549
An extra thing you see there is the rectangle informing you of the extent of the element

00:21:15,549 --> 00:21:20,929
which would be clipped, so you understand if say, for example, you don't see why clipping

00:21:20,929 --> 00:21:24,050
doesn't happen outside of it, that is your representation.

00:21:24,050 --> 00:21:29,980
So these are tools that we are building to empower you to play with features right into

00:21:29,980 --> 00:21:31,280
the browser.

00:21:31,280 --> 00:21:32,280
Specialised tools.

00:21:32,280 --> 00:21:40,420
Now, CSS shapes is I think done in Firefox, and it's imminent, like the release is imminent.

00:21:40,420 --> 00:21:42,049
Next couple of weeks, I believe.

00:21:42,049 --> 00:21:47,100
So, Shapes are coming in Firefox and the Shape Editor launching at the same time.

00:21:47,100 --> 00:21:52,520
Alleys switch over to the last part which is ergonomics.

00:21:52,520 --> 00:21:58,800
This means that people really love tools when they can customise them to suit the way they

00:21:58,800 --> 00:21:59,800
work.

00:21:59,800 --> 00:22:03,570
People work in many different ways throughout our industry.

00:22:03,570 --> 00:22:05,570
And that's probably not news to you.

00:22:05,570 --> 00:22:12,740
But what maybe is news is that the developer tools team in any browser you know has very

00:22:12,740 --> 00:22:18,550
few people working on it, and there is generally very few people maintaining codebase for a

00:22:18,550 --> 00:22:20,400
large, large audience.

00:22:20,400 --> 00:22:25,430
Some of us are thankful to have contributors like volunteers we have at Mozilla who fix

00:22:25,430 --> 00:22:30,679
bugs, and who even implement features altogether, and we are really thankful foyer their effort

00:22:30,679 --> 00:22:36,340
but the reality is we need to work against some priorities, and sometimes, those priorities

00:22:36,340 --> 00:22:38,919
may not be the same thing you care about.

00:22:38,919 --> 00:22:43,070
And, when people want something built, they just go ahead and do it.

00:22:43,070 --> 00:22:49,660
So, I was really happy to learn earlier this month that a Chrome DevTools extension now

00:22:49,660 --> 00:22:53,490
has over one million users.

00:22:53,490 --> 00:23:00,040
As much as we love React in DevTools, I think it is hard to imagine that anyone would prioritise

00:23:00,040 --> 00:23:05,880
building DevTools for React into DevTools knowing how transient and ever-changing frameworks

00:23:05,880 --> 00:23:06,880
are.

00:23:06,880 --> 00:23:10,600
That didn't stop people who were motivated and skilled enough to build these tools and

00:23:10,600 --> 00:23:11,730
share them with others.

00:23:11,730 --> 00:23:15,910
They recognise the need, build the tool for it, and this is popular.

00:23:15,910 --> 00:23:18,090
This is the power of billing extensions.

00:23:18,090 --> 00:23:24,210
So, at this point, I should just encourage you all to build DevTools extensions for web

00:23:24,210 --> 00:23:25,210
designers.

00:23:25,210 --> 00:23:27,429
Well, I could do that.

00:23:27,429 --> 00:23:33,500
Well, you can get a panel added to your DevTools - like my extension over there - or you can

00:23:33,500 --> 00:23:37,740
get a sidebar panel placed next to the rules over there.

00:23:37,740 --> 00:23:42,620
If you're using free-paint mode in Firefox, you have the rules panels separate and you

00:23:42,620 --> 00:23:47,581
have a design surface next to it, and you can see those changes happening in the rule

00:23:47,581 --> 00:23:49,270
view.

00:23:49,270 --> 00:23:54,870
But if that panel looks very lonely and empty, it is because it is.

00:23:54,870 --> 00:23:59,220
In reality, DevTools extensions are very, very isolated.

00:23:59,220 --> 00:24:04,120
They know almost nothing about the DevTools environment, and they have a very loose connection

00:24:04,120 --> 00:24:08,280
with the inspected page through rudimentary text-based protocol.

00:24:08,280 --> 00:24:13,651
So, if you want to build DevTools, for designers, you don't actually have access to the rule

00:24:13,651 --> 00:24:14,651
view.

00:24:14,651 --> 00:24:16,910
You don't know which rules have applied to that element.

00:24:16,910 --> 00:24:20,480
You don't know if the node is changing.

00:24:20,480 --> 00:24:23,280
You don't knee if the DevTools has closed underneath your feet.

00:24:23,280 --> 00:24:24,530
That's kind of weird.

00:24:24,530 --> 00:24:30,669
So, if you want to build DevTools extensions right now, you have to do a lot of work just

00:24:30,669 --> 00:24:33,940
to get to the point where you can start building your specialised editor.

00:24:33,940 --> 00:24:36,120
Now, that's not a good way of working.

00:24:36,120 --> 00:24:40,130
So, here comes a proposal: what if we could change that?

00:24:40,130 --> 00:24:47,370
What if we can write extension APIs that allow you to plug into the rule view and subscribe

00:24:47,370 --> 00:24:49,840
with the specialised editor for a property?

00:24:49,840 --> 00:24:55,500
Say, you want to write an editor for font weight which has a slider with notches over

00:24:55,500 --> 00:25:05,430
there, and maybe a dropdown to pick one of the instances.

00:25:05,430 --> 00:25:15,150
The browser should do the leg work of closing your editor and events in the change, and

00:25:15,150 --> 00:25:19,130
then sending events by something else.

00:25:19,130 --> 00:25:32,870
But there's no real reason why we expose this one editor at

00:25:32,870 --> 00:25:35,540
a time.

00:25:35,540 --> 00:25:52,030
.... So we can

00:25:52,030 --> 00:26:02,320
have a font size editor which allows you to see

00:26:02,320 --> 00:26:07,640
what you're picking is not legible or not, or margin that does shorthand ex-pangs over

00:26:07,640 --> 00:26:08,710
there.

00:26:08,710 --> 00:26:13,870
These would be inline editors, and I give you the freedom to really focus on something

00:26:13,870 --> 00:26:17,120
you want to implement, a specialised editor.

00:26:17,120 --> 00:26:21,650
We can also open up the previews, so we can have previews of angles.

00:26:21,650 --> 00:26:24,570
This is a demo built by one of my colleagues.

00:26:24,570 --> 00:26:35,929
We can get closer to the vision Leah had and ex pose the tool tip to preview one at a time.

00:26:35,929 --> 00:26:41,360
If we have an extension ecosystem and the browser knows these extensions exist in the

00:26:41,360 --> 00:26:45,880
store, then it could get to a point where we could smartly look at something, see a

00:26:45,880 --> 00:26:51,130
property that there's an editor for, and we can recommend this to you in context, so you

00:26:51,130 --> 00:26:57,320
can install an extension for DevTools right in context, and solve the problem as you are

00:26:57,320 --> 00:26:58,880
there.

00:26:58,880 --> 00:27:06,620
Now, if these things sound interesting to you, and if you want to build extensions like

00:27:06,620 --> 00:27:11,840
these, if you're a web designer that wants extensions built for them like this, we're

00:27:11,840 --> 00:27:14,300
very, very interested in hearing from you.

00:27:14,300 --> 00:27:18,330
Please reach out to me or my colleagues in Firefox DevTools.

00:27:18,330 --> 00:27:23,590
We want to understand what classes of problems you're trying to solve, so as to build an

00:27:23,590 --> 00:27:30,990
API which really serves your needs well, because we're really interested in building tools

00:27:30,990 --> 00:27:32,450
that work well for you.

00:27:32,450 --> 00:27:37,000
Because, until we do that, we are always going to do some form of limitation in the creative

00:27:37,000 --> 00:27:43,230
expression you get into DevTools, and we cannot design in the browser unless we make DevTools

00:27:43,230 --> 00:27:47,240
for designers actually good.

00:27:47,240 --> 00:27:48,240
Thank you very much.

00:27:48,240 --> 00:27:48,740

YouTube URL: https://www.youtube.com/watch?v=oGobLmA_WVQ


