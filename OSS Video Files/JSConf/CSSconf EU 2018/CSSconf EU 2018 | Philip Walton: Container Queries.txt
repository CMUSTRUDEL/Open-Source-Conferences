Title: CSSconf EU 2018 | Philip Walton: Container Queries
Publication date: 2018-06-02
Playlist: CSSconf EU 2018
Description: 
	Container Queries: The Past, Future, and How You Can Actually Even Use Them Today

Container queries have been one of (if not the) most requested CSS features for several years now, and yet there are no specifications attempting to design them nor browser vendors attempting to implement them. Why is that?

The truth is that while high-level CSS container query APIs aren’t currently being worked on, several low-level web primitives are being developed that will make container queries possible. In this talk I’ll present the history of container queries, explore the challenges they present, and show you how several new browser APIs actually do make container queries possible today.

CSSconf EU will be back on May 31st 2019: https://2019.cssconf.eu/
Captions: 
	00:00:05,500 --> 00:00:06,000
Hello, my name is Philip Walton

00:00:06,000 --> 00:00:11,530
I'm an engineer on the Chrome and web platform team at footballing, and I'm really excited

00:00:11,530 --> 00:00:16,330
to talk to you all today about this, because container queries is one of my favourite topics

00:00:16,330 --> 00:00:21,581
and a feature I've been waiting for for a long, long time, and so I've a lot to say

00:00:21,581 --> 00:00:22,581
about it.

00:00:22,581 --> 00:00:26,560
Let's dive right in.

00:00:26,560 --> 00:00:31,750
Container queries are a contentious topic, and to fully understand why, you have to know

00:00:31,750 --> 00:00:33,290
their history.

00:00:33,290 --> 00:00:38,080
Like many things in this area, their history starts with response to design.

00:00:38,080 --> 00:00:44,070
So, in 2010, Responsive Web Design was published and changed the way we think about web design

00:00:44,070 --> 00:00:45,870
forever.

00:00:45,870 --> 00:00:50,320
Web developers can build sites with one set of styles and confidently serve those styles

00:00:50,320 --> 00:00:51,690
to any device.

00:00:51,690 --> 00:00:56,730
Over the next year or so, you started to see the same questions popping up over and over

00:00:56,730 --> 00:01:02,860
again: as the web matured and its modular component-based architecture started to gain

00:01:02,860 --> 00:01:07,290
popularity, a lot of people were noticing the limitations of using media queries to

00:01:07,290 --> 00:01:09,579
build responsive designs.

00:01:09,579 --> 00:01:15,090
In 2013, prominent voices in the community, like Nicholas Gallagher, were starting to

00:01:15,090 --> 00:01:21,499
suggest that responsive designs should really be component-based rather than viewport based.

00:01:21,499 --> 00:01:26,899
Folks like Jonathan Neil started proposing new syntax that could support element-based

00:01:26,899 --> 00:01:30,000
queries in CSS.

00:01:30,000 --> 00:01:36,490
Probably the most influential thing came in April of 2013 a post on the front page of

00:01:36,490 --> 00:01:38,320
Hacker News for a while.

00:01:38,320 --> 00:01:47,359
He called - he said the definitions for the design and lay-out of a particular site.

00:01:47,359 --> 00:01:50,329
He said that what we really need are element queries.

00:01:50,329 --> 00:01:54,479
And this article is largely responsible for popularising that term.

00:01:54,479 --> 00:02:01,429
So, a few days after that, after getting slammed with requests for this feature, my colleague

00:02:01,429 --> 00:02:06,340
and CSS working group member, wrote a reply that summarises the problems with element

00:02:06,340 --> 00:02:11,000
queries, and it's kind of become the de facto response from the working group whenever developers

00:02:11,000 --> 00:02:13,110
ask for this feature.

00:02:13,110 --> 00:02:16,750
So I will explain the argument in a second, but for now, the main thing I want you to

00:02:16,750 --> 00:02:23,440
understand, that in many of the valid points, developers still wanted element queries to

00:02:23,440 --> 00:02:25,100
be a thing.

00:02:25,100 --> 00:02:30,430
Blog posts were written.

00:02:30,430 --> 00:02:35,660
For example, this one includes a great example that I think perfectly illustrates the problem.

00:02:35,660 --> 00:02:39,860
So, with media queries, you can build a calendar widget like this one and it works great on

00:02:39,860 --> 00:02:46,230
desktop and mobile, but it only works if the counter widget is rendered in the content

00:02:46,230 --> 00:02:51,790
area that is the same width of the screen.

00:02:51,790 --> 00:02:56,860
If you try to put it in a said bar, it will break because the media queries report a wide

00:02:56,860 --> 00:03:00,200
view port.

00:03:00,200 --> 00:03:04,470
We need the ability for the calendar to detect that it is in an arrow context and render

00:03:04,470 --> 00:03:06,510
itself accordingly.

00:03:06,510 --> 00:03:15,090
To prove that this is isn't a contrived example, this is a an example of the new calendar in

00:03:15,090 --> 00:03:23,400
Google and the same rendered in Gmail in the side bar.

00:03:23,400 --> 00:03:29,060
Not only is it being reused in a different view, but being used in an entirely different

00:03:29,060 --> 00:03:33,900
web application, two different code basis using the same component.

00:03:33,900 --> 00:03:38,569
This is a real-world example of how responsive design is more than just about page layouts.

00:03:38,569 --> 00:03:42,350
It is definitely about component layouts.

00:03:42,350 --> 00:03:46,600
But since browsers weren't implementing element queries natively, developers started to build

00:03:46,600 --> 00:03:48,270
polyfils.

00:03:48,270 --> 00:03:53,380
Since there is no official syntax, each made up its own syntax, unofficial syntax.

00:03:53,380 --> 00:03:58,430
The problem with inventing your own syntax is that it creates a potential future compatible

00:03:58,430 --> 00:03:59,819
risk.

00:03:59,819 --> 00:04:01,680
Something we see a lot in the JavaScript community.

00:04:01,680 --> 00:04:06,680
Recent examples like smush-gate chose to pinned.

00:04:06,680 --> 00:04:17,229
It started a standardisation effort for element queries.

00:04:17,229 --> 00:04:22,520
And after their heroic work getting the picture element standardised in browsers, developers

00:04:22,520 --> 00:04:23,539
had high hopes.

00:04:23,539 --> 00:04:27,930
Unfortunately, though, the work was met with a lot of resistance from browser surrenders

00:04:27,930 --> 00:04:31,439
as well as the CSS working group.

00:04:31,439 --> 00:04:38,860
In 2015, an article was borrow and the challenges and explained that element queries, at least

00:04:38,860 --> 00:04:43,990
in the current form, were essentially dead.

00:04:43,990 --> 00:04:47,370
Given the resistance and challenges related to element queries, the group perspective

00:04:47,370 --> 00:04:51,340
today for something they thought might be easy to get through the standard bodies, so

00:04:51,340 --> 00:04:54,930
they called it container queries, and thus this new term was born.

00:04:54,930 --> 00:04:59,879
Instead of having CSS conditionally target an element itself, it targets the element's

00:04:59,879 --> 00:05:01,889
immediate patient.

00:05:01,889 --> 00:05:06,520
Unfortunately, while it's true that container queries is less problematic than element queries,

00:05:06,520 --> 00:05:12,909
they are still problematic and strong resistance from browsers to implement them.

00:05:12,909 --> 00:05:18,250
But was again, developers kept on asking.

00:05:18,250 --> 00:05:22,840
It was hypothesised on Twitter, if element queries were real, they would be used more

00:05:22,840 --> 00:05:32,330
often than media queries.

00:05:32,330 --> 00:05:37,849
So the question is: if container queries are useful in design, and developers clearly want

00:05:37,849 --> 00:05:41,400
them, why don't they exist?

00:05:41,400 --> 00:05:45,689
It almost feels like there's this epic battle between web developers and browser makers

00:05:45,689 --> 00:05:49,059
where neither side fully understand the other.

00:05:49,059 --> 00:05:56,000
Jimmy Keith describes the sentiment well in a post he published a year ago in his blog:

00:05:56,000 --> 00:06:00,270
according to him, browser makers always claim they want real-world feedback from actual

00:06:00,270 --> 00:06:05,699
developers, but when developers tell them they want container queries, browser makers

00:06:05,699 --> 00:06:08,039
don't know what to say."

00:06:08,039 --> 00:06:12,479
To be honest, in my experience, this is mostly true.

00:06:12,479 --> 00:06:17,220
So you have browser-makers - so, I mean, it begs the question: have browser-makers put

00:06:17,220 --> 00:06:23,080
on their evil goatees, in a dystopian timeline where developers don't get any say in the

00:06:23,080 --> 00:06:26,419
future of the web?

00:06:26,419 --> 00:06:31,120
Before we get too cynical, let's look at why browser-makers are concerned about container

00:06:31,120 --> 00:06:32,120
queries.

00:06:32,120 --> 00:06:40,590
Due to the way CSS works in browsers today, containers present two primary problems: the

00:06:40,590 --> 00:06:47,020
first is the infinite loan incursion problem.

00:06:47,020 --> 00:06:52,389
The second less familiar one is that they actually break the cascade.

00:06:52,389 --> 00:06:56,009
So consider these two CSS rules.

00:06:56,009 --> 00:07:00,979
The first one defines an element that defaults to 500 pixels wide; the second conditionally

00:07:00,979 --> 00:07:08,839
overrides the first rule to say if it gets wider, make it 4 pixels instead.

00:07:08,839 --> 00:07:14,909
However, if we make it 499 pixels, then the selector will no longer match.

00:07:14,909 --> 00:07:19,270
But this means we are back to just the first selector matching, and remember, the first

00:07:19,270 --> 00:07:22,470
selector tells the browser to make the element 500 pixels wide.

00:07:22,470 --> 00:07:26,830
That means the second selector now matches again and you can see we have a problem where

00:07:26,830 --> 00:07:30,169
an infinite loop and it's not an obvious way to resolve this.

00:07:30,169 --> 00:07:33,840
Note that this problem doesn't just apply to element queries.

00:07:33,840 --> 00:07:37,610
It also applies to container queries.

00:07:37,610 --> 00:07:42,830
Oftentimes in CSS, an element size is determined by the size of its children.

00:07:42,830 --> 00:07:47,240
This is known as shrink-to-fit and it can happen with things like inline-block and floats

00:07:47,240 --> 00:07:49,620
like in this example.

00:07:49,620 --> 00:07:53,990
So here we have a container floated and a child element with a declared width of 500

00:07:53,990 --> 00:07:54,990
pixels.

00:07:54,990 --> 00:07:59,319
Since the container is floated, it will be the same width as its child, so it is also

00:07:59,319 --> 00:08:01,860
500 pixels wide.

00:08:01,860 --> 00:08:06,400
But the next rule says in the event that the container's width is 500 pixels or greater,

00:08:06,400 --> 00:08:10,589
the child's width should be set to 499 pixels.

00:08:10,589 --> 00:08:15,419
Since the container is floated, changing the child's width will also change the container's

00:08:15,419 --> 00:08:17,809
width to 499 pixels.

00:08:17,809 --> 00:08:23,319
Now you can see that we have the same problem that we had before.

00:08:23,319 --> 00:08:26,270
So that's how container queries can lead to infinite loops.

00:08:26,270 --> 00:08:32,820
Let's look at how they brake assumptions that the browsers make about the cascade.

00:08:32,820 --> 00:08:37,000
In order to understand why this is the case, you have to first have an understanding of

00:08:37,000 --> 00:08:42,720
how browsers take CSS and HTML and render content to the screen.

00:08:42,720 --> 00:08:49,140
They render in three distinct phases: style, layout, and paint.

00:08:49,140 --> 00:08:55,160
Before I explain them, I wanted to make sure one thing is clear: they are distinct and

00:08:55,160 --> 00:08:56,530
sequential.

00:08:56,530 --> 00:09:00,580
Meaning that each one must completely finish before the next one starts.

00:09:00,580 --> 00:09:05,040
That's very important.

00:09:05,040 --> 00:09:08,570
Let's look at the style phase.

00:09:08,570 --> 00:09:16,880
In the style phase, the browser goes through every single element in the DOM, it matches

00:09:16,880 --> 00:09:20,880
with with selectors in the CSS, and then it determines what value should apply to every

00:09:20,880 --> 00:09:24,130
single CSS property the browser supports.

00:09:24,130 --> 00:09:30,060
This is known as the cascade.

00:09:30,060 --> 00:09:35,130
Most websites have hundreds if not thousands of style rules and DOM elements, so it's critically

00:09:35,130 --> 00:09:39,690
important that this process can run as efficiently and quickly as possible.

00:09:39,690 --> 00:09:43,160
So I think most people in this room probably understand how things like specificity and

00:09:43,160 --> 00:09:47,430
short order work, so I will go through this quick.

00:09:47,430 --> 00:09:50,870
When doing style calculations, you have to start with the root element in the tree and

00:09:50,870 --> 00:09:52,250
traverse down.

00:09:52,250 --> 00:09:58,300
Most of the time, s element is HTML, but in this example, the root element is a section.

00:09:58,300 --> 00:10:03,580
So the reason you have to start the root element is because some properties are inherited which

00:10:03,580 --> 00:10:07,910
means that you have to compute the full set of properties for the parent before you can

00:10:07,910 --> 00:10:14,070
move on to the child.

00:10:14,070 --> 00:10:22,990
Actually, that's not quite true - technically, you also need to list the default values for

00:10:22,990 --> 00:10:27,570
every CSS property that's not mentioned by any specific rule.

00:10:27,570 --> 00:10:31,700
It looks like this which is just a little bit verbose.

00:10:31,700 --> 00:10:34,390
For the purposes of these examples, I will imply this.

00:10:34,390 --> 00:10:39,600
I will not list every single property that the browser source in every single case.

00:10:39,600 --> 00:10:46,670
Also, technically, you don't use the shorthand, you use the longhand for these properties,

00:10:46,670 --> 00:10:48,870
but this is getting into the details.

00:10:48,870 --> 00:10:53,820
It's easy to show the individual properties that match to the rules defined if the CSS.

00:10:53,820 --> 00:10:57,730
So next to come to the UL, and we do the same for it.

00:10:57,730 --> 00:11:00,740
As you can see, there are four properties and two rules, and the patient element doesn't

00:11:00,740 --> 00:11:04,160
have any non-default inheritable properties to those that apply, with , so this is the

00:11:04,160 --> 00:11:05,670
full set of properties.

00:11:05,670 --> 00:11:09,480
It gets more interesting when we get to the LI.

00:11:09,480 --> 00:11:14,170
As you can see, two rules match, but due to source order, the second declaration overrides

00:11:14,170 --> 00:11:15,900
the first one.

00:11:15,900 --> 00:11:19,110
So this is the computed set of property.

00:11:19,110 --> 00:11:24,780
We're not quite done yet because the LI is a child of the UL, and that has a colour define,

00:11:24,780 --> 00:11:29,300
and colour is inheritable, so you have to add that to the list.

00:11:29,300 --> 00:11:33,930
Anyway, sorry if this is getting too into the weeds, but it is actually really easy

00:11:33,930 --> 00:11:37,520
to see how this works when you look in were your browser's developer tools.

00:11:37,520 --> 00:11:41,990
All you have to do is select any DOM element and look at the style paint and see the properties

00:11:41,990 --> 00:11:48,050
that are calculated.

00:11:48,050 --> 00:11:58,480
With regard to this pipeline, now we have done style, only now with key do layout.

00:11:58,480 --> 00:12:03,570
We do what is called kind of at least in Carol, we call this calculating the box tree.

00:12:03,570 --> 00:12:08,920
What you have - you have to take the full set of cascaded properties for an element

00:12:08,920 --> 00:12:14,480
and then you calculate all the kind of rectangular co-ordinates of everything in the DOM.

00:12:14,480 --> 00:12:18,600
In this case, we know that this element is the root elements, so it starts out in the

00:12:18,600 --> 00:12:24,670
top left at zero zero, and since we know it's auto, we know it's going to fill up the entire

00:12:24,670 --> 00:12:29,010
space, so let's imagine it's 600 pixels wide.

00:12:29,010 --> 00:12:32,620
We don't know the height because we have to go through all the tree, but we will get to

00:12:32,620 --> 00:12:33,780
that next.

00:12:33,780 --> 00:12:35,210
The UL is very similar.

00:12:35,210 --> 00:12:39,790
It takes up the same space as the section.

00:12:39,790 --> 00:12:44,830
But when you get to the LI, now we can start developing this box tree, but the important

00:12:44,830 --> 00:12:49,740
thing to remember here, and none of these details are important, they're all kind of,

00:12:49,740 --> 00:12:54,820
faking this example, but the critically important thing to remember is we can't do layout unless

00:12:54,820 --> 00:12:58,510
we know what all of the styles are, so we have to do all the styles first, and then

00:12:58,510 --> 00:12:59,510
layout.

00:12:59,510 --> 00:13:01,570
We can't do them at the same time.

00:13:01,570 --> 00:13:09,500
So the most ly boring part is over, but the main part from all of that, is you have to

00:13:09,500 --> 00:13:11,860
do style before layout.

00:13:11,860 --> 00:13:14,260
Imagine now that we try to implement container queries.

00:13:14,260 --> 00:13:16,910
Imagine your browser, and you're going to implement container queries in your browser

00:13:16,910 --> 00:13:19,450
rendering engine.

00:13:19,450 --> 00:13:21,500
So look at this HTML and CSS again.

00:13:21,500 --> 00:13:24,450
Now let's add another rule that has a container query.

00:13:24,450 --> 00:13:29,840
So, as you can see, this rule conditionally targets LI elements if the parent UL is wide

00:13:29,840 --> 00:13:30,840
enough.

00:13:30,840 --> 00:13:36,680
Let's try to compute what the cascaded property values would be for the LI.

00:13:36,680 --> 00:13:41,240
If you look closely, you notice that there are two different values for the flex property.

00:13:41,240 --> 00:13:45,090
So the question is: which one should be applied?

00:13:45,090 --> 00:13:51,280
Well, the only way to answer this question is to know how wide the UL is.

00:13:51,280 --> 00:13:54,760
Is it wider than 500 pixels or not wider than 500 pixels?

00:13:54,760 --> 00:13:59,790
Since we haven't done layout yet, we don't have that information.

00:13:59,790 --> 00:14:04,290
If you allow selectors to query based on layout information, then you go from a sequential

00:14:04,290 --> 00:14:07,420
rendering pipeline to something like this.

00:14:07,420 --> 00:14:11,840
In this model, we do style again after layout, but since doing style again might completely

00:14:11,840 --> 00:14:16,160
change the results of the cascade, you also have to do layout again, but doing layout

00:14:16,160 --> 00:14:20,410
again may completely change what selectors match which means you have to do style again,

00:14:20,410 --> 00:14:24,700
and you have to repeat this process over and over again until everything kind of settles

00:14:24,700 --> 00:14:28,590
and there are no more changes and only then can you move on.

00:14:28,590 --> 00:14:35,000
This is much, much, much slower than what we have currently today.

00:14:35,000 --> 00:14:38,160
Given what I just showed you, I actually think it's a good thing that browsers push back

00:14:38,160 --> 00:14:41,280
and didn't implement container queries when developers asked.

00:14:41,280 --> 00:14:46,240
If they had done it how developers want it, the web would be significantly slower today,

00:14:46,240 --> 00:14:48,400
and nobody wants that.

00:14:48,400 --> 00:14:52,850
There is good news: the reason I said this isn't the darkest timeline because there are

00:14:52,850 --> 00:14:57,180
few event in the history of container queries that I skipped over and didn't mention.

00:14:57,180 --> 00:15:01,160
The truth is that browser-makers have been working hard to come up with performant solutions

00:15:01,160 --> 00:15:02,990
to this problem.

00:15:02,990 --> 00:15:11,440
In 2015, Chrome started implementing CSS containment, giving developers the way to tell the browser

00:15:11,440 --> 00:15:18,990
what parts of the page lay-out are independent of the other parts.

00:15:18,990 --> 00:15:24,370
It paves the way for potentially avoiding the circularity issue, for example, with CSS

00:15:24,370 --> 00:15:28,810
containment, you can specify an element size can't be affected by any of its descendents,

00:15:28,810 --> 00:15:32,340
no matter how big or small they might be.

00:15:32,340 --> 00:15:36,740
Despite the appearance and belief by some that browser makers and web developers are

00:15:36,740 --> 00:15:38,610
at war, this is definitely not the case.

00:15:38,610 --> 00:15:43,090
There are many examples of browser engineers reaching out to developers and engaging with

00:15:43,090 --> 00:15:47,760
them to see that the features they're specifying will help solve real problems that the developers

00:15:47,760 --> 00:15:49,080
are facing.

00:15:49,080 --> 00:15:53,370
I know there are plenty of browser engineers here today who would love to talk to all of

00:15:53,370 --> 00:15:56,470
you, myself included.

00:15:56,470 --> 00:16:01,680
So continuing on in 2016, Chrome started working on a feature called ResizeObserver which is

00:16:01,680 --> 00:16:10,570
one of my new favourite web APIs, letting you monitor size element on a page with a

00:16:10,570 --> 00:16:12,150
simple callback function.

00:16:12,150 --> 00:16:17,750
Previously, you could only observe changes to the entire window but obviously we know

00:16:17,750 --> 00:16:22,150
it's possible for elements to change their size, even if the window doesn't change.

00:16:22,150 --> 00:16:28,080
Then, finally, in January of this year, Chrome shipped ResizeObserver, which means the feature's

00:16:28,080 --> 00:16:31,680
now available to over two billion users worldwide.

00:16:31,680 --> 00:16:36,370
Where does that leave us today?

00:16:36,370 --> 00:16:38,300
Some of these new features may seem cool.

00:16:38,300 --> 00:16:42,940
We still don't have container queries, right?

00:16:42,940 --> 00:16:47,520
If you squint your eyes hard enough, and you're willing to take the definition of "container

00:16:47,520 --> 00:16:53,410
queries" very annoyingly literally, then we actually have had them since the beginning

00:16:53,410 --> 00:16:55,470
of CSS.

00:16:55,470 --> 00:17:01,730
For example, where here we define styles for an input and header element and then override

00:17:01,730 --> 00:17:07,930
the styles on the state classes that can be applied to the state let me's containers.

00:17:07,930 --> 00:17:10,559
A selector is essentially a query, right?

00:17:10,559 --> 00:17:13,829
So these are kind of like container queries.

00:17:13,829 --> 00:17:18,880
We can use the same concept to build something today that I think is as good if not even

00:17:18,880 --> 00:17:22,490
better than the queries that developers have been asking for.

00:17:22,490 --> 00:17:24,430
I call this responsive components.

00:17:24,430 --> 00:17:27,140
Let me show you what I mean.

00:17:27,140 --> 00:17:32,110
This is the CSS for component which uses the hypothetical container query syntax.

00:17:32,110 --> 00:17:36,270
You start by applying base styles to an element.

00:17:36,270 --> 00:17:40,520
These styles apply, they define on the elements, so they apply in all situations.

00:17:40,520 --> 00:17:46,880
Then you additional styles for when the container is 36ms or wider, and you add even more styles

00:17:46,880 --> 00:17:49,220
for when it is 48 or wider.

00:17:49,220 --> 00:17:54,110
This similar to how we do mobile-first design today.

00:17:54,110 --> 00:18:00,170
Now imagine you replace those hypothetical pseudo-class functions with actual classes.

00:18:00,170 --> 00:18:03,810
Of course, this isn't magic.

00:18:03,810 --> 00:18:06,300
It only works if those classes are in the DOM.

00:18:06,300 --> 00:18:08,380
That's the only way that they will apply.

00:18:08,380 --> 00:18:12,580
Then they have to be automatically added and removed if the container changes size.

00:18:12,580 --> 00:18:15,830
It will have to work a little bit like this.

00:18:15,830 --> 00:18:20,220
Note how the classes are added and removed from the container as the box gets bigger

00:18:20,220 --> 00:18:28,720
and then smaller.

00:18:28,720 --> 00:18:31,809
So the question is, can we make this work?

00:18:31,809 --> 00:18:33,170
If so, how?

00:18:33,170 --> 00:18:38,050
This is exactly where ResizeObserver comes into play, and why it's is to so great.

00:18:38,050 --> 00:18:42,620
This is code that implement the exact logic I showed you in a previous slide.

00:18:42,620 --> 00:18:44,240
It is not that much code.

00:18:44,240 --> 00:18:46,690
Let's go through it.

00:18:46,690 --> 00:18:51,510
The first thing you create is a ResizeObserver instance and you pass a callback function.

00:18:51,510 --> 00:18:55,760
This callback function is invoked any time the elements that you're observing change

00:18:55,760 --> 00:18:57,430
their size.

00:18:57,430 --> 00:19:05,059
You get past a list of elements because elements can change at one time and you're given more

00:19:05,059 --> 00:19:07,630
details in those.

00:19:07,630 --> 00:19:14,180
So, in the next function, we define a set of breakpoint names and their respective minimum

00:19:14,180 --> 00:19:15,180
widths.

00:19:15,180 --> 00:19:19,470
This is the mapping between the break point names we're going to use and the width that

00:19:19,470 --> 00:19:20,470
we decide.

00:19:20,470 --> 00:19:26,190
Then we loop through a list of break points for each changed element, and then if the

00:19:26,190 --> 00:19:30,680
element width is larger than the miniwidth for the break point, we add the class element,

00:19:30,680 --> 00:19:36,030
and, if smaller, we remove the class.

00:19:36,030 --> 00:19:41,280
Next we set that the observer is now active and monitoring this element.

00:19:41,280 --> 00:19:45,770
This step is technically optional but useful for styling the element in CSS if you want

00:19:45,770 --> 00:19:49,540
to because it is often the case that you don't want to show an element until its initial

00:19:49,540 --> 00:19:51,780
break point is set.

00:19:51,780 --> 00:19:56,440
Finally, we query for all container elements in the DOM and start observing them.

00:19:56,440 --> 00:20:01,730
I should point out that the callback gets observed elements so you have to explicitly

00:20:01,730 --> 00:20:02,730
observe them.

00:20:02,730 --> 00:20:04,890
It doesn't by default observe all elements.

00:20:04,890 --> 00:20:08,480
That would be too inefficient.

00:20:08,480 --> 00:20:15,610
So some of you might share the opinion expressed in this tweet, and while I understand the

00:20:15,610 --> 00:20:25,231
sentiment, and, even though the technique uses JavaScript, it doesn't depend on it.

00:20:25,231 --> 00:20:29,290
It doesn't break without it, or if there are any errors with the JavaScript.

00:20:29,290 --> 00:20:33,400
So, if you look at the CSS again, you will notice that I defined an initial set of base

00:20:33,400 --> 00:20:37,270
styles that don't have any break point classes attached.

00:20:37,270 --> 00:20:41,141
If the user has JavaScript disabled or there was an error when trying to run it, these

00:20:41,141 --> 00:20:42,700
base styles will still apply.

00:20:42,700 --> 00:20:48,550
It is like if you load a mobile website on your desktop browser, it might look weird,

00:20:48,550 --> 00:20:50,929
but it's still completely usable.

00:20:50,929 --> 00:20:54,059
This is a textbook example of progressive enhancement.

00:20:54,059 --> 00:21:02,300
I don't see - even in cases where JavaScript is disabled, or if there is an error running

00:21:02,300 --> 00:21:08,630
it, we can use CSS to guarantee our components will always be displayed because errors in

00:21:08,630 --> 00:21:10,410
JavaScript will not affect CSS.

00:21:10,410 --> 00:21:13,760
This is a great use case for CSS.

00:21:13,760 --> 00:21:22,190
So, we define an animation with two-second initial delay that fades in for each container

00:21:22,190 --> 00:21:25,780
element, and then if the JavaScript fails for some reason, the cache element will still

00:21:25,780 --> 00:21:31,030
become vis - the container element will become visible at most two seconds after the CSS

00:21:31,030 --> 00:21:33,850
is loaded.

00:21:33,850 --> 00:21:38,590
When you're ResizeObserver code runs, and it runs sooner than that, we remove the animation,

00:21:38,590 --> 00:21:41,280
and so everything works as normal.

00:21:41,280 --> 00:21:46,520
Lastly, we add a no script tag, so if JavaScript is turned off entirely, we show the element

00:21:46,520 --> 00:21:47,520
no matter what.

00:21:47,520 --> 00:21:50,120
We don't have that delay.

00:21:50,120 --> 00:21:54,980
So, if you're building a complex web application that has container queries, there's a good

00:21:54,980 --> 00:22:00,940
chance you're using a component architecture, whether it is something like React, or native

00:22:00,940 --> 00:22:08,080
web components, you can get to dynamic DOM.

00:22:08,080 --> 00:22:12,170
With custom elements, you can hook into the custom callback which gets invoked when the

00:22:12,170 --> 00:22:19,170
element is added to the DOM and observe new container elements as they're created.

00:22:19,170 --> 00:22:23,340
As a point, you don't have to worry about unobserving removed elements because that

00:22:23,340 --> 00:22:27,600
gets handled by garbage collection.

00:22:27,600 --> 00:22:31,090
The other really nice thing about using custom elements is then you can give them more meaningful

00:22:31,090 --> 00:22:32,980
famous like this.

00:22:32,980 --> 00:22:37,929
You can also easily define a base container class that all other responsive components

00:22:37,929 --> 00:22:43,440
can extend or behaviours that they can mix in.

00:22:43,440 --> 00:22:53,050
I know it's not cool to show a slide with minified code, even though this is a - 100

00:22:53,050 --> 00:23:00,550
per cent of the code to make this work, both the CSS and the JavaScript, is on this slide

00:23:00,550 --> 00:23:02,350
right here.

00:23:02,350 --> 00:23:08,560
And this is actually hand transpiled ES5, so it will work in IE11 as well.

00:23:08,560 --> 00:23:14,700
Also, note, this assumes that the browser supports ResizeObserver, so, if you want to

00:23:14,700 --> 00:23:19,520
use this code on a producer that doesn't use ResizeObserver, you can import a polyfill.

00:23:19,520 --> 00:23:24,410
You don't have to load the polyfill, because if the browser doesn't support ResizeObserver

00:23:24,410 --> 00:23:27,620
and you get an error, you get the base styles.

00:23:27,620 --> 00:23:33,110
So, to prove that this technique works, I built the demo side a few days ago showing

00:23:33,110 --> 00:23:39,500
the - you can resize them in a variety of different ways, and the UI is supposed to

00:23:39,500 --> 00:23:42,740
mimic common patterns that I see in the wild.

00:23:42,740 --> 00:23:49,050
So, in this case, the side bars are expandible and collapsable, and this pane is resizable

00:23:49,050 --> 00:23:50,360
by the user.

00:23:50,360 --> 00:23:55,190
There's no way to handle situations like this with media queries, because you have no idea

00:23:55,190 --> 00:23:59,510
what the user's preference will be and what size they will make these errors.

00:23:59,510 --> 00:24:06,700
It is built with regular DOM and as well as custom elements, and the source code is clearly

00:24:06,700 --> 00:24:11,220
linked from the site so you can dive in and see how it's implemented.

00:24:11,220 --> 00:24:12,720
The site works cross-browser.

00:24:12,720 --> 00:24:14,240
It is not a Chrome- onlithing.

00:24:14,240 --> 00:24:19,960
It even works in IE and even works when JavaScript is turned off.

00:24:19,960 --> 00:24:24,670
Even though ResizeObserver is chrome-only, this demo shows that that is not a good enough

00:24:24,670 --> 00:24:26,800
reason not to use the technique.

00:24:26,800 --> 00:24:27,800
It does work everywhere.

00:24:27,800 --> 00:24:32,120
It is progressive enhancement like I said before.

00:24:32,120 --> 00:24:38,310
So summarise, container queries don't exist in the form that developers have been asking

00:24:38,310 --> 00:24:39,310
for.

00:24:39,310 --> 00:24:42,630
There are lots of ways to mimic the behaviours with web technologies.

00:24:42,630 --> 00:24:51,570
The strict I've outlined here is performant, it is easy to implement, it doesn't require

00:24:51,570 --> 00:24:59,080
any specific JavaScript framework or build tool, and even works without JavaScript entirely.

00:24:59,080 --> 00:25:05,370
Now that we've discussed the past and present, let's look at what the future might bring.

00:25:05,370 --> 00:25:10,870
So the good news is that the W3C, through their web community group, has restarted the

00:25:10,870 --> 00:25:13,870
container query efforts.

00:25:13,870 --> 00:25:20,760
This has been led by Mozilla and the new spec is being edited by Tommy Hodgkins, the creator

00:25:20,760 --> 00:25:27,420
of the polyfill before while it's impossible to say for sure what the future will bring,

00:25:27,420 --> 00:25:34,000
let me give you a couple of my predictions: first, browsers are definitely not going to

00:25:34,000 --> 00:25:36,140
be making the web slower.

00:25:36,140 --> 00:25:41,299
This means that any future container solution will be built on top of exiting optimisations

00:25:41,299 --> 00:25:44,310
like CSS containment and ResizeObserver.

00:25:44,310 --> 00:25:50,400
Second, I think web opponents and APIs will be a big part of this future.

00:25:50,400 --> 00:25:55,960
I imagine we ship something like a declarative resize element or component that requires

00:25:55,960 --> 00:26:01,370
60 CSS containment, that way, browsers can easily optimise for it.

00:26:01,370 --> 00:26:02,550
If you're not familiar with web APIs.

00:26:02,550 --> 00:26:04,290
Talk to me about it afterwards.

00:26:04,290 --> 00:26:09,490
It is a really exiting new idea.

00:26:09,490 --> 00:26:15,190
I think some of the experimentation that browsers are doing with async layout might lead to

00:26:15,190 --> 00:26:19,930
breakthroughs in the efficiency we can do layout, even if that happens, I don't think

00:26:19,930 --> 00:26:25,290
container queries will be implemented if they require a multi-pass rendering.

00:26:25,290 --> 00:26:29,679
You can imagine if layouts becomes ten times faster this the browsers pip don't think the

00:26:29,679 --> 00:26:34,470
browser will lose the entire 17 gain to introduce a slow feature.

00:26:34,470 --> 00:26:38,570
Normally, they will be shouting from the rooftops how much faster their browser is than the

00:26:38,570 --> 00:26:40,370
competition.

00:26:40,370 --> 00:26:47,660
Final thoughts: first of all, ResizeObserver finally gives you see the ability to build

00:26:47,660 --> 00:26:51,611
ultra performant truly responsive components, so please build out the ATI.

00:26:51,611 --> 00:26:55,910
If you find anything cool, share it.

00:26:55,910 --> 00:27:02,820
CSS containment will likely shape the future of container queries.

00:27:02,820 --> 00:27:05,010
If you haven't used it, you should try that out as well.

00:27:05,010 --> 00:27:12,260
It can make your site feel faster.third, browser makers and weapon environments should not

00:27:12,260 --> 00:27:13,790
feel like they're at war with each other.

00:27:13,790 --> 00:27:15,400
They should be working together.

00:27:15,400 --> 00:27:20,929
But don't forget, that, while browser makers want the to please web developers, their ultimate

00:27:20,929 --> 00:27:25,179
responsibility it to the users, and that's what we as web developers should care most

00:27:25,179 --> 00:27:27,250
about as well.

00:27:27,250 --> 00:27:29,190
Let's make the web faster for everybody.

00:27:29,190 --> 00:27:30,190
Thank you.

00:27:30,190 --> 00:27:31,190
[Applause].

00:27:31,190 --> 00:27:32,190
Here are the links I talked about.

00:27:32,190 --> 00:27:33,190
I will be at JS CSSconf as well if you want to talk about these things.

00:27:33,190 --> 00:27:33,690

YouTube URL: https://www.youtube.com/watch?v=0wA4CMo9_EU


