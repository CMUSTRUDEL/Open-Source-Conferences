Title: CSSconf EU 2018 | Jackie Balzer: Preprocessors, Components, and CSS in JS
Publication date: 2018-06-02
Playlist: CSSconf EU 2018
Description: 
	Preprocessors, Components, and CSS in JS or: How I Learned to Stop Worrying and Love the Website

Behance’s codebase has existed in various states for over 7 continuous years – which includes multiple major redesigns, brand overhauls, backend framework changes, JavaScript frameworks, CSS preprocessors, templating languages, feature births and deaths, product integrations, and more.

And now, we are working on our latest project: moving our JavaScript and Sass to Vue.js and CSS Modules.

In her talk at CSSconf EU 2018, Jackie Balzer explores her journey over the years, from how to choose which technologies to implement, how to piecemeal large rewrites while maintaining developer sanity and website integrity (and how to cut corners gracefully), how to manage technical debt, and finally, how to be at peace with the reality of a fragmented codebase.

CSSconf EU will be back on May 31st 2019: https://2019.cssconf.eu/
Captions: 
	00:00:05,500 --> 00:00:12,710
Hi, everyone, I'm head of development for an online platform for showcasing and discovering

00:00:12,710 --> 00:00:13,830
creative work.

00:00:13,830 --> 00:00:20,840
I want to share about our journey of growing and maintaining a large codebase in an area

00:00:20,840 --> 00:00:27,630
where front-end technology is changing extremely fast, from our original days of using vanilla

00:00:27,630 --> 00:00:34,140
CSS through to the introduction of preprocessors, and into our current day in JS implementations.

00:00:34,140 --> 00:00:40,890
I will go over some of our trials and tribulations, growing pains, and I will even air some of

00:00:40,890 --> 00:00:46,410
our dirty laundry, but, perhaps most importantly, how I learned to stop worrying and love the

00:00:46,410 --> 00:00:50,650
website.

00:00:50,650 --> 00:00:54,899
The front-end web development ecosystem is moving insanely fast these days.

00:00:54,899 --> 00:00:59,790
It seems like a new tool or methodology for authoring HTML, CSS, and JavaScript becomes

00:00:59,790 --> 00:01:02,560
available every other day.

00:01:02,560 --> 00:01:06,799
Whereas a few years ago, there weren't nearly as many tools with which to work on these

00:01:06,799 --> 00:01:11,560
things, probably in large part because complex front-end requirements like responsive web

00:01:11,560 --> 00:01:16,810
development, or single-page web apps weren't even concerns near our radars yet.

00:01:16,810 --> 00:01:24,100
Now we are seeing huge rapid advancements in the languages themselves to how we generate

00:01:24,100 --> 00:01:28,590
basically every single kind of code we write, to the frameworks we use to organise our code,

00:01:28,590 --> 00:01:32,219
all the way to the build tools that we use to build, compile, optimise, and serve our

00:01:32,219 --> 00:01:34,630
code.

00:01:34,630 --> 00:01:41,329
Because there's always some better or faster tool becoming available, it can feel overwhelming

00:01:41,329 --> 00:01:45,229
to choose and adopt these new technologies all the time.

00:01:45,229 --> 00:01:51,159
This is hard enough to do on a brand new project, where there is no pre-exist ing code concerns,

00:01:51,159 --> 00:01:56,279
but it can be especially hard in a large codebase, or one has been around for a long time.

00:01:56,279 --> 00:02:01,920
Where, when the moment you add something new, suddenly, everything else becomes legacy code,

00:02:01,920 --> 00:02:06,899
and now, not only do you have all of this new stuff that you need to learn and maintain,

00:02:06,899 --> 00:02:10,860
you also have to consider how it's going to play with all of your old code, and how or

00:02:10,860 --> 00:02:17,970
even if you're ever going to update that old code to use this new stuff.

00:02:17,970 --> 00:02:22,440
When you compound these technical challenges with the industry pressure that you should

00:02:22,440 --> 00:02:28,610
be using a certain tool, or doing things a certain way in order to be a real web developer,

00:02:28,610 --> 00:02:32,590
it can create kind of a harsh environment for being able to make the best decisions

00:02:32,590 --> 00:02:36,060
for your team and for your product, and for your users.

00:02:36,060 --> 00:02:40,920
Which, on the code side, that can lead to things like an increase in technical debt,

00:02:40,920 --> 00:02:46,010
or missed project deadlines, but on the human side of things, it can create negative feelings

00:02:46,010 --> 00:02:49,180
like imposter syndrome or burn-out which are really harmful.

00:02:49,180 --> 00:02:54,420
Today, I want to tell you about how we've dealt with these kinds of challenges over

00:02:54,420 --> 00:02:59,460
the years, and, if any of you have felt like you've experienced anything like these, or

00:02:59,460 --> 00:03:06,790
might experience anything like this, I want you to know you're not alone.

00:03:06,790 --> 00:03:09,540
We've been involving the codebase since 2010.

00:03:09,540 --> 00:03:14,730
When I joined the team eight years ago, they had finished a wholesale rewrite of the website

00:03:14,730 --> 00:03:20,510
from scratch but since then we've not started over but working in the same evolving codebase

00:03:20,510 --> 00:03:25,490
through the years, and we've moved through a number of different template engines, CSS

00:03:25,490 --> 00:03:30,130
pro processors, JavaScript libraries and frameworks - you name it.

00:03:30,130 --> 00:03:35,090
I joined as the fourth developer on the team, and, since then, we've grown to be about 40

00:03:35,090 --> 00:03:41,570
developers, and, in that time, we have faced a really wide variety of challenges.

00:03:41,570 --> 00:03:47,180
We are also constantly considering which new technologies we can use which will serve us

00:03:47,180 --> 00:03:49,280
and the website and the users' needs best.

00:03:49,280 --> 00:03:53,740
We have had to figure out how to actually implement these new technologies into our

00:03:53,740 --> 00:03:58,160
existing track, even when there were massive functional disparities with what was already

00:03:58,160 --> 00:03:59,160
there.

00:03:59,160 --> 00:04:05,790
We have had to figure out when to start implementing these things, in particular, having to balance

00:04:05,790 --> 00:04:10,240
our product goals, and road maps with our developer happiness as well as the health

00:04:10,240 --> 00:04:11,390
of the codebase.

00:04:11,390 --> 00:04:16,609
We have had to clean up any messes we left behind along the way.

00:04:16,609 --> 00:04:22,889
So, there is a ton of opinions out there on the internet on what the best or the right

00:04:22,889 --> 00:04:26,249
way to build a website is.

00:04:26,249 --> 00:04:31,400
I'm not here to tell you that there is any one right or wrong way to do any of these

00:04:31,400 --> 00:04:32,400
things.

00:04:32,400 --> 00:04:36,710
In fact, I'm kind of here to demonstrate the opposite.

00:04:36,710 --> 00:04:41,569
What I do want to tell you is about how we've handled these challenges over the years, how

00:04:41,569 --> 00:04:48,340
and why we've made the decisions that we did, and how they did or did not work out for us.

00:04:48,340 --> 00:04:51,650
And what I really kind of want to reveal is that, no matter how pretty and put-together

00:04:51,650 --> 00:04:56,849
things may seem from the outside, whenever you pull back the curtain, there's no website

00:04:56,849 --> 00:05:01,029
or process as perfect or pretty as it may seem.

00:05:01,029 --> 00:05:06,870
So, first, a little extra insight into our size and complexity.

00:05:06,870 --> 00:05:13,479
As of today, I counted 50 pages on our website which exist in various states of logged in

00:05:13,479 --> 00:05:20,460
our out, or empty states or not, and that's made up of over 500 JavaScript files, roughly

00:05:20,460 --> 00:05:24,909
the same number of style sheets and almost 1,000 markup templates.

00:05:24,909 --> 00:05:28,360
Of course, this nuclear missile has been in - this number has been in flux over the years

00:05:28,360 --> 00:05:35,860
as we've removed various pages and sections of the site, but the website has also evolved

00:05:35,860 --> 00:05:40,990
to become a little bit more like a WhatsApp as opposed to its - like a web app as opposed

00:05:40,990 --> 00:05:47,069
to its traditional website origins, we have way more interactive modular components that

00:05:47,069 --> 00:05:53,029
exist across many of the site - for example, a notifications and a messages feed that you

00:05:53,029 --> 00:06:00,379
can see on any page, like a project pop-up or user card that can be incited from many

00:06:00,379 --> 00:06:04,330
different areas of the website as well.

00:06:04,330 --> 00:06:05,870
We have humble begins.

00:06:05,870 --> 00:06:08,069
This screen shot is from the Way Back Machine.

00:06:08,069 --> 00:06:10,490
There used to be something on the right side.

00:06:10,490 --> 00:06:14,099
Some things get lost even to the internet.

00:06:14,099 --> 00:06:17,229
Back in 2010 when I first joined, we weren't using anything but CSS to satisfactorily the

00:06:17,229 --> 00:06:18,229
website.

00:06:18,229 --> 00:06:19,490
I would - to style the website.

00:06:19,490 --> 00:06:26,949
I would say our CSS style back then could be called copy-paste-driven development at

00:06:26,949 --> 00:06:28,069
this point.

00:06:28,069 --> 00:06:34,289
We pretty much had no tools on the front-end to help us reduce repetition, or weren't using

00:06:34,289 --> 00:06:40,479
any methodologies or naming conventions to help keep our CSS clean.

00:06:40,479 --> 00:06:45,879
This is what the website looked like, and I would say anything on the website that wasn't

00:06:45,879 --> 00:06:49,740
plain text or a solid colour was probably an image.

00:06:49,740 --> 00:06:54,990
CSS just wasn't nearly as robust as it is today, and we were trying to create something

00:06:54,990 --> 00:07:01,409
more visually interesting than native CSS would allow at the time.

00:07:01,409 --> 00:07:06,939
We started to get comfortable using CSS features for visual flair where we could, understanding

00:07:06,939 --> 00:07:12,449
the website didn't have to look the same in every single browser all the time, and once

00:07:12,449 --> 00:07:17,099
our designers realised that we could make any CSS gradient we wanted without them having

00:07:17,099 --> 00:07:23,380
to make images for it, I got to become intimately familiar with this tool.

00:07:23,380 --> 00:07:28,389
There is like a dozen different ways to make gradients in different browsers, and I was

00:07:28,389 --> 00:07:31,159
not about to memorise all that syntax.

00:07:31,159 --> 00:07:36,499
In time, browser technology started to pick up more seam.

00:07:36,499 --> 00:07:42,020
CSS as a language was advancing, and we were having a lot of fun with the cool visual visual

00:07:42,020 --> 00:07:50,039
tricks and treats with CSS and getting comfortable with making images starting to implement with

00:07:50,039 --> 00:07:53,869
native CSS.

00:07:53,869 --> 00:07:58,360
We had an interesting additional challenge in that we also had all of these offshoots

00:07:58,360 --> 00:08:03,909
of the site that were themed galleries for different creative fields and these white-label

00:08:03,909 --> 00:08:10,669
almost miniature Behance's school and organisations which used the same markup and JavaScript

00:08:10,669 --> 00:08:16,139
with the main website but with an additional style sheet loaded to customise them for their

00:08:16,139 --> 00:08:19,449
own look for brand.

00:08:19,449 --> 00:08:23,740
All these lived within the same one codebase which means if you changed something in the

00:08:23,740 --> 00:08:30,990
main website, you had to make sure you didn't change it on the other 40-plus versions of

00:08:30,990 --> 00:08:31,990
the website.

00:08:31,990 --> 00:08:32,990
No big deal.

00:08:32,990 --> 00:08:38,690
So, by now, we had a clear need of a tool that would help us with our CSS development.

00:08:38,690 --> 00:08:43,710
Not only were vendor prefixes starting to slip through the cracks, but thanks to the

00:08:43,710 --> 00:08:50,770
themed galleries and websites, we were inundated with copy and pasted CSS where largely the

00:08:50,770 --> 00:08:55,690
differences were font names or colour values.

00:08:55,690 --> 00:09:01,380
Fortunately which by this time, CSS processors were picking up steam looking like the perfect

00:09:01,380 --> 00:09:06,350
tool to make, more dry.

00:09:06,350 --> 00:09:12,930
Now, the story I'm about to tell is not about the merits of any one CSS preprocessor over

00:09:12,930 --> 00:09:19,330
the other, but I do want to use it was a real-world example of the messy path to choosing, implementing,

00:09:19,330 --> 00:09:21,110
and using new tools.

00:09:21,110 --> 00:09:28,390
For us, we were debating between Less and Sass, good tools on their own, but wanted

00:09:28,390 --> 00:09:34,060
to make sure we picked the tool for our specific needs.

00:09:34,060 --> 00:09:40,690
Sass had more compelling implementations and features for our use case and Compass on top

00:09:40,690 --> 00:09:46,400
of that offered a ton of extra power that was going to be absolutely perfect for all

00:09:46,400 --> 00:09:49,250
those sites and our sprite management.

00:09:49,250 --> 00:09:53,960
Sass and Compass were set to improve our lives drastically.

00:09:53,960 --> 00:09:56,410
The answer could not be more clear.

00:09:56,410 --> 00:10:02,740
We obviously went with Less!

00:10:02,740 --> 00:10:06,180
Why we would do that?

00:10:06,180 --> 00:10:11,070
For a couple of of reasons: the time, there was only Ruby Sass, and since the site was

00:10:11,070 --> 00:10:17,380
not built on a Ruby stack, it wasn't easy for us to implement or even start using Sass

00:10:17,380 --> 00:10:20,090
and it was a little bit in Tim dating.

00:10:20,090 --> 00:10:27,800
Since Less could be compiled by downloading a GUI app to your computer, it had a low barrier

00:10:27,800 --> 00:10:29,120
of entry for us.

00:10:29,120 --> 00:10:34,370
We were still a tiny dev team at this point, but this meant we could start getting a lot

00:10:34,370 --> 00:10:40,370
of the benefits of a CSS preprocessor sooner and way less friction and engineering time

00:10:40,370 --> 00:10:45,090
than if we had chosen to go with Sass at that point.

00:10:45,090 --> 00:10:50,210
It afforded us another interesting benefit as well in that we were able to use Less as

00:10:50,210 --> 00:10:56,390
a proof of concept that implement be a CSS preprocessor was a worthwhile investment.

00:10:56,390 --> 00:11:02,430
The time it took to get it up and running for everyone to use paid off drastically in

00:11:02,430 --> 00:11:06,250
development time and development improvements down the line which meant that we were able

00:11:06,250 --> 00:11:11,170
to get more team buy-in for actually adopting Sass as well as negotiate for the development

00:11:11,170 --> 00:11:15,200
time that we needed to do so and make the switch to the tool that we ultimately felt

00:11:15,200 --> 00:11:19,260
would serve us best.

00:11:19,260 --> 00:11:21,500
But our journey does not end there.

00:11:21,500 --> 00:11:25,300
Although we had decided that the higher-end investment in setting up Sass was worth it,

00:11:25,300 --> 00:11:28,890
we had to cut some corners to get there.

00:11:28,890 --> 00:11:33,700
To complicate things, we were now dealing with the dreaded technical debt of working

00:11:33,700 --> 00:11:40,800
in a codebase that had partially vanilla CSS and partially less syntax, and now we would

00:11:40,800 --> 00:11:45,010
have to spend the time to convert that all into Sass.

00:11:45,010 --> 00:11:50,390
We still didn't have a tech stack that could compile Sass for us, but what we could do

00:11:50,390 --> 00:11:57,020
was install Ruby and Sass on each of our individual computers and compile and commit the Sass

00:11:57,020 --> 00:12:01,430
and the CSS to our repositories from there.

00:12:01,430 --> 00:12:09,590
Now, we violated a lot of web development best practices by compiling CSS on our own

00:12:09,590 --> 00:12:14,700
machines instead of by using a build tool within the tech stack, and we were committing

00:12:14,700 --> 00:12:21,530
an even worse crime of actually committing exiled code to our repository.

00:12:21,530 --> 00:12:28,230
I seriously doubt you would ever find a Medium think-piece advocating for this kind of implementation,

00:12:28,230 --> 00:12:34,100
and gives me some anxiety to admit on stage in front of you all that we were committing

00:12:34,100 --> 00:12:39,900
such an egregious violation of best practice by having literally hundreds of preprocessed

00:12:39,900 --> 00:12:43,430
CSS files in our library.

00:12:43,430 --> 00:12:48,520
On the flip side, I can't tell you how much benefit we were having by having Sass available

00:12:48,520 --> 00:12:52,290
for us in this way.

00:12:52,290 --> 00:12:57,390
For what sounds like a nightmare situation on the surface, I have to say, for the most

00:12:57,390 --> 00:13:00,140
part, actually it worked really well for us.

00:13:00,140 --> 00:13:05,300
Suddenly, we were able to build our themed galleries in white-labelled website in a fraction

00:13:05,300 --> 00:13:10,220
of the time which meant that we were helping our users in our mission to give more exposure

00:13:10,220 --> 00:13:12,370
to creatives.

00:13:12,370 --> 00:13:17,410
We were able to do it with way less code than before which meant that now our codebase became

00:13:17,410 --> 00:13:22,450
much easier to understand and maintain.

00:13:22,450 --> 00:13:27,500
Although committing compiled code is considered a bad practice, for a large, complex codebase

00:13:27,500 --> 00:13:32,990
with a lot of interdependencies, it actually ended up giving us extremely clear visibility

00:13:32,990 --> 00:13:37,390
into the reach that any single change actually was having.

00:13:37,390 --> 00:13:41,660
In the - and the last cool thing is that we suddenly had tools that could do grunt work

00:13:41,660 --> 00:13:43,610
for us.

00:13:43,610 --> 00:13:47,660
For example, this meant that our designers could focus on working on and designing things

00:13:47,660 --> 00:13:51,920
that actually mattered rather than spending their time doing menial tasks like stitching

00:13:51,920 --> 00:13:56,180
sprites together.

00:13:56,180 --> 00:14:04,180
We were able to find a balance between a subpar implementation, as well as code health by

00:14:04,180 --> 00:14:09,300
reducing a lot of the technical debt in our CSS.

00:14:09,300 --> 00:14:15,870
But what happens when you need a tool that doesn't really seem to exist yet?

00:14:15,870 --> 00:14:18,660
Around this time, we started working on a new product.

00:14:18,660 --> 00:14:23,090
It was a single-page web app for task management we called Method Action Online.

00:14:23,090 --> 00:14:30,120
Given it was a totally new product, we were starting from scratch, and we had an excellent

00:14:30,120 --> 00:14:34,280
and rare opportunity to try out new technologies.

00:14:34,280 --> 00:14:39,540
We got to do this without having to worry about retrofitting it into any existing code.

00:14:39,540 --> 00:14:45,410
I think we chose Less for this one because of the timing but on the JavaScript side,

00:14:45,410 --> 00:14:54,320
we ended up making the decision to write our own JavaScript framework which we called nbdd.js.

00:14:54,320 --> 00:15:02,840
We built it at a time when Angular and Backbone were extremely popular well established frameworks.

00:15:02,840 --> 00:15:06,590
Why we would bother writing our own?

00:15:06,590 --> 00:15:10,800
If you look at this timeline, we were actually doing this at a time when there weren't a

00:15:10,800 --> 00:15:17,470
ton of alternative options, or the ones that were out were kind of new.

00:15:17,470 --> 00:15:22,810
Adopting a Jung technology in a product that you anticipate and hope is going to live for

00:15:22,810 --> 00:15:27,390
years is kind of a non-zero-risk move.

00:15:27,390 --> 00:15:32,910
Now, I'm not saying that writing your own framework or using an existing one is better

00:15:32,910 --> 00:15:37,920
or worse than the other, but for the size of our team and the needs of our product at

00:15:37,920 --> 00:15:40,570
the time, being able to its operate on our own front-end framework - iterate on our own

00:15:40,570 --> 00:15:48,279
front-end framework is precisely what we needed at the time.

00:15:48,279 --> 00:15:53,480
Action Method Online became a good proving ground for our JavaScript framework because

00:15:53,480 --> 00:15:59,300
it was born go and forged for specific interactive and data-driven purposes, we were actually

00:15:59,300 --> 00:16:04,480
able to apply the techniques and practices that we learned in Action Method Online back

00:16:04,480 --> 00:16:05,870
on Behance.

00:16:05,870 --> 00:16:13,420
We were able to use complex features this framework for uploading be and editing features

00:16:13,420 --> 00:16:18,850
we could add to Behance as well.

00:16:18,850 --> 00:16:25,190
By this time, Behance was evolving from its static website roots to become more responsive

00:16:25,190 --> 00:16:31,590
and a bit more modular, but execute be this kind of huge paradigm shift was a tremendous

00:16:31,590 --> 00:16:33,380
undertaking for us.

00:16:33,380 --> 00:16:37,400
There was literally nothing about how the site was built to that point that was conducive

00:16:37,400 --> 00:16:39,320
to being responsive.

00:16:39,320 --> 00:16:46,050
The way we built the site layout was rigid, the existing design was not immediately adaptable

00:16:46,050 --> 00:16:51,730
to smaller screen sizes, and we were still lacking the tools on the front-end that we

00:16:51,730 --> 00:16:57,279
need to structure and implement the kind of responsive functionality and modularity that

00:16:57,279 --> 00:17:00,940
we really wanted to.

00:17:00,940 --> 00:17:05,160
We knew we wanted to make the website responsive but despite the challenges in place by the

00:17:05,160 --> 00:17:11,570
existing foundation, we knew a full rewrite of the website was out of the question.

00:17:11,570 --> 00:17:14,790
It was a huge website and would have have taken far too long.

00:17:14,790 --> 00:17:17,620
So we continued working on Behance.

00:17:17,620 --> 00:17:23,010
We would add new features and convert the site over to be responsive page by page, and

00:17:23,010 --> 00:17:28,820
we used our JavaScript framework NBD for any new code that we were creating, and updating

00:17:28,820 --> 00:17:34,920
existing areas of the site needed also, whether it was because that page was due for maintenance

00:17:34,920 --> 00:17:37,620
or any other kind of update.

00:17:37,620 --> 00:17:47,910
So, both Sass and NBD carried us all the way into 2015 when we started working on another

00:17:47,910 --> 00:17:49,750
brand new single-page web app.

00:17:49,750 --> 00:17:54,650
This time it was a website builder called the W portfolio and turned to be the most

00:17:54,650 --> 00:17:59,000
complex single web app we've created to date.

00:17:59,000 --> 00:18:04,050
We had a ton of new technical challenges on portfolio that we never had to deal with before

00:18:04,050 --> 00:18:06,490
in our single-page web app.

00:18:06,490 --> 00:18:13,520
We wanted to build a few GUI what you see is what you get editor, building where one

00:18:13,520 --> 00:18:19,020
of any literally hundreds of customisation dialogues, you could make a change to your

00:18:19,020 --> 00:18:23,580
website and see it reflected in the editor in real time.

00:18:23,580 --> 00:18:28,990
We needed to do this while maintaining an editor chrome that didn't interfere with user

00:18:28,990 --> 00:18:33,180
customisations in any way.

00:18:33,180 --> 00:18:38,730
We started building Portfolio with NBD but building and maintaining a framework is not

00:18:38,730 --> 00:18:40,900
without its risks and downsides, either.

00:18:40,900 --> 00:18:46,350
Now, we had started to feel the growing pains of using our own home-grown framework.

00:18:46,350 --> 00:18:52,430
It was originally build by one of our developers and maintained by only a couple of more, so

00:18:52,430 --> 00:18:55,810
this meant that it didn't move particularly fast.

00:18:55,810 --> 00:19:00,620
It meant that other open-source frameworks were moving at a much faster rate.

00:19:00,620 --> 00:19:05,260
It also meant that it was much more challenging for new hires to learn it.

00:19:05,260 --> 00:19:10,260
Documentation on it was sparse because the developers who knew how it worked were busy

00:19:10,260 --> 00:19:15,150
developing, whether it was the framework, or for a new feature for our websites.

00:19:15,150 --> 00:19:22,100
And it also the universe of resources to get help with it was scoped entirely to an extremely

00:19:22,100 --> 00:19:30,690
small portion of our dev team which made it hard for anyone who needed help to be self-sufficient.

00:19:30,690 --> 00:19:35,580
On the flip side, popular open-source frameworks came with the benefit of way more active and

00:19:35,580 --> 00:19:38,940
visible communities to tap into for help.

00:19:38,940 --> 00:19:43,590
Which not only means that you have a way bigger pool of resources to get help from but it

00:19:43,590 --> 00:19:48,559
also means that there is a community need that you can give back to when you solve a

00:19:48,559 --> 00:19:51,720
specific challenge, or interesting problem yourself.

00:19:51,720 --> 00:19:56,960
So, by then, it was easy enough to acknowledge that our home-grown framework was no longer

00:19:56,960 --> 00:20:01,330
the best tool for our team, or for the new types of products and features that we were

00:20:01,330 --> 00:20:04,480
building.

00:20:04,480 --> 00:20:10,470
After spending some time on portfolio's development, we turned our attention back to Behance.

00:20:10,470 --> 00:20:16,330
In the time we had been building Adobe Portfolio, our designers had been working on a new look

00:20:16,330 --> 00:20:21,960
of the Behance website, and we wanted this to make a big splash.

00:20:21,960 --> 00:20:26,420
We wanted to it to be a release where the look and feel of the entire website would

00:20:26,420 --> 00:20:29,930
change for our users all at once.

00:20:29,930 --> 00:20:34,530
Despite this once again, we still knew that starting the whole thing over from scratch

00:20:34,530 --> 00:20:37,520
was simply not going to be an option for us.

00:20:37,520 --> 00:20:46,040
We had adopted modular JavaScript with require.js and attempted to scope and componentise our

00:20:46,040 --> 00:20:54,100
CSS as much as possible using BEM but the truly scoped nature of JS and CSS was becoming

00:20:54,100 --> 00:21:01,090
enticing for our increasingly modular website and web apps.

00:21:01,090 --> 00:21:04,880
The time was ripe for us to look for new technology.

00:21:04,880 --> 00:21:10,080
In the same way that the industry at large has a lot of opinions on the best tools to

00:21:10,080 --> 00:21:16,800
use, so does any individual given dev team, so, what we did to figure out what was going

00:21:16,800 --> 00:21:22,920
to work best for us is hold group discussions, lunch-and-learns, different learning sessions

00:21:22,920 --> 00:21:32,100
for anyone interested where we would discuss the pros and cons of CSS and JS solutions.

00:21:32,100 --> 00:21:36,270
When we could get some kind of agreement on which one seemed the most compelling, we would

00:21:36,270 --> 00:21:42,790
actually try them out by building parts of the website for them, specifically our admin

00:21:42,790 --> 00:21:47,460
section of our websites which were just pages that only employees can access for different

00:21:47,460 --> 00:21:53,070
maintenance tasks but what it meant was we could use these things in a near real-world

00:21:53,070 --> 00:21:54,980
proving ground.

00:21:54,980 --> 00:22:02,280
So, for Behance, we ultimately decided on vue and CSS modules as our preferred tools,

00:22:02,280 --> 00:22:07,160
and, once again, we continued to use a lot of the same techniques for implementing new

00:22:07,160 --> 00:22:09,950
technology that we had done in the past.

00:22:09,950 --> 00:22:14,000
We exclusively built if you Norwegians using these new tools and frameworks.

00:22:14,000 --> 00:22:16,970
It meant they got to be in use immediately.

00:22:16,970 --> 00:22:23,340
We rebuilt existing UI components such as buttons and inputs using these new tools and

00:22:23,340 --> 00:22:29,600
frameworks alongside their existing implementations which could then be moved over to different

00:22:29,600 --> 00:22:35,210
areas of the site as pose pages why updated to use vue as well.

00:22:35,210 --> 00:22:42,330
Perhaps most critically, we did it behind feature flags, which is a set of code depending

00:22:42,330 --> 00:22:50,780
on one user's code or another - it meant we could build everything we needed alongside

00:22:50,780 --> 00:22:56,470
the existing website without according about interfering with it, while also still having

00:22:56,470 --> 00:23:02,110
the ability to see all of this new stuff in action in a production environment, even before

00:23:02,110 --> 00:23:04,700
it was ready for its public debut.

00:23:04,700 --> 00:23:11,620
So, this actually brings us to where we are today: the website is not fully converted

00:23:11,620 --> 00:23:17,360
to vue and CSS and JS, but we continue to follow the same practices as we update and

00:23:17,360 --> 00:23:23,370
develop new features, and, actually, as an aside, although we are fairly recently into

00:23:23,370 --> 00:23:29,600
our transition into vue, we've recently made the decision to switch to React which I don't

00:23:29,600 --> 00:23:33,300
have time to go into now, but we would be happy to chat about with anyone after this

00:23:33,300 --> 00:23:35,460
if you want.

00:23:35,460 --> 00:23:42,440
So, if you look at the arc of CSS development over the last eight years, it has changed

00:23:42,440 --> 00:23:43,440
drastically.

00:23:43,440 --> 00:23:50,090
In 2010, our biggest concerns were around perfecting the slickest CSS gradient and getting

00:23:50,090 --> 00:23:54,060
the website to look pixel-perfect to the mock-ups that the designers gave us.

00:23:54,060 --> 00:23:59,880
By 2018, not only are we concerned with how the website looks, but we have to think about

00:23:59,880 --> 00:24:05,970
how to optimise the code for the least repetition, for the best browser performance, for how

00:24:05,970 --> 00:24:12,080
it functions in the most browsers and devices than I think we have ever had to deal with.

00:24:12,080 --> 00:24:17,780
Since the CSS has become more closely intertwined to our JavaScript and markup in modern frameworks

00:24:17,780 --> 00:24:25,220
than ever before, our concerns are no longer isolated to the CSS itself.

00:24:25,220 --> 00:24:29,740
Because JavaScript technology and frameworks moves so fast too, we end up having a much

00:24:29,740 --> 00:24:35,170
bigger and more robust ecosystem than we need to have a deeper understanding of.

00:24:35,170 --> 00:24:38,140
Front-end development is hard.

00:24:38,140 --> 00:24:40,750
Front-end engineering is hard.

00:24:40,750 --> 00:24:45,490
But I encourage empathy in your decision-making and interactions around it.

00:24:45,490 --> 00:24:50,880
Every technical choice is relative, and there is no right or wrong way to build a website.

00:24:50,880 --> 00:24:58,190
So, in case the example so far didn't illustrate the beautiful, unique messy path that web

00:24:58,190 --> 00:25:03,870
development can take, I'm going to air a little bit of Behance's dirty laundry in case any

00:25:03,870 --> 00:25:08,720
of you have felt bad about the cancel to see in your codebase's closet, maybe this will

00:25:08,720 --> 00:25:14,190
help you feel you're not alone, and hopefully, this is also therapeutic for me.

00:25:14,190 --> 00:25:21,180
The figure one is we are still using three different templating engines across the website

00:25:21,180 --> 00:25:26,809
which is a relic of the transitions we've made over time, and, depending on what page

00:25:26,809 --> 00:25:31,260
you're viewing, you might be seeing all three in action all at once.

00:25:31,260 --> 00:25:36,360
This so happens to be the first page you see when you log into our website.

00:25:36,360 --> 00:25:42,330
I searched our codebase for some to-dos because I thought there could be fun stuff in there.

00:25:42,330 --> 00:25:47,730
I came across this one on the head tag of our website.

00:25:47,730 --> 00:25:49,690
"To do".

00:25:49,690 --> 00:25:53,020
A lot of stuff included here which is unnecessary.

00:25:53,020 --> 00:25:54,690
Cool!

00:25:54,690 --> 00:26:00,740
That sounds bad, and also isn't particularly actionable, but I had never noticed this before,

00:26:00,740 --> 00:26:04,350
so I checked the git blame, and I was curious to see how long this had been a problem for

00:26:04,350 --> 00:26:05,350
... . [Laughter].

00:26:05,350 --> 00:26:06,350
Okay!

00:26:06,350 --> 00:26:16,880
While I was looking for the to-dos, I thought I might as well clean up some of them while

00:26:16,880 --> 00:26:18,210
I'm in here.

00:26:18,210 --> 00:26:23,100
I found this one, and it says, "To do: remove after statistics are fixed."

00:26:23,100 --> 00:26:26,290
So, okay.

00:26:26,290 --> 00:26:30,559
I found this in the CSS for a notifications, and honestly, I could not figure out what

00:26:30,559 --> 00:26:34,940
statistics has or ever had to do with our notifications.

00:26:34,940 --> 00:26:40,860
So, I checked the blame on this one also.

00:26:40,860 --> 00:26:42,080
Still no idea.

00:26:42,080 --> 00:26:45,390
So here's a little bit of a longer one.

00:26:45,390 --> 00:26:47,370
This one says to do.

00:26:47,370 --> 00:26:58,430
This is due to chrome 33 .0057, introducing a phantom sub pixel.

00:26:58,430 --> 00:26:59,710
Remove when fixed.

00:26:59,710 --> 00:27:06,840
So, okay, that's a nice descriptive to-do although it's not immediately why a whipped

00:27:06,840 --> 00:27:08,590
property is a bad thing here.

00:27:08,590 --> 00:27:11,060
It seems fine to me.

00:27:11,060 --> 00:27:12,300
This is hopeful information.

00:27:12,300 --> 00:27:16,820
Let's see if Chrome has updated at all since this was written.

00:27:16,820 --> 00:27:21,970
I went to Wikipedia to check when this specific version of Chrome was released.

00:27:21,970 --> 00:27:25,140
It was over three years ago.

00:27:25,140 --> 00:27:28,090
Let's see what version Chrome is even up to.

00:27:28,090 --> 00:27:29,520
Cool.

00:27:29,520 --> 00:27:34,860
I left that one alone also.

00:27:34,860 --> 00:27:37,059
We have a page on our website that we never made responsive.

00:27:37,059 --> 00:27:40,010
It is not even like it doesn't get traffic.

00:27:40,010 --> 00:27:41,679
People visit this page.

00:27:41,679 --> 00:27:47,059
Granted, it's not the most popular part of the website, but we simply never prioritised

00:27:47,059 --> 00:27:48,470
it.

00:27:48,470 --> 00:27:55,510
Finally, my personal favourite, if you recall, I said how we started committing compile to

00:27:55,510 --> 00:28:04,160
the repo back in 2011, well, we did that for over five years, and we only stopped doing

00:28:04,160 --> 00:28:09,630
it about a year and a half ago, very long after a lot of viable solutions had already

00:28:09,630 --> 00:28:11,600
become available.

00:28:11,600 --> 00:28:16,150
Talk about embarrassing!

00:28:16,150 --> 00:28:22,040
If it sound like I'm saying our website is kind of messy and imperfect, good - that is

00:28:22,040 --> 00:28:23,850
what I'm saying!

00:28:23,850 --> 00:28:29,850
But ultimately I'm actually proud on the work on Behance, even though you know how the sausage

00:28:29,850 --> 00:28:37,020
is made, it's not perfect, but the difference between not perfect and bad is all in how

00:28:37,020 --> 00:28:39,190
much you focus on it.

00:28:39,190 --> 00:28:43,620
The closer you examine something, the worse it seems.

00:28:43,620 --> 00:28:48,850
But everything that we've built is the result of hard work and smart ideas, and great teamwork.

00:28:48,850 --> 00:28:55,090
I consider myself lucky to work with a driven and compassionate group of people who care

00:28:55,090 --> 00:28:59,900
deeply about the work that they create, the products that we are building, and the impact

00:28:59,900 --> 00:29:02,870
that it has on the lives of the people who use it.

00:29:02,870 --> 00:29:08,640
Ultimately, these are the things that I think make the industry what it is.

00:29:08,640 --> 00:29:12,600
These are the values that are way more important than any of the latest frameworks or tools

00:29:12,600 --> 00:29:17,750

YouTube URL: https://www.youtube.com/watch?v=vLBBq6oizEI


