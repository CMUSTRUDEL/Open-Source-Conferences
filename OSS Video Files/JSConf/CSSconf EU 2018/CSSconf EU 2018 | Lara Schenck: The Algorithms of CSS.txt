Title: CSSconf EU 2018 | Lara Schenck: The Algorithms of CSS
Publication date: 2018-06-02
Playlist: CSSconf EU 2018
Description: 
	“CSS isn’t a ‘real’ programming language,” we CSS developers are often reminded — we don’t write programs, we describe presentation. Algorithms and CSS, then, don’t exactly go hand-in-hand … or do they?

From the cascade to Grid Layout to our own design systems, we may not write algorithms in the same fashion as other programming languages, but we sure do use them!

This talk documents a self-taught developer’s mission to bridge the gap between CSS and Computer Science by way of algorithms. True, CSS is not a programming language like the others, but an understanding of the fundamentals can benefit our code just the same.

CSSconf EU will be back on May 31st 2019: 
https://2019.cssconf.eu/
Captions: 
	00:00:05,710 --> 00:00:06,840
Hello, everyone!

00:00:06,840 --> 00:00:09,670
So excited to be here!

00:00:09,670 --> 00:00:14,200
At CSSconf and talk to you about the algorithms of CSS.

00:00:14,200 --> 00:00:16,470
What is this talk going to be about?

00:00:16,470 --> 00:00:19,010
So, hello!

00:00:19,010 --> 00:00:27,100
So my name is Lara Schenck, and that's my Twitter handle.

00:00:27,100 --> 00:00:33,160
I'm a freelance WordPress and front-end developer in WordPress and CSS are my two loves, as

00:00:33,160 --> 00:00:34,390
well as teaching.

00:00:34,390 --> 00:00:39,329
I love teaching been are sharing what I know, and using teaching as a means to get myself

00:00:39,329 --> 00:00:48,179
to to learn things which is kind of what I did with this talk.

00:00:48,179 --> 00:00:52,260
So, CSS: it has a special place in my heart as I'm sure it does for most of us here.

00:00:52,260 --> 00:00:55,129
I have a background in art.

00:00:55,129 --> 00:01:02,690
I came upon CSS through a weird college project - art project - where I wanted it to turn

00:01:02,690 --> 00:01:07,930
it into a video game which morphed into making WordPress sites pour money which turned into

00:01:07,930 --> 00:01:11,470
- for money which turned into a career I love.

00:01:11,470 --> 00:01:16,369
Computer science didn't turn up in my career until three years ago or so.

00:01:16,369 --> 00:01:22,810
I got good at making websites but didn't understand what was happening under the surface.

00:01:22,810 --> 00:01:25,890
This showed up in the form of an algorithms interview.

00:01:25,890 --> 00:01:30,180
How many of us have done an algorithms whiteboarding interview before?

00:01:30,180 --> 00:01:32,780
Good amount of hands.

00:01:32,780 --> 00:01:34,840
Questionable interviewing stale but it exists.

00:01:34,840 --> 00:01:38,590
So, that was my first encounter.

00:01:38,590 --> 00:01:43,740
I definitely failed it, and then about a year ago I got an interview for a job I was excited

00:01:43,740 --> 00:01:44,740
about.

00:01:44,740 --> 00:01:48,030
I thought I've got to take this one seriously, and I've got to learn about computer science.

00:01:48,030 --> 00:01:49,930
So I really grew to love it.

00:01:49,930 --> 00:01:55,220
The connection between computer science and CSS wasn't always clear.

00:01:55,220 --> 00:01:59,420
Like I saw the connections between my work with JavaScript and with PHP quite often,

00:01:59,420 --> 00:02:02,009
but with CSS, it was hard to bridge that gap.

00:02:02,009 --> 00:02:07,250
So, in the spirit of committing to teach things in order to learn them, I proposed this talk

00:02:07,250 --> 00:02:09,759
for CSSconf EU.

00:02:09,759 --> 00:02:15,540
And I started my research for this about six months ago, and CSS really went from something

00:02:15,540 --> 00:02:21,310
like this - so grey, like I was got to write CSS, it is not as interesting as the other

00:02:21,310 --> 00:02:26,340
programming stuff I'm doing - and then over the six months of research, CSS became like,

00:02:26,340 --> 00:02:28,950
"Oh, my God, CSS is so cool.

00:02:28,950 --> 00:02:30,150
The dream!

00:02:30,150 --> 00:02:31,940
This is awesome."

00:02:31,940 --> 00:02:38,300
In addition to those kind of like revitalisation of my love for CSS, my code got better and

00:02:38,300 --> 00:02:42,930
intentional, and I write code faster.

00:02:42,930 --> 00:02:49,190
I want to share with you how I got to that point in my journey in this research.

00:02:49,190 --> 00:02:59,040
To I started all of this with a question: is CSS a programming language?

00:02:59,040 --> 00:03:00,630
How many of you have thought about this before?

00:03:00,630 --> 00:03:03,560
Good, nice number of hands.

00:03:03,560 --> 00:03:09,230
I want to follow up this with a fire emoji because this is a hot topic lately.

00:03:09,230 --> 00:03:13,780
I posed this question on Twitter: is CSS a programming language?

00:03:13,780 --> 00:03:21,260
The results were about as expected: 42 per cent, no; 50 per cent - or rather 42 per cent,

00:03:21,260 --> 00:03:24,440
yes; 50 per cent, no; eight per cent, I'm not sure.

00:03:24,440 --> 00:03:30,700
The responses to the tweet were, "The yeses were absolutely, it is a programming language.

00:03:30,700 --> 00:03:33,040
For sure."

00:03:33,040 --> 00:03:39,350
And the noes were more like, "You can't really call programming a web page layout, you don't

00:03:39,350 --> 00:03:41,370
say you programme in CSS."

00:03:41,370 --> 00:03:45,070
It's not what it is like.

00:03:45,070 --> 00:03:49,220
I mulled this over and thought, stop.

00:03:49,220 --> 00:03:54,650
I think we might be get some opinions, and like personal experience mixed up with facts

00:03:54,650 --> 00:03:56,010
here.

00:03:56,010 --> 00:04:01,590
So let's start by asking what is a programming language?

00:04:01,590 --> 00:04:06,290
Ground breaking it definition coming up: a language of instructions for a computer.

00:04:06,290 --> 00:04:13,290
The thing is, the definition of a programming language is kind of intentionally vague.

00:04:13,290 --> 00:04:20,720
There are many, many types of programming languages.

00:04:20,720 --> 00:04:25,639
Soon after reading about the definition of a programming limitation, one would encounter

00:04:25,639 --> 00:04:31,360
programming paradigms, and the term "paradigm" is really a word for a general classification

00:04:31,360 --> 00:04:38,319
or model or style of doing something, and there are two main classifications in programming

00:04:38,319 --> 00:04:43,939
paradigms: imperative programming paradigm which refers to code that tells a computer

00:04:43,939 --> 00:04:46,389
how to do something.

00:04:46,389 --> 00:04:49,729
And there is declarative, which is code that tells a computer what to do.

00:04:49,729 --> 00:04:54,759
So these are two fundamentally different paradigms, and they're the two main umbrellas.

00:04:54,759 --> 00:05:00,610
With paradigms, languages can be characterised under paradigms or can be described as styles

00:05:00,610 --> 00:05:02,240
of the code you're writing.

00:05:02,240 --> 00:05:08,240
You might be writing JavaScript in a more declarative or imperative style.

00:05:08,240 --> 00:05:17,659
And the two, or rather the main difference between imperative and declarative languages

00:05:17,659 --> 00:05:23,009
is the presence of control flow in imperative languages which refers to the ability to manipulate

00:05:23,009 --> 00:05:28,749
the order of execution of statements in a programme, and that happens via, like if statements

00:05:28,749 --> 00:05:29,919
and for loops.

00:05:29,919 --> 00:05:41,300
In a literal sense, your computer would read the programme top to bottom, and declarative

00:05:41,300 --> 00:05:45,940
programming does not have control flow, so any logic or iteration is kind of baked into

00:05:45,940 --> 00:05:53,760
the actual instructions themes, or what you're telling the computer to do is declarative.

00:05:53,760 --> 00:05:54,969
Languages that fall under these categories.

00:05:54,969 --> 00:06:01,550
Imperative are we think of programming languages: JavaScript, Ruby, C++, Python.

00:06:01,550 --> 00:06:08,310
Generally, if you think of a programming language, it is an imperative language.

00:06:08,310 --> 00:06:12,370
Declarative languages are oftentimes domain-specific.

00:06:12,370 --> 00:06:17,999
Which means they've been to develop within a certain context within a certain domain.

00:06:17,999 --> 00:06:19,500
What are some domain-specific languages?

00:06:19,500 --> 00:06:22,050
SQL is one.

00:06:22,050 --> 00:06:27,729
It is a domain-specific declarative limitation for working with databases.

00:06:27,729 --> 00:06:28,729
HTML.

00:06:28,729 --> 00:06:29,729
What?

00:06:29,729 --> 00:06:30,729
Sure!

00:06:30,729 --> 00:06:34,639
HTML is a domain-specific language.

00:06:34,639 --> 00:06:39,840
And, of course, CSS!

00:06:39,840 --> 00:06:44,770
Okay, sure there are people who would be, "What are you talking about?

00:06:44,770 --> 00:06:45,770
Just no.

00:06:45,770 --> 00:06:46,770
CSS is not.

00:06:46,770 --> 00:06:49,259
Doesn't count."

00:06:49,259 --> 00:06:53,039
Whether you want to argue CSS was never intended to be something like a programming language

00:06:53,039 --> 00:06:58,469
or perhaps that the browser can't really count, it just parses, it doesn't do anything else,

00:06:58,469 --> 00:07:06,150
to that I would say that CSS plus HTML is Turing-complete, which is the ability to solve

00:07:06,150 --> 00:07:09,449
a problem of a certain complexity.

00:07:09,449 --> 00:07:12,960
CSS can do math, which is cool.

00:07:12,960 --> 00:07:16,300
Functions and variables, CSS also has.

00:07:16,300 --> 00:07:19,110
Ultimately, I would say why not?

00:07:19,110 --> 00:07:25,590
So why can't CSS and HTML be part of what we consider programming languages?

00:07:25,590 --> 00:07:32,490
So, the idea of disqualifying HTML and CSS leads to disqualifying all of declarative

00:07:32,490 --> 00:07:36,229
languages, so I think that discrepancy comes into play when people are misinterpreting

00:07:36,229 --> 00:07:38,650
what comparative versus declarative is.

00:07:38,650 --> 00:07:42,290
Further, the web at large is declarative in nature.

00:07:42,290 --> 00:07:48,279
If we had to describe in our programmes how a computer is supposed to, or how a browser

00:07:48,279 --> 00:07:53,349
is supposed to open a connection to a server, that would be intense and totally inaccessible,

00:07:53,349 --> 00:07:56,689
so the power of declarative programming is huge especially when it comes to APIs and

00:07:56,689 --> 00:07:59,659
anything we do on the web.

00:07:59,659 --> 00:08:09,009
So, hear this loud and clear: CSS is a domain-specific declarative programming language 100 per cent.

00:08:09,009 --> 00:08:15,219
And another one: we as CSS developers programme the layout of web pages.

00:08:15,219 --> 00:08:17,810
I will give that another 100 per cent.

00:08:17,810 --> 00:08:23,150
Given to what I do as a CSS developer as programmer is getting used to that.

00:08:23,150 --> 00:08:30,360
As I get more and more used to how a browser works, the code can totally count as programming.

00:08:30,360 --> 00:08:38,680
Now we've established, got that out of the way, let's talk about algorithms.

00:08:38,680 --> 00:08:40,000
Algorithms 101.

00:08:40,000 --> 00:08:41,000
Yay!

00:08:41,000 --> 00:08:42,000
Let's have another definition.

00:08:42,000 --> 00:08:47,650
It is a well-defined computational procedure that takes input and produces output.

00:08:47,650 --> 00:08:53,210
This is a definition taken from the introduction to algorithms, which is one of these large

00:08:53,210 --> 00:08:58,710
text books I a signed for computer science courses, dense, informative, maybe not a great

00:08:58,710 --> 00:09:02,590
intro, but hopefully this will be.

00:09:02,590 --> 00:09:05,350
Let's use this framework to talk about algorithms.

00:09:05,350 --> 00:09:08,150
We have inputs.

00:09:08,150 --> 00:09:13,170
Unsorted list, and we have outputs - maybe a sorted list.

00:09:13,170 --> 00:09:16,310
What is the algorithm in between there?

00:09:16,310 --> 00:09:21,210
Well, sorting is certainly a solved problem in computer science.

00:09:21,210 --> 00:09:25,840
We've lots of sorting algorithms - bubble sort is one.

00:09:25,840 --> 00:09:27,660
A great name.

00:09:27,660 --> 00:09:30,680
Not the most performant of sorting algorithms, but it is the excellent.

00:09:30,680 --> 00:09:31,760
Selection sort.

00:09:31,760 --> 00:09:34,740
We also have merge sort.

00:09:34,740 --> 00:09:37,340
And quick sort.

00:09:37,340 --> 00:09:41,490
Let's take a look at implementation of one of these to kind of take a look at what an

00:09:41,490 --> 00:09:42,490
algorithm is under the hood.

00:09:42,490 --> 00:09:48,090
So, when I - bubble sort, this is what a sorting algorithm looks like if anybody has ever seen

00:09:48,090 --> 00:09:49,090
one.

00:09:49,090 --> 00:09:50,250
Let's read for a moment.

00:09:50,250 --> 00:09:54,600
Wonderful bubble sort in all of its glory.

00:09:54,600 --> 00:09:57,120
This is imperative JavaScript here.

00:09:57,120 --> 00:10:00,240
We're telling the computer how to sort.

00:10:00,240 --> 00:10:04,520
We're giving it step by step instructions to be read top down and the control flow is

00:10:04,520 --> 00:10:07,120
there so we're jumping back up to certain statements where necessary.

00:10:07,120 --> 00:10:14,190
It's this word "declarative programme", this is

00:10:14,190 --> 00:10:16,510
all you would see.

00:10:16,510 --> 00:10:20,320
Back to our framework.

00:10:20,320 --> 00:10:27,660
How would algorithms, or algorithmic thinking like this, apply to CSS?

00:10:27,660 --> 00:10:36,580
Let's say we have a stack of elements, and our output would be a row of elements.

00:10:36,580 --> 00:10:43,750
What would be an algorithm we would use in declarative CSS to get there?

00:10:43,750 --> 00:10:47,250
What would be an algorithm we would use to get there?

00:10:47,250 --> 00:10:48,870
Display flex - sure, why not?

00:10:48,870 --> 00:10:50,340
That's totally an algorithm.

00:10:50,340 --> 00:10:54,890
Or perhaps flow left.

00:10:54,890 --> 00:10:57,350
Gasp!

00:10:57,350 --> 00:11:01,080
Let's take a close look at the implementation of this algorithm.

00:11:01,080 --> 00:11:02,080
Okay.

00:11:02,080 --> 00:11:06,180
Just like there it is.

00:11:06,180 --> 00:11:07,180
Display flex.

00:11:07,180 --> 00:11:08,180
That's declarative CSS.

00:11:08,180 --> 00:11:14,500
I will give us a heart, because that's amazing that we can just - that's display flex.

00:11:14,500 --> 00:11:19,500
Okay, I did a ton of stuff and I didn't have to write that code, that how.

00:11:19,500 --> 00:11:21,320
That's the power of declarative programming.

00:11:21,320 --> 00:11:26,680
It's kind of the dream, I think, with what we do with CSS.

00:11:26,680 --> 00:11:33,440
So the thing is, there is of course a how to declarative programmes.

00:11:33,440 --> 00:11:39,650
We write the what, at we need to understand the how to make our code better.

00:11:39,650 --> 00:11:42,450
Let's have an iceberg metaphor.

00:11:42,450 --> 00:11:47,370
So, declarative on the top, and imperative on the bottom.

00:11:47,370 --> 00:11:52,420
When it comes to CSS, the imperative part is going to be our - the declarative part

00:11:52,420 --> 00:11:58,940
is going to be our iceberg at the top, and the C++ and Rust code that lies within a browser's

00:11:58,940 --> 00:12:05,100
rendering engine is what we have at the bottom.

00:12:05,100 --> 00:12:13,230
I was like I want to look at this imperative CSS, what is there?

00:12:13,230 --> 00:12:14,730
I started taking a look at the cascade.

00:12:14,730 --> 00:12:18,030
I love the cascade in CSS.

00:12:18,030 --> 00:12:21,430
Not only is the cascade wonderful but the first thing that shows up when you search

00:12:21,430 --> 00:12:25,410
algorithms and CSS.

00:12:25,410 --> 00:12:29,800
It combines property values from different source that is from Mozilla developer network.

00:12:29,800 --> 00:12:37,000
If we place this into our algorithms framework, we start with inputs from different sources,

00:12:37,000 --> 00:12:40,170
and our outputs.

00:12:40,170 --> 00:12:52,970
What is the difference in between in we sort by origin, specificity, and the origin specified.

00:12:52,970 --> 00:12:59,020
The winning value is what it sent to the browser's rendering engine.

00:12:59,020 --> 00:13:04,220
So I understood the cascade, like this is not ground breaking information.

00:13:04,220 --> 00:13:07,280
I'm guessing a lot of us here understand the cascade.

00:13:07,280 --> 00:13:11,220
I wanted to see what it looked like and I expected to find something like function cascade

00:13:11,220 --> 00:13:13,250
- magic.

00:13:13,250 --> 00:13:16,990
And that's pretty much what I found.

00:13:16,990 --> 00:13:19,330
Like function cascade.

00:13:19,330 --> 00:13:20,330
Look at it.

00:13:20,330 --> 00:13:21,440
It's right there!

00:13:21,440 --> 00:13:28,460
So the thing is, this is more of like a fun slide, because the cascade happens in hundreds

00:13:28,460 --> 00:13:33,220
of, maybe thousands of lines of code throughout the source of CSS but you can't pinpoint it

00:13:33,220 --> 00:13:34,220
to one file.

00:13:34,220 --> 00:13:35,220
This was like growing in size.

00:13:35,220 --> 00:13:37,510
Where did I find this code?

00:13:37,510 --> 00:13:43,220
I know you're dying to spend the weekend looking through Rust and C++.

00:13:43,220 --> 00:13:54,590
So we can go to searchfox.org, as well as cs.chromium.org which is the searchable repository

00:13:54,590 --> 00:13:55,590
of chromium.

00:13:55,590 --> 00:13:59,910
We want to look at the rendering engine.

00:13:59,910 --> 00:14:07,980
In Firefox, it is called Serveo, and in Chrome, called Blink.

00:14:07,980 --> 00:14:09,340
That's also used in Opera.

00:14:09,340 --> 00:14:16,870
My process for looking through these source files was to read the spec carefully, and

00:14:16,870 --> 00:14:21,030
I would go step by step through this and map what I was reading in the spec to the source

00:14:21,030 --> 00:14:24,290
code which was a nice process.

00:14:24,290 --> 00:14:28,130
Browser source code aimlessly gets a little bit tedious.

00:14:28,130 --> 00:14:34,190
Another thing I want to point out is that became like way more apparent and meaningful

00:14:34,190 --> 00:14:37,000
were the simple names of what we call in CSS.

00:14:37,000 --> 00:14:42,610
We are all familiar with the idea of selector property and value but this is called a declaration.

00:14:42,610 --> 00:14:47,090
I often call this a rule, and this whole thing is called a rule, and it's really important

00:14:47,090 --> 00:14:50,520
to, or rather these terms became way more meaningful after it had the experience of

00:14:50,520 --> 00:14:58,890
looking through the browser, because the CSS is parse ed specifically to retrieve each

00:14:58,890 --> 00:15:00,460
of these values.

00:15:00,460 --> 00:15:04,550
So, whatever, the cascade exists in the browser.

00:15:04,550 --> 00:15:05,880
Got it.

00:15:05,880 --> 00:15:13,750
This is when my CSS, this is when I had this enlightenment moment where I was like CSS,

00:15:13,750 --> 00:15:17,620
and I was like oh, my God, so cool, I see the stuff happening underneath.

00:15:17,620 --> 00:15:19,750
This is wonderful.

00:15:19,750 --> 00:15:26,430
So, I think that's where every line of code I would write, "I see this other part," and

00:15:26,430 --> 00:15:27,930
it was just amazing.

00:15:27,930 --> 00:15:33,310
So I suggested for everybody, a specific example to get back to the algorithm a little bit

00:15:33,310 --> 00:15:38,630
more, and about how my code and my style of writing could change after.

00:15:38,630 --> 00:16:06,250
This was a wonderful mock-up I received from one of my clients.

00:16:06,250 --> 00:16:11,750
... so the bottom would be transparent, the top would be like opaque, and then all the

00:16:11,750 --> 00:16:13,940
sideways would be, and what not.

00:16:13,940 --> 00:16:15,350
So I started coding this.

00:16:15,350 --> 00:16:19,920
Everything was great, and then I was like, the ratios are really different, and mobile

00:16:19,920 --> 00:16:23,680
versus the desktop, this is frustrating.

00:16:23,680 --> 00:16:27,720
A fun challenge but I'm getting annoyed.

00:16:27,720 --> 00:16:32,160
I began programming my CSS with a hammer, so if like anybody is sure we've done this

00:16:32,160 --> 00:16:33,440
before, where you're like work!

00:16:33,440 --> 00:16:36,750
And you're trying the ten things.

00:16:36,750 --> 00:16:39,700
Maybe it will work this time.

00:16:39,700 --> 00:16:42,650
So, I was like, okay, stop.

00:16:42,650 --> 00:16:43,650
Don't do that.

00:16:43,650 --> 00:16:47,350
I'm writing this whole talk about algorithms, and like algorithmic thinking in CSS.

00:16:47,350 --> 00:16:50,260
What if I break this down into an algorithms problem?

00:16:50,260 --> 00:16:53,620
So what are the inputs?

00:16:53,620 --> 00:16:55,120
Beautiful ocean image number one.

00:16:55,120 --> 00:16:59,520
Beautiful ocean image number two, and my viewport of course.

00:16:59,520 --> 00:17:01,670
What are the outputs?

00:17:01,670 --> 00:17:07,110
As CSS developers, we are programmers of boxes.

00:17:07,110 --> 00:17:08,110
What position will those be?

00:17:08,110 --> 00:17:12,659
I had to write an algorithm for this.

00:17:12,659 --> 00:17:14,409
How do I write an algorithm?

00:17:14,409 --> 00:17:19,030
I've been studying for these ridiculous whiled boarding interviews, here are the steps that

00:17:19,030 --> 00:17:23,199
you take.

00:17:23,199 --> 00:17:28,120
You plan your inputs and outputs.

00:17:28,120 --> 00:17:29,419
What steps you're going to take in between.

00:17:29,419 --> 00:17:37,200
You come one a brute force solution, and your brute force solution is a not performant solution

00:17:37,200 --> 00:17:40,200
for the algorithm, you're getting it done and getting it work.

00:17:40,200 --> 00:17:46,740
With something like brute force serve, you would rather than algorithmically or efficiently

00:17:46,740 --> 00:17:52,019
group certain elements and search in a more strategised way, you would go step by step,

00:17:52,019 --> 00:17:53,090
like is this the one?

00:17:53,090 --> 00:17:54,090
No.

00:17:54,090 --> 00:17:56,419
That's the idea of brute force.

00:17:56,419 --> 00:18:01,669
Third step, you would walk through, so like check and see how your algorithm works.

00:18:01,669 --> 00:18:03,600
Fourth step, optimise your solution.

00:18:03,600 --> 00:18:07,269
Apply different strategies for algorithms designed to whatever your brute-force solution

00:18:07,269 --> 00:18:09,980
was and refactor it.

00:18:09,980 --> 00:18:11,710
Great.

00:18:11,710 --> 00:18:15,710
So plan, talked about the inputs and outputs already.

00:18:15,710 --> 00:18:21,059
I took to my white board and figured out how I wanted these boxes to change at different

00:18:21,059 --> 00:18:27,320
view port sizes, and then came back and mapped out different values and behaviours I wanted

00:18:27,320 --> 00:18:29,000
for this specific layout.

00:18:29,000 --> 00:18:31,690
Then I jumped into some serial code.

00:18:31,690 --> 00:18:33,390
I was like, okay.

00:18:33,390 --> 00:18:35,900
I was like serial code for CSS?

00:18:35,900 --> 00:18:36,900
Cool.

00:18:36,900 --> 00:18:39,379
That's not something I usually do but this is really helpful.

00:18:39,379 --> 00:18:49,120
So then number 2, I would go to my brute force solution, and another word for that is spaghetti!

00:18:49,120 --> 00:18:51,480
Like spaghetti code.

00:18:51,480 --> 00:18:55,620
This is when this brute-force accept is when you have permission to write bad code.

00:18:55,620 --> 00:18:59,270
It is indicate, I don't have to think about the naming conventions, I want to figure out

00:18:59,270 --> 00:19:00,940
the solution to a problem.

00:19:00,940 --> 00:19:02,649
I had never approached CSS that way.

00:19:02,649 --> 00:19:10,680
It's how I approach JavaScript and - brute force CSS, what have we got?

00:19:10,680 --> 00:19:12,539
Smelly CSS!

00:19:12,539 --> 00:19:15,620
So some qualities of brute force CSS.

00:19:15,620 --> 00:19:17,180
Is it part of a system?

00:19:17,180 --> 00:19:18,249
No.

00:19:18,249 --> 00:19:21,379
If you're working within a design system, I'm not sure how many of us have the luxury

00:19:21,379 --> 00:19:23,029
of coining that.

00:19:23,029 --> 00:19:25,330
Scrap your design system for a second.

00:19:25,330 --> 00:19:30,899
Got to figure out a weird problem, not going to do it in the confines this system as it's

00:19:30,899 --> 00:19:32,580
a hindrance right now.

00:19:32,580 --> 00:19:33,720
Magic numbers?

00:19:33,720 --> 00:19:34,720
Absolutely.

00:19:34,720 --> 00:19:35,720
To do comments.

00:19:35,720 --> 00:19:38,870
Does it work?

00:19:38,870 --> 00:19:41,820
Absolutely.

00:19:41,820 --> 00:19:43,900
Figuring it out, it might work.

00:19:43,900 --> 00:19:44,900
Step three.

00:19:44,900 --> 00:19:45,900
Walk-through.

00:19:45,900 --> 00:19:49,659
This is when we can do the wonderful browser resizing that we developers love to do.

00:19:49,659 --> 00:19:52,460
Not sure if users do that but we love to do it.

00:19:52,460 --> 00:19:55,019
Make note of what works and doesn't.

00:19:55,019 --> 00:19:58,950
Fourth step: optimise our brute force CSS and refactor.

00:19:58,950 --> 00:20:02,320
"Optimise" is a word for refactor.

00:20:02,320 --> 00:20:09,450
We take our smelly CSS which magically transforms into a beautiful flower.

00:20:09,450 --> 00:20:14,529
A flower of optimised CSS!

00:20:14,529 --> 00:20:17,639
[Applause].

00:20:17,639 --> 00:20:24,749
I might have had the most fun making this slide.

00:20:24,749 --> 00:20:25,860
Optimised CSS, what are qualities?

00:20:25,860 --> 00:20:26,950
Part of the system?

00:20:26,950 --> 00:20:27,950
Yes.

00:20:27,950 --> 00:20:32,159
So this is when you have your like brute force code, you're like gross but I'm going to massage

00:20:32,159 --> 00:20:35,960
it back into the design system or the naming conventions that you're using.

00:20:35,960 --> 00:20:38,159
Users' algorithm.

00:20:38,159 --> 00:20:43,440
Does it take advantage of the intrinsic algorithms baked into CSS?

00:20:43,440 --> 00:20:48,110
So, like CSS Grid algorithms.

00:20:48,110 --> 00:20:49,110
Intentional cascade.

00:20:49,110 --> 00:20:51,570
I like this one because I love the cascade.

00:20:51,570 --> 00:20:54,700
How can I use the cascade.

00:20:54,700 --> 00:20:55,830
Let's use it.

00:20:55,830 --> 00:20:56,950
To do comments.

00:20:56,950 --> 00:21:04,360
They're not all going to be gone, but a lot will be.

00:21:04,360 --> 00:21:06,429
Small note here: this is kind of to me.

00:21:06,429 --> 00:21:10,720
We all write CSS differently our teams, write it differently, so these are some qualities

00:21:10,720 --> 00:21:13,450
of optimised CSS that I should shoot for.

00:21:13,450 --> 00:21:15,500
A little bit of code here.

00:21:15,500 --> 00:21:21,330
And preface it with a yellow light, because, as this code is taken out of context, and

00:21:21,330 --> 00:21:25,470
might not make entire sense smashed into a slide.

00:21:25,470 --> 00:21:30,820
This is the way I've followed this process to solve a problem.

00:21:30,820 --> 00:21:35,909
This is the solution to the ocean boxes issue.

00:21:35,909 --> 00:21:47,140
And then we have a centring algorithm.

00:21:47,140 --> 00:22:03,820
Finally, yeah, I failed fizz buzz now I'm like take that, fizz buzz and CSS do it.

00:22:03,820 --> 00:22:08,290
If anybody gets asked this in an interview, write it in CSS.

00:22:08,290 --> 00:22:14,429
If you're not familiar with fizz buzz, it is a beginner algorithms questions that is

00:22:14,429 --> 00:22:16,220
intended to stump people.

00:22:16,220 --> 00:22:17,240
It is not very nice.

00:22:17,240 --> 00:22:20,629
It is well meaning initially, but, I don't know.

00:22:20,629 --> 00:22:25,490
So, after doing all this and figuring out this new process for writing CSS for myself,

00:22:25,490 --> 00:22:29,240
I was like, "Did I come up with a new thing?

00:22:29,240 --> 00:22:32,390
Could this be algorithms in CSS?"

00:22:32,390 --> 00:22:39,269
It's like a new way of writing CSS or got to give it a name like "algorithmic CSS"?

00:22:39,269 --> 00:22:43,240
Or maybe "intrinsic algorithmic CSS"?

00:22:43,240 --> 00:22:44,240
Maybe.

00:22:44,240 --> 00:22:51,499
Then I was like hmm, haw, maybe I got better at writing CSS!

00:22:51,499 --> 00:22:56,470
But I think I'm interested to hear from everybody throughout the after the conference how you

00:22:56,470 --> 00:22:59,220
use algorithms, and if this makes sense?

00:22:59,220 --> 00:23:06,500
I'm going to wrap up a little bit with a tip that anybody who works in this design-to-development

00:23:06,500 --> 00:23:13,730
process with help smooth out that process, because, unfortunately, it is not all puppies

00:23:13,730 --> 00:23:15,630
and kittens.

00:23:15,630 --> 00:23:17,279
I like that expression.

00:23:17,279 --> 00:23:20,840
Here's a designer and developer, puppy and kitten.

00:23:20,840 --> 00:23:26,210
I think we can use algorithms as a common term to talk about how our designs are supposed

00:23:26,210 --> 00:23:28,070
to respond across device sizes.

00:23:28,070 --> 00:23:33,149
And, of course, I don't want to leave out the designer-developer algorithms.

00:23:33,149 --> 00:23:34,639
Yay.

00:23:34,639 --> 00:23:38,330
So, what would this look like, this conversation?

00:23:38,330 --> 00:23:39,620
Think about we have small screens.

00:23:39,620 --> 00:23:40,620
Okay.

00:23:40,620 --> 00:23:41,690
We have big screens.

00:23:41,690 --> 00:23:44,940
We have a component here that is changing based on the screen size.

00:23:44,940 --> 00:23:50,399
I think in this conversation, this design to development conversation, whether it is

00:23:50,399 --> 00:23:54,940
just with you as one person, or with a group, with a team, we can think about the resize

00:23:54,940 --> 00:23:57,070
rule, so what are the resize rules?

00:23:57,070 --> 00:24:00,700
What is the component resize rules for this particular element?

00:24:00,700 --> 00:24:02,129
Or, algorithm, maybe?

00:24:02,129 --> 00:24:04,509
Try it on for size.

00:24:04,509 --> 00:24:08,549
Here's a little example of one of my projects, one of the agencies I worked with was doing

00:24:08,549 --> 00:24:09,549
this already.

00:24:09,549 --> 00:24:13,149
Okay, that's great, I'm going to put this in my talk.

00:24:13,149 --> 00:24:18,360
They could kind of include a description of a component with the design for the pattern,

00:24:18,360 --> 00:24:23,179
and I was like, "Awesome, pseudo code, done, I don't have to do this part any more."

00:24:23,179 --> 00:24:28,289
Because we go back to our four-step algorithms-writing process.

00:24:28,289 --> 00:24:30,390
Our planning, step is done now, that's great.

00:24:30,390 --> 00:24:34,769
Here is the resulting algorithm for that little bit of code.

00:24:34,769 --> 00:24:36,049
Magic?

00:24:36,049 --> 00:24:37,320
Maybe.

00:24:37,320 --> 00:24:38,600
Yay.

00:24:38,600 --> 00:24:39,870
Conclusion.

00:24:39,870 --> 00:24:44,970
Here we go: okay.

00:24:44,970 --> 00:24:52,470
If you take away one thing from this talk, it is that iceberg metaphors are amazing.

00:24:52,470 --> 00:24:55,519
Okay, just kidding!

00:24:55,519 --> 00:25:00,509
I wanted it to be that the code we write is at the tip of the iceberg here, what we see,

00:25:00,509 --> 00:25:05,269
and how it works is all the way down there, so it's not something we necessarily see,

00:25:05,269 --> 00:25:09,730
and it's something we have to seek out and try to see for ourselves and fill in those

00:25:09,730 --> 00:25:14,710
gaps where we can, and filling in those gaps and constructing the bottom of the iceberg,

00:25:14,710 --> 00:25:19,619
we help the code we write be at the top more informed and intentional.

00:25:19,619 --> 00:25:26,540
Also, this idea for a really annoying app that would be the mindful CSS bell, and it

00:25:26,540 --> 00:25:31,830
will go off every 30 minutes and kind of catch you and make sure you're not writing CSS with

00:25:31,830 --> 00:25:34,230
a hammer and say, "Read the spec.

00:25:34,230 --> 00:25:38,450
Do you understand what this little line of code is doing that you're writing?"

00:25:38,450 --> 00:25:40,410
I haven't made this app and I might not, but it's an aid.

00:25:40,410 --> 00:25:49,350
At the end of the day: did I bridge the gap between CSS and computer science like I intended

00:25:49,350 --> 00:25:50,350
to?

00:25:50,350 --> 00:25:54,179
Well, it's a lot more like this.

00:25:54,179 --> 00:25:59,529
We have computer science, and, within computer science, we have CSS, and we have C++, and

00:25:59,529 --> 00:26:05,820
we have HTML, and we have JavaScript, and many other things, and so really, I don't

00:26:05,820 --> 00:26:08,470
know, it's all great.

00:26:08,470 --> 00:26:11,080
I love it.

00:26:11,080 --> 00:26:12,260
Okay.

00:26:12,260 --> 00:26:13,450
Yay.

00:26:13,450 --> 00:26:17,000
Thank you, everyone!

00:26:17,000 --> 00:26:20,559
[Cheering and Applause].

00:26:20,559 --> 00:26:25,940
This link is linking to a blog post where it's a very large compendium of a lot of sources

00:26:25,940 --> 00:26:27,690
about learning how a producer works and computer science.

00:26:27,690 --> 00:26:28,880
Thank you all.

00:26:28,880 --> 00:26:30,619
Looking forward to talking to you later.

00:26:30,619 --> 00:26:30,749

YouTube URL: https://www.youtube.com/watch?v=cCeqH6m_K20


