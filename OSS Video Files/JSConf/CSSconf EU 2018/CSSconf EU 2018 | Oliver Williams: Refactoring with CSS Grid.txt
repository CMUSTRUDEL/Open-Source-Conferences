Title: CSSconf EU 2018 | Oliver Williams: Refactoring with CSS Grid
Publication date: 2018-06-02
Playlist: CSSconf EU 2018
Description: 
	Is CSS grid ready for production? Find out from somebody who’s used grid on a large site – all while supporting Internet Explorer. I’ll discuss what I’ve already refactored with grid and what I plan to refactor once forthcoming features (display:contents and subgrid) are more widely implemented by browsers. I’ll show how I handled Internet Explorer and older browsers using @supports and simple fallback layouts. After working on a site that used javascript and backend logic together with floats to implement layouts, I’ll explain how I managed to refactor to use a pure CSS only approach thanks to grid. Working with grid also offers the perfect opportunity to start using CSS custom properties – because all browsers that support CSS grid also support custom properties.

CSSconf EU will be back on May 31st 2019: https://2019.cssconf.eu/
Captions: 
	00:00:05,200 --> 00:00:13,350
So, I first did my first talk about CSS Grid all the way back in 2016.

00:00:13,350 --> 00:00:21,530
At the time, it was only available in Firefox Nightly and Creme Canary, so I was making

00:00:21,530 --> 00:00:24,580
things that people could not actually see.

00:00:24,580 --> 00:00:32,300
I was using a whole bunch of brand new CSS features, leading-edge stuff.

00:00:32,300 --> 00:00:39,710
Just experiment be making sometimes more abstract, weird experimental layouts rather than real

00:00:39,710 --> 00:00:41,440
websites.

00:00:41,440 --> 00:00:48,809
It was fun but it's not something you can do at work!

00:00:48,809 --> 00:00:56,639
So now, of course, CSS Grid supported every where except internet explorer!

00:00:56,639 --> 00:00:59,920
[Laughter].

00:00:59,920 --> 00:01:02,820
It's a little frustrating, definitely.

00:01:02,820 --> 00:01:07,570
Around the same time that I was playing with these brand new CSS features, I was reading

00:01:07,570 --> 00:01:17,720
this book, so, it's basically all about progressive enhance ment.

00:01:17,720 --> 00:01:24,360
This is the idea that you can start off with semantic HTML and you can sort of slowly build

00:01:24,360 --> 00:01:30,320
in layers, and, once you've got that base of solid semantic HTML, you just add some

00:01:30,320 --> 00:01:34,590
CSS, you sprinkle on some JavaScript, and then you've got a website that every single

00:01:34,590 --> 00:01:37,630
person can use.

00:01:37,630 --> 00:01:42,220
Back then, his example was radius, right?

00:01:42,220 --> 00:01:46,030
At the time the book came out, this wasn't widely supported.

00:01:46,030 --> 00:01:51,980
Now, if you're on Opera Mini, even now, this still isn't supported but you can use it pretty

00:01:51,980 --> 00:01:59,620
much everywhere else, and, if you're on one of those old browsers, if you're stuck on

00:01:59,620 --> 00:02:11,540
perhaps IE4, I mean, on nature.com, we have 400 users on IE4, so these people are out

00:02:11,540 --> 00:02:12,540
there somewhere.

00:02:12,540 --> 00:02:16,939
I don't know what they're doing with their life!

00:02:16,939 --> 00:02:20,560
These people will see a square, and it's like, okay, that's fine.

00:02:20,560 --> 00:02:26,329
Let's take a far more modern example.

00:02:26,329 --> 00:02:32,060
This is me - this is my personal website on Google Chrome.

00:02:32,060 --> 00:02:35,420
This is my personal website on Firefox.

00:02:35,420 --> 00:02:43,019
In this will be my personal web on Firefox.

00:02:43,019 --> 00:02:47,560
So there is a whole bunch of stuff we can use without really worrying about it, without

00:02:47,560 --> 00:02:49,510
caring about it, without thinking about it.

00:02:49,510 --> 00:02:56,310
If it doesn't work, it doesn't matter, our website is still fine.

00:02:56,310 --> 00:03:00,500
Then we have layout stuff which of course is less fine.

00:03:00,500 --> 00:03:05,650
We have to wait until every single browser in the whole world is actually supporting

00:03:05,650 --> 00:03:09,620
this stuff before we feel we can use it on a production site.

00:03:09,620 --> 00:03:17,829
So this is back in the day in 2016, this was - this was one of my first just little weird

00:03:17,829 --> 00:03:23,090
experiments with CSS Grid, and so this is what it looked like back then in Knightly,

00:03:23,090 --> 00:03:28,120
and Canary, and this is what it it looked like for everything else.

00:03:28,120 --> 00:03:33,510
No thought into what what it will look like in other browsers.

00:03:33,510 --> 00:03:39,629
There are today some big websites using CSS Grid.

00:03:39,629 --> 00:03:43,290
This is the Guardian.

00:03:43,290 --> 00:03:50,400
This is what it looks like in a browser that doesn't support CSS Grid.

00:03:50,400 --> 00:03:52,609
This is the Financial Times.

00:03:52,609 --> 00:03:59,150
Again, using CSS Grid in this very simple, basic way, not really using it for everything,

00:03:59,150 --> 00:04:11,720
not really using it as much as it could do, and then here we have the FT in Internet Explorer,

00:04:11,720 --> 00:04:17,350
you can see that it looks pretty decent and pretty good, but it is a different layout.

00:04:17,350 --> 00:04:21,410
It is a simpler layout.

00:04:21,410 --> 00:04:27,570
It does mean their sidebar is now further down the page looking a little bit odd, but

00:04:27,570 --> 00:04:34,920
it is still kind of fine, and I think if you're take these two different approaches, of making

00:04:34,920 --> 00:04:41,660
the website look exactly the same, and kind of just making do with the best you can do

00:04:41,660 --> 00:04:47,900
for Internet Explorer, I think this is only the approach that is really worth taking,

00:04:47,900 --> 00:04:53,540
because otherwise, what you're doing, you're recreating the exact same layout in two different

00:04:53,540 --> 00:05:00,170
ways, and I think a lot of us are just so excited about using CSS Grid that we're like,

00:05:00,170 --> 00:05:05,190
yes, let's just use it, and then we have to deal with managers, when we have to deal with

00:05:05,190 --> 00:05:11,030
product owners, when we have to deal with QA, they're like, "We will make it look exactly

00:05:11,030 --> 00:05:17,181
the same," and you're just sending people more code, more CSS, and you're actually in

00:05:17,181 --> 00:05:19,150
a way making things more complicated.

00:05:19,150 --> 00:05:24,290
The whole reason we want to use CSS Grid is so we can do more exciting and experimental

00:05:24,290 --> 00:05:30,330
layouts, more artfully directed layouts but partly because it makes our life easier.

00:05:30,330 --> 00:05:35,540
As soon as you're writing two layouts to achieve the exact same thing, you're kind of losing

00:05:35,540 --> 00:05:37,150
all the benefit.

00:05:37,150 --> 00:05:41,910
I think the reality is we are going to have to make do.

00:05:41,910 --> 00:05:46,300
This year is a third example of a relatively large site.

00:05:46,300 --> 00:05:47,620
This is Stripe.

00:05:47,620 --> 00:05:52,350
Most of their customers are developers.

00:05:52,350 --> 00:05:56,800
So they can be probably a bit more - make assumptions about what browsers people are

00:05:56,800 --> 00:05:57,800
using.

00:05:57,800 --> 00:06:03,590
I'm sure their analytics show very few developers using Internet Explorer.

00:06:03,590 --> 00:06:09,620
If you're a developer who chooses that browser out of choice, then I don't even know what

00:06:09,620 --> 00:06:11,560
to say to that!

00:06:11,560 --> 00:06:17,450
Firefox has undoubtedly what is becoming the best tooling for doing layout stuff, and this

00:06:17,450 --> 00:06:23,430
will actually show you every single use of Grid on a web wage, so, this is Stripe.

00:06:23,430 --> 00:06:25,720
You can see they've really gone to town.

00:06:25,720 --> 00:06:31,590
They're using it all over the place to do what is really a quite interesting layout.

00:06:31,590 --> 00:06:36,790
I've got to say, I think it is one of the best designs, websites I've really come across.

00:06:36,790 --> 00:06:40,630
I think they've done a really good job.

00:06:40,630 --> 00:06:46,050
But, unfortunately, you know, this is what it looks like on internet explorer, which,

00:06:46,050 --> 00:06:54,500
yes, it is not great, readable, legible, it's not even usable.

00:06:54,500 --> 00:06:57,360
So these are the statistics as they are right now.

00:06:57,360 --> 00:07:05,740
It's gone from being almost what seemed like the only browser to a tiny three per cent,

00:07:05,740 --> 00:07:13,160
somewhat depressingly Edge actually is still used by fewer people than Internet Explorer.

00:07:13,160 --> 00:07:22,000
Hopefully, we will see this drop down further, but every single one of these people on recent

00:07:22,000 --> 00:07:29,770
versions of windows do actually have the option to open Edge whenever they want to, so I think

00:07:29,770 --> 00:07:35,020
we're just talking about very stubborn people like, "Oh, my God, please just open Edge."

00:07:35,020 --> 00:07:43,140
Depending what your client - this is GitHub as of this July.

00:07:43,140 --> 00:07:49,090
They're going to completely stop supporting Internet Explorer.

00:07:49,090 --> 00:07:53,210
That's one choice.

00:07:53,210 --> 00:07:57,150
If you're a content-driven site, some of us are making complicated web apps, some of us

00:07:57,150 --> 00:08:01,900
are to manage Google maps, very JavaScript heavy.

00:08:01,900 --> 00:08:08,050
If you're a content-driven site where you've got a bunch of HTML, you can take this approach.

00:08:08,050 --> 00:08:11,680
This is the Guardian in Internet Explorer.

00:08:11,680 --> 00:08:17,480
This is nature.com in Internet Explorer 9.

00:08:17,480 --> 00:08:23,420
To avoid that Stripe issue where you have something completely illegible, something

00:08:23,420 --> 00:08:31,580
completely and utterly unusable, instead, you strip out the CSS, and you're left with

00:08:31,580 --> 00:08:32,840
pure HTML.

00:08:32,840 --> 00:08:36,380
It doesn't look amazing, but it will work.

00:08:36,380 --> 00:08:41,830
I think going forward, as we see a further drop -off of Internet Explorer uses, this

00:08:41,830 --> 00:08:49,590
will become an increasingly viable way to deal with old browsers, so this is just using

00:08:49,590 --> 00:08:56,800
a relatively complicated media query, and I'm not going to explain what all that stuff

00:08:56,800 --> 00:08:58,770
actually means because it is kind of irrelevant.

00:08:58,770 --> 00:09:02,250
This is basically ly a hack.

00:09:02,250 --> 00:09:08,980
This will make your CSS appear absolutely everywhere except Internet Explorer and old

00:09:08,980 --> 00:09:10,580
browsers.

00:09:10,580 --> 00:09:13,740
Because, we're not just talking about CSS Grid.

00:09:13,740 --> 00:09:20,530
When we talk about internet explorer, this is a comparison of Internet Explorer 11 and

00:09:20,530 --> 00:09:22,700
the latest version of Chrome.

00:09:22,700 --> 00:09:29,980
If I zoom in closely, you will see this is a list of every single feature that Internet

00:09:29,980 --> 00:09:36,990
Explorer 11 doesn't support with Chrome does support, and it's an ever-growing list, because

00:09:36,990 --> 00:09:41,630
in Explorer right now, it's security updates only, right?

00:09:41,630 --> 00:09:46,700
So every single time I see discussion on the internet about there's a new feature, everyone's

00:09:46,700 --> 00:09:51,250
excited about it, there is always some guy, can you use it in internet explorer?

00:09:51,250 --> 00:10:00,270
To which the answer forever more is no, you definitely can't.

00:10:00,270 --> 00:10:07,140
And so, I'm sure in doing cross-browser test, this is where I spend a lot of my life in

00:10:07,140 --> 00:10:15,300
browser stack, opening various browsers, getting my own mobile phobe out, which has got, like,

00:10:15,300 --> 00:10:20,620
seven different browsers on it, because it's kind of easy to run into a browser bug.

00:10:20,620 --> 00:10:26,630
This is the working group, the CSS working group of the W3C who are the people that make

00:10:26,630 --> 00:10:27,790
the standards.

00:10:27,790 --> 00:10:34,450
They kind of know what they're doing better than anyone yet this is their website in Safari.

00:10:34,450 --> 00:10:44,460
So this is why it can be such a good idea to actually use this technique developed by

00:10:44,460 --> 00:10:50,690
the BBC a fair few years ago which you can update, just cut out Internet Explorer completely

00:10:50,690 --> 00:10:55,720
because if you're not actively checking every old browser out there, the chances are you're

00:10:55,720 --> 00:11:00,430
going to run into stuff like this and not know it and have unreadable, and illegible

00:11:00,430 --> 00:11:05,560
content and unusable content.

00:11:05,560 --> 00:11:12,650
I'm sure most of us aren't there yet where we can just say you get some plain HTML if

00:11:12,650 --> 00:11:15,010
you're in Explorer.

00:11:15,010 --> 00:11:20,440
This is nature.com.

00:11:20,440 --> 00:11:24,080
This is nature.com in Explorer.

00:11:24,080 --> 00:11:27,300
You're thinking why even bother?

00:11:27,300 --> 00:11:32,720
If you can do a layout with Flexbox, do it with Flexbox.

00:11:32,720 --> 00:11:38,779
I think when talking about how do you progressively enhance a layout, how do you progressively

00:11:38,779 --> 00:11:46,360
enhance the CSS Grid, if you're trying to achieve the exact same layout, there's not

00:11:46,360 --> 00:11:48,089
that much point.

00:11:48,089 --> 00:11:57,850
This is CSS without CSS Grid, this is Flexbox layout in Internet Explorer.

00:11:57,850 --> 00:12:01,490
You can kind of tell why we actually needed CSS Grid, right?

00:12:01,490 --> 00:12:07,730
This is the kind of thing that was harder to deal with, to actually have these consistent

00:12:07,730 --> 00:12:08,730
columns.

00:12:08,730 --> 00:12:16,610
In the last talk, you heard about app support.

00:12:16,610 --> 00:12:22,490
I think the really frustrating thing about app supports is you do have to find your pullback

00:12:22,490 --> 00:12:28,450
layout first which is more counterintuitive really than I would like it to be, so we've

00:12:28,450 --> 00:12:36,690
got the margin for internet Internet Explorer, styling for Internet Explorer, different columns,

00:12:36,690 --> 00:12:42,330
and then you have to actually take all of those things away and remove them, so it's

00:12:42,330 --> 00:12:45,810
not the nicest code in the world.

00:12:45,810 --> 00:12:51,190
Desperate to take it out of there.

00:12:51,190 --> 00:12:57,420
But it can be done if you're happy with something that isn't quite 100 per cent exactly the

00:12:57,420 --> 00:12:59,430
same.

00:12:59,430 --> 00:13:07,400
We're not using CSS Grid as some kind of developer convenience to make our lives easier, we're

00:13:07,400 --> 00:13:17,460
talking about less code, sending lows code to people's browsers, actually

00:13:17,460 --> 00:13:23,730
increasing performance, improving performance, and, yes, making out as well as make us ourselves,

00:13:23,730 --> 00:13:27,540
making all our lives a whole lot easier.

00:13:27,540 --> 00:13:31,020
So these are some refactoring that I've done relatively recently.

00:13:31,020 --> 00:13:37,390
We did have some layout done in Kotlin which I'm sure is relatively unusual and was a little

00:13:37,390 --> 00:13:39,210
crazy.

00:13:39,210 --> 00:13:45,290
As well as just JavaScript for doing layout, which really obviously should be CSS's job.

00:13:45,290 --> 00:13:52,490
There is still now, even though it has shipped in most browsers, there are a whole bunch

00:13:52,490 --> 00:13:55,520
of useful features we are waiting for.

00:13:55,520 --> 00:13:59,920
In HTML, some stuff has to be nested.

00:13:59,920 --> 00:14:04,390
As we know, I think the most obvious example of that is the form element, right?

00:14:04,390 --> 00:14:09,839
So you can't have a label, you can't have an input without a form.

00:14:09,839 --> 00:14:16,170
Every CSS Grid that kind of matters because it is only direct children of a grid that

00:14:16,170 --> 00:14:19,959
are actually going to be laid out in your grid.

00:14:19,959 --> 00:14:26,100
This is where just content will come in handy.

00:14:26,100 --> 00:14:31,830
This is a slightly technical explanation from the actual spec.

00:14:31,830 --> 00:14:38,130
It's probably slightly easier to show a visual representation of what that actually means.

00:14:38,130 --> 00:14:44,490
Here's a rather contrived layout, a simple two-column grid.

00:14:44,490 --> 00:14:49,860
You can see the whole form is actually just inside of one single grid cell, and however

00:14:49,860 --> 00:14:54,660
much stuff I put in the form, it's all going to be in a single cell, and as soon as you

00:14:54,660 --> 00:15:02,540
put display contents on to the form, then things will be laid out into the two columns,

00:15:02,540 --> 00:15:10,290
and so that will make Grid a lot, lot easier to work with for a lot of Edge cases that

00:15:10,290 --> 00:15:12,660
you will run into.

00:15:12,660 --> 00:15:14,620
That already has reasonable support.

00:15:14,620 --> 00:15:17,470
I think we are waiting on Edge at this point.

00:15:17,470 --> 00:15:22,970
So it is supported everywhere else.

00:15:22,970 --> 00:15:31,300
This is the kind of thing I hope going forward sub grids are help us deal with.

00:15:31,300 --> 00:15:37,200
So, sub grid, I haven't been able to play around with it because it's not actually supported

00:15:37,200 --> 00:15:41,420
in any single browser in the whole world yet.

00:15:41,420 --> 00:15:47,920
But, you can see those are two grids here almost.

00:15:47,920 --> 00:15:54,840
You've got the cards, but then the actual inside of the cards are also equal to one

00:15:54,840 --> 00:16:01,300
another, and that's something that, at the moment, unless you use specific heights, and

00:16:01,300 --> 00:16:06,070
you actually just say, "This is going to be this many pixels high", you can't really get

00:16:06,070 --> 00:16:10,430
that effect, and that obviously means you've got the potential for truncating content,

00:16:10,430 --> 00:16:14,720
for content being completely cut through.

00:16:14,720 --> 00:16:21,290
Generally, something to avoid, so, sub grid is really going to help us with that hopefully

00:16:21,290 --> 00:16:23,080
when it is implemented.

00:16:23,080 --> 00:16:28,970
It's not all completely panned out yet in the spec, but achieving this sort of layout

00:16:28,970 --> 00:16:33,930
should be as easy as "display sub grid".

00:16:33,930 --> 00:16:40,320
All those examples we've actually seen of the big production websites of using Grid

00:16:40,320 --> 00:16:49,700
have been very, very simple - put a side bar to the side, simple layouts - which is a shame,

00:16:49,700 --> 00:16:57,640
because I think Grid is such an intuitive and useful way to set out layout, and the

00:16:57,640 --> 00:17:02,209
first time I actually started reading about Grid and thinking about Grid, everything was

00:17:02,209 --> 00:17:07,860
saying you use Grid for things that are in two directions, right?

00:17:07,860 --> 00:17:11,220
Then you use Flexbox if it only goes in one direction.

00:17:11,220 --> 00:17:18,110
Actually, Grid is so powerful that a lot of time, it is more - it's actually superior

00:17:18,110 --> 00:17:22,650
to Flexbox even for these one-dimensional layouts.

00:17:22,650 --> 00:17:29,290
So we could use Grid throughout our whole website, but we're probably not really there

00:17:29,290 --> 00:17:32,560
yet.

00:17:32,560 --> 00:17:37,490
If you to want to learn more about progressive enhancement and dealing with Internet Explorer,

00:17:37,490 --> 00:17:42,000
I do have a whole article about that.

00:17:42,000 --> 00:17:43,000
And thanks!

00:17:43,000 --> 00:17:43,500

YouTube URL: https://www.youtube.com/watch?v=tmQuGgtq5SI


