Title: Malte Ubl - Designing very large JavaScript applications
Publication date: 2018-04-11
Playlist: JSConf Australia 2018
Description: 
	Over the last years a modular approach to programming in JS gained a huge following and with the advent of virtual DOM building isomorphic JavaScript application for the web became dramatically more approachable; yet, we are still largely deploying monolithic application blobs that know how to render the settings page of our single page apps before accepting user input on the homepage.

My talk will explore 2 primary themes:

How to build highly sophisticated web apps that load a constant amount of JS to make the first page the user sees interactive; where constant means, even if you have 100s of engineers write code for your app for a year, the size will still be the same.
How to throughout the lifecycle of your application never load a single line of JS that is not currently needed.
As part of this exploration I will introduce 3 novel concepts: lazy decoration, asynchronous dependency injection and reverse dependencies in module systems.

Come see my talk if you enjoy nerding out on over-engineering problems, or want to build the next YouTube or Twitter.
Captions: 
	00:00:10,180 --> 00:00:14,840
hmm hey other one

00:00:12,170 --> 00:00:17,060
my name is Malta this was this were the

00:00:14,840 --> 00:00:18,680
nested loops who performed last year at

00:00:17,060 --> 00:00:21,050
Jes come for you you should check out

00:00:18,680 --> 00:00:24,320
the video it's amazing so many

00:00:21,050 --> 00:00:26,930
JavaScript funds in 3 minutes of music

00:00:24,320 --> 00:00:28,220
yeah by the way I'm crying forcing the

00:00:26,930 --> 00:00:30,380
internet I don't really want to go into

00:00:28,220 --> 00:00:33,170
why that's the case and there's another

00:00:30,380 --> 00:00:35,090
important fact about me I used to build

00:00:33,170 --> 00:00:37,250
very large JavaScript applications I

00:00:35,090 --> 00:00:38,899
don't actually do that anymore so I

00:00:37,250 --> 00:00:41,180
thought it was like a good kind of time

00:00:38,899 --> 00:00:43,579
to give a bit of a retrospective and

00:00:41,180 --> 00:00:45,350
share what I learned yesterday I was

00:00:43,579 --> 00:00:47,210
having a beer and I was asked like hey

00:00:45,350 --> 00:00:49,399
Malta so what actually gives you the

00:00:47,210 --> 00:00:52,219
right authority to talk about this topic

00:00:49,399 --> 00:00:53,269
and I was actually gonna talk about that

00:00:52,219 --> 00:00:55,160
anyway because I think it's a bit on

00:00:53,269 --> 00:00:56,929
topic usually I think talking about

00:00:55,160 --> 00:00:58,399
yourself is a bit weird so I built this

00:00:56,929 --> 00:01:02,839
JavaScript for America at Google and

00:00:58,399 --> 00:01:05,089
it's used by photos sites plus Drive

00:01:02,839 --> 00:01:07,550
play and the search engine and like all

00:01:05,089 --> 00:01:09,290
these projects right so I guess but some

00:01:07,550 --> 00:01:13,190
of them are pretty large you might have

00:01:09,290 --> 00:01:16,640
used a few of them and this javascript

00:01:13,190 --> 00:01:18,860
firm work is not open source which is

00:01:16,640 --> 00:01:20,810
sad I guess but I think there's some

00:01:18,860 --> 00:01:22,310
relevant things to be learned and the

00:01:20,810 --> 00:01:24,020
reason why it's not open source is

00:01:22,310 --> 00:01:26,540
because the kind that came out at the

00:01:24,020 --> 00:01:28,160
same time is reacting I was like do we

00:01:26,540 --> 00:01:30,830
really need another JavaScript framework

00:01:28,160 --> 00:01:32,000
like Java like Google has a few of those

00:01:30,830 --> 00:01:34,520
right there's like angular and polymer

00:01:32,000 --> 00:01:37,730
and I just thought it would confuse

00:01:34,520 --> 00:01:40,850
people and I was like well just keep it

00:01:37,730 --> 00:01:42,410
to ourselves but I don't think that's

00:01:40,850 --> 00:01:45,710
actually all that that's not what this

00:01:42,410 --> 00:01:46,790
talk is about anyway so I just have some

00:01:45,710 --> 00:01:51,320
stuff and I think it's generally

00:01:46,790 --> 00:01:52,430
applicable so let's talk about very

00:01:51,320 --> 00:01:56,180
large application what do they have in

00:01:52,430 --> 00:01:58,640
common so certainly that you might have

00:01:56,180 --> 00:02:01,610
a lot of developers right so it might be

00:01:58,640 --> 00:02:03,200
like a few dozen or so and so because

00:02:01,610 --> 00:02:05,330
there's no humans humans have feelings

00:02:03,200 --> 00:02:07,430
and if problems and you have to factor

00:02:05,330 --> 00:02:09,590
that in and even if your team is not as

00:02:07,430 --> 00:02:10,789
big maybe you're working on that thing

00:02:09,590 --> 00:02:12,379
for a while and maybe you're not

00:02:10,789 --> 00:02:14,300
actually the first person working on

00:02:12,379 --> 00:02:15,620
this you might not have all the context

00:02:14,300 --> 00:02:17,270
that might be stuff that you don't

00:02:15,620 --> 00:02:19,430
really understand there might be people

00:02:17,270 --> 00:02:22,470
now on your team that don't understand

00:02:19,430 --> 00:02:25,050
everything that's in the application

00:02:22,470 --> 00:02:26,340
so that's kind of what we have to think

00:02:25,050 --> 00:02:28,530
about when we want to build these very

00:02:26,340 --> 00:02:30,000
large applications that have maybe

00:02:28,530 --> 00:02:30,630
different properties from us from a

00:02:30,000 --> 00:02:33,300
smaller one

00:02:30,630 --> 00:02:35,670
and another thing I wanted to do here is

00:02:33,300 --> 00:02:38,400
to give that a bit of a context in terms

00:02:35,670 --> 00:02:40,470
of everyone's careers so I think many of

00:02:38,400 --> 00:02:43,860
us here in the room would maybe consider

00:02:40,470 --> 00:02:45,300
themselves a senior engineer or we're

00:02:43,860 --> 00:02:48,120
not quite there yet but we want to

00:02:45,300 --> 00:02:50,430
become one and I think that's what that

00:02:48,120 --> 00:02:53,400
means is you know as a C engineer I kind

00:02:50,430 --> 00:02:55,260
of think that I would be able to almost

00:02:53,400 --> 00:02:56,850
solve every problem that someone soft

00:02:55,260 --> 00:02:59,100
throws at me right I kind of know my

00:02:56,850 --> 00:03:01,020
tools and I know my domain and you know

00:02:59,100 --> 00:03:02,970
I can I can do things and the other

00:03:01,020 --> 00:03:05,550
important part of that job is that I

00:03:02,970 --> 00:03:09,180
make the junior engineers on my team be

00:03:05,550 --> 00:03:12,630
senior engineers but what what happens

00:03:09,180 --> 00:03:14,070
is that at some point we wonder like

00:03:12,630 --> 00:03:16,860
what might be the next step we've

00:03:14,070 --> 00:03:19,320
reached that seniority stage what is the

00:03:16,860 --> 00:03:20,370
next thing we're going to do and so for

00:03:19,320 --> 00:03:22,410
some of us the answer might be

00:03:20,370 --> 00:03:24,510
management but I don't think that should

00:03:22,410 --> 00:03:25,950
be the answer for everyone because not

00:03:24,510 --> 00:03:28,050
everyone should be a manager right like

00:03:25,950 --> 00:03:30,150
some of us really great engineers and

00:03:28,050 --> 00:03:34,050
why don't we do that for the rest of our

00:03:30,150 --> 00:03:37,080
lives so I want to propose a way to kind

00:03:34,050 --> 00:03:39,810
of level up a bit of Buffett's in senior

00:03:37,080 --> 00:03:41,940
level so the way I would talk about

00:03:39,810 --> 00:03:45,660
myself as a senior engineers that I say

00:03:41,940 --> 00:03:47,430
like I know how I would solve a problem

00:03:45,660 --> 00:03:49,110
right and because I know how I would

00:03:47,430 --> 00:03:52,620
solve it I could also teach someone else

00:03:49,110 --> 00:03:56,130
how to solve the problem and so my my

00:03:52,620 --> 00:03:59,580
theory is that the next level is that I

00:03:56,130 --> 00:04:02,970
can say about myself I know how others

00:03:59,580 --> 00:04:05,160
would solve the problem let's make this

00:04:02,970 --> 00:04:08,670
a bit more concrete so you make that

00:04:05,160 --> 00:04:10,680
sentence I can anticipate how the API

00:04:08,670 --> 00:04:12,330
choices that I'm making or the

00:04:10,680 --> 00:04:14,820
abstractions that I'm introducing in a

00:04:12,330 --> 00:04:18,030
project how they impact the way other

00:04:14,820 --> 00:04:20,880
people would solve a problem I think

00:04:18,030 --> 00:04:24,510
this is a fundamentally like powerful

00:04:20,880 --> 00:04:26,520
concept that allows me to to reason

00:04:24,510 --> 00:04:28,710
about how the choices are making in

00:04:26,520 --> 00:04:32,370
software design how they impact the

00:04:28,710 --> 00:04:34,919
implication and I would also call this

00:04:32,370 --> 00:04:36,330
an application of empathy right so

00:04:34,919 --> 00:04:38,189
you're thinking with other stuff

00:04:36,330 --> 00:04:40,710
engineers and you're thinking about how

00:04:38,189 --> 00:04:42,569
what you do and the api's that you're

00:04:40,710 --> 00:04:46,289
giving them how they impact how they

00:04:42,569 --> 00:04:49,439
write software right luckily this is

00:04:46,289 --> 00:04:50,819
empathy on easy mode because you know

00:04:49,439 --> 00:04:53,460
empathy generally it's hard and this is

00:04:50,819 --> 00:04:55,259
still very hard but at least the people

00:04:53,460 --> 00:04:56,849
that you're having empathy with there

00:04:55,259 --> 00:04:58,949
are also other software developers or

00:04:56,849 --> 00:05:00,569
other software engineers and so while

00:04:58,949 --> 00:05:02,520
they might be very different from you

00:05:00,569 --> 00:05:04,259
they at least have in common that they

00:05:02,520 --> 00:05:06,389
you know building software and and I

00:05:04,259 --> 00:05:10,080
think that this is something you can get

00:05:06,389 --> 00:05:12,030
quite good at all right so thinking

00:05:10,080 --> 00:05:14,219
about these topics there's one very

00:05:12,030 --> 00:05:16,800
important term we're going to talk about

00:05:14,219 --> 00:05:18,240
which is the programming model so which

00:05:16,800 --> 00:05:21,090
is the word that I'm going to use a lot

00:05:18,240 --> 00:05:23,009
which means like given a set of API s or

00:05:21,090 --> 00:05:23,610
set of libraries or set of framework set

00:05:23,009 --> 00:05:25,620
of tools

00:05:23,610 --> 00:05:29,310
how do people write software in that

00:05:25,620 --> 00:05:33,000
context and so my talk is really about

00:05:29,310 --> 00:05:34,860
how subtle changes in API is and so

00:05:33,000 --> 00:05:36,659
forth how they impact the programming

00:05:34,860 --> 00:05:39,360
model I want to give a few examples

00:05:36,659 --> 00:05:41,819
about things that impact the program

00:05:39,360 --> 00:05:43,080
model right so let's say if your angular

00:05:41,819 --> 00:05:45,060
project and you're saying like no I'm

00:05:43,080 --> 00:05:46,110
gonna pop this to react that is awfully

00:05:45,060 --> 00:05:48,090
going to change where people write

00:05:46,110 --> 00:05:50,849
software right but then you're like ah

00:05:48,090 --> 00:05:53,250
you know sex the kilobyte for like this

00:05:50,849 --> 00:05:56,759
Dom de thing that seems reasonable let's

00:05:53,250 --> 00:05:58,289
switch to pre act and that's an API

00:05:56,759 --> 00:05:59,490
compatible thing it's not going to

00:05:58,289 --> 00:06:02,310
change the way people write software

00:05:59,490 --> 00:06:03,509
just because you make that choice maybe

00:06:02,310 --> 00:06:04,710
then you're saying like oh this is

00:06:03,509 --> 00:06:06,029
really complex I should have liked

00:06:04,710 --> 00:06:07,710
something orchestrating how much

00:06:06,029 --> 00:06:09,750
vacation works I'm gonna introduce Redux

00:06:07,710 --> 00:06:11,669
that is going to change how people write

00:06:09,750 --> 00:06:13,919
software you're then getting this

00:06:11,669 --> 00:06:15,300
requirement we are needing a date picker

00:06:13,919 --> 00:06:16,889
and you're going to NPM you search for

00:06:15,300 --> 00:06:18,569
date picker there's 500 results you pick

00:06:16,889 --> 00:06:21,330
one doesn't really matter which one you

00:06:18,569 --> 00:06:23,819
pick will not change how you write

00:06:21,330 --> 00:06:24,569
software but having npm at your

00:06:23,819 --> 00:06:27,029
fingertips

00:06:24,569 --> 00:06:28,800
this vast like you know collection of

00:06:27,029 --> 00:06:30,539
modules having that and being able to

00:06:28,800 --> 00:06:34,259
use it in your application it does

00:06:30,539 --> 00:06:35,669
change how you write software cool yeah

00:06:34,259 --> 00:06:38,009
so these are just a few examples about

00:06:35,669 --> 00:06:41,039
like things how you can impact the way

00:06:38,009 --> 00:06:43,889
people write software now I want to talk

00:06:41,039 --> 00:06:45,270
about one aspect that all large

00:06:43,889 --> 00:06:48,029
JavaScript applications have in common

00:06:45,270 --> 00:06:49,120
when you deliver them to users which is

00:06:48,029 --> 00:06:52,750
that a venture

00:06:49,120 --> 00:06:55,389
they will get so big that you don't want

00:06:52,750 --> 00:06:58,060
to like deliver them all at once and for

00:06:55,389 --> 00:07:00,760
this which kind of all introduced this

00:06:58,060 --> 00:07:02,290
technique called code splitting what

00:07:00,760 --> 00:07:04,900
code splitting means is that you define

00:07:02,290 --> 00:07:07,270
a set of bundles for your application so

00:07:04,900 --> 00:07:08,860
he's saying like you know me you some

00:07:07,270 --> 00:07:10,930
users to use this some users use that

00:07:08,860 --> 00:07:13,690
let's put like a bundle together and I'm

00:07:10,930 --> 00:07:15,460
only going to load that bundle if the

00:07:13,690 --> 00:07:18,360
function of the application that the

00:07:15,460 --> 00:07:20,290
user is actually using is being executed

00:07:18,360 --> 00:07:22,930
and that's something that every one of

00:07:20,290 --> 00:07:25,060
us can can do like many things it was

00:07:22,930 --> 00:07:27,010
invented by closure compiler at least in

00:07:25,060 --> 00:07:28,690
the JavaScript world but I think the

00:07:27,010 --> 00:07:31,300
most popular way of doing code splitting

00:07:28,690 --> 00:07:33,970
is with a pack and if using for example

00:07:31,300 --> 00:07:35,680
objects which is super awesome they just

00:07:33,970 --> 00:07:37,720
recently a few weeks ago added support

00:07:35,680 --> 00:07:39,430
for this so definitely something y'all

00:07:37,720 --> 00:07:41,770
should do but there are some things to

00:07:39,430 --> 00:07:44,050
think about when you introduce this to

00:07:41,770 --> 00:07:47,260
an application because it does have

00:07:44,050 --> 00:07:50,380
impact on the programming model you have

00:07:47,260 --> 00:07:52,510
things that used to be sync they now

00:07:50,380 --> 00:07:54,550
become async so without code splitting

00:07:52,510 --> 00:07:57,070
the application is nice and simple it's

00:07:54,550 --> 00:07:58,990
one big thing it starts up and then it's

00:07:57,070 --> 00:08:00,550
stable and you can assume stuff about

00:07:58,990 --> 00:08:02,440
you can reason about it you don't have

00:08:00,550 --> 00:08:05,440
to wait for stuff with code splitting

00:08:02,440 --> 00:08:06,849
you might sometimes say oh I need that

00:08:05,440 --> 00:08:09,700
bundle so you know needs to go to the

00:08:06,849 --> 00:08:11,919
network and you have to affect your in

00:08:09,700 --> 00:08:14,349
that this can happen and so your

00:08:11,919 --> 00:08:18,720
application becomes more complex also we

00:08:14,349 --> 00:08:22,000
have humans entering the field because

00:08:18,720 --> 00:08:24,340
Co splitting requires you to like define

00:08:22,000 --> 00:08:26,849
bundles and it requires you to think

00:08:24,340 --> 00:08:29,410
about when to load them so these humans

00:08:26,849 --> 00:08:31,690
engineers on your team they have to now

00:08:29,410 --> 00:08:33,370
make the decisions what is going into

00:08:31,690 --> 00:08:36,789
which bundle and one to load that bundle

00:08:33,370 --> 00:08:38,860
right and every time you have a human

00:08:36,789 --> 00:08:40,000
involved that definitely impacts the

00:08:38,860 --> 00:08:43,029
program model because now they have to

00:08:40,000 --> 00:08:45,880
think about it now there is one very

00:08:43,029 --> 00:08:47,620
established way that solves the problem

00:08:45,880 --> 00:08:49,750
that gets the human kind of out of this

00:08:47,620 --> 00:08:51,490
mess when doing code spinning which is

00:08:49,750 --> 00:08:55,060
called route based code splitting and

00:08:51,490 --> 00:08:56,410
that is my like if you don't do it yet

00:08:55,060 --> 00:08:59,500
that's probably the way how you should

00:08:56,410 --> 00:09:02,050
do it as a first cut so routes are like

00:08:59,500 --> 00:09:02,440
the the baseline URL structures of you

00:09:02,050 --> 00:09:04,780
okay

00:09:02,440 --> 00:09:06,280
so my for example in you might have all

00:09:04,780 --> 00:09:08,470
your product pages on slash product

00:09:06,280 --> 00:09:11,260
slash and some IG and you could category

00:09:08,470 --> 00:09:12,700
pages somewhere else right and so your

00:09:11,260 --> 00:09:15,090
router in your application now

00:09:12,700 --> 00:09:17,650
understands there's code splitting and

00:09:15,090 --> 00:09:20,710
whenever you go to a road the router

00:09:17,650 --> 00:09:23,410
loads the code and then within that

00:09:20,710 --> 00:09:25,680
route you can forget about Co splitting

00:09:23,410 --> 00:09:27,640
existing right now you're back to the

00:09:25,680 --> 00:09:29,980
programming model that was almost the

00:09:27,640 --> 00:09:31,480
same as if you had just one big bundle

00:09:29,980 --> 00:09:33,580
for everything all right so it's a

00:09:31,480 --> 00:09:36,700
really nice way to do this and

00:09:33,580 --> 00:09:39,760
definitely a good first step however the

00:09:36,700 --> 00:09:42,610
talk title is designing very large

00:09:39,760 --> 00:09:45,160
JavaScript applications and they're so

00:09:42,610 --> 00:09:48,490
large that sometimes a single route

00:09:45,160 --> 00:09:50,830
bundle might not you know be feasible

00:09:48,490 --> 00:09:54,520
anymore because those those routes

00:09:50,830 --> 00:09:55,930
itself get to fit very big I actually

00:09:54,520 --> 00:09:58,450
have a good example for for an

00:09:55,930 --> 00:09:59,770
application that's big enough so I was

00:09:58,450 --> 00:10:03,700
like figuring out how to be a public

00:09:59,770 --> 00:10:05,290
speaker coming up to this talk and I get

00:10:03,700 --> 00:10:07,390
this like nice list of blue things right

00:10:05,290 --> 00:10:11,560
and you could totally envision this page

00:10:07,390 --> 00:10:13,270
to be like super wealth you know fitted

00:10:11,560 --> 00:10:15,640
for for route based code splittings like

00:10:13,270 --> 00:10:18,100
search slash and there's this list of

00:10:15,640 --> 00:10:19,930
stuff and it's not very complicated but

00:10:18,100 --> 00:10:21,430
then I wasn't I kind of wondering what

00:10:19,930 --> 00:10:25,720
the weather was because California kind

00:10:21,430 --> 00:10:27,010
of had a bit of a cold one and so I was

00:10:25,720 --> 00:10:29,140
searching over there was Simpsons

00:10:27,010 --> 00:10:32,250
suddenly there was completely different

00:10:29,140 --> 00:10:34,690
different module right and so this

00:10:32,250 --> 00:10:37,170
seemingly simple route of slash search

00:10:34,690 --> 00:10:39,490
is more complicated and we thought and

00:10:37,170 --> 00:10:41,410
then I was getting invited to this

00:10:39,490 --> 00:10:44,410
conference super exciting and I was

00:10:41,410 --> 00:10:46,720
checking out how much you know US

00:10:44,410 --> 00:10:49,390
dollars are in one Australian dollar and

00:10:46,720 --> 00:10:51,490
there's this you know complex currency

00:10:49,390 --> 00:10:53,290
converter and so again I think it's

00:10:51,490 --> 00:10:55,420
obviously there's like a thousand

00:10:53,290 --> 00:10:57,400
special ones of these right and so it's

00:10:55,420 --> 00:10:58,720
infeasible to say we're going to put all

00:10:57,400 --> 00:11:00,130
of them in one bundle because then that

00:10:58,720 --> 00:11:02,110
bundle is gonna be like a megabyte and

00:11:00,130 --> 00:11:03,850
people are going to be unhappy so we

00:11:02,110 --> 00:11:07,150
can't do it that way we have to come up

00:11:03,850 --> 00:11:09,400
with a different way of doing it now no

00:11:07,150 --> 00:11:11,230
route based coding was nice because it's

00:11:09,400 --> 00:11:12,670
a very coarse grain level of your

00:11:11,230 --> 00:11:14,530
application at the very highest level

00:11:12,670 --> 00:11:16,080
you make that split everything under I

00:11:14,530 --> 00:11:19,050
could ignore

00:11:16,080 --> 00:11:20,850
because I like simple stuff if you don't

00:11:19,050 --> 00:11:23,550
do the super course one how about the

00:11:20,850 --> 00:11:25,020
super fine-grained version right let's

00:11:23,550 --> 00:11:27,600
think about what would happen if we

00:11:25,020 --> 00:11:31,260
laser loaded every single component of

00:11:27,600 --> 00:11:33,210
your website that seems really nice from

00:11:31,260 --> 00:11:35,250
a like efficiency point of view when you

00:11:33,210 --> 00:11:37,050
only think about bandwidth right it

00:11:35,250 --> 00:11:39,360
might be like Superbad from other point

00:11:37,050 --> 00:11:41,850
of views like latency but it is a nice

00:11:39,360 --> 00:11:45,690
way of doing it and and and want to

00:11:41,850 --> 00:11:48,930
consider but let's imagine for example

00:11:45,690 --> 00:11:52,050
your application users react in react

00:11:48,930 --> 00:11:54,690
components statically depend on their

00:11:52,050 --> 00:11:56,640
children right and that means that if

00:11:54,690 --> 00:11:58,500
you stop doing that because you start

00:11:56,640 --> 00:12:00,450
lazy loading your children then it

00:11:58,500 --> 00:12:03,960
changes your program model and things

00:12:00,450 --> 00:12:05,430
stop being so nice so let's say you have

00:12:03,960 --> 00:12:06,930
a Currency Converter component that you

00:12:05,430 --> 00:12:08,279
want to put on your such page

00:12:06,930 --> 00:12:09,750
you import it right that's like the

00:12:08,279 --> 00:12:12,480
normal way of doing it in your six and

00:12:09,750 --> 00:12:14,640
that's pretty nice but if you want to

00:12:12,480 --> 00:12:16,620
lazy load it you get code like this

00:12:14,640 --> 00:12:18,630
where you like use dynamic import with

00:12:16,620 --> 00:12:20,250
just a new fancy thing to like lazy load

00:12:18,630 --> 00:12:22,050
your six modules and you wrap it into

00:12:20,250 --> 00:12:23,670
some load all the component and you know

00:12:22,050 --> 00:12:24,660
there's probably like 500 million

00:12:23,670 --> 00:12:27,510
different ways to do this and I'm

00:12:24,660 --> 00:12:29,880
certainly not a reactive program or even

00:12:27,510 --> 00:12:31,470
anywhere to expert but like it's

00:12:29,880 --> 00:12:34,170
definitely going to change how you write

00:12:31,470 --> 00:12:36,870
the application and and that's no longer

00:12:34,170 --> 00:12:38,400
it's nice because stuff you know it's

00:12:36,870 --> 00:12:40,680
more complicated something that was

00:12:38,400 --> 00:12:42,420
static no its dynamics that's another

00:12:40,680 --> 00:12:42,990
red flag for the program we're all

00:12:42,420 --> 00:12:45,570
changing

00:12:42,990 --> 00:12:47,550
you have to suddenly wonder who decides

00:12:45,570 --> 00:12:49,529
what to lazy load when because that's

00:12:47,550 --> 00:12:51,750
going to impact the latency of your

00:12:49,529 --> 00:12:53,339
application the human is there and

00:12:51,750 --> 00:12:55,110
they're like they're static import this

00:12:53,339 --> 00:12:57,630
dynamic import when do they use which

00:12:55,110 --> 00:12:59,490
it's also really bad if you do it wrong

00:12:57,630 --> 00:13:02,070
because one static import is going to

00:12:59,490 --> 00:13:03,839
like make everything be together again

00:13:02,070 --> 00:13:06,420
and you don't really get any benefits

00:13:03,839 --> 00:13:08,760
from dynamic loading so that's really

00:13:06,420 --> 00:13:10,980
complicated and it's going to go wrong

00:13:08,760 --> 00:13:14,430
when you have a lot of Engineers over

00:13:10,980 --> 00:13:16,020
long periods of time I'm going to talk

00:13:14,430 --> 00:13:20,100
about like how Google actually does it

00:13:16,020 --> 00:13:22,290
and what one way is to achieve like a

00:13:20,100 --> 00:13:26,280
good programming model with good

00:13:22,290 --> 00:13:28,310
performance and hopefully good results

00:13:26,280 --> 00:13:31,270
so what we're doing is

00:13:28,310 --> 00:13:34,340
we take our component we split it by

00:13:31,270 --> 00:13:36,770
rendering logic the sort of way we

00:13:34,340 --> 00:13:38,150
render it and the logic of like for

00:13:36,770 --> 00:13:39,410
example on the currency converter what

00:13:38,150 --> 00:13:42,440
happens when you press the button and

00:13:39,410 --> 00:13:44,570
you get you know use the two Australian

00:13:42,440 --> 00:13:48,890
dollars so we we have these two things

00:13:44,570 --> 00:13:51,080
instead of one thing and then we only

00:13:48,890 --> 00:13:54,050
load the logic of a page when we

00:13:51,080 --> 00:13:55,339
actually rendered the component and and

00:13:54,050 --> 00:13:57,350
that again is a very simple model

00:13:55,339 --> 00:14:00,050
because now we can just service at

00:13:57,350 --> 00:14:01,880
render a page and then whatever we kind

00:14:00,050 --> 00:14:03,200
of actually rendered because you

00:14:01,880 --> 00:14:05,839
searched for whether and there was a

00:14:03,200 --> 00:14:07,880
better module then that rendering of the

00:14:05,839 --> 00:14:10,220
weather module triggers the client to

00:14:07,880 --> 00:14:11,720
load the code and again that kind of

00:14:10,220 --> 00:14:14,029
puts the human out of the conversation

00:14:11,720 --> 00:14:18,490
we get that you know Australian dollar

00:14:14,029 --> 00:14:22,190
answer and we have a very simple page

00:14:18,490 --> 00:14:24,410
now this might that might seems nice

00:14:22,190 --> 00:14:27,410
but it does have some trade-offs right

00:14:24,410 --> 00:14:28,970
so if you know how server-side rendering

00:14:27,410 --> 00:14:32,210
typically works with frameworks like

00:14:28,970 --> 00:14:35,450
react of UJS or so forth what they do is

00:14:32,210 --> 00:14:36,770
a process called hydration the way

00:14:35,450 --> 00:14:38,870
hydration works is you server-side

00:14:36,770 --> 00:14:41,630
rendering something and then on the

00:14:38,870 --> 00:14:44,570
client you render it again which means

00:14:41,630 --> 00:14:46,250
you have to have load the code to render

00:14:44,570 --> 00:14:48,050
something that's already on the page

00:14:46,250 --> 00:14:50,000
which is incredibly wasteful both in

00:14:48,050 --> 00:14:53,660
terms of loading that code and in terms

00:14:50,000 --> 00:14:55,970
of executing it right so it's a bunch of

00:14:53,660 --> 00:14:59,240
wasted bandwidth as a bunch of basic CPU

00:14:55,970 --> 00:15:01,670
but it's really nice because because you

00:14:59,240 --> 00:15:02,870
can ignore on the clients that that

00:15:01,670 --> 00:15:05,060
these servers I wondered something right

00:15:02,870 --> 00:15:07,160
and that is very nice and so if you

00:15:05,060 --> 00:15:09,470
design this very large application you

00:15:07,160 --> 00:15:11,630
have to think about do I want to take

00:15:09,470 --> 00:15:14,570
that super fast route but it's more

00:15:11,630 --> 00:15:16,430
complex or am i okay with the hydration

00:15:14,570 --> 00:15:18,050
approach which is less efficient but

00:15:16,430 --> 00:15:19,670
it's so nice for programmers right and

00:15:18,050 --> 00:15:22,930
so you will have to make this decision

00:15:19,670 --> 00:15:25,790
nobody can help you with that

00:15:22,930 --> 00:15:27,890
cool my next topic is my favorite

00:15:25,790 --> 00:15:29,690
problem in computer science which is not

00:15:27,890 --> 00:15:31,730
naming things although I probably gave

00:15:29,690 --> 00:15:32,270
this a bad name and it's not off-by-one

00:15:31,730 --> 00:15:36,910
errors

00:15:32,270 --> 00:15:40,750
it's the 2017 holiday special problem

00:15:36,910 --> 00:15:42,700
who here has ever like written some code

00:15:40,750 --> 00:15:47,110
and now it's no longer needed but it's

00:15:42,700 --> 00:15:49,660
still on your code base right so maybe

00:15:47,110 --> 00:15:52,150
there was a 2017 holidays party special

00:15:49,660 --> 00:15:53,980
or something like that right um so this

00:15:52,150 --> 00:15:55,870
happens I think see this particular

00:15:53,980 --> 00:15:58,030
famous for it if you have this one big

00:15:55,870 --> 00:15:59,380
CSIS file and there's a selector in

00:15:58,030 --> 00:16:00,610
there but who really knows that that

00:15:59,380 --> 00:16:02,380
still matches anything in your

00:16:00,610 --> 00:16:06,070
application you know so you cannot just

00:16:02,380 --> 00:16:08,320
keep it there and so I think that's

00:16:06,070 --> 00:16:09,850
community it's at the forefront of a

00:16:08,320 --> 00:16:11,980
revolution because they realize this is

00:16:09,850 --> 00:16:14,560
a problem and they created solutions

00:16:11,980 --> 00:16:17,080
like CSS nsj right we have a single file

00:16:14,560 --> 00:16:20,080
component the 2017 holiday special

00:16:17,080 --> 00:16:21,970
component and you like say okay it's not

00:16:20,080 --> 00:16:23,500
2017 anymore we can delete this one

00:16:21,970 --> 00:16:25,420
component and then everything is gone

00:16:23,500 --> 00:16:27,520
and it's very simple so very easy to

00:16:25,420 --> 00:16:30,580
delete code so I think this is a very

00:16:27,520 --> 00:16:33,340
big idea and it should be applied to

00:16:30,580 --> 00:16:36,460
more than just CSS so when I give a few

00:16:33,340 --> 00:16:39,190
examples of this like general idea that

00:16:36,460 --> 00:16:41,110
you want to avoid central configuration

00:16:39,190 --> 00:16:43,210
of your application at all costs because

00:16:41,110 --> 00:16:45,400
central configuration like having

00:16:43,210 --> 00:16:48,400
central CSS file makes it very hard to

00:16:45,400 --> 00:16:49,780
leak code so I was talking before about

00:16:48,400 --> 00:16:51,310
routes in your application so many

00:16:49,780 --> 00:16:53,860
application will have a file like routes

00:16:51,310 --> 00:16:55,510
GS which is all your routes and then

00:16:53,860 --> 00:16:58,089
those routes met themselves to like some

00:16:55,510 --> 00:17:00,040
broad component right and that's an

00:16:58,089 --> 00:17:01,900
example of central configuration it's

00:17:00,040 --> 00:17:03,940
something that you do not want in a

00:17:01,900 --> 00:17:05,560
large application because now like some

00:17:03,940 --> 00:17:07,839
engineer says do I still need tech what

00:17:05,560 --> 00:17:09,250
component they're like I need to update

00:17:07,839 --> 00:17:10,630
that file but that's like kind of owned

00:17:09,250 --> 00:17:12,730
by some other team or something like

00:17:10,630 --> 00:17:13,900
that I'm like too scared to do it and

00:17:12,730 --> 00:17:15,850
I'm maybe I'm going to do that tomorrow

00:17:13,900 --> 00:17:17,980
or like maybe I don't do it at all right

00:17:15,850 --> 00:17:20,050
and so this file it's more like you know

00:17:17,980 --> 00:17:23,470
it's edition only people don't tend to

00:17:20,050 --> 00:17:25,839
get rid of stuff another example of this

00:17:23,470 --> 00:17:28,510
anti-pattern is the web pack config

00:17:25,839 --> 00:17:30,370
dutchy is where you have this one thing

00:17:28,510 --> 00:17:32,650
let's assume to build your entire

00:17:30,370 --> 00:17:35,430
application and that you know might go

00:17:32,650 --> 00:17:38,080
fine for a while but eventually you know

00:17:35,430 --> 00:17:39,790
needing to know about every aspect of

00:17:38,080 --> 00:17:41,500
what some other team did system where

00:17:39,790 --> 00:17:44,080
all right that just doesn't scale so

00:17:41,500 --> 00:17:46,980
again I think we need a pattern that has

00:17:44,080 --> 00:17:50,710
to emerge how to decentralize configure

00:17:46,980 --> 00:17:52,030
stuff that we want to build it's not

00:17:50,710 --> 00:17:54,010
only bad examples there's good examples

00:17:52,030 --> 00:17:56,290
so for example package of JSON

00:17:54,010 --> 00:17:58,390
vamped npm right each package says I

00:17:56,290 --> 00:18:00,480
have these dependencies this is how you

00:17:58,390 --> 00:18:03,690
run me this is how you built me and

00:18:00,480 --> 00:18:06,400
obviously not like there's not this one

00:18:03,690 --> 00:18:08,500
giant configuration file of all of NPM

00:18:06,400 --> 00:18:10,000
because that would not work right you

00:18:08,500 --> 00:18:10,900
would you imagine having a hundred

00:18:10,000 --> 00:18:12,910
thousand modules and you all would have

00:18:10,900 --> 00:18:14,230
to edit as one file would definitely

00:18:12,910 --> 00:18:19,000
give you a glut of merge conflicts and

00:18:14,230 --> 00:18:21,430
get right and and so sure NPM is very

00:18:19,000 --> 00:18:24,010
big but I would argue that many of our

00:18:21,430 --> 00:18:26,080
applications you know while they're not

00:18:24,010 --> 00:18:27,940
as big as NPM they get big enough that

00:18:26,080 --> 00:18:30,430
we have to worry about the same stuff

00:18:27,940 --> 00:18:34,060
and we have to kind of adopt the same

00:18:30,430 --> 00:18:36,070
patterns so I don't really have like all

00:18:34,060 --> 00:18:38,830
the solutions but I think this you know

00:18:36,070 --> 00:18:40,750
this idea that Jesus and Jes brought to

00:18:38,830 --> 00:18:44,340
the table it's going to come to other

00:18:40,750 --> 00:18:47,200
aspects of how we build applications

00:18:44,340 --> 00:18:50,920
more abstractly I would describe this

00:18:47,200 --> 00:18:53,110
idea that we take responsibility for how

00:18:50,920 --> 00:18:55,750
our application is designed in the

00:18:53,110 --> 00:18:58,030
abstract how it's organized as taking

00:18:55,750 --> 00:19:00,730
responsibility of shaping the dependency

00:18:58,030 --> 00:19:01,930
tree for replication and with dependency

00:19:00,730 --> 00:19:03,760
on that now I mean that's like very

00:19:01,930 --> 00:19:05,530
abstract like it could be like you know

00:19:03,760 --> 00:19:07,390
yes six module dependencies could be

00:19:05,530 --> 00:19:08,710
data dependency service dependencies

00:19:07,390 --> 00:19:11,980
there's many ways to have dependencies

00:19:08,710 --> 00:19:14,200
so obviously you know we all have like

00:19:11,980 --> 00:19:16,090
super complicated applications but I'm

00:19:14,200 --> 00:19:17,950
going to have a very simple one it has

00:19:16,090 --> 00:19:20,100
only four components there's a router

00:19:17,950 --> 00:19:22,240
that kind of knows how to go from one

00:19:20,100 --> 00:19:24,880
aspect of your application to the next

00:19:22,240 --> 00:19:28,030
and it has a few word components a B and

00:19:24,880 --> 00:19:30,160
C now as I mentioned before this is the

00:19:28,030 --> 00:19:33,280
central import problem right because the

00:19:30,160 --> 00:19:36,820
router now has to import all the work

00:19:33,280 --> 00:19:38,230
components and you know if you want to

00:19:36,820 --> 00:19:40,180
delete one of them you have to go to the

00:19:38,230 --> 00:19:43,030
router you have to delete the import if

00:19:40,180 --> 00:19:46,330
to delete the road and so forth and that

00:19:43,030 --> 00:19:51,940
eventually and you with the holiday

00:19:46,330 --> 00:19:54,280
special 2017 problem Wow yeah so we have

00:19:51,940 --> 00:19:55,570
at Google come up with a solution for

00:19:54,280 --> 00:19:56,800
this that I want to introduce to you

00:19:55,570 --> 00:20:00,340
which I don't think we've ever talked

00:19:56,800 --> 00:20:04,990
about it's kind of cool we invented a

00:20:00,340 --> 00:20:07,559
new concept it's called enhance and it's

00:20:04,990 --> 00:20:10,320
something you use instead of import and

00:20:07,559 --> 00:20:14,039
in fact it's the opposite of import it

00:20:10,320 --> 00:20:16,769
is a reverse dependency so if you

00:20:14,039 --> 00:20:20,970
enhance a module you make that module

00:20:16,769 --> 00:20:23,909
have a dependency on you which you know

00:20:20,970 --> 00:20:26,090
it seems kind of cool so looking at the

00:20:23,909 --> 00:20:28,769
Pennsy graph what happens is that

00:20:26,090 --> 00:20:30,450
there's still the same components but

00:20:28,769 --> 00:20:32,370
they the error is no point in the

00:20:30,450 --> 00:20:34,470
opposite direction right so instead of

00:20:32,370 --> 00:20:36,240
the router importing the the route

00:20:34,470 --> 00:20:38,789
components the work components announce

00:20:36,240 --> 00:20:40,889
themselves using enhance to the rotor

00:20:38,789 --> 00:20:43,110
the rock component a says hi router here

00:20:40,889 --> 00:20:45,119
am please have a dependency on me

00:20:43,110 --> 00:20:47,789
instead of the opposite to rate right

00:20:45,119 --> 00:20:50,249
and that now means that I can just get

00:20:47,789 --> 00:20:52,619
rid of the Road component a by deleting

00:20:50,249 --> 00:20:54,210
the file and because you know it no

00:20:52,619 --> 00:20:56,309
longer enhances the router that's the

00:20:54,210 --> 00:20:59,369
only operation have to do to delete this

00:20:56,309 --> 00:21:01,080
component and that's really nice it

00:20:59,369 --> 00:21:03,419
wasn't for the humans to now have to

00:21:01,080 --> 00:21:05,759
like think about hmm I have like import

00:21:03,419 --> 00:21:07,110
of it enhance which one do I use under

00:21:05,759 --> 00:21:08,879
which circumstances right and so they

00:21:07,110 --> 00:21:11,159
they suffer from this and I think this

00:21:08,879 --> 00:21:14,460
is a particularly bad case of this

00:21:11,159 --> 00:21:16,950
because imagine just how dangerous it is

00:21:14,460 --> 00:21:20,129
that you as a programmer I get the power

00:21:16,950 --> 00:21:23,249
to make everyone else every file in the

00:21:20,129 --> 00:21:25,019
system have a dependency on you it's

00:21:23,249 --> 00:21:27,779
easy to imagine that this leads to

00:21:25,019 --> 00:21:30,269
really bad situations so Google we

00:21:27,779 --> 00:21:33,690
decided it's a nice idea but we make it

00:21:30,269 --> 00:21:37,139
illegal no one gets to use it one

00:21:33,690 --> 00:21:38,639
exception which is generated code it's a

00:21:37,139 --> 00:21:40,649
really good fit for generate code

00:21:38,639 --> 00:21:42,299
actually and it solves some of the

00:21:40,649 --> 00:21:43,220
problems that generated code has which

00:21:42,299 --> 00:21:45,360
is also really nice

00:21:43,220 --> 00:21:47,009
so with generated code sometimes you

00:21:45,360 --> 00:21:48,330
have to import if generate file they

00:21:47,009 --> 00:21:50,220
can't even see you have to guess it's

00:21:48,330 --> 00:21:52,289
name is really unpleasant if that

00:21:50,220 --> 00:21:54,119
generated file is just there and the the

00:21:52,289 --> 00:21:56,159
shadows and enhance that's some central

00:21:54,119 --> 00:21:57,659
entity then you don't have these

00:21:56,159 --> 00:21:58,950
problems right you don't you never have

00:21:57,659 --> 00:22:01,590
to know but this file it just magically

00:21:58,950 --> 00:22:04,710
enhances the central registry and so

00:22:01,590 --> 00:22:06,929
that works really well let's take a look

00:22:04,710 --> 00:22:10,259
at a concrete example so we have our

00:22:06,929 --> 00:22:11,999
single file component here and we run a

00:22:10,259 --> 00:22:14,369
code generator from it and we kind of

00:22:11,999 --> 00:22:16,740
extract this little route definition

00:22:14,369 --> 00:22:18,360
file for example maybe use like some

00:22:16,740 --> 00:22:20,999
static declaration and you're saving a

00:22:18,360 --> 00:22:24,749
file component we parse it out using our

00:22:20,999 --> 00:22:25,709
some Harry Potter ast and then we have

00:22:24,749 --> 00:22:27,719
that route file right

00:22:25,709 --> 00:22:32,129
and that route file just says hey router

00:22:27,719 --> 00:22:33,869
um please enhance me and and that's how

00:22:32,129 --> 00:22:35,339
it works and obviously you can use this

00:22:33,869 --> 00:22:37,289
pattern for like all kinds of other

00:22:35,339 --> 00:22:39,359
things when you're using like graph QL

00:22:37,289 --> 00:22:41,729
or like some other thing like that and

00:22:39,359 --> 00:22:43,289
you're saying hey my data dependency the

00:22:41,729 --> 00:22:44,699
router should know about it and you're

00:22:43,289 --> 00:22:46,619
doing the same pattern maybe of some

00:22:44,699 --> 00:22:47,789
services whatever right like whatever

00:22:46,619 --> 00:22:51,119
fancy words you have in computer science

00:22:47,789 --> 00:22:53,009
um so you can you can use this pattern I

00:22:51,119 --> 00:22:55,469
think it works really well it's really

00:22:53,009 --> 00:22:57,959
powerful and I think it has a good

00:22:55,469 --> 00:23:00,689
feature all right

00:22:57,959 --> 00:23:02,369
um fortunately this is not everything we

00:23:00,689 --> 00:23:04,499
need to know about it there's a second

00:23:02,369 --> 00:23:07,769
favorite problem in computer science

00:23:04,499 --> 00:23:12,359
which all I call the base bundle pile of

00:23:07,769 --> 00:23:14,549
trash so the base bundle in your like

00:23:12,359 --> 00:23:16,649
graph of bundles of the application it's

00:23:14,549 --> 00:23:18,179
the one bundle that whatever you do

00:23:16,649 --> 00:23:20,759
whatever the user is doing you will

00:23:18,179 --> 00:23:22,679
always load this one bundle and so it's

00:23:20,759 --> 00:23:25,319
particularly important because if it's

00:23:22,679 --> 00:23:27,659
big then everything you'll do is big

00:23:25,319 --> 00:23:29,969
right if it's really small then you can

00:23:27,659 --> 00:23:33,449
have really small dependent bundles

00:23:29,969 --> 00:23:35,279
right still anecdote I at some point

00:23:33,449 --> 00:23:37,859
joined the Google+ Callister

00:23:35,279 --> 00:23:39,509
infrastructure team and I found out that

00:23:37,859 --> 00:23:43,019
the base one had eight hundred kilobytes

00:23:39,509 --> 00:23:44,339
of JavaScript and so my warning to you

00:23:43,019 --> 00:23:46,649
is if you want to be more successful in

00:23:44,339 --> 00:23:50,209
Google+ don't have a charge kilobytes of

00:23:46,649 --> 00:23:53,429
JavaScript in your base bundle and

00:23:50,209 --> 00:23:55,859
unfortunately this is very easy right to

00:23:53,429 --> 00:23:59,459
get to a bad state I'm going to show you

00:23:55,859 --> 00:24:01,829
a few examples so again your base bundle

00:23:59,459 --> 00:24:03,719
it needs to like to depend on the routes

00:24:01,829 --> 00:24:06,209
because you always want to know when you

00:24:03,719 --> 00:24:08,459
go from A to B what is the route for B

00:24:06,209 --> 00:24:10,999
right so it has to be there but what you

00:24:08,459 --> 00:24:13,259
really don't want is any form of UI

00:24:10,999 --> 00:24:14,999
because depending where the user comes

00:24:13,259 --> 00:24:16,319
in there might be different UI so you

00:24:14,999 --> 00:24:19,079
really don't want that UI to be there

00:24:16,319 --> 00:24:20,429
right and so know the date picker it

00:24:19,079 --> 00:24:22,049
definitely should not be in your date

00:24:20,429 --> 00:24:26,339
base bundle right the checkout flow

00:24:22,049 --> 00:24:28,049
should not be in your base bundle and so

00:24:26,339 --> 00:24:30,209
how do we prevent that right

00:24:28,049 --> 00:24:33,149
unfortunately imports are very fragile

00:24:30,209 --> 00:24:34,830
you might like innocently import that

00:24:33,149 --> 00:24:37,559
cool util package

00:24:34,830 --> 00:24:41,039
right because it has a function to make

00:24:37,559 --> 00:24:42,600
random numbers and now someone says I

00:24:41,039 --> 00:24:45,480
won't need a utility for self-driving

00:24:42,600 --> 00:24:48,000
cars and suddenly you are like import

00:24:45,480 --> 00:24:49,559
the I don't know machine learning

00:24:48,000 --> 00:24:51,240
algorithm for self-driving cars and your

00:24:49,559 --> 00:24:53,250
based money like these can happen really

00:24:51,240 --> 00:24:55,019
easily and because imports are

00:24:53,250 --> 00:24:58,559
transitive things can like things can

00:24:55,019 --> 00:24:59,909
pile up into that pile of trash the

00:24:58,559 --> 00:25:02,130
solution we found for this that I think

00:24:59,909 --> 00:25:05,490
is a also very powerful pattern are

00:25:02,130 --> 00:25:08,070
forbidden dependency tests so forbidden

00:25:05,490 --> 00:25:10,350
dependency tests are way to sort that

00:25:08,070 --> 00:25:13,620
for example your base bundle does not

00:25:10,350 --> 00:25:15,870
depend on any UI let's take a concrete

00:25:13,620 --> 00:25:17,429
example so for example in an react every

00:25:15,870 --> 00:25:20,940
every component needs to inherit from

00:25:17,429 --> 00:25:23,730
react component so if you want that you

00:25:20,940 --> 00:25:25,490
know UI at all can even your base bundle

00:25:23,730 --> 00:25:27,990
you simply add that one test saying

00:25:25,490 --> 00:25:30,510
react component is not the transitive

00:25:27,990 --> 00:25:32,850
dependency of a base bundle and it will

00:25:30,510 --> 00:25:34,950
just fail right so looking at the graph

00:25:32,850 --> 00:25:36,480
again you know you just get a test

00:25:34,950 --> 00:25:39,269
failure when someone tries to add the

00:25:36,480 --> 00:25:40,980
date picker and it's typically like in

00:25:39,269 --> 00:25:42,779
that case it's usually really easy to

00:25:40,980 --> 00:25:43,950
fix it right away because probably that

00:25:42,779 --> 00:25:45,299
person didn't actually want to put it

00:25:43,950 --> 00:25:48,090
there which is some weird transitive

00:25:45,299 --> 00:25:49,980
dependency but if you're like two years

00:25:48,090 --> 00:25:51,809
in and it's been there for a while it's

00:25:49,980 --> 00:25:55,639
typically super hard to get the stuff

00:25:51,809 --> 00:25:58,010
disentangle so the test really helps you

00:25:55,639 --> 00:26:01,470
alright

00:25:58,010 --> 00:26:03,600
ideally though you find like that most

00:26:01,470 --> 00:26:06,690
natural pass right you want to get to a

00:26:03,600 --> 00:26:09,389
state where whatever the engineers and

00:26:06,690 --> 00:26:12,029
your teams do the most straightforward

00:26:09,389 --> 00:26:13,649
way to do something is the right way

00:26:12,029 --> 00:26:15,809
right so that they don't get off the

00:26:13,649 --> 00:26:17,850
pass they naturally do the right things

00:26:15,809 --> 00:26:19,950
and then as I just showed with the

00:26:17,850 --> 00:26:21,179
Forbidden depends it has you know just

00:26:19,950 --> 00:26:22,590
add a test and I think this is also

00:26:21,179 --> 00:26:24,480
something that not many people feel

00:26:22,590 --> 00:26:27,090
empowered to do so please feel empowered

00:26:24,480 --> 00:26:29,250
to add tests to your application that

00:26:27,090 --> 00:26:30,990
ensure the major and variant of your

00:26:29,250 --> 00:26:35,399
infrastructure right the tests are not

00:26:30,990 --> 00:26:36,690
only for you know testing that your mass

00:26:35,399 --> 00:26:39,750
function does the right things right

00:26:36,690 --> 00:26:41,909
they're also for infrastructure and for

00:26:39,750 --> 00:26:45,389
the major like design features of

00:26:41,909 --> 00:26:47,460
application so please do that and I try

00:26:45,389 --> 00:26:48,600
to avoid human judgment outside of the

00:26:47,460 --> 00:26:50,250
application domain I

00:26:48,600 --> 00:26:53,730
so if you work on an application we have

00:26:50,250 --> 00:26:55,860
to understand the the business part but

00:26:53,730 --> 00:26:57,960
not every engineer in your organization

00:26:55,860 --> 00:27:01,019
can and will understand how cost

00:26:57,960 --> 00:27:03,720
building work and they don't need to do

00:27:01,019 --> 00:27:05,789
that right so try to introduce these

00:27:03,720 --> 00:27:07,679
things in your application in a way that

00:27:05,789 --> 00:27:10,799
it's completely fine you can still work

00:27:07,679 --> 00:27:14,600
well without having that knowledge and

00:27:10,799 --> 00:27:17,850
and all that complexity in your head and

00:27:14,600 --> 00:27:19,740
then also really just make it easy to

00:27:17,850 --> 00:27:21,090
lead code so my talk was called

00:27:19,740 --> 00:27:23,460
designing very large JavaScript

00:27:21,090 --> 00:27:25,679
application maybe the web best advice I

00:27:23,460 --> 00:27:28,019
can give is that you should ideally not

00:27:25,679 --> 00:27:29,759
get to this very large stage the best

00:27:28,019 --> 00:27:32,179
way to not get there is that you delete

00:27:29,759 --> 00:27:36,750
stuff before it's too late

00:27:32,179 --> 00:27:39,299
cool I want to address just one more

00:27:36,750 --> 00:27:42,179
point which is people sometimes say that

00:27:39,299 --> 00:27:44,220
having no abstractions at all it's

00:27:42,179 --> 00:27:46,259
better than having the wrong wrong

00:27:44,220 --> 00:27:48,750
abstraction right what this really means

00:27:46,259 --> 00:27:52,259
is that the costs of the wrong

00:27:48,750 --> 00:27:55,710
abstractions is very high so be careful

00:27:52,259 --> 00:27:58,950
I think this is sometimes misinterpreted

00:27:55,710 --> 00:28:00,929
it does not mean that you should have no

00:27:58,950 --> 00:28:02,940
abstractions again it just means that

00:28:00,929 --> 00:28:06,240
you have to be very careful and so I

00:28:02,940 --> 00:28:08,669
think my main advice is to get good at

00:28:06,240 --> 00:28:09,750
making the right choices right and as I

00:28:08,669 --> 00:28:11,759
was saying at the start of the

00:28:09,750 --> 00:28:13,559
presentation the way to get there is to

00:28:11,759 --> 00:28:16,049
think with your engineers on your team

00:28:13,559 --> 00:28:18,000
how they will use your API and how they

00:28:16,049 --> 00:28:20,700
will use your abstractions you can get

00:28:18,000 --> 00:28:23,759
there with experience it will take you a

00:28:20,700 --> 00:28:25,500
while I have done this wrong most of the

00:28:23,759 --> 00:28:28,350
time and I still do but I think I'm

00:28:25,500 --> 00:28:32,370
still getting better and so empathy and

00:28:28,350 --> 00:28:33,809
experience the way how you can lead have

00:28:32,370 --> 00:28:35,820
the right abstractions in your

00:28:33,809 --> 00:28:41,150
application thank you very much

00:28:35,820 --> 00:28:41,150
[Applause]

00:28:45,740 --> 00:28:47,800

YouTube URL: https://www.youtube.com/watch?v=ZZmUwXEiPm4


