Title: Brittany Storoz - A year of other’s bugs: the sad state of error handling
Publication date: 2018-04-11
Playlist: JSConf Australia 2018
Description: 
	As an instructor of front-end software engineering, I’ve seen first-hand how difficult it is for new developers to navigate call stacks and decrypt error messages. We have built a culture that considers effective error handling a secondary priority, which has a significant impact on those who are just learning to code. Debugging is a huge part of the development process, and the less time we have to spend spinning our wheels, fighting an error message, the more time we have to get back to the fun stuff.

The more experience we have in engineering, the better we get at debugging broken code. We learn how to isolate the problem, decode cryptic error messages, and figure out the most effective terms to research. The faster we develop these skills, the faster we lose our perspective on what it’s like to be a beginner. It’s only when we watch others struggle through these experiences that it becomes obvious just how ineffective our error handling is. Let’s explore the shortcomings of the current state of error handling and how we can improve upon this to make engineering friendlier for newcomers.

This talk is applicable to developers of all skill-levels working with JavaScript. I hope to enlighten engineers on how to create more effective error handling for juniors, and also demonstrate how new developers are currently navigating the choppy waters we’ve presented them with when things go wrong.
Captions: 
	00:00:09,420 --> 00:00:14,380
hi everybody good afternoon I hope

00:00:12,700 --> 00:00:17,440
everyone has been enjoying the

00:00:14,380 --> 00:00:19,330
conference so far the organizers have

00:00:17,440 --> 00:00:21,910
done such a fantastic job putting this

00:00:19,330 --> 00:00:24,580
together for us and I'm so thankful for

00:00:21,910 --> 00:00:26,980
the opportunity to be here today and be

00:00:24,580 --> 00:00:29,460
able to get on stage and complain to all

00:00:26,980 --> 00:00:31,960
of you for the next half hour

00:00:29,460 --> 00:00:34,690
so I'm Brittany I'm an instructor at

00:00:31,960 --> 00:00:37,510
Turing School of software and design in

00:00:34,690 --> 00:00:40,150
Denver Colorado we teach a pretty

00:00:37,510 --> 00:00:42,520
comprehensive curriculum for web

00:00:40,150 --> 00:00:44,730
application development and in my

00:00:42,520 --> 00:00:48,910
current role I'm focused mostly on

00:00:44,730 --> 00:00:52,090
teaching vanilla JavaScript syntax and

00:00:48,910 --> 00:00:54,640
the fundamental patterns and concepts

00:00:52,090 --> 00:00:56,830
that you need in order to work with the

00:00:54,640 --> 00:01:00,310
language so I'm working with people that

00:00:56,830 --> 00:01:02,830
are very new to programming I've been in

00:01:00,310 --> 00:01:06,460
this role for about a year now and this

00:01:02,830 --> 00:01:09,369
has been the most eye-opening experience

00:01:06,460 --> 00:01:11,049
of my career so far historically I was

00:01:09,369 --> 00:01:14,619
working in strictly engineering roles

00:01:11,049 --> 00:01:17,679
and during that time over the past 10

00:01:14,619 --> 00:01:19,570
years or so I really lost that beginner

00:01:17,679 --> 00:01:22,060
perspective that I had when I first

00:01:19,570 --> 00:01:24,009
started out I'm sure a lot of you have

00:01:22,060 --> 00:01:27,490
lost that as well

00:01:24,009 --> 00:01:29,950
but working with students has brought

00:01:27,490 --> 00:01:31,990
that back really fast it's kind of

00:01:29,950 --> 00:01:36,039
shoved in my face every single day which

00:01:31,990 --> 00:01:39,039
has been really amazing to see so I'll

00:01:36,039 --> 00:01:42,219
give you a couple of examples of what I

00:01:39,039 --> 00:01:44,409
mean by that but I've started to get

00:01:42,219 --> 00:01:46,030
that beginner perspective back because

00:01:44,409 --> 00:01:48,159
my students are really struggling with

00:01:46,030 --> 00:01:51,130
things and I've started to realize just

00:01:48,159 --> 00:01:53,770
how difficult we have made it for new

00:01:51,130 --> 00:01:56,380
developers to join us the things that

00:01:53,770 --> 00:01:58,209
they struggle with are so fixable and

00:01:56,380 --> 00:02:01,179
the one that stands out to me the most

00:01:58,209 --> 00:02:04,799
is our error handling and the way that

00:02:01,179 --> 00:02:08,440
we have set up this debugging process

00:02:04,799 --> 00:02:10,450
for ourselves we've become so complacent

00:02:08,440 --> 00:02:12,550
with the way that it currently is and

00:02:10,450 --> 00:02:14,950
maybe we don't recognize that it's in a

00:02:12,550 --> 00:02:18,040
bad state but brand-new developers

00:02:14,950 --> 00:02:20,860
recognize it every single day so I'll

00:02:18,040 --> 00:02:23,569
start with with an example a couple

00:02:20,860 --> 00:02:25,579
weeks ago I was teaching my

00:02:23,569 --> 00:02:30,200
how to deploy their applications to

00:02:25,579 --> 00:02:32,749
Heroku and one of my students ran into

00:02:30,200 --> 00:02:35,420
this super helpful application error

00:02:32,749 --> 00:02:37,090
page and he threw his hands in the air

00:02:35,420 --> 00:02:40,549
and he said well that doesn't work and

00:02:37,090 --> 00:02:42,859
just moments before that I had taught

00:02:40,549 --> 00:02:45,260
them how to look at the air logs in

00:02:42,859 --> 00:02:47,900
their terminal so I was being kind of

00:02:45,260 --> 00:02:50,810
sassy and I was like well did you read

00:02:47,900 --> 00:02:52,790
the error logs and of course he hadn't

00:02:50,810 --> 00:02:55,489
so he went back and he read the error

00:02:52,790 --> 00:02:57,560
logs and when I came back around a

00:02:55,489 --> 00:03:00,590
couple minutes later I was like well so

00:02:57,560 --> 00:03:03,980
what did they say and he replied to me

00:03:00,590 --> 00:03:08,750
and he said it literally said we need a

00:03:03,980 --> 00:03:09,349
better error message here this is a true

00:03:08,750 --> 00:03:12,980
story

00:03:09,349 --> 00:03:15,739
so getting owned like this is part of my

00:03:12,980 --> 00:03:17,389
job now on a daily basis and I'll be

00:03:15,739 --> 00:03:20,150
honest I really don't like it it's not

00:03:17,389 --> 00:03:22,219
my favorite part of the job so the rest

00:03:20,150 --> 00:03:25,250
of this talk is gonna be kind of a plea

00:03:22,219 --> 00:03:30,739
to all of you to help me fix these types

00:03:25,250 --> 00:03:32,900
of things okay so we're gonna talk about

00:03:30,739 --> 00:03:35,599
a couple of ideas on how to fix these

00:03:32,900 --> 00:03:38,419
things and how we can make our error

00:03:35,599 --> 00:03:40,489
handling ecosystem better and friendlier

00:03:38,419 --> 00:03:42,919
for new developers but first I want to

00:03:40,489 --> 00:03:44,359
go over how we're encountering these

00:03:42,919 --> 00:03:46,250
errors in the first place what are we

00:03:44,359 --> 00:03:48,439
doing what kind of mistakes are we

00:03:46,250 --> 00:03:51,739
making that's causing us to run into

00:03:48,439 --> 00:03:54,859
errors and for the most part we are

00:03:51,739 --> 00:03:56,569
making very tiny mistakes I don't care

00:03:54,859 --> 00:04:00,319
if you have been programming for ten

00:03:56,569 --> 00:04:03,169
years or five months most of our errors

00:04:00,319 --> 00:04:07,609
that we encounter are caused by little

00:04:03,169 --> 00:04:09,889
typos case sensitivity errors in setup

00:04:07,609 --> 00:04:11,930
and configuration no matter what skill

00:04:09,889 --> 00:04:15,729
level you're at we are all making these

00:04:11,930 --> 00:04:19,639
same very subtle very innocent mistakes

00:04:15,729 --> 00:04:22,130
where the divide occurs is that the more

00:04:19,639 --> 00:04:24,740
experience you have the easier it is for

00:04:22,130 --> 00:04:27,349
you to identify that you just made a

00:04:24,740 --> 00:04:29,780
tiny little typo and the faster it is

00:04:27,349 --> 00:04:32,990
for you to fix that it almost becomes

00:04:29,780 --> 00:04:34,699
intuitive and becomes second nature we

00:04:32,990 --> 00:04:36,860
don't even really need to read the error

00:04:34,699 --> 00:04:37,280
messages that thoroughly because we're

00:04:36,860 --> 00:04:39,889
like Oh

00:04:37,280 --> 00:04:42,200
I must have a typo somewhere and we can

00:04:39,889 --> 00:04:44,530
find it really quickly for new

00:04:42,200 --> 00:04:47,810
developers this is not the case at all

00:04:44,530 --> 00:04:50,870
okay I've had so many students be so

00:04:47,810 --> 00:04:55,160
close to coming up with a solution for a

00:04:50,870 --> 00:04:59,090
particular problem and their code is 99%

00:04:55,160 --> 00:05:01,940
accurate but in the face of a really

00:04:59,090 --> 00:05:03,680
complex error message they think that

00:05:01,940 --> 00:05:06,139
they've done something horribly wrong

00:05:03,680 --> 00:05:08,870
and the error messages that we're giving

00:05:06,139 --> 00:05:11,210
these developers is leading them astray

00:05:08,870 --> 00:05:13,040
it's leading them down the wrong path

00:05:11,210 --> 00:05:15,560
so I'll give you a couple of examples of

00:05:13,040 --> 00:05:18,500
what I mean by that and how that's

00:05:15,560 --> 00:05:20,180
happening to our new developers one

00:05:18,500 --> 00:05:22,370
common mistake my students make is

00:05:20,180 --> 00:05:25,760
mixing up array and object prototype

00:05:22,370 --> 00:05:30,020
methods so in this example we have a PI

00:05:25,760 --> 00:05:31,970
object and our developer wanted to add a

00:05:30,020 --> 00:05:34,240
new key value pair to this they wanted

00:05:31,970 --> 00:05:36,620
to add a new property to this object and

00:05:34,240 --> 00:05:39,410
the way that they tried to do it was by

00:05:36,620 --> 00:05:42,590
saying PI dot push and pushing in this

00:05:39,410 --> 00:05:44,990
key value pair here this is not accurate

00:05:42,590 --> 00:05:47,810
it's not going to work but the logic

00:05:44,990 --> 00:05:51,200
here is pretty sound so the developer

00:05:47,810 --> 00:05:54,350
new pushes a method that I know I have

00:05:51,200 --> 00:05:57,229
access to and it is used for adding a

00:05:54,350 --> 00:05:58,550
new value to a data structure okay they

00:05:57,229 --> 00:05:59,690
happen to be wrong with the data

00:05:58,550 --> 00:06:03,050
structure that they're currently working

00:05:59,690 --> 00:06:04,460
with but it's not that far off so when

00:06:03,050 --> 00:06:07,460
they run this code they got this error

00:06:04,460 --> 00:06:11,000
uncaught type error PI dot push is not a

00:06:07,460 --> 00:06:14,450
function and as a new developer when I

00:06:11,000 --> 00:06:18,590
read this error message my focus is on

00:06:14,450 --> 00:06:22,039
this push is not a function part okay

00:06:18,590 --> 00:06:24,500
because someone told me that push is

00:06:22,039 --> 00:06:27,289
built into JavaScript by default I

00:06:24,500 --> 00:06:29,180
shouldn't have to write it I shouldn't

00:06:27,289 --> 00:06:32,120
have to define it how could it possibly

00:06:29,180 --> 00:06:35,270
not be there right so when I go back to

00:06:32,120 --> 00:06:39,050
look at my code I'm now so laser focused

00:06:35,270 --> 00:06:42,410
on this push method rather than on what

00:06:39,050 --> 00:06:44,840
kind of data type my PI is okay so now I

00:06:42,410 --> 00:06:47,000
can't really focus on the area of the

00:06:44,840 --> 00:06:50,470
code that I need to in order to debug

00:06:47,000 --> 00:06:53,080
this another example is

00:06:50,470 --> 00:06:55,570
getting return statements so in this

00:06:53,080 --> 00:06:58,000
example we have a calculator class with

00:06:55,570 --> 00:07:00,610
a couple of methods and we're creating a

00:06:58,000 --> 00:07:02,320
new instance of this calculator and then

00:07:00,610 --> 00:07:06,160
we're chaining these methods together so

00:07:02,320 --> 00:07:09,220
we're gonna say subtract 3 add 5 add two

00:07:06,160 --> 00:07:11,070
add six ok but we have a bug in this

00:07:09,220 --> 00:07:15,070
code right now we're forgetting to

00:07:11,070 --> 00:07:18,070
return the instance of our calculator in

00:07:15,070 --> 00:07:20,610
our add method ok so when we run this

00:07:18,070 --> 00:07:23,920
code we get an error message that says

00:07:20,610 --> 00:07:27,670
uncaught type error cannot read property

00:07:23,920 --> 00:07:30,310
add of undefined as a new developer when

00:07:27,670 --> 00:07:32,890
I read this error message all that I can

00:07:30,310 --> 00:07:36,040
really glean from this is that for some

00:07:32,890 --> 00:07:38,440
reason my calculator is undefined so

00:07:36,040 --> 00:07:41,230
when I go back to my code I'm gonna

00:07:38,440 --> 00:07:42,040
check did I spell calculator right up

00:07:41,230 --> 00:07:45,400
here

00:07:42,040 --> 00:07:48,040
am i instantiating it correctly and I'm

00:07:45,400 --> 00:07:49,870
a new developer so I'm really not super

00:07:48,040 --> 00:07:52,660
confident in the syntax that I'm using

00:07:49,870 --> 00:07:54,669
here maybe I'm going to play around with

00:07:52,660 --> 00:07:56,650
adding and removing this new keyword

00:07:54,669 --> 00:07:59,200
maybe I don't need that maybe I'm gonna

00:07:56,650 --> 00:08:02,050
remove these parens at the end of my

00:07:59,200 --> 00:08:04,060
instantiation I'm doubting myself and

00:08:02,050 --> 00:08:06,970
this error message is making me doubt

00:08:04,060 --> 00:08:09,010
areas of my code that were perfectly

00:08:06,970 --> 00:08:10,810
fine but now I'm gonna mess them up and

00:08:09,010 --> 00:08:12,880
I'm gonna put myself even further from a

00:08:10,810 --> 00:08:15,450
solution than I was the first time

00:08:12,880 --> 00:08:18,910
around okay I'm gonna check that these

00:08:15,450 --> 00:08:21,280
Cal variables are spelled correctly and

00:08:18,910 --> 00:08:23,350
I'm not typoing anything there but

00:08:21,280 --> 00:08:26,500
that's pretty much the exhaustive list

00:08:23,350 --> 00:08:28,090
of what I can think of to debug when I

00:08:26,500 --> 00:08:33,820
get an error message that looks like

00:08:28,090 --> 00:08:36,400
that okay final example here a lot of

00:08:33,820 --> 00:08:40,180
students will mess up on checking

00:08:36,400 --> 00:08:42,969
truthiness versus assigning values so in

00:08:40,180 --> 00:08:46,330
this scenario we have a PI variable set

00:08:42,969 --> 00:08:49,120
equal to rhubarb and what the intent of

00:08:46,330 --> 00:08:51,700
this code is is to run a conditional

00:08:49,120 --> 00:08:54,640
that says if the pious strawberry we're

00:08:51,700 --> 00:08:57,280
gonna console.log boo and otherwise

00:08:54,640 --> 00:09:00,850
we're gonna say yay okay

00:08:57,280 --> 00:09:04,240
so I'm expecting this to console.log yay

00:09:00,850 --> 00:09:06,580
right now but it's not going to because

00:09:04,240 --> 00:09:09,310
I'm accidentally assigning pie to

00:09:06,580 --> 00:09:10,209
strawberry directly in my if condition

00:09:09,310 --> 00:09:12,310
okay

00:09:10,209 --> 00:09:14,470
this is not a fundamental

00:09:12,310 --> 00:09:17,350
misunderstanding of how the language

00:09:14,470 --> 00:09:19,180
works this could be as simple as a typo

00:09:17,350 --> 00:09:21,910
and look at how hard it is to recognize

00:09:19,180 --> 00:09:24,279
that if you're a new developer this is

00:09:21,910 --> 00:09:27,149
the difference of one or two equal signs

00:09:24,279 --> 00:09:29,380
that you're missing here and what's

00:09:27,149 --> 00:09:30,640
nastier about a problem like this is

00:09:29,380 --> 00:09:32,709
that you're not going to get an error

00:09:30,640 --> 00:09:34,990
message in the console to lead you in

00:09:32,709 --> 00:09:36,850
any direction you're just gonna see that

00:09:34,990 --> 00:09:38,950
your code is broken and you don't know

00:09:36,850 --> 00:09:41,200
why it's not doing what you expected it

00:09:38,950 --> 00:09:44,320
to as far as I know there's also not

00:09:41,200 --> 00:09:46,839
even an es lint rule that will warn you

00:09:44,320 --> 00:09:48,520
about this correct me if I'm wrong but I

00:09:46,839 --> 00:09:52,540
checked on it last night and I did not

00:09:48,520 --> 00:09:56,110
find one is there what's it called look

00:09:52,540 --> 00:09:58,540
it up let me know thank you okay but

00:09:56,110 --> 00:10:02,350
it's really hard for them to decipher

00:09:58,540 --> 00:10:05,170
where these little typos are okay so the

00:10:02,350 --> 00:10:07,990
unfortunate truth right now is that the

00:10:05,170 --> 00:10:11,110
consequences of making a very tiny

00:10:07,990 --> 00:10:13,720
innocent mistake are so much greater for

00:10:11,110 --> 00:10:16,480
new developers than it is for senior

00:10:13,720 --> 00:10:18,520
engineers they're spending five hours to

00:10:16,480 --> 00:10:20,770
debug the same thing that it would take

00:10:18,520 --> 00:10:23,399
a senior engineer to debug in one minute

00:10:20,770 --> 00:10:26,290
okay they're spinning their wheels a lot

00:10:23,399 --> 00:10:29,740
our error handling ecosystem right now

00:10:26,290 --> 00:10:32,500
is the biggest technical barrier to

00:10:29,740 --> 00:10:34,089
entry for new developers this this is

00:10:32,500 --> 00:10:37,000
the thing that's holding them back the

00:10:34,089 --> 00:10:40,089
most from being successful in tech right

00:10:37,000 --> 00:10:41,320
at the start okay so this is one of

00:10:40,089 --> 00:10:43,089
those things that we really need to

00:10:41,320 --> 00:10:45,730
focus on and we really need to fix I

00:10:43,089 --> 00:10:48,579
want to talk about this barrier a little

00:10:45,730 --> 00:10:50,829
bit why it exists how it came to be in

00:10:48,579 --> 00:10:53,440
the state that it's currently in and I'm

00:10:50,829 --> 00:10:55,870
gonna start by making some excuses for

00:10:53,440 --> 00:10:59,920
ourselves because that feels really good

00:10:55,870 --> 00:11:02,380
so why is error handling so bad as

00:10:59,920 --> 00:11:04,990
JavaScript developers we have some

00:11:02,380 --> 00:11:07,149
unique challenges that other ecosystems

00:11:04,990 --> 00:11:09,160
don't necessarily have to deal with for

00:11:07,149 --> 00:11:11,860
one we are working in a dynamically

00:11:09,160 --> 00:11:14,290
typed language which adds a set of

00:11:11,860 --> 00:11:17,889
intricacies that we don't necessarily

00:11:14,290 --> 00:11:21,129
see elsewhere on the client-side we

00:11:17,889 --> 00:11:23,350
cross-browser and cross for mist in seas

00:11:21,129 --> 00:11:25,749
that we have to work with and our

00:11:23,350 --> 00:11:28,029
testing infrastructure is still very new

00:11:25,749 --> 00:11:29,949
it's still very fragile and difficult to

00:11:28,029 --> 00:11:32,019
navigate and if you don't agree with

00:11:29,949 --> 00:11:34,089
that statement please take that as a

00:11:32,019 --> 00:11:36,730
sign that you have lost some of your

00:11:34,089 --> 00:11:39,759
beginner perspective as well because it

00:11:36,730 --> 00:11:42,429
is ok it's harder for us to rely on

00:11:39,759 --> 00:11:44,199
automated testing than it is for some

00:11:42,429 --> 00:11:48,910
other languages and some other coding

00:11:44,199 --> 00:11:50,799
environments ok so these factors are all

00:11:48,910 --> 00:11:52,929
the more reason for us to be focusing

00:11:50,799 --> 00:11:56,290
and working even harder on our error

00:11:52,929 --> 00:11:59,049
handling and we can't simply excuse

00:11:56,290 --> 00:12:01,989
ourselves from this type of work because

00:11:59,049 --> 00:12:04,149
in a lot of ways error handling is

00:12:01,989 --> 00:12:06,040
predictably bad there are a lot of

00:12:04,149 --> 00:12:09,459
things that we're doing that we can

00:12:06,040 --> 00:12:12,699
prevent in order to increase the the

00:12:09,459 --> 00:12:15,040
empathy and friendliness of diba the

00:12:12,699 --> 00:12:16,660
debugging process for new developers ok

00:12:15,040 --> 00:12:18,399
so one of the first things that we're

00:12:16,660 --> 00:12:21,129
doing wrong is we're writing error

00:12:18,399 --> 00:12:24,220
messages for ourselves rather than our

00:12:21,129 --> 00:12:27,519
users we pride ourselves on being a very

00:12:24,220 --> 00:12:29,589
user focused user centric community and

00:12:27,519 --> 00:12:31,449
Industry and I do believe that we put

00:12:29,589 --> 00:12:34,749
our best effort into making really good

00:12:31,449 --> 00:12:36,639
user experiences in some contexts but I

00:12:34,749 --> 00:12:39,579
do also think that we have some blind

00:12:36,639 --> 00:12:43,509
spots here so when our users are

00:12:39,579 --> 00:12:45,489
developers we kind of latch on to that

00:12:43,509 --> 00:12:48,100
similarity we say oh they're a developer

00:12:45,489 --> 00:12:50,679
just like me they're gonna understand

00:12:48,100 --> 00:12:52,269
things the same way that I do okay and

00:12:50,679 --> 00:12:55,269
that's not the case we're starting to

00:12:52,269 --> 00:12:57,939
neglect the differences in skill level

00:12:55,269 --> 00:13:00,069
and backgrounds and experience and those

00:12:57,939 --> 00:13:01,839
things have a huge impact on the way

00:13:00,069 --> 00:13:03,279
that people work with your technology

00:13:01,839 --> 00:13:04,480
and the things that they're gonna try to

00:13:03,279 --> 00:13:09,249
do with it in the ways that they're

00:13:04,480 --> 00:13:10,929
gonna try to break it okay bigger

00:13:09,249 --> 00:13:13,899
problem is that we're working with

00:13:10,929 --> 00:13:16,569
computers and computers are kind of dumb

00:13:13,899 --> 00:13:19,179
the programs that we write can only

00:13:16,569 --> 00:13:21,549
understand so much about intent the

00:13:19,179 --> 00:13:24,009
software that we write can only figure

00:13:21,549 --> 00:13:26,319
out what you take guesses at what a user

00:13:24,009 --> 00:13:28,419
is actually trying to do here so this

00:13:26,319 --> 00:13:30,579
leads to error messages that look like

00:13:28,419 --> 00:13:31,450
this this is a really popular one that

00:13:30,579 --> 00:13:33,220
my students

00:13:31,450 --> 00:13:36,310
run into has anyone ever seen this one

00:13:33,220 --> 00:13:39,550
yeah lots of hand see how obnoxious is

00:13:36,310 --> 00:13:41,890
that one so unexpected token in JSON at

00:13:39,550 --> 00:13:44,470
position zero a lot of my students will

00:13:41,890 --> 00:13:46,690
run into this when they are expecting a

00:13:44,470 --> 00:13:48,790
network response to be of a certain

00:13:46,690 --> 00:13:50,920
content type and they get something

00:13:48,790 --> 00:13:54,070
completely different so this error

00:13:50,920 --> 00:13:55,480
message does tell me that there's some

00:13:54,070 --> 00:13:58,540
kind of problem trying to parse this

00:13:55,480 --> 00:14:00,430
JSON it did tell me what was going wrong

00:13:58,540 --> 00:14:01,840
but it didn't really hint at the fact

00:14:00,430 --> 00:14:05,230
that I might be working with a different

00:14:01,840 --> 00:14:08,080
content type right so programs are

00:14:05,230 --> 00:14:10,420
really good at telling us what went

00:14:08,080 --> 00:14:14,020
wrong but not very good about telling us

00:14:10,420 --> 00:14:15,970
why something went wrong so this error

00:14:14,020 --> 00:14:18,280
message would need a little bit of

00:14:15,970 --> 00:14:20,710
additional code a little bit more manual

00:14:18,280 --> 00:14:23,080
effort in order to humanize it a little

00:14:20,710 --> 00:14:26,170
bit and I don't think we're always

00:14:23,080 --> 00:14:30,040
putting in that effort and I think it's

00:14:26,170 --> 00:14:33,190
obvious we have historically treated

00:14:30,040 --> 00:14:36,280
error handling as a secondary priority

00:14:33,190 --> 00:14:40,300
and it shows I did a very quick github

00:14:36,280 --> 00:14:43,870
search for better errors and resulted in

00:14:40,300 --> 00:14:45,520
about a million issues about a hundred

00:14:43,870 --> 00:14:48,220
fifty thousand of them were related to

00:14:45,520 --> 00:14:50,680
JavaScript repos and I know this is not

00:14:48,220 --> 00:14:52,540
a perfect data point by any means but I

00:14:50,680 --> 00:14:54,990
still think it's kind of telling and I

00:14:52,540 --> 00:14:57,880
think one of the causes for this is

00:14:54,990 --> 00:15:00,070
somewhat related to that theory of

00:14:57,880 --> 00:15:02,650
broken windows where if something's a

00:15:00,070 --> 00:15:04,480
little bit broken in one place it's much

00:15:02,650 --> 00:15:07,000
more acceptable for it to be broken

00:15:04,480 --> 00:15:09,730
everywhere else and be broken worse so a

00:15:07,000 --> 00:15:12,250
JavaScript developer can get away with

00:15:09,730 --> 00:15:14,920
having poor error handling in their

00:15:12,250 --> 00:15:17,040
tools because we're used to it by now

00:15:14,920 --> 00:15:21,210
and we're complacent with that now

00:15:17,040 --> 00:15:24,610
you'll hardly be recognized for

00:15:21,210 --> 00:15:26,830
neglecting such a thing okay I think a

00:15:24,610 --> 00:15:30,220
bigger cause of this goes back to that

00:15:26,830 --> 00:15:34,510
idea of intent so in order to write good

00:15:30,220 --> 00:15:37,240
error messages we need to have some data

00:15:34,510 --> 00:15:38,650
on what people are trying to do with our

00:15:37,240 --> 00:15:40,300
tools how they're working with them how

00:15:38,650 --> 00:15:42,700
they're breaking them and in order to

00:15:40,300 --> 00:15:45,100
get that data we need users so this

00:15:42,700 --> 00:15:48,010
forces us into this waiting period where

00:15:45,100 --> 00:15:51,010
we have to let users struggle with our

00:15:48,010 --> 00:15:53,200
technology for a little while so that we

00:15:51,010 --> 00:15:56,020
can better figure out how to help them

00:15:53,200 --> 00:15:58,150
with those problems so this forces us to

00:15:56,020 --> 00:16:00,100
put error-handling on the back burner

00:15:58,150 --> 00:16:02,530
for a while while we kind of wait for

00:16:00,100 --> 00:16:03,940
that feedback to come in and then we

00:16:02,530 --> 00:16:06,670
have a really hard time bringing it back

00:16:03,940 --> 00:16:11,260
to the front and reprioritizing that

00:16:06,670 --> 00:16:13,840
okay so this might all seem like quite a

00:16:11,260 --> 00:16:16,450
bit for us to overcome but when things

00:16:13,840 --> 00:16:18,400
are predictably terrible and failing in

00:16:16,450 --> 00:16:21,250
predictable ways it also means it is

00:16:18,400 --> 00:16:23,740
easy to fix so we have a lot of

00:16:21,250 --> 00:16:26,740
solutions here and this responsibility

00:16:23,740 --> 00:16:29,860
belongs on all of us but I do want to

00:16:26,740 --> 00:16:33,000
point out a couple of key players not by

00:16:29,860 --> 00:16:36,240
any means to cast any blame but to

00:16:33,000 --> 00:16:39,070
rather make it easier for us to identify

00:16:36,240 --> 00:16:41,230
where we should be helping out and where

00:16:39,070 --> 00:16:44,020
we can be helping out okay where these

00:16:41,230 --> 00:16:47,380
problem is actually alive so the first

00:16:44,020 --> 00:16:50,980
player we have is the Ekman script stick

00:16:47,380 --> 00:16:52,630
spec itself the language and the

00:16:50,980 --> 00:16:55,120
language defines a couple of different

00:16:52,630 --> 00:16:57,460
error objects different types of error

00:16:55,120 --> 00:16:59,590
objects for us and for the most part I

00:16:57,460 --> 00:17:01,780
think that the errors that we run into

00:16:59,590 --> 00:17:04,120
when we're working with JavaScript do

00:17:01,780 --> 00:17:06,070
fall pretty nicely into these buckets

00:17:04,120 --> 00:17:08,470
these categories that have been defined

00:17:06,070 --> 00:17:10,449
for us but the problem with these is

00:17:08,470 --> 00:17:12,760
that it doesn't provide us with that

00:17:10,449 --> 00:17:14,500
much much context you really have to do

00:17:12,760 --> 00:17:16,839
your research on what these error types

00:17:14,500 --> 00:17:19,270
represent in order to glean any

00:17:16,839 --> 00:17:21,910
information out of it and I've often

00:17:19,270 --> 00:17:24,400
noticed that my students will completely

00:17:21,910 --> 00:17:27,280
ignore the part of an error in their

00:17:24,400 --> 00:17:29,380
console that says type error : set a

00:17:27,280 --> 00:17:31,780
syntax error : and they will skip

00:17:29,380 --> 00:17:33,070
directly to the error message to figure

00:17:31,780 --> 00:17:35,560
out what went wrong so they're not even

00:17:33,070 --> 00:17:37,240
really looking at this okay and those

00:17:35,560 --> 00:17:40,480
error messages are often written by

00:17:37,240 --> 00:17:42,190
platform engineers platform engineers

00:17:40,480 --> 00:17:44,530
are going to determine what kind of

00:17:42,190 --> 00:17:46,570
information users need application

00:17:44,530 --> 00:17:48,580
developers need when they run into a

00:17:46,570 --> 00:17:50,380
particular error and sometimes those

00:17:48,580 --> 00:17:52,570
messages are really helpful and then

00:17:50,380 --> 00:17:56,940
sometimes they're more like this and

00:17:52,570 --> 00:17:56,940
it's not quite as useful

00:17:58,740 --> 00:18:03,940
okay so those are two two points of

00:18:02,470 --> 00:18:06,600
contact that we have already where

00:18:03,940 --> 00:18:09,520
people are shaping the way that we're

00:18:06,600 --> 00:18:11,650
getting these error messages back the

00:18:09,520 --> 00:18:13,630
third one I want to identify as the

00:18:11,650 --> 00:18:17,140
maintainer Xand contributors to

00:18:13,630 --> 00:18:20,500
frameworks and libraries so you might be

00:18:17,140 --> 00:18:22,270
working with react or ember and they

00:18:20,500 --> 00:18:24,930
have implemented their own error

00:18:22,270 --> 00:18:27,790
handling for when you do things wrong

00:18:24,930 --> 00:18:30,790
this is a tweet from one of my former

00:18:27,790 --> 00:18:33,580
students who ran into this uncaught

00:18:30,790 --> 00:18:35,920
error cannot find module she was

00:18:33,580 --> 00:18:38,020
building a react application at the time

00:18:35,920 --> 00:18:41,200
and one thing that I really like about

00:18:38,020 --> 00:18:42,610
this tweet is that she kind of makes an

00:18:41,200 --> 00:18:45,160
assumption that because she's working

00:18:42,610 --> 00:18:48,310
with react the problem must lie within

00:18:45,160 --> 00:18:51,430
react but in reality this could have

00:18:48,310 --> 00:18:54,150
been a typo in a file name a miss

00:18:51,430 --> 00:18:56,650
configuration of webpack a bad

00:18:54,150 --> 00:18:58,840
import/export statement this error could

00:18:56,650 --> 00:19:01,360
have come from anywhere but it's really

00:18:58,840 --> 00:19:03,610
hard for new developers to identify

00:19:01,360 --> 00:19:05,800
where this is coming from when this is

00:19:03,610 --> 00:19:09,640
the only information that we're giving

00:19:05,800 --> 00:19:12,040
them okay so if this student had

00:19:09,640 --> 00:19:14,020
happened to be brave enough to file an

00:19:12,040 --> 00:19:16,540
issue on the react repo and say hey I'm

00:19:14,020 --> 00:19:18,610
running into this problem likely what

00:19:16,540 --> 00:19:23,070
would have happened would be that she

00:19:18,610 --> 00:19:25,840
would be politely directed to other

00:19:23,070 --> 00:19:28,540
resources support resources a react

00:19:25,840 --> 00:19:30,910
channel for getting additional help and

00:19:28,540 --> 00:19:32,560
then her issue would be closed and maybe

00:19:30,910 --> 00:19:34,180
she would join in a slack channel for

00:19:32,560 --> 00:19:36,730
people that are helping out with with

00:19:34,180 --> 00:19:39,250
react problems and somebody there would

00:19:36,730 --> 00:19:42,160
say oh it's actually your your webpack

00:19:39,250 --> 00:19:44,080
configuration is a little bit messed up

00:19:42,160 --> 00:19:45,340
and it's missing that file so it's not

00:19:44,080 --> 00:19:47,170
getting into your bundle that's why

00:19:45,340 --> 00:19:49,690
you're getting that error and that's

00:19:47,170 --> 00:19:52,810
great now her problem is solved and her

00:19:49,690 --> 00:19:54,730
application is working just fine but the

00:19:52,810 --> 00:19:59,110
problem of this vague error message is

00:19:54,730 --> 00:20:02,380
still not solved okay react could say

00:19:59,110 --> 00:20:04,420
well it wasn't our problem it turned out

00:20:02,380 --> 00:20:06,250
to be a webpack issue right and then

00:20:04,420 --> 00:20:07,960
webpack could say well technically

00:20:06,250 --> 00:20:08,269
everything is working fine on our end

00:20:07,960 --> 00:20:11,239
there's

00:20:08,269 --> 00:20:14,359
failure here it was a user error our

00:20:11,239 --> 00:20:16,700
tech stocks are so deep now that it's

00:20:14,359 --> 00:20:20,059
very easy for everyone to skirt this

00:20:16,700 --> 00:20:22,190
responsibility of fixing our error

00:20:20,059 --> 00:20:23,719
handling because everyone just says oh

00:20:22,190 --> 00:20:25,609
well it's not my problem

00:20:23,719 --> 00:20:27,320
ok and that's one of the first things

00:20:25,609 --> 00:20:29,389
that we need to address if we're going

00:20:27,320 --> 00:20:30,469
to fix this error handling issue that we

00:20:29,389 --> 00:20:33,049
have ok

00:20:30,469 --> 00:20:36,379
so not only do we need to be filing

00:20:33,049 --> 00:20:38,690
issues about our bugs we need to be

00:20:36,379 --> 00:20:41,299
filing issues about the problems that

00:20:38,690 --> 00:20:44,809
we're having with our problems ok so

00:20:41,299 --> 00:20:47,539
it's a little bit meta but we need to

00:20:44,809 --> 00:20:49,969
tell maintainer Xand and relevant

00:20:47,539 --> 00:20:52,940
engineers that it's not ok to have this

00:20:49,969 --> 00:20:54,440
poor error handling and if you are a

00:20:52,940 --> 00:20:56,979
library maintainer or a framework

00:20:54,440 --> 00:21:00,049
maintainer don't just close those issues

00:20:56,979 --> 00:21:02,570
find a way to either make it your

00:21:00,049 --> 00:21:04,969
problem or find out whose problem it

00:21:02,570 --> 00:21:07,369
should be and make it theirs don't just

00:21:04,969 --> 00:21:09,469
ignore those problems next time you are

00:21:07,369 --> 00:21:12,109
working through a bug and you're running

00:21:09,469 --> 00:21:13,789
into a difficult time solving it

00:21:12,109 --> 00:21:15,859
don't just solve the problem for

00:21:13,789 --> 00:21:17,959
yourself and say great my application

00:21:15,859 --> 00:21:20,479
works and wipe your hands and move on

00:21:17,959 --> 00:21:21,979
think about what made it possible for

00:21:20,479 --> 00:21:24,739
you to make that mistake in the first

00:21:21,979 --> 00:21:27,919
place what made it harder for you to

00:21:24,739 --> 00:21:30,859
solve what information might have made

00:21:27,919 --> 00:21:32,869
that debugging process easier and who

00:21:30,859 --> 00:21:34,249
might be able to fix this this is the

00:21:32,869 --> 00:21:35,869
kind of information that people need

00:21:34,249 --> 00:21:40,070
these are the kind of issues that we

00:21:35,869 --> 00:21:42,019
need to be filing I think we pride

00:21:40,070 --> 00:21:44,450
ourselves on being kind of a selfless

00:21:42,019 --> 00:21:46,999
community where we are so open and

00:21:44,450 --> 00:21:50,599
willing and ready to share our knowledge

00:21:46,999 --> 00:21:53,419
and our work for free which is great of

00:21:50,599 --> 00:21:55,909
us I love that about our community but

00:21:53,419 --> 00:21:59,450
when it comes to filing an issue that

00:21:55,909 --> 00:22:01,159
might help some unknown developer two or

00:21:59,450 --> 00:22:02,599
three years down the road who you will

00:22:01,159 --> 00:22:04,249
never speak to and you will never know

00:22:02,599 --> 00:22:06,109
that you helped them I think we're very

00:22:04,249 --> 00:22:08,959
selfish we don't do that nearly often

00:22:06,109 --> 00:22:11,179
enough and we need to start ok take the

00:22:08,959 --> 00:22:13,129
time make it impossible for some other

00:22:11,179 --> 00:22:17,629
developer to make the same mistake that

00:22:13,129 --> 00:22:19,009
you made ok next thing we need to do is

00:22:17,629 --> 00:22:21,980
start working more with junior

00:22:19,009 --> 00:22:23,630
developers and depending on what kind of

00:22:21,980 --> 00:22:25,040
technology you're working with or what

00:22:23,630 --> 00:22:28,010
kind of error handling you're trying to

00:22:25,040 --> 00:22:30,679
improve a junior might mean someone that

00:22:28,010 --> 00:22:32,299
is brand new to programming or someone

00:22:30,679 --> 00:22:33,860
that maybe has some experience but

00:22:32,299 --> 00:22:36,200
they're new to your language or they're

00:22:33,860 --> 00:22:38,870
new to your particular technology so I

00:22:36,200 --> 00:22:41,600
use that term junior with a lot of

00:22:38,870 --> 00:22:43,250
flexibility here but this is going to

00:22:41,600 --> 00:22:46,309
take care of that blind spot that we

00:22:43,250 --> 00:22:49,340
have when we're trying to build for

00:22:46,309 --> 00:22:50,960
developers I mentioned we think our

00:22:49,340 --> 00:22:53,330
users are developers they understand

00:22:50,960 --> 00:22:55,760
everything the same way that I do but

00:22:53,330 --> 00:22:58,190
that's not the case they you need to be

00:22:55,760 --> 00:23:00,080
building your technology for all skill

00:22:58,190 --> 00:23:02,450
levels you want as many people as

00:23:00,080 --> 00:23:04,309
possible to be included in the

00:23:02,450 --> 00:23:04,970
opportunity to use whatever it is that

00:23:04,309 --> 00:23:08,059
you're building

00:23:04,970 --> 00:23:10,190
so juniors are gonna ask the best

00:23:08,059 --> 00:23:13,580
questions and provide you with the most

00:23:10,190 --> 00:23:15,500
insight into what's confusing or what's

00:23:13,580 --> 00:23:17,270
broken I can't tell you how much I've

00:23:15,500 --> 00:23:19,340
learned from my students over the past

00:23:17,270 --> 00:23:21,620
year just because of the very weird

00:23:19,340 --> 00:23:23,690
questions that they ask and the even

00:23:21,620 --> 00:23:25,370
weirder things that they try to do I'm

00:23:23,690 --> 00:23:27,470
shocked every day at what they tried to

00:23:25,370 --> 00:23:30,590
do okay so juniors are gonna help you

00:23:27,470 --> 00:23:35,179
conduct the most thorough user testing

00:23:30,590 --> 00:23:37,340
that you possibly can okay one thing

00:23:35,179 --> 00:23:38,660
that juniors are gonna need though I can

00:23:37,340 --> 00:23:41,030
give you a hint right now it's gonna be

00:23:38,660 --> 00:23:44,929
more context than we've been providing

00:23:41,030 --> 00:23:48,440
them with so my favorite example that I

00:23:44,929 --> 00:23:51,799
love to hate is this e adder in use

00:23:48,440 --> 00:23:54,590
error that gets surfaced it's an error

00:23:51,799 --> 00:23:56,330
code from libuv I get surfaced when

00:23:54,590 --> 00:23:58,790
you're running an Express server node

00:23:56,330 --> 00:24:01,880
server on a port that's already taken do

00:23:58,790 --> 00:24:03,919
you know how my students try to tell me

00:24:01,880 --> 00:24:05,840
what's wrong when they get this error I

00:24:03,919 --> 00:24:09,280
walk around and I asked them what their

00:24:05,840 --> 00:24:14,210
problem is and they say I don't know II

00:24:09,280 --> 00:24:16,429
during Eid removes seed renew see they

00:24:14,210 --> 00:24:18,310
know it's important because it's in all

00:24:16,429 --> 00:24:20,890
caps

00:24:18,310 --> 00:24:23,470
but they have no idea what that sense or

00:24:20,890 --> 00:24:26,380
what that means even if this just said

00:24:23,470 --> 00:24:28,240
error address in use that would be more

00:24:26,380 --> 00:24:29,680
helpful that would be more readable for

00:24:28,240 --> 00:24:31,980
people so I don't know why we do things

00:24:29,680 --> 00:24:34,660
like this if anyone knows please

00:24:31,980 --> 00:24:36,820
enlighten me later

00:24:34,660 --> 00:24:39,970
but they're gonna need more verbosity

00:24:36,820 --> 00:24:42,010
than this and I think one community

00:24:39,970 --> 00:24:44,880
where people are doing this really well

00:24:42,010 --> 00:24:47,950
is in Elm has anyone worked with Elm

00:24:44,880 --> 00:24:51,430
people like it yeah what do we think of

00:24:47,950 --> 00:24:54,100
the error handling the best right so

00:24:51,430 --> 00:24:55,960
good ok so don't worry if you can't read

00:24:54,100 --> 00:24:57,940
this I will obviously send out a link to

00:24:55,960 --> 00:25:01,540
my slides later but this is an example

00:24:57,940 --> 00:25:03,820
of an error in Elm and look at how

00:25:01,540 --> 00:25:05,980
beautifully verbose this is this is so

00:25:03,820 --> 00:25:08,140
much information not only is this

00:25:05,980 --> 00:25:10,840
anticipating what the user was trying to

00:25:08,140 --> 00:25:13,450
do but it's also offering potential

00:25:10,840 --> 00:25:16,420
solutions and then also offering

00:25:13,450 --> 00:25:18,370
additional links to read more about that

00:25:16,420 --> 00:25:21,370
concepts that they're trying to work

00:25:18,370 --> 00:25:23,890
with this is the kind of context that we

00:25:21,370 --> 00:25:27,250
need with our error messages when we're

00:25:23,890 --> 00:25:30,220
working in working with new developers

00:25:27,250 --> 00:25:32,620
this makes me think back to that initial

00:25:30,220 --> 00:25:36,280
example that I brought up where students

00:25:32,620 --> 00:25:39,070
are confusing array.prototype methods

00:25:36,280 --> 00:25:41,230
with object prototype methods and we got

00:25:39,070 --> 00:25:43,960
that error message that said pipe push

00:25:41,230 --> 00:25:47,790
is not a function and this wasn't super

00:25:43,960 --> 00:25:51,760
helpful for us right so I even look at

00:25:47,790 --> 00:25:53,440
the context that we have here I have a I

00:25:51,760 --> 00:25:56,710
have a line number of where it occurred

00:25:53,440 --> 00:26:00,220
I also have a line number there where it

00:25:56,710 --> 00:26:01,510
occurred if I open this to expand it and

00:26:00,220 --> 00:26:04,210
get more details with this little

00:26:01,510 --> 00:26:07,450
triangle I get another link to the line

00:26:04,210 --> 00:26:09,550
number where it occurred but I don't get

00:26:07,450 --> 00:26:11,890
anything useful I don't get any extra

00:26:09,550 --> 00:26:14,230
information I would love to see the UI

00:26:11,890 --> 00:26:16,960
of this change slightly so that when you

00:26:14,230 --> 00:26:19,780
expand an error instead of getting a

00:26:16,960 --> 00:26:22,690
third link to the same exact place you

00:26:19,780 --> 00:26:24,670
get information like pushes an array

00:26:22,690 --> 00:26:27,100
prototype method you happen to be

00:26:24,670 --> 00:26:29,260
calling it on an object read more about

00:26:27,100 --> 00:26:32,320
that here read more about prototype

00:26:29,260 --> 00:26:34,270
methods here okay junior developers

00:26:32,320 --> 00:26:36,400
don't know how to read call stacks we

00:26:34,270 --> 00:26:38,320
really need to rethink call stacks all

00:26:36,400 --> 00:26:40,510
together I know the Firefox developers

00:26:38,320 --> 00:26:43,330
are doing a good job thinking about that

00:26:40,510 --> 00:26:45,790
and prioritizing that but I can also

00:26:43,330 --> 00:26:47,890
tell you that these three links in this

00:26:45,790 --> 00:26:50,560
small amount of real estate new

00:26:47,890 --> 00:26:52,960
developers don't click on those at all

00:26:50,560 --> 00:26:55,240
maybe they clicked on them once and then

00:26:52,960 --> 00:26:56,890
they saw the sources panel and they got

00:26:55,240 --> 00:26:59,050
really freaked out and scared cuz I

00:26:56,890 --> 00:27:00,700
didn't know what was going on or they

00:26:59,050 --> 00:27:02,680
didn't realize how useful it was and

00:27:00,700 --> 00:27:04,810
then they never click on them again ok

00:27:02,680 --> 00:27:07,510
so we need to find some way to add some

00:27:04,810 --> 00:27:09,280
more friendly context to these error

00:27:07,510 --> 00:27:11,830
messages besides just these call stacks

00:27:09,280 --> 00:27:13,540
I'm not saying call stacks are not

00:27:11,830 --> 00:27:15,940
helpful obviously they're incredibly

00:27:13,540 --> 00:27:24,850
helpful but it takes a while to get used

00:27:15,940 --> 00:27:27,520
to reading those ok so coming up with

00:27:24,850 --> 00:27:29,560
more elegant solutions like that looking

00:27:27,520 --> 00:27:33,130
at that Elm solution thinking about that

00:27:29,560 --> 00:27:34,570
PI dot push error message coming up with

00:27:33,130 --> 00:27:37,870
these solutions takes a little bit of

00:27:34,570 --> 00:27:41,800
research we need that intent data right

00:27:37,870 --> 00:27:43,900
so we're waiting for our users to

00:27:41,800 --> 00:27:45,820
struggle a little bit with our

00:27:43,900 --> 00:27:47,410
technology so that we can figure out how

00:27:45,820 --> 00:27:49,960
they're using it how they're breaking it

00:27:47,410 --> 00:27:52,300
what problems are running into you I can

00:27:49,960 --> 00:27:55,030
tell you that we have already struggled

00:27:52,300 --> 00:27:57,550
that intent data is already out there

00:27:55,030 --> 00:28:00,010
for so many aspects of JavaScript

00:27:57,550 --> 00:28:02,680
development all we need to do is gather

00:28:00,010 --> 00:28:06,100
it and leverage it so gathering this

00:28:02,680 --> 00:28:08,050
comes from reading through issues that

00:28:06,100 --> 00:28:10,480
are files and bugs that are reported

00:28:08,050 --> 00:28:11,890
look through Stack Overflow and don't

00:28:10,480 --> 00:28:14,530
just look at the questions look at the

00:28:11,890 --> 00:28:16,150
answers and look at what questions they

00:28:14,530 --> 00:28:18,640
had about those answers what kind of

00:28:16,150 --> 00:28:20,050
clarification did they need pay

00:28:18,640 --> 00:28:23,080
attention to conversations that are

00:28:20,050 --> 00:28:24,760
happening in slack channels and support

00:28:23,080 --> 00:28:28,090
networks a lot of times these

00:28:24,760 --> 00:28:29,980
conversations will help one person it'll

00:28:28,090 --> 00:28:31,930
be a little one-off solution for one

00:28:29,980 --> 00:28:34,240
person and then that conversation will

00:28:31,930 --> 00:28:37,000
disappear forever and it will never help

00:28:34,240 --> 00:28:39,160
anyone improve that technology improve

00:28:37,000 --> 00:28:41,050
that resource ok so we need to be

00:28:39,160 --> 00:28:43,150
documenting those things and then offer

00:28:41,050 --> 00:28:45,760
to be a mentor for a technology that

00:28:43,150 --> 00:28:47,290
you're looking to improve being a mentor

00:28:45,760 --> 00:28:49,660
you will learn so much like I've said

00:28:47,290 --> 00:28:52,900
juniors are the most enlightening people

00:28:49,660 --> 00:28:55,510
to work with so being a mentor is going

00:28:52,900 --> 00:28:57,910
to ramp up your user testing and and

00:28:55,510 --> 00:29:01,420
your ability to anticipate what's going

00:28:57,910 --> 00:29:05,500
to go wrong tenfold okay once we have

00:29:01,420 --> 00:29:07,330
all that data we need to aggregate all

00:29:05,500 --> 00:29:10,180
of the resources that are going to help

00:29:07,330 --> 00:29:11,350
people with their intent and one example

00:29:10,180 --> 00:29:14,740
that I think we're doing this really

00:29:11,350 --> 00:29:18,160
well is in the audits panel of Chrome's

00:29:14,740 --> 00:29:20,350
dev tools if you're running an audit you

00:29:18,160 --> 00:29:21,820
get this really nice list of everything

00:29:20,350 --> 00:29:25,420
that you did right and everything that

00:29:21,820 --> 00:29:27,610
you did wrong and when you expand on

00:29:25,420 --> 00:29:29,230
each of these results you get a link to

00:29:27,610 --> 00:29:31,690
learn more and these learn more links

00:29:29,230 --> 00:29:34,450
will send you to a blog post or a

00:29:31,690 --> 00:29:36,220
tutorial to learn more about exactly

00:29:34,450 --> 00:29:38,860
what's failing or exactly what

00:29:36,220 --> 00:29:40,630
successful one thing I do is my students

00:29:38,860 --> 00:29:42,880
is I have them run an audit on a

00:29:40,630 --> 00:29:45,310
particular webpage and I have them just

00:29:42,880 --> 00:29:47,590
list out all the vocabulary that they're

00:29:45,310 --> 00:29:49,390
unfamiliar with or things that don't

00:29:47,590 --> 00:29:51,040
make sense to them right away and then I

00:29:49,390 --> 00:29:52,960
have them go through all of these

00:29:51,040 --> 00:29:55,270
resources that are listed here for them

00:29:52,960 --> 00:29:56,460
and read them and by the time they're

00:29:55,270 --> 00:29:58,960
done looking through those resources

00:29:56,460 --> 00:30:00,820
they can speak to almost all of that

00:29:58,960 --> 00:30:03,280
vocabulary that they didn't understand

00:30:00,820 --> 00:30:06,850
at the beginning of the day and this is

00:30:03,280 --> 00:30:08,260
a great example and I think it's a

00:30:06,850 --> 00:30:11,080
little bit easier in this scenario

00:30:08,260 --> 00:30:13,210
because our intent is very easy to

00:30:11,080 --> 00:30:15,430
assume here we can say if you're running

00:30:13,210 --> 00:30:17,110
a performance audit on your application

00:30:15,430 --> 00:30:19,510
very likely you're trying to make your

00:30:17,110 --> 00:30:21,700
application more performant intent kind

00:30:19,510 --> 00:30:23,530
of varies in other realms a little bit

00:30:21,700 --> 00:30:25,420
so it's a little bit trickier to

00:30:23,530 --> 00:30:28,120
implement something like this in other

00:30:25,420 --> 00:30:30,990
contexts I think but what I want us to

00:30:28,120 --> 00:30:33,370
take away from from this UI is

00:30:30,990 --> 00:30:36,040
aggregating those resources and putting

00:30:33,370 --> 00:30:38,650
them in one place like putting them

00:30:36,040 --> 00:30:39,880
right where users are running into their

00:30:38,650 --> 00:30:42,730
error so that they don't have to go

00:30:39,880 --> 00:30:44,620
searching for them new developers don't

00:30:42,730 --> 00:30:46,990
know where to look for these resources

00:30:44,620 --> 00:30:49,720
they don't even know how to Google yet

00:30:46,990 --> 00:30:52,120
necessarily constructing proper search

00:30:49,720 --> 00:30:53,620
terms to learn more about the errors

00:30:52,120 --> 00:30:56,050
that they're encountering is very

00:30:53,620 --> 00:30:58,150
difficult it may seem very intuitive for

00:30:56,050 --> 00:30:59,320
you but believe it or not that is still

00:30:58,150 --> 00:31:01,570
a skill that has

00:30:59,320 --> 00:31:03,430
to be learned and it takes some time so

00:31:01,570 --> 00:31:05,880
if we can aggregate those resources and

00:31:03,430 --> 00:31:08,590
put them right at their point of error

00:31:05,880 --> 00:31:11,880
we save them that step of trying to

00:31:08,590 --> 00:31:14,440
figure out how to search for them okay

00:31:11,880 --> 00:31:17,560
another skill that junior developers are

00:31:14,440 --> 00:31:21,940
really focused on is knowing when to ask

00:31:17,560 --> 00:31:23,620
for help so some of my students will be

00:31:21,940 --> 00:31:26,380
working on a problem by themselves for

00:31:23,620 --> 00:31:29,230
about five hours and an instructor will

00:31:26,380 --> 00:31:31,690
come over and point out a single line of

00:31:29,230 --> 00:31:33,580
code and fix it in a minute just like

00:31:31,690 --> 00:31:36,730
that and the student will just facepalm

00:31:33,580 --> 00:31:38,830
in disbelief that they just spent five

00:31:36,730 --> 00:31:42,430
hours trying to debug such a trivial

00:31:38,830 --> 00:31:45,340
error and in those scenarios I generally

00:31:42,430 --> 00:31:49,330
just tell my students well welcome to

00:31:45,340 --> 00:31:50,530
programming and I walk away but I don't

00:31:49,330 --> 00:31:52,810
want to say that anywhere I don't want

00:31:50,530 --> 00:31:55,780
to have to say that any more code is

00:31:52,810 --> 00:31:58,240
broken way more often than it is working

00:31:55,780 --> 00:32:00,940
and that goes that's the same for us

00:31:58,240 --> 00:32:02,800
that happens to us just as frequently as

00:32:00,940 --> 00:32:04,360
it happens to junior developers so we

00:32:02,800 --> 00:32:06,460
need to show them that we understand

00:32:04,360 --> 00:32:07,870
that and we empathize with that the way

00:32:06,460 --> 00:32:10,810
that we're gonna do that is by fixing

00:32:07,870 --> 00:32:12,370
our error handling encountering errors

00:32:10,810 --> 00:32:14,830
should be an informative learning

00:32:12,370 --> 00:32:16,900
experience and not a frustrating

00:32:14,830 --> 00:32:18,310
roadblock and that's what it is right

00:32:16,900 --> 00:32:20,830
now for new developers it's a

00:32:18,310 --> 00:32:23,500
frustrating roadblock it's a barrier for

00:32:20,830 --> 00:32:25,960
them new developers are not learning

00:32:23,500 --> 00:32:27,400
nearly half as fast as they could be

00:32:25,960 --> 00:32:30,040
they're not learning from their mistakes

00:32:27,400 --> 00:32:32,550
they're running into the same problems

00:32:30,040 --> 00:32:35,740
far more many times than is necessary

00:32:32,550 --> 00:32:39,010
because they're spinning their wheels at

00:32:35,740 --> 00:32:41,560
the sight of these really obscure error

00:32:39,010 --> 00:32:44,590
messages that we're giving them okay

00:32:41,560 --> 00:32:49,870
they're not learning from these these

00:32:44,590 --> 00:32:52,630
mistakes that they're making companies

00:32:49,870 --> 00:32:54,790
are really hesitant to hire junior

00:32:52,630 --> 00:32:57,820
developers because they fear that they

00:32:54,790 --> 00:33:00,670
can't ramp them up fast enough or they

00:32:57,820 --> 00:33:03,400
don't have the resources to do so and as

00:33:00,670 --> 00:33:05,860
a community we can alleviate so much of

00:33:03,400 --> 00:33:08,380
that issue just by fixing our error

00:33:05,860 --> 00:33:11,650
handling we can make it so much easier

00:33:08,380 --> 00:33:12,730
for new developers to learn so much

00:33:11,650 --> 00:33:14,650
faster than they current

00:33:12,730 --> 00:33:17,140
we are if we just stop making it so

00:33:14,650 --> 00:33:19,210
difficult for them so I really urge you

00:33:17,140 --> 00:33:21,220
the next time you are working on a bug

00:33:19,210 --> 00:33:22,570
working through an error truly think

00:33:21,220 --> 00:33:24,790
about these things and keep it at the

00:33:22,570 --> 00:33:26,799
forefront of your mind if you see an

00:33:24,790 --> 00:33:29,260
error message that isn't useful try to

00:33:26,799 --> 00:33:32,980
file an issue for it I hope that you are

00:33:29,260 --> 00:33:35,049
motivated to start improving this area

00:33:32,980 --> 00:33:36,429
of our our community but if you're not

00:33:35,049 --> 00:33:38,410
quite there yet if you're not quite

00:33:36,429 --> 00:33:40,740
feeling that I'll leave you with this

00:33:38,410 --> 00:33:44,620
final error message that I find very

00:33:40,740 --> 00:33:47,919
inspirational failure is not an option

00:33:44,620 --> 00:33:50,679
okay so print this out leave it on your

00:33:47,919 --> 00:33:52,450
desk whatever you need to do to keep

00:33:50,679 --> 00:33:56,470
this at the forefront of your mind okay

00:33:52,450 --> 00:33:58,510
deal it's cool thank you so much for

00:33:56,470 --> 00:34:00,730
your time and attention I will post a

00:33:58,510 --> 00:34:02,169
link to my slides on Twitter and I'll be

00:34:00,730 --> 00:34:04,570
around to the rest of the evening to

00:34:02,169 --> 00:34:09,859
talk more about this thank you so much

00:34:04,570 --> 00:34:09,859
[Applause]

00:34:14,980 --> 00:34:17,040

YouTube URL: https://www.youtube.com/watch?v=fQHH6aSpYV0


