Title: Madlaina Kalunder - Building a raytracing engine with JavaScript
Publication date: 2018-04-11
Playlist: JSConf Australia 2018
Description: 
	In this talk we will build a 3D ray tracer with Javascript. We learn about the basics of real time 3D graphics and what we need in order to produce realistic looking 3D graphics in the browser.

Itâ€™s fun to learn about 3D and graphics, plus seeing how a seemingly complex concept such as ray tracing can be broken down to simpler concepts is inspiring. I enjoyed the artistic aspect of using maths to make 3D objects appear in a browser - and demystifying it in the process of learning. I hope to show and inspire the audience to experiment.
Captions: 
	00:00:11,290 --> 00:00:17,480
hello everyone I'm very excited to be

00:00:15,290 --> 00:00:21,349
here today all the way from Switzerland

00:00:17,480 --> 00:00:24,619
to beautiful Australia and my first goal

00:00:21,349 --> 00:00:28,400
I already achieved I arrived here and I

00:00:24,619 --> 00:00:31,059
am coming from winter so I'm very happy

00:00:28,400 --> 00:00:33,170
that I'm not red as a tomato right now

00:00:31,059 --> 00:00:35,510
thankfully the weather is not that crazy

00:00:33,170 --> 00:00:38,570
so this is not cause my new friend that

00:00:35,510 --> 00:00:41,059
I made with my Pakman circle I really

00:00:38,570 --> 00:00:46,339
love this analogy by the way it's really

00:00:41,059 --> 00:00:48,739
awesome as was already mentioned I'm a

00:00:46,339 --> 00:00:52,040
game designer working as a full-stack

00:00:48,739 --> 00:00:54,229
developer at archaeologic we are startup

00:00:52,040 --> 00:00:57,589
from Zurich that is working with 3d

00:00:54,229 --> 00:01:00,530
interiors and architectural

00:00:57,589 --> 00:01:05,299
visualization on the web and we are

00:01:00,530 --> 00:01:08,479
basically working on a JavaScript web

00:01:05,299 --> 00:01:13,160
framework where you can use our 3d

00:01:08,479 --> 00:01:18,560
models and 3d API around 3d modeling for

00:01:13,160 --> 00:01:21,410
your website I really really love games

00:01:18,560 --> 00:01:24,800
I like developing games I like playing

00:01:21,410 --> 00:01:26,990
board games video games and that's why

00:01:24,800 --> 00:01:31,640
I'm here today to talk to you about

00:01:26,990 --> 00:01:34,190
render engines and the second goal is

00:01:31,640 --> 00:01:37,010
that you come out of this talk and you

00:01:34,190 --> 00:01:39,110
know a little bit more about 3d and that

00:01:37,010 --> 00:01:42,350
you know how to get started if you want

00:01:39,110 --> 00:01:44,390
to so this is more of a low I will talk

00:01:42,350 --> 00:01:47,600
where you will be able to learn

00:01:44,390 --> 00:01:50,570
hopefully yeah I really like travelling

00:01:47,600 --> 00:01:53,390
but I have to say this has been a really

00:01:50,570 --> 00:01:55,700
long travel to come here I might have to

00:01:53,390 --> 00:01:57,500
change this no it was really enjoyable

00:01:55,700 --> 00:02:02,240
so far so thank you so much again for

00:01:57,500 --> 00:02:05,060
having me so why would you want to do 3d

00:02:02,240 --> 00:02:07,310
on the web I mean the web as it is now

00:02:05,060 --> 00:02:11,480
it's really great we can do lots and

00:02:07,310 --> 00:02:15,319
lots of things why do we need 3d so

00:02:11,480 --> 00:02:17,930
first of all 3d adds another completely

00:02:15,319 --> 00:02:21,780
another dimension to the web that means

00:02:17,930 --> 00:02:24,780
you can also use this dimension too

00:02:21,780 --> 00:02:28,050
for your advantage to show more things

00:02:24,780 --> 00:02:30,720
so this is a visualization that we made

00:02:28,050 --> 00:02:33,810
and on top of this visualization we

00:02:30,720 --> 00:02:37,020
don't only have a 3d model of a house

00:02:33,810 --> 00:02:39,420
but we also have spatial data which we

00:02:37,020 --> 00:02:43,770
can then use with our machine learning

00:02:39,420 --> 00:02:46,980
algorithms to for example automatically

00:02:43,770 --> 00:02:49,470
furnish your room and show you how you

00:02:46,980 --> 00:02:52,500
could use this space that you have not

00:02:49,470 --> 00:02:59,209
even thought about before or we can also

00:02:52,500 --> 00:03:02,220
see where where you which which is the

00:02:59,209 --> 00:03:04,980
room you might want to use for different

00:03:02,220 --> 00:03:08,190
things or how the light is going to

00:03:04,980 --> 00:03:10,620
affect your room it's not only that we

00:03:08,190 --> 00:03:13,470
can also make a really amazing games on

00:03:10,620 --> 00:03:15,720
the web it's and we can use all the

00:03:13,470 --> 00:03:19,519
advantages of the native web that that

00:03:15,720 --> 00:03:24,360
we have which we could not do with

00:03:19,519 --> 00:03:27,420
applications that are just standalone so

00:03:24,360 --> 00:03:33,359
this is a really cool prototype that ADA

00:03:27,420 --> 00:03:35,489
Rose was doing in a very quick iteration

00:03:33,359 --> 00:03:38,870
so I was really it was really fun to

00:03:35,489 --> 00:03:41,730
play it right you can also really do

00:03:38,870 --> 00:03:44,519
data visualization so this is a data

00:03:41,730 --> 00:03:46,530
visualization from busy cities and what

00:03:44,519 --> 00:03:48,780
I really love about this is that you can

00:03:46,530 --> 00:03:51,840
not only use the third dimension to so

00:03:48,780 --> 00:03:55,739
show that in time but you can actually

00:03:51,840 --> 00:03:59,280
also use it to show a progression over

00:03:55,739 --> 00:04:05,100
time so you can use animation and other

00:03:59,280 --> 00:04:07,079
infographics to show these things so I

00:04:05,100 --> 00:04:10,140
don't know how many of you have

00:04:07,079 --> 00:04:15,289
experience with working out with 3d but

00:04:10,140 --> 00:04:19,560
I myself was wondering how do we even

00:04:15,289 --> 00:04:21,959
start with 3d and like we have we have

00:04:19,560 --> 00:04:25,200
so many numbers with wire frames we have

00:04:21,959 --> 00:04:29,039
polygons we have textures so many new

00:04:25,200 --> 00:04:31,919
things that we want to to use and how do

00:04:29,039 --> 00:04:35,009
we even get started it's very

00:04:31,919 --> 00:04:37,319
overwhelming for for beginners I see

00:04:35,009 --> 00:04:40,559
because I have been working with game

00:04:37,319 --> 00:04:43,889
prototypes with 3d visualisations with

00:04:40,559 --> 00:04:45,749
3d on the web with WebGL 3GS and it's

00:04:43,889 --> 00:04:47,999
still a mystery to me and it's still

00:04:45,749 --> 00:04:50,969
really hard to help people to get

00:04:47,999 --> 00:04:53,639
started so my approach is a little bit

00:04:50,969 --> 00:04:57,149
different yesterday we have heard lots

00:04:53,639 --> 00:04:59,189
of talks about color and I really

00:04:57,149 --> 00:05:04,469
enjoyed that was actually it CSS come

00:04:59,189 --> 00:05:07,289
from sorry lots of color concepts and I

00:05:04,469 --> 00:05:09,149
want to go one step behind that so I

00:05:07,289 --> 00:05:14,639
want to talk about light and how we

00:05:09,149 --> 00:05:18,719
actually see so let's take a blank scene

00:05:14,639 --> 00:05:22,740
and we add this this scene to it we have

00:05:18,719 --> 00:05:25,050
like a little chair and we have we have

00:05:22,740 --> 00:05:27,839
a laptop standing on a desk we have some

00:05:25,050 --> 00:05:31,409
shelves but we have a window and outside

00:05:27,839 --> 00:05:35,399
of the window we see the Sun and the Sun

00:05:31,409 --> 00:05:39,770
is shooting race or emitting rays unto

00:05:35,399 --> 00:05:42,839
the earth and what happens is this race

00:05:39,770 --> 00:05:45,330
come in through the window and they

00:05:42,839 --> 00:05:50,189
start bouncing off the first object

00:05:45,330 --> 00:05:54,779
that's in the scene and this light ray

00:05:50,189 --> 00:05:57,149
has energy and the light is basically

00:05:54,779 --> 00:05:59,849
gonna bounce until these energies you

00:05:57,149 --> 00:06:03,779
stop well what does this actually mean

00:05:59,849 --> 00:06:05,939
so light is electromagnetic waves with

00:06:03,779 --> 00:06:09,990
different frequencies which make up the

00:06:05,939 --> 00:06:12,959
color so if you take away one frequency

00:06:09,990 --> 00:06:19,159
or two frequencies you might get red or

00:06:12,959 --> 00:06:22,529
green but what do we actually see so

00:06:19,159 --> 00:06:25,349
what happens with the Rays only the race

00:06:22,529 --> 00:06:27,629
that are hitting our eyes it are

00:06:25,349 --> 00:06:34,199
actually visualized on that on the back

00:06:27,629 --> 00:06:35,849
of our eyes so how does it happen that

00:06:34,199 --> 00:06:37,229
different objects have different colors

00:06:35,849 --> 00:06:39,979
I'm gonna explain that a little bit

00:06:37,229 --> 00:06:39,979
later as well

00:06:40,649 --> 00:06:46,349
material surfaces have this thing where

00:06:44,550 --> 00:06:48,630
they selectively absorb different

00:06:46,349 --> 00:06:52,140
frequencies of light or an

00:06:48,630 --> 00:07:00,240
gee and they can also reflect the

00:06:52,140 --> 00:07:03,290
delight or transmit it so for a

00:07:00,240 --> 00:07:06,450
visualization you could think about

00:07:03,290 --> 00:07:09,150
these three different types and that's a

00:07:06,450 --> 00:07:11,880
really big abstraction so you have

00:07:09,150 --> 00:07:15,590
materials like mirrors or water

00:07:11,880 --> 00:07:16,790
sorry mere mirrors or metals that are

00:07:15,590 --> 00:07:19,170
[Music]

00:07:16,790 --> 00:07:23,130
reflecting the light which means that

00:07:19,170 --> 00:07:26,100
they are uniformly reflecting the race

00:07:23,130 --> 00:07:28,640
and through the uniform Ness you will

00:07:26,100 --> 00:07:31,320
actually be able to see your reflection

00:07:28,640 --> 00:07:34,800
then you have things like diffuse

00:07:31,320 --> 00:07:37,620
materials which are super chaotic and

00:07:34,800 --> 00:07:42,630
they basically scatter the race all

00:07:37,620 --> 00:07:45,270
around the place and you have propagated

00:07:42,630 --> 00:07:48,540
light so if you have a material like

00:07:45,270 --> 00:07:51,300
glass or water the light will not only

00:07:48,540 --> 00:07:53,820
reflect off the surface but it will

00:07:51,300 --> 00:08:01,890
actually also transmitted through the

00:07:53,820 --> 00:08:03,840
solid with these three different things

00:08:01,890 --> 00:08:04,170
so could somebody bring me some water

00:08:03,840 --> 00:08:07,680
please

00:08:04,170 --> 00:08:10,800
thank you with these three things you

00:08:07,680 --> 00:08:13,500
can already create such a big range of

00:08:10,800 --> 00:08:18,020
materials and we have not even talked

00:08:13,500 --> 00:08:18,020
about the colors yet thank you so much

00:08:23,030 --> 00:08:29,700
and I am I know this might seem a bit

00:08:26,880 --> 00:08:32,370
random but I'm explaining this to you

00:08:29,700 --> 00:08:35,580
because this is the problem I see with

00:08:32,370 --> 00:08:38,640
people that are starting it's not just

00:08:35,580 --> 00:08:40,740
if you get started with 3ds not just you

00:08:38,640 --> 00:08:44,039
have to learn how to 3d model it's also

00:08:40,740 --> 00:08:47,670
you are basically a movie director

00:08:44,039 --> 00:08:52,860
you're a light specialist a photographer

00:08:47,670 --> 00:08:54,840
you have to use lots of design to to get

00:08:52,860 --> 00:08:56,940
to a point where you get some some nice

00:08:54,840 --> 00:08:58,650
results you have to know about

00:08:56,940 --> 00:09:02,040
sonography

00:08:58,650 --> 00:09:05,700
and lots lots of other things so it's

00:09:02,040 --> 00:09:09,510
it's like a new new big box to take

00:09:05,700 --> 00:09:12,060
things out of and I feel that that when

00:09:09,510 --> 00:09:13,830
I explained to people these concepts

00:09:12,060 --> 00:09:16,380
they start to really understand what is

00:09:13,830 --> 00:09:19,140
much a reality how do we create a

00:09:16,380 --> 00:09:21,920
realistic looking 3d scene if we don't

00:09:19,140 --> 00:09:21,920
know about these things

00:09:22,820 --> 00:09:30,660
so we have now the concept of light but

00:09:28,560 --> 00:09:35,340
how do we capture this light on an image

00:09:30,660 --> 00:09:37,710
and for that it's really cool to go back

00:09:35,340 --> 00:09:40,320
to the first cameras that have been made

00:09:37,710 --> 00:09:42,480
and these are called pinhole cameras

00:09:40,320 --> 00:09:46,140
which most of you have probably heard of

00:09:42,480 --> 00:09:48,420
and what happens is that we have one box

00:09:46,140 --> 00:09:51,870
with the tiny hole which basically only

00:09:48,420 --> 00:09:58,130
allows us one light ray to pass per

00:09:51,870 --> 00:09:58,130
pixel or in that case space on the film

00:10:00,260 --> 00:10:05,940
and that's where the concept of ray

00:10:02,970 --> 00:10:09,660
tracing is coming from so ray tracing is

00:10:05,940 --> 00:10:12,000
a really substantial rendering technique

00:10:09,660 --> 00:10:14,190
that has been around for a long time so

00:10:12,000 --> 00:10:16,500
the first talks about ray tracing

00:10:14,190 --> 00:10:21,720
engines were actually at SIGGRAPH I

00:10:16,500 --> 00:10:25,950
think 1984 so that's six years older

00:10:21,720 --> 00:10:27,690
than I am that's I feel pretty it's

00:10:25,950 --> 00:10:28,920
pretty cool to see how long this

00:10:27,690 --> 00:10:30,690
technique actually has been around

00:10:28,920 --> 00:10:33,930
because if you think about computer

00:10:30,690 --> 00:10:36,120
graphics you think okay it's just been a

00:10:33,930 --> 00:10:39,810
few years since we have this GPU

00:10:36,120 --> 00:10:42,330
acceleration and no actually I think the

00:10:39,810 --> 00:10:45,330
first computer graphics animations have

00:10:42,330 --> 00:10:47,430
been rendered with ray tracing and other

00:10:45,330 --> 00:10:51,390
techniques that I will show you a bit

00:10:47,430 --> 00:10:53,640
later actually then took over and for

00:10:51,390 --> 00:10:58,170
real-time computer graphics as for games

00:10:53,640 --> 00:11:00,060
but Pixar is still using it's a mixed

00:10:58,170 --> 00:11:03,150
kind of a mixed thing but they're still

00:11:00,060 --> 00:11:05,760
using ray tracing as their primary way

00:11:03,150 --> 00:11:09,480
of rendering so what is ray tracing

00:11:05,760 --> 00:11:11,840
actually if you think about the Sun and

00:11:09,480 --> 00:11:16,160
it's emitting billions and billions

00:11:11,840 --> 00:11:20,450
of race at every tiny little micro

00:11:16,160 --> 00:11:23,000
second that's lots and lots of rays that

00:11:20,450 --> 00:11:24,620
are bouncing around all yeah okay not

00:11:23,000 --> 00:11:27,440
really in this video because it's quite

00:11:24,620 --> 00:11:31,970
dark but that are bouncing around all

00:11:27,440 --> 00:11:35,420
over the place and if we would calculate

00:11:31,970 --> 00:11:37,400
all this race that would be a big loss

00:11:35,420 --> 00:11:39,890
because what I've said before is only

00:11:37,400 --> 00:11:44,300
the race that actually hit our eyes are

00:11:39,890 --> 00:11:46,610
the ones that we can see so somebody was

00:11:44,300 --> 00:11:49,670
really smart and came up with the

00:11:46,610 --> 00:11:53,270
concept of backwards rate racing so what

00:11:49,670 --> 00:11:56,210
we do is we go backwards from the eye or

00:11:53,270 --> 00:12:00,200
from the camera in this case and we go

00:11:56,210 --> 00:12:03,260
through the pixel and we shoot away from

00:12:00,200 --> 00:12:06,650
our eyes into the scene and we see which

00:12:03,260 --> 00:12:12,830
rays are going to hit a light source at

00:12:06,650 --> 00:12:15,770
the end of them so these are considered

00:12:12,830 --> 00:12:17,780
a primary race we want to see what is

00:12:15,770 --> 00:12:20,000
the the main object that gets hit the

00:12:17,780 --> 00:12:22,460
first one because that's the one that we

00:12:20,000 --> 00:12:25,610
want to visualize and that's the beauty

00:12:22,460 --> 00:12:29,420
of ray tracing is that we actually have

00:12:25,610 --> 00:12:31,339
this understanding of the scene so we

00:12:29,420 --> 00:12:33,860
know what is the first thing we're

00:12:31,339 --> 00:12:37,400
hitting and what we do is very

00:12:33,860 --> 00:12:40,010
simplified we do a test is this point or

00:12:37,400 --> 00:12:44,380
this point of the on top of the surface

00:12:40,010 --> 00:12:51,080
of the object is it directly in sunlight

00:12:44,380 --> 00:12:54,050
or is it obscured by another object so

00:12:51,080 --> 00:12:56,240
what happens is we hit the object and

00:12:54,050 --> 00:12:59,480
from the object we cast a second ray

00:12:56,240 --> 00:13:01,010
based on the reflection the cast is

00:12:59,480 --> 00:13:03,160
second-rate there actually to the Sun

00:13:01,010 --> 00:13:10,690
that's the simplified version right

00:13:03,160 --> 00:13:13,070
sorry but gets a bit more complicated

00:13:10,690 --> 00:13:15,980
since we have talked about materials

00:13:13,070 --> 00:13:17,870
before right so what happens what

00:13:15,980 --> 00:13:18,470
happens actually on the surface of the

00:13:17,870 --> 00:13:23,959
object

00:13:18,470 --> 00:13:25,450
what if our surface is transmissive so

00:13:23,959 --> 00:13:28,670
what we want to do

00:13:25,450 --> 00:13:30,860
it's not directly check if the Sun if

00:13:28,670 --> 00:13:32,840
the point is in the Sun otherwise we

00:13:30,860 --> 00:13:35,480
just get two values we get it's in the

00:13:32,840 --> 00:13:39,290
song or not so what we actually want to

00:13:35,480 --> 00:13:42,710
do is we want to see how much of our

00:13:39,290 --> 00:13:47,840
light gets reflected and how much of our

00:13:42,710 --> 00:13:52,700
light gets refracted or gets transmitted

00:13:47,840 --> 00:13:57,140
through the solid and that's just a

00:13:52,700 --> 00:13:59,330
mathematical equation that we can do and

00:13:57,140 --> 00:14:01,370
from there we're gonna see if it hits

00:13:59,330 --> 00:14:05,570
another object and then we go on and on

00:14:01,370 --> 00:14:09,230
and on and at the end we want to see if

00:14:05,570 --> 00:14:13,580
we hit a light source or not it's still

00:14:09,230 --> 00:14:16,970
very simplified so I would like to look

00:14:13,580 --> 00:14:20,110
at some code that does this concept I'll

00:14:16,970 --> 00:14:20,110
give you a minute to really

00:14:32,800 --> 00:14:40,220
yeah I think I think everybody got it

00:14:35,240 --> 00:14:42,560
right so what is a common challenge

00:14:40,220 --> 00:14:44,450
wrong people who do computer graphics is

00:14:42,560 --> 00:14:46,940
to write the most compact ray tracing

00:14:44,450 --> 00:14:47,810
engine that could actually fit on a

00:14:46,940 --> 00:14:50,510
business card

00:14:47,810 --> 00:14:54,650
so that's what people do in their free

00:14:50,510 --> 00:14:57,410
time and I was giving this talk at Jays

00:14:54,650 --> 00:15:00,830
come Iceland and right after me there

00:14:57,410 --> 00:15:03,740
was Martin clapper doing a talk it was

00:15:00,830 --> 00:15:06,910
called Daedalus was fantastic talk and

00:15:03,740 --> 00:15:11,240
only recommend it but what happened is I

00:15:06,910 --> 00:15:16,160
think he did show me an example that was

00:15:11,240 --> 00:15:19,370
a fourth of this so please watch it it's

00:15:16,160 --> 00:15:23,290
really cool I was I was very impressed

00:15:19,370 --> 00:15:31,280
very impressed so there was almost no

00:15:23,290 --> 00:15:33,530
typing involved I mean this is how I

00:15:31,280 --> 00:15:37,370
feel after two weeks of looking at my

00:15:33,530 --> 00:15:39,620
code just don't understand anything so

00:15:37,370 --> 00:15:41,900
let's take this a little bit further

00:15:39,620 --> 00:15:43,310
down and I took all the math out of this

00:15:41,900 --> 00:15:46,060
because I think it's not really

00:15:43,310 --> 00:15:49,070
something we should look at right now

00:15:46,060 --> 00:15:53,240
it's gonna make it would add lots and

00:15:49,070 --> 00:15:56,090
lots of slides so first we want to think

00:15:53,240 --> 00:15:59,810
about the concept of geometries there is

00:15:56,090 --> 00:16:01,850
lots of primitive shapes that we can

00:15:59,810 --> 00:16:04,820
describe mathematically and one of the

00:16:01,850 --> 00:16:07,580
easiest shapes are spheres because

00:16:04,820 --> 00:16:10,370
basically what it needs to define fear a

00:16:07,580 --> 00:16:12,710
sphere is the center and the radius and

00:16:10,370 --> 00:16:15,260
boom we have a sphere right cool

00:16:12,710 --> 00:16:18,740
so we're only going to do spheres for

00:16:15,260 --> 00:16:20,720
the beginning what we also want to

00:16:18,740 --> 00:16:23,230
define is the material so we want to

00:16:20,720 --> 00:16:26,300
know what color does it have how

00:16:23,230 --> 00:16:32,390
transparent is it and how reflective is

00:16:26,300 --> 00:16:34,940
it so what we wanted wanted to find for

00:16:32,390 --> 00:16:37,850
this objects or for all our primitive

00:16:34,940 --> 00:16:42,050
objects that we're gonna program in the

00:16:37,850 --> 00:16:43,070
future is an intersection function so

00:16:42,050 --> 00:16:46,820
basically

00:16:43,070 --> 00:16:49,640
we get the Ray the origin of the Ray and

00:16:46,820 --> 00:16:53,000
the direction of the Ray and we do check

00:16:49,640 --> 00:16:55,820
does it hit or does it not hit and if it

00:16:53,000 --> 00:16:57,410
hits we want to know on which two

00:16:55,820 --> 00:17:02,510
intersection points because there's

00:16:57,410 --> 00:17:04,730
always two then we're going to have our

00:17:02,510 --> 00:17:06,980
main function where we define our scene

00:17:04,730 --> 00:17:10,250
this is gonna be something you're gonna

00:17:06,980 --> 00:17:13,310
have to do a lot is you place objects in

00:17:10,250 --> 00:17:15,500
their scene and because we have a

00:17:13,310 --> 00:17:18,199
simplified version of a ray tracer we

00:17:15,500 --> 00:17:21,680
only do spheres also our light source is

00:17:18,199 --> 00:17:25,970
going to be sphere now and then we have

00:17:21,680 --> 00:17:30,800
a frame buffer where we have for each

00:17:25,970 --> 00:17:33,410
pixel we're gonna check and see we're

00:17:30,800 --> 00:17:36,080
gonna trace our race for each pixel and

00:17:33,410 --> 00:17:37,760
then afterwards when we have all the

00:17:36,080 --> 00:17:42,440
image data we're gonna render that to a

00:17:37,760 --> 00:17:45,530
canvas so this is how a trace function

00:17:42,440 --> 00:17:49,720
could look like and the cool thing is

00:17:45,530 --> 00:17:53,960
recursive because we all love recursion

00:17:49,720 --> 00:17:57,320
we take some we take all our scene in

00:17:53,960 --> 00:17:59,840
all the geometries we take the first ray

00:17:57,320 --> 00:18:03,290
the origin rate which is the incident

00:17:59,840 --> 00:18:05,450
ray that we have seen before and the

00:18:03,290 --> 00:18:09,680
direction and then we also have death

00:18:05,450 --> 00:18:11,950
because basically what I said in the

00:18:09,680 --> 00:18:16,700
beginning we want to trace the Ray

00:18:11,950 --> 00:18:18,590
forever until it hits the Sun but that

00:18:16,700 --> 00:18:20,480
could take that could really take a long

00:18:18,590 --> 00:18:25,210
time or sometimes maybe it doesn't even

00:18:20,480 --> 00:18:27,980
do it so that's really a shame because

00:18:25,210 --> 00:18:34,040
we want to do this real time in the

00:18:27,980 --> 00:18:36,290
future so what we do is after the depth

00:18:34,040 --> 00:18:40,820
of recursion that we define maybe five

00:18:36,290 --> 00:18:43,010
times we do the check if actually the

00:18:40,820 --> 00:18:45,770
object is in shadow or in the Sun and

00:18:43,010 --> 00:18:48,350
we're gonna do this for each light

00:18:45,770 --> 00:18:51,440
source in the scene and then we can

00:18:48,350 --> 00:18:54,550
combine the values of the light sources

00:18:51,440 --> 00:18:57,160
together and

00:18:54,550 --> 00:19:00,220
that's where the physical correctness of

00:18:57,160 --> 00:19:02,620
the raytracer is gonna end so if you

00:19:00,220 --> 00:19:04,930
really want to have physical correctness

00:19:02,620 --> 00:19:07,840
you would go for a path tracer that's a

00:19:04,930 --> 00:19:09,880
whole other box where you really shoot

00:19:07,840 --> 00:19:12,870
the race forever and see when they're

00:19:09,880 --> 00:19:12,870
gonna hit something

00:19:13,920 --> 00:19:19,810
where was I yeah so we're gonna find the

00:19:17,650 --> 00:19:22,810
nearest object our first object it's

00:19:19,810 --> 00:19:24,610
gonna be hit and for that we're going to

00:19:22,810 --> 00:19:26,350
loop through all the geometries we do

00:19:24,610 --> 00:19:31,210
the intersection test for all the

00:19:26,350 --> 00:19:32,950
geometries and if we hit something good

00:19:31,210 --> 00:19:38,830
if not we're just gonna return the

00:19:32,950 --> 00:19:41,200
background color of our scene if we do

00:19:38,830 --> 00:19:43,060
hit something we're gonna have to we're

00:19:41,200 --> 00:19:47,350
gonna have to see what object material

00:19:43,060 --> 00:19:51,280
is it's there so if we have transparency

00:19:47,350 --> 00:19:53,470
or reflection we have to continue the

00:19:51,280 --> 00:19:59,170
test because the Ray is going to bounce

00:19:53,470 --> 00:20:01,840
off so yeah we're gonna do we got into a

00:19:59,170 --> 00:20:04,570
recursion for each so we're gonna do a

00:20:01,840 --> 00:20:08,500
reflection recursion and we're gonna

00:20:04,570 --> 00:20:09,940
compute the refraction recursion and in

00:20:08,500 --> 00:20:12,370
the end we're gonna put them together

00:20:09,940 --> 00:20:13,990
with Renault and that's something I'm

00:20:12,370 --> 00:20:17,670
not gonna explain it's really cool

00:20:13,990 --> 00:20:22,990
though because it depends on where our

00:20:17,670 --> 00:20:26,290
surface normal is so if we hit sorry

00:20:22,990 --> 00:20:29,110
that was too early if we hit the object

00:20:26,290 --> 00:20:31,420
it depends on what is the impact and

00:20:29,110 --> 00:20:33,910
where's the where is the surface normal

00:20:31,420 --> 00:20:36,160
pointing at and depending on that we

00:20:33,910 --> 00:20:39,600
kind of change how we calculate the two

00:20:36,160 --> 00:20:39,600
values of refraction and reflection

00:20:41,250 --> 00:20:47,260
exactly so if we resolve the recursion

00:20:45,130 --> 00:20:49,030
in the end and we compute the values

00:20:47,260 --> 00:20:52,170
together we're going to get the color of

00:20:49,030 --> 00:20:55,620
the pixel at that specific point and

00:20:52,170 --> 00:20:59,350
this is what it's going to look like so

00:20:55,620 --> 00:21:03,520
it's really interesting we already have

00:20:59,350 --> 00:21:07,770
lots of things we have reflection we

00:21:03,520 --> 00:21:07,770
have shadows

00:21:07,880 --> 00:21:14,070
and these things come all for free with

00:21:11,090 --> 00:21:16,050
its rate tracing you're gonna see that's

00:21:14,070 --> 00:21:21,330
not so easy with other rendering

00:21:16,050 --> 00:21:24,950
techniques so I have already gotten

00:21:21,330 --> 00:21:27,600
ahead of myself a little bit what

00:21:24,950 --> 00:21:29,850
strikes me or what was really cool in

00:21:27,600 --> 00:21:32,220
this experiment is that everybody can

00:21:29,850 --> 00:21:35,390
get started really fast to actually

00:21:32,220 --> 00:21:35,390
write a rendering

00:21:43,070 --> 00:21:52,799
okay so very little code we can do our

00:21:48,599 --> 00:21:56,219
own render engine great but we're gonna

00:21:52,799 --> 00:21:58,919
very fast run into lots of problems for

00:21:56,219 --> 00:22:01,379
example what if we want more than just

00:21:58,919 --> 00:22:04,049
primitive geometries that are but not

00:22:01,379 --> 00:22:06,929
mathematically defined what if we have

00:22:04,049 --> 00:22:11,489
multiple light sources that we have to

00:22:06,929 --> 00:22:14,399
consider in our calculation what if we

00:22:11,489 --> 00:22:19,699
have more transition transmissive

00:22:14,399 --> 00:22:19,699
materials or materials that are

00:22:20,029 --> 00:22:26,869
multi-layered such as skin so it's

00:22:23,459 --> 00:22:32,429
somewhat transmissive but also it's

00:22:26,869 --> 00:22:40,379
milky and get really interesting what if

00:22:32,429 --> 00:22:43,019
we want more physical correctness yeah

00:22:40,379 --> 00:22:45,839
what if we want to have more light

00:22:43,019 --> 00:22:47,819
bounces and what if we want to avoid

00:22:45,839 --> 00:22:49,529
noise in our scene because that's

00:22:47,819 --> 00:22:52,889
something that we will always get with

00:22:49,529 --> 00:22:54,869
ray tracing since it's basically one

00:22:52,889 --> 00:22:57,690
sample per pixel is not going to be

00:22:54,869 --> 00:22:59,999
enough we're gonna have to do lots and

00:22:57,690 --> 00:23:03,979
lots and lots of samples and add them

00:22:59,999 --> 00:23:03,979
together to get a really smooth image

00:23:07,549 --> 00:23:13,309
okay so this leads me to two the second

00:23:10,919 --> 00:23:16,229
rendering technique that's very

00:23:13,309 --> 00:23:20,369
fundamental in computer graphics which

00:23:16,229 --> 00:23:22,440
is rasterization and the interesting

00:23:20,369 --> 00:23:26,609
thing about rasterization is that it's

00:23:22,440 --> 00:23:30,029
really super fast and it can do lots of

00:23:26,609 --> 00:23:32,039
things but basically what is the concept

00:23:30,029 --> 00:23:34,909
is that it's solving the visibility

00:23:32,039 --> 00:23:38,969
problem from a different perspective

00:23:34,909 --> 00:23:41,149
while ray tracing is tracing from the

00:23:38,969 --> 00:23:43,349
eye to the objects in the scene

00:23:41,149 --> 00:23:47,459
rasterization is going the other way

00:23:43,349 --> 00:23:49,319
around so it takes the scene and it's

00:23:47,459 --> 00:23:54,839
going to go from the scene to the eye

00:23:49,319 --> 00:23:56,340
with perspective projection so what we

00:23:54,839 --> 00:23:59,820
do is we just

00:23:56,340 --> 00:24:03,299
sickly flat map the whole scene onto a

00:23:59,820 --> 00:24:06,570
screen space version of that and we are

00:24:03,299 --> 00:24:08,730
using triangles for this because

00:24:06,570 --> 00:24:14,100
triangles are an ideal rendering

00:24:08,730 --> 00:24:17,100
primitive it's planar that means we

00:24:14,100 --> 00:24:20,340
don't have I guess we can always look at

00:24:17,100 --> 00:24:25,529
it in a 2d from a 2d point of view and

00:24:20,340 --> 00:24:28,080
we we cannot we cannot make them any

00:24:25,529 --> 00:24:33,929
smaller we cannot add more surfaces to

00:24:28,080 --> 00:24:36,120
it so what we do is we map each triangle

00:24:33,929 --> 00:24:38,580
to screen space and then we're going to

00:24:36,120 --> 00:24:41,220
rasterize over it and see which pixel

00:24:38,580 --> 00:24:43,919
lays in what triangle and with the C

00:24:41,220 --> 00:24:46,080
buffer we're gonna see which of the

00:24:43,919 --> 00:24:47,640
triangles are more in the front and

00:24:46,080 --> 00:24:52,399
which one are more in the back and

00:24:47,640 --> 00:24:54,649
that's how we're gonna render it so

00:24:52,399 --> 00:24:57,919
these are two really basic

00:24:54,649 --> 00:25:00,390
implementations one is a basic

00:24:57,919 --> 00:25:05,120
rasterization implementation and the

00:25:00,390 --> 00:25:08,250
second image is a basic ray tracing

00:25:05,120 --> 00:25:10,110
implementation and you can see that as I

00:25:08,250 --> 00:25:12,419
said before with ray tracing there's

00:25:10,110 --> 00:25:12,950
already lots of things that you get for

00:25:12,419 --> 00:25:16,080
free

00:25:12,950 --> 00:25:20,159
for example the reflections Antti

00:25:16,080 --> 00:25:21,630
realizing shadows soft shadows and all

00:25:20,159 --> 00:25:23,760
these really cool things I think

00:25:21,630 --> 00:25:28,190
everybody can see what is the quality

00:25:23,760 --> 00:25:30,539
difference so how are computer graphics

00:25:28,190 --> 00:25:32,580
solving this because if you look at

00:25:30,539 --> 00:25:34,289
games these days you're not gonna see

00:25:32,580 --> 00:25:37,890
the top thing it's going to look really

00:25:34,289 --> 00:25:40,679
nice with advanced implementation there

00:25:37,890 --> 00:25:43,620
is you can actually fake a lots of the

00:25:40,679 --> 00:25:46,440
physics but we're getting to a problem

00:25:43,620 --> 00:25:49,409
when it comes to transparency and water

00:25:46,440 --> 00:25:55,640
and water simulation of fluids and

00:25:49,409 --> 00:25:57,830
things like this so there is differences

00:25:55,640 --> 00:26:01,049
ray tracing is physically correct

00:25:57,830 --> 00:26:03,539
provides us with high details it's super

00:26:01,049 --> 00:26:06,030
computational heavy and we don't know

00:26:03,539 --> 00:26:08,990
yet or we will probably never know if we

00:26:06,030 --> 00:26:08,990
can do it real time

00:26:09,779 --> 00:26:13,440
there is some attempts and they are

00:26:11,489 --> 00:26:14,070
super cool so you should definitely

00:26:13,440 --> 00:26:17,969
check it out

00:26:14,070 --> 00:26:20,369
and ray-tracing gets really complex

00:26:17,969 --> 00:26:22,649
quite fast so you're probably not going

00:26:20,369 --> 00:26:27,059
to work on a rate racing engine on your

00:26:22,649 --> 00:26:29,429
own restoration is really fast so we can

00:26:27,059 --> 00:26:31,469
do it easily real time there's lots of

00:26:29,429 --> 00:26:34,289
tooling and hardware support so that

00:26:31,469 --> 00:26:36,929
means the GPU is actually made to

00:26:34,289 --> 00:26:41,729
support your rasterization shaders and

00:26:36,929 --> 00:26:44,070
algorithms it's physically incorrect

00:26:41,729 --> 00:26:48,239
because as you see we lose through the

00:26:44,070 --> 00:26:50,549
perspective projection we lose all the

00:26:48,239 --> 00:26:53,690
information about depth and actual

00:26:50,549 --> 00:26:57,499
objects which is make it in flat and

00:26:53,690 --> 00:27:01,469
therefore we lose quality of the image

00:26:57,499 --> 00:27:04,440
how do we do rasterization how could we

00:27:01,469 --> 00:27:07,440
get easily started saw before how to get

00:27:04,440 --> 00:27:09,139
easily started with ray tracing but now

00:27:07,440 --> 00:27:11,339
we want to actually work with

00:27:09,139 --> 00:27:15,029
rasterization and get our scenes

00:27:11,339 --> 00:27:19,109
together so this is where I want to give

00:27:15,029 --> 00:27:21,649
you this toolbox called a frame and it's

00:27:19,109 --> 00:27:24,299
really awesome because it's an HTML

00:27:21,649 --> 00:27:27,629
component based web framework from

00:27:24,299 --> 00:27:32,129
Mozilla basically you can define your

00:27:27,629 --> 00:27:35,460
scene with HTML tags and attributes so

00:27:32,129 --> 00:27:38,580
for example you can add your sky with an

00:27:35,460 --> 00:27:40,529
image reference or you can add rendering

00:27:38,580 --> 00:27:46,710
primitives such as boxes sphere

00:27:40,529 --> 00:27:50,929
cylinders etc by just defining positions

00:27:46,710 --> 00:27:56,879
with and other things so colors

00:27:50,929 --> 00:27:58,859
materials and you can add lights and the

00:27:56,879 --> 00:28:01,950
cool thing about a frame is it comes

00:27:58,859 --> 00:28:06,299
with web VR support so you have all the

00:28:01,950 --> 00:28:09,599
major headsets that are supported from

00:28:06,299 --> 00:28:14,519
the get-go which also means that you

00:28:09,599 --> 00:28:17,909
have controller support so I could look

00:28:14,519 --> 00:28:20,429
for example like this it's really boring

00:28:17,909 --> 00:28:22,649
though so what do we do with it I mean

00:28:20,429 --> 00:28:23,510
still the primitives it's not very

00:28:22,649 --> 00:28:27,570
exciting

00:28:23,510 --> 00:28:29,550
that's where the community comes in so

00:28:27,570 --> 00:28:31,530
lots of people from the community have

00:28:29,550 --> 00:28:35,670
been writing components custom

00:28:31,530 --> 00:28:37,230
components that work super well and here

00:28:35,670 --> 00:28:39,240
you can see how we we would we would

00:28:37,230 --> 00:28:44,850
load such a component so it's just

00:28:39,240 --> 00:28:46,680
basically loading a script source the

00:28:44,850 --> 00:28:49,830
first one is a frame that we have that

00:28:46,680 --> 00:28:51,870
we want to use then the second one is 3d

00:28:49,830 --> 00:28:54,930
i/o is the framework we are working on

00:28:51,870 --> 00:28:57,690
then we have some community examples

00:28:54,930 --> 00:29:00,480
like orbit controls which controls like

00:28:57,690 --> 00:29:04,050
an object that could go around something

00:29:00,480 --> 00:29:07,260
else and we have an environment

00:29:04,050 --> 00:29:08,610
component which is really cool I'll show

00:29:07,260 --> 00:29:11,160
you later what it looks like

00:29:08,610 --> 00:29:15,300
so this is how our scene would for

00:29:11,160 --> 00:29:21,180
example be defined we can use the custom

00:29:15,300 --> 00:29:23,370
a frame components to load objects or to

00:29:21,180 --> 00:29:25,830
define for example in the environment at

00:29:23,370 --> 00:29:29,850
the bottom we could define presets that

00:29:25,830 --> 00:29:32,160
we want to be using and really quickly

00:29:29,850 --> 00:29:34,350
with a few lines of code you get

00:29:32,160 --> 00:29:36,900
something like this you get a really

00:29:34,350 --> 00:29:40,380
nice scene very dreamy you could just

00:29:36,900 --> 00:29:44,400
lay down and put your VR headset on and

00:29:40,380 --> 00:29:48,570
enjoy it and I have to say even if you

00:29:44,400 --> 00:29:51,270
are not familiar with 3d modeling you

00:29:48,570 --> 00:29:53,430
don't have to it's it's really a big

00:29:51,270 --> 00:29:58,310
overhead to get started with modeling

00:29:53,430 --> 00:30:01,770
it's like I know that from my from my

00:29:58,310 --> 00:30:04,650
learning it it's really a hard and steep

00:30:01,770 --> 00:30:06,690
learning curve so this is way more fun

00:30:04,650 --> 00:30:07,920
to get started and then you can see if

00:30:06,690 --> 00:30:11,070
that's something you would like to

00:30:07,920 --> 00:30:13,500
integrate in your product or if you want

00:30:11,070 --> 00:30:18,090
to just get started and try to work with

00:30:13,500 --> 00:30:20,910
it which leads me to the problem of

00:30:18,090 --> 00:30:21,510
where do I get my content from what do I

00:30:20,910 --> 00:30:23,940
do

00:30:21,510 --> 00:30:26,160
I don't I can't do 3d modeling I don't

00:30:23,940 --> 00:30:29,220
know where to get proper resources from

00:30:26,160 --> 00:30:32,580
and also I don't know what is actually

00:30:29,220 --> 00:30:35,010
good 3d content I don't know what makes

00:30:32,580 --> 00:30:37,380
a good 3d asset what's me what makes a

00:30:35,010 --> 00:30:40,289
bad one

00:30:37,380 --> 00:30:43,649
and there we have a few things that you

00:30:40,289 --> 00:30:46,259
can do so for example this is a frames

00:30:43,649 --> 00:30:49,230
inspector which is also something that I

00:30:46,259 --> 00:30:51,000
can really highly recommend comes with a

00:30:49,230 --> 00:30:53,940
frame so you actually have a 3d

00:30:51,000 --> 00:30:58,169
inspector where you can place your

00:30:53,940 --> 00:31:01,259
objects and one of my co-workers was

00:30:58,169 --> 00:31:02,899
writing this plugin where I can load 3d

00:31:01,259 --> 00:31:06,450
models from google polly

00:31:02,899 --> 00:31:08,850
or from our from our library and

00:31:06,450 --> 00:31:11,190
hopefully later on much more curated

00:31:08,850 --> 00:31:13,620
content and you can just drag and drop

00:31:11,190 --> 00:31:17,039
them in your scene and then copy the

00:31:13,620 --> 00:31:18,919
attributes into your HTML because it's

00:31:17,039 --> 00:31:23,279
HTML based you can also just use

00:31:18,919 --> 00:31:26,009
JavaScript to animate any of the of the

00:31:23,279 --> 00:31:30,080
attributes you want and as you see here

00:31:26,009 --> 00:31:33,690
you can even just define an animation

00:31:30,080 --> 00:31:36,870
for line you could just add an animation

00:31:33,690 --> 00:31:38,399
to any entity in your scene without any

00:31:36,870 --> 00:31:42,360
JavaScript sorry

00:31:38,399 --> 00:31:44,700
script folks you don't need it but you

00:31:42,360 --> 00:31:48,149
can make it much cooler because you can

00:31:44,700 --> 00:31:53,669
then make interactive things so I would

00:31:48,149 --> 00:31:56,190
like to wrap this up take away for

00:31:53,669 --> 00:31:59,009
everybody that gets started is your

00:31:56,190 --> 00:32:02,639
multi models matter your materials

00:31:59,009 --> 00:32:04,919
matter a lot because if you don't define

00:32:02,639 --> 00:32:08,279
your materials properly you're gonna

00:32:04,919 --> 00:32:11,309
lose lots and lots of quality of your

00:32:08,279 --> 00:32:14,340
product so your scene might look really

00:32:11,309 --> 00:32:16,139
planned it might look gray it does not

00:32:14,340 --> 00:32:17,269
get interesting when you interact with

00:32:16,139 --> 00:32:21,450
lights

00:32:17,269 --> 00:32:25,500
so please please remember this and also

00:32:21,450 --> 00:32:27,659
your lighting matters so if you define

00:32:25,500 --> 00:32:31,230
your lights wrong in your scene it's

00:32:27,659 --> 00:32:32,519
gonna look really flat and sadly I don't

00:32:31,230 --> 00:32:33,840
have the time to make a little

00:32:32,519 --> 00:32:36,509
introduction of that but if you're

00:32:33,840 --> 00:32:39,990
curious just come to me later and we can

00:32:36,509 --> 00:32:42,750
have a look at it also ray tracing is

00:32:39,990 --> 00:32:46,320
really cool I really love doing ray

00:32:42,750 --> 00:32:51,130
tracing but it is still not ready I

00:32:46,320 --> 00:32:54,700
think to be used in real time

00:32:51,130 --> 00:32:58,620
however you can use the you can use ray

00:32:54,700 --> 00:33:01,690
tracing engines to pre-compute

00:32:58,620 --> 00:33:04,090
realistic lights so if you remember the

00:33:01,690 --> 00:33:07,030
scene from the beginning there was

00:33:04,090 --> 00:33:09,940
actually a light map baked into the

00:33:07,030 --> 00:33:12,190
model which means we have textures that

00:33:09,940 --> 00:33:15,430
contain the light information from a ray

00:33:12,190 --> 00:33:18,460
tracing engine that has been doing this

00:33:15,430 --> 00:33:20,590
computation for like an hour or so and

00:33:18,460 --> 00:33:22,330
that's something that we also offer in

00:33:20,590 --> 00:33:25,090
our product that's something I am

00:33:22,330 --> 00:33:27,820
working on is that we take a generic 3d

00:33:25,090 --> 00:33:30,220
model and we take the generic light

00:33:27,820 --> 00:33:33,340
setup that you choose and we basically

00:33:30,220 --> 00:33:35,520
bake it in your scene statically these

00:33:33,340 --> 00:33:38,920
are techniques from computer

00:33:35,520 --> 00:33:40,570
sorry game development that are really

00:33:38,920 --> 00:33:42,880
going to be helpful for the web they are

00:33:40,570 --> 00:33:45,910
seen and for everybody who works with

00:33:42,880 --> 00:33:49,840
web we are so for that thank you very

00:33:45,910 --> 00:33:52,630
much for your attention and echidnas are

00:33:49,840 --> 00:33:54,730
awesome there are my new favorite

00:33:52,630 --> 00:33:56,900
animals thank you so much for having me

00:33:54,730 --> 00:34:00,689
and this is how to get started

00:33:56,900 --> 00:34:00,689
[Applause]

00:34:07,220 --> 00:34:09,280

YouTube URL: https://www.youtube.com/watch?v=4W06d_kcafE


