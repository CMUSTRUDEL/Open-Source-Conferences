Title: Why WebAssembly - Miguel Useche (English translated audio)
Publication date: 2021-02-03
Playlist: JsConf Mexico 2020  virtual edition
Description: 
	Learn why to use WebAssembly and how to interact with Javascript to bring all kinds of applications to the web at near-native speeds.
Captions: 
	00:00:04,080 --> 00:00:09,120
this is a very small talk

00:00:06,000 --> 00:00:11,759
why use a web assembly

00:00:09,120 --> 00:00:12,559
if you don't know me my name is miguel

00:00:11,759 --> 00:00:16,000
she already

00:00:12,559 --> 00:00:17,119
introduced me i'm independent the web

00:00:16,000 --> 00:00:19,840
developer

00:00:17,119 --> 00:00:20,880
i mean from venezuela but i'm living in

00:00:19,840 --> 00:00:23,199
colombia

00:00:20,880 --> 00:00:26,080
i was a university professor and i've

00:00:23,199 --> 00:00:28,640
been in a lot of communities and i

00:00:26,080 --> 00:00:30,800
been in the mozilla one and that's why

00:00:28,640 --> 00:00:34,559
i'm going to talk about this topic

00:00:30,800 --> 00:00:37,520
today so

00:00:34,559 --> 00:00:39,840
since the beginning of the web the

00:00:37,520 --> 00:00:42,239
explanation

00:00:39,840 --> 00:00:43,360
i'm having two problems since the

00:00:42,239 --> 00:00:45,920
beginning the first

00:00:43,360 --> 00:00:47,200
one is if you want to have this

00:00:45,920 --> 00:00:50,320
application or

00:00:47,200 --> 00:00:55,039
interaction with a user there's only

00:00:50,320 --> 00:00:58,160
one with javascript if you want to do

00:00:55,039 --> 00:01:01,359
some app or some dynamic

00:00:58,160 --> 00:01:03,440
web page you need to be with javascript

00:01:01,359 --> 00:01:05,280
and that was the only way to do it with

00:01:03,440 --> 00:01:07,920
that type of application

00:01:05,280 --> 00:01:09,040
but even though javascript is a very

00:01:07,920 --> 00:01:12,000
good language have

00:01:09,040 --> 00:01:14,159
limitation so therefore the web was

00:01:12,000 --> 00:01:14,880
limited with all the possibilities of

00:01:14,159 --> 00:01:18,640
java

00:01:14,880 --> 00:01:22,799
script and these had problems

00:01:18,640 --> 00:01:26,799
another problem was uh performance

00:01:22,799 --> 00:01:30,320
uh due to the nature and the language

00:01:26,799 --> 00:01:32,479
this language was not designed to be

00:01:30,320 --> 00:01:35,680
very fast but to be

00:01:32,479 --> 00:01:38,720
to the performance so that's why

00:01:35,680 --> 00:01:42,240
the performance is not excellent but

00:01:38,720 --> 00:01:45,439
the ones that develop browsers as

00:01:42,240 --> 00:01:46,159
edge firefox google they have more and

00:01:45,439 --> 00:01:49,680
more tasks

00:01:46,159 --> 00:01:53,439
so this can run faster but the

00:01:49,680 --> 00:01:54,159
downside of this is to optimize the

00:01:53,439 --> 00:01:57,439
platforms

00:01:54,159 --> 00:02:01,600
they are limits for example native

00:01:57,439 --> 00:02:05,280
speed we cannot go to as fast as that

00:02:01,600 --> 00:02:08,319
why because when the browsers execute

00:02:05,280 --> 00:02:08,959
javascript is something whether you are

00:02:08,319 --> 00:02:10,800
talking

00:02:08,959 --> 00:02:12,319
with another language that you don't

00:02:10,800 --> 00:02:15,360
know and you have an

00:02:12,319 --> 00:02:16,480
interpreter in the middle so you know

00:02:15,360 --> 00:02:19,520
how this works

00:02:16,480 --> 00:02:19,840
that you talk the interpreter receive

00:02:19,520 --> 00:02:21,520
the

00:02:19,840 --> 00:02:23,120
information and then translate it or

00:02:21,520 --> 00:02:25,760
interpret in the other

00:02:23,120 --> 00:02:27,760
in the other language and this is kind

00:02:25,760 --> 00:02:28,480
of slow because there's someone in the

00:02:27,760 --> 00:02:31,599
middle

00:02:28,480 --> 00:02:36,560
and it's about seconds behind

00:02:31,599 --> 00:02:39,440
so as javascript this code

00:02:36,560 --> 00:02:41,360
is it is the same with the interpreter

00:02:39,440 --> 00:02:42,400
the interpreter read it and then goes to

00:02:41,360 --> 00:02:45,360
the other side

00:02:42,400 --> 00:02:48,000
so it's a slower process so then let's

00:02:45,360 --> 00:02:51,920
see some examples

00:02:48,000 --> 00:02:54,480
so most common is for example

00:02:51,920 --> 00:02:56,400
in this addition is something in

00:02:54,480 --> 00:02:56,879
javascript is what we are looking in

00:02:56,400 --> 00:02:59,920
this

00:02:56,879 --> 00:03:03,360
slide in this screen and we have

00:02:59,920 --> 00:03:06,560
variables a plus b and

00:03:03,360 --> 00:03:12,080
you can say well this is simple and

00:03:06,560 --> 00:03:12,080
also we need to instruct our cpu

00:03:12,879 --> 00:03:17,360
so in javascript this is not the case

00:03:17,599 --> 00:03:24,000
and this is a document that defined the

00:03:20,080 --> 00:03:24,000
structure or how this must function

00:03:25,200 --> 00:03:29,599
and this is 6.1 and this is composed of

00:03:29,200 --> 00:03:32,959
seven

00:03:29,599 --> 00:03:35,519
steps so if somebody wants to do

00:03:32,959 --> 00:03:36,319
something simple we just command it's a

00:03:35,519 --> 00:03:39,599
00:03:36,319 --> 00:03:42,959
because with javascript we use the

00:03:39,599 --> 00:03:46,080
plus operator not only for addition but

00:03:42,959 --> 00:03:49,840
images or text so

00:03:46,080 --> 00:03:52,400
when two variables are united with the

00:03:49,840 --> 00:03:54,080
sign of addition you need to check the

00:03:52,400 --> 00:03:57,120
variables

00:03:54,080 --> 00:03:59,760
and then the second one verify

00:03:57,120 --> 00:04:00,640
that combination in order to know if the

00:03:59,760 --> 00:04:03,680
addition

00:04:00,640 --> 00:04:04,720
of two numbers or to concatenate and in

00:04:03,680 --> 00:04:07,040
a cycle

00:04:04,720 --> 00:04:08,239
we are going to see that this unique

00:04:07,040 --> 00:04:11,200
instruction

00:04:08,239 --> 00:04:12,159
is from one or two or in a sequel it

00:04:11,200 --> 00:04:15,599
will be one

00:04:12,159 --> 00:04:18,799
800 slower so that's why it's not

00:04:15,599 --> 00:04:22,479
as fast as other languages there are

00:04:18,799 --> 00:04:25,919
other things that for java is normal for

00:04:22,479 --> 00:04:31,440
for other languages is odd

00:04:25,919 --> 00:04:31,440
for example in javascript is this uh

00:04:31,840 --> 00:04:38,560
change or this is a is zero but

00:04:34,880 --> 00:04:39,759
why if this type is a like a number is

00:04:38,560 --> 00:04:43,919
equal to zero

00:04:39,759 --> 00:04:47,199
it's some problems or

00:04:43,919 --> 00:04:51,840
objects or variables

00:04:47,199 --> 00:04:55,040
in this type of empty strings

00:04:51,840 --> 00:04:58,160
and these are

00:04:55,040 --> 00:05:01,280
these details that are very specific

00:04:58,160 --> 00:05:01,919
with javascript but how can we solve

00:05:01,280 --> 00:05:05,120
this

00:05:01,919 --> 00:05:09,440
it's simple because we have web

00:05:05,120 --> 00:05:12,479
assembly it's a way to embed

00:05:09,440 --> 00:05:16,160
with browsers in common

00:05:12,479 --> 00:05:19,919
a way to execute in your browser

00:05:16,160 --> 00:05:22,840
or platform this code

00:05:19,919 --> 00:05:24,000
in different language different than

00:05:22,840 --> 00:05:27,120
javascript

00:05:24,000 --> 00:05:28,880
so if you have a piece of code

00:05:27,120 --> 00:05:31,199
you have the assembly but you can

00:05:28,880 --> 00:05:34,400
execute in firefox chrome or

00:05:31,199 --> 00:05:37,280
any other platform that support

00:05:34,400 --> 00:05:38,639
web assembly and the advantage is a

00:05:37,280 --> 00:05:41,919
binary

00:05:38,639 --> 00:05:44,639
format it

00:05:41,919 --> 00:05:45,600
does not substitute javascript because

00:05:44,639 --> 00:05:48,080
many people

00:05:45,600 --> 00:05:49,919
think that is one or the other no it's

00:05:48,080 --> 00:05:53,039
to complement

00:05:49,919 --> 00:05:53,759
so there are two puzzle pieces that

00:05:53,039 --> 00:05:56,319
complement

00:05:53,759 --> 00:05:56,880
each other and they support each other

00:05:56,319 --> 00:05:59,919
they have

00:05:56,880 --> 00:06:01,120
interface through languages so i can do

00:05:59,919 --> 00:06:05,280
my explanation

00:06:01,120 --> 00:06:06,080
in rust and then my code in javascript

00:06:05,280 --> 00:06:09,120
and then go

00:06:06,080 --> 00:06:11,680
and vice versa without a problem so if

00:06:09,120 --> 00:06:15,280
they can communicate each other so there

00:06:11,680 --> 00:06:18,479
is a total integration with web api

00:06:15,280 --> 00:06:21,840
and this means that we gl

00:06:18,479 --> 00:06:25,280
from automatic and i use the app

00:06:21,840 --> 00:06:26,319
of webgl or if you are working with the

00:06:25,280 --> 00:06:29,199
audio

00:06:26,319 --> 00:06:29,840
you can use service work everything that

00:06:29,199 --> 00:06:34,319
you do

00:06:29,840 --> 00:06:36,800
in the web you can do it

00:06:34,319 --> 00:06:39,759
it supports a different type of

00:06:36,800 --> 00:06:42,080
instruction and variables

00:06:39,759 --> 00:06:43,280
that javascript doesn't have some

00:06:42,080 --> 00:06:46,639
operation

00:06:43,280 --> 00:06:46,639
like smit

00:06:46,800 --> 00:06:49,919
and this is using in the video so with

00:06:49,440 --> 00:06:52,400
this

00:06:49,919 --> 00:06:56,080
same instruction you can apply the same

00:06:52,400 --> 00:06:56,080
code with a lot of data

00:06:57,199 --> 00:07:03,280
it's very easy to compile and

00:07:00,319 --> 00:07:03,919
the web assembly you can listen and

00:07:03,280 --> 00:07:07,360
there is

00:07:03,919 --> 00:07:07,360
retro compatibility

00:07:11,039 --> 00:07:14,639
and with this new version and review

00:07:13,120 --> 00:07:17,919
soon without a problem

00:07:14,639 --> 00:07:19,120
and also works with one byte memory

00:07:17,919 --> 00:07:23,039
blocks

00:07:19,120 --> 00:07:25,520
and with the browsers is like two people

00:07:23,039 --> 00:07:26,560
are talking the same language for

00:07:25,520 --> 00:07:29,120
example when

00:07:26,560 --> 00:07:30,960
somebody from mexico and somebody from

00:07:29,120 --> 00:07:34,000
venezuela

00:07:30,960 --> 00:07:35,919
and we can understand pretty well there

00:07:34,000 --> 00:07:39,680
are some details that

00:07:35,919 --> 00:07:42,720
mexican can say the mexican can say this

00:07:39,680 --> 00:07:47,360
this food is very cool well

00:07:42,720 --> 00:07:51,039
for us maybe cool we use a different

00:07:47,360 --> 00:07:52,080
different word but it can add a little

00:07:51,039 --> 00:07:56,160
bit time but it's

00:07:52,080 --> 00:08:00,240
faster comparing with the interpreter

00:07:56,160 --> 00:08:00,960
example so web assembly is in a binary

00:08:00,240 --> 00:08:04,560
format

00:08:00,960 --> 00:08:07,680
and image code so javascript

00:08:04,560 --> 00:08:08,879
reads that executed and that process is

00:08:07,680 --> 00:08:13,840
faster

00:08:08,879 --> 00:08:13,840
compared with the other one

00:08:14,160 --> 00:08:18,639
and currently this is supported with the

00:08:17,120 --> 00:08:21,199
main browsers

00:08:18,639 --> 00:08:22,400
it's one of the few technologies that

00:08:21,199 --> 00:08:26,240
decided

00:08:22,400 --> 00:08:29,840
uh to bet and work in this

00:08:26,240 --> 00:08:33,200
so with this you can use it in

00:08:29,840 --> 00:08:35,839
all the formats then let's

00:08:33,200 --> 00:08:36,959
a binary format is this one that we are

00:08:35,839 --> 00:08:39,360
going to use

00:08:36,959 --> 00:08:40,080
you download and execute it in the

00:08:39,360 --> 00:08:43,519
javascript

00:08:40,080 --> 00:08:44,399
machine the first four bytes will have

00:08:43,519 --> 00:08:48,160
the binary

00:08:44,399 --> 00:08:50,640
and then another portion to

00:08:48,160 --> 00:08:51,600
the code space another one in the

00:08:50,640 --> 00:08:54,640
variables

00:08:51,600 --> 00:08:57,920
and it's an executable piece

00:08:54,640 --> 00:09:00,240
this is another format called wat

00:08:57,920 --> 00:09:01,760
and this is a text format and it's a

00:09:00,240 --> 00:09:04,560
low-level

00:09:01,760 --> 00:09:06,320
program and you can use it in an

00:09:04,560 --> 00:09:08,560
environment that is very

00:09:06,320 --> 00:09:10,000
security if you don't trust the

00:09:08,560 --> 00:09:13,600
compilators

00:09:10,000 --> 00:09:16,880
you can use it in this one so how can we

00:09:13,600 --> 00:09:19,040
create this there are some language that

00:09:16,880 --> 00:09:22,160
are supported with this

00:09:19,040 --> 00:09:25,839
with a compiler and i will create

00:09:22,160 --> 00:09:28,240
the archives or the or the files in rust

00:09:25,839 --> 00:09:29,600
is like this like this example we have

00:09:28,240 --> 00:09:32,560
the wasp

00:09:29,600 --> 00:09:33,600
and we can transform the rows to code to

00:09:32,560 --> 00:09:36,399
the other one

00:09:33,600 --> 00:09:37,760
another one is with m scripting is

00:09:36,399 --> 00:09:41,440
another one that is called

00:09:37,760 --> 00:09:42,160
lb llbm and then we have this virtual

00:09:41,440 --> 00:09:46,080
machine

00:09:42,160 --> 00:09:46,080
machine and work like this

00:09:46,399 --> 00:09:50,320
with m screen we can have with different

00:09:49,760 --> 00:09:53,680
tools

00:09:50,320 --> 00:09:53,680
and then create this one

00:09:55,680 --> 00:10:01,519
and we just need one command with this

00:09:59,360 --> 00:10:03,200
and there's another project external

00:10:01,519 --> 00:10:05,120
project with java

00:10:03,200 --> 00:10:07,600
and we can change from one to the other

00:10:05,120 --> 00:10:09,839
so once you compile through this method

00:10:07,600 --> 00:10:13,680
you will find

00:10:09,839 --> 00:10:16,720
a binary file that is already

00:10:13,680 --> 00:10:20,480
compiled and then the javascript

00:10:16,720 --> 00:10:24,720
file and then upload this code.js

00:10:20,480 --> 00:10:27,120
in model and from there i can import it

00:10:24,720 --> 00:10:29,200
and use it as any other model in

00:10:27,120 --> 00:10:32,800
javascript

00:10:29,200 --> 00:10:37,440
and the third file is the html

00:10:32,800 --> 00:10:39,680
web or page and execute everything

00:10:37,440 --> 00:10:40,800
the other is you can interact with the

00:10:39,680 --> 00:10:44,240
code

00:10:40,800 --> 00:10:46,880
you can create a piece of code with rust

00:10:44,240 --> 00:10:47,839
and then other function and vice versa

00:10:46,880 --> 00:10:50,880
and the process

00:10:47,839 --> 00:10:55,680
is like this one in c

00:10:50,880 --> 00:10:59,279
is like a library and then the

00:10:55,680 --> 00:11:02,880
external library and

00:10:59,279 --> 00:11:05,760
then javascript import the model

00:11:02,880 --> 00:11:06,399
called the function and you can execute

00:11:05,760 --> 00:11:09,839
the code

00:11:06,399 --> 00:11:13,600
very easy and vice versa there are some

00:11:09,839 --> 00:11:17,200
function or library

00:11:13,600 --> 00:11:20,399
where you can execute that javascript

00:11:17,200 --> 00:11:24,079
code without any issue

00:11:20,399 --> 00:11:24,079
and the rust is the same

00:11:24,480 --> 00:11:31,360
what can i do with in in the web

00:11:28,320 --> 00:11:35,040
we can create a high

00:11:31,360 --> 00:11:38,560
yield apps in the case of

00:11:35,040 --> 00:11:41,600
this is an example of a filter well

00:11:38,560 --> 00:11:45,120
during this pandemic we need to improve

00:11:41,600 --> 00:11:50,640
our aspect and we can create

00:11:45,120 --> 00:11:50,640
apps like snapshot like through filters

00:11:50,959 --> 00:11:57,920
we can use web assembly scan

00:11:54,240 --> 00:12:03,040
images and work faster

00:11:57,920 --> 00:12:05,440
so in filter is 200 up to 2000 faster

00:12:03,040 --> 00:12:08,000
with compared with javascript and you

00:12:05,440 --> 00:12:11,120
can replace

00:12:08,000 --> 00:12:15,200
for example wordpress the editing

00:12:11,120 --> 00:12:18,320
edit editing a part

00:12:15,200 --> 00:12:19,440
change it because the performance was

00:12:18,320 --> 00:12:24,399
better

00:12:19,440 --> 00:12:27,040
300 times one second in

00:12:24,399 --> 00:12:28,079
webassembly took five minutes with

00:12:27,040 --> 00:12:30,560
javascript

00:12:28,079 --> 00:12:31,920
so that's why if you need this a web

00:12:30,560 --> 00:12:35,200
assembly is perfect

00:12:31,920 --> 00:12:37,360
another example is we will keep what is

00:12:35,200 --> 00:12:37,360
this

00:12:37,440 --> 00:12:47,040
well you can see this demo i think this

00:12:40,880 --> 00:12:47,040
is reproducing and you can take notes

00:12:48,560 --> 00:12:57,440
this is an app

00:12:53,600 --> 00:13:00,720
but this is in c and instead of

00:12:57,440 --> 00:13:03,440
writing from zero you have the that

00:13:00,720 --> 00:13:04,720
input data and then transform it to a

00:13:03,440 --> 00:13:07,839
canvas

00:13:04,720 --> 00:13:08,399
google drive uses web assembly in order

00:13:07,839 --> 00:13:11,360
to

00:13:08,399 --> 00:13:12,160
execute this code another thing is to

00:13:11,360 --> 00:13:15,200
migrate

00:13:12,160 --> 00:13:18,880
app easier autocad

00:13:15,200 --> 00:13:23,360
migrate to web and what they did

00:13:18,880 --> 00:13:26,480
was this code of the 80s

00:13:23,360 --> 00:13:29,920
and we're using this code and

00:13:26,480 --> 00:13:33,680
is there in c plus plus

00:13:29,920 --> 00:13:36,320
and they have it to the web

00:13:33,680 --> 00:13:37,839
through web assembly it doesn't matter

00:13:36,320 --> 00:13:41,440
if the code was so

00:13:37,839 --> 00:13:45,040
old and they just did some

00:13:41,440 --> 00:13:48,160
steps like this with this new platform

00:13:45,040 --> 00:13:49,760
and not to rewrite it again we have this

00:13:48,160 --> 00:13:53,120
demo

00:13:49,760 --> 00:13:56,560
i save it in a 2

00:13:53,120 --> 00:13:59,970
14 2014 machine

00:13:56,560 --> 00:14:01,519
it was a very simple machine and we can

00:13:59,970 --> 00:14:04,560
[Music]

00:14:01,519 --> 00:14:05,760
see this video game maybe it's so simple

00:14:04,560 --> 00:14:10,000
or

00:14:05,760 --> 00:14:13,519
but when that

00:14:10,000 --> 00:14:16,880
video was developed it was advanced

00:14:13,519 --> 00:14:20,079
because executed doom in the web was

00:14:16,880 --> 00:14:22,800
a process is a wrote in c

00:14:20,079 --> 00:14:23,440
plus plus and transformed the code from

00:14:22,800 --> 00:14:26,720
one to

00:14:23,440 --> 00:14:28,639
the audio and the threads are

00:14:26,720 --> 00:14:31,279
transformed to websockets

00:14:28,639 --> 00:14:32,000
and a video that is already in a

00:14:31,279 --> 00:14:35,320
platform

00:14:32,000 --> 00:14:37,440
now can be in the web so these are the

00:14:35,320 --> 00:14:40,480
advantages a full stack

00:14:37,440 --> 00:14:44,320
in many language ros go

00:14:40,480 --> 00:14:46,800
java php and more and that's it

00:14:44,320 --> 00:14:48,959
and you can say goodbye to javascript

00:14:46,800 --> 00:14:51,279
well this is a joke of course we will

00:14:48,959 --> 00:14:54,480
never replace one to the other

00:14:51,279 --> 00:14:56,160
but don't wait to go and enter web

00:14:54,480 --> 00:15:00,240
assembly

00:14:56,160 --> 00:15:02,480
all this is in the web you can start

00:15:00,240 --> 00:15:03,279
writing the code and see how this is

00:15:02,480 --> 00:15:05,680
work

00:15:03,279 --> 00:15:06,959
and what this these are the links that i

00:15:05,680 --> 00:15:10,079
recommend

00:15:06,959 --> 00:15:13,839
through the browser and later on

00:15:10,079 --> 00:15:15,040
if you have these slides review it again

00:15:13,839 --> 00:15:17,920
and you can learn

00:15:15,040 --> 00:15:19,279
how can start with this wonderful

00:15:17,920 --> 00:15:22,000
technology thank you

00:15:19,279 --> 00:15:22,560
thank you for being here and hopefully

00:15:22,000 --> 00:15:25,680
you

00:15:22,560 --> 00:15:29,040
will start working with web assembly

00:15:25,680 --> 00:15:37,759
and finally participate in mozilla

00:15:29,040 --> 00:15:37,759

YouTube URL: https://www.youtube.com/watch?v=867Dwb-CcBA


