Title: DevTools, the CSS advocate in your browse - Chen Hui Jing
Publication date: 2021-02-01
Playlist: JsConf Mexico 2020  virtual edition
Description: 
	Spanish translated audio -- https://youtu.be/lNNKGooM4nY


This talk is about DevTools features that can help us understand whatâ€™s going on with existing CSS, and make it less intimidating to try out new CSS.
Captions: 
	00:00:04,080 --> 00:00:08,320
it's such a privilege to be part of this

00:00:06,160 --> 00:00:10,480
inaugural js conf mexico so i'd like to

00:00:08,320 --> 00:00:12,080
thank the organizers for having me

00:00:10,480 --> 00:00:14,240
now today i'll be speaking on a topic

00:00:12,080 --> 00:00:15,920
that i know may not be everybody's cup

00:00:14,240 --> 00:00:18,000
of tea and that's fine i don't expect

00:00:15,920 --> 00:00:18,320
everyone to fall in love with css after

00:00:18,000 --> 00:00:19,840
this

00:00:18,320 --> 00:00:21,520
but i do hope that you'll find some of

00:00:19,840 --> 00:00:23,359
the things i'll be sharing useful

00:00:21,520 --> 00:00:24,960
and hopefully it will also aid in your

00:00:23,359 --> 00:00:28,080
understanding of how modern

00:00:24,960 --> 00:00:28,640
css layouts work so let's get right into

00:00:28,080 --> 00:00:30,560
it

00:00:28,640 --> 00:00:32,239
the first thing i want to cover today is

00:00:30,560 --> 00:00:35,600
something called content

00:00:32,239 --> 00:00:38,079
based sizing so the concept of

00:00:35,600 --> 00:00:39,920
automatic sizing has always existed

00:00:38,079 --> 00:00:41,520
since the earliest days of the browser

00:00:39,920 --> 00:00:43,360
because browsers have always managed to

00:00:41,520 --> 00:00:45,600
figure out how much space content should

00:00:43,360 --> 00:00:48,160
take up without any intervention

00:00:45,600 --> 00:00:49,680
from us like the content would reflow

00:00:48,160 --> 00:00:50,480
without overlapping you didn't have to

00:00:49,680 --> 00:00:54,000
write anything

00:00:50,480 --> 00:00:57,440
special for it just part of the web

00:00:54,000 --> 00:01:00,079
what we have in a relatively recent css

00:00:57,440 --> 00:01:01,199
specification known as the css intrinsic

00:01:00,079 --> 00:01:04,559
and extrinsic

00:01:01,199 --> 00:01:07,680
sizing module level 3 is

00:01:04,559 --> 00:01:11,200
the height and with css properties now

00:01:07,680 --> 00:01:13,840
can take three additional keyword values

00:01:11,200 --> 00:01:15,759
which are min content max content and

00:01:13,840 --> 00:01:16,479
fit content so the keyword here is

00:01:15,759 --> 00:01:19,840
content

00:01:16,479 --> 00:01:22,000
so this these widths

00:01:19,840 --> 00:01:23,360
these uh keyword values actually give

00:01:22,000 --> 00:01:26,640
authors the option

00:01:23,360 --> 00:01:27,520
of assigning automatic widths to the

00:01:26,640 --> 00:01:30,320
elements

00:01:27,520 --> 00:01:31,119
on that on the page so let's go through

00:01:30,320 --> 00:01:33,280
what

00:01:31,119 --> 00:01:34,159
this means right so the first thing

00:01:33,280 --> 00:01:37,280
we're going to cover

00:01:34,159 --> 00:01:40,720
is min content min content

00:01:37,280 --> 00:01:44,399
is the smallest size a box could take

00:01:40,720 --> 00:01:48,240
that doesn't lead to overflow

00:01:44,399 --> 00:01:50,560
so if there's any inline content

00:01:48,240 --> 00:01:51,920
it instead of overflowing it will break

00:01:50,560 --> 00:01:54,399
into multiple

00:01:51,920 --> 00:01:56,399
lines now line breaking might be

00:01:54,399 --> 00:01:57,040
something most of us don't give a second

00:01:56,399 --> 00:01:59,360
thought to

00:01:57,040 --> 00:02:00,479
but there is a lot of nuance depending

00:01:59,360 --> 00:02:03,759
on the language

00:02:00,479 --> 00:02:06,799
being used for many languages like say

00:02:03,759 --> 00:02:07,600
english or mexican line breaks tend to

00:02:06,799 --> 00:02:09,679
occur at

00:02:07,600 --> 00:02:10,800
word boundaries where spaces or

00:02:09,679 --> 00:02:14,080
punctuation

00:02:10,800 --> 00:02:16,720
are used to explicitly separate words

00:02:14,080 --> 00:02:17,440
and browsers will not break words by

00:02:16,720 --> 00:02:20,239
default

00:02:17,440 --> 00:02:21,280
so in this first example here the word

00:02:20,239 --> 00:02:24,000
content

00:02:21,280 --> 00:02:24,720
plus the full stop at the end is treated

00:02:24,000 --> 00:02:27,360
as a single

00:02:24,720 --> 00:02:28,560
unbreakable entity and that ends up

00:02:27,360 --> 00:02:32,480
being the width

00:02:28,560 --> 00:02:35,360
of this first box in other languages

00:02:32,480 --> 00:02:36,080
though specifically for the east asian

00:02:35,360 --> 00:02:39,680
languages

00:02:36,080 --> 00:02:42,720
like chinese or japanese that utilize

00:02:39,680 --> 00:02:45,519
han characters the break is per

00:02:42,720 --> 00:02:46,319
character most of the time but not

00:02:45,519 --> 00:02:48,000
always

00:02:46,319 --> 00:02:50,000
because there are rules about certain

00:02:48,000 --> 00:02:52,959
characters that are not allowed to start

00:02:50,000 --> 00:02:53,840
or end a line now east asian scripts

00:02:52,959 --> 00:02:58,400
also use

00:02:53,840 --> 00:03:02,640
this thing called full width punctuation

00:02:58,400 --> 00:03:02,640
so what this means is that

00:03:03,599 --> 00:03:09,599
if i add a full width say comma

00:03:07,040 --> 00:03:09,599
right here

00:03:11,200 --> 00:03:17,280
this box is now two characters wide

00:03:14,959 --> 00:03:18,400
instead of one because in east asian

00:03:17,280 --> 00:03:20,800
languages

00:03:18,400 --> 00:03:22,159
the punctuation takes up the full width

00:03:20,800 --> 00:03:25,200
of a character

00:03:22,159 --> 00:03:26,959
now we also have some other southeast

00:03:25,200 --> 00:03:29,040
asian scripts for example like

00:03:26,959 --> 00:03:30,000
thai which are written without any

00:03:29,040 --> 00:03:31,920
spaces

00:03:30,000 --> 00:03:33,040
between the words so the text can be

00:03:31,920 --> 00:03:36,080
wrapped at

00:03:33,040 --> 00:03:37,680
syllable boundaries in addition to word

00:03:36,080 --> 00:03:40,080
boundaries

00:03:37,680 --> 00:03:40,720
so before i talk about the buy box let's

00:03:40,080 --> 00:03:43,599
go

00:03:40,720 --> 00:03:45,519
into the second keyword value which is

00:03:43,599 --> 00:03:46,640
max content and it'll make things easier

00:03:45,519 --> 00:03:48,799
to explain

00:03:46,640 --> 00:03:50,000
max content is kind of like the opposite

00:03:48,799 --> 00:03:52,400
of mint content where

00:03:50,000 --> 00:03:53,519
it is the boxes ideal size in a given

00:03:52,400 --> 00:03:55,519
axis

00:03:53,519 --> 00:03:56,959
if there's like infinite space like if

00:03:55,519 --> 00:03:59,599
there's lots of space

00:03:56,959 --> 00:04:00,480
that's the size of the box that can fit

00:03:59,599 --> 00:04:03,200
the content

00:04:00,480 --> 00:04:05,439
perfectly so content just takes up as

00:04:03,200 --> 00:04:06,159
much space as required to lay itself out

00:04:05,439 --> 00:04:11,439
on one

00:04:06,159 --> 00:04:11,439
single line so for the thigh example

00:04:11,599 --> 00:04:15,439
if you don't read thai like i don't read

00:04:13,760 --> 00:04:16,239
thai i wouldn't know where the word

00:04:15,439 --> 00:04:19,280
breaks

00:04:16,239 --> 00:04:21,040
what happened but the

00:04:19,280 --> 00:04:22,800
word that is longest here is this word

00:04:21,040 --> 00:04:25,040
called prayok

00:04:22,800 --> 00:04:26,639
and that is where the word broke in the

00:04:25,040 --> 00:04:29,120
min content box

00:04:26,639 --> 00:04:30,560
and that's why that's the size of the

00:04:29,120 --> 00:04:33,759
mint content box

00:04:30,560 --> 00:04:35,440
but in a max content situation everyone

00:04:33,759 --> 00:04:37,120
is a single line that's the amount of

00:04:35,440 --> 00:04:39,360
space that's gonna take up

00:04:37,120 --> 00:04:40,800
and that's how max content looks like

00:04:39,360 --> 00:04:43,120
now there's a third value

00:04:40,800 --> 00:04:44,720
fit content unfortunately this is not a

00:04:43,120 --> 00:04:46,800
supported value

00:04:44,720 --> 00:04:48,800
right now but all of these three

00:04:46,800 --> 00:04:50,320
keywords i just mentioned are supported

00:04:48,800 --> 00:04:52,240
when used in the context

00:04:50,320 --> 00:04:54,160
of a grid formatting layout so let's

00:04:52,240 --> 00:04:55,919
look at this grid

00:04:54,160 --> 00:04:59,440
here i'll highlight it you can see i'm

00:04:55,919 --> 00:04:59,440
using display grid to do it

00:04:59,840 --> 00:05:03,680
so fit content it's not like a fixed

00:05:02,720 --> 00:05:07,440
value

00:05:03,680 --> 00:05:10,000
compared to main content or max content

00:05:07,440 --> 00:05:11,280
it is actually a range right it is a

00:05:10,000 --> 00:05:14,400
range between the min

00:05:11,280 --> 00:05:15,919
content size and the max content size of

00:05:14,400 --> 00:05:20,560
a run of text

00:05:15,919 --> 00:05:22,000
um it could also be a length percentage

00:05:20,560 --> 00:05:24,560
because if you look at the syntax

00:05:22,000 --> 00:05:25,840
it's actually like a function so you can

00:05:24,560 --> 00:05:28,960
actually add a value

00:05:25,840 --> 00:05:31,039
inside the parentheses this is pretty

00:05:28,960 --> 00:05:33,520
hard to explain in words so i'm

00:05:31,039 --> 00:05:35,039
hoping that the dev tools can help me in

00:05:33,520 --> 00:05:37,120
this explanation so this

00:05:35,039 --> 00:05:39,919
particular example here we can see three

00:05:37,120 --> 00:05:43,199
columns that are sized with min content

00:05:39,919 --> 00:05:45,600
max content and fit content respectively

00:05:43,199 --> 00:05:46,880
so now if we look at this max content

00:05:45,600 --> 00:05:50,840
run of text

00:05:46,880 --> 00:05:53,440
it is about

00:05:50,840 --> 00:05:56,560
480 pixels

00:05:53,440 --> 00:05:57,600
now when i resize the browser the fit

00:05:56,560 --> 00:06:01,600
content box

00:05:57,600 --> 00:06:04,840
will shrink to a minimum

00:06:01,600 --> 00:06:08,080
size that is equal to min

00:06:04,840 --> 00:06:10,720
content but if there's a lot of space

00:06:08,080 --> 00:06:15,440
i'm gonna expand the browser

00:06:10,720 --> 00:06:19,520
it's gonna keep growing until it hits

00:06:15,440 --> 00:06:22,639
300 pixels which is the value

00:06:19,520 --> 00:06:25,440
that i've put inside the parentheses

00:06:22,639 --> 00:06:28,080
if you look at the code i put a value of

00:06:25,440 --> 00:06:29,120
fit content 300 pixels for that last

00:06:28,080 --> 00:06:32,080
column

00:06:29,120 --> 00:06:32,800
and that's why it stops growing at 300.

00:06:32,080 --> 00:06:35,840
now say

00:06:32,800 --> 00:06:37,120
if i change this 300 value to something

00:06:35,840 --> 00:06:40,720
greater

00:06:37,120 --> 00:06:42,000
than 482 because in in case you don't

00:06:40,720 --> 00:06:44,400
read 100 characters

00:06:42,000 --> 00:06:45,120
all three columns have exactly the same

00:06:44,400 --> 00:06:49,039
run of text

00:06:45,120 --> 00:06:52,160
you change this to 500 so 500

00:06:49,039 --> 00:06:56,479
is longer than the max content

00:06:52,160 --> 00:06:59,280
of the text but if i keep expanding

00:06:56,479 --> 00:07:00,479
the browser you'll notice that it

00:06:59,280 --> 00:07:02,319
doesn't hit

00:07:00,479 --> 00:07:03,599
the value of 500 that i put in the

00:07:02,319 --> 00:07:06,479
parentheses it will

00:07:03,599 --> 00:07:07,440
stop and the max content width so that's

00:07:06,479 --> 00:07:10,560
how fit content

00:07:07,440 --> 00:07:14,160
works it is the

00:07:10,560 --> 00:07:16,639
range between the min content size and

00:07:14,160 --> 00:07:18,160
either the max content size or the

00:07:16,639 --> 00:07:21,280
length percentage defined

00:07:18,160 --> 00:07:22,800
within the parentheses

00:07:21,280 --> 00:07:24,560
so now that we've got these basics

00:07:22,800 --> 00:07:27,199
covered i think we're ready

00:07:24,560 --> 00:07:28,840
to move on to the next section which is

00:07:27,199 --> 00:07:31,199
about

00:07:28,840 --> 00:07:33,039
flexbox now flexbox was the first layout

00:07:31,199 --> 00:07:35,440
model that was designed specifically

00:07:33,039 --> 00:07:37,039
for building web layouts and it is a lot

00:07:35,440 --> 00:07:37,840
more powerful than the previous

00:07:37,039 --> 00:07:40,560
techniques

00:07:37,840 --> 00:07:42,960
that we've had flexbox allows the

00:07:40,560 --> 00:07:46,080
browser to take over sizing based

00:07:42,960 --> 00:07:48,879
on the amount of available space

00:07:46,080 --> 00:07:49,360
so this can be quite confusing at first

00:07:48,879 --> 00:07:52,160
because the

00:07:49,360 --> 00:07:53,360
end result may not be what you

00:07:52,160 --> 00:07:57,199
explicitly

00:07:53,360 --> 00:07:58,160
said for now firefox is the only browser

00:07:57,199 --> 00:08:00,560
with a flexbox

00:07:58,160 --> 00:08:01,280
inspector so let's take a look at this

00:08:00,560 --> 00:08:04,639
right

00:08:01,280 --> 00:08:06,080
so i'm using firefox right now if you go

00:08:04,639 --> 00:08:10,000
over to the layout tab

00:08:06,080 --> 00:08:11,199
you will see that there is a flexbox

00:08:10,000 --> 00:08:12,879
option

00:08:11,199 --> 00:08:15,520
and so i'm just going to highlight my

00:08:12,879 --> 00:08:17,120
first example here

00:08:15,520 --> 00:08:19,360
in the inspector you can either choose

00:08:17,120 --> 00:08:22,639
to activate this tab

00:08:19,360 --> 00:08:25,599
or you could have chosen to toggle it

00:08:22,639 --> 00:08:26,879
either way is fine but when the overlay

00:08:25,599 --> 00:08:29,759
is toggled

00:08:26,879 --> 00:08:31,120
what you can see is the outlines of each

00:08:29,759 --> 00:08:33,680
flex item

00:08:31,120 --> 00:08:34,800
and also the amount of free space

00:08:33,680 --> 00:08:37,680
available as

00:08:34,800 --> 00:08:38,640
sort of this dotted line texture thing

00:08:37,680 --> 00:08:41,519
if you look

00:08:38,640 --> 00:08:42,959
at the layout panel it will tell you the

00:08:41,519 --> 00:08:46,080
flex direction

00:08:42,959 --> 00:08:48,560
its wrap status and more importantly

00:08:46,080 --> 00:08:50,240
it tells you what the browser does when

00:08:48,560 --> 00:08:53,279
it grows or shrinks

00:08:50,240 --> 00:08:54,320
your flex item and i will talk about

00:08:53,279 --> 00:08:58,160
this a bit more

00:08:54,320 --> 00:09:01,200
in the examples below

00:08:58,160 --> 00:09:03,200
what i find really cool about flexbox is

00:09:01,200 --> 00:09:04,800
the amount of control it gives us over

00:09:03,200 --> 00:09:08,080
this distribution

00:09:04,800 --> 00:09:11,040
of free space it's kind of a newer way

00:09:08,080 --> 00:09:11,839
of thinking about how we lay out our

00:09:11,040 --> 00:09:14,800
items

00:09:11,839 --> 00:09:15,440
on a page now the sizing of flex items

00:09:14,800 --> 00:09:17,920
does

00:09:15,440 --> 00:09:19,360
depend on a number of factors so it

00:09:17,920 --> 00:09:20,320
depends on the amount of free space

00:09:19,360 --> 00:09:22,399
available

00:09:20,320 --> 00:09:24,880
the amount of content within the flex

00:09:22,399 --> 00:09:27,680
item even the starting width

00:09:24,880 --> 00:09:28,000
of the flex item now the exact algorithm

00:09:27,680 --> 00:09:30,080
is

00:09:28,000 --> 00:09:31,200
sort of complicated but it is outlined

00:09:30,080 --> 00:09:32,800
in detail

00:09:31,200 --> 00:09:35,360
in the specification if you're

00:09:32,800 --> 00:09:37,040
interested in the how the calculations

00:09:35,360 --> 00:09:38,800
actually work

00:09:37,040 --> 00:09:40,320
and personally i feel that the key to

00:09:38,800 --> 00:09:43,120
figuring out

00:09:40,320 --> 00:09:43,760
flexbox is understanding how the flex

00:09:43,120 --> 00:09:47,519
basis

00:09:43,760 --> 00:09:50,880
property works say i put

00:09:47,519 --> 00:09:53,360
a fixed value of 100 pixels as the flex

00:09:50,880 --> 00:09:55,360
basis of a flex item

00:09:53,360 --> 00:09:56,480
i feel that intuitively many people

00:09:55,360 --> 00:09:59,040
expect to see

00:09:56,480 --> 00:09:59,519
a box with a width of 100 pixels because

00:09:59,040 --> 00:10:02,240
we're so

00:09:59,519 --> 00:10:03,120
used to being in control of our sizing

00:10:02,240 --> 00:10:05,839
instructions

00:10:03,120 --> 00:10:06,320
but flex basis is actually the starting

00:10:05,839 --> 00:10:09,200
point

00:10:06,320 --> 00:10:10,399
from which the size of the box is

00:10:09,200 --> 00:10:12,160
calculated

00:10:10,399 --> 00:10:13,680
so remember that the key here is the

00:10:12,160 --> 00:10:15,839
starting point

00:10:13,680 --> 00:10:17,519
because if your flex items are allowed

00:10:15,839 --> 00:10:21,040
to grow or shrink

00:10:17,519 --> 00:10:26,079
odds are the final size may not

00:10:21,040 --> 00:10:29,680
be whatever you put in the flex basis

00:10:26,079 --> 00:10:32,720
so let's move on to this next section

00:10:29,680 --> 00:10:34,240
flex box basics because i want to talk

00:10:32,720 --> 00:10:35,120
about this scenario i want to talk about

00:10:34,240 --> 00:10:37,440
the scenario

00:10:35,120 --> 00:10:38,160
where the same flex values could

00:10:37,440 --> 00:10:41,040
potentially

00:10:38,160 --> 00:10:42,160
give you different end results so if we

00:10:41,040 --> 00:10:45,920
look at the content

00:10:42,160 --> 00:10:47,440
of my two examples here three columns

00:10:45,920 --> 00:10:49,760
first two columns have

00:10:47,440 --> 00:10:50,480
exactly the same content right this is a

00:10:49,760 --> 00:10:52,959
sentence

00:10:50,480 --> 00:10:54,800
word both have it the only difference

00:10:52,959 --> 00:10:58,839
between these two sets

00:10:54,800 --> 00:11:02,720
of content and let's highlight it to see

00:10:58,839 --> 00:11:05,120
so both of these divs

00:11:02,720 --> 00:11:06,399
have the same styles on it so if you

00:11:05,120 --> 00:11:09,680
look

00:11:06,399 --> 00:11:10,240
here you'll see that both of these divs

00:11:09,680 --> 00:11:14,640
they are

00:11:10,240 --> 00:11:17,680
set to display flex that is all nothing

00:11:14,640 --> 00:11:20,640
layout specific um

00:11:17,680 --> 00:11:22,160
each of the flex items themselves are

00:11:20,640 --> 00:11:24,480
not styled explicitly

00:11:22,160 --> 00:11:26,839
so this means that the flex items are

00:11:24,480 --> 00:11:31,360
taking the initial

00:11:26,839 --> 00:11:31,360
values so

00:11:31,600 --> 00:11:35,680
if you look here flexbox actually has a

00:11:34,880 --> 00:11:39,440
number of

00:11:35,680 --> 00:11:41,839
keyword values that resolved these um

00:11:39,440 --> 00:11:43,440
because flex itself is a shorthand right

00:11:41,839 --> 00:11:46,480
so in result it revolve

00:11:43,440 --> 00:11:49,600
resolves sorry to these values

00:11:46,480 --> 00:11:51,200
the initial value of flex if you don't

00:11:49,600 --> 00:11:54,000
do anything the default value that the

00:11:51,200 --> 00:11:57,200
browser applies is that a flex grow of 0

00:11:54,000 --> 00:11:59,920
a flex string of one and a flex basis

00:11:57,200 --> 00:12:01,519
of auto and this is what we have in our

00:11:59,920 --> 00:12:04,639
first two examples i'm going to come

00:12:01,519 --> 00:12:04,639
back here so you can see

00:12:04,880 --> 00:12:07,920
so i mean it's totally possible to

00:12:06,639 --> 00:12:10,240
change the flex

00:12:07,920 --> 00:12:11,440
values but by default if you don't do

00:12:10,240 --> 00:12:13,360
anything it's zero

00:12:11,440 --> 00:12:15,440
when auto so what this means is that

00:12:13,360 --> 00:12:16,880
flex items won't grow beyond their

00:12:15,440 --> 00:12:21,760
starting widths

00:12:16,880 --> 00:12:24,480
so if i resize resize resize resize

00:12:21,760 --> 00:12:27,920
you'll notice that it doesn't grow

00:12:24,480 --> 00:12:27,920
beyond the max content

00:12:29,600 --> 00:12:34,240
but a flex string value of 1 means that

00:12:32,639 --> 00:12:36,560
all the items will start to shrink

00:12:34,240 --> 00:12:38,160
at the same rate if there isn't enough

00:12:36,560 --> 00:12:41,600
space for all the content

00:12:38,160 --> 00:12:43,440
to be on a single line so if i start to

00:12:41,600 --> 00:12:46,720
shrink

00:12:43,440 --> 00:12:50,320
at about this point the

00:12:46,720 --> 00:12:52,399
second example the second set of content

00:12:50,320 --> 00:12:54,560
has to start shrinking at this point

00:12:52,399 --> 00:12:56,720
because there isn't any more free space

00:12:54,560 --> 00:12:57,680
so everybody who can shrink has to start

00:12:56,720 --> 00:13:00,160
drinking

00:12:57,680 --> 00:13:02,399
so when i presented this example i think

00:13:00,160 --> 00:13:04,240
it was somewhere here

00:13:02,399 --> 00:13:06,240
the second column had already shrunk

00:13:04,240 --> 00:13:07,839
quite significantly whereas for the

00:13:06,240 --> 00:13:10,079
first set of examples

00:13:07,839 --> 00:13:10,959
plenty of free space no shrinkage

00:13:10,079 --> 00:13:14,079
required

00:13:10,959 --> 00:13:16,560
so even though the same flex values

00:13:14,079 --> 00:13:18,320
are applying on both of these examples

00:13:16,560 --> 00:13:21,920
you'll notice that the size

00:13:18,320 --> 00:13:26,000
of the second box completely different

00:13:21,920 --> 00:13:27,279
right so let's talk about flex basis in

00:13:26,000 --> 00:13:31,279
this case right

00:13:27,279 --> 00:13:34,560
the initial value of flex basis is auto

00:13:31,279 --> 00:13:37,760
and auto typically resolves to the max

00:13:34,560 --> 00:13:41,360
content width now when there is no

00:13:37,760 --> 00:13:43,360
explicit width set on a flex item

00:13:41,360 --> 00:13:46,000
which means that the width of the flex

00:13:43,360 --> 00:13:47,519
item as well as flex basis is resolved

00:13:46,000 --> 00:13:49,519
to auto

00:13:47,519 --> 00:13:50,639
the browser tends to use the content

00:13:49,519 --> 00:13:53,920
size as

00:13:50,639 --> 00:13:56,079
its starting point so let's see what the

00:13:53,920 --> 00:13:58,560
flexbox inspector can show

00:13:56,079 --> 00:14:00,560
us i'm gonna highlight this so you can

00:13:58,560 --> 00:14:03,839
see

00:14:00,560 --> 00:14:06,160
so the initial size which is the content

00:14:03,839 --> 00:14:09,760
size

00:14:06,160 --> 00:14:12,800
is about one two

00:14:09,760 --> 00:14:15,040
one zero two four pixels right and

00:14:12,800 --> 00:14:18,480
because there wasn't enough space

00:14:15,040 --> 00:14:19,519
the browser shrunk it given that the

00:14:18,480 --> 00:14:22,399
flex string value

00:14:19,519 --> 00:14:23,760
was one and this is the final size that

00:14:22,399 --> 00:14:25,600
we're actually seeing

00:14:23,760 --> 00:14:28,160
on the page i thought this was a pretty

00:14:25,600 --> 00:14:31,440
useful visualization

00:14:28,160 --> 00:14:32,000
now if we happen to have an explicit

00:14:31,440 --> 00:14:33,920
width

00:14:32,000 --> 00:14:35,680
on this box so i'm going to do this now

00:14:33,920 --> 00:14:40,959
let's do

00:14:35,680 --> 00:14:40,959
a width of say 200 pixels

00:14:41,440 --> 00:14:45,760
this width becomes the starting point

00:14:44,079 --> 00:14:48,720
for the calculation

00:14:45,760 --> 00:14:50,560
now in this specific example because our

00:14:48,720 --> 00:14:53,680
flex growth factor is zero

00:14:50,560 --> 00:14:57,519
there's no growing involved and the

00:14:53,680 --> 00:14:58,160
final size ends up being 200 it's 198

00:14:57,519 --> 00:15:01,519
because

00:14:58,160 --> 00:15:04,160
of the borders right

00:15:01,519 --> 00:15:04,639
but what's interesting is that if there

00:15:04,160 --> 00:15:07,199
is

00:15:04,639 --> 00:15:08,079
a flex basis value so let's let's keep

00:15:07,199 --> 00:15:10,160
the two

00:15:08,079 --> 00:15:13,360
the growing strings the same let's give

00:15:10,160 --> 00:15:15,040
it a flex basis of 300

00:15:13,360 --> 00:15:18,320
you'll notice that even though there is

00:15:15,040 --> 00:15:21,519
an explicit width set on this box

00:15:18,320 --> 00:15:23,519
because of the flag spaces the

00:15:21,519 --> 00:15:25,360
starting size for calculation becomes

00:15:23,519 --> 00:15:28,000
300 instead

00:15:25,360 --> 00:15:29,440
so knowing this sometimes when you set a

00:15:28,000 --> 00:15:30,880
width and you realize that wait that's

00:15:29,440 --> 00:15:33,120
not the width i said

00:15:30,880 --> 00:15:34,320
maybe it's it's this maybe it's a flex

00:15:33,120 --> 00:15:37,199
item with an

00:15:34,320 --> 00:15:39,199
explicit flex basis set just something

00:15:37,199 --> 00:15:41,519
to take note of

00:15:39,199 --> 00:15:43,360
so let's move on to this bit called free

00:15:41,519 --> 00:15:44,880
space distribution because i want to

00:15:43,360 --> 00:15:45,839
explain the difference between having a

00:15:44,880 --> 00:15:50,000
flex basis

00:15:45,839 --> 00:15:52,480
of auto and a flex basis of zero

00:15:50,000 --> 00:15:53,360
so again i have two sets of three items

00:15:52,480 --> 00:15:57,759
but this time

00:15:53,360 --> 00:16:00,160
exactly the same content for both

00:15:57,759 --> 00:16:01,199
they have different flex values though

00:16:00,160 --> 00:16:04,880
so let's go

00:16:01,199 --> 00:16:05,600
and see what's what so for this first

00:16:04,880 --> 00:16:09,440
example

00:16:05,600 --> 00:16:12,639
i have a flex value of auto

00:16:09,440 --> 00:16:15,839
on the box so auto resolves to

00:16:12,639 --> 00:16:18,959
grow of one shrink of one basis

00:16:15,839 --> 00:16:21,680
of auto for the second one

00:16:18,959 --> 00:16:22,079
everything's the same except i made it

00:16:21,680 --> 00:16:26,160
grow

00:16:22,079 --> 00:16:29,360
by two instead of one for the final box

00:16:26,160 --> 00:16:32,480
it's just zero growth

00:16:29,360 --> 00:16:35,440
so the other two the the two values of

00:16:32,480 --> 00:16:38,800
flex shrink and flex basis is the same

00:16:35,440 --> 00:16:42,399
for everyone so in this

00:16:38,800 --> 00:16:46,000
situation let me expand

00:16:42,399 --> 00:16:48,839
this you'll notice that there is

00:16:46,000 --> 00:16:50,880
free space and this free space is being

00:16:48,839 --> 00:16:54,320
distributed in the ratio

00:16:50,880 --> 00:16:57,279
of two is to one so i'm just gonna

00:16:54,320 --> 00:16:57,279
highlight this here

00:16:58,000 --> 00:17:01,440
so if you look at the diagram it shows

00:16:59,920 --> 00:17:05,039
you the original size

00:17:01,440 --> 00:17:07,679
which is about let's call it 254

00:17:05,039 --> 00:17:08,959
and because there was extra space this

00:17:07,679 --> 00:17:12,240
item was set to grow

00:17:08,959 --> 00:17:15,280
and the amount of space it was allocated

00:17:12,240 --> 00:17:17,439
is about 77 pixels

00:17:15,280 --> 00:17:20,319
now if we look at the one with a flex

00:17:17,439 --> 00:17:23,520
grow value of two

00:17:20,319 --> 00:17:26,640
what you'll see is that it has

00:17:23,520 --> 00:17:27,280
double the amount of free space as

00:17:26,640 --> 00:17:29,120
compared

00:17:27,280 --> 00:17:32,320
to the first one so that's the

00:17:29,120 --> 00:17:35,600
implication of using a flex grow value

00:17:32,320 --> 00:17:36,799
uh of of double or whatever ratio you

00:17:35,600 --> 00:17:39,679
have between

00:17:36,799 --> 00:17:41,600
your flex items so if you look at the

00:17:39,679 --> 00:17:44,799
final size

00:17:41,600 --> 00:17:47,760
they're definitely not multiples

00:17:44,799 --> 00:17:49,360
of each other like this second box is

00:17:47,760 --> 00:17:51,840
not twice the size

00:17:49,360 --> 00:17:53,600
of the first if you didn't want that

00:17:51,840 --> 00:17:56,320
sort of a scenario

00:17:53,600 --> 00:17:57,039
that's when the flex bases being set to

00:17:56,320 --> 00:18:00,000
zero

00:17:57,039 --> 00:18:01,760
comes in so by setting a flex basis of

00:18:00,000 --> 00:18:02,559
zero what you're telling the browser is

00:18:01,760 --> 00:18:05,360
that there is

00:18:02,559 --> 00:18:07,280
no starting with for each item which

00:18:05,360 --> 00:18:08,480
means it doesn't take into account the

00:18:07,280 --> 00:18:10,960
content size

00:18:08,480 --> 00:18:13,600
anymore so if you look at this box with

00:18:10,960 --> 00:18:16,720
this flex basis set to zero

00:18:13,600 --> 00:18:17,280
all of the space is all of the free

00:18:16,720 --> 00:18:20,400
space

00:18:17,280 --> 00:18:24,080
is up for grabs so

00:18:20,400 --> 00:18:28,400
this as we've established earlier

00:18:24,080 --> 00:18:30,240
in the content sizing page browser is

00:18:28,400 --> 00:18:33,679
not going to break

00:18:30,240 --> 00:18:36,400
words right so it's going to shrink

00:18:33,679 --> 00:18:38,160
this column to its max to its min

00:18:36,400 --> 00:18:39,760
content size and then that's it there's

00:18:38,160 --> 00:18:42,240
like there's no free space here

00:18:39,760 --> 00:18:43,280
so whatever's free space that's getting

00:18:42,240 --> 00:18:47,440
distributed

00:18:43,280 --> 00:18:50,480
is the amount of space across

00:18:47,440 --> 00:18:50,480
this viewport

00:18:50,799 --> 00:18:55,280
and all of this space is being allocated

00:18:53,440 --> 00:18:56,480
to these two columns and the ratio of

00:18:55,280 --> 00:19:01,280
one is to two

00:18:56,480 --> 00:19:03,440
so that's why this first box is 324

00:19:01,280 --> 00:19:04,720
and the second box is twice of that

00:19:03,440 --> 00:19:08,160
value

00:19:04,720 --> 00:19:08,799
so this is the difference this is the

00:19:08,160 --> 00:19:12,400
difference

00:19:08,799 --> 00:19:15,840
in sizing you can achieve with flexbox

00:19:12,400 --> 00:19:19,120
just by changing the flex basis

00:19:15,840 --> 00:19:22,080
value so depending on the end result

00:19:19,120 --> 00:19:24,080
you want this is something to take note

00:19:22,080 --> 00:19:27,360
of that you have options

00:19:24,080 --> 00:19:29,280
and it will affect the size of your flex

00:19:27,360 --> 00:19:31,840
items

00:19:29,280 --> 00:19:32,640
one more thing i want to talk about for

00:19:31,840 --> 00:19:34,960
flexbox

00:19:32,640 --> 00:19:35,679
is the fact that you can use box

00:19:34,960 --> 00:19:38,799
alignment

00:19:35,679 --> 00:19:41,919
properties on it so the ability to

00:19:38,799 --> 00:19:44,080
align items with the box alignment

00:19:41,919 --> 00:19:46,320
properties is also a very big plus

00:19:44,080 --> 00:19:48,000
so this flex inspector also allows us to

00:19:46,320 --> 00:19:50,559
visualize the free space

00:19:48,000 --> 00:19:52,480
that is distributed for all the

00:19:50,559 --> 00:19:55,039
different values so let's

00:19:52,480 --> 00:19:56,320
let's highlight this again if you look

00:19:55,039 --> 00:19:59,919
at

00:19:56,320 --> 00:20:00,799
the flex overlay like i said outlines of

00:19:59,919 --> 00:20:02,880
sex items

00:20:00,799 --> 00:20:05,520
what are we interested here for box

00:20:02,880 --> 00:20:07,520
alignment is all this free space

00:20:05,520 --> 00:20:08,960
so box alignment properties were meant

00:20:07,520 --> 00:20:11,039
to be used across

00:20:08,960 --> 00:20:12,640
different layout models even though for

00:20:11,039 --> 00:20:16,240
now they can only be used

00:20:12,640 --> 00:20:18,720
with flex and grid what i really like

00:20:16,240 --> 00:20:21,120
about devtools and uh even though i'm

00:20:18,720 --> 00:20:24,559
using firefox now i'm pretty sure

00:20:21,120 --> 00:20:28,080
chrome does this it is the magic of auto

00:20:24,559 --> 00:20:30,799
complete so you know you can kind of if

00:20:28,080 --> 00:20:32,480
even if you can't remember what each of

00:20:30,799 --> 00:20:34,400
these properties do you can kind of just

00:20:32,480 --> 00:20:35,760
run through the keywords until you get

00:20:34,400 --> 00:20:36,799
the one you want but anyway what i'm

00:20:35,760 --> 00:20:39,520
trying to say

00:20:36,799 --> 00:20:41,600
is that there are numerous options that

00:20:39,520 --> 00:20:45,280
allow you to distribute the free space

00:20:41,600 --> 00:20:47,039
not only the entire

00:20:45,280 --> 00:20:49,840
block of your content you can even

00:20:47,039 --> 00:20:52,080
distribute space between your items

00:20:49,840 --> 00:20:53,760
three sets of values for that all

00:20:52,080 --> 00:20:56,240
prefixed with space

00:20:53,760 --> 00:20:57,600
so we do have a lot of flexibility when

00:20:56,240 --> 00:21:01,039
it comes to

00:20:57,600 --> 00:21:01,760
distributing our flex items within its

00:21:01,039 --> 00:21:05,679
own

00:21:01,760 --> 00:21:07,919
container so justify content lets us

00:21:05,679 --> 00:21:09,360
adjust flex items along the main axis

00:21:07,919 --> 00:21:13,039
which is this direction

00:21:09,360 --> 00:21:15,679
that flex items are laid out so

00:21:13,039 --> 00:21:17,200
it moves like i showed in the example it

00:21:15,679 --> 00:21:17,919
moves all the flex children within the

00:21:17,200 --> 00:21:20,159
container

00:21:17,919 --> 00:21:21,919
or disperses the extra space between

00:21:20,159 --> 00:21:25,600
them

00:21:21,919 --> 00:21:26,250
if we change the flex direction

00:21:25,600 --> 00:21:29,039
to column

00:21:26,250 --> 00:21:32,080
[Music]

00:21:29,039 --> 00:21:34,960
cut spell direction

00:21:32,080 --> 00:21:36,480
and then we should give the container a

00:21:34,960 --> 00:21:40,400
height

00:21:36,480 --> 00:21:42,320
um let's just give an arbitrary value 45

00:21:40,400 --> 00:21:44,080
so you can see that we can also change

00:21:42,320 --> 00:21:48,320
the direction

00:21:44,080 --> 00:21:50,480
that the content is flowing so

00:21:48,320 --> 00:21:52,480
the main axis is now flowing from top to

00:21:50,480 --> 00:21:54,720
bottom and the flex items

00:21:52,480 --> 00:21:56,840
move in this direction i hope you all

00:21:54,720 --> 00:22:00,000
can see my cursor

00:21:56,840 --> 00:22:00,559
instead so what i mentioned was the main

00:22:00,000 --> 00:22:02,720
axis

00:22:00,559 --> 00:22:03,760
what is perpendicular to it is called

00:22:02,720 --> 00:22:07,280
the cross

00:22:03,760 --> 00:22:08,720
axis which is whatever is perpendicular

00:22:07,280 --> 00:22:11,280
to the main axis

00:22:08,720 --> 00:22:13,200
so if you look at my items they all like

00:22:11,280 --> 00:22:14,880
suspiciously are the same height

00:22:13,200 --> 00:22:17,120
this is because items are stretched

00:22:14,880 --> 00:22:19,520
along the cross axis to the full height

00:22:17,120 --> 00:22:21,120
of the flex line the moment you put on

00:22:19,520 --> 00:22:23,039
the display flex

00:22:21,120 --> 00:22:24,480
but if we do any self alignment

00:22:23,039 --> 00:22:28,000
properties let's

00:22:24,480 --> 00:22:28,000
try align items

00:22:28,799 --> 00:22:32,720
they immediately shrink to their

00:22:30,720 --> 00:22:33,600
original heights so this behavior will

00:22:32,720 --> 00:22:37,600
also happen

00:22:33,600 --> 00:22:41,120
for grid items one interesting

00:22:37,600 --> 00:22:43,760
value for align items is called

00:22:41,120 --> 00:22:46,080
baseline and this is useful when you

00:22:43,760 --> 00:22:49,039
have something like my example here

00:22:46,080 --> 00:22:50,480
where you have like different font sizes

00:22:49,039 --> 00:22:53,120
different line heights

00:22:50,480 --> 00:22:53,760
you can actually use baseline to sort of

00:22:53,120 --> 00:22:57,440
align

00:22:53,760 --> 00:23:00,799
all the textual content across your flex

00:22:57,440 --> 00:23:01,760
items so if you happen to have some sort

00:23:00,799 --> 00:23:03,679
of a

00:23:01,760 --> 00:23:04,799
i don't know editorial design that

00:23:03,679 --> 00:23:07,200
involves these

00:23:04,799 --> 00:23:09,039
different flex items of different

00:23:07,200 --> 00:23:10,799
heights you could kind of align

00:23:09,039 --> 00:23:13,440
everyone's baseline together just to

00:23:10,799 --> 00:23:16,559
make it easier to read have

00:23:13,440 --> 00:23:17,600
a container flex container that is a lot

00:23:16,559 --> 00:23:20,720
longer

00:23:17,600 --> 00:23:23,360
than the total height

00:23:20,720 --> 00:23:25,280
of your flex lines for example let me

00:23:23,360 --> 00:23:28,320
change this to something big

00:23:25,280 --> 00:23:29,840
let's try something like this so you'll

00:23:28,320 --> 00:23:33,679
notice that there's a lot of these

00:23:29,840 --> 00:23:35,280
white spaces between your flex items

00:23:33,679 --> 00:23:37,280
so there is an option for you to pack

00:23:35,280 --> 00:23:37,840
your flex lines together using align

00:23:37,280 --> 00:23:40,000
content

00:23:37,840 --> 00:23:41,520
so for example if i set it to start it

00:23:40,000 --> 00:23:44,000
kind of packs away

00:23:41,520 --> 00:23:44,960
everyone to the top leaving the extras

00:23:44,000 --> 00:23:46,880
free space

00:23:44,960 --> 00:23:48,320
at the bottom so these are the box

00:23:46,880 --> 00:23:50,799
alignment properties

00:23:48,320 --> 00:23:52,159
that you have that you can use to align

00:23:50,799 --> 00:23:55,679
your items within

00:23:52,159 --> 00:23:59,679
your container now moving on

00:23:55,679 --> 00:24:00,960
can't talk about css layout without grid

00:23:59,679 --> 00:24:02,480
so regardless of whether you've used

00:24:00,960 --> 00:24:04,159
grid in production or you're just trying

00:24:02,480 --> 00:24:06,000
it out for the first time

00:24:04,159 --> 00:24:07,360
it's really helpful to have a grid

00:24:06,000 --> 00:24:10,320
inspector tool

00:24:07,360 --> 00:24:11,760
so the most basic usage of laying out

00:24:10,320 --> 00:24:14,799
items with grid is

00:24:11,760 --> 00:24:17,840
setting the track sizes of your

00:24:14,799 --> 00:24:20,000
rows and columns so the browser will

00:24:17,840 --> 00:24:22,159
automatically place items into the grid

00:24:20,000 --> 00:24:24,080
using a very well bought out algorithm

00:24:22,159 --> 00:24:25,520
that is defined in a specification if

00:24:24,080 --> 00:24:27,919
anyone is interested

00:24:25,520 --> 00:24:28,799
but things being placed one after

00:24:27,919 --> 00:24:31,039
another

00:24:28,799 --> 00:24:32,640
it's pretty pretty standard behavior you

00:24:31,039 --> 00:24:35,200
know you don't need grid

00:24:32,640 --> 00:24:36,720
to put things in order but let's talk

00:24:35,200 --> 00:24:39,840
about this grid highlighter

00:24:36,720 --> 00:24:40,559
why not so similarly it's also it also

00:24:39,840 --> 00:24:43,600
exists

00:24:40,559 --> 00:24:45,120
in the layout panel and you have options

00:24:43,600 --> 00:24:46,720
you can display line numbers

00:24:45,120 --> 00:24:48,720
you can display area names we'll talk

00:24:46,720 --> 00:24:50,880
about that later you can extend

00:24:48,720 --> 00:24:52,240
lines indefinitely which is great if you

00:24:50,880 --> 00:24:57,360
have multiple

00:24:52,240 --> 00:25:00,720
grids on the same page so that's fun

00:24:57,360 --> 00:25:03,120
so this basic example i

00:25:00,720 --> 00:25:04,320
really like the syntax of grid right so

00:25:03,120 --> 00:25:06,159
if you look at it

00:25:04,320 --> 00:25:07,440
we have display grid and then we set

00:25:06,159 --> 00:25:09,760
columns and rows

00:25:07,440 --> 00:25:10,799
if there are three volume sorry three

00:25:09,760 --> 00:25:13,039
values

00:25:10,799 --> 00:25:13,840
in grid template columns you see three

00:25:13,039 --> 00:25:17,120
columns

00:25:13,840 --> 00:25:20,000
there are two rows and i see two rows

00:25:17,120 --> 00:25:21,200
so as a visual person i appreciate this

00:25:20,000 --> 00:25:23,919
type of syntax

00:25:21,200 --> 00:25:25,679
like i said nothing special about things

00:25:23,919 --> 00:25:27,919
laid out one after another

00:25:25,679 --> 00:25:30,240
what's special about grid is how simple

00:25:27,919 --> 00:25:32,799
it is to manually place items

00:25:30,240 --> 00:25:34,640
in both directions so since my favorite

00:25:32,799 --> 00:25:35,679
analogy for this is placing items on a

00:25:34,640 --> 00:25:39,039
chessboard

00:25:35,679 --> 00:25:41,120
this example it is what it is this is a

00:25:39,039 --> 00:25:43,039
simple three by three grid

00:25:41,120 --> 00:25:45,200
i'm gonna find it highlight it so we can

00:25:43,039 --> 00:25:45,200
see

00:25:45,679 --> 00:25:50,480
nothing spectacular one container three

00:25:48,799 --> 00:25:53,520
items

00:25:50,480 --> 00:25:56,960
the properties which control the

00:25:53,520 --> 00:26:00,320
grid items which contain chess pieces

00:25:56,960 --> 00:26:03,360
are grid roll

00:26:00,320 --> 00:26:04,320
and grid column so this is where the

00:26:03,360 --> 00:26:07,440
ability to see

00:26:04,320 --> 00:26:10,000
line numbers comes in really handy

00:26:07,440 --> 00:26:11,600
so if you look at the second one i

00:26:10,000 --> 00:26:12,320
wanted it smack in the middle of the

00:26:11,600 --> 00:26:15,279
board

00:26:12,320 --> 00:26:15,840
so i set the grid row to two as you can

00:26:15,279 --> 00:26:19,520
see

00:26:15,840 --> 00:26:23,200
here two grid row two

00:26:19,520 --> 00:26:24,880
gives it sets it here column two sets it

00:26:23,200 --> 00:26:26,320
here that's how it gets to the middle if

00:26:24,880 --> 00:26:28,640
you look at the last one

00:26:26,320 --> 00:26:30,720
with row three grid column three so

00:26:28,640 --> 00:26:33,760
that's what that's how we place

00:26:30,720 --> 00:26:34,799
items in the grid so numbers when it

00:26:33,760 --> 00:26:36,400
comes to

00:26:34,799 --> 00:26:37,600
more complex layouts let's say i don't

00:26:36,400 --> 00:26:39,440
know if you have 20 columns you're not

00:26:37,600 --> 00:26:41,919
going to sit there and count columns

00:26:39,440 --> 00:26:43,039
take a look at the grid number boom

00:26:41,919 --> 00:26:44,960
there you have it

00:26:43,039 --> 00:26:47,279
that's why i think this grid overlay is

00:26:44,960 --> 00:26:50,720
super useful

00:26:47,279 --> 00:26:53,919
now i mentioned this area names thing

00:26:50,720 --> 00:26:57,440
so this is another feature of grid that

00:26:53,919 --> 00:26:59,279
i really like um so if you look at the

00:26:57,440 --> 00:27:02,080
syntax it looks a bit

00:26:59,279 --> 00:27:04,480
like why is it so complicated it's

00:27:02,080 --> 00:27:08,640
actually not it's just that the

00:27:04,480 --> 00:27:09,440
devtools does smoosh the values together

00:27:08,640 --> 00:27:13,360
a bit

00:27:09,440 --> 00:27:16,320
but what we can do after we've allocated

00:27:13,360 --> 00:27:18,159
columns and rows is that we can assign

00:27:16,320 --> 00:27:22,320
certain areas

00:27:18,159 --> 00:27:23,440
with every names so how the syntax works

00:27:22,320 --> 00:27:26,640
is that

00:27:23,440 --> 00:27:28,720
there are a bunch of lines that i have

00:27:26,640 --> 00:27:32,799
here that are surrounded by codes

00:27:28,720 --> 00:27:35,760
so each of these set each of the

00:27:32,799 --> 00:27:37,279
codes represent a row and each of the

00:27:35,760 --> 00:27:39,600
values within the codes

00:27:37,279 --> 00:27:42,080
represents the column so because i have

00:27:39,600 --> 00:27:45,279
a six by six here i must have

00:27:42,080 --> 00:27:48,720
six rows and six column values

00:27:45,279 --> 00:27:50,720
otherwise the grid template this whole

00:27:48,720 --> 00:27:53,279
piece of code is moot do with grid

00:27:50,720 --> 00:27:56,399
template areas is that we can modify

00:27:53,279 --> 00:27:59,360
the size of our grid items without

00:27:56,399 --> 00:28:00,640
actually changing the grid item code

00:27:59,360 --> 00:28:03,840
itself

00:28:00,640 --> 00:28:05,279
so as you can see after assigning grid

00:28:03,840 --> 00:28:08,080
template areas

00:28:05,279 --> 00:28:10,240
i can assign each item to its respective

00:28:08,080 --> 00:28:13,919
areas so this one i say grade area

00:28:10,240 --> 00:28:16,960
grade area mouse grid area of the lingo

00:28:13,919 --> 00:28:20,480
but if i want to change the size of

00:28:16,960 --> 00:28:24,799
the cell not the cell sorry the area

00:28:20,480 --> 00:28:24,799
i can do it directly from

00:28:25,200 --> 00:28:30,080
the grid template areas code like so

00:28:28,240 --> 00:28:31,919
i hope i don't type anything wrong

00:28:30,080 --> 00:28:36,640
otherwise my code is going

00:28:31,919 --> 00:28:39,279
moot let's try this

00:28:36,640 --> 00:28:41,440
there you go so instead of four cells

00:28:39,279 --> 00:28:43,200
mouse noun takes up two cells

00:28:41,440 --> 00:28:44,640
didn't have to change anything down here

00:28:43,200 --> 00:28:47,360
only had to change it

00:28:44,640 --> 00:28:48,640
on the grid container level so i thought

00:28:47,360 --> 00:28:50,640
that was

00:28:48,640 --> 00:28:51,919
pretty useful especially when we're

00:28:50,640 --> 00:28:54,640
doing things like

00:28:51,919 --> 00:28:56,159
full page layouts where you do have to

00:28:54,640 --> 00:28:58,960
adjust the size

00:28:56,159 --> 00:29:00,000
of your elements depending on the

00:28:58,960 --> 00:29:02,480
viewport

00:29:00,000 --> 00:29:04,159
you don't really have to go and find

00:29:02,480 --> 00:29:07,760
every single

00:29:04,159 --> 00:29:09,600
grid item and then code for its position

00:29:07,760 --> 00:29:13,600
depending on the viewport you can

00:29:09,600 --> 00:29:16,720
isolate all your so-called responsive

00:29:13,600 --> 00:29:20,000
code only to the grid container

00:29:16,720 --> 00:29:20,000
i think that's pretty useful

00:29:20,399 --> 00:29:24,320
this last bit here animating grid rows

00:29:22,720 --> 00:29:26,880
and columns

00:29:24,320 --> 00:29:29,120
when i started talking about this it was

00:29:26,880 --> 00:29:32,399
still early it was it came out in

00:29:29,120 --> 00:29:33,919
firefox 66 i think we're at 84 now

00:29:32,399 --> 00:29:35,679
so this feature has been around for a

00:29:33,919 --> 00:29:37,760
bit not sure when the other

00:29:35,679 --> 00:29:39,120
browsers are going to implement it but

00:29:37,760 --> 00:29:42,240
you can

00:29:39,120 --> 00:29:43,679
animate grid columns and rows this

00:29:42,240 --> 00:29:45,360
had always been written into the

00:29:43,679 --> 00:29:46,480
specification it just took some time for

00:29:45,360 --> 00:29:49,360
the browsers to ship

00:29:46,480 --> 00:29:50,320
this feature now without dev tools

00:29:49,360 --> 00:29:54,000
honestly

00:29:50,320 --> 00:29:59,120
it might seem as if this chess piece is

00:29:54,000 --> 00:30:01,200
jumping the grid rows and columns

00:29:59,120 --> 00:30:02,159
that's fake news my friends can't

00:30:01,200 --> 00:30:06,559
actually do that

00:30:02,159 --> 00:30:10,159
so this is a trick there's actually only

00:30:06,559 --> 00:30:13,360
one grid item and

00:30:10,159 --> 00:30:16,880
there is only two rows

00:30:13,360 --> 00:30:20,080
and two columns

00:30:16,880 --> 00:30:23,200
right so if i scroll down to

00:30:20,080 --> 00:30:26,240
the keyframes this is what's going on

00:30:23,200 --> 00:30:29,279
you can actually animate the column

00:30:26,240 --> 00:30:31,600
size or row size and that's

00:30:29,279 --> 00:30:34,399
exactly what's happening here and i use

00:30:31,600 --> 00:30:37,600
the box alignment properties to assign

00:30:34,399 --> 00:30:38,880
the chest piece to the bottom right

00:30:37,600 --> 00:30:42,480
corner

00:30:38,880 --> 00:30:44,559
of the first cell

00:30:42,480 --> 00:30:46,159
and that's what's changing the

00:30:44,559 --> 00:30:49,200
background is big it is

00:30:46,159 --> 00:30:53,200
a linear gradient

00:30:49,200 --> 00:30:54,320
what is fun since i first started giving

00:30:53,200 --> 00:30:57,360
this talk is that

00:30:54,320 --> 00:31:02,159
chrome has recently joined

00:30:57,360 --> 00:31:05,840
the grid inspector to party

00:31:02,159 --> 00:31:12,240
so if you are using chrome

00:31:05,840 --> 00:31:12,240
inspect i have good news for all of you

00:31:12,559 --> 00:31:16,799
i'm on canary so this is taking a while

00:31:15,519 --> 00:31:20,240
there is also

00:31:16,799 --> 00:31:24,240
a grid inspector in chrome now

00:31:20,240 --> 00:31:26,960
so the advantage of this is it's

00:31:24,240 --> 00:31:28,960
almost feature parity with firefox in

00:31:26,960 --> 00:31:30,080
terms of usage so you go to the layout

00:31:28,960 --> 00:31:31,840
panel

00:31:30,080 --> 00:31:33,360
and you can see they also allow you to

00:31:31,840 --> 00:31:35,279
show area names

00:31:33,360 --> 00:31:38,559
line numbers they have this thing called

00:31:35,279 --> 00:31:43,039
track sizes that's printed directly

00:31:38,559 --> 00:31:45,360
um to be fair this is a new feature

00:31:43,039 --> 00:31:47,039
for chrome so clearly there are some

00:31:45,360 --> 00:31:48,880
bugs

00:31:47,039 --> 00:31:50,799
and rendering issues that need to be

00:31:48,880 --> 00:31:52,000
worked out but the fact that they've

00:31:50,799 --> 00:31:53,600
shipped this this means they're gonna

00:31:52,000 --> 00:31:56,640
have to keep improving it

00:31:53,600 --> 00:31:59,840
so if you really love using chrome

00:31:56,640 --> 00:32:00,480
well good news grid inspector shipped

00:31:59,840 --> 00:32:02,720
hopefully

00:32:00,480 --> 00:32:04,480
they'll start shipping the other layout

00:32:02,720 --> 00:32:07,679
tools as well so everybody

00:32:04,480 --> 00:32:09,600
will have a good time doing css moving

00:32:07,679 --> 00:32:12,080
on

00:32:09,600 --> 00:32:14,240
i want to talk about this concept called

00:32:12,080 --> 00:32:16,880
flexible sizing uh

00:32:14,240 --> 00:32:18,320
it's a pretty big thing when it comes to

00:32:16,880 --> 00:32:18,960
grid and it's actually a fairly

00:32:18,320 --> 00:32:21,679
interesting

00:32:18,960 --> 00:32:22,720
new aspect of building modern css

00:32:21,679 --> 00:32:24,960
layouts

00:32:22,720 --> 00:32:27,440
because when we used to talk about

00:32:24,960 --> 00:32:29,200
length css lengths we use relative units

00:32:27,440 --> 00:32:32,080
like percentages or even the newer

00:32:29,200 --> 00:32:32,080
viewport units

00:32:32,240 --> 00:32:35,919
that's all fine and good for responsive

00:32:33,919 --> 00:32:37,200
design yes but the problem is that they

00:32:35,919 --> 00:32:40,640
make all of your elements

00:32:37,200 --> 00:32:43,200
change size at the same rate

00:32:40,640 --> 00:32:43,919
so when we use css grid css grid

00:32:43,200 --> 00:32:45,760
actually does

00:32:43,919 --> 00:32:47,200
introduce a lot of new features one of

00:32:45,760 --> 00:32:50,640
the things is

00:32:47,200 --> 00:32:53,519
this new unit called the fr unit

00:32:50,640 --> 00:32:55,039
which is the amount of free space

00:32:53,519 --> 00:32:58,480
available

00:32:55,039 --> 00:33:00,159
it also introduces this min max function

00:32:58,480 --> 00:33:02,080
as well as there are other intrinsic

00:33:00,159 --> 00:33:02,640
sizing values like fit content that we

00:33:02,080 --> 00:33:04,960
covered

00:33:02,640 --> 00:33:06,080
we also have auto which has been around

00:33:04,960 --> 00:33:09,279
for a while

00:33:06,080 --> 00:33:12,080
and all of these different values they

00:33:09,279 --> 00:33:13,840
don't change at the same rate so i'm

00:33:12,080 --> 00:33:16,399
going to explain this

00:33:13,840 --> 00:33:18,080
with these visual examples on the screen

00:33:16,399 --> 00:33:18,799
so all the sizing units that i just

00:33:18,080 --> 00:33:21,600
talked about

00:33:18,799 --> 00:33:22,240
are supported in grid so all of these

00:33:21,600 --> 00:33:24,720
examples

00:33:22,240 --> 00:33:27,600
naturally are grid so there's gonna be a

00:33:24,720 --> 00:33:30,080
lot of browser resizing coming up

00:33:27,600 --> 00:33:31,519
i mean the alternative talk title for

00:33:30,080 --> 00:33:33,120
this presentation is

00:33:31,519 --> 00:33:35,519
what do you mean you don't size your

00:33:33,120 --> 00:33:39,360
browser a thousand times a day right

00:33:35,519 --> 00:33:41,279
so it's gonna have a lot of examples um

00:33:39,360 --> 00:33:42,960
let's look at this first set of four

00:33:41,279 --> 00:33:46,000
which covers fr

00:33:42,960 --> 00:33:49,679
and auto so if our screen auto is blue

00:33:46,000 --> 00:33:53,200
for fr i have set the value

00:33:49,679 --> 00:33:56,799
1fr 2fr and 1fr you know just to

00:33:53,200 --> 00:33:59,519
make a distinction that with fr you can

00:33:56,799 --> 00:34:04,320
actually explicitly state how much

00:33:59,519 --> 00:34:04,320
free space is being distributed so

00:34:05,279 --> 00:34:09,200
first and third are half of the second

00:34:08,240 --> 00:34:12,079
box

00:34:09,200 --> 00:34:12,879
that's because we set it that way auto

00:34:12,079 --> 00:34:16,000
behaves

00:34:12,879 --> 00:34:16,800
rather similarly to fr if it's used in

00:34:16,000 --> 00:34:19,200
isolation

00:34:16,800 --> 00:34:20,639
so everything if i have three boxes i

00:34:19,200 --> 00:34:21,359
set them all to auto they all have the

00:34:20,639 --> 00:34:23,839
same width

00:34:21,359 --> 00:34:24,560
cool now when they're used together

00:34:23,839 --> 00:34:28,800
you'll see

00:34:24,560 --> 00:34:32,000
that fr will

00:34:28,800 --> 00:34:33,599
take up any extra space available

00:34:32,000 --> 00:34:36,000
so if there's lots of space in the

00:34:33,599 --> 00:34:38,000
viewport all this extra space

00:34:36,000 --> 00:34:39,760
goes straight to the green box which is

00:34:38,000 --> 00:34:41,760
sized with fr

00:34:39,760 --> 00:34:43,200
but when there is no space so when i

00:34:41,760 --> 00:34:44,960
start shrinking the browser

00:34:43,200 --> 00:34:46,320
it's also the first to get space taken

00:34:44,960 --> 00:34:50,240
away

00:34:46,320 --> 00:34:50,240
and as i take away more space

00:34:50,800 --> 00:34:53,919
you'll notice that the blue boxes don't

00:34:52,879 --> 00:34:56,639
change they are

00:34:53,919 --> 00:34:58,400
always fixed at max content when all

00:34:56,639 --> 00:35:00,160
this like space stuff is happening with

00:34:58,400 --> 00:35:02,320
the green box

00:35:00,160 --> 00:35:04,320
so it's going to keep continue shrinking

00:35:02,320 --> 00:35:06,320
until the fr box hits min

00:35:04,320 --> 00:35:07,520
content so the moment it hits mean

00:35:06,320 --> 00:35:11,200
content that means

00:35:07,520 --> 00:35:13,680
green box has strung as much as it could

00:35:11,200 --> 00:35:15,760
and then space starts getting taken away

00:35:13,680 --> 00:35:18,720
from the blue boxes

00:35:15,760 --> 00:35:20,960
ultimately when there is absolutely no

00:35:18,720 --> 00:35:21,760
space left behind all three boxes are

00:35:20,960 --> 00:35:24,240
going to end up

00:35:21,760 --> 00:35:25,839
exactly the same size but they did they

00:35:24,240 --> 00:35:29,040
did not change

00:35:25,839 --> 00:35:29,680
their size at the same rate i'm going to

00:35:29,040 --> 00:35:32,880
cover

00:35:29,680 --> 00:35:33,920
fit content versus min max i think this

00:35:32,880 --> 00:35:38,000
is a fairly

00:35:33,920 --> 00:35:40,640
interesting comparison to make so

00:35:38,000 --> 00:35:42,160
fit content and min max they do behave

00:35:40,640 --> 00:35:43,680
quite similarly in that there are both a

00:35:42,160 --> 00:35:46,560
range of values with a minimum

00:35:43,680 --> 00:35:48,000
and maximum value so min max takes two

00:35:46,560 --> 00:35:50,000
arguments the first one being the

00:35:48,000 --> 00:35:52,000
minimum size and the second one

00:35:50,000 --> 00:35:53,920
being the maximum we've already talked

00:35:52,000 --> 00:35:55,520
about how fit content works earlier so

00:35:53,920 --> 00:35:57,760
let's look at example five

00:35:55,520 --> 00:35:58,960
we have in fr box and autumn box in a

00:35:57,760 --> 00:36:02,320
fit content

00:35:58,960 --> 00:36:05,040
box if we

00:36:02,320 --> 00:36:07,280
start losing space so like i don't this

00:36:05,040 --> 00:36:10,400
is maximum space so green

00:36:07,280 --> 00:36:11,839
clearly has lots of room to work with

00:36:10,400 --> 00:36:14,960
it's also the first shrink so we're

00:36:11,839 --> 00:36:14,960
gonna keep shrinking it

00:36:15,200 --> 00:36:21,040
you'll notice that fit content

00:36:18,720 --> 00:36:23,280
and auto end up reaching their minimum

00:36:21,040 --> 00:36:24,320
sizes at the same time even though their

00:36:23,280 --> 00:36:28,320
behavior

00:36:24,320 --> 00:36:28,320
is slightly different

00:36:28,880 --> 00:36:32,640
the comparison is more apparent when we

00:36:30,800 --> 00:36:35,280
look at example six

00:36:32,640 --> 00:36:37,280
so now we still have a blue box that is

00:36:35,280 --> 00:36:41,280
sized auto but we have this

00:36:37,280 --> 00:36:44,720
min max yellow box gold box whatever

00:36:41,280 --> 00:36:45,920
right here so this

00:36:44,720 --> 00:36:47,839
things are starting to get a bit

00:36:45,920 --> 00:36:51,119
interesting because when

00:36:47,839 --> 00:36:52,560
the column grows or shrinks is different

00:36:51,119 --> 00:36:55,440
so again i'm just going to start off

00:36:52,560 --> 00:36:57,920
with something that a lot of space

00:36:55,440 --> 00:36:58,880
auto gets all the space when there's

00:36:57,920 --> 00:37:02,160
plenty of it

00:36:58,880 --> 00:37:04,320
and gives up that space when

00:37:02,160 --> 00:37:05,680
the browser's the viewport starts to

00:37:04,320 --> 00:37:09,119
shrink

00:37:05,680 --> 00:37:12,880
once auto hits its max content

00:37:09,119 --> 00:37:14,800
size here

00:37:12,880 --> 00:37:16,800
it's going to stop shrinking it's going

00:37:14,800 --> 00:37:18,800
to keep its max content size

00:37:16,800 --> 00:37:20,160
the next box to start shrinking is

00:37:18,800 --> 00:37:22,800
actually the gold box

00:37:20,160 --> 00:37:24,960
the min max box so you'll see min max

00:37:22,800 --> 00:37:28,320
starts to shrink

00:37:24,960 --> 00:37:30,240
and as we keep going there is one point

00:37:28,320 --> 00:37:32,160
where everybody starts to shrink

00:37:30,240 --> 00:37:34,720
together

00:37:32,160 --> 00:37:36,480
exactly where i can't say but this is

00:37:34,720 --> 00:37:37,520
the point that allows all three of them

00:37:36,480 --> 00:37:40,560
to end up

00:37:37,520 --> 00:37:44,880
hitting their minimum size at the

00:37:40,560 --> 00:37:48,240
same time

00:37:44,880 --> 00:37:50,320
here okay here ish

00:37:48,240 --> 00:37:51,359
so these two will end up being mint

00:37:50,320 --> 00:37:54,320
content

00:37:51,359 --> 00:37:55,200
while min max will stop at 200 so all of

00:37:54,320 --> 00:37:58,560
them

00:37:55,200 --> 00:38:03,440
hit their respective minimum sizes

00:37:58,560 --> 00:38:05,119
at the same time so

00:38:03,440 --> 00:38:06,880
when there's a lot of space the fit

00:38:05,119 --> 00:38:09,280
content gets kept at its

00:38:06,880 --> 00:38:11,119
max content with uh in this example i

00:38:09,280 --> 00:38:14,400
set it to 200

00:38:11,119 --> 00:38:17,200
while auto and min max continue

00:38:14,400 --> 00:38:17,839
to grow so this is about the point where

00:38:17,200 --> 00:38:20,880
it hits

00:38:17,839 --> 00:38:24,640
almost 200

00:38:20,880 --> 00:38:26,000
and then when auto reaches its max

00:38:24,640 --> 00:38:29,520
content size

00:38:26,000 --> 00:38:31,599
it stops growing and then the min max

00:38:29,520 --> 00:38:34,560
box starts to grow

00:38:31,599 --> 00:38:35,920
hits 400 then stops and then blue starts

00:38:34,560 --> 00:38:38,560
to grow again

00:38:35,920 --> 00:38:38,960
so what i'm trying to demonstrate in

00:38:38,560 --> 00:38:42,079
these

00:38:38,960 --> 00:38:43,119
examples is the fact that we can

00:38:42,079 --> 00:38:46,720
actually have

00:38:43,119 --> 00:38:48,400
our elements kind of wait for each other

00:38:46,720 --> 00:38:50,560
so you might be thinking sure current

00:38:48,400 --> 00:38:50,960
boxes are cool how do i use this in real

00:38:50,560 --> 00:38:53,599
life

00:38:50,960 --> 00:38:55,440
really glad you asked so i have two

00:38:53,599 --> 00:38:57,920
examples here

00:38:55,440 --> 00:38:59,520
it's kind of a i feel this is a design

00:38:57,920 --> 00:39:02,560
that is not in common you see

00:38:59,520 --> 00:39:03,920
this on feature com feature articles

00:39:02,560 --> 00:39:07,040
feature stories you have a

00:39:03,920 --> 00:39:10,000
big nice image you have a

00:39:07,040 --> 00:39:11,680
title stylized so both of these look

00:39:10,000 --> 00:39:15,119
very similar

00:39:11,680 --> 00:39:19,359
at a full viewport

00:39:15,119 --> 00:39:22,560
with things start to

00:39:19,359 --> 00:39:24,320
become apparent that their size

00:39:22,560 --> 00:39:25,200
differently once the viewport starts to

00:39:24,320 --> 00:39:27,760
get smaller

00:39:25,200 --> 00:39:29,040
so the first example i've used

00:39:27,760 --> 00:39:32,160
percentages

00:39:29,040 --> 00:39:32,560
to size the elements and add a small

00:39:32,160 --> 00:39:34,560
width

00:39:32,560 --> 00:39:35,599
i'm just going to shrink this you'll

00:39:34,560 --> 00:39:37,599
start to notice

00:39:35,599 --> 00:39:39,040
that because everything is shrinking at

00:39:37,599 --> 00:39:42,000
the same rate

00:39:39,040 --> 00:39:43,599
because these are percentages the image

00:39:42,000 --> 00:39:47,040
is becoming too small

00:39:43,599 --> 00:39:51,040
the text is kind of like not

00:39:47,040 --> 00:39:53,359
set nicely it's a bit too squished up

00:39:51,040 --> 00:39:54,240
that's because everyone is shrinking at

00:39:53,359 --> 00:39:56,240
the same rate so

00:39:54,240 --> 00:39:57,520
in order to tackle this you probably

00:39:56,240 --> 00:40:00,400
have to add a view

00:39:57,520 --> 00:40:02,160
a break point somewhere and rejig the

00:40:00,400 --> 00:40:04,880
percentages so you can see what i've

00:40:02,160 --> 00:40:06,640
been saying i said it a 65

00:40:04,880 --> 00:40:09,200
and some other percentages this is

00:40:06,640 --> 00:40:10,880
awkward margin top thing here too

00:40:09,200 --> 00:40:12,640
but the second example doesn't suffer

00:40:10,880 --> 00:40:16,640
from this this problem

00:40:12,640 --> 00:40:18,640
because i've used all these flexible

00:40:16,640 --> 00:40:20,079
variable sizing units that we talked

00:40:18,640 --> 00:40:22,880
about in the colored boxes

00:40:20,079 --> 00:40:24,240
example that allows us to have a more

00:40:22,880 --> 00:40:27,680
robust

00:40:24,240 --> 00:40:30,240
layout so even at a tiny

00:40:27,680 --> 00:40:31,119
viewport with i don't have to write any

00:40:30,240 --> 00:40:33,839
extra

00:40:31,119 --> 00:40:35,200
break points just to deal with this

00:40:33,839 --> 00:40:37,680
situation

00:40:35,200 --> 00:40:38,960
so i think that's a pretty interesting

00:40:37,680 --> 00:40:42,000
implementation

00:40:38,960 --> 00:40:43,839
of this flexible sizing that i talked

00:40:42,000 --> 00:40:47,200
about

00:40:43,839 --> 00:40:50,160
now even though css

00:40:47,200 --> 00:40:51,839
properties seem pretty powerful on their

00:40:50,160 --> 00:40:53,359
own i think we've demonstrated through

00:40:51,839 --> 00:40:57,200
display grid

00:40:53,359 --> 00:40:59,119
flex etc there are a lot

00:40:57,200 --> 00:41:01,680
of css properties i think they have over

00:40:59,119 --> 00:41:05,280
500 the last i checked

00:41:01,680 --> 00:41:07,680
and css kind of makes magic

00:41:05,280 --> 00:41:08,640
when all these individual properties are

00:41:07,680 --> 00:41:11,920
combined

00:41:08,640 --> 00:41:12,960
in creative ways because grid allows us

00:41:11,920 --> 00:41:16,000
to do things like

00:41:12,960 --> 00:41:18,720
overlap much easier than before so

00:41:16,000 --> 00:41:21,119
if we combine so it's not in just layout

00:41:18,720 --> 00:41:25,440
right if we can combine a layout

00:41:21,119 --> 00:41:26,960
css like grid with things like say blend

00:41:25,440 --> 00:41:30,880
modes or masks

00:41:26,960 --> 00:41:33,359
or background clip css shapes etc

00:41:30,880 --> 00:41:34,000
we can do some really interesting things

00:41:33,359 --> 00:41:36,960
uh this

00:41:34,000 --> 00:41:38,560
is may this is just this very you know

00:41:36,960 --> 00:41:41,520
rudimentary example

00:41:38,560 --> 00:41:42,480
using mixed blend modes and the variable

00:41:41,520 --> 00:41:45,200
sizing

00:41:42,480 --> 00:41:46,480
for my columns but i can only imagine

00:41:45,200 --> 00:41:48,720
that those of you

00:41:46,480 --> 00:41:50,319
with a creative streak can come up with

00:41:48,720 --> 00:41:52,480
so much

00:41:50,319 --> 00:41:53,599
better than what i've done so far but

00:41:52,480 --> 00:41:55,920
there's so many

00:41:53,599 --> 00:41:57,040
possibilities for much more creative

00:41:55,920 --> 00:42:00,319
expression

00:41:57,040 --> 00:42:01,440
on the web right now so to wrap up i

00:42:00,319 --> 00:42:03,520
just want to say

00:42:01,440 --> 00:42:05,119
that you know css is evolving it's

00:42:03,520 --> 00:42:07,200
becoming more powerful

00:42:05,119 --> 00:42:08,160
a lot of the older layout hacks are no

00:42:07,200 --> 00:42:10,720
longer

00:42:08,160 --> 00:42:12,319
necessary because we have these new

00:42:10,720 --> 00:42:13,520
layout properties that are designed

00:42:12,319 --> 00:42:16,720
specifically

00:42:13,520 --> 00:42:19,040
to suit the dynamic nature of the web

00:42:16,720 --> 00:42:19,839
and with them come new concepts to be

00:42:19,040 --> 00:42:22,079
learned

00:42:19,839 --> 00:42:23,440
so hopefully what i've covered hopefully

00:42:22,079 --> 00:42:25,760
you start

00:42:23,440 --> 00:42:26,560
using some of these dev tool features to

00:42:25,760 --> 00:42:30,160
help

00:42:26,560 --> 00:42:31,680
in your understanding and i guess i just

00:42:30,160 --> 00:42:33,119
want to round up by saying that if

00:42:31,680 --> 00:42:35,520
you've been on the fence

00:42:33,119 --> 00:42:37,200
about these trying out these new

00:42:35,520 --> 00:42:40,640
features i just want to say

00:42:37,200 --> 00:42:43,440
you know just do it it's not

00:42:40,640 --> 00:42:45,839
as scary as you think thank you very

00:42:43,440 --> 00:42:45,839

YouTube URL: https://www.youtube.com/watch?v=jMd82CaT100


