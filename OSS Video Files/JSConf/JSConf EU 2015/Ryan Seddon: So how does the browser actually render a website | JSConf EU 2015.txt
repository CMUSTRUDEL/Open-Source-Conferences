Title: Ryan Seddon: So how does the browser actually render a website | JSConf EU 2015
Publication date: 2015-10-17
Playlist: JSConf EU 2015
Description: 
	We all take for granted that when we push enter in the browsers address bar, magic happens. The browser gets our HTML, that intern requests all the dependencies, insert magic, other things happen and then we have our site rendered. Simple, right, right…

Like many people as I’ve progressed in my career, building for the web, I’ve become curious as to how the browser does what it does. What makes it tick, how it turns a string of HTML into a data structure, how CSS & JavaScript come into play. Things like render tree, style recalculation, paints, reflows, all alien words will start to make sense by the end of this talk.

Suddenly you’ll understand why people recommend you place script tags at the bottom of the document, inlining critical CSS & all sorts of other performance techniques.

Intro music by @halfbyte
Captions: 
	00:00:25,500 --> 00:00:34,150
Ok. So, this is quite a large subject to talk about in 25 minutes, but I'll do my best to

00:00:34,150 --> 00:00:40,430
cover what happens when you get the HTML and it how it comes and pints to your page, you

00:00:40,430 --> 00:00:49,330
will understand some of the terms of what is happening behind the screens.

00:00:49,330 --> 00:00:52,680
So thank you for having me in Berlin, it's been a beautiful city I've been exploring

00:00:52,680 --> 00:00:57,909
it for the last week, it's been really great to be here.

00:00:57,909 --> 00:01:05,010
As you were told I'm Ryan, I'm team leader of the Zen desk in Melbourne Australia, where

00:01:05,010 --> 00:01:11,110
I work on lots of finance stuff, I'm really interested in how the browser works on the

00:01:11,110 --> 00:01:14,110
front end side of things.

00:01:14,110 --> 00:01:18,850
Just a high level view of what we will cover. We'll look at sort of the high level view

00:01:18,850 --> 00:01:25,320
of it, it comes to be, how the HTML is passed, how it gets through the different processes

00:01:25,320 --> 00:01:31,170
in the browser, we'll dig into each section and along the way we will have performance

00:01:31,170 --> 00:01:38,810
insights, so performance things are recommended, that can be explained as what the browser

00:01:38,810 --> 00:01:43,159
is actually doing, as it's constructing the website.

00:01:43,159 --> 00:01:49,850
As I said this is a kind of like a 30,000 foot view, I've got 25 minutes to cover a

00:01:49,850 --> 00:01:53,520
really, really in depth subject so I'll do my best.

00:01:53,520 --> 00:02:00,159
So, the browser. It's probably one of the most complex applications that we use, I use

00:02:00,159 --> 00:02:07,560
it for 90% of my interaction with the computer, like I've had my text editor or browser open

00:02:07,560 --> 00:02:12,700
and I use all my applications through the browser, so it's a pretty prevalent application

00:02:12,700 --> 00:02:15,760
and a really complex thing.

00:02:15,760 --> 00:02:21,980
So looking at, sort of like the components that make up a browser, for the rendering

00:02:21,980 --> 00:02:27,190
stuff, the binding, a lot of operating system stuff, so when it talks to the network, it

00:02:27,190 --> 00:02:35,560
will use certain APIs depending on the operating system, Mac or windows, then the rendering

00:02:35,560 --> 00:02:40,849
part, that's about actually constructing the website from the HTML that gets sent to it,

00:02:40,849 --> 00:02:47,930
platform stuff that's dependent on windows or OS x, there are different things between

00:02:47,930 --> 00:02:56,770
operating systems, then JavaScript virtual machine. I'll only cover this bit, the rendering

00:02:56,770 --> 00:03:04,569
the parsing of the HTML, how it lays out the page and pints to it the screen and you get

00:03:04,569 --> 00:03:07,250
the final result of the actual website you are working on.

00:03:07,250 --> 00:03:14,130
If you look at the high level flow, we have got sort of two processes, one will parse

00:03:14,130 --> 00:03:21,569
the HTML, one the CSS, then combined to the render or frame tree depending on which browser

00:03:21,569 --> 00:03:27,760
you look at it, essentially a data structure of the two bits put together, that will then

00:03:27,760 --> 00:03:36,129
layout the render tree, it will put it when you have absolute position it will know to

00:03:36,129 --> 00:03:42,790
do all of that and then painting is the operation of drawing the graphics and giving you the

00:03:42,790 --> 00:03:43,879
visual output.

00:03:43,879 --> 00:03:52,470
If we go to parsing, there are a few things about parsing for HTML that are a bit different

00:03:52,470 --> 00:03:57,489
to most languages, it's very for giving by nature you can make a lot of mistakes and

00:03:57,489 --> 00:04:02,629
it will just work, that's one of the great things about web development, you can make

00:04:02,629 --> 00:04:08,120
a lot of mistakes and it will still work for you, that means that the parsing isn't straightforward,

00:04:08,120 --> 00:04:13,060
in most languages if you make a mistake or throw an error, it will error out, HTML will

00:04:13,060 --> 00:04:21,150
try to recover. It can be halted, so we will go into when it can stop parsing in certain

00:04:21,150 --> 00:04:26,960
situations, wilt do speculative parsing, that's kind of a big word, will go into what that

00:04:26,960 --> 00:04:31,710
means soon and re-entering, that probably means nothing to you right now, we'll explain

00:04:31,710 --> 00:04:34,490
what that means as we go.

00:04:34,490 --> 00:04:43,749
There was a stage when we did try to do strict parsing, but if you made a mistake you got

00:04:43,749 --> 00:04:48,770
an error page, that was a pretty bad experience, if you put something in production that had

00:04:48,770 --> 00:04:52,589
a mistake that is what your visitor received, it will take over your whole page and say

00:04:52,589 --> 00:04:59,270
there is an error in the HTML, you can't always control the HTML rendered on your page if

00:04:59,270 --> 00:05:04,039
you have dynamic content et cetera.

00:05:04,039 --> 00:05:12,080
So if we look at valid HTML, this is validation, you can see I'm missing the HTML tag, the

00:05:12,080 --> 00:05:17,949
head tag, I'm not even closing my tags, I'm not even putting quotes around my attributes,

00:05:17,949 --> 00:05:23,869
so the parse has to handle this, you see what it actually outputs in the end once it's taken

00:05:23,869 --> 00:05:31,360
that in, will be that, so it will implicitly insert the HTML in the head tags for you,

00:05:31,360 --> 00:05:36,960
close the tags and put quotes round the attributes and handle the paragraph and the div, if you

00:05:36,960 --> 00:05:43,979
see that you would think the div should be inside the paragraph, but it knows for the

00:05:43,979 --> 00:05:49,990
rules of parsing that it actually can't do that and it, it has to handle that and figure

00:05:49,990 --> 00:05:57,400
it out for you it's pretty for giving in the way it handles it.

00:05:57,400 --> 00:06:04,069
So the parsing flow, these are terms common to, if you have learnt about parsing or not,

00:06:04,069 --> 00:06:08,610
so there is tokenisation, that takes the text and turns it into what are called tokens,

00:06:08,610 --> 00:06:15,219
that will create the parse tree, that will then create the DOM tree which we all interact

00:06:15,219 --> 00:06:20,279
with JavaScript, that's the thing you look at in the browser when you are creating or

00:06:20,279 --> 00:06:25,849
querying the DOM, that's what you are looking at. We'll just, we won't going to the script

00:06:25,849 --> 00:06:29,349
execution bit, we'll cover that later.

00:06:29,349 --> 00:06:40,689
So parsing, as each character comes in through the token, it will have special cases, an

00:06:40,689 --> 00:06:45,689
open tag, it will read the next bunch of characters and then say that's the tag name, look for

00:06:45,689 --> 00:06:51,259
a closing tag and create a token called 'Start tag', then on the other end it will look for

00:06:51,259 --> 00:07:01,009
> close tag, that's how it works out everything is positioned, in the example where I didn't

00:07:01,009 --> 00:07:02,529
have that, if it finds

00:07:02,529 --> 00:07:10,649
an open tag, or not a close tag it will automatically close it, that's simple rules, it will go

00:07:10,649 --> 00:07:13,809
through each character and figure out the tokens.

00:07:13,809 --> 00:07:21,979
That will create a parse tree, so parse tree is representation of your HTML, it's pretty

00:07:21,979 --> 00:07:28,999
much one-to-one, you can see there, it's got all the elements in there, paragraph, div,

00:07:28,999 --> 00:07:33,789
then they will take the parse tree and make it into the DOM tree, it's all the DOM elements,

00:07:33,789 --> 00:07:36,659
that's where you interact with the JavaScript in the page.

00:07:36,659 --> 00:07:46,009
So, there are certain situation where I said it will actually stop the parsing of the HTML,

00:07:46,009 --> 00:07:51,740
so when it hits a script tag it needs to actually stop, fetch it for the network, if it's a

00:07:51,740 --> 00:07:58,889
non-new line script and then it will have to pause, it will have to execute that and

00:07:58,889 --> 00:08:00,469
then continue on.

00:08:00,469 --> 00:08:08,509
So, if you have that in your page it will actually make it slower to render to the page.

00:08:08,509 --> 00:08:15,539
So things like network latency, et cetera. Link and style can also affect it as well,

00:08:15,539 --> 00:08:24,499
if the script needs to query information about a DOM element, a type or it can affect the

00:08:24,499 --> 00:08:29,419
parsing while it's doing that.

00:08:29,419 --> 00:08:35,399
So there is speculative parsing, what it will do, it will twiddle its thumbs while it's

00:08:35,399 --> 00:08:42,130
pausing for the script to execute, down loading and executing, it will create another threat,

00:08:42,130 --> 00:08:47,210
another process with the browser and it will actually look ahead, so if you have got images

00:08:47,210 --> 00:08:52,490
or style sheets it will actually go ahead and fetch all those before it continues on

00:08:52,490 --> 00:08:58,000
parsing the page, it's actually kind of smart about that.

00:08:58,000 --> 00:09:03,290
The other weird thing about HTML, if we go back to that diagram is that it's re-enter,

00:09:03,290 --> 00:09:08,750
it can be interrupted, when it gives the describe tag it can bring it down, something like document,

00:09:08,750 --> 00:09:17,500
dot, you can edit the HTML on the fly it needs to go through that on the fly, if you download

00:09:17,500 --> 00:09:25,500
JavaScript and too document dot right, you can redo the tree, redo the DOM, that can

00:09:25,500 --> 00:09:26,780
slow it down.

00:09:26,780 --> 00:09:37,650
So I come to the first performance insight. You may have been told, put your script that

00:09:37,650 --> 00:09:45,570
bottom, but never, never known why. So now we know that a script tag will which stop

00:09:45,570 --> 00:09:51,660
the parser from going through all the HTML, constructor and DOM tree, if we do it at the

00:09:51,660 --> 00:09:56,740
bottom it can go through and do it uninterrupted, it won't need any script tags, create all

00:09:56,740 --> 00:10:01,530
the elements, create the DOM tree, at the end you will get all the scripts and it will

00:10:01,530 --> 00:10:08,930
be faster to render. If that's not an option, there are attributes, defer, that's in IE

00:10:08,930 --> 00:10:17,210
a long time most browsers support it, defer will actually defer the execution until it's

00:10:17,210 --> 00:10:24,390
actually done parsing. Async will work slightly differently it will do a separate thread and

00:10:24,390 --> 00:10:35,440
actually parse and execute the script in that thread adjacent to the parsing one. The DOM

00:10:35,440 --> 00:10:45,660
document property, if you are waiting for that, is deferrable... deferrable will...

00:10:45,660 --> 00:10:51,620
will stop DOM content loading from actually firing and async won't. So you can put it

00:10:51,620 --> 00:11:01,450
at the bottom or put either defer or async on your scripts it's a trade-off between them.

00:11:01,450 --> 00:11:08,570
So this parsing stop of visualised in the form of a gif. So it's kind of like my first

00:11:08,570 --> 00:11:13,570
website, what the parsing looks like. So you can see it's quite, it never actually quite

00:11:13,570 --> 00:11:15,390
falls over! {Laughter} .

00:11:15,390 --> 00:11:20,780
Trying to figure out what the hell are you doing with that div tag, you can see at the

00:11:20,780 --> 00:11:30,000
end he just chucks the spade, there you go, there's your website! {Laughter} .

00:11:30,000 --> 00:11:38,430
I thought that was pretty good. CSS parsing, I'm not going to say too much about CSS parsing,

00:11:38,430 --> 00:11:44,420
it's pretty standard, if you have done it in other languages, there is nothing special

00:11:44,420 --> 00:11:53,450
about it, it will create the CSS object model, like the DOM object model, basically it's

00:11:53,450 --> 00:12:01,800
a representation of your styles, you have a style sheet, rules, selectors, decorations

00:12:01,800 --> 00:12:02,800
and so on.

00:12:02,800 --> 00:12:08,410
So that will then move on to our second stage of combining those two, so we have got a DOM,

00:12:08,410 --> 00:12:14,180
CSS object model and that will go into and create what's called the render or the frame

00:12:14,180 --> 00:12:15,480
tree.

00:12:15,480 --> 00:12:21,680
So, accommodation, you combine the two object models, style resolution, that means it will

00:12:21,680 --> 00:12:26,790
figure out all the styles applied to nodes, it's the actual representation of what will

00:12:26,790 --> 00:12:31,920
show on the screen, it's not a one-to-one mapping of your HTML.

00:12:31,920 --> 00:12:39,070
I'll explain what that means in a second. So if we revisit that diagram, you can see

00:12:39,070 --> 00:12:48,180
that parsing HTML and CSS isn't always necessarily can happen in parallel. JavaScript can affect

00:12:48,180 --> 00:12:51,540
those two running at the same time.

00:12:51,540 --> 00:12:59,240
So, the render tree is actually multiple trees, there are like four of them, render objects

00:12:59,240 --> 00:13:05,190
which are kind of like the actual node itself, it's got a refer to the DOM node, hanging

00:13:05,190 --> 00:13:10,680
off that the render style, so that's kind of like the styles that apply to that DOM

00:13:10,680 --> 00:13:11,310
element.

00:13:11,310 --> 00:13:18,720
You have got things like layers, so the browser needs to know if it's positioned absolute,

00:13:18,720 --> 00:13:25,760
or if it has a z index on it where to place it on the page so it puts it in the right

00:13:25,760 --> 00:13:30,420
order. Then line boxes, if you are wrapping text it needs to know how to lay that out

00:13:30,420 --> 00:13:39,450
as well, based on font size, the constraints of what's inside, it gets a bit complex.

00:13:39,450 --> 00:13:44,560
So, like I said it's not a one-to-one mapping, things that are not in the render tree are

00:13:44,560 --> 00:13:50,600
all non-visual elements, so your head, your script, your titles, any node that is actually

00:13:50,600 --> 00:13:57,660
hidden by display-none, or nodes that are apparent by hidden display-none, won't make

00:13:57,660 --> 00:14:04,390
it into the render tree it doesn't need to show on the page.

00:14:04,390 --> 00:14:09,540
If you look at things in the render page but not in the DOM, it's quite a lot of text to

00:14:09,540 --> 00:14:16,680
look at, we can look at the top, a paragraph tag, so we've got a sentence and then we have

00:14:16,680 --> 00:14:22,880
got two in line tags, strong and emphasise tag. On the left hand side, down the bottom

00:14:22,880 --> 00:14:27,550
there, you can see that's actually what the render tree looks like, a render block assigned

00:14:27,550 --> 00:14:29,529
to the tag, a block

00:14:29,529 --> 00:14:36,550
level element, in side there it's got a text, then it hits the strong tag, inside that it's

00:14:36,550 --> 00:14:43,980
got some text emphasised and so on and so on, hanging off that render box this line

00:14:43,980 --> 00:14:48,850
indexes, that will figure out based on the constraints of where it's rendering, if it

00:14:48,850 --> 00:14:55,880
needs to wrap the text it will create a line box, a box round each line of text, 'The quick

00:14:55,880 --> 00:15:00,290
brown fox', was one line and 'Jumps over the lazy dog', would be the second box, that's

00:15:00,290 --> 00:15:06,640
two separate line boxes, you can see, there are two separate line boxes, it knows how

00:15:06,640 --> 00:15:13,720
to lay it out, it will change it if you change an element or the browser will now need to

00:15:13,720 --> 00:15:18,750
figure out what's now in different lines.

00:15:18,750 --> 00:15:26,930
So, the DOM node, like I said, is converted to a render object, or the render object has

00:15:26,930 --> 00:15:33,720
a reference to the DOM node, it's a visual output of what's shown on the page, geometric

00:15:33,720 --> 00:15:41,190
information about it, it's width and height, it can layout and paint itself, so it will

00:15:41,190 --> 00:15:47,300
work out where it sits on the page in relation ship to everything else, it's if it's floating

00:15:47,300 --> 00:15:53,839
it will need to have multiple element, if it's positioned at absolute it's taken out

00:15:53,839 --> 00:16:02,160
of the flow and positioned based on, like, if a parent has position-relative for example.

00:16:02,160 --> 00:16:08,230
It will hold styles and computer metrics about itself, so it will hold, you know it's font

00:16:08,230 --> 00:16:10,670
size, width and height.

00:16:10,670 --> 00:16:21,480
So, hopefully this will work, it's a really cool video of... if it loads... someone hacked

00:16:21,480 --> 00:16:29,060
the Mozilla Firefox and actually true boxes around, as it's laying out a page, it's slowed

00:16:29,060 --> 00:16:37,380
down quite a lot, you can see it's actually figuring out dimensions, it's laying out all

00:16:37,380 --> 00:16:42,490
its children and figuring out the position, it starts top left of the box and works out

00:16:42,490 --> 00:16:44,570
where it needs to sit.

00:16:44,570 --> 00:16:52,940
I'll play that again... it's quite cool, you can see it has to do quite a lot of work,

00:16:52,940 --> 00:16:57,220
laying out all its children and then it will figure out where it is, it stops there and

00:16:57,220 --> 00:17:01,730
it slide down.

00:17:01,730 --> 00:17:07,339
This is not a very complex website, you can imagine something with quite a lot of stuff

00:17:07,339 --> 00:17:10,449
going on, it needs to do quite a lot of work.

00:17:10,449 --> 00:17:25,240
I always like watching this, it's really cool.

00:17:25,240 --> 00:17:28,659
Right. So,, so how it lays out the information, it calculates all the visual properties, it

00:17:28,659 --> 00:17:33,450
has to combine all the style, so, that means the browser default styles the external styles

00:17:33,450 --> 00:17:39,139
you are linking to, any inline style elements or any inline styles, also take into account

00:17:39,139 --> 00:17:45,570
some of the old HTML element, properties, attributes like VGA colour, have to take that

00:17:45,570 --> 00:17:51,110
into account to set a background colour if that's on there as well. There's a lot of

00:17:51,110 --> 00:17:57,269
complexity round matching rules for each element which I won't go into because its quite a

00:17:57,269 --> 00:18:01,840
big subject, and how it shares the styles and how it does the cascade all those rules

00:18:01,840 --> 00:18:09,899
round how CSS works. Do the style computation, work out information about, it so colours

00:18:09,899 --> 00:18:19,929
to apply, width and height et cetera. Now we're into the layout process, this is we

00:18:19,929 --> 00:18:25,999
have got our tree, render tree with our visual information like the video I showed where

00:18:25,999 --> 00:18:31,429
you could see all the elements moving round the page, you might have heard it called reflow

00:18:31,429 --> 00:18:38,369
or relayout as well if you transfer it.

00:18:38,369 --> 00:18:44,529
So it's a recursive process, hopeful remember what recursion is, so it will work it's way

00:18:44,529 --> 00:18:51,389
down the tree, then as if we remember each render project that's you sign too DOM node

00:18:51,389 --> 00:18:59,330
how to lay itself it will layout it's children first, it needs to know based on all the dimensions

00:18:59,330 --> 00:19:05,429
of the children what height and what width it should be, layout its children, then layout

00:19:05,429 --> 00:19:09,419
itself, then flow all the way through the tree of your render tree then figure out where

00:19:09,419 --> 00:19:14,860
everything sits

00:19:14,860 --> 00:19:20,549
It will batch layout, so it will do incremental layout the browser will be intelligent, every

00:19:20,549 --> 00:19:26,369
time you do a change it won't do a relay out yes I did will combine them all and do them

00:19:26,369 --> 00:19:32,259
at a regular interval so essentially when something changes in a DOM the render tree

00:19:32,259 --> 00:19:40,009
representation will say flag itself as dirty so saying I need to re layout the browser

00:19:40,009 --> 00:19:45,470
will come a longer pick up all the objects that need layout and lay them out in one go

00:19:45,470 --> 00:19:53,940
rather than individually that will traverse the tree using recursion, find all the dirty

00:19:53,940 --> 00:19:57,720
render objects, because I need to layout all these bits and figure out where everything

00:19:57,720 --> 00:20:07,610
sits. This will happen so it won't block. However this immediate layout where it needs

00:20:07,610 --> 00:20:15,590
to layout the entire document for example if you change the font size, if you have a

00:20:15,590 --> 00:20:20,289
fall back font then I font face coming the height of the fight might change slightly

00:20:20,289 --> 00:20:24,710
that will cause a whole layout of the page it needs to figure out where everything sits

00:20:24,710 --> 00:20:29,830
again because it shifts down that will also happen when you resize the browser and also

00:20:29,830 --> 00:20:37,429
when you access certain JavaScript properties like node.offset height you want to get the

00:20:37,429 --> 00:20:41,600
height to give you the proper value.

00:20:41,600 --> 00:20:49,399
Comes to performance inside number 2. We want to make note from the browser and we want

00:20:49,399 --> 00:20:56,110
to batch our changes. We want to act like a browser do all your DOM changes in one go

00:20:56,110 --> 00:21:03,309
than rewrite you want to do all your reads in one pass all your writes, and just show

00:21:03,309 --> 00:21:05,730
here a bad example.

00:21:05,730 --> 00:21:12,460
So this code is trying to create like a aspect ratio four div, so like a 16:9 it’s reading

00:21:12,460 --> 00:21:20,769
its width dividing it by 1.7, you get height like 16:9 resolution. You can see here I am

00:21:20,769 --> 00:21:26,580
reading the client width, and then I am writing it to the DOM, I am reading, it writing it.

00:21:26,580 --> 00:21:32,210
What that force it to do if I reading it then writing it that's fine but if I read it again

00:21:32,210 --> 00:21:36,299
oh crap I need to layout the page need to give you the true dimension for the client

00:21:36,299 --> 00:21:42,019
width because div 2 could have changed cause of div 1 has got a different height now that

00:21:42,019 --> 00:21:49,489
could affect div 2 that needs to go and layout the page and give you the correct value.

00:21:49,489 --> 00:21:52,840
So the best way to too that is actually to too your reads in one go and your writes in

00:21:52,840 --> 00:21:58,659
one go. So you want to read all the values back, and then you want to write them in one

00:21:58,659 --> 00:22:06,919
go. So this is obviously naive code, so the real world situation is there's a library

00:22:06,919 --> 00:22:11,820
you're not using your framework of a DOM which is pretty good, a pretty good article calling

00:22:11,820 --> 00:22:18,710
preventing layout thrashing which talks about reading writing, reading writing, which I

00:22:18,710 --> 00:22:24,690
highly recommend you read. Fast DOM will give you an API to do all your reads you called

00:22:24,690 --> 00:22:30,399
fast DOM.read when you want to read something from the DOM, and likewise if you do write

00:22:30,399 --> 00:22:34,909
it will co-ordinate the process for you so it will make sure it will batch all the reads

00:22:34,909 --> 00:22:39,720
then do all the writes one after the other. Most

00:22:39,720 --> 00:22:47,399
modern JS framework will do this internally, it will do so does ember with their newer

00:22:47,399 --> 00:22:49,779
rendering.

00:22:49,779 --> 00:22:58,940
So finally we are on to 4, paint. This is what takes all the information from the render

00:22:58,940 --> 00:23:04,369
tree and will actually do the calls to actually paint something. So kind of think of it like

00:23:04,369 --> 00:23:09,899
the canvas API where you are drawing boxes, paint uses the process of taking all the information

00:23:09,899 --> 00:23:15,049
from the render tree and gives you the visual output.

00:23:15,049 --> 00:23:18,639
There's a few things about it, it will take so it will layout the render tree, take all

00:23:18,639 --> 00:23:22,639
that information you have done the layout so it knows where it sits the co-ordinates

00:23:22,639 --> 00:23:30,379
of the items, it will create layers, so layers of things you have got a position absolute,

00:23:30,379 --> 00:23:38,799
make that work from the bottom up things display correctly, it's an incremental process, and

00:23:38,799 --> 00:23:46,320
actually there's a 12 step phase, it needs to paint like the background colour and image,

00:23:46,320 --> 00:23:52,499
the porters, the shadows et cetera build it up so it comes out in the correct order you

00:23:52,499 --> 00:24:00,960
have got the correct rendering it's quite a heavy process. So if we remember one of

00:24:00,960 --> 00:24:05,519
the trees of the render trees or render layers will try to group things into layers if you

00:24:05,519 --> 00:24:12,720
got a position absolute element all it's children will be in it's own layer if its got transparency,

00:24:12,720 --> 00:24:19,190
if it's got over flow hidden it's I canvas or video it will put it into it's own layer.

00:24:19,190 --> 00:24:28,659
It's kind of a many to 1 one layer can have many render objects over DOM nodes it can

00:24:28,659 --> 00:24:32,239
put on the screen.

00:24:32,239 --> 00:24:41,429
Painting, so painting will also produce what's called a bitmap for each layer, so this used

00:24:41,429 --> 00:24:47,359
to be CPU based but a lot of browsers now do it on the graphics card on the GPU, so

00:24:47,359 --> 00:24:51,889
that’s lot faster the GPU is obviously made for drawing graphics, there some really good

00:24:51,889 --> 00:25:04,139
articles about a Blink and Webkit do it, it will take that bitmap like a jpeg upload it

00:25:04,139 --> 00:25:11,149
to the GPU create what's called a texture, those textures will be composit he'd into

00:25:11,149 --> 00:25:23,009
at file image it's a bunch of images they get put together put on the screen.

00:25:23,009 --> 00:25:29,499
This comes to performance inside number 3, so inline critical CSS this is a new thing

00:25:29,499 --> 00:25:35,350
you might have seen. Essentially it’s a way of taking the most important bits of your

00:25:35,350 --> 00:25:43,999
site and inlining the CSS in a style tag inside your HTML right in the head, that will speed

00:25:43,999 --> 00:25:49,109
up first paint times so you delay everything else you delay all your other CSS all your

00:25:49,109 --> 00:25:53,980
other JavaScript, so then the browser can come in parse all your HTML, you can get something

00:25:53,980 --> 00:25:59,730
on the screen really fast, you will see lots of sites like filament group, a lot of people

00:25:59,730 --> 00:26:08,639
really into performance talk about this a lot. The last bit about delta last bitmap,

00:26:08,639 --> 00:26:13,999
browsers performance where they can compare the last paint to next paint they can do a

00:26:13,999 --> 00:26:20,929
dif when you do visual regression testing they can do something where they go ok only

00:26:20,929 --> 00:26:28,070
this bit changed I only have to draw this box here, it can be smart about it.

00:26:28,070 --> 00:26:33,239
So we take an example I don't actually do this on my website but I went into the DevTools,

00:26:33,239 --> 00:26:42,359
this is my blog, so the idea is that on the first render I would get this, essentially

00:26:42,359 --> 00:26:46,980
the most important thing of a blog is the blog content we care about related articles

00:26:46,980 --> 00:26:53,080
or my logo or the blog title you just want to read the article. The ready idea is you

00:26:53,080 --> 00:27:00,529
render that straight away on second part when everything loads asynchronously you get everything

00:27:00,529 --> 00:27:01,830
else coming in,

00:27:01,830 --> 00:27:15,039
you can see there I have got a different font that is helvetica, comes in and you set ubuntu,

00:27:15,039 --> 00:27:19,850
you get that in under a second you could have that on the users screen so it gives an illusion

00:27:19,850 --> 00:27:23,529
that your site is really fast but what you are doing is delaying all the stuff and giving

00:27:23,529 --> 00:27:27,429
them the important information. I guess the other thing is to think about is that you

00:27:27,429 --> 00:27:32,820
don't want stuff to shift round so like the header up the top you want to have fixed height

00:27:32,820 --> 00:27:38,379
so inline CSS so it doesn't jump, you kind of want to make it not jump as much so it's

00:27:38,379 --> 00:27:44,669
not jarring to the user.

00:27:44,669 --> 00:27:49,919
So all of these tips I have talked about apply after page load as well, this the process

00:27:49,919 --> 00:27:55,690
to get it on the page initially but things like layout and paint all happen as you interact

00:27:55,690 --> 00:28:00,340
with the website it's so really important information to know about.

00:28:00,340 --> 00:28:11,570
For recap, we parse our CSS and our HTML that creates a DOM tree, the DOM tree then gets

00:28:11,570 --> 00:28:19,479
converted into a render tree, so the CSS and the HTML combined. It's actually 4 trees so

00:28:19,479 --> 00:28:31,059
the layers, the line boxes, the render objects, and the render styles. So layout is a process

00:28:31,059 --> 00:28:35,090
where it computes where the elements will appear on the page, based on it's relationship

00:28:35,090 --> 00:28:40,029
to other elements, taking into account all the CSS, then painting will actually produce

00:28:40,029 --> 00:28:46,139
an image of that layer give you the visual output you are expecting on the page. Like

00:28:46,139 --> 00:28:50,320
I said this process is really complicated I have little scratched the surface, there

00:28:50,320 --> 00:28:54,739
are some really great articles I will share round later I highly recommend you check it

00:28:54,739 --> 00:29:01,259
out some really good talks in here, really good article about going more indepth on how

00:29:01,259 --> 00:29:04,259
the browser works as well.

00:29:04,259 --> 00:29:19,409
Go hug a browser engineer they have a hard job. It's really interesting it's made me a better developer

00:29:19,409 --> 00:29:22,499

YouTube URL: https://www.youtube.com/watch?v=SmE4OwHztCc


