Title: Alejandro Oviedro: A fifth of century | JSConf EU 2015
Publication date: 2015-10-09
Playlist: JSConf EU 2015
Description: 
	This last May JavaScript turned 20 years old. I want to look at how we are used to code with the current standard (ES5) and how it would be to use JavaScript’s first version in retrospective. We’re going to talk about the path through Mocha, LiveScript, JavaScript, ECMAScript 1, 2,3,5 and the latest ECMAScript 2015 and 2016.

Intro music by @halfbyte
Captions: 
	00:00:25,539 --> 00:00:31,570
Hello everyone, my name is Alejandro, I'm from Buenos Aires, Argentina. Can we look at the slides

00:00:31,570 --> 00:00:46,350
please. Can you unlock the Mac, please. Well, from Buenso Ares, a beautiful city. Where

00:00:46,350 --> 00:00:51,949
you can dance tang go eat a great stake and have some of the best wine in the world. If

00:00:51,949 --> 00:01:03,909
you like any of those things, you should definitely come and visit us. Awesome. Tango. I have

00:01:03,909 --> 00:01:09,689
been writing JavaScript for a living for the last three years, I'm also a member of the

00:01:09,689 --> 00:01:16,610
node school Buenos Aires chapters, if you want, come and find me after the talk, I have

00:01:16,610 --> 00:01:26,310
stickers. Maybe some of you heard that JavaScript turned 20 years this last May. I think that's

00:01:26,310 --> 00:01:31,880
a really, really awesome milestone. How many of you have been writing JavaScript for more

00:01:31,880 --> 00:01:40,780
than five years? Okay, that's awesome, that's kind of fifty or 70 percent. How many for

00:01:40,780 --> 00:01:52,310
more than ten years? Okay, we have 30 percent. How many for more than five teen years? Oh,

00:01:52,310 --> 00:01:58,780
that's incredible. You should definitely talk with them. They are very interesting people.

00:01:58,780 --> 00:02:04,810
And I know a lot of you are thinking, but, Aljeantr that's crazy nobody would ever think

00:02:04,810 --> 00:02:15,290
of writing JavaScript 15 years ago and live without it. So, what I'm trying to talk about

00:02:15,290 --> 00:02:24,060
today is JavaScript is the compiled 2 target for many programming languages today like

00:02:24,060 --> 00:02:32,620
tide script, closure, dart and many, many more. And Surma talked about this on Friday

00:02:32,620 --> 00:02:42,939
about the state of the industry today. Also JavaScript has been years to control electronics,

00:02:42,939 --> 00:02:48,040
to control row boats, drones, even the lights of a conference room, if you stayed up late

00:02:48,040 --> 00:02:55,879
on Friday, I think that's awesome. Everyone here could say the future of JavaScript lacks

00:02:55,879 --> 00:03:00,809
promising. But I wound ‑‑ looks promising ‑‑ but I wonder, do we know where we came from,

00:03:00,809 --> 00:03:09,659
do we know what makes JavaScript suitable for real world applications? I hope by the

00:03:09,659 --> 00:03:17,559
end of the talk you wall have really good opinion on those questions. So, particularly,

00:03:17,559 --> 00:03:30,889
we're going to talk about ECMA script, which is the standard that which JavaScript is regularized.

00:03:30,889 --> 00:03:40,680
And the latest version is 2015 AKA version 6. We will go through all the transition between

00:03:40,680 --> 00:03:46,769
the previous versions to the very first one. And after, that we're going to walk about

00:03:46,769 --> 00:03:54,279
the time from the first release to the invention of the language and last we're going to talk

00:03:54,279 --> 00:04:08,069
about how the process changed committee of ECMA script is working on the next releases.

00:04:08,069 --> 00:04:15,730
Let's go and talk about the transition from ES2015 to ES 5 and even if we had a full day

00:04:15,730 --> 00:04:23,490
talking about ES6, I think we will have some futures how we got ‑‑ it's really big,

00:04:23,490 --> 00:04:29,250
and I have very short list of some of the most important features and controversial

00:04:29,250 --> 00:04:36,729
too, which are classes RO functions the iter raptors, proxies, destructuring, let and Const

00:04:36,729 --> 00:04:47,040
and many more. For you to get an idea of how big JavaScript is in the version 6, we have

00:04:47,040 --> 00:04:54,010
here a graph that shows us from the left the first release of the ECMA script standard,

00:04:54,010 --> 00:04:59,150
and on the right, we have the last one. In the vertical access, wev the pictures per

00:04:59,150 --> 00:05:10,200
speck ‑‑ thee we have the pages per Spec, we can see the first two are quite the same.

00:05:10,200 --> 00:05:17,230
In the third one we have a ‑‑ pages and the same for the ES 5spec, but in the last

00:05:17,230 --> 00:05:27,070
one we have more double pages. So it's quite big. And if you don't know about any of these

00:05:27,070 --> 00:05:36,040
features that we talked about I would strongly suggest that you first start learning. Here

00:05:36,040 --> 00:05:42,720
are some of the books that you could use in the process of learning ES6, I think the second

00:05:42,720 --> 00:05:51,100
one is not yet finished. You could ask Axel, I think he's around here. Let's go and talk

00:05:51,100 --> 00:05:59,710
about the transition from ES 5 to ES 4. Or what what would have been the JavaScript version

00:05:59,710 --> 00:06:10,910
2. Turns out, we didn't have an ES4 release, and I think the main reason for that is because

00:06:10,910 --> 00:06:17,680
the actual proposal for ES 4 would break the system web at that moment. I think that's

00:06:17,680 --> 00:06:26,350
a very compelling reason for not to release that. Many people from Adobe Mozilla and Apple

00:06:26,350 --> 00:06:35,500
were work on what has been done the version of ES 4 and at the same time, another group

00:06:35,500 --> 00:06:44,400
lead by Microsoft and Yahoo were working on ES 3.1, a "fixed" version of ES 3. And the

00:06:44,400 --> 00:06:52,640
work being done in ES 3.1 was tightly coupled with what ES 4 would be, so that ended up

00:06:52,640 --> 00:07:00,980
in a struggle between both groups and getting consensus from both was really difficult.

00:07:00,980 --> 00:07:09,480
From that struggle, harmony agenda was created. And that lead to the future release that we

00:07:09,480 --> 00:07:18,780
know today ES 5. ES 4 had also some successors like action script version 3, which was, in

00:07:18,780 --> 00:07:29,500
fact, a fork of JavaScript the work at Microsoft at that moment. Here we have an extract from

00:07:29,500 --> 00:07:37,810
a Blog post from Douglass Crockfrrord E.S 4 was so large and innovative there were doubts

00:07:37,810 --> 00:07:44,990
that it could be successful as specified and implemented. I think what Douglass here is

00:07:44,990 --> 00:07:52,960
trying to tell us is that he didn't ‑‑ they didn't think on among lairty, they were

00:07:52,960 --> 00:08:01,030
too ambition in the standards body ‑‑ they were trying to innovate in a standards

00:08:01,030 --> 00:08:08,980
body Douglass later in a Blog post said he thinks it should be the other way around,

00:08:08,980 --> 00:08:18,389
innovation should happen outside the standard. So, any way, let's talk about the previous,

00:08:18,389 --> 00:08:26,790
the actual previous version of ES 5, which was ES 3, for you to get an idea of the context,

00:08:26,790 --> 00:08:33,529
what was happening another that moment, we have a short timeline. ES 5 was published

00:08:33,529 --> 00:08:41,729
on the year 20 09D and previously in the year 2006 was the first release of J query that

00:08:41,729 --> 00:08:50,959
same year AJAX was being standardized by the W3C committee N the year 200 40 , we have

00:08:50,959 --> 00:08:55,670
the release of J mail, one of the first web applications (Gmail one of the first web applications

00:08:55,670 --> 00:09:05,360
that pushed JavaScript limits. In the year 2000 we have a black hole and the draft for

00:09:05,360 --> 00:09:12,269
ES 3 was publish in the the year 1999. So we have a span of ten years that there was

00:09:12,269 --> 00:09:25,170
no new releases. Here we have Douglass and Crawford in one of the meetings, I don't want

00:09:25,170 --> 00:09:31,470
to say which one is on the left and which one is on the right (Laughing) so let's talk

00:09:31,470 --> 00:09:40,009
about what ES 5 actually introduced or we didn't have in ES 3. One of the most important

00:09:40,009 --> 00:09:49,899
things, I think is strict mode, strict mode helped us to avoid global links to avoid us

00:09:49,899 --> 00:10:03,309
weird coercion problems with con instructors, and help us with Constroctors, introduced

00:10:03,309 --> 00:10:15,779
betters and setters, higher order array like RI.map and RI .4H, so JSON, who remembers

00:10:15,779 --> 00:10:28,800
adding the JSON.JS to the library of HTML. Not so many, awesome. Other methods like object.sale

00:10:28,800 --> 00:10:34,519
and object.freeze, which were great if you are in differentialsive programming paradigm

00:10:34,519 --> 00:10:43,410
(Object.seal) one of the things that actually got my attention was that undefined wasn't

00:10:43,410 --> 00:10:49,790
mutable. And I think, this is in the year 2009, and what I mean with immutable is that

00:10:49,790 --> 00:10:58,420
you could do something like this, you could make an assignment to undefined and that actually

00:10:58,420 --> 00:11:05,610
would take effect and supported.UI the third party script to your page. Itaú BBA will

00:11:05,610 --> 00:11:16,790
totally break your type check on your undefined variables. And I think that's sucks (Laughing)

00:11:16,790 --> 00:11:24,040
let's go on the next transition from ES 3 to ES 2. For you to have an idea was the previous

00:11:24,040 --> 00:11:33,970
year of the release of ES 3. ES 3 introduced one of the most important parts for popular

00:11:33,970 --> 00:11:41,639
handling which was try/catch, we didn't have that before ES 3, which was insane. Some of

00:11:41,639 --> 00:11:49,029
these trick comparison, that Dimitri told us on Friday that you should not depend on

00:11:49,029 --> 00:12:00,149
strict comparison. And instanceof operator. Function.apply, which was useful for method

00:12:00,149 --> 00:12:08,079
borrowing and functional programming paradigm. The switch statement. Function expressions.

00:12:08,079 --> 00:12:15,189
An some of the others array helpers such as slice, splice, contact, reverse and many,

00:12:15,189 --> 00:12:24,689
many many more. For you to have an idea of what the people was thinking of, during the

00:12:24,689 --> 00:12:34,019
specification here are some reserved words for ES 2, which are a lot, if you know most

00:12:34,019 --> 00:12:43,679
of these features and key words, it's because from 40 of them, 38 are also a Java key word.

00:12:43,679 --> 00:12:53,759
And this should tell us that the people working in the specification would denied they were

00:12:53,759 --> 00:13:04,759
trying to make JavaScript to look like a Java‑like programming, which was in fact unfortunate.

00:13:04,759 --> 00:13:13,910
Going from the ESG to ES 1 specification we at no time have too much changes, which should

00:13:13,910 --> 00:13:24,929
be normal because it was only 7 pages difference. But let's come out from the first release

00:13:24,929 --> 00:13:32,139
of the specification to the actual creation of the language, which the name was originally

00:13:32,139 --> 00:13:44,819
Mocha. And the things that I found was quite awkward because I wouldn't ‑‑ I wouldn't

00:13:44,819 --> 00:13:52,709
had anything to read, there was no Blog post about how JavaScript or Mocha should work.

00:13:52,709 --> 00:14:01,519
So, the only thing that I had is the browser, at least the browser implementation at that

00:14:01,519 --> 00:14:10,319
moment. For you to have an idea of the context was the year '95 and other inventions that

00:14:10,319 --> 00:14:17,619
year was the Java programming language, Ruby and PHP which seemed a really good year to

00:14:17,619 --> 00:14:30,220
inSeptember a language. One of the features I found on browser implementation was that

00:14:30,220 --> 00:14:36,379
con instructor property couldn't be set by assignment. This was the actual error message

00:14:36,379 --> 00:14:44,319
that the browser would send to you if you tried to assign to that property, I don't

00:14:44,319 --> 00:14:55,119
know if this was a browser limitation or it was on the original JavaScript spec. You didn't

00:14:55,119 --> 00:15:05,029
have any acor object literals, so for creation of objects and arrays you would have to write

00:15:05,029 --> 00:15:12,360
the whole new object, new array, can you imagine that, using nine characters? That's crazy.

00:15:12,360 --> 00:15:20,679
And, at that point, any JavaScript error would open up a pop up in your browser, which was,

00:15:20,679 --> 00:15:31,129
it seems really bad decision. And I learned this because by accident I typed in Google

00:15:31,129 --> 00:15:38,559
and press enter and what happened next was a really nice rainbow of pop ups saying that

00:15:38,559 --> 00:15:47,300
you had a lot of errors because it was ES 5, of course. Nobody would ever run ES 1.

00:15:47,300 --> 00:15:55,049
And if ‑‑ after too many of those pop ups, you would have another one saying that

00:15:55,049 --> 00:16:04,459
you would have too many errors, that kind of sarcastic. (Laughing) for method implementations

00:16:04,459 --> 00:16:11,439
on the global option, you would have something like this if you tried to check if something

00:16:11,439 --> 00:16:21,389
is undefined. And my reaction was, well, you're kind of ‑‑ true, it's true, undefined

00:16:21,389 --> 00:16:31,850
is not defined. (Laughing) and then I realized, oh, you're asking me to implement undefined,

00:16:31,850 --> 00:16:40,509
which was not a reference, so I wrote a pretty library that could polyfill undefine. It's

00:16:40,509 --> 00:16:50,619
called undefine.JS, and it has only one line and it seems kind of like this: So you assign

00:16:50,619 --> 00:16:56,709
to your undefine without the bar statement, so it's global, and (Without the Var statement

00:16:56,709 --> 00:17:03,059
so it's global) and you should write void, for those that are not familiar with the void

00:17:03,059 --> 00:17:11,650
operator, it would return undefined no matter what you have on the right side, and for the

00:17:11,650 --> 00:17:18,579
interesting part of this implementation on the browser, the right part doesn't have to

00:17:18,579 --> 00:17:27,209
be defined variable to that to work. So, you could write any Gibberish on the right side

00:17:27,209 --> 00:17:34,710
and it would work any way that's kind of crazy. Another implementation that I want to try

00:17:34,710 --> 00:17:42,760
was to polyfill the method option.create. And if you remember we didn't have functions

00:17:42,760 --> 00:17:50,880
expressions so to create functions you need to use the function con instructor and Dimitri

00:17:50,880 --> 00:17:57,820
audalso, for con instructor functions for functions and objects, it's the same if you

00:17:57,820 --> 00:18:03,960
write the new or ‑‑ the new or without new, it would behave the same. So I'm using

00:18:03,960 --> 00:18:13,800
that. And what I'm trying to say with this is a lot of features that we use today could

00:18:13,800 --> 00:18:24,160
have been used on the first version of JavaScript or Mocha. But, let's go back today and the

00:18:24,160 --> 00:18:33,730
future of the next specification. Turns out there was a lot of changes since the committee

00:18:33,730 --> 00:18:41,710
started working, and especially since they started working on ES6. I think they realized

00:18:41,710 --> 00:18:47,510
that the web was moving so fast that they needed faster and more predictable release

00:18:47,510 --> 00:18:55,650
processes. And that ended up in a train model adoption for releases, so right now, we should

00:18:55,650 --> 00:19:05,930
have a release of the specification, hopefully, once a year. The next ‑‑ the next change

00:19:05,930 --> 00:19:12,130
that the committee had was the incorporation of members who are not representative of major

00:19:12,130 --> 00:19:19,900
browser vendors, I think that's really great to have a really healthy committee and more

00:19:19,900 --> 00:19:30,170
diverse. And the last important change was for the committee to be as open as possible.

00:19:30,170 --> 00:19:35,730
Not open in the sense that hey, I want to be part of TC 39, yeah, sure, come in, but

00:19:35,730 --> 00:19:44,530
in the sense that all the proposals and all the meeting notes are available for anyone

00:19:44,530 --> 00:19:56,120
to read. You can join the ES discuss mail or look at the ‑‑ or look at GitHub.

00:19:56,120 --> 00:20:05,880
They have really nice organization. Here are some research that I used to prepare my talk.

00:20:05,880 --> 00:20:16,950
The last one, is a talk ‑‑ summit this February, it was featured by many TC 39 contributors.

00:20:16,950 --> 00:20:20,120

YouTube URL: https://www.youtube.com/watch?v=oUVT1HXlnls


