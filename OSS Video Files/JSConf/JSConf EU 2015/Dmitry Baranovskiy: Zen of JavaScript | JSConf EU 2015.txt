Title: Dmitry Baranovskiy: Zen of JavaScript | JSConf EU 2015
Publication date: 2015-11-09
Playlist: JSConf EU 2015
Description: 
	Long time passed since JavaScript become mainstream. And despite multiple attempts, there is still no right single way to write code in this language. Everybody is using it in their own special way and most people still fill that they are failing to tame the language.

In this talk I will try to show you what language is trying to tell us for all these years, where is real path to enlightenment or at least we could have fun and look at things we know (or pretending to ;) from unorthodox point of view. ;)

Prepare to meet JavaScript… again.

Intro music by @halfbyte
Captions: 
	00:00:20,900 --> 00:00:34,890
Thanks. All right. So, my name is Dmitry, and I am a JavaScript developer. And I guess

00:00:34,890 --> 00:00:40,889
— who is not JavaScript developer here? There are a few actually. What are you doing

00:00:40,889 --> 00:00:49,549
here? (Laughing) Well, the JavaScript is kind of funny language, and we all know this, and

00:00:49,549 --> 00:00:54,789
we all know the quirks and tricks. And there's plenty of presentations with people just showing

00:00:54,789 --> 00:01:00,749
some cool JavaScript features and then saying like, Look, you need to know that. I know

00:01:00,749 --> 00:01:05,590
since I’m smarter than you. And all these talks are kind over boring because they're

00:01:05,590 --> 00:01:18,000
not kind of useful. My talk will be sort of similar (Laughing), but I want to give a big

00:01:18,000 --> 00:01:24,909
message. The history of the software, which was how I come with the idea of talking about

00:01:24,909 --> 00:01:29,810
this stuff, is I had a conversation with a friend of mine and we were looking at some

00:01:29,810 --> 00:01:34,700
code from different people and he said, Look, you can always see if some JavaScript developer

00:01:34,700 --> 00:01:41,710
wrote some JavaScript code. It's very visible, right? Or PHP developer. And I asked him,

00:01:41,710 --> 00:01:46,829
So what do you think, how is Java code written by JavaScript developer will look like? And

00:01:46,829 --> 00:01:53,340
it made him think and made me think. How is JavaScript code written by JavaScript developer

00:01:53,340 --> 00:02:00,340
would look like? What is the pure JavaScript style? We all know, we all came to JavaScript

00:02:00,340 --> 00:02:05,659
from different backgrounds and me, personally, I was, like many, studying Basic, Clascall

00:02:05,659 --> 00:02:10,619
###check### C++ and then jump to JavaScript, and obviously when I came to JavaScript, I

00:02:10,619 --> 00:02:16,920
had a very good understanding of how the code should be written and I was completely wrong.

00:02:16,920 --> 00:02:23,090
And JavaScript hit me in the back many, many times before I finally understood. And even

00:02:23,090 --> 00:02:28,519
now, I'm not sure I understand JavaScript completely. Who actually think they know JavaScript

00:02:28,519 --> 00:02:37,950
very well? Okay, a couple misguided people, (Laughing) that's good. But most people actually

00:02:37,950 --> 00:02:49,560
not so confident, which is, I mean, maybe a good thing. So, what I want you to think,

00:02:49,560 --> 00:02:57,640
just stop for a moment, forget about React and Angular and think about pure JavaScript.

00:02:57,640 --> 00:03:04,090
What should it be like? What is the proper way? JavaScript is very flexible as we all

00:03:04,090 --> 00:03:09,030
know, we can all write it in many different ways. And I'm not here to teach you how to

00:03:09,030 --> 00:03:14,709
write JavaScript the right way. There is no right way. That's why there is the Zen of

00:03:14,709 --> 00:03:19,129
JavaScript. JavaScript is a very Zen‑based language. Sometimes I think the Brandan Eich

00:03:19,129 --> 00:03:31,579
is actually a Zen monk in this guise because it's crazy, right. So, I like to say that

00:03:31,579 --> 00:03:40,040
JavaScript is a Bruce Lee of JavaScript language, of programming languages because it's flexible.

00:03:40,040 --> 00:03:50,530
It's powerful. And it changed the whole picture. I hope he wouldn't die young. And, I like

00:03:50,530 --> 00:03:57,140
this quote of Bruce Lee, and I want to sort of point you to some of the things in JavaScript

00:03:57,140 --> 00:04:06,290
which you maybe haven't seen before and maybe didn't think about this from this direction.

00:04:06,290 --> 00:04:13,480
So this is a very popular concept of Zen Buddhism: What is the sound of one hand clapping? The

00:04:13,480 --> 00:04:21,019
answer (snaps fingers) like this is a smartass answer is not the correct one. There is lots

00:04:21,019 --> 00:04:27,950
of emptiness concept in the Zen. And there's lots of emptiness concept hidden in JavaScript,

00:04:27,950 --> 00:04:34,610
and I want to show you some of them. Of course, obvious answer when you come into these questions,

00:04:34,610 --> 00:04:42,860
what is the number which is not a number? So let's assume you have a function, something

00:04:42,860 --> 00:04:50,140
like that, something simple. You passed me a number and range and if it's inside this

00:04:50,140 --> 00:04:54,830
range, I return you this number, if it's not, I return you ‑‑ well basically people

00:04:54,830 --> 00:05:03,120
put ‑‑ if I don't know what to return, I return null. And then you check, like oh,

00:05:03,120 --> 00:05:07,320
if this is isn’t reg null equals null, do something, do something, but it will be much

00:05:07,320 --> 00:05:14,810
more JavaScript way, I would say, if this function will return you NaN; people are afraid

00:05:14,810 --> 00:05:22,310
to use NaN. I've never seen anyone embrace NaN in their code. I assume it’s because

00:05:22,310 --> 00:05:26,970
that when people met NaN, the first time when you know concatenate the string and you have

00:05:26,970 --> 00:05:31,380
a suddenly you have this NaN, NaN, NaN on the screen and you're like, Oh, shit, this

00:05:31,380 --> 00:05:36,620
NaN again. And then everytime you see Nan, you’re like, Oh! I don't want to see this

00:05:36,620 --> 00:05:46,090
thing, it doesn't exist. (Chuckles) Now if I close my eyes it will disappear. What if

00:05:46,090 --> 00:05:52,310
— NaN exists, I'm sorry, it does exist. And it's actually a cool feature, right. What

00:05:52,310 --> 00:05:58,910
is cool about NaN is that you can have multiple functions which work with numbers and they

00:05:58,910 --> 00:06:04,440
use each other together and instead of rejoining now or something then check if something,

00:06:04,440 --> 00:06:08,660
you can just return NaN, keep going, keep going, still number, still number, but at

00:06:08,660 --> 00:06:13,380
the end it will be NaN if anything was wrong. You just don't need to worry about this stuff.

00:06:13,380 --> 00:06:21,020
It's kind of useful. I've never ever seen somebody actually typing NaN, like in their

00:06:21,020 --> 00:06:29,250
code, because, because, I don't know because why. Why you didn't use NaN? You don't know.

00:06:29,250 --> 00:06:35,250
Nobody does. I think it's ‑‑ this is one of the JavaScript way, the NaN exists

00:06:35,250 --> 00:06:39,550
there for a reason, so maybe you shouldn't be afraid of it, maybe you should think how

00:06:39,550 --> 00:06:45,780
you can actually embrace it, it's there. It's like, you know, living in a four bedroom apartment

00:06:45,780 --> 00:06:54,900
with two bedrooms locked. And just, you know ... you can do that. Why? Maybe you don't

00:06:54,900 --> 00:07:05,740
there are doors. Maybe ... I don't know. Let's talk about equality. It's a favorite topic

00:07:05,740 --> 00:07:13,190
for everybody, right. Favorite operator in JavaScript. Everybody loves it. It's crazy.

00:07:13,190 --> 00:07:21,900
Douglass Trockford ###Check### likes it most of all. So what is with double equals? So

00:07:21,900 --> 00:07:29,580
object double equals true. No, object double equals false? No. Like, what the heck? It

00:07:29,580 --> 00:07:34,930
doesn't make any sense. Well, no, it's how things are. But if you have object which has

00:07:34,930 --> 00:07:42,140
value of, then suddenly it could be equal to false or to true. So it's not always not

00:07:42,140 --> 00:07:49,610
equal to true and false. And, ### arrays equals to false, right, and obviously NaN

00:07:49,610 --> 00:07:55,530
is equal to NaN. And when you look at this, this is crazy, this is madness, this is not

00:07:55,530 --> 00:08:01,530
right, and I will never know how it will all work, so rather, I will use triple equals

00:08:01,530 --> 00:08:07,400
and be safe. And this is the right way. And I use triple equals all the time, no matter

00:08:07,400 --> 00:08:14,660
what, and I'll be happy. This is not the Zen way, this is not the JavaScript way. Why?

00:08:14,660 --> 00:08:20,930
Because what about these guys? You're not going to use them as well? Because they behave

00:08:20,930 --> 00:08:32,000
pretty much the same. Let's look at this one as a separate example. This is still true.

00:08:32,000 --> 00:08:38,279
This is still true. So using triple equal wouldn't really save you from the problems.

00:08:38,279 --> 00:08:45,660
It will just delay the day when you will face it, and you will say, Holy crap, what is this?

00:08:45,660 --> 00:08:53,930
How it works? So some people could say, well, it's with less than it's much easier, because

00:08:53,930 --> 00:08:57,839
it kind of work with numbers, so basically converts everything to number, and then does

00:08:57,839 --> 00:09:02,920
a comparison, and then it all makes sense objects converted to numbers and NaN, so NaN

00:09:02,920 --> 00:09:09,709
is not equal to true, not equal to false, and true and false become zero, one and everything

00:09:09,709 --> 00:09:14,050
else is kind of holding space, everything good. I will just remember this works just

00:09:14,050 --> 00:09:23,769
like numbers; all good. Not really. So if you have object, and you put object less than

00:09:23,769 --> 00:09:28,949
or equal to object, it will be true, because object equal to itself, so it's not really

00:09:28,949 --> 00:09:39,620
converted to number. What is my point? Well, maybe my point is learn the language and instead

00:09:39,620 --> 00:09:47,370
of trying to avoid problems try to go through, accept it, embrace it, take it, learn it.

00:09:47,370 --> 00:09:53,060
You're writing this language anyways. See avoiding the problems not works all the time.

00:09:53,060 --> 00:09:59,629
So you can avoid the with operator, you can. Avoiding double equal with triple equals,

00:09:59,629 --> 00:10:13,810
it's a false path of, you know, later disappointment. Don't disappoint yourself and me. So talking

00:10:13,810 --> 00:10:23,529
about acceptance. It's really great to look at some of the native functions, which inside

00:10:23,529 --> 00:10:30,839
Vanilla GS and look how they behave. And the API of JavaScript is actually pretty great.

00:10:30,839 --> 00:10:36,899
And I actually surprised that when people writing their own APIs for the libraries and

00:10:36,899 --> 00:10:43,420
stuff, for some reason they ‑‑ instead of copying the JavaScript, they try to copy,

00:10:43,420 --> 00:10:49,009
I don’t know, some other languages, some other concepts, some other things. JavaScript

00:10:49,009 --> 00:10:55,430
is very pretty. My favorite function is Jar add, don't ask me why, I just like it. What

00:10:55,430 --> 00:11:01,759
I like about Jar add. Don’t ask me why. I just like it. What I like about Jar add

00:11:01,759 --> 00:11:08,019
it's very acceptable. It accepts anything, you can pass any shit inside, it will give

00:11:08,019 --> 00:11:14,310
you the answer (Laughing). No matter what, it will just ‑‑ yeah, whatever, I don't

00:11:14,310 --> 00:11:22,269
accept you to pass me the number. Pass me something, I'll deal with it. (Laughing) So

00:11:22,269 --> 00:11:28,490
it doesn't like a string. Is it like flawed number, is it array? Is it true? I will do

00:11:28,490 --> 00:11:42,199
it. Pass me nothing, I assume it's zero. Pass me NaN, I assume it's zero. Important. It's

00:11:42,199 --> 00:11:49,709
so cool. Minus two, I will give you character minus two, no exceptions, no null rejoin.

00:11:49,709 --> 00:11:57,589
I will join you the empty character; what did you expect? (Laughing) It's the perfect

00:11:57,589 --> 00:12:03,209
answer to what is the character? This character. Not like no character; what are you talking

00:12:03,209 --> 00:12:07,569
about? There is no character. What are you doing? This is a character, empty character.

00:12:07,569 --> 00:12:15,379
This is so awesome. I mean, seriously, this is the poetry of the language. This is the

00:12:15,379 --> 00:12:23,410
JavaScript at its best. That's not the finish of the jar add. It's not only acceptable to

00:12:23,410 --> 00:12:29,069
the argument you're passing in, it's also acceptable to the “this”, to the context

00:12:29,069 --> 00:12:37,249
of it. We change the ‑‑ put it on the number prototype. And you say NaN jar add

00:12:37,249 --> 00:12:52,059
and give you “N”, boom. Boolean? Yep. How awesome was it with that, seriously? (Laughing)

00:12:52,059 --> 00:13:02,180
Guys, this is a JavaScript. Please, welcome. And, when you write your code in JavaScript,

00:13:02,180 --> 00:13:06,930
it should look just like that. It should be just like that. Your functions should be just

00:13:06,930 --> 00:13:13,620
like that. Like in grab your function, use it the way I want, like this, like that, whatever

00:13:13,620 --> 00:13:21,139
and it should work. And it shouldn't really care. Because JavaScript is a careless language.

00:13:21,139 --> 00:13:31,189
You should care less. Users of your API should care less. You know, it's like a software

00:13:31,189 --> 00:13:40,240
kind of language. It doesn't really care. It just does it business. Now I start talking

00:13:40,240 --> 00:13:48,550
about emptiness in the beginning. The JavaScript is seriously about emptiness. It has many

00:13:48,550 --> 00:13:55,129
ways to express emptiness. How many other languages could give you so many ways to say

00:13:55,129 --> 00:14:02,389
this is empty? There is nothing there. It's — nothing exists. Well, the three obvious

00:14:02,389 --> 00:14:09,449
candidates is NaN, null and undefined. So NaN is kind of empty number, not zero, empty

00:14:09,449 --> 00:14:16,699
number. Not a number. The concept of NaN is kind of funny in itself, like, number which

00:14:16,699 --> 00:14:21,430
is not a number but still number. It’s like, this is so philosophical, you should sit and

00:14:21,430 --> 00:14:29,800
meditate on it like in a Lotus pose for a while. What is null? It's like, not object,

00:14:29,800 --> 00:14:34,769
it's empty but it’s not really empty because it's null. The undefined is the next level

00:14:34,769 --> 00:14:56,329
of null. It's like it's not even null. (Laughing) It's not defined, but it is ‑‑ it has

00:14:56,329 --> 00:14:59,040
a value. (Whispers) Holy shit. (Applause) This is so awesome just stop, stop rushing

00:14:59,040 --> 00:15:06,350
writing your code and working with Shadow DOM, just stop. Look at the beauty in your

00:15:06,350 --> 00:15:13,899
hands. Look at this like, oh my God, this is so cool. You think this is all about emptiness?

00:15:13,899 --> 00:15:24,800
JavaScript has more to tell you about emptiness. Let's say we have two arrays. One we create

00:15:24,800 --> 00:15:32,959
like array of two and another we create like, well, using the brackets and undefined, undefined.

00:15:32,959 --> 00:15:40,149
And these arrays are equal, not equal like this, but let's say equal like that. Okay.

00:15:40,149 --> 00:15:48,199
So they are the same. Okay. So if we say, we create variable ‘a’ equals to array,

00:15:48,199 --> 00:15:53,360
created like array of two, variable two equals array of undefined; a of zero equals to b

00:15:53,360 --> 00:16:00,629
of zero, yes; a of one equals b of one, yes; a length equals b length, yes. So they are

00:16:00,629 --> 00:16:12,550
the same, right? Of course not (Laughs). Of course not. We call b.map allot, we have two

00:16:12,550 --> 00:16:23,230
alerts undefined. We have a.map alert and there no alerts, nothing happens. What, what

00:16:23,230 --> 00:16:39,980
one in a false, one in b true. So, array b has two values which are equal to undefined.

00:16:39,980 --> 00:16:52,720
Undefined is a value. And array a has two slots for values. And they are empty. (Laughter)

00:16:52,720 --> 00:16:59,749
Yeah…getting there? This is a true emptiness. They're not even there. When you're asking

00:16:59,749 --> 00:17:09,449
for it, ask for a value, undefined, but this value is not in the array. Baaaaahhhh…the

00:17:09,449 --> 00:17:31,680
emptiness. How then and philosophical is this, damn it?! This is, I just showed you, emptiness,

00:17:31,680 --> 00:17:39,520
saying nothing. And as always there is nothing new, and obviously, I want to say a bit about

00:17:39,520 --> 00:17:46,610
the new operator. I personally always feel that the new operator is sort of added there

00:17:46,610 --> 00:17:55,910
as a way to please Java developers so they feel, oh, this is just like Java... (Whispers)

00:17:55,910 --> 00:18:05,360
… nothing like Java. And to confuse the shit out of everybody. I personally like,

00:18:05,360 --> 00:18:10,940
I use new operator when I need to create some prototype of thing and want to create some

00:18:10,940 --> 00:18:18,670
internal, I don't like to call them classes, but apparently they are. And, but, I hate

00:18:18,670 --> 00:18:27,070
the APIs which tell you, you have to use "new" something like what was this? My favorite

00:18:27,070 --> 00:18:36,000
one was … damn, I forgot the name. You know, when the physics imitator, and you have to

00:18:36,000 --> 00:18:44,800
create new rectangle where you pass new point X Y comma new point X Y, like what the hell

00:18:44,800 --> 00:18:50,870
is that? Why you create objects for everything? With “new” it's like, it's a Java, it

00:18:50,870 --> 00:18:58,520
smells like Java, and I don't like the smell. I think the new ‑‑ like your API shouldn't

00:18:58,520 --> 00:19:03,800
tell people to use "new". I created the Raphael, and I had the mistake to call it from the

00:19:03,800 --> 00:19:13,000
capital letter because it's old library, and I saw some people write new Raphael instead

00:19:13,000 --> 00:19:19,010
of Raphael. The thing is nothing happens. And I just tired of correcting them, like,

00:19:19,010 --> 00:19:23,230
okay, if you feel like this makes you feel more safe to write "new" in front of, write

00:19:23,230 --> 00:19:30,780
it, but you don't have to. In fact, many places in JavaScript you don't have to. Who remember

00:19:30,780 --> 00:19:39,900
seeing code like this? Who is old enough? (Laughs) It was like the trade mark of a loser

00:19:39,900 --> 00:19:48,000
(clicks tounge). You write new object already, and everybody is like, oh, look at this, so

00:19:48,000 --> 00:19:53,510
lame. And then people like, yeah, this is the cool way. This is like, it was like a

00:19:53,510 --> 00:19:59,770
club people who write like this and people who write like that. Nowadays nobody writes

00:19:59,770 --> 00:20:09,230
the first way. Is anybody ‑‑ nobody will accept any way. If you're a Java developer,

00:20:09,230 --> 00:20:13,320
maybe writing the object is more convenient for you and more easy to grasp, but, actually,

00:20:13,320 --> 00:20:18,730
there's a better way. And it's almost true for everything. It's a very common concept,

00:20:18,730 --> 00:20:25,300
very common pattern in JavaScript itself having SomeConstructor, calling as a function is

00:20:25,300 --> 00:20:32,270
absolutely equal calling new Someconstructor. It's true for object, it's true for array,

00:20:32,270 --> 00:20:39,150
it's true for RegEx, it's true for Function. JavaScript kind of giving you a hint, like,

00:20:39,150 --> 00:20:49,130
you know, maybe, eh, maybe you shouldn't do ... whatever. There are exceptions. The date

00:20:49,130 --> 00:20:54,650
object. The date object always looks like an alien inside the JavaScript because it's

00:20:54,650 --> 00:21:02,290
copied from the Java as much as it possibly can. That's why it's so ugly, but it's very

00:21:02,290 --> 00:21:11,730
useful, so we have to use it. But it's so ugly, oh, my God. The some constructor, number,

00:21:11,730 --> 00:21:18,150
Boolean and string, because they're wrappers for native primitive types. They behave differently

00:21:18,150 --> 00:21:24,210
when you code then without new; they just convert something to the primitive. The new

00:21:24,210 --> 00:21:32,260
ES6 have constructors like set, map and weak map. I don't know who wrote this rule inside

00:21:32,260 --> 00:21:40,070
them, but he's definitely not a JavaScript Jedi, because if you call Set without new,

00:21:40,070 --> 00:21:47,990
it's not just behave differently it throw you bloody exception in your face. What the

00:21:47,990 --> 00:21:52,660
hell?! JavaScript doesn't throw exceptions unless there is a very serious reason for

00:21:52,660 --> 00:22:05,070
that. I don't see serious reason for calling Set without new. Amateurs. Of course they

00:22:05,070 --> 00:22:11,440
are like functions, and functions are a big deal. And I wanted to tell if you wanted to

00:22:11,440 --> 00:22:15,680
know more about functions you could watch the talk, about functional programming, but

00:22:15,680 --> 00:22:20,670
unfortunately it happens right now. So if you want the learn more about functions, you

00:22:20,670 --> 00:22:30,890
chose the wrong talk, congratulations. There are five faces of the function. And this is

00:22:30,890 --> 00:22:36,530
sort of also very JavaScript way that the functions, anything could be anything, anything

00:22:36,530 --> 00:22:41,460
could be used in the many different ways. You could wrap it in different positions.

00:22:41,460 --> 00:22:46,990
Functions has different positions too. So, if you create a function, which reference

00:22:46,990 --> 00:22:51,550
some variables outside the function, you create the closure, and you all know this, and it's

00:22:51,550 --> 00:22:58,510
boring, I know, but I have to tell it, maybe somebody doesn't. It's writing code like this

00:22:58,510 --> 00:23:04,650
to make it more obvious. You're already seeing like already three phases of functions right

00:23:04,650 --> 00:23:15,190
here. So function. Create a scope. Functions create the closure. And you can rejoin functions,

00:23:15,190 --> 00:23:20,590
because function is also an object. I know I have a thing like Captain Obvious right

00:23:20,590 --> 00:23:27,240
now, but bear with me. You can also use functions as a constructor to create new objects, and

00:23:27,240 --> 00:23:33,970
you can use the function as a, basically, just subroutine, which you can call with arguments

00:23:33,970 --> 00:23:39,090
and return or something. This is, these are obvious things, what I'm trying to point is

00:23:39,090 --> 00:23:46,240
that it's the function itself is having so many roles, and you can use it in so many

00:23:46,240 --> 00:23:52,630
ways. This is truly a JavaScript way of doing things. And it's not just the only way of

00:23:52,630 --> 00:23:57,850
doing things. There are other languages that do the same thing like Lisp or Luna, like,

00:23:57,850 --> 00:24:02,710
whatever. It’s important to embrace it and not trying to avoid it and trying to say,

00:24:02,710 --> 00:24:09,690
okay, I will write a different way. I will just use this two bedroom instead of one.

00:24:09,690 --> 00:24:16,720
And there is a JavaScript paradox function constructor is a function and function constructor

00:24:16,720 --> 00:24:23,630
is a function, so it's like the movie Inception where they go up the stairs and coming back

00:24:23,630 --> 00:24:32,000
to wherever they started going. So, what I'm trying to say apart from show that I read

00:24:32,000 --> 00:24:38,120
the spec and found some interesting parts of JavaScript. What I'm trying to say is that

00:24:38,120 --> 00:24:46,030
JavaScript has it's own way, and instead of trying to do it in this or that way, how about

00:24:46,030 --> 00:24:52,470
you step back, look, and I just scratch the surface here. It's a very short talk. You

00:24:52,470 --> 00:24:56,600
could find more interesting features of JavaScript, which you probably haven't seen before, and

00:24:56,600 --> 00:25:02,600
try to think, what would JavaScript do? You know, when I was a kid and I have coming to

00:25:02,600 --> 00:25:09,700
a hard situation, I would think, what Bruce Lee would do, and then act like Bruce Lee.

00:25:09,700 --> 00:25:18,540
Sometimes it helped, sometimes not (Laughing), but ... what will JavaScript do? When you

00:25:18,540 --> 00:25:23,990
write your code, don't think, oh, what I want. What is the JavaScript way to do this thing?

00:25:23,990 --> 00:25:28,780
What would be the JavaScript ‑‑ what if this will end up inside the JavaScript

00:25:28,780 --> 00:25:34,900
language just like functions like parse in or jar add or something like that joined.

00:25:34,900 --> 00:25:41,520
What would ‑‑ how would I write this function? Do it this way and be truly enlightened

00:25:41,520 --> 00:25:57,000
JavaScript developer. And ... don't just sit and think about it. Open console, read it, dig inside it, become the wizard.

00:25:57,000 --> 00:26:09,580

YouTube URL: https://www.youtube.com/watch?v=QHs55-5FzgA


