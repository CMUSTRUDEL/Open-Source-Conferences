Title: Denis Radin: Rendering HTML via WebGL | JSConf EU 2015
Publication date: 2015-10-15
Playlist: JSConf EU 2015
Description: 
	In the recent time Web development community had a big discussion on “DOM is slow” topic. This thesis is truthful. DOM is a quite complex model which starts a ripple of events or chain reaction over document on every modification. HTML GL solves “the slow DOM problem” by creating WebGL representations of DOM elements and hiding actual DOM after. This speeds up HTML/CSS animations and transformations by using 3D hardware acceleration and allows to apply OpenGL effects as modern 3D games have.

In this talk:

- The “Slow DOM problem”;
- Solutions possible
- DOM optimization vs alternative rendering approaches(React-canvas, Netflix methodology);
- Seeking for an ideal solution;
- Rendering content via WebGL using HTML GL
- Limitations, recommendations
- Where to go further?

Intro music by @halfbyte
Captions: 
	00:00:22,109 --> 00:00:41,219
Okay, so I came from Amsterdam and so seeing the party is near in an hour, I'll bring you

00:00:41,219 --> 00:00:44,420
some legal stuff.

00:00:44,420 --> 00:00:48,620
Legal stuff!

00:00:48,620 --> 00:00:54,750
Who can guess, legal stuff four characters.

00:00:54,750 --> 00:01:08,630
JSL is basically a way to intercontact with GP and now we have WebGL, and we'll talk about

00:01:08,630 --> 00:01:13,939
HTML library to render HTML CSS content, we have

00:01:13,939 --> 00:01:17,329
WebGL to the performance a bit.

00:01:17,329 --> 00:01:24,210
In Amsterdam, I work in a company called UPC, maybe famous in Germany and in

00:01:24,210 --> 00:01:28,010
Amsterdam Ziggo, and we do set-top boxes for millions

00:01:28,010 --> 00:01:33,479
of users, we deliver the boxes with JavaScript UI, the

00:01:33,479 --> 00:01:38,680
operation system, and basically performance is quite

00:01:38,680 --> 00:01:39,930
extremely important there.

00:01:39,930 --> 00:01:46,119
So everybody want to have a snappy UI on their set-top box when getting movies,

00:01:46,119 --> 00:01:47,200
etc.

00:01:47,200 --> 00:01:49,200
Device is pretty weak, I mean it is comparing to

00:01:49,200 --> 00:01:53,450
iPhone, and if you say okay, I don't care about this, your

00:01:53,450 --> 00:01:57,310
set-top box, why should I take care about performance?

00:01:57,310 --> 00:02:02,290
Because there are a whole bunch of mobile phones and mobiles

00:02:02,290 --> 00:02:06,930
who want to have snappy 60FPS performance, also about

00:02:06,930 --> 00:02:14,189
performance, it is not only the thing because performance optimisation is not the thing

00:02:14,189 --> 00:02:17,980
that makes the application faster, but also it allows to

00:02:17,980 --> 00:02:22,230
make things which are not able to do before.

00:02:22,230 --> 00:02:27,069
As the illustration shows, the slow turtle can jump,

00:02:27,069 --> 00:02:31,250
but rabbit, having a bit more speed, can.

00:02:31,250 --> 00:02:33,230
So more speed, more possibilities.

00:02:33,230 --> 00:02:35,640
Basically you can add the effects.

00:02:35,640 --> 00:02:36,640
Okay.

00:02:36,640 --> 00:02:42,910
The problem of HTML and DOM is that DOM is quite complex model, it is quite slow.

00:02:42,910 --> 00:02:45,500
I mean have you ever tried to inspect DOM elements?

00:02:45,500 --> 00:02:47,950
There are hundreds of properties.

00:02:47,950 --> 00:02:53,560
A lot of events never change, like you touch one DOM element in document,

00:02:53,560 --> 00:02:56,989
you have referral chain effect and that's it.

00:02:56,989 --> 00:03:00,709
You got a lot of compilation to do just the one change.

00:03:00,709 --> 00:03:06,930
So tomorrow is slow, let's consider how image is going to

00:03:06,930 --> 00:03:10,099
be displayed in DOM and in canvas.

00:03:10,099 --> 00:03:15,850
So for DOM, you need to create image text, file, and Jim tag to DOM to calculate

00:03:15,850 --> 00:03:19,780
styles which calculate position based on the styles

00:03:19,780 --> 00:03:21,420
then display image.

00:03:21,420 --> 00:03:23,629
Okay, but for canvas, it is much less.

00:03:23,629 --> 00:03:28,180
It is load and image, display image.

00:03:28,180 --> 00:03:35,099
So even GPU DOM is slow, because it changes the only how image

00:03:35,099 --> 00:03:38,270
is being displayed, so DOM still stays this complex

00:03:38,270 --> 00:03:44,319
model still stays, and yes.

00:03:44,319 --> 00:03:47,599
DOM is hardly predictable.

00:03:47,599 --> 00:03:49,190
Browsers are quite smart.

00:03:49,190 --> 00:03:50,769
Too smart sometimes.

00:03:50,769 --> 00:03:56,480
On the diagram there is the same components been render it

00:03:56,480 --> 00:03:58,849
in DOM, and canvas, which is the engine which allows to

00:03:58,849 --> 00:04:02,790
render to switch from DOM to canvas and what we see

00:04:02,790 --> 00:04:06,960
is that in DOM it is hardly predictable, you can hardly predict

00:04:06,960 --> 00:04:09,310
when browser will render.

00:04:09,310 --> 00:04:12,040
In canvas you say "render please".

00:04:12,040 --> 00:04:17,739
You can say once per frame, or once there are two

00:04:17,739 --> 00:04:18,810
frames, etc.

00:04:18,810 --> 00:04:24,849
You can tune FPS as you wish, and you really know when you render, when you change

00:04:24,849 --> 00:04:25,849
content.

00:04:25,849 --> 00:04:28,682
DOM browser do everything for you, so basically it is

00:04:28,682 --> 00:04:31,280
hardly predictable.

00:04:31,280 --> 00:04:41,949
So HTML, the library we're talking about now, doesn't use DOM, but only when it is animated.

00:04:41,949 --> 00:04:49,909
When it doesn't, it is still inspectable, so it is

00:04:49,909 --> 00:04:53,210
quite easy to develop, because you still have three, and

00:04:53,210 --> 00:04:55,560
inspect option.

00:04:55,560 --> 00:05:03,059
Also, yeah probably, you can recognise this one is

00:05:03,059 --> 00:05:04,839
a GPU.

00:05:04,839 --> 00:05:11,270
Everybody in this room, I suppose many, many people in this room, already been a bit annoyed

00:05:11,270 --> 00:05:15,979
by GPU render, GPU, but yes, still we issued.

00:05:15,979 --> 00:05:19,380
You should understand that it is quite a powerful unit

00:05:19,380 --> 00:05:24,069
to display graphics, and this one is kind of professional

00:05:24,069 --> 00:05:33,550
GPU from now some radion with bunch of memory to GPUs

00:05:33,550 --> 00:05:37,629
to graphic processors and so on, but something similar

00:05:37,629 --> 00:05:41,770
you have in any device you can get.

00:05:41,770 --> 00:05:42,770
Almost.

00:05:42,770 --> 00:05:48,830
Any form, any PC, any mac have G pin side, and even if iPhone GPU

00:05:48,830 --> 00:05:54,889
is powerful as PCs, you play Counterstrike five or ten

00:05:54,889 --> 00:05:56,150
years ago.

00:05:56,150 --> 00:06:01,400
Ifen is pretty powerful in terms of GPU.

00:06:01,400 --> 00:06:02,960
Everybody watch this movie, probably.

00:06:02,960 --> 00:06:05,050
Who watch this movie?

00:06:05,050 --> 00:06:06,220
Should we watch it?

00:06:06,220 --> 00:06:07,220
Two people?

00:06:07,220 --> 00:06:08,220
Three people?

00:06:08,220 --> 00:06:09,220
Who?

00:06:09,220 --> 00:06:10,220
Okay.

00:06:10,220 --> 00:06:12,849
Should we watch it or not?

00:06:12,849 --> 00:06:13,849
Yes.

00:06:13,849 --> 00:06:18,689
So this movie shows the difference between GPU and CPU.

00:06:18,689 --> 00:06:25,219
Now it is not our sponsors.

00:06:25,219 --> 00:06:27,599
Who wants to figure this out after its release?

00:06:27,599 --> 00:06:33,169
Wouldn't it be nice to discover and fix vulnerabilities?

00:06:33,169 --> 00:06:43,619
Say hello to checkmarks it scans -- Is there anybody from Relic?

00:06:43,619 --> 00:06:48,059
Come on.

00:06:48,059 --> 00:06:54,719
I'm a nerd.

00:06:54,719 --> 00:07:07,449
So this will show us the difference between render

00:07:07,449 --> 00:07:12,740
and CPU and GPU.

00:07:12,740 --> 00:07:13,960
One after the other.

00:07:13,960 --> 00:07:14,960
And three.

00:07:14,960 --> 00:07:20,860
This robot emulates CPU, it puts every pixel step by

00:07:20,860 --> 00:07:23,909
step, it calculates which pixel it should be, the

00:07:23,909 --> 00:07:25,309
colour, where it should put it.

00:07:25,309 --> 00:07:37,849
So a lot of considerations on every step.

00:07:37,849 --> 00:07:38,849
This one is GPU.

00:07:38,849 --> 00:07:47,050
When it goes through all 3,100 of these tube, into

00:07:47,050 --> 00:07:49,679
these tube in which of the bottom of which is a paint

00:07:49,679 --> 00:07:54,379
ball, which is 7 feet of space and in eight milliseconds

00:07:54,379 --> 00:07:57,930
reach its target, hopefully, when it is all said and

00:07:57,930 --> 00:08:01,969
done, it is going to paint the Mona Lisa ... five, four,

00:08:01,969 --> 00:08:05,499
three, two, one.

00:08:05,499 --> 00:08:14,900
(Laughter) Ladies and gentlemen, science class is now

00:08:14,900 --> 00:08:16,080
over!

00:08:16,080 --> 00:08:21,959
DENIS RADLIN: Thank you guys.

00:08:21,959 --> 00:08:35,680
Yeah I suppose the difference is pretty big.

00:08:35,680 --> 00:08:39,599
If you have seen before GPU is a hardworking kit which is put in every

00:08:39,599 --> 00:08:45,880
line by a pencil, and CPU is another kind of kit using

00:08:45,880 --> 00:08:47,080
stamps.

00:08:47,080 --> 00:08:49,510
And if you use stamps you can get it more effective and

00:08:49,510 --> 00:08:50,510
much faster.

00:08:50,510 --> 00:09:04,740
So modern CPUs can possess millions and millions texture in surfaces in a second ... it

00:09:04,740 --> 00:09:10,009
means millions of HTML elements like textured surfaces,

00:09:10,009 --> 00:09:12,000
we can compare, yes?

00:09:12,000 --> 00:09:13,000
Cool.

00:09:13,000 --> 00:09:15,000
Why so many?

00:09:15,000 --> 00:09:18,981
Because for some things it is still not enough details, but

00:09:18,981 --> 00:09:24,139
we can use this in 2D, and yeah, if you have a look at

00:09:24,139 --> 00:09:28,569
the power we have in our PCs and Macs, it is pretty amazing,

00:09:28,569 --> 00:09:35,790
so let's try to see what CPU do in modern games, because

00:09:35,790 --> 00:09:39,579
WebGL and OpenGL is basically being used in modern

00:09:39,579 --> 00:09:42,589
games and the same technology you can use to render

00:09:42,589 --> 00:09:45,860
HTML and CSS.

00:09:45,860 --> 00:09:55,940
The hand of this guy consist of about 50,000 textured

00:09:55,940 --> 00:09:57,260
surfaces.

00:09:57,260 --> 00:10:09,120
It means you can run 60,000 of HTML elements animated, with special effects, but the question,

00:10:09,120 --> 00:10:18,800
the same stuff, they can do that, run all this

00:10:18,800 --> 00:10:26,009
effects, bunch of surfaces, bunch of images at 60APS.

00:10:26,009 --> 00:10:27,120
Why?

00:10:27,120 --> 00:10:35,920
Simple: slider janks.

00:10:35,920 --> 00:10:47,190
Now, because CPU is not involved, sometimes and it

00:10:47,190 --> 00:10:48,190
is quite complex.

00:10:48,190 --> 00:10:54,370
So changing one thing, you're making a massive change.

00:10:54,370 --> 00:11:05,040
Chain effects, and still we can move away from DOM and use OpenGL by using a wrapper

00:11:05,040 --> 00:11:06,040
on the OpenGL.

00:11:06,040 --> 00:11:10,360
I don't know how many of you know about that.

00:11:10,360 --> 00:11:14,579
And now we can check how performance that GL is compared

00:11:14,579 --> 00:11:19,860
to OpenGL, so would we be impressed by the performance?

00:11:19,860 --> 00:11:21,699
So let's release bunnies.

00:11:21,699 --> 00:11:26,970
This one is a very simple benchmark, and now we have two bunnies, like

00:11:26,970 --> 00:11:32,060
every bunny, to make it clear, could be compared

00:11:32,060 --> 00:11:33,279
to HTML element.

00:11:33,279 --> 00:11:35,939
So now we have two bunnies running at 60FPS.

00:11:35,939 --> 00:11:36,939
It is cool.

00:11:36,939 --> 00:11:44,970
Two HTML elements and we added them.

00:11:44,970 --> 00:11:49,500
5,000 bunnies, 10,000 bunnies, 50,000 bunnies, 30,000

00:11:49,500 --> 00:11:55,060
bunnies, still 60FPS, 50,000 bunnies.

00:11:55,060 --> 00:11:56,389
Okay you guys.

00:11:56,389 --> 00:11:57,920
FPS drop a bit.

00:11:57,920 --> 00:11:58,920
Now still 60.

00:11:58,920 --> 00:12:01,509
I mean already 80,000 bunnies.

00:12:01,509 --> 00:12:09,310
So could you imagine, you can animated 80,000 of HTML

00:12:09,310 --> 00:12:16,420
elements at the same time with WebGL, and I suppose

00:12:16,420 --> 00:12:18,620
nobody even can imagine to do that with DOM.

00:12:18,620 --> 00:12:21,079
But yeah, now it is possible.

00:12:21,079 --> 00:12:26,769
A lot of bunnies.

00:12:26,769 --> 00:12:36,899
Yes, so why don't we use WebGL for web content?

00:12:36,899 --> 00:12:38,269
It is a bit tricky, basically.

00:12:38,269 --> 00:12:45,250
So if you compare HTML, we are coming to this WebGL, we'll see that it is not that

00:12:45,250 --> 00:12:48,000
easy so display, but any with WebGL, and basically

00:12:48,000 --> 00:12:53,180
it is not even played by WebGL, it is 3js, it is an

00:12:53,180 --> 00:12:57,610
engine which allows to make everything in easy simple way.

00:12:57,610 --> 00:13:02,629
So yeah, it is plain WebGL, it will take five times

00:13:02,629 --> 00:13:04,949
more.

00:13:04,949 --> 00:13:10,810
And we are lazy, HTML developers, we can't do that.

00:13:10,810 --> 00:13:14,100
Basically it is sad.

00:13:14,100 --> 00:13:17,060
But here HTML GL changed the game.

00:13:17,060 --> 00:13:21,540
It is pretty simple, you can just drop your content

00:13:21,540 --> 00:13:25,140
with HTML GL pack and your contents are rendered in

00:13:25,140 --> 00:13:26,290
WebGL.

00:13:26,290 --> 00:13:29,339
It is easy to use.

00:13:29,339 --> 00:13:37,949
You can use it as JQuery, if you want to meet all the things WebGL and query, and yeah,

00:13:37,949 --> 00:13:39,760
also you just animated.

00:13:39,760 --> 00:13:42,749
It is as simple DOM element.

00:13:42,749 --> 00:13:45,649
You can put some listeners, or etc.

00:13:45,649 --> 00:13:49,529
So how it works?

00:13:49,529 --> 00:13:54,240
When browser meets HTML GL element, it restores its texture, basically,

00:13:54,240 --> 00:13:59,269
to element, and then can put it to a full screen WebGL

00:13:59,269 --> 00:14:00,269
surface.

00:14:00,269 --> 00:14:03,850
So it's being displayed, and if something -- do

00:14:03,850 --> 00:14:05,550
I have a laser here?

00:14:05,550 --> 00:14:08,059
Yes, green one.

00:14:08,059 --> 00:14:12,089
So if something changes, there are two ways to go.

00:14:12,089 --> 00:14:15,860
The first one is if content changed.

00:14:15,860 --> 00:14:19,981
I mean, if you change the font or colour, so

00:14:19,981 --> 00:14:23,529
you need to restore once more and display once more, but

00:14:23,529 --> 00:14:32,449
if element was transformed, rotated, so it is very cheap

00:14:32,449 --> 00:14:34,430
operations you can do on GPU.

00:14:34,430 --> 00:14:39,779
So these transformations animations being made with GPU on this WebGL

00:14:39,779 --> 00:14:42,959
or presentation of this WebGL slide, basically

00:14:42,959 --> 00:14:46,860
it is extremely cheap and fast.

00:14:46,860 --> 00:14:50,251
So HTMLGL relies on DOM observers.

00:14:50,251 --> 00:14:58,660
So it is to react on document change on element change.

00:14:58,660 --> 00:15:01,759
It relies on HTML to canvas, and it relies on to render

00:15:01,759 --> 00:15:09,589
the bit seen here is HTML, it is basically a bottleneck

00:15:09,589 --> 00:15:14,699
because every restoration takes about 150 milliseconds,

00:15:14,699 --> 00:15:20,399
so it is quite expensive.

00:15:20,399 --> 00:15:29,949
And if you ever map the need to rasterise content, and you tried HTML to canvas

00:15:29,949 --> 00:15:32,829
you found, guidance there should be a better way

00:15:32,829 --> 00:15:34,689
to rasterise to canvas.

00:15:34,689 --> 00:15:45,290
Please share the work, our trend to make rasterisation API, then get canvas,

00:15:45,290 --> 00:15:50,009
we only have a polyfill as HTML to canvas, but in browser

00:15:50,009 --> 00:15:53,089
it could be much more performance and less buggy, and

00:15:53,089 --> 00:15:57,290
there is an article on my block and basically a draft

00:15:57,290 --> 00:15:59,110
proposition and on spec.

00:15:59,110 --> 00:16:06,970
So if you're interested in rasterisation API, please help you to spread the word.

00:16:06,970 --> 00:16:11,759
Let's go to some building.

00:16:11,759 --> 00:16:27,649
You see simple HTML, you have.

00:16:27,649 --> 00:16:30,800
So we have HTML GL element.

00:16:30,800 --> 00:16:31,860
Nice.

00:16:31,860 --> 00:16:36,249
But the issue is that this one, this page, it doesn't include

00:16:36,249 --> 00:16:39,050
HTML GL library, but it is still valid HTML.

00:16:39,050 --> 00:16:43,850
It is basically a custom, it could mean nothing or it could

00:16:43,850 --> 00:16:48,189
mean least render to WebGL, so in this case it means

00:16:48,189 --> 00:16:49,689
nothing.

00:16:49,689 --> 00:16:55,610
And pushing the animated button, we see that at

00:16:55,610 --> 00:16:59,629
the H point browser make a decision to rasterise text

00:16:59,629 --> 00:17:00,839
once more.

00:17:00,839 --> 00:17:02,829
So let's repeat.

00:17:02,829 --> 00:17:08,000
Look at the edge point, we see the image is a bit blurry, and then browser seems okay,

00:17:08,000 --> 00:17:09,000
let's rasterise.

00:17:09,000 --> 00:17:11,579
That's basically what I said: the browser is

00:17:11,579 --> 00:17:17,309
predictable.

00:17:17,309 --> 00:17:25,699
WebGL allows to avoid it.

00:17:25,699 --> 00:17:29,559
Let's move to the same demo but basically it is absolutely the same

00:17:29,559 --> 00:17:34,750
HTML, but HTML GL library is included.

00:17:34,750 --> 00:17:40,440
So yeah, if you press the button, the same happens, absolutely the same

00:17:40,440 --> 00:17:44,299
JavaScript code animates, but basically we control the

00:17:44,299 --> 00:17:49,669
authorisation, we can rasterise manually, but we may

00:17:49,669 --> 00:17:55,120
respond to it later, but yeah, we control rasterisation

00:17:55,120 --> 00:18:01,330
and we useWebGL to animate that.

00:18:01,330 --> 00:18:10,090
Let's try to change content and layout, so sends to the observer

00:18:10,090 --> 00:18:13,440
all changes you are making a note, so you are changing

00:18:13,440 --> 00:18:19,820
in HTML or whatever, they are being cached by HTML GL,

00:18:19,820 --> 00:18:22,620
and not has been rendered, so we don't care about that.

00:18:22,620 --> 00:18:24,290
So let's proceed to the next example.

00:18:24,290 --> 00:18:28,600
Small, more complex, and basically this is one of prototypes

00:18:28,600 --> 00:18:34,279
we did in liberty level, some list of movies.

00:18:34,279 --> 00:18:38,210
And it is slides, basically.

00:18:38,210 --> 00:18:42,539
What we see here, that nodes are still on the same place, so when we animate

00:18:42,539 --> 00:18:47,350
we only do it on WebGL or presentation.

00:18:47,350 --> 00:18:54,399
But actual nodes take place, and still everything is expectable

00:18:54,399 --> 00:18:59,690
and we can change the content.

00:18:59,690 --> 00:19:03,300
So WebGL, but it renders.

00:19:03,300 --> 00:19:11,070
Also, it's nice to mention this demo, even we click

00:19:11,070 --> 00:19:13,820
on the WebGL presentation, not on the node, you can

00:19:13,820 --> 00:19:16,360
still use the events in the same way you use them in

00:19:16,360 --> 00:19:17,430
the HTML.

00:19:17,430 --> 00:19:20,440
You basically click on it in listener, everything is the

00:19:20,440 --> 00:19:28,780
same, you still use your DOM amount as HTML presentations.

00:19:28,780 --> 00:19:36,440
And this one, in previous, was possible to implement in DOM or HTML GL.

00:19:36,440 --> 00:19:40,470
The next one is HTML GL scene.

00:19:40,470 --> 00:19:42,669
You can't do this with DOM.

00:19:42,669 --> 00:19:45,540
So we have some filters on that.

00:19:45,540 --> 00:19:48,400
Yes, it is kind of displacement.

00:19:48,400 --> 00:19:54,360
We can add more, but still what is nice, it is

00:19:54,360 --> 00:19:59,110
still HTML content.

00:19:59,110 --> 00:20:09,270
You still can inspect that, it's too much.

00:20:09,270 --> 00:20:13,380
But you can apply all kind of shaders you can expect

00:20:13,380 --> 00:20:23,910
from OpenGL, just a bit more.

00:20:23,910 --> 00:20:29,519
Just nobody will be impressed by blue nowadays, but okay, we have

00:20:29,519 --> 00:20:32,390
blue, we have any kind of modifications.

00:20:32,390 --> 00:20:34,350
Okay twist.

00:20:34,350 --> 00:20:40,230
Still HTML content.

00:20:40,230 --> 00:20:43,640
We still can inspect that.

00:20:43,640 --> 00:20:49,470
And basically, yes, we still can change a content and talk

00:20:49,470 --> 00:20:54,789
to our content as come to it.

00:20:54,789 --> 00:21:01,340
The next demo is quite -- could be useful for phone

00:21:01,340 --> 00:21:05,680
cap users, and it basically shows how you can work with

00:21:05,680 --> 00:21:08,000
effects, how API is built.

00:21:08,000 --> 00:21:10,350
Yes, it is nice effect.

00:21:10,350 --> 00:21:12,419
It wriggles.

00:21:12,419 --> 00:21:19,950
So it is simple page you can build with display line or whatever, just some ideas,

00:21:19,950 --> 00:21:22,720
you have a regular effect on that, but the effect has

00:21:22,720 --> 00:21:25,850
been applied, effects attribute.

00:21:25,850 --> 00:21:28,440
Let's add some more, let's add some noise.

00:21:28,440 --> 00:21:31,560
Pouffe, we have some noise.

00:21:31,560 --> 00:21:37,030
Let's move it to mobile, I suppose it is going to be

00:21:37,030 --> 00:21:44,059
a mobile, let's add there.

00:21:44,059 --> 00:21:49,760
Pouffe, we inverted the colours.

00:21:49,760 --> 00:21:53,510
Let's add some contrast.

00:21:53,510 --> 00:21:59,409
I mean it doesn't look like our initial HTML, it is basically was modified

00:21:59,409 --> 00:22:06,169
by using a shaders, yeah, my favourite one, twist.

00:22:06,169 --> 00:22:28,910
So it's still HTML guys, it is still ... yes.

00:22:28,910 --> 00:22:35,470
You don't need to study reconceptions, everything is you are coming

00:22:35,470 --> 00:22:36,470
to.

00:22:36,470 --> 00:22:40,010
So you can add effect as a plug-in, and you can add

00:22:40,010 --> 00:22:41,010
your one.

00:22:41,010 --> 00:22:44,790
Have you ever heard -- no, I don't think you have.

00:22:44,790 --> 00:22:47,870
There is a shader, it is a website where you can find

00:22:47,870 --> 00:22:52,080
whole bunch of shaders like pre-defined shaders, any

00:22:52,080 --> 00:23:00,149
kind of effects, effects of skies, sun, and I don't

00:23:00,149 --> 00:23:01,230
know, heaven, hell, or whatever.

00:23:01,230 --> 00:23:04,110
I mean just any kinds of effects you can imagine.

00:23:04,110 --> 00:23:09,070
You can modify your content absolutely in any way you can imagine to.

00:23:09,070 --> 00:23:11,920
Basically, all power of CPU which is being used in modern

00:23:11,920 --> 00:23:17,400
games to service to modify your web content.

00:23:17,400 --> 00:23:22,799
Yeah, of course it is open source.

00:23:22,799 --> 00:23:26,309
And the nice thing it is really agnostic, so you put your

00:23:26,309 --> 00:23:29,159
HTML GL tech any way you want.

00:23:29,159 --> 00:23:31,440
So any in framework.

00:23:31,440 --> 00:23:36,210
But there are some bindings for ember and there is a

00:23:36,210 --> 00:23:39,850
link, and there is a binding for WebGL.

00:23:39,850 --> 00:23:46,500
So yeah, we use it together with react as HTML GL tech or use

00:23:46,500 --> 00:23:49,390
react GL bindings like a component.

00:23:49,390 --> 00:23:55,260
All this stuff, the concipiens of my work in liberty global is

00:23:55,260 --> 00:24:01,220
set top boxes on UI for them, and challenging native workshop,

00:24:01,220 --> 00:24:06,590
and that's a workshop on making performance web

00:24:06,590 --> 00:24:09,309
applications which are able to challenge native ones.

00:24:09,309 --> 00:24:12,059
So if you're interested in that, just go to this website.

00:24:12,059 --> 00:24:13,950
You can find some information there.

00:24:13,950 --> 00:24:19,360
So it is a second block of advertisement.

00:24:19,360 --> 00:24:21,230
So thank you very much.

00:24:21,230 --> 00:24:27,050
If you have any questions, you might reach me here or on my

00:24:27,050 --> 00:24:29,629

YouTube URL: https://www.youtube.com/watch?v=9oGQucDOaoY


