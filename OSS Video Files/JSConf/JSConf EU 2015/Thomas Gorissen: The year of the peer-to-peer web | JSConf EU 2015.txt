Title: Thomas Gorissen: The year of the peer-to-peer web | JSConf EU 2015
Publication date: 2015-10-20
Playlist: JSConf EU 2015
Description: 
	2015 is when WebRTC broke through. Barely a standard it already has its own conferences, yet is mostly known for itâ€™s ability to do video calling. It is time the web developer community becomes aware of all the powers of WebRTC and a browser-to-browser web that can be faster, more resilient and safer. This talk wants to open minds, through the power of code and demos, showing incredibly useful, fun and even ridiculous use-cases (from WebTorrent to Karaoke to Selfies) cut through the complexity of WebRTC and inspire what could become the democratisation of the web.

Intro music by @halfbyte
Captions: 
	00:00:25,619 --> 00:00:27,220
Thank you very much.

00:00:27,220 --> 00:00:33,980
So, I'm going to try to talk about a few things I've been working with for the last two years

00:00:33,980 --> 00:00:39,650
and that I think haven't really gotten the attention specifically from the web developer

00:00:39,650 --> 00:00:44,960
community just yet that they deserve, I'm going to do this in a unique way, I want to

00:00:44,960 --> 00:00:52,899
create buzz, how do you create buzz about technology and how do you do that well.

00:00:52,899 --> 00:00:57,260
I have a solution , I have a stage, you as an audience and I really appreciate your participation

00:00:57,260 --> 00:01:06,640
in this a little bit, just being an audience, we are going to try this, you might want to

00:01:06,640 --> 00:01:09,850
mute the microphone a little bit.

00:01:09,850 --> 00:01:16,330
Just hold on.

00:01:16,330 --> 00:01:20,649
All right.

00:01:20,649 --> 00:01:33,399
I know beard and stuff doesn't work so well, but we're going to see, we're going to see.

00:01:33,399 --> 00:01:35,229
Right.

00:01:35,229 --> 00:01:41,069
So, waiting for this moment about two and a half years now since the initial introduction

00:01:41,069 --> 00:01:44,330
of it.

00:01:44,330 --> 00:01:47,311
Every once in a lifetime, like technology

00:01:47,311 --> 00:02:02,319
comes around that changes everything - {Laughter} clearly into the clicker, I've already given

00:02:02,319 --> 00:02:03,319
up.

00:02:03,319 --> 00:02:11,830
1944, The Telegraph, it was the first time that we as people could communicate over distance,

00:02:11,830 --> 00:02:14,660
in real time.

00:02:14,660 --> 00:02:22,760
It didn't only change communication, it invented distributed communication in the first place.

00:02:22,760 --> 00:02:29,580
The telephone, suddenly it was possible to communicate with emotions and express urgency

00:02:29,580 --> 00:02:32,250
over a phone call, all across the city.

00:02:32,250 --> 00:02:37,739
That's never been done before and it's still the way how we communicate all over the world

00:02:37,739 --> 00:02:38,739
today.

00:02:38,739 --> 00:02:49,359
Now, today, I'm going to introduce to you three technologies of this magnitude - {Laughter}.

00:02:49,359 --> 00:02:55,530
Number one, a light speed media streaming service.

00:02:55,530 --> 00:03:01,510
Number two, a revolutionary way to make calls.

00:03:01,510 --> 00:03:06,590
Number three, a breakthrough internet communications technology.

00:03:06,590 --> 00:03:10,870
A streaming service.

00:03:10,870 --> 00:03:13,459
A way to make calls.

00:03:13,459 --> 00:03:16,890
An internet communications technology.

00:03:16,890 --> 00:03:18,870
A streaming service.

00:03:18,870 --> 00:03:21,660
{Laughter} , A way to make calls.

00:03:21,660 --> 00:03:24,010
Are you getting it!?

00:03:24,010 --> 00:03:33,270
These are not three separate technologies, this is one technology -- we are calling it

00:03:33,270 --> 00:03:35,299
iRTC.

00:03:35,299 --> 00:03:37,329
{Applause}.

00:03:37,329 --> 00:03:46,819
Today, we collectively, as web community, reinvent real time communications.

00:03:46,819 --> 00:03:51,569
I call it the year of the peer-to-peer web.

00:03:51,569 --> 00:03:52,629
2015.

00:03:52,629 --> 00:03:58,049
So who his this guy, that's me, a web developer forever, lived indeed sin poor for last five

00:03:58,049 --> 00:04:05,790
years, organise conferences and help developers with Web RTC for quite a while, two years,

00:04:05,790 --> 00:04:12,130
this is what it is, a set of JavaScript APIs in the browser to enable peer-to-peer real

00:04:12,130 --> 00:04:15,700
time media and data exchange.

00:04:15,700 --> 00:04:25,660
Specifically these there are APIs I'm talking about, it's pretty technical, what powerful

00:04:25,660 --> 00:04:31,700
about this, it's an open web standard, if HTML, JavaScript and CSS have taught us anything,

00:04:31,700 --> 00:04:37,100
it's really sticky, a lot of people chip in and use them, they are you see to learn and

00:04:37,100 --> 00:04:43,450
all over the place, we are seeing the same thing with web TC, the adoption is off the

00:04:43,450 --> 00:04:44,450
chart.

00:04:44,450 --> 00:04:48,650
Let's start with the internet communication part.

00:04:48,650 --> 00:04:53,580
This is maybe a little bit repetitive for everybody that knows peer-to-peer already,

00:04:53,580 --> 00:04:59,750
how web communication usually works, you send a message to some kind of server farm somewhere,

00:04:59,750 --> 00:05:04,280
it's pushed to another peer that receives it.

00:05:04,280 --> 00:05:10,949
With peer-to-peer that all changes, suddenly this is how it looks, you can int connect

00:05:10,949 --> 00:05:16,180
directly from one browser to another browser, send data without going through a server.

00:05:16,180 --> 00:05:22,090
Now, that's not entirely true as we find out, you can do with Web RTC without a server,

00:05:22,090 --> 00:05:28,550
it's about manual, there is still a server that's really handy to come into facilitate

00:05:28,550 --> 00:05:36,330
two peers to another, like when two people know a third guy and you ask for an introduction.

00:05:36,330 --> 00:05:42,560
Peer A and B here, are a known party and then do something audiology ice, a candidate exchange

00:05:42,560 --> 00:05:49,370
to exchange IP addresses and port, so they can connect to each other and transfer data.

00:05:49,370 --> 00:05:56,569
Now, this is great because the direct connection is by the default, by the design of the IP

00:05:56,569 --> 00:06:01,530
protocol the shortest route they can find thorough the internet, shortest, the lowest

00:06:01,530 --> 00:06:04,789
latency route that they find.

00:06:04,789 --> 00:06:12,090
It's great, you know low latency in your connection, it was essentially invented for audio video

00:06:12,090 --> 00:06:18,930
calling, conferencing, light presentations, file transfer, or even sync music streaming

00:06:18,930 --> 00:06:26,320
we have seen, we saw earlier in the cool demo with the Create Audio in the web browser and

00:06:26,320 --> 00:06:28,729
they do it collaboratively.

00:06:28,729 --> 00:06:33,410
It's also really good to create resilient decentralised mesh networks, where you don't

00:06:33,410 --> 00:06:39,011
need this bottleneck or point of failure of the server.

00:06:39,011 --> 00:06:43,919
So you can create mesh networks for sensor data, where sensors collectively create a

00:06:43,919 --> 00:06:49,080
network to exchange data or file and content distribution.

00:06:49,080 --> 00:06:54,650
There are also a few things I've learned that you don't want to use Web RTC for, really

00:06:54,650 --> 00:07:00,919
not made for it, it's build usually on RDP, you don't really know if your message arrived,

00:07:00,919 --> 00:07:08,090
it is a bit, unhandy in a lot of cases, for example, you too traditional music or video

00:07:08,090 --> 00:07:15,800
streaming it's not great to use Web RTC, Web RTC prior ties the low latency part over the

00:07:15,800 --> 00:07:21,509
quality part, so you would watch a movie and suddenly the quality would go down the bandwidth

00:07:21,509 --> 00:07:27,889
was reduced a little bit, the traditional options are better, use a buffer to give the

00:07:27,889 --> 00:07:34,819
best quality over latency, synchronised communication, a chat, is usually something you don't necessarily

00:07:34,819 --> 00:07:41,590
want to do on Web RTC unless you want to make it really private and secure, but most chats

00:07:41,590 --> 00:07:46,840
require the other party not to be online that same time, so it's an async communication,

00:07:46,840 --> 00:07:51,530
you don't expect the other person to be in the same app at the same time and you want

00:07:51,530 --> 00:07:56,939
to go through a server that actually pushes the message to the other party.

00:07:56,939 --> 00:08:01,440
In gaming I've seen some people trying to build multiplayer games on Web RTC, it's not

00:08:01,440 --> 00:08:08,770
great, you end up having a different connection to ever other party, a different latency,

00:08:08,770 --> 00:08:14,900
meaning that different events arrive at different players at different times, that brings the

00:08:14,900 --> 00:08:21,520
whole logic of the game and confuses it, so better use a server and create a single event

00:08:21,520 --> 00:08:23,669
that puts everything in order.

00:08:23,669 --> 00:08:29,189
Now, the second part, this is what WebRTC was created for, audio and video calling,

00:08:29,189 --> 00:08:33,750
it's really, really powerful and we should use it more.

00:08:33,750 --> 00:08:38,690
To show how it was done so far, this is largely how we communicate with voice on the internet

00:08:38,690 --> 00:08:45,840
these days, we type in a phone number we read on a website or chat, we exchange user names,

00:08:45,840 --> 00:08:51,720
this what we do all day, or use Gmail hang outs where you need an account and this is

00:08:51,720 --> 00:08:53,320
the website of Gmail.

00:08:53,320 --> 00:09:01,850
Now, Web RTC changes this theme, because Web RTC is a real time communication as a feature

00:09:01,850 --> 00:09:06,900
in any app or website, you don't need a separate software any more that facilitates that you

00:09:06,900 --> 00:09:12,420
swap to, to be able to communicate with somebody else, but what you too, you use communication

00:09:12,420 --> 00:09:15,710
wherever you are in the context of dealing with person already.

00:09:15,710 --> 00:09:20,910
You don't need to pull out your phone any more, you can swap devices, so in a way

00:09:20,910 --> 00:09:27,440
Web RTC enables embedded and contextual communication, I've given some examples here that I would

00:09:27,440 --> 00:09:32,800
like to see or have already been done, that for example, you can call your host on, via

00:09:32,800 --> 00:09:38,420
Web RTC, both sides have the app, so why not use the data channel, sorry the data connection

00:09:38,420 --> 00:09:44,240
of your phone to facilitate the call instead of incurring roaming charges on my side, the

00:09:44,240 --> 00:09:49,649
came with Gruber, where my driver gets stuck somewhere where he can't call me in another

00:09:49,649 --> 00:09:56,420
country, he doesn't want to call an international number, telehealth, restaurant booking, property

00:09:56,420 --> 00:10:02,040
agents, where you can facilitate a conversion metric, most companies want to measure if

00:10:02,040 --> 00:10:07,149
there was a communication happening between the interested party and the agent, now they

00:10:07,149 --> 00:10:11,790
can measure with Web RTC how long it was, instead of just seeing if they clicked on

00:10:11,790 --> 00:10:14,570
a field to unyield a phone number.

00:10:14,570 --> 00:10:21,089
Every market place, eBay, carousel, Singapore start up, where you want to check up on a

00:10:21,089 --> 00:10:25,820
item or too a video call with a seller before you buy, it in those cases you can use Web

00:10:25,820 --> 00:10:27,240
RTC.

00:10:27,240 --> 00:10:32,810
Now, looking back at this, we want to get a little bit in the technology and the features

00:10:32,810 --> 00:10:38,339
and how it works, the terminology, the introduction service is something you would need to write

00:10:38,339 --> 00:10:43,440
on the service side, you have a client side component that communicates with the sir server,

00:10:43,440 --> 00:10:47,320
they know a common language to facilitate the introduction.

00:10:47,320 --> 00:10:53,290
You don't need to do this any more these days, their signalling services out there that do

00:10:53,290 --> 00:11:01,320
this for you, so you can just use one of the STKs, or their server or even library that

00:11:01,320 --> 00:11:05,139
you install on your server, to facilitate this.

00:11:05,139 --> 00:11:08,279
That's, that's much easier than writing it yourself.

00:11:08,279 --> 00:11:15,100
Now, there are more hosted services that help you specifically for the media calling part

00:11:15,100 --> 00:11:20,860
in situations where the network might not necessarily allow for peer connection to be

00:11:20,860 --> 00:11:26,019
established, specifically in those cases where fire-wall prevents it from happening to poke

00:11:26,019 --> 00:11:29,880
through a hole into the corporate network for example.

00:11:29,880 --> 00:11:35,850
In those cases they are hosted services that provide turn, turn services, that essentially

00:11:35,850 --> 00:11:45,090
you as a peer connect to, so that the turn server becomes your peer side of the communication.

00:11:45,090 --> 00:11:50,709
So it, in other words, represents you as a peer with a direct connection to your device

00:11:50,709 --> 00:11:56,870
cannot be established, for example, fire-wall constraints.

00:11:56,870 --> 00:12:02,720
More sophisticated service that is very good in the specific use case of multiparty audio

00:12:02,720 --> 00:12:10,829
video umm... what it does, it increases performance on the peer side, so if you see this mesh

00:12:10,829 --> 00:12:16,670
network up here, think of every peer sending a video stream to everybody else and receiving

00:12:16,670 --> 00:12:23,140
a video stream from everybody else, it has to encrypt and encode and descript and decode,

00:12:23,140 --> 00:12:27,589
six streams if you count the errors on each peer, six streams.

00:12:27,589 --> 00:12:33,220
Now with the introduction of the so-called MCU, multicast unit of selective forwarding

00:12:33,220 --> 00:12:40,660
university, you introduce a server the latency goes up in favour of the CPU and bandwidth

00:12:40,660 --> 00:12:47,769
requirements on the band side, now the errors are just five, it's one less, everybody sends

00:12:47,769 --> 00:12:50,889
just one video out and gets four videos back.

00:12:50,889 --> 00:12:56,220
Now, this number goes like the failings of this method go up obviously the more peers

00:12:56,220 --> 00:13:01,930
you add to this communication, so this is a really valuable service for multiparty it's

00:13:01,930 --> 00:13:06,930
available as hosted services you can actually just book through different providers.

00:13:06,930 --> 00:13:13,420
SFU relays media streams to reduce the amount of connections and use on your device multiparty

00:13:13,420 --> 00:13:15,880
sessions.

00:13:15,880 --> 00:13:20,670
These are some of the providers out there that have services around Web RTC specifically

00:13:20,670 --> 00:13:26,850
for the calling and conferencing case, I work one myself, itâ€™s in the centre, sky link

00:13:26,850 --> 00:13:34,670
IO, with that, we get to the last bit that is really fantastic about Web RTC, pretty

00:13:34,670 --> 00:13:42,040
sophisticated and it can be of much use, specifically in emerging markets which I care about being

00:13:42,040 --> 00:13:45,329
located into Singapore.

00:13:45,329 --> 00:13:50,340
Let's look at how that works a little, this is how typically the CDN delivery works, you

00:13:50,340 --> 00:13:55,690
receive a file from the CDN network, sometimes they have extra locations say at least it's

00:13:55,690 --> 00:14:03,040
in closer proximity, you can increase the download speed if you had Web RTC to the mix

00:14:03,040 --> 00:14:08,110
and you download the same content from other peers that are also downloading it in segments.

00:14:08,110 --> 00:14:12,440
It's a concept you might have heard about before if you have ever town loaded something

00:14:12,440 --> 00:14:18,949
via BitTorrent, where you download one movie or file or music from other people also downloading

00:14:18,949 --> 00:14:20,899
it.

00:14:20,899 --> 00:14:29,529
So there too that icon called one is a company called Swarmify, they have a peer CDN approach

00:14:29,529 --> 00:14:34,610
embedded JavaScript link to a file on the CDN if somebody else in proximity is downloading

00:14:34,610 --> 00:14:39,269
you will download from those peers as well.

00:14:39,269 --> 00:14:48,060
Another one is WebTorrent worked on created the peer CDN before and web torrent is a fascinating

00:14:48,060 --> 00:14:54,630
project it's a essentially bit torrent but it works as a website in your browser, actually

00:14:54,630 --> 00:14:59,720
want to try this after the talk see how good the network here really is see if we can download

00:14:59,720 --> 00:15:04,319
a movie collectively through a web torrent.

00:15:04,319 --> 00:15:10,819
Just to point this out there's a situation in which you might want to use a server side

00:15:10,819 --> 00:15:18,920
peer as well where it's not your browser that is part of the mesh session but it's a server,

00:15:18,920 --> 00:15:20,209
that's possible these days too.

00:15:20,209 --> 00:15:26,670
There a really cool project called node web RTC that you can install this way that gives

00:15:26,670 --> 00:15:32,100
you the data channel of web RTC at least not the audio/video part but the data channel

00:15:32,100 --> 00:15:35,810
you can code with it in a serve and make it an automated service.

00:15:35,810 --> 00:15:41,899
This is actually the service that web torrent users as a bridge to interconnect the bit

00:15:41,899 --> 00:15:45,490
torrent network and the WebTorrent network because they are not comfortably with each

00:15:45,490 --> 00:15:50,100
other but through the bridges that are servers that participate in the WebTorrent session

00:15:50,100 --> 00:15:58,860
you can suddenly in put a magnet link in the start downloading the torrent in your browser.

00:15:58,860 --> 00:16:05,579
Why is it the year of web RTC, why is 2015 suddenly everything changed us what new?

00:16:05,579 --> 00:16:12,370
There have been so many annoyances with web RTC if you start looking into it you find

00:16:12,370 --> 00:16:19,459
out that Chrome, Firefox don't support it, subtle differences in, there key protocol

00:16:19,459 --> 00:16:29,139
and other things, video Codex, and that it's not really supported in Safari, mainly the

00:16:29,139 --> 00:16:32,060
major annoyance.

00:16:32,060 --> 00:16:37,040
Now thereâ€™s some good news, last week came out that Edge is essentially starting to ship

00:16:37,040 --> 00:16:43,180
web RTC, not entirely true, when I was talking about iRTC the vowel was almost right they

00:16:43,180 --> 00:16:50,420
do RTC another slightly different interface on the same use cases still does the same

00:16:50,420 --> 00:16:56,529
thing audio/video realtime communication, slightly different to use, bit more powerful

00:16:56,529 --> 00:17:03,110
than what web RTC has offered so far, but if you look through all the looks and how

00:17:03,110 --> 00:17:10,100
Google essentially the creator and driving force behind web RTC reacted to it, they said

00:17:10,100 --> 00:17:13,890
both standards will eventually consortia verge and be comfortable

00:17:13,890 --> 00:17:15,810
with each other.

00:17:15,810 --> 00:17:21,490
That's starts essentially from the beginning where they are lot of efforts being put to

00:17:21,490 --> 00:17:28,790
create an adaptor library that makes or RTC usable the same way you use web RTC.

00:17:28,790 --> 00:17:35,240
By using the library you code web RTC and it works in Edge.

00:17:35,240 --> 00:17:39,310
Now there's another library that I help out with as well, which does the same thing it's

00:17:39,310 --> 00:17:47,760
called adapter.js, its built on Google adaptor file it goes overall the differences in Firefox

00:17:47,760 --> 00:17:54,080
and Chrome and Opera, and now it considers Edge as well so it does the RTC translation

00:17:54,080 --> 00:17:55,080
as well.

00:17:55,080 --> 00:18:02,910
Additionally it's really unique, it polyfills web RTC in Safari and Internet Explorer down

00:18:02,910 --> 00:18:05,160
to version IE9.

00:18:05,160 --> 00:18:12,080
How does it do that if a consumer visits a website that users adaptor.js and wants to

00:18:12,080 --> 00:18:16,880
access web RTC it will offer to install a little free plug-in, doesn't require browser

00:18:16,880 --> 00:18:23,920
restart, just are you fresh of the website, suddenly web RTC works Safari and IE.

00:18:23,920 --> 00:18:27,780
Which opens it up to enterprise use.

00:18:27,780 --> 00:18:32,780
Now in mobile web RTC works in these 3 browsers as well you can use it on your Android phone

00:18:32,780 --> 00:18:35,530
you can try it out.

00:18:35,530 --> 00:18:43,930
It's remaining it works with Safari and iOS, I might have some news year the company I

00:18:43,930 --> 00:18:51,581
work for kicked off earlier this year a project called web RTC and Webkit.

00:18:51,581 --> 00:18:57,911
We have made some progress, since July Webkit includes part of the web RTC spec, specifically

00:18:57,911 --> 00:19:05,570
the get news media part of it where you get access to your microphone and camera, and

00:19:05,570 --> 00:19:08,940
Apple as accepted that code into Webkit.

00:19:08,940 --> 00:19:14,690
The problem is we don't no when Apple ships anything they don't make this public, could

00:19:14,690 --> 00:19:22,960
be as soon as with iOS 9.1, and whatever the next version or up-grade they ship with it

00:19:22,960 --> 00:19:33,130
suddenly the microphone access it available, sadly the data parts are not yet in Webkit

00:19:33,130 --> 00:19:39,789
so I guess in this case it's still another year so long you have to use the plug-in or

00:19:39,789 --> 00:19:45,179
and this more news, if you have seen the web RTC talk that Google gave the other day one

00:19:45,179 --> 00:19:52,679
of there most requested features was that for Chrome and iOS that people asked to have

00:19:52,679 --> 00:20:00,080
web RTC patched on to web view in iOS, and if Chrome could do that, and so I think they

00:20:00,080 --> 00:20:06,310
are now in iteration 2 of testing this out, so maybe soon Chrome on iOS might actually

00:20:06,310 --> 00:20:10,080
support web RTC.

00:20:10,080 --> 00:20:17,630
There are plenty of objectives in FTC that works for web native apps, suddenly everybody

00:20:17,630 --> 00:20:28,179
wants in not just a browser thing anymore, web RTC works in native apps on android, iOS

00:20:28,179 --> 00:20:31,370
it's suddenly everywhere.

00:20:31,370 --> 00:20:37,740
One more thing that we added with my company in Singapore, which is screen sharing on HTTPS

00:20:37,740 --> 00:20:43,960
in all 4 major browsers, in IE and Safari it's driven by the free plug-in in Chrome,

00:20:43,960 --> 00:20:54,210
Firefox it works out of the box, in Skylink it's one line it's Skylink.sharescreen it

00:20:54,210 --> 00:20:56,680
works in 4 browsers.

00:20:56,680 --> 00:21:01,550
Here's the URL again to use the adaptor.js.

00:21:01,550 --> 00:21:08,850
Now, I think this is the main take away from this talk, this year web RTC is finally ready

00:21:08,850 --> 00:21:13,690
to be used it can be used in Enterprise, works in all major browsers without destroying the

00:21:13,690 --> 00:21:18,200
user experience too much, yes in some you need to install a plug-in but it's a rather

00:21:18,200 --> 00:21:21,600
straightforward process, that every user get.

00:21:21,600 --> 00:21:24,420
We're shipping plenty of updates to those 2.

00:21:24,420 --> 00:21:31,510
I can't wait to see what developers that want to tinker come up with, seen the presentation

00:21:31,510 --> 00:21:37,289
earlier on it's just a little glimpse in what's possible and maybe there are so many more

00:21:37,289 --> 00:21:42,490
things I have not thought about yet that you can do with web RTC in which case it might

00:21:42,490 --> 00:21:44,510
be really, really enjoyable.

00:21:44,510 --> 00:21:48,659
So go out there and build a lot of things, use all these platforms and tools out there,

00:21:48,659 --> 00:21:52,980
a lot of them are free or really affordable so you can start

00:21:52,980 --> 00:21:58,570
tinkering for very little money and use it without coding too much stuff.

00:21:58,570 --> 00:22:03,430
I am sure you have at some point seen all these demos about how to build a conference

00:22:03,430 --> 00:22:09,460
in your browser in 50 lines of code, and if I seem to have a bit more time so I might

00:22:09,460 --> 00:22:14,539
actually be able to show you some of this stuff.

00:22:14,539 --> 00:22:23,270
I heard yesterday at reject.js there was somebody demoing a bit of it, now I want to show you

00:22:23,270 --> 00:22:28,700
that it can work with a little open source project that we have.

00:22:28,700 --> 00:22:41,309
This is called Get a Room, I thought it was a nice way to call an online calling solution.

00:22:41,309 --> 00:22:49,309
It's open source it's based on React, so what I am going to do here I am going to use the

00:22:49,309 --> 00:22:56,029
native act we have on iOS I'm going to use Safari over here.

00:22:56,029 --> 00:22:57,990
Just to show that actually works.

00:22:57,990 --> 00:23:02,190
How do we call this...

00:23:02,190 --> 00:23:11,330
JSConfEU... not anything else.

00:23:11,330 --> 00:23:14,630
Right.

00:23:14,630 --> 00:23:18,500
I want to type in the correct address...

00:23:18,500 --> 00:23:19,760
JSConfEU.

00:23:19,760 --> 00:23:22,270
Let's see.

00:23:22,270 --> 00:23:26,049
There we go.

00:23:26,049 --> 00:23:37,559
Oh I look good, doesn't look too bad actually, I could get used to this.

00:23:37,559 --> 00:23:45,410
{laughter} {applause} this is on iOS, if you have an Android phone just open a browser

00:23:45,410 --> 00:23:50,960
join the same URL you will show up here, it supports up to 4 people, say hi and wave on

00:23:50,960 --> 00:23:56,760
screen if you like there we go.

00:23:56,760 --> 00:23:57,760
That's how the works.

00:23:57,760 --> 00:24:04,220
It works even great on 4G I do this demo in Singapore on 4G all the time, now it just

00:24:04,220 --> 00:24:12,720
goes to wi-fi router and back, finds the shortest route.

00:24:12,720 --> 00:24:14,130
So that's kind of fun.

00:24:14,130 --> 00:24:19,520
Now we have a lot more cool demos, let me show you some others.

00:24:19,520 --> 00:24:28,100
We had a talk from the Amazon guys about web components earlier I thought well, maybe web

00:24:28,100 --> 00:24:33,110
component might be the way to get people to use web RTC, what about just one HTML tag

00:24:33,110 --> 00:24:39,780
and suddenly you have an audio/video realtime chat tool embedded in your website.

00:24:39,780 --> 00:24:43,850
Well with web components you can kind of do this stuff I hope you can see it we have the

00:24:43,850 --> 00:24:51,850
little Skylink call tag here that takes parameters, call ID and caller ID to identify different

00:24:51,850 --> 00:24:57,899
peers, maybe let's do a little demo here.

00:24:57,899 --> 00:25:08,149
So if we make one person Alice and the other person we make Bob, you can see it's as sophisticated

00:25:08,149 --> 00:25:11,040
as hell.

00:25:11,040 --> 00:25:16,711
So from the source code this literally just including polymer as a library to polyfill

00:25:16,711 --> 00:25:23,010
the web components then you have this, oh it's already open, here's that one HTML tag,

00:25:23,010 --> 00:25:25,909
maybe I can show you.

00:25:25,909 --> 00:25:27,490
This is essentially just it.

00:25:27,490 --> 00:25:30,720
You can put as many as you want on one website.

00:25:30,720 --> 00:25:36,590
If I click call Bob here what will happen.

00:25:36,590 --> 00:25:43,850
Ooh Alice is calling, pick up, sure.

00:25:43,850 --> 00:25:50,570
Suddenly we're in an audio/video communication.

00:25:50,570 --> 00:25:53,450
{applause}

00:25:53,450 --> 00:25:58,809
Now another cool thing I really love about web RTC if you have ever worked with React,

00:25:58,809 --> 00:26:04,549
React is kind of awesome it has the state full UI rendering engine if you have a state

00:26:04,549 --> 00:26:09,330
that represents how your website currently looks like, and you have a tool that allows

00:26:09,330 --> 00:26:15,480
you to translate this low latency really fast to another participant, well what can you

00:26:15,480 --> 00:26:16,789
do with it?

00:26:16,789 --> 00:26:27,039
So I have this little website here, it's a really simple website like all it does whenever

00:26:27,039 --> 00:26:37,910
I type in here it's just rendered in Markdown in a dif, on the right side if I open a new

00:26:37,910 --> 00:26:47,630
website on the new tab what it will do is mix in for React you add 2 lines of code to

00:26:47,630 --> 00:26:56,250
a React component, one includes the mix in, one is my API key, it starts syncing the state

00:26:56,250 --> 00:27:02,279
between both browsers, it sent the object from this component in real time to the other

00:27:02,279 --> 00:27:07,159
browser which then renders the exact same site if your entire website is written in

00:27:07,159 --> 00:27:13,150
react you can do screen sharing without pixel data.

00:27:13,150 --> 00:27:16,460
That renders the exact same thing it's

00:27:16,460 --> 00:27:22,649
based on something that one of the creators of React did originally I thought it was kind

00:27:22,649 --> 00:27:28,320
of cool tool with 2 lines of code.

00:27:28,320 --> 00:27:37,611
So many more demos from like chat room, simple chat rooms you can use to selfie demo, that's

00:27:37,611 --> 00:27:43,779
really popular in Asia for some reason where you can load a camera website on your Android

00:27:43,779 --> 00:27:44,779
phone.

00:27:44,779 --> 00:27:49,870
If you do selfies with a selfie stick you can't really reach the button you need another

00:27:49,870 --> 00:27:54,730
way to trigger the photo, you can do this by loading on another Android phone or laptop,

00:27:54,730 --> 00:28:01,649
{laughter} like a retrieval website where you can then see a preview from your phone

00:28:01,649 --> 00:28:06,750
via webRTC you can trigger the photo from there, it actually sends in full resolution

00:28:06,750 --> 00:28:12,490
from the phone via data channel to the other device so that's open source, you can try

00:28:12,490 --> 00:28:14,900
this out here.

00:28:14,900 --> 00:28:19,669
We have a little collaboration tool where you can see how co-working could work if you

00:28:19,669 --> 00:28:24,100
actually see an updated picture every 5 seconds, a lot of good stuff to play round with.

00:28:24,100 --> 00:28:28,940
I think I am slowly running out of time anyway so let's do one last thing to see if we can

00:28:28,940 --> 00:28:32,380
make this wi-fi go down.

00:28:32,380 --> 00:28:35,269
Sorry in advance if it works.

00:28:35,269 --> 00:28:41,380
So this is the cool project that we have been working on, if you go to the same website

00:28:41,380 --> 00:28:48,140
you will start streaming that same movie that I am streaming now, and on the left side it

00:28:48,140 --> 00:28:52,400
renders a graph of who am I downloading this movie from right now.

00:28:52,400 --> 00:28:56,769
I'm clearly loading it from the server the more people that join the website in your

00:28:56,769 --> 00:29:02,789
Chrome or Firefox browser, the more people will show up and the more people will start

00:29:02,789 --> 00:29:11,640
downloading segments of that movie, you can get from everybody else, it's currently on

00:29:11,640 --> 00:29:17,899
the same website and it just happens in your browser, it's kind of really cool.

00:29:17,899 --> 00:29:21,740
With that, thank you very much and I hope you enjoy tinkering with Web RTC.

00:29:21,740 --> 00:29:21,960

YouTube URL: https://www.youtube.com/watch?v=CzxQn78uO6c


