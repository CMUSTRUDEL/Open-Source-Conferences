Title: Anand Vemuri: What Your Scanner Doesnâ€™t Tell You CAN Hurt You | JSConf EU 2015
Publication date: 2015-10-21
Playlist: JSConf EU 2015
Description: 
	Modern JavaScript libraries and frameworks have become the de facto standard in web application development. However, the great strides in innovation have created framework-specific security vulnerabilities that most modern JavaScript security scanners are not programmed to search for. Personal research with intentionally vulnerable applications as well as live production code has shown that many popular scanners do not detect common application vulnerabilities.

This talk will discuss some common security pitfalls developers make when working with popular client-side JavaScript frameworks. Intentionally vulnerable applications developed with Backbone.js, Angular.js, Ember.js, and Meteor,js will be attacked and exploited live. Github links to the vulnerable applications used in this presentation will be released after the presentation. Through strengthening the security posture of JavaScript applications, we can take strides towards creating a more secure Internet.

Intro music by @halfbyte
Captions: 
	00:00:21,490 --> 00:00:23,840
Hello, hello. Ok. Just one second, so hello everyone, my name is Anand Vemuri,

00:00:23,840 --> 00:00:30,990
I am going to be talking about security today. Before I begin I was like to pre-vast by saying

00:00:30,990 --> 00:00:39,010
that I'm extremely humbled to be here JSConf EU, is arguably the conference I used to work

00:00:39,010 --> 00:00:43,480
a couple of years back, it inspired me to take JavaScript seriously for me to be on

00:00:43,480 --> 00:00:49,170
this side of the stage is a really big honour.

00:00:49,170 --> 00:00:55,960
So who am I, my Twitter handle is brow hat 57, a software developer who later went to

00:00:55,960 --> 00:01:04,030
the dark side and is now doing testing and security, I work for nVisium in the DC Metro

00:01:04,030 --> 00:01:12,159
area, I'm very passionate about Taco Bell if you are, please talk to me, we can talk

00:01:12,159 --> 00:01:18,080
about Taco Bell. I do play the flute, if this whole developer thing doesn't work, that's

00:01:18,080 --> 00:01:29,170
my back up. I'm a wannabe, I'm by no means an expert in this language, I do what I can,

00:01:29,170 --> 00:01:36,609
I come to these conferences and I see these incredible talks, I'm so inspired to learn

00:01:36,609 --> 00:01:39,100
more and more.

00:01:39,100 --> 00:01:44,600
Just a quick show of hands here, how many of you guys write code for a living - just

00:01:44,600 --> 00:01:49,929
raise your hand - wow, this is awesome, great, it's not surprising, as we're at a JavaScript

00:01:49,929 --> 00:01:55,380
convention. As software developers that's pretty awesome.

00:01:55,380 --> 00:02:01,079
So another quick, quick show of hands, real quick, how many of you guys work on the dark

00:02:01,079 --> 00:02:10,740
side of things in security, whether it ethical hacking, or for your own fun? So... ok...

00:02:10,740 --> 00:02:16,610
good a couple of you. So, as somebody who was a software developer who later became

00:02:16,610 --> 00:02:22,120
an application security consultant, I faced a little bit of a problem, this problem was

00:02:22,120 --> 00:02:28,330
that as a software developer you can, the word 'Software developer', basically tells

00:02:28,330 --> 00:02:33,270
you what the person does, they develop software, it's almost a no-brainer, there is really

00:02:33,270 --> 00:02:38,910
no good word for what I too, in terms of what my job description is, what do you call somebody

00:02:38,910 --> 00:02:46,670
who does security, like a security guy... or... I don't know, maybe a consultant. The

00:02:46,670 --> 00:02:51,330
best thing I could think of is penetration tester, that really doesn't define what I

00:02:51,330 --> 00:02:53,900
do really well. I feel like, because

00:02:53,900 --> 00:02:59,260
people don't necessarily understand what it is I do, I've been called a couple of things

00:02:59,260 --> 00:03:06,920
in my career, among all of them I've been called a scan tester, scanner, security scanner

00:03:06,920 --> 00:03:15,090
tester, vulnerability scan tester, even sometimes in jest a scan Monkey, it's a little bit alarming,

00:03:15,090 --> 00:03:22,200
it's a common motif here where people think, people have this notion of security in that

00:03:22,200 --> 00:03:28,250
you run a bunch of antivirus scans, or a bunch of scans in your application, you point click,

00:03:28,250 --> 00:03:33,570
you run your application through and you create a PDF and ship it off to developers to make

00:03:33,570 --> 00:03:41,430
their lives miserable. This couldn't be further from the truth. If you actually look at what

00:03:41,430 --> 00:03:46,970
the English dictionary says about scanners, for starters it uses the word 'Scan' in the

00:03:46,970 --> 00:03:52,980
definition so it's not very helpful! {Laughter} It defines a scanner as a person or thing

00:03:52,980 --> 00:03:57,200
that scans. What is very interesting about this, I'm going to refer to scanners in my

00:03:57,200 --> 00:04:02,400
talk, I'm not just talking about automated pieces of code, I'm also talking about people

00:04:02,400 --> 00:04:14,240
that just scan, by scan I mean to glance at or read over hastily, therefore, by, by missing

00:04:14,240 --> 00:04:20,470
out on a lot of things, if you are just running some kind of automated scanner or just glancing

00:04:20,470 --> 00:04:24,340
over something very quickly, there is a very good chance that you are going to miss something,

00:04:24,340 --> 00:04:30,340
something very critical. So we're talking about application security, what we typically

00:04:30,340 --> 00:04:36,710
too is rather than look at an application and try, trying to just quickly pump out a

00:04:36,710 --> 00:04:43,610
PDF, we look at an application's architecture and after every point we try to systematically

00:04:43,610 --> 00:04:50,419
break the application, if it's a database, ok can we inject some sort of query in to

00:04:50,419 --> 00:04:56,490
the database to get some kind of code execution, or trick the app into clicking a button that

00:04:56,490 --> 00:05:03,379
will submit a state-changing request, or can I, you know, use some insecure direct object

00:05:03,379 --> 00:05:07,569
reference to escalate my privileges, these are the kind of questions that run through

00:05:07,569 --> 00:05:13,169
my mind when I use the internet, which is sometimes a curse in disguise, especially

00:05:13,169 --> 00:05:20,300
when my credit card is going online, it's not pleasant to think about it. As someone

00:05:20,300 --> 00:05:26,069
doing a lot of JavaScript recently, a lot of my attacks for research are focused on

00:05:26,069 --> 00:05:32,680
the browser and the client side aspect of things, I'm looking into client side attacks,

00:05:32,680 --> 00:05:40,110
especially with the newer frameworks, as we see them all throughout the past so many years,

00:05:40,110 --> 00:05:45,180
when we talk about 'Client side security', the major vulnerability that comes to mind

00:05:45,180 --> 00:05:55,490
is cross-site scripting, it's one of the most common vulnerabilities that we see all throughout,

00:05:55,490 --> 00:06:01,810
ever since the inception of the internet we've seen vulnerable code and the problem is, cross-site

00:06:01,810 --> 00:06:09,930
scripting attacks users like me, you or, like admins to an application that have some kind

00:06:09,930 --> 00:06:17,330
of privileged data, cross-site describing is very dangerous in that respect, it's kind

00:06:17,330 --> 00:06:21,809
of, you can think of it as a JavaScript injection attack on the client side, the exploits, as

00:06:21,809 --> 00:06:29,400
we will see later on, can get very, very bad, by that I mean really, really scary.

00:06:29,400 --> 00:06:35,889
So what exactly is cross-site scripting? Well, it starts off with the very, very evil guy,

00:06:35,889 --> 00:06:40,120
right and so this evil guy wants to do some really evil things, so he's going to send

00:06:40,120 --> 00:06:48,129
a hidden URL, or a URL to a victim which contains some hidden script somewhere, you guys work

00:06:48,129 --> 00:06:54,090
with JavaScript, I don't have to tell you, a lot of times these scripts run on your browser

00:06:54,090 --> 00:06:59,189
and they are very transparent, you might not even know you are being attacked. The URL

00:06:59,189 --> 00:07:06,860
contains a hidden script, the victim opens the page, when you follow the URL, you know,

00:07:06,860 --> 00:07:12,879
the browser renders the JavaScript and then the exploit happens, whatever, whatever the

00:07:12,879 --> 00:07:18,870
attacker told the browser to do, it's typically executes that and bad things happen.

00:07:18,870 --> 00:07:23,229
So this is what we typically think of when we think of cross-site scripting, but it's

00:07:23,229 --> 00:07:28,139
a very, very deep vulnerability, because, you know, it's a lot more than just this,

00:07:28,139 --> 00:07:36,879
I've actually met someone who conducted his full PhD thesis in just this one vulnerability,

00:07:36,879 --> 00:07:42,029
that means it's extremely deep and complicated to talk about, cross-site scripting comes

00:07:42,029 --> 00:07:47,830
in many different flavours, this is what you would talk about, when talking about reflective,

00:07:47,830 --> 00:07:59,490
also stored, where you would inject some malicious script tag as a comment, every time that's

00:07:59,490 --> 00:08:08,819
accessed the pay load persists and basically, any way, it's just a lot more dangerous, anybody

00:08:08,819 --> 00:08:12,629
that accesses that page is now going to be vulnerable.

00:08:12,629 --> 00:08:20,779
Then we have DOM based cross-site scripting, also very scary, manipulating HTML in the

00:08:20,779 --> 00:08:31,119
DOM to get a cross site scripting, I think DOM-based cross-site scripting is quite interesting,

00:08:31,119 --> 00:08:37,419
it only requires a few lines of JavaScript and HTML, the code snippet I have on a slide

00:08:37,419 --> 00:08:43,440
it's maybe a couple of lines of HTML and JavaScript, very basic, but totally vulnerable to cross-site

00:08:43,440 --> 00:08:51,800
scripting, so within just a very simple HTML page that's basically static we have, we already

00:08:51,800 --> 00:08:53,519
have a vulnerability.

00:08:53,519 --> 00:09:02,750
So, my, my story kind of begins earlier on this year as we were doing a client assessment.

00:09:02,750 --> 00:09:08,430
The client that we were testing used an application that had backbone JS on the front end and

00:09:08,430 --> 00:09:13,850
it was like a Java back end. You know, they told us that, you know, they were very confident

00:09:13,850 --> 00:09:20,399
with the application, they said, "We built this with security in mind, we parameterised

00:09:20,399 --> 00:09:26,940
our query so you don't have to worry about SQL injection, we have done the mitigations

00:09:26,940 --> 00:09:31,870
you won't get any attacks",. Talking on and on about all the typical things you would

00:09:31,870 --> 00:09:40,620
want to defend against. So we said what did you too for cross-site scripting? They responded

00:09:40,620 --> 00:09:46,000
with like, "Oh, you mean that pop-up thing, we tested for that, we're good." So this sort

00:09:46,000 --> 00:09:51,720
of caught me by surprise for a couple of reasons, the first being that, you know, cross-site

00:09:51,720 --> 00:09:56,810
scripting is way more than, "Just a pop-up thing", admittedly when we are testing for

00:09:56,810 --> 00:10:05,019
cross-site slipped, we use a canonical alert pop-up to quickly see if it fires, if it does

00:10:05,019 --> 00:10:11,519
then it's vulnerable, if it, you know, it's totally a lot more than that and when they

00:10:11,519 --> 00:10:16,240
say that we, "We tested for that, we're good", I was really curious what they meant, they

00:10:16,240 --> 00:10:22,180
said, "We have a third party vendor, they ran their scans, we ran our scans, we talked

00:10:22,180 --> 00:10:31,579
to developers that knew about security, so we're good", we're like, right on! {Laughter}

00:10:31,579 --> 00:10:31,589
.

00:10:31,589 --> 00:10:35,740
We decide to run our own scans and just see what happens, so we run the application through

00:10:35,740 --> 00:10:51,300
Scan JS which admittedly now deprecated, didn't find anything, so cool, JS prime, another

00:10:51,300 --> 00:10:56,459
static JavaScript analyser, these are the only real two JavaScript analyser that's I

00:10:56,459 --> 00:11:04,970
can think of that are willing to give reliable results some of the time. So JS prime didn't

00:11:04,970 --> 00:11:13,000
really find anything either, it found non-active sources and non-active syncs, so let's test.

00:11:13,000 --> 00:11:22,860
So, obviously I can't show a client code, so I'm going to use a, a sample application

00:11:22,860 --> 00:11:31,420
called wine cellar, which is basically this is a sample application built in the same

00:11:31,420 --> 00:11:37,120
stack with the same exact vulnerabilities, the Github slide is in my link and you can

00:11:37,120 --> 00:11:40,350
download that.

00:11:40,350 --> 00:11:46,709
So we have the application here backbone, everything looks cool, let's play around with

00:11:46,709 --> 00:11:52,410
it. So let us do the first evil thing and let's try that pop-up thing and let's see

00:11:52,410 --> 00:12:02,110
if that works. So I'm just going to put a quick script alert, one script. Oh my gosh!

00:12:02,110 --> 00:12:10,180
I thought they tested for that pop-up thing, like, this is totally not ok! {Applause}.

00:12:10,180 --> 00:12:18,009
So, at this point we have demonstrated that this application is totally not pardoned against

00:12:18,009 --> 00:12:25,360
cross-site scripting, we want to go further than that, we want to show to the developers

00:12:25,360 --> 00:12:32,300
that cross-site scripting is actually a problem, so what do we do, there is a tool, the browser

00:12:32,300 --> 00:12:44,300
exploitation framework or BeEF, it's a tool that we can use to basically assess the security,

00:12:44,300 --> 00:12:50,920
exploit our cross-site scripting vulnerability, so how does it work? Well, here we go. I have

00:12:50,920 --> 00:12:58,899
a virtual instance of kali Linux, which is running the beef server virtually, I'm going

00:12:58,899 --> 00:13:12,509
to quickly see why this thing isn't running. What Beef will do it creates a beef hook which

00:13:12,509 --> 00:13:18,470
allows us to hook our browser, when we hook are browser, we essentially, if we can inject

00:13:18,470 --> 00:13:23,610
this into our victim's page we gain control to their browser and start doing really cool

00:13:23,610 --> 00:13:33,970
things. Let's go ahead and take this script. Go back here and we'll do script sources is

00:13:33,970 --> 00:13:41,819
equal to that... we'll just save this guy in, it looks like it went through. Now we

00:13:41,819 --> 00:13:49,600
can access our application on our beef panel and there we go. We see our application is

00:13:49,600 --> 00:13:56,709
online and now we are remotely attacking our victim and we have a lot of information about

00:13:56,709 --> 00:14:02,579
their browser as it is, we see what kind of browser, a browser... a hooked page et cetera....

00:14:02,579 --> 00:14:12,220
Probably the most powerful aspect of this is that we have a bunch of exploits we can

00:14:12,220 --> 00:14:22,170
kick off, we have when you talk about JavaScript injection your exploits is limited to your

00:14:22,170 --> 00:14:28,529
imagination, you can kick off whatever exploits you want, that the JavaScript language can

00:14:28,529 --> 00:14:36,459
handle and so as people at a JavaScript conference it doesn't go with much surprise we can execute

00:14:36,459 --> 00:14:41,019
a lot of really crazy things. If you take a look at some of these exploits we can get

00:14:41,019 --> 00:14:47,540
cookie values for our victims and for example, if we're running an application where we're

00:14:47,540 --> 00:14:52,970
attacking an admin we can get access to their session and attack them. We're at JSConf Iâ€™m

00:14:52,970 --> 00:14:56,800
going to try something a little bit more bold and daring I am going to try to break into

00:14:56,800 --> 00:14:59,449
my webcam.

00:14:59,449 --> 00:15:04,769
So the first thing to do this in order to do this is to run a quick permission check.

00:15:04,769 --> 00:15:10,889
So I just kick that off, now I am going to write a quick social engineering message like,

00:15:10,889 --> 00:15:23,290
hey, allow this for lots of money. This is not a scam. {laughter} do it. Hopefully if

00:15:23,290 --> 00:15:31,459
the demo gods are happy with me today... there we go. So we have now just asked for access

00:15:31,459 --> 00:15:36,339
to my webcam. So I know everybody in this room is totally not going to click allow because

00:15:36,339 --> 00:15:40,430
of course you wouldn't but if I sent it out to thousands of people there's a chance that

00:15:40,430 --> 00:15:46,269
somebody would properly press yes so on behalf of that guy, let's take a cross-site scripting

00:15:46,269 --> 00:15:46,269
selfie. {laughter}

00:15:56,610 --> 00:16:01,089
pictures I hope these come out I don't know how my hair looks right now {laughter} I am

00:16:01,089 --> 00:16:09,499
just going to run a quick, well let's see how BeEF handled that. It's going back, we

00:16:09,499 --> 00:16:16,279
get the base encoded hex dot of the images that we have done, I am going to dump this

00:16:16,279 --> 00:16:17,879
into a text file ever so

00:16:17,879 --> 00:16:26,310
elegantly and just run a quick processing script. All of you front-end developers out

00:16:26,310 --> 00:16:40,699
there please do not judge my CSS. Hopefully if this works,... there we go. {laughter}

00:16:40,699 --> 00:16:43,550
{applause}

00:16:43,550 --> 00:16:52,879
So, we have just taken cross-site scripting and exploited our webcam. Albeit we have asked

00:16:52,879 --> 00:16:59,790
for permission, but that's a social engineering component that was involved. So, what is special

00:16:59,790 --> 00:17:03,949
about this? I mean scanners in these kind of security vulnerabilities have been round

00:17:03,949 --> 00:17:09,579
for quite sometime, but what is concerning is the fact there are so many frameworks out

00:17:09,579 --> 00:17:14,990
there that are just coming out and each of them has their own different type of vunerability

00:17:14,990 --> 00:17:27,209
that's, or different types of security configuration that create a different type of attack surface.

00:17:27,209 --> 00:17:31,880
It doesn't go to show, it goes to show that there's a lot that can go wrong by using your

00:17:31,880 --> 00:17:37,240
own framework. There's so many different frameworks out there there's a lot you have to know about.

00:17:37,240 --> 00:17:41,740
So let's take a look at Angular real quick, those of you who have used it you might have

00:17:41,740 --> 00:17:47,840
used this NG bind attribute. This attribute is what people use to typically bind data

00:17:47,840 --> 00:17:56,020
to a model and before Angular 1.2 there was this directive called NG bind HTML unsafe

00:17:56,020 --> 00:18:04,799
which as the name of the directive says it unsafely binds HTML to model. They decided

00:18:04,799 --> 00:18:10,620
to get rid of it now they have a problem, you have a lot of legacy code that's using

00:18:10,620 --> 00:18:15,860
unsafe directives that is now broken because they have got rid of the model. If you go

00:18:15,860 --> 00:18:23,200
to stack overflow in Google for this directive, literally the third result is somebody talking

00:18:23,200 --> 00:18:30,809
about this problem the response you get is just use this sanitisation service just trust

00:18:30,809 --> 00:18:36,860
everything has HTML, that's what you do. So here's what happens when you trust everything

00:18:36,860 --> 00:18:48,470
as HTML. So I have an Angular app, you see a two-way data binding every angular tutorial

00:18:48,470 --> 00:18:55,340
has something about that if you put bold tags it totally works. Script tags won't work because

00:18:55,340 --> 00:19:01,200
it won't allow for dynamic script injection but if I try an image tag I set the source

00:19:01,200 --> 00:19:08,320
to blah on error I say execute this script, before {laughter} before I can even finish

00:19:08,320 --> 00:19:17,610
my sentence {applause} because of two-way data binding before I can finish my sentence

00:19:17,610 --> 00:19:25,360
it executes. Every time after that if I key stroke it executes again. Which is kind of

00:19:25,360 --> 00:19:31,850
a problem. This stems from a fundamental lack of understanding in the way that the framework

00:19:31,850 --> 00:19:34,029
works.

00:19:34,029 --> 00:19:39,600
So the strict contextual escaping service is used to properly white list things when

00:19:39,600 --> 00:19:49,029
you trust everything as HTML here's what you get, and moving on to something like Meteor,

00:19:49,029 --> 00:19:57,600
is full stack JavaScript is not just a client side vulnerability, a client side framework.

00:19:57,600 --> 00:20:08,450
Sorry {laughter} Meteor was built with security in mind by default it HTML escapes everything.

00:20:08,450 --> 00:20:13,929
This a great deal, nothing can totally go wrong here, this awesome. Until you actually

00:20:13,929 --> 00:20:20,179
see somebody actually mess it up and they dynamically allow for anchor together as be

00:20:20,179 --> 00:20:27,899
defined and so what this results in is basically if you were to name your list some kind of

00:20:27,899 --> 00:20:34,659
JavaScript command it would actually fire. Different vectors and configuration you see

00:20:34,659 --> 00:20:41,320
inside it itself. Nothing that a scanner will necessarily pick up on but something that

00:20:41,320 --> 00:20:46,909
is definitely going to go wrong in your application if you don't look at it properly.

00:20:46,909 --> 00:20:50,440
So I would be doing a huge disservice to this community by just saying that we're all kind

00:20:50,440 --> 00:20:52,890
of screwed and we should give up, what can we do

00:20:52,890 --> 00:21:03,809
to prevent against these kind of attacks. Contextual escaping skill a thing, and in

00:21:03,809 --> 00:21:09,809
fact the same vulnerabilities can be mitigated by the same techniques in different ways.

00:21:09,809 --> 00:21:14,960
So if you look at the previous backbone example all I have done in this case is basically

00:21:14,960 --> 00:21:21,460
escape the values as they are getting set, and so if this code is applied, then rather

00:21:21,460 --> 00:21:25,470
than actually rendering the script tag as JavaScript the browser will look at these

00:21:25,470 --> 00:21:33,200
tags and basically just say that oh it's like HTML escaped it will render the actual HTML

00:21:33,200 --> 00:21:40,120
escaped version of that tag which is much safer. Contextual output escaping means wherever

00:21:40,120 --> 00:21:46,090
the I put is going to you escape it to that context so if it's going to JavaScript, a

00:21:46,090 --> 00:21:51,770
JavaScript escape if it's going to CSS you CSS the escape et cetera. Real quickly the

00:21:51,770 --> 00:21:58,049
next topic is content security policy. It's like a secondary defence, it's a way for you

00:21:58,049 --> 00:22:03,640
to specify to your browser or to your application which browser, which scripts you want your

00:22:03,640 --> 00:22:10,149
browser to load. So obviously you don't want like untrusted evil scripts to load you just

00:22:10,149 --> 00:22:16,419
define this policy which will block these scripts. Content security policy it's a talk

00:22:16,419 --> 00:22:22,210
on it's own so we're just going to talk about it at a very high level but you can still

00:22:22,210 --> 00:22:30,690
bypass this by setting a very lax policy but it's a good way to kind of prevent a lot of

00:22:30,690 --> 00:22:32,110
unnecessary scripts from coming in.

00:22:32,110 --> 00:22:37,850
Finally, we have server side input validation more like a tertiary measure if you are expecting

00:22:37,850 --> 00:22:42,770
a phone number your request comes in with a script tag, that's not good you don't want

00:22:42,770 --> 00:22:48,559
that so you should throw that away. That should happen at the server side so it can been bypassed

00:22:48,559 --> 00:22:56,059
by intercepting proxy. So coming full circle here we have seen that scanners don't work

00:22:56,059 --> 00:23:02,980
especially when we're talking about new frameworks and new techniques. New frameworks create

00:23:02,980 --> 00:23:08,210
new attack vectors, but we have the fact that the same overarching defence of strategies

00:23:08,210 --> 00:23:15,669
can still be used to mitigate the old, the new issues that arise.

00:23:15,669 --> 00:23:22,010
So with that I would just like to introduce, we have developed a full JavaScript vulnerable

00:23:22,010 --> 00:23:28,809
application here thank you to Ken Toller who is a colleague of mine who worked on this

00:23:28,809 --> 00:23:34,529
project, you guys can check out the Github right here, it's something that you can use

00:23:34,529 --> 00:23:38,820
to practice hacking on. It's vulnerable to a lot of things not just cross-site scripting

00:23:38,820 --> 00:23:44,320
so you can Tweet about it, you can submit issues for things you would like to see but

00:23:44,320 --> 00:23:49,760
it's a really cool project. I like to thank my mentor who basically have taught me everything

00:23:49,760 --> 00:23:57,279
I know about security, Jack, Tim and Michael, and as far as further training is concerned

00:23:57,279 --> 00:24:01,240
here are a bunch of links, you guys can use to learn more about cross-site scripting,

00:24:01,240 --> 00:24:07,289
a fun fact is that the Google cross-site scripting game which we have here was actually developed

00:24:07,289 --> 00:24:13,480
by our next speaker, Artur Jank. He will be giving an incredible talk about some more

00:24:13,480 --> 00:24:18,200
cross-site scripting you find in Angular, I hope you guys will stick round for that.

00:24:18,200 --> 00:24:24,789
Thank you very much. If you have any questions, feel free to hit me up on Twitter, or contact

00:24:24,789 --> 00:24:26,630

YouTube URL: https://www.youtube.com/watch?v=GPce5lNUhtc


