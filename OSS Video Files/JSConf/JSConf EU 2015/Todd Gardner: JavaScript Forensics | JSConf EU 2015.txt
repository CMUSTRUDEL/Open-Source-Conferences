Title: Todd Gardner: JavaScript Forensics | JSConf EU 2015
Publication date: 2015-10-22
Playlist: JSConf EU 2015
Description: 
	Something terrible happened here. Traces of errors litter the floor; memory leaking from cracks in the ceiling. Someone lost their object context in the corner. Everything reeks of jank. In this session, a JavaScript error tracking expert breaks down a series of common and complex crimes against web applications. You’ll leave the session armed with techniques and tools to detect, diagnose, and fix your JavaScript web applications. Bring your bugs and let’s fix up our web.

Intro music by @halfbyte
Captions: 
	00:00:26,140 --> 00:00:32,050
Hi everybody. This is JavaScript forensics. It's about your awesome

00:00:32,050 --> 00:00:38,480
web-applications and how they completely fail for your end users. It's about diagnosing

00:00:38,480 --> 00:00:45,070
and debugging production web-applications. In a lot of ways, we're still running in the

00:00:45,070 --> 00:00:51,370
wild, wild web. There are dozens of tools we use to build our applications and we combine

00:00:51,370 --> 00:00:57,710
that with all the different devices and browsers and plug-ins that our end users use when visiting

00:00:57,710 --> 00:01:03,829
it, over a network we don't control and is often unpredictable, that leaves a lot of

00:01:03,829 --> 00:01:10,990
room for JavaScript out laws, that's what we are going to talk about today. Five of

00:01:10,990 --> 00:01:18,179
the most common JavaScript at laws that rage havoc on applications, we are going to look

00:01:18,179 --> 00:01:25,030
at what information we can capture about them, how do we diagnose them and how do we fix

00:01:25,030 --> 00:01:32,220
them. To do that we need to lure in the out laws, here is what we are going to do that,

00:01:32,220 --> 00:01:41,159
it's a little app called soliloquy, any venture capitalists, get your cheques ready.

00:01:41,159 --> 00:01:48,759
It's what I call Anand Vemuri social network, it's kind of like Twitter, it let's you type

00:01:48,759 --> 00:01:56,390
in status up dates like Twitter , an awesome timeline of events like Twitter, awesome in

00:01:56,390 --> 00:02:09,060
line adds like Twitter, some fantastic sponsors like cats, Hasselhoff, bears - {Laughter},

00:02:09,060 --> 00:02:17,660
but it leaves off the most irritating part about Twitter, other people! {Laughter} .

00:02:17,660 --> 00:02:24,060
Because with soliloquy, it's only about you, only you can write up dates only you can see

00:02:24,060 --> 00:02:31,060
your up dates, obviously it's going to be huge, like next year, millions and millions

00:02:31,060 --> 00:02:36,690
of dollars. So, I need to protect it, as I'm building it out this thing is going to be

00:02:36,690 --> 00:02:42,430
big, I need to make sure my users have a great experience, I'm going to be watching how they

00:02:42,430 --> 00:02:50,870
are reacting with t, to do that, a little application helped work on, track JS, a JavaScript

00:02:50,870 --> 00:02:55,849
error monitoring tool, with that let's dig into the first errors.

00:02:55,849 --> 00:03:05,400
Here are the first ones, scripty Jo, it comes in as script error, hiding the application

00:03:05,400 --> 00:03:14,140
hard, it hits really hard in the first week I launched soliloquy, I had one 400 errors

00:03:14,140 --> 00:03:24,909
coming in, it's not limited one thing, hitting everything. So let's look at it and debug

00:03:24,909 --> 00:03:27,950
this ands' if we can understand what exactly is going on.

00:03:27,950 --> 00:03:37,519
If we pop open the debugger console and start looking at this, when we load it we see two

00:03:37,519 --> 00:03:43,849
errors in our console right away, we see we were able to record a message, script error,

00:03:43,849 --> 00:03:48,530
but Chrome nicely can tell me all sorts of other information about it, the Chrome debugger

00:03:48,530 --> 00:03:54,530
is independent of the constraints of a JavaScript execution environment, it can tell me real

00:03:54,530 --> 00:04:00,640
information, programmatically, what I was able to capture from the browsing session

00:04:00,640 --> 00:04:07,849
and pull back to my server to see the errors, is a very unhelpful message, "Script error",

00:04:07,849 --> 00:04:15,150
with no file, no line, no column and no stack trace. That's hard, we don't even know where

00:04:15,150 --> 00:04:21,039
to start with this, it's like something blew up swear, we don't know how. How did this

00:04:21,039 --> 00:04:27,789
come to exist? Chrome nicely told us that this, the real error involved here this reference

00:04:27,789 --> 00:04:33,530
error from side bar add provider. However, I want to be able to know what the real errors

00:04:33,530 --> 00:04:38,720
are when we are interacting with this, let's look at the side bar add provider.

00:04:38,720 --> 00:04:43,330
What's interesting about this, it's not necessarily what is in this script, but where it comes

00:04:43,330 --> 00:04:52,099
from. The side bar add provider is being loaded from adds.local, if you see in the very small

00:04:52,099 --> 00:04:59,789
upper corner, it's being loaded from local host, it's being served from a different domain

00:04:59,789 --> 00:05:04,710
and now subject to the same original policy protections on the browser.

00:05:04,710 --> 00:05:11,539
In the last presentation we learned about calls for posting requests to different end

00:05:11,539 --> 00:05:16,890
points, we can apply some of the same things here, so because we are loading the side bar

00:05:16,890 --> 00:05:21,860
add provider from a different domain the browser is saying, "Hey, I don't trust that", so when

00:05:21,860 --> 00:05:34,589
it blows up it obfuscates the error. It trusts it enough to get the error message, to do

00:05:34,589 --> 00:05:41,380
that we need to serve the add bar side provider with the errors. If we look at how it's getting

00:05:41,380 --> 00:05:50,159
served... I've already added these from my advertising provider has already added to

00:05:50,159 --> 00:05:55,649
these to the network and the script server says it can be loaded from anywhere with the

00:05:55,649 --> 00:06:07,860
wild card, I now need to teach Chrome, load it and give the same policy. Let's a look

00:06:07,860 --> 00:06:14,789
at the code and see how it works, here's the main document, I trust everybody had their

00:06:14,789 --> 00:06:20,640
NDAs in order.

00:06:20,640 --> 00:06:25,250
Here at the bottom is where I'm loading all of my JavaScript, here's the side bar add

00:06:25,250 --> 00:06:33,390
provider, here's the very last one, adding from ASDA local, none of my scripts are coming

00:06:33,390 --> 00:06:39,349
from my origin, none of them are coming from local host, I'm letting my scripts from a

00:06:39,349 --> 00:06:48,330
CDN to improve performance and so this is going to be a problem persuasive across my

00:06:48,330 --> 00:06:53,880
application. So I can teach the browser that I want to go ahead and trust all of these

00:06:53,880 --> 00:06:58,690
scripts, as long as those scripts are served with the cross origin headers we can get rid

00:06:58,690 --> 00:07:05,360
of this error, so we can decorate the script elements with the attribute cross origin and

00:07:05,360 --> 00:07:14,839
it will tell newer browsers to go ahead and look for the CORS errors.

00:07:14,839 --> 00:07:26,020
You will see that we actually haven't fixed the error yet, but we have allowed us to do

00:07:26,020 --> 00:07:31,849
is capture real information about this JavaScript error. Now, what ever we are able to pull

00:07:31,849 --> 00:07:36,909
out from our real browser sessions has real information that we can use to aggregate and

00:07:36,909 --> 00:07:44,180
analyse our data, we can see that this was a uncaught error, from my side bar add provider

00:07:44,180 --> 00:07:50,700
with a full stack trace, now we dent have to deal with script error any more.

00:07:50,700 --> 00:07:58,029
So this was scripty Jo, it's browser obfuscation you well have to deal with this right away

00:07:58,029 --> 00:08:08,370
if you track client side errors, if you load some of the CTN, it conceals all the real

00:08:08,370 --> 00:08:13,539
problems your application has, now we have this one out of the way, let's move on to

00:08:13,539 --> 00:08:21,969
another one. Jane Adsy, the actual underlying area, the get random adds is not defined.

00:08:21,969 --> 00:08:28,190
What's odd about Jane Adsy, I didn't change soliloquy, it has been stable, I didn't want

00:08:28,190 --> 00:08:35,120
to change it before the conference, all of a Sutton yesterday it blew up, no change from

00:08:35,120 --> 00:08:42,250
me at all, I had tonnes and tonnes of errors, I don't know how that could be. So let's take

00:08:42,250 --> 00:08:51,820
a look at it again and see if we can figure out what happened: we see the uncaught reference,

00:08:51,820 --> 00:08:57,130
get random add is not defined, we can navigate directly to the file and take a look at what's

00:08:57,130 --> 00:08:58,230
going on.

00:08:58,230 --> 00:09:05,210
So this, again, is from my third party, I do not own this script I just bring it in

00:09:05,210 --> 00:09:10,260
because I pay the side bar add provider, or they pay me to place

00:09:10,260 --> 00:09:16,300
adds on their site, or my site. So they are serving this JavaScript that's calling function,

00:09:16,300 --> 00:09:23,100
get random add and it's not there. If we look around in the file we see that there is another

00:09:23,100 --> 00:09:29,840
function a bit further down, called get random adds, maybe somebody dropped an s, when they

00:09:29,840 --> 00:09:32,360
were trying to save a file.

00:09:32,360 --> 00:09:38,000
Could be we just had a fat finger situation with the advertising provider, when we bring

00:09:38,000 --> 00:09:44,200
up a local copy we see that there is these two calls to get random add, although it doesn't

00:09:44,200 --> 00:09:50,990
exist. If we pull a local copy of this file and save it without the stray character in

00:09:50,990 --> 00:10:00,890
it... check-out all the awesome new adds that I now have on it, for more bears, bacon and

00:10:00,890 --> 00:10:05,190
Hasselhoff.

00:10:05,190 --> 00:10:11,440
So Jane third party adsy, can cause errors in your application any time you bring in

00:10:11,440 --> 00:10:16,060
a third party. This is something we don't often recognise, we're usually just trying

00:10:16,060 --> 00:10:21,880
to build the software we are trying to build for are customers, we bring in social networks,

00:10:21,880 --> 00:10:27,700
advertising, payment processors, all kinds of really valuable third party tools but we

00:10:27,700 --> 00:10:33,240
are giving them the ability to run JavaScript on our application and sometimes to change

00:10:33,240 --> 00:10:38,690
the JavaScript without telling us, it can cause all kinds of uncontrolled changes in

00:10:38,690 --> 00:10:40,700
your environment.

00:10:40,700 --> 00:10:49,930
So, the next error is Susan scopes, it's cannot read property destroy of undefined, a major

00:10:49,930 --> 00:10:56,920
global error not happening to everybody, we see a strong correlation, every time a user

00:10:56,920 --> 00:11:02,210
is trying to delete something out of their timeline we see we get this error in the console,

00:11:02,210 --> 00:11:07,340
or we get this error reported shortly thereafter. We can take a look at it again and receive

00:11:07,340 --> 00:11:10,730
we can recreate the situation.

00:11:10,730 --> 00:11:16,340
So the error report that we get is that the user tries to delete one of the statements

00:11:16,340 --> 00:11:19,020
and they can't, it loads up for them.

00:11:19,020 --> 00:11:32,330
So, let's open our console back up, we will try to delete the statement, we saw console

00:11:32,330 --> 00:11:36,710
messages printed out saying trying to delete the statement. Then we recorded, "Cannot read

00:11:36,710 --> 00:11:45,130
property, destroy of undefined", just like we saw in the tool. Chrome nicely reported

00:11:45,130 --> 00:11:51,260
as well, it's telling us this is coming from statement ujs line 30, let's gig into a little

00:11:51,260 --> 00:11:58,710
bit more, pop over the stack trace there, it's awesome, there was an anonymous function

00:11:58,710 --> 00:12:06,030
on that line, something blew up there, we don't really have any context. So Chrome,

00:12:06,030 --> 00:12:11,010
about six or eight months ago, shipped a really cool thing that's probably my favourite thing

00:12:11,010 --> 00:12:17,529
they have ever done, it's this little check box right here in the 'Sources' tab, it's

00:12:17,529 --> 00:12:22,420
hidden away and you wouldn't notice it if you didn't look for it, if you turn it on,

00:12:22,420 --> 00:12:28,800
it will let us get over the big stack trace limitation in JavaScript, because JavaScript

00:12:28,800 --> 00:12:36,130
is async and is usually responding to an event, the step trace can only go back to the place

00:12:36,130 --> 00:12:42,040
where that event started, I don't know what attached that click handler, or started that,

00:12:42,040 --> 00:12:53,120
or created an AJAX fault, I know what it up, Chrome has access - so if we turn this on

00:12:53,120 --> 00:13:02,300
and reload, let's go ahead and delete another statement, blew up again, just like we expected.

00:13:02,300 --> 00:13:08,040
Now if we check-out the stack trace, there is all kinds or more awesomeness here, anonymous

00:13:08,040 --> 00:13:15,210
function on statement view line 30, but that was passed to a set Time Out, it was called

00:13:15,210 --> 00:13:20,500
by a function called 'On delete', called in response to jquery events that seems to make

00:13:20,500 --> 00:13:21,320
sense with the actions

00:13:21,320 --> 00:13:26,980
I took, I clicked the button, vent thrown, caught it on delete, then passing into set

00:13:26,980 --> 00:13:37,200
Time Out, let's look at statement of UJS and see what's happening.

00:13:37,200 --> 00:13:45,470
Here's line 30, of are on delete, right away here's the code smell, it's we're passing

00:13:45,470 --> 00:13:51,660
functional argument in and using the word, "This",. This is obviously the most common

00:13:51,660 --> 00:13:58,850
error that we all seem to make over hand over and over again, parsing a value when it's

00:13:58,850 --> 00:14:06,710
going to change context over it's lifetime. There is a couple of ways to fix this, the

00:14:06,710 --> 00:14:12,920
comment, the most obvious ones are either var that = this, or var self = this. Which,

00:14:12,920 --> 00:14:18,190
you know, depends on which JavaScript book you read first is your preference! {Laughter}

00:14:18,190 --> 00:14:22,839
It might be a little bit more obvious because we're only doing this one thing, it's to say

00:14:22,839 --> 00:14:31,160
var model equals this.model and simple reference it as model. Or if we want to be super cool

00:14:31,160 --> 00:14:41,410
and hip, we could use the new ways of doing things and use a bind, and chain.bind this

00:14:41,410 --> 00:14:46,270
to the end of that function. Which will glue the value of this from the outer context into

00:14:46,270 --> 00:14:51,720
the value of this on the inner context. That’s pretty cool, except it won't work quite everywhere.

00:14:51,720 --> 00:14:57,680
I want Soliloquy to be super compatible. So instead of doing that maybe I will use a utility.

00:14:57,680 --> 00:15:04,470
I will bring in underscore, low dash or whatever your preference is there and use it's bind

00:15:04,470 --> 00:15:09,560
method to tie the 2 together. This will be super compatible it will let me go back all

00:15:09,560 --> 00:15:13,250
the way to IE 8 or 7 support for it.

00:15:13,250 --> 00:15:19,560
Now we have actually bound up this thing together we can try to delete stuff again. Now we can

00:15:19,560 --> 00:15:28,400
delete to our hearts content. Awesome.

00:15:28,400 --> 00:15:37,160
So, the Susan, this and that Scopes happens any time we get a functional argument and

00:15:37,160 --> 00:15:42,470
usually manifest itself as something is not defined. This will happen any time you are

00:15:42,470 --> 00:15:46,920
using you’re parsing a functional argument in, either using call backs or promises or

00:15:46,920 --> 00:15:52,240
anything like that. Now typically you could find these sorts of errors before they made

00:15:52,240 --> 00:15:56,130
it out into your production environment, there is a finite set of things that can go wrong

00:15:56,130 --> 00:16:01,580
here. However JavaScript apps once they reach a certain size get difficult to test every

00:16:01,580 --> 00:16:07,050
possible condition. I still see this in production a whole lot.

00:16:07,050 --> 00:16:15,529
All right. Logan No Load’em. Inline ads it's not a function. So we saw this error

00:16:15,529 --> 00:16:22,380
start coming up. It doesn't happen to everybody, but it happens to a lot of people. We saw

00:16:22,380 --> 00:16:32,589
Soliloquy gets 2500 hits a week but we see about 130 people encounter this error, this

00:16:32,589 --> 00:16:38,180
a.inline ads is not a function. So it's not everybody, it always seems to happen like

00:16:38,180 --> 00:16:44,720
right away when it does happen so let's see if we can understand why that would exist.

00:16:44,720 --> 00:16:53,170
So let's pop back into Soliloquy. So when I just load my app, it obviously is not throwing

00:16:53,170 --> 00:16:59,529
that error. Doesn't happen for me here on this network. So let's look in our code for

00:16:59,529 --> 00:17:07,220
where is inline ads even being defined. If we search Soliloquy for inline ads. There's

00:17:07,220 --> 00:17:13,439
2 places, the first is in the inline ad provider. The inline ad provider is another advertising

00:17:13,439 --> 00:17:20,309
network I use to make some money for Soliloquy it defines this API, the window.inline ads

00:17:20,309 --> 00:17:26,630
will be a function that I will pass stuff into. There in my main function, my main initialisation

00:17:26,630 --> 00:17:32,590
I try to set up my ads Soliloquy I use the API they define for me this window.inline

00:17:32,590 --> 00:17:37,870
ads I pass in this information about what I want.

00:17:37,870 --> 00:17:44,570
So it should never be undefined, window.inline ads it's called here inside of a ready function,

00:17:44,570 --> 00:17:50,460
we're waiting until the DOM is done, and the inline ad provider is loaded here just directly

00:17:50,460 --> 00:17:58,770
from a script, so I cannot imagine why this wouldn't work. We load it doesn't happen.

00:17:58,770 --> 00:18:05,160
So, let's see what would it manifest itself if it didn't load. Let just comment this out.

00:18:05,160 --> 00:18:12,100
Let's say hey maybe somebody is striping that out. Here's definitely the error we're seeing

00:18:12,100 --> 00:18:18,230
reported. A.inline ads is into the function, but look at the experience that my end user

00:18:18,230 --> 00:18:23,710
got when they encountered this problem. It's not just like the inline ads didn't load,

00:18:23,710 --> 00:18:29,640
this nothing loaded. The status list didn't load the inline ads, the sidebar ads didn't

00:18:29,640 --> 00:18:40,460
load if they try and type a message, it just fails. The app is completely broken for them

00:18:40,460 --> 00:18:42,800
when this issue happens to happen.

00:18:42,800 --> 00:18:49,309
So looking into this, this was one of the things that surprised me most understanding

00:18:49,309 --> 00:19:00,890
production JavaScript debugging is that sometimes due to craziness of online networks, one script

00:19:00,890 --> 00:19:06,280
will fail to load in your application. Just one. Maybe it's DNS look up failed because

00:19:06,280 --> 00:19:13,429
you are changing cell networks, or maybe they had a blip in their CDN, and so we have seen

00:19:13,429 --> 00:19:17,790
numerous cases where a single script in your application fails to load and so depending

00:19:17,790 --> 00:19:23,110
on what script that is, it can vastly, you can end up in a vastly different situation

00:19:23,110 --> 00:19:31,920
in the case of Soliloquy catastrophic this app failed to load entirely, maybe you are

00:19:31,920 --> 00:19:37,510
bringing in a payment processor, PayPal or Braintree to do your work. What if their script

00:19:37,510 --> 00:19:42,520
fails to load because of a network blip? What state does that leave your credit card form

00:19:42,520 --> 00:19:48,670
in when their script just is not on the page? So here in my code in Soliloquy, I wasn't

00:19:48,670 --> 00:19:53,130
being very safe and recognising that this situation could happen. Because I am just

00:19:53,130 --> 00:20:00,679
calling window.online ads directly as my main execution. So when this doesn't exist, it

00:20:00,679 --> 00:20:06,429
stops, set up ads doesn't work, sidebar ad fails to work, when we return from set up

00:20:06,429 --> 00:20:12,500
ads I never fetch my main statement list, I never do the main things as part of Soliloquy.

00:20:12,500 --> 00:20:17,200
So what we need to do is we need to be more cautious about the APIs that we use before

00:20:17,200 --> 00:20:21,780
we use them. Just because it's the script is supposed to be there doesn't mean it will

00:20:21,780 --> 00:20:28,330
always be there. So we can do this real simple, just a check. Let's see if window.inline ads

00:20:28,330 --> 00:20:34,809
is a thing before we use, if it's a thing we'll go ahead and call it.

00:20:34,809 --> 00:20:44,220
If it's not a thing, maybe we should log something. We should a complaint to our inline ad provider

00:20:44,220 --> 00:20:52,970
see if we can get a discount next time.

00:20:52,970 --> 00:20:58,370
So now the real simple check in place, the experience from my end user is much better,

00:20:58,370 --> 00:21:02,920
it's still not great for me because I am not getting impressions on this ad, my inline

00:21:02,920 --> 00:21:07,330
ads are not there but the end user doesn't really notice. Would you really notice if

00:21:07,330 --> 00:21:15,110
Twitter loaded and there weren't any inline ads anymore?

00:21:15,110 --> 00:21:21,679
So Logan, missing script. This happens all kinds of reason, flaky networks, poor network

00:21:21,679 --> 00:21:26,929
infrastructure, maybe a new deployment is happening right when a request is being made.

00:21:26,929 --> 00:21:35,000
There are infinite edge cases here that can cause a script to fell to load on the internet.

00:21:35,000 --> 00:21:40,080
As you are bringing in scripts, third parties, always verify the script exist successfully

00:21:40,080 --> 00:21:44,480
before you use it the wise an error will cause a catastrophic change that will stop all future

00:21:44,480 --> 00:21:45,520
execution.

00:21:45,520 --> 00:21:55,429
This is the error I will talk about today this my browser crashing. My browser crashing

00:21:55,429 --> 00:22:02,990
happens we're seeing reports of slowing performance of Soliloquy. narcissistically writing all

00:22:02,990 --> 00:22:10,900
their thoughts into soliloquy, after hours of typing they tell us their browser has crashed.

00:22:10,900 --> 00:22:16,960
There's no good way to record the browser crashed in JavaScript, because the browser

00:22:16,960 --> 00:22:23,650
crashed. So we can't really get an AJAX call out the door before it crashes. So we have

00:22:23,650 --> 00:22:28,309
to rely on the old school way of figuring out your reports, people complaining on the

00:22:28,309 --> 00:22:34,190
internet. The worse is they are complaining probably on Twitter which is the thing we're

00:22:34,190 --> 00:22:36,260
trying to get rid off.

00:22:36,260 --> 00:22:45,770
Let take a look at Soliloquy, see if we can identify why this happens, slowing performance

00:22:45,770 --> 00:22:53,640
crashing the browser. Sounds like maybe we have a memory leak, let's look to see if we

00:22:53,640 --> 00:22:59,490
have a memory leak. Oh let's fix our inline ads provider, probably want that loading again.

00:22:59,490 --> 00:23:08,640
So we're going to check out a memory leak. There's a couple of different ways we can

00:23:08,640 --> 00:23:16,049
too this my personal favourite is to check out the timeline. Now the timeline is one

00:23:16,049 --> 00:23:22,540
of the newer tools in the Chrome debugger, and it let's us capture all kinds of interesting

00:23:22,540 --> 00:23:27,960
state changes as our application is running. So what I am going to do here I am going to

00:23:27,960 --> 00:23:32,549
type a few status into Soliloquy, then I will delete them back out which will hopefully

00:23:32,549 --> 00:23:38,900
return me to same state my application was in before. Hopefully, the same level of memory

00:23:38,900 --> 00:23:42,299
utilisation and if it doesn't, that could indicate a leak.

00:23:42,299 --> 00:23:49,660
So I am going to go ahead and start recording here. I am going to type in some messages.

00:23:49,660 --> 00:23:55,960
Soliloquy also has this awesome ‘I am feeling random’ button which will generate a random

00:23:55,960 --> 00:24:03,260
series of characters an stick it in. It's great for the creativity. So I created 3 I

00:24:03,260 --> 00:24:08,620
will delete these 3 back out.

00:24:08,620 --> 00:24:21,720
Then let's take a look and what we captured. All right so there's a lot going on here.

00:24:21,720 --> 00:24:28,309
There's a lot going on here. It's hard to know where to start. So, I like to start down

00:24:28,309 --> 00:24:35,470
here in this main thread where we see in blue the total amount of JavaScript memory that's

00:24:35,470 --> 00:24:42,080
being used and in orange, golden rod whatever , the total number of JavaScript listeners.

00:24:42,080 --> 00:24:47,990
And we see ingredient number of nodes. If we just look at those things, we see a pattern

00:24:47,990 --> 00:24:53,860
happening here. It's here at the beginning we see it a tick up in all 3, and tick us

00:24:53,860 --> 00:24:59,380
up again, and again, and again, it looks like we clean a little bit up, then it keeps going

00:24:59,380 --> 00:25:04,580
right back up. At no point did we back out, at no point did we really clean up back to

00:25:04,580 --> 00:25:06,570
our original state.

00:25:06,570 --> 00:25:11,100
So this is not really enough to go off of, so we need to understand a little bit more.

00:25:11,100 --> 00:25:15,070
So what we're going to do is before I really figured out how to become productive with

00:25:15,070 --> 00:25:19,690
my life, I spent a lot of time playing video games particularly old Counterstrike. We're

00:25:19,690 --> 00:25:28,000
going to use classic Counterstrike controls to fly into this chart and understand more

00:25:28,000 --> 00:25:33,980
what happens so yet just WSAD, standard first person shooter controls, we'll start flying

00:25:33,980 --> 00:25:40,690
into these different reports we can start seeing some information about them.

00:25:40,690 --> 00:25:50,130
So, as we get closer, we see that this step is not one thing, but several little things.

00:25:50,130 --> 00:25:54,330
We can strafe round here we can just left, right make sure we dodging and weaving, make

00:25:54,330 --> 00:25:57,110
sure the memory leaking bullets are not

00:25:57,110 --> 00:26:10,530
hitting us. That's not the one I want either. We will have to strafe again. Here is an interesting

00:26:10,530 --> 00:26:13,200
one, there we go that's the one I want.

00:26:13,200 --> 00:26:18,010
So now we're going to fly in here even closer, we're going to see more sufficient about here

00:26:18,010 --> 00:26:23,679
and as we dig in we can start seeing really good detail about the timeline and what's

00:26:23,679 --> 00:26:28,640
actually happening, causing these changes in memory leaks in documents. We see that

00:26:28,640 --> 00:26:37,750
this call is stemming from a timer in sidebarAdProvider that's causing a memory to tick up, and again,

00:26:37,750 --> 00:26:42,540
a timer in a sidebarAdProvider causing a memory to tick up. This is giving us a good invitation

00:26:42,540 --> 00:26:45,940
of where our memory leak might be.

00:26:45,940 --> 00:26:52,260
So if we take a look at the sidebarAdProvider, we can see how it works. It's calling set

00:26:52,260 --> 00:26:56,860
interval, on an interval we're clearing out our advertising container we're just zeroing

00:26:56,860 --> 00:27:04,880
out the contents of it then it's get a random ad from the advertising server, places it

00:27:04,880 --> 00:27:09,490
with this function here. Placing it just amounts to it goes out gets the HTML text it needs

00:27:09,490 --> 00:27:15,580
forward when it's got it, it sticks it in the container and binds a click event, but

00:27:15,580 --> 00:27:21,660
here's our root issue. Because we're just dynamically creating an element and attaching

00:27:21,660 --> 00:27:32,040
an event to it, at no point are we ever removing that click handler. So we're getting hundreds

00:27:32,040 --> 00:27:37,669
and hundreds of thousands and thousands of these elements hanging out in the DOM waiting

00:27:37,669 --> 00:27:42,260
for you to click on them, even though they are not visible anymore. Because at no point

00:27:42,260 --> 00:27:49,130
was the execution or was this event ever detached. So we can see this happening if we just look

00:27:49,130 --> 00:27:55,400
at Soliloquy, we see this sidebar going off. Every few seconds it refreshes and puts new

00:27:55,400 --> 00:28:01,429
ads there. The old ads are still on the page. Another way of thinking about that over the

00:28:01,429 --> 00:28:08,030
course of a couple of hours of using Soliloquy there could be literally millions of David

00:28:08,030 --> 00:28:14,539
Hasselhoffs hanging out on your page waiting for you to click on them. {laughter}

00:28:14,539 --> 00:28:22,210
So my browser crashing the most common source of these are memory leaks caused by detached

00:28:22,210 --> 00:28:28,980
DOM elements. You get elements in the DOM and attached a listener to if you don't detach

00:28:28,980 --> 00:28:35,309
the listener when you poll them back out it can slowly inflate the size of the browser's

00:28:35,309 --> 00:28:39,700
memory over time. Which is particularly trouble some if you have a long lived application

00:28:39,700 --> 00:28:42,780
like Soliloquy.

00:28:42,780 --> 00:28:48,720
So these were the 5 JavaScript outlaws that we tracked down today. Script error is browser

00:28:48,720 --> 00:28:54,440
opportunities obsfuscation it's the first thing you need to track, every time you bring

00:28:54,440 --> 00:28:59,840
in a third party script you are introducing risk they can change with your control. Context

00:28:59,840 --> 00:29:07,240
errors is the most common logical thing passing the value of this will change. Loading errors

00:29:07,240 --> 00:29:13,260
because sometimes one of your scripts will fail to load, causing unique failure conditions

00:29:13,260 --> 00:29:18,590
in your application. Finally, memory errors we are leaking DOM or elements are created

00:29:18,590 --> 00:29:24,480
dynamically. So all of these errors we capture with a little bit of help from this other

00:29:24,480 --> 00:29:29,929
project I work on called track.js. If you are interested in that check that out, this

00:29:29,929 --> 00:29:34,530
was JavaScript forensic, I was your sheriff @toddhgardner on Twitter if you use that

00:29:34,530 --> 00:29:38,149

YouTube URL: https://www.youtube.com/watch?v=Xvdnewmdokc


