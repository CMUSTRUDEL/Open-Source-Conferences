Title: Stefanie Grewenig: OnConnectionLost: The life of an offline web application | JSConf EU 2015
Publication date: 2015-11-09
Playlist: JSConf EU 2015
Description: 
	Can you use HTML5 technologies to build a web application which works offline? Without a reliable internet connection? Let’s say for two weeks?

That is what our client asked us to build. Their people will use the application on the road; reading documents, entering results and uploading pictures. And then they come home, connect to the internet and sync their results with their colleagues’.

Intro music by @halfbyte
Captions: 
	00:00:24,400 --> 00:00:29,400
Hi everyone, I'm Stefani this is Johannes we're both really happy to be here

00:00:29,400 --> 00:00:33,790
today and more happy to see two awesome talks with still

00:00:33,790 --> 00:00:37,300
enough energy for a third talk, also talking about

00:00:37,300 --> 00:00:45,010
offline. So today we'd like to share our experience building an off line verification for our

00:00:45,010 --> 00:00:53,610
clients. And this guy his name is Lucas, he's also a colleague of us, and a former project

00:00:53,610 --> 00:00:59,320
member and we pack ‑‑ we captured his priceless face when our client came to ask

00:00:59,320 --> 00:01:06,930
us if we could build an offline verification. So we're all developers, and of course as

00:01:06,930 --> 00:01:11,780
a developer when you hear about offline you think about oh, my gosh there's going to be

00:01:11,780 --> 00:01:18,180
data conflicts how do we synchronize them, still data upgradeability and how do we even

00:01:18,180 --> 00:01:25,189
test this? But, of course, we don't want to be overly dramatic, we like to solve some

00:01:25,189 --> 00:01:31,320
challenges and we headed out there to have a look at the HTML5 storage technologies and

00:01:31,320 --> 00:01:36,110
see what's out there for us, and then we thought maybe it's not a developer's nightmare maybe

00:01:36,110 --> 00:01:43,320
it's a nice little challenge to solve. So before we step into talking about what we

00:01:43,320 --> 00:01:49,460
did for our clients, we'd like to explore a bit what offline actually means for us.

00:01:49,460 --> 00:01:55,010
So for us offline is way more than the T‑Rex in a Chrome browser, it's not just having

00:01:55,010 --> 00:02:01,120
no connection at all, it's also have a very poor internet connection, imagine going on

00:02:01,120 --> 00:02:07,710
the tube and being connected via GPRS or just walking around and losing con flexion to one

00:02:07,710 --> 00:02:13,120
router and have a little very short connection loses until you're connected to the next router

00:02:13,120 --> 00:02:19,739
again. So when we talk about offline, that's all these scenarios that should cover all

00:02:19,739 --> 00:02:25,599
these scenarios. And then you might ask yourself why? Why do we need to build anoffline capable

00:02:25,599 --> 00:02:31,420
web application if we is have desktop applications or just have most of the time connections.

00:02:31,420 --> 00:02:38,299
It was not just one client it was two that came and asked if we could build an offline

00:02:38,299 --> 00:02:43,569
capable ‑‑ that was the two case studies that we'd like to talk about today and share

00:02:43,569 --> 00:02:50,409
experiences, so first of all it was M Morrison in the UK and they came to our colleagues

00:02:50,409 --> 00:03:00,379
and they want God from paper base ordering to telebase ordering, the store managers had

00:03:00,379 --> 00:03:05,409
a big bunch of papers walking around the store and checking how many products were still

00:03:05,409 --> 00:03:11,450
in stock and they would update and place orders based on how many they had in stock, for that

00:03:11,450 --> 00:03:17,689
they wanted to use tablets now. They didn't want to commit to a technology at first which

00:03:17,689 --> 00:03:25,989
is why they wanted to build a HTML5 application. Why did they need offline. Super market is

00:03:25,989 --> 00:03:33,159
not the best way to ensure WiFi connection, it's very big and they have very small connection

00:03:33,159 --> 00:03:39,159
drops while walking around and losing connection to one router, and second of all they have

00:03:39,159 --> 00:03:44,059
big metal shelves, which is also not very helpful with internet connection, and third

00:03:44,059 --> 00:03:48,959
they also had that very big walk‑in freezers where they keep all the dairy products milk

00:03:48,959 --> 00:03:55,760
and cheese. They're very good at keeping the cold in and good at keeping the WiFi out.

00:03:55,760 --> 00:04:01,389
They needed something and it was more about robustness of their software while placing

00:04:01,389 --> 00:04:07,419
orders in the store. And the second project we'd like to talk about today, that's the

00:04:07,419 --> 00:04:15,199
project, the both of us are working on right now. It's about a big retail client in Germany

00:04:15,199 --> 00:04:21,530
and they have that product the travel product testers, so what they do they specified the

00:04:21,530 --> 00:04:28,460
products that they want to build and then usually one of a couple of their employees

00:04:28,460 --> 00:04:34,919
take the specification and in the system with them and they go right to the manufacturer's

00:04:34,919 --> 00:04:41,699
site and take products that they want to sell right off the production line, sample products,

00:04:41,699 --> 00:04:48,659
they take pictures of them and see if they would fit what they specify in the the documentation

00:04:48,659 --> 00:04:52,990
before. So they take pictures and notes and say if their products should be sold later

00:04:52,990 --> 00:05:00,550
on and bought. For that, usually, they don't have WiFi connection at all in those manufacture

00:05:00,550 --> 00:05:06,650
halls so they travel, they take the documents with them, they don't have ‑‑ maybe don't

00:05:06,650 --> 00:05:10,949
have internet connection for about two weeks, go back home and want to synchronize those

00:05:10,949 --> 00:05:15,460
documents with the colleagues that have been working on at this time. So that's a the two

00:05:15,460 --> 00:05:21,289
scenarios that we're going to talk about today and how we solve this. And you might ask yourself

00:05:21,289 --> 00:05:28,400
how did we do this? Yeah, that's very nice question and we tried to put this into three

00:05:28,400 --> 00:05:33,240
different steps that we wanted to ‑‑ that we needed to solve in order to make our

00:05:33,240 --> 00:05:39,289
application work offline. How do you get your client available offline? How do you install

00:05:39,289 --> 00:05:44,430
your software in the browser? Then the data available offline, of course, and we already

00:05:44,430 --> 00:05:53,009
heard a bit about this in Patricia's talk. And also data changes, how do we handle those

00:05:53,009 --> 00:06:00,050
synchronization conflicts. Okay, so, let's start with getting the client

00:06:00,050 --> 00:06:04,780
off line so client off line means getting your whole application off line, the whole

00:06:04,780 --> 00:06:10,830
web application, all the CSS, all the images all the JavaScript and all the HTML, and there

00:06:10,830 --> 00:06:17,840
are two technologies how to do that and the older one and a little bit the simpler one

00:06:17,840 --> 00:06:23,139
application cache. Application cache works like this, you specify a manifest file in

00:06:23,139 --> 00:06:31,319
your main HTML file. And this file says to my web application, I need this JavaScript,

00:06:31,319 --> 00:06:37,219
these HTML files, this CSS files and then your browser will detect that, install that

00:06:37,219 --> 00:06:45,900
into a separate form of cache and the next time your user will go to this very page and

00:06:45,900 --> 00:06:49,629
independently if you're offline online it'll serve off of that cache rather than off the

00:06:49,629 --> 00:06:56,280
internet. This works really fine if you're building a single page application, but it

00:06:56,280 --> 00:07:00,919
has a lot of caveats when you're building a multi‑page application, also it's not

00:07:00,919 --> 00:07:07,810
very flexible. There's one way it's working, and if this way is working for you, like it's

00:07:07,810 --> 00:07:14,139
actually working for us, use application cache. If not there's a little bit more sophisticated

00:07:14,139 --> 00:07:21,830
thing and this is called Service Worker. It's created buy a guy from Google named Jake Archibald.

00:07:21,830 --> 00:07:26,900
This is somewhat like a programmable cache. So you have this supervisors worker and it's

00:07:26,900 --> 00:07:35,599
JavaScript file and it works in the background of any tab which is going to your domain so

00:07:35,599 --> 00:07:40,729
independent of how many tabs are open it's just one Service Worker. And this Service

00:07:40,729 --> 00:07:46,770
Worker is able to interject HTTP codes coming from your App. If you do a request, you will

00:07:46,770 --> 00:07:51,169
go through the Service Worker and the Service Worker might go to the internet, if there's

00:07:51,169 --> 00:07:57,479
internet, and just get all the stuff for you, and then, it can also put it into the cache.

00:07:57,479 --> 00:08:02,939
The thing is, you program the thing yourself. So you can reroute stuff, you can read out

00:08:02,939 --> 00:08:06,949
of the cache, you can invalidate the cache you're doing all of this yourself, rather

00:08:06,949 --> 00:08:11,689
than the automatic model, which is the model you have with application cache. Depending

00:08:11,689 --> 00:08:18,249
on what your needs are, chose one of them, application cache is a bit older, it's supported

00:08:18,249 --> 00:08:25,449
on most modern browsers, Service Worker is only kind of ready in Chrome. So make your

00:08:25,449 --> 00:08:32,860
choice and find something. Whoo we're already one third through, now

00:08:32,860 --> 00:08:38,789
you may want to know how to get the data available offline. And, actually our colleague from

00:08:38,789 --> 00:08:44,680
the UK, the Morrisson example they use web storage to store the data offline. There are

00:08:44,680 --> 00:08:50,440
two version of web storage, local storage and web storage, very icy to use and very

00:08:50,440 --> 00:08:56,990
nice. A big break through was when they thought in terms of ‑‑ when they thought about

00:08:56,990 --> 00:09:02,500
their updates in terms of commands, they knew I want to update this product with a quantity,

00:09:02,500 --> 00:09:08,880
a product ID and I need to store nit a queue in case I get ‑‑ in case I lose connection

00:09:08,880 --> 00:09:14,690
I still have that available. For them they used local storage and it worked very fine.

00:09:14,690 --> 00:09:21,260
In our project, we couldn't use local storage, basically for three reasons. First of all,

00:09:21,260 --> 00:09:26,700
we're developing for Chrome only and in Chrome the local storage has only 5 MB and that was

00:09:26,700 --> 00:09:34,620
simply not enough. Our users specification, big documents with tables text and images

00:09:34,620 --> 00:09:41,140
in them. For us that was simply not enough space. And second of all, as you might have

00:09:41,140 --> 00:09:48,030
guessed in next DB ‑‑ I believe decked DB, we wanted queries, we wanted to know give

00:09:48,030 --> 00:09:54,240
me some specification that has been written in that from date X to date Y so we wanted

00:09:54,240 --> 00:10:02,090
to place those queries and that was also possible within index DB. Another thing was that actually

00:10:02,090 --> 00:10:07,150
at the beginning we didn't use index DB we used local storage at a certain point our

00:10:07,150 --> 00:10:12,970
data got messed up and we asked ourselves why. Until we released how our users use their

00:10:12,970 --> 00:10:17,550
application, they opened our application in multiple tabs and working in them at the same

00:10:17,550 --> 00:10:25,280
time. And then, they were all writing for the same storage and our data got messed up.

00:10:25,280 --> 00:10:30,160
Therefore, we wanted something that gives us locking transaction, which index DB gives

00:10:30,160 --> 00:10:37,670
us. Because with this scenario our single threaded JavaScript suddenly became multi‑threaded.

00:10:37,670 --> 00:10:45,420
Yes, that's how we used it. And another interesting point, as we found, was migration, that was

00:10:45,420 --> 00:10:50,920
something that we didn't really tackle from the beginning, and at some point we had to,

00:10:50,920 --> 00:10:58,620
of course, index DB is Schemaless and we're running Java on the back end, there's no other

00:10:58,620 --> 00:11:04,870
reason than the client wants it. They're both scheme maless, but we're having a Schema that

00:11:04,870 --> 00:11:11,470
lives in our application, and we need to clean that up from time to time. So if we have migration

00:11:11,470 --> 00:11:18,020
going on, of course migration number 42, first of all what we do when our context starts

00:11:18,020 --> 00:11:26,470
we do my grate all the data on our Mongodb, as soon as the client connects, for us, with

00:11:26,470 --> 00:11:31,310
application cache, we do have a new version then and ship them all an application code,

00:11:31,310 --> 00:11:37,410
with this application we ship migrationjs file so the client can migrate it's own data

00:11:37,410 --> 00:11:45,170
in the index DB. But one more interesting point is that we actually didn't want to write

00:11:45,170 --> 00:11:50,730
the same migration code in JavaScript and Java, we wanted to share that kind of that

00:11:50,730 --> 00:11:55,660
piece of business logic so therefore we used something called Naser. You may know it by

00:11:55,660 --> 00:12:03,000
rhino, and that's a Java engine that lets you execute JavaScript in the back end, that

00:12:03,000 --> 00:12:11,120
worked really fine for us. That was okay to set up and now works since we started doing

00:12:11,120 --> 00:12:19,320
migrations. Yeah. Okay, finally how do you handle data changes.

00:12:19,320 --> 00:12:25,310
Data changes can come in two different flavors, and interesting enough you can both solve

00:12:25,310 --> 00:12:35,080
them with a gang of 4 pattern. Done for on the radio. One of them is the command pattern,

00:12:35,080 --> 00:12:40,360
and the other one is the mow men toe pattern. And if you're lucky you can use the command

00:12:40,360 --> 00:12:47,920
pattern, and that's what the people at Morrissons could use. So, how did they do it? Actually,

00:12:47,920 --> 00:12:54,410
when someone is walking around the super market, they will, like, detect, oh, there's not enough

00:12:54,410 --> 00:13:01,240
Museli at that place, I need to update that order so I get more Muslie. So they update

00:13:01,240 --> 00:13:07,240
the order and they press a button, and by pressing that button they do an action. And

00:13:07,240 --> 00:13:13,970
this action can be captured into an object. Which is then called the update order command.

00:13:13,970 --> 00:13:19,000
So when you have those objects with an action you can get a sequence of the actions the

00:13:19,000 --> 00:13:26,190
user does and you simply store them in a local storage. Or in "the" local storage in this

00:13:26,190 --> 00:13:31,500
form. They just put them into local storage, when ever Annette connection is available,

00:13:31,500 --> 00:13:37,310
they send the command over the wire and the server had a message processor where they

00:13:37,310 --> 00:13:43,100
store the data into the database. It's not really relevant how the message processor

00:13:43,100 --> 00:13:47,640
looks like, so either you apply the commands to your data and then you have like the end

00:13:47,640 --> 00:13:52,240
state in your database or you store even the commands and you do events sourcing and only

00:13:52,240 --> 00:13:58,370
apply the commands on read, but whatever you do, that's a pretty clean way to do synchronizations,

00:13:58,370 --> 00:14:05,290
so when ever you have the chance in an application where you have distinct commands to do synchronization,

00:14:05,290 --> 00:14:10,370
I would try to use commands for that because it's pretty clean, the user has an idea if

00:14:10,370 --> 00:14:15,320
a command fails because if you say hey, I couldn't update that order because there was

00:14:15,320 --> 00:14:20,110
already someone else who update the order, they have a connection to the conflict. But

00:14:20,110 --> 00:14:36,310
unfortunately, our users are writing documents, so our changes look rather like this. So our

00:14:36,310 --> 00:14:43,070
users are not programmers so they don't know <div>es, there's really a hard way, they just

00:14:43,070 --> 00:14:52,380
type ahead and every change done to the documents is like a letter typed. So this is simply

00:14:52,380 --> 00:14:57,980
impossible to do with commands because the only type of command you would have is updated

00:14:57,980 --> 00:15:01,610
document, update the document, update the document. So this is not something you can

00:15:01,610 --> 00:15:10,350
work with. So how do you do that? You create kind of your chain sets, you do that by a

00:15:10,350 --> 00:15:15,910
pattern called momento which works like I have a state of my document () and I remember

00:15:15,910 --> 00:15:21,610
that (Momento) and five seconds later there's a new state of my document and I remember

00:15:21,610 --> 00:15:27,500
that. And these states can be transferred. So, for us it's five second, it can be any

00:15:27,500 --> 00:15:34,630
number. You have to chose what is fitting for you. How does that work? So first of all

00:15:34,630 --> 00:15:42,130
the user types and when ever he types we're having an Angular application you can do it

00:15:42,130 --> 00:15:47,060
with everything, it goes through a JavaScript component called Repository. This Repository

00:15:47,060 --> 00:15:55,220
immediately writes into the indexDB so every key stroke the user dozeneds up in indexDB

00:15:55,220 --> 00:16:02,880
like in one document like in the sequence of documents. And then Repository says, Hey

00:16:02,880 --> 00:16:08,030
something change in the the database with this document and it tells this information

00:16:08,030 --> 00:16:12,590
to another component also written in JavaScript called the queue, you can name it whatever

00:16:12,590 --> 00:16:21,260
you want, we call it the queue. And this creates itself something in the indexDB which is like

00:16:21,260 --> 00:16:27,800
saving the changes or documented the changes done to your database. And in this case, you

00:16:27,800 --> 00:16:33,850
have an item, with the UID and it's in stage queued, it's waiting to be synchronized the

00:16:33,850 --> 00:16:40,350
changes in this together are waiting to be synchronized. We wait for five seconds after

00:16:40,350 --> 00:16:46,950
these five seconds it will start sinking that document. So it will change the stage to insink,

00:16:46,950 --> 00:16:52,100
so it knows this document is currently sinked, I should not sink it again, if the sinking

00:16:52,100 --> 00:16:57,690
process takes longer than five seconds. And it tells the document Repository go ahead

00:16:57,690 --> 00:17:01,160
and save that to the internet, because the queue doesn't know about the internet the

00:17:01,160 --> 00:17:07,980
queue just knows about changes. And what happened is because sometimes the internet is slow

00:17:07,980 --> 00:17:12,419
the user is still typing, there are still changes while on the other end someone is

00:17:12,419 --> 00:17:19,049
sinking so it's just queuing it again. So it's queued and insink at the same time, and

00:17:19,049 --> 00:17:26,549
the changes currently done will be synced with the five second cycle. That's all interestmenting,

00:17:26,549 --> 00:17:34,020
I said five seconds. Five seconds is actually not that easy to detect if you have a business

00:17:34,020 --> 00:17:39,150
application where users write documents and usually they have more than one document open.

00:17:39,150 --> 00:17:46,470
More than one document means more than one engine accessing the database. And you don't

00:17:46,470 --> 00:17:52,660
want to sync on all the that tabs you have, we were thinking how to do that, Service Worker

00:17:52,660 --> 00:17:58,340
would be a good way to do it because you only have one per tab, another way to do it is

00:17:58,340 --> 00:18:02,680
share web workers, because share web workers are like web workers just between all the

00:18:02,680 --> 00:18:09,680
tabs. So we have a timer in our shared web worker which at random choses one tab and

00:18:09,680 --> 00:18:17,030
you do the sync every five seconds the same it's just random. The other thing and Stefie

00:18:17,030 --> 00:18:24,490
had nit the beginning on one of the slides, when are we actually off line? So don't go

00:18:24,490 --> 00:18:29,380
for the navigator.offline property on your browser, because in Chrome it just tells you

00:18:29,380 --> 00:18:34,640
you're connected to any internet that's not helping you. Are you connected to "the" internet

00:18:34,640 --> 00:18:40,780
as a whole, but our servers down, that's alsooffline. Offline is when you can't connect to your

00:18:40,780 --> 00:18:45,290
own back end, that's the definition we chose, and the users want to know when they're off

00:18:45,290 --> 00:18:51,010
line, because it's important if their data is synced or not T shared web worker pings

00:18:51,010 --> 00:18:56,510
our server, hey, are you still there, and the server responds, yes, yes, all the time

00:18:56,510 --> 00:19:03,870
or not. The web worker will tell all the tabs, hey, you're offline or your online so the

00:19:03,870 --> 00:19:09,770
user knows in every tab the state of the application and if it's currently thinking or not.

00:19:09,770 --> 00:19:17,760
Yeah, let me quickly check the type. Yep. (Laughs) nice. So yeah, what is it now? Is

00:19:17,760 --> 00:19:22,740
this building an offline capable verification a developer's nightmare or a nice little challenge

00:19:22,740 --> 00:19:32,140
to solve. As a good consultant, I'm going to tell you that depends. But I can ‑‑

00:19:32,140 --> 00:19:36,170
we'd like to share you some questions that we asked ourselves that helped us to determine

00:19:36,170 --> 00:19:41,480
what technology would fit best for our cases. And how we determined what it would be worth

00:19:41,480 --> 00:19:47,710
spending time on or not. First of all it's the size of the data, for example the Morrison

00:19:47,710 --> 00:19:53,270
example the local storage was enough for them. It's way easier to use something synchronous

00:19:53,270 --> 00:20:01,210
than having to tale with the whole DB API, so the size of data matters, also the structure

00:20:01,210 --> 00:20:08,840
of data we were really lucky that our data didn't have much dependencies, but if you

00:20:08,840 --> 00:20:14,210
have a lot of dependencies in your data you might want to change to a different storage

00:20:14,210 --> 00:20:18,770
technology. And it also makes sense that your storage technologies kind of matches, so we

00:20:18,770 --> 00:20:24,600
used index DB and MongoDB it worked really well together, if you have to use relational

00:20:24,600 --> 00:20:30,360
database you might want to think something else. There's something called web SQL, which

00:20:30,360 --> 00:20:36,380
is deprecated and I don't have much experience in it, but that's maybe something you want

00:20:36,380 --> 00:20:42,730
to consider. Another one is a potential for data conflicts, in both cases we're really

00:20:42,730 --> 00:20:48,809
lucky our clients said data conflicts are not something that should occur often. Socially

00:20:48,809 --> 00:20:56,010
the store managers update the products in the store only on their own, so there's no

00:20:56,010 --> 00:21:00,980
two people standing in the same aisle and updating stuff. Also one person should work

00:21:00,980 --> 00:21:07,660
on a document even though it can happen that two people work on the same one, but we should

00:21:07,660 --> 00:21:15,180
only be able to detect the conflict and not have a sophisticated conflict resolution.

00:21:15,180 --> 00:21:19,970
Which you could do here. We're on a level, we saw that we could show sophisticated <div>

00:21:19,970 --> 00:21:26,559
or even do auto personalling, browser support is a big one, our application was only supposed

00:21:26,559 --> 00:21:34,840
to run in Chrome, so we were really lucky. That's not always the case, but there's some

00:21:34,840 --> 00:21:40,240
technologies that are just not, not working or supported by old browsers. And the very

00:21:40,240 --> 00:21:46,500
obvious one, but a very one that you should remember is the amount of functionality to

00:21:46,500 --> 00:21:50,740
work offline. For both applications, not the full application worked offline, only the

00:21:50,740 --> 00:21:58,420
core functionality that they really needed was working offline. Another thing is we're

00:21:58,420 --> 00:22:05,120
now ‑‑ we're now having users for about a year and there's some more challenges. We

00:22:05,120 --> 00:22:08,960
only talked about the challenges that we had while implementing the software but not really

00:22:08,960 --> 00:22:15,809
what happened when we went live in production. So there's still two challenges that are need

00:22:15,809 --> 00:22:21,790
to be solved and one of them is the storage management. Our data's way too large to put

00:22:21,790 --> 00:22:29,980
it all on the client side, so what to we do? What do we do when the our indexDB is full.

00:22:29,980 --> 00:22:36,970
We already heard in Patricia's talk she had a slide where she visualized how Chrome manages

00:22:36,970 --> 00:22:44,660
your storage so you get half of the available ‑‑ oh she had a third of the available memory

00:22:44,660 --> 00:22:49,940
that you have on your machine and therefore every application gets maximum of 20 percent.

00:22:49,940 --> 00:22:55,220
So what does our user do when they travel for two weeks? Of course they sit in an airplane

00:22:55,220 --> 00:23:00,390
for a very long time so they don't load a bunch of Dr. Who episodes and then there

00:23:00,390 --> 00:23:04,770
machine is full, their available hard drive shrinks and therefore they don't have much

00:23:04,770 --> 00:23:10,670
space to have those documents available offline. So this is still a challenge that we're trying

00:23:10,670 --> 00:23:18,190
to solve. How do we make it easy for the users to decide when they want to have the documents

00:23:18,190 --> 00:23:25,790
available offline and when can they be deleted and not just randomly let them delete by Chrome.

00:23:25,790 --> 00:23:32,510
Another thing is local data versus non‑local data. Our users, as we saw before, have duplication

00:23:32,510 --> 00:23:38,850
open in multiple tabs, so what they do is they start writing a document then switch

00:23:38,850 --> 00:23:45,809
to another document and to another tab and want to search for what they just added immediately.

00:23:45,809 --> 00:23:52,140
But as Johannes said before we have that five seconds delay until it synchronize was the

00:23:52,140 --> 00:23:58,580
back end and a third is only place in the the back end. So it's kind of awkward for

00:23:58,580 --> 00:24:04,100
them that they have to wait five seconds until they can search for what they just entered.

00:24:04,100 --> 00:24:09,340
So, what we're thinking of right now is having actually a search that searches not only the

00:24:09,340 --> 00:24:15,580
back end but also locally and then Americans those results together to give our users a

00:24:15,580 --> 00:24:26,900

YouTube URL: https://www.youtube.com/watch?v=rw8Q9ZLDkEs


