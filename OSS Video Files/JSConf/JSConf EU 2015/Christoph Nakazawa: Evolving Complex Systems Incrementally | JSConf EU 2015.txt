Title: Christoph Nakazawa: Evolving Complex Systems Incrementally | JSConf EU 2015
Publication date: 2015-10-10
Playlist: JSConf EU 2015
Description: 
	JavaScript that writes JavaScript: Christoph will give an intro to jscodeshift and the underlying tools like recast and ast-types that help rewrite and modernize a lot of Facebook’s JavaScript code day-to-day. We’ll explore why these tools become increasingly important and how they change how we think about open source and breaking API changes at Facebook. At the end of the talk everyone will be able to run their own code transformations across all of their projects safely and efficiently.

Intro music by @halfbyte
Captions: 
	00:00:23,670 --> 00:00:28,380
Hey, everyone, I had to set everything up for just a moment, and you know mac os and

00:00:28,380 --> 00:00:35,340
Apple software. So hey I'm Christoph I work at Facebook as front-end engineer

00:00:35,340 --> 00:00:41,460
in JavaScript infrastructure team. I'm going to tell you how evolved our front end source

00:00:41,460 --> 00:00:48,620
space. And I'll teach you how to do large scale tool assisted co‑changes to your JavaScript

00:00:48,620 --> 00:00:56,050
code effectively. And the word that we use for this at Facebook is codemod,code modification,we

00:00:56,050 --> 00:01:03,559
kind of invented it, that's just what question call it. And at Facebook sometimes we use

00:01:03,559 --> 00:01:08,090
it inter change establish sometimes it'smanual change, sometimes it's an automatic change,

00:01:08,090 --> 00:01:13,830
it always refers to large scale changes to a big portion of our code base (Manual) at

00:01:13,830 --> 00:01:18,560
Facebook we have tens of thousands of judgment modules and we need to make sure that the

00:01:18,560 --> 00:01:24,090
health of our code base is very good and we have a good handle on that, what's more is

00:01:24,090 --> 00:01:31,520
that we want to enable every engineer at Facebook to move fast, even with breaking changes.

00:01:31,520 --> 00:01:37,030
We often add new shiny abstractions, new language features because it's always easy to add something

00:01:37,030 --> 00:01:43,659
new, we tell people, use that, use Latin ‑‑ not var anymore, we never go back and tell

00:01:43,659 --> 00:01:49,109
people, hey, we need to clean this up, can you deprecate your code and remove it. It's

00:01:49,109 --> 00:01:53,899
always really hard to get rid of deprecated code, especially if you have thousands of

00:01:53,899 --> 00:01:59,840
callers around your code base (Deprecated) browsers also new capabilities, frameworks

00:01:59,840 --> 00:02:08,119
gain new features as well. We need to somehow handle this. Everything just becomes more

00:02:08,119 --> 00:02:13,120
complex. The problem is that even though we add all those new features, the health of

00:02:13,120 --> 00:02:18,970
our code base more and more declines because we have multiple ways of doing the same thing.

00:02:18,970 --> 00:02:23,510
We also want to encourage people to always just write code using the new patterns, but,

00:02:23,510 --> 00:02:27,640
especially if you're new at a company or new at a code base and you just started looking

00:02:27,640 --> 00:02:31,920
at it and you true to figure out how something is done you usually look at how other people

00:02:31,920 --> 00:02:37,099
around you did the same thing, then you discovered all the code, you tonight know if it's deprecated

00:02:37,099 --> 00:02:42,319
or not, you use the code around you and you write it like it was the latest and greatest

00:02:42,319 --> 00:02:47,260
thing, like more and more deprecated code even though you shouldn't be using the patterns

00:02:47,260 --> 00:02:53,739
anymore. We often have hundreds of thousands of calls of something, we have a web UI that

00:02:53,739 --> 00:02:59,230
allows you to search quickly across all the code. I had to make a change and I was looking

00:02:59,230 --> 00:03:05,569
at how many lines of code and how many invalid patterns are we using there that we have to

00:03:05,569 --> 00:03:09,620
update, and in this case there were almost a hundred thousand results and then it tells

00:03:09,620 --> 00:03:16,150
you, oh, I cannot display this to you because it would crash your browser. So going through

00:03:16,150 --> 00:03:22,650
every call set manually is not a solution. It's not even an option for us in some cases.

00:03:22,650 --> 00:03:31,209
This is a codemod they ran on our code base, we have a tool called codemod, it's very simple,

00:03:31,209 --> 00:03:37,829
it's an internal tool, I have this string and I want to replace it with this other thing.

00:03:37,829 --> 00:03:41,799
This has served us really well to evolve our code base over time, it's really good when

00:03:41,799 --> 00:03:50,719
you do a simple rename, you rename JSCONUS and up load to the web site and you're done.

00:03:50,719 --> 00:03:54,610
But we're way beyond simple renames and also the syntax for JavaScript becomes more and

00:03:54,610 --> 00:04:00,569
more complex and also ambiguous, so we can't really use regx anymore so this is something

00:04:00,569 --> 00:04:07,269
I actually ran at our UI class at Facebook. It has been around for a long time, but we

00:04:07,269 --> 00:04:15,879
use an early class of ES 1 , ECMI script it was just final iced now called ES2015. Hopefully

00:04:15,879 --> 00:04:25,390
it's 2015, if I say ES6, I'll buy you a beer later. So I haven't done regX code much in

00:04:25,390 --> 00:04:30,470
a long time, I figured I can do this with a renaleX the problem I tried to solve was

00:04:30,470 --> 00:04:35,640
add a new call to create an instance of the URI class instead of calling as a function,

00:04:35,640 --> 00:04:41,220
we had a pattern for the same path, we had a code to allow tin stance of this class,

00:04:41,220 --> 00:04:47,580
with new and without new. figured, okay, I can do this with a regX. So I wrote one regX

00:04:47,580 --> 00:04:51,770
didn't catch all the cases, wrote another, didn't catch all the cases either, wrote a

00:04:51,770 --> 00:04:56,470
few more, then at some point I was in a mess for some reason everything was broken because

00:04:56,470 --> 00:05:02,190
one of my regX wasn't very good,I probably had a star, or a dot or something, I was just

00:05:02,190 --> 00:05:07,410
really frustrated, then I rewrote this using an EST base codemod and it was don't in two

00:05:07,410 --> 00:05:13,830
minutes and basically two lains of code. I mention ASTs, codemods that operate on the

00:05:13,830 --> 00:05:20,250
AST, abstract syntax representation of JavaScript instead of source text representation. They

00:05:20,250 --> 00:05:25,040
can really help us make a difference. If you build a strong codemod for an API change you're

00:05:25,040 --> 00:05:29,270
making you can rework and apply it every time you make a change to the code that you're

00:05:29,270 --> 00:05:35,750
trying to build. And what about rebasing? When you manually update your code on a long‑lived

00:05:35,750 --> 00:05:41,070
branch when working on a new feature, you have to redo changes potentially every time

00:05:41,070 --> 00:05:46,920
when you pull from master or something like that. With AST codemods I can rerun them before

00:05:46,920 --> 00:05:53,350
I push my change, done. But, I also want to talk about the frustration around the deaspiration

00:05:53,350 --> 00:05:59,660
that one often feels when they're thinking of making or braking API change. Good codemods

00:05:59,660 --> 00:06:05,530
are really hard. And I'm sure, everyone of you, at least once, decided not to run a codemod

00:06:05,530 --> 00:06:10,160
because it seemed too difficult and they just kept the old API around, didn't make a breaking

00:06:10,160 --> 00:06:15,870
change, it just wasn't, you didn't have the right tooling for that. However, quite often,

00:06:15,870 --> 00:06:21,130
there's simply no other way around codemods. We can't just rewriting write our entire code

00:06:21,130 --> 00:06:30,660
base because we have a couple of bad abstractions. We must find ways to evolve our code base

00:06:30,660 --> 00:06:37,240
incrementally or well change complex systems incrementally. With a clearly envisioned end

00:06:37,240 --> 00:06:42,910
state in mind. At Facebook we hack everything and I put up these posters around the product

00:06:42,910 --> 00:06:47,610
infrastructure team and someone guestening this and made their own version of it. I actually

00:06:47,610 --> 00:06:54,470
like this better than the original title. But we also need to be confident when we make

00:06:54,470 --> 00:07:00,360
these large changes to the code base. There's no point in running a codemod if it disrupts

00:07:00,360 --> 00:07:05,410
every single engineer at your whole company. The whole point of this is not to break anything

00:07:05,410 --> 00:07:10,380
and tone able every engineer to move faster. And codemod tools help us do this. And the

00:07:10,380 --> 00:07:17,130
tool that we build at Facebook is called JS code shift it was built by Felix Kling, he

00:07:17,130 --> 00:07:22,110
built it more than a year ago then he kept it secret for a really long time. He was sitting

00:07:22,110 --> 00:07:27,110
next to me at the time at Facebook and we casually talked about this new API that I

00:07:27,110 --> 00:07:31,400
wanted to build and I had this idea of what I wanted to build and I just didn't know how

00:07:31,400 --> 00:07:36,660
to get there. It was impossible to do. And then he was like, oh, yeah, so I built this

00:07:36,660 --> 00:07:41,600
tool, it's probably not very good, and I was look, okay, let's take a look at this. I looked

00:07:41,600 --> 00:07:47,320
at it, I was like holy shit this is amazing, we have to Open Source this and we the. This

00:07:47,320 --> 00:07:54,300
is really good. Let's dive into how I got started with this kind of codemod work. It's

00:07:54,300 --> 00:07:59,410
exciting to be able to talk about how we built a relay framework. I know if you heard about

00:07:59,410 --> 00:08:06,280
prelate it's a data framework on top of fame work. This year at React JSCON we wanted to

00:08:06,280 --> 00:08:21,090
build a new API, wanted to move away from create graph QL.mix in to relay.create container.

00:08:21,090 --> 00:08:26,310
So in relay we used to have this mix‑in, but used internal React APIs we couldn't shift

00:08:26,310 --> 00:08:32,510
to Open Source API, it broke all the time because we act changed all the time as well.

00:08:32,510 --> 00:08:36,140
And we also couldn't ‑‑ because we were using a mix‑in we weren't sueable to support

00:08:36,140 --> 00:08:43,870
ES 2016 class components, it was also a way cleaner implementation. We really wanted to

00:08:43,870 --> 00:08:50,870
move to this. But the problem is, this completely changed the full public API relay and admittedly

00:08:50,870 --> 00:08:56,990
it's not a big public API, but it changed the entire API. At that point in time, herbally

00:08:56,990 --> 00:09:02,410
this year, there were already hundreds of files using ‑‑ written using relay, and

00:09:02,410 --> 00:09:07,870
the product teams using product ‑‑ was moving really fast. Building this enough API

00:09:07,870 --> 00:09:13,529
took about a month to complete. I built a codemod and had to run it at least ten to

00:09:13,529 --> 00:09:21,279
fifteen times to test different stages of the new API. If I had done this manually,

00:09:21,279 --> 00:09:25,490
while we were building this new API for a month, I would have had to change those hundreds

00:09:25,490 --> 00:09:30,519
of files manually every time when some product developer changed something and it would be

00:09:30,519 --> 00:09:35,790
a huge mess. It's painful, just to get a better idea of here's the before and after. It doesn't

00:09:35,790 --> 00:09:40,060
matter if you know relay or React, t matters that you have pattern matching capabilities

00:09:40,060 --> 00:09:44,819
in your brain and just compare those those code pieces side by side the left side is

00:09:44,819 --> 00:09:50,879
before the right side after. If you ever removed a mix in and made a higher order component

00:09:50,879 --> 00:09:56,310
yourself you know what the challenges are involved here. But in this case, the original

00:09:56,310 --> 00:10:00,970
example, I guess this laser pointer doesn't work that well here, we had a mix‑in up

00:10:00,970 --> 00:10:06,060
there and statics the new version didn't have the mix‑in anymore, and then we had on‑line

00:10:06,060 --> 00:10:10,829
fifteen the relay.create container that was thereabout before, and then also we moved

00:10:10,829 --> 00:10:18,540
the stat ticks into the secondary argument, to the function call. And traditionally we

00:10:18,540 --> 00:10:24,389
would solve this with regx, right. A lot you this doesn't seem that difficult, I can probably

00:10:24,389 --> 00:10:28,930
do this with a renaleX, I could maybe do it, I wouldn't be confident and I'm sure it would

00:10:28,930 --> 00:10:37,499
break badly. And here's why, I could probably bulled a reg X from the example before, look

00:10:37,499 --> 00:10:41,999
at the variation of a similar module on the right, it's just a different developer built

00:10:41,999 --> 00:10:47,949
a similar module with a different code convention. This had a second mix‑in so we can't remove

00:10:47,949 --> 00:10:53,740
the whole mix‑in line, had different stat ticks and different in how it was exported.

00:10:53,740 --> 00:10:57,579
But also for this change I had to add a new module that didn't exist before and remove

00:10:57,579 --> 00:11:03,779
an old one from the require Blog. We have human code conventions as everyone does, I

00:11:03,779 --> 00:11:07,930
had to enter the new requirement statement at the right alphabetical locations, this

00:11:07,930 --> 00:11:13,769
is just a lot of work with regx. You know. This is what I wanted to show you what can

00:11:13,769 --> 00:11:18,560
be different from one module to another module and quite often that night be two people working

00:11:18,560 --> 00:11:23,949
on the same team, working on the same product, you know, and the whole point of this is to

00:11:23,949 --> 00:11:28,720
output some code that looks like a human had written this. So, I need to figure out how

00:11:28,720 --> 00:11:36,689
can I write a codemod that looks like I wrote this code. But there's more, what does this

00:11:36,689 --> 00:11:43,589
piece of JavaScript mean? Does anyone know? Anyone seen this before? Everyone's quite.

00:11:43,589 --> 00:11:48,670
So we don't actually know because it depends on what context this is used in. So this is

00:11:48,670 --> 00:11:54,540
an entirely different piece of JavaScript. Anyone, anyone has an idea? Everyone's shaking

00:11:54,540 --> 00:12:00,069
their head. So the first win, this is actually a block statement with a label called JavaScript

00:12:00,069 --> 00:12:05,199
and the value that it maps to is a binary expression is awesome and concatenates that

00:12:05,199 --> 00:12:10,279
together. But the second one, this is an object expression where the key is JavaScript, it

00:12:10,279 --> 00:12:22,319
only has one property and the it's awesome I've talked about why ‑‑ what is JS code

00:12:22,319 --> 00:12:30,139
shift? What does it do for us, simple description is an ST toST codemod, we need to dig deeper

00:12:30,139 --> 00:12:35,170
and figure out what tools are involved and what concepts do we need to understand. So

00:12:35,170 --> 00:12:41,449
let's ask ourselves what do we actually want to do here? We want to take one piece of JavaScript

00:12:41,449 --> 00:12:45,410
and output a different piece of JavaScript, and we're going to operate on the ST, so we

00:12:45,410 --> 00:12:52,220
need to parse JavaScript source code into an ST then we need to find the nodes that

00:12:52,220 --> 00:12:58,100
we want to replace, create new nodes that we want to insert, then update the EST at

00:12:58,100 --> 00:13:03,079
the right location and then print it back into JavaScript source ideally with proper

00:13:03,079 --> 00:13:08,620
formatting and it should look like a human wrote this. I want to point out that all we

00:13:08,620 --> 00:13:13,899
do here is simple tree operations. As Front‑End developers you should all know what this is

00:13:13,899 --> 00:13:19,899
doing, right? We're dealing with the DOM all the time we find, create and update nodes

00:13:19,899 --> 00:13:26,110
it's same for ASTs, let's look at these step‑by‑step. First up parse, I talk about the abstract

00:13:26,110 --> 00:13:34,350
syntax tree. I'm pretty sure most of you are look nope, sounds like stat tick analysis,

00:13:34,350 --> 00:13:41,230
it doesn't matter if you know ASTs or don't, I'm going to show you what an AST looks like

00:13:41,230 --> 00:13:46,569
and you can time me if you want to. There's a tool that we built at Facebook called AST

00:13:46,569 --> 00:13:59,389
explorer. I'm go going to ‑‑ (Explorer) cool, I'm at the demo. This is not very big,

00:13:59,389 --> 00:14:04,730
this is better. All right, cool. So this the the AST explorer, you can follow along if

00:14:04,730 --> 00:14:10,480
you have your laptop open. All it does is it gives you two panels, there's the code

00:14:10,480 --> 00:14:16,220
you can write, and then the AST representation of the same code. AST tonight be scared, it's

00:14:16,220 --> 00:14:22,949
just a simple JSON data structure, this tool helps visualize, in this sample code we have

00:14:22,949 --> 00:14:28,350
two statements and one of them is a variable declaration and one of them is a function

00:14:28,350 --> 00:14:34,800
declaration, it's not very exciting, it's just ‑‑ it's initialized using an array

00:14:34,800 --> 00:14:41,209
expression. It's called tips and that's an identifier. Let's look at some other code.

00:14:41,209 --> 00:14:45,959
So, I showed you this example before, right. And you were shaking your head and you're

00:14:45,959 --> 00:14:49,970
like what are you talking about, this doesn't make sense, this looks like an October. No,

00:14:49,970 --> 00:14:54,920
actually this is a block statement. It has a label here, the label is called JavaScript,

00:14:54,920 --> 00:15:01,610
and the body of the block statement is binary expression. So, now, let's wrap it in parens

00:15:01,610 --> 00:15:08,490
and now suddenly this is an object expression, it has one property and then this property

00:15:08,490 --> 00:15:13,639
has a key that's an identifier called name and then a value with a binary expression.

00:15:13,639 --> 00:15:19,569
That is awesome expression. All right, cool. Remember what an object expression looks like,

00:15:19,569 --> 00:15:24,559
I'll go over this in a moment, this is important. We also can do function calls, a little bit

00:15:24,559 --> 00:15:30,980
of German here. In this case, this is also important, there's a call expression, thecal

00:15:30,980 --> 00:15:38,119
Lee is called hallow, and the arguments is a string literal called JSConfEU. All right.

00:15:38,119 --> 00:15:46,550
Let's do something quick, we can create a class JSConfEU has awesome food. Does it have

00:15:46,550 --> 00:15:57,819
awesome food? Yes, hell yeah! This probably extends probably JSCONF, we can see this is

00:15:57,819 --> 00:16:05,819
a class declaration, it's ID, it's name is JSConfEU, it has a super class it extends

00:16:05,819 --> 00:16:11,949
and then here it has a class body and it has a method called has awesome food, and of course,

00:16:11,949 --> 00:16:27,829
this somewhere returns true. So that's an AST. So next I want to talk about create.

00:16:27,829 --> 00:16:33,579
We're going to skip over find, I hope you allow me to do this. I said before we're dealing

00:16:33,579 --> 00:16:39,170
with a simple objected day the structure, we could build up an object and ‑‑ A

00:16:39,170 --> 00:16:44,670
ST, you can do that but you tonight have type guarantees and probably end up in a mess because

00:16:44,670 --> 00:16:49,639
you make a Typo nothing works anymore, but there's a project created by Ben jaw listic

00:16:49,639 --> 00:16:57,910
anyone who used to work at Facebook, it has a the similar syntax to Babels creation system.

00:16:57,910 --> 00:17:05,059
This is an API to define AST types and then it gives us a functional API to compose those

00:17:05,059 --> 00:17:10,179
AST nodes, gives you type safety, tells you when you cannot create an AST node with what

00:17:10,179 --> 00:17:17,660
the type you in the mind. You saw the object expression before, here on the left side we

00:17:17,660 --> 00:17:23,429
define an object expression, basad on an expression built up using properties and the field properties

00:17:23,429 --> 00:17:29,790
is an array of property and you can property right below that, property based on a node,

00:17:29,790 --> 00:17:36,780
built up the kind the key and the value. The kind is iter init, or setter, usually init,

00:17:36,780 --> 00:17:42,180
we're scared of getter and setters, and then there's ‑‑ getters and setters, a key

00:17:42,180 --> 00:17:51,830
(Getter) a field value that can be any expression, the value can be any expression it can also

00:17:51,830 --> 00:17:57,110
be an objects expression because objects expression is based on an expression. On the right‑hand

00:17:57,110 --> 00:18:03,330
side you can see how we build this up, basically we get a function called objects expression

00:18:03,330 --> 00:18:08,460
we pass in the property, and if we were to print that code, it would print JavaScript

00:18:08,460 --> 00:18:13,240
is awesome, over course depending ton context it would add parens, otherwise it would be

00:18:13,240 --> 00:18:19,400
a label statement and we don't know what to do. There's more in JS code shift you can

00:18:19,400 --> 00:18:26,830
type it out in a template literal and then reparse that JS code and then you can actually ‑‑

00:18:26,830 --> 00:18:33,410
using substitution to output proper AST nodes. And then, this is from an example that converts

00:18:33,410 --> 00:18:38,760
four loops into a ‑‑ loop. This is really cool. Going to skip over update, hope you

00:18:38,760 --> 00:18:43,900
allow me to to that use. We talked about parse and create, let's talk about printing, this

00:18:43,900 --> 00:18:50,240
is really hard. The project we're using for in is recast. It was created by Ben newman

00:18:50,240 --> 00:18:58,210
also. it's really awesome, gives us one API, it's called recast drought print. What's the

00:18:58,210 --> 00:19:08,480
point of 24? ‑‑ what's the point of this ‑‑ it ‑‑ if you build a JS Compiler like

00:19:08,480 --> 00:19:14,030
babble you don't care about the out put of your transformed code (Don't really care)

00:19:14,030 --> 00:19:20,750
the only thing that see it is output is the browser, and we usually minute FYcode, if

00:19:20,750 --> 00:19:25,420
you write a codemod you don't want to find yourself in a situation where the code you

00:19:25,420 --> 00:19:29,900
printed that you didn't even touch looks completely different from before. If I do this, if I

00:19:29,900 --> 00:19:35,230
run a codemod and I only change one tiny little thing here and output looks component model

00:19:35,230 --> 00:19:39,280
plately different and I run it on tens of thousands of JavaScript modules every engineering

00:19:39,280 --> 00:19:46,690
company is going to be annoyed by me. I don't want any engineer to know I'm even doing this.

00:19:46,690 --> 00:19:55,210
(Don't) you can provide options on what the code style is, that you ear using in your

00:19:55,210 --> 00:20:00,500
code, like indentation, what's even better, it doesn't try to reprint the code you didn't

00:20:00,500 --> 00:20:07,990
touch that's important, you're only changing the things that you're actually changing.

00:20:07,990 --> 00:20:14,520
And this is why we cannot just use Babel which is a Compiler to to this not yet any stay

00:20:14,520 --> 00:20:24,730
tuned. We talked about creating ST nodes and hao we print the ST back into source code.

00:20:24,730 --> 00:20:31,120
For find and update this is were JS code ties it together, provides a neat little package

00:20:31,120 --> 00:20:37,280
for you to do these AST codemods, in the past we simply didn't have tool set enable us to

00:20:37,280 --> 00:20:42,340
do this. We didn't have a standard for JSAST a couple of years ago, we needed all these

00:20:42,340 --> 00:20:50,010
tools before that. So let's do a demo, everyone loves demos, we'll write a transform that

00:20:50,010 --> 00:20:55,080
get rids of a hypothetical module called merge, this is a module that exist in the three different

00:20:55,080 --> 00:21:01,770
variations at Facebook and then I killed them all at Facebook, they're not there anymore,

00:21:01,770 --> 00:21:06,760
you can search the source code, it's not there, I promise. Took all the arguments you pass

00:21:06,760 --> 00:21:12,330
into it create add new object and created all the passing properties into that new object

00:21:12,330 --> 00:21:19,190
create add new object. Then we created a new syntax for React in the beginning we realized

00:21:19,190 --> 00:21:24,300
this is also awesome for objects we can use the spread property, the three dots right

00:21:24,300 --> 00:21:28,380
there that you see in the second lain to spread all the properties of an object into a new

00:21:28,380 --> 00:21:34,020
object, this is really powerful syntax. This is not a standard yet, but we hope it will

00:21:34,020 --> 00:21:40,820
be in ES 2016 or 2017. We're transforming what you see in the first line to what you

00:21:40,820 --> 00:21:46,290
see in the second line, ironically because it's not a standard we're using Babel to transform

00:21:46,290 --> 00:21:52,510
it into third lain for the browser. So this is actually really funny. But given those

00:21:52,510 --> 00:21:57,690
merge calls that could be nested. And that could be nested merge calls and really deep

00:21:57,690 --> 00:22:02,450
object structures you could have like whole function in the merge calls like we had a

00:22:02,450 --> 00:22:08,010
module that pulled in another module and then merged new functions on to that module. This

00:22:08,010 --> 00:22:14,620
is impossible to deal with in reg "X,"just cannot be done. And how do you form at the

00:22:14,620 --> 00:22:18,610
output, right? If we tonight have recast we don't know how to format what we're doing

00:22:18,610 --> 00:22:24,380
here. So, I ran this code it was no big deal, I got rid about a thousand caller of this

00:22:24,380 --> 00:22:30,860
function and four thousand callers of the other two modules. No one noticed I had to

00:22:30,860 --> 00:22:36,970
tell people afterwards. But it's gone and now everyone's using the same thing and hopefully

00:22:36,970 --> 00:22:55,350
will become a JavaScript standard. We have a call expression here. It has three properties

00:22:55,350 --> 00:23:03,840
(Gone) it has an identifier, I'm just going to show you what the output is going to look

00:23:03,840 --> 00:23:11,780
like. We need to parens as I showed you before. It's going to be something like A, object

00:23:11,780 --> 00:23:24,370
expressions be inlined. Two of them are spread properties and one of them is a spread property.

00:23:24,370 --> 00:23:32,140
All right. So we built this AST explorer and we're look can we put JS code into this and

00:23:32,140 --> 00:23:39,310
we did. Let me just so we got this live coding environment here, it's really cool. So the

00:23:39,310 --> 00:23:46,710
JS code API is basically you create a file and it export asfunction that you can then

00:23:46,710 --> 00:23:53,590
apply using a runner that runs in concurrently across your entire code base. It gives you

00:23:53,590 --> 00:23:58,360
the file, the source of the file and the API of the code shift here on‑line five I'm

00:23:58,360 --> 00:24:03,880
mapping it to J, J does everything for us, writing it quite often that's why it's a short

00:24:03,880 --> 00:24:09,630
one character identifier, we just pass the thing into J and gives us this cool object,

00:24:09,630 --> 00:24:16,580
it's magical you should read the documentation (It's magical) this is the standard transform,

00:24:16,580 --> 00:24:22,590
we find all the identifiers and we update them. What we do is we just ‑‑ reverse

00:24:22,590 --> 00:24:27,760
the identifier. This is not a useful transform unless you wrote the code originally right

00:24:27,760 --> 00:24:40,230
to left. Any way cool thing is we can live code here. If you're feeling German you cupper

00:24:40,230 --> 00:24:44,980
case all of your code and it will still work, which is awesome. These not very useful for

00:24:44,980 --> 00:24:52,860
us. So we realized up there we need to operate on call expressions, so this is a call expression.

00:24:52,860 --> 00:24:59,620
And then it doesn't work. It's just the name is actually call.name, ‑‑ calllee.name,

00:24:59,620 --> 00:25:05,100
now there's only merge, we don't want that. So we want to replace it with an object expression,

00:25:05,100 --> 00:25:10,560
that's what we saw before, and that we noticed that takes an array. All right, that's cool,

00:25:10,560 --> 00:25:15,730
it doesn't really do a lot, but we replaced all the personal calls with object expression.

00:25:15,730 --> 00:25:22,400
The problem is, this is not merge, and it's also replaced. We don't want that. So this

00:25:22,400 --> 00:25:35,660
gives us the ability to actually do pattern matching here. All right, so now we're only

00:25:35,660 --> 00:25:41,440
actually updating all the merge calls, and then here, what we can do is, we map over

00:25:41,440 --> 00:25:49,840
all the arguments so we have DST note here. Then we have the arguments and then we return

00:25:49,840 --> 00:25:59,540
a spread property with the argument. And boom, we're done. Let me just format this, whatever.

00:25:59,540 --> 00:26:03,840
Okay, but this is not what we wanted, all right, we wanted to align the object, let's

00:26:03,840 --> 00:26:09,150
look for the type here, object expression, and then return all the properties of this

00:26:09,150 --> 00:26:13,880
argument. Instead, all right, this doesn't work, we actually need to use this really

00:26:13,880 --> 00:26:21,960
awesome short version of ES2015 code with recursive flat implementation. And boom, now

00:26:21,960 --> 00:26:26,470
you can see that we successfully replaced that personal module. So this is actually

00:26:26,470 --> 00:26:41,630
just five lines of code. All right ( applause) and to me 24 was like learning a super power.

00:26:41,630 --> 00:26:50,630
When you learn how how to do this you can write Babel plug‑ins, ‑‑ so one more

00:26:50,630 --> 00:26:56,040
thing, JavaScript now has a class creation mechanism that we're supporting in React,

00:26:56,040 --> 00:27:02,780
I figured we can transform React.create class with a codemod, superintendent that fun? I

00:27:02,780 --> 00:27:09,840
built a codemod can automatically do this, if you look at the example, inlines it into

00:27:09,840 --> 00:27:14,620
the new con instructor, it removes this access and props because it's now local variable,

00:27:14,620 --> 00:27:19,750
it does a lot of stuff. It also adds the prop types later on. But, I talked a little bit

00:27:19,750 --> 00:27:24,630
about this, we the a demo, just like a tiny little sample code, that's not really fun,

00:27:24,630 --> 00:27:33,380
you know. I found this project on get hundred that's did he recall UI for React. Now let's

00:27:33,380 --> 00:27:37,930
run this thing. Takes a little while, can I wants over all the mix‑ins because we

00:27:37,930 --> 00:27:41,160
don't have a good solution for that, but you can build your own codemods to get rid of

00:27:41,160 --> 00:27:48,550
them if you use them a lot. Takes a little while. Tested it yesterday, I'm 200 percent

00:27:48,550 --> 00:27:54,320
sure it works really well. Now we're done it used all the cores of my MacBook and transferred

00:27:54,320 --> 00:28:16,970
all the files, yeah, looks about right. Nope ... can we send a pull request. Do I have

00:28:16,970 --> 00:28:39,350
internet? I should probably push it. All right. Where is it had are? Button is not working,

00:28:39,350 --> 00:29:04,060
all right, here it is. All right (Applause) there it is. This was fun (Laughing) that

00:29:04,060 --> 00:29:10,950
was 845 files and probably 5‑10,000 lines of code. If anyone asks I didn't touch the

00:29:10,950 --> 00:29:17,310
code, I just wrote the JavaScript that wrote the JavaScript, so my favorite editor is JavaScript.

00:29:17,310 --> 00:29:23,160
But sometimes you cannot fix something automatically, not possible, we tonight have all the tools

00:29:23,160 --> 00:29:28,850
yet. What I found at Facebook is that you can bribe really well with t‑shirts. So

00:29:28,850 --> 00:29:35,660
at Facebook we have been using an early draft of ES2015 classes for two and half years.

00:29:35,660 --> 00:29:40,780
It allowed every edge near at the company to move way faster that they could have using

00:29:40,780 --> 00:29:47,200
ES 5 features. You have to consider that a lot of engineers at Facebook didn't grow up

00:29:47,200 --> 00:29:52,640
with JavaScript in their heart like all of us here did. You know. The problem with our

00:29:52,640 --> 00:30:00,160
implementation of classes was that we didn't require soup erto be called in a child class

00:30:00,160 --> 00:30:05,720
something that's required in ES2015. We had about a thousand invalid callers, how did

00:30:05,720 --> 00:30:13,610
I detect them I wrote a codemod script to detect the code. We were able to fix about600

00:30:13,610 --> 00:30:17,610
of them automatically because they the president have interesting parent con instructors, four

00:30:17,610 --> 00:30:22,460
hundred we had to fix manually. We do hack tons everyone at Facebook, promised everyone

00:30:22,460 --> 00:30:35,380
a t‑shirts, we had 400 call sites per person. And we did it. Everyone got a T‑shirt, we

00:30:35,380 --> 00:30:40,350
high fived each other, it was great. But the whole point of this is that I want to point

00:30:40,350 --> 00:30:45,230
out that codemods are not ‑‑ they're not going to solve all your problems but they're

00:30:45,230 --> 00:30:53,800
really useful and assist you when you do manual clean ups. what's the impact on Open Source.

00:30:53,800 --> 00:30:59,350
It's important how we approach Open Source at Facebook. We only Open Source what we use

00:30:59,350 --> 00:31:06,100
in production and add scale. The React team they're responsible for deploying new versions

00:31:06,100 --> 00:31:13,080
of React inturnly on ever respousetory, they're responsible for making sure that we move to

00:31:13,080 --> 00:31:19,120
new APIs as fast as possible. And they're making sure that we move fast even with breaking

00:31:19,120 --> 00:31:27,690
changes. But we always use master. If master is broken Facebook is broken. So this should

00:31:27,690 --> 00:31:31,400
explain why we have invest in the this kind of code tooling, we have a lot of React code

00:31:31,400 --> 00:31:36,140
. But the tooling is influenced how we approach

00:31:36,140 --> 00:31:40,470
Open Source code, if you have looked at recent release notes of React native or React, you

00:31:40,470 --> 00:31:46,320
see that we actually published codes mods for React and React DOM political up in 0.14

00:31:46,320 --> 00:31:50,080
you can run a script if you have a large code base and it will be fixed auto3459ically for

00:31:50,080 --> 00:31:56,570
you. 24 is great. When we make breaking changes and we can write you a script and up grayeds

00:31:56,570 --> 00:32:04,030
your code automatically when you update your version of React, the whole community wins.

00:32:04,030 --> 00:32:07,640
And people have been really happy with this. This person found this tool and in less than

00:32:07,640 --> 00:32:12,530
two hours he safely transformed thousands of lines of code, this is outside of opinion,

00:32:12,530 --> 00:32:19,230
it's really cool. What I found about this is that I recently rap a codemod on every

00:32:19,230 --> 00:32:24,710
test file at Facebook. And a day later after I made the changes I wanted to figure out

00:32:24,710 --> 00:32:30,460
how many lines of code did I change. It was 40,000 lines of code, I didn't notice that

00:32:30,460 --> 00:32:36,510
when I was doing the change, no problems, all the tests are still running, everything's

00:32:36,510 --> 00:32:45,460
great. One more tiny little thing, I'm sorry we're a little bit over. Then Abramov was

00:32:45,460 --> 00:32:52,720
asking for an on‑line babble editor, I was like didn't I show you the same thing with

00:32:52,720 --> 00:33:04,370
JS code shift. Do you want to see that really quick? All right, this only takes ten seconds,

00:33:04,370 --> 00:33:11,060
I promise. So here we just go into Babel. And then what we're going to do is Translate

00:33:11,060 --> 00:33:17,440
our Babel script to German, because that's fun. That's it. Thank you so much for listening.

00:33:17,440 --> 00:33:17,940
(Applause) wow, that was awesome. Thank you so much. So we're just going to do a very

00:33:17,940 --> 00:33:18,050
quick scene change here and bring up Thomas who's got probably the better GitHub user

00:33:18,050 --> 00:33:18,170
names, it's Watson and he's ‑‑ come on up, get set up, man. In the time honored tradition

00:33:18,170 --> 00:33:18,300
of writing lots and lots NPM modules you can see Thomas has written such hits as bay 64

00:33:18,300 --> 00:33:18,410
and coding things as Emoji. Enabling the T‑Cup protocol. On HTTP servers. While you guys

00:33:18,410 --> 00:33:18,470

YouTube URL: https://www.youtube.com/watch?v=d0pOgY8__JM


