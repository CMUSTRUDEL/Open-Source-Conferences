Title: Artur Janc: Security in the world of JS frameworks | JSConf EU 2015
Publication date: 2015-10-22
Playlist: JSConf EU 2015
Description: 
	In the recent years high-level frameworks have become the de facto standard for writing client-side webapp code. Angular, Polymer, or Dart all provide extremely useful abstractions for building applications, but also indirectly expose rough edges of the web platform which often lead to vulnerabilities (e.g. XSS).

In my talk I will provide a security engineer’s perspective on some of the common pitfalls which tend to affect code written using such frameworks based on real examples of bugs in Google apps. I will also explain why security reviews of such apps are often more difficult to conduct than those of “bare metal” JS code, what could be done to fix this, and why framework designers should care about it.

Intro music by @halfbyte
Captions: 
	00:00:20,640 --> 00:00:28,039
All right, hi everyone, my name is Artur, I work on the Google security team as an engineer

00:00:28,039 --> 00:00:32,800
and what my team does is we try to make sure that we don't have security vulnerabilities

00:00:32,800 --> 00:00:38,610
in our products, as you might know Google has a lot of web application, web-apps are

00:00:38,610 --> 00:00:47,660
a big part of our world and we work with external researchers that get paid for findings vulnerabilities

00:00:47,660 --> 00:00:50,930
in our products when we miss something.

00:00:50,930 --> 00:00:56,870
This puts us in a position where we find out a lot about new patterns and flaws that can

00:00:56,870 --> 00:01:02,609
affect the security of our web applications, because a lot of are web-apps are built using

00:01:02,609 --> 00:01:09,130
open sources frameworks like angular and other ones, we learn about patterns that can affect

00:01:09,130 --> 00:01:18,220
security and your web-apps possibly as well, right after we update code we often get new

00:01:18,220 --> 00:01:20,759
data about some security flaws.

00:01:20,759 --> 00:01:27,820
My hope for this talk is to share some of this with you and I'm very, I'm very happy

00:01:27,820 --> 00:01:32,659
that Anand Vemuri hopefully already scared you a little bit when it comes to security

00:01:32,659 --> 00:01:39,140
and the impact of cross-site scripting, so I my intent is to build up on this a little

00:01:39,140 --> 00:01:43,280
bit and show you some angular-specific examples.

00:01:43,280 --> 00:01:48,090
Before I start, can you guys raise your hand if you know what angular is or if you have

00:01:48,090 --> 00:01:52,450
written angular code in the past - ok, this is music to my ears.

00:01:52,450 --> 00:01:56,149
Ok, so let's get started.

00:01:56,149 --> 00:02:01,560
This is a security talk, this is JSConf so I will not tell you anything about securing

00:02:01,560 --> 00:02:06,899
your database, or your back up systems, so not going to talk about server security at

00:02:06,899 --> 00:02:11,530
all, we're going to talk about client security and client security here is making sure that

00:02:11,530 --> 00:02:18,480
the users of your web applications don't get, cannot get compromised or attacked by evil

00:02:18,480 --> 00:02:20,210
websites or networks.

00:02:20,210 --> 00:02:25,320
Client security is a fairly broad area as well and, you know, if you want to have a

00:02:25,320 --> 00:02:29,819
secure website you should have HTTPS and prevent a bunch of other things, but we're not going

00:02:29,819 --> 00:02:38,250
to talk about that in general either, I will focus on the biggest threat that is sort of,

00:02:38,250 --> 00:02:46,980
as an industry or web application developers we have been facing since web-apps have existed.

00:02:46,980 --> 00:02:53,540
I know this is a subjective view but, at least at Google this is something that we are super

00:02:53,540 --> 00:02:54,909
concerned about.

00:02:54,909 --> 00:02:57,540
So, cross-site scripting.

00:02:57,540 --> 00:03:01,730
Also the other thing is that for the other flaws, the other common things that we are

00:03:01,730 --> 00:03:06,930
worried about in web applications we have relatively a good way of preventing them,

00:03:06,930 --> 00:03:13,410
it might not be super straightforward, but if you want to prevent eavesdroppers getting

00:03:13,410 --> 00:03:25,120
access to your users' data in your web app, you can deploy HTTPS and security engineers

00:03:25,120 --> 00:03:26,980
will tell you what to do, it will be ok.

00:03:26,980 --> 00:03:34,239
For cross-site scripting it's not usually that simple, there are no panaceas that will

00:03:34,239 --> 00:03:39,750
prevent your developers from introducing cross-site scripting bugs.

00:03:39,750 --> 00:03:49,810
If you have been here for Anand Vemuri's talk, most of you have, this is cross-site scripting,

00:03:49,810 --> 00:03:56,080
cross-site scripting got introduced if you have a HTTP parameter that you output to your

00:03:56,080 --> 00:04:01,930
page without any escape, right, so you have a script, you have a get parameter, you write

00:04:01,930 --> 00:04:11,330
it out and then what an evil website can do, they can point to that URL and make your user

00:04:11,330 --> 00:04:12,690
execute an evil script.

00:04:12,690 --> 00:04:18,959
One example of an evil script was something that Anand Vemuri showed, basically someone

00:04:18,959 --> 00:04:25,360
gave a webcam permissions to your website, they can transparently enable it and sort

00:04:25,360 --> 00:04:26,771
of spy on your users, but it

00:04:26,771 --> 00:04:29,680
goes much beyond that actually.

00:04:29,680 --> 00:04:34,780
So what the evil code can do once it's injected into your origin, your domain, it has full

00:04:34,780 --> 00:04:41,760
access to everything your user can do in the web app, if you think of rich ecosystems of

00:04:41,760 --> 00:04:49,110
application, such as any major provider, Google, Facebook, Twitter, most of your apps, the

00:04:49,110 --> 00:04:55,230
HorseDrawingTycoon app that Curtis will talk about in the next session, if you are an,

00:04:55,230 --> 00:05:00,210
attacker and can inject evil code you can get access to everything a web application

00:05:00,210 --> 00:05:06,849
has and you can attack other apps that live in the same domain as a cross-site scripting

00:05:06,849 --> 00:05:09,599
bug.

00:05:09,599 --> 00:05:18,899
We worry about the fact you can persist your access as an attacker after you exploit cross-site

00:05:18,899 --> 00:05:22,190
scripting for a given user.

00:05:22,190 --> 00:05:29,040
What this means, even two months later, even after the developer closes the cross-site

00:05:29,040 --> 00:05:35,279
scripting vulnerability the attacker might still be able to retain some access to the

00:05:35,279 --> 00:05:36,860
web app, so that is super scary.

00:05:36,860 --> 00:05:45,110
So, but you know, the good thing is that traditionally as JavaScript developers we did not have to

00:05:45,110 --> 00:05:54,500
worry too much about, you know, the various ways in which you can introduce XSS into the

00:05:54,500 --> 00:06:00,130
web-apps, when you purely write JavaScript code there are only a few APIs that might

00:06:00,130 --> 00:06:06,570
be able to, that could lead to cross-site scripting, so things like setting inner HTML,

00:06:06,570 --> 00:06:18,370
document.write, when you set HTML, when you set JavaScript URIs on window open navigation

00:06:18,370 --> 00:06:24,560
and so on, maybe five years ago if you kept all of those in mind when you were writing

00:06:24,560 --> 00:06:35,120
your JavaScript code, you would be safe from say 95% of the bugs that would otherwise introduced,

00:06:35,120 --> 00:06:39,580
be careful with all the APIs.

00:06:39,580 --> 00:06:45,450
The thing that is different these days, we don't really write web applications that use

00:06:45,450 --> 00:06:54,050
those primatives directly, it's fairly rare, stuff like that rarely happens, it's rare

00:06:54,050 --> 00:07:00,370
for modern well designed web application to use document.write, there are circumstances

00:07:00,370 --> 00:07:03,710
where you might have to do that, but it's not that common.

00:07:03,710 --> 00:07:09,070
The reason that's the case, there are many new frameworks and many new APIs that were

00:07:09,070 --> 00:07:14,570
introduced to make our lives easier, as part of the big web frameworks, so we don't have

00:07:14,570 --> 00:07:27,550
to use the bare metal - it does make our life easier, it makes it easier to use the APIs

00:07:27,550 --> 00:07:33,200
without really understanding, if you have a framework that wraps around one of these

00:07:33,200 --> 00:07:39,360
functions then you are still vulnerable to the same class of issues, but even though

00:07:39,360 --> 00:07:44,370
you have not written code that uses the dangerous API directly.

00:07:44,370 --> 00:07:50,589
So, one of the things that has been, one of the frameworks that has become fairly popular

00:07:50,589 --> 00:07:57,200
recently has been angular, to be honest I'm sure that almost all of you know way more

00:07:57,200 --> 00:08:03,390
about angular than I do, I'm not an angular developer or Evangelist for that matter, I'm

00:08:03,390 --> 00:08:10,719
a security engineer, I know enough to break angular apps but not enough to build with

00:08:10,719 --> 00:08:17,010
angular, but that's ok, hopefully if you don't know too much about angular, I will show you

00:08:17,010 --> 00:08:21,469
the bare things you need to understand, code examples that we will talk about.

00:08:21,469 --> 00:08:29,180
Angular is pretty popular, just in case you forgot all about angular in the ten minutes

00:08:29,180 --> 00:08:34,070
since I asked you if you know angular, this is how it works, three short steps.

00:08:34,070 --> 00:08:40,550
You include the angular JavaScript somewhere on your page, then you write something that

00:08:40,550 --> 00:08:48,120
looks like HTML, sort of, so, you know, you write mark-up and you also have these ng-attributes

00:08:48,120 --> 00:08:55,660
that allow your application to do the angular magic, right, you can have loops, you can

00:08:55,660 --> 00:09:03,240
have, you know, data-bindings, the must have syntax that will be important in a few

00:09:03,240 --> 00:09:14,650
minutes, it's not specific to angular, it's one of the big users of moustache syntax,

00:09:14,650 --> 00:09:24,890
the last thing is to behind the JavaScript that you write for your controller, to the

00:09:24,890 --> 00:09:33,750
appropriate DOM element that has all the bindings and angular syntax, right, it's fairly straightforward

00:09:33,750 --> 00:09:39,310
conceptually it allows really powerful, really cool web applications to be built.

00:09:39,310 --> 00:09:46,090
There is a lot of APIs, the template syntax is very rich, you can do a lot with that,

00:09:46,090 --> 00:09:53,100
there is components, a lot of APIs for requesting data from the server and you know, really

00:09:53,100 --> 00:09:56,440
lots of cool stuff you can look at examples, it's great.

00:09:56,440 --> 00:10:02,720
All right, so, you know, I've set it up a little bit, you know angular, you know this

00:10:02,720 --> 00:10:07,660
is an security talk, so what, what's the deal?

00:10:07,660 --> 00:10:14,990
So, when you start using these frameworks there are a lot of things that might look

00:10:14,990 --> 00:10:20,670
to be, might seem to be very safe, but actually when you, when you sort of look more closely

00:10:20,670 --> 00:10:23,050
turns out there are subtle issues there.

00:10:23,050 --> 00:10:28,090
So, the first issue that we have actually run into several times in several of our applications

00:10:28,090 --> 00:10:35,160
is what happens if you mix angular and surfer-side template systems, so I hope that most if you,

00:10:35,160 --> 00:10:39,550
when you generate mark-up on the server are using a templatetime, as Anand Vemuri was

00:10:39,550 --> 00:10:43,470
saying earlier, this is something that gives you context escaping so you don't have to

00:10:43,470 --> 00:10:53,410
do it manually because you need different types of escaping, the template server will

00:10:53,410 --> 00:10:55,670
take care of all of that for you.

00:10:55,670 --> 00:11:03,390
In the past you would have a template, you would render it and even if you had evil inputs

00:11:03,390 --> 00:11:10,300
to your application, the template system would, by default, just escape it, properly for the

00:11:10,300 --> 00:11:15,330
context, at least if you are using a good template system and most, most reasonable,

00:11:15,330 --> 00:11:18,450
modern frameworks use those and you are fine.

00:11:18,450 --> 00:11:21,550
So, ok, so what this problem really?

00:11:21,550 --> 00:11:26,530
So this is what happens when you, when you use a template system on the server-side and

00:11:26,530 --> 00:11:28,740
angular.

00:11:28,740 --> 00:11:33,340
The only difference here is that we have included some angular elements in are template right,

00:11:33,340 --> 00:11:43,600
we have the ng-app, but what happens is and this is in the bottom code box, that the template

00:11:43,600 --> 00:11:50,810
system will escape all your HTML meta characters, you can't just inject HTML but your server-side

00:11:50,810 --> 00:12:01,470
system knows much about the moustache system, you if you allow this kind of output, angular

00:12:01,470 --> 00:12:08,470
when it processes the page after it loads it will do it's magic, try to find directives

00:12:08,470 --> 00:12:13,570
in the angular controlled DOM element and it will execute them.

00:12:13,570 --> 00:12:18,170
What this means is that as an attacker you might not be able to inject straight up mark-up,

00:12:18,170 --> 00:12:26,850
but you can use angular data bindings, execute arbitrary angular controller functions so

00:12:26,850 --> 00:12:34,160
basically do anything that is defined in your angular controllers and also the sort of really

00:12:34,160 --> 00:12:40,870
big thing that, that is not often talked about, is that it's possible to escape out of the

00:12:40,870 --> 00:12:54,779
angular box, and once you can inject the moustache since tax - if you go to the angular security

00:12:54,779 --> 00:13:00,110
page they will tell you, you should not mix client side and server-side templates, it

00:13:00,110 --> 00:13:08,520
can lead to the interesting interactions between the two, that will, that will - that can possibly

00:13:08,520 --> 00:13:09,900
make your app vulnerable.

00:13:09,900 --> 00:13:15,470
There are good reasons to do this, if you retrofit angular into existing web applications

00:13:15,470 --> 00:13:23,180
that are often generated alongside server-side templates then you will have these issues.

00:13:23,180 --> 00:13:27,970
Also if you want to pre-populate part of your page with data the server knows about and

00:13:27,970 --> 00:13:34,770
you want to avoid a separate call back to get this data, it's sort of natural to do

00:13:34,770 --> 00:13:40,450
this, it's one pattern that is surprisingly interesting.

00:13:40,450 --> 00:13:47,720
Ok so let's say we go about this, we create our Angular part of the page statically we

00:13:47,720 --> 00:13:54,970
don't have any server-side template generation we just have a very simple application here,

00:13:54,970 --> 00:14:02,690
which has just one image and alt tag and displays the fav icon.

00:14:02,690 --> 00:14:08,470
We have a controller, the controller has a dangerous function but we're not executing

00:14:08,470 --> 00:14:12,819
it so everything is fine, nothing to worry about here.

00:14:12,819 --> 00:14:20,680
So what happens if before we run Angular on the page, we insert and we run another completely

00:14:20,680 --> 00:14:27,180
innocuous JavaScript function, what this function is doing is finding all the image elements

00:14:27,180 --> 00:14:34,779
on the page, and it's adding an alt attribute to every image it's probably a really crappy

00:14:34,779 --> 00:14:41,320
use of the alt attribute you should never do this but we're just adding some data image

00:14:41,320 --> 00:14:42,660
from our site.

00:14:42,660 --> 00:14:47,470
When the location is something that is controlled in part by the user because you can open any

00:14:47,470 --> 00:14:53,770
web page with location.hash, the URL fragment at the end is something that the user controls

00:14:53,770 --> 00:15:01,279
but the alt tag, the alt attribute it's not async, it's normally if you do this nothing

00:15:01,279 --> 00:15:02,279
bad will happen.

00:15:02,279 --> 00:15:09,330
If you insert a script tag or HTML markup it will not render it's just like a bit of

00:15:09,330 --> 00:15:17,020
text, but what happens here when this interaction appears, is before Angular is invoked after

00:15:17,020 --> 00:15:23,170
our function runs, we will suddenly have this bit of DOM where you have an alt attribute

00:15:23,170 --> 00:15:33,589
which data so assuming that the attacker injected a bit of Angular markup in the URL what Angular

00:15:33,589 --> 00:15:38,360
sees when it tries to parse the page is an alt attribute with a data binding.

00:15:38,360 --> 00:15:44,380
It will look at it think ok well now there is something for me I will execute it.

00:15:44,380 --> 00:15:53,230
Again as an attacker, you are able to inject arbitrary JavaScript and compromise the application.

00:15:53,230 --> 00:15:58,680
So this is another example of an interaction where before everything would have been safe,

00:15:58,680 --> 00:16:03,810
but because you are using a client side powerful framework you start having problems.

00:16:03,810 --> 00:16:08,440
All right, so let me give you another example.

00:16:08,440 --> 00:16:14,310
So one of the most powerful features of Angular and other similar framework Ss are in includes

00:16:14,310 --> 00:16:23,510
where you don't have to have all your HTML syntax inline but you can include sub templates

00:16:23,510 --> 00:16:28,820
and these templates will be rendered as part of your application so it's really great.

00:16:28,820 --> 00:16:35,480
It allows angular to fetch a little bit of markup anywhere from the server, render it

00:16:35,480 --> 00:16:40,190
in it's super useful.

00:16:40,190 --> 00:16:46,440
So in here what we're doing is we have this NG, including that is based on the scope of

00:16:46,440 --> 00:16:52,740
the controller so when we set the template URL variable we're saying this is just a pass

00:16:52,740 --> 00:16:56,399
to an HTML file on our server.

00:16:56,399 --> 00:17:01,530
So again nothing to worry about it's fine the user language is controlled, by the user

00:17:01,530 --> 00:17:05,179
possibly but it doesn't seem like there's anything super wrong here.

00:17:05,179 --> 00:17:06,179
Right?

00:17:06,179 --> 00:17:10,579
Well hopefully by now you know that all the examples are tricky, yes there is something

00:17:10,579 --> 00:17:14,600
wrong and there is something bad that can happen in this application.

00:17:14,600 --> 00:17:22,740
So if the user can control this variable, part of the URL from which Angular loads the

00:17:22,740 --> 00:17:30,900
template what they can do is they can add and this is actually very reminiscent of old

00:17:30,900 --> 00:17:38,470
server where you have directory reversal you are sometimes on the server able to read files

00:17:38,470 --> 00:17:40,670
from different directories than you would expect.

00:17:40,670 --> 00:17:43,520
Here is the same but it's on the client.

00:17:43,520 --> 00:17:45,920
So when this sort of

00:17:45,920 --> 00:17:54,380
evil language variable is embedded as part of the include value, what will happen is

00:17:54,380 --> 00:18:02,670
that this URL is no longer pointing to/angular templates/something it can point to a URL

00:18:02,670 --> 00:18:09,340
on your website that redirects to a completely external site that might be controlled by

00:18:09,340 --> 00:18:10,890
the user.

00:18:10,890 --> 00:18:20,010
Because under the hood what Angular is doing is XML HTTP request if it replies with all

00:18:20,010 --> 00:18:26,270
the cross origin headers the data that the attacker supplies will now be include as part

00:18:26,270 --> 00:18:32,490
of our application that can contain HTML and arbitrary scripts.

00:18:32,490 --> 00:18:38,809
Something that I should mention here is that Angular does have a mechanism that will, that

00:18:38,809 --> 00:18:45,150
by default prevent this from happening, but Angular also considers anything under your

00:18:45,150 --> 00:18:48,160
domain to be a trusted resource.

00:18:48,160 --> 00:18:54,870
So to angular this URL/angular/templates, this looks like a trusted resource, it points

00:18:54,870 --> 00:19:01,400
to your web server it has no easy way of knowing that eventually if the browser follows all

00:19:01,400 --> 00:19:05,330
the redirects this can contain untrusted data.

00:19:05,330 --> 00:19:12,550
So by default if you use those kind of patterns, your application will be vulnerable.

00:19:12,550 --> 00:19:14,640
So another example.

00:19:14,640 --> 00:19:23,630
So, let's say that just hypothetically you have a HorseDrawingTycoon application, and

00:19:23,630 --> 00:19:33,100
you use JCP in that, complete hypothetical HorseDrawingTycoon I am sure most of you are

00:19:33,100 --> 00:19:42,300
familiar with JSONP, I am not sure why it's called JSON, it doesn't look like padding

00:19:42,300 --> 00:19:46,850
to me that's what it's called four few years I guess the name stuck.

00:19:46,850 --> 00:19:58,530
It's how you JSONP in angular there's a convenience rapper for JSONP, you can call a HTTP object,

00:19:58,530 --> 00:20:05,840
what happens is the URL you pass to this function will be used as a script source if you think

00:20:05,840 --> 00:20:13,000
about what that means you will not manually ever write JavaScript code that says create

00:20:13,000 --> 00:20:18,970
a document, create element script then as a source assign evil.com to it, but when you

00:20:18,970 --> 00:20:27,520
use the JSONP API in a way that's is commonly used especially for restful APIs, you say

00:20:27,520 --> 00:20:38,400
I want to load JSONP from my server, /app then there is something that is potentially

00:20:38,400 --> 00:20:39,640
controlled by the user.

00:20:39,640 --> 00:20:48,490
A name of your object, or an identifier of your object, and if you create a URL like

00:20:48,490 --> 00:20:57,620
this, it's the same kind of pattern that we just saw with the NG include example.

00:20:57,620 --> 00:21:09,040
Basically if as part of the URL you have, ./you will fetch an open re-direct or from

00:21:09,040 --> 00:21:10,530
an evil site.

00:21:10,530 --> 00:21:17,730
Again now the evil application cannot respond with HTML but it can respond with an evil

00:21:17,730 --> 00:21:19,880
straight up JavaScript.

00:21:19,880 --> 00:21:27,870
So maybe the JSONP API is not that common but what is really common in angular applications

00:21:27,870 --> 00:21:34,640
is the HTTP get API, any time you want to retrieve something from your server or any

00:21:34,640 --> 00:21:40,309
external resource you use HTTP get.

00:21:40,309 --> 00:21:47,429
If you just want to load say JSON, not JSONP but JSON or any other thing you generate from

00:21:47,429 --> 00:21:53,530
the server you will have a very similar issue.

00:21:53,530 --> 00:21:57,510
So this is actually a very common pattern we see.

00:21:57,510 --> 00:22:04,450
By itself if you just use HTTP get on a potentially external untrusted resource it's not terrible

00:22:04,450 --> 00:22:09,320
because what will end up happening is that you will issue an XML HTTP request your application

00:22:09,320 --> 00:22:15,030
will get the data but if it discards is or does nothing with it you will be safe because

00:22:15,030 --> 00:22:20,250
the data just by calling HTTP get you are not doing anything that’s super scary but

00:22:20,250 --> 00:22:27,890
what actually happens is that the data that you obtain from the server, is used for something

00:22:27,890 --> 00:22:30,360
later, like generating parts of the page.

00:22:30,360 --> 00:22:37,160
So in here if we call inner HTML we assign inner HTML us any of the data we have got

00:22:37,160 --> 00:22:42,820
from what we think is our server about it's actually an attacker called response.

00:22:42,820 --> 00:22:47,640
We will again have a problem because inner HTML is a DOM sync, then we have a bug.

00:22:47,640 --> 00:22:55,860
I’m sure you are thinking about what I said before which is no-one really writes code

00:22:55,860 --> 00:22:58,670
that uses inner HTML directly anymore, so this is

00:22:58,670 --> 00:23:00,400
sort of a fake example right?

00:23:00,400 --> 00:23:06,250
Yes it's a fake example, but what ends up happening much more common in practice, is

00:23:06,250 --> 00:23:14,210
that rather than using inner HTML directly what you end up doing is instead of using

00:23:14,210 --> 00:23:21,391
inner HTML you use some of the jQ lite rappers that let you create part of the DOM your JQ

00:23:21,391 --> 00:23:35,040
lite is a sub-set you just get some of these convenience methods eye HTML, append and others,

00:23:35,040 --> 00:23:44,309
and in here if you get the data from the attacker and then you call append, this is sort of

00:23:44,309 --> 00:23:50,470
in visibly wraps round the inner HTML DOM sync, and you might have a problem.

00:23:50,470 --> 00:23:58,030
So in the past, if I were a security engineer, reviewing the code of a JavaScript application,

00:23:58,030 --> 00:24:03,309
I would grab for an inner HTML, crap for a bunch of these other patterns, but in here

00:24:03,309 --> 00:24:09,340
we have angular and any other framework like that injecting their own wrappers that do

00:24:09,340 --> 00:24:14,640
the same thing but are sort of hard for both the security engineer and the developer writing

00:24:14,640 --> 00:24:18,340
the code to understand, that they are potentially dangerous.

00:24:18,340 --> 00:24:25,620
There's no big list that you can Google and sort of know that these function calls are

00:24:25,620 --> 00:24:27,400
dangerous.

00:24:27,400 --> 00:24:33,799
So you just sort of have to keep that in mind.

00:24:33,799 --> 00:24:37,740
We're almost done, I just have a couple of things to show you that are maybe a little

00:24:37,740 --> 00:24:46,610
less used but also interesting from the sort of new way of doing things perspective.

00:24:46,610 --> 00:24:53,480
So angular and other frameworks give you direct access some of the interesting parsing functionality

00:24:53,480 --> 00:24:55,580
that the framework has to do.

00:24:55,580 --> 00:25:01,410
So rather than create a bit of HTML sort of statically then in invoking angular on it

00:25:01,410 --> 00:25:09,100
you can create a string on JavaScript then call interpolate and angular will do the same

00:25:09,100 --> 00:25:18,150
thing it would normally do on your page substitute data bindings, render HTML the same thing

00:25:18,150 --> 00:25:19,809
as compiling.

00:25:19,809 --> 00:25:24,710
If you parse any untrusted data to any of those function if you manually need to call

00:25:24,710 --> 00:25:31,830
them for some reason you will also have another cross-site scripting bug.

00:25:31,830 --> 00:25:36,980
The final example that I wanted to show you is something that Anand also mentioned earlier,

00:25:36,980 --> 00:25:44,730
and that is probably the most common thing that is like to happen in angular applications

00:25:44,730 --> 00:25:53,830
in the past if you wanted to render some HTML, that the potential lay has JavaScript attributes

00:25:53,830 --> 00:26:00,950
or things that might be dangerous in some way, but if you trust it you control all the

00:26:00,950 --> 00:26:09,570
input you can say ngbinding HTML safe it will be fine but this a dangerous API because any

00:26:09,570 --> 00:26:14,230
time you pass user controlled data to it you will have a bug.

00:26:14,230 --> 00:26:21,320
Now angular actually prevented this from happening in new versions, so now you just a have ngbindHTML

00:26:21,320 --> 00:26:27,799
which will by default sanitise all the markup you give the if you give it a script it will

00:26:27,799 --> 00:26:33,799
escape everything if you give it a bold tag it will keep it because it's knows it's safe.

00:26:33,799 --> 00:26:40,700
There's a whole family of functions that let you trust bits of data as HTML, basically

00:26:40,700 --> 00:26:45,990
tell angular this fine don't worry about it don't escape it I have checked it's correct.

00:26:45,990 --> 00:26:53,170
This tends to be used improperly as scary with scary frequency.

00:26:53,170 --> 00:26:56,580
All right, ok.

00:26:56,580 --> 00:27:00,410
So, like what's the point of all this?

00:27:00,410 --> 00:27:04,980
What I thought initially as I was working on this talk I thought ok I will try to scare

00:27:04,980 --> 00:27:10,870
you a little bit, and then I will give you solutions for all these things because why

00:27:10,870 --> 00:27:11,870
wouldn't

00:27:11,870 --> 00:27:12,870
I?

00:27:12,870 --> 00:27:16,630
I don't want to be a jerk I want to tell you how to write secure code, but in the end I

00:27:16,630 --> 00:27:21,700
decided I will probably be a little bit of a jerk and not tell you how to fix it and

00:27:21,700 --> 00:27:26,280
the reason is that even if I told you how to address all these patterns, that that we

00:27:26,280 --> 00:27:35,620
saw on the previous slides it would not comprehensively cover all of the sharp edges of the framework

00:27:35,620 --> 00:27:37,559
that you might need to be concerned about.

00:27:37,559 --> 00:27:41,470
So you would come out of this room thinking ok I know everything there is to know about

00:27:41,470 --> 00:27:47,220
angular security I will avoid these thing it will be fine, but in practice it's not

00:27:47,220 --> 00:27:51,190
like that because first of all angular is just one of many frameworks and second of

00:27:51,190 --> 00:27:55,460
all, there are many other things in angular that we don't yet know about the framework

00:27:55,460 --> 00:28:01,680
changes, so instead of giving you specific recipes or patterns for how to avoid it I

00:28:01,680 --> 00:28:05,420
will ask you to do 3 things, sort of to keep in mind at a high level.

00:28:05,420 --> 00:28:07,260
First of all, read the box.

00:28:07,260 --> 00:28:12,970
I know as developers we often want to get things running there's a lot of pressures,

00:28:12,970 --> 00:28:17,679
but if you want to have a secure application, usually what will really had is read the docks

00:28:17,679 --> 00:28:23,460
from your framework they will tell you what you have to keep in mind or what you have

00:28:23,460 --> 00:28:24,740
to worry about.

00:28:24,740 --> 00:28:30,370
The second thing is talk to security people, either in person or on Twitter, ask them I’m

00:28:30,370 --> 00:28:34,440
using angular what should I be worried about.

00:28:34,440 --> 00:28:41,950
Because they, we as security folks get super excited about these minute that led to thee

00:28:41,950 --> 00:28:48,840
problems if you want to talk to me later I am super happy to do it I love to do it.

00:28:48,840 --> 00:28:49,840
That's second thing.

00:28:49,840 --> 00:28:56,559
The third thing I want to leave you with is I wanted to show you that these kind of things

00:28:56,559 --> 00:29:04,360
can be, that interactions between these components and the ways in which you can use new frameworks

00:29:04,360 --> 00:29:11,980
are super cool exciting and it's fun to think about it, and it's fun to break your on applications.

00:29:11,980 --> 00:29:15,710
Next time you write code like this think about whether it could possibly be vulnerable to

00:29:15,710 --> 00:29:19,840
one of the things I showed and overall this is just super fun.

00:29:19,840 --> 00:29:25,679
I think it's almost as fun as HorseDrawingTycoon kind of game.

00:29:25,679 --> 00:29:30,950
With this I will leave it to Curtis who has the next presentation about something that

00:29:30,950 --> 00:29:32,250
I am sure you will not guess what it is.

00:29:32,250 --> 00:29:32,270

YouTube URL: https://www.youtube.com/watch?v=4Qs5mqa4ioU


