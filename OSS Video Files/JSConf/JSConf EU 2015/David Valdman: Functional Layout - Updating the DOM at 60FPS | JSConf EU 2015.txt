Title: David Valdman: Functional Layout - Updating the DOM at 60FPS | JSConf EU 2015
Publication date: 2015-10-14
Playlist: JSConf EU 2015
Description: 
	We present a functional take on front-end data-binding. MVC, MVP, MVVM, just the V – there are many useful architectures for data binding when data changes in discrete chunks. For data that changes continuously in time (animations, gesture controlled UI, responsive layout, etc), these are not the best tools. By treating continuously changing layout data in a functional way, and updating discrete changes to a model’s data in an MV* way, we can split the data-binding problem into two cleanly separated problems. In so doing we make all our tools better at what they do best.

Intro music by @halfbyte
Captions: 
	00:00:21,460 --> 00:00:30,300
The talk is going to be related the monadic functional reactive programming stuff, I won't

00:00:30,300 --> 00:00:35,790
mention any of those words by name, if you weren't paying attention, that's fine.

00:00:35,790 --> 00:00:42,180
Also, I'm badelling a cold right now, but luckily I have your country's medicine for

00:00:42,180 --> 00:00:48,110
all things, I'll be using this maybe throughout the talk, but just want to apologize if I

00:00:48,110 --> 00:00:49,890
have a horse voice.

00:00:49,890 --> 00:00:52,420
So the title is functional layout.

00:00:52,420 --> 00:00:54,390
Updating Dom.

00:00:54,390 --> 00:01:03,910
I want to pledges what these words mean to me, for layout all I mean is rectangles on

00:01:03,910 --> 00:01:06,890
a browsers in a screen.

00:01:06,890 --> 00:01:11,470
Their positions, their orientations, heights and widths.

00:01:11,470 --> 00:01:22,630
Updating the DOM at 60 frames per second ‑‑ whether they're scrolling, animating or doing

00:01:22,630 --> 00:01:28,600
responsive design, all these things are happening continuously, that's something I want to talk

00:01:28,600 --> 00:01:29,680
about.

00:01:29,680 --> 00:01:37,320
And functional has two meanings, it's ‑‑ yeah, double meaning and I'll be talking about

00:01:37,320 --> 00:01:38,450
both of those here.

00:01:38,450 --> 00:01:42,659
The fist one is what does it mean for layout to be disfunctional.

00:01:42,659 --> 00:01:48,049
And I would say that layout isn't disfunctional at all for static or mostly static web sites,

00:01:48,049 --> 00:01:54,549
when you a few animations maybe they're simple an animation in or out or their web site isn't

00:01:54,549 --> 00:02:00,590
that isic at all the layout primitives that we have are perfect.

00:02:00,590 --> 00:02:07,100
But, if we're to compare ourselves to native layouts, I'd say it's a real libraries constrained

00:02:07,100 --> 00:02:10,650
language, especially for continuous motion.

00:02:10,650 --> 00:02:14,360
When it comes to coordinating animations, I don't think the web is really well suited

00:02:14,360 --> 00:02:19,030
for that, I don't they we have a strong language to express it.

00:02:19,030 --> 00:02:22,110
So, what's holding layout back?

00:02:22,110 --> 00:02:26,360
There's the obvious one that a lot of people talk about which is performance, and usually

00:02:26,360 --> 00:02:31,690
that comes down to reflow being really costly, especially when you have a nested DOM, many

00:02:31,690 --> 00:02:36,500
Elements are dependent on the layout of other Elements, so once one Element changes the

00:02:36,500 --> 00:02:41,800
browser has to do expensive calculations, but I think something that we don't talk about

00:02:41,800 --> 00:02:43,320
is expressibility.

00:02:43,320 --> 00:02:47,720
And I'd say that we don't actually have the right primitives, the right language to real

00:02:47,720 --> 00:02:53,250
libraries talk about doing rich animations coordinated Gesture based kind of layout that

00:02:53,250 --> 00:02:58,099
we see in the native world.

00:02:58,099 --> 00:03:01,250
, the three pillars of the web.

00:03:01,250 --> 00:03:04,250
And we can ask where does layout belong.

00:03:04,250 --> 00:03:10,410
And layout is the purview of HTML and CSS, HTML usually you don't think about doing anything

00:03:10,410 --> 00:03:15,640
with layout, but HTML makes it's own opinions on layout, the normal browser flow, block

00:03:15,640 --> 00:03:20,590
Elements are placed underneath each other and to the side of one another, and you can

00:03:20,590 --> 00:03:25,751
think that CSS is really just there to modify the flow in a separation of concerning kind

00:03:25,751 --> 00:03:35,410
of way ‑‑ tons of layouts in CSS, but it's important to know that HTML also makes

00:03:35,410 --> 00:03:41,620
an opinion on layout, we have this idea of layout and it's inside of two objects.

00:03:41,620 --> 00:03:47,830
The whole point of separation of concern is that HTML should not be concerned about layout.

00:03:47,830 --> 00:03:53,420
And then there's the lonely guy JavaScript, out to the side and youthy that JavaScript

00:03:53,420 --> 00:03:58,040
is being able to modify CSS on the fly or maybe HTML 2.

00:03:58,040 --> 00:04:02,371
But, usually when we think about layout we tonight think about JavaScript, and that's

00:04:02,371 --> 00:04:04,480
what I'd Reich to change.

00:04:04,480 --> 00:04:12,240
If I were to organize these HTML would be static layout, CSS would be about a binary

00:04:12,240 --> 00:04:17,790
form of layout.

00:04:17,790 --> 00:04:24,479
You might change a color, you an animation, still you're flippage switch, you're not continuously

00:04:24,479 --> 00:04:28,780
changing a piece of data even though the animation is continuous, you're just turning on and

00:04:28,780 --> 00:04:39,879
off and queuing a continuous thing.

00:04:39,879 --> 00:04:45,849
Doing like a swipe Gesture, I even just the most basic thing like that, that I like to

00:04:45,849 --> 00:04:49,580
create is you need to include JavaScript..

00:04:49,580 --> 00:04:50,580
There's no way to do that?

00:04:50,580 --> 00:04:55,460
Just HTML and CSS by itself.

00:04:55,460 --> 00:05:00,690
So I talked about the separation concerns, HTML is supposed to be just about content,

00:05:00,690 --> 00:05:05,960
but many people find themselves in this tag soup where they start wrapping the actual

00:05:05,960 --> 00:05:09,759
content and other tags just to do something about presentation.

00:05:09,759 --> 00:05:16,409
Flex Box goes a long way in helping this but Flex Box also has reflow problems, I don't

00:05:16,409 --> 00:05:20,620
think it's ‑‑ it's great solution for some things, but I'd like something a little

00:05:20,620 --> 00:05:21,620
bit more powerful.

00:05:21,620 --> 00:05:26,800
So, I have a question, why do we use HTML for presentation?

00:05:26,800 --> 00:05:31,199
If we really had this abstraction of concern, you would never even see this, you would have

00:05:31,199 --> 00:05:36,360
some other way of saying that the <div>, the content is centered.

00:05:36,360 --> 00:05:38,090
It wouldn't be an HTML.

00:05:38,090 --> 00:05:42,450
And my answer to this question is that it's the only tree around.

00:05:42,450 --> 00:05:46,689
And layout is necessarily a tree kind of data structure, things are provisioned relative

00:05:46,689 --> 00:05:50,780
to other things, so you have this natural tree that comes out of play.

00:05:50,780 --> 00:05:54,870
But there is no other tray in the way, there's just HTML, you can think that CSS is like

00:05:54,870 --> 00:05:59,789
a tree that's cascading, but that's just a layer on top of the HTML tree.

00:05:59,789 --> 00:06:05,870
So, not that that's a bad idea, but what I'm about to

00:06:05,870 --> 00:06:07,569
say might be a bad idea.

00:06:07,569 --> 00:06:09,009
I have this idea.

00:06:09,009 --> 00:06:12,060
You can tell me if it is bad.

00:06:12,060 --> 00:06:14,830
Can we virtualise, can we actually separate the virtue of concerns where

00:06:14,830 --> 00:06:19,999
we have our position layer where we turn some layout

00:06:19,999 --> 00:06:26,509
DOM things and flatten it out into style, we do the inside

00:06:26,509 --> 00:06:29,250
of JavaScript, is there some way to go from the

00:06:29,250 --> 00:06:35,069
top to the bottom.

00:06:35,069 --> 00:06:40,759
Browsers always do this anyway, because they draw things to the bottom of the screen.

00:06:40,759 --> 00:06:42,500
This is what they do.

00:06:42,500 --> 00:06:46,120
These slides are a few years old.

00:06:46,120 --> 00:06:52,919
But I'm pretty sure that things are similar ... now

00:06:52,919 --> 00:06:56,150
Chrome uses blink, but Chrome and Safari use WebKit as

00:06:56,150 --> 00:07:00,930
a rendering engine and Firefox uses Gecko, and they both

00:07:00,930 --> 00:07:03,509
have this thing called a render tree or frame tree,

00:07:03,509 --> 00:07:08,229
in the case of Gecko, and what this is is just a representation

00:07:08,229 --> 00:07:12,370
of your document in terms of rectangles.

00:07:12,370 --> 00:07:17,539
So Gecko takes your DOM and CSS styles and past everything and

00:07:17,539 --> 00:07:20,270
at some point pipeline, the only thing that they care about

00:07:20,270 --> 00:07:24,789
are rectangles on the screen ... then they paint

00:07:24,789 --> 00:07:26,939
those rectangles with your content, okay?

00:07:26,939 --> 00:07:31,990
So what I'd like to do is take this part out of the browser and

00:07:31,990 --> 00:07:35,849
into the hands of the developer.

00:07:35,849 --> 00:07:39,050
The way we do that is kind of crazy.

00:07:39,050 --> 00:07:41,490
We position absolute things in CSS.

00:07:41,490 --> 00:07:45,020
This isn't everything, just things we want to animate.

00:07:45,020 --> 00:07:49,800
The things we think are presentational and not to do

00:07:49,800 --> 00:07:51,270
with content.

00:07:51,270 --> 00:07:55,219
We create our own render tree in JavaScript.

00:07:55,219 --> 00:07:56,990
So that way, by positioning absolute everything in

00:07:56,990 --> 00:07:59,210
CSS we've taken it out of the browser's normal flow

00:07:59,210 --> 00:08:02,590
and have manual positioning on things.

00:08:02,590 --> 00:08:06,020
So we can create this render tree in JavaScript, it is pretty ghetto

00:08:06,020 --> 00:08:10,139
version of a tree here, bunch of nodes and the leaves

00:08:10,139 --> 00:08:16,879
of this tree are actual HTML dips.

00:08:16,879 --> 00:08:21,690
We can give these nodes some kind of layout properties, maybe some translation,

00:08:21,690 --> 00:08:25,100
if we give A and B these translation values we'd

00:08:25,100 --> 00:08:27,699
expect, before it touches the DOM, that we can flatten

00:08:27,699 --> 00:08:33,130
this and style the DOM 150 pixels by 200 pixels.

00:08:33,130 --> 00:08:36,750
Just a combination of the two previous nodes.

00:08:36,750 --> 00:08:39,570
And we can be clever with other layout properties too, but

00:08:39,570 --> 00:08:42,321
things on CSS, the percentage based properties we can

00:08:42,321 --> 00:08:46,510
define CU with some kind of size and align the relative

00:08:46,510 --> 00:08:51,210
to that size, so that would be just C and D would

00:08:51,210 --> 00:08:54,011
be a combination of 50 pixels to the right, and

00:08:54,011 --> 00:08:57,480
25 pixels down combined with translate for A, and we

00:08:57,480 --> 00:08:59,700
get 150 by 225.

00:08:59,700 --> 00:09:01,620
Oh God.

00:09:01,620 --> 00:09:05,470
Everyone should use GPG.

00:09:05,470 --> 00:09:10,280
Oh, I have due module.

00:09:10,280 --> 00:09:11,280
Okay.

00:09:11,280 --> 00:09:15,980
So just to remind me when the demos are, actually.

00:09:15,980 --> 00:09:21,140
So the logical conclusion of this, if we take it to the point of absurdity, is to build

00:09:21,140 --> 00:09:28,220
a tree in JavaScript, or build a tree in HTML, but actually,

00:09:28,220 --> 00:09:29,600
everything is flat.

00:09:29,600 --> 00:09:35,510
If we inspect the element here -- and I scroll down here -- that's the first

00:09:35,510 --> 00:09:37,510
node second node all of these things are on the exact

00:09:37,510 --> 00:09:38,510
same level.

00:09:38,510 --> 00:09:40,120
It is entirely flat.

00:09:40,120 --> 00:09:45,470
So you can do this in CSS, you'd have some crazy nesting thing going on, the

00:09:45,470 --> 00:09:47,690
layers.

00:09:47,690 --> 00:09:51,510
There is content here and I just tried to be -- can you

00:09:51,510 --> 00:09:55,190
see that?

00:09:55,190 --> 00:09:58,970
There is content inside of these, this little smiley face and just for effect I put it inside

00:09:58,970 --> 00:10:00,550
two spans.

00:10:00,550 --> 00:10:05,510
You can nest whatever you want inside of here, but the important thing is that the outside

00:10:05,510 --> 00:10:06,520
is flat.

00:10:06,520 --> 00:10:08,430
Not the content.

00:10:08,430 --> 00:10:10,830
And close this for a second.

00:10:10,830 --> 00:10:12,770
And we can animate this tree also.

00:10:12,770 --> 00:10:16,940
So the whole point is to have all these animations going on, and we

00:10:16,940 --> 00:10:21,270
avoid the problems of reflow here because everything

00:10:21,270 --> 00:10:23,850
will one it is all hardware accelerate you learned what

00:10:23,850 --> 00:10:27,100
that meant in the last talk and two, everything is flat

00:10:27,100 --> 00:10:32,490
so the DOM has to do very little calculation.

00:10:32,490 --> 00:10:34,480
So you can imagine there is this tree going on, and just the

00:10:34,480 --> 00:10:37,560
numbers inside the nodes are changing and trickle down, so

00:10:37,560 --> 00:10:40,580
one branch moves and moves all the other branches, and

00:10:40,580 --> 00:10:42,720
then you have this funny tree.

00:10:42,720 --> 00:10:43,720
Okay.

00:10:43,720 --> 00:10:45,460
Back to the talk.

00:10:45,460 --> 00:10:47,920
You weren't supposed to see that.

00:10:47,920 --> 00:10:50,760
Okay, so you might have seen this like plaster on

00:10:50,760 --> 00:10:54,280
the surface, so this is Samsara, is this library I've

00:10:54,280 --> 00:10:55,280
been writing.

00:10:55,280 --> 00:11:02,740
It is originally where Myles and I both worked, and it is meant to kind of be a language

00:11:02,740 --> 00:11:05,040
for this kind of stuff, and some of the ideas

00:11:05,040 --> 00:11:12,750
are similar.

00:11:12,750 --> 00:11:14,970
With layout and JavaScript, the question is what can we

00:11:14,970 --> 00:11:17,910
now do?

00:11:17,910 --> 00:11:21,210
And I have this theory that CSS was always designed for point and click.

00:11:21,210 --> 00:11:25,120
You have power tribute or you have animation that goes on and off; it

00:11:25,120 --> 00:11:26,570
is not about continuous motion.

00:11:26,570 --> 00:11:27,800
The JavaScript can be.

00:11:27,800 --> 00:11:29,910
That's the whole point.

00:11:29,910 --> 00:11:33,710
I'm super excited about streams, as you can tell.

00:11:33,710 --> 00:11:39,310
That's largest font size in the entire talk and all these ideas, the functional reactive

00:11:39,310 --> 00:11:41,700
programming too, you might have seen in the other talks,

00:11:41,700 --> 00:11:46,550
because we can think about CSS not as this tree but one

00:11:46,550 --> 00:11:47,740
giant stream.

00:11:47,740 --> 00:11:53,930
So streams are kind of the language for continuous motion or just kind of continuous

00:11:53,930 --> 00:11:56,500
data flow at all.

00:11:56,500 --> 00:11:59,620
So let me give you -- show you a demo of what I mean.

00:11:59,620 --> 00:12:03,690
That's a little bit abstract from the previous one.

00:12:03,690 --> 00:12:05,470
Yes.

00:12:05,470 --> 00:12:09,290
So this demo also works on any of your mobile phones or computers and stuff, if you

00:12:09,290 --> 00:12:16,680
go to that address, that O is an O and not a zero.

00:12:16,680 --> 00:12:20,620
But this demo is supposed to mimic some of the ideas from

00:12:20,620 --> 00:12:23,730
the native world specifically the IOS navigation controller

00:12:23,730 --> 00:12:27,010
where you give it -- it does the menuing interface

00:12:27,010 --> 00:12:28,610
for you.

00:12:28,610 --> 00:12:31,540
It allows you to have a back put in and it does all

00:12:31,540 --> 00:12:34,480
these crazy transitions when you go back between some

00:12:34,480 --> 00:12:38,390
kind of pages that you have in your application.

00:12:38,390 --> 00:12:40,160
So there's a lot of things going on here.

00:12:40,160 --> 00:12:44,200
When you drag, here I'll just drag first, and then explain

00:12:44,200 --> 00:12:45,290
later.

00:12:45,290 --> 00:12:47,460
That's all the demo does.

00:12:47,460 --> 00:12:49,220
Pretty much.

00:12:49,220 --> 00:12:50,230
But there's a lot going on.

00:12:50,230 --> 00:12:53,791
So you can see things will pass at different rates.

00:12:53,791 --> 00:12:56,950
I was trying to be neurotic to emulate IOS.

00:12:56,950 --> 00:13:00,470
They translate, the drawer you see the red part

00:13:00,470 --> 00:13:03,330
actually comes out, but then it doesn't move for

00:13:03,330 --> 00:13:04,630
a little while.

00:13:04,630 --> 00:13:10,550
You can see all these kinds of crazy effects with streams and stream transforms,

00:13:10,550 --> 00:13:13,550
and more than that, the way that this code is written

00:13:13,550 --> 00:13:16,860
is the way I think about it.

00:13:16,860 --> 00:13:23,000
The opacity of my nav bar is listening to the motion of the draw, which

00:13:23,000 --> 00:13:27,820
is listening to the mouse input I'm giving from my dragging.

00:13:27,820 --> 00:13:32,620
In a lot of other animation libraries they give

00:13:32,620 --> 00:13:35,010
you the ability the wrap-in mode and then animate

00:13:35,010 --> 00:13:38,390
some CSS property, and that's great.

00:13:38,390 --> 00:13:41,320
You want to change one thing, have someone enter or exit animation,

00:13:41,320 --> 00:13:44,850
that's fine, but I want you to feel like you're a

00:13:44,850 --> 00:13:47,500
conductor of an orchestra and everything is interrelated

00:13:47,500 --> 00:13:50,101
because this is the kind of experience that we have in

00:13:50,101 --> 00:13:51,920
the native world.

00:13:51,920 --> 00:13:53,430
You don't realise it but when you press the back

00:13:53,430 --> 00:13:57,450
button on IOS or android eight, different animations are

00:13:57,450 --> 00:13:58,450
happening.

00:13:58,450 --> 00:14:08,090
And I actually think this is part of what makes those interfaces so fun to use.

00:14:08,090 --> 00:14:11,570
You can also click on the message button in the backbone.

00:14:11,570 --> 00:14:12,980
Yes.

00:14:12,980 --> 00:14:15,180
So this is all done in the language of streams.

00:14:15,180 --> 00:14:18,120
Everything is a stream, the mouse input is a stream,

00:14:18,120 --> 00:14:21,640
the layout itself is a stream because the blue thing

00:14:21,640 --> 00:14:24,980
is actually emitting a bunch of numbers from zero to one,

00:14:24,980 --> 00:14:27,600
and it is -- if you think that my mouse input is

00:14:27,600 --> 00:14:31,730
going from right to left, it gets clamped at some point,

00:14:31,730 --> 00:14:33,880
and so only ones are being admitted from the blue

00:14:33,880 --> 00:14:39,170
thing then the nav is listening to the blue thing, and

00:14:39,170 --> 00:14:40,980
that's all these things are being piped together.

00:14:40,980 --> 00:14:45,920
That's how this demo works.

00:14:45,920 --> 00:14:51,180
And I think the whole thing is about 300 lines of code, but there are other frames

00:14:51,180 --> 00:14:55,630
that allow you to give you these two pages, and then let

00:14:55,630 --> 00:14:58,930
you give you that animation, and they make it extremely

00:14:58,930 --> 00:15:00,550
simple.

00:15:00,550 --> 00:15:02,690
But to customise it is almost impossible.

00:15:02,690 --> 00:15:06,040
So what I'm trying to do is to make simple things medium

00:15:06,040 --> 00:15:13,090
difficulty, but make hard things just as medium difficulty.

00:15:13,090 --> 00:15:16,610
So I'm trying to come with the primitives in order

00:15:16,610 --> 00:15:19,090
to give you the power to do whatever kind of animations

00:15:19,090 --> 00:15:20,490
you want.

00:15:20,490 --> 00:15:24,990
Okay, so I've already lied to you.

00:15:24,990 --> 00:15:27,950
The render tree isn't a tree at all in the Samsara framework

00:15:27,950 --> 00:15:30,070
I'm making.

00:15:30,070 --> 00:15:32,240
It's one big stream.

00:15:32,240 --> 00:15:36,510
That's, to me, kind of a nerdy cool part and I love to talk about the technical

00:15:36,510 --> 00:15:40,800
parts, especially to some of the Pascal people that

00:15:40,800 --> 00:15:44,990
were speaking before, but the whole idea is the

00:15:44,990 --> 00:15:48,650
nodes contain streaming data and then they -- the child

00:15:48,650 --> 00:15:51,630
nodes listen to the parent modes and when they change they

00:15:51,630 --> 00:15:55,510
send data down to the children, all the way down until

00:15:55,510 --> 00:15:59,570
it exits in the DOM in the form of transform or parsity

00:15:59,570 --> 00:16:03,150
or size properties, all the layout things I essentially

00:16:03,150 --> 00:16:06,300
need.

00:16:06,300 --> 00:16:09,630
And this has a lot of technical benefits, you don't,

00:16:09,630 --> 00:16:11,980
like normally you think of a tree as like you have node

00:16:11,980 --> 00:16:14,970
and then it has a range of children and you might call

00:16:14,970 --> 00:16:17,160
render on the root node, and it calls render on the

00:16:17,160 --> 00:16:20,690
children and recursively goes down, but when you think

00:16:20,690 --> 00:16:25,241
of it as one big pipeline, you can do things like you

00:16:25,241 --> 00:16:27,470
have optimal subtree rendering, you don't ever have to

00:16:27,470 --> 00:16:30,200
past the entire tree, when one thing changes it will

00:16:30,200 --> 00:16:32,180
naturally cascade down.

00:16:32,180 --> 00:16:35,250
You don't need to do any dirty checking, but there are tonnes of things you

00:16:35,250 --> 00:16:37,850
avoid with this streaming interface because there is

00:16:37,850 --> 00:16:42,780
no spate the way that it goes down div from one function

00:16:42,780 --> 00:16:46,070
to another function to another, transforming the data,

00:16:46,070 --> 00:16:49,070
composing it and there's an algebra for all of this.

00:16:49,070 --> 00:16:56,500
So transforms essentially multiply, size on the line might

00:16:56,500 --> 00:16:57,610
combine with some other ways.

00:16:57,610 --> 00:17:03,930
So these are all transforms that trickle all the way down into the DOM.

00:17:03,930 --> 00:17:09,380
Dug said that is write programmes to handle text streams, because

00:17:09,380 --> 00:17:13,789
that's an interface.

00:17:13,789 --> 00:17:18,100
You're often using text streams and that was part of the reason the node was so successful,

00:17:18,100 --> 00:17:21,339
you're always using the streaming language, and it is

00:17:21,339 --> 00:17:25,150
because they wrap themselves around their file system

00:17:25,150 --> 00:17:28,509
base which is about using these streams and what I'd

00:17:28,509 --> 00:17:30,700
like to convince people because I don't think we

00:17:30,700 --> 00:17:33,690
normally think about it, is that continuous motion

00:17:33,690 --> 00:17:38,780
inside of layer can be thought of as a stream, and JSON

00:17:38,780 --> 00:17:40,429
indicts the universal interface.

00:17:40,429 --> 00:17:41,429
Okay.

00:17:41,429 --> 00:17:46,639
Maybe you shouldn't listen to me.

00:17:46,639 --> 00:17:49,169
But none of this is new either, for the web.

00:17:49,169 --> 00:17:51,360
Okay, the web started us off with streams, we've

00:17:51,360 --> 00:17:54,340
just blissfully forgotten about, and every single

00:17:54,340 --> 00:17:57,190
DOM event is just a stream.

00:17:57,190 --> 00:18:01,870
Mouse move, there is other ones, scroll, resize, etc, the DOM starts us off,

00:18:01,870 --> 00:18:04,460
but the cool thing about streams is you can take one and

00:18:04,460 --> 00:18:08,570
then move it into another, you can transform it.

00:18:08,570 --> 00:18:13,049
So what's lacking is the ability to pipe the streams around.

00:18:13,049 --> 00:18:15,070
If we have those built, there are so many things we can

00:18:15,070 --> 00:18:17,250
do.

00:18:17,250 --> 00:18:19,710
In the demo I showed before, I had this layout which

00:18:19,710 --> 00:18:22,009
was subscribing to the mouse input and chaining

00:18:22,009 --> 00:18:23,249
itself, whatever.

00:18:23,249 --> 00:18:29,090
Am, but you can have gesture recognition So you're taking the touch input and it's historically

00:18:29,090 --> 00:18:32,960
accumulating some of the events and then you figure out oh this was a swipe left or somebody

00:18:32,960 --> 00:18:38,809
drew a circle or something but this is the right language where you build higher level

00:18:38,809 --> 00:18:44,679
streams on top of lower level streams, calculay the velocity from scrolling, maybe you'retracking

00:18:44,679 --> 00:18:50,740
two fingers at a time maybe you want to have a stream that turns that into a pinch to zoom,

00:18:50,740 --> 00:18:55,649
whatever that means, there's tons more I can think of.

00:18:55,649 --> 00:18:59,440
And what I'm trying to do is come up with the right language to talk about this stuffer,

00:18:59,440 --> 00:19:05,230
I think with ease of expression, people can suddenly begin to experiment more, they can

00:19:05,230 --> 00:19:07,279
do things they didn't normally try.

00:19:07,279 --> 00:19:14,100
We have had track and drop for a while, who remembers not having ‑‑ scroll, crazy,

00:19:14,100 --> 00:19:16,040
it feels so weird.

00:19:16,040 --> 00:19:21,649
Bounce to refresh, the hamburger menu, the question is can you just insert your own here,

00:19:21,649 --> 00:19:28,249
can you just start playing and come up with something.

00:19:28,249 --> 00:19:30,460
So here I start playing.

00:19:30,460 --> 00:19:34,840
This was souper silly, that's also ability you can play around with it.

00:19:34,840 --> 00:19:42,070
But, yeah, everything's in 3 D also so you can change skews and Translates around D spacement

00:19:42,070 --> 00:19:54,230
it's putting the mouse input I guess Genealogy use this type of accordian

00:19:54,230 --> 00:20:01,400
thing when it collapses and expands threads, so believe it or not, it can be useful.

00:20:01,400 --> 00:20:07,559
All right, so, just some closing thoughts.

00:20:07,559 --> 00:20:15,190
I think a lot of us would say that in the past 20 year it is public internet has done

00:20:15,190 --> 00:20:20,190
a lot to change society, maybe the most impactful.

00:20:20,190 --> 00:20:25,400
Maybe more debatable is in the past ten years than mobile has done a lot to change society.

00:20:25,400 --> 00:20:32,100
But as Myles introduced my, I've been traveling for a while, I've been to some remote places,

00:20:32,100 --> 00:20:38,889
maybe a year ago I would of said, mobile's pretty important, but, I was in Myammar, already,

00:20:38,889 --> 00:20:45,970
pretty kind of closed off, I was in the mountains there with these people that are completely

00:20:45,970 --> 00:20:51,620
autonomous from their central government.

00:20:51,620 --> 00:20:55,419
And there's a girl, I had a camera with me, I gave her the camera, she started taking

00:20:55,419 --> 00:20:58,970
all these pictures, I showed her how to move back and forth.

00:20:58,970 --> 00:21:03,070
She'd never seen a camera before.

00:21:03,070 --> 00:21:10,369
And but her first instinct when she was looking at the camera was she swiped the screen.

00:21:10,369 --> 00:21:13,429
And I couldn't, I didn't understand, you've never seen a camera before how do you know

00:21:13,429 --> 00:21:21,500
there's a Gesture (Laughs) and through the guide he translated oh, well, I somebody in

00:21:21,500 --> 00:21:26,790
thevillage has smartphone and we play becames on it, and we charge it with the solar power

00:21:26,790 --> 00:21:33,799
that we get from, you know, our solar panels, and I was just like, mobile is everywhere,

00:21:33,799 --> 00:21:37,570
I mean, really, I didn't quite understand.

00:21:37,570 --> 00:21:40,690
And this happened several times.

00:21:40,690 --> 00:21:44,529
People in Myammar gamble over mobile games, it's so interesting to see.

00:21:44,529 --> 00:21:45,529
Any way.

00:21:45,529 --> 00:21:52,970
So, I definitely have this opinion that mobile has,

00:21:52,970 --> 00:21:58,870
in terms of it's pervasiveness transformed the world.

00:21:58,870 --> 00:22:03,019
But the whole is not greater than the sum of it's parts, the mobile web is certain like

00:22:03,019 --> 00:22:04,119
that.

00:22:04,119 --> 00:22:09,669
I'm not traying to package up a dream that the mobile web will win or anything like that,

00:22:09,669 --> 00:22:17,909
I've been around that would, that I'd like to do is industry to say it that's important

00:22:17,909 --> 00:22:21,350
to work on.

00:22:21,350 --> 00:22:25,669
That's what I found my traveling, here's a potential future I can think of for the mobile

00:22:25,669 --> 00:22:28,759
web.

00:22:28,759 --> 00:22:33,990
I think of a mobile web can actually change the economy of applications, apps can be downloaded,

00:22:33,990 --> 00:22:38,240
sorry, maybe I should say downloaded by hyper link, I can text you an application.

00:22:38,240 --> 00:22:43,360
I can tweet an application, these are the ways of distributing apps.

00:22:43,360 --> 00:22:48,980
That are comet pleatly de‑centralled, I adopt have to go to an App store.

00:22:48,980 --> 00:23:00,070
How many apps have you downloaded the way we think about down loading apps and looking

00:23:00,070 --> 00:23:02,919
at web sites.

00:23:02,919 --> 00:23:08,850
Everything has a browser, whether it's this computer in my phone or maybe the TV or your

00:23:08,850 --> 00:23:15,539
car Am, there is no problem in an apple phone communicating with an android phone when it's

00:23:15,539 --> 00:23:20,369
over the browser but there might be a problem if it's air drop So everything has a browser

00:23:20,369 --> 00:23:25,179
and it can be the layer that unites all the other things.

00:23:25,179 --> 00:23:33,460
You can I mean searching in the apple store sucks you can crawl through apps, and that

00:23:33,460 --> 00:23:43,049
data can be any other app that can use that, but also have

00:23:43,049 --> 00:23:47,149
a layer on top of it that crawls it.

00:23:47,149 --> 00:23:51,169
And I'm really big on this idea of ephemeral apps, so what I mean by

00:23:51,169 --> 00:23:54,240
that is since there's very little barrier to downloading

00:23:54,240 --> 00:23:56,649
an app, you never have to really think about it because

00:23:56,649 --> 00:23:58,950
you never think about opening a tab in your browser.

00:23:58,950 --> 00:24:03,309
It is not like that, and I can open this tab, am I going

00:24:03,309 --> 00:24:05,340
to uninstall this tab later?

00:24:05,340 --> 00:24:09,879
I mean, imagine just walking into a department store and they text you

00:24:09,879 --> 00:24:13,090
this application that just has all of the inventory,

00:24:13,090 --> 00:24:16,299
and you can search it, or maybe even just try to access

00:24:16,299 --> 00:24:20,159
their wi-fi, and that's the website, their website,

00:24:20,159 --> 00:24:26,200
and that shows their application, and you get rid of

00:24:26,200 --> 00:24:28,320
the apps by closing the tab, so you never have to worry

00:24:28,320 --> 00:24:30,779
about it.

00:24:30,779 --> 00:24:35,730
Not only can the mobile web compete with native, but it

00:24:35,730 --> 00:24:40,250
has all these other things going for it, that we're not

00:24:40,250 --> 00:24:42,619
really exploring.

00:24:42,619 --> 00:24:45,259
So yeah, with that, that's it.

00:24:45,259 --> 00:24:46,259
Thank you.

00:24:46,259 --> 00:24:47,759
That's my Twitter.

00:24:47,759 --> 00:24:50,139
That's what the code is.

00:24:50,139 --> 00:24:51,289

YouTube URL: https://www.youtube.com/watch?v=biJXpv-6XVY


