Title: Gilmore Davidson: Time zone of your life | JSConf EU 2015
Publication date: 2015-10-26
Playlist: JSConf EU 2015
Description: 
	Time zones – the undoing of many developers’ sense of sanity. Get them right and most likely your users won’t even notice. Get them wrong and you can end up increasing racial tensions in the Middle East. As we embed ourselves further into this Brave New World of JS Everywhere, let us not forget the basic lessons from before JS existed. This talk will explain the oddities, pitfalls, and ever-changing nature of time zones, so that you may learn from my mistakes (I wasn’t kidding about the Middle East bit).

Intro music by @halfbyte
Captions: 
	00:00:21,820 --> 00:00:27,779
Ok, third time zones, developers and time zones are clearly a love/hate relationship,

00:00:27,779 --> 00:00:31,950
I can tell this from looking in my Twitter stream where I see all sorts of developers

00:00:31,950 --> 00:00:41,370
complaining about time zones. Why are they such a problem? We'll start with a simple

00:00:41,370 --> 00:00:49,930
problem you will encounter: how soon is now, you have a time and date you want to display

00:00:49,930 --> 00:00:56,940
in your interface or you want to get users to write it for you, but when is that time,

00:00:56,940 --> 00:01:00,730
because 10 o'clock for you is not 10 o'clock for someone else.

00:01:00,730 --> 00:01:09,890
The simplest solution is avoid the problem and never show dates and times in your interface,

00:01:09,890 --> 00:01:16,570
not really practical. What's an actual solution, you could decide, you know what ever time

00:01:16,570 --> 00:01:22,149
the server thinks it is, that's what I'm going to output, the users have to do the mechanical

00:01:22,149 --> 00:01:26,750
computation, that's not a solution that's starting a problem again.

00:01:26,750 --> 00:01:34,390
Let's look into the history of time zones. Basically, there was a concept that worked

00:01:34,390 --> 00:01:40,130
really well up to the mid-19th century which was mean solar time, when the sun is directly

00:01:40,130 --> 00:01:46,790
overhead, that's noon. Every town and village used that system, until the railway and telegraph

00:01:46,790 --> 00:01:50,229
connected them and they realised everyone was using a difference version of the time

00:01:50,229 --> 00:01:55,479
because the sun was in a difference spot. A proposal was done to standardise the time

00:01:55,479 --> 00:02:08,200
and divide the world in 24 bands, one hour per band, neat, precise and mathematical,

00:02:08,200 --> 00:02:22,650
it remained perfect until it reality at which time borders came into fly, some work was

00:02:22,650 --> 00:02:27,750
done to calculate the differences between what the time zones in the world are in what

00:02:27,750 --> 00:02:37,829
mean solar time says they should be in, Beijing runs on Beijing time, the furthest west parts

00:02:37,829 --> 00:02:43,859
of China are three hours out from where the sun says they should be. You don't want to

00:02:43,859 --> 00:02:47,280
have to deal with this calculation yourself, you don't want to have to try and work out

00:02:47,280 --> 00:02:52,109
where they are, so you give your users a preference, you let them choose what time zone they're

00:02:52,109 --> 00:02:59,949
in, then you have a whole range of other problems. Every time zone picker that I've seen on the

00:02:59,949 --> 00:03:09,750
web, is a trade-off between the comprehensiveness of the data and the ease of use. Most users

00:03:09,750 --> 00:03:16,980
don't actually know what their time zone is and they hate putting it in, like this.

00:03:16,980 --> 00:03:21,910
Also just seeing a gigantic list is really annoying. At this point you need to ask yourself,

00:03:21,910 --> 00:03:27,720
do you really need a time zone, a defined time zone or to you just need the concept

00:03:27,720 --> 00:03:33,590
of local time. Really what you are trying to do, you are just taking one date and time

00:03:33,590 --> 00:03:39,380
and display it in a different date and time depending on where your user is. The third

00:03:39,380 --> 00:03:46,590
solution is you just deal with UTC. Standard reference point for time.

00:03:46,590 --> 00:03:54,070
You store it in UTC on the server, you output it in UTC to the browser and you use JavaScript

00:03:54,070 --> 00:03:58,630
to just convert to it the local time on the fly as the very last step, this is by far

00:03:58,630 --> 00:04:04,440
the best solution for the majority of use cases, it's used by a lot of websites today,

00:04:04,440 --> 00:04:12,459
what's is UTC, it's co-ordinated universal time it's the successor for Greenwich meantime

00:04:12,459 --> 00:04:21,650
it kind of stands not for much as a acronym itself, when it was being created the organisers

00:04:21,650 --> 00:04:27,500
wanted to have the same acronym for every country in the world, of course the English

00:04:27,500 --> 00:04:33,680
and French can never agree on word order, an acronym was picked that was wrong for everyone,

00:04:33,680 --> 00:04:36,130
putting everyone on an equal footing {Laughter}.

00:04:36,130 --> 00:04:42,870
That's great when you can get away with it, sometimes you do sometimes need to store a

00:04:42,870 --> 00:04:48,380
user preference for time zones. If you want to send scheduled notifications scheduled

00:04:48,380 --> 00:04:53,350
notifications at the same time everyday, in your users local time regardless of day light

00:04:53,350 --> 00:05:00,000
saving time over a course of the year.

00:05:00,000 --> 00:05:05,400
So what's a better way of get the users time zone you can try and detect it in the browser,

00:05:05,400 --> 00:05:16,280
it has to problems, it seems simplest enough in theory, you create the date, you call the

00:05:16,280 --> 00:05:25,870
one thing available, it returns minutes from UTC, then you just map the offset to a time

00:05:25,870 --> 00:05:30,520
zone and find out that everything is broken.

00:05:30,520 --> 00:05:35,650
So to understand why it's broken we have to take another look at another history lesson.

00:05:35,650 --> 00:05:40,070
So five years ago Patrick McKenzie wrote a very famous blog posed, called false hoods

00:05:40,070 --> 00:05:47,210
people believe about names, it was based on how many pieces of software he'd broken with

00:05:47,210 --> 00:05:58,880
various names. Two years later, false hoods programmers believe about time, this contained

00:05:58,880 --> 00:06:04,870
34 false hoods, hours, minutes seconds, about all the different ways that programmes can

00:06:04,870 --> 00:06:12,020
stuff up when they are trying to deal with time, this got spread around and he was in

00:06:12,020 --> 00:06:26,430
undated with things he'd mist so-had to post the follow-up, with all the ones he'd missed,

00:06:26,430 --> 00:06:37,440
- I'll pull out two of my festival writs, - I can easily maintain a time list, time

00:06:37,440 --> 00:06:43,110
myself, also false. So why are these false, if you want domain ten your own time zone

00:06:43,110 --> 00:06:49,410
list, these there are problems you are going to have to deal with, day light saving time.

00:06:49,410 --> 00:06:53,500
Not all the countries in the world do day light saving time, some do, some don't, for

00:06:53,500 --> 00:07:00,740
the ones that do, not all parts of the countries use day light saving time. Day light saving

00:07:00,740 --> 00:07:04,639
time, one knows that just jumps forward an hour and jumps back an hour, except for Lord

00:07:04,639 --> 00:07:11,840
How island which only does half an hour, why? I've no idea, you have to account for it any

00:07:11,840 --> 00:07:18,680
way. When do places go in and out of day light saving time? This was my attempt to visualise

00:07:18,680 --> 00:07:23,480
the different times of the year when different regions do it, I couldn't fit it all on one

00:07:23,480 --> 00:07:30,710
screen, also another little oddity there, Morocco and Egypt, when Egypt chooses to do

00:07:30,710 --> 00:07:37,330
so, go into day light saving time, come out for one month during Ramadan, so that fasting

00:07:37,330 --> 00:07:43,450
is easier during day light hours, then back into day light saving time and out again,

00:07:43,450 --> 00:07:49,700
so four clock changes in one year, because Ramadan is based on the siting of the moon

00:07:49,700 --> 00:07:56,139
you can't actually know the precise date that that's going to happen {Laughter}.

00:07:56,139 --> 00:08:05,910
All right, you have got the rules of daylight saving time you have finally figured that

00:08:05,910 --> 00:08:13,270
all out, then they all go and change. So the base offset, so how far ahead or behind UTC

00:08:13,270 --> 00:08:20,480
a certain region is. Just this year alone there have been five changes. These range

00:08:20,480 --> 00:08:26,699
from whole countries to just small states. Deciding to start or stop doing daylight saving

00:08:26,699 --> 00:08:30,460
time this happens a lot.

00:08:30,460 --> 00:08:36,740
Deciding to change when daylight saving time starts and stops, this also changes a lot.

00:08:36,740 --> 00:08:45,010
Then, the not very common case, but still quite interesting of the country of Samoa,

00:08:45,010 --> 00:08:52,100
where the date of December 302011, they went from one side of the international date line

00:08:52,100 --> 00:08:59,630
and at midnight they crossed over and went straight to December 31. This did make sense

00:08:59,630 --> 00:09:03,700
in order to trade better with Australia and New Zealand, but their nearest

00:09:03,700 --> 00:09:11,320
neighbours of American Samoa, kept trading, they are now separated by 70 kilometres and

00:09:11,320 --> 00:09:21,710
24 hours it's the same time of day in both places, just a different day.

00:09:21,710 --> 00:09:27,029
The big problem is politics, which is really the cause of all the other problems we have

00:09:27,029 --> 00:09:31,110
already seen, governments change, when they change they often change their minds from

00:09:31,110 --> 00:09:37,690
the previous government, that's when they recognise that a zone exists, there is a group

00:09:37,690 --> 00:09:51,620
of towns in Australia, halfway between Adelaide and Perth, that choose a time zone - your software has to account for it. One off

00:09:51,620 --> 00:09:57,940
changes such as the Sydney Olympics, making daylight saving time start a month early,

00:09:57,940 --> 00:10:03,630
this year Turkey will extend daylight saving time by a month because of local elections,

00:10:03,630 --> 00:10:08,940
when you are lucky the governments will announce these changes with enough notice to update

00:10:08,940 --> 00:10:13,690
the software, in reality, update all the software, in reality all the changes will happen within

00:10:13,690 --> 00:10:21,240
a month, in extreme cases within a day, in some very rare cases they have actually announced

00:10:21,240 --> 00:10:24,220
they have done it thereafter fact {Laughter}.

00:10:24,220 --> 00:10:30,480
How on earth do you even keep up with all of this, it's where the time zone database

00:10:30,480 --> 00:10:41,330
comes in, it's managed by IANA, it's really just run by a group of really dedicated volunteers,

00:10:41,330 --> 00:10:49,200
who try and keep track of all the government make it open sources and spread it out to

00:10:49,200 --> 00:10:55,880
the software your computers run, if you want to use it in JavaScript, there are some libraries

00:10:55,880 --> 00:11:03,000
that compile this data, but there are lmultiple releases of the database every year, everyone

00:11:03,000 --> 00:11:08,440
of the libraries has to recompile the data every time there is a release, it means you

00:11:08,440 --> 00:11:21,360
have to keep your libraries up-to-date, the server is going to have a list of time zones, your client will have a list of time

00:11:21,360 --> 00:11:30,380
zones and they can get out of sync very easily.

00:11:30,380 --> 00:11:35,810
Keeping up-to-date is important. So, I gave the first version of this talk at JSConf Australia

00:11:35,810 --> 00:11:42,360
a year and a half ago, this is a list of changes in the time zone database since I gave this

00:11:42,360 --> 00:11:44,820
talk last time - {Laughter}.

00:11:44,820 --> 00:11:55,060
Now, the last four here have an unreleased date, mainly because they were announced after

00:11:55,060 --> 00:11:59,300
I landed in Berlin for this conference and I haven't yet made the full release of the

00:11:59,300 --> 00:12:03,180
database, it goes to show how often these things change.

00:12:03,180 --> 00:12:11,390
When I first gave the talk I picked out one prime example of a politically motivated change

00:12:11,390 --> 00:12:21,240
that was hard to predict ahead of time, Crimea switching from Ukraine to Moscow town, I can't

00:12:21,240 --> 00:12:29,649
think of a more politically motivated example than North Korea switching away from Japan

00:12:29,649 --> 00:12:33,220
and South Korea to establish its own time zone.

00:12:33,220 --> 00:12:42,310
It's all very interesting, but should you care? Yes, your users will, I know this from

00:12:42,310 --> 00:12:43,580
bitter, personal experience.

00:12:43,580 --> 00:12:50,300
If you want to so this is my tale of where I didn't do enough research into time zones

00:12:50,300 --> 00:13:00,140
initially and I caused things to go very, very wrong. Not long after I started at Alasian,

00:13:00,140 --> 00:13:03,910
JIRA the issue tracking software gained the ability to

00:13:03,910 --> 00:13:10,770
store user preference four time zone. I wanted to spend some 20% time to ad in a little ad

00:13:10,770 --> 00:13:17,640
on that would basically turn updating your time zone into a one click operation. Just

00:13:17,640 --> 00:13:23,990
detect when the browser was out of sync with the user preference. This was fine.

00:13:23,990 --> 00:13:32,350
I was using one of the JS libraries before, JS time zone detect, what it does it groups

00:13:32,350 --> 00:13:38,630
identical zones together so all of central Europe is detected as use Berlin because the

00:13:38,630 --> 00:13:45,959
countries all use the exact same rules. For zones that have very similar rules but daylight

00:13:45,959 --> 00:13:50,990
saving time starts at slightly different dates it has some fine grain logic to work out the

00:13:50,990 --> 00:13:52,000
difference.

00:13:52,000 --> 00:13:56,920
This is working fine I did some statistical analysis, usage of the feature was going up.

00:13:56,920 --> 00:14:05,899
Then about a year later, something happened it seems innocuous but Israel started daylight

00:14:05,899 --> 00:14:14,519
saving time a few days differently from what they were doing before. This combined with

00:14:14,519 --> 00:14:21,330
the fine grain logic caused support requests where users in Israel started being detected

00:14:21,330 --> 00:14:28,880
as being in Gaza. As one of our customers noted it was both incorrect and very offensive.

00:14:28,880 --> 00:14:35,339
I don't know about you when I started in tech I didn't really have career goals, I just

00:14:35,339 --> 00:14:40,019
thought I would see how it goes, but I am pretty sure that if I did have career goals

00:14:40,019 --> 00:14:44,950
I would not have made one of them to increase political tension. In a longstanding conflict

00:14:44,950 --> 00:14:51,709
in the middle east. {laughter} so obviously had to fix this, but how.

00:14:51,709 --> 00:14:58,360
I couldn't just update the library, it had changed its API in the meantime. I also realised

00:14:58,360 --> 00:15:02,580
this problem could come up with other countries in the future so I starter to rethink the

00:15:02,580 --> 00:15:09,510
approach completely. Eventually, I realised that the best way to do it was to get the

00:15:09,510 --> 00:15:15,130
list of definitions from the surfer which already had to have them anyway, filter the

00:15:15,130 --> 00:15:27,760
list based on UTC offsets in the browser then GIF the user a choice to make the final selection.

00:15:27,760 --> 00:15:36,450
We have not had anymore support cases about hot topics since then, but I found out later

00:15:36,450 --> 00:15:41,430
that I wasn't the only one to have made this mistake the known Linux software also has

00:15:41,430 --> 00:15:47,440
a problem with people in Israel being detected as in Palestine, it just shows it very, very

00:15:47,440 --> 00:15:51,740
easy to get something wrong.

00:15:51,740 --> 00:15:58,140
That's just dealing with the time zone definitions themselves. So I found out later when I started

00:15:58,140 --> 00:16:01,839
digging more into this that there are all sorts of other problems to do with time zones

00:16:01,839 --> 00:16:07,329
when you are dealing with software, as the developers of Angular found out {laughter}

00:16:07,329 --> 00:16:15,370
when the unit test suite would only run when running New Zealand or certain states of Australia.

00:16:15,370 --> 00:16:23,240
This was effectively a bug in the 5 specification about how to handle historical dates, whatever

00:16:23,240 --> 00:16:29,730
the daylight saving time rules are now have always applied. Australia and New Zealand

00:16:29,730 --> 00:16:37,480
started doing daylight saving time in 1971, and Angular was testing for dates in 1970.

00:16:37,480 --> 00:16:42,670
ECMAScript 5 assumes that those dates still had daylight saving time. This has been fixed

00:16:42,670 --> 00:16:49,070
in ES6 but the damage was done and the browsers still had this problem.

00:16:49,070 --> 00:16:54,920
Some people suggested I use geolocation, try to detect where the user is physically and

00:16:54,920 --> 00:17:02,070
map that too time zone. I can understand why that's maybe not a good idea, we look back

00:17:02,070 --> 00:17:12,079
20 years. So Microsoft in Windows 95, added a time zone selection map. After a border

00:17:12,079 --> 00:17:13,529
dispute between Peru and

00:17:13,529 --> 00:17:19,100
Ecuador they started to have to redraw the borders, the real kicker came when the Indian

00:17:19,100 --> 00:17:25,250
Government threatened to boycott all Microsoft products until the border drawn against Pakistan

00:17:25,250 --> 00:17:33,279
was changed in their map. Microsoft solved the problem by removing the feature completely.

00:17:33,279 --> 00:17:37,929
To understand why this is such a problem, you just have to look at Google maps in 3

00:17:37,929 --> 00:17:43,230
different countries. In this case Google maps Germany, India and China show the Kashmir

00:17:43,230 --> 00:17:51,759
region with significantly redrawn borders depending on where you are viewing the map.

00:17:51,759 --> 00:17:56,840
There are some people who have tried to solve this though, the geonames API, does take a

00:17:56,840 --> 00:18:02,929
latitude and longitude and map it to a time zone identifier. I don't know what they do

00:18:02,929 --> 00:18:08,320
about border disputes I will leave that up to them to decide, a lot of you will using

00:18:08,320 --> 00:18:13,940
this API without knowing it it's better known as the backing service for Apple's time zone

00:18:13,940 --> 00:18:21,730
selection. If you want to use it in the browser it's not at seam let's as it would be in Apple's

00:18:21,730 --> 00:18:30,009
products, because every geolocation request prompts the user to allow it. Some other things

00:18:30,009 --> 00:18:37,549
I learned. You should never rely on the abbreviation of a time zone as being a unique identifier.

00:18:37,549 --> 00:18:44,649
For example IST, which some people will just think is island standard time or island summer

00:18:44,649 --> 00:18:51,309
time also applies to Israel and India.

00:18:51,309 --> 00:18:59,369
The other thing is that IANA time zone identifier such as Europe/Berlin is shown in UIs everywhere,

00:18:59,369 --> 00:19:04,460
I have made this mistake everywhere. What I realise the maintainers of the database

00:19:04,460 --> 00:19:10,239
recommend you don't display them to the end user, they are not easily translatable they

00:19:10,239 --> 00:19:15,859
don't necessarily represent a region. They recommend you use the long name of the time

00:19:15,859 --> 00:19:21,649
zone such as Central European Time this is where the Unicode common locale data repository

00:19:21,649 --> 00:19:27,139
comes in they maintain mappings between time zone identifier and translation in a whole

00:19:27,139 --> 00:19:33,340
heap of different locals. If you want to use this in a browser there's the jQuery globalise,

00:19:33,340 --> 00:19:44,100
it can handle the translations for you but as with everything there's now another trade

00:19:44,100 --> 00:19:51,210
off. Comprehensiveness of the translations and the file size you are loading in the browser.

00:19:51,210 --> 00:19:58,850
That's a lot of doom and gloom, but there are some better things on the way if you want

00:19:58,850 --> 00:20:04,879
to deal with time zones in the browser. The first one of these is the ECMAScript internationalisation

00:20:04,879 --> 00:20:14,289
API. Which says that you will just be able to do one call and get the user's time zone

00:20:14,289 --> 00:20:22,269
identifier as determined by their operating system. Unfortunately you can't do that cross

00:20:22,269 --> 00:20:28,029
browser right now, the first version of the specification had some very undefined behaviour

00:20:28,029 --> 00:20:33,129
that been fixed up in version 2, Chrome is the only browser that give you this right

00:20:33,129 --> 00:20:41,440
now. It will do away with a lot of the problems that I have encountered.

00:20:41,440 --> 00:20:48,700
This is also led into someone wanting to do a navigator.time zone much shorter API, a

00:20:48,700 --> 00:20:53,950
way of getting that. It properly won't get through because of the previous API but people

00:20:53,950 --> 00:20:59,479
are trying to work at better ways of doing this.

00:20:59,479 --> 00:21:03,840
The current problem with the time zone database as well is that every time there's a release

00:21:03,840 --> 00:21:07,289
you have to be notified of it you pretty much just

00:21:07,289 --> 00:21:12,159
have to sign up to a mailing list, find out when there was a new release, download the

00:21:12,159 --> 00:21:17,429
new version, add it back into your software, see how that goes. There are some people trying

00:21:17,429 --> 00:21:22,309
to work on a distribution service so you just subscribe to the service when there's a new

00:21:22,309 --> 00:21:27,239
update you just get given the automatically.

00:21:27,239 --> 00:21:33,259
There is one thing I won't listen to as a solution. Which is swatch internet time, or

00:21:33,259 --> 00:21:40,970
also known as removing the concept of time zones altogether. Understand Stefano he wrote

00:21:40,970 --> 00:21:51,179
a very good blog post, if you remove the concept of time zones and just puts the entire world

00:21:51,179 --> 00:21:56,200
on one single time reference, it still doesn't help you know whether someone on the other

00:21:56,200 --> 00:22:00,649
side of the world us awake or asleep at the same time as you. It still doesn't let you

00:22:00,649 --> 00:22:05,379
know if they are at work or at home. It just changes the reference point but it doesn't

00:22:05,379 --> 00:22:07,749
solve the problem.

00:22:07,749 --> 00:22:17,149
Ok so we're getting to the end of a long day, and I just want you to remember three key

00:22:17,149 --> 00:22:24,729
things when dealing with time zones. The first one is do you really need a time zone and

00:22:24,729 --> 00:22:29,590
a time zone definition or do you just need the concept of local time? They are 2 very

00:22:29,590 --> 00:22:35,350
different things. For the majority of cases I have seen, you just need to know what the

00:22:35,350 --> 00:22:40,450
local time is for the user at that moment in time.

00:22:40,450 --> 00:22:45,119
The next one is if you deal with time zones you will be wrong. I don't know where, I don't

00:22:45,119 --> 00:22:51,830
know when but you will be wrong somehow. It's like a moment of Zen, you embrace it, you

00:22:51,830 --> 00:22:57,700
hold on to it you move on you try to minimise how wrong you are. {laughter}

00:22:57,700 --> 00:23:06,159
The final one is these problems have existed for a lot longer than JavaScript has. There

00:23:06,159 --> 00:23:13,440
have been people working on these problems since before our language existed. Time zones

00:23:13,440 --> 00:23:19,799
are hard and a lot of people have put a lot of work into trying to make them easier to

00:23:19,799 --> 00:23:24,809
deal with in software. We should learn from the decades of experience of these people,

00:23:24,809 --> 00:23:28,509
and not try and reinvent the wheel. Learn from them, don't ignore history. Thank you

00:23:28,509 --> 00:23:28,909

YouTube URL: https://www.youtube.com/watch?v=2BdFg5JT9lg


