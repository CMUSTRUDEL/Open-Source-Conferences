Title: Peter MÃ¼ller: Transpiling Recomposed | JSConf EU 2015
Publication date: 2015-10-18
Playlist: JSConf EU 2015
Description: 
	Modern web developers have become heavily dependent on abstractions like jade, sass or ES6. These are powerful tools, but to themselves require new abstractions, wrappers and runners. The rate at which new tools, workflows and even languages are appearing is staggering. Each iteration adds more complexity and less interoperability.

So how do we expect newcomers to be able to enter our field when we can hardly keep up ourself?

This will be an exploration of our tool chains with a focus on transpilers. The mission: To identify moving parts, recompose and simplify for the good of the current and future generation of developers.

Intro music by @halfbyte
Captions: 
	00:00:24,250 --> 00:00:25,560
Thank you.

00:00:25,560 --> 00:00:30,000
Hello everyone I am Peter, I am hoping that you are still awake, this is the post lunch

00:00:30,000 --> 00:00:32,000
crowd I am aware of that.

00:00:32,000 --> 00:00:38,890
This guy on Twitter, even though my nickname is actually 23 years old I was very late to

00:00:38,890 --> 00:00:42,290
Twitter so I have the underscores.

00:00:42,290 --> 00:00:48,370
I work at a company called Citryx Copenhagen on a produced called Podio, where I am the

00:00:48,370 --> 00:00:56,170
front-end lead very short for the history buffs amongst you Podio is a hyper card for

00:00:56,170 --> 00:01:02,760
the web, software service thing plus a bit of collaboration on top of that.

00:01:02,760 --> 00:01:09,360
I have also been an organiser of Copenhagen.js for a couple of years, some of you might recognise

00:01:09,360 --> 00:01:17,950
yourself on this image, if you want to leave it there for a minute.

00:01:17,950 --> 00:01:22,820
If you have ever heard about me from the open source circle you might have heard of my project

00:01:22,820 --> 00:01:29,770
called Assetgraph which is yet another build tool with a different approach and I can't

00:01:29,770 --> 00:01:33,920
stop talking about it so if you want to learn about this poke me in one of the breaks and

00:01:33,920 --> 00:01:36,670
find me.

00:01:36,670 --> 00:01:41,820
This is yet another build tooling talk but this one is specific to transpiler so in case

00:01:41,820 --> 00:01:47,830
you don't no what a transpiler is it's a compiler instead of compiling source code into machine

00:01:47,830 --> 00:01:51,800
code it compiles it into a different type of source code.

00:01:51,800 --> 00:02:02,040
In this case on your right hand side which is over here for you yes, is the machine code

00:02:02,040 --> 00:02:06,799
which in our case is CSS HTML JavaScript and things like that.

00:02:06,799 --> 00:02:12,560
On the left hand which is really confusing when it's opposite, you have the source code

00:02:12,560 --> 00:02:18,299
that you would like to write, this is your ES6, Sass, stuff like that.

00:02:18,299 --> 00:02:24,180
Any time in this talk when I mention transpiler or transpiling you can substitue for any of

00:02:24,180 --> 00:02:33,060
these in your mind, Saas, CoffeeScript, Babel, TypeScript, Markdown or whatever.

00:02:33,060 --> 00:02:37,530
Odds are some of you have used one of these.

00:02:37,530 --> 00:02:40,120
So these are all transpilers.

00:02:40,120 --> 00:02:43,730
This talk is about why transpiling is a problem.

00:02:43,730 --> 00:02:49,090
I don't have a problem with transpilers there was, transpilers are really awesome unix type

00:02:49,090 --> 00:02:54,380
tools which take 1 or more inputs and give you one output and that is actually really

00:02:54,380 --> 00:02:56,269
simple and really good.

00:02:56,269 --> 00:03:01,900
The problem I have is with one of the side affects that come with some of the build systems

00:03:01,900 --> 00:03:08,480
that people use when they integrate transpilers into their work.

00:03:08,480 --> 00:03:13,980
The primary culprit here is the build artefact.

00:03:13,980 --> 00:03:16,430
The build artefact is the thing that your browser

00:03:16,430 --> 00:03:24,600
consumes or that other tools consume it's again your CSS, JavaScript, your HTML.

00:03:24,600 --> 00:03:29,709
Build artefacts have a transient nature, they are not the thing we're actually interested

00:03:29,709 --> 00:03:34,010
in, but they are the thing that we need to produce in order for the machine to understand

00:03:34,010 --> 00:03:35,990
what we're doing.

00:03:35,990 --> 00:03:41,020
So this means that we want build the artefacts but primarily for consumption we're not really

00:03:41,020 --> 00:03:47,790
interested in storing them until we actually want to deploy our websites.

00:03:47,790 --> 00:03:53,790
This gives us a weird duality and gives us some problems with work field setups, let

00:03:53,790 --> 00:04:00,710
do a workflow set up of a project right now so I can show you why this complex.

00:04:00,710 --> 00:04:05,840
So first of all, the simplest possible way you can do transpiling is you transpile your

00:04:05,840 --> 00:04:10,269
source code into the target code in the same directory.

00:04:10,269 --> 00:04:14,879
They are sibling files, in this case you have your main Sass final which gets compiled into

00:04:14,879 --> 00:04:21,190
your main CSS file it's a sibling it's easy to understand you know where to find your

00:04:21,190 --> 00:04:22,190
code.

00:04:22,190 --> 00:04:28,800
So we're not interested in the build artefacts so let's add and ignore for CSS files in our

00:04:28,800 --> 00:04:32,440
source directory so we don't version control them anymore.

00:04:32,440 --> 00:04:37,120
This is what most people do it's easiest to main then.

00:04:37,120 --> 00:04:43,060
Now the first problem arrives because eventually because the code that we produce as build

00:04:43,060 --> 00:04:48,880
art facts is the same code we might also write in other cases, you might have other CSS files

00:04:48,880 --> 00:04:51,770
in your directory your source directory.

00:04:51,770 --> 00:04:56,500
These might also be JavaScript files it's completely valid to have files of the extension

00:04:56,500 --> 00:04:58,930
that the browser consumes in your source directory.

00:04:58,930 --> 00:05:03,000
So if you start ignoring them you are in a world of pain.

00:05:03,000 --> 00:05:04,000
So we don't do this.

00:05:04,000 --> 00:05:05,520
This is a bad idea.

00:05:05,520 --> 00:05:11,000
What most people have come up with is a set up where you have your app and your main Sass

00:05:11,000 --> 00:05:13,960
file you compile into a directory called artefact.

00:05:13,960 --> 00:05:20,310
Or temp I think most people use underscore temp in yeoman set up at least your main CCSS

00:05:20,310 --> 00:05:21,680
resides here.

00:05:21,680 --> 00:05:26,741
You can very easily ignore from version control all your build artefacts you simple ignore

00:05:26,741 --> 00:05:29,710
the folder where they exist.

00:05:29,710 --> 00:05:35,780
This is pretty nice, but now you URL are sort of broken because the source code is not actually

00:05:35,780 --> 00:05:40,190
where you expect to it be it's in a different directory it might even be in a directory

00:05:40,190 --> 00:05:42,169
outside of your web route.

00:05:42,169 --> 00:05:47,940
So, in order to deal with this, people have come up with this nice set up where you can

00:05:47,940 --> 00:05:53,990
add a piece of middleware to your web server this will know about the existence of a build

00:05:53,990 --> 00:05:56,580
artefacts in a different directory.

00:05:56,580 --> 00:06:03,510
In the first we get we see that the web server is looking for main.CSS in the directory,

00:06:03,510 --> 00:06:11,210
then looking for index.HTML in the artefacts directory, it might not actually be a transpiled

00:06:11,210 --> 00:06:13,070
build artefact.

00:06:13,070 --> 00:06:18,570
So when it guess 404 it falls back to original source directory then gets a correct hit on

00:06:18,570 --> 00:06:19,570
index.HTML.

00:06:19,570 --> 00:06:23,300
Then we have a piece of middleware that needs to know something about your workflow set

00:06:23,300 --> 00:06:25,889
up.

00:06:25,889 --> 00:06:30,910
So next of all you probably want to somehow trigger your builds get it tedious to manually

00:06:30,910 --> 00:06:35,580
run these tasks just as you don't like refreshing your browser you probably don't like running

00:06:35,580 --> 00:06:39,200
mate or Grunt whatever you use.

00:06:39,200 --> 00:06:45,410
Usually people set up file watching they watch all the CSS files all the Sass files it should

00:06:45,410 --> 00:06:50,560
have been in the source directory, and whenever you have a

00:06:50,560 --> 00:06:56,110
source file increment whenever you make a change, you trigger the transpiled task we

00:06:56,110 --> 00:07:00,380
set up before then you get your updated build artefact.

00:07:00,380 --> 00:07:06,280
While we're added usually people set up library loading so whenever build artefact gets updated

00:07:06,280 --> 00:07:10,340
the browser will also update so you can see your changes.

00:07:10,340 --> 00:07:15,341
This is pretty nice but in order to orchestrate this now you have a task, now you have a web

00:07:15,341 --> 00:07:19,319
server that needs to know about things, now you have a file watcher you have a library

00:07:19,319 --> 00:07:23,521
loader, this is a lot to do manually so you probably want to have some sort of task runner

00:07:23,521 --> 00:07:26,870
to orchestrate all of these things at the same time.

00:07:26,870 --> 00:07:35,330
So people in here probably used at some point in time Grunt, Gulp, Broccoli, Make even you

00:07:35,330 --> 00:07:38,020
can do that.

00:07:38,020 --> 00:07:39,440
That's about it.

00:07:39,440 --> 00:07:45,630
For workflow set up for CSS, but these days we're not only transpiling CSS, we're also

00:07:45,630 --> 00:07:47,190
transpiling JavaScript.

00:07:47,190 --> 00:07:52,710
JavaScript is consumed by more consumers than just the browser or your build system.

00:07:52,710 --> 00:07:58,660
So suddenly we need to also think about how does this build artefact integrate or how

00:07:58,660 --> 00:08:04,360
does my workflow tooling integrate with all the other consumers of my build artefact.

00:08:04,360 --> 00:08:12,960
How does the task runner understand ES6, how does my production bundler understand ES6

00:08:12,960 --> 00:08:15,560
how does my test framework understand it.

00:08:15,560 --> 00:08:21,160
The solution for these are usually oh you just have each of these tool implement a plug-in

00:08:21,160 --> 00:08:26,720
framework so you can use Babel plug-in for you linter and you middleware and task runner

00:08:26,720 --> 00:08:33,210
and production bundler and test framework and your module loader and for anything else

00:08:33,210 --> 00:08:36,229
that might be touching your source code.

00:08:36,229 --> 00:08:40,740
You need a plug-in for each of these for each of the types of languages you want to transpile,

00:08:40,740 --> 00:08:45,610
just start multiplying the amount of plug-ins you need.

00:08:45,610 --> 00:08:51,819
So some people think this is okay, the word I use for it is "complex."

00:08:51,819 --> 00:09:00,140
I think this is way too complex but don't worry there's a solution for this complexity,

00:09:00,140 --> 00:09:04,010
obviously you don't want to set up a system like this by hand every time you create anew

00:09:04,010 --> 00:09:10,160
project, so we simply say oh we can order generate it then it's easy.

00:09:10,160 --> 00:09:15,730
Because I only need to run one command, but this is easy it's not simple.

00:09:15,730 --> 00:09:18,940
It's easy but creates a lot of complexity.

00:09:18,940 --> 00:09:25,050
The problem is when anything goes wrong, in this set up, imagine you're a newbie, you

00:09:25,050 --> 00:09:29,950
are sitting in a code dojo and somebody tells you to run a webapp and something goes wrong

00:09:29,950 --> 00:09:33,790
and all you see is this.

00:09:33,790 --> 00:09:40,140
Your first question is, how does it work?

00:09:40,140 --> 00:09:42,580
Why is it even set up in that way?

00:09:42,580 --> 00:09:46,570
You might have been able to follow me right here, because you have all done this before,

00:09:46,570 --> 00:09:51,310
you have all felt the pain, the kind of understand which moving parts are here, but a new newbie

00:09:51,310 --> 00:09:56,700
doesn't a this a big problem.

00:09:56,700 --> 00:10:01,290
Whenever I say workflow tool is complex there's always at least one person in the room that

00:10:01,290 --> 00:10:09,760
says "oh you know Peter my set up is special, my set up has legacy.

00:10:09,760 --> 00:10:15,820
My set up has complexity" so we need this complexity.

00:10:15,820 --> 00:10:19,560
We need it.

00:10:19,560 --> 00:10:26,350
I promised Peter Fantazi(?) to say people who say this are doing it wrong, you're doing

00:10:26,350 --> 00:10:29,060
it wrong if you ever said this you need complexity.

00:10:29,060 --> 00:10:33,370
You don't need complexity you need ability.

00:10:33,370 --> 00:10:37,610
The ability is what your tools are supposed to give you, they are not supposed to give

00:10:37,610 --> 00:10:39,070
you complexity.

00:10:39,070 --> 00:10:46,200
The ideal tool gives you maximum ability and minimum complexity, also called simplicity.

00:10:46,200 --> 00:10:52,940
So what we should strive for is to build tools that are simple.

00:10:52,940 --> 00:10:59,110
So let's figure out what these moving parts are, what are the important attributes of

00:10:59,110 --> 00:11:04,110
transpiling that we actually want in, in order to gain this ability, then recompose them

00:11:04,110 --> 00:11:09,680
in a way so we can actually gain this ability with minimum complex overhead so that a new

00:11:09,680 --> 00:11:16,330
person is able to say I want to use transpiler but don't want to buy into a massive ecosystem,

00:11:16,330 --> 00:11:20,670
I want this one ability to transpile and nothing else.

00:11:20,670 --> 00:11:23,959
Maybe I don't even want a web server.

00:11:23,959 --> 00:11:29,680
So the things I have come up with, this might not be a complete list, some of these might

00:11:29,680 --> 00:11:33,470
also and not necessarily have to be there but it's a good guideline right?

00:11:33,470 --> 00:11:42,300
I think in order to avoid this idiocy of having a million transpiled plug-ins for everything,

00:11:42,300 --> 00:11:46,170
we should figure out a way to have a tool that can actually just handle all types of

00:11:46,170 --> 00:11:51,649
transpilers, let's figure out how to unify that a single transpiler can transpile more

00:11:51,649 --> 00:12:00,380
than one thing, we can clean up MPM, we don't need all the plug-ins we don't need that any

00:12:00,380 --> 00:12:04,089
more, let's figure out how to do this.

00:12:04,089 --> 00:12:12,440
Needs a good API, integrate with other tools, the best APII can come up with is a file system,

00:12:12,440 --> 00:12:16,430
because any tool can interact with a file system.

00:12:16,430 --> 00:12:22,510
It should be stand alone and shouldn't impose a big, nasty ecosystem on you, it should be

00:12:22,510 --> 00:12:27,820
doing on-demand transpilation, so some task runners are actually not doing that right

00:12:27,820 --> 00:12:30,050
now, going to come back to that.

00:12:30,050 --> 00:12:37,130
Should keep URLs valid, if you can trace a URL from your browser down directly to your

00:12:37,130 --> 00:12:42,149
source code and find your files on disk that makes everything more simple.

00:12:42,149 --> 00:12:46,029
I think it should be nice, it should have all the nice things that everybody wants to

00:12:46,029 --> 00:12:55,620
have, sources maps, auto prefixes, caching, it should simply understand what needs to

00:12:55,620 --> 00:12:59,740
be done at the time you need it to be done.

00:12:59,740 --> 00:13:04,610
With that also comes, there should be a simple mental model if you can't explain how this

00:13:04,610 --> 00:13:10,160
tool works within one or two sentences, then it's probably too much.

00:13:10,160 --> 00:13:17,389
So, let's see how the current set up stacks up, I'm a bit critical here so maybe more

00:13:17,389 --> 00:13:19,860
check marks over here.

00:13:19,860 --> 00:13:24,830
Task runners, they definitely handle all types of transpilers with a lot of plug-ins which

00:13:24,830 --> 00:13:33,769
I don't like, give us source maps, auto prefixing caching things like that, some of them have

00:13:33,769 --> 00:13:37,310
a really, really horrible API, most of them actually.

00:13:37,310 --> 00:13:43,440
They are definitely not stand alone, they do by definition impose an ecosystem that

00:13:43,440 --> 00:13:50,850
we have to work within, you cannot, like my - that runs on file systems cannot consume

00:13:50,850 --> 00:13:59,880
a Gulf stream, transpilers transpile on file change, they also transpile things that you

00:13:59,880 --> 00:14:03,900
might not actually be using at the moment, that's a lot of waste of resource cycles fright

00:14:03,900 --> 00:14:10,329
there, don't keep URLs valid, at least if you have a set up where you have your built

00:14:10,329 --> 00:14:16,269
artefacts outside of your web route, they definitely have a lot of configuration, that's

00:14:16,269 --> 00:14:21,670
the primary things that these task runners have and I don't think they're simple.

00:14:21,670 --> 00:14:29,320
Now, I don't want to hate on task runners, I think that task runners are actually instrumental

00:14:29,320 --> 00:14:31,490
to getting us to where we are.

00:14:31,490 --> 00:14:37,130
I think they have created a very stable foundation to develop tools on and I think we should

00:14:37,130 --> 00:14:41,730
thank them for that, but I also think that they have been an incremental

00:14:41,730 --> 00:14:48,910
optimisation towards a local optimum, I think we can maybe do a leap and figure out if there

00:14:48,910 --> 00:14:53,730
is a more optimal way to do this.

00:14:53,730 --> 00:14:58,730
One of the concepts that I've been thinking about is control flow with this, most of these

00:14:58,730 --> 00:15:03,170
task runners are based on a control flow that says, whenever you change your source code

00:15:03,170 --> 00:15:07,769
I'm doing some work and then I might tell you about it.

00:15:07,769 --> 00:15:12,779
It's actually possible to reverse these there are a few points in this set up where you

00:15:12,779 --> 00:15:18,329
can actually hook in and do the opposite, you can figure out whenever somebody wants

00:15:18,329 --> 00:15:24,140
to consume an asset and then you can intercept that and then you can do something about it.

00:15:24,140 --> 00:15:28,940
So one of the things that I've been using instead of using a task runner for transpiling

00:15:28,940 --> 00:15:36,279
is a piece of middleware, this sits in my express server and by having this ability

00:15:36,279 --> 00:15:46,760
to intercept requests you can integrate all types of transpilers, you can figure out the

00:15:46,760 --> 00:15:52,600
browser wants this, I'll just go and fetch, it also reduces the configuration, because

00:15:52,600 --> 00:15:57,500
I don't need to configure a path, the browser will tell me the path it wants and I can read

00:15:57,500 --> 00:16:05,220
it from the file system here, do the changes, map it, or prefix it and keep the URLs valid,

00:16:05,220 --> 00:16:08,690
it's kind of simple to understand, it's a pipeline and on the way through some work

00:16:08,690 --> 00:16:13,770
is done, right, but it's missing some check points.

00:16:13,770 --> 00:16:20,380
Not all my tools are consuming HTTP, that's a problem, so I still need to have all these

00:16:20,380 --> 00:16:26,949
plug-ins for command line tools and I still get all the complexity of having these plug-ins.

00:16:26,949 --> 00:16:34,149
So, I've thought a lot about this idea and last year on, on this very stage actually,

00:16:34,149 --> 00:16:43,000
on this spot, Mattheus was demoing Wiki streamed and stuff, he was using a technology that

00:16:43,000 --> 00:16:48,660
was really cool, instead of explaining a lot about that, I'd like to jump into a demo and

00:16:48,660 --> 00:16:54,880
show you what I'm able to do by using this idea that he gave me.

00:16:54,880 --> 00:17:00,690
So I'll jump into my console, this is big enough text, looks good.

00:17:00,690 --> 00:17:06,260
New be developer, just at out of the coding dojo.

00:17:06,260 --> 00:17:18,699
I have a sources folder with my awesome website, it's really down-to-earth, hello world, index

00:17:18,699 --> 00:17:20,159
HTML, stuff like that.

00:17:20,159 --> 00:17:27,980
I can show you here, it looks like this, hello JSConf.eu, it has a Cat image, every good

00:17:27,980 --> 00:17:33,270
website should have a Cat image, I can open this thing and you can see it.

00:17:33,270 --> 00:17:39,690
It's a good example of a starter website I have, a heading, "Hello world", I've given

00:17:39,690 --> 00:17:45,010
it a colour so I can interact with things, a Cat image, it's always good for learning

00:17:45,010 --> 00:17:51,000
and I wrote it a bit, so again I can interact with things.

00:17:51,000 --> 00:17:57,970
So one year later I'm slightly more experienced webpage developer and now I'm ready to take

00:17:57,970 --> 00:18:00,910
on the concept of an abstraction.

00:18:00,910 --> 00:18:08,860
So, what I would like to do, is I would like to be able to abstract my colour into a variable.

00:18:08,860 --> 00:18:17,260
So I ask someone and everybody in the room here would probably say I need SASS.

00:18:17,260 --> 00:18:28,510
So my sources file, my main file, I thought I would open it, I've already prepared a bit,

00:18:28,510 --> 00:18:36,760
I'm really, really bad at live coding, I create the colour, no longer purple, but hot pink,

00:18:36,760 --> 00:18:43,690
a bit closer to the JSConf.eu colour, now the heading should be hot pink, right.

00:18:43,690 --> 00:18:51,020
There is one more thing I need to do in order to make this SASS, I need to move my file

00:18:51,020 --> 00:19:03,760
from sources main dot CSS, to main dot - it means when I reload my page, in this case

00:19:03,760 --> 00:19:08,250
it doesn't work, it doesn't work because I've moved the file and it doesn't see the file

00:19:08,250 --> 00:19:10,140
at all.

00:19:10,140 --> 00:19:14,660
Now I'm ready to integrate my transpiler, right.

00:19:14,660 --> 00:19:19,820
So this is where I have a tool that I'd like to demonstration for you, the tool is called

00:19:19,820 --> 00:19:31,690
fusile, a command line tool, I would tell it, can you create a directory call, "DEV",

00:19:31,690 --> 00:19:39,700
before you do this you can see there isn't one, when I run the command it tells me I've

00:19:39,700 --> 00:19:49,370
run some transpilers, babel, the done then I have those in my node modules, you will

00:19:49,370 --> 00:19:56,690
see there is a directory here, with kind of a weird, file size, summary, that doesn't

00:19:56,690 --> 00:20:03,250
quite make sense, but it's called 'DEV', if you see the tree of the sources files compared

00:20:03,250 --> 00:20:07,610
to the tree of the DEV files, they look kind of similar, right, they contain pretty much

00:20:07,610 --> 00:20:15,540
the same files, except for one difference, in my sources directory, main CSS, target

00:20:15,540 --> 00:20:19,070
directory, DEV directory it's called main.

00:20:19,070 --> 00:20:26,280
CSS, what did it do, I can show you what it did.

00:20:26,280 --> 00:20:31,220
It actually compiled the SASS for me, immediately.

00:20:31,220 --> 00:20:43,880
What I just did here I consumed the - on command it compiled the SASS for me, using the colour

00:20:43,880 --> 00:20:52,330
variable, applied auto brief fixing and sources mapping, if I open this awesome webpage again,

00:20:52,330 --> 00:20:58,280
it's hot pink and has the rotation and everything, it's pretty awesome.

00:20:58,280 --> 00:21:06,540
This does not only work for, for SASS, it also works for, probably, hello world file,

00:21:06,540 --> 00:21:16,240
an ES 6 syntax file, I can show you the output of that, when I read it from the DEV directory

00:21:16,240 --> 00:21:18,900
and it's compiled it.

00:21:18,900 --> 00:21:25,710
It's pretty cool, I ran this one command line tool, this configuration and it does the right

00:21:25,710 --> 00:21:35,150
thing for me.

00:21:35,150 --> 00:21:41,190
So the project is called fusile, it has the same properties of the express middleware

00:21:41,190 --> 00:21:47,950
that I went through before, but it also checks the two other boxes I think, good API, file

00:21:47,950 --> 00:21:54,960
system API, any other tool can consumer there is, Linter, tester, you don't need a web server

00:21:54,960 --> 00:22:05,790
that's clever any more, Python Apache it doesn't need to be spare for your application, it

00:22:05,790 --> 00:22:12,120
stands alone, I only know how to programme node, if you know how to write this in C,

00:22:12,120 --> 00:22:14,570
come poke me and we can do that.

00:22:14,570 --> 00:22:21,220
Behind the scenes it's using library called Fuse, file system in user space, it's actually

00:22:21,220 --> 00:22:27,130
just mounting this virtual directory and when I read the files I can intercept the things

00:22:27,130 --> 00:22:34,210
just like the middleware and do work to them, inside it's a basic streaming pipeline like

00:22:34,210 --> 00:22:38,309
in gulp if you do transpiling.

00:22:38,309 --> 00:22:45,250
So it's an open sources project, it is publicly available and it is on MPM, on version 103

00:22:45,250 --> 00:22:47,350
or something.

00:22:47,350 --> 00:22:52,340
It's not entirely well tested, but it is definitely development-ready, I would love for you to

00:22:52,340 --> 00:22:57,840
go in and try this out and see if you can make it work for your set up, I'm definitely

00:22:57,840 --> 00:23:04,160
going to make this work on my work set up, I want these tools to succeed or at least

00:23:04,160 --> 00:23:06,970
the idea to succeed.

00:23:06,970 --> 00:23:13,890
So, look this up, give me some feedback and chat me up in the break and I can tell you

00:23:13,890 --> 00:23:18,510
more about it, but I want to leave you with this, this is not only about the single tool,

00:23:18,510 --> 00:23:21,600
it's about the concept of tools.

00:23:21,600 --> 00:23:26,870
I want you to remember that tools are there to provide ability and you should reject any

00:23:26,870 --> 00:23:31,390
complexity that they add, or at least question it all the time.

00:23:31,390 --> 00:23:33,900
You should demand simplicity.

00:23:33,900 --> 00:23:40,390
This is what tooling is all about, so I think you should look through your text, see what

00:23:40,390 --> 00:23:45,490
things do you have that actually don't give you any benefits, figure out how they can

00:23:45,490 --> 00:23:47,010
be improved.

00:23:47,010 --> 00:23:51,960
If you can't do-it-yourself, ask on Twitter, I have this problem, how can we improve it.

00:23:51,960 --> 00:23:56,659
I think this is the way to move tooling forward, I would really like to give the next generation

00:23:56,659 --> 00:23:57,659
of

00:23:57,659 --> 00:24:02,539
web developers an easier starting point than we have, I don't want anybody mess we that

00:24:02,539 --> 00:24:08,279
the amount of configuration it takes to set this up manually.

00:24:08,279 --> 00:24:14,490
My slides are here, you can follow me here and occasionally blog on this URL, I want

00:24:14,490 --> 00:24:15,890
to thank you for listening to me.

00:24:15,890 --> 00:24:16,000

YouTube URL: https://www.youtube.com/watch?v=MptY6ff4tOQ


