Title: Panos Astithas: Write once, debug everywhere, from Firefox | JSConf EU 2015
Publication date: 2015-10-12
Playlist: JSConf EU 2015
Description: 
	Remember the old joke about how the Java slogan “write once, run everywhere” was more like “write once, debug everywhere”? Good one. Actually, many people say this about the Web, too. In fact, it would be more accurate in our case to state it as “write once, debug everywhere, each time with different tools”. But does it have to be that way?

A new Firefox feature called Valence allows you to debug your web app in any target environment: Firefox, Chrome, iOS, Android, you name it. Does it actually work? How does it work? Can we expect more from it? How can other browsers use it? In this talk we will find the answers to these questions and discuss the accuracy of the tentative slogan “write once, debug everywhere, from Firefox” (or lack thereof).

Intro music by @halfbyte
Captions: 
	00:00:25,310 --> 00:00:30,230
Panos is from Mozilla, which I also want to mention upstairs, the mozilla lounge

00:00:30,230 --> 00:00:33,570
is going to be doing a workshop right after this talk,

00:00:33,570 --> 00:00:38,160
it could be in Firefox, OS, either way, go and check it

00:00:38,160 --> 00:00:39,160
out.

00:00:39,160 --> 00:00:40,160
It could be a lot of fun.

00:00:40,160 --> 00:00:44,580
He is going to be talking to us today about testing various browsers from

00:00:44,580 --> 00:00:47,579
firefox, so he'll take it from here.

00:00:47,579 --> 00:00:48,680
Another round of applause.

00:00:48,680 --> 00:00:50,840
Thank you, everyone.

00:00:50,840 --> 00:00:51,840
[applause].

00:00:51,840 --> 00:00:53,000
Thank you.

00:00:53,000 --> 00:00:54,440
Good morning.

00:00:54,440 --> 00:00:59,629
I am Panos Astithas and the title of my talk this morning is write

00:00:59,629 --> 00:01:05,369
once, debug everywhere, from Firefox, and the title came

00:01:05,369 --> 00:01:08,600
from my previous experiences as a Java developer back

00:01:08,600 --> 00:01:13,180
in the day when the motto used to be write once, write

00:01:13,180 --> 00:01:16,120
everywhere, and we used to be so excited about it and

00:01:16,120 --> 00:01:21,950
jump around, and later we discovered that the actual state

00:01:21,950 --> 00:01:25,090
of things was write once, debug everywhere.

00:01:25,090 --> 00:01:27,750
Which wasn't so good.

00:01:27,750 --> 00:01:32,179
Then as we grew up and moved on to web development, what

00:01:32,179 --> 00:01:35,200
I discovered was that the reality here is more like

00:01:35,200 --> 00:01:38,859
write once, debug everywhere, each time with different

00:01:38,859 --> 00:01:41,439
tools, which is even worse.

00:01:41,439 --> 00:01:49,429
So in a way my talk today is about how we could make the tools we use

00:01:49,429 --> 00:01:54,110
talk each other, because tools, as well as people, get

00:01:54,110 --> 00:01:56,979
better when they communicate.

00:01:56,979 --> 00:01:59,719
So just a few words about me.

00:01:59,719 --> 00:02:03,700
I work on Firefox for the past 4 years, recently as a tech lead

00:02:03,700 --> 00:02:06,740
for Valence, the project I'm going to be talking about

00:02:06,740 --> 00:02:07,740
today.

00:02:07,740 --> 00:02:11,230
Previously, I worked on the network panel, lots of

00:02:11,230 --> 00:02:14,740
stuff, and even before that, I did things like service

00:02:14,740 --> 00:02:18,080
site development, mobile development, and I really felt

00:02:18,080 --> 00:02:23,680
the pain of having to use different development environments for a single project.

00:02:23,680 --> 00:02:29,940
So this is something that I would like to see fixed.

00:02:29,940 --> 00:02:35,519
Today we'll talk about the problem, and I'll speak about Valence,

00:02:35,519 --> 00:02:39,500
the solution we think fits the domain.

00:02:39,500 --> 00:02:43,480
I'll talk more about how it works, what you can do with it, what kind

00:02:43,480 --> 00:02:49,900
of debug targets you can use it towards, why we chose

00:02:49,900 --> 00:02:53,140
to ship it as an add-on instead of bundling it inside

00:02:53,140 --> 00:02:59,180
Firefox, how do you install it, and as an engineer, I consider

00:02:59,180 --> 00:03:02,040
it my moral obligation to have at least one slide

00:03:02,040 --> 00:03:05,099
in my talks with actual code, so we'll get to do that

00:03:05,099 --> 00:03:07,760
near the end.

00:03:07,760 --> 00:03:09,530
So the problem.

00:03:09,530 --> 00:03:17,500
I'm not sure if you have recently seen the desks of web developers who are really

00:03:17,500 --> 00:03:22,030
passionate about their work, and have to test their code

00:03:22,030 --> 00:03:26,010
in many different environments from other browsers, from

00:03:26,010 --> 00:03:32,019
other device form factors, but the ones that I've seen

00:03:32,019 --> 00:03:35,129
usually look a little bit like this.

00:03:35,129 --> 00:03:38,049
Which is kind of insane.

00:03:38,049 --> 00:03:42,360
You know the left one tests Firefox and the other one tests Chrome, and in the middle

00:03:42,360 --> 00:03:44,810
it is IE, or iPad simulator, or whatever.

00:03:44,810 --> 00:03:50,170
But what I really want to do and really want to work with is something

00:03:50,170 --> 00:03:52,380
more like that.

00:03:52,380 --> 00:03:57,769
Like the serenity of a single laptop, empty desk

00:03:57,769 --> 00:04:01,810
that has space for notebook, even with espresso on the

00:04:01,810 --> 00:04:02,810
side.

00:04:02,810 --> 00:04:05,400
This is the dream, right?

00:04:05,400 --> 00:04:09,140
So let's break the test down.

00:04:09,140 --> 00:04:15,891
I am your average developer, I have this web app, this excuse of a web app, which is my

00:04:15,891 --> 00:04:19,829
website, but bear with me, and I want to make sure it works

00:04:19,829 --> 00:04:25,000
correctly across all browsers, all form factors.

00:04:25,000 --> 00:04:26,050
How do I start?

00:04:26,050 --> 00:04:29,360
I'm a Firefox fan, I'm most comfortable with the Firefox

00:04:29,360 --> 00:04:32,100
tools, so I make sure it works on Firefox first.

00:04:32,100 --> 00:04:38,030
You have to start somewhere, so I use the tools,

00:04:38,030 --> 00:04:43,690
and I inspect my code, I debug it, I test the

00:04:43,690 --> 00:04:48,190
performance, I fine tune it around here, so in the end, it's

00:04:48,190 --> 00:04:49,200
okay, I'm happy.

00:04:49,200 --> 00:04:51,610
I'm done.

00:04:51,610 --> 00:04:54,280
And I want to make sure that it works in Chrome.

00:04:54,280 --> 00:05:00,270
So what I do, I fire up Chrome, I fire up Chrome developer tools, and I'm presented

00:05:00,270 --> 00:05:03,139
with a slightly different environment.

00:05:03,139 --> 00:05:06,770
It is not that this is completely different, like an entirely

00:05:06,770 --> 00:05:11,699
outlandish piece, but more like the layout is slightly

00:05:11,699 --> 00:05:14,740
weird to what I'm expecting, and maybe the labels are

00:05:14,740 --> 00:05:20,860
different or are the same, but do something different.

00:05:20,860 --> 00:05:23,669
I'm an experienced developer, I can manage, put some

00:05:23,669 --> 00:05:27,750
effort into it, fix the quirks that manifest only

00:05:27,750 --> 00:05:31,740
in this particular browser, and when I'm done in move

00:05:31,740 --> 00:05:33,789
on to the next thing, Safari.

00:05:33,789 --> 00:05:41,550
I start Safari, open the web tools which are again different, and I don't see

00:05:41,550 --> 00:05:47,610
many labels here, I see more icons, lot of purple, maybe,

00:05:47,610 --> 00:05:51,639
and perhaps the motivation I have for doing this

00:05:51,639 --> 00:05:56,910
kind of work starts to diminish, because I get less

00:05:56,910 --> 00:06:00,890
productive because the tools are not working as I expected

00:06:00,890 --> 00:06:02,630
them to be.

00:06:02,630 --> 00:06:04,979
And I'm not even done yet, because next I have to

00:06:04,979 --> 00:06:08,220
move to IE and use another set of tools which looks

00:06:08,220 --> 00:06:12,569
entirely different, and to be fair this is not a failure

00:06:12,569 --> 00:06:13,880
of the tools themselves.

00:06:13,880 --> 00:06:18,840
They are finely crafted for their particular audiences and do their job

00:06:18,840 --> 00:06:19,840
well.

00:06:19,840 --> 00:06:23,129
The problem is that each developer has their own

00:06:23,129 --> 00:06:26,410
preference, and what they would like to do is use the

00:06:26,410 --> 00:06:30,379
tool they're most familiar with to debug a web application,

00:06:30,379 --> 00:06:35,170
a standard web application running on all platforms, all

00:06:35,170 --> 00:06:36,170
browsers.

00:06:36,170 --> 00:06:38,910
So let me remind you that we haven't even talked

00:06:38,910 --> 00:06:40,599
about mobile yet.

00:06:40,599 --> 00:06:44,550
So things should probably get better.

00:06:44,550 --> 00:06:47,410
The question I want to pose to you today is: is this as

00:06:47,410 --> 00:06:52,400
good as it gets, or can we do any better than that?

00:06:52,400 --> 00:06:55,669
And by better, I mean something like this.

00:06:55,669 --> 00:06:58,620
The tools that I'm comfortable with, at the Firefox developer

00:06:58,620 --> 00:07:03,860
tools, being able to debug a web app running in Chrome

00:07:03,860 --> 00:07:06,669
without me having to switch to a different tool set

00:07:06,669 --> 00:07:09,140
and learn a different paradigm.

00:07:09,140 --> 00:07:12,480
And I'm sure you won't be surprised to know that Valence provides exactly

00:07:12,480 --> 00:07:18,150
that, and we'll get to how this works in a minute.

00:07:18,150 --> 00:07:22,060
So Valence is an add-on that we developed that let's

00:07:22,060 --> 00:07:26,240
you debug web apps running in other browsers, but before

00:07:26,240 --> 00:07:30,449
I get to the details of how it works, it will be useful,

00:07:30,449 --> 00:07:34,379
I think, to give you a quick idea of how the developer

00:07:34,379 --> 00:07:40,070
tools in Firefox are architected, the main one is a

00:07:40,070 --> 00:07:44,050
tool piece that has the tool user interface, the thing

00:07:44,050 --> 00:07:50,860
you interact with by pressing buttons, typing in ink forms

00:07:50,860 --> 00:07:54,610
as the client for it, and that line communicates

00:07:54,610 --> 00:07:57,840
with the server through the Firefox debugging protocol,

00:07:57,840 --> 00:08:01,990
which has its own specification which is open, and everything

00:08:01,990 --> 00:08:03,789
of course is open source, but even the spec is

00:08:03,789 --> 00:08:05,310
documented.

00:08:05,310 --> 00:08:10,139
And the debug server is mostly a container for various

00:08:10,139 --> 00:08:13,699
actors which are entities that control the individual

00:08:13,699 --> 00:08:17,340
features of a low-level platform.

00:08:17,340 --> 00:08:23,310
Things like objects in the JavaScript virtual machine, stylesheets,

00:08:23,310 --> 00:08:28,240
individual styles, nodes in the mark-up, et cetera.

00:08:28,240 --> 00:08:33,360
Of course, in the bottom you'll have the browser range in which contains the virtual machine,

00:08:33,360 --> 00:08:36,250
the rendering edging and stuff like that.

00:08:36,250 --> 00:08:41,990
So in this architecture, when you introduce Valence,

00:08:41,990 --> 00:08:46,220
what it does is extends the debugger server with an adaptor

00:08:46,220 --> 00:08:50,110
that contains new actors that know how to speak

00:08:50,110 --> 00:08:55,910
to protocols to communicate with external browsers.

00:08:55,910 --> 00:08:58,750
So Valence provides you with the ability to target a

00:08:58,750 --> 00:09:04,760
remote browser and handle those individual platform features

00:09:04,760 --> 00:09:11,250
over the protocol.

00:09:11,250 --> 00:09:14,250
So Valence, what it does is it extends the debugger

00:09:14,250 --> 00:09:18,220
server, provides an adaptor for external browser back

00:09:18,220 --> 00:09:22,380
ends, it knows how to speak the WebKit and blink

00:09:22,380 --> 00:09:27,040
protocols, and in the future we hope even more.

00:09:27,040 --> 00:09:30,560
And it does that by being asynchronous to a whole

00:09:30,560 --> 00:09:34,300
new level, and I'll show you a little bit about that,

00:09:34,300 --> 00:09:36,410
and the way we manage to accomplish that is by making

00:09:36,410 --> 00:09:41,940
heavy use of ES6 or ES2015, as we heard before, promises

00:09:41,940 --> 00:09:43,700
and generator functions.

00:09:43,700 --> 00:09:50,730
It also includes a third-party open source library called IOS WebKit debug

00:09:50,730 --> 00:09:54,430
proxy, Google sponsored the Openkit project that

00:09:54,430 --> 00:10:00,220
provides a thin layer of transport to IOS devices like

00:10:00,220 --> 00:10:04,310
iPhones, iPads, even the IOS simulator, and we also

00:10:04,310 --> 00:10:08,610
bundle a windows clone of that project in our windows

00:10:08,610 --> 00:10:10,290
platform.

00:10:10,290 --> 00:10:15,800
With Firefox, what you can do is debug your web app in

00:10:15,800 --> 00:10:19,410
any Firefox project like desktop, Firefox on android,

00:10:19,410 --> 00:10:23,550
and IOS devices, phones, DVDs, etc, and with the

00:10:23,550 --> 00:10:27,779
addition of Valence you can now communicate running on

00:10:27,779 --> 00:10:33,890
debug on android and Safari, and IOS and I hope in the

00:10:33,890 --> 00:10:36,060
future will provide the ability to debug web apps

00:10:36,060 --> 00:10:38,440
running in Explorer and node.

00:10:38,440 --> 00:10:43,190
One of the questions I get a lot is: why ship it as

00:10:43,190 --> 00:10:44,190
an add-on?

00:10:44,190 --> 00:10:46,800
Why not bundle it inside Firefox?

00:10:46,800 --> 00:10:49,310
And there are a number of reasons for that.

00:10:49,310 --> 00:10:54,600
One is that Valence, as a project, has some external dependencies

00:10:54,600 --> 00:10:56,459
that Firefox doesn't have.

00:10:56,459 --> 00:11:03,150
It depends on the release cadence of other browsers like Chrome or Safari, it

00:11:03,150 --> 00:11:06,990
depends on changes to the published mode debug protocol

00:11:06,990 --> 00:11:10,060
of those browsers, and things they might become obsolete

00:11:10,060 --> 00:11:13,730
or modified or broken, and what we really need

00:11:13,730 --> 00:11:17,450
to do is be able to iterate rapidly once these things

00:11:17,450 --> 00:11:21,320
happen, and the release cadence over the Firefox browser,

00:11:21,320 --> 00:11:24,040
even with the rapid release schedule is not suitable

00:11:24,040 --> 00:11:27,201
for that purpose.

00:11:27,201 --> 00:11:30,990
In addition, we found that moving in the code to an

00:11:30,990 --> 00:11:33,970
add-on makes it easy to host it in a separate github

00:11:33,970 --> 00:11:37,779
project, so external contributors can find it easier to

00:11:37,779 --> 00:11:42,610
contribute, fix bugs, provide new features.

00:11:42,610 --> 00:11:46,370
And it also helps us minimise the development tools footprint

00:11:46,370 --> 00:11:50,430
inside Firefox for the users who are not interested

00:11:50,430 --> 00:11:53,310
in developing in debugging their web apps in

00:11:53,310 --> 00:11:54,680
other browsers.

00:11:54,680 --> 00:11:58,029
So be mindful of that as well.

00:11:58,029 --> 00:12:01,290
How do we solve this thing?

00:12:01,290 --> 00:12:03,490
Well, we're all engineers, right?

00:12:03,490 --> 00:12:05,690
We know how it goes.

00:12:05,690 --> 00:12:08,820
You go to your terminal, you clone your stuff, you compile,

00:12:08,820 --> 00:12:09,820
you make, install, you run.

00:12:09,820 --> 00:12:14,570
That's usually how it happens, but not in Firefox, because because Firefox is

00:12:14,570 --> 00:12:20,720
about automating the nitty-gritty details for you.

00:12:20,720 --> 00:12:26,560
So you go to the hamburger menu, click on the developer

00:12:26,560 --> 00:12:31,170
button and then select web ID. Web ID is our entrance

00:12:31,170 --> 00:12:34,290
to remote debugging Firefox.

00:12:34,290 --> 00:12:40,490
And in the runtime list, which you'll see then is the Chrome in Safari runtimes,

00:12:40,490 --> 00:12:43,420
because what has happened is that the first time you try

00:12:43,420 --> 00:12:47,760
to launch web ID it will go behind the scenes, reach the

00:12:47,760 --> 00:12:52,930
Mozilla servers, download the add-on, install it,

00:12:52,930 --> 00:12:57,029
initialise it, so you get your extra runtimes there and

00:12:57,029 --> 00:13:00,990
if you have an android device connected to the computer

00:13:00,990 --> 00:13:04,290
via USB, you will even see that in the list of USB

00:13:04,290 --> 00:13:09,170
devices or the Firefox USB devices or what have you.

00:13:09,170 --> 00:13:12,050
So pretty simple: you don't have to do anything.

00:13:12,050 --> 00:13:14,880
You already have it, essentially, when you need it.

00:13:14,880 --> 00:13:18,880
Now, let's get a little bit more technical.

00:13:18,880 --> 00:13:23,020
Let's talk about how actors are implemented.

00:13:23,020 --> 00:13:27,870
Firefox actors are pretty standard JavaScript objects, and they

00:13:27,870 --> 00:13:31,930
contain methods that receive requests from the client

00:13:31,930 --> 00:13:36,260
side to perform various operations, and these requests

00:13:36,260 --> 00:13:39,430
are formatted in the standard way that the remote

00:13:39,430 --> 00:13:41,980
debugging protocol specifies.

00:13:41,980 --> 00:13:45,560
And a simple one looks like this.

00:13:45,560 --> 00:13:49,279
This is the function that gets called once you type

00:13:49,279 --> 00:13:51,769
something in the web console and hit "enter".

00:13:51,769 --> 00:13:56,380
It is on the evaluate JavaScript function, which is

00:13:56,380 --> 00:14:01,110
-- you can see here it is not just entirely removed the

00:14:01,110 --> 00:14:03,880
error handling and some initialisation stuff, but

00:14:03,880 --> 00:14:07,730
it is pretty much the code that runs in your Firefox today.

00:14:07,730 --> 00:14:11,630
So what it does is it takes the request, it extracts

00:14:11,630 --> 00:14:14,380
the text property that contains the string you tie

00:14:14,380 --> 00:14:18,860
in the console, it uses a low level debugging PI

00:14:18,860 --> 00:14:22,430
in SpiderMonkey to make the evaluation of that

00:14:22,430 --> 00:14:26,540
expression, grabs the return value, makes a few checks

00:14:26,540 --> 00:14:30,500
about error conditions, et cetera, and extracts the return

00:14:30,500 --> 00:14:32,950
value and sends it back to the client.

00:14:32,950 --> 00:14:35,360
It is pretty straightforward.

00:14:35,360 --> 00:14:40,209
Your standard JavaScript method, I suppose.

00:14:40,209 --> 00:14:43,029
So the difference in the implementation of the

00:14:43,029 --> 00:14:46,600
Valence actor, he has to do mostly with asynchronicity.

00:14:46,600 --> 00:14:52,420
So this is the same function that is executed every time

00:14:52,420 --> 00:14:55,410
you type something in the Firefox web console, hit

00:14:55,410 --> 00:14:59,170
enter, and that expression gets evaluated in Chrome.

00:14:59,170 --> 00:15:07,240
If you ignore the async method helper to reduce some

00:15:07,240 --> 00:15:10,120
of the bugger in our product handling, is that you see

00:15:10,120 --> 00:15:16,750
that we generator function, star function that receives

00:15:16,750 --> 00:15:21,620
the expression the user sent, and then the first thing

00:15:21,620 --> 00:15:25,930
it has to do is go across the Chrome debugging protocol,

00:15:25,930 --> 00:15:31,810
make request for the evaluation, and yield the execution

00:15:31,810 --> 00:15:34,690
back to the main thread.

00:15:34,690 --> 00:15:41,550
Once the result is back, it needs to take the response and make that previewable

00:15:41,550 --> 00:15:45,360
and it does that by making a new request to load

00:15:45,360 --> 00:15:50,630
preview, and the reason is to get a more useful representation

00:15:50,630 --> 00:15:52,360
of the result, so that we can display it in the

00:15:52,360 --> 00:15:57,750
web console in a colourful, easy to expand way.

00:15:57,750 --> 00:16:05,080
This one, another pause until the protocol request returns,

00:16:05,080 --> 00:16:08,839
and after that, we will then ready to check for errors,

00:16:08,839 --> 00:16:13,170
we have the result, and return.

00:16:13,170 --> 00:16:19,029
I would say that the second method is not more verbose than the first

00:16:19,029 --> 00:16:21,360
one, I would say they're equally concise.

00:16:21,360 --> 00:16:25,600
I've removed around ten or 20 lines from each that had to do with error

00:16:25,600 --> 00:16:29,589
handling and details like that.

00:16:29,589 --> 00:16:34,450
But it is just that the nature of the programming is slightly different,

00:16:34,450 --> 00:16:38,140
and I think for people who are not used to program with

00:16:38,140 --> 00:16:41,819
generator functions and promises, this will look a whole

00:16:41,819 --> 00:16:45,720
lot better.

00:16:45,720 --> 00:16:48,089
How does it feel to work with Valence compared to

00:16:48,089 --> 00:16:49,529
what we have today?

00:16:49,529 --> 00:16:52,170
Let's take a look.

00:16:52,170 --> 00:16:56,279
This is me debugging my web application on Firefox desktop,

00:16:56,279 --> 00:16:57,660
as before.

00:16:57,660 --> 00:17:04,280
But the same tools I used here I can use to debug my web application running on Chrome

00:17:04,280 --> 00:17:09,140
without switching tools or browsers or anything.

00:17:09,140 --> 00:17:11,699
I can make sure, as you can see here, I have highlighted

00:17:11,699 --> 00:17:16,240
the image and that's the margins and paddings were highlighted

00:17:16,240 --> 00:17:20,760
by Chrome's inspector underneath, but what controls

00:17:20,760 --> 00:17:24,100
the Chrome inspector is Firefox through Valence.

00:17:24,100 --> 00:17:29,510
And if I want to make sure it runs well on my iPhone,

00:17:29,510 --> 00:17:34,510
I could run it through Valence on the IOS simulator,

00:17:34,510 --> 00:17:37,900
as in this screenshot, or in an actual device connected

00:17:37,900 --> 00:17:44,730
to my computer, and what would happen is that the

00:17:44,730 --> 00:17:49,480
Safari inspector would highlight the page, but be

00:17:49,480 --> 00:17:54,940
in direct control of Valence that I handled through

00:17:54,940 --> 00:17:56,340
my toolbox.

00:17:56,340 --> 00:17:59,480
And what is also obvious here is that I really need to

00:17:59,480 --> 00:18:02,530
fix the formatting on my page on iPhone.

00:18:02,530 --> 00:18:07,411
Another thing I want to stress is this is not a need

00:18:07,411 --> 00:18:12,000
that we discovered people must have.

00:18:12,000 --> 00:18:14,870
People have tried similar approaches in the past, there's a

00:18:14,870 --> 00:18:18,530
list of similar projects here, like in the same general

00:18:18,530 --> 00:18:22,270
direction, so I think that this is an actual need that

00:18:22,270 --> 00:18:27,210
our users have today, and I think all browser vendors

00:18:27,210 --> 00:18:31,970
should step up and help the users be more productive by

00:18:31,970 --> 00:18:34,660
providing something similar.

00:18:34,660 --> 00:18:38,810
To Valence, and of course Valence is open source, anyone who is -- we

00:18:38,810 --> 00:18:41,870
are happy for everyone to take the code and reuse it

00:18:41,870 --> 00:18:45,620
and extend it, and to the great open source thing we

00:18:45,620 --> 00:18:48,150
do.

00:18:48,150 --> 00:18:53,340
And as a parting thought, I would stress that, as an

00:18:53,340 --> 00:18:57,770
engineer, our duty is to programme to web standards, but

00:18:57,770 --> 00:19:00,800
we musn't forget that we need to make sure that our web

00:19:00,800 --> 00:19:05,980
applications run well on the platforms our users use.

00:19:05,980 --> 00:19:08,290
And making sure that your program runs on a single

00:19:08,290 --> 00:19:10,720
platform is not cool.

00:19:10,720 --> 00:19:18,910
It is us going back into the IE6, days that we all are happy that are past us.

00:19:18,910 --> 00:19:27,530
So I would like to make sure that you can see the slides

00:19:27,530 --> 00:19:31,380
here, there's links to documentation for you.

00:19:31,380 --> 00:19:35,500
I am happy to take questions and feedback over Twitter,

00:19:35,500 --> 00:19:38,530
my team's Twitter handle is there as well.

00:19:38,530 --> 00:19:44,521
There are a few links to Valence and web ID, for main platform feature

00:19:44,521 --> 00:19:48,790
that we use to communicate with remote processes,

00:19:48,790 --> 00:19:53,050
and everyone is welcome to get involved with the code.

00:19:53,050 --> 00:19:57,100
This is fully open source code, we're happy to get any help

00:19:57,100 --> 00:19:59,080
we can.

00:19:59,080 --> 00:20:02,370
And last but not least, note that there's the Firefox

00:20:02,370 --> 00:20:06,800
IOS workshop today at 11, and they're giving away bags

00:20:06,800 --> 00:20:12,260
like this, it is in the mozilla lounge on the second

00:20:12,260 --> 00:20:15,000
floor, and it starts in a few minutes.

00:20:15,000 --> 00:20:16,680
And I'll be happy to see you there.

00:20:16,680 --> 00:20:17,870
That's all from me.

00:20:17,870 --> 00:20:18,870
Thank you.

00:20:18,870 --> 00:20:18,871

YouTube URL: https://www.youtube.com/watch?v=Mju-k0yxLnk


