Title: Joa Ebert: JVM JS | JSConf EU 2015
Publication date: 2015-10-19
Playlist: JSConf EU 2015
Description: 
	Compiling Java bytecode to JavaScript is an interesting problem to solve and many things can be learned from this challenge.

- The difference of JSVMs and performance implications
- The state of WebIDL and why it matters
- Types and optimizing compilers: an AOT love story

Technology is always just a means to an end. That’s why we’ll also look at self-optimizing display lists, WebGL and the WebAudio API in real-world apps.

Intro music by @halfbyte
Captions: 
	00:00:24,140 --> 00:00:34,890
Yeah, hi. My name is Joa, it's an unusual name, it’s not Joachim, it's just Joa. I

00:00:34,890 --> 00:00:40,980
did a lot of flash development back in the day days but yeah you know flash is dying

00:00:40,980 --> 00:00:48,250
all that stuff, so a little bit application if you need a way to convert it to the web.

00:00:48,250 --> 00:00:55,449
So that's why I started building a project to compile Java bytecode to JavaScript. So

00:00:55,449 --> 00:01:02,930
let's have a look at the technology landscape, what I am talking about today is mostly these

00:01:02,930 --> 00:01:09,710
question marks because that's where the magic happens everything outside is done by different

00:01:09,710 --> 00:01:19,640
tools. So we are actually here it takes Java byte code there are some other solutions as

00:01:19,640 --> 00:01:29,229
well, takes Java source code, there's scaler.js which is tied to scaler compiler, and there's

00:01:29,229 --> 00:01:39,270
TVM which is the other project also using Java bytecode, they all have different subtleties.

00:01:39,270 --> 00:01:47,240
Most source code is compiled directly to JavaScript, only unity is compiling.net, byte code to

00:01:47,240 --> 00:02:01,560
SE.js. SE.js we don't do it because its in Firefox but in general there's some big issue

00:02:01,560 --> 00:02:07,280
because there no garbage collection you all know that Java is like JavaScript language,

00:02:07,280 --> 00:02:12,940
and so we leave that on the web assembly I think this could be a huge opportunity but

00:02:12,940 --> 00:02:22,460
whoever is sitting here and implementing it please remember there's more than C and C++.

00:02:22,460 --> 00:02:31,600
Ruby and other implementations. We do everything ahead of time, so you could also choose to

00:02:31,600 --> 00:02:36,011
do this all just-in-time, the difference is ahead of time means we take the Java byte

00:02:36,011 --> 00:02:41,120
code and compare it to JavaScript source code instead of doing it at run time which means

00:02:41,120 --> 00:02:46,069
we could load the byte code in a browser and while the application is running we could

00:02:46,069 --> 00:02:53,120
convert this to JavaScript code, so you could do it basically if you want to do just-in-time

00:02:53,120 --> 00:02:57,790
if you want to executable codes you could simply create new functions from existing

00:02:57,790 --> 00:03:03,940
JavaScript source code you can apply a lot of different optimisation that we can't apply,

00:03:03,940 --> 00:03:10,550
you could make optimistic assumption, here is a class I know nobody extends this class

00:03:10,550 --> 00:03:20,780
so I think that's final, you can reinvalidate those assumptions which is called the deoptimisation,

00:03:20,780 --> 00:03:29,670
you could also support class loaders in Java. You could at run time define a new class,

00:03:29,670 --> 00:03:37,210
load bytecode, do all that at run time. Well, in fact it's feasible to do it right now because

00:03:37,210 --> 00:03:43,920
we have workers now and the problem with the jet compiling specially in JavaScript would

00:03:43,920 --> 00:03:49,879
be that you have all those optimisation and executing them takes a lot of time, you could

00:03:49,879 --> 00:03:54,360
do it in a worker, and if anybody is interested in doing that I guess it would be a really

00:03:54,360 --> 00:04:00,660
interesting project, but we don't do it, we do ahead of time because we want the browser

00:04:00,660 --> 00:04:04,879
to concentrate just on user, because if you do it just-in-time the browser would have

00:04:04,879 --> 00:04:10,540
to optimise your thing that converts to Java bytecode.

00:04:10,540 --> 00:04:23,630
Also Java statistically. Trace and compiler which will I will explain in a second what

00:04:23,630 --> 00:04:29,409
that means, basically it means it goes through the core graph of the programme, and it also

00:04:29,409 --> 00:04:36,220
knows that at this point there isn't a class extended by a different class. In our case,

00:04:36,220 --> 00:04:41,620
because we don't just support JavaScript but also other platforms it's nicer because as

00:04:41,620 --> 00:04:46,630
long as the optimisations are done ahead of time we don't have to write out in JavaScript

00:04:46,630 --> 00:04:54,380
and can apply to all different platforms. How does the compiler look, what does it do,

00:04:54,380 --> 00:04:55,849
I hope you can see that.

00:04:55,849 --> 00:05:04,419
I will try to simplify this as much as I could, but just a quick overview. Basically the compiler

00:05:04,419 --> 00:05:12,479
creates a class file, also sorry that I am talking so fast, but there is a lot of stuff

00:05:12,479 --> 00:05:25,940
we have to go through. So, the class file actually is first it's read by our completer,

00:05:25,940 --> 00:05:31,260
what we call completing is reading basically the byte code which will give us the structure

00:05:31,260 --> 00:05:38,140
of the class it fields and methods, although things can be read as well by our completer,

00:05:38,140 --> 00:05:44,390
and every time they are accessed we resolve those symbols. Which basically means that

00:05:44,390 --> 00:05:52,250
the first methods symbol we resolve is the main function and from there on everything

00:05:52,250 --> 00:05:56,160
else is getting resolved.

00:05:56,160 --> 00:06:06,839
So, the function goes into code parser which creates a couple of graphs, at the end it

00:06:06,839 --> 00:06:14,680
exports a tree, which is kind of a legacy thing for us because we just went to a tree

00:06:14,680 --> 00:06:21,160
and just the optimiser was going into a special kind of graph structure, we want to get rid

00:06:21,160 --> 00:06:30,710
of this, and do everything on this graph but right now we are in a tree form. Go through

00:06:30,710 --> 00:06:40,470
some generic phases that modify the tree, and if the optimiser is enabled, we apply

00:06:40,470 --> 00:06:48,339
the optimisation if it's not we apply most of the platform specific phaser that make

00:06:48,339 --> 00:06:56,070
the Java code run in the browser as JavaScript which behaves like Java.

00:06:56,070 --> 00:07:01,641
Ok I want to give you maybe a little bit of an example to understand how this looks. If

00:07:01,641 --> 00:07:06,320
you are compiler writing don't spoil the fun because you will already know what happens.

00:07:06,320 --> 00:07:14,430
So that's like a simple method, with a loop, and it looks quite complex so the first thing

00:07:14,430 --> 00:07:19,930
we do is we take the byte code, split it into graphs so we know what's going on where is

00:07:19,930 --> 00:07:28,120
stuff happening, and you can already see it goes from up here, down into loop and jumps

00:07:28,120 --> 00:07:37,140
back and then becomes the exit part and hello, and you know there are a lot of gotos here

00:07:37,140 --> 00:07:43,960
and arbitrary jumps how do you represent those in JavaScript. Kind of looks like this if

00:07:43,960 --> 00:07:53,510
you see you can always do this stuff you can always do a go to in JavaScript as well. You

00:07:53,510 --> 00:07:58,700
can be the first to write that and everybody will quote you afterwards.

00:07:58,700 --> 00:08:05,360
Anyways, from this graph structure we also build a tree structure that gives you an information

00:08:05,360 --> 00:08:12,019
about how is the code actually structured, where is the loop, how do they follow source

00:08:12,019 --> 00:08:19,969
code manner. This is our first estimate of the JavaScript code, it looks horrible, specially

00:08:19,969 --> 00:08:26,159
if you look at the loop, you will always generate a wide through which has a lot of break and

00:08:26,159 --> 00:08:38,479
continue statements, so fast forward like 20 phases, we can always apply a lot of, well

00:08:38,479 --> 00:08:49,180
simplify and have you simple loop. This is what we put it in the optimiser, this is simplified

00:08:49,180 --> 00:08:56,870
version of what it sees, again a graph so we go graph to tree to graph. Which is stupid

00:08:56,870 --> 00:09:02,910
but another thing that we have to solve later.

00:09:02,910 --> 00:09:10,840
The optimiser, well, does its stuff it has a lot of knowledge about what's going on,

00:09:10,840 --> 00:09:19,590
and as you can see it can get rid of a lot of stuff, especially in this example. So,

00:09:19,590 --> 00:09:25,860
when it gets out of the optimiser we're left with this little piece which basically says,

00:09:25,860 --> 00:09:37,070
well it's here it prints just one. The JavaScript code we finally generate will look like this

00:09:37,070 --> 00:09:42,201
we also do some renaming so it will probably in the end look like this which is quite nice

00:09:42,201 --> 00:09:52,500
for such a big method, and the optimiser can prove a lot of stuff is unnecessary, so that's

00:09:52,500 --> 00:09:54,400
what we want to achieve.

00:09:54,400 --> 00:10:01,060
So what's the big problem in all of this? Semantics. We have to implement all the, JVM

00:10:01,060 --> 00:10:12,280
semantics in JavaScript, there's a lot of stuff here, the lazy - there's no time, lazy

00:10:12,280 --> 00:10:21,590
initialisation, and yeah, just quickly want to explain what all that stuff is. What we

00:10:21,590 --> 00:10:26,110
don't want to do is we don't want to add too much over head that's what making the Java

00:10:26,110 --> 00:10:39,400
code in fact run slow and inside of JavaScript. One thing is the class initialiser. It's always

00:10:39,400 --> 00:10:46,010
executed when a class is first been loading in Java, this where all static variables are

00:10:46,010 --> 00:10:51,470
being initialised and all that kind of stuff. So when you write this kind of code in Java

00:10:51,470 --> 00:10:57,720
what actually happens is the base class of system which is object will get it's initialiser

00:10:57,720 --> 00:11:03,870
called then a system class will get it's initialiser called but any if it's not been called before.

00:11:03,870 --> 00:11:12,080
We have to do the same when compiling to JavaScript. The most simple way to do it you can add a

00:11:12,080 --> 00:11:21,660
property to your class, which simply does all this work and we tried different aspects

00:11:21,660 --> 00:11:28,570
of what works best across browsers, this one where the method is really finding itself

00:11:28,570 --> 00:11:35,970
it just returns itself, but that didn't work out so great performance wise.

00:11:35,970 --> 00:11:43,860
In the end this is JavaScript that we generated. So it's in tight, but there's the problem

00:11:43,860 --> 00:11:50,990
because if you run this stuff in a loop, well, now I would have 10 times for instance this

00:11:50,990 --> 00:11:56,780
call to initialiser. And the question is can we prove that the loop is taken at least once,

00:11:56,780 --> 00:12:01,980
because if we can prove this, which we can of course prove is that we can take the initialiser

00:12:01,980 --> 00:12:06,940
out of the loop for instance and apply just once for a loop so if the loop runs thousand

00:12:06,940 --> 00:12:12,850
times we don't have to execute the initialiser thousand times. This is very important stuff

00:12:12,850 --> 00:12:23,310
to do, to make it fly actually you can do even more you can take the access of the system

00:12:23,310 --> 00:12:29,890
out, variable out, of the loop as well, and pretty good actually you won't notice that

00:12:29,890 --> 00:12:33,350
is class initialiser is actually running.

00:12:33,350 --> 00:12:40,290
There is another thing, in stance initialisation where you have a class, all properties like

00:12:40,290 --> 00:12:48,730
the x property are initialised with value, we wanted to do it smart first and we thought,

00:12:48,730 --> 00:12:57,390
ok, if you have more than four properties, I think, then we define the variable for this,

00:12:57,390 --> 00:13:04,290
to minify the JavaScript that we output and then we assign it to those things if you have

00:13:04,290 --> 00:13:12,110
50 variables in a class, the code is well, it's smaller, but the problem is you learn

00:13:12,110 --> 00:13:20,040
that JavaScript JMs might guess the size of your object based on how often they see this.x

00:13:20,040 --> 00:13:29,570
= y , not a local variable but this equals something, so you are back to software one,

00:13:29,570 --> 00:13:37,790
the JavaScript - well... make the best guess. That's like a kind of example of what you

00:13:37,790 --> 00:13:39,330
can do.

00:13:39,330 --> 00:13:49,790
Numerics are a different thing, in JavaScript you have a long type, well, already solved

00:13:49,790 --> 00:13:54,620
you can basically put it an to an object you can say I have the high part and the low part

00:13:54,620 --> 00:13:58,070
and I too all that stuff and it's quite boring,

00:13:58,070 --> 00:14:04,360
what's more interesting is the other simplifications you can do. For instance if you have a method

00:14:04,360 --> 00:14:10,670
like, give me the current time in milliseconds and it comes to an end. We implement current

00:14:10,670 --> 00:14:18,650
and milliseconds on the double, we cast it back to the long. In fact the method would

00:14:18,650 --> 00:14:24,430
look like this, date now, class it to long, class it to end, you can already see where

00:14:24,430 --> 00:14:34,140
it's going, it's probably unnecessary to create the long. So, we have a method that converts

00:14:34,140 --> 00:14:40,140
a double to a long and then we access the low bits of the long, now we have created

00:14:40,140 --> 00:14:48,100
an object that's totally useless. We want to convert the double into an integer, which

00:14:48,100 --> 00:14:53,529
is what happens and saves the long.

00:14:53,529 --> 00:15:00,460
So the main story is always simplify, try to simplify it make it as tight as possible

00:15:00,460 --> 00:15:04,290
and give rid of everything that's not totally necessary.

00:15:04,290 --> 00:15:14,630
The integer, first we thought, yeah we love integers they are really cool, a+ b, simple,

00:15:14,630 --> 00:15:22,370
at the ‘on’ operator, the integer is 30, you need the overflow when you do additional,

00:15:22,370 --> 00:15:31,671
multiplication, thank you to AMS.js, we can use integer multiplication, that's nice, if

00:15:31,671 --> 00:15:40,420
you have a double, of course, just - or not. In fact there is a subtle differences when

00:15:40,420 --> 00:15:47,210
you talk about doubles in JavaScript for instance, if you have a double and apply the or operator

00:15:47,210 --> 00:15:53,540
to the non-value, the zero, which is the same for Java, if you positive infinity, any value

00:15:53,540 --> 00:16:00,480
under the maximum integer, JavaScript, well for positive infinity, JavaScript will give

00:16:00,480 --> 00:16:05,510
you zero, if you 'Or', it whereas an Java you will get the maximum integer, all of a

00:16:05,510 --> 00:16:11,460
sudden it's not that simple any more to convert your double to an integer. We had this little

00:16:11,460 --> 00:16:19,791
method written, convert a double to an integer, which did exactly that. Well, we were quite...

00:16:19,791 --> 00:16:27,990
umm... quite an interesting moment because we had a benchmark and we found around the

00:16:27,990 --> 00:16:31,630
benchmark, because it didn't convert a double correct, we implemented the method and the

00:16:31,630 --> 00:16:39,980
benchmark was 10 per second slower, we thought, the second because we didn't convert the double

00:16:39,980 --> 00:16:47,410
correct, you can already see this method is a little bit stupid, infinity is already greater

00:16:47,410 --> 00:16:56,720
than the maximum integer and the negative is lower than the minimum integer. So we tried

00:16:56,720 --> 00:17:04,220
to change this method just a little bit and all of a sudden we had a 10 frames per second

00:17:04,220 --> 00:17:13,159
performance boost, I don't know why the seconds, but I guess somebody could explain, I guess

00:17:13,159 --> 00:17:18,439
it must have to do with the infinity values that it treats it a little bit different,

00:17:18,439 --> 00:17:20,089
but you never know.

00:17:20,089 --> 00:17:26,860
So, there is one last thing that we don't do, but that we will have to do eventually

00:17:26,860 --> 00:17:34,261
in the future, it allows you to, well you divide by zero it throws an exception, which

00:17:34,261 --> 00:17:42,050
is crazy, but it does that. Well, in order to do that you would have to have a method

00:17:42,050 --> 00:17:47,580
that checks if it's zero or not and throws an exception, otherwise you would have to

00:17:47,580 --> 00:17:53,420
prove that some value is never zero.

00:17:53,420 --> 00:18:00,280
Null point exception, is also quite interesting, because, I don't know anybody who is doing

00:18:00,280 --> 00:18:06,030
that at the moment, basically it means this, you have maybe a unit test, do some stuff,

00:18:06,030 --> 00:18:12,800
you say ok, my tests only pass if null point exception is raised. So how do you do this

00:18:12,800 --> 00:18:19,179
in JavaScript? The most obvious way would be to say, ok, I simply check if something

00:18:19,179 --> 00:18:24,500
is null, right and then I raise an exception, but it's quite stupid if you have a lot of

00:18:24,500 --> 00:18:29,370
changed stuff. You can also go on and say I'll correct a method that does a null check

00:18:29,370 --> 00:18:35,980
for me, but that also doesn't scale very well. The cruel thing is in JavaScript

00:18:35,980 --> 00:18:43,140
you are free to do what you want to do and you can modify the prototype of type error

00:18:43,140 --> 00:18:49,340
to fit into a class system, whenever we see a type error from the JavaScript, we already

00:18:49,340 --> 00:18:55,679
know it's a null point exception and it behaves like a null point exception, so in our case,

00:18:55,679 --> 00:19:03,830
the equivalent, so the extra Java null point exception is from the perspective of the application

00:19:03,830 --> 00:19:09,480
always thrown just when the type error is thrown.

00:19:09,480 --> 00:19:14,980
Last little odd thing, is undefined, because in Java you don't have undefined, but in JavaScript

00:19:14,980 --> 00:19:22,030
you have methods that return undefined and this is also nothing new but, well what does

00:19:22,030 --> 00:19:29,540
this print. It will be false, because undefined is not strictly equal to null, but it is non--

00:19:29,540 --> 00:19:35,710
so if I just have two of those it would be true. In fact we always want to use strict

00:19:35,710 --> 00:19:41,150
equality, because that's more like what the Java operator would be - so when you too stuff

00:19:41,150 --> 00:19:47,010
like this, you would get a weird exception, because Foo is not now, but it's undefined,

00:19:47,010 --> 00:19:53,170
if you just use a strict operator. So you want to use the non-strict operator, in those

00:19:53,170 --> 00:20:00,660
cases where it can be null. Well, it's a little bit more complicated with strings and all

00:20:00,660 --> 00:20:05,179
that's, because this would also cause now, when you compare a string and an object to

00:20:05,179 --> 00:20:10,621
convert your object to a string and we also don't want to have that, but in fact, when

00:20:10,621 --> 00:20:18,960
we implemented this, we got a five times improvement in a benchmark in Firefox, the only reason

00:20:18,960 --> 00:20:25,160
why I could explain that, if you do a strict equality check that means it's not null, it

00:20:25,160 --> 00:20:32,900
means that Firefox, well, you can still be undefined so I don't know what to do, whereas

00:20:32,900 --> 00:20:38,930
where you use a non-strict operator, if you definitely know that the object is well...

00:20:38,930 --> 00:20:44,309
not null or non-defined, maybe there is a hot path that can be triggered and we were

00:20:44,309 --> 00:20:49,520
quite surprised that this actually happened, I would have thought the strict equality would

00:20:49,520 --> 00:20:53,020
be much simpler for a JavaScript engine.

00:20:53,020 --> 00:20:58,600
What's the moral of the story? In the end you want to write, when you generate JavaScript

00:20:58,600 --> 00:21:04,180
you should mimic handwritten JavaScript so to the browser it should always look like

00:21:04,180 --> 00:21:12,080
a user has written the code, not a machine some what translated it. You always have to

00:21:12,080 --> 00:21:23,760
clean up and simplify after you, because well, otherwise all the semantics will slow the

00:21:23,760 --> 00:21:29,790
application down. How much time do I have left? Is there somebody who knows? Nobody

00:21:29,790 --> 00:21:38,070
knows. Ten, cool. Yet you should always try and take short cuts as much as possible, like

00:21:38,070 --> 00:21:46,510
with a type error. Use what is available and, well, you have to test and measure your performance

00:21:46,510 --> 00:21:52,580
and I can't stress this enough, it applies also to everything that you do in normal JavaScript,

00:21:52,580 --> 00:21:59,750
which is you have to measure, so when you apply some optimisations manually, that's,

00:21:59,750 --> 00:22:07,010
well, if you don't measure what happens, it will be quite, yeah... umm... well surprising

00:22:07,010 --> 00:22:09,010
results can come out of this.

00:22:09,010 --> 00:22:13,980
So, I just have ten minutes so I'll quickly skip over this, the optimiser, it does everything

00:22:13,980 --> 00:22:18,570
you would expect from an optimiser, there is some cool stuff, so when you write this

00:22:18,570 --> 00:22:27,090
in Java, we usually need for the integer the 'Or' operator but we already know it won't

00:22:27,090 --> 00:22:34,140
overflow, we don't need the operator and we can simply use the implement. You can also

00:22:34,140 --> 00:22:44,220
prove it in this case where you have the integer j, which is growing with i, so you would also

00:22:44,220 --> 00:22:49,150
not need the operator, but when you are looking to the sources of the JavaScript JMs you well

00:22:49,150 --> 00:22:56,070
figure at they know this stuff but not as good,

00:22:56,070 --> 00:23:02,309
probably because this happens just in time and they can't spend as much time in all those

00:23:02,309 --> 00:23:10,760
analysis. Also we don't do it for the browser, because the browser, should think it's still

00:23:10,760 --> 00:23:12,530
an integer.

00:23:12,530 --> 00:23:18,660
This is also quite surprising actually when you write this in Java, Java will always create

00:23:18,660 --> 00:23:32,179
a new string for you and use the - string concatenation, function what we have to do

00:23:32,179 --> 00:23:39,380
for JavaScript, we have to find that there is a string builder, so we can reconstruct

00:23:39,380 --> 00:23:45,420
the JavaScript string concatenation.

00:23:45,420 --> 00:23:53,660
This one is one that's actually looks quite simple on the board, in the slides, but actually

00:23:53,660 --> 00:24:01,890
a lot of different optimisations have to play together, so this is the short iterator in

00:24:01,890 --> 00:24:08,049
Java and the compiler in the byte code will expand it to something like this, while you

00:24:08,049 --> 00:24:13,460
have the iterator in the list, while it gets the next element you get the next element

00:24:13,460 --> 00:24:20,860
you write this stuff a lot in Java code it would be nice to get rid of it, we will generate

00:24:20,860 --> 00:24:26,450
this code-based out of it, what has to happen is the code has to be in lined and you have

00:24:26,450 --> 00:24:32,290
to prove the iterator is not escaping the method, you have to know what values get into

00:24:32,290 --> 00:24:39,851
the iterator and what's taken out of, it like if you have all those 20 things ready, you

00:24:39,851 --> 00:24:46,960
are finally pleased with a result like this. The cool thing is, if you do it in a generic

00:24:46,960 --> 00:24:53,220
way it will apply to all of the code that you insert and that's quite nice. Even if

00:24:53,220 --> 00:24:55,710
you write your own list this would happen.

00:24:55,710 --> 00:25:01,600
This is much, much easier when you actually have source code, in source code you just

00:25:01,600 --> 00:25:08,980
see the special kind of loop and you know, oh, ok, I don't, I generate it differently.

00:25:08,980 --> 00:25:13,700
So, yeah. That's not so smart in the output.

00:25:13,700 --> 00:25:22,330
Last but not least, gene this optimisation, you can prove that, well, if you like to write

00:25:22,330 --> 00:25:29,270
code in a functional style, you can, you can actually let the compiler transform that back

00:25:29,270 --> 00:25:38,790
into a loop, it can know that some stuff is in a tail position, so we can rewrite it into

00:25:38,790 --> 00:25:43,210
a loop, simplify the loop and have a final result like this.

00:25:43,210 --> 00:25:49,350
So, most browsers don't do this, but they do most of the normal optimisations that you

00:25:49,350 --> 00:25:54,440
would expect, actually optimising JavaScript code by hand isn't necessarily something you

00:25:54,440 --> 00:26:04,240
should do these days.

00:26:04,240 --> 00:26:09,790
So we compile it to Java, that's what it looks like, it's basically what all the browsers

00:26:09,790 --> 00:26:18,080
use to generate the {inaudible}, Java code comes out of it, the question is which one

00:26:18,080 --> 00:26:26,370
do you use, Blink, Servo, Firefox, they all have their own with extensions, if you compile

00:26:26,370 --> 00:26:31,610
all the web URL and test it in a browser for once, different browsers you well run to an

00:26:31,610 --> 00:26:37,020
enormous amount of inconsistencies, it's just annoying, yeah.

00:26:37,020 --> 00:26:44,460
Workers, it can be quite interesting, the JavaScript you generate can be directly fed

00:26:44,460 --> 00:26:52,620
into a worker, most of the time you can simply say instead of the window just use the 'Self'

00:26:52,620 --> 00:26:59,340
variable, that makes a lot of sense. Also we were quite surprised we also have to check

00:26:59,340 --> 00:27:07,360
for types, if you have some code like things a worker, instruct mode, you will immediately

00:27:07,360 --> 00:27:16,630
get an error like this for some reason error event isn't defined, you the XML, but not

00:27:16,630 --> 00:27:18,730
the error

00:27:18,730 --> 00:27:25,410
event, when we have the of check we have to again rate some stuff like this so it works

00:27:25,410 --> 00:27:30,280
immediately in the worker.

00:27:30,280 --> 00:27:35,700
That's it mostly for the compiler, I wanted to talk about the framework around it, the

00:27:35,700 --> 00:27:41,790
display list, I did a lot of network back in the day, what was really cool was that

00:27:41,790 --> 00:27:46,940
you had a display list where you could sensory impairment lie range stuff and move it around,

00:27:46,940 --> 00:27:53,429
we wanted to have that too. Basically, I think that a lot of frameworks that do something

00:27:53,429 --> 00:27:59,070
similar, where you have a tree-like structure and you can arrange all your objects and again

00:27:59,070 --> 00:28:04,980
you can apply, like the same ideas that you use for opt my zing code, to something that

00:28:04,980 --> 00:28:10,750
happens at run time. So we don't want to walk the tree all the time when we render some

00:28:10,750 --> 00:28:17,690
stuff to the web, so we want a flat representation, we do that basically concatenating all the

00:28:17,690 --> 00:28:26,780
stuff together in a kind of, well specialised structure, but in this case we also cache

00:28:26,780 --> 00:28:34,049
all the information of the vertices, where they would go on WebGL, it's quite a thing,

00:28:34,049 --> 00:28:40,580
it's what, what an optimiser would do as well, it has to figure out, does it make sense to

00:28:40,580 --> 00:28:46,559
apply an optimisation at the time or not make sense, we have to render in simply about mode

00:28:46,559 --> 00:28:57,560
or put all the stuff to reference cards - oh, just 2 minutes - I'll just go and, yeah, cache

00:28:57,560 --> 00:29:06,960
all the virtual information and - so you get really fast results. So we rush through the

00:29:06,960 --> 00:29:13,950
slides, I wanted to show you some demos from the display list, I hope it works. In that

00:29:13,950 --> 00:29:23,470
case we can see one object is moving, so the display list would switch, when everything

00:29:23,470 --> 00:29:31,101
moves it goes into a rendering stage, it's nice for applications as well as games. You

00:29:31,101 --> 00:29:34,940
get those words.

00:29:34,940 --> 00:29:45,870
Just the double thing, ten FPS slower, well, it uses the infinity thing, so instead of

00:29:45,870 --> 00:29:54,630
50 frames, we were at 40 frames. And because I'm out of time, I just want to show you this

00:29:54,630 --> 00:30:00,800
really quickly, we did a lot of the web idea stuff concatenated it to Java, those guys

00:30:00,800 --> 00:30:09,070
that I was working on earlier, converted this big flash application, audio tool to Java

00:30:09,070 --> 00:30:22,110
and then we compiled the Java code to JavaScript and I hope I've got some internet - but I

00:30:22,110 --> 00:30:39,000
don't... well that's too bad. No internet. Ok, maybe it loads in the end. So, because

00:30:39,000 --> 00:30:44,330
when I wanted to show you, this is just a smaller version of the whole thing and speed

00:30:44,330 --> 00:30:54,420
wise we have enough speed now to generate real time audio and JavaScript and render

00:30:54,420 --> 00:31:01,030
all that stuff on the graphics card. So I can do all this, well tweak a lot of stuff

00:31:01,030 --> 00:31:10,880
and it does it all in real time, and so this is like one of the cool things now that we

00:31:10,880 --> 00:31:17,341
have the ability to take the existing stuff and compile it to JavaScript. There is also

00:31:17,341 --> 00:31:24,360
another one, so we also have that in Flash, that's all now running, it's just pure JavaScript

00:31:24,360 --> 00:31:33,200
and it's also at run time parsing all the mega files, so basically just a load of computations

00:31:33,200 --> 00:31:53,120
and you can play your old favourite... yeah... music. Ok. So let me see if this last... nope...

00:31:53,120 --> 00:32:13,700
ah... ok. So the cool thing here is... come on, come on, this has web artists and live

00:32:13,700 --> 00:32:25,590
collaboration. Ok. I talked about the guys from audio tool they are now all here. You

00:32:25,590 --> 00:32:30,250
can say hello. Ok.

00:32:30,250 --> 00:32:32,360
>> Hello!

00:32:32,360 --> 00:32:43,100
So this application is now running in a browser and the artists can actually move everything

00:32:43,100 --> 00:32:48,130
around, do some stuff so I don't have to do anything right now, they can make some music,

00:32:48,130 --> 00:32:54,880
you have to be quick, I'm already out of time. So if you know the Flash application this

00:32:54,880 --> 00:32:56,179
was actually

00:32:56,179 --> 00:33:03,630
quite a big thing, so here we have WebGL, let's, it's running very smooth and very nice

00:33:03,630 --> 00:33:13,419
and I can turn all the knobs, do all the routing and for me the good thing is to see now that

00:33:13,419 --> 00:33:20,100
we basically have this running in the browser without Flash, it was a big struggle to get

00:33:20,100 --> 00:33:24,060
this running in Flash, we implemented our own garbage collection because the Flash was,

00:33:24,060 --> 00:33:37,240
well, bad, so a lot of things to get this working. {music}. I'm actually not doing anything,

00:33:37,240 --> 00:33:45,271
they can all do it in the live collaboration, which is done by a web artist. You can even

00:33:45,271 --> 00:33:54,520
hook the midi stuff to it, it's really brave it shows the browser is very good at supporting

00:33:54,520 --> 00:34:02,640
application that are very demanding when it comes to resources, it shows you can do what

00:34:02,640 --> 00:34:15,679
you want now, we have this timeline here, which you can - ah, I have to exit this mode.

00:34:15,679 --> 00:34:22,669
Ok, so that was something that we never did in Flash, you can simply adopt the timeline,

00:34:22,669 --> 00:34:27,480
so when you have a second monitor you can now split that application, you can close

00:34:27,480 --> 00:34:40,129
it and it flips just right back and this is well, actually simply amazing. {Applause}.

00:34:40,129 --> 00:35:05,769
Right, thank you. Yeah. So I'm guess I'm done. Thanks. Thanks for listening. Well, if you

00:35:05,769 --> 00:35:09,900

YouTube URL: https://www.youtube.com/watch?v=c9kkqSgxqxQ


