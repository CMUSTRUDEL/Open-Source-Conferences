Title: Txus: The Power Of Small Abstractions | JSConf 2015 EU
Publication date: 2015-10-08
Playlist: JSConf EU 2015
Description: 
	Every time we solve an everyday programming problem we learn from its solution. When we come across a similar problem later on, we think “aha! I’ve seen this before! I know how to solve it!”. Many of us are also familiar with design patterns, which aim to solve entire classes of problems.

There also exists, however, a different kind of pattern. But, as opposed to help you structure a whole compiler or application, these patterns love hiding in small things like methods or functions, or even binary operations. They whisper to you when you concatenate two strings or map over a list.

These abstractions have superpowers, too. They can separate the what from the when, or from the how. They can add together things other than numbers. They can control time. In this talk you will discover the amazing power of small abstractions. After, you’ll start hearing their whispers and seeing their breadcrumb trails. Only then you will be ready to let them unfold their full potential in your programs.

Intro music by @halfbyte
Captions: 
	00:00:23,680 --> 00:00:29,520
All right, so, hi everyone, I'm really glad to be here at JSConfEU, I'm really sort of

00:00:29,520 --> 00:00:35,580
an alien here, it's not my usual crowd, I don't code JavaScript for a living, so I might

00:00:35,580 --> 00:00:40,480
bring in a bit of a different perspective of things, especially less about code and

00:00:40,480 --> 00:00:47,890
more about the understand lying concept. So ... also if you've been at Stephanie's talk,

00:00:47,890 --> 00:00:53,800
you'll see some of the same concepts explained a bit of a different way. So hopefully it'll

00:00:53,800 --> 00:00:58,829
be interesting. This is me with some hair, that I don't have anymore and this is how

00:00:58,829 --> 00:01:07,350
you pronounce my name, Txus, if you read phonetics (Laughing) so I work at ::Codegram an agency

00:01:07,350 --> 00:01:14,710
in Barcelona and we put on quite a cool conference as well in Barcelona called full stack FEST,

00:01:14,710 --> 00:01:22,390
check it out next year, if you want, it's pretty nice. So we're here to talk about abstraction

00:01:22,390 --> 00:01:29,520
and abstraction, we have sort of a love/hate relationship with it. We love it because it's

00:01:29,520 --> 00:01:33,810
what our programs are made of, we hate it because when there's too much of it, when

00:01:33,810 --> 00:01:38,600
we think there's too much of it we're just frustrated, we fail to see sort of the essence

00:01:38,600 --> 00:01:45,920
of the problem. But, I would argue that actually it just about the level of abstraction we're

00:01:45,920 --> 00:01:52,140
comfortable with, and like everything it can be trained and you can learn about being comfortable

00:01:52,140 --> 00:02:00,590
with higher levels of abstraction, so, we'll see a bit more about abstraction with an example.

00:02:00,590 --> 00:02:07,290
What do you see in these two pictures? In a way they depict different things, but in

00:02:07,290 --> 00:02:12,870
other ways they are the same thing, right? A computer would have a hard time maybe finding

00:02:12,870 --> 00:02:19,970
out that they are the same thing. But, we already know look at these pictures and says,

00:02:19,970 --> 00:02:25,650
yes, of course, I know what it is, it's a dog. You've never met these two particular

00:02:25,650 --> 00:02:31,989
dogs here, these two, but, you already know a lot about them, you know what they eat,

00:02:31,989 --> 00:02:38,180
more or less or they like to go for walks and they don't like cats, maybe they do, but

00:02:38,180 --> 00:02:45,970
in general, probably they don't. So, it's pretty useful, you see two dogs and you've

00:02:45,970 --> 00:02:50,220
never seen before and you already know a lot about them, just because you identify them

00:02:50,220 --> 00:02:54,520
as a dog,this concept you have in your mind with a lot of semantic knowledge attached

00:02:54,520 --> 00:02:59,870
to it. You're forgetting their differences just to sort of understand the essence of

00:02:59,870 --> 00:03:08,690
them. Now, I'd like to share a story that I didn't write, but I really like this Argentinian

00:03:08,690 --> 00:03:16,169
writer Forge Luis Borges, you should read it. He has a story called Funes the Memorius,

00:03:16,169 --> 00:03:25,180
are in this story, basically there's Funes a young man who once fell off a horse and

00:03:25,180 --> 00:03:30,900
just hit his head with the rock or something and then from that moment his memory became

00:03:30,900 --> 00:03:37,150
perfect. He could no longer forget anything. So every instant of everything he would just

00:03:37,150 --> 00:03:44,190
remember forever. That means every smell, everything he saw or heard or anything. And

00:03:44,190 --> 00:03:51,470
that brought him to experience the world in a very different way. So for example he started

00:03:51,470 --> 00:03:58,639
undertaking in this by star experiments. For example he started devising his own numerical

00:03:58,639 --> 00:04:05,560
system, Borges a character in this story asked Funes, so, what is this thing you're working

00:04:05,560 --> 00:04:13,680
on? This numerical system. Funes said, well, I'm assigning a name to every number, so the

00:04:13,680 --> 00:04:21,060
number 4 is dog and number 7 is staircase and so on and he just wrote them down in his

00:04:21,060 --> 00:04:27,370
notebook. And Borgls was confused, why would you do that isn't that the opposite of a numerical

00:04:27,370 --> 00:04:32,139
system? You cannot reason about this if do you have thousands and thousands and millions

00:04:32,139 --> 00:04:36,900
of numbers with different names you cannot do arithmetic or anything useful with them.

00:04:36,900 --> 00:04:44,400
But Funes was not interest in the that he brought up a point that John lock philosopher

00:04:44,400 --> 00:04:54,330
he envisioned an imposable idiom a language ‑‑ every instance of every branch has it's own

00:04:54,330 --> 00:04:59,090
name ‑‑ everything has it's own name there, was no such thing as Aleve, it was

00:04:59,090 --> 00:05:05,240
this leaf and that leaf and that. They all had different names, of course Locke dismissed

00:05:05,240 --> 00:05:11,830
that as sort of useless, he thought you cannot reason about anything or talk about and communicate

00:05:11,830 --> 00:05:18,680
to another human being if everything has it's own name, so you cannot talk about things,

00:05:18,680 --> 00:05:30,650
but Funes Reacted to that than Borges expected. He said that system is to general. Every instance

00:05:30,650 --> 00:05:37,090
of these objects should deserve it's own name, it's essentially different, it changes over

00:05:37,090 --> 00:05:45,000
time, so to him a dog seen from the side, at 3:00 p.m. had a different name from the

00:05:45,000 --> 00:05:51,990
same dog seen from a different angle one minute later. They were just different things, arguably

00:05:51,990 --> 00:05:59,610
they are, it's not a solved problem in philosophy, identity. So we tend to think that we know

00:05:59,610 --> 00:06:05,879
identity, we look at a thing and two seconds later we treat it as the same thing. We look

00:06:05,879 --> 00:06:10,860
at a person, we meat them, ten years later we know it's the same person, but is it? I

00:06:10,860 --> 00:06:16,420
don't know. It's not a solved problem. But it's sort of a useful abstraction that we

00:06:16,420 --> 00:06:25,340
have. And Funes couldn't abstract over that. as smart as Funes seemed to be with his incredible

00:06:25,340 --> 00:06:33,639
memory, Borges made the point he thought Fun res wasn't really capable of thinking, thinking

00:06:33,639 --> 00:06:41,349
is to forget differences, to generalize, to abstract Borges argues. So we'll see that

00:06:41,349 --> 00:06:47,789
abstraction is something way deeper than just forgetting differences and losing detail,

00:06:47,789 --> 00:06:54,460
it gives us something in return. So, yeah, arguably dogs actually losing detail with

00:06:54,460 --> 00:06:59,439
dogs is sort of a shame because different dogs might behave differently, might have

00:06:59,439 --> 00:07:03,150
different properties that he're interested in, 234 the world of programming we have much

00:07:03,150 --> 00:07:09,900
simpler domains, some of those have really interesting properties that and abstractions

00:07:09,900 --> 00:07:14,280
that it's really interesting to discover them. We'll start with one of the simplest things

00:07:14,280 --> 00:07:20,919
we can think of. It's addition, so we'll start by adding two numbers, we all know how to

00:07:20,919 --> 00:07:30,150
add two numbers, and we also know how to add two strings by Cactonating them. Then to us,

00:07:30,150 --> 00:07:36,129
it's actually the same as just Cactonatinb to lists, it's not a problem, we understand

00:07:36,129 --> 00:07:44,419
that, you can do this with lists, strings and numbers, in numbers it means addition.

00:07:44,419 --> 00:07:48,919
Then we could say that these things, you can add them together and you get a thing of the

00:07:48,919 --> 00:07:56,560
same kind. It's a different thing, but it's a thing of the same kind. We also have an

00:07:56,560 --> 00:08:01,669
interesting property in addition, it's associative, no matter where you put the parenthesis, you

00:08:01,669 --> 00:08:10,400
always get the same result. In numbers, it's true, in strings it's also true. And in lists

00:08:10,400 --> 00:08:16,319
it's also true. So we're starting to see a thing that is common to these three seemingly

00:08:16,319 --> 00:08:26,629
completely different things. Associativity, now it gets interesting. There's this number,

00:08:26,629 --> 00:08:31,371
it's called zero and it's really interesting, it hasn't been around for very long, but it

00:08:31,371 --> 00:08:35,970
has an interesting property, if you add it to another number you get the original number

00:08:35,970 --> 00:08:42,990
back, so it doesn't do anything. That might seem boring, but, we have the same four strings

00:08:42,990 --> 00:08:48,500
and the same four lists, so what's interesting about this number? Well, this Element where

00:08:48,500 --> 00:08:55,850
we call the neutral Element or the sort of zero, if you add it to another thing, you

00:08:55,850 --> 00:09:03,230
get the other thing back. By knowing that something adds associatively and has a neutral

00:09:03,230 --> 00:09:10,591
Element, be it a list, a string or a number, we can, for example, fold or reduce over list

00:09:10,591 --> 00:09:16,430
of those things. Starting by the operation, addition, then the neutral Element, in this

00:09:16,430 --> 00:09:21,670
case zero and a list of numbers, we can do the same with strings, folding over lists

00:09:21,670 --> 00:09:29,310
of strings starting from the empty string, we can do the same with lists. This is sort

00:09:29,310 --> 00:09:36,501
of pseudo code, but it would be reduce in the JavaScript, and a plus operation. So we

00:09:36,501 --> 00:09:42,029
see that if these things have these properties we just described you can fold over list of

00:09:42,029 --> 00:09:46,971
them. The important thing that we only assume these two properties of those things, so we

00:09:46,971 --> 00:09:53,101
don't know that they are numbers or lists or strings, it doesn't matter. Well, that's

00:09:53,101 --> 00:10:00,350
too easy, well, like, yeah. (Laughing) so, I had to put an animated give because I didn't

00:10:00,350 --> 00:10:06,779
have any in my presentation and everyone had, so I put this one, I hope achose well. So,

00:10:06,779 --> 00:10:12,620
this is too easy, number strings, lists this all just sounds very primitive, probably it's

00:10:12,620 --> 00:10:20,490
a coincidence that they behave the same way. But, I don't think so, I'll show you something

00:10:20,490 --> 00:10:24,860
a bit different, really radically different than number strings and lists that behaves

00:10:24,860 --> 00:10:30,290
the same way. What happens when we compose two functions? We can understand that as adding

00:10:30,290 --> 00:10:35,290
two functions together, because we get a function at the end that is somehow the addition of

00:10:35,290 --> 00:10:41,070
both. So if we compose two functions with a plus, let's just imagine that's the composition

00:10:41,070 --> 00:10:50,370
operator, you get the same as applying G to X and then F to the result of that. Now, functions

00:10:50,370 --> 00:10:58,790
add associatively as well, or compose associatively, so yeah, that works out the same way. And

00:10:58,790 --> 00:11:02,941
interestingfully we need a new elmented for functions, that's a bit different. What's

00:11:02,941 --> 00:11:09,570
a zero for functions? A function that does nothing. Well, that would be the identity

00:11:09,570 --> 00:11:16,440
function that just returned it's argument. That really does nothing. So, if you compose

00:11:16,440 --> 00:11:20,329
F with the I deputy function you get F back, it's the same the ‑‑ identity function

00:11:20,329 --> 00:11:26,480
you get F back. Same thing holds for functions as well. So theoretically we could fold over

00:11:26,480 --> 00:11:34,589
list of functions starting with the identity function and it works. The point here is that

00:11:34,589 --> 00:11:40,320
it's not only about functions or lists or strings, it's just about these two properties

00:11:40,320 --> 00:11:45,350
that we know of them. So there are many other things that in your code bases you can see

00:11:45,350 --> 00:11:49,980
and you can identify as things that add associatively and have a neutral Element. You just need

00:11:49,980 --> 00:11:55,820
to get a little creative. Just squint your eyes a little bit and say, I think this behaves

00:11:55,820 --> 00:12:01,899
like that even if it's completely different. These two properties associative addition

00:12:01,899 --> 00:12:07,800
neutral Elements sort of a mouthful to say all the time. So someone gave them an name,

00:12:07,800 --> 00:12:12,350
it's a scary name, but not square scary once you understand what they are. Just like these

00:12:12,350 --> 00:12:29,310
two things people call monoknowed, things that have these two properties, Monoid) we

00:12:29,310 --> 00:12:36,300
have arrays lists and sets today, or maybe just arrays like most of the time. Let's abstract

00:12:36,300 --> 00:12:40,570
over that and just talk about collections of things, the collection of T collection

00:12:40,570 --> 00:12:52,110
of integer. Collection is a thank represents zero or more things, we can map over them

00:12:52,110 --> 00:12:59,640
with a function, right. So that is a way to transform the Elements in a collection. The

00:12:59,640 --> 00:13:03,660
interesting thing is that if the collection is empty, nothing happens. You get an empty

00:13:03,660 --> 00:13:10,730
collection back, that might seem normal and just boring Evan, but it's interesting, we'll

00:13:10,730 --> 00:13:23,380
see why in a minute so as you expects if you map interempty list you get an empty list

00:13:23,380 --> 00:13:29,120
that's easy enough. Then we have a different kind of collections that represents zero or

00:13:29,120 --> 00:13:39,170
one Element. And those we call optionals or options or maybes, depends on language. Now,

00:13:39,170 --> 00:13:42,839
we can also map over those because they are sort of the same sort of container, so we

00:13:42,839 --> 00:13:46,720
can transform the Element if it's there, and don't do anything if it's not there, it's

00:13:46,720 --> 00:13:54,130
like an empty list, right. So we can map increment over someone and get sum two or just over

00:13:54,130 --> 00:13:59,920
none you get none back. So it's sort of like a list of one Element. But then there's something

00:13:59,920 --> 00:14:09,980
a bit different that behaves exactly the same, and it's futures. Futures are just things

00:14:09,980 --> 00:14:15,420
that represent an Evanual value, so eventually "X" or an error. So it's something in the

00:14:15,420 --> 00:14:23,310
future that will either return a value or yield a error. But we can also map over those

00:14:23,310 --> 00:14:28,070
because if we think of them as just these sort of containers we can transform the value

00:14:28,070 --> 00:14:38,089
when ever it exists and just don't do anything if there's an error or do something else.

00:14:38,089 --> 00:14:44,860
Now this is cannot with a coincidence ‑‑ this cannot be a coincidence. They're wildly

00:14:44,860 --> 00:14:48,829
different, especially a future from the rest of the things they behave the same with the

00:14:48,829 --> 00:14:54,389
function map, there must be a function map that capture it is essence of this operation,

00:14:54,389 --> 00:15:01,230
mapping over a thing to understand that we'll start calling these sort of different things

00:15:01,230 --> 00:15:09,170
like futures, collections and optionals we'll start calling them boxes or pots in like in

00:15:09,170 --> 00:15:16,420
Stephanie's talk. So let's talk about boxes, doesn't matter what it is, just a box. So,

00:15:16,420 --> 00:15:24,300
just knowing that a box be it a future, optional or collection, if we map over it with a function

00:15:24,300 --> 00:15:29,720
in a place the F function to whatever's inside the box in a way the box sees fit. Each box

00:15:29,720 --> 00:15:38,550
has it's own semantics, returns it all in the same kind of box. Now, I cannot stress

00:15:38,550 --> 00:15:44,959
enough in a place a function in the way it sees fit. We do not get to see, no, I apply

00:15:44,959 --> 00:15:49,080
the function two times for the first Element, three times for the Element that we'll be

00:15:49,080 --> 00:15:55,089
eventually whatever. The box knows what to do. It applies functional how ever many times

00:15:55,089 --> 00:16:02,129
it wants and exactly when it wants, if at all. So it has a lot of power. It's not just

00:16:02,129 --> 00:16:12,670
a dumb container of things. Encapsulation, if you've done OO this is sort of a holy cow

00:16:12,670 --> 00:16:22,759
ofOO, it is for a good reason. In these boxes have also sort of the same properties, you

00:16:22,759 --> 00:16:26,899
shouldn't reach into them and try to get the values out of them. If you have an empty list

00:16:26,899 --> 00:16:32,279
and you try to get the first Element, what do you get, nil, null, undefined an error

00:16:32,279 --> 00:16:37,681
your computer freezes, you don't want to go there. The same way with optionals if you

00:16:37,681 --> 00:16:41,529
have a non, a thing that has nothing in it, if you try to extract the value what to you

00:16:41,529 --> 00:16:48,960
get F you try to wait for a future, basically means blocking a thread till the future realizes

00:16:48,960 --> 00:16:53,040
it's value, which is not ideal, you should never block the thread, I shouldn't have to

00:16:53,040 --> 00:17:01,410
say this here. So ... let the box decide. That's the whole point of boxes, so it doesn't

00:17:01,410 --> 00:17:06,460
matter what the box is, it will do the right thing. That's a powerful thing because the

00:17:06,460 --> 00:17:11,880
only thing we need to learn is just the function map. And with that we can do all sorts of

00:17:11,880 --> 00:17:20,250
things with futures, optionals and lists and many more things. Now, this has a name, these

00:17:20,250 --> 00:17:28,350
boxes are called Functors, in sort of a, I don't know academic‑speak. So if you ever

00:17:28,350 --> 00:17:33,820
see this word, it's just boxes, nothing else, boxes that you can map over with a function.

00:17:33,820 --> 00:17:39,370
So no problem there. Now, this is quite a lot of power, the map function, but it's not

00:17:39,370 --> 00:17:49,540
the only function that we can use, there are other things. Especially there's a case where

00:17:49,540 --> 00:17:58,070
a function yields another box so you end up with nested and nested and nested boxes. If

00:17:58,070 --> 00:18:04,720
you have box of T and a function from T to box of U if you have more of those functions

00:18:04,720 --> 00:18:10,560
you end up with just nested boxes and that's just not, you cannot just map over that. I

00:18:10,560 --> 00:18:15,480
mean that's not always a problem, but it usually is. So more concretely we have a collection

00:18:15,480 --> 00:18:21,480
of strings, and a function from string to collection of strings. Let's say we have this

00:18:21,480 --> 00:18:29,170
string and we want to split it by comma. And then split it by dot, each of those Elements,

00:18:29,170 --> 00:18:33,160
we end up with a nested list. The problem with a nested list is that if you want to

00:18:33,160 --> 00:18:38,660
keep processing it, you need to know at which depth you're operating where are the strings

00:18:38,660 --> 00:18:44,000
like at the first step or second. This is not a good thing because this basically doesn't

00:18:44,000 --> 00:18:48,590
compose, if you pass it to another piece of code, the code now knows which depth it needs

00:18:48,590 --> 00:18:58,280
to operate at. Which is not good. So we want to do this, there's this handy function, Flatmap.

00:18:58,280 --> 00:19:05,170
That basically like map, but it Coconates the results at the end, it flattens the collection,

00:19:05,170 --> 00:19:11,250
so we get instead of map, we use Flatmap and we get on with our life, everything is platenned

00:19:11,250 --> 00:19:18,030
and you can keep processing each Element. If you have optionals, an option address and

00:19:18,030 --> 00:19:26,050
function address and option street number, because everything from address is uncertain,

00:19:26,050 --> 00:19:30,260
you end up with a nested sum or like a nested option, and that's not good, you might even

00:19:30,260 --> 00:19:39,710
end up with a nested ‑‑ or with just a non, nonasset or non, nonsomething so you

00:19:39,710 --> 00:19:44,740
don't even know determinationically what's going to happen like what depth are you going

00:19:44,740 --> 00:19:51,150
to have to operate. That's a No‑Go. If you do the same with optionals because they behave

00:19:51,150 --> 00:19:57,450
like listest basically you can also Flatmap over them and Coconate ‑‑ which means

00:19:57,450 --> 00:20:09,400
just flatten the whole thing. Which would be a non, or sum if it's actually a sum. And

00:20:09,400 --> 00:20:18,110
finery the same thing can be done for futures. If we had a code that calls an API and gets

00:20:18,110 --> 00:20:23,380
a future of Repository from GitHub and then a function that takes a Repository and knows

00:20:23,380 --> 00:20:29,410
how to pitch it's followers from the API as ‑‑ knows how to fetch it's followers from the

00:20:29,410 --> 00:20:34,290
API as well. If you keep going back and forth we wean with the API you end up with nested

00:20:34,290 --> 00:20:43,880
futures, it's a mess, what you want is Flatmap, it's exactly the same. We see that it flattens

00:20:43,880 --> 00:20:51,430
the future just as if it was a list. Now, Flatmap for boxes means that it applies F

00:20:51,430 --> 00:20:55,860
to whatever's inside the box in the way the boxes fit just like map and then flattens

00:20:55,860 --> 00:21:04,150
the results presumably a nested box into a single flat box with it's own semantics, futures,

00:21:04,150 --> 00:21:09,900
wait until one future returns and do the next thing or just optionals basically take ‑‑

00:21:09,900 --> 00:21:17,110
give you a sum if everything went well and none if something went wrong. That's each

00:21:17,110 --> 00:21:24,930
box has it's own semantics. So when ever you find yourself with a thing, a box, and then

00:21:24,930 --> 00:21:30,300
function from T to box of U or function from V to box of U to V and so on, it's sort of

00:21:30,300 --> 00:21:38,100
deep functions what you want is Monads, is exactly the Flatmap function, that's all it

00:21:38,100 --> 00:21:47,000
is, it's all called bind in some other languages, but it's called Flatmap in Scalla and other

00:21:47,000 --> 00:21:52,440
sort of ‑‑ there's so many names for the same thing, whatever. Flatmap is good,

00:21:52,440 --> 00:22:02,450
it makes you think of map and then flatten. So ... now, as a recap we saw that just by

00:22:02,450 --> 00:22:08,670
knowing these two things associative addition and neutral Element, of anything, we can fold

00:22:08,670 --> 00:22:16,490
a real list of those anythings. We don't need to know anything else about it. Then we know

00:22:16,490 --> 00:22:20,760
that if we have a box, doesn't matter what kind of box it is, and I assure you this'

00:22:20,760 --> 00:22:25,310
hundreds of hundreds of different kinds of boxes you can use map, with your function

00:22:25,310 --> 00:22:33,270
and it will work, the way you intuitively expect. And with Flatmap, it works when you

00:22:33,270 --> 00:22:41,180
have functions that create nested boxes and you want a normal box back. So, now that you've

00:22:41,180 --> 00:22:50,620
seen all these abstractions, you only need to go to your own code bases like, just make,

00:22:50,620 --> 00:22:55,800
like this, a little bit, and see in your own code, oh, this looks like a box that you map

00:22:55,800 --> 00:23:04,160
over. Or this looks like a thing that produces a nested something. And even though you didn't

00:23:04,160 --> 00:23:08,900
have names maybe some of you did, but many of you didn't have names for that before.

00:23:08,900 --> 00:23:14,430
Now you know what they're called and you will recognize them in your own code. And then

00:23:14,430 --> 00:23:21,460
you will know there's map and Flatmap to your rescue, basically. So, I dare you to go to

00:23:21,460 --> 00:23:27,130
your code bases and look for these patterns, and also, to Monads we were talking about

00:23:27,130 --> 00:23:34,090
for example you could think of validation errors as things that add associatively and

00:23:34,090 --> 00:23:38,870
have a neutral Element, which would be the lack of errors. And then you could just fold

00:23:38,870 --> 00:23:44,110
over the list of validation errors and have just a bigger validation or just a success.

00:23:44,110 --> 00:23:50,940
So things like that. Be creative with identifying spotting things in your own code. Finally,

00:23:50,940 --> 00:23:57,030
I'd like to thank Jessica Kerr for encouraging me to do this talk and guiding me through

00:23:57,030 --> 00:24:04,760
the sort of the topics. And I actually, I don't think we have time for questions ‑‑

00:24:04,760 --> 00:24:08,040

YouTube URL: https://www.youtube.com/watch?v=4dwZ-WIJCSo


