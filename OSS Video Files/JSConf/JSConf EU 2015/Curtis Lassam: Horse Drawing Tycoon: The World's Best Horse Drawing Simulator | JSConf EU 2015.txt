Title: Curtis Lassam: Horse Drawing Tycoon: The World's Best Horse Drawing Simulator | JSConf EU 2015
Publication date: 2015-10-22
Playlist: JSConf EU 2015
Description: 
	After a local VanJS meetup, my friends and I were tossing around project ideas. Someone referenced a website that would procedurally generate terrible ideas for video games. “A tycoon game where you draw horses indefinitely”.

What a wonderful, terrible, awful idea for a game.

In this presentation, we go through the 1000 lines of Javascript and two weeks of drunken after-work coding required to produce the world’s only horse drawing tycoon simulator, with Canvas, Twitter integration, the legendary HorseHash™ algorithm, HorseCurrency™, and HorseStamps®!

You’ll pay for the whole seat but you’ll only need the edge.

Intro music by @halfbyte
Captions: 
	00:00:21,840 --> 00:00:22,840
Hi.

00:00:22,840 --> 00:00:24,480
I'm Curtis Lassam.

00:00:24,480 --> 00:00:27,420
You can also find me on Twitter, I'm classam.

00:00:27,420 --> 00:00:32,500
I work at a company called Sauce Labs, they let me come to this conference without burning

00:00:32,500 --> 00:00:43,050
holiday PTO, take a moment to take in this slide, I produce cube drone.com, before I

00:00:43,050 --> 00:00:48,320
start the presentation, JavaScript, very confidently a couple of times, in case we get a DJ again

00:00:48,320 --> 00:00:53,160
next year, JavaScript, JavaScript, JavaScript!!

00:00:53,160 --> 00:00:55,650
Ok {Laughter}.

00:00:55,650 --> 00:01:01,500
So this presentation is called HorseDrawingTycoon, the world's best horse drawing simulator,

00:01:01,500 --> 00:01:10,110
or how I turned the world's dumbest JavaScript into time off work, yes my presentation full

00:01:10,110 --> 00:01:15,380
title is 31 years long, that's how you know you will get a lot of bang for buck, nobody

00:01:15,380 --> 00:01:23,000
will offer this density, nobody that's who.

00:01:23,000 --> 00:01:30,360
I'm from Vancouver Canada, VanJS is a small meet up local to Vancouver, I'm talking with

00:01:30,360 --> 00:01:32,580
a friend at the pub, he wants to make video

00:01:32,580 --> 00:01:41,020
games, he has a bunch of ideas, they're all really good, I took it upon myself to suggest

00:01:41,020 --> 00:01:49,110
games that would never take on, like Breakout where you play with bricks.

00:01:49,110 --> 00:01:56,840
An indie game generator produced incredible ideas, like a horror came where you ride horses

00:01:56,840 --> 00:02:10,850
with Ninjas, or FGS where you stab researches, these ideas too were obviously much too could,

00:02:10,850 --> 00:02:15,630
I would play any of the games it described, eventually it came to an idea so bad nobody

00:02:15,630 --> 00:02:22,150
would ever want to play that game, a tycoon game where you draw horses indefinitely it's

00:02:22,150 --> 00:02:27,630
the worse idea for a game I ever heard, I had to build it, in order to finish it before

00:02:27,630 --> 00:02:32,489
everyone forget the bar conversation I had to build it really quickly, obviously it didn't

00:02:32,489 --> 00:02:41,560
need to be could, my VanJS companions had many questions, questions like, how are you

00:02:41,560 --> 00:02:43,910
going to build it, canvass.

00:02:43,910 --> 00:02:47,260
How are you going to know people are going to draw horses, isn't this just going to be

00:02:47,260 --> 00:02:53,069
an obscenity drawing game, I would discover the answers to these questions.

00:02:53,069 --> 00:03:00,740
Although I did not at any point know that the horse recognising artificial intelligence.

00:03:00,740 --> 00:03:04,989
So before I go any further into this presentation, I have to tell you this is an actual piece

00:03:04,989 --> 00:03:13,700
of software that exists, I'll do a short demonstration for you, HorseDrawingTycoon, I can stamp horses,

00:03:13,700 --> 00:03:25,719
pick a colour, brush size, I can scribble, it's got everything.

00:03:25,719 --> 00:03:26,989
Ok.

00:03:26,989 --> 00:03:32,360
This is a horse that somebody drew with HorseDrawingTycoon, this application has been running uninterrupted

00:03:32,360 --> 00:03:37,579
since I launched it, it's pretty 'Stable'!!

00:03:37,579 --> 00:03:44,409
{Laughter} that brings us to chapter 2, canvass.

00:03:44,409 --> 00:03:49,340
The most interesting part of a horse drawing simulator would be of course the drawing part,

00:03:49,340 --> 00:03:54,400
which gives me an opportunity to talk about the HTML 5 canvass element the canvass tag

00:03:54,400 --> 00:03:58,450
allows you to create an element in the DOM you can draw horses on.

00:03:58,450 --> 00:04:03,420
While I'm certain there may be other uses for the canvass element, say video games or

00:04:03,420 --> 00:04:07,689
stuff involving graphics I can't see how any non-horse drawing use of canvass is worth

00:04:07,689 --> 00:04:15,310
acknowledging, it exposes something called a rendering context to the page's JavaScript,

00:04:15,310 --> 00:04:22,841
it encapsulates all the actions you can perform on the canvass, the entire canvass API, you

00:04:22,841 --> 00:04:27,389
can get a rendering context with code that looks like this.

00:04:27,389 --> 00:04:33,139
Then, you can do stuff to the canvass element using the API defined by the rendering context,

00:04:33,139 --> 00:04:39,290
here we are drawing a rectangle that is blue, note that we are specifying a 2 D context

00:04:39,290 --> 00:04:45,289
here, is also has a 3 D rendering API, using it for the horse drawing application might

00:04:45,289 --> 00:05:01,560
be a bit out of scope the primary things to draw are paths, rectangles, text and Bitmaps,

00:05:01,560 --> 00:05:05,910
- this is the sort of tooling that lends itself to building a game engine for a stupid horse

00:05:05,910 --> 00:05:12,280
drawing application it's a little bit complicated the create JS libraries are for building rich

00:05:12,280 --> 00:05:20,180
content in JavaScript applications, PreloadJS, SoundJS, between JS, EaselJS is the part we're

00:05:20,180 --> 00:05:26,990
interested in, it allows us to work with the HTML 5 canvass, it contains convenience methods

00:05:26,990 --> 00:05:34,460
for working with a bunch of things like sprites, blurs, buttons points and strokes, the bitmap

00:05:34,460 --> 00:05:41,370
object is really useful for stamps, I don't have much to say about stamps, if you dynamically

00:05:41,370 --> 00:05:52,090
set the cursor and use a bitmap, we have horse stamps, horse stamps in action.

00:05:52,090 --> 00:05:57,710
Now stamps are all well and good this is of course stamping is this is into stamping tycoon,

00:05:57,710 --> 00:06:03,150
it's HorseDrawingTycoon, when figuring out how to draw horses, I tried to draw a circle

00:06:03,150 --> 00:06:10,460
under the pen while it detected a movement while the user was clicking, the problem with

00:06:10,460 --> 00:06:13,770
that, the mouse can move much quicker than the sample rate of the browser, so instead

00:06:13,770 --> 00:06:22,210
of flowing lines we get dots everywhere, the first thing I tried didn't work.

00:06:22,210 --> 00:06:23,370
We can connect those dots with

00:06:23,370 --> 00:06:27,639
lines to complete the drawing, it works pretty well, but fast movements will still result

00:06:27,639 --> 00:06:30,550
in drawings with hard edges.

00:06:30,550 --> 00:06:36,199
I remember the deviant art mirror simulated covers by connecting lines to previous points

00:06:36,199 --> 00:06:43,060
instead of just the last line, it was a beautiful affect but not really what I was going for.

00:06:43,060 --> 00:06:51,890
The technique I used was one I found in demo, between every two points I created a mid-point,

00:06:51,890 --> 00:06:56,380
when I reached the next point in the drawing I create a quadratic curve from the last mid-point

00:06:56,380 --> 00:07:03,680
to the next point, it's kind of complicated in this draw.

00:07:03,680 --> 00:07:13,569
Quadratic Bezier covers are more complicated than they sound, here we are just curving

00:07:13,569 --> 00:07:19,050
between the mid-point of the last slide to the next point in our drawing, ending up creating

00:07:19,050 --> 00:07:22,770
a nice smooth curve.

00:07:22,770 --> 00:07:26,810
Here are some more horses that actual people have drawn using HorseDrawingTycoon.

00:07:26,810 --> 00:07:30,290
Ok, so we're done with canvass for now.

00:07:30,290 --> 00:07:36,849
That's takes us to chapter 3, LucidJS, at the VanJS presentation I just attended a talk

00:07:36,849 --> 00:07:42,580
on Twitter's flight, a component shading event driven framework, it was interesting in the

00:07:42,580 --> 00:07:46,479
point of being my application as a collection of components that send and receive events

00:07:46,479 --> 00:07:53,509
appealed to me, flight itself wasn't the right framework for me, months earlier I attended

00:07:53,509 --> 00:07:59,270
a talk on LucidJS, pretty much the same thing, but I was paying more attention during the

00:07:59,270 --> 00:08:06,199
LucidJS, JavaScript has the own baked in events, but we need to maintain separation between

00:08:06,199 --> 00:08:11,050
elements like click and things like clear canvass.

00:08:11,050 --> 00:08:18,050
Let's look at a simple LucidJS event emitter, we can create an emitter to manage events,

00:08:18,050 --> 00:08:24,509
then we can combined function to an event, we're binding it to the super awesome event,

00:08:24,509 --> 00:08:28,099
then we can call the function by emitting the function 0 come event, passing any events

00:08:28,099 --> 00:08:31,130
to the function.

00:08:31,130 --> 00:08:36,720
LucidJS that has a lot of functions above and beyond a standard event emitter, you can

00:08:36,720 --> 00:08:43,419
bind specific events to one another, name space events so that only specific listeners

00:08:43,419 --> 00:08:48,030
will receive those events and even create meta listeners and listen on the very act

00:08:48,030 --> 00:08:50,940
of binding itself.

00:08:50,940 --> 00:08:54,220
HorseDrawingTycoon comfortably ignores all of these features but they are all potentially

00:08:54,220 --> 00:08:58,100
useful for larger applications.

00:08:58,100 --> 00:09:02,260
So how is those better than defining global functions and then calling them?

00:09:02,260 --> 00:09:12,010
Well more than one function can be bound against an event, the canvass function can behind

00:09:12,010 --> 00:09:17,140
it to the current brush stroke, at the same time the component that manages the cursor

00:09:17,140 --> 00:09:20,630
could also behind to that event and change the colour of the cursor when it receives

00:09:20,630 --> 00:09:22,690
the change colour event.

00:09:22,690 --> 00:09:27,860
Both components are responding separately to the change colour event and neither of

00:09:27,860 --> 00:09:33,370
the components needs to know about the other or what the component is doing with the event.

00:09:33,370 --> 00:09:37,440
The other benefit of the vent stream this events become a stream of objects you can

00:09:37,440 --> 00:09:42,570
manage, it's possible to see realise all events and store them for later, keeping a complete

00:09:42,570 --> 00:09:48,921
history of very event in your application, or a component that listens for events that

00:09:48,921 --> 00:09:56,620
change the application state and keep track of it using local storage, that same component

00:09:56,620 --> 00:10:00,480
could reemit the events when the application boots up.

00:10:00,480 --> 00:10:05,880
Now if that sounds like a needlessly convoluted way to handle story in your application I

00:10:05,880 --> 00:10:13,770
can assure you it is, that's how HorseDrawingTycoon stores data and it's a bad idea.

00:10:13,770 --> 00:10:17,480
One of the problems with this sort of implementation the components can tie what ever they want

00:10:17,480 --> 00:10:22,440
to an event, replaying those events we might only want to trigger some of those effects,

00:10:22,440 --> 00:10:27,120
there is no granular way to control them, it's one of the places where more of the advanced

00:10:27,120 --> 00:10:33,090
features would have come in handy like name spacing for example, if I was to rewrite the

00:10:33,090 --> 00:10:39,270
serialisation of HorseDrawingTycoon I probably wouldn't have done it that way, I still think

00:10:39,270 --> 00:10:41,270
events are awesome though.

00:10:41,270 --> 00:10:45,320
One more time, yeah!

00:10:45,320 --> 00:10:51,460
That ends our chapter on LucidJS, I have more horses to fill the gaps between chapters.

00:10:51,460 --> 00:10:52,620
Really cool horses.

00:10:52,620 --> 00:10:53,620
! {Laughter} .

00:10:53,620 --> 00:10:57,120
It brings me to chapter 4, local storage.

00:10:57,120 --> 00:11:02,720
When it comes to stashing things on the browser side there are few options that are well supported,

00:11:02,720 --> 00:11:08,320
web SQL that only works on Chrome and safari, indexedDb that works in Chrome and sort of

00:11:08,320 --> 00:11:14,380
safari, local storage that works absolutely everywhere, but at the expense of being dumb

00:11:14,380 --> 00:11:17,500
as a rock.

00:11:17,500 --> 00:11:20,810
Actually the simplicity of local storage is exactly what I'm looking for when building

00:11:20,810 --> 00:11:24,630
such a simple application as HorseDrawingTycoon.

00:11:24,630 --> 00:11:30,370
Let's look at the local storage API, you can write to local storage with set item, everything

00:11:30,370 --> 00:11:34,930
you write is saved against a key, in this case we're saving the string JSConf, against

00:11:34,930 --> 00:11:41,180
the key, hi, we can read from local storage with get item.

00:11:41,180 --> 00:11:44,750
When you write to local storage that data sticks around every time the user returns

00:11:44,750 --> 00:11:47,990
to your website on the same browser.

00:11:47,990 --> 00:11:54,520
There are multiple ways to access local storage, using get item and standard object interfaces.

00:11:54,520 --> 00:11:59,510
Considering how the key, I don't exist, does not in fact exist, all three of these calls

00:11:59,510 --> 00:12:02,480
are going to fail.

00:12:02,480 --> 00:12:08,500
In this case, because the key doesn’t exist, x is no, but y and z are undefined, the different

00:12:08,500 --> 00:12:21,940
ways of accessing local storage data operate differently.

00:12:21,940 --> 00:12:25,870
Another important thing local storage can only deal in string data if you are dealing

00:12:25,870 --> 00:12:37,060
with anything not a string you have to serialise and deserialise, use JSON string and JSON

00:12:37,060 --> 00:12:38,060
parse.

00:12:38,060 --> 00:12:43,060
Self referential data structures, in JavaScript self referential data structures like this

00:12:43,060 --> 00:12:51,830
one right here, are unserialisable, there are a few options for avoiding this, the first

00:12:51,830 --> 00:13:00,310
is making it possible to realise - your other options just not to write code that has a

00:13:00,310 --> 00:13:03,480
cycle in it.

00:13:03,480 --> 00:13:06,310
Another thing that to potentially concern yourself with is what happens when you run

00:13:06,310 --> 00:13:12,480
out of space in local storage, it varies from browser to browser and per domain you might

00:13:12,480 --> 00:13:22,270
have 2.5Mb, 5Mb or unlimited space, these are the most common quotas, there are others.

00:13:22,270 --> 00:13:27,710
If you go over your quota, your browser will throw a quota exceeded error, I bet you are

00:13:27,710 --> 00:13:31,210
excited to hear how I built my application to cleverly avoid the problem of cyclical

00:13:31,210 --> 00:13:32,210
data structures.

00:13:32,210 --> 00:13:35,350
How I manage to keep my storage needs in check.

00:13:35,350 --> 00:13:38,610
I completely ignored these things.

00:13:38,610 --> 00:13:50,050
As it turns out in application as small as mine it's easy 

00:13:50,050 --> 00:13:53,350
so that's chapter on local storage.

00:13:53,350 --> 00:13:58,190
Chapter 5, horse rank one feature of my application is that every horse drawing is run from a

00:13:58,190 --> 00:14:03,700
complicated artificial intelligence algorithm that ranks had horse like every image is.

00:14:03,700 --> 00:14:08,730
It's much dumber than I make it out to be.

00:14:08,730 --> 00:14:13,060
It's possible to use the get image data function of a context to get raw data that's been displayed

00:14:13,060 --> 00:14:16,370
on the screen as any given pixel.

00:14:16,370 --> 00:14:21,020
The function produce and object, the object have very, very

00:14:21,020 --> 00:14:30,110
long array that containing red green blue, each pixel takes 4 spaces in the array, information

00:14:30,110 --> 00:14:36,420
is laid out 4 at a time in red, green, blue and alpha for each pixel, alpha being a fancy

00:14:36,420 --> 00:14:37,810
graphics word for transparency.

00:14:37,810 --> 00:14:44,690
When you get to the end of the row it continues with the next row with that established it's

00:14:44,690 --> 00:14:50,200
super easy the his toe cram of the colours that the player you had even display that

00:14:50,200 --> 00:14:56,320
hest gram to the user so that the terrible secret of horse rank has been revealed.

00:14:56,320 --> 00:15:03,181
So, while we're talking about cool things that we can do with the entire canvas, let's

00:15:03,181 --> 00:15:06,600
talk about saving the users horse.

00:15:06,600 --> 00:15:11,040
Which is actually really easy with the 2 data URL function.

00:15:11,040 --> 00:15:16,541
This function converts the whole canvas into a URL, but a URL that contains all of the

00:15:16,541 --> 00:15:21,120
data for the entire image encoded in base 64.

00:15:21,120 --> 00:15:25,630
These strings are very, very long but they contain all of the data of your entire image.

00:15:25,630 --> 00:15:33,290
Just going to take a quick sip of this water.

00:15:33,290 --> 00:15:36,820
These things are down right magic you can just slap them into an image tag bam! there's

00:15:36,820 --> 00:15:39,330
your image.

00:15:39,330 --> 00:15:44,320
Once the image is serialised like this is really easy to save, but it's also really

00:15:44,320 --> 00:15:46,620
easy to Tweet.

00:15:46,620 --> 00:15:53,480
Which brings us to chapter 7, secretly tweeting every single thing the users draws.

00:15:53,480 --> 00:15:58,040
If you navigate to Twitter.com/infinite horse you will see a strong of every single horse

00:15:58,040 --> 00:15:59,770
ever drawn with the application.

00:15:59,770 --> 00:16:04,500
I will take you on a live tour if somebody one has drawn an obscene horse in the lass

00:16:04,500 --> 00:16:08,410
20 minutes I will shine an unpleasant light on the presentation.

00:16:08,410 --> 00:16:21,410
It works about how you imagine I. I am going to leave the details of the server large unexplored,

00:16:21,410 --> 00:16:26,670
this JavaScript built the server machinery in python the whole thing fits into about

00:16:26,670 --> 00:16:33,150
160 lines on Google app energy for free, it's python it's not really what we want to call

00:16:33,150 --> 00:16:38,320
the (inaudible) because I hosted the tweet machinery on a different server I have to

00:16:38,320 --> 00:16:45,120
make a cross origin request to save that tweet which brings us to our chapter on CORS.

00:16:45,120 --> 00:16:49,180
As you know making a request from one domain to another is forbidden in JavaScript.

00:16:49,180 --> 00:16:59,700
The first way to get round that the first JSONP loads this theoretical horse drawing

00:16:59,700 --> 00:17:02,230
application that might use JSONP.

00:17:02,230 --> 00:17:07,260
You are always allowed to do this regardless of the origin in this example we're visiting

00:17:07,260 --> 00:17:14,929
the server horse.picks with the data foo there's an error don't look too closely, the server

00:17:14,929 --> 00:17:18,839
responds with a script that contains a call back function that contains any requested

00:17:18,839 --> 00:17:22,280
data to application.

00:17:22,280 --> 00:17:26,529
In this example we're calling back with the return data bar, this will call a function

00:17:26,529 --> 00:17:31,890
you have defined globally, returning control to your application with any data you have

00:17:31,890 --> 00:17:33,669
requested.

00:17:33,669 --> 00:17:38,500
JQuery will abstract most of these details away from you if you tell to it make a JSONP

00:17:38,500 --> 00:17:42,350
request to a server all you need to do is make sure your server properly returns a call

00:17:42,350 --> 00:17:43,559
back.

00:17:43,559 --> 00:17:49,669
There is some problems with the strategy though for one thing it's only capable of sending

00:17:49,669 --> 00:17:51,660
get requests.

00:17:51,660 --> 00:18:00,309
If you’re a reuqest fanatic the thought of using it hurts you to very core on top

00:18:00,309 --> 00:18:05,659
of that in order to fit our entire image, our URL would have to be over 50,000 characters

00:18:05,659 --> 00:18:06,909
long.

00:18:06,909 --> 00:18:12,240
Theoretically there's no limit on URL size many standards compliant servers browser start

00:18:12,240 --> 00:18:18,490
to choke our about 2000 characters having a crazy long URL will make logging very difficult.

00:18:18,490 --> 00:18:25,720
It seems like a bad idea to use JSONP this way which takes us to other strategy.

00:18:25,720 --> 00:18:26,880
CORS.

00:18:26,880 --> 00:18:32,740
CORS, or cross origin resource sharing is a relatively new feature now supported in

00:18:32,740 --> 00:18:34,080
all browsers.

00:18:34,080 --> 00:18:38,821
It's really simple before making a call to your browser it will check to receive your

00:18:38,821 --> 00:18:42,440
URL returns a special access control allow origin header

00:18:42,440 --> 00:18:47,080
containing the domain you are now browsing from or a while the card which will allow

00:18:47,080 --> 00:18:49,960
the resource to from any script.

00:18:49,960 --> 00:18:54,659
Once the browser has checked it’s ok it will gladly lift the barriers of the same

00:18:54,659 --> 00:18:59,039
origin policy for you.

00:18:59,039 --> 00:19:03,279
So this again can be abstracted away with a jQuery option as long as you spend 5 minutes

00:19:03,279 --> 00:19:05,980
or so making sure you server supports it.

00:19:05,980 --> 00:19:08,080
That's it.

00:19:08,080 --> 00:19:13,380
That's all the technical detail I have for you now let's look at some horse drawings.

00:19:13,380 --> 00:19:16,880
Now you might imagine the distribution of horse drawings might look like this.

00:19:16,880 --> 00:19:23,279
{laughter} 5% actual horse drawings, 95% obscene drawings but in fact after looking at a sample

00:19:23,279 --> 00:19:29,409
of 100 horses the actual numbers look a lot more like this with 11% incomprehensible scribbles,

00:19:29,409 --> 00:19:36,909
23% recognisable horse which is a surprisingly large number, 1% of obscene drawings, 30%

00:19:36,909 --> 00:19:42,039
with some stamps and 36% with way too many stamps.

00:19:42,039 --> 00:19:45,370
It's really common for people to discover the stamp tool right away then draw we something

00:19:45,370 --> 00:19:48,850
that looks like this.

00:19:48,850 --> 00:19:51,899
Some of the horses that were drawn were simplistic.

00:19:51,899 --> 00:19:57,549
Minimalistic, other horses were complicated, rich in detail.

00:19:57,549 --> 00:20:02,720
{laughter} some people were quite talented at horse drawing.

00:20:02,720 --> 00:20:05,980
This person seemed to have a lot of trouble drawing a horse.

00:20:05,980 --> 00:20:11,659
Their next drawing supported this theory.

00:20:11,659 --> 00:20:19,540
{laughter} some horses were magical, some were fat, some people had trouble drawing

00:20:19,540 --> 00:20:27,059
really compelling horses some horse artist were very literal just writing the word horse.

00:20:27,059 --> 00:20:28,799
Quite a few of them actually.

00:20:28,799 --> 00:20:31,179
Horse yo.

00:20:31,179 --> 00:20:38,500
I draw a horse, this one looks like an engineer drew a horse.

00:20:38,500 --> 00:20:45,289
One user went in a clever direction and actually drew a horse drawing a tycoon.

00:20:45,289 --> 00:20:51,330
{laughter} another user drew me an ancient cave painting.

00:20:51,330 --> 00:20:55,220
I have many more interesting horses I could show you.

00:20:55,220 --> 00:21:00,629
There are over 2000 that have been posted since I built the application, but after all

00:21:00,629 --> 00:21:03,840
this talking, I am feeling a little hoarse.

00:21:03,840 --> 00:21:07,210
Hah, hah another horse pun.

00:21:07,210 --> 00:21:08,720
So that's the presentation.

00:21:08,720 --> 00:21:13,940
I understand that I have thrown a lot of information up on these slides so if you want to see anything

00:21:13,940 --> 00:21:19,370
you have left you can get the whole slide deck off of this URL.

00:21:19,370 --> 00:21:23,150
There are also available from my home page at Curtis.Lassam.net but my home page is served

00:21:23,150 --> 00:21:28,850
out California it's not behind a CDN, the whole presentation could take you several

00:21:28,850 --> 00:21:35,230
days or years to actually load which is why it put it up here behind my CDN.

00:21:35,230 --> 00:21:36,230
Thanks for watching everyone.

00:21:36,230 --> 00:21:36,231

YouTube URL: https://www.youtube.com/watch?v=BRbcoXq_x2M


