Title: Stefanie Schirmer: Functional programming and curry cooking in JS | JSConf EU 2015
Publication date: 2015-10-08
Playlist: JSConf EU 2015
Description: 
	Are you interested in learning about functional programming? Are you reaching the limits of abstraction when programming in JavaScript? Do you sometimes find yourself lost in a forest of callbacks? In this talk we explore functional programming concepts, which help us create powerful abstractions to master complex problems and create more simple and elegant programs.

JavaScript allows us to ease into the functional programming style, letting us focus just on the concepts, without the distraction of learning a specific functional programming language.

To make the dry functional programming concepts more digestible, we use cooking as an analogy. And since the logician Haskell Curry invented functional programming, we combine our journey in JavaScript with examples and recipes for tasty curry dishes. So even if you get stuck on concepts like higher order functions, continuation passing style or monads, you will at least not go home hungry.

Intro music by @halfbyte
Captions: 
	00:00:23,970 --> 00:00:31,039
Hi, everyone, I'm a software engineer at Etsy, in my master I did a lot of functional programming

00:00:31,039 --> 00:00:36,800
in Haskell. I wrote a type checker for a Compiler for a domain specific language, dynamic programming

00:00:36,800 --> 00:00:42,180
problem. That's quite different, Haskell was also my first programming language, I might

00:00:42,180 --> 00:00:48,420
be a bit unconventional. I still find functional programming amazing and all the power that

00:00:48,420 --> 00:00:51,940
it has, and that's why I want to talk about it today, but the tool we'll be working with

00:00:51,940 --> 00:00:59,000
is JavaScript. So together with my friends I started to think about how to make functional

00:00:59,000 --> 00:01:03,180
programming more accessible because it's so powerful. And for this is great to start with

00:01:03,180 --> 00:01:09,070
a language that's familiar so we can focus just on the concepts. Since new concepts can

00:01:09,070 --> 00:01:13,570
be difficult, we will use cooking analogies to make things more understandable and learn

00:01:13,570 --> 00:01:18,530
about curery cooking along the way: It's a very good example, because very algorithmic

00:01:18,530 --> 00:01:27,830
and everybody has to eat. So cooking with curry frying spices in a pan. But, wait, let's

00:01:27,830 --> 00:01:33,120
talk about programming deliciouses programming, programming is awesome, I love programming,

00:01:33,120 --> 00:01:39,770
but also it's sometimes hard. It's hard when the code is too complex. So, in reality it

00:01:39,770 --> 00:01:46,050
looks a bit more like this. We could say each problem brings it's own complexity, it's our

00:01:46,050 --> 00:01:51,060
job as programmers to build a program to solve it. When we start we're creating some kind

00:01:51,060 --> 00:01:57,520
over mental work space. But over time, things can get messy so we add unnecessary complexity

00:01:57,520 --> 00:02:03,021
to the problem, we add things asster Rick reasons not because there's a problem. That's

00:02:03,021 --> 00:02:10,640
not ideal. So let's create work space for curry recipe, it could look like this. We

00:02:10,640 --> 00:02:16,900
need some spices. A base for the source, curry originally come from the word sauce, and we

00:02:16,900 --> 00:02:23,400
need a main ingredient, which could be some of this. That's a lot of ingredients, wow!

00:02:23,400 --> 00:02:28,970
Let's say we pick five spices one base for the sauce and one main infreed cent for our

00:02:28,970 --> 00:02:33,940
recipe, that's already way more combinations than I can easily oversee, I don't know about

00:02:33,940 --> 00:02:40,590
you. So, in functional programming and in cooking we like to decompose our problems

00:02:40,590 --> 00:02:45,210
into smaller sub problems, so that we can leverage the power of combination of solutions

00:02:45,210 --> 00:02:50,730
instead of drowning in combination of problems, oh my God. (Laughing) so here you can see

00:02:50,730 --> 00:02:56,510
I have a function shuffle, which shuffles an array of stuff. I didn't write it out,

00:02:56,510 --> 00:03:00,700
it's too long, but you can imagine, and then I have this function pick, which picks from

00:03:00,700 --> 00:03:06,370
a shuffleeled array. Then I have the function print item that prints a thing with an asterisk

00:03:06,370 --> 00:03:12,720
in front of it. I can pick five spices and map the print item function over them, which

00:03:12,720 --> 00:03:19,011
looks pretty readable. For our composed recipe function, I would saw it's really human readable.

00:03:19,011 --> 00:03:24,750
We pick from each infrequent group and print the resulting recipe with a bit of words around

00:03:24,750 --> 00:03:31,450
it (Ingredient) what did we just do? We used two really good ideas to keep our work space

00:03:31,450 --> 00:03:37,349
clean. First of all, having a good set of bah sick functions that we can compose and

00:03:37,349 --> 00:03:42,280
combine to achieve something more complex. Also, it should be clear whether the order

00:03:42,280 --> 00:03:47,580
of steps is important or not. Fit's not important, it should be up to us, so we would have them

00:03:47,580 --> 00:03:53,970
as independent functions. And then the second thing was capturing all side effects in our

00:03:53,970 --> 00:03:59,550
recipe to avoid sure praises, when I put the right ingredients into a recipe, I should

00:03:59,550 --> 00:04:06,580
always be rewarded with the correct result, or the same delicious dish. So no secret side

00:04:06,580 --> 00:04:12,290
effects? No, if temperature over ingredients isn't specified it shouldn't affect the result

00:04:12,290 --> 00:04:18,909
if I change it. Secret side effects forbidden, no leaving of the recipe. So every program

00:04:18,909 --> 00:04:23,280
in this way, we can often grasp what a function does by looking at it's input and output,

00:04:23,280 --> 00:04:31,470
these all we need to know. Okay, let's really get started, let's talk about abstraction.

00:04:31,470 --> 00:04:36,379
Some famous person in computer science once said the art of programming is the art of

00:04:36,379 --> 00:04:42,720
organizing complexity of mastering multitude and avoiding it's bastard Chaos. I really

00:04:42,720 --> 00:04:48,880
like that quote. And then he also said, we all know that the only mental tool by means

00:04:48,880 --> 00:04:54,850
of which a very finite piece of reasoning can cover a myriad of cases is called abstraction

00:04:54,850 --> 00:05:05,960
isn't that great in code we make decisions all the time to solve our problems, and they're

00:05:05,960 --> 00:05:11,340
combinations of all these decisions, we're creating a huge space of possible paths through

00:05:11,340 --> 00:05:16,370
the program Andorra the state of our work space. And we're supposed to keep all these

00:05:16,370 --> 00:05:21,560
state in our head. And if we forget about one we create unexpected behavior, ranging

00:05:21,560 --> 00:05:28,440
from a small bug to a gapping security hole. Our only tool for keeping this combinatorial

00:05:28,440 --> 00:05:37,620
complexity at bay and without unnecessary complexity is abstraction. So, how can we

00:05:37,620 --> 00:05:43,970
use it? The good news is we already use it. Functional programming heavily builds on abstractions

00:05:43,970 --> 00:05:48,930
we know already, let's go through them real quick. So the basis of programming is often

00:05:48,930 --> 00:05:53,940
so simple that we forget about it, but we all know it, it's abstracting from a value.

00:05:53,940 --> 00:05:58,590
So it would lack like this, by assigning it to a variable I can give it a name, and I

00:05:58,590 --> 00:06:03,870
can use it later by just calling that name, I don't have to write all the vennelbles there.

00:06:03,870 --> 00:06:07,780
And in the functional programming world, I don't make a big difference between a value

00:06:07,780 --> 00:06:13,430
and function when I name them. We can also assign a function to a variable. We say functions

00:06:13,430 --> 00:06:19,360
are first class citizens, you've heard that before. But, wait, we didn't talk about functions

00:06:19,360 --> 00:06:25,970
yet. So, building on this what's the next more abstract building block of the program,statements

00:06:25,970 --> 00:06:31,060
and blocks of statements, to abstract from a Blog and give it a flame, we would create

00:06:31,060 --> 00:06:36,480
a function. And ‑‑ we would create a name and create a function. It's under valued

00:06:36,480 --> 00:06:41,720
as the main means of code organization. It's at the core of functional programming, that's

00:06:41,720 --> 00:06:47,181
why it's called like that, right. We could say we build toolboxes of functions, assign

00:06:47,181 --> 00:06:52,840
them to variables, we pass them to other functions and we combine them. Wait, I just said we

00:06:52,840 --> 00:06:59,280
pass functions to other functions? So functions that receive other functions as arguments

00:06:59,280 --> 00:07:05,500
are called higher order functions. And they are the next level of abstraction, abstracting

00:07:05,500 --> 00:07:12,820
from function abstractions. So, I'm passing another function into mySort function here.

00:07:12,820 --> 00:07:17,949
Sorting my spices and bypassing a function as an argument I can supply a part of the

00:07:17,949 --> 00:07:23,520
behavior. We could say we are configuring the behavior of the higher order function.

00:07:23,520 --> 00:07:27,680
This technique is not possible in our programming languages, but in JavaScript higher order

00:07:27,680 --> 00:07:32,050
functions are more common such as map and reduce, which we know in arrays, and all these

00:07:32,050 --> 00:07:38,480
functions that accept call backs for asynchronous JavaScript. On the top level of our hierarchy

00:07:38,480 --> 00:07:44,860
we have sets of functions, the functions are the tool in our toolbox, they are really important,

00:07:44,860 --> 00:07:50,240
so abstraction gives us levels of detail to structure our programs, and on each level

00:07:50,240 --> 00:07:56,520
we get contained building blocks. We didn't talk about data yet, but that's okay, bah

00:07:56,520 --> 00:08:03,010
we're learning to think in terms of functions first. Okay. Functions, functions, functions.

00:08:03,010 --> 00:08:10,479
Wait, with all these levels of abstraction don't I just have a tree‑like composition

00:08:10,479 --> 00:08:17,819
for our program like in any imperative programming? How is it different? Don't I have something

00:08:17,819 --> 00:08:23,410
like program and then ‑‑ or ammonal yule and then functions, blocks, statements down

00:08:23,410 --> 00:08:30,610
to variable declarations? Yeah, that's right. And that's why it was possible for me to move

00:08:30,610 --> 00:08:36,370
around between functional and imperative work in my masters thesis. That's why I could take

00:08:36,370 --> 00:08:41,510
a program that was expressed in reoccurance, that means recurrent of function that are

00:08:41,510 --> 00:08:46,500
evaluated like in mathematics and I could Translate it into programs that fill tables

00:08:46,500 --> 00:08:52,449
in an efficient way and in a smart order using loops. Most paradigms focus on very different

00:08:52,449 --> 00:08:58,439
areas though. Let's have a look. So, every time I write a loop statement, I would need

00:08:58,439 --> 00:09:03,999
a variable to evaluate whether it's time to leaf the lap. If we had no state we would

00:09:03,999 --> 00:09:08,739
have to juice a recursive function instead. So, ‑‑ we would have to use a recursive

00:09:08,739 --> 00:09:14,689
function instead, we would focus more on functions than on statements, a function is a complete

00:09:14,689 --> 00:09:20,560
literal package that captures a behavior. We can always swap it out with another one

00:09:20,560 --> 00:09:26,269
to get a different behavior. A lot of magic is the stuff we can do with functions and

00:09:26,269 --> 00:09:31,100
combine them and leverage their power. With special higher order functions, that's why

00:09:31,100 --> 00:09:39,000
I made the higher order functions big. Okay, let's be honest, isn't this slow? I would

00:09:39,000 --> 00:09:43,649
say, once you're in a loop or performance which you always should considering this we're

00:09:43,649 --> 00:09:48,800
optimizing for some other time than computation time, we're optimizing for developer time.

00:09:48,800 --> 00:09:53,929
By keeping the code elegant we can keep it maintainable because we can find stuff faster

00:09:53,929 --> 00:09:59,569
and we can reuse it and recombine functionality. It's more fun to cook with a well kept food

00:09:59,569 --> 00:10:08,800
pantry stocked with our functions. So, why do I talk about curry all the time? Wouldn't

00:10:08,800 --> 00:10:14,249
it be great if we could start computing even before we have all our stuff ready? Let's

00:10:14,249 --> 00:10:19,259
talk about curerying and partial application. I still have to eat more from the knowledge

00:10:19,259 --> 00:10:26,679
tree. This is a curry tree. On our lucky day we might find it's leave in a curry spice

00:10:26,679 --> 00:10:33,079
mixture, usually it's not in there. And this is Haskell curry, he ate so much from the

00:10:33,079 --> 00:10:36,879
knowledge tree of combinatorial left‑hand lane Eck that he has his own function, the

00:10:36,879 --> 00:10:46,989
curry function and he has programming languages named after his first and last name the literature,

00:10:46,989 --> 00:10:57,089
curry is the transformation of the function of arguments with one argument each so let's

00:10:57,089 --> 00:11:04,629
have a look, here we see a function with three arguments, ABC. It just prints them. The curryied

00:11:04,629 --> 00:11:12,189
version consists of a function returning a function returning a function. And each one

00:11:12,189 --> 00:11:18,179
of these has just one argument and returns a function that expects the remaining arguments.

00:11:18,179 --> 00:11:21,759
The difference is visible in the call of the normal and the curried version, you already

00:11:21,759 --> 00:11:32,670
see it here, but let's look in detail. So the function look like this. I can provide

00:11:32,670 --> 00:11:39,950
the parameters ABC, one, by one, Haskell curry. I could also prefill my arguments up to a

00:11:39,950 --> 00:11:45,589
specific death so I could just supply the Haskell and then I would have a function which

00:11:45,589 --> 00:11:51,920
names everybody Haskell. (Laughs) so I could specialize a more general function, if that

00:11:51,920 --> 00:11:57,949
makes sense. That's also re ‑‑ let's revisit higher order functions, they can help

00:11:57,949 --> 00:12:04,249
us do repeated work on data structure, map reduce and filter are some of the most prominent.

00:12:04,249 --> 00:12:11,379
In JavaScript we know them from arrays. So map applies supplied unary function with one

00:12:11,379 --> 00:12:18,420
argument to each array Element. How does that work? We already used it. We said pick three

00:12:18,420 --> 00:12:24,089
spices and then map the print item function over them. So on the left we have our array

00:12:24,089 --> 00:12:29,899
of the three spices and then on the right side we have the result, how does this work?

00:12:29,899 --> 00:12:35,510
It works like this: Just for each array Element the print item function is executed and we

00:12:35,510 --> 00:12:43,670
get this result. It's like a transformation of the array. And reduce, combines an array

00:12:43,670 --> 00:12:49,759
of Elements into a single result via a repeated application of a supplied buy flair function,

00:12:49,759 --> 00:12:56,339
the binary function input produces one output so we're reducing something. Let's look at

00:12:56,339 --> 00:13:03,470
an example. Here we want to sum up all our items in our food pantry, so the individual

00:13:03,470 --> 00:13:09,220
counts you can see here, remember we had ten spices, three soup bases and five main ingredients.

00:13:09,220 --> 00:13:16,889
And plus as a pienary function I just rewrote it here because the operator works a bit differently.

00:13:16,889 --> 00:13:22,699
And we applied repeatedly when we make a sound, clearly a pattern for reduce and would lack

00:13:22,699 --> 00:13:28,279
like this. I do ten plus three get thirteen plus five and I get my overall result of 18

00:13:28,279 --> 00:13:36,320
so it's reduced to one number. And filter, filters the Elements of an array based on

00:13:36,320 --> 00:13:42,160
a predicate. Hao would that work, let's say we have an array of veggies and we want to

00:13:42,160 --> 00:13:51,049
filter that's in stock so we can start cooking. (Vegetables) you can see there ‑‑ so

00:13:51,049 --> 00:13:56,589
how does it work, I have 25 okra so it is in stock and in the resulting array, the car

00:13:56,589 --> 00:14:05,069
wrotes get filtered out because I have zero in stock. So we saw closure, currying, partial

00:14:05,069 --> 00:14:09,449
application and higher order functions help us to build complex specialized functions

00:14:09,449 --> 00:14:18,799
from more simple and more ‑‑ from simple and more general functions. Let's build some

00:14:18,799 --> 00:14:24,910
pipeline, function composition. A function transforms input into output as we said in

00:14:24,910 --> 00:14:28,509
the beginning in the most straightforward way to build functions from other functions

00:14:28,509 --> 00:14:35,279
is to just connect them into a pipeline. It would look like this, function composition.

00:14:35,279 --> 00:14:40,190
We can write ourselves a higher order function for function composition. And it looks like

00:14:40,190 --> 00:14:46,739
the definition from a math book, so you see the G of F of X in there. And with these tools

00:14:46,739 --> 00:14:52,359
we're now ready to build us some functions, let's try it out. So here I count the pieces

00:14:52,359 --> 00:14:58,800
of okra and chop them in half, remember we had 25 pieces of okra and I'm just chopping

00:14:58,800 --> 00:15:05,029
them in half so I get double the amount of okra. (Laughs) so, I can compose the two,

00:15:05,029 --> 00:15:15,410
and then I get 50 okra. And so we can see from this combination we were building something

00:15:15,410 --> 00:15:20,759
new, and this style of programming can bring our programs closer to the declarative side

00:15:20,759 --> 00:15:26,260
where we tell the computer what to do but not how to compute it step‑by‑step. Programs

00:15:26,260 --> 00:15:30,839
in the declarative side are easier to read because we don't have to keep the space of

00:15:30,839 --> 00:15:39,220
the work space in our head all the time. So I have to make a confession, I'm coming from

00:15:39,220 --> 00:15:44,699
Haskell and some things are a bit different there. I'm just going to tell you for context.

00:15:44,699 --> 00:15:50,589
In Haskell we have referential transparency, a function can be replaced with it's value,

00:15:50,589 --> 00:15:55,959
it means the same thing. And this is mind boggling coming from JavaScript because there's

00:15:55,959 --> 00:16:01,999
no such thing as call or return in Haskell. We have to think about functions in a sense

00:16:01,999 --> 00:16:08,749
of mathematics where I can F of X equals Y I can replace the left‑hand side F of X

00:16:08,749 --> 00:16:13,149
with the right‑hand side Y and vice versa without worrying if the function was called

00:16:13,149 --> 00:16:18,910
and if the result is ready yet. This simplifies reasoning about the program for both the programmer

00:16:18,910 --> 00:16:26,699
and the computer. Haskell is laity only computes values when needed and automatic currying

00:16:26,699 --> 00:16:33,979
so it's normal to partially supply function arguments there. And Haskell is also purely

00:16:33,979 --> 00:16:39,649
functional, that means we cannot have side effects that modify our environment in a Haskell

00:16:39,649 --> 00:16:44,519
program, even if we wanted to, we would have to use an explicit mechanism to perform side

00:16:44,519 --> 00:16:52,009
effects. So that's a bit different. Wow! We already tricked ourself deep into functional

00:16:52,009 --> 00:16:57,830
programming. We could say, if you understand the importance of functions and what we can

00:16:57,830 --> 00:17:02,999
do with them, you understand functional programming. What we can do with them was pass them to

00:17:02,999 --> 00:17:10,449
other functions, currying composition, but what else is there? Is there more? A question

00:17:10,449 --> 00:17:15,059
that comes with statelessness when we try to avoid side effects is the question of how

00:17:15,059 --> 00:17:20,290
to control our program flow. Usually we need a counter for our iterations and then we need

00:17:20,290 --> 00:17:31,039
a variable to check if it's time to leave loop? So it's a side effect we want to avoid

00:17:31,039 --> 00:17:36,200
it, it's bad. And few functional programming we would have to change our way of thinking

00:17:36,200 --> 00:17:42,429
exactly for this reason. Instead of iterating, we would favor recursion, and that means we

00:17:42,429 --> 00:17:48,600
use a function that calls itself for a smaller part of the problem. That sounds uncomfortable.

00:17:48,600 --> 00:17:55,380
What's so bad about the loop? In fact nothing's bad about the lap, it's just a different way

00:17:55,380 --> 00:18:01,190
of thinking about the problem. Iteration is usually bottom up, whereas recursion is top

00:18:01,190 --> 00:18:06,100
down. And I'm very grateful that I had to move back and forth between these two words

00:18:06,100 --> 00:18:11,620
in my masters thesis because it's a really good brain exercise. Restrictions are just

00:18:11,620 --> 00:18:16,279
function made people construct really cool stuff like the Y‑combinator show that recursion

00:18:16,279 --> 00:18:21,429
is possible with just functions and parameters you don't even need declarations I think that's

00:18:21,429 --> 00:18:26,850
one of the coolest things in computer science. So if we restrict ourselves to the purely

00:18:26,850 --> 00:18:31,549
functional style, everything is express in the the input and output of functions even

00:18:31,549 --> 00:18:39,309
the program flow. It's a recursion over the input or out put of the data. Ooops (Laughs)

00:18:39,309 --> 00:18:46,169
when we have to gale with the internet, asynchronous code can dramatically reduce the latency in

00:18:46,169 --> 00:18:51,500
a distributed system, but it can be hard to write, we all know this because there's no

00:18:51,500 --> 00:18:57,409
way vanilla JavaScript to say wait for the return of a function, we supply a call back

00:18:57,409 --> 00:19:02,370
function and tell the function where to continue after it's done. If we have a cascade of call

00:19:02,370 --> 00:19:08,500
back functions and we need to doer report handling things can get hairy. So this is ‑‑

00:19:08,500 --> 00:19:14,570
there's my favorite web site call back hell.com. You've all seen this code which looks like

00:19:14,570 --> 00:19:20,890
a pyramid and it's horrible. So functional programming technique for explicit error handling

00:19:20,890 --> 00:19:26,409
would be using Monads. Imagine we would be in the purely functional world where functions

00:19:26,409 --> 00:19:31,500
behave look mathematical functions. So the order in which we write our functions doesn't

00:19:31,500 --> 00:19:38,360
matter in this world. But in JavaScript we can execute expressions and sequence by writing

00:19:38,360 --> 00:19:44,661
one after the other with a semicolon in between, so it's different. How does that work? How

00:19:44,661 --> 00:19:53,990
about making our own semicolon? Let's observe what it does for us. So what does the semicolon

00:19:53,990 --> 00:20:00,299
do in this function? So ... here first the given string is printed and then the length

00:20:00,299 --> 00:20:06,309
of the string is returned. The right of function behaves like the semicolon here, can we do

00:20:06,309 --> 00:20:14,250
that? So we wrap the expressions, the two expressions that we had, that we want to change,

00:20:14,250 --> 00:20:18,639
we wrap them into anonymous functions so we can call them like we want to later on when

00:20:18,639 --> 00:20:24,730
they come into our semicolon function later as arguments. We also need an extra return

00:20:24,730 --> 00:20:29,320
here so that the last value gets out of this extra function that we wrapped around it again.

00:20:29,320 --> 00:20:35,141
So that's like a technical step, and then, to abstract from the two statements we can

00:20:35,141 --> 00:20:40,950
now pass in the first and second expression as arguments into our semicolon function.

00:20:40,950 --> 00:20:44,890
Now it's also clear why we had to wrap them into anonymous function because of the different

00:20:44,890 --> 00:20:51,460
return area which we have here. The expressions depend on each other, but the first result

00:20:51,460 --> 00:20:57,559
gets thrown away. We can now chain the first and second expression in the same way a semi

00:20:57,559 --> 00:21:04,309
colon can, so it's producing the same output. In fact we can chain as many expressions as

00:21:04,309 --> 00:21:14,350
we like. So I can chain here this works. Like a semicolon and then bang, which adds an explanation

00:21:14,350 --> 00:21:19,799
mark and then I get my result of 16. This sounds really boring because we already have

00:21:19,799 --> 00:21:25,350
a semicolon in JavaScript, but if you think about this for a while we just constructed

00:21:25,350 --> 00:21:30,730
a chaining function from purely functional parts. So this is a big deal. We went from

00:21:30,730 --> 00:21:34,941
a world in which the order of functions or statements doesn't make a difference to a

00:21:34,941 --> 00:21:40,480
world in which we can change statements into a sequence, to establish their order. The

00:21:40,480 --> 00:21:47,720
semicolon function works like a function known as monadic bind. What's that? So mow daddic

00:21:47,720 --> 00:21:53,860
bind or mbind resemble composition throws away immediate results and statements can

00:21:53,860 --> 00:22:01,760
be executed just for their side effects. I just replaced the name here mbind. So, we

00:22:01,760 --> 00:22:09,820
said Monads chain things into sequences, what kind of things? Let's imagine a container

00:22:09,820 --> 00:22:17,929
a cooking pot. We start with pot one, so that's my pot one, it has some contents, here is

00:22:17,929 --> 00:22:24,919
pot one and when we have the result from pot one, we can execute pot two, so it would look

00:22:24,919 --> 00:22:31,580
like this and go on like this. So I'm doing some steps here this is a different view under

00:22:31,580 --> 00:22:36,889
semi colon function from above, steps can be chained with mbind after we work through

00:22:36,889 --> 00:22:43,510
the entire sequence of steps we get some kind of result in the pot, the contents. Let's

00:22:43,510 --> 00:22:48,111
express this work flow in steps to reveal the pattern. If you would just write town

00:22:48,111 --> 00:22:54,870
the values of ‑‑ write down the values of the pewation it would like like this. The

00:22:54,870 --> 00:22:59,830
difference we between the two versions is the first one puts everything in the pot and

00:22:59,830 --> 00:23:06,289
the second one works on a naked values. Let's now imagine we have a really good reason to

00:23:06,289 --> 00:23:12,120
put everything into a pot. So for example we could hide some additional logic in there.

00:23:12,120 --> 00:23:16,360
The pot could keep track of the sum of all numbers that are stored in it or it could

00:23:16,360 --> 00:23:23,590
keep a list of ingredients sorted in a pot. The question is now can we deduce a generic

00:23:23,590 --> 00:23:33,970
monad pattern from this? So we want a function that applies a function to the contents inside

00:23:33,970 --> 00:23:39,940
the pot and gives us a new pot. Containing the result of that function. We can define

00:23:39,940 --> 00:23:46,649
this function which is mbind for the pot monad on the pot prototype, let's do that. We see

00:23:46,649 --> 00:23:51,629
a very clear pattern now. We also see that we need an extra step to get the contents

00:23:51,629 --> 00:23:58,650
out of the pot in the end, So, I'm doing the C contents here to get it out. And step one

00:23:58,650 --> 00:24:04,610
of the computation is A equals new pot of one as an object oriented programmer I say,

00:24:04,610 --> 00:24:12,070
ait's a con instructor, a new type of pot. But in the monad jargon we call it unit or

00:24:12,070 --> 00:24:19,121
return, return is already taken in JavaScript, so I want to be careful. It takes a value

00:24:19,121 --> 00:24:24,690
and transforms the value into a nomadic value. The next steps all have a similar pattern.

00:24:24,690 --> 00:24:31,250
We've seen it before, we know it uses the function mbind and mbind takes a monadic value

00:24:31,250 --> 00:24:37,649
and function which works on the contents we sometimes say the play non‑monadic type

00:24:37,649 --> 00:24:45,230
and returns a new monadic value containing the result, just as we intended. And that's

00:24:45,230 --> 00:24:50,879
all! Why got so many people talking about monads what continue we say patterns that

00:24:50,879 --> 00:24:57,799
wraps and changes computation. First of all it's not a very good name, and also it was

00:24:57,799 --> 00:25:04,691
described by mathematician from the field of Cat theory first. The monad pattern, this

00:25:04,691 --> 00:25:08,679
is completely unimportant we don't need to know about it, but what's really cool about

00:25:08,679 --> 00:25:13,610
the monad pattern in JavaScript is we can hide stuff in it. We get an extra layer of

00:25:13,610 --> 00:25:17,870
abstraction to hide the bookkeeping and all this error handling and let the beauty of

00:25:17,870 --> 00:25:26,970
the algorithm shine. So now that we've con cored the monads do we get desert? I'd rather

00:25:26,970 --> 00:25:32,260
have you take something home because it's late. I hope you enjoyed some of the techniques

00:25:32,260 --> 00:25:38,360
I hope I could make them digestible if you ever find yourself in a mess, maybe some of

00:25:38,360 --> 00:25:41,950
these techniques will help you out of it. And if you never get yourself into one, at

00:25:41,950 --> 00:25:48,049
least it's fun to reason about them (Laughs) so don't forget to take home some of the purely

00:25:48,049 --> 00:25:54,499
functional goodness, abstraction it's more important than we think. Very localized understanding

00:25:54,499 --> 00:26:00,240
of code and very small functions that you can reuse. Explicit said effects that we know

00:26:00,240 --> 00:26:09,260
about error handling, and reusability resulting from this. And as some of you might have seen

00:26:09,260 --> 00:26:15,250
all of this and more can be found in the book called gas cure rebuke, I'm not sure how ‑‑

00:26:15,250 --> 00:26:23,559
Das Crrurry ‑ Buch. The book is in German the code examples are in English so you can

00:26:23,559 --> 00:26:30,600
ease into a known language again W have seen it's fun and totally possible to explore deeper

00:26:30,600 --> 00:26:35,649
functional concepts in JavaScript, it's all there, even though I still like Haskell, I'm

00:26:35,649 --> 00:26:39,799
amazed how much elegance this programming style reveal from the core of JavaScript,

00:26:39,799 --> 00:26:44,991
I think it's just awesome refactorring in a functional style is really fun, thank you

00:26:44,991 --> 00:26:45,570

YouTube URL: https://www.youtube.com/watch?v=6Qx5ZAbfqjo


