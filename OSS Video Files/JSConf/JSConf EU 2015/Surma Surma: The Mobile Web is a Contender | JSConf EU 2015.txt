Title: Surma Surma: The Mobile Web is a Contender | JSConf EU 2015
Publication date: 2015-10-20
Playlist: JSConf EU 2015
Description: 
	This talk will focus on the new generation of APIs which make the web a more capable platform for applications. Push Notifications, Offline Storage with Service Workers, and responsive UIs built in Web Components. These are the building blocks of the future. We will also look at the kinds of sites which excel as mobile web apps (backed with actual data!), and make the case for why you should be investing more in your mobile web experience.

Intro music by @halfbyte
Captions: 
	00:00:26,599 --> 00:00:33,840
The web as a contender, what a provocative title for a JavaScript conference, I trust

00:00:33,840 --> 00:00:41,329
you all members in the church of Tim Berners-Lee, any way who is the guy on stage, this is me,

00:00:41,329 --> 00:00:49,539
Surma, I wrote with the Chrome team for Google in London, I do webby stuff I enjoy a lot,

00:00:49,539 --> 00:00:54,149
I'm kind of here to talk about new things that are coming up on the web and some of

00:00:54,149 --> 00:00:56,879
them are actually already there.

00:00:56,879 --> 00:01:01,329
The first thing I want to show to you is the home screen experience, it's something that

00:01:01,329 --> 00:01:05,170
is actually not on the web really, it's something, if you are on the home screen or you have

00:01:05,170 --> 00:01:11,890
an icon on the home screen you expect the app to open up and do it's job even off line,

00:01:11,890 --> 00:01:18,760
I went into aeroplane mode and I can save a voice memo, to the phone or disc rather,

00:01:18,760 --> 00:01:26,440
I an even kill the app and reopen it and everything will be there, all the status there, data

00:01:26,440 --> 00:01:33,130
there, this is kind of what we expect when something is on the home screen, this is also

00:01:33,130 --> 00:01:40,299
something that so far it wasn't really plausible on the web, this is a web app that a colleague

00:01:40,299 --> 00:01:46,920
of mine wrote, Paul Lewis and so some of you may have known the app or may have known that

00:01:46,920 --> 00:01:51,750
this was possible, but I want to get everyone on the same level and also clear up a few

00:01:51,750 --> 00:01:56,920
misconceptions about the current state of what is possible and what is not.

00:01:56,920 --> 00:02:03,219
So let's start with a few numbers first, when you look at Chrome, and I mean Chrome alone,

00:02:03,219 --> 00:02:11,870
Chrome has over million users right now, that is a lot and just, as a side note, 25 million

00:02:11,870 --> 00:02:18,800
of these one billion users open DevTools every week, not only do we have this huge amount

00:02:18,800 --> 00:02:24,140
of users, you also, apparently, have you huge developer user base who try to go through

00:02:24,140 --> 00:02:30,120
the same experience as you too and you should probably try and connect with them.

00:02:30,120 --> 00:02:35,949
That was Chrome alone, if you add up all the popular browsers and few unpopular browsers

00:02:35,949 --> 00:02:48,600
you end up with a huge number of people on the web, there is usually no way as you as

00:02:48,600 --> 00:02:54,630
an indie developer to publish something there, but they too give you a web browser, suddenly

00:02:54,630 --> 00:03:00,919
you have a way to do something on this device, with all these possibilities for people to

00:03:00,919 --> 00:03:07,140
go on to the web, you actually find that the biggest strength is reach, if it's the, the

00:03:07,140 --> 00:03:14,000
web is everywhere, on phones, on computers on Nintendo DS, in cars, even the ones without

00:03:14,000 --> 00:03:21,290
Android auto, for the user really it's the most generic platform, if you know something

00:03:21,290 --> 00:03:27,950
is on the web you will pretty surely find a way to access that thing, one way or the

00:03:27,950 --> 00:03:29,820
other.

00:03:29,820 --> 00:03:34,100
With all these possibilities you actually end up with a most impressive number, that

00:03:34,100 --> 00:03:45,060
is that the average user uses over 100 websites a month, I've been assured by statisticians

00:03:45,060 --> 00:03:51,579
this is a legit number, I hope they're right, compare that to the corresponding native number

00:03:51,579 --> 00:03:58,650
which is that that average user uses about, between 12 and 20 native apps per month, so

00:03:58,650 --> 00:03:59,650
there

00:03:59,650 --> 00:04:03,780
is, native apps per month, there is a huge difference, another strength of the web jumping

00:04:03,780 --> 00:04:11,840
to several different apps in few seconds is completely normal, try to imagine that experience

00:04:11,840 --> 00:04:14,220
in the native format.

00:04:14,220 --> 00:04:21,350
Then recently, a kind of older article by bencher bead resurfaced and got a lot of attention

00:04:21,350 --> 00:04:31,660
the headline read this: "The mobile war is over and the app has won", I was like what!

00:04:31,660 --> 00:04:39,690
It was such a weird thing to say to me, for the first time I feel like the web can compete

00:04:39,690 --> 00:04:47,180
in terms of performance technology features with the what native already have, secondly

00:04:47,180 --> 00:04:53,030
did you hear the numbers I just said, how can they possibly justify making that statement

00:04:53,030 --> 00:04:59,970
and of course in the article they justify it and it's this: the time you spend in native

00:04:59,970 --> 00:05:07,590
apps takes up, up to 80% of your total time spent on a mobile device, so web is dead,

00:05:07,590 --> 00:05:09,560
right, we're done.

00:05:09,560 --> 00:05:14,130
Then again, once again you can take a closer look and you kind of realise it's not that

00:05:14,130 --> 00:05:27,130
simple, of this 80%, 32% is for gaming, 80% for Facebook alone and 20% entertainment,

00:05:27,130 --> 00:05:35,910
these are activities really time intensive, entertainment has something like Netflix,

00:05:35,910 --> 00:05:41,680
an app open for 30 minutes, an episode of a series but you don't interact with it really,

00:05:41,680 --> 00:05:47,540
you have games that you obviously do interact with and games is something that the web can't

00:05:47,540 --> 00:05:49,570
really compete with in the long run.

00:05:49,570 --> 00:05:56,900
If again you remove - let's just call them special like corner cases, if you remove them

00:05:56,900 --> 00:06:03,810
the landscape gets different and it's kind of a 50/50 thing between the web and native.

00:06:03,810 --> 00:06:09,300
Also very important, the statistics that these graphs are based on, are actually based on

00:06:09,300 --> 00:06:16,760
data from April 2013, so a lot of things have changed on the web since then, these numbers

00:06:16,760 --> 00:06:21,450
might have shifted and if they have not, the things that I'm going to talk about, hopefully

00:06:21,450 --> 00:06:24,770
and pretty surely will.

00:06:24,770 --> 00:06:32,060
So yeah, let's talk about the things that going to change, before that Peter Paul Koch

00:06:32,060 --> 00:06:38,930
suggested a short while ago a one year moratorium idea for the web, he was basically saying

00:06:38,930 --> 00:06:44,650
the web is moving too fast and the browsers can't keep up and we should just stop for

00:06:44,650 --> 00:06:55,400
an entire year and give the browsers chance to fix up, Jan Gruber, inventor, wrote a counter

00:06:55,400 --> 00:07:00,830
of answer to that, I don't agree with everything he said this,-said this, "Native apps can't

00:07:00,830 --> 00:07:10,760
out web the web", native and web seem very similar they have very different fundamental

00:07:10,760 --> 00:07:17,350
assumptions at their core, so we should not try to just nail every feature that native

00:07:17,350 --> 00:07:22,230
has on to the web, at least not and specially not in the same way, that's something to keep

00:07:22,230 --> 00:07:23,230
in mind.

00:07:23,230 --> 00:07:29,669
An example for this would be, does every web site get access to my webcam, on both native

00:07:29,669 --> 00:07:35,560
and web you would say, of course not, you would ask for permission just in time or for

00:07:35,560 --> 00:07:42,410
native you can do a batch grant thing at install time, right, does every website get background

00:07:42,410 --> 00:07:47,889
sync, probably not, but do you want to bug your user about it every time you want to

00:07:47,889 --> 00:07:57,930
do back time sync, we don't have an installation dialogue for batch granting or central authority

00:07:57,930 --> 00:08:03,290
to check if the things that app is doing are actually saying, everybody can publish on

00:08:03,290 --> 00:08:09,800
the web, you see how this is like a really big UI and UX challenge for the browser vendors

00:08:09,800 --> 00:08:15,889
to face, they want to make it secure for the users but give you the developers as much

00:08:15,889 --> 00:08:19,120
capabilities as possible.

00:08:19,120 --> 00:08:24,840
So just to make the app metaphor work even better on the web, think about this way, the

00:08:24,840 --> 00:08:31,400
phone has all the apps installed, once you open them they actually get installed, downloaded

00:08:31,400 --> 00:08:33,690
on the fly, this is how we can

00:08:33,690 --> 00:08:38,990
think about web apps, the thing is right now, we don't expect web apps to really work off

00:08:38,990 --> 00:08:44,810
line not to have an address bar or be on the home screen, these are the things I want to

00:08:44,810 --> 00:08:46,560
address today.

00:08:46,560 --> 00:08:51,899
Let's start with the fact that web apps are usually hard to reach, you have to type in

00:08:51,899 --> 00:08:57,769
a URL on your tiny, tiny keyboard or phone, or you have a big one.

00:08:57,769 --> 00:09:02,470
You can add them to your home scene, you actually could have done that for a long time now,

00:09:02,470 --> 00:09:09,260
but the feature is hidden, kind of like hidden in the menu and therefore it's hardly used.

00:09:09,260 --> 00:09:15,839
That's something that needs to change, what has been proposed is app install banners,

00:09:15,839 --> 00:09:22,830
basically if the user for fills certain criteria and right now users your web app twice in

00:09:22,830 --> 00:09:29,110
a timeframe of two weeks, this app, this banner will be proposed to him and he can, with one

00:09:29,110 --> 00:09:33,879
click, move it to his home screen and suddenly you have combined the reach of the web with

00:09:33,879 --> 00:09:38,949
like stickiness of native apps, because it's now on your home screen.

00:09:38,949 --> 00:09:45,930
On your side you have to fulfil things as well, you have to have web manifest, it looks

00:09:45,930 --> 00:09:53,580
something like this, a name, icon, a colour, you have an entry URL, in this case I also

00:09:53,580 --> 00:10:02,029
added a query path to the URL, so I can check if people are using this, icon I defined in

00:10:02,029 --> 00:10:09,509
the icon area, will be on my home screen in distinguishable from the native apps.

00:10:09,509 --> 00:10:14,959
Since I said in the gene beginning it comes with certain expectations from the user, you

00:10:14,959 --> 00:10:21,589
have to HTTPS, that the banner is shown in the first place.

00:10:21,589 --> 00:10:28,779
It's a kind of way for us to incentivise keeping the whole home screen expectation thing a

00:10:28,779 --> 00:10:31,790
solid thing.

00:10:31,790 --> 00:10:37,290
Also by the way, just as a side remark, you can delay the prompt, but there is no way

00:10:37,290 --> 00:10:41,889
for you to prompt earlier for it, this just something, otherwise spam sites will pop it

00:10:41,889 --> 00:10:46,509
over hand over of you, it will just be annoying right, so that's something to keep in work.

00:10:46,509 --> 00:10:49,800
Let's talk about service worker, I've talked about it twice.

00:10:49,800 --> 00:10:56,249
Service worker, are kind of a silver bullet.

00:10:56,249 --> 00:11:02,800
By themselves they don't really address any shortcomings that we have, versus native.

00:11:02,800 --> 00:11:07,380
So, they however give us the way that the work, give us a common entry point or even

00:11:07,380 --> 00:11:14,769
some API to all the apps, so they are really a new concept in the framework of web apps.

00:11:14,769 --> 00:11:20,459
So what they are really is just a background process, a JavaScript background process that

00:11:20,459 --> 00:11:26,470
decoupled from your apps main thread, it's actually running separately, however it is

00:11:26,470 --> 00:11:32,890
connected to every instance of your app that you can think of that to every tap that is

00:11:32,890 --> 00:11:36,639
currently open that is part of your app.

00:11:36,639 --> 00:11:41,790
They are a background process but they are not really long running, they're more available

00:11:41,790 --> 00:11:48,100
and they are bound to a life cycle events, foreground events and background events.

00:11:48,100 --> 00:11:55,670
There is some communication going on, but you don't do like long running work really.

00:11:55,670 --> 00:12:00,839
Also the cool thing about this concept is that they are progressive enhancement, so

00:12:00,839 --> 00:12:06,110
if the browser doesn't support service worker, everything will work as before, if the browser

00:12:06,110 --> 00:12:11,459
does support them a whole new extended experience is offered to the user.

00:12:11,459 --> 00:12:17,310
A colleague of mine Jake Archibald wrote this website, which is called is service worker

00:12:17,310 --> 00:12:23,959
ready, it comes witness a lot of APIs and I'll only be able to cover a few of these

00:12:23,959 --> 00:12:31,260
in this talk, he has basically a listing of all the service worker APIs, short tests for

00:12:31,260 --> 00:12:36,889
them so you can see if your browser supports this feature and a little bit of demo code

00:12:36,889 --> 00:12:43,360
to see if you can use it or links to the official specification obviously.

00:12:43,360 --> 00:12:47,009
So let's start using service worker, it's actually kind of simple, the first thing I

00:12:47,009 --> 00:12:53,019
do is use feature detection I check if the object is a call to service worker, I have

00:12:53,019 --> 00:12:58,329
been it does I can ensure that service worker is supported, then I call register with a

00:12:58,329 --> 00:13:04,019
link to file, literally downloaded and executed inside the service worker, that returns a

00:13:04,019 --> 00:13:09,949
promise and once installation has been completed and completed successfully, this promise will

00:13:09,949 --> 00:13:11,199
resolve.

00:13:11,199 --> 00:13:16,749
This service worker will be scoped to your current website and the current path, you

00:13:16,749 --> 00:13:22,040
can make the path narrower, so you are scoping yourself to an even longer path but you can't

00:13:22,040 --> 00:13:25,880
go upwards, it's just kind of a security feature.

00:13:25,880 --> 00:13:32,009
So now we have the service worker running, what do we too next?

00:13:32,009 --> 00:13:37,259
They are a kind of network proxy for all the requests that your site is doing.

00:13:37,259 --> 00:13:44,779
So this let's you too like very sophisticated caching and complex off line experiences,

00:13:44,779 --> 00:13:49,410
even for the data from other origins, for example in this graphic I hinted the image

00:13:49,410 --> 00:13:57,309
is hosted on G plus, you can actually cache the response, since another origin you can't

00:13:57,309 --> 00:14:01,470
expect it, it's called an opaque response, you know there is something in there, you

00:14:01,470 --> 00:14:07,269
don't know anything about it but you can put it into a cache, if it's your own data you

00:14:07,269 --> 00:14:09,949
can manipulate the request and the response.

00:14:09,949 --> 00:14:16,200
You could do wild stuff like templating in service worker and have it go through to your

00:14:16,200 --> 00:14:23,179
main site or do SASS compilation, although keep in mind you should be trying to have

00:14:23,179 --> 00:14:29,149
the progressive enhancement thing still going on, which in this case would be breaking.

00:14:29,149 --> 00:14:34,489
So here for example I define items the crucial items I need for my site to be running offline,

00:14:34,489 --> 00:14:39,889
I hook up to the install event in my service worker, I open up a new cache which is identified

00:14:39,889 --> 00:14:46,779
by cache name which is a string, and once it's open, I just add these items via the

00:14:46,779 --> 00:14:48,139
cache API.

00:14:48,139 --> 00:14:53,189
The cache API has add all which is a convenient function, just takes an area takes care of

00:14:53,189 --> 00:15:00,279
both downloading and caching these things.

00:15:00,279 --> 00:15:06,250
It takes a promise, then this promise is coupled to the promise in the other thread the register

00:15:06,250 --> 00:15:07,319
called.

00:15:07,319 --> 00:15:12,379
The register called promise will only be resolved once this thing actually finishes.

00:15:12,379 --> 00:15:18,589
This means that once this is open, I already have the important parts of my site cached.

00:15:18,589 --> 00:15:23,089
The next step would be you can also do it hooking up to the fetch new event, for each

00:15:23,089 --> 00:15:26,429
request this fetch new event will be fired.

00:15:26,429 --> 00:15:33,860
I take my cache, I match the request and the cache API provides this match function for

00:15:33,860 --> 00:15:39,579
you already, if it's returned something usable I will just return that and otherwise will

00:15:39,579 --> 00:15:43,660
use the fetch API to actually get the data from wherever.

00:15:43,660 --> 00:15:48,569
This is a simple cache implementation, my app will start working offline immediately.

00:15:48,569 --> 00:15:54,139
This obviously it's also, once you start caching you will never look at the network again it

00:15:54,139 --> 00:15:56,839
will grow stale pretty fast.

00:15:56,839 --> 00:15:58,529
You have JavaScript at your hands you can

00:15:58,529 --> 00:16:02,180
** are complex stuff here.

00:16:02,180 --> 00:16:08,160
Again Jake Archbald wrote a great demo for this is an offline Wikipedia, he gives us

00:16:08,160 --> 00:16:14,110
a switch at the top to give you the ability to cache the articles in a style format so

00:16:14,110 --> 00:16:20,389
it works offline, and if he kind of detects that the connection is flaky, he uses another

00:16:20,389 --> 00:16:27,589
API or service worker which is called Background Sync, he actually moves the downloading part

00:16:27,589 --> 00:16:32,929
from the main thread to service worker thread which enables you as the user to leave the

00:16:32,929 --> 00:16:37,899
app and keep the download going in the background so you don't have to stay in the app, you

00:16:37,899 --> 00:16:39,499
just wait for the network to do something.

00:16:39,499 --> 00:16:45,480
He does it in the background, pushes the notification on the screen once the data is there and you

00:16:45,480 --> 00:16:47,819
can look at it.

00:16:47,819 --> 00:16:49,990
You can do uploads as well by the way.

00:16:49,990 --> 00:16:56,209
A while ago Google published the toolbox which is a swtoolbox, the service worker tools hence

00:16:56,209 --> 00:16:57,910
the name.

00:16:57,910 --> 00:17:06,010
It has a lot of caching strategies implemented for you and also it has the router implementation

00:17:06,010 --> 00:17:17,790
you can do this by just a little bit of routing little bit easier to write these complex offline.

00:17:17,790 --> 00:17:22,230
I said that service workers are available not long running, the interesting part the

00:17:22,230 --> 00:17:27,309
statement is they are also available if Chrome is completely closed.

00:17:27,309 --> 00:17:34,450
It means the browser knows he can't call these events or the operating system.

00:17:34,450 --> 00:17:38,520
If you are in the context of Android it can wake up this particular service worker if

00:17:38,520 --> 00:17:43,260
something comes in for, regarding or in relation to your app, even though Chrome might have

00:17:43,260 --> 00:17:45,760
no tab open whatsoever.

00:17:45,760 --> 00:17:50,870
This is probably something that is most important because this enables us to do push notifications.

00:17:50,870 --> 00:17:56,940
Push notifications are kind of the Holy Grail of user reengagement, until now you had no

00:17:56,940 --> 00:18:01,669
way of letting the user know that something important has come up on your side of the

00:18:01,669 --> 00:18:06,890
app you just couldn't notify him if he closed the tab.

00:18:06,890 --> 00:18:12,290
It's been proven that this significantly increases the engagement of the user and maybe to our

00:18:12,290 --> 00:18:17,340
dismay it's part of every native app nowadays but we kind of want to have them on the web

00:18:17,340 --> 00:18:19,070
as well right?

00:18:19,070 --> 00:18:21,529
And there are also not that hard to use.

00:18:21,529 --> 00:18:26,360
So, the service worker itself has the push manager attribute.

00:18:26,360 --> 00:18:32,250
When you call subscribe you basically get back an endpoint which in terms of a full

00:18:32,250 --> 00:18:37,920
circle way you just put it on your backend, save the URL there, now if you push data at

00:18:37,920 --> 00:18:42,120
any point it will end up on the users device.

00:18:42,120 --> 00:18:46,450
For Chrome this will also be type for a group of cloud messaging, for Firefox it would be

00:18:46,450 --> 00:18:52,289
Mozilla push services, so the only thing you actually need to do is put a little bit of

00:18:52,289 --> 00:18:57,299
data in your webapp manifest, so that the browser knows what project you are related

00:18:57,299 --> 00:19:01,510
to or that it actually hooks up for the right events.

00:19:01,510 --> 00:19:06,600
Once you’ve got your subscription going on, the only thing you need to do is to subscribe

00:19:06,600 --> 00:19:11,750
to the push event in the service worker, and this event will be triggered once a push notification

00:19:11,750 --> 00:19:15,179
or push message comes in.

00:19:15,179 --> 00:19:21,460
This actually works on both Chrome desktop and mobile and then you can just notification,

00:19:21,460 --> 00:19:27,350
put some URL in the data and once the user clicks on the notification the notification

00:19:27,350 --> 00:19:32,399
click event will be triggered you can pull out the data from the notification again and

00:19:32,399 --> 00:19:34,340
open it in a new window.

00:19:34,340 --> 00:19:40,210
Or it's possible for you as the service worker to just list all the open tabs and replace

00:19:40,210 --> 00:19:43,690
the contents of one with a new one if you think that's appropriate.

00:19:43,690 --> 00:19:47,710
By the way the Facebook app, Facebook webapp does this

00:19:47,710 --> 00:19:53,039
already, so if you go to Facebook webapp, put it on your home screen you will get notifications

00:19:53,039 --> 00:19:54,500
from that app.

00:19:54,500 --> 00:19:56,950
Which I think is really cool.

00:19:56,950 --> 00:20:02,480
Again there's little demo online, it's called a push demo the link is on the bottom right.

00:20:02,480 --> 00:20:08,230
You can see me subscribing to push notifications then I am actually literally closing all tabs

00:20:08,230 --> 00:20:12,690
all of Chrome, and then I am triggering a push notification from my desk open to the

00:20:12,690 --> 00:20:16,240
console you will see it actually show up in the bar.

00:20:16,240 --> 00:20:21,019
I can click it, it will open up the URL that embedded which in this case is the weather

00:20:21,019 --> 00:20:24,440
of London which is not that exciting.

00:20:24,440 --> 00:20:29,300
However, if you think about that, we just got lots of cool features on the web to actually

00:20:29,300 --> 00:20:34,350
write much more much broader experiences for your apps.

00:20:34,350 --> 00:20:41,679
One thing mentioned but have not really been clear about is that for that you do need HTTPS

00:20:41,679 --> 00:20:47,270
for service worker, you do need service worker for basically all the features I just mentioned.

00:20:47,270 --> 00:20:53,429
This might come as a let down first, but HTTPs should really be used for everything in my

00:20:53,429 --> 00:21:00,540
opinion it's not a reality right now but we do have services like CloudFlare who offer

00:21:00,540 --> 00:21:06,720
it for free so you just put them in front and you have HTTPs.

00:21:06,720 --> 00:21:15,190
It's due to launch in Q4 this year so I guess any time now and they promise HTTPs encryption

00:21:15,190 --> 00:21:20,159
for you own servers just to be just as easy as CloudFlare.

00:21:20,159 --> 00:21:25,500
At that point there really is no excuse anymore, so start doing it now, so you won't be surprised

00:21:25,500 --> 00:21:26,909
at that point.

00:21:26,909 --> 00:21:36,159
Bottom line is, we just got very important features to make the apps on mobile so much

00:21:36,159 --> 00:21:40,980
better, and I encourage due to play round because it's loss of fun, and give you a whole

00:21:40,980 --> 00:21:46,299
new mind set when doing webapps so we have this weird ability of incepting network requests

00:21:46,299 --> 00:21:49,750
and doing weird thing with the response.

00:21:49,750 --> 00:21:54,590
If you have questions feel free to hit me up on Twitter, or come to me in person I will

00:21:54,590 --> 00:21:56,860
be round for a while, with that thank you for you tension.

00:21:56,860 --> 00:21:56,980

YouTube URL: https://www.youtube.com/watch?v=3fNEkYJIXhc


