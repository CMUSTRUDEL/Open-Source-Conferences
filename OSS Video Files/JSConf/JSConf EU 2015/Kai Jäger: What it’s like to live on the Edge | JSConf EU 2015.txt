Title: Kai Jäger: What it’s like to live on the Edge | JSConf EU 2015
Publication date: 2015-10-17
Playlist: JSConf EU 2015
Description: 
	This is the story of a new browser with a complicated legacy. It’s a story about making new friends without alienating old acquaintances. Most of all, it’s a story about innovating without breaking the Web. This is the story of Microsoft Edge, the new browser in Windows 10, how it came to be, what separates it from Internet Explorer and what that means for web developers. It’s a tale of epic proportions with a happy ending that is really only the beginning.

Intro music by @halfbyte
Captions: 
	00:00:25,369 --> 00:00:32,460
Thank you very much and welcome. I was just told that I'm actually, because of the transcription

00:00:32,460 --> 00:00:44,129
over there, expressly forbidden to talk about Icelandic volcanoes.

00:00:44,129 --> 00:00:49,329
Stephen Tyler once said there is something wrong with the world today, something is wrong

00:00:49,329 --> 00:00:59,059
with our eyes, we are seeing things in a different way, these no sent words perfectly describe

00:00:59,059 --> 00:01:04,259
how Internet Explorer was rendering websites in the past.

00:01:04,259 --> 00:01:13,340
The same philosopher, in the same essay also said, I'm paraphrasing here, "Edge, yeah,

00:01:13,340 --> 00:01:19,030
yeah, yeah, yeah, yeah, yeah, yeah" - {Laughter}.

00:01:19,030 --> 00:01:24,550
What I think he meant to tell us with this, as Microsoft we should build a new browser

00:01:24,550 --> 00:01:30,300
and call it Microsoft Edge, in that sense the works of Aerosmith and Stephen Tyler,

00:01:30,300 --> 00:01:40,590
have been a Da Vinci Code for us and much of Microsoft is inspired by it.

00:01:40,590 --> 00:01:46,459
I'm the CTO in residence at the Microsoft Accelerator here in Berlin, like many of you

00:01:46,459 --> 00:01:53,679
I was a web developer in the early 2000s, because of that my relationship with Internet

00:01:53,679 --> 00:02:02,300
Explorer has always been complicated, like many of you I have written terrible code to

00:02:02,300 --> 00:02:07,179
make sure that a website also worked in Internet Explorer that was already working perfectly

00:02:07,179 --> 00:02:14,069
everywhere else. Like many of you I've hated it, I've thought it was the worse experience,

00:02:14,069 --> 00:02:16,800
that's not a good place to be in.

00:02:16,800 --> 00:02:22,980
Now, when you, actually when I started for Microsoft I was an Internet Explorer Evangelist

00:02:22,980 --> 00:02:29,519
for a little while, I would speak at conferences like this, talk about Internet Explorer, when

00:02:29,519 --> 00:02:38,920
my family asked what my yob was, I did drug trafficking, it raised fewer questions! {Laughter}

00:02:38,920 --> 00:02:44,799
Things have changed quite a bit, on some fundamental level things are still very wrong, if you

00:02:44,799 --> 00:02:57,980
go on Github and you search for IE sucks - when I saw that I was shocked, I didn't know what

00:02:57,980 --> 00:03:01,909
to do with this information and at one put I thought actually that maybe I'm looking

00:03:01,909 --> 00:03:11,959
at this all wrong, IE is the top level domain for Ireland the so just maybe what these people

00:03:11,959 --> 00:03:16,620
are trying to say is that these people are not very big fans of the band U 2. I have

00:03:16,620 --> 00:03:22,590
to admit at some point that I felt that Bono was a bit pretentious.

00:03:22,590 --> 00:03:31,480
If you search Github for internet sucks you get 34,000 results, "Stop using this when

00:03:31,480 --> 00:03:40,099
Internet Explorer no longer sucks." There is only one conclusion one can draw from this,

00:03:40,099 --> 00:03:45,779
by and large developers are not completely satisfied with the experience of writing code

00:03:45,779 --> 00:03:53,109
for Internet Explorer. This is a bad position to be in, I'm not going to make a bunch of

00:03:53,109 --> 00:03:57,889
excuses, because really there are not very good excuses for this, I'm going attempt some

00:03:57,889 --> 00:03:59,590
what of an explanation.

00:03:59,590 --> 00:04:07,079
IE is, in recent versions, a lot more standards compliant, if you used IE 11 it's a pretty

00:04:07,079 --> 00:04:13,859
good browser, there has always been a lot of baggage that we have been carrying around

00:04:13,859 --> 00:04:22,870
with us because of our legacy, IE has a 20 year legacy, IE 1 came out in 1995. This baggage

00:04:22,870 --> 00:04:29,530
is a big problem, we are carrying around different document modes I'll explain what they are,

00:04:29,530 --> 00:04:37,300
when we talked to the different developers out there, one this bigger group, very well-represented

00:04:37,300 --> 00:04:41,580
here today, just your average web developer they're pushing us

00:04:41,580 --> 00:04:46,090
to say look you have to build a more standard compliant browser you have to release updates

00:04:46,090 --> 00:04:52,500
more frequently, we don't want to be stuck with outdated standards and stuff, enterprise

00:04:52,500 --> 00:04:57,479
customers are pressurising us not to change anything, these are conflicting messages,

00:04:57,479 --> 00:05:03,020
the reason they are doing that, it's not because they our mean or behind the times it's because

00:05:03,020 --> 00:05:09,530
they have investment in the internet and internal websites and tools that they have spent millions

00:05:09,530 --> 00:05:14,910
of dollars on building and we would break all of these sites if we didn't support the

00:05:14,910 --> 00:05:19,500
broken implementations of web standards we had in old browsers.

00:05:19,500 --> 00:05:26,250
The way we dealt with, we introduced document modes, you can force IE 11 to render a website

00:05:26,250 --> 00:05:35,500
like IE 8, or 9 or 10 or alter versions, it may seem like a good solution, what it means,

00:05:35,500 --> 00:05:41,220
instead of maintaining one browser we are maintaining 7 or 8 browsers, all of this baggage

00:05:41,220 --> 00:05:46,300
really slows us down when we were thinking about a new version of our browser we figured

00:05:46,300 --> 00:05:52,580
that the only way we could build a useful Powerful browser was to drop all the baggage,

00:05:52,580 --> 00:06:05,199
we did a desperate step, we took the rendering engine, shock ware are JavaScript implementation,

00:06:05,199 --> 00:06:10,539
copied and pasted code into a new repository and basically started over, we still have

00:06:10,539 --> 00:06:17,259
internet explorer, if you go on windows 10 it has iterability in, we support that so

00:06:17,259 --> 00:06:24,080
customers can use internet and internal tools, for all purposes Edge is the new IE browser

00:06:24,080 --> 00:06:28,289
and default browser in Windows 10.

00:06:28,289 --> 00:06:36,060
So, when we set out to build Edge, we had like one big guiding principle and this guiding

00:06:36,060 --> 00:06:41,610
principle was we wanted the web to just work for everybody. Everybody, that includes of

00:06:41,610 --> 00:06:46,580
course the users of the browser, but it also includes all of you the web developers. What

00:06:46,580 --> 00:06:51,750
we mean by that, we want it to just work is we want you to no longer have to write code

00:06:51,750 --> 00:06:58,090
that is specific to Internet Explorer or Edge, we want you to write code once without vendor

00:06:58,090 --> 00:07:05,050
specific modifications and we want this to work consistently across Google Chrome, safari,

00:07:05,050 --> 00:07:11,470
Firefox and edge. In order to make that happen we had to do a couple of things, we had to

00:07:11,470 --> 00:07:16,509
up our game in terms of web standard support and we've been working on that for a while,

00:07:16,509 --> 00:07:21,949
but we really upped are game with Edge, we are also implementing forward looking standards,

00:07:21,949 --> 00:07:34,539
what I mean by that, standards that are not officially standardising them yet, we are

00:07:34,539 --> 00:07:38,340
adding support for pseudo standards I'm going to give you an example of that, what I mean

00:07:38,340 --> 00:07:45,479
by that, things that a lot of browser implement that are not actually formally standardised,

00:07:45,479 --> 00:07:49,800
we are adding support for that just to make sure that the web works consistently for everybody.

00:07:49,800 --> 00:07:54,900
Lastly, this was sort of the most satisfying part of it, we ripped out all of the baggage

00:07:54,900 --> 00:08:01,680
of Internet Explorer, so we have no more backwards compatibility, there is no IE 7 mode in edge,

00:08:01,680 --> 00:08:08,800
none of that, when we were done with building the first version of edge, we removed 220,000

00:08:08,800 --> 00:08:16,939
unique lines of code from the IE code base, 6 document modes, IE 8 mode, IE 9 mode, but

00:08:16,939 --> 00:08:23,710
we also removed but 300 APIs, just to give you some examples of this, we removed ActiveX

00:08:23,710 --> 00:08:29,460
support, browser helper objects, VB script support, but we also removed small things

00:08:29,460 --> 00:08:34,450
like attach grams, so you probably no, at event listener we had a non-standard version

00:08:34,450 --> 00:08:40,099
of that, that's gone, we are really starting with a clean slate, no Microsoft proprietary

00:08:40,099 --> 00:08:46,140
extensions in this any more, it's a really clean browser from the start {Applause}.

00:08:46,140 --> 00:08:58,370
Thank you very much. At the same time we also added 300,000 new lines of code, these 300,000

00:08:58,370 --> 00:09:04,990
new lines of code include 55 new web standards that we are supporting, but 4200 interoperability

00:09:04,990 --> 00:09:11,410
fixes, these are tiny things and big things, in terms of tiny things stuff like where Chrome

00:09:11,410 --> 00:09:16,389
has a slightly different interpretation of a web standard and we were trying to find

00:09:16,389 --> 00:09:20,389
common ground where these specifications are not as clear as they should be, we want to

00:09:20,389 --> 00:09:27,990
make sure that you never have to make sure about Edge doing a thing of its own.

00:09:27,990 --> 00:09:31,450
When we set out to figure out what sort of features do we want to implement in Edge and

00:09:31,450 --> 00:09:38,790
what we want to fix, we found that was very, very hard, over the years people have found

00:09:38,790 --> 00:09:45,019
very clever ways of making websites work in IE, one of the ways serving different content

00:09:45,019 --> 00:09:52,339
to the explorer, when it looked fancy and using a lot of CSS 3 in Chrome, we got a dumped

00:09:52,339 --> 00:10:00,529
down version of CSS 2 with some IE-specification quirks, it was the reality, we are in part

00:10:00,529 --> 00:10:06,110
or completely to blame for that, if you want to build a better browser you need to get

00:10:06,110 --> 00:10:10,940
the same content as everybody else to figure out what's wrong with your implementation.

00:10:10,940 --> 00:10:20,180
The user agent string is used to identify a browser, the truth is the user agent string

00:10:20,180 --> 00:10:21,670
is really a bag of lies.

00:10:21,670 --> 00:10:30,430
These are the user agent strings of common browsers all browsers Identify themselves

00:10:30,430 --> 00:10:36,779
as Mozilla 5.0, you know what that is, that's Netscape navigator, every browser says, "I'm

00:10:36,779 --> 00:10:46,240
Netscape navigator", with Chrome, it's KHTML, comparable on Linux and Gecko the Firefox

00:10:46,240 --> 00:10:54,600
rendering engine, they all lie about what they are. We are no exception here, we are

00:10:54,600 --> 00:10:59,279
actually, now the worst of it all, but it was necessary to make sure we get the same

00:10:59,279 --> 00:11:07,490
as everybody else. We are happily announcing that we are able web, Chrome, Gecko and safari.

00:11:07,490 --> 00:11:12,029
{Laughter} {Applause}.

00:11:12,029 --> 00:11:19,560
I know this is madness, we are not very happy about this, but in the end it is for the greater

00:11:19,560 --> 00:11:25,779
good, but as a quick side note I want to encourage you that looking forward please do not use

00:11:25,779 --> 00:11:30,120
agent user sniffing any more, if you have code on your server like regular expression,

00:11:30,120 --> 00:11:34,810
that says, "If that is this browser I'm going to do server different content", don't do

00:11:34,810 --> 00:11:40,790
that, that will always break along the line when new browsers are introduced, you will

00:11:40,790 --> 00:11:45,709
serve them old content although they have better capabilities. Use feature detection

00:11:45,709 --> 00:11:51,130
where possible, in part it's our fault we want to redeem ourselves and we need your

00:11:51,130 --> 00:11:54,370
help to do that.

00:11:54,370 --> 00:12:00,120
What we then did, we start to set out to find the things on the web that broke our browser,

00:12:00,120 --> 00:12:06,010
we looked at the top 1,000 most popular websites, opened them up in an early build of edge and

00:12:06,010 --> 00:12:17,170
fixed it, pretty simple. We took the Bing web crawler and we used it, used it to collect

00:12:17,170 --> 00:12:24,540
information from millions of websites, like what features, what extensions, what web standards

00:12:24,540 --> 00:12:31,670
do they use, we used it up in a head less version of the rendering engine and looked

00:12:31,670 --> 00:12:39,750
to see where we didn't do things right. We took all the information and made 4,000 optimisations,

00:12:39,750 --> 00:12:42,279
4,000 changes because of that.

00:12:42,279 --> 00:12:47,579
I want to give you pretty interesting examples because of that, you will find they are a

00:12:47,579 --> 00:12:50,759
bit different probably to what you might have expected. On

00:12:50,759 --> 00:12:57,050
the left you see a screen shot of IE 11, on the right edge, the same page of Hawaiian

00:12:57,050 --> 00:13:03,370
airlines, there is a bunch of icons that render correctly on the left they are not rendered

00:13:03,370 --> 00:13:10,149
at all, the are not rendered at all, we are for once doing something right, we adhere

00:13:10,149 --> 00:13:15,389
more strictly to the standard that applies to this than webkit does, Firefox actually

00:13:15,389 --> 00:13:24,050
has the same probably, if you are serving a font file you have to honour the cross version

00:13:24,050 --> 00:13:32,350
and installable files, it ignores this and it's why it works. We have chosen, it sounds

00:13:32,350 --> 00:13:38,300
crazy, to make sure our mobile browser version renders it the same way as the mobile browsers

00:13:38,300 --> 00:13:44,149
on iPhone I pad and Android so we have implemented the standard the same way that Chrome and

00:13:44,149 --> 00:13:50,220
safari does, it works, you don't have to change anything.

00:13:50,220 --> 00:13:59,199
Another weird example, group on website, there is a minor difference in the way it's rendered,

00:13:59,199 --> 00:14:05,920
group on using a CSS attribute called 'Webkit appearance', now webkit appearance is not

00:14:05,920 --> 00:14:17,180
a web standard, an invention of Apple, we find a lot of mobile sites use it and we support

00:14:17,180 --> 00:14:23,660
it with the vendor prefix so you don't have to touch your code at all it will just work.

00:14:23,660 --> 00:14:29,110
Speaking of vendor prefixes we found another interesting thing, let me first say, what

00:14:29,110 --> 00:14:37,139
we now do if we find a prefix CSS attribute or CSS selector and there is not an unprefixed

00:14:37,139 --> 00:14:41,779
version and not a version that using the MS, Microsoft specific prefix we will actually

00:14:41,779 --> 00:14:47,620
considered the other pre-fixed versions, we will use webkit prefixes if necessary.

00:14:47,620 --> 00:14:56,360
This, we did that because - {Applause} - thank you. Now, you can probably have like a divided

00:14:56,360 --> 00:15:01,380
opinion about vendor prefixes, what actually is happening with vendor prefix is a lot of

00:15:01,380 --> 00:15:07,490
websites use the Webkit prefix even though we have support for much of CSS 3, we don't

00:15:07,490 --> 00:15:15,660
get to render it because people don't use the Microsoft prefix. We did one more, so

00:15:15,660 --> 00:15:20,279
on this slide you see a subtle change in the use of gradients. And what we found was that

00:15:20,279 --> 00:15:26,470
when Apple first introduced their gradient before it was standardised the syntax was

00:15:26,470 --> 00:15:33,670
different from what was ultimately standardised. There were 2 versions. A lot of websites still

00:15:33,670 --> 00:15:39,089
use and only use the obsolete Apple version of it we have decided to support that as well

00:15:39,089 --> 00:15:44,130
just to make sure that websites render consistently. Let me make this absolutely clear I am not

00:15:44,130 --> 00:15:50,779
encouraging you to use obsolete CSS syntax I am not encouraging you to use vendor prefix

00:15:50,779 --> 00:15:54,129
where there is an unprefixed version, but just to make sure that everything renders

00:15:54,129 --> 00:16:00,319
the same across all browsers we went to these lengths to make sure it all works.

00:16:00,319 --> 00:16:05,009
But besides this many, many thousand of small fixes like this me have also add a tonne of

00:16:05,009 --> 00:16:12,240
new fixes stuff like WebAudio support, CSS filters, ECMAScript 2015 I will talk about

00:16:12,240 --> 00:16:22,259
I in a second, http/2, SMID extension, and on top of that we support everything we have

00:16:22,259 --> 00:16:31,199
also already supported with IE11, web GL web crypto, file API and so forth.

00:16:31,199 --> 00:16:37,529
Now when you decided, to implement all of these features we also knew that we needed

00:16:37,529 --> 00:16:41,790
a new update strategy, you probably know, this is one of the main points with Internet

00:16:41,790 --> 00:16:48,250
Explorer it's updated with the operating system. For us to introduce new features we had to

00:16:48,250 --> 00:16:49,209
weight for a new service

00:16:49,209 --> 00:16:56,160
pack or major release of the operating system. With Edge we have adopted the same update

00:16:56,160 --> 00:17:01,649
model you will find in Chrome and Firefox today. We will actually update Edge independently

00:17:01,649 --> 00:17:05,910
of the operating system we will do future updates along the way. It's the same ever

00:17:05,910 --> 00:17:10,780
green version of Edge as you would expect with Chrome, we also don't talk about Edge

00:17:10,780 --> 00:17:16,810
in a specific version it just Edge we will keep updating which I think is super important

00:17:16,810 --> 00:17:18,310
for this.

00:17:18,310 --> 00:17:23,699
Now, people still obviously ask us look when are you going to implement feature X when

00:17:23,699 --> 00:17:28,180
are you going to implement feature Y, even though we are a bigger company we have a lot

00:17:28,180 --> 00:17:34,970
engineers, we have limited engineering resources we can't implement everything at once. We

00:17:34,970 --> 00:17:40,330
prioritise and we have decided to be extremely open about this I am going to show you how

00:17:40,330 --> 00:17:46,970
we are doing this. So this a site it's called modern.ie, you can go there now, we have a

00:17:46,970 --> 00:17:53,500
page that says platform status on this list we first of all show you all of the different

00:17:53,500 --> 00:17:58,850
web standards that we are currently tracking, and you can see the state of a their implementation.

00:17:58,850 --> 00:18:02,679
You can see that some of them are in preview so we have a preview built on Internet Explorer

00:18:02,679 --> 00:18:08,770
that's not stable yet you can download that see some of features in there some in development,

00:18:08,770 --> 00:18:13,260
but some under consideration where we think about look this might make sense to implement

00:18:13,260 --> 00:18:16,789
it we have to prioritise but eventually we won't implement this stuff.

00:18:16,789 --> 00:18:21,580
The other thing is we actually want to have an open discourse with you about which features

00:18:21,580 --> 00:18:26,000
are important and which ones are not. This is user voice which is are customer feedback

00:18:26,000 --> 00:18:33,299
portal you can see somebody here asks we should support OVG video audio formats here's a comment

00:18:33,299 --> 00:18:37,440
from somebody on the engineering team saying it's under consideration we're looking at

00:18:37,440 --> 00:18:42,380
it deciding on whether we want to implement this. We want to be more transparent about

00:18:42,380 --> 00:18:50,700
it you can see the status of all the web standard support right there.

00:18:50,700 --> 00:18:54,809
Now this is a JavaScript conference, I am fully aware of this, so I should probably

00:18:54,809 --> 00:19:00,000
talk a little bit about JavaScript we have also done a lot of work round JavaScript in

00:19:00,000 --> 00:19:06,000
Edge, we have also done a lot work with previous version of IE there some really cool powerful

00:19:06,000 --> 00:19:13,630
new features in Edge. Now our JavaScript energy is called Chakra, and that is just-in-time

00:19:13,630 --> 00:19:18,840
compiler like you have in other browsers, we have done a tonne of performance improvements

00:19:18,840 --> 00:19:25,110
this where most developers get the most value where your applications runs faster everybody

00:19:25,110 --> 00:19:38,730
wins. We have also added somebody like SIMD support we have added ECMAScript 2015 support.

00:19:38,730 --> 00:19:46,380
Let me talk a bit about how Chakra works. Like any other JavaScript engine, when we

00:19:46,380 --> 00:19:50,120
see a bunch of JavaScript on your page we parse it turn it into an abstract syntax tree

00:19:50,120 --> 00:19:55,799
then we compile it into byte code then we have a byte code interpreter that runs JavaScript

00:19:55,799 --> 00:20:00,940
for a bit but while we run the JavaScript we collect profiling information how office

00:20:00,940 --> 00:20:06,460
in a function called, what types does it like a call site see and after a while we actually

00:20:06,460 --> 00:20:12,090
pass that profiling information along to a just-in-time compiler, to an optimising just-in-time

00:20:12,090 --> 00:20:19,700
compiler. It's also been semi-unique but Chakra we just-in-time compile on a separate thread

00:20:19,700 --> 00:20:25,039
we're not blocking the UI thread or main thread while we're doing just-in-time complication.

00:20:25,039 --> 00:20:30,400
This is a really cool feature, and it allows us to do more aggressive optimisation because

00:20:30,400 --> 00:20:30,559
we're

00:20:30,559 --> 00:20:37,570
not stalling the UI while we're compiling. Now one small down side of having a an aggressive

00:20:37,570 --> 00:20:42,260
optimising compiler is that it takes longer before you break out of the interpreter start

00:20:42,260 --> 00:20:47,690
running the machine code. So what we have done in Edge is implement a second just-in-time

00:20:47,690 --> 00:20:54,840
compiler which is not as optimising it's much, much faster. You run your byte code for a

00:20:54,840 --> 00:20:59,299
very short amount of time we will actually instantly just-in-time compile it using the

00:20:59,299 --> 00:21:04,150
symbol, then after a while we while we'll send it to optimising if we think it will

00:21:04,150 --> 00:21:10,659
make it faster. You have better performance right away but we have also done another thing

00:21:10,659 --> 00:21:15,000
we have allowed the just-in-time compiler to use more tan one thread so if you have

00:21:15,000 --> 00:21:19,460
a multi-core CPU which even mobile phones nowadays have you can actually make better

00:21:19,460 --> 00:21:27,539
use of the CPU core that will give you better performance. One of the things that struck

00:21:27,539 --> 00:21:35,770
me the most as really unexpected is we actually found that minifying JavaScript, the patterns

00:21:35,770 --> 00:21:45,850
that mini fire make, doesn't allow the compiler to make as many up assumption. We analysed,

00:21:45,850 --> 00:21:50,730
we found there were some tweaks we could do to make this much faster we running minified

00:21:50,730 --> 00:22:00,460
code now. We also improved polymorphic inline caching that's where you optimise variable.

00:22:00,460 --> 00:22:12,450
Also a great feature, we fully all know that when you have a animation on a site when you

00:22:12,450 --> 00:22:16,669
are building a game you sometimes have stutter during animations so you are frames per second

00:22:16,669 --> 00:22:22,710
drop from 60 to something else below that and go back up to 60. There is its in effect

00:22:22,710 --> 00:22:27,100
that typically called by garbage collection pauses by running the garbage collection parallel

00:22:27,100 --> 00:22:34,049
on multiple threads we can reduce the pauses and eliminate the stutter, you will see during

00:22:34,049 --> 00:22:38,309
animation which is important for games that sort of stuff.

00:22:38,309 --> 00:22:42,779
Now everybody likes benchmarks, but I want you to take these with a grain of salt because

00:22:42,779 --> 00:22:49,110
the performance of a browser is much more than winning at some synthetic benchmark is

00:22:49,110 --> 00:22:54,370
really about DOM performance about rendering, about JavaScript and many factors so this

00:22:54,370 --> 00:22:59,029
does not mean Edge is the fastest browser in the world we still very happy we're very

00:22:59,029 --> 00:23:06,730
good in these bench marks. So, actually Edge stable currently beats Apple Jetstream, Google

00:23:06,730 --> 00:23:14,029
Octane, and SunSpider and Firefox stable will not stay like this for very long it's a good

00:23:14,029 --> 00:23:19,279
thing I want Chrome to beat us on this because this like the only browser war we can actually

00:23:19,279 --> 00:23:23,150
all get behind it's the war for a better JavaScript performance because that is a war where we

00:23:23,150 --> 00:23:28,890
all win, so I say bring it on.

00:23:28,890 --> 00:23:33,360
{applause}

00:23:33,360 --> 00:23:39,710
So one thing I want to talk about is SIMD, single instruction multi data it’s a very

00:23:39,710 --> 00:23:45,320
technical things, it's a very cool thing this is making it's way into browsers. So when

00:23:45,320 --> 00:23:52,500
you run and add instruction on a CPU you give it 2 parameters you give it a 5 or a 7, it

00:23:52,500 --> 00:23:59,120
going to calculate sum of 5 and 7. Now what SIMD is it's CPU instructions that operate

00:23:59,120 --> 00:24:07,230
on vectors you can give an SIMD operation 8 values for example. The SIMD instruction

00:24:07,230 --> 00:24:12,320
will actually compute the result of that in one single instruction and often very few

00:24:12,320 --> 00:24:20,750
cycles this critical for vector mathematics, for 3D graphics it as a huge impact on performance

00:24:20,750 --> 00:24:26,919
specially with games graphics heavy applications we have worked with Intel, this also going

00:24:26,919 --> 00:24:34,049
into other browsers, to implement SIMD extension into Edge I am going to show you a very quick

00:24:34,049 --> 00:24:35,840
demo of this, a demo

00:24:35,840 --> 00:24:43,070
built by Intel actually and when I start this you can see that this running at about 20

00:24:43,070 --> 00:24:48,679
frames per second, it zooms in on the fractal you can see the performance is degrading as

00:24:48,679 --> 00:24:54,649
I zoom in when I enable SIMD or disable it again you can see the performance increase

00:24:54,649 --> 00:25:01,750
significantly all the mathematical operation it can do it almost 4 times the speed. This

00:25:01,750 --> 00:25:08,080
will be extremely helpful in writing scalable and fast games in JavaScript graphics heavy

00:25:08,080 --> 00:25:09,770
applications.

00:25:09,770 --> 00:25:16,480
Now the other thing we're implement with Edge, this both of these are by wait experimental.

00:25:16,480 --> 00:25:25,059
We are also adding JZ support as you have at in Firefox. As addin.js a sub-set of JavaScript

00:25:25,059 --> 00:25:35,770
language it's basically you can run C++ application in a JavaScript environment. What we can actually

00:25:35,770 --> 00:25:49,100
do as add.js, we just treat it as any other JavaScript code now we have a special code for it we can actually

00:25:49,100 --> 00:25:54,120
compile it differently and run it at almost native performance, I don't have a demo for

00:25:54,120 --> 00:26:00,460
it I just want to show you this is also new in Edge you can go to about flags, and if

00:26:00,460 --> 00:26:10,860
scroll done there's setting for JavaScript to enable new features, to enable addin.js

00:26:10,860 --> 00:26:20,020
I also want to talk a bit about ECMAScript 2015, quick show of hand who here is excited

00:26:20,020 --> 00:26:27,490
about ECMAScript 2015? Awesome. Excellent. So ECMAScript 2015 is a really, really cool

00:26:27,490 --> 00:26:34,529
thing, since I am running a bit out of time I will show you this very, very briefly.

00:26:34,529 --> 00:26:39,870
This is your typical JavaScript code, as you would write it today, and you can see for

00:26:39,870 --> 00:26:45,830
example in this case, there's an anonymous function see the syntax for this is clunky

00:26:45,830 --> 00:26:50,080
you have this problem where if you want to use this, inside of an anonymous function

00:26:50,080 --> 00:26:54,590
it often doesn't refer to what you think it refers to in ECMAScript 2015 you can write

00:26:54,590 --> 00:26:59,539
classes you have this arrow syntax is much nicer way of specifying anonymous functions

00:26:59,539 --> 00:27:04,260
there a tonne of other stuff I can't get into I want to show you this real quick. We have

00:27:04,260 --> 00:27:16,289
a tonne of support for UE 2015 you can see here in Edge, that Edge 13 has 80% ECMAScript

00:27:16,289 --> 00:27:22,049
2015 support we're ahead of all the other browsers but what I am going to say I am going

00:27:22,049 --> 00:27:30,220
to skip to another slide just to save sometime, basically what we want to do is we don't want

00:27:30,220 --> 00:27:35,289
to be the only one of the first one to implement a specific standard because that is essentially

00:27:35,289 --> 00:27:42,140
use less we want the web to work consistently across all browsers. We need to make sure

00:27:42,140 --> 00:27:46,409
that we all work together as browser vendors to make that happen. One thing we did with

00:27:46,409 --> 00:27:53,510
ECMAScript 2015 we already had such big support for it we're sharing our test suite for ES

00:27:53,510 --> 00:27:59,960
2015 with everybody. So everybody writing ES 2015 implementation can run our test suite

00:27:59,960 --> 00:28:06,669
to make sure their implementation adhere to the standard which is also quite new from

00:28:06,669 --> 00:28:14,809
Microsoft. I want to show you a bunch of things but I will skip ahead of this so {laughter}

00:28:14,809 --> 00:28:23,789
there ok let me show at least this one. {laughter}

00:28:23,789 --> 00:28:31,269
So over the years IE has given us a tonne of laughs, I think it's time to put an end

00:28:31,269 --> 00:28:44,100
to this and to start working with a serious browser, thank you very much go to dev.modern.ie.

00:28:44,100 --> 00:28:52,900

YouTube URL: https://www.youtube.com/watch?v=Ju8x3z1LuCg


