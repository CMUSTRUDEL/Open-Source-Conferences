Title: Mathias Bynens: RegExp.prototype.unicode | JSConf EU 2015
Publication date: 2015-10-19
Playlist: JSConf EU 2015
Description: 
	User input and string manipulation are central to development, but many engineers and even popular libraries struggle with Unicode. And ECMAScript 5 doesn’t help, with many built-in string manipulation functions offering puzzling results. Security and the need for internationalization both throw these issues into stark relief. This talk highlights the many problems related to Unicode in JavaScript regular expressions, demonstrates how ES6 (aka. ECMAScript 2015) helps solve these issues, and explains how to polyfill in the mean time.

You’ll walk away from this presentation knowing how to create Unicode-aware regular expressions in JavaScript with ease.

You can read more on Mathias blog: https://mathiasbynens.be/notes/es6-unicode-regex

Intro music by @halfbyte
Captions: 
	00:00:26,010 --> 00:00:30,980
MATHIAS BYNENS: All right so in ES6 every regular expression has a Unicode getter that

00:00:30,980 --> 00:00:36,160
returns true or false depending on whether a new flag, the u flag, which stands for Unicode

00:00:36,160 --> 00:00:40,860
has been enabled for this regular expression or not. That’s pretty much what this presentation

00:00:40,860 --> 00:00:54,260
will be about. Fun fact about the title of this talk, you shouldn't ever run Unicode.

00:00:54,260 --> 00:00:59,830
You shouldn't use this code because technically it should throw an error, Unicode is a getter

00:00:59,830 --> 00:01:05,050
that defined in the prototype, but the getter checks if it's being called on a regular expression

00:01:05,050 --> 00:01:11,220
instance, and RegExp type itself is not a regular expression instance. Just a quick

00:01:11,220 --> 00:01:15,190
fun fact. Anyway, before we get started let's just make

00:01:15,190 --> 00:01:19,470
sure we're all on the same page when it comes to Unicode I am just going to throw some terminology

00:01:19,470 --> 00:01:26,690
at you a couple of terms I will be using throughout the rest of the presentation. Let's get started.

00:01:26,690 --> 00:01:31,830
So the easiest way of to think of Unicode is kind of like a database that maps any symbol

00:01:31,830 --> 00:01:37,980
you can think of to a unique name for that symbol and a unique canonical, which is a

00:01:37,980 --> 00:01:47,010
unique number for that. You have the letter A which you have the code point U+0041 and

00:01:47,010 --> 00:01:52,730
the small letter a which is a completely different symbol, it gets it own unique name and code

00:01:52,730 --> 00:01:58,710
point. This is very useful because it allows you to refer to a specific symbol without

00:01:58,710 --> 00:02:03,070
having to use the symbol itself, you can just refer to code point or to name, and everyone

00:02:03,070 --> 00:02:07,030
can look it up and the Unicode standard and know exactly which symbol you are talking

00:02:07,030 --> 00:02:10,750
about. Now, code points are usually formatted the

00:02:10,750 --> 00:02:16,940
way you see here you get the u+ prefix then following by a number of hexadecimal digits,

00:02:16,940 --> 00:02:24,010
up to at least 4 hexadecimal digits as well. There's a bunch of code points in Unicode

00:02:24,010 --> 00:02:30,140
for example there's also the pile of poo and many other emoji, and really the code

00:02:30,140 --> 00:02:34,450
points in Unicode span a very wide range, there’s a lot of them. It goes all the way

00:02:34,450 --> 00:02:42,530
from 0 to 10 FFF so that's a little over 1.1 million different code points. Now to keep

00:02:42,530 --> 00:02:48,239
thing a little bit organised Unicode divides these code points up into 17 so called planes

00:02:48,239 --> 00:02:52,540
I am not going to bore you with the details for each of these individual planes. the first

00:02:52,540 --> 00:02:57,329
one is pretty interesting it's called the basic the multilingual plane or the BMP, it

00:02:57,329 --> 00:03:03,659
goes from 0FFFF, I think it's the most important one it contains all the most commonly used

00:03:03,659 --> 00:03:09,779
symbols, whenever you are writing a text document in English or Spanish or German you probably

00:03:09,779 --> 00:03:14,129
won't need any symbols outside of this BMP range.

00:03:14,129 --> 00:03:18,889
Now all the other planes combined they are calling the astral planes so they range from

00:03:18,889 --> 00:03:28,200
1000 to 10FFFF so the vast majority of the Unicode point space lies in this astral range,

00:03:28,200 --> 00:03:34,290
over 95% of all code points are there, but because the BMP contains all the most important

00:03:34,290 --> 00:03:39,269
ones, a lot of developers tend to forget about all the other code points.

00:03:39,269 --> 00:03:42,810
I actually gave a presentation about that last year, it was titled ‘JavaScript has

00:03:42,810 --> 00:03:50,109
a Unicode problem.’ I explained some of the problems in JavaScript strings I will

00:03:50,109 --> 00:03:55,290
not be able to repeat all the examples and explain how you fix them if you are interested

00:03:55,290 --> 00:03:59,239
in that just check out the presentation I gave last year, the link is right there and

00:03:59,239 --> 00:04:03,739
just to give you one small example for example if you take a string containing only an astral

00:04:03,739 --> 00:04:09,309
symbol like the pile of poo emoji for instance, it has a length of 2 instead of 1 which may

00:04:09,309 --> 00:04:16,090
not be what you expect. This happens because JavaScript expresses astral symbols as 2 separate

00:04:16,090 --> 00:04:26,110
units called surrogate half. That combined together in a surrogate pair, this represents

00:04:26,110 --> 00:04:34,130
a single astral symbol. It's a little bit confusing. Let's talk about RegExp so there's

00:04:34,130 --> 00:04:39,990
a bunch of effects that this new u flag for regular expressions has, but first that will

00:04:39,990 --> 00:04:46,610
discuss is the impact on syntax. It also kind of changes the meaning of the .operator,

00:04:46,610 --> 00:04:51,890
quantifiers are affected as character classes have new behaviour, character class escape

00:04:51,890 --> 00:04:57,860
have changed the iflag for case in sensitivity gets a new behaviour when it's combined with

00:04:57,860 --> 00:05:03,380
the u flag, even HTML documents are kind of impacted by the existence of the u flag believe

00:05:03,380 --> 00:05:09,280
it or not, and finally we will take a look at browser support. Let's get started with

00:05:09,280 --> 00:05:15,870
the impact the u flag has on syntax. Adding the u flag to a regular expression automatically

00:05:15,870 --> 00:05:21,850
unlocks a new syntax called Unicode code point escapes. These things start with a\ followed

00:05:21,850 --> 00:05:27,040
by u followed by braces. Between those braces you can us any number of hexadecimal digits

00:05:27,040 --> 00:05:30,870
you want to use a of course you only need sticks to be able to rep sensibility any

00:05:30,870 --> 00:05:37,690
Unicode point that's plenty. Now this again makes it really easy to refer to any symbol

00:05:37,690 --> 00:05:42,230
with having to use the symbol itself you can just refer to code point it instead, specially

00:05:42,230 --> 00:05:46,480
if you are creating a huge regular expression that tries to match a lot of different code

00:05:46,480 --> 00:05:50,780
points or symbols it can make a regular expression actually more readable if you want to deal

00:05:50,780 --> 00:05:55,690
with you probably don't want to look at all these weird characters in your code you just

00:05:55,690 --> 00:06:01,020
want to see the code points instead this makes that's really ease. In fact this Unicode code

00:06:01,020 --> 00:06:06,530
point escapes syntax is automatically available in string and template strings as well in

00:06:06,530 --> 00:06:12,560
ES6 if you want to use it in regular expression you need to use the u flag first.

00:06:12,560 --> 00:06:16,900
In fact if may look like you are already able to use these code points escapes even without

00:06:16,900 --> 00:06:22,770
a u flag but that not really what's going on. For example the code at the bottom doesn't

00:06:22,770 --> 00:06:28,310
throw an error which might lead you to believe it actually already works but it also does

00:06:28,310 --> 00:06:33,280
not quite do what you would expect to it. So in this case the\followed by the u is actually

00:06:33,280 --> 00:06:38,870
an unnecessary escape sequence for the u character, then the braces and numbers rapped in the

00:06:38,870 --> 00:06:46,050
braces that the quantifier, instead of matching the code point U+234 you are basically saying

00:06:46,050 --> 00:06:53,860
match the letter U repeat it 1, 2, 3, 4 times. That’s why you explicitly opt in by using

00:06:53,860 --> 00:07:00,080
the u flag if you want to use this feature it's also a good reason to not blindly go

00:07:00,080 --> 00:07:05,490
through your existing source code and blindly add the u flag to your existing RegExp because

00:07:05,490 --> 00:07:09,400
you might end up accidentally changing their meaning this way.

00:07:09,400 --> 00:07:13,810
Now to avoid this kind of ambiguity in the future the u flag prevents you from using

00:07:13,810 --> 00:07:19,000
unneeded escapes for example the A character doesn't have any special meaning at regular

00:07:19,000 --> 00:07:24,000
expression, so there no reason why you would want to escape using a \U if you enabled the

00:07:24,000 --> 00:07:28,150
U flag for a regular expression. This will actually throw an error this is JavaScript's

00:07:28,150 --> 00:07:31,310
way of warning you, you are doing something weird here.

00:07:31,310 --> 00:07:36,470
So really you can think of the u flag as kind of like a strict mode for RegExp specifically

00:07:36,470 --> 00:07:42,400
I think you should use is for any new RegExp you create from now on, but at the same time

00:07:42,400 --> 00:07:46,780
you should not blindly go back to your old source code and just add the u flag to all

00:07:46,780 --> 00:07:51,400
your own regular expression without thinking what you are doing because once again you

00:07:51,400 --> 00:07:56,720
accidentally change their meaning in a very subtle way and possibly break your code.

00:07:56,720 --> 00:08:03,810
Now let's talk about the impact on the dot pop operator. Now without the u flag, dot

00:08:03,810 --> 00:08:12,220
matches any BMP symbol without line terminator. If you use a.bin a regular expression, it

00:08:12,220 --> 00:08:17,840
won't match the tetragram for sender symbol, because that's an astral symbol as far as

00:08:17,840 --> 00:08:22,650
JavaScript is concerned, that astral symbol consists of the 2 surrogate halves, it treats

00:08:22,650 --> 00:08:29,100
each of them as an individual character. This is a bit surprising, but all you need to do

00:08:29,100 --> 00:08:34,180
is work around this behaviour is just enable the u flag ES6 that automatically makes the

00:08:34,180 --> 00:08:40,010
dot operator work the way we would expect to it work in the first place.

00:08:40,010 --> 00:08:46,170
Another thing that is effective is quantifiers, they are things like the plus sign the question

00:08:46,170 --> 00:08:52,130
mark, numbers wrapped in braces indicate how many times you want to repeat the previous part

00:08:52,130 --> 00:08:58,210
of the regular expression, in this example we're matching 2 consecutive A symbols. This

00:08:58,210 --> 00:09:03,640
works as expected, if you are trying to do the same thing using an astral symbol instead

00:09:03,640 --> 00:09:08,300
it won't actually work, the result is now false instead of true.

00:09:08,300 --> 00:09:13,430
That is because without the new flag if a quantifier follows an astral symbol, it only

00:09:13,430 --> 00:09:18,140
applies to the low surrogate of that symbol. As far as JavaScript is concerned, this

00:09:18,140 --> 00:09:22,250
is what that regular expression looks like. You have the astral symbol represented by

00:09:22,250 --> 00:09:28,050
a surrogate pair then there is way easy to see that quantifier simply applies to only

00:09:28,050 --> 00:09:31,800
the last part of the surrogate pair not to surrogate pair as a whole.

00:09:31,800 --> 00:09:37,260
This again probably not what you want, or what you would expect, but it's really easy

00:09:37,260 --> 00:09:42,870
to fix this, all you need to do is just apply the u flag. This way quantifiers apply

00:09:42,870 --> 00:09:49,010
to whole symbols even for astral symbols. So it's the only way to make sure that JavaScript

00:09:49,010 --> 00:09:54,660
treats all code points equally. I believe that's part of the code of conduct at JSConfEU,

00:09:54,660 --> 00:10:01,310
you are basically legally obliged to use the u flag from now on. Other way that’s different

00:10:01,310 --> 00:10:06,800
is character classes. Without the u flag any given character class can only match a BMP

00:10:06,800 --> 00:10:14,900
symbol, things like BCD work as expected they match either B or C or D if you try to add

00:10:14,900 --> 00:10:21,690
an astral symbol to that class the JavaScript treats it again as two separate characters,

00:10:21,690 --> 00:10:30,650
one for each half of the surrogate pair because of that tetragram for symbol is not matched

00:10:30,650 --> 00:10:37,750
this again is a little bit confusing I think. So as far as JavaScript is concerned this

00:10:37,750 --> 00:10:44,170
is what regular expression looks like, the character class contains not 3 but 4 characters,

00:10:44,170 --> 00:10:48,150
and that is why the result is false instead of true.

00:10:48,150 --> 00:10:51,900
Now all you need to do to fix it, well you guessed it all you need to do is add the

00:10:51,900 --> 00:10:56,480
u flag to regular expression and that magically makes it work the way you expect to it, you

00:10:56,480 --> 00:11:02,720
can now use a whole astral symbols in character classes. Now this also means that the whole

00:11:02,720 --> 00:11:07,960
astral symbols can be used in character class ranges, and everything will still work the

00:11:07,960 --> 00:11:11,279
way you would expect to it as long as the u flag is set.

00:11:11,279 --> 00:11:15,420
in this case I'm trying to create a range from the pile of poo character to the busy

00:11:15,420 --> 00:11:24,620
symbol, pile of poo and the busy symbol, it works the way I would expect it to.  However,

00:11:24,620 --> 00:11:32,000
if you omit the a flag if you tried this in ES 5 you would get an error.  The regular

00:11:32,000 --> 00:11:36,600
expression would throw and it would say the range is out of order in the character class,

00:11:36,600 --> 00:11:41,920
that happens again, because of the same behaviour basically, so far as JavaScript is concerned

00:11:41,920 --> 00:11:45,680
this is what that regular expression looks like you are creating a range between two

00:11:45,680 --> 00:11:51,860
astral symbols each represented by a surrogate pair and JavaScript tries to create a range

00:11:51,860 --> 00:11:57,500
between the first character and first surrogate for the second one it's not the range you

00:11:57,500 --> 00:12:02,540
wanted to create in the first place, the first code point is a greater number than the second

00:12:02,540 --> 00:12:08,720
one it also throws an error.  Once again just use the u flag and all the problems go

00:12:08,720 --> 00:12:11,860
away automatically. Now the u flag

00:12:11,860 --> 00:12:18,930
also effects negated character classes, so for example, carat a character class matches

00:12:18,930 --> 00:12:30,270
any BMP accept a, but not astral symbols JavaScript considers those to be too separate characters.

00:12:30,270 --> 00:12:35,260
With the u flag enabled the very same regular expression now matches the best bigger set

00:12:35,260 --> 00:12:43,070
of all Unicode symbols except for a.                   Now, character

00:12:43,070 --> 00:12:49,350
class escapes are impacted as well, backslash, lower case d, which matches any digit from

00:12:49,350 --> 00:12:57,860
zero to 9, also backslash upper case D, matches the set nothing that's not a digit 0 - 9,

00:12:57,860 --> 00:13:08,010
white space characters, you can match, or non-white space, backslash S for,/W, a word

00:13:08,010 --> 00:13:14,250
charge defined as any character from A to Z in lower case or upper case, underscore

00:13:14,250 --> 00:13:18,339
or digit from 0 - 9. Now the

00:13:18,339 --> 00:13:27,670
U flag affects the meaning of these character class escapes with an upper case, so/d, /w,

00:13:27,670 --> 00:13:34,570
without U+ flag these match any BMP symbol not matched by the lower case counterparts,

00:13:34,570 --> 00:13:42,050
so for example,/S, matches any non-white space symbol, so it would match the character A

00:13:42,050 --> 00:13:49,240
for example, but it wouldn't match an astral symbol like tetragram for centre and that

00:13:49,240 --> 00:13:54,670
is because once again those are considered to be two separate characters in JavaScript,

00:13:54,670 --> 00:14:02,370
this is probably not what you want.  Now, with the u flag enabled,/D, S and W, they

00:14:02,370 --> 00:14:08,190
match astral symbols too which makes a lot more sense.  Now it's important to know that

00:14:08,190 --> 00:14:13,680
in the verse counter points so the lower case d, sand w, they're not affected at all by

00:14:13,680 --> 00:14:18,850
the a flag, there was in fact a proposal on ES discussed to change their meaning and make

00:14:18,850 --> 00:14:26,279
them more Unicode aware,/d could match many more digits in many scripts not just o- nine

00:14:26,279 --> 00:14:33,550
in Arabic, but other scripts, but it was rejected in favour of a bigger proposal I'll talk about

00:14:33,550 --> 00:14:35,990
in a second.                   Now there

00:14:35,990 --> 00:14:43,510
is another gotcha with this, essentially the act of converting upper case Unicode symbols

00:14:43,510 --> 00:14:50,020
into lower case form, that's not just letters A to Z, that's pretty simple, but actually

00:14:50,020 --> 00:14:55,310
you need to be aware of different scripts, different languages and Unicode standard defines

00:14:55,310 --> 00:14:59,089
all these mappings for all the different code points.

00:14:59,089 --> 00:15:02,830
Now when both the i flag for case insensitivity and

00:15:02,830 --> 00:15:07,700
the a flag for Unicode are enabled, on the same regular expression all the symbols are

00:15:07,700 --> 00:15:14,430
implicitly case folded before being compared, this might lead to surprising results every

00:15:14,430 --> 00:15:17,529
now and then.                   So for example,

00:15:17,529 --> 00:15:23,380
the regular expression where you match the range A to Z in lower case, you can enable

00:15:23,380 --> 00:15:28,750
case insensitivity using the i flag, if you now enable the u flag as well, suddenly you

00:15:28,750 --> 00:15:36,740
will also match the code point oh 17 F, it goes to the S, according to Unicode case folder,

00:15:36,740 --> 00:15:44,690
same for A and 212 A, so this another one of the things you need to watch out for and

00:15:44,690 --> 00:15:49,890
it's another reason not just to blindly add the a flag to your existing regular expressions

00:15:49,890 --> 00:15:54,360
you might change their meaning this way.                   The case

00:15:54,360 --> 00:15:58,720
folding logic I mentioned applies to the symbols in the regular expression pattern as well

00:15:58,720 --> 00:16:04,310
as the symbols in the string to be matched, so it goes both ways.  In general that's

00:16:04,310 --> 00:16:10,140
petty useful behaviour, but in some cases it can be really, really confusing, for example,

00:16:10,140 --> 00:16:19,930
by default /W, matches anything that is not matched by/w, it matches any non-word character,

00:16:19,930 --> 00:16:30,120
but when both the I and the u flag the case folding logic kicks in, essentially, well,

00:16:30,120 --> 00:16:37,850
/W which is supposed to match no word characters, now matches the capital letter K and S, it's

00:16:37,850 --> 00:16:41,290
probably weird, it's not what you would expect, it's another thing to watch out for when you

00:16:41,290 --> 00:16:46,600
are using the u flag and another reason not to just blindly add to all your existing regular

00:16:46,600 --> 00:16:52,430
expressions, make sure you are not using /W first.

00:16:52,430 --> 00:16:55,850
Now believe it or not the existence of the a flag also

00:16:55,850 --> 00:17:01,640
has its effect on HTML documents, the pattern attribute for input or exterior elements,

00:17:01,640 --> 00:17:08,870
allows you to - the browser then provides with styling and scribing hooks to make stuff

00:17:08,870 --> 00:17:12,929
happen on the validity of that input.                   Now the

00:17:12,929 --> 00:17:18,860
u flag is always enabled for regular expressions compiled through HTML pattern, according to

00:17:18,860 --> 00:17:26,919
the specification, la.w, use that as a pattern, the dot operator well match astral symbols

00:17:26,919 --> 00:17:31,890
as well, just like we discussed before.                   Now what

00:17:31,890 --> 00:17:39,000
about browser and engine support for new Unicode features.  Microsoft edge is the only stable

00:17:39,000 --> 00:17:45,760
browser with implementation of it, they support it in they Chakra engine, but not the HTML

00:17:45,760 --> 00:17:52,030
pattern flag yet, however I filed a book on that, I can assume that they are working on

00:17:52,030 --> 00:17:57,170
it, also an experimental version available, it's hidden behind the flag, you can play

00:17:57,170 --> 00:18:04,820
around with it if you want to, there are a few minor bugs, but we're working on it, what

00:18:04,820 --> 00:18:10,450
about all the other browsers, it would be a shame if we couldn't use u flag today, wouldn't

00:18:10,450 --> 00:18:22,309
it, that's why I created RegExp, the ES 6 expressions using the u flag into ES 5 codes

00:18:22,309 --> 00:18:29,670
that work day-to-day so you can start using the u flag today, you may actually have noticed

00:18:29,670 --> 00:18:35,920
that the Babel transpilers both support the a flag as well, if you use a regular expression

00:18:35,920 --> 00:18:48,570
with the u flag they will translate it into ES 5 regular.  The good news is if you are

00:18:48,570 --> 00:18:53,400
using a transpiler as part of the build process you don't have to do anything, you can start

00:18:53,400 --> 00:18:57,730
using the u flag today.                   Now, just

00:18:57,730 --> 00:19:05,990
to give quickly give you an idea of how RegExPu works internally, we need to borrow JavaScript

00:19:05,990 --> 00:19:15,110
code, we need source code to put that into abstract syntax tree, I used the esprima

00:19:15,110 --> 00:19:27,030
parser for this.  Then I look for regular expressions, literals in that EST that have

00:19:27,030 --> 00:19:35,679
the u flag enabled, once I found such a regular expression, I parsed it, it self, using another

00:19:35,679 --> 00:19:48,299
parser, - it was originally a regular expression parser of course for this progress I needed

00:19:48,299 --> 00:20:02,610
to support ECMA 6 as well, like the u flag - finally we rewrite each regular expression

00:20:02,610 --> 00:20:10,750
without u flag so it's equivalent, but compatible with ES5, I use regenerate for that and no

00:20:10,750 --> 00:20:17,940
Unicode data, some data packages I will give you an example of this later.

00:20:17,940 --> 00:20:23,500
Then we update the regular expression abstract syntax tree then we transform the regular

00:20:23,500 --> 00:20:28,950
expression syntax tree back into regular expression literal. You could use the GN project for

00:20:28,950 --> 00:20:36,169
that. Then finally we update our original JavaScript abstract tree so it contains the

00:20:36,169 --> 00:20:44,510
new regular expression. I do this, it makes it really easy, transforming the JavaScript

00:20:44,510 --> 00:20:50,860
abstract syntax tree back into JavaScript code. That's it at the end. We started out

00:20:50,860 --> 00:20:56,150
with ES6 code that uses lots of ES6 features and u flag for regular expression, at the

00:20:56,150 --> 00:21:03,110
end ECMAScript 5 compatible code comes out. Now for something that still no built in syntax

00:21:03,110 --> 00:21:09,600
in ECMAScript 6 even with the u flag, for example, Unicode provides a lot of data files for

00:21:09,600 --> 00:21:14,950
categories, scripts, blocks and properties, but there’s no way to access that data directly

00:21:14,950 --> 00:21:19,400
in regular expressions. So for example let's say you want to match all the Unicode symptoms

00:21:19,400 --> 00:21:26,140
in the Greek script. One way to do this is to use the third party library like exRegExp

00:21:26,140 --> 00:21:32,820
that would look like this so you just use the \p syntax, then between the braces you

00:21:32,820 --> 00:21:39,140
can use the name of a property or a category or a block, and exRegExp will care of that

00:21:39,140 --> 00:21:45,890
for you. know the I am also parsing the character a there, a flag that stands for astral symbol

00:21:45,890 --> 00:21:54,570
support, a custom flag that it makes it really easy to match all Greek symbols. There’s

00:21:54,570 --> 00:22:02,030
only one down side to this, it's that exRegExp is a 35kb runtime, it may not be the best

00:22:02,030 --> 00:22:08,010
solution in performance critical situations. There's another way of coming up with a similar

00:22:08,010 --> 00:22:14,590
result, you could just build a script use the regenerate library I talked about earlier.

00:22:14,590 --> 00:22:19,910
That would look something like this, so you write a script like that you require, regenerate,

00:22:19,910 --> 00:22:27,120
then you use the node Unicode data modules that basically contain arrays of Unicode symbols

00:22:27,120 --> 00:22:32,090
and points. I am getting an array containing all the symbols and the Greek scripts according

00:22:32,090 --> 00:22:38,150
to Unicode version 6.30, I am parsing that array into regenerate. That gives me a set

00:22:38,150 --> 00:22:43,780
of characters or code points and then I turn that into a regular expression or, well actually

00:22:43,780 --> 00:22:49,740
a string I can use as part of a regular expression literal. It gives me this result. Again this

00:22:49,740 --> 00:22:54,100
not a regular expression that I would enjoy writing out by hand let alone testing it or

00:22:54,100 --> 00:22:59,010
maintaining it. You may have noticed I am actually using an outdated Unicode version

00:22:59,010 --> 00:23:05,500
here, this is version 6.3.0, but the latest version is version 8. Imagine having to update

00:23:05,500 --> 00:23:09,830
this regular expression manually without having this build script of 4 lines it would be a lot

00:23:09,830 --> 00:23:14,790
of work. Now I have the small scripts, all I need to do is change the version number,

00:23:14,790 --> 00:23:20,530
run the script again, just like that an up-to-date regular expression comes out.

00:23:20,530 --> 00:23:27,370
Now, hopefully in a future version of ECMAScript there will be built in support for the \p

00:23:27,370 --> 00:23:35,910
syntax that Pearl already supports, that way you could already use \p to match all the

00:23:35,910 --> 00:23:42,520
symbols in the Greek script, then it would just work as long as you use the u flag. The

00:23:42,520 --> 00:23:47,700
thing is everyone agrees it's a very big proposal, everyone wants to do this but the problem

00:23:47,700 --> 00:23:52,240
is that someone needs to do the work and write the specification for it so if you are interested

00:23:52,240 --> 00:23:55,309
in that come talk to me afterwards, we'll make it happen.

00:23:55,309 --> 00:24:02,760
Anyway, the main takeaways here are you should use the u flag when you can for all the regular

00:24:02,760 --> 00:24:07,750
expressions you write from now on. I think remember the u flag is to regular expression

00:24:07,750 --> 00:24:14,299
as strict mode is to all of JavaScript. Now, you also should not blindly add the

00:24:14,299 --> 00:24:18,630
u flag to your existing regular expression, you might accidentally change their meaning

00:24:18,630 --> 00:24:25,860
in very subtle ways that might actually break your code. Finally, we should use a transpiler,

00:24:25,860 --> 00:24:30,559
because this way your ES6 code runs everywhere. You shouldn't just use a transpiler for these

00:24:30,559 --> 00:24:36,090
particular features but for many other features as well, of course Babel and Tracer, they

00:24:36,090 --> 00:24:43,460
both already support transpilation of the u flag thanks to RegExpu. Whenever you need

00:24:43,460 --> 00:24:51,049
a regular expression based on some unicode category or a property or a script, you should just write a simple build script that use regenerate

00:24:51,049 --> 00:25:09,220
and build it and use xRegExp at runtime. Thank you. {applause}

00:25:09,220 --> 00:25:14,380
There is a blogpost at that URL which basically details the same thing I talked about in this presentation,

00:25:14,380 --> 00:25:15,090

YouTube URL: https://www.youtube.com/watch?v=raJcug_vW0c


