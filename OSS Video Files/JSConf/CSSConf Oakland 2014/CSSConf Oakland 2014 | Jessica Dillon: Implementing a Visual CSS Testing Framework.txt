Title: CSSConf Oakland 2014 | Jessica Dillon: Implementing a Visual CSS Testing Framework
Publication date: 2015-01-25
Playlist: CSSConf Oakland 2014
Description: 
	JESSICA DILLON

Experienced software engineer who likes to grow and be challenged by the entire application stack. Particular affinity for web development, working on new problems, being surrounded by an amazing team, and the opportunity to build community.

http://jessicard.com/
https://twitter.com/jessicard
Captions: 
	00:00:03,109 --> 00:00:09,030
thanks for having me here this is song

00:00:05,729 --> 00:00:11,040
right but second okay today I'm going to

00:00:09,030 --> 00:00:13,530
talk to you about implementing a visual

00:00:11,040 --> 00:00:15,209
CSS testing framework using automatic

00:00:13,530 --> 00:00:17,910
screenshot comparison to catch style

00:00:15,209 --> 00:00:20,760
regressions my name is Jessica on the

00:00:17,910 --> 00:00:22,259
internet and Jessica in real life and I

00:00:20,760 --> 00:00:24,420
work at a company called bug snag here

00:00:22,259 --> 00:00:26,339
in San Francisco bug snag is an

00:00:24,420 --> 00:00:28,259
exception monitoring tool I'm a software

00:00:26,339 --> 00:00:30,240
engineer they're working primarily in

00:00:28,259 --> 00:00:31,589
Ruby and JavaScript but our stack

00:00:30,240 --> 00:00:34,620
includes lots of languages including

00:00:31,589 --> 00:00:36,000
node and go we're currently hiring so

00:00:34,620 --> 00:00:37,980
please get in touch if you're interested

00:00:36,000 --> 00:00:40,590
in working at a super small company for

00:00:37,980 --> 00:00:42,629
developer tools so back to this whole

00:00:40,590 --> 00:00:44,489
implementing a visual CSS testing

00:00:42,629 --> 00:00:47,730
framework thing what am I even talking

00:00:44,489 --> 00:00:49,230
about well at bug snag we decided we

00:00:47,730 --> 00:00:51,870
wanted a way to automatically take two

00:00:49,230 --> 00:00:55,140
screenshots of our website at different

00:00:51,870 --> 00:00:56,789
times in our app for example since we

00:00:55,140 --> 00:00:58,680
use get let's say we had a feature

00:00:56,789 --> 00:01:00,690
branch that we just push to commit to

00:00:58,680 --> 00:01:02,460
we'd want to take a screenshot of what

00:01:00,690 --> 00:01:04,920
our home page looks like on that branch

00:01:02,460 --> 00:01:06,630
and a screenshot of how our home page

00:01:04,920 --> 00:01:09,509
looks on production or what's currently

00:01:06,630 --> 00:01:11,990
running on master with those screenshots

00:01:09,509 --> 00:01:14,549
we want to spot those differences and

00:01:11,990 --> 00:01:17,159
produce some sort of diff image that

00:01:14,549 --> 00:01:20,280
highlighted the difference is why would

00:01:17,159 --> 00:01:22,290
we want to do this you ask well as we

00:01:20,280 --> 00:01:24,229
all know writing reading and code

00:01:22,290 --> 00:01:27,570
reviewing CSS can be pretty intense and

00:01:24,229 --> 00:01:29,250
even more intense to refactor at bugs

00:01:27,570 --> 00:01:31,110
nag we decided to do a huge

00:01:29,250 --> 00:01:33,360
organizational and code style refactor

00:01:31,110 --> 00:01:34,950
of our CSS and we wanted a way to test

00:01:33,360 --> 00:01:37,740
that our site look the same despite

00:01:34,950 --> 00:01:39,180
changing all of the code unfortunately

00:01:37,740 --> 00:01:41,369
as you can tell that didn't really

00:01:39,180 --> 00:01:43,439
always work out for us we went through

00:01:41,369 --> 00:01:45,420
many iterations of refactoring and we

00:01:43,439 --> 00:01:48,869
realized we needed a tool to help us out

00:01:45,420 --> 00:01:51,000
and test our pages automatically so we

00:01:48,869 --> 00:01:52,649
went on a hunt for a way to test our CSS

00:01:51,000 --> 00:01:54,060
we wanted to know if there was a tool

00:01:52,649 --> 00:01:56,100
already built that did what we wanted

00:01:54,060 --> 00:01:58,740
without knowing exactly what it is that

00:01:56,100 --> 00:02:00,329
we did want we first stumbled upon one

00:01:58,740 --> 00:02:03,090
of Facebook's open source libraries

00:02:00,329 --> 00:02:05,430
huxley and Huxley's read me it says

00:02:03,090 --> 00:02:07,200
watches you browse take screenshots

00:02:05,430 --> 00:02:09,479
tells you when they change which sounds

00:02:07,200 --> 00:02:11,850
amazing it's exactly what we wanted but

00:02:09,479 --> 00:02:14,490
I noticed it hadn't been updated in over

00:02:11,850 --> 00:02:16,010
a year which wasn't promising but I

00:02:14,490 --> 00:02:18,210
decided give it a shot anyway

00:02:16,010 --> 00:02:19,650
after a good while of fiddling around

00:02:18,210 --> 00:02:21,540
with Huxley it ended up being a little

00:02:19,650 --> 00:02:23,190
bit too buggy for us although I did hear

00:02:21,540 --> 00:02:26,490
somebody talking about it did work for

00:02:23,190 --> 00:02:28,440
them so I'm happy yes but for us at it

00:02:26,490 --> 00:02:30,300
would have random failures randomly

00:02:28,440 --> 00:02:31,740
wouldn't take screenshots and I started

00:02:30,300 --> 00:02:33,180
realizing it wasn't exactly what I was

00:02:31,740 --> 00:02:36,150
looking for in a CSS testing tool anyway

00:02:33,180 --> 00:02:37,350
I kept looking and it turns out there

00:02:36,150 --> 00:02:39,780
are a lot of frameworks that do some

00:02:37,350 --> 00:02:41,430
sort of CSS testing they all work in

00:02:39,780 --> 00:02:44,160
different ways some take screenshots

00:02:41,430 --> 00:02:46,050
some aren't even visual I definitely

00:02:44,160 --> 00:02:47,910
recommend checking some of these out and

00:02:46,050 --> 00:02:49,260
seeing if they fit what you're doing in

00:02:47,910 --> 00:02:52,500
your apps before trying to build your

00:02:49,260 --> 00:02:54,120
own but I really started thinking about

00:02:52,500 --> 00:02:56,250
it what was I looking forward to CSS

00:02:54,120 --> 00:02:58,830
testing framework what would fit the way

00:02:56,250 --> 00:03:00,630
bug snag is built best I decided I

00:02:58,830 --> 00:03:02,370
wanted a visual way to test my CSS with

00:03:00,630 --> 00:03:05,250
screenshots rather than writing out

00:03:02,370 --> 00:03:07,260
tests describing the visuals this is

00:03:05,250 --> 00:03:08,730
where I need a disclaimer at bugs nag

00:03:07,260 --> 00:03:11,220
our web dashboard is written in rails

00:03:08,730 --> 00:03:12,750
this mix with the fact I wanted to test

00:03:11,220 --> 00:03:14,250
to take screenshots affected my

00:03:12,750 --> 00:03:17,970
decisions in what frameworks I wanted to

00:03:14,250 --> 00:03:19,680
use we also use get for our source

00:03:17,970 --> 00:03:22,890
control bug snag and we use it the

00:03:19,680 --> 00:03:24,510
github way what that means is we have a

00:03:22,890 --> 00:03:27,530
master branch which is always

00:03:24,510 --> 00:03:30,000
deployables ready or it should be and

00:03:27,530 --> 00:03:31,500
whenever we want to create a feature we

00:03:30,000 --> 00:03:34,250
branch off master until it's ready and

00:03:31,500 --> 00:03:36,030
then we were jit back into master

00:03:34,250 --> 00:03:38,430
considering the tools we had at our

00:03:36,030 --> 00:03:40,800
disposal and after taking a look at some

00:03:38,430 --> 00:03:42,780
of the screenshot libraries their source

00:03:40,800 --> 00:03:44,700
codes I realized that there actually

00:03:42,780 --> 00:03:47,070
wasn't that much code going on in them

00:03:44,700 --> 00:03:49,670
so I decided why not i'm going to write

00:03:47,070 --> 00:03:52,080
one myself which is always a bad idea I

00:03:49,670 --> 00:03:55,800
came up with a process of how I thought

00:03:52,080 --> 00:03:57,540
I wanted my tests to work number one I

00:03:55,800 --> 00:04:01,170
wanted a way to somehow automatically

00:03:57,540 --> 00:04:03,870
visit pages of our site so the test

00:04:01,170 --> 00:04:07,080
would in an actual browser hit each page

00:04:03,870 --> 00:04:09,240
of our site on a local server once the

00:04:07,080 --> 00:04:11,790
test visited the page I wanted the test

00:04:09,240 --> 00:04:13,500
to take a screenshot of that page the

00:04:11,790 --> 00:04:14,580
important bit for the screenshot is that

00:04:13,500 --> 00:04:17,280
I'd wanted to take a screenshot of the

00:04:14,580 --> 00:04:19,980
entire page not just the current view

00:04:17,280 --> 00:04:21,390
port of the browser for example if a

00:04:19,980 --> 00:04:22,980
change happened below the fold of our

00:04:21,390 --> 00:04:24,630
site but we weren't taking full-page

00:04:22,980 --> 00:04:28,140
screenshots we wouldn't be able to

00:04:24,630 --> 00:04:29,910
capture the diff down there next I need

00:04:28,140 --> 00:04:32,040
us I need somewhere to store these

00:04:29,910 --> 00:04:33,570
shots and I need a way to upload and

00:04:32,040 --> 00:04:37,260
download these screenshots from that

00:04:33,570 --> 00:04:39,360
storage area so using get every time I

00:04:37,260 --> 00:04:40,830
made a push to a branch I'd upload a

00:04:39,360 --> 00:04:44,280
screenshot of the current state of each

00:04:40,830 --> 00:04:46,590
page including our master branch and if

00:04:44,280 --> 00:04:48,090
I had a screenshot already uploaded to

00:04:46,590 --> 00:04:51,030
our storage area from our master branch

00:04:48,090 --> 00:04:52,650
I need a way to upload my current

00:04:51,030 --> 00:04:54,570
features branch to that storage area and

00:04:52,650 --> 00:04:58,950
download my already uploaded master

00:04:54,570 --> 00:05:00,660
screenshot from that storage area I then

00:04:58,950 --> 00:05:03,690
need a way to make a diff of my

00:05:00,660 --> 00:05:05,490
screenshots I'd want to diff between a

00:05:03,690 --> 00:05:07,170
screenshot I took on master downloaded

00:05:05,490 --> 00:05:10,590
from our storage area and the newest

00:05:07,170 --> 00:05:12,510
screenshot I took on my future branch so

00:05:10,590 --> 00:05:14,220
if i have the previous screen shot i

00:05:12,510 --> 00:05:16,440
took which would be the current commit

00:05:14,220 --> 00:05:19,620
commit on master vs my branches

00:05:16,440 --> 00:05:20,760
screenshot i need a way to mark the

00:05:19,620 --> 00:05:22,620
differences between those two

00:05:20,760 --> 00:05:26,550
screenshots visually so in here it's the

00:05:22,620 --> 00:05:28,170
header finally after i have just for all

00:05:26,550 --> 00:05:30,150
my screenshots i need a way to view the

00:05:28,170 --> 00:05:32,220
diffs even though i'll have a place to

00:05:30,150 --> 00:05:33,570
upload them i did an accessible way for

00:05:32,220 --> 00:05:36,690
everyone on the project to view the diff

00:05:33,570 --> 00:05:38,640
screenshots depending on the commit so

00:05:36,690 --> 00:05:39,930
now we have a plan we can start building

00:05:38,640 --> 00:05:43,950
out our framework or on these things

00:05:39,930 --> 00:05:46,770
that we need we need a way to write some

00:05:43,950 --> 00:05:48,740
specs that will automatically run after

00:05:46,770 --> 00:05:51,600
each push so we decided to use our spec

00:05:48,740 --> 00:05:53,490
our spec is a testing tool for the Ruby

00:05:51,600 --> 00:05:55,590
programming language we already had our

00:05:53,490 --> 00:05:56,850
spec for our tests in our rails app so

00:05:55,590 --> 00:06:00,720
writing these tests with our spec made

00:05:56,850 --> 00:06:02,610
sense we wanted to be able to write

00:06:00,720 --> 00:06:05,270
specs that look just like this where

00:06:02,610 --> 00:06:09,990
we'd be able to navigate to a local URL

00:06:05,270 --> 00:06:11,640
and save a screenshot of that page we

00:06:09,990 --> 00:06:15,780
also wanted to these tests to be

00:06:11,640 --> 00:06:17,370
separate from our main tests we pulled

00:06:15,780 --> 00:06:20,040
out these visual specs into their own

00:06:17,370 --> 00:06:22,140
r-spec tag that way these specs wouldn't

00:06:20,040 --> 00:06:23,640
run with our main specs when we're

00:06:22,140 --> 00:06:26,130
running the sweet locally unless we

00:06:23,640 --> 00:06:27,690
explicitly asked it to this also made it

00:06:26,130 --> 00:06:30,900
so we could break out our specs on our

00:06:27,690 --> 00:06:33,390
CI we want on our visual specs to be

00:06:30,900 --> 00:06:36,570
separate for a few reasons number one

00:06:33,390 --> 00:06:38,130
our local build speed if our tell if our

00:06:36,570 --> 00:06:39,479
local tests were bogged down by waiting

00:06:38,130 --> 00:06:41,820
for visual specs that would become a

00:06:39,479 --> 00:06:42,860
huge issue by having them broken out we

00:06:41,820 --> 00:06:44,569
get iterate on our mains

00:06:42,860 --> 00:06:47,659
Beck's faster and be able to push out

00:06:44,569 --> 00:06:50,330
more often number two is speed with our

00:06:47,659 --> 00:06:52,310
CI tests we wanted our main specs to

00:06:50,330 --> 00:06:54,409
still be fast on our CI so that we could

00:06:52,310 --> 00:06:56,889
merge non-visual pull requests without

00:06:54,409 --> 00:07:00,080
waiting for our visual specs to finish

00:06:56,889 --> 00:07:01,819
CI or continuous integration is a way

00:07:00,080 --> 00:07:03,550
for us to automatically run our test

00:07:01,819 --> 00:07:06,680
suite when we push things to github and

00:07:03,550 --> 00:07:08,509
after our specs run on our CI we're able

00:07:06,680 --> 00:07:12,439
to see if our build or is passing or not

00:07:08,509 --> 00:07:13,699
I also learned that github just released

00:07:12,439 --> 00:07:16,849
a new feature where you can split out

00:07:13,699 --> 00:07:18,409
your build so thanks github so now we'll

00:07:16,849 --> 00:07:20,569
be able to split out our visual specs

00:07:18,409 --> 00:07:22,460
from our main specs here and so we can

00:07:20,569 --> 00:07:24,620
quickly see which build is passing or

00:07:22,460 --> 00:07:28,219
failing or still running without the

00:07:24,620 --> 00:07:30,800
builds being combined at bugs now we

00:07:28,219 --> 00:07:33,110
used build box for our CI build box

00:07:30,800 --> 00:07:34,639
allows us to add steps to our tests that

00:07:33,110 --> 00:07:37,639
way we can run our main specs first

00:07:34,639 --> 00:07:39,050
apart from our visual specs and when

00:07:37,639 --> 00:07:41,719
they're separate our visual specs don't

00:07:39,050 --> 00:07:43,669
slow down our main specs and we converge

00:07:41,719 --> 00:07:48,469
non-visual pull requests without waiting

00:07:43,669 --> 00:07:50,180
for our visual specs to finish next we

00:07:48,469 --> 00:07:52,279
needed a way to visit pages and take

00:07:50,180 --> 00:07:55,430
screen shots with our r-spec tests for

00:07:52,279 --> 00:07:57,020
that we decided to use selenium selenium

00:07:55,430 --> 00:07:59,150
is a tool for automating browsers for

00:07:57,020 --> 00:08:02,150
testing purposes we would need to use

00:07:59,150 --> 00:08:03,379
specifically their webdriver API this

00:08:02,150 --> 00:08:05,089
would allow us to drive a browser

00:08:03,379 --> 00:08:07,310
natively on a local or remote machine

00:08:05,089 --> 00:08:10,759
and more specifically this provides an

00:08:07,310 --> 00:08:12,740
API between us and the browser to use

00:08:10,759 --> 00:08:15,620
selenium we need to use the service like

00:08:12,740 --> 00:08:17,569
soft labs or browser stack since we are

00:08:15,620 --> 00:08:19,430
using a CI it doesn't just have browsers

00:08:17,569 --> 00:08:20,719
built-in on the server we'd either have

00:08:19,430 --> 00:08:21,889
to set up our own virtual machines for

00:08:20,719 --> 00:08:24,020
these browsers or use one of these

00:08:21,889 --> 00:08:27,949
services so we ended up trying browser

00:08:24,020 --> 00:08:29,900
stack before our visual tests we need to

00:08:27,949 --> 00:08:32,120
start our proxy to browser stack and a

00:08:29,900 --> 00:08:33,349
fork trail server and then we need to

00:08:32,120 --> 00:08:35,659
make an instance of our selenium

00:08:33,349 --> 00:08:36,860
webdriver and then of course after all

00:08:35,659 --> 00:08:40,039
of our tests we would terminate these

00:08:36,860 --> 00:08:42,560
services we also had to allow but web

00:08:40,039 --> 00:08:45,290
mock web mock is a library for stubbing

00:08:42,560 --> 00:08:47,990
and setting expectations on HTTP

00:08:45,290 --> 00:08:50,269
requests in Ruby this is to run what

00:08:47,990 --> 00:08:53,350
real web requests in order to use our

00:08:50,269 --> 00:08:56,020
local servers and upload our screenshots

00:08:53,350 --> 00:08:57,250
to get our browserstack proxy running we

00:08:56,020 --> 00:08:59,290
would just bought a new browser stuck

00:08:57,250 --> 00:09:02,650
process and terminate the process using

00:08:59,290 --> 00:09:04,060
its assigned PID and to get our rail

00:09:02,650 --> 00:09:05,680
server running we would just spin up a

00:09:04,060 --> 00:09:07,420
new rails process at four three thousand

00:09:05,680 --> 00:09:09,100
unless one was currently running and

00:09:07,420 --> 00:09:12,700
terminated the same way as our browser

00:09:09,100 --> 00:09:14,230
stack process to set up our selenium

00:09:12,700 --> 00:09:15,940
webdriver ways have to pass with the

00:09:14,230 --> 00:09:18,580
capabilities we wanted like the browser

00:09:15,940 --> 00:09:21,730
information and a URL to hit which was

00:09:18,580 --> 00:09:23,530
pointed up our browser stack setting up

00:09:21,730 --> 00:09:25,420
our silentium driver was easy but when

00:09:23,530 --> 00:09:26,620
we were setting it up we did learn some

00:09:25,420 --> 00:09:29,380
interesting things about taking

00:09:26,620 --> 00:09:31,450
screenshots with different browsers with

00:09:29,380 --> 00:09:33,820
our web driver we wanted to hit pages in

00:09:31,450 --> 00:09:35,440
a trail browser and be able to take

00:09:33,820 --> 00:09:38,140
screenshots of the full page not just

00:09:35,440 --> 00:09:39,760
the current viewport unfortunately this

00:09:38,140 --> 00:09:42,580
feature only works in firefox which is

00:09:39,760 --> 00:09:43,840
not ideal since internet explorer and

00:09:42,580 --> 00:09:45,250
chrome didn't work we couldn't really

00:09:43,840 --> 00:09:47,080
transform this framework we were making

00:09:45,250 --> 00:09:49,060
to be used for browser compatibility or

00:09:47,080 --> 00:09:50,710
anything like that although this was an

00:09:49,060 --> 00:09:53,040
ideal for our purposes right now is

00:09:50,710 --> 00:09:55,480
we're factoring tool Firefox works fine

00:09:53,040 --> 00:09:57,610
after writing our tests for static pages

00:09:55,480 --> 00:09:59,020
such as our homepage we quickly realized

00:09:57,610 --> 00:10:02,170
that we'd have an issue with the dynamic

00:09:59,020 --> 00:10:04,120
data on our dashboard with dynamic data

00:10:02,170 --> 00:10:05,380
you can get false positive diffs because

00:10:04,120 --> 00:10:08,020
data can change between the viewing

00:10:05,380 --> 00:10:10,000
times to combat this we set up picture

00:10:08,020 --> 00:10:11,770
data for our r-spec tests and manually

00:10:10,000 --> 00:10:13,690
adjusted any other data not covered by

00:10:11,770 --> 00:10:15,520
fixtures using selenium JavaScript

00:10:13,690 --> 00:10:19,240
support so that we don't get a false

00:10:15,520 --> 00:10:21,250
positive diff okay now we have our test

00:10:19,240 --> 00:10:22,690
taking screenshots we need to figure out

00:10:21,250 --> 00:10:25,000
a way to make a diff between two of our

00:10:22,690 --> 00:10:27,910
screenshots a magic worked perfectly for

00:10:25,000 --> 00:10:29,770
this despite having literally one of the

00:10:27,910 --> 00:10:32,170
worst sights I've ever seen imagemagick

00:10:29,770 --> 00:10:34,360
did exactly what we needed imagemagick

00:10:32,170 --> 00:10:37,330
is a tool to convert edit and compare

00:10:34,360 --> 00:10:39,340
images image odjick has a command line

00:10:37,330 --> 00:10:41,290
compare tool that with very various

00:10:39,340 --> 00:10:43,660
options enabled allows us to shell out

00:10:41,290 --> 00:10:46,630
and produce diff screenshots based on to

00:10:43,660 --> 00:10:48,340
other screenshots for example when we

00:10:46,630 --> 00:10:51,220
make a simple change to the Heather to

00:10:48,340 --> 00:10:53,650
the header I tragic would spot those

00:10:51,220 --> 00:10:57,190
differences and produce a screenshot

00:10:53,650 --> 00:10:58,720
like that Emma Dragic has a lot of

00:10:57,190 --> 00:11:00,490
options you can pass to its compare tool

00:10:58,720 --> 00:11:03,160
and we take advantage of a few of these

00:11:00,490 --> 00:11:04,540
options in order to make it work let's

00:11:03,160 --> 00:11:05,770
go back to those options we use for a

00:11:04,540 --> 00:11:07,529
second and go over how they actually

00:11:05,770 --> 00:11:09,910
work with what we're doing

00:11:07,529 --> 00:11:11,920
image objects compare tool from their

00:11:09,910 --> 00:11:13,360
website mathematically and visually

00:11:11,920 --> 00:11:15,970
annotates the differences between an

00:11:13,360 --> 00:11:18,550
image and its reconstruction or in my

00:11:15,970 --> 00:11:22,149
turn terms takes two images and provides

00:11:18,550 --> 00:11:23,830
a Jeff compare lets you provide a metric

00:11:22,149 --> 00:11:25,240
that outputs to a standard error a

00:11:23,830 --> 00:11:27,550
measure of the difference is between

00:11:25,240 --> 00:11:30,880
images according to a type of given

00:11:27,550 --> 00:11:33,640
metric here we're using pae where PA e

00:11:30,880 --> 00:11:35,140
stands for peak absolute we can use the

00:11:33,640 --> 00:11:37,390
peak absolute to find the size of the

00:11:35,140 --> 00:11:41,170
fuzz factor needed to make all pixels

00:11:37,390 --> 00:11:43,980
similar so if we had screenshot 1 and

00:11:41,170 --> 00:11:46,120
screenshot to that are pretty different

00:11:43,980 --> 00:11:49,630
it would end up producing a diff like

00:11:46,120 --> 00:11:51,040
this and our Peaks peak absolute

00:11:49,630 --> 00:11:53,110
measurement would be outputted as

00:11:51,040 --> 00:11:56,740
needing a huge fuss factor to make all

00:11:53,110 --> 00:11:58,300
pixels similar the fuzz factor can be

00:11:56,740 --> 00:11:59,830
important in case we want to ignore

00:11:58,300 --> 00:12:02,380
pixels which only change by a slight

00:11:59,830 --> 00:12:04,600
amount we might want to ignore small

00:12:02,380 --> 00:12:06,760
changes in case of false positives for

00:12:04,600 --> 00:12:08,529
example I've had false positives before

00:12:06,760 --> 00:12:11,589
because gradients rendered slightly

00:12:08,529 --> 00:12:13,450
differently between two images we don't

00:12:11,589 --> 00:12:14,620
actually use this output right now but

00:12:13,450 --> 00:12:15,760
it would be important if you wanted to

00:12:14,620 --> 00:12:17,529
make an assertion in your tests

00:12:15,760 --> 00:12:19,959
meaningful like actually have a failure

00:12:17,529 --> 00:12:20,950
if a diff was produced we didn't end up

00:12:19,959 --> 00:12:22,630
doing that because it doesn't

00:12:20,950 --> 00:12:23,950
necessarily mean something's wrong if a

00:12:22,630 --> 00:12:28,089
diff is produced it just means

00:12:23,950 --> 00:12:29,500
something's change a few times when we

00:12:28,089 --> 00:12:32,350
were running our specs we notice that

00:12:29,500 --> 00:12:33,760
dips weren't even being produced we took

00:12:32,350 --> 00:12:34,720
a look at the screenshots and realize

00:12:33,760 --> 00:12:37,060
that they were different heights or

00:12:34,720 --> 00:12:38,730
sizes for some reason like if we made a

00:12:37,060 --> 00:12:41,079
change to accidentally remove the footer

00:12:38,730 --> 00:12:42,640
Emma Dragic wouldn't let us do a default

00:12:41,079 --> 00:12:45,790
compare on these images so we had to use

00:12:42,640 --> 00:12:47,920
a sub image search sub image searching

00:12:45,790 --> 00:12:50,230
is required to have compared search for

00:12:47,920 --> 00:12:52,390
the best match location of a small image

00:12:50,230 --> 00:12:54,279
within a larger image this option will

00:12:52,390 --> 00:12:56,050
produce two different images or two

00:12:54,279 --> 00:12:57,610
frames is what they call them the first

00:12:56,050 --> 00:12:59,290
is the diff image is which is the one

00:12:57,610 --> 00:13:01,720
we're going to be using and the second

00:12:59,290 --> 00:13:03,220
would be the match score image match

00:13:01,720 --> 00:13:06,160
score image isn't really important to us

00:13:03,220 --> 00:13:08,079
but it's an image that's a smaller image

00:13:06,160 --> 00:13:10,870
containing a pixel for every possible

00:13:08,079 --> 00:13:13,120
position of the top left corner of the

00:13:10,870 --> 00:13:14,980
given sub image the search will try to

00:13:13,120 --> 00:13:17,320
compare the sub image at every possible

00:13:14,980 --> 00:13:18,970
location in the larger image this can

00:13:17,320 --> 00:13:20,590
make sub image searching very slow as

00:13:18,970 --> 00:13:23,080
you could guess the smaller

00:13:20,590 --> 00:13:26,860
some of the sub images the faster this

00:13:23,080 --> 00:13:28,450
search is that being said this option

00:13:26,860 --> 00:13:30,400
doesn't take effect unless you have two

00:13:28,450 --> 00:13:32,050
images that are different sizes this

00:13:30,400 --> 00:13:33,730
doesn't happen very often to us so the

00:13:32,050 --> 00:13:34,990
amount it slows down our visual specs on

00:13:33,730 --> 00:13:37,270
CI isn't really meaningful to us

00:13:34,990 --> 00:13:40,540
especially since those specs aren't tied

00:13:37,270 --> 00:13:42,160
to our main specs another fun thing we

00:13:40,540 --> 00:13:44,170
ran into is sometimes our screen shots

00:13:42,160 --> 00:13:47,560
were completely different like

00:13:44,170 --> 00:13:50,020
completely different and imagemagick was

00:13:47,560 --> 00:13:51,820
not into it in fact it just wouldn't

00:13:50,020 --> 00:13:54,340
even give us a diff because the images

00:13:51,820 --> 00:13:56,140
were so different without an option

00:13:54,340 --> 00:13:58,660
called the dissimilarity threshold which

00:13:56,140 --> 00:14:00,370
I find kind of weird this thrush will

00:13:58,660 --> 00:14:02,440
determine how different two images could

00:14:00,370 --> 00:14:04,840
be in order to dip them it's he faulted

00:14:02,440 --> 00:14:07,690
2.2 so I just made it one and it seemed

00:14:04,840 --> 00:14:09,220
to do the trick the only caveat as you

00:14:07,690 --> 00:14:10,180
might get as you might have guessed is

00:14:09,220 --> 00:14:11,860
doing dips on completely different

00:14:10,180 --> 00:14:14,020
images can slow down your test by a lot

00:14:11,860 --> 00:14:15,220
like our previous issue with some image

00:14:14,020 --> 00:14:17,260
searching this doesn't seem to happen

00:14:15,220 --> 00:14:19,030
much and since the tests are separate

00:14:17,260 --> 00:14:21,340
from our main specs we weren't worried

00:14:19,030 --> 00:14:22,570
about it plus the arguments aren't very

00:14:21,340 --> 00:14:25,600
exciting just where our current

00:14:22,570 --> 00:14:28,420
screenshot is located where our master

00:14:25,600 --> 00:14:31,360
screenshot is located and where we want

00:14:28,420 --> 00:14:35,200
the diff to save to okay now that we're

00:14:31,360 --> 00:14:36,730
done with that stuff we had now that we

00:14:35,200 --> 00:14:37,990
had our screenshots in our diffs we

00:14:36,730 --> 00:14:40,180
needed somewhere to actually throw the

00:14:37,990 --> 00:14:41,830
screenshots online and be able to grab

00:14:40,180 --> 00:14:45,340
them back out with our rails app so we

00:14:41,830 --> 00:14:47,470
decided to use AWS AWS or Amazon Web

00:14:45,340 --> 00:14:49,570
Services offers cloud storage and has a

00:14:47,470 --> 00:14:52,840
ruby API so we'll store and retrieve our

00:14:49,570 --> 00:14:54,310
screenshots from one of their buckets we

00:14:52,840 --> 00:14:57,400
ended up using a naming pattern of

00:14:54,310 --> 00:15:00,460
commits sha area of site page name and

00:14:57,400 --> 00:15:02,650
image type so for example we could have

00:15:00,460 --> 00:15:04,900
a commit show of a 1a 1a 1a very

00:15:02,650 --> 00:15:06,940
realistic I know where we're on our

00:15:04,900 --> 00:15:09,100
marketing part of our site on the index

00:15:06,940 --> 00:15:12,160
page and we're uploading the diff for

00:15:09,100 --> 00:15:13,690
that page the image types could be the

00:15:12,160 --> 00:15:16,270
current screenshot we took the master

00:15:13,690 --> 00:15:19,500
screenshot we downloaded from s3 or the

00:15:16,270 --> 00:15:19,500
diff we made of the two screenshots

00:15:19,530 --> 00:15:23,620
viewing the screenshots from an amazon

00:15:21,670 --> 00:15:25,360
bucket was far less than ideal so we

00:15:23,620 --> 00:15:28,360
decided to set up our own custom viewing

00:15:25,360 --> 00:15:29,680
page in our admin dashboard we created a

00:15:28,360 --> 00:15:32,570
page that listed out our current

00:15:29,680 --> 00:15:34,070
branches with our last three commits

00:15:32,570 --> 00:15:36,170
and when you would click through it

00:15:34,070 --> 00:15:37,490
would show you by area all of your

00:15:36,170 --> 00:15:41,060
screenshots and dips which is our end

00:15:37,490 --> 00:15:42,980
goal we did it however our tool is not

00:15:41,060 --> 00:15:46,300
perfect right now it's certainly better

00:15:42,980 --> 00:15:49,340
than what we had which was nothing but

00:15:46,300 --> 00:15:51,410
right now all of our tests pass whether

00:15:49,340 --> 00:15:53,570
or not there's a diff the only failed

00:15:51,410 --> 00:15:54,710
there's an issue executing the test it

00:15:53,570 --> 00:15:56,540
could be interesting to make our

00:15:54,710 --> 00:15:58,580
assertions mean something like fail if

00:15:56,540 --> 00:16:00,290
there's a diff we need to think more

00:15:58,580 --> 00:16:01,790
about that because a diff like like I

00:16:00,290 --> 00:16:06,050
said earlier it doesn't necessarily mean

00:16:01,790 --> 00:16:08,840
a failure to us and the future it might

00:16:06,050 --> 00:16:11,120
also be nice to account for 0% diffs so

00:16:08,840 --> 00:16:12,800
maybe we shouldn't upload a diff image

00:16:11,120 --> 00:16:15,770
at all if there's no diff between images

00:16:12,800 --> 00:16:17,750
this could save a space on AWS bucket as

00:16:15,770 --> 00:16:19,070
well speed up our tests because we're

00:16:17,750 --> 00:16:21,290
trying to upload for your screenshots

00:16:19,070 --> 00:16:25,100
and it would make our admin dashboard

00:16:21,290 --> 00:16:26,600
less noisy we also think it would be

00:16:25,100 --> 00:16:29,840
nice to automatically link these two a

00:16:26,600 --> 00:16:31,790
github pull request so when a diff is

00:16:29,840 --> 00:16:33,590
created maybe automatically attach it

00:16:31,790 --> 00:16:35,570
onto its relevant pull request this

00:16:33,590 --> 00:16:36,620
sounds a little tricky because maybe we

00:16:35,570 --> 00:16:38,780
don't want to create that much noise

00:16:36,620 --> 00:16:41,810
every time we push but it's an idea

00:16:38,780 --> 00:16:43,910
something we need to think about another

00:16:41,810 --> 00:16:45,410
thing is that we currently only diff

00:16:43,910 --> 00:16:48,410
between our current commit on a branch

00:16:45,410 --> 00:16:51,500
and versus our most recent commit on

00:16:48,410 --> 00:16:53,570
that sir so when we push a new commit to

00:16:51,500 --> 00:16:55,400
our branch it'll diff versus the last

00:16:53,570 --> 00:16:57,410
thing that we push to mash to master

00:16:55,400 --> 00:16:59,240
this way we know what's changed between

00:16:57,410 --> 00:17:01,850
the future I'm working on and what's

00:16:59,240 --> 00:17:03,500
currently running in production it would

00:17:01,850 --> 00:17:05,329
be nice if we could dip on master with

00:17:03,500 --> 00:17:08,030
the current most recent commit and its

00:17:05,329 --> 00:17:09,560
previous commitment so that way in cush

00:17:08,030 --> 00:17:11,240
in case you push a visual change

00:17:09,560 --> 00:17:15,110
directly to master which don't do that

00:17:11,240 --> 00:17:16,640
you could still see a dip for it it

00:17:15,110 --> 00:17:18,170
would also be nice to see a diff between

00:17:16,640 --> 00:17:21,410
the previous commit on the current

00:17:18,170 --> 00:17:23,510
branch as well like if you push to

00:17:21,410 --> 00:17:25,339
commit to your branch that changes some

00:17:23,510 --> 00:17:26,750
stuff visually you might want to see a

00:17:25,339 --> 00:17:30,050
dip between those two regardless of

00:17:26,750 --> 00:17:31,340
what's happening on master it also

00:17:30,050 --> 00:17:33,710
really love to get this hooked up to

00:17:31,340 --> 00:17:35,030
more browsers that would really enable

00:17:33,710 --> 00:17:36,560
us to make this into a backwards

00:17:35,030 --> 00:17:38,000
compatibility tool as well as an

00:17:36,560 --> 00:17:40,090
automatic browser comparison to make

00:17:38,000 --> 00:17:42,770
sure things aren't messed up in IE

00:17:40,090 --> 00:17:44,300
thanks that's all I have and feel free

00:17:42,770 --> 00:17:45,140
to ask me questions after a few

00:17:44,300 --> 00:17:47,200
interesting

00:17:45,140 --> 00:17:47,200

YouTube URL: https://www.youtube.com/watch?v=ItyUjVWl4q8


