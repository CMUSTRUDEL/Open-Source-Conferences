Title: CSSConf Oakland 2014 | Tab Atkins: The Future of CSS
Publication date: 2015-01-25
Playlist: CSSConf Oakland 2014
Description: 
	Designing a page's layout in CSS has traditionally been a hard problem, though developers have come up with a lot of amazing hacks. Today, and in the near future, much of this pain will disappear, as CSS introduces new layout specs, like Flexbox and Grid, and other layout tools, like the Sizing and Alignment specs. This session will explore some of the new abilities enabled by CSS's new layout specs, introducing you to techniques that can you can apply today (depending on your required browser support) and in the near future, as browsers continue to implement these new specs.

TAB ATKINS

Tab Atkins Jr. works as a spec hacker for Google, mainly working with HTML and CSS specifications. Also a member of the Chrome team, though his code contribution is fairly minimal.

http://www.xanthir.com/
https://twitter.com/tabatkins
Captions: 
	00:00:00,000 --> 00:00:07,710
oh alrights just verifying am i heard

00:00:06,240 --> 00:00:09,210
yeah okay it's going to keep this coming

00:00:07,710 --> 00:00:10,860
close to nut all right all right so

00:00:09,210 --> 00:00:12,660
hello everybody I'm tab Atkins I work

00:00:10,860 --> 00:00:14,910
for Google I am a member of the CSS

00:00:12,660 --> 00:00:17,250
working group and a number of other spec

00:00:14,910 --> 00:00:18,990
working groups and I've been doing specs

00:00:17,250 --> 00:00:21,900
for six or seven years now it's

00:00:18,990 --> 00:00:23,609
disappears to be my passion is a number

00:00:21,900 --> 00:00:24,630
of links up there and whatnot if you

00:00:23,609 --> 00:00:25,949
want to follow the slides there's a

00:00:24,630 --> 00:00:27,960
couple of useful links in them that you

00:00:25,949 --> 00:00:29,490
can click on I don't have the URLs

00:00:27,960 --> 00:00:32,130
visible so you want to click on them

00:00:29,490 --> 00:00:33,540
that's the talk today or you just go to

00:00:32,130 --> 00:00:37,790
slash talks and choose the one with the

00:00:33,540 --> 00:00:40,590
right date so I'm going to once this

00:00:37,790 --> 00:00:42,540
talk today about the future of CSS this

00:00:40,590 --> 00:00:46,079
is a smaller screen so it's even more

00:00:42,540 --> 00:00:47,789
here than you even know or at least a

00:00:46,079 --> 00:00:51,899
little bit of it a lot of specs that

00:00:47,789 --> 00:00:53,610
I've worked on that I have been excited

00:00:51,899 --> 00:00:55,110
about for the last several years and I

00:00:53,610 --> 00:00:56,309
have a lot of stuff and not a lot of

00:00:55,110 --> 00:00:58,920
time so we'll be going through pretty

00:00:56,309 --> 00:01:00,989
quickly here this is not meant to be a

00:00:58,920 --> 00:01:02,969
let's learn about lots of stuff deep

00:01:00,989 --> 00:01:04,470
dive it's just a here's a bunch of cool

00:01:02,969 --> 00:01:06,689
stuff I will mention one sentence about

00:01:04,470 --> 00:01:08,490
each of them more or less and you can

00:01:06,689 --> 00:01:10,619
learn more about them later just to get

00:01:08,490 --> 00:01:14,430
you excited let you know the landscape

00:01:10,619 --> 00:01:17,700
of the stuff i swear i can get this

00:01:14,430 --> 00:01:21,810
working oh that's better okay cool so

00:01:17,700 --> 00:01:23,400
we're going to start with image values

00:01:21,810 --> 00:01:25,590
this was actually my very first spec

00:01:23,400 --> 00:01:26,970
when i started working on CSS it was the

00:01:25,590 --> 00:01:29,280
thing that got me into the working group

00:01:26,970 --> 00:01:31,770
I was like web kits original gradient

00:01:29,280 --> 00:01:33,450
function is I can make a better

00:01:31,770 --> 00:01:34,799
grammar for it and I did and they were

00:01:33,450 --> 00:01:38,939
like why don't you just write the spec

00:01:34,799 --> 00:01:39,960
you basically already done so so some of

00:01:38,939 --> 00:01:42,060
the new things are showing up here

00:01:39,960 --> 00:01:45,060
exciting one is the image function a

00:01:42,060 --> 00:01:46,619
souped-up URL three examples of

00:01:45,060 --> 00:01:48,930
functionality right here that lets you

00:01:46,619 --> 00:01:51,810
do just a small bits that are worthwhile

00:01:48,930 --> 00:01:56,090
the first one shows off fall back to a

00:01:51,810 --> 00:01:58,649
color if you have so you have a light

00:01:56,090 --> 00:02:00,360
website background dark buttons with

00:01:58,649 --> 00:02:02,250
white text on them you're using a dark

00:02:00,360 --> 00:02:04,560
background image so that the white text

00:02:02,250 --> 00:02:06,630
offsets nicely but if that image 404s

00:02:04,560 --> 00:02:08,610
you're screwed white text on to a white

00:02:06,630 --> 00:02:10,770
background because there's no nothing

00:02:08,610 --> 00:02:12,390
the contrast against anymore you can use

00:02:10,770 --> 00:02:13,500
the image function once it's implemented

00:02:12,390 --> 00:02:15,540
to say if the

00:02:13,500 --> 00:02:18,210
image doesn't load just go ahead and

00:02:15,540 --> 00:02:20,130
make a color for me it's good enough so

00:02:18,210 --> 00:02:21,060
instead of a dark background image that

00:02:20,130 --> 00:02:24,390
you would like you'll have a black

00:02:21,060 --> 00:02:27,300
square better than nothing the second

00:02:24,390 --> 00:02:29,880
one is just straight-up color images

00:02:27,300 --> 00:02:31,860
easy way to generate if you ever needed

00:02:29,880 --> 00:02:33,570
solid color images right now you can do

00:02:31,860 --> 00:02:34,680
so with linear gradient you just repeat

00:02:33,570 --> 00:02:36,390
your color twice and it kind of

00:02:34,680 --> 00:02:38,010
generates it but that's a kind of a

00:02:36,390 --> 00:02:39,840
weird hack image lets you go more

00:02:38,010 --> 00:02:41,430
directly you just leave off the URL and

00:02:39,840 --> 00:02:43,110
the color that's left there will

00:02:41,430 --> 00:02:45,510
generate a solid color image for you in

00:02:43,110 --> 00:02:46,980
this particular case I am blue tinting a

00:02:45,510 --> 00:02:49,440
background by putting a partially

00:02:46,980 --> 00:02:52,739
transparent blue image on top of another

00:02:49,440 --> 00:02:54,780
background image the third one if you've

00:02:52,739 --> 00:02:57,480
heard about everybody's used image

00:02:54,780 --> 00:03:00,750
spriting at some point this shows off a

00:02:57,480 --> 00:03:03,209
syntax for media fragments that lets you

00:03:00,750 --> 00:03:04,500
do image spriting directly this rather

00:03:03,209 --> 00:03:05,940
than having to do weird hacks with

00:03:04,500 --> 00:03:07,860
background position and background size

00:03:05,940 --> 00:03:10,700
you can literally say load up this

00:03:07,860 --> 00:03:12,930
sprite sheet food up PNG and give me the

00:03:10,700 --> 00:03:14,400
rectangle with these coordinates that's

00:03:12,930 --> 00:03:18,000
the image I want gives you the correct

00:03:14,400 --> 00:03:19,940
size let's a repeat etc the problem is

00:03:18,000 --> 00:03:22,830
though that if a browser doesn't support

00:03:19,940 --> 00:03:23,940
media fragments it'll just show you the

00:03:22,830 --> 00:03:26,580
whole sprite sheet will mess everything

00:03:23,940 --> 00:03:29,700
up image requires the browser to

00:03:26,580 --> 00:03:33,480
understand the syntax of the hash or

00:03:29,700 --> 00:03:35,730
else it will just fail so you can use

00:03:33,480 --> 00:03:37,320
this kind of thing safely older browsers

00:03:35,730 --> 00:03:39,120
will just ignore it ones that don't

00:03:37,320 --> 00:03:40,890
understand the fragment syntax if we

00:03:39,120 --> 00:03:42,630
introduce new fragments in Texas or new

00:03:40,890 --> 00:03:44,760
types of things to images in the future

00:03:42,630 --> 00:03:49,650
same thing it'll let you do fall back at

00:03:44,760 --> 00:03:51,209
the syntax level very nicely next up is

00:03:49,650 --> 00:03:52,950
the image set function this has been

00:03:51,209 --> 00:03:56,510
around for a while it was introduced by

00:03:52,950 --> 00:03:59,430
WebKit in the before chrome forked from

00:03:56,510 --> 00:04:01,470
the codebase if you're familiar with the

00:03:59,430 --> 00:04:03,150
picture element and the image source set

00:04:01,470 --> 00:04:05,190
attribute that I've also worked on a bit

00:04:03,150 --> 00:04:07,260
this does similar functionality there

00:04:05,190 --> 00:04:09,090
right now it does just the basic stuff

00:04:07,260 --> 00:04:10,980
you give a URL you give a density it

00:04:09,090 --> 00:04:12,989
chooses which one it wants to load based

00:04:10,980 --> 00:04:14,370
on the user's screen and then

00:04:12,989 --> 00:04:18,510
potentially other things their

00:04:14,370 --> 00:04:20,370
connection speed etc in time it will be

00:04:18,510 --> 00:04:22,650
upgraded to match picture fully in

00:04:20,370 --> 00:04:25,110
functionality similar functionality to

00:04:22,650 --> 00:04:26,880
what sizes and the W descriptor does you

00:04:25,110 --> 00:04:28,860
can already use media queries

00:04:26,880 --> 00:04:30,330
just naturally in CSS to get the same

00:04:28,860 --> 00:04:34,920
functionality of art direction that

00:04:30,330 --> 00:04:37,020
picture allows etc the crossfade

00:04:34,920 --> 00:04:39,390
function lets you smoothly fade between

00:04:37,020 --> 00:04:43,950
two images this currently already works

00:04:39,390 --> 00:04:47,010
in WebKit and blink a safari and opera

00:04:43,950 --> 00:04:48,180
and chrome slightly older syntax and

00:04:47,010 --> 00:04:49,470
what's presented here and in the spec

00:04:48,180 --> 00:04:52,140
but will change to it whenever we

00:04:49,470 --> 00:04:54,990
unfreeze fun thing is this is used

00:04:52,140 --> 00:04:57,270
already by the animation CSS animations

00:04:54,990 --> 00:04:58,830
to do animation between images what I'm

00:04:57,270 --> 00:05:00,660
showing right here is literally just an

00:04:58,830 --> 00:05:02,550
animation going between for background

00:05:00,660 --> 00:05:04,920
images and it uses crossfade to

00:05:02,550 --> 00:05:08,820
automatically give you the transition

00:05:04,920 --> 00:05:15,420
behavior I don't let's not install all

00:05:08,820 --> 00:05:18,360
right cool image rendering controls how

00:05:15,420 --> 00:05:20,430
an image scales there we go the original

00:05:18,360 --> 00:05:22,530
image is there I blow it up by two times

00:05:20,430 --> 00:05:24,990
in each dimension the original they like

00:05:22,530 --> 00:05:27,360
normal behavior using a bilinear scaling

00:05:24,990 --> 00:05:29,190
looks freaking terrible because this is

00:05:27,360 --> 00:05:31,020
pixel art this kind of scaling algorithm

00:05:29,190 --> 00:05:34,470
is designed for photos and nice smooth

00:05:31,020 --> 00:05:37,260
things new values pixelated lets it keep

00:05:34,470 --> 00:05:39,450
the big chunky pixel look so it looks

00:05:37,260 --> 00:05:42,120
nice when it scales up pixel art crisp

00:05:39,450 --> 00:05:43,710
edges has the potential to do even more

00:05:42,120 --> 00:05:45,810
advanced things it's allowed to fall

00:05:43,710 --> 00:05:47,520
back to the same as pixelated but it can

00:05:45,810 --> 00:05:50,310
use advanced pixel art scaling

00:05:47,520 --> 00:05:52,530
algorithms like those pioneered by a lot

00:05:50,310 --> 00:05:54,690
of game emulators and what not to do

00:05:52,530 --> 00:05:56,280
smoother things this and i forget what

00:05:54,690 --> 00:05:58,860
exact algorithm this is an example of

00:05:56,280 --> 00:06:02,120
but it's able to infer angles and colors

00:05:58,860 --> 00:06:02,120
and whatnot for you automatically

00:06:02,300 --> 00:06:08,190
alright next spec is flexbox everybody

00:06:06,750 --> 00:06:09,570
is hopefully heard of flexbox hopefully

00:06:08,190 --> 00:06:12,030
you're already using it it's pretty

00:06:09,570 --> 00:06:14,700
widely available now so you don't have

00:06:12,030 --> 00:06:18,570
much excuse unless you're still on ie6

00:06:14,700 --> 00:06:21,930
who knows i'm not going to talk too much

00:06:18,570 --> 00:06:25,500
about this just up the main reasons for

00:06:21,930 --> 00:06:27,690
it flex box plus the next thing i'll be

00:06:25,500 --> 00:06:30,360
talking about solves basically all your

00:06:27,690 --> 00:06:31,950
layout woes there's still a few cases i

00:06:30,360 --> 00:06:33,870
want to hit up but this does ninety

00:06:31,950 --> 00:06:35,880
percent of everything you can lay out

00:06:33,870 --> 00:06:38,729
things in any direction left down

00:06:35,880 --> 00:06:40,200
upright with flex flow you can change

00:06:38,729 --> 00:06:40,710
the order of things without messing with

00:06:40,200 --> 00:06:42,960
your mark

00:06:40,710 --> 00:06:44,550
putting things in nice accessible order

00:06:42,960 --> 00:06:46,290
with your content first and add second

00:06:44,550 --> 00:06:48,360
and then just swapping them around on

00:06:46,290 --> 00:06:50,130
display you can do vertical and

00:06:48,360 --> 00:06:52,110
horizontal alignment including sintering

00:06:50,130 --> 00:06:54,210
if you're still making jokes about CSS

00:06:52,110 --> 00:06:57,480
centering you are several years out of

00:06:54,210 --> 00:07:00,090
date by now and finally flexibility

00:06:57,480 --> 00:07:02,880
allowing things to grow or shrink to

00:07:00,090 --> 00:07:04,590
fill the available space very important

00:07:02,880 --> 00:07:07,890
there's a lot of fun examples which I'll

00:07:04,590 --> 00:07:09,450
have a nice link to in a little while I

00:07:07,890 --> 00:07:11,250
really wish I could do an entire talk

00:07:09,450 --> 00:07:14,880
about flex because I love talking about

00:07:11,250 --> 00:07:17,610
that but that's not for today so the

00:07:14,880 --> 00:07:19,650
partner to flex is gridlayout flexbox is

00:07:17,610 --> 00:07:21,150
designed for linear layouts anything

00:07:19,650 --> 00:07:23,070
that's one dimensional perhaps broken

00:07:21,150 --> 00:07:24,510
across lines because you can do a

00:07:23,070 --> 00:07:27,270
multi-line flexbox but it's still

00:07:24,510 --> 00:07:29,160
essentially things in order grid is

00:07:27,270 --> 00:07:32,580
designed for two-dimensional layout what

00:07:29,160 --> 00:07:33,870
is really going on for pages basically

00:07:32,580 --> 00:07:36,840
all the things that you could do with

00:07:33,870 --> 00:07:39,090
table layout grid makes it possible to

00:07:36,840 --> 00:07:41,090
do but ridiculously easier and not

00:07:39,090 --> 00:07:45,030
terrible markup and maintainable

00:07:41,090 --> 00:07:47,400
everything's great so quick example here

00:07:45,030 --> 00:07:49,920
is one possible layout of a little game

00:07:47,400 --> 00:07:51,720
design thing title score stats board

00:07:49,920 --> 00:07:53,310
controls everybody can probably imagine

00:07:51,720 --> 00:07:55,710
how they might mark that up use floats

00:07:53,310 --> 00:07:57,690
or what not to put it into place but

00:07:55,710 --> 00:08:00,300
with grid it's literally nothing more

00:07:57,690 --> 00:08:02,340
than using a bit of ASCII art on the

00:08:00,300 --> 00:08:05,850
container to define your page markup and

00:08:02,340 --> 00:08:07,800
then telling each piece which section of

00:08:05,850 --> 00:08:10,440
the ASCII art to go into the title goes

00:08:07,800 --> 00:08:13,560
into the block a here's the real magic

00:08:10,440 --> 00:08:15,840
this is a portrait orientation taller

00:08:13,560 --> 00:08:19,110
than it is wide if you want it to handle

00:08:15,840 --> 00:08:20,820
landscape as well really easily like

00:08:19,110 --> 00:08:23,160
this layout same stuff just in a

00:08:20,820 --> 00:08:24,870
completely different arrangement all you

00:08:23,160 --> 00:08:26,040
have to do is change your Styles a

00:08:24,870 --> 00:08:29,400
little bit give a different layout

00:08:26,040 --> 00:08:30,630
they'll all sit in the same tile so you

00:08:29,400 --> 00:08:32,130
can just use a media query to

00:08:30,630 --> 00:08:34,980
drastically change the layout of your

00:08:32,130 --> 00:08:37,260
page adapting to different sizes layouts

00:08:34,980 --> 00:08:39,150
orientations etc rather than the

00:08:37,260 --> 00:08:42,900
ridiculous series of hacks that we have

00:08:39,150 --> 00:08:44,610
to do today to get the same thing if

00:08:42,900 --> 00:08:46,260
you're following along on my slides

00:08:44,610 --> 00:08:48,360
here's a bunch of great links you should

00:08:46,260 --> 00:08:50,250
follow rachel andrews grid by example is

00:08:48,360 --> 00:08:52,830
a wonderful compendium of a lot of use

00:08:50,250 --> 00:08:54,270
cases like real world places where you

00:08:52,830 --> 00:08:56,490
might use grid and how to do so

00:08:54,270 --> 00:08:58,380
examples Phillip Walt installed by

00:08:56,490 --> 00:09:01,020
flexbox is the same thing but for flex

00:08:58,380 --> 00:09:03,960
box and then CSS tricks has great grid

00:09:01,020 --> 00:09:06,270
and flexbox guides you can just google

00:09:03,960 --> 00:09:12,030
for those or follow along these links on

00:09:06,270 --> 00:09:14,610
my slides the selector spec selectors

00:09:12,030 --> 00:09:16,410
level for the first specs that was in

00:09:14,610 --> 00:09:18,620
level 4 but that's kind of not even a

00:09:16,410 --> 00:09:20,670
big thing today we have a bunch of them

00:09:18,620 --> 00:09:23,010
so touch on a few of the more

00:09:20,670 --> 00:09:24,930
interesting additions the inth child

00:09:23,010 --> 00:09:28,200
pseudo-class now does selector based

00:09:24,930 --> 00:09:30,000
indexing that first selector li foo in

00:09:28,200 --> 00:09:32,700
the child even doesn't do what you might

00:09:30,000 --> 00:09:36,360
think it finds list items that are dot

00:09:32,700 --> 00:09:38,970
foo and that are even not the even that

00:09:36,360 --> 00:09:41,130
foos you know it doesn't let you count

00:09:38,970 --> 00:09:42,990
particular things just elements

00:09:41,130 --> 00:09:45,240
themselves so you can now move the

00:09:42,990 --> 00:09:47,580
selector into the selected part that you

00:09:45,240 --> 00:09:49,410
want to be counting on into the argument

00:09:47,580 --> 00:09:51,750
of the imp child and this will now find

00:09:49,410 --> 00:09:53,400
all the lig foos and then only grab the

00:09:51,750 --> 00:09:56,280
even ones of them skipping over

00:09:53,400 --> 00:09:59,580
everything else not implemented yet but

00:09:56,280 --> 00:10:01,350
should show up in WebKit are yeah and

00:09:59,580 --> 00:10:06,930
WebKit soon so I think Safari will have

00:10:01,350 --> 00:10:09,720
this first the matches function lets you

00:10:06,930 --> 00:10:12,570
do branching in CSS I've written this

00:10:09,720 --> 00:10:14,370
kind of code all the time long selector

00:10:12,570 --> 00:10:15,660
i need to change one bit to apply it as

00:10:14,370 --> 00:10:19,110
well I have to repeat the entire thing

00:10:15,660 --> 00:10:21,420
bad for maintenance bad for reading just

00:10:19,110 --> 00:10:23,970
not a good deal all around using matches

00:10:21,420 --> 00:10:25,980
I can capture the fact that i want a TD

00:10:23,970 --> 00:10:28,650
or a th in this case and just put it

00:10:25,980 --> 00:10:30,870
directly in write a single selector fun

00:10:28,650 --> 00:10:33,570
thing to once this is well supported

00:10:30,870 --> 00:10:36,960
sass can start using this for its extend

00:10:33,570 --> 00:10:39,390
support and finally get extends to work

00:10:36,960 --> 00:10:40,980
exactly like it's supposed to right now

00:10:39,390 --> 00:10:43,710
they have to do a lot of heuristics and

00:10:40,980 --> 00:10:46,410
they drop some edge cases to avoid a

00:10:43,710 --> 00:10:48,570
giant selector explosion but matches

00:10:46,410 --> 00:10:50,640
lets them do the semantics exactly right

00:10:48,570 --> 00:10:54,240
without any explosion whatsoever you can

00:10:50,640 --> 00:10:59,810
do extend in a single nice selector

00:10:54,240 --> 00:11:02,040
without a bunch of duplication variables

00:10:59,810 --> 00:11:03,450
I've been working on variables for quite

00:11:02,040 --> 00:11:06,300
a while they've been a request for

00:11:03,450 --> 00:11:08,130
forever in CSS fun thing they work right

00:11:06,300 --> 00:11:10,440
now in Firefox if you want to

00:11:08,130 --> 00:11:13,380
load up modern Firefox and try using

00:11:10,440 --> 00:11:18,060
variables like this example right here

00:11:13,380 --> 00:11:19,800
it will work you declare a bunch of

00:11:18,060 --> 00:11:21,150
properties custom properties using

00:11:19,800 --> 00:11:22,680
whatever name you want the only

00:11:21,150 --> 00:11:24,900
requirement is they have to start with

00:11:22,680 --> 00:11:28,110
two dashes give them whatever value you

00:11:24,900 --> 00:11:30,210
want and then on any descendants of that

00:11:28,110 --> 00:11:32,550
element you can use that property's

00:11:30,210 --> 00:11:34,590
value with the VAR function in this case

00:11:32,550 --> 00:11:37,200
i'm declaring some colors for my page

00:11:34,590 --> 00:11:39,510
using them for the a and it's visited

00:11:37,200 --> 00:11:41,700
and then also using them on my h1 that

00:11:39,510 --> 00:11:43,020
way if i want to change my main color at

00:11:41,700 --> 00:11:45,120
any point i don't have to go search and

00:11:43,020 --> 00:11:49,320
replace hope I hit everything that

00:11:45,120 --> 00:11:50,790
requires it etc and I have nice names on

00:11:49,320 --> 00:11:55,260
my values and that's really important

00:11:50,790 --> 00:11:56,580
for maintainability as well oh we head

00:11:55,260 --> 00:11:58,500
back real quick like I said it works

00:11:56,580 --> 00:12:01,890
today in Firefox it works in safari but

00:11:58,500 --> 00:12:04,740
it's prefixed chrome removed our support

00:12:01,890 --> 00:12:07,200
for it that was done in WebKit because

00:12:04,740 --> 00:12:09,690
it wasn't very good and we are currently

00:12:07,200 --> 00:12:12,330
replacing our CSS parser as soon as we

00:12:09,690 --> 00:12:13,950
do that we will be able to put a good

00:12:12,330 --> 00:12:15,900
implementation of variables in so they

00:12:13,950 --> 00:12:18,210
should show up in chrome soon ish I'd

00:12:15,900 --> 00:12:23,030
say within in 2015 we should probably

00:12:18,210 --> 00:12:25,530
get one do to do to do the color spec

00:12:23,030 --> 00:12:27,210
I've always been fascinated with colors

00:12:25,530 --> 00:12:29,070
if you know me and you follow my blog I

00:12:27,210 --> 00:12:31,970
have several posts about color stuff

00:12:29,070 --> 00:12:33,930
because math and colors are just amazing

00:12:31,970 --> 00:12:37,050
so I've been working on the color

00:12:33,930 --> 00:12:40,470
spectrally a few additions that have

00:12:37,050 --> 00:12:41,940
been done from author requests for and

00:12:40,470 --> 00:12:44,220
eight digit hex colors so you can

00:12:41,940 --> 00:12:45,990
specify your alpha in your hex you don't

00:12:44,220 --> 00:12:47,790
have to change to the RGB syntax and

00:12:45,990 --> 00:12:49,370
convert your hex back into decimal just

00:12:47,790 --> 00:12:52,620
to get a partially transparent color and

00:12:49,370 --> 00:12:55,080
this functions in general are a little

00:12:52,620 --> 00:12:56,730
more consistent now alpha values except

00:12:55,080 --> 00:12:58,800
percentages right now if you specify

00:12:56,730 --> 00:13:01,110
your alpha its of number between 0 and 1

00:12:58,800 --> 00:13:03,060
rather than a percentage no idea why

00:13:01,110 --> 00:13:05,670
just people did weird things when we

00:13:03,060 --> 00:13:07,560
first invented the color functions the

00:13:05,670 --> 00:13:09,270
hue values also even though it's a

00:13:07,560 --> 00:13:10,590
degree around a circle they accept just

00:13:09,270 --> 00:13:13,200
integers right now and assume it's

00:13:10,590 --> 00:13:15,480
degrees so the new functions will accept

00:13:13,200 --> 00:13:16,920
real angles so you can use the turn unit

00:13:15,480 --> 00:13:18,650
or radians or whatever you want if you

00:13:16,920 --> 00:13:21,060
feel like it

00:13:18,650 --> 00:13:25,350
there's a few new types of colors as

00:13:21,060 --> 00:13:28,110
well HW b is a more intuitive variant of

00:13:25,350 --> 00:13:29,850
hsl easier to use you just declare your

00:13:28,110 --> 00:13:31,410
hue and then how much white and black to

00:13:29,850 --> 00:13:33,930
add to the color to get it to a

00:13:31,410 --> 00:13:36,000
different tinder or whatnot if you've

00:13:33,930 --> 00:13:38,340
used Chrome's color picker the input

00:13:36,000 --> 00:13:40,860
type equals color that color picker is

00:13:38,340 --> 00:13:42,210
an HW b picker you choose your hue from

00:13:40,860 --> 00:13:43,980
the ring then you have a triangle with

00:13:42,210 --> 00:13:46,560
the hue of the white and the black on

00:13:43,980 --> 00:13:50,340
each corner and that's exactly the color

00:13:46,560 --> 00:13:51,990
space you'd be working in with HW b the

00:13:50,340 --> 00:13:53,460
gray function lets you specify grades

00:13:51,990 --> 00:13:56,640
that repeating yourself because they

00:13:53,460 --> 00:13:59,640
have r g and b all the same you can use

00:13:56,640 --> 00:14:02,400
a percentage or specify a 0 to 255 value

00:13:59,640 --> 00:14:03,780
just like you do today in RGB and then

00:14:02,400 --> 00:14:06,690
the color function which i might

00:14:03,780 --> 00:14:08,820
probably tweak the syntax of a lot takes

00:14:06,690 --> 00:14:10,590
all the as much of the functionality as

00:14:08,820 --> 00:14:12,570
i can justify from sasses color

00:14:10,590 --> 00:14:14,700
adjusting functions and bakes them into

00:14:12,570 --> 00:14:17,010
CSS this is especially useful when

00:14:14,700 --> 00:14:18,840
you're using variables in CSS to store

00:14:17,010 --> 00:14:21,570
colors because then you can take a few

00:14:18,840 --> 00:14:24,240
base colors and produce an entire suite

00:14:21,570 --> 00:14:25,110
of colors for your site based on making

00:14:24,240 --> 00:14:34,500
them a little bit lighter a little

00:14:25,110 --> 00:14:36,780
darker etc media queries so one of the

00:14:34,500 --> 00:14:39,000
big problems with dealing with mobiles

00:14:36,780 --> 00:14:41,580
have gone along is how to convert over

00:14:39,000 --> 00:14:43,770
hover based sites and detect when you

00:14:41,580 --> 00:14:46,080
need to do an alternate solution media

00:14:43,770 --> 00:14:47,340
queries are trying to level up to make

00:14:46,080 --> 00:14:49,320
these kind of things easier to do when

00:14:47,340 --> 00:14:51,870
the most important ones here are the two

00:14:49,320 --> 00:14:53,820
queries pointer and hover which are

00:14:51,870 --> 00:14:55,670
showing up in chrome now I believe

00:14:53,820 --> 00:14:58,440
they're being implemented in Firefox

00:14:55,670 --> 00:15:01,260
they should be around very shortly for

00:14:58,440 --> 00:15:03,330
everybody in particular the pointer

00:15:01,260 --> 00:15:05,040
media query has two values course which

00:15:03,330 --> 00:15:06,660
means some it's a big fat pointer like

00:15:05,040 --> 00:15:09,300
your finger can't select very accurately

00:15:06,660 --> 00:15:11,760
or fine like a pen or a mouse pointer

00:15:09,300 --> 00:15:14,430
and then hover is can you hover or not

00:15:11,760 --> 00:15:16,320
yes or no and a few examples of the

00:15:14,430 --> 00:15:18,420
types of devices you can handle here the

00:15:16,320 --> 00:15:21,630
great things about this is that if you

00:15:18,420 --> 00:15:23,430
handle a coarse pointer properly just

00:15:21,630 --> 00:15:24,690
making your touch targets bigger making

00:15:23,430 --> 00:15:27,570
sure there's enough separation between

00:15:24,690 --> 00:15:29,610
links etc anything with a coarse pointer

00:15:27,570 --> 00:15:31,770
a touch device or if you're viewing it

00:15:29,610 --> 00:15:32,310
on a wiimote or you have using connect

00:15:31,770 --> 00:15:33,810
to

00:15:32,310 --> 00:15:36,000
never get the internet or whatever

00:15:33,810 --> 00:15:37,410
they'll all work nicely breaking things

00:15:36,000 --> 00:15:39,690
down by nice features rather than by

00:15:37,410 --> 00:15:42,420
devices makes it automatically more

00:15:39,690 --> 00:15:45,840
accessible to interesting devices on the

00:15:42,420 --> 00:15:49,380
outskirts of your use cases there are a

00:15:45,840 --> 00:15:51,450
bunch more in the spec for example

00:15:49,380 --> 00:15:53,130
looking for the ability to animate you

00:15:51,450 --> 00:15:55,170
can tell if your view being viewed on an

00:15:53,130 --> 00:15:56,790
e-ink device that can't animate very

00:15:55,170 --> 00:15:58,920
well it can change values but it can't

00:15:56,790 --> 00:16:00,450
do constant gradations because it takes

00:15:58,920 --> 00:16:02,520
too long to update the screen so you

00:16:00,450 --> 00:16:04,920
might scale down or drop your animations

00:16:02,520 --> 00:16:07,890
in that case there's a bunch more in

00:16:04,920 --> 00:16:09,839
their luminosity queries you can tell if

00:16:07,890 --> 00:16:10,830
the phone is being used at night and you

00:16:09,839 --> 00:16:12,120
might want to use a different color

00:16:10,830 --> 00:16:14,370
scheme to prevent it from being old

00:16:12,120 --> 00:16:17,430
brighten your eyes and if you have any

00:16:14,370 --> 00:16:19,170
other ideas for things that you need to

00:16:17,430 --> 00:16:21,270
know in order to design your webpage

00:16:19,170 --> 00:16:24,330
appropriately responsively let us know

00:16:21,270 --> 00:16:26,730
email us on dub dub dub style at w3.org

00:16:24,330 --> 00:16:28,230
and tell us what it is you're trying to

00:16:26,730 --> 00:16:33,600
do and maybe we can craft a media query

00:16:28,230 --> 00:16:35,670
for this some new things out of

00:16:33,600 --> 00:16:39,600
animation who hears heard of the web

00:16:35,670 --> 00:16:41,460
animation spec decent number not enough

00:16:39,600 --> 00:16:43,050
all right everybody is homework look up

00:16:41,460 --> 00:16:45,630
the web animation spec just google for

00:16:43,050 --> 00:16:48,660
it it's taking all the functionality and

00:16:45,630 --> 00:16:52,440
ease of use of CSS animations and making

00:16:48,660 --> 00:16:54,540
them useful in javascript using a syntax

00:16:52,440 --> 00:16:57,000
pretty similar to jquery animation if

00:16:54,540 --> 00:16:59,430
you're used to that gives you all the

00:16:57,000 --> 00:17:01,260
hardware acceleration etc that you get

00:16:59,430 --> 00:17:03,150
from using a CSS animation for certain

00:17:01,260 --> 00:17:06,240
properties but rather than having to

00:17:03,150 --> 00:17:07,650
deal with strings and the crap that you

00:17:06,240 --> 00:17:09,839
have to do right now to try to use

00:17:07,650 --> 00:17:11,970
performance CSS animations you just say

00:17:09,839 --> 00:17:15,030
element animate food to bar it's very

00:17:11,970 --> 00:17:16,230
simple another very interesting one

00:17:15,030 --> 00:17:18,179
again if you're following the slides you

00:17:16,230 --> 00:17:20,189
just click that link is the new motion

00:17:18,179 --> 00:17:23,459
property that was recently proposed and

00:17:20,189 --> 00:17:26,939
being implemented in Chrome and Safari

00:17:23,459 --> 00:17:28,740
right now SVG has always had a nice way

00:17:26,939 --> 00:17:31,110
to animate something around a page two

00:17:28,740 --> 00:17:33,060
dimensionally you can technically do

00:17:31,110 --> 00:17:35,220
that yourself just by using transform X

00:17:33,060 --> 00:17:36,420
and transform why but it's ridiculously

00:17:35,220 --> 00:17:37,950
difficult it's not something that you

00:17:36,420 --> 00:17:39,270
could actually do by hand unless you're

00:17:37,950 --> 00:17:41,400
doing the simplest of things straight

00:17:39,270 --> 00:17:42,929
lines maybe some diagonals you don't do

00:17:41,400 --> 00:17:45,090
a curve around and try to set that up

00:17:42,929 --> 00:17:45,929
with easing functions on the x and y you

00:17:45,090 --> 00:17:47,580
can't do that with you

00:17:45,929 --> 00:17:49,830
means computers can do it for you but

00:17:47,580 --> 00:17:51,809
it's terrible motion path just lets you

00:17:49,830 --> 00:17:55,470
specify the path you want to do using

00:17:51,809 --> 00:17:57,210
the SVG path syntax and then you just

00:17:55,470 --> 00:17:58,740
tell the element I want you to be at

00:17:57,210 --> 00:18:00,299
this position and animate over to this

00:17:58,740 --> 00:18:05,909
position and it will follow the path for

00:18:00,299 --> 00:18:09,119
you automatically and finally we come to

00:18:05,909 --> 00:18:10,590
the real future of CSS what I've talked

00:18:09,119 --> 00:18:12,480
about before are features that are

00:18:10,590 --> 00:18:13,830
coming up in the near future the medium

00:18:12,480 --> 00:18:16,950
future things that we're giving you

00:18:13,830 --> 00:18:20,490
Polly filling CSS is where sees us we'll

00:18:16,950 --> 00:18:24,629
end up with you giving things to us no

00:18:20,490 --> 00:18:26,220
language can grow forever it CSS is

00:18:24,629 --> 00:18:28,169
already an enormous language we have

00:18:26,220 --> 00:18:30,090
over 400 properties and memorizing

00:18:28,169 --> 00:18:31,889
everything is ridiculously difficult and

00:18:30,090 --> 00:18:35,549
we're only getting larger every day we

00:18:31,889 --> 00:18:38,369
add something new the cycle time between

00:18:35,549 --> 00:18:40,019
us finding a need in us creating a spec

00:18:38,369 --> 00:18:42,149
and then it being implemented and then

00:18:40,019 --> 00:18:44,519
it being usefully implemented across

00:18:42,149 --> 00:18:47,429
enough devices for you to use on sites

00:18:44,519 --> 00:18:49,350
is too long flex boxes cycle time was

00:18:47,429 --> 00:18:51,389
about 5 years and that's not a typical

00:18:49,350 --> 00:18:52,950
it's pretty normal there and that's

00:18:51,389 --> 00:18:54,899
ridiculous we can't deal with a

00:18:52,950 --> 00:18:58,830
five-year cycle time between I have an

00:18:54,899 --> 00:19:01,529
idea I can use the idea on a website so

00:18:58,830 --> 00:19:04,590
there's a lot of places where we can

00:19:01,529 --> 00:19:07,320
open up CSS to poly filling to

00:19:04,590 --> 00:19:09,389
JavaScript based approaches that still

00:19:07,320 --> 00:19:11,909
hook into low-level browser primitives

00:19:09,389 --> 00:19:14,519
the things that CSS is affecting in the

00:19:11,909 --> 00:19:18,090
first place but let you tailor things to

00:19:14,519 --> 00:19:19,559
your own solution one simple example

00:19:18,090 --> 00:19:21,749
probably one of the first that will show

00:19:19,559 --> 00:19:26,850
up is poly filling media queries I'm

00:19:21,749 --> 00:19:32,220
going to start with a wrong thing doop

00:19:26,850 --> 00:19:33,990
doop doop starting with a sea thing oh I

00:19:32,220 --> 00:19:36,990
can get that all right cool small screen

00:19:33,990 --> 00:19:38,610
too small for me creating custom media

00:19:36,990 --> 00:19:40,889
queries just to give names this is more

00:19:38,610 --> 00:19:42,179
or less variables for media queries if

00:19:40,889 --> 00:19:44,429
you'll notice as well i'm using a nice

00:19:42,179 --> 00:19:46,619
fun syntax 500 pixels less than or equal

00:19:44,429 --> 00:19:48,299
to width etc that's a new syntax and

00:19:46,619 --> 00:19:50,220
media queries because we never really

00:19:48,299 --> 00:19:52,049
wanted to do min-width and max with it's

00:19:50,220 --> 00:19:54,330
a little bit confusing we always wanted

00:19:52,049 --> 00:19:57,080
a nice relationship operators like

00:19:54,330 --> 00:19:59,370
you're used to a normal programming but

00:19:57,080 --> 00:20:02,970
10-15 years ago when this was first in

00:19:59,370 --> 00:20:04,590
to XML was harder to work with nowadays

00:20:02,970 --> 00:20:07,200
we don't care we can use less than and

00:20:04,590 --> 00:20:09,960
greater than signs pretty freely so

00:20:07,200 --> 00:20:13,170
that's fine so this just gives a name to

00:20:09,960 --> 00:20:14,700
a longer media query you can you make

00:20:13,170 --> 00:20:16,590
one that's just for a small screen for

00:20:14,700 --> 00:20:18,240
example that has that maybe some other

00:20:16,590 --> 00:20:19,680
media queries stacked on give it a nice

00:20:18,240 --> 00:20:21,480
short name use that throughout your

00:20:19,680 --> 00:20:25,410
document again so you don't repeat

00:20:21,480 --> 00:20:27,240
yourself also the script based syntax

00:20:25,410 --> 00:20:29,460
for this lets you do more advanced

00:20:27,240 --> 00:20:32,970
things you want to how many people use

00:20:29,460 --> 00:20:35,280
moderniser so moderniser works by

00:20:32,970 --> 00:20:37,140
setting classes on the body this means

00:20:35,280 --> 00:20:39,660
though that you have to use a relatively

00:20:37,140 --> 00:20:42,990
inefficient selector to style off of

00:20:39,660 --> 00:20:45,000
this doing body dot animation or

00:20:42,990 --> 00:20:47,790
whatever does and then a descendant

00:20:45,000 --> 00:20:49,770
selector relatively slow instead that

00:20:47,790 --> 00:20:51,660
kind of thing could be set up as media

00:20:49,770 --> 00:20:54,179
queries which don't require searching

00:20:51,660 --> 00:20:55,890
over the document for it set up true or

00:20:54,179 --> 00:20:58,710
false set up new values for what you

00:20:55,890 --> 00:21:01,800
want if you're using some new API on the

00:20:58,710 --> 00:21:03,540
web on some mobile device that isn't

00:21:01,800 --> 00:21:04,920
exposed into CSS yet but you want to

00:21:03,540 --> 00:21:06,929
style your page based on that you can

00:21:04,920 --> 00:21:08,309
set up a custom media query for that

00:21:06,929 --> 00:21:10,170
with whatever values you want and you

00:21:08,309 --> 00:21:14,610
just use them in your page like any

00:21:10,170 --> 00:21:17,850
other media query would there's a bunch

00:21:14,610 --> 00:21:19,770
more that we could do here to a basic

00:21:17,850 --> 00:21:21,929
list here the most important one though

00:21:19,770 --> 00:21:23,910
is down at number five custom layout

00:21:21,929 --> 00:21:26,070
that's one of the things that has the

00:21:23,910 --> 00:21:27,960
longest cycle time right now I said flex

00:21:26,070 --> 00:21:30,809
boxes have been a five-year cycle time

00:21:27,960 --> 00:21:33,090
from me starting to work on it to it

00:21:30,809 --> 00:21:35,490
being usable across everywhere and

00:21:33,090 --> 00:21:36,929
that's only because I started from a

00:21:35,490 --> 00:21:38,309
spec that already kind of existed

00:21:36,929 --> 00:21:40,890
everybody already recognized it was

00:21:38,309 --> 00:21:42,480
useful grid has a similar cycle time a

00:21:40,890 --> 00:21:44,100
lot of ideas are smaller than this but

00:21:42,480 --> 00:21:46,410
layout just takes a long time it's

00:21:44,100 --> 00:21:49,520
extremely complicated to get right when

00:21:46,410 --> 00:21:52,320
you're trying to design forever so

00:21:49,520 --> 00:21:54,450
recently I was in Sydney for a week with

00:21:52,320 --> 00:21:56,040
the chrome team down there and we spent

00:21:54,450 --> 00:21:58,170
the entire week talking about how we

00:21:56,040 --> 00:21:59,370
could make layout customizable very

00:21:58,170 --> 00:22:01,290
difficult because it's very perf

00:21:59,370 --> 00:22:03,570
sensitive it's very easy to slow down

00:22:01,290 --> 00:22:05,220
the entire page if you don't do things

00:22:03,570 --> 00:22:06,630
carefully we think we have some

00:22:05,220 --> 00:22:08,910
solutions for this and we're getting

00:22:06,630 --> 00:22:11,000
together with other browser vendors our

00:22:08,910 --> 00:22:13,170
next meeting in February will be with

00:22:11,000 --> 00:22:16,140
Firefox ie

00:22:13,170 --> 00:22:18,870
in Safari to talk about exactly how we

00:22:16,140 --> 00:22:21,180
want to design a custom layout system

00:22:18,870 --> 00:22:24,030
that lets JavaScript create layouts that

00:22:21,180 --> 00:22:25,230
respond well to CSS because of course

00:22:24,030 --> 00:22:26,940
you can create layouts yourself right

00:22:25,230 --> 00:22:29,430
now you have JavaScript drives some

00:22:26,940 --> 00:22:31,860
absolute positioning etc but you're

00:22:29,430 --> 00:22:35,730
stuck with the container being usually

00:22:31,860 --> 00:22:38,550
fixed size because CSS when it asks hey

00:22:35,730 --> 00:22:40,400
what size are you you can't respond well

00:22:38,550 --> 00:22:43,590
you have to just give a definite answer

00:22:40,400 --> 00:22:46,110
this kind of thing will make custom

00:22:43,590 --> 00:22:48,780
layouts work well within CSS and make it

00:22:46,110 --> 00:22:50,340
much easier to say I want something like

00:22:48,780 --> 00:22:52,680
flexbox but a little bit different

00:22:50,340 --> 00:22:54,630
details just go write it yourself or get

00:22:52,680 --> 00:22:56,220
someone else to write it for you rather

00:22:54,630 --> 00:22:58,200
and then if it's a really good idea

00:22:56,220 --> 00:22:59,310
afterwards we can come along pick it up

00:22:58,200 --> 00:23:02,580
look really smart because we're

00:22:59,310 --> 00:23:04,050
designing something great but you don't

00:23:02,580 --> 00:23:05,820
have to wait for us to do it first

00:23:04,050 --> 00:23:08,580
there's no more asking permission and

00:23:05,820 --> 00:23:11,160
that's the big ideal here just letting

00:23:08,580 --> 00:23:15,390
y'all all of y'all in this room and

00:23:11,160 --> 00:23:16,860
outside work on the web in CSS the same

00:23:15,390 --> 00:23:18,980
way you do with JavaScript the same way

00:23:16,860 --> 00:23:24,330
you do with preprocessors etc and

00:23:18,980 --> 00:23:25,950
continue on there so that's the end I

00:23:24,330 --> 00:23:27,240
think it's probably time if we do have

00:23:25,950 --> 00:23:28,590
any time I can take questions but I

00:23:27,240 --> 00:23:30,690
don't know if this is a question e-type

00:23:28,590 --> 00:23:35,900
place all right cool no questions talk

00:23:30,690 --> 00:23:35,900

YouTube URL: https://www.youtube.com/watch?v=ad1Wq0qZrMQ


