Title: CSSConf Oakland 2014 | Michelle Bu: CSS First
Publication date: 2015-01-25
Playlist: CSSConf Oakland 2014
Description: 
	We've all heard the stories. First, your amazing web application is built, some beautiful CSS is written for it, and not a pixel is out of place. After launch, out of nowhere, features start needing to be added and your CSS is the first to unravel. Developers for whom CSS is an afterthought start building on the project, and CSS is the final boss before they can ship their feature. Vague class names start popping up all over the place, there's 15 different re-stylings of .hide and .hidden across 14 different files, and CSS rules (.page .subpage div span .red:hover { color: red; }) suddenly stop having meaning. Then things start breaking. It starts off with an innocent margin change in one file when styling one page of your app that breaks 5 other pages. Then it's a span that gets styled for one component but ends up affecting 10 other components. And finally it becomes a self-perpetuating cycle that makes everyone on your team grimace when CSS is even mentioned. This was the status quo at Stripe.

So let's start over. Let's start with CSS first this time, and focus on making it a great developer experience. In this talk, I will introduce how we're using rework at Stripe, and how building and selecting simple rework plugins helps us write and maintain testable, component-based CSS that's pleasing for everyone to work with.

MICHELLE BU

Michelle works on product at Stripe and maintains PeerJS from Oakland, CA. Outside of writing code, she enjoys Diet CokeÂ® and fried chicken, often at the same time.

http://blog.michellebu.com/
https://twitter.com/hazelcough
Captions: 
	00:00:04,549 --> 00:00:11,460
hi everyone thanks for coming out today

00:00:07,410 --> 00:00:14,969
I'm Michelle and I like Alex said and

00:00:11,460 --> 00:00:18,630
from about 12 blocks down telegraph or

00:00:14,969 --> 00:00:21,060
down Broadway so if you ever are into

00:00:18,630 --> 00:00:25,350
Chinese food or Korean food I have

00:00:21,060 --> 00:00:27,449
recommendations I work it's right and we

00:00:25,350 --> 00:00:28,680
do payment stuff this is not stripe but

00:00:27,449 --> 00:00:30,240
it's a place right across the street

00:00:28,680 --> 00:00:33,120
from tripe because we take security

00:00:30,240 --> 00:00:36,000
security really seriously we don't want

00:00:33,120 --> 00:00:37,440
to show your office at stripe I'm

00:00:36,000 --> 00:00:40,140
currently working on a rewrite of our

00:00:37,440 --> 00:00:42,840
user facing payments dashboard with Alex

00:00:40,140 --> 00:00:44,539
actually as for everyone else at stripe

00:00:42,840 --> 00:00:46,710
sometimes they'll need to write CSS

00:00:44,539 --> 00:00:48,570
usually for existing user facing

00:00:46,710 --> 00:00:51,780
payments dashboard so it takes up a

00:00:48,570 --> 00:00:54,090
pretty big chunk of our code base for

00:00:51,780 --> 00:00:56,699
some people this CSS writing is not by

00:00:54,090 --> 00:00:57,750
choice but because they need to ship

00:00:56,699 --> 00:00:59,910
some feature they're working on and

00:00:57,750 --> 00:01:02,250
adding that last bit of CSS or that

00:00:59,910 --> 00:01:03,989
button to the dashboard is the final

00:01:02,250 --> 00:01:05,519
blocker before they can you know right

00:01:03,989 --> 00:01:08,909
their blog post you know send that email

00:01:05,519 --> 00:01:10,350
that they ship something or people work

00:01:08,909 --> 00:01:11,790
on CSS because they're on call and

00:01:10,350 --> 00:01:14,970
something broke so they need to fix a

00:01:11,790 --> 00:01:16,650
bug so it's definitely not on the top of

00:01:14,970 --> 00:01:18,270
everyone's mind and it's definitely not

00:01:16,650 --> 00:01:21,450
the most pleasant task for people to be

00:01:18,270 --> 00:01:23,310
working on so in working on the rewrite

00:01:21,450 --> 00:01:26,520
of the new user dashboard I'm trying to

00:01:23,310 --> 00:01:28,229
solve some of these issues when we first

00:01:26,520 --> 00:01:29,880
built our current existing dashboard we

00:01:28,229 --> 00:01:32,490
created handful of reusable backbone

00:01:29,880 --> 00:01:34,740
views these had the honor of having

00:01:32,490 --> 00:01:37,140
their own CSS for each template

00:01:34,740 --> 00:01:39,030
everything else was essentially custom /

00:01:37,140 --> 00:01:40,650
template things that weren't obviously

00:01:39,030 --> 00:01:42,240
JavaScript components to not get

00:01:40,650 --> 00:01:44,640
considered for any sort of CSS for

00:01:42,240 --> 00:01:46,740
usability as an example this modal

00:01:44,640 --> 00:01:50,100
component complete with its own fancy

00:01:46,740 --> 00:01:52,890
lightbox JavaScript had its own template

00:01:50,100 --> 00:01:56,490
and its own CSS and it was really

00:01:52,890 --> 00:01:58,619
special but this modal explanation

00:01:56,490 --> 00:02:00,479
inside this model is stalled

00:01:58,619 --> 00:02:02,280
specifically for this template that

00:02:00,479 --> 00:02:05,270
appears in so it just has a few lines

00:02:02,280 --> 00:02:07,950
and create new account view dot CSS and

00:02:05,270 --> 00:02:10,530
this what it worked for us at the time

00:02:07,950 --> 00:02:12,130
but as we began having more models that

00:02:10,530 --> 00:02:14,950
needed explanation

00:02:12,130 --> 00:02:16,000
we just kept repeating that style over

00:02:14,950 --> 00:02:19,060
and over again in the individual

00:02:16,000 --> 00:02:21,760
templates wait a bunch of files just

00:02:19,060 --> 00:02:23,110
like this where it was easy to style

00:02:21,760 --> 00:02:25,570
each individual view separately

00:02:23,110 --> 00:02:27,190
especially because we had sass to help

00:02:25,570 --> 00:02:29,500
us and sass allowed us in nesstar

00:02:27,190 --> 00:02:31,210
selectors infinitely so we could go

00:02:29,500 --> 00:02:33,730
crazy and style away without worrying

00:02:31,210 --> 00:02:35,740
about affecting other templates except

00:02:33,730 --> 00:02:37,480
sometimes right because they might be

00:02:35,740 --> 00:02:39,870
used inside other templates or they

00:02:37,480 --> 00:02:42,010
might be reused in other contexts

00:02:39,870 --> 00:02:44,140
sometimes a particular temporary styling

00:02:42,010 --> 00:02:45,550
might use in two places or nests in a

00:02:44,140 --> 00:02:47,920
different template thatÃ­s tiles not

00:02:45,550 --> 00:02:49,300
affected either way by looking at the

00:02:47,920 --> 00:02:51,310
file names in the folder structure

00:02:49,300 --> 00:02:53,530
there's no good way to tell because

00:02:51,310 --> 00:02:55,840
there's no convention about which files

00:02:53,530 --> 00:02:58,810
are which views are reusable which fees

00:02:55,840 --> 00:03:01,090
aren't reusable and there's no easy way

00:02:58,810 --> 00:03:03,970
to tell which side effects the CSS your

00:03:01,090 --> 00:03:06,790
writing will have so let me take you

00:03:03,970 --> 00:03:08,410
into a couple minutes in the life of me

00:03:06,790 --> 00:03:11,020
who needs to add some CSS to our

00:03:08,410 --> 00:03:14,620
existing dashboard so I need to add an

00:03:11,020 --> 00:03:16,240
explanation to this field view so I'm

00:03:14,620 --> 00:03:20,710
going to look for a similar similar

00:03:16,240 --> 00:03:22,900
looking thing and I will inspect element

00:03:20,710 --> 00:03:25,360
because I have no idea where it lists

00:03:22,900 --> 00:03:27,280
and it looks like this particular

00:03:25,360 --> 00:03:29,710
explanation actually gets its tiles from

00:03:27,280 --> 00:03:31,780
like three different places so I try to

00:03:29,710 --> 00:03:33,360
grep for the first one because I don't

00:03:31,780 --> 00:03:36,580
think me a source Maps set up properly

00:03:33,360 --> 00:03:39,310
and I don't find anything and that's

00:03:36,580 --> 00:03:41,230
because it's arbitrarily nested like

00:03:39,310 --> 00:03:43,390
three levels deeper than it should be

00:03:41,230 --> 00:03:45,550
and if you look at the side like there's

00:03:43,390 --> 00:03:49,120
much more nesting beyond just what the

00:03:45,550 --> 00:03:50,920
screen shot captures so at this point

00:03:49,120 --> 00:03:53,830
it's probably no longer worth it to try

00:03:50,920 --> 00:03:55,870
to find styles i want so i take the last

00:03:53,830 --> 00:03:58,900
set of styles find the color make my own

00:03:55,870 --> 00:04:01,240
element look as close as possible and so

00:03:58,900 --> 00:04:03,880
there's another eight lines of CSS added

00:04:01,240 --> 00:04:06,160
to our code base there's no big deal

00:04:03,880 --> 00:04:08,770
right unless you're doing it for three

00:04:06,160 --> 00:04:12,370
years and over many different developers

00:04:08,770 --> 00:04:15,880
about their own style overriding but it

00:04:12,370 --> 00:04:17,770
definitely gets the job done and after

00:04:15,880 --> 00:04:20,500
performing this horrible process many

00:04:17,770 --> 00:04:24,590
times myself I have determined that

00:04:20,500 --> 00:04:28,340
there are four stages of CSS degradation

00:04:24,590 --> 00:04:30,410
and the first one is determination this

00:04:28,340 --> 00:04:32,870
is where we are 10 people to let's drive

00:04:30,410 --> 00:04:34,880
right we are starry eyed and ear to ship

00:04:32,870 --> 00:04:37,340
a user dashboard and we're smart too

00:04:34,880 --> 00:04:39,380
right so we'll pull the best tools in we

00:04:37,340 --> 00:04:42,229
will pull in SAS we will clearly define

00:04:39,380 --> 00:04:43,790
how we want to organize our views and

00:04:42,229 --> 00:04:47,000
CSS in a way that makes styling them

00:04:43,790 --> 00:04:51,020
really easy so we ship a thing and we

00:04:47,000 --> 00:04:54,949
celebrate because we have an MVP one

00:04:51,020 --> 00:04:57,590
year and 10 engineers later we are in

00:04:54,949 --> 00:04:59,750
the development stage this is where we

00:04:57,590 --> 00:05:01,280
start building the non MVP features and

00:04:59,750 --> 00:05:02,510
enhance existing features so

00:05:01,280 --> 00:05:05,600
everything's so good everything still

00:05:02,510 --> 00:05:06,740
works everything's like semi easy to

00:05:05,600 --> 00:05:08,180
find maybe you need you're looking to

00:05:06,740 --> 00:05:10,970
place instead of one to find what you're

00:05:08,180 --> 00:05:13,520
looking for and of course SAS is still

00:05:10,970 --> 00:05:16,520
super useful super easy to add new CSS

00:05:13,520 --> 00:05:20,030
and there's an evolution to be bugs

00:05:16,520 --> 00:05:22,010
introduced as we continue developing but

00:05:20,030 --> 00:05:24,590
because I'm just fixing this bug and

00:05:22,010 --> 00:05:28,400
it's pretty urgent and maybe I'll leave

00:05:24,590 --> 00:05:29,870
a few importance in the code but it's

00:05:28,400 --> 00:05:35,030
okay because I'll fix it later like it's

00:05:29,870 --> 00:05:38,630
not important that I fix it now so as

00:05:35,030 --> 00:05:41,030
Adam mentioned before in his talk CSS is

00:05:38,630 --> 00:05:44,960
append only so keep in mind that this

00:05:41,030 --> 00:05:47,000
poop will probably never disappear so

00:05:44,960 --> 00:05:48,950
another year passed and another 20

00:05:47,000 --> 00:05:50,780
engineers and we're at thirty engineers

00:05:48,950 --> 00:05:52,580
now developments picking up pace and

00:05:50,780 --> 00:05:57,020
this is where we enter the third stage

00:05:52,580 --> 00:05:58,520
of code degradation and it's denial so

00:05:57,020 --> 00:06:02,090
dashboard still works most of the time

00:05:58,520 --> 00:06:05,660
so everything's good I can't hear or see

00:06:02,090 --> 00:06:07,250
any of this poop in the CSS because I

00:06:05,660 --> 00:06:09,500
only touch it once or twice per week and

00:06:07,250 --> 00:06:11,630
you know this is even my team's code to

00:06:09,500 --> 00:06:15,620
maintain its not my project so why do I

00:06:11,630 --> 00:06:17,000
care about this and one year and 40

00:06:15,620 --> 00:06:19,510
engineers later you're growing

00:06:17,000 --> 00:06:21,680
exponentially and so is the poopy CSS

00:06:19,510 --> 00:06:25,789
and this is where you enter the fourth

00:06:21,680 --> 00:06:28,729
stage despair this is where every time

00:06:25,789 --> 00:06:30,710
you fix a bug something breaks your CSS

00:06:28,729 --> 00:06:32,840
is growing at a rate about 3 poops per

00:06:30,710 --> 00:06:34,900
week and there's nothing you can do

00:06:32,840 --> 00:06:37,280
about it because everything's hopeless

00:06:34,900 --> 00:06:38,420
so let's break down how our existing

00:06:37,280 --> 00:06:40,940
dashboard CSS man

00:06:38,420 --> 00:06:42,260
just spiral downhill so badly it's not

00:06:40,940 --> 00:06:44,270
been the stage one we made the bad

00:06:42,260 --> 00:06:45,500
decisions I think the decisions we made

00:06:44,270 --> 00:06:47,120
at the time were one hundred percent the

00:06:45,500 --> 00:06:49,790
right decisions and were perfect for our

00:06:47,120 --> 00:06:52,190
size and our expertise and our timeline

00:06:49,790 --> 00:06:54,470
for the project the way that our CSS was

00:06:52,190 --> 00:06:56,600
handled was optimized for you know fast

00:06:54,470 --> 00:06:59,240
development and simplicity but as an

00:06:56,600 --> 00:07:01,070
organization grew our CSS needed to you

00:06:59,240 --> 00:07:03,140
know our CSS needs started change not

00:07:01,070 --> 00:07:05,810
every engineer that join was good at or

00:07:03,140 --> 00:07:07,160
even cared about CSS and more

00:07:05,810 --> 00:07:09,140
importantly they didn't have the context

00:07:07,160 --> 00:07:11,660
to know exactly how every view and our

00:07:09,140 --> 00:07:14,090
CSS or in our code base worked or was

00:07:11,660 --> 00:07:15,560
used regardless I believe that if we can

00:07:14,090 --> 00:07:17,510
start over and treat CSS as a

00:07:15,560 --> 00:07:20,210
first-class tool we can avoid some of

00:07:17,510 --> 00:07:22,130
these problems as an example we wouldn't

00:07:20,210 --> 00:07:27,260
write JavaScript without tests or

00:07:22,130 --> 00:07:30,430
without a winter right maybe so why

00:07:27,260 --> 00:07:33,590
would we tolerate such things in our CSS

00:07:30,430 --> 00:07:35,960
so what were the problems first problem

00:07:33,590 --> 00:07:37,730
I think was that there were no tests and

00:07:35,960 --> 00:07:40,400
some people say it's almost impossible

00:07:37,730 --> 00:07:42,860
to test CSS and that's sort of true and

00:07:40,400 --> 00:07:45,590
we'll get into that later the second was

00:07:42,860 --> 00:07:46,880
that there were no conventions well

00:07:45,590 --> 00:07:49,430
technically there were conventions right

00:07:46,880 --> 00:07:51,590
that each template can have an S CSS

00:07:49,430 --> 00:07:53,720
file in the same folder as a template

00:07:51,590 --> 00:07:55,220
but more specific than that the actual

00:07:53,720 --> 00:07:57,500
way the CSS was written had no

00:07:55,220 --> 00:08:01,880
convention we see everything from nested

00:07:57,500 --> 00:08:03,890
selectors to very vague selectors to you

00:08:01,880 --> 00:08:09,260
know more specifically named selectors

00:08:03,890 --> 00:08:12,650
in various forms and some IDs even in

00:08:09,260 --> 00:08:14,210
there and finally what I think was our

00:08:12,650 --> 00:08:17,000
most important issue was that we had no

00:08:14,210 --> 00:08:19,220
CSS for use again technically there was

00:08:17,000 --> 00:08:21,910
CSS we use just not any sort of

00:08:19,220 --> 00:08:25,100
structured documented or explicit kind

00:08:21,910 --> 00:08:27,230
in the art form of reusing CSS was

00:08:25,100 --> 00:08:29,750
reusing CSS EPS styled are various

00:08:27,230 --> 00:08:32,240
reasonable backbone views there's no

00:08:29,750 --> 00:08:33,950
concept of like pulling out of you or

00:08:32,240 --> 00:08:36,350
CSS that you found useful in other

00:08:33,950 --> 00:08:37,820
places so as an example we have this

00:08:36,350 --> 00:08:39,590
thing called transfers list view which

00:08:37,820 --> 00:08:41,210
you think is only used on the transfers

00:08:39,590 --> 00:08:43,520
page to display the transfers list if

00:08:41,210 --> 00:08:45,320
it's actually used in three places and

00:08:43,520 --> 00:08:47,240
just by looking at the file and that's

00:08:45,320 --> 00:08:48,740
CSS you have no idea that that's the

00:08:47,240 --> 00:08:50,120
case and you have no idea that it's

00:08:48,740 --> 00:08:51,350
being used in many different contexts

00:08:50,120 --> 00:08:53,660
a--'s

00:08:51,350 --> 00:08:55,970
meanwhile sublet subscriptions listview

00:08:53,660 --> 00:08:56,900
is actually only used in one place even

00:08:55,970 --> 00:08:59,180
though it seems like something that

00:08:56,900 --> 00:09:00,980
might be reusable and there's absolutely

00:08:59,180 --> 00:09:04,430
no documentation which components you

00:09:00,980 --> 00:09:07,220
can reuse and which you can't so what

00:09:04,430 --> 00:09:09,290
does this matter the first thing is that

00:09:07,220 --> 00:09:11,180
too much of this cruft filled up will

00:09:09,290 --> 00:09:12,980
make it really hard to tackle the non

00:09:11,180 --> 00:09:14,800
MVP problems that you eventually want to

00:09:12,980 --> 00:09:19,610
get to write like mobile readiness

00:09:14,800 --> 00:09:21,020
accessibility and you just can't tackle

00:09:19,610 --> 00:09:22,610
those things unless you look at every

00:09:21,020 --> 00:09:25,340
single file and rewrite every single

00:09:22,610 --> 00:09:27,560
view and it gets progressively more

00:09:25,340 --> 00:09:31,100
sluggish or snail ish to build new

00:09:27,560 --> 00:09:32,510
things and that eventually causes

00:09:31,100 --> 00:09:34,790
unhappiness while working in the code

00:09:32,510 --> 00:09:36,590
base and even worse like disdain or

00:09:34,790 --> 00:09:38,930
shame for the code base and the project

00:09:36,590 --> 00:09:42,140
that you're working on so let's start

00:09:38,930 --> 00:09:43,520
over this time from CSS first since we

00:09:42,140 --> 00:09:44,750
built this iteration of the dashboard

00:09:43,520 --> 00:09:48,080
over three years ago a lot has changed

00:09:44,750 --> 00:09:49,910
and there's more tools available now to

00:09:48,080 --> 00:09:51,860
solve our problems and allow us to think

00:09:49,910 --> 00:09:53,840
of CSS as the first class citizen just

00:09:51,860 --> 00:09:55,070
like other tools that we use most

00:09:53,840 --> 00:09:56,930
developers would cringe as they left

00:09:55,070 --> 00:10:00,290
crappy javascript in the code base and

00:09:56,930 --> 00:10:01,970
we should think of CSS the same way the

00:10:00,290 --> 00:10:03,850
first problem we should tackle was the

00:10:01,970 --> 00:10:05,960
last one that i mentioned no CSS for use

00:10:03,850 --> 00:10:09,790
we're tackling this problem with our own

00:10:05,960 --> 00:10:12,560
CSS component library called boot stripe

00:10:09,790 --> 00:10:17,360
this we also considered like stripes

00:10:12,560 --> 00:10:19,310
trap but wasn't as good we split our

00:10:17,360 --> 00:10:21,020
dashboard designs into composable

00:10:19,310 --> 00:10:23,420
components everything from a responsive

00:10:21,020 --> 00:10:26,120
content section that can be composed

00:10:23,420 --> 00:10:29,930
with other components all the way to the

00:10:26,120 --> 00:10:32,450
smaller details like big number and this

00:10:29,930 --> 00:10:34,520
will form at a number into the currency

00:10:32,450 --> 00:10:38,600
of your choice and for the locale of

00:10:34,520 --> 00:10:41,120
your choice and all this documentation

00:10:38,600 --> 00:10:43,010
is automatically generated and it's

00:10:41,120 --> 00:10:45,050
written right in your code in your CSS

00:10:43,010 --> 00:10:46,670
file so it's right in your face and you

00:10:45,050 --> 00:10:50,330
feel guilty if you don't update it you

00:10:46,670 --> 00:10:52,040
have to your CSS so investing the time

00:10:50,330 --> 00:10:53,420
to build these components may seem kind

00:10:52,040 --> 00:10:55,610
of daunting but once bootstrap was

00:10:53,420 --> 00:10:56,870
finished it was extremely easy to fill a

00:10:55,610 --> 00:10:58,850
page on a dashboard with these

00:10:56,870 --> 00:11:00,500
components and then we can worry about

00:10:58,850 --> 00:11:03,570
the ten percent less that's

00:11:00,500 --> 00:11:07,380
implementation and polish

00:11:03,570 --> 00:11:09,420
and and you don't have to worry about

00:11:07,380 --> 00:11:11,310
these like little things being styled

00:11:09,420 --> 00:11:13,410
because we probably would have thought

00:11:11,310 --> 00:11:17,520
about them in designing our more context

00:11:13,410 --> 00:11:21,750
specific components so one side effect

00:11:17,520 --> 00:11:24,660
was that developers who did not know CSS

00:11:21,750 --> 00:11:27,840
at stripe began using boot stripe for

00:11:24,660 --> 00:11:29,370
their own projects internally and this

00:11:27,840 --> 00:11:31,200
was something that really didn't happen

00:11:29,370 --> 00:11:32,520
before because it's so difficult to get

00:11:31,200 --> 00:11:35,220
something to look nice and many

00:11:32,520 --> 00:11:38,100
developers don't know CSS at all or are

00:11:35,220 --> 00:11:40,380
really bad at design so this allowed

00:11:38,100 --> 00:11:42,450
them to get something on a page looking

00:11:40,380 --> 00:11:46,860
nice without having to consult designers

00:11:42,450 --> 00:11:49,230
or write CSS so the next problem was no

00:11:46,860 --> 00:11:51,270
conventions so here's what we've settled

00:11:49,230 --> 00:11:54,420
on in terms of class naming we have a

00:11:51,270 --> 00:11:57,600
namespace stash componentname dash

00:11:54,420 --> 00:11:59,190
descendant dash dash descriptor so as an

00:11:57,600 --> 00:12:02,790
example we have boots stripe is our

00:11:59,190 --> 00:12:06,690
namespace OBS big number dash delimiter

00:12:02,790 --> 00:12:08,790
dash comma and a big number delimiter is

00:12:06,690 --> 00:12:11,640
like the delimiter that almost your

00:12:08,790 --> 00:12:13,350
thousands and millions and such and in

00:12:11,640 --> 00:12:16,860
this case it's a comma because we're in

00:12:13,350 --> 00:12:20,700
the US but in Europe you would have a

00:12:16,860 --> 00:12:22,530
period instead so before we get too much

00:12:20,700 --> 00:12:24,360
into that I'll briefly go over the tools

00:12:22,530 --> 00:12:27,510
that we've adopted for our new dashboard

00:12:24,360 --> 00:12:29,910
/ SAS so SAS was really amazing for CSS

00:12:27,510 --> 00:12:31,530
experts it makes people's lives much

00:12:29,910 --> 00:12:33,570
easier but when most folks who work on

00:12:31,530 --> 00:12:35,640
your CSS only know how to pens the

00:12:33,570 --> 00:12:37,620
bottom the file in really arbitrary ways

00:12:35,640 --> 00:12:40,920
that somehow magically work because

00:12:37,620 --> 00:12:43,200
that's this magic it's time to try find

00:12:40,920 --> 00:12:45,690
a new tool that will give them less rope

00:12:43,200 --> 00:12:47,550
to hang themselves with rework is what

00:12:45,690 --> 00:12:50,220
we ended up choosing rework is a plug-in

00:12:47,550 --> 00:12:52,440
for CSS pre-processing and its default

00:12:50,220 --> 00:12:54,300
form it takes the CSS you gives it

00:12:52,440 --> 00:12:56,370
parses in internet abstract syntax tree

00:12:54,300 --> 00:12:57,990
and composite to the exact same thing on

00:12:56,370 --> 00:12:59,460
the other end so that's not very

00:12:57,990 --> 00:13:01,410
interesting and you don't need to know

00:12:59,460 --> 00:13:03,150
exactly what it means but the gist of it

00:13:01,410 --> 00:13:05,220
is that during this middle phase when

00:13:03,150 --> 00:13:07,230
you have your CSS in the form of an AST

00:13:05,220 --> 00:13:08,790
you can write small plugins that will

00:13:07,230 --> 00:13:10,680
manipulate the abstract syntax tree

00:13:08,790 --> 00:13:12,750
before it's compiled back into the CSS

00:13:10,680 --> 00:13:16,230
so in this case we pulled in the we work

00:13:12,750 --> 00:13:17,459
deciduous safai plugin which turned this

00:13:16,230 --> 00:13:21,420
evergreen tree in

00:13:17,459 --> 00:13:23,610
deciduous tree this difficult because

00:13:21,420 --> 00:13:26,100
rather than pulling in a monolithic CSS

00:13:23,610 --> 00:13:27,420
framework for CSS non-expert sees we're

00:13:26,100 --> 00:13:30,089
now able to pick and choose specific

00:13:27,420 --> 00:13:32,699
plugins and tools with limited scope so

00:13:30,089 --> 00:13:36,029
non-experts don't add things to the CSS

00:13:32,699 --> 00:13:38,309
said they don't understand so another

00:13:36,029 --> 00:13:40,379
tool is CSS and it's a styling

00:13:38,309 --> 00:13:41,879
methodology for component based

00:13:40,379 --> 00:13:44,339
development includes the CSS

00:13:41,879 --> 00:13:46,230
preprocessor built atop of rework as

00:13:44,339 --> 00:13:47,519
well as a style guide we brought heavily

00:13:46,230 --> 00:13:50,339
from the style guide and creating our

00:13:47,519 --> 00:13:52,379
own and fork the suit CSS conformance

00:13:50,339 --> 00:13:54,029
checkers for ourselves but we didn't

00:13:52,379 --> 00:13:57,209
take the CSS preprocessor because we had

00:13:54,029 --> 00:13:59,339
our own needs so rework stripe

00:13:57,209 --> 00:14:01,860
conformance is fort from rework suit

00:13:59,339 --> 00:14:04,889
conformance and enforces CSS you write

00:14:01,860 --> 00:14:06,660
follows our predefined rules not only

00:14:04,889 --> 00:14:09,240
does a trucker tell you if your success

00:14:06,660 --> 00:14:13,529
doesn't conform it will not even build

00:14:09,240 --> 00:14:16,050
the file as an example i added a big

00:14:13,529 --> 00:14:18,059
dash number to the big number component

00:14:16,050 --> 00:14:20,069
and a build fails and there's info about

00:14:18,059 --> 00:14:26,059
like what line number it's on and what

00:14:20,069 --> 00:14:28,110
exactly the misbehaving selector is so

00:14:26,059 --> 00:14:30,299
again because developers will grumble

00:14:28,110 --> 00:14:31,740
about being dry but pull and rework

00:14:30,299 --> 00:14:37,619
namespace to the letter submit that

00:14:31,740 --> 00:14:39,360
pesky namespace that's in every class we

00:14:37,619 --> 00:14:40,769
also pulled in rework inherit a plug-in

00:14:39,360 --> 00:14:43,860
that lets us use very simple very

00:14:40,769 --> 00:14:45,240
limited inheritance so one in this

00:14:43,860 --> 00:14:46,949
example one common way of styling

00:14:45,240 --> 00:14:50,279
checkboxes is too high the input element

00:14:46,949 --> 00:14:52,619
and then style a like fake label element

00:14:50,279 --> 00:14:54,089
on top of that input element with your

00:14:52,619 --> 00:14:56,670
actual checkbox style and then have a

00:14:54,089 --> 00:14:59,040
second label element that is the actual

00:14:56,670 --> 00:15:00,869
label the checkbox and in this case we

00:14:59,040 --> 00:15:03,660
wrote like this whole thing for our

00:15:00,869 --> 00:15:04,860
checkbox that falls off the page but for

00:15:03,660 --> 00:15:08,220
a radio button we were just able to

00:15:04,860 --> 00:15:14,939
inherit those three elements and it

00:15:08,220 --> 00:15:17,639
works well so we have bundled these and

00:15:14,939 --> 00:15:23,610
more into our own CSS preprocessor

00:15:17,639 --> 00:15:26,399
called KF CSS and these are the features

00:15:23,610 --> 00:15:28,679
available in KFC SS includes everything

00:15:26,399 --> 00:15:29,970
from rework inherit and rework namespace

00:15:28,679 --> 00:15:31,410
which you saw on the slides before two

00:15:29,970 --> 00:15:33,360
smaller helpers like

00:15:31,410 --> 00:15:35,759
rework move media which simply moves all

00:15:33,360 --> 00:15:37,769
your media queries to the end of the

00:15:35,759 --> 00:15:40,620
file and we work far as which gives us

00:15:37,769 --> 00:15:42,029
CSS level for compatible variables so

00:15:40,620 --> 00:15:44,759
something to our wages here right like

00:15:42,029 --> 00:15:47,129
no nesting there's no fancy math or any

00:15:44,759 --> 00:15:49,529
function stuff beyond the simple calc

00:15:47,129 --> 00:15:51,180
function that we're allowing them again

00:15:49,529 --> 00:15:53,310
in general we want to limit the scope of

00:15:51,180 --> 00:15:56,370
the features that CSS non-experts like

00:15:53,310 --> 00:15:59,339
myself can use and abuse and you know

00:15:56,370 --> 00:16:01,170
create all their terrible CSS with so

00:15:59,339 --> 00:16:02,730
you're probably thinking that this is

00:16:01,170 --> 00:16:04,560
getting pretty out of hand now right

00:16:02,730 --> 00:16:08,189
like all this accessibility stuff we've

00:16:04,560 --> 00:16:10,529
thrown in all these long class names and

00:16:08,189 --> 00:16:13,920
this is just for one big number right

00:16:10,529 --> 00:16:15,360
but in reality you're not really going

00:16:13,920 --> 00:16:16,620
to be writing that much markup you

00:16:15,360 --> 00:16:19,680
should only be writing our markup once

00:16:16,620 --> 00:16:21,269
and attracting it away with some

00:16:19,680 --> 00:16:23,310
template of some sort and in our case

00:16:21,269 --> 00:16:25,079
we're using handlebars but any templates

00:16:23,310 --> 00:16:27,629
would work it's not groundbreaking

00:16:25,079 --> 00:16:29,459
anyway but abstracting away components

00:16:27,629 --> 00:16:33,389
makes dealing with deleting code and

00:16:29,459 --> 00:16:36,689
upgrading your code much easier and the

00:16:33,389 --> 00:16:38,550
final issue is no tests truth is testing

00:16:36,689 --> 00:16:40,410
CSS is pretty hard one of the reasons

00:16:38,550 --> 00:16:42,509
we're able to test the SS now is because

00:16:40,410 --> 00:16:43,949
we're using CSS components if you've

00:16:42,509 --> 00:16:45,990
ever had to visually difficult page

00:16:43,949 --> 00:16:47,730
before you know that it's often not very

00:16:45,990 --> 00:16:48,959
effective right like things changed all

00:16:47,730 --> 00:16:51,329
the time and you don't want to always

00:16:48,959 --> 00:16:53,639
like play find the difference for every

00:16:51,329 --> 00:16:55,980
change the hardest part about testing

00:16:53,639 --> 00:16:57,959
CSS is actually all the different states

00:16:55,980 --> 00:16:59,399
that your elements can have in all the

00:16:57,959 --> 00:17:02,759
different ways that those elements can

00:16:59,399 --> 00:17:05,220
interact with each other so we have

00:17:02,759 --> 00:17:06,659
pulled in rework pseudo classes which

00:17:05,220 --> 00:17:08,220
gives us pseudo classes for each of

00:17:06,659 --> 00:17:10,909
these states and we are able to compose

00:17:08,220 --> 00:17:14,159
them in our tests to mock these states

00:17:10,909 --> 00:17:17,339
and we pulled in grunt huxley which then

00:17:14,159 --> 00:17:20,730
takes screenshots of our test cases and

00:17:17,339 --> 00:17:22,319
gifts them in this way we can also

00:17:20,730 --> 00:17:24,750
declaratively write tests right like you

00:17:22,319 --> 00:17:26,280
don't want to tell your you know phantom

00:17:24,750 --> 00:17:28,770
jay has to go click on this button and

00:17:26,280 --> 00:17:30,330
then check what the state is we're able

00:17:28,770 --> 00:17:32,100
to like explicitly say these are the

00:17:30,330 --> 00:17:34,789
states I would care about and we want to

00:17:32,100 --> 00:17:36,900
make sure that they stay the same so

00:17:34,789 --> 00:17:39,780
huxley is pretty cool this is an example

00:17:36,900 --> 00:17:42,630
of a diff that it found from a two pixel

00:17:39,780 --> 00:17:44,610
vertical line change another great thing

00:17:42,630 --> 00:17:49,040
about checking these these

00:17:44,610 --> 00:17:49,040
in woo i don't know why it has that

00:17:52,850 --> 00:17:58,320
other great thing about checking these

00:17:54,630 --> 00:18:01,290
files in is that we are able to use

00:17:58,320 --> 00:18:03,059
github stools to you know the onion skin

00:18:01,290 --> 00:18:10,200
to lure the swype tool to see the

00:18:03,059 --> 00:18:13,740
difference between images so why do we

00:18:10,200 --> 00:18:15,900
care about this so why would you build

00:18:13,740 --> 00:18:19,169
your own component library from scratch

00:18:15,900 --> 00:18:22,440
when you know there's bootstrap around

00:18:19,169 --> 00:18:25,190
and it's it's a lot of work right well

00:18:22,440 --> 00:18:25,190
hopefully

00:18:30,190 --> 00:18:35,320
sorry about that hopefully with your own

00:18:33,309 --> 00:18:39,029
component library you're then able to

00:18:35,320 --> 00:18:41,289
spend ninety percent of your time

00:18:39,029 --> 00:18:43,330
building up this component library and

00:18:41,289 --> 00:18:45,250
then every time you add new features to

00:18:43,330 --> 00:18:47,350
your app you will then just have to do

00:18:45,250 --> 00:18:51,580
the last ten percent of polishing and

00:18:47,350 --> 00:18:53,110
building and then hopefully a few years

00:18:51,580 --> 00:18:55,000
from now instead of trying to figure out

00:18:53,110 --> 00:18:57,580
what exactly this means when trying to

00:18:55,000 --> 00:19:00,690
sell an explanation in our settings you

00:18:57,580 --> 00:19:03,370
will know exactly what class is to add

00:19:00,690 --> 00:19:05,529
the hope is that if we think about CSS

00:19:03,370 --> 00:19:10,919
first then we will eventually be able to

00:19:05,529 --> 00:19:10,919

YouTube URL: https://www.youtube.com/watch?v=ALEGHlwMXxs


