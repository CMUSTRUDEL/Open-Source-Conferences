Title: How Typescript Can Power Design Systems | Isha Kasliwal | JSConf Korea 2019
Publication date: 2019-10-01
Playlist: JSConf Korea 2019
Description: 
	Design Systems are beneficial in bridging the gap between design and development. The inclusion of React.js in Design Systems helped introduce the concept of functional programming as it relates to building components for reuse and scale. What happens if we take it a step further? With Typescript, a superset of JS that can be used in conjunction with React.js, your Design System can reach a whole new level of efficiency and clarity. This talk will explore how UI engineers, from beginner to experienced, can harness the power of Typescript to help enforce better component standards in the code and allow large-scale JS projects to succeed. By the end of this talk, you will walk away with actionable ideas to implement in your codebase!
Captions: 
	00:00:08,799 --> 00:00:16,129
my name is Ayesha costly wall I'm a

00:00:12,469 --> 00:00:18,439
senior UI UX designer developer focusing

00:00:16,129 --> 00:00:22,640
on design systems at twitch in San

00:00:18,439 --> 00:00:24,859
Francisco previously I was a senior UX

00:00:22,640 --> 00:00:28,159
engineer on the Lightning design system

00:00:24,859 --> 00:00:30,769
team at Salesforce I consider myself a

00:00:28,159 --> 00:00:33,650
designer who codes I care deeply about

00:00:30,769 --> 00:00:36,410
design and that has what led me to focus

00:00:33,650 --> 00:00:39,170
on many of the different aspects of how

00:00:36,410 --> 00:00:42,740
design can be informed in tech and

00:00:39,170 --> 00:00:44,750
that's why I write code today I want to

00:00:42,740 --> 00:00:48,290
talk to you about how typescript can

00:00:44,750 --> 00:00:50,870
power Design Systems I know most of the

00:00:48,290 --> 00:00:53,260
people in this group are developers but

00:00:50,870 --> 00:00:55,640
since design systems are growing so much

00:00:53,260 --> 00:00:58,460
ideally you've heard of the term design

00:00:55,640 --> 00:01:00,590
system before can you actually raise

00:00:58,460 --> 00:01:06,680
your hand if you know what a design

00:01:00,590 --> 00:01:11,659
system is so for those of you who don't

00:01:06,680 --> 00:01:11,990
a design system is the single source of

00:01:11,659 --> 00:01:14,450
truth

00:01:11,990 --> 00:01:17,540
which groups all the elements that

00:01:14,450 --> 00:01:20,360
allows team to design realize and

00:01:17,540 --> 00:01:23,240
develop a product my old teammate and

00:01:20,360 --> 00:01:26,000
friend Gina Ann of Design Systems Fame

00:01:23,240 --> 00:01:30,290
has very eloquently described design

00:01:26,000 --> 00:01:33,710
systems to be composed of tangible and

00:01:30,290 --> 00:01:36,200
non tangible elements a design system

00:01:33,710 --> 00:01:39,620
offers a consistent and well-designed

00:01:36,200 --> 00:01:43,810
pattern library tools for both designers

00:01:39,620 --> 00:01:47,000
and developers code ready components

00:01:43,810 --> 00:01:50,180
guidelines and plenty of usable

00:01:47,000 --> 00:01:52,430
resources at the same time a design

00:01:50,180 --> 00:01:55,729
system also offers some abstract

00:01:52,430 --> 00:01:58,159
elements like brand values shared ways

00:01:55,729 --> 00:02:03,430
of working shared beliefs about the

00:01:58,159 --> 00:02:03,430
product UI UX best practices and more

00:02:03,580 --> 00:02:11,870
it's where development work intersects

00:02:07,280 --> 00:02:14,120
with design work a design system

00:02:11,870 --> 00:02:16,430
contains collections of rules which

00:02:14,120 --> 00:02:19,130
include guidance as well as strictly

00:02:16,430 --> 00:02:23,750
enforced UI UX and code behavior in the

00:02:19,130 --> 00:02:25,670
product constraints and principles so

00:02:23,750 --> 00:02:27,740
that your team at large is operating

00:02:25,670 --> 00:02:32,930
under the same circumstances and

00:02:27,740 --> 00:02:36,530
direction that are implemented in design

00:02:32,930 --> 00:02:38,930
and in code some of the beauty of Design

00:02:36,530 --> 00:02:42,260
Systems lies in the fact that the design

00:02:38,930 --> 00:02:44,870
and code of the system carry all of

00:02:42,260 --> 00:02:48,200
those rules constraints and guidelines

00:02:44,870 --> 00:02:51,260
within them the design and code alone if

00:02:48,200 --> 00:02:55,160
used and maintained can afford your

00:02:51,260 --> 00:03:00,890
company clarity efficiency a standard

00:02:55,160 --> 00:03:03,620
look and feel and unity a design system

00:03:00,890 --> 00:03:06,830
actually goes beyond just design and

00:03:03,620 --> 00:03:09,590
beyond just code a Design Systems team

00:03:06,830 --> 00:03:12,590
like my own has to maintain an entire

00:03:09,590 --> 00:03:14,390
product of their own so our customers

00:03:12,590 --> 00:03:17,750
end up being designers and developers

00:03:14,390 --> 00:03:20,120
that are in our own company my team

00:03:17,750 --> 00:03:23,060
operates as a design focused engineering

00:03:20,120 --> 00:03:24,890
team and the engineers in the rest of

00:03:23,060 --> 00:03:27,890
our company use the components that we

00:03:24,890 --> 00:03:30,049
provide because we do this we have to

00:03:27,890 --> 00:03:33,019
maintain many aspects of our product

00:03:30,049 --> 00:03:34,400
which includes a large variety of

00:03:33,019 --> 00:03:37,790
different challenges

00:03:34,400 --> 00:03:40,070
to build and maintain from support to

00:03:37,790 --> 00:03:42,799
documentation to messaging and

00:03:40,070 --> 00:03:46,360
everything in between a design system is

00:03:42,799 --> 00:03:50,740
a very large body of work

00:03:46,360 --> 00:03:54,910
a lot of companies both big and small

00:03:50,740 --> 00:03:57,340
like Amazon Facebook Google and Shopify

00:03:54,910 --> 00:03:59,140
have design systems and where I work

00:03:57,340 --> 00:04:04,660
which is twitch which some of you may

00:03:59,140 --> 00:04:07,390
have heard of does as well a lot of what

00:04:04,660 --> 00:04:10,000
we maintain and what I tend to focus on

00:04:07,390 --> 00:04:12,550
is component development think of a

00:04:10,000 --> 00:04:16,330
component as small as a button or a

00:04:12,550 --> 00:04:19,299
component as large as a modal we work to

00:04:16,330 --> 00:04:22,510
build and maintain all of it the process

00:04:19,299 --> 00:04:24,940
generally starts off as I da ting why a

00:04:22,510 --> 00:04:28,990
specific component like a button is

00:04:24,940 --> 00:04:33,100
necessary once we deem it important we

00:04:28,990 --> 00:04:35,110
move on to design and then before it

00:04:33,100 --> 00:04:37,750
goes into production we have to write

00:04:35,110 --> 00:04:40,330
the code to build it for many Design

00:04:37,750 --> 00:04:42,760
Systems teams the main concern is the

00:04:40,330 --> 00:04:45,160
view layer and making sure there's a

00:04:42,760 --> 00:04:47,530
clear and consumable API for our

00:04:45,160 --> 00:04:50,560
company's engineers we write and

00:04:47,530 --> 00:04:55,270
maintain our components in HTML CSS and

00:04:50,560 --> 00:04:58,030
JavaScript and it turns out that in our

00:04:55,270 --> 00:05:01,510
JavaScript we are able to maintain a lot

00:04:58,030 --> 00:05:04,450
of opinions rules and documentation

00:05:01,510 --> 00:05:06,910
around our designs and at which were

00:05:04,450 --> 00:05:09,660
able to do that by using react j/s and

00:05:06,910 --> 00:05:09,660
typescript

00:05:10,610 --> 00:05:16,710
here's an example of that process from

00:05:13,380 --> 00:05:19,470
our own design system we ideated that we

00:05:16,710 --> 00:05:21,990
needed a very small UI element that

00:05:19,470 --> 00:05:24,930
could convey status in line with other

00:05:21,990 --> 00:05:27,780
elements and based on UX research and

00:05:24,930 --> 00:05:30,990
best practices we decided that the best

00:05:27,780 --> 00:05:35,430
UI to solve that problem would look like

00:05:30,990 --> 00:05:37,650
a pill after I da ting we designed what

00:05:35,430 --> 00:05:40,800
the pill component would look like this

00:05:37,650 --> 00:05:45,810
is the pill in our figma UI kit that all

00:05:40,800 --> 00:05:48,180
of our designers use then we wrote the

00:05:45,810 --> 00:05:50,520
code for the pill in typescript which is

00:05:48,180 --> 00:05:52,560
on the left side we created

00:05:50,520 --> 00:05:54,930
documentation which is on the right side

00:05:52,560 --> 00:05:57,650
and luckily because we're using

00:05:54,930 --> 00:06:00,960
typescript it's really easy to generate

00:05:57,650 --> 00:06:05,760
prop related documentation that's very

00:06:00,960 --> 00:06:08,580
detailed and then finally in production

00:06:05,760 --> 00:06:10,950
on the website the web app the mobile

00:06:08,580 --> 00:06:13,860
app all of our different instances of

00:06:10,950 --> 00:06:15,630
twitch the pill is used by designers and

00:06:13,860 --> 00:06:17,880
developers when they want to convey

00:06:15,630 --> 00:06:20,220
status in their UI so this is one

00:06:17,880 --> 00:06:24,000
example of how it's used on our website

00:06:20,220 --> 00:06:26,870
and this is another example of how it's

00:06:24,000 --> 00:06:26,870
being used in production

00:06:29,580 --> 00:06:34,050
so I mentioned that we use typescript in

00:06:32,009 --> 00:06:36,120
our JavaScript stack because we believe

00:06:34,050 --> 00:06:38,939
that it's a powerful tool when it comes

00:06:36,120 --> 00:06:42,289
to design systems development but what

00:06:38,939 --> 00:06:42,289
exactly is typescript

00:06:43,069 --> 00:06:47,669
typescript is a typed superset of

00:06:45,479 --> 00:06:50,580
JavaScript that compiles to plain

00:06:47,669 --> 00:06:53,129
JavaScript a good summary of how it's

00:06:50,580 --> 00:06:56,159
different from vanilla Jas is that it

00:06:53,129 --> 00:07:00,539
provides optional static typing classes

00:06:56,159 --> 00:07:02,280
and interfaces when using typescript you

00:07:00,539 --> 00:07:05,340
don't have to write all of your code

00:07:02,280 --> 00:07:07,289
entirely in typescript if you wanted to

00:07:05,340 --> 00:07:10,949
you could have vanilla JavaScript and

00:07:07,289 --> 00:07:14,190
typescript in the same file also you can

00:07:10,949 --> 00:07:15,840
use typescript with react Jas a couple

00:07:14,190 --> 00:07:20,599
of benefits that typescript provides

00:07:15,840 --> 00:07:23,550
include style specific typed props

00:07:20,599 --> 00:07:26,430
having style specific typed props offers

00:07:23,550 --> 00:07:31,009
visual consistency ensures proper piss

00:07:26,430 --> 00:07:31,009
and prevents variable mutations

00:07:32,190 --> 00:07:36,990
if you use an IDE that is compatible

00:07:35,070 --> 00:07:40,170
with typescript which most are at this

00:07:36,990 --> 00:07:42,720
point the IDE is informed in real time

00:07:40,170 --> 00:07:43,890
by the typescript compiler on its rich

00:07:42,720 --> 00:07:46,860
type information

00:07:43,890 --> 00:07:49,860
there's better autocomplete snippet

00:07:46,860 --> 00:07:52,770
generation renaming and targeting across

00:07:49,860 --> 00:07:58,650
the entire code base compilation errors

00:07:52,770 --> 00:08:01,230
and more and these are some examples

00:07:58,650 --> 00:08:02,880
from our code base directly if we

00:08:01,230 --> 00:08:06,030
reference a component that hasn't been

00:08:02,880 --> 00:08:12,480
imported the IDE will automatically add

00:08:06,030 --> 00:08:15,420
it to our import list for us if you

00:08:12,480 --> 00:08:17,220
start typing out an enum the IDE will

00:08:15,420 --> 00:08:20,840
automatically reference all of the

00:08:17,220 --> 00:08:20,840
possible values that you can use

00:08:22,850 --> 00:08:27,660
typescript provides exportable

00:08:25,080 --> 00:08:29,490
interfaces which makes communicating the

00:08:27,660 --> 00:08:32,210
intents and limits of your component

00:08:29,490 --> 00:08:32,210
seamless

00:08:32,310 --> 00:08:37,740
an interface is basically the contract

00:08:35,610 --> 00:08:40,829
that the component must conform to and

00:08:37,740 --> 00:08:43,289
it states what needs to be or could be

00:08:40,829 --> 00:08:46,110
done but doesn't specify how it will be

00:08:43,289 --> 00:08:48,420
done an interface contains the name of

00:08:46,110 --> 00:08:51,629
all of the properties along with all of

00:08:48,420 --> 00:08:53,730
their types it also includes a signature

00:08:51,629 --> 00:08:56,209
for functions along with the type of

00:08:53,730 --> 00:08:59,160
arguments and the return type for

00:08:56,209 --> 00:09:03,300
example the title function returns a

00:08:59,160 --> 00:09:05,430
string in typescript you can also export

00:09:03,300 --> 00:09:07,559
these interfaces allowing similar

00:09:05,430 --> 00:09:11,129
components to share the same contracts

00:09:07,559 --> 00:09:13,529
ensuring consistency so here we've made

00:09:11,129 --> 00:09:15,660
an interface called core interactive

00:09:13,529 --> 00:09:18,300
public props for anything that would

00:09:15,660 --> 00:09:21,019
need to share link related interaction

00:09:18,300 --> 00:09:21,019
design concerns

00:09:23,180 --> 00:09:28,760
for our link component we've extended

00:09:25,940 --> 00:09:31,370
the core link interface to use the same

00:09:28,760 --> 00:09:33,710
core interactive public props so core

00:09:31,370 --> 00:09:36,470
link will get things like the title prop

00:09:33,710 --> 00:09:38,570
for free with added props that we want

00:09:36,470 --> 00:09:45,200
to stay specific to core link like

00:09:38,570 --> 00:09:50,510
underlined so how does typescript

00:09:45,200 --> 00:09:51,230
specifically help Design Systems more

00:09:50,510 --> 00:09:53,930
than anything

00:09:51,230 --> 00:09:56,090
typescript helps create trust and a

00:09:53,930 --> 00:09:59,780
stronger relationship between design and

00:09:56,090 --> 00:10:01,460
development designers can trust that

00:09:59,780 --> 00:10:02,180
their designs are being implemented

00:10:01,460 --> 00:10:04,970
correctly

00:10:02,180 --> 00:10:07,190
and developers can trust that they have

00:10:04,970 --> 00:10:11,120
access to all of the information they

00:10:07,190 --> 00:10:15,080
need about a component upon usage let me

00:10:11,120 --> 00:10:17,630
explain that further as I was

00:10:15,080 --> 00:10:19,820
researching typescript I came across a

00:10:17,630 --> 00:10:22,760
really great phrase describing what

00:10:19,820 --> 00:10:26,180
typescript is like interface oriented

00:10:22,760 --> 00:10:29,330
development typescript encourages

00:10:26,180 --> 00:10:32,090
developers to develop exposing

00:10:29,330 --> 00:10:34,970
interfaces which keeps other developers

00:10:32,090 --> 00:10:38,200
who use the components informed of what

00:10:34,970 --> 00:10:38,200
the API consists of

00:10:39,520 --> 00:10:45,680
typescript allows developers to focus on

00:10:42,590 --> 00:10:48,820
exposed API rather than having to know

00:10:45,680 --> 00:10:50,930
all the code by heart because of this

00:10:48,820 --> 00:10:54,710
typescript can enable a softer

00:10:50,930 --> 00:10:56,360
onboarding for code bases and especially

00:10:54,710 --> 00:10:58,250
for design related and front-end

00:10:56,360 --> 00:11:00,950
specific code which most developers

00:10:58,250 --> 00:11:07,160
don't want to focus on the IDE has

00:11:00,950 --> 00:11:08,570
really great autocomplete here's an

00:11:07,160 --> 00:11:11,360
example of how we're able to achieve

00:11:08,570 --> 00:11:14,150
developer trust by using typescript in

00:11:11,360 --> 00:11:16,700
our design system like most design

00:11:14,150 --> 00:11:19,550
systems we provide documentation for

00:11:16,700 --> 00:11:21,530
component usage and guidelines something

00:11:19,550 --> 00:11:23,930
great were allowed to do because of

00:11:21,530 --> 00:11:28,280
typescript is static code analysis of

00:11:23,930 --> 00:11:30,500
each components props so for our

00:11:28,280 --> 00:11:35,150
component pagination control which you

00:11:30,500 --> 00:11:38,000
saw here we have all of the possible

00:11:35,150 --> 00:11:43,730
props you could use on this component

00:11:38,000 --> 00:11:45,410
listed out in this interface in our

00:11:43,730 --> 00:11:50,210
documentation if you go to the

00:11:45,410 --> 00:11:52,580
properties tab of each component you'll

00:11:50,210 --> 00:11:56,200
find those same props listed out for our

00:11:52,580 --> 00:11:56,200
developers to easily reference

00:11:58,630 --> 00:12:03,430
it's the same exact list of props with

00:12:01,449 --> 00:12:05,860
additional information about what the

00:12:03,430 --> 00:12:07,810
props type is and descriptions that we

00:12:05,860 --> 00:12:10,209
generate from comments in the code

00:12:07,810 --> 00:12:13,269
itself so you can see that the interface

00:12:10,209 --> 00:12:15,399
is there we using static code analysis

00:12:13,269 --> 00:12:21,399
took all of those props and turned them

00:12:15,399 --> 00:12:23,649
into documentation we've taken it a step

00:12:21,399 --> 00:12:25,839
further by also offering developers a

00:12:23,649 --> 00:12:28,480
functional prate playground to test

00:12:25,839 --> 00:12:32,399
components in with the same prop list as

00:12:28,480 --> 00:12:35,470
well on each of our documentation pages

00:12:32,399 --> 00:12:40,930
we offer a link to open a playground for

00:12:35,470 --> 00:12:43,750
each component this is an example of

00:12:40,930 --> 00:12:45,970
what a playground looks like the

00:12:43,750 --> 00:12:49,839
playground offers developers a way to

00:12:45,970 --> 00:12:52,779
configure all of the props use them and

00:12:49,839 --> 00:12:55,449
work with them to create the version of

00:12:52,779 --> 00:12:58,029
the component that they need the code

00:12:55,449 --> 00:12:59,740
changes in real time as well so that

00:12:58,029 --> 00:13:02,529
they could copy and paste the code if

00:12:59,740 --> 00:13:04,389
they wanted to by having all of our

00:13:02,529 --> 00:13:07,240
props per component listed out in

00:13:04,389 --> 00:13:09,339
interfaces we're able to easily make use

00:13:07,240 --> 00:13:11,709
of static code analysis and provide

00:13:09,339 --> 00:13:14,670
better tooling for our developers and

00:13:11,709 --> 00:13:14,670
for our designers

00:13:17,690 --> 00:13:22,790
typescript also enables designer trust

00:13:20,300 --> 00:13:25,520
take a component design as simple as

00:13:22,790 --> 00:13:31,070
this a progress bar which we use on our

00:13:25,520 --> 00:13:35,500
twitch website all over the place with

00:13:31,070 --> 00:13:38,600
the combination of interfaces and enums

00:13:35,500 --> 00:13:41,570
the components can include all possible

00:13:38,600 --> 00:13:43,820
variations of design so the developer

00:13:41,570 --> 00:13:45,890
can easily get the design right without

00:13:43,820 --> 00:13:50,080
having to rely on copying and pasting

00:13:45,890 --> 00:13:53,270
code knowing specific class names etc

00:13:50,080 --> 00:13:55,940
the IDE will also include all of these

00:13:53,270 --> 00:13:57,980
values through autocomplete and smart

00:13:55,940 --> 00:14:00,440
suggestions so the designers don't need

00:13:57,980 --> 00:14:03,230
to redline all of their design mocks or

00:14:00,440 --> 00:14:05,060
their specs and the developers know what

00:14:03,230 --> 00:14:07,900
exact variations they could possibly

00:14:05,060 --> 00:14:07,900
choose from

00:14:10,850 --> 00:14:15,859
our design system also uses strict

00:14:13,459 --> 00:14:18,259
naming conventions so that our source of

00:14:15,859 --> 00:14:21,529
truth doesn't have to be production code

00:14:18,259 --> 00:14:23,479
as it is for many companies our source

00:14:21,529 --> 00:14:27,350
of truth can actually start and live in

00:14:23,479 --> 00:14:29,899
the design for example in our figma UI

00:14:27,350 --> 00:14:32,889
kit we have all of our typography and

00:14:29,899 --> 00:14:36,289
all of our colors all of our text types

00:14:32,889 --> 00:14:38,149
mapped out and named based on what we

00:14:36,289 --> 00:14:41,839
would want the functional color and type

00:14:38,149 --> 00:14:46,519
variables to be we then map those

00:14:41,839 --> 00:14:49,129
variables to props and provide the exact

00:14:46,519 --> 00:14:52,009
the exact same type styles and color

00:14:49,129 --> 00:14:54,199
styles to our components because all of

00:14:52,009 --> 00:14:56,959
our style opinions get translated to

00:14:54,199 --> 00:14:59,899
props in the code we're able to maintain

00:14:56,959 --> 00:15:03,470
a strict and defined system for all of

00:14:59,899 --> 00:15:05,720
our designs this allows for us to rarely

00:15:03,470 --> 00:15:08,959
deviate from the system ensuring

00:15:05,720 --> 00:15:11,289
efficiency in code and consistency in

00:15:08,959 --> 00:15:11,289
design

00:15:14,130 --> 00:15:21,509
as a bonus typescript can also enable

00:15:17,579 --> 00:15:23,339
business and user trust according to a

00:15:21,509 --> 00:15:26,160
study done by a computer science

00:15:23,339 --> 00:15:28,500
researcher Adrian Collier using

00:15:26,160 --> 00:15:31,589
typescript results in a 15 percent

00:15:28,500 --> 00:15:33,930
decrease of bugs strong typing ensures

00:15:31,589 --> 00:15:36,089
that there will be less bugs which helps

00:15:33,930 --> 00:15:37,370
PM's and other people focused on the

00:15:36,089 --> 00:15:39,810
business side of things

00:15:37,370 --> 00:15:42,779
trust that your features will be more

00:15:39,810 --> 00:15:44,970
efficient and of course the users will

00:15:42,779 --> 00:15:50,250
appreciate experiencing less bugs as

00:15:44,970 --> 00:15:52,259
well hopefully by this point I've

00:15:50,250 --> 00:15:54,589
convinced you that design systems could

00:15:52,259 --> 00:15:57,389
greatly benefit from using typescript

00:15:54,589 --> 00:15:59,399
but I want to close out this talk by

00:15:57,389 --> 00:16:01,980
expressing that when it comes to writing

00:15:59,399 --> 00:16:05,190
code it's important to understand that

00:16:01,980 --> 00:16:07,920
form follows function what does this

00:16:05,190 --> 00:16:10,529
mean it means that the shape of our

00:16:07,920 --> 00:16:12,569
structures and more abstractly the tools

00:16:10,529 --> 00:16:15,709
that we choose to use and how we use

00:16:12,569 --> 00:16:18,569
them are dictated by their functions

00:16:15,709 --> 00:16:21,060
when it comes to web development the

00:16:18,569 --> 00:16:23,610
purpose of everything we do is to make a

00:16:21,060 --> 00:16:26,089
more useable and safe set of websites

00:16:23,610 --> 00:16:26,089
and apps

00:16:27,860 --> 00:16:34,520
so to take that a step further intent

00:16:31,010 --> 00:16:37,820
follows impact as a developer or even a

00:16:34,520 --> 00:16:41,090
designer your intent or lack of intent

00:16:37,820 --> 00:16:43,310
behind anything you create follows the

00:16:41,090 --> 00:16:47,030
impact that it has on users of the web

00:16:43,310 --> 00:16:49,270
and on each other it's always cool to

00:16:47,030 --> 00:16:51,800
use the newest libraries or frameworks

00:16:49,270 --> 00:16:54,140
but it's important to gauge whether they

00:16:51,800 --> 00:16:57,020
actually impact the users and maintain

00:16:54,140 --> 00:16:59,390
errs positively and if the creators of

00:16:57,020 --> 00:17:02,570
the framework had safety and usability

00:16:59,390 --> 00:17:04,760
in mind your intent behind the software

00:17:02,570 --> 00:17:07,070
you build and put out into the world

00:17:04,760 --> 00:17:09,290
creates more impact than you might

00:17:07,070 --> 00:17:12,350
expect so it's important to use the

00:17:09,290 --> 00:17:17,859
tools that consider everyone safety and

00:17:12,350 --> 00:17:22,289
Trust thank you

00:17:17,859 --> 00:17:22,289

YouTube URL: https://www.youtube.com/watch?v=hbsIOHktvfo


