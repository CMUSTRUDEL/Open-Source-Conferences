Title: Don't block the event loop!JavaScript Async for Effortless UX|Jaeseok Kang|JSConf Korea 2019(en sub)
Publication date: 2019-10-01
Playlist: JSConf Korea 2019
Description: 
	Page freeze, glitchy animation, and slow scrolling. They follow us everywhere, and we'd like them to stop. This talk will get to the bottom of these issues by delving into the Javascript engine and concepts like task, call-stack, and event-loops. I will also introduce several ways to tackle these problems and walk you through a demo to help you understand.
Captions: 
	00:00:11,812 --> 00:00:12,526
Hello.

00:00:13,119 --> 00:00:18,473
I'm Kang Jaeseok and I'm here to talk about 'Javascript Async for effortless UX'.

00:00:22,999 --> 00:00:27,202
Sharing this content with all of you here,

00:00:27,281 --> 00:00:30,882
and at a grand stage like the JS Conf Korea- it's a true honor.

00:00:31,758 --> 00:00:34,104
There's even small commonalities like this.

00:00:36,181 --> 00:00:37,640
What I'm going to talk about today is...

00:00:38,988 --> 00:00:41,334
this is the general flow of my story.

00:00:42,604 --> 00:00:44,796
First, we are going to talk about a problem.

00:00:45,130 --> 00:00:51,599
Then, we are going to analyze the cause, and based on the cause, we are going to seek for some solutions.

00:00:55,645 --> 00:00:57,991
First, I'd like to handle this type of problem.

00:00:59,651 --> 00:01:03,003
We encounter this problem from time to time when using web applications.

00:01:03,838 --> 00:01:08,799
The scroll stops, or what I typed doesn't show on the screen right away

00:01:09,659 --> 00:01:12,724
or the animation isn't smooth.

00:01:14,594 --> 00:01:20,481
As you can see, these are the main examples that can distract users.

00:01:21,959 --> 00:01:26,648
There are various causes to these problems.

00:01:27,168 --> 00:01:29,700
First, the animation itself could've been wrong.

00:01:30,528 --> 00:01:33,486
There could be a problem in the environment.

00:01:34,939 --> 00:01:39,987
But in this session, we are going to analyze the cause focused on these factors.

00:01:42,140 --> 00:01:45,660
One of the features of Javascript language: the run-to-completion,

00:01:45,660 --> 00:01:52,380
Javascript engine, and the Call stack event loop are the three factors.

00:01:53,640 --> 00:02:00,060
And based on the analyzed causes, I'm going to suggest some solutions.

00:02:02,085 --> 00:02:05,086
One thing I want you to keep in mind before we start,

00:02:05,269 --> 00:02:10,276
is that the things I'm going to explain aren't the exact solutions

00:02:10,759 --> 00:02:15,946
but are part of the progress in finding a better solution to a problem.

00:02:18,312 --> 00:02:21,074
Before we start, what is a user experience?

00:02:21,304 --> 00:02:25,510
I'm not a UX designer or an expert in that field.

00:02:25,851 --> 00:02:28,189
So I'm being careful here but,

00:02:29,204 --> 00:02:32,514
when you think about what a user experience is,

00:02:32,567 --> 00:02:41,655
after all, it's about the user's feeling towards the product, system and service.

00:02:43,511 --> 00:02:46,016
Then what are the common features of these problems?

00:02:46,540 --> 00:02:54,615
The interaction that the user intended, like page loading, typing and animation, didn't work in time.

00:02:55,782 --> 00:02:57,614
If the interaction doesn't work in time

00:02:57,875 --> 00:03:02,770
Like I said, in the user experience's point of view, it's a negative factor.

00:03:04,786 --> 00:03:09,352
Then what caused these problems?

00:03:09,841 --> 00:03:12,596
If the intended action doesn't act in time,

00:03:13,039 --> 00:03:18,307
we can suspect that something is blocking the act and making it slow.

00:03:18,905 --> 00:03:26,263
To unravel this suspicion, let's take a look at how the Javascript code works internally.

00:03:27,661 --> 00:03:31,812
First, I want to mention the traits of Run-to-completion.

00:03:33,491 --> 00:03:39,637
Run-to-completion is, when a process of one message starts,

00:03:39,638 --> 00:03:44,332
no other process can get in the way until this message process is finished.

00:03:45,080 --> 00:03:48,581
We'll look at some example code.

00:03:48,634 --> 00:03:50,278
What would happen if we run this code?

00:03:53,658 --> 00:03:57,304
Set running to true first,

00:03:58,299 --> 00:04:00,655
and the setTimeout function can run.

00:04:01,821 --> 00:04:03,925
Then, start the while loop

00:04:05,382 --> 00:04:08,188
and check if the running has changed; but it would still be true.

00:04:09,228 --> 00:04:13,064
Then the running message would be on the console.

00:04:14,703 --> 00:04:19,957
After about 500 ms, running still would be true.

00:04:20,928 --> 00:04:24,131
Then we would never be out of the while loop.

00:04:25,668 --> 00:04:28,993
You could also encounter this familiar icon.

00:04:29,894 --> 00:04:33,060
As you all know, this is an icon shown when the Chrome tab process is dead.

00:04:34,774 --> 00:04:39,921
As a developer, we should understand the run-to-completion process well and work hard not to meet this icon.

00:04:41,154 --> 00:04:46,417
So, I've shown you the process with example code to explain the run-to-completion process.

00:04:47,484 --> 00:04:53,776
In the Javascript engine, there's a place that acts as a curser to mark where the code is being processed.

00:04:53,907 --> 00:04:54,973
That is the call stack.

00:04:56,408 --> 00:05:02,325
Every time there's a request in Javascript, the requests are kept in call stack in order and are processed.

00:05:03,298 --> 00:05:07,102
For example, they show what function is called and acted,

00:05:07,512 --> 00:05:10,558
and they manage the function that should be called next.

00:05:13,759 --> 00:05:17,676
This is code that calls up the hello function, that has code which writes 'Hello',

00:05:18,294 --> 00:05:27,062
and also defines the helloJsConf function that has code that writes 'JsConfKorea',

00:05:27,815 --> 00:05:31,825
and ultimately calls up the helloJsConf function.

00:05:33,228 --> 00:05:35,370
While this code is processed, let's see

00:05:37,862 --> 00:05:40,820
what happens in the Call stack.

00:05:41,803 --> 00:05:44,077
First, the main code block is stacked

00:05:46,154 --> 00:05:49,133
and by calling the helloJsConf function, it joins the stack.

00:05:49,876 --> 00:05:52,892
Then it calls the hello function

00:05:54,584 --> 00:05:57,146
and it would request to write the hello message on the console.

00:05:59,402 --> 00:06:02,152
By writing the hello message, it's eliminated from the stack.

00:06:03,238 --> 00:06:14,903
JsConfKorea, which was next to the Hello function call, requests to write 'Js Conf Korea' message and gets eliminated from the stack.

00:06:15,942 --> 00:06:21,156
So helloJsConf function has done its work, so it's eliminated form the stack.

00:06:21,768 --> 00:06:24,422
After all the work is done, the main block is eliminated.

00:06:25,432 --> 00:06:31,599
As you can see, Javascript acts with the Call stack structure and run-to-completion method.

00:06:32,822 --> 00:06:38,392
When these methods are acted out, what kind of situations would cause a problem?

00:06:41,282 --> 00:06:43,582
Let's give an example situation

00:06:45,047 --> 00:06:51,406
If you were processing each request at the call stack, and you come up with a task with some delays, what happens?

00:06:54,243 --> 00:06:56,413
It operates in the order of requests, like in the exercise before

00:07:00,476 --> 00:07:05,640
And it encounters a request that takes a lot of processing time, like the function 'someExpensive',

00:07:06,109 --> 00:07:12,862
then there will be delays in things like displaying 'hello' or 'JSConfKorea', which was performed instantly before.

00:07:15,677 --> 00:07:18,315
Then we have a question here.

00:07:18,498 --> 00:07:24,236
Javascript is supposed to process multiple tasks at a single call stack structure,

00:07:24,913 --> 00:07:27,785
but when we think of using web services

00:07:28,516 --> 00:07:29,360
we click on something,

00:07:30,297 --> 00:07:34,599
we scroll, and we type, and the data is added and displayed on screen,

00:07:35,673 --> 00:07:41,775
and it doesn't look like the tasks are being waited upon and processed in order.

00:07:42,660 --> 00:07:46,314
Then, how are they managing these complex sync issues?

00:07:48,890 --> 00:07:52,154
The following could be the answers to this question.

00:07:53,117 --> 00:07:55,469
Web APIs that help the solution of synchronistic issues,

00:07:55,711 --> 00:08:01,890
DOM events or XMLHttpRequest; the api's used to call Ajax.

00:08:02,468 --> 00:08:07,110
There are also setTimeout, which manages the timer, Promise, or RequestAnimationFrame.

00:08:08,073 --> 00:08:10,165
It's hard to not use these in contemporary web development.

00:08:10,426 --> 00:08:14,210
And the event loop, which I will discuss further in the next chapter.

00:08:15,563 --> 00:08:22,057
These two enables asynchronous programming with Javascript.

00:08:23,670 --> 00:08:27,168
Then we will examine the event loop in depth.

00:08:28,990 --> 00:08:33,008
MDN describes the event loop with codes, like shown.

00:08:33,321 --> 00:08:39,215
To interpret: assuming that waitForMessage function operates synchronously

00:08:39,683 --> 00:08:45,579
the code runs the infinite loop waiting for messages, and if there are any, the code would process the next message.

00:08:47,140 --> 00:08:51,029
The event loop is not a component of the Javascript engine.

00:08:51,290 --> 00:08:54,423
Which means, supporting asynchronicity

00:08:54,970 --> 00:09:00,212
would not be the Javascript engine, but the environment that the engine is driven on, like the browser or node.js.

00:09:00,551 --> 00:09:02,175
This is where the event loop is grounded.

00:09:02,593 --> 00:09:09,137
In such an environment, the loop controls which task to shove into the call stack.

00:09:10,569 --> 00:09:14,613
This is a simple explanation of how the event loop works.

00:09:15,862 --> 00:09:18,970
If there are tasks, execute the oldest one,

00:09:19,439 --> 00:09:24,965
And there aren't any tasks, wait for one, and if there's any, go back to number 1 and repeat.

00:09:28,321 --> 00:09:36,402
Now I will discuss the event loop further with the aforementioned code, using web APIs that manages asynchronicity.

00:09:37,157 --> 00:09:40,426
Look at the code here: setTimeout is, as you know,

00:09:40,427 --> 00:09:45,564
a function that creates timer events, wait for a time, and executes them.

00:09:46,695 --> 00:09:51,337
Like you see in the example code, if there is no factor it will be the default value, 0.

00:09:52,404 --> 00:09:57,203
The 0 in the timer gives the feeling it should be executed right away, but that's not true.

00:09:57,438 --> 00:10:01,170
The reason for that, we will find out the steps of how the code works.

00:10:05,309 --> 00:10:12,869
The Promise is an API dealing with future situations in which asynchronous operations have succeeded or failed at processing.

00:10:13,364 --> 00:10:19,803
This code restores the Promise's transitioning to empty values with the resolve method,

00:10:20,012 --> 00:10:24,786
and hands the callback over, when the transition is completed with the then method.

00:10:24,865 --> 00:10:26,047
Let's take a look.

00:10:28,260 --> 00:10:31,368
You see, first the setTimeout is called.

00:10:31,759 --> 00:10:35,047
And the callback goes to the task waiting line.

00:10:37,388 --> 00:10:38,934
Promise is called over,

00:10:40,677 --> 00:10:43,159
and the part that was handed over to the then method through callback

00:10:44,330 --> 00:10:46,188
It should be in the task waiting line

00:10:47,905 --> 00:10:52,106
but as you can see, its in a slightly different waiting line.

00:10:53,954 --> 00:10:59,565
In ES6, to deal with the synchronicity, APIs like Promise are added

00:10:59,930 --> 00:11:05,250
but these deal with tasks slightly differently from regular tasks, which are called microtasks.

00:11:06,135 --> 00:11:10,049
The difference between tasks and microtasks is this.

00:11:11,376 --> 00:11:17,867
Tasks are the things that need to be executed in order, in the browser or other places.

00:11:18,883 --> 00:11:25,973
Their sources can be regular script execution, setTimeout, or callbacks from UI events.

00:11:27,250 --> 00:11:33,352
Microtasks are asynchronous tasks that come right after the task that's being executed now.

00:11:33,847 --> 00:11:38,359
Which means that microtasks have higher priorities than regular tasks.

00:11:38,828 --> 00:11:45,685
Like I mentioned, its sources could be the Promise, Observer API, and the process.nextTick of Node.js.

00:11:48,002 --> 00:11:54,828
And so coming back to my earlier definition of event loops, we'll need a little modification.

00:11:57,796 --> 00:11:59,367
If you look at it, before waiting for the task,

00:12:00,279 --> 00:12:03,307
it needs to check if there are any microtasks

00:12:03,776 --> 00:12:07,064
and if the microtasks are empty, then it will run the tasks.

00:12:09,120 --> 00:12:13,711
Then, when we come back to the example code, now we can see what the event loop does.

00:12:14,674 --> 00:12:17,104
The callback is handed over to the Promise,

00:12:17,859 --> 00:12:22,319
it is pushed into the call stack through the event loop as a microtask,

00:12:22,919 --> 00:12:23,633
and it is executed.

00:12:24,414 --> 00:12:27,547
And the task that displays "hello" would be executed.

00:12:30,306 --> 00:12:33,755
Then, based on the understanding of event loops,

00:12:33,756 --> 00:12:38,840
can we solve all the problems if we use web api's dealing with asynchronisity?

00:12:42,577 --> 00:12:45,267
Unfortunately, no.

00:12:45,476 --> 00:12:51,006
Still, because of the tasks in front of that, there is still possibility that the next tasks may be blocked.

00:12:51,371 --> 00:12:52,007
Shall we take a look?

00:12:53,881 --> 00:12:55,245
Like the example before,

00:12:56,415 --> 00:12:57,780
call setTimeout,

00:12:58,535 --> 00:13:00,991
put the callback in the task queue,

00:13:05,706 --> 00:13:08,032
then call the Promise,

00:13:09,021 --> 00:13:10,021
The callbacks...

00:13:11,663 --> 00:13:12,377
One second,

00:13:15,138 --> 00:13:19,417
The callbacks to execute the expensive tasks of then go into the microtask queue.

00:13:22,824 --> 00:13:26,869
As I have mentioned, because microtasks have higher priority,

00:13:26,870 --> 00:13:31,728
the event loop has pushed higher-cost operations into the call stacks first.

00:13:33,205 --> 00:13:36,237
Therefore, the task of hitting 'Hello'

00:13:37,079 --> 00:13:39,143
will be blocked by the event loop.

00:13:41,638 --> 00:13:44,884
Obviously, if the task is completed, then it could be executed.

00:13:46,458 --> 00:13:50,284
So, though it took a while to get here,

00:13:50,462 --> 00:13:56,006
to summarize, the causes and process of inconvenient UIs and UXs are as follows.

00:13:58,054 --> 00:14:01,960
Because tasks are always executed sequentially by the event loop,

00:14:01,961 --> 00:14:05,619
other tasks cannot be performed until a given task at hand is finished.

00:14:06,863 --> 00:14:12,587
And since microtask queue has higher priority than other task queues,

00:14:12,588 --> 00:14:17,578
tasks like UI events cannot be executed until all micro-tasks in queue are cleared.

00:14:18,521 --> 00:14:20,145
Thus, tasks which take long time to execute,

00:14:20,328 --> 00:14:26,829
for example, if tasks and microtasks involving multiplication calculation of CPU bounds are being executed,

00:14:27,516 --> 00:14:32,839
then events directly related to UI, such as click, text, rendering etc, can be blocked.

00:14:32,970 --> 00:14:37,316
This means that this may be 'an element harmful for user experience'.

00:14:40,519 --> 00:14:45,099
Then, how can this blocking be resolved?

00:14:47,022 --> 00:14:51,126
I will illustrate through the demo I've prepared.

00:14:51,381 --> 00:14:57,964
This material is already public, so please feel free to look it up if you are interested.

00:14:58,891 --> 00:14:59,809
Prior to the demo,

00:15:01,860 --> 00:15:05,578
let's take a look at how the demo works, through the code.

00:15:07,606 --> 00:15:08,835
It's simple code.

00:15:08,836 --> 00:15:11,762
It's code that whenever a text input event occurs,

00:15:12,295 --> 00:15:19,777
it creates HTML of a rectangular element of random color, proportional to the number of input characters,

00:15:20,142 --> 00:15:21,468
and displays it on the screen.

00:15:21,932 --> 00:15:24,445
There are two main points here.

00:15:25,376 --> 00:15:27,163
There are many iterations,

00:15:28,044 --> 00:15:31,864
and that the cost of DOM renewals are high.

00:15:33,160 --> 00:15:39,223
I think this scenario of CPU bound high-cost operations would be sufficient to recreate the same blocking.

00:15:40,208 --> 00:15:42,980
Let's take a quick look at the demo.

00:15:56,736 --> 00:15:58,605
It's a simple UI.

00:15:59,070 --> 00:16:06,598
There's a text input box in the middle, and the animation surrounds the box.

00:16:06,764 --> 00:16:14,312
When I type a message, DOM whose number corresponds to the length of the message I typed, would be renewed on the screen.

00:16:15,527 --> 00:16:19,737
And I'm in the perspective of user interaction this time.

00:16:19,738 --> 00:16:22,928
I'd like the audience to focus on whether my text inputs are being well-reflected,

00:16:22,981 --> 00:16:27,691
and if the animation is functioning properly.

00:16:28,121 --> 00:16:29,919
I will try typing a message here.

00:16:37,520 --> 00:16:44,943
You can see that the text freezes at about J, and the animation freezes as well.

00:16:45,435 --> 00:16:49,335
And the rendering is reflected after a few whole seconds.

00:16:54,408 --> 00:16:55,276
Coming back,

00:17:01,003 --> 00:17:05,050
this is the result I got from profiling the demo using Chrome developer tool.

00:17:05,800 --> 00:17:09,775
It looks a bit complex, but there are only two main points to focus on.

00:17:10,816 --> 00:17:12,976
First, the top frame section.

00:17:13,492 --> 00:17:16,258
I don't know if you can see here..

00:17:16,592 --> 00:17:20,175
But, almost three seconds were consumed for just 1 frame.

00:17:21,472 --> 00:17:26,848
Next, regarding the user interaction in this interaction section below,

00:17:27,863 --> 00:17:30,059
you can see the analyzed results.

00:17:30,186 --> 00:17:37,379
The red underlines within the orange blocks refer to the time consumed waiting for the main thread of user interaction.

00:17:37,836 --> 00:17:41,151
So, the very long red underlines mean that

00:17:41,152 --> 00:17:45,782
considerable time has been spent for each interaction.

00:17:46,314 --> 00:17:54,173
So, now I should introduce resolutions for minimizing these problems.

00:17:55,275 --> 00:17:58,275
I have two main solutions.

00:17:58,692 --> 00:17:59,356
First,

00:18:00,834 --> 00:18:04,786
the method of delegating the task to another thread,

00:18:04,915 --> 00:18:07,221
since the block happens because of the structure of a single call stack and event loop.

00:18:07,712 --> 00:18:12,551
Meaning that we could try multi-threading, if it's possible on Javascript as well.

00:18:14,003 --> 00:18:17,220
Or another solution, if the task causing the block is too heavy,

00:18:17,221 --> 00:18:20,089
then we can split the task into smaller tasks.

00:18:23,131 --> 00:18:27,095
Multithreading on javascript can be done through web workers.

00:18:27,120 --> 00:18:32,692
Web workers enable script operation in the background thread, which is separate from the main thread.

00:18:34,556 --> 00:18:38,218
Worker thread is created off the main thread,

00:18:39,260 --> 00:18:41,346
so that message-based communication with the worker thread is possible.

00:18:42,252 --> 00:18:47,624
Through postMessage, execution of long running tasks can be requested to the worker thread.

00:18:48,338 --> 00:18:50,196
The worker thread will execute this,

00:18:50,842 --> 00:18:53,875
and there will be no blocks in the main thread due to this execution.

00:18:55,202 --> 00:18:58,550
When the task is complete, results will be delivered through postMessage again.

00:18:59,219 --> 00:19:02,249
And the main thread can then do something else with it.

00:19:03,900 --> 00:19:05,876
Similarly, looking at this from the code,

00:19:07,354 --> 00:19:09,111
the explanation is pretty much the same.

00:19:09,112 --> 00:19:13,941
Worker object will be created, and through the postMessage method of the worker object,

00:19:14,375 --> 00:19:17,424
the long running task can be requested to the worker thread when necessary,

00:19:18,462 --> 00:19:23,159
and when the worker thread has completed it, the code will handle the results.

00:19:24,290 --> 00:19:28,701
Then, we will take a look at a demo which utilizes this method.

00:19:35,092 --> 00:19:37,411
I'll type the same message.

00:19:42,037 --> 00:19:44,977
Okay, doesn't it seem better than before?

00:19:45,134 --> 00:19:49,904
But, it still seems a bit slow.

00:19:55,572 --> 00:20:00,098
Then, let's take a look at the demo profiling results which have been calculated with the explained methods.

00:20:00,119 --> 00:20:00,901
Let's see.

00:20:02,601 --> 00:20:05,933
You can see that the duration of frame and the duration of interaction

00:20:07,645 --> 00:20:10,157
have very much decreased.

00:20:11,709 --> 00:20:19,902
However, as seen in the demo, this method too fails to provide lag-free usage.

00:20:21,518 --> 00:20:26,091
Most of the display devices these days are 60fps, I believe?

00:20:26,349 --> 00:20:30,784
Considering the display at the standard of 1 frame per 16ms,

00:20:31,438 --> 00:20:36,040
if you look up here, it is taking around 200ms, 600ms and if longer it takes up to around 900 ms.

00:20:37,155 --> 00:20:41,971
My suggested reason, the operation that is CPU bound has been delegated to the worker thread

00:20:42,305 --> 00:20:46,919
but operations like DOM renewals are still happening in the main thread.

00:20:47,781 --> 00:20:53,443
The limitations of web workers are that the main thread and the worker thread can only communicate via a system of messages.

00:20:53,935 --> 00:20:59,375
Meaning, the worker cannot access the DOM or the context of the main thread directly.

00:21:01,959 --> 00:21:06,971
Next, there should be a way to run tasks asynchronously by splitting the heavy tasks into smaller ones.

00:21:09,474 --> 00:21:12,710
It should look something like this when visualized.

00:21:14,243 --> 00:21:17,691
If tasks in the back are getting blocked due to long-running tasks in the front,

00:21:18,040 --> 00:21:24,391
this is a way of scheduling the tasks by splitting the large task into pieces, and placing them between other tasks.

00:21:25,736 --> 00:21:29,910
Did you enjoy the previous session on generators?

00:21:29,911 --> 00:21:32,049
I used the generator as well

00:21:33,194 --> 00:21:36,321
to create an environment of scheduling,

00:21:37,591 --> 00:21:38,721
where you can easily manage your schedule.

00:21:38,951 --> 00:21:43,627
This is also open so feel free to take a look if you'd like.

00:21:45,027 --> 00:21:46,399
I don't know if you can see the code.

00:21:46,655 --> 00:21:51,349
Unlike executing the work once input event is triggered from the existing code,

00:21:51,658 --> 00:21:59,983
here it is calling chunkGenerator on an interface called runChunks, and is passing it on.

00:22:00,703 --> 00:22:05,219
chunkGenerators slice the existing iteration into appropriate chunk units

00:22:05,454 --> 00:22:07,936
and have a pattern of yielding them at the corresponding units.

00:22:08,723 --> 00:22:10,851
runChunks take the works yielded

00:22:11,684 --> 00:22:18,018
and take the role of loading them into the task queue via asynchronous APIs, like the aforementioned setTimeout.

00:22:18,861 --> 00:22:20,891
Then let's take a look at

00:22:22,525 --> 00:22:23,383
the demo with this method applied.

00:22:29,857 --> 00:22:31,053
I will write the same message.

00:22:34,409 --> 00:22:35,339
Yes, in comparison,

00:22:36,736 --> 00:22:40,077
you can see that text input is blocked a lot less

00:22:42,289 --> 00:22:43,003
but still..

00:22:44,912 --> 00:22:49,964
rendering is getting delayed and happening all at once.

00:22:53,129 --> 00:22:55,879
At least text input is not blocked,

00:22:57,237 --> 00:22:58,867
at least we've took care of that.

00:23:01,048 --> 00:23:03,396
Likewise, let's look at the results from profiling.

00:23:04,377 --> 00:23:08,911
Here too, we can see that there has been a big improvement in the numerical aspect as well.

00:23:11,097 --> 00:23:13,519
Since we are already here, let's try to optimize it even more.

00:23:14,479 --> 00:23:17,713
It seems that the cost of updating DOM is quite high.

00:23:18,905 --> 00:23:21,981
We will approach it in the direction of minimizing the DOM update.

00:23:22,524 --> 00:23:26,244
The demo updates DOM depending on the text input,

00:23:27,182 --> 00:23:31,248
so I think it should be fine to only renew it at the last moment like before,

00:23:32,057 --> 00:23:35,223
and not renew it for every typed input, like in the last scenario.

00:23:37,247 --> 00:23:44,501
When the task is in a big chunk, the next task gets blocked so it cannot decide whether to update and continue the execution

00:23:44,753 --> 00:23:47,057
but since it has been sliced into smaller chunks

00:23:47,730 --> 00:23:50,172
applying this method would be possible.

00:23:51,391 --> 00:23:55,324
For example, you can check if it is in the middle of executing the task,

00:23:55,325 --> 00:24:00,046
and it if is, then you can cancel the corresponding task and execute a new task.

00:24:01,047 --> 00:24:01,737
Shall we take a look?

00:24:17,187 --> 00:24:22,697
As you can see, DOM is updated only once, when the final work is processed

00:24:22,750 --> 00:24:25,321
and the animation does not seem to stop.

00:24:25,322 --> 00:24:28,726
Text input is not blocked either.

00:24:38,305 --> 00:24:40,211
The profiling graph seems very tidy as well.

00:24:40,987 --> 00:24:45,297
Maximum duration of frame lasted a little longer at the moment of updating DOM

00:24:45,298 --> 00:24:46,910
and the rest of frames are quite good.

00:24:47,110 --> 00:24:49,710
Duration of interaction is really short too

00:24:55,083 --> 00:24:55,997
Oh, time flies.

00:24:56,311 --> 00:24:58,550
This is it, let me recap.

00:25:00,678 --> 00:25:08,362
When long-running tasks or microtasks block events like rendering, click, and text input,

00:25:08,363 --> 00:25:12,203
it is possible that a UI can harm user experience.

00:25:12,204 --> 00:25:12,939
This is

00:25:15,335 --> 00:25:22,346
due to the structure of the JavaScript engine, event loop and etc

00:25:22,347 --> 00:25:26,264
and one must understand it and handle it properly.

00:25:29,014 --> 00:25:35,518
And in order to handle this, one must delegate long running tasks to background thread like a Web Worker.

00:25:35,519 --> 00:25:41,643
Or, one can split the long-running task so that other important UI events are not blocked.

00:25:43,000 --> 00:25:43,710
That is the appropriate method;

00:25:44,562 --> 00:25:46,130
This is the summary.

00:25:47,556 --> 00:25:54,164
Actually, the demo I showed you and the assumed situations are rather extreme.

00:25:54,424 --> 00:25:57,992
It's hard for that to happen in common app codes as well,

00:25:57,993 --> 00:26:02,719
and it's a situation that you must try to avoid.

00:26:03,989 --> 00:26:07,021
We say the best way to optimize is to just avoid it

00:26:08,057 --> 00:26:12,207
and it is true that we should avoid expensive operation or excessive DOM updates.

00:26:12,857 --> 00:26:15,987
Nevertheless, the reason for me to come up here and share this topic,

00:26:16,685 --> 00:26:23,590
is that even if codes run smoothly, them being written with or without proper knowledge on their operation

00:26:23,591 --> 00:26:27,042
has a significant impact in the long run.

00:26:27,043 --> 00:26:31,345
I hope my intentions have been conveyed well. I will end it here.

00:26:31,346 --> 00:26:31,880

YouTube URL: https://www.youtube.com/watch?v=c7C8IcRqUUg


