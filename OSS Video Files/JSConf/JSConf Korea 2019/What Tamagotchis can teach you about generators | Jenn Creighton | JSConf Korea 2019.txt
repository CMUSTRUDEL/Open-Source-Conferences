Title: What Tamagotchis can teach you about generators | Jenn Creighton | JSConf Korea 2019
Publication date: 2019-10-04
Playlist: JSConf Korea 2019
Description: 
	What do Tamagotchis — everyone’s favorite digital pets from the 90s — and generators — pausible functions for async tasks — have in common? Both are really fun to play with. As a recent side project, I built a web-version of a Tamagotchi. But I struggled with one key element: how to handle a series of animations. What do you do when animations need to know that other animations are complete? What do you do when you’ve queued animations but a user event needs to be handle instead? This talk explores where I went wrong (hint: promises) and what worked (hint: generators). You’ll leave this talk with a solid grasp of how to combine promises, generators, and coroutines for async work — whether it’s for a Tamagotchi or your day-to-day work.
Captions: 
	00:00:07,280 --> 00:00:11,849
[Applause]

00:00:09,290 --> 00:00:14,219
I'm really excited to be kicking us off

00:00:11,849 --> 00:00:16,619
today and I'm very excited because I'll

00:00:14,219 --> 00:00:20,340
be talking about tamagotchis and es6

00:00:16,619 --> 00:00:22,380
generators so quick recap I'm Jen I'm a

00:00:20,340 --> 00:00:24,869
front-end architect at a company called

00:00:22,380 --> 00:00:26,910
the wing we are based out of the United

00:00:24,869 --> 00:00:29,699
States and we build co-working spaces

00:00:26,910 --> 00:00:32,130
that are women first if you want to

00:00:29,699 --> 00:00:35,700
reach me the best place is twitter my

00:00:32,130 --> 00:00:37,500
handle is girl code girl with a u and at

00:00:35,700 --> 00:00:39,600
the end I'm definitely gonna post these

00:00:37,500 --> 00:00:42,239
slides so if you miss something do not

00:00:39,600 --> 00:00:47,420
worry the slides are gonna be posted ok

00:00:42,239 --> 00:00:47,420
how many of you had a tamagotchi

00:00:47,899 --> 00:00:54,300
ok a good number of you so if you aren't

00:00:52,170 --> 00:00:56,940
familiar with what a Tomahawk is it was

00:00:54,300 --> 00:00:59,879
a really popular digital pet in the

00:00:56,940 --> 00:01:03,149
1990s it was a handheld device like this

00:00:59,879 --> 00:01:05,970
and the game was that a Tamagotchi would

00:01:03,149 --> 00:01:08,640
appear on the screen in a shell it would

00:01:05,970 --> 00:01:10,740
break out of its egg and then you were

00:01:08,640 --> 00:01:12,780
responsible for raising the Tamagotchi

00:01:10,740 --> 00:01:15,630
to adulthood so it would go from a baby

00:01:12,780 --> 00:01:17,670
like this to a teenager to an adult and

00:01:15,630 --> 00:01:19,500
then when it became an adult you didn't

00:01:17,670 --> 00:01:21,479
know what type of Tamagotchi you were

00:01:19,500 --> 00:01:24,330
gonna get so that was like the fun

00:01:21,479 --> 00:01:26,400
surprise of it now I had a Tamagotchi

00:01:24,330 --> 00:01:28,560
growing up in fact they were even banned

00:01:26,400 --> 00:01:30,090
from my school because they made a

00:01:28,560 --> 00:01:33,000
beeping sound when they need something

00:01:30,090 --> 00:01:34,590
from you and unfortunately that meant a

00:01:33,000 --> 00:01:39,000
lot of my Tamagotchis didn't make it

00:01:34,590 --> 00:01:41,159
rest in peace but I really really love

00:01:39,000 --> 00:01:43,380
this game growing up and I decided I

00:01:41,159 --> 00:01:47,040
want to make a web based version of it

00:01:43,380 --> 00:01:50,100
so my web-based version includes an SVG

00:01:47,040 --> 00:01:52,619
shell for the game the controls are

00:01:50,100 --> 00:01:55,640
actually made out of divs and then the

00:01:52,619 --> 00:01:57,659
screen is made out of the canvas element

00:01:55,640 --> 00:01:59,939
now if you've never worked with the

00:01:57,659 --> 00:02:02,700
canvas element it's really easy to work

00:01:59,939 --> 00:02:05,130
with you're going to query the Dom for

00:02:02,700 --> 00:02:06,930
the canvas element and then to draw on

00:02:05,130 --> 00:02:09,000
the canvas you're going to request the

00:02:06,930 --> 00:02:12,360
type of context that you want so in this

00:02:09,000 --> 00:02:12,790
case we want to D not 3d and then you're

00:02:12,360 --> 00:02:16,689
gonna

00:02:12,790 --> 00:02:17,890
an image to draw and some XY coordinates

00:02:16,689 --> 00:02:18,970
that I'm really not going to get into

00:02:17,890 --> 00:02:22,150
right now because they don't matter as

00:02:18,970 --> 00:02:23,500
much and you're gonna do draw image that

00:02:22,150 --> 00:02:26,970
image to the screen so you can see that

00:02:23,500 --> 00:02:30,220
my Tamagotchi is drawn to the screen and

00:02:26,970 --> 00:02:33,549
then for the animations in the game I

00:02:30,220 --> 00:02:35,739
decided I want to use a sprite sheet so

00:02:33,549 --> 00:02:37,900
below is the sprite to bounce the

00:02:35,739 --> 00:02:41,739
Tamagotchi so if you go one two three

00:02:37,900 --> 00:02:45,010
I'll go up so if I need to animate this

00:02:41,739 --> 00:02:48,040
I need to draw it at zero and then 200

00:02:45,010 --> 00:02:50,019
and then 400 pixels so that's going to

00:02:48,040 --> 00:02:51,609
bounce the Tamagotchi up and then I

00:02:50,019 --> 00:02:55,120
would do those coordinates the opposite

00:02:51,609 --> 00:02:57,970
way to go down now you'll also notice

00:02:55,120 --> 00:02:59,980
that I'm using context clear between the

00:02:57,970 --> 00:03:03,579
drawings and that is to avoid this

00:02:59,980 --> 00:03:05,590
situation so if you don't clear between

00:03:03,579 --> 00:03:07,629
your drawings they just draw right on

00:03:05,590 --> 00:03:10,510
top of each other so you always draw and

00:03:07,629 --> 00:03:13,810
then clear and so the way this code is

00:03:10,510 --> 00:03:16,389
written this this isn't going to work so

00:03:13,810 --> 00:03:18,970
I'm pressing one of the controls and as

00:03:16,389 --> 00:03:21,160
you see the Tamagotchi is just one of

00:03:18,970 --> 00:03:22,870
the frames being drawn and that's

00:03:21,160 --> 00:03:26,079
because we're drawing and clearing the

00:03:22,870 --> 00:03:28,120
contact so quickly that you only see the

00:03:26,079 --> 00:03:30,579
last frame being drawn you're not gonna

00:03:28,120 --> 00:03:33,760
see the other ones so what I actually

00:03:30,579 --> 00:03:37,449
need to do with this animation is that I

00:03:33,760 --> 00:03:39,669
need to delay it so the original game

00:03:37,449 --> 00:03:42,549
has this really old school like choppy

00:03:39,669 --> 00:03:45,340
animation so that's what I want to do I

00:03:42,549 --> 00:03:48,310
want to delay it like that and I can use

00:03:45,340 --> 00:03:50,470
set timeout to do this and this works so

00:03:48,310 --> 00:03:52,299
now you can see the Tamagotchi is

00:03:50,470 --> 00:03:54,579
bouncing up and down I'm going from

00:03:52,299 --> 00:03:58,090
frame 1 2 3 and then back for a full

00:03:54,579 --> 00:04:01,000
bounce but you know this has actually

00:03:58,090 --> 00:04:05,650
created a problem for me because now all

00:04:01,000 --> 00:04:07,629
of my animations are async so you know

00:04:05,650 --> 00:04:09,699
how do I know when an animation has

00:04:07,629 --> 00:04:11,590
completed how do I know when I can

00:04:09,699 --> 00:04:14,500
safely kick off another animation

00:04:11,590 --> 00:04:16,090
without overwriting the previous one the

00:04:14,500 --> 00:04:18,280
truth is I don't I'd have to sort of

00:04:16,090 --> 00:04:20,709
measure and keep track of how long these

00:04:18,280 --> 00:04:23,229
animations take and that's just not

00:04:20,709 --> 00:04:24,440
sustainable for a game that is full of

00:04:23,229 --> 00:04:27,950
animations

00:04:24,440 --> 00:04:31,100
what I want is to resolve an animation

00:04:27,950 --> 00:04:33,710
and then handle another animation and

00:04:31,100 --> 00:04:37,160
this sounds a lot like a promise

00:04:33,710 --> 00:04:40,160
now promises represent eventual values

00:04:37,160 --> 00:04:43,100
so I can animate inside of a promise

00:04:40,160 --> 00:04:47,870
resolve it and because it's a venable I

00:04:43,100 --> 00:04:49,730
can then kick off another animation so

00:04:47,870 --> 00:04:51,320
for the first version of this game

00:04:49,730 --> 00:04:54,560
that's exactly what I did

00:04:51,320 --> 00:04:57,310
I used promises for every animation I

00:04:54,560 --> 00:05:00,140
made a general purpose animate function

00:04:57,310 --> 00:05:02,960
that takes in a draw function and the

00:05:00,140 --> 00:05:05,960
milliseconds for the delay so animate

00:05:02,960 --> 00:05:08,900
always returns a new promise and inside

00:05:05,960 --> 00:05:11,510
of that promise an inner function runs

00:05:08,900 --> 00:05:13,280
the draw function and we delegate

00:05:11,510 --> 00:05:16,040
resolving the promise to the draw

00:05:13,280 --> 00:05:18,340
function so if the draw resolves the

00:05:16,040 --> 00:05:21,620
promise and returns true we're done

00:05:18,340 --> 00:05:24,320
otherwise set timeout is called with the

00:05:21,620 --> 00:05:28,370
inner function and another loop of this

00:05:24,320 --> 00:05:30,560
occurs so here we're going to use the

00:05:28,370 --> 00:05:33,320
animate function to create a bounce up

00:05:30,560 --> 00:05:35,120
animation we're gonna pass a function

00:05:33,320 --> 00:05:37,340
that draws the correct frame it's gonna

00:05:35,120 --> 00:05:39,860
clear the context it's gonna increment

00:05:37,340 --> 00:05:41,810
the current frame and when the current

00:05:39,860 --> 00:05:44,419
frame is greater than the frame count

00:05:41,810 --> 00:05:47,240
the promise is resolved and we return

00:05:44,419 --> 00:05:49,160
true now this would stop the function

00:05:47,240 --> 00:05:52,880
from setting another loop via set

00:05:49,160 --> 00:05:55,190
timeout so now we can create a simple

00:05:52,880 --> 00:05:57,800
bounce function using our bounce up

00:05:55,190 --> 00:06:00,320
animation and it bounced down animation

00:05:57,800 --> 00:06:02,890
using the same animate function and as

00:06:00,320 --> 00:06:05,930
you can see our Tamagotchi is bouncing

00:06:02,890 --> 00:06:08,210
now with those animations out of the way

00:06:05,930 --> 00:06:11,240
what we need to work on is creating the

00:06:08,210 --> 00:06:13,910
main game loop so when you're not

00:06:11,240 --> 00:06:15,830
interacting with the Tamagotchi it goes

00:06:13,910 --> 00:06:17,810
through a loop it sort of bounces up and

00:06:15,830 --> 00:06:19,669
down moves a bit this way moves it that

00:06:17,810 --> 00:06:22,280
bit that way it bounces up and down and

00:06:19,669 --> 00:06:24,070
this is what it's doing when it's idling

00:06:22,280 --> 00:06:27,050
when you're not doing anything with it

00:06:24,070 --> 00:06:29,000
so to setup that we're going to create a

00:06:27,050 --> 00:06:31,220
loop function and we're going to call

00:06:29,000 --> 00:06:33,200
the idle animation and when that

00:06:31,220 --> 00:06:34,550
completes we're gonna call the loop

00:06:33,200 --> 00:06:38,090
function again

00:06:34,550 --> 00:06:41,560
and I thought this is great totally fine

00:06:38,090 --> 00:06:46,520
except I actually created more problems

00:06:41,560 --> 00:06:50,659
so the first issue that I noticed is

00:06:46,520 --> 00:06:53,599
what I refer to as Venable hell so once

00:06:50,659 --> 00:06:56,479
upon a time we used to use async calls

00:06:53,599 --> 00:06:59,240
on the front end with callbacks and this

00:06:56,479 --> 00:07:02,449
created the dreaded triangle of doom aka

00:06:59,240 --> 00:07:04,699
callback hell but one of the issues I

00:07:02,449 --> 00:07:06,979
noticed when creating this game was that

00:07:04,699 --> 00:07:10,789
promises actually don't alleviate

00:07:06,979 --> 00:07:14,330
callback hell you're still in hell it's

00:07:10,789 --> 00:07:15,979
just a different looking hell so you

00:07:14,330 --> 00:07:18,440
know the left side is a more realistic

00:07:15,979 --> 00:07:21,349
version of how these animations might

00:07:18,440 --> 00:07:23,509
work I mean might need to pass in some

00:07:21,349 --> 00:07:26,360
information to functions or check

00:07:23,509 --> 00:07:28,190
information to make a decision and this

00:07:26,360 --> 00:07:30,770
gets just as unwieldy and as

00:07:28,190 --> 00:07:32,719
unmanageable as callback hell you know

00:07:30,770 --> 00:07:35,479
this doesn't resolve that issue for me

00:07:32,719 --> 00:07:37,009
and you know I actually really love

00:07:35,479 --> 00:07:38,990
promises I think they're really great

00:07:37,009 --> 00:07:41,780
but when you're using them for very

00:07:38,990 --> 00:07:47,210
large-scale async work the ease of

00:07:41,780 --> 00:07:49,520
promises really tends to break down so

00:07:47,210 --> 00:07:51,469
you know the point of the tamagotchi is

00:07:49,520 --> 00:07:53,870
that the user can interact with it and

00:07:51,469 --> 00:07:55,520
this is where we come up with our second

00:07:53,870 --> 00:07:57,050
issue that I found because Venable hell

00:07:55,520 --> 00:07:59,690
is one thing this is a completely

00:07:57,050 --> 00:08:02,090
different thing now it's it's looping

00:07:59,690 --> 00:08:03,979
it's idling I need to interrupt that at

00:08:02,090 --> 00:08:06,020
some point because you're gonna have to

00:08:03,979 --> 00:08:07,580
feed the Tamagotchi at some point or

00:08:06,020 --> 00:08:09,680
play with the Tamagotchi to up its

00:08:07,580 --> 00:08:11,389
happiness the whole game is actually

00:08:09,680 --> 00:08:14,330
about you interacting with the

00:08:11,389 --> 00:08:16,699
Tamagotchi so what I need to do is I

00:08:14,330 --> 00:08:20,240
need to suspend the idle animation in

00:08:16,699 --> 00:08:21,409
favor of a user-generated event so if

00:08:20,240 --> 00:08:23,449
you want to feed the Tamagotchi I gotta

00:08:21,409 --> 00:08:24,050
stop idle and then you can feed the

00:08:23,449 --> 00:08:26,840
Tamagotchi

00:08:24,050 --> 00:08:29,840
so here I've added an array to hold

00:08:26,840 --> 00:08:31,580
pending events the loop function is

00:08:29,840 --> 00:08:34,370
going to check if there are any pending

00:08:31,580 --> 00:08:36,349
events and if there are the handle event

00:08:34,370 --> 00:08:39,589
function is run and the loop is

00:08:36,349 --> 00:08:41,479
terminated so handle event is going to

00:08:39,589 --> 00:08:43,490
take the first event off the queue and

00:08:41,479 --> 00:08:44,990
it's going to run it and when it's

00:08:43,490 --> 00:08:46,940
complete we're gonna restart the loop

00:08:44,990 --> 00:08:47,310
and if there's another event in the

00:08:46,940 --> 00:08:49,249
queue

00:08:47,310 --> 00:08:51,389
handle event will get called again

00:08:49,249 --> 00:08:55,139
otherwise we're gonna continue the loop

00:08:51,389 --> 00:08:57,120
until the next event and unfortunately

00:08:55,139 --> 00:09:00,480
the problem that I found was that this

00:08:57,120 --> 00:09:01,560
just doesn't work so I'm requesting to

00:09:00,480 --> 00:09:03,870
feed the Tamagotchi

00:09:01,560 --> 00:09:06,050
but the feed animation is actually

00:09:03,870 --> 00:09:09,269
delayed until the idle animation

00:09:06,050 --> 00:09:11,699
completes so this can be upwards of

00:09:09,269 --> 00:09:14,160
seven to eight seconds and this is not

00:09:11,699 --> 00:09:16,829
going to work what I actually need to do

00:09:14,160 --> 00:09:19,680
is cancel the promise that runs the idle

00:09:16,829 --> 00:09:24,259
animation except you can't cancel

00:09:19,680 --> 00:09:27,180
promises promises are unbreakable vows

00:09:24,259 --> 00:09:29,639
you can throw errors and promises and

00:09:27,180 --> 00:09:32,670
you can catch those errors but you can't

00:09:29,639 --> 00:09:35,249
actually cancel a promise all the

00:09:32,670 --> 00:09:39,509
attached then functions are going to

00:09:35,249 --> 00:09:42,300
fire what I want actually is to pause an

00:09:39,509 --> 00:09:45,600
animation and then yield to an event and

00:09:42,300 --> 00:09:47,699
this sounds a lot like a generator so

00:09:45,600 --> 00:09:50,879
generators are amazing because their

00:09:47,699 --> 00:09:52,829
code that can be paused all of the code

00:09:50,879 --> 00:09:56,309
that you write is run to completion

00:09:52,829 --> 00:09:58,079
except for generators all the code that

00:09:56,309 --> 00:10:00,480
you write usually once it starts it just

00:09:58,079 --> 00:10:02,879
goes from top down to the bottom even if

00:10:00,480 --> 00:10:04,980
you're doing async work it's thrown on

00:10:02,879 --> 00:10:07,529
to the event loop and it's going to come

00:10:04,980 --> 00:10:08,040
back around you can't cancel it or pause

00:10:07,529 --> 00:10:11,790
it

00:10:08,040 --> 00:10:15,449
but with generators you can do both so

00:10:11,790 --> 00:10:17,759
let's take a look at them this is a

00:10:15,449 --> 00:10:20,040
generator and I know it's a generator

00:10:17,759 --> 00:10:23,160
because of the asterisk next to the

00:10:20,040 --> 00:10:26,129
function keyword so that turns a

00:10:23,160 --> 00:10:27,839
function into a function generator now

00:10:26,129 --> 00:10:29,910
inside the function you're going to

00:10:27,839 --> 00:10:33,149
notice a special keyword called yield

00:10:29,910 --> 00:10:36,750
and yield means pause in the generator

00:10:33,149 --> 00:10:38,759
world to use the generator you're going

00:10:36,750 --> 00:10:41,850
to call it and that's going to return to

00:10:38,759 --> 00:10:45,120
you the generator object and on that

00:10:41,850 --> 00:10:46,860
object is a method called next and when

00:10:45,120 --> 00:10:49,769
you call next you're gonna get back an

00:10:46,860 --> 00:10:53,279
object with two keys on it value and

00:10:49,769 --> 00:10:55,620
done if there is a value to the right of

00:10:53,279 --> 00:10:58,559
the yield statement it's going to return

00:10:55,620 --> 00:11:00,100
that as the value done is going to tell

00:10:58,559 --> 00:11:02,259
you whether the generator is

00:11:00,100 --> 00:11:06,279
or not and in this case it's not because

00:11:02,259 --> 00:11:08,350
there are more lines to run okay so

00:11:06,279 --> 00:11:10,540
we're gonna call next again see now

00:11:08,350 --> 00:11:12,699
we're not actually yielding a number you

00:11:10,540 --> 00:11:15,459
don't have to yield a value if you don't

00:11:12,699 --> 00:11:18,040
want to yield just means pause generally

00:11:15,459 --> 00:11:20,949
so in this case the value is undefined

00:11:18,040 --> 00:11:23,050
and again we're not done yet so done is

00:11:20,949 --> 00:11:24,910
false we call again

00:11:23,050 --> 00:11:27,279
now we're yielding back three so the

00:11:24,910 --> 00:11:30,130
value is three but done is still not

00:11:27,279 --> 00:11:33,610
false because we've paused at yield

00:11:30,130 --> 00:11:35,560
three so once we call next again now the

00:11:33,610 --> 00:11:37,420
generator is gonna say yes we're

00:11:35,560 --> 00:11:41,470
actually done so we didn't yield a value

00:11:37,420 --> 00:11:44,079
and now done is actually true now you

00:11:41,470 --> 00:11:48,279
can also pass values into a generator

00:11:44,079 --> 00:11:50,139
and this seems a little bit weird at

00:11:48,279 --> 00:11:51,970
first because you'll notice that the

00:11:50,139 --> 00:11:54,490
first time we call next we're not

00:11:51,970 --> 00:11:57,069
passing in a value we're actually doing

00:11:54,490 --> 00:11:59,500
it in the second call now the reason

00:11:57,069 --> 00:12:01,930
that this happens is that inside of this

00:11:59,500 --> 00:12:05,110
generator function once it hits the

00:12:01,930 --> 00:12:07,930
yield statement it pauses and that

00:12:05,110 --> 00:12:11,470
includes assigning things to variables

00:12:07,930 --> 00:12:14,500
so Const num equals hasn't actually been

00:12:11,470 --> 00:12:17,079
called yet it actually yields it pauses

00:12:14,500 --> 00:12:21,040
before you actually assign the variable

00:12:17,079 --> 00:12:24,040
now when I call next again if I provide

00:12:21,040 --> 00:12:28,180
a value to it it's gonna take the place

00:12:24,040 --> 00:12:31,089
of the previous yield so now continum

00:12:28,180 --> 00:12:33,639
equals that yield is replaced with a2

00:12:31,089 --> 00:12:37,360
and now we've assigned the variable and

00:12:33,639 --> 00:12:40,449
then we also run yield 2 plus num it

00:12:37,360 --> 00:12:44,949
pauses there and gives us back the value

00:12:40,449 --> 00:12:48,610
for after that yield 4 plus num and now

00:12:44,949 --> 00:12:51,290
we're getting back the value 6 then we

00:12:48,610 --> 00:12:53,430
call next and we're done

00:12:51,290 --> 00:12:54,959
one of my favorite things about

00:12:53,430 --> 00:12:59,309
generators is that you can create

00:12:54,959 --> 00:13:01,350
infinite generators so here to avoid

00:12:59,309 --> 00:13:03,569
having to call next and the next again

00:13:01,350 --> 00:13:07,170
and passing the two we can just straight

00:13:03,569 --> 00:13:09,449
up pass in as an argument for the number

00:13:07,170 --> 00:13:11,540
two so right away when we're calling the

00:13:09,449 --> 00:13:14,009
generator we can pass something in and

00:13:11,540 --> 00:13:16,920
you'll notice that inside of this we

00:13:14,009 --> 00:13:20,490
have a while loop now normally doing

00:13:16,920 --> 00:13:22,589
while true is going to run continuously

00:13:20,490 --> 00:13:24,860
and crash our browser I know because

00:13:22,589 --> 00:13:28,199
I've made that mistake more than once

00:13:24,860 --> 00:13:29,040
and but in this case actually that's not

00:13:28,199 --> 00:13:30,600
going to happen

00:13:29,040 --> 00:13:32,459
so this is really interesting the

00:13:30,600 --> 00:13:35,249
generator is actually going to pause the

00:13:32,459 --> 00:13:37,550
while loop and it's not going to run

00:13:35,249 --> 00:13:40,439
continuously and crash our browser and

00:13:37,550 --> 00:13:40,800
every time that this gets called next on

00:13:40,439 --> 00:13:43,800
it

00:13:40,800 --> 00:13:45,689
we're running the while loop again so it

00:13:43,800 --> 00:13:47,970
pauses it and when we call next is going

00:13:45,689 --> 00:13:51,949
to resume and because while is true it's

00:13:47,970 --> 00:13:55,139
going to give us back the number now I

00:13:51,949 --> 00:13:58,290
can just keep calling next on this for

00:13:55,139 --> 00:14:01,709
as long as I want there we go

00:13:58,290 --> 00:14:04,290
it's just gonna keep generating numbers

00:14:01,709 --> 00:14:07,350
for me it's never going to stop until I

00:14:04,290 --> 00:14:09,179
explicitly tell it to stop but you can

00:14:07,350 --> 00:14:13,439
create infinite generators that always

00:14:09,179 --> 00:14:15,749
gave you something back now you can also

00:14:13,439 --> 00:14:17,939
call a generator from inside of another

00:14:15,749 --> 00:14:23,399
generator to do that you're gonna need

00:14:17,939 --> 00:14:25,709
the yield star expression to illustrate

00:14:23,399 --> 00:14:27,720
that I have a function a generator

00:14:25,709 --> 00:14:30,179
function called outer and a generator

00:14:27,720 --> 00:14:32,879
function called inner and you'll notice

00:14:30,179 --> 00:14:36,600
that outer is calling inner with the

00:14:32,879 --> 00:14:38,759
yield star expression in front of it so

00:14:36,600 --> 00:14:42,290
same as before I'm going to call the

00:14:38,759 --> 00:14:42,290
generator to get the generator object

00:14:42,730 --> 00:14:48,280
then I'm gonna call dot next on that

00:14:45,400 --> 00:14:50,170
generator and the first time this you

00:14:48,280 --> 00:14:53,200
know totally makes sense what we expect

00:14:50,170 --> 00:14:54,970
to happen happens we're yielding one so

00:14:53,200 --> 00:14:57,360
we're getting back the value one and of

00:14:54,970 --> 00:15:00,400
course we're not done yet

00:14:57,360 --> 00:15:03,160
but when I call next again you're gonna

00:15:00,400 --> 00:15:05,350
notice that we're not yielding back a

00:15:03,160 --> 00:15:07,240
function what we're actually doing is

00:15:05,350 --> 00:15:10,600
we're going inside of the inter

00:15:07,240 --> 00:15:13,330
generator so yield star is a delegate

00:15:10,600 --> 00:15:15,730
and that means when it encounters a

00:15:13,330 --> 00:15:17,590
yield star with a generator next to it

00:15:15,730 --> 00:15:20,980
it's actually going to start calling dot

00:15:17,590 --> 00:15:22,000
next as if that generator was part of

00:15:20,980 --> 00:15:24,550
the outer generator

00:15:22,000 --> 00:15:27,580
so now when I call dot next I'm actually

00:15:24,550 --> 00:15:30,220
getting yield a value a from the inner

00:15:27,580 --> 00:15:32,800
generator and this is going to continue

00:15:30,220 --> 00:15:35,800
until the inner generator is complete

00:15:32,800 --> 00:15:38,410
and then it's gonna go back to the outer

00:15:35,800 --> 00:15:39,970
generator so it's a seamless calling of

00:15:38,410 --> 00:15:43,440
dot next even though you're putting

00:15:39,970 --> 00:15:45,670
together two different generators now

00:15:43,440 --> 00:15:46,990
the other thing that's really cool and

00:15:45,670 --> 00:15:48,910
the thing that I really wanted out of

00:15:46,990 --> 00:15:52,200
the generators is that you can cancel

00:15:48,910 --> 00:15:57,190
them and you can do this one of two ways

00:15:52,200 --> 00:16:03,910
so the first is that you can call from

00:15:57,190 --> 00:16:05,430
the outside denied that's right sorry

00:16:03,910 --> 00:16:09,910
I'm having a hard time with the clicker

00:16:05,430 --> 00:16:12,130
so here again we have a while loop so it

00:16:09,910 --> 00:16:14,470
should say while true and it should run

00:16:12,130 --> 00:16:16,630
for forever but I'm actually going to

00:16:14,470 --> 00:16:19,540
cancel the generator from inside of the

00:16:16,630 --> 00:16:22,150
generator and I'm gonna do that with the

00:16:19,540 --> 00:16:24,580
return statement here so the first time

00:16:22,150 --> 00:16:26,500
I call next we get what we expect but as

00:16:24,580 --> 00:16:28,420
soon as it hits a return statement in a

00:16:26,500 --> 00:16:30,100
generator it's gonna cancel it and

00:16:28,420 --> 00:16:32,860
you'll notice that it just goes straight

00:16:30,100 --> 00:16:36,820
to done true and of course we're not

00:16:32,860 --> 00:16:38,710
yielding a value same thing when we call

00:16:36,820 --> 00:16:41,380
dot next we've cancelled this generator

00:16:38,710 --> 00:16:44,490
so there's no way for it to keep running

00:16:41,380 --> 00:16:48,160
anymore this is actually done completely

00:16:44,490 --> 00:16:50,470
now the second way to cancel a generator

00:16:48,160 --> 00:16:52,900
is from outside of that generator again

00:16:50,470 --> 00:16:56,019
a while loop this should run for forever

00:16:52,900 --> 00:16:58,779
but as soon as I call generator dot

00:16:56,019 --> 00:17:00,759
turn on it it's going to cancel it so

00:16:58,779 --> 00:17:03,670
you can see again that done is now true

00:17:00,759 --> 00:17:06,760
and this is really interesting that you

00:17:03,670 --> 00:17:09,100
can cancel a generator from inside or

00:17:06,760 --> 00:17:11,890
from outside of the generator because

00:17:09,100 --> 00:17:15,309
resuming the generator occurs on the

00:17:11,890 --> 00:17:17,939
outside of the generator only so

00:17:15,309 --> 00:17:21,399
generators are paused via yield and

00:17:17,939 --> 00:17:24,819
restarted via next but a generator

00:17:21,399 --> 00:17:27,459
cannot call next on itself if I never

00:17:24,819 --> 00:17:30,460
call next on this generator it will

00:17:27,459 --> 00:17:32,590
never yield to and this is something I

00:17:30,460 --> 00:17:34,840
really struggled with when I started to

00:17:32,590 --> 00:17:37,750
convert my game from promises to

00:17:34,840 --> 00:17:41,279
generators because I wanted to know who

00:17:37,750 --> 00:17:44,140
runs the generator if control happens

00:17:41,279 --> 00:17:46,899
outside of the generator something has

00:17:44,140 --> 00:17:50,409
to be telling it to resume itself who's

00:17:46,899 --> 00:17:51,929
pulling the strings and that tie learned

00:17:50,409 --> 00:17:54,700
about co-routines

00:17:51,929 --> 00:17:57,250
core genes are really cool I'm a big fan

00:17:54,700 --> 00:17:59,649
of them they are a general control

00:17:57,250 --> 00:18:01,840
structure whereby control flow is

00:17:59,649 --> 00:18:04,659
cooperatively passed between two

00:18:01,840 --> 00:18:07,330
different routines and this doesn't make

00:18:04,659 --> 00:18:11,110
a lot of sense but it will soon because

00:18:07,330 --> 00:18:13,570
the generator can't resume itself you

00:18:11,110 --> 00:18:15,760
need a cooperative partner to help out

00:18:13,570 --> 00:18:18,100
so something has to take control away

00:18:15,760 --> 00:18:19,720
from the generator but then also hand it

00:18:18,100 --> 00:18:24,520
back to the generator to run its own

00:18:19,720 --> 00:18:27,070
code so this function is a basic example

00:18:24,520 --> 00:18:28,899
of a Co routine so it's gonna take in a

00:18:27,070 --> 00:18:31,500
generator and it's going to call it

00:18:28,899 --> 00:18:34,690
which returns the generator object and

00:18:31,500 --> 00:18:37,720
then the inner function next response

00:18:34,690 --> 00:18:39,159
calls the generators next method so this

00:18:37,720 --> 00:18:41,110
is going to actually start up the

00:18:39,159 --> 00:18:44,049
generator which will run until it

00:18:41,110 --> 00:18:46,149
encounters a yield statement at that

00:18:44,049 --> 00:18:48,190
time the generator is going to return an

00:18:46,149 --> 00:18:50,679
object with the value key and the done

00:18:48,190 --> 00:18:52,870
key and next response is going to

00:18:50,679 --> 00:18:55,929
evaluate whether the generator is done

00:18:52,870 --> 00:18:57,370
or not and if it's not it's gonna call

00:18:55,929 --> 00:18:59,529
itself with the value from the

00:18:57,370 --> 00:19:01,870
generators response and the loop is

00:18:59,529 --> 00:19:04,130
going to continue until the generator is

00:19:01,870 --> 00:19:05,780
done so

00:19:04,130 --> 00:19:08,210
the co-routine is the cooperative

00:19:05,780 --> 00:19:10,309
partner to the generator the curb

00:19:08,210 --> 00:19:12,799
routine function passes control to the

00:19:10,309 --> 00:19:15,650
generator and when the generator pauses

00:19:12,799 --> 00:19:18,140
control goes back to the co routine and

00:19:15,650 --> 00:19:25,309
these two functions cooperatively pass

00:19:18,140 --> 00:19:27,740
control until completion so now I can

00:19:25,309 --> 00:19:30,890
rewrite the bounce up animation as a

00:19:27,740 --> 00:19:33,440
generator and use a KO routine to

00:19:30,890 --> 00:19:35,330
actually run it but this code actually

00:19:33,440 --> 00:19:37,460
suffers from the same problem I had in

00:19:35,330 --> 00:19:41,990
the beginning so it's just gonna go too

00:19:37,460 --> 00:19:43,610
fast there we go so you can see it's

00:19:41,990 --> 00:19:46,159
doing what it did in the beginning which

00:19:43,610 --> 00:19:47,960
is just it writes too fast and that's

00:19:46,159 --> 00:19:51,230
because generators aren't really gonna

00:19:47,960 --> 00:19:53,870
resolve my issues with set timeout and

00:19:51,230 --> 00:19:57,950
promises I actually still need them to

00:19:53,870 --> 00:19:59,270
be able to handle delays but generators

00:19:57,950 --> 00:20:02,210
don't really care if you're using

00:19:59,270 --> 00:20:05,090
promises so it's not gonna wait for each

00:20:02,210 --> 00:20:08,870
promise to resolve and then resume

00:20:05,090 --> 00:20:13,130
itself it can't resume itself but a

00:20:08,870 --> 00:20:15,530
cooperative partner could so I can amend

00:20:13,130 --> 00:20:18,260
the KO routine to handle async requests

00:20:15,530 --> 00:20:20,270
instead of calling next response we're

00:20:18,260 --> 00:20:22,610
gonna call it a handle async function

00:20:20,270 --> 00:20:24,440
we're gonna pass it the value of the

00:20:22,610 --> 00:20:27,620
generators response which is a promise

00:20:24,440 --> 00:20:29,659
and now we can actually prevent the

00:20:27,620 --> 00:20:31,880
generator from resuming until the

00:20:29,659 --> 00:20:34,039
promise is resolved and when it's

00:20:31,880 --> 00:20:37,490
resolved we're gonna call next response

00:20:34,039 --> 00:20:39,799
which will resume the generator so with

00:20:37,490 --> 00:20:42,740
our amended KO routine these functions

00:20:39,799 --> 00:20:44,929
are now equivalent previously we change

00:20:42,740 --> 00:20:47,480
promises together for the animation now

00:20:44,929 --> 00:20:49,460
we can yield promises and our

00:20:47,480 --> 00:20:51,350
cooperative partner the KO routine is

00:20:49,460 --> 00:20:54,770
going to handle resuming the generator

00:20:51,350 --> 00:20:56,750
when the promise is resolved now you can

00:20:54,770 --> 00:20:58,789
do more than yield promises with

00:20:56,750 --> 00:21:00,770
co-routines you can yield all sorts of

00:20:58,789 --> 00:21:03,020
async things including callback

00:21:00,770 --> 00:21:04,970
functions you can also yield generators

00:21:03,020 --> 00:21:07,010
themselves and there's a really great

00:21:04,970 --> 00:21:10,070
library called ko if you want to play

00:21:07,010 --> 00:21:14,030
around with this it's highly recommended

00:21:10,070 --> 00:21:15,980
Kuro jeans are very powerful and the

00:21:14,030 --> 00:21:17,030
reason that they're so powerful is that

00:21:15,980 --> 00:21:20,180
they allow you to think

00:21:17,030 --> 00:21:21,800
sequentially about async code so because

00:21:20,180 --> 00:21:24,080
the co-routine is your cooperative

00:21:21,800 --> 00:21:27,050
partner in handling the messy business

00:21:24,080 --> 00:21:28,310
of chaining promises together you can

00:21:27,050 --> 00:21:31,370
write your code as if it ran

00:21:28,310 --> 00:21:33,260
sequentially so for the second version

00:21:31,370 --> 00:21:35,510
of this game I rewrote all of the

00:21:33,260 --> 00:21:37,790
animations with promises and generators

00:21:35,510 --> 00:21:40,280
so what you're seeing here is the same

00:21:37,790 --> 00:21:43,340
idle animation but with generators and

00:21:40,280 --> 00:21:45,920
promises and it's run by a KO routine

00:21:43,340 --> 00:21:48,050
and I had two goals with the rewrite I

00:21:45,920 --> 00:21:50,090
wanted to be able to pause animations

00:21:48,050 --> 00:21:53,960
and I want to take advantage of thinking

00:21:50,090 --> 00:21:55,580
sequentially about async code so to do

00:21:53,960 --> 00:21:58,070
that I started with rewriting the

00:21:55,580 --> 00:22:00,050
function that delays the animation so

00:21:58,070 --> 00:22:02,000
this is our async function and it

00:22:00,050 --> 00:22:04,310
doesn't need to hold the animation

00:22:02,000 --> 00:22:06,580
itself it just needs to delay with a

00:22:04,310 --> 00:22:09,260
promise that's its sole responsibility

00:22:06,580 --> 00:22:11,510
so when this function is called it

00:22:09,260 --> 00:22:16,610
returns a new promise that resolves when

00:22:11,510 --> 00:22:18,140
the timeout is complete I also broke out

00:22:16,610 --> 00:22:20,960
the context clearing into its own

00:22:18,140 --> 00:22:26,780
function and the drawing of the image

00:22:20,960 --> 00:22:28,580
into its own function so now we can

00:22:26,780 --> 00:22:30,620
combine these new functions to replace

00:22:28,580 --> 00:22:32,840
the previous animation function and

00:22:30,620 --> 00:22:35,210
we're gonna do so inside of a generator

00:22:32,840 --> 00:22:37,130
so we'll clear whatever was previously

00:22:35,210 --> 00:22:39,260
on the canvas then we're gonna draw the

00:22:37,130 --> 00:22:41,330
new frame and these get to occur

00:22:39,260 --> 00:22:43,310
synchronously there's no problem with

00:22:41,330 --> 00:22:45,620
these needing to be a sync they can

00:22:43,310 --> 00:22:47,540
recur synchronously but what we is a

00:22:45,620 --> 00:22:49,610
think about this is the delay so we're

00:22:47,540 --> 00:22:52,070
gonna yield the delay that's the

00:22:49,610 --> 00:22:54,470
asynchronous part and then we're gonna

00:22:52,070 --> 00:22:56,840
pass off handing it to our co-routines

00:22:54,470 --> 00:22:59,090
so our ko routine will be handling the

00:22:56,840 --> 00:23:02,560
asynchronous part of this but this feels

00:22:59,090 --> 00:23:02,560
very synchronous

00:23:03,410 --> 00:23:09,590
and now I can redraw the dislike

00:23:05,990 --> 00:23:11,720
animation so this is an animation that

00:23:09,590 --> 00:23:13,460
has two frames so you can see this gets

00:23:11,720 --> 00:23:16,130
a lot cleaner than the code that I had

00:23:13,460 --> 00:23:17,929
previously and then here is our

00:23:16,130 --> 00:23:20,450
Tamagotchi saying like nope I don't like

00:23:17,929 --> 00:23:22,730
whatever's going on I'm running out of

00:23:20,450 --> 00:23:25,580
time but very quickly we're gonna

00:23:22,730 --> 00:23:27,080
rewrite the main game bloop so we're

00:23:25,580 --> 00:23:29,809
gonna take advantage of canceling the

00:23:27,080 --> 00:23:31,940
generator our loop generator function

00:23:29,809 --> 00:23:33,530
will be run by a KO routine so we can

00:23:31,940 --> 00:23:35,809
rely on that to handle the asynchronous

00:23:33,530 --> 00:23:37,940
stuff we're going to create a variable

00:23:35,809 --> 00:23:39,950
to save a status of the generator is it

00:23:37,940 --> 00:23:43,640
done or not and we're gonna preset the

00:23:39,950 --> 00:23:46,309
animation to idle we'll use a while loop

00:23:43,640 --> 00:23:48,380
to create a never-ending generator and

00:23:46,309 --> 00:23:50,900
this way the game loop can continue for

00:23:48,380 --> 00:23:52,730
forever if we have a pending user event

00:23:50,900 --> 00:23:55,100
we're going to delegate to the event

00:23:52,730 --> 00:23:57,880
using yield star and whatever the event

00:23:55,100 --> 00:24:00,740
yields will be passed to the co-routine

00:23:57,880 --> 00:24:03,320
otherwise a second while loop will

00:24:00,740 --> 00:24:05,240
handle running the animation so as long

00:24:03,320 --> 00:24:07,370
as the animation is not complete and

00:24:05,240 --> 00:24:09,409
there are no pending events this loop

00:24:07,370 --> 00:24:11,659
will yield to the generators values to

00:24:09,409 --> 00:24:13,610
the KO routine to handle and these are

00:24:11,659 --> 00:24:16,820
promises so the KO routine is going to

00:24:13,610 --> 00:24:19,520
handle the chaining but if the animation

00:24:16,820 --> 00:24:22,010
is done or there's a pending user event

00:24:19,520 --> 00:24:23,900
the loop is going to terminate stopping

00:24:22,010 --> 00:24:25,940
the animation generator from running

00:24:23,900 --> 00:24:27,770
again and we're going to reassign the

00:24:25,940 --> 00:24:29,570
animation to an idle generator so it

00:24:27,770 --> 00:24:32,210
starts from the beginning and we're

00:24:29,570 --> 00:24:34,460
gonna reset done to false so on the next

00:24:32,210 --> 00:24:36,169
iteration of this loop pending will be

00:24:34,460 --> 00:24:41,480
true and we'll handle the user event

00:24:36,169 --> 00:24:43,640
instead so this is the generator for the

00:24:41,480 --> 00:24:46,070
feed action it's going to evaluate if

00:24:43,640 --> 00:24:47,960
the Tamagotchi is hungry or not if it's

00:24:46,070 --> 00:24:49,940
not it's going to delegate future next

00:24:47,960 --> 00:24:52,640
calls to the dislike generator which

00:24:49,940 --> 00:24:54,289
will run the dislike animation otherwise

00:24:52,640 --> 00:24:56,720
we're gonna decrease the hunger count

00:24:54,289 --> 00:24:58,250
and use the yield star we delegate to

00:24:56,720 --> 00:25:00,620
the eat generator that runs the

00:24:58,250 --> 00:25:02,480
animation okay so now we need to see

00:25:00,620 --> 00:25:04,460
everything together so we're idling

00:25:02,480 --> 00:25:06,890
riding we're gonna feed the Tamagotchi

00:25:04,460 --> 00:25:08,600
give it a good burger and you can see it

00:25:06,890 --> 00:25:10,400
canceled the idle animation straight

00:25:08,600 --> 00:25:12,530
away and you got to see the time I got

00:25:10,400 --> 00:25:14,929
you eating right away then it goes back

00:25:12,530 --> 00:25:15,730
to idling and then we're going to feed

00:25:14,929 --> 00:25:17,450
it again

00:25:15,730 --> 00:25:20,419
and this time we're gonna give it some

00:25:17,450 --> 00:25:23,149
candy great immediately cancels the idle

00:25:20,419 --> 00:25:27,049
animation and runs the candy animation

00:25:23,149 --> 00:25:28,279
feeding it candy one more time we're

00:25:27,049 --> 00:25:30,529
gonna try and feed it one more time and

00:25:28,279 --> 00:25:34,009
it's not happy it does not want a food

00:25:30,529 --> 00:25:35,990
so you can see this now works and that

00:25:34,009 --> 00:25:37,669
is all I have for you the code is at

00:25:35,990 --> 00:25:39,590
this github if you want to check out the

00:25:37,669 --> 00:25:42,679
code itself I'm still in the process of

00:25:39,590 --> 00:25:44,840
writing the Tim Tamagotchi but you can

00:25:42,679 --> 00:25:45,919
check out what's there already and come

00:25:44,840 --> 00:25:48,049
see me at the break if you would like

00:25:45,919 --> 00:25:50,419
some stickers I have some use react and

00:25:48,049 --> 00:25:53,500
wing stickers that are react focused if

00:25:50,419 --> 00:25:56,810
you use react and thank you

00:25:53,500 --> 00:25:59,720
[Applause]

00:25:56,810 --> 00:25:59,720

YouTube URL: https://www.youtube.com/watch?v=BONVAOgovHM


