Title: Lifesaving AI and JavaScript | Jaeman An | JSConf Korea 2019(en sub)
Publication date: 2019-10-10
Playlist: JSConf Korea 2019
Description: 
	JavaScript, artificial intelligence, and software development, a combination with myriad possibilities. This presentation tells one such story, a life-saving software for predicting severe acute illness.

The AI system required not just back-end and front-end but also mobile apps, AI models, and data collection and analysis components. I’ll show you how I used JavaScript to create this solution, with tools like Vue.js, React Native, Electron, TypeScript, and server-side JavaScript. I’ll also explain issues of safety, privacy, and explainability that comes with using AI in medicine and how to deal with them. Finally, I'd like to share with you how software made out of JS can bring tangible contributions and innovations to the forefront of medicine.
Captions: 
	00:00:08,364 --> 00:00:09,100
Can you hear me?

00:00:11,271 --> 00:00:12,202
Let's get started.

00:00:13,026 --> 00:00:16,947
My name is Ahn Jae Man, and in this session

00:00:16,948 --> 00:00:20,867
I am going to give a presentation about the Life-saving AI and Javascript.

00:00:21,033 --> 00:00:21,700
Nice to meet you.

00:00:26,117 --> 00:00:30,800
I work at AITRICS, a medical AI corporation, and I use AI

00:00:30,801 --> 00:00:35,500
to predict the acute and critical diseases and emergencies of the inpatients,

00:00:35,868 --> 00:00:38,171
And report the results to the medical team and help them to prepare for such incidents

00:00:38,611 --> 00:00:40,000
We are provide solutions for such events.

00:00:40,832 --> 00:00:47,399
Today I am here to walk you through the process and issues during the development of such solutions.

00:00:48,428 --> 00:00:51,300
The topic itself is very broad.

00:00:51,301 --> 00:00:54,131
When we say medical technology, it's a very broad term, same applies for the AI.

00:00:54,241 --> 00:00:55,667
Likewise, there's a lot to talk about Javascript.

00:00:56,079 --> 00:00:59,881
Our topics are extensive, and since I have such a limited time of 30 minutes,

00:01:00,494 --> 00:01:03,289
I might briefly touch on some subjects on the surface level

00:01:03,290 --> 00:01:05,999
On some topics, I may lack depth in my explanation.

00:01:06,000 --> 00:01:09,132
and it might be hard to understand.

00:01:09,598 --> 00:01:12,600
I apologize for such circumstances.

00:01:13,556 --> 00:01:15,576
If you want further information

00:01:15,577 --> 00:01:20,999
or if you would like to discuss some issues in depth, you can ask me,

00:01:21,000 --> 00:01:24,816
or you can come talk to me in person later after the presentation,

00:01:25,146 --> 00:01:28,546
I'll gladly discuss with you later on.

00:01:30,823 --> 00:01:34,899
So in this session, what I would like to talk about is

00:01:34,900 --> 00:01:39,132
The field of medical AI is not familiar with most people.

00:01:39,133 --> 00:01:42,575
A lot of you might have heard of artificial intelligence so you'll might already be familiar with that.

00:01:42,943 --> 00:01:46,452
but medical AI would be something most of you haven't heard of. So I will introduce you about this first

00:01:47,325 --> 00:01:50,939
and then I will go over how to develop AI solutions,

00:01:51,307 --> 00:01:53,719
the process of such development.

00:01:54,351 --> 00:02:00,128
And then related to this topic, we are using the JS, so I will talk about Javascript related techniques

00:02:00,129 --> 00:02:04,441
We use a lot of languages like Javascript, Python, and Go,

00:02:04,744 --> 00:02:08,857
Today I would like to focus on the Javascript related issues.

00:02:09,515 --> 00:02:14,122
And because the AI is different from regular softwares,

00:02:14,123 --> 00:02:17,796
I will discuss several issues in relation to that.

00:02:19,717 --> 00:02:23,000
This is the contents for today, and now I will start my presentation.

00:02:25,174 --> 00:02:27,600
I will introduce the medical AI.

00:02:30,521 --> 00:02:35,974
What if your code could save someone's life?

00:02:38,843 --> 00:02:40,666
What if the code you created

00:02:41,435 --> 00:02:44,889
Can contribute to raising the survival rate, even just 1%,

00:02:45,411 --> 00:02:48,537
Your code will be able to save the life of one person out of a hundred.

00:02:51,548 --> 00:02:56,092
In the U.S., 250,000 people lose their lives annually because of medical malpractice.

00:02:56,901 --> 00:03:00,165
Now if your code may contribute to reducing such malpractice,

00:03:00,686 --> 00:03:02,500
and increase the survival rate, even if it's just one percent,

00:03:03,099 --> 00:03:06,600
You will be able to save 2,500 people annually, out of the 250,000.

00:03:10,256 --> 00:03:12,100
Isn't it fascinating?

00:03:12,101 --> 00:03:16,453
Now, I will talk about how the software engineering

00:03:16,782 --> 00:03:19,058
and AI can save people's lives,

00:03:21,606 --> 00:03:25,612
So one of the solutions we are working on right now is this:

00:03:25,804 --> 00:03:30,740
This is a solution that predicts acute diseases in advance

00:03:30,741 --> 00:03:32,800
and report the results to the doctors.

00:03:33,154 --> 00:03:36,279
So what are the acute diseases and emergencies?

00:03:36,280 --> 00:03:37,900
It can be death itself,

00:03:38,227 --> 00:03:40,996
and an unexpected cardiac arrest,

00:03:41,490 --> 00:03:44,918
and sepsis, or blood poisoning, which is not that widely known.

00:03:44,919 --> 00:03:46,179
And many other diseases.

00:03:48,976 --> 00:03:52,540
It may be hard to understand what sepsis is,

00:03:52,541 --> 00:03:54,100
the sepsis refers to the same thing as blood poisoning.

00:03:54,101 --> 00:03:55,600
So what exactly is it?

00:03:55,700 --> 00:03:58,710
One of the common examples may be,

00:03:58,958 --> 00:04:02,112
Let's say someone was bitten by a dog, and he was taken to the hospital, but passed away within a day.

00:04:02,550 --> 00:04:03,150
Or,

00:04:03,471 --> 00:04:07,074
Someone had an injection, like glucose solution, and suddenly passed away.

00:04:07,075 --> 00:04:10,448
These are all cases caused by sepsis.

00:04:11,106 --> 00:04:14,095
So sepsis, among many acute diseases,

00:04:14,096 --> 00:04:17,047
induces the most deaths and incurs the highest cost,

00:04:17,660 --> 00:04:21,361
And what's serious about it is, with each hour of delayed treatment,

00:04:21,581 --> 00:04:23,885
you get 8% higher death rate.

00:04:24,680 --> 00:04:27,668
More than 50% of deaths in the hospitals

00:04:28,053 --> 00:04:30,199
are related to sepsis or blood poisoning.

00:04:30,631 --> 00:04:33,474
Then if we can predict this sepsis and report it in advance,

00:04:33,475 --> 00:04:36,828
we can intuitively understand that so many people can be saved.

00:04:38,940 --> 00:04:41,708
So now we are working on sepsis,

00:04:41,709 --> 00:04:44,067
the solution for predicting sepsis outbreaks.

00:04:44,068 --> 00:04:47,303
Now I will introduce the development process for such a solution.

00:04:49,059 --> 00:04:50,623
The overall process is shown in this figure.

00:04:50,624 --> 00:04:56,161
The data of the patients, such as the heart rate, pulse, blood pressure, and body temperature,

00:04:56,300 --> 00:05:00,000
and the blood test results, or X-ray, CT scan image, and prescriptions

00:05:00,034 --> 00:05:02,310
So we collect all these,

00:05:02,667 --> 00:05:07,081
and when we enter it into a machine learning model, and this model will, in 4 hours to 24 hours,

00:05:07,411 --> 00:05:10,097
Calculate the probability of death or sepsis occurrence for the patient

00:05:10,400 --> 00:05:13,140
Such results will be displayed on the dashboard,

00:05:13,419 --> 00:05:16,238
Which is very simple.

00:05:16,239 --> 00:05:18,517
It's a simple solution.

00:05:20,628 --> 00:05:26,078
So this is the solution we are distributing right now, and

00:05:26,594 --> 00:05:30,685
the mortality, or death, this solution decides that the person is risky of death in six hours,

00:05:31,652 --> 00:05:33,543
and it notifies of the risk, and its evidences,

00:05:33,955 --> 00:05:37,822
It offers the view of those information, such as the current state of the patient.

00:05:39,715 --> 00:05:43,930
I summarized the process for AI solution development into five phases.

00:05:43,933 --> 00:05:46,557
This is not the official 5-phase,

00:05:46,762 --> 00:05:50,326
I thought it'd be easier for me to explain if I divide it into 5 phases.

00:05:50,754 --> 00:05:53,332
I will walk you through each phases

00:05:55,646 --> 00:05:58,533
First is data refining and model building,

00:05:58,534 --> 00:06:02,334
this is an essential phase in building an AI.

00:06:02,721 --> 00:06:04,859
You collect a lot of data

00:06:04,860 --> 00:06:07,246
As you collect a massive amount of data,

00:06:07,575 --> 00:06:10,034
you might encounter with strange data, or useless data,

00:06:10,034 --> 00:06:11,433
Or irrelevant data.

00:06:11,634 --> 00:06:13,634
So we do data cleansing and pre-processing.

00:06:14,321 --> 00:06:15,664
And then for the outcome,

00:06:15,829 --> 00:06:18,078
We have to define what we are going to predict.

00:06:18,571 --> 00:06:21,759
When we predict death, death is obvious,

00:06:22,164 --> 00:06:23,933
You would think, death is death,

00:06:25,092 --> 00:06:27,510
You might jump into the conclusion that it's very simple to define the outcomes.

00:06:27,731 --> 00:06:30,856
However, it is really complicated since we are predicting acute death

00:06:30,856 --> 00:06:33,950
and we have to define what acute death is.

00:06:34,476 --> 00:06:39,303
So the outcomes could be classified into many different definitions.

00:06:39,933 --> 00:06:43,388
Let's say that the patient dies after 24 hours,

00:06:43,773 --> 00:06:45,746
if you would like to predict this,

00:06:46,186 --> 00:06:48,022
what about the patient who died after 25 hours?

00:06:48,380 --> 00:06:51,634
What about 23 hours? These are all the issues that we have to keep in mind.

00:06:52,465 --> 00:06:54,832
We think about those various circumstances,

00:06:54,834 --> 00:06:58,411
and we struggle with many different data,

00:06:58,800 --> 00:07:01,234
And we come up with the model that fits the data best.

00:07:01,954 --> 00:07:05,956
This is what machine learning research usually does, and actually that's why

00:07:06,368 --> 00:07:11,433
data refining and such takes up most of the time.

00:07:12,072 --> 00:07:14,347
I would like to talk more about this process,

00:07:14,347 --> 00:07:16,899
but I will skip this part for now.

00:07:19,010 --> 00:07:21,642
And now the model, we developed this model,

00:07:21,643 --> 00:07:23,320
and we have to deploy it,

00:07:23,974 --> 00:07:27,072
and this is how the deployment is conducted.

00:07:27,292 --> 00:07:31,512
Microservices, for example, Web API, most commonly,

00:07:31,926 --> 00:07:35,399
or Rest API, we deploy models with these,

00:07:35,820 --> 00:07:39,932
now that we have tensorflow JS, which enables us to

00:07:40,198 --> 00:07:41,808
upload the model in the web browsers.

00:07:42,408 --> 00:07:46,760
So with the tensorflow JS, we can deploy them on web browsers,

00:07:48,049 --> 00:07:52,629
And of course processes like optimization for faster models, and compression, are necessary.

00:07:53,041 --> 00:07:56,798
But in the deployment process, if we actually deploy them, it is reflected in the service,

00:07:57,374 --> 00:07:59,402
so you have to make sure about this.

00:07:59,787 --> 00:08:04,106
On my slide, it says it's about the safe usage of AI models,

00:08:05,244 --> 00:08:08,932
but actually AI models do not always give the right output.

00:08:09,495 --> 00:08:12,137
Even though it has 99% of accuracy,

00:08:12,621 --> 00:08:15,336
It means it's accurate for 99 people out of 100, but it will be wrong for one person.

00:08:15,720 --> 00:08:19,433
And this inaccuracy for one person is critical in many cases.

00:08:20,764 --> 00:08:23,726
So what if the model suggests wrong output?

00:08:24,275 --> 00:08:25,125
That's one issue,

00:08:26,013 --> 00:08:28,437
And then when we have the output from the model,

00:08:28,438 --> 00:08:30,483
why did the model produce such output?

00:08:31,020 --> 00:08:34,134
How can we trust this output? This would be another issue.

00:08:35,299 --> 00:08:39,145
So you have to defend such problems or consider such issues

00:08:39,631 --> 00:08:42,004
to use the AI model safely.

00:08:43,962 --> 00:08:47,199
So the drawback of the deep learning models is

00:08:47,420 --> 00:08:50,446
They are very good at predicting the data it already had as the input

00:08:50,447 --> 00:08:52,834
However, it cannot really predict well about the data it never learned.

00:08:53,624 --> 00:08:57,428
For example, a deep learning model which distinguishes between dogs and cats,

00:08:57,574 --> 00:09:00,881
if you put in a picture of a tiger, this model would,

00:09:01,076 --> 00:09:03,645
It should say "this is neither a dog nor a cat"

00:09:04,185 --> 00:09:07,434
but instead it will say that "it is a cat."

00:09:08,178 --> 00:09:10,797
So when we develop machine learning models,

00:09:10,966 --> 00:09:14,534
we test all of the possible inputs,

00:09:14,634 --> 00:09:16,634
and even if there's some malfunctioning in the model

00:09:17,233 --> 00:09:20,875
We need a lot of code to defend such cases in the solution phase.

00:09:21,341 --> 00:09:23,973
If we provide machine learning models for this service,

00:09:23,974 --> 00:09:26,046
we are usually concerned about these kind of things

00:09:27,785 --> 00:09:32,611
so we need the test results of machine learning models for some random input values

00:09:32,612 --> 00:09:35,353
This is usually called the property based testing

00:09:35,354 --> 00:09:36,916
you test the model with random inputs

00:09:37,246 --> 00:09:40,262
and observe what kinds of inputs fail the test

00:09:40,509 --> 00:09:43,169
The test process for this is called property-based testing.

00:09:44,028 --> 00:09:47,386
We conduct the property-based testing with Javascript

00:09:47,694 --> 00:09:52,219
And the libraries like JS Verify or Fast Check supports this.

00:09:53,453 --> 00:09:57,134
additionally, when the model produces an output,,

00:09:57,233 --> 00:10:00,034
the issue of how can we trust the output,

00:10:00,034 --> 00:10:02,667
It's about how accurate the results are.

00:10:03,215 --> 00:10:05,930
So we have added a module that can be analyzed,

00:10:06,039 --> 00:10:08,733
and so we were able to analyze and debug the module

00:10:09,462 --> 00:10:11,134
If you look at the image on the right,

00:10:11,135 --> 00:10:14,159
the image on the right bottom will be more intuitive

00:10:14,650 --> 00:10:16,419
Here's a chest x-ray

00:10:16,420 --> 00:10:20,601
Let's say I want to know if this person's health condition is in danger or not by looking at this x-ray

00:10:21,093 --> 00:10:22,603
If you give this two images to the model,

00:10:23,300 --> 00:10:26,661
and it says, 'the x-ray shows that he is in danger'

00:10:26,853 --> 00:10:29,485
Then I need to know the exact reason why

00:10:29,486 --> 00:10:33,379
to see if the model's answer is correct or not.

00:10:33,763 --> 00:10:37,354
By putting an interpretable module, as we did for the right image,

00:10:37,603 --> 00:10:42,090
it will tell us the reason why it's saying that. And we can see if it's working well or not.

00:10:43,635 --> 00:10:47,433
So if we add an interpretable module,

00:10:47,434 --> 00:10:49,661
we can use a much stabilized AI module.

00:10:49,915 --> 00:10:51,423
Thus, when using interpreter modules

00:10:51,835 --> 00:10:56,600
it's important to visualize it well when using the AI model.

00:10:59,840 --> 00:11:03,533
And if I add some more explanation to the property based testing,

00:11:03,534 --> 00:11:06,060
This is part of our solution code,

00:11:08,124 --> 00:11:12,429
This code tests whether the people with sepsis actually

00:11:12,534 --> 00:11:13,415
score higher on the sepsis risk test.

00:11:14,047 --> 00:11:17,542
So when we find out the effect of sepsis,

00:11:17,694 --> 00:11:21,109
the best way to diagnose sepsis is called lab blood culture feature.

00:11:21,588 --> 00:11:25,207
If we give the value of 0.3,

00:11:25,701 --> 00:11:28,790
the blood culture value is greater than 0.3. The rest of the value,

00:11:28,792 --> 00:11:31,634
will be random values,

00:11:31,734 --> 00:11:33,487
and it will automatically run a test,

00:11:33,818 --> 00:11:37,705
and the result of the test must return a value greater than 0.2

00:11:37,934 --> 00:11:41,742
And this shows that blood culture has some effect.

00:11:42,100 --> 00:11:43,581
By testing it like this

00:11:43,582 --> 00:11:47,639
we can run a machine learning module test randomly.

00:11:50,957 --> 00:11:52,758
So by doing this,

00:11:52,932 --> 00:11:55,021
I've introduced a way of deploying safely.

00:11:55,234 --> 00:11:58,989
Next now that we have a model,

00:11:59,156 --> 00:12:02,334
we have to find a way to use it with the actual data.

00:12:03,049 --> 00:12:07,081
When we have data coming in live,

00:12:07,657 --> 00:12:09,333
by using the calculator we have to find out the score,

00:12:09,988 --> 00:12:12,933
for this we use data pipeline, like NodeJS,

00:12:12,934 --> 00:12:14,634
it can be implemented very easily.

00:12:14,635 --> 00:12:17,533
NodeJS supports asynchronous event,

00:12:17,968 --> 00:12:19,614
when data flows in,

00:12:19,733 --> 00:12:23,915
it tells the data to do a certain task,

00:12:24,244 --> 00:12:28,062
so we were able to build a data pipeline easily using NodeJS.

00:12:28,608 --> 00:12:31,377
During this progress, we can monitor the data flow,

00:12:31,379 --> 00:12:35,627
or periodically check it's accuracy.

00:12:38,178 --> 00:12:43,690
This is a part of our presentation during the PyCon.

00:12:44,905 --> 00:12:47,733
So a data pipeline is something like this, when a data comes in from the hospital

00:12:48,242 --> 00:12:51,423
the patients information comes in along with predictive acute disease solution.

00:12:51,424 --> 00:12:54,626
By using the machine learning model, we can predict and show it on the Dashboard.

00:12:55,345 --> 00:12:58,317
It will notify it in some way, such as the text message or the phone call.

00:12:58,690 --> 00:13:02,720
Now you might think that we have simple data pipeline,

00:13:03,297 --> 00:13:05,847
but this is actually very complicated,

00:13:06,588 --> 00:13:10,537
If you look on top left corner, we can see that the patient's data comes from the hospital

00:13:10,538 --> 00:13:14,333
Our synchronizer, which is a microservice, inputs the data into our database,

00:13:15,637 --> 00:13:17,134
and if you look on the right side

00:13:17,475 --> 00:13:20,985
you can see prediction, medical score,

00:13:20,986 --> 00:13:24,961
and an alerting service

00:13:25,729 --> 00:13:28,134
And if you see on top, you can see the things that must be done regularly.

00:13:28,135 --> 00:13:30,143
Like backing up data,

00:13:31,021 --> 00:13:34,293
a scheduler that trains the model,

00:13:35,354 --> 00:13:37,477
and below that there's the monitor and controller.

00:13:39,495 --> 00:13:43,771
I think we won't have enough time to go over everything,

00:13:43,882 --> 00:13:45,534
so I'll start with this first,

00:13:46,049 --> 00:13:49,934
I'll go back to other things later on

00:13:51,533 --> 00:13:54,029
The monitor controller part

00:13:54,634 --> 00:13:59,233
We use redis for this, and redis consumes a string,

00:13:59,403 --> 00:14:02,254
and if we send it through StatsD

00:14:02,255 --> 00:14:04,134
you can something like this on the right side of the screen.

00:14:04,775 --> 00:14:09,631
You can see the medical score or EMR data.

00:14:09,632 --> 00:14:11,469
By monitoring,

00:14:12,456 --> 00:14:15,134
we can check if the data pipeline is working well or not.

00:14:16,185 --> 00:14:17,474
As for the controller,

00:14:17,941 --> 00:14:20,245
If we type in a command using slack,

00:14:20,985 --> 00:14:23,233
we can check the status of the data pipeline

00:14:23,233 --> 00:14:26,233
or rerun the data pipeline

00:14:26,233 --> 00:14:27,934
you can do these kind of things.

00:14:28,471 --> 00:14:31,158
It's easy when using node.js

00:14:31,159 --> 00:14:33,462
to create this kind of things.

00:14:33,818 --> 00:14:36,724
We can also use other things like python,

00:14:36,834 --> 00:14:40,960
those things aren't event based,

00:14:41,194 --> 00:14:44,540
so you have to check them continuously through threading, so there's a bit of a problem.

00:14:46,707 --> 00:14:48,434
The next step is,

00:14:48,818 --> 00:14:51,934
the most important part when making a service.

00:14:52,136 --> 00:14:53,589
It's the frontend design,

00:14:53,591 --> 00:14:57,155
You might think that frontend design

00:14:57,156 --> 00:14:59,195
might not have any connection with machine learning

00:14:59,431 --> 00:15:00,068
But actually,

00:15:00,068 --> 00:15:03,002
Drawing from my experience,

00:15:03,550 --> 00:15:05,725
In developing an AI model based product,

00:15:05,726 --> 00:15:08,211
One of the most important parts is developing the frontend.

00:15:10,728 --> 00:15:11,997
You might be wondering why,

00:15:11,997 --> 00:15:14,410
So you get the output from the model,

00:15:14,411 --> 00:15:17,925
It's crucial to interpret it and display it well

00:15:18,523 --> 00:15:20,887
This will help you understand better.

00:15:21,595 --> 00:15:23,733
The output from the machine learning model is

00:15:23,898 --> 00:15:25,250
just that one number.

00:15:25,268 --> 00:15:27,681
If you put the data of a patient, it will say, 0.015,

00:15:27,929 --> 00:15:33,077
or 0.2, 0.03, hundreds of these numbers.

00:15:33,770 --> 00:15:37,193
The doctors cannot make decisions out of these. These are not the sole decision maker.

00:15:37,417 --> 00:15:40,319
If this patient gets 0.015, is she in risk or not,

00:15:40,319 --> 00:15:42,271
or was she already in danger,

00:15:42,568 --> 00:15:45,917
or has she developed the risk recently, these factors would be put into consideration

00:15:45,918 --> 00:15:47,919
So what the medical team would like to see

00:15:48,276 --> 00:15:50,310
would be the screen below here.

00:15:51,592 --> 00:15:55,968
Producing that screen from the number 0.015 above, is what the frontend does.

00:15:56,338 --> 00:15:58,668
It needs a lot of work and consideration

00:15:58,861 --> 00:16:02,648
How should we interpret the model? We need to work on that as well,

00:16:05,662 --> 00:16:08,568
For this process,

00:16:09,035 --> 00:16:11,776
We draw these kind of charts a lot,

00:16:11,777 --> 00:16:15,095
We check if our interpretation is actually accurate,

00:16:15,367 --> 00:16:17,233
this is not the actual graph we use,

00:16:17,468 --> 00:16:22,091
This is the kind of graph we use and I brought it from the E-chart docs

00:16:22,582 --> 00:16:28,093
For example, the estimated score, and the actual outcome, like death and so on,

00:16:28,641 --> 00:16:32,591
What was the relationship with the outcome and the input,

00:16:32,592 --> 00:16:34,568
Those are drawn into graphs

00:16:34,569 --> 00:16:39,668
to verify our intuition and results.

00:16:41,356 --> 00:16:44,545
So when it's delivered to the patients, they warn that this is very risky,

00:16:44,656 --> 00:16:46,516
like the figure is holding his heart,

00:16:46,933 --> 00:16:51,616
we contemplate on the ways to deliver it more intuitively.

00:16:54,172 --> 00:16:58,423
So far you might think that we finished making the AI product

00:16:59,300 --> 00:17:00,479
But in fact, the AI models

00:17:02,123 --> 00:17:05,167
are not always accurate when we actually put it into service.

00:17:05,167 --> 00:17:07,280
It's always wrong, it is always wrong.

00:17:08,090 --> 00:17:12,934
So if we dig down into the reason why it is wrong when it was successful during the development,

00:17:13,313 --> 00:17:15,567
first, the data is a little different.

00:17:15,568 --> 00:17:16,988
The aspects of the data is somewhat different.

00:17:17,317 --> 00:17:20,909
For example, the patient in 2015 and 2019 are completely different.

00:17:21,156 --> 00:17:25,068
Not completely maybe, but they are quite different. So that lowers the accuracy of the prediction

00:17:25,570 --> 00:17:27,583
and people's actions are a little different as well.

00:17:27,667 --> 00:17:31,268
Like when we predict sepsis

00:17:31,268 --> 00:17:32,947
and report them 4 hours ahead of its predicted occurrence,

00:17:32,947 --> 00:17:35,363
And the medical team reacts ahead according to it.

00:17:36,156 --> 00:17:40,734
With that reaction, the pattern of the sepsis will be different,

00:17:40,735 --> 00:17:44,546
And our AI model will lose accuracy because of it.

00:17:45,342 --> 00:17:50,217
Because we intervene into people's behaviors and reactions, it results in less accurate prediction.

00:17:50,799 --> 00:17:54,062
So the issue here is how do we make AI

00:17:54,063 --> 00:17:56,068
learn from the data

00:17:56,339 --> 00:17:58,505
that keeps changing.

00:17:58,971 --> 00:18:01,520
We have to consider that as well.

00:18:04,264 --> 00:18:06,567
You've seen this data pipeline before, right?

00:18:06,768 --> 00:18:10,435
So this trainer here does that work,

00:18:13,258 --> 00:18:17,124
The trainer microservice is not that big of a deal.

00:18:17,368 --> 00:18:18,968
We have the original data,

00:18:18,969 --> 00:18:22,167
We have data from September 1st, September 2nd, and the data keeps accumulating.

00:18:22,604 --> 00:18:26,218
And we get the version 1 model from the original data.

00:18:26,750 --> 00:18:29,985
If we include the data from September 1st, we have version 2,

00:18:29,987 --> 00:18:32,617
and if we have less accuracy with it, we should discard it.

00:18:33,002 --> 00:18:33,968
we decide to discard it,

00:18:34,181 --> 00:18:35,968
And then we have other data on September 2nd,

00:18:35,969 --> 00:18:37,768
and we train the model with it,

00:18:37,768 --> 00:18:40,456
if we have increased accuracy with it, we decide to keep that data.

00:18:40,845 --> 00:18:44,467
So we keep training the model regularly,

00:18:44,468 --> 00:18:47,733
this is the microservice that enables the model to be updated automatically.

00:18:48,249 --> 00:18:51,568
During such process, we verify the model with the data from other institutions

00:18:51,814 --> 00:18:57,567
We keep verifying the model that it is applicable to many other hospitals and institutions

00:18:59,588 --> 00:19:02,975
This described how to develop an AI product,

00:19:02,975 --> 00:19:05,851
it was a primitive description.

00:19:06,979 --> 00:19:09,968
And we cannot skip over tensorflow JS.

00:19:11,475 --> 00:19:15,355
You might have heard a lot about the tensorflow JS.

00:19:15,725 --> 00:19:18,331
This is, as you might know,

00:19:18,487 --> 00:19:21,583
a library that enables machine learning with Javascript.

00:19:21,841 --> 00:19:24,491
The one on the right is our code.

00:19:24,913 --> 00:19:27,804
You would know it if you have used Python tensorflow,

00:19:28,033 --> 00:19:31,967
the composition is very intuitive.

00:19:32,180 --> 00:19:34,868
The code is not that different from the Python tensorflow,

00:19:35,333 --> 00:19:38,215
So that you can use existing pre trained model

00:19:38,596 --> 00:19:41,567
You can also convert and use a pre-made model with Python,

00:19:41,568 --> 00:19:44,773
and it's also possible to train it on the browser or Node.js.

00:19:46,302 --> 00:19:49,538
If you access the tensorflow website, you have a tutorial page,

00:19:49,568 --> 00:19:50,936
and it's really good for beginners,

00:19:51,595 --> 00:19:56,292
even if you know nothing about it, you can try and develop a cool product

00:19:56,293 --> 00:20:00,068
So you learn about the already existing models here.

00:20:00,068 --> 00:20:02,667
or you can retrain the existing models,

00:20:03,057 --> 00:20:05,277
or use Javascript,

00:20:05,498 --> 00:20:08,377
to develop the machine learning from the beginning, those are some things that you can do.

00:20:08,624 --> 00:20:11,754
If you are interested, it would be fun to try it out.

00:20:12,134 --> 00:20:13,615
There are many interesting examples.

00:20:13,948 --> 00:20:17,616
You can play games, play a piano, there are a lot of fun demonstrations.

00:20:17,947 --> 00:20:18,867
So, it would be good for you to try.

00:20:20,251 --> 00:20:26,612
If you ask why we have to practice the machine learning on web browsers,

00:20:26,914 --> 00:20:31,357
on the right, this is a patient and a doctor having a real time conversation

00:20:31,768 --> 00:20:33,968
The doctor is constantly checking the patient's condition.

00:20:34,291 --> 00:20:38,383
Like this, predicting something interactively in real time.

00:20:38,596 --> 00:20:40,214
If you need this function,

00:20:41,227 --> 00:20:43,636
getting back from the back-end is a slow process

00:20:44,097 --> 00:20:46,415
and it doesn't react interactively.

00:20:47,846 --> 00:20:51,826
So, if you put it on the browser using Tensorflow js,

00:20:51,951 --> 00:20:53,715
very interactively,

00:20:54,062 --> 00:20:55,677
you can use the machine learning model.

00:20:56,047 --> 00:20:59,408
And of course, since it's ran on a web browser, the server load would be reduced.

00:20:59,958 --> 00:21:00,918
And,

00:21:02,868 --> 00:21:06,723
another benefit is that machine learning models could be visualized.

00:21:07,033 --> 00:21:08,368
These are the advantages.

00:21:08,706 --> 00:21:10,818
So we have used them a lot.

00:21:10,819 --> 00:21:13,067
We were thinking of how to use the Tensorflow js.

00:21:13,805 --> 00:21:18,156
Tensorflow doesn't support everything yet

00:21:18,523 --> 00:21:21,639
and there are only few people using it in communities. So,

00:21:22,116 --> 00:21:24,337
we made a simple model

00:21:24,368 --> 00:21:28,724
and tried running them or making simple products and famous ones.

00:21:28,983 --> 00:21:32,368
But we didn't try to use it for real production or anything like that.

00:21:32,754 --> 00:21:36,467
When the community grows, we'll be able to try many other things.

00:21:37,116 --> 00:21:41,036
So far, it's very good but it's not good enough to use right away.

00:21:45,644 --> 00:21:49,268
This is a library called TensorSpace js.

00:21:49,593 --> 00:21:52,060
When you run the machine learning model on a web browser, like this,

00:21:52,061 --> 00:21:53,667
you can easily check how the machine learning model

00:21:53,953 --> 00:21:57,975
actually moves about and what structure it takes.

00:21:57,975 --> 00:22:00,367
It's also very easy to debug the machine learning model.

00:22:04,318 --> 00:22:07,533
We've come to this point very quickly, now let's go back.

00:22:09,254 --> 00:22:11,365
So the products we are making right now.

00:22:11,366 --> 00:22:15,139
What kind of innovation could they actually make?

00:22:16,247 --> 00:22:18,052
You might be wondering, are they actually saving people's lives?

00:22:18,743 --> 00:22:22,667
In Korea, some hospitals are having a pilot test.

00:22:23,158 --> 00:22:29,821
When I checked the feedback from the medical team, doctors and nurses,

00:22:29,822 --> 00:22:31,167
there were some very good feedback.

00:22:31,521 --> 00:22:34,917
For example, it helped distributing medical resources efficiently.

00:22:36,375 --> 00:22:40,799
They could see the patients they couldn't see. Their work load have reduced so they could go home early.

00:22:40,800 --> 00:22:44,311
Their sleeping hours increased by an hour. There were good feedbacks like these.

00:22:44,876 --> 00:22:48,632
It's hard to say here whether it enhanced the survival rate or not.

00:22:48,633 --> 00:22:52,639
because that has to go through a very scientific and statistical verification.

00:22:52,993 --> 00:22:55,660
So it's ambiguous for me to say the exact percentage of it.

00:22:56,020 --> 00:23:00,290
But based on the feedbacks, I can safely say that it is contributing to the survival rate.

00:23:03,040 --> 00:23:04,730
So next, we are going to

00:23:05,568 --> 00:23:09,248
show that AI solution can actually save human lives,

00:23:09,249 --> 00:23:12,531
by verifying through a time-consuming experiments and observations.

00:23:13,011 --> 00:23:15,368
And we should certainly save a lot of lives, right?

00:23:15,781 --> 00:23:18,441
It's getting a bit cheesy so let's skip this part

00:23:19,620 --> 00:23:22,567
To explain the technological details,

00:23:22,966 --> 00:23:25,868
We are increasing the number of predictable diseases.

00:23:25,869 --> 00:23:29,327
So that we could predict every disease that occur at the hospital.

00:23:29,328 --> 00:23:30,897
We are trying to build that platform.

00:23:31,257 --> 00:23:34,857
And when a medicine is injected to cure a disease,

00:23:35,168 --> 00:23:36,293
predicting the reaction of the patient.

00:23:36,567 --> 00:23:39,487
Medically, we are facing these types of challenges

00:23:40,214 --> 00:23:44,414
To look at the machine learning, in terms of software,

00:23:44,876 --> 00:23:48,715
since we are making many predictions,

00:23:49,043 --> 00:23:52,763
it's hard to run all the machine learning models in the back-end.

00:23:53,218 --> 00:23:56,370
We do machine learning even for the tiniest parts.

00:23:56,620 --> 00:24:00,160
So we use the Tensorflow js to put it on a web browser or,

00:24:00,160 --> 00:24:02,260
just by using Tensorflow api,

00:24:02,480 --> 00:24:05,360
put it on mobile. We are using these processes.

00:24:06,293 --> 00:24:11,667
The screen on the right shows something we have presented at Nvidea.

00:24:11,969 --> 00:24:16,070
It's a platform that can accelerate machine learning research.

00:24:16,741 --> 00:24:19,768
You can look up the details of the presentation.

00:24:19,769 --> 00:24:21,594
Now, we are trying to

00:24:22,033 --> 00:24:26,367
create a platform that can fasten the learning process of machine learning

00:24:27,159 --> 00:24:28,728
We are working on that too.

00:24:29,684 --> 00:24:34,099
Additionally, other than medical, we have other things to process machine learning

00:24:34,648 --> 00:24:38,268
All of you, not just the people from our company, should utilize the machine learning in various fields

00:24:38,541 --> 00:24:40,525
and try different things.

00:24:40,868 --> 00:24:45,181
This could bring innovations that are never done before.

00:24:48,002 --> 00:24:51,167
This is the end of my presentation, and the time's almost up.

00:24:51,485 --> 00:24:52,664

YouTube URL: https://www.youtube.com/watch?v=hEsFF4ElJ08


