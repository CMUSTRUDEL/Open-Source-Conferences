Title: A WebAssembly Field Guide easily worth like 70 bottle caps | Flaki |JSConf Korea 2019
Publication date: 2019-10-04
Playlist: JSConf Korea 2019
Description: 
	Life underground has become trying lately. Following many distressing incidents and a recent trouble with your Vault's water supply, you are appointed Chief Vault Technician to take matters into your own hands. Documentation is scarce on these decade-old protective underground habitats, so when you finally manage to barter a bulky operating manual you are astounded by the rich historical accord of this one technology, called "WebAssembly", having seemingly evolved from its unsuspecting niche—a common dialect of inter-connected computers—to become the universal operational underpinning of every machine on Earth. Including those that have kept you & your compatriots safe over the past decades...
Captions: 
	00:00:16,960 --> 00:00:29,960
don't want you know out there we go

00:00:22,260 --> 00:00:29,960
like him - oops

00:00:31,910 --> 00:00:39,320
Jessica of Korea presents evap assembly

00:00:35,450 --> 00:00:39,940
filled guide easily worth like 70 bottle

00:00:39,320 --> 00:00:45,410
caps

00:00:39,940 --> 00:00:47,660
welcome to D world 67 three one six one

00:00:45,410 --> 00:00:50,150
he has spent your whole life on the

00:00:47,660 --> 00:00:51,769
ground always curious and fascinated but

00:00:50,150 --> 00:00:53,690
a gently humming machines around young

00:00:51,769 --> 00:00:55,879
knowing their jobs sustain your

00:00:53,690 --> 00:00:58,010
community for whatever cause a big

00:00:55,879 --> 00:01:00,589
calamity that force your ancestors

00:00:58,010 --> 00:01:02,600
underground decades ago it was already

00:01:00,589 --> 00:01:04,309
receding people are recently starting

00:01:02,600 --> 00:01:07,040
wandering outside the heavy vault doors

00:01:04,309 --> 00:01:09,140
exploring your desolate surroundings the

00:01:07,040 --> 00:01:11,030
reestablish connection to other

00:01:09,140 --> 00:01:12,860
settlements definitely came handy when

00:01:11,030 --> 00:01:14,840
you managed to port your bulky operating

00:01:12,860 --> 00:01:16,520
manual and started discovering the

00:01:14,840 --> 00:01:17,869
depths of the technology that is at the

00:01:16,520 --> 00:01:20,720
beating heart of your underground

00:01:17,869 --> 00:01:23,240
habitat a newly a port as newly

00:01:20,720 --> 00:01:24,829
appointed chief wall technician you were

00:01:23,240 --> 00:01:26,240
tasked to use this knowledge to improve

00:01:24,829 --> 00:01:31,280
the life of your community and you have

00:01:26,240 --> 00:01:32,750
every intention in doing so so hi my

00:01:31,280 --> 00:01:34,520
name is a spawn smashing ski and now you

00:01:32,750 --> 00:01:37,460
know exactly why I just stick with flock

00:01:34,520 --> 00:01:39,409
II I'm a freelance developer originally

00:01:37,460 --> 00:01:41,960
from Budapest Hungary I live in Estonian

00:01:39,409 --> 00:01:43,549
dam I spent quite some time in Asia in

00:01:41,960 --> 00:01:44,780
the past few years but this is actually

00:01:43,549 --> 00:01:47,060
my first time in Korea

00:01:44,780 --> 00:01:49,969
except that one transfer in chat Airport

00:01:47,060 --> 00:01:51,469
so I'm really looking forward to seeing

00:01:49,969 --> 00:01:53,810
a bitter soul at least after the

00:01:51,469 --> 00:01:56,810
conference I'm a missile attack speaker

00:01:53,810 --> 00:01:58,639
tech speakers is a program by Mozilla to

00:01:56,810 --> 00:02:00,469
support its community members teaching

00:01:58,639 --> 00:02:03,859
at speaking a conference is holding

00:02:00,469 --> 00:02:05,780
workshops and generally educating people

00:02:03,859 --> 00:02:09,140
about open web technologies and the open

00:02:05,780 --> 00:02:11,360
web in general I also work vet Mozilla's

00:02:09,140 --> 00:02:13,160
devrel team where I help steer their

00:02:11,360 --> 00:02:15,319
community efforts including the tech

00:02:13,160 --> 00:02:17,180
speakers program itself and evangelizing

00:02:15,319 --> 00:02:19,840
open web technologies especially someone

00:02:17,180 --> 00:02:21,860
the bleeding get soft like web assembly

00:02:19,840 --> 00:02:24,140
service workers or the systems

00:02:21,860 --> 00:02:26,420
programming language rust and you know

00:02:24,140 --> 00:02:27,950
if you have no idea what can browse the

00:02:26,420 --> 00:02:29,870
system programming language do with the

00:02:27,950 --> 00:02:32,830
open web will get there so hold that

00:02:29,870 --> 00:02:35,990
thought and be following closely the

00:02:32,830 --> 00:02:37,849
developments are and web assembly and

00:02:35,990 --> 00:02:40,100
related technologies first some time now

00:02:37,849 --> 00:02:41,930
and I also participate in the web

00:02:40,100 --> 00:02:44,210
assembly community group that is driving

00:02:41,930 --> 00:02:44,819
the evolution or the specification and

00:02:44,210 --> 00:02:46,200
the expand

00:02:44,819 --> 00:02:49,530
showing off Vegas Emily's feature set

00:02:46,200 --> 00:02:51,359
and you know you could be too yeah you

00:02:49,530 --> 00:02:55,260
don't have to be a compiler engineer or

00:02:51,359 --> 00:02:57,420
work at a big influential company to be

00:02:55,260 --> 00:03:00,180
able to do this the community group

00:02:57,420 --> 00:03:01,650
operates until the w3c but it's open to

00:03:00,180 --> 00:03:03,629
participation for anyone who is

00:03:01,650 --> 00:03:05,609
interested if you just go to web asami

00:03:03,629 --> 00:03:07,560
or click over to community you can

00:03:05,609 --> 00:03:08,909
actually see all the many ways and learn

00:03:07,560 --> 00:03:13,439
more about the many ways you could

00:03:08,909 --> 00:03:15,689
contribute yourself in this talk I will

00:03:13,439 --> 00:03:18,019
mention some of the many ways Mozilla

00:03:15,689 --> 00:03:21,540
and people working at Mozilla

00:03:18,019 --> 00:03:23,790
contributed to the creation and the

00:03:21,540 --> 00:03:25,919
evolution of APIs Emily and I haven't

00:03:23,790 --> 00:03:28,319
been involved with the work myself

00:03:25,919 --> 00:03:32,310
there is now an entire dedicated team at

00:03:28,319 --> 00:03:33,870
Mozilla for dedicated for working on the

00:03:32,310 --> 00:03:36,090
beginning the leading edge of web

00:03:33,870 --> 00:03:37,769
technologies and shaping web assemblies

00:03:36,090 --> 00:03:39,930
future occasionally there if I have

00:03:37,769 --> 00:03:41,760
positions open so if you would be

00:03:39,930 --> 00:03:43,799
interested in being part of that work or

00:03:41,760 --> 00:03:45,209
just want to learn more and about it

00:03:43,799 --> 00:03:48,019
feel free to reach out to me and I'm

00:03:45,209 --> 00:03:50,069
very happy to connect you them with them

00:03:48,019 --> 00:03:53,489
before we dive in there is one more

00:03:50,069 --> 00:03:56,159
caveat this is not a talk to teach you

00:03:53,489 --> 00:03:58,549
about male hub lab assembly looks like

00:03:56,159 --> 00:04:01,530
or how to generate web assembly code

00:03:58,549 --> 00:04:03,379
there is great documentation a couple of

00:04:01,530 --> 00:04:07,769
online paid grounds toriel's

00:04:03,379 --> 00:04:09,120
if you decide already that this is

00:04:07,769 --> 00:04:11,939
something that interests you this talk

00:04:09,120 --> 00:04:15,659
is before that how do you get there how

00:04:11,939 --> 00:04:18,150
do you know if you know how do you know

00:04:15,659 --> 00:04:20,159
if if you should care about meth

00:04:18,150 --> 00:04:21,690
assembly in the first place or why

00:04:20,159 --> 00:04:25,199
should you care about web assembly in

00:04:21,690 --> 00:04:27,360
the first place I've tried to show some

00:04:25,199 --> 00:04:29,340
pointers to that and and if you do

00:04:27,360 --> 00:04:31,139
decide to dive in after the talk there

00:04:29,340 --> 00:04:34,800
is plenty of resources link later in the

00:04:31,139 --> 00:04:36,389
slides due to the nature of technologies

00:04:34,800 --> 00:04:38,250
discuss here with them there's always a

00:04:36,389 --> 00:04:40,620
fair chance for any factual information

00:04:38,250 --> 00:04:42,419
regarding yadda yadda nobody really

00:04:40,620 --> 00:04:44,580
needs those disclaimers anyway the gist

00:04:42,419 --> 00:04:46,949
of it is really just you know this is

00:04:44,580 --> 00:04:50,219
highly volatile working progress stuff

00:04:46,949 --> 00:04:51,780
so my change significantly even like any

00:04:50,219 --> 00:04:53,880
time so before you push this into

00:04:51,780 --> 00:04:56,870
production be sure to do your own

00:04:53,880 --> 00:04:59,180
research and now with that

00:04:56,870 --> 00:05:01,460
out of the way let's get back to our

00:04:59,180 --> 00:05:06,139
favorite what technician who is about to

00:05:01,460 --> 00:05:08,240
learn a valuable lesson couple hundred

00:05:06,139 --> 00:05:10,190
pages into your newly acquired operating

00:05:08,240 --> 00:05:12,290
manual you still seem to be stuck with

00:05:10,190 --> 00:05:14,150
historical tropes from the era where

00:05:12,290 --> 00:05:16,400
horse-drawn carriages roam the streets

00:05:14,150 --> 00:05:18,199
all this time there is not a single bit

00:05:16,400 --> 00:05:21,139
of useful information or anything

00:05:18,199 --> 00:05:23,570
hands-on to be found on any of you

00:05:21,139 --> 00:05:25,790
you've all systems like what a waste of

00:05:23,570 --> 00:05:27,740
time in your son in federal raise you

00:05:25,790 --> 00:05:29,810
angry toss the manual out onto the

00:05:27,740 --> 00:05:32,810
corridor it flying right past one of

00:05:29,810 --> 00:05:35,210
your elderly fathers you've apologized

00:05:32,810 --> 00:05:38,030
profusely explaining your situation but

00:05:35,210 --> 00:05:41,120
the ole mangies losses reply imports a

00:05:38,030 --> 00:05:43,460
lifetime of wisdom oh dear

00:05:41,120 --> 00:05:45,260
actually history provides the single

00:05:43,460 --> 00:05:48,110
most precious kind of knowledge amongst

00:05:45,260 --> 00:05:50,270
all there are invaluable lessons to be

00:05:48,110 --> 00:05:56,630
learned from the context exposed by past

00:05:50,270 --> 00:05:59,210
history and and this is true history

00:05:56,630 --> 00:06:01,039
provides context Skepta sister world's

00:05:59,210 --> 00:06:03,800
webassembly may often be rooted in the

00:06:01,039 --> 00:06:06,289
fact that very few are familiar with the

00:06:03,800 --> 00:06:08,870
technologies evolution influences goals

00:06:06,289 --> 00:06:10,520
history in short of course we can't

00:06:08,870 --> 00:06:13,250
really expect every developer to know

00:06:10,520 --> 00:06:15,020
exactly what arduous journey have abbess

00:06:13,250 --> 00:06:17,090
only has been through just to get where

00:06:15,020 --> 00:06:18,380
it is today follow take a stab at

00:06:17,090 --> 00:06:20,720
highlighting some and a few may

00:06:18,380 --> 00:06:23,180
moderators some real issues of the web

00:06:20,720 --> 00:06:25,660
platform and the solutions Robison aims

00:06:23,180 --> 00:06:25,660
to provide

00:06:29,120 --> 00:06:33,919
but wait lucky okay okay that map

00:06:32,030 --> 00:06:36,139
assembly Decemeber suddenly that what is

00:06:33,919 --> 00:06:38,690
web assembly well webassembly allows

00:06:36,139 --> 00:06:41,150
code that was written in any of a wide

00:06:38,690 --> 00:06:43,699
variety of programming languages to be

00:06:41,150 --> 00:06:45,440
run securely on the web you take the

00:06:43,699 --> 00:06:47,510
original source or source code of a

00:06:45,440 --> 00:06:49,580
supporting programming language it is

00:06:47,510 --> 00:06:52,400
compiled while using the web assembly

00:06:49,580 --> 00:06:55,400
tool chain into your size and execution

00:06:52,400 --> 00:06:58,520
speed efficient binary format that can

00:06:55,400 --> 00:07:00,830
be used on the web executed safely at

00:06:58,520 --> 00:07:04,610
close to negative speeds inside the web

00:07:00,830 --> 00:07:06,680
browser close to native speeds here

00:07:04,610 --> 00:07:08,840
refers to the fact that the execution

00:07:06,680 --> 00:07:11,270
speed of webassembly compiled binary is

00:07:08,840 --> 00:07:13,550
in many cases today are able to approach

00:07:11,270 --> 00:07:16,310
the performance of the same source code

00:07:13,550 --> 00:07:18,200
when it's compiled to the native

00:07:16,310 --> 00:07:23,180
execution format of any given platform

00:07:18,200 --> 00:07:27,919
it's fast safe execution on the other

00:07:23,180 --> 00:07:30,800
hand means that refers to all the

00:07:27,919 --> 00:07:33,380
various ways the during execution even

00:07:30,800 --> 00:07:36,200
before execution the web assembly

00:07:33,380 --> 00:07:39,320
runtime ensures certain security and

00:07:36,200 --> 00:07:41,690
safety guarantees and these are strictly

00:07:39,320 --> 00:07:43,010
enforced by the the runtime that runs

00:07:41,690 --> 00:07:45,229
the web assembly code which means

00:07:43,010 --> 00:07:47,599
running this 4-part occurred on the

00:07:45,229 --> 00:07:50,050
user's machine which remains safe robust

00:07:47,599 --> 00:07:52,789
and isolated from the rest of the page

00:07:50,050 --> 00:07:58,310
while all the same time retaining all

00:07:52,789 --> 00:08:00,229
the speed guarantees there is a let me

00:07:58,310 --> 00:08:03,020
give you a golden tour of the history

00:08:00,229 --> 00:08:05,120
before 2012 that was likely what I call

00:08:03,020 --> 00:08:07,660
the primordial period you know dinosaurs

00:08:05,120 --> 00:08:10,250
jQuery except JavaScript has been

00:08:07,660 --> 00:08:15,800
steadily increasing in speed since like

00:08:10,250 --> 00:08:18,229
2008 when v8 was released and and that

00:08:15,800 --> 00:08:20,870
kind of like whipped up a browser verb

00:08:18,229 --> 00:08:22,400
and like all JavaScript engines were

00:08:20,870 --> 00:08:24,020
completing video they were trying to

00:08:22,400 --> 00:08:26,840
increase the Indy Java at the speeds

00:08:24,020 --> 00:08:29,690
into JavaScript it still wasn't enough

00:08:26,840 --> 00:08:32,959
you can never have enough speed so smj

00:08:29,690 --> 00:08:36,349
SD booted in 2013 it was created as a

00:08:32,959 --> 00:08:39,229
easy to optimize javascript subset that

00:08:36,349 --> 00:08:41,790
compiler stand when tools could directly

00:08:39,229 --> 00:08:44,040
used to directly target

00:08:41,790 --> 00:08:46,920
to generate code that we run in the

00:08:44,040 --> 00:08:48,780
browser browser JavaScript engines had

00:08:46,920 --> 00:08:51,540
specific optimizations for this kind of

00:08:48,780 --> 00:08:53,580
code so they were fast in supporting

00:08:51,540 --> 00:08:56,610
browsers it was even possible to compile

00:08:53,580 --> 00:08:58,170
entire games and 3d engines with barely

00:08:56,610 --> 00:09:00,840
any changes to the original source code

00:08:58,170 --> 00:09:04,020
with a SMGs and just run them in the

00:09:00,840 --> 00:09:06,600
browser at comfortable speeds it you

00:09:04,020 --> 00:09:10,680
know it was a super fast but like it

00:09:06,600 --> 00:09:12,300
worked really well it's spiritual you

00:09:10,680 --> 00:09:14,370
could call spiritual successor

00:09:12,300 --> 00:09:16,950
webassembly was released in 2015

00:09:14,370 --> 00:09:18,780
all four major browsers actually shipped

00:09:16,950 --> 00:09:21,120
support in a few months by time period

00:09:18,780 --> 00:09:24,020
and it continues to be actively

00:09:21,120 --> 00:09:26,610
developed now I not really going to

00:09:24,020 --> 00:09:28,500
teach you an actual history lesson I

00:09:26,610 --> 00:09:30,120
think it's more interesting to actually

00:09:28,500 --> 00:09:33,030
take a look at some of them some of

00:09:30,120 --> 00:09:37,110
these key features and have a look into

00:09:33,030 --> 00:09:38,970
how they came to be so web assembly has

00:09:37,110 --> 00:09:41,010
been built on a core principle that

00:09:38,970 --> 00:09:43,920
could be summarized as augment not

00:09:41,010 --> 00:09:46,290
obsolete this means that it focuses on

00:09:43,920 --> 00:09:48,690
CMOS integration really striving to

00:09:46,290 --> 00:09:50,580
extend and complement the existing web

00:09:48,690 --> 00:09:51,090
platform rather than trying to compete

00:09:50,580 --> 00:09:53,370
with it

00:09:51,090 --> 00:09:56,040
in fact web asami modules are largely

00:09:53,370 --> 00:09:57,780
in-app inert without the Emperor's

00:09:56,040 --> 00:09:59,580
cooperation and don't expose any

00:09:57,780 --> 00:10:03,780
features beyond those that are already

00:09:59,580 --> 00:10:06,060
available to Jas better here means the

00:10:03,780 --> 00:10:07,950
host environment so the browser is one

00:10:06,060 --> 00:10:10,980
and such but there are quite a few other

00:10:07,950 --> 00:10:12,960
Emperor's these days in the case of the

00:10:10,980 --> 00:10:14,850
browser JavaScript everyone could save

00:10:12,960 --> 00:10:17,250
it some simplification that we Baba

00:10:14,850 --> 00:10:20,430
suddenly today you won't be able to do

00:10:17,250 --> 00:10:23,310
anything that your JavaScript doesn't do

00:10:20,430 --> 00:10:24,870
already but what you could do is you

00:10:23,310 --> 00:10:28,230
could be probably put a potentially

00:10:24,870 --> 00:10:31,680
faster after the embedder actually

00:10:28,230 --> 00:10:34,320
instantiates your web assembly module it

00:10:31,680 --> 00:10:36,620
allocates its own memory so your Marisa

00:10:34,320 --> 00:10:40,440
module will have its own memory and the

00:10:36,620 --> 00:10:42,540
embedding runtime will pass it all other

00:10:40,440 --> 00:10:44,460
resources it needs this means dekes

00:10:42,540 --> 00:10:47,100
imports an expert's the function calls

00:10:44,460 --> 00:10:48,720
of requires and the live model module

00:10:47,100 --> 00:10:51,180
after this itself is largely

00:10:48,720 --> 00:10:52,680
self-contained and very has very limited

00:10:51,180 --> 00:10:56,279
access to its

00:10:52,680 --> 00:10:58,080
my man this is also known as the

00:10:56,279 --> 00:10:59,700
principle of least privilege you only

00:10:58,080 --> 00:11:01,560
want to provide a verse and a module

00:10:59,700 --> 00:11:03,149
with access to resources that you you

00:11:01,560 --> 00:11:05,670
are pretty sure the exactly needs and

00:11:03,149 --> 00:11:08,250
nothing more API calls that need to

00:11:05,670 --> 00:11:09,779
access the network or storage still need

00:11:08,250 --> 00:11:12,990
to go to the JavaScript runtime or

00:11:09,779 --> 00:11:15,270
browser api's and the module might have

00:11:12,990 --> 00:11:17,300
hooks into the system api's and other

00:11:15,270 --> 00:11:20,279
JavaScript bindings that were passed in

00:11:17,300 --> 00:11:22,950
or it may request services such as more

00:11:20,279 --> 00:11:24,959
memory by the JavaScript API but

00:11:22,950 --> 00:11:27,450
embedding the embedding environment has

00:11:24,959 --> 00:11:30,000
the offer to deny any or such requests

00:11:27,450 --> 00:11:31,860
and which means wherever suddenly module

00:11:30,000 --> 00:11:34,320
is highly dependent on the cooperation

00:11:31,860 --> 00:11:36,480
of the embedder itself there are

00:11:34,320 --> 00:11:40,620
actually even more implied proposals

00:11:36,480 --> 00:11:42,029
that are there are of the web assembly

00:11:40,620 --> 00:11:44,959
standard that are working towards

00:11:42,029 --> 00:11:47,430
deepening and extending this integration

00:11:44,959 --> 00:11:48,990
the cooperative and complementary

00:11:47,430 --> 00:11:51,510
relationship actually predates web

00:11:48,990 --> 00:11:53,250
assembly and I mentioned a SMGs was a

00:11:51,510 --> 00:11:56,100
JavaScript subset and that is still

00:11:53,250 --> 00:11:57,660
practically JavaScript but it's true

00:11:56,100 --> 00:11:59,910
billions lies in the fact that the

00:11:57,660 --> 00:12:02,010
changes required for supporting SMGs

00:11:59,910 --> 00:12:04,770
optimizations were so minimal that our

00:12:02,010 --> 00:12:10,260
browsers a large browsers wanted in so a

00:12:04,770 --> 00:12:12,450
SMGs feature set was soon enough one of

00:12:10,260 --> 00:12:14,459
the amount after the other all modern

00:12:12,450 --> 00:12:16,470
browsers has shipped support for a SMGs

00:12:14,459 --> 00:12:18,900
optimizations in their engines and the

00:12:16,470 --> 00:12:21,990
cooperation of browser renders outlived

00:12:18,900 --> 00:12:23,820
SMGs following its success the people

00:12:21,990 --> 00:12:26,810
who worked on a SMG I started exploring

00:12:23,820 --> 00:12:31,709
ways to and the work that is needed to

00:12:26,810 --> 00:12:33,690
fix the SMGs inherent shortcomings for a

00:12:31,709 --> 00:12:36,029
casual observer rabbits only is often

00:12:33,690 --> 00:12:38,240
perceived as simple usually this refers

00:12:36,029 --> 00:12:41,040
to the highly constrained features that

00:12:38,240 --> 00:12:42,839
after shipping a SMGs it became clear

00:12:41,040 --> 00:12:44,550
that some of the shortcomings cannot be

00:12:42,839 --> 00:12:47,040
fixed without actually breaking the web

00:12:44,550 --> 00:12:52,010
or just reimagining how the architecture

00:12:47,040 --> 00:12:54,240
worked and this and this pong a lot of

00:12:52,010 --> 00:12:57,120
explorations which eventually converged

00:12:54,240 --> 00:13:00,930
into what we call the web assembly MVP

00:12:57,120 --> 00:13:02,100
today develop assembly MVP this this

00:13:00,930 --> 00:13:04,620
collaboration

00:13:02,100 --> 00:13:05,980
made way for the web assembly MVP a

00:13:04,620 --> 00:13:09,400
minor might

00:13:05,980 --> 00:13:11,530
viable webassembly this was like a

00:13:09,400 --> 00:13:15,700
robust extensible and future-proof

00:13:11,530 --> 00:13:17,590
foundation that was laid out even in

00:13:15,700 --> 00:13:21,850
this like diverse setting like you

00:13:17,590 --> 00:13:24,010
Microsoft and Apple collaborating and

00:13:21,850 --> 00:13:25,750
more contentious issues so there was a

00:13:24,010 --> 00:13:27,910
minimal feature set and the more

00:13:25,750 --> 00:13:30,580
contentious issues were set aside to

00:13:27,910 --> 00:13:32,200
bake for some additional time or you

00:13:30,580 --> 00:13:35,410
know P to be informed by some of the

00:13:32,200 --> 00:13:40,110
early adopters this left webOS suddenly

00:13:35,410 --> 00:13:40,110
in a constant state of evolution at the

00:13:40,350 --> 00:13:46,690
and as the community group the designs

00:13:44,200 --> 00:13:49,870
additional and enhancements based on the

00:13:46,690 --> 00:13:52,500
implementers feedback but it's not the

00:13:49,870 --> 00:13:57,190
only thing that mmm

00:13:52,500 --> 00:14:05,560
that webassembly had had access to so

00:13:57,190 --> 00:14:07,980
this so this might seem like that it was

00:14:05,560 --> 00:14:10,920
not only the specifications resource

00:14:07,980 --> 00:14:13,990
constraints that caused web assemblies

00:14:10,920 --> 00:14:16,540
simplicity but it was also a deliberate

00:14:13,990 --> 00:14:18,790
design choice the entire specification

00:14:16,540 --> 00:14:20,980
is around 100 pages the instruction set

00:14:18,790 --> 00:14:23,410
or the formal definition on the runtime

00:14:20,980 --> 00:14:27,190
fits a single page and you know these

00:14:23,410 --> 00:14:29,710
are some some star sentences out of the

00:14:27,190 --> 00:14:31,660
specification itself no computation can

00:14:29,710 --> 00:14:33,880
crash or otherwise misbehave in way is

00:14:31,660 --> 00:14:37,120
not covered by the execution semantics

00:14:33,880 --> 00:14:40,780
given in this specification this

00:14:37,120 --> 00:14:43,750
robustness stems from the fact that the

00:14:40,780 --> 00:14:46,690
web assembly runtime itself is very very

00:14:43,750 --> 00:14:48,750
simple very straightforward this

00:14:46,690 --> 00:14:51,760
property the safe and secure execution

00:14:48,750 --> 00:14:54,100
at consistently fast close to native

00:14:51,760 --> 00:14:56,320
speeds on all target platforms is

00:14:54,100 --> 00:14:58,060
already hinting towards use cases beyond

00:14:56,320 --> 00:14:59,800
the web but let us not get ahead of

00:14:58,060 --> 00:15:02,380
ourselves and just talk a little bit

00:14:59,800 --> 00:15:06,970
about what creators on the web had to

00:15:02,380 --> 00:15:08,470
gain first almost a year have passed

00:15:06,970 --> 00:15:11,260
since you first got your hand on your

00:15:08,470 --> 00:15:13,210
first operating manual slowly but surely

00:15:11,260 --> 00:15:16,090
you have become more handy around the

00:15:13,210 --> 00:15:18,130
wall fixed this rebuilt that even gained

00:15:16,090 --> 00:15:19,310
some notoriety for some of your

00:15:18,130 --> 00:15:21,680
creations and

00:15:19,310 --> 00:15:24,050
knowledge you occasionally get visitors

00:15:21,680 --> 00:15:29,210
from other vaults seeking your advice or

00:15:24,050 --> 00:15:31,430
experience you cannot not formally

00:15:29,210 --> 00:15:33,160
remember that one time when you almost

00:15:31,430 --> 00:15:35,090
not the poor fellow wall dweller

00:15:33,160 --> 00:15:37,670
unconscious with the book and

00:15:35,090 --> 00:15:39,529
frustration of being useless he smiles

00:15:37,670 --> 00:15:41,360
he put the finishing touches a new piece

00:15:39,529 --> 00:15:43,970
of machinery areas that verge to life

00:15:41,360 --> 00:15:48,680
will lightly squealing as you push the

00:15:43,970 --> 00:15:50,960
big green button why should you Babb

00:15:48,680 --> 00:15:53,540
some more often it's not immediately

00:15:50,960 --> 00:15:56,630
easy to see the benefit of technology

00:15:53,540 --> 00:15:57,740
for once your own use cases but this

00:15:56,630 --> 00:16:02,120
doesn't mean that it doesn't have any

00:15:57,740 --> 00:16:04,760
industry testimonials finding the idea

00:16:02,120 --> 00:16:07,190
use case you often takes time and rarely

00:16:04,760 --> 00:16:09,830
happens without export to research and

00:16:07,190 --> 00:16:11,839
experimentation industry testimonials

00:16:09,830 --> 00:16:14,089
that report significant gains from

00:16:11,839 --> 00:16:15,710
making use of FSM they almost never fail

00:16:14,089 --> 00:16:18,020
to mention the vending road they have to

00:16:15,710 --> 00:16:21,520
embarked on before the true benefits of

00:16:18,020 --> 00:16:21,520
the technology started shining through

00:16:22,630 --> 00:16:27,980
one of the first and Judah state most

00:16:25,670 --> 00:16:30,920
major tools used in the ecosystem is I'm

00:16:27,980 --> 00:16:33,170
scripting a c-plus Oz compiler for ASM

00:16:30,920 --> 00:16:35,240
GSM web assembly in script is as old as

00:16:33,170 --> 00:16:38,420
the entire ecosystem it was born and

00:16:35,240 --> 00:16:39,440
then Co evolve alongside a SMGs when we

00:16:38,420 --> 00:16:41,000
have assembly rolled around them

00:16:39,440 --> 00:16:43,220
scriptum was one of the first tools

00:16:41,000 --> 00:16:45,380
there to support it as an old

00:16:43,220 --> 00:16:45,950
photographer format and script a made it

00:16:45,380 --> 00:16:49,280
possible

00:16:45,950 --> 00:16:51,440
easy even to compile large pre-existing

00:16:49,280 --> 00:16:54,470
code bases libraries or even entire apps

00:16:51,440 --> 00:16:57,230
sometimes millions of lines occurred for

00:16:54,470 --> 00:16:59,839
the web not the most prevalent use case

00:16:57,230 --> 00:17:02,390
web use case I'll admit but surely not

00:16:59,839 --> 00:17:05,150
many of you had ever the sudden urge to

00:17:02,390 --> 00:17:08,150
ship a triple-a game title to a vanilla

00:17:05,150 --> 00:17:09,650
web browser I guess furthermore one of

00:17:08,150 --> 00:17:11,630
these not offering these compiled

00:17:09,650 --> 00:17:13,610
bundles you know you input a lot of code

00:17:11,630 --> 00:17:15,650
you get out a lot of code and then up

00:17:13,610 --> 00:17:18,199
tens or even hundreds of megabytes which

00:17:15,650 --> 00:17:20,630
is a very scary figure considering the

00:17:18,199 --> 00:17:22,939
ever-increasing bloat of the web today's

00:17:20,630 --> 00:17:25,209
web sites all this is to say that this

00:17:22,939 --> 00:17:27,470
inner certainly found or even funded

00:17:25,209 --> 00:17:29,780
enthusiastic niche or following for

00:17:27,470 --> 00:17:31,960
compiling for the browser but stay quite

00:17:29,780 --> 00:17:35,480
far from becoming mange

00:17:31,960 --> 00:17:37,160
even for those who not writing their own

00:17:35,480 --> 00:17:39,470
games and astral class apps Emscripten

00:17:37,160 --> 00:17:41,630
was still useful though one could write

00:17:39,470 --> 00:17:43,160
a smallish module in a low-level

00:17:41,630 --> 00:17:46,190
programming language like C or C++

00:17:43,160 --> 00:17:48,260
compiler and use it in one's app to

00:17:46,190 --> 00:17:50,720
surgically replace the performance

00:17:48,260 --> 00:17:53,930
sensitive parts or use it to target the

00:17:50,720 --> 00:17:55,400
web as one of their platforms one would

00:17:53,930 --> 00:17:56,930
need to be able to write code in a

00:17:55,400 --> 00:17:59,240
low-level language as well as write

00:17:56,930 --> 00:18:01,670
JavaScript blue code to discuss two

00:17:59,240 --> 00:18:03,770
modules rarely making these their most

00:18:01,670 --> 00:18:07,340
reusable most portable pieces of code

00:18:03,770 --> 00:18:09,830
ever written but it worked and Tripta is

00:18:07,340 --> 00:18:11,720
not the only way though rust was one of

00:18:09,830 --> 00:18:13,820
the first level first low-level Lang

00:18:11,720 --> 00:18:15,590
systems languages that not only added

00:18:13,820 --> 00:18:17,360
built-in support for web assembly target

00:18:15,590 --> 00:18:18,890
but it took one sir took it one step

00:18:17,360 --> 00:18:20,570
further and even doubled down and

00:18:18,890 --> 00:18:21,320
supporting web assembly as a first-class

00:18:20,570 --> 00:18:23,900
citizen

00:18:21,320 --> 00:18:25,940
high-performance robots memory guarantee

00:18:23,900 --> 00:18:28,310
stellar dogs sophisticated tooling an

00:18:25,940 --> 00:18:31,280
extensive library of crates which is

00:18:28,310 --> 00:18:36,050
third party modules building from the

00:18:31,280 --> 00:18:38,570
npm on d on the fret of npm the that

00:18:36,050 --> 00:18:40,430
could be imported and reused in an NPM

00:18:38,570 --> 00:18:42,650
ish fashion made Russ an ideal choice

00:18:40,430 --> 00:18:44,870
for someone who wanted to go deep but

00:18:42,650 --> 00:18:46,940
unwilling to deal with C++ shenanigans

00:18:44,870 --> 00:18:49,310
and you know if I'm preaching rust

00:18:46,940 --> 00:18:51,830
that's because I am a huge fan so I

00:18:49,310 --> 00:18:53,840
actually run a Russ conference ourselves

00:18:51,830 --> 00:18:55,460
in Europe but if you don't want to go

00:18:53,840 --> 00:18:57,260
that far there's a Russ Tokyo conference

00:18:55,460 --> 00:19:00,440
happening in October so you should

00:18:57,260 --> 00:19:02,480
definitely check that out of course not

00:19:00,440 --> 00:19:04,280
everyone can or wants to learn a code

00:19:02,480 --> 00:19:08,180
and a low-level language just to get

00:19:04,280 --> 00:19:10,370
 done assembly script is a provides

00:19:08,180 --> 00:19:12,350
a language for this with much familiy

00:19:10,370 --> 00:19:15,140
much more familiar semantics to all

00:19:12,350 --> 00:19:17,750
JavaScript developers it's like a subset

00:19:15,140 --> 00:19:19,520
of typescript and it serves as a much

00:19:17,750 --> 00:19:21,740
lower barrier of friendship for creating

00:19:19,520 --> 00:19:26,210
web assembly modules bespoke vasami

00:19:21,740 --> 00:19:28,310
modules for web developers but to quote

00:19:26,210 --> 00:19:29,930
Surma you don't need to understand all

00:19:28,310 --> 00:19:31,910
of this to be a good web developer or

00:19:29,930 --> 00:19:35,330
even to make good use of web assembly in

00:19:31,910 --> 00:19:37,340
the first place Surma here in the

00:19:35,330 --> 00:19:40,250
curator post he means that one doesn't

00:19:37,340 --> 00:19:41,810
need to be using bespoke tooling just to

00:19:40,250 --> 00:19:43,840
be able to create a wrap assembly module

00:19:41,810 --> 00:19:46,580
in one project

00:19:43,840 --> 00:19:48,770
and surely and Krypton or just using

00:19:46,580 --> 00:19:49,820
pre-compiled Watson modules will go a

00:19:48,770 --> 00:19:53,240
long way

00:19:49,820 --> 00:19:54,950
we tools like assembler script and more

00:19:53,240 --> 00:19:57,380
and more languages adding direct support

00:19:54,950 --> 00:19:59,930
webOS purpose-built components will also

00:19:57,380 --> 00:20:02,120
fry but even so it's hard to imagine

00:19:59,930 --> 00:20:05,360
that offering webassembly modules will

00:20:02,120 --> 00:20:07,160
become a mainstream task undertaken by

00:20:05,360 --> 00:20:09,440
the majority of web developers and

00:20:07,160 --> 00:20:12,559
that's perfectly fine it shouldn't be

00:20:09,440 --> 00:20:14,059
the good news is one does not need to

00:20:12,559 --> 00:20:16,550
know where but some really know about

00:20:14,059 --> 00:20:19,929
web assembly to be able to benefit from

00:20:16,550 --> 00:20:22,490
the new technologies ecosystem effects

00:20:19,929 --> 00:20:24,620
proposals such as interface types

00:20:22,490 --> 00:20:25,250
proposal the web I do bindings for the

00:20:24,620 --> 00:20:27,020
ongoing

00:20:25,250 --> 00:20:29,960
yes module integration currently

00:20:27,020 --> 00:20:31,670
underway are working towards integrating

00:20:29,960 --> 00:20:33,410
web assembly modules even more

00:20:31,670 --> 00:20:36,500
seamlessly into the ecosystem in the

00:20:33,410 --> 00:20:38,150
future one you would just import a

00:20:36,500 --> 00:20:40,640
module using your favorite package

00:20:38,150 --> 00:20:42,080
manager and it could and it could be

00:20:40,640 --> 00:20:44,690
using web assembly under the hood

00:20:42,080 --> 00:20:47,809
without the use of me even being aware

00:20:44,690 --> 00:20:49,429
of the fact in the first place also even

00:20:47,809 --> 00:20:51,620
if once production code won't end up

00:20:49,429 --> 00:20:55,720
using web assembling one might still

00:20:51,620 --> 00:20:55,720
benefit from WebAssign Levi bell tolling

00:20:55,960 --> 00:21:01,460
that pack was one of the early

00:20:58,550 --> 00:21:04,250
experimenters who had really good

00:21:01,460 --> 00:21:06,740
results promising results trying to use

00:21:04,250 --> 00:21:08,450
web asana for improving build times with

00:21:06,740 --> 00:21:10,280
recent announcement around interface

00:21:08,450 --> 00:21:12,740
ties by the muscle of AB assembly team

00:21:10,280 --> 00:21:14,780
this already pretty futuristic sounding

00:21:12,740 --> 00:21:15,260
paradise might be closer than you would

00:21:14,780 --> 00:21:18,080
think

00:21:15,260 --> 00:21:19,730
but let us have a glance at a slightly

00:21:18,080 --> 00:21:24,230
even more further odd potential of

00:21:19,730 --> 00:21:26,360
ramasammy well modern nature certainly

00:21:24,230 --> 00:21:28,400
didn't stop coming up with bizarre new

00:21:26,360 --> 00:21:30,559
ideas while you and your compatriots

00:21:28,400 --> 00:21:33,440
were hiding in your cozy underground and

00:21:30,559 --> 00:21:36,290
embrace of your vaults the swirling

00:21:33,440 --> 00:21:38,030
display of almost a dozen tales and this

00:21:36,290 --> 00:21:39,950
weird-looking animal as you emerge from

00:21:38,030 --> 00:21:43,040
the Walt Amana evening this Channing

00:21:39,950 --> 00:21:45,500
chills down your spine hard to call it

00:21:43,040 --> 00:21:47,750
nightmarish as you're pretty sure you

00:21:45,500 --> 00:21:49,970
could never even dream up such a strange

00:21:47,750 --> 00:21:50,570
creature was it what is it is it

00:21:49,970 --> 00:21:53,600
friendly

00:21:50,570 --> 00:21:55,040
or is it hostile yes you will find out

00:21:53,600 --> 00:21:57,950
soon enough

00:21:55,040 --> 00:21:59,930
and sure enough you know it's tough to

00:21:57,950 --> 00:22:01,970
predict the future of a nascent

00:21:59,930 --> 00:22:03,860
ecosystem and webassembly is no

00:22:01,970 --> 00:22:06,410
different we know if you don't really

00:22:03,860 --> 00:22:08,300
know where all of it will end up until

00:22:06,410 --> 00:22:10,490
we actually get there someone the

00:22:08,300 --> 00:22:13,220
currently discussed post MVP features

00:22:10,490 --> 00:22:15,770
garbage collection integration by by DL

00:22:13,220 --> 00:22:16,280
integration till calls framing to name a

00:22:15,770 --> 00:22:18,350
few

00:22:16,280 --> 00:22:20,570
will make it possible for more languages

00:22:18,350 --> 00:22:23,090
to target an inter interoperate with the

00:22:20,570 --> 00:22:25,100
web this also includes more exotic once

00:22:23,090 --> 00:22:27,620
you know languages that look much less

00:22:25,100 --> 00:22:29,870
like JavaScript today and this is of

00:22:27,620 --> 00:22:32,240
course not you if you live in a beige of

00:22:29,870 --> 00:22:34,280
Babel and typescript and element reason

00:22:32,240 --> 00:22:36,070
but babbling to make this process even

00:22:34,280 --> 00:22:38,300
better and the edges are much faster

00:22:36,070 --> 00:22:39,710
this is not only interesting from a

00:22:38,300 --> 00:22:41,300
technology standpoint but also

00:22:39,710 --> 00:22:43,010
increasing the diversity and

00:22:41,300 --> 00:22:46,250
accessibility of developing for the web

00:22:43,010 --> 00:22:47,990
allowing people to use whatever language

00:22:46,250 --> 00:22:49,850
they feel the most comfortable with

00:22:47,990 --> 00:22:52,280
rather than maintaining one particular

00:22:49,850 --> 00:22:54,230
man on the web will make their Evette

00:22:52,280 --> 00:22:59,300
platform much more resilient in the

00:22:54,230 --> 00:23:01,130
future because of every language wanting

00:22:59,300 --> 00:23:02,930
to run in the browser now suddenly you

00:23:01,130 --> 00:23:06,950
have a common low-level layer they all

00:23:02,930 --> 00:23:08,630
support people watch India about quote

00:23:06,950 --> 00:23:11,300
something that is frequently observed

00:23:08,630 --> 00:23:13,700
the web platforms gravity have given

00:23:11,300 --> 00:23:16,370
Babis and the adoption an incredible

00:23:13,700 --> 00:23:18,860
boost but not all use cases necessarily

00:23:16,370 --> 00:23:20,390
need to involve the browser sure the

00:23:18,860 --> 00:23:22,490
verb may be an excellent medium to

00:23:20,390 --> 00:23:24,590
popularize the use of Ibis ami but the

00:23:22,490 --> 00:23:27,290
same modules could later be adopted for

00:23:24,590 --> 00:23:29,720
or in certain cases just ran out of the

00:23:27,290 --> 00:23:32,920
box in any verb assembly compatible

00:23:29,720 --> 00:23:35,180
right around time and well I would

00:23:32,920 --> 00:23:37,250
restrict ourselves to the browser

00:23:35,180 --> 00:23:39,050
wherever Semmy seems to have properties

00:23:37,250 --> 00:23:41,450
that could come handy in various other

00:23:39,050 --> 00:23:43,250
contexts to you wouldn't a would it be

00:23:41,450 --> 00:23:45,500
possible to take some of the values of

00:23:43,250 --> 00:23:46,850
sake and safe and secure sandboxing into

00:23:45,500 --> 00:23:49,370
the in the browser

00:23:46,850 --> 00:23:51,410
beyond the web at webassembly would it

00:23:49,370 --> 00:23:53,660
be possible to still provide enough

00:23:51,410 --> 00:23:55,790
power and flexibility required by all

00:23:53,660 --> 00:23:58,070
the other use cases these are the

00:23:55,790 --> 00:24:01,910
questions that are being explored in the

00:23:58,070 --> 00:24:04,070
sister specification of webassembly the

00:24:01,910 --> 00:24:07,280
web assembly system interface or huazi

00:24:04,070 --> 00:24:08,450
for short what would it take to take

00:24:07,280 --> 00:24:11,150
them assembly into the

00:24:08,450 --> 00:24:13,460
restricted environments and providing

00:24:11,150 --> 00:24:15,200
more capabilities still retaining most

00:24:13,460 --> 00:24:19,100
of the safety guarantees that make the

00:24:15,200 --> 00:24:21,800
map so unique what he is another

00:24:19,100 --> 00:24:24,110
tremendous effort in reimagining certain

00:24:21,800 --> 00:24:26,000
aspects of computing that we simply just

00:24:24,110 --> 00:24:28,400
never question and take it as a given

00:24:26,000 --> 00:24:30,950
that the proposal initially presented by

00:24:28,400 --> 00:24:34,120
Mozilla but there's no word on in in its

00:24:30,950 --> 00:24:37,070
own subgroup of the web assembly

00:24:34,120 --> 00:24:38,810
community group and has a potential to

00:24:37,070 --> 00:24:41,450
XM rebus and his usefulness in a

00:24:38,810 --> 00:24:43,880
standardized way across a variety of no

00:24:41,450 --> 00:24:46,730
map use cases and you know if you squint

00:24:43,880 --> 00:24:48,920
at it the web embedded cloud at the end

00:24:46,730 --> 00:24:50,840
of the day you might realize that what

00:24:48,920 --> 00:24:53,240
seem based vastly different are actually

00:24:50,840 --> 00:24:54,860
closer to each other than if Fang code

00:24:53,240 --> 00:24:56,600
size constraints on a web app you know

00:24:54,860 --> 00:24:58,100
reducing bytes and food while your may

00:24:56,600 --> 00:25:00,650
correspond to requirements on edge

00:24:58,100 --> 00:25:02,870
computing servers storage limitations or

00:25:00,650 --> 00:25:05,120
sync time as well as microcontrollers

00:25:02,870 --> 00:25:06,830
which has very limited memory we can

00:25:05,120 --> 00:25:08,900
already see that it's not only that

00:25:06,830 --> 00:25:10,730
webassembly is making its way to all of

00:25:08,900 --> 00:25:12,620
these other platforms but it motivates

00:25:10,730 --> 00:25:15,530
the creation of small self-contained

00:25:12,620 --> 00:25:17,630
libraries that is feedback to a

00:25:15,530 --> 00:25:21,710
transitive effect into the web ecosystem

00:25:17,630 --> 00:25:25,460
and when we have all done done all that

00:25:21,710 --> 00:25:28,310
why stop there what if anyone could use

00:25:25,460 --> 00:25:30,320
the language of your choice program but

00:25:28,310 --> 00:25:32,450
we didn't stop at programming languages

00:25:30,320 --> 00:25:34,760
or different paradigms but we went all

00:25:32,450 --> 00:25:38,270
the way to liberating programming of the

00:25:34,760 --> 00:25:40,400
anglocentric human language what if

00:25:38,270 --> 00:25:42,350
learning programming didn't have to

00:25:40,400 --> 00:25:42,920
start with learning English or the Latin

00:25:42,350 --> 00:25:44,960
alphabet

00:25:42,920 --> 00:25:46,850
what if you weren't hindered by knowing

00:25:44,960 --> 00:25:49,940
the difference between what and if is or

00:25:46,850 --> 00:25:52,780
what a4 is what if you could write the

00:25:49,940 --> 00:25:56,240
code entirely in Korean for example

00:25:52,780 --> 00:25:58,340
Ramsay Nasir is the rather well-known

00:25:56,240 --> 00:26:00,020
creator the first Arabic programming

00:25:58,340 --> 00:26:02,510
language it's called Gelb

00:26:00,020 --> 00:26:05,780
the phone doesn't support so you will

00:26:02,510 --> 00:26:09,020
see the expanded URL on the on the

00:26:05,780 --> 00:26:11,540
bottom of the slides he has an

00:26:09,020 --> 00:26:16,280
astounding and far provoking talk from

00:26:11,540 --> 00:26:19,450
the construct conference earlier that

00:26:16,280 --> 00:26:19,450
explored ooh

00:26:20,100 --> 00:26:25,000
almost there

00:26:22,690 --> 00:26:26,260
a topic in our talk from deconstruct

00:26:25,000 --> 00:26:29,110
conference earlier this year they're a

00:26:26,260 --> 00:26:31,450
sport how a purely language agnostic

00:26:29,110 --> 00:26:33,700
programming language where paradigm

00:26:31,450 --> 00:26:35,860
could look like his design prototype

00:26:33,700 --> 00:26:37,840
actually builds on web assembly as the

00:26:35,860 --> 00:26:39,640
underlying machinery berroco storage

00:26:37,840 --> 00:26:41,560
with code fragments living in the

00:26:39,640 --> 00:26:43,870
distributed web accessible for anyone

00:26:41,560 --> 00:26:46,990
with language specific metadata layered

00:26:43,870 --> 00:26:48,850
above to give everyone a chance to write

00:26:46,990 --> 00:26:53,260
and reuse code in their own native

00:26:48,850 --> 00:26:55,300
tongue I don't have unfortunately any

00:26:53,260 --> 00:26:56,830
links for this but as soon as the talks

00:26:55,300 --> 00:26:58,900
recording welcome and I will put them

00:26:56,830 --> 00:27:00,580
into the slides so it said web

00:26:58,900 --> 00:27:03,130
assemblies potentials is seemingly

00:27:00,580 --> 00:27:05,620
limitless in this case its properties

00:27:03,130 --> 00:27:07,690
are low-level binary format and platform

00:27:05,620 --> 00:27:09,760
agnostic disposition made it an ideal

00:27:07,690 --> 00:27:13,600
choice for something truly fresh and

00:27:09,760 --> 00:27:15,880
unique the only question is what the

00:27:13,600 --> 00:27:22,720
only question that remains is what will

00:27:15,880 --> 00:27:24,910
you do with that Asami yep thank you

00:27:22,720 --> 00:27:26,440
very much I would like to find the

00:27:24,910 --> 00:27:28,150
Missoula web assembly team for their

00:27:26,440 --> 00:27:30,280
amazing work on the home base and in

00:27:28,150 --> 00:27:32,320
general have you Hoffman P Lihue dobro

00:27:30,280 --> 00:27:34,210
and gestures for had their help and

00:27:32,320 --> 00:27:37,870
support and reviewing their stock Ling

00:27:34,210 --> 00:27:39,310
Clark for the amazingly detailed cartoon

00:27:37,870 --> 00:27:41,370
deep ties which are laying later on the

00:27:39,310 --> 00:27:43,780
inner resources section

00:27:41,370 --> 00:27:46,570
Jeff Womack Alexandra Pope and Ling

00:27:43,780 --> 00:27:48,580
Clark who influenced in big ways just

00:27:46,570 --> 00:27:50,680
the format of this talk and the

00:27:48,580 --> 00:27:54,010
organizers and especially Susan for

00:27:50,680 --> 00:27:55,830
putting up in me and figma who for their

00:27:54,010 --> 00:27:58,240
incredible in browser director editor

00:27:55,830 --> 00:28:00,490
built bit was him that uses

00:27:58,240 --> 00:28:02,290
actually many of the graphics for their

00:28:00,490 --> 00:28:03,850
stock was actually created almost all

00:28:02,290 --> 00:28:08,890
graphics on further stock was created

00:28:03,850 --> 00:28:14,200
but figma and but that I think I have

00:28:08,890 --> 00:28:16,330
one more thing as you as I can see him

00:28:14,200 --> 00:28:18,070
they're big zeros on there I wasn't I'm

00:28:16,330 --> 00:28:20,350
bored I was running hurry blow out of

00:28:18,070 --> 00:28:23,560
time so I couldn't fit a demo in there

00:28:20,350 --> 00:28:25,360
anywhere and I was like but the walkie

00:28:23,560 --> 00:28:28,360
you should have fitted demo in there so

00:28:25,360 --> 00:28:32,290
I when I decided you is to you know make

00:28:28,360 --> 00:28:33,220
the slice the demo itself so if all goes

00:28:32,290 --> 00:28:36,170
well

00:28:33,220 --> 00:28:38,420
you can see the slides link on the below

00:28:36,170 --> 00:28:42,470
talked out flock dot is slash wasn't

00:28:38,420 --> 00:28:46,790
such as golf Korea if I exit here you're

00:28:42,470 --> 00:28:49,760
gonna see the slide talk it's just a

00:28:46,790 --> 00:28:52,430
regular web page the regular web page

00:28:49,760 --> 00:28:55,190
with regular images that has regular alt

00:28:52,430 --> 00:28:56,960
tags on them so everybody can access it

00:28:55,190 --> 00:28:59,390
with a screen reader you can see the

00:28:56,960 --> 00:29:02,660
talk you can see all the notes when I

00:28:59,390 --> 00:29:04,910
enter presentation mode javascript

00:29:02,660 --> 00:29:06,500
imbibe assembly kicks in the online

00:29:04,910 --> 00:29:08,360
version doesn't have the experimental

00:29:06,500 --> 00:29:12,020
web assembly it has the experiment or

00:29:08,360 --> 00:29:16,370
Java Script kit what happens here this

00:29:12,020 --> 00:29:18,560
nope this effect that you see on the

00:29:16,370 --> 00:29:21,740
stage is generated by webassembly

00:29:18,560 --> 00:29:23,630
reinterpreting the webpage which means

00:29:21,740 --> 00:29:26,000
you can use the web as you could use to

00:29:23,630 --> 00:29:28,360
before and he can use the web assembly

00:29:26,000 --> 00:29:32,140
to augment the currently existing

00:29:28,360 --> 00:29:33,890
possibilities on the web so with that

00:29:32,140 --> 00:29:37,450
thank you very much

00:29:33,890 --> 00:29:37,450
and thank you again

00:29:38,110 --> 00:29:41,330

YouTube URL: https://www.youtube.com/watch?v=pDUhX4iY4aY


