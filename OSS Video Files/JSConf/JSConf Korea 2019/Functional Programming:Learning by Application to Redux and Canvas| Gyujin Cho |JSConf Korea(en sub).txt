Title: Functional Programming:Learning by Application to Redux and Canvas| Gyujin Cho |JSConf Korea(en sub)
Publication date: 2019-10-10
Playlist: JSConf Korea 2019
Description: 
	What's so great about functional programming? Textbooks tell you it's "declarative, reusable, and without side effects," but don't explain how or when to use it.

In this talk, I will go step-by-step through the "how and when" of functional programming as applied to Redux and Canvas. You'll also learn about my own experiences with FP, why Ramda.js works better than lodash.js in this context, and the ups and downs of app development in FP.
Captions: 
	00:00:03,794 --> 00:00:05,475
Hello.

00:00:06,072 --> 00:00:10,499
This is my first time doing a full-scale presentation so I'm really nervous.

00:00:11,783 --> 00:00:15,118
As you can see, in this session,

00:00:15,440 --> 00:00:19,147
I'm going to make a presentation about functional JavaScript.

00:00:19,198 --> 00:00:22,300
It's not that I know functional Javascript that well

00:00:22,301 --> 00:00:25,348
that I'm making a presentation.

00:00:25,871 --> 00:00:28,939
Some of the traits of functional programming

00:00:28,940 --> 00:00:31,749
that I've applied on real projects

00:00:31,822 --> 00:00:35,073
and my experience of grasping it little by little, is what I want to share.

00:00:35,074 --> 00:00:36,674
And that's why I'm here.

00:00:39,873 --> 00:00:43,001
I'm a developer in a company called Lunit

00:00:43,002 --> 00:00:46,247
that analyses medical images.

00:00:47,113 --> 00:00:49,922
It's been 3 years since I started being a developer.

00:00:50,195 --> 00:00:52,569
Before this, I worked in design.

00:00:54,287 --> 00:00:59,099
It was 2016 when I just started learning how to program, three years ago.

00:00:59,100 --> 00:01:02,719
There was a keyword that was very popular at the time.

00:01:04,325 --> 00:01:06,200
That is 'React'.

00:01:07,560 --> 00:01:11,583
React is a library that helps to make interfaces.

00:01:11,879 --> 00:01:15,799
There would be some of you who haven't used it

00:01:15,800 --> 00:01:18,500
but I'm sure everyone has heard of it before.

00:01:18,995 --> 00:01:21,895
It's a library that people have been constantly giving love to.

00:01:22,118 --> 00:01:23,266
And three years ago,

00:01:23,267 --> 00:01:26,822
along with 'React', there was another keyword that arose.

00:01:27,762 --> 00:01:29,000
That is 'Redux'

00:01:29,323 --> 00:01:32,570
MobX is used a lot recently too,

00:01:32,991 --> 00:01:35,868
and it's compared with React Hooks a lot too.

00:01:35,869 --> 00:01:38,722
At the time Redux was thought to be very innovative.

00:01:38,723 --> 00:01:43,323
So it was in the center of the stage.

00:01:45,234 --> 00:01:49,100
Redux is used with the library that makes UI

00:01:49,200 --> 00:01:53,599
and it's a tool that maintains state in Javascript.

00:01:56,170 --> 00:01:58,119
As you can see on the right,

00:01:58,222 --> 00:02:02,046
it separates the state and the UI interface on the bottom

00:02:02,100 --> 00:02:06,200
and makes the state into action. That is the basic structure of Redux.

00:02:07,387 --> 00:02:10,368
With Redux,

00:02:11,506 --> 00:02:13,199
it is not as fast but

00:02:13,200 --> 00:02:17,000
there's a keyword that slowly appeared.

00:02:18,385 --> 00:02:20,724
That is 'functional programming'.

00:02:22,034 --> 00:02:25,219
Dan Abramov, who made Redux,

00:02:25,273 --> 00:02:28,100
got the idea from Elm, a functional language,

00:02:28,101 --> 00:02:31,571
and made it. So with Redux,

00:02:31,597 --> 00:02:33,600
the keyword 'functional' was gradually mentioned.

00:02:35,299 --> 00:02:38,022
At the time, I was a beginner in development.

00:02:38,023 --> 00:02:42,418
So it was too hard for me to get the grasp of what it meant.

00:02:45,238 --> 00:02:48,111
Although I didn't understand all the basic concepts of Redux,

00:02:48,112 --> 00:02:51,047
using Redux by itself

00:02:51,145 --> 00:02:53,932
was very interesting and fun.

00:02:55,152 --> 00:02:58,400
When you make apps following the structure of Redux,

00:02:58,500 --> 00:03:01,000
eventually, the interests were all separated

00:03:01,100 --> 00:03:05,368
and the codes, including the components, became very neat.

00:03:05,369 --> 00:03:07,400
That's why I liked Redux very much.

00:03:08,809 --> 00:03:11,300
Because of my interest for Redux,

00:03:11,400 --> 00:03:13,700
in the case of functional programming,

00:03:13,997 --> 00:03:19,100
I looked at it with vague curiosity and admiration.

00:03:21,206 --> 00:03:26,231
As time passed and I got used to the job,

00:03:26,232 --> 00:03:30,600
my curiosity for functional programming was revived

00:03:30,700 --> 00:03:32,966
and I started to study with my co-workers.

00:03:34,304 --> 00:03:36,595
In this study,

00:03:36,758 --> 00:03:42,643
the basic concepts of functions, to use a pure function,

00:03:42,644 --> 00:03:44,700
to prevent additional effects,

00:03:45,020 --> 00:03:48,020
to use preface grammars,

00:03:48,020 --> 00:03:50,480
I was able to understand these basic concepts.

00:03:51,660 --> 00:03:56,200
I also got to know about Monad and Reactive Programming.

00:03:58,086 --> 00:04:00,600
The most memorable thing that I remember from this study

00:04:00,700 --> 00:04:02,800
was actually the advantages of using functional programming.

00:04:04,086 --> 00:04:07,268
Since it connects simple pure functions,

00:04:07,469 --> 00:04:11,253
it's less likely to have errors in a function, so it's more stable.

00:04:11,328 --> 00:04:15,799
And it's more likely to be reused since it connects small functions.

00:04:15,800 --> 00:04:21,399
And it's easy to understand higher logic. These three were the advantages.

00:04:22,243 --> 00:04:24,671
It was very appealing at the time

00:04:24,968 --> 00:04:26,884
but after studying,

00:04:27,060 --> 00:04:29,696
other co-workers and I

00:04:29,945 --> 00:04:32,715
still didn't catch the grasp on

00:04:34,353 --> 00:04:36,320
what exactly the functionals were.

00:04:36,722 --> 00:04:42,081
I think this was because when we wrote for a real project,

00:04:42,181 --> 00:04:46,718
this was the limitation of what we could apply

00:04:47,080 --> 00:04:48,376
from what we've learned while studying.

00:04:48,401 --> 00:04:54,054
Well, we could do more

00:04:54,129 --> 00:04:57,269
but when we copied,

00:04:57,344 --> 00:05:00,000
there was feedback that it didn't seem like functional programming.

00:05:00,100 --> 00:05:02,400
So this was mostly what we wrote.

00:05:04,553 --> 00:05:10,843
So we... studied functional programming but it was still vague.

00:05:10,844 --> 00:05:14,200
Just understanding the concepts, a year passed.

00:05:15,438 --> 00:05:17,309
I went to a new company

00:05:17,310 --> 00:05:19,700
and started a new project.

00:05:23,408 --> 00:05:28,324
To show you simply, this is the app.

00:05:29,419 --> 00:05:30,503
One moment.

00:05:32,575 --> 00:05:34,516
Add a grid like this,

00:05:35,135 --> 00:05:36,982
and from that cell slide,

00:05:37,683 --> 00:05:39,783
which is the cancer cell

00:05:40,500 --> 00:05:45,500
or the fat cell, is all marked.

00:05:45,600 --> 00:05:49,542
It's the tool that helps process data.

00:05:57,697 --> 00:05:59,292
Refactoring

00:06:00,455 --> 00:06:02,699
this tool was the task given to me.

00:06:02,700 --> 00:06:05,900
Because, before, only React and Canvas were applied

00:06:06,494 --> 00:06:10,462
and it wasn't organized.

00:06:10,463 --> 00:06:11,300
Using Redux,

00:06:11,400 --> 00:06:13,100
I was given the task to refactor it.

00:06:13,496 --> 00:06:17,445
Like I wrote originally,

00:06:17,446 --> 00:06:19,800
I naturally used combineReducers

00:06:20,013 --> 00:06:21,556
and wrote the code.

00:06:22,933 --> 00:06:25,034
When using the combine reducer,

00:06:25,113 --> 00:06:30,231
it takes the state of the reducer

00:06:30,784 --> 00:06:35,989
and see it as each domain like DB

00:06:36,558 --> 00:06:39,212
and it separates the reducer completely.

00:06:39,313 --> 00:06:43,613
The connection between reducers can be made actions.

00:06:47,919 --> 00:06:54,113
So let's say we are adding

00:06:54,212 --> 00:06:57,527
a label to a display like this

00:06:57,777 --> 00:07:02,832
I put together the key points here.

00:07:02,981 --> 00:07:10,212
When you write a reducer to add a label like that

00:07:10,313 --> 00:07:11,726
you need to use label type

00:07:11,727 --> 00:07:14,613
and other information from grid reducer.

00:07:14,712 --> 00:07:17,513
As the app gets more complex,

00:07:17,613 --> 00:07:19,736
more information is going to be added.

00:07:21,096 --> 00:07:23,780
When using combine reducer like this

00:07:23,854 --> 00:07:25,399
in order to process this

00:07:25,400 --> 00:07:28,681
you need to take information in the other reducer

00:07:28,712 --> 00:07:31,433
and pass it onto the factors and parameters.

00:07:32,371 --> 00:07:34,913
With more actions like these,

00:07:35,013 --> 00:07:38,413
there is going to be more cases of having to pass onto the parameters.

00:07:41,587 --> 00:07:46,025
Also, there was one other thing I was not happy with.

00:07:49,313 --> 00:07:53,212
You can use a middleware when using redux,

00:07:53,313 --> 00:07:58,245
and this middleware, takes care of ajax

00:07:58,246 --> 00:08:05,212
or processes events that cause additional effects,

00:08:05,212 --> 00:08:06,813
and loads other action

00:08:06,913 --> 00:08:10,212
or processes loading other actions right away.

00:08:11,679 --> 00:08:17,726
Let's say we are writing reducer that exits

00:08:18,713 --> 00:08:22,902
the selected grid here,

00:08:24,287 --> 00:08:27,635
after writing the reducer exiting the grid

00:08:27,806 --> 00:08:32,251
it needs to be processed along with the other reducer

00:08:33,091 --> 00:08:37,357
although there is no api call

00:08:37,357 --> 00:08:39,712
in order to simply load other action

00:08:39,813 --> 00:08:45,512
the code for middleware must be written.

00:08:47,122 --> 00:08:50,432
And of course with more processes like these

00:08:50,433 --> 00:08:54,486
unnecessary middleware code is going to increase.

00:08:55,081 --> 00:08:57,213
So it's going to look like this.

00:09:00,507 --> 00:09:03,512
So then we wondered

00:09:03,612 --> 00:09:09,313
if there is another way to write it.

00:09:09,413 --> 00:09:11,453
So we looked into redux documents

00:09:11,454 --> 00:09:15,989
and there was a post called Beyond combineReducers.

00:09:15,990 --> 00:09:18,896
It has been updated so it looks different from when I first saw it

00:09:18,896 --> 00:09:20,712
but the basic information is the same.

00:09:20,837 --> 00:09:24,135
Here, it talks about combine reducers, that

00:09:24,285 --> 00:09:32,313
it can only cover simple cases.

00:09:33,807 --> 00:09:35,250
And that there needs to be some kind of a customization?

00:09:35,324 --> 00:09:38,858
or reducer logic is needed.

00:09:42,049 --> 00:09:45,512
So I wanted to minimize having to pass factors into function

00:09:45,512 --> 00:09:47,713
and write each reducer code separately

00:09:47,813 --> 00:09:49,413
then in the redux middleware,

00:09:49,512 --> 00:09:51,560
I wanted to write the reducer and customize it

00:09:51,957 --> 00:09:56,112
so that it will only deal with additional effects.

00:09:56,114 --> 00:09:59,334
These are the purposes I started the works with.

00:10:02,653 --> 00:10:06,313
There was something else that helped with that

00:10:06,413 --> 00:10:08,713
If you scroll down to the previous document

00:10:08,813 --> 00:10:11,913
it introduces a library called reduce-reducers

00:10:12,012 --> 00:10:14,881
as another method.

00:10:16,110 --> 00:10:17,435
As you can see in the code here

00:10:18,402 --> 00:10:22,612
it is a reducer function composition library

00:10:22,713 --> 00:10:25,529
where you can execute different reducers

00:10:25,654 --> 00:10:29,512
in order and finally make it into

00:10:29,612 --> 00:10:30,813
one type of state.

00:10:31,778 --> 00:10:35,112
This is the official document on reduce-reducers

00:10:35,213 --> 00:10:42,603
I saw this format, and if I were to follow it exactly I would need to add a state

00:10:42,604 --> 00:10:44,737
so I wanted to make it into a format I liked

00:10:45,257 --> 00:10:47,913
by composing reducer like this

00:10:48,012 --> 00:10:50,958
and tried writing it.

00:10:53,213 --> 00:10:57,913
Actually I did not look into libraries composing reducers

00:10:58,556 --> 00:11:01,512
closely at the time.

00:11:01,613 --> 00:11:05,913
When you go through the documents in redux

00:11:06,012 --> 00:11:08,113
there are so many libraries.

00:11:08,213 --> 00:11:10,299
This is only part of the page

00:11:10,624 --> 00:11:15,194
and there is a library called reducer ramda.

00:11:15,195 --> 00:11:19,447
There are so many reducer composing libraries

00:11:19,448 --> 00:11:26,613
and I wanted to just simply start with something I knew about so I chose ramda.

00:11:27,999 --> 00:11:33,713
Ramda.js focuses on currying and composition and it is a functional library

00:11:33,813 --> 00:11:39,947
as I remembered from studying before,

00:11:39,948 --> 00:11:42,713
so I wanted to give it a try.

00:11:43,830 --> 00:11:50,713
Also, among these I used pipe which composes each function in order

00:11:53,804 --> 00:11:56,413
as the main method.

00:11:57,750 --> 00:12:02,913
Composing the functions is the main work but

00:12:03,012 --> 00:12:05,087
I didn't use compose because

00:12:05,449 --> 00:12:07,353
compose basically does its work

00:12:07,807 --> 00:12:10,601
backwards,

00:12:10,948 --> 00:12:13,730
so I did not think it would be natural to read them.

00:12:13,756 --> 00:12:15,117
So I used pipe instead

00:12:19,541 --> 00:12:22,612
so using this composition

00:12:22,983 --> 00:12:26,913
I wrote the reducer exiting the grid earlier

00:12:28,770 --> 00:12:35,482
Here, select label and select type

00:12:35,483 --> 00:12:39,313
and select grid are separated like this. And there is reducer for each as well.

00:12:39,486 --> 00:12:39,986
This reducer

00:12:40,108 --> 00:12:43,936
combining and finally made a reducer called

00:12:44,305 --> 00:12:48,507
exitGrid. And each of the reducers

00:12:50,759 --> 00:12:54,273
could be mapped in the action.

00:12:54,917 --> 00:12:59,415
Seeing each reducer like this individually

00:13:00,720 --> 00:13:03,473
as a separate function and writing them like this.

00:13:03,473 --> 00:13:05,687
eventually rather than a switch

00:13:05,689 --> 00:13:07,008
a reducer used to map formation

00:13:07,009 --> 00:13:11,709
seemed to be better for writing. So that's why I wrote it like this.

00:13:13,119 --> 00:13:15,565
The mapping formation actually

00:13:15,566 --> 00:13:18,930
is used more often these days.

00:13:19,547 --> 00:13:22,809
To show you more of

00:13:22,908 --> 00:13:23,408
how it's processed in the store

00:13:25,600 --> 00:13:29,800
the reducer map called switch reducer

00:13:29,820 --> 00:13:32,500
makes a function that selects

00:13:33,380 --> 00:13:36,500
a reducer map for the action type. By using that, we

00:13:36,608 --> 00:13:39,443
finally make a root reducer.

00:13:39,542 --> 00:13:41,578
The code was simply written in that formation.

00:13:43,724 --> 00:13:45,610
However, when you look here,

00:13:47,214 --> 00:13:51,949
it's going the same from root reducer to state action.

00:13:52,049 --> 00:13:53,508
According to the action type,

00:13:53,608 --> 00:13:57,575
the selected reducer does not need the action type's information.

00:13:57,801 --> 00:14:02,633
So we additionally made a change to pass the payload.

00:14:05,156 --> 00:14:07,108
So according to this here,

00:14:07,209 --> 00:14:10,180
by not receiving the action but receiving the payload only,

00:14:10,451 --> 00:14:12,508
the code became more simple.

00:14:13,895 --> 00:14:20,508
The method I used in this process

00:14:20,608 --> 00:14:23,008
is to combine all the states in one

00:14:23,108 --> 00:14:25,908
and writing each of the many reducers.

00:14:26,502 --> 00:14:31,357
Then I thought of a chapter I saw while studying

00:14:31,973 --> 00:14:38,508
That is, 'Few data structures, many operations'.

00:14:38,608 --> 00:14:41,008
That's how it was translated in Korean.

00:14:41,108 --> 00:14:42,357
It was that quote.

00:14:42,556 --> 00:14:47,008
Thinking, 'Would this be what that means?',

00:14:47,108 --> 00:14:51,908
I got the grasp of it as I wrote the code.

00:14:53,492 --> 00:15:00,508
When you see the writing of the reducer exiting this grid,

00:15:01,920 --> 00:15:04,675
The exitGrid on the very bottom,

00:15:04,676 --> 00:15:09,408
you have to use it by putting only one factor of each function,

00:15:09,508 --> 00:15:11,203
so the select label

00:15:11,566 --> 00:15:13,064
the select labels or

00:15:13,108 --> 00:15:18,128
select label type, select grid, each reducer is all curried.

00:15:19,412 --> 00:15:23,851
Curry, as you see in the example code,

00:15:24,297 --> 00:15:27,581
if you surround a function with a curry,

00:15:27,930 --> 00:15:31,209
you can practice the factor to the function in order

00:15:31,309 --> 00:15:34,049
and you can apply it all at once.

00:15:34,247 --> 00:15:37,045
As you see here,

00:15:39,145 --> 00:15:42,175
As you see here,

00:15:42,176 --> 00:15:48,570
in the first item, the count and the list are in order.

00:15:48,876 --> 00:15:51,353
If you change that,

00:15:51,600 --> 00:15:53,776
the same code

00:15:54,428 --> 00:15:57,238
as you can see on the bottom,

00:15:57,239 --> 00:15:59,190
now needs a placeholder.

00:16:02,292 --> 00:16:04,459
When you use a function called curry,

00:16:05,466 --> 00:16:07,157
the first 10

00:16:08,001 --> 00:16:11,646
when you select the first 10 items,

00:16:14,369 --> 00:16:18,203
if you receive the count first and get the list later,

00:16:19,784 --> 00:16:23,407
it's natural to add in the factor 10 first.

00:16:24,422 --> 00:16:26,992
However, when the order is reversed,

00:16:27,908 --> 00:16:30,508
as to set it up first,

00:16:30,608 --> 00:16:32,209
you add in the placeholder.

00:16:34,237 --> 00:16:41,008
From this function composition

00:16:41,108 --> 00:16:44,408
I found out that the order of the factors matter.

00:16:45,396 --> 00:16:48,291
So here, functional programming

00:16:48,292 --> 00:16:50,570
connects the various functions

00:16:50,571 --> 00:16:54,483
and it's written to pass down the data there.

00:16:55,950 --> 00:16:59,209
When you see the one I wrote, I made the state as one

00:16:59,309 --> 00:17:01,008
and by chaining the various reducers,

00:17:01,108 --> 00:17:04,714
I made it pass down like that.

00:17:06,050 --> 00:17:07,654
But,

00:17:08,714 --> 00:17:12,263
when you make this, the root reducer,

00:17:12,265 --> 00:17:17,900
since the original order of passed state and payload,

00:17:25,013 --> 00:17:28,509
That is why this code came out.

00:17:28,609 --> 00:17:31,609
In the exit grid on the bottom

00:17:31,708 --> 00:17:32,908
as I showed you earlier,

00:17:33,009 --> 00:17:35,978
you have to use the placeholder.

00:17:38,375 --> 00:17:43,109
So you reverse the places of state and payload like this

00:17:43,728 --> 00:17:46,367
and rewrite the reducer.

00:17:46,567 --> 00:17:51,908
And you can get a function with no placeholder.

00:17:51,908 --> 00:17:53,009
It's more neat.

00:17:54,222 --> 00:17:56,652
By writing the code,

00:17:58,011 --> 00:18:03,502
I knew the reason that Ramda.js's skills are currying and composing

00:18:03,503 --> 00:18:05,257
in detail.

00:18:05,777 --> 00:18:11,309
When you see the code I showed you earlier through explaining Ramda's pipe,

00:18:12,841 --> 00:18:20,109
it filters the wrong factors,

00:18:20,531 --> 00:18:23,954
organizes it in order,

00:18:23,955 --> 00:18:25,687
cuts the first 10,

00:18:25,783 --> 00:18:28,599
adds each of them and divide it by 10 again.

00:18:28,674 --> 00:18:32,603
It connects all these functions

00:18:33,132 --> 00:18:35,293
and passes on the list.

00:18:35,294 --> 00:18:40,781
When we write the same one with the most famous library, lodash,

00:18:40,809 --> 00:18:44,509
When wrote with basic lodash, it becomes like this.

00:18:44,609 --> 00:18:48,309
You have to curry each of the functions individually.

00:18:49,398 --> 00:18:51,764
And the order is all different

00:18:51,764 --> 00:18:55,007
so you have to put in the placeholders in all of them.

00:18:55,009 --> 00:18:59,809
In lodash, the basic lists or

00:19:00,089 --> 00:19:04,357
or the main data is on the front.

00:19:10,629 --> 00:19:12,583
About this,

00:19:15,389 --> 00:19:18,656
the reason Ramda appears so clean is because

00:19:18,855 --> 00:19:21,408
the utils in Ramda are

00:19:21,409 --> 00:19:23,338
all automatically curried.

00:19:23,734 --> 00:19:25,289
And as I showed you earlier,

00:19:25,389 --> 00:19:30,812
The parameter's order is best set to currying and composing.

00:19:31,381 --> 00:19:33,379
lodash too, considers this need

00:19:33,379 --> 00:19:37,161
considers this need and

00:19:37,162 --> 00:19:40,389
exclusively provides a library called lodash/fp. There,

00:19:40,489 --> 00:19:47,489
it passes the other factor first, almost like Ramda

00:19:47,589 --> 00:19:50,889
and passes the data later at the end.

00:19:53,678 --> 00:20:00,188
So if you look at the rewritten code that exits the grid,

00:20:00,289 --> 00:20:01,688
this is the original code

00:20:02,161 --> 00:20:06,089
and this is the rewritten code that we made using composition.

00:20:06,658 --> 00:20:10,489
If you look at it, the code is reduced by 3/4.

00:20:10,909 --> 00:20:13,052
And it works to fulfill one purpose.

00:20:13,918 --> 00:20:17,789
And the simple functions needed for exitGrid are

00:20:17,889 --> 00:20:25,089
separated into middleware and reducer

00:20:25,090 --> 00:20:29,589
and it is written so it comprehends the logic right away, without being stored.

00:20:30,009 --> 00:20:33,889
When you write a lot of code reducers like this,

00:20:33,989 --> 00:20:38,789
the code shrinks and I think it look more organized.

00:20:40,298 --> 00:20:45,952
So, after writing all the Redux parts,

00:20:46,350 --> 00:20:54,202
I am reminded of the quote, 'Few data structures, many operations.'

00:20:54,203 --> 00:20:57,610
These functions seem to carry that meaning

00:20:57,610 --> 00:21:00,789
and I started to like currying and composition

00:21:00,889 --> 00:21:03,688
to the point I adore them.

00:21:03,789 --> 00:21:04,924
I am very satisfied with their results

00:21:05,076 --> 00:21:08,788
So at the time, I had a part to refactor

00:21:08,887 --> 00:21:14,134
in the unorganized canvas, on the app I showed you earlier. It was an app

00:21:15,449 --> 00:21:17,036
that draws records.

00:21:17,932 --> 00:21:23,433
With this, thought(?),

00:21:24,013 --> 00:21:26,010
with this attitude, I kept

00:21:26,454 --> 00:21:27,889
on writing.

00:21:29,050 --> 00:21:32,286
And as a result,

00:21:32,287 --> 00:21:36,188
this ended up being the most exported upper function.

00:21:36,289 --> 00:21:37,789
It was written like this.

00:21:37,790 --> 00:21:41,889
As you can see, I got the Canvas context

00:21:47,033 --> 00:21:49,259
and passed it down like this.

00:21:49,281 --> 00:21:51,228
I wasn't really satisfied with it.

00:21:51,947 --> 00:21:58,662
Because I had to bind the contexts by currying.

00:22:02,889 --> 00:22:08,185
If we look at another minor part here,

00:22:09,520 --> 00:22:13,810
when we see the part of adding new guides to the grid,

00:22:14,281 --> 00:22:16,020
we can see how it was written.

00:22:16,022 --> 00:22:19,889
Like I did previously, I did binding to the context.

00:22:21,447 --> 00:22:26,688
Then I took it to a lower level and

00:22:26,789 --> 00:22:29,482
in a more basic context,

00:22:29,483 --> 00:22:32,444
when you see the functions doing its job,

00:22:32,445 --> 00:22:35,716
I've bounded all the contexts here too.

00:22:37,027 --> 00:22:45,437
And to write a higher order function into a pipe.

00:22:46,108 --> 00:22:49,389
I got obsessed with it

00:22:49,884 --> 00:22:55,186
The information passed on to context

00:22:55,460 --> 00:22:58,788
got all mixed up and became a giant lump.

00:22:58,789 --> 00:23:00,538
It was okay when it was a state.

00:23:01,057 --> 00:23:04,389
All the irrelevant context process functions

00:23:04,489 --> 00:23:07,489
were using the same data, so

00:23:07,589 --> 00:23:09,789
it became a ridiculous data structure.

00:23:10,110 --> 00:23:15,433
So when I looked at the codes in detail,

00:23:15,632 --> 00:23:20,461
It was hard to figure out the logic, compared to other upper functions.

00:23:20,732 --> 00:23:25,382
At this time, someone who told me a lot of things about functional programming,

00:23:25,524 --> 00:23:29,124
the leader of the company I worked in before,

00:23:29,339 --> 00:23:33,833
told me to research about polymorphism.

00:23:33,835 --> 00:23:38,744
He also told me to work on how to practice polymorphism in functional programming

00:23:39,262 --> 00:23:40,688
So I started researching.

00:23:40,963 --> 00:23:48,014
Polymorphism is an idea more familiar as a class or in OOP,

00:23:48,121 --> 00:23:51,583
When there's a class called drawing, the method

00:23:52,598 --> 00:23:55,188
is extended elsewhere

00:23:55,338 --> 00:24:01,557
and polymorphism is the ability to use the same method in a different use.

00:24:03,359 --> 00:24:08,489
I looked up how to practice this on functional programming

00:24:08,589 --> 00:24:10,864
and this idea came out.

00:24:11,333 --> 00:24:15,572
It's called. 'Discriminated Union'. I searched again and

00:24:16,387 --> 00:24:18,436
there was a typescript document.

00:24:18,810 --> 00:24:21,616
When you look at this typescript document,

00:24:21,617 --> 00:24:26,489
it separates the kinds and adds the res of the information needed.

00:24:27,355 --> 00:24:30,688
And when you scroll down, there's this code.

00:24:30,789 --> 00:24:34,889
Through a switch, according to the kind of the information,

00:24:34,989 --> 00:24:37,489
different functions are practiced.

00:24:37,589 --> 00:24:40,889
This is a code that would be familiar to you all.

00:24:42,356 --> 00:24:44,514
This is the action type and structure of reducer

00:24:44,516 --> 00:24:48,159
that is used in Redux.

00:24:48,358 --> 00:24:52,389
Through this research, in the process of learning,

00:24:52,489 --> 00:24:57,830
I previously thought that Redux's functional programming

00:24:57,831 --> 00:24:59,958
was constructed ambiguously.

00:24:59,960 --> 00:25:02,312
But I began to learn about how the ideas

00:25:02,312 --> 00:25:05,237
that it was borrowed from.

00:25:05,978 --> 00:25:09,289
I thought I should write the canvas this way

00:25:09,389 --> 00:25:11,188
And wrote it.

00:25:12,672 --> 00:25:16,889
But as I wrote it, I realised I made

00:25:16,989 --> 00:25:19,461
another misunderstanding.

00:25:20,598 --> 00:25:26,507
In this whole grid logic,

00:25:26,508 --> 00:25:31,502
If you look at the part where it draws only the new grid guide

00:25:33,620 --> 00:25:36,640
the function that makes the data

00:25:38,980 --> 00:25:44,400
and the function that operates the logic are stuck together.

00:25:44,401 --> 00:25:46,701
I saw this and thought it was strange.

00:25:46,802 --> 00:25:51,302
Because in functional programming, basically, data and

00:25:51,401 --> 00:25:56,671
functions are very loosely connected.

00:25:57,267 --> 00:26:00,601
As you can see, in object-oriented programming, Class firmly connects

00:26:00,701 --> 00:26:02,302
data and function.

00:26:02,401 --> 00:26:05,502
In functional programming, through chaining or pipe,

00:26:05,601 --> 00:26:10,273
the basic thought is that data and function are loosely connected.

00:26:12,745 --> 00:26:21,101
But for this upper logic, I saw something like this.

00:26:21,201 --> 00:26:25,901
When I first wrote it, it passed the drawing state data

00:26:26,002 --> 00:26:29,101
Then I thought of connecting the necessary

00:26:29,201 --> 00:26:32,919
canvas contexts to

00:26:32,920 --> 00:26:35,201
map out the actual operation

00:26:36,364 --> 00:26:41,502
But, looking at the detailed function and the lower function,

00:26:41,601 --> 00:26:44,490
the data and operation are stuck together. So,

00:26:44,591 --> 00:26:47,302
when I restructured it,

00:26:48,302 --> 00:26:51,140
it came out like this.

00:26:51,141 --> 00:26:54,639
I dropped the drawing state and the canvas context to the function.

00:26:54,701 --> 00:26:57,201
Here, to each sub function

00:26:57,302 --> 00:27:02,302
drawing state and canvas context, so the data and the method are stuck together

00:27:02,401 --> 00:27:07,223
and passed. That's the structure I constructed.

00:27:07,987 --> 00:27:14,401
As you can see, the state, data and the operation are together

00:27:14,502 --> 00:27:16,802
and are wandering.

00:27:18,413 --> 00:27:22,802
So I thought I should separate them.

00:27:22,901 --> 00:27:27,901
I realized that I was coding

00:27:28,002 --> 00:27:29,521
just by using pipe to fit to the class.

00:27:29,522 --> 00:27:31,681
That came to my mind.

00:27:31,980 --> 00:27:34,701
So now, I changed the structure like this.

00:27:36,058 --> 00:27:41,043
I exclusively modified the data

00:27:41,966 --> 00:27:45,901
and using that data, I made the effects that would be passed at the end.

00:27:46,002 --> 00:27:48,502
Then, all of them together are applied

00:27:48,601 --> 00:27:52,802
to canvas context, and changed the overall data flow.

00:27:52,901 --> 00:27:54,601
That is what I've been working on.

00:27:55,566 --> 00:27:58,475
When you see this, the data structure was like this,

00:27:58,637 --> 00:28:02,332
each was separated by canvas effects like this.

00:28:02,802 --> 00:28:05,201
It's almost like action, right? It's now separated.

00:28:07,058 --> 00:28:12,286
And the basic drawing functions with too much curry

00:28:12,287 --> 00:28:15,502
are now neatly organized.

00:28:16,023 --> 00:28:24,101
What's added is this effector map, which is added like a reducer map.

00:28:25,513 --> 00:28:30,201
Then, the grid guide

00:28:30,203 --> 00:28:35,602
on the drawing part, has a function that makes data.

00:28:35,802 --> 00:28:37,601
Then it receives the data that was made

00:28:37,701 --> 00:28:40,901
and the function that is practiced is typed.

00:28:41,002 --> 00:28:43,502
Here too, the function is changed into

00:28:43,601 --> 00:28:45,643
the function that processes the data first.

00:28:48,669 --> 00:28:54,670
The final function also has a bit of context bound.

00:28:55,562 --> 00:28:59,748
The context and the data weren't so far apart

00:28:59,997 --> 00:29:04,866
In the new function, I made a function that only handles the data

00:29:05,013 --> 00:29:08,725
and finally applies it to the text.

00:29:08,725 --> 00:29:10,652
And the code is changed like this.

00:29:11,119 --> 00:29:18,302
I lifted the Redux and the Canvas part and distributed them.

00:29:18,822 --> 00:29:21,101
Surprisingly, after distributing,

00:29:21,201 --> 00:29:25,002
there were a lot of corrections to be made.

00:29:25,101 --> 00:29:28,101
Excluding a few components, all of the codes were modified.

00:29:30,179 --> 00:29:35,700
There were only three minor issues that occurred for three months.

00:29:35,701 --> 00:29:41,174
One thing that we could observe here is that, when we first learned about functional programming,

00:29:45,872 --> 00:29:50,802
one of the advantages was the reliability.

00:29:51,370 --> 00:29:55,802
The stability was something that was experienced.

00:29:55,901 --> 00:30:00,196
And after writing each function,

00:30:00,197 --> 00:30:01,302
it was highly reused.

00:30:01,401 --> 00:30:05,002
And by turning Redux into one state,

00:30:05,101 --> 00:30:08,502
selectors could reuse them in Redux

00:30:08,601 --> 00:30:11,802
so a lot of codes could be reduced.

00:30:12,594 --> 00:30:18,302
There was an uncertainty about

00:30:18,401 --> 00:30:22,601
whether it was easy to notice the final logic.

00:30:22,701 --> 00:30:25,401
Because, as I mentioned earlier,

00:30:25,502 --> 00:30:31,502
in the written codes, there is a function called converge

00:30:31,899 --> 00:30:36,502
or juxt function which use codes that only involve methods

00:30:36,601 --> 00:30:39,547
found in functional programming.

00:30:39,822 --> 00:30:44,502
So, a lot of effort is needed for other people to understand more

00:30:44,601 --> 00:30:50,761
and maintain it.

00:30:50,762 --> 00:30:54,002
So in that aspect, I gave this a triangle rank.

00:30:54,770 --> 00:30:59,601
To sum up, I explained a few data structures and many operations.

00:30:59,701 --> 00:31:05,201
such as currying and composition, and discriminated union.

00:31:05,302 --> 00:31:09,302
As I was familiarizing with these concepts,

00:31:09,401 --> 00:31:14,639
I learned something more important that

00:31:14,937 --> 00:31:18,296
as you can see when I wrote the wrong flow,

00:31:18,397 --> 00:31:20,431
In my opinion,

00:31:20,707 --> 00:31:23,401
the data flow of the whole structure

00:31:23,502 --> 00:31:26,002
is essential in functional programming

00:31:27,737 --> 00:31:30,349
This is the end of my presentation.

00:31:30,350 --> 00:31:32,120

YouTube URL: https://www.youtube.com/watch?v=qMUoHuMWZls


