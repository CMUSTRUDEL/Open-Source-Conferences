Title: JURL: Network Protocols Aren't That Scary (Except They Are) - London Node User Group - May 2019
Publication date: 2019-06-04
Playlist: London Node User Group
Description: 
	Talk about implementation of the functionality of curl written done purely in node. You can do some basic curl stuff with it (e.g. make multipart form data posts to some url, pipe responses to files, handle http and https proxies (provided they support the connect header) to do requests over to http or https, recursively follow location headers, set headers, etc.).

Overall it's a pleasant way to learn some details of networking, starting to write an ssh client in particular requires manually writing the packets as per the ssh protocol which has been a reasonable education in how that sort of things works - Node really does seem to provide nice apis for everything you want.

About the speaker:

I'm a former mathematician who over the last 9 or so months has turned programmer, I currently work as a developer mostly working with JavaScript. I mostly like doing algorithms and stuff and have only recently begun to learn the broader aspects of programming. I really love doing things from 'scratch' (in the sense of just using the stuff provided by the language) as I find it quite insightful.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:05,490
hello everyone can hear me great so you

00:00:03,540 --> 00:00:08,639
can see already that they are they are

00:00:05,490 --> 00:00:10,980
scary there's some parentheses here so I

00:00:08,639 --> 00:00:12,840
guess I'll start by saying what Joe well

00:00:10,980 --> 00:00:15,839
Joe is just something fun I made it's a

00:00:12,840 --> 00:00:18,439
it's a no dependencies implementation of

00:00:15,839 --> 00:00:20,939
Co not not really all of Cal just some

00:00:18,439 --> 00:00:23,430
functionality of curl and also it has

00:00:20,939 --> 00:00:27,210
some some basic SSH functionality so it

00:00:23,430 --> 00:00:28,949
connects you some SSH really the the

00:00:27,210 --> 00:00:31,410
premise of the talk isn't so much about

00:00:28,949 --> 00:00:33,180
gel it's more that this was my first

00:00:31,410 --> 00:00:36,750
time really doing any network protocols

00:00:33,180 --> 00:00:38,489
and I found no to be super easy to learn

00:00:36,750 --> 00:00:41,280
how this stuff works and I'm kind of

00:00:38,489 --> 00:00:42,780
wanting to encourage you to to try it

00:00:41,280 --> 00:00:46,410
yourself in node and have a bit of fun

00:00:42,780 --> 00:00:47,879
so let's kick off with some motivations

00:00:46,410 --> 00:00:50,700
so people always ask me about this like

00:00:47,879 --> 00:00:52,379
why bother well the main reason is like

00:00:50,700 --> 00:00:54,600
I said I don't know I didn't know

00:00:52,379 --> 00:00:56,280
anything about networks for a bit

00:00:54,600 --> 00:00:57,719
background on me I've been programming

00:00:56,280 --> 00:01:00,059
about a year now used to be a

00:00:57,719 --> 00:01:02,969
mathematician you probably guessed that

00:01:00,059 --> 00:01:05,339
when you see the slides so at work we

00:01:02,969 --> 00:01:07,439
have this proxy squid proxy and it calls

00:01:05,339 --> 00:01:09,750
me like untold number of problems when I

00:01:07,439 --> 00:01:11,520
started so I went on holiday and I

00:01:09,750 --> 00:01:13,500
decided right in my spare time I'm going

00:01:11,520 --> 00:01:15,830
to learn a bit about networking and then

00:01:13,500 --> 00:01:18,780
I'll never have this problem again

00:01:15,830 --> 00:01:21,330
another reason well I use kernel are

00:01:18,780 --> 00:01:22,590
work it's very helpful what be more

00:01:21,330 --> 00:01:24,060
helpful is if it was written in

00:01:22,590 --> 00:01:26,009
JavaScript and then I could just play

00:01:24,060 --> 00:01:29,369
around with it however I liked and get

00:01:26,009 --> 00:01:31,470
any functionality out of it another

00:01:29,369 --> 00:01:33,869
reason well I call myself an OU

00:01:31,470 --> 00:01:35,250
developer at work but really I hadn't

00:01:33,869 --> 00:01:37,079
played too much around with the core

00:01:35,250 --> 00:01:38,880
node modules like maybe I'd used FS

00:01:37,079 --> 00:01:41,280
maybe I'd used and a few other things

00:01:38,880 --> 00:01:44,220
but I hadn't used really like net or TLS

00:01:41,280 --> 00:01:45,930
or really the really cool stuff and I

00:01:44,220 --> 00:01:47,970
guess the final reason is just to have

00:01:45,930 --> 00:01:50,390
something else to do on holiday with my

00:01:47,970 --> 00:01:51,659
dog that's me on holiday with my dog

00:01:50,390 --> 00:01:53,729
yeah

00:01:51,659 --> 00:01:55,770
okey doke so I had hair then you can see

00:01:53,729 --> 00:01:58,170
so let's see what we're going to discuss

00:01:55,770 --> 00:02:00,329
and so it's sort of your pretty

00:01:58,170 --> 00:02:02,969
functional what I'm aiming to do is sort

00:02:00,329 --> 00:02:04,979
of go through my journey I guess and say

00:02:02,969 --> 00:02:06,869
ok here's what I did here's how it looks

00:02:04,979 --> 00:02:09,179
a node notice how easy it is to do a

00:02:06,869 --> 00:02:11,550
node and then you go away and do it

00:02:09,179 --> 00:02:13,530
yourself so the first thing super simple

00:02:11,550 --> 00:02:15,180
is just implementing

00:02:13,530 --> 00:02:18,780
sending a file that's multi-part form

00:02:15,180 --> 00:02:19,980
data something equally simple is just

00:02:18,780 --> 00:02:22,080
making the nature of your request over

00:02:19,980 --> 00:02:24,060
actually proxy I'll talk about how I

00:02:22,080 --> 00:02:26,880
wasn't really happy with what this

00:02:24,060 --> 00:02:29,040
revealed to me then I'll talk about

00:02:26,880 --> 00:02:30,870
making an HTTP request I raged in proxy

00:02:29,040 --> 00:02:34,130
which revealed how this tunneling

00:02:30,870 --> 00:02:36,660
business which solves eased all my woes

00:02:34,130 --> 00:02:39,530
then I'll talk about the SSH protocol

00:02:36,660 --> 00:02:41,910
the sort of lessons I learnt there and

00:02:39,530 --> 00:02:43,200
and yeah

00:02:41,910 --> 00:02:45,120
and then we'll finish up with some

00:02:43,200 --> 00:02:47,250
lessons learned and some remarks so I'll

00:02:45,120 --> 00:02:49,560
just start by just showing you some some

00:02:47,250 --> 00:02:51,800
basic functionality of Joe let's just do

00:02:49,560 --> 00:02:59,250
some basic Joe so we can Joe

00:02:51,800 --> 00:03:00,300
Google calm okay you know that's nice

00:02:59,250 --> 00:03:02,660
and simple we can see we get the

00:03:00,300 --> 00:03:02,660
response

00:03:15,650 --> 00:03:22,349
okay so we can we can also go to an

00:03:19,950 --> 00:03:23,760
endpoint and sort of get the response

00:03:22,349 --> 00:03:25,080
and pipe it into a file so that's what

00:03:23,760 --> 00:03:27,510
I've done here so this has just

00:03:25,080 --> 00:03:29,370
downloaded that file for me we can also

00:03:27,510 --> 00:03:31,890
do this command here I won't

00:03:29,370 --> 00:03:33,750
I won't try and copy that one so that

00:03:31,890 --> 00:03:35,280
command should go to all those endpoints

00:03:33,750 --> 00:03:37,650
so this is sort some functionality of

00:03:35,280 --> 00:03:40,200
curl which is that it has sort of a met

00:03:37,650 --> 00:03:43,200
some regex like thing you can do where

00:03:40,200 --> 00:03:44,760
this would go to Google and ascom and

00:03:43,200 --> 00:03:46,739
also it would go to google.com and

00:03:44,760 --> 00:03:48,750
search where the search for ammeter was

00:03:46,739 --> 00:03:50,640
the numbers 1 to 4 going ups and

00:03:48,750 --> 00:03:53,670
intervals of three and then it would put

00:03:50,640 --> 00:03:55,440
it into these these various files that I

00:03:53,670 --> 00:03:57,660
create so going to Google to HTML

00:03:55,440 --> 00:03:59,850
I'll start HTML Google one to HTML and

00:03:57,660 --> 00:04:03,480
do free dot HTML and you see there's

00:03:59,850 --> 00:04:05,430
just this def - location header part

00:04:03,480 --> 00:04:06,510
just to recursively follow the location

00:04:05,430 --> 00:04:08,120
headers so I really get to my

00:04:06,510 --> 00:04:12,239
destination

00:04:08,120 --> 00:04:16,380
okie-dokie and then we can see some some

00:04:12,239 --> 00:04:21,239
SSH so here is a an SSH server that I

00:04:16,380 --> 00:04:22,919
have ok so I can I can go into there I

00:04:21,239 --> 00:04:26,370
can execute a command let's say oh just

00:04:22,919 --> 00:04:32,690
LS ok I can see the various files in

00:04:26,370 --> 00:04:32,690
there ok and maybe I can cat a file

00:04:35,419 --> 00:04:40,020
okie dokie so I can do whatever I like

00:04:37,860 --> 00:04:42,120
so that's that's essentially the

00:04:40,020 --> 00:04:44,220
functionality of jail of course I could

00:04:42,120 --> 00:04:46,740
also kill from my SSH machine and get

00:04:44,220 --> 00:04:50,370
all the actual functionality of Ko if I

00:04:46,740 --> 00:04:52,440
liked okey dokey so moving on to how it

00:04:50,370 --> 00:04:55,650
looked so let's start with something

00:04:52,440 --> 00:04:57,539
simple multi-part form data so this was

00:04:55,650 --> 00:04:58,950
just the first thing I encountered you

00:04:57,539 --> 00:05:01,020
know how do you send a file well in

00:04:58,950 --> 00:05:03,660
reality it's it's kind of easy you just

00:05:01,020 --> 00:05:05,460
make a form have a server which can

00:05:03,660 --> 00:05:07,140
listen to the requests that the form

00:05:05,460 --> 00:05:08,550
makes and there you go you'll see

00:05:07,140 --> 00:05:10,830
exactly what the browser does all the

00:05:08,550 --> 00:05:11,910
browser does is just generate a random

00:05:10,830 --> 00:05:14,460
string which is going to act as a

00:05:11,910 --> 00:05:17,789
boundary and then basically the files

00:05:14,460 --> 00:05:19,620
are separated by this boundary yeah so

00:05:17,789 --> 00:05:21,960
that's that's great you can just infer

00:05:19,620 --> 00:05:24,510
from that and make something super short

00:05:21,960 --> 00:05:27,720
we can see we can see how it looks in

00:05:24,510 --> 00:05:29,380
node you know extremely easy thanks -

00:05:27,720 --> 00:05:37,720
thanks - FS

00:05:29,380 --> 00:05:39,790
streams and the like so if we go to say

00:05:37,720 --> 00:05:41,950
we go there you say all we have is we

00:05:39,790 --> 00:05:44,290
just have this bit this bit up here

00:05:41,950 --> 00:05:45,880
which is sort of going through the files

00:05:44,290 --> 00:05:48,610
that I passed through in the command and

00:05:45,880 --> 00:05:50,740
then it's piping each one in there's

00:05:48,610 --> 00:05:53,590
only really one subtlety which is we

00:05:50,740 --> 00:05:56,380
don't want to omit the end event on the

00:05:53,590 --> 00:05:57,700
on the socket so I just have to when I

00:05:56,380 --> 00:05:59,050
pipe here I just have to make sure I

00:05:57,700 --> 00:06:01,210
don't omit the end event that's all this

00:05:59,050 --> 00:06:03,460
end force is doing so really nothing

00:06:01,210 --> 00:06:14,560
complicated like you know I worked pipe

00:06:03,460 --> 00:06:17,080
file in no does it easily for me okay so

00:06:14,560 --> 00:06:19,390
here's the first lesson which is that I

00:06:17,080 --> 00:06:21,070
did all this initially just by kind of

00:06:19,390 --> 00:06:23,230
guessing like like to say oh I just went

00:06:21,070 --> 00:06:24,790
to the browser but sort of the moral of

00:06:23,230 --> 00:06:28,450
the story is that really you should be

00:06:24,790 --> 00:06:30,250
using this IETF which is sort of a place

00:06:28,450 --> 00:06:31,480
where you can obtain a number of

00:06:30,250 --> 00:06:33,520
documents which will explain every

00:06:31,480 --> 00:06:35,080
protocol to you you can just read these

00:06:33,520 --> 00:06:36,490
they'll tell you exactly what to do

00:06:35,080 --> 00:06:39,130
so you'll see later that's what I did

00:06:36,490 --> 00:06:42,510
when I implemented SSH you just you just

00:06:39,130 --> 00:06:43,690
read them follow the instructions

00:06:42,510 --> 00:06:45,370
okey-dokey

00:06:43,690 --> 00:06:47,050
so now moving on to making the nature to

00:06:45,370 --> 00:06:48,760
be request over age from proxy well I'm

00:06:47,050 --> 00:06:51,040
sure most people that weren't me know

00:06:48,760 --> 00:06:52,870
that this is extremely simple

00:06:51,040 --> 00:06:54,550
you basically just do the most naive

00:06:52,870 --> 00:06:56,470
thing you're going to make a request to

00:06:54,550 --> 00:07:00,100
the proxy you're going to tell it I want

00:06:56,470 --> 00:07:01,750
to talk to this it's going to go get the

00:07:00,100 --> 00:07:04,450
result and then send it back to you

00:07:01,750 --> 00:07:05,980
that's kind of simple but when I when I

00:07:04,450 --> 00:07:08,560
worked out how to do this I wasn't

00:07:05,980 --> 00:07:11,320
really happy because okay that's fine

00:07:08,560 --> 00:07:13,860
for HTTP but I kind of don't understand

00:07:11,320 --> 00:07:15,850
how that extends to TCP because okay

00:07:13,860 --> 00:07:17,590
HTTP that kind of feels like I'm just

00:07:15,850 --> 00:07:20,620
sending one thing and get one thing back

00:07:17,590 --> 00:07:22,990
fine but I don't I don't understand how

00:07:20,620 --> 00:07:24,310
that extends to TCP and also I realized

00:07:22,990 --> 00:07:26,860
there was sort of a problem with it

00:07:24,310 --> 00:07:30,100
which is that okay well let's say the

00:07:26,860 --> 00:07:31,840
proxy is talking to something HTTPS well

00:07:30,100 --> 00:07:33,610
then the communication between them is

00:07:31,840 --> 00:07:35,890
encrypted but what about back to me well

00:07:33,610 --> 00:07:37,840
that won't be encrypted so I could see

00:07:35,890 --> 00:07:40,180
that this couldn't be the be-all and

00:07:37,840 --> 00:07:42,999
end-all of solutions so I sort of

00:07:40,180 --> 00:07:45,129
persevered on and learn about

00:07:42,999 --> 00:07:47,019
HTTP and this saw solved all the

00:07:45,129 --> 00:07:49,269
problems so it does the second-most

00:07:47,019 --> 00:07:50,619
naive thing and well what's the second

00:07:49,269 --> 00:07:53,919
most knifing or maybe it's the most

00:07:50,619 --> 00:07:56,439
naive thing it just we have this connect

00:07:53,919 --> 00:07:58,779
method it's going to test I'm going to

00:07:56,439 --> 00:08:00,999
talk to the proxy the proxy is going to

00:07:58,779 --> 00:08:03,099
establish a TCP connection to my

00:08:00,999 --> 00:08:05,979
endpoint for me I have a TCP connection

00:08:03,099 --> 00:08:09,309
to the proxy and then I just send the

00:08:05,979 --> 00:08:11,529
packets down that TCP connection and it

00:08:09,309 --> 00:08:12,939
forwards them to me and this is great I

00:08:11,529 --> 00:08:14,649
was super happy when I found out this

00:08:12,939 --> 00:08:16,629
because this explained everything right

00:08:14,649 --> 00:08:18,669
now I could see it was easy how to proxy

00:08:16,629 --> 00:08:21,699
anything like essentially I just

00:08:18,669 --> 00:08:23,709
established this TCP connection and

00:08:21,699 --> 00:08:25,349
there we go it's like I don't have the

00:08:23,709 --> 00:08:27,969
proxy in the way at all

00:08:25,349 --> 00:08:30,219
okie dokie so this means that we finally

00:08:27,969 --> 00:08:32,319
get to see some relatively cool node so

00:08:30,219 --> 00:08:34,479
what some cool node well that's HTTP

00:08:32,319 --> 00:08:36,939
agents and this is just sort of a neat

00:08:34,479 --> 00:08:38,139
way that node provides of implementing

00:08:36,939 --> 00:08:40,209
what I'm talking about so first of all

00:08:38,139 --> 00:08:43,000
for those who don't know what's an HTTP

00:08:40,209 --> 00:08:45,850
agent well an HTTP Asian is the thing in

00:08:43,000 --> 00:08:48,220
node dealing with the HTTP and HTTPS

00:08:45,850 --> 00:08:50,199
library which sort of handle your

00:08:48,220 --> 00:08:52,809
sockets for you so it creates and

00:08:50,199 --> 00:08:54,430
manages them and stuff and the most

00:08:52,809 --> 00:08:56,379
important thing well okay it supplies

00:08:54,430 --> 00:08:58,449
its own you know the global agent you

00:08:56,379 --> 00:09:00,189
can make your own and supply that and

00:08:58,449 --> 00:09:02,699
the most important part is that you can

00:09:00,189 --> 00:09:05,709
override the method which supplies the

00:09:02,699 --> 00:09:08,829
socket to you so this is this create

00:09:05,709 --> 00:09:11,740
connection method so all we have to do

00:09:08,829 --> 00:09:13,360
is just override this method to to make

00:09:11,740 --> 00:09:15,069
it go to the proxy and make the

00:09:13,360 --> 00:09:15,519
connection so I can show you how that

00:09:15,069 --> 00:09:17,470
looks

00:09:15,519 --> 00:09:20,649
SuperDuper easy and note there couldn't

00:09:17,470 --> 00:09:24,970
be anything easier really like if I go

00:09:20,649 --> 00:09:26,740
if I go here you see all I do is I just

00:09:24,970 --> 00:09:28,509
do exactly what I described in very

00:09:26,740 --> 00:09:30,809
plain English I'm going to talk to the

00:09:28,509 --> 00:09:33,670
proxy so here I make an HTTP request

00:09:30,809 --> 00:09:36,129
it's a connect request so that's going

00:09:33,670 --> 00:09:37,809
to make me a connection once I get the

00:09:36,129 --> 00:09:39,579
socket back I'm just going to use that

00:09:37,809 --> 00:09:42,160
socket and let's say I want to upgrade

00:09:39,579 --> 00:09:44,230
to a secure connection well I can just

00:09:42,160 --> 00:09:45,699
send the TLS doc connect down that

00:09:44,230 --> 00:09:49,240
socket and there we go I've established

00:09:45,699 --> 00:09:51,939
am a secure secure connection over proxy

00:09:49,240 --> 00:09:52,949
and you know this is all you need to do

00:09:51,939 --> 00:09:55,750
like you just passed this a

00:09:52,949 --> 00:09:56,950
corresponding agent from this so of

00:09:55,750 --> 00:10:00,519
course I

00:09:56,950 --> 00:10:02,200
I extend HTTP agent override that method

00:10:00,519 --> 00:10:11,079
and there we go when I use the agent

00:10:02,200 --> 00:10:13,690
it's all going to work nicely okey-dokey

00:10:11,079 --> 00:10:15,190
so just a little snack so this isn't

00:10:13,690 --> 00:10:17,639
really a snag at all this is again

00:10:15,190 --> 00:10:20,230
something that probably everyone knows

00:10:17,639 --> 00:10:22,990
so essentially I'd done all this I was

00:10:20,230 --> 00:10:24,760
playing around then I went to work and

00:10:22,990 --> 00:10:27,339
try to use it at work and discovered

00:10:24,760 --> 00:10:29,680
that it didn't work at all and I was

00:10:27,339 --> 00:10:32,290
quite confused and it ended up being

00:10:29,680 --> 00:10:35,920
something quite simple so the reason is

00:10:32,290 --> 00:10:37,570
basically just this sni so for those

00:10:35,920 --> 00:10:39,639
that don't know you know an IP address

00:10:37,570 --> 00:10:41,980
might be hosting multiple web servers

00:10:39,639 --> 00:10:44,079
well how's that how's that IP address

00:10:41,980 --> 00:10:47,320
can only which web server you want well

00:10:44,079 --> 00:10:49,240
normally in HTTP land you send this host

00:10:47,320 --> 00:10:50,889
header and that sort of tells your IP

00:10:49,240 --> 00:10:53,889
address ok they want that that web page

00:10:50,889 --> 00:10:57,730
so that's fine it doesn't really make

00:10:53,889 --> 00:10:59,230
sense in HTTP though you can see because

00:10:57,730 --> 00:11:01,870
we're going to do all the security stuff

00:10:59,230 --> 00:11:03,399
before we send the header so sort of

00:11:01,870 --> 00:11:05,980
how's it going to know which certificate

00:11:03,399 --> 00:11:07,360
to present us you know you send this

00:11:05,980 --> 00:11:09,940
like it sends the certificate

00:11:07,360 --> 00:11:11,589
corresponding to the site and well if

00:11:09,940 --> 00:11:14,230
you don't send which site you want how

00:11:11,589 --> 00:11:16,660
will it know so so yeah there's just the

00:11:14,230 --> 00:11:18,610
solution to this is this SN I think it's

00:11:16,660 --> 00:11:21,640
a fancy name for something that isn't

00:11:18,610 --> 00:11:23,140
very complex the moral of this isn't S&I

00:11:21,640 --> 00:11:25,540
is this great thing you have to be aware

00:11:23,140 --> 00:11:27,760
of it's more that I was sort of being

00:11:25,540 --> 00:11:30,010
quite silly in my approach to networking

00:11:27,760 --> 00:11:30,550
I was up just playing around guessing as

00:11:30,010 --> 00:11:32,529
I went along

00:11:30,550 --> 00:11:35,199
really what in retrospect I should have

00:11:32,529 --> 00:11:36,550
been doing is reading fully the

00:11:35,199 --> 00:11:38,560
documentation and I would have easily

00:11:36,550 --> 00:11:40,420
stumbled across this I mean once you

00:11:38,560 --> 00:11:42,819
know what you're looking for it's very

00:11:40,420 --> 00:11:44,350
easy to resolve the TLS connect method

00:11:42,819 --> 00:11:47,970
just lets you supply the server name and

00:11:44,350 --> 00:11:50,829
it deals with all that nonsense for you

00:11:47,970 --> 00:11:53,170
okey dokey so I've done all that

00:11:50,829 --> 00:11:54,430
that was cool I guess except that it

00:11:53,170 --> 00:11:58,389
kind of felt like it was still quite

00:11:54,430 --> 00:12:00,430
basic I guess it's just yeah but it

00:11:58,389 --> 00:12:01,870
didn't it didn't seem interesting and I

00:12:00,430 --> 00:12:03,790
thought kind of when I initially started

00:12:01,870 --> 00:12:06,279
this my interest was okay I'll write

00:12:03,790 --> 00:12:07,990
some I write some manual and request

00:12:06,279 --> 00:12:09,550
like writing the packets and stuff and

00:12:07,990 --> 00:12:10,370
then maybe I'll have a good feel for

00:12:09,550 --> 00:12:12,740
networking

00:12:10,370 --> 00:12:16,670
have at least a good intuitive grasp and

00:12:12,740 --> 00:12:19,790
that that should be enough so I chose

00:12:16,670 --> 00:12:22,129
SSH so SH isn't quite like TLS as far as

00:12:19,790 --> 00:12:24,620
I understand you can't really use the

00:12:22,129 --> 00:12:25,959
TLS stuff SSH as I understand it came

00:12:24,620 --> 00:12:29,149
before

00:12:25,959 --> 00:12:31,670
so before SSH I was thinking of doing

00:12:29,149 --> 00:12:33,499
something like FTP so if you look at my

00:12:31,670 --> 00:12:35,809
my code you'll see that there's some

00:12:33,499 --> 00:12:37,910
stuff that does FTP but I kind of wasn't

00:12:35,809 --> 00:12:40,399
very interested in FTP because it's it's

00:12:37,910 --> 00:12:43,759
just another plaintext a text-based

00:12:40,399 --> 00:12:45,589
protocol like HTTP and sort of a bit

00:12:43,759 --> 00:12:46,939
seemed a bit too boring and simple to

00:12:45,589 --> 00:12:52,459
implement and not that practical for me

00:12:46,939 --> 00:12:54,680
because I don't do much with FTP so yeah

00:12:52,459 --> 00:12:56,120
so we've seen we've seen or I can tell

00:12:54,680 --> 00:12:58,399
you that you know you've got this net

00:12:56,120 --> 00:13:00,499
module that creates TCP sockets for you

00:12:58,399 --> 00:13:02,029
you've got buffers in node so I could

00:13:00,499 --> 00:13:03,949
just write all the packets like I can

00:13:02,029 --> 00:13:05,720
just write packets pass packets that

00:13:03,949 --> 00:13:07,730
come through to me and well any

00:13:05,720 --> 00:13:10,850
protocols kind of simple to I just have

00:13:07,730 --> 00:13:12,680
to follow the rules so that was my that

00:13:10,850 --> 00:13:16,999
was my revelation well I'll just look it

00:13:12,680 --> 00:13:19,040
up and go it so all nice and easy of

00:13:16,999 --> 00:13:20,779
course in reality I know that it's not

00:13:19,040 --> 00:13:25,129
easy or at least I don't think it's easy

00:13:20,779 --> 00:13:27,220
so SSH is a complicated Beast my SSH

00:13:25,129 --> 00:13:30,350
client if you'd like to call it that

00:13:27,220 --> 00:13:31,519
doesn't do nearly what should do some

00:13:30,350 --> 00:13:34,339
spoilers it doesn't bother to even

00:13:31,519 --> 00:13:36,529
verify the hmx that I get sent back I

00:13:34,339 --> 00:13:39,620
just I just want to get the results that

00:13:36,529 --> 00:13:41,870
was was me so all I was aiming for is I

00:13:39,620 --> 00:13:45,829
were to be able to execute a command on

00:13:41,870 --> 00:13:47,629
a Linux SSH server over a proxy

00:13:45,829 --> 00:13:48,800
connection and I wasn't going to deal

00:13:47,629 --> 00:13:49,879
with search for anything I was just

00:13:48,800 --> 00:13:52,309
going to send a username and password

00:13:49,879 --> 00:13:54,559
and I wasn't going to implement lots of

00:13:52,309 --> 00:13:56,209
key exchange algorithms all I do is I

00:13:54,559 --> 00:13:58,100
just I just decided I'll pick the most

00:13:56,209 --> 00:14:00,589
popular one which when I looked it up

00:13:58,100 --> 00:14:02,870
with elliptical diffie-hellman this is

00:14:00,589 --> 00:14:05,300
one that the SSH protocol sort of demand

00:14:02,870 --> 00:14:09,170
be supported nowadays so I thought if I

00:14:05,300 --> 00:14:12,110
do that I'm in good stead and now now I

00:14:09,170 --> 00:14:13,759
actually had to do my reading so I will

00:14:12,110 --> 00:14:15,649
show you this but I have some difficulty

00:14:13,759 --> 00:14:17,720
moving the things I've earlier but

00:14:15,649 --> 00:14:18,769
essentially these these documents tell

00:14:17,720 --> 00:14:20,420
you everything you need to know that if

00:14:18,769 --> 00:14:22,549
you go to this page seven of this

00:14:20,420 --> 00:14:24,230
document it will tell you okay here's

00:14:22,549 --> 00:14:27,590
what packet looks like it starts

00:14:24,230 --> 00:14:29,930
a 32-bit unsigned integer that's gonna

00:14:27,590 --> 00:14:32,120
tell you the the sort of total length of

00:14:29,930 --> 00:14:34,520
the packet there's some something that

00:14:32,120 --> 00:14:36,770
tells you I guess it's a 8-bit integer

00:14:34,520 --> 00:14:37,880
which tells you the length of some

00:14:36,770 --> 00:14:40,070
padding that you're going to put on the

00:14:37,880 --> 00:14:43,100
end it tells you some rule about what

00:14:40,070 --> 00:14:45,770
the size of the packet should be and

00:14:43,100 --> 00:14:47,690
then there's a payload all simple stuff

00:14:45,770 --> 00:14:49,190
and maybe like you want to know okay

00:14:47,690 --> 00:14:51,020
well what's the first packet I send well

00:14:49,190 --> 00:14:52,760
it tells you exactly you know you should

00:14:51,020 --> 00:14:55,130
start by sending this packet which says

00:14:52,760 --> 00:14:56,990
sort of I'm this type of SSH thing and

00:14:55,130 --> 00:14:59,000
what type you are should satisfy some

00:14:56,990 --> 00:15:00,470
rules okay what's the next thing you

00:14:59,000 --> 00:15:02,720
should send well you should start

00:15:00,470 --> 00:15:04,790
exchanging which algorithms you support

00:15:02,720 --> 00:15:06,140
so there's a big big big packet you've

00:15:04,790 --> 00:15:08,510
got send which says I support these

00:15:06,140 --> 00:15:10,520
algorithms all of these algorithms so

00:15:08,510 --> 00:15:12,230
you're going to be someone back and you

00:15:10,520 --> 00:15:13,460
know you have to sort of parse what

00:15:12,230 --> 00:15:16,760
you're sent back so we can see what that

00:15:13,460 --> 00:15:19,670
looks like so super mostly written by me

00:15:16,760 --> 00:15:22,340
apologies for that let's see so I

00:15:19,670 --> 00:15:27,650
suppose it should be in SSH passing

00:15:22,340 --> 00:15:32,420
where's that oh yeah okay so that's a

00:15:27,650 --> 00:15:34,580
spoiler for some rip time let's see

00:15:32,420 --> 00:15:36,920
so here's yeah here's me passing no less

00:15:34,580 --> 00:15:39,350
than EC Keith right so here I just want

00:15:36,920 --> 00:15:40,810
to pass the key exchange and really it's

00:15:39,350 --> 00:15:44,390
just a lot of words doing nothing

00:15:40,810 --> 00:15:47,360
essentially I have I have some code up

00:15:44,390 --> 00:15:49,250
here which is going to to to pass a

00:15:47,360 --> 00:15:50,990
packet that's just what I described lot

00:15:49,250 --> 00:15:53,690
I just know how the packets going to

00:15:50,990 --> 00:15:55,850
look and then I just go through the

00:15:53,690 --> 00:15:57,170
packet I've been told exactly how it's

00:15:55,850 --> 00:15:59,180
going to look and I just read out the

00:15:57,170 --> 00:16:00,500
relevant things so actually a feature I

00:15:59,180 --> 00:16:03,320
didn't show of this I guess I can show

00:16:00,500 --> 00:16:05,240
it now is that if I pass in the DEF me

00:16:03,320 --> 00:16:06,620
flag obviously this isn't terribly

00:16:05,240 --> 00:16:08,780
useful although it can be useful for

00:16:06,620 --> 00:16:10,820
debugging is I can pass in the despi

00:16:08,780 --> 00:16:13,010
flag and see okay these are all the all

00:16:10,820 --> 00:16:15,920
the packets on being sent appropriately

00:16:13,010 --> 00:16:17,810
passed okey-dokey

00:16:15,920 --> 00:16:20,720
so that's that's reading new ATF and

00:16:17,810 --> 00:16:22,550
really henceforth it was just kind of a

00:16:20,720 --> 00:16:24,200
matter of reading right here and this is

00:16:22,550 --> 00:16:26,570
what I want to stress upon you is that

00:16:24,200 --> 00:16:28,040
it's super duper simple like in my head

00:16:26,570 --> 00:16:29,240
there was all this mystique around a

00:16:28,040 --> 00:16:31,160
network protocol it was like this

00:16:29,240 --> 00:16:32,540
complicated behemoth that you had to

00:16:31,160 --> 00:16:35,720
study for the rest of your life to know

00:16:32,540 --> 00:16:37,970
about but in reality you just read the

00:16:35,720 --> 00:16:39,860
documentation it tells you exactly

00:16:37,970 --> 00:16:43,250
everything is kind of kind of one of the

00:16:39,860 --> 00:16:44,750
easier aspects of life of course

00:16:43,250 --> 00:16:47,300
something that might not be easy is

00:16:44,750 --> 00:16:49,550
there's the cryptography stuff but the

00:16:47,300 --> 00:16:52,279
good news there is that no does it all

00:16:49,550 --> 00:16:54,589
for us and so now it has a crypto module

00:16:52,279 --> 00:16:57,019
it's extremely powerful all you need to

00:16:54,589 --> 00:17:01,550
do is just understand how to put things

00:16:57,019 --> 00:17:03,889
into it so for example part of part of

00:17:01,550 --> 00:17:07,280
the sh algorithm is that you need to

00:17:03,889 --> 00:17:09,650
create an exchange hash based on various

00:17:07,280 --> 00:17:12,199
things so what those various things are

00:17:09,650 --> 00:17:13,699
can again be found in nighty F so here

00:17:12,199 --> 00:17:15,020
I'm using the exchange session so here

00:17:13,699 --> 00:17:17,630
I'm actually creating the exchange hash

00:17:15,020 --> 00:17:19,699
so if you read the documentation you'll

00:17:17,630 --> 00:17:21,169
see that essentially when you did your

00:17:19,699 --> 00:17:23,600
key exchange you said which hashing

00:17:21,169 --> 00:17:26,030
algorithm you're going to use at some

00:17:23,600 --> 00:17:27,740
point you decide to generate this

00:17:26,030 --> 00:17:29,210
exchange hash and it's just formed by

00:17:27,740 --> 00:17:31,539
concatenating a bunch of information

00:17:29,210 --> 00:17:34,549
you've received before and hashing it

00:17:31,539 --> 00:17:36,020
simple as that and you can see that all

00:17:34,549 --> 00:17:38,480
the stuff dealing with cryptography is

00:17:36,020 --> 00:17:40,429
is equally simple like it's just lots of

00:17:38,480 --> 00:17:42,110
lines which essentially generate the

00:17:40,429 --> 00:17:43,520
thing that I can use for decryption and

00:17:42,110 --> 00:17:48,950
encryption and then I never have to

00:17:43,520 --> 00:17:50,450
think about it again yeah so the node

00:17:48,950 --> 00:17:52,880
node module does all the heavy lifting

00:17:50,450 --> 00:17:54,679
for us and all we have left to do is

00:17:52,880 --> 00:17:56,480
just follow the protocol to the letter

00:17:54,679 --> 00:17:58,520
so this is where you can slip up if

00:17:56,480 --> 00:18:00,409
you're rushing into it like me because

00:17:58,520 --> 00:18:02,510
you know for example you might be trying

00:18:00,409 --> 00:18:04,309
to guess what things look like and

00:18:02,510 --> 00:18:08,270
that's not really not not really

00:18:04,309 --> 00:18:10,460
possible okie-dokie so here on to my

00:18:08,270 --> 00:18:12,530
final thoughts so final thoughts are

00:18:10,460 --> 00:18:14,990
that you should go so ITF I suppose I've

00:18:12,530 --> 00:18:18,020
talked about enough now another thought

00:18:14,990 --> 00:18:21,289
is that node is like super awesome like

00:18:18,020 --> 00:18:23,570
I've done after I've done this I've done

00:18:21,289 --> 00:18:25,669
it in languages like C and that's

00:18:23,570 --> 00:18:28,070
considerably more complex in my opinion

00:18:25,669 --> 00:18:30,230
no just kind of gets rid of all the all

00:18:28,070 --> 00:18:31,460
the unnecessary complexity and just

00:18:30,230 --> 00:18:34,340
leaves you with what you've actually got

00:18:31,460 --> 00:18:36,770
to do so here in the talk I've only

00:18:34,340 --> 00:18:39,140
demonstrated things using TCP but

00:18:36,770 --> 00:18:40,970
actually you can easily do UDP as well

00:18:39,140 --> 00:18:43,730
so for example I played around a bit

00:18:40,970 --> 00:18:47,090
this is nothing nothing fancy this is

00:18:43,730 --> 00:18:49,220
just one can make a DNS request if they

00:18:47,090 --> 00:18:51,610
like easily and node so let's see where

00:18:49,220 --> 00:18:54,650
that is yep

00:18:51,610 --> 00:18:56,420
so here you see me this is just some

00:18:54,650 --> 00:18:59,060
some very rough code where I make a

00:18:56,420 --> 00:19:03,980
manual DNS request to Google and resolve

00:18:59,060 --> 00:19:05,480
the IP so yeah UDP equally simple to to

00:19:03,980 --> 00:19:07,820
sort of play around with again I'm not

00:19:05,480 --> 00:19:09,560
site trying to assert that anyone should

00:19:07,820 --> 00:19:11,090
dip their hand in this and try and make

00:19:09,560 --> 00:19:12,950
something production level I'm saying

00:19:11,090 --> 00:19:14,060
that for the purpose of having a good

00:19:12,950 --> 00:19:16,610
understanding or a reasonable

00:19:14,060 --> 00:19:20,840
understanding of how things work it's a

00:19:16,610 --> 00:19:22,490
good way to go yep and the moral of the

00:19:20,840 --> 00:19:24,110
story is that you shouldn't rush into

00:19:22,490 --> 00:19:27,800
these things I sort of rushed into

00:19:24,110 --> 00:19:30,260
making my SSH client and because of that

00:19:27,800 --> 00:19:33,350
it's it's not very well written in my

00:19:30,260 --> 00:19:35,180
opinion you know if I were to go back I

00:19:33,350 --> 00:19:37,130
would definitely be using streams to

00:19:35,180 --> 00:19:39,170
handle things to do it a lot more nicely

00:19:37,130 --> 00:19:41,270
with that and I probably wouldn't have

00:19:39,170 --> 00:19:42,710
tried to rush to my exact goal like I

00:19:41,270 --> 00:19:44,960
was trying to just execute a remote

00:19:42,710 --> 00:19:47,030
command but really I think I missed out

00:19:44,960 --> 00:19:48,650
on a lot of nice details by just trying

00:19:47,030 --> 00:19:51,290
to do that I really should have done the

00:19:48,650 --> 00:19:55,220
full generality of a proper SSH client

00:19:51,290 --> 00:19:58,430
and yeah so network protocols simple

00:19:55,220 --> 00:20:00,110
very finicky you can play around with

00:19:58,430 --> 00:20:02,180
them I wouldn't feel bad if you leave

00:20:00,110 --> 00:20:04,160
the proper implementation of them to

00:20:02,180 --> 00:20:06,530
someone who's been doing it for the rest

00:20:04,160 --> 00:20:09,850
of all of their lives and that's that's

00:20:06,530 --> 00:20:09,850
my talk so any questions

00:20:17,140 --> 00:20:19,200

YouTube URL: https://www.youtube.com/watch?v=PpYxByBv1Xk


