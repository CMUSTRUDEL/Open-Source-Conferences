Title: http4js - A Whirlwind Tour - London Node User Group - June 2018
Publication date: 2018-07-04
Playlist: London Node User Group
Description: 
	Presented by Tom Shacham.

http4js is a lightweight http framework. It's immutable, has zero dependencies and is written in typescript. The docs are quite descriptive.

This talk would be mainly live coding to show the main benefits of using http4js over another node http framework. I've presented to colleagues who are now adopting http4js. I'd love to show the community why I think it's a better way to write web apps, by demonstration!

I will go through the main selling points:

- in memory testing of your routing (no more slow end-to-end tests)
- immutable Req/Res objects (so harder to smear state around your codebase)
- a simple http client
- zero dependencies
- support for Koa/Express backends (so you can use your favourite middleware)
- nice things that typescript brings (autocompleting, type safety, ... )
symmetric client and server type signatures (Request = Promise\ , making proxying a cinch)
- Through live coding and real examples I will show how simple and sane http4js can be!

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:04,500
so trip teasers are start up in the

00:00:01,740 --> 00:00:09,480
hotel space and we're hiring the site

00:00:04,500 --> 00:00:14,880
everyone else so yeah HTTP page is

00:00:09,480 --> 00:00:18,000
something I wrote this so I something I

00:00:14,880 --> 00:00:19,320
rate over the last six months or so in

00:00:18,000 --> 00:00:23,160
my spare time and the way actually

00:00:19,320 --> 00:00:27,660
started was so it's a port of HTTP 4k

00:00:23,160 --> 00:00:29,070
which is a HTTP framework for Kotlin and

00:00:27,660 --> 00:00:30,990
I was working with one of the creators

00:00:29,070 --> 00:00:33,600
and I literally copied and pasted some

00:00:30,990 --> 00:00:37,140
of the core files and made it work in

00:00:33,600 --> 00:00:39,660
typescript and that's how I started so

00:00:37,140 --> 00:00:41,879
yeah HD 4k is written by Dave Denton and

00:00:39,660 --> 00:00:43,920
Yvonne Sanchez and the kind of loose

00:00:41,879 --> 00:00:48,059
loosely the concept is called server as

00:00:43,920 --> 00:00:50,100
a function and early ideas for that came

00:00:48,059 --> 00:00:50,969
from damn boats utterly idols I just

00:00:50,100 --> 00:00:53,160
want to give a couple of shout outs

00:00:50,969 --> 00:00:57,149
there anything that's good here I'd

00:00:53,160 --> 00:00:58,949
probably be stole from them cool so what

00:00:57,149 --> 00:01:00,149
is the approach I'm not gonna do that

00:00:58,949 --> 00:01:02,820
whole thing by the way it's my only

00:01:00,149 --> 00:01:07,500
slide and then I'll do some live coding

00:01:02,820 --> 00:01:09,119
which will probably not work so what's

00:01:07,500 --> 00:01:16,799
different about HTTP for JSA

00:01:09,119 --> 00:01:18,780
immutability that's the third point you

00:01:16,799 --> 00:01:21,439
can reason about the order of things and

00:01:18,780 --> 00:01:23,700
actually for JSON like this slide so

00:01:21,439 --> 00:01:24,990
yeah the request and response objects

00:01:23,700 --> 00:01:27,299
are immutable so you can't just go

00:01:24,990 --> 00:01:27,990
chucking like database connections on

00:01:27,299 --> 00:01:30,740
your request

00:01:27,990 --> 00:01:33,540
they actually conforms to an interface

00:01:30,740 --> 00:01:35,250
the kind of philosophy is an T framework

00:01:33,540 --> 00:01:37,170
so I don't want to solve every problem

00:01:35,250 --> 00:01:39,270
you're going to have it's meant to be

00:01:37,170 --> 00:01:42,869
more like lightweight and you build the

00:01:39,270 --> 00:01:47,340
solutions yourself I wrote it using kind

00:01:42,869 --> 00:01:48,750
of TDD sort of there's like 100 tests

00:01:47,340 --> 00:01:50,850
that run in three seconds so it's quite

00:01:48,750 --> 00:01:53,970
a nice like place to live and like I'd

00:01:50,850 --> 00:01:55,409
love you to you know tell me I was

00:01:53,970 --> 00:01:56,610
needed I'm new to typescript so I'm sure

00:01:55,409 --> 00:01:59,430
there's lots of problems and I'd love

00:01:56,610 --> 00:02:02,130
you to contribute so yeah like I say

00:01:59,430 --> 00:02:04,020
bugs will exist because it is fairly new

00:02:02,130 --> 00:02:05,280
but on the other hand it's kind of

00:02:04,020 --> 00:02:08,819
nearly finished because I don't think it

00:02:05,280 --> 00:02:10,020
should do much more so yeah what are the

00:02:08,819 --> 00:02:12,950
coolest things that I'm going to show

00:02:10,020 --> 00:02:17,160
you through live coding

00:02:12,950 --> 00:02:18,900
so in memory testing this is our ability

00:02:17,160 --> 00:02:22,530
to test our routing without actually

00:02:18,900 --> 00:02:26,070
having to make an HTTP request like over

00:02:22,530 --> 00:02:28,380
the wire or having to mock everything

00:02:26,070 --> 00:02:34,110
out in order to pass it and I can object

00:02:28,380 --> 00:02:36,750
to a route it's very quick to get up and

00:02:34,110 --> 00:02:39,930
running but I guess so

00:02:36,750 --> 00:02:42,390
are the other node h-2b frameworks which

00:02:39,930 --> 00:02:44,310
is funny because we're testing before

00:02:42,390 --> 00:02:46,980
and Stephens say they're it's quite a

00:02:44,310 --> 00:02:50,310
mature ecosystem now like no one would

00:02:46,980 --> 00:02:54,540
ever write a new HTTP framework and I

00:02:50,310 --> 00:02:56,130
say you know what my talks about that's

00:02:54,540 --> 00:03:01,110
right that's okay

00:02:56,130 --> 00:03:02,970
I'm sure it's useless so and then it's

00:03:01,110 --> 00:03:05,610
got a simple HTTP client that comes with

00:03:02,970 --> 00:03:07,440
it so like you don't have to learn

00:03:05,610 --> 00:03:10,620
another library and you don't have to

00:03:07,440 --> 00:03:11,010
therefore Jimmy around I'll explain

00:03:10,620 --> 00:03:13,170
later

00:03:11,010 --> 00:03:17,420
zero dependencies it's quite nice so it

00:03:13,170 --> 00:03:19,620
doesn't pull in like half of the planet

00:03:17,420 --> 00:03:21,210
yeah it's written in typescript so if

00:03:19,620 --> 00:03:23,040
you're doing type scripts it's good for

00:03:21,210 --> 00:03:28,230
you because it's type script first

00:03:23,040 --> 00:03:32,130
and yet I'll just get to it basically so

00:03:28,230 --> 00:03:33,710
I was going to like initiate an NPM like

00:03:32,130 --> 00:03:36,930
a project and stuff but then I thought

00:03:33,710 --> 00:03:38,970
the internet and stuff so here is an

00:03:36,930 --> 00:03:42,930
empty project there's nothing in it

00:03:38,970 --> 00:03:46,980
except I've done MPM install and we've

00:03:42,930 --> 00:03:48,660
got typescript TS node runs typescript

00:03:46,980 --> 00:03:53,670
natively so you don't need to compile to

00:03:48,660 --> 00:03:55,110
JavaScript HTTP for Jas and we're going

00:03:53,670 --> 00:03:58,020
to write a couple of tests so there's

00:03:55,110 --> 00:04:00,530
just mocha and chai these are if you've

00:03:58,020 --> 00:04:03,630
never seen this before the app types is

00:04:00,530 --> 00:04:05,190
like a repo full of type definitions for

00:04:03,630 --> 00:04:08,370
JavaScript libraries so you can use any

00:04:05,190 --> 00:04:11,420
type scripts come just like a quick show

00:04:08,370 --> 00:04:16,549
of hands like people who use typescript

00:04:11,420 --> 00:04:20,789
so like yeah like 20-30 percent maybe

00:04:16,549 --> 00:04:25,150
okay so hopefully

00:04:20,789 --> 00:04:26,919
hopefully it won't look too strange cool

00:04:25,150 --> 00:04:28,240
so the first I'm gonna show you is how

00:04:26,919 --> 00:04:30,189
quick it is to get up and running with

00:04:28,240 --> 00:04:31,439
it so it's like fairly easy to get

00:04:30,189 --> 00:04:34,180
started

00:04:31,439 --> 00:04:36,699
fingers crossed okay so what we're gonna

00:04:34,180 --> 00:04:40,240
say is we want to like serve a get

00:04:36,699 --> 00:04:42,189
request to slash and you can see that

00:04:40,240 --> 00:04:45,969
webstorm is helping me out like are you

00:04:42,189 --> 00:04:48,280
want to import something so get and

00:04:45,969 --> 00:04:50,889
we're gonna and what we need to give it

00:04:48,280 --> 00:04:55,750
is a function from a request to a

00:04:50,889 --> 00:04:57,879
promise or response so if by giving this

00:04:55,750 --> 00:04:59,319
async decorator it's going to make this

00:04:57,879 --> 00:05:03,389
into whatever I type here will be a

00:04:59,319 --> 00:05:06,819
promise of that and we say a response of

00:05:03,389 --> 00:05:10,349
like 200 and then a string so like hello

00:05:06,819 --> 00:05:13,840
world and it's helping me out here again

00:05:10,349 --> 00:05:17,800
and this is like this is a root so we're

00:05:13,840 --> 00:05:22,539
saying get to slash give a response 200

00:05:17,800 --> 00:05:26,199
hello world now in order to start it up

00:05:22,539 --> 00:05:29,110
as a server all I have to type is I say

00:05:26,199 --> 00:05:32,469
a server a server has a good default

00:05:29,110 --> 00:05:34,449
value of like a native node HTTP server

00:05:32,469 --> 00:05:41,500
so it's like minimal wrapping around

00:05:34,449 --> 00:05:48,909
node itself and then we say stop cool so

00:05:41,500 --> 00:05:54,270
this is the bit work breaks not you on

00:05:48,909 --> 00:05:57,430
NPM start so this runs TS node index TS

00:05:54,270 --> 00:06:02,789
so we're running that file using TS note

00:05:57,430 --> 00:06:10,120
and if we go to localhost 3000 say hello

00:06:02,789 --> 00:06:12,610
hey say so by default it runs on port

00:06:10,120 --> 00:06:15,669
3000 so that's how quick it is to get up

00:06:12,610 --> 00:06:18,759
and running oh just briefly explain this

00:06:15,669 --> 00:06:20,620
again so I get to slash we need a

00:06:18,759 --> 00:06:21,969
function from a request to response

00:06:20,620 --> 00:06:25,779
request actually comes in here I've just

00:06:21,969 --> 00:06:28,479
not explicitly stated it so we have a

00:06:25,779 --> 00:06:31,479
request here and then we return a

00:06:28,479 --> 00:06:33,430
response cool so that's how to get up

00:06:31,479 --> 00:06:35,220
and running just going to delete that

00:06:33,430 --> 00:06:36,970
because we're not gonna test that code

00:06:35,220 --> 00:06:40,330
just to make it clear

00:06:36,970 --> 00:06:41,770
okay so here's test and I've done some

00:06:40,330 --> 00:06:45,250
very basic structure so you don't watch

00:06:41,770 --> 00:06:48,370
me willingly import stuff so we've got

00:06:45,250 --> 00:06:50,710
some Jason talks I thought will write a

00:06:48,370 --> 00:06:53,650
torx app that lists some talks that are

00:06:50,710 --> 00:06:57,729
on today maybe just one talk that's on

00:06:53,650 --> 00:07:00,280
now so it's not that useful but yeah so

00:06:57,729 --> 00:07:04,539
describe talks it lists some talks so I

00:07:00,280 --> 00:07:06,580
want to write a test here and this is so

00:07:04,539 --> 00:07:08,350
I'm gonna show you here is how you can

00:07:06,580 --> 00:07:10,870
do in memory testing so this is one of

00:07:08,350 --> 00:07:14,800
my like three cool things about it I

00:07:10,870 --> 00:07:17,500
think is that I want I'm going to test a

00:07:14,800 --> 00:07:20,740
route now someone say that let's say I

00:07:17,500 --> 00:07:22,930
have some routing I have this method on

00:07:20,740 --> 00:07:27,160
routing could serve which allows me to

00:07:22,930 --> 00:07:29,349
serve a request using HTTP for j/s but

00:07:27,160 --> 00:07:32,289
not over the wire so this doesn't

00:07:29,349 --> 00:07:36,099
actually go over the wire it passes it

00:07:32,289 --> 00:07:42,910
to our routing object so we're going to

00:07:36,099 --> 00:07:47,020
serve a request of a get request to say

00:07:42,910 --> 00:07:49,570
slash so okay it's whining about me

00:07:47,020 --> 00:07:51,909
doesn't know what reading is I would

00:07:49,570 --> 00:07:55,659
usually extract a variable but it's not

00:07:51,909 --> 00:07:59,590
very helpful so let's just write it I'll

00:07:55,659 --> 00:08:03,930
reating which we saw earlier I'm gonna

00:07:59,590 --> 00:08:09,940
say get to slash talks gives us a

00:08:03,930 --> 00:08:11,669
response of 200 and then at the moment

00:08:09,940 --> 00:08:15,000
or the response bodies are just strings

00:08:11,669 --> 00:08:19,949
so we're gonna stay Jason got stringify

00:08:15,000 --> 00:08:22,750
talks oops sorry

00:08:19,949 --> 00:08:25,930
okay and put some stuff and put some

00:08:22,750 --> 00:08:30,490
stuff it's a kind of the nice thing in

00:08:25,930 --> 00:08:34,419
typescript desi boots is so fair yeah

00:08:30,490 --> 00:08:37,599
office cool

00:08:34,419 --> 00:08:40,120
so this is now compiling and this is

00:08:37,599 --> 00:08:45,339
going to be our response so if we await

00:08:40,120 --> 00:08:53,639
this we then expect that our response

00:08:45,339 --> 00:08:53,639
body to equal json stringify

00:08:58,389 --> 00:09:02,860
there's some problems with brackets just

00:09:01,110 --> 00:09:10,179
once already

00:09:02,860 --> 00:09:16,149
do you eat course Jason no oh there's a

00:09:10,179 --> 00:09:20,739
problem out there right ah let's try to

00:09:16,149 --> 00:09:22,089
support is the wrong thing alright so

00:09:20,739 --> 00:09:25,439
there is no interrupting the speaker

00:09:22,089 --> 00:09:25,439
unless you definitely know what's wrong

00:09:28,049 --> 00:09:33,309
talks cool so here's our test where

00:09:31,779 --> 00:09:35,170
we're saying like that served its

00:09:33,309 --> 00:09:38,439
request with our reating and let's see

00:09:35,170 --> 00:09:42,429
that the response is what we expect and

00:09:38,439 --> 00:09:44,249
it should fail because so we can

00:09:42,429 --> 00:09:48,069
everyone see that alright sort of yeah

00:09:44,249 --> 00:09:49,720
cool we expected some Jason back and we

00:09:48,069 --> 00:09:51,519
got get to slash did not match truce

00:09:49,720 --> 00:09:53,379
it's just like hard to fault when

00:09:51,519 --> 00:09:55,059
nothing matches it gives you this and

00:09:53,379 --> 00:10:00,040
that's because our request is just to

00:09:55,059 --> 00:10:05,379
slash so if we make that slash talks we

00:10:00,040 --> 00:10:08,139
should now have a green test cool so

00:10:05,379 --> 00:10:09,610
like we've we've actually kind of tested

00:10:08,139 --> 00:10:12,610
our routing and that it works it does

00:10:09,610 --> 00:10:14,769
what we expect we have not made an HTTP

00:10:12,610 --> 00:10:17,139
request here we've just passed a request

00:10:14,769 --> 00:10:21,100
object to our routing which knows how to

00:10:17,139 --> 00:10:22,689
like you tips and yeah I guess it's

00:10:21,100 --> 00:10:25,629
quite simple right there's not loads of

00:10:22,689 --> 00:10:29,049
dependencies and stuff but the same

00:10:25,629 --> 00:10:33,129
principle applies I guess we can talk

00:10:29,049 --> 00:10:39,040
about after so the next thing I want to

00:10:33,129 --> 00:10:40,839
show you is that is like the simple HTTP

00:10:39,040 --> 00:10:43,689
client so when I said you don't have to

00:10:40,839 --> 00:10:45,309
learn another API is let's imagine now

00:10:43,689 --> 00:10:47,290
that we're actually going to fetch our

00:10:45,309 --> 00:10:51,790
talks from another service like a torx

00:10:47,290 --> 00:10:54,749
service so we don't we don't have them

00:10:51,790 --> 00:10:57,749
we have to fetch the talks from

00:10:54,749 --> 00:10:57,749
somewhere

00:10:58,880 --> 00:11:04,610
so we want to write another test and

00:11:02,040 --> 00:11:08,010
it's basically going to be the same test

00:11:04,610 --> 00:11:09,870
so in order to serve so we're imagining

00:11:08,010 --> 00:11:14,209
we're going to make an HTTP request to

00:11:09,870 --> 00:11:14,209
another service that gives us some talks

00:11:14,269 --> 00:11:29,399
so we want to make a request to HTTP on

00:11:25,410 --> 00:11:37,019
some other port 3000 1/2 hooks this will

00:11:29,399 --> 00:11:39,600
be a get request in order to actually

00:11:37,019 --> 00:11:43,350
make this request go over the wire all

00:11:39,600 --> 00:11:48,620
I'm gonna say is wait I have to pass it

00:11:43,350 --> 00:11:53,670
to HTTP client didn't figure that out

00:11:48,620 --> 00:11:59,240
and then we're going to expect the same

00:11:53,670 --> 00:12:07,610
thing again the body string - all good

00:11:59,240 --> 00:12:07,610
very string to equal stringify

00:12:12,140 --> 00:12:18,079
ok cool so what I've done is I'm

00:12:16,050 --> 00:12:21,360
basically making the same request and

00:12:18,079 --> 00:12:23,370
all I do is pass it to HTTP client so

00:12:21,360 --> 00:12:25,430
it's just a function that takes requests

00:12:23,370 --> 00:12:28,890
it's the same talk in the same language

00:12:25,430 --> 00:12:30,270
it takes a request object and it this is

00:12:28,890 --> 00:12:32,880
probably the dummest class actually in

00:12:30,270 --> 00:12:34,950
the whole project it's like 30 lines it

00:12:32,880 --> 00:12:38,100
just passes it to note it knows what to

00:12:34,950 --> 00:12:39,180
do it's like but you're talking the same

00:12:38,100 --> 00:12:41,160
thing you're just saying here's a

00:12:39,180 --> 00:12:45,000
request pass it - and h2b client

00:12:41,160 --> 00:12:46,640
actually make the request over HTTP so

00:12:45,000 --> 00:12:52,160
it's pretty cool that's what was our

00:12:46,640 --> 00:12:52,160
failure it said ok doesn't compile

00:12:57,080 --> 00:13:01,760
right the reason that possibly it's

00:13:00,050 --> 00:13:10,399
because I think it is running already

00:13:01,760 --> 00:13:12,649
3001 let's change that I know it's not

00:13:10,399 --> 00:13:15,800
actually running this test ok connection

00:13:12,649 --> 00:13:19,310
refused ah like that doesn't exist all

00:13:15,800 --> 00:13:21,050
right so just to save like what you

00:13:19,310 --> 00:13:22,760
might want to do I don't know people

00:13:21,050 --> 00:13:25,100
generally do this but you'd like have a

00:13:22,760 --> 00:13:27,769
fake implementation of that service so

00:13:25,100 --> 00:13:35,470
that you could quickly unit test against

00:13:27,769 --> 00:13:38,149
it so we might have Const like fake tox

00:13:35,470 --> 00:13:41,959
service that we're talking to and that

00:13:38,149 --> 00:13:45,579
could be get to slash talks you know it

00:13:41,959 --> 00:13:45,579
serves occurs it's getting boring now

00:13:53,360 --> 00:14:00,410
but this needs to start oh no how do we

00:13:55,310 --> 00:14:03,020
start a server so like I said before

00:14:00,410 --> 00:14:05,750
where you can this is like the default

00:14:03,020 --> 00:14:08,690
parameter is you native server on 3000

00:14:05,750 --> 00:14:11,510
that you can you can pass in parameter

00:14:08,690 --> 00:14:13,550
actually you can you can I've already

00:14:11,510 --> 00:14:15,680
done implementations for Express and

00:14:13,550 --> 00:14:17,960
Khoa backends so if you wanted to have

00:14:15,680 --> 00:14:19,850
Express server running behind the scenes

00:14:17,960 --> 00:14:22,600
you could actually make a new Express

00:14:19,850 --> 00:14:26,270
server and run it on a port and then

00:14:22,600 --> 00:14:27,350
like there'd be two steps like all the

00:14:26,270 --> 00:14:29,240
requests would go through that and then

00:14:27,350 --> 00:14:32,930
it would come to me or come to HP for

00:14:29,240 --> 00:14:33,980
Jes rather okay so that's just so that

00:14:32,930 --> 00:14:35,750
you can like use your favorite

00:14:33,980 --> 00:14:38,210
middleware or if you want to migrate and

00:14:35,750 --> 00:14:39,710
an application from one to the other you

00:14:38,210 --> 00:14:44,630
might want to be in some kind of middle

00:14:39,710 --> 00:14:47,180
state between the two so that's so

00:14:44,630 --> 00:14:51,200
actually what's good practice is before

00:14:47,180 --> 00:14:53,660
and after to start and stop us over so

00:14:51,200 --> 00:14:58,360
we're gonna say fake talk service to

00:14:53,660 --> 00:14:58,360
start after

00:15:05,510 --> 00:15:12,010
and now if you run out he goes green hey

00:15:10,600 --> 00:15:20,089
cool

00:15:12,010 --> 00:15:22,190
say thanks lets me just trying to drum

00:15:20,089 --> 00:15:24,410
it up I don't know is that cool I think

00:15:22,190 --> 00:15:25,910
it's quite cool it's quite easy there's

00:15:24,410 --> 00:15:28,970
not much to do there's no much

00:15:25,910 --> 00:15:32,860
boilerplate there it's like two three

00:15:28,970 --> 00:15:32,860
lines of code to start stop servers and

00:15:32,920 --> 00:15:37,310
yeah and the fact that it's like the

00:15:35,329 --> 00:15:39,560
same interface here to actually go over

00:15:37,310 --> 00:15:41,180
the wideout to do much more so those are

00:15:39,560 --> 00:15:43,699
the main things it's kind of everything

00:15:41,180 --> 00:15:45,019
I wanted to show you except there's

00:15:43,699 --> 00:15:47,180
another there's something missing which

00:15:45,019 --> 00:15:48,980
is like a middleware so how do you do

00:15:47,180 --> 00:15:50,750
middleware and h2b for Jess I thought it

00:15:48,980 --> 00:15:56,420
might be quarters have a quick look at

00:15:50,750 --> 00:15:59,000
that so what what we might do is have

00:15:56,420 --> 00:16:06,380
like we want to have a custom 404 page

00:15:59,000 --> 00:16:08,660
that's quite common sort of use case so

00:16:06,380 --> 00:16:11,600
what we're going to do is very similar

00:16:08,660 --> 00:16:14,540
I'm just going to copy and paste that in

00:16:11,600 --> 00:16:17,329
this is another in memory test so we're

00:16:14,540 --> 00:16:21,529
gonna do a get to an unknown route and

00:16:17,329 --> 00:16:26,690
we expects it to equal our custom 404

00:16:21,529 --> 00:16:27,769
finish cool so this test should fail q

00:16:26,690 --> 00:16:28,760
time's running pressing the wrong

00:16:27,769 --> 00:16:32,149
shortcuts

00:16:28,760 --> 00:16:35,000
okay so we're seeing our actual we see

00:16:32,149 --> 00:16:36,800
that this is our default and we kind of

00:16:35,000 --> 00:16:39,260
want to say custom 404 page like we want

00:16:36,800 --> 00:16:42,290
to serve our cool like you know you

00:16:39,260 --> 00:16:45,680
didn't find our server thing so how

00:16:42,290 --> 00:16:49,579
would we do that so we're talking to

00:16:45,680 --> 00:16:53,750
reating at the moment it's just this one

00:16:49,579 --> 00:16:56,449
root we want to add so it's called

00:16:53,750 --> 00:16:58,610
filters filter is like the old school

00:16:56,449 --> 00:17:02,779
maybe like Java renamed for middleware

00:16:58,610 --> 00:17:05,380
and this is how it works so you have a

00:17:02,779 --> 00:17:05,380
handler

00:17:06,290 --> 00:17:12,329
so it's it's it's it's I don't talk much

00:17:10,260 --> 00:17:14,790
about the immutability like the

00:17:12,329 --> 00:17:16,799
immutability is that this this function

00:17:14,790 --> 00:17:18,780
has to be from request a response you

00:17:16,799 --> 00:17:21,000
can't not return a response you can't

00:17:18,780 --> 00:17:24,990
pass the response object around to other

00:17:21,000 --> 00:17:26,610
things and like therefore rely on other

00:17:24,990 --> 00:17:30,090
parts of your code to have seen it in a

00:17:26,610 --> 00:17:31,860
certain order you you have to return a

00:17:30,090 --> 00:17:35,340
response here you can't return foo

00:17:31,860 --> 00:17:36,830
string when it's the same like it

00:17:35,340 --> 00:17:45,540
becomes very clear when we write a

00:17:36,830 --> 00:17:47,970
middleware middleware filter now say so

00:17:45,540 --> 00:17:49,740
middleware like if you're writing what

00:17:47,970 --> 00:17:51,600
you do is you're writing a handler from

00:17:49,740 --> 00:17:55,350
request to response but it needs to be

00:17:51,600 --> 00:17:56,669
aware of the previous handler and it

00:17:55,350 --> 00:17:57,900
will become clear this is kind of how it

00:17:56,669 --> 00:18:00,990
this is exactly how you write middleware

00:17:57,900 --> 00:18:06,590
already so we're going to return a

00:18:00,990 --> 00:18:12,870
function async from a request

00:18:06,590 --> 00:18:15,540
yes import that and now we need to

00:18:12,870 --> 00:18:17,400
return response so request a response

00:18:15,540 --> 00:18:23,549
right and what we want to do is you want

00:18:17,400 --> 00:18:27,720
to say that the response equals me to a

00:18:23,549 --> 00:18:29,280
waiter so we await we passed a request

00:18:27,720 --> 00:18:30,900
to the next handler they might want to

00:18:29,280 --> 00:18:34,980
do something with it it passes down the

00:18:30,900 --> 00:18:39,559
chain then at this point we can say if

00:18:34,980 --> 00:18:42,570
the response status here's a for a for

00:18:39,559 --> 00:18:44,820
so but not we can now hiccup so we can

00:18:42,570 --> 00:18:46,290
hook into it on the way down by doing

00:18:44,820 --> 00:18:49,620
things with the request if we wanted to

00:18:46,290 --> 00:18:52,530
we could say like request with a header

00:18:49,620 --> 00:18:54,660
let's add a header you know so you can

00:18:52,530 --> 00:18:56,820
do things on the way down to the request

00:18:54,660 --> 00:18:58,500
and then at this point once you pass it

00:18:56,820 --> 00:19:00,059
to the next handler you're kind of

00:18:58,500 --> 00:19:02,669
you're you're messing around with the

00:19:00,059 --> 00:19:04,970
response on the way out so we're saying

00:19:02,669 --> 00:19:12,630
oh if the response happened to be a 404

00:19:04,970 --> 00:19:17,370
actually return a res of 404 custom 404

00:19:12,630 --> 00:19:18,010
page else okay it's not a 404 that's not

00:19:17,370 --> 00:19:21,960
mr.

00:19:18,010 --> 00:19:25,030
that let's just return let's return it

00:19:21,960 --> 00:19:27,670
okay so filter and knows about the

00:19:25,030 --> 00:19:29,230
previous handler we then have to write

00:19:27,670 --> 00:19:33,570
another handler which is a function from

00:19:29,230 --> 00:19:35,890
request to response we look at the

00:19:33,570 --> 00:19:38,080
response where we pass the request into

00:19:35,890 --> 00:19:40,990
the neck the next handler when it comes

00:19:38,080 --> 00:19:45,520
back out we say oh if it was a 404 like

00:19:40,990 --> 00:19:56,230
let's return our custom 404 page and if

00:19:45,520 --> 00:19:58,030
we rerun that test it passes a and it

00:19:56,230 --> 00:19:59,620
comes with some built-in ones so like

00:19:58,030 --> 00:20:01,630
there are some there are some already

00:19:59,620 --> 00:20:03,820
like useful generic filters that you

00:20:01,630 --> 00:20:05,350
might only use and stuff so yeah that's

00:20:03,820 --> 00:20:11,410
basically it if you want to check out

00:20:05,350 --> 00:20:13,590
more the docs are like fairly ok they're

00:20:11,410 --> 00:20:16,600
here on the github can link through and

00:20:13,590 --> 00:20:19,900
hopefully after about 20 minutes it like

00:20:16,600 --> 00:20:24,290
more stuff it's not too long it's not

00:20:19,900 --> 00:20:29,270
too short yeah cool thanks

00:20:24,290 --> 00:20:29,270

YouTube URL: https://www.youtube.com/watch?v=YwPSMI3cFRs


