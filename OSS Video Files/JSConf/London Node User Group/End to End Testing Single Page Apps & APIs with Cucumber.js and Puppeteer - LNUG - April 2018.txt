Title: End to End Testing Single Page Apps & APIs with Cucumber.js and Puppeteer - LNUG - April 2018
Publication date: 2018-05-01
Playlist: London Node User Group
Description: 
	End-to-end testing Single Page Apps and APIs with Cucumber.js & Puppeteer
Paul Jensen

Developing web applications as separate front end and back end parts is a common practice, but brings with it the challenge of how to test those parts together in an end-to-end fashion.

In this talk, I will show you a strategy for being able to test your web application with Cucumber.js and Puppeteer, a library for running Google Chrome in headless mode. We'll also explore how to handle things like seeding the database for the API before running tests, how to select elements in the DOM via Cucumber step definitions, and how to do this in a nice fashion using Node 8's async/await feature.

My name is Paul Jensen, I'm the author of Manning's Cross Platform Desktop Applications, and I'm the Lead Innovation Engineer at Starcount. My twitter handle is paulbjensen.
Captions: 
	00:00:00,000 --> 00:00:03,449
so in sync page reps are a really

00:00:01,979 --> 00:00:06,000
popular approach in terms of building

00:00:03,449 --> 00:00:08,519
applications you have one API it can

00:00:06,000 --> 00:00:11,460
serve a web app it can serve a mobile

00:00:08,519 --> 00:00:12,929
app it can serve a third party API it's

00:00:11,460 --> 00:00:15,509
kind of the dream but the route see is

00:00:12,929 --> 00:00:16,890
that tesam is not really simple because

00:00:15,509 --> 00:00:20,520
there's all these different components

00:00:16,890 --> 00:00:22,230
that you've got to get to test for an

00:00:20,520 --> 00:00:25,529
internet and test strategy you need the

00:00:22,230 --> 00:00:27,000
single page app needs the API that

00:00:25,529 --> 00:00:29,160
serves the single page app you need the

00:00:27,000 --> 00:00:30,720
databases that serve the API and you

00:00:29,160 --> 00:00:33,420
need the data in the databases for

00:00:30,720 --> 00:00:34,920
testing so an entering testing strategy

00:00:33,420 --> 00:00:37,890
needs to handle loading all of those

00:00:34,920 --> 00:00:39,960
components at the same time it needs to

00:00:37,890 --> 00:00:41,640
coordinate the setup and the teardown of

00:00:39,960 --> 00:00:44,670
the application state across the

00:00:41,640 --> 00:00:47,010
components for the tests and it needs to

00:00:44,670 --> 00:00:48,210
be flexible enough to accommodate for

00:00:47,010 --> 00:00:51,570
changes are going to happen to

00:00:48,210 --> 00:00:54,239
components over time this is one of the

00:00:51,570 --> 00:00:58,260
JavaScript fatigue images that I plucked

00:00:54,239 --> 00:00:59,399
off the internet and as as anyone does

00:00:58,260 --> 00:01:04,110
anyone recognize this one what's this

00:00:59,399 --> 00:01:06,540
one backbone it's ancient

00:01:04,110 --> 00:01:08,760
we've all done backbone in a previous

00:01:06,540 --> 00:01:10,530
life and required us to and they're all

00:01:08,760 --> 00:01:12,659
dead well they're still alive somewhere

00:01:10,530 --> 00:01:15,780
but anyway the point is I want to talk

00:01:12,659 --> 00:01:18,000
about a testing strategy and there are

00:01:15,780 --> 00:01:19,530
many different testing strategies it's

00:01:18,000 --> 00:01:21,180
like you know there's many ways to make

00:01:19,530 --> 00:01:23,070
an egg well unless you're a vegan but

00:01:21,180 --> 00:01:27,659
there's many different ways to approach

00:01:23,070 --> 00:01:30,240
this so strategy I had was two key

00:01:27,659 --> 00:01:32,220
technologies cucum jeaious and google

00:01:30,240 --> 00:01:34,610
chrome's puppeteer so i'm going to talk

00:01:32,220 --> 00:01:36,600
about cucumber here-here's use cucumber

00:01:34,610 --> 00:01:38,189
cool so has quite a few of you that have

00:01:36,600 --> 00:01:40,170
used it so I'm gonna give a quick

00:01:38,189 --> 00:01:43,619
run-through not cover every single thing

00:01:40,170 --> 00:01:45,210
just a kind of what it does so it's a

00:01:43,619 --> 00:01:46,920
behavior driven development tool that

00:01:45,210 --> 00:01:50,040
allows you to describe and applications

00:01:46,920 --> 00:01:53,040
features in an English language and then

00:01:50,040 --> 00:01:54,479
get that to power automated tests the

00:01:53,040 --> 00:01:56,520
description of the applications features

00:01:54,479 --> 00:01:58,259
run the tests and it becomes a safety

00:01:56,520 --> 00:02:01,409
net to catch bugs and prevent

00:01:58,259 --> 00:02:03,840
regressions and it also provides living

00:02:01,409 --> 00:02:05,820
documentation on how the app works to

00:02:03,840 --> 00:02:07,829
people that aren't developers who can

00:02:05,820 --> 00:02:09,979
read it and understand it and that's a

00:02:07,829 --> 00:02:12,330
key important feature of cucumber

00:02:09,979 --> 00:02:13,690
developers they come and they go from

00:02:12,330 --> 00:02:15,190
projects and companies

00:02:13,690 --> 00:02:17,980
and you really want something that

00:02:15,190 --> 00:02:19,900
someone can read it and go I'm not I can

00:02:17,980 --> 00:02:20,770
read the code but I'd rather just try

00:02:19,900 --> 00:02:22,690
and get sense of what it's doing

00:02:20,770 --> 00:02:25,360
elsewhere and that's what this

00:02:22,690 --> 00:02:28,630
documentation provides so cucumber is

00:02:25,360 --> 00:02:30,580
some steps step one installing it you

00:02:28,630 --> 00:02:32,770
can install it just like that past the

00:02:30,580 --> 00:02:34,180
capitalize D is a development dependency

00:02:32,770 --> 00:02:35,440
step 2

00:02:34,180 --> 00:02:38,140
create a folder in your app called

00:02:35,440 --> 00:02:40,390
features and we will put cucumber

00:02:38,140 --> 00:02:43,240
related features files and folders in

00:02:40,390 --> 00:02:44,320
there here and then step 3 meet with

00:02:43,240 --> 00:02:46,120
your product owner and talk about

00:02:44,320 --> 00:02:48,120
feature you want to implement and then

00:02:46,120 --> 00:02:51,910
you know talk about that perspective of

00:02:48,120 --> 00:02:54,100
the user using the feature what would

00:02:51,910 --> 00:02:56,860
they do how would they interact with the

00:02:54,100 --> 00:02:59,560
application and write down some notes or

00:02:56,860 --> 00:03:01,420
put it on a whiteboard whatever process

00:02:59,560 --> 00:03:03,760
works for you and then once you've got

00:03:01,420 --> 00:03:05,560
those notes you want to turn it into a

00:03:03,760 --> 00:03:08,920
feature file so say we've got a feature

00:03:05,560 --> 00:03:10,930
called delete user dot feature what you

00:03:08,920 --> 00:03:13,180
have here is you give the name the

00:03:10,930 --> 00:03:15,460
feature you describe a big business

00:03:13,180 --> 00:03:17,980
frame that's going to accommodate who

00:03:15,460 --> 00:03:20,260
you are that's doing this and what you

00:03:17,980 --> 00:03:22,000
want to do as an action and then in the

00:03:20,260 --> 00:03:24,730
scenario you then list out all the

00:03:22,000 --> 00:03:27,220
different steps in a given when then

00:03:24,730 --> 00:03:29,860
format which is for gherkin syntax

00:03:27,220 --> 00:03:31,600
pausing so here's a good example that's

00:03:29,860 --> 00:03:34,480
quite pertinent gdpr

00:03:31,600 --> 00:03:36,130
is exactly one month from now so imagine

00:03:34,480 --> 00:03:38,290
you've got a scenario where you've got

00:03:36,130 --> 00:03:40,180
to implement deleting a user's data for

00:03:38,290 --> 00:03:43,180
a data compliance officer you might

00:03:40,180 --> 00:03:44,950
describe it as this and you sort of try

00:03:43,180 --> 00:03:47,110
and describe it in as much English

00:03:44,950 --> 00:03:48,550
language as possible you really don't

00:03:47,110 --> 00:03:50,230
want to computerize it too much you want

00:03:48,550 --> 00:03:52,300
to make sure that this is something that

00:03:50,230 --> 00:03:55,900
they engage with they understand and it

00:03:52,300 --> 00:03:57,010
makes sense and then step 5 once we have

00:03:55,900 --> 00:03:58,720
a feature file like that and we've saved

00:03:57,010 --> 00:04:01,390
it in the features folder you can just

00:03:58,720 --> 00:04:03,880
run npx cucumber jeaious run and save

00:04:01,390 --> 00:04:06,220
running no modules being cucumber da da

00:04:03,880 --> 00:04:09,100
da you can just do that and what it will

00:04:06,220 --> 00:04:11,160
do is it will scan for files and

00:04:09,100 --> 00:04:14,530
features folder that have a dot feature

00:04:11,160 --> 00:04:17,500
extension it will execute them and then

00:04:14,530 --> 00:04:18,880
it will print out results what it will

00:04:17,500 --> 00:04:21,280
do is it will go step by step by step

00:04:18,880 --> 00:04:24,039
through your scenarios trying to find

00:04:21,280 --> 00:04:26,200
out what the English language is it will

00:04:24,039 --> 00:04:26,960
then scan your step definition files to

00:04:26,200 --> 00:04:28,910
see if it matches

00:04:26,960 --> 00:04:31,819
with this particular one given I'm an

00:04:28,910 --> 00:04:33,860
admin if it doesn't what it will do is

00:04:31,819 --> 00:04:36,440
will say I couldn't find it here's some

00:04:33,860 --> 00:04:38,449
code stick it in a particular file in

00:04:36,440 --> 00:04:39,560
the features folder and I'll be able to

00:04:38,449 --> 00:04:41,270
pick that up I don't know if you're

00:04:39,560 --> 00:04:43,400
testing a web app or even an API free

00:04:41,270 --> 00:04:45,289
cucumber all I know is that you've

00:04:43,400 --> 00:04:48,259
written this line saying I am an admin

00:04:45,289 --> 00:04:49,930
and you might want to you know set up

00:04:48,259 --> 00:04:52,280
some data in the database for example

00:04:49,930 --> 00:04:56,210
and then what you can do is you can also

00:04:52,280 --> 00:04:57,199
put quotes in the text and it will

00:04:56,210 --> 00:04:58,610
actually parse them out and turn them

00:04:57,199 --> 00:05:01,520
into variables and also deal with

00:04:58,610 --> 00:05:03,919
numbers too so here's an example the

00:05:01,520 --> 00:05:07,039
user should no longer have any data in

00:05:03,919 --> 00:05:10,190
the system the user quite sam is then

00:05:07,039 --> 00:05:13,699
this string here and the idea with that

00:05:10,190 --> 00:05:15,650
is that we can then put references in

00:05:13,699 --> 00:05:17,840
our cucumber feature files that we can

00:05:15,650 --> 00:05:20,000
then pluck out and pass down into the

00:05:17,840 --> 00:05:22,430
JavaScript here step 6

00:05:20,000 --> 00:05:25,190
Kress step definitions folder inside the

00:05:22,430 --> 00:05:28,280
features folder you then create a common

00:05:25,190 --> 00:05:30,590
steps yes as an example I put in step

00:05:28,280 --> 00:05:32,180
definitions and then that JavaScript

00:05:30,590 --> 00:05:34,159
that you saw earlier just slot it in

00:05:32,180 --> 00:05:37,159
there and cucumber automatically pick it

00:05:34,159 --> 00:05:38,330
up and then you can start to write code

00:05:37,159 --> 00:05:39,440
for your step definitions that does

00:05:38,330 --> 00:05:41,419
things like you know clicking a button

00:05:39,440 --> 00:05:44,570
in a web app checking that the user is

00:05:41,419 --> 00:05:45,830
logged in querying the database making

00:05:44,570 --> 00:05:47,810
sure that there's a user in the system

00:05:45,830 --> 00:05:49,550
for example and then you go through red

00:05:47,810 --> 00:05:52,039
green for refactoring so at first

00:05:49,550 --> 00:05:53,810
everything's going to fail because you

00:05:52,039 --> 00:05:55,280
don't bring the application code and

00:05:53,810 --> 00:05:58,070
then you write the application code and

00:05:55,280 --> 00:05:59,960
then it passes and then you've got your

00:05:58,070 --> 00:06:03,500
safety net and now you can change it you

00:05:59,960 --> 00:06:05,630
can do refactoring you have that as an

00:06:03,500 --> 00:06:09,199
option now I'm gonna talk about

00:06:05,630 --> 00:06:10,789
puppeteer top tier is a know Jeff's

00:06:09,199 --> 00:06:13,159
library that provides a high level API

00:06:10,789 --> 00:06:14,960
for controlling Google Chrome or in the

00:06:13,159 --> 00:06:18,409
case of Linux chromium by the dev tools

00:06:14,960 --> 00:06:20,090
protocol it can run the web browser in

00:06:18,409 --> 00:06:21,380
either full mode with application

00:06:20,090 --> 00:06:23,509
browser windows popping up in front of

00:06:21,380 --> 00:06:25,490
your face or in headless mode if you're

00:06:23,509 --> 00:06:27,110
running it on a server so there's no

00:06:25,490 --> 00:06:29,360
browser windows rendered and you won't

00:06:27,110 --> 00:06:31,580
need to pass any of the funny Linux sort

00:06:29,360 --> 00:06:33,469
of xcf don't run a graphical user

00:06:31,580 --> 00:06:35,740
environment to render windows at all

00:06:33,469 --> 00:06:37,940
it's it just works seamlessly

00:06:35,740 --> 00:06:38,839
you can use this to do all sorts of

00:06:37,940 --> 00:06:40,580
things you can use it to take

00:06:38,839 --> 00:06:42,020
screenshots of web sites

00:06:40,580 --> 00:06:45,229
you can create PDF files from webpages

00:06:42,020 --> 00:06:46,879
is much better than wk HTML to PDF for

00:06:45,229 --> 00:06:48,620
doing that you can crawl a single page

00:06:46,879 --> 00:06:50,479
app and generate pre-rendered content

00:06:48,620 --> 00:06:51,949
maybe you're trying to build a ticket

00:06:50,479 --> 00:06:54,169
search engine and you notice that

00:06:51,949 --> 00:06:55,819
Ticketmaster and Vargo go also put all

00:06:54,169 --> 00:06:58,340
their listings about JavaScript rather

00:06:55,819 --> 00:07:00,409
than in the actual HTML because they're

00:06:58,340 --> 00:07:01,580
stopping people like yourselves that's

00:07:00,409 --> 00:07:04,699
one strategy you can have to work around

00:07:01,580 --> 00:07:08,030
that you can power web spiders that fill

00:07:04,699 --> 00:07:10,099
in forms automatically and you can get a

00:07:08,030 --> 00:07:11,840
timeline trace of a website loading you

00:07:10,099 --> 00:07:13,400
know when you're looking dev tools and

00:07:11,840 --> 00:07:15,169
chrome and your sort analyzing your site

00:07:13,400 --> 00:07:17,000
you can pull that data through puppeteer

00:07:15,169 --> 00:07:19,580
and automate the process which is really

00:07:17,000 --> 00:07:21,620
really cool so anyway you can install it

00:07:19,580 --> 00:07:22,789
just like this NPM ID puppeteer

00:07:21,620 --> 00:07:26,210
what it will do is it will download

00:07:22,789 --> 00:07:28,909
google chrome or chromium and it will

00:07:26,210 --> 00:07:30,409
download a version that works with the

00:07:28,909 --> 00:07:31,849
library and works on your operating

00:07:30,409 --> 00:07:33,889
system as well it's clever enough to

00:07:31,849 --> 00:07:35,090
know those details so then it's a much

00:07:33,889 --> 00:07:36,440
simpler experience and if you try and

00:07:35,090 --> 00:07:37,669
set up selenium where you've got to have

00:07:36,440 --> 00:07:39,680
the right version of Java you're gonna

00:07:37,669 --> 00:07:41,810
have the jar file you've got to tell the

00:07:39,680 --> 00:07:44,690
library that's connecting selenium to

00:07:41,810 --> 00:07:47,210
your browser where everything lives this

00:07:44,690 --> 00:07:48,620
is just much simpler so here's a quick

00:07:47,210 --> 00:07:51,729
sample

00:07:48,620 --> 00:07:55,610
you've got pops here required puppeteer

00:07:51,729 --> 00:07:58,759
you say in async/await mode you go away

00:07:55,610 --> 00:08:02,270
puppeteer dot launch which boots it up

00:07:58,759 --> 00:08:04,069
page weight browser dot new page loads

00:08:02,270 --> 00:08:06,949
up a new page and then you can say go to

00:08:04,069 --> 00:08:09,500
this URL and then take a screenshot and

00:08:06,949 --> 00:08:12,289
save it example dot PNG and then close

00:08:09,500 --> 00:08:13,520
I'm done and that's a nice simple

00:08:12,289 --> 00:08:14,870
example that's literally gone to a

00:08:13,520 --> 00:08:18,319
website taking a screenshot and then

00:08:14,870 --> 00:08:20,750
shut itself down but you can use it as

00:08:18,319 --> 00:08:23,029
part of your testing strategy and it can

00:08:20,750 --> 00:08:25,849
be used inside integration services like

00:08:23,029 --> 00:08:27,560
circle CI I haven't tried Travis yet so

00:08:25,849 --> 00:08:30,020
I can't guarantee whether it works or

00:08:27,560 --> 00:08:32,449
not might do but you can even use it in

00:08:30,020 --> 00:08:34,250
name AWS lambda functions anywhere so

00:08:32,449 --> 00:08:36,380
lambda functions have like a 50 mega m't

00:08:34,250 --> 00:08:37,399
it turns out you can build an image with

00:08:36,380 --> 00:08:41,089
docker

00:08:37,399 --> 00:08:43,279
with properties of dependencies that it

00:08:41,089 --> 00:08:45,370
needs and then you can serve that to

00:08:43,279 --> 00:08:47,779
lambda which is really really cool

00:08:45,370 --> 00:08:50,540
so making cucumber juice and puppeteer

00:08:47,779 --> 00:08:51,770
work together the way I see it it's

00:08:50,540 --> 00:08:53,270
quite ironic that puppet is called

00:08:51,770 --> 00:08:55,390
puppeteer because in this case the way I

00:08:53,270 --> 00:08:58,700
used it was more like

00:08:55,390 --> 00:09:01,160
this cucumber is actually going to

00:08:58,700 --> 00:09:03,410
control puppeteer it's going to handle

00:09:01,160 --> 00:09:06,700
telling it what to do so properties that

00:09:03,410 --> 00:09:08,840
have been puppet masters anyway so

00:09:06,700 --> 00:09:11,270
puppeteer is loaded into cucumbers well

00:09:08,840 --> 00:09:13,310
Jess file which is a file which contains

00:09:11,270 --> 00:09:16,250
a global context that's passed to all

00:09:13,310 --> 00:09:18,260
the step definition files and then that

00:09:16,250 --> 00:09:19,640
lives inside the features folder and it

00:09:18,260 --> 00:09:22,490
gets all loaded automatically when you

00:09:19,640 --> 00:09:24,320
run a cucumber so here's an example here

00:09:22,490 --> 00:09:27,290
of the world yes file that I'm useful an

00:09:24,320 --> 00:09:30,470
app so the bit of interest here

00:09:27,290 --> 00:09:33,980
puppeteer is required here I basically

00:09:30,470 --> 00:09:36,080
just put it here and then that driver is

00:09:33,980 --> 00:09:38,150
accessible in my step definition files

00:09:36,080 --> 00:09:40,160
so I don't have to try and require it in

00:09:38,150 --> 00:09:42,680
my common steps in different places it's

00:09:40,160 --> 00:09:44,420
just there and I have a few other things

00:09:42,680 --> 00:09:46,820
going on there which I will talk about a

00:09:44,420 --> 00:09:48,770
bit later and then here is where

00:09:46,820 --> 00:09:50,260
cucumber does some other stuff to make

00:09:48,770 --> 00:09:53,690
sure that the world gets injected into

00:09:50,260 --> 00:09:54,920
step definitions so how do we do the

00:09:53,690 --> 00:09:56,510
setup and teardown we're both the single

00:09:54,920 --> 00:09:57,410
page wrap in the API which is an

00:09:56,510 --> 00:09:59,839
interesting question because you've got

00:09:57,410 --> 00:10:01,850
to combine them so the case example here

00:09:59,839 --> 00:10:03,680
is the dashboard app I built many years

00:10:01,850 --> 00:10:06,890
ago and I'm now reinventing from scratch

00:10:03,680 --> 00:10:09,380
called - key first version was built

00:10:06,890 --> 00:10:10,670
back in 2012 as a real-time web app with

00:10:09,380 --> 00:10:14,360
a framework called socket stream which I

00:10:10,670 --> 00:10:17,360
no longer maintain the new version is

00:10:14,360 --> 00:10:19,550
being built as a single page app and an

00:10:17,360 --> 00:10:22,970
API react on the front-end

00:10:19,550 --> 00:10:24,620
Express Redis on the backend and

00:10:22,970 --> 00:10:26,540
this time I wanted to use develop it

00:10:24,620 --> 00:10:29,210
with behavior driven development from

00:10:26,540 --> 00:10:30,920
scratch so you got the backhand repo

00:10:29,210 --> 00:10:33,620
this is API the front-end repos

00:10:30,920 --> 00:10:34,910
- cute web so then I decided what I'm

00:10:33,620 --> 00:10:37,010
gonna do is I'm gonna put the tests in a

00:10:34,910 --> 00:10:41,210
separate repo called - queue integration

00:10:37,010 --> 00:10:45,860
and then what I was going to do was have

00:10:41,210 --> 00:10:48,020
the database API data here front-end web

00:10:45,860 --> 00:10:50,839
app here you come tested puppeteer here

00:10:48,020 --> 00:10:53,900
at the top all nicely contained in sort

00:10:50,839 --> 00:10:55,730
of their own domain and what I then

00:10:53,900 --> 00:10:59,120
realized is well if I'm going to do this

00:10:55,730 --> 00:11:01,130
I've got to find a way to get this to

00:10:59,120 --> 00:11:02,990
happen where the API on the web can be

00:11:01,130 --> 00:11:07,040
accessed by the - go integration

00:11:02,990 --> 00:11:08,150
repository and to do that there's a

00:11:07,040 --> 00:11:09,290
number of options

00:11:08,150 --> 00:11:11,660
you can consider you could go down the

00:11:09,290 --> 00:11:13,220
river get sub-modules you could go down

00:11:11,660 --> 00:11:15,800
the route of docker compose with docker

00:11:13,220 --> 00:11:18,800
images but the strategy that I found

00:11:15,800 --> 00:11:21,590
that worked was NPM so it turns out NPM

00:11:18,800 --> 00:11:22,850
is not just a package manager you can

00:11:21,590 --> 00:11:24,170
use it to stitch together a couple of

00:11:22,850 --> 00:11:26,090
dependencies in order to achieve a large

00:11:24,170 --> 00:11:28,160
goal you can coordinator setup and

00:11:26,090 --> 00:11:29,780
teardown between those components and

00:11:28,160 --> 00:11:33,140
I'm going to show you the package.json

00:11:29,780 --> 00:11:34,580
for the - to integration repo so there's

00:11:33,140 --> 00:11:36,410
a lot here to digest but I'm just going

00:11:34,580 --> 00:11:39,040
to bring your attention to this bit here

00:11:36,410 --> 00:11:42,530
there's like four dependencies in the

00:11:39,040 --> 00:11:45,530
entire integration test suite cucumber

00:11:42,530 --> 00:11:48,350
pop tier and then the API and the web

00:11:45,530 --> 00:11:49,670
which are private repos and the beauty

00:11:48,350 --> 00:11:51,380
of this is I'm requirements known

00:11:49,670 --> 00:11:55,250
modules and because I'm doing that it

00:11:51,380 --> 00:11:57,710
means that I can actually point local

00:11:55,250 --> 00:11:59,750
copies of the webinar repos to my local

00:11:57,710 --> 00:12:02,870
machine with NPM link and that means

00:11:59,750 --> 00:12:04,580
that I don't have to have a scenario

00:12:02,870 --> 00:12:06,440
where I can't test a certain component I

00:12:04,580 --> 00:12:09,380
can have all those components loaded in

00:12:06,440 --> 00:12:11,090
one place so now when I create a new

00:12:09,380 --> 00:12:12,710
product feature I can write the tests in

00:12:11,090 --> 00:12:14,000
cucumber I can then implement the

00:12:12,710 --> 00:12:15,800
feature in the single page app and then

00:12:14,000 --> 00:12:18,080
implement it in the API when I need to

00:12:15,800 --> 00:12:20,390
drop down to that level and then when I

00:12:18,080 --> 00:12:22,520
need to run the tests I call I can

00:12:20,390 --> 00:12:24,860
coordinate the setup of all of those

00:12:22,520 --> 00:12:26,990
things in one place and just to show you

00:12:24,860 --> 00:12:30,590
what I mean by that so here in that same

00:12:26,990 --> 00:12:33,950
package JSON file there's a script

00:12:30,590 --> 00:12:36,140
section so when I want to run the cucum

00:12:33,950 --> 00:12:39,460
tests before I do that I have this step

00:12:36,140 --> 00:12:43,390
called pretest and pretest we'll use NPM

00:12:39,460 --> 00:12:46,370
Explorer command to go down into my web

00:12:43,390 --> 00:12:49,520
repo and say can you run NPM run build

00:12:46,370 --> 00:12:51,290
but also run it with the node em set to

00:12:49,520 --> 00:12:54,470
test so you load the test configuration

00:12:51,290 --> 00:12:56,660
and then it goes and does that so my

00:12:54,470 --> 00:12:59,660
local copies got it built pointing to

00:12:56,660 --> 00:13:02,780
the test API and what that endpoint is

00:12:59,660 --> 00:13:05,360
test then run and then after I do that

00:13:02,780 --> 00:13:06,830
post test I just pretty much run the

00:13:05,360 --> 00:13:08,720
same command as pretest I just don't

00:13:06,830 --> 00:13:09,980
have no data because test I say no

00:13:08,720 --> 00:13:11,300
development I just want to get back to

00:13:09,980 --> 00:13:13,940
how it was so I could just continue

00:13:11,300 --> 00:13:15,800
coding and that's really nice I've just

00:13:13,940 --> 00:13:18,050
orchestrated a couple of things running

00:13:15,800 --> 00:13:20,610
together there and then so how does

00:13:18,050 --> 00:13:22,649
cucumber start up the webinar repos

00:13:20,610 --> 00:13:24,089
while I use indexed Oh Jess in both of

00:13:22,649 --> 00:13:26,250
the repos and they contain all the

00:13:24,089 --> 00:13:28,680
loading up code so here's an example for

00:13:26,250 --> 00:13:30,899
the front end it's really simple as just

00:13:28,680 --> 00:13:34,140
Express which is wrapped by HTTP

00:13:30,899 --> 00:13:35,930
shutdown which allows me to then close

00:13:34,140 --> 00:13:38,430
it programmatically after I finished

00:13:35,930 --> 00:13:43,019
it's just literally serving up a static

00:13:38,430 --> 00:13:44,399
folder and then it's setting a host

00:13:43,019 --> 00:13:46,320
which I need to reference in the

00:13:44,399 --> 00:13:48,209
cucumber steps to be able to work out

00:13:46,320 --> 00:13:51,600
what your are need to load in pop tier

00:13:48,209 --> 00:13:54,720
and then exporting the server again the

00:13:51,600 --> 00:13:57,300
API repo a little bit more but similar

00:13:54,720 --> 00:14:01,170
approach Express HTTP shutdown wrapping

00:13:57,300 --> 00:14:04,350
it and then again an endpoint to point

00:14:01,170 --> 00:14:06,240
to for cucumber to pickup and then I

00:14:04,350 --> 00:14:09,209
load these in the world Jess file from

00:14:06,240 --> 00:14:11,700
earlier so if you look up here if you

00:14:09,209 --> 00:14:13,829
look up here at the very top constant

00:14:11,700 --> 00:14:16,589
API constant web those are actually

00:14:13,829 --> 00:14:19,320
loading them programmatically I don't

00:14:16,589 --> 00:14:22,110
need to do anything more that's it they

00:14:19,320 --> 00:14:23,970
just handle themselves and then when I

00:14:22,110 --> 00:14:27,120
don't need to do anything with them to

00:14:23,970 --> 00:14:29,250
access anymore I can scope them here and

00:14:27,120 --> 00:14:32,850
later and we'll see an example of me

00:14:29,250 --> 00:14:35,910
shutting down later it's a management

00:14:32,850 --> 00:14:39,060
data in the databases - who uses MongoDB

00:14:35,910 --> 00:14:42,209
and Mongoose but I am considering

00:14:39,060 --> 00:14:44,640
PostgreSQL with a ORM called objection -

00:14:42,209 --> 00:14:47,310
which is node async/await compliant and

00:14:44,640 --> 00:14:48,899
has a fantastic graph QL plug-in you can

00:14:47,310 --> 00:14:50,790
literally add a whole graph Q FBI in

00:14:48,899 --> 00:14:54,209
about three or four lines of code it's

00:14:50,790 --> 00:14:56,490
really really good but remember as I

00:14:54,209 --> 00:14:58,320
said before whatever you doing in terms

00:14:56,490 --> 00:14:59,579
of n to n tests you need to be able to

00:14:58,320 --> 00:15:01,620
handle changes to those components over

00:14:59,579 --> 00:15:03,690
time so I might be crazy enough to think

00:15:01,620 --> 00:15:05,550
of rewriting the database part but

00:15:03,690 --> 00:15:08,279
hopefully the test suites there to catch

00:15:05,550 --> 00:15:10,079
me and tell me how I'm not so him but

00:15:08,279 --> 00:15:11,850
anyway so I was looking at this and

00:15:10,079 --> 00:15:14,279
going ok so - the integration needs to

00:15:11,850 --> 00:15:16,589
talk to the API needs to put data into

00:15:14,279 --> 00:15:19,110
the database in some way how do I do it

00:15:16,589 --> 00:15:20,910
and the way I figured it out was well

00:15:19,110 --> 00:15:24,420
I'm already doing it with the node

00:15:20,910 --> 00:15:28,380
modules in the hoaxers file which gets

00:15:24,420 --> 00:15:30,990
automatically loaded by cucumber there's

00:15:28,380 --> 00:15:32,550
a bit of code here and a very top so

00:15:30,990 --> 00:15:34,470
here I'm actually able to just go

00:15:32,550 --> 00:15:36,030
require API for slash models

00:15:34,470 --> 00:15:38,070
all the mungus models are there I'm not

00:15:36,030 --> 00:15:39,840
having to have Mongoose knowledge living

00:15:38,070 --> 00:15:40,920
somewhere else that reference the config

00:15:39,840 --> 00:15:42,900
or anything that it's all just in one

00:15:40,920 --> 00:15:46,080
place it's all there in the API so just

00:15:42,900 --> 00:15:48,120
load it up Natalie nice when I need to

00:15:46,080 --> 00:15:49,500
do some cleanup before any tests run so

00:15:48,120 --> 00:15:51,990
that everything's in a nice clean State

00:15:49,500 --> 00:15:54,630
I just caught async/await

00:15:51,990 --> 00:15:55,590
user remove now I might be able to run

00:15:54,630 --> 00:15:59,390
those in parallel that's one

00:15:55,590 --> 00:16:01,710
optimization I can make and then

00:15:59,390 --> 00:16:03,240
afterwards I did actually notice that

00:16:01,710 --> 00:16:05,100
I've got a bit of space up there before

00:16:03,240 --> 00:16:09,510
Mongoose but I will correct that

00:16:05,100 --> 00:16:11,640
afterwards anyway so nitpicking so and

00:16:09,510 --> 00:16:15,390
then also AB interest just on a side

00:16:11,640 --> 00:16:18,690
note afterwards scoped up browser was

00:16:15,390 --> 00:16:20,790
puppeteer in puppeteer I'm like setting

00:16:18,690 --> 00:16:22,590
a current page context if there's any

00:16:20,790 --> 00:16:24,480
cookies I'm gonna wipe them because I

00:16:22,590 --> 00:16:25,560
want it to be like fresh page I'm not

00:16:24,480 --> 00:16:27,510
closing the browser down I'm just

00:16:25,560 --> 00:16:29,430
literally saying we're gonna wipe your

00:16:27,510 --> 00:16:31,140
browser's memory so it's still up and

00:16:29,430 --> 00:16:32,880
launched I don't have to shut it down

00:16:31,140 --> 00:16:34,110
and launch it again I can just open up a

00:16:32,880 --> 00:16:36,450
new browser window and it'll be like hey

00:16:34,110 --> 00:16:38,910
I'm new and that's how it works and then

00:16:36,450 --> 00:16:40,920
here is where hey should be shut down

00:16:38,910 --> 00:16:43,590
allows me to go scope the API or shut

00:16:40,920 --> 00:16:46,260
down so this is gonna shut down web shut

00:16:43,590 --> 00:16:48,210
down shut down disconnect Mongoose and

00:16:46,260 --> 00:16:50,250
Redis so that there's no more process

00:16:48,210 --> 00:16:52,230
listeners and that way cucumber exits

00:16:50,250 --> 00:16:55,290
nicely and is like yeah everything's

00:16:52,230 --> 00:16:58,290
turned off I'm good to shutdown

00:16:55,290 --> 00:16:59,940
so that's Jeff's file in terms of

00:16:58,290 --> 00:17:01,970
seeding data the way that happens is

00:16:59,940 --> 00:17:04,830
part of the cucumber feature scenarios

00:17:01,970 --> 00:17:07,350
so here's an example where a given a bad

00:17:04,830 --> 00:17:08,640
user pub Jason already exists it matches

00:17:07,350 --> 00:17:10,650
this step definition and then what I

00:17:08,640 --> 00:17:12,870
actually do is I put my step definition

00:17:10,650 --> 00:17:15,120
code into little functions the reason I

00:17:12,870 --> 00:17:16,680
do that is because then it's really nice

00:17:15,120 --> 00:17:19,080
and clean to just write a couple of

00:17:16,680 --> 00:17:22,170
lines code here which later on I can

00:17:19,080 --> 00:17:24,900
repurpose in other ways and to give an

00:17:22,170 --> 00:17:27,030
example just to show you this is my step

00:17:24,900 --> 00:17:28,860
definitions file and it's all just

00:17:27,030 --> 00:17:30,660
little functions that are automatically

00:17:28,860 --> 00:17:33,210
readable right next to the actual step

00:17:30,660 --> 00:17:35,280
lines from cucumbers sort of saying how

00:17:33,210 --> 00:17:36,690
you need this and I just have it here

00:17:35,280 --> 00:17:39,570
and it's really nice and simple to read

00:17:36,690 --> 00:17:41,610
and that's really nice the other benefit

00:17:39,570 --> 00:17:43,260
is that you can use nodes async/await to

00:17:41,610 --> 00:17:46,080
combine step definitions for a single

00:17:43,260 --> 00:17:47,520
step so the reason for doing this is say

00:17:46,080 --> 00:17:49,830
you've got

00:17:47,520 --> 00:17:52,830
a cucumber scenarios login with an email

00:17:49,830 --> 00:17:54,540
address there's about there's eight

00:17:52,830 --> 00:17:56,220
steps there but there's seven that I'm

00:17:54,540 --> 00:18:01,710
interested in from the second line down

00:17:56,220 --> 00:18:04,280
and if you are doing any sort of testing

00:18:01,710 --> 00:18:06,180
you wanted to test from the very start

00:18:04,280 --> 00:18:10,010
each of those steps has its own

00:18:06,180 --> 00:18:12,330
dedicated step function if I wanted to

00:18:10,010 --> 00:18:13,710
repurpose that in every scenario you've

00:18:12,330 --> 00:18:15,420
got to repeat those seven lines every

00:18:13,710 --> 00:18:20,040
single snare and that just gets really

00:18:15,420 --> 00:18:24,210
really verbose I would say that and make

00:18:20,040 --> 00:18:25,830
those feature files cumbersome I've got

00:18:24,210 --> 00:18:28,110
a panda at work for this very reason I

00:18:25,830 --> 00:18:29,610
just have a bad habit but anyway instead

00:18:28,110 --> 00:18:32,670
what we can do is we can dry up our

00:18:29,610 --> 00:18:34,350
cucumber scenarios so what we can do is

00:18:32,670 --> 00:18:37,230
we can use async/await

00:18:34,350 --> 00:18:40,920
to basically combine them so here you've

00:18:37,230 --> 00:18:43,440
got these seven particular steps to log

00:18:40,920 --> 00:18:45,750
in as a user what I can do is I can just

00:18:43,440 --> 00:18:48,240
go and I log in and I just leave it at

00:18:45,750 --> 00:18:50,460
that it's kind of a assumes that I'm

00:18:48,240 --> 00:18:54,390
logging in as person and then what I do

00:18:50,460 --> 00:18:57,059
is and I log in looks at this particular

00:18:54,390 --> 00:18:58,170
step definition here and here is a

00:18:57,059 --> 00:18:59,940
combination about seven different

00:18:58,170 --> 00:19:03,390
actions that are all cute together

00:18:59,940 --> 00:19:05,250
through they sink away and they will run

00:19:03,390 --> 00:19:06,600
and they do the whole login process and

00:19:05,250 --> 00:19:08,850
I've just been able to express that in

00:19:06,600 --> 00:19:10,530
one line in the queue can fall if you

00:19:08,850 --> 00:19:13,020
actually notice the pattern here a visit

00:19:10,530 --> 00:19:15,480
homepage coconut and go to page it

00:19:13,020 --> 00:19:18,059
marries with what's actually happening

00:19:15,480 --> 00:19:20,460
there in the top three or four lines of

00:19:18,059 --> 00:19:23,100
the cucumber future scenario it's

00:19:20,460 --> 00:19:24,480
literally just a mirror copy but because

00:19:23,100 --> 00:19:26,790
of that I can just express it as one

00:19:24,480 --> 00:19:28,770
line and that makes the cucumber feature

00:19:26,790 --> 00:19:30,720
files less verbose that's the best way

00:19:28,770 --> 00:19:33,300
to keep everyone engaging with them as

00:19:30,720 --> 00:19:34,679
they start to write them and test the

00:19:33,300 --> 00:19:37,230
app and then people have to read them

00:19:34,679 --> 00:19:38,429
and say okay this still makes sense so

00:19:37,230 --> 00:19:40,410
anyway in terms of selecting elements

00:19:38,429 --> 00:19:42,570
and page to click fill in and check that

00:19:40,410 --> 00:19:46,350
there you can use CSS selectors and

00:19:42,570 --> 00:19:47,820
puppeteer to do that I have a nice large

00:19:46,350 --> 00:19:48,660
list of CSS selectors I'll show you in a

00:19:47,820 --> 00:19:51,179
bit

00:19:48,660 --> 00:19:53,850
which is just nesting an object tree in

00:19:51,179 --> 00:19:55,230
terms of XPath support puppeteer doesn't

00:19:53,850 --> 00:19:57,179
have it just yet but they're actually

00:19:55,230 --> 00:19:58,980
introducing it in the next release which

00:19:57,179 --> 00:20:00,179
is just three weeks away which is great

00:19:58,980 --> 00:20:00,730
because it means you get to do some more

00:20:00,179 --> 00:20:01,960
powerful

00:20:00,730 --> 00:20:03,429
elections where you can actually look at

00:20:01,960 --> 00:20:06,040
an element so I want to select based on

00:20:03,429 --> 00:20:08,200
fact there's got some inline text saying

00:20:06,040 --> 00:20:09,790
a particular phrase which is much better

00:20:08,200 --> 00:20:13,030
than I have to remember what CSS

00:20:09,790 --> 00:20:15,940
selector it was and here's an example

00:20:13,030 --> 00:20:19,000
here so the selectors is a big object

00:20:15,940 --> 00:20:21,130
versus selectors links dot signup or

00:20:19,000 --> 00:20:23,950
close your account and I basically have

00:20:21,130 --> 00:20:25,390
all these letters that brittle but will

00:20:23,950 --> 00:20:27,429
correct later that's going to be my

00:20:25,390 --> 00:20:30,309
programming in five words tweet later on

00:20:27,429 --> 00:20:32,080
after this or just realize but basically

00:20:30,309 --> 00:20:34,299
this is how I'm currently getting the

00:20:32,080 --> 00:20:36,400
CSS selectors to marry with the cucumber

00:20:34,299 --> 00:20:39,130
features for the step definitions here's

00:20:36,400 --> 00:20:42,309
an example so I pick out the current

00:20:39,130 --> 00:20:46,179
page scope context current page click

00:20:42,309 --> 00:20:48,010
selectors links link link is passed

00:20:46,179 --> 00:20:50,950
through and that's where I kind of get

00:20:48,010 --> 00:20:52,419
it all to glue together so just to give

00:20:50,950 --> 00:20:53,950
you a quick demo I'm going to quickly

00:20:52,419 --> 00:20:56,830
get out of this and I'm going to just

00:20:53,950 --> 00:20:58,630
show you this running live in action so

00:20:56,830 --> 00:21:01,150
it's going to take a few seconds to do

00:20:58,630 --> 00:21:03,940
build I should have probably got it just

00:21:01,150 --> 00:21:06,280
to skip anyone had that pre run but it

00:21:03,940 --> 00:21:07,630
will take a few seconds whilst we can

00:21:06,280 --> 00:21:10,900
all contemplate the meaning of life and

00:21:07,630 --> 00:21:11,410
everything else and then once it gets up

00:21:10,900 --> 00:21:14,110
there

00:21:11,410 --> 00:21:15,549
in fact I'll just make it a bit in fact

00:21:14,110 --> 00:21:18,280
what I can do is I can move this here

00:21:15,549 --> 00:21:20,620
and there we go boom and there it is and

00:21:18,280 --> 00:21:22,330
if you can see there there's chrome just

00:21:20,620 --> 00:21:24,580
firing away testing all these scenarios

00:21:22,330 --> 00:21:25,809
and it's actually telling me it's you

00:21:24,580 --> 00:21:27,309
can see that little notification the top

00:21:25,809 --> 00:21:29,080
chrome is being controlled by automated

00:21:27,309 --> 00:21:32,200
test software those tests are running

00:21:29,080 --> 00:21:34,360
here on this side and this is all just

00:21:32,200 --> 00:21:37,929
automatic this is the front-end app it's

00:21:34,360 --> 00:21:41,380
hitting an API it's all in one place I

00:21:37,929 --> 00:21:42,640
don't have to hit anything else and it

00:21:41,380 --> 00:21:43,630
can all just run and it will run for the

00:21:42,640 --> 00:21:45,580
next couple of minutes I'm just going to

00:21:43,630 --> 00:21:50,860
leave it running and we'll see at the

00:21:45,580 --> 00:21:53,470
end but yeah so go to quick demo there

00:21:50,860 --> 00:21:55,030
is a circle see our recipe for any of

00:21:53,470 --> 00:21:57,010
you who were wanting to use puppeteer in

00:21:55,030 --> 00:21:59,290
your test environment and happen to be

00:21:57,010 --> 00:22:02,169
using circle CI I have published it it's

00:21:59,290 --> 00:22:05,530
online here if you search for an FNX

00:22:02,169 --> 00:22:09,549
puppeteer soap recipe circle CI recipe

00:22:05,530 --> 00:22:11,710
even it's there and that will work it's

00:22:09,549 --> 00:22:13,580
not completely optimal I'd like to get

00:22:11,710 --> 00:22:16,580
it into a little docker image but

00:22:13,580 --> 00:22:19,070
it's there and it's available for you to

00:22:16,580 --> 00:22:20,990
use from today it's public Kyle tweet

00:22:19,070 --> 00:22:23,510
about it later in terms of testing

00:22:20,990 --> 00:22:25,040
browsers other than Google Chrome if you

00:22:23,510 --> 00:22:27,860
are wanting to do that so you're using a

00:22:25,040 --> 00:22:28,700
public site and you need to support

00:22:27,860 --> 00:22:31,580
multiple browsers

00:22:28,700 --> 00:22:34,040
my recommendation is continue using

00:22:31,580 --> 00:22:36,020
selenium or you look at webdriver - IO

00:22:34,040 --> 00:22:39,890
and place at puppeteer because puppeteer

00:22:36,020 --> 00:22:41,090
is purely for Google Chrome and if

00:22:39,890 --> 00:22:42,590
you're using cucumber to test things

00:22:41,090 --> 00:22:45,140
other than single page apps and API is

00:22:42,590 --> 00:22:49,880
like maybe desktop apps you can do that

00:22:45,140 --> 00:22:51,880
it's really really versatile so give me

00:22:49,880 --> 00:22:54,590
an example you can test electron apps

00:22:51,880 --> 00:22:56,240
github have a library called spectrum

00:22:54,590 --> 00:22:57,500
which is electron testing framework it

00:22:56,240 --> 00:23:00,020
will actually boot up your electron app

00:22:57,500 --> 00:23:01,730
so you can write tests and run them and

00:23:00,020 --> 00:23:02,840
do that and if you want to learn more

00:23:01,730 --> 00:23:05,080
about it

00:23:02,840 --> 00:23:08,360
there is a chapter on it in my book

00:23:05,080 --> 00:23:10,700
that's my little plug in there we and

00:23:08,360 --> 00:23:12,320
the book is actually also a Mandarin

00:23:10,700 --> 00:23:14,480
Chinese thanks to a guy called Gaudi

00:23:12,320 --> 00:23:17,510
Zhao who's a spend a couple of months

00:23:14,480 --> 00:23:20,540
translating it into Mandarin my name is

00:23:17,510 --> 00:23:23,780
Paul Jensen you can find me as public

00:23:20,540 --> 00:23:25,820
Jensen on Twitter or on github it's the

00:23:23,780 --> 00:23:26,940
same spelling and that's it thank you

00:23:25,820 --> 00:23:32,539
very much

00:23:26,940 --> 00:23:32,539

YouTube URL: https://www.youtube.com/watch?v=Wapb_LIS45E


