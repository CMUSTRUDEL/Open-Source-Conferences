Title: Testing Apps with Third Party Integrations - London Node User Group - March 2019
Publication date: 2019-03-30
Playlist: London Node User Group
Description: 
	Presented by Mike Solomon

In this talk we will examine strategies and best practices to develop and test node apps that make heavy use of third-party API integrations. As reliance on third-party services becomes more and more prevalent in the node ecosystem, developers need cost-effective, secure, reliable and fast ways to mock these services for both dev/staging environments and testing.

We will start with looking at nock, and open-source mocking solution for local development, and move onto unmock which provides mocks-as-a-service of popular APIs.

The session will have live coding for both nock and unmock using express to create a simple microservice and jest for testing. It will also present several popular design patterns for isolating and testing third-party integrations as well as strategies for integration testing apps that rely on third-party APIs, including corner-case and error testing.

About the speaker:

Mike Solomon is the founder and CEO of Meeshkan (meeshkan.com), a Helsinki-based DevOps company. A music major at Stanford University, Queen's University Belfast and the University of Florida, Mike has been a guest researcher at the University of Paris VI and has held the post of artistic director of the Ensemble 101 (ensemble101.fr) from 2011 until the present day. While working at the IRCAM as a computer music designer, he fell in love with Machine Learning and founded Meeshkan to ease several DevOps pain points in the ML pipeline. Since then, Meeshkan has expanded to other areas of DevOps, including API testing with unmock (unmock.io).

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:03,899
just to see a show of hands how many of

00:00:01,560 --> 00:00:05,730
you guys have read in a node.js app that

00:00:03,899 --> 00:00:08,610
has made a API call to some other

00:00:05,730 --> 00:00:09,750
service before ok so almost all the

00:00:08,610 --> 00:00:11,400
hands in the room so all of you have

00:00:09,750 --> 00:00:12,809
dealt with a third-party integration or

00:00:11,400 --> 00:00:15,089
with a micro service before almost all

00:00:12,809 --> 00:00:17,310
you and um for those who haven't uh

00:00:15,089 --> 00:00:19,980
hopefully by the end of tonight you'll

00:00:17,310 --> 00:00:22,740
have seen or done your first one or how

00:00:19,980 --> 00:00:24,359
to not mock the internet or how to avoid

00:00:22,740 --> 00:00:25,800
reverse engineering the Internet how

00:00:24,359 --> 00:00:27,990
many people before I have accidentally

00:00:25,800 --> 00:00:29,910
reverse engineered the Internet I see

00:00:27,990 --> 00:00:32,550
three hands yeah it takes a long time to

00:00:29,910 --> 00:00:33,690
do that so I would like to talk to you

00:00:32,550 --> 00:00:37,110
about a few issues having to do with

00:00:33,690 --> 00:00:39,210
this um and a couple open source

00:00:37,110 --> 00:00:40,950
libraries for it including shameless

00:00:39,210 --> 00:00:42,960
self-promotion at the end about um one

00:00:40,950 --> 00:00:44,940
thing that we work on at Michigan which

00:00:42,960 --> 00:00:48,210
is my company so for anybody that wants

00:00:44,940 --> 00:00:49,680
to UM follow along this is the link and

00:00:48,210 --> 00:00:53,570
I think I accidentally even left an

00:00:49,680 --> 00:00:57,329
editing mode but please be nice

00:00:53,570 --> 00:01:00,449
so prologue why we test third-party

00:00:57,329 --> 00:01:02,940
integrations um kind of the main reason

00:01:00,449 --> 00:01:04,049
we do it so uh actually again show I

00:01:02,940 --> 00:01:07,170
don't wanna make any assumptions who in

00:01:04,049 --> 00:01:10,049
this room was not born yet in 1995 oh my

00:01:07,170 --> 00:01:13,049
god okay so there is yeah I wrote my

00:01:10,049 --> 00:01:16,020
first line of code in 1995 but there you

00:01:13,049 --> 00:01:17,880
go so um what was it like writing a

00:01:16,020 --> 00:01:18,630
first line of code in 1995 so Java had

00:01:17,880 --> 00:01:21,659
just been released

00:01:18,630 --> 00:01:26,640
um Java hasn't always existed contrary

00:01:21,659 --> 00:01:28,530
to popular belief it did so 1995 Bill

00:01:26,640 --> 00:01:31,590
Clinton was president and Oasis I

00:01:28,530 --> 00:01:33,180
checked was the most popular band who is

00:01:31,590 --> 00:01:35,250
British at least in America where I'm

00:01:33,180 --> 00:01:37,950
from so if you were working on an app

00:01:35,250 --> 00:01:39,780
back then there was not a really good

00:01:37,950 --> 00:01:42,689
version control solution git was created

00:01:39,780 --> 00:01:43,470
in 1996 so there was but mostly

00:01:42,689 --> 00:01:45,240
flamewars

00:01:43,470 --> 00:01:47,610
on lists of people arguing with each

00:01:45,240 --> 00:01:49,530
other was the version control of the

00:01:47,610 --> 00:01:51,090
epoch um there was also mercurial and a

00:01:49,530 --> 00:01:53,310
couple of other things then Java had

00:01:51,090 --> 00:01:55,110
just been released and there were not

00:01:53,310 --> 00:01:56,340
that many open source libraries that

00:01:55,110 --> 00:01:58,619
community was using probably because of

00:01:56,340 --> 00:01:59,909
a lack of proper version control the

00:01:58,619 --> 00:02:01,530
Linux kernel had of course just come out

00:01:59,909 --> 00:02:03,240
a few years before that and there were

00:02:01,530 --> 00:02:04,979
very few third-party services so

00:02:03,240 --> 00:02:06,060
actually a bait launched in this year

00:02:04,979 --> 00:02:08,190
and it was kind of one of the first

00:02:06,060 --> 00:02:10,619
third-party services um that one could

00:02:08,190 --> 00:02:12,030
use to do anything on the Internet aside

00:02:10,619 --> 00:02:14,460
from a well and it didn't even have a

00:02:12,030 --> 00:02:17,700
API at the time so now fast-forward

00:02:14,460 --> 00:02:19,740
19 we had to talk about errors before so

00:02:17,700 --> 00:02:21,000
I put this up there century so if you

00:02:19,740 --> 00:02:22,800
guys have not used sentry IO

00:02:21,000 --> 00:02:24,780
it is an integration that you could use

00:02:22,800 --> 00:02:26,160
to give you very nice pleasant messages

00:02:24,780 --> 00:02:28,110
about errors in your code even though

00:02:26,160 --> 00:02:29,880
the errors are unpleasant if you have

00:02:28,110 --> 00:02:31,410
problems of authenticating there's no

00:02:29,880 --> 00:02:33,300
problem there's a third party API for

00:02:31,410 --> 00:02:34,560
that which is all 0 and there's other

00:02:33,300 --> 00:02:37,740
ones too such as octa

00:02:34,560 --> 00:02:38,970
AWS canino as your active directory and

00:02:37,740 --> 00:02:41,460
a whole bunch of others and then eBay

00:02:38,970 --> 00:02:43,890
still exists with a snazzy new logo that

00:02:41,460 --> 00:02:45,360
wasn't the case in 1995 and has lots of

00:02:43,890 --> 00:02:47,010
api's in fact it has a whole entire

00:02:45,360 --> 00:02:49,850
developer documentation with many

00:02:47,010 --> 00:02:53,520
different api's so we've moved from

00:02:49,850 --> 00:02:57,060
economy of apps that was kind of build

00:02:53,520 --> 00:02:58,800
your own to integrating with lots of

00:02:57,060 --> 00:03:01,680
third-party services just to get up and

00:02:58,800 --> 00:03:03,930
running so in 20 years I'm condensing

00:03:01,680 --> 00:03:08,090
that history or 20 plus years man I'm

00:03:03,930 --> 00:03:10,170
old so act 1 fun times with API so first

00:03:08,090 --> 00:03:11,610
I'd like to tell you guys just well I

00:03:10,170 --> 00:03:13,800
think API is there's different

00:03:11,610 --> 00:03:15,000
definitions of it but I loved the point

00:03:13,800 --> 00:03:16,260
that was made before about assumptions

00:03:15,000 --> 00:03:20,670
and I really took that to heart so I

00:03:16,260 --> 00:03:22,950
don't want assume that people know what

00:03:20,670 --> 00:03:24,990
api's are so there's a great website

00:03:22,950 --> 00:03:28,010
called programmable web that gives a

00:03:24,990 --> 00:03:30,270
definition of what API is our

00:03:28,010 --> 00:03:32,850
application programming interfaces so an

00:03:30,270 --> 00:03:34,710
interface that allows you that's a

00:03:32,850 --> 00:03:36,150
contract between a third-party provider

00:03:34,710 --> 00:03:38,400
or somebody just in the next room

00:03:36,150 --> 00:03:40,110
developing a micro service that says if

00:03:38,400 --> 00:03:41,580
you interact with the thing that I made

00:03:40,110 --> 00:03:43,860
a certain way over a certain protocol

00:03:41,580 --> 00:03:46,410
which is usually HTTP I may or may not

00:03:43,860 --> 00:03:47,790
serve you something that you may or may

00:03:46,410 --> 00:03:50,670
not have been expecting so that's my

00:03:47,790 --> 00:03:53,040
definition of API and I'm it's up to

00:03:50,670 --> 00:03:55,640
debate so uh programmable web lists

00:03:53,040 --> 00:03:58,680
there you go over 20,000 different api's

00:03:55,640 --> 00:04:00,780
online my favorite API that I've ever

00:03:58,680 --> 00:04:02,700
found a programmable web that I actually

00:04:00,780 --> 00:04:03,720
learned from somebody out of London

00:04:02,700 --> 00:04:07,380
meetup I don't know if you guys have

00:04:03,720 --> 00:04:09,870
ever seen this before but it exists

00:04:07,380 --> 00:04:11,300
off as a service so that is listed and

00:04:09,870 --> 00:04:14,310
if you're ever really mad at somebody

00:04:11,300 --> 00:04:16,170
then you could use this API but it's

00:04:14,310 --> 00:04:17,400
we've tracked this for a while and it

00:04:16,170 --> 00:04:20,670
actually gets like you know if everybody

00:04:17,400 --> 00:04:25,140
usage so that that exists but there's

00:04:20,670 --> 00:04:27,450
other nicer ones too that are on there

00:04:25,140 --> 00:04:28,290
so API programmable web is a great place

00:04:27,450 --> 00:04:31,020
to kind of disk

00:04:28,290 --> 00:04:32,340
and they too have a definition of what

00:04:31,020 --> 00:04:34,410
is an API that's a little bit more

00:04:32,340 --> 00:04:36,870
scientific than the one I gave but I did

00:04:34,410 --> 00:04:39,240
have two drinks tonight so that so um

00:04:36,870 --> 00:04:40,890
the way that testing api's works there's

00:04:39,240 --> 00:04:43,710
several different options bad option one

00:04:40,890 --> 00:04:45,630
to test API is it's just doing nothing

00:04:43,710 --> 00:04:46,800
how many for how many people and so okay

00:04:45,630 --> 00:04:48,570
to be honest about this for how many

00:04:46,800 --> 00:04:51,180
people is this their option for testing

00:04:48,570 --> 00:04:53,220
third party integrations awesome like we

00:04:51,180 --> 00:04:54,720
have at least ten people and I saw some

00:04:53,220 --> 00:04:56,460
people like hesitating it's okay you

00:04:54,720 --> 00:04:58,080
don't need to feel like shame about it I

00:04:56,460 --> 00:05:01,050
would encourage you to embrace it that's

00:04:58,080 --> 00:05:04,910
that's fine it is a method disabling the

00:05:01,050 --> 00:05:07,760
test and there's a whole like um economy

00:05:04,910 --> 00:05:10,080
around doing nothing and kind of

00:05:07,760 --> 00:05:11,430
cleaning up the after it hits the

00:05:10,080 --> 00:05:14,100
fan there's many apps that kind of help

00:05:11,430 --> 00:05:15,870
with that and that is a way to do it but

00:05:14,100 --> 00:05:18,540
that is one option for a testing third

00:05:15,870 --> 00:05:20,190
party API so option two using the real

00:05:18,540 --> 00:05:21,690
api's I've actually collected a lot of

00:05:20,190 --> 00:05:23,850
stories I've been kind of an

00:05:21,690 --> 00:05:25,620
ethnographer and anthropologist about

00:05:23,850 --> 00:05:29,190
what happens when you use real API is in

00:05:25,620 --> 00:05:30,750
a CI CD server I've seen lots of lots of

00:05:29,190 --> 00:05:32,760
great story so my favorite is I want you

00:05:30,750 --> 00:05:34,710
back which is a company accidentally

00:05:32,760 --> 00:05:36,510
embedded at Twilio api key in there CI

00:05:34,710 --> 00:05:38,040
environment sending a text message tens

00:05:36,510 --> 00:05:40,850
of times a day to a person in Kansas

00:05:38,040 --> 00:05:45,750
saying I want you back with a little

00:05:40,850 --> 00:05:47,820
it's so nice what what's a lot less nice

00:05:45,750 --> 00:05:49,770
error no such user so a company did not

00:05:47,820 --> 00:05:51,750
test adjacent from API integration which

00:05:49,770 --> 00:05:55,620
returned error messages that just said

00:05:51,750 --> 00:05:56,970
that and they in a failing try catch

00:05:55,620 --> 00:06:00,180
block they had a finally block that

00:05:56,970 --> 00:06:03,720
still persisted that so every single

00:06:00,180 --> 00:06:05,040
users profile was was that was exactly

00:06:03,720 --> 00:06:06,570
what just happened in the back thank you

00:06:05,040 --> 00:06:07,890
the timing was impeccable we planned

00:06:06,570 --> 00:06:10,590
that beforehand and you totally nailed

00:06:07,890 --> 00:06:12,120
it so was error no such user so imagine

00:06:10,590 --> 00:06:14,100
like going to present to the board like

00:06:12,120 --> 00:06:15,990
the diversity of your user base in it so

00:06:14,100 --> 00:06:17,610
you know you're looking at the stats and

00:06:15,990 --> 00:06:19,110
you're like yeah 100% of our users have

00:06:17,610 --> 00:06:21,270
the same quality which is error no such

00:06:19,110 --> 00:06:25,890
user so that's exactly what happened to

00:06:21,270 --> 00:06:28,200
this unfortunate company then another

00:06:25,890 --> 00:06:29,790
one somebody as a joke that may or may

00:06:28,200 --> 00:06:31,620
not have been me I created a username

00:06:29,790 --> 00:06:33,420
called or one equals one how many people

00:06:31,620 --> 00:06:34,740
have ever done something nasty like that

00:06:33,420 --> 00:06:36,930
do you guys know what's that called for

00:06:34,740 --> 00:06:39,570
those who have done it yeah SQL

00:06:36,930 --> 00:06:41,580
injection so it's a don't do that but it

00:06:39,570 --> 00:06:42,270
actually got sent repeatedly to a

00:06:41,580 --> 00:06:43,680
production API

00:06:42,270 --> 00:06:46,080
an environment and got banned from the

00:06:43,680 --> 00:06:49,289
service basically never never do this

00:06:46,080 --> 00:06:51,780
but if you put or one equals one and

00:06:49,289 --> 00:06:53,099
it's copied and pasted into SQL and it's

00:06:51,780 --> 00:06:54,569
a delete statement then it will delete

00:06:53,099 --> 00:06:56,370
the entire database because or one

00:06:54,569 --> 00:06:58,020
equals one is always true and you did

00:06:56,370 --> 00:07:00,240
not learn that for me and thank God

00:06:58,020 --> 00:07:04,110
nobody's record you do not learn that

00:07:00,240 --> 00:07:06,210
for me so the yeah bad option three is

00:07:04,110 --> 00:07:08,069
reverse engineering the API is in your

00:07:06,210 --> 00:07:10,650
test code so as always there's like a

00:07:08,069 --> 00:07:12,660
Dilbert for everything so I spent the

00:07:10,650 --> 00:07:13,830
week writing a test script for our

00:07:12,660 --> 00:07:15,360
product how many of you guys have ever

00:07:13,830 --> 00:07:16,380
written test code that actually winds up

00:07:15,360 --> 00:07:21,330
being longer than the code you're

00:07:16,380 --> 00:07:23,940
testing yeah and then and I wrote a test

00:07:21,330 --> 00:07:25,500
to test Dilbert's test script and your

00:07:23,940 --> 00:07:27,419
script was almost perfect keep up the

00:07:25,500 --> 00:07:29,250
good work buddy so that yeah

00:07:27,419 --> 00:07:30,630
one-upsmanship it is this as well in

00:07:29,250 --> 00:07:32,759
reverse engineering but all these are

00:07:30,630 --> 00:07:34,590
bad options of testing third party API

00:07:32,759 --> 00:07:35,909
so it would be cruel if I just left you

00:07:34,590 --> 00:07:37,770
with all the bad options and I'm not

00:07:35,909 --> 00:07:39,449
going to there will be good ones later

00:07:37,770 --> 00:07:40,860
but this is kind of stuff that I see out

00:07:39,449 --> 00:07:42,900
in field all the time and you know it

00:07:40,860 --> 00:07:45,330
it's a way to do it but the problem is

00:07:42,900 --> 00:07:47,039
that this is kind of my opinion that

00:07:45,330 --> 00:07:48,780
technology has advanced too fast with

00:07:47,039 --> 00:07:50,430
third party API is which speeds us up a

00:07:48,780 --> 00:07:51,330
lot and microservices from speeds it up

00:07:50,430 --> 00:07:54,330
a lot but then we have a lot of

00:07:51,330 --> 00:07:56,699
technical debt from testing so there you

00:07:54,330 --> 00:07:58,560
go Act two I'd like to talk about an

00:07:56,699 --> 00:07:59,820
open source package called naktu which

00:07:58,560 --> 00:08:02,520
I'm a contributor and a few of my other

00:07:59,820 --> 00:08:04,169
friends are too and I think it's great

00:08:02,520 --> 00:08:07,710
how many guys have used knock before

00:08:04,169 --> 00:08:11,759
okay great so I'm the dog in the

00:08:07,710 --> 00:08:13,500
background all my queues are falling on

00:08:11,759 --> 00:08:14,699
the chandeliers gonna drop like Phantom

00:08:13,500 --> 00:08:15,690
of the Opera at the end of this so I

00:08:14,699 --> 00:08:17,250
know that you guys are sticking around

00:08:15,690 --> 00:08:21,240
for that and it will happen so if you

00:08:17,250 --> 00:08:23,550
guys go to get clone SF no-knock this is

00:08:21,240 --> 00:08:25,110
a from a presentation I did in San

00:08:23,550 --> 00:08:26,250
Francisco which has a small startup

00:08:25,110 --> 00:08:29,130
scene not nearly as cool as yours

00:08:26,250 --> 00:08:32,070
there's um if you clone this and then do

00:08:29,130 --> 00:08:34,140
yarn yarn tests you could see what it

00:08:32,070 --> 00:08:38,370
does but I would like to go into the

00:08:34,140 --> 00:08:43,110
code for a little bit just to show

00:08:38,370 --> 00:08:47,940
what's going on under the hood of NOC so

00:08:43,110 --> 00:08:49,740
the way NOC works is so I'm using just

00:08:47,940 --> 00:08:51,770
here but how many of you guys have used

00:08:49,740 --> 00:08:54,930
just before it's okay so most hands um

00:08:51,770 --> 00:08:55,890
otherwise people use tape or mocha or

00:08:54,930 --> 00:08:57,089
jasmine or just

00:08:55,890 --> 00:09:00,149
you know roll their own which is fine

00:08:57,089 --> 00:09:01,649
too so before each you declare with

00:09:00,149 --> 00:09:04,920
knock what you're gonna call so here

00:09:01,649 --> 00:09:08,370
it's API github calm you declare what

00:09:04,920 --> 00:09:10,800
passed it's going to hit and then you

00:09:08,370 --> 00:09:13,200
say the reply that you want and then you

00:09:10,800 --> 00:09:15,329
say what has to be in that reply and

00:09:13,200 --> 00:09:18,089
usually that's either you manually write

00:09:15,329 --> 00:09:21,390
it or copy and paste it then you test

00:09:18,089 --> 00:09:24,089
something that is in theory that

00:09:21,390 --> 00:09:27,390
hopefully that path that API call and

00:09:24,089 --> 00:09:29,070
then you expect the thing that you

00:09:27,390 --> 00:09:31,740
copied and pasted to be the thing that

00:09:29,070 --> 00:09:34,440
you copy and paste below it if I sound

00:09:31,740 --> 00:09:37,649
kind of slightly tongue-in-cheek about

00:09:34,440 --> 00:09:40,019
it it's because I am but the that's how

00:09:37,649 --> 00:09:43,040
in this case you would use that and then

00:09:40,019 --> 00:09:46,410
if you run it not surprisingly the tests

00:09:43,040 --> 00:09:49,040
pass to get a little bit interactive

00:09:46,410 --> 00:09:51,990
about it so there you go all the tests

00:09:49,040 --> 00:09:53,550
pass in there we go so does anybody see

00:09:51,990 --> 00:09:59,670
any problems with this type of pattern

00:09:53,550 --> 00:10:04,740
of testing the github API of writing

00:09:59,670 --> 00:10:06,480
code this way yeah yeah you hard code

00:10:04,740 --> 00:10:09,360
assumptions about the API which I could

00:10:06,480 --> 00:10:10,800
lead to false positives or the the

00:10:09,360 --> 00:10:13,949
opposite of false positives which I have

00:10:10,800 --> 00:10:15,690
a blank on actually true negatives I

00:10:13,949 --> 00:10:18,870
forget but it could lead to false

00:10:15,690 --> 00:10:19,829
positives absolutely in the API yeah cuz

00:10:18,870 --> 00:10:21,510
you're making a lot of assumptions about

00:10:19,829 --> 00:10:22,860
how it works and it requires you to read

00:10:21,510 --> 00:10:24,839
lots of documentation and there could be

00:10:22,860 --> 00:10:28,279
lots of copy and paste errors um what

00:10:24,839 --> 00:10:30,720
else is potentially annoying about this

00:10:28,279 --> 00:10:38,310
if you're writing code kind of fast in

00:10:30,720 --> 00:10:44,579
your codebase you test uh yeah exactly

00:10:38,310 --> 00:10:47,820
so um the this path here is so um

00:10:44,579 --> 00:10:49,800
another problem with it to restate is

00:10:47,820 --> 00:10:52,800
that you need to know exactly what this

00:10:49,800 --> 00:10:54,630
path is so let's you need to know that

00:10:52,800 --> 00:10:57,060
your codebase is looking up Adam Adam

00:10:54,630 --> 00:10:58,529
license and if your codebase is doing

00:10:57,060 --> 00:11:00,510
something where it's dynamically

00:10:58,529 --> 00:11:02,820
generating to github package on the fly

00:11:00,510 --> 00:11:04,949
then of course this is not going to work

00:11:02,820 --> 00:11:07,529
so there's problems there too but that

00:11:04,949 --> 00:11:09,270
said for simple stuff nock is good and

00:11:07,529 --> 00:11:11,850
we're I think it's great is it's copper

00:11:09,270 --> 00:11:13,470
which is why I've been a big fan of it

00:11:11,850 --> 00:11:14,880
for a while so I think it makes up for

00:11:13,470 --> 00:11:19,020
those problems and that you could also

00:11:14,880 --> 00:11:22,320
do post requests so if you log in with

00:11:19,020 --> 00:11:24,990
this which is this data then reply that

00:11:22,320 --> 00:11:26,670
again the error though is that um in the

00:11:24,990 --> 00:11:28,770
matcher is pretty restrictive so it

00:11:26,670 --> 00:11:30,720
needs to match exactly this data and if

00:11:28,770 --> 00:11:32,220
in your testing code you don't log in

00:11:30,720 --> 00:11:33,870
with that data then it won't trigger a

00:11:32,220 --> 00:11:35,880
knock and it will actually call the real

00:11:33,870 --> 00:11:37,200
github API which could be I mean in this

00:11:35,880 --> 00:11:38,310
case we want to be disasterous you just

00:11:37,200 --> 00:11:40,350
get a four hundred error but if you're

00:11:38,310 --> 00:11:41,580
testing like delete all my Facebook

00:11:40,350 --> 00:11:43,500
friends and you accidentally call the

00:11:41,580 --> 00:11:44,880
API and you've accidentally embedded a

00:11:43,500 --> 00:11:46,730
production key then you accidentally

00:11:44,880 --> 00:11:49,460
have no friends anymore so like it's a

00:11:46,730 --> 00:11:52,860
not a not necessarily sustainable

00:11:49,460 --> 00:11:57,720
practice then um a couple other things

00:11:52,860 --> 00:11:59,580
that I like a lot about it so it it can

00:11:57,720 --> 00:12:01,170
delay connections and kind of do this

00:11:59,580 --> 00:12:02,580
chaos engineering type thing of like

00:12:01,170 --> 00:12:04,590
delaying connections or making

00:12:02,580 --> 00:12:06,240
connections kind of flaky so a lot of

00:12:04,590 --> 00:12:08,820
stuff can be encoded into knock on a

00:12:06,240 --> 00:12:10,290
test by test basis and this is really

00:12:08,820 --> 00:12:13,170
what I think the genius of knock is as

00:12:10,290 --> 00:12:14,490
opposed to proxy servers that do the

00:12:13,170 --> 00:12:16,260
same thing so sometimes you can have a

00:12:14,490 --> 00:12:17,850
proxy server on your machine that will

00:12:16,260 --> 00:12:19,500
have like flaky internet or that will

00:12:17,850 --> 00:12:20,640
reroute certain calls but the problem is

00:12:19,500 --> 00:12:22,410
that's global and it can't be

00:12:20,640 --> 00:12:24,270
fine-grained on a test by test basis and

00:12:22,410 --> 00:12:25,890
you see here then in every different

00:12:24,270 --> 00:12:27,660
test I can configure knock in a

00:12:25,890 --> 00:12:28,980
different way every single time so you

00:12:27,660 --> 00:12:32,160
get a lot of mileage out of that because

00:12:28,980 --> 00:12:33,390
you're able to declaratively state how

00:12:32,160 --> 00:12:35,400
you want your test to perform so it's

00:12:33,390 --> 00:12:36,780
not perfect but it does have a lot of

00:12:35,400 --> 00:12:38,430
nice things in there so I would strongly

00:12:36,780 --> 00:12:39,810
recommend using it another nice thing

00:12:38,430 --> 00:12:41,100
about knock that I don't show here

00:12:39,810 --> 00:12:43,740
because I'm not calling real API so you

00:12:41,100 --> 00:12:45,360
could record your API calls those are

00:12:43,740 --> 00:12:47,820
called fixtures and then save them and

00:12:45,360 --> 00:12:51,180
then play them back a little bit later

00:12:47,820 --> 00:12:52,830
the problem with that is that you if the

00:12:51,180 --> 00:12:54,240
API ever changes or if you want to test

00:12:52,830 --> 00:12:55,410
out other data it's kind of difficult

00:12:54,240 --> 00:12:59,670
but it is nice because you could record

00:12:55,410 --> 00:13:02,730
stuff with NOC if you want to so that

00:12:59,670 --> 00:13:03,990
was acts 2 act 3 what I'd like to get to

00:13:02,730 --> 00:13:05,880
and this is the shameless self-promotion

00:13:03,990 --> 00:13:06,510
is a slightly different service called

00:13:05,880 --> 00:13:09,480
unlock

00:13:06,510 --> 00:13:13,110
one of the products that my company

00:13:09,480 --> 00:13:15,270
works on so instead of yeah I don't at

00:13:13,110 --> 00:13:17,160
all claim that this is easier or better

00:13:15,270 --> 00:13:18,840
than knock and I think that knock works

00:13:17,160 --> 00:13:19,980
really well in a lot of circumstances

00:13:18,840 --> 00:13:23,160
where you need to test out one or two

00:13:19,980 --> 00:13:24,870
API calls mostly I'd like to

00:13:23,160 --> 00:13:27,210
show you the thinking behind this and

00:13:24,870 --> 00:13:28,920
get your feedback on what you think of

00:13:27,210 --> 00:13:31,790
it and also if most of its open source

00:13:28,920 --> 00:13:34,290
so if you'd like to contribute to it

00:13:31,790 --> 00:13:35,310
we're not necessarily hiring right now

00:13:34,290 --> 00:13:37,830
but we are looking for open source

00:13:35,310 --> 00:13:39,210
contributors for anybody that that is

00:13:37,830 --> 00:13:41,010
interested so first I would like to talk

00:13:39,210 --> 00:13:44,280
about rabbinic judaism just because like

00:13:41,010 --> 00:13:46,950
it links into the what are mock is doing

00:13:44,280 --> 00:13:49,080
and i feel like it's not a maybe a topic

00:13:46,950 --> 00:13:53,190
that comes up a lot at no js' meetups

00:13:49,080 --> 00:13:55,740
but so the unmarked and the name of the

00:13:53,190 --> 00:13:56,580
company is inspired by this thing in

00:13:55,740 --> 00:13:59,460
there which is called the Miche con

00:13:56,580 --> 00:14:01,470
which is um this kind of portable temple

00:13:59,460 --> 00:14:03,930
that was built in the book of Exodus so

00:14:01,470 --> 00:14:05,430
the idea was that people are gonna be in

00:14:03,930 --> 00:14:07,680
the desert for a long time there was no

00:14:05,430 --> 00:14:09,300
temple that they had with them that was

00:14:07,680 --> 00:14:10,590
kind of unfortunate so there were

00:14:09,300 --> 00:14:12,600
instructions I had to build a portable

00:14:10,590 --> 00:14:14,310
temple that kind of sort of functioned

00:14:12,600 --> 00:14:15,600
like the actual thing but wasn't the

00:14:14,310 --> 00:14:17,850
real thing and then the real thing kind

00:14:15,600 --> 00:14:20,430
of happened many years afterwards so

00:14:17,850 --> 00:14:22,560
this metaphor of a functional thing that

00:14:20,430 --> 00:14:24,510
exists just for the time you need it and

00:14:22,560 --> 00:14:25,770
then kind of disappears in a while it's

00:14:24,510 --> 00:14:27,060
something that humanity has dealt with

00:14:25,770 --> 00:14:30,090
for at least as long as people are

00:14:27,060 --> 00:14:32,160
talking about this and is something that

00:14:30,090 --> 00:14:33,420
matters a lot for API faking so knock a

00:14:32,160 --> 00:14:35,670
way to think about it is it's a small

00:14:33,420 --> 00:14:37,140
functional API that exists just for the

00:14:35,670 --> 00:14:39,090
duration of your test and then kind of

00:14:37,140 --> 00:14:41,160
disappears right so this idea of the

00:14:39,090 --> 00:14:43,170
Miche con is a we can say that scholars

00:14:41,160 --> 00:14:45,240
from the biblical era predicted API

00:14:43,170 --> 00:14:47,010
testing 2,000 years in advance which is

00:14:45,240 --> 00:14:50,840
pretty darn cool that and the end of the

00:14:47,010 --> 00:14:54,570
world so what what I will talk about

00:14:50,840 --> 00:14:55,920
briefly actually no let me before I talk

00:14:54,570 --> 00:15:01,080
about how it's done let me just do a

00:14:55,920 --> 00:15:02,430
really quick demo so the difference with

00:15:01,080 --> 00:15:07,580
unmarked and it really depends kind of

00:15:02,430 --> 00:15:10,500
what your use case is yeah so unlock

00:15:07,580 --> 00:15:11,550
automatically picks up any API calls in

00:15:10,500 --> 00:15:13,650
your codebase

00:15:11,550 --> 00:15:14,910
so here I have a call to pants here I

00:15:13,650 --> 00:15:16,820
have another call to behan so they're

00:15:14,910 --> 00:15:19,980
kind of littered all over the codebase

00:15:16,820 --> 00:15:22,590
here I have a call to send grid so I'm

00:15:19,980 --> 00:15:25,080
not creating any mocks of these manually

00:15:22,590 --> 00:15:29,910
but what I do is I just put import on

00:15:25,080 --> 00:15:34,350
mock and then you start on maka and what

00:15:29,910 --> 00:15:35,380
that will do if it feels like starting

00:15:34,350 --> 00:15:37,300
up

00:15:35,380 --> 00:15:40,300
so I'll just start a dev server this is

00:15:37,300 --> 00:15:41,560
a node server that uses Express backed

00:15:40,300 --> 00:15:44,230
by how many of you guys have made an

00:15:41,560 --> 00:15:46,510
Express server before okay so it's a

00:15:44,230 --> 00:15:48,910
pretty common pattern I laugh when I

00:15:46,510 --> 00:15:52,150
think about it no it's awesome awesome

00:15:48,910 --> 00:15:53,680
tool I think it's yeah happy it's also

00:15:52,150 --> 00:15:55,030
really nice and there's koa as well

00:15:53,680 --> 00:15:58,660
which is nice but this is an express

00:15:55,030 --> 00:16:00,640
server used by next j/s so we just call

00:15:58,660 --> 00:16:04,410
on Mach before we actually create the

00:16:00,640 --> 00:16:08,200
server and then it will do its thing so

00:16:04,410 --> 00:16:11,620
what I'd like to show you is this how it

00:16:08,200 --> 00:16:14,650
works so this is my little fake

00:16:11,620 --> 00:16:16,360
application I type my name when I click

00:16:14,650 --> 00:16:18,940
Submit it's gonna call send grid and

00:16:16,360 --> 00:16:20,200
then call Behance but it doesn't really

00:16:18,940 --> 00:16:23,440
call any of these things

00:16:20,200 --> 00:16:24,130
it just says I'm mock hi we see you've

00:16:23,440 --> 00:16:25,570
called behance

00:16:24,130 --> 00:16:27,700
we've sent you mock data back you could

00:16:25,570 --> 00:16:29,530
edit it here so basically in real time

00:16:27,700 --> 00:16:31,750
it just intercepts all API calls and

00:16:29,530 --> 00:16:33,790
uses machine learning under the hood

00:16:31,750 --> 00:16:35,950
well beforehand to learn how all the

00:16:33,790 --> 00:16:38,110
api's work and what we call it is

00:16:35,950 --> 00:16:38,920
passing the API Turing test so how many

00:16:38,110 --> 00:16:41,050
guys have heard of the Turing test

00:16:38,920 --> 00:16:42,910
before it's a really cool concept so

00:16:41,050 --> 00:16:45,490
that the Turing test is the idea that

00:16:42,910 --> 00:16:47,290
you could be speaking to a computer and

00:16:45,490 --> 00:16:48,640
not know that it's a computer for like

00:16:47,290 --> 00:16:49,720
you know any minutes and then the

00:16:48,640 --> 00:16:53,200
computer will have passed the Turing

00:16:49,720 --> 00:16:54,760
test for an and minutes so the idea of

00:16:53,200 --> 00:16:57,160
making artificial intelligence that's

00:16:54,760 --> 00:16:58,990
smart enough to fool us into thinking

00:16:57,160 --> 00:17:00,670
that is real um so our mission is to do

00:16:58,990 --> 00:17:02,590
the same thing with API is we use AI to

00:17:00,670 --> 00:17:05,140
create fake versions of API is that kind

00:17:02,590 --> 00:17:06,520
of fool developers into thinking the API

00:17:05,140 --> 00:17:08,260
is real and where that it can be useful

00:17:06,520 --> 00:17:09,970
is when you're doing tests or

00:17:08,260 --> 00:17:10,660
development servers like you're doing

00:17:09,970 --> 00:17:13,600
here

00:17:10,660 --> 00:17:16,600
in order to test stuff out so here you

00:17:13,600 --> 00:17:18,790
see that all of this content in here was

00:17:16,600 --> 00:17:22,000
created just in time and on the fly by

00:17:18,790 --> 00:17:23,710
UNMIK and if I go to any of it all of it

00:17:22,000 --> 00:17:27,310
is kind of editable if you feel like it

00:17:23,710 --> 00:17:30,580
so that's what I mean that this data

00:17:27,310 --> 00:17:32,680
looks and feels like behance looks and

00:17:30,580 --> 00:17:34,600
feels automatically without you having

00:17:32,680 --> 00:17:35,860
to like make it yourself and that's the

00:17:34,600 --> 00:17:37,390
machine learning bit essentially we've

00:17:35,860 --> 00:17:39,460
just kind of learned how data is

00:17:37,390 --> 00:17:40,780
supposed to look from around 700 api's

00:17:39,460 --> 00:17:43,300
including like zoom and slack and

00:17:40,780 --> 00:17:46,330
Facebook and stuff so it's easier than

00:17:43,300 --> 00:17:48,640
using something like knock for that

00:17:46,330 --> 00:17:49,240
particular use case another thing but

00:17:48,640 --> 00:17:52,660
this is true

00:17:49,240 --> 00:17:56,470
not as well that you could just edit

00:17:52,660 --> 00:18:04,690
stuff we're in London company is nest

00:17:56,470 --> 00:18:06,850
and it will just automatically change

00:18:04,690 --> 00:18:09,340
the Mach data and show up real-time

00:18:06,850 --> 00:18:11,290
which helps designers design but to me

00:18:09,340 --> 00:18:14,380
the real benefit of this is not the

00:18:11,290 --> 00:18:16,030
design part although it's nice it's the

00:18:14,380 --> 00:18:18,309
testing part getting back to the purpose

00:18:16,030 --> 00:18:19,870
of the conversation so testing won't

00:18:18,309 --> 00:18:22,059
look as nice because images won't show

00:18:19,870 --> 00:18:23,440
up but in all of these tests are gonna

00:18:22,059 --> 00:18:28,300
run right here it's just going to call

00:18:23,440 --> 00:18:30,520
on mock over and over and get the fake

00:18:28,300 --> 00:18:32,230
data test against it and then at that

00:18:30,520 --> 00:18:33,309
point you don't need to mock anything so

00:18:32,230 --> 00:18:35,290
it's really good how many of you guys

00:18:33,309 --> 00:18:36,820
have really worked with really messy

00:18:35,290 --> 00:18:40,450
applications with legacy and spaghetti

00:18:36,820 --> 00:18:42,160
code okay almost two-thirds of the room

00:18:40,450 --> 00:18:43,840
so this works really well there if you

00:18:42,160 --> 00:18:46,540
have like lots of embedded API calls

00:18:43,840 --> 00:18:47,679
kind of living in your app and just kind

00:18:46,540 --> 00:18:49,240
of unable to keep track of them all

00:18:47,679 --> 00:18:50,980
which I'm it's pretty common and that's

00:18:49,240 --> 00:18:52,210
okay like I nobody needs to feel like

00:18:50,980 --> 00:18:54,760
shame about that that's just kind of the

00:18:52,210 --> 00:18:57,309
way the world works and um the a tool

00:18:54,760 --> 00:19:00,850
like this is meant to clean up that that

00:18:57,309 --> 00:19:03,490
mess so very briefly before ending I

00:19:00,850 --> 00:19:05,410
will just say how we do it so this is

00:19:03,490 --> 00:19:06,610
the open-source bit that if anybody is

00:19:05,410 --> 00:19:08,080
interested in these things you know we'd

00:19:06,610 --> 00:19:10,300
love to collaborate with you guys on it

00:19:08,080 --> 00:19:12,520
all of it is like free I'm the only part

00:19:10,300 --> 00:19:14,830
that we charge for currently it's the

00:19:12,520 --> 00:19:16,510
hosting of like anything in the

00:19:14,830 --> 00:19:17,920
background but otherwise if you guys

00:19:16,510 --> 00:19:18,970
like web scraping we do a lot of that to

00:19:17,920 --> 00:19:21,520
figure out how to a pee eyes work

00:19:18,970 --> 00:19:23,710
recording recording how EP eyes go back

00:19:21,520 --> 00:19:27,400
and forth soul-crushing manual labor if

00:19:23,710 --> 00:19:28,780
any you guys are into that I know that

00:19:27,400 --> 00:19:29,620
at least in the Silicon Valley I just

00:19:28,780 --> 00:19:30,910
read an article in The New York Times

00:19:29,620 --> 00:19:34,660
and says that the new trend is like

00:19:30,910 --> 00:19:36,100
stoicism and like self-denial so you'll

00:19:34,660 --> 00:19:37,780
be denying a lot of things like you'll

00:19:36,100 --> 00:19:39,820
be denying your loved ones your time

00:19:37,780 --> 00:19:41,020
you'll be denying it like minutes of

00:19:39,820 --> 00:19:43,559
your life that could be spent doing

00:19:41,020 --> 00:19:45,070
other things when you check these

00:19:43,559 --> 00:19:46,240
specifications to make sure they're

00:19:45,070 --> 00:19:49,140
correct but I've done a lot of it too

00:19:46,240 --> 00:19:54,160
and it is a zen-like experience after

00:19:49,140 --> 00:19:55,540
after doing 500 of them or so so the and

00:19:54,160 --> 00:19:58,150
then the machine learning bit is super

00:19:55,540 --> 00:19:59,200
fun and this particular Meetup it's not

00:19:58,150 --> 00:20:00,460
a machine learning media but I do

00:19:59,200 --> 00:20:02,260
several of those too where I talk a

00:20:00,460 --> 00:20:03,760
little bit about what we use

00:20:02,260 --> 00:20:05,260
um under the hood to make that happen so

00:20:03,760 --> 00:20:07,120
we're soliciting open source

00:20:05,260 --> 00:20:10,030
contributions and if you would like to

00:20:07,120 --> 00:20:12,040
participate yeah so I put we're hiring

00:20:10,030 --> 00:20:14,320
back and we were recurrent we just

00:20:12,040 --> 00:20:15,550
filled that position so unfortunately

00:20:14,320 --> 00:20:18,850
we're not anymore but we are recruiting

00:20:15,550 --> 00:20:21,550
open source people and this person is

00:20:18,850 --> 00:20:25,240
currently in Helsinki as we speak

00:20:21,550 --> 00:20:27,070
slaving over a GPU to work on the AI pit

00:20:25,240 --> 00:20:29,680
but that's me and please feel free to

00:20:27,070 --> 00:20:30,880
reach out check our code base poking for

00:20:29,680 --> 00:20:32,200
vulnerabilities and if you have any

00:20:30,880 --> 00:20:36,510
questions or would like to have a beer

00:20:32,200 --> 00:20:36,510

YouTube URL: https://www.youtube.com/watch?v=2oZ5wSUAv74


