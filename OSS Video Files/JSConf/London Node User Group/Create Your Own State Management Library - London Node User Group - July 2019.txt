Title: Create Your Own State Management Library - London Node User Group - July 2019
Publication date: 2019-08-06
Playlist: London Node User Group
Description: 
	Create Your Own State Management Library
James Porter

How hard is it to make your own state management library? By using React hooks, Context and other open source projects you can easily build your own useful library.
I wanted first class TypeScript support, immutable data, zero boilerplate and hassle free wiring. I built it in a few dozen lines of code: Immutable Context.
I'll demo how to use it via a Code Sandbox demo, how it works under the hood and then look at some lessons learned, with suggestions on how to build your own state management library in 2019.

About
I'm a polyglot developer and data scientist. I've built lots of apps, for example this iPhone app for Isometric graphics. My website/blog is www.amimetic.co.uk. I work with React/React Native at JPMorgan. My Twitter handle is @complexview

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:03,780
one is really general and one is quite

00:00:01,920 --> 00:00:04,859
specific to JavaScript I think if you

00:00:03,780 --> 00:00:06,870
like to forget everything else in this

00:00:04,859 --> 00:00:08,750
talk that may still be kind of valuable

00:00:06,870 --> 00:00:10,860
what you've learned from those two ideas

00:00:08,750 --> 00:00:12,360
we're gonna get to some code and demos

00:00:10,860 --> 00:00:13,710
soon I want to start with what I think

00:00:12,360 --> 00:00:17,310
is the most important idea in software

00:00:13,710 --> 00:00:19,199
development cognitive load it's quite a

00:00:17,310 --> 00:00:22,020
simple idea it seems in some sense to me

00:00:19,199 --> 00:00:25,050
to obviously be true in whatever context

00:00:22,020 --> 00:00:28,170
time place we have some available mental

00:00:25,050 --> 00:00:29,609
energy or capacity to do stuff and we

00:00:28,170 --> 00:00:31,230
would try and do something some of that

00:00:29,609 --> 00:00:33,210
will be consumed by the stuff in red

00:00:31,230 --> 00:00:36,149
which I think others like the state

00:00:33,210 --> 00:00:38,160
management framework the framework the

00:00:36,149 --> 00:00:40,469
programming language they're colleagues

00:00:38,160 --> 00:00:41,820
you have to put up with and then this

00:00:40,469 --> 00:00:43,170
stuff in blue which is the stuff is

00:00:41,820 --> 00:00:45,300
actually relevant to solving the

00:00:43,170 --> 00:00:47,010
particular problem at hand or to build

00:00:45,300 --> 00:00:49,559
the feature to build a great user

00:00:47,010 --> 00:00:52,800
experience and I think often the problem

00:00:49,559 --> 00:00:54,690
is this stuff in red gets so hard and so

00:00:52,800 --> 00:00:56,610
complex that we simply don't have enough

00:00:54,690 --> 00:00:58,350
energy to accomplish the task we want to

00:00:56,610 --> 00:01:00,510
if you want to learn more about this

00:00:58,350 --> 00:01:02,520
kara Hodgkinson stalk at reason conf

00:01:00,510 --> 00:01:05,489
last year is great you should catch it

00:01:02,520 --> 00:01:07,439
in YouTube and this idea is kind of I

00:01:05,489 --> 00:01:08,939
think related to things like essential

00:01:07,439 --> 00:01:11,430
and intentional complexity the closer

00:01:08,939 --> 00:01:13,680
guys stuff things like having a compiler

00:01:11,430 --> 00:01:15,119
that acts as a like a pairing assistant

00:01:13,680 --> 00:01:15,990
it gives you advice it tells you what

00:01:15,119 --> 00:01:17,790
you might have been wrong

00:01:15,990 --> 00:01:19,290
it takes mental load that you have to

00:01:17,790 --> 00:01:21,540
think about it moves it somewhere else

00:01:19,290 --> 00:01:23,759
there's traditional object orientated

00:01:21,540 --> 00:01:25,409
stuff like encapsulation and things like

00:01:23,759 --> 00:01:26,880
functional programming where you talk

00:01:25,409 --> 00:01:29,579
about things that are easy to reason

00:01:26,880 --> 00:01:31,890
about so immutability and so on that's

00:01:29,579 --> 00:01:33,090
the general idea this specific idea what

00:01:31,890 --> 00:01:34,619
I say about JavaScript and what

00:01:33,090 --> 00:01:37,470
influences things like really estate

00:01:34,619 --> 00:01:39,180
management library I started in like

00:01:37,470 --> 00:01:42,270
2012 or something I didn't really do

00:01:39,180 --> 00:01:43,860
JavaScript then but in 2012 Java was

00:01:42,270 --> 00:01:46,920
rubbish and we all wanted to move to

00:01:43,860 --> 00:01:49,649
node because it's through the agile but

00:01:46,920 --> 00:01:51,990
what is agile agile is something that is

00:01:49,649 --> 00:01:54,140
easy relatively speaking so it may still

00:01:51,990 --> 00:01:57,049
be quite hard to change or iterate

00:01:54,140 --> 00:01:59,159
here's the thing javascript is not agile

00:01:57,049 --> 00:02:02,640
this is I think a really common

00:01:59,159 --> 00:02:04,409
misconception in JavaScript the cost of

00:02:02,640 --> 00:02:07,290
changing stuff is really really high

00:02:04,409 --> 00:02:09,479
most people pay to write software this

00:02:07,290 --> 00:02:11,520
is awesome because every two years your

00:02:09,479 --> 00:02:13,560
stuff is so complex you have to just Pro

00:02:11,520 --> 00:02:15,900
it all out and start again it

00:02:13,560 --> 00:02:17,430
is amazing on projects they get so

00:02:15,900 --> 00:02:18,870
difficult they need to like throw people

00:02:17,430 --> 00:02:20,730
out it to try and solve the problem so

00:02:18,870 --> 00:02:24,239
we all get jobs and get paid well that's

00:02:20,730 --> 00:02:26,069
great but it also has problems um this

00:02:24,239 --> 00:02:28,470
is a huge cognitive load and a huge

00:02:26,069 --> 00:02:30,060
pressure to get the structure of your

00:02:28,470 --> 00:02:33,450
application or whatever you're building

00:02:30,060 --> 00:02:35,280
right first time and it's something like

00:02:33,450 --> 00:02:36,959
tests don't really directly help with

00:02:35,280 --> 00:02:38,760
tests kind of help with in the context

00:02:36,959 --> 00:02:40,349
within a particular structure that it

00:02:38,760 --> 00:02:42,330
does a kind of expected behavior given

00:02:40,349 --> 00:02:44,040
expected inputs but they don't really

00:02:42,330 --> 00:02:45,600
help us if we decide oh yeah we've

00:02:44,040 --> 00:02:47,640
messed this up we need to really change

00:02:45,600 --> 00:02:49,500
it you basically delete the test and

00:02:47,640 --> 00:02:51,090
create new tests you delete the code you

00:02:49,500 --> 00:02:54,390
create new code you basically start

00:02:51,090 --> 00:02:55,860
again so in thinking about JavaScript

00:02:54,390 --> 00:02:57,540
for you know anything but in particular

00:02:55,860 --> 00:02:59,340
step management what you want to ask why

00:02:57,540 --> 00:03:01,349
is Java scripts it's not agile but what

00:02:59,340 --> 00:03:03,480
is it so I think if javascript is being

00:03:01,349 --> 00:03:05,400
flexible it's like cement so you've got

00:03:03,480 --> 00:03:07,140
some really rough grind if you pour a

00:03:05,400 --> 00:03:08,670
cement over it it's going to look smooth

00:03:07,140 --> 00:03:11,640
and fill in all of those cracks all of

00:03:08,670 --> 00:03:13,590
those soap XML legacy awful things and

00:03:11,640 --> 00:03:15,750
the graph QL shiny new things it will it

00:03:13,590 --> 00:03:17,760
will glue those together it's possible

00:03:15,750 --> 00:03:19,260
to do that in JavaScript it's also

00:03:17,760 --> 00:03:21,239
really awesome because it's really

00:03:19,260 --> 00:03:22,049
dynamic you get a very fast feedback you

00:03:21,239 --> 00:03:25,200
don't have to wait for a thing to

00:03:22,049 --> 00:03:26,579
compile you can like get hot reloading

00:03:25,200 --> 00:03:28,260
and that kind of stuff depending the

00:03:26,579 --> 00:03:31,700
context you're working in and it's also

00:03:28,260 --> 00:03:33,510
performant so so those are the two ideas

00:03:31,700 --> 00:03:35,250
that I think are worth bearing in mind

00:03:33,510 --> 00:03:37,230
for state management but actually for

00:03:35,250 --> 00:03:39,930
pretty much all software development

00:03:37,230 --> 00:03:43,019
anyway certainly in in JavaScript and

00:03:39,930 --> 00:03:44,519
from those those ideas I draw a few

00:03:43,019 --> 00:03:46,470
lessons about the kind of things I want

00:03:44,519 --> 00:03:48,810
to bring to state management or indeed

00:03:46,470 --> 00:03:51,380
anything else which we're going to kind

00:03:48,810 --> 00:03:56,310
of talk more about you can read those

00:03:51,380 --> 00:03:58,500
anyway in February of this year I think

00:03:56,310 --> 00:04:00,090
I was bored at one evening and I said

00:03:58,500 --> 00:04:01,859
let's create a state management library

00:04:00,090 --> 00:04:04,920
this is what people do right okay I

00:04:01,859 --> 00:04:07,079
don't know and what would I like in a

00:04:04,920 --> 00:04:08,910
state management library so I've

00:04:07,079 --> 00:04:10,859
probably been using redux too much over

00:04:08,910 --> 00:04:12,959
the last year so basically I mostly

00:04:10,859 --> 00:04:14,340
wanted the opposite of that or or

00:04:12,959 --> 00:04:16,470
something with the good qualities of

00:04:14,340 --> 00:04:18,209
that will fight the bad qualities so I

00:04:16,470 --> 00:04:21,359
didn't want any of that boilerplate

00:04:18,209 --> 00:04:23,729
stuff I wanted I wanted auto-completion

00:04:21,359 --> 00:04:25,560
I don't have to remember stuff like the

00:04:23,729 --> 00:04:26,070
computer can remember stuff perfectly I

00:04:25,560 --> 00:04:27,580
can't

00:04:26,070 --> 00:04:29,610
let's offload that so they can

00:04:27,580 --> 00:04:32,020
let's reduce that cognitive load and

00:04:29,610 --> 00:04:33,280
react hooks is about to collide it's in

00:04:32,020 --> 00:04:34,629
beat it's it's going to come out in a

00:04:33,280 --> 00:04:37,870
few weeks I should learn about this

00:04:34,629 --> 00:04:40,720
thing and immutability that's awesome

00:04:37,870 --> 00:04:42,879
let's let's have that so how hard cannot

00:04:40,720 --> 00:04:44,530
be it turned out it wasn't that hard and

00:04:42,879 --> 00:04:46,090
that's kind of the one of the lessons of

00:04:44,530 --> 00:04:47,289
this talk it took I think like an an

00:04:46,090 --> 00:04:48,669
hour and a half I'd like built this

00:04:47,289 --> 00:04:51,220
state management library that kind of

00:04:48,669 --> 00:04:54,280
works which I found really surprising

00:04:51,220 --> 00:04:55,780
and I was able to kind of summarize the

00:04:54,280 --> 00:05:00,449
entire state management library in this

00:04:55,780 --> 00:05:02,409
one tweet you define and I'll kind of

00:05:00,449 --> 00:05:04,780
yeah I guess so look at the high level

00:05:02,409 --> 00:05:09,940
you define a type in typescript for your

00:05:04,780 --> 00:05:12,460
state you then create a hook and a

00:05:09,940 --> 00:05:14,530
provider that goes with that you can

00:05:12,460 --> 00:05:16,509
then create components which pull in the

00:05:14,530 --> 00:05:19,180
I don't if I can like pointer indicates

00:05:16,509 --> 00:05:21,280
tough but this cointreau component uses

00:05:19,180 --> 00:05:23,949
this custom you use immutable context

00:05:21,280 --> 00:05:26,650
hook to access it update this dead

00:05:23,949 --> 00:05:28,539
and then the application simply wraps

00:05:26,650 --> 00:05:30,639
big an arbitrary number of his

00:05:28,539 --> 00:05:32,169
components with the provider so the

00:05:30,639 --> 00:05:33,759
entire the entire everything you need to

00:05:32,169 --> 00:05:35,979
know about the library kind of can be

00:05:33,759 --> 00:05:40,120
summarized in that one tweet let's look

00:05:35,979 --> 00:05:43,270
at an actual example so it people whose

00:05:40,120 --> 00:05:45,310
use code sandbox before what okay

00:05:43,270 --> 00:05:46,419
everyone whose hands were not raised

00:05:45,310 --> 00:05:48,250
you've got it'll have a look at code

00:05:46,419 --> 00:05:50,650
sandbox it's really amazing like it

00:05:48,250 --> 00:05:52,870
basically gives you a a full modern

00:05:50,650 --> 00:05:55,990
front-end like web development thing in

00:05:52,870 --> 00:05:58,870
the browser and like for free it's it's

00:05:55,990 --> 00:06:02,800
completely amazing but I'm going to try

00:05:58,870 --> 00:06:05,069
and demo a few little things here so one

00:06:02,800 --> 00:06:07,750
of the things with the estate management

00:06:05,069 --> 00:06:10,629
vibrated you define a type for your

00:06:07,750 --> 00:06:14,830
stared so let's add a new thing to our

00:06:10,629 --> 00:06:16,659
our state well let's say it's a so this

00:06:14,830 --> 00:06:19,449
is typescript if people aren't sort of

00:06:16,659 --> 00:06:21,940
familiar with it but I define the type

00:06:19,449 --> 00:06:24,729
of this debt and so already the compiler

00:06:21,940 --> 00:06:28,569
well the interpreter or wrote the

00:06:24,729 --> 00:06:30,009
tooling is I've messed up I need to

00:06:28,569 --> 00:06:32,469
provide an initial state and I haven't

00:06:30,009 --> 00:06:36,759
provided a name so let's let's do that

00:06:32,469 --> 00:06:39,130
oh sorry l nog so we've not included

00:06:36,759 --> 00:06:41,290
this in our state and if we want to use

00:06:39,130 --> 00:06:54,010
it let's let's pop this into our header

00:06:41,290 --> 00:06:57,490
and so I don't have to remember stuff so

00:06:54,010 --> 00:06:59,620
if I type step it knows it has a type so

00:06:57,490 --> 00:07:02,620
I'm the type is L not so we could find

00:06:59,620 --> 00:07:04,840
things like this but you know we're kind

00:07:02,620 --> 00:07:07,900
of better developers than that so we're

00:07:04,840 --> 00:07:08,650
gonna we're gonna add a feature to the

00:07:07,900 --> 00:07:11,590
application

00:07:08,650 --> 00:07:15,310
so we're I'm sure we're all 10x

00:07:11,590 --> 00:07:18,730
developers here so so let's let's 10x

00:07:15,310 --> 00:07:19,840
this counter so we'll create a 10x

00:07:18,730 --> 00:07:21,580
corner we're going to copy and paste

00:07:19,840 --> 00:07:23,290
your code there's actually I think this

00:07:21,580 --> 00:07:26,350
is good for a reason I might get onto

00:07:23,290 --> 00:07:28,450
but you know 10x that you know instead

00:07:26,350 --> 00:07:32,500
of just incremented we're going to like

00:07:28,450 --> 00:07:33,730
multiply or our pointer by 10 so that

00:07:32,500 --> 00:07:35,380
you can imagine this is like sales

00:07:33,730 --> 00:07:41,170
numbers or some kind of business metric

00:07:35,380 --> 00:07:44,260
or something you know we're gonna so

00:07:41,170 --> 00:07:46,180
we've created a component or 10x pancho

00:07:44,260 --> 00:07:50,800
component so we're gonna drop our

00:07:46,180 --> 00:07:53,590
tenants pointer into our application and

00:07:50,800 --> 00:07:57,310
now I will make when we hit our 10x

00:07:53,590 --> 00:07:59,620
button we multiply things by 10 so

00:07:57,310 --> 00:08:01,240
that's kind of how easy it is to pull it

00:07:59,620 --> 00:08:03,550
and modify the state with this I break

00:08:01,240 --> 00:08:05,560
one of the qualities I like about it

00:08:03,550 --> 00:08:06,520
however is that you can really easily

00:08:05,560 --> 00:08:08,200
delete things

00:08:06,520 --> 00:08:09,700
which I kind of took to be a really

00:08:08,200 --> 00:08:11,380
useful heuristic for how do I make a

00:08:09,700 --> 00:08:14,530
thing that I can change well if I can

00:08:11,380 --> 00:08:16,510
delete things and that isn't hard then

00:08:14,530 --> 00:08:18,670
I'm probably gonna be able to change it

00:08:16,510 --> 00:08:21,580
well so let's get rid of this old contr

00:08:18,670 --> 00:08:23,980
so this is our old non 10x pointer so we

00:08:21,580 --> 00:08:26,170
will delete it and the compiler will

00:08:23,980 --> 00:08:30,880
tell us oh it's wrong so we need to

00:08:26,170 --> 00:08:33,550
remove a thing in red I look what we've

00:08:30,880 --> 00:08:35,260
got a working application again so I

00:08:33,550 --> 00:08:36,870
think like if you can construct stuff

00:08:35,260 --> 00:08:38,979
that is easy to delete it easy to change

00:08:36,870 --> 00:08:40,210
very easy to pull then use it a small

00:08:38,979 --> 00:08:40,540
number of concepts I think you're doing

00:08:40,210 --> 00:08:44,920
well

00:08:40,540 --> 00:08:47,650
so the lessons a few very short lessons

00:08:44,920 --> 00:08:49,300
I kind of draw from this one you know

00:08:47,650 --> 00:08:51,190
this there's this like pretentious quote

00:08:49,300 --> 00:08:52,570
from Newton the thing I love about this

00:08:51,190 --> 00:08:54,040
quote people people quote this really

00:08:52,570 --> 00:08:54,310
directly but here's the thing Newton was

00:08:54,040 --> 00:08:56,050
being

00:08:54,310 --> 00:08:58,930
really it was being ironic at the time

00:08:56,050 --> 00:09:03,220
he was a giant the people this time were

00:08:58,930 --> 00:09:04,870
mostly not however we have NPM in

00:09:03,220 --> 00:09:07,570
JavaScript so we actually have lots of

00:09:04,870 --> 00:09:08,710
great stuff we can pull in and you know

00:09:07,570 --> 00:09:10,450
I built this thing in an hour and a half

00:09:08,710 --> 00:09:12,730
because a lot of other people did really

00:09:10,450 --> 00:09:15,400
hard stuff and I glued their stuff

00:09:12,730 --> 00:09:16,990
together one of those things is

00:09:15,400 --> 00:09:19,180
typescript I think type scripts

00:09:16,990 --> 00:09:20,830
remarkable it kind of takes this sort of

00:09:19,180 --> 00:09:22,990
mass of JavaScript there you know this

00:09:20,830 --> 00:09:24,790
language built in two weeks and keeping

00:09:22,990 --> 00:09:27,460
that over time and makes it a really

00:09:24,790 --> 00:09:29,920
pleasant modern language to work in I

00:09:27,460 --> 00:09:31,420
think it's amazing that you don't and do

00:09:29,920 --> 00:09:33,070
you you don't need to write as much

00:09:31,420 --> 00:09:34,270
documentation you don't need to write as

00:09:33,070 --> 00:09:36,040
many comments you don't need to write as

00:09:34,270 --> 00:09:39,610
many tests so you just do way less work

00:09:36,040 --> 00:09:42,790
overall that's kind of awesome you've

00:09:39,610 --> 00:09:45,220
got this sort of structural typing which

00:09:42,790 --> 00:09:46,990
is very lightweight and flexible and it

00:09:45,220 --> 00:09:49,630
kind of subtly pushes you towards better

00:09:46,990 --> 00:09:50,980
designs that are more consistent and in

00:09:49,630 --> 00:09:53,290
the long term long run will be easier to

00:09:50,980 --> 00:09:54,760
work with and you can make changes with

00:09:53,290 --> 00:09:56,200
relative confidence so you saw I made

00:09:54,760 --> 00:09:57,610
some changes there I didn't really have

00:09:56,200 --> 00:09:59,470
to think about something by coding stuff

00:09:57,610 --> 00:10:00,940
in front of a bunch of people is the way

00:09:59,470 --> 00:10:03,280
harder than coding stuff at your desk

00:10:00,940 --> 00:10:04,960
normally and I was pretty confident it

00:10:03,280 --> 00:10:07,420
would work thanks to typescript you can

00:10:04,960 --> 00:10:09,040
also do TDD this is not test of in

00:10:07,420 --> 00:10:12,370
development but type driven development

00:10:09,040 --> 00:10:14,320
so I can write the types that I expect

00:10:12,370 --> 00:10:16,600
the inputs the output and then they

00:10:14,320 --> 00:10:18,220
light the program and you can also do

00:10:16,600 --> 00:10:20,110
some fancy stuff by trying to make

00:10:18,220 --> 00:10:22,660
impossible states impossible so you can

00:10:20,110 --> 00:10:24,010
try and describe in types certain

00:10:22,660 --> 00:10:27,670
characteristic the way your system is

00:10:24,010 --> 00:10:31,630
modeled such that you simply can't

00:10:27,670 --> 00:10:33,730
represent invalid stuff anyway on the

00:10:31,630 --> 00:10:35,650
next lesson is use Emmer it's amazing

00:10:33,730 --> 00:10:37,630
it's the thing that does most of the

00:10:35,650 --> 00:10:39,730
hard work and what are presented it's a

00:10:37,630 --> 00:10:42,850
library that takes an object and a

00:10:39,730 --> 00:10:44,350
function that updates a draft object the

00:10:42,850 --> 00:10:45,910
clever thing with immer is that it

00:10:44,350 --> 00:10:49,290
doesn't actually modify your original

00:10:45,910 --> 00:10:52,330
object through the magic of proxies it

00:10:49,290 --> 00:10:54,160
creates a new object which shares all of

00:10:52,330 --> 00:10:57,130
the unmodified pieces of your old object

00:10:54,160 --> 00:10:58,870
with the new stuff but the main benefit

00:10:57,130 --> 00:11:00,400
is like compared to something like redox

00:10:58,870 --> 00:11:02,890
where you have to do various kind of D

00:11:00,400 --> 00:11:04,870
structuring and indexing and slicing and

00:11:02,890 --> 00:11:07,400
so on you just do the natural in your

00:11:04,870 --> 00:11:09,830
magic JavaScript stuff

00:11:07,400 --> 00:11:11,480
the next lesson hooks you should use

00:11:09,830 --> 00:11:13,940
hooks they're awesome

00:11:11,480 --> 00:11:17,660
they really lower the cognitive load on

00:11:13,940 --> 00:11:19,730
react it collocates related logic it

00:11:17,660 --> 00:11:21,860
makes it I think the main thing I find

00:11:19,730 --> 00:11:23,870
I've been doing hooks almost a full time

00:11:21,860 --> 00:11:25,580
for about 6 months now I need it makes

00:11:23,870 --> 00:11:27,020
it it's so much more pleasant I think I

00:11:25,580 --> 00:11:29,120
find it you make your Fuhrer

00:11:27,020 --> 00:11:32,300
regrets like you don't mess things up

00:11:29,120 --> 00:11:34,190
it's so much easier to make changes it's

00:11:32,300 --> 00:11:35,540
really easy to extract some custom piece

00:11:34,190 --> 00:11:35,960
of logic and share that with something

00:11:35,540 --> 00:11:37,580
else

00:11:35,960 --> 00:11:39,800
I kind of think of it as like UI

00:11:37,580 --> 00:11:41,420
development on easy mode it pushes that

00:11:39,800 --> 00:11:43,310
read stuff I talked about at the start

00:11:41,420 --> 00:11:45,650
right the way to the left till it's

00:11:43,310 --> 00:11:47,150
barely visible it gives me all of that

00:11:45,650 --> 00:11:48,589
mental energy and capacity to think

00:11:47,150 --> 00:11:51,050
about the actual problem I'm trying to

00:11:48,589 --> 00:11:53,660
solve the thing I'm trying to create oh

00:11:51,050 --> 00:11:55,580
I also made a little react native app

00:11:53,660 --> 00:11:57,050
using react hooks to learn react hooks

00:11:55,580 --> 00:11:58,210
it's on the App Store is free you should

00:11:57,050 --> 00:12:01,460
download it

00:11:58,210 --> 00:12:03,620
the final lesson is about contacts so

00:12:01,460 --> 00:12:06,440
one thing I keep hearing is that we

00:12:03,620 --> 00:12:08,540
should replace redux with context this

00:12:06,440 --> 00:12:10,220
makes no sense at all this is like the

00:12:08,540 --> 00:12:11,900
claim that we should replace a car with

00:12:10,220 --> 00:12:13,670
an internal combustion engine because

00:12:11,900 --> 00:12:16,010
because when people use Redux they are

00:12:13,670 --> 00:12:17,510
typically using contacts to supply that

00:12:16,010 --> 00:12:20,990
that we dark stuff

00:12:17,510 --> 00:12:23,240
even if indirectly the thing about

00:12:20,990 --> 00:12:25,070
context it provides some kind of value

00:12:23,240 --> 00:12:26,209
to deeply nested components we don't

00:12:25,070 --> 00:12:27,589
have to do the kind of prop drilling

00:12:26,209 --> 00:12:30,680
passing stuff going to be pre our

00:12:27,589 --> 00:12:32,810
component soon we do something like this

00:12:30,680 --> 00:12:35,839
so this is the reactor syntax for using

00:12:32,810 --> 00:12:37,070
context now you should always you pretty

00:12:35,839 --> 00:12:38,839
much always want to put that in a custom

00:12:37,070 --> 00:12:40,100
hook so you would never even be writing

00:12:38,839 --> 00:12:41,959
this directly within one of your

00:12:40,100 --> 00:12:46,040
components but what do we put in that

00:12:41,959 --> 00:12:49,180
value which brings us on to a quick look

00:12:46,040 --> 00:12:52,490
at the source code of the thing I made

00:12:49,180 --> 00:12:53,990
so this is the main part of immutable

00:12:52,490 --> 00:12:55,459
context which is the state management

00:12:53,990 --> 00:12:55,820
library that was the name I came up

00:12:55,459 --> 00:12:57,170
before

00:12:55,820 --> 00:12:58,670
yeah you need a good name for these kind

00:12:57,170 --> 00:12:59,900
of things a mutable context is a really

00:12:58,670 --> 00:13:00,980
good name I'm probably going to delete

00:12:59,900 --> 00:13:03,380
the entire thing and try to do something

00:13:00,980 --> 00:13:05,860
better but I'll keep the name because it

00:13:03,380 --> 00:13:08,930
sounds like impressive or at least to me

00:13:05,860 --> 00:13:10,970
so first thing to note this library is

00:13:08,930 --> 00:13:12,500
really tiny this is like 82 lines of

00:13:10,970 --> 00:13:14,510
code and that's only after I made it

00:13:12,500 --> 00:13:17,890
significantly more complex by a line for

00:13:14,510 --> 00:13:21,120
logic and kind of a variety of the state

00:13:17,890 --> 00:13:23,639
so the question of hooks is i okay

00:13:21,120 --> 00:13:25,410
well the question of API is in general

00:13:23,639 --> 00:13:27,509
and hooks in particular is okay what

00:13:25,410 --> 00:13:29,910
what what is the surface of this API and

00:13:27,509 --> 00:13:33,689
it's really really simple so the surface

00:13:29,910 --> 00:13:36,990
of the API is simply a provider and a

00:13:33,689 --> 00:13:38,309
custom hook the provider is very kind of

00:13:36,990 --> 00:13:41,399
standard you know it's providing that

00:13:38,309 --> 00:13:44,399
that state value of the estate

00:13:41,399 --> 00:13:46,379
management library the youth the hook is

00:13:44,399 --> 00:13:48,629
a little bit more interesting so the

00:13:46,379 --> 00:13:51,329
hook is basically but it's also very

00:13:48,629 --> 00:13:54,059
very simple the hook is simply accessing

00:13:51,329 --> 00:13:58,559
the context and providing that as it's

00:13:54,059 --> 00:14:00,480
there and providing an apply function so

00:13:58,559 --> 00:14:02,699
this apply function is a very small

00:14:00,480 --> 00:14:04,980
wrapper for immer so this is the Emer

00:14:02,699 --> 00:14:06,720
this is this earth magical give me give

00:14:04,980 --> 00:14:08,879
me an object give me a function I

00:14:06,720 --> 00:14:12,660
produce a new version of this object if

00:14:08,879 --> 00:14:15,089
I modifying the original and then that

00:14:12,660 --> 00:14:19,199
is wired together with the EU's

00:14:15,089 --> 00:14:20,670
statehood from from the act so you can

00:14:19,199 --> 00:14:22,499
look at the source code like it really

00:14:20,670 --> 00:14:23,790
is very simple actually I think the

00:14:22,499 --> 00:14:26,160
simple addition is rubbish I want to

00:14:23,790 --> 00:14:27,839
rewrite it completely but I did this

00:14:26,160 --> 00:14:29,999
like you know mostly in one evening

00:14:27,839 --> 00:14:33,329
so yeah just drop things up yeah look

00:14:29,999 --> 00:14:34,709
you should make things learn things you

00:14:33,329 --> 00:14:36,089
find a bunch of libraries that other

00:14:34,709 --> 00:14:37,679
people have done all of the hard work

00:14:36,089 --> 00:14:40,019
and build a little thing on top that

00:14:37,679 --> 00:14:42,779
kind of pull stuff together it's fun you

00:14:40,019 --> 00:14:45,569
learn things and you know people

00:14:42,779 --> 00:14:46,769
probably like I got Chris helped helped

00:14:45,569 --> 00:14:48,629
me with some of the types so I learned

00:14:46,769 --> 00:14:50,899
how to actually do types of property for

00:14:48,629 --> 00:14:54,149
react components

00:14:50,899 --> 00:14:55,259
I've also kind of applied a lot of the

00:14:54,149 --> 00:14:56,999
lessons I learned from this too when I

00:14:55,259 --> 00:14:58,139
build something a bit more serious so

00:14:56,999 --> 00:15:02,429
one of the things I've been working on

00:14:58,139 --> 00:15:05,639
recently is a library for doing kind of

00:15:02,429 --> 00:15:07,709
algorithmic art graphics stuff so I'll

00:15:05,639 --> 00:15:11,550
show that or demo of that

00:15:07,709 --> 00:15:16,170
so this library makes it kind of quite

00:15:11,550 --> 00:15:20,009
trivial to write little animated visual

00:15:16,170 --> 00:15:22,800
pieces of code with like very small

00:15:20,009 --> 00:15:27,269
amounts of code and I've applied a lot

00:15:22,800 --> 00:15:29,100
of the lessons from creating the kind of

00:15:27,269 --> 00:15:33,710
state management library to this around

00:15:29,100 --> 00:15:36,350
cognitive load around using typescript

00:15:33,710 --> 00:15:37,970
Ryland around some of the api's in

00:15:36,350 --> 00:15:39,980
particular is kind of inspired by react

00:15:37,970 --> 00:15:43,190
which the surface is often a kind of

00:15:39,980 --> 00:15:45,740
declarative way of writing code so like

00:15:43,190 --> 00:15:47,990
here we can see again I can't point this

00:15:45,740 --> 00:15:50,480
out there the top line here you can see

00:15:47,990 --> 00:15:52,640
the various lines here passing in a very

00:15:50,480 --> 00:15:54,950
declarative manner the configuration the

00:15:52,640 --> 00:15:58,820
way you pass in props in react but it's

00:15:54,950 --> 00:16:01,430
also like react it's it is procedural in

00:15:58,820 --> 00:16:04,490
like the local parts which often works

00:16:01,430 --> 00:16:06,470
quite well so be inspired by sonic pies

00:16:04,490 --> 00:16:10,420
it's like Ruby library for doing like

00:16:06,470 --> 00:16:13,910
live coding music stuff emitted it ticks

00:16:10,420 --> 00:16:16,610
kind of operations to do with drawing

00:16:13,910 --> 00:16:19,100
so let's tile this surface and mix that

00:16:16,610 --> 00:16:22,040
part of the framework so you can kind of

00:16:19,100 --> 00:16:23,510
directly do this so in like six lines of

00:16:22,040 --> 00:16:25,100
code or five lines of code or every

00:16:23,510 --> 00:16:27,080
concert I'm able to make this image

00:16:25,100 --> 00:16:30,050
which actually animates through

00:16:27,080 --> 00:16:32,330
different colors and this is slightly

00:16:30,050 --> 00:16:34,160
more code but it's doing this that quite

00:16:32,330 --> 00:16:36,589
sophisticated did a visualization style

00:16:34,160 --> 00:16:39,020
thing in like I don't know that's like

00:16:36,589 --> 00:16:40,810
you know if you crush together the stuff

00:16:39,020 --> 00:16:43,100
that prettier split onto multiple lines

00:16:40,810 --> 00:16:44,300
that's like seven lines of code or

00:16:43,100 --> 00:16:48,740
something and you can do something like

00:16:44,300 --> 00:16:49,850
that so we got to the end you can look

00:16:48,740 --> 00:16:52,490
at the library which I should probably

00:16:49,850 --> 00:16:53,900
rewrite at some point it's on NPM so you

00:16:52,490 --> 00:16:56,000
should immediately go back to your

00:16:53,900 --> 00:16:59,240
workplaces delete Redux and start using

00:16:56,000 --> 00:17:00,830
this library you'll you'll probably then

00:16:59,240 --> 00:17:02,690
have to hire me to like fix it or

00:17:00,830 --> 00:17:05,900
something so we're quite low or quite

00:17:02,690 --> 00:17:07,459
well you can look at the the graphic

00:17:05,900 --> 00:17:11,329
stuff there's like demos and things so

00:17:07,459 --> 00:17:12,890
they're showing I showed like some of

00:17:11,329 --> 00:17:15,110
these demos but there's lots of these

00:17:12,890 --> 00:17:17,449
kind of demos of it sure how to create

00:17:15,110 --> 00:17:20,270
things and all of them have the example

00:17:17,449 --> 00:17:22,160
source code you can have a look up I am

00:17:20,270 --> 00:17:24,500
sort of 70 seriously working in that

00:17:22,160 --> 00:17:27,620
unlike the immutable context state

00:17:24,500 --> 00:17:30,160
management library yeah starting to you

00:17:27,620 --> 00:17:32,600
know I'm complex view on the Internet

00:17:30,160 --> 00:17:37,460
yeah thank you

00:17:32,600 --> 00:17:37,460

YouTube URL: https://www.youtube.com/watch?v=OdIYFt5zyQ8


