Title: Internal Server Error - Horror Stories about APIs and the Browser - LNUG - March 2018
Publication date: 2018-04-09
Playlist: London Node User Group
Description: 
	Internal Server Error

Claudia (https://github.com/claudiamatosa)

Who hasn't found themselves in despair after hours of trying to debug a problem that seemed simple, because halfway down the line the stack trace ended in a file called throw-error.js, or simply there were no errors thrown and the code just didn't work as expected?

The talk will last between 15 and 20 minutes, will be structured in two parts and there will be plenty of gifs and emojis. It should cover errors in Node and browsers.

1. Common bad error handling scenariosStacktrace lost.Code exits without error.Generic error messages (something has failed)....

2. Exploring possible solutions (examples)Custom errors.Formatting error api responses.Displaying errors in the UI.Examples when using Apollo (GraphQL), React and maybe other tools.

Conclusion: your library/utility/api should be built around its users, and they shouldn't need to read the code to know why something is wrong.

(I'm really bad with titles ��)

I'm a freelance front-end developer, currently working with React and GraphQL. twitter (https://lnug.org/twitter.com/claudiamatosa) | github (https://lnug.org/github.com/claudiamatosa)
Captions: 
	00:00:00,000 --> 00:00:04,319
so I'm going to share with you a few

00:00:01,770 --> 00:00:06,660
stories of how debugging went wrong

00:00:04,319 --> 00:00:09,120
between API is and the browser and what

00:00:06,660 --> 00:00:13,830
can we do to make it be a little bit

00:00:09,120 --> 00:00:16,379
better or faster to debug so the first

00:00:13,830 --> 00:00:20,550
story is about a bug that took me 3 days

00:00:16,379 --> 00:00:23,430
to solve I'm going to use this app to

00:00:20,550 --> 00:00:27,240
illustrate this isn't the real app of

00:00:23,430 --> 00:00:28,830
course but this is an app with animal

00:00:27,240 --> 00:00:32,130
photos you can only upload any more

00:00:28,830 --> 00:00:33,989
photos so imagine that you would receive

00:00:32,130 --> 00:00:38,309
a pop-up whenever a new photo was

00:00:33,989 --> 00:00:40,250
uploaded and the pop-up is coming see

00:00:38,309 --> 00:00:46,110
this was work

00:00:40,250 --> 00:00:49,530
pop pop up comes up what okay why is it

00:00:46,110 --> 00:00:51,420
closing have no idea so it seemed like a

00:00:49,530 --> 00:00:53,129
really simple thing to fix you just

00:00:51,420 --> 00:00:57,629
needed to find out where the pop-up

00:00:53,129 --> 00:01:00,809
closed it wasn't that simple so first

00:00:57,629 --> 00:01:02,879
thing was trying to find out what was

00:01:00,809 --> 00:01:06,180
opening the pop-up and the public was

00:01:02,879 --> 00:01:09,710
being opened properly all the parameters

00:01:06,180 --> 00:01:13,619
were being set correctly it was opening

00:01:09,710 --> 00:01:17,009
okay there's no problem that's all

00:01:13,619 --> 00:01:18,509
so what's closing it's there's no close

00:01:17,009 --> 00:01:19,799
to the close function at all it's not

00:01:18,509 --> 00:01:21,750
there's nothing closing it's the only

00:01:19,799 --> 00:01:23,790
way to close this pop-up is to press a

00:01:21,750 --> 00:01:25,619
button or press outside the pop-up

00:01:23,790 --> 00:01:31,850
there's nothing programmatic in the code

00:01:25,619 --> 00:01:35,520
that will close the pop-up so these I

00:01:31,850 --> 00:01:37,290
just ran through the entire code for for

00:01:35,520 --> 00:01:38,520
one two days trying to understand what

00:01:37,290 --> 00:01:41,340
was happening because it was quite a

00:01:38,520 --> 00:01:45,240
complex application this was probably

00:01:41,340 --> 00:01:47,070
something of it stupid to do because

00:01:45,240 --> 00:01:48,890
after some time I just thought okay I'm

00:01:47,070 --> 00:01:51,509
going to debug the routing library

00:01:48,890 --> 00:01:56,009
because what happens whenever the pop-up

00:01:51,509 --> 00:01:57,689
opens it would create a new URL so it

00:01:56,009 --> 00:01:59,189
was basically going to a new page so you

00:01:57,689 --> 00:02:02,610
could come back to the pop-up whenever

00:01:59,189 --> 00:02:07,649
you wanted and yeah there was a race

00:02:02,610 --> 00:02:10,170
condition and I go straight what was

00:02:07,649 --> 00:02:11,940
happening but I don't think this is very

00:02:10,170 --> 00:02:12,690
easy to understand because even I don't

00:02:11,940 --> 00:02:19,280
know exactly what

00:02:12,690 --> 00:02:21,300
what's happening so it starts here

00:02:19,280 --> 00:02:24,210
somewhere in the codes completely

00:02:21,300 --> 00:02:27,630
unrelated to the pop-up there was a

00:02:24,210 --> 00:02:29,250
promise somewhere something was waiting

00:02:27,630 --> 00:02:33,720
to happen and then it would go to a page

00:02:29,250 --> 00:02:35,130
and the variable that was set here was

00:02:33,720 --> 00:02:37,140
for some reason and defined this this

00:02:35,130 --> 00:02:39,390
was a bug in the actual application it

00:02:37,140 --> 00:02:41,520
was a completely different bug and then

00:02:39,390 --> 00:02:45,270
in the meanwhile the pop-up would open

00:02:41,520 --> 00:02:48,660
and it was called the same function go

00:02:45,270 --> 00:02:52,020
to that page and it would go to the page

00:02:48,660 --> 00:02:53,640
and the page name was said so it would

00:02:52,020 --> 00:02:57,510
continue what I wanted to talk on the

00:02:53,640 --> 00:02:59,370
pop-up but then in the meanwhile this

00:02:57,510 --> 00:03:01,620
promise resolved it tries to go to a

00:02:59,370 --> 00:03:04,650
page called undefined and

00:03:01,620 --> 00:03:06,210
it enters the routing library and there

00:03:04,650 --> 00:03:10,920
is a function in there that's checking

00:03:06,210 --> 00:03:12,090
if the page exists and you can see here

00:03:10,920 --> 00:03:14,310
that we are trying to go to a page

00:03:12,090 --> 00:03:17,550
that's undefined so the page doesn't

00:03:14,310 --> 00:03:19,380
exist it returns the code was a bit a

00:03:17,550 --> 00:03:21,800
little bit more complex than this but

00:03:19,380 --> 00:03:24,150
what happened is when when it returns

00:03:21,800 --> 00:03:28,739
there was some side effect that would

00:03:24,150 --> 00:03:30,390
return to the previous page so what

00:03:28,739 --> 00:03:33,750
happens is when this condition was

00:03:30,390 --> 00:03:37,590
called we were on a page called list for

00:03:33,750 --> 00:03:41,910
example and in the meanwhile the pop-up

00:03:37,590 --> 00:03:45,420
would open then it would open the page

00:03:41,910 --> 00:03:46,830
and then these resolved and then it

00:03:45,420 --> 00:03:48,480
would come back to the previous page

00:03:46,830 --> 00:03:52,260
which which was least because when this

00:03:48,480 --> 00:03:56,700
was when this was when this function was

00:03:52,260 --> 00:04:05,070
instanced the previous page was list so

00:03:56,700 --> 00:04:07,050
the pop-up would close yeah so the

00:04:05,070 --> 00:04:08,640
reason why I could I had so much trouble

00:04:07,050 --> 00:04:10,590
debugging was just because this wasn't

00:04:08,640 --> 00:04:12,150
throwing an error at all it's just

00:04:10,590 --> 00:04:14,730
returning there's no warnings there's

00:04:12,150 --> 00:04:18,030
nothing so how can you possibly know

00:04:14,730 --> 00:04:22,049
what is happening so I guess that's a

00:04:18,030 --> 00:04:24,050
lesson to take from this just yeah throw

00:04:22,049 --> 00:04:25,810
errors whether it's a warning or

00:04:24,050 --> 00:04:27,070
anything

00:04:25,810 --> 00:04:29,530
even if you want your function to

00:04:27,070 --> 00:04:32,080
continue executing or if you just want

00:04:29,530 --> 00:04:33,550
it to exit in a really soft way you

00:04:32,080 --> 00:04:35,020
don't want the application to break at

00:04:33,550 --> 00:04:36,790
least through warning at least in

00:04:35,020 --> 00:04:39,430
development so it makes it easier to

00:04:36,790 --> 00:04:40,810
find out what's happening but we all we

00:04:39,430 --> 00:04:49,860
all do this I mean I do this every time

00:04:40,810 --> 00:04:53,080
but shouldn't and the second one was

00:04:49,860 --> 00:04:54,940
really bad and intended consequences so

00:04:53,080 --> 00:04:56,830
I don't know if any of you are familiar

00:04:54,940 --> 00:05:00,580
with swagger it's an API documentation

00:04:56,830 --> 00:05:04,450
tool it shows you a list of available

00:05:00,580 --> 00:05:07,660
available endpoints for an API and what

00:05:04,450 --> 00:05:09,750
methods you can query and it also shows

00:05:07,660 --> 00:05:14,100
you a list of parameters and you can

00:05:09,750 --> 00:05:18,160
make calls to the API from there so I

00:05:14,100 --> 00:05:20,110
wanted to call this API and it had this

00:05:18,160 --> 00:05:24,250
design point had this parameter called

00:05:20,110 --> 00:05:26,370
sort by and I wasn't I wasn't sure if I

00:05:24,250 --> 00:05:28,930
could sort by multiple parameters right

00:05:26,370 --> 00:05:32,919
because nothing nothing anywhere said

00:05:28,930 --> 00:05:36,190
that I could do this but I wanted to try

00:05:32,919 --> 00:05:38,350
why not let's see can I put the coma and

00:05:36,190 --> 00:05:44,919
try starting by two parameters just

00:05:38,350 --> 00:05:45,580
tinkering why not I try I submit the

00:05:44,919 --> 00:05:48,030
request

00:05:45,580 --> 00:05:50,410
it gives me an internal server error

00:05:48,030 --> 00:05:54,639
okay fine maybe the API is just not

00:05:50,410 --> 00:05:57,940
working but suddenly after a while I I

00:05:54,639 --> 00:05:59,530
start looking around me and all the API

00:05:57,940 --> 00:06:00,760
developers are running around and what's

00:05:59,530 --> 00:06:02,940
happening what's happening the server is

00:06:00,760 --> 00:06:02,940
down

00:06:04,280 --> 00:06:14,040
yes yes so this still happened a couple

00:06:10,560 --> 00:06:21,260
of times because I tried again because I

00:06:14,040 --> 00:06:26,280
didn't realize what was happening so

00:06:21,260 --> 00:06:29,910
yeah basically an exception wasn't being

00:06:26,280 --> 00:06:32,820
handled and this had microservices

00:06:29,910 --> 00:06:34,290
everywhere and this particular service

00:06:32,820 --> 00:06:36,780
had lots of other micro services

00:06:34,290 --> 00:06:37,950
connecting to it and they didn't work

00:06:36,780 --> 00:06:43,890
because they couldn't connect to this

00:06:37,950 --> 00:06:47,760
API because it was down it's a nice

00:06:43,890 --> 00:06:50,820
story so I guess the lesson to take from

00:06:47,760 --> 00:06:52,710
this one is catch your errors even if

00:06:50,820 --> 00:06:54,480
it's just in a generic way just catch

00:06:52,710 --> 00:06:58,050
them somewhere is just trying to have

00:06:54,480 --> 00:06:59,130
like a generic place that catches all of

00:06:58,050 --> 00:07:03,960
them so this kind of thing doesn't

00:06:59,130 --> 00:07:06,810
happen I guess I'm going to talk a

00:07:03,960 --> 00:07:09,180
little bit about fronting now just to do

00:07:06,810 --> 00:07:13,650
something to show you something similar

00:07:09,180 --> 00:07:16,100
in the front-end so for example these up

00:07:13,650 --> 00:07:16,100
here

00:07:16,380 --> 00:07:19,769
[Music]

00:07:22,310 --> 00:07:28,040
so I've got this list here and this is

00:07:25,040 --> 00:07:30,710
the final this baby elephant photo was

00:07:28,040 --> 00:07:33,440
carefully crafted so the idea doesn't

00:07:30,710 --> 00:07:35,660
exist I'm going to try if I click here

00:07:33,440 --> 00:07:38,180
for example I can see if the photo in

00:07:35,660 --> 00:07:39,370
the list but if I click here it's going

00:07:38,180 --> 00:07:44,570
to a fake photo

00:07:39,370 --> 00:07:47,780
so doesn't exist the app blows over

00:07:44,570 --> 00:07:49,220
there's nothing here so these are peas

00:07:47,780 --> 00:07:52,280
using reacts for example but you can do

00:07:49,220 --> 00:07:55,220
it with any with any other system with

00:07:52,280 --> 00:07:59,690
any other framework react has distinct

00:07:55,220 --> 00:08:02,300
all there are boundaries and you can

00:07:59,690 --> 00:08:04,190
just surround your codes so this is my

00:08:02,300 --> 00:08:05,750
code for my application you can just

00:08:04,190 --> 00:08:09,020
surround it with a component called

00:08:05,750 --> 00:08:12,980
error boundary and then it catches all

00:08:09,020 --> 00:08:15,860
the herbs there isn't very good but

00:08:12,980 --> 00:08:17,150
still it's showing you something so I

00:08:15,860 --> 00:08:18,950
guess this is some this is something

00:08:17,150 --> 00:08:22,940
that you can also take and the using API

00:08:18,950 --> 00:08:24,350
is as well just show around the mirror

00:08:22,940 --> 00:08:25,460
in this case you don't know what's going

00:08:24,350 --> 00:08:27,050
to happen you don't know what kind of

00:08:25,460 --> 00:08:34,219
problem you're gonna encounter so you

00:08:27,050 --> 00:08:44,810
can just show something ok so the next

00:08:34,219 --> 00:08:47,960
one so we built this form right and the

00:08:44,810 --> 00:08:53,380
formants took away and it was being

00:08:47,960 --> 00:08:57,770
submitted to an api as well and when

00:08:53,380 --> 00:08:59,780
when the when our QA when our QA started

00:08:57,770 --> 00:09:03,500
testing it everything was alright but

00:08:59,780 --> 00:09:05,740
after a while they come to me ok the

00:09:03,500 --> 00:09:07,940
form submission doesn't work on mobile

00:09:05,740 --> 00:09:09,620
phase from submission doesn't work on

00:09:07,940 --> 00:09:12,140
mobile what does it say it's through the

00:09:09,620 --> 00:09:15,790
validation error but the validation

00:09:12,140 --> 00:09:20,450
error was coming from the server ok

00:09:15,790 --> 00:09:21,890
right so why is this happening so I just

00:09:20,450 --> 00:09:24,200
look at it on my phone it works

00:09:21,890 --> 00:09:27,950
perfectly I try on iPhone I try on

00:09:24,200 --> 00:09:30,290
Android everything is working then I

00:09:27,950 --> 00:09:33,920
pick my colleagues phone I type in my

00:09:30,290 --> 00:09:35,690
details it works I give him the phone I

00:09:33,920 --> 00:09:39,560
think it types

00:09:35,690 --> 00:09:40,910
his details it doesn't work I look at

00:09:39,560 --> 00:09:42,170
these little these things to be valid

00:09:40,910 --> 00:09:45,320
doesn't make sense it has everything

00:09:42,170 --> 00:09:46,820
that it just should pass validation it

00:09:45,320 --> 00:09:50,800
passes our front end validation it

00:09:46,820 --> 00:09:54,080
should pass the back end validation okay

00:09:50,800 --> 00:09:58,450
then I go and try remote debugging it in

00:09:54,080 --> 00:10:01,510
Safari but Safari doesn't want to work

00:09:58,450 --> 00:10:04,670
it's always like that

00:10:01,510 --> 00:10:07,250
all I wanted to see it was the response

00:10:04,670 --> 00:10:10,430
from the API so I just went to the

00:10:07,250 --> 00:10:13,700
inspector I looked here the response was

00:10:10,430 --> 00:10:17,930
supposed to show here it's always it was

00:10:13,700 --> 00:10:20,270
showing if I did bug the outside of the

00:10:17,930 --> 00:10:23,870
phone if I did bugs on on my browser on

00:10:20,270 --> 00:10:27,070
my normal browser it's just but here it

00:10:23,870 --> 00:10:30,770
just wasn't working so what do we do

00:10:27,070 --> 00:10:33,770
check the logs we didn't we weren't

00:10:30,770 --> 00:10:35,540
throwing we weren't showing the

00:10:33,770 --> 00:10:37,850
responses in the logs we were just

00:10:35,540 --> 00:10:41,240
showing the requests and this happens

00:10:37,850 --> 00:10:43,610
either in our we had a rough QL server

00:10:41,240 --> 00:10:46,430
and we had an API and neither of them

00:10:43,610 --> 00:10:48,260
was logging responses so we could

00:10:46,430 --> 00:10:50,720
actually not see what the validation

00:10:48,260 --> 00:10:58,340
error was I just wanted to see what the

00:10:50,720 --> 00:11:01,130
validation error was so yeah I guess

00:10:58,340 --> 00:11:04,510
I'll come back so the only solution to

00:11:01,130 --> 00:11:08,270
these would be just to deploy both UPS

00:11:04,510 --> 00:11:10,400
logging the errors and wait until the

00:11:08,270 --> 00:11:14,030
apps were deployed and then we could

00:11:10,400 --> 00:11:15,890
test again which is really troublesome

00:11:14,030 --> 00:11:17,420
if we had a lot of the responses just

00:11:15,890 --> 00:11:20,780
before it would have been way faster

00:11:17,420 --> 00:11:22,250
because it was like this took like 2 2

00:11:20,780 --> 00:11:25,370
hours to solve or something because back

00:11:22,250 --> 00:11:29,839
and forwards oh my you try I try my

00:11:25,370 --> 00:11:31,790
phone I try his phone so what was it

00:11:29,839 --> 00:11:35,300
basically when you're filling in a form

00:11:31,790 --> 00:11:39,110
and you and you blur out in a phone it

00:11:35,300 --> 00:11:42,260
capitalizes the first letter in the

00:11:39,110 --> 00:11:44,600
field and the backend the back-end API

00:11:42,260 --> 00:11:47,890
didn't want the back-end API didn't

00:11:44,600 --> 00:11:47,890
accept capitalized emails

00:11:49,899 --> 00:11:57,760
and the front end is horrible so

00:11:58,270 --> 00:12:02,899
javascript brings a lot of logging

00:12:01,100 --> 00:12:07,250
options you can you can you can have

00:12:02,899 --> 00:12:09,440
several types of vlogs and you can

00:12:07,250 --> 00:12:11,180
filter them if you have if you're low if

00:12:09,440 --> 00:12:13,820
you're saving your lock somewhere where

00:12:11,180 --> 00:12:15,860
you can browse through them you can you

00:12:13,820 --> 00:12:18,290
can filter them out so it's not it's not

00:12:15,860 --> 00:12:20,899
a problem if you log if you walk too

00:12:18,290 --> 00:12:25,250
much I guess unless you're running out

00:12:20,899 --> 00:12:26,720
of money or something and there are

00:12:25,250 --> 00:12:28,790
several logging services that you can

00:12:26,720 --> 00:12:31,670
use these are some examples there's

00:12:28,790 --> 00:12:37,220
others I think people have mentioned

00:12:31,670 --> 00:12:38,839
others as well and you can do the same

00:12:37,220 --> 00:12:40,640
thing that I mentioned before you can

00:12:38,839 --> 00:12:41,839
catch whole you can cut to just random

00:12:40,640 --> 00:12:44,630
errors that you get that you're not

00:12:41,839 --> 00:12:52,070
ready to that you didn't handle and you

00:12:44,630 --> 00:12:54,560
can lock them here yeah so we're going

00:12:52,070 --> 00:13:02,110
to do a bit of life coding I'm gonna try

00:12:54,560 --> 00:13:02,110
out how much time okay

00:13:14,030 --> 00:13:24,440
okay so we're back to the up so this up

00:13:22,160 --> 00:13:27,680
has a particularity you can upload you

00:13:24,440 --> 00:13:29,390
can only upload photos of animals this

00:13:27,680 --> 00:13:31,430
goes this connects to an IP I by

00:13:29,390 --> 00:13:33,590
Microsoft and it processes your photo

00:13:31,430 --> 00:13:37,670
and check if your photo is actual it has

00:13:33,590 --> 00:13:39,080
actually an animal on it and yeah let's

00:13:37,670 --> 00:13:41,710
look at some error scenarios that can

00:13:39,080 --> 00:13:45,740
happen if you didn't handle your errors

00:13:41,710 --> 00:13:48,290
so let's try one so this one will work

00:13:45,740 --> 00:13:50,120
so let's see what happens if it works I

00:13:48,290 --> 00:13:55,370
hope it works I actually didn't test it

00:13:50,120 --> 00:13:58,580
off yeah it works

00:13:55,370 --> 00:14:05,560
here's your photo it's a cut with a

00:13:58,580 --> 00:14:07,820
pillow next photo this is a photo of the

00:14:05,560 --> 00:14:09,440
London Underground's there's no animals

00:14:07,820 --> 00:14:17,900
in here at all so it should fail it's

00:14:09,440 --> 00:14:21,440
expected ok and you see here no animals

00:14:17,900 --> 00:14:22,970
in here it's fine because we know that

00:14:21,440 --> 00:14:24,020
there's no animals in this photo so we

00:14:22,970 --> 00:14:25,850
actually don't really need more

00:14:24,020 --> 00:14:32,200
information even from a user's

00:14:25,850 --> 00:14:41,630
perspective but what if we try this one

00:14:32,200 --> 00:14:42,950
so I don't know if it's big enough you

00:14:41,630 --> 00:14:53,120
can see there's some monkeys in here

00:14:42,950 --> 00:14:54,950
bathing in a spa so let's try uploading

00:14:53,120 --> 00:14:56,630
and now we're going to get the same

00:14:54,950 --> 00:14:58,250
error and now it's not really helpful

00:14:56,630 --> 00:15:00,410
because you know that there's animals in

00:14:58,250 --> 00:15:03,800
there and you want to know why there are

00:15:00,410 --> 00:15:09,410
no animals in there why does it not find

00:15:03,800 --> 00:15:11,150
animals in this photo so let's go back

00:15:09,410 --> 00:15:13,010
to our code I'm using the graph QL

00:15:11,150 --> 00:15:14,810
server here but you can use any type of

00:15:13,010 --> 00:15:20,089
it can be with any server a REST API

00:15:14,810 --> 00:15:23,690
whatever so you can see this is the

00:15:20,089 --> 00:15:26,839
check it's just checking if the

00:15:23,690 --> 00:15:27,410
categories and the tags that came back

00:15:26,839 --> 00:15:29,989
from

00:15:27,410 --> 00:15:34,069
computer vision like API if they have

00:15:29,989 --> 00:15:37,970
the word animal condom in this case they

00:15:34,069 --> 00:15:39,559
don't so we can make these are a little

00:15:37,970 --> 00:15:41,419
bit better we can show the categories

00:15:39,559 --> 00:15:48,949
and the tags that's were returned from

00:15:41,419 --> 00:16:01,609
the server so let's just do it and it

00:15:48,949 --> 00:16:06,409
should have saved no sorry okay this

00:16:01,609 --> 00:16:09,949
Internet is faster than at my house so

00:16:06,409 --> 00:16:11,929
you can see now the API didn't find any

00:16:09,949 --> 00:16:13,129
animals in this photo you have the list

00:16:11,929 --> 00:16:14,659
of tags and you have the list of

00:16:13,129 --> 00:16:19,789
categories there's no animal in here at

00:16:14,659 --> 00:16:22,429
all there is bear then there's men and

00:16:19,789 --> 00:16:26,539
people ok just think there's people

00:16:22,429 --> 00:16:28,729
bathing or something yeah but you've

00:16:26,539 --> 00:16:31,600
seen that there it's not it's not it's

00:16:28,729 --> 00:16:34,159
still not very it's not ready for the UI

00:16:31,600 --> 00:16:35,869
because you don't want your users to see

00:16:34,159 --> 00:16:37,999
these and you want to display you want

00:16:35,869 --> 00:16:39,739
to display your error output in a

00:16:37,999 --> 00:16:41,919
friendlier way you maybe you want to

00:16:39,739 --> 00:16:44,629
display the tags in a different place

00:16:41,919 --> 00:16:53,529
and you want to display a different

00:16:44,629 --> 00:16:56,959
error message so yeah so let's do this

00:16:53,529 --> 00:16:59,869
we can create a custom error that allows

00:16:56,959 --> 00:17:01,879
you to have data on it and then we can

00:16:59,869 --> 00:17:10,879
make it come back to the to the front

00:17:01,879 --> 00:17:13,579
end and then it's and then we can

00:17:10,879 --> 00:17:15,639
actually have a nicely formatted error

00:17:13,579 --> 00:17:20,720
message for this particular situation

00:17:15,639 --> 00:17:22,730
you can just join the tags but if you

00:17:20,720 --> 00:17:25,419
wanted to join the tags with a plus or

00:17:22,730 --> 00:17:25,419
whatever you could

00:17:31,679 --> 00:17:40,720
okay this is not okay I'm not going to

00:17:39,070 --> 00:17:42,520
show this in the app because this is

00:17:40,720 --> 00:17:44,710
showing the right beat at the wrong beat

00:17:42,520 --> 00:17:47,529
but we'll come back here doesn't matter

00:17:44,710 --> 00:17:49,950
okay so now the next time there's just

00:17:47,529 --> 00:17:49,950
another one

00:17:55,140 --> 00:18:00,809
okay so we saw that type of error but we

00:17:58,899 --> 00:18:02,980
only through we only through one error

00:18:00,809 --> 00:18:06,220
and it's always it's always the same

00:18:02,980 --> 00:18:07,960
error regardless of whatever happens but

00:18:06,220 --> 00:18:12,220
so other things can happen it's not only

00:18:07,960 --> 00:18:15,010
not finding animals the API the call to

00:18:12,220 --> 00:18:16,750
micro to the Microsoft API can fail and

00:18:15,010 --> 00:18:20,590
we didn't handle that so what happens if

00:18:16,750 --> 00:18:22,659
we forgot to handle that so I'm going to

00:18:20,590 --> 00:18:23,890
this one is clearly an animal you can

00:18:22,659 --> 00:18:31,870
see that it would find on any move in

00:18:23,890 --> 00:18:33,610
here so yeah just as this is from is the

00:18:31,870 --> 00:18:35,890
worst type of error cannot read property

00:18:33,610 --> 00:18:38,190
fantasyland map of undefined where does

00:18:35,890 --> 00:18:41,830
this come from

00:18:38,190 --> 00:18:43,419
yeah so some of you if you have used Ram

00:18:41,830 --> 00:18:44,919
do you know that this comes from Randall

00:18:43,419 --> 00:18:49,710
which is a functional programming

00:18:44,919 --> 00:18:54,820
utility but it just doesn't tell you I

00:18:49,710 --> 00:18:56,890
mean it's not helpful at all so where

00:18:54,820 --> 00:19:00,429
does this come from if we look at the

00:18:56,890 --> 00:19:03,460
logs there's some there's something here

00:19:00,429 --> 00:19:05,380
speaking about you about ramza I'm not

00:19:03,460 --> 00:19:07,000
going to go in depth with it and then it

00:19:05,380 --> 00:19:08,289
says that it comes from this resolvers

00:19:07,000 --> 00:19:11,919
file which was the one that we were

00:19:08,289 --> 00:19:19,960
looking at before which is the file that

00:19:11,919 --> 00:19:22,600
calls the API so it basically comes from

00:19:19,960 --> 00:19:24,190
this function so at this point you have

00:19:22,600 --> 00:19:25,890
two different types of errors that are

00:19:24,190 --> 00:19:29,710
more or less related to the same thing

00:19:25,890 --> 00:19:31,450
so we can just throw an error code I'm

00:19:29,710 --> 00:19:35,320
throwing an error code for animal not

00:19:31,450 --> 00:19:38,440
phones and when we call the computer

00:19:35,320 --> 00:19:42,370
vision API I can throw another error

00:19:38,440 --> 00:19:42,919
codes for that says there was an analogy

00:19:42,370 --> 00:19:45,139
sir

00:19:42,919 --> 00:19:51,200
just says that it couldn't actually call

00:19:45,139 --> 00:19:54,559
the API for some reason and it sends

00:19:51,200 --> 00:19:56,059
back the message from the API so when we

00:19:54,559 --> 00:20:02,470
see it in the UI we will know exactly

00:19:56,059 --> 00:20:06,580
what happened and now we can have I

00:20:02,470 --> 00:20:06,580
think my checkout failed again

00:20:16,950 --> 00:20:22,410
okay so now we can have a different

00:20:19,170 --> 00:20:24,960
component for each type of error so this

00:20:22,410 --> 00:20:27,960
is one that you have already seen but we

00:20:24,960 --> 00:20:29,430
can also show something else for the

00:20:27,960 --> 00:20:31,320
other error and we can show a default

00:20:29,430 --> 00:20:36,800
default message if it's any other type

00:20:31,320 --> 00:20:36,800
of error so let's do it

00:20:47,190 --> 00:20:55,770
let's upload the thing again yeah we

00:20:53,700 --> 00:20:56,940
couldn't analyze your photo if this is

00:20:55,770 --> 00:20:58,860
big enough

00:20:56,940 --> 00:21:01,140
we couldn't analyze your photo and the

00:20:58,860 --> 00:21:04,800
image is too large we wouldn't be able

00:21:01,140 --> 00:21:08,430
to know this before and that API also

00:21:04,800 --> 00:21:15,270
throws its own error so you can use them

00:21:08,430 --> 00:21:19,290
and throw your own yeah so I think this

00:21:15,270 --> 00:21:23,520
is it so I think the moral of the story

00:21:19,290 --> 00:21:26,640
is here is just fail fail just right at

00:21:23,520 --> 00:21:28,890
the beginning but at least you feel

00:21:26,640 --> 00:21:30,960
nicely throw throw a nice error message

00:21:28,890 --> 00:21:33,330
so your user whether it's the user of

00:21:30,960 --> 00:21:37,650
your library whether it's the user of

00:21:33,330 --> 00:21:39,750
your API or the user of Europe just let

00:21:37,650 --> 00:21:41,190
them know so it's like yeah the worst

00:21:39,750 --> 00:21:42,890
thing about this is that when you have

00:21:41,190 --> 00:21:44,910
errors that are not understandable

00:21:42,890 --> 00:21:48,510
everyone will get stressed around you

00:21:44,910 --> 00:21:50,460
it's not just you it's your colleagues

00:21:48,510 --> 00:21:52,200
it's like it's not just developers its

00:21:50,460 --> 00:21:53,970
products on rescue ways and sometimes

00:21:52,200 --> 00:21:56,100
it's it scales up and people that just

00:21:53,970 --> 00:21:59,670
just go crazy and sometimes it's just a

00:21:56,100 --> 00:22:01,140
simple error just someone didn't type

00:21:59,670 --> 00:22:03,050
the right message but this is really

00:22:01,140 --> 00:22:06,630
difficult

00:22:03,050 --> 00:22:12,480
yeah no questions because that's rough

00:22:06,630 --> 00:22:15,390
sewers yeah so yeah if someone thank you

00:22:12,480 --> 00:22:17,310
I think I might thank you to everyone

00:22:15,390 --> 00:22:18,990
and thank you to my colleagues who also

00:22:17,310 --> 00:22:22,340
list through these errors with me

00:22:18,990 --> 00:22:22,340
there's a few of them in here

00:22:23,900 --> 00:22:28,650

YouTube URL: https://www.youtube.com/watch?v=Ijzfj4aKRPQ


