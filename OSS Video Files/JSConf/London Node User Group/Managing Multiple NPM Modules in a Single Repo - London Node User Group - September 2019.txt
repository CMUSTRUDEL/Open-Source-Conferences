Title: Managing Multiple NPM Modules in a Single Repo - London Node User Group - September 2019
Publication date: 2019-10-03
Playlist: London Node User Group
Description: 
	Presented by Nick O'Leary.

Ever since the start of Node-RED, the runtime and editor components have been packaged together as a single blob of npm module.

With the 0.20 release we split the internals apart into 6 separate new npm modules, along with the original node-red module to glue it all back together - and we did it without end users ever knowing (apart from us talking about it at every chance we got).

This talk reveals how we went about this refactoring and the challenges of managing multiple modules in a single repo. I'll talk about why we ultimately decided not to use one of the various mono-repo tools, such as Lerna, and ultimately decided to roll our own approach.

About the speaker: 

I'm an Open Source developer at IBM and the creator of Node-RED.
I can be found online as @knolleary in lots of the usual places.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:07,259
hello so yes this talk is about no dread

00:00:05,670 --> 00:00:08,730
without really being about no dread it's

00:00:07,259 --> 00:00:12,120
about some of the internals of no dread

00:00:08,730 --> 00:00:15,630
but let me just introduce everything

00:00:12,120 --> 00:00:18,060
first so it is about how we manage

00:00:15,630 --> 00:00:21,390
multiple NPM modules within a single git

00:00:18,060 --> 00:00:23,310
repo let me introduce myself I'm Nicole

00:00:21,390 --> 00:00:26,550
Irie I'm an open source developer at IBM

00:00:23,310 --> 00:00:31,050
I created no dread about six years ago

00:00:26,550 --> 00:00:34,649
now I spoke at this meet-up six years

00:00:31,050 --> 00:00:36,390
ago exactly about two weeks after we

00:00:34,649 --> 00:00:36,809
open sourced the original version

00:00:36,390 --> 00:00:41,219
node-red

00:00:36,809 --> 00:00:42,960
so yeah it's it's come some way in that

00:00:41,219 --> 00:00:46,289
time and I've managed him what at the

00:00:42,960 --> 00:00:46,890
time was a side project in around my day

00:00:46,289 --> 00:00:49,890
job

00:00:46,890 --> 00:00:51,780
it is now my day job to actually work on

00:00:49,890 --> 00:00:53,190
this little side project and run the

00:00:51,780 --> 00:00:55,829
node-red project

00:00:53,190 --> 00:00:57,719
so yes I'm open source developer at IBM

00:00:55,829 --> 00:01:01,800
I run the project I'm also on the open

00:00:57,719 --> 00:01:03,059
Jas fundation cross project Council yeah

00:01:01,800 --> 00:01:04,260
the internation what's wrong there that

00:01:03,059 --> 00:01:06,900
was the end of the sentence across

00:01:04,260 --> 00:01:08,340
project council so you know very

00:01:06,900 --> 00:01:09,659
involved with the OpenGL foundation if

00:01:08,340 --> 00:01:12,210
anyone's interested in finding out more

00:01:09,659 --> 00:01:15,570
about that and stuff going on in that

00:01:12,210 --> 00:01:17,100
area do come and grab me as well so this

00:01:15,570 --> 00:01:19,020
talk is about no dread without being

00:01:17,100 --> 00:01:21,860
about no dread it's about managing

00:01:19,020 --> 00:01:24,479
multiple NPM modules in a single repo

00:01:21,860 --> 00:01:25,979
really it's about how we tore apart the

00:01:24,479 --> 00:01:28,619
internals of node-red and glued it all

00:01:25,979 --> 00:01:30,720
back together without users knowing so

00:01:28,619 --> 00:01:34,380
we did all this in a maintenance release

00:01:30,720 --> 00:01:35,700
effectively but yeah the entire guts

00:01:34,380 --> 00:01:39,750
were ripped apart and put back together

00:01:35,700 --> 00:01:42,630
and no one noticed who has heard of no

00:01:39,750 --> 00:01:44,399
dread a smattering of hands that's

00:01:42,630 --> 00:01:46,590
always nice to see so for those

00:01:44,399 --> 00:01:50,070
wondering what it is

00:01:46,590 --> 00:01:51,600
so no dread is it's come from the IOT

00:01:50,070 --> 00:01:55,890
space about how do you create

00:01:51,600 --> 00:01:57,570
event-driven applications so although

00:01:55,890 --> 00:01:59,329
it's not limited to IOT any sort of

00:01:57,570 --> 00:02:02,340
event-driven application whether it's

00:01:59,329 --> 00:02:04,799
creating a REST API integrating systems

00:02:02,340 --> 00:02:07,920
or listening for sensor events from a

00:02:04,799 --> 00:02:10,679
bit of hardware it came from this idea

00:02:07,920 --> 00:02:12,000
that we're all seasoned professionals we

00:02:10,679 --> 00:02:13,569
can write the code I can write the code

00:02:12,000 --> 00:02:15,549
to access a serial port

00:02:13,569 --> 00:02:18,249
but the time I spend writing that

00:02:15,549 --> 00:02:19,599
boilerplate code is time I'm not spent

00:02:18,249 --> 00:02:22,719
actually solving the problem I'm trying

00:02:19,599 --> 00:02:24,209
to solve so it's really trying to get

00:02:22,719 --> 00:02:26,709
away from having to write code at all

00:02:24,209 --> 00:02:28,060
but then with the flexibility that you

00:02:26,709 --> 00:02:30,489
can write the code when you need to

00:02:28,060 --> 00:02:31,889
so it's flow-based programming for

00:02:30,489 --> 00:02:36,099
event-driven applications

00:02:31,889 --> 00:02:37,810
it's a node.js application when you run

00:02:36,099 --> 00:02:38,590
it you point your web browser at it to

00:02:37,810 --> 00:02:41,019
get the node-red

00:02:38,590 --> 00:02:42,370
editor and that's the view you get the

00:02:41,019 --> 00:02:45,459
palette down the left-hand side are

00:02:42,370 --> 00:02:47,139
nodes each node represents some sort of

00:02:45,459 --> 00:02:49,109
functionality whether it's talking to a

00:02:47,139 --> 00:02:53,169
serial device talking to the Twitter API

00:02:49,109 --> 00:02:55,180
listening for rest events or whatever it

00:02:53,169 --> 00:02:58,000
could be each one you know well-defined

00:02:55,180 --> 00:03:00,219
bit of behavior it's well nicely

00:02:58,000 --> 00:03:02,049
self-contained well defined and you drag

00:03:00,219 --> 00:03:03,219
those into the workspace and you draw

00:03:02,049 --> 00:03:07,599
the wires between them and they

00:03:03,219 --> 00:03:11,019
represent the flow of events so when so

00:03:07,599 --> 00:03:13,090
in this example the dark blue node up

00:03:11,019 --> 00:03:15,250
there is actually connected to the IBM

00:03:13,090 --> 00:03:18,400
IOT platform when it receives a sensor

00:03:15,250 --> 00:03:21,280
event it triggers that top flow it goes

00:03:18,400 --> 00:03:23,229
through a node that will transform that

00:03:21,280 --> 00:03:26,290
javascript object which is what our

00:03:23,229 --> 00:03:28,479
messages does some more work it splits

00:03:26,290 --> 00:03:30,459
tower it just does it does stuff does

00:03:28,479 --> 00:03:33,069
interesting stuff but there's no code

00:03:30,459 --> 00:03:34,389
written behind those you know as a

00:03:33,069 --> 00:03:37,150
developer I've just dragged those nodes

00:03:34,389 --> 00:03:38,590
on configured them so what behaviors I

00:03:37,150 --> 00:03:43,180
want them to do and then hit deploy and

00:03:38,590 --> 00:03:46,030
it's running so that's no dread but as

00:03:43,180 --> 00:03:47,769
far as end-users are concerned all they

00:03:46,030 --> 00:03:52,060
do to get node ready installed is they

00:03:47,769 --> 00:03:53,590
MPM install - gee no dread and they then

00:03:52,060 --> 00:03:56,889
have a node read command they can just

00:03:53,590 --> 00:04:01,319
run and use and what you actually get in

00:03:56,889 --> 00:04:03,879
the node-red NPM module are probably

00:04:01,319 --> 00:04:05,019
I've spent ages trying to work out how

00:04:03,879 --> 00:04:07,389
to draw this diagram

00:04:05,019 --> 00:04:10,239
I've decided over the six years you get

00:04:07,389 --> 00:04:12,489
these three basic bits you get the note

00:04:10,239 --> 00:04:13,900
G airspace runtime so that's the thing

00:04:12,489 --> 00:04:16,690
that's actually running the logic of the

00:04:13,900 --> 00:04:18,759
flows you create you get the

00:04:16,690 --> 00:04:21,609
browser-based editor but it gets served

00:04:18,759 --> 00:04:24,279
up by the runtime so that they are quite

00:04:21,609 --> 00:04:25,990
tightly coupled and then you've got the

00:04:24,279 --> 00:04:27,340
core nodes those default nodes in the

00:04:25,990 --> 00:04:31,690
sidebar

00:04:27,340 --> 00:04:34,150
I will quickly say as Nobles projects

00:04:31,690 --> 00:04:36,640
the main way people extend no dread is

00:04:34,150 --> 00:04:41,320
by writing custom nodes for it at last

00:04:36,640 --> 00:04:43,270
count there was about 2200 third-party

00:04:41,320 --> 00:04:44,320
nodes available from node read so

00:04:43,270 --> 00:04:46,540
there's a huge community of people

00:04:44,320 --> 00:04:48,700
extending node read adding nodes doing

00:04:46,540 --> 00:04:50,770
interesting stuff but no droid comes

00:04:48,700 --> 00:04:53,290
with this corset so when you npm install

00:04:50,770 --> 00:04:55,660
the node-red NPM module that's what you

00:04:53,290 --> 00:05:00,640
got and in terms of how that translated

00:04:55,660 --> 00:05:02,500
to the code yeah we've made some efforts

00:05:00,640 --> 00:05:06,250
to you know structure the the source

00:05:02,500 --> 00:05:08,370
tree appropriately there was editor

00:05:06,250 --> 00:05:11,590
which was all of the resources for the

00:05:08,370 --> 00:05:15,580
for the editor so the client-side

00:05:11,590 --> 00:05:17,080
JavaScript CSS HTML images all of that

00:05:15,580 --> 00:05:18,370
all the stuff that has to get served up

00:05:17,080 --> 00:05:20,440
to the browser

00:05:18,370 --> 00:05:22,690
there's the nodes directory which

00:05:20,440 --> 00:05:25,720
contains the default pallets of nodes

00:05:22,690 --> 00:05:28,150
and then there was the red directory and

00:05:25,720 --> 00:05:31,810
that was the sort of the entry point to

00:05:28,150 --> 00:05:37,060
the entire runtime code and a test

00:05:31,810 --> 00:05:39,220
directory so underneath each of those we

00:05:37,060 --> 00:05:43,600
all there was also fairly reasonably

00:05:39,220 --> 00:05:46,060
well structured and componentized but we

00:05:43,600 --> 00:05:48,400
wanted to get to the point where the

00:05:46,060 --> 00:05:51,120
runtime and the editor were more

00:05:48,400 --> 00:05:54,550
logically separated that they weren't

00:05:51,120 --> 00:05:56,380
embedded in just this one npm module so

00:05:54,550 --> 00:06:00,030
we wanted to tease it out into a number

00:05:56,380 --> 00:06:02,590
of NPM modules for the internals and

00:06:00,030 --> 00:06:04,000
after much head-scratching Bisset I mean

00:06:02,590 --> 00:06:05,890
don't worry about the details just

00:06:04,000 --> 00:06:08,320
appreciate the fact you know the white

00:06:05,890 --> 00:06:10,900
boxes you can see there are instead of

00:06:08,320 --> 00:06:11,860
having the one gray box NPM module we

00:06:10,900 --> 00:06:17,650
were going to be breaking it up into

00:06:11,860 --> 00:06:22,060
these six six I thought that was seven

00:06:17,650 --> 00:06:24,700
anyway a number of internal modules so

00:06:22,060 --> 00:06:26,470
you've still got the runtime you've got

00:06:24,700 --> 00:06:28,690
the editor component and the core nodes

00:06:26,470 --> 00:06:30,610
and the key thing being for the end user

00:06:28,690 --> 00:06:32,920
that they would still just npm install

00:06:30,610 --> 00:06:34,630
the node-red module and it would pull

00:06:32,920 --> 00:06:36,190
all of these modules in glue them

00:06:34,630 --> 00:06:39,160
together and things will carry on

00:06:36,190 --> 00:06:40,289
working exactly as they expect so the

00:06:39,160 --> 00:06:42,330
question was how to

00:06:40,289 --> 00:06:45,020
we restructure the code to now support

00:06:42,330 --> 00:06:47,819
having multiple npm modules in the one

00:06:45,020 --> 00:06:50,300
source tree or indeed did we want to

00:06:47,819 --> 00:06:52,889
split it up into multiple source trees

00:06:50,300 --> 00:06:55,110
very very very quickly decided we did

00:06:52,889 --> 00:06:57,599
not want to start maintaining multiple

00:06:55,110 --> 00:07:00,899
repositories for all of this stuff whole

00:06:57,599 --> 00:07:03,449
host reasons for that probably the the

00:07:00,899 --> 00:07:06,479
winning reason for me that sold me on

00:07:03,449 --> 00:07:10,110
day one was a lot of the features we are

00:07:06,479 --> 00:07:12,089
adding cut across multiple modules so

00:07:10,110 --> 00:07:14,550
when we're adding a new feature it has

00:07:12,089 --> 00:07:15,869
to you know have some embodiment in the

00:07:14,550 --> 00:07:17,909
editor you'll have some embodiment in

00:07:15,869 --> 00:07:19,830
the runtime some of the core nodes might

00:07:17,909 --> 00:07:21,149
want to take advantage of it so trying

00:07:19,830 --> 00:07:22,889
to coordinate pull requests across

00:07:21,149 --> 00:07:24,649
multiple repositories to add a feature

00:07:22,889 --> 00:07:27,240
in it was just a headache

00:07:24,649 --> 00:07:28,559
that felt needless to solve so we

00:07:27,240 --> 00:07:31,259
decided to solve a bunch of other

00:07:28,559 --> 00:07:34,830
headaches instead so we're keeping it in

00:07:31,259 --> 00:07:37,709
a single repository we wanted to be

00:07:34,830 --> 00:07:40,729
maintainable obviously we didn't want to

00:07:37,709 --> 00:07:43,379
adopt a whole host of extra tooling so

00:07:40,729 --> 00:07:45,330
we didn't want any new developers coming

00:07:43,379 --> 00:07:48,930
to the project to have to spend a week

00:07:45,330 --> 00:07:50,669
learning a long list of new commands

00:07:48,930 --> 00:07:53,069
using tooling that they're not going to

00:07:50,669 --> 00:07:55,319
be familiar with so I want to keep it

00:07:53,069 --> 00:07:56,459
accessible and also that's for ourselves

00:07:55,319 --> 00:07:58,589
as well you know we didn't want to have

00:07:56,459 --> 00:08:01,620
to learn a whole bunch of new tooling

00:07:58,589 --> 00:08:06,240
for yeah will for the way we're already

00:08:01,620 --> 00:08:07,860
working so we did a bit of a troll

00:08:06,240 --> 00:08:09,959
because you know this is a well solved

00:08:07,860 --> 00:08:12,719
problem I'm not claiming with we've

00:08:09,959 --> 00:08:14,550
broken new ground here so there was a

00:08:12,719 --> 00:08:16,289
number of different approaches and the

00:08:14,550 --> 00:08:17,669
one you stumbled across really quickly

00:08:16,289 --> 00:08:20,369
when you start looking this is learner

00:08:17,669 --> 00:08:24,629
there's only one used learner played and

00:08:20,369 --> 00:08:26,249
learner a few hands so learner is like

00:08:24,629 --> 00:08:29,069
say it's the tool you stumble across as

00:08:26,249 --> 00:08:31,860
soon as you starts invest researching

00:08:29,069 --> 00:08:33,689
this problem it it gives you a whole

00:08:31,860 --> 00:08:36,209
suite of tools and command lines you can

00:08:33,689 --> 00:08:40,500
run to manage multiple NPM modules in

00:08:36,209 --> 00:08:42,089
one repo it's used by Babel webdriver

00:08:40,500 --> 00:08:44,490
gaps FIFO you know there's there's

00:08:42,089 --> 00:08:46,980
plenty of big projects using it so it

00:08:44,490 --> 00:08:48,750
you know it is battle-hardened and I

00:08:46,980 --> 00:08:53,940
spent a few days with it just trying to

00:08:48,750 --> 00:08:58,080
work out how to get started and yeah I

00:08:53,940 --> 00:08:59,880
was put off it was it does a lot and it

00:08:58,080 --> 00:09:02,760
does a lot of things that we don't need

00:08:59,880 --> 00:09:04,770
and that just put me off this idea of

00:09:02,760 --> 00:09:06,720
having to spend a lot of time working

00:09:04,770 --> 00:09:08,810
out what we don't need for what it

00:09:06,720 --> 00:09:12,030
offers to focus on what we do need

00:09:08,810 --> 00:09:14,760
another option some people talk about is

00:09:12,030 --> 00:09:16,680
get sub-modules a very quick search

00:09:14,760 --> 00:09:19,740
found this tweet and that kind of put

00:09:16,680 --> 00:09:22,500
paid to that I've used git submodules

00:09:19,740 --> 00:09:26,400
before and I agree with this

00:09:22,500 --> 00:09:30,180
you just don't again they're fine they

00:09:26,400 --> 00:09:33,510
kind of work but yeah the num times you

00:09:30,180 --> 00:09:35,160
can screw it up is impressive so we

00:09:33,510 --> 00:09:37,890
ended up thinking well it must be

00:09:35,160 --> 00:09:40,470
possible you know we're a relatively

00:09:37,890 --> 00:09:42,710
small codebase our needs of modest it

00:09:40,470 --> 00:09:47,310
can't be that hard

00:09:42,710 --> 00:09:48,780
spoiler it wasn't really so the rest of

00:09:47,310 --> 00:09:51,180
talk is a be about you know how have

00:09:48,780 --> 00:09:53,550
we'd rolled our own and what's worked

00:09:51,180 --> 00:09:54,570
what hasn't worked or what what else are

00:09:53,550 --> 00:10:00,570
we going to be doing about it in the

00:09:54,570 --> 00:10:02,220
future so to think about well what does

00:10:00,570 --> 00:10:05,010
it mean to have more to MPN modules in a

00:10:02,220 --> 00:10:07,200
repository as a developer I want suggest

00:10:05,010 --> 00:10:10,680
we have to develop the code and run it

00:10:07,200 --> 00:10:13,260
you know that and have the tests run you

00:10:10,680 --> 00:10:15,060
know these not unreasonable demands when

00:10:13,260 --> 00:10:17,630
you've got a source tree like we had

00:10:15,060 --> 00:10:20,220
where you've got different components in

00:10:17,630 --> 00:10:24,300
adjacent directories like this so

00:10:20,220 --> 00:10:26,160
directory is a and B in your code you'll

00:10:24,300 --> 00:10:28,050
have lots of require statements just

00:10:26,160 --> 00:10:29,910
requiring the JavaScript files and

00:10:28,050 --> 00:10:32,490
delving you know doing the relative path

00:10:29,910 --> 00:10:34,440
thing to load it and that's fine and

00:10:32,490 --> 00:10:36,720
that's fine when it's all in one NPM

00:10:34,440 --> 00:10:38,760
module because relative paths are fine

00:10:36,720 --> 00:10:40,620
when you're inside one module but as

00:10:38,760 --> 00:10:42,480
soon as am as soon as you want a and B

00:10:40,620 --> 00:10:47,010
to be different modules you can't assume

00:10:42,480 --> 00:10:49,020
anything about relative locations yeah

00:10:47,010 --> 00:10:51,720
what you want to be able to do in Madre

00:10:49,020 --> 00:10:54,510
is just require B yeah this isn't rocket

00:10:51,720 --> 00:10:56,010
science this is all of your stuff so the

00:10:54,510 --> 00:11:01,800
question was well how can we arrange our

00:10:56,010 --> 00:11:04,860
code to manage that so the trick and

00:11:01,800 --> 00:11:06,690
it's not much of a trick is to put a and

00:11:04,860 --> 00:11:07,520
B inside a node a directory called node

00:11:06,690 --> 00:11:09,320
modules

00:11:07,520 --> 00:11:11,390
and then make sure you've got

00:11:09,320 --> 00:11:13,580
package.json in each one so you're

00:11:11,390 --> 00:11:15,260
starting to build up a directories a and

00:11:13,580 --> 00:11:18,410
B and now directories of what you want

00:11:15,260 --> 00:11:22,130
your publish modules to look like so

00:11:18,410 --> 00:11:24,560
when you do require be no module loading

00:11:22,130 --> 00:11:26,089
it works its way up the directory path

00:11:24,560 --> 00:11:27,709
looking for a directory called node

00:11:26,089 --> 00:11:29,630
modules as soon as it finds that it

00:11:27,709 --> 00:11:32,330
looks in that directory for the module

00:11:29,630 --> 00:11:33,589
it's trying to load now most of the time

00:11:32,330 --> 00:11:34,790
you have node modules because you've run

00:11:33,589 --> 00:11:37,730
npm install and it's got your

00:11:34,790 --> 00:11:40,490
dependencies in but you can hack that so

00:11:37,730 --> 00:11:44,209
it actually finds your development code

00:11:40,490 --> 00:11:48,080
that npm hasn't gone anywhere near so

00:11:44,209 --> 00:11:49,279
that's yeah really if that that's my

00:11:48,080 --> 00:11:50,839
talk over really mean that that's what

00:11:49,279 --> 00:11:53,510
we did we stuck things under node

00:11:50,839 --> 00:11:54,860
modules now obviously we didn't want

00:11:53,510 --> 00:11:56,240
node modules at the top level of the

00:11:54,860 --> 00:11:59,000
project because then it would get all

00:11:56,240 --> 00:12:00,140
cluttered up with all the dependencies

00:11:59,000 --> 00:12:02,270
and all the real dependencies that we

00:12:00,140 --> 00:12:04,640
have to npm install so we ended up with

00:12:02,270 --> 00:12:07,640
this structure so the top-level there is

00:12:04,640 --> 00:12:09,170
a package.json that one has all of the

00:12:07,640 --> 00:12:10,820
dependencies in so all of the

00:12:09,170 --> 00:12:13,040
dependencies for all of our individual

00:12:10,820 --> 00:12:15,260
modules are in there and our development

00:12:13,040 --> 00:12:18,920
dependencies and that's the only thing

00:12:15,260 --> 00:12:21,350
we ever run npm install against we then

00:12:18,920 --> 00:12:24,079
have a packages directory just to make

00:12:21,350 --> 00:12:26,899
sure our node are fake node modules is

00:12:24,079 --> 00:12:30,200
not clusters at the top with the real

00:12:26,899 --> 00:12:35,329
node modules and then under that the

00:12:30,200 --> 00:12:37,130
source trees for the seven rc8 is seven

00:12:35,329 --> 00:12:39,950
it's six were the white boxes and the

00:12:37,130 --> 00:12:41,870
seventh was the big great anyway of the

00:12:39,950 --> 00:12:44,470
modules we want to end up with so that

00:12:41,870 --> 00:12:47,270
now means any code within any of the

00:12:44,470 --> 00:12:48,920
modules can now just require one of the

00:12:47,270 --> 00:12:51,970
other modules as it would as if it had

00:12:48,920 --> 00:12:54,800
been MPM installed and it will just work

00:12:51,970 --> 00:12:58,750
but the key thing is all of our

00:12:54,800 --> 00:13:01,459
dependencies and development sees only

00:12:58,750 --> 00:13:06,440
are maintained in that top level package

00:13:01,459 --> 00:13:08,959
jason but of course that raises some

00:13:06,440 --> 00:13:13,370
challenges and some other things to

00:13:08,959 --> 00:13:14,870
think about so here are five things it

00:13:13,370 --> 00:13:17,930
was four things within our member to v

00:13:14,870 --> 00:13:20,090
five things about what that then meant

00:13:17,930 --> 00:13:23,480
in terms of how we manage this code

00:13:20,090 --> 00:13:25,670
so first about is managing the tests so

00:13:23,480 --> 00:13:28,730
the node-red codebase we already had

00:13:25,670 --> 00:13:32,900
this structure that given a source tree

00:13:28,730 --> 00:13:34,610
a indexed which is under a and B under

00:13:32,900 --> 00:13:37,520
the test directory we would have we have

00:13:34,610 --> 00:13:39,380
unit tests and for every file in the

00:13:37,520 --> 00:13:42,740
source tree we have a corresponding spec

00:13:39,380 --> 00:13:46,070
file and in fact we've got a build task

00:13:42,740 --> 00:13:48,800
that will fail the build if a file is

00:13:46,070 --> 00:13:52,910
added to the source tree and we don't

00:13:48,800 --> 00:13:54,320
add a test file and after a couple of

00:13:52,910 --> 00:13:56,420
weeks that I added an extra test to make

00:13:54,320 --> 00:13:59,180
sure we didn't add an empty test file

00:13:56,420 --> 00:14:01,130
because it was too easy just to touch

00:13:59,180 --> 00:14:03,140
the file so it existed to pass the test

00:14:01,130 --> 00:14:06,020
so actually make sure it's got something

00:14:03,140 --> 00:14:08,510
in so we have we still have some files

00:14:06,020 --> 00:14:10,760
that just have a stub of a test saying

00:14:08,510 --> 00:14:14,720
must write some more tests but the

00:14:10,760 --> 00:14:16,700
principles there anyway I digress that's

00:14:14,720 --> 00:14:20,000
the test structure we have so for every

00:14:16,700 --> 00:14:24,200
source file we have a spec file for the

00:14:20,000 --> 00:14:26,060
unit tests so that means in our test

00:14:24,200 --> 00:14:30,280
files they've also got to load the file

00:14:26,060 --> 00:14:32,780
their testing and there's well frankly a

00:14:30,280 --> 00:14:36,650
lot of relative paths going from the

00:14:32,780 --> 00:14:38,960
test tree into the source tree and the

00:14:36,650 --> 00:14:40,220
fact there was you know a couple I think

00:14:38,960 --> 00:14:43,550
there was about a hundred source files

00:14:40,220 --> 00:14:45,200
in node read with tests whenever we did

00:14:43,550 --> 00:14:48,220
any sort of refactoring and moving files

00:14:45,200 --> 00:14:51,130
around that was a lot of work just to

00:14:48,220 --> 00:14:55,700
get the relative paths all sorted and

00:14:51,130 --> 00:14:57,140
that was a real pain so we found we

00:14:55,700 --> 00:15:00,530
could actually use the same node module

00:14:57,140 --> 00:15:06,200
trick so in the test tree we added a

00:15:00,530 --> 00:15:09,350
node module directory and a the NR test

00:15:06,200 --> 00:15:12,160
utils module we added in as a utility

00:15:09,350 --> 00:15:14,660
that all of the tests could load and

00:15:12,160 --> 00:15:16,940
well we decide because that test module

00:15:14,660 --> 00:15:18,020
was inherently tied to the state of the

00:15:16,940 --> 00:15:20,510
node-red source tree it wasn't worth

00:15:18,020 --> 00:15:23,420
publishing to MPN is its own thing so

00:15:20,510 --> 00:15:26,000
it's another little NPM module embedded

00:15:23,420 --> 00:15:28,460
in the repository used by the tests and

00:15:26,000 --> 00:15:32,510
what that does I mean that's all of the

00:15:28,460 --> 00:15:34,730
code that's in there it

00:15:32,510 --> 00:15:38,030
it knows the relative path from where it

00:15:34,730 --> 00:15:41,210
is to the source tree and then it

00:15:38,030 --> 00:15:43,730
exposes a require and a resolve as you

00:15:41,210 --> 00:15:47,930
would recognize from from node zone

00:15:43,730 --> 00:15:51,440
requiring resolve so now a test can when

00:15:47,930 --> 00:15:54,590
it needs to require a particular file or

00:15:51,440 --> 00:15:57,650
find out its path it just has to require

00:15:54,590 --> 00:16:00,080
no test utils which because node modules

00:15:57,650 --> 00:16:03,640
is in the hierarchy of the path it finds

00:16:00,080 --> 00:16:06,140
and then it can use that to require a a

00:16:03,640 --> 00:16:10,490
file in the source tree without having

00:16:06,140 --> 00:16:11,810
to worry about the relative paths now as

00:16:10,490 --> 00:16:13,310
a pain migrating to that excited to

00:16:11,810 --> 00:16:16,040
update every single test to use that but

00:16:13,310 --> 00:16:18,590
once that's been done we can now as and

00:16:16,040 --> 00:16:21,410
when we move files around is it

00:16:18,590 --> 00:16:25,790
minimizes the the workload to keep

00:16:21,410 --> 00:16:27,380
things in sync but yeah this doing this

00:16:25,790 --> 00:16:29,410
was kind of born straight from that idea

00:16:27,380 --> 00:16:32,660
of putting this node modules into the

00:16:29,410 --> 00:16:38,270
sauce hierarchy so that we can add

00:16:32,660 --> 00:16:41,300
things in that any file can require next

00:16:38,270 --> 00:16:43,220
on the list Oh see now you've got actual

00:16:41,300 --> 00:16:45,890
code in node modules that you care about

00:16:43,220 --> 00:16:47,660
and the one thing you don't do with node

00:16:45,890 --> 00:16:49,400
projects is you don't put node modules

00:16:47,660 --> 00:16:51,380
under version control so you have node

00:16:49,400 --> 00:16:53,510
modules and you'll get ignore but of

00:16:51,380 --> 00:16:56,060
course now we've got yeah not all node

00:16:53,510 --> 00:16:59,210
modules are equal so you're get ignore

00:16:56,060 --> 00:17:01,430
needs to unag nor the node modules you

00:16:59,210 --> 00:17:04,699
actually care about and that's good

00:17:01,430 --> 00:17:06,589
because most Texas's vs code at and

00:17:04,699 --> 00:17:09,470
whatever you use will pay attention to

00:17:06,589 --> 00:17:12,589
get ignore and by default they will

00:17:09,470 --> 00:17:14,120
won't list node modules but if you do

00:17:12,589 --> 00:17:16,810
that they will then shot start showing

00:17:14,120 --> 00:17:19,790
you the ones you actually want to edit

00:17:16,810 --> 00:17:22,130
then you get to github and github very

00:17:19,790 --> 00:17:25,520
helpfully doesn't pay attention to that

00:17:22,130 --> 00:17:28,880
and when you commit some changes it

00:17:25,520 --> 00:17:32,210
won't generate diffs for files under a

00:17:28,880 --> 00:17:34,580
directory with node modules in which is

00:17:32,210 --> 00:17:36,890
a real pain when you're trying to review

00:17:34,580 --> 00:17:40,280
changes and all of your source code is

00:17:36,890 --> 00:17:42,980
in a directory with no modules in for

00:17:40,280 --> 00:17:46,130
some reason if you had to get attributes

00:17:42,980 --> 00:17:54,110
with that in it tells get

00:17:46,130 --> 00:17:55,610
to not do that linguist being the module

00:17:54,110 --> 00:17:59,270
that github uses to identify things

00:17:55,610 --> 00:18:00,770
about source code that I forget that I

00:17:59,270 --> 00:18:02,480
mean that was in buried deep in a

00:18:00,770 --> 00:18:05,030
foreign post somewhere and I was so

00:18:02,480 --> 00:18:07,340
pleased to find it only works for the

00:18:05,030 --> 00:18:10,190
desktop view on your mobile view it

00:18:07,340 --> 00:18:11,450
still refuses to show the diffs but

00:18:10,190 --> 00:18:16,820
that's okay I don't tend to review

00:18:11,450 --> 00:18:20,630
source code on my mobile managing

00:18:16,820 --> 00:18:22,190
package versions so now we've got the

00:18:20,630 --> 00:18:24,220
top-level package.json and also you've

00:18:22,190 --> 00:18:27,350
got a package.json inside every module

00:18:24,220 --> 00:18:29,510
we chose we ought to keep the version

00:18:27,350 --> 00:18:31,370
number of every module in sync we're not

00:18:29,510 --> 00:18:33,169
going to do a fixed release of one

00:18:31,370 --> 00:18:35,630
module you know we're going to keep them

00:18:33,169 --> 00:18:37,159
all in sync for now so when I say we

00:18:35,630 --> 00:18:40,520
didn't want lots of new tooling there's

00:18:37,159 --> 00:18:42,620
a little bit so we added a script that I

00:18:40,520 --> 00:18:44,179
give it to the version number and it

00:18:42,620 --> 00:18:46,880
will update all the package or Jason's

00:18:44,179 --> 00:18:49,490
to that version including where it where

00:18:46,880 --> 00:18:53,830
we have the dependencies between the

00:18:49,490 --> 00:18:53,830
different packages that's nice and easy

00:18:53,860 --> 00:18:59,539
there is an issue that as we run out and

00:18:57,860 --> 00:19:02,780
PM are outdated and we update our

00:18:59,539 --> 00:19:04,850
dependency versions we need to make sure

00:19:02,780 --> 00:19:06,080
that not only do we update in the top

00:19:04,850 --> 00:19:08,120
level because that's what we're testing

00:19:06,080 --> 00:19:09,559
against because that's what we've npm

00:19:08,120 --> 00:19:11,150
installed we need to make sure that

00:19:09,559 --> 00:19:14,360
percolates down to the individual

00:19:11,150 --> 00:19:16,190
package or Jason's so you know here's an

00:19:14,360 --> 00:19:18,830
example our Jason r2 one at the top

00:19:16,190 --> 00:19:22,400
level will have upgraded to 165 but the

00:19:18,830 --> 00:19:24,950
one buried down here is still on 163 so

00:19:22,400 --> 00:19:27,010
to manage that we created another one a

00:19:24,950 --> 00:19:29,480
verified package dependencies that

00:19:27,010 --> 00:19:31,400
basically checks that whatever I say I

00:19:29,480 --> 00:19:33,470
want at the top level one is reflected

00:19:31,400 --> 00:19:35,419
in the lower level ones and that's been

00:19:33,470 --> 00:19:38,510
added to the build so again the build

00:19:35,419 --> 00:19:42,289
will fail if we forget when we routinely

00:19:38,510 --> 00:19:44,179
forget to update the ones and again I

00:19:42,289 --> 00:19:45,980
know Lerner provides all the tooling to

00:19:44,179 --> 00:19:49,309
do this as well but you know these are

00:19:45,980 --> 00:19:51,200
pretty simple problems to fix a couple

00:19:49,309 --> 00:19:53,929
there are a couple of gotchas with that

00:19:51,200 --> 00:19:55,970
it doesn't check optional depends sees

00:19:53,929 --> 00:19:57,890
just I haven't written that code so we

00:19:55,970 --> 00:19:59,360
did ship a down level B crypt for a

00:19:57,890 --> 00:20:02,630
couple versions because I

00:19:59,360 --> 00:20:03,860
updated at the top level and because we

00:20:02,630 --> 00:20:07,309
have it as an optional dependency for

00:20:03,860 --> 00:20:09,970
reasons we shipped a couple versions not

00:20:07,309 --> 00:20:12,890
spotting we had an updated in the the

00:20:09,970 --> 00:20:15,320
actual module we ship so that's

00:20:12,890 --> 00:20:17,660
something to fix the trickier one is if

00:20:15,320 --> 00:20:20,510
we add a brand new dependency to the top

00:20:17,660 --> 00:20:22,790
level obviously nothing knows which

00:20:20,510 --> 00:20:26,270
lower level one it ought to be in so

00:20:22,790 --> 00:20:27,830
that that's still an error prone you

00:20:26,270 --> 00:20:30,710
know we have to keep a close watch on

00:20:27,830 --> 00:20:33,790
but we very rarely add new dependencies

00:20:30,710 --> 00:20:36,290
so it hasn't been enough an issue yet

00:20:33,790 --> 00:20:39,260
building a release we already had a

00:20:36,290 --> 00:20:42,140
release past that would build our source

00:20:39,260 --> 00:20:45,260
code and create a directory that we

00:20:42,140 --> 00:20:46,460
could then run npm publish in and a zip

00:20:45,260 --> 00:20:50,120
file we could stick in the github

00:20:46,460 --> 00:20:52,190
release that's now been updated so now

00:20:50,120 --> 00:20:55,910
it spits out a TG Zed for each of those

00:20:52,190 --> 00:20:58,510
modules and we can run npm publish

00:20:55,910 --> 00:21:01,460
against each of those tar files and

00:20:58,510 --> 00:21:04,309
again another thing we haven't got which

00:21:01,460 --> 00:21:05,750
we should have is when we do that it

00:21:04,309 --> 00:21:07,940
would be great if it's spat out a script

00:21:05,750 --> 00:21:10,250
that I could run to run those NP and

00:21:07,940 --> 00:21:13,130
publishes the automatically spots is a

00:21:10,250 --> 00:21:19,580
beta release or not so I get the tags

00:21:13,130 --> 00:21:20,929
right when I publish it to NPM so in

00:21:19,580 --> 00:21:22,730
terms of what we're doing next around

00:21:20,929 --> 00:21:24,470
this yeah automating a few more of the

00:21:22,730 --> 00:21:29,470
chores around depends checking amp in

00:21:24,470 --> 00:21:34,549
publishing but we did this change about

00:21:29,470 --> 00:21:37,340
a year ago now and it hasn't got in the

00:21:34,549 --> 00:21:38,750
way so really what we're mainly focus on

00:21:37,340 --> 00:21:40,309
now is just forgetting about it and just

00:21:38,750 --> 00:21:42,320
getting on with developing node-red

00:21:40,309 --> 00:21:44,720
and as far as end-users are concerned

00:21:42,320 --> 00:21:50,030
they continue just to npm install - gee

00:21:44,720 --> 00:21:52,610
no dread it's worth saying and you know

00:21:50,030 --> 00:21:54,230
you I'm sure you'll have the slides at

00:21:52,610 --> 00:21:56,960
some point to click these links I don't

00:21:54,230 --> 00:22:00,890
expect you to memorize them now a lot of

00:21:56,960 --> 00:22:03,410
what we did was influenced by known

00:22:00,890 --> 00:22:07,370
Lawson's post about CouchDB and why they

00:22:03,410 --> 00:22:09,620
moved away from Lerner and the AL a mono

00:22:07,370 --> 00:22:10,730
mono repo publishing I mean yeah

00:22:09,620 --> 00:22:14,380
everything I've shown you is pretty much

00:22:10,730 --> 00:22:14,380
the principles are lifted

00:22:14,650 --> 00:22:19,420
and that's kind of it really in terms of

00:22:18,320 --> 00:22:23,330
what we've done with node-red

00:22:19,420 --> 00:22:24,980
like I said we are carrying on just

00:22:23,330 --> 00:22:26,900
getting on no dread for those familiar

00:22:24,980 --> 00:22:30,970
with no dread we've talks around getting

00:22:26,900 --> 00:22:34,730
to our 1.0 release real soon and

00:22:30,970 --> 00:22:36,970
September is our goal forgetting 1.0

00:22:34,730 --> 00:22:41,950
released you may realize there's about

00:22:36,970 --> 00:22:44,660
five days left in September so I've got

00:22:41,950 --> 00:22:45,980
yes but we're not announcing exactly

00:22:44,660 --> 00:22:47,750
when but just keep an eye out in the

00:22:45,980 --> 00:22:51,650
next few days because something might

00:22:47,750 --> 00:22:54,080
get released called 1.0 if you want to

00:22:51,650 --> 00:22:56,150
try out no dreads no dread gorg if you

00:22:54,080 --> 00:22:57,590
want to talk about any of this stuff and

00:22:56,150 --> 00:23:00,290
even though dread stuff any of the open

00:22:57,590 --> 00:23:01,970
JSF stuff I'm around for a while so

00:23:00,290 --> 00:23:07,660
thank very much

00:23:01,970 --> 00:23:07,660

YouTube URL: https://www.youtube.com/watch?v=PzSHkF-adbk


