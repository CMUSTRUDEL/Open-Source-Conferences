Title: Bootstrapping a Startup with SailsJS - London Node User Group - April 2019
Publication date: 2019-05-02
Playlist: London Node User Group
Description: 
	Presented by Simon Birchall.

Over the last 18 months I have bootstrapped my startup using SailsJS. What did I learn? What do you get out of the box? How has the project evolved? Am I happy with my choice 18 months later?
I have previously used Rails, ASP.MVC and Laravell. I had decided on Node for the backend - but what framework would I choose? What do I really need? What can I trust? How does SailsJS differ to the aforementioned frameworks and how much bang can my buck get?

About the speaker:

Hi, I'm Simon, physics graduate, software engineer, team lead and now technical co-founder of Kiffgo.com. As the technical co-founder I had some stack decisions to make. I arrived at Node + SailsJS. From webpack integration, unit testing to production deployment I've done it with SailsJS and am willing to share my experience.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:05,250
hello I'm Simon welcome to my talk let's

00:00:03,300 --> 00:00:07,529
see if this all hangs together if I'm

00:00:05,250 --> 00:00:08,340
ever too quiet or you can't see anything

00:00:07,529 --> 00:00:10,559
because it's too small on the screen

00:00:08,340 --> 00:00:13,469
please please let me know

00:00:10,559 --> 00:00:16,109
hi right so this is a bootstrapping a

00:00:13,469 --> 00:00:18,810
startup with sales j/s there's the sales

00:00:16,109 --> 00:00:20,310
logo in the bottom bottom left there Who

00:00:18,810 --> 00:00:23,730
am I and why should you care what I

00:00:20,310 --> 00:00:27,090
think so I'm Simon technical co-founder

00:00:23,730 --> 00:00:29,550
of caf-co i do physics degree worked in

00:00:27,090 --> 00:00:31,619
games industry very briefly worked in

00:00:29,550 --> 00:00:33,780
the Microsoft ERP ecosystem for a number

00:00:31,619 --> 00:00:37,410
of years worked at another marketplace

00:00:33,780 --> 00:00:42,000
startup and for last 18 months binh tay

00:00:37,410 --> 00:00:44,700
co founder of keith cocom worked with

00:00:42,000 --> 00:00:46,739
some other MVC frameworks so asp and be

00:00:44,700 --> 00:00:48,899
seeking like five years ago it's

00:00:46,739 --> 00:00:50,910
probably not super rather than Ruby on

00:00:48,899 --> 00:00:55,410
Rails for some personal projects about a

00:00:50,910 --> 00:00:57,710
year of bad laravel and of course my

00:00:55,410 --> 00:01:02,699
stating mumps with sales GS

00:00:57,710 --> 00:01:05,070
so what is kif go you may ask it's like

00:01:02,699 --> 00:01:07,229
uber for man and van pretty much if you

00:01:05,070 --> 00:01:10,710
need a man van we can find one we can be

00:01:07,229 --> 00:01:12,119
anywhere in the UK in under one hour we

00:01:10,710 --> 00:01:13,320
can book through the app like uber it's

00:01:12,119 --> 00:01:14,030
built and react native which is

00:01:13,320 --> 00:01:16,670
interesting

00:01:14,030 --> 00:01:19,259
available on the App Store Play Store

00:01:16,670 --> 00:01:20,400
you can book fook if go calm she's

00:01:19,259 --> 00:01:22,650
bitten react yes which is another

00:01:20,400 --> 00:01:25,020
interesting topic and we did business

00:01:22,650 --> 00:01:27,600
career jobs as well we're not hiring at

00:01:25,020 --> 00:01:31,020
the moment so that's the worry this

00:01:27,600 --> 00:01:32,549
isn't an extended pitch so let's just

00:01:31,020 --> 00:01:35,340
skip over this because I got a time

00:01:32,549 --> 00:01:37,350
myself earlier and this is this stuff

00:01:35,340 --> 00:01:44,780
let's just assume I was aware of my

00:01:37,350 --> 00:01:44,780
options and made good decisions so

00:01:44,890 --> 00:01:51,380
one day promises what the sales JSA

00:01:47,630 --> 00:01:52,910
claimed to do it provides you of an ORM

00:01:51,380 --> 00:01:54,890
which is great

00:01:52,910 --> 00:01:58,100
generators boilerplate and everything

00:01:54,890 --> 00:02:00,620
templating for getting your HTML files

00:01:58,100 --> 00:02:05,360
out provide sessions and security out

00:02:00,620 --> 00:02:09,920
the box testability modularity comes

00:02:05,360 --> 00:02:14,990
with a console logging scripts excellent

00:02:09,920 --> 00:02:16,520
roots so api's need roots right that's

00:02:14,990 --> 00:02:17,510
what we've got here roots files pretty

00:02:16,520 --> 00:02:20,000
obvious

00:02:17,510 --> 00:02:24,740
fashion show I'll show you a roots file

00:02:20,000 --> 00:02:27,709
there it is a method that's your URL

00:02:24,740 --> 00:02:31,280
that's your action or controller or what

00:02:27,709 --> 00:02:33,380
have you if you've got CSRF going on you

00:02:31,280 --> 00:02:37,120
can do that if you've got some cause

00:02:33,380 --> 00:02:40,250
stuff yeah cross origin request stuff

00:02:37,120 --> 00:02:43,730
going on there and that's there yeah

00:02:40,250 --> 00:02:47,959
that's a routes file pretty

00:02:43,730 --> 00:02:50,269
straightforward also it does a blueprint

00:02:47,959 --> 00:02:50,780
routes if you go in for that sort of

00:02:50,269 --> 00:02:54,050
thing

00:02:50,780 --> 00:02:56,959
I personally Knox I'm mainly using it as

00:02:54,050 --> 00:02:58,790
an API but if you're doing the MVC stuff

00:02:56,959 --> 00:03:00,320
and you want to get your get requests to

00:02:58,790 --> 00:03:04,310
automatically generate the route you can

00:03:00,320 --> 00:03:08,000
do that but I've turned that off in this

00:03:04,310 --> 00:03:10,640
config thing here so sales just a little

00:03:08,000 --> 00:03:13,400
bit structure it'll have a config file

00:03:10,640 --> 00:03:18,850
and you can set all the config for all

00:03:13,400 --> 00:03:20,660
the things in JavaScript objects and

00:03:18,850 --> 00:03:23,239
you've got all these different files

00:03:20,660 --> 00:03:26,810
what have you and then you can override

00:03:23,239 --> 00:03:29,269
them for your particular particular

00:03:26,810 --> 00:03:30,590
environment so blueprints is one of them

00:03:29,269 --> 00:03:33,080
I'm not going to go through all of those

00:03:30,590 --> 00:03:35,030
things but this is what we're doing in

00:03:33,080 --> 00:03:37,040
production environments and where you

00:03:35,030 --> 00:03:39,530
can pull in all your process ends from

00:03:37,040 --> 00:03:41,750
wherever they're coming in from and put

00:03:39,530 --> 00:03:44,290
them into sales objects which will be

00:03:41,750 --> 00:03:48,950
made globally available to you

00:03:44,290 --> 00:03:52,519
throughout so yeah so for example if we

00:03:48,950 --> 00:03:54,500
want a bitly access token to pull in

00:03:52,519 --> 00:03:55,069
somewhere else as sales config topically

00:03:54,500 --> 00:03:56,239
access

00:03:55,069 --> 00:04:06,709
that's a global net that becomes

00:03:56,239 --> 00:04:09,439
available to you yes so policy files so

00:04:06,709 --> 00:04:11,209
you've got your roots there and sales

00:04:09,439 --> 00:04:14,060
also splits things out into policy files

00:04:11,209 --> 00:04:19,459
separate so things like admin only don't

00:04:14,060 --> 00:04:22,009
clog up the routes files so you get you

00:04:19,459 --> 00:04:24,259
can define your policies in something

00:04:22,009 --> 00:04:26,599
like that so reservation payment action

00:04:24,259 --> 00:04:29,570
you want it to do its DDoS check for

00:04:26,599 --> 00:04:31,180
HTTPS maybe and then when you so many

00:04:29,570 --> 00:04:33,259
tokens you don't want the network

00:04:31,180 --> 00:04:34,910
doubling up on the calls to that and

00:04:33,259 --> 00:04:46,039
pepper charging someone twice which

00:04:34,910 --> 00:04:47,210
never happened and yeah so a policy file

00:04:46,039 --> 00:04:48,740
looks something like that and it's very

00:04:47,210 --> 00:04:50,840
much like middleware which you can

00:04:48,740 --> 00:04:53,630
specify for specific route so you'll get

00:04:50,840 --> 00:04:55,910
your rep your as you next you'll do some

00:04:53,630 --> 00:04:58,789
logic it'll either be okay or not you

00:04:55,910 --> 00:05:01,039
can modify the streams and then return

00:04:58,789 --> 00:05:10,039
next and it should be very familiar to

00:05:01,039 --> 00:05:13,280
you yeah yeah yes I was able to reduce

00:05:10,039 --> 00:05:15,710
the number of options pre-flight check

00:05:13,280 --> 00:05:18,039
calls from our from our site due to

00:05:15,710 --> 00:05:20,710
cross-site scripting issues caused from

00:05:18,039 --> 00:05:23,060
hosting our ap on a separate subdomain

00:05:20,710 --> 00:05:24,530
and the documentation said this option

00:05:23,060 --> 00:05:25,639
was configurable in the config but I was

00:05:24,530 --> 00:05:30,020
actually only able to solve it by

00:05:25,639 --> 00:05:33,349
creating a custom middleware yeah you

00:05:30,020 --> 00:05:34,400
can in the configure you can do so

00:05:33,349 --> 00:05:35,750
you've got your custom middle-way

00:05:34,400 --> 00:05:39,139
because sales jess comes with like a

00:05:35,750 --> 00:05:42,889
bunch of stuff pre-rolled so--but works

00:05:39,139 --> 00:05:46,990
out out of the box but then you can add

00:05:42,889 --> 00:05:51,050
your own stuff to it so if I do please

00:05:46,990 --> 00:05:52,340
pre-flight cashing then that found was

00:05:51,050 --> 00:05:56,050
the best way to do it I always wanted to

00:05:52,340 --> 00:05:56,050
do that on those routes

00:05:59,830 --> 00:06:04,250
ok so when you're getting started

00:06:01,880 --> 00:06:07,070
there's a local txt file database to

00:06:04,250 --> 00:06:08,510
work from which is nice so you can just

00:06:07,070 --> 00:06:10,070
get going about having to configure any

00:06:08,510 --> 00:06:11,779
of your rest of your development

00:06:10,070 --> 00:06:14,479
environment and you can configure

00:06:11,779 --> 00:06:18,099
sessions to connect to read the server

00:06:14,479 --> 00:06:20,380
err in config options so this is just a

00:06:18,099 --> 00:06:23,510
architecture diagram so this is our

00:06:20,380 --> 00:06:24,889
horizontally scalable app here which is

00:06:23,510 --> 00:06:27,080
where sales sits and you can run

00:06:24,889 --> 00:06:29,029
sessions through Redis lovely and you

00:06:27,080 --> 00:06:31,580
can do everything else through another

00:06:29,029 --> 00:06:35,599
database and this is pretty much all it

00:06:31,580 --> 00:06:38,900
took to set up the sessions so you do

00:06:35,599 --> 00:06:41,419
that you also can it get sales uses um

00:06:38,900 --> 00:06:44,539
the sales framework puts the session

00:06:41,419 --> 00:06:46,430
onto each request if it's available and

00:06:44,539 --> 00:06:48,469
so you can set things like this rep

00:06:46,430 --> 00:06:51,349
session dot the value you want to pull

00:06:48,469 --> 00:06:53,599
out equals my value from before and then

00:06:51,349 --> 00:06:55,490
you can access it somewhere else where

00:06:53,599 --> 00:06:58,060
you'd be like my new value equals red

00:06:55,490 --> 00:07:03,190
dot session value so it uses a javac

00:06:58,060 --> 00:07:06,529
getters and setters to mask the

00:07:03,190 --> 00:07:07,969
implementation of that does anyone have

00:07:06,529 --> 00:07:09,919
any strong opinions on JavaScript

00:07:07,969 --> 00:07:12,830
getters and setters is it not looking a

00:07:09,919 --> 00:07:15,800
bit weird to you they get tripped up a

00:07:12,830 --> 00:07:19,849
little bit but no maybe I don't like it

00:07:15,800 --> 00:07:23,029
sometimes so sales has model files the M

00:07:19,849 --> 00:07:32,330
in MVC and this is where the model info

00:07:23,029 --> 00:07:34,060
is stored so I'll just show delivery so

00:07:32,330 --> 00:07:37,099
this is the the main meat a bit got

00:07:34,060 --> 00:07:39,860
exports got the attribute so it so the

00:07:37,099 --> 00:07:42,260
item references and cross reference is

00:07:39,860 --> 00:07:44,719
another model the item transporter

00:07:42,260 --> 00:07:49,130
reference is another model the user

00:07:44,719 --> 00:07:55,130
pickup which is a date time and status

00:07:49,130 --> 00:07:58,039
which is one of these genomes here super

00:07:55,130 --> 00:08:01,909
so in the sales the data stores but each

00:07:58,039 --> 00:08:03,440
model are abstracted and configurable

00:08:01,909 --> 00:08:05,210
and if you wanted to you could have one

00:08:03,440 --> 00:08:06,889
set of models connecting to one data

00:08:05,210 --> 00:08:08,750
store and another set of models

00:08:06,889 --> 00:08:11,240
connecting to another States or but in

00:08:08,750 --> 00:08:12,780
practice I just use post grades because

00:08:11,240 --> 00:08:14,820
it's a normal day of store for

00:08:12,780 --> 00:08:17,970
normal people that you can imagine

00:08:14,820 --> 00:08:20,010
having something up here to a no sequel

00:08:17,970 --> 00:08:22,680
database for some certain set if it met

00:08:20,010 --> 00:08:27,090
your use cases but in practice I don't

00:08:22,680 --> 00:08:29,580
do that when developing I set the date

00:08:27,090 --> 00:08:34,500
base to drop and repopulate from a

00:08:29,580 --> 00:08:40,050
bootstrap file so every time I start

00:08:34,500 --> 00:08:43,099
surfer or raise the sails I'm starting

00:08:40,050 --> 00:08:46,860
from a known from a known set conditions

00:08:43,099 --> 00:08:50,730
which which makes it easy not to trip

00:08:46,860 --> 00:08:53,040
yourself up on one of the things that

00:08:50,730 --> 00:09:01,589
waterline the RM is actually pretty bad

00:08:53,040 --> 00:09:03,870
at is is if you've got a bunch of models

00:09:01,589 --> 00:09:05,490
which have cross references and you get

00:09:03,870 --> 00:09:07,020
some sort of like level of depth going

00:09:05,490 --> 00:09:08,880
on there you get some the nesting so if

00:09:07,020 --> 00:09:11,160
my item has a root and my group has a

00:09:08,880 --> 00:09:15,690
location my location has data on it I

00:09:11,160 --> 00:09:17,910
can't start with item and go populate

00:09:15,690 --> 00:09:22,410
root populate start location and access

00:09:17,910 --> 00:09:25,230
that postcode for example you have to

00:09:22,410 --> 00:09:27,540
write a data store specific query to do

00:09:25,230 --> 00:09:30,060
that at most I could get item

00:09:27,540 --> 00:09:34,140
root populated and yet start location

00:09:30,060 --> 00:09:35,520
but I'd only get its public key and this

00:09:34,140 --> 00:09:37,680
is this is just taking this is a little

00:09:35,520 --> 00:09:40,410
excerpt from a database where the root

00:09:37,680 --> 00:09:43,020
is and also sales doesn't well in the

00:09:40,410 --> 00:09:46,710
post creator adapter at least it doesn't

00:09:43,020 --> 00:09:47,820
append the doctor ID so you can see here

00:09:46,710 --> 00:09:51,960
we just got stringing numbers so

00:09:47,820 --> 00:09:54,360
distance is 2.1 duration is 11 those are

00:09:51,960 --> 00:09:56,730
just numbers right pickup location is

00:09:54,360 --> 00:09:59,850
create for is that just a number is that

00:09:56,730 --> 00:10:03,180
foreign key there's no - oh you know

00:09:59,850 --> 00:10:06,089
underscore ID and I know they are but on

00:10:03,180 --> 00:10:07,290
inspection it's maybe a bit confusing if

00:10:06,089 --> 00:10:11,550
you're coming to it so you kind of have

00:10:07,290 --> 00:10:14,130
to know what's going on yeah and also if

00:10:11,550 --> 00:10:18,150
on the server you populate the object to

00:10:14,130 --> 00:10:19,650
get the whole object we don't if you

00:10:18,150 --> 00:10:21,270
don't get the foreign key so you want to

00:10:19,650 --> 00:10:23,430
update the object we have to keep track

00:10:21,270 --> 00:10:24,629
of this and know the difference so for

00:10:23,430 --> 00:10:27,660
example here

00:10:24,629 --> 00:10:29,910
I've called item and I've populated

00:10:27,660 --> 00:10:31,679
quote so if I want to update the quote I

00:10:29,910 --> 00:10:32,999
have I know that the item has populated

00:10:31,679 --> 00:10:34,949
the quote and therefore I don't want

00:10:32,999 --> 00:10:37,709
quote which would be an object I want

00:10:34,949 --> 00:10:42,179
quote the ID but if I haven't done that

00:10:37,709 --> 00:10:45,119
and I've just got an item the quote will

00:10:42,179 --> 00:10:47,100
be the number that I want to update see

00:10:45,119 --> 00:10:50,239
it's just a bit of it's a bit untidy

00:10:47,100 --> 00:10:52,470
like that you've got to keep track of it

00:10:50,239 --> 00:10:54,299
yeah and in sales you have to make model

00:10:52,470 --> 00:10:56,129
level calls like that so you see how

00:10:54,299 --> 00:10:57,089
it's quote updated I'm not updating an

00:10:56,129 --> 00:10:58,949
instance of the object

00:10:57,089 --> 00:11:00,389
she's a unlike laravel I like doing that

00:10:58,949 --> 00:11:03,299
in laravel that was good and you can

00:11:00,389 --> 00:11:06,749
also do update app attribute in Ruby or

00:11:03,299 --> 00:11:08,970
whatever so it's a little under tooled

00:11:06,749 --> 00:11:12,569
they on say and if I was if there was

00:11:08,970 --> 00:11:14,269
one thing I was gonna start again or

00:11:12,569 --> 00:11:17,040
start to clear down some technical debt

00:11:14,269 --> 00:11:20,129
it would be to find a way to use sequel

00:11:17,040 --> 00:11:21,420
eyes instead of a waterline and there is

00:11:20,129 --> 00:11:23,399
a sales hook called sales hooks

00:11:21,420 --> 00:11:25,110
equalizer which lets you let's you do

00:11:23,399 --> 00:11:32,730
this but but what mine does let you get

00:11:25,110 --> 00:11:34,529
started off the bat yes of migrations

00:11:32,730 --> 00:11:38,040
migrations in water line theory there is

00:11:34,529 --> 00:11:39,929
a way to auto migrate when sales raisers

00:11:38,040 --> 00:11:43,230
and it will migrate the changes since

00:11:39,929 --> 00:11:45,179
last time over but in practice it's only

00:11:43,230 --> 00:11:47,699
reliable from a clean database and not

00:11:45,179 --> 00:11:50,429
deterministic enough for production

00:11:47,699 --> 00:11:52,799
projects in productive in practice

00:11:50,429 --> 00:11:54,239
migrations are on manual and and fundly

00:11:52,799 --> 00:11:55,470
for the first year I told myself I was

00:11:54,239 --> 00:11:57,779
going to sort this problem how properly

00:11:55,470 --> 00:11:59,339
with connects or something but I never

00:11:57,779 --> 00:12:01,319
did and during that period of

00:11:59,339 --> 00:12:03,629
self-delusion I kept all my manual

00:12:01,319 --> 00:12:06,720
migrations in a page in my notes not

00:12:03,629 --> 00:12:08,160
even checked in but I eventually fessed

00:12:06,720 --> 00:12:09,809
up to myself and create the migrations

00:12:08,160 --> 00:12:11,009
folder which looks you know something

00:12:09,809 --> 00:12:13,439
like that and you go in there and

00:12:11,009 --> 00:12:17,249
there's a sequel up command and you know

00:12:13,439 --> 00:12:18,929
standard stuff and if you want to do

00:12:17,249 --> 00:12:20,699
something a bit more more involved in

00:12:18,929 --> 00:12:22,589
there there are scripts that can run in

00:12:20,699 --> 00:12:24,059
the sales environment and I've used

00:12:22,589 --> 00:12:25,829
these to do migrations before that

00:12:24,059 --> 00:12:28,129
involved you know some logic rather than

00:12:25,829 --> 00:12:30,899
just create a new table or what have you

00:12:28,129 --> 00:12:32,910
you know write them test them use them

00:12:30,899 --> 00:12:34,500
once also

00:12:32,910 --> 00:12:36,650
you know my cron job didn't I would run

00:12:34,500 --> 00:12:39,860
everything 10 minutes or once a day or

00:12:36,650 --> 00:12:39,860
what have you

00:12:40,970 --> 00:12:45,000
yeah so sales does not come preloaded

00:12:43,020 --> 00:12:46,980
with migration assistance and they

00:12:45,000 --> 00:12:51,230
recommend that you use open source

00:12:46,980 --> 00:12:53,640
solutions to your particular data store

00:12:51,230 --> 00:12:55,230
but you can start a whole project with

00:12:53,640 --> 00:12:57,000
the command line using their CLI

00:12:55,230 --> 00:12:59,610
generator so you do get started

00:12:57,000 --> 00:13:01,290
straightaway for sales new test projects

00:12:59,610 --> 00:13:02,610
and they'll take you through one or two

00:13:01,290 --> 00:13:04,830
questions and you'll have a whole test

00:13:02,610 --> 00:13:06,990
project which works which is great and

00:13:04,830 --> 00:13:07,710
you construct your extra subfolders any

00:13:06,990 --> 00:13:11,130
way you like

00:13:07,710 --> 00:13:13,140
certain folders do certain things sales

00:13:11,130 --> 00:13:15,300
uses grunt it doesn't use grunt to do

00:13:13,140 --> 00:13:18,270
this task it does it in memory that was

00:13:15,300 --> 00:13:20,070
an edit and interpret files in specific

00:13:18,270 --> 00:13:22,680
locations as part of the framework and

00:13:20,070 --> 00:13:26,610
the ones I use most often are actions

00:13:22,680 --> 00:13:27,990
helpers and models and so used to have

00:13:26,610 --> 00:13:31,650
sales used to have this idea of a

00:13:27,990 --> 00:13:32,880
service so if you use cloud Neri for

00:13:31,650 --> 00:13:36,480
example you can stick all your clarinet

00:13:32,880 --> 00:13:38,660
functions in this service but services

00:13:36,480 --> 00:13:41,010
got replaced in the upgrade version one

00:13:38,660 --> 00:13:44,100
we've helpers and you can just arrange

00:13:41,010 --> 00:13:49,940
your files so they do certain things so

00:13:44,100 --> 00:13:49,940
I'll show you the helpers ideals

00:14:05,830 --> 00:14:10,610
yeah so this should have appeared in the

00:14:10,070 --> 00:14:14,060
helpers

00:14:10,610 --> 00:14:15,920
yes so you can see helpers ideal

00:14:14,060 --> 00:14:17,960
postcodes but when we use ideal post

00:14:15,920 --> 00:14:20,270
codes and get autocomplete and then you

00:14:17,960 --> 00:14:23,270
further drill down into details so justr

00:14:20,270 --> 00:14:25,070
makes that available like this so go

00:14:23,270 --> 00:14:27,290
sales help those ideal post codes of

00:14:25,070 --> 00:14:36,500
details just and that's available

00:14:27,290 --> 00:14:43,250
globally to do that and because you're

00:14:36,500 --> 00:14:47,320
also lucky you can see how how easy it

00:14:43,250 --> 00:14:47,320
is so just

00:14:53,280 --> 00:15:06,690
live test yes there we go yeah now

00:14:57,120 --> 00:15:09,210
you've got enough function yes oh

00:15:06,690 --> 00:15:11,880
actions so some machine pack they've got

00:15:09,210 --> 00:15:16,890
this idea of machines and that's just a

00:15:11,880 --> 00:15:19,680
fancy way of essentially saying they've

00:15:16,890 --> 00:15:24,570
got this way of type checking stuff as

00:15:19,680 --> 00:15:26,250
it comes in so this is a this isn't yeah

00:15:24,570 --> 00:15:28,620
so reservation create a reservation

00:15:26,250 --> 00:15:30,000
create action get your pickup time and

00:15:28,620 --> 00:15:31,950
you can put like these little checks on

00:15:30,000 --> 00:15:35,730
here and your enemy

00:15:31,950 --> 00:15:37,860
checks and is it an email which is nice

00:15:35,730 --> 00:15:39,900
just but that's there yeah what's that

00:15:37,860 --> 00:15:46,110
an email that came in advice don't let

00:15:39,900 --> 00:15:49,440
it come in security so I'm just gonna

00:15:46,110 --> 00:15:51,810
zip through some a wasp top 10 stuff

00:15:49,440 --> 00:15:53,430
which I found relevant because sales

00:15:51,810 --> 00:15:55,230
runs on node you can use any

00:15:53,430 --> 00:15:57,690
off-the-shelf reverse proxy DDoS

00:15:55,230 --> 00:16:01,380
protection and wops and stuff so there's

00:15:57,690 --> 00:16:02,670
that no pollution is there our front end

00:16:01,380 --> 00:16:03,900
project is separate so there's not

00:16:02,670 --> 00:16:06,210
really an opportunity for script

00:16:03,900 --> 00:16:11,450
injection which is good but you've got a

00:16:06,210 --> 00:16:13,890
GS so just you know use the interpreted

00:16:11,450 --> 00:16:16,230
input as opposed to the literal one you

00:16:13,890 --> 00:16:18,570
can avoid a lot of problems sessions can

00:16:16,230 --> 00:16:23,130
be set to timeout which is good it comes

00:16:18,570 --> 00:16:25,770
with CSRF support out-of-the-box sequel

00:16:23,130 --> 00:16:29,160
injection now I'd saver because you're

00:16:25,770 --> 00:16:33,780
kind of more prone to writing larger

00:16:29,160 --> 00:16:35,010
queries because you can't yeah I've got

00:16:33,780 --> 00:16:37,350
that nesting problem you're prone to

00:16:35,010 --> 00:16:40,050
writing stuff like this to actually get

00:16:37,350 --> 00:16:42,720
the information you need you are more

00:16:40,050 --> 00:16:44,130
prone to sequel injection but so

00:16:42,720 --> 00:16:46,020
obviously you've got to rely upon your

00:16:44,130 --> 00:16:48,390
own internal discipline not to allow

00:16:46,020 --> 00:16:49,860
that to not to occur but you can sort of

00:16:48,390 --> 00:16:51,690
sanity check the inputs as they come in

00:16:49,860 --> 00:16:53,550
there which is good I'm going to skip

00:16:51,690 --> 00:16:55,980
over this because well it is is me

00:16:53,550 --> 00:16:58,980
showing you how frustrating it is to use

00:16:55,980 --> 00:17:00,360
the console which it claims to come with

00:16:58,980 --> 00:17:03,120
and it does come with it that's for sure

00:17:00,360 --> 00:17:05,490
but if you want to you want to use it

00:17:03,120 --> 00:17:06,940
for anything or actually you know what

00:17:05,490 --> 00:17:11,920
because you

00:17:06,940 --> 00:17:16,090
SuperDuper I'll show you what's going to

00:17:11,920 --> 00:17:19,030
punch into it and it becomes quite

00:17:16,090 --> 00:17:23,590
absurd so start off with like oh I want

00:17:19,030 --> 00:17:25,960
to actually let's say find some of my

00:17:23,590 --> 00:17:27,190
delivery items no you can't do that so

00:17:25,960 --> 00:17:29,650
you end up with this freeline thing

00:17:27,190 --> 00:17:30,970
where deliveries are pre it's predefined

00:17:29,650 --> 00:17:32,080
object and then you do this and a

00:17:30,970 --> 00:17:34,000
callback and then you can actually

00:17:32,080 --> 00:17:37,570
inspect them but what if you want to

00:17:34,000 --> 00:17:38,770
test a helper function then you do that

00:17:37,570 --> 00:17:40,150
and then that doesn't work and you try

00:17:38,770 --> 00:17:43,150
wait and then that doesn't work then you

00:17:40,150 --> 00:17:45,430
end up with some if it's stopped yeah so

00:17:43,150 --> 00:17:48,670
it becomes quite frustrating and not

00:17:45,430 --> 00:17:51,610
super straightforward doesn't meant with

00:17:48,670 --> 00:17:53,380
good development experience but there is

00:17:51,610 --> 00:17:56,590
more way to test more than one way to

00:17:53,380 --> 00:18:00,220
test new code so let's talk about unit

00:17:56,590 --> 00:18:03,250
and integration tests now you can use

00:18:00,220 --> 00:18:04,840
the standard preferred set of unit

00:18:03,250 --> 00:18:16,840
testing libraries available to test

00:18:04,840 --> 00:18:18,310
individual functions like helpers some

00:18:16,840 --> 00:18:30,540
of these unit tests are more than a year

00:18:18,310 --> 00:18:30,540
old so just to prove to you they do work

00:18:34,140 --> 00:18:42,640
you may have noticed a describe oh yeah

00:18:40,270 --> 00:18:44,980
there were turns green so it does work

00:18:42,640 --> 00:18:49,240
so you can stick here shoulds and your

00:18:44,980 --> 00:18:53,230
sign-ons and predefined user setups and

00:18:49,240 --> 00:18:55,180
you can pull in so API controller admin

00:18:53,230 --> 00:18:57,430
assigned driver so that's a corresponds

00:18:55,180 --> 00:19:00,040
to an action but you can do you call

00:18:57,430 --> 00:19:02,560
that in you've got this idea of machine

00:19:00,040 --> 00:19:04,270
which turns that function into what

00:19:02,560 --> 00:19:09,370
sales calls a machine you get that all

00:19:04,270 --> 00:19:11,020
that type checking and validation going

00:19:09,370 --> 00:19:15,210
on beforehand and then you can run all

00:19:11,020 --> 00:19:15,210
your your sort of unit tests like that

00:19:15,300 --> 00:19:24,180
good bogged down in those details but

00:19:21,870 --> 00:19:26,160
unit tests aren't kind of become a bit

00:19:24,180 --> 00:19:29,990
you know trivial and what you're really

00:19:26,160 --> 00:19:32,040
interested in is end-to-end tests and

00:19:29,990 --> 00:19:34,800
for the life of me I could not get these

00:19:32,040 --> 00:19:36,330
to compile this morning so you just have

00:19:34,800 --> 00:19:39,470
to trust me but these once upon a time

00:19:36,330 --> 00:19:41,790
did work but what you can do is you can

00:19:39,470 --> 00:19:45,690
create an in-memory version of sales

00:19:41,790 --> 00:19:47,790
which has a in-memory version in-memory

00:19:45,690 --> 00:19:53,280
database so it's not hitting the disk

00:19:47,790 --> 00:19:56,210
every time whatever and you can abstract

00:19:53,280 --> 00:19:58,680
all that stuff away and you can pull in

00:19:56,210 --> 00:20:00,810
the app and run things with super test

00:19:58,680 --> 00:20:04,980
agent and all of that so you can be

00:20:00,810 --> 00:20:07,380
reasonably satisfied but when it's run

00:20:04,980 --> 00:20:08,970
from an actual user agent it will go

00:20:07,380 --> 00:20:11,610
through all the way from the start to

00:20:08,970 --> 00:20:14,550
the back and out again the one thing I

00:20:11,610 --> 00:20:15,990
did notice is that if you you will have

00:20:14,550 --> 00:20:17,490
to keep that in memory database sort of

00:20:15,990 --> 00:20:19,290
like up the whole time so if you write a

00:20:17,490 --> 00:20:20,580
bunch of tests for I know deliveries and

00:20:19,290 --> 00:20:22,770
then you test them a bunch of delivery

00:20:20,580 --> 00:20:25,230
stuff elsewhere it will sort of inherit

00:20:22,770 --> 00:20:26,460
the stuff which happened previously but

00:20:25,230 --> 00:20:29,430
you can do that and I was actually quite

00:20:26,460 --> 00:20:30,900
chuffed to find it lived up to this

00:20:29,430 --> 00:20:33,000
promise and if you had the internal

00:20:30,900 --> 00:20:36,960
discipline you could you could do this

00:20:33,000 --> 00:20:39,300
for your entire project right so that's

00:20:36,960 --> 00:20:41,490
the that's the meatiest stuff and I'll

00:20:39,300 --> 00:20:42,960
I'll start wrapping up now so web pack

00:20:41,490 --> 00:20:45,060
so that's not got too many too many

00:20:42,960 --> 00:20:46,950
details but you can use a hook to get

00:20:45,060 --> 00:20:48,900
web pack running and you know have it a

00:20:46,950 --> 00:20:52,560
hot reload and all of that from in

00:20:48,900 --> 00:20:55,710
running from sales and this really was

00:20:52,560 --> 00:20:57,090
quite painless support what it's like to

00:20:55,710 --> 00:20:59,010
support I've always been able to find an

00:20:57,090 --> 00:21:00,630
answer to my questions you know you know

00:20:59,010 --> 00:21:02,190
it's like when you like oh I want to use

00:21:00,630 --> 00:21:04,710
this but am I going to get left in the

00:21:02,190 --> 00:21:07,260
lurch in three months time and that

00:21:04,710 --> 00:21:08,730
hasn't happened to me which is good I've

00:21:07,260 --> 00:21:11,160
always been able to find good blogs

00:21:08,730 --> 00:21:13,500
posts tutorials when I've wanted to do

00:21:11,160 --> 00:21:16,200
something a bit interesting and may they

00:21:13,500 --> 00:21:17,850
claim to have the professional support

00:21:16,200 --> 00:21:20,700
I've never had to use this I got can't

00:21:17,850 --> 00:21:24,390
vouch for it but the sport has not been

00:21:20,700 --> 00:21:27,810
atrocious reflections so has it got me

00:21:24,390 --> 00:21:29,010
moving quickly yes can I operate

00:21:27,810 --> 00:21:32,280
securely yes

00:21:29,010 --> 00:21:33,810
and if I can't let me know right have I

00:21:32,280 --> 00:21:37,860
had a major catastrophe yet

00:21:33,810 --> 00:21:39,330
not really however hit a massive blocker

00:21:37,860 --> 00:21:42,750
where I just couldn't do the thing I

00:21:39,330 --> 00:21:44,940
wanted to do no that's not happened is

00:21:42,750 --> 00:21:47,370
using your own causing technical debt to

00:21:44,940 --> 00:21:49,260
accumulate yes yes it is

00:21:47,370 --> 00:21:51,450
is my codebase still open to expansion

00:21:49,260 --> 00:21:53,520
into microcircuits yeah it is so if if

00:21:51,450 --> 00:21:55,140
this becomes you know if I want to stop

00:21:53,520 --> 00:21:56,730
having to find a great in control over

00:21:55,140 --> 00:21:58,590
certain areas then I can still do that

00:21:56,730 --> 00:22:03,150
and would give Coby in the bet place if

00:21:58,590 --> 00:22:04,680
we use another framework and I mean it's

00:22:03,150 --> 00:22:07,980
kind of hard to show that it's kind of

00:22:04,680 --> 00:22:09,960
hard to prove a negative but I can't

00:22:07,980 --> 00:22:13,080
really see how there's anything much

00:22:09,960 --> 00:22:16,920
more I'd want to get done but I haven't

00:22:13,080 --> 00:22:19,800
been able to get done by using sales so

00:22:16,920 --> 00:22:21,270
should you use it as a question so we're

00:22:19,800 --> 00:22:22,410
bigger teams that's larger projects

00:22:21,270 --> 00:22:24,690
you're still probably going to want to

00:22:22,410 --> 00:22:26,780
roll your own solution not set the sales

00:22:24,690 --> 00:22:30,350
defaults and there are default opinions

00:22:26,780 --> 00:22:33,120
built from Express up and do all of that

00:22:30,350 --> 00:22:36,720
and then this eventual as an individual

00:22:33,120 --> 00:22:37,980
as an individual developer however who

00:22:36,720 --> 00:22:40,020
wants to bash out a prototype in the

00:22:37,980 --> 00:22:42,480
weekend and that they may want to host

00:22:40,020 --> 00:22:43,980
later on it has that option open to it

00:22:42,480 --> 00:22:45,420
fairly straightforward leaving yeah I

00:22:43,980 --> 00:22:48,180
can heartily recommend it if you've got

00:22:45,420 --> 00:22:51,300
an idea you want to try why not why not

00:22:48,180 --> 00:22:53,240
so in absolutely closing not hiring but

00:22:51,300 --> 00:22:57,050
if you want to chat let's see great

00:22:53,240 --> 00:22:59,820
always raising money so if you so if

00:22:57,050 --> 00:23:06,420
investing in on-demand logistics revs

00:22:59,820 --> 00:23:07,740
your engine you know here to talk to you

00:23:06,420 --> 00:23:09,450
know check out our website our reviews

00:23:07,740 --> 00:23:11,070
are real and pretty good if only people

00:23:09,450 --> 00:23:13,530
believed online reviews but you know

00:23:11,070 --> 00:23:15,930
it's looking positive and if you want to

00:23:13,530 --> 00:23:18,060
help help us at Keefe koumei personally

00:23:15,930 --> 00:23:19,890
for being so entertaining tell a friend

00:23:18,060 --> 00:23:21,900
or give us a link in your blog or

00:23:19,890 --> 00:23:24,690
something and feel free to check that

00:23:21,900 --> 00:23:25,789
out yeah great thank you all thank you

00:23:24,690 --> 00:23:27,850
very much

00:23:25,789 --> 00:23:27,850

YouTube URL: https://www.youtube.com/watch?v=ljobf0RWr_A


