Title: Indie Hacking with Postgraphile - London Node User Group - August 2019
Publication date: 2019-09-05
Playlist: London Node User Group
Description: 
	Presented by Thomas Ankcorn

Sometimes I get jealous of the speed people can build complex apps with things like laravel/rails. Node is a great run time but it is arguably a more complex choice for your tech stack, there is no standout MVC framework that does it all for you, instead, there are lots of small specialised tools. I want to talk about one of those. Itâ€™s called Postgraphile. It lets you generate a GraphQL API from a schema in a Postgres database. By writing just a little SQL you can create an application that would take a long time to create normally!

I'm going to show you how you can use it to build a meetup.com clone complete with JWT based authentication, real-time meetup ratings, and role-based access control.

About the speaker:

I'm a senior software engineer at Near.st. We are building a real-time local inventory data platform to help small businesses fight back against the growth of online shopping. Outside of work, I'm chasing my life long dream of having a dog, and building silly things with javascript. Follow me on twitter here @thomasankcorn.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,060 --> 00:00:04,950
so yeah - my favorite things indie

00:00:02,429 --> 00:00:07,500
hacking and a tool called post graphic

00:00:04,950 --> 00:00:09,450
indie hacking is setting out to make

00:00:07,500 --> 00:00:11,670
money on the internet normally by

00:00:09,450 --> 00:00:14,190
building something yourself by also for

00:00:11,670 --> 00:00:16,230
yourself and place graph file is a tool

00:00:14,190 --> 00:00:19,260
that turns a schemer in your Postgres

00:00:16,230 --> 00:00:20,100
database to a graph QL API first a

00:00:19,260 --> 00:00:22,230
little bit about me

00:00:20,100 --> 00:00:24,600
so I'm a software engineer at near

00:00:22,230 --> 00:00:28,380
Street we're building a platform to get

00:00:24,600 --> 00:00:30,869
stop shops stock inventory data on the

00:00:28,380 --> 00:00:34,140
internet in real time using nodejs

00:00:30,869 --> 00:00:35,640
and AWS we're currently looking to hire

00:00:34,140 --> 00:00:36,899
a senior engineer so if anyone's

00:00:35,640 --> 00:00:40,110
interested come and have a chat with me

00:00:36,899 --> 00:00:41,430
after all so like I don't know if this

00:00:40,110 --> 00:00:43,410
is like a feeling that anyone else has

00:00:41,430 --> 00:00:45,539
but like building things for myself

00:00:43,410 --> 00:00:47,399
makes me feel less incompetent when I'm

00:00:45,539 --> 00:00:49,140
building things for our people I feel

00:00:47,399 --> 00:00:51,059
the weight of their or like my

00:00:49,140 --> 00:00:52,980
perception of their expectations and it

00:00:51,059 --> 00:00:55,320
just weighs down on me so when I build

00:00:52,980 --> 00:00:56,670
things to myself I know I'm only going

00:00:55,320 --> 00:01:01,079
to let myself down which is actually

00:00:56,670 --> 00:01:03,780
quite relieving and I guess I'm also

00:01:01,079 --> 00:01:05,610
like really inspired by people who build

00:01:03,780 --> 00:01:07,020
things and put it out on the internet

00:01:05,610 --> 00:01:08,580
for everyone to see I find that really

00:01:07,020 --> 00:01:10,650
scary I build something if you play out

00:01:08,580 --> 00:01:12,210
there people are mean about it

00:01:10,650 --> 00:01:13,380
sometimes and that really sucks but

00:01:12,210 --> 00:01:16,200
actually there's a huge community of

00:01:13,380 --> 00:01:17,250
makers and people who create things who

00:01:16,200 --> 00:01:18,840
share their stuff on the internet

00:01:17,250 --> 00:01:20,220
there's like a thing called indie

00:01:18,840 --> 00:01:21,869
hackers where there's a podcast and

00:01:20,220 --> 00:01:23,759
website and all that stuff but like I'm

00:01:21,869 --> 00:01:27,570
really inspired by all the things those

00:01:23,759 --> 00:01:28,439
people do one problem though often when

00:01:27,570 --> 00:01:29,759
you see what these things they're

00:01:28,439 --> 00:01:32,400
building things using frameworks like

00:01:29,759 --> 00:01:34,500
rails and laravel and might where's the

00:01:32,400 --> 00:01:35,579
node developers building things and

00:01:34,500 --> 00:01:36,720
putting it on the internet and trying to

00:01:35,579 --> 00:01:38,400
make money from them there are a few

00:01:36,720 --> 00:01:40,979
though they're not impossible to find

00:01:38,400 --> 00:01:42,720
but like it's not as many and I think

00:01:40,979 --> 00:01:44,939
sometimes maybe the tools are kind of

00:01:42,720 --> 00:01:46,950
they're more suited to like big

00:01:44,939 --> 00:01:48,479
companies like the Financial Times and

00:01:46,950 --> 00:01:49,890
Conde Nast who are building things and

00:01:48,479 --> 00:01:51,630
have a lot of developer hours to spend

00:01:49,890 --> 00:01:52,829
and stuff like that whereas some of

00:01:51,630 --> 00:01:56,250
these frameworks are a little bit more

00:01:52,829 --> 00:01:57,360
fast and dirty if you know I mean so I

00:01:56,250 --> 00:01:59,670
want to talk about a framework that I

00:01:57,360 --> 00:02:01,560
think all at all I think that's like

00:01:59,670 --> 00:02:05,850
that makes it really really easy to

00:02:01,560 --> 00:02:07,590
build a grok UL API very very quickly so

00:02:05,850 --> 00:02:09,989
you can get all that backend work done

00:02:07,590 --> 00:02:11,459
and dusted so you can focus on making a

00:02:09,989 --> 00:02:13,180
good user experience and actually making

00:02:11,459 --> 00:02:16,030
a good app because that's

00:02:13,180 --> 00:02:17,799
the fun bit for a lot of people it's

00:02:16,030 --> 00:02:20,049
also does lots of things like solve the

00:02:17,799 --> 00:02:23,140
N+ 1 query problem where if you're

00:02:20,049 --> 00:02:24,700
sending queries to like stuff if you've

00:02:23,140 --> 00:02:26,260
got like an ORM you kind of you make

00:02:24,700 --> 00:02:27,310
your request for users and then you get

00:02:26,260 --> 00:02:28,810
the beta back and then you make a

00:02:27,310 --> 00:02:30,340
request for something else and before

00:02:28,810 --> 00:02:33,370
you know it if you're requesting data

00:02:30,340 --> 00:02:35,500
across a lot of tables either over s or

00:02:33,370 --> 00:02:39,700
across your database the performance of

00:02:35,500 --> 00:02:41,950
your application just goes so this also

00:02:39,700 --> 00:02:44,530
helps with that and I guess yeah so it

00:02:41,950 --> 00:02:49,239
what it basically does is it inspect

00:02:44,530 --> 00:02:51,040
your Postgres database it's then does

00:02:49,239 --> 00:02:54,040
this thing called query introspection

00:02:51,040 --> 00:02:56,769
but basically like dives into like the

00:02:54,040 --> 00:02:58,930
metadata about your schema and like the

00:02:56,769 --> 00:03:02,040
the tables the functions the permissions

00:02:58,930 --> 00:03:04,930
and turns that into a graph QL API and

00:03:02,040 --> 00:03:07,569
it's also really really easy to use so

00:03:04,930 --> 00:03:10,060
to use it Oh too soon too soon

00:03:07,569 --> 00:03:13,359
you just run like it's a CLI command

00:03:10,060 --> 00:03:14,769
there's got a node like API that you can

00:03:13,359 --> 00:03:17,590
call in your code there's loads of a

00:03:14,769 --> 00:03:19,060
ways to use it but it's not the only

00:03:17,590 --> 00:03:22,180
tool out there that does it there's two

00:03:19,060 --> 00:03:23,829
major alternatives and sometimes they

00:03:22,180 --> 00:03:24,879
kind of win out in a pros and cons list

00:03:23,829 --> 00:03:26,980
so I'm going to talk a little bit about

00:03:24,879 --> 00:03:30,400
those this has fewer and Prisma has

00:03:26,980 --> 00:03:32,349
anybody heard of these things okay a few

00:03:30,400 --> 00:03:34,540
people a few people so these tools are

00:03:32,349 --> 00:03:36,639
good and they do the same thing they

00:03:34,540 --> 00:03:39,069
inspect a database and turn it into a

00:03:36,639 --> 00:03:42,729
graph QL API but I don't think there is

00:03:39,069 --> 00:03:45,340
good for two reasons one the community

00:03:42,729 --> 00:03:48,190
round graph QL is amazing like the two

00:03:45,340 --> 00:03:49,750
people who work on it maintain it I both

00:03:48,190 --> 00:03:50,769
I like married to each other and live

00:03:49,750 --> 00:03:52,419
somewhere in the south coast of England

00:03:50,769 --> 00:03:54,609
which I think this is like that's just

00:03:52,419 --> 00:03:56,799
super sweet and also they're like a

00:03:54,609 --> 00:03:58,419
really active community it's actually

00:03:56,799 --> 00:03:59,949
like a real open-source community

00:03:58,419 --> 00:04:01,750
project where like if you tweet them

00:03:59,949 --> 00:04:02,859
they send you stickers and stuff so if

00:04:01,750 --> 00:04:05,459
anyone would like some stickers come

00:04:02,859 --> 00:04:07,479
another chat to me afterwards and also

00:04:05,459 --> 00:04:10,479
it's built with nodejs

00:04:07,479 --> 00:04:12,970
whereas the others are built in Haskell

00:04:10,479 --> 00:04:14,859
and rust so if you want to extend this

00:04:12,970 --> 00:04:17,530
thing you want to build a plugin you

00:04:14,859 --> 00:04:19,030
want to wrap it in an Express server you

00:04:17,530 --> 00:04:22,779
want to deploy it with serverless and

00:04:19,030 --> 00:04:25,360
nodejs it's super super easy and because

00:04:22,779 --> 00:04:26,920
of that it's like a way more sustainable

00:04:25,360 --> 00:04:30,310
solution where if these other tools

00:04:26,920 --> 00:04:32,650
vc-backed and have like dirty capital

00:04:30,310 --> 00:04:34,770
and stuff like all about vendor lock-in

00:04:32,650 --> 00:04:38,200
with these compiled languages and stuff

00:04:34,770 --> 00:04:40,150
so sounds awesome in theory but how does

00:04:38,200 --> 00:04:42,970
it weigh up in practice I thought I'd

00:04:40,150 --> 00:04:46,600
try and build a meet-up clone I've

00:04:42,970 --> 00:04:50,500
called it meet-up I spent a long time

00:04:46,600 --> 00:04:53,950
creating that I shouldn't be proud but I

00:04:50,500 --> 00:04:54,430
am and it was a bit harder than I

00:04:53,950 --> 00:04:56,140
expected

00:04:54,430 --> 00:04:57,460
I spent a fair bit of time and I didn't

00:04:56,140 --> 00:05:00,400
finish but I built something that's like

00:04:57,460 --> 00:05:02,290
reasonably complicated without investing

00:05:00,400 --> 00:05:03,610
too much effort because I tried to do

00:05:02,290 --> 00:05:06,640
other things with my life like watch

00:05:03,610 --> 00:05:09,010
Netflix so the kind of the idea was

00:05:06,640 --> 00:05:11,410
they'd have a few like database tables

00:05:09,010 --> 00:05:13,960
of like events and attending and groups

00:05:11,410 --> 00:05:15,610
and organizers and comments and users

00:05:13,960 --> 00:05:18,040
and all that stuff I'd create some

00:05:15,610 --> 00:05:21,370
tables and it would be done I thought

00:05:18,040 --> 00:05:23,710
it'd be that easy it kind of wasn't yeah

00:05:21,370 --> 00:05:26,290
so we've got like some table we've got a

00:05:23,710 --> 00:05:27,910
scheme here we've got some tables we've

00:05:26,290 --> 00:05:30,400
also got a private table that's not

00:05:27,910 --> 00:05:32,950
exposed by graphic UL that contains like

00:05:30,400 --> 00:05:34,660
password hashing he uses emails so like

00:05:32,950 --> 00:05:36,430
that could be bad if that was exposed to

00:05:34,660 --> 00:05:38,620
vigraha so there's like lots of nice

00:05:36,430 --> 00:05:40,060
patterns and Postgres that you can use

00:05:38,620 --> 00:05:42,100
to secure this information we've also

00:05:40,060 --> 00:05:44,910
got some functions for registering users

00:05:42,100 --> 00:05:46,930
and authentification and lots of kind of

00:05:44,910 --> 00:05:49,690
security stuff with like row-level

00:05:46,930 --> 00:05:51,550
security and like adding permissions to

00:05:49,690 --> 00:05:53,710
tables so people can't update each

00:05:51,550 --> 00:05:55,480
other's profiles and stuff which would

00:05:53,710 --> 00:05:57,430
be bad so just like loads of easy ways

00:05:55,480 --> 00:05:59,950
to do all that stuff in like a nice

00:05:57,430 --> 00:06:03,220
declarative way to make life makes life

00:05:59,950 --> 00:06:04,660
a little bit easier but yeah so like all

00:06:03,220 --> 00:06:06,790
that codes on github I'll share a link

00:06:04,660 --> 00:06:08,950
after the meetup on Twitter so you can

00:06:06,790 --> 00:06:11,650
have a look and see how it works without

00:06:08,950 --> 00:06:13,390
me having to like type in like hundred

00:06:11,650 --> 00:06:17,680
lines of sequel which isn't very

00:06:13,390 --> 00:06:19,660
exciting yeah so we can then like let's

00:06:17,680 --> 00:06:24,240
get started let's like actually see it

00:06:19,660 --> 00:06:28,150
in action let's see how easy it is yeah

00:06:24,240 --> 00:06:29,980
that's small okay so I'm gonna run a

00:06:28,150 --> 00:06:31,360
command with docker compose it's going

00:06:29,980 --> 00:06:32,890
to start everything up if you clone the

00:06:31,360 --> 00:06:34,030
repo totsuzen you should be able to run

00:06:32,890 --> 00:06:36,310
docker compose and it should just work

00:06:34,030 --> 00:06:38,350
too that means it's working it's logging

00:06:36,310 --> 00:06:40,780
like crazy because as they old of live

00:06:38,350 --> 00:06:42,850
query mode so I could do subscription

00:06:40,780 --> 00:06:44,220
it'll like actually be real time with

00:06:42,850 --> 00:06:46,750
WebSockets and stuff which is quite cool

00:06:44,220 --> 00:06:48,970
yeah little bit let's sit in action so I

00:06:46,750 --> 00:06:51,940
have a bunch of crafty well queries here

00:06:48,970 --> 00:07:05,110
too like fire into this database so

00:06:51,940 --> 00:07:07,600
that's good back to crime to use yes

00:07:05,110 --> 00:07:10,180
it's working okay so I've got graphic ul

00:07:07,600 --> 00:07:13,450
if anybody is not used this before it's

00:07:10,180 --> 00:07:15,040
a way to like fire queries or our API

00:07:13,450 --> 00:07:17,200
and see stuff it's also got a nice

00:07:15,040 --> 00:07:19,450
little Explorer here or I can see all

00:07:17,200 --> 00:07:21,550
the queries I can make the mutations I

00:07:19,450 --> 00:07:26,919
can make and subscriptions I can make if

00:07:21,550 --> 00:07:28,570
I get rid of all these clients I'm glad

00:07:26,919 --> 00:07:29,860
I've got this to copy paste because

00:07:28,570 --> 00:07:31,780
typing with one hand is hard

00:07:29,860 --> 00:07:33,729
I can register a user and there we go

00:07:31,780 --> 00:07:36,550
I've got one user in the system I'm also

00:07:33,729 --> 00:07:38,620
going to register a second user so we've

00:07:36,550 --> 00:07:41,320
got kind of some stuff to do when we

00:07:38,620 --> 00:07:43,300
start to query all the data so the donor

00:07:41,320 --> 00:07:45,910
mutation calling registry user with an

00:07:43,300 --> 00:07:49,210
input an email and a password and we're

00:07:45,910 --> 00:07:56,260
going to use for a graphic you are query

00:07:49,210 --> 00:07:57,910
syntax so hard button even though it

00:07:56,260 --> 00:08:01,180
like autocomplete some stuff I still

00:07:57,910 --> 00:08:02,590
mess it up because it's like like the

00:08:01,180 --> 00:08:04,030
auto completion is really nice because

00:08:02,590 --> 00:08:06,640
it's got all the types and stuff so I

00:08:04,030 --> 00:08:08,380
can go like token in a site it's a j2ee

00:08:06,640 --> 00:08:09,880
thick and it should be like

00:08:08,380 --> 00:08:12,669
self-documenting or something for this

00:08:09,880 --> 00:08:14,169
graph you well alright we've got a to 18

00:08:12,669 --> 00:08:16,180
seconds so now all this has been

00:08:14,169 --> 00:08:18,789
generated by C cool by the way and

00:08:16,180 --> 00:08:20,500
unlike the like expressed layer that

00:08:18,789 --> 00:08:22,870
post graph I'll come to it so then you

00:08:20,500 --> 00:08:25,930
can like drop this in a header and in

00:08:22,870 --> 00:08:28,419
future requests you can now by login

00:08:25,930 --> 00:08:30,760
with as this user without actually

00:08:28,419 --> 00:08:33,610
having to write any node.js code which

00:08:30,760 --> 00:08:36,159
is super super nice so now we've got our

00:08:33,610 --> 00:08:41,080
auth token we can start to run mutations

00:08:36,159 --> 00:08:42,789
against this thing so if I go like well

00:08:41,080 --> 00:08:44,110
mutations actually create data rather

00:08:42,789 --> 00:08:47,950
than the authentification one so we can

00:08:44,110 --> 00:08:49,450
create group I forgot to that's proving

00:08:47,950 --> 00:08:52,570
that the authentification is actually

00:08:49,450 --> 00:09:02,440
valid I was

00:08:52,570 --> 00:09:05,019
to do that and a machine tonight

00:09:02,440 --> 00:09:07,860
I'm talking this off oh there's two

00:09:05,019 --> 00:09:16,680
quick mobster okay let's try again

00:09:07,860 --> 00:09:16,680
permission denied let's get bad

00:09:20,220 --> 00:09:26,040
life coding is terrifying by the way

00:09:22,139 --> 00:09:34,560
really really hard okay let's finish the

00:09:26,040 --> 00:09:41,639
office Charlie no permission denied okay

00:09:34,560 --> 00:09:43,199
this isn't butter I think that's good I

00:09:41,639 --> 00:09:45,410
think it's a problem with the Jade BT

00:09:43,199 --> 00:09:50,069
token

00:09:45,410 --> 00:09:58,139
well Oh Barrow I don't think it's that I

00:09:50,069 --> 00:10:00,000
think it's like bother I think it

00:09:58,139 --> 00:10:02,130
handles up for you so it's like some

00:10:00,000 --> 00:10:14,490
weird thing it was working earlier by

00:10:02,130 --> 00:10:25,680
think okay let's try it

00:10:14,490 --> 00:10:40,690
I trust you it definitely worked cuffs

00:10:25,680 --> 00:10:50,150
will be the bearer okay oh my god

00:10:40,690 --> 00:10:52,670
dinner here and oh oh my goodness this

00:10:50,150 --> 00:10:55,820
guy everybody I should have believed I

00:10:52,670 --> 00:10:57,320
couldn't see it in all fairness but yeah

00:10:55,820 --> 00:10:59,420
thank you very much you saved my bacon

00:10:57,320 --> 00:11:01,130
this has made the whole demo worth it

00:10:59,420 --> 00:11:03,140
I'm excited again so we're gonna add

00:11:01,130 --> 00:11:04,400
some organizers to this thing I was

00:11:03,140 --> 00:11:07,280
about to just go give up and walk

00:11:04,400 --> 00:11:11,630
offstage and go to the club we create

00:11:07,280 --> 00:11:13,130
another one and yes sorry if anyone's

00:11:11,630 --> 00:11:14,270
like not tried graph QL before and I'm

00:11:13,130 --> 00:11:16,580
just rushing through these queries I

00:11:14,270 --> 00:11:19,550
kind of hoped everyone had had a play

00:11:16,580 --> 00:11:21,860
the syntax is like got mutation we've

00:11:19,550 --> 00:11:24,920
got like the mutation name we've got an

00:11:21,860 --> 00:11:27,050
input object and we specify what we want

00:11:24,920 --> 00:11:29,030
to return so now I create a bunch of

00:11:27,050 --> 00:11:31,520
stuff we can do a query and this kind of

00:11:29,030 --> 00:11:33,500
shows off the power of graph QL because

00:11:31,520 --> 00:11:36,650
we can query a lot of stuff in one thing

00:11:33,500 --> 00:11:38,870
and just like say we're getting like all

00:11:36,650 --> 00:11:41,330
the groups I've only made one that

00:11:38,870 --> 00:11:42,980
organized the owner name and the

00:11:41,330 --> 00:11:44,870
organizers for that Meetup

00:11:42,980 --> 00:11:46,970
so we can go like this and we get back

00:11:44,870 --> 00:11:48,620
an object with exactly what we specified

00:11:46,970 --> 00:11:51,920
we want it which is really nice any kind

00:11:48,620 --> 00:11:56,180
of proofs that works so that's good but

00:11:51,920 --> 00:11:57,980
like what's the catch so like we can

00:11:56,180 --> 00:11:59,480
build something I've written like a

00:11:57,980 --> 00:12:02,390
hundred and twenty lines of sequel I've

00:11:59,480 --> 00:12:04,370
showed you like hard any the things that

00:12:02,390 --> 00:12:06,020
big list of things there is like all the

00:12:04,370 --> 00:12:08,210
tables and all the mutations we can do

00:12:06,020 --> 00:12:10,880
so we do a lot of stuff with like 120

00:12:08,210 --> 00:12:12,770
lines of sequel and one node.js

00:12:10,880 --> 00:12:14,450
command-line tool well I

00:12:12,770 --> 00:12:16,220
so what can't we do what constraints

00:12:14,450 --> 00:12:19,550
have we implemented well you would think

00:12:16,220 --> 00:12:21,710
that like all right we can do crud and

00:12:19,550 --> 00:12:22,100
that's about it but that's actually not

00:12:21,710 --> 00:12:26,960
the case

00:12:22,100 --> 00:12:29,030
so with Postgres functions we can use

00:12:26,960 --> 00:12:31,340
like procedural query languages or

00:12:29,030 --> 00:12:33,500
programming languages to do like more

00:12:31,340 --> 00:12:35,720
complicated things like with some simple

00:12:33,500 --> 00:12:37,190
business logic or like anything and

00:12:35,720 --> 00:12:39,110
there's a couple of implementations in

00:12:37,190 --> 00:12:41,360
there so there's PLP SQL which is a

00:12:39,110 --> 00:12:43,370
sequel one is probably best documented

00:12:41,360 --> 00:12:45,650
it's the easiest one to have a go with

00:12:43,370 --> 00:12:47,330
the documentation z' more thorough and

00:12:45,650 --> 00:12:49,790
completes and there's less weird gotchas

00:12:47,330 --> 00:12:51,350
there's also a v8 JavaScript

00:12:49,790 --> 00:12:52,880
implementation which is really really

00:12:51,350 --> 00:12:53,360
nice if you already know JavaScript and

00:12:52,880 --> 00:12:54,920
the row of

00:12:53,360 --> 00:12:56,569
Ruby but I've left them out because I've

00:12:54,920 --> 00:12:59,059
tried to access the documentation and

00:12:56,569 --> 00:13:00,259
the site appeared to be down so they're

00:12:59,059 --> 00:13:01,579
really good and that means you can

00:13:00,259 --> 00:13:04,179
actually start to do some business logic

00:13:01,579 --> 00:13:07,489
like I said things like hey when I

00:13:04,179 --> 00:13:08,929
request a user like when I register a

00:13:07,489 --> 00:13:11,119
user I want you to hash their password

00:13:08,929 --> 00:13:13,160
instead of just saving in plain text in

00:13:11,119 --> 00:13:15,470
a function you could do more complicated

00:13:13,160 --> 00:13:20,449
things like I don't know like some maps

00:13:15,470 --> 00:13:23,360
and stuff and also the other constraint

00:13:20,449 --> 00:13:24,529
we could think about is like the apps we

00:13:23,360 --> 00:13:26,839
build all have loads of like

00:13:24,529 --> 00:13:29,660
asynchronous integrations with other

00:13:26,839 --> 00:13:31,339
services like sending emails and doing

00:13:29,660 --> 00:13:32,899
stripe payments and things like that

00:13:31,339 --> 00:13:34,730
that actually like how would we handle

00:13:32,899 --> 00:13:36,619
this when we can just do crud and

00:13:34,730 --> 00:13:39,649
functions in the database so it is a

00:13:36,619 --> 00:13:40,999
cool little nifty nodejs library to

00:13:39,649 --> 00:13:43,970
handle this called graph oil worker

00:13:40,999 --> 00:13:46,639
there basically lets you specify jobs in

00:13:43,970 --> 00:13:50,869
your Postgres schema like hey I've got

00:13:46,639 --> 00:13:53,029
this ad job thing that I can select I

00:13:50,869 --> 00:13:55,040
can get its let's graph our work at that

00:13:53,029 --> 00:13:57,379
ad job in a function so lately I'm

00:13:55,040 --> 00:13:59,600
creating a user I can have one of these

00:13:57,379 --> 00:14:01,369
as like email tasks and send the email

00:13:59,600 --> 00:14:02,629
what they username and like loads of

00:14:01,369 --> 00:14:04,639
nice things so I can send them a nice

00:14:02,629 --> 00:14:06,439
welcome home and then I could write some

00:14:04,639 --> 00:14:09,379
no js' code that would like pick that up

00:14:06,439 --> 00:14:11,360
and it's like very fast and performing

00:14:09,379 --> 00:14:12,919
can handle lots of jobs and you can also

00:14:11,360 --> 00:14:14,899
offload those jobs on to other things

00:14:12,919 --> 00:14:18,829
which is really nice so it kind of sorts

00:14:14,899 --> 00:14:20,509
those two constraints and also like how

00:14:18,829 --> 00:14:23,269
do we deploy this thing it's a CLI tool

00:14:20,509 --> 00:14:28,429
can we really deploy a CLI tool into

00:14:23,269 --> 00:14:30,110
production probably not there is like

00:14:28,429 --> 00:14:31,999
some examples so I've got a little post

00:14:30,110 --> 00:14:33,199
graph file docker compose Prague on

00:14:31,999 --> 00:14:36,529
which is the demo I showed you earlier

00:14:33,199 --> 00:14:38,119
you can clone and have it go it's a

00:14:36,529 --> 00:14:39,619
little bit - ished in terms of the

00:14:38,119 --> 00:14:42,439
database schema but if anyone wants to

00:14:39,619 --> 00:14:45,350
help out then that'd be very nice and

00:14:42,439 --> 00:14:47,480
then the way I think it's probably best

00:14:45,350 --> 00:14:49,579
to deploy it is following this guide

00:14:47,480 --> 00:14:52,040
here by a guy called calop it's

00:14:49,579 --> 00:14:55,309
incredible it doesn't take two seconds

00:14:52,040 --> 00:14:58,399
but it basically shows you how to set

00:14:55,309 --> 00:15:00,049
this thing up using AWS Cognito for all

00:14:58,399 --> 00:15:02,600
your user accessing control so you've

00:15:00,049 --> 00:15:04,620
got secure accounts built in with things

00:15:02,600 --> 00:15:06,240
like password resets and

00:15:04,620 --> 00:15:07,500
just loads of things that you couldn't

00:15:06,240 --> 00:15:09,690
possibly handle yourself and it's

00:15:07,500 --> 00:15:12,090
deployed to serve us so you pay pay use

00:15:09,690 --> 00:15:14,070
so you can host something quite cheaply

00:15:12,090 --> 00:15:15,540
you have to pay to host a database

00:15:14,070 --> 00:15:18,390
somewhere which is a little bit more

00:15:15,540 --> 00:15:19,740
expensive but digitalocean starts at 15

00:15:18,390 --> 00:15:23,970
pounds a month

00:15:19,740 --> 00:15:25,560
shameless plug love distillation I think

00:15:23,970 --> 00:15:28,410
I've got a referral link somewhere yeah

00:15:25,560 --> 00:15:31,900
I should share the referral link

00:15:28,410 --> 00:15:38,659
that'd be nice yeah thanks for listening

00:15:31,900 --> 00:15:38,659

YouTube URL: https://www.youtube.com/watch?v=hj4gvl8VNBk


