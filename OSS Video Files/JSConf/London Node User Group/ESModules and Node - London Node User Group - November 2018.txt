Title: ESModules and Node - London Node User Group - November 2018
Publication date: 2018-12-03
Playlist: London Node User Group
Description: 
	Presented by Andy Trevorah

ECMAScript modules are just around the corner, but they may not be what you expect. I'll go into the reasoning behind the change and what it means for the future of javascript.

I'm Andy, a full stack JS developer with a love of native apps. I'm a contractor @ DAZN and my twitter handle is @trevorah_.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:07,500
I'm Andy I could be giving a talk on es

00:00:03,600 --> 00:00:10,050
modules and note this is a gif of a

00:00:07,500 --> 00:00:12,900
cover yellow car that's spinning around

00:00:10,050 --> 00:00:15,210
let's go fast seems to be enjoying

00:00:12,900 --> 00:00:16,049
itself just spinning around doesn't have

00:00:15,210 --> 00:00:21,240
to go anywhere

00:00:16,049 --> 00:00:26,099
oh great alright so yeah this talk is

00:00:21,240 --> 00:00:28,529
about es modules and note who here as

00:00:26,099 --> 00:00:31,969
written in the es module syntax the bomb

00:00:28,529 --> 00:00:34,800
one that's great

00:00:31,969 --> 00:00:38,059
who is currently writing it through

00:00:34,800 --> 00:00:40,110
Babel so you people yeah

00:00:38,059 --> 00:00:42,420
so this talk I'm not going to go through

00:00:40,110 --> 00:00:45,000
the syntax because I assume everyone

00:00:42,420 --> 00:00:49,260
pretty much knows it if you don't at the

00:00:45,000 --> 00:00:50,850
top bit that's like commonjs nodes style

00:00:49,260 --> 00:00:52,379
and they just need to change it to the

00:00:50,850 --> 00:00:54,379
book be the bottom that you can read in

00:00:52,379 --> 00:00:57,360
a blog post

00:00:54,379 --> 00:01:01,050
there's actually a mistake here that

00:00:57,360 --> 00:01:05,189
I've intentionally left in if you can

00:01:01,050 --> 00:01:10,170
spot it good for you talk about it later

00:01:05,189 --> 00:01:13,830
um so this talk I'm gonna go over the

00:01:10,170 --> 00:01:16,170
history like how do we get how do we get

00:01:13,830 --> 00:01:20,100
to this point of modules and why is it a

00:01:16,170 --> 00:01:22,110
little bit weird um and then I'm going

00:01:20,100 --> 00:01:25,650
to talk about the tricky bits all the

00:01:22,110 --> 00:01:29,850
governs all the governor governing weird

00:01:25,650 --> 00:01:32,610
bits the second bit is a little bit dry

00:01:29,850 --> 00:01:34,590
because I'm talking about a spec there's

00:01:32,610 --> 00:01:38,790
not much I can do about that I try to

00:01:34,590 --> 00:01:41,159
keep the govern levels low hopefully we

00:01:38,790 --> 00:01:45,180
don't get too caught up in it should be

00:01:41,159 --> 00:01:46,590
alright the basis of this talk is you

00:01:45,180 --> 00:01:49,530
should be able to come out with a better

00:01:46,590 --> 00:01:56,009
idea of what's going on with nodes and

00:01:49,530 --> 00:02:01,079
ES modules and then you can like do some

00:01:56,009 --> 00:02:05,780
more waiting pretty much yeah cool so

00:02:01,079 --> 00:02:05,780
first things first history

00:02:06,320 --> 00:02:16,349
okay so early on in my career I was

00:02:13,680 --> 00:02:21,300
building web apps for banks me

00:02:16,349 --> 00:02:23,970
personally it is this was around the

00:02:21,300 --> 00:02:26,540
time where you didn't really have web

00:02:23,970 --> 00:02:31,019
apps so you could get away with anything

00:02:26,540 --> 00:02:32,340
it was the best it was a simple time if

00:02:31,019 --> 00:02:33,569
you if you wanted to have something

00:02:32,340 --> 00:02:36,660
that's made out of multiple files you

00:02:33,569 --> 00:02:38,550
just concatenate them maybe minify if

00:02:36,660 --> 00:02:40,890
you're feeling a bit fancy you have a

00:02:38,550 --> 00:02:45,090
loading bar there's also like Gmail ah

00:02:40,890 --> 00:02:47,610
loading bars so great also fun fact

00:02:45,090 --> 00:02:50,430
Jer steps were really rare at that time

00:02:47,610 --> 00:02:51,750
as well if you got into JavaScript it

00:02:50,430 --> 00:02:53,910
was usually through some other language

00:02:51,750 --> 00:02:55,980
like you're a Java developer and you

00:02:53,910 --> 00:02:57,540
forced to use javascript because someone

00:02:55,980 --> 00:03:01,440
had a hunch that the web would be a big

00:02:57,540 --> 00:03:04,860
thing and it was a great simple time as

00:03:01,440 --> 00:03:09,480
lovely we'd end up writing files like

00:03:04,860 --> 00:03:11,190
this so of course we're all dealing with

00:03:09,480 --> 00:03:13,790
you know you could just concatenate

00:03:11,190 --> 00:03:16,650
files that all on the global namespace

00:03:13,790 --> 00:03:18,209
so you'd have kind of an agreement with

00:03:16,650 --> 00:03:21,420
the developers around you not to trash

00:03:18,209 --> 00:03:25,849
each other stuff used to write code like

00:03:21,420 --> 00:03:29,700
this the namespace bit would create a

00:03:25,849 --> 00:03:30,959
kind of like a tree of objects and does

00:03:29,700 --> 00:03:40,709
anyone remember things like backwards

00:03:30,959 --> 00:03:47,519
for loops for performance it's like yeah

00:03:40,709 --> 00:03:51,090
it's great times yeah in reality it was

00:03:47,519 --> 00:03:54,120
the worst it was really it was a

00:03:51,090 --> 00:03:55,500
terrible way to develop I'm gonna swear

00:03:54,120 --> 00:03:59,400
a lot because I've been through this

00:03:55,500 --> 00:04:01,319
hard these early days I'm allowed to so

00:03:59,400 --> 00:04:04,319
we have cables that you know

00:04:01,319 --> 00:04:10,590
Global's yeah dependency management

00:04:04,319 --> 00:04:12,330
didn't exist that unit testing so

00:04:10,590 --> 00:04:15,090
the differences between browsers were so

00:04:12,330 --> 00:04:17,250
big that like you're giving run unit

00:04:15,090 --> 00:04:19,850
tests in some browsers and even then it

00:04:17,250 --> 00:04:25,020
would take long

00:04:19,850 --> 00:04:27,150
debugging Swank like there's you're

00:04:25,020 --> 00:04:28,770
lucky to be able to log something like

00:04:27,150 --> 00:04:30,630
he had Firebug that was a brand new

00:04:28,770 --> 00:04:33,330
thing like no one really kept or any

00:04:30,630 --> 00:04:35,010
they get too rough standards but you

00:04:33,330 --> 00:04:36,690
come across like a browser difference

00:04:35,010 --> 00:04:39,840
every single day of your development

00:04:36,690 --> 00:04:43,290
life there's always be something weird

00:04:39,840 --> 00:04:46,400
that you got caught out with I remember

00:04:43,290 --> 00:04:50,250
chasing like even ie7 had these weird

00:04:46,400 --> 00:04:52,650
like memory islands so if you've if like

00:04:50,250 --> 00:04:56,280
an element had still had reference to

00:04:52,650 --> 00:04:58,620
its to the thing that was calling it

00:04:56,280 --> 00:05:00,830
even if that element was destroyed you'd

00:04:58,620 --> 00:05:05,490
still have some stuff in your heap a

00:05:00,830 --> 00:05:08,070
nightmare terrible luckily things were

00:05:05,490 --> 00:05:11,750
getting better and at that time some

00:05:08,070 --> 00:05:11,750
server-side JavaScript was showing up

00:05:12,110 --> 00:05:18,440
this is great stuff like Rhino someone

00:05:16,860 --> 00:05:22,050
remember Rhino

00:05:18,440 --> 00:05:27,600
no one remembers right now yeah people

00:05:22,050 --> 00:05:32,000
remember by now it's fun JVM so around

00:05:27,600 --> 00:05:34,890
this time common Deus started appearing

00:05:32,000 --> 00:05:36,840
this was done in a way to kind of

00:05:34,890 --> 00:05:41,430
standard standardized Surfside

00:05:36,840 --> 00:05:44,430
JavaScript it was based on the

00:05:41,430 --> 00:05:45,050
assumption that was the best way to put

00:05:44,430 --> 00:05:47,160
it

00:05:45,050 --> 00:05:50,550
the differences that we had with

00:05:47,160 --> 00:05:53,300
browsers was a big pain and it's a big

00:05:50,550 --> 00:05:56,490
pain to get a given back to one standard

00:05:53,300 --> 00:06:01,500
with server-side JavaScript as the stuff

00:05:56,490 --> 00:06:03,540
is flourishing if we keep to a standard

00:06:01,500 --> 00:06:05,540
early on they don't have the same

00:06:03,540 --> 00:06:08,070
problems of just previously been through

00:06:05,540 --> 00:06:10,560
we don't repeat the mistakes that we did

00:06:08,070 --> 00:06:14,100
with browsers that's the kind of concept

00:06:10,560 --> 00:06:20,190
behind comment is a cool thing they took

00:06:14,100 --> 00:06:21,930
was the module pattern it's like it's

00:06:20,190 --> 00:06:24,570
basically a way of declaring a thing in

00:06:21,930 --> 00:06:25,830
like oh look you can have always private

00:06:24,570 --> 00:06:28,710
functions that's all nice

00:06:25,830 --> 00:06:30,630
so commentators took that add a few bits

00:06:28,710 --> 00:06:33,630
to it

00:06:30,630 --> 00:06:36,150
now here's a neat trick if you if you

00:06:33,630 --> 00:06:38,120
kind of like cover the first and last

00:06:36,150 --> 00:06:40,920
lies

00:06:38,120 --> 00:06:42,630
that's a node module there's a common

00:06:40,920 --> 00:06:48,120
test node module and that's pretty much

00:06:42,630 --> 00:06:51,600
how node modules work the top and bottom

00:06:48,120 --> 00:06:53,700
get eventually appended to a file you

00:06:51,600 --> 00:06:55,590
have export to require they're just for

00:06:53,700 --> 00:06:57,300
that module plus some extra bits the

00:06:55,590 --> 00:06:59,520
specific set module as well and

00:06:57,300 --> 00:07:04,350
everything all works out fine it's

00:06:59,520 --> 00:07:07,110
lovely comment AS was actually more than

00:07:04,350 --> 00:07:09,170
just this kind of again look at the

00:07:07,110 --> 00:07:14,550
first two last lines more than this

00:07:09,170 --> 00:07:18,050
module pattern they also had like a disk

00:07:14,550 --> 00:07:22,110
API that was all specified Network API

00:07:18,050 --> 00:07:27,390
and the big thing was it didn't actually

00:07:22,110 --> 00:07:29,070
have a sync i/o which meant that no js'

00:07:27,390 --> 00:07:32,970
ended up kind of falling out with comedy

00:07:29,070 --> 00:07:34,470
is so common Deus if you actually try

00:07:32,970 --> 00:07:35,970
and find out what's happening with it at

00:07:34,470 --> 00:07:42,600
the moment you'll see that it's pretty

00:07:35,970 --> 00:07:47,460
dead and the reason wide nodejs and

00:07:42,600 --> 00:07:50,790
Commodus broke up and aside from like

00:07:47,460 --> 00:07:53,910
these the lack of async i/o which is

00:07:50,790 --> 00:07:57,330
kind of big thing with node it was kind

00:07:53,910 --> 00:08:01,620
of more down to the root that commonest

00:07:57,330 --> 00:08:04,050
was going down coming to a yes they were

00:08:01,620 --> 00:08:06,200
coming out with standards before things

00:08:04,050 --> 00:08:09,870
got popular or before things were being

00:08:06,200 --> 00:08:14,790
used so you end up with quite a bit of

00:08:09,870 --> 00:08:17,670
bite shedding nodejs felt that this was

00:08:14,790 --> 00:08:21,120
kind of holding it back and so just went

00:08:17,670 --> 00:08:22,440
either so in special direction people

00:08:21,120 --> 00:08:24,750
were coming up with standards before

00:08:22,440 --> 00:08:28,950
people really knew what server-side

00:08:24,750 --> 00:08:31,920
javascript was meant to be so no js' was

00:08:28,950 --> 00:08:33,810
weird and young when i was doing all

00:08:31,920 --> 00:08:37,260
these weird kind of experimental stuff a

00:08:33,810 --> 00:08:38,790
lot of it's been deprecated away you can

00:08:37,260 --> 00:08:40,110
probably have some early alphas and

00:08:38,790 --> 00:08:43,849
betas or whatever take the stuff out

00:08:40,110 --> 00:08:43,849
some stuff has stuck around

00:08:44,010 --> 00:08:51,779
so fun facts with all these four

00:08:47,810 --> 00:08:54,120
locations if a module isn't in there it

00:08:51,779 --> 00:08:56,279
modules you can actually load it from

00:08:54,120 --> 00:08:59,699
there so if you specify a node path it

00:08:56,279 --> 00:09:02,430
will pick up modules from there dot node

00:08:59,699 --> 00:09:04,560
modules node libraries if you really

00:09:02,430 --> 00:09:05,639
want to piss someone off with clever

00:09:04,560 --> 00:09:07,380
prank

00:09:05,639 --> 00:09:08,339
unless I'm a prank and more you know

00:09:07,380 --> 00:09:09,480
well there's knowing prank so if people

00:09:08,339 --> 00:09:12,800
just hate you

00:09:09,480 --> 00:09:17,810
you can put modules into these locations

00:09:12,800 --> 00:09:22,199
and it's what people get really angry

00:09:17,810 --> 00:09:25,500
don't do it but this is the price of

00:09:22,199 --> 00:09:27,839
iteration you have this stuff card left

00:09:25,500 --> 00:09:30,240
behind there's some weird stuff that

00:09:27,839 --> 00:09:34,019
nodes still has to contractually deal

00:09:30,240 --> 00:09:36,750
with from the handle so while this is

00:09:34,019 --> 00:09:39,420
all going on where are the real

00:09:36,750 --> 00:09:44,959
standards like where the parents and all

00:09:39,420 --> 00:09:47,459
this like no gesturing crazy yeah

00:09:44,959 --> 00:09:49,769
so equi originally stood for the

00:09:47,459 --> 00:09:57,269
european computer manufacturers

00:09:49,769 --> 00:09:58,860
association all people hate them and who

00:09:57,269 --> 00:10:00,660
they change their name it's actually

00:09:58,860 --> 00:10:02,550
equi international european association

00:10:00,660 --> 00:10:06,510
for standardizing information and

00:10:02,550 --> 00:10:08,490
competing communication systems so if

00:10:06,510 --> 00:10:13,079
anyone ever asks you what ECMO stands

00:10:08,490 --> 00:10:16,440
for it doesn't censor anything if you

00:10:13,079 --> 00:10:23,130
try and make an acronym out of the last

00:10:16,440 --> 00:10:26,120
bit I foresee curse not gonna fly

00:10:23,130 --> 00:10:30,569
so javascript when it was first created

00:10:26,120 --> 00:10:33,060
it was registered with ECMO within the

00:10:30,569 --> 00:10:33,779
first year so they've been there since

00:10:33,060 --> 00:10:38,089
day

00:10:33,779 --> 00:10:41,940
well year one now

00:10:38,089 --> 00:10:46,170
Eckman Eckman scripts equi script is

00:10:41,940 --> 00:10:49,170
technically Ahmed 262 they have a

00:10:46,170 --> 00:10:51,660
technical committee that's tc39 everyone

00:10:49,170 --> 00:10:54,449
aware of tc39 and lovely people were

00:10:51,660 --> 00:10:57,540
great there's also other technical

00:10:54,449 --> 00:10:59,580
committees TC 26 they deal with acoustic

00:10:57,540 --> 00:11:04,670
completely unrelated to JavaScript but I

00:10:59,580 --> 00:11:09,690
found that out so the difference

00:11:04,670 --> 00:11:12,030
published versions of echo scripts they

00:11:09,690 --> 00:11:15,210
took a lot to get out some of them

00:11:12,030 --> 00:11:17,420
there's a gap of about 10 years which is

00:11:15,210 --> 00:11:20,430
pretty bad don't talk about es for

00:11:17,420 --> 00:11:23,190
that's it's fun to read up on it there's

00:11:20,430 --> 00:11:29,780
no drama people accusing other people of

00:11:23,190 --> 00:11:33,450
lying that's great but for es 5 es6 the

00:11:29,780 --> 00:11:37,950
technical committee really started to

00:11:33,450 --> 00:11:41,630
polish up the process and handle the new

00:11:37,950 --> 00:11:44,280
popularity of javascript so now we have

00:11:41,630 --> 00:11:47,550
editions of ECMO scripts coming out

00:11:44,280 --> 00:11:50,100
every year pretty much which is great

00:11:47,550 --> 00:11:52,020
but of that is down to babel and people

00:11:50,100 --> 00:11:59,130
be able to experiment and try these new

00:11:52,020 --> 00:12:03,300
standards but with modules that actually

00:11:59,130 --> 00:12:08,100
came out in or es6 six modules 2015 it's

00:12:03,300 --> 00:12:11,190
been a while now it's been a while so

00:12:08,100 --> 00:12:13,350
the people behind this module pattern

00:12:11,190 --> 00:12:17,240
that's coming out of Ecuador came out of

00:12:13,350 --> 00:12:20,250
actual script wack where TC alright

00:12:17,240 --> 00:12:22,710
that's actually the same some of the

00:12:20,250 --> 00:12:24,030
same people that were behind node so a

00:12:22,710 --> 00:12:26,400
lot of this stuff gets kind of

00:12:24,030 --> 00:12:29,340
influenced and back influenced and it's

00:12:26,400 --> 00:12:31,950
all a big mishmash it's not really an

00:12:29,340 --> 00:12:34,620
us-versus-them kind of thing like comedy

00:12:31,950 --> 00:12:39,060
is just happens we have the same thing

00:12:34,620 --> 00:12:43,160
in parallel but nodes we're trying to

00:12:39,060 --> 00:12:43,160
actually join this stuff back together

00:12:43,820 --> 00:12:53,190
so ECMO scripts modules look like this

00:12:48,210 --> 00:12:56,160
so lovely it's mainly a thing for the

00:12:53,190 --> 00:12:59,160
web which makes sense if you've ever

00:12:56,160 --> 00:13:02,420
done you've ever done web development I

00:12:59,160 --> 00:13:04,770
think oh that's great

00:13:02,420 --> 00:13:07,740
I'm actually very excited about

00:13:04,770 --> 00:13:12,060
Abuk having like first party support for

00:13:07,740 --> 00:13:14,950
I can script modules in a browser

00:13:12,060 --> 00:13:17,170
firstly I'd tried teaching JavaScript

00:13:14,950 --> 00:13:19,270
other people were the first things that

00:13:17,170 --> 00:13:21,970
comes out once they start to get going

00:13:19,270 --> 00:13:25,660
is hey how do I split this into mortal

00:13:21,970 --> 00:13:31,089
files you have to go like yeah so you

00:13:25,660 --> 00:13:32,020
have to download node it's not fun but

00:13:31,089 --> 00:13:36,910
the other thing that I'm really

00:13:32,020 --> 00:13:39,790
genuinely excited about is if you've

00:13:36,910 --> 00:13:41,290
ever written like a like a react

00:13:39,790 --> 00:13:44,080
component or like some kind of view

00:13:41,290 --> 00:13:46,870
widget or whatever that has to import

00:13:44,080 --> 00:13:48,580
some third-party widget like and they

00:13:46,870 --> 00:13:50,560
normally have a like a help page it's

00:13:48,580 --> 00:13:53,470
like a you have to put the script tag on

00:13:50,560 --> 00:13:56,020
your page like if echo script said that

00:13:53,470 --> 00:13:58,210
if Eknath script modules become

00:13:56,020 --> 00:14:03,250
standards they should just be publishing

00:13:58,210 --> 00:14:05,470
a module which means you can just import

00:14:03,250 --> 00:14:07,150
it in even if it's a dynamic import and

00:14:05,470 --> 00:14:09,970
it's uncashed and you don't have to do

00:14:07,150 --> 00:14:13,029
that thing where when your component

00:14:09,970 --> 00:14:14,830
gets mounted you add something into yeah

00:14:13,029 --> 00:14:16,990
you create a script tag and when you're

00:14:14,830 --> 00:14:18,880
Ramon it gets destroyed or whatever you

00:14:16,990 --> 00:14:21,850
have to remove the script tags like oh

00:14:18,880 --> 00:14:24,150
that's gone I hate that it's gonna be

00:14:21,850 --> 00:14:28,150
better I like it

00:14:24,150 --> 00:14:31,410
but why did Ahmed go for this rather

00:14:28,150 --> 00:14:35,370
than command J s like what's the deal

00:14:31,410 --> 00:14:37,660
okay but we're in the second half now I

00:14:35,370 --> 00:14:41,680
warned you earlier this is the gubbins

00:14:37,660 --> 00:14:46,990
zone it's gonna get dry and you get

00:14:41,680 --> 00:14:50,620
governing shallow governance so this is

00:14:46,990 --> 00:14:56,380
no Jess's this is like a lot of common

00:14:50,620 --> 00:14:58,060
J's stuff back and forth whenever you

00:14:56,380 --> 00:15:03,459
come across the require statement as you

00:14:58,060 --> 00:15:07,450
all should know you hit the desk let up

00:15:03,459 --> 00:15:09,310
that file start executing it see what it

00:15:07,450 --> 00:15:13,510
comes out with they go back to the

00:15:09,310 --> 00:15:14,470
original fire and carry on executing if

00:15:13,510 --> 00:15:17,050
you come across another require

00:15:14,470 --> 00:15:22,060
statement no look we go to bjs grab that

00:15:17,050 --> 00:15:25,580
thing come back out it's all great can

00:15:22,060 --> 00:15:27,810
anyone think of why that we bad for web

00:15:25,580 --> 00:15:34,800
so they like cousin here

00:15:27,810 --> 00:15:38,730
oh you sir yeah and you're hitting the

00:15:34,800 --> 00:15:40,830
desk so that red line does slowly

00:15:38,730 --> 00:15:44,250
drawing out if it's going to hit the

00:15:40,830 --> 00:15:46,950
network it's going to be blocking so if

00:15:44,250 --> 00:15:49,080
you load up a website it's going to go

00:15:46,950 --> 00:15:50,580
fetch allotted JavaScript you're not

00:15:49,080 --> 00:15:53,160
gonna be up to scroll around or do

00:15:50,580 --> 00:15:56,790
anything until this is all done and

00:15:53,160 --> 00:15:58,200
dusted unload less of an issue because

00:15:56,790 --> 00:15:58,710
we're hanging the disk it's not that big

00:15:58,200 --> 00:16:02,010
a deal

00:15:58,710 --> 00:16:04,410
but on web it's bad like this is this is

00:16:02,010 --> 00:16:10,140
synchronous module loading kind of sucks

00:16:04,410 --> 00:16:12,450
so as far as the standard tc39 came out

00:16:10,140 --> 00:16:17,400
with this so if you're if you have a

00:16:12,450 --> 00:16:20,660
JavaScript engine if you have these

00:16:17,400 --> 00:16:26,970
three functions pretty much you can

00:16:20,660 --> 00:16:30,120
handle modules just those three anyone

00:16:26,970 --> 00:16:34,800
can do it'd be great first one pars

00:16:30,120 --> 00:16:35,610
module this is going from some file

00:16:34,800 --> 00:16:43,100
somewhere

00:16:35,610 --> 00:16:47,970
he gets an ast shout out to Ed a SDS

00:16:43,100 --> 00:16:51,000
plus load of other metadata we get back

00:16:47,970 --> 00:16:53,400
to that in a sec you also have module do

00:16:51,000 --> 00:16:54,810
instead she ate this is where we get

00:16:53,400 --> 00:16:56,010
these module records that we parse out

00:16:54,810 --> 00:16:58,680
those files and actually start

00:16:56,010 --> 00:17:01,410
collecting them all up does it make

00:16:58,680 --> 00:17:04,410
sense and then it evaluates module to

00:17:01,410 --> 00:17:09,930
evaluate all goes live and Kostas

00:17:04,410 --> 00:17:16,540
executing it super cool and so just

00:17:09,930 --> 00:17:21,400
those three files

00:17:16,540 --> 00:17:23,460
associate evaluate okay so here's what's

00:17:21,400 --> 00:17:23,460
weird

00:17:24,720 --> 00:17:33,610
pars module like file to module records

00:17:29,430 --> 00:17:36,040
where do you get the files from so this

00:17:33,610 --> 00:17:39,970
is undefined behavior in the echo script

00:17:36,040 --> 00:17:42,790
standard this is intentional it's good

00:17:39,970 --> 00:17:45,870
to have undefined behavior for a web

00:17:42,790 --> 00:17:51,330
it's great this is actually covered by

00:17:45,870 --> 00:17:51,330
the HTML standard it's a good standard

00:17:53,160 --> 00:18:00,070
so our web it's all pretty

00:17:58,000 --> 00:18:05,200
straightforward you have a script tag

00:18:00,070 --> 00:18:08,250
you put an extra property in it that

00:18:05,200 --> 00:18:12,550
says like hey this is referring to a

00:18:08,250 --> 00:18:17,710
module so interpretive use parse module

00:18:12,550 --> 00:18:19,660
to pass it all in and the HTML standard

00:18:17,710 --> 00:18:22,620
means that the browser I can go fetch

00:18:19,660 --> 00:18:26,650
all the modules that need so great a

00:18:22,620 --> 00:18:30,690
little bit harder on node there's no

00:18:26,650 --> 00:18:33,040
nice way to kind of direct official yeah

00:18:30,690 --> 00:18:38,440
deficient there tell the difference

00:18:33,040 --> 00:18:41,020
between an es module and comment is

00:18:38,440 --> 00:18:44,710
module now right the start I showed

00:18:41,020 --> 00:18:45,730
those it was the same file twice big

00:18:44,710 --> 00:18:51,030
difference between those files aside

00:18:45,730 --> 00:18:54,700
from ones comma - once a TS module is

00:18:51,030 --> 00:18:56,590
you strict so es modules you don't have

00:18:54,700 --> 00:19:00,070
to include use strict so will in a

00:18:56,590 --> 00:19:01,930
strict mode that's quite a big deal you

00:19:00,070 --> 00:19:03,640
actually if you're writing common J's

00:19:01,930 --> 00:19:05,740
stuff you should still be putting you

00:19:03,640 --> 00:19:07,270
strict in there it just means that it's

00:19:05,740 --> 00:19:13,150
not running a sloppy mode there's a lot

00:19:07,270 --> 00:19:19,420
of performance benefits and it's less

00:19:13,150 --> 00:19:22,150
weird so it's not there's no easy way to

00:19:19,420 --> 00:19:24,850
immediately read a file and tell that

00:19:22,150 --> 00:19:26,200
it's es module even if you don't have

00:19:24,850 --> 00:19:27,970
imports you may have like a dynamic

00:19:26,200 --> 00:19:29,980
import there's a whole load of things

00:19:27,970 --> 00:19:33,190
with es modules where in the

00:19:29,980 --> 00:19:34,660
certain keywords rarely really available

00:19:33,190 --> 00:19:36,100
in an es module

00:19:34,660 --> 00:19:39,820
it's calling to tell that stuff

00:19:36,100 --> 00:19:42,610
beforehand so some prototyping of es

00:19:39,820 --> 00:19:45,940
modules with nodes means I've come to

00:19:42,610 --> 00:19:49,600
the conclusion that we're gonna try out

00:19:45,940 --> 00:19:53,370
using MJS to tell the difference it's

00:19:49,600 --> 00:19:53,370
one option may not be the final option

00:19:53,520 --> 00:19:58,420
but this whole thing of getting all the

00:19:56,860 --> 00:20:02,470
files and then collect them all together

00:19:58,420 --> 00:20:03,730
in an asynchronous way is pretty cool

00:20:02,470 --> 00:20:05,740
and there may actually be some

00:20:03,730 --> 00:20:08,890
performance benefits like we all know

00:20:05,740 --> 00:20:11,770
node and the benefit of having a sink IO

00:20:08,890 --> 00:20:15,010
versus synchronous i/o if you can all if

00:20:11,770 --> 00:20:20,760
we can fetch more module records before

00:20:15,010 --> 00:20:24,070
we've finished evaluating them all then

00:20:20,760 --> 00:20:27,250
we may have a start up thing startup

00:20:24,070 --> 00:20:32,230
benefit this probably effects things

00:20:27,250 --> 00:20:36,970
like I'd say lambdas more than your

00:20:32,230 --> 00:20:40,240
regular like Express server whatever you

00:20:36,970 --> 00:20:41,590
want to use in fact you can actually get

00:20:40,240 --> 00:20:44,080
some performance benefits from lambdas

00:20:41,590 --> 00:20:46,000
just by minifying your node code if you

00:20:44,080 --> 00:20:48,070
ever wanted to do that it's weird but

00:20:46,000 --> 00:20:51,910
you can but yeah there are points

00:20:48,070 --> 00:20:54,400
perfect but if you try this with the

00:20:51,910 --> 00:20:56,920
current experimental modules flag is

00:20:54,400 --> 00:21:00,160
actually slower than mode more than

00:20:56,920 --> 00:21:00,730
common to us but performance stuff may

00:21:00,160 --> 00:21:03,640
come later

00:21:00,730 --> 00:21:04,960
the other cool thing is these findings

00:21:03,640 --> 00:21:07,900
that we have between the module records

00:21:04,960 --> 00:21:13,200
are actually live bindings that means

00:21:07,900 --> 00:21:15,190
they share memory roughly and the

00:21:13,200 --> 00:21:16,450
coolest thing is that because you have

00:21:15,190 --> 00:21:18,220
all these modules ahead of time and

00:21:16,450 --> 00:21:19,930
haven't evaluated everything you can

00:21:18,220 --> 00:21:21,180
actually do cyclic dependencies and it's

00:21:19,930 --> 00:21:28,780
not weird

00:21:21,180 --> 00:21:32,680
I like cyclic dependencies now and then

00:21:28,780 --> 00:21:34,780
module dot evaluate so the big thing

00:21:32,680 --> 00:21:39,550
that's kind of risky with all this is

00:21:34,780 --> 00:21:41,620
that implementations can change the the

00:21:39,550 --> 00:21:43,299
spec like I said there's lots of

00:21:41,620 --> 00:21:46,809
undefined behavior and so

00:21:43,299 --> 00:21:49,450
it's up for interpretation and the bad

00:21:46,809 --> 00:21:51,369
thing with that is that you can change

00:21:49,450 --> 00:21:54,879
the well the evaluation order could

00:21:51,369 --> 00:22:00,789
change over time let's see how well this

00:21:54,879 --> 00:22:04,690
pays so if everyone remembers playing

00:22:00,789 --> 00:22:08,769
all the right notes but not necessarily

00:22:04,690 --> 00:22:12,580
in the right order so evaluation order

00:22:08,769 --> 00:22:14,710
is a big deal I mean if you're because

00:22:12,580 --> 00:22:18,039
it's what you expect from a computer to

00:22:14,710 --> 00:22:24,700
execute stuff and all of the expect it

00:22:18,039 --> 00:22:28,899
to so experimental modules is still

00:22:24,700 --> 00:22:31,629
experimental don't use in production if

00:22:28,899 --> 00:22:34,929
you're using some kind of transpiler

00:22:31,629 --> 00:22:38,489
that's kind of let let's you have the

00:22:34,929 --> 00:22:40,809
syntax of es modules that doesn't really

00:22:38,489 --> 00:22:44,619
have the kind of asynchronous module

00:22:40,809 --> 00:22:47,580
loading there may be some surprises just

00:22:44,619 --> 00:22:49,299
a heads up it's all just nice syntax

00:22:47,580 --> 00:22:52,690
experimental modules has been around

00:22:49,299 --> 00:22:56,350
since no just I think 8.5 so it's been

00:22:52,690 --> 00:22:57,429
sometime there's all the feedback that's

00:22:56,350 --> 00:23:01,119
come back from it

00:22:57,429 --> 00:23:05,289
feedback has come back yeah here's a

00:23:01,119 --> 00:23:10,169
little bit this doesn't include the

00:23:05,289 --> 00:23:14,109
massive google doc of user stories that

00:23:10,169 --> 00:23:17,830
that i had to read through there's loads

00:23:14,109 --> 00:23:22,570
of odd bits and edge cases that people

00:23:17,830 --> 00:23:27,190
have found that we need to fix with yes

00:23:22,570 --> 00:23:29,970
modules in node at the big four that we

00:23:27,190 --> 00:23:32,440
have to deal with our spec compliance do

00:23:29,970 --> 00:23:35,739
module covers you know make sense

00:23:32,440 --> 00:23:39,100
don't break commonjs yeah but the

00:23:35,739 --> 00:23:44,919
interesting one no refactoring so this

00:23:39,100 --> 00:23:47,049
is the babel issue so babel it's been

00:23:44,919 --> 00:23:50,350
really super amazing for trying out new

00:23:47,049 --> 00:23:51,999
standards seeing what sticks singing

00:23:50,350 --> 00:23:53,950
what's great allows us to iterate a lot

00:23:51,999 --> 00:23:54,940
quicker when it comes up where we come

00:23:53,950 --> 00:23:57,270
when people are coming off with

00:23:54,940 --> 00:24:01,120
standards

00:23:57,270 --> 00:24:03,070
but it does pose an issue where at some

00:24:01,120 --> 00:24:05,650
point if your transpiling stuff and

00:24:03,070 --> 00:24:07,929
you're trying to try a new stuff once

00:24:05,650 --> 00:24:10,840
note supports that you probably turn off

00:24:07,929 --> 00:24:12,280
that transpiler or at least you turn off

00:24:10,840 --> 00:24:16,870
that bit that you meant to have support

00:24:12,280 --> 00:24:20,710
for this could be a breaking change so

00:24:16,870 --> 00:24:22,750
there is a goal to try until we can do

00:24:20,710 --> 00:24:24,340
about avoiding any kind of refactoring

00:24:22,750 --> 00:24:29,380
that you may have to do when you turn

00:24:24,340 --> 00:24:33,510
off your transpiler so that's the

00:24:29,380 --> 00:24:37,720
governs the tricky bits all this work

00:24:33,510 --> 00:24:39,700
where people are going through the

00:24:37,720 --> 00:24:42,880
issues that we have with es modules and

00:24:39,700 --> 00:24:45,250
what to do next or that discussion is

00:24:42,880 --> 00:24:47,289
done on this repo you can go check it

00:24:45,250 --> 00:24:49,630
out it's great love it

00:24:47,289 --> 00:24:52,840
these people are all working on getting

00:24:49,630 --> 00:24:58,150
the answers for the questions that have

00:24:52,840 --> 00:25:02,980
come up they have actually published a

00:24:58,150 --> 00:25:05,799
plan this week for how the new

00:25:02,980 --> 00:25:08,169
implementation will work they're

00:25:05,799 --> 00:25:11,080
starting with essentially a small kernel

00:25:08,169 --> 00:25:14,490
of just to get consensus rather than

00:25:11,080 --> 00:25:17,860
having a minimum kind of thing and

00:25:14,490 --> 00:25:19,200
slowly build it over time and hopefully

00:25:17,860 --> 00:25:26,559
we have something you can all agree on

00:25:19,200 --> 00:25:28,600
should be great so yeah all of this in

00:25:26,559 --> 00:25:32,020
summary like there's a lot of hard work

00:25:28,600 --> 00:25:34,840
that's being done to make development

00:25:32,020 --> 00:25:37,630
easy this may seem like really

00:25:34,840 --> 00:25:39,250
complicated but hopefully in the end

00:25:37,630 --> 00:25:42,010
we'll just have something that you can

00:25:39,250 --> 00:25:43,330
go plug in and play oh this all works as

00:25:42,010 --> 00:25:44,830
I expected this is fine

00:25:43,330 --> 00:25:47,740
that's what all this work is being done

00:25:44,830 --> 00:25:50,679
to achieve if you're really curious

00:25:47,740 --> 00:25:54,940
about it go check out Guillaume / nodejs

00:25:50,679 --> 00:25:56,950
/ modules if anyone asks you like what's

00:25:54,940 --> 00:25:58,659
the state of yes modules all you have to

00:25:56,950 --> 00:25:59,980
remember is that there's a repo where

00:25:58,659 --> 00:26:03,340
you can go check on it that's what you

00:25:59,980 --> 00:26:05,970
have to say it's fine and I'm Andy oh

00:26:03,340 --> 00:26:05,970
yeah

00:26:06,230 --> 00:26:08,290

YouTube URL: https://www.youtube.com/watch?v=IZlFiYdIvnE


