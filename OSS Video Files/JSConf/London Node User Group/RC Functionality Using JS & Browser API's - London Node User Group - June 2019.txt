Title: RC Functionality Using JS & Browser API's - London Node User Group - June 2019
Publication date: 2019-07-03
Playlist: London Node User Group
Description: 
	Presented by Artsiom Mezin
Preoccupy the User's Tab

Remote desktop apps are widely used. All of them work pretty much the same way: you can see the user's desktop and control their mouse and keyboard. And one of the main purposes of using them is providing support to users. Assuming you are not Microsoft or RedHat probably you are interested only in resolving issues which are related to that piece of software that had been delivered by you. E.g. your web application.
But what if you can't obligate your users to install additional software only for support purposes? Or they simply don't want to install anything.

I'm going to talk about how to add a remote control functionality to your web apps using pure JavaScript and native browser APIs.
SPOILER: Even without using browser extensions!

About the speaker:

I am a Senior Frontend Engineer at Behavox. I have almost 10 years of experience in JavaScript development behind my back. Originally I am from Minsk, Belarus. For now, working for a very promising AI company in London. And the topic of this talk is inspired by the real issue which we resolved recently.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:05,730
so my name is Archie Mason today is my

00:00:03,510 --> 00:00:08,460
first English talk and any comments

00:00:05,730 --> 00:00:10,700
about this talk I really welcome welcome

00:00:08,460 --> 00:00:13,230
so please do wear any social media

00:00:10,700 --> 00:00:17,070
direct me now don't do this and do that

00:00:13,230 --> 00:00:17,760
I'm really appreciated if you words

00:00:17,070 --> 00:00:19,560
about me

00:00:17,760 --> 00:00:21,359
I'm a senior front-end developer at

00:00:19,560 --> 00:00:24,539
behaviour but today I'm going to deliver

00:00:21,359 --> 00:00:27,029
a full-stack talk yep so I'm doing that

00:00:24,539 --> 00:00:29,369
for over 10 years and it was always

00:00:27,029 --> 00:00:31,439
JavaScript inspired developer this talk

00:00:29,369 --> 00:00:33,780
all also about JavaScript

00:00:31,439 --> 00:00:37,110
sometimes typescript what doesn't really

00:00:33,780 --> 00:00:41,489
matter and a few words about gifts so if

00:00:37,110 --> 00:00:43,079
you can say gif on my slide yep just

00:00:41,489 --> 00:00:44,670
forget about the slide that's not an

00:00:43,079 --> 00:00:46,590
interesting is here you can have a rest

00:00:44,670 --> 00:00:51,780
if there is no gift I'm trying to say

00:00:46,590 --> 00:00:55,199
something important I believe what this

00:00:51,780 --> 00:00:57,570
talk is about it's about remote access

00:00:55,199 --> 00:00:59,789
functionality and probably some of you

00:00:57,570 --> 00:01:02,539
should be familiar with this

00:00:59,789 --> 00:01:07,650
did someone use let's say Remote Desktop

00:01:02,539 --> 00:01:10,320
Protocol for Windows yeah okay that the

00:01:07,650 --> 00:01:12,890
same yeah so you can get an access to

00:01:10,320 --> 00:01:16,950
the remote machine do something there

00:01:12,890 --> 00:01:19,110
enjoy why actually people who do this my

00:01:16,950 --> 00:01:20,759
answer is to collaborate if you can do

00:01:19,110 --> 00:01:23,400
something together it's definitely

00:01:20,759 --> 00:01:27,659
possible to do online via screen sharing

00:01:23,400 --> 00:01:30,119
for example could be any options like I

00:01:27,659 --> 00:01:34,680
like the first one yet to teach and to

00:01:30,119 --> 00:01:37,259
learn why not but our case that behavior

00:01:34,680 --> 00:01:39,960
it was to support yeah we wanted to

00:01:37,259 --> 00:01:42,060
deliver support to our clients and need

00:01:39,960 --> 00:01:46,130
to come up with some kind of solution

00:01:42,060 --> 00:01:49,259
which I'm going to talk today about

00:01:46,130 --> 00:01:52,259
nothing exciting because it exists

00:01:49,259 --> 00:01:56,969
everywhere for decades

00:01:52,259 --> 00:01:59,340
yeah ages it exists as I said even on

00:01:56,969 --> 00:02:02,310
the level operating systems and actually

00:01:59,340 --> 00:02:05,180
that's true with some BOTS

00:02:02,310 --> 00:02:08,280
most of the solution have some cons like

00:02:05,180 --> 00:02:11,250
it's granted and access to the entire

00:02:08,280 --> 00:02:13,440
system and sometimes you don't want to

00:02:11,250 --> 00:02:15,270
do this if your clients are banks

00:02:13,440 --> 00:02:18,510
you don't want to have an access to bank

00:02:15,270 --> 00:02:21,810
computer trust me like no you don't want

00:02:18,510 --> 00:02:25,380
to take this risk on your shoulders and

00:02:21,810 --> 00:02:26,940
don't say you don't want to obligate

00:02:25,380 --> 00:02:29,810
your users and yourself to install

00:02:26,940 --> 00:02:32,400
something and all of this sounds like

00:02:29,810 --> 00:02:34,530
web application if you can deliver

00:02:32,400 --> 00:02:36,900
remote access functionality via web

00:02:34,530 --> 00:02:41,100
application it would be great yeah

00:02:36,900 --> 00:02:43,890
because browser very very related

00:02:41,100 --> 00:02:50,400
programs it's insured by Google so we

00:02:43,890 --> 00:02:53,360
can trust it nice try but how yeah what

00:02:50,400 --> 00:02:56,100
what should we do to to implement it

00:02:53,360 --> 00:02:59,580
actually if you can answer for these

00:02:56,100 --> 00:03:00,840
three questions it should be enough the

00:02:59,580 --> 00:03:02,640
first question is how to share the

00:03:00,840 --> 00:03:07,500
screen actually how to get this image

00:03:02,640 --> 00:03:09,630
from the user side and even if you can

00:03:07,500 --> 00:03:12,000
get it how to transfer the flow of

00:03:09,630 --> 00:03:14,640
events to the client side yeah and

00:03:12,000 --> 00:03:17,990
perform it there you want to kiss rocks

00:03:14,640 --> 00:03:21,900
on your machine and see letters

00:03:17,990 --> 00:03:23,220
characters on the clients one and the

00:03:21,900 --> 00:03:25,920
third question it's smaller convinced

00:03:23,220 --> 00:03:29,130
ocation is it possible to run this

00:03:25,920 --> 00:03:30,960
application within any context not

00:03:29,130 --> 00:03:32,520
particularly with your application which

00:03:30,960 --> 00:03:37,170
you are developing right now but with

00:03:32,520 --> 00:03:38,700
any like Gmail let's go

00:03:37,170 --> 00:03:42,150
the first question about screen sharing

00:03:38,700 --> 00:03:44,490
I related three options to libraries and

00:03:42,150 --> 00:03:51,060
one native API which eventually I came

00:03:44,490 --> 00:03:52,820
up with so let me do a quick quick

00:03:51,060 --> 00:03:55,800
overview of all these solutions

00:03:52,820 --> 00:03:58,050
html2canvas it's pretty old library

00:03:55,800 --> 00:04:00,240
works really well the idea behind this

00:03:58,050 --> 00:04:02,270
is great you can grow up a part of your

00:04:00,240 --> 00:04:05,190
dom tree and render it onto the canvas

00:04:02,270 --> 00:04:08,340
if you get a canvas element you can get

00:04:05,190 --> 00:04:10,200
a media stream or for changing on this

00:04:08,340 --> 00:04:12,330
kind of a servant if you can do to me

00:04:10,200 --> 00:04:17,640
loop let's say yes you can grab the

00:04:12,330 --> 00:04:23,190
entire screen yes but it took 27 seconds

00:04:17,640 --> 00:04:24,750
to render a gmail app not for screen

00:04:23,190 --> 00:04:26,910
share indefinitely but it could be an

00:04:24,750 --> 00:04:31,140
option for doing screenshots

00:04:26,910 --> 00:04:36,630
to get Jess and as a library is written

00:04:31,140 --> 00:04:38,460
by Mozilla and actually it does what

00:04:36,630 --> 00:04:40,350
what I want to achieve yeah

00:04:38,460 --> 00:04:42,780
it provides us with the remote access

00:04:40,350 --> 00:04:45,510
functionality but the trick is that you

00:04:42,780 --> 00:04:48,600
have to have absolutely similar Dom

00:04:45,510 --> 00:04:52,830
trees on both sides it doesn't share the

00:04:48,600 --> 00:04:56,930
screen it shares Dom tree not my option

00:04:52,830 --> 00:04:59,040
just because if you are able to build a

00:04:56,930 --> 00:05:01,410
absolutely the same Dom tree it means

00:04:59,040 --> 00:05:03,870
that you have an access to the users

00:05:01,410 --> 00:05:07,370
data let's say to build the Dom tree of

00:05:03,870 --> 00:05:11,250
Gmail app you have to have all messages

00:05:07,370 --> 00:05:15,780
not very secure and the third option is

00:05:11,250 --> 00:05:17,940
a quite modern native API initially

00:05:15,780 --> 00:05:20,760
released by chrome get display media it

00:05:17,940 --> 00:05:25,110
works absolutely the same like get users

00:05:20,760 --> 00:05:30,210
media works does anyone knows know what

00:05:25,110 --> 00:05:34,830
getusermedia API does it grabs your web

00:05:30,210 --> 00:05:37,200
camera stream so you can put the stream

00:05:34,830 --> 00:05:39,180
the video stream from the web camera to

00:05:37,200 --> 00:05:43,470
the canvas element or to somewhere else

00:05:39,180 --> 00:05:45,420
same stuff but for sharing screen and it

00:05:43,470 --> 00:05:48,480
works without any plugins it used to

00:05:45,420 --> 00:05:51,450
work we is a special Chrome extension

00:05:48,480 --> 00:05:54,060
now you don't need it at all

00:05:51,450 --> 00:05:56,940
works for three major browsers for edge

00:05:54,060 --> 00:05:59,100
for sure because it's not longer it's

00:05:56,940 --> 00:06:01,920
not longer an internet explorer and

00:05:59,100 --> 00:06:05,070
unfortunately it doesn't work for Safari

00:06:01,920 --> 00:06:07,080
but yeah it is what it is it's it's

00:06:05,070 --> 00:06:10,650
nothing to do here but for Chrome it

00:06:07,080 --> 00:06:13,680
works perfectly for on Windows Ubuntu

00:06:10,650 --> 00:06:18,900
and Mac OS everywhere I will show you

00:06:13,680 --> 00:06:21,240
later how but grabbing this dream from

00:06:18,900 --> 00:06:23,580
the user screen is not enough we have to

00:06:21,240 --> 00:06:27,210
transfer the stream to the host site

00:06:23,580 --> 00:06:30,810
when we're talking about transfer images

00:06:27,210 --> 00:06:33,570
of media streams it makes sense at least

00:06:30,810 --> 00:06:37,490
for me to talk about WebRTC another

00:06:33,570 --> 00:06:41,100
native API and now I really want to ask

00:06:37,490 --> 00:06:44,050
who is familiar with Weber to see here

00:06:41,100 --> 00:06:47,889
did you try did you do use it in

00:06:44,050 --> 00:06:52,840
production great so I am in the right

00:06:47,889 --> 00:06:56,380
place it's a it's a native API which

00:06:52,840 --> 00:06:59,520
allows two browsers establish a direct

00:06:56,380 --> 00:07:02,020
connection over UDP or TCP

00:06:59,520 --> 00:07:04,510
with this connection you can transfer

00:07:02,020 --> 00:07:07,840
any kind of data usually to works for

00:07:04,510 --> 00:07:10,450
audio or video streams but also you can

00:07:07,840 --> 00:07:13,120
pass any kind of serialize data like I

00:07:10,450 --> 00:07:16,030
don't know JSON object make streets my

00:07:13,120 --> 00:07:18,520
make string and pass we has this

00:07:16,030 --> 00:07:20,710
connection again it's a direct

00:07:18,520 --> 00:07:25,360
connection PTP so you don't need any

00:07:20,710 --> 00:07:29,560
servers between you two Hills which is

00:07:25,360 --> 00:07:33,040
great in terms of costs no servile no

00:07:29,560 --> 00:07:35,400
payment for the server but it's

00:07:33,040 --> 00:07:39,729
impossible to establish this connection

00:07:35,400 --> 00:07:42,100
directly so if you think about to Chrome

00:07:39,729 --> 00:07:44,530
browsers somewhere in the Internet and

00:07:42,100 --> 00:07:48,000
you ask them to establish this

00:07:44,530 --> 00:07:51,550
connection it's impossible in terms of

00:07:48,000 --> 00:07:53,620
modern network architecture so at least

00:07:51,550 --> 00:07:56,140
these two browsers those two browsers

00:07:53,620 --> 00:07:56,650
need to know an AP addresses of each

00:07:56,140 --> 00:07:59,200
other

00:07:56,650 --> 00:08:03,030
yeah and exchange this information

00:07:59,200 --> 00:08:05,050
somehow for this exchange and purpose

00:08:03,030 --> 00:08:06,700
unfortunately unfortunately you need to

00:08:05,050 --> 00:08:10,690
implement a server so-called signaling

00:08:06,700 --> 00:08:14,070
server sounds a little bit scary but

00:08:10,690 --> 00:08:18,039
it's super start forward in turn from

00:08:14,070 --> 00:08:21,570
client-side code in perspective we have

00:08:18,039 --> 00:08:24,669
a list of APIs which returns an object

00:08:21,570 --> 00:08:28,330
so-called offers or I see a candidate

00:08:24,669 --> 00:08:30,250
it's just a string and you have to

00:08:28,330 --> 00:08:32,909
implement a server which make possible

00:08:30,250 --> 00:08:36,070
to exchange messages of those two

00:08:32,909 --> 00:08:38,169
between those two browsers when the

00:08:36,070 --> 00:08:38,830
exchange in process is done server oh

00:08:38,169 --> 00:08:42,490
sorry

00:08:38,830 --> 00:08:44,890
browser automatically establish will

00:08:42,490 --> 00:08:47,890
establish a connection that's exactly

00:08:44,890 --> 00:08:49,750
what we need and I've been asked by Adam

00:08:47,890 --> 00:08:52,240
to prepare some kind of server side

00:08:49,750 --> 00:08:54,450
stuff because it's no js' meet up after

00:08:52,240 --> 00:08:57,240
all and they decided okay

00:08:54,450 --> 00:09:02,370
I can do this signaling I started free

00:08:57,240 --> 00:09:04,170
the code J's framework do accordion make

00:09:02,370 --> 00:09:07,410
sure that it works locally and true

00:09:04,170 --> 00:09:11,880
allies that I spent so much in so much

00:09:07,410 --> 00:09:13,890
time and I still it's still not deployed

00:09:11,880 --> 00:09:16,290
I have to maintain his hair to monitor

00:09:13,890 --> 00:09:19,830
somehow should be done easier in 2019

00:09:16,290 --> 00:09:22,410
and it's possible to die nice easy I

00:09:19,830 --> 00:09:25,070
really want to share with you that if

00:09:22,410 --> 00:09:28,080
you need a dead simple messaging server

00:09:25,070 --> 00:09:30,870
it's not longer about creating a project

00:09:28,080 --> 00:09:34,620
it's about creating just of 303

00:09:30,870 --> 00:09:38,460
functions AWS lamda works perfectly you

00:09:34,620 --> 00:09:40,230
can set up your API gateway to run your

00:09:38,460 --> 00:09:43,620
functions each time with a message has

00:09:40,230 --> 00:09:47,070
come to this WebSocket connection which

00:09:43,620 --> 00:09:49,110
actually I did from each of these caro

00:09:47,070 --> 00:09:51,660
function you have an access to database

00:09:49,110 --> 00:09:55,710
so you can store you can persist your

00:09:51,660 --> 00:09:58,530
state each connection each message come

00:09:55,710 --> 00:10:00,320
with a connection ID you can store this

00:09:58,530 --> 00:10:02,610
connection ID for the future and

00:10:00,320 --> 00:10:05,070
eventually when the second action from

00:10:02,610 --> 00:10:08,220
the cell the same user has come you

00:10:05,070 --> 00:10:10,050
understand who is the author of this

00:10:08,220 --> 00:10:12,420
message and what actually we want to do

00:10:10,050 --> 00:10:15,090
let's say we want to grab a message from

00:10:12,420 --> 00:10:19,230
one user by his name

00:10:15,090 --> 00:10:21,450
yeah and pass it to another it's really

00:10:19,230 --> 00:10:24,720
simple don't want to spend too much too

00:10:21,450 --> 00:10:27,770
much time through the link there you can

00:10:24,720 --> 00:10:29,190
just have a look works incredibly

00:10:27,770 --> 00:10:33,750
straightforward

00:10:29,190 --> 00:10:36,840
I do recommend for everyone try and the

00:10:33,750 --> 00:10:38,730
search function needs to clean up your

00:10:36,840 --> 00:10:40,860
database when the user is disconnected

00:10:38,730 --> 00:10:44,550
but I even didn't put it on the slide

00:10:40,860 --> 00:10:47,160
it's nothing interesting here cool so if

00:10:44,550 --> 00:10:51,090
we can put all together aw s lambda

00:10:47,160 --> 00:10:55,950
driven signaling server verbal to see a

00:10:51,090 --> 00:10:58,110
client side walk and our get users get

00:10:55,950 --> 00:11:01,410
so we get display me at the API we can

00:10:58,110 --> 00:11:05,670
get some kind of application which

00:11:01,410 --> 00:11:07,420
actually shares the user screen let me

00:11:05,670 --> 00:11:11,860
open two tabs

00:11:07,420 --> 00:11:16,420
cool yeah I also grab the users media

00:11:11,860 --> 00:11:20,080
just just to make sure that it works on

00:11:16,420 --> 00:11:22,090
both sides and I can be registered it

00:11:20,080 --> 00:11:24,490
means that I going to establish a

00:11:22,090 --> 00:11:29,620
WebSocket connection be registered as

00:11:24,490 --> 00:11:36,580
host let's say here as a client on the

00:11:29,620 --> 00:11:38,470
second tab and make a call from yeah I'm

00:11:36,580 --> 00:11:43,600
registered this client make a call from

00:11:38,470 --> 00:11:47,310
client site to the host one that's what

00:11:43,600 --> 00:11:50,410
I was talking about a standard screen a

00:11:47,310 --> 00:11:51,700
dialog asked me to share what part of my

00:11:50,410 --> 00:11:59,850
screen I want to share I want to say

00:11:51,700 --> 00:11:59,850
just one chrome tab yeah it works so

00:12:00,060 --> 00:12:05,170
exactly yeah if you share your own

00:12:03,130 --> 00:12:09,610
screen that's what you're supposed to

00:12:05,170 --> 00:12:11,530
see yeah it's really good that I can

00:12:09,610 --> 00:12:13,990
have a look at the different type of my

00:12:11,530 --> 00:12:18,250
browser might be useful but I cannot

00:12:13,990 --> 00:12:20,320
control it like at all yeah so we should

00:12:18,250 --> 00:12:23,800
to answer the second question I think

00:12:20,320 --> 00:12:26,680
how to perform an event I really want to

00:12:23,800 --> 00:12:31,120
do something on this side and to see the

00:12:26,680 --> 00:12:32,740
result on that side I try to find an

00:12:31,120 --> 00:12:37,030
answer and I was struggling to do that

00:12:32,740 --> 00:12:41,580
so I came up with my own solution I was

00:12:37,030 --> 00:12:45,010
thinking like actually what browsers is

00:12:41,580 --> 00:12:46,990
what a browser is doing when something

00:12:45,010 --> 00:12:49,270
from user site is happening here with

00:12:46,990 --> 00:12:51,520
some event is happening and actually

00:12:49,270 --> 00:12:54,220
it's wrong the three things the first of

00:12:51,520 --> 00:12:57,190
all browser always knows which element

00:12:54,220 --> 00:12:59,050
is being operated right now internally

00:12:57,190 --> 00:13:00,820
yeah you click on something and browser

00:12:59,050 --> 00:13:03,460
definitely know what is this something

00:13:00,820 --> 00:13:11,680
so if you can locate an element would be

00:13:03,460 --> 00:13:13,630
great for sure browser dispatch an event

00:13:11,680 --> 00:13:18,220
JavaScript event all of us know what is

00:13:13,630 --> 00:13:20,760
this and after the event goes through

00:13:18,220 --> 00:13:24,240
the bubbling and hoisting yeah

00:13:20,760 --> 00:13:26,460
a standard action could happen if you

00:13:24,240 --> 00:13:28,760
can reproduce these three steps probably

00:13:26,460 --> 00:13:31,800
that's what we need and actually we can

00:13:28,760 --> 00:13:33,870
we can grab an element by a pair of

00:13:31,800 --> 00:13:35,580
coordinates if we send from one side to

00:13:33,870 --> 00:13:40,650
NASA's this pair of conjugate as a type

00:13:35,580 --> 00:13:45,210
of event it could be performed on the on

00:13:40,650 --> 00:13:49,830
the client-side the small trick is how

00:13:45,210 --> 00:13:51,870
to reproduce a standard action yeah you

00:13:49,830 --> 00:13:55,260
have to understand if you clicking on

00:13:51,870 --> 00:13:57,660
some element let's say on the button you

00:13:55,260 --> 00:13:59,850
have to focus this button if you're

00:13:57,660 --> 00:14:02,910
clicking on checkbox you have to mark

00:13:59,850 --> 00:14:06,480
this checkbox yeah and that's actually

00:14:02,910 --> 00:14:09,000
what my library does yeah I created a

00:14:06,480 --> 00:14:10,770
bunch of so-called actions it's not real

00:14:09,000 --> 00:14:13,560
events because it's an action it's an

00:14:10,770 --> 00:14:16,320
information about events its action

00:14:13,560 --> 00:14:19,400
knows how to be handled on the whole

00:14:16,320 --> 00:14:23,250
site how to perform all the client-side

00:14:19,400 --> 00:14:25,200
actions serializable stuff so you can

00:14:23,250 --> 00:14:28,080
say realize it actually preoccupy J's

00:14:25,200 --> 00:14:32,760
can serialize it and pass from the host

00:14:28,080 --> 00:14:35,280
to the client that's it I created a

00:14:32,760 --> 00:14:37,230
bunch of slides where I am talking how

00:14:35,280 --> 00:14:42,750
to install it but actually you can see

00:14:37,230 --> 00:14:45,690
dogs on github on NPM the tork play with

00:14:42,750 --> 00:14:47,640
a gem application more or less it works

00:14:45,690 --> 00:14:49,980
I would be really appreciated if someone

00:14:47,640 --> 00:14:53,280
come and goes through the code maybe do

00:14:49,980 --> 00:14:57,060
some improvements it's totally open

00:14:53,280 --> 00:14:59,130
sourced and actually that the answer for

00:14:57,060 --> 00:15:02,220
the second question yeah now we can

00:14:59,130 --> 00:15:06,060
share the screen and we can do events

00:15:02,220 --> 00:15:09,300
remotely basically we are cheating our

00:15:06,060 --> 00:15:12,060
browser because he doesn't know who is

00:15:09,300 --> 00:15:14,310
doing right now actually he does but in

00:15:12,060 --> 00:15:16,410
terms of single page applications it

00:15:14,310 --> 00:15:19,620
doesn't really matter who is operate and

00:15:16,410 --> 00:15:23,010
owns application on the top and this

00:15:19,620 --> 00:15:25,050
short one most interesting question is

00:15:23,010 --> 00:15:28,380
as possible to use it not only to

00:15:25,050 --> 00:15:30,600
control screens like this yeah is it

00:15:28,380 --> 00:15:32,430
possible to use it somewhere where it

00:15:30,600 --> 00:15:34,080
might be useful if you are struggling

00:15:32,430 --> 00:15:37,200
with some application why

00:15:34,080 --> 00:15:39,149
Spotify why not you can switch the track

00:15:37,200 --> 00:15:42,300
you can ask your friend can you do it

00:15:39,149 --> 00:15:46,890
for me or you're coding on jsfiddle and

00:15:42,300 --> 00:15:50,850
ask someone to help you and actually yes

00:15:46,890 --> 00:15:54,390
that's possible it is possible do you

00:15:50,850 --> 00:15:56,430
know what bookmarklets is did you try

00:15:54,390 --> 00:15:59,370
probably yeah it's another one old stuff

00:15:56,430 --> 00:16:02,820
it's been it was named by Brendan Eich

00:15:59,370 --> 00:16:05,430
it's a really old stuff but it works

00:16:02,820 --> 00:16:08,690
it still works trust me or not but if

00:16:05,430 --> 00:16:11,520
you wrap your quote in JavaScript colum

00:16:08,690 --> 00:16:14,670
makes this you the protocols scheme

00:16:11,520 --> 00:16:18,480
actually and store this part of the code

00:16:14,670 --> 00:16:20,640
in the bookmark bar of your browser you

00:16:18,480 --> 00:16:23,130
can execute it within any context within

00:16:20,640 --> 00:16:26,520
any page which is loaded right now in

00:16:23,130 --> 00:16:31,500
your browser in terms of practice it

00:16:26,520 --> 00:16:33,920
works great with the help of bookmarklet

00:16:31,500 --> 00:16:36,390
loads or for web pack basically you can

00:16:33,920 --> 00:16:37,980
compile into the application the

00:16:36,390 --> 00:16:41,670
client-side application to the source

00:16:37,980 --> 00:16:46,020
code wrappers with JavaScript : and put

00:16:41,670 --> 00:16:48,810
on the href attribute of a deck of a

00:16:46,020 --> 00:16:51,660
link tag after that you just ask you

00:16:48,810 --> 00:16:57,209
just have to ask your user to drag it

00:16:51,660 --> 00:17:03,199
into the bookmarks bar let's do it all

00:16:57,209 --> 00:17:06,510
together yeah exactly I keep running

00:17:03,199 --> 00:17:09,209
this part it's going to be my host part

00:17:06,510 --> 00:17:14,939
and I'm going to open something more

00:17:09,209 --> 00:17:17,400
useful surprisingly it is Gmail let me

00:17:14,939 --> 00:17:21,870
check now it works it should not be

00:17:17,400 --> 00:17:29,550
there it's my work yeah that's my

00:17:21,870 --> 00:17:35,730
private message box no secret cool there

00:17:29,550 --> 00:17:38,780
is a link that I have to drag to the Z

00:17:35,730 --> 00:17:42,260
bar yeah and now when I hit this link

00:17:38,780 --> 00:17:46,220
the same application is running here and

00:17:42,260 --> 00:17:47,850
now equation a security question

00:17:46,220 --> 00:17:49,830
WebSocket what

00:17:47,850 --> 00:17:52,680
in a nutshell is the WebSocket

00:17:49,830 --> 00:17:56,460
connection is it an HTTP connection or

00:17:52,680 --> 00:18:02,360
not who's who does think that it's an

00:17:56,460 --> 00:18:02,360
HTTP connection no what is it

00:18:02,480 --> 00:18:07,920
it's a WebSocket connection yeah but it

00:18:04,950 --> 00:18:11,850
came from HTTP connection and in my mind

00:18:07,920 --> 00:18:17,360
it should obey course C or RS promo

00:18:11,850 --> 00:18:20,370
policies and surprisingly it doesn't

00:18:17,360 --> 00:18:22,230
yeah it actually means that you can

00:18:20,370 --> 00:18:24,420
establish a WebSocket connection to the

00:18:22,230 --> 00:18:32,120
third party or to the third party domain

00:18:24,420 --> 00:18:35,630
from this content I'm a client oh yeah

00:18:32,120 --> 00:18:35,630
it still works

00:18:36,440 --> 00:18:42,300
cool I'm registered in my WebSocket

00:18:40,020 --> 00:18:50,480
channel as a client from this

00:18:42,300 --> 00:18:50,480
application and I can be registered here

00:18:50,960 --> 00:18:57,380
let's make a call first

00:18:58,040 --> 00:19:11,850
this part of my screen yeah and now I

00:19:08,700 --> 00:19:15,060
have to meet my preoccupy J's it could

00:19:11,850 --> 00:19:18,210
be done automatically but for proof of

00:19:15,060 --> 00:19:20,550
concept I just put the button in each

00:19:18,210 --> 00:19:23,190
client there is a second cursor over

00:19:20,550 --> 00:19:28,740
there I can show you just in a second

00:19:23,190 --> 00:19:36,240
how troops you need host cool I can

00:19:28,740 --> 00:19:40,140
control my gmail app oh okay let's do

00:19:36,240 --> 00:19:44,310
some strokes like what usually people

00:19:40,140 --> 00:19:50,720
search in the Gmail app like passwords

00:19:44,310 --> 00:19:55,230
here oops

00:19:50,720 --> 00:20:03,000
no it is what it is yeah it's still

00:19:55,230 --> 00:20:04,830
proof of concept but it works yeah I

00:20:03,000 --> 00:20:07,440
just want to emphasize that we don't use

00:20:04,830 --> 00:20:09,510
it in this way through book market for

00:20:07,440 --> 00:20:12,470
sure you can put this piece of code just

00:20:09,510 --> 00:20:14,760
in your application if you have a gmail

00:20:12,470 --> 00:20:16,980
developer you can grab it from the

00:20:14,760 --> 00:20:20,810
github and put in there I mean in a

00:20:16,980 --> 00:20:23,760
legal way but it also works through the

00:20:20,810 --> 00:20:26,250
bookmarklet if you are wondering how to

00:20:23,760 --> 00:20:28,470
prevent establishing of this connection

00:20:26,250 --> 00:20:32,100
the answer is CSP there's only one way

00:20:28,470 --> 00:20:34,590
to prevent third party web socket

00:20:32,100 --> 00:20:37,320
connection is a proper CSP settings so

00:20:34,590 --> 00:20:44,490
please do if you doing something for

00:20:37,320 --> 00:20:46,580
public cool the last furnaces slide any

00:20:44,490 --> 00:20:54,210
questions thank you very much

00:20:46,580 --> 00:20:54,210

YouTube URL: https://www.youtube.com/watch?v=JnW02LgtzCw


