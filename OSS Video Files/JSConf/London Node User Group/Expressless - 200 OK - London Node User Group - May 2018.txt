Title: Expressless - 200 OK - London Node User Group - May 2018
Publication date: 2018-06-04
Playlist: London Node User Group
Description: 
	ExpressLess - 200 OK - Eran Keren

Heard about Serverless? Already know Express.js? Too afraid to use the two?

My talk will cover the following:

Where are my servers? (Moving from the classic setup to a serverless one)

Express.js + Serverless?

How can I test my serverless app? (Offline testing)

Where are my logs?

Wait, are my apis public? (Securing your endpoints)

Shhhhh....(Keeping secrets)

_

About me:

I started my career over a decade ago writing code for firewalls and security systems (c/c++/java). In recent years I've been specialising in cloud engineering, microservices, aws and serverless (mostly in node.js).

Now: I'm the CTO of a young and still in stealth mode startup - sourcingbot.com- plus the usual community announcements, pizza, drinks and ongoing buzz about JavaScript and node

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:05,660
everyone thanks for showing up for this

00:00:01,820 --> 00:00:08,760
Meetup for this talk about Express and

00:00:05,660 --> 00:00:11,820
several eyes and how we can mix the two

00:00:08,760 --> 00:00:14,580
together just so I can kind of get the

00:00:11,820 --> 00:00:19,650
vibe I know it's in node meetup but

00:00:14,580 --> 00:00:21,330
anyone using here Express okay that's an

00:00:19,650 --> 00:00:24,840
obvious one anyone heard about server

00:00:21,330 --> 00:00:27,810
list okay pretty good anyone using

00:00:24,840 --> 00:00:37,200
several is in production okay bit less

00:00:27,810 --> 00:00:39,629
okay cool so so on the agenda today I'm

00:00:37,200 --> 00:00:42,270
gonna see what is what is lambda what is

00:00:39,629 --> 00:00:45,719
server less obviously where my servers

00:00:42,270 --> 00:00:48,960
because it's server less how we can mix

00:00:45,719 --> 00:00:51,030
between Express and server less I'm

00:00:48,960 --> 00:00:53,910
gonna touch slightly about offline

00:00:51,030 --> 00:00:55,379
offline testing and see where are my

00:00:53,910 --> 00:00:58,100
logs because again we don't have any

00:00:55,379 --> 00:01:01,320
server so where do we put the logs and

00:00:58,100 --> 00:01:05,329
in a brief about securing your endpoint

00:01:01,320 --> 00:01:05,329
and how to keep secrets

00:01:05,720 --> 00:01:14,549
so before I before I started writing the

00:01:09,750 --> 00:01:16,229
presentation I decided to check okay

00:01:14,549 --> 00:01:20,909
what is the server strength I mean how

00:01:16,229 --> 00:01:23,310
20 it is and what do you do when you

00:01:20,909 --> 00:01:28,049
don't know you ask Google so if you can

00:01:23,310 --> 00:01:30,600
see the trend so right about 2016 you

00:01:28,049 --> 00:01:35,100
can see the server strength is like

00:01:30,600 --> 00:01:37,920
spiking anyone care to guess what is the

00:01:35,100 --> 00:01:41,899
main location that server is is being

00:01:37,920 --> 00:01:47,420
used or at least people searching for

00:01:41,899 --> 00:01:49,920
anyone ok close it's gonna be a shocker

00:01:47,420 --> 00:01:53,189
but it's actually Seattle where they had

00:01:49,920 --> 00:01:53,579
AWS headquarters are so that's not a big

00:01:53,189 --> 00:01:58,619
surprise

00:01:53,579 --> 00:02:00,060
um yeah so let's talk with what is what

00:01:58,619 --> 00:02:03,329
is lambda what is what is server this

00:02:00,060 --> 00:02:09,330
basically can anyone hear me

00:02:03,329 --> 00:02:11,459
Amy okay yeah good okay so from the AWS

00:02:09,330 --> 00:02:12,920
product page so they set up a table is

00:02:11,459 --> 00:02:14,870
lambda is a

00:02:12,920 --> 00:02:16,510
Severus compute service that runs your

00:02:14,870 --> 00:02:18,200
code in response to event and

00:02:16,510 --> 00:02:21,410
automatically manage the underlying

00:02:18,200 --> 00:02:23,959
compute resources for you to put into

00:02:21,410 --> 00:02:26,360
simple phrase it basically means that

00:02:23,959 --> 00:02:29,630
there are no service to provision or

00:02:26,360 --> 00:02:32,630
manage so AWS does everything for you

00:02:29,630 --> 00:02:34,700
you don't have SSH access you don't have

00:02:32,630 --> 00:02:36,740
anything you don't I mean they provide

00:02:34,700 --> 00:02:39,050
the infrastructure so it's not actually

00:02:36,740 --> 00:02:45,020
service but it's not your server so it's

00:02:39,050 --> 00:02:47,870
kind of mixed between and service and

00:02:45,020 --> 00:02:49,360
idea well as lambda is built to scale so

00:02:47,870 --> 00:02:51,739
it means we don't need to worry about

00:02:49,360 --> 00:02:53,390
all right what is the class of size that

00:02:51,739 --> 00:02:55,970
we need do we need one instance do we

00:02:53,390 --> 00:02:58,459
need two when we scale up when we reach

00:02:55,970 --> 00:03:00,890
to 70% CPU when you reach to I don't

00:02:58,459 --> 00:03:02,780
know 80% memory consumption we don't

00:03:00,890 --> 00:03:05,900
care about all this stuff I mean a table

00:03:02,780 --> 00:03:11,690
just one is for us and the function just

00:03:05,900 --> 00:03:13,760
acts it once it ends and another kind of

00:03:11,690 --> 00:03:17,360
good thing about it is you never pay for

00:03:13,760 --> 00:03:19,280
other functions which means you pay if

00:03:17,360 --> 00:03:21,950
you go to you like the ec2 pricing page

00:03:19,280 --> 00:03:24,590
you can see that you pay by the hour for

00:03:21,950 --> 00:03:26,299
lambda you pay for what you use so it

00:03:24,590 --> 00:03:28,239
means if you have a website and nobody

00:03:26,299 --> 00:03:31,549
is going to your website or hitting your

00:03:28,239 --> 00:03:35,560
API is during the night you pay nothing

00:03:31,549 --> 00:03:35,560
so that's that's pretty cool

00:03:36,610 --> 00:03:41,630
obviously when when know things are kind

00:03:39,560 --> 00:03:45,590
of starting to catch up you can see a

00:03:41,630 --> 00:03:48,049
lot of frameworks for server lists the

00:03:45,590 --> 00:03:50,810
quite a bunch some of Jeff's for Python

00:03:48,049 --> 00:03:53,030
semaphore nodejs some are mixed and the

00:03:50,810 --> 00:03:55,239
one that we're gonna focus on is server

00:03:53,030 --> 00:03:55,239
less

00:03:58,040 --> 00:04:05,010
so this the several s start with a basic

00:04:01,350 --> 00:04:07,170
Yama file which define the main three

00:04:05,010 --> 00:04:09,420
parts one is your service name

00:04:07,170 --> 00:04:13,200
so that's any name that you want to call

00:04:09,420 --> 00:04:16,500
your service it can be an API it can be

00:04:13,200 --> 00:04:19,730
it can be anything basically and then

00:04:16,500 --> 00:04:22,320
you need to sorry and then you need to

00:04:19,730 --> 00:04:24,990
set up the provider so in this case

00:04:22,320 --> 00:04:26,610
we're talking about AWS and you need to

00:04:24,990 --> 00:04:28,410
set the region so in this case we're

00:04:26,610 --> 00:04:33,630
talking about London and we're going to

00:04:28,410 --> 00:04:35,040
use no GS 8.1 the next part is where you

00:04:33,630 --> 00:04:38,190
define kind of the handlers or the

00:04:35,040 --> 00:04:40,440
functions so you can see we have like

00:04:38,190 --> 00:04:42,000
two functions one of them they're quite

00:04:40,440 --> 00:04:43,890
quite simple there's nothing kind of

00:04:42,000 --> 00:04:46,140
complicated about them

00:04:43,890 --> 00:04:50,430
when you find two handlers and we define

00:04:46,140 --> 00:04:53,130
D I wish I had a pointer but we define

00:04:50,430 --> 00:04:57,320
the path in what everything goes to v1

00:04:53,130 --> 00:04:59,700
hello and want to go to v v1 goodbye

00:04:57,320 --> 00:05:03,060
that's kind of pretty straightforward

00:04:59,700 --> 00:05:06,660
and if we look at the I hope if I can

00:05:03,060 --> 00:05:08,790
see the code it's big tiny but I mean

00:05:06,660 --> 00:05:12,050
the the several function itself the the

00:05:08,790 --> 00:05:17,910
lambda function is is a pretty basic

00:05:12,050 --> 00:05:19,830
node.js code so we get the input in the

00:05:17,910 --> 00:05:24,180
event or the contacts contact is like a

00:05:19,830 --> 00:05:26,760
map of key values and we return a

00:05:24,180 --> 00:05:30,510
response that's pretty much it I mean

00:05:26,760 --> 00:05:32,960
you return a JSON response and AWS does

00:05:30,510 --> 00:05:32,960
it for you

00:05:35,460 --> 00:05:41,490
you can see we can also take we can take

00:05:40,020 --> 00:05:44,250
things from Dave and clog the query

00:05:41,490 --> 00:05:45,180
string parameters and also append them

00:05:44,250 --> 00:05:49,919
to the J's I'm gonna do whatever

00:05:45,180 --> 00:05:54,300
business logic we want to do okay I'm

00:05:49,919 --> 00:05:57,139
going to show you very quick demo

00:05:54,300 --> 00:06:05,490
hopefully I'm connected to the Wi-Fi

00:05:57,139 --> 00:06:09,120
yeah okay so I have my several sem file

00:06:05,490 --> 00:06:13,590
and now I need to what's how do you make

00:06:09,120 --> 00:06:17,610
it bigger here yeah no not in this code

00:06:13,590 --> 00:06:19,620
I don't know all right so basically it's

00:06:17,610 --> 00:06:22,590
the same it's the same Yama file I

00:06:19,620 --> 00:06:24,240
showed you in the slides so what I'm

00:06:22,590 --> 00:06:31,500
going to do I'm going to do a quick

00:06:24,240 --> 00:06:34,979
deployment so SLS is a shortcut for

00:06:31,500 --> 00:06:36,449
several s and we're going to deploy the

00:06:34,979 --> 00:06:38,580
two functions that we saw on the slides

00:06:36,449 --> 00:06:41,130
and we're gonna - I'm choosing the like

00:06:38,580 --> 00:06:42,750
a test profile for for a SS because you

00:06:41,130 --> 00:06:47,520
can define multiple profile on your

00:06:42,750 --> 00:06:49,470
credentials file so that's gonna take

00:06:47,520 --> 00:06:52,410
some time you can see that the server is

00:06:49,470 --> 00:06:54,630
starting to package your service it's

00:06:52,410 --> 00:06:56,160
uploading servers behind the scene is

00:06:54,630 --> 00:07:00,750
the cloud formation which means they

00:06:56,160 --> 00:07:04,169
kind of handle the whole pipeline you

00:07:00,750 --> 00:07:07,639
could gonna see you soon it's gonna take

00:07:04,169 --> 00:07:07,639
a few seconds and hopefully

00:07:13,189 --> 00:07:27,149
hopefully okay that's great and you see

00:07:20,159 --> 00:07:29,629
that we got two end points here and if

00:07:27,149 --> 00:07:29,629
you just

00:07:35,629 --> 00:07:45,919
if you're just gonna hit them okay

00:07:43,999 --> 00:07:48,229
that's pretty pretty basic there was

00:07:45,919 --> 00:07:50,330
nothing kind of but you can see how easy

00:07:48,229 --> 00:07:52,909
it is to deploy something and straight

00:07:50,330 --> 00:07:54,919
away you get SSL termination you get

00:07:52,909 --> 00:07:57,409
everything that you want and there isn't

00:07:54,919 --> 00:08:03,939
a single server running at least not my

00:07:57,409 --> 00:08:03,939
server because we deploy two endpoints

00:08:03,999 --> 00:08:09,169
so the second one is basically the same

00:08:06,830 --> 00:08:12,680
but you can see that here it's coming

00:08:09,169 --> 00:08:17,509
from hundred to and this one is coming

00:08:12,680 --> 00:08:19,610
from hundred one so doc quick demo to

00:08:17,509 --> 00:08:20,379
show you the how is it is to deploy

00:08:19,610 --> 00:08:27,620
stuff

00:08:20,379 --> 00:08:29,779
all right back to oh yeah just in case

00:08:27,620 --> 00:08:32,899
the devil wasn't working so I could put

00:08:29,779 --> 00:08:35,449
a few slides yeah that's pretty much

00:08:32,899 --> 00:08:39,219
what I what I explained our end point

00:08:35,449 --> 00:08:46,730
several is magic and how do i deploy and

00:08:39,219 --> 00:08:49,220
the same okay so I mean the question is

00:08:46,730 --> 00:08:50,389
all right so people get used to you know

00:08:49,220 --> 00:08:52,160
you deploy something and you have a

00:08:50,389 --> 00:08:54,649
society to a server and you can see it

00:08:52,160 --> 00:08:56,360
but that's the problem with with with

00:08:54,649 --> 00:08:59,839
server list or lambda because you don't

00:08:56,360 --> 00:09:02,870
have any servers and if we look kind of

00:08:59,839 --> 00:09:05,180
the kind of where we got to

00:09:02,870 --> 00:09:08,990
so before server less basic easy to set

00:09:05,180 --> 00:09:11,660
up would look some something like that

00:09:08,990 --> 00:09:13,639
it's very simplified I know but you have

00:09:11,660 --> 00:09:16,880
your user which can be a mobile app it

00:09:13,639 --> 00:09:18,670
can be a website it's we it's hitting

00:09:16,880 --> 00:09:21,740
one of your endpoint and it goes into

00:09:18,670 --> 00:09:24,050
alb which is the elastic load balancer

00:09:21,740 --> 00:09:29,089
that AWS provide you're probably gonna

00:09:24,050 --> 00:09:30,980
have to availability zones and each each

00:09:29,089 --> 00:09:32,870
availability zone you define an auto

00:09:30,980 --> 00:09:35,420
scaling group which is basically means a

00:09:32,870 --> 00:09:37,550
cluster of ec2 instances and then you

00:09:35,420 --> 00:09:39,860
need to define things like when do we

00:09:37,550 --> 00:09:43,490
scale when do we want to scale down we

00:09:39,860 --> 00:09:45,480
want to scale up those kind of so it's

00:09:43,490 --> 00:09:46,860
very kind of DevOps

00:09:45,480 --> 00:09:49,290
later than you need someone to maintain

00:09:46,860 --> 00:09:51,389
it and you need someone to make sure

00:09:49,290 --> 00:09:54,510
that you know how to scale up and down

00:09:51,389 --> 00:09:57,089
and everything works together after that

00:09:54,510 --> 00:09:59,850
we started kind of instead of ec2 so we

00:09:57,089 --> 00:10:02,820
started to we see a trend to going into

00:09:59,850 --> 00:10:06,449
containers things like kubernetes docker

00:10:02,820 --> 00:10:07,829
swarm Nomad but behind the scenes it's

00:10:06,449 --> 00:10:09,899
the same thing you having a lot and a

00:10:07,829 --> 00:10:12,510
load balancer and you need to say

00:10:09,899 --> 00:10:15,959
alright I need to play with my cluster

00:10:12,510 --> 00:10:19,290
and see how many instances I need so

00:10:15,959 --> 00:10:22,589
it's still very kind of DevOps oriented

00:10:19,290 --> 00:10:24,779
and with serverless

00:10:22,589 --> 00:10:27,149
this is all we have I mean we have an

00:10:24,779 --> 00:10:29,579
API gateway which is a service that

00:10:27,149 --> 00:10:33,000
AWS provides and you have a lambda

00:10:29,579 --> 00:10:35,430
function that's pretty much pretty much

00:10:33,000 --> 00:10:37,190
it I don't care about the cluster size I

00:10:35,430 --> 00:10:44,610
don't care about how many servers

00:10:37,190 --> 00:10:47,550
playing sample and if we look at the AWS

00:10:44,610 --> 00:10:51,870
console so after we deployed you can see

00:10:47,550 --> 00:10:55,319
one function being deployed runtime you

00:10:51,870 --> 00:10:59,160
can see the same runtime and you can see

00:10:55,319 --> 00:11:01,160
also that our function is connected or

00:10:59,160 --> 00:11:04,740
lambda function is connected to two

00:11:01,160 --> 00:11:08,490
services that the server let's kind of

00:11:04,740 --> 00:11:09,930
do it for us the whole plugins for one

00:11:08,490 --> 00:11:13,500
of them is API gate which we talked

00:11:09,930 --> 00:11:14,730
about is your HTTP server and the second

00:11:13,500 --> 00:11:17,579
one is we're gonna see in a few slides

00:11:14,730 --> 00:11:23,670
are the cloud watch logs which all your

00:11:17,579 --> 00:11:25,860
logs go into this service and this is

00:11:23,670 --> 00:11:28,260
also from the AWS console that's the

00:11:25,860 --> 00:11:34,980
same code that we saw basically just a

00:11:28,260 --> 00:11:38,959
zip file and just upload it there okay

00:11:34,980 --> 00:11:42,899
so now we're getting to how we can

00:11:38,959 --> 00:11:46,139
integrate Express with server lists so

00:11:42,899 --> 00:11:48,949
the question is how do we move for

00:11:46,139 --> 00:11:55,079
something which is kind of lambda style

00:11:48,949 --> 00:11:59,340
code into something which is more kind

00:11:55,079 --> 00:12:02,850
of API Express style and

00:11:59,340 --> 00:12:07,050
anyone can see a problem here it's not

00:12:02,850 --> 00:12:09,240
syntax it's combining fine okay so we

00:12:07,050 --> 00:12:11,640
don't have a lot of time but I mean the

00:12:09,240 --> 00:12:13,410
problem is we need to bind to a port

00:12:11,640 --> 00:12:15,500
that's kind of the the basic thing that

00:12:13,410 --> 00:12:18,180
we need to do when we start our app and

00:12:15,500 --> 00:12:19,770
the big question is all right which port

00:12:18,180 --> 00:12:22,160
do we need to bind to where is the

00:12:19,770 --> 00:12:26,490
server it doesn't make sense right so

00:12:22,160 --> 00:12:31,770
this is where this is what I want to

00:12:26,490 --> 00:12:34,890
show you so all we need to do to make

00:12:31,770 --> 00:12:38,400
Express ingests Express yes and server

00:12:34,890 --> 00:12:41,940
let's talk together is we need to modify

00:12:38,400 --> 00:12:45,600
obviously the server's llaman file which

00:12:41,940 --> 00:12:49,710
means to proxy or request through the

00:12:45,600 --> 00:12:54,560
Express j/s route we're gonna rub the

00:12:49,710 --> 00:12:57,560
the app object with humor save twice

00:12:54,560 --> 00:13:00,930
we're gonna rub to the app object with

00:12:57,560 --> 00:13:03,900
several s-http model which means we need

00:13:00,930 --> 00:13:05,270
to npm install it and we're going to

00:13:03,900 --> 00:13:11,820
remove the power pending and that's

00:13:05,270 --> 00:13:16,410
pretty much all so if we look at the

00:13:11,820 --> 00:13:20,210
server level file again you can see that

00:13:16,410 --> 00:13:24,570
we're adding a third function which

00:13:20,210 --> 00:13:29,000
which tells server less or tells the api

00:13:24,570 --> 00:13:33,180
gateway everything that goes into /v two

00:13:29,000 --> 00:13:36,839
goes into my handler which we're going

00:13:33,180 --> 00:13:40,800
to see also soon and then we need to

00:13:36,839 --> 00:13:43,950
modify the code so we adding the server

00:13:40,800 --> 00:13:47,190
less HTTP as a dependency we remove the

00:13:43,950 --> 00:13:51,210
poor binding and we export the the app

00:13:47,190 --> 00:13:57,470
as a lambda function and that's pretty

00:13:51,210 --> 00:14:00,900
much it I'm going to show you again

00:13:57,470 --> 00:14:05,430
quick demo so that's my service llamo

00:14:00,900 --> 00:14:07,420
and I'm going to comment out count in

00:14:05,430 --> 00:14:17,770
this code

00:14:07,420 --> 00:14:21,490
save it and we're going to deploy again

00:14:17,770 --> 00:14:28,000
I'm gonna wait you see it's doing the

00:14:21,490 --> 00:14:31,020
same thing exactly hopefully it's going

00:14:28,000 --> 00:14:31,020
to be faster now

00:14:42,750 --> 00:14:45,650
come on

00:14:48,529 --> 00:15:06,930
it's gonna go soon and and praying to

00:15:00,120 --> 00:15:09,690
the God of demos all right yeah so you

00:15:06,930 --> 00:15:14,010
can see that we got two new end points

00:15:09,690 --> 00:15:16,860
here it's two but it's basically just

00:15:14,010 --> 00:15:19,110
one function and if we want to test

00:15:16,860 --> 00:15:20,910
again that things are working as

00:15:19,110 --> 00:15:24,360
expected

00:15:20,910 --> 00:15:33,060
we're gonna hit the v2 endpoint which

00:15:24,360 --> 00:15:37,760
goes through Express good so you can see

00:15:33,060 --> 00:15:37,760
that we got the Express trace

00:15:42,630 --> 00:15:52,650
I said here the code is basically just

00:15:47,850 --> 00:15:56,790
returning the string so same function

00:15:52,650 --> 00:16:10,890
but different method of kind of invoking

00:15:56,790 --> 00:16:14,460
it okay cool let's go back slides all

00:16:10,890 --> 00:16:17,010
right so next topic is often testing

00:16:14,460 --> 00:16:20,130
which is kind of obvious that we need to

00:16:17,010 --> 00:16:21,900
ask ourselves how can we test our code

00:16:20,130 --> 00:16:24,720
before deploying because again we don't

00:16:21,900 --> 00:16:26,610
have any port we can bind to we don't

00:16:24,720 --> 00:16:29,520
have any server so obviously we don't

00:16:26,610 --> 00:16:30,990
wait for the whole deployment time test

00:16:29,520 --> 00:16:34,590
something see that it's not working and

00:16:30,990 --> 00:16:38,960
then trying to fix it so there are two

00:16:34,590 --> 00:16:43,620
way one of them is to use the service

00:16:38,960 --> 00:16:47,220
CLI which has a great utility for

00:16:43,620 --> 00:16:50,490
invoking the local function so you can

00:16:47,220 --> 00:16:53,580
see here it's just doing SLS invoke

00:16:50,490 --> 00:16:56,160
local and the function name and then the

00:16:53,580 --> 00:16:59,250
dash p is just the input that you want

00:16:56,160 --> 00:17:02,040
to provide a function and you can see

00:16:59,250 --> 00:17:06,689
the output the same output that in the

00:17:02,040 --> 00:17:10,880
body which is kind of JSON string G this

00:17:06,689 --> 00:17:15,930
second option if we want to use Express

00:17:10,880 --> 00:17:18,720
is adding plug-in to service which

00:17:15,930 --> 00:17:22,130
called service offline not a big

00:17:18,720 --> 00:17:27,150
surprise there so we just add it to the

00:17:22,130 --> 00:17:29,160
plugins area in the service Yama we need

00:17:27,150 --> 00:17:31,050
to install it of course with a debug

00:17:29,160 --> 00:17:36,300
dependency that's that's important

00:17:31,050 --> 00:17:38,250
because we don't want to add the because

00:17:36,300 --> 00:17:40,290
we don't want to add the dev

00:17:38,250 --> 00:17:43,320
dependencies into our package it's just

00:17:40,290 --> 00:17:45,150
going to increase just going to increase

00:17:43,320 --> 00:17:49,530
the package size and the deployment time

00:17:45,150 --> 00:17:51,120
and we just run in the shell SLS offline

00:17:49,530 --> 00:17:55,140
start and you can see that we have a

00:17:51,120 --> 00:17:56,540
server running locally on you can also

00:17:55,140 --> 00:18:01,650
define the port but the

00:17:56,540 --> 00:18:03,240
43,000 and if we hit the handful locally

00:18:01,650 --> 00:18:07,830
we're gonna see the same thing exactly

00:18:03,240 --> 00:18:14,820
so that's kind of a easy way to store

00:18:07,830 --> 00:18:16,410
stuff okay so so the question is where

00:18:14,820 --> 00:18:18,840
is my log and I kind of give you a hint

00:18:16,410 --> 00:18:22,250
before so everything goes into a service

00:18:18,840 --> 00:18:26,630
called cloud watch and cloud watch

00:18:22,250 --> 00:18:30,570
allows us to so we can see the logs in

00:18:26,630 --> 00:18:32,010
two different ways one of them is to is

00:18:30,570 --> 00:18:37,260
to run I don't know if you can see here

00:18:32,010 --> 00:18:39,210
sls logs function name and if you add -

00:18:37,260 --> 00:18:41,790
- table you can actually tell the log as

00:18:39,210 --> 00:18:43,340
you would take a log file you can see

00:18:41,790 --> 00:18:47,690
interesting stuff there are things like

00:18:43,340 --> 00:18:50,850
the time it was executed the request ID

00:18:47,690 --> 00:18:54,750
how much time does the function took to

00:18:50,850 --> 00:18:58,620
execute and things like how much memory

00:18:54,750 --> 00:19:01,470
and building duration kind of a lot of

00:18:58,620 --> 00:19:06,230
interesting stuff the second way is to

00:19:01,470 --> 00:19:08,640
go to the cloud watch console and

00:19:06,230 --> 00:19:13,050
basically see the same the same stuff

00:19:08,640 --> 00:19:18,390
there as you do in the in the CLR

00:19:13,050 --> 00:19:20,610
utility okay we don't have a lot of time

00:19:18,390 --> 00:19:22,440
so I'm just gonna rush through the next

00:19:20,610 --> 00:19:24,750
slide so securing the endpoint obviously

00:19:22,440 --> 00:19:26,790
security is a big issue so I don't have

00:19:24,750 --> 00:19:29,250
a lot of time so I'm going to just kind

00:19:26,790 --> 00:19:32,580
of briefly give you one method to secure

00:19:29,250 --> 00:19:35,130
endpoints so once you deploy stuff into

00:19:32,580 --> 00:19:38,040
server less into lambda its public by

00:19:35,130 --> 00:19:40,860
default unless you deploy it into a V PC

00:19:38,040 --> 00:19:45,929
Network which is basically like a

00:19:40,860 --> 00:19:48,900
private network you you own AWS and and

00:19:45,929 --> 00:19:52,490
service also provide you something they

00:19:48,900 --> 00:19:57,510
called private function and if we add

00:19:52,490 --> 00:20:00,120
the API keys and we're gonna add another

00:19:57,510 --> 00:20:03,900
function and we're gonna market its

00:20:00,120 --> 00:20:07,350
private and I'm not going to show you

00:20:03,900 --> 00:20:09,360
the deployment process again but you can

00:20:07,350 --> 00:20:15,120
see that we got an API key

00:20:09,360 --> 00:20:17,340
and another endpoint we can call and you

00:20:15,120 --> 00:20:20,310
can see here at the top if we just hit

00:20:17,340 --> 00:20:21,900
the end point without any API key you

00:20:20,310 --> 00:20:26,610
would just get a message saying

00:20:21,900 --> 00:20:29,220
forbidden which is 4 or 3 and if we add

00:20:26,610 --> 00:20:32,130
I don't know if you can see here the

00:20:29,220 --> 00:20:34,140
header based on the API key we got from

00:20:32,130 --> 00:20:37,440
deployment you can see that the function

00:20:34,140 --> 00:20:47,640
is responding so that's a kind of easy

00:20:37,440 --> 00:20:51,510
way to secure endpoints and the last

00:20:47,640 --> 00:20:52,790
topic would be how we can keep our

00:20:51,510 --> 00:20:56,790
secrets

00:20:52,790 --> 00:20:58,650
so AWS has a service called ADA with a

00:20:56,790 --> 00:21:01,470
system manager which is a really bad

00:20:58,650 --> 00:21:04,290
name but we don't care about most of it

00:21:01,470 --> 00:21:07,800
we only care about thing called

00:21:04,290 --> 00:21:10,260
parameter store and the good thing about

00:21:07,800 --> 00:21:14,130
several if that has integration with it

00:21:10,260 --> 00:21:18,300
so what I've done I just created my

00:21:14,130 --> 00:21:20,790
creditor I created a new key any name

00:21:18,300 --> 00:21:25,590
can you can office forward slash to kind

00:21:20,790 --> 00:21:30,930
of give it like a hierarchy and if we

00:21:25,590 --> 00:21:34,170
add it to the environment variable in in

00:21:30,930 --> 00:21:39,690
the civil SML file and the syntax is SSM

00:21:34,170 --> 00:21:44,310
and the name of the key and you know no

00:21:39,690 --> 00:21:50,070
GS code we can just take the secret from

00:21:44,310 --> 00:21:52,350
the environment Vargo and I'm sure have

00:21:50,070 --> 00:21:59,130
time for demo but I will try to do a

00:21:52,350 --> 00:22:04,220
quick one lifetime minute ok all right

00:21:59,130 --> 00:22:04,220
so I'll just go here

00:22:06,950 --> 00:22:23,390
and I'm going to do the diploma it again

00:22:13,280 --> 00:22:25,850
we finish the deployment cool just gonna

00:22:23,390 --> 00:22:30,530
hit the end point and you can see that

00:22:25,850 --> 00:22:32,030
we got the secret here so we didn't add

00:22:30,530 --> 00:22:35,210
the secret in the yummy file so that's a

00:22:32,030 --> 00:22:41,200
good way to kind of keep your secrets

00:22:35,210 --> 00:22:41,200
out of the source control okay cool so

00:22:43,630 --> 00:22:50,840
yeah that's just in case the demo is not

00:22:47,050 --> 00:22:54,230
functioning all right so to sum up

00:22:50,840 --> 00:22:55,850
because I'm just out of time service on

00:22:54,230 --> 00:22:57,320
that the good thing there are many good

00:22:55,850 --> 00:23:00,710
things about it but I mean the kind of

00:22:57,320 --> 00:23:04,640
the obvious one are it's it's easy to

00:23:00,710 --> 00:23:07,220
build it's easy to scale cost reduction

00:23:04,640 --> 00:23:11,660
so it means less DevOps so if all the

00:23:07,220 --> 00:23:13,850
development person in the room you pay

00:23:11,660 --> 00:23:16,700
for what you saw that we never be you

00:23:13,850 --> 00:23:19,280
never pay for Idol and the bad things

00:23:16,700 --> 00:23:21,410
obviously are bad things and you have

00:23:19,280 --> 00:23:23,440
less control infrastructure so we don't

00:23:21,410 --> 00:23:26,690
have service you don't have a stage axis

00:23:23,440 --> 00:23:30,200
it's not good for bagging job and the

00:23:26,690 --> 00:23:32,420
reason is that the lambda max timeout is

00:23:30,200 --> 00:23:35,060
five minutes and if we connect it to

00:23:32,420 --> 00:23:39,260
into AP I get we only have 30 seconds to

00:23:35,060 --> 00:23:42,290
execute after that we get 502 and that's

00:23:39,260 --> 00:23:44,600
all and your code and logs are obviously

00:23:42,290 --> 00:23:48,560
more distributed because it can your lot

00:23:44,600 --> 00:23:55,580
can can spawn two different streams in

00:23:48,560 --> 00:23:59,000
cloud watch and I think yeah that's

00:23:55,580 --> 00:24:01,060
pretty much it thank you

00:23:59,000 --> 00:24:01,060

YouTube URL: https://www.youtube.com/watch?v=K95IgP0rn7E


