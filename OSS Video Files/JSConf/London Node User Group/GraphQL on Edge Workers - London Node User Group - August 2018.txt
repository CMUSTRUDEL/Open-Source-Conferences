Title: GraphQL on Edge Workers - London Node User Group - August 2018
Publication date: 2018-08-30
Playlist: London Node User Group
Description: 
	An introduction to GraphQL on Serverless. We'll talk about the benefits of running GraphQL (and other API gateway patterns) on the Edge (the performance benefits batching and so on).

About the speaker:

Sevki Hasirci (@Sevki) is a Systems engineer at Cloudflare, working on developer tools, his day to day responsibilities are making developers more productive.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:05,819
I'm going to talk to you about graph QL

00:00:01,650 --> 00:00:07,770
and edge workers in other API gateway

00:00:05,819 --> 00:00:12,179
patterns that you might want to explore

00:00:07,770 --> 00:00:13,320
on the edge so I'm a software engineer

00:00:12,179 --> 00:00:16,470
at CloudFlare

00:00:13,320 --> 00:00:20,039
I'm chef kit but you can just call me

00:00:16,470 --> 00:00:22,199
chef it's easier what I would like to

00:00:20,039 --> 00:00:25,380
take what I would like for you to take

00:00:22,199 --> 00:00:28,740
from this talk is a different mindset

00:00:25,380 --> 00:00:31,679
about how you would approach building

00:00:28,740 --> 00:00:34,890
api's and sort of gathering a bunch of

00:00:31,679 --> 00:00:38,190
micro services and maybe trying to build

00:00:34,890 --> 00:00:42,780
a api gateway of your own and hopefully

00:00:38,190 --> 00:00:44,280
using graph QL so if you guys remember a

00:00:42,780 --> 00:00:48,110
long time ago this is what we used to

00:00:44,280 --> 00:00:52,110
date we would have a utilities closet

00:00:48,110 --> 00:00:54,989
with a monkey patch a bunch of cables

00:00:52,110 --> 00:00:58,050
together and have servers running in a

00:00:54,989 --> 00:01:00,210
utilities closet everybody would know oh

00:00:58,050 --> 00:01:01,590
that's the machine that thing is running

00:01:00,210 --> 00:01:06,060
on that's the machine that thing is

00:01:01,590 --> 00:01:08,880
running on now we have huge data centers

00:01:06,060 --> 00:01:11,939
we have the cloud and we don't know

00:01:08,880 --> 00:01:14,430
really what actual physical machine

00:01:11,939 --> 00:01:16,710
our code is running on we know still

00:01:14,430 --> 00:01:18,930
what server it's running on we just

00:01:16,710 --> 00:01:20,909
don't know the actual machine I'm pretty

00:01:18,930 --> 00:01:26,450
sure Google just builds these so they

00:01:20,909 --> 00:01:26,450
can get on a cable porn on reddit but

00:01:26,840 --> 00:01:31,380
we're moving to this we're moving to

00:01:29,729 --> 00:01:34,979
server lists where if you don't really

00:01:31,380 --> 00:01:37,880
know where our code is running which

00:01:34,979 --> 00:01:41,250
actual machine that's running on right

00:01:37,880 --> 00:01:42,930
code goes in you don't really know where

00:01:41,250 --> 00:01:44,700
it's running you don't really care you

00:01:42,930 --> 00:01:46,979
don't really care about the version of

00:01:44,700 --> 00:01:50,280
the kernel that it's running you just

00:01:46,979 --> 00:01:54,000
don't care right so we went from a

00:01:50,280 --> 00:01:59,490
server in a utilities closet to a server

00:01:54,000 --> 00:02:03,719
in u.s. East 1b to no computers we don't

00:01:59,490 --> 00:02:06,930
know which services it is still though

00:02:03,719 --> 00:02:09,420
one location to one location to one

00:02:06,930 --> 00:02:11,069
location when you go and try to set up a

00:02:09,420 --> 00:02:12,159
lambda function or a Google cloud

00:02:11,069 --> 00:02:15,290
function or whatever

00:02:12,159 --> 00:02:21,980
you still have to say I wanted to run in

00:02:15,290 --> 00:02:25,010
this region for complex billing stuff

00:02:21,980 --> 00:02:27,319
tax jurisdictions and whatnot you still

00:02:25,010 --> 00:02:32,079
have to say I want this to run with this

00:02:27,319 --> 00:02:35,709
much RAM on this particular region right

00:02:32,079 --> 00:02:38,060
so what is the edge the edging edge

00:02:35,709 --> 00:02:41,530
computing refers to the edge of the

00:02:38,060 --> 00:02:45,379
cloud it is the closest thing to your

00:02:41,530 --> 00:02:47,780
customers with the exception of the ones

00:02:45,379 --> 00:02:55,250
they're staring at it is really really

00:02:47,780 --> 00:02:57,739
close to your customers but the thing

00:02:55,250 --> 00:03:00,079
about the thing about edge computing is

00:02:57,739 --> 00:03:04,569
we're really happy to put all our

00:03:00,079 --> 00:03:07,909
JavaScript files with their hashes and

00:03:04,569 --> 00:03:11,659
images and CSS files and static files

00:03:07,909 --> 00:03:14,689
and all of that stuff that we generally

00:03:11,659 --> 00:03:18,019
think of as cash flow on the edge but

00:03:14,689 --> 00:03:22,549
things that are API calls authenticated

00:03:18,019 --> 00:03:25,849
up pages admin tools one-up tools proof

00:03:22,549 --> 00:03:27,139
of concepts we don't really put them we

00:03:25,849 --> 00:03:30,079
don't really think of them as being

00:03:27,139 --> 00:03:33,500
casual because we think out there will

00:03:30,079 --> 00:03:36,049
be a performance hit or is it really

00:03:33,500 --> 00:03:39,109
worth it we'll just scale it up

00:03:36,049 --> 00:03:40,989
we're just throw more machines at it

00:03:39,109 --> 00:03:44,329
throw more RAM at it

00:03:40,989 --> 00:03:46,599
we will put Redis next to it so we can

00:03:44,329 --> 00:03:48,650
cache the queries or the values or

00:03:46,599 --> 00:03:51,349
something like that but we don't really

00:03:48,650 --> 00:03:56,720
think of API calls for an example as

00:03:51,349 --> 00:04:01,299
being as cacheable content so why is

00:03:56,720 --> 00:04:06,220
being so close to the edge important

00:04:01,299 --> 00:04:11,569
what's the what does it bring this right

00:04:06,220 --> 00:04:15,519
so right now we have around one hundred

00:04:11,569 --> 00:04:18,739
and fifty three points of presence and

00:04:15,519 --> 00:04:21,219
when I was doing these slides I really

00:04:18,739 --> 00:04:24,700
had to sort of make this interactive

00:04:21,219 --> 00:04:28,840
because we keep adding more

00:04:24,700 --> 00:04:34,060
Pop's so if I do this it'll go and find

00:04:28,840 --> 00:04:37,240
the nearest pop and tell me how many we

00:04:34,060 --> 00:04:41,980
have and obviously this is written and

00:04:37,240 --> 00:04:43,480
graphed well great but the main thing I

00:04:41,980 --> 00:04:48,460
want you to get away from this is

00:04:43,480 --> 00:04:51,910
pushing code to all these edge locations

00:04:48,460 --> 00:04:57,370
is extremely easy right we can deploy

00:04:51,910 --> 00:05:06,700
your code to the edge in about five to

00:04:57,370 --> 00:05:09,250
seven seconds right and done that's

00:05:06,700 --> 00:05:11,380
that's how much it takes for you to

00:05:09,250 --> 00:05:13,330
write some code and get it on the edge

00:05:11,380 --> 00:05:17,050
why is this important

00:05:13,330 --> 00:05:20,230
why am i talking about this right let's

00:05:17,050 --> 00:05:24,420
talk about graph QL first so I think

00:05:20,230 --> 00:05:27,090
there is a really really great value in

00:05:24,420 --> 00:05:29,830
having all your micro services run in

00:05:27,090 --> 00:05:34,810
any sort of environment that they run on

00:05:29,830 --> 00:05:37,690
right now but then you put you glue all

00:05:34,810 --> 00:05:42,220
those micro services together at the

00:05:37,690 --> 00:05:44,760
edge and have them be available in any

00:05:42,220 --> 00:05:48,730
format that you want

00:05:44,760 --> 00:05:50,920
- clearly graph duo and glue those

00:05:48,730 --> 00:05:54,730
things together and make it really

00:05:50,920 --> 00:05:57,730
really fast right I don't know how many

00:05:54,730 --> 00:06:00,460
of you guys have this debate at your

00:05:57,730 --> 00:06:01,150
current place to work we do this all the

00:06:00,460 --> 00:06:03,430
time

00:06:01,150 --> 00:06:05,920
back-end engineers at where I work at

00:06:03,430 --> 00:06:09,370
CloudFlare there's a great debate about

00:06:05,920 --> 00:06:13,150
should we do G RPC should we do graph QL

00:06:09,370 --> 00:06:16,090
I don't think that's going to be the

00:06:13,150 --> 00:06:20,620
debate moving forward because you can

00:06:16,090 --> 00:06:23,440
take your G RPC clients your micro

00:06:20,620 --> 00:06:27,760
services and glue them all together with

00:06:23,440 --> 00:06:30,880
graph QL with that the sales pitch is

00:06:27,760 --> 00:06:33,220
done I'm going to move to code this is

00:06:30,880 --> 00:06:36,040
how easy it is to actually get up and

00:06:33,220 --> 00:06:37,590
running with graph QL you don't really

00:06:36,040 --> 00:06:44,910
need any

00:06:37,590 --> 00:06:44,910
all right first our brokers have this

00:06:45,270 --> 00:06:51,900
they use the same interface as the

00:06:49,770 --> 00:06:55,449
service workers on in your browser

00:06:51,900 --> 00:06:58,000
that's why we call them workers we call

00:06:55,449 --> 00:07:02,229
them edge workers so you add a fetch

00:06:58,000 --> 00:07:07,660
event listener and we handle the

00:07:02,229 --> 00:07:10,510
requests when we're handling the request

00:07:07,660 --> 00:07:14,410
we just write a very simple router this

00:07:10,510 --> 00:07:16,780
is boilerplate code we handle the graph

00:07:14,410 --> 00:07:20,139
QL requests ourselves and everything

00:07:16,780 --> 00:07:29,919
else we just let the server handle so we

00:07:20,139 --> 00:07:32,919
just fetch we then go to our actual

00:07:29,919 --> 00:07:35,530
graph QL code our actual graphic well in

00:07:32,919 --> 00:07:39,580
our actual graph GL code we decode the

00:07:35,530 --> 00:07:43,750
query like so so there is a bit of bit

00:07:39,580 --> 00:07:47,620
more of boilerplate code that you have

00:07:43,750 --> 00:07:49,450
to copy and paste and I'm sure our team

00:07:47,620 --> 00:07:59,320
is going to make these available as

00:07:49,450 --> 00:08:05,830
libraries we build a schema right we

00:07:59,320 --> 00:08:10,120
then let me just go back here we then

00:08:05,830 --> 00:08:12,340
need a root object to pass with the

00:08:10,120 --> 00:08:18,970
schema and the query that we just

00:08:12,340 --> 00:08:22,599
decoded right so we're in the root

00:08:18,970 --> 00:08:26,830
object that we just created we add data

00:08:22,599 --> 00:08:29,919
loader to it because we want to batch

00:08:26,830 --> 00:08:35,159
and also cache everything that we're

00:08:29,919 --> 00:08:39,849
doing and we write the resolvers for the

00:08:35,159 --> 00:08:41,529
data loader right and we're just going

00:08:39,849 --> 00:08:46,209
to be I'm just going to be demoing you

00:08:41,529 --> 00:08:50,339
guys how to basically wrap an existing

00:08:46,209 --> 00:08:50,339
API in this case it's the

00:08:50,370 --> 00:09:06,800
DNS over HTTP API and let me actually go

00:08:57,690 --> 00:09:06,800
and do that so this is the promise right

00:09:07,190 --> 00:09:16,710
I'm going to take a bunch of these and

00:09:12,020 --> 00:09:20,070
run a query and it's fast

00:09:16,710 --> 00:09:23,460
right watch what happens when I run it

00:09:20,070 --> 00:09:29,250
again and just so you guys know we're

00:09:23,460 --> 00:09:31,850
not cheating go to the network tab let's

00:09:29,250 --> 00:09:31,850
run this again

00:09:41,460 --> 00:09:54,660
my doing something wrong that's right so

00:09:50,460 --> 00:09:58,170
about 30 milliseconds 16 milliseconds 21

00:09:54,660 --> 00:10:02,100
milliseconds 22 milliseconds right these

00:09:58,170 --> 00:10:04,530
are actual calls that we're doing to the

00:10:02,100 --> 00:10:06,720
network it's going it's resolving it's

00:10:04,530 --> 00:10:10,920
coming back because we're caching very

00:10:06,720 --> 00:10:12,930
aggressively and we are also shaping

00:10:10,920 --> 00:10:16,920
that they could the way we want it right

00:10:12,930 --> 00:10:18,600
if I move one of these around is it

00:10:16,920 --> 00:10:28,050
going to matter now because we've

00:10:18,600 --> 00:10:32,070
already done the caching server side how

00:10:28,050 --> 00:10:37,730
fast is it actually to get something

00:10:32,070 --> 00:10:37,730
like this going and can you actually

00:10:46,360 --> 00:10:52,869
this is it we have a starter library

00:10:49,119 --> 00:10:56,189
that you don't need anything else you

00:10:52,869 --> 00:10:56,189
can just play around with it

00:11:02,700 --> 00:11:06,260
like so and it works right

00:11:26,450 --> 00:11:35,339
right this is the same exact code that I

00:11:29,550 --> 00:11:38,670
just pushed and it's running now at our

00:11:35,339 --> 00:11:41,010
sandbox environment at Blair workers

00:11:38,670 --> 00:11:45,140
comp it's that easy to get started and

00:11:41,010 --> 00:11:51,300
as you can see from the network coast

00:11:45,140 --> 00:11:54,330
it's really really fast and that's

00:11:51,300 --> 00:12:00,110
really the promise of running any kind

00:11:54,330 --> 00:12:03,630
of API a call or an API gateway pattern

00:12:00,110 --> 00:12:06,990
at the edge you don't really have to

00:12:03,630 --> 00:12:12,570
think about how it we are at this point

00:12:06,990 --> 00:12:18,029
I think we're at 153 pops we are trying

00:12:12,570 --> 00:12:22,500
to be about 50 milliseconds from 99

00:12:18,029 --> 00:12:24,930
percent of the entire population move

00:12:22,500 --> 00:12:26,970
your API is closer to where people are

00:12:24,930 --> 00:12:32,100
if you if you if any of you have

00:12:26,970 --> 00:12:35,160
actually tried running slack in an

00:12:32,100 --> 00:12:37,680
airplane with the airplane Wi-Fi on

00:12:35,160 --> 00:12:40,440
you'll you know what I'm talking about

00:12:37,680 --> 00:12:45,660
it's a very painful experience move your

00:12:40,440 --> 00:12:50,790
API calls closer to the to the edge and

00:12:45,660 --> 00:12:53,490
with that I'm shaky again on Twitter and

00:12:50,790 --> 00:12:56,010
github the demo code that I just showed

00:12:53,490 --> 00:12:59,430
you is available at CloudFlare graph QL

00:12:56,010 --> 00:13:01,680
comm Doc's are available at developer

00:12:59,430 --> 00:13:04,080
slash CloudFlare comm slash workers and

00:13:01,680 --> 00:13:07,260
if you'd like to talk about any of this

00:13:04,080 --> 00:13:10,020
you can email me at shakey at Klockner

00:13:07,260 --> 00:13:13,800
calm i have stickers and web cam covers

00:13:10,020 --> 00:13:16,740
if you guys want any of those things and

00:13:13,800 --> 00:13:18,990
I'm I'll be hanging around in the back

00:13:16,740 --> 00:13:21,110
if you wanted to talk to me about any of

00:13:18,990 --> 00:13:21,110
this

00:13:21,380 --> 00:13:26,490

YouTube URL: https://www.youtube.com/watch?v=E9sDH6ylQc4


