Title: Lightning Talk - So, Sorry Serverless Framework - London Node User Group - May 2018
Publication date: 2018-06-04
Playlist: London Node User Group
Description: 
	Lightning Talk - So, Sorry Serverless Framework - Łukasz Marek Sielski

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:04,350
my name is Rakesh there's no time for

00:00:02,179 --> 00:00:06,029
interest I will do that on the end I

00:00:04,350 --> 00:00:08,940
would just talk through the slide that

00:00:06,029 --> 00:00:11,460
would be online this is typical don't do

00:00:08,940 --> 00:00:14,190
that at home scenario or waste your time

00:00:11,460 --> 00:00:17,279
if you want and I address that to a few

00:00:14,190 --> 00:00:19,980
kind of recipients so basically it can

00:00:17,279 --> 00:00:22,470
show for like us for back and post are

00:00:19,980 --> 00:00:23,550
developers how we could help our like

00:00:22,470 --> 00:00:25,769
front-end developers or junior

00:00:23,550 --> 00:00:27,930
developers to on both DevOps maybe

00:00:25,769 --> 00:00:32,130
back-end integrations for the front-end

00:00:27,930 --> 00:00:34,800
developers to it can help like show some

00:00:32,130 --> 00:00:37,469
possibilities on simplifying the scary

00:00:34,800 --> 00:00:40,469
things on the backend and in the DevOps

00:00:37,469 --> 00:00:42,540
and with someone who have enough time to

00:00:40,469 --> 00:00:44,040
waste on understanding how JSX works

00:00:42,540 --> 00:00:47,129
behind the scenes and how it doesn't

00:00:44,040 --> 00:00:50,039
work that also could be cancerous it

00:00:47,129 --> 00:00:52,680
kind interesting so the main problem is

00:00:50,039 --> 00:00:55,289
like for most of us like does that

00:00:52,680 --> 00:00:57,690
that's our daily thing DevOps and

00:00:55,289 --> 00:00:59,340
back-end is our bread we're doing that

00:00:57,690 --> 00:01:01,320
but there are a lot of developers who

00:00:59,340 --> 00:01:03,989
are starting from like react angular and

00:01:01,320 --> 00:01:07,260
the one just deploy something easily

00:01:03,989 --> 00:01:09,030
they want to deploy something just put

00:01:07,260 --> 00:01:10,350
it somewhere on the website with some

00:01:09,030 --> 00:01:13,680
domain they don't have to think about

00:01:10,350 --> 00:01:15,840
SSL about CD ends didn't have to think

00:01:13,680 --> 00:01:17,549
about docker because it's cool but also

00:01:15,840 --> 00:01:20,549
you have to learn that also it has some

00:01:17,549 --> 00:01:22,320
promise in between versions and then you

00:01:20,549 --> 00:01:24,689
don't have to you have a sometimes

00:01:22,320 --> 00:01:25,890
problem swing between the pointy AWS and

00:01:24,689 --> 00:01:27,960
as you have to understand you have to

00:01:25,890 --> 00:01:30,000
learn that some tools have specific

00:01:27,960 --> 00:01:31,320
conflicts some tools require you to know

00:01:30,000 --> 00:01:33,360
specific languages like they have

00:01:31,320 --> 00:01:36,090
written in Ruby or Python another thing

00:01:33,360 --> 00:01:39,000
to learn another obstacle to start doing

00:01:36,090 --> 00:01:41,579
something interesting and maybe that can

00:01:39,000 --> 00:01:43,140
can discourage someone so on the other

00:01:41,579 --> 00:01:47,430
hand these people come from the world

00:01:43,140 --> 00:01:49,740
where JSX or like react but this react

00:01:47,430 --> 00:01:51,390
flavored markup is solving a lot of

00:01:49,740 --> 00:01:53,579
problems already and simplifying by

00:01:51,390 --> 00:01:55,920
writing abstractions we not only build

00:01:53,579 --> 00:01:57,780
websites we build also mobile apps we

00:01:55,920 --> 00:02:00,090
can do some rendering on the server side

00:01:57,780 --> 00:02:02,969
now we can build even like desktop apps

00:02:00,090 --> 00:02:05,219
we feel like prata native the libraries

00:02:02,969 --> 00:02:07,290
building as documents like PDFs exos

00:02:05,219 --> 00:02:09,869
award or even this presentation actually

00:02:07,290 --> 00:02:12,300
is written in react are using gsx so

00:02:09,869 --> 00:02:12,849
almost everything you can just put there

00:02:12,300 --> 00:02:14,439
in

00:02:12,849 --> 00:02:17,290
attraction it's easy to maintain

00:02:14,439 --> 00:02:19,480
unreadable and if I can now abstract my

00:02:17,290 --> 00:02:21,489
app in this way saying okay there is

00:02:19,480 --> 00:02:25,269
some app there is some Rooter and there

00:02:21,489 --> 00:02:28,719
is some page under this root why I

00:02:25,269 --> 00:02:31,299
cannot say got another app I want that

00:02:28,719 --> 00:02:35,200
to be under some domain and just make it

00:02:31,299 --> 00:02:36,840
flow and we've have had multiple domains

00:02:35,200 --> 00:02:40,030
on multiple companies so I cannot just

00:02:36,840 --> 00:02:43,780
iterate over there and reply replicate

00:02:40,030 --> 00:02:45,340
the template why I cannot reuse the same

00:02:43,780 --> 00:02:48,010
kind of component the same kind of

00:02:45,340 --> 00:02:50,530
abstraction I used for the front end as

00:02:48,010 --> 00:02:52,000
it occurs on some page and say I want

00:02:50,530 --> 00:02:54,569
that to be rendered on the server side

00:02:52,000 --> 00:02:57,099
maybe by lambda maybe by something else

00:02:54,569 --> 00:02:59,260
maybe connect some endpoint in the same

00:02:57,099 --> 00:03:01,540
way like similarly a server Eliza was

00:02:59,260 --> 00:03:03,370
doing or say I want to have some storage

00:03:01,540 --> 00:03:05,079
I don't care that as free or something

00:03:03,370 --> 00:03:07,900
else I just want some place called

00:03:05,079 --> 00:03:10,480
uploads and they here it goes and use

00:03:07,900 --> 00:03:13,569
that somewhere in the code and I played

00:03:10,480 --> 00:03:15,250
with that idea and I did this very bad

00:03:13,569 --> 00:03:19,540
thing and I will tell you how why it's

00:03:15,250 --> 00:03:21,159
bad and why it's wrong all right this is

00:03:19,540 --> 00:03:23,590
some still actually working scene repo

00:03:21,159 --> 00:03:27,699
and I would delete it it's checking yeah

00:03:23,590 --> 00:03:29,319
yeah if I have a Gatsby yes then I would

00:03:27,699 --> 00:03:31,449
just truncate directory I will create

00:03:29,319 --> 00:03:34,150
new gasps beside go-to directory and

00:03:31,449 --> 00:03:36,849
maybe I can upload it the problem of

00:03:34,150 --> 00:03:41,290
that is I started to implement the

00:03:36,849 --> 00:03:44,979
pipeline flow not the structure and how

00:03:41,290 --> 00:03:47,470
JSX is not about that so what jay says

00:03:44,979 --> 00:03:49,810
is a simply simple way to write

00:03:47,470 --> 00:03:51,489
functional code in a way more

00:03:49,810 --> 00:03:55,299
understandable for junior developers of

00:03:51,489 --> 00:03:57,310
someone who thinks more visually and you

00:03:55,299 --> 00:03:59,469
run the function that this function in

00:03:57,310 --> 00:04:01,389
interact is always function which gives

00:03:59,469 --> 00:04:03,969
you as a result virtual Dom so the

00:04:01,389 --> 00:04:06,579
structure like state snapshot it doesn't

00:04:03,969 --> 00:04:11,469
give you result result is added later by

00:04:06,579 --> 00:04:13,299
renderer and as long you could apply

00:04:11,469 --> 00:04:15,400
rendering like new react is doing a

00:04:13,299 --> 00:04:17,769
synchronously creating the snapshot

00:04:15,400 --> 00:04:19,209
shouldn't be because then your code is

00:04:17,769 --> 00:04:21,489
not more functional you have a side

00:04:19,209 --> 00:04:23,289
effects you have arrays conditions it's

00:04:21,489 --> 00:04:25,779
tough to make a sense and sometimes have

00:04:23,289 --> 00:04:26,670
problems like about you connect like if

00:04:25,779 --> 00:04:28,620
that

00:04:26,670 --> 00:04:29,790
file is more important or maybe contain

00:04:28,620 --> 00:04:36,840
the content if the file is more

00:04:29,790 --> 00:04:38,250
important so I turn out writing

00:04:36,840 --> 00:04:42,300
something more complex is an actual

00:04:38,250 --> 00:04:45,660
problem so that's why it felt but coming

00:04:42,300 --> 00:04:48,810
back to the first example is if we work

00:04:45,660 --> 00:04:52,640
this way we could create some

00:04:48,810 --> 00:04:55,050
abstraction for genome developers or for

00:04:52,640 --> 00:04:57,540
anyone who wants to learn or doesn't

00:04:55,050 --> 00:04:59,730
want to spend too much time on it to

00:04:57,540 --> 00:05:02,340
write the script by the configuration

00:04:59,730 --> 00:05:07,140
for many tools like their form ansible

00:05:02,340 --> 00:05:08,730
serverless or epics and just use the

00:05:07,140 --> 00:05:12,150
same tools they're using on daily basis

00:05:08,730 --> 00:05:14,040
and then it will work so if you like or

00:05:12,150 --> 00:05:16,950
dislike that idea there is some code

00:05:14,040 --> 00:05:18,960
this I will put other nikita i will be

00:05:16,950 --> 00:05:21,930
rewriting that but you can help me try

00:05:18,960 --> 00:05:24,750
to work on this example not only maybe

00:05:21,930 --> 00:05:27,800
it would apply but it allows us to

00:05:24,750 --> 00:05:30,720
investigate maybe that's the way to help

00:05:27,800 --> 00:05:33,480
but what was original problem because

00:05:30,720 --> 00:05:35,250
I've I had some crazy solution original

00:05:33,480 --> 00:05:37,230
problem is like sometimes free time I

00:05:35,250 --> 00:05:40,260
want to build easily with some website

00:05:37,230 --> 00:05:42,950
some react some lambda functions just

00:05:40,260 --> 00:05:46,670
deployed I have minutes retreat I have

00:05:42,950 --> 00:05:50,280
15 minutes 60 minutes for doing that and

00:05:46,670 --> 00:05:52,530
there is a lot of infrastructure doing

00:05:50,280 --> 00:05:55,110
that I can use AWS I can use App Engine

00:05:52,530 --> 00:05:58,920
and so on it's still I need extra tools

00:05:55,110 --> 00:06:01,620
I need learn how to use them and by when

00:05:58,920 --> 00:06:03,840
doing this talk actually I found

00:06:01,620 --> 00:06:06,510
something which from AWS could aid there

00:06:03,840 --> 00:06:08,490
with mobile which is good for actually

00:06:06,510 --> 00:06:10,080
not mobile it's actually good for

00:06:08,490 --> 00:06:12,360
sorting up the solution so it's quite

00:06:10,080 --> 00:06:14,040
similar with SNS which should be for

00:06:12,360 --> 00:06:16,620
notifications is very good for

00:06:14,040 --> 00:06:20,640
triggering lambdas a double Mobile is

00:06:16,620 --> 00:06:22,950
perfect for creating Poli plate of your

00:06:20,640 --> 00:06:25,530
website hosted somehow magically on the

00:06:22,950 --> 00:06:27,810
AWS with all the features how it works I

00:06:25,530 --> 00:06:30,420
create some app this is like react app

00:06:27,810 --> 00:06:33,810
creation script I say I want to create

00:06:30,420 --> 00:06:37,410
from the template I want to have a aw

00:06:33,810 --> 00:06:39,150
small a environment and I say in this

00:06:37,410 --> 00:06:40,500
directory there will be my sauce in this

00:06:39,150 --> 00:06:43,770
directory there will be my bill

00:06:40,500 --> 00:06:46,380
that's how I will run the build that's

00:06:43,770 --> 00:06:48,840
how we're on the tests that's the world

00:06:46,380 --> 00:06:50,520
will be named I didn't just run it and

00:06:48,840 --> 00:06:53,280
it does all the CloudFormation

00:06:50,520 --> 00:06:56,780
everything does for me so I don't have

00:06:53,280 --> 00:06:59,130
to do things which we saw in previous

00:06:56,780 --> 00:07:00,870
presentations which so I have a time to

00:06:59,130 --> 00:07:03,150
learn actually how they work but I have

00:07:00,870 --> 00:07:05,790
something working and I can publish I

00:07:03,150 --> 00:07:06,330
can test it what comes out the out of

00:07:05,790 --> 00:07:09,090
the box

00:07:06,330 --> 00:07:12,060
hosting like that performance test

00:07:09,090 --> 00:07:14,760
already on AWS platform working out of

00:07:12,060 --> 00:07:17,640
the box lambda an iPad gateway actually

00:07:14,760 --> 00:07:19,680
using Express with several s already are

00:07:17,640 --> 00:07:20,070
there as a steps examples you just add

00:07:19,680 --> 00:07:22,860
logic

00:07:20,070 --> 00:07:24,420
kognito integration one of the most

00:07:22,860 --> 00:07:27,780
painful things when you start learning

00:07:24,420 --> 00:07:29,700
lamda API gateway there's hardly any

00:07:27,780 --> 00:07:31,230
good documentation run that already

00:07:29,700 --> 00:07:33,060
integrated with Facebook lobby with

00:07:31,230 --> 00:07:35,520
Google login already passing all the

00:07:33,060 --> 00:07:36,980
steps into your function so you just

00:07:35,520 --> 00:07:40,970
apply some logic

00:07:36,980 --> 00:07:44,640
dynamodb analytics as free file storage

00:07:40,970 --> 00:07:46,140
perfect simple libraries for all the

00:07:44,640 --> 00:07:48,870
frameworks on the front-end code amplify

00:07:46,140 --> 00:07:50,700
and it was not only on web but on number

00:07:48,870 --> 00:07:51,570
other vendors so this is a link that

00:07:50,700 --> 00:07:54,630
also been on geta

00:07:51,570 --> 00:07:56,280
and that actually proper answer to your

00:07:54,630 --> 00:07:57,630
problem I have no time I want to build

00:07:56,280 --> 00:08:01,560
the website I don't have the time to

00:07:57,630 --> 00:08:03,510
learn servers but I want to rock so in

00:08:01,560 --> 00:08:06,840
this case if I'm a newbie I would say

00:08:03,510 --> 00:08:09,300
bye-bye servers if I want to learn then

00:08:06,840 --> 00:08:12,030
I will go to my colleague presentation

00:08:09,300 --> 00:08:16,040
which is pavada for doing proper and

00:08:12,030 --> 00:08:19,919
serious stuff and my name is mukesh

00:08:16,040 --> 00:08:22,050
necessarily I tend to break out in some

00:08:19,919 --> 00:08:24,570
startups for some time like two decades

00:08:22,050 --> 00:08:27,840
and stop people on Twitter especially

00:08:24,570 --> 00:08:30,200
the developers so you can follow me back

00:08:27,840 --> 00:08:30,200
thank you

00:08:30,220 --> 00:08:32,280

YouTube URL: https://www.youtube.com/watch?v=apG0Laom5nY


