Title: JSON & Transformational Operations - London Node User Group - September 2019
Publication date: 2019-10-03
Playlist: London Node User Group
Description: 
	Presented by Jason Green

You often want to build an app as quickly as possible. To get some kind of MVP in the hands of users, giving them value and something for you to incrementally improve. Most features can come later, but if you ever intend to offer a shared editing experience of any kind, you really need to think about it up front.

At Threads Styling we were faced with such a prospect when planning their Social Story builder. Having worked with CMSs in the past, we knew the pain of managing document locks with all their edge cases. We also knew that eventually the use case will arise to concurrently edit the document, and if you havenâ€™t planned for it, it is a monumental task.

By treating the document as a stream of JSON patch changes from the very beginning, we were able to offer real-time collaborative editing with conflict resolution smoothly handled by an Operational Transformation algorithm. In this talk, I will discuss the concepts involved and demonstrate a simple, but working example of a shared document using our open source library.

About the speaker: 

I'm a Principal Developer at Threads Styling
Twitter: @aziraphael

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:04,290
cool so we're here to talk about

00:00:02,179 --> 00:00:06,029
transformational operations or at least

00:00:04,290 --> 00:00:08,069
that's what I keep on getting mixed up

00:00:06,029 --> 00:00:10,410
in my head whenever I am talking about

00:00:08,069 --> 00:00:13,710
it and finally enough that makes me

00:00:10,410 --> 00:00:15,389
think of things like this operate

00:00:13,710 --> 00:00:18,900
transformational operations plastic

00:00:15,389 --> 00:00:20,869
surgery gone wrong amazing stories but

00:00:18,900 --> 00:00:23,460
actually what we're talking about is

00:00:20,869 --> 00:00:25,680
operational transformations and as you

00:00:23,460 --> 00:00:31,140
can see the imagery is just as

00:00:25,680 --> 00:00:35,820
compelling so I guess the first question

00:00:31,140 --> 00:00:37,350
is Who am I and what am I doing here my

00:00:35,820 --> 00:00:41,360
name is Jason green I'm a principal

00:00:37,350 --> 00:00:43,890
developer at thread styling and now

00:00:41,360 --> 00:00:46,320
thread styling we are and this is the

00:00:43,890 --> 00:00:48,450
marketing line pioneering 21st century

00:00:46,320 --> 00:00:52,199
personal shopping through chat and

00:00:48,450 --> 00:00:54,329
social media what that more or less

00:00:52,199 --> 00:00:56,520
translates into is we're selling very

00:00:54,329 --> 00:01:00,059
high value items to rich people over

00:00:56,520 --> 00:01:02,430
Instagram now the current world of

00:01:00,059 --> 00:01:04,710
social media and chat is not really

00:01:02,430 --> 00:01:09,900
anywhere near as set up for e-commerce

00:01:04,710 --> 00:01:11,159
as the plain old internet so that gives

00:01:09,900 --> 00:01:13,740
us developers a lot of interesting

00:01:11,159 --> 00:01:15,960
problems to solve and one of those

00:01:13,740 --> 00:01:20,159
problems is what led us to operational

00:01:15,960 --> 00:01:21,180
transformations which brings me to the

00:01:20,159 --> 00:01:24,479
what am I doing here

00:01:21,180 --> 00:01:25,619
and the reason I made this talk is

00:01:24,479 --> 00:01:27,270
because at the beginning when I first

00:01:25,619 --> 00:01:29,090
started looking into it I had no idea

00:01:27,270 --> 00:01:33,540
what I was doing

00:01:29,090 --> 00:01:35,610
okay I've been working at threads for

00:01:33,540 --> 00:01:38,909
the past year and we've been working on

00:01:35,610 --> 00:01:41,970
building a CMS we knew we wanted the CMS

00:01:38,909 --> 00:01:43,890
to allow for concurrent editing so

00:01:41,970 --> 00:01:45,270
multiple users working on what is

00:01:43,890 --> 00:01:47,880
essentially the same document at the

00:01:45,270 --> 00:01:50,700
same time and I did a lot of research on

00:01:47,880 --> 00:01:52,560
the subject and I'm not afraid to say

00:01:50,700 --> 00:01:55,799
that I felt at the beginning completely

00:01:52,560 --> 00:01:57,689
out of my depth but now that I do get it

00:01:55,799 --> 00:01:59,310
what I'd like to do is share that

00:01:57,689 --> 00:02:04,229
understanding and that's kind of mainly

00:01:59,310 --> 00:02:05,969
what the talk is about so this isn't

00:02:04,229 --> 00:02:08,599
about getting used to use a certain

00:02:05,969 --> 00:02:12,750
piece of code but I'm also giving you a

00:02:08,599 --> 00:02:14,239
vocabulary of concepts that you can use

00:02:12,750 --> 00:02:17,099
to

00:02:14,239 --> 00:02:20,430
build-your-own sorts of concurrent

00:02:17,099 --> 00:02:22,170
editing systems so that they're

00:02:20,430 --> 00:02:23,370
concurrent editing with Jason patch and

00:02:22,170 --> 00:02:25,469
operational transformation is the

00:02:23,370 --> 00:02:27,060
solution that we arrived at but let's

00:02:25,469 --> 00:02:31,560
take a look at that piece by piece and

00:02:27,060 --> 00:02:34,680
how we got to the solution so what is

00:02:31,560 --> 00:02:36,090
concurrent editing it's multiple users

00:02:34,680 --> 00:02:38,819
working on the same document at the same

00:02:36,090 --> 00:02:40,790
time it can be what it requires

00:02:38,819 --> 00:02:45,389
real-time or at least semi real-time

00:02:40,790 --> 00:02:48,560
updates of other users changes so it

00:02:45,389 --> 00:02:51,349
could be a text document it could be a

00:02:48,560 --> 00:02:55,769
JSON document it could be a list of

00:02:51,349 --> 00:02:59,269
complex objects and it's become

00:02:55,769 --> 00:03:03,989
essentially an expectation in online

00:02:59,269 --> 00:03:05,909
CMS's so most document editors that you

00:03:03,989 --> 00:03:10,560
use online or the the big ones like

00:03:05,909 --> 00:03:12,359
Google Docs draw IO flowcharts and

00:03:10,560 --> 00:03:14,189
things like that they they kind of have

00:03:12,359 --> 00:03:19,019
some kind of concurrent editing as

00:03:14,189 --> 00:03:22,260
standard it's just an expectation so why

00:03:19,019 --> 00:03:24,900
did we need concurrent editing well we

00:03:22,260 --> 00:03:28,709
needed to build the CMS and having built

00:03:24,900 --> 00:03:32,189
a very complex CMS before at the mail

00:03:28,709 --> 00:03:36,290
online I've had my fair share of

00:03:32,189 --> 00:03:38,729
avoiding implementing concurrent editing

00:03:36,290 --> 00:03:40,590
we had stakeholders repeatedly telling

00:03:38,729 --> 00:03:42,060
us that we didn't need concurrent

00:03:40,590 --> 00:03:43,470
editing that they didn't want people to

00:03:42,060 --> 00:03:45,810
be working on the same document at the

00:03:43,470 --> 00:03:49,049
same time and you know it's not very

00:03:45,810 --> 00:03:50,220
agile to do big design up front you

00:03:49,049 --> 00:03:53,970
don't want to write code that you're not

00:03:50,220 --> 00:03:55,409
going to need and so you know we avoided

00:03:53,970 --> 00:03:57,689
it but then one day the big boss comes

00:03:55,409 --> 00:03:59,939
over and says he wants to be able to

00:03:57,689 --> 00:04:02,419
edit the headlines of stories while

00:03:59,939 --> 00:04:05,009
journalists are editing the story itself

00:04:02,419 --> 00:04:06,540
because he likes to micromanage you

00:04:05,009 --> 00:04:08,280
really it's all about I mean if you've

00:04:06,540 --> 00:04:10,500
seen my online headlines they like this

00:04:08,280 --> 00:04:14,519
big so it's it takes some effort to get

00:04:10,500 --> 00:04:16,500
those so suddenly we think okay how do

00:04:14,519 --> 00:04:17,699
we do this and we implement a hack

00:04:16,500 --> 00:04:19,109
because we've never thought about it

00:04:17,699 --> 00:04:21,180
from the very beginning it's not been

00:04:19,109 --> 00:04:23,849
part of our consideration so you have to

00:04:21,180 --> 00:04:25,979
kind of build in a hack if you don't

00:04:23,849 --> 00:04:27,210
have concurrent editing you have to have

00:04:25,979 --> 00:04:28,680
some kind of locking

00:04:27,210 --> 00:04:31,650
and locking is not as simple as it seems

00:04:28,680 --> 00:04:32,910
either locking documents and then people

00:04:31,650 --> 00:04:35,400
want to have people want to be able to

00:04:32,910 --> 00:04:37,470
override a lock on a document and and

00:04:35,400 --> 00:04:38,940
then what happens to you know you have

00:04:37,470 --> 00:04:40,080
permission levels and what happens to

00:04:38,940 --> 00:04:43,800
the person who got booted from the

00:04:40,080 --> 00:04:45,479
article it becomes a whole mess so you

00:04:43,800 --> 00:04:47,729
think this is a solved problem right I

00:04:45,479 --> 00:04:49,800
mean there's Google there's big players

00:04:47,729 --> 00:04:52,560
they all like to open-source surely this

00:04:49,800 --> 00:04:56,250
is just a piece of a library we can pick

00:04:52,560 --> 00:04:58,319
up and and just run with it well for

00:04:56,250 --> 00:05:02,940
specific use cases I found a lot of good

00:04:58,319 --> 00:05:04,380
solutions like rich text editing if I'm

00:05:02,940 --> 00:05:06,930
remembering correctly I think it was

00:05:04,380 --> 00:05:08,849
Proust Mirror does amazing concurrent

00:05:06,930 --> 00:05:11,580
editing that's great but not so much for

00:05:08,849 --> 00:05:13,080
arbitrary data structures and then there

00:05:11,580 --> 00:05:15,720
are some solutions that require a big

00:05:13,080 --> 00:05:18,960
buy-in and also kind of handing over

00:05:15,720 --> 00:05:20,729
your the ownership of your data in a way

00:05:18,960 --> 00:05:22,470
and especially the way your data is

00:05:20,729 --> 00:05:24,210
stored it's it becomes opaque to you

00:05:22,470 --> 00:05:26,520
rather than you know understanding

00:05:24,210 --> 00:05:28,770
what's going on and having having it be

00:05:26,520 --> 00:05:31,430
transparent so it sounds like we're

00:05:28,770 --> 00:05:33,870
being really picky so what did we want

00:05:31,430 --> 00:05:36,539
ultimately we wanted to do the minimal

00:05:33,870 --> 00:05:37,889
amount of work that we could to give

00:05:36,539 --> 00:05:42,539
ourselves flexibility while moving

00:05:37,889 --> 00:05:45,090
forward we wanted to keep it as simple

00:05:42,539 --> 00:05:47,490
as possible in an agile sense we wanted

00:05:45,090 --> 00:05:50,969
to own our data and control it we wanted

00:05:47,490 --> 00:05:54,810
to keep it flexible so some fairly

00:05:50,969 --> 00:05:56,669
simple underlying way of storing data

00:05:54,810 --> 00:05:58,740
but everything else on top just acts

00:05:56,669 --> 00:06:02,130
like a normal app we wanted to

00:05:58,740 --> 00:06:04,020
understand how it's working we wanted to

00:06:02,130 --> 00:06:07,110
keep data eventually consistent across

00:06:04,020 --> 00:06:10,530
multiple users and as I said before we

00:06:07,110 --> 00:06:13,620
need to support multi sorry arbitrary

00:06:10,530 --> 00:06:17,909
JSON data structures so what were the

00:06:13,620 --> 00:06:22,800
options well I had a look into a few

00:06:17,909 --> 00:06:24,300
different ways of managing concurrent

00:06:22,800 --> 00:06:27,330
editing or managing diffs between

00:06:24,300 --> 00:06:29,880
different users conflict-free replicated

00:06:27,330 --> 00:06:33,090
data types are very interesting what

00:06:29,880 --> 00:06:34,919
they essentially do is they create

00:06:33,090 --> 00:06:38,460
change they have algorithms for applying

00:06:34,919 --> 00:06:39,990
changes to things and they do it in such

00:06:38,460 --> 00:06:40,860
a way that you can never have conflict

00:06:39,990 --> 00:06:43,889
and

00:06:40,860 --> 00:06:45,330
I do not want to explain it because I

00:06:43,889 --> 00:06:47,099
barely understood it and now I've

00:06:45,330 --> 00:06:49,229
forgotten it but it's interesting to

00:06:47,099 --> 00:06:51,509
look into but it's more for giant

00:06:49,229 --> 00:06:55,620
distributed systems like Redis and react

00:06:51,509 --> 00:06:58,139
it's it's for when you've got many many

00:06:55,620 --> 00:06:59,430
nodes and there is no one true owner the

00:06:58,139 --> 00:07:01,050
idea is all the changes become

00:06:59,430 --> 00:07:05,189
commutative so they can be applied in

00:07:01,050 --> 00:07:07,020
any order and just the fact that they're

00:07:05,189 --> 00:07:09,210
all changes were commutative that alone

00:07:07,020 --> 00:07:10,889
made me want to find out how you know

00:07:09,210 --> 00:07:14,029
what do they mean by that but I'll let

00:07:10,889 --> 00:07:16,830
you guys look that up in your own time

00:07:14,029 --> 00:07:19,259
so next was differential synchronization

00:07:16,830 --> 00:07:21,659
which is what get and SVN does and this

00:07:19,259 --> 00:07:24,150
is very good at giving a lot of context

00:07:21,659 --> 00:07:26,759
for changes it's good but it requires

00:07:24,150 --> 00:07:28,620
manual intervention and ultimately we

00:07:26,759 --> 00:07:31,560
didn't want that and we don't need that

00:07:28,620 --> 00:07:34,289
level of granularity in the documents

00:07:31,560 --> 00:07:36,150
were editing so find the operational

00:07:34,289 --> 00:07:39,449
transformations which is used for Google

00:07:36,150 --> 00:07:42,449
Docs and so let's look into that one in

00:07:39,449 --> 00:07:47,759
more detail so I think this is the only

00:07:42,449 --> 00:07:48,870
wall of text in the presentation but I'm

00:07:47,759 --> 00:07:51,000
just gonna quickly read it out

00:07:48,870 --> 00:07:52,650
so operational transformation is an

00:07:51,000 --> 00:07:55,349
algorithm or technique for the

00:07:52,650 --> 00:07:56,849
transformation of operations such that

00:07:55,349 --> 00:07:58,589
they can be applied to documents whose

00:07:56,849 --> 00:08:01,349
states have diverged bringing them both

00:07:58,589 --> 00:08:03,089
up to the same state so every change or

00:08:01,349 --> 00:08:05,250
an insertion or a deletion is

00:08:03,089 --> 00:08:08,099
represented as an operation like a

00:08:05,250 --> 00:08:09,839
single thing and the operation can be

00:08:08,099 --> 00:08:11,759
applied to the current state to bring it

00:08:09,839 --> 00:08:13,919
up to the new state and then you also

00:08:11,759 --> 00:08:16,439
have to have a way to transform those

00:08:13,919 --> 00:08:18,599
operations if they need to be changed

00:08:16,439 --> 00:08:22,500
because of previous changes that have

00:08:18,599 --> 00:08:25,349
not been accounted for so I've done a

00:08:22,500 --> 00:08:27,089
little animation that hopefully will

00:08:25,349 --> 00:08:31,830
simplify that a bit so let's say the

00:08:27,089 --> 00:08:35,159
server has ABC in its state client one

00:08:31,830 --> 00:08:38,909
comes along and inserts an X at position

00:08:35,159 --> 00:08:42,300
0 now client 2 without knowing about

00:08:38,909 --> 00:08:45,149
client ones change wants to insert a Y

00:08:42,300 --> 00:08:46,440
at position 2 but more correctly it

00:08:45,149 --> 00:08:48,420
doesn't want it doesn't care about what

00:08:46,440 --> 00:08:50,640
position is what we care about is

00:08:48,420 --> 00:08:52,860
context and preserving the intent of the

00:08:50,640 --> 00:08:53,720
change the intent is to put a Y between

00:08:52,860 --> 00:08:55,459
B and C

00:08:53,720 --> 00:08:59,420
that's kind of the more important part

00:08:55,459 --> 00:09:01,490
of this so when that goes into the

00:08:59,420 --> 00:09:05,170
server the server will transform that

00:09:01,490 --> 00:09:08,360
change it has to know the changes that

00:09:05,170 --> 00:09:09,620
client who didn't know about so it knows

00:09:08,360 --> 00:09:12,620
that it didn't know about this first

00:09:09,620 --> 00:09:15,370
insert so it just bumps the index up to

00:09:12,620 --> 00:09:18,259
three and then it can send that back to

00:09:15,370 --> 00:09:19,790
client one will send that over to client

00:09:18,259 --> 00:09:22,279
one so client one gets up to date and

00:09:19,790 --> 00:09:25,970
send the change back along with the

00:09:22,279 --> 00:09:28,459
missing change to client to and client

00:09:25,970 --> 00:09:30,230
two may have optimistically applied that

00:09:28,459 --> 00:09:34,540
first change but it can roll it back and

00:09:30,230 --> 00:09:38,829
now reapply those to insert operations

00:09:34,540 --> 00:09:41,540
so why was ot the right solution for us

00:09:38,829 --> 00:09:43,399
it can resolve all types of conflicts in

00:09:41,540 --> 00:09:45,319
an acceptable way without human

00:09:43,399 --> 00:09:47,800
intervention and that's acceptable to

00:09:45,319 --> 00:09:50,180
ours not necessarily to every use case

00:09:47,800 --> 00:09:52,790
it's good at preserving the intent of

00:09:50,180 --> 00:09:55,279
changes once again not perfect

00:09:52,790 --> 00:09:58,100
a human intent is you know going to be a

00:09:55,279 --> 00:10:00,740
bit mystic for what is essentially an

00:09:58,100 --> 00:10:02,209
algorithm but it's a you know you can

00:10:00,740 --> 00:10:05,449
tell it can figure out the array

00:10:02,209 --> 00:10:06,769
positions and things like that it works

00:10:05,449 --> 00:10:09,319
well with the central source of data

00:10:06,769 --> 00:10:11,990
which was fine for us and it can handle

00:10:09,319 --> 00:10:14,149
offline working okay I put okay because

00:10:11,990 --> 00:10:16,610
once again if you're working offline for

00:10:14,149 --> 00:10:20,240
a while without getting updates you may

00:10:16,610 --> 00:10:21,559
be working on a whole piece of data that

00:10:20,240 --> 00:10:24,649
someone's essentially gone and deleted

00:10:21,559 --> 00:10:28,029
you know so the more the longer you stay

00:10:24,649 --> 00:10:30,620
offline the less useful it's going to be

00:10:28,029 --> 00:10:32,540
it works well with a series of changes

00:10:30,620 --> 00:10:35,089
as the source of truth so that's another

00:10:32,540 --> 00:10:36,589
thing to give ourselves flexibility in

00:10:35,089 --> 00:10:40,100
the future if we ever wanted to roll

00:10:36,589 --> 00:10:42,589
back a document to a point in time or we

00:10:40,100 --> 00:10:45,410
wanted to very simply implement undo and

00:10:42,589 --> 00:10:47,689
redo we wanted to represent and persist

00:10:45,410 --> 00:10:51,319
our documents a series of changes rather

00:10:47,689 --> 00:10:54,980
than here's your document we update it

00:10:51,319 --> 00:10:58,160
there's the document again okay so that

00:10:54,980 --> 00:11:01,670
worked for us as well and it's

00:10:58,160 --> 00:11:02,990
relatively easy to reason about finally

00:11:01,670 --> 00:11:05,240
on to Jason patch where does that come

00:11:02,990 --> 00:11:07,490
in well Jason patch is a format for

00:11:05,240 --> 00:11:10,100
describing changes in Jason

00:11:07,490 --> 00:11:12,790
so it's kind of seems perfect it's

00:11:10,100 --> 00:11:17,179
essentially the operations in

00:11:12,790 --> 00:11:18,050
operational transformations and finally

00:11:17,179 --> 00:11:20,629
enough that's actually what they call

00:11:18,050 --> 00:11:23,540
them so you can see that Opie add an

00:11:20,629 --> 00:11:24,519
Opie copy move replace that that stands

00:11:23,540 --> 00:11:30,139
for operation

00:11:24,519 --> 00:11:31,279
so Jason patch is its standardized it's

00:11:30,139 --> 00:11:34,670
a standardized way of representing

00:11:31,279 --> 00:11:36,920
changes it's serializable modifiable

00:11:34,670 --> 00:11:38,990
very easily modifiable it's just a Jason

00:11:36,920 --> 00:11:42,550
which essentially becomes a JavaScript

00:11:38,990 --> 00:11:45,319
object it's familiar to those who use it

00:11:42,550 --> 00:11:47,269
readable and easily reversible as long

00:11:45,319 --> 00:11:51,379
as you record the old value whenever

00:11:47,269 --> 00:11:53,240
you're operating on a value you can kind

00:11:51,379 --> 00:11:55,699
of run through the whole stack back and

00:11:53,240 --> 00:12:00,139
forth and you know bring your document

00:11:55,699 --> 00:12:01,639
inline with any point in time and yeah

00:12:00,139 --> 00:12:03,199
so you actually find it makes it easier

00:12:01,639 --> 00:12:04,850
to reason about operational

00:12:03,199 --> 00:12:09,470
transformations when you're representing

00:12:04,850 --> 00:12:13,959
them in jet as Jason patches so how it

00:12:09,470 --> 00:12:16,429
works between server and client here so

00:12:13,959 --> 00:12:18,699
knowledge sharing and feedback is very

00:12:16,429 --> 00:12:20,839
important to us at threads styling so a

00:12:18,699 --> 00:12:23,420
lot of big projects when we kicked them

00:12:20,839 --> 00:12:24,860
off will have group discussions someone

00:12:23,420 --> 00:12:26,869
may be working on it but they'll share

00:12:24,860 --> 00:12:28,730
their findings and their their their

00:12:26,869 --> 00:12:31,249
approach with the rest of the team and

00:12:28,730 --> 00:12:33,799
these diagrams essentially what I showed

00:12:31,249 --> 00:12:38,959
to the team very early on about about a

00:12:33,799 --> 00:12:40,759
year ago now so in this case I do

00:12:38,959 --> 00:12:42,949
realize I wrote initial document but

00:12:40,759 --> 00:12:45,439
actually what that initial document is

00:12:42,949 --> 00:12:47,990
is a list of changes and the server may

00:12:45,439 --> 00:12:49,369
be storing snapshots of the document at

00:12:47,990 --> 00:12:53,149
different points in time in order to

00:12:49,369 --> 00:12:54,439
speed up you know in in order to speed

00:12:53,149 --> 00:12:55,579
it up but you wouldn't even need to you

00:12:54,439 --> 00:12:57,110
could just have the check the list of

00:12:55,579 --> 00:12:59,540
operations and at any point you can pull

00:12:57,110 --> 00:13:03,259
together the entire document by just

00:12:59,540 --> 00:13:06,559
applying them all to each other so that

00:13:03,259 --> 00:13:08,899
document gets sent over to the client in

00:13:06,559 --> 00:13:12,290
the meantime client is minding its own

00:13:08,899 --> 00:13:13,939
business and some other changes are

00:13:12,290 --> 00:13:15,860
being accepted are being sent over by

00:13:13,939 --> 00:13:17,720
someone else who's editing the document

00:13:15,860 --> 00:13:20,149
as you can see their changes are being

00:13:17,720 --> 00:13:21,170
stacked up there notice we have a change

00:13:20,149 --> 00:13:23,509
ID so

00:13:21,170 --> 00:13:26,660
when it sends over the initial state

00:13:23,509 --> 00:13:29,119
from the server it sends over the last

00:13:26,660 --> 00:13:32,569
known change ID as well which the the

00:13:29,119 --> 00:13:35,420
client knows about now so the client now

00:13:32,569 --> 00:13:38,449
comes along and says okay I need to make

00:13:35,420 --> 00:13:40,069
I need to add a slide at slide two and

00:13:38,449 --> 00:13:43,489
it's going to be an object with the

00:13:40,069 --> 00:13:45,169
title of my slide is the best it also

00:13:43,489 --> 00:13:49,399
sends along the last known change ID

00:13:45,169 --> 00:13:50,809
with it also at this point the client

00:13:49,399 --> 00:13:52,609
may have optimistically applied that

00:13:50,809 --> 00:13:56,419
change to say okay look this should be

00:13:52,609 --> 00:13:58,759
fine the server gets hold of that change

00:13:56,419 --> 00:14:02,059
it finds every change that happened

00:13:58,759 --> 00:14:04,369
since the last known change ID and then

00:14:02,059 --> 00:14:07,399
it transforms that new change against

00:14:04,369 --> 00:14:09,019
all previous unknown changes that's

00:14:07,399 --> 00:14:11,089
where the library comes in that we've

00:14:09,019 --> 00:14:13,489
built that we wrote and it's fairly

00:14:11,089 --> 00:14:16,249
really quite simple but that's kind of

00:14:13,489 --> 00:14:17,689
the main part of the main interesting

00:14:16,249 --> 00:14:19,040
part of the logic so it transforms it

00:14:17,689 --> 00:14:21,259
has a bunch of rules for what it does

00:14:19,040 --> 00:14:24,139
with indices and with different values

00:14:21,259 --> 00:14:28,040
and then it changed so you can see it

00:14:24,139 --> 00:14:30,559
changed it to slide 3 rather than slide

00:14:28,040 --> 00:14:34,179
2 and it sends it all back over to the

00:14:30,559 --> 00:14:38,480
client who can then roll back the

00:14:34,179 --> 00:14:44,649
erroneous change and then reapply all

00:14:38,480 --> 00:14:48,439
those new changes it's just received so

00:14:44,649 --> 00:14:49,939
yeah so this means that you can not only

00:14:48,439 --> 00:14:52,639
do you have concurrent editing but

00:14:49,939 --> 00:14:56,029
handling something like undo and redo is

00:14:52,639 --> 00:14:58,009
a real breeze and also having built for

00:14:56,029 --> 00:15:00,589
CMS without considering undo and redo

00:14:58,009 --> 00:15:04,039
before I can say that that is really

00:15:00,589 --> 00:15:07,459
painful so it's a it's nice free there

00:15:04,039 --> 00:15:08,509
freebie there and another cool thing is

00:15:07,459 --> 00:15:10,669
that if you want to if you want to

00:15:08,509 --> 00:15:11,839
create snapshots of your document over

00:15:10,669 --> 00:15:14,209
time if you want to give users the

00:15:11,839 --> 00:15:18,109
ability to say oh I'm gonna save this

00:15:14,209 --> 00:15:19,970
but you know keep on working it's as

00:15:18,109 --> 00:15:21,799
simple as a pointer to the change ID

00:15:19,970 --> 00:15:25,639
that's that's your document at that

00:15:21,799 --> 00:15:30,110
point in time so what this all has led

00:15:25,639 --> 00:15:34,160
to is a library called threads Jason

00:15:30,110 --> 00:15:36,440
patch ot so

00:15:34,160 --> 00:15:38,420
you can try it you can go and try that

00:15:36,440 --> 00:15:41,569
out of course there's an example there's

00:15:38,420 --> 00:15:44,740
also an example client-server project

00:15:41,569 --> 00:15:47,000
which we'll have a look at in a second

00:15:44,740 --> 00:15:49,720
but basically I would just quickly show

00:15:47,000 --> 00:15:57,980
you what the code looks like inside that

00:15:49,720 --> 00:15:58,880
the example so we have we have a what is

00:15:57,980 --> 00:16:05,000
this book

00:15:58,880 --> 00:16:06,560
okay so we have react components that

00:16:05,000 --> 00:16:08,540
look something like this there they have

00:16:06,560 --> 00:16:11,630
all of their different so this is a book

00:16:08,540 --> 00:16:13,009
in a list of books you can move the book

00:16:11,630 --> 00:16:15,350
up you can move it down you can delete

00:16:13,009 --> 00:16:17,680
you can change the title the author the

00:16:15,350 --> 00:16:20,509
color for some reason my book has color

00:16:17,680 --> 00:16:24,500
and you can say whether or not it's in

00:16:20,509 --> 00:16:26,420
stock I've created a change handler that

00:16:24,500 --> 00:16:29,990
basically generates JSON patches and

00:16:26,420 --> 00:16:31,639
sends them off to the server and so you

00:16:29,990 --> 00:16:34,250
can pretty much see the the correlation

00:16:31,639 --> 00:16:38,300
there between move and delete and what

00:16:34,250 --> 00:16:40,459
sort of operations they're creating the

00:16:38,300 --> 00:16:45,170
main parts of the server are very simple

00:16:40,459 --> 00:16:49,430
there's the main get request the get

00:16:45,170 --> 00:16:55,430
simply gets all of the operations the

00:16:49,430 --> 00:16:58,279
the for this particular document it

00:16:55,430 --> 00:16:59,779
applies them against an empty object and

00:16:58,279 --> 00:17:02,240
so all of those changes and those are

00:16:59,779 --> 00:17:03,740
all JSON op je tsongkhapa ratings will

00:17:02,240 --> 00:17:05,630
be applied to this empty document and

00:17:03,740 --> 00:17:07,789
you'll come out with your actual initial

00:17:05,630 --> 00:17:10,669
with your actual state of the document

00:17:07,789 --> 00:17:13,039
so that's your result it then returns

00:17:10,669 --> 00:17:15,650
the result the resulting new document

00:17:13,039 --> 00:17:20,299
and the last known operation ID to the

00:17:15,650 --> 00:17:23,720
client the client will receive that and

00:17:20,299 --> 00:17:28,580
can display it in in in the react client

00:17:23,720 --> 00:17:32,390
and the other route is the post route

00:17:28,580 --> 00:17:35,330
which is where we send our changes to so

00:17:32,390 --> 00:17:37,190
this is also fairly simple it's simply

00:17:35,330 --> 00:17:38,510
getting the last known operation ID

00:17:37,190 --> 00:17:41,840
which has been sent along with the

00:17:38,510 --> 00:17:47,090
request it pulls out the patch which is

00:17:41,840 --> 00:17:47,870
a list of operations it gets all of the

00:17:47,090 --> 00:17:48,980
known all the

00:17:47,870 --> 00:17:51,710
operations that it knows about the

00:17:48,980 --> 00:17:54,020
server and slices them at the last night

00:17:51,710 --> 00:17:55,430
operation ID so this is obviously all a

00:17:54,020 --> 00:17:57,800
very simple implementation where we're

00:17:55,430 --> 00:18:02,240
just keeping a list of operations in

00:17:57,800 --> 00:18:05,680
memory or whatever but it then does

00:18:02,240 --> 00:18:08,240
adjacent patch ot does the JSON patch ot

00:18:05,680 --> 00:18:11,330
function where you pass in the unknown

00:18:08,240 --> 00:18:13,520
changes the brand-new patch there's one

00:18:11,330 --> 00:18:16,970
option there which is accepted wins on

00:18:13,520 --> 00:18:21,020
equal path so this is the this is

00:18:16,970 --> 00:18:25,670
basically if a if you do a replace on

00:18:21,020 --> 00:18:27,020
path a which one wins and and one of the

00:18:25,670 --> 00:18:28,670
previous unknown changes has done a

00:18:27,020 --> 00:18:31,220
replace there as well is that the newest

00:18:28,670 --> 00:18:33,200
thing or given that the new thing didn't

00:18:31,220 --> 00:18:36,290
know about that old change is it the old

00:18:33,200 --> 00:18:38,290
thing so simple as that that returns you

00:18:36,290 --> 00:18:41,450
that gets you back your transform patch

00:18:38,290 --> 00:18:42,980
that gets pushed on to operations so

00:18:41,450 --> 00:18:45,470
that line is essentially committing this

00:18:42,980 --> 00:18:48,110
and saying this is brand new known

00:18:45,470 --> 00:18:51,830
operations these are with persisting

00:18:48,110 --> 00:18:54,530
these now and then it returns back to

00:18:51,830 --> 00:18:56,300
the client the changes to apply which is

00:18:54,530 --> 00:18:58,760
made up of unknown changes and transform

00:18:56,300 --> 00:19:01,820
patch and the brand new last known

00:18:58,760 --> 00:19:06,490
operation ID so with that amount of code

00:19:01,820 --> 00:19:09,350
we essentially get a concurrent editing

00:19:06,490 --> 00:19:12,050
system so I'm gonna see if I can never

00:19:09,350 --> 00:19:13,610
get my way around now doing everything

00:19:12,050 --> 00:19:16,250
backwards but I've just started my

00:19:13,610 --> 00:19:20,240
server this is the Jason patch example

00:19:16,250 --> 00:19:21,920
that you should have a link to well

00:19:20,240 --> 00:19:24,520
sorry that you'll be able to check out

00:19:21,920 --> 00:19:24,520
in your own time

00:19:26,440 --> 00:19:31,809
yes I'm actually going to open up some

00:19:31,990 --> 00:19:35,780
that the main thing like when it comes

00:19:34,580 --> 00:19:37,220
to looking at the code to be better just

00:19:35,780 --> 00:19:40,880
to check it out online so I'm just going

00:19:37,220 --> 00:19:48,559
to open up these this is essentially the

00:19:40,880 --> 00:19:50,730
app so this is awkward and can I go

00:19:48,559 --> 00:19:55,480
paste

00:19:50,730 --> 00:19:58,570
yeah so basically everything's happening

00:19:55,480 --> 00:19:59,830
on the server if the the client I can do

00:19:58,570 --> 00:20:01,360
it in this case because I don't have to

00:19:59,830 --> 00:20:03,130
optimistically apply anything I can wait

00:20:01,360 --> 00:20:07,270
till I get my response and then apply it

00:20:03,130 --> 00:20:10,080
so it's really very simple so if for

00:20:07,270 --> 00:20:13,810
example here we change the color to

00:20:10,080 --> 00:20:16,480
something else and on this other client

00:20:13,810 --> 00:20:18,220
we decide we're going to change this it

00:20:16,480 --> 00:20:20,250
updates because it got the unknown

00:20:18,220 --> 00:20:25,140
changes now in that case there was no

00:20:20,250 --> 00:20:36,180
what do you call it there's no conflict

00:20:25,140 --> 00:20:42,220
so if we add a few more okay so now oh

00:20:36,180 --> 00:20:46,770
yeah yeah so now if we think oh yeah

00:20:42,220 --> 00:20:46,770
so if I go and change the title of this

00:20:49,470 --> 00:20:55,690
but I delete one up here essentially

00:20:54,160 --> 00:20:57,610
it's going to be sending to the wrong

00:20:55,690 --> 00:21:03,940
path oh sorry I've got to do it over

00:20:57,610 --> 00:21:05,950
here so I'm gonna delete this one yes

00:21:03,940 --> 00:21:09,550
and because that didn't know about the

00:21:05,950 --> 00:21:14,050
one that was missing okay anyway and now

00:21:09,550 --> 00:21:17,140
if I hit OK you can see that it did

00:21:14,050 --> 00:21:18,250
change the correct one now I think about

00:21:17,140 --> 00:21:21,460
its probably difficult for you to tell

00:21:18,250 --> 00:21:25,090
because they all say enter title but you

00:21:21,460 --> 00:21:26,530
can have to trust me on this so yeah

00:21:25,090 --> 00:21:29,410
that's just you know you can play around

00:21:26,530 --> 00:21:31,840
with it yourself in terms of I've got

00:21:29,410 --> 00:21:34,720
one issue on the repo which is that we

00:21:31,840 --> 00:21:38,110
could do more to handle move operations

00:21:34,720 --> 00:21:40,210
so if I'm editing an object in a list

00:21:38,110 --> 00:21:41,860
and someone moves that exact object

00:21:40,210 --> 00:21:43,900
somewhere else there's no reason we

00:21:41,860 --> 00:21:45,160
can't deal with that at the moment it

00:21:43,900 --> 00:21:46,300
just ignores your changes because it

00:21:45,160 --> 00:21:48,550
doesn't know how to deal with it but

00:21:46,300 --> 00:21:51,100
there's no reason we couldn't actually

00:21:48,550 --> 00:21:55,120
apply those changes to the new position

00:21:51,100 --> 00:21:56,590
of the of the object you are moving it

00:21:55,120 --> 00:21:59,280
hasn't been needed in the project we're

00:21:56,590 --> 00:22:03,760
working on because we've essentially

00:21:59,280 --> 00:22:06,010
split up out we have an array that

00:22:03,760 --> 00:22:09,280
the order of the objects and then we

00:22:06,010 --> 00:22:11,500
have a hash that has all of the objects

00:22:09,280 --> 00:22:13,780
actually someone did tell oh and I don't

00:22:11,500 --> 00:22:15,430
have internet so I can't do it

00:22:13,780 --> 00:22:19,390
someone did tell me that it's easier to

00:22:15,430 --> 00:22:21,850
talk this through actually if I show you

00:22:19,390 --> 00:22:23,590
a picture of that app in you know

00:22:21,850 --> 00:22:24,400
because it's kind of a little bit

00:22:23,590 --> 00:22:28,000
abstract

00:22:24,400 --> 00:22:37,330
I appreciate let's see how I go

00:22:28,000 --> 00:22:49,690
oh there we go yes and I said I can do a

00:22:37,330 --> 00:22:54,240
fake name fake email it's not gonna get

00:22:49,690 --> 00:22:54,240
away with that am i that's too fake

00:22:55,970 --> 00:23:01,490
oh yeah okay Jay at goo-goo-goo it's

00:22:59,629 --> 00:23:05,289
gonna be looking office and I showed in

00:23:01,490 --> 00:23:05,289
if it worked anyway

00:23:10,119 --> 00:23:16,269
storia maker no it doesn't work

00:23:13,299 --> 00:23:19,419
nevermind basically it's a bit like

00:23:16,269 --> 00:23:20,709
Instagram you have but imagine in Steven

00:23:19,419 --> 00:23:24,519
instagrams story where you have one

00:23:20,709 --> 00:23:26,019
story we wanted to give our users the

00:23:24,519 --> 00:23:27,489
ability to create multiple like

00:23:26,019 --> 00:23:29,949
long-running stories with multiple

00:23:27,489 --> 00:23:32,439
slides so multiple slides overlay

00:23:29,949 --> 00:23:34,599
elements text that you can rotate and

00:23:32,439 --> 00:23:38,139
stuff like this but we wanted to also

00:23:34,599 --> 00:23:42,719
allow them to work on it concurrently so

00:23:38,139 --> 00:23:42,719
going back to my presentation

00:23:45,209 --> 00:23:51,549
yep that's so that's me

00:23:47,619 --> 00:23:54,999
we are slowly but surely trying to build

00:23:51,549 --> 00:23:57,879
up our tech profile threads engine our

00:23:54,999 --> 00:24:03,069
Twitter we've been we recently did an

00:23:57,879 --> 00:24:06,219
open source meet up with I really like

00:24:03,069 --> 00:24:10,629
oh I don't know just a major player in

00:24:06,219 --> 00:24:13,599
the open source world he's at Gaius he

00:24:10,629 --> 00:24:15,939
has been talking about his open source

00:24:13,599 --> 00:24:18,489
journey and giving them just an amazing

00:24:15,939 --> 00:24:21,339
amount of hints and tips on how to build

00:24:18,489 --> 00:24:24,329
an open source community so if you go to

00:24:21,339 --> 00:24:27,549
our meetup page through meetup comm or

00:24:24,329 --> 00:24:31,659
threads of beers slash meet up we have

00:24:27,549 --> 00:24:33,989
our own URL shortener then you can go

00:24:31,659 --> 00:24:36,039
there I put the link to the video it's

00:24:33,989 --> 00:24:37,629
filmed on an iPhone because we're still

00:24:36,039 --> 00:24:39,639
not sorted that we haven't sorted out

00:24:37,629 --> 00:24:41,499
this level of professionalism yet but

00:24:39,639 --> 00:24:47,080
it's full of content full of really good

00:24:41,499 --> 00:24:53,859
useful tips yeah so that's me thanks

00:24:47,080 --> 00:24:53,859

YouTube URL: https://www.youtube.com/watch?v=zmSFjI1ny9M


