Title: TypeScript it's Time to Migrate - London Node User Group - February 2019
Publication date: 2019-03-11
Playlist: London Node User Group
Description: 
	Marco Talento

TypeScript adoption: it's been a reality in the last years. This presentation is going to be a demonstration on how we can take advantage of the TypeScript compiler to have a smooth migration from JavaScript to TypeScript.

Marco is a Software Engineer that believes software must be simple, intuitive and reliable. Currently working at Beamery. https://twitter.com/Talento90
_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,060 --> 00:00:05,460
so a Marco and today I'm going to talk

00:00:02,970 --> 00:00:07,919
about how can we migrate from JavaScript

00:00:05,460 --> 00:00:12,120
to typescript I'm not going to compare

00:00:07,919 --> 00:00:14,099
both of them but I think using some

00:00:12,120 --> 00:00:17,090
strategies we can take the old vintages

00:00:14,099 --> 00:00:20,660
of using typescript even not writing

00:00:17,090 --> 00:00:23,279
typescript which is which is good so

00:00:20,660 --> 00:00:26,210
let's first talk about typescript

00:00:23,279 --> 00:00:29,400
so the motto is JavaScript ed scales I

00:00:26,210 --> 00:00:31,560
will start by just giving a brief

00:00:29,400 --> 00:00:35,969
introduction about typescript and how it

00:00:31,560 --> 00:00:38,600
works so typescript is a superset of

00:00:35,969 --> 00:00:41,730
JavaScript that compiles to JavaScript

00:00:38,600 --> 00:00:44,520
so basically we write typescript with

00:00:41,730 --> 00:00:46,620
all fancy features and types and then it

00:00:44,520 --> 00:00:52,140
compiles to plain in human readable

00:00:46,620 --> 00:00:54,989
JavaScript it includes all features from

00:00:52,140 --> 00:00:59,910
Acme script 6-7 and much more like types

00:00:54,989 --> 00:01:03,390
interfaces Union Union types generics so

00:00:59,910 --> 00:01:09,240
basically we have a cube 5x 6 and

00:01:03,390 --> 00:01:11,280
then we have typescript so how to type

00:01:09,240 --> 00:01:15,330
script so how can we start using

00:01:11,280 --> 00:01:17,490
typescript so first we just install type

00:01:15,330 --> 00:01:20,159
script as a normal dependency you just

00:01:17,490 --> 00:01:25,200
install it as a dependency we can also

00:01:20,159 --> 00:01:27,600
resolve it globally if we have some kind

00:01:25,200 --> 00:01:32,340
of external dependencies we just install

00:01:27,600 --> 00:01:34,979
them as also like a normal package at

00:01:32,340 --> 00:01:37,020
this case I'm installing the node

00:01:34,979 --> 00:01:38,790
declarations so if you are in the know

00:01:37,020 --> 00:01:41,460
environment and you need to access like

00:01:38,790 --> 00:01:43,829
the node libraries and the node

00:01:41,460 --> 00:01:47,909
properties you need to install these

00:01:43,829 --> 00:01:52,049
declarations so then we create our type

00:01:47,909 --> 00:01:55,729
script file then we compile it using the

00:01:52,049 --> 00:01:57,990
TSC common so we can specify some

00:01:55,729 --> 00:01:59,880
arguments to the compiler at the

00:01:57,990 --> 00:02:04,439
specific case I'm just saying that I

00:01:59,880 --> 00:02:06,689
want to compile to Acme script 6 and

00:02:04,439 --> 00:02:08,729
then it generates our JavaScript file

00:02:06,689 --> 00:02:12,629
and we can just run it as a normal

00:02:08,729 --> 00:02:13,440
JavaScript so here is an example

00:02:12,629 --> 00:02:16,110
I hope you

00:02:13,440 --> 00:02:19,220
see so as you can see we are using like

00:02:16,110 --> 00:02:22,890
interfaces types abstract classes

00:02:19,220 --> 00:02:25,380
protected visibility so lots of features

00:02:22,890 --> 00:02:26,640
that are not supported in JavaScript so

00:02:25,380 --> 00:02:29,790
what do you think that's going to happen

00:02:26,640 --> 00:02:31,620
when we try to compile this code do you

00:02:29,790 --> 00:02:34,860
think that it will generate extra code

00:02:31,620 --> 00:02:38,370
to emulate the for example protected

00:02:34,860 --> 00:02:40,110
behavior well the answer is no it's just

00:02:38,370 --> 00:02:42,270
compiles to plain and very human

00:02:40,110 --> 00:02:44,760
readable JavaScript sometimes it

00:02:42,270 --> 00:02:48,600
generates better JavaScript and some

00:02:44,760 --> 00:02:51,990
developers which is good and it does not

00:02:48,600 --> 00:02:55,230
generate any extra code that might have

00:02:51,990 --> 00:02:58,050
performance issues so it generates very

00:02:55,230 --> 00:03:04,530
performant JavaScript and human readable

00:02:58,050 --> 00:03:06,000
as you can see so declaration files what

00:03:04,530 --> 00:03:07,770
our declaration files basically

00:03:06,000 --> 00:03:10,550
declaration files are files that

00:03:07,770 --> 00:03:13,230
describes library written in JavaScript

00:03:10,550 --> 00:03:15,240
it just describes the methods in

00:03:13,230 --> 00:03:19,470
properties because the behavior is

00:03:15,240 --> 00:03:22,050
already in the JavaScript library so it

00:03:19,470 --> 00:03:24,990
provides intelligence and module

00:03:22,050 --> 00:03:26,910
typification that's why when we import

00:03:24,990 --> 00:03:28,860
when we install a declaration file we

00:03:26,910 --> 00:03:34,410
have the intellisense and all the types

00:03:28,860 --> 00:03:36,150
of that library so it gives us extra

00:03:34,410 --> 00:03:38,340
confidence when we are applied in the

00:03:36,150 --> 00:03:41,760
library so for example imagine that we

00:03:38,340 --> 00:03:45,239
are using library version 1 and we want

00:03:41,760 --> 00:03:47,370
to apply to version 2 so usually what we

00:03:45,239 --> 00:03:49,620
need to do is go to the documentation

00:03:47,370 --> 00:03:53,190
see the breaking changes and try to find

00:03:49,620 --> 00:03:55,620
in our code where things are breaking so

00:03:53,190 --> 00:03:59,100
having type script and declarations we

00:03:55,620 --> 00:04:00,930
can just install the new declarations we

00:03:59,100 --> 00:04:02,940
compile our code and it will

00:04:00,930 --> 00:04:05,310
automatically report all the errors in

00:04:02,940 --> 00:04:07,950
our code where things are breaking so it

00:04:05,310 --> 00:04:13,220
gives us like really extra confidence of

00:04:07,950 --> 00:04:15,420
the I think libraries other thing is

00:04:13,220 --> 00:04:17,609
declarations are too fixed by the loggia

00:04:15,420 --> 00:04:20,760
so that's why some projects that are

00:04:17,609 --> 00:04:23,370
already embracing the typescript you can

00:04:20,760 --> 00:04:25,970
find some ddotty as files is from the

00:04:23,370 --> 00:04:25,970
declarations

00:04:26,270 --> 00:04:33,230
and we just install it as a normal

00:04:28,780 --> 00:04:36,080
dependency as a dev dependency so here

00:04:33,230 --> 00:04:39,530
is an example this is the code F

00:04:36,080 --> 00:04:42,920
definitions so basically as you can see

00:04:39,530 --> 00:04:45,470
in the response object we have started

00:04:42,920 --> 00:04:48,980
message body so there is only properties

00:04:45,470 --> 00:04:50,690
and methods here on the bottom so there

00:04:48,980 --> 00:04:53,690
is no behavior because the behavior is

00:04:50,690 --> 00:04:55,850
already in the JavaScript library that's

00:04:53,690 --> 00:04:58,970
why when we install the declarations and

00:04:55,850 --> 00:05:01,540
we try to access an object we have the

00:04:58,970 --> 00:05:06,020
old intelligence it's from this

00:05:01,540 --> 00:05:09,470
declaration file developer experience so

00:05:06,020 --> 00:05:12,880
using typescript it really give you give

00:05:09,470 --> 00:05:17,330
us like a better developer experience

00:05:12,880 --> 00:05:20,419
types prevent bugs so if you write this

00:05:17,330 --> 00:05:23,030
code and somehow you just are passing

00:05:20,419 --> 00:05:26,240
the wrong tribe to a function or you

00:05:23,030 --> 00:05:28,760
just misspell writing method well let's

00:05:26,240 --> 00:05:30,350
be honest I think everyone have just

00:05:28,760 --> 00:05:33,919
misspelled writing a method or a

00:05:30,350 --> 00:05:37,250
property so if we try to compile this we

00:05:33,919 --> 00:05:39,500
get immediately feedback instead of just

00:05:37,250 --> 00:05:42,919
having feedback in runtime so it can

00:05:39,500 --> 00:05:46,780
save us from some bugs if we don't have

00:05:42,919 --> 00:05:51,530
proper testing so this is a fast way to

00:05:46,780 --> 00:05:53,560
prevent some issues refactor code so

00:05:51,530 --> 00:05:56,270
refactoring code it's much easier

00:05:53,560 --> 00:05:59,180
basically we just rename a property and

00:05:56,270 --> 00:06:01,790
it will find all places where we are

00:05:59,180 --> 00:06:05,210
using that type and it will change in

00:06:01,790 --> 00:06:07,340
all places where we are using that time

00:06:05,210 --> 00:06:11,419
which is awesome if we are refactoring a

00:06:07,340 --> 00:06:15,710
huge application intellisense so once

00:06:11,419 --> 00:06:19,040
again since now we have declarations we

00:06:15,710 --> 00:06:26,240
have this experience which is really

00:06:19,040 --> 00:06:27,950
nice and now that we know the basics of

00:06:26,240 --> 00:06:30,530
all types read more or less let's talk

00:06:27,950 --> 00:06:32,990
about migration so how can we migrate

00:06:30,530 --> 00:06:36,680
our JavaScript applications from

00:06:32,990 --> 00:06:38,120
JavaScript to typescript so let's define

00:06:36,680 --> 00:06:43,310
our goal

00:06:38,120 --> 00:06:46,430
I have a simple web server written in

00:06:43,310 --> 00:06:49,850
JavaScript and the goal is to migrate to

00:06:46,430 --> 00:06:55,100
the type script so we can find the code

00:06:49,850 --> 00:06:58,370
here feel free to check out so let's

00:06:55,100 --> 00:07:02,270
define a plan first we need to install

00:06:58,370 --> 00:07:04,340
type script as obvious then we need to

00:07:02,270 --> 00:07:07,400
install the declarations in this

00:07:04,340 --> 00:07:09,250
specific example since we are in the

00:07:07,400 --> 00:07:12,680
node environment I need to install the

00:07:09,250 --> 00:07:18,860
node declarations and also the happy I'm

00:07:12,680 --> 00:07:19,520
using happiest framework then we run the

00:07:18,860 --> 00:07:22,389
TSC

00:07:19,520 --> 00:07:26,000
- - you need this common basically

00:07:22,389 --> 00:07:28,760
initializes typescript configuration

00:07:26,000 --> 00:07:32,060
file so instead of passing all the

00:07:28,760 --> 00:07:34,990
compiler options via argument we can

00:07:32,060 --> 00:07:39,169
specify the options inside this file

00:07:34,990 --> 00:07:42,680
then we need to enable this option so

00:07:39,169 --> 00:07:44,720
allow GS this tells to the typescript

00:07:42,680 --> 00:07:46,940
compiler so instead of just looking at

00:07:44,720 --> 00:07:52,039
the typescript files now you are also

00:07:46,940 --> 00:07:54,500
compiling the JavaScript and optionally

00:07:52,039 --> 00:07:57,770
we can also enable this option so the

00:07:54,500 --> 00:07:59,599
jobs these options means you are trying

00:07:57,770 --> 00:08:02,360
to find some errors in the JavaScript

00:07:59,599 --> 00:08:06,190
and I will explain how the types with

00:08:02,360 --> 00:08:09,050
compiler will find errors in JavaScript

00:08:06,190 --> 00:08:15,020
and then we just start with naming our

00:08:09,050 --> 00:08:17,990
GS - TS we fix errors and backspin until

00:08:15,020 --> 00:08:24,830
we just my regular application so let's

00:08:17,990 --> 00:08:27,160
stop talking and let's do a demo maybe I

00:08:24,830 --> 00:08:27,160
need to

00:08:29,289 --> 00:08:40,550
can you see Jason so as you can see I

00:08:36,800 --> 00:08:43,580
just have a P so it's the JavaScript web

00:08:40,550 --> 00:08:46,390
framework library it's already in the

00:08:43,580 --> 00:08:48,520
version 18 but still

00:08:46,390 --> 00:08:51,730
and then as they have dependencies I

00:08:48,520 --> 00:08:54,820
have typed script and no declarations

00:08:51,730 --> 00:08:58,600
and epi declarations so and then I just

00:08:54,820 --> 00:09:06,370
created a few scripts to help me compile

00:08:58,600 --> 00:09:09,480
the code so no magic here now as I

00:09:06,370 --> 00:09:15,460
mentioned before I have initialized the

00:09:09,480 --> 00:09:17,320
compiler options file and let's show the

00:09:15,460 --> 00:09:24,690
code so basically it is like a web

00:09:17,320 --> 00:09:24,690
server just I will just run the server o

00:09:29,280 --> 00:09:40,990
[Music]

00:09:31,350 --> 00:09:48,100
source index so well it's just a dummy

00:09:40,990 --> 00:09:54,460
API that we turn some make the screen

00:09:48,100 --> 00:09:57,760
bigger just just return some tests so

00:09:54,460 --> 00:10:00,700
our server is running it's working it's

00:09:57,760 --> 00:10:02,770
written in JavaScript right now so

00:10:00,700 --> 00:10:04,720
everyone is happy so let's start

00:10:02,770 --> 00:10:08,410
migrating our application to the

00:10:04,720 --> 00:10:11,280
typescript I will just choose this file

00:10:08,410 --> 00:10:16,510
it's where I'm just creating the server

00:10:11,280 --> 00:10:20,380
so what I need to do is basically we

00:10:16,510 --> 00:10:22,950
write we name to type script and now

00:10:20,380 --> 00:10:27,040
instead of using this way to export

00:10:22,950 --> 00:10:35,590
using typescript way to export things

00:10:27,040 --> 00:10:38,260
and let's try to compile this and well

00:10:35,590 --> 00:10:40,510
as you can see it generated a folder

00:10:38,260 --> 00:10:44,500
here it's like our destination folder

00:10:40,510 --> 00:10:45,490
and in as you can see we just have the

00:10:44,500 --> 00:10:50,740
typescript file

00:10:45,490 --> 00:10:52,510
so it's missing the job project so we

00:10:50,740 --> 00:10:56,080
also need to include the JavaScript

00:10:52,510 --> 00:10:59,410
files so we go to our configuration file

00:10:56,080 --> 00:11:01,529
and now we say that I want to enable

00:10:59,410 --> 00:11:06,990
this option

00:11:01,529 --> 00:11:10,360
and I will try to compile it again okay

00:11:06,990 --> 00:11:15,910
now in the dist folder we have the old

00:11:10,360 --> 00:11:18,279
application cool but okay yeah we just

00:11:15,910 --> 00:11:22,930
converted a file it's let's check if

00:11:18,279 --> 00:11:24,999
it's to working now I can run the NPM

00:11:22,930 --> 00:11:29,910
start because it's pointing to the

00:11:24,999 --> 00:11:33,009
destination folder okay it's running

00:11:29,910 --> 00:11:38,170
well not a big deal let's make things

00:11:33,009 --> 00:11:40,089
interesting right now so I want to know

00:11:38,170 --> 00:11:42,399
that we are using typescript I want to

00:11:40,089 --> 00:11:47,019
use typescript to analyze our JavaScript

00:11:42,399 --> 00:11:50,050
code I'm going to just enable this

00:11:47,019 --> 00:11:56,589
option and now the typescript compiler

00:11:50,050 --> 00:11:59,199
will also analyze our JavaScript and it

00:11:56,589 --> 00:12:03,639
will try to find some errors so it seems

00:11:59,199 --> 00:12:06,370
that we have two errors you well the

00:12:03,639 --> 00:12:09,250
first one it says that type number is

00:12:06,370 --> 00:12:12,420
not assignable to type boolean so in

00:12:09,250 --> 00:12:15,730
this file basically we are passing a

00:12:12,420 --> 00:12:18,670
number instead of a boolean but how

00:12:15,730 --> 00:12:20,620
typescript knows this is an error so

00:12:18,670 --> 00:12:24,250
basically typescript analyzed the GS

00:12:20,620 --> 00:12:27,309
talk here I define the GS talk as a good

00:12:24,250 --> 00:12:30,910
JavaScript programmer we should write

00:12:27,309 --> 00:12:33,939
comments and write Jeff talks so in here

00:12:30,910 --> 00:12:36,639
in my task here is how we define types

00:12:33,939 --> 00:12:39,790
in GS talk I'm saying that my object

00:12:36,639 --> 00:12:43,209
task has a property then that is a

00:12:39,790 --> 00:12:46,269
boolean and we were passing a number so

00:12:43,209 --> 00:12:50,290
the typescript compiler analyzed the GS

00:12:46,269 --> 00:12:54,069
talk and its reporting an error so now

00:12:50,290 --> 00:12:56,079
we can fix this so we find an error in

00:12:54,069 --> 00:13:01,059
our JavaScript code and it's still

00:12:56,079 --> 00:13:03,670
JavaScript so let's fix the other

00:13:01,059 --> 00:13:08,860
problem argument of type string is not

00:13:03,670 --> 00:13:10,899
assignable of parameter number so if we

00:13:08,860 --> 00:13:13,480
go to this folder the controller folder

00:13:10,899 --> 00:13:14,080
is complaining that we are passing a

00:13:13,480 --> 00:13:18,339
string

00:13:14,080 --> 00:13:21,339
and yet method once again because of we

00:13:18,339 --> 00:13:25,120
have J stock it's saying that it's

00:13:21,339 --> 00:13:28,740
expecting a number but how typescript

00:13:25,120 --> 00:13:31,450
knows that that params ID is a string

00:13:28,740 --> 00:13:35,230
because we have installed the happy

00:13:31,450 --> 00:13:38,050
declarations so if we jump to the

00:13:35,230 --> 00:13:39,760
declarations it says that param is a

00:13:38,050 --> 00:13:42,190
dictionary of strings that's why when we

00:13:39,760 --> 00:13:45,100
access this property it's saying that

00:13:42,190 --> 00:13:48,730
it's a string so in here we can see the

00:13:45,100 --> 00:13:53,490
old definitions of the request object

00:13:48,730 --> 00:13:53,490
and all variables and types and

00:13:53,640 --> 00:14:01,149
typescript basically knows how to read

00:13:57,940 --> 00:14:01,800
those files and report errors so to fix

00:14:01,149 --> 00:14:05,440
this

00:14:01,800 --> 00:14:07,750
we just need to convert this property to

00:14:05,440 --> 00:14:16,750
a number let's just trust that is a

00:14:07,750 --> 00:14:18,790
number so let's run it again and well we

00:14:16,750 --> 00:14:23,290
don't have problems which is right so we

00:14:18,790 --> 00:14:26,440
fix two issues in our JavaScript code so

00:14:23,290 --> 00:14:31,240
if we didn't have proper testing we

00:14:26,440 --> 00:14:34,709
couldn't find these errors easily so but

00:14:31,240 --> 00:14:39,970
let's make things even more interesting

00:14:34,709 --> 00:14:42,610
let's go to our TS config file and it

00:14:39,970 --> 00:14:46,450
seems that we have some cool options

00:14:42,610 --> 00:14:49,600
here so basically it is is like strict

00:14:46,450 --> 00:14:52,860
type checking options and here we can

00:14:49,600 --> 00:14:56,020
find like more rules to our typescript

00:14:52,860 --> 00:14:58,810
compiler so for example strict null

00:14:56,020 --> 00:15:02,440
checks a strict function types the end

00:14:58,810 --> 00:15:05,740
there is more options so by enabling

00:15:02,440 --> 00:15:12,100
these options let's check if we can find

00:15:05,740 --> 00:15:16,060
more problems well yes we found more

00:15:12,100 --> 00:15:21,040
problems so object is possibly undefined

00:15:16,060 --> 00:15:24,459
this one is sketchies it might have some

00:15:21,040 --> 00:15:27,190
trouble with this one so how typescript

00:15:24,459 --> 00:15:29,650
knows this once again

00:15:27,190 --> 00:15:31,720
here in the GS talks it says that this

00:15:29,650 --> 00:15:34,540
method it might return a tough or

00:15:31,720 --> 00:15:36,670
undefined so and if it's undefined we

00:15:34,540 --> 00:15:38,380
are accessing an object that it can be

00:15:36,670 --> 00:15:41,980
undefined and we can have a problem in

00:15:38,380 --> 00:15:43,990
runtime and our server could just stop

00:15:41,980 --> 00:15:46,690
running and our customers would complain

00:15:43,990 --> 00:15:52,180
so let's fix this and let's check that

00:15:46,690 --> 00:15:55,930
task is not undefined so and as you can

00:15:52,180 --> 00:15:58,330
see this is still JavaScript so we can

00:15:55,930 --> 00:16:01,510
just like write type script as we want

00:15:58,330 --> 00:16:04,180
and if we write proper GS Docs and if we

00:16:01,510 --> 00:16:06,310
tell declarations we can still have the

00:16:04,180 --> 00:16:11,080
Albany benefits of the typescript

00:16:06,310 --> 00:16:15,040
compiler so let's just I don't know

00:16:11,080 --> 00:16:18,520
refactor another one let's change this

00:16:15,040 --> 00:16:23,050
one so as you can see here I don't have

00:16:18,520 --> 00:16:26,530
any kind of intelligence but sis now we

00:16:23,050 --> 00:16:33,190
are using typescript I can just change

00:16:26,530 --> 00:16:36,400
this to error type and now when I access

00:16:33,190 --> 00:16:40,110
this object I have all properties of the

00:16:36,400 --> 00:16:43,510
error type let's just print the message

00:16:40,110 --> 00:16:45,940
so right now we have some kind of hybrid

00:16:43,510 --> 00:16:47,890
application some files are in JavaScript

00:16:45,940 --> 00:16:52,210
and files are in typescript I'm not

00:16:47,890 --> 00:16:57,400
going to change the all files but let's

00:16:52,210 --> 00:17:02,950
just test this let's make sure that I

00:16:57,400 --> 00:17:08,800
compile it we don't have problems

00:17:02,950 --> 00:17:13,210
I just compile it now it's still working

00:17:08,800 --> 00:17:15,100
so at the end it just generates plain

00:17:13,210 --> 00:17:18,840
JavaScript that node knows how to

00:17:15,100 --> 00:17:22,000
interpret so here you can see that the

00:17:18,840 --> 00:17:26,770
generated JavaScript is very human

00:17:22,000 --> 00:17:30,130
readable and the JavaScript that was

00:17:26,770 --> 00:17:32,890
compiled it's basically the compiler

00:17:30,130 --> 00:17:36,670
just copied a JavaScript and for example

00:17:32,890 --> 00:17:38,710
it forces you use strict which is one

00:17:36,670 --> 00:17:40,480
good practice when we are using

00:17:38,710 --> 00:17:45,220
javascript

00:17:40,480 --> 00:17:47,769
so there is like no magic behind so in

00:17:45,220 --> 00:17:50,169
we can this way we can easily smooth

00:17:47,769 --> 00:17:52,720
migrating our JavaScript to to type

00:17:50,169 --> 00:17:54,789
script so new features could use

00:17:52,720 --> 00:17:57,100
typescript and we could like slowly

00:17:54,789 --> 00:17:59,919
migrate the old features to - typescript

00:17:57,100 --> 00:18:02,110
or we can just stick with JavaScript and

00:17:59,919 --> 00:18:03,820
our team is still using javascript

00:18:02,110 --> 00:18:06,279
but if we install the typescript

00:18:03,820 --> 00:18:08,440
compiler we can find some potential

00:18:06,279 --> 00:18:13,360
errors in our code which I think it's

00:18:08,440 --> 00:18:15,549
it's good and the effort is not be I

00:18:13,360 --> 00:18:18,070
think just installing the typescript in

00:18:15,549 --> 00:18:22,750
the declarations and run the the

00:18:18,070 --> 00:18:25,779
typescript compiler so let's just recap

00:18:22,750 --> 00:18:29,409
recap so converting JavaScript files to

00:18:25,779 --> 00:18:31,870
typescript lists and enable the allow GS

00:18:29,409 --> 00:18:34,409
flag so this flag says to the typescript

00:18:31,870 --> 00:18:38,620
compiler to also compile the JavaScript

00:18:34,409 --> 00:18:41,409
to our destination folder then

00:18:38,620 --> 00:18:43,929
optionally if we want to take advantage

00:18:41,409 --> 00:18:45,850
of the typescript compiler in the GS

00:18:43,929 --> 00:18:49,269
dogs in the declarations we enable the

00:18:45,850 --> 00:18:52,960
checks yes property and is flag or

00:18:49,269 --> 00:18:54,700
option take advantage of the things that

00:18:52,960 --> 00:18:57,309
I have mentioned and it tries to find

00:18:54,700 --> 00:19:00,580
some errors and if you want to be even

00:18:57,309 --> 00:19:03,279
more picky we can enable the three type

00:19:00,580 --> 00:19:04,690
checking options and if you'll find even

00:19:03,279 --> 00:19:07,960
more problems in our code for example

00:19:04,690 --> 00:19:13,720
the new strict problem that we had

00:19:07,960 --> 00:19:16,870
before and basically that's it so

00:19:13,720 --> 00:19:19,389
basically what happens if we are using a

00:19:16,870 --> 00:19:21,940
JavaScript library that does not have

00:19:19,389 --> 00:19:22,240
declaration files there is no problem at

00:19:21,940 --> 00:19:24,399
all

00:19:22,240 --> 00:19:26,350
we can just install that library and we

00:19:24,399 --> 00:19:28,659
can use it in our job in our typescript

00:19:26,350 --> 00:19:34,500
code but we don't have typed we just use

00:19:28,659 --> 00:19:35,710
it as we do in JavaScript exactly well

00:19:34,500 --> 00:19:38,350
exactly

00:19:35,710 --> 00:19:40,269
so it's written as a JavaScript because

00:19:38,350 --> 00:19:42,190
at the end type script it will compile

00:19:40,269 --> 00:19:45,639
to JavaScript so everything is

00:19:42,190 --> 00:19:48,190
compatible with JavaScript well what I

00:19:45,639 --> 00:19:50,769
recommend for those cases is if you know

00:19:48,190 --> 00:19:53,289
the the library we you can contribute to

00:19:50,769 --> 00:19:53,950
the community or you could just like

00:19:53,289 --> 00:19:55,540
easily

00:19:53,950 --> 00:19:58,090
that library and create your own

00:19:55,540 --> 00:20:00,970
interfaces and then the rest of your

00:19:58,090 --> 00:20:04,859
code will have types

00:20:00,970 --> 00:20:04,859

YouTube URL: https://www.youtube.com/watch?v=QKODewVlGWw


