Title: David Khourshid: Reactive Animations with CSS Variables - JSConf Iceland 2016
Publication date: 2016-09-15
Playlist: JSConf Iceland 2016
Description: 
	CSS variables are here, and they're much more powerful than you think. In this presentation, we will explore the many possibilities with mixing RxJS with CSS variables, including how they can be used to bring your web projects to life with dynamic animations that react to user input. And yes, there will be plenty of demos.

UI animations can be an incredible asset to the user experience, especially if they are meaningful and responsive to user input. Native mobile app developers know this all too well, so how can we incorporate similar animations to the web to create an appealing user experience?

With the help of RxJS and CSS Variables, we can! In this talk, you will learn about:

What reactive animations are
How CSS Variables work
What Observables are and how they model reactive user input
How RxJS + CSS Variables can work together to create performant, reactive animations in your web apps
Recreating native mobile interactions for the web
Clever tricks and tips, and plenty of demos
Captions: 
	00:00:12,580 --> 00:00:18,529
everyone my name is David course she'd

00:00:15,470 --> 00:00:20,869
and believe it or not animation is an

00:00:18,529 --> 00:00:23,360
extremely important part of the user

00:00:20,869 --> 00:00:25,220
experience in fact there's a lot of you

00:00:23,360 --> 00:00:27,260
here right now this is probably the most

00:00:25,220 --> 00:00:28,880
amount of people I've talked to but many

00:00:27,260 --> 00:00:31,160
of you are here right now because you

00:00:28,880 --> 00:00:34,100
realize that animation is a growing

00:00:31,160 --> 00:00:35,960
trend in both the web and mobile app

00:00:34,100 --> 00:00:39,410
development and this is for good reason

00:00:35,960 --> 00:00:41,659
- animation increases delight reduces

00:00:39,410 --> 00:00:44,480
cognitive load and it could be an

00:00:41,659 --> 00:00:46,879
important factor in your brand when it

00:00:44,480 --> 00:00:49,519
comes to your style guide so a lot of

00:00:46,879 --> 00:00:51,739
developers realize this but so do a lot

00:00:49,519 --> 00:00:55,519
of users if you open an app in your

00:00:51,739 --> 00:00:58,040
iPhone or Android device you will expect

00:00:55,519 --> 00:01:02,930
animations to happen whenever you

00:00:58,040 --> 00:01:06,770
interact with the app so um my name is

00:01:02,930 --> 00:01:10,479
David as I said and I live in Florida

00:01:06,770 --> 00:01:10,479
which is right about there

00:01:11,390 --> 00:01:16,820
and this is actually pretty exciting

00:01:14,810 --> 00:01:20,960
because I met Jay has come to you

00:01:16,820 --> 00:01:23,240
partially talking about CSS which all of

00:01:20,960 --> 00:01:24,680
you are familiar with this is pretty

00:01:23,240 --> 00:01:29,329
much where I sat on the airplane I got

00:01:24,680 --> 00:01:32,210
like an hour of sleep so so like most

00:01:29,329 --> 00:01:34,460
front-end developers which I'm guessing

00:01:32,210 --> 00:01:38,090
all of you are either doing a JavaScript

00:01:34,460 --> 00:01:40,789
on the front-end or back-end there's two

00:01:38,090 --> 00:01:43,340
very important technologies that we have

00:01:40,789 --> 00:01:46,729
to work with and that's JavaScript and

00:01:43,340 --> 00:01:48,469
CSS and as front-end developers we know

00:01:46,729 --> 00:01:50,240
that the landscape is constantly

00:01:48,469 --> 00:01:53,359
changing as well

00:01:50,240 --> 00:01:57,200
so we'd love to experiment or at least

00:01:53,359 --> 00:01:59,630
most of us love to experiment and a

00:01:57,200 --> 00:02:04,340
couple years ago I asked myself the

00:01:59,630 --> 00:02:07,460
question what if what if I were to maybe

00:02:04,340 --> 00:02:11,720
not use JavaScript and see what CSS

00:02:07,460 --> 00:02:16,700
could do so this is how I approached

00:02:11,720 --> 00:02:19,670
user interfaces I would look at examples

00:02:16,700 --> 00:02:22,040
on dribble some cool animations and then

00:02:19,670 --> 00:02:22,819
I would try to recreate it as best as I

00:02:22,040 --> 00:02:27,590
could

00:02:22,819 --> 00:02:30,170
using only CSS and so I looked for more

00:02:27,590 --> 00:02:32,090
and more complex examples including ones

00:02:30,170 --> 00:02:34,909
with stateful transitions such as this

00:02:32,090 --> 00:02:39,560
one and with lots of checkbox hacks

00:02:34,909 --> 00:02:42,500
hacks and like target whatever I was

00:02:39,560 --> 00:02:45,889
able to you know recreate it pretty well

00:02:42,500 --> 00:02:47,680
and by the way don't do this these were

00:02:45,889 --> 00:02:50,900
all really fun experiments but

00:02:47,680 --> 00:02:52,730
javascript is good for a lot of things

00:02:50,900 --> 00:02:55,219
and you should probably use JavaScript

00:02:52,730 --> 00:02:58,430
if you want to do interactive animations

00:02:55,219 --> 00:03:02,299
like this I got a bit crazy so you know

00:02:58,430 --> 00:03:06,379
some animations online and I decide to

00:03:02,299 --> 00:03:09,919
recreate them completely in CSS so this

00:03:06,379 --> 00:03:13,310
is one of the animations I made and one

00:03:09,919 --> 00:03:15,889
important thing here is that we have the

00:03:13,310 --> 00:03:18,889
dev tools on the right if I created this

00:03:15,889 --> 00:03:20,870
with just JavaScript we would not get

00:03:18,889 --> 00:03:23,299
this we would not be able to play around

00:03:20,870 --> 00:03:29,329
and interact with all of the elements

00:03:23,299 --> 00:03:32,259
you know in CSS so why do we get this

00:03:29,329 --> 00:03:36,319
with CSS animations and not yet with

00:03:32,259 --> 00:03:38,689
JavaScript animations well it turns out

00:03:36,319 --> 00:03:41,810
that even though CSS could do a lot of

00:03:38,689 --> 00:03:44,209
things it involves a lot of hacks so I

00:03:41,810 --> 00:03:46,909
realize that CSS is not the most

00:03:44,209 --> 00:03:51,169
powerful language and that's why a lot

00:03:46,909 --> 00:03:53,780
of people start flocking to using CSS in

00:03:51,169 --> 00:03:56,479
JavaScript using javascript to apply

00:03:53,780 --> 00:03:59,060
Styles because hey javascript is a much

00:03:56,479 --> 00:04:01,609
more powerful language but here's the

00:03:59,060 --> 00:04:05,090
thing the fact that CSS is not powerful

00:04:01,609 --> 00:04:06,859
is actually a good thing there's this

00:04:05,090 --> 00:04:10,009
principle called the principle of least

00:04:06,859 --> 00:04:12,109
power and it states that you should use

00:04:10,009 --> 00:04:15,349
the least powerful language for

00:04:12,109 --> 00:04:19,430
expressing information constraints or

00:04:15,349 --> 00:04:21,859
programs on the world wide web and the

00:04:19,430 --> 00:04:25,070
principle basically states that powerful

00:04:21,859 --> 00:04:28,490
languages such as JavaScript inhibit

00:04:25,070 --> 00:04:31,490
information reuse and what I mean by

00:04:28,490 --> 00:04:35,860
that is that even though JavaScript

00:04:31,490 --> 00:04:38,410
could do a lot of things the

00:04:35,860 --> 00:04:43,000
the fact of the matter is that CSS

00:04:38,410 --> 00:04:48,280
provides like a limited dynamic library

00:04:43,000 --> 00:04:50,890
that that you could use to express style

00:04:48,280 --> 00:04:52,900
succinctly and JavaScript even though it

00:04:50,890 --> 00:04:55,270
could do everything you're gonna you

00:04:52,900 --> 00:04:57,370
know have a mess in your code if you try

00:04:55,270 --> 00:04:59,890
to define styles in there or try to find

00:04:57,370 --> 00:05:04,750
many things at once so it sort of

00:04:59,890 --> 00:05:06,040
inhibits reuse if you do that so today

00:05:04,750 --> 00:05:08,560
we're going to be talking about two

00:05:06,040 --> 00:05:11,050
things CSS variables and rxjs

00:05:08,560 --> 00:05:15,030
observables how many of you are familiar

00:05:11,050 --> 00:05:19,180
with CSS variables all right how about

00:05:15,030 --> 00:05:21,400
observables all right few less people if

00:05:19,180 --> 00:05:23,560
you don't know anything about any of

00:05:21,400 --> 00:05:24,430
these two that's okay we're going to go

00:05:23,560 --> 00:05:27,400
over them

00:05:24,430 --> 00:05:29,560
from scratch and sort of just do a quick

00:05:27,400 --> 00:05:31,270
deep dive into both of them and then

00:05:29,560 --> 00:05:34,120
we're going to understand how they could

00:05:31,270 --> 00:05:35,860
actually work together now I know the

00:05:34,120 --> 00:05:38,920
title of my talk is called reactive

00:05:35,860 --> 00:05:41,350
animations with CSS variables but I'm

00:05:38,920 --> 00:05:45,430
not going to be talking about react in

00:05:41,350 --> 00:05:47,410
this talk unfortunately however the good

00:05:45,430 --> 00:05:49,420
news is that the techniques that you

00:05:47,410 --> 00:05:52,840
learn here you could apply to any

00:05:49,420 --> 00:05:57,130
framework react angular ember or any of

00:05:52,840 --> 00:06:03,310
those other dead ones I'm kidding now

00:05:57,130 --> 00:06:05,920
react is good angular is great and CSS

00:06:03,310 --> 00:06:08,080
and JavaScript sort of seem at two

00:06:05,920 --> 00:06:10,570
different ends of the spectrum we have

00:06:08,080 --> 00:06:13,120
custom properties being very much a CSS

00:06:10,570 --> 00:06:15,100
thing and observables being very much a

00:06:13,120 --> 00:06:17,710
JavaScript thing so today you're gonna

00:06:15,100 --> 00:06:20,890
get sort of a taste of both and we're

00:06:17,710 --> 00:06:24,070
going to for whatever reason try to mix

00:06:20,890 --> 00:06:28,150
them together so through all this you

00:06:24,070 --> 00:06:30,940
might be asking yourself why why do we

00:06:28,150 --> 00:06:34,390
want to do this why do we want to mix

00:06:30,940 --> 00:06:37,650
you know CSS and JavaScript together in

00:06:34,390 --> 00:06:40,090
this way and the reason is because

00:06:37,650 --> 00:06:46,780
frankly you can make a lot of really

00:06:40,090 --> 00:06:49,180
cool animations using that we have right

00:06:46,780 --> 00:06:51,639
now a system

00:06:49,180 --> 00:06:54,250
doing things in JavaScript where it's

00:06:51,639 --> 00:06:57,250
imperative and by imperative it means

00:06:54,250 --> 00:06:59,680
we're telling JavaScript exactly what's

00:06:57,250 --> 00:07:02,380
to do how to apply each style to the

00:06:59,680 --> 00:07:05,139
element and because of that we can't

00:07:02,380 --> 00:07:07,800
either a quickly and we can't quickly

00:07:05,139 --> 00:07:10,539
create user interfaces that are rich in

00:07:07,800 --> 00:07:13,600
interaction and animation such as the

00:07:10,539 --> 00:07:15,300
ones you see here and I'm a little

00:07:13,600 --> 00:07:18,039
jealous of mobile developers because

00:07:15,300 --> 00:07:20,800
Android and iOS developers they

00:07:18,039 --> 00:07:23,530
basically get the tools to do this for

00:07:20,800 --> 00:07:28,270
free and us and the web were sort of

00:07:23,530 --> 00:07:30,789
left in the dark so let's first dive

00:07:28,270 --> 00:07:33,970
into how animations are currently done

00:07:30,789 --> 00:07:35,830
we have CSS animations which look like

00:07:33,970 --> 00:07:38,470
this most of you are familiar with this

00:07:35,830 --> 00:07:41,710
there's two types transitions and

00:07:38,470 --> 00:07:43,919
animations transitions are good from

00:07:41,710 --> 00:07:47,110
when you're going from point A to B and

00:07:43,919 --> 00:07:49,900
maybe going back from point B to point A

00:07:47,110 --> 00:07:52,930
and animations are good when you want to

00:07:49,900 --> 00:07:54,849
define explicit steps or keyframes in

00:07:52,930 --> 00:07:58,270
your animations so that it does a

00:07:54,849 --> 00:08:01,120
certain behavior that you want the

00:07:58,270 --> 00:08:03,789
beauty about this is that CSS animations

00:08:01,120 --> 00:08:06,039
are declarative they're reusable they're

00:08:03,789 --> 00:08:08,680
also really legible I mean you could

00:08:06,039 --> 00:08:10,990
read this and know exactly what's going

00:08:08,680 --> 00:08:13,650
on also these are built into the browser

00:08:10,990 --> 00:08:16,240
so you don't need any external library

00:08:13,650 --> 00:08:18,820
to pull in in order to get these

00:08:16,240 --> 00:08:21,699
animations supports also pretty good it

00:08:18,820 --> 00:08:24,280
goes back to IE 9 I believe for

00:08:21,699 --> 00:08:28,419
animations and hopefully no one uses ie

00:08:24,280 --> 00:08:31,330
8 anyway CSS animations can also be

00:08:28,419 --> 00:08:34,779
offloaded to the global processing unit

00:08:31,330 --> 00:08:37,169
the GPU which means they are not going

00:08:34,779 --> 00:08:38,979
to be choked up by the main thread

00:08:37,169 --> 00:08:41,169
especially if you're using a framework

00:08:38,979 --> 00:08:44,169
like react or angular we're using the

00:08:41,169 --> 00:08:46,300
main thread for a lot of things so it's

00:08:44,169 --> 00:08:50,220
best to you know keep things such as

00:08:46,300 --> 00:08:54,670
styling an animation off that thread

00:08:50,220 --> 00:08:57,010
also we could use selectors media

00:08:54,670 --> 00:09:00,220
queries and other things like that to

00:08:57,010 --> 00:09:03,100
define our animations so we could keep

00:09:00,220 --> 00:09:04,900
that separate from from the Dom

00:09:03,100 --> 00:09:07,330
so that when elements appear and

00:09:04,900 --> 00:09:10,420
disappear we don't have to keep track of

00:09:07,330 --> 00:09:12,880
those in CSS but also this has issues

00:09:10,420 --> 00:09:15,100
one of the big issue is that CSS

00:09:12,880 --> 00:09:17,770
animations are not dynamic

00:09:15,100 --> 00:09:21,220
we can't change these on the fly we

00:09:17,770 --> 00:09:24,070
can't for example set this translate Y

00:09:21,220 --> 00:09:26,260
value to anything other than 50% or

00:09:24,070 --> 00:09:28,570
anything other than the static value and

00:09:26,260 --> 00:09:30,700
they're pretty difficult to compose so

00:09:28,570 --> 00:09:33,670
if you want one animation to go after

00:09:30,700 --> 00:09:36,880
the other that's not the easiest thing

00:09:33,670 --> 00:09:39,610
trust me I've done it I've tried it's

00:09:36,880 --> 00:09:44,020
it's a pain in the ass it keeps me up at

00:09:39,610 --> 00:09:46,540
night so we also have JavaScript

00:09:44,020 --> 00:09:50,650
animations and this is the web

00:09:46,540 --> 00:09:52,900
animations API which is a pretty recent

00:09:50,650 --> 00:09:55,210
spec and it's actually really awesome

00:09:52,900 --> 00:09:58,150
because it is supported in mainstream

00:09:55,210 --> 00:10:01,600
browsers today and it looks almost

00:09:58,150 --> 00:10:04,060
exactly like the CSS animations example

00:10:01,600 --> 00:10:07,120
and that's because it pretty much is it

00:10:04,060 --> 00:10:09,880
uses the same underlying constructs in

00:10:07,120 --> 00:10:12,670
order to make the animations so this is

00:10:09,880 --> 00:10:15,790
the exact same animation we saw and this

00:10:12,670 --> 00:10:18,310
is offloaded from the main thread to the

00:10:15,790 --> 00:10:22,090
GPU so this is going to be really fast

00:10:18,310 --> 00:10:23,680
really performant and the beauty is that

00:10:22,090 --> 00:10:27,160
because it's in JavaScript

00:10:23,680 --> 00:10:31,060
it's dynamic we could add this to any

00:10:27,160 --> 00:10:35,950
element we could tell it to start till

00:10:31,060 --> 00:10:38,200
to stop whenever we want but the web

00:10:35,950 --> 00:10:40,360
animations API is not really supported

00:10:38,200 --> 00:10:45,220
in Internet Explorer but that's okay

00:10:40,360 --> 00:10:47,860
because nothing is there's also dynamic

00:10:45,220 --> 00:10:49,660
JavaScript animations too and this is

00:10:47,860 --> 00:10:52,210
sort of the problem that we're going to

00:10:49,660 --> 00:10:55,750
be tackling today this is how we do them

00:10:52,210 --> 00:10:59,080
today we use requestanimationframe which

00:10:55,750 --> 00:11:02,740
basically asks the browser which

00:10:59,080 --> 00:11:04,840
animation frame should I do this on so

00:11:02,740 --> 00:11:07,000
that I'm not choking the main thread and

00:11:04,840 --> 00:11:09,850
I'm making sure that my program my

00:11:07,000 --> 00:11:13,240
animations run at 60 frames per second

00:11:09,850 --> 00:11:16,510
and so we run this in the loop sometimes

00:11:13,240 --> 00:11:20,200
or we run this on events

00:11:16,510 --> 00:11:22,210
such as this one so over here we're

00:11:20,200 --> 00:11:26,050
moving the mouse and whenever we move

00:11:22,210 --> 00:11:28,540
the mouse we get a weekend events back

00:11:26,050 --> 00:11:32,260
and from that event we could grab the

00:11:28,540 --> 00:11:34,270
X&Y position from the mouse and we're

00:11:32,260 --> 00:11:37,570
directly applying it to the style of the

00:11:34,270 --> 00:11:40,960
box this is inline Styles this is bad

00:11:37,570 --> 00:11:42,880
for many reasons first of all inline

00:11:40,960 --> 00:11:45,460
styles are going to override any other

00:11:42,880 --> 00:11:48,040
styles you have it's hard to configure

00:11:45,460 --> 00:11:50,290
them you can't put it in the media query

00:11:48,040 --> 00:11:52,840
well actually you could you could listen

00:11:50,290 --> 00:11:57,460
for the browser resize event and change

00:11:52,840 --> 00:12:00,580
the animation based on that you're also

00:11:57,460 --> 00:12:03,160
updating the Dom a lot and upping the

00:12:00,580 --> 00:12:06,070
Dom is expensive for those of you who've

00:12:03,160 --> 00:12:08,380
heard Lynn's talk it's an expensive

00:12:06,070 --> 00:12:10,690
procedure and that's why react and other

00:12:08,380 --> 00:12:13,570
frameworks try to minimize updating the

00:12:10,690 --> 00:12:16,120
Dom as much as possible by doing this

00:12:13,570 --> 00:12:17,740
you're saying forget that I'm gonna

00:12:16,120 --> 00:12:21,240
update it all the time and there's

00:12:17,740 --> 00:12:25,270
nothing you could do about it also

00:12:21,240 --> 00:12:27,280
because this Dom elements the box has to

00:12:25,270 --> 00:12:30,430
exist at the time that you're adding the

00:12:27,280 --> 00:12:32,590
animation this could also be problematic

00:12:30,430 --> 00:12:36,370
if you're using frameworks such as

00:12:32,590 --> 00:12:38,830
angular react where Dom elements appear

00:12:36,370 --> 00:12:41,140
and disappear they're mounted and

00:12:38,830 --> 00:12:43,810
they're unmounted pretty much all the

00:12:41,140 --> 00:12:46,450
time so the problem with this is that

00:12:43,810 --> 00:12:48,820
you have to keep track of it and you

00:12:46,450 --> 00:12:50,680
have to make sure that when it's added

00:12:48,820 --> 00:12:54,910
back you're adding this event listener

00:12:50,680 --> 00:12:56,800
back on and also if you want to add more

00:12:54,910 --> 00:12:59,020
animations based on the same event

00:12:56,800 --> 00:13:01,720
listener you either have to hard code it

00:12:59,020 --> 00:13:03,880
inside this function right here or you

00:13:01,720 --> 00:13:05,800
have to add another event listener which

00:13:03,880 --> 00:13:07,630
could lead to memory leaks because

00:13:05,800 --> 00:13:12,490
that's a lot of event listeners to keep

00:13:07,630 --> 00:13:16,000
track of all right so let's talk real

00:13:12,490 --> 00:13:18,190
quick about CSS variables in case you

00:13:16,000 --> 00:13:21,370
know you might not know this is how a

00:13:18,190 --> 00:13:24,490
CSS variable is defined its prepended

00:13:21,370 --> 00:13:28,710
with two dashes I don't know why it

00:13:24,490 --> 00:13:29,920
stands out though and in order to use it

00:13:28,710 --> 00:13:32,170
you

00:13:29,920 --> 00:13:34,779
put it inside a selector such as root

00:13:32,170 --> 00:13:36,609
and this is the most common way that

00:13:34,779 --> 00:13:38,949
you're gonna see CSS variables being

00:13:36,609 --> 00:13:43,119
defined because this is going to cascade

00:13:38,949 --> 00:13:49,059
down and be applied to pretty much every

00:13:43,119 --> 00:13:51,730
selector that asks for the color and for

00:13:49,059 --> 00:13:54,189
this you would just put it inside a

00:13:51,730 --> 00:13:58,660
selector and that color is going to be

00:13:54,189 --> 00:14:01,029
applied to any element with you know

00:13:58,660 --> 00:14:04,509
with that class name and of course this

00:14:01,029 --> 00:14:07,119
follows cascading and it also follows

00:14:04,509 --> 00:14:09,100
specificity too so you could do some

00:14:07,119 --> 00:14:11,379
pretty cool things like putting this in

00:14:09,100 --> 00:14:13,119
a media query or putting it as a

00:14:11,379 --> 00:14:15,669
different color in a more specific

00:14:13,119 --> 00:14:19,660
selector so you have a high amounts of

00:14:15,669 --> 00:14:21,999
configurability with this now here's a

00:14:19,660 --> 00:14:24,419
really cool part about CSS variables and

00:14:21,999 --> 00:14:27,279
that's that you could define them in

00:14:24,419 --> 00:14:30,369
JavaScript so we have three methods to

00:14:27,279 --> 00:14:34,299
do this we have set property which is

00:14:30,369 --> 00:14:36,519
going to set the custom property and

00:14:34,299 --> 00:14:39,160
it's going to put it right on the HTML

00:14:36,519 --> 00:14:42,730
root element you could also get the

00:14:39,160 --> 00:14:45,220
property value like like so so you just

00:14:42,730 --> 00:14:49,269
pass in the variable name and it's gonna

00:14:45,220 --> 00:14:52,059
return that value to you as a string and

00:14:49,269 --> 00:14:56,079
there's also removed property you know

00:14:52,059 --> 00:15:01,629
if you ever need it it's waiting for my

00:14:56,079 --> 00:15:05,709
slides to update alright here we go so

00:15:01,629 --> 00:15:08,949
here's an example of this I didn't make

00:15:05,709 --> 00:15:12,699
this West boss made it a really cool

00:15:08,949 --> 00:15:14,110
example where I'm attaching what I just

00:15:12,699 --> 00:15:16,799
showed you

00:15:14,110 --> 00:15:19,629
updating the values with JavaScript and

00:15:16,799 --> 00:15:26,559
I'm attaching those to event listeners

00:15:19,629 --> 00:15:30,009
here so as you could see we could

00:15:26,559 --> 00:15:33,100
dynamically change all of these

00:15:30,009 --> 00:15:35,980
different variables and this is just

00:15:33,100 --> 00:15:40,989
using CSS if you can't see I'm changing

00:15:35,980 --> 00:15:43,830
that to blue and so our JavaScript is

00:15:40,989 --> 00:15:45,600
very small by small I mean

00:15:43,830 --> 00:15:50,580
you could barely read it because it's so

00:15:45,600 --> 00:15:52,920
tiny up there but just trust me these

00:15:50,580 --> 00:16:03,300
variables are being applied using just

00:15:52,920 --> 00:16:07,190
CSS here's another example if my slides

00:16:03,300 --> 00:16:07,190
decide to let me go to the next example

00:16:07,460 --> 00:16:12,360
what they probably won't so that's okay

00:16:10,320 --> 00:16:20,880
ah here we go

00:16:12,360 --> 00:16:22,740
I love conference Wi-Fi all right we'll

00:16:20,880 --> 00:16:26,090
skip that let's look at browser support

00:16:22,740 --> 00:16:28,320
so browser support for CSS variables

00:16:26,090 --> 00:16:31,500
believe it or not is actually very good

00:16:28,320 --> 00:16:33,450
and this is very recent in fact my iOS

00:16:31,500 --> 00:16:39,180
Safari right now is still at nine points

00:16:33,450 --> 00:16:43,380
two and nine point three I guess just

00:16:39,180 --> 00:16:46,140
came out so the only problem here though

00:16:43,380 --> 00:16:49,380
is that neither Internet Explorer or

00:16:46,140 --> 00:16:52,680
edge support you know custom properties

00:16:49,380 --> 00:16:56,130
but not a big surprise not a big problem

00:16:52,680 --> 00:16:58,560
either because we could use we could use

00:16:56,130 --> 00:17:01,860
plugins such as there's a couple post

00:16:58,560 --> 00:17:06,330
CSS plugins for variables that will

00:17:01,860 --> 00:17:09,360
default to the original value and ignore

00:17:06,330 --> 00:17:12,510
any other their custom variable

00:17:09,360 --> 00:17:14,100
declarations in your CSS so this is

00:17:12,510 --> 00:17:17,430
where progressive enhancement comes in

00:17:14,100 --> 00:17:20,550
really really handy preprocessor

00:17:17,430 --> 00:17:22,970
supports to is actually really good so

00:17:20,550 --> 00:17:27,199
it doesn't matter what you're using to

00:17:22,970 --> 00:17:31,050
to apply your CSS whether it's sass less

00:17:27,199 --> 00:17:33,840
stylist post CSS or inline Styles does

00:17:31,050 --> 00:17:37,770
not matter you could use CSS variables

00:17:33,840 --> 00:17:39,590
in any of those all right let's talk

00:17:37,770 --> 00:17:42,000
real quick now about rxjs

00:17:39,590 --> 00:17:43,830
observables which about half of you

00:17:42,000 --> 00:17:46,350
already know about and half of you maybe

00:17:43,830 --> 00:17:52,050
don't so this is going to be a real

00:17:46,350 --> 00:17:54,930
quick crash course arrays are finite

00:17:52,050 --> 00:17:57,390
collection of values so for example this

00:17:54,930 --> 00:18:00,950
array has six balls

00:17:57,390 --> 00:18:04,590
in the stream is sort of like an array

00:18:00,950 --> 00:18:07,380
except these values come in over time

00:18:04,590 --> 00:18:10,770
and they come at different times and

00:18:07,380 --> 00:18:14,610
streams can also have a beginning and an

00:18:10,770 --> 00:18:19,770
end so if you're a musician think of an

00:18:14,610 --> 00:18:22,110
array as a chord that you play or you

00:18:19,770 --> 00:18:24,090
know to compare that to a stream think

00:18:22,110 --> 00:18:26,580
of a stream as an arpeggio where you

00:18:24,090 --> 00:18:29,550
play one note at a time instead of all

00:18:26,580 --> 00:18:31,890
notes at the same time so a good way to

00:18:29,550 --> 00:18:35,750
think about this is that an observable

00:18:31,890 --> 00:18:38,940
stream is an array that's asynchronous

00:18:35,750 --> 00:18:41,280
the items could come in at any time it's

00:18:38,940 --> 00:18:43,830
immutable which means whenever you do

00:18:41,280 --> 00:18:45,750
something like an operator to an

00:18:43,830 --> 00:18:47,429
observable it's gonna give you a new

00:18:45,750 --> 00:18:50,460
observable instead of that same

00:18:47,429 --> 00:18:53,610
observable and it's subscribable so

00:18:50,460 --> 00:18:56,550
whenever an item is pushed onto the

00:18:53,610 --> 00:18:59,040
observable whatever is subscribing to it

00:18:56,550 --> 00:19:05,880
will know about it when it happens

00:18:59,040 --> 00:19:07,890
finally that's live loaded so over here

00:19:05,880 --> 00:19:10,650
we're applying CSS variables the same

00:19:07,890 --> 00:19:13,440
way I'm gonna backtrack a bit and we're

00:19:10,650 --> 00:19:15,690
adding a transition to it so what's

00:19:13,440 --> 00:19:20,940
going to happen is that by changing the

00:19:15,690 --> 00:19:27,090
values you see that using CSS we could

00:19:20,940 --> 00:19:30,390
smoothly transition each value all right

00:19:27,090 --> 00:19:38,610
back to our scheduled programming Thanks

00:19:30,390 --> 00:19:41,520
slides calm write browser support

00:19:38,610 --> 00:19:45,000
Internet Explorer sucks inline Styles

00:19:41,520 --> 00:19:48,270
suck all right moving on so creating an

00:19:45,000 --> 00:19:49,559
observable there's a way that manually

00:19:48,270 --> 00:19:51,420
create an observable but we're going to

00:19:49,559 --> 00:19:53,610
breeze through that and we're going to

00:19:51,420 --> 00:19:57,660
just figure out the most common ways of

00:19:53,610 --> 00:20:00,059
creating an observable so rxjs has a way

00:19:57,660 --> 00:20:02,220
to take normal arrays or normal I

00:20:00,059 --> 00:20:03,809
durable such as set and by calling

00:20:02,220 --> 00:20:06,030
thought from you could create an

00:20:03,809 --> 00:20:07,950
observable from that you could also

00:20:06,030 --> 00:20:10,800
create an observable from a promise

00:20:07,950 --> 00:20:13,320
which is basically going to be a

00:20:10,800 --> 00:20:15,810
REME of only one value which is the

00:20:13,320 --> 00:20:18,090
return value of the promise or whenever

00:20:15,810 --> 00:20:21,800
you call dot n on a promise that's the

00:20:18,090 --> 00:20:24,840
value that you get back we could also

00:20:21,800 --> 00:20:27,120
call observables from events which is

00:20:24,840 --> 00:20:29,460
what we're going to be using in the

00:20:27,120 --> 00:20:31,410
coming slides so we give it the Dom node

00:20:29,460 --> 00:20:34,440
and we give it the event name such as

00:20:31,410 --> 00:20:37,170
mousemove we could also call it from an

00:20:34,440 --> 00:20:40,620
events pattern so what an event pattern

00:20:37,170 --> 00:20:41,550
is is just a callback so there's a lot

00:20:40,620 --> 00:20:45,450
of libraries

00:20:41,550 --> 00:20:48,930
that's use callbacks for their event

00:20:45,450 --> 00:20:50,700
patterns such as hammer Jes and this is

00:20:48,930 --> 00:20:53,760
one that I use in a lot of my examples

00:20:50,700 --> 00:20:56,310
when showing observables with CSS

00:20:53,760 --> 00:20:58,980
variables because hammer J has abstracts

00:20:56,310 --> 00:21:02,490
all of these concepts and it's really

00:20:58,980 --> 00:21:04,230
easy to use so we could emulate rotating

00:21:02,490 --> 00:21:06,210
pinching pressing panning tapping

00:21:04,230 --> 00:21:09,570
swiping all the things that you're used

00:21:06,210 --> 00:21:12,000
to on mobile devices on regular websites

00:21:09,570 --> 00:21:14,640
so all you do is you passing the Dom

00:21:12,000 --> 00:21:17,910
elements to hammer and then we're going

00:21:14,640 --> 00:21:20,820
to have a event pattern which takes in

00:21:17,910 --> 00:21:24,000
the handler and passes that on to

00:21:20,820 --> 00:21:25,680
whatever hammer dot J s is doing so over

00:21:24,000 --> 00:21:29,360
here all we're doing is listening for

00:21:25,680 --> 00:21:33,660
pan now subscribing to an observable is

00:21:29,360 --> 00:21:36,330
pretty easy - all you do is you call dot

00:21:33,660 --> 00:21:38,640
subscribe on that observable and you

00:21:36,330 --> 00:21:42,300
passes in the function where every

00:21:38,640 --> 00:21:44,120
single value whenever you get a value

00:21:42,300 --> 00:21:46,380
you do something with it

00:21:44,120 --> 00:21:48,950
optionally you could pass in an error

00:21:46,380 --> 00:21:52,800
handler and a completion handler so

00:21:48,950 --> 00:21:54,270
pretty much the only thing you need to

00:21:52,800 --> 00:21:57,330
remember from this unless you want to

00:21:54,270 --> 00:21:59,820
dive into more details is that you could

00:21:57,330 --> 00:22:02,570
pass a handler to subscribe that does

00:21:59,820 --> 00:22:06,440
something every time an event is called

00:22:02,570 --> 00:22:09,020
there's also a bunch of operators - and

00:22:06,440 --> 00:22:13,620
the best thing to think about is that

00:22:09,020 --> 00:22:16,170
Aris rxjs is low - for observables so we

00:22:13,620 --> 00:22:21,360
have the same methods that we could use

00:22:16,170 --> 00:22:23,890
on the race such as filter where we if

00:22:21,360 --> 00:22:26,260
you imagine this as an array all

00:22:23,890 --> 00:22:28,960
is taking the green balls there's also

00:22:26,260 --> 00:22:32,080
map which works just as you would expect

00:22:28,960 --> 00:22:34,240
there's debounce which doesn't really

00:22:32,080 --> 00:22:38,410
happen two arrays because arrays are not

00:22:34,240 --> 00:22:41,830
time-based and there's scan where it's

00:22:38,410 --> 00:22:45,220
sort of like array reduce and we also

00:22:41,830 --> 00:22:47,170
have things such as flat map where if

00:22:45,220 --> 00:22:49,870
you think of an array of arrays and you

00:22:47,170 --> 00:22:56,220
want that to squish into one array flat

00:22:49,870 --> 00:23:01,300
map is basically the same thing okay so

00:22:56,220 --> 00:23:04,240
here is an example of using an

00:23:01,300 --> 00:23:05,440
observable to update the Dom all we're

00:23:04,240 --> 00:23:09,850
doing here is we're listening for the

00:23:05,440 --> 00:23:13,270
mass events and we're seeing you know

00:23:09,850 --> 00:23:16,810
the values change over here so think

00:23:13,270 --> 00:23:20,100
about this we're using an event to

00:23:16,810 --> 00:23:26,950
create an observable to update the Dom

00:23:20,100 --> 00:23:35,250
whenever the mouse moves so hopefully if

00:23:26,950 --> 00:23:35,250
the slides change they will

00:23:37,539 --> 00:23:43,090
are you thinking what I'm thinking I

00:23:39,929 --> 00:23:47,279
mean hopefully you are we talked about

00:23:43,090 --> 00:23:50,229
rxjs we talked about CSS variables and

00:23:47,279 --> 00:23:52,899
we sort of had a hint of how we could

00:23:50,229 --> 00:23:57,009
mix the two so what if we modeled

00:23:52,899 --> 00:23:59,409
observable events as CSS variables what

00:23:57,009 --> 00:24:02,049
I mean by this is a question that you

00:23:59,409 --> 00:24:05,919
might have all asked before is what if

00:24:02,049 --> 00:24:08,169
we could write JavaScript in CSS so this

00:24:05,919 --> 00:24:11,379
is where functional reactive animations

00:24:08,169 --> 00:24:13,929
come into play and we're gonna be doing

00:24:11,379 --> 00:24:16,479
this with CSS variables and rxjs

00:24:13,929 --> 00:24:19,570
observables and trust me there are

00:24:16,479 --> 00:24:23,710
awesome this is not a new idea dates

00:24:19,570 --> 00:24:26,229
back to 1997 in an academic paper called

00:24:23,710 --> 00:24:28,720
functional reactive animations which is

00:24:26,229 --> 00:24:31,929
one involving discrete changes due to

00:24:28,720 --> 00:24:34,450
events such as user behaviors or even

00:24:31,929 --> 00:24:37,539
other behaviors or behaviors that are

00:24:34,450 --> 00:24:39,609
based on other behaviors as well an

00:24:37,539 --> 00:24:42,399
important quote here is by allowing

00:24:39,609 --> 00:24:44,649
programmers to express the what we can

00:24:42,399 --> 00:24:47,679
hope to automate the hell react is

00:24:44,649 --> 00:24:49,330
really good at doing this but we're not

00:24:47,679 --> 00:24:52,450
the best at doing this with animations

00:24:49,330 --> 00:24:54,279
right now because right now the way we

00:24:52,450 --> 00:24:57,099
do this is we directly tell JavaScript

00:24:54,279 --> 00:25:00,009
how to style each element so here's a

00:24:57,099 --> 00:25:02,889
little preview of what we're going to be

00:25:00,009 --> 00:25:04,450
doing so taking the last Mouse example

00:25:02,889 --> 00:25:07,659
where whenever I move my mouse the

00:25:04,450 --> 00:25:10,269
values are updated we can see that the

00:25:07,659 --> 00:25:12,429
little Huskies head moves around and

00:25:10,269 --> 00:25:13,539
follows the mouse now there's a lot of

00:25:12,429 --> 00:25:16,090
moving parts here so you might think

00:25:13,539 --> 00:25:19,299
there's a lot of JavaScript but in fact

00:25:16,090 --> 00:25:21,549
that's all that's all we have everything

00:25:19,299 --> 00:25:23,470
is being applied to the CSS which is a

00:25:21,549 --> 00:25:27,940
crap-ton so we're not going to go

00:25:23,470 --> 00:25:31,149
through that and as I'm waiting for the

00:25:27,940 --> 00:25:35,559
slide to change actually no I'll do it

00:25:31,149 --> 00:25:37,599
right here that's the wrong slide all

00:25:35,559 --> 00:25:39,159
right so here's how we're going to do

00:25:37,599 --> 00:25:41,889
that we're going to need to use

00:25:39,159 --> 00:25:45,369
something called a subject now a subject

00:25:41,889 --> 00:25:48,009
in rxjs is just something that's both an

00:25:45,369 --> 00:25:50,279
observable and an observer so this

00:25:48,009 --> 00:25:52,169
subject is going to observe

00:25:50,279 --> 00:25:54,719
things such as whenever the mass moves

00:25:52,169 --> 00:25:58,169
whenever we scroll tap swipe maybe

00:25:54,719 --> 00:25:59,940
timers that we have it's going to send

00:25:58,169 --> 00:26:02,580
them off as a side effect to CSS

00:25:59,940 --> 00:26:05,039
variables using the techniques we

00:26:02,580 --> 00:26:08,450
learned about how to apply CSS variables

00:26:05,039 --> 00:26:11,309
with JavaScript and it's going to also

00:26:08,450 --> 00:26:13,710
dispatch to all of our observers

00:26:11,309 --> 00:26:16,109
whenever the values change of course

00:26:13,710 --> 00:26:18,330
that's optional I made a really really

00:26:16,109 --> 00:26:20,820
tiny library for this called our X CSS

00:26:18,330 --> 00:26:23,570
and it's on NPM if you want to try it

00:26:20,820 --> 00:26:26,279
and all it does is we take in

00:26:23,570 --> 00:26:30,479
observables such as whenever we move the

00:26:26,279 --> 00:26:33,450
mouse which of course is just from the

00:26:30,479 --> 00:26:37,499
mousemove event and we stick that into

00:26:33,450 --> 00:26:39,210
the RX CSS function so if you're

00:26:37,499 --> 00:26:41,969
familiar with redux think of this as

00:26:39,210 --> 00:26:43,619
combining reducers if you're not

00:26:41,969 --> 00:26:45,450
familiar with redux you have no idea

00:26:43,619 --> 00:26:47,700
what I'm talking about but basically you

00:26:45,450 --> 00:26:49,859
could just stick that inside the arc CSS

00:26:47,700 --> 00:26:53,070
function and then you could use these

00:26:49,859 --> 00:26:55,499
values directly inside your CSS so

00:26:53,070 --> 00:26:58,769
hopefully you could see how this is you

00:26:55,499 --> 00:27:01,769
know very very useful where we could

00:26:58,769 --> 00:27:04,889
define dynamic animations inside of our

00:27:01,769 --> 00:27:07,769
CSS and of course it only comes down to

00:27:04,889 --> 00:27:10,440
one point five six kilobytes if you're

00:27:07,769 --> 00:27:12,869
already using rxjs which in some of your

00:27:10,440 --> 00:27:16,409
applications you are so let's look at a

00:27:12,869 --> 00:27:18,359
real quick example of how we could apply

00:27:16,409 --> 00:27:20,789
this this is something that I found on

00:27:18,359 --> 00:27:22,139
dribble which you know is Iceland so

00:27:20,789 --> 00:27:25,139
it's fitting and it's a really cool

00:27:22,139 --> 00:27:26,669
animation where whenever you scroll did

00:27:25,139 --> 00:27:30,749
you see how the background image store

00:27:26,669 --> 00:27:33,269
faded out and disappeared and it also

00:27:30,749 --> 00:27:36,450
scaled in a little bit and also when

00:27:33,269 --> 00:27:40,139
they click the horse when they drag it

00:27:36,450 --> 00:27:42,269
it moves up and the text disappears so

00:27:40,139 --> 00:27:44,460
think in your mind's how am I gonna do

00:27:42,269 --> 00:27:46,889
this with just JavaScript probably

00:27:44,460 --> 00:27:49,889
involves a lot of code a lot of event

00:27:46,889 --> 00:27:55,169
listeners but turns out that we could do

00:27:49,889 --> 00:27:58,379
it with using arc CSS or defining those

00:27:55,169 --> 00:28:02,609
variables in JavaScript and sending them

00:27:58,379 --> 00:28:03,570
to CSS variables so this is what it

00:28:02,609 --> 00:28:05,340
looks like

00:28:03,570 --> 00:28:08,190
and this is Harper where we are right

00:28:05,340 --> 00:28:10,890
now and so as you can see a lot of

00:28:08,190 --> 00:28:13,170
things are happening but not a lot of

00:28:10,890 --> 00:28:16,800
JavaScript is happening over here all

00:28:13,170 --> 00:28:20,640
I'm doing is sending to observables you

00:28:16,800 --> 00:28:22,710
could see that we're doing the photo pan

00:28:20,640 --> 00:28:27,030
which is whenever we move our finger on

00:28:22,710 --> 00:28:29,160
the photo and we're also adding a scroll

00:28:27,030 --> 00:28:32,460
event so that the background image

00:28:29,160 --> 00:28:34,800
changes whenever we scroll and it's

00:28:32,460 --> 00:28:37,740
gonna be dynamic and it's going to also

00:28:34,800 --> 00:28:44,490
be performant I tested this ran in a

00:28:37,740 --> 00:28:49,170
smooth 60 frames per second so yeah it

00:28:44,490 --> 00:28:53,100
seems it's so why use CSS variables well

00:28:49,170 --> 00:28:54,720
there's a there's a few reasons first of

00:28:53,100 --> 00:28:57,900
all you don't get excessive Dom

00:28:54,720 --> 00:29:00,630
manipulation you might be familiar with

00:28:57,900 --> 00:29:03,960
if you're applying transitions to all of

00:29:00,630 --> 00:29:05,760
your to all of your elements on your Dom

00:29:03,960 --> 00:29:08,250
that there's gonna be a bunch of purple

00:29:05,760 --> 00:29:10,470
over here thankfully with CSS variables

00:29:08,250 --> 00:29:12,840
the only thing that's really being

00:29:10,470 --> 00:29:14,970
manipulated is that top root element

00:29:12,840 --> 00:29:16,890
over there that's what's changing and

00:29:14,970 --> 00:29:19,140
there's also a bunch of really good

00:29:16,890 --> 00:29:21,660
reasons such as you could debug it

00:29:19,140 --> 00:29:24,270
you could change CSS variables right in

00:29:21,660 --> 00:29:26,250
the debugger it doesn't care whether the

00:29:24,270 --> 00:29:28,200
notes there or not and you could think

00:29:26,250 --> 00:29:30,870
of a bunch of other cool uses - such as

00:29:28,200 --> 00:29:33,900
theming based on selectors progressive

00:29:30,870 --> 00:29:37,290
enhancement using calc and CSS variables

00:29:33,900 --> 00:29:41,040
work in SVG as well so your options are

00:29:37,290 --> 00:29:44,820
you know really limitless so what's next

00:29:41,040 --> 00:29:48,360
with CSS variables we could now do many

00:29:44,820 --> 00:29:50,880
things that that mobile app developers

00:29:48,360 --> 00:29:52,740
already can do such as constraint

00:29:50,880 --> 00:29:55,140
layouts which is laying things out based

00:29:52,740 --> 00:29:57,750
on where other things are or saying hey

00:29:55,140 --> 00:30:00,660
we need this at least 20 pixels from the

00:29:57,750 --> 00:30:04,980
right and other things such as physics

00:30:00,660 --> 00:30:08,810
modeling choreography making animations

00:30:04,980 --> 00:30:11,850
happen together in sequence and

00:30:08,810 --> 00:30:14,370
observables also play nice with canvas

00:30:11,850 --> 00:30:17,350
and WebGL so what this means is that

00:30:14,370 --> 00:30:18,630
when you do animations in CSS

00:30:17,350 --> 00:30:22,780
you could have those same values

00:30:18,630 --> 00:30:25,210
dispatched to both canvas WebGL anything

00:30:22,780 --> 00:30:27,669
else that could subscribe to observables

00:30:25,210 --> 00:30:30,850
which by the way there's a lot of things

00:30:27,669 --> 00:30:34,120
it's just JavaScript so this all

00:30:30,850 --> 00:30:36,490
happened based on me asking what if I'm

00:30:34,120 --> 00:30:38,710
not telling you to do this I'm telling

00:30:36,490 --> 00:30:41,320
you that this is just you know something

00:30:38,710 --> 00:30:42,760
that you could think about in something

00:30:41,320 --> 00:30:45,610
that you could experiment with because

00:30:42,760 --> 00:30:47,320
we all like experimenting and that's you

00:30:45,610 --> 00:30:50,140
know one of the great reasons that you

00:30:47,320 --> 00:30:52,570
know we do what we do so thank you James

00:30:50,140 --> 00:30:56,080
pump Iceland it's all the time I have

00:30:52,570 --> 00:30:58,890
and I'm David Cay piano on everywhere if

00:30:56,080 --> 00:30:58,890

YouTube URL: https://www.youtube.com/watch?v=lTCukb6Zn3g


