Title: Malte Ubl: #notalljavascript (How to deal with 3rd party JS) - JSConf Iceland 2016
Publication date: 2016-09-20
Playlist: JSConf Iceland 2016
Description: 
	Modern websites are often composed out of megabytes of JavaScript – not all of which we wrote ourselves: Ads, social plugins, tweets, instagrams, video players and other things get assembled together and more often than not don’t play all too well with each other. When we started the AMP project we quickly realized we’d have to support this type of third party JS. In this talk we’ll do a deep dive into how we manage to maintain page performance and decent user experience nonetheless. Bring your wetsuit, because we’ll dive deep into some of the more rarely explored corners of the JavaScript language.
Captions: 
	00:00:13,200 --> 00:00:18,210
one my name is Malta thanks for choosing

00:00:15,960 --> 00:00:19,500
the front end talk I'm one of like 15

00:00:18,210 --> 00:00:20,939
engineers at Google not working on

00:00:19,500 --> 00:00:22,650
machine learning so differently

00:00:20,939 --> 00:00:25,439
appreciate the other people interested

00:00:22,650 --> 00:00:27,450
in this yeah ok Google I specifically

00:00:25,439 --> 00:00:28,950
work on a thing called amp project if

00:00:27,450 --> 00:00:31,079
you've not heard about that it's kind of

00:00:28,950 --> 00:00:34,920
a thing to make reliably fast web sites

00:00:31,079 --> 00:00:37,260
and like while doing this project and

00:00:34,920 --> 00:00:40,950
learned a lot about something that's the

00:00:37,260 --> 00:00:44,280
topic of this talk so and the talk is

00:00:40,950 --> 00:00:47,880
going to be a little dark so I wanted to

00:00:44,280 --> 00:00:49,830
start out on a lighter note which is

00:00:47,880 --> 00:00:51,780
that JavaScript really is my favorite

00:00:49,830 --> 00:00:56,610
programming language and for so many

00:00:51,780 --> 00:00:58,770
reasons for example you can use it to

00:00:56,610 --> 00:01:01,739
build applications to make presentations

00:00:58,770 --> 00:01:04,309
and just a few examples from from Jay's

00:01:01,739 --> 00:01:09,030
comms what we what we did over the years

00:01:04,309 --> 00:01:12,229
we made like robots and we made note

00:01:09,030 --> 00:01:17,130
copters and we made freaking boats and

00:01:12,229 --> 00:01:19,259
remain note rockets of course and you

00:01:17,130 --> 00:01:21,240
really can't like summarize it any other

00:01:19,259 --> 00:01:23,340
way than the javascript is freaking

00:01:21,240 --> 00:01:24,950
awesome by the way when I came to this

00:01:23,340 --> 00:01:28,770
conference I was talking to this person

00:01:24,950 --> 00:01:31,319
telling like yeah I went to 15 j/s cops

00:01:28,770 --> 00:01:34,979
already where she was saying like yeah

00:01:31,319 --> 00:01:37,889
you're really old so there's that by

00:01:34,979 --> 00:01:44,279
that so JavaScript really awesome but it

00:01:37,889 --> 00:01:46,759
does have a really dark side and it's

00:01:44,279 --> 00:01:50,639
getting darker when you talk about

00:01:46,759 --> 00:01:54,509
third-party JavaScript or as I liked it

00:01:50,639 --> 00:01:55,649
to call it other people JavaScript so

00:01:54,509 --> 00:01:58,380
it's something we definitely didn't

00:01:55,649 --> 00:02:00,569
write ourselves and it's also not stuff

00:01:58,380 --> 00:02:02,069
on NPM which is typically something you

00:02:00,569 --> 00:02:04,619
actually want because you like actively

00:02:02,069 --> 00:02:06,499
included third-party JavaScript works

00:02:04,619 --> 00:02:10,590
really differently and some examples are

00:02:06,499 --> 00:02:13,170
for example comments and polls stuff

00:02:10,590 --> 00:02:15,330
like reviews ads of course I'm going to

00:02:13,170 --> 00:02:17,700
talk about ads about social plugins I

00:02:15,330 --> 00:02:19,050
could put a tweet on your side right you

00:02:17,700 --> 00:02:20,250
just load some javascript file from

00:02:19,050 --> 00:02:23,730
Twitter and you trust them to do

00:02:20,250 --> 00:02:26,610
something that's nice in it and it might

00:02:23,730 --> 00:02:27,090
not be right um I always give this

00:02:26,610 --> 00:02:28,470
example

00:02:27,090 --> 00:02:30,780
when you like if you were building a

00:02:28,470 --> 00:02:33,030
native app and the first thing you do

00:02:30,780 --> 00:02:34,830
you say like hey I'm going to make it in

00:02:33,030 --> 00:02:36,750
secure HTTP request and load some more

00:02:34,830 --> 00:02:40,050
native code from this other third party

00:02:36,750 --> 00:02:41,700
that I barely know and in the cat's case

00:02:40,050 --> 00:02:44,580
they like redirect somewhere else and

00:02:41,700 --> 00:02:46,410
then you load their native code before

00:02:44,580 --> 00:02:49,739
anything else happens and run it and

00:02:46,410 --> 00:02:51,420
that like seems really not such a good

00:02:49,739 --> 00:02:53,400
idea but that's that's how this works

00:02:51,420 --> 00:02:55,440
and I my talk is about like some

00:02:53,400 --> 00:02:59,610
examples of what can happen and then

00:02:55,440 --> 00:03:03,120
later on what we can do to handle it so

00:02:59,610 --> 00:03:05,040
it's looking at my my site that had ads

00:03:03,120 --> 00:03:08,610
the other day and I was searching in

00:03:05,040 --> 00:03:12,120
chrome dev tools for the object tag you

00:03:08,610 --> 00:03:13,680
know which is most I mean yesterday I

00:03:12,120 --> 00:03:16,590
guess we learned that you can do useful

00:03:13,680 --> 00:03:19,760
things with it mostly used alert to load

00:03:16,590 --> 00:03:24,120
flash and so yeah so this page had 65

00:03:19,760 --> 00:03:26,329
flash objects on them and so wondering

00:03:24,120 --> 00:03:31,709
why and obviously it's because of ads

00:03:26,329 --> 00:03:37,049
which doesn't really explain it um so so

00:03:31,709 --> 00:03:39,450
but here is the the deep inside flash

00:03:37,049 --> 00:03:41,220
movies reduce the frame rate when

00:03:39,450 --> 00:03:43,230
they're off screen right and that is a

00:03:41,220 --> 00:03:45,750
very good idea right that's even though

00:03:43,230 --> 00:03:47,280
Steve Jobs was totally against flash if

00:03:45,750 --> 00:03:48,840
you reduce the frame rate and you can't

00:03:47,280 --> 00:03:50,609
see it that's great right you don't use

00:03:48,840 --> 00:03:55,349
as much battery you don't use as much

00:03:50,609 --> 00:03:57,419
CPU and so because of this you can use

00:03:55,349 --> 00:04:01,530
flash to mathur measure whether

00:03:57,419 --> 00:04:04,349
something's on the screen and that leads

00:04:01,530 --> 00:04:06,769
us to space or dove Swift right so you

00:04:04,349 --> 00:04:10,950
can totally put a 1 x 1 pixel flash

00:04:06,769 --> 00:04:13,410
movie on on the screen and by observing

00:04:10,950 --> 00:04:17,250
its frame rate you know whether that

00:04:13,410 --> 00:04:26,130
pixel is visible and so you have things

00:04:17,250 --> 00:04:28,260
ads and so yeah and so obviously it's

00:04:26,130 --> 00:04:29,880
very important for the ad to actually

00:04:28,260 --> 00:04:32,039
measure whether wishlists not rendered

00:04:29,880 --> 00:04:34,710
somewhere deep down the screen where the

00:04:32,039 --> 00:04:38,820
user actually scroll there so you put a

00:04:34,710 --> 00:04:40,980
flash movie on it and I mean that's

00:04:38,820 --> 00:04:42,780
already like a big step forward but

00:04:40,980 --> 00:04:47,910
only tells you something like about the

00:04:42,780 --> 00:04:50,760
top 00 position so you you you add three

00:04:47,910 --> 00:04:52,370
flesh movies and there's actually I

00:04:50,760 --> 00:04:54,870
think a standard that says like

00:04:52,370 --> 00:04:56,970
twenty-five percent of the ad has to be

00:04:54,870 --> 00:04:59,310
visible for n seconds to be considered a

00:04:56,970 --> 00:05:02,720
view because you need to have these

00:04:59,310 --> 00:05:06,360
twenty-five percent you add a few more

00:05:02,720 --> 00:05:10,320
so it turns out there were seven flash

00:05:06,360 --> 00:05:12,030
movies on this ad and now there's also

00:05:10,320 --> 00:05:14,160
this issue that there's like the

00:05:12,030 --> 00:05:15,810
advertiser the publisher the ad network

00:05:14,160 --> 00:05:17,880
they don't trust each other so you you

00:05:15,810 --> 00:05:21,530
can get to 21 flash movies on a single

00:05:17,880 --> 00:05:26,430
ad totally not not not unheard of and

00:05:21,530 --> 00:05:28,350
now you might like correctly question me

00:05:26,430 --> 00:05:31,860
like yeah my phone doesn't actually a

00:05:28,350 --> 00:05:34,230
flash them I'm good and of course it can

00:05:31,860 --> 00:05:36,330
get even worse because the nice thing

00:05:34,230 --> 00:05:38,790
about this flash solution is at least I

00:05:36,330 --> 00:05:40,890
mean it's in a way incredibly

00:05:38,790 --> 00:05:43,050
inefficient because certainly have

00:05:40,890 --> 00:05:45,660
probably like a vm and each of these

00:05:43,050 --> 00:05:48,990
flash things like so I mean you can't

00:05:45,660 --> 00:05:50,790
even think about it but at least it will

00:05:48,990 --> 00:05:52,800
like pushed you the information whether

00:05:50,790 --> 00:05:56,220
it's visible on the screen right and um

00:05:52,800 --> 00:05:58,650
so today on an iPhone this is basically

00:05:56,220 --> 00:06:02,580
the best general solution you can you

00:05:58,650 --> 00:06:04,320
can do all right well you just pull for

00:06:02,580 --> 00:06:07,050
where it is right you can never know

00:06:04,320 --> 00:06:08,760
that nothing else move to your round so

00:06:07,050 --> 00:06:11,070
you can't like listen only for scroll

00:06:08,760 --> 00:06:12,120
events because something like a thing

00:06:11,070 --> 00:06:13,500
might be somewhere else right so you

00:06:12,120 --> 00:06:16,800
have to like literally go and make like

00:06:13,500 --> 00:06:18,870
get bounding client direct and call that

00:06:16,800 --> 00:06:20,850
like however many times per second you

00:06:18,870 --> 00:06:22,860
want and and that is really like the

00:06:20,850 --> 00:06:24,600
worst possible thing you could do the

00:06:22,860 --> 00:06:25,920
performance right you know you do this

00:06:24,600 --> 00:06:28,590
all the time you don't in not even on

00:06:25,920 --> 00:06:30,090
screen you're busy pulling like you're

00:06:28,590 --> 00:06:31,260
probably calling something I'll get

00:06:30,090 --> 00:06:33,120
Bonnie klein direct which is like

00:06:31,260 --> 00:06:34,560
basically Tecna browse like you have to

00:06:33,120 --> 00:06:37,830
really really really render everything

00:06:34,560 --> 00:06:41,040
on this page you can't cheat like the

00:06:37,830 --> 00:06:44,670
waveform collapses in this case like 25

00:06:41,040 --> 00:06:49,380
times per second and so fortunately we

00:06:44,670 --> 00:06:51,030
can do better nowadays it's it's in

00:06:49,380 --> 00:06:53,910
chrome and I think it's coming in

00:06:51,030 --> 00:06:54,910
Firefox and for Safari we can hope for

00:06:53,910 --> 00:06:56,860
the 2007

00:06:54,910 --> 00:06:59,140
version so there's an API called

00:06:56,860 --> 00:07:00,340
intersection observer where you can just

00:06:59,140 --> 00:07:02,890
say like I would like to know what this

00:07:00,340 --> 00:07:06,880
is and where this is in relation to the

00:07:02,890 --> 00:07:08,290
screen and it sends you events as things

00:07:06,880 --> 00:07:09,940
change and it doesn't send you events

00:07:08,290 --> 00:07:11,380
when they don't change and it also

00:07:09,940 --> 00:07:13,420
doesn't change send you them

00:07:11,380 --> 00:07:15,340
synchronously it tells you after the

00:07:13,420 --> 00:07:17,500
fact at this time it was there so you

00:07:15,340 --> 00:07:19,600
don't have to like do this busy waiting

00:07:17,500 --> 00:07:24,010
so that's that's good so at least there

00:07:19,600 --> 00:07:25,870
is a way to do this right um doesn't

00:07:24,010 --> 00:07:29,920
mean everyone's using it already but I

00:07:25,870 --> 00:07:31,630
think it's a great great change and you

00:07:29,920 --> 00:07:35,470
can use this for other many many other

00:07:31,630 --> 00:07:38,260
useful things alright so that was Hawaii

00:07:35,470 --> 00:07:40,690
we have so much flesh next thing I want

00:07:38,260 --> 00:07:46,360
to talk about how browsers parse web

00:07:40,690 --> 00:07:48,870
pages it's it's really simple you take a

00:07:46,360 --> 00:07:51,790
nation panel talk and look at its tokens

00:07:48,870 --> 00:07:55,200
this is basically diagram there's a bit

00:07:51,790 --> 00:07:59,560
more complexity there somewhere but

00:07:55,200 --> 00:08:02,650
that's essentially how it works until

00:07:59,560 --> 00:08:08,380
you see something like this probably all

00:08:02,650 --> 00:08:09,820
heard about document right and the magic

00:08:08,380 --> 00:08:12,940
of document ID right is completely

00:08:09,820 --> 00:08:15,940
synchronous it changes how the current

00:08:12,940 --> 00:08:18,340
document is being parsed so even if

00:08:15,940 --> 00:08:19,750
there's like an openstack you can like

00:08:18,340 --> 00:08:23,110
write into that because it's really

00:08:19,750 --> 00:08:24,430
really weird and it gets worse because

00:08:23,110 --> 00:08:28,060
you can actually write scripts

00:08:24,430 --> 00:08:31,510
synchronous codes and those can do more

00:08:28,060 --> 00:08:34,240
document or rights and that wonderful

00:08:31,510 --> 00:08:36,820
simple state machine becomes something

00:08:34,240 --> 00:08:38,979
like this so we like after parson we saw

00:08:36,820 --> 00:08:41,590
we have a script tag we have to execute

00:08:38,979 --> 00:08:43,780
it it document writes something we have

00:08:41,590 --> 00:08:45,910
to parse the output oh there's another

00:08:43,780 --> 00:08:48,070
script tag and then we download that and

00:08:45,910 --> 00:08:52,660
then we basically we enter in our state

00:08:48,070 --> 00:08:56,470
machine and things become really slow

00:08:52,660 --> 00:08:58,270
right so the basically what you get in

00:08:56,470 --> 00:09:00,910
like in JavaScript language is you have

00:08:58,270 --> 00:09:03,190
the synchronous xhr that gets to modify

00:09:00,910 --> 00:09:06,690
the currently parsing document and you

00:09:03,190 --> 00:09:07,880
and that that is recursive right and

00:09:06,690 --> 00:09:12,170
it's

00:09:07,880 --> 00:09:14,540
in strong violation to what I call the

00:09:12,170 --> 00:09:18,470
the first law of javascript is that they

00:09:14,540 --> 00:09:19,670
all will eventually be asynchronous if

00:09:18,470 --> 00:09:20,960
there's like you start our synchronous

00:09:19,670 --> 00:09:22,190
because there's you only have to do like

00:09:20,960 --> 00:09:25,040
one plus one eventually it will be

00:09:22,190 --> 00:09:27,680
asynchronous but this entire the

00:09:25,040 --> 00:09:30,770
semantics of document are right do not

00:09:27,680 --> 00:09:34,400
allow anything to ever be asynchronous

00:09:30,770 --> 00:09:35,750
so even though um every player in the

00:09:34,400 --> 00:09:38,060
game might be completely fine with

00:09:35,750 --> 00:09:40,700
making their stuff asynchronous if

00:09:38,060 --> 00:09:45,230
anything relies on the synchronous

00:09:40,700 --> 00:09:47,620
semantics you can't change it and so we

00:09:45,230 --> 00:09:50,660
get to the opposite is if anything

00:09:47,620 --> 00:09:52,400
relies on being synchronous obviously

00:09:50,660 --> 00:09:54,620
every child has to be synchronous there

00:09:52,400 --> 00:09:56,560
can't be anything asynchronous and and

00:09:54,620 --> 00:10:01,730
and the thing is that synchronicity

00:09:56,560 --> 00:10:04,250
really really doesn't scale so for

00:10:01,730 --> 00:10:05,780
example um you're like on the website

00:10:04,250 --> 00:10:07,730
and was like I would like to have a net

00:10:05,780 --> 00:10:08,930
that's all these synchronous and then

00:10:07,730 --> 00:10:10,730
but you don't really know how to make

00:10:08,930 --> 00:10:12,260
add see you this is like another

00:10:10,730 --> 00:10:13,730
javascript file leg do you know how to

00:10:12,260 --> 00:10:17,210
make ads that's the synchronous request

00:10:13,730 --> 00:10:19,630
and right cause like add source like

00:10:17,210 --> 00:10:21,620
many players you like can you help us

00:10:19,630 --> 00:10:24,680
find out which ad to draw another

00:10:21,620 --> 00:10:25,610
synchronous request and then because you

00:10:24,680 --> 00:10:27,200
found out that you make more money

00:10:25,610 --> 00:10:28,580
that's Wade like let's ask these other

00:10:27,200 --> 00:10:31,670
folks over there if they have better at

00:10:28,580 --> 00:10:33,800
another synchronous request and then

00:10:31,670 --> 00:10:36,440
they say no no weary soul this to some

00:10:33,800 --> 00:10:37,970
other party and then they make another

00:10:36,440 --> 00:10:39,740
synchronous request and then they

00:10:37,970 --> 00:10:42,200
finally say okay now we try to figure

00:10:39,740 --> 00:10:45,910
out how to make ads and it can be a bit

00:10:42,200 --> 00:10:49,130
early deep which leads to these absurd

00:10:45,910 --> 00:10:50,840
situations way where web page load times

00:10:49,130 --> 00:10:54,080
get so slow that you can literally bake

00:10:50,840 --> 00:10:56,510
cookies during them there's the chrome

00:10:54,080 --> 00:10:58,940
team currently has this experiment where

00:10:56,510 --> 00:11:01,070
they kill document right if you're on 2g

00:10:58,940 --> 00:11:03,410
that's already launched and soon they

00:11:01,070 --> 00:11:05,960
will always do it when you're on a 2g

00:11:03,410 --> 00:11:09,620
like connection because you get you get

00:11:05,960 --> 00:11:12,200
like document dot write like kiss gates

00:11:09,620 --> 00:11:14,450
are 50 element deep if each request

00:11:12,200 --> 00:11:15,860
takes 10 seconds you had 500 second web

00:11:14,450 --> 00:11:18,100
page load time and you see absolutely

00:11:15,860 --> 00:11:22,750
nothing at all during this entire time

00:11:18,100 --> 00:11:27,410
which can't be good for anyone right

00:11:22,750 --> 00:11:28,910
cool ah so we have how to measure

00:11:27,410 --> 00:11:31,670
something on-screen how to load

00:11:28,910 --> 00:11:35,410
something synchronously next is the what

00:11:31,670 --> 00:11:37,970
I personally found like that was my own

00:11:35,410 --> 00:11:41,060
impression was the the most awesome ack

00:11:37,970 --> 00:11:43,670
hack in JavaScript ever was actually

00:11:41,060 --> 00:11:47,240
done by Mozilla they may think called

00:11:43,670 --> 00:11:49,790
Broadway jas and what they built was

00:11:47,240 --> 00:11:55,280
this native JavaScript h.264 decoder

00:11:49,790 --> 00:11:56,570
that was decently fast and so that that

00:11:55,280 --> 00:11:59,360
seems like really cool like you can use

00:11:56,570 --> 00:12:03,020
JavaScript to decode h.264 I think it's

00:11:59,360 --> 00:12:07,400
pretty impressive now we need some more

00:12:03,020 --> 00:12:10,490
context so Chrome Safari both agreed

00:12:07,400 --> 00:12:12,320
that autoplay as a feature of the video

00:12:10,490 --> 00:12:14,060
tag wasn't a good thing a noble right

00:12:12,320 --> 00:12:15,950
and you can totally understand why they

00:12:14,060 --> 00:12:17,300
would think this right autoplay means

00:12:15,950 --> 00:12:21,100
definitely you have to download the

00:12:17,300 --> 00:12:23,660
movie file so you incur data costs

00:12:21,100 --> 00:12:24,950
definitely autoplay with sound can be

00:12:23,660 --> 00:12:27,380
really awkward like you're on the bus

00:12:24,950 --> 00:12:29,300
and you thing like place sound that you

00:12:27,380 --> 00:12:30,350
don't want that so they they make this

00:12:29,300 --> 00:12:33,440
decision on behalf of the user should

00:12:30,350 --> 00:12:35,870
say like um you cannot like all the play

00:12:33,440 --> 00:12:40,780
video users always have to tap to play

00:12:35,870 --> 00:12:44,660
video combining this with Broadway jas

00:12:40,780 --> 00:12:47,480
gets us to this right so some people

00:12:44,660 --> 00:12:51,440
were like oh well you can't do autoplay

00:12:47,480 --> 00:12:53,000
but we have a JavaScript side h.264

00:12:51,440 --> 00:12:55,550
decoder so we can do autoplay because

00:12:53,000 --> 00:12:58,970
that is not subject to any limitations

00:12:55,550 --> 00:13:01,640
whatsoever and the consequences were

00:12:58,970 --> 00:13:02,930
dire you still use the bandwidth

00:13:01,640 --> 00:13:05,510
obviously because you download the video

00:13:02,930 --> 00:13:08,540
now using like xhr you devastate the

00:13:05,510 --> 00:13:11,240
battery because decoding and JavaScript

00:13:08,540 --> 00:13:15,740
happens on the cpu this is typically on

00:13:11,240 --> 00:13:17,420
devices that have you know a decoder in

00:13:15,740 --> 00:13:20,810
hardware that could do this essentially

00:13:17,420 --> 00:13:22,310
without using very little battery so

00:13:20,810 --> 00:13:24,350
it's running totally on the UI thread

00:13:22,310 --> 00:13:27,020
the page shanks because it runs on the

00:13:24,350 --> 00:13:30,980
UI thread and and the worst part of this

00:13:27,020 --> 00:13:34,070
is that now the legit players on this

00:13:30,980 --> 00:13:35,270
Web like us basically we want to do

00:13:34,070 --> 00:13:37,700
autoplay we can we

00:13:35,270 --> 00:13:41,270
we wouldn't do this but the bad guys can

00:13:37,700 --> 00:13:44,510
and so this is I think a good example

00:13:41,270 --> 00:13:46,490
for how you have to be careful with

00:13:44,510 --> 00:13:49,130
doing these interventions because the

00:13:46,490 --> 00:13:50,210
workarounds which typically do exist

00:13:49,130 --> 00:13:53,140
once you have a Turing complete

00:13:50,210 --> 00:13:55,610
programming language can be much worse

00:13:53,140 --> 00:13:59,060
all right this is the very dark part of

00:13:55,610 --> 00:14:01,760
this talk um I wanted to continue and

00:13:59,060 --> 00:14:06,230
talk about how we as developers can

00:14:01,760 --> 00:14:08,060
handle it better my friend may know

00:14:06,230 --> 00:14:10,730
typically says like let's put on the web

00:14:08,060 --> 00:14:14,810
wetsuit and jump into the like how

00:14:10,730 --> 00:14:19,580
can we how come we embrace the bad thing

00:14:14,810 --> 00:14:22,580
and at least handle it and as this comes

00:14:19,580 --> 00:14:24,080
back for when we like basically we're

00:14:22,580 --> 00:14:27,290
working on amp and we're thinking like

00:14:24,080 --> 00:14:28,880
how can we you know we this stuff is on

00:14:27,290 --> 00:14:31,430
the web we have to deal with it like

00:14:28,880 --> 00:14:35,660
it's there what can we do and so we

00:14:31,430 --> 00:14:39,650
decided to basically put all the like 3p

00:14:35,660 --> 00:14:41,690
code behind this barbed wire fence and

00:14:39,650 --> 00:14:46,430
on the web that always means essentially

00:14:41,690 --> 00:14:48,590
an iframe and and the first thing we did

00:14:46,430 --> 00:14:50,900
was pretty simple I think it makes a lot

00:14:48,590 --> 00:14:52,490
of sense which that it once you haven't

00:14:50,900 --> 00:14:55,340
like something i frame you can decide

00:14:52,490 --> 00:14:57,950
not to load it load content first then

00:14:55,340 --> 00:15:04,000
you look everything else let's pray say

00:14:57,950 --> 00:15:08,930
forward next part is that what i call a

00:15:04,000 --> 00:15:10,880
generally containment right so if if you

00:15:08,930 --> 00:15:13,100
need to load someone else's code having

00:15:10,880 --> 00:15:16,010
it in an iframe sandbox can be very

00:15:13,100 --> 00:15:18,980
useful it gives you you know better

00:15:16,010 --> 00:15:20,930
security for example in amp when you

00:15:18,980 --> 00:15:23,000
load an ad it will be on a randomly

00:15:20,930 --> 00:15:25,100
generated domain right so they can

00:15:23,000 --> 00:15:27,200
totally go and set some like local

00:15:25,100 --> 00:15:30,560
storage but they will never again at

00:15:27,200 --> 00:15:33,950
least in the time of the current

00:15:30,560 --> 00:15:36,710
universe that same domain right so that

00:15:33,950 --> 00:15:38,000
local storage is just gone um and then

00:15:36,710 --> 00:15:39,170
there's not the middle also means

00:15:38,000 --> 00:15:42,650
there's nothing on it that you could

00:15:39,170 --> 00:15:45,500
hack right you have control of our

00:15:42,650 --> 00:15:47,000
resizing because like in typically the

00:15:45,500 --> 00:15:48,650
third party code you load it into your

00:15:47,000 --> 00:15:48,950
page they own everything they can do

00:15:48,650 --> 00:15:51,380
whatever

00:15:48,950 --> 00:15:53,120
they want once it's an iframe they have

00:15:51,380 --> 00:15:55,850
to ask you like I would like to be

00:15:53,120 --> 00:15:59,240
bigger and then you can say no or like

00:15:55,850 --> 00:16:02,570
yeah it's cool but it's up to you and I

00:15:59,240 --> 00:16:05,270
think one of the also not obvious things

00:16:02,570 --> 00:16:08,720
is once you have it an iframe you can

00:16:05,270 --> 00:16:11,510
just kill the iframe so one thing well

00:16:08,720 --> 00:16:13,520
if everything's on the same frame you

00:16:11,510 --> 00:16:15,260
load the JavaScript like it's very it's

00:16:13,520 --> 00:16:17,030
like you could kill the Dom they render

00:16:15,260 --> 00:16:18,740
it but all this would still be

00:16:17,030 --> 00:16:20,210
there they might hold onto references

00:16:18,740 --> 00:16:22,550
the Dom so it couldn't really be garbage

00:16:20,210 --> 00:16:26,540
collected so having an eye from is very

00:16:22,550 --> 00:16:28,040
clean that you can say ah go away and it

00:16:26,540 --> 00:16:31,970
really has gone that the memory comes

00:16:28,040 --> 00:16:35,750
back and the best feature which isn't

00:16:31,970 --> 00:16:39,470
completely obvious is that iframes also

00:16:35,750 --> 00:16:40,670
made a gate documented right so um and

00:16:39,470 --> 00:16:42,500
this is completely not obvious I think

00:16:40,670 --> 00:16:45,110
on so if you have a documented right in

00:16:42,500 --> 00:16:49,240
iframe that doesn't actually have the

00:16:45,110 --> 00:16:52,940
same blocking behavior on the other page

00:16:49,240 --> 00:16:54,560
yeah last thing that we do and which we

00:16:52,940 --> 00:16:56,060
so far haven't really talked about

00:16:54,560 --> 00:17:00,770
because it's a kind of a get in mouse

00:16:56,060 --> 00:17:04,880
game is that we intervene on behalf of

00:17:00,770 --> 00:17:05,990
the user so we it's not a thing if you

00:17:04,880 --> 00:17:08,060
have something I frame you can like

00:17:05,990 --> 00:17:10,130
globally change everything in it but

00:17:08,060 --> 00:17:16,280
it's our iframe and so we can throttle

00:17:10,130 --> 00:17:17,540
timers and probably shouldn't use these

00:17:16,280 --> 00:17:20,000
words because they sound really

00:17:17,540 --> 00:17:21,620
dangerous but basically what there is so

00:17:20,000 --> 00:17:23,839
there's code in that I frame that says

00:17:21,620 --> 00:17:26,360
oh you made another child iframe i'm

00:17:23,839 --> 00:17:28,700
going to go there and do the same thing

00:17:26,360 --> 00:17:32,960
and what I'm doing is I am throttling

00:17:28,700 --> 00:17:34,580
timers so I like I'm going to show code

00:17:32,960 --> 00:17:37,130
for that so basically if something's not

00:17:34,580 --> 00:17:39,080
on screen like why should you be able to

00:17:37,130 --> 00:17:40,760
like call set interval with like 16

00:17:39,080 --> 00:17:43,190
milliseconds right it doesn't really

00:17:40,760 --> 00:17:47,360
make sense um but they do it all the

00:17:43,190 --> 00:17:50,810
time so we have code like this and its

00:17:47,360 --> 00:17:52,760
really like this is really dirty so one

00:17:50,810 --> 00:17:55,490
like basically there's just one example

00:17:52,760 --> 00:17:57,830
there's like five similar monkey

00:17:55,490 --> 00:18:00,740
patching functions that go through all

00:17:57,830 --> 00:18:01,910
the various ways how you could create an

00:18:00,740 --> 00:18:04,340
iframe

00:18:01,910 --> 00:18:06,080
and one of them is that you create an

00:18:04,340 --> 00:18:07,550
iframe but a new document right into the

00:18:06,080 --> 00:18:09,650
iframe there's actually a legit use of

00:18:07,550 --> 00:18:12,650
document right but in this case you have

00:18:09,650 --> 00:18:15,500
to call document close and so we monkey

00:18:12,650 --> 00:18:18,320
patch it we eventually call the original

00:18:15,500 --> 00:18:20,480
but we basically be just before calling

00:18:18,320 --> 00:18:22,730
that close we documented write another

00:18:20,480 --> 00:18:26,570
script tag into the iframe and basically

00:18:22,730 --> 00:18:28,880
recursively call us to run that same

00:18:26,570 --> 00:18:32,600
kind of we call it manage it's like a

00:18:28,880 --> 00:18:34,730
nice word for like 40 link timers so we

00:18:32,600 --> 00:18:37,040
go into a recursive time I frame and and

00:18:34,730 --> 00:18:39,800
run the same code again and again and

00:18:37,040 --> 00:18:42,710
the actual code looks like this so again

00:18:39,800 --> 00:18:44,270
we monkey patch set timeout in this case

00:18:42,710 --> 00:18:46,550
and there's like similar code for like

00:18:44,270 --> 00:18:50,630
set interval requestanimationframe and

00:18:46,550 --> 00:18:52,730
in various cases in there and so x is

00:18:50,630 --> 00:18:55,610
one of the simplest one so we basically

00:18:52,730 --> 00:18:58,100
just forward the set time a call to the

00:18:55,610 --> 00:19:02,780
system set timeout but before doing so

00:18:58,100 --> 00:19:05,120
we we overwrite the time at least

00:19:02,780 --> 00:19:06,860
potentially the second function is the

00:19:05,120 --> 00:19:11,540
function we actually have so what we

00:19:06,860 --> 00:19:13,460
saying is if you're in viewport you get

00:19:11,540 --> 00:19:15,740
whatever time you want it but if you're

00:19:13,460 --> 00:19:18,980
not in viewport we'll just add a second

00:19:15,740 --> 00:19:20,570
to whatever you ask it makes sense to

00:19:18,980 --> 00:19:22,430
always add a second because that means

00:19:20,570 --> 00:19:24,020
the order that they expect is still the

00:19:22,430 --> 00:19:27,350
same right you go from like 10

00:19:24,020 --> 00:19:28,850
milliseconds to 1010 or went from like

00:19:27,350 --> 00:19:31,070
even if they ask for 10 which will be

00:19:28,850 --> 00:19:33,110
legit they get 11 so that's kind of like

00:19:31,070 --> 00:19:34,850
doesn't really matter we wouldn't have

00:19:33,110 --> 00:19:38,150
cared but at least the orders now as

00:19:34,850 --> 00:19:39,980
expected and so so all of these things

00:19:38,150 --> 00:19:42,560
together really make a difference so we

00:19:39,980 --> 00:19:46,040
I particularly saw this ad that was

00:19:42,560 --> 00:19:49,250
using this like Bravo ajs style h.264

00:19:46,040 --> 00:19:51,890
decoding and it was um even if the ad

00:19:49,250 --> 00:19:55,820
was invisible the page was basically

00:19:51,890 --> 00:19:58,070
unusable and with this code the page is

00:19:55,820 --> 00:20:00,170
only in visit unusable when you see the

00:19:58,070 --> 00:20:01,550
ad which is actually a big step forward

00:20:00,170 --> 00:20:03,650
because you can start reading everything

00:20:01,550 --> 00:20:05,030
else and you can like scroll away

00:20:03,650 --> 00:20:08,470
because it's like almost as big as the

00:20:05,030 --> 00:20:12,190
screen and then everything works again

00:20:08,470 --> 00:20:12,190
right and and so

00:20:13,940 --> 00:20:18,350
we the questions like whether we

00:20:16,909 --> 00:20:21,620
actually went to the AP website and

00:20:18,350 --> 00:20:27,860
licensed this picture which you can I

00:20:21,620 --> 00:20:30,710
learned yes are we done I you know I

00:20:27,860 --> 00:20:33,620
think that like this type of mitigation

00:20:30,710 --> 00:20:35,600
where you handle someone else's code is

00:20:33,620 --> 00:20:37,909
very very important because third-party

00:20:35,600 --> 00:20:39,230
javascript is everywhere and like you

00:20:37,909 --> 00:20:41,990
totally want to show some tweet

00:20:39,230 --> 00:20:43,730
somewhere right and that's fine um so

00:20:41,990 --> 00:20:46,580
it's not something that's going to go

00:20:43,730 --> 00:20:48,200
away and that's why I think it's

00:20:46,580 --> 00:20:52,730
important to talk about how you can

00:20:48,200 --> 00:20:55,070
handle it but in the I think in the

00:20:52,730 --> 00:20:57,860
particular ads case we can actually do

00:20:55,070 --> 00:20:59,750
better so I again like I'm obviously

00:20:57,860 --> 00:21:02,149
working at Google we do render some of

00:20:59,750 --> 00:21:05,990
the ads in the internet so I think like

00:21:02,149 --> 00:21:08,659
my team is both the privilege and the in

00:21:05,990 --> 00:21:12,529
some words responsibility to actually

00:21:08,659 --> 00:21:15,799
fix it so I'm not actually going to dive

00:21:12,529 --> 00:21:19,700
into what exactly we're going to do but

00:21:15,799 --> 00:21:23,090
I I did write a long blog post about

00:21:19,700 --> 00:21:25,639
this a bit ly flash and for as the

00:21:23,090 --> 00:21:28,940
number of ads for our details for the

00:21:25,639 --> 00:21:30,289
long term plan so basically while there

00:21:28,940 --> 00:21:33,100
still will be JavaScript around

00:21:30,289 --> 00:21:38,289
everywhere we're super super hopeful

00:21:33,100 --> 00:21:41,029
that we can at least have a more like

00:21:38,289 --> 00:21:43,509
like a healthier at advertising

00:21:41,029 --> 00:21:45,980
ecosystem were like you don't have to

00:21:43,509 --> 00:21:48,700
mitigate them like everyone's kind of a

00:21:45,980 --> 00:21:51,200
legit player yeah that's all I have

00:21:48,700 --> 00:21:53,269
again I'm melta crime force on on

00:21:51,200 --> 00:21:55,419
Twitter github etcetera thank you very

00:21:53,269 --> 00:21:55,419

YouTube URL: https://www.youtube.com/watch?v=jO1TNGNTwpc


