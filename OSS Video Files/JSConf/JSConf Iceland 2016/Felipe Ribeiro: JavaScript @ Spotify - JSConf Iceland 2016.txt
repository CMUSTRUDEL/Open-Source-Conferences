Title: Felipe Ribeiro: JavaScript @ Spotify - JSConf Iceland 2016
Publication date: 2016-09-20
Playlist: JSConf Iceland 2016
Description: 
	A talk about the architecture of the Spotify Desktop application, which is currently based on Web technologies. How we organize our teams, war stories and lessons learned during our development process.

This is not a talk about one specific framework or tool, but about how we work with JavaScript in an environment that is a bit different from most web-based apps, the experiences we've had and some ideas that can be useful and applicable in different contexts.
Captions: 
	00:00:13,190 --> 00:00:19,710
hi I'm Felipe I'm a lead developer at

00:00:17,940 --> 00:00:23,700
Spotify I'm based in Stockholm Sweden

00:00:19,710 --> 00:00:25,400
and I work in the team responsible for

00:00:23,700 --> 00:00:28,169
the infrastructure of our desktop

00:00:25,400 --> 00:00:30,270
application and today I'm going to talk

00:00:28,169 --> 00:00:32,279
about how we've been using javascript in

00:00:30,270 --> 00:00:35,280
our client and I'll be sharing some of

00:00:32,279 --> 00:00:37,140
our architectural details and a bit of

00:00:35,280 --> 00:00:38,790
the of the stories of the thing that we

00:00:37,140 --> 00:00:40,050
tried and worked for us things that we

00:00:38,790 --> 00:00:44,850
tried and didn't work for us

00:00:40,050 --> 00:00:45,960
and what we learned from them so I've

00:00:44,850 --> 00:00:47,160
been chatting with some people here at

00:00:45,960 --> 00:00:49,410
the conference and I realize a lot of

00:00:47,160 --> 00:00:51,239
people don't know that Spotify for

00:00:49,410 --> 00:00:56,340
desktop is based on that technologies

00:00:51,239 --> 00:00:59,039
but it is and right now we do have a lot

00:00:56,340 --> 00:01:02,879
of native code but the whole UI is

00:00:59,039 --> 00:01:05,370
web-based so the the goal of this talks

00:01:02,879 --> 00:01:09,500
to present the story of how I got there

00:01:05,370 --> 00:01:12,630
and everything we learn in this process

00:01:09,500 --> 00:01:14,549
but before getting into where we are

00:01:12,630 --> 00:01:16,380
today I'd like to go back to the

00:01:14,549 --> 00:01:18,600
beginning of the Spotify history and

00:01:16,380 --> 00:01:20,130
describe the journey until now like the

00:01:18,600 --> 00:01:23,130
devolution of the dis oft where how it

00:01:20,130 --> 00:01:24,600
started and how it is right now so it

00:01:23,130 --> 00:01:27,420
all started like 10 years ago this is

00:01:24,600 --> 00:01:30,390
the first sketch of the idea in 2006 two

00:01:27,420 --> 00:01:31,560
guys in Sweden had this idea that we

00:01:30,390 --> 00:01:34,079
needed to change the music market

00:01:31,560 --> 00:01:36,180
because piracy was taking over we needed

00:01:34,079 --> 00:01:38,329
something that would allow people to

00:01:36,180 --> 00:01:41,130
consume music that would be just

00:01:38,329 --> 00:01:42,600
convenient that they could use all the

00:01:41,130 --> 00:01:45,240
music they could listen to all the music

00:01:42,600 --> 00:01:48,509
in the world and there to just look like

00:01:45,240 --> 00:01:50,189
they were using their own library and it

00:01:48,509 --> 00:01:51,960
should be an alternative to piracy it

00:01:50,189 --> 00:01:55,289
should be convenient safe to use and

00:01:51,960 --> 00:02:02,369
free and fair to the artists so they get

00:01:55,289 --> 00:02:05,310
paid by by their music and however that

00:02:02,369 --> 00:02:08,070
idea came in 2006 but what if I was just

00:02:05,310 --> 00:02:09,300
really released to user 2008 and the

00:02:08,070 --> 00:02:11,490
reason for that was not just the

00:02:09,300 --> 00:02:13,470
technological challenges but mostly the

00:02:11,490 --> 00:02:15,600
business challenges around that because

00:02:13,470 --> 00:02:17,700
what was disrupt in a market and it's a

00:02:15,600 --> 00:02:19,470
really traditional and big market where

00:02:17,700 --> 00:02:22,690
they have really conservative ideas of

00:02:19,470 --> 00:02:25,360
how things should work so it was a long

00:02:22,690 --> 00:02:27,730
journey of negotiations and contracts

00:02:25,360 --> 00:02:31,060
with record labels and trying to get the

00:02:27,730 --> 00:02:33,840
idea that this model should work and

00:02:31,060 --> 00:02:38,050
then this was 2008 more or less and

00:02:33,840 --> 00:02:41,410
around 2011 but if I had already grew a

00:02:38,050 --> 00:02:45,250
lot it it was mostly in Europe had just

00:02:41,410 --> 00:02:47,410
opened in the US and then there was a

00:02:45,250 --> 00:02:50,260
need both from Spotify and from other

00:02:47,410 --> 00:02:52,030
developers to build the community so

00:02:50,260 --> 00:02:53,830
Spotify really is a platform where

00:02:52,030 --> 00:02:58,780
third-party developers could write their

00:02:53,830 --> 00:03:00,790
apps and run them inside fortify so you

00:02:58,780 --> 00:03:02,230
could have things such as last.fm for

00:03:00,790 --> 00:03:03,610
example you could use their

00:03:02,230 --> 00:03:05,440
recommendations inside this part if a

00:03:03,610 --> 00:03:07,510
client I think like that this platform

00:03:05,440 --> 00:03:08,770
is no longer available but it is very

00:03:07,510 --> 00:03:11,290
important to the story I'm gonna wanna

00:03:08,770 --> 00:03:13,660
tell today we change the approach to

00:03:11,290 --> 00:03:15,550
have third-party developers that for

00:03:13,660 --> 00:03:18,250
another model that works better for them

00:03:15,550 --> 00:03:20,260
and for us that's exposing SDKs that

00:03:18,250 --> 00:03:23,550
they can use in their absence of having

00:03:20,260 --> 00:03:26,709
their code running sorry all right and

00:03:23,550 --> 00:03:28,450
in order to make that that platform work

00:03:26,709 --> 00:03:30,820
and has something that other developers

00:03:28,450 --> 00:03:33,730
could work with we started having web

00:03:30,820 --> 00:03:37,570
build inside the client and for that we

00:03:33,730 --> 00:03:40,900
use Seth Seth stands for chromium

00:03:37,570 --> 00:03:43,570
embedded framework and it's not a

00:03:40,900 --> 00:03:47,140
spoiler as electron or node WebKit but

00:03:43,570 --> 00:03:49,570
it's older than Windows and what it does

00:03:47,140 --> 00:03:54,970
is basically the same but it requires a

00:03:49,570 --> 00:03:57,910
bit more of C++ code to integrate and

00:03:54,970 --> 00:04:01,570
then it allows us to embed some web

00:03:57,910 --> 00:04:04,840
build inside the client and it is an

00:04:01,570 --> 00:04:07,840
open source project that is used mostly

00:04:04,840 --> 00:04:10,600
by Spotify but also for steam they gave

00:04:07,840 --> 00:04:12,730
me a platform and there's some projects

00:04:10,600 --> 00:04:18,359
made by Adobe and of course some smaller

00:04:12,730 --> 00:04:21,640
projects as well so at the time we had

00:04:18,359 --> 00:04:24,580
this describe that was mostly C++ but we

00:04:21,640 --> 00:04:28,440
had this web bills that were just a

00:04:24,580 --> 00:04:31,900
regular web pages and in those web pages

00:04:28,440 --> 00:04:34,330
everything was sent both so from the

00:04:31,900 --> 00:04:35,260
developer perspective they day on the

00:04:34,330 --> 00:04:37,960
whole document

00:04:35,260 --> 00:04:40,060
don was belong to to their app they had

00:04:37,960 --> 00:04:41,890
the global scope for JavaScript and they

00:04:40,060 --> 00:04:43,690
could use a JavaScript API to talk to

00:04:41,890 --> 00:04:46,120
this modify functionality such as

00:04:43,690 --> 00:04:47,590
playback control or fetching the user

00:04:46,120 --> 00:04:49,270
playlist anything like that there was an

00:04:47,590 --> 00:04:52,330
API that they could use for that and

00:04:49,270 --> 00:04:54,850
then we started dogfooding this platform

00:04:52,330 --> 00:04:57,130
internally and changing over our

00:04:54,850 --> 00:04:59,530
internal reveals in the client to use

00:04:57,130 --> 00:05:01,210
this apps platform and that's how I'm

00:04:59,530 --> 00:05:03,670
gonna call those deals from now on their

00:05:01,210 --> 00:05:05,170
apps so for example they are this video

00:05:03,670 --> 00:05:07,870
in the clients now in a have just like a

00:05:05,170 --> 00:05:11,760
third-party app that is what HTML

00:05:07,870 --> 00:05:11,760
Javascript and CSS and use the same API

00:05:13,210 --> 00:05:20,580
two years later 2011 2013 it's what if I

00:05:17,230 --> 00:05:23,050
went to it for its first big UI change

00:05:20,580 --> 00:05:27,010
Spotify went black it was great and

00:05:23,050 --> 00:05:30,850
black and then replacing all the C++ UI

00:05:27,010 --> 00:05:33,790
components was painful mostly because we

00:05:30,850 --> 00:05:38,130
use some custom C++ libraries built

00:05:33,790 --> 00:05:41,590
in-house and that's usually not fun and

00:05:38,130 --> 00:05:43,630
also at this time the first laptops with

00:05:41,590 --> 00:05:45,430
high DPI screens or the retina screens

00:05:43,630 --> 00:05:48,010
as they're called starting popping up in

00:05:45,430 --> 00:05:49,240
the market and you could start seeing

00:05:48,010 --> 00:05:51,760
differences when you open the client in

00:05:49,240 --> 00:05:54,340
a retina screen that there were bills

00:05:51,760 --> 00:05:57,280
had support for that out of the box but

00:05:54,340 --> 00:05:59,950
our our C++ UI components didn't so it

00:05:57,280 --> 00:06:02,800
could see some blurry text 2012 C++ view

00:05:59,950 --> 00:06:06,250
and a really nice that rendered tax it

00:06:02,800 --> 00:06:08,710
was a web view so it was a bit

00:06:06,250 --> 00:06:12,610
complicated and what we kept this this

00:06:08,710 --> 00:06:13,930
hybrid approach at this time and then

00:06:12,610 --> 00:06:16,420
one year later there was another

00:06:13,930 --> 00:06:18,580
iteration of the client well we still

00:06:16,420 --> 00:06:21,400
had a very similar UI but we had a

00:06:18,580 --> 00:06:26,020
really big difference in terms of of the

00:06:21,400 --> 00:06:28,330
stack we went full web so all the UI

00:06:26,020 --> 00:06:33,280
code that was before in C++ was removed

00:06:28,330 --> 00:06:36,520
and replaced by by HTML and JavaScript

00:06:33,280 --> 00:06:39,910
and things that were done as regular C++

00:06:36,520 --> 00:06:41,380
method calls became api's exposed to the

00:06:39,910 --> 00:06:45,790
JavaScript layer that could be called

00:06:41,380 --> 00:06:48,610
from there so now we have this client

00:06:45,790 --> 00:06:51,159
that's fully fully web-based

00:06:48,610 --> 00:06:53,199
and for us developers there was a big

00:06:51,159 --> 00:06:55,599
advantage of that because it's of course

00:06:53,199 --> 00:06:58,330
much faster and easier to develop on it

00:06:55,599 --> 00:07:00,969
and we gained some things for free by by

00:06:58,330 --> 00:07:03,669
using this deck such as the the retina

00:07:00,969 --> 00:07:05,800
support as I said before but also it's

00:07:03,669 --> 00:07:07,090
better for accessibility because you can

00:07:05,800 --> 00:07:12,159
integrate better screen readers for

00:07:07,090 --> 00:07:16,030
users with visual impairment and other

00:07:12,159 --> 00:07:17,949
accessibility issues but then to get

00:07:16,030 --> 00:07:19,960
them into a big dilemma that I think

00:07:17,949 --> 00:07:22,629
most developers in this room and outside

00:07:19,960 --> 00:07:25,750
this room have been through so you have

00:07:22,629 --> 00:07:27,430
this big codebase that works and it

00:07:25,750 --> 00:07:30,069
attends your needs but it's really hard

00:07:27,430 --> 00:07:32,560
to work with should we actually rewrite

00:07:30,069 --> 00:07:34,689
that code it's usually an anti-pattern

00:07:32,560 --> 00:07:37,449
you were replacing something that work

00:07:34,689 --> 00:07:41,139
works and in risks too it can introduce

00:07:37,449 --> 00:07:44,529
new bugs and all of that and then also

00:07:41,139 --> 00:07:47,710
in this case we had gonna replace this

00:07:44,529 --> 00:07:52,210
new this big chunk of code but there is

00:07:47,710 --> 00:07:53,949
no really any visible visual any visible

00:07:52,210 --> 00:07:57,550
gain for the users at least short term

00:07:53,949 --> 00:08:00,490
so it's kind of questionable if it's

00:07:57,550 --> 00:08:02,529
actually worth it and then like the old

00:08:00,490 --> 00:08:04,839
code we had the C++ code that had been

00:08:02,529 --> 00:08:06,669
around for several years it said has

00:08:04,839 --> 00:08:09,339
been tested a lot we knew that it worked

00:08:06,669 --> 00:08:11,050
well if we just replace it before a new

00:08:09,339 --> 00:08:13,599
code base could be introducing a lot of

00:08:11,050 --> 00:08:16,120
new bugs and it was of course the

00:08:13,599 --> 00:08:17,949
opportunity cost so it will be right not

00:08:16,120 --> 00:08:19,449
cold and then you were missing the

00:08:17,949 --> 00:08:21,189
opportunity to build new new features

00:08:19,449 --> 00:08:22,419
and you can also block the development

00:08:21,189 --> 00:08:24,580
of new features because we're rewriting

00:08:22,419 --> 00:08:27,870
a toad code so there are several

00:08:24,580 --> 00:08:30,789
arguments not to rewrite code that works

00:08:27,870 --> 00:08:32,349
so and when when you discuss in the team

00:08:30,789 --> 00:08:33,760
about rewrites

00:08:32,349 --> 00:08:36,370
those discussions can be really

00:08:33,760 --> 00:08:38,169
emotionally charged because people got

00:08:36,370 --> 00:08:42,779
can get attached to their the code they

00:08:38,169 --> 00:08:44,709
wrote and some people can also have a

00:08:42,779 --> 00:08:46,180
can kind of hate

00:08:44,709 --> 00:08:49,540
code that they didn't work because they

00:08:46,180 --> 00:08:51,190
don't understand because writing code is

00:08:49,540 --> 00:08:52,360
easy but reading code is hard and then

00:08:51,190 --> 00:08:54,640
sometimes when you got someone else's

00:08:52,360 --> 00:08:56,920
code you can just throw it away and

00:08:54,640 --> 00:08:58,240
build it yourself but you have to be

00:08:56,920 --> 00:09:01,510
pragmatic when I think about these

00:08:58,240 --> 00:09:04,180
things and then we try to apply a bit of

00:09:01,510 --> 00:09:06,640
Janene thinking on that and I when I say

00:09:04,180 --> 00:09:08,710
engineer thinking I mean that engineers

00:09:06,640 --> 00:09:11,890
should analyze trade-offs they should

00:09:08,710 --> 00:09:14,440
look for optimizations and it should

00:09:11,890 --> 00:09:15,940
look for improving the efficiency of the

00:09:14,440 --> 00:09:18,190
product and processes they're working on

00:09:15,940 --> 00:09:21,280
so how how could it do that in a way

00:09:18,190 --> 00:09:23,650
that we would be pragmatic about the

00:09:21,280 --> 00:09:26,170
trade-offs and try to optimize the cost

00:09:23,650 --> 00:09:28,720
and benefits gonna take all of it so we

00:09:26,170 --> 00:09:31,210
thought that we would be if you take

00:09:28,720 --> 00:09:33,730
this path and rewrite this C++ code in

00:09:31,210 --> 00:09:35,740
JavaScript we will be adding value by

00:09:33,730 --> 00:09:38,710
allowing us to iterate faster in the

00:09:35,740 --> 00:09:40,210
future and experiment with things in the

00:09:38,710 --> 00:09:43,810
UI that because you have a much more

00:09:40,210 --> 00:09:45,670
easier code to work with and then as a

00:09:43,810 --> 00:09:47,320
as a data driven company it's really

00:09:45,670 --> 00:09:49,300
important for us to do a/b testing and

00:09:47,320 --> 00:09:50,410
then it's nice if you have a code base

00:09:49,300 --> 00:09:53,470
that allows you to do that easily

00:09:50,410 --> 00:09:54,940
because you can iterate much faster and

00:09:53,470 --> 00:09:57,010
on the downside you had a really high

00:09:54,940 --> 00:09:59,560
implementation cost because I have to

00:09:57,010 --> 00:10:01,540
rewrite this whole code base but we we

00:09:59,560 --> 00:10:03,100
thought that it pay off over time

00:10:01,540 --> 00:10:06,010
because the maintenance cost will be

00:10:03,100 --> 00:10:07,840
much slower much much lower so we went

00:10:06,010 --> 00:10:11,500
ahead and thought that yeah let's do

00:10:07,840 --> 00:10:13,450
this and what I'm going to talk about is

00:10:11,500 --> 00:10:15,940
a bit of the architecture how we

00:10:13,450 --> 00:10:17,350
structured our our layers and our

00:10:15,940 --> 00:10:21,940
architecture in order to achieve this

00:10:17,350 --> 00:10:25,030
this go so I'm gonna describe it

00:10:21,940 --> 00:10:29,170
architecture but I'm not starting from

00:10:25,030 --> 00:10:30,520
the lowest layer so under everything

00:10:29,170 --> 00:10:32,740
there is what we call the client core

00:10:30,520 --> 00:10:34,960
and clients core is a hybrid that's

00:10:32,740 --> 00:10:38,080
habit Spotify that's the c++ library

00:10:34,960 --> 00:10:40,090
lets shared among all the main platforms

00:10:38,080 --> 00:10:42,670
so it's the same code base for Android

00:10:40,090 --> 00:10:45,220
iOS and that's top and what this library

00:10:42,670 --> 00:10:46,420
does is basically them the lower level

00:10:45,220 --> 00:10:48,370
things like it's just much before the

00:10:46,420 --> 00:10:50,650
streaming the code in playback audio

00:10:48,370 --> 00:10:52,060
drivers talk to the back and offline

00:10:50,650 --> 00:10:53,860
syncing and all those things that are

00:10:52,060 --> 00:10:57,670
common between those platforms in a more

00:10:53,860 --> 00:11:00,190
integrated in a lower level and above

00:10:57,670 --> 00:11:02,830
that so and then also like this client

00:11:00,190 --> 00:11:05,560
core is as it's used by several

00:11:02,830 --> 00:11:07,690
platforms the ownership is also shared

00:11:05,560 --> 00:11:10,420
by those teams so the infrastructure

00:11:07,690 --> 00:11:12,140
teams of those those platforms work

00:11:10,420 --> 00:11:15,510
together in this library

00:11:12,140 --> 00:11:20,160
above that had the client desktop layer

00:11:15,510 --> 00:11:21,480
what that what that is is basically the

00:11:20,160 --> 00:11:23,610
integration with operating systems with

00:11:21,480 --> 00:11:26,900
Windows and Mac and Linux limited Linux

00:11:23,610 --> 00:11:29,280
is kind of not officially supported and

00:11:26,900 --> 00:11:32,760
what it does also is to glue together

00:11:29,280 --> 00:11:36,680
the core and expose things to the web

00:11:32,760 --> 00:11:39,360
layer that's safe there is above it so

00:11:36,680 --> 00:11:41,550
that's what the client desktop does and

00:11:39,360 --> 00:11:43,920
if you were yesterday in that really

00:11:41,550 --> 00:11:47,130
nice talk about electron she talked

00:11:43,920 --> 00:11:48,810
about two processes the main process and

00:11:47,130 --> 00:11:51,030
the rendering process here is pretty

00:11:48,810 --> 00:11:52,560
much the same the two layers the bottom

00:11:51,030 --> 00:11:53,880
are the main process so we don't have

00:11:52,560 --> 00:11:57,230
any JavaScript running the main process

00:11:53,880 --> 00:11:59,730
but the render process are the rest

00:11:57,230 --> 00:12:02,250
so we have like the chromium embedded

00:11:59,730 --> 00:12:06,810
framework that basically just renders

00:12:02,250 --> 00:12:09,240
the our web views and the client desktop

00:12:06,810 --> 00:12:12,330
exposed some API through chromium added

00:12:09,240 --> 00:12:13,770
framework so we can talk to the core and

00:12:12,330 --> 00:12:16,620
then we have two two layers of

00:12:13,770 --> 00:12:18,930
JavaScript where JS container is more

00:12:16,620 --> 00:12:21,330
like a logic layer where we manage like

00:12:18,930 --> 00:12:23,700
navigation and playback state and things

00:12:21,330 --> 00:12:26,190
like that for more the container of the

00:12:23,700 --> 00:12:28,560
UI of the of the of the UI and the

00:12:26,190 --> 00:12:30,570
little boxes in the top are the actual

00:12:28,560 --> 00:12:33,930
videos the actual what we call the apps

00:12:30,570 --> 00:12:36,450
that are owned by different teams so for

00:12:33,930 --> 00:12:38,220
example have the Browse view or the the

00:12:36,450 --> 00:12:40,920
search playlist the artists they're all

00:12:38,220 --> 00:12:44,460
like their own little boxes that belong

00:12:40,920 --> 00:12:48,150
to different teams so if you want a more

00:12:44,460 --> 00:12:49,980
visual understand that of these

00:12:48,150 --> 00:12:54,800
JavaScript layers more or less like this

00:12:49,980 --> 00:12:56,880
our visualize and then we kept the same

00:12:54,800 --> 00:12:58,860
architecture for the apps as we did for

00:12:56,880 --> 00:12:59,370
the third-party developers a few years

00:12:58,860 --> 00:13:02,580
back

00:12:59,370 --> 00:13:04,860
and so the container is the main Chrome

00:13:02,580 --> 00:13:07,860
and the application it manages out that

00:13:04,860 --> 00:13:10,260
the apps inside it and that's our

00:13:07,860 --> 00:13:12,030
sandbox as I said before so they they

00:13:10,260 --> 00:13:14,370
only document they own the global scope

00:13:12,030 --> 00:13:15,300
and the way to do that was to use

00:13:14,370 --> 00:13:17,310
iframes

00:13:15,300 --> 00:13:19,740
and then some people might be a bit

00:13:17,310 --> 00:13:22,830
surprised like come on it's 2016 you're

00:13:19,740 --> 00:13:25,770
still using iframes and of course it's

00:13:22,830 --> 00:13:27,930
not idea what life is a trade-off

00:13:25,770 --> 00:13:29,570
right and then here's iframes was a

00:13:27,930 --> 00:13:32,970
really pragmatic decision at the time

00:13:29,570 --> 00:13:36,630
because iframes are relative abstraction

00:13:32,970 --> 00:13:39,330
for sandboxing on the web so we could

00:13:36,630 --> 00:13:41,400
guarantee for some level of guarantee

00:13:39,330 --> 00:13:43,920
that things are running there before

00:13:41,400 --> 00:13:47,760
their own environment that really leak

00:13:43,920 --> 00:13:51,810
things to other to other things and it's

00:13:47,760 --> 00:13:55,110
not our negative because imagine that it

00:13:51,810 --> 00:13:56,520
Spotify is not really like most web

00:13:55,110 --> 00:13:58,320
applications that people run on the

00:13:56,520 --> 00:13:59,820
browser and they close once in a while

00:13:58,320 --> 00:14:01,620
or like after a few hours or something

00:13:59,820 --> 00:14:03,000
something that people can leave the

00:14:01,620 --> 00:14:06,150
client open in the background for weeks

00:14:03,000 --> 00:14:09,960
and then newer leaks can be a big a big

00:14:06,150 --> 00:14:10,710
thing there in the client side and with

00:14:09,960 --> 00:14:13,830
iframes

00:14:10,710 --> 00:14:17,100
we can even though the iframe itself has

00:14:13,830 --> 00:14:18,420
a higher memory footprint we can just

00:14:17,100 --> 00:14:20,940
kill iframes and then release that

00:14:18,420 --> 00:14:22,350
memory much much more easier so the the

00:14:20,940 --> 00:14:24,300
feature developer got to work inside

00:14:22,350 --> 00:14:26,250
that iframe they don't need to care too

00:14:24,300 --> 00:14:27,660
much about that the video that they

00:14:26,250 --> 00:14:29,730
should care but not too much because the

00:14:27,660 --> 00:14:31,710
container can kind of manage okay this

00:14:29,730 --> 00:14:33,030
iframe has been idle yes let's just kill

00:14:31,710 --> 00:14:33,450
it to release the memory anything like

00:14:33,030 --> 00:14:36,960
that

00:14:33,450 --> 00:14:40,530
and keeping iframes when we did this

00:14:36,960 --> 00:14:43,410
rewrite reduce the risk of the rewrite

00:14:40,530 --> 00:14:46,440
because the rewrites didn't affect the

00:14:43,410 --> 00:14:47,970
apps themselves so it like the people

00:14:46,440 --> 00:14:50,040
who are working in the artist view

00:14:47,970 --> 00:14:51,210
weren't affect at all by the process

00:14:50,040 --> 00:14:53,130
that we meant by replacing

00:14:51,210 --> 00:14:55,170
infrastructure because they still kept

00:14:53,130 --> 00:14:57,060
their sandbox environment so it's

00:14:55,170 --> 00:14:59,250
something that we used to reduce reduce

00:14:57,060 --> 00:15:04,530
risk and it's migration period and you

00:14:59,250 --> 00:15:07,320
can iterate on it afterwards so based on

00:15:04,530 --> 00:15:09,480
what I said so far of the having these

00:15:07,320 --> 00:15:12,510
two layers of JavaScript a lot of custom

00:15:09,480 --> 00:15:15,000
custom libraries and tools how do we

00:15:12,510 --> 00:15:18,930
actually organize our code and then this

00:15:15,000 --> 00:15:23,340
is something that we did and seems

00:15:18,930 --> 00:15:25,980
really standard so we had the autos app

00:15:23,340 --> 00:15:27,330
so had one repository per app

00:15:25,980 --> 00:15:29,670
plane his browser I think their own

00:15:27,330 --> 00:15:31,440
repository had one repository per

00:15:29,670 --> 00:15:32,190
library so we had some libraries

00:15:31,440 --> 00:15:37,710
internally

00:15:32,190 --> 00:15:38,720
such as our UI library that has CSS and

00:15:37,710 --> 00:15:39,829
how buttons look

00:15:38,720 --> 00:15:42,139
I can templates and things like that

00:15:39,829 --> 00:15:43,759
have another library that does the

00:15:42,139 --> 00:15:46,009
Parsee no Spotify internal you are

00:15:43,759 --> 00:15:47,629
either things like that and we had we

00:15:46,009 --> 00:15:50,149
had an instance of an internal in game

00:15:47,629 --> 00:15:52,310
registry to distribute this libraries so

00:15:50,149 --> 00:15:53,060
it seems pretty standard but no didn't

00:15:52,310 --> 00:15:56,389
work for us

00:15:53,060 --> 00:16:02,089
which is also can be surprising for some

00:15:56,389 --> 00:16:04,100
people and why didn't it work it's like

00:16:02,089 --> 00:16:04,939
everything had their their little things

00:16:04,100 --> 00:16:06,980
they're organized

00:16:04,939 --> 00:16:10,310
everything seems really encapsulated but

00:16:06,980 --> 00:16:12,709
why didn't it work it was really hard to

00:16:10,310 --> 00:16:14,389
coordinate horizontal changes and when I

00:16:12,709 --> 00:16:16,430
mean horizontal changes like a change

00:16:14,389 --> 00:16:19,129
that affects affect many views so

00:16:16,430 --> 00:16:22,430
suppose you were working in the generic

00:16:19,129 --> 00:16:24,829
UI library for Spotify and then you want

00:16:22,430 --> 00:16:27,139
to change the shade of green

00:16:24,829 --> 00:16:29,750
that that's a display or the behavior of

00:16:27,139 --> 00:16:34,370
the play button that is everywhere in

00:16:29,750 --> 00:16:37,550
the client so you had to make the change

00:16:34,370 --> 00:16:39,829
in a library and make sure all the apps

00:16:37,550 --> 00:16:41,660
have new builds that fetch on your

00:16:39,829 --> 00:16:43,399
change and so it involved a lot of

00:16:41,660 --> 00:16:46,670
communication and syncing between teams

00:16:43,399 --> 00:16:50,300
and especially stressful before releases

00:16:46,670 --> 00:16:52,490
it's a bit hard to coordinate and that

00:16:50,300 --> 00:16:54,829
could also cause some cascade effect on

00:16:52,490 --> 00:16:56,660
library updates so imagine you are

00:16:54,829 --> 00:16:58,040
changing a really basic library that

00:16:56,660 --> 00:16:59,569
there is another library depends on it

00:16:58,040 --> 00:17:01,399
and another library and an app that

00:16:59,569 --> 00:17:02,750
depends on it to make sure that all the

00:17:01,399 --> 00:17:04,669
versions were bumped and dependencies

00:17:02,750 --> 00:17:06,470
are not I think they're active so the

00:17:04,669 --> 00:17:11,419
the communication overhead was really

00:17:06,470 --> 00:17:12,549
really high with this model it also

00:17:11,419 --> 00:17:16,010
complicated continuous integration

00:17:12,549 --> 00:17:17,419
that's the billeting standardization it

00:17:16,010 --> 00:17:20,030
complicated continues integration

00:17:17,419 --> 00:17:21,770
because the builds need the bit

00:17:20,030 --> 00:17:23,720
pipelines needs to be changed somehow

00:17:21,770 --> 00:17:27,439
so we wanted to make sure that if I

00:17:23,720 --> 00:17:28,580
change something and after it builds I

00:17:27,439 --> 00:17:29,720
want to also build the things that

00:17:28,580 --> 00:17:31,880
depend on it because I have to keep

00:17:29,720 --> 00:17:34,909
consistency my product even though some

00:17:31,880 --> 00:17:38,030
semver is is a good idea it might might

00:17:34,909 --> 00:17:40,190
have something that we need to to force

00:17:38,030 --> 00:17:42,409
glaber's to be updated so we need to

00:17:40,190 --> 00:17:45,830
trigger new builds of things that depend

00:17:42,409 --> 00:17:47,390
on my library so we if you actually need

00:17:45,830 --> 00:17:49,669
it to work I will need to create a

00:17:47,390 --> 00:17:50,870
really complex graph of dependencies in

00:17:49,669 --> 00:17:52,100
the bill wipe lines

00:17:50,870 --> 00:17:55,760
it's not something that you wanna do

00:17:52,100 --> 00:17:59,390
and for Standardization it's also hard

00:17:55,760 --> 00:18:00,830
because evacuating silos so different

00:17:59,390 --> 00:18:05,120
teams will build things in different

00:18:00,830 --> 00:18:08,900
ways and use different tools and that's

00:18:05,120 --> 00:18:10,370
a bit it goes a bit with autonomy that

00:18:08,900 --> 00:18:13,430
autonomy is usually good but you need

00:18:10,370 --> 00:18:16,400
some alignment and then it these

00:18:13,430 --> 00:18:20,060
architecture it makes a language more

00:18:16,400 --> 00:18:22,310
difficult so little how it looked like

00:18:20,060 --> 00:18:24,890
so suppose like you have like the

00:18:22,310 --> 00:18:27,230
playlist step the radio app they depend

00:18:24,890 --> 00:18:29,380
on the same libraries but they depend on

00:18:27,230 --> 00:18:32,950
separate versions because they are in

00:18:29,380 --> 00:18:36,040
repositories their separate modules so

00:18:32,950 --> 00:18:38,570
you have those things and then average

00:18:36,040 --> 00:18:41,240
every every app had their own build

00:18:38,570 --> 00:18:42,470
pipeline so when you build you generate

00:18:41,240 --> 00:18:45,410
the artifacts and you could for example

00:18:42,470 --> 00:18:47,960
have playlists with a different style

00:18:45,410 --> 00:18:50,300
for the tracklist then in radio for

00:18:47,960 --> 00:18:51,440
example or a different sheet of green in

00:18:50,300 --> 00:18:54,760
the same release and that's not

00:18:51,440 --> 00:18:59,150
something we want to have so we started

00:18:54,760 --> 00:19:02,750
investigating into it how could we avoid

00:18:59,150 --> 00:19:04,730
this kind of problem so we checked out

00:19:02,750 --> 00:19:07,910
how other other companies were have been

00:19:04,730 --> 00:19:10,670
doing how to merge repositories and

00:19:07,910 --> 00:19:12,770
things like that so how could you

00:19:10,670 --> 00:19:14,720
mitigate those problems so basically

00:19:12,770 --> 00:19:18,860
what I did is we jumped into the mono

00:19:14,720 --> 00:19:21,710
repo we had a most of our repositories

00:19:18,860 --> 00:19:23,450
in a single one and it automatically

00:19:21,710 --> 00:19:28,010
addressed a lot of the issues that we

00:19:23,450 --> 00:19:29,390
had before it simplified a lot the

00:19:28,010 --> 00:19:31,640
continuous integration because we just

00:19:29,390 --> 00:19:33,200
have one build pipeline you change the

00:19:31,640 --> 00:19:36,740
repository you build everything and it's

00:19:33,200 --> 00:19:39,230
fine it's always like it always works as

00:19:36,740 --> 00:19:41,720
it should be and it's easier to test the

00:19:39,230 --> 00:19:43,070
impact of your changes so if you're

00:19:41,720 --> 00:19:45,740
making changes in the library you can

00:19:43,070 --> 00:19:47,840
just grab and see what it's been used

00:19:45,740 --> 00:19:49,340
and just fix it there and because of

00:19:47,840 --> 00:19:51,740
that you don't need to care about

00:19:49,340 --> 00:19:52,640
backwards compatibility which makes the

00:19:51,740 --> 00:19:54,440
code much simpler

00:19:52,640 --> 00:19:56,480
you don't need to keep old code there

00:19:54,440 --> 00:19:59,000
just make a change change whatever it's

00:19:56,480 --> 00:20:01,820
being used it's fine and you can do that

00:19:59,000 --> 00:20:04,130
in an atomic way so it can make a change

00:20:01,820 --> 00:20:04,809
in a library and the code that depends

00:20:04,130 --> 00:20:07,509
on it in a thing

00:20:04,809 --> 00:20:10,139
commit which makes it much easier to to

00:20:07,509 --> 00:20:13,450
go back and forth and roll back and

00:20:10,139 --> 00:20:16,629
everything so it is much easier for

00:20:13,450 --> 00:20:18,850
refactoring the code and it promotes

00:20:16,629 --> 00:20:20,980
some consistency in its narration across

00:20:18,850 --> 00:20:23,249
the board because the articles in a

00:20:20,980 --> 00:20:26,379
single place

00:20:23,249 --> 00:20:28,360
so now we had like this single posit Ori

00:20:26,379 --> 00:20:29,710
the single build pipeline and we could

00:20:28,360 --> 00:20:31,149
have consistency that dependencies

00:20:29,710 --> 00:20:37,149
because they're all searching the same

00:20:31,149 --> 00:20:39,759
dependencies so yeah now things are much

00:20:37,149 --> 00:20:41,710
simpler than before I'll have the other

00:20:39,759 --> 00:20:43,600
code in the same place they are

00:20:41,710 --> 00:20:45,549
affecting the same dependencies but

00:20:43,600 --> 00:20:48,159
there is still a lot of entropy and the

00:20:45,549 --> 00:20:51,129
reason for that is we had many teams

00:20:48,159 --> 00:20:53,019
working in this layer of repositories

00:20:51,129 --> 00:20:56,169
they're kind of siloed in their own

00:20:53,019 --> 00:20:58,210
world so in order to escape our

00:20:56,169 --> 00:21:00,909
development and our teams we gave them

00:20:58,210 --> 00:21:03,340
an autonomy to to pick their tools to

00:21:00,909 --> 00:21:04,869
pick their technologies and then we

00:21:03,340 --> 00:21:07,240
start putting things together with so

00:21:04,869 --> 00:21:10,480
many things are different so some teams

00:21:07,240 --> 00:21:13,299
used to write unit testing framework a

00:21:10,480 --> 00:21:14,559
the another teams framework B and we're

00:21:13,299 --> 00:21:17,470
cite like putting everything together in

00:21:14,559 --> 00:21:19,210
the same field pipeline come on we need

00:21:17,470 --> 00:21:23,169
to we need to fix this we need to find a

00:21:19,210 --> 00:21:25,840
way to standardize our practices so we

00:21:23,169 --> 00:21:29,169
came up with the idea of the Golden Path

00:21:25,840 --> 00:21:31,179
and the Golden Path what it is is a set

00:21:29,169 --> 00:21:33,639
of recommendation recommended practices

00:21:31,179 --> 00:21:35,679
tools and libraries that are fully

00:21:33,639 --> 00:21:37,690
supporting it that recommended things

00:21:35,679 --> 00:21:40,179
that people should use it doesn't mean

00:21:37,690 --> 00:21:41,860
that they are forced to use but if they

00:21:40,179 --> 00:21:43,629
do they get all the support from the

00:21:41,860 --> 00:21:45,249
infrastructure team all the tooling they

00:21:43,629 --> 00:21:47,320
just they can just focus on building

00:21:45,249 --> 00:21:49,899
their feature did not need to focus on

00:21:47,320 --> 00:21:51,639
spending time in tooling tooling is

00:21:49,899 --> 00:21:53,649
there just use it and build your feature

00:21:51,639 --> 00:21:55,840
of course you can still go crazy and

00:21:53,649 --> 00:21:59,169
doing other things but it's not

00:21:55,840 --> 00:22:01,179
something that would really like so the

00:21:59,169 --> 00:22:04,210
way we came up the way we started

00:22:01,179 --> 00:22:06,399
working in a Golden Path I was to put

00:22:04,210 --> 00:22:08,710
together put together a standardization

00:22:06,399 --> 00:22:10,299
work group and the way we did this we

00:22:08,710 --> 00:22:14,230
got like one representative from each

00:22:10,299 --> 00:22:17,049
team and the this world would get

00:22:14,230 --> 00:22:17,770
together and analyze different things

00:22:17,049 --> 00:22:21,460
that

00:22:17,770 --> 00:22:24,580
so let's check all the testing libraries

00:22:21,460 --> 00:22:26,620
that we are using so to make we're using

00:22:24,580 --> 00:22:28,270
for example look at the unit testing

00:22:26,620 --> 00:22:31,390
like and some some apps are you can

00:22:28,270 --> 00:22:35,470
expect some I apply using assert some

00:22:31,390 --> 00:22:37,450
apps are using whatever and then so how

00:22:35,470 --> 00:22:39,670
can we turn it back on something so you

00:22:37,450 --> 00:22:41,920
can go into our test and understand how

00:22:39,670 --> 00:22:43,929
they work and things like that so this

00:22:41,920 --> 00:22:46,000
what this workgroup goal was to actually

00:22:43,929 --> 00:22:47,410
do this kind of analysis and come up

00:22:46,000 --> 00:22:50,740
with solutions and proposals for that

00:22:47,410 --> 00:22:54,100
and when I started analyzing and

00:22:50,740 --> 00:22:56,370
building this golden path documentation

00:22:54,100 --> 00:22:58,990
we start seeing some de facto standards

00:22:56,370 --> 00:23:00,370
that were easy to standardize on because

00:22:58,990 --> 00:23:04,150
that's what most people are already

00:23:00,370 --> 00:23:05,920
using so we just went ahead okay 80% of

00:23:04,150 --> 00:23:09,190
our code base already does it this way

00:23:05,920 --> 00:23:10,630
so let's just do it for the rest and so

00:23:09,190 --> 00:23:12,100
if that would be taking the path of

00:23:10,630 --> 00:23:14,740
least resistance and so it would be

00:23:12,100 --> 00:23:19,690
easier to to make every one line in the

00:23:14,740 --> 00:23:22,420
same thing and we try to make those

00:23:19,690 --> 00:23:24,610
decisions based on actual data so we

00:23:22,420 --> 00:23:26,830
don't really want to go for wishful

00:23:24,610 --> 00:23:29,110
thinking we actually want so much more

00:23:26,830 --> 00:23:30,580
experimentation around some some

00:23:29,110 --> 00:23:32,440
technique or some - and then see okay

00:23:30,580 --> 00:23:36,870
that works for that team maybe we should

00:23:32,440 --> 00:23:38,980
actually adopt in other teams as well so

00:23:36,870 --> 00:23:41,290
there were some lessons we learned in

00:23:38,980 --> 00:23:44,679
this process so I'm going to just recap

00:23:41,290 --> 00:23:47,230
I think that III said before and think

00:23:44,679 --> 00:23:48,940
that we learn when we go to this stage

00:23:47,230 --> 00:23:52,420
that's that stage where right now you're

00:23:48,940 --> 00:23:54,040
aligning teams in in same practices so

00:23:52,420 --> 00:23:56,200
we can move forward they maybe rethink

00:23:54,040 --> 00:23:58,000
the iframes thing because once the code

00:23:56,200 --> 00:23:59,320
is more standard it's easier to remove

00:23:58,000 --> 00:24:02,590
those kind of sandboxing at the inner

00:23:59,320 --> 00:24:05,530
gates so what the first thing that that

00:24:02,590 --> 00:24:07,210
is very important is to what in your

00:24:05,530 --> 00:24:09,580
projects always always try to evolve

00:24:07,210 --> 00:24:10,780
things incrementally and what that means

00:24:09,580 --> 00:24:15,040
is that don't try to solve all the

00:24:10,780 --> 00:24:18,640
problems at once try to fail fast and

00:24:15,040 --> 00:24:20,500
validate your hypothesis and don't ya

00:24:18,640 --> 00:24:22,630
try to release as fast as possible so

00:24:20,500 --> 00:24:26,800
you can see that the impact that they

00:24:22,630 --> 00:24:28,179
were creating and also like many

00:24:26,800 --> 00:24:29,580
companies have done an infra ting

00:24:28,179 --> 00:24:33,150
marketing my work

00:24:29,580 --> 00:24:35,730
and in some companies in for teams are

00:24:33,150 --> 00:24:37,440
usually kind of dictators that okay we

00:24:35,730 --> 00:24:41,670
built this thing everyone should use it

00:24:37,440 --> 00:24:43,320
this way and for us having more empathy

00:24:41,670 --> 00:24:45,750
as we saw yesterday and more connections

00:24:43,320 --> 00:24:47,280
with the other developers make things

00:24:45,750 --> 00:24:49,920
work much better have a much better

00:24:47,280 --> 00:24:51,270
relationship with feature teams and we

00:24:49,920 --> 00:24:53,460
can get things with much higher quality

00:24:51,270 --> 00:24:55,230
so having an infra team let's pour in

00:24:53,460 --> 00:24:57,090
touch with other developers and

00:24:55,230 --> 00:24:58,680
listening to them and having other

00:24:57,090 --> 00:25:00,270
developers participating and the

00:24:58,680 --> 00:25:03,480
decisions have really improved us I

00:25:00,270 --> 00:25:07,050
proved the our flow to get things

00:25:03,480 --> 00:25:09,840
working and when we merge repositories

00:25:07,050 --> 00:25:13,910
we noticed that the way we structure our

00:25:09,840 --> 00:25:15,690
repositories shouldn't dictate your your

00:25:13,910 --> 00:25:18,090
architecture so that's why for us

00:25:15,690 --> 00:25:20,490
merging them was a good idea because it

00:25:18,090 --> 00:25:22,320
gave us a lot of flexibility on how we

00:25:20,490 --> 00:25:26,490
want things to change in the future

00:25:22,320 --> 00:25:28,110
and last but not least like consistency

00:25:26,490 --> 00:25:30,060
is really important in a codebase

00:25:28,110 --> 00:25:31,470
specially in a big project it's more

00:25:30,060 --> 00:25:33,480
important to have one single way of

00:25:31,470 --> 00:25:34,500
doing things then and then doing like

00:25:33,480 --> 00:25:36,390
the coolest thing ever

00:25:34,500 --> 00:25:38,010
because when you have a consistent way

00:25:36,390 --> 00:25:39,540
of doing things people are more

00:25:38,010 --> 00:25:40,800
productive people can understand better

00:25:39,540 --> 00:25:42,240
the code you can navigate through the

00:25:40,800 --> 00:25:45,870
code and see okay this is how you do it

00:25:42,240 --> 00:25:47,640
and there's how it's been done but if

00:25:45,870 --> 00:25:49,260
you're just focusing on trying like this

00:25:47,640 --> 00:25:50,640
new thing and make it the coolest

00:25:49,260 --> 00:25:51,780
possible and then everything is

00:25:50,640 --> 00:25:54,000
different different parts of the code

00:25:51,780 --> 00:25:56,700
base it really makes it hard for people

00:25:54,000 --> 00:25:58,320
to understand their code and to first if

00:25:56,700 --> 00:26:00,210
I know got a new hire in a company's

00:25:58,320 --> 00:26:01,800
growing you need to have oh okay this is

00:26:00,210 --> 00:26:02,940
how you do things and then this person

00:26:01,800 --> 00:26:05,670
is gonna be able to spin much faster

00:26:02,940 --> 00:26:10,620
than you have like such a heterogeneous

00:26:05,670 --> 00:26:11,850
code base and yeah I couldn't miss the

00:26:10,620 --> 00:26:14,880
opportunity with so many good people

00:26:11,850 --> 00:26:16,440
here say that we are high so with me to

00:26:14,880 --> 00:26:18,570
a lot of challenges have a lot of

00:26:16,440 --> 00:26:21,840
challenges ahead so I recommend this

00:26:18,570 --> 00:26:23,700
take a look at our jobs page and the the

00:26:21,840 --> 00:26:25,320
job ads there are usually a pretty vague

00:26:23,700 --> 00:26:27,360
and open but if you need more detail you

00:26:25,320 --> 00:26:32,380
can just grab me and I can can give you

00:26:27,360 --> 00:26:34,440
more more details and that's it for me

00:26:32,380 --> 00:26:34,440

YouTube URL: https://www.youtube.com/watch?v=9UsnX5X_DF0


