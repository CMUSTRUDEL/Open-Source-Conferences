Title: Seth Samuel: Arbitrary Computation on the GPU Using WebGL - JSConf Iceland 2016
Publication date: 2016-09-16
Playlist: JSConf Iceland 2016
Description: 
	WebGL is already widely in use for 3D graphics and image processing but could be used for much more. We'll learn how to pass arbitrary data to the GPU for parallel processing, how to get that processed data back into Javascript, and all the reasons this doesn't work even when it should.
Captions: 
	00:00:11,110 --> 00:00:14,440
okay everybody hear me okay great uh

00:00:13,750 --> 00:00:17,050
yeah

00:00:14,440 --> 00:00:18,700
very first thing you can get all the

00:00:17,050 --> 00:00:21,220
slides for this right now on Seth Samuel

00:00:18,700 --> 00:00:22,990
github IO if you want to follow along if

00:00:21,220 --> 00:00:25,990
you can't see if you have accessibility

00:00:22,990 --> 00:00:28,119
issues the there's a couple demos that

00:00:25,990 --> 00:00:29,410
won't work quite right on mobile but if

00:00:28,119 --> 00:00:30,730
you runs that any other problems please

00:00:29,410 --> 00:00:32,710
let me know after so I can improve it

00:00:30,730 --> 00:00:35,440
moving forward all right

00:00:32,710 --> 00:00:37,000
my name is Seth Samuel new york portland

00:00:35,440 --> 00:00:38,559
various other places portland back to

00:00:37,000 --> 00:00:40,629
new york i can never move again without

00:00:38,559 --> 00:00:42,670
ruining the symmetry of my life and just

00:00:40,629 --> 00:00:44,170
driving myself crazy i am here to talk

00:00:42,670 --> 00:00:46,030
about arbitrary computation on the GPU

00:00:44,170 --> 00:00:47,559
with WebGL which is a really convoluted

00:00:46,030 --> 00:00:49,930
way of saying we're gonna take WebGL

00:00:47,559 --> 00:00:52,750
which does cool graphics stuff and we're

00:00:49,930 --> 00:00:55,269
gonna make it do weird stuff for fun and

00:00:52,750 --> 00:00:57,010
not so much profit but fun and it is

00:00:55,269 --> 00:00:59,890
heart WebGL because I was testing

00:00:57,010 --> 00:01:01,299
Unicode and emoji and all of that and I

00:00:59,890 --> 00:01:02,440
finally got it working and I do heart

00:01:01,299 --> 00:01:04,479
WebGL so it stayed that way

00:01:02,440 --> 00:01:07,060
I'm south of Samuel on Twitter and said

00:01:04,479 --> 00:01:08,920
Samuel on github one last piece of

00:01:07,060 --> 00:01:10,930
boilerplate this is a talk that goes

00:01:08,920 --> 00:01:12,430
pretty far into the weeds if you don't

00:01:10,930 --> 00:01:14,619
know the idiom it means I'm gonna talk

00:01:12,430 --> 00:01:16,270
about a lot of things really fast and

00:01:14,619 --> 00:01:18,790
most of them are pretty far outside the

00:01:16,270 --> 00:01:20,950
normal developer life if I lose you I'm

00:01:18,790 --> 00:01:22,750
sorry it's totally my fault please come

00:01:20,950 --> 00:01:25,000
up afterwards ask me questions on

00:01:22,750 --> 00:01:26,200
Twitter and real life hopefully everyone

00:01:25,000 --> 00:01:28,690
can still get something out of this talk

00:01:26,200 --> 00:01:31,720
even though it is pretty weedy all right

00:01:28,690 --> 00:01:34,300
what's WebGL WebGL is a JavaScript API

00:01:31,720 --> 00:01:36,130
that lets us as web developers talk to

00:01:34,300 --> 00:01:38,440
the graphics card using an API that's

00:01:36,130 --> 00:01:41,800
very much like OpenGL what that means is

00:01:38,440 --> 00:01:43,990
we can run graphics in about the closest

00:01:41,800 --> 00:01:45,730
way to the metal that you'll ever get as

00:01:43,990 --> 00:01:47,409
a web developer web assembly maybe down

00:01:45,730 --> 00:01:50,710
the line will get you just as close but

00:01:47,409 --> 00:01:54,159
right now WebGL is the best way to run

00:01:50,710 --> 00:01:56,140
things really fast so what this looks

00:01:54,159 --> 00:01:58,540
like is there's a nice little browser

00:01:56,140 --> 00:02:01,479
sandbox we write JavaScript the

00:01:58,540 --> 00:02:03,340
JavaScript gets piped to WebGL WebGL

00:02:01,479 --> 00:02:05,229
talks off to the operating system and

00:02:03,340 --> 00:02:07,780
the graphics card and then the graphics

00:02:05,229 --> 00:02:09,549
card draws your graphics back onto an

00:02:07,780 --> 00:02:12,370
HTML canvas which you can then talk to

00:02:09,549 --> 00:02:14,049
you like any other HTML canvas one thing

00:02:12,370 --> 00:02:16,629
to note all these arrows here are

00:02:14,049 --> 00:02:18,330
one-way except for the canvas arrow

00:02:16,629 --> 00:02:21,880
which we'll get to why that's important

00:02:18,330 --> 00:02:24,100
so the basic structure of OpenGL is

00:02:21,880 --> 00:02:25,030
something called shaders it's one of

00:02:24,100 --> 00:02:27,069
many question

00:02:25,030 --> 00:02:28,480
Cley Church Isis made inside of WebGL

00:02:27,069 --> 00:02:30,610
but we're just gonna go with it we

00:02:28,480 --> 00:02:32,830
inherited it from OpenGL who probably

00:02:30,610 --> 00:02:35,050
made the decision while drunk it's

00:02:32,830 --> 00:02:37,240
basically a functional pipeline you put

00:02:35,050 --> 00:02:39,220
in data that data goes through a vertex

00:02:37,240 --> 00:02:41,950
shader the vertex shader takes your data

00:02:39,220 --> 00:02:43,150
and maps it to 3d points in space so

00:02:41,950 --> 00:02:45,489
typically your data is going to look

00:02:43,150 --> 00:02:47,530
something like a series of coordinates

00:02:45,489 --> 00:02:49,390
that look a lot like 3d coordinates but

00:02:47,530 --> 00:02:51,400
it doesn't have to it can be anything

00:02:49,390 --> 00:02:52,900
you want to pipe in the vertex shader

00:02:51,400 --> 00:02:54,850
hands that information off to the

00:02:52,900 --> 00:02:56,680
fragment shader the fragment shader is

00:02:54,850 --> 00:02:57,790
the only one here that sort of makes

00:02:56,680 --> 00:03:00,550
sense with the word shader because it

00:02:57,790 --> 00:03:05,400
shades color onto a fragment of your

00:03:00,550 --> 00:03:09,340
graphics and then graphics happens so

00:03:05,400 --> 00:03:12,220
here's a very simple snippet of what's

00:03:09,340 --> 00:03:13,840
called GLSL the JIT the OpenGL shader

00:03:12,220 --> 00:03:16,870
language which we use in WebGL as well

00:03:13,840 --> 00:03:18,850
and because this is a weird descendant

00:03:16,870 --> 00:03:20,680
of C JavaScript is a weird descendant of

00:03:18,850 --> 00:03:23,530
C as well but this one's a weirder

00:03:20,680 --> 00:03:27,430
descendant of C the way you actually say

00:03:23,530 --> 00:03:29,560
what color your your pixel is going to

00:03:27,430 --> 00:03:31,900
be is you set a global variable called

00:03:29,560 --> 00:03:33,720
GL frag color equal to a vet for which

00:03:31,900 --> 00:03:36,700
is just a fancy way of saying in RGB a

00:03:33,720 --> 00:03:39,070
tuple so we're going to get past this V

00:03:36,700 --> 00:03:41,890
cord thing which is the vertex shader

00:03:39,070 --> 00:03:44,650
telling us where we are in space and

00:03:41,890 --> 00:03:46,989
we're going to set the red to be s which

00:03:44,650 --> 00:03:49,660
is the same as X and T which is the same

00:03:46,989 --> 00:03:51,370
as Y because again nomenclature and

00:03:49,660 --> 00:03:54,250
we're just gonna leave blue out and make

00:03:51,370 --> 00:03:55,900
it fully not transparent so this is

00:03:54,250 --> 00:03:57,040
actually WebGL this is all the demos in

00:03:55,900 --> 00:03:59,140
here alive if you want to go see the

00:03:57,040 --> 00:04:00,820
source go check out github and now we've

00:03:59,140 --> 00:04:02,859
got our gradient so you can see in the

00:04:00,820 --> 00:04:04,810
upper left where we're at zero zero it's

00:04:02,859 --> 00:04:05,049
all black on the lower right red plus

00:04:04,810 --> 00:04:06,430
green

00:04:05,049 --> 00:04:08,799
equals yellow as we all learned in

00:04:06,430 --> 00:04:10,959
kindergarten and in the top right red

00:04:08,799 --> 00:04:13,239
bottom left green and what's really cool

00:04:10,959 --> 00:04:15,820
here is all of this is happening at once

00:04:13,239 --> 00:04:17,919
so it's not like WebGL is stepping

00:04:15,820 --> 00:04:20,200
through every single piece of this

00:04:17,919 --> 00:04:21,489
gradient and calculating it order the

00:04:20,200 --> 00:04:23,800
graphics card is actually actually

00:04:21,489 --> 00:04:28,150
calculating all of these colors at the

00:04:23,800 --> 00:04:29,860
same time so we can use this to do some

00:04:28,150 --> 00:04:31,479
really cool things so the edge finder

00:04:29,860 --> 00:04:33,070
for those who don't know an edge finder

00:04:31,479 --> 00:04:34,750
is exactly what it sounds like if you

00:04:33,070 --> 00:04:37,120
have some image and you want to find

00:04:34,750 --> 00:04:38,620
edges inside of it that is sort of what

00:04:37,120 --> 00:04:41,800
we would think of as the outline

00:04:38,620 --> 00:04:43,900
of objects what you can do is basically

00:04:41,800 --> 00:04:47,530
you pass in a texture that's what we

00:04:43,900 --> 00:04:49,090
call images and then you use a sampler

00:04:47,530 --> 00:04:50,110
to get a pixel from it and so we're

00:04:49,090 --> 00:04:51,760
gonna do the same thing where we're

00:04:50,110 --> 00:04:53,710
gonna look at a pixel we're gonna look a

00:04:51,760 --> 00:04:56,500
little bit to the left with that minus

00:04:53,710 --> 00:04:58,510
0.005 and then we're gonna have some

00:04:56,500 --> 00:04:59,590
threshold that tells us whether or not

00:04:58,510 --> 00:05:01,240
this is an edge and if it's an edge

00:04:59,590 --> 00:05:03,070
we're going to paint bright pink if

00:05:01,240 --> 00:05:05,410
we're if it's not we're just gonna paint

00:05:03,070 --> 00:05:06,970
black so here is a small child

00:05:05,410 --> 00:05:09,610
attempting to eat an entire block of

00:05:06,970 --> 00:05:11,169
cheese this is not my small child but if

00:05:09,610 --> 00:05:12,729
I did have a small child she would also

00:05:11,169 --> 00:05:16,180
probably try to eat an entire block of

00:05:12,729 --> 00:05:17,620
cheese cuz cheese is delicious and here

00:05:16,180 --> 00:05:20,350
we have her in edge format so you can

00:05:17,620 --> 00:05:22,210
see I have this nice little slider here

00:05:20,350 --> 00:05:24,430
that threshold that we saw earlier

00:05:22,210 --> 00:05:26,320
I can decrease the threshold which means

00:05:24,430 --> 00:05:28,810
basically everything looks like an edge

00:05:26,320 --> 00:05:31,060
or I can make it really high which means

00:05:28,810 --> 00:05:32,680
nothing looks like an edge and I can

00:05:31,060 --> 00:05:35,560
sort of go through here and this is all

00:05:32,680 --> 00:05:37,600
happening at liquid smooth 60 frames per

00:05:35,560 --> 00:05:39,580
second and depending on the size of your

00:05:37,600 --> 00:05:40,930
image that's not the case if you're

00:05:39,580 --> 00:05:43,150
doing this in JavaScript you can do this

00:05:40,930 --> 00:05:44,349
in JavaScript to some extent but you're

00:05:43,150 --> 00:05:46,090
probably not going to be able to do

00:05:44,349 --> 00:05:47,740
large images and be able to do all this

00:05:46,090 --> 00:05:49,539
for exactly the same reason as before

00:05:47,740 --> 00:05:51,550
which is that every single one of these

00:05:49,539 --> 00:05:57,460
pixels is being considered at the same

00:05:51,550 --> 00:05:59,380
time and last it's not a WebGL talk

00:05:57,460 --> 00:06:01,479
without a particles demo particles are

00:05:59,380 --> 00:06:03,340
cool here we're using GL position

00:06:01,479 --> 00:06:05,440
instead of GL frag color which is the

00:06:03,340 --> 00:06:08,050
equivalent version for the vertex shader

00:06:05,440 --> 00:06:10,060
which basically says take some data and

00:06:08,050 --> 00:06:11,260
swirl it around you see a sign you see a

00:06:10,060 --> 00:06:15,280
cosign you know you're talking about

00:06:11,260 --> 00:06:17,500
something swirly hey so we got one pixel

00:06:15,280 --> 00:06:19,180
is that even visible no not really

00:06:17,500 --> 00:06:23,349
okay well that's some more I can see it

00:06:19,180 --> 00:06:24,910
on my screen there we go some of them

00:06:23,349 --> 00:06:26,680
are showing up now we're up to sixth and

00:06:24,910 --> 00:06:28,960
this is gonna take forever and I have to

00:06:26,680 --> 00:06:35,710
finish on time they said there we go 200

00:06:28,960 --> 00:06:37,900
more more more more there we go there's

00:06:35,710 --> 00:06:39,099
a hundred thousand this is about word so

00:06:37,900 --> 00:06:41,500
I'm still going at about 60 frames per

00:06:39,099 --> 00:06:43,539
second here on my little MacBook Air

00:06:41,500 --> 00:06:46,570
that is slowly trying to rise from the

00:06:43,539 --> 00:06:47,530
podium on my power book at work I was

00:06:46,570 --> 00:06:49,960
trying this out I could get over a

00:06:47,530 --> 00:06:52,390
million pixels going before it started

00:06:49,960 --> 00:06:55,660
to even budge yeah that's

00:06:52,390 --> 00:06:56,830
pretty pretty bad but still better than

00:06:55,660 --> 00:06:59,380
if you tried to do a million pixels in

00:06:56,830 --> 00:07:00,250
JavaScript so why is it so powerful you

00:06:59,380 --> 00:07:03,220
probably guess because I've said it like

00:07:00,250 --> 00:07:05,530
five times because WebGL lets us pass

00:07:03,220 --> 00:07:08,170
data off to the graphics card it can do

00:07:05,530 --> 00:07:09,370
all of this math at once so you have two

00:07:08,170 --> 00:07:12,130
main engine inside your computer you

00:07:09,370 --> 00:07:14,260
have a CPU which is your something

00:07:12,130 --> 00:07:15,790
processing unit I'm gonna say central

00:07:14,260 --> 00:07:17,320
but I think I'm wrong someone tweeted me

00:07:15,790 --> 00:07:21,640
that I'm completely wrong about that I

00:07:17,320 --> 00:07:24,580
am oh yes I'd like being right which is

00:07:21,640 --> 00:07:25,870
a general purpose tool it can do lots of

00:07:24,580 --> 00:07:28,750
things and it can do them pretty well

00:07:25,870 --> 00:07:30,910
but not as well as a specialized tool

00:07:28,750 --> 00:07:33,310
your GPU your graphics processing unit

00:07:30,910 --> 00:07:35,800
is a specialized tool what it does is

00:07:33,310 --> 00:07:37,960
takes lots of small operation and does

00:07:35,800 --> 00:07:40,000
them in parallel this tweet was

00:07:37,960 --> 00:07:41,200
remarkably fortuitously time it came out

00:07:40,000 --> 00:07:43,690
just like a week before when I was

00:07:41,200 --> 00:07:44,890
getting the slides ready suppose you

00:07:43,690 --> 00:07:46,510
wanted to do thousands of

00:07:44,890 --> 00:07:48,910
kindergarteners math homework at the

00:07:46,510 --> 00:07:50,590
same time on the GPU and that's exactly

00:07:48,910 --> 00:07:53,700
what we want to do is lots of little

00:07:50,590 --> 00:07:57,700
simple math operations but all at once

00:07:53,700 --> 00:07:59,110
so someone noticed wait a second we

00:07:57,700 --> 00:08:01,000
could do something beyond graphics here

00:07:59,110 --> 00:08:02,740
it happens that graphics can generally

00:08:01,000 --> 00:08:04,120
be represented as lots of parallel small

00:08:02,740 --> 00:08:06,700
math operations but there's other things

00:08:04,120 --> 00:08:08,200
that are lots of small math operations

00:08:06,700 --> 00:08:11,050
all at once there's lots of things we do

00:08:08,200 --> 00:08:13,270
in in research in math in you know all

00:08:11,050 --> 00:08:15,820
sorts of regions where that's useful so

00:08:13,270 --> 00:08:17,650
this sort of construct of the data

00:08:15,820 --> 00:08:20,470
pipelines that's meant to draw graphics

00:08:17,650 --> 00:08:22,480
is not ideal if you just want to get

00:08:20,470 --> 00:08:24,430
down to the actual math and so they came

00:08:22,480 --> 00:08:29,260
up with OpenCL as a complement to OpenGL

00:08:24,430 --> 00:08:31,450
and so if OpenGL lets the WebGL lets us

00:08:29,260 --> 00:08:34,570
do OpenGL on the web what lets us do

00:08:31,450 --> 00:08:36,580
OpenCL on the web it's web CL and it's

00:08:34,570 --> 00:08:39,190
coming soon it's never it's never coming

00:08:36,580 --> 00:08:40,630
we're it's been coming soon for a very

00:08:39,190 --> 00:08:42,160
long time and it doesn't seem like it's

00:08:40,630 --> 00:08:43,960
ever gonna get here because the the

00:08:42,160 --> 00:08:45,640
specs and the standards for the other

00:08:43,960 --> 00:08:48,190
side of things have evolved past where

00:08:45,640 --> 00:08:49,960
it is there's compute shaders which is

00:08:48,190 --> 00:08:51,850
an even more ridiculous stretching of

00:08:49,960 --> 00:08:54,010
the shaders nomenclature it's also

00:08:51,850 --> 00:08:55,120
coming soon for a while there it was

00:08:54,010 --> 00:08:57,490
kind of looking like it might actually

00:08:55,120 --> 00:08:58,600
come soon and now it's looking like it's

00:08:57,490 --> 00:09:00,730
probably gonna be replaced by something

00:08:58,600 --> 00:09:04,120
else also but we might get to continue

00:09:00,730 --> 00:09:05,710
traders so we're developers we like

00:09:04,120 --> 00:09:06,370
building things if they don't give us

00:09:05,710 --> 00:09:08,380
the tools we

00:09:06,370 --> 00:09:10,510
them ourselves so how could we do this

00:09:08,380 --> 00:09:12,520
well we can get data in right let's

00:09:10,510 --> 00:09:15,040
really good at that already we can do

00:09:12,520 --> 00:09:18,430
the math but we have to get it out so is

00:09:15,040 --> 00:09:21,100
there a way there is a way and it's

00:09:18,430 --> 00:09:22,810
pixels in fact it's the only way but

00:09:21,100 --> 00:09:25,210
thankfully that two-way arrow with the

00:09:22,810 --> 00:09:28,660
canvas means that we can pull data out

00:09:25,210 --> 00:09:30,040
of it in a basically serialized pixel

00:09:28,660 --> 00:09:32,529
format which is just numbers and that's

00:09:30,040 --> 00:09:34,960
all we need for math there are a few

00:09:32,529 --> 00:09:36,760
implementation challenges there's lots

00:09:34,960 --> 00:09:38,860
of little niggly things as far as

00:09:36,760 --> 00:09:41,470
getting all this to work smoothly but

00:09:38,860 --> 00:09:43,810
there is one that is not work around a

00:09:41,470 --> 00:09:46,900
bowl and that's serialization it takes

00:09:43,810 --> 00:09:49,330
time and effort to get data into the

00:09:46,900 --> 00:09:51,040
WebGL framework and it takes even more

00:09:49,330 --> 00:09:53,110
to get it out of the canvas in fact it's

00:09:51,040 --> 00:09:54,940
incredibly slow to pull pixels from a

00:09:53,110 --> 00:09:56,500
canvas nan anyway you'd probably notice

00:09:54,940 --> 00:09:58,360
in normal web operations but if you're

00:09:56,500 --> 00:10:02,230
trying to lots and lots of pixels in and

00:09:58,360 --> 00:10:03,880
pixels out it adds up really fast and so

00:10:02,230 --> 00:10:04,600
we come to an example that actually

00:10:03,880 --> 00:10:07,690
works

00:10:04,600 --> 00:10:10,150
matrix multiplication for those who

00:10:07,690 --> 00:10:11,770
don't know or who have not taken when

00:10:10,150 --> 00:10:13,240
your algebra since many years ago like

00:10:11,770 --> 00:10:15,360
me and had to go pull out the definition

00:10:13,240 --> 00:10:18,790
of matrix multiplication for this demo

00:10:15,360 --> 00:10:20,620
this is matrix multiplication so it's

00:10:18,790 --> 00:10:22,600
just a fancy way of saying a matrix is

00:10:20,620 --> 00:10:24,370
just a table of data multiplication is

00:10:22,600 --> 00:10:26,050
exactly like it is with normal numbers

00:10:24,370 --> 00:10:28,660
but we're gonna define it on two

00:10:26,050 --> 00:10:30,670
different tables of numbers these column

00:10:28,660 --> 00:10:32,860
and row highlights are not done with

00:10:30,670 --> 00:10:34,240
that horrible CSS hack but I am gonna go

00:10:32,860 --> 00:10:36,339
back and edit them so that they are in

00:10:34,240 --> 00:10:38,950
the future cuz that was cool and weird

00:10:36,339 --> 00:10:41,170
so yeah good you can see so that

00:10:38,950 --> 00:10:43,120
highlight the top left cell is going to

00:10:41,170 --> 00:10:45,730
be the sum of the product of the first

00:10:43,120 --> 00:10:48,490
row of the left and the first column on

00:10:45,730 --> 00:10:51,160
the right so if this example will be one

00:10:48,490 --> 00:10:52,660
times nine plus two times four

00:10:51,160 --> 00:10:53,950
the only way I've ever had this

00:10:52,660 --> 00:10:55,420
explained to me that makes sense is you

00:10:53,950 --> 00:10:57,100
take the left one you rotate it and then

00:10:55,420 --> 00:10:59,200
you slide it through if you are not a

00:10:57,100 --> 00:11:01,600
spatial learner that is absolutely no

00:10:59,200 --> 00:11:04,060
use to do and I'm sorry there are a lot

00:11:01,600 --> 00:11:05,140
of resources on the web to try and

00:11:04,060 --> 00:11:06,850
explain it in different ways and

00:11:05,140 --> 00:11:09,370
hopefully one of them will make sense

00:11:06,850 --> 00:11:11,080
for you there so you can see that bottom

00:11:09,370 --> 00:11:12,760
left notice the bottom row and so on and

00:11:11,080 --> 00:11:16,630
so on basically we're just doing a lot

00:11:12,760 --> 00:11:18,670
of kindergartners math all right

00:11:16,630 --> 00:11:21,850
and you can see that we're basically in

00:11:18,670 --> 00:11:24,610
a pass in the two input matrices as

00:11:21,850 --> 00:11:26,380
images because of reasons and we're

00:11:24,610 --> 00:11:28,570
going to iterate through for each

00:11:26,380 --> 00:11:30,250
product cell we're gonna iterate through

00:11:28,570 --> 00:11:32,440
the row of 1 and the column of the other

00:11:30,250 --> 00:11:34,810
do a bunch of math and output it as a

00:11:32,440 --> 00:11:36,520
color it turns out a color is nothing

00:11:34,810 --> 00:11:40,230
more than four bytes and you can fit two

00:11:36,520 --> 00:11:44,620
decent number of numbers into four bytes

00:11:40,230 --> 00:11:47,620
all right so it's demo time all right so

00:11:44,620 --> 00:11:54,330
here's our 2x2 again so this should be 1

00:11:47,620 --> 00:11:54,330
times 5 plus 5 times 5 which is 30 yeah

00:11:54,930 --> 00:12:00,460
yeah it's 30 good I succeeded in

00:11:58,540 --> 00:12:02,620
kindergartners math homework so you can

00:12:00,460 --> 00:12:04,120
see that that's but one times zero plus

00:12:02,620 --> 00:12:05,650
five times eight that's 40 it's so on

00:12:04,120 --> 00:12:09,700
its own all right so that's 2 by 2 and

00:12:05,650 --> 00:12:11,740
now let's do it on the GPU and it's the

00:12:09,700 --> 00:12:12,670
same which is good it's really bad when

00:12:11,740 --> 00:12:14,050
you're trying to make a new

00:12:12,670 --> 00:12:15,880
implementation and it doesn't agree with

00:12:14,050 --> 00:12:18,070
the one that you know is right so it's

00:12:15,880 --> 00:12:20,440
correct but it's really slow right we

00:12:18,070 --> 00:12:22,690
got point 4 milliseconds on the Left 28

00:12:20,440 --> 00:12:25,660
on the right that's a lot more that's

00:12:22,690 --> 00:12:29,670
like 60 times slower which is really bad

00:12:25,660 --> 00:12:29,670
so let's try this with the 3 by 3

00:12:30,150 --> 00:12:36,100
all right that's still really fast on

00:12:32,590 --> 00:12:38,350
the CPU not so fast on the GPU and all

00:12:36,100 --> 00:12:42,820
right let's let's try bigger let's go up

00:12:38,350 --> 00:12:44,470
to 64 I'm showing a 3 by 3 slice here

00:12:42,820 --> 00:12:46,810
because I don't want to show 64 by 64

00:12:44,470 --> 00:12:48,850
columns and rows on the slide 4 times

00:12:46,810 --> 00:12:49,810
cuz no one could read anything just

00:12:48,850 --> 00:12:56,020
gonna have to trust me that's they're

00:12:49,810 --> 00:12:57,820
all here at 4 to 6 all right what sort

00:12:56,020 --> 00:12:59,590
of actually we're faster now in the GPU

00:12:57,820 --> 00:13:01,480
by a little bit there's a lot of noise

00:12:59,590 --> 00:13:02,680
down at this side so I'm never sure if

00:13:01,480 --> 00:13:05,110
this one's gonna come out this way uh

00:13:02,680 --> 00:13:07,720
all right let's just go all the way so

00:13:05,110 --> 00:13:09,280
this is a 1024 by 2024 matrix we were

00:13:07,720 --> 00:13:11,710
gonna be multiplying so that's a million

00:13:09,280 --> 00:13:16,990
elements in each matrix that's a lot of

00:13:11,710 --> 00:13:18,460
math alright and now we sit around for

00:13:16,990 --> 00:13:19,780
about three minutes but I will keep

00:13:18,460 --> 00:13:22,300
talking to you because otherwise would

00:13:19,780 --> 00:13:24,130
be really boring so this is where I just

00:13:22,300 --> 00:13:25,540
talked about random things today let's

00:13:24,130 --> 00:13:28,120
talk about so a little spinner in the

00:13:25,540 --> 00:13:28,660
middle is just a little div it's got you

00:13:28,120 --> 00:13:30,280
know

00:13:28,660 --> 00:13:32,140
width and height its position absolutely

00:13:30,280 --> 00:13:33,670
and there's a CSS transform as you

00:13:32,140 --> 00:13:35,890
probably heard today if you didn't

00:13:33,670 --> 00:13:38,350
already know is CSS transference happen

00:13:35,890 --> 00:13:39,880
on the GPU which is great right now I'm

00:13:38,350 --> 00:13:41,680
not gonna open dev tools because I don't

00:13:39,880 --> 00:13:42,780
want to risk hosing this and having to

00:13:41,680 --> 00:13:45,540
do this all over again

00:13:42,780 --> 00:13:47,740
we're just hammering the CPU the

00:13:45,540 --> 00:13:49,840
JavaScript implementation of this

00:13:47,740 --> 00:13:52,810
multiplication is just iterating through

00:13:49,840 --> 00:13:54,160
math and math and math and math and the

00:13:52,810 --> 00:13:56,650
whole thing here is basically

00:13:54,160 --> 00:13:59,470
unresponsive but that spinner is still

00:13:56,650 --> 00:14:00,760
spinning and you'd think oh that's cool

00:13:59,470 --> 00:14:02,290
it's because it's Hardware accelerate

00:14:00,760 --> 00:14:05,770
it's on the GPU and it's really great

00:14:02,290 --> 00:14:07,960
and that's true except to actually get

00:14:05,770 --> 00:14:11,200
this spinner going you have to do work

00:14:07,960 --> 00:14:13,810
on the CPU so if I started tried to

00:14:11,200 --> 00:14:16,030
start calculating the CPU version of the

00:14:13,810 --> 00:14:18,160
matrix multiplication and start that

00:14:16,030 --> 00:14:20,950
spinning at exactly the same time it

00:14:18,160 --> 00:14:22,690
wouldn't work because the CPU will get

00:14:20,950 --> 00:14:24,610
locked up before the browser has a

00:14:22,690 --> 00:14:27,400
chance to add the class to the spinner

00:14:24,610 --> 00:14:30,220
which enables it renders it and ships it

00:14:27,400 --> 00:14:32,170
off to the GPU to spin so that was a fun

00:14:30,220 --> 00:14:33,670
little lesson here another interesting

00:14:32,170 --> 00:14:35,830
lesson is that whatever is doing that

00:14:33,670 --> 00:14:37,720
spinning whatever timer that's doing all

00:14:35,830 --> 00:14:39,370
of that is not on the main thread

00:14:37,720 --> 00:14:41,110
because it's still spinning right now so

00:14:39,370 --> 00:14:43,630
even though the rendering is being done

00:14:41,110 --> 00:14:45,580
on the GPU something has to tell the GPU

00:14:43,630 --> 00:14:49,120
ok now it's time to tick that there's no

00:14:45,580 --> 00:14:51,310
time built into most GPU framework so

00:14:49,120 --> 00:14:52,690
something is firing off saying keep

00:14:51,310 --> 00:14:54,580
spinning that and it's not doing it on

00:14:52,690 --> 00:14:57,520
the main thread and that's cool if

00:14:54,580 --> 00:14:59,380
you're really big nerd like me uh let's

00:14:57,520 --> 00:15:00,430
see I forgot to start my timer I'm just

00:14:59,380 --> 00:15:03,310
gonna have to keep talking about

00:15:00,430 --> 00:15:12,790
anything what else do we have to talk

00:15:03,310 --> 00:15:14,800
about here I hope it hasn't actually

00:15:12,790 --> 00:15:16,720
popped up the little warning usually it

00:15:14,800 --> 00:15:18,160
does my computer's to be feeling very

00:15:16,720 --> 00:15:19,450
kind to me today or it's not doing any

00:15:18,160 --> 00:15:21,550
work at all and I'm just gonna sit here

00:15:19,450 --> 00:15:22,960
making things up until I run out of time

00:15:21,550 --> 00:15:24,760
and they like take the cane to pull me

00:15:22,960 --> 00:15:27,310
off the stage usually it pops up the

00:15:24,760 --> 00:15:28,510
little you're the thread on tab whatever

00:15:27,310 --> 00:15:30,340
this tab is called has become

00:15:28,510 --> 00:15:33,790
unresponsive do you want to interrupt it

00:15:30,340 --> 00:15:34,960
and it turns out if you don't click that

00:15:33,790 --> 00:15:37,180
thing it's still doing work on the

00:15:34,960 --> 00:15:38,680
background so that little pop-up thing

00:15:37,180 --> 00:15:40,420
is really just a courtesy chance to get

00:15:38,680 --> 00:15:42,310
you to kill it it doesn't it isn't no

00:15:40,420 --> 00:15:43,840
way stopping the completely

00:15:42,310 --> 00:15:46,180
out of control JavaScript execution

00:15:43,840 --> 00:15:50,110
which is going on right now which is

00:15:46,180 --> 00:15:51,420
kind of cool and still really hope this

00:15:50,110 --> 00:16:01,000
works

00:15:51,420 --> 00:16:09,880
I'll just keep waiting it's probably

00:16:01,000 --> 00:16:12,520
working see last time I did this I

00:16:09,880 --> 00:16:14,320
talked too long and actually to stop

00:16:12,520 --> 00:16:15,730
talking about random things well when

00:16:14,320 --> 00:16:17,529
that the answer came up this time of

00:16:15,730 --> 00:16:19,570
course I completely ran out of things to

00:16:17,529 --> 00:16:22,690
talk about way too early you have to you

00:16:19,570 --> 00:16:27,700
know prepare material next time let's do

00:16:22,690 --> 00:16:32,170
that oh yeah what about the what is the

00:16:27,700 --> 00:16:33,640
local sports team here in Iceland other

00:16:32,170 --> 00:16:34,990
fun things that learned about while

00:16:33,640 --> 00:16:36,910
working on this project oh here's

00:16:34,990 --> 00:16:37,890
another fun thing the way this is

00:16:36,910 --> 00:16:40,510
working

00:16:37,890 --> 00:16:43,779
it's just hung for a second the way this

00:16:40,510 --> 00:16:46,660
is working is basically GPU shader code

00:16:43,779 --> 00:16:51,370
gets all compiled and shipped off to the

00:16:46,660 --> 00:16:53,500
WebGL oh yeah all right whoo okay 200

00:16:51,370 --> 00:16:55,360
and we're into the range of benchmarking

00:16:53,500 --> 00:16:58,270
here where milliseconds it's kind of a

00:16:55,360 --> 00:17:00,880
goofy thing to be measuring this in but

00:16:58,270 --> 00:17:02,770
that is 200 let's it's three and a half

00:17:00,880 --> 00:17:04,839
minutes that's a really really long time

00:17:02,770 --> 00:17:05,890
as a benchmark that's that's the sort of

00:17:04,839 --> 00:17:07,449
thing where it's like why are you in

00:17:05,890 --> 00:17:10,000
benchmarking this this is silly all

00:17:07,449 --> 00:17:12,480
right let's do the GPU I guess I guess

00:17:10,000 --> 00:17:17,110
you get another story ready just in case

00:17:12,480 --> 00:17:19,449
nope we're fine so that's faster that's

00:17:17,110 --> 00:17:20,650
about well that the GPU is a little slow

00:17:19,449 --> 00:17:23,050
today which makes its math earlier

00:17:20,650 --> 00:17:25,679
easier so that's about 200 something

00:17:23,050 --> 00:17:31,060
times faster that's that's better

00:17:25,679 --> 00:17:34,300
that's that's way better all right cool

00:17:31,060 --> 00:17:35,620
so why well all right this is big no

00:17:34,300 --> 00:17:37,710
notation and I promise that's the last

00:17:35,620 --> 00:17:40,720
really Matthew thing in the talk

00:17:37,710 --> 00:17:43,720
basically to calculate an N by n matrix

00:17:40,720 --> 00:17:46,929
that's a million times a million and

00:17:43,720 --> 00:17:48,400
then for every one of those output cells

00:17:46,929 --> 00:17:50,590
you have to go through a row in a column

00:17:48,400 --> 00:17:53,560
so that's n cubed if n is the width of

00:17:50,590 --> 00:17:56,140
the matrix because we can do every

00:17:53,560 --> 00:17:59,080
single output cell at once on the GPU

00:17:56,140 --> 00:18:01,750
we can be finished in n the earlier edge

00:17:59,080 --> 00:18:03,370
finder is N squared if you do it because

00:18:01,750 --> 00:18:05,890
you have to step through every pixel and

00:18:03,370 --> 00:18:07,720
it's constant time on the GPU which is

00:18:05,890 --> 00:18:09,970
constant time it's awesome

00:18:07,720 --> 00:18:11,290
alright so for those who don't have like

00:18:09,970 --> 00:18:13,390
a visceral understanding what those

00:18:11,290 --> 00:18:15,400
those numbers mean and you got the

00:18:13,390 --> 00:18:18,549
bottom line and squared is the purple

00:18:15,400 --> 00:18:19,960
one a constant is a constant and n cubed

00:18:18,549 --> 00:18:21,460
is the biggest so this is N equals zero

00:18:19,960 --> 00:18:24,070
to five so this is like those first two

00:18:21,460 --> 00:18:28,510
examples we did here there and already n

00:18:24,070 --> 00:18:31,419
cubed is just running away from zero to

00:18:28,510 --> 00:18:33,309
ten around a hundred we can't even see N

00:18:31,419 --> 00:18:37,210
anymore and N squared is looking pretty

00:18:33,309 --> 00:18:39,460
n ish and yeah 1024 which we just did

00:18:37,210 --> 00:18:41,500
you can't even see so the lower lines

00:18:39,460 --> 00:18:43,210
there because n cube just gets so big so

00:18:41,500 --> 00:18:44,790
fast so that's why we get so much gain

00:18:43,210 --> 00:18:46,870
from doing all these things in parallel

00:18:44,790 --> 00:18:49,330
all right this is awesome we've got a

00:18:46,870 --> 00:18:52,179
working proof of concept we've shown 200

00:18:49,330 --> 00:18:54,370
X speed gains this is amazing let's go

00:18:52,179 --> 00:18:56,080
do really cool stuff with this alright

00:18:54,370 --> 00:18:57,190
we can do hash collision are you a white

00:18:56,080 --> 00:18:58,780
hat hacker you can make sure your

00:18:57,190 --> 00:19:00,160
passwords are secure you a black hat

00:18:58,780 --> 00:19:02,980
hacker you can crack people's hat

00:19:00,160 --> 00:19:05,350
passwords we can do Bitcoin mine

00:19:02,980 --> 00:19:07,510
basically all Bitcoin mining happens on

00:19:05,350 --> 00:19:09,220
the GPU in fact the original thought

00:19:07,510 --> 00:19:10,510
process that went into this talk was

00:19:09,220 --> 00:19:12,130
gonna be cool to have a distributed

00:19:10,510 --> 00:19:13,929
website where people could pay their way

00:19:12,130 --> 00:19:15,640
not through micro transactions or

00:19:13,929 --> 00:19:18,010
anything like that but just by crunching

00:19:15,640 --> 00:19:19,840
bitcoins for the site owner it's a nice

00:19:18,010 --> 00:19:21,640
little background payment system and

00:19:19,840 --> 00:19:23,380
they wouldn't have to install anything

00:19:21,640 --> 00:19:24,640
just drop a script and would run but you

00:19:23,380 --> 00:19:26,890
want to be able to do it on the GPU

00:19:24,640 --> 00:19:29,440
because that's how you do a Bitcoin

00:19:26,890 --> 00:19:31,510
mining media encoding a lot of media

00:19:29,440 --> 00:19:33,190
encoding you can do really fast if you

00:19:31,510 --> 00:19:36,580
can paralyze it break it up into chunks

00:19:33,190 --> 00:19:38,290
and then you encode it machine learning

00:19:36,580 --> 00:19:40,750
is basically again just a lot of

00:19:38,290 --> 00:19:43,690
kindergarteners doing math which you

00:19:40,750 --> 00:19:44,890
know in all senses of the words signal

00:19:43,690 --> 00:19:46,390
analysis and process this is a little

00:19:44,890 --> 00:19:47,740
cheating because audio is really just

00:19:46,390 --> 00:19:49,270
the same as video it's all just media

00:19:47,740 --> 00:19:52,030
but it's kind of different cuz it's

00:19:49,270 --> 00:19:53,410
sound alright protein folding you might

00:19:52,030 --> 00:19:54,880
notice some of these are sounding really

00:19:53,410 --> 00:19:56,140
familiar they sound a lot like things

00:19:54,880 --> 00:19:58,299
you can download screen savers for

00:19:56,140 --> 00:20:00,520
because these are highly chunk able

00:19:58,299 --> 00:20:01,750
parallelizable tasks that benefit a lot

00:20:00,520 --> 00:20:04,630
from running on the graphics card

00:20:01,750 --> 00:20:06,550
alright actual application this this is

00:20:04,630 --> 00:20:08,800
the big payoff nope can't do hash

00:20:06,550 --> 00:20:09,789
collision can't do Bitcoin mining can't

00:20:08,800 --> 00:20:11,320
do media encoding

00:20:09,789 --> 00:20:13,090
you might be able to machine-learning

00:20:11,320 --> 00:20:15,039
signal analysis and protein folding I'm

00:20:13,090 --> 00:20:16,809
intrigued by possibly getting these to

00:20:15,039 --> 00:20:20,440
work but the first three big obvious

00:20:16,809 --> 00:20:23,229
things you could do here no all right

00:20:20,440 --> 00:20:25,090
why this is not my cat if I had I do

00:20:23,229 --> 00:20:26,799
have a cat she would get into this

00:20:25,090 --> 00:20:28,299
trouble if I had blinds which I don't so

00:20:26,799 --> 00:20:29,739
the only thing saving this room being my

00:20:28,299 --> 00:20:30,070
cat is I don't actually have blinds like

00:20:29,739 --> 00:20:31,960
that

00:20:30,070 --> 00:20:34,539
all right this is the big one there are

00:20:31,960 --> 00:20:36,279
no bit operations in the current version

00:20:34,539 --> 00:20:38,859
of the shader language server it's

00:20:36,279 --> 00:20:40,869
supplied by WebGL you need bit

00:20:38,859 --> 00:20:43,149
operations for basically anything you

00:20:40,869 --> 00:20:45,759
want to do with a fancy algorithm very

00:20:43,149 --> 00:20:48,039
very smart people have spent the last 40

00:20:45,759 --> 00:20:50,109
or 50 years coming up with really good

00:20:48,039 --> 00:20:52,059
ways to do things with bits because all

00:20:50,109 --> 00:20:53,649
our computers run on bits so if you

00:20:52,059 --> 00:20:55,119
design your algorithm using bit

00:20:53,649 --> 00:20:57,279
operations you can usually optimize them

00:20:55,119 --> 00:20:58,570
really well and we don't have any of

00:20:57,279 --> 00:20:59,590
those that's why we can't do hashes we

00:20:58,570 --> 00:21:01,690
can't do Bitcoin mining which is

00:20:59,590 --> 00:21:04,479
basically just hashes can't do any of

00:21:01,690 --> 00:21:07,239
the other fun stuff boo unresponsive

00:21:04,479 --> 00:21:08,519
window so if you paid really close

00:21:07,239 --> 00:21:11,080
attention you might have seen the

00:21:08,519 --> 00:21:14,229
spinner actually freezes a little bit

00:21:11,080 --> 00:21:15,789
during the WebGL version and the reason

00:21:14,229 --> 00:21:17,679
is because if you're hammering your

00:21:15,789 --> 00:21:19,599
graphics card having it do nothing but

00:21:17,679 --> 00:21:21,549
kindergartener math then it can't do

00:21:19,599 --> 00:21:23,529
anything else like draw your window as

00:21:21,549 --> 00:21:24,940
it changes it's it's the the normal

00:21:23,529 --> 00:21:26,889
problem we have as JavaScript developers

00:21:24,940 --> 00:21:28,929
is Oh get it onto the GPU so that it's

00:21:26,889 --> 00:21:30,789
not hogging up the main thread here we

00:21:28,929 --> 00:21:33,909
put too much stuff on the GPU and you've

00:21:30,789 --> 00:21:35,619
lost everything again and oh it's level

00:21:33,909 --> 00:21:37,539
time as this is a fun little landmine it

00:21:35,619 --> 00:21:39,489
turns out different operating systems

00:21:37,539 --> 00:21:41,769
have different thresholds at which they

00:21:39,489 --> 00:21:44,950
will say no your shaders been running

00:21:41,769 --> 00:21:47,109
too long it's time for you to just stop

00:21:44,950 --> 00:21:49,509
and there's no error there's no

00:21:47,109 --> 00:21:51,070
guaranteed return state sometimes it'll

00:21:49,509 --> 00:21:53,139
give you something sometimes it'll just

00:21:51,070 --> 00:21:56,200
return a blank pixel and you just hit

00:21:53,139 --> 00:21:57,309
these completely without any warning and

00:21:56,200 --> 00:21:58,859
it's terrible when you're trying to

00:21:57,309 --> 00:22:00,639
figure out why your code doesn't work

00:21:58,859 --> 00:22:02,710
all right what do we need to make it

00:22:00,639 --> 00:22:05,349
work this is a big one it's super easy

00:22:02,710 --> 00:22:07,479
we're probably not going to get it but I

00:22:05,349 --> 00:22:09,580
can still hope in newer versions of the

00:22:07,479 --> 00:22:10,809
shader language in OpenGL have bit

00:22:09,580 --> 00:22:13,149
operations a bunch of other cool stuff

00:22:10,809 --> 00:22:15,129
and if they just implemented them in

00:22:13,149 --> 00:22:16,539
WebGL we'd have all of that but there's

00:22:15,129 --> 00:22:18,070
a new graphic standard coming out

00:22:16,539 --> 00:22:19,929
there's a few new graphic standard

00:22:18,070 --> 00:22:22,149
coming out one is Vulcan there's also

00:22:19,929 --> 00:22:23,440
apples metal and there's always been

00:22:22,149 --> 00:22:25,330
Microsoft's direct3d

00:22:23,440 --> 00:22:27,190
and it seems more likely that we'll get

00:22:25,330 --> 00:22:30,900
a web version of one of those than a

00:22:27,190 --> 00:22:33,790
increase in web GL but I can always hope

00:22:30,900 --> 00:22:35,470
canvas WebGL in the web worker Mozilla I

00:22:33,790 --> 00:22:36,850
believe has this implemented last time I

00:22:35,470 --> 00:22:38,710
checked they were announcing it and I

00:22:36,850 --> 00:22:40,510
believe it works now so this is great

00:22:38,710 --> 00:22:42,820
this means that you can take all of this

00:22:40,510 --> 00:22:44,140
work and the serialization and all of

00:22:42,820 --> 00:22:45,640
that which does hog up the main thread

00:22:44,140 --> 00:22:48,460
you can push it off in a web worker and

00:22:45,640 --> 00:22:51,040
it will get all of that off for you all

00:22:48,460 --> 00:22:53,920
right let me sum up WebGL is awesome

00:22:51,040 --> 00:22:56,560
graphics are fun we can do really crazy

00:22:53,920 --> 00:22:58,510
things if we want to try and push it

00:22:56,560 --> 00:22:59,650
really far and with a little bit of help

00:22:58,510 --> 00:23:03,740
we could actually make this into

00:22:59,650 --> 00:23:10,200
practical applications that's it thanks

00:23:03,740 --> 00:23:10,200

YouTube URL: https://www.youtube.com/watch?v=5lO2wDOGIWI


