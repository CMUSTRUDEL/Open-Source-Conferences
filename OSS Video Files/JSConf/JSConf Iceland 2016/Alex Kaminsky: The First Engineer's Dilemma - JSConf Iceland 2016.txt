Title: Alex Kaminsky: The First Engineer's Dilemma - JSConf Iceland 2016
Publication date: 2016-09-15
Playlist: JSConf Iceland 2016
Description: 
	So you've been hired as the first web engineer to work on a major product and have been given complete freedom as to the frameworks, libraries, and tools you wish to use. How do you begin to choose? With the bevy of options available to you, how to you choose a stack that will stand the test of time? I walk through this dilemma through the lens of my own experience building ReutersTV.
Captions: 
	00:00:12,490 --> 00:00:18,890
hi everyone thank you so much for coming

00:00:16,070 --> 00:00:23,270
to see me I know you had many many one

00:00:18,890 --> 00:00:25,430
other choice to go see and really quick

00:00:23,270 --> 00:00:31,400
let me just can I get some smiling faces

00:00:25,430 --> 00:00:37,580
for my Instagram okay let's see just

00:00:31,400 --> 00:00:39,710
finish speech they loved it I my name is

00:00:37,580 --> 00:00:42,140
Alex Kaminski I live in Brooklyn New

00:00:39,710 --> 00:00:44,210
York as she said and a little bit about

00:00:42,140 --> 00:00:47,930
me I am the lead creative engineer at

00:00:44,210 --> 00:00:50,030
Reuters TV if you've never heard of it

00:00:47,930 --> 00:00:53,750
Reuters TV it's a personalized video

00:00:50,030 --> 00:00:58,100
news app we are out on iOS Android Apple

00:00:53,750 --> 00:01:00,769
TV and of course web when I join Reuters

00:00:58,100 --> 00:01:02,869
TV the web app was not yet built and I

00:01:00,769 --> 00:01:07,430
was the first engineer hired to build it

00:01:02,869 --> 00:01:09,530
I met with my bosses my first week and I

00:01:07,430 --> 00:01:11,750
quickly realized they knew roughly what

00:01:09,530 --> 00:01:13,969
I needed to build but they had no strong

00:01:11,750 --> 00:01:16,700
opinions about how I should build it

00:01:13,969 --> 00:01:19,039
what technologies we should use or even

00:01:16,700 --> 00:01:23,180
how the process within the team should

00:01:19,039 --> 00:01:27,799
be structured it was all up to me

00:01:23,180 --> 00:01:30,560
or for you I sunders pop it's a lot of

00:01:27,799 --> 00:01:32,689
pressure it's at the same time very

00:01:30,560 --> 00:01:35,420
exciting and intimidating to be in this

00:01:32,689 --> 00:01:37,579
situation I'm sure a lot of us have

00:01:35,420 --> 00:01:39,469
joined teams later in the life cycle of

00:01:37,579 --> 00:01:42,590
a product and thought we do things

00:01:39,469 --> 00:01:44,749
differently maybe certain aspects of the

00:01:42,590 --> 00:01:47,570
tech are outdated or the process within

00:01:44,749 --> 00:01:49,490
the other teams is dysfunctional this

00:01:47,570 --> 00:01:52,039
was my chance to make sure this didn't

00:01:49,490 --> 00:01:55,039
happen and thus I was faced with the

00:01:52,039 --> 00:01:56,869
first engineers dilemma so put yourself

00:01:55,039 --> 00:01:58,490
in my shoes you know roughly what you

00:01:56,869 --> 00:02:01,100
need to build and you have complete

00:01:58,490 --> 00:02:03,200
freedom as to how to do it what sort of

00:02:01,100 --> 00:02:05,210
decisions do we need to make as first

00:02:03,200 --> 00:02:08,750
engineers to make sure that they don't

00:02:05,210 --> 00:02:10,640
bite you in the ass down the line so I

00:02:08,750 --> 00:02:13,100
looked in my situation and I saw two

00:02:10,640 --> 00:02:16,370
distinct categories of dilemma the first

00:02:13,100 --> 00:02:18,709
word dilemmas of workflow how do you we

00:02:16,370 --> 00:02:21,349
first engineers insert ourselves into

00:02:18,709 --> 00:02:23,760
organizations what sort of relationships

00:02:21,349 --> 00:02:26,970
do we need to build with designers

00:02:23,760 --> 00:02:29,970
product owners CEOs people like that and

00:02:26,970 --> 00:02:32,280
the other obvious type of dilemma is the

00:02:29,970 --> 00:02:34,799
technical kind we all know the absolute

00:02:32,280 --> 00:02:37,290
insane number of options we have to

00:02:34,799 --> 00:02:39,810
build web apps in the modern age how do

00:02:37,290 --> 00:02:41,340
you begin to pick a full text back top

00:02:39,810 --> 00:02:44,060
to bottom that's not going to feel

00:02:41,340 --> 00:02:46,890
completely outdated in just a few months

00:02:44,060 --> 00:02:48,750
so during the rest of this talk I am

00:02:46,890 --> 00:02:51,329
going to talk to you about how I

00:02:48,750 --> 00:02:53,640
navigated all these questions believe me

00:02:51,329 --> 00:02:55,859
I did not get them all right and

00:02:53,640 --> 00:02:57,720
hopefully this won't just apply to those

00:02:55,859 --> 00:03:00,359
of you who are starting at a new company

00:02:57,720 --> 00:03:03,870
but also for side projects and

00:03:00,359 --> 00:03:06,930
freelancers too so let's talk about

00:03:03,870 --> 00:03:08,579
design before I even considered which

00:03:06,930 --> 00:03:10,379
technologies I was going to use on my

00:03:08,579 --> 00:03:13,920
project I wanted to set the tone with

00:03:10,379 --> 00:03:16,590
design and just a quick shout out the

00:03:13,920 --> 00:03:19,530
app was designed by anas landok firm way

00:03:16,590 --> 00:03:22,530
know who are here in the audience so

00:03:19,530 --> 00:03:24,599
shout out to them so many places I've

00:03:22,530 --> 00:03:28,230
worked at design and technology have

00:03:24,599 --> 00:03:29,699
been completely siloed and for me this

00:03:28,230 --> 00:03:32,579
approach is really frustrating for two

00:03:29,699 --> 00:03:34,500
reasons the first is that interpreting

00:03:32,579 --> 00:03:37,290
PSD's or sketch files without any

00:03:34,500 --> 00:03:41,849
context can lead to frustration on

00:03:37,290 --> 00:03:43,590
everyone's part you know designers they

00:03:41,849 --> 00:03:47,400
don't often think about all the

00:03:43,590 --> 00:03:49,980
different breakpoints and browsers and

00:03:47,400 --> 00:03:52,769
other weird edge cases that we know

00:03:49,980 --> 00:03:54,389
we're going to have to deal with and the

00:03:52,769 --> 00:03:55,919
second reason I get frustrated is

00:03:54,389 --> 00:03:57,959
without technology being involved

00:03:55,919 --> 00:04:00,359
upfront in design a lot of designers

00:03:57,959 --> 00:04:01,680
won't know how far they can push it we

00:04:00,359 --> 00:04:03,540
wouldn't all be here at this conference

00:04:01,680 --> 00:04:05,370
if we didn't like staying up to date

00:04:03,540 --> 00:04:07,650
with the most cutting-edge technology

00:04:05,370 --> 00:04:11,190
and I'm guessing there are a lot of

00:04:07,650 --> 00:04:13,199
strict designers in the house so if we

00:04:11,190 --> 00:04:15,629
don't bring that knowledge that we get

00:04:13,199 --> 00:04:17,519
here up up front in the process it

00:04:15,629 --> 00:04:20,430
doesn't translate into the finished

00:04:17,519 --> 00:04:22,770
product and I was hired at Reuters TV to

00:04:20,430 --> 00:04:24,539
push that envelope so getting to work

00:04:22,770 --> 00:04:28,409
with design closely from the beginning

00:04:24,539 --> 00:04:29,840
was very important so when I proposed

00:04:28,409 --> 00:04:32,370
this to the team I noticed two things

00:04:29,840 --> 00:04:34,650
and the first was that design was

00:04:32,370 --> 00:04:36,450
thrilled to be working this way I think

00:04:34,650 --> 00:04:37,560
when us passionate technologists and

00:04:36,450 --> 00:04:38,760
designers get together

00:04:37,560 --> 00:04:41,070
wapping what we've seen and what's cool

00:04:38,760 --> 00:04:42,990
on the web magic things can happen that

00:04:41,070 --> 00:04:45,780
get lost in that delivery of static

00:04:42,990 --> 00:04:48,330
files but the second thing I noticed is

00:04:45,780 --> 00:04:50,910
that it doesn't work for everyone our

00:04:48,330 --> 00:04:52,710
iOS team was already happily underway

00:04:50,910 --> 00:04:54,960
with this more pipeline approach just

00:04:52,710 --> 00:04:56,910
reading sketch files and I'll give you

00:04:54,960 --> 00:04:58,740
that the Zeppelin plugin for sketch has

00:04:56,910 --> 00:05:02,570
made it really easy for developers to

00:04:58,740 --> 00:05:04,950
more accurately interpret static files

00:05:02,570 --> 00:05:07,020
so now our two teams work completely

00:05:04,950 --> 00:05:10,100
differently with design and it actually

00:05:07,020 --> 00:05:13,590
ends up working great for us because web

00:05:10,100 --> 00:05:15,389
gets to work all the way up with design

00:05:13,590 --> 00:05:17,940
and we get to prototype and figure out

00:05:15,389 --> 00:05:19,680
all the kinks and weird stuff with a

00:05:17,940 --> 00:05:22,050
feature before it gets shipped at the

00:05:19,680 --> 00:05:24,840
iOS team so we get to sort of be on the

00:05:22,050 --> 00:05:28,320
vanguard of new features and then the

00:05:24,840 --> 00:05:31,229
iOS team who needs to respect at pushes

00:05:28,320 --> 00:05:35,340
with Apple gets to get more polished

00:05:31,229 --> 00:05:36,810
sketch file from design so the

00:05:35,340 --> 00:05:39,360
relationship with product owners is

00:05:36,810 --> 00:05:42,030
equally important to build early on as

00:05:39,360 --> 00:05:44,460
the first engineer on all the projects

00:05:42,030 --> 00:05:46,200
I've worked on over the years the ones

00:05:44,460 --> 00:05:49,229
where technologies had a big seat at the

00:05:46,200 --> 00:05:52,080
table when coming up with which features

00:05:49,229 --> 00:05:55,410
to work on how they're going to work and

00:05:52,080 --> 00:05:57,810
more my new details like that they've

00:05:55,410 --> 00:05:59,700
been the best ones to work on so as the

00:05:57,810 --> 00:06:01,740
first engineer on a project it's in your

00:05:59,700 --> 00:06:04,350
vest in interest to insert yourself into

00:06:01,740 --> 00:06:07,260
that decision making process as far as

00:06:04,350 --> 00:06:10,289
possible so to do that you have to win

00:06:07,260 --> 00:06:13,260
over these project owners and how do you

00:06:10,289 --> 00:06:15,780
do it my strategy is simple don't be

00:06:13,260 --> 00:06:17,400
that no developer that we've all been at

00:06:15,780 --> 00:06:18,600
some point in our career where you're

00:06:17,400 --> 00:06:21,000
just sick of everything you think

00:06:18,600 --> 00:06:24,150
everything stupid and you're set in your

00:06:21,000 --> 00:06:26,100
ways don't be that guy in your first few

00:06:24,150 --> 00:06:27,660
weeks at a company get excited about the

00:06:26,100 --> 00:06:30,360
features on the roadmap even if you're

00:06:27,660 --> 00:06:31,850
not and actively engage those product

00:06:30,360 --> 00:06:34,169
stakeholders during your build process

00:06:31,850 --> 00:06:36,270
so your first few weeks should be about

00:06:34,169 --> 00:06:38,039
prototyping actively show up demos and

00:06:36,270 --> 00:06:39,570
progress to these people and make

00:06:38,039 --> 00:06:41,639
everyone feel like progress is being

00:06:39,570 --> 00:06:44,550
made you know if you're slogging around

00:06:41,639 --> 00:06:46,560
in the back end and not showing anything

00:06:44,550 --> 00:06:48,630
that's easily visible to these people a

00:06:46,560 --> 00:06:50,370
lot of times they'll get frustrated and

00:06:48,630 --> 00:06:53,160
think that's nothing's getting done

00:06:50,370 --> 00:06:55,199
so prototyping allows you to build trust

00:06:53,160 --> 00:06:56,910
with these people as well as by see some

00:06:55,199 --> 00:07:00,419
time to figure out which technologies

00:06:56,910 --> 00:07:02,940
you want to use on your project speaking

00:07:00,419 --> 00:07:04,320
of technology it's one of the biggest

00:07:02,940 --> 00:07:06,210
decisions you'll make as the first

00:07:04,320 --> 00:07:09,330
engineer and it's also sort of the

00:07:06,210 --> 00:07:10,830
Genesis for this talk now I'm sure a lot

00:07:09,330 --> 00:07:12,330
of us have stepped on a projects and

00:07:10,830 --> 00:07:15,060
wondered who the hell made the call to

00:07:12,330 --> 00:07:17,940
use some weird library or framework or

00:07:15,060 --> 00:07:19,560
old ass tank and the truth is that

00:07:17,940 --> 00:07:21,419
decision can usually be traced all the

00:07:19,560 --> 00:07:22,590
way back to that first engineer and

00:07:21,419 --> 00:07:25,440
we're not going to make that mistake

00:07:22,590 --> 00:07:27,150
this time so to help me I've developed

00:07:25,440 --> 00:07:30,449
something called the new technology

00:07:27,150 --> 00:07:33,710
quadrant theory and it's basically just

00:07:30,449 --> 00:07:36,240
a framework for evaluating frameworks or

00:07:33,710 --> 00:07:37,650
other libraries or technologies are

00:07:36,240 --> 00:07:40,800
interested in and bringing on your

00:07:37,650 --> 00:07:43,110
project so before including anything but

00:07:40,800 --> 00:07:45,330
basic HTML CSS and JavaScript on your

00:07:43,110 --> 00:07:47,130
project I run the technology through

00:07:45,330 --> 00:07:49,680
these four quadrants to decide if it

00:07:47,130 --> 00:07:51,270
fits the bill now my first question I

00:07:49,680 --> 00:07:54,180
look at is friendliness to new

00:07:51,270 --> 00:07:55,800
developers as a community we JavaScript

00:07:54,180 --> 00:07:57,900
engineers have one of the biggest pools

00:07:55,800 --> 00:08:00,539
of developers to draw on out of any

00:07:57,900 --> 00:08:02,220
other language but we lose that if we

00:08:00,539 --> 00:08:04,560
choose these niche technologies that

00:08:02,220 --> 00:08:06,870
shut people out so as the first engineer

00:08:04,560 --> 00:08:08,639
who may be hiring new developers I want

00:08:06,870 --> 00:08:10,500
to make sure I'm able to cast a wide net

00:08:08,639 --> 00:08:13,050
and choose technologies that are going

00:08:10,500 --> 00:08:14,700
to be easily accessible to people so the

00:08:13,050 --> 00:08:17,280
first quadrant or answer I'm looking to

00:08:14,700 --> 00:08:18,900
satisfy is am i comfortable hiring

00:08:17,280 --> 00:08:22,410
someone who's never worked with this

00:08:18,900 --> 00:08:24,900
before on to my project my second

00:08:22,410 --> 00:08:26,550
quadrant is sexiness working on new and

00:08:24,900 --> 00:08:29,610
compelling technology makes us happier

00:08:26,550 --> 00:08:31,289
at our jobs every day likewise it makes

00:08:29,610 --> 00:08:33,060
it easier to attract that new talent

00:08:31,289 --> 00:08:35,610
when it does come time to find that

00:08:33,060 --> 00:08:36,930
second engineer so sexiness and choosing

00:08:35,610 --> 00:08:40,260
good technologies that you're actually

00:08:36,930 --> 00:08:42,300
interested in is equally important my

00:08:40,260 --> 00:08:44,250
third quadrant is my ability to lead on

00:08:42,300 --> 00:08:46,080
it as the first engineer it's going to

00:08:44,250 --> 00:08:48,140
be expected that you know the ins and

00:08:46,080 --> 00:08:50,610
outs of the project and the tech stack

00:08:48,140 --> 00:08:52,770
new engineers are going to be looking to

00:08:50,610 --> 00:08:55,560
you for decisions on how to style build

00:08:52,770 --> 00:08:57,600
and execute on features and that's why

00:08:55,560 --> 00:08:59,610
it's important to use technologies that

00:08:57,600 --> 00:09:01,140
are familiar to you or at least you have

00:08:59,610 --> 00:09:02,850
the ability to get up to speed quickly

00:09:01,140 --> 00:09:05,290
if not

00:09:02,850 --> 00:09:07,120
finally I look at production readiness

00:09:05,290 --> 00:09:09,340
one of the dangers of choosing something

00:09:07,120 --> 00:09:11,250
in the sexy category is that it's buggy

00:09:09,340 --> 00:09:14,020
or its api's are changing really rapidly

00:09:11,250 --> 00:09:15,610
so in addition you want to pick a

00:09:14,020 --> 00:09:17,530
technology that's got a good base

00:09:15,610 --> 00:09:19,750
community in case you do get into those

00:09:17,530 --> 00:09:22,720
sticky situations and you need to turn

00:09:19,750 --> 00:09:24,700
the stack overflow so a good rule of

00:09:22,720 --> 00:09:27,190
thumb as the first engineer is to keep

00:09:24,700 --> 00:09:28,390
the stack to just a few newer workhorse

00:09:27,190 --> 00:09:30,820
frameworks that are going to help you

00:09:28,390 --> 00:09:34,480
build out the app until the product

00:09:30,820 --> 00:09:35,890
requirements dictate otherwise so now

00:09:34,480 --> 00:09:39,220
that I've played out the general

00:09:35,890 --> 00:09:40,870
strategy for evaluating technologies I'm

00:09:39,220 --> 00:09:44,800
going to take you through how I pick the

00:09:40,870 --> 00:09:47,160
stack for Reuters so let's start with

00:09:44,800 --> 00:09:49,240
something easy CSS pre-processing

00:09:47,160 --> 00:09:52,150
everyone knows there's two major players

00:09:49,240 --> 00:09:53,800
in this camp sass and less I ran them

00:09:52,150 --> 00:09:56,200
through quadrant 3 and they both came

00:09:53,800 --> 00:09:58,240
out about dead even I've used both

00:09:56,200 --> 00:10:00,180
extensively in the past I know they're

00:09:58,240 --> 00:10:02,440
production-ready new developer friendly

00:10:00,180 --> 00:10:05,410
and I'm able to write good code with

00:10:02,440 --> 00:10:07,390
both so without with both about dead

00:10:05,410 --> 00:10:08,770
even I was free to make a gut call and

00:10:07,390 --> 00:10:11,440
that's one of the luxuries you have as

00:10:08,770 --> 00:10:13,960
the first engineer I ultimately sell

00:10:11,440 --> 00:10:15,790
around less for my team but let's talk

00:10:13,960 --> 00:10:18,940
about something way more difficult which

00:10:15,790 --> 00:10:20,260
is choosing JavaScript technologies it's

00:10:18,940 --> 00:10:22,360
the elephant in the room at these

00:10:20,260 --> 00:10:24,610
conferences choosing what frameworks to

00:10:22,360 --> 00:10:26,680
use and there have been many many talks

00:10:24,610 --> 00:10:28,570
which discussed the merits of each

00:10:26,680 --> 00:10:30,790
framework and why you should use it I'm

00:10:28,570 --> 00:10:32,560
not going to go into all that but I will

00:10:30,790 --> 00:10:34,780
discuss how I approach the problem and

00:10:32,560 --> 00:10:37,870
ultimately went with the technologies I

00:10:34,780 --> 00:10:39,490
did so looking back at quadrant theory

00:10:37,870 --> 00:10:41,680
one of them to look at railway is your

00:10:39,490 --> 00:10:43,600
own ability to lead on a framework and

00:10:41,680 --> 00:10:45,880
in my case i'd recently shipped three

00:10:43,600 --> 00:10:49,360
major projects in ember angular and

00:10:45,880 --> 00:10:51,070
react given as the lead developer on a

00:10:49,360 --> 00:10:52,660
project i want to feel confident in the

00:10:51,070 --> 00:10:54,520
decisions I'm making about architecture

00:10:52,660 --> 00:10:57,190
I decided to go down the road with one

00:10:54,520 --> 00:10:58,660
of these three so how about sexiness I

00:10:57,190 --> 00:11:00,160
know one of the reasons I was lured to

00:10:58,660 --> 00:11:02,170
Reuters was that I got to help build

00:11:00,160 --> 00:11:04,630
that team and a big part of attracting

00:11:02,170 --> 00:11:07,180
that talent is that good tech stack so

00:11:04,630 --> 00:11:09,340
the new hotness was angular is angular 2

00:11:07,180 --> 00:11:11,830
and I never worked with that before and

00:11:09,340 --> 00:11:14,230
the api's and the language itself is

00:11:11,830 --> 00:11:15,630
extremely different so that eliminated

00:11:14,230 --> 00:11:18,720
that one for me

00:11:15,630 --> 00:11:20,700
just left me with reactant ember now

00:11:18,720 --> 00:11:23,670
both of these frameworks are proven to

00:11:20,700 --> 00:11:26,970
scale Facebook and Instagram use react

00:11:23,670 --> 00:11:28,680
apple and Heroku and others use ember so

00:11:26,970 --> 00:11:31,830
production readiness wasn't really an

00:11:28,680 --> 00:11:34,620
issue and that just left friendliness to

00:11:31,830 --> 00:11:37,500
new developers and truth be told I do

00:11:34,620 --> 00:11:39,380
feel like ember is a friendlier language

00:11:37,500 --> 00:11:42,210
to new door library to new developers

00:11:39,380 --> 00:11:45,630
because when you first see it jsx looks

00:11:42,210 --> 00:11:47,460
weird but quadrant theory does leave

00:11:45,630 --> 00:11:50,730
something important out and that is

00:11:47,460 --> 00:11:52,860
context now Reuters TV is not a

00:11:50,730 --> 00:11:56,310
data-driven application it's really just

00:11:52,860 --> 00:11:59,040
the view of the MVC and there's no

00:11:56,310 --> 00:12:01,470
writing to a database at all the entire

00:11:59,040 --> 00:12:03,990
application is driven by these tiny

00:12:01,470 --> 00:12:05,850
little UI components that have localized

00:12:03,990 --> 00:12:08,610
in global states it's really just a

00:12:05,850 --> 00:12:10,770
pretty video player and wouldn't you

00:12:08,610 --> 00:12:13,620
know it Facebook created react kind of

00:12:10,770 --> 00:12:15,780
to solve this exact issue so given the

00:12:13,620 --> 00:12:17,490
context of my application I decided to

00:12:15,780 --> 00:12:21,150
build it out and react it fit the bill

00:12:17,490 --> 00:12:23,850
exactly for what my app needed but the

00:12:21,150 --> 00:12:25,950
new developer bit the new developer

00:12:23,850 --> 00:12:28,320
friendliness bugged me a bit what

00:12:25,950 --> 00:12:30,600
exactly about react made it so

00:12:28,320 --> 00:12:32,610
complicated so I began to think about

00:12:30,600 --> 00:12:34,800
this question and I realized for me it

00:12:32,610 --> 00:12:37,560
wasn't react itself that was complicated

00:12:34,800 --> 00:12:40,260
it was actually the flux and Redux

00:12:37,560 --> 00:12:43,260
architecture that the whole community

00:12:40,260 --> 00:12:45,420
seems to evangelize almost every guide

00:12:43,260 --> 00:12:47,400
to beginning react today involves

00:12:45,420 --> 00:12:49,650
starting with some build tool rolling up

00:12:47,400 --> 00:12:51,630
a very foreign application architecture

00:12:49,650 --> 00:12:54,120
if you've never used flux and react

00:12:51,630 --> 00:12:57,720
before and did I really need all that

00:12:54,120 --> 00:12:59,520
for Reuters and the answer was no so in

00:12:57,720 --> 00:13:02,070
the first few months of building Reuters

00:12:59,520 --> 00:13:05,070
I build it out on a very lean list of

00:13:02,070 --> 00:13:06,900
libraries react a few utility libraries

00:13:05,070 --> 00:13:10,080
and web pack to package it all together

00:13:06,900 --> 00:13:12,420
and my application was fast simple and

00:13:10,080 --> 00:13:14,010
easy to understand and I felt like I

00:13:12,420 --> 00:13:16,800
could easily get someone who's never

00:13:14,010 --> 00:13:18,750
used react up to speed quickly and to

00:13:16,800 --> 00:13:21,480
this day we still use this flux list

00:13:18,750 --> 00:13:22,710
react stack to great success and I

00:13:21,480 --> 00:13:25,500
challenge you to think about everything

00:13:22,710 --> 00:13:26,790
you're bringing on before importing just

00:13:25,500 --> 00:13:28,740
what school at the moment in the

00:13:26,790 --> 00:13:31,200
community

00:13:28,740 --> 00:13:32,760
so unlike you all I did not have the

00:13:31,200 --> 00:13:34,529
benefit of seeing this talk before

00:13:32,760 --> 00:13:37,620
making these decisions and not

00:13:34,529 --> 00:13:39,660
everything went out that a hitch when I

00:13:37,620 --> 00:13:41,130
chose the build system for my app I went

00:13:39,660 --> 00:13:43,740
over my options just like I did for

00:13:41,130 --> 00:13:47,010
JavaScript and my decision-making came

00:13:43,740 --> 00:13:48,690
down to grunt gulp or web pack now I was

00:13:47,010 --> 00:13:50,250
already familiar with grunt and gulp but

00:13:48,690 --> 00:13:52,649
webpack was the new hot thing on the

00:13:50,250 --> 00:13:55,170
market and I decided to go against

00:13:52,649 --> 00:13:58,920
quadrant theory and use web pack despite

00:13:55,170 --> 00:14:01,020
not knowing anything about it and long

00:13:58,920 --> 00:14:03,779
story short my team is still learning

00:14:01,020 --> 00:14:05,670
and grappling with web pack I don't

00:14:03,779 --> 00:14:08,310
regret the decision to use it it's got a

00:14:05,670 --> 00:14:10,050
lot of pros and cons but I have had some

00:14:08,310 --> 00:14:11,760
embarrassing moments where I haven't

00:14:10,050 --> 00:14:14,130
known a quick fix for my team that I

00:14:11,760 --> 00:14:16,529
absolutely would have if I'd use grunt

00:14:14,130 --> 00:14:17,940
or Goulburn something I knew now luckily

00:14:16,529 --> 00:14:20,040
I made this mistake with our build

00:14:17,940 --> 00:14:22,080
system and not our actual application

00:14:20,040 --> 00:14:24,720
structure but it does go to show the

00:14:22,080 --> 00:14:27,890
importance of understanding technologies

00:14:24,720 --> 00:14:30,839
you decide to use on your own projects

00:14:27,890 --> 00:14:32,100
so the final thing you need to do after

00:14:30,839 --> 00:14:33,990
you figure out how you're going to work

00:14:32,100 --> 00:14:36,420
with design and product and which

00:14:33,990 --> 00:14:38,550
technologies you're going to use is set

00:14:36,420 --> 00:14:39,899
good standards for your team for the

00:14:38,550 --> 00:14:42,720
developers to come and for your own

00:14:39,899 --> 00:14:44,970
development one of the first things I

00:14:42,720 --> 00:14:47,100
did after choosing this text deck was

00:14:44,970 --> 00:14:48,959
work out the style guides for my team

00:14:47,100 --> 00:14:50,790
and I had to come up with answers for

00:14:48,959 --> 00:14:53,459
the following how are we going to

00:14:50,790 --> 00:14:55,649
standardize CSS how do we style it and

00:14:53,459 --> 00:14:57,870
document our JavaScript what does our

00:14:55,649 --> 00:15:00,240
actual project structure look like and

00:14:57,870 --> 00:15:02,940
how do I enforce it all and make sure

00:15:00,240 --> 00:15:06,990
that my developers are speaking the same

00:15:02,940 --> 00:15:08,940
language so just like everything in our

00:15:06,990 --> 00:15:12,450
community a lot of people have a lot of

00:15:08,940 --> 00:15:14,760
opinions about standardized CSS naming

00:15:12,450 --> 00:15:17,640
conventions and now there are some very

00:15:14,760 --> 00:15:19,350
strict systems out there like them and I

00:15:17,640 --> 00:15:22,589
think these are great for massive teams

00:15:19,350 --> 00:15:25,200
that need a lot of structure however to

00:15:22,589 --> 00:15:26,790
me bem felt like overkill for my product

00:15:25,200 --> 00:15:28,829
I felt like it ultimately would have

00:15:26,790 --> 00:15:31,560
slowed me down during a period where I

00:15:28,829 --> 00:15:33,540
needed to be prototyping and really

00:15:31,560 --> 00:15:36,360
throwing out features quickly to show

00:15:33,540 --> 00:15:39,810
progress and demonstrate confidence to

00:15:36,360 --> 00:15:41,370
my team so instead i opted for something

00:15:39,810 --> 00:15:42,360
out of one of my favorite TV character

00:15:41,370 --> 00:15:44,610
Ron Swanson's

00:15:42,360 --> 00:15:47,070
playbook straight down the middle no

00:15:44,610 --> 00:15:51,360
hook no fuss anything more and this

00:15:47,070 --> 00:15:55,380
becomes figure skating so translating

00:15:51,360 --> 00:15:58,170
that that mantra to CSS I came up with

00:15:55,380 --> 00:16:00,450
this dash is not underscores tabs not

00:15:58,170 --> 00:16:02,760
spaces no nesting more than three deep

00:16:00,450 --> 00:16:06,990
and just one file per component and this

00:16:02,760 --> 00:16:08,850
is where great for my team now figuring

00:16:06,990 --> 00:16:12,360
out the style guide for javascript was

00:16:08,850 --> 00:16:14,130
my next dilemma to wrestle with and as

00:16:12,360 --> 00:16:16,620
with choosing my JavaScript framework I

00:16:14,130 --> 00:16:19,410
weighed the context of my app heavily

00:16:16,620 --> 00:16:22,470
when deciding how to enforce JavaScript

00:16:19,410 --> 00:16:24,269
style with my team now if my app was a

00:16:22,470 --> 00:16:26,579
lot of boilerplate and standard app

00:16:24,269 --> 00:16:28,279
structures and BC sort of stuff I could

00:16:26,579 --> 00:16:30,660
have gotten away with your some sensible

00:16:28,279 --> 00:16:32,850
variable and method naming conventions

00:16:30,660 --> 00:16:36,870
and some selective comments on edge

00:16:32,850 --> 00:16:39,060
cases however as I said my application

00:16:36,870 --> 00:16:41,940
is really highly custom and all about

00:16:39,060 --> 00:16:44,160
these little UI components that aren't

00:16:41,940 --> 00:16:46,140
much boilerplate at all so for this

00:16:44,160 --> 00:16:48,690
reason I decided to enforce a much more

00:16:46,140 --> 00:16:52,740
robust commenting structure to help

00:16:48,690 --> 00:16:54,180
everyone stay on the same page so when I

00:16:52,740 --> 00:16:55,920
reflected on projects I've worked on

00:16:54,180 --> 00:16:57,630
from a style perspective I immediately

00:16:55,920 --> 00:16:59,579
gravitated towards the school go project

00:16:57,630 --> 00:17:01,740
I'd work on and while I didn't enjoy

00:16:59,579 --> 00:17:03,510
closure much I did appreciate the fact

00:17:01,740 --> 00:17:04,980
that all the developers on the project

00:17:03,510 --> 00:17:06,900
we're speaking the exact same language

00:17:04,980 --> 00:17:10,079
and all the codes seemed to come from

00:17:06,900 --> 00:17:12,480
the same developer when I think when all

00:17:10,079 --> 00:17:14,850
the code feels consistent it's easier to

00:17:12,480 --> 00:17:16,740
read and you can get in this rhythm of

00:17:14,850 --> 00:17:19,439
understanding and that can get broken

00:17:16,740 --> 00:17:20,910
when you're dealing with different

00:17:19,439 --> 00:17:24,510
blocks of code written in different

00:17:20,910 --> 00:17:27,000
styles so I adopted a lot from their

00:17:24,510 --> 00:17:29,130
style guide when defining how to write

00:17:27,000 --> 00:17:30,809
JavaScript on Reuters and it's been

00:17:29,130 --> 00:17:32,280
immensely helpful now that we have

00:17:30,809 --> 00:17:34,230
several developers working on the

00:17:32,280 --> 00:17:35,910
JavaScript code base so as you can see

00:17:34,230 --> 00:17:39,870
it's sort of like a.j s doc style

00:17:35,910 --> 00:17:44,760
comments and it really helps define what

00:17:39,870 --> 00:17:46,620
every little method and variable does so

00:17:44,760 --> 00:17:49,440
another subject that doesn't get a lot

00:17:46,620 --> 00:17:50,940
of love is directory structure and it's

00:17:49,440 --> 00:17:52,710
one of those decisions that you can sort

00:17:50,940 --> 00:17:55,320
of put off and before you know it you

00:17:52,710 --> 00:17:57,660
have this gnarly directory with tons

00:17:55,320 --> 00:17:58,830
files to sort through and it's just

00:17:57,660 --> 00:18:00,810
another decision that's going to be

00:17:58,830 --> 00:18:02,700
highly dependent based on your framework

00:18:00,810 --> 00:18:05,430
or build system and the context of your

00:18:02,700 --> 00:18:07,770
application but this is how i went about

00:18:05,430 --> 00:18:10,170
it one of the niftiest things about web

00:18:07,770 --> 00:18:13,320
pack is it takes a lot of the stress

00:18:10,170 --> 00:18:15,420
about complicated dependencies out of

00:18:13,320 --> 00:18:17,910
building an app you can import style

00:18:15,420 --> 00:18:19,800
sheets images and other dependencies

00:18:17,910 --> 00:18:21,570
directly into your JavaScript files

00:18:19,800 --> 00:18:24,240
creating these neat little bundles for

00:18:21,570 --> 00:18:26,910
your components as if importing your

00:18:24,240 --> 00:18:30,420
HTML into your JavaScript wasn't enough

00:18:26,910 --> 00:18:32,580
with react so given that I was already

00:18:30,420 --> 00:18:34,140
on the component game plan with react I

00:18:32,580 --> 00:18:35,820
decided to build out my project into

00:18:34,140 --> 00:18:37,890
just these little self-contained modules

00:18:35,820 --> 00:18:39,990
so each major component gets its own

00:18:37,890 --> 00:18:41,340
directory smaller sub components can

00:18:39,990 --> 00:18:43,740
live under them and all the dependencies

00:18:41,340 --> 00:18:45,420
live into these directories so here you

00:18:43,740 --> 00:18:49,110
can see a javascript file and a less

00:18:45,420 --> 00:18:50,700
file under its own directory and as a

00:18:49,110 --> 00:18:53,010
project grew in size ended up further

00:18:50,700 --> 00:18:54,540
segmenting these components down by

00:18:53,010 --> 00:18:57,290
their view sidebar in this case is

00:18:54,540 --> 00:19:00,480
shared so it lives in the shared folder

00:18:57,290 --> 00:19:02,400
so after you've figured out all the

00:19:00,480 --> 00:19:04,440
styles that you want to enforce on your

00:19:02,400 --> 00:19:07,260
project it's not just going to happen

00:19:04,440 --> 00:19:09,360
overnight with code reviews and telling

00:19:07,260 --> 00:19:13,170
your team how you'd like them to do it

00:19:09,360 --> 00:19:16,020
nicely so I turned to linting to help

00:19:13,170 --> 00:19:18,000
enforce them on my team and in the past

00:19:16,020 --> 00:19:21,030
I was familiar with closure compiler and

00:19:18,000 --> 00:19:23,670
Jas lint but now I was leveraging newer

00:19:21,030 --> 00:19:26,940
syntax with react in es6 on my project

00:19:23,670 --> 00:19:29,220
and these didn't quite fit the mold

00:19:26,940 --> 00:19:32,550
anymore so after some research i found

00:19:29,220 --> 00:19:35,160
es lint and that's been a fantastic tool

00:19:32,550 --> 00:19:36,870
for my team it allows you to really

00:19:35,160 --> 00:19:38,400
customize which rules you want to

00:19:36,870 --> 00:19:41,250
enforce and how you want to enforce them

00:19:38,400 --> 00:19:45,510
and even automatically fix them in your

00:19:41,250 --> 00:19:47,940
build process a final thing I did as the

00:19:45,510 --> 00:19:49,500
first engineer as the cherry on top to

00:19:47,940 --> 00:19:51,480
help bring all my style and structure

00:19:49,500 --> 00:19:53,580
decisions together was to create a

00:19:51,480 --> 00:19:55,890
boilerplate template for new components

00:19:53,580 --> 00:19:58,110
I was inspired by rails or angular

00:19:55,890 --> 00:20:00,450
scaffolding which allows you to quickly

00:19:58,110 --> 00:20:02,100
create and generate new components which

00:20:00,450 --> 00:20:04,440
automatically fit the style and

00:20:02,100 --> 00:20:06,090
structure of your application it's just

00:20:04,440 --> 00:20:08,640
a useful little touch you can do as the

00:20:06,090 --> 00:20:09,180
first engineer that will speed up your

00:20:08,640 --> 00:20:11,760
own career

00:20:09,180 --> 00:20:14,130
of new components as well as give other

00:20:11,760 --> 00:20:16,170
developers a jumpstart to creating their

00:20:14,130 --> 00:20:20,160
own features that match your projects

00:20:16,170 --> 00:20:21,780
feng shui so I've just touched on all

00:20:20,160 --> 00:20:23,550
the basic dilemmas that you're going to

00:20:21,780 --> 00:20:25,590
encounter is the first engineer and

00:20:23,550 --> 00:20:27,780
every organization is a totally

00:20:25,590 --> 00:20:29,550
different beast but just to recap I'm

00:20:27,780 --> 00:20:31,680
going to give you a battle plan to help

00:20:29,550 --> 00:20:36,030
you if you ever find yourself as the

00:20:31,680 --> 00:20:37,770
first engineer at a company so I'm going

00:20:36,030 --> 00:20:42,020
to break it into three phases the first

00:20:37,770 --> 00:20:44,700
phase is really about finding you're

00:20:42,020 --> 00:20:46,560
finding yourself within the organization

00:20:44,700 --> 00:20:49,230
you need to define your relationship

00:20:46,560 --> 00:20:52,080
with design and I mean you should get up

00:20:49,230 --> 00:20:55,110
and close with them and prototype and

00:20:52,080 --> 00:20:57,360
get on top of the features and really

00:20:55,110 --> 00:20:58,440
take an active role in defining what you

00:20:57,360 --> 00:21:00,630
guys are going to build you're going to

00:20:58,440 --> 00:21:02,730
find yourself way more invested in the

00:21:00,630 --> 00:21:05,580
product and you're going to find that

00:21:02,730 --> 00:21:07,110
the end results are much better and you

00:21:05,580 --> 00:21:09,600
can use this time to while you're

00:21:07,110 --> 00:21:12,270
prototyping to show it off and build

00:21:09,600 --> 00:21:13,440
trust with product owners CEOs people

00:21:12,270 --> 00:21:15,150
like that who are going to be really

00:21:13,440 --> 00:21:17,280
impressed by you and want to give you a

00:21:15,150 --> 00:21:19,050
seat at the decision-making table when

00:21:17,280 --> 00:21:21,360
deciding sort of where your product is

00:21:19,050 --> 00:21:23,340
going to go and you're going to use this

00:21:21,360 --> 00:21:26,070
phase where you're prototyping and

00:21:23,340 --> 00:21:27,660
looking at the features to look at the

00:21:26,070 --> 00:21:29,370
big picture requirements for your app

00:21:27,660 --> 00:21:31,950
and it's going to help you make informed

00:21:29,370 --> 00:21:34,770
technical decisions in the second phase

00:21:31,950 --> 00:21:36,120
which is choosing technologies and here

00:21:34,770 --> 00:21:38,310
you want to think about your CSS

00:21:36,120 --> 00:21:40,260
preprocessors your JavaScript frameworks

00:21:38,310 --> 00:21:42,510
or build system and you can use that

00:21:40,260 --> 00:21:44,730
quadrant theory i showed you to help

00:21:42,510 --> 00:21:47,820
rule stuff out and just rule of thumb to

00:21:44,730 --> 00:21:49,620
start be lean and rely on just a few

00:21:47,820 --> 00:21:50,880
workhorse frameworks that are tried and

00:21:49,620 --> 00:21:53,580
true and they're going to help you

00:21:50,880 --> 00:21:55,080
through the day finally phase 3 is just

00:21:53,580 --> 00:21:59,100
about building standards for your team

00:21:55,080 --> 00:22:00,810
set CSS styles set JavaScript styles and

00:21:59,100 --> 00:22:02,640
stick to them you're really going to

00:22:00,810 --> 00:22:04,350
thank yourself ten years from now when

00:22:02,640 --> 00:22:06,780
your code base is still maintainable and

00:22:04,350 --> 00:22:10,050
it's you're able to bring new developers

00:22:06,780 --> 00:22:12,420
on easily think about your directory set

00:22:10,050 --> 00:22:14,060
up early don't wait to the last minute

00:22:12,420 --> 00:22:17,040
or else it'll be a jumbled mess and

00:22:14,060 --> 00:22:18,570
finally find a way to enforce it besides

00:22:17,040 --> 00:22:21,210
just telling developers how you'd like

00:22:18,570 --> 00:22:22,250
it I use linting on my project it works

00:22:21,210 --> 00:22:24,130
pretty well it's

00:22:22,250 --> 00:22:27,890
automatically part of our build process

00:22:24,130 --> 00:22:29,450
and I first I dreaded those little red

00:22:27,890 --> 00:22:31,040
dots popping up on my coat every day but

00:22:29,450 --> 00:22:32,960
now I actually look forward to it

00:22:31,040 --> 00:22:35,750
because the code is really clean even

00:22:32,960 --> 00:22:37,820
when another developer touches it so

00:22:35,750 --> 00:22:40,370
thank you so much for coming to see me I

00:22:37,820 --> 00:22:41,720
hope this was helpful and I really hope

00:22:40,370 --> 00:22:44,260
you guys enjoy your stay in Iceland

00:22:41,720 --> 00:22:44,260

YouTube URL: https://www.youtube.com/watch?v=w-CSrRquNGI


