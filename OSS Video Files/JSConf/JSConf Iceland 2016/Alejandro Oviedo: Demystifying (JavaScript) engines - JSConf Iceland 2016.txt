Title: Alejandro Oviedo: Demystifying (JavaScript) engines - JSConf Iceland 2016
Publication date: 2016-09-16
Playlist: JSConf Iceland 2016
Description: 
	How a JavaScript engine works? What are its basic components? How to measure its performance? What is JIT compilation? Stigmatization: is JavaScript fast enough? are some of the questions I think we currently fail to answer in a, somewhat, short and direct way.
Captions: 
	00:00:11,490 --> 00:00:15,480
thank you hey everyone my name is

00:00:14,410 --> 00:00:18,250
Alejandra

00:00:15,480 --> 00:00:20,920
and this talk will be about JavaScript

00:00:18,250 --> 00:00:22,869
engines you'll find that through all the

00:00:20,920 --> 00:00:26,050
documentation and references

00:00:22,869 --> 00:00:28,060
they are also referenced Bertil machine

00:00:26,050 --> 00:00:29,949
so this could be considered as an

00:00:28,060 --> 00:00:33,550
introduction to a subtype of virtual

00:00:29,949 --> 00:00:35,230
machines but before we continue I wanted

00:00:33,550 --> 00:00:38,769
to say three things about this talk

00:00:35,230 --> 00:00:41,949
first the first one is why I care about

00:00:38,769 --> 00:00:44,949
these things at some point I became

00:00:41,949 --> 00:00:47,710
obsessed with performance and speed but

00:00:44,949 --> 00:00:50,530
it's something I think we all can relate

00:00:47,710 --> 00:00:53,140
to which for the fastest card the

00:00:50,530 --> 00:00:55,150
fastest swimmer the fastest runner and

00:00:53,140 --> 00:00:57,940
in programming we look for faster

00:00:55,150 --> 00:01:01,589
applications of faster algorithms faster

00:00:57,940 --> 00:01:09,070
functions run faster micro operations I

00:01:01,589 --> 00:01:12,880
realized that to answer some of these

00:01:09,070 --> 00:01:16,780
questions I needed to understand these

00:01:12,880 --> 00:01:18,670
things the second thing I wanted to tell

00:01:16,780 --> 00:01:22,600
you is why I think you should care about

00:01:18,670 --> 00:01:25,030
this talk I believe that having some

00:01:22,600 --> 00:01:27,970
understanding on this subject will give

00:01:25,030 --> 00:01:31,960
you the tools to think and reason about

00:01:27,970 --> 00:01:34,600
what makes your code fast or slow and as

00:01:31,960 --> 00:01:37,450
you are deeper into the more complex

00:01:34,600 --> 00:01:41,409
details you will gain insight in all the

00:01:37,450 --> 00:01:45,250
ranges between those two extremes the

00:01:41,409 --> 00:01:47,440
third one on last is a really big

00:01:45,250 --> 00:01:49,300
disclaimer I'm fascinated by virtual

00:01:47,440 --> 00:01:52,420
machines and compilers but I'm not a

00:01:49,300 --> 00:01:53,950
virtual machine specialist and certainly

00:01:52,420 --> 00:01:56,320
do not represent any of the browser

00:01:53,950 --> 00:01:57,909
vendors mentioned here if you find

00:01:56,320 --> 00:02:00,780
something that's wrong or could be faced

00:01:57,909 --> 00:02:04,150
in a better way please reach out to me

00:02:00,780 --> 00:02:05,590
so I started my path going through that

00:02:04,150 --> 00:02:07,420
by the way that's me

00:02:05,590 --> 00:02:09,280
if you can recognize me it's probably

00:02:07,420 --> 00:02:11,680
the hurt

00:02:09,280 --> 00:02:13,120
it's okay I started my path going

00:02:11,680 --> 00:02:15,190
through the history of JavaScript

00:02:13,120 --> 00:02:20,040
engines and he found an inflection point

00:02:15,190 --> 00:02:23,890
around 2006 2007 before that time

00:02:20,040 --> 00:02:25,810
engines were pretty straightforward they

00:02:23,890 --> 00:02:30,600
the engine would to the source code and

00:02:25,810 --> 00:02:34,210
parse it to an abstract syntax tree or

00:02:30,600 --> 00:02:37,120
ASD for sure and I ast will meet

00:02:34,210 --> 00:02:39,340
comments parentheses commas semicolons

00:02:37,120 --> 00:02:42,850
all the things that are part of the

00:02:39,340 --> 00:02:45,790
syntax and will represent block blocks

00:02:42,850 --> 00:02:49,709
and statements as nodes in a tree

00:02:45,790 --> 00:02:53,320
structure the next step would be to

00:02:49,709 --> 00:02:56,980
transform the ast to byte code which is

00:02:53,320 --> 00:02:59,350
an internal representation by code can

00:02:56,980 --> 00:03:02,290
be described as a well-defined set of

00:02:59,350 --> 00:03:04,060
instructions and can be also considered

00:03:02,290 --> 00:03:06,250
as a portable representation

00:03:04,060 --> 00:03:08,020
since divide code instructions will not

00:03:06,250 --> 00:03:11,170
change through the different CPU

00:03:08,020 --> 00:03:14,620
architectures machine code on the other

00:03:11,170 --> 00:03:17,110
hand will change its architecture

00:03:14,620 --> 00:03:19,209
specific meaning that for the same lines

00:03:17,110 --> 00:03:21,910
of JavaScript it's machine code will

00:03:19,209 --> 00:03:29,410
vary from a model CPU to desktop or

00:03:21,910 --> 00:03:31,810
laptop CPUs the final step needed for

00:03:29,410 --> 00:03:34,510
the running for running your program is

00:03:31,810 --> 00:03:36,280
what I call an execution phase which is

00:03:34,510 --> 00:03:38,799
often described as really big switch

00:03:36,280 --> 00:03:41,769
statement that for each byte

00:03:38,799 --> 00:03:44,830
construction will graph and will jump to

00:03:41,769 --> 00:03:47,680
the appropriate code like in most

00:03:44,830 --> 00:03:50,019
high-level languages JavaScript will not

00:03:47,680 --> 00:03:52,209
deal with memory locations explicitly

00:03:50,019 --> 00:03:55,360
you can create objects on all those

00:03:52,209 --> 00:03:58,239
objects will be allocated internally by

00:03:55,360 --> 00:04:00,610
the engine those objects can also be in

00:03:58,239 --> 00:04:03,459
reference and in order to reuse those

00:04:00,610 --> 00:04:05,860
precious bits of memory the system will

00:04:03,459 --> 00:04:07,120
need a garbage collector there are

00:04:05,860 --> 00:04:09,519
different strategies to implement

00:04:07,120 --> 00:04:14,019
garbage collectors but we will leave

00:04:09,519 --> 00:04:17,680
those details for later turns out this

00:04:14,019 --> 00:04:20,019
set up this architecture is considerably

00:04:17,680 --> 00:04:22,390
is conservatively slow were slow means

00:04:20,019 --> 00:04:25,510
implicitly comparing to the performance

00:04:22,390 --> 00:04:29,110
of C or C++ program after all the

00:04:25,510 --> 00:04:30,880
optimizations are applied so a good a

00:04:29,110 --> 00:04:33,340
group of brilliant people worked on

00:04:30,880 --> 00:04:36,910
improvements over this architecture in

00:04:33,340 --> 00:04:40,990
the 70s for Fortran in the 80s for us

00:04:36,910 --> 00:04:45,390
and solve runtimes and they came up with

00:04:40,990 --> 00:04:45,390
this concept of adaptive optimization

00:04:45,810 --> 00:04:51,550
with the idea the idea is to identify

00:04:48,970 --> 00:04:55,240
the pieces of your program that are

00:04:51,550 --> 00:04:57,370
executing too often are also called hot

00:04:55,240 --> 00:05:01,000
functions and to compile them on run

00:04:57,370 --> 00:05:03,630
time hence the name just-in-time

00:05:01,000 --> 00:05:06,370
compiler or compiler for short

00:05:03,630 --> 00:05:08,850
after compilation the ancient wouldn't

00:05:06,370 --> 00:05:11,950
have any other head for running the code

00:05:08,850 --> 00:05:13,960
well with just the interpreter that will

00:05:11,950 --> 00:05:17,950
have to go through the the really big

00:05:13,960 --> 00:05:21,960
switch from bytecode instructions to the

00:05:17,950 --> 00:05:21,960
code each time you are executing that

00:05:22,470 --> 00:05:26,340
this approach it's also a great

00:05:24,730 --> 00:05:28,810
opportunity to apply the optimistic

00:05:26,340 --> 00:05:31,210
optimizations in diagramming languages

00:05:28,810 --> 00:05:34,210
like JavaScript for example collecting

00:05:31,210 --> 00:05:35,500
type information about the context of a

00:05:34,210 --> 00:05:37,870
function called could open the

00:05:35,500 --> 00:05:41,560
possibilities for type specializing

00:05:37,870 --> 00:05:43,810
optimizations in order to optimize

00:05:41,560 --> 00:05:46,660
property access in the enemy languages

00:05:43,810 --> 00:05:49,570
during caches or ICS for short were

00:05:46,660 --> 00:05:52,990
invented in caches our way to save a

00:05:49,570 --> 00:05:55,840
fast path the first time in access the

00:05:52,990 --> 00:05:58,870
property it will use a slow path but

00:05:55,840 --> 00:06:02,170
will recall all the steps needed to get

00:05:58,870 --> 00:06:05,020
it global variables variables from

00:06:02,170 --> 00:06:08,590
closures and even prototype chains can

00:06:05,020 --> 00:06:10,840
be optimized by ICS imagine that after

00:06:08,590 --> 00:06:13,810
optimization a hundred objects length

00:06:10,840 --> 00:06:15,910
prototype chain could he'll have almost

00:06:13,810 --> 00:06:18,760
the same performance that accessing a

00:06:15,910 --> 00:06:22,480
property of an object with no prototype

00:06:18,760 --> 00:06:24,670
at all and that's amazing that's the

00:06:22,480 --> 00:06:30,940
performance improvement you could get by

00:06:24,670 --> 00:06:33,420
just using inline caches the basis for

00:06:30,940 --> 00:06:36,370
most ancient implementations consists of

00:06:33,420 --> 00:06:39,160
interpreter and to optimizing compilers

00:06:36,370 --> 00:06:41,410
on your left the one that optimized

00:06:39,160 --> 00:06:45,250
compilation time and on your right the

00:06:41,410 --> 00:06:47,500
one that optimized execution time the

00:06:45,250 --> 00:06:49,719
one optimizing execution time also

00:06:47,500 --> 00:06:53,110
called optimizing compiler

00:06:49,719 --> 00:06:55,269
will highly depend on the type

00:06:53,110 --> 00:06:58,049
information collected from the system

00:06:55,269 --> 00:07:00,879
the on obtain an optimizing compiler

00:06:58,049 --> 00:07:05,169
would generally create England caches

00:07:00,879 --> 00:07:07,539
and help Colette type information type

00:07:05,169 --> 00:07:10,179
changes in the code could trigger type

00:07:07,539 --> 00:07:14,110
the type specializing compiler to

00:07:10,179 --> 00:07:17,619
recompile and in some cases after an

00:07:14,110 --> 00:07:20,199
excessive amount of time changes the the

00:07:17,619 --> 00:07:23,849
compiler could desist and penalize the

00:07:20,199 --> 00:07:27,209
code marking it as non optimizable

00:07:23,849 --> 00:07:29,199
switching to a real-world architecture

00:07:27,209 --> 00:07:31,539
SpiderMonkey is not too far from the

00:07:29,199 --> 00:07:33,939
previous example it will receive the

00:07:31,539 --> 00:07:37,809
source code I will transfer me to a

00:07:33,939 --> 00:07:39,669
bytecode after the number of times a

00:07:37,809 --> 00:07:42,689
function is executed goes over a certain

00:07:39,669 --> 00:07:46,419
threshold it will then be marked as

00:07:42,689 --> 00:07:49,779
optimisation by the first compiler which

00:07:46,419 --> 00:07:52,299
is baseline after the number of times a

00:07:49,779 --> 00:07:54,759
function is executed goes goes over a

00:07:52,299 --> 00:07:57,819
second threshold it will then be marked

00:07:54,759 --> 00:08:00,610
as candidate for really really good

00:07:57,819 --> 00:08:02,979
optimization that's when IO monkey kicks

00:08:00,610 --> 00:08:06,039
in and with the byte code plus the type

00:08:02,979 --> 00:08:08,619
information collected it will compile

00:08:06,039 --> 00:08:12,579
the function with all the optimizations

00:08:08,619 --> 00:08:15,789
that kind of like the previous example

00:08:12,579 --> 00:08:18,489
where both compilers would bail out to

00:08:15,789 --> 00:08:24,699
the interpreter in this case the code

00:08:18,489 --> 00:08:26,919
will bail out to the baseline sheet in

00:08:24,699 --> 00:08:28,869
the case of track record it shows a

00:08:26,919 --> 00:08:32,620
similar architecture to spider monkey

00:08:28,869 --> 00:08:35,409
and it has an interpreter and optimizing

00:08:32,620 --> 00:08:37,889
an optimizing compiler which is a simple

00:08:35,409 --> 00:08:39,689
cheat and an optimizing compiler

00:08:37,889 --> 00:08:42,459
photoshoot

00:08:39,689 --> 00:08:43,870
the interesting part about chat rocker

00:08:42,459 --> 00:08:47,319
is that he can fire

00:08:43,870 --> 00:08:49,259
additional threats to compile or to run

00:08:47,319 --> 00:08:51,819
the garbage collection

00:08:49,259 --> 00:08:54,939
imagine that you're running the engine

00:08:51,819 --> 00:08:58,709
on a fork or CPU in theory you could

00:08:54,939 --> 00:09:01,660
take advantage of that and compile

00:08:58,709 --> 00:09:04,439
paralyze the ship compilation in three

00:09:01,660 --> 00:09:04,439
of those core

00:09:04,899 --> 00:09:11,410
in the case of BA it has recently

00:09:08,240 --> 00:09:15,170
switched to afford to the architecture

00:09:11,410 --> 00:09:17,240
it has an interpreter it has an an

00:09:15,170 --> 00:09:20,629
optimizing compiler also called full

00:09:17,240 --> 00:09:24,589
culture and to optimizing compilers hang

00:09:20,629 --> 00:09:27,139
shot on turbofan the full cogent

00:09:24,589 --> 00:09:31,279
compiler resembles to the baseline sheet

00:09:27,139 --> 00:09:36,740
of SpiderMonkey both will create inline

00:09:31,279 --> 00:09:38,540
caches if b8 profilers in the identifies

00:09:36,740 --> 00:09:41,660
that a function is taking a good

00:09:38,540 --> 00:09:45,019
proportion of the execution time it will

00:09:41,660 --> 00:09:49,670
then notify the the system to optimize

00:09:45,019 --> 00:09:53,300
it both crankshaft and turbofan applies

00:09:49,670 --> 00:09:57,199
optimistic optimizations and type

00:09:53,300 --> 00:10:00,139
specializing optimizations there are dia

00:09:57,199 --> 00:10:02,990
is to deprecated eventually crankshaft

00:10:00,139 --> 00:10:07,870
and full Cochin and just leave munition

00:10:02,990 --> 00:10:07,870
and the the turbofan compiler

00:10:09,069 --> 00:10:15,199
javascriptcore has also a four tiered

00:10:11,509 --> 00:10:17,480
architecture has an interpreter and an

00:10:15,199 --> 00:10:22,660
optimizing compiler and to optimizing

00:10:17,480 --> 00:10:26,000
compilers the FG compiler and FTO

00:10:22,660 --> 00:10:28,130
if finest the statement is executed more

00:10:26,000 --> 00:10:29,870
than a hundred times or the function is

00:10:28,130 --> 00:10:32,540
called more than six times the engine

00:10:29,870 --> 00:10:36,889
will then optimize with the baseline

00:10:32,540 --> 00:10:39,230
compiler once the statement goes over a

00:10:36,889 --> 00:10:42,500
thousand times or the function is calmer

00:10:39,230 --> 00:10:46,730
than 66 times the function will be

00:10:42,500 --> 00:10:51,170
compiled using DFG once that numbers

00:10:46,730 --> 00:10:54,139
goes over 10,000 the FGL compiler kicks

00:10:51,170 --> 00:10:57,769
in as you can see there's a component

00:10:54,139 --> 00:11:00,259
inside dfdl which is a little be M L o

00:10:57,769 --> 00:11:02,480
BM is a compiler that applies all sorts

00:11:00,259 --> 00:11:05,300
of optimizations and search as a

00:11:02,480 --> 00:11:07,610
back-end for f GL that means the engine

00:11:05,300 --> 00:11:09,860
would gather the time in front

00:11:07,610 --> 00:11:13,550
information they bytecode and transform

00:11:09,860 --> 00:11:15,740
that into lower-level representation to

00:11:13,550 --> 00:11:18,959
fit that into a low VM

00:11:15,740 --> 00:11:21,449
they also recently switched to to

00:11:18,959 --> 00:11:25,019
another back in for the FTL compiler

00:11:21,449 --> 00:11:29,910
called v3 but that's only on OSX

00:11:25,019 --> 00:11:32,009
machines and they were looking to keep

00:11:29,910 --> 00:11:36,480
all the optimizations they wanted but

00:11:32,009 --> 00:11:38,430
reduce the compilation time which is

00:11:36,480 --> 00:11:41,089
briefly talked about the different

00:11:38,430 --> 00:11:44,339
architectures for most advances

00:11:41,089 --> 00:11:47,069
JavaScript engines notes let's talk

00:11:44,339 --> 00:11:50,449
about the specific optimizations they

00:11:47,069 --> 00:11:51,769
are all applying let's say you have a

00:11:50,449 --> 00:11:55,079
look

00:11:51,769 --> 00:11:57,930
executed many times and its side its

00:11:55,079 --> 00:11:59,880
body a single expression of finding the

00:11:57,930 --> 00:12:04,370
variable were incremented multiplied by

00:11:59,880 --> 00:12:06,959
some arbitrary number the reasonable

00:12:04,370 --> 00:12:09,180
performance improvement would be to make

00:12:06,959 --> 00:12:11,399
the calculation once I'm reference it

00:12:09,180 --> 00:12:14,970
through a temporary variable in all the

00:12:11,399 --> 00:12:17,069
iterations all the ancients mentioned

00:12:14,970 --> 00:12:19,350
here applies this optimization

00:12:17,069 --> 00:12:23,040
internally and it's called loop

00:12:19,350 --> 00:12:25,290
invariant code motion one of the

00:12:23,040 --> 00:12:27,750
simplest optimizations at JIT compiler

00:12:25,290 --> 00:12:30,079
could apply is called functioning

00:12:27,750 --> 00:12:33,329
language let's come back to your

00:12:30,079 --> 00:12:35,310
canonical and inside its body we execute

00:12:33,329 --> 00:12:37,500
a function if the loop iterates a

00:12:35,310 --> 00:12:40,350
certain amount of times the profiler

00:12:37,500 --> 00:12:42,209
will identify the function as hot and if

00:12:40,350 --> 00:12:44,370
some conditions apply

00:12:42,209 --> 00:12:48,360
we'll grab the functions body and paste

00:12:44,370 --> 00:12:50,430
it directly inside the loop now you may

00:12:48,360 --> 00:12:53,399
be wondering why it should be faster

00:12:50,430 --> 00:12:55,579
since it's the same code in low-level

00:12:53,399 --> 00:12:58,079
programming languages like assembly

00:12:55,579 --> 00:13:01,410
calling a function would end up in a

00:12:58,079 --> 00:13:03,480
context which recently after the

00:13:01,410 --> 00:13:06,029
function call you will have to save the

00:13:03,480 --> 00:13:08,850
previous context and right after you

00:13:06,029 --> 00:13:14,639
return from the function you'll have to

00:13:08,850 --> 00:13:17,910
resume that saved context let's continue

00:13:14,639 --> 00:13:20,730
with the the next optimization imagine a

00:13:17,910 --> 00:13:22,980
loop with just an expression it could be

00:13:20,730 --> 00:13:25,649
an expression you want but if it doesn't

00:13:22,980 --> 00:13:28,550
have side effects like assigning the

00:13:25,649 --> 00:13:28,550
result to a variable

00:13:30,380 --> 00:13:36,540
that's one yeah like assigning the

00:13:33,089 --> 00:13:39,120
result variable or returning the result

00:13:36,540 --> 00:13:42,269
it could be optimized by just about in

00:13:39,120 --> 00:13:44,940
doing anything at all and that's what

00:13:42,269 --> 00:13:49,740
the compiler will do internally just

00:13:44,940 --> 00:13:51,029
remove the expression this accepting

00:13:49,740 --> 00:13:53,850
station is called death called

00:13:51,029 --> 00:13:56,880
elimination and some compilers like the

00:13:53,850 --> 00:14:01,440
JVM good would go further and lick the

00:13:56,880 --> 00:14:03,959
whole loop just be aware that some of

00:14:01,440 --> 00:14:07,410
the features of JavaScript will inhibit

00:14:03,959 --> 00:14:10,320
type specializing optimizations like the

00:14:07,410 --> 00:14:15,120
eval function the width operator and

00:14:10,320 --> 00:14:17,160
try-catch blocks we mentioned before

00:14:15,120 --> 00:14:19,370
that there's different strategies to

00:14:17,160 --> 00:14:23,279
implement garbage collecting systems

00:14:19,370 --> 00:14:25,820
here you can see a brief comparison of

00:14:23,279 --> 00:14:28,079
all the different implementations

00:14:25,820 --> 00:14:30,779
generational garbage collectors will

00:14:28,079 --> 00:14:33,029
group objects by their life span and

00:14:30,779 --> 00:14:37,350
we'll assume that young objects are more

00:14:33,029 --> 00:14:41,399
likely to leave to die sorry that old

00:14:37,350 --> 00:14:43,440
objects under these strategy the new

00:14:41,399 --> 00:14:45,930
objects are created in a nursery space

00:14:43,440 --> 00:14:50,820
and long-lived objects are moved to

00:14:45,930 --> 00:14:52,740
channel space incremental G sees inter

00:14:50,820 --> 00:14:56,570
leave their work with the activity from

00:14:52,740 --> 00:15:01,110
the main program well on the other hand

00:14:56,570 --> 00:15:03,270
stop the world strategy will halt the

00:15:01,110 --> 00:15:07,620
execution of the main program until a

00:15:03,270 --> 00:15:10,260
full collection is done disease can also

00:15:07,620 --> 00:15:13,890
be described as precise or conservative

00:15:10,260 --> 00:15:16,529
ones precise ones can identify all the

00:15:13,890 --> 00:15:19,740
references while conservative ones will

00:15:16,529 --> 00:15:23,550
find will look for memory patterns to

00:15:19,740 --> 00:15:26,100
find references the slack the last

00:15:23,550 --> 00:15:29,130
approach could lead to false positives

00:15:26,100 --> 00:15:31,310
but that's not always a problem in

00:15:29,130 --> 00:15:31,310
practice

00:15:34,190 --> 00:15:39,750
in this following link you can find all

00:15:37,649 --> 00:15:41,760
the resources that I use while working

00:15:39,750 --> 00:15:43,680
on this presentation if you want to read

00:15:41,760 --> 00:15:45,839
more about cheat compilers or garbage

00:15:43,680 --> 00:15:47,970
collection and you're interested in to

00:15:45,839 --> 00:15:51,870
the details there's a lot of material in

00:15:47,970 --> 00:15:54,930
there there's also some questions that I

00:15:51,870 --> 00:16:00,269
keep uploading to that to myself and

00:15:54,930 --> 00:16:01,950
there's some conversation about it you

00:16:00,269 --> 00:16:07,010
can always find me after the talk and

00:16:01,950 --> 00:16:12,120
ask me anything you want just to wrap up

00:16:07,010 --> 00:16:16,410
a good question about this topic that I

00:16:12,120 --> 00:16:18,870
came it was how do you measure the

00:16:16,410 --> 00:16:22,380
overall performance of any of those

00:16:18,870 --> 00:16:25,680
JavaScript engines and there's not a

00:16:22,380 --> 00:16:29,070
really good answer to that there's a lot

00:16:25,680 --> 00:16:32,490
of benchmarks out there to test all the

00:16:29,070 --> 00:16:35,570
edge case but certainly micro benchmarks

00:16:32,490 --> 00:16:39,600
will not show show you the whole picture

00:16:35,570 --> 00:16:42,380
that being said I think we all should

00:16:39,600 --> 00:16:45,480
strive for maintainable and clean code

00:16:42,380 --> 00:16:48,209
all the optimizations techniques that I

00:16:45,480 --> 00:16:50,190
came across have reasonable requirements

00:16:48,209 --> 00:16:52,800
to apply like functions to be

00:16:50,190 --> 00:16:55,560
monomorphic things more related to

00:16:52,800 --> 00:16:59,480
dynamic typing and have nothing to do

00:16:55,560 --> 00:17:03,500
with using obscure features of language

00:16:59,480 --> 00:17:03,500

YouTube URL: https://www.youtube.com/watch?v=yJB5k8B0MTQ


