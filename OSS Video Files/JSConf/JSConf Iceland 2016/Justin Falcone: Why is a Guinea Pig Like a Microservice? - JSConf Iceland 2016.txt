Title: Justin Falcone: Why is a Guinea Pig Like a Microservice? - JSConf Iceland 2016
Publication date: 2016-09-16
Playlist: JSConf Iceland 2016
Description: 
	Functional state systems like Redux have made web development easier to reason about -- how can we apply these techniques to complex distributed systems? And what lessons from the distributed world can we bring back to web development? This talk explores concurrency models through the lens of a virtual guinea pig colony, and covers topics including actors, sagas, emergent behavior, and the unexpected virtue of object-oriented programming.
Captions: 
	00:00:13,030 --> 00:00:23,259
all right so these are my critters

00:00:15,820 --> 00:00:26,079
allegra and claritin now about a year

00:00:23,259 --> 00:00:27,880
ago i started a project well i started a

00:00:26,079 --> 00:00:32,800
Pinterest board called guinea pig fairy

00:00:27,880 --> 00:00:35,760
village my my critters have a fairly

00:00:32,800 --> 00:00:38,559
large cage but you know I dream bigger

00:00:35,760 --> 00:00:39,790
my vision was that instead of just

00:00:38,559 --> 00:00:40,989
having a regular cage they could have

00:00:39,790 --> 00:00:43,329
something that was I know somewhere

00:00:40,989 --> 00:00:46,420
between like the Keebler Elf tree and

00:00:43,329 --> 00:00:47,739
the village from The Hobbit and then I

00:00:46,420 --> 00:00:49,629
thought like well guinea pig their

00:00:47,739 --> 00:00:51,159
social animals if I if I'm building a

00:00:49,629 --> 00:00:52,690
hobbit village and why stop at two

00:00:51,159 --> 00:00:54,760
career so I gotta have a whole colony of

00:00:52,690 --> 00:00:58,989
them you know I hit some roadblocks

00:00:54,760 --> 00:01:01,059
almost immediately three problems one as

00:00:58,989 --> 00:01:05,260
the name suggests i am quite allergic to

00:01:01,059 --> 00:01:07,630
them to a given i can barely clean off

00:01:05,260 --> 00:01:08,590
after two guinea pigs there's no way I'm

00:01:07,630 --> 00:01:12,159
going to keep up with like a whole

00:01:08,590 --> 00:01:14,409
village and three I am not particularly

00:01:12,159 --> 00:01:17,740
handy and I don't think that they sell

00:01:14,409 --> 00:01:19,659
this at IKEA um but you know I'm a

00:01:17,740 --> 00:01:21,610
programmer I'm a problem solver I might

00:01:19,659 --> 00:01:24,549
be a lazy slob but I can work with that

00:01:21,610 --> 00:01:25,960
so I at first I think well maybe I can

00:01:24,549 --> 00:01:27,369
just release a bunch of dung beetles

00:01:25,960 --> 00:01:29,920
into the village and they can I can just

00:01:27,369 --> 00:01:34,420
let nature take its course but then but

00:01:29,920 --> 00:01:35,920
then I think why would I build anything

00:01:34,420 --> 00:01:39,130
all I'm a programmer I could make a

00:01:35,920 --> 00:01:44,170
virtual guinea pig village that critters

00:01:39,130 --> 00:01:46,180
could live in cyberspace and then when I

00:01:44,170 --> 00:01:47,859
start thinking on this I think no oh no

00:01:46,180 --> 00:01:50,049
if this thing I could do this as an app

00:01:47,859 --> 00:01:51,880
I can do in app purchase it could be to

00:01:50,049 --> 00:01:54,729
take off i can start making that the Kim

00:01:51,880 --> 00:01:56,229
Kardashian bucks but but before I get to

00:01:54,729 --> 00:01:57,340
all that I'm not really I'm not here to

00:01:56,229 --> 00:01:59,079
talk about getting rich with free to

00:01:57,340 --> 00:02:04,990
play games i'm i am here to talk about

00:01:59,079 --> 00:02:06,399
my design process and now I the last

00:02:04,990 --> 00:02:08,679
couple of years I've seen an interesting

00:02:06,399 --> 00:02:10,690
progression I mean I used to be you know

00:02:08,679 --> 00:02:11,740
full stack but a lot of what I was doing

00:02:10,690 --> 00:02:14,110
in the full stack has moved to the front

00:02:11,740 --> 00:02:16,270
end but you know even though the work

00:02:14,110 --> 00:02:18,370
has shifted entirely client-side I'm

00:02:16,270 --> 00:02:20,650
still applying the same client server

00:02:18,370 --> 00:02:22,690
patterns within the client just at a

00:02:20,650 --> 00:02:24,250
smaller scale it's like yo dawg i herd

00:02:22,690 --> 00:02:26,530
you liek client-server architecture so I

00:02:24,250 --> 00:02:28,150
put yell you know as

00:02:26,530 --> 00:02:29,950
gone into the reacting co system I keep

00:02:28,150 --> 00:02:32,440
seeing things like this and parallels

00:02:29,950 --> 00:02:33,700
between the what we do on the client and

00:02:32,440 --> 00:02:36,459
what we used to do in the whole system

00:02:33,700 --> 00:02:39,069
and I'll encounter something new like

00:02:36,459 --> 00:02:40,209
frp or events or sing or sagas only to

00:02:39,069 --> 00:02:41,770
discover that they've been around for

00:02:40,209 --> 00:02:45,370
like 20 or 30 years in the back end

00:02:41,770 --> 00:02:47,530
world and this got me thinking about the

00:02:45,370 --> 00:02:49,660
the history of ideas and the way that

00:02:47,530 --> 00:02:52,720
the way that they spread and mutate on

00:02:49,660 --> 00:02:54,880
though the everything is a remix so as I

00:02:52,720 --> 00:02:56,830
walked through my design thinking on

00:02:54,880 --> 00:02:58,840
this virtual critter village and try and

00:02:56,830 --> 00:03:01,120
trace the history of these patterns and

00:02:58,840 --> 00:03:02,739
ideas my hopes are that if we can

00:03:01,120 --> 00:03:05,050
recognize the parallels between then and

00:03:02,739 --> 00:03:06,550
now I will be able to identify where

00:03:05,050 --> 00:03:09,220
things can go wrong without having to

00:03:06,550 --> 00:03:11,819
make those mistakes all over again so

00:03:09,220 --> 00:03:13,840
let's call this product critter ville

00:03:11,819 --> 00:03:15,250
hopefully I can think of a better name

00:03:13,840 --> 00:03:18,519
before I get a cease and desist from

00:03:15,250 --> 00:03:20,470
zynga now now in this this game or toy

00:03:18,519 --> 00:03:21,850
or whatever it is uh the the the goal is

00:03:20,470 --> 00:03:23,769
that you you you have a you build a

00:03:21,850 --> 00:03:25,720
village for guinea pigs with no fixtures

00:03:23,769 --> 00:03:27,400
like food dishes and houses and toys and

00:03:25,720 --> 00:03:28,900
stuff and your goal is to attract

00:03:27,400 --> 00:03:32,560
critters to the village and then keep

00:03:28,900 --> 00:03:34,450
them fed and healthy and happy now as

00:03:32,560 --> 00:03:35,410
far as how I'm modeling the critters you

00:03:34,450 --> 00:03:37,750
know guinea pigs are not particularly

00:03:35,410 --> 00:03:39,489
sophisticated animals they have uh you

00:03:37,750 --> 00:03:41,110
know and you know the way my modeling

00:03:39,489 --> 00:03:42,820
this with very simple behavioral

00:03:41,110 --> 00:03:44,799
feedback loops you for example when they

00:03:42,820 --> 00:03:49,959
cross a hunger threshold they'll try and

00:03:44,799 --> 00:03:54,910
eat food also they poop constantly which

00:03:49,959 --> 00:03:57,700
the user needs to clean up and happy and

00:03:54,910 --> 00:03:59,230
healthy happy and well-fed critters are

00:03:57,700 --> 00:04:00,730
friendly to you and each other but a

00:03:59,230 --> 00:04:02,320
jetÃ© tanned hungry critters get

00:04:00,730 --> 00:04:05,230
aggressive and eventually leave the

00:04:02,320 --> 00:04:07,030
village so I think I'm ready to start

00:04:05,230 --> 00:04:09,880
expecting this out so but where do I

00:04:07,030 --> 00:04:12,070
begin what kind of artifact do I want to

00:04:09,880 --> 00:04:13,709
use as my reference ah there's a couple

00:04:12,070 --> 00:04:17,289
of different design approaches I've seen

00:04:13,709 --> 00:04:20,079
now I to work a lot in agencies and

00:04:17,289 --> 00:04:22,690
design process it seemed to be I would

00:04:20,079 --> 00:04:24,610
get a mock-up and then be told to like

00:04:22,690 --> 00:04:26,200
work down the stack from there where I'm

00:04:24,610 --> 00:04:29,200
supposed to figure out how it works

00:04:26,200 --> 00:04:30,820
based on what it looks like now there's

00:04:29,200 --> 00:04:32,110
there's obvious problems with that but I

00:04:30,820 --> 00:04:33,910
think the opposite approach doesn't work

00:04:32,110 --> 00:04:35,409
either you know a lot of times when

00:04:33,910 --> 00:04:37,390
engineers are tasked with like

00:04:35,409 --> 00:04:39,550
cataloging requirements we think okay

00:04:37,390 --> 00:04:40,180
we'll make an erd and you know well it

00:04:39,550 --> 00:04:41,590
will have

00:04:40,180 --> 00:04:43,270
this giant database schema and we'll

00:04:41,590 --> 00:04:45,970
figure everything out beforehand then

00:04:43,270 --> 00:04:48,910
we'll build up the stack from there I

00:04:45,970 --> 00:04:50,560
get why people follow these approaches

00:04:48,910 --> 00:04:52,990
by say tended to major problems with

00:04:50,560 --> 00:04:55,389
them first is that they the commingled

00:04:52,990 --> 00:04:57,190
the ideas with the implementation I want

00:04:55,389 --> 00:04:59,020
to map out the problem of modeling a

00:04:57,190 --> 00:05:00,850
guinea pig village that that has nothing

00:04:59,020 --> 00:05:03,820
to do with page layout or whether I use

00:05:00,850 --> 00:05:07,240
like a var char instead of a text second

00:05:03,820 --> 00:05:10,180
both uhh both comps and databases Davis

00:05:07,240 --> 00:05:12,490
schemas they answer what it is but not

00:05:10,180 --> 00:05:14,979
so much what it does I you know in

00:05:12,490 --> 00:05:16,599
addition to like the facts i also want

00:05:14,979 --> 00:05:18,310
to identify things like what are the

00:05:16,599 --> 00:05:20,800
commands i can issue one of the

00:05:18,310 --> 00:05:23,199
questions i can ask in other words like

00:05:20,800 --> 00:05:26,620
what are the messages between me and the

00:05:23,199 --> 00:05:28,599
computer going to be so the design

00:05:26,620 --> 00:05:30,910
artifacts i'm going to start with the

00:05:28,599 --> 00:05:33,789
sort of like the core principle of this

00:05:30,910 --> 00:05:36,310
guinea pig system is a vocabulary of

00:05:33,789 --> 00:05:37,720
these facts and messages I don't think

00:05:36,310 --> 00:05:38,889
of these as technical terms they're not

00:05:37,720 --> 00:05:41,160
this is not again it's not

00:05:38,889 --> 00:05:43,330
implementation details this is all about

00:05:41,160 --> 00:05:46,090
this is all about the domain of the

00:05:43,330 --> 00:05:49,960
problem this is this is an idea i'm

00:05:46,090 --> 00:05:52,380
lifting probably incorrectly from eric

00:05:49,960 --> 00:05:55,630
Evans's ubiquity domain-driven designs

00:05:52,380 --> 00:05:58,570
ubiquitous language now this again this

00:05:55,630 --> 00:06:01,199
isn't this is similar to like a an API

00:05:58,570 --> 00:06:03,280
or a schema but those are more

00:06:01,199 --> 00:06:04,780
implementations of a vocabulary for the

00:06:03,280 --> 00:06:06,669
computer to work with I'm trying to

00:06:04,780 --> 00:06:08,590
think more an abstract level right now

00:06:06,669 --> 00:06:10,630
like like what terms am I gonna use in

00:06:08,590 --> 00:06:14,680
the documentation what words would I use

00:06:10,630 --> 00:06:16,150
on buttons and labels now make this a

00:06:14,680 --> 00:06:18,580
little less abstract let's think about

00:06:16,150 --> 00:06:21,370
what the doms vocabulary is I mean we've

00:06:18,580 --> 00:06:25,780
got we've got the HTML tags attributes

00:06:21,370 --> 00:06:28,150
and properties input types events uh you

00:06:25,780 --> 00:06:29,830
know but and also we have the the terms

00:06:28,150 --> 00:06:32,110
that we use for categorizing them you

00:06:29,830 --> 00:06:33,070
know tags attributes props inputs events

00:06:32,110 --> 00:06:34,720
those are those are all part of

00:06:33,070 --> 00:06:35,770
vocabulary as well I think this is

00:06:34,720 --> 00:06:38,080
actually the harder part of the

00:06:35,770 --> 00:06:40,539
vocabulary is defining the like that the

00:06:38,080 --> 00:06:42,220
taxonomy it's easy to identify like the

00:06:40,539 --> 00:06:43,599
concrete terms of the domain but it's

00:06:42,220 --> 00:06:45,159
it's tricky when you need to talk about

00:06:43,599 --> 00:06:48,490
things that are more abstract or more

00:06:45,159 --> 00:06:50,979
about categorization I mean if you need

00:06:48,490 --> 00:06:52,300
any example of this I mean how many

00:06:50,979 --> 00:06:53,449
people here know what the difference

00:06:52,300 --> 00:06:59,419
between an attribute in a pro

00:06:53,449 --> 00:07:01,460
is I see one hand I when I was working

00:06:59,419 --> 00:07:02,689
on this I I feel like I might know what

00:07:01,460 --> 00:07:04,430
it is I think it's one of those like

00:07:02,689 --> 00:07:06,379
instance versus class type things but

00:07:04,430 --> 00:07:08,990
I'm probably wrong and that's why I'm

00:07:06,379 --> 00:07:11,180
just lumping them together now another

00:07:08,990 --> 00:07:13,779
Chanin challenge of managing the growth

00:07:11,180 --> 00:07:16,849
of a vocabulary over time is uh you know

00:07:13,779 --> 00:07:19,129
how do you grow it how do you how do you

00:07:16,849 --> 00:07:22,249
grow it in a way that's organic but not

00:07:19,129 --> 00:07:23,900
haphazard this is another problem that a

00:07:22,249 --> 00:07:25,520
lot of people have with the Dom there's

00:07:23,900 --> 00:07:27,229
there some places with it works out

00:07:25,520 --> 00:07:29,449
really nice like I think it's nice that

00:07:27,229 --> 00:07:31,669
all the input types are you know the

00:07:29,449 --> 00:07:33,770
inputs are basically have they share

00:07:31,669 --> 00:07:36,229
very similar interfaces and then you

00:07:33,770 --> 00:07:38,210
know all the the fancier inputs will

00:07:36,229 --> 00:07:39,710
degrade into a simple text input but

00:07:38,210 --> 00:07:42,770
then we also have things like text areas

00:07:39,710 --> 00:07:45,050
and and selects which are you know sort

00:07:42,770 --> 00:07:47,029
of artifacts of you know the the

00:07:45,050 --> 00:07:48,199
thinking in 1991 where it's like oh well

00:07:47,029 --> 00:07:49,490
HTML is not gonna get any bigger than

00:07:48,199 --> 00:07:54,559
this we don't need to add sub

00:07:49,490 --> 00:07:55,639
categorizations and you know then they

00:07:54,559 --> 00:07:57,680
have their own totally different

00:07:55,639 --> 00:07:59,659
interfaces and then you it it adds

00:07:57,680 --> 00:08:01,279
complexity to have this or or another

00:07:59,659 --> 00:08:03,800
example would be the way that we have

00:08:01,279 --> 00:08:05,719
like three different systems for doing

00:08:03,800 --> 00:08:10,039
document outline we have like the h1

00:08:05,719 --> 00:08:13,729
through 86 we have like nested lists and

00:08:10,039 --> 00:08:17,330
then we also have the what's that like

00:08:13,729 --> 00:08:19,430
the nested sections and then sections

00:08:17,330 --> 00:08:20,539
and sections having sections are suppose

00:08:19,430 --> 00:08:23,899
to have their own document outline but

00:08:20,539 --> 00:08:25,339
note that was never implemented now in

00:08:23,899 --> 00:08:27,860
you encounter a lot of these

00:08:25,339 --> 00:08:30,229
vocabularies in in our day-to-day work I

00:08:27,860 --> 00:08:32,569
think as much as we think of programming

00:08:30,229 --> 00:08:34,459
in terms of like oh well it's its stem

00:08:32,569 --> 00:08:36,620
it's it's it's just it's a it's all just

00:08:34,459 --> 00:08:38,659
math and algorithms and stuff most most

00:08:36,620 --> 00:08:40,039
of the work that I do especially maybe

00:08:38,659 --> 00:08:44,480
as just as a front-end developer is

00:08:40,039 --> 00:08:46,279
thinking about like the the thing that

00:08:44,480 --> 00:08:48,589
this from a linguistic perspective and

00:08:46,279 --> 00:08:51,260
like you know maintaining and learning

00:08:48,589 --> 00:08:53,060
and creating vocabularies um you know

00:08:51,260 --> 00:08:54,920
that you know if every domain that we

00:08:53,060 --> 00:08:56,690
work in has its own terms and sometimes

00:08:54,920 --> 00:09:01,490
they sometimes terms have similar

00:08:56,690 --> 00:09:03,110
meanings but or as they 44 sometimes

00:09:01,490 --> 00:09:07,190
terms will have different words for the

00:09:03,110 --> 00:09:09,460
same meaning or domains that intersect

00:09:07,190 --> 00:09:11,690
like the dominate GP will have like

00:09:09,460 --> 00:09:14,840
intersect will have different terms for

00:09:11,690 --> 00:09:18,110
the same thing or you know weird meshing

00:09:14,840 --> 00:09:19,700
issues and you know at the risk of a

00:09:18,110 --> 00:09:21,770
circular definition though I think that

00:09:19,700 --> 00:09:23,810
what makes something understandable what

00:09:21,770 --> 00:09:25,880
would make something recognizable as a

00:09:23,810 --> 00:09:29,810
problem domain is that we can say that

00:09:25,880 --> 00:09:31,820
we have a vocabulary for it so before

00:09:29,810 --> 00:09:33,770
before I even get the implementation of

00:09:31,820 --> 00:09:35,240
critter ville I want to think about what

00:09:33,770 --> 00:09:37,580
the vocabulary for critical is going to

00:09:35,240 --> 00:09:39,500
look like so I've got my mind's the

00:09:37,580 --> 00:09:41,120
entities in critter bills if I'm gonna

00:09:39,500 --> 00:09:42,980
add another kind of creature like dung

00:09:41,120 --> 00:09:44,600
beetles for example that would go in

00:09:42,980 --> 00:09:45,560
this column but then I have to think

00:09:44,600 --> 00:09:46,940
about if I'm going to add a lot of

00:09:45,560 --> 00:09:48,020
creatures or a lot of different fixtures

00:09:46,940 --> 00:09:51,050
do I want to break that into

00:09:48,020 --> 00:09:53,210
subcategories I also have my verbs these

00:09:51,050 --> 00:09:54,470
are these are the actions that are going

00:09:53,210 --> 00:09:56,000
to be performed by the user or the

00:09:54,470 --> 00:09:57,890
critters I mean and I have these

00:09:56,000 --> 00:09:59,210
categorized by subject but you know

00:09:57,890 --> 00:10:01,160
maybe I'm going maybe if I have a

00:09:59,210 --> 00:10:02,930
different kind of thing that can you

00:10:01,160 --> 00:10:04,250
know have actions and I me I'll need to

00:10:02,930 --> 00:10:06,050
think about like do I want to add this

00:10:04,250 --> 00:10:10,130
to the this set or do I want to create

00:10:06,050 --> 00:10:11,420
another layer of taxonomy and then I've

00:10:10,130 --> 00:10:12,800
the the traits the you know the

00:10:11,420 --> 00:10:14,480
qualities that affect the state and

00:10:12,800 --> 00:10:16,460
behavior some of these are going to

00:10:14,480 --> 00:10:18,500
apply only to critters and like fear and

00:10:16,460 --> 00:10:19,910
hunger others like position those apply

00:10:18,500 --> 00:10:21,020
to you know everything your poop has a

00:10:19,910 --> 00:10:23,300
position even though it doesn't have a

00:10:21,020 --> 00:10:25,010
lot of other traits every poopit for the

00:10:23,300 --> 00:10:26,540
purposes of critter ville simulation and

00:10:25,010 --> 00:10:31,310
say every poop is the same that's not

00:10:26,540 --> 00:10:32,660
actually true don't don't at me now

00:10:31,310 --> 00:10:33,950
something you may have noticed is that a

00:10:32,660 --> 00:10:36,410
lot of the vocabulary been talking about

00:10:33,950 --> 00:10:39,380
is is it's related to the interfaces of

00:10:36,410 --> 00:10:40,310
the respective domains you know the

00:10:39,380 --> 00:10:42,530
these are all terms that I'm

00:10:40,310 --> 00:10:44,270
encountering as a user of HTTP or of the

00:10:42,530 --> 00:10:46,100
Dom not as someone who's building it I'm

00:10:44,270 --> 00:10:47,240
I'm sure that a well-organized

00:10:46,100 --> 00:10:49,340
vocabularies really useful for the

00:10:47,240 --> 00:10:52,490
implementers but it's absolutely crucial

00:10:49,340 --> 00:10:54,470
for the consumers and this is because if

00:10:52,490 --> 00:10:56,089
I'm working on the browser the only way

00:10:54,470 --> 00:10:57,980
to interact with the page is through the

00:10:56,089 --> 00:11:00,920
doms interface I can't write to the doms

00:10:57,980 --> 00:11:02,000
memory you know kangas gives you a

00:11:00,920 --> 00:11:03,650
little bit of that but Candice has it

00:11:02,000 --> 00:11:06,650
have it has its own interface it's just

00:11:03,650 --> 00:11:08,900
lower level you know in order to work

00:11:06,650 --> 00:11:11,210
with these interfaces I need to send and

00:11:08,900 --> 00:11:15,050
interpret messages that conform to their

00:11:11,210 --> 00:11:17,920
protocols now for example let's look at

00:11:15,050 --> 00:11:20,570
the HTTP the hypertext transfer protocol

00:11:17,920 --> 00:11:22,460
for transferring hypertext

00:11:20,570 --> 00:11:24,920
a typical HTTP interaction has the you

00:11:22,460 --> 00:11:27,560
know client sends a request server then

00:11:24,920 --> 00:11:30,110
sends a response back so a request I

00:11:27,560 --> 00:11:31,880
mean this is you know what do we have in

00:11:30,110 --> 00:11:35,660
here this it's just we have the method

00:11:31,880 --> 00:11:37,460
that would get the path version and a

00:11:35,660 --> 00:11:39,770
couple of other headers for metadata and

00:11:37,460 --> 00:11:43,550
then we've got the the response which is

00:11:39,770 --> 00:11:45,110
the unity htp version a status code more

00:11:43,550 --> 00:11:47,780
metadata and then the actual page that

00:11:45,110 --> 00:11:51,080
was requested another another kind of

00:11:47,780 --> 00:11:52,820
message is a again with the Dom we Dom

00:11:51,080 --> 00:11:54,470
events have a different purpose in a

00:11:52,820 --> 00:11:56,180
different context and HP requests

00:11:54,470 --> 00:11:58,130
because they're on the same computer and

00:11:56,180 --> 00:12:00,470
they did the data doesn't need be

00:11:58,130 --> 00:12:02,660
serialized into text but they share a

00:12:00,470 --> 00:12:05,270
fundamental rationale communicating

00:12:02,660 --> 00:12:06,950
between two isolated environments in

00:12:05,270 --> 00:12:10,280
this case the native browser UI in the

00:12:06,950 --> 00:12:12,770
JavaScript runtime in both cases there

00:12:10,280 --> 00:12:15,980
are security rationales behind this air

00:12:12,770 --> 00:12:18,530
gap in HP's case there's there's an

00:12:15,980 --> 00:12:20,270
initial goal of network efficiency but

00:12:18,530 --> 00:12:22,490
the goals of both these protocols are to

00:12:20,270 --> 00:12:24,320
enable communication between two parties

00:12:22,490 --> 00:12:26,330
without intimate knowledge of each

00:12:24,320 --> 00:12:29,510
other's innards they only need to speak

00:12:26,330 --> 00:12:32,180
the same language then JavaScript when

00:12:29,510 --> 00:12:33,380
we deal with these messages it's often

00:12:32,180 --> 00:12:35,270
in terms of like events and event

00:12:33,380 --> 00:12:37,370
handlers where we run a call back

00:12:35,270 --> 00:12:40,340
whenever a received message mapped as a

00:12:37,370 --> 00:12:42,050
particular pattern and now terminology

00:12:40,340 --> 00:12:44,180
note I'm sure there's a distinction be

00:12:42,050 --> 00:12:46,880
made between events and messages and

00:12:44,180 --> 00:12:48,920
actions and all that stuff but for for

00:12:46,880 --> 00:12:51,770
our purposes they are basically the same

00:12:48,920 --> 00:12:52,970
I think that this here the this jquery

00:12:51,770 --> 00:12:54,560
event listener is how a lot of people

00:12:52,970 --> 00:12:55,700
first encountered this I mean this is

00:12:54,560 --> 00:12:59,240
when when when I got into web

00:12:55,700 --> 00:13:01,580
development this was jquery was king as

00:12:59,240 --> 00:13:03,110
i would have used the the native Dom

00:13:01,580 --> 00:13:06,650
version but it's actually too long to

00:13:03,110 --> 00:13:09,020
fit on to a lot of blank vids legibly as

00:13:06,650 --> 00:13:11,330
this handler is for listen listen to DOM

00:13:09,020 --> 00:13:15,440
events of type click sent to that button

00:13:11,330 --> 00:13:17,990
and then a call show menu and we see the

00:13:15,440 --> 00:13:19,850
same pattern in so this is like Express

00:13:17,990 --> 00:13:23,420
a interesting thing here is this is

00:13:19,850 --> 00:13:28,910
matching on both the post HTTP method

00:13:23,420 --> 00:13:30,140
and the path users and ID then node uses

00:13:28,910 --> 00:13:32,390
the same patterns for signals and

00:13:30,140 --> 00:13:33,920
streams and I know if anyone saw the

00:13:32,390 --> 00:13:37,160
bb-8 talk

00:13:33,920 --> 00:13:39,139
person who gave it us in here if you saw

00:13:37,160 --> 00:13:40,579
the bb-8 talk the inter process

00:13:39,139 --> 00:13:43,579
communication works in very much the

00:13:40,579 --> 00:13:45,620
same way that's not the only way that we

00:13:43,579 --> 00:13:50,000
encounter events in JavaScript so like

00:13:45,620 --> 00:13:52,610
react and old-school HTML of course they

00:13:50,000 --> 00:13:56,060
have their in line handlers react also

00:13:52,610 --> 00:13:58,160
has its life cycle events it's because

00:13:56,060 --> 00:13:59,449
because they're met we there operate the

00:13:58,160 --> 00:14:01,639
operators methods we don't necessarily

00:13:59,449 --> 00:14:02,839
think of them as event handlers but they

00:14:01,639 --> 00:14:04,820
totally are in fact this is how events

00:14:02,839 --> 00:14:07,100
are handled in most you know typical

00:14:04,820 --> 00:14:09,709
object-oriented languages and then Redux

00:14:07,100 --> 00:14:11,769
is actions redux those are also you know

00:14:09,709 --> 00:14:15,170
another events or messages or whatever

00:14:11,769 --> 00:14:16,370
and it really doesn't offer you any sort

00:14:15,170 --> 00:14:18,529
of pattern matching that leaves it

00:14:16,370 --> 00:14:20,720
totally up to the developer so it just

00:14:18,529 --> 00:14:22,820
sends you it sends you every action to

00:14:20,720 --> 00:14:24,800
every reducer and then you know you're

00:14:22,820 --> 00:14:26,720
up to you know whatever right a giant

00:14:24,800 --> 00:14:29,449
switch statement to match on that

00:14:26,720 --> 00:14:31,070
pattern now the biggest advantage of

00:14:29,449 --> 00:14:35,120
message passing is concurrency many

00:14:31,070 --> 00:14:36,800
messages can be flight at once this is

00:14:35,120 --> 00:14:39,800
also one of its biggest challenges it's

00:14:36,800 --> 00:14:42,769
as you can see it's easy to get confused

00:14:39,800 --> 00:14:44,870
about you know what messages are in play

00:14:42,769 --> 00:14:46,160
and create race conditions because

00:14:44,870 --> 00:14:49,519
messages aren't being handled in the

00:14:46,160 --> 00:14:51,769
order you expected so when one of the

00:14:49,519 --> 00:14:53,660
big challenges in development today is

00:14:51,769 --> 00:14:54,949
how do we manage messages so that we can

00:14:53,660 --> 00:14:59,420
you know deal with them in an orderly

00:14:54,949 --> 00:15:00,560
fashion now another another problem you

00:14:59,420 --> 00:15:02,930
encounter with messages that they're not

00:15:00,560 --> 00:15:04,160
always meaningful in isolation this is

00:15:02,930 --> 00:15:05,540
something that we encounter all the time

00:15:04,160 --> 00:15:07,100
I think about what a pain in the asset

00:15:05,540 --> 00:15:10,010
is to make the flow of form validation

00:15:07,100 --> 00:15:11,510
feel right or like have you ever tried

00:15:10,010 --> 00:15:13,970
implementing double clicking from

00:15:11,510 --> 00:15:16,519
scratch it's a huge pain in the ass it's

00:15:13,970 --> 00:15:18,019
it's your messages might need to cancel

00:15:16,519 --> 00:15:19,640
each other out or happen in a certain

00:15:18,019 --> 00:15:21,079
sequence or within a particular time

00:15:19,640 --> 00:15:23,420
frame or trigger sequences of other

00:15:21,079 --> 00:15:25,130
events like the the force traveling

00:15:23,420 --> 00:15:28,310
through the balls of an executive desk

00:15:25,130 --> 00:15:32,959
toy if messages are the balls what are

00:15:28,310 --> 00:15:34,279
we go what do you call the force anyone

00:15:32,959 --> 00:15:35,839
sees everyone seen this ad on Twitter

00:15:34,279 --> 00:15:39,500
right this you have no idea how much

00:15:35,839 --> 00:15:41,660
anxiety this gives me anyways maybe an

00:15:39,500 --> 00:15:43,430
even more basic question is where where

00:15:41,660 --> 00:15:44,959
are the messages coming from and where

00:15:43,430 --> 00:15:46,710
are they going who messages the

00:15:44,959 --> 00:15:49,080
messengers

00:15:46,710 --> 00:15:50,760
now I mean I'm gonna call these I'm

00:15:49,080 --> 00:15:53,400
gonna just gonna say call them processes

00:15:50,760 --> 00:15:55,320
what is the process an entity that sends

00:15:53,400 --> 00:15:56,640
and receives messages from an outside

00:15:55,320 --> 00:15:58,650
perspective that's all it needs to it's

00:15:56,640 --> 00:16:00,390
it's totally black box you know

00:15:58,650 --> 00:16:03,360
processes purpose is to contain and

00:16:00,390 --> 00:16:05,010
confine computation so you can you can

00:16:03,360 --> 00:16:06,420
model a process something that like D

00:16:05,010 --> 00:16:07,620
bounces clicks into double clicks of the

00:16:06,420 --> 00:16:10,560
process you can also model a whole

00:16:07,620 --> 00:16:11,970
server as one now I name this with with

00:16:10,560 --> 00:16:13,770
UNIX processes in mind but it also

00:16:11,970 --> 00:16:17,280
describes you know web workers have the

00:16:13,770 --> 00:16:19,500
same interface like actors in Erlang

00:16:17,280 --> 00:16:20,700
even a lot of the code like that upholds

00:16:19,500 --> 00:16:23,550
these boundaries like a redux store

00:16:20,700 --> 00:16:25,650
retext or has has its interface of like

00:16:23,550 --> 00:16:31,350
it you know reads from dispatch and it

00:16:25,650 --> 00:16:32,310
writes to get state and you know of

00:16:31,350 --> 00:16:34,290
course a lot of languages that have

00:16:32,310 --> 00:16:35,700
their their term for an entity with

00:16:34,290 --> 00:16:38,160
private state that communicates through

00:16:35,700 --> 00:16:41,310
message passing is an object you know

00:16:38,160 --> 00:16:45,270
what else fits this model oh boy it's

00:16:41,310 --> 00:16:47,280
microservices so every time I give this

00:16:45,270 --> 00:16:51,300
talk I feel like I understand

00:16:47,280 --> 00:16:56,190
microservices less and less it appears

00:16:51,300 --> 00:16:58,380
to be you take a big box and you split

00:16:56,190 --> 00:17:03,240
into a bunch of little boxes in

00:16:58,380 --> 00:17:04,530
sometimes the boxes are hexagons and of

00:17:03,240 --> 00:17:06,390
course now microservers is a totally

00:17:04,530 --> 00:17:07,620
passÃ© I think the next time I give this

00:17:06,390 --> 00:17:09,089
talk at all I'm gonna have to change

00:17:07,620 --> 00:17:12,330
into like how is an ant farm like

00:17:09,089 --> 00:17:14,459
service service architecture but the

00:17:12,330 --> 00:17:16,050
technical reasoning behind microservices

00:17:14,459 --> 00:17:17,130
is that by splitting up a monolithic

00:17:16,050 --> 00:17:18,810
server into a bunch of little

00:17:17,130 --> 00:17:21,060
independent ones you have more

00:17:18,810 --> 00:17:23,490
flexibility for scaling in redundancy

00:17:21,060 --> 00:17:25,470
but but the stronger motivator behind

00:17:23,490 --> 00:17:27,630
this kind of architectural rewrite is to

00:17:25,470 --> 00:17:30,560
enable or I guess force team

00:17:27,630 --> 00:17:33,090
independence now why do we want

00:17:30,560 --> 00:17:35,460
independence is this is this like a

00:17:33,090 --> 00:17:37,020
libertarian thing I mean it's it's

00:17:35,460 --> 00:17:38,580
definitely a less familiar way of

00:17:37,020 --> 00:17:41,340
designing software and it's you know

00:17:38,580 --> 00:17:42,900
it's a lot more complex why are we going

00:17:41,340 --> 00:17:46,140
to the trouble of encasing every little

00:17:42,900 --> 00:17:48,600
thing in a suit of armor we do this

00:17:46,140 --> 00:17:50,940
because conceptual boundaries enable

00:17:48,600 --> 00:17:53,000
material boundaries fit no boundaries

00:17:50,940 --> 00:17:55,320
across time or boundaries across space

00:17:53,000 --> 00:17:57,600
an independent process can be made to

00:17:55,320 --> 00:18:00,510
run on separate cores or on separate

00:17:57,600 --> 00:18:03,120
continents but conceptual boundary

00:18:00,510 --> 00:18:05,160
also enable cultural boundaries you know

00:18:03,120 --> 00:18:06,780
what well-defined boundaries allow me to

00:18:05,160 --> 00:18:09,090
use your software without knowing

00:18:06,780 --> 00:18:10,890
anything about how it works that's the

00:18:09,090 --> 00:18:12,990
same whether we're on different teams

00:18:10,890 --> 00:18:14,820
within a company or if we're in like

00:18:12,990 --> 00:18:17,130
working on totally different projects if

00:18:14,820 --> 00:18:21,270
you're if I'm using your open-source

00:18:17,130 --> 00:18:23,130
work but there there is absolutely a

00:18:21,270 --> 00:18:26,100
trade off these boundaries have a cost

00:18:23,130 --> 00:18:28,170
especially we don't need them it's easy

00:18:26,100 --> 00:18:29,790
to look at what's happening now I think

00:18:28,170 --> 00:18:31,110
that we're seeing a steady trend from

00:18:29,790 --> 00:18:33,180
Spencer realized centralized to

00:18:31,110 --> 00:18:34,800
decentralize as mana lists are split

00:18:33,180 --> 00:18:37,170
into micro services but we're not it's

00:18:34,800 --> 00:18:39,300
we're just in a downward swing of the

00:18:37,170 --> 00:18:42,900
pendulum a a turn of the Hegelian

00:18:39,300 --> 00:18:44,340
dialectic the react world is on the same

00:18:42,900 --> 00:18:46,770
cycle but oddly enough it seems to be on

00:18:44,340 --> 00:18:48,390
the opposite phase so right now we're

00:18:46,770 --> 00:18:50,070
actually centralizing state management

00:18:48,390 --> 00:18:52,200
out of individual components into a

00:18:50,070 --> 00:18:53,790
single store now where we have the same

00:18:52,200 --> 00:18:54,900
trade-offs that apply you know

00:18:53,790 --> 00:18:57,120
simplicity of the whole versus

00:18:54,900 --> 00:18:59,040
simplicity parts or we you know our our

00:18:57,120 --> 00:19:01,710
culture is has just you know for the

00:18:59,040 --> 00:19:04,860
moment decided that like the one is more

00:19:01,710 --> 00:19:08,190
valuable than the other but maybe this

00:19:04,860 --> 00:19:09,750
means we can see the future we know that

00:19:08,190 --> 00:19:11,640
there's that there's this pendulous

00:19:09,750 --> 00:19:13,770
motion this we can look at something

00:19:11,640 --> 00:19:16,110
like elixirs Phoenix framework and how

00:19:13,770 --> 00:19:18,780
it employs you know it combines things

00:19:16,110 --> 00:19:20,340
it's a synthesis it you know it employs

00:19:18,780 --> 00:19:22,200
some of the conventions of like a rails

00:19:20,340 --> 00:19:23,820
monolith but in you know in a language

00:19:22,200 --> 00:19:25,230
that is built for a fine rings and

00:19:23,820 --> 00:19:27,630
currency and distribution it's it's

00:19:25,230 --> 00:19:29,070
neither as holistically or individually

00:19:27,630 --> 00:19:31,590
simple as either of the ideas that

00:19:29,070 --> 00:19:34,380
synthesizing but the compromise is an

00:19:31,590 --> 00:19:35,910
improvement over either extreme so what

00:19:34,380 --> 00:19:37,920
would this look like for a front-end app

00:19:35,910 --> 00:19:39,840
the big performance bottleneck in

00:19:37,920 --> 00:19:42,270
JavaScript of course is single threading

00:19:39,840 --> 00:19:43,980
but the big conceptual bottleneck is

00:19:42,270 --> 00:19:47,370
around managing you I data and

00:19:43,980 --> 00:19:49,170
networking in a single brain now a

00:19:47,370 --> 00:19:51,180
specter is haunting front-end

00:19:49,170 --> 00:19:54,990
development the specter of service

00:19:51,180 --> 00:19:58,320
workers I see a world where data and

00:19:54,990 --> 00:20:00,510
network management everything that is of

00:19:58,320 --> 00:20:02,070
interest or not everything is interest

00:20:00,510 --> 00:20:03,690
everything that is like data intensive

00:20:02,070 --> 00:20:04,980
and an app gets moved as a service

00:20:03,690 --> 00:20:07,110
worker that's a completely independent

00:20:04,980 --> 00:20:11,220
entity from the UI do you I can become

00:20:07,110 --> 00:20:12,840
you know go dumb again now when the

00:20:11,220 --> 00:20:14,279
advantages here is like once you force

00:20:12,840 --> 00:20:15,809
the separation of

00:20:14,279 --> 00:20:17,399
why and data into like totally different

00:20:15,809 --> 00:20:20,070
processes you can put them on different

00:20:17,399 --> 00:20:21,809
machines I mean maybe maybe this is the

00:20:20,070 --> 00:20:23,460
the step that we need to take another

00:20:21,809 --> 00:20:25,859
crack at like the meteor or the hoodie

00:20:23,460 --> 00:20:29,460
approach of having you know synchronized

00:20:25,859 --> 00:20:31,139
clients and servers and now I did

00:20:29,460 --> 00:20:32,429
something uh you know occurred to me as

00:20:31,139 --> 00:20:34,619
I was working on this if I have critters

00:20:32,429 --> 00:20:37,080
running over the network does that mean

00:20:34,619 --> 00:20:43,769
I'm making a massively multi-core online

00:20:37,080 --> 00:20:46,440
rodent petting game sorry oh wow that's

00:20:43,769 --> 00:20:47,729
a lot of stuff I feel like I just I i we

00:20:46,440 --> 00:20:49,529
just went through one of those like 15

00:20:47,729 --> 00:20:51,869
shorts about like oh gee whiz I didn't

00:20:49,529 --> 00:20:55,049
realize springs were so important except

00:20:51,869 --> 00:20:56,129
except about message passing but you

00:20:55,049 --> 00:20:57,479
know I think that JavaScript has been

00:20:56,129 --> 00:20:59,700
going through an interesting cultural

00:20:57,479 --> 00:21:02,039
shift in the last I know like three

00:20:59,700 --> 00:21:04,469
years or so now we've never had a PA

00:21:02,039 --> 00:21:06,419
strong culture around object-oriented

00:21:04,469 --> 00:21:07,979
programming and you just don't see talks

00:21:06,419 --> 00:21:11,070
about design patterns or solid

00:21:07,979 --> 00:21:13,080
principles at javascript conferences but

00:21:11,070 --> 00:21:15,059
we can begin more and more interested in

00:21:13,080 --> 00:21:17,549
functional programming you know first

00:21:15,059 --> 00:21:20,580
with underscore and then with underscore

00:21:17,549 --> 00:21:23,789
doing it wrong the things really really

00:21:20,580 --> 00:21:25,710
took off with react and now there's a

00:21:23,789 --> 00:21:27,239
bunch of JavaScript developers still a

00:21:25,710 --> 00:21:29,729
minority but a hell of a loud one

00:21:27,239 --> 00:21:32,159
getting interested in like immutability

00:21:29,729 --> 00:21:34,499
and referential transparency and monads

00:21:32,159 --> 00:21:36,359
and compiled the jas languages like

00:21:34,499 --> 00:21:37,950
closure script and elm there I'll bring

00:21:36,359 --> 00:21:39,570
this to the browser and granting us as

00:21:37,950 --> 00:21:41,969
humble JavaScript erza you know a

00:21:39,570 --> 00:21:45,239
glimpse into into this this this this

00:21:41,969 --> 00:21:48,450
future futuristic world but along with

00:21:45,239 --> 00:21:50,249
that comes dogma now of course there's

00:21:48,450 --> 00:21:52,589
the usual suspects with them I paradigm

00:21:50,249 --> 00:21:55,309
can beat up your paradigm I mean what

00:21:52,589 --> 00:21:57,450
can i say redditors gonna read it but

00:21:55,309 --> 00:21:59,369
we've also got seemingly respectable

00:21:57,450 --> 00:22:01,169
members of our community saying that you

00:21:59,369 --> 00:22:04,769
know if use classical inheritance your

00:22:01,169 --> 00:22:07,049
company will go out of business but

00:22:04,769 --> 00:22:09,359
javascript is it's fundamentally

00:22:07,049 --> 00:22:11,399
incompatible with ideological purity if

00:22:09,359 --> 00:22:12,960
you want to go fully full-on year 0

00:22:11,399 --> 00:22:15,269
there have never been more options to

00:22:12,960 --> 00:22:17,369
choose from but javascript isn't

00:22:15,269 --> 00:22:20,729
necessarily a big tent language that has

00:22:17,369 --> 00:22:22,889
to solve needs beyond our own hey

00:22:20,729 --> 00:22:24,119
javascript has to go continue to solve

00:22:22,889 --> 00:22:26,070
the needs of people going back to

00:22:24,119 --> 00:22:27,660
nineteen ninety-five you know so we

00:22:26,070 --> 00:22:29,970
don't break the web

00:22:27,660 --> 00:22:31,140
and as far as object oriented

00:22:29,970 --> 00:22:33,480
programming goes I think there's a lot

00:22:31,140 --> 00:22:36,270
of useful wisdom in the in the last 40

00:22:33,480 --> 00:22:39,800
years of study you know the the date on

00:22:36,270 --> 00:22:41,460
that last screenshot is October 12 1977

00:22:39,800 --> 00:22:43,770
we should think about how we can

00:22:41,460 --> 00:22:46,170
synthesize that with our newfound love

00:22:43,770 --> 00:22:48,390
of functional programming and this was

00:22:46,170 --> 00:22:51,120
my big awakening with react and redux

00:22:48,390 --> 00:22:52,470
you know sure component renders and

00:22:51,120 --> 00:22:54,660
store reduces those are pure functions

00:22:52,470 --> 00:22:56,610
no side effects no mutations but

00:22:54,660 --> 00:22:58,260
everything supporting them is the

00:22:56,610 --> 00:23:00,210
opposite you know the reactant react

00:22:58,260 --> 00:23:01,890
component state and lifecycle read X to

00:23:00,210 --> 00:23:04,110
subscribe to this crap dispatch these

00:23:01,890 --> 00:23:05,610
are all about side effects react and

00:23:04,110 --> 00:23:06,870
redox aren't a rejection of

00:23:05,610 --> 00:23:10,950
object-oriented programming so much as a

00:23:06,870 --> 00:23:12,720
reinvention of it instead of thing of

00:23:10,950 --> 00:23:14,970
about functional and object-oriented

00:23:12,720 --> 00:23:16,650
programming as competitors we can cinema

00:23:14,970 --> 00:23:19,050
is operating on maybe different parts of

00:23:16,650 --> 00:23:21,510
the problem or at different scales we

00:23:19,050 --> 00:23:23,280
can stop thinking about objects as smart

00:23:21,510 --> 00:23:25,650
data structures to start seeing them as

00:23:23,280 --> 00:23:28,080
systems for communing coordinating

00:23:25,650 --> 00:23:29,610
communication you know processes

00:23:28,080 --> 00:23:31,140
microservices actors workers

00:23:29,610 --> 00:23:32,780
bureaucracies guinea pigs a zombie with

00:23:31,140 --> 00:23:35,400
no conscience wait that's the last one

00:23:32,780 --> 00:23:38,070
what does it mean when we can see all of

00:23:35,400 --> 00:23:39,630
these through the same lens it means new

00:23:38,070 --> 00:23:41,750
avenues for understanding new

00:23:39,630 --> 00:23:43,590
possibilities for collaboration

00:23:41,750 --> 00:23:46,110
vocabulary of front-end development

00:23:43,590 --> 00:23:47,370
becomes so much richer or we can adapt

00:23:46,110 --> 00:23:49,230
patterns and terminology from

00:23:47,370 --> 00:23:51,240
distributed systems into client-side

00:23:49,230 --> 00:23:54,030
apps running cross web workers and the

00:23:51,240 --> 00:23:55,460
scales fall from our eyes we can finally

00:23:54,030 --> 00:23:57,870
see how the Internet of Things is just

00:23:55,460 --> 00:24:01,380
it's just object orientation made

00:23:57,870 --> 00:24:03,690
horrifyingly literal you know JavaScript

00:24:01,380 --> 00:24:05,340
defining characteristic whether for good

00:24:03,690 --> 00:24:08,250
or for ill is that it is always

00:24:05,340 --> 00:24:10,290
accumulating never removing but this is

00:24:08,250 --> 00:24:13,050
you know this is how society functions

00:24:10,290 --> 00:24:14,940
you can't roll back the clock hogatha

00:24:13,050 --> 00:24:17,190
you don't have to start from scratch you

00:24:14,940 --> 00:24:19,620
just keep moving forward and and just as

00:24:17,190 --> 00:24:21,090
event sourcing is where you know current

00:24:19,620 --> 00:24:24,420
state is a left fold of her previous

00:24:21,090 --> 00:24:28,590
behaviors society is a left fold over

00:24:24,420 --> 00:24:30,900
ideas and dogma is toxic to a society

00:24:28,590 --> 00:24:32,730
dogmas terrible is toxic to culture and

00:24:30,900 --> 00:24:34,620
we need to we we need to be thinking

00:24:32,730 --> 00:24:37,020
about we need to be seeking out new

00:24:34,620 --> 00:24:38,880
ideas but we also we need to be

00:24:37,020 --> 00:24:40,530
synthesizing and compromising those

00:24:38,880 --> 00:24:41,270
ideas into our primary knowledge and

00:24:40,530 --> 00:24:44,420
experience

00:24:41,270 --> 00:24:46,220
yo hey you never know when the new idea

00:24:44,420 --> 00:24:47,720
you've discovered is actually uncovers

00:24:46,220 --> 00:24:51,310
the hidden wisdom of everything before

00:24:47,720 --> 00:24:51,310

YouTube URL: https://www.youtube.com/watch?v=PoXDa8Mi4YU


