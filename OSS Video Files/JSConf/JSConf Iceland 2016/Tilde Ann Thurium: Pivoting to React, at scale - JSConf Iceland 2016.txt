Title: Tilde Ann Thurium: Pivoting to React, at scale - JSConf Iceland 2016
Publication date: 2016-09-20
Playlist: JSConf Iceland 2016
Description: 
	In 2013, Pinterest built an in-house modular component framework on top of Backbone / Django.

In 2016, we pivoted to using React. Here are some obstacles we overcame to make our app faster and easier to reason about.
Captions: 
	00:00:14,110 --> 00:00:24,489
hello I'm Tilda and i'm here today to

00:00:20,390 --> 00:00:27,460
talk about pivoting to react at scale

00:00:24,489 --> 00:00:29,840
some things i'll be covering are an

00:00:27,460 --> 00:00:33,130
overview of the architecture choices we

00:00:29,840 --> 00:00:36,890
made it Pinterest things that went well

00:00:33,130 --> 00:00:41,570
things that did not go so well and high

00:00:36,890 --> 00:00:44,150
level conclusions it is the way of the

00:00:41,570 --> 00:00:46,790
world of front-end that you are going to

00:00:44,150 --> 00:00:50,570
be pivoting your web framework every two

00:00:46,790 --> 00:00:53,150
to five years as Amy pointed out in her

00:00:50,570 --> 00:00:56,300
awesome talk yesterday the joy and the

00:00:53,150 --> 00:00:57,980
pain of javascript is that there are a

00:00:56,300 --> 00:01:01,720
lot of different ways to do the same

00:00:57,980 --> 00:01:04,220
thing and your conventions are in flux

00:01:01,720 --> 00:01:08,360
that leads us to have more paradigm

00:01:04,220 --> 00:01:11,240
shifts pivot more frequently when i

00:01:08,360 --> 00:01:13,310
first started at Pinterest in 2013 my

00:01:11,240 --> 00:01:16,759
very first project was finishing the

00:01:13,310 --> 00:01:20,899
pivot from a django app to a django app

00:01:16,759 --> 00:01:23,450
with backbone on top of it it was pretty

00:01:20,899 --> 00:01:25,549
painful because the last twenty percent

00:01:23,450 --> 00:01:28,609
of that rewrite took eighty percent of

00:01:25,549 --> 00:01:31,159
the time of the project so this time

00:01:28,609 --> 00:01:35,299
around we wanted to think a little

00:01:31,159 --> 00:01:37,490
better be a little smarter about it in

00:01:35,299 --> 00:01:40,700
order to know where we going we have to

00:01:37,490 --> 00:01:42,859
think about where we've been so I picked

00:01:40,700 --> 00:01:47,299
2013 because that was the last time we

00:01:42,859 --> 00:01:50,840
did a significant pivot in 2013 web

00:01:47,299 --> 00:01:52,959
development was very different jquery

00:01:50,840 --> 00:01:56,749
was the most common paradigm of the day

00:01:52,959 --> 00:02:00,469
we had a bunch of competing platform

00:01:56,749 --> 00:02:03,159
work such as amber angular react was

00:02:00,469 --> 00:02:06,310
just starting to enter the scene and

00:02:03,159 --> 00:02:13,340
cross-platform compatibility was

00:02:06,310 --> 00:02:16,730
definitely a headache so in 2013 we had

00:02:13,340 --> 00:02:20,480
an app that was built on top of backbone

00:02:16,730 --> 00:02:22,580
and Django architecture kind of looked

00:02:20,480 --> 00:02:23,090
like this was built on top of Jango's

00:02:22,580 --> 00:02:25,610
middle

00:02:23,090 --> 00:02:29,269
which is not I don't think Django strong

00:02:25,610 --> 00:02:32,780
suit but would have we had a Python

00:02:29,269 --> 00:02:35,810
router we had Python resources which are

00:02:32,780 --> 00:02:38,860
like a wrapper around the API and we had

00:02:35,810 --> 00:02:41,569
modules modules are little reusable

00:02:38,860 --> 00:02:45,560
composable bits of HTML CSS and

00:02:41,569 --> 00:02:48,049
JavaScript so they compose our whole

00:02:45,560 --> 00:02:50,030
entire tree how many of you have worked

00:02:48,049 --> 00:02:51,530
on kind of like a Frankenstein app like

00:02:50,030 --> 00:02:55,190
this where do you had like different

00:02:51,530 --> 00:02:57,019
pieces of things glued together yeah you

00:02:55,190 --> 00:03:01,130
know what I'm talking about kind of

00:02:57,019 --> 00:03:04,549
sucks huh I mean it was okay for what it

00:03:01,130 --> 00:03:07,610
was but there are problems even on a

00:03:04,549 --> 00:03:10,220
fast connection on a fast machine like

00:03:07,610 --> 00:03:13,370
scrolling the Pinterest grid was kind of

00:03:10,220 --> 00:03:15,260
janky we got called out for having some

00:03:13,370 --> 00:03:18,650
of the most bloated CSS of any big

00:03:15,260 --> 00:03:21,379
website and we had to maintain to

00:03:18,650 --> 00:03:23,810
rendering code paths we were server-side

00:03:21,379 --> 00:03:26,840
rendering in Python which you have to

00:03:23,810 --> 00:03:29,139
server-side renderer SEO and we're

00:03:26,840 --> 00:03:33,850
client side rendering in JavaScript

00:03:29,139 --> 00:03:37,250
maintaining those two was not fun so

00:03:33,850 --> 00:03:38,870
2016 rolls around and react is

00:03:37,250 --> 00:03:41,000
definitely kind of the winning the

00:03:38,870 --> 00:03:45,019
framework more at least for right now

00:03:41,000 --> 00:03:47,329
and it's pretty easy to see why if you

00:03:45,019 --> 00:03:50,000
take functional programming concepts and

00:03:47,329 --> 00:03:52,549
apply them to front end it eliminates a

00:03:50,000 --> 00:03:54,769
whole class of bugs that you see if

00:03:52,549 --> 00:03:57,349
you're like making assumptions about the

00:03:54,769 --> 00:04:02,329
state of your Dom and writing a period

00:03:57,349 --> 00:04:06,739
of code plus it's extremely fast so it

00:04:02,329 --> 00:04:08,959
was a pretty logical choice react isn't

00:04:06,739 --> 00:04:11,750
the only thing that's changed though we

00:04:08,959 --> 00:04:15,349
have es6 giving us the spread operator

00:04:11,750 --> 00:04:17,840
arrow functions and classes all that

00:04:15,349 --> 00:04:20,989
sweet sweet syntactic sugar to make

00:04:17,840 --> 00:04:23,139
JavaScript more of a joy to write we

00:04:20,989 --> 00:04:26,180
have better support and tooling for node

00:04:23,139 --> 00:04:29,660
and we have Babel and web pack so we can

00:04:26,180 --> 00:04:31,219
just transpile all the things and not

00:04:29,660 --> 00:04:35,750
worry so hard about supporting different

00:04:31,219 --> 00:04:36,980
browsers so right now this is kind of

00:04:35,750 --> 00:04:40,550
what the Pinterest architecture

00:04:36,980 --> 00:04:43,580
looks like we've got a node process

00:04:40,550 --> 00:04:46,810
talking to the Python API and we have

00:04:43,580 --> 00:04:50,390
both denzel modules and react components

00:04:46,810 --> 00:04:53,830
why both well once you get to pinterest

00:04:50,390 --> 00:04:56,870
scale pivoting your app takes a while

00:04:53,830 --> 00:05:01,460
but what do I even mean by at scale it

00:04:56,870 --> 00:05:03,740
is such an overloaded term the context

00:05:01,460 --> 00:05:06,110
that I'm setting here is at scale means

00:05:03,740 --> 00:05:10,040
source lines of code and numbers of

00:05:06,110 --> 00:05:12,500
developers I was really surprised to

00:05:10,040 --> 00:05:14,660
find out that we have almost 500 k lines

00:05:12,500 --> 00:05:17,090
of code in our web app alone and that's

00:05:14,660 --> 00:05:22,400
not including node modules or blank line

00:05:17,090 --> 00:05:23,990
I also I discovered that we have a

00:05:22,400 --> 00:05:26,300
hundred and sixty for web developers

00:05:23,990 --> 00:05:28,010
based on the highly scientific method of

00:05:26,300 --> 00:05:31,880
seeing how many people are hanging out

00:05:28,010 --> 00:05:34,460
in the web rooms of slack so given that

00:05:31,880 --> 00:05:37,250
we're even bigger now than we were last

00:05:34,460 --> 00:05:41,750
time we pivoted how could we go about

00:05:37,250 --> 00:05:44,990
this in a smart way what in doubt just

00:05:41,750 --> 00:05:47,330
you know go back to the the basics the

00:05:44,990 --> 00:05:50,690
building blocks of computer science data

00:05:47,330 --> 00:05:52,310
structures and algorithms so what kind

00:05:50,690 --> 00:05:58,190
of data structure is a web application

00:05:52,310 --> 00:05:59,870
most like well it's a tree what kind of

00:05:58,190 --> 00:06:04,280
algorithms do we have for changing

00:05:59,870 --> 00:06:07,010
things in trees you could either start

00:06:04,280 --> 00:06:11,080
at the root and walk down or you can

00:06:07,010 --> 00:06:13,580
start at the bottom and walk up we chose

00:06:11,080 --> 00:06:16,910
starting at the bottom and walking up in

00:06:13,580 --> 00:06:19,820
order to have a forcing function to make

00:06:16,910 --> 00:06:21,950
everyone convert things over as if we

00:06:19,820 --> 00:06:24,860
allowed people to just kind of start in

00:06:21,950 --> 00:06:26,690
the middle and render denzel modules

00:06:24,860 --> 00:06:28,430
from inside of react if they could start

00:06:26,690 --> 00:06:31,130
anywhere in the tree they would not be

00:06:28,430 --> 00:06:33,260
motivated to port everything over they'd

00:06:31,130 --> 00:06:35,360
rewrite the cool fun sexy things that

00:06:33,260 --> 00:06:37,370
give you a boost and then ignore all the

00:06:35,360 --> 00:06:41,990
other cruft and we be maintaining two

00:06:37,370 --> 00:06:45,050
worlds forever we didn't want that those

00:06:41,990 --> 00:06:46,700
kind of a high level what we did now I'm

00:06:45,050 --> 00:06:50,080
going to dive down a little bit into the

00:06:46,700 --> 00:06:50,080
Nitty Gritty of things that went well

00:06:50,470 --> 00:06:55,129
so what do you get to pinterest sighs

00:06:52,460 --> 00:06:57,280
you had a bunch of teams like let's say

00:06:55,129 --> 00:06:59,810
we have about ten teams writing web code

00:06:57,280 --> 00:07:04,039
all those teams have different metrics

00:06:59,810 --> 00:07:05,240
that they care about every team we had

00:07:04,039 --> 00:07:06,650
them wrapped their features and

00:07:05,240 --> 00:07:09,139
individual experiments so we could

00:07:06,650 --> 00:07:10,759
measure the gains we've got which is

00:07:09,139 --> 00:07:12,770
really motivating both for individual

00:07:10,759 --> 00:07:14,900
developers and for management to

00:07:12,770 --> 00:07:17,659
continue to understand why react should

00:07:14,900 --> 00:07:20,539
be a priority we got some really sweet

00:07:17,659 --> 00:07:22,759
gains let's talk conversion numbers does

00:07:20,539 --> 00:07:24,620
anybody want to take a guess on the

00:07:22,759 --> 00:07:26,330
percentage improvement we got in

00:07:24,620 --> 00:07:31,009
conversion rates from switching our pin

00:07:26,330 --> 00:07:37,250
page to react oh come on i don't have

00:07:31,009 --> 00:07:41,870
candy anyone have a guess thanks Ted no

00:07:37,250 --> 00:07:44,719
not quite but ten percent that's pretty

00:07:41,870 --> 00:07:51,440
good and five point six percent on

00:07:44,719 --> 00:07:54,409
interest pages we also recently ported

00:07:51,440 --> 00:07:58,520
the profile page over it dropped average

00:07:54,409 --> 00:08:00,979
time to first interaction by 22% the ten

00:07:58,520 --> 00:08:03,349
percent increase in pageviews was for

00:08:00,979 --> 00:08:05,659
profile pages then there are also other

00:08:03,349 --> 00:08:10,219
downstream effects like which makes

00:08:05,659 --> 00:08:11,990
sense because people look at the profile

00:08:10,219 --> 00:08:13,250
page it loads pretty fast and they're

00:08:11,990 --> 00:08:16,819
like sweetie I'm going to click on some

00:08:13,250 --> 00:08:18,650
other stuff we got a seven percent

00:08:16,819 --> 00:08:20,620
increase in international sessions and a

00:08:18,650 --> 00:08:23,090
one percent increase in overall sessions

00:08:20,620 --> 00:08:25,190
the bigger increase internationally

00:08:23,090 --> 00:08:27,889
makes a ton of sense because those users

00:08:25,190 --> 00:08:32,779
were undoubtedly hurting the most from

00:08:27,889 --> 00:08:36,199
our crappy latency before another thing

00:08:32,779 --> 00:08:39,979
we did is we shimmed backbone before we

00:08:36,199 --> 00:08:41,899
even started porting to react we took

00:08:39,979 --> 00:08:43,969
backbone and made it so that we had

00:08:41,899 --> 00:08:47,149
eighty percent of the functionality but

00:08:43,969 --> 00:08:49,510
it didn't have the dependencies that it

00:08:47,149 --> 00:08:52,670
had before that were quite bloated like

00:08:49,510 --> 00:08:54,350
jQuery and underscore this allowed us to

00:08:52,670 --> 00:08:58,870
significantly reduce the size of our

00:08:54,350 --> 00:08:58,870
bundle and still be able to run Denzel

00:08:59,050 --> 00:09:03,780
we also updated Denzel to use

00:09:01,579 --> 00:09:06,100
declarative states

00:09:03,780 --> 00:09:08,140
imperative to declarative is a pretty

00:09:06,100 --> 00:09:11,560
big mental shift that we're asking

00:09:08,140 --> 00:09:14,650
developers to make and react is a big

00:09:11,560 --> 00:09:17,020
change too so by decoupling those

00:09:14,650 --> 00:09:19,870
changes and giving people a sequence to

00:09:17,020 --> 00:09:24,610
learn things in it's a little less of a

00:09:19,870 --> 00:09:27,100
cognitive load so this is a mistake that

00:09:24,610 --> 00:09:30,250
we made in Denzel that we did not make

00:09:27,100 --> 00:09:31,840
and react your designers are going to

00:09:30,250 --> 00:09:34,120
want to pivot how the website looks

00:09:31,840 --> 00:09:36,070
every two years too because that's just

00:09:34,120 --> 00:09:39,130
the world that they're in their trends

00:09:36,070 --> 00:09:41,650
and visual design as well and it is so

00:09:39,130 --> 00:09:43,570
tempting to be like well if we have to

00:09:41,650 --> 00:09:45,370
rewrite everything anyway we might as

00:09:43,570 --> 00:09:49,630
well just you know change how it looks

00:09:45,370 --> 00:09:51,880
but don't do it the reason why is

00:09:49,630 --> 00:09:54,190
because with Denzel we had all these

00:09:51,880 --> 00:09:57,640
metrics drops that were super hard to

00:09:54,190 --> 00:09:59,080
debug it was like our users interacting

00:09:57,640 --> 00:10:02,470
with this page differently because it

00:09:59,080 --> 00:10:05,980
looks different or is there actually a

00:10:02,470 --> 00:10:08,380
bug in here somewhere we made the same

00:10:05,980 --> 00:10:10,150
mistake with our iOS rewrite recently I

00:10:08,380 --> 00:10:13,600
don't know what we were thinking but

00:10:10,150 --> 00:10:21,580
with react we said no and it was much

00:10:13,600 --> 00:10:23,140
smoother so when you have 164 people how

00:10:21,580 --> 00:10:25,930
do you make sure that everybody stays on

00:10:23,140 --> 00:10:28,630
the same page people have different

00:10:25,930 --> 00:10:30,490
learning styles some people are visual

00:10:28,630 --> 00:10:34,630
learners some people are verbal learners

00:10:30,490 --> 00:10:36,730
so we have to cater to everybody for

00:10:34,630 --> 00:10:38,620
people who prefer email there is an

00:10:36,730 --> 00:10:40,540
email list web platform announced and

00:10:38,620 --> 00:10:41,950
then we had a slack bot that you could

00:10:40,540 --> 00:10:45,700
invite into your channel and get those

00:10:41,950 --> 00:10:47,650
same updates if that's how you roll for

00:10:45,700 --> 00:10:49,690
people that prefer in person there was

00:10:47,650 --> 00:10:51,040
regular office hours that anyone could

00:10:49,690 --> 00:10:54,280
come and ask questions sewer get

00:10:51,040 --> 00:10:56,200
debugging help and we had a wiki page as

00:10:54,280 --> 00:10:57,880
well which is really important

00:10:56,200 --> 00:10:59,590
especially for women or other

00:10:57,880 --> 00:11:01,690
underrepresented minorities or people

00:10:59,590 --> 00:11:08,790
who statistically speaking are going to

00:11:01,690 --> 00:11:08,790
be less comfortable asking questions so

00:11:09,279 --> 00:11:13,329
it's one thing to put the information

00:11:11,199 --> 00:11:16,209
out there and tell people what kind of

00:11:13,329 --> 00:11:17,949
things you expect to them but how do you

00:11:16,209 --> 00:11:20,920
actually make sure that they're writing

00:11:17,949 --> 00:11:25,749
code that meets your conventions Lynch

00:11:20,920 --> 00:11:29,079
all the things react is particularly

00:11:25,749 --> 00:11:31,379
suited to linting because the output of

00:11:29,079 --> 00:11:35,470
jsx is an object that you can easily

00:11:31,379 --> 00:11:37,149
inspect and be like oh hey this image

00:11:35,470 --> 00:11:41,470
doesn't have an alt tag and that's

00:11:37,149 --> 00:11:47,459
really important for accessibility we

00:11:41,470 --> 00:11:50,529
open sourced our linter configuration

00:11:47,459 --> 00:11:55,420
and I would also encourage you to check

00:11:50,529 --> 00:11:58,089
out this es Lin jsx accessibility plugin

00:11:55,420 --> 00:12:01,300
if you care about accessibility and you

00:11:58,089 --> 00:12:03,910
should okay so that was what went well

00:12:01,300 --> 00:12:08,110
here things that I might do differently

00:12:03,910 --> 00:12:10,240
next time around I don't know about you

00:12:08,110 --> 00:12:16,089
but learning a new framework is

00:12:10,240 --> 00:12:18,399
sometimes hard scary especially with

00:12:16,089 --> 00:12:21,750
react there's like not just react itself

00:12:18,399 --> 00:12:25,389
but all this other stuff around it I

00:12:21,750 --> 00:12:29,709
dived in and I was trying to learn EO 6

00:12:25,389 --> 00:12:34,449
+ j sx and react and an p.m. and i was

00:12:29,709 --> 00:12:36,309
like I don't know what I'm doing if I

00:12:34,449 --> 00:12:38,920
had to do this again I would put a

00:12:36,309 --> 00:12:40,779
suggested order of learning operations

00:12:38,920 --> 00:12:43,269
on the wiki so that people who are

00:12:40,779 --> 00:12:45,309
junior or more just new to web or

00:12:43,269 --> 00:12:49,120
whatever have a way to sequence their

00:12:45,309 --> 00:12:51,639
learning and not get overwhelmed I agree

00:12:49,120 --> 00:12:54,129
with Pete hunt that this is a pretty

00:12:51,639 --> 00:12:56,110
good learning order and you might not

00:12:54,129 --> 00:13:02,949
even need all this stuff depending on

00:12:56,110 --> 00:13:04,959
the size and complexity of your app so

00:13:02,949 --> 00:13:07,509
as I mentioned before we force people to

00:13:04,959 --> 00:13:08,620
convert from the leaf nodes up in order

00:13:07,509 --> 00:13:11,589
to make sure that they would port

00:13:08,620 --> 00:13:13,749
everything over but there is a use case

00:13:11,589 --> 00:13:15,129
we missed that was kind of a duh which

00:13:13,749 --> 00:13:17,470
is like people were going to want to add

00:13:15,129 --> 00:13:21,730
entirely new page types that didn't

00:13:17,470 --> 00:13:22,780
exist inside Denzel we were able to get

00:13:21,730 --> 00:13:25,300
it working

00:13:22,780 --> 00:13:27,550
it was a little bit hacky and it would

00:13:25,300 --> 00:13:33,430
have been better to invest some time in

00:13:27,550 --> 00:13:35,680
thinking about that up front we also

00:13:33,430 --> 00:13:38,290
kept the HTML structure of the pages

00:13:35,680 --> 00:13:40,000
exactly the same disallowed our

00:13:38,290 --> 00:13:43,570
measurements to be a true

00:13:40,000 --> 00:13:44,920
apples-to-apples comparison however it

00:13:43,570 --> 00:13:47,350
also meant that we had to write more

00:13:44,920 --> 00:13:52,240
code to keep up with shitty practices

00:13:47,350 --> 00:13:54,400
from the old system we didn't have a

00:13:52,240 --> 00:13:58,960
great plan for data flow out of the box

00:13:54,400 --> 00:14:00,640
we were like just you set state but when

00:13:58,960 --> 00:14:03,670
you have an appt with a deeply nested

00:14:00,640 --> 00:14:05,320
component structure then you fed to data

00:14:03,670 --> 00:14:09,550
and you're passing it down from child to

00:14:05,320 --> 00:14:11,620
child the child these days we have we're

00:14:09,550 --> 00:14:15,040
using redux and we have a higher order

00:14:11,620 --> 00:14:17,170
component that fetches data so it's much

00:14:15,040 --> 00:14:22,510
easier and we should have set that up

00:14:17,170 --> 00:14:26,080
straight out of the box a mistake that

00:14:22,510 --> 00:14:29,440
denzel made was coupling data fetching

00:14:26,080 --> 00:14:31,930
and rendering in the same function the

00:14:29,440 --> 00:14:34,120
reason why that's a no-no is because it

00:14:31,930 --> 00:14:36,340
allows developers just kind of gloss

00:14:34,120 --> 00:14:39,760
over performance problems by pretending

00:14:36,340 --> 00:14:41,800
there isn't a loading state well there

00:14:39,760 --> 00:14:44,980
is a loading state and you need to deal

00:14:41,800 --> 00:14:46,330
with it when you're writing react

00:14:44,980 --> 00:14:47,980
components you need to think about what

00:14:46,330 --> 00:14:51,430
your components going to look like when

00:14:47,980 --> 00:14:53,500
there's no data the reason that this

00:14:51,430 --> 00:14:55,210
impacted our rewrite or made it harder

00:14:53,500 --> 00:14:57,010
was because of people are porting over

00:14:55,210 --> 00:14:59,080
there Denzel components they had to

00:14:57,010 --> 00:15:02,880
think about things like loading state

00:14:59,080 --> 00:15:02,880
that they hadn't previously considered

00:15:04,020 --> 00:15:10,210
we did not set up our testing frameworks

00:15:06,850 --> 00:15:12,870
soon enough and consequently our unit

00:15:10,210 --> 00:15:15,640
test coverage has suffered a little bit

00:15:12,870 --> 00:15:17,320
once developers of ship things and the

00:15:15,640 --> 00:15:18,910
code is in the wild you are not going to

00:15:17,320 --> 00:15:22,120
get people to go back and write unit

00:15:18,910 --> 00:15:24,780
tests it is not going to happen if i

00:15:22,120 --> 00:15:27,580
want to known how easy it is to use

00:15:24,780 --> 00:15:31,360
enzyme and just this would have gotten

00:15:27,580 --> 00:15:33,460
set up a lot sooner in fact i'd even go

00:15:31,360 --> 00:15:37,200
so far as to say the true value of react

00:15:33,460 --> 00:15:39,820
is testability not speed

00:15:37,200 --> 00:15:41,980
there are tools down so that you can

00:15:39,820 --> 00:15:44,980
render a string to a dom node and

00:15:41,980 --> 00:15:50,800
different and it's still fast but not

00:15:44,980 --> 00:15:54,580
nearly as testable finally we didn't

00:15:50,800 --> 00:15:56,650
have a good CSS strategy that was semi

00:15:54,580 --> 00:15:58,690
intentional because we were already

00:15:56,650 --> 00:16:00,400
changing so much stuff we didn't want to

00:15:58,690 --> 00:16:03,340
change everything all at once in

00:16:00,400 --> 00:16:05,020
overwhelmed people but the thing about

00:16:03,340 --> 00:16:07,240
writing react is that it makes it

00:16:05,020 --> 00:16:09,460
immediately obvious like global CSS is a

00:16:07,240 --> 00:16:13,090
bad idea in the same way the global

00:16:09,460 --> 00:16:14,530
variables are a bad idea because we

00:16:13,090 --> 00:16:17,170
didn't provide teams with clear

00:16:14,530 --> 00:16:19,900
guidelines on what to do it was kind of

00:16:17,170 --> 00:16:23,890
like the wild wild west some people were

00:16:19,900 --> 00:16:26,980
using bens style some people are using

00:16:23,890 --> 00:16:28,540
inline styles we're in the process of

00:16:26,980 --> 00:16:31,180
cleaning that up and moving to CSS

00:16:28,540 --> 00:16:35,760
modules and it's going to be great but

00:16:31,180 --> 00:16:40,150
we're not there yet so at a high level

00:16:35,760 --> 00:16:42,040
what did what did we learn from this the

00:16:40,150 --> 00:16:44,890
more you can irritably update the

00:16:42,040 --> 00:16:47,560
semantics of your old system to match

00:16:44,890 --> 00:16:49,990
the new system the easier your rewrite

00:16:47,560 --> 00:16:53,110
is going to be now we did a little bit

00:16:49,990 --> 00:16:54,820
of this with backbone light and with

00:16:53,110 --> 00:16:56,500
updating denzel to use declarative

00:16:54,820 --> 00:16:59,710
states but we could have gone way

00:16:56,500 --> 00:17:01,360
further with it for example we could

00:16:59,710 --> 00:17:03,010
have updated backbones life cycle

00:17:01,360 --> 00:17:08,350
methods to match reacts component

00:17:03,010 --> 00:17:14,890
lifecycle methods so how is code like

00:17:08,350 --> 00:17:18,280
DNA did you know that the kind of

00:17:14,890 --> 00:17:20,339
nutrition that your grandmother got when

00:17:18,280 --> 00:17:23,020
she was pregnant with your mother

00:17:20,339 --> 00:17:27,040
impacts your birth weight and your

00:17:23,020 --> 00:17:29,500
health throughout your life this is not

00:17:27,040 --> 00:17:33,370
it's not even because of DNA it's

00:17:29,500 --> 00:17:36,040
because of epigenetic markers so in the

00:17:33,370 --> 00:17:39,010
same way the code you write it and then

00:17:36,040 --> 00:17:41,860
you run it DNA is written we'll just

00:17:39,010 --> 00:17:45,030
call it written and then it's run your

00:17:41,860 --> 00:17:47,770
body runs it and turns it into you

00:17:45,030 --> 00:17:50,200
epigenetic markers are like meta code

00:17:47,770 --> 00:17:52,269
that tell your body

00:17:50,200 --> 00:17:56,889
to run your DNA or how to how your genes

00:17:52,269 --> 00:17:59,409
should be expressed like a rewrite

00:17:56,889 --> 00:18:01,539
they're passed down from generation to

00:17:59,409 --> 00:18:03,940
generation so it's epigenetic markers

00:18:01,539 --> 00:18:07,480
that deal with the fetal nutrition stuff

00:18:03,940 --> 00:18:10,269
that I just mentioned your rewrite the

00:18:07,480 --> 00:18:13,120
choices you make now impact not only

00:18:10,269 --> 00:18:16,889
this rewrite or not only the next

00:18:13,120 --> 00:18:16,889
rewrite but the following one after that

00:18:17,039 --> 00:18:22,889
fundamentally engineering is about

00:18:20,440 --> 00:18:26,740
making trade-offs so when you go

00:18:22,889 --> 00:18:32,490
pivoting your app choose your own

00:18:26,740 --> 00:18:32,490

YouTube URL: https://www.youtube.com/watch?v=t0s97w0GuF4


