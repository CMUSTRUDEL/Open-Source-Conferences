Title: David Blurton: Full-stack JavaScript development with Docker - JSConf Iceland 2016
Publication date: 2016-09-20
Playlist: JSConf Iceland 2016
Description: 
	Docker is great for wrapping up your application with its environment, but until recently it’s not been a great experience for development. The new release of docker for mac and windows changes all that.

I’ll show you how to take an existing application and get it running in a docker container, including live-reload. We’ll use docker-compose to link the rest of the application together, and set up a .dev domain for the full web experience.
Captions: 
	00:00:12,860 --> 00:00:19,880
thank you very much yeah my name is

00:00:15,840 --> 00:00:22,890
David Flynn I am from the United Kingdom

00:00:19,880 --> 00:00:26,550
and I moved to Iceland one and a half

00:00:22,890 --> 00:00:29,570
years ago to live here and as a typical

00:00:26,550 --> 00:00:31,800
developer the first thing I did was

00:00:29,570 --> 00:00:33,690
thought right I'm gonna have to try to

00:00:31,800 --> 00:00:37,170
learn Icelandic how am I gonna do this

00:00:33,690 --> 00:00:38,489
should I a spend lots of time studying

00:00:37,170 --> 00:00:40,950
with books in a normal way that you

00:00:38,489 --> 00:00:43,109
learn things well should I instead build

00:00:40,950 --> 00:00:45,090
a website spend hundreds of hours on

00:00:43,109 --> 00:00:46,199
that avoiding the problem and try and

00:00:45,090 --> 00:00:48,690
build a website to help people learn

00:00:46,199 --> 00:00:50,789
Icelandic so obviously I chose option B

00:00:48,690 --> 00:00:52,469
so I'm going to talk to you about a

00:00:50,789 --> 00:00:55,410
project that I've been working on in my

00:00:52,469 --> 00:00:58,140
free time to do with helping people

00:00:55,410 --> 00:00:59,399
learn Icelandic but really this is just

00:00:58,140 --> 00:01:02,399
an example project because I want to

00:00:59,399 --> 00:01:04,410
talk about using docker how how can we

00:01:02,399 --> 00:01:06,450
use docker to help us with our

00:01:04,410 --> 00:01:08,160
development workflow and then all the

00:01:06,450 --> 00:01:11,190
way through to production so how many

00:01:08,160 --> 00:01:13,260
people are using docker for production

00:01:11,190 --> 00:01:14,579
work at the moment I have companies

00:01:13,260 --> 00:01:16,650
where they're running their Production

00:01:14,579 --> 00:01:18,960
apps okay lots of people and how many

00:01:16,650 --> 00:01:22,560
people are using docker everyday in

00:01:18,960 --> 00:01:23,939
development yeah a lot less and this is

00:01:22,560 --> 00:01:26,100
this is kind of why I want to talk about

00:01:23,939 --> 00:01:28,950
is there until now it's been really

00:01:26,100 --> 00:01:30,780
difficult to use docker for development

00:01:28,950 --> 00:01:33,119
there's been a lot of problems with how

00:01:30,780 --> 00:01:35,549
many people have used boot to docker the

00:01:33,119 --> 00:01:37,740
kind of old way and how many people

00:01:35,549 --> 00:01:40,829
enjoyed the experience of using booted

00:01:37,740 --> 00:01:43,409
docker yeah I was there we'll talk about

00:01:40,829 --> 00:01:45,270
some of the problems with that and it's

00:01:43,409 --> 00:01:48,780
good news basically everything is fixed

00:01:45,270 --> 00:01:50,189
so just to give you a quick overview

00:01:48,780 --> 00:01:54,180
with the application I'm going to talk

00:01:50,189 --> 00:01:56,159
about it's just an example but it's very

00:01:54,180 --> 00:01:58,079
kind of standard I've got a node.js

00:01:56,159 --> 00:02:01,020
back-end that's going to serve our data

00:01:58,079 --> 00:02:03,479
in JSON format and then we have a react

00:02:01,020 --> 00:02:05,700
app that just renders that data on the

00:02:03,479 --> 00:02:06,990
screen so hopefully something that

00:02:05,700 --> 00:02:08,940
you'll be familiar with and something

00:02:06,990 --> 00:02:13,260
that you can translate to whatever your

00:02:08,940 --> 00:02:16,170
application looks like so what's changed

00:02:13,260 --> 00:02:19,110
what makes now the now the right time to

00:02:16,170 --> 00:02:21,000
use docker in development so basically

00:02:19,110 --> 00:02:23,940
they've produced some new apps docker

00:02:21,000 --> 00:02:27,720
for Mac and dock for Windows

00:02:23,940 --> 00:02:29,670
and these these work differently to the

00:02:27,720 --> 00:02:32,400
old one so the old version was using

00:02:29,670 --> 00:02:35,640
virtual machines you had docker running

00:02:32,400 --> 00:02:37,410
in a virtual machine and it meant that

00:02:35,640 --> 00:02:39,240
you had to have some special IP

00:02:37,410 --> 00:02:40,500
addresses to connect to it you had a few

00:02:39,240 --> 00:02:44,100
quirks because it was running inside

00:02:40,500 --> 00:02:46,800
VirtualBox so these new apps change

00:02:44,100 --> 00:02:48,600
everything these are built on they run

00:02:46,800 --> 00:02:50,400
on hypervisors they're not running

00:02:48,600 --> 00:02:51,900
inside virtual machines using something

00:02:50,400 --> 00:02:53,720
called hype kit which is an abstraction

00:02:51,900 --> 00:02:55,650
layer to create cross-platform

00:02:53,720 --> 00:02:58,070
hypervisors which is probably the most

00:02:55,650 --> 00:03:01,050
crazy thing I've ever heard

00:02:58,070 --> 00:03:02,700
the docker command is now available

00:03:01,050 --> 00:03:04,410
system-wide so you don't have to have

00:03:02,700 --> 00:03:06,840
this special docker terminal which is

00:03:04,410 --> 00:03:08,400
the old way of doing it just you can run

00:03:06,840 --> 00:03:10,700
docker as a program on the command line

00:03:08,400 --> 00:03:13,170
from anywhere like a normal application

00:03:10,700 --> 00:03:14,430
and the containers are all bound to

00:03:13,170 --> 00:03:16,080
localhost you don't have this special

00:03:14,430 --> 00:03:17,670
docker machine IP that you connect to

00:03:16,080 --> 00:03:19,710
anymore you can just access your

00:03:17,670 --> 00:03:21,660
containers very similar to if you just

00:03:19,710 --> 00:03:22,860
ran your node application with node

00:03:21,660 --> 00:03:25,200
you'll be able to access it from

00:03:22,860 --> 00:03:27,090
localhost same now if you're running in

00:03:25,200 --> 00:03:28,730
a docker container it's available from

00:03:27,090 --> 00:03:30,660
localhost

00:03:28,730 --> 00:03:32,190
the other thing that I'm going to fix

00:03:30,660 --> 00:03:33,180
which is what really what sorry the

00:03:32,190 --> 00:03:35,820
other thing that I'm going to talk about

00:03:33,180 --> 00:03:38,430
that they fixed which really makes the

00:03:35,820 --> 00:03:40,140
development story work is that before

00:03:38,430 --> 00:03:41,790
there was a big problem with fire

00:03:40,140 --> 00:03:44,100
Watchers like if you if your files

00:03:41,790 --> 00:03:45,600
changed it it didn't get the

00:03:44,100 --> 00:03:47,070
notification that that file had changed

00:03:45,600 --> 00:03:49,620
that's like the file system event that

00:03:47,070 --> 00:03:51,360
the father changed because the files

00:03:49,620 --> 00:03:53,310
have been like copied into this virtual

00:03:51,360 --> 00:03:54,739
machine but now they're using a

00:03:53,310 --> 00:04:01,080
hypervisor they can use the real files

00:03:54,739 --> 00:04:02,810
and everything worse expected so what do

00:04:01,080 --> 00:04:04,380
we need to do to run our application

00:04:02,810 --> 00:04:06,209
inside docker

00:04:04,380 --> 00:04:08,700
so the first thing I'm going to do is

00:04:06,209 --> 00:04:11,820
write a docker file who has written the

00:04:08,700 --> 00:04:13,200
docker file before okay great so about

00:04:11,820 --> 00:04:15,660
half people have written doc forum

00:04:13,200 --> 00:04:18,120
before so I'm just going to go through

00:04:15,660 --> 00:04:21,120
like how to write docker file for a node

00:04:18,120 --> 00:04:23,640
no GS app and I'm gonna go through line

00:04:21,120 --> 00:04:26,850
by line to explain specifically why I do

00:04:23,640 --> 00:04:30,030
it in this particular way and hopefully

00:04:26,850 --> 00:04:31,430
that will reveal a little bit about how

00:04:30,030 --> 00:04:34,560
docker works

00:04:31,430 --> 00:04:36,180
so all docker images are based on a

00:04:34,560 --> 00:04:37,340
starting image so this is what this

00:04:36,180 --> 00:04:42,210
first line is

00:04:37,340 --> 00:04:43,500
node 6.4 it's you can specify the exact

00:04:42,210 --> 00:04:45,300
version that you want which is nice that

00:04:43,500 --> 00:04:48,330
gives us a nice repeatable builds and

00:04:45,300 --> 00:04:49,470
that means that when a new version of

00:04:48,330 --> 00:04:51,240
know comes along we're still going to be

00:04:49,470 --> 00:04:53,130
targeting the same build so it's really

00:04:51,240 --> 00:04:54,630
nice for Pete ability means that if we

00:04:53,130 --> 00:04:58,620
try and build this in a year's time when

00:04:54,630 --> 00:05:01,410
we're on node 67 then well it will

00:04:58,620 --> 00:05:05,310
hopefully still work you also noticed

00:05:01,410 --> 00:05:06,300
that it just says from note so normally

00:05:05,310 --> 00:05:08,760
your docker images would have a

00:05:06,300 --> 00:05:12,000
namespace so it'd be like for my images

00:05:08,760 --> 00:05:14,370
it would be from David Blanton / talent

00:05:12,000 --> 00:05:15,540
API these ones don't have a namespace

00:05:14,370 --> 00:05:17,300
and that means that they're official

00:05:15,540 --> 00:05:20,760
images these are images that have been

00:05:17,300 --> 00:05:23,310
maintained by someone from the node

00:05:20,760 --> 00:05:26,640
Foundation and they've been kind of

00:05:23,310 --> 00:05:28,680
supplied as official images so it's nice

00:05:26,640 --> 00:05:30,240
to have node configured by someone who

00:05:28,680 --> 00:05:31,770
works at node and then you can just use

00:05:30,240 --> 00:05:36,030
it and hopefully everything works as

00:05:31,770 --> 00:05:38,550
expected this is how you set an

00:05:36,030 --> 00:05:41,670
environment variable in a docker file

00:05:38,550 --> 00:05:43,440
and here I'm just changing the NPM

00:05:41,670 --> 00:05:45,360
config log level to warn because the

00:05:43,440 --> 00:05:47,010
default is HTTP it will print out every

00:05:45,360 --> 00:05:50,240
HTTP request that it makes which is

00:05:47,010 --> 00:05:52,290
probably more information than you need

00:05:50,240 --> 00:05:53,820
we're going to create a working

00:05:52,290 --> 00:05:56,550
directory where we're going to keep our

00:05:53,820 --> 00:05:57,870
code basically what docker is doing is

00:05:56,550 --> 00:05:59,280
it's wrapping up your application with a

00:05:57,870 --> 00:06:01,440
file system and that file system

00:05:59,280 --> 00:06:03,330
contains all the dependencies that you

00:06:01,440 --> 00:06:05,880
need to run whether it's a runtime

00:06:03,330 --> 00:06:07,290
environment dependents use binaries

00:06:05,880 --> 00:06:08,910
anything that's on the path that you

00:06:07,290 --> 00:06:10,290
need so we need to say where we're

00:06:08,910 --> 00:06:14,310
running from this so this is the working

00:06:10,290 --> 00:06:16,350
directory this next line I'm not really

00:06:14,310 --> 00:06:17,940
not really a hundred percent on this but

00:06:16,350 --> 00:06:19,860
it's been working really well for me

00:06:17,940 --> 00:06:22,050
basically if you're using NPM

00:06:19,860 --> 00:06:24,150
shrink-wrap something I discovered is

00:06:22,050 --> 00:06:27,270
that normally when you run NPM install

00:06:24,150 --> 00:06:29,070
it would look at the package.json file

00:06:27,270 --> 00:06:31,170
read the dependencies from that resolve

00:06:29,070 --> 00:06:34,170
them based on their constraints you've

00:06:31,170 --> 00:06:36,720
put in there unless you have a shrink

00:06:34,170 --> 00:06:38,160
wrap file and then the shrink wrap file

00:06:36,720 --> 00:06:39,690
contains the exact version the

00:06:38,160 --> 00:06:42,750
resolution of all the sub dependencies

00:06:39,690 --> 00:06:44,790
that it should install and I've

00:06:42,750 --> 00:06:46,380
discovered although the NPM

00:06:44,790 --> 00:06:48,840
documentation says it doesn't work is

00:06:46,380 --> 00:06:50,820
that you can install from just a pack

00:06:48,840 --> 00:06:53,910
from just an NPM shrink wrap file

00:06:50,820 --> 00:06:55,760
so why would you want to do this why am

00:06:53,910 --> 00:06:58,140
I not just installing front package.json

00:06:55,760 --> 00:07:00,210
the problem with the package.json is

00:06:58,140 --> 00:07:01,620
that it's become kind of a dumping

00:07:00,210 --> 00:07:03,210
ground for everything else that we do at

00:07:01,620 --> 00:07:04,770
node so you have scripts in there and

00:07:03,210 --> 00:07:07,470
then lots of packages put their own

00:07:04,770 --> 00:07:08,850
configuration in there so maybe you have

00:07:07,470 --> 00:07:10,350
your babel configuration maybe it's in a

00:07:08,850 --> 00:07:13,170
separate file maybe if you have some

00:07:10,350 --> 00:07:17,490
test runner it's got some configuration

00:07:13,170 --> 00:07:20,490
in there and the reason why that's

00:07:17,490 --> 00:07:23,610
important is that basically we're going

00:07:20,490 --> 00:07:25,670
to be when we build this any previous

00:07:23,610 --> 00:07:29,460
layer that's unchanged will be cached so

00:07:25,670 --> 00:07:33,570
if we for example managed to get down to

00:07:29,460 --> 00:07:36,540
line 7 here which we should hopefully

00:07:33,570 --> 00:07:39,410
always be able to do say ok say say that

00:07:36,540 --> 00:07:41,760
our NPM shrink-wrap file hasn't changed

00:07:39,410 --> 00:07:43,410
from the last time that we did a build

00:07:41,760 --> 00:07:45,450
and that means it can just skip this

00:07:43,410 --> 00:07:47,160
step it will reuse the cash from that

00:07:45,450 --> 00:07:49,410
version and when it comes to something

00:07:47,160 --> 00:07:51,210
like NPM install that saves a lot of

00:07:49,410 --> 00:07:53,070
time we don't have to npm install again

00:07:51,210 --> 00:07:54,900
even though we're creating container

00:07:53,070 --> 00:07:56,940
from scratch so the containers are

00:07:54,900 --> 00:07:59,220
mutable but we can use cache versions of

00:07:56,940 --> 00:08:02,360
old containers providing that we're

00:07:59,220 --> 00:08:04,320
convinced that they should be the same

00:08:02,360 --> 00:08:05,580
so basically I was having problems with

00:08:04,320 --> 00:08:07,350
like with a package to Jason you would

00:08:05,580 --> 00:08:08,580
go to change a script and then that

00:08:07,350 --> 00:08:10,890
would mean that you had to run npm

00:08:08,580 --> 00:08:12,600
install again which seems like obviously

00:08:10,890 --> 00:08:14,730
you know that you don't have to chain

00:08:12,600 --> 00:08:16,800
run in p.m. install when you change the

00:08:14,730 --> 00:08:18,480
script like that doesn't make sense but

00:08:16,800 --> 00:08:20,430
because this is just looking at has the

00:08:18,480 --> 00:08:24,450
file changed like if i copy a file into

00:08:20,430 --> 00:08:26,700
the into the container and that files

00:08:24,450 --> 00:08:29,520
changed and that invalidates the cache

00:08:26,700 --> 00:08:30,870
for that level so this is why you'll see

00:08:29,520 --> 00:08:32,790
this is a common pattern and people will

00:08:30,870 --> 00:08:34,560
always copy in their package jason

00:08:32,790 --> 00:08:36,780
higher up in the file before they

00:08:34,560 --> 00:08:39,360
copying the rest of the files so we run

00:08:36,780 --> 00:08:42,840
npm install and then we copy in the rest

00:08:39,360 --> 00:08:45,780
of the application we're going to expose

00:08:42,840 --> 00:08:49,200
a port that application runs on port

00:08:45,780 --> 00:08:53,870
8000 and then we define a command how to

00:08:49,200 --> 00:08:56,430
start up the application so this is a

00:08:53,870 --> 00:08:58,530
complete docker file and this is a

00:08:56,430 --> 00:09:00,660
docker file which would be able to run

00:08:58,530 --> 00:09:02,070
our application here on this machine and

00:09:00,660 --> 00:09:03,210
we could also use it to run in

00:09:02,070 --> 00:09:06,270
production

00:09:03,210 --> 00:09:09,710
so let's go ahead and let's go ahead and

00:09:06,270 --> 00:09:13,830
build it at great personal risk okay

00:09:09,710 --> 00:09:16,950
super simple to build a a docker file

00:09:13,830 --> 00:09:18,570
gonna just run docker build this - T is

00:09:16,950 --> 00:09:20,820
a tag I'm gonna tag this image so I can

00:09:18,570 --> 00:09:23,130
find it again you don't have to tag them

00:09:20,820 --> 00:09:25,500
but then you just get like a hash that

00:09:23,130 --> 00:09:27,930
refers to this build so it's difficult

00:09:25,500 --> 00:09:29,820
to find it again and then thought just

00:09:27,930 --> 00:09:31,200
means where should I build from what's

00:09:29,820 --> 00:09:35,370
the context of the build and that's just

00:09:31,200 --> 00:09:38,010
the current directory so first thing it

00:09:35,370 --> 00:09:40,430
does is like figures out what files do I

00:09:38,010 --> 00:09:42,420
need to send to the to the build and

00:09:40,430 --> 00:09:45,330
you'll see that it skipped all the way

00:09:42,420 --> 00:09:49,170
to step 6 straightaway and that's

00:09:45,330 --> 00:09:50,760
because I've ran this before and the NPM

00:09:49,170 --> 00:09:52,470
shrink-wrap dot jason hasn't changed

00:09:50,760 --> 00:09:54,090
there aren't any new dependencies so we

00:09:52,470 --> 00:09:57,270
can just reuse the last dependencies so

00:09:54,090 --> 00:09:59,280
this is really nice like we can build we

00:09:57,270 --> 00:10:03,000
can build this image and even if they've

00:09:59,280 --> 00:10:04,860
been changes to our application code we

00:10:03,000 --> 00:10:06,210
don't need to reinstall anything we

00:10:04,860 --> 00:10:15,240
don't need to download node again none

00:10:06,210 --> 00:10:17,550
of these things have changed okay so

00:10:15,240 --> 00:10:19,020
let's let's run the image let's try

00:10:17,550 --> 00:10:20,850
let's try out our application that we've

00:10:19,020 --> 00:10:24,810
made so how do we do that

00:10:20,850 --> 00:10:27,000
docker run this - IT means that we're

00:10:24,810 --> 00:10:30,270
going to basically attach this terminal

00:10:27,000 --> 00:10:32,190
sessions here into the terminal session

00:10:30,270 --> 00:10:33,480
that's inside the container and reason

00:10:32,190 --> 00:10:35,460
you have to do that is otherwise you

00:10:33,480 --> 00:10:39,630
can't kill it which is frustrating for

00:10:35,460 --> 00:10:42,000
demos then this next document - piece is

00:10:39,630 --> 00:10:43,980
we're going to take the port 8000 that's

00:10:42,000 --> 00:10:47,370
inside the container and map it to port

00:10:43,980 --> 00:10:49,770
8000 outside the container next document

00:10:47,370 --> 00:10:55,050
is the tag that's the image that we just

00:10:49,770 --> 00:10:58,560
built and then I'm going to override the

00:10:55,050 --> 00:11:00,390
command so I have basically this last

00:10:58,560 --> 00:11:02,910
argument I'm going to run my dev command

00:11:00,390 --> 00:11:05,610
and that's going to run instead of

00:11:02,910 --> 00:11:07,680
running it with NPM start that's just

00:11:05,610 --> 00:11:10,280
going to run load one so that we can

00:11:07,680 --> 00:11:10,280
watch for changes

00:11:11,040 --> 00:11:22,950
so application starts up watching for

00:11:13,260 --> 00:11:25,560
changes great the problem is when I save

00:11:22,950 --> 00:11:28,860
the file you know the application isn't

00:11:25,560 --> 00:11:30,540
reloaded and the reason for that is

00:11:28,860 --> 00:11:32,340
because this copy operation is a

00:11:30,540 --> 00:11:34,170
one-time thing we copied the files into

00:11:32,340 --> 00:11:36,480
the container but now the container is

00:11:34,170 --> 00:11:38,940
done it's immutable it's not going to

00:11:36,480 --> 00:11:40,560
pick up the changes from outside so this

00:11:38,940 --> 00:11:43,350
is no good for development I mean we

00:11:40,560 --> 00:11:46,230
could just stop it rebuild the image but

00:11:43,350 --> 00:11:50,240
this is a really rubbish experience for

00:11:46,230 --> 00:11:50,240
development so how can we fix that

00:11:55,670 --> 00:11:59,249
so try doing it slightly different way

00:11:57,779 --> 00:12:02,189
so exactly the same commanders before

00:11:59,249 --> 00:12:03,269
but now we have this - V flag and what

00:12:02,189 --> 00:12:05,430
that's going to do is create a volume

00:12:03,269 --> 00:12:07,980
we're going to take the current working

00:12:05,430 --> 00:12:10,319
directory and we're going to map that as

00:12:07,980 --> 00:12:11,519
a file mount onto this code directory

00:12:10,319 --> 00:12:15,930
which is where we're storing our code

00:12:11,519 --> 00:12:19,589
that was the the working directory here

00:12:15,930 --> 00:12:24,120
from before and so this is just like

00:12:19,589 --> 00:12:26,430
taking the files the outside just like

00:12:24,120 --> 00:12:28,860
in your in your on your regular file

00:12:26,430 --> 00:12:31,139
system and they're going to act as like

00:12:28,860 --> 00:12:33,360
a network drive or a file file share if

00:12:31,139 --> 00:12:36,420
you like inside the container so that

00:12:33,360 --> 00:12:38,009
now it has the real files and again

00:12:36,420 --> 00:12:48,059
we're going to run node one so it can

00:12:38,009 --> 00:12:56,129
pick up file changes and now when I hit

00:12:48,059 --> 00:13:04,639
save node one rebuilds the files and if

00:12:56,129 --> 00:13:06,990
we you can see if we have the new

00:13:04,639 --> 00:13:09,600
message that I just typed in there so

00:13:06,990 --> 00:13:10,920
we've got live reload working so this is

00:13:09,600 --> 00:13:12,959
kind of the steps that we want so we

00:13:10,920 --> 00:13:14,819
have our application running inside node

00:13:12,959 --> 00:13:17,000
inside the docker container sorry

00:13:14,819 --> 00:13:19,920
running node inside the docker container

00:13:17,000 --> 00:13:22,439
and the live reload is working we can

00:13:19,920 --> 00:13:28,829
just continue our development as we

00:13:22,439 --> 00:13:31,319
always happen however it's going to be a

00:13:28,829 --> 00:13:33,089
bit of a pain to just always be typing

00:13:31,319 --> 00:13:35,069
these extra commands like the past in

00:13:33,089 --> 00:13:40,290
these flags how can we how can we do

00:13:35,069 --> 00:13:43,139
this nicer so the next step is to write

00:13:40,290 --> 00:13:45,179
a compose file this is a file that's

00:13:43,139 --> 00:13:48,029
interpreted by docker compose which is a

00:13:45,179 --> 00:13:50,670
a tool that docker provides to run

00:13:48,029 --> 00:13:52,939
multiple containers and what does that

00:13:50,670 --> 00:13:52,939
look like

00:13:55,360 --> 00:14:00,579
so dr. Campos file again is quite simple

00:13:58,869 --> 00:14:01,929
it starts with version 2 because they

00:14:00,579 --> 00:14:04,029
added some extra features which weren't

00:14:01,929 --> 00:14:07,989
back backwards compatible so you can opt

00:14:04,029 --> 00:14:09,730
into the new version of the file we're

00:14:07,989 --> 00:14:11,619
going to define some services and the

00:14:09,730 --> 00:14:13,929
service is just anything that you want

00:14:11,619 --> 00:14:14,949
docker to start a container for so in

00:14:13,929 --> 00:14:18,100
this case we're going to define a

00:14:14,949 --> 00:14:20,049
service called API and then basically

00:14:18,100 --> 00:14:21,519
each of these commands reflects the

00:14:20,049 --> 00:14:23,799
parameters that we had to pass the

00:14:21,519 --> 00:14:26,199
docker to configure it correctly to run

00:14:23,799 --> 00:14:28,540
for development so we're going to build

00:14:26,199 --> 00:14:30,670
from the current working directory dot

00:14:28,540 --> 00:14:34,149
we're going to override the start

00:14:30,670 --> 00:14:36,009
command this just runs node 1 we're

00:14:34,149 --> 00:14:39,399
going to map the ports so that it's

00:14:36,009 --> 00:14:42,189
visible outside outside of the container

00:14:39,399 --> 00:14:45,699
and then we're going to do the same

00:14:42,189 --> 00:14:47,379
trick with the volumes now there's one

00:14:45,699 --> 00:14:53,679
problem with what the volume that I did

00:14:47,379 --> 00:14:57,489
before and the reason the reason for

00:14:53,679 --> 00:14:59,829
that is that the node modules which you

00:14:57,489 --> 00:15:02,769
might have installed on your Mac for

00:14:59,829 --> 00:15:04,299
example or on Windows they may have

00:15:02,769 --> 00:15:06,279
binary dependencies which are built for

00:15:04,299 --> 00:15:08,860
that platform and if you just copy your

00:15:06,279 --> 00:15:10,239
node modules into this Linux environment

00:15:08,860 --> 00:15:13,360
they're not going to work they're not

00:15:10,239 --> 00:15:16,119
compiled for the right architecture so

00:15:13,360 --> 00:15:17,439
what we do here and this is the biggest

00:15:16,119 --> 00:15:20,949
leap of faith that you'll have to take

00:15:17,439 --> 00:15:25,449
for this talk is we're going to we have

00:15:20,949 --> 00:15:26,679
two volumes and we have the one that we

00:15:25,449 --> 00:15:29,319
just used so that's the current

00:15:26,679 --> 00:15:30,279
directory outside on the host that's

00:15:29,319 --> 00:15:32,649
going to get mapped to this code

00:15:30,279 --> 00:15:34,749
directory but then we're going to create

00:15:32,649 --> 00:15:38,049
another volume this is a named volume

00:15:34,749 --> 00:15:40,569
this is like a quite a new feature in in

00:15:38,049 --> 00:15:42,579
docker which I'm defined down here and

00:15:40,569 --> 00:15:43,899
there's no extra configuration for that

00:15:42,579 --> 00:15:46,480
which just means it's going to create a

00:15:43,899 --> 00:15:48,669
regular file volume using the default

00:15:46,480 --> 00:15:54,160
driver and then we're going to map that

00:15:48,669 --> 00:15:56,410
to a directory inside our other mount so

00:15:54,160 --> 00:15:57,610
you have the docker container which has

00:15:56,410 --> 00:16:00,309
its own file system that's isolated

00:15:57,610 --> 00:16:03,339
we're going to mount inside of that our

00:16:00,309 --> 00:16:06,220
files from our host and then inside of

00:16:03,339 --> 00:16:08,529
that we're going to stub out like a safe

00:16:06,220 --> 00:16:09,480
space for it to install the node modules

00:16:08,529 --> 00:16:13,510
for its own

00:16:09,480 --> 00:16:15,250
platform and that means that when we run

00:16:13,510 --> 00:16:17,290
npm install inside the container

00:16:15,250 --> 00:16:19,600
these node what these node modules will

00:16:17,290 --> 00:16:24,700
end up inside this volume and they won't

00:16:19,600 --> 00:16:27,370
get leaked outside back to your host and

00:16:24,700 --> 00:16:31,120
so that allows us to if you want you can

00:16:27,370 --> 00:16:33,280
even install run npm install on the host

00:16:31,120 --> 00:16:35,260
have the node modules for mac there

00:16:33,280 --> 00:16:37,690
which is sometimes useful for running

00:16:35,260 --> 00:16:39,880
things like es lint or like your dev

00:16:37,690 --> 00:16:42,160
dependencies and then inside the

00:16:39,880 --> 00:16:44,650
container all have the same dependencies

00:16:42,160 --> 00:16:47,740
but compiled for the linux environment

00:16:44,650 --> 00:16:49,180
that it runs in so that's how you can

00:16:47,740 --> 00:16:53,140
get that to work and that allows you to

00:16:49,180 --> 00:16:54,940
kind of not be locked in to developer

00:16:53,140 --> 00:16:57,040
sort of developing in docker sometimes

00:16:54,940 --> 00:16:58,270
it's easier to have those actual node

00:16:57,040 --> 00:17:01,210
modules if you need to debug something

00:16:58,270 --> 00:17:03,070
or whatever it works equally well if

00:17:01,210 --> 00:17:05,050
you're going to be kind of careful and

00:17:03,070 --> 00:17:07,420
commit to this run err always running

00:17:05,050 --> 00:17:08,800
inside docker you can there's no problem

00:17:07,420 --> 00:17:10,840
with just having these files being on

00:17:08,800 --> 00:17:13,450
your hard drive the problem is if you

00:17:10,840 --> 00:17:14,350
then try and run npm that's not going to

00:17:13,450 --> 00:17:16,450
work because there for the wrong

00:17:14,350 --> 00:17:18,280
architecture you have the Linux files

00:17:16,450 --> 00:17:21,310
which have kind of come back onto your

00:17:18,280 --> 00:17:22,690
Mac as part of the file share so this is

00:17:21,310 --> 00:17:25,540
the reason that I would recommend this

00:17:22,690 --> 00:17:27,970
approach because you the errors that you

00:17:25,540 --> 00:17:29,260
get a very strange when you have files

00:17:27,970 --> 00:17:31,930
compiled the wrong architecture they're

00:17:29,260 --> 00:17:34,840
not always obvious so this kind of gives

00:17:31,930 --> 00:17:36,430
you the safety and allows you to switch

00:17:34,840 --> 00:17:42,310
back and forth more easily if if you

00:17:36,430 --> 00:17:45,610
want to do that so the only thing left

00:17:42,310 --> 00:17:49,390
to do is to run an app and the way to do

00:17:45,610 --> 00:17:51,730
that is using docker compose and we'll

00:17:49,390 --> 00:17:54,280
just use the up command which says take

00:17:51,730 --> 00:17:58,270
my docker compose file and start all the

00:17:54,280 --> 00:18:02,680
services in it and of course it didn't

00:17:58,270 --> 00:18:04,980
work because it's still running okay no

00:18:02,680 --> 00:18:04,980
problem

00:18:08,280 --> 00:18:16,180
all right so you see we have this

00:18:14,130 --> 00:18:18,010
slightly different logging output and

00:18:16,180 --> 00:18:19,990
it's just basically a pen it's just

00:18:18,010 --> 00:18:22,480
prepending the name of the service and

00:18:19,990 --> 00:18:24,070
then it has API one because there could

00:18:22,480 --> 00:18:26,520
be multiple instance of instances of

00:18:24,070 --> 00:18:28,510
this it's not so applicable for

00:18:26,520 --> 00:18:29,860
development but obviously in production

00:18:28,510 --> 00:18:31,780
you might want to run multiple copies of

00:18:29,860 --> 00:18:36,870
a container and then low bounce across

00:18:31,780 --> 00:18:36,870
them so now we have this working and

00:18:46,350 --> 00:18:49,540
again we can connect to the container

00:18:48,310 --> 00:18:53,620
from the outside and it gives us the

00:18:49,540 --> 00:18:55,240
message from before so this is great you

00:18:53,620 --> 00:19:00,250
can see there we had the lock output

00:18:55,240 --> 00:19:00,580
from the HTTP request there as well this

00:19:00,250 --> 00:19:05,890
is great

00:19:00,580 --> 00:19:07,330
and night-light neatly wraps up all

00:19:05,890 --> 00:19:09,010
those all those parameters that we had

00:19:07,330 --> 00:19:10,480
to pass in there are other other options

00:19:09,010 --> 00:19:14,220
as well obviously but I think these are

00:19:10,480 --> 00:19:17,560
the most important ones for development

00:19:14,220 --> 00:19:19,030
so how do you run a command that you

00:19:17,560 --> 00:19:20,410
would typically have to run outside the

00:19:19,030 --> 00:19:24,460
container like you want to install a new

00:19:20,410 --> 00:19:26,770
dependency super easy dr. Campos comes

00:19:24,460 --> 00:19:29,800
with the run command so if we were doing

00:19:26,770 --> 00:19:31,870
NPM install cause before now we do

00:19:29,800 --> 00:19:33,370
docker compose run the name of the

00:19:31,870 --> 00:19:36,040
service that we want to run the command

00:19:33,370 --> 00:19:38,920
in and then the command so what this

00:19:36,040 --> 00:19:41,080
would do is it would fire up the

00:19:38,920 --> 00:19:43,150
container it would run this command npm

00:19:41,080 --> 00:19:44,590
install cause inside so this dependency

00:19:43,150 --> 00:19:46,990
is going to end up inside that volume

00:19:44,590 --> 00:19:48,100
that we defined this respects all the

00:19:46,990 --> 00:19:52,240
settings you have in your docker compose

00:19:48,100 --> 00:19:53,650
file and basically this is just a

00:19:52,240 --> 00:19:56,140
straight-up replacement where you ran

00:19:53,650 --> 00:19:59,440
npm install cause before now just do da

00:19:56,140 --> 00:20:01,390
compose run api npm install' course and

00:19:59,440 --> 00:20:03,310
if it's too much typing then you can

00:20:01,390 --> 00:20:05,680
just make some aliases to make that a

00:20:03,310 --> 00:20:07,950
bit shorter it's quite quite easy to get

00:20:05,680 --> 00:20:07,950
used to

00:20:09,690 --> 00:20:13,770
so the dr. Campos file is really nice

00:20:12,150 --> 00:20:15,870
because there's not really any overhead

00:20:13,770 --> 00:20:18,090
to creating extra services so one thing

00:20:15,870 --> 00:20:20,100
I like to do is just define another

00:20:18,090 --> 00:20:21,540
service that runs my tests so this just

00:20:20,100 --> 00:20:24,480
creates another instance of the same

00:20:21,540 --> 00:20:26,310
container here I'm just changing the

00:20:24,480 --> 00:20:29,130
command so now I'm running my tests with

00:20:26,310 --> 00:20:30,600
the watch flag the watch flag works it

00:20:29,130 --> 00:20:32,280
will rerun my test because we're doing

00:20:30,600 --> 00:20:34,920
the same trick with the volumes to just

00:20:32,280 --> 00:20:36,180
mount the files inside and we don't even

00:20:34,920 --> 00:20:38,070
have to install the dependencies twice

00:20:36,180 --> 00:20:40,860
it's reusing the volume that has all the

00:20:38,070 --> 00:20:42,720
node modules in and you can imagine

00:20:40,860 --> 00:20:44,940
defining more services maybe you could

00:20:42,720 --> 00:20:46,380
run your linter and all of these will

00:20:44,940 --> 00:20:49,560
just show up in like a nice interleaved

00:20:46,380 --> 00:20:51,570
output so you only have one command I

00:20:49,560 --> 00:20:52,830
don't about you but before I did this I

00:20:51,570 --> 00:20:54,690
used to have to open multiple terminals

00:20:52,830 --> 00:20:55,920
like start up various things they had

00:20:54,690 --> 00:20:58,080
watches because they're long-running

00:20:55,920 --> 00:21:00,210
process is so now this allows you to

00:20:58,080 --> 00:21:03,660
have them kind of all together and to

00:21:00,210 --> 00:21:09,030
start them all up with just one one

00:21:03,660 --> 00:21:10,850
script or composer there's one other

00:21:09,030 --> 00:21:16,470
really nice feature worth mentioning for

00:21:10,850 --> 00:21:19,290
the services and I don't use this on my

00:21:16,470 --> 00:21:21,560
project but obviously lots of people do

00:21:19,290 --> 00:21:24,270
use databases so it's worth mentioning

00:21:21,560 --> 00:21:27,540
so here's an example of how how do we

00:21:24,270 --> 00:21:30,420
connect to a Postgres database in

00:21:27,540 --> 00:21:32,400
development so normally most people will

00:21:30,420 --> 00:21:34,020
just install Postgres on the machine and

00:21:32,400 --> 00:21:35,130
then get it configured correctly and

00:21:34,020 --> 00:21:37,050
then maybe if you want to use it with

00:21:35,130 --> 00:21:39,570
another another project you have to

00:21:37,050 --> 00:21:41,010
reconfigure it and what this allows us

00:21:39,570 --> 00:21:44,340
to do is we can run Postgres inside a

00:21:41,010 --> 00:21:49,770
container which gives us an isolated

00:21:44,340 --> 00:21:51,210
version of this database it's super easy

00:21:49,770 --> 00:21:52,680
like it's way easier than installing

00:21:51,210 --> 00:21:54,960
postcards we just put the name of it

00:21:52,680 --> 00:21:57,210
here if I wanted to install my sequel I

00:21:54,960 --> 00:21:59,070
just put my sequel Redis all of these

00:21:57,210 --> 00:22:01,410
have official builds and they're all

00:21:59,070 --> 00:22:04,980
configured out at the box so that's

00:22:01,410 --> 00:22:06,840
super nice we can interact with this we

00:22:04,980 --> 00:22:08,280
can configure this image or like any

00:22:06,840 --> 00:22:10,860
additional configuration that we need

00:22:08,280 --> 00:22:12,270
using environment variables and all of

00:22:10,860 --> 00:22:14,520
them just list the kind of configuration

00:22:12,270 --> 00:22:17,580
parameters gives you like a nice API

00:22:14,520 --> 00:22:21,360
onto this image so here we're going to

00:22:17,580 --> 00:22:23,050
define some username password and then

00:22:21,360 --> 00:22:24,880
in order to persist

00:22:23,050 --> 00:22:27,970
the data that's in the database we just

00:22:24,880 --> 00:22:30,550
give it a volume and then this exposes

00:22:27,970 --> 00:22:32,500
the port here you'll notice that says

00:22:30,550 --> 00:22:34,630
exposed before we had ports and that

00:22:32,500 --> 00:22:36,070
defined a port mapping and this time

00:22:34,630 --> 00:22:39,130
we're saying expose a port but there's

00:22:36,070 --> 00:22:43,390
no what is the port that 5 4 3 2 is

00:22:39,130 --> 00:22:45,370
mapped to so this is where we come to

00:22:43,390 --> 00:22:48,630
links so you see that the API has a

00:22:45,370 --> 00:22:50,830
definition here links to the links to DB

00:22:48,630 --> 00:22:52,630
what this means is that docker is going

00:22:50,830 --> 00:22:54,640
to set up an internal network route

00:22:52,630 --> 00:22:57,190
between the API service and the database

00:22:54,640 --> 00:22:59,140
and the database is not publicly

00:22:57,190 --> 00:23:02,920
accessible this doesn't have a port you

00:22:59,140 --> 00:23:04,600
can connect to it from and that's why it

00:23:02,920 --> 00:23:06,520
would be perfectly fine to have your

00:23:04,600 --> 00:23:09,280
username password like this this is this

00:23:06,520 --> 00:23:13,240
database is not accessible from anywhere

00:23:09,280 --> 00:23:17,530
else on the host or beyond on the public

00:23:13,240 --> 00:23:19,660
Internet how do you connect to it from

00:23:17,530 --> 00:23:21,190
the API what it's going to do is it's

00:23:19,660 --> 00:23:24,850
going to create an entry in the hosts

00:23:21,190 --> 00:23:26,470
file of this container for DB and then

00:23:24,850 --> 00:23:29,530
that's going to resolve to the database

00:23:26,470 --> 00:23:32,020
so you can just do connect to server DB

00:23:29,530 --> 00:23:34,840
and that will be filled in in the host

00:23:32,020 --> 00:23:37,110
file with the link to wherever it's

00:23:34,840 --> 00:23:39,730
decided to run this and on whatever port

00:23:37,110 --> 00:23:43,540
I really like this and like if you're

00:23:39,730 --> 00:23:44,980
using some abstraction over your say

00:23:43,540 --> 00:23:47,080
your sequel IV fusions on like sequel

00:23:44,980 --> 00:23:48,880
eyes or whatever and you want to try

00:23:47,080 --> 00:23:51,160
swapping out your database for something

00:23:48,880 --> 00:23:53,170
else or you want to just say like I what

00:23:51,160 --> 00:23:55,420
would you be like if we ended memcache

00:23:53,170 --> 00:23:57,520
or Redis or some other service like this

00:23:55,420 --> 00:23:59,080
super easy to just create a new entry in

00:23:57,520 --> 00:24:01,570
your services you can connect to it

00:23:59,080 --> 00:24:03,310
really easily using the links and if you

00:24:01,570 --> 00:24:05,200
don't like it just throw it away delete

00:24:03,310 --> 00:24:10,120
it from your config and there's no no

00:24:05,200 --> 00:24:14,580
damage done so this is really nice

00:24:10,120 --> 00:24:17,470
but when we when we're running in

00:24:14,580 --> 00:24:18,880
production we're not having to worry

00:24:17,470 --> 00:24:20,800
about what ports things are running on

00:24:18,880 --> 00:24:22,450
everything has a name and I really

00:24:20,800 --> 00:24:24,490
wanted to find a way to solve this

00:24:22,450 --> 00:24:28,870
problem of like I want to have all my

00:24:24,490 --> 00:24:30,430
projects running on a local domain and

00:24:28,870 --> 00:24:31,870
turn out to be real easy this is

00:24:30,430 --> 00:24:33,940
actually like way easier than anything

00:24:31,870 --> 00:24:35,890
else to do a docker this isn't to do a

00:24:33,940 --> 00:24:36,970
docker but I just wanted to go through

00:24:35,890 --> 00:24:38,440
this just then

00:24:36,970 --> 00:24:41,380
straight how easy it is and I was really

00:24:38,440 --> 00:24:45,250
surprised these instructions are for Mac

00:24:41,380 --> 00:24:46,870
but I assume it's easy on Windows we're

00:24:45,250 --> 00:24:47,919
going to use DNS mask so just brew

00:24:46,870 --> 00:24:50,950
install DNS mask

00:24:47,919 --> 00:24:54,220
we just need to config files the first

00:24:50,950 --> 00:24:58,299
one is the DNS mask config file and that

00:24:54,220 --> 00:25:00,309
says that we're going to resolve the

00:24:58,299 --> 00:25:03,220
address anything that ends in the

00:25:00,309 --> 00:25:05,409
top-level domain dev to one two seven

00:25:03,220 --> 00:25:07,750
zero zero one to localhost that's where

00:25:05,409 --> 00:25:09,909
our containers are bound to so this is

00:25:07,750 --> 00:25:11,710
actually enough but at the moment that

00:25:09,909 --> 00:25:14,530
means that DNS mask is intercepting

00:25:11,710 --> 00:25:16,240
every DNS request so what we're going to

00:25:14,530 --> 00:25:19,720
do is create another file that tells the

00:25:16,240 --> 00:25:22,809
operating system only use this to

00:25:19,720 --> 00:25:26,140
resolve requests that end in dev so this

00:25:22,809 --> 00:25:27,460
is this bit here is OSX specific I

00:25:26,140 --> 00:25:30,850
assume you can do this on Windows as

00:25:27,460 --> 00:25:35,020
well we're basically just saying here if

00:25:30,850 --> 00:25:37,809
the domain ends in dev then use the name

00:25:35,020 --> 00:25:40,390
server one two seven zero zero one so

00:25:37,809 --> 00:25:41,770
now when you use any other site when you

00:25:40,390 --> 00:25:44,740
go on Facebook comm it's going to be

00:25:41,770 --> 00:25:47,440
resolved using whatever DNS you had

00:25:44,740 --> 00:25:52,450
before but if we go to a dev domain it's

00:25:47,440 --> 00:25:55,929
going to be resolved to localhost so how

00:25:52,450 --> 00:25:58,059
do we actually get those requests that

00:25:55,929 --> 00:26:01,650
are coming with these names and get them

00:25:58,059 --> 00:26:05,620
to the right containers so this again is

00:26:01,650 --> 00:26:07,780
actually really not really easy there

00:26:05,620 --> 00:26:09,039
are two images that I know that solve

00:26:07,780 --> 00:26:10,120
this problem and they solve it in the

00:26:09,039 --> 00:26:13,360
exact same way they're completely

00:26:10,120 --> 00:26:15,159
interchangeable I used this one which is

00:26:13,360 --> 00:26:17,020
based on high availability proxy because

00:26:15,159 --> 00:26:18,760
I was already running it in development

00:26:17,020 --> 00:26:20,230
and it was easy I just copied the

00:26:18,760 --> 00:26:22,179
configure hand development works in

00:26:20,230 --> 00:26:24,549
sorry in production works in development

00:26:22,179 --> 00:26:26,980
as well but there's another one that's

00:26:24,549 --> 00:26:28,570
based on nginx so if you're more

00:26:26,980 --> 00:26:29,799
familiar with nginx then that might be

00:26:28,570 --> 00:26:32,860
better you can just read the config

00:26:29,799 --> 00:26:34,150
files understand what it does but we

00:26:32,860 --> 00:26:37,840
basically just add another entry to our

00:26:34,150 --> 00:26:40,030
services for the proxy we're going to

00:26:37,840 --> 00:26:42,610
link it to all the services that we want

00:26:40,030 --> 00:26:44,320
and then in each service we're going to

00:26:42,610 --> 00:26:47,559
define just this virtual host

00:26:44,320 --> 00:26:48,909
environment variable that says what what

00:26:47,559 --> 00:26:51,840
request should I forward to this

00:26:48,909 --> 00:26:56,760
container so basically if the

00:26:51,840 --> 00:27:00,610
if the request looks like API teller dev

00:26:56,760 --> 00:27:02,559
then this guy will forward it to it we

00:27:00,610 --> 00:27:07,120
have some port mappings here

00:27:02,559 --> 00:27:09,309
82 84 43 we can do use this to do a self

00:27:07,120 --> 00:27:11,740
emanation if you want to test out that

00:27:09,309 --> 00:27:13,870
your or your HTTP to set up correctly in

00:27:11,740 --> 00:27:16,720
development very easy to just generate

00:27:13,870 --> 00:27:18,700
some deficit if Achatz give it to this

00:27:16,720 --> 00:27:21,490
proxy here and he'll do the SSL

00:27:18,700 --> 00:27:22,809
termination for you fold it on to the

00:27:21,490 --> 00:27:25,600
containers exactly like you probably

00:27:22,809 --> 00:27:27,160
would do in production the only mystery

00:27:25,600 --> 00:27:29,530
line here is maybe this bottom line

00:27:27,160 --> 00:27:32,620
which you have a volume which is the

00:27:29,530 --> 00:27:35,710
socket what's going on here and also

00:27:32,620 --> 00:27:39,820
somehow the it's like from itself to

00:27:35,710 --> 00:27:40,870
itself like what is happening here this

00:27:39,820 --> 00:27:43,870
basically says that we're going to

00:27:40,870 --> 00:27:45,669
connect the docker engine outside the

00:27:43,870 --> 00:27:47,500
container to the doctor socket inside

00:27:45,669 --> 00:27:50,200
the container and that's so that it can

00:27:47,500 --> 00:27:52,210
watch for any changes in in the docker

00:27:50,200 --> 00:27:55,360
containers containers been started and

00:27:52,210 --> 00:27:57,610
stopped and that means that the these

00:27:55,360 --> 00:28:00,220
both these images the high availability

00:27:57,610 --> 00:28:02,110
one and the nginx one we reconfigure

00:28:00,220 --> 00:28:05,169
themselves automatically when services

00:28:02,110 --> 00:28:06,820
start and stop so that's really nice and

00:28:05,169 --> 00:28:13,210
that's works exactly the same in

00:28:06,820 --> 00:28:15,250
production like that as well there were

00:28:13,210 --> 00:28:17,110
two changes that I had to make to my web

00:28:15,250 --> 00:28:20,110
pack config to get this working with

00:28:17,110 --> 00:28:21,280
this which is just worth pointing out so

00:28:20,110 --> 00:28:25,150
that you don't get stuck on the same

00:28:21,280 --> 00:28:26,740
thing the web pack dev server has like

00:28:25,150 --> 00:28:29,020
this leaky like before it would have

00:28:26,740 --> 00:28:31,450
said question mark localhost and then

00:28:29,020 --> 00:28:32,559
the port that you're running on but now

00:28:31,450 --> 00:28:34,540
we can just change that to our

00:28:32,559 --> 00:28:38,049
development domain which for this image

00:28:34,540 --> 00:28:39,730
is going to be Tala dev and the

00:28:38,049 --> 00:28:41,380
development server doesn't bind to all

00:28:39,730 --> 00:28:43,809
interfaces by default so we just need to

00:28:41,380 --> 00:28:48,220
put host 0 0 0 0 so it's going to listen

00:28:43,809 --> 00:28:55,320
on both our Wi-Fi and also the docker

00:28:48,220 --> 00:28:55,320
Network so

00:28:57,400 --> 00:29:02,990
here I have another another dr. Campos

00:29:00,410 --> 00:29:04,610
file and I wanted to just point out a

00:29:02,990 --> 00:29:09,520
couple more features which make it

00:29:04,610 --> 00:29:12,140
really nice for development you can use

00:29:09,520 --> 00:29:14,299
alternative dockerfile and development

00:29:12,140 --> 00:29:16,820
why might you want to do that in the

00:29:14,299 --> 00:29:17,929
case of a front-end app the situation

00:29:16,820 --> 00:29:19,309
for running in development is normally

00:29:17,929 --> 00:29:21,410
very different to running in production

00:29:19,309 --> 00:29:22,490
so say you're running a typical web pack

00:29:21,410 --> 00:29:23,299
build you're going to be running it one

00:29:22,490 --> 00:29:25,010
live reloading

00:29:23,299 --> 00:29:26,840
but in production you're going to

00:29:25,010 --> 00:29:28,460
compile all the files down to static and

00:29:26,840 --> 00:29:30,740
it's going to be served by something

00:29:28,460 --> 00:29:31,880
completely different maybe just nginx or

00:29:30,740 --> 00:29:41,809
you're going to put it on App Engine or

00:29:31,880 --> 00:29:43,520
whatever I I've been thinking about this

00:29:41,809 --> 00:29:45,500
like philosophically like a lot of the

00:29:43,520 --> 00:29:47,360
ideas around docker is that it's the

00:29:45,500 --> 00:29:50,200
same in development is in production

00:29:47,360 --> 00:29:52,429
same all the way through your pipeline

00:29:50,200 --> 00:29:54,770
but I don't think it makes any sense to

00:29:52,429 --> 00:29:56,480
try and like force yourself to run the

00:29:54,770 --> 00:29:58,970
same image I mean like you could do this

00:29:56,480 --> 00:30:00,350
so you could create a node server that

00:29:58,970 --> 00:30:02,210
serves your files statically in

00:30:00,350 --> 00:30:03,740
production and then you have some if

00:30:02,210 --> 00:30:05,450
development thing then run webpack

00:30:03,740 --> 00:30:06,500
config but really you're just you're

00:30:05,450 --> 00:30:07,910
just masking the problem you're not

00:30:06,500 --> 00:30:10,520
really running the same code in

00:30:07,910 --> 00:30:12,890
development in production so I prefer to

00:30:10,520 --> 00:30:16,900
just have these separate configs and

00:30:12,890 --> 00:30:20,270
then I have another entry down here

00:30:16,900 --> 00:30:22,010
which takes my built files and copies

00:30:20,270 --> 00:30:23,000
them into an image running nginx and

00:30:22,010 --> 00:30:24,980
this is the same image that I'm running

00:30:23,000 --> 00:30:26,630
in production this is just the built

00:30:24,980 --> 00:30:28,700
JavaScript files with the hashes and

00:30:26,630 --> 00:30:33,080
minification and everything just so I

00:30:28,700 --> 00:30:35,030
can test out are there any problems if

00:30:33,080 --> 00:30:36,350
you're developing as part of a team and

00:30:35,030 --> 00:30:38,660
you're going to adopt this workflow one

00:30:36,350 --> 00:30:40,760
super nice thing is that instead of

00:30:38,660 --> 00:30:42,980
building the code locally you can just

00:30:40,760 --> 00:30:46,120
pull down an image so how this normally

00:30:42,980 --> 00:30:48,620
works is that you have a CI system

00:30:46,120 --> 00:30:50,510
that's building your dot building images

00:30:48,620 --> 00:30:52,480
and pushing them to a registry you can

00:30:50,510 --> 00:30:54,860
tag these with maybe the branch name

00:30:52,480 --> 00:30:57,860
latest maybe even the commit so that you

00:30:54,860 --> 00:31:00,470
can find a specific one again and that

00:30:57,860 --> 00:31:02,210
means so for example here I can just use

00:31:00,470 --> 00:31:03,320
a pre-built image of the API I don't

00:31:02,210 --> 00:31:05,870
have to have the code checked out for

00:31:03,320 --> 00:31:07,130
the API it's really nice if you have

00:31:05,870 --> 00:31:07,820
people working on different parts of the

00:31:07,130 --> 00:31:09,770
stack

00:31:07,820 --> 00:31:11,390
but then when I come to do a feature

00:31:09,770 --> 00:31:13,940
which affects both the front end and the

00:31:11,390 --> 00:31:17,150
back end I can just change this to point

00:31:13,940 --> 00:31:19,280
to change this image to build maybe just

00:31:17,150 --> 00:31:21,050
built pointer to build dot dot slash

00:31:19,280 --> 00:31:23,000
wherever I've checked out my code and

00:31:21,050 --> 00:31:24,520
then I can make my changes there so it's

00:31:23,000 --> 00:31:27,560
really simple to switch between

00:31:24,520 --> 00:31:29,930
pre-built images which means you don't

00:31:27,560 --> 00:31:32,330
have to have anything installed to get

00:31:29,930 --> 00:31:34,670
them running and then to switch back to

00:31:32,330 --> 00:31:38,450
the regular development with the files

00:31:34,670 --> 00:31:40,340
checked out and then the rest of this is

00:31:38,450 --> 00:31:44,660
exactly the same just the proxy to

00:31:40,340 --> 00:31:58,130
afford to these things so what's going

00:31:44,660 --> 00:32:00,140
to happen I started up so you see we get

00:31:58,130 --> 00:32:01,520
a whole load of output on the start

00:32:00,140 --> 00:32:03,950
that's just all the containers starting

00:32:01,520 --> 00:32:06,700
up together if you have some kind of

00:32:03,950 --> 00:32:08,930
ordering thing you can define one

00:32:06,700 --> 00:32:13,040
container depends on another so they

00:32:08,930 --> 00:32:16,100
come up in the right order you see

00:32:13,040 --> 00:32:24,050
everything has come up now we're Packers

00:32:16,100 --> 00:32:25,640
said it's finished building its gonna

00:32:24,050 --> 00:32:27,290
just try and save this because I left

00:32:25,640 --> 00:32:34,940
the other one running so it's probably

00:32:27,290 --> 00:32:37,670
not actually come up just to clarify

00:32:34,940 --> 00:32:39,830
like the one I showed you first is like

00:32:37,670 --> 00:32:41,660
if I'm working on API I'm normally like

00:32:39,830 --> 00:32:43,040
developing using tests so I don't have

00:32:41,660 --> 00:32:44,300
to run the front end but if you're

00:32:43,040 --> 00:32:45,950
developing on the whole stack then I

00:32:44,300 --> 00:32:47,990
have a different compose file which just

00:32:45,950 --> 00:32:55,300
starts up the whole stack so depending

00:32:47,990 --> 00:32:55,300
on how your workflow goes so

00:33:01,980 --> 00:33:07,810
so it's not a local host anymore of

00:33:04,180 --> 00:33:13,990
course should be able to connect to it

00:33:07,810 --> 00:33:16,690
on API dr. dev which you can we should

00:33:13,990 --> 00:33:19,120
have another service that's running web

00:33:16,690 --> 00:33:21,610
pack dev server and that's service some

00:33:19,120 --> 00:33:26,620
HTML and then if I show you that staging

00:33:21,610 --> 00:33:29,080
one you can see that here this server

00:33:26,620 --> 00:33:45,400
line says nginx so that's been served by

00:33:29,080 --> 00:33:47,310
nginx and this is what this is what the

00:33:45,400 --> 00:33:49,660
site looks like you can search for

00:33:47,310 --> 00:33:51,190
Icelandic words it will show you how

00:33:49,660 --> 00:34:02,440
these words change according to the

00:33:51,190 --> 00:34:06,370
grammar you can can access the API not

00:34:02,440 --> 00:34:07,660
with HTTPS that will return the JSON and

00:34:06,370 --> 00:34:10,840
you see all of these have got nice names

00:34:07,660 --> 00:34:16,210
oh sorry that's the real service let's

00:34:10,840 --> 00:34:16,960
go to the development everything has a

00:34:16,210 --> 00:34:18,360
nice name

00:34:16,960 --> 00:34:24,400
everything is linked linked together

00:34:18,360 --> 00:34:26,320
this guy's using an image to build and

00:34:24,400 --> 00:34:28,240
histories Icelandic for horse so you

00:34:26,320 --> 00:34:36,130
learned an Icelandic word as well there

00:34:28,240 --> 00:34:38,790
we go if I could find my slides again I

00:34:36,130 --> 00:34:41,050
would say that's the end of my talk the

00:34:38,790 --> 00:34:42,610
slides are on slides comm slash david

00:34:41,050 --> 00:34:44,080
glenn if you want to have a look at

00:34:42,610 --> 00:34:46,450
those config files have a go at setting

00:34:44,080 --> 00:34:49,050
up yourself the code for this project is

00:34:46,450 --> 00:34:51,610
on github.com slash Taylor Eastern screw

00:34:49,050 --> 00:34:54,610
maybe just goes to the slides first and

00:34:51,610 --> 00:34:56,320
then you can find this link but if you

00:34:54,610 --> 00:34:58,180
if you're using docker in development

00:34:56,320 --> 00:34:59,710
and you have some improvements to this

00:34:58,180 --> 00:35:03,780
workflow I'd love to hear about them so

00:34:59,710 --> 00:35:05,840
come talk to me thanks very much

00:35:03,780 --> 00:35:05,840

YouTube URL: https://www.youtube.com/watch?v=zcSbOl8DYXM


