Title: Heiko Behrens: JavaScript on tiny, wearable hardware - JSConf Iceland 2016
Publication date: 2016-09-20
Playlist: JSConf Iceland 2016
Description: 
	The Apple Macintosh was released 32 years ago and had 128KB of RAM. We managed to let you drawing to the screen using Canvas APIs, using npm packages, and much more by writing fully ECMAScript 5.1 compliant code with half of that memory. In this talk, Iâ€™d like to present our learnings from porting the JerryScript engine to the Pebble smartwatch to empower JS lovers to develop for wearable consumer electronics. From engine internals over embedded hacks to JavaScript inception where we cross-compile the JS engine itself to JS using Emscripten to produce JS bytecode inside any JS environment: Expect some craziness.
Captions: 
	00:00:14,190 --> 00:00:20,470
thank you for Sarah good morning guys

00:00:18,150 --> 00:00:22,930
I'm happy that so many of you found

00:00:20,470 --> 00:00:26,380
their way here after last night's party

00:00:22,930 --> 00:00:28,689
I am heiko and I'm actually with a

00:00:26,380 --> 00:00:31,390
company called pebble we do we are

00:00:28,689 --> 00:00:34,269
mostly known yay rocket we are mostly

00:00:31,390 --> 00:00:36,850
known for smartwatches so self you there

00:00:34,269 --> 00:00:39,519
who of you knows what what peddlers and

00:00:36,850 --> 00:00:42,820
pedal does that's that's basically

00:00:39,519 --> 00:00:46,180
everybody who does not well they are few

00:00:42,820 --> 00:00:47,589
okay I have a few slides for you too so

00:00:46,180 --> 00:00:49,900
the thing you're looking at is basically

00:00:47,589 --> 00:00:52,449
the PCP or the main board of ammo or

00:00:49,900 --> 00:00:54,909
pebbles this is a disassembled version

00:00:52,449 --> 00:00:57,760
of this pebble here and when I speak

00:00:54,909 --> 00:01:00,040
about um variables I want to share the

00:00:57,760 --> 00:01:02,470
learnings we gathered when we may

00:01:00,040 --> 00:01:04,239
javascript running directly on our

00:01:02,470 --> 00:01:06,010
limited hardware and I want to walk you

00:01:04,239 --> 00:01:08,820
through some of those limitations and

00:01:06,010 --> 00:01:12,369
then again what we learned from doing so

00:01:08,820 --> 00:01:14,920
so again for those three or four people

00:01:12,369 --> 00:01:17,530
who don't know pebble it is basically as

00:01:14,920 --> 00:01:19,810
much what SmartWatch I like to think of

00:01:17,530 --> 00:01:21,700
us as the first mover those who first

00:01:19,810 --> 00:01:23,740
came out with a SmartWatch long before

00:01:21,700 --> 00:01:26,260
Android wear or Apple watch and in fact

00:01:23,740 --> 00:01:29,020
all watches work with both iOS and

00:01:26,260 --> 00:01:30,460
Android and in officially also our

00:01:29,020 --> 00:01:32,920
thanks to our community on other

00:01:30,460 --> 00:01:35,530
platforms we do obviously notifications

00:01:32,920 --> 00:01:37,900
but recently I'm we emphasize on health

00:01:35,530 --> 00:01:39,550
to where our latest model has a built-in

00:01:37,900 --> 00:01:41,170
hardware monitor with your step tracking

00:01:39,550 --> 00:01:42,580
sleep tracking smart alarms that wake

00:01:41,170 --> 00:01:45,970
you up on your own REM phase and so on

00:01:42,580 --> 00:01:48,370
and so forth we are best known for our

00:01:45,970 --> 00:01:50,290
long battery life for last four week

00:01:48,370 --> 00:01:51,790
instead of a few hours and it's an

00:01:50,290 --> 00:01:53,560
always-on display which is quite neat

00:01:51,790 --> 00:01:56,140
but the reason why I'm here is because

00:01:53,560 --> 00:02:00,250
it's hackable you can actually program

00:01:56,140 --> 00:02:02,770
on it and we emphasized on a very open

00:02:00,250 --> 00:02:05,140
API and open app approach from day one

00:02:02,770 --> 00:02:09,220
and that led to a plethora of different

00:02:05,140 --> 00:02:12,099
apps so there are hobbyists such as like

00:02:09,220 --> 00:02:14,049
sailors or servers who benefit from

00:02:12,099 --> 00:02:17,409
pebble being waterproof but they're also

00:02:14,049 --> 00:02:19,090
big brands such as uber or nest who give

00:02:17,409 --> 00:02:21,430
access easy access right on your wrist

00:02:19,090 --> 00:02:23,020
to their services so with rubra for

00:02:21,430 --> 00:02:26,460
example is really just a button press

00:02:23,020 --> 00:02:29,380
and that taxi comes and picks you up and

00:02:26,460 --> 00:02:31,050
there's also another category obviously

00:02:29,380 --> 00:02:33,910
on a watch and that is watched races

00:02:31,050 --> 00:02:36,370
there are tens of thousands watch faces

00:02:33,910 --> 00:02:38,770
by now I'm developed by our community

00:02:36,370 --> 00:02:41,170
and they are any media they are colorful

00:02:38,770 --> 00:02:44,050
they are very delightful and it's great

00:02:41,170 --> 00:02:45,880
to see that people always say that our

00:02:44,050 --> 00:02:48,400
platform is a bit limited but it just

00:02:45,880 --> 00:02:51,220
happened two weeks ago that a demo

00:02:48,400 --> 00:02:53,170
classic a pc demo classic was ported to

00:02:51,220 --> 00:02:55,480
pebble and presented at one of those

00:02:53,170 --> 00:02:57,280
demo parties in germany and that kicked

00:02:55,480 --> 00:02:58,960
off a conversation our community and

00:02:57,280 --> 00:03:01,240
there's now a slight channel discussing

00:02:58,960 --> 00:03:03,640
how we could leverage that and create a

00:03:01,240 --> 00:03:06,610
demo scene just within papal let's all

00:03:03,640 --> 00:03:09,160
great and amazing but traditionally on

00:03:06,610 --> 00:03:11,530
embedded devices and pebble there's no

00:03:09,160 --> 00:03:14,770
exception there you are forced to write

00:03:11,530 --> 00:03:16,350
code C or C++ and sometimes and you look

00:03:14,770 --> 00:03:18,970
at that damn or even in assembly and

00:03:16,350 --> 00:03:21,460
that is mostly because of that Audra

00:03:18,970 --> 00:03:23,710
being so limited space wise and also

00:03:21,460 --> 00:03:26,290
performance wise which is a bummer

00:03:23,710 --> 00:03:29,530
because see sometimes looks like this

00:03:26,290 --> 00:03:32,440
and that is great see actually I looked

00:03:29,530 --> 00:03:34,720
it up in on a blog post and he walks us

00:03:32,440 --> 00:03:36,820
through this piece of code that does

00:03:34,720 --> 00:03:42,459
what exactly who can tell me what it

00:03:36,820 --> 00:03:45,040
does shrink incarnation yeah that's true

00:03:42,459 --> 00:03:49,360
i mean the function name sure obviously

00:03:45,040 --> 00:03:51,250
states that right it takes basically an

00:03:49,360 --> 00:03:53,080
array of strings and concatenate that

00:03:51,250 --> 00:03:54,820
into a buffer see has no concept of a

00:03:53,080 --> 00:03:56,770
string and you have to allocate the

00:03:54,820 --> 00:03:59,860
buffer before and tell it how long the

00:03:56,770 --> 00:04:02,200
buffer is the counterpart in javascript

00:03:59,860 --> 00:04:03,790
would look like that maybe like you have

00:04:02,200 --> 00:04:05,650
an array of strings and you join them

00:04:03,790 --> 00:04:07,840
together i'm pretty sure there are other

00:04:05,650 --> 00:04:12,130
ways to do it but this is pretty neat

00:04:07,840 --> 00:04:14,320
isn't it now what stops us from doing

00:04:12,130 --> 00:04:16,600
that there are plenty of other devices

00:04:14,320 --> 00:04:19,870
that do I'm JavaScript on there and they

00:04:16,600 --> 00:04:21,760
are all embedded I did a quick research

00:04:19,870 --> 00:04:23,680
to find some of those and this is the

00:04:21,760 --> 00:04:25,390
list that came up with I'm pretty sure I

00:04:23,680 --> 00:04:26,860
missed some and my apologies for this

00:04:25,390 --> 00:04:29,830
but I just want to put things in

00:04:26,860 --> 00:04:32,050
perspective here and to do that I picked

00:04:29,830 --> 00:04:33,310
some arbitrary metric here the amount of

00:04:32,050 --> 00:04:35,890
available realm of those different

00:04:33,310 --> 00:04:36,540
devices and if you look at int'l addison

00:04:35,890 --> 00:04:39,270
or the rest

00:04:36,540 --> 00:04:42,000
hi they have one gigabyte of RAM which

00:04:39,270 --> 00:04:43,440
is basically not a limited and better

00:04:42,000 --> 00:04:46,590
device anymore that's a real computer

00:04:43,440 --> 00:04:49,260
and then there's the omega 2 and there's

00:04:46,590 --> 00:04:52,110
the tassel and they are more within the

00:04:49,260 --> 00:04:54,000
range of 64 megabytes and if you think

00:04:52,110 --> 00:04:55,560
about it booting a Linux for example and

00:04:54,000 --> 00:04:58,260
that environment is already other tricky

00:04:55,560 --> 00:05:01,920
but it's certainly doable and then there

00:04:58,260 --> 00:05:04,320
are others s Perino like I'm by Gordon

00:05:01,920 --> 00:05:06,480
Williams for example he kick started on

00:05:04,320 --> 00:05:09,000
this grade embedded device that does

00:05:06,480 --> 00:05:11,100
nothing but runs java script and how

00:05:09,000 --> 00:05:13,050
much room do they have why don't they

00:05:11,100 --> 00:05:15,660
have any well the problem is scale here

00:05:13,050 --> 00:05:17,340
and I try another attempt here gigabyte

00:05:15,660 --> 00:05:20,130
is far too large and I'm scaling that

00:05:17,340 --> 00:05:21,860
down to 64 megabytes and if i zoom in

00:05:20,130 --> 00:05:26,250
and zoom further and zoom further I

00:05:21,860 --> 00:05:30,270
finally find asbury no pico with 96 k

00:05:26,250 --> 00:05:33,540
and pebble offering only 64 kilobytes of

00:05:30,270 --> 00:05:35,870
RAM to applications 64 kilobytes

00:05:33,540 --> 00:05:40,260
compared to those 64 megabytes that's a

00:05:35,870 --> 00:05:43,020
fraction of 1024 of that other amount

00:05:40,260 --> 00:05:44,550
like that's tiny and I understand that

00:05:43,020 --> 00:05:48,060
this is hard to understand so I will try

00:05:44,550 --> 00:05:50,040
once more this is the J's compiler and

00:05:48,060 --> 00:05:53,700
website and you see that I'm little icon

00:05:50,040 --> 00:05:57,200
at the top left that's an SVG that file

00:05:53,700 --> 00:05:59,940
is 25k large as we G is known to be very

00:05:57,200 --> 00:06:02,070
concise in this particular case because

00:05:59,940 --> 00:06:03,750
it is actually I'm a bit curved maybe it

00:06:02,070 --> 00:06:06,540
is not optimal for SVG but it's pretty

00:06:03,750 --> 00:06:08,610
small the pixel data on my laptop on

00:06:06,540 --> 00:06:11,670
this particular screen shot though takes

00:06:08,610 --> 00:06:14,550
already up more space than the 64 K

00:06:11,670 --> 00:06:17,550
available on pebble for applications

00:06:14,550 --> 00:06:19,260
just to prevention perspective so it's

00:06:17,550 --> 00:06:20,790
not only it's in fact Lee the code is

00:06:19,260 --> 00:06:21,870
not only JavaScript but actual data and

00:06:20,790 --> 00:06:25,470
all of that needs to live on that

00:06:21,870 --> 00:06:28,260
computer things are not that bad though

00:06:25,470 --> 00:06:29,700
because people already build great

00:06:28,260 --> 00:06:33,900
things we know that you can accomplish

00:06:29,700 --> 00:06:35,400
something so well let's do it so there

00:06:33,900 --> 00:06:37,860
plenty of JavaScript engines right we

00:06:35,400 --> 00:06:40,080
take one of those I again yesterday run

00:06:37,860 --> 00:06:42,720
a quick test and I'm loaded google com

00:06:40,080 --> 00:06:46,020
on my Chrome browser and it took 150 5

00:06:42,720 --> 00:06:48,060
megabytes or I looked at the engine

00:06:46,020 --> 00:06:51,210
itself which is yet another number

00:06:48,060 --> 00:06:53,160
if even if we had a JavaScript engine

00:06:51,210 --> 00:06:57,060
it's somewhat would take up code space

00:06:53,160 --> 00:06:58,950
on our flesh like on our firmware and we

00:06:57,060 --> 00:07:01,139
before we started this endeavor we

00:06:58,950 --> 00:07:04,290
figured that we would have 200k worth of

00:07:01,139 --> 00:07:06,180
code space flash code space something

00:07:04,290 --> 00:07:08,550
you would normally not even think about

00:07:06,180 --> 00:07:10,230
when you do right development and and

00:07:08,550 --> 00:07:14,060
phantom jas which is basically a

00:07:10,230 --> 00:07:16,710
headless browser based on javascriptcore

00:07:14,060 --> 00:07:18,630
already takes out 32 megabytes so this

00:07:16,710 --> 00:07:21,120
is way out of reach and when we

00:07:18,630 --> 00:07:23,729
presented internally in the sand pebble

00:07:21,120 --> 00:07:26,040
the idea to run an interpreter and even

00:07:23,729 --> 00:07:28,770
JavaScript and I'll pebble watches they

00:07:26,040 --> 00:07:31,919
thought we were crazy like this is not

00:07:28,770 --> 00:07:34,380
possible it will not run at all and we

00:07:31,919 --> 00:07:38,580
still said we want that we want that so

00:07:34,380 --> 00:07:42,090
deeply because the workflow in C is

00:07:38,580 --> 00:07:44,490
outdated it takes like 20 seconds for

00:07:42,090 --> 00:07:46,590
turnaround when you do like pizza not

00:07:44,490 --> 00:07:48,030
some things you need to compile and need

00:07:46,590 --> 00:07:49,470
to deploy and then you look at it and

00:07:48,030 --> 00:07:51,630
you already forgot how the previous

00:07:49,470 --> 00:07:53,700
version looked like I want to have fresh

00:07:51,630 --> 00:07:56,580
tooling as it's common in the JavaScript

00:07:53,700 --> 00:07:58,710
world I want to have the ability to to

00:07:56,580 --> 00:08:00,479
benefit from you the community all these

00:07:58,710 --> 00:08:02,580
NPM packages all the knowledge that's

00:08:00,479 --> 00:08:04,110
there I want to go to second flow and

00:08:02,580 --> 00:08:08,880
quickly copy and paste something and run

00:08:04,110 --> 00:08:11,100
it all now watch well luckily there are

00:08:08,880 --> 00:08:13,680
other JavaScript engines out there meant

00:08:11,100 --> 00:08:16,919
for embedded devices I think the most

00:08:13,680 --> 00:08:19,200
prominent one is called duck tape that

00:08:16,919 --> 00:08:20,639
tape is taking a few hundred K of code

00:08:19,200 --> 00:08:23,669
space you could probably squeeze it down

00:08:20,639 --> 00:08:25,919
then there's obviously as Perino Jerry

00:08:23,669 --> 00:08:29,039
script I'm very interesting project

00:08:25,919 --> 00:08:31,860
kinoma looks also very promising and

00:08:29,039 --> 00:08:34,289
then there is I like similar to any

00:08:31,860 --> 00:08:36,270
other JavaScript library out there every

00:08:34,289 --> 00:08:39,360
week pops up another JavaScript engine

00:08:36,270 --> 00:08:41,760
basically so here are if you the problem

00:08:39,360 --> 00:08:43,830
with those tiny i would say hobby

00:08:41,760 --> 00:08:46,350
attempts is that there are oftentimes

00:08:43,830 --> 00:08:50,160
not standard compliant or like by far

00:08:46,350 --> 00:08:52,980
future complete so in the end we decided

00:08:50,160 --> 00:08:54,810
to go with javascript and when Gordon

00:08:52,980 --> 00:08:56,610
Williams from spree no actually asked me

00:08:54,810 --> 00:08:59,280
I came up with that list here and it's

00:08:56,610 --> 00:09:00,380
basically first and foremost Jerry

00:08:59,280 --> 00:09:01,940
script

00:09:00,380 --> 00:09:03,800
the Melbourne source obviously but this

00:09:01,940 --> 00:09:07,370
one here has a great team behind it

00:09:03,800 --> 00:09:10,610
full-time people working on this for

00:09:07,370 --> 00:09:12,740
over a year now which is amazing because

00:09:10,610 --> 00:09:13,820
we have to stand on the shoulders of

00:09:12,740 --> 00:09:16,370
giants here we can I do that all

00:09:13,820 --> 00:09:18,590
ourselves but it's also standard

00:09:16,370 --> 00:09:20,420
compliance or whatever you do whatever

00:09:18,590 --> 00:09:22,490
you do in valid JavaScript will actually

00:09:20,420 --> 00:09:23,840
run on the watch and that is critical

00:09:22,490 --> 00:09:26,540
because otherwise it's yet another

00:09:23,840 --> 00:09:28,810
script language that is Travis would

00:09:26,540 --> 00:09:31,220
look alike but not the real thing and

00:09:28,810 --> 00:09:34,220
overall it's just the quality of the

00:09:31,220 --> 00:09:37,130
project communication architecture all

00:09:34,220 --> 00:09:42,320
of it + partners that contribute to it

00:09:37,130 --> 00:09:44,240
as we do so that's great and I think it

00:09:42,320 --> 00:09:46,460
took us so we first did in a screen of

00:09:44,240 --> 00:09:48,710
port and that ran on the watch and then

00:09:46,460 --> 00:09:51,970
we did Jerry script again and it was

00:09:48,710 --> 00:09:54,350
early May when we finally shipped

00:09:51,970 --> 00:09:55,730
JavaScript on the watch so those people

00:09:54,350 --> 00:09:57,650
in the audience you actually were a

00:09:55,730 --> 00:09:59,720
pebble if you go to the standard watch

00:09:57,650 --> 00:10:01,790
face take talk the one with the two

00:09:59,720 --> 00:10:04,460
hands that is already running JavaScript

00:10:01,790 --> 00:10:06,320
without you knowing it we ship the

00:10:04,460 --> 00:10:08,270
JavaScript engine we re implemented our

00:10:06,320 --> 00:10:10,040
standard watch face we have integration

00:10:08,270 --> 00:10:11,870
tests to make sure that it's pixel

00:10:10,040 --> 00:10:14,300
perfectly the same and it doesn't

00:10:11,870 --> 00:10:17,840
consume more battery as the sea

00:10:14,300 --> 00:10:20,810
counterpart did and we shipped it now

00:10:17,840 --> 00:10:22,540
that was easy the hard part and the

00:10:20,810 --> 00:10:25,490
stuff I want to talk about is our

00:10:22,540 --> 00:10:27,260
learnings when we finally made that

00:10:25,490 --> 00:10:29,720
available to developers which is also

00:10:27,260 --> 00:10:31,910
happen happening right now actually and

00:10:29,720 --> 00:10:34,760
the three things i want to focus on our

00:10:31,910 --> 00:10:36,290
api's memory constraints sorry bear with

00:10:34,760 --> 00:10:40,220
me but memory is really critical in our

00:10:36,290 --> 00:10:41,780
platform and then launch time something

00:10:40,220 --> 00:10:44,840
that isn't really obvious if you think

00:10:41,780 --> 00:10:48,740
of it about it for the first time so

00:10:44,840 --> 00:10:50,690
api's i was talking about javascript

00:10:48,740 --> 00:10:54,470
what javascript by itself doesn't do

00:10:50,690 --> 00:10:56,900
much again here's our board there's the

00:10:54,470 --> 00:10:59,180
CPU as the MCU which combines different

00:10:56,900 --> 00:11:02,180
components in our case the CPU and RAM

00:10:59,180 --> 00:11:03,440
and JavaScript what can you actually do

00:11:02,180 --> 00:11:05,330
with it I mean in the standard that

00:11:03,440 --> 00:11:08,030
state there are regular expressions

00:11:05,330 --> 00:11:09,410
different things in the standard but you

00:11:08,030 --> 00:11:10,940
cannot even log anything because

00:11:09,410 --> 00:11:13,640
console.log is not part of the standard

00:11:10,940 --> 00:11:16,100
so just having JavaScript by itself

00:11:13,640 --> 00:11:18,200
is actually bit useless we want to give

00:11:16,100 --> 00:11:20,810
access to everything our platform

00:11:18,200 --> 00:11:23,960
delivers and that is way more so here is

00:11:20,810 --> 00:11:26,600
a teardown of the actual watch this is

00:11:23,960 --> 00:11:28,820
not too different boards at the bottom

00:11:26,600 --> 00:11:32,900
you see the flip side of the same bored

00:11:28,820 --> 00:11:34,730
so it's mirrored and the MCU is really

00:11:32,900 --> 00:11:38,150
just that's JavaScript that's grounded

00:11:34,730 --> 00:11:39,800
but there is also flash storage that is

00:11:38,150 --> 00:11:41,330
where we store the program and store

00:11:39,800 --> 00:11:43,070
your bid maps and other resources like

00:11:41,330 --> 00:11:44,840
custom fonts that is obviously the

00:11:43,070 --> 00:11:47,240
ePaper display you want to show

00:11:44,840 --> 00:11:51,350
something on the screen and battery so

00:11:47,240 --> 00:11:53,240
that if you happen to be a taxi service

00:11:51,350 --> 00:11:54,800
you could check the battery level and if

00:11:53,240 --> 00:11:57,350
it's critical you could raise the fare

00:11:54,800 --> 00:11:59,240
like there are real use cases for access

00:11:57,350 --> 00:12:00,830
to the battery and then there is also

00:11:59,240 --> 00:12:02,480
all the sensors and the Bluetooth radio

00:12:00,830 --> 00:12:04,280
you want to talk to your phone you want

00:12:02,480 --> 00:12:06,680
to talk to the Internet how would we

00:12:04,280 --> 00:12:09,290
possibly make that accessible the

00:12:06,680 --> 00:12:13,550
problem with AP is on our end is unlike

00:12:09,290 --> 00:12:15,070
a library and API developer who does the

00:12:13,550 --> 00:12:18,230
next library and publish it as

00:12:15,070 --> 00:12:21,620
publishers it on NPM is that we cannot

00:12:18,230 --> 00:12:23,240
really do semantic versioning raise the

00:12:21,620 --> 00:12:25,240
major version number and break

00:12:23,240 --> 00:12:29,450
everything that was ever there because

00:12:25,240 --> 00:12:31,670
developers are using our SDK submit this

00:12:29,450 --> 00:12:35,390
to the App Store and consumers run

00:12:31,670 --> 00:12:37,250
whatever version of the firmware there

00:12:35,390 --> 00:12:39,400
is actually the problem that once we

00:12:37,250 --> 00:12:43,430
commit to an API we more or less have to

00:12:39,400 --> 00:12:45,800
support it forever and that is really a

00:12:43,430 --> 00:12:47,120
delicate problem as an API designer

00:12:45,800 --> 00:12:50,750
because we don't have the luxury to

00:12:47,120 --> 00:12:53,120
write api's here we are much more in the

00:12:50,750 --> 00:12:55,190
in the shoes of a browser vendor here

00:12:53,120 --> 00:12:58,400
and that's actually the key to the story

00:12:55,190 --> 00:13:00,350
there are standardized a B is for all of

00:12:58,400 --> 00:13:02,900
these problems and you know them they

00:13:00,350 --> 00:13:05,780
are called web AP is so although we are

00:13:02,900 --> 00:13:09,320
running on this tiny embeddable embedded

00:13:05,780 --> 00:13:12,220
hardware we chose to look at the at the

00:13:09,320 --> 00:13:14,570
browsers and learn from them and

00:13:12,220 --> 00:13:18,590
basically re-implemented what they did

00:13:14,570 --> 00:13:21,350
so for for the display for example we

00:13:18,590 --> 00:13:23,750
chose canvas and it's ugly as hell and

00:13:21,350 --> 00:13:26,209
it's really inconvenient to use but it's

00:13:23,750 --> 00:13:28,910
a standard and that means others know

00:13:26,209 --> 00:13:31,069
how to use it they know the clip falls

00:13:28,910 --> 00:13:32,720
and there are already solutions to the

00:13:31,069 --> 00:13:34,459
problems that come with it there's a

00:13:32,720 --> 00:13:36,410
contract we can commit to and we know

00:13:34,459 --> 00:13:39,559
that they will not change well at least

00:13:36,410 --> 00:13:41,360
not that frequently and similarly for

00:13:39,559 --> 00:13:43,429
communication between the phone and the

00:13:41,360 --> 00:13:45,379
watch our way our dead greater the

00:13:43,429 --> 00:13:47,089
internet we chose a post message as you

00:13:45,379 --> 00:13:50,089
would talk to another window or a

00:13:47,089 --> 00:13:54,319
background worker and then use an event

00:13:50,089 --> 00:13:57,050
system for four different occurrences in

00:13:54,319 --> 00:13:59,660
the system so that is all great and it

00:13:57,050 --> 00:14:02,300
lab together with NPM to a very concise

00:13:59,660 --> 00:14:06,800
way to writing applications so this is a

00:14:02,300 --> 00:14:09,889
very minimal way of writing apps you can

00:14:06,800 --> 00:14:11,360
actually use NPM packages and with that

00:14:09,889 --> 00:14:12,619
we hope that people write Poli filled

00:14:11,360 --> 00:14:14,119
and and create other convenience

00:14:12,619 --> 00:14:16,670
functions but this is also the way to

00:14:14,119 --> 00:14:20,149
get access to the rude object of our API

00:14:16,670 --> 00:14:23,660
we called it rocky as in like stones and

00:14:20,149 --> 00:14:25,879
pebble you know and that rocky global

00:14:23,660 --> 00:14:28,309
allows you to register like to listen to

00:14:25,879 --> 00:14:30,319
events such as when it has to draw

00:14:28,309 --> 00:14:32,290
itself the system could ask for it to

00:14:30,319 --> 00:14:37,189
draw at any time because of different

00:14:32,290 --> 00:14:39,379
like events in the system and the web

00:14:37,189 --> 00:14:41,480
api is being so flexible allow us to

00:14:39,379 --> 00:14:43,279
also add a new proprietary events such

00:14:41,480 --> 00:14:44,779
as a minute change when you write a

00:14:43,279 --> 00:14:48,769
watch face for example it's not really

00:14:44,779 --> 00:14:50,839
feasible to redraw every second because

00:14:48,769 --> 00:14:52,759
that drains the battery if you really

00:14:50,839 --> 00:14:55,519
only want to update once a minute it's

00:14:52,759 --> 00:14:57,350
also hard to do the date math with just

00:14:55,519 --> 00:14:59,269
the building data object you could

00:14:57,350 --> 00:15:00,799
totally do that you could query for the

00:14:59,269 --> 00:15:03,230
current time and then the right set

00:15:00,799 --> 00:15:05,509
timeout and then a schedule at redraw

00:15:03,230 --> 00:15:06,769
but we actually provide a convenient

00:15:05,509 --> 00:15:09,589
events for this like minute change

00:15:06,769 --> 00:15:10,999
second change so let you know on the

00:15:09,589 --> 00:15:15,049
edge when the minute changes that you

00:15:10,999 --> 00:15:17,209
can redraw so that's it pretty neat but

00:15:15,049 --> 00:15:20,119
with those standard api's we also

00:15:17,209 --> 00:15:22,759
created some expectations so canvas is

00:15:20,119 --> 00:15:24,769
pretty powerful and some of its

00:15:22,759 --> 00:15:28,160
implementations for example clipping to

00:15:24,769 --> 00:15:31,100
a path is difficult to implement an all

00:15:28,160 --> 00:15:33,860
platform a naive and very um performant

00:15:31,100 --> 00:15:36,290
efficient solution would be to store a

00:15:33,860 --> 00:15:37,370
binary mask actually like an alpha

00:15:36,290 --> 00:15:39,800
channel

00:15:37,370 --> 00:15:42,410
to tear to measure what is actually

00:15:39,800 --> 00:15:44,779
masked out but such an alpha channel is

00:15:42,410 --> 00:15:47,839
already on our platform like 6k worth of

00:15:44,779 --> 00:15:49,220
data and we are ready short ram and then

00:15:47,839 --> 00:15:50,720
other things as i mentioned before and

00:15:49,220 --> 00:15:52,940
cameras are not really convenient

00:15:50,720 --> 00:15:55,430
especially if you come from our capi

00:15:52,940 --> 00:15:58,130
where we tailored towards the need of a

00:15:55,430 --> 00:16:00,170
watch face developer yes angles are

00:15:58,130 --> 00:16:02,570
rotated clockwise but they start at 3pm

00:16:00,170 --> 00:16:04,370
which is very inconvenient if you want

00:16:02,570 --> 00:16:07,070
to do hands and they all start at twelve

00:16:04,370 --> 00:16:08,990
o'clock and then also drawing a simple

00:16:07,070 --> 00:16:11,029
line means yeah you put in a path you

00:16:08,990 --> 00:16:12,710
move to something you line to something

00:16:11,029 --> 00:16:16,730
and then you stroke instead of just a

00:16:12,710 --> 00:16:19,910
plain line call so yeah that is odd but

00:16:16,730 --> 00:16:21,890
it's just the standard what we figured

00:16:19,910 --> 00:16:25,550
is that and we talked to the community

00:16:21,890 --> 00:16:28,100
on that we cannot ship all of this at

00:16:25,550 --> 00:16:30,620
once what we did instead is we what

00:16:28,100 --> 00:16:33,190
we have we know I'm what the target is

00:16:30,620 --> 00:16:37,450
because it's just the web AP eyes and

00:16:33,190 --> 00:16:40,220
just like fail with exceptions when I

00:16:37,450 --> 00:16:43,040
function is undefined that allows

00:16:40,220 --> 00:16:45,350
developers to create polyfills and it's

00:16:43,040 --> 00:16:47,870
actually better to have something now

00:16:45,350 --> 00:16:49,910
than to wait another half a year

00:16:47,870 --> 00:16:51,410
something until we finally did this so

00:16:49,910 --> 00:16:54,410
I'm also interested in your feedback on

00:16:51,410 --> 00:16:56,150
this so yeah with that we basically

00:16:54,410 --> 00:17:00,110
shipped api's let's talk about memory

00:16:56,150 --> 00:17:01,640
constraints so there are like when you

00:17:00,110 --> 00:17:04,490
talk about size and JavaScript you

00:17:01,640 --> 00:17:06,980
oftentimes think about transfer like how

00:17:04,490 --> 00:17:08,720
much how many bytes you need to transfer

00:17:06,980 --> 00:17:11,059
from the web server to my browser in

00:17:08,720 --> 00:17:13,309
order to deliver content how can I get

00:17:11,059 --> 00:17:16,640
the first flight to the browser earliest

00:17:13,309 --> 00:17:18,800
how can i leverage caches but this is

00:17:16,640 --> 00:17:22,220
actually pretty meaningless so this one

00:17:18,800 --> 00:17:24,290
is a demo it's a not sure I've seen this

00:17:22,220 --> 00:17:27,199
but there's a competition very much like

00:17:24,290 --> 00:17:28,970
the demo scene in general it's basically

00:17:27,199 --> 00:17:33,140
how much cool effects can you squeeze

00:17:28,970 --> 00:17:34,850
into 1k worth of JavaScript so let me

00:17:33,140 --> 00:17:40,520
again I'm not sure why it's done right

00:17:34,850 --> 00:17:43,780
here actually so yeah that is a 1k of

00:17:40,520 --> 00:17:49,490
JavaScript the JavaScript looks like rap

00:17:43,780 --> 00:17:50,810
it's it's concise yeah it's only 1k for

00:17:49,490 --> 00:17:52,550
those of you who cannot read gibber ish

00:17:50,810 --> 00:17:55,100
what's actually happening here is that

00:17:52,550 --> 00:17:57,920
there is a compressed string the actual

00:17:55,100 --> 00:18:00,320
payload is almost 2k worth of JavaScript

00:17:57,920 --> 00:18:03,140
source code and then this is the loop at

00:18:00,320 --> 00:18:05,180
the end we uncompress it into a variable

00:18:03,140 --> 00:18:07,580
and then we'ii valid so basically

00:18:05,180 --> 00:18:09,470
instead of running one carriage of

00:18:07,580 --> 00:18:12,830
JavaScript we are running almost 2k of

00:18:09,470 --> 00:18:14,450
JavaScript so one could think that we

00:18:12,830 --> 00:18:17,000
just expanded it well one hundred

00:18:14,450 --> 00:18:19,460
percent and at runtime we need 2k worth

00:18:17,000 --> 00:18:21,650
of RAM right well I took the numbers

00:18:19,460 --> 00:18:25,580
again on Chrome and it's more like half

00:18:21,650 --> 00:18:27,350
a gigabyte roughly and of course this is

00:18:25,580 --> 00:18:29,150
like comparing apples with oranges here

00:18:27,350 --> 00:18:31,760
because the browser itself takes up RAM

00:18:29,150 --> 00:18:33,500
and the GPU process the rendering

00:18:31,760 --> 00:18:34,850
pipeline here has a lot of overhead for

00:18:33,500 --> 00:18:36,860
this particular use case and we could

00:18:34,850 --> 00:18:38,020
make that way more concise but this is

00:18:36,860 --> 00:18:41,690
really just to put things in perspective

00:18:38,020 --> 00:18:43,940
code size 1k has nothing to do with

00:18:41,690 --> 00:18:45,650
runtime requirements how much RAM you

00:18:43,940 --> 00:18:49,880
actually have and I would say that you

00:18:45,650 --> 00:18:51,950
guys have no idea about ram or could you

00:18:49,880 --> 00:18:56,750
tell me how much RAM this object

00:18:51,950 --> 00:18:59,300
actually takes like you javascript has

00:18:56,750 --> 00:19:01,730
no concept of an out of memory situation

00:18:59,300 --> 00:19:03,170
you can always just create a string you

00:19:01,730 --> 00:19:05,210
can always just create an object but

00:19:03,170 --> 00:19:08,900
what if you run out of RAM what this

00:19:05,210 --> 00:19:10,670
does not happen in your environment so

00:19:08,900 --> 00:19:12,980
here for example you need actually

00:19:10,670 --> 00:19:15,530
character space to store the property

00:19:12,980 --> 00:19:17,750
name you need space to store the

00:19:15,530 --> 00:19:20,930
original string you need more space to

00:19:17,750 --> 00:19:24,410
store the concatenated string to store 0

00:19:20,930 --> 00:19:28,010
which is living on the context how much

00:19:24,410 --> 00:19:30,530
is a string worth is it really stored as

00:19:28,010 --> 00:19:33,290
utf-16 do you know what says ooh ay tis

00:19:30,530 --> 00:19:35,690
and their way to encode um emojis

00:19:33,290 --> 00:19:37,110
because they don't fit into the unicode

00:19:35,690 --> 00:19:41,460
plane of you

00:19:37,110 --> 00:19:42,900
of unicode 16 like how much cash do they

00:19:41,460 --> 00:19:44,910
actually do in order to look at the

00:19:42,900 --> 00:19:48,750
property do they have like a hashmap for

00:19:44,910 --> 00:19:50,820
the string look up probably we do so

00:19:48,750 --> 00:19:53,220
it's really tough to tell let's say like

00:19:50,820 --> 00:19:55,740
conservatively on v8 maybe that is I

00:19:53,220 --> 00:19:57,630
don't know 32 byte probably not maybe 64

00:19:55,740 --> 00:20:01,740
byte if you store 10 of those it's

00:19:57,630 --> 00:20:03,240
already 640 bites that's like in the

00:20:01,740 --> 00:20:05,730
range of something you are you can

00:20:03,240 --> 00:20:07,920
notice on our platform so we rode I'm a

00:20:05,730 --> 00:20:10,320
couple of tools to analyze byte code to

00:20:07,920 --> 00:20:12,559
analyze heat consumptions but we quickly

00:20:10,320 --> 00:20:15,090
realize that this is not the level a

00:20:12,559 --> 00:20:17,010
typical JavaScript developer want to

00:20:15,090 --> 00:20:20,610
operate on so what we did instead is

00:20:17,010 --> 00:20:23,280
reintroduced an event oftentimes it's

00:20:20,610 --> 00:20:25,200
basically going like this i program my

00:20:23,280 --> 00:20:27,240
program i program until this is not

00:20:25,200 --> 00:20:29,460
enough ram anymore and then it crashes

00:20:27,240 --> 00:20:32,250
well that's great but I could actually

00:20:29,460 --> 00:20:34,970
prepare for this scenario if you are

00:20:32,250 --> 00:20:37,140
like like memory leaks are one thing but

00:20:34,970 --> 00:20:39,120
often times you have structures that

00:20:37,140 --> 00:20:41,190
could be recreated if you have had more

00:20:39,120 --> 00:20:43,230
RAM later on so what we do is I'm we

00:20:41,190 --> 00:20:45,000
actually I'm firing event when you have

00:20:43,230 --> 00:20:46,770
high memory pressure and then you could

00:20:45,000 --> 00:20:50,160
lose of resources you don't need anymore

00:20:46,770 --> 00:20:51,570
and there's another occasion when this

00:20:50,160 --> 00:20:54,059
event fires and that it's really the

00:20:51,570 --> 00:20:55,919
critical piece and when if you don't let

00:20:54,059 --> 00:20:59,370
lose now we actually quit your

00:20:55,919 --> 00:21:01,679
application what interesting question is

00:20:59,370 --> 00:21:05,790
how would you possibly do any logic here

00:21:01,679 --> 00:21:09,240
if you're out of RAM anyway so let's

00:21:05,790 --> 00:21:10,950
talk about performance then luckily

00:21:09,240 --> 00:21:13,140
Jerry script unlike other embedded

00:21:10,950 --> 00:21:15,270
runtime such as Perino as Breen who

00:21:13,140 --> 00:21:16,620
actually parses the same source code

00:21:15,270 --> 00:21:17,970
again and again if you jump into a

00:21:16,620 --> 00:21:19,380
function that parses that function again

00:21:17,970 --> 00:21:21,840
if you jump out and jump in to get it

00:21:19,380 --> 00:21:24,240
parses it again javascript is way more

00:21:21,840 --> 00:21:28,169
efficient it stores a code in byte code

00:21:24,240 --> 00:21:30,960
and that is great but computing bytecode

00:21:28,169 --> 00:21:34,020
upfront costs time and RAM and hence you

00:21:30,960 --> 00:21:36,299
know it by now we don't have that Ram so

00:21:34,020 --> 00:21:39,390
what we did come up with is a system

00:21:36,299 --> 00:21:41,640
where we produced by code offline you

00:21:39,390 --> 00:21:43,590
have your own program stored in the

00:21:41,640 --> 00:21:45,600
folder structure our SDK bundles

00:21:43,590 --> 00:21:47,550
JavaScript for the phone and JavaScript

00:21:45,600 --> 00:21:50,130
for the watch and it also compresses

00:21:47,550 --> 00:21:50,590
some of the resources and then if you

00:21:50,130 --> 00:21:52,000
install

00:21:50,590 --> 00:21:54,130
application we actually move the

00:21:52,000 --> 00:21:55,870
JavaScript part to the phone that was

00:21:54,130 --> 00:21:58,690
already true for the last two years and

00:21:55,870 --> 00:22:00,039
now the crazy thing happens words were

00:21:58,690 --> 00:22:03,010
you called JavaScript inception

00:22:00,039 --> 00:22:05,049
internally we basically cross compile

00:22:03,010 --> 00:22:07,419
the JavaScript compiler using Emscripten

00:22:05,049 --> 00:22:09,309
to JavaScript so that we can take your

00:22:07,419 --> 00:22:12,400
JavaScript and produce JavaScript byte

00:22:09,309 --> 00:22:14,350
code in JavaScript and that is for

00:22:12,400 --> 00:22:17,260
different reasons one of them is that

00:22:14,350 --> 00:22:19,390
the bytecode is no real maybe I contract

00:22:17,260 --> 00:22:21,460
it actually depends on the firmware but

00:22:19,390 --> 00:22:23,559
on iOS for example you cannot download

00:22:21,460 --> 00:22:26,740
any new executable code unless it's

00:22:23,559 --> 00:22:28,149
JavaScript so and there are different

00:22:26,740 --> 00:22:30,669
other reasons and I'd love to talk about

00:22:28,149 --> 00:22:32,890
it but in the end we actually only store

00:22:30,669 --> 00:22:35,649
the bytecode on the watch executed in

00:22:32,890 --> 00:22:37,840
the JavaScript environment point for is

00:22:35,649 --> 00:22:39,399
what we were talking about here and then

00:22:37,840 --> 00:22:41,679
you have access to the API talk to the

00:22:39,399 --> 00:22:45,100
internet and everything that is crazy

00:22:41,679 --> 00:22:46,750
but we did it we ship that like one and

00:22:45,100 --> 00:22:48,250
a half weeks or two we finally make that

00:22:46,750 --> 00:22:51,159
available to developers and this is how

00:22:48,250 --> 00:22:54,669
it looks like so in the shell you have

00:22:51,159 --> 00:22:57,399
this SDK thing you can build it and then

00:22:54,669 --> 00:22:58,840
we already at build time tell you where

00:22:57,399 --> 00:23:00,370
you have problems not at one time but

00:22:58,840 --> 00:23:02,110
actually at build time and we can do

00:23:00,370 --> 00:23:03,909
that because we leverage typescript

00:23:02,110 --> 00:23:05,260
under the hood you are not a relish but

00:23:03,909 --> 00:23:07,270
we actually have like typescript

00:23:05,260 --> 00:23:09,190
definitions for all our AP eyes which

00:23:07,270 --> 00:23:11,799
are basically rabbi be eyes and know

00:23:09,190 --> 00:23:13,450
that a property is not available or like

00:23:11,799 --> 00:23:16,120
you have some tactical hours and then

00:23:13,450 --> 00:23:17,470
you build it and you can actually deploy

00:23:16,120 --> 00:23:19,450
it on the right hand side you see an

00:23:17,470 --> 00:23:21,580
emulator which is not a simulator it's

00:23:19,450 --> 00:23:23,320
really the it maps the memory and

00:23:21,580 --> 00:23:25,990
everything one to one has it exists on

00:23:23,320 --> 00:23:28,360
our physical devices and there you can

00:23:25,990 --> 00:23:30,190
run a watch face it's not the most

00:23:28,360 --> 00:23:32,169
obvious what face here but it's done but

00:23:30,190 --> 00:23:36,640
one of our communities our community

00:23:32,169 --> 00:23:38,590
members which is great we also have the

00:23:36,640 --> 00:23:41,140
ability because we have a localized ok

00:23:38,590 --> 00:23:43,690
to tie this with your favorite idol here

00:23:41,140 --> 00:23:45,010
I'm using webstorm that is also done the

00:23:43,690 --> 00:23:49,149
one of our community members this is

00:23:45,010 --> 00:23:51,640
some as you look at the structure of the

00:23:49,149 --> 00:23:53,260
code it's he's actually inspired by C he

00:23:51,640 --> 00:23:54,850
comes from British he background which

00:23:53,260 --> 00:23:56,860
is fine it actually tells me that

00:23:54,850 --> 00:23:59,020
javascript is approachable enough for c

00:23:56,860 --> 00:24:02,230
developer whereas the other is not

00:23:59,020 --> 00:24:03,740
operationally the case but here I'm

00:24:02,230 --> 00:24:05,179
showing that

00:24:03,740 --> 00:24:07,040
we actually have code completion thanks

00:24:05,179 --> 00:24:08,630
to type on script definitions so we know

00:24:07,040 --> 00:24:12,620
what we are dealing with we can stall

00:24:08,630 --> 00:24:14,420
that we have at type time we know if

00:24:12,620 --> 00:24:17,720
something is incompatible and so forth

00:24:14,420 --> 00:24:20,210
and that is also right and because all

00:24:17,720 --> 00:24:22,190
our projects are now like real but I do

00:24:20,210 --> 00:24:24,380
have a package Jason they can require

00:24:22,190 --> 00:24:26,600
other things we can now leverage all the

00:24:24,380 --> 00:24:29,000
two legs so I can now run scripts that

00:24:26,600 --> 00:24:30,860
are defined in the and the package.json

00:24:29,000 --> 00:24:32,540
to build my program which is basically

00:24:30,860 --> 00:24:35,150
the same I did previously in the command

00:24:32,540 --> 00:24:38,000
line and also to install a ritual then

00:24:35,150 --> 00:24:39,500
again fire up the emulator so that's

00:24:38,000 --> 00:24:43,910
that's all great and that's basically

00:24:39,500 --> 00:24:45,230
the same thing but i really only put

00:24:43,910 --> 00:24:46,940
this here to show you that this is for

00:24:45,230 --> 00:24:48,590
real and you can download it now and use

00:24:46,940 --> 00:24:51,320
it and do javascript so here for example

00:24:48,590 --> 00:24:54,200
that's a reimplement ation of apple

00:24:51,320 --> 00:24:55,730
watches her massage face and there's a

00:24:54,200 --> 00:24:57,800
third thing and we have this for a while

00:24:55,730 --> 00:25:01,880
now it's called cloud pebble it's a

00:24:57,800 --> 00:25:05,390
cloud-based ide traditionally for pebble

00:25:01,880 --> 00:25:07,970
native applications where we offer you a

00:25:05,390 --> 00:25:10,040
code editor it was previously in C now

00:25:07,970 --> 00:25:12,080
and JavaScript and it's again the same

00:25:10,040 --> 00:25:13,880
code it's the same author you actually

00:25:12,080 --> 00:25:15,500
see that some of the sections are the

00:25:13,880 --> 00:25:17,900
same and I hope that the community will

00:25:15,500 --> 00:25:20,360
trade NPM packages from this to deal

00:25:17,900 --> 00:25:24,890
with repetitive tasks and watch face

00:25:20,360 --> 00:25:27,020
design the crazy thing about cloud

00:25:24,890 --> 00:25:29,000
pebble is what it actually does because

00:25:27,020 --> 00:25:31,070
it's not the editor is running in the

00:25:29,000 --> 00:25:32,660
browser but we have a cloud-based build

00:25:31,070 --> 00:25:33,770
system so whenever you actually do

00:25:32,660 --> 00:25:35,990
something that's transmitted to the

00:25:33,770 --> 00:25:38,000
cloud build and then the emulator you

00:25:35,990 --> 00:25:40,550
see is also hosted on the cloud and

00:25:38,000 --> 00:25:41,900
streamed via VNC back into the browser

00:25:40,550 --> 00:25:44,240
where you can see the picture perfect

00:25:41,900 --> 00:25:46,429
result but it allows you to basically

00:25:44,240 --> 00:25:48,110
write JavaScript based applications

00:25:46,429 --> 00:25:50,870
anywhere where you have access to a

00:25:48,110 --> 00:25:53,030
browser to run it either in the emulator

00:25:50,870 --> 00:25:55,730
or directly on the watch and it depends

00:25:53,030 --> 00:25:58,610
on the remaining time to actually show

00:25:55,730 --> 00:26:00,620
that on the actual watch so yeah that is

00:25:58,610 --> 00:26:02,510
there and here you see that we deal with

00:26:00,620 --> 00:26:04,640
different like screen shapes and

00:26:02,510 --> 00:26:07,580
different aspect ratios when it comes to

00:26:04,640 --> 00:26:10,910
our platform which is all doable that's

00:26:07,580 --> 00:26:12,590
now let's talk about the future because

00:26:10,910 --> 00:26:14,120
this is not the end this is not what we

00:26:12,590 --> 00:26:16,840
want to do what we really want to do is

00:26:14,120 --> 00:26:18,820
we want to do I'm great debugging

00:26:16,840 --> 00:26:20,830
so here's a right now we only have

00:26:18,820 --> 00:26:23,080
console.log for example but what you see

00:26:20,830 --> 00:26:24,820
here is built with everything that's

00:26:23,080 --> 00:26:27,279
publicly available on the left-hand side

00:26:24,820 --> 00:26:30,159
see a note server which does not really

00:26:27,279 --> 00:26:33,010
do much it's basically taking keyboard

00:26:30,159 --> 00:26:34,480
input related via web socket to our

00:26:33,010 --> 00:26:35,980
phone and then whenever it receives

00:26:34,480 --> 00:26:37,990
something from the phone it prints it

00:26:35,980 --> 00:26:39,520
out on the on the shell so I'm running

00:26:37,990 --> 00:26:41,919
that node server and on the right hand

00:26:39,520 --> 00:26:44,110
side there's our pebble application it

00:26:41,919 --> 00:26:46,120
consists of two parts one is the part

00:26:44,110 --> 00:26:48,520
that runs on the watch physically on the

00:26:46,120 --> 00:26:50,940
watch it's trivial it's basically

00:26:48,520 --> 00:26:54,250
whenever a message comes from the phone

00:26:50,940 --> 00:26:57,640
eval that string take the output and

00:26:54,250 --> 00:27:00,070
send it back so that's the watch part

00:26:57,640 --> 00:27:02,500
and the same project also has a phone

00:27:00,070 --> 00:27:05,409
part and the phone part is also just a

00:27:02,500 --> 00:27:07,210
relay it talks by a WebSocket to the

00:27:05,409 --> 00:27:09,279
node server whenever it receives a

00:27:07,210 --> 00:27:12,640
string from the node server it forwards

00:27:09,279 --> 00:27:15,909
it to the watch and whenever it receives

00:27:12,640 --> 00:27:18,250
something on from the watch again it's

00:27:15,909 --> 00:27:20,610
just our message passing here it

00:27:18,250 --> 00:27:23,020
forwards it to the WebSocket connection

00:27:20,610 --> 00:27:25,029
which is the node server and with that

00:27:23,020 --> 00:27:27,520
and just a building blocks you should

00:27:25,029 --> 00:27:30,580
all be familiar with we created on our

00:27:27,520 --> 00:27:32,529
platform a rebel so I start this

00:27:30,580 --> 00:27:34,870
application now again by now you should

00:27:32,529 --> 00:27:36,990
be familiar with it it's an emulator but

00:27:34,870 --> 00:27:40,029
now we are also printing the locks

00:27:36,990 --> 00:27:42,520
here's the emulator and as soon as I

00:27:40,029 --> 00:27:44,559
launch this both parts will be connected

00:27:42,520 --> 00:27:47,590
to each other and boom there we are so

00:27:44,559 --> 00:27:49,330
we can eval simple expressions 2+2 well

00:27:47,590 --> 00:27:51,340
that's not really surprising but if I

00:27:49,330 --> 00:27:53,260
lock something that log output doesn't

00:27:51,340 --> 00:27:54,940
appear on the left hand side on my node

00:27:53,260 --> 00:27:58,840
server but it's actually logged in the

00:27:54,940 --> 00:28:01,600
context of of the watch and because this

00:27:58,840 --> 00:28:03,610
is really a rocky application I can also

00:28:01,600 --> 00:28:05,890
do everything we saw previously in the

00:28:03,610 --> 00:28:08,440
source code so I'm now registering an

00:28:05,890 --> 00:28:12,130
event handler that whenever it fires it

00:28:08,440 --> 00:28:13,659
prints hello Jess conf Iceland obviously

00:28:12,130 --> 00:28:16,149
that doesn't fire immediately because

00:28:13,659 --> 00:28:17,919
nothing are told it to redraw but I'm

00:28:16,149 --> 00:28:20,500
requesting now every draw and boom here

00:28:17,919 --> 00:28:23,320
we are so this is really a node server

00:28:20,500 --> 00:28:25,690
talking over the phone and bluetooth to

00:28:23,320 --> 00:28:30,159
the watch printing something and Intel

00:28:25,690 --> 00:28:31,419
terrific so we started a bit late sorry

00:28:30,159 --> 00:28:41,169
I can you tell me how much time do we

00:28:31,419 --> 00:28:42,970
have left awesome it's enough for me so

00:28:41,169 --> 00:28:45,970
for the next thing I actually want to do

00:28:42,970 --> 00:28:48,250
it for real and a live demo them because

00:28:45,970 --> 00:28:51,879
like you saw that installing these

00:28:48,250 --> 00:28:53,649
applications take some time because we

00:28:51,879 --> 00:28:55,960
still do the same tool chain we

00:28:53,649 --> 00:28:57,730
technically still build a pebble

00:28:55,960 --> 00:29:00,639
application and under the hood there's

00:28:57,730 --> 00:29:03,190
still a tiny little piece of see that

00:29:00,639 --> 00:29:04,990
does nothing but telling the system okay

00:29:03,190 --> 00:29:06,399
are cool I'm standard compliant RSV

00:29:04,990 --> 00:29:08,980
application but you know what I don't

00:29:06,399 --> 00:29:10,629
want to do anything but evil the

00:29:08,980 --> 00:29:12,850
bytecode that's also part of my package

00:29:10,629 --> 00:29:16,480
which was magically done by this mind

00:29:12,850 --> 00:29:18,009
blowing and scripting thing before but

00:29:16,480 --> 00:29:20,980
what if we could shortcut that even

00:29:18,009 --> 00:29:22,690
further so we didn't know the other way

00:29:20,980 --> 00:29:25,750
round so what you see here is yet

00:29:22,690 --> 00:29:27,399
another watch face it's actually that is

00:29:25,750 --> 00:29:30,460
more or less the source code of our

00:29:27,399 --> 00:29:36,299
build and watch face and I can run this

00:29:30,460 --> 00:29:39,759
in the browser so let me open that here

00:29:36,299 --> 00:29:41,470
that is running in the browser although

00:29:39,759 --> 00:29:43,690
there's no like there's no pebble

00:29:41,470 --> 00:29:46,210
involved and you could say well that's

00:29:43,690 --> 00:29:48,519
not a problem because the AP Isaac

00:29:46,210 --> 00:29:50,440
handlers aren't they I can just draw to

00:29:48,519 --> 00:29:52,120
canvas and get the result well the

00:29:50,440 --> 00:29:54,250
problem with an environment environment

00:29:52,120 --> 00:29:55,870
like this is that you want to have pixel

00:29:54,250 --> 00:29:58,360
perfect results as you are developing

00:29:55,870 --> 00:29:59,740
because the resolution is so small and

00:29:58,360 --> 00:30:01,210
you really want to see all the quirks

00:29:59,740 --> 00:30:04,419
and all the bugs we introduced an hour

00:30:01,210 --> 00:30:06,250
platform so what this is is actually yes

00:30:04,419 --> 00:30:10,090
the original source code but it lives

00:30:06,250 --> 00:30:14,679
within an HTML page which uses a trans

00:30:10,090 --> 00:30:16,990
piled version of our firmware inside the

00:30:14,679 --> 00:30:19,000
browser so again we are leveraging and

00:30:16,990 --> 00:30:21,009
scripting here but this time we trust

00:30:19,000 --> 00:30:23,470
compiled the firmware to the application

00:30:21,009 --> 00:30:26,860
layer of our firmware to run inside of

00:30:23,470 --> 00:30:29,250
the browser so that we can talk to it in

00:30:26,860 --> 00:30:29,250
the browser

00:30:31,440 --> 00:30:36,929
and that gives me a fast feedback

00:30:34,019 --> 00:30:39,000
because I'm now in my ID and I can say

00:30:36,929 --> 00:30:42,360
you know what that black is a bit

00:30:39,000 --> 00:30:45,389
depressing let's make that yellow and if

00:30:42,360 --> 00:30:48,570
I though and if I make this and reload

00:30:45,389 --> 00:30:51,600
that page boom it's yellow and I can

00:30:48,570 --> 00:30:53,610
change that light to read reloaded and

00:30:51,600 --> 00:30:55,950
there we go and then this white is

00:30:53,610 --> 00:30:59,460
really hard to see and i'll make this

00:30:55,950 --> 00:31:00,750
black cool so that's that's where we are

00:30:59,460 --> 00:31:02,340
heading this is what we want to gain

00:31:00,750 --> 00:31:03,840
right this is the development we want to

00:31:02,340 --> 00:31:05,429
have but eventually we want to run it on

00:31:03,840 --> 00:31:07,590
the watch so let's do that I'm copy and

00:31:05,429 --> 00:31:11,789
pasting that into the ideally we saw

00:31:07,590 --> 00:31:13,500
before I'm pasting it here and then you

00:31:11,789 --> 00:31:16,080
can choose between different targets and

00:31:13,500 --> 00:31:17,909
now taking again the emulator and while

00:31:16,080 --> 00:31:20,639
I'm doing that to see that it actually

00:31:17,909 --> 00:31:24,690
works taking off the launch I have you

00:31:20,639 --> 00:31:26,669
on my wrist and put it on the video

00:31:24,690 --> 00:31:28,620
setup i have here on the right so this

00:31:26,669 --> 00:31:32,549
is a live camera this is actually you

00:31:28,620 --> 00:31:34,769
here in the back and i can put my watch

00:31:32,549 --> 00:31:38,250
here so that you can see the actual

00:31:34,769 --> 00:31:42,529
output and by then we we started the

00:31:38,250 --> 00:31:42,529
emulator have it all installed here and

00:31:43,669 --> 00:31:53,970
well live demos let's see do maybe make

00:31:51,179 --> 00:31:55,649
this black again sometimes the Radley

00:31:53,970 --> 00:31:57,960
doesn't if I just paste maybe it didn't

00:31:55,649 --> 00:32:01,559
understand that I was changing code and

00:31:57,960 --> 00:32:03,779
didn't recompile really so I'm now

00:32:01,559 --> 00:32:10,289
expecting red hands and a black

00:32:03,779 --> 00:32:13,620
background there we are okay cool so I'm

00:32:10,289 --> 00:32:18,480
changing that a bit more I'm saying ctx

00:32:13,620 --> 00:32:26,250
field style is yellow and then I'm

00:32:18,480 --> 00:32:33,750
saying ctx fill text hello Jess conf ice

00:32:26,250 --> 00:32:36,240
land at 1010 and I'm changing that to

00:32:33,750 --> 00:32:38,129
not talk I'm to an emulator but actually

00:32:36,240 --> 00:32:43,309
to the phone and that is again crazy

00:32:38,129 --> 00:32:45,620
what it does know is it understands that

00:32:43,309 --> 00:32:47,480
my phone using my pebble account is

00:32:45,620 --> 00:32:49,100
connected to the cloud it pushes the

00:32:47,480 --> 00:32:51,620
binary it compiled it on the cloud and

00:32:49,100 --> 00:32:53,509
it pushes it to the phone it talks by

00:32:51,620 --> 00:32:55,100
bluetooth to the watch deploys it there

00:32:53,509 --> 00:32:57,470
and what you see in the right hand side

00:32:55,100 --> 00:32:59,029
is still the old application but I think

00:32:57,470 --> 00:33:02,149
you got it it's now running on the watch

00:32:59,029 --> 00:33:04,370
so this is this is really the real thing

00:33:02,149 --> 00:33:08,629
you can write JavaScript modified and

00:33:04,370 --> 00:33:13,820
deploy it on a launch cool so with that

00:33:08,629 --> 00:33:18,350
I come back to my slides this was my

00:33:13,820 --> 00:33:20,929
backup what you just saw is JavaScript

00:33:18,350 --> 00:33:22,940
running on the watch it's really like

00:33:20,929 --> 00:33:24,440
the real thing it's your JavaScript your

00:33:22,940 --> 00:33:27,470
camera's code your events and everything

00:33:24,440 --> 00:33:29,090
right there if you are a pedal developer

00:33:27,470 --> 00:33:31,580
or I want to be deep apple developer and

00:33:29,090 --> 00:33:33,830
see scared you in the past go there try

00:33:31,580 --> 00:33:36,230
it out give us feedback it's it's

00:33:33,830 --> 00:33:38,269
available if you do something with

00:33:36,230 --> 00:33:41,029
embeddable devices and better devices

00:33:38,269 --> 00:33:42,679
and you have a hard time thinking that

00:33:41,029 --> 00:33:44,779
this is possible we have plenty of

00:33:42,679 --> 00:33:47,419
internal lack knowledge and learnings

00:33:44,779 --> 00:33:48,649
and I would love to talk to you if you

00:33:47,419 --> 00:33:50,330
just got here by accident actually

00:33:48,649 --> 00:33:53,470
wanted to watch the other presentation

00:33:50,330 --> 00:33:56,269
in the other room the message to you is

00:33:53,470 --> 00:33:59,450
you bet on the right horse javascript is

00:33:56,269 --> 00:34:01,789
like everywhere it reaches even like

00:33:59,450 --> 00:34:03,200
bound to those little devices and you

00:34:01,789 --> 00:34:04,940
can be sure that javascript will be

00:34:03,200 --> 00:34:06,169
around for a long time and there will be

00:34:04,940 --> 00:34:09,100
more and more devices for you to play

00:34:06,169 --> 00:34:09,100
with thanks

00:34:11,559 --> 00:34:13,619

YouTube URL: https://www.youtube.com/watch?v=zbotfayCIn0


