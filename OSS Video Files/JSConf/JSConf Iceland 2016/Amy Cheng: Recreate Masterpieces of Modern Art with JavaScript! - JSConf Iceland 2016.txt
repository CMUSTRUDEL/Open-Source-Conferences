Title: Amy Cheng: Recreate Masterpieces of Modern Art with JavaScript! - JSConf Iceland 2016
Publication date: 2016-09-16
Playlist: JSConf Iceland 2016
Description: 
	JavaScript is not just for web apps! This talk looks at JavaScript as an artistic and visual programming language and serves as a primer on generative art. The audience will learn how to recreate one of Damien Hirst’s Spot paintings and one of Piet Mondrian’s Composition paintings in the browser. JavaScript is commonly used to manage interactivity, data, and application states. However, we will use masterpieces of modern art to illustrate JavaScript’s potential to manipulate visual space, color and shape.
Captions: 
	00:00:12,190 --> 00:00:19,130
hello is that good okay um hi my name is

00:00:17,150 --> 00:00:21,860
Amy Chang I'm a web developer with New

00:00:19,130 --> 00:00:23,660
York Magazine and I'm also an artist now

00:00:21,860 --> 00:00:25,640
each and every one of you has also had

00:00:23,660 --> 00:00:27,680
personal has also had personal

00:00:25,640 --> 00:00:29,419
experience making art maybe when you

00:00:27,680 --> 00:00:31,369
were child you worked with crayon or

00:00:29,419 --> 00:00:33,980
maybe you picked up painting as a hobby

00:00:31,369 --> 00:00:36,380
as an adult and even if you didn't

00:00:33,980 --> 00:00:37,940
progress past the crown stage well I

00:00:36,380 --> 00:00:40,850
have good news for you if you know

00:00:37,940 --> 00:00:43,340
JavaScript you can make art so in this

00:00:40,850 --> 00:00:45,470
talk we're gonna recreate two famous

00:00:43,340 --> 00:00:47,780
masterpieces of Modern Art the spot

00:00:45,470 --> 00:00:49,910
painting series by Damien Hirst and the

00:00:47,780 --> 00:00:52,340
composition series by Pierre Mondrian

00:00:49,910 --> 00:00:55,610
and we're gonna recreate these artworks

00:00:52,340 --> 00:00:59,870
as a way to explore the artistic

00:00:55,610 --> 00:01:02,180
capabilities of JavaScript so just like

00:00:59,870 --> 00:01:04,699
painting we're gonna start with a html5

00:01:02,180 --> 00:01:07,579
canvas API which is JavaScript blank

00:01:04,699 --> 00:01:09,610
canvas and so the canvas API is a way

00:01:07,579 --> 00:01:12,560
for the browser to tell the computer to

00:01:09,610 --> 00:01:16,069
dynamically draw bitmap graphics to the

00:01:12,560 --> 00:01:17,780
screen in the recent past we've had to

00:01:16,069 --> 00:01:19,640
download third-party plugins like flash

00:01:17,780 --> 00:01:21,710
and Java in order to do this but

00:01:19,640 --> 00:01:24,140
nowadays this capability is present in

00:01:21,710 --> 00:01:28,069
the most recent versions of all major

00:01:24,140 --> 00:01:32,149
browsers so here we have code to draw a

00:01:28,069 --> 00:01:34,280
circle here are the parts I wanna go

00:01:32,149 --> 00:01:37,819
over so we have something called VAR CT

00:01:34,280 --> 00:01:39,829
x equals canvas get context 2d so

00:01:37,819 --> 00:01:41,689
according to specs this is the actual

00:01:39,829 --> 00:01:44,090
interface that your browser is using to

00:01:41,689 --> 00:01:46,459
talk to the computer here we set it to D

00:01:44,090 --> 00:01:48,679
to D but if you were here for lives

00:01:46,459 --> 00:01:51,020
talked earlier today she also mentioned

00:01:48,679 --> 00:01:53,209
canvas now if you set that to WebGL you

00:01:51,020 --> 00:01:54,889
could start working in three-dimensional

00:01:53,209 --> 00:01:56,179
space but for this talk we're just only

00:01:54,889 --> 00:01:58,999
going to work in two-dimensional space

00:01:56,179 --> 00:02:01,100
they don't have a draw function and in

00:01:58,999 --> 00:02:04,159
our draw function we are telling the

00:02:01,100 --> 00:02:07,399
computer to start drawing and we want an

00:02:04,159 --> 00:02:10,700
arc shape and we want this arc shape to

00:02:07,399 --> 00:02:12,890
be drawn 360 degrees and we want the

00:02:10,700 --> 00:02:15,290
shape to have an outline so this draw

00:02:12,890 --> 00:02:17,510
function is being passed as a callback

00:02:15,290 --> 00:02:19,520
to something called roof request

00:02:17,510 --> 00:02:21,050
animation frame which also made an

00:02:19,520 --> 00:02:21,770
appearance in David's talk about

00:02:21,050 --> 00:02:24,500
animation

00:02:21,770 --> 00:02:27,140
so basically request animation frame is

00:02:24,500 --> 00:02:29,660
based is a smarter set interval function

00:02:27,140 --> 00:02:31,730
and if you pass a callback to this the

00:02:29,660 --> 00:02:34,010
browser is going to assume that you're

00:02:31,730 --> 00:02:36,620
doing animation and as such the browser

00:02:34,010 --> 00:02:39,680
is going to do some performance stuff to

00:02:36,620 --> 00:02:42,080
make it smoother an interesting thing

00:02:39,680 --> 00:02:44,390
about this animation request animation

00:02:42,080 --> 00:02:47,330
frame is that the callback will not be

00:02:44,390 --> 00:02:49,640
executed until the current dom repaint

00:02:47,330 --> 00:02:51,890
or animation is done completing it also

00:02:49,640 --> 00:02:56,900
means that if your browser tab is not in

00:02:51,890 --> 00:02:58,910
focus that code will not run so we're

00:02:56,900 --> 00:03:01,060
gonna draw many many circles in an

00:02:58,910 --> 00:03:03,380
effort to recreate the spot painting and

00:03:01,060 --> 00:03:05,630
in order to do this we're gonna use some

00:03:03,380 --> 00:03:09,560
help we're gonna have some help from a

00:03:05,630 --> 00:03:11,540
framework called p5.js so beef p5.js was

00:03:09,560 --> 00:03:14,090
designed for artists beginners and

00:03:11,540 --> 00:03:16,610
designers but is even though it's kind

00:03:14,090 --> 00:03:18,200
of designed for non-programmers it's

00:03:16,610 --> 00:03:21,200
still capable of doing a lot of stuff

00:03:18,200 --> 00:03:23,480
you want to do in this talk so p5.js is

00:03:21,200 --> 00:03:25,220
actually an offshoot of a java library

00:03:23,480 --> 00:03:28,010
called processing which was created at

00:03:25,220 --> 00:03:30,380
the MIT Media Lab and the intention of

00:03:28,010 --> 00:03:32,900
Processing's creators was to turn

00:03:30,380 --> 00:03:35,630
artists into programmers and programmers

00:03:32,900 --> 00:03:39,350
into artists and this philosophy is

00:03:35,630 --> 00:03:42,020
inherited by p5 a disclaimer my

00:03:39,350 --> 00:03:44,030
intention is to talk about cons is to

00:03:42,020 --> 00:03:46,610
introduce you to concepts not

00:03:44,030 --> 00:03:48,860
necessarily advocate p5.js

00:03:46,610 --> 00:03:51,800
and those of you who've worked with

00:03:48,860 --> 00:03:53,870
javascript for a long time know that the

00:03:51,800 --> 00:03:55,340
exes D and the agony of JavaScript is

00:03:53,870 --> 00:03:58,550
that there are many ways to accomplish

00:03:55,340 --> 00:04:00,860
the same task for example here are three

00:03:58,550 --> 00:04:05,420
ways to draw the same circle in three

00:04:00,860 --> 00:04:07,700
different frameworks so p5 fabric and

00:04:05,420 --> 00:04:10,520
easel all rely on the canvas API and

00:04:07,700 --> 00:04:11,960
what's similar in all these code

00:04:10,520 --> 00:04:14,570
examples is that it allows the

00:04:11,960 --> 00:04:16,850
programmer to draw an ellipse or draw a

00:04:14,570 --> 00:04:19,489
circle define the horizontal position

00:04:16,850 --> 00:04:21,920
the vertical position as well as the

00:04:19,489 --> 00:04:24,800
horizontal or vertical radius and also

00:04:21,920 --> 00:04:27,280
there's a method to fill this circle

00:04:24,800 --> 00:04:27,280
with color

00:04:30,510 --> 00:04:36,960
so in 1996 interview Damien Hirst's

00:04:34,350 --> 00:04:38,790
let's go back to you this day me and her

00:04:36,960 --> 00:04:41,100
sort of described his series of spot

00:04:38,790 --> 00:04:43,530
paintings as a sculpture about infinity

00:04:41,100 --> 00:04:47,760
and on his website he lists about 90

00:04:43,530 --> 00:04:48,720
spot paintings red from 1992 to to sorry

00:04:47,760 --> 00:04:53,610
yeah yeah

00:04:48,720 --> 00:04:55,470
1992 to 2012 so about 4 per year and

00:04:53,610 --> 00:04:57,630
we're gonna do many we're gonna drink

00:04:55,470 --> 00:05:01,160
procedurally generate many many spot

00:04:57,630 --> 00:05:01,160
paintings in just a couple of minutes

00:05:09,479 --> 00:05:14,999
one two three four and we just generated

00:05:13,379 --> 00:05:18,089
four spot paintings in less than a

00:05:14,999 --> 00:05:20,759
minute so let's see what's happening in

00:05:18,089 --> 00:05:23,400
their code so p5 requires a setup

00:05:20,759 --> 00:05:25,979
function and this setup function runs at

00:05:23,400 --> 00:05:27,749
the beginning of code execution so in

00:05:25,979 --> 00:05:30,719
this setup function we're creating a

00:05:27,749 --> 00:05:32,909
canvas element 800 pixels wide 500

00:05:30,719 --> 00:05:34,830
pixels tall and we're setting the

00:05:32,909 --> 00:05:39,300
background of our blank canvas to white

00:05:34,830 --> 00:05:41,129
and then we have no loop this so we have

00:05:39,300 --> 00:05:43,139
a draw function and this draw function

00:05:41,129 --> 00:05:45,180
is being passed as a callback to

00:05:43,139 --> 00:05:47,879
requestanimationframe which runs

00:05:45,180 --> 00:05:50,099
continuously and what no loop does it's

00:05:47,879 --> 00:05:52,580
basically tells p5 to run this block

00:05:50,099 --> 00:05:55,110
only once and not to keep doing it so

00:05:52,580 --> 00:05:57,629
here you'll notice two nested for loops

00:05:55,110 --> 00:05:59,999
the first for loop draws spot paintings

00:05:57,629 --> 00:06:02,370
across the canvas while the second for

00:05:59,999 --> 00:06:04,589
loops are the second for loop draw spots

00:06:02,370 --> 00:06:07,080
down the canvas we have a color function

00:06:04,589 --> 00:06:12,330
no stroke another and our familiar

00:06:07,080 --> 00:06:16,469
ellipse function so a color function

00:06:12,330 --> 00:06:17,819
basically fills the preceding shape that

00:06:16,469 --> 00:06:23,310
is a shape to find after the color

00:06:17,819 --> 00:06:24,839
function is called with color so I just

00:06:23,310 --> 00:06:26,699
demonstrated that javascript is an

00:06:24,839 --> 00:06:28,589
artistic medium that can do procedural

00:06:26,699 --> 00:06:32,300
generation and the procedure we're

00:06:28,589 --> 00:06:34,680
executing is the following three lines

00:06:32,300 --> 00:06:37,110
now I feel like the spot painting we

00:06:34,680 --> 00:06:39,659
generated the colors of it aren't that

00:06:37,110 --> 00:06:42,740
faithful to the original so I'm gonna

00:06:39,659 --> 00:06:46,409
parameters color in an effort to get it

00:06:42,740 --> 00:06:50,009
more to get closer to the original spot

00:06:46,409 --> 00:06:53,270
painting so returning to our color

00:06:50,009 --> 00:06:55,649
function so you notice that fill is the

00:06:53,270 --> 00:06:58,289
accepting three arguments and what these

00:06:55,649 --> 00:07:00,449
three arguments refer to depends on the

00:06:58,289 --> 00:07:03,270
color mode that we're using so color

00:07:00,449 --> 00:07:06,149
mode is the color default color mode

00:07:03,270 --> 00:07:08,159
that p5 uses is RGB which stands for red

00:07:06,149 --> 00:07:09,959
green and blue and what these arguments

00:07:08,159 --> 00:07:11,729
refer to the first argument refers to

00:07:09,959 --> 00:07:13,770
how much red is in the color

00:07:11,729 --> 00:07:15,839
the second argument refers to how much

00:07:13,770 --> 00:07:17,669
green is in the color and the third

00:07:15,839 --> 00:07:19,440
argument first how much blue is in the

00:07:17,669 --> 00:07:21,960
color and you'll also notice them

00:07:19,440 --> 00:07:24,330
using p5 s random function to randomly

00:07:21,960 --> 00:07:26,490
determine how much red green and blue is

00:07:24,330 --> 00:07:28,860
in the color we're gonna change our

00:07:26,490 --> 00:07:31,560
color mode to HSV which stands for hue

00:07:28,860 --> 00:07:32,730
saturation and brightness tomorrow visnu

00:07:31,560 --> 00:07:33,870
is actually going to give a whole talk

00:07:32,730 --> 00:07:37,070
on these color modes so you're

00:07:33,870 --> 00:07:43,100
interested check out his talk tomorrow

00:07:37,070 --> 00:07:45,630
so what I did here is that I created GUI

00:07:43,100 --> 00:07:49,920
using the library that GUI

00:07:45,630 --> 00:07:51,330
dat GUI and it's a simple UI library

00:07:49,920 --> 00:07:53,700
that was released by the Google Data

00:07:51,330 --> 00:07:55,800
arts team a couple of years ago so what

00:07:53,700 --> 00:07:58,770
we have here is some UI elements that

00:07:55,800 --> 00:08:00,990
lets me change our color mode sliders

00:07:58,770 --> 00:08:02,730
that affect the range in which the

00:08:00,990 --> 00:08:06,180
random function is generating numbers

00:08:02,730 --> 00:08:10,530
and checkboxes that refer to whether or

00:08:06,180 --> 00:08:14,430
not I want to randomize those values so

00:08:10,530 --> 00:08:17,010
I'm changing it to HSB narrowing the

00:08:14,430 --> 00:08:19,590
color range as you can see we have a

00:08:17,010 --> 00:08:23,160
color theme going on but it's not that's

00:08:19,590 --> 00:08:26,130
not what we want to do we want to make

00:08:23,160 --> 00:08:27,990
the colors lighter but what I did I made

00:08:26,130 --> 00:08:30,000
it brighter and that's because I maxed

00:08:27,990 --> 00:08:35,210
out the saturation and brightness

00:08:30,000 --> 00:08:35,210
argument so let's make it dimmer

00:08:44,050 --> 00:08:50,170
I think that's close enough so what I

00:08:48,430 --> 00:08:53,050
did is that so

00:08:50,170 --> 00:08:55,089
we refactored code and we have a JSON

00:08:53,050 --> 00:08:58,260
object called machine state basically

00:08:55,089 --> 00:09:00,399
the UI is ultra is a changing these

00:08:58,260 --> 00:09:02,320
properties and these properties are

00:09:00,399 --> 00:09:07,750
passed into our refactored color

00:09:02,320 --> 00:09:11,070
function you also notice that in

00:09:07,750 --> 00:09:13,180
addition to making those arguments

00:09:11,070 --> 00:09:15,070
parameters we're using we're still

00:09:13,180 --> 00:09:19,570
relying pretty heavily on the random

00:09:15,070 --> 00:09:23,760
function to generate colors but what if

00:09:19,570 --> 00:09:23,760
we randomized other visual elements

00:09:34,510 --> 00:09:39,570
so what's happening here is that I'm

00:09:36,459 --> 00:09:42,570
using the p5 random function to randomly

00:09:39,570 --> 00:09:45,279
determine the position of each line and

00:09:42,570 --> 00:09:48,130
width and thickness as well as the

00:09:45,279 --> 00:09:51,699
curvature of those lines and what we

00:09:48,130 --> 00:09:54,190
just did is we inadvertently created

00:09:51,699 --> 00:09:55,750
alain de Kooning's preparatory paintings

00:09:54,190 --> 00:10:03,610
and like the preparatory paintings

00:09:55,750 --> 00:10:05,230
you'll notice sorry that the lines are v

00:10:03,610 --> 00:10:07,810
clustered towards the middle and that's

00:10:05,230 --> 00:10:09,610
not really that random well that's

00:10:07,810 --> 00:10:15,480
because we are using a different kind of

00:10:09,610 --> 00:10:19,420
random function called random Gaussian

00:10:15,480 --> 00:10:21,699
so random Gaussian generates numbers

00:10:19,420 --> 00:10:24,339
according to a standard JV standard

00:10:21,699 --> 00:10:26,589
deviation what that means is that it

00:10:24,339 --> 00:10:28,930
will more likely generate numbers that

00:10:26,589 --> 00:10:30,880
are closer to the average of the range

00:10:28,930 --> 00:10:33,610
you passed in for example let's say you

00:10:30,880 --> 00:10:35,889
use a range of one to a hundred

00:10:33,610 --> 00:10:38,410
that means random Gaussian will generate

00:10:35,889 --> 00:10:40,000
or more likely generate numbers that are

00:10:38,410 --> 00:10:45,760
closer to the average of all the numbers

00:10:40,000 --> 00:10:48,010
between 1 and 100 another way to

00:10:45,760 --> 00:10:49,899
describe what we just did is that we are

00:10:48,010 --> 00:10:52,600
I'm sorry

00:10:49,899 --> 00:10:55,329
painting with algorithms so this is the

00:10:52,600 --> 00:10:57,100
source code of random Gaussian and

00:10:55,329 --> 00:10:59,470
you'll notice here that there's a bunch

00:10:57,100 --> 00:11:01,149
of math happening there square root and

00:10:59,470 --> 00:11:03,550
there's log numbers and what all this

00:11:01,149 --> 00:11:06,250
math does is generate numbers according

00:11:03,550 --> 00:11:08,110
to mathematical formulas that would

00:11:06,250 --> 00:11:16,180
generate numbers that are plotted along

00:11:08,110 --> 00:11:18,579
a standard standard deviation but there

00:11:16,180 --> 00:11:19,930
are many many other algorithms that we

00:11:18,579 --> 00:11:23,230
can use so in the previous two examples

00:11:19,930 --> 00:11:26,100
I just used random on this screen here

00:11:23,230 --> 00:11:28,569
is a mathematical formula that generates

00:11:26,100 --> 00:11:31,569
Mandelbrot set fractals and these are

00:11:28,569 --> 00:11:34,839
shapes that happen in the happens in

00:11:31,569 --> 00:11:36,699
nature so I feel that mathematics is one

00:11:34,839 --> 00:11:39,160
expression of the world and that art is

00:11:36,699 --> 00:11:42,430
another and that computation can act as

00:11:39,160 --> 00:11:44,670
a bridge between the two so in this

00:11:42,430 --> 00:11:44,670
example

00:11:57,740 --> 00:12:04,070
I did not make this example

00:12:00,890 --> 00:12:06,950
so we're basically exploring a

00:12:04,070 --> 00:12:09,200
Mandelbrot fractal and this person just

00:12:06,950 --> 00:12:11,060
is using the canvas API and native

00:12:09,200 --> 00:12:13,760
JavaScript to do all this and what's

00:12:11,060 --> 00:12:15,590
happening on in the behind the scenes is

00:12:13,760 --> 00:12:22,040
that mathematical formula that I showed

00:12:15,590 --> 00:12:23,450
in the previous slides another yet

00:12:22,040 --> 00:12:25,940
another way of viewing the work we just

00:12:23,450 --> 00:12:28,370
did is that we created a system and

00:12:25,940 --> 00:12:30,080
those of you who've worked with Web Apps

00:12:28,370 --> 00:12:33,010
know that javascript is perfectly

00:12:30,080 --> 00:12:35,690
capable of managing many disparate

00:12:33,010 --> 00:12:39,260
disparate parts such as UI elements

00:12:35,690 --> 00:12:43,670
database calls API calls user

00:12:39,260 --> 00:12:46,010
interaction so let's frame the spot

00:12:43,670 --> 00:12:48,050
painting demos as an art system in the

00:12:46,010 --> 00:12:50,360
system we have parameters the random

00:12:48,050 --> 00:12:54,410
function the color function the ellipse

00:12:50,360 --> 00:12:57,140
function for loops and a GUI and all of

00:12:54,410 --> 00:12:59,540
this created the spot painting in the

00:12:57,140 --> 00:13:02,300
preparatory painting demo we have curves

00:12:59,540 --> 00:13:05,120
lines random functions and Gaussian

00:13:02,300 --> 00:13:07,160
functions so let's be a little bit more

00:13:05,120 --> 00:13:10,370
ambitious in the construction and design

00:13:07,160 --> 00:13:13,390
of a system let's recreate Mondrian's

00:13:10,370 --> 00:13:13,390
composition painting

00:13:19,960 --> 00:13:27,640
so here I'm using random to place three

00:13:24,070 --> 00:13:33,040
boxes within on the canvas as well as

00:13:27,640 --> 00:13:35,649
the width and height of each box just a

00:13:33,040 --> 00:13:37,360
side note p5 also has a nice convenience

00:13:35,649 --> 00:13:40,360
method for creating rectangles it's

00:13:37,360 --> 00:13:43,240
called rect or ect now if you'll notice

00:13:40,360 --> 00:13:47,170
this painting also is not a faithful

00:13:43,240 --> 00:13:49,990
recreation of this and we could spend

00:13:47,170 --> 00:13:51,760
some time writing more logic to get

00:13:49,990 --> 00:13:53,950
closer to this but I think that's kind

00:13:51,760 --> 00:13:58,390
of under utilizing what JavaScript can

00:13:53,950 --> 00:14:01,290
do for us so what if we made each block

00:13:58,390 --> 00:14:01,290
and automata

00:14:11,070 --> 00:14:16,199
so what's happening here is that each

00:14:12,930 --> 00:14:17,880
block has a set has two rules of finding

00:14:16,199 --> 00:14:29,639
its behavior defining how its running

00:14:17,880 --> 00:14:31,500
across the screen part two what's

00:14:29,639 --> 00:14:33,329
happening here is that the yellow square

00:14:31,500 --> 00:14:35,910
is chasing the blue square blue

00:14:33,329 --> 00:14:40,069
rectangle and once it reaches its target

00:14:35,910 --> 00:14:40,069
is just kind of globs on to it

00:14:51,600 --> 00:14:55,170
so what's happening here is that each

00:14:53,460 --> 00:14:57,570
rectangle is actually an object is

00:14:55,170 --> 00:14:59,130
actually an object called self and

00:14:57,570 --> 00:15:01,350
within cell there are two functions

00:14:59,130 --> 00:15:03,390
update and render render we're not going

00:15:01,350 --> 00:15:05,250
to go into render render basically calls

00:15:03,390 --> 00:15:07,470
the rect method and the fill method and

00:15:05,250 --> 00:15:09,330
is the function that actually draw stuff

00:15:07,470 --> 00:15:10,740
to a screen what's the what's more

00:15:09,330 --> 00:15:14,250
interesting about this object is the

00:15:10,740 --> 00:15:16,650
update function so here you'll see math

00:15:14,250 --> 00:15:18,900
shows up again in the update function so

00:15:16,650 --> 00:15:22,490
when each rectangle is initialized as a

00:15:18,900 --> 00:15:24,870
Cell object we're using random to pick a

00:15:22,490 --> 00:15:27,510
location within the canvas and what

00:15:24,870 --> 00:15:30,120
update is doing is that it's determining

00:15:27,510 --> 00:15:32,250
how far away this object is the

00:15:30,120 --> 00:15:36,360
rectangle is from its target location

00:15:32,250 --> 00:15:39,770
and it modifies its current position to

00:15:36,360 --> 00:15:43,380
get closer to where it needs to be

00:15:39,770 --> 00:15:45,420
you'll also notice that we just created

00:15:43,380 --> 00:15:48,360
an omission so

00:15:45,420 --> 00:15:50,310
request frame animation runs

00:15:48,360 --> 00:15:53,130
continuously as I mentioned before and

00:15:50,310 --> 00:15:55,230
we can consider each time it calls Oh

00:15:53,130 --> 00:15:58,230
each time it executes the callback that

00:15:55,230 --> 00:16:00,630
it's actually one frame of animation and

00:15:58,230 --> 00:16:04,160
it's running so fast that looks like the

00:16:00,630 --> 00:16:04,160
rectangle is moving across the screen

00:16:04,910 --> 00:16:12,360
here's another example of a more

00:16:07,050 --> 00:16:18,510
complicated system we've modified our

00:16:12,360 --> 00:16:20,520
spot painting to be alive now some of

00:16:18,510 --> 00:16:23,220
you might recognize this as flocking

00:16:20,520 --> 00:16:25,710
behavior and you'd be correct it is a

00:16:23,220 --> 00:16:27,420
flocking it is an example of flocking

00:16:25,710 --> 00:16:29,610
behavior and basically what's happening

00:16:27,420 --> 00:16:32,060
here is just a modified flocking code

00:16:29,610 --> 00:16:32,060
example

00:16:35,830 --> 00:16:41,800
so each flock contains a Boyd or a

00:16:39,430 --> 00:16:44,529
separate entity and each entity has many

00:16:41,800 --> 00:16:46,360
has a four functions that determines its

00:16:44,529 --> 00:16:48,550
behavior and this is one function and

00:16:46,360 --> 00:16:51,010
it's for separation and basically what's

00:16:48,550 --> 00:16:53,260
happening here is our code is making

00:16:51,010 --> 00:16:57,790
sure each spot is not getting too close

00:16:53,260 --> 00:17:00,010
to its neighbor but we also want our

00:16:57,790 --> 00:17:02,380
spots close enough to form a flock and

00:17:00,010 --> 00:17:03,820
what's happening here in this function

00:17:02,380 --> 00:17:11,530
and this function is a lot of vector

00:17:03,820 --> 00:17:13,240
math to do that now why don't we create

00:17:11,530 --> 00:17:15,040
we could create a system that could

00:17:13,240 --> 00:17:17,290
learn rules from the data we give it

00:17:15,040 --> 00:17:20,439
well this is what machine learning is

00:17:17,290 --> 00:17:22,600
all about machine learning is basically

00:17:20,439 --> 00:17:24,490
a system that learns from its inputs in

00:17:22,600 --> 00:17:26,980
the preview examples we were very

00:17:24,490 --> 00:17:29,410
explicit rules as to how our system

00:17:26,980 --> 00:17:31,780
should operate and machine learning we

00:17:29,410 --> 00:17:35,350
don't quite know how the system will

00:17:31,780 --> 00:17:37,720
behave we have like kind of a goal for

00:17:35,350 --> 00:17:42,490
it but we're pretty hands-off with how

00:17:37,720 --> 00:17:45,690
the how the system operates so let's

00:17:42,490 --> 00:17:45,690
watch code paint

00:17:53,270 --> 00:17:57,020
just debugging it

00:18:04,429 --> 00:18:07,790
okay there we go

00:18:20,720 --> 00:18:24,070
just give it a little bit

00:18:34,460 --> 00:18:41,690
so what is our code painting it's me

00:18:39,590 --> 00:18:43,879
obviously it doesn't look like exactly

00:18:41,690 --> 00:18:46,730
like me but I feel like what the code

00:18:43,879 --> 00:18:48,710
just did was a has a very modern art

00:18:46,730 --> 00:18:50,570
feel to it and I feel like this is kind

00:18:48,710 --> 00:18:53,330
of like more expressive of how

00:18:50,570 --> 00:18:56,559
JavaScript sees the world or at least

00:18:53,330 --> 00:18:56,559
this photograph that gave it

00:18:59,559 --> 00:19:04,039
here are some other paintings that did

00:19:02,110 --> 00:19:05,899
you notice that they're kind of

00:19:04,039 --> 00:19:08,450
different but in some ways they're kind

00:19:05,899 --> 00:19:12,259
of the same that's because our inputs

00:19:08,450 --> 00:19:13,820
are the same so what's happening here is

00:19:12,259 --> 00:19:16,220
that I'm using a machine learning

00:19:13,820 --> 00:19:21,529
library written in JavaScript can you

00:19:16,220 --> 00:19:23,360
believe it called synaptic Jas and in

00:19:21,529 --> 00:19:24,830
this code block we have get pixel

00:19:23,360 --> 00:19:27,769
function which I won't go into so

00:19:24,830 --> 00:19:29,929
basically yet pixel sorry get pixel data

00:19:27,769 --> 00:19:32,210
looks at the photograph and goes through

00:19:29,929 --> 00:19:34,879
every pixel and gets the color from each

00:19:32,210 --> 00:19:37,850
and every pixel in the iterate function

00:19:34,879 --> 00:19:40,820
we have our system learning from that

00:19:37,850 --> 00:19:43,639
photograph so in their code we have this

00:19:40,820 --> 00:19:46,129
so Nannette synaptic j s gives us a

00:19:43,639 --> 00:19:49,490
computational model of one neuron call

00:19:46,129 --> 00:19:51,110
it perceptron so in this iterate

00:19:49,490 --> 00:19:52,549
function we have two for loops and

00:19:51,110 --> 00:19:54,820
that's because we're going through the

00:19:52,549 --> 00:20:00,679
horizontal and vertical rows of the

00:19:54,820 --> 00:20:02,090
original photograph then we have

00:20:00,679 --> 00:20:02,899
something called perceptron that

00:20:02,090 --> 00:20:05,480
activate

00:20:02,899 --> 00:20:08,470
so this activate functions under the

00:20:05,480 --> 00:20:11,570
hood is a activation formula or

00:20:08,470 --> 00:20:13,820
mathematical formula which is which

00:20:11,570 --> 00:20:16,279
defines the outputs that our neuron will

00:20:13,820 --> 00:20:18,259
have as basically this very complicated

00:20:16,279 --> 00:20:19,970
mathematical formula which would be

00:20:18,259 --> 00:20:22,879
impossible to do by hand but it's pretty

00:20:19,970 --> 00:20:24,710
trivial for computers so this

00:20:22,879 --> 00:20:28,159
mathematical formula is basically

00:20:24,710 --> 00:20:30,409
Sciences best guess at how a bio

00:20:28,159 --> 00:20:33,769
electrical signal actually moves through

00:20:30,409 --> 00:20:36,049
a neuron and so in the activate function

00:20:33,769 --> 00:20:38,090
our single perceptron is looking at the

00:20:36,049 --> 00:20:38,840
data and trying to figure out what it's

00:20:38,090 --> 00:20:42,259
looking at

00:20:38,840 --> 00:20:44,600
in the propagate function what our

00:20:42,259 --> 00:20:48,320
neuron is doing is that using a dynamic

00:20:44,600 --> 00:20:51,230
rate that is how often it's looking at

00:20:48,320 --> 00:20:55,179
it looks at the pixel location and tries

00:20:51,230 --> 00:20:57,860
to make a guess as to what that color is

00:20:55,179 --> 00:21:00,590
here the preview function is the actual

00:20:57,860 --> 00:21:04,340
drawing actual painting function so it's

00:21:00,590 --> 00:21:06,649
taking the the canvases image data and

00:21:04,340 --> 00:21:08,239
rewriting every single pixel that's why

00:21:06,649 --> 00:21:10,730
we have two for loops because it's going

00:21:08,239 --> 00:21:14,210
through every single row and every

00:21:10,730 --> 00:21:16,999
single column and it's making it's

00:21:14,210 --> 00:21:19,220
basically overwriting each pixel of

00:21:16,999 --> 00:21:23,720
color with its own best guess as to what

00:21:19,220 --> 00:21:25,489
that colored is so in and so in this

00:21:23,720 --> 00:21:27,710
example what we're doing is we're not

00:21:25,489 --> 00:21:30,289
explicitly telling hey at this pixel

00:21:27,710 --> 00:21:31,700
location it should be this color what

00:21:30,289 --> 00:21:34,190
we're actually what we're telling our

00:21:31,700 --> 00:21:37,519
little JavaScript neuron or our neuron

00:21:34,190 --> 00:21:39,169
implemented in JavaScript that hey given

00:21:37,519 --> 00:21:41,359
this pixel location what do you think

00:21:39,169 --> 00:21:43,210
this color shouldn't be judging from

00:21:41,359 --> 00:21:45,080
what you saw

00:21:43,210 --> 00:21:47,210
you'll also notice we have

00:21:45,080 --> 00:21:50,029
requestanimationframe and so what that

00:21:47,210 --> 00:21:52,759
does is that through each call so with

00:21:50,029 --> 00:21:54,830
each frame or perceptron is continually

00:21:52,759 --> 00:21:58,489
learning and that's why we see the

00:21:54,830 --> 00:22:01,460
painting change over time now we take

00:21:58,489 --> 00:22:04,639
the idea of creating an art system based

00:22:01,460 --> 00:22:08,419
on machine learning we get deep style

00:22:04,639 --> 00:22:10,460
transfer so in this paper a neural

00:22:08,419 --> 00:22:12,859
algorithm artistic style the authors

00:22:10,460 --> 00:22:14,659
basically created a convolutional neural

00:22:12,859 --> 00:22:17,119
network so it's basically like our

00:22:14,659 --> 00:22:19,820
perceptron the many many more neurons

00:22:17,119 --> 00:22:22,070
and many many layers of neurons and so

00:22:19,820 --> 00:22:24,769
what this neural network is doing is

00:22:22,070 --> 00:22:26,779
that it's looking at painting and it's

00:22:24,769 --> 00:22:29,029
figuring out all the distinct features

00:22:26,779 --> 00:22:31,129
of this painting oh this by the way is a

00:22:29,029 --> 00:22:34,070
screenshot from the paper so it's

00:22:31,129 --> 00:22:36,350
looking at the painting figuring out the

00:22:34,070 --> 00:22:38,210
distinct features and then given a

00:22:36,350 --> 00:22:40,399
photograph also learning about this

00:22:38,210 --> 00:22:42,200
photograph thinking what are its

00:22:40,399 --> 00:22:45,080
distinct features what are all the rules

00:22:42,200 --> 00:22:46,639
that dictate this photograph and then

00:22:45,080 --> 00:22:48,710
one of the rules that dictate this

00:22:46,639 --> 00:22:52,179
painting and then it tries to combine

00:22:48,710 --> 00:22:55,340
everything it has learned into one image

00:22:52,179 --> 00:22:56,590
so in this screenshot the source for

00:22:55,340 --> 00:23:00,940
regressive is in

00:22:56,590 --> 00:23:03,580
topmost right hand corner and in each

00:23:00,940 --> 00:23:13,720
subsequent sort of picture it's applying

00:23:03,580 --> 00:23:16,840
that painting style to the photograph so

00:23:13,720 --> 00:23:18,910
code is an art medium but as machine

00:23:16,840 --> 00:23:21,940
learning has demonstrated it can be an

00:23:18,910 --> 00:23:24,540
artist collaborator so here's a

00:23:21,940 --> 00:23:26,560
collaboration between me and JavaScript

00:23:24,540 --> 00:23:28,570
we have to wait a while because it's

00:23:26,560 --> 00:23:35,080
learning from that photograph from

00:23:28,570 --> 00:23:37,230
before unless it crashed oh there it

00:23:35,080 --> 00:23:37,230
goes

00:24:17,860 --> 00:24:24,020
so in this joint venture JavaScript is

00:24:21,800 --> 00:24:27,380
making decisions as to what color to use

00:24:24,020 --> 00:24:29,360
where to make a stroke and how

00:24:27,380 --> 00:24:35,000
transparent each stroke should be

00:24:29,360 --> 00:24:36,590
whereas I'm contributing hey this add a

00:24:35,000 --> 00:24:43,460
little bit of red to spice it up a

00:24:36,590 --> 00:24:45,500
little bit sort of a review javascript

00:24:43,460 --> 00:24:48,200
is an artistic medium that can do pursue

00:24:45,500 --> 00:24:50,000
generation parameters ation painting

00:24:48,200 --> 00:24:52,130
with algorithms creating and running

00:24:50,000 --> 00:24:54,200
systems and self learning question mark

00:24:52,130 --> 00:24:56,480
we have a question mark here because

00:24:54,200 --> 00:24:58,370
even though I showed some deep style

00:24:56,480 --> 00:25:00,980
transfer stuff javascript is not capable

00:24:58,370 --> 00:25:02,990
of doing deep cell transfer stuff in a

00:25:00,980 --> 00:25:05,000
timely manner because it does not have

00:25:02,990 --> 00:25:08,059
access to the raw processing power it

00:25:05,000 --> 00:25:11,480
needs you need like some super gain a

00:25:08,059 --> 00:25:14,059
souped up video game machine to do that

00:25:11,480 --> 00:25:16,130
but that's now maybe you'll be working

00:25:14,059 --> 00:25:18,910
on some serviceworker stuff to get deep

00:25:16,130 --> 00:25:21,679
style transfer happening

00:25:18,910 --> 00:25:25,130
you also notice that these rules might

00:25:21,679 --> 00:25:27,170
apply to other programming languages but

00:25:25,130 --> 00:25:29,720
I think JavaScript is a unique artistic

00:25:27,170 --> 00:25:32,750
medium because iterations are cheap

00:25:29,720 --> 00:25:35,240
since it doesn't need to compile you can

00:25:32,750 --> 00:25:37,550
continually make changes to your code

00:25:35,240 --> 00:25:40,460
and then also continually refine your

00:25:37,550 --> 00:25:43,820
ideas according to the piece or about

00:25:40,460 --> 00:25:46,309
the piece you're making and also it's

00:25:43,820 --> 00:25:53,270
easily accessible to everyone with an

00:25:46,309 --> 00:25:56,179
internet internet connection this is no

00:25:53,270 --> 00:25:57,740
way a comprehensive list if you're

00:25:56,179 --> 00:25:59,300
interested in this stuff I would invite

00:25:57,740 --> 00:26:02,150
you to further explore the capabilities

00:25:59,300 --> 00:26:05,300
of JavaScript as an artistic medium but

00:26:02,150 --> 00:26:08,090
also to not treat your artwork as an app

00:26:05,300 --> 00:26:09,920
so what might be a bug that crashes your

00:26:08,090 --> 00:26:12,830
minimal Viable Product might actually

00:26:09,920 --> 00:26:15,740
have some very interesting aesthetic

00:26:12,830 --> 00:26:18,320
effects so I hope this talk has gotten

00:26:15,740 --> 00:26:21,830
you excited about making art with

00:26:18,320 --> 00:26:23,890
JavaScript thanks

00:26:21,830 --> 00:26:23,890

YouTube URL: https://www.youtube.com/watch?v=G6ZHhDPgmfk


