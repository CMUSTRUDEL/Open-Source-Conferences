Title: Matteo Collina: My Node.JS Process Is On Fire - JSConf.Asia 2018
Publication date: 2018-02-07
Playlist: JSConf.Asia 2018
Description: 
	At 10am on Black Friday, your phone rings: the new JS application you deployed came under too much load, and the site has gone down! Your employer is losing sales opportunities... your employer is losing money! But you donâ€™t lose your cool. You log into your cloud provider and tweak your autoscaling settings. Now the deployment can handle the load spike but with four times the number of servers, which is four times the cost. The next day, you try to analyze what happened and begin to optimize your application to prepare for future load spikes. This talk is a journey into the world of Node.js performance, taking a look at the available tools and optimization techniques inspired by insight gained from glimpsing under the hood of Node and V8.

Matteo is a code pirate, mad scientist and part of the Node.js Technical Steering Committee. As a Principal Architect at nearForm, he consults for the top brands of the world. He authored Node.js MQTT Broker, Mosca, the fast logger Pino and the Fastify web framework.


JSConf.Asia - Capitol Theatre, Singapore - 25 January 2018

Source: https://2018.jsconf.asia/

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:00,180 --> 00:00:02,370
[Music]

00:00:14,240 --> 00:00:20,070
so my not process don't fire yes this

00:00:18,480 --> 00:00:22,730
talk is about what to do when your note

00:00:20,070 --> 00:00:25,619
application is it's not behaving okay

00:00:22,730 --> 00:00:28,289
I'm not talking about literally burning

00:00:25,619 --> 00:00:32,070
IOT devices no I've done that doing that

00:00:28,289 --> 00:00:34,170
I'm not doing that anymore stay so I

00:00:32,070 --> 00:00:36,180
don't know how many of you I mean how

00:00:34,170 --> 00:00:38,550
much I don't know how many times

00:00:36,180 --> 00:00:42,270
happened to all of you to be woken up by

00:00:38,550 --> 00:00:43,770
an alarm on Sunday morning because your

00:00:42,270 --> 00:00:45,930
application you spend so much time

00:00:43,770 --> 00:00:49,500
developing was not behaving correctly

00:00:45,930 --> 00:00:52,949
and user were disappointed so while it

00:00:49,500 --> 00:00:55,230
happened to me several times in fact so

00:00:52,949 --> 00:00:58,530
what you do well typically you login

00:00:55,230 --> 00:01:00,420
into your cloud servers cloud provider

00:00:58,530 --> 00:01:02,940
accounts whatever look at what's going

00:01:00,420 --> 00:01:04,799
on and you know you have a bunch number

00:01:02,940 --> 00:01:06,360
maximum number of servers in your auto

00:01:04,799 --> 00:01:10,320
scaling group which you should use all

00:01:06,360 --> 00:01:13,260
the time and applications still not

00:01:10,320 --> 00:01:15,380
behaving so you log in ESS H in the Box

00:01:13,260 --> 00:01:17,970
I don't know you tweak some stuff and

00:01:15,380 --> 00:01:21,689
after a while everything gets back to

00:01:17,970 --> 00:01:25,979
normal and you need a hotfix as as we

00:01:21,689 --> 00:01:28,560
call it now this type of performance

00:01:25,979 --> 00:01:31,320
problem are are very important to solve

00:01:28,560 --> 00:01:33,030
and to prevent so whenever you have you

00:01:31,320 --> 00:01:35,250
have a performance issue or a production

00:01:33,030 --> 00:01:38,939
issue you should really do run a

00:01:35,250 --> 00:01:40,970
post-mortem so after the morning on

00:01:38,939 --> 00:01:45,810
Monday morning you come back to work and

00:01:40,970 --> 00:01:47,670
you you check oh well what happened okay

00:01:45,810 --> 00:01:50,520
and this is the question you ask what

00:01:47,670 --> 00:01:53,369
happen but more importantly you should

00:01:50,520 --> 00:01:55,500
check you should ask yourself how to fix

00:01:53,369 --> 00:01:57,570
this so this is the road to fix things

00:01:55,500 --> 00:02:01,439
in production is first of all gather

00:01:57,570 --> 00:02:03,479
Diagnostics data and evidence so again

00:02:01,439 --> 00:02:07,560
if you have set up some some logging

00:02:03,479 --> 00:02:09,300
infrastructure some monitoring cloud

00:02:07,560 --> 00:02:11,459
watch one of those whatever you want to

00:02:09,300 --> 00:02:12,780
use a lot of services in there at the

00:02:11,459 --> 00:02:15,000
APM area

00:02:12,780 --> 00:02:18,290
and with this diagnostic you need to be

00:02:15,000 --> 00:02:20,700
able to reproduce the problem in a

00:02:18,290 --> 00:02:22,470
non-production live environment so you

00:02:20,700 --> 00:02:24,270
can really produce the problem yes and

00:02:22,470 --> 00:02:26,370
after you can reproduce it as it is

00:02:24,270 --> 00:02:28,440
still on a cloud environment and after

00:02:26,370 --> 00:02:30,090
you are able to do that then you can try

00:02:28,440 --> 00:02:31,470
and reproduce in the problem on you on

00:02:30,090 --> 00:02:33,060
your box now where pollution is the

00:02:31,470 --> 00:02:34,860
problem on your box is important because

00:02:33,060 --> 00:02:38,310
it means it's very easy then to work on

00:02:34,860 --> 00:02:39,989
this stuff on there and gather some more

00:02:38,310 --> 00:02:41,730
diagnostic and evidence the type of

00:02:39,989 --> 00:02:44,250
diagnostics and evidence you can gather

00:02:41,730 --> 00:02:46,260
from your box are way more detailed than

00:02:44,250 --> 00:02:47,880
what you can get on the cloud because

00:02:46,260 --> 00:02:51,019
you are not limited by the hover head of

00:02:47,880 --> 00:02:53,730
fire off of the tools you want to use so

00:02:51,019 --> 00:02:57,350
then you try to fix the problem several

00:02:53,730 --> 00:02:59,730
times several times several times and

00:02:57,350 --> 00:03:04,230
you if it's not fixed and you go back

00:02:59,730 --> 00:03:07,489
and you try again and more Diagnostics

00:03:04,230 --> 00:03:10,739
fix it whatever so how do we fix things

00:03:07,489 --> 00:03:12,750
the most important bit it's establishing

00:03:10,739 --> 00:03:16,860
a measurable goal and I will get back to

00:03:12,750 --> 00:03:19,500
this later on and then you measure so

00:03:16,860 --> 00:03:20,790
how you get good measurements and then

00:03:19,500 --> 00:03:22,260
we find what we call the bottleneck

00:03:20,790 --> 00:03:24,209
which is what is lowing down your

00:03:22,260 --> 00:03:26,579
application and then we fix the

00:03:24,209 --> 00:03:28,440
bottleneck we remove that bottleneck and

00:03:26,579 --> 00:03:32,130
ideally that will show another

00:03:28,440 --> 00:03:35,310
bottleneck and and so on and we measure

00:03:32,130 --> 00:03:39,570
again and if it's not fixed we go back

00:03:35,310 --> 00:03:42,390
and find a new bottleneck optimize

00:03:39,570 --> 00:03:44,760
measure all over again up until our

00:03:42,390 --> 00:03:46,739
measurable goal is solved now how do we

00:03:44,760 --> 00:03:48,780
establish a measurable goal well

00:03:46,739 --> 00:03:50,870
typically you can talk to your boss and

00:03:48,780 --> 00:03:54,060
get something like this from him

00:03:50,870 --> 00:03:55,829
whatever this means what's something

00:03:54,060 --> 00:03:57,750
that's valuable for your application

00:03:55,829 --> 00:03:59,130
okay how many concurrent user per

00:03:57,750 --> 00:04:01,140
servers you want to achieve you want to

00:03:59,130 --> 00:04:04,230
reach what's the maximum latency you

00:04:01,140 --> 00:04:06,359
need to have those are very important

00:04:04,230 --> 00:04:09,480
numbers whatever it is this is very

00:04:06,359 --> 00:04:11,970
generic things that you can pick take

00:04:09,480 --> 00:04:15,239
and use it okay but every application

00:04:11,970 --> 00:04:17,130
has its own business requirements when

00:04:15,239 --> 00:04:18,539
developing nodejs application you need

00:04:17,130 --> 00:04:22,109
to remember that latency and throughput

00:04:18,539 --> 00:04:25,320
are connected to each other and because

00:04:22,109 --> 00:04:27,780
node is single threaded however

00:04:25,320 --> 00:04:29,280
and this means that multiple ru action

00:04:27,780 --> 00:04:33,090
running parallel but one single

00:04:29,280 --> 00:04:34,860
JavaScript function it can execute and

00:04:33,090 --> 00:04:36,210
when multiple are you are in parallel

00:04:34,860 --> 00:04:38,670
like for example multiple database

00:04:36,210 --> 00:04:41,520
connections you know you have an

00:04:38,670 --> 00:04:44,520
increased concurrency and if the latency

00:04:41,520 --> 00:04:46,110
of those u action gets higher because

00:04:44,520 --> 00:04:48,870
you might have a database problem for

00:04:46,110 --> 00:04:51,300
example you having typically the

00:04:48,870 --> 00:04:55,560
concurrency increases but that when that

00:04:51,300 --> 00:04:57,990
happened memory usage spikes and when

00:04:55,560 --> 00:05:00,630
memory uses spikes this increased the

00:04:57,990 --> 00:05:03,450
garbage collection activity so when all

00:05:00,630 --> 00:05:04,830
of these are connected it means that the

00:05:03,450 --> 00:05:07,170
garbage collection activity impact your

00:05:04,830 --> 00:05:09,120
CPU cycles and the execution of your

00:05:07,170 --> 00:05:11,880
JavaScript functions so all of these

00:05:09,120 --> 00:05:14,310
things are all interconnected 2000 imita

00:05:11,880 --> 00:05:19,530
resources that your CPU has your your

00:05:14,310 --> 00:05:21,750
processes so in order to establish a

00:05:19,530 --> 00:05:24,870
good measure we can use this to call out

00:05:21,750 --> 00:05:26,580
to cannon is an HTTP load tester runs on

00:05:24,870 --> 00:05:28,380
Mac Windows Linux very trivial

00:05:26,580 --> 00:05:30,090
installation you don't have to compile

00:05:28,380 --> 00:05:31,920
anything it just comes out it you have

00:05:30,090 --> 00:05:33,690
it will compile something but we are

00:05:31,920 --> 00:05:36,480
getting rid of that Italy sooner rather

00:05:33,690 --> 00:05:38,130
than later how do you use it you start

00:05:36,480 --> 00:05:39,600
your node server then you start out ok

00:05:38,130 --> 00:05:41,580
now specifying the number of connections

00:05:39,600 --> 00:05:43,710
the duration some other parameters and

00:05:41,580 --> 00:05:46,920
it gets you some statistics including

00:05:43,710 --> 00:05:50,160
the latency so how do we find the

00:05:46,920 --> 00:05:50,970
bottleneck well you need to gather some

00:05:50,160 --> 00:05:52,710
more Diagnostics

00:05:50,970 --> 00:05:55,320
now we have a Mac we have measure we

00:05:52,710 --> 00:05:57,870
know our standard goal we can compute a

00:05:55,320 --> 00:06:00,060
gap between the two and we need to

00:05:57,870 --> 00:06:01,980
gather some more some more Diagnostics

00:06:00,060 --> 00:06:03,870
we can use this new tool that we have

00:06:01,980 --> 00:06:05,760
just released called node clinic

00:06:03,870 --> 00:06:09,630
you can NPM install clinic if you want

00:06:05,760 --> 00:06:11,550
to and what you need this tool has two

00:06:09,630 --> 00:06:12,840
comments inside one is called dr. and

00:06:11,550 --> 00:06:13,590
one is called flame and then we show

00:06:12,840 --> 00:06:16,140
them in a moment

00:06:13,590 --> 00:06:17,400
the first one is doctor it's nice logo I

00:06:16,140 --> 00:06:21,450
don't know if you like it but I hope so

00:06:17,400 --> 00:06:22,320
a friendly doctor and you can literally

00:06:21,450 --> 00:06:24,900
type

00:06:22,320 --> 00:06:27,030
clinic doctor note server these stalls a

00:06:24,900 --> 00:06:29,820
bunch of things probes ensure your not

00:06:27,030 --> 00:06:31,650
server into your server and it can

00:06:29,820 --> 00:06:34,470
generate some some useful statistics out

00:06:31,650 --> 00:06:37,919
of it let's do that so here it is

00:06:34,470 --> 00:06:39,150
OOP this went up can use OPI hopefully

00:06:37,919 --> 00:06:44,010
you can see this okay

00:06:39,150 --> 00:06:47,490
so what you do you do clinic doctor - -

00:06:44,010 --> 00:06:51,720
no demons is my demo code so as you see

00:06:47,490 --> 00:06:54,389
is spinning up the it's using its using

00:06:51,720 --> 00:06:56,100
trace events to gather together some

00:06:54,389 --> 00:06:58,949
most advanced statistics this is still

00:06:56,100 --> 00:07:01,620
an experimental feature in no date so we

00:06:58,949 --> 00:07:02,940
run the stuff and after turn with

00:07:01,620 --> 00:07:05,820
control C on the server

00:07:02,940 --> 00:07:07,199
and you generate this type of diagram so

00:07:05,820 --> 00:07:09,300
in this diagram it can tell you some

00:07:07,199 --> 00:07:10,710
some very nice things for example you

00:07:09,300 --> 00:07:13,020
can tell you that we have detected the

00:07:10,710 --> 00:07:14,580
potential event loop issue and how we

00:07:13,020 --> 00:07:17,699
can do that well you can see here that

00:07:14,580 --> 00:07:20,460
you can that this process the event loop

00:07:17,699 --> 00:07:21,090
delay it keeps growing okay up to almost

00:07:20,460 --> 00:07:22,949
three seconds

00:07:21,090 --> 00:07:25,710
well it's buggy okay it's a demo of some

00:07:22,949 --> 00:07:28,410
code you should never write and we can

00:07:25,710 --> 00:07:30,300
also track a memory usage but the very

00:07:28,410 --> 00:07:32,100
nice thing about this tool it's it has a

00:07:30,300 --> 00:07:33,300
recommendation panel which it tells you

00:07:32,100 --> 00:07:36,180
what to do when you have this type of

00:07:33,300 --> 00:07:38,729
issues so in this thing you can press

00:07:36,180 --> 00:07:40,919
ample implement HTTP 503 event loop

00:07:38,729 --> 00:07:42,300
protection it's a very important thing

00:07:40,919 --> 00:07:43,590
you should have in your application but

00:07:42,300 --> 00:07:46,169
you can also recommend you to use a tool

00:07:43,590 --> 00:07:48,900
called clinic flame to discover the CPU

00:07:46,169 --> 00:07:50,550
intensive functions and there's a lot of

00:07:48,900 --> 00:07:52,740
explanation of all of this so stuff to

00:07:50,550 --> 00:07:55,260
follow we also have brought other

00:07:52,740 --> 00:07:57,180
undetected issues so you can also read

00:07:55,260 --> 00:07:59,039
the guide for example on how to solve

00:07:57,180 --> 00:08:00,930
your problems or garbage collection

00:07:59,039 --> 00:08:02,160
problems which are not memory leaks are

00:08:00,930 --> 00:08:03,599
more problems where the garbage

00:08:02,160 --> 00:08:08,630
collection is interacting with your

00:08:03,599 --> 00:08:11,460
application in and not so nice way so

00:08:08,630 --> 00:08:13,050
this is it this was my fault back then

00:08:11,460 --> 00:08:15,150
the other tool is called clinic flame

00:08:13,050 --> 00:08:16,380
and this is based on another thing

00:08:15,150 --> 00:08:17,880
called zero acts it's using it

00:08:16,380 --> 00:08:21,150
internally that we've developed before

00:08:17,880 --> 00:08:24,389
and how to use it again similar pattern

00:08:21,150 --> 00:08:28,199
clinic flame - - note server so what we

00:08:24,389 --> 00:08:32,729
do is we run it this way clinic flame -

00:08:28,199 --> 00:08:34,380
- no demo and this requires your root

00:08:32,729 --> 00:08:37,140
password because it needs to use some

00:08:34,380 --> 00:08:39,589
low level

00:08:37,140 --> 00:08:43,229
Institute to use some low level

00:08:39,589 --> 00:08:46,950
diagnostic tools called D traced on mac

00:08:43,229 --> 00:08:50,040
and prof on linux okay now we have run

00:08:46,950 --> 00:08:52,080
this then we eat ctrl C and all of these

00:08:50,040 --> 00:08:54,240
crunching stuff of course takes

00:08:52,080 --> 00:08:57,000
time all of these arguments are very

00:08:54,240 --> 00:08:59,580
complicated now let me zoom in because

00:08:57,000 --> 00:09:01,770
of course what you can see it generates

00:08:59,580 --> 00:09:04,560
this type of diagram where this a very

00:09:01,770 --> 00:09:06,390
odd function called sleep now I hope all

00:09:04,560 --> 00:09:08,490
of you guess what the type of code that

00:09:06,390 --> 00:09:11,130
I have written for this demo which is

00:09:08,490 --> 00:09:13,650
very simple which is this thing it has a

00:09:11,130 --> 00:09:16,020
slip function that just actively wait

00:09:13,650 --> 00:09:17,490
for something to happen very trivial

00:09:16,020 --> 00:09:19,700
okay you should never write this type of

00:09:17,490 --> 00:09:22,770
simple function in your code base okay

00:09:19,700 --> 00:09:27,420
but you can detect some very complicated

00:09:22,770 --> 00:09:29,280
code in there as well for example so I

00:09:27,420 --> 00:09:33,980
want to go through I want to just say

00:09:29,280 --> 00:09:37,770
that tomorrow and then I am I'm doing a

00:09:33,980 --> 00:09:42,840
performance worship with my colleague

00:09:37,770 --> 00:09:46,290
Josh and in which we will get lost in

00:09:42,840 --> 00:09:49,710
the rabbit hole of performance so in

00:09:46,290 --> 00:09:51,150
this in this workshop we will go through

00:09:49,710 --> 00:09:53,990
how to diagnose a performance problem

00:09:51,150 --> 00:09:55,980
using clinic but also using other things

00:09:53,990 --> 00:09:59,370
for example how to use the node

00:09:55,980 --> 00:10:01,410
inspector and other stuff like that we

00:09:59,370 --> 00:10:03,300
will also use frame graphs to know where

00:10:01,410 --> 00:10:06,750
is the problem okay as I showed there

00:10:03,300 --> 00:10:08,640
that was very simple and trivial but the

00:10:06,750 --> 00:10:09,060
probe what we will see what we'll see

00:10:08,640 --> 00:10:10,770
tomorrow

00:10:09,060 --> 00:10:15,660
it's way more complicated and way more

00:10:10,770 --> 00:10:19,650
deep and then we will dig deep into v8

00:10:15,660 --> 00:10:22,710
flags to understand what is happening if

00:10:19,650 --> 00:10:25,710
you'd go into we have been talked with

00:10:22,710 --> 00:10:28,800
fluckey before that there is a thing

00:10:25,710 --> 00:10:30,690
called inlining okay and we will dig

00:10:28,800 --> 00:10:32,250
deep into the wall optimization cycle

00:10:30,690 --> 00:10:35,060
and the optimization and the

00:10:32,250 --> 00:10:39,300
optimization cycle art of v8 and

00:10:35,060 --> 00:10:42,630
turbofan and and we what we use to do

00:10:39,300 --> 00:10:45,510
this is as low is this low rest API so

00:10:42,630 --> 00:10:50,430
as low what we mean is I provide you a

00:10:45,510 --> 00:10:52,740
nice application and you can do that you

00:10:50,430 --> 00:10:54,660
should so this wall talk was about

00:10:52,740 --> 00:10:57,840
performance optimization but I want to

00:10:54,660 --> 00:11:01,200
spend 30 seconds saying that you don't

00:10:57,840 --> 00:11:03,180
need to over optimize your code so the

00:11:01,200 --> 00:11:06,290
important part about optimizing ojs

00:11:03,180 --> 00:11:10,679
applications is only about

00:11:06,290 --> 00:11:14,009
doing this when it's needed okay and and

00:11:10,679 --> 00:11:15,809
to meet your business goals so over

00:11:14,009 --> 00:11:17,419
optimizing the code is most most of the

00:11:15,809 --> 00:11:21,720
time not a good idea

00:11:17,419 --> 00:11:25,019
please remember this and do not do not

00:11:21,720 --> 00:11:27,720
fall in the trap okay I want to thank

00:11:25,019 --> 00:11:29,369
near front while building this tool it's

00:11:27,720 --> 00:11:31,379
open source so you can download it now

00:11:29,369 --> 00:11:34,739
this is a couple of block big blog post

00:11:31,379 --> 00:11:36,480
coming out in about this I would also

00:11:34,739 --> 00:11:40,850
want to thank the team that helped

00:11:36,480 --> 00:11:44,579
building this tool and Reyes joy corner

00:11:40,850 --> 00:11:45,929
matheus Allen and Camille this

00:11:44,579 --> 00:11:48,029
presentation is available a couple of

00:11:45,929 --> 00:11:49,980
places these and this it's you can take

00:11:48,029 --> 00:11:54,389
a picture if you want that's the best

00:11:49,980 --> 00:11:57,059
way to get this content and I am on time

00:11:54,389 --> 00:12:02,429
so even a little bit early but that's

00:11:57,059 --> 00:12:04,679
fine so this is me hi I am a police Jeep

00:12:02,429 --> 00:12:06,089
allocated at near four and I'm also a

00:12:04,679 --> 00:12:09,119
member of the technical steering

00:12:06,089 --> 00:12:13,559
committee of the of nodejs so I help

00:12:09,119 --> 00:12:15,329
maintain the nodes AES runtime so if you

00:12:13,559 --> 00:12:18,089
have any questions about not a yes come

00:12:15,329 --> 00:12:23,730
and ask me okay I also write a lot of

00:12:18,089 --> 00:12:28,100
code as you can see and thank you folks

00:12:23,730 --> 00:12:28,100

YouTube URL: https://www.youtube.com/watch?v=G9Vkpe55Gu8


