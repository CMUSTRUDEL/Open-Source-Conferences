Title: István Szmozsánszky "Flaki": Honey, I Shrunk The Scripts — The Secret Life Of ... - JSConf.Asia 2018
Publication date: 2018-02-14
Playlist: JSConf.Asia 2018
Description: 
	In 2015 I published an article on JavaScript's "World Domination". Back then, a bit more than two years ago, in this 6000-word beast JavaScript on hardware was almost like an afterthought, a footnote on the last page and a bit. But even then, the writing was already on the wall — it was only a matter of time until JavaScript's triumphant march reached the most minute of the silicone army… Indeed,two years later, there's already this thriving ecosystem of tiny JavaScript-dialects: they are powering a wide variety of miniature computers (colloquially only referred to as ""IoT""), from industry automations to smartwatches, they are everywhere. My bet is, even if you have never heard of JerryScript, duktape, or V7 before — you surely will want to now. ;)

István (or Flaki, for short) is a JavaScript world-domination prophet, engineer & trainer from Budapest. He runs his own consulting business Skylark, is a Frontend Trainer @ DPC Consulting and a longtime Mozilla-contributor. He contributes to various open source projects like Firefox, Firefox OS, Rust, Servo and the Tessel Project.
His favorite topics include service workers, progressive webapps and JS on microcontrollers.


JSConf.Asia - Capitol Theatre, Singapore - 25 January 2018

Source: https://2018.jsconf.asia/

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:00,180 --> 00:00:19,020
[Music]

00:00:15,650 --> 00:00:21,330
there's a very re so today Thomas

00:00:19,020 --> 00:00:23,160
inception or Thomas section whatever you

00:00:21,330 --> 00:00:25,890
might go to a conference in sumption

00:00:23,160 --> 00:00:27,900
this my dear friend Bella who you can

00:00:25,890 --> 00:00:29,490
see co-presenting right next to me I

00:00:27,900 --> 00:00:32,520
made you a key mistake on my last

00:00:29,490 --> 00:00:34,200
conference to forget my co-presenter I'm

00:00:32,520 --> 00:00:36,180
never gonna make that mistake again

00:00:34,200 --> 00:00:40,440
so yeah you're gonna be talking about

00:00:36,180 --> 00:00:43,620
JavaScript or hardware or you could also

00:00:40,440 --> 00:00:46,800
put it all these gadgets

00:00:43,620 --> 00:00:50,250
I'm estimates moshansky you can reach me

00:00:46,800 --> 00:00:56,610
in twitter at SL Softworks if you really

00:00:50,250 --> 00:00:59,640
want to and I'm I'm always asked what do

00:00:56,610 --> 00:01:01,770
you really do and I was like yeah I'm a

00:00:59,640 --> 00:01:04,530
JavaScript developer also you program I

00:01:01,770 --> 00:01:08,310
was like no not really I kind of write

00:01:04,530 --> 00:01:10,350
emails like 24/7 but yeah because I do a

00:01:08,310 --> 00:01:12,060
lot of community management conferences

00:01:10,350 --> 00:01:15,680
I'm a missile text because this is the

00:01:12,060 --> 00:01:18,659
big blue t-shirt and colorful heart

00:01:15,680 --> 00:01:20,880
which is which one of the reasons why

00:01:18,659 --> 00:01:22,530
I'm put on this stage and many other

00:01:20,880 --> 00:01:23,880
stages as well and we're gonna be

00:01:22,530 --> 00:01:28,320
talking about the decimal in a short

00:01:23,880 --> 00:01:29,820
while so that's not who knows this dear

00:01:28,320 --> 00:01:33,119
person right here

00:01:29,820 --> 00:01:35,729
although will help this is 2009 I just

00:01:33,119 --> 00:01:39,060
hands up if anybody all right

00:01:35,729 --> 00:01:43,049
there's at least one this darling is

00:01:39,060 --> 00:01:47,009
ryan doll and this is Jay's Kampf EU

00:01:43,049 --> 00:01:51,689
2009 where no GS was presented for the

00:01:47,009 --> 00:01:55,020
very first time noches zero point one

00:01:51,689 --> 00:01:57,750
point 17 if I'm not mistaken something

00:01:55,020 --> 00:02:01,530
like that they were waiting the big 0

00:01:57,750 --> 00:02:04,619
put do version to command and why are we

00:02:01,530 --> 00:02:06,960
starting window Jess and in a JavaScript

00:02:04,619 --> 00:02:10,739
a microcontroller or Hardware talk well

00:02:06,960 --> 00:02:13,800
you know the there's a lot that

00:02:10,739 --> 00:02:16,739
influenced were the hardware communities

00:02:13,800 --> 00:02:20,700
and the JavaScript and web hardware

00:02:16,739 --> 00:02:23,520
community is that currently but the main

00:02:20,700 --> 00:02:27,330
influence was mostly nodejs because when

00:02:23,520 --> 00:02:30,750
no just came out it the browser and this

00:02:27,330 --> 00:02:33,900
javascript language lost its shackles

00:02:30,750 --> 00:02:35,430
its freed from its shackles being only a

00:02:33,900 --> 00:02:37,830
thing in the browser

00:02:35,430 --> 00:02:40,860
no jesus brought it to your computer's

00:02:37,830 --> 00:02:42,959
common line brought it to your servers

00:02:40,860 --> 00:02:47,819
and eventually to your hardware devices

00:02:42,959 --> 00:02:50,040
and i wrote this article you know

00:02:47,819 --> 00:02:54,440
shameless plug here javascript world

00:02:50,040 --> 00:03:01,709
domination and has anybody read this one

00:02:54,440 --> 00:03:05,129
gee i have less happy than then I not

00:03:01,709 --> 00:03:07,620
seeing hands on Ryan the ha face anyway

00:03:05,129 --> 00:03:10,590
it turned out to be a really long lead

00:03:07,620 --> 00:03:12,720
and even this already haven't really

00:03:10,590 --> 00:03:16,560
mentioned Harvard that much this was two

00:03:12,720 --> 00:03:19,590
and a half years ago maybe but even then

00:03:16,560 --> 00:03:22,530
like the writing was on the ball because

00:03:19,590 --> 00:03:25,230
you can already see the emerging act

00:03:22,530 --> 00:03:30,239
echo system around you know IOT smart

00:03:25,230 --> 00:03:32,370
devices and all that so it's it's due to

00:03:30,239 --> 00:03:35,190
an update because a lot of things have

00:03:32,370 --> 00:03:37,200
happened since then because JavaScript

00:03:35,190 --> 00:03:39,569
has finally arrived to the hardware and

00:03:37,200 --> 00:03:42,330
what I'm saying you know JavaScript

00:03:39,569 --> 00:03:44,159
arrived on the hardware but first we are

00:03:42,330 --> 00:03:47,340
going to be talking about is really no

00:03:44,159 --> 00:03:52,319
BOTS so note about is really hardware

00:03:47,340 --> 00:03:56,879
plus no GS we took smells like node

00:03:52,319 --> 00:03:59,689
robotics but no chairs and so there is a

00:03:56,879 --> 00:04:01,980
trick here actually javascript is not

00:03:59,689 --> 00:04:03,780
really on the heart verb and you know

00:04:01,980 --> 00:04:06,870
talking about

00:04:03,780 --> 00:04:09,690
nodebots there are a few ways to do this

00:04:06,870 --> 00:04:12,720
but the number one ways to do this is

00:04:09,690 --> 00:04:18,030
johnny-five which is a library you could

00:04:12,720 --> 00:04:20,609
install for your new GS install under

00:04:18,030 --> 00:04:23,480
nodejs it's an NPM package you install

00:04:20,609 --> 00:04:28,080
it as a usual and you can use your node

00:04:23,480 --> 00:04:30,650
script to control a device to control a

00:04:28,080 --> 00:04:33,240
hardware device from inside your node.js

00:04:30,650 --> 00:04:35,810
JavaScript code but your code is

00:04:33,240 --> 00:04:38,940
actually not run on the device itself

00:04:35,810 --> 00:04:41,460
the code runs on your computer and the

00:04:38,940 --> 00:04:44,940
commands are transferred to the device

00:04:41,460 --> 00:04:47,970
itself still it's not bad I mean it got

00:04:44,940 --> 00:04:53,040
you some node boats not just some node

00:04:47,970 --> 00:04:55,650
BOTS got you some node quadrocopters

00:04:53,040 --> 00:04:57,210
which is pretty cool from something

00:04:55,650 --> 00:05:01,800
that's not running on the hardware right

00:04:57,210 --> 00:05:04,710
and 2014 there was this conference in

00:05:01,800 --> 00:05:07,320
jail scoff in the US and they were like

00:05:04,710 --> 00:05:10,860
we already have all the node robots and

00:05:07,320 --> 00:05:15,440
and Volkers and boats and there is one

00:05:10,860 --> 00:05:21,590
thing we don't have yeah that is right

00:05:15,440 --> 00:05:25,729
what you see here is in a rocket well

00:05:21,590 --> 00:05:27,720
there is no need to see other the fire

00:05:25,729 --> 00:05:30,110
agency just yet

00:05:27,720 --> 00:05:33,300
this was pressure using pressurized

00:05:30,110 --> 00:05:36,060
water to launch rockets in kiddie air

00:05:33,300 --> 00:05:38,700
but I mean it is a rocket right it

00:05:36,060 --> 00:05:42,630
blasts often it flies it's a rocket it's

00:05:38,700 --> 00:05:45,330
it's good enough so how did they

00:05:42,630 --> 00:05:49,530
accomplish this is something called node

00:05:45,330 --> 00:05:52,860
serial port was insurmountable which

00:05:49,530 --> 00:05:55,590
basically lets you connect no GS with an

00:05:52,860 --> 00:05:59,490
Arduino device or a any other hardware

00:05:55,590 --> 00:06:01,290
device when you did that what you did is

00:05:59,490 --> 00:06:02,520
you had your node.js and you're running

00:06:01,290 --> 00:06:05,669
on your computer and you've installed

00:06:02,520 --> 00:06:08,940
the node 0 port library which then went

00:06:05,669 --> 00:06:12,060
on and you could write your code in your

00:06:08,940 --> 00:06:14,910
node.js application you connected in

00:06:12,060 --> 00:06:17,310
some way in one way or another

00:06:14,910 --> 00:06:20,970
the microcontroller you wanted to

00:06:17,310 --> 00:06:23,810
control and the natural port library

00:06:20,970 --> 00:06:28,430
used to send your commands to this other

00:06:23,810 --> 00:06:31,260
device using something like a Fermata

00:06:28,430 --> 00:06:33,540
command for mother is basically a

00:06:31,260 --> 00:06:37,020
protocol that you're gonna be using to

00:06:33,540 --> 00:06:39,210
give comments to other devices so you

00:06:37,020 --> 00:06:42,720
have your micro controller you have

00:06:39,210 --> 00:06:46,050
Fermanagh connecting the two you have

00:06:42,720 --> 00:06:47,730
another computer that's translating your

00:06:46,050 --> 00:06:50,460
JavaScript code that you wrote for

00:06:47,730 --> 00:06:53,070
nodejs into this platform our protocol

00:06:50,460 --> 00:06:56,010
and sends your commands 2d 2d 2d

00:06:53,070 --> 00:06:59,370
hardware device by the way these

00:06:56,010 --> 00:07:02,610
pictures are taken from the wonderful

00:06:59,370 --> 00:07:06,060
babbling mid merfolk talk by sis Hinton

00:07:02,610 --> 00:07:07,860
or Nootka most people usually know her

00:07:06,060 --> 00:07:10,470
lately from her twitch streaming

00:07:07,860 --> 00:07:12,060
open-source development she's amazing

00:07:10,470 --> 00:07:14,400
and you should definitely watch this

00:07:12,060 --> 00:07:16,590
talk because it's amazing for an

00:07:14,400 --> 00:07:18,900
introduction to hard I think to date

00:07:16,590 --> 00:07:20,940
this is probably one of the best ones if

00:07:18,900 --> 00:07:23,970
you never brought a work with hardware

00:07:20,940 --> 00:07:30,510
it has all what you want cute animals

00:07:23,970 --> 00:07:32,850
and interesting technical bits told very

00:07:30,510 --> 00:07:34,650
well so if you want to get into and what

00:07:32,850 --> 00:07:35,460
you get no more about Arduinos and

00:07:34,650 --> 00:07:38,670
firmata

00:07:35,460 --> 00:07:40,440
you're gonna be starting here there's

00:07:38,670 --> 00:07:42,090
going to be a lot a bunch of links at

00:07:40,440 --> 00:07:45,600
the end of this presentation you can

00:07:42,090 --> 00:07:48,060
find it there so here's the thing

00:07:45,600 --> 00:07:51,540
like I said these devices were really

00:07:48,060 --> 00:07:54,000
running JavaScript on the harbor so what

00:07:51,540 --> 00:07:56,250
you really wanted to have something a

00:07:54,000 --> 00:07:58,590
device that runs JavaScript on the

00:07:56,250 --> 00:08:00,570
hardware itself you know debry like it

00:07:58,590 --> 00:08:04,200
said writing was on the wall everybody

00:08:00,570 --> 00:08:09,240
wanted to code easily hardware devices

00:08:04,200 --> 00:08:10,950
on in their favorite language so the

00:08:09,240 --> 00:08:13,230
castle I mentioned before this is a

00:08:10,950 --> 00:08:15,450
microcontroller that actually brought me

00:08:13,230 --> 00:08:16,350
into programming hardware in the first

00:08:15,450 --> 00:08:20,730
place

00:08:16,350 --> 00:08:25,960
it had a crowdfunding campaign roughly

00:08:20,730 --> 00:08:31,600
three years ago you can see 2015 January

00:08:25,960 --> 00:08:35,529
I was a time oh it's almost exactly it's

00:08:31,600 --> 00:08:37,690
gonna be in January 27 nice that I

00:08:35,529 --> 00:08:40,839
presented the very first time at

00:08:37,690 --> 00:08:43,270
Budapest Jas in Hungary about Harvard

00:08:40,839 --> 00:08:44,709
and JavaScript in the first place

00:08:43,270 --> 00:08:46,660
because the test song was a

00:08:44,709 --> 00:08:48,490
microcontroller that was running

00:08:46,660 --> 00:08:51,520
JavaScript which is a bit of a stretch

00:08:48,490 --> 00:08:53,440
but it was running your code on the

00:08:51,520 --> 00:08:55,870
hardware itself and then just sending

00:08:53,440 --> 00:08:57,430
comments to the hardware what I'm saying

00:08:55,870 --> 00:09:02,170
that this that this is a bit of a

00:08:57,430 --> 00:09:04,450
stretch is I always have one image in

00:09:02,170 --> 00:09:07,750
any member of my presentation that is

00:09:04,450 --> 00:09:11,230
just not loading so my dear friend John

00:09:07,750 --> 00:09:15,010
Mackay who is not going to be presented

00:09:11,230 --> 00:09:19,360
on stage here has a very excellent talk

00:09:15,010 --> 00:09:24,300
he is the founder of the project he is a

00:09:19,360 --> 00:09:28,750
founder of the project that the tassel

00:09:24,300 --> 00:09:32,020
he created the tassel project and he was

00:09:28,750 --> 00:09:34,180
a initially a part of a team a start of

00:09:32,020 --> 00:09:37,120
team who created the original tassel and

00:09:34,180 --> 00:09:40,810
he had a very great talk about the

00:09:37,120 --> 00:09:42,850
perils of running nodejs

00:09:40,810 --> 00:09:45,190
on a microcontroller because that's what

00:09:42,850 --> 00:09:48,399
they tried to do so what the test I'll

00:09:45,190 --> 00:09:50,170
try to do is they try to put nodejs onto

00:09:48,399 --> 00:09:53,800
the microcontroller that was this low

00:09:50,170 --> 00:09:56,470
power device but how they accomplish

00:09:53,800 --> 00:09:59,680
that is actually they use Lua who here

00:09:56,470 --> 00:10:01,990
knows who not do is alright at least

00:09:59,680 --> 00:10:05,829
there is a few people Solo is very

00:10:01,990 --> 00:10:09,579
similar language in terms of complexity

00:10:05,829 --> 00:10:12,070
to JavaScript for the average you know

00:10:09,579 --> 00:10:15,850
person looking at the cue languages one

00:10:12,070 --> 00:10:18,070
might even confuse it to Lua is that

00:10:15,850 --> 00:10:20,740
explicitly made for embedding and

00:10:18,070 --> 00:10:23,279
scripting a bunch of like World of

00:10:20,740 --> 00:10:27,279
Warcraft is scripted in Lua for example

00:10:23,279 --> 00:10:30,160
under a fantasy consoles used in law the

00:10:27,279 --> 00:10:32,740
languages have very similar types and in

00:10:30,160 --> 00:10:35,020
general very similar to each other so

00:10:32,740 --> 00:10:38,079
they decided to create a compiler that

00:10:35,020 --> 00:10:39,250
compiles your code from javascript to

00:10:38,079 --> 00:10:41,830
Lua and

00:10:39,250 --> 00:10:44,080
Lua on the actual device itself so it

00:10:41,830 --> 00:10:46,930
still your code running on the device

00:10:44,080 --> 00:10:49,390
itself but it's transformed to something

00:10:46,930 --> 00:10:51,340
that the device could run later could

00:10:49,390 --> 00:10:54,640
run itself we're gonna be talking about

00:10:51,340 --> 00:10:57,430
bit more about this later why is that a

00:10:54,640 --> 00:10:59,260
good idea and if you watched John's

00:10:57,430 --> 00:11:02,620
video he will tell you why is that a

00:10:59,260 --> 00:11:05,890
terrible idea the number one is the node

00:11:02,620 --> 00:11:11,850
ecosystem itself NPM itself needs a lot

00:11:05,890 --> 00:11:13,900
of breeds a lot of compatibility issue

00:11:11,850 --> 00:11:16,630
especially when you're trying to cater

00:11:13,900 --> 00:11:19,180
for it and JavaScript itself is not as

00:11:16,630 --> 00:11:22,450
easy as it seems and not as easy to

00:11:19,180 --> 00:11:25,510
compile to Lua as it seems and a bunch

00:11:22,450 --> 00:11:27,430
of other things if you are thinking of

00:11:25,510 --> 00:11:29,830
doing a hardware startup ever or just

00:11:27,430 --> 00:11:31,810
this chart up in general he has very

00:11:29,830 --> 00:11:37,780
good takeaways from the whole startup

00:11:31,810 --> 00:11:39,790
thing as well so as as I said you will

00:11:37,780 --> 00:11:43,810
find the link later on the slides and

00:11:39,790 --> 00:11:45,820
the presentations so ok running nodejs a

00:11:43,810 --> 00:11:48,220
microcontroller might not be a good idea

00:11:45,820 --> 00:11:51,730
maybe let's try just running playing

00:11:48,220 --> 00:11:56,350
JavaScript and this is what the Espino

00:11:51,730 --> 00:11:59,110
is gonna be May making it possible for

00:11:56,350 --> 00:12:03,910
us so what you see here is the s Perino

00:11:59,110 --> 00:12:05,680
picker from all these gadgets I forgot

00:12:03,910 --> 00:12:07,780
to bring my Ashbury nose so you'll have

00:12:05,680 --> 00:12:11,260
to believe me that it's about the size

00:12:07,780 --> 00:12:14,970
of a table drive and this actually runs

00:12:11,260 --> 00:12:21,970
proper JavaScript on the device itself

00:12:14,970 --> 00:12:27,820
even better it was created by a educator

00:12:21,970 --> 00:12:30,070
in the UK called Gordon and what good

00:12:27,820 --> 00:12:31,960
Gordon did you know there are a bunch of

00:12:30,070 --> 00:12:35,050
educators in the UK you kind of find

00:12:31,960 --> 00:12:37,660
them quite often so what Gordon did is

00:12:35,050 --> 00:12:40,420
hey I had this idea I wanted to make

00:12:37,660 --> 00:12:42,100
hardware accessible to people but he

00:12:40,420 --> 00:12:43,570
actually went all the way he didn't just

00:12:42,100 --> 00:12:46,030
make the hardware accessible in the

00:12:43,570 --> 00:12:48,279
programming language accessible but what

00:12:46,030 --> 00:12:51,670
he did is he actually

00:12:48,279 --> 00:12:53,709
created a web IDE for the thing and made

00:12:51,670 --> 00:12:56,769
it easy to program the device so you

00:12:53,709 --> 00:13:00,970
just plugged your a Pico in you just

00:12:56,769 --> 00:13:03,009
launched you can install a web from the

00:13:00,970 --> 00:13:05,889
Chrome Web Store this this application

00:13:03,009 --> 00:13:08,379
that would later connect to your Xperia

00:13:05,889 --> 00:13:11,970
because these days you can just run this

00:13:08,379 --> 00:13:15,339
web app from the from a URL itself

00:13:11,970 --> 00:13:18,069
there's a Web API called web serial port

00:13:15,339 --> 00:13:20,829
and web Bluetooth that lets you program

00:13:18,069 --> 00:13:23,470
your hardware devices without installing

00:13:20,829 --> 00:13:26,019
any extra plug-in or application itself

00:13:23,470 --> 00:13:28,990
so he was like I'm not just gonna make

00:13:26,019 --> 00:13:31,149
it the programming itself easier by

00:13:28,990 --> 00:13:33,699
making this thing in JavaScript I'm

00:13:31,149 --> 00:13:36,699
gonna make the whole experience better

00:13:33,699 --> 00:13:39,970
so if you're ever doing something with

00:13:36,699 --> 00:13:42,910
hardware think about this and tehsil was

00:13:39,970 --> 00:13:47,379
was I was working a lot on making this

00:13:42,910 --> 00:13:49,269
work with DITA so the first decide the

00:13:47,379 --> 00:13:52,059
second tehsil the developer experience

00:13:49,269 --> 00:13:54,100
and user experience where the user is

00:13:52,059 --> 00:13:59,500
currently the developer make it better

00:13:54,100 --> 00:14:02,019
and make it worthwhile so they even came

00:13:59,500 --> 00:14:05,230
out with a new device lately that's the

00:14:02,019 --> 00:14:06,850
purchase that's also super tiny and that

00:14:05,230 --> 00:14:09,220
doesn't even require any wired

00:14:06,850 --> 00:14:11,920
connection so you don't have to plug it

00:14:09,220 --> 00:14:14,230
in anywhere it will just use bluetooth

00:14:11,920 --> 00:14:16,059
and and the thing called that Bluetooth

00:14:14,230 --> 00:14:19,300
which hasn't gonna be demoing you in a

00:14:16,059 --> 00:14:24,069
short while if we still have time for it

00:14:19,300 --> 00:14:26,470
so what's the interesting in the India

00:14:24,069 --> 00:14:29,110
screener so how they did it so the S

00:14:26,470 --> 00:14:32,620
Perino actually runs your JavaScript

00:14:29,110 --> 00:14:34,839
code on the device even more so it

00:14:32,620 --> 00:14:37,779
actually transfers the whole source code

00:14:34,839 --> 00:14:40,600
onto the device and runs your JavaScript

00:14:37,779 --> 00:14:42,579
code by interpreting it from out of the

00:14:40,600 --> 00:14:45,970
source there are a lot of reasons might

00:14:42,579 --> 00:14:48,399
doesn't convert to an est ast or si and

00:14:45,970 --> 00:14:51,339
I think like that you'll find that on

00:14:48,399 --> 00:14:53,170
the Esprit no explanation page but where

00:14:51,339 --> 00:14:56,620
is more important and more interesting

00:14:53,170 --> 00:14:59,360
is what are the implications of running

00:14:56,620 --> 00:15:02,450
JavaScript from the source on a tiny

00:14:59,360 --> 00:15:06,980
controller now these are a few megahertz

00:15:02,450 --> 00:15:09,560
that the processors in these devices are

00:15:06,980 --> 00:15:12,320
few megahertz and the memories of these

00:15:09,560 --> 00:15:14,930
devices are few kilobytes the flash

00:15:12,320 --> 00:15:16,940
program usually doesn't exceed a few

00:15:14,930 --> 00:15:19,220
tenths or a few hundreds of kilobytes so

00:15:16,940 --> 00:15:21,140
you're very resource constrained when

00:15:19,220 --> 00:15:23,180
you are running your code on such a

00:15:21,140 --> 00:15:25,880
resource-constrained device from the

00:15:23,180 --> 00:15:28,010
source what happens is you're gonna be

00:15:25,880 --> 00:15:30,320
interpreting and reading back the

00:15:28,010 --> 00:15:32,660
JavaScript code from the source so what

00:15:30,320 --> 00:15:37,459
that means and what that effect usually

00:15:32,660 --> 00:15:39,589
results in how you flash a lad LED is

00:15:37,459 --> 00:15:41,959
basically you turn it on you wait a

00:15:39,589 --> 00:15:44,149
little and then you turn it off you can

00:15:41,959 --> 00:15:47,380
even control the intensity of the light

00:15:44,149 --> 00:15:51,610
by very fast turning it on and off again

00:15:47,380 --> 00:15:55,570
this is called pulse width modulation

00:15:51,610 --> 00:15:58,310
basically on these devices the very

00:15:55,570 --> 00:16:01,850
white space that you live in your code

00:15:58,310 --> 00:16:04,160
affect how fast your code will run so if

00:16:01,850 --> 00:16:06,649
you're gonna leave a bunch of spaces

00:16:04,160 --> 00:16:09,140
like you can see on the bottom in your

00:16:06,649 --> 00:16:11,510
source code the microcontroller has to

00:16:09,140 --> 00:16:13,459
read the bytes to be able to import

00:16:11,510 --> 00:16:16,089
interpret your code so the

00:16:13,459 --> 00:16:19,430
microcontroller will execute your code

00:16:16,089 --> 00:16:22,040
slower than it would be if you would

00:16:19,430 --> 00:16:24,920
have ditched the white space and this is

00:16:22,040 --> 00:16:27,140
the implication of you know reading the

00:16:24,920 --> 00:16:29,600
source code and executing it on the fly

00:16:27,140 --> 00:16:32,720
which is you know we have been grown to

00:16:29,600 --> 00:16:35,390
use a lot of like JIT compilers and a

00:16:32,720 --> 00:16:36,980
cone running from a sts but this was the

00:16:35,390 --> 00:16:41,180
olden days this was how JavaScript

00:16:36,980 --> 00:16:44,480
originally I think almost 25 years ago

00:16:41,180 --> 00:16:46,490
or 20 years ago it was conceived it was

00:16:44,480 --> 00:16:48,949
interpreted and we tend to forget that

00:16:46,490 --> 00:16:51,620
because it just got so much faster these

00:16:48,949 --> 00:16:53,149
days and you are gonna say you know yeah

00:16:51,620 --> 00:16:55,250
so what so there is this quirky

00:16:53,149 --> 00:16:58,940
microcontroller that do is there's silly

00:16:55,250 --> 00:17:01,010
things because of its tiny brains what

00:16:58,940 --> 00:17:04,490
do I a bad developer have to do with all

00:17:01,010 --> 00:17:08,329
of this and the problem is have you ever

00:17:04,490 --> 00:17:11,150
heard of the function inlining

00:17:08,329 --> 00:17:15,230
practices practiced by nodejs or

00:17:11,150 --> 00:17:18,470
attention more specifically so what it

00:17:15,230 --> 00:17:20,870
does modest fingers and I heard this at

00:17:18,470 --> 00:17:23,810
my very first conference two or three

00:17:20,870 --> 00:17:25,640
years or almost three years ago my very

00:17:23,810 --> 00:17:29,150
first international conference I was

00:17:25,640 --> 00:17:31,640
blown away because apparently the v8

00:17:29,150 --> 00:17:36,650
engine which is used in node.js but also

00:17:31,640 --> 00:17:41,000
in Chrome in a earlier iteration in its

00:17:36,650 --> 00:17:44,030
turbo and it's a crankshaft compiler

00:17:41,000 --> 00:17:47,210
what it did it chose to inline some

00:17:44,030 --> 00:17:50,960
functions in lining a function means you

00:17:47,210 --> 00:17:54,620
you inline some code in a place when you

00:17:50,960 --> 00:17:56,930
compile it and choose to do that based

00:17:54,620 --> 00:17:59,720
on the source code for a size of the

00:17:56,930 --> 00:18:05,000
function so the problem is when you have

00:17:59,720 --> 00:18:08,530
a function that has a has some comments

00:18:05,000 --> 00:18:11,510
in it they count into the source code so

00:18:08,530 --> 00:18:13,420
the this there is a blog post on this

00:18:11,510 --> 00:18:17,840
you can read it so what it basically

00:18:13,420 --> 00:18:20,630
resulted in you had your function if it

00:18:17,840 --> 00:18:23,390
was changed by a tiny bit even though it

00:18:20,630 --> 00:18:26,210
was change only in the comments and it

00:18:23,390 --> 00:18:30,710
grew over the 600 character 600 byte

00:18:26,210 --> 00:18:34,160
size note stopped inlining that function

00:18:30,710 --> 00:18:37,160
and your code will run much slower so

00:18:34,160 --> 00:18:40,030
you can see there could be a factor of

00:18:37,160 --> 00:18:42,650
key difference between the two runs and

00:18:40,030 --> 00:18:45,020
you know I was like oh this is crazy

00:18:42,650 --> 00:18:46,910
I wonder if this still exists so I have

00:18:45,020 --> 00:18:51,080
a very good fan working on the VA team

00:18:46,910 --> 00:18:54,590
Benedict who I was hey how is this thing

00:18:51,080 --> 00:18:57,080
is this fixed by now you know it's been

00:18:54,590 --> 00:18:59,420
almost three years ago he was like yeah

00:18:57,080 --> 00:19:01,160
it was fixed by you know switching out

00:18:59,420 --> 00:19:04,880
the crankshaft compiler to the new

00:19:01,160 --> 00:19:06,620
turbofan one and I was there is a good

00:19:04,880 --> 00:19:10,520
presentation at Jazz Congress about

00:19:06,620 --> 00:19:12,530
what's new in in turbofan it's a it it's

00:19:10,520 --> 00:19:16,010
very good and it's used in nodejs

00:19:12,530 --> 00:19:19,580
version eight which is a LTS version of

00:19:16,010 --> 00:19:22,010
no GS so if you are no date on and on

00:19:19,580 --> 00:19:23,389
the latest chrome you will be using

00:19:22,010 --> 00:19:26,509
turbofan and crank

00:19:23,389 --> 00:19:29,989
is deprecated and being removed but even

00:19:26,509 --> 00:19:31,879
then turbo Fang doesn't care about the

00:19:29,989 --> 00:19:34,099
source size so your comments doesn't

00:19:31,879 --> 00:19:36,529
matter but there are of course still

00:19:34,099 --> 00:19:39,320
limits like the bytecode size of your

00:19:36,529 --> 00:19:41,269
code so the performance value of your

00:19:39,320 --> 00:19:44,149
code is still limited by the code size

00:19:41,269 --> 00:19:46,459
or the size of your functions even in

00:19:44,149 --> 00:19:48,559
turbofan now I'm not saying everybody

00:19:46,459 --> 00:19:50,809
should micro queue - and I'm not saying

00:19:48,559 --> 00:19:52,999
everybody should you know know de very

00:19:50,809 --> 00:19:54,529
intricate internals of the older

00:19:52,999 --> 00:19:58,669
JavaScript engines and all their

00:19:54,529 --> 00:20:02,749
optimizations on contrary justice

00:19:58,669 --> 00:20:04,759
Benedict mourns in his talk I'm warning

00:20:02,749 --> 00:20:07,129
you as well to not do that I'm just

00:20:04,759 --> 00:20:09,739
saying that it doesn't hurt you know all

00:20:07,129 --> 00:20:11,570
of these things and be aware it makes

00:20:09,739 --> 00:20:13,549
you better programmer even if you're not

00:20:11,570 --> 00:20:16,399
you know playing video hobby electronics

00:20:13,549 --> 00:20:19,190
in the first place so we have talked

00:20:16,399 --> 00:20:22,159
talked about v8 but there is a thing

00:20:19,190 --> 00:20:25,940
called v7 it sounds like a very good pun

00:20:22,159 --> 00:20:28,789
but it isn't actually a JavaScript

00:20:25,940 --> 00:20:31,359
engine aimed at microcontrollers it was

00:20:28,789 --> 00:20:35,359
created by Santa for the microcontroller

00:20:31,359 --> 00:20:37,669
platform and it's a company created by

00:20:35,359 --> 00:20:40,639
ex Googlers in Ireland so they know

00:20:37,669 --> 00:20:44,029
they're their things and they created a

00:20:40,639 --> 00:20:46,039
is a meta JavaScript engine that could

00:20:44,029 --> 00:20:50,149
be put onto the very small brains of a

00:20:46,039 --> 00:20:54,379
microcontroller it's you know it's 40 to

00:20:50,149 --> 00:20:56,359
100 kilobytes in size like the compile

00:20:54,379 --> 00:20:58,759
size like in comparison

00:20:56,359 --> 00:21:02,179
I think v8 has multiple tens of

00:20:58,759 --> 00:21:05,659
megabytes these days and even uses even

00:21:02,179 --> 00:21:09,139
more even less memory like orders of

00:21:05,659 --> 00:21:12,079
magnitude less memory than a v8 does and

00:21:09,139 --> 00:21:13,789
it's es 5.1 component which is you know

00:21:12,079 --> 00:21:17,749
very hard to tell about all the other

00:21:13,789 --> 00:21:19,279
engines yes purino is getting there but

00:21:17,749 --> 00:21:22,789
ver initially they had very poor

00:21:19,279 --> 00:21:28,879
standard support and it has reasons so

00:21:22,789 --> 00:21:31,190
well v8 not a J's engine it it not is

00:21:28,879 --> 00:21:33,179
but it more like was it was deprecated a

00:21:31,190 --> 00:21:37,529
few months ago

00:21:33,179 --> 00:21:40,889
in favor of MJS and what they did it's

00:21:37,529 --> 00:21:42,960
Assunta that said 40 to 40 to 120

00:21:40,889 --> 00:21:45,690
kilobytes that's still too big we have

00:21:42,960 --> 00:21:49,679
to go smaller so what they did is they

00:21:45,690 --> 00:21:52,139
created MJS which is a restricted

00:21:49,679 --> 00:21:54,570
JavaScript engine you could say it's a

00:21:52,139 --> 00:21:57,659
JavaScript chops an engine because when

00:21:54,570 --> 00:22:00,509
you are gonna go like to below the tens

00:21:57,659 --> 00:22:02,789
of kilobytes you're gonna say hey we're

00:22:00,509 --> 00:22:04,950
gonna get rid of some some features and

00:22:02,789 --> 00:22:07,849
when you're doing this on the web you

00:22:04,950 --> 00:22:10,499
cannot really break the web right so

00:22:07,849 --> 00:22:11,989
you're not allowed to do that on the web

00:22:10,499 --> 00:22:14,429
but alone when you're programming

00:22:11,989 --> 00:22:17,309
microcontrollers which the primary

00:22:14,429 --> 00:22:20,549
concerns of our you know downloading and

00:22:17,309 --> 00:22:24,929
pinging server data and J salts and you

00:22:20,549 --> 00:22:29,039
know connecting to other devices by IO

00:22:24,929 --> 00:22:32,129
ports they don't really need a regular

00:22:29,039 --> 00:22:34,799
expression support or for example unique

00:22:32,129 --> 00:22:38,269
full Unicode support what they need is

00:22:34,799 --> 00:22:41,940
long lifetime long battery life and easy

00:22:38,269 --> 00:22:44,820
programmability modules is interfacing

00:22:41,940 --> 00:22:48,239
with the with the underlying system so

00:22:44,820 --> 00:22:51,089
they made this restrictions part of the

00:22:48,239 --> 00:22:54,509
language itself and it gets closed its

00:22:51,089 --> 00:22:57,149
25 kilobytes even the smallest or dinos

00:22:54,509 --> 00:22:59,609
are equipped with 30 kilobytes of RAM

00:22:57,149 --> 00:23:01,649
which doesn't leave you a lot of space

00:22:59,609 --> 00:23:03,450
to put your actual programs on but you

00:23:01,649 --> 00:23:05,820
know it gets close and we'll happily

00:23:03,450 --> 00:23:10,559
live on a bunch of other a bunch of

00:23:05,820 --> 00:23:12,419
devices there was one very large company

00:23:10,559 --> 00:23:16,950
who tried to do this and create a

00:23:12,419 --> 00:23:19,769
JavaScript soft set language that

00:23:16,950 --> 00:23:26,159
pictures from the Samsung open the

00:23:19,769 --> 00:23:29,849
Samsung's presentation from 2014 at the

00:23:26,159 --> 00:23:32,549
tc39 which is the group that cares about

00:23:29,849 --> 00:23:34,460
the improvements of the JavaScript

00:23:32,549 --> 00:23:36,929
language and I expect my spirit language

00:23:34,460 --> 00:23:38,880
they presented hey we want to do a

00:23:36,929 --> 00:23:42,030
JavaScript

00:23:38,880 --> 00:23:44,040
subset language officially and they got

00:23:42,030 --> 00:23:47,130
a huge backlash because everybody's told

00:23:44,040 --> 00:23:49,560
it was not it's not okay to do it cannot

00:23:47,130 --> 00:23:50,940
be done you're gonna be losing too much

00:23:49,560 --> 00:23:54,060
it's not worth it

00:23:50,940 --> 00:23:56,610
they didn't give up that easy so what

00:23:54,060 --> 00:24:00,090
they did is started some explorations

00:23:56,610 --> 00:24:02,670
they started with the engine the open

00:24:00,090 --> 00:24:06,830
source JavaScript core engine powering

00:24:02,670 --> 00:24:09,450
most of the WebKit browsers and the

00:24:06,830 --> 00:24:12,150
miniature JavaScript engine duck tape

00:24:09,450 --> 00:24:14,010
and try to figure out if they could make

00:24:12,150 --> 00:24:16,170
it small enough to fit into a

00:24:14,010 --> 00:24:18,060
microcontroller and they found out that

00:24:16,170 --> 00:24:19,800
the duct tape was small enough but

00:24:18,060 --> 00:24:22,560
eventually they went with their own the

00:24:19,800 --> 00:24:27,630
thing that's called gyroscope

00:24:22,560 --> 00:24:30,090
Jerry script is actually one of the best

00:24:27,630 --> 00:24:33,240
tiny JavaScript engines in these days

00:24:30,090 --> 00:24:36,090
and they actually open sourced it that

00:24:33,240 --> 00:24:38,160
helped a lot to get a system I'm going

00:24:36,090 --> 00:24:40,590
to be showing you some examples very

00:24:38,160 --> 00:24:42,720
soon about George cut so here's the

00:24:40,590 --> 00:24:46,740
thing it could fly you could flash this

00:24:42,720 --> 00:24:50,040
onto less than 200 km flash and it runs

00:24:46,740 --> 00:24:52,440
there about 40 64 kilobytes of memory so

00:24:50,040 --> 00:24:54,600
it's not the tiniest one but it comes

00:24:52,440 --> 00:24:59,010
with es5 support heavy really optimized

00:24:54,600 --> 00:25:01,800
and and very well usable the fact that

00:24:59,010 --> 00:25:04,470
is very well usable comes from the fact

00:25:01,800 --> 00:25:07,830
that even BBC micro bet has adapted it

00:25:04,470 --> 00:25:11,400
and a bunch of erm devices the BBC micro

00:25:07,830 --> 00:25:14,400
bet is a small educational device that

00:25:11,400 --> 00:25:17,940
every seventh grader in the UK gets for

00:25:14,400 --> 00:25:19,800
free to learn about computers so this is

00:25:17,940 --> 00:25:21,540
the device itself and because you are

00:25:19,800 --> 00:25:25,670
not gonna be seeing it like that let's

00:25:21,540 --> 00:25:25,670
see if we can I get this working

00:25:31,740 --> 00:25:53,720
no let me just related this and

00:25:49,409 --> 00:25:58,919
I'll be again there you go so let's

00:25:53,720 --> 00:26:00,600
focus no peeking

00:25:58,919 --> 00:26:02,460
you will see all the other devices so

00:26:00,600 --> 00:26:04,169
yes this is this big and you could tell

00:26:02,460 --> 00:26:07,169
it's an educational device because it

00:26:04,169 --> 00:26:09,419
has no pins and no whatsoever it has

00:26:07,169 --> 00:26:11,279
very flat edges so you can give it to a

00:26:09,419 --> 00:26:13,710
seventh grader and they're not gonna

00:26:11,279 --> 00:26:17,130
kill anybody with it except if they are

00:26:13,710 --> 00:26:19,250
very crafty which seventh graders are

00:26:17,130 --> 00:26:22,200
mostly are so they are screwed anyway

00:26:19,250 --> 00:26:23,940
but if you wanted to do more Hardware

00:26:22,200 --> 00:26:26,880
stuff on this you could just add a

00:26:23,940 --> 00:26:29,580
little expansion board this will just

00:26:26,880 --> 00:26:31,649
snap right in and you can just plug your

00:26:29,580 --> 00:26:33,960
devices onto it so it's very good for

00:26:31,649 --> 00:26:36,149
prototyping as well and it has a bunch

00:26:33,960 --> 00:26:37,770
of features built in that are not gonna

00:26:36,149 --> 00:26:40,440
be mentioning now but you can ask me

00:26:37,770 --> 00:26:44,159
about later all right let me see if this

00:26:40,440 --> 00:26:47,010
works what made it even better is that

00:26:44,159 --> 00:26:47,580
they they created a very special editor

00:26:47,010 --> 00:26:50,220
for it

00:26:47,580 --> 00:26:54,110
this device also runs JavaScript on it

00:26:50,220 --> 00:26:58,230
it actually runs DJ script compiler

00:26:54,110 --> 00:27:01,080
language engine on that but what you

00:26:58,230 --> 00:27:04,590
could do is you could actually use this

00:27:01,080 --> 00:27:07,470
web IDE again you know still the idea of

00:27:04,590 --> 00:27:13,950
the ASP now there is a web page you can

00:27:07,470 --> 00:27:17,130
go to I can actually just go there that

00:27:13,950 --> 00:27:23,700
is basically this online editor and it

00:27:17,130 --> 00:27:26,010
has a emulator on it but it also has

00:27:23,700 --> 00:27:27,990
this block thing that you can just

00:27:26,010 --> 00:27:29,610
puzzle together some code that is easy

00:27:27,990 --> 00:27:32,669
to understand you don't have to write

00:27:29,610 --> 00:27:34,260
anything and then you can see that it

00:27:32,669 --> 00:27:37,380
actually translates to a basic

00:27:34,260 --> 00:27:40,139
JavaScript and this is used to teach

00:27:37,380 --> 00:27:43,380
people that web development and and

00:27:40,139 --> 00:27:47,120
hardware development in the first place

00:27:43,380 --> 00:27:51,840
from as early as seventh grade or even

00:27:47,120 --> 00:27:54,150
less so that was a another JavaScript

00:27:51,840 --> 00:27:58,530
conference in 2015

00:27:54,150 --> 00:28:01,110
this is Jes conf 15 ironically this

00:27:58,530 --> 00:28:04,140
looks also like Jays Cove is which is

00:28:01,110 --> 00:28:05,940
Jay's confess land and ironically this

00:28:04,140 --> 00:28:09,300
presentation actually took place on both

00:28:05,940 --> 00:28:11,990
conferences this is hey come parents

00:28:09,300 --> 00:28:14,550
who've worked at the time for pebble and

00:28:11,990 --> 00:28:16,970
pebble put together something their

00:28:14,550 --> 00:28:19,560
watches actually use javascript as well

00:28:16,970 --> 00:28:22,710
they actually put together pebble juice

00:28:19,560 --> 00:28:26,640
or rocky J us to run their run on their

00:28:22,710 --> 00:28:28,880
watches and so I'm gonna see if I can

00:28:26,640 --> 00:28:31,710
show you so this is a Pebble watch and

00:28:28,880 --> 00:28:34,020
the actual watch face you are seeing and

00:28:31,710 --> 00:28:36,870
a bunch of other watch faces are created

00:28:34,020 --> 00:28:39,270
using html5 and JavaScript you'll find

00:28:36,870 --> 00:28:42,240
that presentation it's quite fascinating

00:28:39,270 --> 00:28:44,910
in the links as well the interesting

00:28:42,240 --> 00:28:46,770
part of this what they did okay we're

00:28:44,910 --> 00:28:49,080
gonna use Jerry script we're gonna put

00:28:46,770 --> 00:28:52,110
this onto the device and we're not gonna

00:28:49,080 --> 00:28:54,930
sleep until this goes just exactly the

00:28:52,110 --> 00:28:57,390
same performance written in JavaScript

00:28:54,930 --> 00:28:59,280
as it goes in in C and you would think

00:28:57,390 --> 00:29:00,810
that's not possible that but that's

00:28:59,280 --> 00:29:03,330
actually very much possible

00:29:00,810 --> 00:29:09,090
they are running the thirty-nine lines

00:29:03,330 --> 00:29:11,040
of code of the JavaScript watch face on

00:29:09,090 --> 00:29:15,660
the same device on the same performance

00:29:11,040 --> 00:29:18,780
same battery barrel usage in the exact

00:29:15,660 --> 00:29:20,730
same place replacing they nobody

00:29:18,780 --> 00:29:22,470
actually noticed they haven't announced

00:29:20,730 --> 00:29:25,950
that they are replacing the watch face

00:29:22,470 --> 00:29:29,130
with a one written in JavaScript and you

00:29:25,950 --> 00:29:31,500
know 230 lights of seeker goodbye

00:29:29,130 --> 00:29:33,630
well comforting nine lines of JavaScript

00:29:31,500 --> 00:29:37,290
code that's equally performant running

00:29:33,630 --> 00:29:40,290
on a watch and you're like okay okay but

00:29:37,290 --> 00:29:42,210
my watch pebble has gone bankrupt but

00:29:40,290 --> 00:29:44,520
actually the technology is not lost

00:29:42,210 --> 00:29:46,410
actually because Fitbit bought the

00:29:44,520 --> 00:29:48,480
company mostly for the intellectual

00:29:46,410 --> 00:29:50,790
property so when they came out with

00:29:48,480 --> 00:29:53,730
their own SmartWatch offering they

00:29:50,790 --> 00:29:56,600
actually stole the idea while they

00:29:53,730 --> 00:29:58,340
bought the idea first so

00:29:56,600 --> 00:29:59,840
I'm going to show you that amount of

00:29:58,340 --> 00:30:02,330
time but also I'm gonna show you my

00:29:59,840 --> 00:30:04,370
Fitbit watch and I was joking on Twitter

00:30:02,330 --> 00:30:05,780
but I was asking about this that if I

00:30:04,370 --> 00:30:08,020
don't sleep I'm gonna show you a demo

00:30:05,780 --> 00:30:10,940
even well I didn't actually end up

00:30:08,020 --> 00:30:12,560
showing anything useful but here is the

00:30:10,940 --> 00:30:16,580
application that I made with a few lines

00:30:12,560 --> 00:30:19,280
of JavaScript and at web api's it says

00:30:16,580 --> 00:30:20,510
you know accelerometer barometer heart

00:30:19,280 --> 00:30:25,640
rate he is gonna faint

00:30:20,510 --> 00:30:27,710
stuff like that you are running

00:30:25,640 --> 00:30:31,040
JavaScript on a watch that could stay

00:30:27,710 --> 00:30:34,070
with a single charge stay charged for a

00:30:31,040 --> 00:30:36,770
whole week and you know people are

00:30:34,070 --> 00:30:39,830
people are asking you know this

00:30:36,770 --> 00:30:43,010
javascript is a toy language right so

00:30:39,830 --> 00:30:45,350
okay so what I have been up to Dan these

00:30:43,010 --> 00:30:47,780
are all nice and this should give you a

00:30:45,350 --> 00:30:50,810
lot of improvement you know the state of

00:30:47,780 --> 00:30:52,730
JavaScript on hardware I've been up to a

00:30:50,810 --> 00:30:56,960
bunch of things and I mean I would like

00:30:52,730 --> 00:31:01,160
to show you some of those in some of

00:30:56,960 --> 00:31:03,800
those things in a short demo I here 2008

00:31:01,160 --> 00:31:05,600
is gonna be the Europe declared I'm also

00:31:03,800 --> 00:31:09,200
hearing this for like probably five

00:31:05,600 --> 00:31:11,120
years now so okay we have shown you a

00:31:09,200 --> 00:31:13,550
bunch of devices but how do you put

00:31:11,120 --> 00:31:14,860
JavaScript on this device does anyone

00:31:13,550 --> 00:31:17,300
know what's this

00:31:14,860 --> 00:31:20,300
there is a there is a microcontroller on

00:31:17,300 --> 00:31:26,570
the Left so that one is a

00:31:20,300 --> 00:31:29,110
microcontroller well let me show you if

00:31:26,570 --> 00:31:29,110
I may

00:31:42,090 --> 00:31:55,390
to do so gonna die oh I always die the

00:31:50,980 --> 00:31:56,140
first time ah so what is that right you

00:31:55,390 --> 00:32:00,580
may ask

00:31:56,140 --> 00:32:01,750
so that thing is called an Arduino on

00:32:00,580 --> 00:32:03,550
the left you can see that the

00:32:01,750 --> 00:32:05,650
microcontroller it's basically just

00:32:03,550 --> 00:32:08,530
hooked up by a bunch of wires into your

00:32:05,650 --> 00:32:13,060
screen and LCD screen or LED screen

00:32:08,530 --> 00:32:15,400
buzzer and some buttons this finger

00:32:13,060 --> 00:32:18,070
actually is running a C code so this

00:32:15,400 --> 00:32:21,040
device has maybe 30 Q kilobytes of flash

00:32:18,070 --> 00:32:25,150
memory kilobytes that is two and a half

00:32:21,040 --> 00:32:28,150
kilobytes of memory and a 16 megahertz

00:32:25,150 --> 00:32:31,690
8-bit processor so it's not the fastest

00:32:28,150 --> 00:32:35,050
device on earth that was made what's

00:32:31,690 --> 00:32:38,110
interesting about this thing is that

00:32:35,050 --> 00:32:40,630
actually you can run JavaScript on it it

00:32:38,110 --> 00:32:44,710
takes a few tricks but you can actually

00:32:40,630 --> 00:32:48,040
do it and I don't think oh I think I

00:32:44,710 --> 00:32:50,710
have maybe a bit more time to show you a

00:32:48,040 --> 00:32:52,480
few things and after this talk and

00:32:50,710 --> 00:32:56,290
throughout so tomorrow I'm gonna be

00:32:52,480 --> 00:32:58,060
demoing cloud oh boy if somebody signed

00:32:56,290 --> 00:33:00,340
up for my workshop you're gonna seeing a

00:32:58,060 --> 00:33:02,380
lot more of this and if you're curious

00:33:00,340 --> 00:33:03,760
and you're not signed up to the workshop

00:33:02,380 --> 00:33:06,280
you can find me in the Mozilla booth

00:33:03,760 --> 00:33:08,440
today and - and on Saturday as well and

00:33:06,280 --> 00:33:10,270
they're happy to answer any questions

00:33:08,440 --> 00:33:12,220
you may have about cloud oh boy and

00:33:10,270 --> 00:33:13,930
everything else but also you can try

00:33:12,220 --> 00:33:16,600
some of these devices that I'm gonna be

00:33:13,930 --> 00:33:20,350
showing you so cloudy boy is basically

00:33:16,600 --> 00:33:22,390
an online editor for games it has a

00:33:20,350 --> 00:33:25,900
bunch of components but what makes it

00:33:22,390 --> 00:33:28,690
most interesting is that it lets you

00:33:25,900 --> 00:33:32,470
create pixel graphic art and games and

00:33:28,690 --> 00:33:35,110
then lets you put that put those games

00:33:32,470 --> 00:33:36,850
up on the internet because you can share

00:33:35,110 --> 00:33:40,000
them because they're just JavaScript and

00:33:36,850 --> 00:33:41,890
html5 canvas but you can also put that

00:33:40,000 --> 00:33:46,880
onto microcontroller devices like this

00:33:41,890 --> 00:33:51,110
one so you know this cobbled together

00:33:46,880 --> 00:33:54,110
mess is not very exciting how about this

00:33:51,110 --> 00:33:56,149
one this is called the order boy this is

00:33:54,110 --> 00:33:58,399
the exact same device with the exact

00:33:56,149 --> 00:34:00,889
same components on the right hand side

00:33:58,399 --> 00:34:02,720
you can see the little tiny microchip

00:34:00,889 --> 00:34:05,750
that is the same as the Arduino is

00:34:02,720 --> 00:34:08,510
microchip some buttons and the screen

00:34:05,750 --> 00:34:12,819
and a hidden buzzer in the back just you

00:34:08,510 --> 00:34:15,859
know looks a lot nicer and you can

00:34:12,819 --> 00:34:17,480
create games for this microcontroller or

00:34:15,859 --> 00:34:21,740
how about this one

00:34:17,480 --> 00:34:23,839
the tiny arcade how about this is

00:34:21,740 --> 00:34:26,720
actually a much faster processor it's a

00:34:23,839 --> 00:34:30,470
32-bit ARM processor and a colored

00:34:26,720 --> 00:34:35,210
screen and because I'm not here to show

00:34:30,470 --> 00:34:40,429
you pictures I'm here to show you games

00:34:35,210 --> 00:34:42,470
actually so we have horrible glare but

00:34:40,429 --> 00:34:44,569
you can buy probably a maybe able to see

00:34:42,470 --> 00:34:48,639
the jas kana let me just zoom in a bit

00:34:44,569 --> 00:34:53,899
and alright

00:34:48,639 --> 00:34:56,030
gorgeous so come Jeschke invasion this

00:34:53,899 --> 00:34:59,119
game itself when I was last time here in

00:34:56,030 --> 00:35:01,339
November - we were sitting in Thomas and

00:34:59,119 --> 00:35:03,470
doing a verse shop he put together a

00:35:01,339 --> 00:35:05,990
picross game in maybe two and a half

00:35:03,470 --> 00:35:08,500
hours with cloudy boy and it took me a

00:35:05,990 --> 00:35:12,500
bit of time to to fix some of the bugs

00:35:08,500 --> 00:35:15,980
but then after the pikers game was

00:35:12,500 --> 00:35:18,470
compiled automatically to run on this

00:35:15,980 --> 00:35:20,839
device so what means you create their

00:35:18,470 --> 00:35:22,700
game on the Obey browser and then you

00:35:20,839 --> 00:35:32,060
can you can put it onto your

00:35:22,700 --> 00:35:35,480
microcontroller device yep and I have a

00:35:32,060 --> 00:35:38,060
bunch of things that I had to skip skip

00:35:35,480 --> 00:35:39,980
over so if you want to talk about those

00:35:38,060 --> 00:35:42,890
things you can find me on Twitter at SL

00:35:39,980 --> 00:35:45,050
softworks and if you want to hear more

00:35:42,890 --> 00:35:47,839
about you know how to put games onto

00:35:45,050 --> 00:35:49,400
microcontrollers you can follow at cloud

00:35:47,839 --> 00:35:52,520
boy

00:35:49,400 --> 00:35:56,020
and your job by them as a booth or the

00:35:52,520 --> 00:36:00,949
workshop tomorrow thank you very much

00:35:56,020 --> 00:36:00,949
[Applause]

00:36:05,940 --> 00:36:08,000

YouTube URL: https://www.youtube.com/watch?v=8n4jCTbvYwI


