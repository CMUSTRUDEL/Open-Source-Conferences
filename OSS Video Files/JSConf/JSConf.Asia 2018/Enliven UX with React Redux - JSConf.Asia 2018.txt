Title: Enliven UX with React Redux - JSConf.Asia 2018
Publication date: 2018-02-20
Playlist: JSConf.Asia 2018
Description: 
	Speaker: Gurudath Reddy, Palo IT

Learn how to better use React/Redux for building awesome user experiences, using optimistic transactions and data preloads. Also, we will explore advanced topics such as Hot Code Reload, Testability, Performance Monitoring, etc. 

Requirements: Latest version of NodeJS and NPM installed before the session.

A Tech Lead and Frontend Architect at PALO IT, Guru is responsible for leading many frontend projects for global banks. His expertise includes, but not limited to, both worlds of Angular and React. He is also a stern believer in Agile, strives to find ways to make processes simpler using technology, and loves to use design thinking recipes to frame problem statements, prototype and find solutions.

Event Page: https://2018.jsconf.asia

Produced by Engineers.SG
Recorded by: Amy Pan

Help us caption & translate this video!

https://amara.org/v/eoMZ/
Captions: 
	00:00:00,000 --> 00:00:03,929
now all have a seat so I hope you guys

00:00:02,429 --> 00:00:05,490
know each other much better we'll be

00:00:03,929 --> 00:00:08,460
spending at least few hours with one

00:00:05,490 --> 00:00:12,030
another so thank you so much for coming

00:00:08,460 --> 00:00:13,980
down once again this morning so for now

00:00:12,030 --> 00:00:15,450
any further ado help us and kick off

00:00:13,980 --> 00:00:17,850
this whole entire morning and this

00:00:15,450 --> 00:00:19,439
entire session but Pacifico Ventrella

00:00:17,850 --> 00:00:27,180
tech guru to start off this session

00:00:19,439 --> 00:00:30,420
thank you hello yep hey everyone welcome

00:00:27,180 --> 00:00:31,340
to our workshop on an 11 new X with

00:00:30,420 --> 00:00:34,170
reactor ducts

00:00:31,340 --> 00:00:39,450
so before we start off how many of you

00:00:34,170 --> 00:00:44,579
know reactor ducts Oh quite a few number

00:00:39,450 --> 00:00:46,469
there yeah that's good okay so we'll

00:00:44,579 --> 00:00:49,010
first I'll first introduce the speakers

00:00:46,469 --> 00:00:54,239
and co-facilitators here

00:00:49,010 --> 00:00:56,730
Jonathan Alex who's tech lead at palo ID

00:00:54,239 --> 00:01:00,710
jonathan is software engineer and myself

00:00:56,730 --> 00:01:02,730
guru that will be our today's speakers

00:01:00,710 --> 00:01:04,610
co-facilitators today would be aquiline

00:01:02,730 --> 00:01:06,780
and shiva they'll be helping you out

00:01:04,610 --> 00:01:08,610
with any problems that you have in

00:01:06,780 --> 00:01:10,140
setting up workspace or any blockers

00:01:08,610 --> 00:01:12,000
that you have yeah so please raise your

00:01:10,140 --> 00:01:13,170
hand whenever you have any issue so

00:01:12,000 --> 00:01:18,360
they'll come to you and they'll help you

00:01:13,170 --> 00:01:20,670
out yeah cool so the agenda for today so

00:01:18,360 --> 00:01:24,659
first we'll start off with introduction

00:01:20,670 --> 00:01:26,549
about ourselves and what we do next will

00:01:24,659 --> 00:01:31,049
straightaway dive into setting up your

00:01:26,549 --> 00:01:33,990
workspace then we start off with the

00:01:31,049 --> 00:01:38,040
workshop we have we have broken down it

00:01:33,990 --> 00:01:40,439
into three small workshops first would

00:01:38,040 --> 00:01:41,970
be on style components and themes why

00:01:40,439 --> 00:01:44,850
style components and themes would be

00:01:41,970 --> 00:01:46,439
first we look into what are the what is

00:01:44,850 --> 00:01:49,079
the library that's available to set up a

00:01:46,439 --> 00:01:51,720
proper styling architecture and next we

00:01:49,079 --> 00:01:55,799
dive into optimistic UX how to set up

00:01:51,720 --> 00:01:58,649
optimistic UX app so we'll be using a

00:01:55,799 --> 00:02:00,869
chat app for that and finally the final

00:01:58,649 --> 00:02:03,750
workshop would be on react performance

00:02:00,869 --> 00:02:07,310
how you can make your applications

00:02:03,750 --> 00:02:07,310
buttery smooth yeah

00:02:08,820 --> 00:02:15,520
coming to an introduction Paulo IT is a

00:02:12,430 --> 00:02:18,130
multinational company which specializes

00:02:15,520 --> 00:02:21,220
in human centered design and we also do

00:02:18,130 --> 00:02:25,560
agile and digital transformations to

00:02:21,220 --> 00:02:28,060
many foreign companies we take pride in

00:02:25,560 --> 00:02:30,700
telling that we are small enough to care

00:02:28,060 --> 00:02:33,160
but big enough to deliver we are around

00:02:30,700 --> 00:02:36,970
300 experts from different nationalities

00:02:33,160 --> 00:02:39,400
and cultures spread across the globe in

00:02:36,970 --> 00:02:44,920
multiple offices at Mexico France Hong

00:02:39,400 --> 00:02:50,320
Kong Thailand Singapore and Australia at

00:02:44,920 --> 00:02:52,270
Palo we have diverse talent pool which

00:02:50,320 --> 00:02:55,540
consists of agile coaches scrum masters

00:02:52,270 --> 00:02:59,080
architects developers UX designers data

00:02:55,540 --> 00:03:01,390
scientists etc so we have everyone from

00:02:59,080 --> 00:03:03,660
the ideation phase to the production

00:03:01,390 --> 00:03:03,660
phase

00:03:04,050 --> 00:03:09,880
let's straightaway dive into setup and

00:03:07,239 --> 00:03:11,790
preparation where facilitators will help

00:03:09,880 --> 00:03:16,209
you out

00:03:11,790 --> 00:03:18,780
let's get set first please check if you

00:03:16,209 --> 00:03:21,340
have the latest version of node.js

00:03:18,780 --> 00:03:24,030
Chrome browser because for react

00:03:21,340 --> 00:03:27,459
performance we'll be using Chrome

00:03:24,030 --> 00:03:30,340
developer tools and you can have your

00:03:27,459 --> 00:03:33,010
preferred IDE so if you don't have any

00:03:30,340 --> 00:03:37,060
one of these please let us know so we'll

00:03:33,010 --> 00:03:39,400
pause if you have latest node.js and

00:03:37,060 --> 00:03:44,860
chrome then we will continue everyone

00:03:39,400 --> 00:03:45,900
anyone everyone has chrome understant ok

00:03:44,860 --> 00:03:50,910
cool

00:03:45,900 --> 00:03:54,760
ok so you can clone our github repo

00:03:50,910 --> 00:03:56,860
which is over here also we'll be

00:03:54,760 --> 00:03:58,420
providing you t-shirts later on so you

00:03:56,860 --> 00:03:59,709
can scan the QR code that's on the

00:03:58,420 --> 00:04:02,560
t-shirt and it will straight away take

00:03:59,709 --> 00:04:05,700
you to the github repository so please

00:04:02,560 --> 00:04:08,970
clone this repository and CD into that

00:04:05,700 --> 00:04:08,970
workspace folder

00:04:44,270 --> 00:04:49,480
yeah it's

00:04:46,040 --> 00:04:49,480
here on the screen if you can't see that

00:05:01,210 --> 00:05:11,740
oh yeah so this open Wi-Fi network which

00:05:09,550 --> 00:05:13,770
you can connect to sorry about that I

00:05:11,740 --> 00:05:16,180
didn't inform you beforehand so

00:05:13,770 --> 00:05:17,380
shangri-la Wi-Fi network so you can

00:05:16,180 --> 00:05:21,750
connect to it no password is required

00:05:17,380 --> 00:05:21,750
and you can use that thank you

00:05:31,240 --> 00:05:33,300
you

00:05:47,949 --> 00:05:54,590
once you have cloned the repoed just

00:05:51,949 --> 00:05:57,439
your npm install and you can do a NPM

00:05:54,590 --> 00:06:00,080
start so you should get a quick chat app

00:05:57,439 --> 00:06:02,680
with just a login page and a home screen

00:06:00,080 --> 00:06:02,680
for the chat app

00:06:16,340 --> 00:06:18,400
you

00:06:42,220 --> 00:06:45,420
all good

00:07:06,320 --> 00:07:12,030
done

00:07:09,030 --> 00:07:12,030
cool

00:07:12,460 --> 00:07:22,640
so next we look into the we look into

00:07:19,280 --> 00:07:26,060
the boilerplate why we didn't use create

00:07:22,640 --> 00:07:29,090
react app simple reason being for this

00:07:26,060 --> 00:07:30,980
workshop we thought it's it's create

00:07:29,090 --> 00:07:32,870
react has too many features and it would

00:07:30,980 --> 00:07:36,110
be all kill so we just kept it as simple

00:07:32,870 --> 00:07:38,090
as possible we also put in a cache

00:07:36,110 --> 00:07:40,300
loader there so to make the builds

00:07:38,090 --> 00:07:42,530
faster and we have converted all

00:07:40,300 --> 00:07:46,400
relative parts within the souls folder

00:07:42,530 --> 00:07:47,990
and to absolute path using specific

00:07:46,400 --> 00:07:51,680
configuration for Babel transform there

00:07:47,990 --> 00:07:55,430
so that's about the bundling and the

00:07:51,680 --> 00:07:58,490
build tool coming to webpack statistics

00:07:55,430 --> 00:08:03,380
we have also put in a script I can

00:07:58,490 --> 00:08:06,440
quickly if you for people who are

00:08:03,380 --> 00:08:08,780
familiar with web pack you know that

00:08:06,440 --> 00:08:17,420
there's a statistics plug-in which you

00:08:08,780 --> 00:08:24,770
can use to to analyze your bundles so

00:08:17,420 --> 00:08:28,820
all that you need to do is NPM run stats

00:08:24,770 --> 00:08:30,920
so when you do NPM runstats it creates a

00:08:28,820 --> 00:08:34,400
bundle and it creates stats for your

00:08:30,920 --> 00:08:38,990
bundle I'll give a quick explanation

00:08:34,400 --> 00:08:43,400
about that so as you can see you get a

00:08:38,990 --> 00:08:45,080
backpack visualizer which tells you what

00:08:43,400 --> 00:08:47,930
are the libraries that are taking up

00:08:45,080 --> 00:08:50,480
most pace based on percentage and you

00:08:47,930 --> 00:08:53,360
have a more detailed view over here so

00:08:50,480 --> 00:08:55,610
you can do NPM run stats and you

00:08:53,360 --> 00:08:58,060
automatically get this visualization on

00:08:55,610 --> 00:08:58,060
your systems

00:09:01,240 --> 00:09:07,240
yeah and there's one more proper bundle

00:09:03,220 --> 00:09:08,950
analyzer which allows you to see what

00:09:07,240 --> 00:09:11,380
are all the libraries under node modules

00:09:08,950 --> 00:09:13,810
and what are the libraries that are on

00:09:11,380 --> 00:09:16,120
the source folder etc so which library

00:09:13,810 --> 00:09:17,620
is taking more space so immutable J's is

00:09:16,120 --> 00:09:19,510
something that's consuming more space

00:09:17,620 --> 00:09:22,240
this is how you can analyze your bundle

00:09:19,510 --> 00:09:24,130
and find libraries which are taking more

00:09:22,240 --> 00:09:27,700
space and find alternatives for those

00:09:24,130 --> 00:09:32,100
libraries to replace them with so all

00:09:27,700 --> 00:09:35,950
that you need to do is NPM runstats

00:09:32,100 --> 00:09:38,649
which oh they're so for that we have

00:09:35,950 --> 00:09:42,220
created a separate statistic store GS or

00:09:38,649 --> 00:09:44,830
this web pack configuration again so you

00:09:42,220 --> 00:09:47,350
can look into this and you can create

00:09:44,830 --> 00:09:51,580
your own stats pipeline for your

00:09:47,350 --> 00:09:55,300
projects so we won't dig deep into this

00:09:51,580 --> 00:09:59,100
it's just a quick explanation of why we

00:09:55,300 --> 00:09:59,100
have put up that statistic store yes yes

00:10:07,740 --> 00:10:15,190
when you do NPM runstats there are 3-3

00:10:12,480 --> 00:10:17,140
separate tabs that open up yeah you can

00:10:15,190 --> 00:10:20,079
check there are three tabs that open up

00:10:17,140 --> 00:10:21,730
like they give different perspective one

00:10:20,079 --> 00:10:26,230
would be on the bundle size one would be

00:10:21,730 --> 00:10:29,589
showing percentages one would show the

00:10:26,230 --> 00:10:32,290
other one is like kind of a detailed

00:10:29,589 --> 00:10:33,640
analyze analysis of your bundle which

00:10:32,290 --> 00:10:35,110
provides you detailed analysis of your

00:10:33,640 --> 00:10:37,589
bundles so there are three tabs that

00:10:35,110 --> 00:10:37,589
open up

00:13:14,269 --> 00:13:21,079
let's give two minutes the guys who are

00:13:17,910 --> 00:13:21,079
having shoes

00:13:51,260 --> 00:13:55,889
okay we'll continue because there are a

00:13:54,029 --> 00:13:58,250
few more slides where we won't be doing

00:13:55,889 --> 00:14:00,930
any workshop so I'll try to explain

00:13:58,250 --> 00:14:02,790
further and by the time we'll try to

00:14:00,930 --> 00:14:08,570
resolve the issues that you guys are

00:14:02,790 --> 00:14:12,329
having yeah okay sure Thanks so we'll

00:14:08,570 --> 00:14:15,120
dive into the our first workshop style

00:14:12,329 --> 00:14:21,690
components how many of you know style

00:14:15,120 --> 00:14:23,639
components here okay very few for people

00:14:21,690 --> 00:14:26,279
who know style components yeah it's just

00:14:23,639 --> 00:14:28,350
going to be a introduction about style

00:14:26,279 --> 00:14:32,100
components how do you do themes how do

00:14:28,350 --> 00:14:34,050
you pass drops etc so this would warm

00:14:32,100 --> 00:14:36,990
you up this workshop is to warm you up

00:14:34,050 --> 00:14:41,430
for what's coming next on optimistic UX

00:14:36,990 --> 00:14:44,220
and react performance so let me straight

00:14:41,430 --> 00:14:47,190
away show you this this was Google

00:14:44,220 --> 00:14:54,750
search engine when it was being demoed

00:14:47,190 --> 00:14:59,940
in 1990s so as you can see the CSS that

00:14:54,750 --> 00:15:03,990
was used was very basic today if you see

00:14:59,940 --> 00:15:05,760
we have such complex applications where

00:15:03,990 --> 00:15:09,290
multiple distributed teams are working

00:15:05,760 --> 00:15:11,639
on it etc so having a proper style

00:15:09,290 --> 00:15:16,680
architecture is very important in your

00:15:11,639 --> 00:15:20,040
apps right so let's look into CSS

00:15:16,680 --> 00:15:23,819
evolution how we have reached style

00:15:20,040 --> 00:15:26,519
components today or CSS in jas it's a

00:15:23,819 --> 00:15:32,160
library which represents CSS and J's so

00:15:26,519 --> 00:15:36,000
we started off with CSS in 1993 CSS was

00:15:32,160 --> 00:15:37,949
just introduced to style scientific

00:15:36,000 --> 00:15:39,959
documents web was created for scientific

00:15:37,949 --> 00:15:43,290
documents so CSS was just created for

00:15:39,959 --> 00:15:45,649
that and nobody knew that CSS would be

00:15:43,290 --> 00:15:50,190
what it is today so CS is still alive

00:15:45,649 --> 00:15:52,680
and it's doing great but we ran into a

00:15:50,190 --> 00:15:55,399
lot of issues with CSS first of all we

00:15:52,680 --> 00:15:58,890
used to use inline CSS in the beginning

00:15:55,399 --> 00:16:04,410
then you couldn't extend it the way you

00:15:58,890 --> 00:16:07,290
wanted to and then came in the important

00:16:04,410 --> 00:16:08,970
keyword there which made it even more

00:16:07,290 --> 00:16:12,470
difficult for us to understand how

00:16:08,970 --> 00:16:15,480
certain CSS is being read by the browser

00:16:12,470 --> 00:16:19,740
so to solve that we came up with

00:16:15,480 --> 00:16:22,339
pre-processors a CSS less what proposes

00:16:19,740 --> 00:16:26,880
did was they brought in mix-ins

00:16:22,339 --> 00:16:29,670
variables nesting of your CSS so that

00:16:26,880 --> 00:16:32,220
it's easy to understand and read but

00:16:29,670 --> 00:16:35,060
what CSS less then solved was a style

00:16:32,220 --> 00:16:37,889
architecture which will allow you to

00:16:35,060 --> 00:16:40,740
predict or be confident about whatever

00:16:37,889 --> 00:16:44,839
Styles that you are writing so after

00:16:40,740 --> 00:16:47,339
that came in CSS patterns like them

00:16:44,839 --> 00:16:51,720
anyway anyone over here know BEM

00:16:47,339 --> 00:16:59,699
what's been yeah can can you tell what's

00:16:51,720 --> 00:17:02,130
been can you explain what's been yeah

00:16:59,699 --> 00:17:05,189
exactly so it's it's it's a pattern a

00:17:02,130 --> 00:17:08,990
block element modifier if you take a

00:17:05,189 --> 00:17:11,760
menu a menu is a block a menu item is

00:17:08,990 --> 00:17:13,589
element and modifier can be the state

00:17:11,760 --> 00:17:15,299
like active or disabled state of your

00:17:13,589 --> 00:17:18,569
menu so block element modifier

00:17:15,299 --> 00:17:20,750
Convention was used to write your CSS

00:17:18,569 --> 00:17:25,290
and also fill up your markup with lot of

00:17:20,750 --> 00:17:27,179
CSS class names so disadvantages been

00:17:25,290 --> 00:17:30,330
brought in a lot of semantic City into

00:17:27,179 --> 00:17:34,260
CSS but at the same time it even made a

00:17:30,330 --> 00:17:38,700
mock up unnecessarily semantic it it

00:17:34,260 --> 00:17:41,460
blotted the mock up so we had to find a

00:17:38,700 --> 00:17:45,780
way to automate BEM okay so that's why

00:17:41,460 --> 00:17:49,290
CSS modules came in and react started to

00:17:45,780 --> 00:17:51,690
use CSS modules from the beginning and a

00:17:49,290 --> 00:17:54,179
lot of our projects today are using CSS

00:17:51,690 --> 00:17:58,740
modules what CSS modules brought in was

00:17:54,179 --> 00:18:00,690
true encapsulation it automated Ben so

00:17:58,740 --> 00:18:03,780
you could just forget about your

00:18:00,690 --> 00:18:07,830
component class names having clashes

00:18:03,780 --> 00:18:11,100
with other components class names but

00:18:07,830 --> 00:18:13,650
CSS modules still didn't bring in the

00:18:11,100 --> 00:18:18,100
style architecture predictability and

00:18:13,650 --> 00:18:20,860
consistency then in 2007

00:18:18,100 --> 00:18:24,310
style components was introduced style

00:18:20,860 --> 00:18:27,190
components is a library which implements

00:18:24,310 --> 00:18:31,600
CSS in j/s initially there was a lot of

00:18:27,190 --> 00:18:34,540
friction because people thought CSS is

00:18:31,600 --> 00:18:38,800
going to come to an end if CSS and J's

00:18:34,540 --> 00:18:42,340
gets ahead and also people thought it's

00:18:38,800 --> 00:18:45,040
not performant but oh the year in 2017

00:18:42,340 --> 00:18:48,040
we have seen that style components has

00:18:45,040 --> 00:18:49,630
been introduced in many large-scale

00:18:48,040 --> 00:18:52,390
projects and it's being used

00:18:49,630 --> 00:18:55,000
successfully what a style components

00:18:52,390 --> 00:18:57,940
they're just pure visual primitives so

00:18:55,000 --> 00:19:01,900
it's pure visual components they use

00:18:57,940 --> 00:19:04,960
template little notation of es6 so it

00:19:01,900 --> 00:19:08,620
means that they blend es6 and CSS in a

00:19:04,960 --> 00:19:11,230
good way so they separate UI from the

00:19:08,620 --> 00:19:13,000
functional and stateful components also

00:19:11,230 --> 00:19:14,830
one more thing that's very important

00:19:13,000 --> 00:19:17,470
when you're working on lots in large

00:19:14,830 --> 00:19:20,020
teams is the design and development was

00:19:17,470 --> 00:19:23,320
a hand off previously now it can be a

00:19:20,020 --> 00:19:26,010
continuous collaboration so you can

00:19:23,320 --> 00:19:29,140
build core components not only for the

00:19:26,010 --> 00:19:35,530
browser-based apps but also for your

00:19:29,140 --> 00:19:38,230
native apps using style components so

00:19:35,530 --> 00:19:40,630
let's get started and create a simple

00:19:38,230 --> 00:19:42,460
style component and after that we will

00:19:40,630 --> 00:19:44,470
look into the theming of style

00:19:42,460 --> 00:19:47,530
components and look into how passing

00:19:44,470 --> 00:19:50,740
proverbs and how to reuse an extent and

00:19:47,530 --> 00:19:54,000
finally in the end I will talk about

00:19:50,740 --> 00:19:59,560
what's the future for style components

00:19:54,000 --> 00:20:03,060
okay so please check out this branch and

00:19:59,560 --> 00:20:03,060
we'll get started from there

00:20:37,200 --> 00:20:43,330
also before we start over here as you

00:20:40,870 --> 00:20:44,950
can see we have created for each step a

00:20:43,330 --> 00:20:46,750
feature branch which has the completed

00:20:44,950 --> 00:20:48,670
code so if you are stuck and if you want

00:20:46,750 --> 00:20:50,620
to quickly switch to that branch and get

00:20:48,670 --> 00:20:52,600
the final code you can switch to that

00:20:50,620 --> 00:20:54,100
branch so for style components it will

00:20:52,600 --> 00:20:56,920
be step one step two step three step

00:20:54,100 --> 00:20:59,440
four Step five so we start off with step

00:20:56,920 --> 00:21:02,590
one and we build if you get stuck

00:20:59,440 --> 00:21:04,180
anywhere when we are going through any

00:21:02,590 --> 00:21:06,970
any of the features you can just switch

00:21:04,180 --> 00:21:09,330
to that and you can yeah start coding

00:21:06,970 --> 00:21:09,330
from there

00:21:24,180 --> 00:21:30,040
once you have checked out branch I will

00:21:27,970 --> 00:21:35,530
quickly explain we have also put a

00:21:30,040 --> 00:21:39,610
styled coms dot txt in your main

00:21:35,530 --> 00:21:42,190
workspace here we have actually created

00:21:39,610 --> 00:21:44,530
put in the code that which you can copy

00:21:42,190 --> 00:21:49,120
paste into your components whenever we

00:21:44,530 --> 00:21:51,250
are trying to do any exercise but I'll

00:21:49,120 --> 00:21:53,440
go slow so you you will still be able to

00:21:51,250 --> 00:21:55,270
go a code instead of just copy pasting

00:21:53,440 --> 00:21:57,100
so if you are stuck you can still copy

00:21:55,270 --> 00:22:14,670
paste either switch branch or you can

00:21:57,100 --> 00:22:14,670
copy paste from here this one

00:22:24,430 --> 00:22:31,810
we aren't able to zoom in yeah

00:22:42,130 --> 00:22:50,780
that's out there you don't have to worry

00:22:47,840 --> 00:22:52,910
about the code I'll be typing along with

00:22:50,780 --> 00:22:56,360
you guys so you can see on my workspace

00:22:52,910 --> 00:22:58,070
and you can type along yeah if you want

00:22:56,360 --> 00:23:02,450
this code it's already present in your

00:22:58,070 --> 00:23:07,430
workspace as I told if you if you go

00:23:02,450 --> 00:23:09,230
into style combs dot txt so you have all

00:23:07,430 --> 00:23:18,500
the code there yeah

00:23:09,230 --> 00:23:23,500
cool let us know when you are ready all

00:23:18,500 --> 00:23:23,500
of you if you are ready just let me know

00:24:47,160 --> 00:24:55,840
let's start off so if you look into the

00:24:53,169 --> 00:24:58,299
code we have app dot JSX

00:24:55,840 --> 00:25:03,070
where we have created a rod to style

00:24:58,299 --> 00:25:07,660
comp so basically all the screens or

00:25:03,070 --> 00:25:09,250
pages are in the routes folder and the

00:25:07,660 --> 00:25:11,559
components folder contains a lot of

00:25:09,250 --> 00:25:13,929
style components so if you want to see

00:25:11,559 --> 00:25:15,910
complex examples about style components

00:25:13,929 --> 00:25:19,480
you can look into the components folder

00:25:15,910 --> 00:25:21,750
we have created a few style components

00:25:19,480 --> 00:25:25,500
which we'll be using in the chat

00:25:21,750 --> 00:25:27,730
application later on to keep the work

00:25:25,500 --> 00:25:30,760
workshop simple on style components

00:25:27,730 --> 00:25:35,049
we'll be just using one single file that

00:25:30,760 --> 00:25:39,570
would be style comm dot JSX here as you

00:25:35,049 --> 00:25:44,679
can see we have a basic react component

00:25:39,570 --> 00:25:55,410
which just renders a button so you can

00:25:44,679 --> 00:25:58,750
do NPM start after you switch branch and

00:25:55,410 --> 00:26:01,169
you should be able to see our HTML a

00:25:58,750 --> 00:26:01,169
button

00:27:02,740 --> 00:27:10,380
okay let's let's build a first style

00:27:05,470 --> 00:27:14,200
component so in style Comte or JSX

00:27:10,380 --> 00:27:16,899
to use style components all that you

00:27:14,200 --> 00:27:20,970
need to do is in your packages and just

00:27:16,899 --> 00:27:24,130
add a dependency on style components

00:27:20,970 --> 00:27:27,340
it's already been added so you need not

00:27:24,130 --> 00:27:30,450
do and PM install again so now we import

00:27:27,340 --> 00:27:30,450
style components

00:27:37,640 --> 00:27:45,270
so you import style components and we

00:27:41,010 --> 00:27:48,860
will create a button a style component

00:27:45,270 --> 00:27:48,860
as custom button so

00:27:52,500 --> 00:28:02,980
so we use template little notation so

00:27:58,320 --> 00:28:10,960
and as you can see I'm just hooking into

00:28:02,980 --> 00:28:18,160
the native button button element so we

00:28:10,960 --> 00:28:21,880
do use backticks we'll just give a

00:28:18,160 --> 00:28:24,250
background for it I won't be using hex

00:28:21,880 --> 00:28:30,400
notation here I'll just use it as light

00:28:24,250 --> 00:28:34,320
blue once that is done you can now

00:28:30,400 --> 00:28:34,320
render your custom button

00:29:05,080 --> 00:29:14,590
ah I'm sorry I made a spelling mistake

00:29:07,840 --> 00:29:16,989
there yeah it's almost yea good morning

00:29:14,590 --> 00:29:21,100
everybody I'm sorry to interrupt this

00:29:16,989 --> 00:29:22,450
important program for a moment good

00:29:21,100 --> 00:29:24,879
morning I hope you settled in quite

00:29:22,450 --> 00:29:27,549
nicely on these next between 10 and 11

00:29:24,879 --> 00:29:30,580
we have nitro coffee all day when he

00:29:27,549 --> 00:29:32,470
allows you to leave only then you may

00:29:30,580 --> 00:29:33,999
join us at the hacker deck for a nitro

00:29:32,470 --> 00:29:36,070
coffee looks a little bit like a

00:29:33,999 --> 00:29:38,169
Guinness with a thick foam on top and

00:29:36,070 --> 00:29:40,029
with a cocktail robot there and the

00:29:38,169 --> 00:29:41,440
robot reacts to QR codes you find one of

00:29:40,029 --> 00:29:43,659
those already on our social media pages

00:29:41,440 --> 00:29:46,749
on twitter.com such as Camtasia and

00:29:43,659 --> 00:29:49,149
Facebook on flash days come to Asia for

00:29:46,749 --> 00:29:50,619
now only the non-alcoholic version later

00:29:49,149 --> 00:29:52,179
today you're going to get the alcoholic

00:29:50,619 --> 00:29:54,820
version there too so make sure you

00:29:52,179 --> 00:29:56,399
follow us you get that QR code just go

00:29:54,820 --> 00:30:00,100
to the robots and make your cocktail

00:29:56,399 --> 00:30:02,129
that's about it I'll leave it to guru to

00:30:00,100 --> 00:30:04,450
make you a great morning from your and

00:30:02,129 --> 00:30:08,259
enjoy and I hope you all take something

00:30:04,450 --> 00:30:11,379
home from you okay you want to join for

00:30:08,259 --> 00:30:14,669
a photo oh yeah just there so I have you

00:30:11,379 --> 00:30:14,669
as a hostess oh yeah sure

00:30:17,120 --> 00:30:21,770
okay I'm ready Cheers

00:30:19,020 --> 00:30:21,770
you want to be in a bit

00:30:23,260 --> 00:30:40,660
notice that was the wrong picture q so

00:30:36,260 --> 00:30:40,660
you must have your first style component

00:31:02,880 --> 00:31:20,290
so we'll film wide so next we look into

00:31:17,100 --> 00:31:22,590
how can you pass custom drops it's not

00:31:20,290 --> 00:31:24,970
just custom props you can even pass in

00:31:22,590 --> 00:31:29,890
attributes HTML attributes to your

00:31:24,970 --> 00:31:35,740
button so I'll quickly show you that you

00:31:29,890 --> 00:31:38,440
can just make this button disabled and

00:31:35,740 --> 00:31:40,750
the button would be disabled so it means

00:31:38,440 --> 00:31:44,910
that the HTML attributes are being

00:31:40,750 --> 00:31:44,910
passed to the styled component

00:32:17,049 --> 00:32:24,529
yeah now let's look into how we can pass

00:32:21,019 --> 00:32:28,190
custom props so what we'll do is we'll

00:32:24,529 --> 00:32:29,899
create three buttons a small a medium

00:32:28,190 --> 00:32:31,789
and a large button and we will see how

00:32:29,899 --> 00:32:39,489
we can use the same style component by

00:32:31,789 --> 00:32:44,499
passing props to it so we'll create

00:32:39,489 --> 00:32:44,499
three buttons we use a fragment tag

00:33:41,200 --> 00:33:49,150
yes on which step are you doing up this

00:33:46,090 --> 00:33:55,800
that's right just you just know that

00:33:49,150 --> 00:33:55,800
tell you I'm on step 2

00:34:07,340 --> 00:34:12,899
so we have created our custom props

00:34:10,139 --> 00:34:16,350
small medium and large now we are going

00:34:12,899 --> 00:34:23,639
to read those props within our style

00:34:16,350 --> 00:34:26,340
component so let's create a margin so

00:34:23,639 --> 00:34:29,030
that the buttons are spread out let's

00:34:26,340 --> 00:34:29,030
put in a margin

00:34:32,210 --> 00:34:40,500
so now we use the template neutral

00:34:37,559 --> 00:34:44,629
notation to read properties or read

00:34:40,500 --> 00:34:50,389
JavaScript within the templating

00:34:44,629 --> 00:34:50,389
notation so for that props

00:35:31,100 --> 00:35:38,010
and then once we read the props we can

00:35:36,240 --> 00:35:40,710
set whatever styling you need so it's

00:35:38,010 --> 00:35:47,150
it's CSS dynamically being modified

00:35:40,710 --> 00:35:47,150
during runtime so now if you

00:35:53,559 --> 00:35:58,930
so if you look in your screen now there

00:35:56,420 --> 00:36:03,910
are three buttons with variable sizes

00:35:58,930 --> 00:36:03,910
this is how we can pass custom props

00:36:27,170 --> 00:36:31,160
yep and it just will feature there would

00:36:30,950 --> 00:36:34,520
be

00:36:31,160 --> 00:36:46,910
backticks they're not evaluated until

00:36:34,520 --> 00:36:48,590
later yeah without sort of in them if we

00:36:46,910 --> 00:36:52,130
had stubs on button really Frank it's

00:36:48,590 --> 00:36:53,030
what it because I was a writer in a

00:36:52,130 --> 00:36:57,200
traditional way

00:36:53,030 --> 00:36:58,520
mm-hmm I'm just curious so if I think

00:36:57,200 --> 00:37:00,620
you fail use brackets it doesn't work

00:36:58,520 --> 00:37:03,170
because it's yeah yeah but would there

00:37:00,620 --> 00:37:04,640
be a way I mean I tried doing this but

00:37:03,170 --> 00:37:06,110
this didn't work would there be a way to

00:37:04,640 --> 00:37:09,800
do it I know

00:37:06,110 --> 00:37:12,200
no it uses es6 template little notation

00:37:09,800 --> 00:37:13,970
so that's the that's that that's what

00:37:12,200 --> 00:37:17,030
style components comes with but if you

00:37:13,970 --> 00:37:19,430
look into other CSS and J's libraries

00:37:17,030 --> 00:37:21,770
they use other notations like you can

00:37:19,430 --> 00:37:24,410
pass in a function and yeah then you can

00:37:21,770 --> 00:37:26,180
do a lot of things yeah yeah here

00:37:24,410 --> 00:37:30,730
everything would be passed as props and

00:37:26,180 --> 00:37:30,730
then you can dynamically switch yeah

00:37:44,740 --> 00:37:47,830
[Music]

00:37:48,140 --> 00:37:57,810
so it's working yeah we'll move on to

00:37:54,270 --> 00:37:59,160
the next topic themes so a style

00:37:57,810 --> 00:38:00,690
architecture whenever you're doing any

00:37:59,160 --> 00:38:02,730
style architecture you should always

00:38:00,690 --> 00:38:04,710
think about themes because you don't

00:38:02,730 --> 00:38:08,390
know when how big your product is going

00:38:04,710 --> 00:38:11,700
to grow and how many clients would be

00:38:08,390 --> 00:38:13,500
buying your product and you might have

00:38:11,700 --> 00:38:16,880
to build different themes for different

00:38:13,500 --> 00:38:20,460
lines right traditionally how in a

00:38:16,880 --> 00:38:23,070
simple way using just CSS how we used to

00:38:20,460 --> 00:38:25,530
achieve this so on the body tag you if

00:38:23,070 --> 00:38:29,940
you put up a class called theme light or

00:38:25,530 --> 00:38:33,360
theme dark okay and you can use any

00:38:29,940 --> 00:38:36,780
class classes within for all the

00:38:33,360 --> 00:38:40,800
elements within the body and now using

00:38:36,780 --> 00:38:43,500
CSS cascading or I would say hierarchy

00:38:40,800 --> 00:38:45,690
theme light has button dot primary which

00:38:43,500 --> 00:38:47,130
says background like blue and theme dark

00:38:45,690 --> 00:38:49,230
as button dot primary which say is

00:38:47,130 --> 00:38:51,270
background blue so what we used to do

00:38:49,230 --> 00:38:53,550
over here if you have ten themes in your

00:38:51,270 --> 00:38:54,720
application we had to package all these

00:38:53,550 --> 00:38:58,200
ten themes together

00:38:54,720 --> 00:39:00,930
and ship it to the browser's for the

00:38:58,200 --> 00:39:04,020
browser to treat them or you could do

00:39:00,930 --> 00:39:06,260
lazy loading on on similar lines but now

00:39:04,020 --> 00:39:10,020
with CSS nsj you can dynamically change

00:39:06,260 --> 00:39:12,570
props variables etc and you can achieve

00:39:10,020 --> 00:39:14,820
this one thing that style components

00:39:12,570 --> 00:39:17,700
comes in built with is theme provider so

00:39:14,820 --> 00:39:20,370
you can have specific sections of your

00:39:17,700 --> 00:39:22,890
application running on a certain theme

00:39:20,370 --> 00:39:25,020
and other sections running on a

00:39:22,890 --> 00:39:28,560
different team if you want okay so we'll

00:39:25,020 --> 00:39:31,800
quickly look into how we can create a

00:39:28,560 --> 00:39:33,660
theme for two custom buttons and having

00:39:31,800 --> 00:39:37,110
different backgrounds so basically by

00:39:33,660 --> 00:39:40,820
reading props so for that we need to

00:39:37,110 --> 00:39:40,820
first import team provider

00:39:46,400 --> 00:39:53,579
and then I'll remove the props for

00:39:50,730 --> 00:40:03,210
padding and I'll just give up pairing

00:39:53,579 --> 00:40:12,690
off once that is done so you can define

00:40:03,210 --> 00:40:16,579
your themes by using objects so we'll

00:40:12,690 --> 00:40:21,930
create two teams team one and Team two

00:40:16,579 --> 00:40:30,599
so we'll set the primary color to light

00:40:21,930 --> 00:40:33,289
blue for team one and for Team two this

00:40:30,599 --> 00:40:33,289
is hello

00:40:34,799 --> 00:40:44,049
how do you use these props here would be

00:40:38,770 --> 00:40:46,890
that within your fragment you can call

00:40:44,049 --> 00:40:46,890
the team provider

00:40:49,710 --> 00:40:56,170
and to this theme provider you can pass

00:40:53,650 --> 00:40:58,570
in your theme object that you just now

00:40:56,170 --> 00:41:01,330
created so for the first theme provider

00:40:58,570 --> 00:41:07,960
will send it will give it team one as

00:41:01,330 --> 00:41:11,940
prop and for this second theme provider

00:41:07,960 --> 00:41:15,400
will give team two now you can

00:41:11,940 --> 00:41:20,859
copy-paste the custom button within the

00:41:15,400 --> 00:41:23,760
theme provider you can remove the small

00:41:20,859 --> 00:41:23,760
prop etc

00:41:35,319 --> 00:41:42,920
we are done with the JSX mock-up now we

00:41:40,400 --> 00:41:47,960
need to read the team one and Team twos

00:41:42,920 --> 00:41:52,059
primary color within our style component

00:41:47,960 --> 00:41:52,059
so for that it's it's very simple

00:42:08,960 --> 00:42:17,270
so you just read props dot team dot

00:42:12,290 --> 00:42:24,230
primary and automatically your buttons

00:42:17,270 --> 00:42:26,540
should be teamed so now you can use this

00:42:24,230 --> 00:42:29,690
theme provider at way various levels so

00:42:26,540 --> 00:42:31,700
you can use this team provider at the ad

00:42:29,690 --> 00:42:33,440
in your index dot HTML at the global

00:42:31,700 --> 00:42:36,859
level and automatically switch teams

00:42:33,440 --> 00:42:39,079
between dark light etc based on whatever

00:42:36,859 --> 00:42:41,530
is stored in the database for user

00:42:39,079 --> 00:42:41,530
preference

00:42:54,510 --> 00:43:05,620
so we'll move on to the next topic so we

00:43:00,820 --> 00:43:08,220
looked into team provider next topic

00:43:05,620 --> 00:43:11,380
would be reusability and extendibility

00:43:08,220 --> 00:43:14,260
basically how you can use mix-ins there

00:43:11,380 --> 00:43:15,670
is more advanced topic on extent but if

00:43:14,260 --> 00:43:17,350
you want to see examples of that if you

00:43:15,670 --> 00:43:19,420
go into a components folder we have

00:43:17,350 --> 00:43:22,150
style components which are using extent

00:43:19,420 --> 00:43:26,820
for now we will quickly see how we can

00:43:22,150 --> 00:43:31,000
use a mixin and use those CSS variables

00:43:26,820 --> 00:43:36,460
in two different style components so for

00:43:31,000 --> 00:43:41,800
that will still use team one and Team

00:43:36,460 --> 00:43:48,900
two what we can do is create a constant

00:43:41,800 --> 00:43:48,900
as base button which will take in

00:44:07,530 --> 00:44:14,880
we'll have a custom button and we'll

00:44:09,970 --> 00:44:14,880
create a new button called super button

00:44:23,060 --> 00:44:32,460
and now we can read base button props as

00:44:28,320 --> 00:44:36,800
mix in within our custom button and

00:44:32,460 --> 00:44:36,800
super button so far

00:44:40,970 --> 00:44:47,420
and for the super button let's put in

00:44:44,420 --> 00:44:47,420
border-radius

00:44:55,250 --> 00:45:00,810
so all the code for this is in style

00:44:58,050 --> 00:45:04,410
comm dot txt so you can just go in there

00:45:00,810 --> 00:45:14,250
and read about it or copy paste if you

00:45:04,410 --> 00:45:16,530
are stuck in stuck anywhere so once

00:45:14,250 --> 00:45:23,599
that's done now you can use custom

00:45:16,530 --> 00:45:23,599
button and super button in your JSX

00:45:27,550 --> 00:45:32,599
so as you can see you have custom style

00:45:30,920 --> 00:45:35,359
component one custom style component two

00:45:32,599 --> 00:45:37,310
one is a custom using custom button

00:45:35,359 --> 00:45:39,890
style component and the one is using cus

00:45:37,310 --> 00:45:43,910
super custom button component which has

00:45:39,890 --> 00:45:46,880
a border radius added to it so this is

00:45:43,910 --> 00:45:49,790
how you can reuse variables you can

00:45:46,880 --> 00:45:51,920
define themes you can have waves

00:45:49,790 --> 00:45:54,530
properties defined and stored in your

00:45:51,920 --> 00:45:57,890
database and read in the runtime and

00:45:54,530 --> 00:46:03,220
applied to your CSS if we had to achieve

00:45:57,890 --> 00:46:05,869
this in using CSS or even as CSS then I

00:46:03,220 --> 00:46:09,579
you should have used a lot of lazy

00:46:05,869 --> 00:46:14,560
loading techniques etc but now it's it's

00:46:09,579 --> 00:46:14,560
total dynamic behavior

00:47:03,400 --> 00:47:09,760
if you're that if you're done we'll move

00:47:05,710 --> 00:47:12,360
on that's all about style components

00:47:09,760 --> 00:47:15,340
workshop if you want to see more complex

00:47:12,360 --> 00:47:19,420
examples you can go into the components

00:47:15,340 --> 00:47:26,550
folder we have created input which has a

00:47:19,420 --> 00:47:29,230
lot of complex style component dynamic

00:47:26,550 --> 00:47:32,940
passing props and enabling dynamic

00:47:29,230 --> 00:47:36,570
behavior so you can look into it

00:47:32,940 --> 00:47:39,910
so what's future of style components

00:47:36,570 --> 00:47:42,940
basically washing one had post CSS

00:47:39,910 --> 00:47:46,840
pipeline which was cause which was

00:47:42,940 --> 00:47:49,300
increasing the built by the pipeline CSS

00:47:46,840 --> 00:47:52,000
pipeline for conversion from style comps

00:47:49,300 --> 00:47:55,840
to CSS and inject it into your HTML

00:47:52,000 --> 00:48:00,450
document the bundle size was big like 21

00:47:55,840 --> 00:48:04,930
KB so they switched in version 2 - Silas

00:48:00,450 --> 00:48:07,840
but what they missed is Pasillas this

00:48:04,930 --> 00:48:11,590
was creating a AST so you could tweak

00:48:07,840 --> 00:48:14,800
into the pipeline of post CSS and you

00:48:11,590 --> 00:48:17,050
could use it to do your own auto fixing

00:48:14,800 --> 00:48:19,420
custom auto prefix prefixes for your CSS

00:48:17,050 --> 00:48:21,520
etc and also for left-to-right

00:48:19,420 --> 00:48:22,150
transformations but now that's not

00:48:21,520 --> 00:48:25,900
possible

00:48:22,150 --> 00:48:30,160
so what style components team is coming

00:48:25,900 --> 00:48:32,530
up with is something called as intro

00:48:30,160 --> 00:48:35,550
parable style transfer format this would

00:48:32,530 --> 00:48:39,970
be this is the first CSS in gs format

00:48:35,550 --> 00:48:41,860
that they're coming up with so you you

00:48:39,970 --> 00:48:45,760
would be able to generate AST abstract

00:48:41,860 --> 00:48:49,320
syntax trees and customize how style

00:48:45,760 --> 00:48:52,090
components would work for your own need

00:48:49,320 --> 00:48:56,260
one thing that we didn't look into was

00:48:52,090 --> 00:48:59,200
linting so now the cell components team

00:48:56,260 --> 00:49:00,730
has come up with style and processor for

00:48:59,200 --> 00:49:03,820
your style components so it's

00:49:00,730 --> 00:49:06,130
production-ready linting of your style

00:49:03,820 --> 00:49:10,030
components similar to how we could lint

00:49:06,130 --> 00:49:10,780
SCSS with sass lane and you're using

00:49:10,030 --> 00:49:16,560
year slained

00:49:10,780 --> 00:49:16,560
sorry not yes liens CSS lint for CSS so

00:49:17,510 --> 00:49:26,600
so we'll quickly summarize so we went

00:49:22,020 --> 00:49:29,400
through we looked into CSS evolution how

00:49:26,600 --> 00:49:34,140
what a style components what are their

00:49:29,400 --> 00:49:36,390
advantages etc we looked into a workshop

00:49:34,140 --> 00:49:38,490
a quick workshop on creating style

00:49:36,390 --> 00:49:40,380
components passing custom props themes

00:49:38,490 --> 00:49:45,080
reusability and extendibility

00:49:40,380 --> 00:49:47,430
and we had a short description about

00:49:45,080 --> 00:49:53,160
where style components is going in the

00:49:47,430 --> 00:49:57,060
future yeah so that was the first

00:49:53,160 --> 00:49:59,430
session it was a warm-up session so next

00:49:57,060 --> 00:50:01,740
sessions would be even more faster and

00:49:59,430 --> 00:50:04,080
we will deep dive into optimistic UX

00:50:01,740 --> 00:50:04,650
next after we have a quick five-minute

00:50:04,080 --> 00:50:09,710
break

00:50:04,650 --> 00:50:09,710
yeah yep thank you

00:50:23,060 --> 00:50:33,600
we have small gift for you

00:50:27,560 --> 00:50:36,390
webcam colors so we'll go ahead with the

00:50:33,600 --> 00:50:38,460
quiz we I don't think we can wait for

00:50:36,390 --> 00:50:42,240
the others to come back because we're

00:50:38,460 --> 00:50:47,850
running out of time sorry for that so

00:50:42,240 --> 00:50:50,730
it's it's easy but it's what you need to

00:50:47,850 --> 00:50:53,340
read in between lines so it's going to

00:50:50,730 --> 00:50:56,750
cover three concepts I'll explain to you

00:50:53,340 --> 00:50:56,750
the concept later on but

00:50:57,160 --> 00:51:01,150
what do you think the answer would be

00:51:02,319 --> 00:51:09,550
first was yeah sorry that's wrong

00:51:10,150 --> 00:51:14,950
yeah that's right undefined is the

00:51:13,670 --> 00:51:19,670
answer

00:51:14,950 --> 00:51:24,369
reason yeah victus people to inject a

00:51:19,670 --> 00:51:28,069
semicolon yeah that's right so a

00:51:24,369 --> 00:51:31,130
semicolon is injected and that's why

00:51:28,069 --> 00:51:35,750
this object is neglected and you get an

00:51:31,130 --> 00:51:37,190
undefined so this just shows that you

00:51:35,750 --> 00:51:41,230
should be very careful when you are not

00:51:37,190 --> 00:51:41,230
using yeah

00:51:41,470 --> 00:51:44,890
how about this

00:51:57,220 --> 00:52:00,660
yeah yeah

00:52:01,180 --> 00:52:03,809
No

00:52:10,299 --> 00:52:34,769
just sticking guys guys yeah I think

00:52:13,749 --> 00:52:34,769
it's just drink no sorry for that no no

00:52:41,759 --> 00:52:48,910
yeah function for stranger what's

00:52:44,979 --> 00:52:51,549
happening here is returning food so the

00:52:48,910 --> 00:52:54,759
code below is never going to be reached

00:52:51,549 --> 00:52:57,849
so foo is equal to ten is never each but

00:52:54,759 --> 00:53:00,789
however function foo would be hoisted to

00:52:57,849 --> 00:53:04,420
top of this function right so that's why

00:53:00,789 --> 00:53:10,509
it's it's a function yeah

00:53:04,420 --> 00:53:13,259
so now let's get seen yes let's see what

00:53:10,509 --> 00:53:13,259
this would be

00:53:25,100 --> 00:53:31,520
sorry

00:53:26,310 --> 00:53:31,520
I will project it here oh my

00:53:58,040 --> 00:54:01,040
No

00:54:06,740 --> 00:54:26,660
yeah yep anyone DS our core concepts of

00:54:24,510 --> 00:54:29,280
JavaScript that we are looking into

00:54:26,660 --> 00:54:33,329
first one was when you don't use

00:54:29,280 --> 00:54:35,910
semicolons I agree I'm old school so I

00:54:33,329 --> 00:54:37,559
still use semicolons so when you don't

00:54:35,910 --> 00:54:40,920
use semicolons where you can go wrong

00:54:37,559 --> 00:54:43,589
that was the first question about second

00:54:40,920 --> 00:54:45,990
one was function for sting and third one

00:54:43,589 --> 00:54:46,770
is a little bit more complex in

00:54:45,990 --> 00:54:51,270
JavaScript

00:54:46,770 --> 00:54:55,170
yes yeah perfect

00:54:51,270 --> 00:54:59,369
yeah it's III and one so what we're

00:54:55,170 --> 00:55:03,059
looking at here is closures so when

00:54:59,369 --> 00:55:06,299
you're doing full bath bar go equal to

00:55:03,059 --> 00:55:09,119
this and if you call him go go isn't

00:55:06,299 --> 00:55:12,720
looser the global space there so when

00:55:09,119 --> 00:55:16,500
you do it's going to print tree and when

00:55:12,720 --> 00:55:20,160
you do pub as bar its if the closure

00:55:16,500 --> 00:55:22,770
would be within bar but Howard the X is

00:55:20,160 --> 00:55:28,680
read on top of that so it's X equal one

00:55:22,770 --> 00:55:33,140
so it's 3 comma 1 ok yeah thank you and

00:55:28,680 --> 00:55:33,140
we'll continue with our next workshop

00:55:47,940 --> 00:55:55,390
hello hello can you guys hear me yep

00:55:52,000 --> 00:55:58,030
okay so we're going to do a chat app and

00:55:55,390 --> 00:56:01,150
we're going to apply some optimistic UI

00:55:58,030 --> 00:56:03,460
or updates on chat on the chat app as

00:56:01,150 --> 00:56:05,740
well so before I continue

00:56:03,460 --> 00:56:10,510
can I show us of hands who doesn't know

00:56:05,740 --> 00:56:15,520
what does we mean by optimistic UI No

00:56:10,510 --> 00:56:18,430
okay so optimistic UI here's the the

00:56:15,520 --> 00:56:20,020
decryption but ultimately what it means

00:56:18,430 --> 00:56:23,110
that when you are sending something to

00:56:20,020 --> 00:56:25,390
the server and you assure that maybe 90%

00:56:23,110 --> 00:56:27,280
you will not return you an error right

00:56:25,390 --> 00:56:29,230
you update the UI first without waiting

00:56:27,280 --> 00:56:31,720
for the server to get back to you if

00:56:29,230 --> 00:56:35,410
something pass or fail so you give a

00:56:31,720 --> 00:56:39,370
psychological speed to the user that you

00:56:35,410 --> 00:56:41,500
know everything is fast so very one

00:56:39,370 --> 00:56:44,710
example that we can know is if you use

00:56:41,500 --> 00:56:46,180
whatsapp right when you send the check

00:56:44,710 --> 00:56:47,860
come out first without saying there no

00:56:46,180 --> 00:56:49,660
data loading or waiting for the server

00:56:47,860 --> 00:56:51,910
to get back to say have you been

00:56:49,660 --> 00:56:54,970
successfully delivered so you will just

00:56:51,910 --> 00:56:57,100
show and then you have a they go of a

00:56:54,970 --> 00:57:00,850
step further with the ticks to show that

00:56:57,100 --> 00:57:03,700
if it's delivered or have the user read

00:57:00,850 --> 00:57:06,700
if you have those option on so there's

00:57:03,700 --> 00:57:10,480
what optimistic UI is and today so we're

00:57:06,700 --> 00:57:12,460
going to do a chat app right and then we

00:57:10,480 --> 00:57:19,030
can see how can we apply this in our

00:57:12,460 --> 00:57:20,590
reactor Redux application so sorry so

00:57:19,030 --> 00:57:23,860
the first thing is maybe you can check

00:57:20,590 --> 00:57:24,460
out the branch very simple in it cost

00:57:23,860 --> 00:57:29,490
Tata

00:57:24,460 --> 00:57:29,490
if you can't see have it here as well

00:57:31,880 --> 00:57:37,579
yes you know - meows - yeah your privet

00:57:35,359 --> 00:57:41,859
run track you either come in or you just

00:57:37,579 --> 00:57:44,930
- and then you please check out Tata

00:57:41,859 --> 00:57:46,309
after that uh run npm install just in

00:57:44,930 --> 00:57:50,410
case there's some dependency that is

00:57:46,309 --> 00:57:50,410
needed for this exercise as well

00:58:17,330 --> 00:58:24,000
so if you are done you can run NPM start

00:58:19,830 --> 00:58:26,340
and you should see a chat app similar to

00:58:24,000 --> 00:58:30,290
what you guys will see when you first

00:58:26,340 --> 00:58:30,290
check out the clone the repo

00:58:41,329 --> 00:58:46,890
and if you guys didn't have a reductive

00:58:44,550 --> 00:58:48,570
tools installed on your Chrome please do

00:58:46,890 --> 00:58:50,640
install it as well thank you

00:58:48,570 --> 00:58:52,619
we might need you may need it later if

00:58:50,640 --> 00:58:56,390
you face any problems when you want to

00:58:52,619 --> 00:58:56,390
debug issues

00:59:01,250 --> 00:59:12,440
so it's a which is everyone done cool

00:59:06,410 --> 00:59:15,960
okay so this is what you will see like

00:59:12,440 --> 00:59:18,330
on the left is the application and on

00:59:15,960 --> 00:59:22,320
the right is a bit uptight too so if you

00:59:18,330 --> 00:59:25,820
could set up your brother in such a way

00:59:22,320 --> 00:59:28,980
it would be good so if you look at the

00:59:25,820 --> 00:59:30,480
application what we can do is we can

00:59:28,980 --> 00:59:33,210
type in our username right you can type

00:59:30,480 --> 00:59:35,250
in anything right and you enter you'll

00:59:33,210 --> 00:59:37,740
bring into the chat room and in the chat

00:59:35,250 --> 00:59:43,680
room you can type anything all right

00:59:37,740 --> 00:59:46,230
I'll check haha right but you know this

00:59:43,680 --> 00:59:48,420
is not connected to any back-end added

00:59:46,230 --> 00:59:49,980
yet right so what we're going to do is

00:59:48,420 --> 00:59:51,720
we already have a you either it's being

00:59:49,980 --> 00:59:54,420
built up for you guys using stock

00:59:51,720 --> 00:59:57,060
components we are going to try and see

00:59:54,420 --> 00:59:59,670
how are we going to implement this we've

00:59:57,060 --> 01:00:03,210
socket and REST API so we're using a

00:59:59,670 --> 01:00:07,710
make sure socket and rest to build this

01:00:03,210 --> 01:00:10,230
application so before I continue just to

01:00:07,710 --> 01:00:13,710
let you guys know that most of it the

01:00:10,230 --> 01:00:15,780
code already in in in a code base we

01:00:13,710 --> 01:00:18,120
have some code commented out so we will

01:00:15,780 --> 01:00:21,290
comment them one by one with them being

01:00:18,120 --> 01:00:23,640
it's a shortage of shortage of time and

01:00:21,290 --> 01:00:25,650
we want to go to and make sure you guys

01:00:23,640 --> 01:00:28,320
understand some concepts like what we

01:00:25,650 --> 01:00:30,780
are doing in this project and what are

01:00:28,320 --> 01:00:32,850
some practices that we find that it's

01:00:30,780 --> 01:00:35,730
good and we are practicing and using it

01:00:32,850 --> 01:00:38,880
in our projects as well so before we

01:00:35,730 --> 01:00:41,580
continue maybe we can just look in the

01:00:38,880 --> 01:00:45,320
folder structure and now explain certain

01:00:41,580 --> 01:00:47,550
things so you can see that we have like

01:00:45,320 --> 01:00:49,170
this looks like a typical we are

01:00:47,550 --> 01:00:51,980
application right those have done via

01:00:49,170 --> 01:00:54,630
redux we have similar photo tractor

01:00:51,980 --> 01:00:57,570
think that I want to highlight is we

01:00:54,630 --> 01:01:00,930
have components and routes so components

01:00:57,570 --> 01:01:03,330
like what guru boat went to is a stock

01:01:00,930 --> 01:01:05,070
component components right so if you

01:01:03,330 --> 01:01:08,570
look what we are doing here you notice

01:01:05,070 --> 01:01:12,780
that all these components they are named

01:01:08,570 --> 01:01:14,680
story they are named very similar to

01:01:12,780 --> 01:01:16,180
your native API so that

01:01:14,680 --> 01:01:18,130
one thing to take note when you're

01:01:16,180 --> 01:01:21,520
building components right you try to

01:01:18,130 --> 01:01:23,170
have it at close to the HTML or CSS API

01:01:21,520 --> 01:01:25,630
so for n number of you're building a

01:01:23,170 --> 01:01:28,540
flex component right I just need me flag

01:01:25,630 --> 01:01:30,340
right for crops that you can pass in

01:01:28,540 --> 01:01:32,410
into your components right you can name

01:01:30,340 --> 01:01:34,300
anything for your props right but here

01:01:32,410 --> 01:01:36,700
you can see that we are using things

01:01:34,300 --> 01:01:39,010
like high justified content a line item

01:01:36,700 --> 01:01:41,170
flex Direction all these are very

01:01:39,010 --> 01:01:44,050
familiar these are from your CSS right

01:01:41,170 --> 01:01:46,240
you write your head in such a way so the

01:01:44,050 --> 01:01:48,370
advantage of this is any developers that

01:01:46,240 --> 01:01:50,590
come to your project right it's very

01:01:48,370 --> 01:01:53,290
familiar to them right they don't have

01:01:50,590 --> 01:01:55,000
to learn new api's or how you are

01:01:53,290 --> 01:01:56,950
building a component so this is one

01:01:55,000 --> 01:02:00,190
thing to take note when you're building

01:01:56,950 --> 01:02:02,080
your component so in such a way it will

01:02:00,190 --> 01:02:04,930
help people to understand and get up to

01:02:02,080 --> 01:02:07,630
speed so these are the components that

01:02:04,930 --> 01:02:09,760
we have built you can take a look at

01:02:07,630 --> 01:02:12,820
them if you want to and these are enough

01:02:09,760 --> 01:02:17,410
for you to build each other and we have

01:02:12,820 --> 01:02:21,670
the routes in our case browser like the

01:02:17,410 --> 01:02:25,300
pager so we have the login page the chat

01:02:21,670 --> 01:02:27,190
page so you can see that there are two

01:02:25,300 --> 01:02:33,460
photos here you log in and each other

01:02:27,190 --> 01:02:35,740
right so these are just your routes next

01:02:33,460 --> 01:02:39,580
thing they want to go to HD actions

01:02:35,740 --> 01:02:40,990
right we have actions so you can see if

01:02:39,580 --> 01:02:42,070
we have a bunch of code commented out so

01:02:40,990 --> 01:02:44,230
these are things that we're going to

01:02:42,070 --> 01:02:47,560
uncomment them one by one and we slowly

01:02:44,230 --> 01:02:49,810
will go through how this will link up

01:02:47,560 --> 01:02:51,940
our application together so in our

01:02:49,810 --> 01:02:55,030
actions you realize that we are not

01:02:51,940 --> 01:02:57,610
doing it in the normal way that we act

01:02:55,030 --> 01:03:00,100
our readers is doing so what we are

01:02:57,610 --> 01:03:02,950
doing here is you're using it like we

01:03:00,100 --> 01:03:05,830
call redux egg okay if what happened who

01:03:02,950 --> 01:03:09,190
have used without text before no one

01:03:05,830 --> 01:03:12,340
okay then I will explain what is this

01:03:09,190 --> 01:03:16,420
and why we are using it right so when

01:03:12,340 --> 01:03:18,580
you create a a action in your react

01:03:16,420 --> 01:03:21,400
application most of the time you create

01:03:18,580 --> 01:03:23,610
a constant that goes with your action

01:03:21,400 --> 01:03:25,960
type right because you want to prevent

01:03:23,610 --> 01:03:28,330
pairing our errors and things like that

01:03:25,960 --> 01:03:30,130
but if you notice here we did

01:03:28,330 --> 01:03:32,560
need to create any constant for our

01:03:30,130 --> 01:03:35,590
action type so why we ducks like this

01:03:32,560 --> 01:03:37,570
doing is you just create just put a

01:03:35,590 --> 01:03:39,700
string here which is your action pipe

01:03:37,570 --> 01:03:42,160
actually and what they are doing in the

01:03:39,700 --> 01:03:44,920
baggage they are helping you to enforce

01:03:42,160 --> 01:03:47,350
that your actions and unique as well so

01:03:44,920 --> 01:03:51,310
they have like some kind of ID there's

01:03:47,350 --> 01:04:00,790
in a pen prepended before your action

01:03:51,310 --> 01:04:04,270
type so if you were to see ok so you can

01:04:00,790 --> 01:04:06,610
see here the type right it's what we

01:04:04,270 --> 01:04:10,180
write as we eat but if you if you don't

01:04:06,610 --> 01:04:12,910
put a type right it would be an ID so

01:04:10,180 --> 01:04:16,480
they're helping you to make sure that

01:04:12,910 --> 01:04:18,760
this is unique all the time right so

01:04:16,480 --> 01:04:27,640
what they are doing if you look in our

01:04:18,760 --> 01:04:29,830
reducer right the way so the way we are

01:04:27,640 --> 01:04:33,150
using a reducer we are just importing

01:04:29,830 --> 01:04:35,830
the actions variable that we created so

01:04:33,150 --> 01:04:37,900
they are doing some what is happening is

01:04:35,830 --> 01:04:39,790
they are overriding the to shrink method

01:04:37,900 --> 01:04:42,820
so when you have an object this is an

01:04:39,790 --> 01:04:45,730
object and you have the computer key

01:04:42,820 --> 01:04:47,830
right what's happening is JavaScript

01:04:45,730 --> 01:04:50,860
will call the tostring method so this is

01:04:47,830 --> 01:04:53,740
how they are handling the type for

01:04:50,860 --> 01:04:55,780
catching the action so these one thing

01:04:53,740 --> 01:04:57,250
it's actually quite interesting you can

01:04:55,780 --> 01:05:00,040
you guys can take a look because it

01:04:57,250 --> 01:05:02,050
reduces the boilerplate of writing your

01:05:00,040 --> 01:05:03,970
constant because every action you have

01:05:02,050 --> 01:05:06,190
all the time you have a constant right

01:05:03,970 --> 01:05:08,890
so you cut down on our boilerplate and

01:05:06,190 --> 01:05:09,420
it makes your code easier to read as

01:05:08,890 --> 01:05:11,560
well

01:05:09,420 --> 01:05:13,960
one other thing that I want to highlight

01:05:11,560 --> 01:05:16,420
is the way we are using our writing our

01:05:13,960 --> 01:05:19,900
code in a reducer we have this pipe

01:05:16,420 --> 01:05:21,250
right thinking of pipe as a series of

01:05:19,900 --> 01:05:23,260
functions that we are piping to it just

01:05:21,250 --> 01:05:25,930
like your normal pipe in your Linux and

01:05:23,260 --> 01:05:28,960
everything your piping to our input to

01:05:25,930 --> 01:05:30,850
the various function right so now what

01:05:28,960 --> 01:05:33,520
we are doing is we are actually piping

01:05:30,850 --> 01:05:37,350
the state through this Paris very very

01:05:33,520 --> 01:05:37,350
well function so you can see

01:05:37,809 --> 01:05:42,589
over here let's just say we have the

01:05:40,280 --> 01:05:44,869
actions and check message right what we

01:05:42,589 --> 01:05:49,010
are doing is we are actually having this

01:05:44,869 --> 01:05:50,390
function they're taking a payload and a

01:05:49,010 --> 01:05:51,800
state that's well it I'll show you how

01:05:50,390 --> 01:05:54,410
where the state comes in right

01:05:51,800 --> 01:05:56,720
so if taking a state and returning a new

01:05:54,410 --> 01:05:57,770
state to the next function so you're

01:05:56,720 --> 01:06:00,950
returning the next state to the next

01:05:57,770 --> 01:06:03,020
function and then ultimately when this

01:06:00,950 --> 01:06:06,200
finish you will return the state to the

01:06:03,020 --> 01:06:08,599
reducer okay and then that's where the

01:06:06,200 --> 01:06:11,000
reducer will get a new state and then

01:06:08,599 --> 01:06:15,500
the whole app app react application will

01:06:11,000 --> 01:06:18,010
be render so the concept of this right

01:06:15,500 --> 01:06:20,720
we have what we call this mutators

01:06:18,010 --> 01:06:22,190
recording mutators because they mutate

01:06:20,720 --> 01:06:25,220
only one part of the state that

01:06:22,190 --> 01:06:27,650
constants then right so for example if

01:06:25,220 --> 01:06:36,349
you were to look at our

01:06:27,650 --> 01:06:39,290
mutaters right you can see what we are

01:06:36,349 --> 01:06:42,230
doing here is let's say set input i just

01:06:39,290 --> 01:06:44,089
want to care about these path inputs the

01:06:42,230 --> 01:06:47,030
name and the value and also set the

01:06:44,089 --> 01:06:49,490
value to this path so we're using

01:06:47,030 --> 01:06:52,430
immutable J's here so you can see it's a

01:06:49,490 --> 01:06:54,440
bit weird you know we do not have like

01:06:52,430 --> 01:06:56,540
object not assign and then we create a

01:06:54,440 --> 01:06:58,190
new object so we're using in the

01:06:56,540 --> 01:07:00,829
turbojet we have us to ensure the

01:06:58,190 --> 01:07:03,230
immutability of our state as well one

01:07:00,829 --> 01:07:06,470
other reason why we use this is because

01:07:03,230 --> 01:07:08,660
it helps you to maintain a very clean

01:07:06,470 --> 01:07:10,760
with you sir imagine if you have a very

01:07:08,660 --> 01:07:12,859
deep state what you have is you have

01:07:10,760 --> 01:07:15,230
reducer composing reducer and readin

01:07:12,859 --> 01:07:16,910
reducer and when you want to traverse

01:07:15,230 --> 01:07:18,829
through your code you need to go through

01:07:16,910 --> 01:07:20,390
this video so and you say oh this is

01:07:18,829 --> 01:07:22,130
actually handled by another video so

01:07:20,390 --> 01:07:23,510
you're going into that with you sir and

01:07:22,130 --> 01:07:26,119
you realize that then another reducer

01:07:23,510 --> 01:07:27,440
and composing so it would be very deep

01:07:26,119 --> 01:07:29,660
and very hard to traverse through the

01:07:27,440 --> 01:07:31,250
code so which is why when if you use

01:07:29,660 --> 01:07:35,660
this because you can just put the path

01:07:31,250 --> 01:07:38,510
and you will just go to that value so if

01:07:35,660 --> 01:07:40,760
it's hard to understand just take it if

01:07:38,510 --> 01:07:44,480
if the object you'll be object dot input

01:07:40,760 --> 01:07:44,780
not mean value so this is what we are

01:07:44,480 --> 01:07:47,630
doing

01:07:44,780 --> 01:07:50,569
and because the way we are doing we

01:07:47,630 --> 01:07:51,350
ensure that the mutaters only handle one

01:07:50,569 --> 01:07:54,200
thing

01:07:51,350 --> 01:07:57,500
and one thing only so it's very small

01:07:54,200 --> 01:07:59,390
right which makes it very easy to test

01:07:57,500 --> 01:08:01,430
as well so when you have a very big

01:07:59,390 --> 01:08:03,410
application you can have all these it's

01:08:01,430 --> 01:08:06,500
very easy to test and you can reuse them

01:08:03,410 --> 01:08:08,090
right because you have you probably have

01:08:06,500 --> 01:08:09,800
a bunch of inputs right you can have

01:08:08,090 --> 01:08:12,050
inputs and you have the dynamic puffier

01:08:09,800 --> 01:08:14,870
because of the name of the input right

01:08:12,050 --> 01:08:20,120
so that is why we are using a murder but

01:08:14,870 --> 01:08:24,109
just in this application as well so that

01:08:20,120 --> 01:08:26,109
is just a short when walkthrough of the

01:08:24,109 --> 01:08:29,480
cone and why we are using certain things

01:08:26,109 --> 01:08:32,330
any questions at this moment like

01:08:29,480 --> 01:08:35,030
anything is unsure or you are if anyone

01:08:32,330 --> 01:08:40,160
is lost everybody okay

01:08:35,030 --> 01:08:46,130
okay so we are going to start to try and

01:08:40,160 --> 01:08:47,930
build this chat application before I go

01:08:46,130 --> 01:08:50,230
on just to let you guys know that this

01:08:47,930 --> 01:08:52,670
is how we are breaking down the reaction

01:08:50,230 --> 01:08:54,910
so all the different colors actually the

01:08:52,670 --> 01:08:58,550
different components that works we have

01:08:54,910 --> 01:09:00,290
taken out as a component by itself so

01:08:58,550 --> 01:09:05,270
this is just a feature for you guys to

01:09:00,290 --> 01:09:06,290
see just in case if you need it so so

01:09:05,270 --> 01:09:08,030
what I'm going to do so we're going to

01:09:06,290 --> 01:09:11,030
work on the logic only today so we have

01:09:08,030 --> 01:09:14,120
the actions the mutaters the reducers

01:09:11,030 --> 01:09:16,880
and lastly the middleware so we're going

01:09:14,120 --> 01:09:20,620
to use the middleware to do this socket

01:09:16,880 --> 01:09:24,350
connection and the rest API call

01:09:20,620 --> 01:09:26,420
overhead anyone have those who have done

01:09:24,350 --> 01:09:29,000
yet redux anyone has brought your own

01:09:26,420 --> 01:09:30,890
middle west before anybody heard about

01:09:29,000 --> 01:09:34,370
Middle West anybody know what middleware

01:09:30,890 --> 01:09:38,260
is okay a few hands okay so the rest

01:09:34,370 --> 01:09:38,260
assume you don't wanna meter worry

01:09:39,070 --> 01:09:46,820
how about you how the middle words like

01:09:42,440 --> 01:09:49,030
but before that here are a few events

01:09:46,820 --> 01:09:51,350
that we're going to send so we have

01:09:49,030 --> 01:09:54,350
combination of socket and the rest right

01:09:51,350 --> 01:09:57,050
so for socket right we have this event

01:09:54,350 --> 01:09:59,780
at user and for the rest we have this

01:09:57,050 --> 01:10:01,610
API endpoint not to worry this arch in

01:09:59,780 --> 01:10:03,050
the code just giving you guys a visual

01:10:01,610 --> 01:10:03,870
and these are the socket event that

01:10:03,050 --> 01:10:07,320
we're going to listen

01:10:03,870 --> 01:10:12,390
to login success login fail so we are

01:10:07,320 --> 01:10:14,610
going to implement this this login part

01:10:12,390 --> 01:10:16,890
right so what we have to do is actually

01:10:14,610 --> 01:10:19,320
we need to kena username we sent to the

01:10:16,890 --> 01:10:22,710
server the server tell us if if

01:10:19,320 --> 01:10:25,200
userexists evidence it logins as test so

01:10:22,710 --> 01:10:27,750
you're giving a login success event if

01:10:25,200 --> 01:10:29,310
it fails there will be a login fail

01:10:27,750 --> 01:10:31,820
because a user have already existed

01:10:29,310 --> 01:10:36,990
right so these are what we're going to

01:10:31,820 --> 01:10:38,760
build so before we go on just talking

01:10:36,990 --> 01:10:40,860
about Midwest so this is a flow of

01:10:38,760 --> 01:10:43,890
application right normal yet we just

01:10:40,860 --> 01:10:46,800
application you have a store right

01:10:43,890 --> 01:10:49,620
normally yes the view will listen to the

01:10:46,800 --> 01:10:51,030
store you having action right normally

01:10:49,620 --> 01:10:53,010
the action go straight to the video sir

01:10:51,030 --> 01:10:55,470
right but in this case we have the

01:10:53,010 --> 01:10:59,250
middleware with your handle our socket

01:10:55,470 --> 01:11:00,540
or REST API okay reason being why we

01:10:59,250 --> 01:11:02,190
want you to be the middleware because

01:11:00,540 --> 01:11:05,490
like if we want to do anything that is

01:11:02,190 --> 01:11:06,750
related to in your normal we are and

01:11:05,490 --> 01:11:09,120
redux application normally we have

01:11:06,750 --> 01:11:10,170
actions to describe something that has

01:11:09,120 --> 01:11:11,730
happened right or something that you

01:11:10,170 --> 01:11:15,480
want to change so you want to maintain

01:11:11,730 --> 01:11:17,430
the same way where you want to execute

01:11:15,480 --> 01:11:20,220
your socket middleware and rest as well

01:11:17,430 --> 01:11:21,660
so we are test is why we are using a

01:11:20,220 --> 01:11:24,330
middleware because we want to use

01:11:21,660 --> 01:11:27,260
actions for adding any changes that we

01:11:24,330 --> 01:11:31,350
want to make to the application so

01:11:27,260 --> 01:11:32,700
middleware just think it of the actions

01:11:31,350 --> 01:11:35,190
we will just pass through middleware you

01:11:32,700 --> 01:11:37,230
can have a few Midwest so you go to a

01:11:35,190 --> 01:11:40,080
series or middle west actually if you

01:11:37,230 --> 01:11:42,030
have more than one min away will

01:11:40,080 --> 01:11:44,310
intercept your actions those action that

01:11:42,030 --> 01:11:47,310
they need to intercept and what what

01:11:44,310 --> 01:11:48,840
happen is it can do many things you can

01:11:47,310 --> 01:11:50,880
either stop the action from going to the

01:11:48,840 --> 01:11:52,830
reducer or you can even dispatch new

01:11:50,880 --> 01:11:54,000
action as well - which is why you can

01:11:52,830 --> 01:11:55,530
see some time in the way you can

01:11:54,000 --> 01:11:58,200
dispatch new action and you'll go to

01:11:55,530 --> 01:12:00,300
again so this is the concept of

01:11:58,200 --> 01:12:02,820
middleware and it is the core part that

01:12:00,300 --> 01:12:09,710
we're going to build today for little

01:12:02,820 --> 01:12:13,860
application right so without further ado

01:12:09,710 --> 01:12:16,640
let's go to the code and let's go to our

01:12:13,860 --> 01:12:16,640
actions right

01:12:18,420 --> 01:12:27,430
so the first thing to do that we know

01:12:20,920 --> 01:12:29,350
that we want to add a user right over

01:12:27,430 --> 01:12:31,510
here we need to add a user to the socket

01:12:29,350 --> 01:12:33,520
so we know that we need it like I said

01:12:31,510 --> 01:12:37,600
before we need the action so if you go

01:12:33,520 --> 01:12:39,340
to the action on line fine just

01:12:37,600 --> 01:12:43,060
uncomment line five the code right I

01:12:39,340 --> 01:12:45,280
happy and user to chat right and we are

01:12:43,060 --> 01:12:47,800
creating an action here and we know that

01:12:45,280 --> 01:12:52,030
these action need to be handed need to

01:12:47,800 --> 01:12:53,770
be intercepted by the middleware and we

01:12:52,030 --> 01:12:55,120
need a socket configuration as well

01:12:53,770 --> 01:12:56,710
right because you need to tell them cut

01:12:55,120 --> 01:13:03,700
these action what are the events I'm

01:12:56,710 --> 01:13:07,350
going to emit so here can we open the

01:13:03,700 --> 01:13:07,350
socket config dot yes

01:13:17,580 --> 01:13:24,040
okay so you can see that in this I have

01:13:21,520 --> 01:13:26,110
a function called socket set up socket

01:13:24,040 --> 01:13:27,969
right and instead of okay I have two

01:13:26,110 --> 01:13:30,940
other functions that is being returned

01:13:27,969 --> 01:13:33,520
by the setup socket function right we

01:13:30,940 --> 01:13:38,040
have a listener and emitter so if you

01:13:33,520 --> 01:13:38,040
are using a socket right you have a

01:13:38,969 --> 01:13:44,020
socket that actually watched on the

01:13:42,369 --> 01:13:46,300
event so in this case the first one can

01:13:44,020 --> 01:13:50,080
see we are actually what watching on

01:13:46,300 --> 01:13:52,600
this socket long gains access right so

01:13:50,080 --> 01:13:55,929
this is where in this function we are

01:13:52,600 --> 01:13:57,730
putting on our socket event that were

01:13:55,929 --> 01:14:00,369
listening to so that's why this in the

01:13:57,730 --> 01:14:05,230
function called listener and then we

01:14:00,369 --> 01:14:09,280
have another one right we should call

01:14:05,230 --> 01:14:13,840
the emitter this is where we have look

01:14:09,280 --> 01:14:16,090
at this is a very similar API in our

01:14:13,840 --> 01:14:18,040
reducer right because we're using the

01:14:16,090 --> 01:14:21,310
Redux act and we're looking on the

01:14:18,040 --> 01:14:24,070
action so this action right when he

01:14:21,310 --> 01:14:28,449
intercept this action I want to sock it

01:14:24,070 --> 01:14:31,000
to any user event and then the payload

01:14:28,449 --> 01:14:33,070
user name so your action will actually

01:14:31,000 --> 01:14:34,480
pass our user name right so our action

01:14:33,070 --> 01:14:38,550
achieve a positive user name and then

01:14:34,480 --> 01:14:41,710
this will pass to the socket back-end so

01:14:38,550 --> 01:14:45,670
the thing is in order for this to happen

01:14:41,710 --> 01:14:49,420
you need new socket object which will be

01:14:45,670 --> 01:14:55,210
passing from this set up socket right so

01:14:49,420 --> 01:14:57,250
now let's go try we have two two event

01:14:55,210 --> 01:14:59,380
here one day will emitting at user and

01:14:57,250 --> 01:15:04,090
if it's successful you should receive

01:14:59,380 --> 01:15:08,080
login success okay and let's just also

01:15:04,090 --> 01:15:11,290
uncomment this on line seven right this

01:15:08,080 --> 01:15:13,570
is login field so if you login fail to

01:15:11,290 --> 01:15:18,100
see you can see that here we are

01:15:13,570 --> 01:15:22,659
dispatching another action right so if

01:15:18,100 --> 01:15:25,210
you look over here when we have the

01:15:22,659 --> 01:15:28,130
actions right we come to the middleware

01:15:25,210 --> 01:15:30,920
what happen is if we in it

01:15:28,130 --> 01:15:32,750
adduser you go to the stockade logins

01:15:30,920 --> 01:15:34,400
fail success it will come back to the

01:15:32,750 --> 01:15:37,699
middleware and your dispatch and other

01:15:34,400 --> 01:15:40,090
actions back right because here we are

01:15:37,699 --> 01:15:45,650
dispatching action to change our state

01:15:40,090 --> 01:15:49,280
okay so when okay so if once we have

01:15:45,650 --> 01:15:52,690
uncommented that we have the

01:15:49,280 --> 01:15:55,190
configuration for this to event to event

01:15:52,690 --> 01:15:58,300
so now the thing is we need to pass in

01:15:55,190 --> 01:16:00,889
this socket events right so where we are

01:15:58,300 --> 01:16:06,550
initializing the socket is in store

01:16:00,889 --> 01:16:06,550
touch yes so if you can go to store yes

01:16:11,920 --> 01:16:23,540
you see we can from line 9 or 13 sorry

01:16:20,630 --> 01:16:28,730
line 13 all the way down we can

01:16:23,540 --> 01:16:35,320
uncomment and we can remove like no

01:16:28,730 --> 01:16:35,320
sorry yeah this like this so we move

01:16:49,800 --> 01:16:52,939
[Music]

01:17:07,340 --> 01:17:17,519
okay nevermind okay so you can see what

01:17:14,189 --> 01:17:23,099
I'm trying to show you here is we have

01:17:17,519 --> 01:17:26,550
this setup socket right we are importing

01:17:23,099 --> 01:17:31,260
it here Tara talking and here is where

01:17:26,550 --> 01:17:36,019
we implement our socket connections so

01:17:31,260 --> 01:17:36,019
we have a socket object and when we call

01:17:37,669 --> 01:17:44,070
right this is okay the socket object it

01:17:41,459 --> 01:17:47,129
been being passed to this function here

01:17:44,070 --> 01:17:49,860
so this function which is the same

01:17:47,129 --> 01:17:53,760
function as this is having access to

01:17:49,860 --> 01:17:56,909
this socket connection okay so this is

01:17:53,760 --> 01:17:58,889
how you pass your socket object into

01:17:56,909 --> 01:18:02,820
these functions so that they have access

01:17:58,889 --> 01:18:03,329
to the or have the scope to this socket

01:18:02,820 --> 01:18:06,149
object

01:18:03,329 --> 01:18:08,070
so these how we can pass it in and then

01:18:06,149 --> 01:18:10,229
you notice that this socket middleware

01:18:08,070 --> 01:18:12,360
here so what is this this is where we

01:18:10,229 --> 01:18:16,280
have the middleware which is part of

01:18:12,360 --> 01:18:19,800
redux right that will handle all this

01:18:16,280 --> 01:18:21,090
they were passing things that you need

01:18:19,800 --> 01:18:28,229
like for a number you see you have Jax

01:18:21,090 --> 01:18:29,459
get state test age and dispatch right so

01:18:28,229 --> 01:18:31,349
whether these come from this actually

01:18:29,459 --> 01:18:33,570
come from the middle way stuff so when

01:18:31,349 --> 01:18:36,030
you use the middleware Envy ducts they

01:18:33,570 --> 01:18:39,899
are actually passing you a few other

01:18:36,030 --> 01:18:42,449
items you can stay dispatch and

01:18:39,899 --> 01:18:45,209
reactionary actually right so if you can

01:18:42,449 --> 01:18:50,449
see here actually like that if let's

01:18:45,209 --> 01:18:50,449
look at the socket middleware right so

01:18:51,809 --> 01:18:59,920
right is in this if in the middle way

01:18:55,570 --> 01:19:06,249
folder and that's a there's fall cost

01:18:59,920 --> 01:19:08,679
okay yes so if you look at this example

01:19:06,249 --> 01:19:10,150
me the way right this is a signature of

01:19:08,679 --> 01:19:12,130
a middle way so if you want to create a

01:19:10,150 --> 01:19:15,010
middle where this is the signature you

01:19:12,130 --> 01:19:17,920
have to follow so it's actually a

01:19:15,010 --> 01:19:20,409
carrying of three functions right you

01:19:17,920 --> 01:19:26,650
see that that's a store that's an X and

01:19:20,409 --> 01:19:29,980
that's action right in next is actually

01:19:26,650 --> 01:19:31,929
calling your next meter way so if you

01:19:29,980 --> 01:19:33,550
have a media went from example either

01:19:31,929 --> 01:19:36,130
way like neither wave I mean aware to

01:19:33,550 --> 01:19:39,070
amedeo when one makes will be calling

01:19:36,130 --> 01:19:41,110
middleware to write and it means the way

01:19:39,070 --> 01:19:42,849
to your next actually calling the

01:19:41,110 --> 01:19:45,489
dispatch function right so your last

01:19:42,849 --> 01:19:48,969
middleware next will be the dispatch

01:19:45,489 --> 01:19:50,860
function else the first few we know will

01:19:48,969 --> 01:19:55,059
always be calling thank you always be

01:19:50,860 --> 01:19:57,849
calling the next meter way right so this

01:19:55,059 --> 01:20:00,190
is the signature of a middleware so if

01:19:57,849 --> 01:20:02,530
you want to Bill me the way just take

01:20:00,190 --> 01:20:04,059
note of the signature like this so you

01:20:02,530 --> 01:20:06,130
see here when if I call next and I

01:20:04,059 --> 01:20:07,960
passing the action so when it connects

01:20:06,130 --> 01:20:09,340
you have the path in the action because

01:20:07,960 --> 01:20:12,849
you are saying that okay I want this

01:20:09,340 --> 01:20:16,269
action right from here to go to the

01:20:12,849 --> 01:20:18,070
middleware to the next one right so if

01:20:16,269 --> 01:20:19,719
you don't want the action to go true

01:20:18,070 --> 01:20:21,880
means you want to intercept the action I

01:20:19,719 --> 01:20:23,829
say maybe I don't do anything you don't

01:20:21,880 --> 01:20:25,659
pass you don't you don't connect and

01:20:23,829 --> 01:20:28,300
that's how you can in a sense silence

01:20:25,659 --> 01:20:29,440
some actions but that might not be

01:20:28,300 --> 01:20:31,269
always the case that you want so just

01:20:29,440 --> 01:20:35,820
depend on what other use are your use

01:20:31,269 --> 01:20:39,960
case and you just do it like this so

01:20:35,820 --> 01:20:39,960
let's look over so kami the way

01:21:04,200 --> 01:21:12,810
okay it might be a bit hard to see but

01:21:08,440 --> 01:21:12,810
what I'm trying to show you is that

01:21:12,870 --> 01:21:21,070
remember we pass in our socket object

01:21:15,940 --> 01:21:26,280
right okay this it's a sock at me the

01:21:21,070 --> 01:21:26,280
way ding

01:21:43,480 --> 01:21:50,950
all right so here on the right side you

01:21:48,670 --> 01:21:53,230
can see that at the end I'm returning

01:21:50,950 --> 01:21:55,540
the listener and emitter these two

01:21:53,230 --> 01:22:00,610
functions right and if you look over

01:21:55,540 --> 01:22:03,370
here and the sock at me the way you can

01:22:00,610 --> 01:22:06,910
see that it actually comes to here the

01:22:03,370 --> 01:22:09,070
listener and the emitter so this is how

01:22:06,910 --> 01:22:11,380
your socket middleware get access to

01:22:09,070 --> 01:22:16,450
these two function which you have just

01:22:11,380 --> 01:22:19,690
created right and you can see the

01:22:16,450 --> 01:22:21,640
listener so it's actually so the meter

01:22:19,690 --> 01:22:25,240
wave actually tree function call right

01:22:21,640 --> 01:22:27,490
tree is carrying of tree functions when

01:22:25,240 --> 01:22:33,210
you apply the meter where you actually

01:22:27,490 --> 01:22:33,210
activate the first function which is

01:22:33,780 --> 01:22:38,770
calling this part so they were actually

01:22:35,980 --> 01:22:42,370
past redux where actually passed the

01:22:38,770 --> 01:22:44,800
store and called it and that's why I

01:22:42,370 --> 01:22:46,420
have the liver so they meet a point

01:22:44,800 --> 01:22:48,730
applying the middleware I'm already

01:22:46,420 --> 01:22:51,280
listening to the events from the socket

01:22:48,730 --> 01:22:52,990
right but it's a bit different for the

01:22:51,280 --> 01:22:56,560
emitter so you can see the emitters here

01:22:52,990 --> 01:22:58,210
because emitter is waiting for an action

01:22:56,560 --> 01:22:59,740
right is it I want to eat meat something

01:22:58,210 --> 01:23:02,340
I want to mean something to the pocket

01:22:59,740 --> 01:23:05,650
you use the action to describe that

01:23:02,340 --> 01:23:08,470
change so which is why it's over here

01:23:05,650 --> 01:23:11,920
and we think for the actions to be

01:23:08,470 --> 01:23:14,680
passive so when you dispatch an action

01:23:11,920 --> 01:23:17,710
over here you go to the middleware and

01:23:14,680 --> 01:23:20,890
this is where we interests a bit and

01:23:17,710 --> 01:23:24,240
have a party interaction right so if you

01:23:20,890 --> 01:23:24,240
look back again

01:23:25,740 --> 01:23:32,980
in the socket configuration right you

01:23:30,700 --> 01:23:35,290
can see that here we are actually

01:23:32,980 --> 01:23:37,450
looking to a user to chat right so if

01:23:35,290 --> 01:23:43,300
the actions come here you go this and

01:23:37,450 --> 01:23:48,670
then you'll Amin right everybody's

01:23:43,300 --> 01:23:50,620
following so far right so if you have

01:23:48,670 --> 01:23:55,200
uncommented all these and you should

01:23:50,620 --> 01:23:58,690
have the socket uncommented as well

01:23:55,200 --> 01:24:02,070
let's just see this should work if we go

01:23:58,690 --> 01:24:02,070
to the application Oh

01:24:23,790 --> 01:24:30,880
sorry guys uh we don't have the rest

01:24:26,770 --> 01:24:35,470
meter way yet so can you just remove it

01:24:30,880 --> 01:24:40,230
from the middle way so just have only

01:24:35,470 --> 01:24:40,230
this time setup socket and yeah

01:24:49,630 --> 01:24:54,430
so if we were to try

01:25:09,270 --> 01:25:12,620
let me just see

01:25:24,350 --> 01:25:38,630
oh we need to go to the component the

01:25:34,000 --> 01:25:40,390
login component there's this code the

01:25:38,630 --> 01:25:43,760
forms I mean you need to switch it

01:25:40,390 --> 01:25:45,770
because previously it was just we are

01:25:43,760 --> 01:25:48,890
just doing a history push so we're just

01:25:45,770 --> 01:25:51,830
only changing the route but you can see

01:25:48,890 --> 01:25:58,030
here uncomment this off we move the top

01:25:51,830 --> 01:26:00,620
one so now this is actually dispatching

01:25:58,030 --> 01:26:03,230
the user to chat so we actually

01:26:00,620 --> 01:26:05,480
dispatching the username over here which

01:26:03,230 --> 01:26:08,180
we actually store in a state when they

01:26:05,480 --> 01:26:10,910
type right so on every input we are

01:26:08,180 --> 01:26:14,230
actually storing every single input in

01:26:10,910 --> 01:26:14,230
the reader store

01:26:19,380 --> 01:26:30,230
yeah so just remove it and we should be

01:26:24,570 --> 01:26:30,230
good to go we go to the chat application

01:27:15,300 --> 01:27:19,070
the function

01:28:11,060 --> 01:28:13,060
Oh

01:29:33,300 --> 01:29:38,260
is anybody able to log log in no right

01:29:37,450 --> 01:29:40,890
okay

01:29:38,260 --> 01:29:40,890
give me a moment

01:30:25,070 --> 01:30:33,560
but you can take weird

01:31:07,199 --> 01:31:09,230
Oh

01:31:12,690 --> 01:31:15,690
okay

01:31:20,610 --> 01:31:28,410
okay

01:31:22,050 --> 01:31:32,230
silly mistake this action if you have an

01:31:28,410 --> 01:31:41,620
uncommon please uncomment it like save

01:31:32,230 --> 01:31:46,270
username so you can see that uh over

01:31:41,620 --> 01:31:48,630
here right we have add the user and same

01:31:46,270 --> 01:31:53,650
username is actually dispatched by my

01:31:48,630 --> 01:31:57,970
middleware right in the socket

01:31:53,650 --> 01:32:01,300
configuration right see here we are

01:31:57,970 --> 01:32:06,180
dispatching tape username so this is how

01:32:01,300 --> 01:32:12,210
you can implement the socket into this

01:32:06,180 --> 01:32:16,950
middle way so everybody you can see the

01:32:12,210 --> 01:32:16,950
can everybody log in anybody can log in

01:32:30,400 --> 01:32:39,679
so if you can log in the rest is pretty

01:32:34,550 --> 01:32:46,179
much the same right because the rest of

01:32:39,679 --> 01:32:48,800
our action over here right these are all

01:32:46,179 --> 01:32:52,309
pointing to all our socket actions

01:32:48,800 --> 01:32:56,329
so just uncomment all these right and we

01:32:52,309 --> 01:33:01,059
can go to the action the the socket

01:32:56,329 --> 01:33:01,059
configuration as well uncomment all this

01:33:01,300 --> 01:33:10,520
right so two places and comment the

01:33:08,329 --> 01:33:16,909
coding autocoding socket don't compete

01:33:10,520 --> 01:33:19,280
and your actions touch it so you can see

01:33:16,909 --> 01:33:21,380
that all this year are listening to the

01:33:19,280 --> 01:33:23,599
different event and then dispatching the

01:33:21,380 --> 01:33:26,750
respective actions to your store and

01:33:23,599 --> 01:33:28,610
then they will update the Redux store

01:33:26,750 --> 01:33:30,469
and your application will be vendor then

01:33:28,610 --> 01:33:39,920
later we can see how we can have the

01:33:30,469 --> 01:33:42,020
whole chatter position one more thing we

01:33:39,920 --> 01:33:44,480
did is for the socket events we haven't

01:33:42,020 --> 01:33:46,099
done it for the REST API right so

01:33:44,480 --> 01:33:48,920
because the way we send our message

01:33:46,099 --> 01:33:50,809
we're sending to rest while the rest of

01:33:48,920 --> 01:33:55,480
the events we are listening to the

01:33:50,809 --> 01:33:58,719
socket events so if you have done this

01:33:55,480 --> 01:33:58,719
we have

01:34:01,920 --> 01:34:11,320
in either where folder there's none of

01:34:07,890 --> 01:34:20,040
Falkor rest is just uncomment the code

01:34:11,320 --> 01:34:23,620
in there so this is a very simple

01:34:20,040 --> 01:34:27,699
fashion right we're just doing a pause

01:34:23,620 --> 01:34:29,440
on this URL where we post the message

01:34:27,699 --> 01:34:32,080
that we're going to stand later in a

01:34:29,440 --> 01:34:34,989
child right so this is also meter where

01:34:32,080 --> 01:34:37,930
if you take a look at it right we have

01:34:34,989 --> 01:34:41,080
the same signature the dispatch right

01:34:37,930 --> 01:34:42,880
the next and the action so you can see

01:34:41,080 --> 01:34:44,650
that the only difference is that I put

01:34:42,880 --> 01:34:47,440
I'm putting the configuration in this

01:34:44,650 --> 01:34:49,750
bit away but normally you're shifting

01:34:47,440 --> 01:34:53,050
out to somewhere if you have a series of

01:34:49,750 --> 01:35:01,270
API calls to make but for simplicity I'm

01:34:53,050 --> 01:35:03,850
just going to put it here okay so once

01:35:01,270 --> 01:35:05,980
you have uncommented this code in

01:35:03,850 --> 01:35:07,800
restaurant yes the next thing you need

01:35:05,980 --> 01:35:09,969
to do is to you need to include it in

01:35:07,800 --> 01:35:12,520
the list of middleware that you have

01:35:09,969 --> 01:35:16,390
right installed yes so if you go to

01:35:12,520 --> 01:35:19,180
stores yes remember the one that we

01:35:16,390 --> 01:35:21,250
remove this now right there's a second

01:35:19,180 --> 01:35:27,340
turn up socket and then that's a red

01:35:21,250 --> 01:35:31,410
middleware so just uncommon at the read

01:35:27,340 --> 01:35:31,410
middleware yeah

01:35:54,260 --> 01:35:57,260
right

01:36:11,560 --> 01:36:20,750
so if steal is done if you try to log

01:36:16,010 --> 01:36:23,120
into the chatroom right and you type

01:36:20,750 --> 01:36:24,410
something or someone type something we

01:36:23,120 --> 01:36:25,969
should all be able to see it because

01:36:24,410 --> 01:36:31,100
these are connected to our socket

01:36:25,969 --> 01:36:33,610
back-end server so those who managed to

01:36:31,100 --> 01:36:33,610
finish it

01:39:47,389 --> 01:39:57,650
oh yeah you need to uncomment a cone in

01:39:53,179 --> 01:40:02,000
your video sir as well because the

01:39:57,650 --> 01:40:05,420
reducer have to change watch the action

01:40:02,000 --> 01:40:08,630
and change the state right so need to

01:40:05,420 --> 01:40:11,770
ankle many of it uses the the Ori

01:40:08,630 --> 01:40:11,770
actions in a video sir

01:41:10,110 --> 01:41:20,140
dito what you should go to potato oh

01:41:14,070 --> 01:41:22,120
yeah someone else with the same and the

01:41:20,140 --> 01:41:24,820
username as a book so we need to add

01:41:22,120 --> 01:41:40,840
something value value don't usually but

01:41:24,820 --> 01:41:43,080
sometimes oh ok ok ok can anybody say oh

01:41:40,840 --> 01:41:43,080
yeah

01:41:46,780 --> 01:41:52,000
yep so you should be able to see

01:41:49,490 --> 01:41:54,260
something like this where you can see

01:41:52,000 --> 01:41:58,180
range of people joining the chat and

01:41:54,260 --> 01:42:14,810
leaving the chat where were types well

01:41:58,180 --> 01:42:27,410
right before Easter okay

01:42:14,810 --> 01:42:29,720
yeah if you know I may be here hey guys

01:42:27,410 --> 01:42:32,360
don't type in empty user name okay the

01:42:29,720 --> 01:42:33,830
type mean uh if you have ready time when

01:42:32,360 --> 01:42:36,950
you enter you the name you can leave the

01:42:33,830 --> 01:42:38,150
chat come in go back right then you tell

01:42:36,950 --> 01:42:42,310
me something right because we didn't

01:42:38,150 --> 01:42:42,310
check for empty strings in this case

01:42:58,570 --> 01:43:06,290
okay so this is a chat app there are we

01:43:03,440 --> 01:43:11,690
have just few but how does it link to

01:43:06,290 --> 01:43:13,640
optimistic UI right so if you can see if

01:43:11,690 --> 01:43:16,070
I have an error message right I that

01:43:13,640 --> 01:43:21,940
this is an error right so we look up for

01:43:16,070 --> 01:43:21,940
the error name in the server so

01:43:26,760 --> 01:43:31,640
okay this way let me just check for

01:44:26,760 --> 01:44:57,660
oh yeah to lowercase yeah yeah away told

01:44:53,940 --> 01:45:00,300
em to put empty empty using yeah they

01:44:57,660 --> 01:45:03,440
can live in join again yeah believe that

01:45:00,300 --> 01:45:03,440
because right

01:45:27,250 --> 01:45:29,850
yeah

01:45:53,070 --> 01:45:56,880
what oh do you have ever

01:46:12,420 --> 01:46:22,469
okay for those of you have used the

01:46:15,579 --> 01:46:26,590
mirror I just add this in your mutaters

01:46:22,469 --> 01:46:32,170
the pen order message write yourself

01:46:26,590 --> 01:46:35,559
check if username is coming right if

01:46:32,170 --> 01:46:38,400
it's not coming then it's not we will

01:46:35,559 --> 01:46:38,400
not run if condition

01:47:00,020 --> 01:47:08,410
you can ask a parlor suite sure to find

01:47:02,180 --> 01:47:08,410
my branch yeah okay

01:47:30,719 --> 01:47:39,729
because there is no working I don't know

01:47:33,639 --> 01:47:41,409
why okay so we have those who are not

01:47:39,729 --> 01:47:46,229
able to compete all don't worry we have

01:47:41,409 --> 01:47:50,889
a dis branch no

01:47:46,229 --> 01:47:55,269
so stop get can you just check out to

01:47:50,889 --> 01:47:58,389
this ok client done rights okay - client

01:47:55,269 --> 01:48:01,539
done right you have the full working

01:47:58,389 --> 01:48:03,219
application so just like I'll do that

01:48:01,539 --> 01:48:06,599
Danna we've talked a bit on the

01:48:03,219 --> 01:48:06,599
optimistic UI before we add

01:48:23,780 --> 01:48:30,180
please do a good stash and then you can

01:48:26,400 --> 01:48:33,890
check out socket climb done each check

01:48:30,180 --> 01:48:33,890
also get client oh yeah a lot

01:48:54,580 --> 01:49:04,420
right yes good so once you have checked

01:49:01,400 --> 01:49:08,180
out you should have something similar

01:49:04,420 --> 01:49:15,140
like and I was saying that right if

01:49:08,180 --> 01:49:17,450
there's an error message I can see that

01:49:15,140 --> 01:49:21,530
it this this one rate right it was green

01:49:17,450 --> 01:49:24,170
before and now it turned red so this is

01:49:21,530 --> 01:49:27,410
actually a simulation of in any case if

01:49:24,170 --> 01:49:29,540
the Machine get true right the server

01:49:27,410 --> 01:49:32,300
will tell our application that didn't

01:49:29,540 --> 01:49:34,250
get true and what we have to do if we

01:49:32,300 --> 01:49:37,550
just need to take different actions

01:49:34,250 --> 01:49:41,600
because in your different application

01:49:37,550 --> 01:49:43,700
you have different way of handling error

01:49:41,600 --> 01:49:45,080
messages that if he doesn't go true

01:49:43,700 --> 01:49:48,260
let's say in this case the change

01:49:45,080 --> 01:49:51,500
message right sometimes you can add them

01:49:48,260 --> 01:49:53,330
to from them to resend or you could have

01:49:51,500 --> 01:49:56,060
a logic to say okay if this fails I will

01:49:53,330 --> 01:49:59,570
try to send it again right and maybe for

01:49:56,060 --> 01:50:02,240
three times before it really timeout and

01:49:59,570 --> 01:50:05,120
then I will show the error message to

01:50:02,240 --> 01:50:09,080
the user so where are we implementing

01:50:05,120 --> 01:50:14,150
this if you look in our rest client

01:50:09,080 --> 01:50:16,070
right you can see on this line right if

01:50:14,150 --> 01:50:17,360
that changes very simple right

01:50:16,070 --> 01:50:19,820
we're just looking for some error

01:50:17,360 --> 01:50:23,800
message if there's an error message with

01:50:19,820 --> 01:50:28,280
the special action right that describe

01:50:23,800 --> 01:50:30,680
that change the state on to to to show

01:50:28,280 --> 01:50:35,420
the error message right so it's just a

01:50:30,680 --> 01:50:39,290
very simple idea right don't need to

01:50:35,420 --> 01:50:40,810
have any complex framework or what to

01:50:39,290 --> 01:50:44,060
help you hand I know there are some that

01:50:40,810 --> 01:50:46,640
there are some optimistic UI framework

01:50:44,060 --> 01:50:49,550
or middleware as well to help you had

01:50:46,640 --> 01:50:51,890
noticed but it can just be as simple as

01:50:49,550 --> 01:50:56,090
dispatching an action to correct certain

01:50:51,890 --> 01:50:58,370
things so in this case where we have we

01:50:56,090 --> 01:51:00,860
are just correcting changing it to red

01:50:58,370 --> 01:51:02,780
and then sending the recent button so if

01:51:00,860 --> 01:51:07,340
the user have to they can click the

01:51:02,780 --> 01:51:09,020
reason and we send the message again

01:51:07,340 --> 01:51:14,679
so that many different ways you can use

01:51:09,020 --> 01:51:19,159
to handle your optimistic UI right so

01:51:14,679 --> 01:51:20,860
thing so just to close in summary like

01:51:19,159 --> 01:51:26,239
one of the things that we have went to

01:51:20,860 --> 01:51:28,369
in this thing is that we use the API as

01:51:26,239 --> 01:51:30,770
close as possible to data standard so

01:51:28,369 --> 01:51:35,239
like the HTML CSS which I mentioned in

01:51:30,770 --> 01:51:37,639
the components that you have right for

01:51:35,239 --> 01:51:40,550
any changes you need in the application

01:51:37,639 --> 01:51:42,080
always use redirection so for anything

01:51:40,550 --> 01:51:43,520
that you have it always standard

01:51:42,080 --> 01:51:44,869
especially after two it's very easy

01:51:43,520 --> 01:51:46,639
change something

01:51:44,869 --> 01:51:49,250
dispatch action change that dispatch

01:51:46,639 --> 01:51:52,610
session right and of course if you need

01:51:49,250 --> 01:51:56,630
to have any asynchronous or start

01:51:52,610 --> 01:52:03,489
effects you will user we you use the

01:51:56,630 --> 01:52:03,489
middle way so that is all thank

01:52:34,069 --> 01:52:44,629
this time the only questions you will be

01:52:37,609 --> 01:52:46,689
having placed the code okay so all that

01:52:44,629 --> 01:52:49,669
you need to do is please check out

01:52:46,689 --> 01:52:52,039
stockist over first first of all because

01:52:49,669 --> 01:52:54,109
you need you to npm install and then you

01:52:52,039 --> 01:52:59,109
NPM stock so stock yourself

01:52:54,109 --> 01:52:59,109
it's - okay so uh do a git checkout quiz

01:52:59,499 --> 01:53:14,619
please don't log in once git checkout

01:53:09,289 --> 01:53:14,619
quiz is done please do our npm install

01:53:24,790 --> 01:53:31,120
once you run npm install you can start

01:53:28,510 --> 01:53:34,630
please don't login into your chat app

01:53:31,120 --> 01:53:37,530
yet because we get to know when you join

01:53:34,630 --> 01:53:37,530
in when you leave so

01:53:54,520 --> 01:54:00,310
you designed it up using an adopted is

01:53:57,920 --> 01:54:00,310
never wrong

01:54:02,480 --> 01:54:07,220
are you done everyone

01:54:47,370 --> 01:54:51,220
okay now you can log-in with your name

01:54:50,260 --> 01:54:53,830
your first name

01:54:51,220 --> 01:54:56,200
please give your first name - because we

01:54:53,830 --> 01:54:59,430
need to get to know who was loved in so

01:54:56,200 --> 01:54:59,430
login with your first name

01:55:01,950 --> 01:55:09,900
now you can there's a quiz button there

01:55:05,680 --> 01:55:12,280
please click on that quiz button and

01:55:09,900 --> 01:55:17,260
please take this quiz as soon as

01:55:12,280 --> 01:55:20,140
possible and who gets all the

01:55:17,260 --> 01:55:26,610
answers right and it's also based on

01:55:20,140 --> 01:55:26,610
time will get will be the winner yep

01:56:00,960 --> 01:56:12,390
it was interesting to explain the

01:56:03,550 --> 01:56:19,120
concept we're just in the experimental

01:56:12,390 --> 01:56:20,980
data and who explained nineteen people

01:56:19,120 --> 01:56:23,820
are still trying to make it work so you

01:56:20,980 --> 01:56:23,820
need always to her

01:56:28,480 --> 01:56:38,630
Sylvain has like score of 5 so it's not

01:56:37,219 --> 01:56:46,010
the first one cell is the first one so

01:56:38,630 --> 01:56:49,480
everything looked right right makes it 7

01:56:46,010 --> 01:56:49,480
hmm that's really cool

01:56:49,780 --> 01:56:59,630
right when I took the test I thought

01:56:54,679 --> 01:57:04,040
poor Putin like summons was wins so I

01:56:59,630 --> 01:57:07,900
just got three that's that's good so

01:57:04,040 --> 01:57:07,900
your scores are way better

01:57:16,780 --> 01:57:20,610
you have three three more minutes

01:57:46,030 --> 01:57:58,370
so Rama's go seven Alexis five and then

01:57:50,660 --> 01:58:00,580
six Ricardo seven again oh love who is

01:57:58,370 --> 01:58:00,580
love

01:58:08,740 --> 01:58:25,640
come on anyone I was having and it's ah

01:58:15,460 --> 01:58:30,470
that's good okay if you are done

01:58:25,640 --> 01:58:40,330
how many just a taking the quiz okay

01:58:30,470 --> 01:58:40,330
okay Oh another eight there

01:58:45,840 --> 01:58:55,239
last chance last chance yeah 30 seconds

01:58:49,869 --> 01:59:24,280
more because yes please check nobody's

01:58:55,239 --> 01:59:26,949
going up so everyone is done right okay

01:59:24,280 --> 01:59:29,590
so let's see who is the winner so it's

01:59:26,949 --> 01:59:56,369
gonna be eight yeah

01:59:29,590 --> 01:59:59,889
who is the first date joy joy next next

01:59:56,369 --> 02:00:02,679
my legs are taking the Panda and he will

01:59:59,889 --> 02:00:16,020
thank you with the next workshop it

02:00:02,679 --> 02:00:16,020
would be a nice setup okay

02:00:16,619 --> 02:00:24,070
it's going it's going okay

02:00:21,690 --> 02:00:27,400
okay everyone so this is the last

02:00:24,070 --> 02:00:30,190
session I think we are a little short on

02:00:27,400 --> 02:00:32,050
time so I will try to go a little faster

02:00:30,190 --> 02:00:33,969
okay but don't worry here the purpose of

02:00:32,050 --> 02:00:37,059
this workshop exercising is good but

02:00:33,969 --> 02:00:39,610
what we want to show you is some tooling

02:00:37,059 --> 02:00:41,440
that will help you to do some

02:00:39,610 --> 02:00:43,329
performance checkup and also some

02:00:41,440 --> 02:00:45,340
libraries that can be helpful if you

02:00:43,329 --> 02:00:49,289
want to optimize the way you code for

02:00:45,340 --> 02:00:52,239
taking conservation performance okay

02:00:49,289 --> 02:00:54,789
okay it's coming cool thanks so who has

02:00:52,239 --> 02:00:56,679
been working Oh has already tried to

02:00:54,789 --> 02:01:01,150
improve the performance of your

02:00:56,679 --> 02:01:02,920
application is there anyone no okay so

02:01:01,150 --> 02:01:05,500
then maybe this one will be interesting

02:01:02,920 --> 02:01:06,849
so during this session though as I told

02:01:05,500 --> 02:01:08,710
you the purpose is to show you some

02:01:06,849 --> 02:01:10,269
tools to show you some libraries and

02:01:08,710 --> 02:01:12,219
also to try for you to understand what's

02:01:10,269 --> 02:01:14,530
behind how does the react component walk

02:01:12,219 --> 02:01:18,190
hold up who day they are under to know

02:01:14,530 --> 02:01:20,500
how to optimize it okay so first you can

02:01:18,190 --> 02:01:23,460
commit and stash your previous walk and

02:01:20,500 --> 02:01:26,920
check out the react performance workshop

02:01:23,460 --> 02:01:28,300
branch there's two branch react

02:01:26,920 --> 02:01:30,190
performance workshop and react

02:01:28,300 --> 02:01:31,599
performance solution okay so if you want

02:01:30,190 --> 02:01:33,969
to go directly to resolution that's fine

02:01:31,599 --> 02:01:37,719
also if you want to try to do it you can

02:01:33,969 --> 02:01:39,489
also but I will go a little faster then

02:01:37,719 --> 02:01:41,730
not forget when p.m. install an NPM

02:01:39,489 --> 02:01:41,730
start

02:02:07,360 --> 02:02:11,720
okay if you enter them start you will

02:02:09,980 --> 02:02:13,070
see you again to chat please enter our

02:02:11,720 --> 02:02:14,690
name okay so that we don't have the same

02:02:13,070 --> 02:02:27,440
bug as previously don't forget to enter

02:02:14,690 --> 02:02:30,050
name before entering your chat also if

02:02:27,440 --> 02:02:32,480
you can if you already unique chrome and

02:02:30,050 --> 02:02:34,490
for those who didn't have can you try to

02:02:32,480 --> 02:02:41,050
install the react developer tools so you

02:02:34,490 --> 02:02:45,980
can search on google react developer

02:02:41,050 --> 02:02:47,720
tools so this one so previously john

02:02:45,980 --> 02:02:49,340
asked you to install the reduced tools

02:02:47,720 --> 02:02:52,690
now we need I don't want the react

02:02:49,340 --> 02:02:52,690
developer tools okay

02:03:08,200 --> 02:03:16,240
okay everyone is set is there somebody

02:03:11,510 --> 02:03:19,280
not set yet okay so then let's start it

02:03:16,240 --> 02:03:23,030
so once you're on once you connect to

02:03:19,280 --> 02:03:23,600
the application so you can just connect

02:03:23,030 --> 02:03:26,600
to the chatroom

02:03:23,600 --> 02:03:28,850
you will see in this chatroom what I did

02:03:26,600 --> 02:03:30,950
is that initially a lot of messages or a

02:03:28,850 --> 02:03:33,560
repetitive message just for the purpose

02:03:30,950 --> 02:03:35,150
of this offer this demonstration also I

02:03:33,560 --> 02:03:37,310
added here another component which is a

02:03:35,150 --> 02:03:38,630
mention it count how many time people

02:03:37,310 --> 02:03:40,310
had in writing

02:03:38,630 --> 02:03:44,240
jion's conf or poly whitey in their

02:03:40,310 --> 02:03:47,450
message right if I add value YT and GS

02:03:44,240 --> 02:03:49,580
conf again the mention is increasing

02:03:47,450 --> 02:03:53,200
okay so nothing a nothing exceptional

02:03:49,580 --> 02:03:53,200
here it seems to be working fine right

02:03:54,520 --> 02:03:59,510
before starting the looking at the tools

02:03:57,950 --> 02:04:01,280
there just one thing I will go very fast

02:03:59,510 --> 02:04:02,900
for those who are using a rack already

02:04:01,280 --> 02:04:04,430
know for those who are learning it you

02:04:02,900 --> 02:04:05,960
just know about this that there's two

02:04:04,430 --> 02:04:07,610
way off for building your app one is a

02:04:05,960 --> 02:04:09,500
development project development build

02:04:07,610 --> 02:04:11,210
and one is a prediction build right the

02:04:09,500 --> 02:04:12,800
difference is that when you do

02:04:11,210 --> 02:04:14,210
prediction build he will remove a lot of

02:04:12,800 --> 02:04:16,220
warning that you can see in the console

02:04:14,210 --> 02:04:19,280
log so it will make you up a much more

02:04:16,220 --> 02:04:21,140
small small okay so don't forget to do

02:04:19,280 --> 02:04:25,520
that what you need is to add a not off

02:04:21,140 --> 02:04:27,740
in in the in your application when you

02:04:25,520 --> 02:04:29,210
when you build it so an example for web

02:04:27,740 --> 02:04:33,230
pack if you're using webpack as we did

02:04:29,210 --> 02:04:35,480
you can see in our web pack that we have

02:04:33,230 --> 02:04:38,630
in the web app - web pack five one for

02:04:35,480 --> 02:04:42,260
development and one for production if I

02:04:38,630 --> 02:04:44,870
make a search on the development I will

02:04:42,260 --> 02:04:49,420
not find production if I make the search

02:04:44,870 --> 02:04:49,420
on production oops sorry

02:04:52,920 --> 02:04:57,370
then you can see here we are setting up

02:04:55,180 --> 02:04:59,050
the non off to production okay

02:04:57,370 --> 02:05:00,670
the other thing for optimization that is

02:04:59,050 --> 02:05:02,500
recommend is don't forget to amplify or

02:05:00,670 --> 02:05:06,070
minify for the production record I look

02:05:02,500 --> 02:05:08,890
so the same on my production here on my

02:05:06,070 --> 02:05:11,680
production webpack there is a plug in

02:05:08,890 --> 02:05:12,910
for Allah fiying that we set it here on

02:05:11,680 --> 02:05:14,560
development we don't need to do that

02:05:12,910 --> 02:05:16,990
because we want to have the whole code

02:05:14,560 --> 02:05:19,660
loading in our browser so we are not

02:05:16,990 --> 02:05:21,700
doing okay fine okay so how to check if

02:05:19,660 --> 02:05:23,860
you if the current app you are running

02:05:21,700 --> 02:05:26,170
is in production or in development mode

02:05:23,860 --> 02:05:28,950
you can use the react developer tools if

02:05:26,170 --> 02:05:32,950
you look at the once you install it you

02:05:28,950 --> 02:05:34,330
can see here there's two color if he's

02:05:32,950 --> 02:05:35,950
red it means you are in development mode

02:05:34,330 --> 02:05:38,290
if I click he's tell you you're in

02:05:35,950 --> 02:05:41,320
development mode if you build it in

02:05:38,290 --> 02:05:45,010
production mode production build you

02:05:41,320 --> 02:05:49,240
will have a duck icon okay so this one

02:05:45,010 --> 02:05:51,040
is a just a quick a quick check up on on

02:05:49,240 --> 02:05:52,690
this build - this is the basic stuff but

02:05:51,040 --> 02:05:54,580
if you never do reactors know about this

02:05:52,690 --> 02:05:57,160
okay this will improve the performance

02:05:54,580 --> 02:06:00,190
already of your production then let's

02:05:57,160 --> 02:06:03,580
try to go deeper up there's another tool

02:06:00,190 --> 02:06:06,640
okay here in Europe it seems to be fine

02:06:03,580 --> 02:06:08,650
right I tap is very fast and it's show

02:06:06,640 --> 02:06:10,330
very fast here but let's say you are

02:06:08,650 --> 02:06:11,620
walking you your app is walking very fun

02:06:10,330 --> 02:06:13,000
and know some people are deploying your

02:06:11,620 --> 02:06:14,560
app in the mobile app maybe the mobile

02:06:13,000 --> 02:06:17,200
app is not as strong as your computer

02:06:14,560 --> 02:06:21,100
and they will start to have some latency

02:06:17,200 --> 02:06:23,080
the chrome give us the tools if you open

02:06:21,100 --> 02:06:25,810
you develop you instant you develop burn

02:06:23,080 --> 02:06:26,890
inspect the tools in the chrome you will

02:06:25,810 --> 02:06:29,740
see here there's the tabulation

02:06:26,890 --> 02:06:33,130
performance okay in performance you have

02:06:29,740 --> 02:06:36,010
on the right here sitting you can

02:06:33,130 --> 02:06:37,930
simulate a footling so i can voluntarily

02:06:36,010 --> 02:06:40,440
tell chrome can you be four times slower

02:06:37,930 --> 02:06:43,710
than usual okay

02:06:40,440 --> 02:06:43,710
everyone has that

02:06:44,580 --> 02:06:51,730
okay so I can repeat open you inspection

02:06:48,520 --> 02:06:54,489
inspect tool in your Chrome browser go

02:06:51,730 --> 02:06:57,099
to the performance performance on the

02:06:54,489 --> 02:07:00,760
right there's a smaller setting icon if

02:06:57,099 --> 02:07:02,500
you open it you have a CPU normally you

02:07:00,760 --> 02:07:05,340
are not switching is what working as

02:07:02,500 --> 02:07:08,800
normal but you can simulate a throttling

02:07:05,340 --> 02:07:11,469
okay it won't set up once you do that I

02:07:08,800 --> 02:07:14,080
go to the chat again now I start to type

02:07:11,469 --> 02:07:16,599
and start to be a little slow I feel

02:07:14,080 --> 02:07:18,340
some latency when I entered you see

02:07:16,599 --> 02:07:22,480
there's a one-second latency is the

02:07:18,340 --> 02:07:25,810
little slower than when I was not typing

02:07:22,480 --> 02:07:27,820
when I was not at rattling okay so then

02:07:25,810 --> 02:07:29,830
we are going to start to use a tool to

02:07:27,820 --> 02:07:33,070
find out if you can find out how to

02:07:29,830 --> 02:07:36,310
improve this this latency okay so there

02:07:33,070 --> 02:07:38,110
is a tool in the same tab that we

02:07:36,310 --> 02:07:38,790
already showed this graph so this graph

02:07:38,110 --> 02:07:41,830
is a color

02:07:38,790 --> 02:07:43,989
flan graph okay you can see that it show

02:07:41,830 --> 02:07:45,909
when you are running the app how long

02:07:43,989 --> 02:07:47,889
each component is taking and which

02:07:45,909 --> 02:07:49,510
component is is calling which component

02:07:47,889 --> 02:07:53,110
to be built in the reactor application

02:07:49,510 --> 02:07:57,400
so to do that you have on the left here

02:07:53,110 --> 02:07:59,380
a small record button okay so when I

02:07:57,400 --> 02:08:02,679
click it it will start recording my

02:07:59,380 --> 02:08:05,560
action so just for this for this Duvall

02:08:02,679 --> 02:08:07,210
please stop stop entering anything in

02:08:05,560 --> 02:08:09,880
the chat so that I will be able to

02:08:07,210 --> 02:08:11,650
record first and after let you record so

02:08:09,880 --> 02:08:14,500
I do a record do you prefer is

02:08:11,650 --> 02:08:16,360
initializing I take a type one character

02:08:14,500 --> 02:08:20,170
is a little slow I tap enter

02:08:16,360 --> 02:08:22,330
and I can stop the record don't record

02:08:20,170 --> 02:08:23,860
more than 20 seconds because you will

02:08:22,330 --> 02:08:25,300
recall more than that you browser may

02:08:23,860 --> 02:08:27,849
hang okay because I will be too much

02:08:25,300 --> 02:08:30,040
data for the CPU to process okay so I

02:08:27,849 --> 02:08:32,170
let you I give you one minute each five

02:08:30,040 --> 02:08:34,210
minute to try to do your own recording

02:08:32,170 --> 02:08:35,920
make it simple record on try to make

02:08:34,210 --> 02:08:38,080
something complex one one and one

02:08:35,920 --> 02:08:40,860
character and one and then you can stop

02:08:38,080 --> 02:08:40,860
the profiling

02:08:45,370 --> 02:08:50,210
right just just right to do like Joey

02:08:47,810 --> 02:08:53,170
one character it will be easier for you

02:08:50,210 --> 02:08:53,170
to analyze the profiling

02:09:01,929 --> 02:09:08,830
okay so so few people have done it we

02:09:04,510 --> 02:09:10,239
can see in the chat right if you cannot

02:09:08,830 --> 02:09:13,260
find out forget the Booton is here on

02:09:10,239 --> 02:09:13,260
the left record

02:09:37,139 --> 02:09:41,429
all right so I will continue okay don't

02:09:39,719 --> 02:09:42,030
worry if you do not have time to do the

02:09:41,429 --> 02:09:44,010
recording

02:09:42,030 --> 02:09:45,570
what's important is here to show what

02:09:44,010 --> 02:09:46,290
exactly you can do with this recording

02:09:45,570 --> 02:09:48,270
okay

02:09:46,290 --> 02:09:50,510
after you can can't try to play with you

02:09:48,270 --> 02:09:53,070
on recording if you want so here you see

02:09:50,510 --> 02:09:54,750
there's this bottom part which happy

02:09:53,070 --> 02:09:55,920
after I finish the recording so it's a

02:09:54,750 --> 02:09:57,420
little hard to read because it's a

02:09:55,920 --> 02:10:00,929
little stir everything is better stacked

02:09:57,420 --> 02:10:04,290
so I'm going here on the right the 3.2

02:10:00,929 --> 02:10:06,540
docksiders fullscreen okay now I have

02:10:04,290 --> 02:10:08,750
everything I have the same my

02:10:06,540 --> 02:10:11,550
console.log now appear as a full screen

02:10:08,750 --> 02:10:14,130
so that I can see more information so

02:10:11,550 --> 02:10:17,340
what we see here the first bar shaft

02:10:14,130 --> 02:10:20,070
here let me remove this you can see when

02:10:17,340 --> 02:10:22,409
I'll go along the way it's showing me

02:10:20,070 --> 02:10:24,000
the screen how is it going so we can see

02:10:22,409 --> 02:10:27,409
clearly that there was nothing at the

02:10:24,000 --> 02:10:27,409
beginning right the message is empty

02:10:30,550 --> 02:10:36,970
so the message is empty okay along here

02:10:34,030 --> 02:10:39,840
something is happening we tape we enter

02:10:36,970 --> 02:10:42,160
the character a nothing is happening and

02:10:39,840 --> 02:10:44,140
then something again is happening and at

02:10:42,160 --> 02:10:47,350
the end we can see that the message has

02:10:44,140 --> 02:10:49,630
been don't all in the chat okay how to

02:10:47,350 --> 02:10:52,030
read this job so the first information

02:10:49,630 --> 02:10:55,570
here you can see is the CPU usage and

02:10:52,030 --> 02:10:57,370
the color here this is describing is how

02:10:55,570 --> 02:10:59,740
the CP is being used and we can see that

02:10:57,370 --> 02:11:02,320
most of the time here the CPUs edge is

02:10:59,740 --> 02:11:05,500
on scripting run the ring and penting is

02:11:02,320 --> 02:11:09,490
when he tried to change your browser the

02:11:05,500 --> 02:11:11,260
HTML in in the browser okay so this is a

02:11:09,490 --> 02:11:13,480
two part that will ensure interest to

02:11:11,260 --> 02:11:15,370
try to find out what's how to improve

02:11:13,480 --> 02:11:17,890
the performance so if you go a little

02:11:15,370 --> 02:11:20,560
below so frame here I can see how long

02:11:17,890 --> 02:11:23,200
if I select this this part here I can

02:11:20,560 --> 02:11:26,140
select now he tell me when that how long

02:11:23,200 --> 02:11:28,990
it took to do this action here

02:11:26,140 --> 02:11:30,670
interaction you can see that there is

02:11:28,990 --> 02:11:32,740
the key character and the key up which

02:11:30,670 --> 02:11:35,740
is when I tap when I enter the a

02:11:32,740 --> 02:11:38,770
character and we can see in user timing

02:11:35,740 --> 02:11:40,330
here this is what is interesting

02:11:38,770 --> 02:11:41,680
starting to be interesting we can see

02:11:40,330 --> 02:11:46,360
the different react component overlap

02:11:41,680 --> 02:11:48,070
that when I enter a he render again he

02:11:46,360 --> 02:11:50,170
executes some rendering for each of the

02:11:48,070 --> 02:11:53,530
component the chat we can see the

02:11:50,170 --> 02:11:55,810
container the chat container and so on

02:11:53,530 --> 02:11:58,270
so there's more information below here

02:11:55,810 --> 02:11:59,130
okay we are going to analyze that a

02:11:58,270 --> 02:12:02,710
little later

02:11:59,130 --> 02:12:06,580
another thing interesting here if I go

02:12:02,710 --> 02:12:09,220
from here to here I can see a small

02:12:06,580 --> 02:12:12,370
difference right here when I entered the

02:12:09,220 --> 02:12:16,060
character it's immediately starting to

02:12:12,370 --> 02:12:18,220
run down the component when here when I

02:12:16,060 --> 02:12:20,440
start to enter the widest i input enter

02:12:18,220 --> 02:12:22,240
there was some latency here he didn't

02:12:20,440 --> 02:12:23,620
start to render the component so this is

02:12:22,240 --> 02:12:25,240
where maybe we can think of something is

02:12:23,620 --> 02:12:27,190
happening why is it so slow to start

02:12:25,240 --> 02:12:29,650
running a component I just click 'enter

02:12:27,190 --> 02:12:31,270
all right so how to try to find

02:12:29,650 --> 02:12:34,660
something does another thing here in

02:12:31,270 --> 02:12:36,880
domain which is also some even up

02:12:34,660 --> 02:12:38,770
happening the start of the event and the

02:12:36,880 --> 02:12:40,870
end of the event until the what's

02:12:38,770 --> 02:12:44,710
happening and under the seven the child

02:12:40,870 --> 02:12:48,310
local if I click on it and I go here too

02:12:44,710 --> 02:12:50,530
but Annette I will see different

02:12:48,310 --> 02:12:52,030
function that has been called you are

02:12:50,530 --> 02:12:54,520
Tooting interesting one is but on that

02:12:52,030 --> 02:12:57,010
wall is call three so the call tree show

02:12:54,520 --> 02:12:58,750
you when after I click this one the

02:12:57,010 --> 02:13:01,030
different event call the child of the

02:12:58,750 --> 02:13:02,350
event caller so sometimes is not it's

02:13:01,030 --> 02:13:04,330
not easy to read because there's a lot

02:13:02,350 --> 02:13:05,950
of stuff is coming from react is coming

02:13:04,330 --> 02:13:06,340
from an anonymous caller and one and so

02:13:05,950 --> 02:13:08,290
on okay

02:13:06,340 --> 02:13:09,430
so you won't always find something but

02:13:08,290 --> 02:13:12,969
you still interesting to have a look

02:13:09,430 --> 02:13:15,160
first just in case the bottom up we'll

02:13:12,969 --> 02:13:17,260
regroup together for the same function

02:13:15,160 --> 02:13:18,460
if it had been called many time it will

02:13:17,260 --> 02:13:21,040
put together the time that has been

02:13:18,460 --> 02:13:23,500
spent on a specific function and here I

02:13:21,040 --> 02:13:25,960
can see clearly how we function here

02:13:23,500 --> 02:13:29,520
called update mention message the

02:13:25,960 --> 02:13:30,640
aggregation of call took 68 millisecond

02:13:29,520 --> 02:13:34,360
okay

02:13:30,640 --> 02:13:36,400
out of the three 360 millisecond but if

02:13:34,360 --> 02:13:37,780
you look in term of aggregation he was

02:13:36,400 --> 02:13:39,520
the one taking more the most time

02:13:37,780 --> 02:13:42,370
compared to all the other small function

02:13:39,520 --> 02:13:43,300
call and here on the right you can see

02:13:42,370 --> 02:13:45,700
mutate auto Jess

02:13:43,300 --> 02:13:47,830
so this one is possible the chrome can

02:13:45,700 --> 02:13:49,510
make the link to new code because on

02:13:47,830 --> 02:13:51,880
development mod there was a soft color

02:13:49,510 --> 02:13:53,680
what's this color sauce mapping so so

02:13:51,880 --> 02:13:55,330
smacking is Bill when you are building

02:13:53,680 --> 02:13:57,219
your react code this was mapping allow

02:13:55,330 --> 02:13:59,410
the force when you debugging when I

02:13:57,219 --> 02:14:02,469
click here he will be able to go to the

02:13:59,410 --> 02:14:05,410
code okay so how did I go here just to

02:14:02,469 --> 02:14:06,850
come back I click here on the event

02:14:05,410 --> 02:14:09,100
press if you cannot click sometime is a

02:14:06,850 --> 02:14:10,960
little bug on the chrome do a

02:14:09,100 --> 02:14:13,020
right-click you just a PR this and then

02:14:10,960 --> 02:14:16,690
you should be able to click it okay

02:14:13,020 --> 02:14:18,190
everyone has this so I go back again to

02:14:16,690 --> 02:14:20,080
what they I go back here to the bottom

02:14:18,190 --> 02:14:21,610
up I can see update munch and each edge

02:14:20,080 --> 02:14:23,560
is taking a lot long time when we

02:14:21,610 --> 02:14:26,170
aggregate the time span and if I go to

02:14:23,560 --> 02:14:28,360
the code itself I can see okay here very

02:14:26,170 --> 02:14:29,350
something very easy I've written we are

02:14:28,360 --> 02:14:31,390
doing your loop for nothing

02:14:29,350 --> 02:14:34,780
okay this is what make or up a little

02:14:31,390 --> 02:14:37,870
slow a little slower so now just to show

02:14:34,780 --> 02:14:40,180
you that we can improve it

02:14:37,870 --> 02:14:41,560
so then I managed to find a specific

02:14:40,180 --> 02:14:44,530
piece of code that should not be there

02:14:41,560 --> 02:14:46,660
so I'm going to remove it so you can

02:14:44,530 --> 02:14:49,600
find it inside the meet at all okay a

02:14:46,660 --> 02:14:51,930
one can go to the mutator and the piece

02:14:49,600 --> 02:14:56,290
of code is here right we have the line

02:14:51,930 --> 02:14:58,300
with eight other GS 9 28 so again see

02:14:56,290 --> 02:15:03,070
here imitate other GS

02:14:58,300 --> 02:15:05,800
line 15 no maybe are some compilation as

02:15:03,070 --> 02:15:08,500
yes okay there was some compilation from

02:15:05,800 --> 02:15:12,579
webpack so there is a difference of line

02:15:08,500 --> 02:15:13,960
I forgot this one but but that's fine

02:15:12,579 --> 02:15:16,989
that's easy to find because anywhere we

02:15:13,960 --> 02:15:18,639
have the we have the name of the

02:15:16,989 --> 02:15:20,739
function and we did an equal if I or

02:15:18,639 --> 02:15:24,309
minify okay so now I'm just going to

02:15:20,739 --> 02:15:25,590
comment this code the code is going to

02:15:24,309 --> 02:15:32,250
be recompile

02:15:25,590 --> 02:15:32,250
okay and I'm going to reinitialize it

02:15:34,240 --> 02:15:42,050
just to make sure I start from scratch

02:15:37,030 --> 02:15:44,690
log in again and I'm going to do another

02:15:42,050 --> 02:15:46,430
recording so here is a still a little

02:15:44,690 --> 02:15:48,050
slower because I'm still working okay if

02:15:46,430 --> 02:15:50,480
you want to stop rolling you can change

02:15:48,050 --> 02:15:52,160
back the sitting here so mg are going to

02:15:50,480 --> 02:15:55,040
keep those for changes to compare so

02:15:52,160 --> 02:15:57,110
this let's have a comparison here to see

02:15:55,040 --> 02:16:00,380
that the time taken is one second and

02:15:57,110 --> 02:16:04,130
the time and to remember here we have a

02:16:00,380 --> 02:16:05,960
small gap of a few 300 millisecond about

02:16:04,130 --> 02:16:07,360
three hundred and second so I record

02:16:05,960 --> 02:16:11,900
again

02:16:07,360 --> 02:16:15,980
so the provider is initializing okay I

02:16:11,900 --> 02:16:21,280
do the same the same action a and though

02:16:15,980 --> 02:16:21,280
I stopped the profiling

02:16:23,030 --> 02:16:31,080
and know if I come back here the second

02:16:26,970 --> 02:16:33,179
part oh I think someone yes someone

02:16:31,080 --> 02:16:34,830
joined the chat to let me redo it again

02:16:33,179 --> 02:16:37,620
okay so just for the sake of the

02:16:34,830 --> 02:16:46,560
exercise just hold a little on your chat

02:16:37,620 --> 02:16:51,210
so I do it again I enter a and I stop

02:16:46,560 --> 02:16:54,540
the profiling now we can see the second

02:16:51,210 --> 02:16:56,849
part here once I enter the key there's

02:16:54,540 --> 02:17:02,340
no more this latency okay if I click on

02:16:56,849 --> 02:17:03,960
the on the event key press we can see

02:17:02,340 --> 02:17:06,690
that the update mention massage is no

02:17:03,960 --> 02:17:09,420
longer the aggregated time that takes

02:17:06,690 --> 02:17:11,760
the most time during the initialization

02:17:09,420 --> 02:17:13,860
okay so this one it was very easy to

02:17:11,760 --> 02:17:16,349
find because I voluntarily put inside

02:17:13,860 --> 02:17:18,060
the function so but don't forget that if

02:17:16,349 --> 02:17:19,620
you have a lot of callback function and

02:17:18,060 --> 02:17:21,420
on me cause it won't be that easy to

02:17:19,620 --> 02:17:23,520
find but you still have first a first

02:17:21,420 --> 02:17:24,719
indication that can be useful to try to

02:17:23,520 --> 02:17:26,070
find something happening maybe if you

02:17:24,719 --> 02:17:27,660
have a service file or this kind of

02:17:26,070 --> 02:17:35,130
stuff you will find out something is

02:17:27,660 --> 02:17:36,719
happening in your service file okay so

02:17:35,130 --> 02:17:38,370
the next tool I want to show you before

02:17:36,719 --> 02:17:40,230
going to the next tool let's try to

02:17:38,370 --> 02:17:42,780
analyze a little more okay because I'm

02:17:40,230 --> 02:17:46,260
still short link and you can see when I

02:17:42,780 --> 02:17:47,790
enter a character it's still very slow

02:17:46,260 --> 02:17:49,889
right maybe that's something we can do

02:17:47,790 --> 02:17:51,120
about this so let's go to the part where

02:17:49,889 --> 02:17:53,280
and saw the character you watch this

02:17:51,120 --> 02:17:56,310
part here now if you if you look at

02:17:53,280 --> 02:17:58,139
again at this part here we can see this

02:17:56,310 --> 02:17:59,880
from graph when you see this kind of

02:17:58,139 --> 02:18:01,080
stuff behind the front graph is that

02:17:59,880 --> 02:18:02,940
maybe something wrong is happening

02:18:01,080 --> 02:18:04,830
because you don't want to have a flam

02:18:02,940 --> 02:18:07,080
graph that has a lot of bit a lot of

02:18:04,830 --> 02:18:08,969
spike like this if you look at it we can

02:18:07,080 --> 02:18:11,160
see clearly what is happening in the in

02:18:08,969 --> 02:18:13,860
the react when I tap on top here and

02:18:11,160 --> 02:18:16,260
again the chat here is the over

02:18:13,860 --> 02:18:18,450
different style deep component being

02:18:16,260 --> 02:18:20,580
rerender he can render the chat

02:18:18,450 --> 02:18:24,360
container and inside the check container

02:18:20,580 --> 02:18:26,130
we can see all these chat bubble already

02:18:24,360 --> 02:18:28,770
stopped over here you see all of them

02:18:26,130 --> 02:18:30,570
are being Rhonda which means there's

02:18:28,770 --> 02:18:31,290
something wrong in our logic is every

02:18:30,570 --> 02:18:33,060
time I type

02:18:31,290 --> 02:18:35,250
he is rendering this horse tough here

02:18:33,060 --> 02:18:36,389
but we don't need to under it right

02:18:35,250 --> 02:18:38,330
because I'm just

02:18:36,389 --> 02:18:40,590
I put here so this is a waste of time

02:18:38,330 --> 02:18:42,840
and other tools that will help you to

02:18:40,590 --> 02:18:46,319
find this easily if you go now to the

02:18:42,840 --> 02:18:49,349
react so this is the next slide if you

02:18:46,319 --> 02:18:50,929
go to react the react tool you have this

02:18:49,349 --> 02:18:55,380
highlight update

02:18:50,929 --> 02:18:57,479
so before I activate it I know I will

02:18:55,380 --> 02:19:00,569
remove the short link because I don't

02:18:57,479 --> 02:19:03,510
need it anymore okay

02:19:00,569 --> 02:19:08,460
so I activate here the highlight okay

02:19:03,510 --> 02:19:10,139
let me put this back on the bottom of my

02:19:08,460 --> 02:19:12,510
application and what's the difference

02:19:10,139 --> 02:19:14,909
now is every time I type he had liked me

02:19:12,510 --> 02:19:16,649
the change of your component okay to

02:19:14,909 --> 02:19:19,019
change what is halide mean it means he

02:19:16,649 --> 02:19:21,330
has been he has been launching a

02:19:19,019 --> 02:19:24,330
rendering of the component the color

02:19:21,330 --> 02:19:25,769
that you see here blue green sometimes

02:19:24,330 --> 02:19:28,439
it will become yellow or red

02:19:25,769 --> 02:19:30,779
it's how often this component is being

02:19:28,439 --> 02:19:32,370
is being written down so if you see

02:19:30,779 --> 02:19:33,989
something that is red maybe is no more

02:19:32,370 --> 02:19:36,149
if you are doing like scrolling or this

02:19:33,989 --> 02:19:38,159
kind of stuff maybe you wonder why why

02:19:36,149 --> 02:19:40,199
is it or run during so many time okay so

02:19:38,159 --> 02:19:41,429
maybe something is happening and here we

02:19:40,199 --> 02:19:43,679
can see clearly every time I tap

02:19:41,429 --> 02:19:44,880
he's running your whole application so

02:19:43,679 --> 02:19:46,800
did something all you can try to do

02:19:44,880 --> 02:19:49,500
about it but to do something about it we

02:19:46,800 --> 02:19:52,380
need to understand exactly how the react

02:19:49,500 --> 02:19:57,120
is working okay so if I just go back to

02:19:52,380 --> 02:20:01,680
this to this shaft here in fact when you

02:19:57,120 --> 02:20:03,540
see here when I click this before a tree

02:20:01,680 --> 02:20:05,489
or whenever I was clicking outside we

02:20:03,540 --> 02:20:09,720
can remember most of the time during

02:20:05,489 --> 02:20:10,830
this react component rerun bearing we

02:20:09,720 --> 02:20:14,279
can see that most of the time is spent

02:20:10,830 --> 02:20:19,260
on on JavaScript on scripting not on not

02:20:14,279 --> 02:20:21,569
on changing the browser UI the HTML and

02:20:19,260 --> 02:20:22,739
the interface the CSS because the part

02:20:21,569 --> 02:20:25,350
that is the rendering and painting

02:20:22,739 --> 02:20:27,630
almost nothing okay so what what is

02:20:25,350 --> 02:20:30,319
taking that much time who know what is

02:20:27,630 --> 02:20:30,319
taking that much time

02:20:30,971 --> 02:20:36,431
no okay so in react I don't know if you

02:20:33,971 --> 02:20:39,070
already heard about this their each

02:20:36,431 --> 02:20:41,710
component of react is building a virtual

02:20:39,070 --> 02:20:43,750
Dom okay meaning that each component

02:20:41,710 --> 02:20:46,870
before going the Dome of the browser

02:20:43,750 --> 02:20:47,801
will keep a virtual Dom his own abstract

02:20:46,870 --> 02:20:50,410
Dom okay

02:20:47,801 --> 02:20:53,021
and every time we run though he will

02:20:50,410 --> 02:20:55,301
build he will he will execute the code

02:20:53,021 --> 02:20:58,181
to run down the Dom okay the rundown of

02:20:55,301 --> 02:21:00,940
the Dom is on a component if I go to

02:20:58,181 --> 02:21:03,521
chat is that when I do this Rhonda this

02:21:00,940 --> 02:21:05,740
is what will be changed as a react

02:21:03,521 --> 02:21:08,080
element that will be the abstract

02:21:05,740 --> 02:21:10,091
representing the astrodome franzese's I

02:21:08,080 --> 02:21:12,131
stop John what is going to do is going

02:21:10,091 --> 02:21:13,931
to compare with the real DOM and he's

02:21:12,131 --> 02:21:17,490
going to replace it if the real dome is

02:21:13,931 --> 02:21:19,900
different okay but what takes time here

02:21:17,490 --> 02:21:21,971
so what we see the scripting here is not

02:21:19,900 --> 02:21:23,500
the fact that I'm doing a culture is

02:21:21,971 --> 02:21:26,471
okay that I'm doing a dispatch that I'm

02:21:23,500 --> 02:21:29,980
doing a some mutation what text time is

02:21:26,471 --> 02:21:31,631
the is the building of this virtual Dom

02:21:29,980 --> 02:21:33,460
so this is what we want to our God

02:21:31,631 --> 02:21:35,261
because here we can see we are building

02:21:33,460 --> 02:21:37,450
hundreds of chat beber

02:21:35,261 --> 02:21:40,091
each of this is a component and we are

02:21:37,450 --> 02:21:43,181
rebuilding it 100 time and we can see

02:21:40,091 --> 02:21:45,851
the accumulation make the rendering much

02:21:43,181 --> 02:21:48,671
more slow the major rending of the whole

02:21:45,851 --> 02:21:51,610
hub slower before we get this character

02:21:48,671 --> 02:21:55,931
being displayed okay so this is what we

02:21:51,610 --> 02:21:57,940
try to do so how does it do that so in

02:21:55,931 --> 02:22:01,030
fact there's another tools that that

02:21:57,940 --> 02:22:03,131
react provide for each component we have

02:22:01,030 --> 02:22:05,110
a function called should of the short

02:22:03,131 --> 02:22:06,940
component update so short component

02:22:05,110 --> 02:22:09,221
update is part of the lifecycle of a

02:22:06,940 --> 02:22:11,940
component okay so each component before

02:22:09,221 --> 02:22:14,650
rendering will execute some lifecycle

02:22:11,940 --> 02:22:16,181
lifecycle function one of them is true

02:22:14,650 --> 02:22:18,551
component update one of them is

02:22:16,181 --> 02:22:20,230
component deed model component update

02:22:18,551 --> 02:22:22,000
this kind of stuff okay but the one we

02:22:20,230 --> 02:22:25,540
interesting is this one because you can

02:22:22,000 --> 02:22:27,580
see in this so in this tree each node is

02:22:25,540 --> 02:22:30,250
a react component okay so let's say for

02:22:27,580 --> 02:22:32,200
those World War or Nazi one is our chat

02:22:30,250 --> 02:22:34,660
then over Nazi tree

02:22:32,200 --> 02:22:38,740
maybe is a chat container and the notice

02:22:34,660 --> 02:22:41,500
is c c6 c7 or c8 is will be all our chat

02:22:38,740 --> 02:22:43,990
bubble okay so one is red it means that

02:22:41,500 --> 02:22:44,620
he has been changing the Dom in the HTML

02:22:43,990 --> 02:22:46,210
when

02:22:44,620 --> 02:22:48,130
is green it means he didn't change the

02:22:46,210 --> 02:22:49,840
Dom in the HTML okay but to do this

02:22:48,130 --> 02:22:51,460
decision of changing the Dom or not in

02:22:49,840 --> 02:22:53,530
the HTML you will execute two

02:22:51,460 --> 02:22:55,630
functionality one is a short component

02:22:53,530 --> 02:22:57,370
update by default it always returning

02:22:55,630 --> 02:22:58,870
true so for all the component will

02:22:57,370 --> 02:23:01,180
always say yes I want you to update it

02:22:58,870 --> 02:23:03,820
when something change in the in the tree

02:23:01,180 --> 02:23:04,990
of the of the of the component and then

02:23:03,820 --> 02:23:06,580
the second function that is really cute

02:23:04,990 --> 02:23:08,740
is what we just say he's going to build

02:23:06,580 --> 02:23:10,780
a virtual Dom and then we make a

02:23:08,740 --> 02:23:12,970
comparison is the virtual Dom different

02:23:10,780 --> 02:23:15,280
or not okay so if you look at this tree

02:23:12,970 --> 02:23:17,710
what happened in our chat app is see one

02:23:15,280 --> 02:23:20,440
when I check when I enter something the

02:23:17,710 --> 02:23:24,760
state is changing and the view dispatch

02:23:20,440 --> 02:23:26,590
dispatch the stock change the change of

02:23:24,760 --> 02:23:28,660
state and it will it will be connected

02:23:26,590 --> 02:23:31,061
to our chat apps component that will

02:23:28,660 --> 02:23:33,610
start the rendering so he will say true

02:23:31,061 --> 02:23:35,410
component update is true by default and

02:23:33,610 --> 02:23:37,271
here then he will compile the visceral

02:23:35,410 --> 02:23:39,580
Dom it has change or not if there's a

02:23:37,271 --> 02:23:40,811
change yes he will change it for each of

02:23:39,580 --> 02:23:43,180
the strategy we will do the same the

02:23:40,811 --> 02:23:45,550
chat container will compare it and the

02:23:43,180 --> 02:23:47,620
shift component by default is true and

02:23:45,550 --> 02:23:48,970
the virtual Dom cooperation will say all

02:23:47,620 --> 02:23:52,680
co2 side are some difference because the

02:23:48,970 --> 02:23:52,680
input is different so he will render it

02:23:53,160 --> 02:23:57,101
no in fact he will not render it because

02:23:55,480 --> 02:23:59,590
sorry I'm on the chat container so he

02:23:57,101 --> 02:24:00,970
will say all the message is the same so

02:23:59,590 --> 02:24:03,220
I don't need to render it but he still

02:24:00,970 --> 02:24:05,230
executed the virtual Dom equivalent okay

02:24:03,220 --> 02:24:07,990
and after that and for each of them

02:24:05,230 --> 02:24:10,480
he will also execute the scenes a short

02:24:07,990 --> 02:24:12,190
component of date has been no no he will

02:24:10,480 --> 02:24:13,750
execute also for each of the bubble here

02:24:12,190 --> 02:24:16,450
what we want to do is to avoid this

02:24:13,750 --> 02:24:18,160
rendering so we want to to play with the

02:24:16,450 --> 02:24:21,040
shoot component update to come from this

02:24:18,160 --> 02:24:23,380
node c3 to do not see to for the part of

02:24:21,040 --> 02:24:25,500
the check container okay so how to do

02:24:23,380 --> 02:24:25,500
that

02:24:27,460 --> 02:24:33,950
if you go back to the code so here you

02:24:31,100 --> 02:24:38,140
have your chat right which is below in

02:24:33,950 --> 02:24:40,520
your root Chad Chad ogea this chat

02:24:38,140 --> 02:24:41,689
reminder is the whole chat here right

02:24:40,520 --> 02:24:43,510
the schema that John showed you at the

02:24:41,689 --> 02:24:46,399
beginning it was the whole component

02:24:43,510 --> 02:24:47,899
inside the chat you can see I have a

02:24:46,399 --> 02:24:51,229
chat container okay

02:24:47,899 --> 02:24:53,510
this cat chat container is here if I

02:24:51,229 --> 02:24:58,160
open the index file I can see my

02:24:53,510 --> 02:25:00,110
component here okay and to be able to to

02:24:58,160 --> 02:25:02,810
create this functional component update

02:25:00,110 --> 02:25:05,420
you have to make a class component as a

02:25:02,810 --> 02:25:08,660
class okay so here is already the case

02:25:05,420 --> 02:25:10,910
and I put here I put your here the

02:25:08,660 --> 02:25:13,130
function you can just uncomment it so

02:25:10,910 --> 02:25:15,890
what happened as I told you this

02:25:13,130 --> 02:25:19,189
function exists but by default is doing

02:25:15,890 --> 02:25:21,140
that is always returning true so he

02:25:19,189 --> 02:25:23,540
every time you want to run doubt we just

02:25:21,140 --> 02:25:27,200
say yes you try to render it so what we

02:25:23,540 --> 02:25:28,970
want to do now is to stop to render in

02:25:27,200 --> 02:25:31,640
case the chat list didn't change how do

02:25:28,970 --> 02:25:33,830
we do that this function take as the

02:25:31,640 --> 02:25:35,390
first parameter the next prop okay if

02:25:33,830 --> 02:25:37,430
you are working in the state it will

02:25:35,390 --> 02:25:39,350
also take as a second character a second

02:25:37,430 --> 02:25:40,490
parameter the next date okay in our case

02:25:39,350 --> 02:25:42,710
we don't care about the state we're

02:25:40,490 --> 02:25:45,290
working obviously props okay and what I

02:25:42,710 --> 02:25:46,910
do is I look if my current props the the

02:25:45,290 --> 02:25:48,950
chat props which is the over list of

02:25:46,910 --> 02:25:51,590
message is different from the next one

02:25:48,950 --> 02:25:53,330
if it's different from the next one then

02:25:51,590 --> 02:25:55,130
it means yes I need to render it but if

02:25:53,330 --> 02:25:58,220
is not different then no I don't want to

02:25:55,130 --> 02:26:01,850
render it okay so let's see this in

02:25:58,220 --> 02:26:06,250
action no my chat up should have been

02:26:01,850 --> 02:26:06,250
rebuilt okay I will connect again

02:26:07,199 --> 02:26:18,149
I open again the inspector okay let me

02:26:13,290 --> 02:26:22,560
put it back at the bottom so I highlight

02:26:18,149 --> 02:26:25,500
again the updates and no I click you can

02:26:22,560 --> 02:26:29,130
see here this is not it surely is not

02:26:25,500 --> 02:26:33,239
wander anymore if I do know the the

02:26:29,130 --> 02:26:35,060
profiling so I put it back I do the same

02:26:33,239 --> 02:26:40,380
configuration oops sorry

02:26:35,060 --> 02:26:43,080
with the throttling 4x I do another

02:26:40,380 --> 02:26:46,620
recording okay so just to be in the same

02:26:43,080 --> 02:26:50,939
situation is empty I do a recording and

02:26:46,620 --> 02:26:52,140
tell one character are you enter no in

02:26:50,939 --> 02:26:54,569
fact I don't care about you interest me

02:26:52,140 --> 02:26:56,069
I do another recording because what we

02:26:54,569 --> 02:26:57,810
won't know we what we optimize it was

02:26:56,069 --> 02:27:00,630
the fact that I when I input a character

02:26:57,810 --> 02:27:01,560
all the Bible should not be updating so

02:27:00,630 --> 02:27:09,989
let's do it again

02:27:01,560 --> 02:27:15,710
I enter the character multiple time okay

02:27:09,989 --> 02:27:15,710
so I have my profiling wait

02:27:17,260 --> 02:27:21,380
okay let me do again because people are

02:27:19,640 --> 02:27:26,029
answering the chat once again okay just

02:27:21,380 --> 02:27:26,560
don't enter the chat for one second so I

02:27:26,029 --> 02:27:34,460
do

02:27:26,560 --> 02:27:38,899
ay-ay-ay and let's see this in full

02:27:34,460 --> 02:27:41,239
screen now you can see here there's a

02:27:38,899 --> 02:27:45,319
big difference right if I look at this

02:27:41,239 --> 02:27:50,750
part here before it was taking a few

02:27:45,319 --> 02:27:52,939
hundred oh it is BA yeah I know it's

02:27:50,750 --> 02:27:56,000
very small because there's no much no no

02:27:52,939 --> 02:27:57,830
you see so you can see before it was

02:27:56,000 --> 02:27:59,510
taking like one second

02:27:57,830 --> 02:28:01,910
no it's take only fifties even a second

02:27:59,510 --> 02:28:05,180
and we can see also if i zoom again a

02:28:01,910 --> 02:28:07,399
little more the blue graph is much more

02:28:05,180 --> 02:28:10,520
nicer no more all this chat bubble

02:28:07,399 --> 02:28:11,630
rendering he just executed the tree when

02:28:10,520 --> 02:28:14,390
he arrived to the container

02:28:11,630 --> 02:28:16,700
he doesn't render the dish at container

02:28:14,390 --> 02:28:18,439
okay he just runs out the message input

02:28:16,700 --> 02:28:20,170
at the end which is where we entered the

02:28:18,439 --> 02:28:24,640
a okay

02:28:20,170 --> 02:28:28,460
so this is possible because we are

02:28:24,640 --> 02:28:30,260
comparing here the chats which means we

02:28:28,460 --> 02:28:32,359
are what we do here is a UK food is a

02:28:30,260 --> 02:28:34,040
shallow comparison it means we are not

02:28:32,359 --> 02:28:36,109
comparing the content of the chat we are

02:28:34,040 --> 02:28:37,939
comparing the reference of the chat okay

02:28:36,109 --> 02:28:40,220
which is where imitability is very

02:28:37,939 --> 02:28:41,960
important because if you chat the

02:28:40,220 --> 02:28:43,760
content didn't change you want to send

02:28:41,960 --> 02:28:46,220
back the same the same object to same

02:28:43,760 --> 02:28:47,689
reference but if you chat change you

02:28:46,220 --> 02:28:49,790
want to send a new reference so that's

02:28:47,689 --> 02:28:51,319
why you make it immutable so that is a

02:28:49,790 --> 02:28:53,239
new object that is created with a new

02:28:51,319 --> 02:28:54,410
list because we are not going to compare

02:28:53,239 --> 02:28:58,130
the list we are just going to compare

02:28:54,410 --> 02:29:00,979
the reference is that clear okay

02:28:58,130 --> 02:29:03,830
so I repeat immutability means every

02:29:00,979 --> 02:29:05,450
time you you change something in the

02:29:03,830 --> 02:29:07,810
object you are not modifying the object

02:29:05,450 --> 02:29:09,950
itself you are creating a new object and

02:29:07,810 --> 02:29:11,390
changings copy everything in the new

02:29:09,950 --> 02:29:12,739
object and checking something inside

02:29:11,390 --> 02:29:14,569
this new object which means you will

02:29:12,739 --> 02:29:15,680
have two different reference and this is

02:29:14,569 --> 02:29:17,540
what is being compared here the

02:29:15,680 --> 02:29:18,649
reference not the content which is very

02:29:17,540 --> 02:29:20,359
important to understand why is it

02:29:18,649 --> 02:29:21,739
working okay because if you have to

02:29:20,359 --> 02:29:23,899
compare everything inside it will be

02:29:21,739 --> 02:29:25,220
much more complex and also it will take

02:29:23,899 --> 02:29:29,140
much more time so maybe we are going to

02:29:25,220 --> 02:29:29,140
lose time instead of gaining time okay

02:29:29,279 --> 02:29:33,750
that's it this is something very common

02:29:30,660 --> 02:29:35,130
right but it will be a little little

02:29:33,750 --> 02:29:36,779
annoying if I have a mini props and I

02:29:35,130 --> 02:29:38,340
have to compare all them all of them one

02:29:36,779 --> 02:29:40,649
by one so what

02:29:38,340 --> 02:29:42,600
reiax has done he has provides you

02:29:40,649 --> 02:29:45,390
another component called pure component

02:29:42,600 --> 02:29:49,109
ok so this poor component you can import

02:29:45,390 --> 02:29:51,779
it directly from the reactor so instead

02:29:49,109 --> 02:29:59,910
of doing extending a component I will

02:29:51,779 --> 02:30:01,410
extend the pure component okay so I'm

02:29:59,910 --> 02:30:03,000
going to go a little faster because we

02:30:01,410 --> 02:30:05,310
have only 20 min left and add other

02:30:03,000 --> 02:30:08,340
thing I would like to show you ok so if

02:30:05,310 --> 02:30:09,239
I replace it up to component now I don't

02:30:08,340 --> 02:30:10,979
need anymore this should update

02:30:09,239 --> 02:30:12,960
component because he will do exactly the

02:30:10,979 --> 02:30:15,840
same thing he will take all the props of

02:30:12,960 --> 02:30:17,340
the of the chat and he will compare it

02:30:15,840 --> 02:30:19,170
to see if there's a change if there's no

02:30:17,340 --> 02:30:21,120
chance he will return force it has one

02:30:19,170 --> 02:30:23,010
change he will return true so if I do

02:30:21,120 --> 02:30:29,390
that I expect the same thing happening

02:30:23,010 --> 02:30:29,390
now in my apps sorry

02:30:31,620 --> 02:30:36,390
so let me remove the throttling because

02:30:34,560 --> 02:30:39,540
I don't need to record anymore we just

02:30:36,390 --> 02:30:44,729
show the change in the highlight so does

02:30:39,540 --> 02:30:46,979
it work I know it's not working why can

02:30:44,729 --> 02:30:48,270
someone try to I give you I give you one

02:30:46,979 --> 02:30:50,040
minute because it's interesting exercise

02:30:48,270 --> 02:30:53,420
to do can you try to find out what the

02:30:50,040 --> 02:30:53,420
pro component does that work as expected

02:30:54,080 --> 02:30:57,479
because we expect the component to do

02:30:56,399 --> 02:31:01,649
the same comparison a shallow

02:30:57,479 --> 02:31:03,720
compression on each props but in this

02:31:01,649 --> 02:31:05,310
case even though I'm sending the same

02:31:03,720 --> 02:31:08,300
data the same I'm doing the same action

02:31:05,310 --> 02:31:11,460
he still rendering the Babur

02:31:08,300 --> 02:31:13,560
it means it return true if one of the

02:31:11,460 --> 02:31:15,570
one of the props is different otherwise

02:31:13,560 --> 02:31:16,890
he return false and he disguises

02:31:15,570 --> 02:31:18,090
returning true but it should not be

02:31:16,890 --> 02:31:20,370
returning to it should be right on in

02:31:18,090 --> 02:31:24,750
false because my my Bubber here is not

02:31:20,370 --> 02:31:27,060
changing okay so why if nobody has has

02:31:24,750 --> 02:31:30,330
fine it I will show you why it's because

02:31:27,060 --> 02:31:32,160
if you look at the chat here when I pass

02:31:30,330 --> 02:31:35,010
my chat container I'm passing two props

02:31:32,160 --> 02:31:37,020
I passing a chat this is the one we were

02:31:35,010 --> 02:31:39,060
comparing manually and we are passing a

02:31:37,020 --> 02:31:41,040
container ref which is another props and

02:31:39,060 --> 02:31:44,700
the way we pass the container ref is you

02:31:41,040 --> 02:31:47,220
see here is a function and this function

02:31:44,700 --> 02:31:48,420
every time the chat is rerun during he

02:31:47,220 --> 02:31:50,700
will create a new reference of the

02:31:48,420 --> 02:31:53,100
function every time there will be a new

02:31:50,700 --> 02:31:55,140
installation of a function object that's

02:31:53,100 --> 02:31:56,790
why even though we are doing poke

02:31:55,140 --> 02:31:58,740
opponent he is comparing both of them

02:31:56,790 --> 02:32:01,140
and the container ref will always be a

02:31:58,740 --> 02:32:03,899
new reference to a new function so to

02:32:01,140 --> 02:32:05,729
avoid that what you need to do is to

02:32:03,899 --> 02:32:07,080
have a constant so either it is not a

02:32:05,729 --> 02:32:09,120
function is just a constant like

02:32:07,080 --> 02:32:13,020
constant value you can create a cons

02:32:09,120 --> 02:32:16,859
here so that so that it will always send

02:32:13,020 --> 02:32:17,970
back send back the same variable okay so

02:32:16,859 --> 02:32:19,590
that the reference will never change

02:32:17,970 --> 02:32:21,359
every time you render again this

02:32:19,590 --> 02:32:25,590
component it is a function what you can

02:32:21,359 --> 02:32:29,700
do is you create it here in a ref as

02:32:25,590 --> 02:32:33,149
part of your component you apply the

02:32:29,700 --> 02:32:35,780
same code so chat container pops red

02:32:33,149 --> 02:32:35,780
container here

02:32:36,279 --> 02:32:44,270
oops is the attribute and don't forget

02:32:41,960 --> 02:32:46,760
in a react when you want to do this use

02:32:44,270 --> 02:32:48,290
this inside the function inside the

02:32:46,760 --> 02:32:51,319
function inside the component you need

02:32:48,290 --> 02:32:54,229
to bind it okay so I will have to bind

02:32:51,319 --> 02:32:55,939
this is part of a reactor if you want to

02:32:54,229 --> 02:32:57,950
learn more about this you can look at

02:32:55,939 --> 02:33:00,200
the you can check on the real

02:32:57,950 --> 02:33:02,420
documentation why you need to bind okay

02:33:00,200 --> 02:33:04,370
there's another library that make and I

02:33:02,420 --> 02:33:06,800
can help you to bind automatically but I

02:33:04,370 --> 02:33:08,960
didn't install it so for just for this

02:33:06,800 --> 02:33:10,819
exercise I will just directly bind say I

02:33:08,960 --> 02:33:13,580
want to bind this the current is of this

02:33:10,819 --> 02:33:15,109
of this component to the disk of this

02:33:13,580 --> 02:33:19,490
function so that is this will be the

02:33:15,109 --> 02:33:23,720
same okay by doing that now I can tell

02:33:19,490 --> 02:33:25,700
him every time you run down when you

02:33:23,720 --> 02:33:27,080
watch you pass in the props I don't want

02:33:25,700 --> 02:33:28,819
you to instantiate a new function I

02:33:27,080 --> 02:33:31,100
won't use to use to use the same

02:33:28,819 --> 02:33:35,050
function so now let's try to have a look

02:33:31,100 --> 02:33:40,670
at the chat oops

02:33:35,050 --> 02:33:43,100
Alex for I highlight the updates and we

02:33:40,670 --> 02:33:44,569
can see it's working right so be careful

02:33:43,100 --> 02:33:46,490
about this this is one one trick that

02:33:44,569 --> 02:33:48,800
can can happen often you think you are

02:33:46,490 --> 02:33:51,170
using a pro component and is doing the

02:33:48,800 --> 02:33:52,880
correct comparison but if you are not a

02:33:51,170 --> 02:33:54,380
single constant or you are not passing

02:33:52,880 --> 02:33:54,649
the same reference it will change it

02:33:54,380 --> 02:33:57,620
again

02:33:54,649 --> 02:33:59,300
so again imitability is a very important

02:33:57,620 --> 02:34:01,100
concept for this to walk as a pure

02:33:59,300 --> 02:34:03,260
component okay but then what is true

02:34:01,100 --> 02:34:04,880
also and don't don't forget that emit a

02:34:03,260 --> 02:34:06,830
shallow comparison is only on the

02:34:04,880 --> 02:34:09,529
reference so if you are not doing

02:34:06,830 --> 02:34:10,790
immutability correctly it will not do

02:34:09,529 --> 02:34:14,600
the comparison correctly and you can

02:34:10,790 --> 02:34:16,340
have some unexpected behavior okay

02:34:14,600 --> 02:34:18,109
the next thing I want to show you is

02:34:16,340 --> 02:34:19,910
another library called recompose because

02:34:18,109 --> 02:34:21,700
here what we did to do this a short

02:34:19,910 --> 02:34:25,850
component update we had to make a

02:34:21,700 --> 02:34:27,590
component as a class ok because for

02:34:25,850 --> 02:34:29,689
those who knows or for those who doesn't

02:34:27,590 --> 02:34:32,270
know react has many way of creating this

02:34:29,689 --> 02:34:35,540
component class one ways to create a

02:34:32,270 --> 02:34:37,880
class the other way is to create a knob

02:34:35,540 --> 02:34:39,470
component as a function when you create

02:34:37,880 --> 02:34:41,359
a class we are we are sometime we had to

02:34:39,470 --> 02:34:43,520
come construct all we had many lines of

02:34:41,359 --> 02:34:45,200
code which could be creating more works

02:34:43,520 --> 02:34:46,850
so some people doesn't like to do that

02:34:45,200 --> 02:34:48,229
especially if you do a present rational

02:34:46,850 --> 02:34:51,560
component there's no need to have

02:34:48,229 --> 02:34:53,600
complex class so what what there's a

02:34:51,560 --> 02:34:54,979
library called recompose it's already

02:34:53,600 --> 02:34:57,050
installed if you didn't pay me install

02:34:54,979 --> 02:35:00,350
is already in the package or JSON if you

02:34:57,050 --> 02:35:04,729
go to mention so mention is an example

02:35:00,350 --> 02:35:07,220
of here of component that is used a

02:35:04,729 --> 02:35:08,390
function there's no class here but since

02:35:07,220 --> 02:35:09,529
there's no class I cannot add this

02:35:08,390 --> 02:35:13,279
should component update

02:35:09,529 --> 02:35:15,140
so this recompose allow me to is a

02:35:13,279 --> 02:35:17,540
different type of higher-order component

02:35:15,140 --> 02:35:18,890
okay is another principle in redux in

02:35:17,540 --> 02:35:20,689
JavaScript you have the principle of

02:35:18,890 --> 02:35:23,330
high order function so you do the same

02:35:20,689 --> 02:35:25,430
with hydro component is the taking

02:35:23,330 --> 02:35:27,020
something each parameter and will return

02:35:25,430 --> 02:35:32,510
you a component okay

02:35:27,020 --> 02:35:35,210
so here I can do import out before I do

02:35:32,510 --> 02:35:37,699
that just to show you we can see here

02:35:35,210 --> 02:35:42,080
that every time I type here you see this

02:35:37,699 --> 02:35:45,620
path here if you look at dimension every

02:35:42,080 --> 02:35:47,210
time I type we can see a square on

02:35:45,620 --> 02:35:48,590
motion image is being rerun the right

02:35:47,210 --> 02:35:50,779
well the same we don't want to render it

02:35:48,590 --> 02:35:52,359
we're under it because there is no point

02:35:50,779 --> 02:36:02,350
to changing the mention when I'm typing

02:35:52,359 --> 02:36:05,600
so I will use a pure off from recompose

02:36:02,350 --> 02:36:09,640
slash pure and only thing one thing I

02:36:05,600 --> 02:36:14,540
need to do is just pure I am capsulate I

02:36:09,640 --> 02:36:15,949
encapsulate the component so that you so

02:36:14,540 --> 02:36:18,380
that is sent back a new component that

02:36:15,949 --> 02:36:21,649
will execute also a short component

02:36:18,380 --> 02:36:25,290
update like pure component and now if I

02:36:21,649 --> 02:36:29,100
login okay

02:36:25,290 --> 02:36:30,450
I need to highlight your date so I can

02:36:29,100 --> 02:36:30,900
see mansion is not being run there

02:36:30,450 --> 02:36:37,380
anymore

02:36:30,900 --> 02:36:38,700
okay so they are this recompose for

02:36:37,380 --> 02:36:40,290
people who is interested there are many

02:36:38,700 --> 02:36:41,640
other higher-order component like a

02:36:40,290 --> 02:36:43,110
shrewd update while oh you are so to

02:36:41,640 --> 02:36:44,790
personalize you should component update

02:36:43,110 --> 02:36:46,950
and order high order component that you

02:36:44,790 --> 02:36:49,440
can have a look okay the next library

02:36:46,950 --> 02:36:51,300
the next things to know is about redux

02:36:49,440 --> 02:36:53,521
right we use radix no application in

02:36:51,300 --> 02:36:54,810
fact if you use radix you don't need to

02:36:53,521 --> 02:36:56,310
do this through component update or

02:36:54,810 --> 02:36:57,060
disappear component because radix is

02:36:56,310 --> 02:37:01,170
doing it for you

02:36:57,060 --> 02:37:02,850
we're inside the inside this function

02:37:01,170 --> 02:37:05,160
when you do the connect for radix when

02:37:02,850 --> 02:37:08,790
you're connecting your component to your

02:37:05,160 --> 02:37:10,590
store there is a multiple parameter map

02:37:08,790 --> 02:37:12,180
state two probes map this part to pro

02:37:10,590 --> 02:37:14,970
smells props and the last one is option

02:37:12,180 --> 02:37:17,400
and by default the option has a pure

02:37:14,970 --> 02:37:20,010
attribute that will be true and that

02:37:17,400 --> 02:37:21,810
will do this comparison he will when you

02:37:20,010 --> 02:37:24,120
finish to map the state to prop he will

02:37:21,810 --> 02:37:27,390
compare the previous props to your new

02:37:24,120 --> 02:37:29,820
props and he will do the same he will he

02:37:27,390 --> 02:37:31,530
will he will return true component

02:37:29,820 --> 02:37:33,900
update to true or false depending if

02:37:31,530 --> 02:37:36,360
there's a change in the props so quickly

02:37:33,900 --> 02:37:40,740
here in the check container I can show

02:37:36,360 --> 02:37:43,290
you you can see here this this object is

02:37:40,740 --> 02:37:44,640
not linked to the store does is just

02:37:43,290 --> 02:37:47,430
exporting it so I'm going to link it

02:37:44,640 --> 02:37:49,230
grisco just here there's a file index

02:37:47,430 --> 02:37:51,720
reduce your taste a I'm just going to do

02:37:49,230 --> 02:37:57,240
some copy past okay so I'm taking this

02:37:51,720 --> 02:37:59,970
code I change from the export so what I

02:37:57,240 --> 02:38:03,140
did here is I connected my chap to the

02:37:59,970 --> 02:38:05,850
store and I say every time the state

02:38:03,140 --> 02:38:08,310
what I do is I send to chat the chat

02:38:05,850 --> 02:38:11,610
props from the state so every time the

02:38:08,310 --> 02:38:13,110
chat will change he will this component

02:38:11,610 --> 02:38:14,190
will be R under every time the chat list

02:38:13,110 --> 02:38:16,080
which change this component will be

02:38:14,190 --> 02:38:18,720
runned off okay and here since we are

02:38:16,080 --> 02:38:20,580
using imitability when I do state

02:38:18,720 --> 02:38:22,800
block get in the chat list will not

02:38:20,580 --> 02:38:24,540
change because the action that we are

02:38:22,800 --> 02:38:26,670
doing in when inputting your character

02:38:24,540 --> 02:38:29,190
will not change with no change your chat

02:38:26,670 --> 02:38:32,460
list so he will do a comparison and the

02:38:29,190 --> 02:38:36,750
same he will he will see that the chat

02:38:32,460 --> 02:38:38,771
reference didn't change and he will not

02:38:36,750 --> 02:38:44,410
update the component

02:38:38,771 --> 02:38:48,940
okay so quickly it was last time okay I

02:38:44,410 --> 02:38:51,160
still have 15 minute so I can see here

02:38:48,940 --> 02:38:54,340
let's remove pure component to make sure

02:38:51,160 --> 02:38:55,750
you are really not applying any short

02:38:54,340 --> 02:38:57,880
component should component buy it by

02:38:55,750 --> 02:38:59,891
default no is a true because I didn't I

02:38:57,880 --> 02:39:02,920
commented this function and I'm not

02:38:59,891 --> 02:39:06,190
doing a pure component anymore okay so

02:39:02,920 --> 02:39:09,271
no okay just reload everything to make

02:39:06,190 --> 02:39:12,221
sure just to show you that we are really

02:39:09,271 --> 02:39:16,601
having the latest code so every time I

02:39:12,221 --> 02:39:18,550
type oh I like two digits the same no

02:39:16,601 --> 02:39:20,440
this chat container that I connected to

02:39:18,550 --> 02:39:21,610
the stock he's comparing when I

02:39:20,440 --> 02:39:22,780
connected the story is comparing the

02:39:21,610 --> 02:39:24,790
reference you see that the reference

02:39:22,780 --> 02:39:28,210
doesn't change so he's not rendering it

02:39:24,790 --> 02:39:31,240
again okay so this is why some people

02:39:28,210 --> 02:39:33,190
say you need to split you you need to

02:39:31,240 --> 02:39:35,200
split your application when using Redux

02:39:33,190 --> 02:39:36,940
this is where splitting your application

02:39:35,200 --> 02:39:38,920
into multiple linking the correct

02:39:36,940 --> 02:39:41,860
component to the correct state will also

02:39:38,920 --> 02:39:43,630
do optimization behind okay but behind

02:39:41,860 --> 02:39:45,730
is still shallow comparison so you have

02:39:43,630 --> 02:39:46,900
to understand that this will work the

02:39:45,730 --> 02:39:48,250
same as the pure component that should

02:39:46,900 --> 02:39:50,830
component update that we created

02:39:48,250 --> 02:39:53,170
manually only comparing reference okay

02:39:50,830 --> 02:39:55,630
and this is why I saw this one this part

02:39:53,170 --> 02:39:58,690
here doing export default connect and

02:39:55,630 --> 02:40:01,240
send say I want to link my my apps to

02:39:58,690 --> 02:40:03,070
the whole global state means you are not

02:40:01,240 --> 02:40:04,420
optimizing anymore because every time

02:40:03,070 --> 02:40:06,101
there will be a change on the state even

02:40:04,420 --> 02:40:08,771
it is not linked to your component he

02:40:06,101 --> 02:40:09,971
will render this component again okay so

02:40:08,771 --> 02:40:12,580
this should be avoided or

02:40:09,971 --> 02:40:13,931
if you do it is really one component

02:40:12,580 --> 02:40:15,280
I'll really need to have everything in

02:40:13,931 --> 02:40:17,351
the state which may be the case for

02:40:15,280 --> 02:40:18,940
small small application which you have

02:40:17,351 --> 02:40:21,580
if you have a big state with a lot of

02:40:18,940 --> 02:40:22,990
information inside inside your store

02:40:21,580 --> 02:40:24,670
then normally you should link the

02:40:22,990 --> 02:40:25,990
correct component to the current correct

02:40:24,670 --> 02:40:29,980
part of the state

02:40:25,990 --> 02:40:32,080
okay so comparison is still shallow okay

02:40:29,980 --> 02:40:34,690
but there's the last tool that I will

02:40:32,080 --> 02:40:38,380
present you for is sense for this

02:40:34,690 --> 02:40:40,590
workshop is the reselect okay so if you

02:40:38,380 --> 02:40:42,971
look at why why does it matter that is

02:40:40,590 --> 02:40:44,920
that is doing a shallow comparison is

02:40:42,971 --> 02:40:47,860
that here when you do much state two

02:40:44,920 --> 02:40:50,351
props sometimes the probes that you want

02:40:47,860 --> 02:40:52,601
to return maybe is not exactly the state

02:40:50,351 --> 02:40:54,971
inside it you want to do some

02:40:52,601 --> 02:40:56,950
some recomputation calculation fiiiing

02:40:54,971 --> 02:40:58,090
reduce or whatever and since you are

02:40:56,950 --> 02:41:00,580
doing maybe a new array

02:40:58,090 --> 02:41:02,740
he will always send you back a new

02:41:00,580 --> 02:41:04,030
reference of this sorry so it means it

02:41:02,740 --> 02:41:06,280
doesn't matter that he compared the two

02:41:04,030 --> 02:41:07,900
deuce even even in the state to do and

02:41:06,280 --> 02:41:10,330
the state visible filter doesn't change

02:41:07,900 --> 02:41:12,311
because of this function you are going

02:41:10,330 --> 02:41:14,320
to return the new reference so the

02:41:12,311 --> 02:41:15,641
previous to do reference and the new

02:41:14,320 --> 02:41:17,440
reference calculated by this function

02:41:15,641 --> 02:41:19,210
will be different so even though the

02:41:17,440 --> 02:41:20,620
content can be the same because we

02:41:19,210 --> 02:41:24,580
didn't change it to do or the visible

02:41:20,620 --> 02:41:26,141
filter it will recalc it will or maybe

02:41:24,580 --> 02:41:28,721
we change it but the calculation

02:41:26,141 --> 02:41:29,801
returned the same content it will still

02:41:28,721 --> 02:41:32,820
rear under everything

02:41:29,801 --> 02:41:35,891
so there's another tool called reselect

02:41:32,820 --> 02:41:38,170
let allow you to improve this editor so

02:41:35,891 --> 02:41:41,500
what does wrestle I do the difference

02:41:38,170 --> 02:41:46,061
you can see here now my get visible to

02:41:41,500 --> 02:41:48,460
do instead of simply sending back a new

02:41:46,061 --> 02:41:50,920
reference we are going to use a create

02:41:48,460 --> 02:41:52,931
select off from reselect okay so this

02:41:50,920 --> 02:41:54,940
great selector what is going to do is

02:41:52,931 --> 02:41:56,980
going to to take in parameter some

02:41:54,940 --> 02:42:01,570
selectors which are these two function

02:41:56,980 --> 02:42:03,431
and if the selectors see that the state

02:42:01,570 --> 02:42:05,980
inside that we are using didn't change

02:42:03,431 --> 02:42:08,261
he will return the previous result so

02:42:05,980 --> 02:42:09,730
kind of the create select all cache the

02:42:08,261 --> 02:42:11,891
previous props the reference to the

02:42:09,730 --> 02:42:14,170
preview props and we write on it if you

02:42:11,891 --> 02:42:16,420
see that what you are trying to to use

02:42:14,170 --> 02:42:17,980
as you fold your calculation here didn't

02:42:16,420 --> 02:42:20,980
change so the same is a shallow

02:42:17,980 --> 02:42:22,540
comparison but at another level okay if

02:42:20,980 --> 02:42:24,221
a behind below you change it

02:42:22,540 --> 02:42:26,950
what is comparing is used the visible

02:42:24,221 --> 02:42:29,230
filter okay the the reference but this

02:42:26,950 --> 02:42:31,240
allow you to improve also this this off

02:42:29,230 --> 02:42:32,771
the first program that now you know

02:42:31,240 --> 02:42:34,511
every time is going to return the

02:42:32,771 --> 02:42:37,330
different reference now in case the

02:42:34,511 --> 02:42:38,801
content of the state didn't change he's

02:42:37,330 --> 02:42:40,570
going to send it is not going to do this

02:42:38,801 --> 02:42:43,690
calculation he's going to send you back

02:42:40,570 --> 02:42:46,090
the previous reference okay so if you if

02:42:43,690 --> 02:42:47,530
you really need to optimize you up then

02:42:46,090 --> 02:42:49,271
you can think about this one as a part

02:42:47,530 --> 02:42:51,221
of your radix way of building the

02:42:49,271 --> 02:42:52,870
application let's say you don't need to

02:42:51,221 --> 02:42:55,210
think it from the start because maybe

02:42:52,870 --> 02:42:58,030
there's no optimization to do and this

02:42:55,210 --> 02:42:59,351
could be heavy to implement so but once

02:42:58,030 --> 02:43:00,641
you have some assured and you can start

02:42:59,351 --> 02:43:03,460
to think about if this can help you

02:43:00,641 --> 02:43:05,021
instead of having to do a some manual

02:43:03,460 --> 02:43:06,461
trick to make sure we return the same

02:43:05,021 --> 02:43:09,700
reference this could be useful

02:43:06,461 --> 02:43:11,561
okay so in summary for decision what I

02:43:09,700 --> 02:43:13,181
show you is the prediction bill don't

02:43:11,561 --> 02:43:16,301
forget that there's two built-in react

02:43:13,181 --> 02:43:18,280
second thing which shows we look at some

02:43:16,301 --> 02:43:21,251
tools using Chrome and the react

02:43:18,280 --> 02:43:23,051
developer extension in chrome okay to

02:43:21,251 --> 02:43:24,940
show this Flamm graph and to also have

02:43:23,051 --> 02:43:26,801
this highlight of your component life

02:43:24,940 --> 02:43:29,190
then we speak about how that's true

02:43:26,801 --> 02:43:31,811
component update with the virtual Dom

02:43:29,190 --> 02:43:34,721
recalculation and comparison the pure

02:43:31,811 --> 02:43:37,091
component that is doing a kind of easy

02:43:34,721 --> 02:43:39,521
way for you to compare the props and the

02:43:37,091 --> 02:43:40,690
Redax that is doing it for you if you

02:43:39,521 --> 02:43:42,461
already that you don't need to care

02:43:40,690 --> 02:43:43,780
about tor component and should component

02:43:42,461 --> 02:43:45,971
update if you are linking the correct

02:43:43,780 --> 02:43:47,291
state we took with your component the

02:43:45,971 --> 02:43:49,181
correct slice of the state we show

02:43:47,291 --> 02:43:51,371
component don't forget that is shallow

02:43:49,181 --> 02:43:54,431
compression so immutability is very

02:43:51,371 --> 02:43:56,561
important for this to work okay and I

02:43:54,431 --> 02:43:58,541
present it some library like recompose

02:43:56,561 --> 02:44:00,070
we select you have other library that

02:43:58,541 --> 02:44:01,331
could help you from optimization I

02:44:00,070 --> 02:44:03,070
didn't speak about this one why should

02:44:01,331 --> 02:44:05,021
you update forever is also linked to

02:44:03,070 --> 02:44:07,150
reduce and we'll console.log a lot of

02:44:05,021 --> 02:44:08,650
thing to suggest you you are rerun the

02:44:07,150 --> 02:44:10,421
ring something but the property don't

02:44:08,650 --> 02:44:13,480
change okay so you can play with this

02:44:10,421 --> 02:44:15,011
tool also if you want by yourself okay

02:44:13,480 --> 02:44:18,641
so I think that's all for this session I

02:44:15,011 --> 02:44:21,041
hope it was interesting so I think your

02:44:18,641 --> 02:44:22,690
team all the team thank you for for

02:44:21,041 --> 02:44:26,051
coming here before you leave we have

02:44:22,690 --> 02:44:27,161
some tea shop okay but maybe we can take

02:44:26,051 --> 02:44:32,490
some questions I think we have some time

02:44:27,161 --> 02:44:32,490
right yeah so we still have 10 minutes

02:44:33,841 --> 02:44:39,990
anyone has any question about the one of

02:44:36,671 --> 02:44:39,990
the three workshop about the

02:44:41,820 --> 02:44:45,150
one question

02:44:47,590 --> 02:45:09,229
yes yeah using Redux so far so far you

02:45:06,829 --> 02:45:11,420
know on the project we are using your

02:45:09,229 --> 02:45:13,040
lot with ducks okay me because it follow

02:45:11,420 --> 02:45:16,579
us to do all this optimization and we

02:45:13,040 --> 02:45:18,170
are it's quite macho I didn't know we

02:45:16,579 --> 02:45:19,790
didn't play with Mobe X or the state

02:45:18,170 --> 02:45:23,000
management so I will not say which one

02:45:19,790 --> 02:45:24,710
is the best but the red X is quite it's

02:45:23,000 --> 02:45:27,619
quite famous and also is using the

02:45:24,710 --> 02:45:29,210
concept conflicts so that's why this is

02:45:27,619 --> 02:45:31,430
why it become a very streamlined and

02:45:29,210 --> 02:45:33,380
it's really dude it's really doing the

02:45:31,430 --> 02:45:35,449
job that we need but I cannot tell you

02:45:33,380 --> 02:45:36,649
about the other or the framework because

02:45:35,449 --> 02:45:47,090
we don't play it to tell you if it's

02:45:36,649 --> 02:45:49,989
what are the pros and cons I was very

02:45:47,090 --> 02:45:49,989
interesting how you

02:45:53,640 --> 02:45:59,189
you know I was I was thinking we would

02:45:56,249 --> 02:46:01,529
have to keep this onion in Redux with

02:45:59,189 --> 02:46:04,079
that seems messenger in the Redux store

02:46:01,529 --> 02:46:07,590
but that seems wrong so I like your way

02:46:04,079 --> 02:46:09,569
problem we have is our login doesn't

02:46:07,590 --> 02:46:15,569
create we don't have the socket when we

02:46:09,569 --> 02:46:17,159
set up the store so in that case I was

02:46:15,569 --> 02:46:27,689
thinking I could just past an empty

02:46:17,159 --> 02:46:29,999
object to the same reason can you repeat

02:46:27,689 --> 02:46:34,310
the part when you say that when Redux

02:46:29,999 --> 02:46:37,619
have no strong something in it yet so we

02:46:34,310 --> 02:46:39,989
we don't have the sockets when we first

02:46:37,619 --> 02:46:41,609
set up the store okay we haven't created

02:46:39,989 --> 02:46:44,369
it it's only when they hit the login

02:46:41,609 --> 02:46:47,539
button that we create a socket no

02:46:44,369 --> 02:46:51,060
actually when we apply the middleware so

02:46:47,539 --> 02:46:53,129
so when the when the application load

02:46:51,060 --> 02:46:55,020
the JavaScript actually ran the part

02:46:53,129 --> 02:47:04,159
where we initialize the cockatrice

02:46:55,020 --> 02:47:06,810
object oh okay okay later but can I just

02:47:04,159 --> 02:47:09,810
can I just pass an empty object to the

02:47:06,810 --> 02:47:15,779
middleware and then the socket into the

02:47:09,810 --> 02:47:17,879
object later I think it depends on how

02:47:15,779 --> 02:47:19,470
we how do you want to do it because the

02:47:17,879 --> 02:47:21,629
thing on the socket is that you want to

02:47:19,470 --> 02:47:24,300
listen to the events right so if you're

02:47:21,629 --> 02:47:26,159
passing like an empty object when the

02:47:24,300 --> 02:47:29,249
application load the socket is not

02:47:26,159 --> 02:47:31,409
initialized here at all so if any event

02:47:29,249 --> 02:47:33,510
is coming in your you can you can you

02:47:31,409 --> 02:47:36,270
can't execute anything because the

02:47:33,510 --> 02:47:40,499
socket then and the object that you're

02:47:36,270 --> 02:47:42,810
passing in so the way to do it is to

02:47:40,499 --> 02:47:45,930
find somewhere when your application

02:47:42,810 --> 02:47:47,789
loads or before prior to when you need

02:47:45,930 --> 02:47:50,129
your socket connection you have to

02:47:47,789 --> 02:47:53,310
initialize the socket object and of

02:47:50,129 --> 02:47:56,870
course listen to the wavers event that

02:47:53,310 --> 02:48:05,630
you are listening to yeah

02:47:56,870 --> 02:48:09,710
thank you yep that's one questions is

02:48:05,630 --> 02:48:12,290
still say if there's a state that'll

02:48:09,710 --> 02:48:17,710
trigger of multiple actions how would

02:48:12,290 --> 02:48:17,710
you like trivia tea actions is I tried

02:48:18,189 --> 02:48:29,420
and my googling tells me how to use a

02:48:23,630 --> 02:48:34,280
batch action measure like and why can't

02:48:29,420 --> 02:48:38,950
we use in the loop okay so when you want

02:48:34,280 --> 02:48:42,859
to dispatch multiple actions so that's

02:48:38,950 --> 02:48:44,870
in Vedas AK right the one that we use he

02:48:42,859 --> 02:48:47,109
actually happy if you look at the

02:48:44,870 --> 02:48:49,729
documentation there's actually one

02:48:47,109 --> 02:48:51,740
function that allows you to dispatch

02:48:49,729 --> 02:48:55,250
we should mention that's right to

02:48:51,740 --> 02:48:57,530
dispatch multiple actions we are not

02:48:55,250 --> 02:48:59,420
doing that but what we are doing is

02:48:57,530 --> 02:49:00,830
instead of dispatching multi-position

02:48:59,420 --> 02:49:03,260
because normally when dispatch multiple

02:49:00,830 --> 02:49:05,120
actions it could be you want to clear

02:49:03,260 --> 02:49:07,040
this you want to stop this loader you

02:49:05,120 --> 02:49:09,109
want to do that thing so what we are

02:49:07,040 --> 02:49:11,210
doing if you look at our reducer which

02:49:09,109 --> 02:49:13,160
we have right we have a pipe function

02:49:11,210 --> 02:49:16,310
right so we are actually piping to a

02:49:13,160 --> 02:49:18,830
different set of mutaters so we are

02:49:16,310 --> 02:49:21,740
actually only using one action that is

02:49:18,830 --> 02:49:26,030
like doing a series of things in there

02:49:21,740 --> 02:49:28,490
so the good thing is that if you

02:49:26,030 --> 02:49:30,500
dispatch like multiple actions you all

02:49:28,490 --> 02:49:33,890
read your application might render a few

02:49:30,500 --> 02:49:35,750
times right so that might be some create

02:49:33,890 --> 02:49:38,450
office performance so what we are doing

02:49:35,750 --> 02:49:41,300
is one action is dispatch where every

02:49:38,450 --> 02:49:42,859
mutaters change the state but the state

02:49:41,300 --> 02:49:44,540
that we are changing we are not

02:49:42,859 --> 02:49:46,939
returning it to the video so yes so it

02:49:44,540 --> 02:49:49,790
doesn t vendors app so the the state

02:49:46,939 --> 02:49:52,070
from one mutator to the neck right for

02:49:49,790 --> 02:49:52,670
example here you can see we add a new

02:49:52,070 --> 02:49:56,120
message

02:49:52,670 --> 02:49:58,070
it changes the state the current state

02:49:56,120 --> 02:49:59,720
pass to the next state convention it

02:49:58,070 --> 02:50:02,300
does something to it and pass through

02:49:59,720 --> 02:50:04,880
the one and do it and so now we have a

02:50:02,300 --> 02:50:06,890
new state has been modified by audit

02:50:04,880 --> 02:50:08,870
mutaters and i will return it to the

02:50:06,890 --> 02:50:10,370
video sir and so there's a few changes

02:50:08,870 --> 02:50:23,600
there but

02:50:10,370 --> 02:50:29,270
we went at one time yeah okay

02:50:23,600 --> 02:50:32,270
any more questions okay thank you very

02:50:29,270 --> 02:50:36,950
much for coming hope you enjoyed we have

02:50:32,270 --> 02:50:40,220
t-shirts I think we have any t-shirts

02:50:36,950 --> 02:50:47,960
but I don't know what sizes so please

02:50:40,220 --> 02:50:50,479
come over and collect your t-shirts now

02:50:47,960 --> 02:50:52,720
or you can yeah we'll distribute it you

02:50:50,479 --> 02:50:52,720
guys

02:50:54,850 --> 02:50:57,559

YouTube URL: https://www.youtube.com/watch?v=5WyOtacc8Xs


