Title: Shazron Abdullah: Serverless Apps With Node.JS In Openwhisk And Adobe I O Runtime - JSConf.Asia 2018
Publication date: 2018-02-07
Playlist: JSConf.Asia 2018
Description: 
	Serverless computing is a powerful way for JavaScript developers to create backend services that can power a variety of experiences from the browser to IoT devices. At Adobe, we are embracing serverless as a way to enable our developer ecosystem to easily create experience applications that extend our solutions. We’re building this platform, Adobe I/O Runtime, on top of an open source project, Apache OpenWhisk. In this talk you’ll learn about Apache OpenWhisk, what kinds of use cases are good for serverless, and how to use build serverless applications using NodeJS. Using Adobe I/O Runtime, you’ll see how to deploy code as serverless functions, how event-driven architecture can be a powerful compliment for serverless, how to build more complex applications by combining multiple functions, and how to expose your functions as APIs so they can be used across multiple experiences. You’ll walk away with a clear picture of where it makes sense to use serverless computing and how to get started.

Based in San Francisco, by way of Vancouver, Canada and Singapore, Shaz has nearly two decades of software development experience getting with the nitty gritty of Windows, OS X and iOS and probably helped code something you know. Currently he is on the Adobe I/O team and also helps maintain the iOS platform of Apache Cordova + Adobe PhoneGap and has been part of that project for quite some time.


JSConf.Asia - Capitol Theatre, Singapore - 25 January 2018

Source: https://2018.jsconf.asia/

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:00,180 --> 00:00:02,370
[Music]

00:00:13,580 --> 00:00:26,330
everybody I'm with Adobe I Oh quick show

00:00:21,810 --> 00:00:26,330
of hands who hasn't heard of service

00:00:26,420 --> 00:00:37,079
just a few who is a vegan or vegetarian

00:00:31,250 --> 00:00:39,930
here I'll have to apologize in advance

00:00:37,079 --> 00:00:45,629
because I'll be showing some some things

00:00:39,930 --> 00:00:48,239
might be upsetting so my talk is about

00:00:45,629 --> 00:00:53,430
Apache open whisk it's a service

00:00:48,239 --> 00:00:57,570
platform also known as FAS which is

00:00:53,430 --> 00:01:03,000
functions as a service forgive the corny

00:00:57,570 --> 00:01:05,580
pun Who am I I'm part of the Adobe io

00:01:03,000 --> 00:01:08,640
team and I'm a longtime PhoneGap in

00:01:05,580 --> 00:01:10,680
Apache Cordova contributor you can find

00:01:08,640 --> 00:01:18,030
me at twitter or email me directly if

00:01:10,680 --> 00:01:23,040
you have questions after this so the

00:01:18,030 --> 00:01:25,740
major server server providers i'm just

00:01:23,040 --> 00:01:29,700
showcasing four of them here for my

00:01:25,740 --> 00:01:32,610
presentations purposes are I like farms

00:01:29,700 --> 00:01:35,549
right when you you provision a server is

00:01:32,610 --> 00:01:37,560
like buying a whole cow at the end of

00:01:35,549 --> 00:01:41,790
the month you get a new cow no matter

00:01:37,560 --> 00:01:43,729
what so no matter what if you don't like

00:01:41,790 --> 00:01:48,030
the steak or you don't even wanna meet

00:01:43,729 --> 00:01:49,439
it's still still wasteful so where the

00:01:48,030 --> 00:01:53,369
weather's function says the server's

00:01:49,439 --> 00:01:58,469
coming so function says service

00:01:53,369 --> 00:02:01,700
landscape right now consists of mainly

00:01:58,469 --> 00:02:04,770
Amazon because they're bigger gherla

00:02:01,700 --> 00:02:09,330
Microsoft Azure has your functions and

00:02:04,770 --> 00:02:13,110
Google platform has their club functions

00:02:09,330 --> 00:02:17,500
and at the top there you'll see two

00:02:13,110 --> 00:02:19,900
to serverless platforms based on open

00:02:17,500 --> 00:02:22,690
Wisc open with the logo on the right

00:02:19,900 --> 00:02:30,640
Adobe IO and IBM cloud functions are

00:02:22,690 --> 00:02:33,370
based on open risk here's the quick

00:02:30,640 --> 00:02:36,520
table about what these serverless

00:02:33,370 --> 00:02:41,860
platforms languages they cover as you

00:02:36,520 --> 00:02:43,660
can see open Wisc supports the most but

00:02:41,860 --> 00:02:48,310
it's an illusion because their market

00:02:43,660 --> 00:02:50,739
share is not as big as Amazon so would

00:02:48,310 --> 00:02:54,100
the one big thing about open risk is it

00:02:50,739 --> 00:02:57,970
can support any compiled language such

00:02:54,100 --> 00:03:01,930
as go or C or even rust in a docker

00:02:57,970 --> 00:03:06,640
container and they can run it as you can

00:03:01,930 --> 00:03:09,100
see here docker is in gray which is for

00:03:06,640 --> 00:03:13,030
go so it's not a first-class support but

00:03:09,100 --> 00:03:17,859
true a docker container Google only

00:03:13,030 --> 00:03:22,480
scores note for now and as your only

00:03:17,859 --> 00:03:26,079
supports a few this list is current as

00:03:22,480 --> 00:03:29,670
of a few days ago so maybe Amazonas

00:03:26,079 --> 00:03:36,940
supports something new there right so

00:03:29,670 --> 00:03:39,549
what I'm talking about is sausages so

00:03:36,940 --> 00:03:40,959
you don't care what where all the meat

00:03:39,549 --> 00:03:42,760
comes from you care about a sausage

00:03:40,959 --> 00:03:45,730
that's essentially what server list is

00:03:42,760 --> 00:03:49,780
it's not a perfect metaphor but I work

00:03:45,730 --> 00:03:51,519
with me so you pay money you get what

00:03:49,780 --> 00:03:53,290
you want sausages you don't care about

00:03:51,519 --> 00:03:56,910
other parts of the meat are wasted all

00:03:53,290 --> 00:04:00,280
that waste becomes sausage so I mean

00:03:56,910 --> 00:04:05,319
that's a metaphor I'm going for so as

00:04:00,280 --> 00:04:07,239
you probably see how Amazon does lambda

00:04:05,319 --> 00:04:09,780
Google does lambda but you don't know

00:04:07,239 --> 00:04:14,019
how the sausage is made

00:04:09,780 --> 00:04:19,120
I'm gonna go into a little bit of how

00:04:14,019 --> 00:04:24,640
open waste works so a little bit of

00:04:19,120 --> 00:04:27,120
trivia about open risk it was code named

00:04:24,640 --> 00:04:32,560
Wisc from IBM research

00:04:27,120 --> 00:04:36,490
but why whisk whisk is being moved

00:04:32,560 --> 00:04:38,680
nimbly and quickly and the code runs

00:04:36,490 --> 00:04:42,340
quickly and guest gets whisked away

00:04:38,680 --> 00:04:45,189
that's essentially what surrealist says

00:04:42,340 --> 00:04:47,830
in the open west context it runs a

00:04:45,189 --> 00:04:51,520
docker container and it quickly goes

00:04:47,830 --> 00:04:55,330
away and also it was chosen for an easy

00:04:51,520 --> 00:04:59,409
three letter CLI and of course open

00:04:55,330 --> 00:05:04,389
means open source and open risk so let's

00:04:59,409 --> 00:05:05,620
see the what open waste is made of so as

00:05:04,389 --> 00:05:08,379
you can see there's a lot of open source

00:05:05,620 --> 00:05:12,069
technologies concerned that open risk

00:05:08,379 --> 00:05:15,759
consists of nginx which in simple terms

00:05:12,069 --> 00:05:19,060
is just a web server Kafka simple terms

00:05:15,759 --> 00:05:22,180
message queue cache Libby as a database

00:05:19,060 --> 00:05:29,259
and docker is a container the docker

00:05:22,180 --> 00:05:32,560
container let me go back so you see the

00:05:29,259 --> 00:05:38,680
top right there's that the golang mascot

00:05:32,560 --> 00:05:42,279
and skaila people developers develop in

00:05:38,680 --> 00:05:44,289
Scylla to implement a lot of

00:05:42,279 --> 00:05:48,099
functionality and open whisk and the

00:05:44,289 --> 00:05:53,349
goal part is the go CL the risk CLI is

00:05:48,099 --> 00:05:55,029
implemented and go so if any of you are

00:05:53,349 --> 00:05:57,909
proficient in any of these technologies

00:05:55,029 --> 00:06:00,819
I welcome you to contribute to the open

00:05:57,909 --> 00:06:03,819
source project so who are the

00:06:00,819 --> 00:06:08,349
contributors to open whisk the biggest

00:06:03,819 --> 00:06:12,639
four are of course IBM who who donated

00:06:08,349 --> 00:06:14,469
project to Apache and the project is not

00:06:12,639 --> 00:06:17,919
a top-level project yet but it's in

00:06:14,469 --> 00:06:18,430
incubation and of course the Bilby who I

00:06:17,919 --> 00:06:22,150
work for

00:06:18,430 --> 00:06:24,129
and Red Hat and Samsung to a limited

00:06:22,150 --> 00:06:27,120
part and a lot of other independent

00:06:24,129 --> 00:06:27,120
consultants

00:06:29,530 --> 00:06:34,050
so open within a nutshell let's describe

00:06:32,200 --> 00:06:37,020
how it works

00:06:34,050 --> 00:06:39,970
take for example an invent that comes in

00:06:37,020 --> 00:06:42,880
so you see in the top left for example

00:06:39,970 --> 00:06:45,160
from a device like a rain sensor the

00:06:42,880 --> 00:06:50,170
invent source which is a rain sensor

00:06:45,160 --> 00:06:52,540
we'll call a trigger the trigger is for

00:06:50,170 --> 00:06:55,420
example it's called you know rain is

00:06:52,540 --> 00:06:58,120
falling which is associated to a rule

00:06:55,420 --> 00:07:02,770
which is a one-to-one mapping between a

00:06:58,120 --> 00:07:05,740
trigger and a rule but each rule maps to

00:07:02,770 --> 00:07:07,930
multiple actions so the action could be

00:07:05,740 --> 00:07:10,120
logging rainfall for example and each

00:07:07,930 --> 00:07:14,250
layer is designed to scale independently

00:07:10,120 --> 00:07:14,250
and that's open within a nutshell

00:07:14,550 --> 00:07:21,280
so what are the benefits of the open

00:07:17,140 --> 00:07:24,760
whisk this is not just specific to open

00:07:21,280 --> 00:07:27,550
waste but to functions and as a service

00:07:24,760 --> 00:07:31,860
in general the first thing is to pay as

00:07:27,550 --> 00:07:34,840
you go so you pay only for what you use

00:07:31,860 --> 00:07:39,070
efficient use of resources for both for

00:07:34,840 --> 00:07:40,300
you and the vendor elasticity auto

00:07:39,070 --> 00:07:46,180
scaling you don't have to worry about

00:07:40,300 --> 00:07:47,680
spinning more servers heterogeneous

00:07:46,180 --> 00:07:49,840
development so your team can use

00:07:47,680 --> 00:07:54,490
multiple languages and skill sets so you

00:07:49,840 --> 00:07:56,250
don't have to get for example someone

00:07:54,490 --> 00:08:00,040
that knows that certain language only

00:07:56,250 --> 00:08:04,390
for example open with support swift so

00:08:00,040 --> 00:08:07,440
if your team is heavy and iOS Swift they

00:08:04,390 --> 00:08:10,690
can do service it's with an open risk

00:08:07,440 --> 00:08:12,640
and one of the biggest things is

00:08:10,690 --> 00:08:13,450
on-premise deployment and testing

00:08:12,640 --> 00:08:16,660
offline

00:08:13,450 --> 00:08:18,490
so you don't have to have it hosted by

00:08:16,660 --> 00:08:23,410
Amazon you can host it in your own data

00:08:18,490 --> 00:08:25,210
center and also one of the big things is

00:08:23,410 --> 00:08:28,030
you can chain actions without extra

00:08:25,210 --> 00:08:30,790
coding so you from inputs and outputs

00:08:28,030 --> 00:08:32,140
for each action you can chain them

00:08:30,790 --> 00:08:36,060
together through the command line to

00:08:32,140 --> 00:08:36,060
link them without writing any extra code

00:08:36,300 --> 00:08:41,260
you can chain actions for example if

00:08:38,950 --> 00:08:44,020
action one does a video upload

00:08:41,260 --> 00:08:46,690
input is some video data and output is a

00:08:44,020 --> 00:08:49,480
URL the second action will get your URL

00:08:46,690 --> 00:08:56,320
and it will output analysis for example

00:08:49,480 --> 00:08:58,900
for machine learning learning and

00:08:56,320 --> 00:09:00,880
finally the biggest thing that I care

00:08:58,900 --> 00:09:07,270
about is it's open source and there's no

00:09:00,880 --> 00:09:10,540
vendor lock-in there's a quick start of

00:09:07,270 --> 00:09:12,730
how does you run open risk that's a QR

00:09:10,540 --> 00:09:15,730
code if you want to go to it's not

00:09:12,730 --> 00:09:23,860
particularly quick for you to run it but

00:09:15,730 --> 00:09:27,010
uh so James Thomas from IBM wrote a blog

00:09:23,860 --> 00:09:32,230
post how to run open ways quickly so

00:09:27,010 --> 00:09:34,300
first you gotta install doctor and then

00:09:32,230 --> 00:09:36,220
you run this make file and it will

00:09:34,300 --> 00:09:42,760
install everything that you saw there

00:09:36,220 --> 00:09:45,640
there I did I show you nginx Kafka and

00:09:42,760 --> 00:09:47,560
everything so once you run it you use a

00:09:45,640 --> 00:09:52,500
make file again to control it stop and

00:09:47,560 --> 00:09:54,790
run so after you've done the open wisk

00:09:52,500 --> 00:09:59,680
QuickStart you can run the open waste

00:09:54,790 --> 00:10:03,400
workshop it's a simple npm install as

00:09:59,680 --> 00:10:06,070
you can see it covers all the features

00:10:03,400 --> 00:10:08,710
of open risk that will take you a few

00:10:06,070 --> 00:10:14,710
hours which we don't have time to cover

00:10:08,710 --> 00:10:18,010
today so i'm gonna show you how to

00:10:14,710 --> 00:10:21,370
create an action quickly since i'm not

00:10:18,010 --> 00:10:24,790
gonna be doing a demo so the open way

00:10:21,370 --> 00:10:27,010
CLI is called wsk so it's a simple wrist

00:10:24,790 --> 00:10:32,200
action create action name

00:10:27,010 --> 00:10:35,320
that's your javascript file and update

00:10:32,200 --> 00:10:38,710
and finally an invoke and invoke you

00:10:35,320 --> 00:10:42,880
pass parameters to it and you receive

00:10:38,710 --> 00:10:47,860
something back and standard out so that

00:10:42,880 --> 00:10:49,120
just creates the action on your local

00:10:47,860 --> 00:10:52,360
server but you want to expose it to the

00:10:49,120 --> 00:10:54,880
web so how do you do that create a

00:10:52,360 --> 00:10:59,080
package and you do to see the same

00:10:54,880 --> 00:11:03,900
a method but you pass a path and some

00:10:59,080 --> 00:11:07,060
some parameters and annotation web true

00:11:03,900 --> 00:11:10,770
so and once you create that you press

00:11:07,060 --> 00:11:16,870
get and - - URL and you'll get that URL

00:11:10,770 --> 00:11:18,910
that is exposed to external users so

00:11:16,870 --> 00:11:22,930
what's in an action file if you've done

00:11:18,910 --> 00:11:25,420
C or Java you know there's a main

00:11:22,930 --> 00:11:27,940
function that's called as the main part

00:11:25,420 --> 00:11:31,360
of your program is the same in your

00:11:27,940 --> 00:11:34,600
JavaScript for open risk so the main

00:11:31,360 --> 00:11:40,510
main function takes prompt parameter

00:11:34,600 --> 00:11:43,140
object and you can use that and when you

00:11:40,510 --> 00:11:49,300
return from the web action the main

00:11:43,140 --> 00:11:51,310
important part is the body and the

00:11:49,300 --> 00:11:54,880
params also contain metadata for the

00:11:51,310 --> 00:11:58,420
running task so if you're doing an

00:11:54,880 --> 00:12:01,180
action file what about NPM packages if

00:11:58,420 --> 00:12:04,390
you've done any aw slap in your it WS

00:12:01,180 --> 00:12:06,160
lambda you'll you'll know that you npm

00:12:04,390 --> 00:12:08,530
install your package with your action

00:12:06,160 --> 00:12:11,070
code and you zip the whole folder up and

00:12:08,530 --> 00:12:13,780
upload the zip instead of action j s

00:12:11,070 --> 00:12:16,000
however for native code and PM packages

00:12:13,780 --> 00:12:18,400
you have to npm install to a docker

00:12:16,000 --> 00:12:21,220
container that's the same environment as

00:12:18,400 --> 00:12:23,530
your server aslam runtime so they can it

00:12:21,220 --> 00:12:27,220
can get the same same architecture

00:12:23,530 --> 00:12:30,730
before you upload it and open waste as a

00:12:27,220 --> 00:12:34,840
48 Meg upload limit but there's this

00:12:30,730 --> 00:12:37,090
workarounds available that you can do

00:12:34,840 --> 00:12:39,880
where you can package your NPM packages

00:12:37,090 --> 00:12:42,460
in a docker container that your server

00:12:39,880 --> 00:12:48,250
can reference so what you work around

00:12:42,460 --> 00:12:50,110
that for you my limit so you've you've

00:12:48,250 --> 00:12:54,930
defined all your actions and how do you

00:12:50,110 --> 00:12:54,930
deploy it right so open with recently

00:12:56,550 --> 00:13:03,339
helped contribute to a plugin to the

00:12:59,610 --> 00:13:07,360
serverless framework Cerberus framework

00:13:03,339 --> 00:13:08,230
is a not affiliated with open ways it's

00:13:07,360 --> 00:13:11,440
an in-depth

00:13:08,230 --> 00:13:14,560
project and it helps people abstract the

00:13:11,440 --> 00:13:17,590
deployment to all the different server

00:13:14,560 --> 00:13:19,960
list platforms I encourage you to check

00:13:17,590 --> 00:13:24,930
it out so you can use that to deploy to

00:13:19,960 --> 00:13:28,960
open whisk or lambda or a Google or zero

00:13:24,930 --> 00:13:32,320
so final part I want to talk about it

00:13:28,960 --> 00:13:36,610
maybe I'll run time WI writing time is

00:13:32,320 --> 00:13:37,960
based on open whisk it's just like IBM

00:13:36,610 --> 00:13:41,680
platform since it's based on open waste

00:13:37,960 --> 00:13:44,170
like the way PhoneGap or ionic is based

00:13:41,680 --> 00:13:47,380
on Apache Cordova like a browser has its

00:13:44,170 --> 00:13:50,110
engine so I don't we have you run times

00:13:47,380 --> 00:13:54,010
engine is open whisk it's built on open

00:13:50,110 --> 00:13:55,810
waste and it uses the same tools it

00:13:54,010 --> 00:13:59,860
helps our internal themes leverage

00:13:55,810 --> 00:14:03,910
server lists to other functions within

00:13:59,860 --> 00:14:05,710
the enterprise unless our customers and

00:14:03,910 --> 00:14:07,660
devs extend and build interesting things

00:14:05,710 --> 00:14:09,790
based on our data because we have a lot

00:14:07,660 --> 00:14:11,890
of data adobe is known for their

00:14:09,790 --> 00:14:17,770
creative products but we were also known

00:14:11,890 --> 00:14:19,630
for our analytics and marketing cloud so

00:14:17,770 --> 00:14:22,360
it's pre integrated with the way io

00:14:19,630 --> 00:14:24,760
events an api gateway and you will have

00:14:22,360 --> 00:14:27,310
the easy and your access to all adobe

00:14:24,760 --> 00:14:30,760
api's if you go to Adobe that I you will

00:14:27,310 --> 00:14:36,940
see all the API is available to all

00:14:30,760 --> 00:14:39,760
users finally thank you thank you to

00:14:36,940 --> 00:14:41,440
everyone for listening to the desktop

00:14:39,760 --> 00:14:43,190
it's a quick server your own server list

00:14:41,440 --> 00:14:49,829
thank you

00:14:43,190 --> 00:14:49,829

YouTube URL: https://www.youtube.com/watch?v=ne6YvKWbQYg


