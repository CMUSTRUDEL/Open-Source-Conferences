Title: Feross Aboukhadijeh: Write Perfect Code With Standard And ESLint - JSConf.Asia 2018
Publication date: 2018-02-09
Playlist: JSConf.Asia 2018
Description: 
	In this talk, you'll learn about code linting â€“ how to use Standard and ESLint to catch programmer errors before they cause problems for your users. We'll discuss how to get started with linting, as well as how to improve your setup if you're already linting your code. Feross will also share the secret history of how the Standard linter was created, for the first time ever in a conference talk.

Feross is a mad scientist who enjoys building software that makes people say "Wow, I didn't know that was possible!". Since graduating from Stanford in 2012, he's worked on PeerCDN and maintains several popular open source projects including WebTorrent and Standard. He's currently working on a new website for Node.js documentation.


JSConf.Asia - Capitol Theatre, Singapore - 25 January 2018

Source: https://2018.jsconf.asia/

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:00,180 --> 00:00:12,370
[Music]

00:00:13,320 --> 00:00:18,119
so in this talks you'll learn how to

00:00:15,150 --> 00:00:22,360
write perfect code so just install

00:00:18,119 --> 00:00:26,660
standard and that's it thank you

00:00:22,360 --> 00:00:28,380
[Applause]

00:00:26,660 --> 00:00:30,510
of course I'm kidding

00:00:28,380 --> 00:00:33,960
so I will be talking about how to use

00:00:30,510 --> 00:00:36,210
standard NDS lint to catch programmer

00:00:33,960 --> 00:00:37,190
errors before they cause problems for

00:00:36,210 --> 00:00:39,390
your users

00:00:37,190 --> 00:00:43,190
we'll discuss how to get started with

00:00:39,390 --> 00:00:46,590
linting as well as how to improve

00:00:43,190 --> 00:00:50,670
the setup of your linter if you already

00:00:46,590 --> 00:00:53,550
have one in your codebase so i'm for us

00:00:50,670 --> 00:00:55,710
i work on lots of projects most of them

00:00:53,550 --> 00:00:58,640
are open source and you might have heard

00:00:55,710 --> 00:01:01,980
of web torrent a torn app that works in

00:00:58,640 --> 00:01:03,390
the browser on the web or maybe standard

00:01:01,980 --> 00:01:08,369
jeaious which will be discussed in this

00:01:03,390 --> 00:01:11,010
talk and i spoke it jaesik on asia

00:01:08,369 --> 00:01:12,360
actually about web torn in 2014 so i'm

00:01:11,010 --> 00:01:15,409
really honored to be back here speaking

00:01:12,360 --> 00:01:18,150
about standard this year so thank you so

00:01:15,409 --> 00:01:20,549
if you know me you know I never wear a

00:01:18,150 --> 00:01:22,290
suit but since standard is all about

00:01:20,549 --> 00:01:25,610
writing pretty code code that's

00:01:22,290 --> 00:01:27,720
enterprise approved and you know all

00:01:25,610 --> 00:01:29,280
dressed up for business I figured

00:01:27,720 --> 00:01:33,950
there's no better time to try wearing a

00:01:29,280 --> 00:01:37,710
suit so what do you guys think thank you

00:01:33,950 --> 00:01:41,820
okay so let's start what's a winter so a

00:01:37,710 --> 00:01:43,950
linter catches bugs it analyzes source

00:01:41,820 --> 00:01:46,259
code to flag bugs and suspicious

00:01:43,950 --> 00:01:48,329
constructs so suspicious constructs

00:01:46,259 --> 00:01:51,509
meaning things that you know maybe bugs

00:01:48,329 --> 00:01:53,250
but aren't necessarily bugs the term

00:01:51,509 --> 00:01:58,920
lint comes from a UNIX utility that

00:01:53,250 --> 00:02:02,840
examined C code we still use it today so

00:01:58,920 --> 00:02:05,430
what's a bug when your code doesn't work

00:02:02,840 --> 00:02:07,710
but that's pretty broad right so we

00:02:05,430 --> 00:02:10,410
should try to be more specific about the

00:02:07,710 --> 00:02:11,819
cause of code not working that way we

00:02:10,410 --> 00:02:12,790
can think about how to address the true

00:02:11,819 --> 00:02:16,480
cause of the bug

00:02:12,790 --> 00:02:20,859
in our code so let's look at the word

00:02:16,480 --> 00:02:23,379
bug as commonly used by programmers some

00:02:20,859 --> 00:02:26,980
people say bug is an old term for a

00:02:23,379 --> 00:02:29,379
monster you can see this meaning still

00:02:26,980 --> 00:02:33,400
used in obscure terms like bug bear

00:02:29,379 --> 00:02:37,299
Bugaboo or even boogeyman which is I

00:02:33,400 --> 00:02:38,319
guess still sort of related to bug but

00:02:37,299 --> 00:02:39,790
there's actually a better story for

00:02:38,319 --> 00:02:45,370
where the term bug comes from maybe

00:02:39,790 --> 00:02:47,560
you've heard it already in 1947 the US

00:02:45,370 --> 00:02:50,470
Navy used this electromechanical

00:02:47,560 --> 00:02:53,739
computer really big computer called the

00:02:50,470 --> 00:02:56,109
mark to to perform computations and one

00:02:53,739 --> 00:02:57,819
day they were getting wrong results so

00:02:56,109 --> 00:03:00,430
to fix the problem they actually opened

00:02:57,819 --> 00:03:01,950
up the computer and found a moth stuck

00:03:00,430 --> 00:03:05,739
inside which was causing the problem

00:03:01,950 --> 00:03:07,930
real story so the operators removed it

00:03:05,739 --> 00:03:09,879
and they they pinned it on the log

00:03:07,930 --> 00:03:11,349
report and they wrote the following

00:03:09,879 --> 00:03:15,870
description which you can see up here

00:03:11,349 --> 00:03:19,090
first actual case of bug being found

00:03:15,870 --> 00:03:21,819
so some versions of this story say that

00:03:19,090 --> 00:03:23,709
Grace Hopper herself actually found the

00:03:21,819 --> 00:03:27,250
bug and and then also coined the term

00:03:23,709 --> 00:03:29,530
debug at the exact same time so it's

00:03:27,250 --> 00:03:32,440
such a debug meant taking the bug out of

00:03:29,530 --> 00:03:34,569
the computer to get it working again so

00:03:32,440 --> 00:03:36,790
I like this story a lot it's a it's a

00:03:34,569 --> 00:03:38,560
great story but the thing is there's

00:03:36,790 --> 00:03:40,989
actually some evidence that Thomas

00:03:38,560 --> 00:03:43,959
Edison actually used the word word bug

00:03:40,989 --> 00:03:46,239
about 70 years before this story

00:03:43,959 --> 00:03:48,310
happened but the thing is it's such a

00:03:46,239 --> 00:03:50,169
good story that I think like it just

00:03:48,310 --> 00:03:53,709
always gets retold in conference talks

00:03:50,169 --> 00:03:55,720
like this one so I digress

00:03:53,709 --> 00:03:58,569
so anyway in both of these origins

00:03:55,720 --> 00:04:01,449
stories the one about you know bug being

00:03:58,569 --> 00:04:04,060
a monster that comes from outside into

00:04:01,449 --> 00:04:05,560
your into your code and you know takes

00:04:04,060 --> 00:04:08,500
otherwise perfectly working code and

00:04:05,560 --> 00:04:09,669
ruins it and then this this actual bug

00:04:08,500 --> 00:04:12,489
that goes in the computer and both of

00:04:09,669 --> 00:04:15,280
these stories the term bug is implying

00:04:12,489 --> 00:04:17,440
that a bug is an external force that

00:04:15,280 --> 00:04:20,019
that that messes up your code and the

00:04:17,440 --> 00:04:21,219
thing is this is just not true when's

00:04:20,019 --> 00:04:22,930
the last time that a bug in your code

00:04:21,219 --> 00:04:26,200
has actually been caused by hardware

00:04:22,930 --> 00:04:26,550
malfunction right there's a saying that

00:04:26,200 --> 00:04:28,620
goes

00:04:26,550 --> 00:04:31,379
you know if if you think you found a bug

00:04:28,620 --> 00:04:38,340
in the compiler you probably have an

00:04:31,379 --> 00:04:41,729
it's just a bug in your code right so

00:04:38,340 --> 00:04:45,780
the famed computer science a computer

00:04:41,729 --> 00:04:47,840
scientist Edsger Dijkstra once spoke

00:04:45,780 --> 00:04:50,610
about how he despised the term bug

00:04:47,840 --> 00:04:53,340
because he said it just it's disguises

00:04:50,610 --> 00:04:55,259
where bugs in software where software

00:04:53,340 --> 00:04:58,650
sorry where software defects actually

00:04:55,259 --> 00:05:00,900
come from he said that we could for

00:04:58,650 --> 00:05:03,840
instance begin with cleaning up our

00:05:00,900 --> 00:05:06,860
language by no longer calling a bug a

00:05:03,840 --> 00:05:09,330
bug but by calling it an error and

00:05:06,860 --> 00:05:10,909
that's much more honest because it

00:05:09,330 --> 00:05:13,169
squarely puts the blame where it belongs

00:05:10,909 --> 00:05:15,840
namely with the programmer who made the

00:05:13,169 --> 00:05:18,090
air the the animistic metaphor of the

00:05:15,840 --> 00:05:19,379
bug that maliciously sneaked in while

00:05:18,090 --> 00:05:21,659
the programmer was not looking is

00:05:19,379 --> 00:05:22,919
intellectually dishonest as it disguises

00:05:21,659 --> 00:05:28,919
that the error is the programmers own

00:05:22,919 --> 00:05:31,590
creation end quote ok Dijkstra so calm

00:05:28,919 --> 00:05:33,449
down a lot of a lot of Dijkstra's talks

00:05:31,590 --> 00:05:35,340
and writings can often sound like an old

00:05:33,449 --> 00:05:38,370
man yelling at a cloud he's a very

00:05:35,340 --> 00:05:40,229
grumpy person but I think he's actually

00:05:38,370 --> 00:05:45,360
right about this this terminology

00:05:40,229 --> 00:05:46,919
confusion so back to yes lint so so what

00:05:45,360 --> 00:05:48,630
is the point of a linter the point of a

00:05:46,919 --> 00:05:52,919
linter and the point of the eslint is to

00:05:48,630 --> 00:05:55,139
catch programmer errors so let's let's

00:05:52,919 --> 00:05:58,620
dive into the the history of linters and

00:05:55,139 --> 00:06:01,139
j/s really quickly so jslint was the

00:05:58,620 --> 00:06:06,000
original winter it was created by

00:06:01,139 --> 00:06:09,479
Douglas Crockford in 2002 that's 16

00:06:06,000 --> 00:06:12,090
years ago which in I guess in JavaScript

00:06:09,479 --> 00:06:15,509
years that's like a hundred years or

00:06:12,090 --> 00:06:18,029
something so so then then Gia's hints

00:06:15,509 --> 00:06:19,560
came out in 2010 and that was basically

00:06:18,029 --> 00:06:20,279
designed to offer a little more

00:06:19,560 --> 00:06:23,610
configurability

00:06:20,279 --> 00:06:25,229
and added a few more rules finally we

00:06:23,610 --> 00:06:28,590
have es lint which came out in 2013 and

00:06:25,229 --> 00:06:30,779
that offered better es6 support more

00:06:28,590 --> 00:06:33,750
rules that specifically rules about a

00:06:30,779 --> 00:06:35,279
code style so that's like punctuation

00:06:33,750 --> 00:06:37,529
and things like that that don't have

00:06:35,279 --> 00:06:39,719
anything to do with correctness as well

00:06:37,529 --> 00:06:40,139
as a flexible plug-in system that let

00:06:39,719 --> 00:06:44,219
develop

00:06:40,139 --> 00:06:46,889
make their own style rules so these

00:06:44,219 --> 00:06:50,039
three categories of things are what what

00:06:46,889 --> 00:06:52,610
es Lynch x4 so the first is the most

00:06:50,039 --> 00:06:55,289
important the first is programmer errors

00:06:52,610 --> 00:06:58,830
so programmer errors are a correctness

00:06:55,289 --> 00:07:00,419
issue they they happen when the they

00:06:58,830 --> 00:07:02,219
basically cause the program to do the

00:07:00,419 --> 00:07:04,199
wrong thing we never want these in our

00:07:02,219 --> 00:07:08,610
program there's there's they're never

00:07:04,199 --> 00:07:12,539
okay basically now best practices these

00:07:08,610 --> 00:07:14,430
are about avoiding confusing code that

00:07:12,539 --> 00:07:18,509
they're about avoiding patterns that

00:07:14,430 --> 00:07:20,729
lead to that often lead to errors so

00:07:18,509 --> 00:07:23,520
it's possible for code to be correct but

00:07:20,729 --> 00:07:26,550
still be very confusing and and so so

00:07:23,520 --> 00:07:27,719
when you when you check for best

00:07:26,550 --> 00:07:30,449
practices what you're doing is you're

00:07:27,719 --> 00:07:32,759
it's about minimizing the risk and and

00:07:30,449 --> 00:07:34,439
also helping with clarity so that

00:07:32,759 --> 00:07:37,310
programmers that come along later can

00:07:34,439 --> 00:07:40,499
quickly understand what's going on and

00:07:37,310 --> 00:07:42,960
lastly we have style issues so these are

00:07:40,499 --> 00:07:47,759
about spacing punctuation how the code

00:07:42,960 --> 00:07:50,819
looks and you want a team to agree on

00:07:47,759 --> 00:07:54,389
like tabs or spaces for instance so the

00:07:50,819 --> 00:07:56,370
code looks consistent and so the the I

00:07:54,389 --> 00:07:57,930
guess the ultimate goal here is to to

00:07:56,370 --> 00:08:01,500
make an entire code base look like it

00:07:57,930 --> 00:08:02,460
was written by a single person so if you

00:08:01,500 --> 00:08:03,389
can get your entire code base to look

00:08:02,460 --> 00:08:08,520
like it was written by a single person

00:08:03,389 --> 00:08:11,099
that's that's easiest and best for for

00:08:08,520 --> 00:08:12,810
readability and and and you won't you

00:08:11,099 --> 00:08:14,669
won't get distracted by you know things

00:08:12,810 --> 00:08:16,589
that look at a place for example this is

00:08:14,669 --> 00:08:19,050
why we have copy editors and newspapers

00:08:16,589 --> 00:08:23,039
at least we used to before we went to

00:08:19,050 --> 00:08:24,689
online news okay so let's talk about the

00:08:23,039 --> 00:08:27,149
first and most important use of a winter

00:08:24,689 --> 00:08:29,279
catching programmer errors so you can

00:08:27,149 --> 00:08:32,519
obviously just like run your program and

00:08:29,279 --> 00:08:34,560
try to test all the cases at runtime and

00:08:32,519 --> 00:08:36,209
and you know that's what qada

00:08:34,560 --> 00:08:38,479
the point of QA is at the point of

00:08:36,209 --> 00:08:40,589
integration tests and even unit tests

00:08:38,479 --> 00:08:43,260
but a linter can help us catch these

00:08:40,589 --> 00:08:45,000
errors statically which means we should

00:08:43,260 --> 00:08:47,370
be shortening the feedback loop we don't

00:08:45,000 --> 00:08:49,199
need to run our test suite or or

00:08:47,370 --> 00:08:51,120
actually use our app and make sure we've

00:08:49,199 --> 00:08:54,250
exercised all the possible code paths in

00:08:51,120 --> 00:08:56,770
order to to catch an error so we can

00:08:54,250 --> 00:08:59,050
catch it immediately ideally directly in

00:08:56,770 --> 00:09:00,670
our editor so let's look at a few

00:08:59,050 --> 00:09:04,870
examples of the types of errors that can

00:09:00,670 --> 00:09:11,680
be detected okay so quick quiz do you

00:09:04,870 --> 00:09:14,610
see the bug in this code raise your hand

00:09:11,680 --> 00:09:17,320
if you see it okay

00:09:14,610 --> 00:09:18,880
not very many yeah it's tricky

00:09:17,320 --> 00:09:20,290
it's it's subtle basically what's going

00:09:18,880 --> 00:09:22,750
on is the for loop is going in the wrong

00:09:20,290 --> 00:09:25,150
direction the eye is being decremented

00:09:22,750 --> 00:09:26,500
with each iteration of the loop and so

00:09:25,150 --> 00:09:28,150
this will never terminate this is an

00:09:26,500 --> 00:09:29,470
infinite loop because it's going down

00:09:28,150 --> 00:09:32,650
and we're only going to stop when we get

00:09:29,470 --> 00:09:34,780
up to ten so this is a kind of bug that

00:09:32,650 --> 00:09:36,520
you know if it's in your code base and

00:09:34,780 --> 00:09:38,530
it's not exercised in your integration

00:09:36,520 --> 00:09:40,360
tests or by your by your you know your

00:09:38,530 --> 00:09:42,130
testing your manual testing you're going

00:09:40,360 --> 00:09:45,040
to miss it and you're only going to

00:09:42,130 --> 00:09:47,650
discover this when when this bug affects

00:09:45,040 --> 00:09:48,820
your users in production so a for loop

00:09:47,650 --> 00:09:51,970
with the stop condition that can never

00:09:48,820 --> 00:09:53,200
be reached such as this one just should

00:09:51,970 --> 00:09:55,000
never be in your codebase that's what

00:09:53,200 --> 00:09:56,620
that's what es lint is is an example of

00:09:55,000 --> 00:10:00,940
a rule that he has not will enforce for

00:09:56,620 --> 00:10:04,260
you here's another one this is another

00:10:00,940 --> 00:10:06,339
useful one so this is this is a

00:10:04,260 --> 00:10:08,820
assignment that's actually happening

00:10:06,339 --> 00:10:11,080
inside this conditional so it's actually

00:10:08,820 --> 00:10:13,330
going to always be a truthy value or

00:10:11,080 --> 00:10:15,970
actually not comparing the string to the

00:10:13,330 --> 00:10:17,589
to the property here it's actually a

00:10:15,970 --> 00:10:19,630
signing manager manager string to the

00:10:17,589 --> 00:10:20,830
property and then returning the value of

00:10:19,630 --> 00:10:21,820
that whole expression is the string

00:10:20,830 --> 00:10:24,550
manager so it's always gonna be true

00:10:21,820 --> 00:10:27,700
the-- so this is easy mistake to make

00:10:24,550 --> 00:10:30,520
but it's very easy for a linter to

00:10:27,700 --> 00:10:33,190
detect so this is another example

00:10:30,520 --> 00:10:35,680
something that you'll get saved by feeis

00:10:33,190 --> 00:10:38,170
lint let's do a few more so here's

00:10:35,680 --> 00:10:42,370
another one um this one here is this is

00:10:38,170 --> 00:10:43,390
actually this is an example of really

00:10:42,370 --> 00:10:45,130
something that probably should have just

00:10:43,390 --> 00:10:48,250
been like a syntax error in the language

00:10:45,130 --> 00:10:49,990
honestly having having parameters to a

00:10:48,250 --> 00:10:52,930
function that are named exactly the same

00:10:49,990 --> 00:10:55,990
like that's so silly that that's all

00:10:52,930 --> 00:10:58,120
hard but but it is and so what actually

00:10:55,990 --> 00:11:00,100
happens is the second parameter that

00:10:58,120 --> 00:11:02,950
will actually take will actually shadow

00:11:00,100 --> 00:11:04,649
the preceding one and so this this is

00:11:02,950 --> 00:11:05,759
probably like a typo and

00:11:04,649 --> 00:11:08,430
practice is probably typos in your

00:11:05,759 --> 00:11:11,149
codebase or like something that happened

00:11:08,430 --> 00:11:13,110
by accident while refactoring and so

00:11:11,149 --> 00:11:16,939
this will just you know yes some will

00:11:13,110 --> 00:11:20,040
just catch this for you here's one more

00:11:16,939 --> 00:11:25,079
so this rule enforces comparing type of

00:11:20,040 --> 00:11:26,879
to valid string literals so type of can

00:11:25,079 --> 00:11:29,339
only return one of like five or six

00:11:26,879 --> 00:11:30,899
strings so let's just make sure that

00:11:29,339 --> 00:11:32,249
every where we're using type of we're

00:11:30,899 --> 00:11:33,749
comparing it to one of those five or six

00:11:32,249 --> 00:11:36,860
strings if we compare it to any other

00:11:33,749 --> 00:11:40,170
string than those five or six then we're

00:11:36,860 --> 00:11:46,199
it's always gonna be false so it's an

00:11:40,170 --> 00:11:47,850
error this one's kind of subtle so if

00:11:46,199 --> 00:11:49,920
you actually have a reg X in your code

00:11:47,850 --> 00:11:51,809
base that uses the literal the reg X

00:11:49,920 --> 00:11:53,790
literal syntax that's the one with the

00:11:51,809 --> 00:11:56,670
slashes where you put your X between the

00:11:53,790 --> 00:11:59,819
two slashes that one is actually parsed

00:11:56,670 --> 00:12:01,199
and if you have an invalid reg X that

00:11:59,819 --> 00:12:03,720
will be caught and it'll be a syntax

00:12:01,199 --> 00:12:05,129
error but if you have one that's a

00:12:03,720 --> 00:12:07,350
string and you're doing Arreaga click

00:12:05,129 --> 00:12:09,059
this then then this is going to be

00:12:07,350 --> 00:12:11,790
caught at runtime only when this code

00:12:09,059 --> 00:12:14,029
code path is executed but we can catch

00:12:11,790 --> 00:12:15,959
this with the winter

00:12:14,029 --> 00:12:18,120
okay so there's dozens more of these

00:12:15,959 --> 00:12:20,129
they're all great things to check in

00:12:18,120 --> 00:12:20,999
your code and you can you can get them

00:12:20,129 --> 00:12:23,550
all but I'm not going to go over them

00:12:20,999 --> 00:12:25,019
all obviously okay so let's let's take a

00:12:23,550 --> 00:12:26,370
break from talking about the examples of

00:12:25,019 --> 00:12:29,429
things that can be caught and let's talk

00:12:26,370 --> 00:12:30,839
about how you actually use es lines

00:12:29,429 --> 00:12:35,939
because you obviously want to use it now

00:12:30,839 --> 00:12:37,529
right so you make an es on our C file

00:12:35,939 --> 00:12:40,370
and add it to your code base this is

00:12:37,529 --> 00:12:43,279
actually the one that standard uses it's

00:12:40,370 --> 00:12:46,889
over 200 lines long

00:12:43,279 --> 00:12:49,350
so yes the config files can be really

00:12:46,889 --> 00:12:50,970
long they're often really long and if

00:12:49,350 --> 00:12:53,759
you don't want to decide on each of

00:12:50,970 --> 00:12:55,850
these rules one at a time you can extend

00:12:53,759 --> 00:12:58,529
what's what's called a shareable config

00:12:55,850 --> 00:13:00,600
c by extending a shareable config that

00:12:58,529 --> 00:13:03,929
gets you a bunch of rules that you can

00:13:00,600 --> 00:13:07,879
inherit by default so in this case we're

00:13:03,929 --> 00:13:10,079
inheriting from the standard rule set

00:13:07,879 --> 00:13:12,209
there's a few other alternatives you can

00:13:10,079 --> 00:13:13,649
look at there's one by Airbnb that's

00:13:12,209 --> 00:13:15,389
really popular and there's another one

00:13:13,649 --> 00:13:17,309
by Google that's quite popular as well

00:13:15,389 --> 00:13:18,270
it doesn't matter which one you choose

00:13:17,309 --> 00:13:23,310
just pick one

00:13:18,270 --> 00:13:25,110
and stick with it one thing I'll say

00:13:23,310 --> 00:13:26,280
though is if you use an ESL into our C

00:13:25,110 --> 00:13:29,430
file in your codebase

00:13:26,280 --> 00:13:31,650
beware of rule overrides so one

00:13:29,430 --> 00:13:34,920
disadvantage to using this file is that

00:13:31,650 --> 00:13:38,310
anyone can go in and override the rules

00:13:34,920 --> 00:13:42,900
by just adding a new line to this rules

00:13:38,310 --> 00:13:44,640
array here and that's where standard

00:13:42,900 --> 00:13:48,900
comes in so so and this is where

00:13:44,640 --> 00:13:51,090
standard really shines so it's it's more

00:13:48,900 --> 00:13:53,220
than a shareable config it's actually an

00:13:51,090 --> 00:13:56,010
entire command line program that you

00:13:53,220 --> 00:13:57,420
install and then you run directly and it

00:13:56,010 --> 00:14:00,330
comes with the more than 200

00:13:57,420 --> 00:14:01,860
pre-configured you slunt rules but the

00:14:00,330 --> 00:14:04,560
thing is it bundles them up into a

00:14:01,860 --> 00:14:07,890
single command that you can just run or

00:14:04,560 --> 00:14:10,590
that you can add to your test suite so

00:14:07,890 --> 00:14:11,940
this is how you would use it and I think

00:14:10,590 --> 00:14:13,680
it's the easiest way to add a linter to

00:14:11,940 --> 00:14:15,750
your project because there's no need to

00:14:13,680 --> 00:14:17,160
setup any config files there's no need

00:14:15,750 --> 00:14:20,370
to decide on which rules you're going to

00:14:17,160 --> 00:14:21,630
use you just install it and then you run

00:14:20,370 --> 00:14:25,260
it and then it tells you whether your

00:14:21,630 --> 00:14:27,480
code passes or not you can also add - -

00:14:25,260 --> 00:14:29,250
fix and it will try to fix any errors

00:14:27,480 --> 00:14:31,920
that it sees so for example this error

00:14:29,250 --> 00:14:33,180
here with the triple equals can be a can

00:14:31,920 --> 00:14:37,980
be actually fixed automatically in some

00:14:33,180 --> 00:14:39,660
cases which is really nice so standard

00:14:37,980 --> 00:14:41,340
has a vibrant community it's downloaded

00:14:39,660 --> 00:14:43,230
a million times per month and there's

00:14:41,340 --> 00:14:45,510
editor plug-ins for every major editor

00:14:43,230 --> 00:14:47,310
and it's also built into the webstorm

00:14:45,510 --> 00:14:51,210
editor by default and you can go into

00:14:47,310 --> 00:14:52,170
preferences to turn it on so I don't

00:14:51,210 --> 00:14:56,370
want to make this too much of a sales

00:14:52,170 --> 00:14:58,470
pitch but I will say that oh yeah this

00:14:56,370 --> 00:15:01,110
is just how to how to add it as a dev

00:14:58,470 --> 00:15:04,200
dependency you can you can then just add

00:15:01,110 --> 00:15:05,640
standard to your test script and prepend

00:15:04,200 --> 00:15:07,340
it to whatever your normal node tests

00:15:05,640 --> 00:15:10,710
are and there's nothing to configure but

00:15:07,340 --> 00:15:12,780
the point is that you should probably be

00:15:10,710 --> 00:15:14,070
using you know yes lint or standard or

00:15:12,780 --> 00:15:17,070
something like this in your code and you

00:15:14,070 --> 00:15:18,240
probably already are but I guess I want

00:15:17,070 --> 00:15:19,350
to go into a little bit about sort of

00:15:18,240 --> 00:15:22,200
the choices and the trade-offs for

00:15:19,350 --> 00:15:24,330
thinking about what to what to use so

00:15:22,200 --> 00:15:28,710
using the eslint directly is a totally

00:15:24,330 --> 00:15:30,990
valid choice and it's it's

00:15:28,710 --> 00:15:32,760
it's something that some of the projects

00:15:30,990 --> 00:15:34,110
I've worked on do but there's just a few

00:15:32,760 --> 00:15:37,620
gotchas that you should be aware of if

00:15:34,110 --> 00:15:40,890
you do this so the first one is bike

00:15:37,620 --> 00:15:44,820
shedding so some teammates will propose

00:15:40,890 --> 00:15:47,610
rule changes to suit their own personal

00:15:44,820 --> 00:15:49,470
coding style and now your team has to

00:15:47,610 --> 00:15:52,290
debate the pros and the cons of like

00:15:49,470 --> 00:15:54,420
tabs or spaces or whatever in your issue

00:15:52,290 --> 00:15:57,030
tracker so this can take like days or

00:15:54,420 --> 00:15:59,850
weeks and the thing is like the less

00:15:57,030 --> 00:16:01,320
important topic is the more like the

00:15:59,850 --> 00:16:05,040
more subjective it is the the more

00:16:01,320 --> 00:16:08,400
opinions people have and it's so easy to

00:16:05,040 --> 00:16:09,990
have an opinion when when when the the

00:16:08,400 --> 00:16:11,880
issue is like insignificant it doesn't

00:16:09,990 --> 00:16:13,260
matter and this is why you know the

00:16:11,880 --> 00:16:14,790
example of bike shedding is the color

00:16:13,260 --> 00:16:16,050
everyone has an opinion about what color

00:16:14,790 --> 00:16:17,970
we should paint the bike shed but no one

00:16:16,050 --> 00:16:20,580
has an opinion about like you know let's

00:16:17,970 --> 00:16:23,100
say the like shape of the bike shed or

00:16:20,580 --> 00:16:24,720
like how how how to architect it so that

00:16:23,100 --> 00:16:26,820
doesn't fall over that stuff's harder

00:16:24,720 --> 00:16:27,960
and and and so only the experts can

00:16:26,820 --> 00:16:29,940
actually participate in that part of the

00:16:27,960 --> 00:16:32,610
discussion but the more trivial the

00:16:29,940 --> 00:16:35,370
issues the more like everyone just wants

00:16:32,610 --> 00:16:37,260
to wants to like debate it and talk

00:16:35,370 --> 00:16:38,490
about the pros and the cons so these

00:16:37,260 --> 00:16:40,560
kinds of things can suck up a lot of

00:16:38,490 --> 00:16:43,050
time for a little to no benefit so

00:16:40,560 --> 00:16:45,210
really when it comes to these decisions

00:16:43,050 --> 00:16:46,860
stainer just picks something and then

00:16:45,210 --> 00:16:48,420
you know if it's a tries to be

00:16:46,860 --> 00:16:50,700
reasonable and just pick something and

00:16:48,420 --> 00:16:52,650
then you can move on

00:16:50,700 --> 00:16:55,530
so when debates happen they happen on

00:16:52,650 --> 00:16:57,300
the standard issue tracker and me and

00:16:55,530 --> 00:16:58,560
all the other contributors we do the

00:16:57,300 --> 00:17:02,640
bike shedding so that your team doesn't

00:16:58,560 --> 00:17:04,589
have to anyway if you want to use the

00:17:02,640 --> 00:17:06,450
eslint directly that's fine just be

00:17:04,589 --> 00:17:08,190
aware that some teammates on your team

00:17:06,450 --> 00:17:09,570
may mean we try to change it they might

00:17:08,190 --> 00:17:12,180
try to debate the rules they may

00:17:09,570 --> 00:17:13,170
actually was just talking to Tim Tim

00:17:12,180 --> 00:17:14,970
earlier and he was telling me that

00:17:13,170 --> 00:17:16,230
someone on his I guess what if it was

00:17:14,970 --> 00:17:20,450
his team I don't want to call it anybody

00:17:16,230 --> 00:17:23,720
but someone that he knows frequently

00:17:20,450 --> 00:17:27,000
well in their poll requests actually add

00:17:23,720 --> 00:17:28,980
like an es lint change to the rules to

00:17:27,000 --> 00:17:30,810
get the the pro requests to pass and

00:17:28,980 --> 00:17:31,860
they'll sneak it in inside of a huge

00:17:30,810 --> 00:17:33,900
polar quest with a bunch of other

00:17:31,860 --> 00:17:36,090
unrelated changes and that's their way

00:17:33,900 --> 00:17:37,530
of avoiding actually convincing their

00:17:36,090 --> 00:17:39,570
teammates to make the change they just

00:17:37,530 --> 00:17:41,200
kind of sneak it in like that so maybe

00:17:39,570 --> 00:17:43,929
you know someone who does that

00:17:41,200 --> 00:17:45,940
um so really you want to lock down the

00:17:43,929 --> 00:17:52,450
file and make it like much harder or

00:17:45,940 --> 00:17:56,380
impossible to change it one other thing

00:17:52,450 --> 00:17:59,019
beware of duplication so checking the is

00:17:56,380 --> 00:18:00,370
lint RC file into every repository that

00:17:59,019 --> 00:18:02,289
your team manages can lead to

00:18:00,370 --> 00:18:04,809
maintenance headaches to keep them all

00:18:02,289 --> 00:18:07,899
in sync so you you want to think about

00:18:04,809 --> 00:18:09,519
how to solve this you can put the es

00:18:07,899 --> 00:18:11,049
lint file into its own package that's

00:18:09,519 --> 00:18:12,970
one solution there's another one I'll

00:18:11,049 --> 00:18:17,769
talk about at the end of this talk - you

00:18:12,970 --> 00:18:21,070
can use okay so we we said there's three

00:18:17,769 --> 00:18:23,679
reasons why you would use a linter let's

00:18:21,070 --> 00:18:25,480
talk just quickly about a few of the

00:18:23,679 --> 00:18:26,559
best practices types of rules that es

00:18:25,480 --> 00:18:29,019
lint has because we've already talked

00:18:26,559 --> 00:18:31,840
about the first the first one programmer

00:18:29,019 --> 00:18:34,149
errors so remember best practices were

00:18:31,840 --> 00:18:35,620
about avoiding confusing code patterns

00:18:34,149 --> 00:18:37,389
that like often lead to errors but

00:18:35,620 --> 00:18:38,860
they're not necessarily like the code

00:18:37,389 --> 00:18:42,460
can be technically correct but still be

00:18:38,860 --> 00:18:45,730
terrible so here's another quiz for you

00:18:42,460 --> 00:18:46,389
guys which are what do these expressions

00:18:45,730 --> 00:18:49,360
up here these three expressions

00:18:46,389 --> 00:18:55,779
evaluates to think about it very

00:18:49,360 --> 00:18:58,750
carefully yeah so this is all or

00:18:55,779 --> 00:19:01,779
probably should just be never written in

00:18:58,750 --> 00:19:02,950
any code base the answer it who thinks

00:19:01,779 --> 00:19:04,570
they have an answer actually I'm curious

00:19:02,950 --> 00:19:07,830
raise your hand if you think you have an

00:19:04,570 --> 00:19:14,260
answer I can't see anyone their hand up

00:19:07,830 --> 00:19:17,919
Wow okay so they're all true makes sense

00:19:14,260 --> 00:19:19,960
right so what there's a whole talk

00:19:17,919 --> 00:19:22,029
filled with examples of stuff like this

00:19:19,960 --> 00:19:24,399
in JavaScript the the lesson of that

00:19:22,029 --> 00:19:25,570
talk was or to me was don't just don't

00:19:24,399 --> 00:19:27,490
try to memorize the rules they don't

00:19:25,570 --> 00:19:30,909
make sense they're pointless to remember

00:19:27,490 --> 00:19:33,580
use a linter and use rules that try to

00:19:30,909 --> 00:19:36,850
make it harder to to own yourself like

00:19:33,580 --> 00:19:39,279
this just here's an example use require

00:19:36,850 --> 00:19:43,000
trip require triple equals and you'll

00:19:39,279 --> 00:19:44,279
never run into this issue oh and that's

00:19:43,000 --> 00:19:45,970
because that's because triple equals

00:19:44,279 --> 00:19:47,350
enforces that the types that you're

00:19:45,970 --> 00:19:50,679
comparing are the same in addition to

00:19:47,350 --> 00:19:52,000
their set values being the same but I

00:19:50,679 --> 00:19:53,169
want to say one thing so standard tries

00:19:52,000 --> 00:19:54,880
to help you write good code but it

00:19:53,169 --> 00:19:57,120
doesn't want to get in the way of being

00:19:54,880 --> 00:20:00,130
- you just want to be too pedantic and

00:19:57,120 --> 00:20:02,290
and be annoying to use so it the focus

00:20:00,130 --> 00:20:03,400
is on preventing like actual errors so

00:20:02,290 --> 00:20:05,830
if you want to use like the double

00:20:03,400 --> 00:20:07,450
equals null shorthand to test whether a

00:20:05,830 --> 00:20:08,980
variable is null or undefined that's

00:20:07,450 --> 00:20:10,450
fine standard doesn't treat it as an

00:20:08,980 --> 00:20:14,770
error because it's a comment JavaScript

00:20:10,450 --> 00:20:17,470
idiom all right this is is actually C

00:20:14,770 --> 00:20:20,200
code but you should should still be able

00:20:17,470 --> 00:20:29,650
to figure it out do you see the

00:20:20,200 --> 00:20:31,810
programmer error in this yeah so this

00:20:29,650 --> 00:20:35,470
actually comes from Apple's SSL

00:20:31,810 --> 00:20:38,680
implementation and this was in the news

00:20:35,470 --> 00:20:40,060
I think like a few years ago and this is

00:20:38,680 --> 00:20:43,450
the reason why you should never omit

00:20:40,060 --> 00:20:44,890
curly braces if you have multiple if if

00:20:43,450 --> 00:20:47,860
statements that that go onto multiple

00:20:44,890 --> 00:20:51,160
lines so if you see like right there

00:20:47,860 --> 00:20:54,460
there's to go to fails this was called

00:20:51,160 --> 00:20:57,340
the go-to fail bug which is great

00:20:54,460 --> 00:20:59,230
because it was quite a fail it led to

00:20:57,340 --> 00:21:01,960
basically SSL not even working correctly

00:20:59,230 --> 00:21:03,850
and you could get men in the middle by

00:21:01,960 --> 00:21:07,030
like anyone who is running the Wi-Fi

00:21:03,850 --> 00:21:08,650
network you were on really bad bug so

00:21:07,030 --> 00:21:09,880
this is yeah this is the other part that

00:21:08,650 --> 00:21:11,020
was the problem so what's actually

00:21:09,880 --> 00:21:12,940
happening is this codes being

00:21:11,020 --> 00:21:15,340
interpreted like this so even though

00:21:12,940 --> 00:21:17,020
they're the two are indented like the

00:21:15,340 --> 00:21:19,180
only the first expression after an if

00:21:17,020 --> 00:21:22,000
statement is gonna be part of the if

00:21:19,180 --> 00:21:22,990
body and so you have to use curly braces

00:21:22,000 --> 00:21:25,120
if you want to make more than one

00:21:22,990 --> 00:21:26,500
expression be part of the body so like

00:21:25,120 --> 00:21:29,200
you we can require curly brace

00:21:26,500 --> 00:21:33,240
conventions and prevent things like this

00:21:29,200 --> 00:21:33,240
from from getting into our our code base

00:21:33,360 --> 00:21:39,430
so this will like hopefully reduce bugs

00:21:36,400 --> 00:21:41,470
in your code but again standards

00:21:39,430 --> 00:21:42,910
pragmatic so it doesn't want to get in

00:21:41,470 --> 00:21:44,740
the way if there's a common community

00:21:42,910 --> 00:21:45,850
pattern that that doesn't introduce

00:21:44,740 --> 00:21:48,070
significant risk

00:21:45,850 --> 00:21:50,170
so omitting curly braces for single line

00:21:48,070 --> 00:21:51,850
if statements is allowed in standard so

00:21:50,170 --> 00:21:53,500
you can see the first line is it's

00:21:51,850 --> 00:21:55,510
pretty clear unlike little leads issues

00:21:53,500 --> 00:21:56,800
it's just when you when you when you put

00:21:55,510 --> 00:21:58,120
it on the next line without curly braces

00:21:56,800 --> 00:21:59,830
that's when it starts to get dangerous

00:21:58,120 --> 00:22:01,630
that's when you start to get this kind

00:21:59,830 --> 00:22:03,250
of thing where someone will come in and

00:22:01,630 --> 00:22:06,870
add a second go-to and think that it's

00:22:03,250 --> 00:22:06,870
some kind of work

00:22:07,430 --> 00:22:14,430
okay so just some final tips for before

00:22:11,400 --> 00:22:16,320
we conclude here so if you don't want to

00:22:14,430 --> 00:22:17,400
use standard that's fine if you want to

00:22:16,320 --> 00:22:19,020
use the Esalen directly because your

00:22:17,400 --> 00:22:20,490
team has its own style too much work to

00:22:19,020 --> 00:22:21,510
change blah blah blah that's that's

00:22:20,490 --> 00:22:23,400
great it's fine

00:22:21,510 --> 00:22:25,080
I just recommend one thing consider

00:22:23,400 --> 00:22:29,190
wrapping your excellent rules into a

00:22:25,080 --> 00:22:30,810
package and and that way all of your

00:22:29,190 --> 00:22:32,580
repositories can depend on that package

00:22:30,810 --> 00:22:34,920
and you also raise the barrier a little

00:22:32,580 --> 00:22:36,720
bit to having people just go in and

00:22:34,920 --> 00:22:37,920
change it whenever they want and you

00:22:36,720 --> 00:22:39,330
make it harder for there to be like

00:22:37,920 --> 00:22:42,600
waste of time and debates about style

00:22:39,330 --> 00:22:44,460
things also you consider providing a

00:22:42,600 --> 00:22:46,650
command line program so that you can

00:22:44,460 --> 00:22:49,710
just install it and add it directly to

00:22:46,650 --> 00:22:51,210
your to your npm tests script field and

00:22:49,710 --> 00:22:53,160
if you want to do that there's a really

00:22:51,210 --> 00:22:54,480
great package for this called standard

00:22:53,160 --> 00:22:56,880
engine this is what actually powers

00:22:54,480 --> 00:22:59,070
standard itself so a standard engine you

00:22:56,880 --> 00:23:01,320
just point it's here you slunt rules and

00:22:59,070 --> 00:23:02,880
then it will give you a binary like a

00:23:01,320 --> 00:23:05,250
command line program you can just run

00:23:02,880 --> 00:23:06,900
that'll that'll you know run the checker

00:23:05,250 --> 00:23:08,310
and it's not configurable at all so

00:23:06,900 --> 00:23:11,540
you've kind of encapsulated your rules

00:23:08,310 --> 00:23:13,560
and made them unconfigured

00:23:11,540 --> 00:23:15,870
and it's probably worth mentioning

00:23:13,560 --> 00:23:19,140
prettier here because prettier is gotten

00:23:15,870 --> 00:23:19,980
a lot more popular in the last year so

00:23:19,140 --> 00:23:23,280
what about prettier what do I think

00:23:19,980 --> 00:23:25,130
about prettier so prettier is great it

00:23:23,280 --> 00:23:28,110
formats your code to have a consistent

00:23:25,130 --> 00:23:30,360
style it's kind of like go formats but

00:23:28,110 --> 00:23:32,310
for JavaScript the thing is though that

00:23:30,360 --> 00:23:34,860
out of these three things that the es

00:23:32,310 --> 00:23:36,990
line checks for prettier is only

00:23:34,860 --> 00:23:40,380
handling the last one is handling style

00:23:36,990 --> 00:23:42,840
so it's not going to check for for

00:23:40,380 --> 00:23:44,760
potential bugs over for like actual bugs

00:23:42,840 --> 00:23:47,370
and your code it's just gonna it's gonna

00:23:44,760 --> 00:23:49,650
read in your code make an ast and then

00:23:47,370 --> 00:23:50,910
how to put your code and then you know

00:23:49,650 --> 00:23:52,860
it'll look nice so you still need a

00:23:50,910 --> 00:23:56,220
linter in my opinion and I think that's

00:23:52,860 --> 00:23:59,030
I think it's it's fine because prettier

00:23:56,220 --> 00:24:01,950
and and a eslint work great together

00:23:59,030 --> 00:24:03,270
cool so one last thing before I go I've

00:24:01,950 --> 00:24:05,370
been working full time on open source

00:24:03,270 --> 00:24:07,980
for the past three years but it's not

00:24:05,370 --> 00:24:10,500
sustainable so last month I launched a

00:24:07,980 --> 00:24:11,880
fundraising campaign on patreon so the

00:24:10,500 --> 00:24:13,680
goal is to get enough donations that I

00:24:11,880 --> 00:24:16,320
can continue to work on standard and the

00:24:13,680 --> 00:24:18,510
other 100 plus NPM packages that I

00:24:16,320 --> 00:24:19,350
maintain so at least for like a few days

00:24:18,510 --> 00:24:20,670
a week

00:24:19,350 --> 00:24:24,400
so if you like what I do consider

00:24:20,670 --> 00:24:26,360
becoming a supporter cool thank you

00:24:24,400 --> 00:24:30,090
[Applause]

00:24:26,360 --> 00:24:30,090

YouTube URL: https://www.youtube.com/watch?v=kuHfMw8j4xk


