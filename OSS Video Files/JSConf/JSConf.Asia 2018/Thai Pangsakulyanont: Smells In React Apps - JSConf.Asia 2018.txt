Title: Thai Pangsakulyanont: Smells In React Apps - JSConf.Asia 2018
Publication date: 2018-02-07
Playlist: JSConf.Asia 2018
Description: 
	Recognizing code smells is an important skill that helps you build maintainable software. This talk is about code and design smells in React applications, based on the experience working in a 2-year-old project with more than 900 components.

Thai is a front-end architect at Taskworld. Heâ€™s interested in the ways of building better software with better design, and helps organizing a React meetups in Bangkok. He likes to code and make music for fun. He also develops an open-source web-based rhythm game in his free time.


JSConf.Asia - Capitol Theatre, Singapore - 27 January 2018

Source: https://2018.jsconf.asia/

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:00,180 --> 00:00:12,370
[Music]

00:00:12,559 --> 00:00:20,310
so why'd you come good

00:00:17,250 --> 00:00:23,189
good afternoon everyone so this is my

00:00:20,310 --> 00:00:25,980
first time that I'm giving a talk like a

00:00:23,189 --> 00:00:27,480
fool and talked in a Tarascon like a

00:00:25,980 --> 00:00:32,250
conflict outside of Thailand

00:00:27,480 --> 00:00:35,630
so first I'm really grateful for the

00:00:32,250 --> 00:00:37,800
organizers to have invited me here and

00:00:35,630 --> 00:00:42,710
the past two days were really awesome

00:00:37,800 --> 00:00:47,640
and I'm really excited for today so

00:00:42,710 --> 00:00:51,960
let's begin so today I'm gonna talk

00:00:47,640 --> 00:00:54,780
about smells in react apps and if you

00:00:51,960 --> 00:00:57,239
talk about if if you talk about coach

00:00:54,780 --> 00:01:00,570
males there are several books that talk

00:00:57,239 --> 00:01:03,660
about coats mail and designs me as well

00:01:00,570 --> 00:01:06,240
but unfortunately I don't read many

00:01:03,660 --> 00:01:08,580
books so usually I read the articles on

00:01:06,240 --> 00:01:11,850
the internet and piece them together so

00:01:08,580 --> 00:01:18,210
these three books I haven't read them

00:01:11,850 --> 00:01:19,920
yet so the contents that I'm gonna be

00:01:18,210 --> 00:01:22,229
presenting today they are mainly based

00:01:19,920 --> 00:01:24,470
on my experience so maybe they are not

00:01:22,229 --> 00:01:27,330
perfectly aligned with those books and

00:01:24,470 --> 00:01:29,610
maybe I may use a different term with

00:01:27,330 --> 00:01:34,740
them but I really hope they will be

00:01:29,610 --> 00:01:40,220
useful to you so my name is ty and I

00:01:34,740 --> 00:01:44,150
come from Thailand and I'm a Thai person

00:01:40,220 --> 00:01:46,670
and this is my twitter ID so at DT ints

00:01:44,150 --> 00:01:49,160
so if you have any feedback about this

00:01:46,670 --> 00:01:52,580
talk so please tweet it to me I would

00:01:49,160 --> 00:01:56,480
really appreciate it you can also find

00:01:52,580 --> 00:02:01,070
me on github as well so with that say

00:01:56,480 --> 00:02:04,430
let's start so I really like to build

00:02:01,070 --> 00:02:08,119
software for fun it's just like team

00:02:04,430 --> 00:02:10,910
home and say in his previous previous

00:02:08,119 --> 00:02:13,240
talk so in my free time I really like to

00:02:10,910 --> 00:02:15,830
work on side projects so this is one

00:02:13,240 --> 00:02:17,000
this one is a web-based musical

00:02:15,830 --> 00:02:19,760
instruments and there are several

00:02:17,000 --> 00:02:23,270
instruments you can choose from I demo

00:02:19,760 --> 00:02:26,390
it in a Scottish year 2016 in a

00:02:23,270 --> 00:02:28,310
lightning talk and some other time I

00:02:26,390 --> 00:02:31,790
feel like doing something a bit silly so

00:02:28,310 --> 00:02:36,459
here I created Windows 2000 theme for

00:02:31,790 --> 00:02:38,930
autumn text editor the challenge here

00:02:36,459 --> 00:02:41,750
dimensionless here is to replicate the

00:02:38,930 --> 00:02:44,150
three-wheel in Windows in a

00:02:41,750 --> 00:02:48,860
picture-perfect way so you think just

00:02:44,150 --> 00:02:51,290
yes so this is really fun the other time

00:02:48,860 --> 00:02:53,390
you see I sometimes I want to play a

00:02:51,290 --> 00:02:56,239
music game like a DJ so I need a

00:02:53,390 --> 00:02:58,190
turntable so I put a dish and put a

00:02:56,239 --> 00:03:03,050
phone in a dish and let it send the

00:02:58,190 --> 00:03:05,720
gyroscope signal to the game so that's

00:03:03,050 --> 00:03:08,780
that's some of my projects so that you

00:03:05,720 --> 00:03:11,360
see it for me the fun part is really

00:03:08,780 --> 00:03:14,330
important because that makes coding a

00:03:11,360 --> 00:03:17,120
fulfilling thing to do and makes it feel

00:03:14,330 --> 00:03:20,989
good and when you could as a hobby it

00:03:17,120 --> 00:03:23,630
will be a hobby that can also improve my

00:03:20,989 --> 00:03:26,180
professional coding skills as well I'm

00:03:23,630 --> 00:03:28,790
also really interested in how to make

00:03:26,180 --> 00:03:30,950
software maintainable that's because in

00:03:28,790 --> 00:03:34,220
one of my old project about 10 years ago

00:03:30,950 --> 00:03:36,350
I put in a lot of effort developing it

00:03:34,220 --> 00:03:38,780
but at that time I didn't know about

00:03:36,350 --> 00:03:41,720
software engineering stuff so I keep on

00:03:38,780 --> 00:03:45,769
coding and coding and coding and over

00:03:41,720 --> 00:03:47,360
time it became less maintainable so that

00:03:45,769 --> 00:03:51,590
we have seven thousand lines of

00:03:47,360 --> 00:03:54,110
untestable code and at that point when I

00:03:51,590 --> 00:03:57,200
do something or fix something another

00:03:54,110 --> 00:04:01,130
appears you remember the last the last

00:03:57,200 --> 00:04:04,490
demo the buck simulator so now

00:04:01,130 --> 00:04:06,110
maintaining it it's not fun and later I

00:04:04,490 --> 00:04:07,760
learned about software engineering so I

00:04:06,110 --> 00:04:11,870
feel like I want to improve the code

00:04:07,760 --> 00:04:12,920
base and add the tests but I have seven

00:04:11,870 --> 00:04:15,910
thousand lines of

00:04:12,920 --> 00:04:19,970
untestable code so that's also not fun

00:04:15,910 --> 00:04:23,270
and as a side project I think it should

00:04:19,970 --> 00:04:26,180
be fun and not a burden and this a huge

00:04:23,270 --> 00:04:28,520
boring task so I start to feel that I'd

00:04:26,180 --> 00:04:31,040
rather do something else and so the

00:04:28,520 --> 00:04:34,670
development of that project stopped and

00:04:31,040 --> 00:04:35,770
that's sad because I spent years working

00:04:34,670 --> 00:04:37,690
on it

00:04:35,770 --> 00:04:40,520
so what I learned here is that

00:04:37,690 --> 00:04:43,250
sustainability really matters and so now

00:04:40,520 --> 00:04:44,510
when I work on a new project I have to

00:04:43,250 --> 00:04:47,480
make sure that it will not end up like

00:04:44,510 --> 00:04:50,420
that one that's why I'm really

00:04:47,480 --> 00:04:52,430
interested in this stuff and as you know

00:04:50,420 --> 00:04:55,130
there are so many contributing factors

00:04:52,430 --> 00:04:59,600
and so many techniques you can use to

00:04:55,130 --> 00:05:02,360
make a software maintainable so later in

00:04:59,600 --> 00:05:05,560
2014 I started working on a new project

00:05:02,360 --> 00:05:08,600
and it's called amuse it is a web-based

00:05:05,560 --> 00:05:12,290
open source music game using html5

00:05:08,600 --> 00:05:14,540
technologies and I have the game with me

00:05:12,290 --> 00:05:17,720
as well so if you wanna try a demo you

00:05:14,540 --> 00:05:20,360
can approach me and so I want to make it

00:05:17,720 --> 00:05:22,669
great I want people to play this game so

00:05:20,360 --> 00:05:27,230
I need to make sure that this project is

00:05:22,669 --> 00:05:30,110
maintainable so I organized my code into

00:05:27,230 --> 00:05:32,750
modules and use webpack to bundle them

00:05:30,110 --> 00:05:35,360
together I set up a fling to cache

00:05:32,750 --> 00:05:38,479
common errors and enforce a consistent

00:05:35,360 --> 00:05:40,760
coding style I set up unit testing

00:05:38,479 --> 00:05:44,810
continuous integration and deployment as

00:05:40,760 --> 00:05:47,210
well as I track my code coverage so that

00:05:44,810 --> 00:05:49,220
took me three weeks to setup I

00:05:47,210 --> 00:05:50,540
I just meant three weeks setting up the

00:05:49,220 --> 00:05:53,300
project without doing any game

00:05:50,540 --> 00:05:54,950
development and that sounds pretty long

00:05:53,300 --> 00:05:58,340
compared to other projects but the

00:05:54,950 --> 00:06:01,460
result is that it made a huge impact so

00:05:58,340 --> 00:06:03,470
the unit tests they helped me to switch

00:06:01,460 --> 00:06:05,979
from one library to the other without

00:06:03,470 --> 00:06:08,030
fear that I would break the game a

00:06:05,979 --> 00:06:10,570
decoupled architecture

00:06:08,030 --> 00:06:13,460
to try out different wheel libraries I

00:06:10,570 --> 00:06:16,580
tried two times without having to

00:06:13,460 --> 00:06:18,080
rewrite the whole app and putting

00:06:16,580 --> 00:06:19,880
implementation details behind an

00:06:18,080 --> 00:06:22,700
interface lets me switch to a new

00:06:19,880 --> 00:06:24,920
back-end service without having to make

00:06:22,700 --> 00:06:29,630
a sweeping change across the whole

00:06:24,920 --> 00:06:31,790
codebase also some features I can

00:06:29,630 --> 00:06:34,460
prototype it in one night so in that

00:06:31,790 --> 00:06:37,460
project I learned that a good codebase

00:06:34,460 --> 00:06:40,250
it's like a clean table so where I can

00:06:37,460 --> 00:06:43,520
experiment quickly and prototype new

00:06:40,250 --> 00:06:46,730
ideas right away without having to first

00:06:43,520 --> 00:06:47,140
move so many stuff that's getting in my

00:06:46,730 --> 00:06:50,480
way

00:06:47,140 --> 00:06:51,800
so after I implement the idea if the

00:06:50,480 --> 00:06:54,380
experiment was successful

00:06:51,800 --> 00:06:56,360
I try to refactor the code base to be

00:06:54,380 --> 00:06:59,630
clean again ready for more experiments

00:06:56,360 --> 00:07:01,490
to come in the future so I've been

00:06:59,630 --> 00:07:06,790
maintaining this for about three years

00:07:01,490 --> 00:07:10,010
now and I'm still maintaining it so now

00:07:06,790 --> 00:07:14,090
I'm working out front in architect at

00:07:10,010 --> 00:07:15,670
Tazewell and our app is using based on

00:07:14,090 --> 00:07:20,000
react and redux

00:07:15,670 --> 00:07:23,390
so we have many features I guess so this

00:07:20,000 --> 00:07:25,940
is our tree view and this is just the

00:07:23,390 --> 00:07:28,580
reader store and we have more than 900

00:07:25,940 --> 00:07:32,480
components and over two years more than

00:07:28,580 --> 00:07:35,600
20 engineers work on it so it is a

00:07:32,480 --> 00:07:38,150
challenge for us to keep innovating new

00:07:35,600 --> 00:07:40,190
features and at the same time making

00:07:38,150 --> 00:07:42,230
sure the code is maintainable and we

00:07:40,190 --> 00:07:44,900
have to strike a healthy balance between

00:07:42,230 --> 00:07:47,960
minimizing technical debt and shortening

00:07:44,900 --> 00:07:50,990
the time to market so pretty challenging

00:07:47,960 --> 00:07:55,490
and as I say there are many contributing

00:07:50,990 --> 00:07:56,870
factors to maintainability but the

00:07:55,490 --> 00:07:59,780
things that have lived here they are

00:07:56,870 --> 00:08:03,410
technical stuff and when when I work in

00:07:59,780 --> 00:08:09,500
a team I learned that the most important

00:08:03,410 --> 00:08:12,920
thing really is communication so you're

00:08:09,500 --> 00:08:15,560
going to see a lot of code starting from

00:08:12,920 --> 00:08:18,050
this light so let's see an example now I

00:08:15,560 --> 00:08:20,139
created a module called music preview

00:08:18,050 --> 00:08:22,090
and it exports five functions

00:08:20,139 --> 00:08:23,830
the rest of the app only needs to know

00:08:22,090 --> 00:08:26,379
about these five functions to use it

00:08:23,830 --> 00:08:29,289
they don't need to know that behind the

00:08:26,379 --> 00:08:32,200
interface of that five function lies a

00:08:29,289 --> 00:08:35,140
big complicated ugly hack so you can see

00:08:32,200 --> 00:08:37,120
like a four inside an if and if inside

00:08:35,140 --> 00:08:39,610
an if inside and four in here and

00:08:37,120 --> 00:08:45,220
there's a cache block inside a trice and

00:08:39,610 --> 00:08:47,170
if in another if in the four so in

00:08:45,220 --> 00:08:50,019
principle this would work fine because

00:08:47,170 --> 00:08:52,120
the code space behind the interface and

00:08:50,019 --> 00:08:55,269
other parts of the software are not

00:08:52,120 --> 00:08:57,760
affected by it but in practice another

00:08:55,269 --> 00:09:00,760
developer may be looking for a technical

00:08:57,760 --> 00:09:03,399
solution and stumbled upon my hack since

00:09:00,760 --> 00:09:06,430
I didn't clearly communicate that the

00:09:03,399 --> 00:09:10,269
code they are seeing is the hack it got

00:09:06,430 --> 00:09:12,880
duplicated so it's really important to

00:09:10,269 --> 00:09:15,070
communicate with other developers about

00:09:12,880 --> 00:09:17,529
when when you're writing code you have

00:09:15,070 --> 00:09:19,810
to communicate whether you are doing

00:09:17,529 --> 00:09:22,360
I mean while you are doing it and is it

00:09:19,810 --> 00:09:25,630
the best practice is it the way other

00:09:22,360 --> 00:09:28,269
people should take as an example so

00:09:25,630 --> 00:09:30,850
another important factor is having an

00:09:28,269 --> 00:09:33,699
effective code reviews and to do an

00:09:30,850 --> 00:09:35,440
effective code reviews I think in my

00:09:33,699 --> 00:09:39,100
opinion we should learn to recognize

00:09:35,440 --> 00:09:42,610
smells inside our code and this is what

00:09:39,100 --> 00:09:45,100
I'm gonna talk about today the first

00:09:42,610 --> 00:09:49,540
kind of smell I call it information

00:09:45,100 --> 00:09:52,390
leaks so let's see another example so

00:09:49,540 --> 00:09:55,029
let's say in our project we have a

00:09:52,390 --> 00:09:57,430
standard user interface toolkit which

00:09:55,029 --> 00:10:00,130
contains the component that I use across

00:09:57,430 --> 00:10:02,440
the app so one of them is this component

00:10:00,130 --> 00:10:05,740
the user of water so we can use this

00:10:02,440 --> 00:10:08,380
component to render and users of water

00:10:05,740 --> 00:10:12,420
by specifying the image and the size and

00:10:08,380 --> 00:10:15,730
we have three sizes to choose from small

00:10:12,420 --> 00:10:20,589
medium and large maybe that's a bit too

00:10:15,730 --> 00:10:23,320
large okay and later as we develop our

00:10:20,589 --> 00:10:26,440
app we need to implement new features so

00:10:23,320 --> 00:10:29,079
the code changes over time we have to

00:10:26,440 --> 00:10:30,600
implement the messaging system and we

00:10:29,079 --> 00:10:33,029
got the design

00:10:30,600 --> 00:10:35,430
and this is our how a message should

00:10:33,029 --> 00:10:37,920
look like on the Left we have the water

00:10:35,430 --> 00:10:39,959
on the right some text so this should be

00:10:37,920 --> 00:10:42,240
straightforward so I look at the user

00:10:39,959 --> 00:10:46,949
avatar component and I saw that decides

00:10:42,240 --> 00:10:49,170
that we need to use it's not there to

00:10:46,949 --> 00:10:51,800
fix this we need to add a new size but

00:10:49,170 --> 00:11:01,550
we already have small medium and large

00:10:51,800 --> 00:11:01,550
what should we put in here medium large

00:11:01,620 --> 00:11:08,110
quite lush okay so we did the most

00:11:05,920 --> 00:11:12,160
obvious thing that makes perfect sense

00:11:08,110 --> 00:11:14,259
we name it appropriately message because

00:11:12,160 --> 00:11:15,389
it's only used in one place the message

00:11:14,259 --> 00:11:20,800
right

00:11:15,389 --> 00:11:22,569
so does this smells a bit to you yeah so

00:11:20,800 --> 00:11:24,100
let's keep going in for now so few

00:11:22,569 --> 00:11:26,470
months later I start seeing this

00:11:24,100 --> 00:11:30,040
everywhere in other places that's not

00:11:26,470 --> 00:11:32,439
related to the message at all so what

00:11:30,040 --> 00:11:34,480
happened here let's step out a bit so we

00:11:32,439 --> 00:11:36,279
have the message component which is a

00:11:34,480 --> 00:11:38,470
specific feature it belongs to a

00:11:36,279 --> 00:11:40,959
specific feature we have the user water

00:11:38,470 --> 00:11:43,269
which is generic you say interface

00:11:40,959 --> 00:11:46,749
component so the message wants to show

00:11:43,269 --> 00:11:50,290
in a water so it uses that component in

00:11:46,749 --> 00:11:54,069
turn that component knows how big the

00:11:50,290 --> 00:11:58,709
owatta should be so it's aware of the

00:11:54,069 --> 00:12:01,629
messaging system and when I see this I

00:11:58,709 --> 00:12:03,490
think that okay some information is

00:12:01,629 --> 00:12:05,980
leaking here because now the message

00:12:03,490 --> 00:12:07,569
knows how to render itself but it

00:12:05,980 --> 00:12:11,709
doesn't know how big the avatar should

00:12:07,569 --> 00:12:15,850
be instead that knowledge is leaked into

00:12:11,709 --> 00:12:17,740
the user of other component so the leak

00:12:15,850 --> 00:12:20,199
here is that information about a

00:12:17,740 --> 00:12:22,149
specific feature leaked into a generic

00:12:20,199 --> 00:12:29,319
component making the component less

00:12:22,149 --> 00:12:31,779
generic and more awkward to reuse so but

00:12:29,319 --> 00:12:34,149
another reason why this happen is that

00:12:31,779 --> 00:12:36,550
maybe because of our generic component

00:12:34,149 --> 00:12:38,620
it's not flexible enough so we're gonna

00:12:36,550 --> 00:12:42,189
try to make it more flexible to fix this

00:12:38,620 --> 00:12:46,209
so we used to have four sides now we

00:12:42,189 --> 00:12:51,639
have eight sides and now the message can

00:12:46,209 --> 00:12:53,800
pick a size from the catalog and we

00:12:51,639 --> 00:12:56,439
don't need to make any outward change to

00:12:53,800 --> 00:12:59,170
it anymore but there's still a pitfall

00:12:56,439 --> 00:13:04,870
here what would happen if we want to

00:12:59,170 --> 00:13:07,029
make a new size between L and SL we may

00:13:04,870 --> 00:13:10,420
need to adjust the size table again and

00:13:07,029 --> 00:13:12,819
and maybe we have to go through the code

00:13:10,420 --> 00:13:15,030
base and move it out to affect our it's

00:13:12,819 --> 00:13:18,660
just out to ACS it out and so on

00:13:15,030 --> 00:13:20,430
but fortunately at tasks well this is

00:13:18,660 --> 00:13:23,040
flexible enough for us so we don't have

00:13:20,430 --> 00:13:26,220
to do that but if you really want to

00:13:23,040 --> 00:13:28,890
make it really flexible you can let the

00:13:26,220 --> 00:13:31,980
user specify the size in pixel that's

00:13:28,890 --> 00:13:34,470
really flexible but it may go out of

00:13:31,980 --> 00:13:36,960
control right so to keep things under

00:13:34,470 --> 00:13:40,950
control you can specify a list of

00:13:36,960 --> 00:13:43,530
allowed size so you know they are trade

00:13:40,950 --> 00:13:46,740
off to all of these three approaches so

00:13:43,530 --> 00:13:50,340
this is an example where as mail calls

00:13:46,740 --> 00:13:52,350
for a bit of code restructuring but

00:13:50,340 --> 00:13:55,320
sometimes oh you have to do it's just

00:13:52,350 --> 00:13:59,220
changing the name let's see another

00:13:55,320 --> 00:14:01,740
example again we have a standard you say

00:13:59,220 --> 00:14:05,460
interface to kit and we have a button

00:14:01,740 --> 00:14:09,210
which the user can click we also have a

00:14:05,460 --> 00:14:13,230
pop-up menu that the user can select an

00:14:09,210 --> 00:14:24,650
item from it so help me with this I have

00:14:13,230 --> 00:14:25,860
a button I have a menu ah menu button

00:14:24,650 --> 00:14:29,130
okay

00:14:25,860 --> 00:14:31,380
we're just putting it together so this

00:14:29,130 --> 00:14:33,450
menu button you can click on it and a

00:14:31,380 --> 00:14:36,330
menu opens and you can select items from

00:14:33,450 --> 00:14:39,330
it but the cache here is that the button

00:14:36,330 --> 00:14:43,050
must appear to be pressed while the menu

00:14:39,330 --> 00:14:45,510
is open only until the menu is closed

00:14:43,050 --> 00:14:49,860
then the button can return back to the

00:14:45,510 --> 00:14:51,810
original state so at first thought we

00:14:49,860 --> 00:14:54,510
may again start with the most obvious

00:14:51,810 --> 00:14:57,570
thing here which is to make button and

00:14:54,510 --> 00:15:01,589
step another prop called its menu open

00:14:57,570 --> 00:15:05,520
so that if the if it's true then it

00:15:01,589 --> 00:15:10,140
appears to be pressed but again thus it

00:15:05,520 --> 00:15:12,390
smells a bit that's because now the

00:15:10,140 --> 00:15:17,060
button is now aware of the menu which is

00:15:12,390 --> 00:15:21,120
an entirely unrelated concept so

00:15:17,060 --> 00:15:22,890
thinking a bit deeper we see that the

00:15:21,120 --> 00:15:24,959
button doesn't really need to know about

00:15:22,890 --> 00:15:26,430
the menu but it only needs to know

00:15:24,959 --> 00:15:28,290
whether the button should appear to be

00:15:26,430 --> 00:15:30,999
the

00:15:28,290 --> 00:15:34,379
this example show that shows that a

00:15:30,999 --> 00:15:38,680
simple naming change can entirely

00:15:34,379 --> 00:15:42,490
communicate a different thing so when

00:15:38,680 --> 00:15:45,939
people say it's just a name so you know

00:15:42,490 --> 00:15:49,029
naming is really important so for this

00:15:45,939 --> 00:15:52,029
kind of smell when I reveal code I try

00:15:49,029 --> 00:15:58,199
to ask myself does this really needs to

00:15:52,029 --> 00:16:03,790
know about that so that's how I do it

00:15:58,199 --> 00:16:07,209
the second the second smell I call it

00:16:03,790 --> 00:16:11,339
low cohesion and cohesion here means

00:16:07,209 --> 00:16:14,920
that related things stay close together

00:16:11,339 --> 00:16:17,949
let's see more examples here so now for

00:16:14,920 --> 00:16:23,949
our app we need to create a navigation

00:16:17,949 --> 00:16:26,019
bar and it looks like this so if I use

00:16:23,949 --> 00:16:28,120
react bootstrap implementing this should

00:16:26,019 --> 00:16:31,059
be straightforward so first I need an F

00:16:28,120 --> 00:16:33,670
bar inside it header which contains the

00:16:31,059 --> 00:16:36,639
apps name and then several items which

00:16:33,670 --> 00:16:39,579
is shown here so that's it so far so

00:16:36,639 --> 00:16:41,860
good again we need to implement new

00:16:39,579 --> 00:16:45,009
feature and this time is going to be the

00:16:41,860 --> 00:16:47,439
authentication system and we need to now

00:16:45,009 --> 00:16:52,269
we need to update the nav bar to display

00:16:47,439 --> 00:16:56,139
these two guys at the right so let's do

00:16:52,269 --> 00:16:58,269
it first I'm gonna take in some props so

00:16:56,139 --> 00:17:00,189
that we can figure out how to display

00:16:58,269 --> 00:17:02,199
the nav bar correctly we're gonna figure

00:17:00,189 --> 00:17:05,230
out whether the user is locking or not

00:17:02,199 --> 00:17:07,000
and then at the bottom we're gonna at

00:17:05,230 --> 00:17:09,520
the right of that row right side of the

00:17:07,000 --> 00:17:12,659
nav bar we're gonna add the navigation

00:17:09,520 --> 00:17:12,659
item accordingly okay

00:17:13,299 --> 00:17:19,600
and now this is our presentation or

00:17:16,480 --> 00:17:22,600
component but we also need to connect to

00:17:19,600 --> 00:17:24,939
the readers store so we can do that

00:17:22,600 --> 00:17:30,100
using the connect function from react

00:17:24,939 --> 00:17:31,570
react leaders package so that's it now

00:17:30,100 --> 00:17:34,230
looking at the component we can see that

00:17:31,570 --> 00:17:37,630
it cleanly separates into three concerns

00:17:34,230 --> 00:17:40,030
selecting data dispatching action into

00:17:37,630 --> 00:17:40,809
the store and our rendering logic which

00:17:40,030 --> 00:17:47,049
is the

00:17:40,809 --> 00:17:50,740
sensational component again we need to

00:17:47,049 --> 00:17:53,769
implement new features this time two new

00:17:50,740 --> 00:17:56,409
features so now we need to update the

00:17:53,769 --> 00:17:58,450
navbar Ken when the user locked in now

00:17:56,409 --> 00:18:02,499
we need to display the number of unread

00:17:58,450 --> 00:18:04,090
notifications and messages so coming

00:18:02,499 --> 00:18:07,679
back to our code we already see the

00:18:04,090 --> 00:18:11,019
pattern here so let's go with the flow

00:18:07,679 --> 00:18:12,820
so first I'm gonna select some data from

00:18:11,019 --> 00:18:15,730
the store and by the action creators

00:18:12,820 --> 00:18:18,669
here and then late and then here I'm

00:18:15,730 --> 00:18:21,249
gonna take in some props according to

00:18:18,669 --> 00:18:24,519
the code at the top now going down to

00:18:21,249 --> 00:18:27,490
the bottom here's the rendering logic so

00:18:24,519 --> 00:18:34,830
we are going to add two more items here

00:18:27,490 --> 00:18:38,200
so the notifications and the message

00:18:34,830 --> 00:18:40,809
that's it so maybe we can zoom out a bit

00:18:38,200 --> 00:18:44,230
here we can see the pattern here that

00:18:40,809 --> 00:18:47,230
our code is cleanly separated into three

00:18:44,230 --> 00:18:50,860
concerns but these concerns are

00:18:47,230 --> 00:18:52,629
cross-cutting that means they have to do

00:18:50,860 --> 00:18:55,720
with many different functionalities of

00:18:52,629 --> 00:18:57,730
the app but if we looked from another

00:18:55,720 --> 00:19:02,559
perspective from a functionality

00:18:57,730 --> 00:19:06,159
standpoint we are going to see that many

00:19:02,559 --> 00:19:09,519
functional parts they are intermixed

00:19:06,159 --> 00:19:12,850
inside the code and this can make it a

00:19:09,519 --> 00:19:14,619
bit hard to navigate the code if we want

00:19:12,850 --> 00:19:17,830
to look for the code related to the

00:19:14,619 --> 00:19:22,090
navigation we have to jump and skip over

00:19:17,830 --> 00:19:25,149
a lot of unrelated code let's see a real

00:19:22,090 --> 00:19:29,559
world example so this is options panel

00:19:25,149 --> 00:19:35,110
from my project beamers so I need to add

00:19:29,559 --> 00:19:36,759
a new option here so this is the

00:19:35,110 --> 00:19:39,999
existing code don't worry about it

00:19:36,759 --> 00:19:42,279
but to implement this here's where I

00:19:39,999 --> 00:19:44,559
need to add a code first one there the

00:19:42,279 --> 00:19:47,919
second one in the prop types there and I

00:19:44,559 --> 00:19:51,760
have to jump down 80 lines to add a new

00:19:47,919 --> 00:19:55,120
code here so seeing this

00:19:51,760 --> 00:19:58,210
as I started think as I add more options

00:19:55,120 --> 00:20:01,570
what would happen this part would spread

00:19:58,210 --> 00:20:04,810
even more apart and I have to scroll up

00:20:01,570 --> 00:20:08,050
and down a lot more to implement more

00:20:04,810 --> 00:20:12,040
options in the future so some cohesion

00:20:08,050 --> 00:20:14,530
is lost here and you can tell that when

00:20:12,040 --> 00:20:16,000
you code you have to knit when you need

00:20:14,530 --> 00:20:18,820
to do something simple you have to

00:20:16,000 --> 00:20:21,700
change you have to jump up and down a

00:20:18,820 --> 00:20:24,760
lot or maybe you have to go between

00:20:21,700 --> 00:20:28,900
different files or even sometimes

00:20:24,760 --> 00:20:31,660
different repository you can also smell

00:20:28,900 --> 00:20:33,820
this when reviewing a PR when you start

00:20:31,660 --> 00:20:36,340
to notice that I read this piece of code

00:20:33,820 --> 00:20:38,890
but it but I don't understand it I have

00:20:36,340 --> 00:20:42,150
to jump down and jump up and down and up

00:20:38,890 --> 00:20:46,210
again to fully understand something a

00:20:42,150 --> 00:20:49,140
particular feature and this can also

00:20:46,210 --> 00:20:51,700
happen when files are organized by types

00:20:49,140 --> 00:20:53,890
so in this example if I want to

00:20:51,700 --> 00:20:58,000
implement a new feature I have to change

00:20:53,890 --> 00:21:01,480
six files and Rauh grouping file this

00:20:58,000 --> 00:21:03,700
way can make the architecture more

00:21:01,480 --> 00:21:08,380
obvious so it's obvious we have in

00:21:03,700 --> 00:21:11,410
entities interactors IO and UI here and

00:21:08,380 --> 00:21:13,660
in a small project like beam use I would

00:21:11,410 --> 00:21:16,630
say this is a pretty good way to

00:21:13,660 --> 00:21:19,960
structure but once you have like 200

00:21:16,630 --> 00:21:24,430
files of each types this approach

00:21:19,960 --> 00:21:26,320
doesn't scale very well for us so what

00:21:24,430 --> 00:21:28,330
we can do is we can try to aim for

00:21:26,320 --> 00:21:32,190
functional cohesion we try to group

00:21:28,330 --> 00:21:35,830
things by what the purpose that code is

00:21:32,190 --> 00:21:37,720
instead of grouping by responsibility

00:21:35,830 --> 00:21:41,380
like I'm gonna select data from the

00:21:37,720 --> 00:21:44,160
store I'm gonna dispatch no this part

00:21:41,380 --> 00:21:45,870
for message this part for notification

00:21:44,160 --> 00:21:49,500
let's do that

00:21:45,870 --> 00:21:52,480
so coming back to our code here's the

00:21:49,500 --> 00:21:54,700
navigation component so I'm first I'm

00:21:52,480 --> 00:21:58,360
gonna remove stuff not directly related

00:21:54,700 --> 00:22:01,540
to navigation so this one is gone plop

00:21:58,360 --> 00:22:04,659
tides gone and the rendering logic that

00:22:01,540 --> 00:22:08,080
has to do with user message notification

00:22:04,659 --> 00:22:11,979
I replaced them with specialized

00:22:08,080 --> 00:22:14,080
components here so this components this

00:22:11,979 --> 00:22:17,049
specialized components they are smart in

00:22:14,080 --> 00:22:19,419
a way that the lucky enough item for

00:22:17,049 --> 00:22:21,460
example it would know how to figure out

00:22:19,419 --> 00:22:24,729
the current authentication state on its

00:22:21,460 --> 00:22:28,479
own and renders the right thing so let's

00:22:24,729 --> 00:22:31,059
now look at it again we connect to the

00:22:28,479 --> 00:22:34,419
reader store we select some data we bind

00:22:31,059 --> 00:22:38,229
the action creators and here's our

00:22:34,419 --> 00:22:42,249
enduring logic so that's pretty simple

00:22:38,229 --> 00:22:44,619
and and this looks pretty good because

00:22:42,249 --> 00:22:46,929
now most part of the code is now

00:22:44,619 --> 00:22:49,950
concerned with authentication and the

00:22:46,929 --> 00:22:53,470
current user except for these two lines

00:22:49,950 --> 00:22:55,259
which renders the nav item they are

00:22:53,470 --> 00:23:00,489
still concerned with the navigation

00:22:55,259 --> 00:23:03,460
right so we are losing a bit of cohesion

00:23:00,489 --> 00:23:05,649
here again because if in the future we

00:23:03,460 --> 00:23:09,070
need to replace the nav item component

00:23:05,649 --> 00:23:11,739
with something else we we need to jump

00:23:09,070 --> 00:23:14,619
from the notification I mean from the

00:23:11,739 --> 00:23:16,450
navigation component at the top to here

00:23:14,619 --> 00:23:21,210
and down to other components that

00:23:16,450 --> 00:23:25,349
renders an F item so what can we do here

00:23:21,210 --> 00:23:28,389
well we can delegate the rendering logic

00:23:25,349 --> 00:23:31,690
so instead of hard-coding the rendering

00:23:28,389 --> 00:23:34,179
logic here we let the user of this

00:23:31,690 --> 00:23:39,789
component specify its own rendering

00:23:34,179 --> 00:23:44,229
logic as a function so I'm gonna add

00:23:39,789 --> 00:23:46,840
some prop types to make it more clear so

00:23:44,229 --> 00:23:49,059
now this component is now only concerned

00:23:46,840 --> 00:23:51,309
about the current user and the

00:23:49,059 --> 00:23:53,679
authentication state it's no longer

00:23:51,309 --> 00:23:57,759
concerned about how to render it it

00:23:53,679 --> 00:23:59,619
belongs to someone else now so this

00:23:57,759 --> 00:24:00,249
component is no longer related to

00:23:59,619 --> 00:24:02,229
navigation

00:24:00,249 --> 00:24:05,590
it's just authentication so I'll just

00:24:02,229 --> 00:24:09,099
name them off and by doing it this way

00:24:05,590 --> 00:24:11,139
the art component can be reused in other

00:24:09,099 --> 00:24:13,450
parts of the app such as maybe

00:24:11,139 --> 00:24:16,599
displaying some kind of content only

00:24:13,450 --> 00:24:17,610
when the user is logged in by the way

00:24:16,599 --> 00:24:20,070
this technique

00:24:17,610 --> 00:24:22,080
that we delegate the rendering logic to

00:24:20,070 --> 00:24:24,420
the users of the component is now

00:24:22,080 --> 00:24:27,000
officially known as render props and

00:24:24,420 --> 00:24:29,610
just a past few weeks

00:24:27,000 --> 00:24:30,890
this just got into the official react

00:24:29,610 --> 00:24:33,780
documentation

00:24:30,890 --> 00:24:36,540
so let's come back to our navigation

00:24:33,780 --> 00:24:39,140
component so at the bottom instead of

00:24:36,540 --> 00:24:42,510
using a specialized component thus

00:24:39,140 --> 00:24:45,380
moving the nav item down to other parts

00:24:42,510 --> 00:24:50,250
of the code we can use the earth

00:24:45,380 --> 00:24:52,799
component here and specify how to render

00:24:50,250 --> 00:24:59,940
when the user is locked out and lock in

00:24:52,799 --> 00:25:02,190
accordingly so now you can see all the

00:24:59,940 --> 00:25:03,750
nav items are clip here so all we have

00:25:02,190 --> 00:25:06,780
to do left is to change the notification

00:25:03,750 --> 00:25:08,820
and messages to use the same pattern

00:25:06,780 --> 00:25:12,500
then all the nav items are going to be

00:25:08,820 --> 00:25:17,490
grouped in the navigation component

00:25:12,500 --> 00:25:19,230
finally the earth component here if we

00:25:17,490 --> 00:25:21,480
look at it the objective of this

00:25:19,230 --> 00:25:24,840
component is to connect the user

00:25:21,480 --> 00:25:27,630
interface which is here the navigation

00:25:24,840 --> 00:25:30,840
bar but it can be something else as I

00:25:27,630 --> 00:25:35,040
said to the data source which is here

00:25:30,840 --> 00:25:37,580
the current authentication state so it

00:25:35,040 --> 00:25:40,020
has what we call this kind of component

00:25:37,580 --> 00:25:45,030
data connector component

00:25:40,020 --> 00:25:48,360
so to recap once a component grow bigger

00:25:45,030 --> 00:25:50,970
it can be hard to maintain so if we try

00:25:48,360 --> 00:25:52,890
to split the component with the most

00:25:50,970 --> 00:25:53,250
obvious way maybe doing something like

00:25:52,890 --> 00:25:55,559
this

00:25:53,250 --> 00:25:59,280
separate the logic part from the real

00:25:55,559 --> 00:26:02,190
part but this can lead to the code

00:25:59,280 --> 00:26:03,960
losing its cohesion especially when one

00:26:02,190 --> 00:26:08,370
part would not make sense without the

00:26:03,960 --> 00:26:11,010
other we can try to split the code by

00:26:08,370 --> 00:26:15,570
the functional codes that is trying to

00:26:11,010 --> 00:26:17,549
achieve and if we do this right it's

00:26:15,570 --> 00:26:21,470
easier to make these components reusable

00:26:17,549 --> 00:26:26,520
in other parts of the app so in

00:26:21,470 --> 00:26:28,950
conclusions in code reviews we usually

00:26:26,520 --> 00:26:30,240
reveal code for consistency for

00:26:28,950 --> 00:26:31,980
readability

00:26:30,240 --> 00:26:38,250
usually revealed for logical correctness

00:26:31,980 --> 00:26:42,450
and this quality is relatively simpler

00:26:38,250 --> 00:26:46,110
to review but define smells

00:26:42,450 --> 00:26:49,110
they are quite subtle and it's pretty

00:26:46,110 --> 00:26:52,260
easy to see the code as correct but miss

00:26:49,110 --> 00:26:57,090
the such a design issue unless we are

00:26:52,260 --> 00:27:00,950
aware of them and actively look for them

00:26:57,090 --> 00:27:03,390
so to build maintainable software I

00:27:00,950 --> 00:27:06,180
encourage everyone to develop the sense

00:27:03,390 --> 00:27:10,020
of course males and be mindful of them

00:27:06,180 --> 00:27:12,330
and today I shared you two kinds of

00:27:10,020 --> 00:27:14,820
smells and these are the kinds of smells

00:27:12,330 --> 00:27:18,900
that I encountered most in my

00:27:14,820 --> 00:27:23,400
professional professional life I mean

00:27:18,900 --> 00:27:25,620
coding and I don't know of any ways that

00:27:23,400 --> 00:27:27,330
we can detect this males automatically

00:27:25,620 --> 00:27:29,760
especially when it's concerned with

00:27:27,330 --> 00:27:32,310
naming so we can check that we are doing

00:27:29,760 --> 00:27:34,950
camelcase right but we cannot check

00:27:32,310 --> 00:27:37,260
automatically whether this component

00:27:34,950 --> 00:27:46,520
should know about the other component so

00:27:37,260 --> 00:27:49,770
some human expert is required here so

00:27:46,520 --> 00:27:51,690
when writing and reviewing code I would

00:27:49,770 --> 00:27:54,690
like to encourage you to look for this

00:27:51,690 --> 00:27:58,680
kind of smells and other smells as you

00:27:54,690 --> 00:28:02,130
can find in the web and take note of

00:27:58,680 --> 00:28:07,250
them last but not least not all smells

00:28:02,130 --> 00:28:11,370
are bad for example duplicate code is a

00:28:07,250 --> 00:28:13,940
well-known code smell but a duplicated

00:28:11,370 --> 00:28:17,610
code can sometimes be easier to read

00:28:13,940 --> 00:28:20,310
than the code that's not duplicated

00:28:17,610 --> 00:28:23,220
because a code that's duplicated they

00:28:20,310 --> 00:28:25,200
are more explicit and contains less

00:28:23,220 --> 00:28:28,500
abstraction but once you increase the

00:28:25,200 --> 00:28:31,980
level of abstraction it can be harder to

00:28:28,500 --> 00:28:34,440
see what's going on and also that's why

00:28:31,980 --> 00:28:38,940
I do placate all my slides instead of

00:28:34,440 --> 00:28:42,660
using animations and in up with 201 and

00:28:38,940 --> 00:28:44,010
202 ice here so in the end everything is

00:28:42,660 --> 00:28:46,470
a trade-off

00:28:44,010 --> 00:28:49,500
by making your modules smaller you're

00:28:46,470 --> 00:28:51,290
gonna have more modules by reducing the

00:28:49,500 --> 00:28:54,690
amount of code you have to maintain your

00:28:51,290 --> 00:28:57,360
increasing third-party dependencies so

00:28:54,690 --> 00:29:00,930
we have to make a lot of choices when

00:28:57,360 --> 00:29:05,460
developing software and to see if we

00:29:00,930 --> 00:29:07,740
have made the right trade-off look for

00:29:05,460 --> 00:29:10,290
feedback from other developers so after

00:29:07,740 --> 00:29:14,760
all we make code maintainable so that

00:29:10,290 --> 00:29:18,300
other people can maintain it so let's

00:29:14,760 --> 00:29:21,390
look for their feedback so that's all I

00:29:18,300 --> 00:29:22,890
want to share today thank you everyone

00:29:21,390 --> 00:29:30,819
for listening

00:29:22,890 --> 00:29:30,819

YouTube URL: https://www.youtube.com/watch?v=xBa0_b-5XDw


