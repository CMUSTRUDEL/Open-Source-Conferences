Title: David Bryant: Enabling New Web Experiences - JSConf.Asia 2018
Publication date: 2018-02-17
Playlist: JSConf.Asia 2018
Description: 
	Speech, mixed reality and machine learning are all the rage. How do we incorporate these emerging technologies into today’s web and provide enriching opportunities for creators and compelling experiences for users? How do we make those experiences buildable and deployable at scale to everyone, everywhere? Come hear how Mozilla blends established core web components like JavaScript with breakthrough new capabilities like WebAssembly and powerful new programming languages like Rust to transform the web.

David is a Fellow in Mozilla’s Emerging Technologies group, providing technical expertise for Mozilla's engineering and leads its Developer Outreach team. Before this he led product engineering, marketing, sales enablement and technology licensing at Bell Labs, Sun and Nokia. Throughout his career David has been motivated to build Internet and computing solutions that matter to people.


JSConf.Asia - Capitol Theatre, Singapore - 25 January 2018

Source: https://2018.jsconf.asia/

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:00,180 --> 00:00:02,370
[Music]

00:00:13,940 --> 00:00:19,170
I'm willing to bet that pretty much none

00:00:17,760 --> 00:00:21,630
of you has ever heard of the emerging

00:00:19,170 --> 00:00:23,970
technologies group at Mozilla that's

00:00:21,630 --> 00:00:25,560
okay and we're gonna fix that I'm sure

00:00:23,970 --> 00:00:27,330
you're all familiar with the Firefox

00:00:25,560 --> 00:00:28,949
group after all that's the team the

00:00:27,330 --> 00:00:31,679
engineering team at Mozilla builds

00:00:28,949 --> 00:00:36,450
Firefox in emerging technologies we are

00:00:31,679 --> 00:00:38,820
the other engineering team and our a

00:00:36,450 --> 00:00:41,129
quick summary of our role is really the

00:00:38,820 --> 00:00:47,039
title of my talk enabling new web

00:00:41,129 --> 00:00:48,390
experiences and so I'm hoping to spend a

00:00:47,039 --> 00:00:49,800
little bit of time this afternoon at the

00:00:48,390 --> 00:00:51,210
end of the day walking you through the

00:00:49,800 --> 00:00:53,610
work that we're doing in the emerging

00:00:51,210 --> 00:00:55,350
technologies group introducing network

00:00:53,610 --> 00:00:58,050
and getting you acquainted with some of

00:00:55,350 --> 00:01:01,109
what we work on in what we do but I have

00:00:58,050 --> 00:01:04,549
another motive in doing so which is that

00:01:01,109 --> 00:01:07,770
I think it's fair to say that while the

00:01:04,549 --> 00:01:09,600
title is enabling new web experiences we

00:01:07,770 --> 00:01:11,729
expect that actually building those web

00:01:09,600 --> 00:01:13,350
experiences is something that you are

00:01:11,729 --> 00:01:15,450
all are going to do and so we have a

00:01:13,350 --> 00:01:17,400
very strong interest in spending a lot

00:01:15,450 --> 00:01:19,080
of time with developers understanding

00:01:17,400 --> 00:01:20,640
what their needs are what the

00:01:19,080 --> 00:01:22,140
requirements are what technologies are

00:01:20,640 --> 00:01:23,909
relevant what kind of new experiences

00:01:22,140 --> 00:01:25,590
would you like to be able to build or

00:01:23,909 --> 00:01:27,600
better versions of today's experience

00:01:25,590 --> 00:01:29,490
and so I'm hoping that in walking

00:01:27,600 --> 00:01:31,259
through the various projects that we

00:01:29,490 --> 00:01:33,540
have underway and the technology areas

00:01:31,259 --> 00:01:34,470
that we're active in we'll find some

00:01:33,540 --> 00:01:36,360
place that will spark some interest

00:01:34,470 --> 00:01:39,150
they'll have an opportunity to come and

00:01:36,360 --> 00:01:42,540
talk to us in in the booth or tour

00:01:39,150 --> 00:01:46,290
tomorrow or Saturday or just generally

00:01:42,540 --> 00:01:48,600
afterwards I will say that I'm guessing

00:01:46,290 --> 00:01:50,670
you might be familiar some of you at

00:01:48,600 --> 00:01:53,189
least with the graphic that's on the

00:01:50,670 --> 00:01:54,780
screen here this is something I

00:01:53,189 --> 00:01:58,200
hopefully you will have seen before this

00:01:54,780 --> 00:01:59,880
is the mark 57 power suit part of the

00:01:58,200 --> 00:02:03,000
visual identity that we created for

00:01:59,880 --> 00:02:04,799
Firefox quantum the major update that we

00:02:03,000 --> 00:02:06,899
made to Firefox and launched in November

00:02:04,799 --> 00:02:09,179
of last year and the reason for using

00:02:06,899 --> 00:02:10,920
that graphic and my talk is part of this

00:02:09,179 --> 00:02:13,530
new web experience enablement work that

00:02:10,920 --> 00:02:16,200
we did was in playing a critical role

00:02:13,530 --> 00:02:19,230
in Firefox quantum and in the components

00:02:16,200 --> 00:02:21,560
of the mark 57 Power Suit and so in our

00:02:19,230 --> 00:02:26,070
walking tour of emerging technologies

00:02:21,560 --> 00:02:29,520
that's where we will actually start so

00:02:26,070 --> 00:02:32,310
the story in that particular vein begins

00:02:29,520 --> 00:02:33,870
with rust we've had a substantial effort

00:02:32,310 --> 00:02:35,340
in rust it was a programming language

00:02:33,870 --> 00:02:36,870
and you may wonder why talk about

00:02:35,340 --> 00:02:39,750
another programming language at a

00:02:36,870 --> 00:02:42,090
JavaScript conference but if you hang

00:02:39,750 --> 00:02:45,120
with me for a few slides I think you'll

00:02:42,090 --> 00:02:47,580
see how the dots connect but rust is a

00:02:45,120 --> 00:02:53,130
programming language that was begun at

00:02:47,580 --> 00:02:55,260
Mozilla in earnest in about 2009 and it

00:02:53,130 --> 00:02:59,540
was motivated by a problem that we had

00:02:55,260 --> 00:03:03,720
trying to maintain a large complex C++

00:02:59,540 --> 00:03:05,250
six million lines of code product and we

00:03:03,720 --> 00:03:07,560
kept bumping our heads against a couple

00:03:05,250 --> 00:03:09,570
of problems that really took a lot of

00:03:07,560 --> 00:03:10,680
time and energy out of the product out

00:03:09,570 --> 00:03:12,870
of our customers and out of our

00:03:10,680 --> 00:03:14,790
engineering teams and we began to wonder

00:03:12,870 --> 00:03:15,720
if these two major classes of products

00:03:14,790 --> 00:03:18,269
were products that we could actually

00:03:15,720 --> 00:03:20,549
find a better way to solve one of those

00:03:18,269 --> 00:03:23,160
problems was that we were seeing the

00:03:20,549 --> 00:03:25,440
emergence of hardware that had a

00:03:23,160 --> 00:03:28,380
tremendous ability to support

00:03:25,440 --> 00:03:31,920
parallelization and execution more cores

00:03:28,380 --> 00:03:33,360
more execution threads and while it's

00:03:31,920 --> 00:03:35,549
great that the hardware had those

00:03:33,360 --> 00:03:37,549
capabilities as programmers and as

00:03:35,549 --> 00:03:40,049
humans as I'm sure many of you know

00:03:37,549 --> 00:03:42,660
parallelizing things robustly is is a

00:03:40,049 --> 00:03:44,940
non-trivial problem to solve and so we

00:03:42,660 --> 00:03:46,440
had the suspicion that we could actually

00:03:44,940 --> 00:03:47,940
find a ways to help us solve that

00:03:46,440 --> 00:03:50,310
problem in the programming languages

00:03:47,940 --> 00:03:52,769
that we used and so that was one

00:03:50,310 --> 00:03:56,070
motivation the other one was that we

00:03:52,769 --> 00:03:58,019
spend and you may actually to spend a

00:03:56,070 --> 00:04:00,269
lot of time fixing problems that occur

00:03:58,019 --> 00:04:02,519
only after your product is built and

00:04:00,269 --> 00:04:04,680
deployed and out in the world and used

00:04:02,519 --> 00:04:06,570
by end-users now maybe those products

00:04:04,680 --> 00:04:08,700
are crashes or performance issues maybe

00:04:06,570 --> 00:04:11,220
there's security vulnerabilities but

00:04:08,700 --> 00:04:13,459
there's a class of software issues that

00:04:11,220 --> 00:04:15,870
arise because of the dynamism in

00:04:13,459 --> 00:04:18,390
applications and the way in which they

00:04:15,870 --> 00:04:20,010
behave especially for a web browser like

00:04:18,390 --> 00:04:22,200
Firefox when it's out in the world

00:04:20,010 --> 00:04:25,080
absorbing all sorts of unanticipated

00:04:22,200 --> 00:04:26,849
will comment content and user

00:04:25,080 --> 00:04:27,360
interactions and so the other problem we

00:04:26,849 --> 00:04:30,240
were interested

00:04:27,360 --> 00:04:32,699
in solving if we could was to try and

00:04:30,240 --> 00:04:34,919
avoid having our engineers have to spend

00:04:32,699 --> 00:04:36,750
all that time finding and fixing and

00:04:34,919 --> 00:04:38,250
debugging those problems and worse

00:04:36,750 --> 00:04:39,689
having our customers go through the

00:04:38,250 --> 00:04:41,610
consequences of having those problems

00:04:39,689 --> 00:04:43,740
when the product was deployed and out in

00:04:41,610 --> 00:04:46,379
the field so the rust programming

00:04:43,740 --> 00:04:48,689
language was sort of built around the

00:04:46,379 --> 00:04:50,909
initial idea was the slogan was hack

00:04:48,689 --> 00:04:54,060
without fear the idea really was to

00:04:50,909 --> 00:04:55,439
create a programming language where many

00:04:54,060 --> 00:04:57,270
of the runtime problems could actually

00:04:55,439 --> 00:04:59,639
be found and prevented by the compiler

00:04:57,270 --> 00:05:00,870
so a large class of issues that you

00:04:59,639 --> 00:05:02,129
would have in your programming a

00:05:00,870 --> 00:05:04,039
low-level language or systems

00:05:02,129 --> 00:05:06,659
programming language like C or C++

00:05:04,039 --> 00:05:08,460
actually get caught by the compiler and

00:05:06,659 --> 00:05:10,500
never get out into the world to cause a

00:05:08,460 --> 00:05:13,680
pain or anguish for your customers or

00:05:10,500 --> 00:05:15,539
for your engineers and the other one is

00:05:13,680 --> 00:05:16,710
its optimized to really do Russ's

00:05:15,539 --> 00:05:18,810
optimize to do a great job with

00:05:16,710 --> 00:05:20,520
parallelization and concurrency and in

00:05:18,810 --> 00:05:22,590
fact the initial mantra hack without

00:05:20,520 --> 00:05:23,849
fear makes a great t-shirt but it

00:05:22,590 --> 00:05:25,439
doesn't actually tell you too much about

00:05:23,849 --> 00:05:27,990
the language and that's evolved over

00:05:25,439 --> 00:05:31,589
time to be more along the lines of

00:05:27,990 --> 00:05:34,289
fearless concurrency so the first part

00:05:31,589 --> 00:05:35,669
of the story and we have a small team in

00:05:34,289 --> 00:05:36,870
the emerging technologies group working

00:05:35,669 --> 00:05:40,139
on rust we have a large community

00:05:36,870 --> 00:05:41,819
working on rust is delivering the

00:05:40,139 --> 00:05:43,050
capabilities that we're living up to

00:05:41,819 --> 00:05:46,259
that potential in the programming

00:05:43,050 --> 00:05:50,279
language the next piece of that story

00:05:46,259 --> 00:05:53,339
is a project called servo servo is

00:05:50,279 --> 00:05:54,779
serves two purposes one it is a proof

00:05:53,339 --> 00:05:56,189
point for the RUS programming language

00:05:54,779 --> 00:05:57,599
if you're gonna assert that you have a

00:05:56,189 --> 00:05:59,580
programming language that has new

00:05:57,599 --> 00:06:01,650
qualities the way russ does you really

00:05:59,580 --> 00:06:03,029
kind of have to back it up you have to

00:06:01,650 --> 00:06:04,379
write a large body of code to

00:06:03,029 --> 00:06:07,069
demonstrate that you can actually make

00:06:04,379 --> 00:06:11,120
good on that potential and so servo is

00:06:07,069 --> 00:06:13,439
an alternative web engine not unlike

00:06:11,120 --> 00:06:14,909
simple web engines that you find in

00:06:13,439 --> 00:06:16,620
browsers today it's not a fully featured

00:06:14,909 --> 00:06:21,589
web engine or solely wouldn't wasn't in

00:06:16,620 --> 00:06:24,659
those days the work started in 2012 and

00:06:21,589 --> 00:06:26,430
the idea was to be able to prove the

00:06:24,659 --> 00:06:29,069
qualities of Russ but actually give us a

00:06:26,430 --> 00:06:31,080
way a workbench upon which we could then

00:06:29,069 --> 00:06:32,879
do some of this work to paralyze the

00:06:31,080 --> 00:06:34,500
components of the web engine taking

00:06:32,879 --> 00:06:37,319
advantage of the of the properties of

00:06:34,500 --> 00:06:40,240
rust and building new ways of doing

00:06:37,319 --> 00:06:43,180
layout or styling in the web

00:06:40,240 --> 00:06:46,150
browser built inherently around the

00:06:43,180 --> 00:06:47,530
language enabling parallelization and

00:06:46,150 --> 00:06:50,430
then the hardware underneath really

00:06:47,530 --> 00:06:53,020
letting us take full advantage of it a

00:06:50,430 --> 00:06:55,870
couple of other interesting benefits of

00:06:53,020 --> 00:06:57,970
doing the work on servo is ìletís focus

00:06:55,870 --> 00:07:00,340
on embed ability it's really great if

00:06:57,970 --> 00:07:02,440
you build these components it's even

00:07:00,340 --> 00:07:04,120
better inside of an engine it's even

00:07:02,440 --> 00:07:06,580
better if you can use them in all sorts

00:07:04,120 --> 00:07:09,099
of other applications and services and

00:07:06,580 --> 00:07:14,889
so servo evolved over time and reach the

00:07:09,099 --> 00:07:17,229
point where whoops in early 2000 late

00:07:14,889 --> 00:07:19,150
2016 where we realized we could actually

00:07:17,229 --> 00:07:22,960
take some of the components out of servo

00:07:19,150 --> 00:07:25,270
and and bring them to to Firefox as part

00:07:22,960 --> 00:07:28,300
of Firefox quantum and so we continue to

00:07:25,270 --> 00:07:30,310
have interesting work inside of the

00:07:28,300 --> 00:07:32,050
emerging technologies group not only in

00:07:30,310 --> 00:07:33,940
evolving the RUS programming language

00:07:32,050 --> 00:07:35,590
with the community but in continuing to

00:07:33,940 --> 00:07:37,120
build and enhance the capabilities that

00:07:35,590 --> 00:07:38,889
are in servo as a workbench for

00:07:37,120 --> 00:07:41,889
alternative web injen components and

00:07:38,889 --> 00:07:43,150
then highlighting or extrapolating from

00:07:41,889 --> 00:07:45,639
those components to put them in

00:07:43,150 --> 00:07:49,210
applications like firefox build a better

00:07:45,639 --> 00:07:50,650
engine build a better platform and

00:07:49,210 --> 00:07:52,719
provide a better experience for

00:07:50,650 --> 00:07:53,800
end-users and running the code that

00:07:52,719 --> 00:07:55,780
we're all going to build and deploy

00:07:53,800 --> 00:08:01,270
using the traditional components of the

00:07:55,780 --> 00:08:02,830
web HTML javascript and CSS the third

00:08:01,270 --> 00:08:04,930
project that fits in this little sub

00:08:02,830 --> 00:08:07,990
narrative of my larger narrative is web

00:08:04,930 --> 00:08:09,789
assembly now all I willing to bet many

00:08:07,990 --> 00:08:11,949
of you might not have been too familiar

00:08:09,789 --> 00:08:13,840
with Russ tour with servo I'm hoping

00:08:11,949 --> 00:08:16,719
more of you are somewhat familiar with

00:08:13,840 --> 00:08:18,310
web assembly and I'll tell you we'll

00:08:16,719 --> 00:08:21,370
talk a little bit more about what it is

00:08:18,310 --> 00:08:23,759
and why I mean it actually does a better

00:08:21,370 --> 00:08:29,710
job of relating to JavaScript promise me

00:08:23,759 --> 00:08:33,039
then then servo arrested and around

00:08:29,710 --> 00:08:35,800
about 2009 we began to get concerned

00:08:33,039 --> 00:08:38,289
about the problems we were seeing with

00:08:35,800 --> 00:08:40,149
handling of JavaScript on the web as web

00:08:38,289 --> 00:08:43,060
content got more sophisticated as web

00:08:40,149 --> 00:08:46,180
applications became more more nuanced

00:08:43,060 --> 00:08:48,120
and richer developers were building

00:08:46,180 --> 00:08:50,890
larger and larger bodies of JavaScript

00:08:48,120 --> 00:08:52,750
and sending them over the wire as part

00:08:50,890 --> 00:08:54,020
of presenting a web application to the

00:08:52,750 --> 00:08:57,830
browser to be rendered on

00:08:54,020 --> 00:08:59,660
Green that's fine JavaScript grew as a

00:08:57,830 --> 00:09:01,160
language to give developers a lot of

00:08:59,660 --> 00:09:03,170
those capabilities but one of the

00:09:01,160 --> 00:09:04,610
consequences of doing that is all of

00:09:03,170 --> 00:09:07,430
that javascript that gets sent over the

00:09:04,610 --> 00:09:09,290
wire as the page loads has to be parsed

00:09:07,430 --> 00:09:11,870
and compiled by the browser before it

00:09:09,290 --> 00:09:14,630
can actually be executed and we began to

00:09:11,870 --> 00:09:16,310
theorize that if we didn't do something

00:09:14,630 --> 00:09:18,110
we might ultimately reach a problem

00:09:16,310 --> 00:09:19,730
where we were going to see the

00:09:18,110 --> 00:09:22,490
performance limitation in web

00:09:19,730 --> 00:09:24,740
applications and content on the web was

00:09:22,490 --> 00:09:26,480
really going to be bound up in the CPU

00:09:24,740 --> 00:09:28,250
of the device that was running the

00:09:26,480 --> 00:09:30,440
browser and we realized that was

00:09:28,250 --> 00:09:33,050
probably not a good idea so we started

00:09:30,440 --> 00:09:35,450
an experimentation effort to see if we

00:09:33,050 --> 00:09:37,520
could actually find ways to remove some

00:09:35,450 --> 00:09:39,650
of the impediments of parsing and

00:09:37,520 --> 00:09:41,330
compiling JavaScript in real time as it

00:09:39,650 --> 00:09:43,520
was loaded into the browser as part of

00:09:41,330 --> 00:09:46,460
displaying the page that the user wanted

00:09:43,520 --> 00:09:49,070
to see now the first step in that effort

00:09:46,460 --> 00:09:52,610
was a process or a project called azzam

00:09:49,070 --> 00:09:54,610
j/s and the idea with azzam jas was to

00:09:52,610 --> 00:09:58,580
take a strict subset of JavaScript

00:09:54,610 --> 00:09:59,840
statically typed and and think about it

00:09:58,580 --> 00:10:02,180
as an intermediate language

00:09:59,840 --> 00:10:04,130
representation that could be fed into a

00:10:02,180 --> 00:10:06,020
browser could be compatible with every

00:10:04,130 --> 00:10:08,840
JavaScript enabled browser on the planet

00:10:06,020 --> 00:10:11,810
but could be built in such a way that it

00:10:08,840 --> 00:10:13,430
would be efficient to execute to load in

00:10:11,810 --> 00:10:15,260
to execute and to run into the browser

00:10:13,430 --> 00:10:17,630
and avoid some of the challenges of

00:10:15,260 --> 00:10:19,930
runtime handling of dynamic typing and

00:10:17,630 --> 00:10:24,350
other pieces of the JavaScript language

00:10:19,930 --> 00:10:26,090
as I'm DJ s was you know initially just

00:10:24,350 --> 00:10:28,730
an experiment but it actually worked

00:10:26,090 --> 00:10:31,370
phenomenally well what we saw with Azzam

00:10:28,730 --> 00:10:33,440
j/s was the ability to actually

00:10:31,370 --> 00:10:35,630
streamline the delivery and the loading

00:10:33,440 --> 00:10:38,030
of content on the web and the ability to

00:10:35,630 --> 00:10:39,800
actually craft although it's kind of an

00:10:38,030 --> 00:10:42,380
odd looking programming language if you

00:10:39,800 --> 00:10:44,360
looked at it as a human to craft runtime

00:10:42,380 --> 00:10:46,640
components to do interestingly complex

00:10:44,360 --> 00:10:47,960
computational things and get them you

00:10:46,640 --> 00:10:49,700
know rendered and handled by the

00:10:47,960 --> 00:10:51,800
JavaScript engine in the browser and

00:10:49,700 --> 00:10:56,720
more efficiently than sort of fully

00:10:51,800 --> 00:10:58,220
featured JavaScript so as emmaus was

00:10:56,720 --> 00:11:00,140
successful it was typically not

00:10:58,220 --> 00:11:01,730
programmed in by humans as I mentioned

00:11:00,140 --> 00:11:03,580
it was an intermediate language and so

00:11:01,730 --> 00:11:06,110
it was mostly produced by tool chains

00:11:03,580 --> 00:11:07,459
and in fact compatible with with the

00:11:06,110 --> 00:11:08,809
LLVM tool chain

00:11:07,459 --> 00:11:12,410
so that it was easy for us to build

00:11:08,809 --> 00:11:15,139
tools and we did they could take other

00:11:12,410 --> 00:11:17,929
programming languages see for example

00:11:15,139 --> 00:11:20,389
and compile them down and render them in

00:11:17,929 --> 00:11:23,269
azzam j/s and then efficiently feed them

00:11:20,389 --> 00:11:26,269
into the browser that experiment worked

00:11:23,269 --> 00:11:28,220
well enough that we realized we could

00:11:26,269 --> 00:11:30,139
accomplish a number of things by

00:11:28,220 --> 00:11:33,499
evolving the technology forward and

00:11:30,139 --> 00:11:36,649
webassembly was born webassembly was

00:11:33,499 --> 00:11:39,499
designed to really be a complete virtual

00:11:36,649 --> 00:11:41,300
machine inside of your browser and so

00:11:39,499 --> 00:11:43,790
it's pretty much the case today that

00:11:41,300 --> 00:11:45,319
every browser every major browser most

00:11:43,790 --> 00:11:47,689
of the browser's running in people's

00:11:45,319 --> 00:11:51,589
desktops certainly these days supports

00:11:47,689 --> 00:11:53,389
web assembly it's a w3c standard and web

00:11:51,589 --> 00:11:57,139
assembly takes the architecture and the

00:11:53,389 --> 00:11:59,119
idea of as Emmaus and sort of pushes it

00:11:57,139 --> 00:12:06,230
to the limit so oops

00:11:59,119 --> 00:12:09,470
now we have a a binary runtime in the

00:12:06,230 --> 00:12:11,319
browser and we can take representations

00:12:09,470 --> 00:12:14,089
in almost any other programming language

00:12:11,319 --> 00:12:15,860
and compile them down into web assembly

00:12:14,089 --> 00:12:19,069
and create modules that are extremely

00:12:15,860 --> 00:12:20,480
efficient to load and to run as part of

00:12:19,069 --> 00:12:21,709
your web application and let's actually

00:12:20,480 --> 00:12:23,959
look at what that's going to look like

00:12:21,709 --> 00:12:26,329
should you be interested in trying to do

00:12:23,959 --> 00:12:29,480
something like this as you can see from

00:12:26,329 --> 00:12:33,439
the simple recipe card here you start

00:12:29,480 --> 00:12:34,369
with some native code some assets that

00:12:33,439 --> 00:12:35,990
you may have something that's

00:12:34,369 --> 00:12:38,299
computationally complicated or

00:12:35,990 --> 00:12:41,860
sophisticated complex that would be

00:12:38,299 --> 00:12:43,790
inefficient and not it not run properly

00:12:41,860 --> 00:12:46,309
particularly well there's a JavaScript

00:12:43,790 --> 00:12:47,929
application and downloaded you use the

00:12:46,309 --> 00:12:50,029
tool chain to compile it down to a web

00:12:47,929 --> 00:12:51,470
assembly module the web assembly module

00:12:50,029 --> 00:12:53,119
gets bundled up into your web

00:12:51,470 --> 00:12:55,459
application along with all of the other

00:12:53,119 --> 00:12:58,160
regular components of your application

00:12:55,459 --> 00:13:01,129
so JavaScript images assets other sorts

00:12:58,160 --> 00:13:03,799
of things packaged up as your web app

00:13:01,129 --> 00:13:05,839
and then when the browser loads it pulls

00:13:03,799 --> 00:13:07,339
all of those assets over but takes

00:13:05,839 --> 00:13:09,589
advantage of the fact that the web

00:13:07,339 --> 00:13:11,990
assembly module is already pre compiled

00:13:09,589 --> 00:13:14,269
and ready to much more efficiently load

00:13:11,990 --> 00:13:18,079
and execute in the browser the end

00:13:14,269 --> 00:13:20,970
result is that large complex features

00:13:18,079 --> 00:13:23,879
can be delivered in web assembly

00:13:20,970 --> 00:13:24,930
and and it is efficient enough that it's

00:13:23,879 --> 00:13:28,410
more can you think of it more like

00:13:24,930 --> 00:13:30,000
loading an image the the load on the

00:13:28,410 --> 00:13:31,740
browser of actually processing and

00:13:30,000 --> 00:13:33,389
loading the web assembly module is a

00:13:31,740 --> 00:13:35,339
much lighter weight thing and we see now

00:13:33,389 --> 00:13:37,680
with web assembly applications can be

00:13:35,339 --> 00:13:39,839
built to run more at network speed and

00:13:37,680 --> 00:13:41,370
so what the user gets when they when

00:13:39,839 --> 00:13:43,500
they they load the application is

00:13:41,370 --> 00:13:45,750
something that's much more responsive

00:13:43,500 --> 00:13:48,120
and much more initially loads and we're

00:13:45,750 --> 00:13:50,459
seeing all sorts of examples of people

00:13:48,120 --> 00:13:52,410
now taking web assembly and building

00:13:50,459 --> 00:13:54,060
very powerful web applications and

00:13:52,410 --> 00:13:56,850
delivering them today so Google Earth

00:13:54,060 --> 00:14:00,420
for example recently announced that they

00:13:56,850 --> 00:14:03,389
have transformed Google Earth moved away

00:14:00,420 --> 00:14:04,860
from their own version of native code

00:14:03,389 --> 00:14:07,350
that was compiled in as part of the

00:14:04,860 --> 00:14:09,660
environment and they're delivering

00:14:07,350 --> 00:14:11,250
Google Earth these days it's available

00:14:09,660 --> 00:14:14,129
with web assembly and we're seeing

00:14:11,250 --> 00:14:16,470
others Facebook others use as Emmaus and

00:14:14,129 --> 00:14:17,329
web assembly to handle image loading

00:14:16,470 --> 00:14:19,949
audio

00:14:17,329 --> 00:14:22,920
encryption other computationally

00:14:19,949 --> 00:14:25,319
expensive tasks and provide them on the

00:14:22,920 --> 00:14:27,240
web and one of the the other reasons for

00:14:25,319 --> 00:14:28,889
making this sort of interesting path

00:14:27,240 --> 00:14:31,470
available to you and seeing what you can

00:14:28,889 --> 00:14:33,029
can do with it is that we can take rust

00:14:31,470 --> 00:14:35,790
the programming language I mentioned

00:14:33,029 --> 00:14:37,439
earlier and compile it and make it part

00:14:35,790 --> 00:14:39,059
of this webassembly pathway and so you

00:14:37,439 --> 00:14:40,860
can actually get the benefits of rust

00:14:39,059 --> 00:14:43,980
the efficient memory management the

00:14:40,860 --> 00:14:45,660
ready parallelization in code that can

00:14:43,980 --> 00:14:48,029
be compiled and rendered and built as

00:14:45,660 --> 00:14:50,550
part of your web app so now web

00:14:48,029 --> 00:14:51,899
applications can be much more diverse in

00:14:50,550 --> 00:14:54,660
terms of the assets they use and

00:14:51,899 --> 00:14:57,990
performance for end-users is clearly a

00:14:54,660 --> 00:14:59,579
much happier thing and there are tools

00:14:57,990 --> 00:15:01,620
available to make it easier for you to

00:14:59,579 --> 00:15:03,329
do if you're interested in web assembly

00:15:01,620 --> 00:15:06,029
I mentioned it's supported in all of the

00:15:03,329 --> 00:15:07,889
major browsers no reason not to get

00:15:06,029 --> 00:15:09,899
familiar with the technology and take

00:15:07,889 --> 00:15:11,430
advantage of it and one of the things

00:15:09,899 --> 00:15:14,040
we're eager to do is to make web

00:15:11,430 --> 00:15:15,930
assembly part of a larger collection of

00:15:14,040 --> 00:15:18,870
the tools tool chains and frameworks

00:15:15,930 --> 00:15:21,180
that you have have access to and use on

00:15:18,870 --> 00:15:22,649
a regular basis the benefits of that is

00:15:21,180 --> 00:15:25,529
of course you don't actually have to do

00:15:22,649 --> 00:15:27,329
anything as those tool chains and

00:15:25,529 --> 00:15:29,910
frameworks incorporate support for web

00:15:27,329 --> 00:15:33,120
assembly all of the performance and and

00:15:29,910 --> 00:15:34,740
network throughput webassembly will

00:15:33,120 --> 00:15:37,440
accrue automatically in your

00:15:34,740 --> 00:15:39,209
web application and that virtual CPU

00:15:37,440 --> 00:15:40,560
that's inside of every browser that

00:15:39,209 --> 00:15:42,779
becomes a much more powerful tool for

00:15:40,560 --> 00:15:44,970
you to run not only traditional web apps

00:15:42,779 --> 00:15:46,410
but personal productivity apps or video

00:15:44,970 --> 00:15:48,899
editing or all sorts of other complex

00:15:46,410 --> 00:15:50,820
things where you may even have native

00:15:48,899 --> 00:15:52,890
language assets or your teams have

00:15:50,820 --> 00:15:56,220
native language assets that you'd like

00:15:52,890 --> 00:15:59,040
to really be able to reuse as part of

00:15:56,220 --> 00:16:01,800
building and delivering app so all of

00:15:59,040 --> 00:16:03,390
those are pieces that came in as part of

00:16:01,800 --> 00:16:04,440
Firefox today a couple of others I'm

00:16:03,390 --> 00:16:06,360
going to highlight here that we're

00:16:04,440 --> 00:16:08,010
working on sort of in the survey of

00:16:06,360 --> 00:16:09,649
what's happening in emerging

00:16:08,010 --> 00:16:15,800
technologies

00:16:09,649 --> 00:16:20,430
VR mixed reality and speech now I'll

00:16:15,800 --> 00:16:22,410
step back a little bit web VR I'm sure

00:16:20,430 --> 00:16:24,360
many of you are familiar with we've had

00:16:22,410 --> 00:16:27,959
demos in the lobby if you've never had a

00:16:24,360 --> 00:16:29,580
virtual reality headset on I encourage

00:16:27,959 --> 00:16:31,110
you to take advantage of the opportunity

00:16:29,580 --> 00:16:35,580
to do it

00:16:31,110 --> 00:16:38,070
in 2016 we began work at earnest on web

00:16:35,580 --> 00:16:40,339
VR as the rest of the industry was

00:16:38,070 --> 00:16:43,140
excited about virtual reality in general

00:16:40,339 --> 00:16:45,930
and the goal in those days with Web VR

00:16:43,140 --> 00:16:48,980
was to simply demonstrate that the web

00:16:45,930 --> 00:16:52,020
was a viable place for virtual reality

00:16:48,980 --> 00:16:55,440
Mozilla worked with Google we built a

00:16:52,020 --> 00:16:57,630
standard initial implementation that was

00:16:55,440 --> 00:17:00,089
ultimately standardized by the w3c of a

00:16:57,630 --> 00:17:03,029
web the our API and the idea being that

00:17:00,089 --> 00:17:05,550
we wanted to expose the interfaces that

00:17:03,029 --> 00:17:09,240
you needed in order to create a virtual

00:17:05,550 --> 00:17:10,800
experience through the web to all of the

00:17:09,240 --> 00:17:13,170
typical ways in which you build and

00:17:10,800 --> 00:17:16,199
deploy web content today so that if

00:17:13,170 --> 00:17:18,179
you're familiar with HTML CSS and Java

00:17:16,199 --> 00:17:21,000
all right JavaScript it would be easier

00:17:18,179 --> 00:17:22,949
for you to actually then expand the 2d

00:17:21,000 --> 00:17:24,839
kinds of web experiences you build today

00:17:22,949 --> 00:17:28,550
to be something that was a virtual

00:17:24,839 --> 00:17:32,160
reality based 3d kind of web experience

00:17:28,550 --> 00:17:34,710
that was - that was great it was an easy

00:17:32,160 --> 00:17:36,059
thing to do but we learned that there

00:17:34,710 --> 00:17:39,690
were a lot of opportunities to really

00:17:36,059 --> 00:17:41,520
put more powerful development tools in a

00:17:39,690 --> 00:17:43,220
creator's hands developers hands to make

00:17:41,520 --> 00:17:46,950
it easier for them to build and share

00:17:43,220 --> 00:17:48,390
compelling web VR experiences which gave

00:17:46,950 --> 00:17:54,090
rise to a frame

00:17:48,390 --> 00:17:56,700
a frame is an easy language or toolset

00:17:54,090 --> 00:17:58,290
that you can avail yourself of if you're

00:17:56,700 --> 00:18:00,420
a familiar web developer to actually

00:17:58,290 --> 00:18:03,510
build and share components and construct

00:18:00,420 --> 00:18:06,480
entire virtual reality experiences and

00:18:03,510 --> 00:18:07,830
easily deploy them on the web using all

00:18:06,480 --> 00:18:10,650
of the same techniques at your filling

00:18:07,830 --> 00:18:12,120
room familiar with today one of the

00:18:10,650 --> 00:18:13,860
things we've learned from the web vr

00:18:12,120 --> 00:18:16,350
standard and for making a frame

00:18:13,860 --> 00:18:18,540
available is there are a lot of people

00:18:16,350 --> 00:18:20,670
interested in doing this telemetry that

00:18:18,540 --> 00:18:23,430
we we have in Firefox

00:18:20,670 --> 00:18:26,400
tells us that about a million Firefox

00:18:23,430 --> 00:18:29,640
users in the course of navigating the

00:18:26,400 --> 00:18:32,700
web every day encounter some sort of VR

00:18:29,640 --> 00:18:36,080
content or experience that each day so

00:18:32,700 --> 00:18:38,970
that's actually perhaps a surprising

00:18:36,080 --> 00:18:42,270
expanse of web VR that's available

00:18:38,970 --> 00:18:44,250
people are using it for 3d 360 video and

00:18:42,270 --> 00:18:48,600
for other things but we saw a lot of

00:18:44,250 --> 00:18:50,460
growth in 2016 and 17 in web VR in the

00:18:48,600 --> 00:18:51,750
use of a frame and the tools that were

00:18:50,460 --> 00:18:53,790
provided as part of the a frame

00:18:51,750 --> 00:18:56,550
environment so if you're interested in

00:18:53,790 --> 00:18:58,080
trying to build a piece of virtual

00:18:56,550 --> 00:19:00,180
reality or component that can be shared

00:18:58,080 --> 00:19:01,920
in virtual reality and stop by and talk

00:19:00,180 --> 00:19:05,070
to us we can show you how to use a frame

00:19:01,920 --> 00:19:06,510
or a painter if you're an artist to

00:19:05,070 --> 00:19:10,080
actually build and create that

00:19:06,510 --> 00:19:12,090
technology and make it easy to use now

00:19:10,080 --> 00:19:17,610
as big as virtual reality was especially

00:19:12,090 --> 00:19:19,860
in 2016 in 2017 even more buzz and

00:19:17,610 --> 00:19:23,490
interest in the market around augmented

00:19:19,860 --> 00:19:26,070
reality and in fact the nomenclature

00:19:23,490 --> 00:19:28,530
evolved so fast that what we now talk

00:19:26,070 --> 00:19:30,600
about is mixed reality so mixed reality

00:19:28,530 --> 00:19:33,360
is the combination of virtual reality

00:19:30,600 --> 00:19:36,990
and augmented reality and it's ways to

00:19:33,360 --> 00:19:40,350
actually blend the 2d world and the 3d

00:19:36,990 --> 00:19:41,880
world in the actual physical real world

00:19:40,350 --> 00:19:43,710
and create a whole new class of

00:19:41,880 --> 00:19:47,010
experiences for end-users there as well

00:19:43,710 --> 00:19:49,680
so just as we worked to propose a

00:19:47,010 --> 00:19:51,810
standard interface for web VR we've

00:19:49,680 --> 00:19:56,280
proposed a standard interface for mixed

00:19:51,810 --> 00:19:58,440
reality and there is a web X our API

00:19:56,280 --> 00:19:59,650
that's available now that you can begin

00:19:58,440 --> 00:20:01,780
to experiment

00:19:59,650 --> 00:20:03,970
and easily build and deploy virtual

00:20:01,780 --> 00:20:07,720
reality experiences using the web as a

00:20:03,970 --> 00:20:09,850
platform and about 10 lines of code and

00:20:07,720 --> 00:20:11,860
we've provided not only the ability to

00:20:09,850 --> 00:20:14,710
do it in desktop browsers such as

00:20:11,860 --> 00:20:17,080
Firefox but we also have an open-source

00:20:14,710 --> 00:20:19,870
mixed reality viewer that'll run on an

00:20:17,080 --> 00:20:23,200
iOS enabled mobile device all off of the

00:20:19,870 --> 00:20:25,210
same back-end mixed reality content and

00:20:23,200 --> 00:20:27,490
therefore make it easy for all of you as

00:20:25,210 --> 00:20:29,920
web developers to create virtual reality

00:20:27,490 --> 00:20:32,500
augmented reality and other kinds of

00:20:29,920 --> 00:20:34,450
experiences on top of the same platforms

00:20:32,500 --> 00:20:38,020
and tool chains that you're using every

00:20:34,450 --> 00:20:40,120
day one of the things we learned from

00:20:38,020 --> 00:20:42,309
putting virtual reality and mixed

00:20:40,120 --> 00:20:45,520
reality capabilities in the hands of

00:20:42,309 --> 00:20:48,070
developers and end-users is that you

00:20:45,520 --> 00:20:50,200
begin to want even other kinds of new

00:20:48,070 --> 00:20:52,840
experiences on the web as part of

00:20:50,200 --> 00:20:55,570
creating those new environments it's not

00:20:52,840 --> 00:20:58,660
particularly convenient in the middle of

00:20:55,570 --> 00:21:01,000
a virtual reality session to actually

00:20:58,660 --> 00:21:03,040
try and use a keyboard to type to

00:21:01,000 --> 00:21:05,470
provide input or commands or options and

00:21:03,040 --> 00:21:07,120
so one of the the logical consequences

00:21:05,470 --> 00:21:09,460
of building more of these kinds of

00:21:07,120 --> 00:21:11,980
augmented reality experiences in mixed

00:21:09,460 --> 00:21:14,170
reality experiences as you began to want

00:21:11,980 --> 00:21:17,140
to be able to talk to your web browser

00:21:14,170 --> 00:21:18,760
talk to the web and so another area of

00:21:17,140 --> 00:21:21,340
activity for us in the emerging

00:21:18,760 --> 00:21:24,370
technologies group at Mozilla is around

00:21:21,340 --> 00:21:27,610
speech and speech recognition deep

00:21:24,370 --> 00:21:30,460
speech is one of those projects and it's

00:21:27,610 --> 00:21:33,010
an effort we began last year to build a

00:21:30,460 --> 00:21:35,950
completely open-source speech-to-text

00:21:33,010 --> 00:21:38,320
engine based on machine learning now

00:21:35,950 --> 00:21:40,809
speech recognition has been around for a

00:21:38,320 --> 00:21:43,960
long time it was well established when I

00:21:40,809 --> 00:21:46,179
was in college many years ago but most

00:21:43,960 --> 00:21:47,710
of the speech technologies that you we

00:21:46,179 --> 00:21:51,179
encounter in the world around us today

00:21:47,710 --> 00:21:53,590
are relatively closed proprietary

00:21:51,179 --> 00:21:55,240
ecosystems and they're not particularly

00:21:53,590 --> 00:21:57,220
readily available to us as web

00:21:55,240 --> 00:21:59,530
developers to build and deploy in any

00:21:57,220 --> 00:22:03,040
kind of web-based content so we embarked

00:21:59,530 --> 00:22:06,550
upon a deep speech project to really

00:22:03,040 --> 00:22:09,640
provide a completely accessible open but

00:22:06,550 --> 00:22:11,530
useful speech recognition engine and

00:22:09,640 --> 00:22:13,240
also give us a platform that we can use

00:22:11,530 --> 00:22:15,040
to make speech recognition of a

00:22:13,240 --> 00:22:17,980
for more languages and more cultures

00:22:15,040 --> 00:22:20,410
broadly than is available through some

00:22:17,980 --> 00:22:26,290
of the more typical commercial systems

00:22:20,410 --> 00:22:29,290
so deep speech launched officially two

00:22:26,290 --> 00:22:32,020
months ago we have Python JavaScript

00:22:29,290 --> 00:22:33,130
income I come in line versions of it

00:22:32,020 --> 00:22:34,810
that are accessible that can be

00:22:33,130 --> 00:22:38,350
incorporated in your application or back

00:22:34,810 --> 00:22:41,230
in service the word error rate is about

00:22:38,350 --> 00:22:44,250
6.5 percent that's approximately how

00:22:41,230 --> 00:22:46,660
well we do as humans so you've

00:22:44,250 --> 00:22:50,040
misunderstood 6.5 percent of my words

00:22:46,660 --> 00:22:53,110
but deep speech is actually capable of

00:22:50,040 --> 00:22:55,750
roughly human performance and to

00:22:53,110 --> 00:22:58,240
demonstrate how you can use it we did a

00:22:55,750 --> 00:23:02,320
test pilot experiment in Firefox called

00:22:58,240 --> 00:23:04,630
voice fill where we packaged up access

00:23:02,320 --> 00:23:06,700
to the deep speech engine and allowed

00:23:04,630 --> 00:23:08,620
you to actually conduct searches and

00:23:06,700 --> 00:23:12,160
other interactions through the voice

00:23:08,620 --> 00:23:15,190
bill it can add-on to Firefox just using

00:23:12,160 --> 00:23:17,620
your voice so I'm sure you have talked

00:23:15,190 --> 00:23:19,810
to your browser on and off for many

00:23:17,620 --> 00:23:22,630
years now you can actually talk to your

00:23:19,810 --> 00:23:24,340
browser and it will do something and

00:23:22,630 --> 00:23:29,350
we're eager to work with folks not only

00:23:24,340 --> 00:23:31,510
to expand the the engine and make it

00:23:29,350 --> 00:23:33,910
available in more environments but also

00:23:31,510 --> 00:23:34,750
to work on the corpus of text that goes

00:23:33,910 --> 00:23:37,180
along with it

00:23:34,750 --> 00:23:39,250
speech recognition as we've implemented

00:23:37,180 --> 00:23:42,370
in deep speech is a machine learning

00:23:39,250 --> 00:23:45,010
based application and it needs to be

00:23:42,370 --> 00:23:46,990
trained and the more data that you have

00:23:45,010 --> 00:23:49,840
the better the training is the more

00:23:46,990 --> 00:23:52,240
effective the recognition is and so in

00:23:49,840 --> 00:23:54,550
parallel with deep speech we launched a

00:23:52,240 --> 00:23:56,950
thing called project common voice and

00:23:54,550 --> 00:24:00,010
the idea of common voice was to use the

00:23:56,950 --> 00:24:02,890
web to collect the speech data that we

00:24:00,010 --> 00:24:07,840
needed to train and improve the deep

00:24:02,890 --> 00:24:09,730
speech engine so we went live with with

00:24:07,840 --> 00:24:12,670
common voice we asked people to

00:24:09,730 --> 00:24:14,950
voluntarily give us samples of their

00:24:12,670 --> 00:24:16,600
voice and so if you still could do it if

00:24:14,950 --> 00:24:19,680
you like you go to the common voice

00:24:16,600 --> 00:24:23,380
website offer to volunteer your voice

00:24:19,680 --> 00:24:25,960
will ask you to read some snippets of

00:24:23,380 --> 00:24:26,350
text and you do that using the

00:24:25,960 --> 00:24:28,000
microphone

00:24:26,350 --> 00:24:31,809
you're in your computer with the browser

00:24:28,000 --> 00:24:33,460
we will record those samples and then

00:24:31,809 --> 00:24:35,289
accumulate them in a large back-end

00:24:33,460 --> 00:24:37,000
database and then we have other people

00:24:35,289 --> 00:24:38,919
who volunteer to actually listen to

00:24:37,000 --> 00:24:40,890
those samples and verify that you

00:24:38,919 --> 00:24:43,150
actually said what we asked you to say

00:24:40,890 --> 00:24:47,400
and so over the course of the last

00:24:43,150 --> 00:24:50,020
several months 400,000 people have

00:24:47,400 --> 00:24:51,760
400,000 voice recordings have been

00:24:50,020 --> 00:24:54,730
contributed to the common voice database

00:24:51,760 --> 00:25:01,419
from 20,000 speakers that's over 500

00:24:54,730 --> 00:25:03,280
hours of text and the community has has

00:25:01,419 --> 00:25:04,720
been part of creating the The Voice

00:25:03,280 --> 00:25:06,429
corpus and database and we now have

00:25:04,720 --> 00:25:08,830
people working to provide language

00:25:06,429 --> 00:25:11,409
support not only for English but for

00:25:08,830 --> 00:25:14,020
French German Spanish Macedonian odoo

00:25:11,409 --> 00:25:16,390
Persian and Kurdish and more languages

00:25:14,020 --> 00:25:18,309
are are coming as we can enable more of

00:25:16,390 --> 00:25:20,260
the data collection on the backend and

00:25:18,309 --> 00:25:22,539
so a common voice and deep speech

00:25:20,260 --> 00:25:24,700
together means that you now have access

00:25:22,539 --> 00:25:27,669
to technologies to let you take a

00:25:24,700 --> 00:25:30,190
traditional web experience and build a

00:25:27,669 --> 00:25:31,900
speech input component to it or build

00:25:30,190 --> 00:25:34,120
new kinds of experiences and deliver

00:25:31,900 --> 00:25:36,640
them on the web where speech is a viable

00:25:34,120 --> 00:25:38,409
means of users actually interacting with

00:25:36,640 --> 00:25:44,710
your content for your applications or

00:25:38,409 --> 00:25:46,390
your service the last piece of the

00:25:44,710 --> 00:25:48,159
emerging technologies organization am I

00:25:46,390 --> 00:25:50,230
going to talk about is actually not a

00:25:48,159 --> 00:25:51,730
piece that's oriented towards any of the

00:25:50,230 --> 00:25:55,179
engineering efforts like the ones I've

00:25:51,730 --> 00:25:57,190
been describing but we actually have the

00:25:55,179 --> 00:25:59,530
the emerging technologies organization

00:25:57,190 --> 00:26:02,830
is the home for Mozilla's developer

00:25:59,530 --> 00:26:07,740
outreach effort and we did that for a

00:26:02,830 --> 00:26:10,299
couple of reasons one is our focus on

00:26:07,740 --> 00:26:11,980
developer outreach is really broadly

00:26:10,299 --> 00:26:14,169
across all of the web and the

00:26:11,980 --> 00:26:16,030
technologies that make up the web this

00:26:14,169 --> 00:26:18,220
is a reflection of Mozilla's mission

00:26:16,030 --> 00:26:20,650
where we're all about the Internet first

00:26:18,220 --> 00:26:22,480
and foremost and making the Internet

00:26:20,650 --> 00:26:25,000
open and free and accessible and

00:26:22,480 --> 00:26:27,100
empowering for all and so clearly we

00:26:25,000 --> 00:26:28,929
advocate for a wide range of

00:26:27,100 --> 00:26:31,720
technologies well beyond those that are

00:26:28,929 --> 00:26:34,720
incorporated in Mozilla's product web

00:26:31,720 --> 00:26:37,150
assembly is a good example of that and

00:26:34,720 --> 00:26:38,950
so the work that we did

00:26:37,150 --> 00:26:42,340
in in advocating for webassembly

00:26:38,950 --> 00:26:45,550
adoption led to it being pervasively

00:26:42,340 --> 00:26:47,530
present in all of the web browsers and

00:26:45,550 --> 00:26:48,910
one of the positive benefits to that was

00:26:47,530 --> 00:26:51,640
that it allows us to get to the point

00:26:48,910 --> 00:26:53,740
where application developers that had

00:26:51,640 --> 00:26:55,870
been using flash and had been reliant on

00:26:53,740 --> 00:26:58,510
plugins in the browser to get access to

00:26:55,870 --> 00:27:01,240
that native functionality no longer had

00:26:58,510 --> 00:27:02,950
to do so and through web assembly we

00:27:01,240 --> 00:27:05,290
were able to provide a mechanism where

00:27:02,950 --> 00:27:07,720
we could deprecated native plugins and

00:27:05,290 --> 00:27:10,210
deprecated flash and that was all not

00:27:07,720 --> 00:27:11,650
because we built it into Firefox but

00:27:10,210 --> 00:27:13,420
because we designed it and built it for

00:27:11,650 --> 00:27:15,520
the web and we advocated it from a

00:27:13,420 --> 00:27:18,400
developer perspective for all browser

00:27:15,520 --> 00:27:19,630
vendors to adopt additionally it's

00:27:18,400 --> 00:27:21,130
important for us from a developer

00:27:19,630 --> 00:27:22,270
perspective to be aligned with

00:27:21,130 --> 00:27:23,980
everything else that's going on in

00:27:22,270 --> 00:27:26,140
emerging technologies and so we're just

00:27:23,980 --> 00:27:28,540
as happy to talk to you about the api's

00:27:26,140 --> 00:27:30,429
or the tools or the standards or

00:27:28,540 --> 00:27:34,809
anything else that you may require as

00:27:30,429 --> 00:27:36,550
developers to really help you adopt or

00:27:34,809 --> 00:27:38,980
become more involved with any of the

00:27:36,550 --> 00:27:41,140
other technologies that i've just talked

00:27:38,980 --> 00:27:43,090
about that we're working on in emerging

00:27:41,140 --> 00:27:45,730
technology so we're just as happy to

00:27:43,090 --> 00:27:47,080
talk about where your needs may be if

00:27:45,730 --> 00:27:49,990
you're interested in building a speech

00:27:47,080 --> 00:27:53,050
based interface to the web or a mixed

00:27:49,990 --> 00:27:55,000
reality based one and all that work can

00:27:53,050 --> 00:27:56,380
be taken up through the developer

00:27:55,000 --> 00:28:02,260
outreach team as part of the emerging

00:27:56,380 --> 00:28:04,450
technologies group and so that brings us

00:28:02,260 --> 00:28:06,490
to the end of our tour I didn't actually

00:28:04,450 --> 00:28:08,410
talk about everything that we're doing

00:28:06,490 --> 00:28:11,320
in emerging technologies we have a

00:28:08,410 --> 00:28:13,660
number of other efforts that are

00:28:11,320 --> 00:28:15,690
underway that are probably less relevant

00:28:13,660 --> 00:28:18,640
in this audience but I will highlight

00:28:15,690 --> 00:28:20,920
that we're doing work on a royalty-free

00:28:18,640 --> 00:28:22,330
high-quality audio and video codecs and

00:28:20,920 --> 00:28:24,970
so if you're interested in delivering

00:28:22,330 --> 00:28:27,520
high-quality media on the web and in

00:28:24,970 --> 00:28:29,800
doing so in a royalty-free way we should

00:28:27,520 --> 00:28:32,200
talk we're part of the Alliance for open

00:28:29,800 --> 00:28:34,150
media in support of those technologies

00:28:32,200 --> 00:28:37,150
that are becoming available and we also

00:28:34,150 --> 00:28:39,880
have some early phase work on the web of

00:28:37,150 --> 00:28:41,890
things and so some of the technologies

00:28:39,880 --> 00:28:44,670
that Flocka showed us earlier in terms

00:28:41,890 --> 00:28:47,410
of bringing javascript and the web into

00:28:44,670 --> 00:28:49,450
microcontrollers and hardware is work

00:28:47,410 --> 00:28:50,429
that we're also engaged in and we'd

00:28:49,450 --> 00:28:53,629
certainly be happy

00:28:50,429 --> 00:28:56,490
to talk to you about any of that work

00:28:53,629 --> 00:28:57,809
lastly in this space we're spending a

00:28:56,490 --> 00:28:59,490
bunch of time on I mentioned machine

00:28:57,809 --> 00:29:01,440
learning as part of speech but we know

00:28:59,490 --> 00:29:03,269
that machine learning is a technology or

00:29:01,440 --> 00:29:05,490
that's going to be pervasively

00:29:03,269 --> 00:29:07,649
interesting or replicable in a wide

00:29:05,490 --> 00:29:09,869
range of ways across the the broader web

00:29:07,649 --> 00:29:11,669
and we're happy to explore the

00:29:09,869 --> 00:29:13,440
intersection of machine learning and

00:29:11,669 --> 00:29:16,940
assistance and what that might be

00:29:13,440 --> 00:29:20,220
interested of interest to you all so

00:29:16,940 --> 00:29:23,700
thank you very much that's me

00:29:20,220 --> 00:29:25,860
catch us in the in the booth outside or

00:29:23,700 --> 00:29:27,659
talk to us tomorrow and we'd be happy to

00:29:25,860 --> 00:29:28,889
find out what you're interested in and

00:29:27,659 --> 00:29:31,740
how we can make some of this technology

00:29:28,889 --> 00:29:32,760
more accessible or valuable to you going

00:29:31,740 --> 00:29:41,680
forward

00:29:32,760 --> 00:29:41,680

YouTube URL: https://www.youtube.com/watch?v=yqZYAM2es9Q


