Title: Phoomparin Mano: For The Love Of Web Assembly - Lightning Talk - JSConf.Asia 2018
Publication date: 2018-02-21
Playlist: JSConf.Asia 2018
Description: 
	Phoomparin gives a short intro to React-Rust: https://github.com/phoomparin/react-rust

Lightning Talks are 5 minute segments during which interested members of the audience can take the stage and present on a topic dear to their heart.


JSConf.Asia - Capitol Theatre, Singapore - 27 January 2018

Source: https://2018.jsconf.asia/

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:13,690 --> 00:00:19,080
So hey everyone my name is Phoomparin Mano and I'm 16 years old developer from Thailand

00:00:19,119 --> 00:00:24,359
And this is for the love of web assembly. Hope you enjoy it

00:00:26,890 --> 00:00:28,449
First of all

00:00:28,449 --> 00:00:32,429
Javascript is a big ecosystem, and this is what makes us great

00:00:33,399 --> 00:00:41,189
As you can see there is react. There's Redux and graph QL and a bunch of other libraries and this makes our

00:00:41,739 --> 00:00:45,628
Ecosystems be together and we can create any applications

00:00:45,629 --> 00:00:49,769
We want just like the animals in the forest

00:00:54,129 --> 00:00:55,180
Now

00:00:55,180 --> 00:01:01,739
There are sometimes when JavaScript alone might not cut it for example when you have performance problems

00:01:02,320 --> 00:01:06,059
You need more performance you need more computation power

00:01:06,520 --> 00:01:12,000
maybe you need to figure out a face of someone and sometimes javascript might not be enough

00:01:12,610 --> 00:01:16,799
Sometimes you just need to get really low level and just flip some bits

00:01:16,799 --> 00:01:20,999
And this is what our friends come in with assembly

00:01:22,960 --> 00:01:30,419
And this is like a tale of two worlds we have the JavaScript world which is the world of

00:01:31,119 --> 00:01:37,019
simplicity, elegance and the world of web assembly which is a world of performance and

00:01:37,420 --> 00:01:43,829
Once we combine these two worlds we can open a portal and make really great apps

00:01:46,720 --> 00:01:47,770
Now

00:01:47,770 --> 00:01:55,290
In webassembly it is a binary format, which you can use any language you want but for now I'll pick rust

00:01:55,869 --> 00:02:00,119
The reason I pick rust is we call first is really modern you

00:02:00,850 --> 00:02:03,839
Can use Map reduce, you can use

00:02:04,610 --> 00:02:09,789
many a lot a libraries which can makes your life really easy and

00:02:10,520 --> 00:02:16,329
Next Rust is like my mom my mom loves to school at me, but she's has good intentions

00:02:16,910 --> 00:02:23,199
So when you write really bad code Rust will scream at you the compiler will not let you compile

00:02:23,450 --> 00:02:25,509
Until you make your code good

00:02:26,600 --> 00:02:28,600
At last it is really fast

00:02:29,270 --> 00:02:34,659
Rust done a lot of shaking at compile time so it can

00:02:35,720 --> 00:02:38,889
it can compile combine your code and

00:02:39,500 --> 00:02:44,860
It makes everything really fast, and it can use a lot of LLVM optimizations

00:02:46,790 --> 00:02:48,790
Now I

00:02:49,010 --> 00:02:50,770
Know a lot of you might wonder

00:02:50,770 --> 00:02:56,199
How hard it is to use it because it is from I know another world another language

00:02:56,600 --> 00:02:58,929
But the good news is is really easy

00:02:59,900 --> 00:03:02,620
First you have to import your module

00:03:02,620 --> 00:03:08,620
Which you can import like another JavaScript module and the webpack loader will handle the rest for you

00:03:09,440 --> 00:03:11,090
you can just

00:03:11,090 --> 00:03:16,630
Await the module, and then you can call it like this from the JavaScript function as usual

00:03:18,290 --> 00:03:25,479
Now how do you export your functions the good new is you can write your JavaScript directly in Rust

00:03:25,820 --> 00:03:31,479
so you can do `console.log` from Rust you can do `module.exports` from Rust and

00:03:32,209 --> 00:03:37,988
anything really you can modify the DOM, you can modify the canvas

00:03:38,690 --> 00:03:42,579
and it will call out to JavaScript just for you and

00:03:44,510 --> 00:03:48,399
This is a great part, so let's do some demo. Shall we?

00:03:57,600 --> 00:04:04,370
Okay, so here's my commit history and you all can do this project at Phoomparin /react-rust

00:04:05,550 --> 00:04:06,840
and

00:04:06,840 --> 00:04:11,030
This is a starter kit so any of you can go and download it right away

00:04:16,200 --> 00:04:18,409
Okay, so here's some knock-knock jokes

00:04:19,380 --> 00:04:26,959
When I hit reply it will go call out to rust and fast and fast time replies for me. Here we go.

00:04:27,630 --> 00:04:29,630
Oh, that wasn't what I expected

00:04:30,990 --> 00:04:32,160
Okay

00:04:32,160 --> 00:04:33,390
so

00:04:33,390 --> 00:04:40,099
So the JavaScript code call out to Rust and it gives us some replies. Let's check the code and

00:04:41,040 --> 00:04:45,770
As you can see you can just write react like you would as usual

00:04:46,740 --> 00:04:48,740
But the good part is

00:04:51,360 --> 00:04:58,610
You can simply import your web assembly functions and use it in your Redux reducer

00:05:00,510 --> 00:05:03,589
So here I just make Redux, akka

00:05:04,290 --> 00:05:07,189
listens for the actions, and then it will call out to

00:05:07,890 --> 00:05:09,570
webassembly

00:05:09,570 --> 00:05:10,650
Okay

00:05:10,650 --> 00:05:13,580
So really this is our. I have to say

00:05:14,130 --> 00:05:16,520
so thank you everyone for listening and

00:05:17,040 --> 00:05:19,040

YouTube URL: https://www.youtube.com/watch?v=-2iJG0FVGaY


