Title: Irina Shestak: Storytelling With Performance Observers - JSConf.Asia 2018
Publication date: 2018-02-02
Playlist: JSConf.Asia 2018
Description: 
	Chances are that if you work in software, you spend time building applications. Between features, deadlines and bug fixes, it's easy to move performance to be ""nice to have"". But what do you do when user interactions drop off, and users start complaining? Instead of having a traditional, reactive approach to performance — what if we could be proactive instead? What if we could monitor performance continuously, and make informed decisions on which issues to tackle. In this talk, I would like to focus on continuous performance monitoring to tell a story of user interactions. We will look into working with Performance API in your environment, and give you simple methods to tell and read a story of your transactions. We will specifically take a look at creating timings, working with observers, and tracking transactions from frontend to backend.

Irina is a Berlin via London via Vancouver (geeeez grrrl) software developer who is, oh hey, hello, really into Node.js. She writes the coolest of nodes over at scripto.cc and contributes to a few OSS projects. Away from the computer, she is exploring the outdoors, gushing over trains and likely at a ramen shop™ reading some Beatniks.


JSConf.Asia - Capitol Theatre, Singapore - 27 January 2018

Source: https://2018.jsconf.asia/

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:00,180 --> 00:00:13,380
[Music]

00:00:11,269 --> 00:00:16,049
thank you so much for having me although

00:00:13,380 --> 00:00:18,330
in Singapore this is my first time in

00:00:16,049 --> 00:00:22,410
Singapore and my first time in Southeast

00:00:18,330 --> 00:00:25,619
Asia so I'm kind of excited you have

00:00:22,410 --> 00:00:28,949
like so many good plants it's it's

00:00:25,619 --> 00:00:30,929
pretty it's I love it and wildlife is

00:00:28,949 --> 00:00:33,090
pretty good I'm like used to Cody's and

00:00:30,929 --> 00:00:35,130
little trash pandas in my backyard but

00:00:33,090 --> 00:00:35,690
you have like lizards which is really

00:00:35,130 --> 00:00:40,410
cool

00:00:35,690 --> 00:00:42,570
yeah way better alright so I'm gonna

00:00:40,410 --> 00:00:45,719
talk about storytelling and I'm gonna

00:00:42,570 --> 00:00:56,129
talk about using performance observers

00:00:45,719 --> 00:00:58,590
to do that so I'm arena hello

00:00:56,129 --> 00:01:01,469
I am a developer you can find me on

00:00:58,590 --> 00:01:03,840
github I do

00:01:01,469 --> 00:01:05,790
code for work and sometimes I maintain a

00:01:03,840 --> 00:01:07,260
few projects here and there write up a

00:01:05,790 --> 00:01:10,740
few projects here in there in my spare

00:01:07,260 --> 00:01:16,170
time but in other parts of my time I

00:01:10,740 --> 00:01:18,270
like to draw and so sometimes I draw

00:01:16,170 --> 00:01:21,180
like random stuff but sometimes I draw

00:01:18,270 --> 00:01:22,650
what I like to call computer art so it's

00:01:21,180 --> 00:01:24,390
like little guides that I've put

00:01:22,650 --> 00:01:26,250
together on several things that are

00:01:24,390 --> 00:01:28,590
interesting in the computer world like

00:01:26,250 --> 00:01:31,799
things on streams or working with async

00:01:28,590 --> 00:01:33,329
hooks or how v8 works and so today's

00:01:31,799 --> 00:01:35,880
talk is gonna be a little bit like that

00:01:33,329 --> 00:01:37,920
but in a talk format so I've tried to

00:01:35,880 --> 00:01:39,869
like kind of build a narrative around

00:01:37,920 --> 00:01:42,960
using performance observers and how we

00:01:39,869 --> 00:01:46,320
can use those as narrative in our own

00:01:42,960 --> 00:01:48,570
applications I also like ramen so

00:01:46,320 --> 00:01:50,790
there's a few pictures of ramen I hope

00:01:48,570 --> 00:01:54,149
you like ramen too ate a lot of ramen

00:01:50,790 --> 00:01:56,399
I had like 11 bowls of ramen for the 13

00:01:54,149 --> 00:01:57,270
days I was in Japan and December it was

00:01:56,399 --> 00:01:59,520
pretty great

00:01:57,270 --> 00:02:01,649
so hello storytelling performance

00:01:59,520 --> 00:02:03,390
observers like I said we're gonna try to

00:02:01,649 --> 00:02:05,909
build it a little bit of a narrative as

00:02:03,390 --> 00:02:08,489
to how we can build out applications

00:02:05,909 --> 00:02:11,340
know a little bit more about them as we

00:02:08,489 --> 00:02:14,940
work in our enid process

00:02:11,340 --> 00:02:16,650
so mostly I'll be talking about node but

00:02:14,940 --> 00:02:21,270
there might be some kind of browser

00:02:16,650 --> 00:02:24,300
references to that as well so why are we

00:02:21,270 --> 00:02:26,280
even here like why why do we want to

00:02:24,300 --> 00:02:28,650
kind of find out more about our

00:02:26,280 --> 00:02:33,000
applications I think that comes down to

00:02:28,650 --> 00:02:34,769
the fact that we like we need to have

00:02:33,000 --> 00:02:37,349
more knowledge as to what's going on we

00:02:34,769 --> 00:02:39,330
want to know or when a request comes in

00:02:37,349 --> 00:02:41,819
and what happens after that and how long

00:02:39,330 --> 00:02:43,470
does it take for us to look up a thing

00:02:41,819 --> 00:02:46,650
in the database how long does it take us

00:02:43,470 --> 00:02:48,660
to do I put in the database what's the

00:02:46,650 --> 00:02:50,700
difference between writing to the

00:02:48,660 --> 00:02:53,790
database versus writing to Redis and

00:02:50,700 --> 00:02:54,989
these kinds of metrics we kind of we

00:02:53,790 --> 00:02:58,190
kind of want to know it all and

00:02:54,989 --> 00:03:02,239
sometimes it's hard in your processes

00:02:58,190 --> 00:03:04,530
but we want to know the numbers anyway

00:03:02,239 --> 00:03:06,360
and numbers are pretty important so

00:03:04,530 --> 00:03:08,640
that's kind of the thing like we want to

00:03:06,360 --> 00:03:10,489
know the numbers because numbers gets us

00:03:08,640 --> 00:03:13,019
places and then we can either improve or

00:03:10,489 --> 00:03:15,570
I don't know I don't know if we want to

00:03:13,019 --> 00:03:18,030
not improve but or stay the same in

00:03:15,570 --> 00:03:20,340
terms of how we build stuff out it's

00:03:18,030 --> 00:03:23,640
numbers numbers are pretty important but

00:03:20,340 --> 00:03:25,590
where numbers takes us is you know to

00:03:23,640 --> 00:03:27,480
kind of keep on with us with a theme of

00:03:25,590 --> 00:03:29,519
storytelling and having a narrative a

00:03:27,480 --> 00:03:31,140
lot of the times what we'll do to get

00:03:29,519 --> 00:03:33,390
some sort of story or some sort of

00:03:31,140 --> 00:03:37,140
tracking in our applications as having

00:03:33,390 --> 00:03:39,000
loggers so there's one like you know

00:03:37,140 --> 00:03:40,440
there is a pinot logger that gets just a

00:03:39,000 --> 00:03:42,630
little bit of information about what

00:03:40,440 --> 00:03:45,150
happens in our application we put that

00:03:42,630 --> 00:03:48,389
together with our server and we get some

00:03:45,150 --> 00:03:51,359
data out so we can see how long like how

00:03:48,389 --> 00:03:53,579
long something takes can probably get a

00:03:51,359 --> 00:03:55,410
little bit more from the process ID and

00:03:53,579 --> 00:03:57,510
we kind of can use that information to

00:03:55,410 --> 00:04:00,269
our advantage and kind of build out that

00:03:57,510 --> 00:04:03,180
narrative so loggers loggers are great

00:04:00,269 --> 00:04:05,370
but we wanted to kind of go from numbers

00:04:03,180 --> 00:04:07,470
and we want to be able to track some

00:04:05,370 --> 00:04:09,030
sort of information from there right we

00:04:07,470 --> 00:04:11,010
don't want to just have numbers that are

00:04:09,030 --> 00:04:13,350
unrelated to each other so we want to go

00:04:11,010 --> 00:04:15,900
from numbers to tracking and eventually

00:04:13,350 --> 00:04:19,530
maybe go to something like tracing to be

00:04:15,900 --> 00:04:21,340
able to actually build a proper

00:04:19,530 --> 00:04:31,650
narrative about our

00:04:21,340 --> 00:04:33,849
so tracing wood is tracing strange I

00:04:31,650 --> 00:04:37,240
wasn't listening to Bobby when I was

00:04:33,849 --> 00:04:40,479
putting this together but I don't know

00:04:37,240 --> 00:04:43,599
just kinda came to mind so open tracing

00:04:40,479 --> 00:04:46,389
IO is a pretty good source or pretty

00:04:43,599 --> 00:04:48,039
good kind of metric or sorry not we're

00:04:46,389 --> 00:04:50,020
talking the word I'm looking for a

00:04:48,039 --> 00:04:52,090
standard so they've put together kind of

00:04:50,020 --> 00:04:53,500
a thing about what tracing does so

00:04:52,090 --> 00:04:55,120
tracing tells you a story of a

00:04:53,500 --> 00:04:57,219
transaction so tracing is a lot about

00:04:55,120 --> 00:05:00,009
what a workflow does and what a

00:04:57,219 --> 00:05:01,569
transaction does in your system and you

00:05:00,009 --> 00:05:04,150
want to be able to kind of propagate it

00:05:01,569 --> 00:05:06,729
through a system and see what it is that

00:05:04,150 --> 00:05:08,650
you come up with so eventually you

00:05:06,729 --> 00:05:11,740
basically have like a single parent and

00:05:08,650 --> 00:05:13,330
a single parent has a bunch of children

00:05:11,740 --> 00:05:15,069
that it spins up like different

00:05:13,330 --> 00:05:17,560
processes that start off with a single

00:05:15,069 --> 00:05:19,839
parent those children can have other

00:05:17,560 --> 00:05:21,729
children and so eventually you kind of

00:05:19,839 --> 00:05:25,000
build out this tree so the way to think

00:05:21,729 --> 00:05:30,189
about it is that for example you have a

00:05:25,000 --> 00:05:32,289
play in four parts the play itself is a

00:05:30,189 --> 00:05:34,810
trace or parent and then the four parts

00:05:32,289 --> 00:05:37,659
are like the spans and like the acts in

00:05:34,810 --> 00:05:39,069
the four parts or the spans spans and

00:05:37,659 --> 00:05:42,759
things like that so it's kind of like

00:05:39,069 --> 00:05:45,729
your story but in a more technical point

00:05:42,759 --> 00:05:49,000
of view and so like I said before a

00:05:45,729 --> 00:05:52,229
trace is a trace is useful to put

00:05:49,000 --> 00:05:54,580
together transaction right so a

00:05:52,229 --> 00:05:56,649
transaction is something like a request

00:05:54,580 --> 00:05:59,589
so putting together a history of a

00:05:56,649 --> 00:06:01,750
request will build a trace of the said

00:05:59,589 --> 00:06:03,819
request so if we were to look at

00:06:01,750 --> 00:06:06,069
something like this we are then able to

00:06:03,819 --> 00:06:08,560
say that okay our entire trace is this

00:06:06,069 --> 00:06:11,229
and then it soul spans is an actual post

00:06:08,560 --> 00:06:14,169
request and then from that post request

00:06:11,229 --> 00:06:16,389
we went to authenticate the user we went

00:06:14,169 --> 00:06:19,479
to from that post request get the data

00:06:16,389 --> 00:06:21,099
save it to Redis but we also wanted to

00:06:19,479 --> 00:06:23,229
save it to the database so these are the

00:06:21,099 --> 00:06:26,199
two spans that can work at the same time

00:06:23,229 --> 00:06:27,789
and then part of that is we want to send

00:06:26,199 --> 00:06:30,069
back some sort of message to the user

00:06:27,789 --> 00:06:31,779
and so that entire thing makes up the

00:06:30,069 --> 00:06:35,080
trace and these different transactions

00:06:31,779 --> 00:06:38,960
kind of put together in there

00:06:35,080 --> 00:06:42,680
and so that I talked about tracing but

00:06:38,960 --> 00:06:44,270
then I want to like go back to the

00:06:42,680 --> 00:06:47,120
performance timeline and the performance

00:06:44,270 --> 00:06:48,680
API so it's interesting to know the

00:06:47,120 --> 00:06:51,259
narrative and tracing kind of helps us

00:06:48,680 --> 00:06:53,240
build that narrative about what it is

00:06:51,259 --> 00:06:55,249
that's going on but I wanted to look

00:06:53,240 --> 00:06:57,499
into the performance timeline and the

00:06:55,249 --> 00:07:00,879
performance API and see what kind of

00:06:57,499 --> 00:07:04,930
information I can get from using that

00:07:00,879 --> 00:07:07,159
kind of thing so what happened is that

00:07:04,930 --> 00:07:10,789
performance timeline kind of got put

00:07:07,159 --> 00:07:15,550
together by the w3c and that's what got

00:07:10,789 --> 00:07:19,189
implemented in both the browser and node

00:07:15,550 --> 00:07:21,080
so window dot performance if most

00:07:19,189 --> 00:07:25,039
browsers now support this you're able to

00:07:21,080 --> 00:07:27,259
kind of get whatever the information you

00:07:25,039 --> 00:07:29,719
need on timing and navigation in window

00:07:27,259 --> 00:07:34,009
performance the equivalent to that is

00:07:29,719 --> 00:07:36,589
require perfect and note in node greater

00:07:34,009 --> 00:07:38,599
than 8.5 so then you're kind of getting

00:07:36,589 --> 00:07:41,330
the same thing by requiring per folks

00:07:38,599 --> 00:07:43,250
and having the performance object there

00:07:41,330 --> 00:07:49,039
are so also timings and node origin and

00:07:43,250 --> 00:07:51,740
that's kind of thing so per folks or is

00:07:49,039 --> 00:07:53,419
is the establishment of what an

00:07:51,740 --> 00:07:56,779
application timeline is so what is an

00:07:53,419 --> 00:07:59,539
application timeline so essentially it

00:07:56,779 --> 00:08:00,979
is a timeline so a request or a trace of

00:07:59,539 --> 00:08:03,110
their quests like we talked to you we're

00:08:00,979 --> 00:08:04,849
talking about the trace so kind of the

00:08:03,110 --> 00:08:05,990
same thing request you start off with

00:08:04,849 --> 00:08:07,310
that and the things that happened

00:08:05,990 --> 00:08:10,210
throughout that and the things you can

00:08:07,310 --> 00:08:15,169
measure go together in an application

00:08:10,210 --> 00:08:16,789
timeline so in a case of browser you're

00:08:15,169 --> 00:08:18,740
kind of looking at a few different

00:08:16,789 --> 00:08:20,539
things you're looking at when they're

00:08:18,740 --> 00:08:22,490
reserved loads you're looking at a pain

00:08:20,539 --> 00:08:24,680
time you might be looking at the

00:08:22,490 --> 00:08:26,149
navigation so these are the kinds of

00:08:24,680 --> 00:08:27,889
things that go inside the performance

00:08:26,149 --> 00:08:30,259
timeline

00:08:27,889 --> 00:08:32,240
so let's actually dig a little bit

00:08:30,259 --> 00:08:35,570
deeper so require perfect let's look

00:08:32,240 --> 00:08:39,070
into it so we're able to get a few

00:08:35,570 --> 00:08:41,570
things from performed dot performance

00:08:39,070 --> 00:08:43,460
per folks and

00:08:41,570 --> 00:08:45,500
the access to mark and measure so what

00:08:43,460 --> 00:08:47,090
are these mark and measure things well

00:08:45,500 --> 00:08:49,130
the easiest way to go about it was

00:08:47,090 --> 00:08:52,310
actually like digging through the API

00:08:49,130 --> 00:08:54,050
so when you want to get something to be

00:08:52,310 --> 00:08:58,130
marked or measured within your

00:08:54,050 --> 00:08:59,960
performance timeline you basically want

00:08:58,130 --> 00:09:02,530
to find out how long something takes to

00:08:59,960 --> 00:09:05,210
load or how long's a process takes to

00:09:02,530 --> 00:09:06,800
run or like if you're running a loop

00:09:05,210 --> 00:09:08,330
like how long does it take you to get

00:09:06,800 --> 00:09:12,650
through the entire look kind of thing so

00:09:08,330 --> 00:09:16,220
what you'll start off with is you mark a

00:09:12,650 --> 00:09:17,690
start point in your timeline or and in

00:09:16,220 --> 00:09:20,210
your application you mark an end point

00:09:17,690 --> 00:09:22,460
in your application and then you are

00:09:20,210 --> 00:09:25,000
able to run a doc measure on it and see

00:09:22,460 --> 00:09:27,980
how long that piece of code takes to run

00:09:25,000 --> 00:09:30,920
you're then able to get entries from it

00:09:27,980 --> 00:09:33,650
and seeing what exactly that particular

00:09:30,920 --> 00:09:38,120
entry looks like it's start time its

00:09:33,650 --> 00:09:41,300
duration what type it is is it and then

00:09:38,120 --> 00:09:43,880
afterwards you've got to clear it like

00:09:41,300 --> 00:09:46,790
erase it all together so it's not part

00:09:43,880 --> 00:09:50,000
of your timeline anymore so what it

00:09:46,790 --> 00:09:52,040
looks like code wise is like this so for

00:09:50,000 --> 00:09:55,550
example we have a simple post request

00:09:52,040 --> 00:09:56,990
that we're trying to make we're pressing

00:09:55,550 --> 00:09:59,180
the data or we're writing into the

00:09:56,990 --> 00:10:00,860
database and then what we want to do is

00:09:59,180 --> 00:10:02,810
we want to set a mark in the beginning

00:10:00,860 --> 00:10:05,180
of that pork's request just to see how

00:10:02,810 --> 00:10:07,180
long the the put actually takes how long

00:10:05,180 --> 00:10:10,580
does it take us to spit the data back up

00:10:07,180 --> 00:10:15,200
to your client what you're then able to

00:10:10,580 --> 00:10:18,020
do is mark an end within that put and

00:10:15,200 --> 00:10:18,800
you are then able to measure it out from

00:10:18,020 --> 00:10:22,190
start to end

00:10:18,800 --> 00:10:24,860
so something like this and then once

00:10:22,190 --> 00:10:28,190
you're able to get the entries of that

00:10:24,860 --> 00:10:30,890
particular start to end measurement out

00:10:28,190 --> 00:10:34,250
you're able to print it off and see how

00:10:30,890 --> 00:10:37,580
long something like that take so this is

00:10:34,250 --> 00:10:39,890
an example that I wrote making a raman

00:10:37,580 --> 00:10:41,360
database for myself so I can know all

00:10:39,890 --> 00:10:42,980
the good ramen shops and remember them

00:10:41,360 --> 00:10:45,890
because at this point I went to too many

00:10:42,980 --> 00:10:47,810
and I don't remember so I heard Keisuke

00:10:45,890 --> 00:10:49,100
is good in Singapore somebody tell me

00:10:47,810 --> 00:10:52,160
otherwise or like tell me a different

00:10:49,100 --> 00:10:54,300
one so you get the performance entry out

00:10:52,160 --> 00:10:56,580
and it's got the

00:10:54,300 --> 00:10:58,650
the entry type start time and the

00:10:56,580 --> 00:11:00,270
duration so able to work with that and

00:10:58,650 --> 00:11:04,590
see how long something like that takes

00:11:00,270 --> 00:11:06,300
cool and this is again like to zoom in

00:11:04,590 --> 00:11:09,540
this is what the entry object looks like

00:11:06,300 --> 00:11:11,640
name entry type start time and how long

00:11:09,540 --> 00:11:13,590
it actually takes really useful for

00:11:11,640 --> 00:11:15,270
debugging

00:11:13,590 --> 00:11:17,340
so let's actually zoom in into that

00:11:15,270 --> 00:11:21,630
performance entry so we started off by

00:11:17,340 --> 00:11:23,430
saying we have a time line we have

00:11:21,630 --> 00:11:26,340
certain entries inside that time line

00:11:23,430 --> 00:11:28,290
certain things that need to load but

00:11:26,340 --> 00:11:30,330
let's look at the performance buffer so

00:11:28,290 --> 00:11:32,400
performance buffer is where we put all

00:11:30,330 --> 00:11:35,160
of the entries in so every time we do a

00:11:32,400 --> 00:11:36,180
mark like we did an example and know

00:11:35,160 --> 00:11:38,640
what every time there's a garbage

00:11:36,180 --> 00:11:40,890
collection entry or a function entry or

00:11:38,640 --> 00:11:44,250
a note entry these kinds of things they

00:11:40,890 --> 00:11:46,500
all go into the performance buffer so

00:11:44,250 --> 00:11:52,950
there is like a used up space and unused

00:11:46,500 --> 00:11:54,780
up space which means there and the thing

00:11:52,950 --> 00:11:57,060
about the the buffer itself is that

00:11:54,780 --> 00:11:58,560
there's only 150 entries you can have in

00:11:57,060 --> 00:12:00,570
there which means you've got to clear

00:11:58,560 --> 00:12:02,490
them so when I was mentioning previously

00:12:00,570 --> 00:12:04,350
like we've got a clear at the end of the

00:12:02,490 --> 00:12:05,850
the mark and the measure it's because

00:12:04,350 --> 00:12:07,980
the buffer fills up and then we get

00:12:05,850 --> 00:12:10,460
memory leaks so you kind of want to make

00:12:07,980 --> 00:12:13,050
sure the buffer is consistently cleared

00:12:10,460 --> 00:12:15,780
and so there's a few different types of

00:12:13,050 --> 00:12:17,460
them note has different ones in the

00:12:15,780 --> 00:12:22,040
browser so I'm gonna do the comparison

00:12:17,460 --> 00:12:25,080
here so node has mark and measure node

00:12:22,040 --> 00:12:28,080
garbage collection function 8 and http2

00:12:25,080 --> 00:12:29,550
for now maybe there will be more once a

00:12:28,080 --> 00:12:32,550
few more pull requests come in kind of

00:12:29,550 --> 00:12:34,020
thing and the browser also does the

00:12:32,550 --> 00:12:37,710
paint events and the frames and

00:12:34,020 --> 00:12:40,790
navigation and resources cool but like I

00:12:37,710 --> 00:12:42,990
said previously we this buffer only has

00:12:40,790 --> 00:12:44,640
150 entries so we've got to be able to

00:12:42,990 --> 00:12:47,820
clear it as we go

00:12:44,640 --> 00:12:52,140
so you clear that by just calling duck

00:12:47,820 --> 00:12:54,870
clear and to like give you an example of

00:12:52,140 --> 00:12:56,850
what it looks like it's just clear marks

00:12:54,870 --> 00:13:01,110
and clear measures and clear functions

00:12:56,850 --> 00:13:02,880
are the ones that are present in node so

00:13:01,110 --> 00:13:05,500
if we were to clear it and then call

00:13:02,880 --> 00:13:14,080
measure again

00:13:05,500 --> 00:13:18,760
we'll get will basically throw cool so

00:13:14,080 --> 00:13:20,230
you clear it clearly buffer there but

00:13:18,760 --> 00:13:22,810
the thing about this is like okay we're

00:13:20,230 --> 00:13:25,270
kind of marking these as we go along as

00:13:22,810 --> 00:13:27,310
we're debugging the application or we're

00:13:25,270 --> 00:13:29,080
trying to establish like some

00:13:27,310 --> 00:13:31,779
differences between writing toyotas and

00:13:29,080 --> 00:13:33,370
writing to the database for example but

00:13:31,779 --> 00:13:36,670
we need to be able to keep track of

00:13:33,370 --> 00:13:39,850
these so a good way to look at this is

00:13:36,670 --> 00:13:41,620
using the performance observers so what

00:13:39,850 --> 00:13:44,470
our performance observers what are we

00:13:41,620 --> 00:13:46,870
observing really so a performance

00:13:44,470 --> 00:13:49,660
observer is just an instance that takes

00:13:46,870 --> 00:13:51,370
a callback that works with the list of

00:13:49,660 --> 00:13:54,040
the performance entries so the ones we

00:13:51,370 --> 00:13:56,620
talked about previously and the observer

00:13:54,040 --> 00:13:58,660
object so essentially in your

00:13:56,620 --> 00:14:00,310
application you go through certain

00:13:58,660 --> 00:14:02,260
entries so like the marks and the

00:14:00,310 --> 00:14:05,650
measures that we were doing in the above

00:14:02,260 --> 00:14:07,570
example and some stuff that note gives

00:14:05,650 --> 00:14:09,310
you as is like garbage collection events

00:14:07,570 --> 00:14:12,900
obviously you don't specifically mark

00:14:09,310 --> 00:14:16,420
them and all those entries go into the

00:14:12,900 --> 00:14:17,980
their observers list so all of them just

00:14:16,420 --> 00:14:19,150
kind of keep on piling up in there and

00:14:17,980 --> 00:14:20,830
then what you're able to do with that

00:14:19,150 --> 00:14:23,650
list is actually get some information

00:14:20,830 --> 00:14:29,320
out of there so a good example of that

00:14:23,650 --> 00:14:31,839
is so this is how you would set it up

00:14:29,320 --> 00:14:33,430
right like have a few entry types you

00:14:31,839 --> 00:14:35,950
want to monitor and you want to your

00:14:33,430 --> 00:14:39,279
observe it to work with function measure

00:14:35,950 --> 00:14:42,180
I kind of just put them all together and

00:14:39,279 --> 00:14:44,529
then what you do is say okay I'm gonna

00:14:42,180 --> 00:14:49,930
buffer them as well so that they all

00:14:44,529 --> 00:14:52,570
come in like a sync and then once I

00:14:49,930 --> 00:14:54,910
launch my application I get the garbage

00:14:52,570 --> 00:14:56,980
collection events and then the ones that

00:14:54,910 --> 00:15:02,860
I've marked previously to kind of get

00:14:56,980 --> 00:15:03,880
there and I'm actually probably just

00:15:02,860 --> 00:15:07,620
going to show you what I did because

00:15:03,880 --> 00:15:07,620
that code sample was kind of small

00:15:07,900 --> 00:15:17,680
all right how's the font size on that

00:15:10,839 --> 00:15:20,980
okay all right so I worked with the

00:15:17,680 --> 00:15:22,930
entry types and then what my what my

00:15:20,980 --> 00:15:25,570
server did so I just set up like a basic

00:15:22,930 --> 00:15:30,460
server what I set up in my server is I

00:15:25,570 --> 00:15:33,010
marked a few events so one here and then

00:15:30,460 --> 00:15:35,440
I just put one in a loop so it like runs

00:15:33,010 --> 00:15:38,950
through and afterwards are clear the

00:15:35,440 --> 00:15:44,160
marks and what my handler dars is just

00:15:38,950 --> 00:15:48,160
it looks at the entries that come back

00:15:44,160 --> 00:15:50,080
so then if we were to launch the server

00:15:48,160 --> 00:15:52,660
we'll get the to garbage collection

00:15:50,080 --> 00:15:55,180
events and then we'll get the actual

00:15:52,660 --> 00:15:57,130
marks that we are watching for they'll

00:15:55,180 --> 00:15:59,080
come back and is like nice list that you

00:15:57,130 --> 00:16:03,580
can then work with and log out and maybe

00:15:59,080 --> 00:16:10,960
do some more information with it now I

00:16:03,580 --> 00:16:13,660
wanted to I just switched to team acts

00:16:10,960 --> 00:16:15,400
so I'm like my fingers are used to my

00:16:13,660 --> 00:16:16,900
previous bindings and I keep pressing

00:16:15,400 --> 00:16:21,459
the previous bindings and they don't

00:16:16,900 --> 00:16:23,380
work muscle-memory am i right so I'm

00:16:21,459 --> 00:16:32,860
gonna run start and then I'm just gonna

00:16:23,380 --> 00:16:36,760
curl because oh no this wasn't even like

00:16:32,860 --> 00:16:39,790
a demo demo I'm already sucking at this

00:16:36,760 --> 00:16:42,880
so I'm gonna actually run a node example

00:16:39,790 --> 00:16:45,520
yes cuz that was a different thing so I

00:16:42,880 --> 00:16:49,510
get the two performance entries for the

00:16:45,520 --> 00:16:54,120
garbage collection to do two and then

00:16:49,510 --> 00:16:59,860
I'm gonna run the nice little soft serve

00:16:54,120 --> 00:17:04,689
on a tea and then I get all the other

00:16:59,860 --> 00:17:06,429
marks that I've put in there cool so we

00:17:04,689 --> 00:17:08,319
get these like objects all in one

00:17:06,429 --> 00:17:10,030
convenient spot and we can monitor them

00:17:08,319 --> 00:17:13,709
through the performance observer in our

00:17:10,030 --> 00:17:13,709
applications which is great

00:17:15,500 --> 00:17:22,640
so there's I just like these two modules

00:17:19,280 --> 00:17:24,799
I wanted to introduce you to so they

00:17:22,640 --> 00:17:28,220
used to only have because the

00:17:24,799 --> 00:17:30,470
performance API is available in both the

00:17:28,220 --> 00:17:33,500
browser and the server these two worked

00:17:30,470 --> 00:17:35,990
with just the browser's api's and I just

00:17:33,500 --> 00:17:37,490
patched them so they both no work would

00:17:35,990 --> 00:17:39,230
note and make it a little bit easier so

00:17:37,490 --> 00:17:41,299
instead of you having to set up the

00:17:39,230 --> 00:17:43,610
entire observer kind of just on

00:17:41,299 --> 00:17:45,380
performance just observing for you and I

00:17:43,610 --> 00:17:46,850
know timing handles the timing entries

00:17:45,380 --> 00:17:49,850
which were the first things we talked

00:17:46,850 --> 00:17:51,500
about so it's kind of easy to get to

00:17:49,850 --> 00:17:55,059
work with that and then once you're able

00:17:51,500 --> 00:17:57,740
to use those or just observers

00:17:55,059 --> 00:17:59,720
performance observer API or at the mark

00:17:57,740 --> 00:18:01,940
and measure it kind of can just put them

00:17:59,720 --> 00:18:03,289
into like any application node

00:18:01,940 --> 00:18:06,559
application you want like you can work

00:18:03,289 --> 00:18:10,039
make it work with FASTA Phi or like the

00:18:06,559 --> 00:18:11,450
one I work on is Mary but either/or like

00:18:10,039 --> 00:18:14,150
you can just put that in your

00:18:11,450 --> 00:18:17,870
application and kind of start seeing how

00:18:14,150 --> 00:18:19,460
you can work with those but kind of the

00:18:17,870 --> 00:18:20,960
things I wanted to talk about is that

00:18:19,460 --> 00:18:23,830
okay so I was playing around with these

00:18:20,960 --> 00:18:27,110
and I wanted to do quite a bit of like

00:18:23,830 --> 00:18:29,390
storytelling with performance observers

00:18:27,110 --> 00:18:33,289
but what I ended up finding out is that

00:18:29,390 --> 00:18:35,600
it's mark and measure super useful to be

00:18:33,289 --> 00:18:37,700
able to figure out like how long

00:18:35,600 --> 00:18:39,110
something takes in your application and

00:18:37,700 --> 00:18:42,080
it's useful for debugging like

00:18:39,110 --> 00:18:44,059
development purposes but it doesn't

00:18:42,080 --> 00:18:46,520
actually build like a narrative property

00:18:44,059 --> 00:18:48,919
properly because you're not able to kind

00:18:46,520 --> 00:18:51,590
of put anything together and you want to

00:18:48,919 --> 00:18:53,390
be able to have a story and you want to

00:18:51,590 --> 00:18:57,080
be able to put a trace together and you

00:18:53,390 --> 00:18:58,429
want to be able to kind of chain things

00:18:57,080 --> 00:19:00,140
and that's a little bit harder with

00:18:58,429 --> 00:19:03,080
observables so I found that it's like

00:19:00,140 --> 00:19:04,429
it's definitely a development thing and

00:19:03,080 --> 00:19:07,190
development environment thing to be able

00:19:04,429 --> 00:19:09,409
to kind of predict that before you

00:19:07,190 --> 00:19:11,900
deploy to production kind of thing so

00:19:09,409 --> 00:19:14,059
building narrative is hard but the thing

00:19:11,900 --> 00:19:16,909
that I found is that okay so I want to

00:19:14,059 --> 00:19:20,150
be able to build narrative and the API

00:19:16,909 --> 00:19:21,980
that I like for that is actually async

00:19:20,150 --> 00:19:23,540
hooks and this talk was not meant to be

00:19:21,980 --> 00:19:25,790
about acing hoops but I wanted to

00:19:23,540 --> 00:19:26,850
briefly mention them as well so with

00:19:25,790 --> 00:19:28,800
that with async Oh

00:19:26,850 --> 00:19:32,790
so I think I'm able to build an actual

00:19:28,800 --> 00:19:34,650
proper kind of trackable narrative that

00:19:32,790 --> 00:19:37,830
I want to be able to see in my

00:19:34,650 --> 00:19:41,520
application code and because performance

00:19:37,830 --> 00:19:43,800
observers kind of add and performance

00:19:41,520 --> 00:19:46,920
api adds a bit of an overhead in your

00:19:43,800 --> 00:19:48,960
application async Oaks are much less so

00:19:46,920 --> 00:19:50,730
and plus they add a little bit of a

00:19:48,960 --> 00:19:53,370
narrative to it so you gotta kind of

00:19:50,730 --> 00:19:54,930
balance those out as to what what is you

00:19:53,370 --> 00:19:57,960
gotta cost it out like as to what you

00:19:54,930 --> 00:20:00,690
want but like I said I didn't want this

00:19:57,960 --> 00:20:03,000
talk to be on ASA cook so I just briefly

00:20:00,690 --> 00:20:05,100
mentioning them and there's like a talk

00:20:03,000 --> 00:20:07,050
that Thurston Lawrence did add note

00:20:05,100 --> 00:20:08,640
convey about them he's done a bunch of

00:20:07,050 --> 00:20:11,610
work with them and it's like really good

00:20:08,640 --> 00:20:14,030
and I also wrote a little guide for them

00:20:11,610 --> 00:20:17,250
as well if you want to look into that

00:20:14,030 --> 00:20:19,140
and there's like a module that actually

00:20:17,250 --> 00:20:21,810
helps you create traceable events that

00:20:19,140 --> 00:20:27,540
you can specifically Rison to and build

00:20:21,810 --> 00:20:28,950
a better narrative so kind of wrapping

00:20:27,540 --> 00:20:30,930
up as to what we talked about so we

00:20:28,950 --> 00:20:34,170
talked about the performance timeline we

00:20:30,930 --> 00:20:35,640
talked about being able to look at the

00:20:34,170 --> 00:20:39,810
timeline and see kind of what

00:20:35,640 --> 00:20:41,790
performance entries we can look at and

00:20:39,810 --> 00:20:46,530
what kind of useful information we can

00:20:41,790 --> 00:20:49,530
derive from them so that we also talked

00:20:46,530 --> 00:20:51,810
about the specific mark and measure and

00:20:49,530 --> 00:20:54,180
using those to be able to debug certain

00:20:51,810 --> 00:20:57,120
parts of our application and work with

00:20:54,180 --> 00:20:59,310
those parts of our applications and we

00:20:57,120 --> 00:21:01,860
also talked about the fact that once we

00:20:59,310 --> 00:21:04,010
were able to get all of our entries in

00:21:01,860 --> 00:21:07,260
one place we're able to see and compare

00:21:04,010 --> 00:21:08,790
what exactly that they do in our

00:21:07,260 --> 00:21:15,210
application using the performance

00:21:08,790 --> 00:21:17,400
observer portion of the API yeah so that

00:21:15,210 --> 00:21:20,130
was the talk I wanted to give I am

00:21:17,400 --> 00:21:22,230
really happy that you're able to have me

00:21:20,130 --> 00:21:26,040
I hope you enjoyed it and if you have

00:21:22,230 --> 00:21:29,900
any more questions come say hi on

00:21:26,040 --> 00:21:29,900
Twitter or just come say hi

00:21:30,530 --> 00:21:32,590

YouTube URL: https://www.youtube.com/watch?v=dpxq4QWVhc0


