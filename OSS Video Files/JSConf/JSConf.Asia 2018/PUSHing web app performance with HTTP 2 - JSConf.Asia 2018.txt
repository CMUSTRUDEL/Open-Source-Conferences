Title: PUSHing web app performance with HTTP 2 - JSConf.Asia 2018
Publication date: 2018-02-20
Playlist: JSConf.Asia 2018
Description: 
	Speaker:
Inian Parameshwaran @everConfusedGuy
Sebastiaan Deckers @sebdeckers

The workshop will cover different techniques on adapting websites to the upcoming HTTP/2 protocol. By the end of the workshop, participants would be well equipped with the tools and skills required to update and deploy a production-ready HTTP/2 website. We will be discussing the problems of HTTP/1.1 and how HTTP/2 helps obviate hacks such as bundling, domain sharding, etc. that were required in the HTTP/1.1 world. We will then discuss new architectures and paradigms enabled by features like HTTP/2 PUSH and the caveats to keep in mind when deploying such features to your users. Participants will learn to analyse, measure and optimise common performance problems when deploying such applications by working through the exercises in the workshop. They will also learn how to adapt their front-end tooling to be HTTP/2 ready. Finally, we will be talking about some of the new standards and protocols that are coming up after HTTP/2 and how to remain ahead of the curve. 

Requirements: Bring your own laptop and chargers

Inian is the founder of a web performance company, Dexecure. He loves JavaScript, chocolates and anything related to web performance and security. He is a strong believer in the importance of having an open, decentralised and uncensored web ecosystem. 

Sebastiaan is a Singapore-based indie hacker. His recent open source work on HTTP/2 made him a Node.js Collaborator. He founded http2.live, the next-gen CDN that served you this website.

Event Page: https://2018.jsconf.asia

Produced by Engineers.SG
Recorded by: Huiren Woo

Help us caption & translate this video!

https://amara.org/v/eoMP/
Captions: 
	00:00:00,000 --> 00:00:05,250
wait a little bit there there's no PA

00:00:03,929 --> 00:00:08,010
right so like I feel like actually you

00:00:05,250 --> 00:00:11,309
can you hear me at the back sort of okay

00:00:08,010 --> 00:00:14,490
I know if I start mumbling too much so

00:00:11,309 --> 00:00:15,509
hey this is the http/2 workshop just to

00:00:14,490 --> 00:00:20,060
make sure everyone's in the right place

00:00:15,509 --> 00:00:20,060
okay so you are

00:00:27,689 --> 00:00:33,899
I'm Sebastian Decker's I'm sort of just

00:00:30,929 --> 00:00:36,989
open source guy for the last year hb2

00:00:33,899 --> 00:00:39,600
sort of been my project we can hack it

00:00:36,989 --> 00:00:41,190
hack project thing and then sort of it's

00:00:39,600 --> 00:00:43,649
been going completely dominating my life

00:00:41,190 --> 00:00:44,700
for the last year half I've been working

00:00:43,649 --> 00:00:47,700
on this for a long time now and I'd like

00:00:44,700 --> 00:00:52,590
to share some of what I've learnt along

00:00:47,700 --> 00:00:53,670
the way and built along the way so I'm

00:00:52,590 --> 00:00:55,680
going to start with like a little

00:00:53,670 --> 00:00:57,570
introduction on HTTP to but before we do

00:00:55,680 --> 00:01:00,809
that like who here's actually using HP

00:00:57,570 --> 00:01:01,280
to or knows sort of a little bit about

00:01:00,809 --> 00:01:04,500
it already

00:01:01,280 --> 00:01:06,360
okay that's like if there's okay

00:01:04,500 --> 00:01:10,640
fantastic who is shy of raising their

00:01:06,360 --> 00:01:14,939
hands okay everyone all right

00:01:10,640 --> 00:01:16,979
so excellent so like I am just gonna

00:01:14,939 --> 00:01:19,200
touch like sort of lightly on HTTP -

00:01:16,979 --> 00:01:22,290
because the protocol itself is actually

00:01:19,200 --> 00:01:23,970
really similar to HTTP one which I mean

00:01:22,290 --> 00:01:26,250
we've all okay we're all web developers

00:01:23,970 --> 00:01:27,659
here like I don't to make too many

00:01:26,250 --> 00:01:29,790
assumptions so like if you're like

00:01:27,659 --> 00:01:31,259
coming in here from a Rath Haskell

00:01:29,790 --> 00:01:32,970
functional programming background and

00:01:31,259 --> 00:01:35,340
you've never seen the web then let me

00:01:32,970 --> 00:01:36,990
know but I'll assume like certain things

00:01:35,340 --> 00:01:39,060
about like your knowledge of HTTP that

00:01:36,990 --> 00:01:40,860
you've understand what a request and a

00:01:39,060 --> 00:01:42,570
response are you've ever built a web app

00:01:40,860 --> 00:01:46,490
that serves a response to out requests

00:01:42,570 --> 00:01:48,420
right but what's different in HTTP 2 is

00:01:46,490 --> 00:01:50,939
some of these basic things that I'll

00:01:48,420 --> 00:01:52,890
just go through now so the first concept

00:01:50,939 --> 00:01:56,369
that is really interesting is you have

00:01:52,890 --> 00:01:58,829
streams instead of just sockets so HTTP

00:01:56,369 --> 00:02:02,549
1 everything goes over one socket right

00:01:58,829 --> 00:02:04,799
that means a TCP level socket so to have

00:02:02,549 --> 00:02:07,740
this starter provided and your HTTP goes

00:02:04,799 --> 00:02:09,899
on top of that with every single request

00:02:07,740 --> 00:02:12,120
you need to have a socket and then you

00:02:09,899 --> 00:02:13,350
can send one request wait for a response

00:02:12,120 --> 00:02:15,360
send another request

00:02:13,350 --> 00:02:16,470
wait for another response introduces

00:02:15,360 --> 00:02:19,410
certain things like head-of-line

00:02:16,470 --> 00:02:21,690
blocking which is essentially when you

00:02:19,410 --> 00:02:23,040
have a request that's going out and it's

00:02:21,690 --> 00:02:25,020
like a really huge response that you're

00:02:23,040 --> 00:02:27,900
waiting for you any other requests in

00:02:25,020 --> 00:02:29,760
the meantime wait for you know the the

00:02:27,900 --> 00:02:31,280
the original response to finish before

00:02:29,760 --> 00:02:33,360
they can go out over that same socket

00:02:31,280 --> 00:02:36,030
hp1 you address that with things like

00:02:33,360 --> 00:02:39,300
opening you know six or eight sockets

00:02:36,030 --> 00:02:41,880
all right are you joining for HTTP -

00:02:39,300 --> 00:02:45,180
alright just set yourselves down

00:02:41,880 --> 00:02:49,190
somewhere we've already started but you

00:02:45,180 --> 00:02:49,190
know just the beginning

00:02:52,530 --> 00:03:00,260
okay yeah yeah yeah yeah fine

00:03:09,560 --> 00:03:13,720
oh that's my back

00:03:17,670 --> 00:03:22,680
okay so for the newcomers as well I'm

00:03:20,890 --> 00:03:25,450
just explaining someone a very basic

00:03:22,680 --> 00:03:27,190
theory it's a little dry it's a little

00:03:25,450 --> 00:03:29,680
bit conceptual but we'll get into code

00:03:27,190 --> 00:03:31,390
very quickly and then you get more of a

00:03:29,680 --> 00:03:33,070
an intuitive feeling once you start

00:03:31,390 --> 00:03:35,740
coding and actually using these concepts

00:03:33,070 --> 00:03:39,370
so I'm just talking about streams

00:03:35,740 --> 00:03:40,750
basically consider a HTTP 1 has a socket

00:03:39,370 --> 00:03:42,310
where you have to like wait for a

00:03:40,750 --> 00:03:44,080
response and a request to finish before

00:03:42,310 --> 00:03:47,980
you do the next one with streams the

00:03:44,080 --> 00:03:49,780
idea is that you have one socket and

00:03:47,980 --> 00:03:51,250
over that you have over over that socket

00:03:49,780 --> 00:03:52,570
instead of sending out your request

00:03:51,250 --> 00:03:54,810
right away you can chunk it up into

00:03:52,570 --> 00:03:58,360
little little packets called frames and

00:03:54,810 --> 00:04:00,700
these frames can have a this identifier

00:03:58,360 --> 00:04:02,740
the stream identifier is ID that

00:04:00,700 --> 00:04:04,480
basically let's pretend the various

00:04:02,740 --> 00:04:08,380
stream IDs like various headers and

00:04:04,480 --> 00:04:10,960
various data fragments on the same

00:04:08,380 --> 00:04:12,340
electricity socket so you can have

00:04:10,960 --> 00:04:14,290
multiple requests going out at the same

00:04:12,340 --> 00:04:17,080
time and then some of the responses

00:04:14,290 --> 00:04:18,730
start trickling back data frames and

00:04:17,080 --> 00:04:21,310
sort of by doing this all over one

00:04:18,730 --> 00:04:23,110
socket you gain some some benefit in

00:04:21,310 --> 00:04:25,270
this head of line blocking you no longer

00:04:23,110 --> 00:04:28,690
have to like wait for the response to

00:04:25,270 --> 00:04:31,720
finish but that was sort of that is the

00:04:28,690 --> 00:04:33,160
design of HTTP 2 in practice it turns

00:04:31,720 --> 00:04:35,380
out that you bet you basically just

00:04:33,160 --> 00:04:36,670
pushed a head of line mocking down in

00:04:35,380 --> 00:04:37,870
our level so most tutorials that you'll

00:04:36,670 --> 00:04:40,540
read out there are going to be like oh

00:04:37,870 --> 00:04:41,980
my god we solved HP two solves head of

00:04:40,540 --> 00:04:43,180
line blocking it doesn't actually in

00:04:41,980 --> 00:04:44,770
practice because you just sort of push

00:04:43,180 --> 00:04:45,760
it down one level which is why in the

00:04:44,770 --> 00:04:49,420
last few years people have been working

00:04:45,760 --> 00:04:52,030
on this new spec called quick quick is

00:04:49,420 --> 00:04:53,830
basically dropping TCP altogether and

00:04:52,030 --> 00:04:55,900
just putting everything directly over

00:04:53,830 --> 00:04:58,060
UDP and implementing sort of the

00:04:55,900 --> 00:04:59,710
similarities of like what TCP offers

00:04:58,060 --> 00:05:02,680
this whole there were retransmission and

00:04:59,710 --> 00:05:06,130
control flow implementing that in its

00:05:02,680 --> 00:05:07,660
own spec on top of like within UDP and

00:05:06,130 --> 00:05:09,730
we'll talk a bit more about that later

00:05:07,660 --> 00:05:11,830
and what that brings but the focus will

00:05:09,730 --> 00:05:14,370
be on HTTP two and you can you can sort

00:05:11,830 --> 00:05:17,500
of a assume that quick sort of like a

00:05:14,370 --> 00:05:18,850
supplemental to to http - it's not

00:05:17,500 --> 00:05:21,520
fundamentally changing the concepts of

00:05:18,850 --> 00:05:23,160
what we're talking about here so we've

00:05:21,520 --> 00:05:25,419
just covered a little bit of streams

00:05:23,160 --> 00:05:29,390
frames like I said you kind of chop up

00:05:25,419 --> 00:05:31,250
your data into frames right so I'm not

00:05:29,390 --> 00:05:32,750
going through like too much details

00:05:31,250 --> 00:05:34,310
right now we'll see more later and we

00:05:32,750 --> 00:05:35,900
actually start using these things

00:05:34,310 --> 00:05:38,000
it also offers header compression it's

00:05:35,900 --> 00:05:41,000
called H pack there's actually a couple

00:05:38,000 --> 00:05:44,030
of proposals right now to to change H

00:05:41,000 --> 00:05:46,610
back to newer newer compression schemes

00:05:44,030 --> 00:05:48,200
they may or may not be some security

00:05:46,610 --> 00:05:50,360
vulnerabilities there's also some some

00:05:48,200 --> 00:05:54,670
things that it doesn't offer like right

00:05:50,360 --> 00:05:56,660
now it like for instance if you compress

00:05:54,670 --> 00:05:59,780
if you have streams that all go to the

00:05:56,660 --> 00:06:01,850
same domain name the same Authority or

00:05:59,780 --> 00:06:04,310
host or origin whatever you call it but

00:06:01,850 --> 00:06:06,200
the terminology sort of blurs but over

00:06:04,310 --> 00:06:09,250
the different versions of HTTP but if

00:06:06,200 --> 00:06:12,020
you if you send headers to like

00:06:09,250 --> 00:06:13,670
example.com and then you would send it

00:06:12,020 --> 00:06:14,870
to example at net those headers are

00:06:13,670 --> 00:06:15,830
compressed with a separate dictionary so

00:06:14,870 --> 00:06:17,210
you don't you don't have the full

00:06:15,830 --> 00:06:23,780
efficiency so this is something people

00:06:17,210 --> 00:06:25,100
want to fix now by mmm Cousy yeah I mean

00:06:23,780 --> 00:06:26,240
it it's just a little line it says

00:06:25,100 --> 00:06:27,530
really matter by the way you can just

00:06:26,240 --> 00:06:29,080
access this yourself if you want to like

00:06:27,530 --> 00:06:32,750
skip ahead if you get bored or anything

00:06:29,080 --> 00:06:35,140
I'm not gonna hold you back can you see

00:06:32,750 --> 00:06:35,140
this URL

00:06:48,390 --> 00:06:53,250
no damn it

00:06:58,180 --> 00:07:03,639
something like that so feel free to skip

00:07:02,260 --> 00:07:09,130
her I'm just I don't wanna hold you back

00:07:03,639 --> 00:07:11,260
okay so like I was saying each pack

00:07:09,130 --> 00:07:13,270
people trying to fix that as well so

00:07:11,260 --> 00:07:14,440
just because I'm I mention these things

00:07:13,270 --> 00:07:17,199
now doesn't mean that they'll be the

00:07:14,440 --> 00:07:18,610
same in like a couple of years little

00:07:17,199 --> 00:07:20,800
parts of the protocol are actually

00:07:18,610 --> 00:07:22,930
already evolving and we'll even try

00:07:20,800 --> 00:07:26,080
using some of the newer extensions that

00:07:22,930 --> 00:07:27,490
have been adopted for http/2 and even

00:07:26,080 --> 00:07:31,120
some of the experimental ones which is

00:07:27,490 --> 00:07:35,050
kind of cool okay you got it

00:07:31,120 --> 00:07:36,490
get it from your neighbor so we also

00:07:35,050 --> 00:07:38,500
have priorities and dependencies this is

00:07:36,490 --> 00:07:40,060
a new concept in ht1 there's no such

00:07:38,500 --> 00:07:42,490
thing but now you've got a concept of

00:07:40,060 --> 00:07:44,560
streams that can be dependent on another

00:07:42,490 --> 00:07:46,949
stream because they're all on the same

00:07:44,560 --> 00:07:49,630
socket the server could now determine

00:07:46,949 --> 00:07:51,250
which ones should be prioritized so so

00:07:49,630 --> 00:07:54,100
if you have let's say you're you're an

00:07:51,250 --> 00:07:55,419
image right that's maybe not not as high

00:07:54,100 --> 00:07:58,150
up on the page you can give it a lower

00:07:55,419 --> 00:07:59,590
priority and the server can interpret

00:07:58,150 --> 00:08:01,960
that as a suggestion from the client or

00:07:59,590 --> 00:08:04,150
as a hint to say okay I'm gonna send you

00:08:01,960 --> 00:08:05,620
everything else with a high priority I'm

00:08:04,150 --> 00:08:07,690
gonna allocate more bandwidth on this

00:08:05,620 --> 00:08:10,720
socket to them you know the higher

00:08:07,690 --> 00:08:12,340
priority resources I will say that in

00:08:10,720 --> 00:08:14,410
practice like this is this is a sort of

00:08:12,340 --> 00:08:19,590
concept inspect in practice doesn't

00:08:14,410 --> 00:08:23,200
really work okay so different servers

00:08:19,590 --> 00:08:25,120
implement is differently most sort of

00:08:23,200 --> 00:08:27,940
really just ignore it

00:08:25,120 --> 00:08:31,630
browsers also have very differing

00:08:27,940 --> 00:08:33,520
opinions about how to create this

00:08:31,630 --> 00:08:36,099
dependency tree some of which are really

00:08:33,520 --> 00:08:37,810
just a queue so you have a tree where

00:08:36,099 --> 00:08:39,459
like you have one branch and in another

00:08:37,810 --> 00:08:43,839
branch and another branch it doesn't

00:08:39,459 --> 00:08:45,070
really help okay so it this is something

00:08:43,839 --> 00:08:46,720
that people are playing with but it's

00:08:45,070 --> 00:08:48,459
really unless you're doing the research

00:08:46,720 --> 00:08:49,480
specifically on that area and you try

00:08:48,459 --> 00:08:52,060
and optimize something it's not really

00:08:49,480 --> 00:08:53,110
gonna be a very huge impact but it's a

00:08:52,060 --> 00:08:56,370
lot of complexity if you're implementing

00:08:53,110 --> 00:08:59,440
it so yeah great choice spec designers

00:08:56,370 --> 00:09:01,870
so yeah we've got another thing clients

00:08:59,440 --> 00:09:03,459
and servers can negotiate settings when

00:09:01,870 --> 00:09:05,020
a client connects it has a certain

00:09:03,459 --> 00:09:07,140
amount of settings that it sends in is

00:09:05,020 --> 00:09:09,490
like the first one of the first teams to

00:09:07,140 --> 00:09:11,140
the server and the server will respond

00:09:09,490 --> 00:09:12,910
back with its own settings so settings

00:09:11,140 --> 00:09:14,500
can be things like

00:09:12,910 --> 00:09:16,480
saying like okay how many how many

00:09:14,500 --> 00:09:18,430
streams kind of have open and maximum at

00:09:16,480 --> 00:09:19,990
any given time now the default in the

00:09:18,430 --> 00:09:22,120
spec recommends to never go below a

00:09:19,990 --> 00:09:24,040
hundred chrome actually says like a

00:09:22,120 --> 00:09:25,300
thousand streams you know so this is

00:09:24,040 --> 00:09:26,560
like a thousand requests in responses

00:09:25,300 --> 00:09:29,230
could be open at the same at the same

00:09:26,560 --> 00:09:31,959
time on on a single socket like that's

00:09:29,230 --> 00:09:35,589
pretty liberal like that's pretty you

00:09:31,959 --> 00:09:37,060
know generous other things are like

00:09:35,589 --> 00:09:40,029
receive windows and things like that so

00:09:37,060 --> 00:09:44,050
like we don't have do we have enough

00:09:40,029 --> 00:09:46,480
chairs okay okay okay sorry about that

00:09:44,050 --> 00:09:48,550
right now just like space to sit in the

00:09:46,480 --> 00:09:54,279
front if you want to get closer can you

00:09:48,550 --> 00:09:55,779
hear me okay there okay so yeah a little

00:09:54,279 --> 00:09:57,760
bit of setting negotiation we'll try to

00:09:55,779 --> 00:10:00,100
use some of those for instance one of

00:09:57,760 --> 00:10:02,709
the one of the key ones is the clients

00:10:00,100 --> 00:10:04,930
can also enable or disable server push

00:10:02,709 --> 00:10:08,110
which is the other thing that I wanted

00:10:04,930 --> 00:10:10,389
to mention is and that was my personal

00:10:08,110 --> 00:10:11,260
and the thing that got me into HP too a

00:10:10,389 --> 00:10:13,720
couple of years ago

00:10:11,260 --> 00:10:15,279
speedy back then was server push because

00:10:13,720 --> 00:10:17,410
I really liked the idea that the server

00:10:15,279 --> 00:10:20,110
can just eliminate any wasted round

00:10:17,410 --> 00:10:22,300
trips by saying to the client here's

00:10:20,110 --> 00:10:25,079
some file that I'll also send you in

00:10:22,300 --> 00:10:28,570
response to your request so let's say a

00:10:25,079 --> 00:10:31,060
browser visits a website requests you

00:10:28,570 --> 00:10:33,550
know example.com slash you know just

00:10:31,060 --> 00:10:35,949
like the index.html the server would

00:10:33,550 --> 00:10:37,420
normally serve that takes some time to

00:10:35,949 --> 00:10:40,329
get to the client to client processes

00:10:37,420 --> 00:10:42,519
parses this thing and then goes and says

00:10:40,329 --> 00:10:45,310
okay now I need my you know app das and

00:10:42,519 --> 00:10:47,410
I need my styles that my design dot CSS

00:10:45,310 --> 00:10:49,449
and whatever so there's a lot of that

00:10:47,410 --> 00:10:51,959
round-trip time that is typically wasted

00:10:49,449 --> 00:10:54,279
it's called think time in some context

00:10:51,959 --> 00:10:56,079
and with push you could actually

00:10:54,279 --> 00:10:58,690
eliminate that when we push if the

00:10:56,079 --> 00:11:01,600
server knew what the client would need

00:10:58,690 --> 00:11:05,050
to go along with that page it could push

00:11:01,600 --> 00:11:06,730
along those assets right away so that's

00:11:05,050 --> 00:11:08,470
a really cool idea I thought and so I

00:11:06,730 --> 00:11:11,529
this is what I've been working towards

00:11:08,470 --> 00:11:12,639
and we'll use this later and I'll talk

00:11:11,529 --> 00:11:14,199
about some of the actually there's some

00:11:12,639 --> 00:11:15,850
of the problems with that what wasn't

00:11:14,199 --> 00:11:17,319
maybe foreseen and how we can address

00:11:15,850 --> 00:11:22,480
those then so we'll go pretty deep on

00:11:17,319 --> 00:11:24,100
that and then lastly here's a the

00:11:22,480 --> 00:11:26,980
coalescing connection kind of

00:11:24,100 --> 00:11:28,870
idea which which fits into the whole

00:11:26,980 --> 00:11:30,399
streams so it's streams you basically

00:11:28,870 --> 00:11:32,560
have like like let's say all the

00:11:30,399 --> 00:11:34,630
JavaScript files all the image files all

00:11:32,560 --> 00:11:37,360
the CSS files from your website can go

00:11:34,630 --> 00:11:39,399
onto the same TCP socket at the same

00:11:37,360 --> 00:11:43,180
time but now let's say that you're on a

00:11:39,399 --> 00:11:45,069
CDN a CDN is like a service that like

00:11:43,180 --> 00:11:48,220
like CloudFlare you might have heard

00:11:45,069 --> 00:11:50,190
over fastly or Akamai and many other

00:11:48,220 --> 00:11:52,779
large companies offer CDN services like

00:11:50,190 --> 00:11:54,430
so what happens is that a lot of people

00:11:52,779 --> 00:11:56,589
put their website on to those services

00:11:54,430 --> 00:11:57,970
to host them from servers around the

00:11:56,589 --> 00:11:59,019
world because when you put servers

00:11:57,970 --> 00:12:00,790
around the world you get those servers

00:11:59,019 --> 00:12:02,769
get closer these edge servers get closer

00:12:00,790 --> 00:12:05,139
to large population centers of the world

00:12:02,769 --> 00:12:07,180
and that eliminates the latency and

00:12:05,139 --> 00:12:10,449
which is always the having low latency

00:12:07,180 --> 00:12:13,000
is the best solution to any performance

00:12:10,449 --> 00:12:14,110
issue basically on on the web if you

00:12:13,000 --> 00:12:15,490
have really low latency if you're like

00:12:14,110 --> 00:12:18,970
in Singapore and requesting from the

00:12:15,490 --> 00:12:20,380
data center in one North you never never

00:12:18,970 --> 00:12:21,699
gonna notice that you're doing 100 round

00:12:20,380 --> 00:12:27,660
trips because you can do it in like a

00:12:21,699 --> 00:12:31,110
tenth of a second right cool

00:12:27,660 --> 00:12:31,110
claim I wrote it

00:12:31,480 --> 00:12:35,920
okay so so any anyway with them once you

00:12:34,630 --> 00:12:37,720
once you're on the CDN for all these

00:12:35,920 --> 00:12:39,130
various performance reasons there's this

00:12:37,720 --> 00:12:40,930
concept of coercing connections where

00:12:39,130 --> 00:12:42,460
you could say I'm going to establish

00:12:40,930 --> 00:12:44,620
connection to my site my example or

00:12:42,460 --> 00:12:47,230
domain but then I need to connect I need

00:12:44,620 --> 00:12:49,030
to like mmm load something from API dot

00:12:47,230 --> 00:12:50,640
example are calm because I have a single

00:12:49,030 --> 00:12:52,720
page app that's talking to an API and

00:12:50,640 --> 00:12:55,140
what's happening now is it you can put

00:12:52,720 --> 00:12:58,630
the both of those domains onto a CDN

00:12:55,140 --> 00:13:00,970
that serves a signal certificate with

00:12:58,630 --> 00:13:04,030
like maybe like a TLS certificate to

00:13:00,970 --> 00:13:05,890
secure the connection which lists both

00:13:04,030 --> 00:13:09,070
of these domain names and then the mine

00:13:05,890 --> 00:13:10,870
is able to connect to request from both

00:13:09,070 --> 00:13:12,280
of those origins on the same connection

00:13:10,870 --> 00:13:13,450
so you eliminate the entire the need to

00:13:12,280 --> 00:13:15,910
set up another connection which is

00:13:13,450 --> 00:13:18,250
actually a rather expensive process in

00:13:15,910 --> 00:13:21,040
terms of latency because to set up a

00:13:18,250 --> 00:13:22,990
socket takes like two round-trip to do

00:13:21,040 --> 00:13:25,450
that in TLS it's like another two round

00:13:22,990 --> 00:13:28,510
trips at least and before you can undo

00:13:25,450 --> 00:13:31,480
your HTTP request right that's for four

00:13:28,510 --> 00:13:32,800
round trips at least possibly more

00:13:31,480 --> 00:13:34,270
because the size of the certificate

00:13:32,800 --> 00:13:35,680
might you know include increase the

00:13:34,270 --> 00:13:39,400
amount of bandwidth that exceeds it a

00:13:35,680 --> 00:13:42,750
single round trip the idea is that you

00:13:39,400 --> 00:13:46,120
can serve multiple domains on the same

00:13:42,750 --> 00:13:48,850
on the same like TCP socket the same

00:13:46,120 --> 00:13:49,900
connection right and if you combine all

00:13:48,850 --> 00:13:51,220
these things together we can start

00:13:49,900 --> 00:13:54,220
moving towards a very different way of

00:13:51,220 --> 00:13:56,800
delivering web applications where you

00:13:54,220 --> 00:13:57,940
have zero latency like or you have the

00:13:56,800 --> 00:13:59,650
minimal theoretical amount of latency

00:13:57,940 --> 00:14:01,450
between your client and your server you

00:13:59,650 --> 00:14:03,550
you have zero the wasted think time

00:14:01,450 --> 00:14:05,100
because you're constantly your service

00:14:03,550 --> 00:14:08,080
constantly pushing data down that pipe

00:14:05,100 --> 00:14:10,390
to fill the maximum copy of capability

00:14:08,080 --> 00:14:13,600
this is very important in places where

00:14:10,390 --> 00:14:15,220
there isn't an abundance of CDN

00:14:13,600 --> 00:14:17,050
infrastructure available right now so

00:14:15,220 --> 00:14:19,750
this allows you to serve like from

00:14:17,050 --> 00:14:22,300
Singapore SI toos to customer in America

00:14:19,750 --> 00:14:23,560
or in South Africa without having

00:14:22,300 --> 00:14:27,550
necessarily like setting up servers or

00:14:23,560 --> 00:14:30,640
and all these places so there's there's

00:14:27,550 --> 00:14:32,530
a lot of concepts there and I'll talk

00:14:30,640 --> 00:14:33,730
about like sort of how I've been

00:14:32,530 --> 00:14:35,740
experimenting with those and actually

00:14:33,730 --> 00:14:38,050
using them in practice and what tools we

00:14:35,740 --> 00:14:40,750
can use to do this and we'll start with

00:14:38,050 --> 00:14:42,830
some very will start with taking just a

00:14:40,750 --> 00:14:44,450
closer look and these

00:14:42,830 --> 00:14:46,310
these protocols the data that's actually

00:14:44,450 --> 00:14:48,110
being sent so we got familiar Moorthy

00:14:46,310 --> 00:14:52,460
with the sort of the primitives of the

00:14:48,110 --> 00:14:54,430
protocol I will point out that my little

00:14:52,460 --> 00:14:57,440
rant here is probably not the best

00:14:54,430 --> 00:14:59,720
explanation and what is probably the

00:14:57,440 --> 00:15:03,890
best explanation is this really rather

00:14:59,720 --> 00:15:04,430
excellent faq written by I think Mark

00:15:03,890 --> 00:15:08,510
nothingham

00:15:04,430 --> 00:15:11,240
one of the authors of the I think is one

00:15:08,510 --> 00:15:13,760
of the chairs of the IETF HTTP working

00:15:11,240 --> 00:15:15,650
group so he's been he's been doing this

00:15:13,760 --> 00:15:18,290
for decades he's really really good at

00:15:15,650 --> 00:15:21,350
it and he's writes rather nicely so you

00:15:18,290 --> 00:15:23,840
should actually go through this I I

00:15:21,350 --> 00:15:26,840
think that out of all the tutorials that

00:15:23,840 --> 00:15:28,730
I've ever seen about HTTP two none are

00:15:26,840 --> 00:15:30,470
as good as the actual spec it's very

00:15:28,730 --> 00:15:32,510
easy to read spec it takes like maybe an

00:15:30,470 --> 00:15:33,770
hour and if you're intent on working

00:15:32,510 --> 00:15:34,910
with this I highly recommend just sit

00:15:33,770 --> 00:15:37,040
down and go through it take your time

00:15:34,910 --> 00:15:39,050
and as you're working with it so just

00:15:37,040 --> 00:15:41,960
like look at the spec as your source of

00:15:39,050 --> 00:15:43,760
truth rather than looking at like blog

00:15:41,960 --> 00:15:46,010
posts and tutorials and talks like this

00:15:43,760 --> 00:15:48,170
these I'm just trying to facilitate what

00:15:46,010 --> 00:15:50,000
and explain what I've learned but I'm

00:15:48,170 --> 00:15:52,550
not like better than the spec okay so

00:15:50,000 --> 00:15:55,520
look at these things and I found a

00:15:52,550 --> 00:15:57,560
router really a sort of enlightening so

00:15:55,520 --> 00:16:02,570
right there's the actual that said I was

00:15:57,560 --> 00:16:04,580
the FAQ so this is under the HTTP the

00:16:02,570 --> 00:16:08,560
HTTP working group the IETF is this

00:16:04,580 --> 00:16:13,790
thing in the top right here it's okay

00:16:08,560 --> 00:16:17,450
come on position static so the ITF thing

00:16:13,790 --> 00:16:19,190
here that's a standards body that it's

00:16:17,450 --> 00:16:21,110
really an open organization anyone can

00:16:19,190 --> 00:16:23,030
participate in these discussions they

00:16:21,110 --> 00:16:24,620
mostly take place on mailing lists these

00:16:23,030 --> 00:16:26,300
are people from around the world but who

00:16:24,620 --> 00:16:27,680
work for all kinds of companies that are

00:16:26,300 --> 00:16:29,900
competitors of each other most of the

00:16:27,680 --> 00:16:33,040
time browser vendors and like I said CD

00:16:29,900 --> 00:16:36,470
ends and open source you know hackers

00:16:33,040 --> 00:16:37,970
and they have various working groups for

00:16:36,470 --> 00:16:39,200
different protocols so most of the

00:16:37,970 --> 00:16:43,360
problems that I've mentioned so far like

00:16:39,200 --> 00:16:47,450
TCP and UDP and and quick and TLS and

00:16:43,360 --> 00:16:50,600
DNS and HTTP they're all standards set

00:16:47,450 --> 00:16:52,840
up by working groups the WG is a working

00:16:50,600 --> 00:16:54,710
group and that fall under the ITF

00:16:52,840 --> 00:16:56,150
organization and they sort of have a lot

00:16:54,710 --> 00:16:57,080
of process around it to make sure that

00:16:56,150 --> 00:16:59,210
this facility

00:16:57,080 --> 00:17:02,510
fairly openly and anyone can participate

00:16:59,210 --> 00:17:04,850
in this in fact just last month I think

00:17:02,510 --> 00:17:08,660
two months ago or last month they had

00:17:04,850 --> 00:17:11,300
the 100 meeting in person

00:17:08,660 --> 00:17:12,560
and happened in Singapore and I was

00:17:11,300 --> 00:17:16,520
fortunate enough to attend it for my

00:17:12,560 --> 00:17:17,570
first time and it was the best tech

00:17:16,520 --> 00:17:18,290
conference I've ever been to because it

00:17:17,570 --> 00:17:19,850
wasn't really like a tech conference

00:17:18,290 --> 00:17:21,890
like this where you go to attend

00:17:19,850 --> 00:17:23,780
workshops it was just people discussing

00:17:21,890 --> 00:17:25,580
this spec like people actually like

00:17:23,780 --> 00:17:27,260
would get up and propose something and

00:17:25,580 --> 00:17:29,630
people like then debate these theses

00:17:27,260 --> 00:17:32,570
constants it was very very very very

00:17:29,630 --> 00:17:34,790
nice very enjoyable I and I was sort of

00:17:32,570 --> 00:17:36,170
attending and I was able to contribute

00:17:34,790 --> 00:17:37,910
as well even though I don't work for a

00:17:36,170 --> 00:17:39,890
Google or a Mozilla or whoever that was

00:17:37,910 --> 00:17:41,420
there I can just go as an independent

00:17:39,890 --> 00:17:43,570
person and say okay I've worked on the

00:17:41,420 --> 00:17:43,570
note

00:17:44,150 --> 00:17:47,390
and with it but like everyone just

00:17:46,040 --> 00:17:49,280
speaks for themselves nobody speaks for

00:17:47,390 --> 00:17:51,470
their employer for instance so everyone

00:17:49,280 --> 00:17:52,670
is on an equal equal footing and can

00:17:51,470 --> 00:17:55,640
fairly contribute their feedback and

00:17:52,670 --> 00:17:55,940
ideas so if you interested in that at

00:17:55,640 --> 00:17:58,610
all

00:17:55,940 --> 00:18:01,820
take a look at the mailing lists under

00:17:58,610 --> 00:18:07,690
the HTTP working group so you'll find

00:18:01,820 --> 00:18:09,830
all of that here at the HTTP WG org and

00:18:07,690 --> 00:18:11,450
over here is the mailing lists this is

00:18:09,830 --> 00:18:13,070
where all of the discussion happens so

00:18:11,450 --> 00:18:15,050
personally I don't discuss a lot there

00:18:13,070 --> 00:18:17,150
but I do lurk so that's a good way to

00:18:15,050 --> 00:18:18,770
sort of people keep stay abreast of

00:18:17,150 --> 00:18:20,780
what's coming up and you'll see things

00:18:18,770 --> 00:18:22,730
that might not even exist for another

00:18:20,780 --> 00:18:24,559
two or three years in browsers and such

00:18:22,730 --> 00:18:25,970
but you must be aware of that you'll see

00:18:24,559 --> 00:18:27,530
what's coming so this I think this is

00:18:25,970 --> 00:18:29,179
very valuable for any web developer just

00:18:27,530 --> 00:18:30,800
of keep you know keep up to date and

00:18:29,179 --> 00:18:34,790
stay ahead of what's up to date around

00:18:30,800 --> 00:18:35,600
right now so this is like I mean you

00:18:34,790 --> 00:18:36,770
just use some really interesting

00:18:35,600 --> 00:18:38,030
discussions happening and it's kind of

00:18:36,770 --> 00:18:39,140
cool to see like the names coming back

00:18:38,030 --> 00:18:41,450
and who is this who's working on it

00:18:39,140 --> 00:18:42,860
you'll start seeing like who's which

00:18:41,450 --> 00:18:45,650
browser may or may not be implemented in

00:18:42,860 --> 00:18:50,210
which features and all that so anyway

00:18:45,650 --> 00:18:52,190
take a look at those so then first thing

00:18:50,210 --> 00:18:54,890
we can do is a couple of tools to look

00:18:52,190 --> 00:18:56,870
at HTTP to traffic I was gonna suggest

00:18:54,890 --> 00:18:59,090
that you first open up like chrome like

00:18:56,870 --> 00:19:04,700
your inspector if chrome installed most

00:18:59,090 --> 00:19:08,840
of you hopes okay so alright so let's go

00:19:04,700 --> 00:19:09,620
to a web site let's see Jess conf oh

00:19:08,840 --> 00:19:12,880
hang on

00:19:09,620 --> 00:19:17,510
who here knows that on Sunday there's a

00:19:12,880 --> 00:19:21,110
meet-up called Co PJs yeah all right so

00:19:17,510 --> 00:19:22,460
she as an aside if you're around on

00:19:21,110 --> 00:19:23,330
Sunday I don't know for the visitors who

00:19:22,460 --> 00:19:24,890
might be a little difficult but if

00:19:23,330 --> 00:19:28,040
you're around at all on Sunday morning

00:19:24,890 --> 00:19:29,720
there's a meet-up called Co PJs where

00:19:28,040 --> 00:19:30,740
people just gather it's not really

00:19:29,720 --> 00:19:32,780
hundreds in JavaScript but they're

00:19:30,740 --> 00:19:33,770
mostly like developers there but you

00:19:32,780 --> 00:19:34,730
don't need to actually talk about coding

00:19:33,770 --> 00:19:36,830
or anything like that it's just a nice

00:19:34,730 --> 00:19:38,720
way to socialize and you know meet some

00:19:36,830 --> 00:19:43,400
people over a cup of local Singapore

00:19:38,720 --> 00:19:44,780
coffee so check it out anyway point is

00:19:43,400 --> 00:19:47,260
we have this website open we have

00:19:44,780 --> 00:19:47,260
another inspector

00:19:47,690 --> 00:19:54,250
go to network tab reload all right here

00:19:50,420 --> 00:19:58,190
we go so this is happening over protocol

00:19:54,250 --> 00:19:59,990
h2 okay so that's our that's our basic

00:19:58,190 --> 00:20:02,930
our first clue of that this is not like

00:19:59,990 --> 00:20:05,540
a standard old HTTP 1 website now the

00:20:02,930 --> 00:20:10,280
next thing you do you go to Chrome slash

00:20:05,540 --> 00:20:13,160
net internals that's a little lower

00:20:10,280 --> 00:20:15,170
level debugging in the browser and if

00:20:13,160 --> 00:20:17,330
you go to HTTP 2 on the left hand side

00:20:15,170 --> 00:20:19,820
they're just too small for the people

00:20:17,330 --> 00:20:25,330
the back can you sort of see it is it

00:20:19,820 --> 00:20:29,120
too small or okay okay I mean I could

00:20:25,330 --> 00:20:30,560
better so I'm not sure if you can see

00:20:29,120 --> 00:20:32,900
the URL so let me just magnify that

00:20:30,560 --> 00:20:36,020
separate what's that short key on Mac to

00:20:32,900 --> 00:20:38,380
like you know as in like to to sort of

00:20:36,020 --> 00:20:43,160
zoom the screen what is it called I

00:20:38,380 --> 00:20:44,960
always forget that yeah that's that

00:20:43,160 --> 00:20:49,070
zooms the content but not the browser

00:20:44,960 --> 00:20:50,390
bar no I think it's like with a pinch

00:20:49,070 --> 00:20:54,950
gesture and then some cookies or

00:20:50,390 --> 00:20:55,910
whatever you'll be useful yeah I could

00:20:54,950 --> 00:20:58,450
do the pasting but I'd have to like

00:20:55,910 --> 00:20:58,450
every single time

00:21:06,290 --> 00:21:14,980
you can just zoom parts of it Oh enable

00:21:11,180 --> 00:21:19,190
track how's that work option command

00:21:14,980 --> 00:21:24,370
no no I'm can combined I know whose it

00:21:19,190 --> 00:21:24,370
was in Arabic

00:21:25,810 --> 00:21:32,450
okay okay so anyway now we've got like a

00:21:28,940 --> 00:21:36,340
little live overview of what's going on

00:21:32,450 --> 00:21:39,380
here in the internals of the browser and

00:21:36,340 --> 00:21:42,230
we can see our session here our live

00:21:39,380 --> 00:21:45,140
sessions so echo PJs on port 443 which

00:21:42,230 --> 00:21:48,830
is standard for TLS for like a HTTP URL

00:21:45,140 --> 00:21:51,230
it's got this session here ID 385 and

00:21:48,830 --> 00:21:55,030
probably we have to like reload this

00:21:51,230 --> 00:22:05,540
page then we see it captured something

00:21:55,030 --> 00:22:08,080
so come on stop stop capture okay okay

00:22:05,540 --> 00:22:08,080
it's quite annoying

00:22:10,840 --> 00:22:16,820
okay okay all right I'll do like that so

00:22:15,320 --> 00:22:17,930
on your computer probly have to struggle

00:22:16,820 --> 00:22:20,060
with the zooming thing and all that but

00:22:17,930 --> 00:22:22,010
basically you can see like really level

00:22:20,060 --> 00:22:25,970
information on what actually happened

00:22:22,010 --> 00:22:28,220
how the browser requested it we start

00:22:25,970 --> 00:22:31,490
seeing some some general events so you

00:22:28,220 --> 00:22:34,510
see here like it well that was like

00:22:31,490 --> 00:22:36,680
because we reloaded it first closed it

00:22:34,510 --> 00:22:40,520
and probably received some settings

00:22:36,680 --> 00:22:43,090
there clearing this thing out where do

00:22:40,520 --> 00:22:43,090
we open it again

00:22:45,940 --> 00:22:48,990
one second

00:22:52,000 --> 00:23:03,230
okay and these are these tools are a

00:22:57,320 --> 00:23:05,590
little bit finicky so bear with me

00:23:03,230 --> 00:23:05,590
please

00:23:06,190 --> 00:23:09,030
why is it off

00:23:11,889 --> 00:23:17,149
okay

00:23:14,829 --> 00:23:22,369
in life then was our the best oh here we

00:23:17,149 --> 00:23:23,899
go okay so we've got we've got like a

00:23:22,369 --> 00:23:26,389
little idea of what's going on here so

00:23:23,899 --> 00:23:28,609
our session this is the request the way

00:23:26,389 --> 00:23:30,349
it goes out because it's all binary it's

00:23:28,609 --> 00:23:31,789
basically this is a decoded view of that

00:23:30,349 --> 00:23:33,589
binary like if you were looking at the

00:23:31,789 --> 00:23:34,699
actual binary I'm just like rendering it

00:23:33,589 --> 00:23:36,679
as ASCII you will just get a bunch of

00:23:34,699 --> 00:23:38,419
garbage because everything's compressed

00:23:36,679 --> 00:23:40,759
like I said so it's compression kind of

00:23:38,419 --> 00:23:42,619
like makes it very efficient but also

00:23:40,759 --> 00:23:44,809
totally not human readable anymore right

00:23:42,619 --> 00:23:46,519
so this is decoded this is uncompressed

00:23:44,809 --> 00:23:48,289
and in a representation so this is just

00:23:46,519 --> 00:23:49,699
a debugger panel this is not literally

00:23:48,289 --> 00:23:51,529
the bytes that are going out relates to

00:23:49,699 --> 00:23:53,629
b1 the bytes I go out are pretty much

00:23:51,529 --> 00:23:57,469
literally like this just that they get

00:23:53,629 --> 00:23:58,759
wrapped inside TLS here the a lot of

00:23:57,469 --> 00:24:00,109
this looks very familiar but you can

00:23:58,759 --> 00:24:04,879
already see him differences you have

00:24:00,109 --> 00:24:06,109
these pseudo headers in in an HTP one it

00:24:04,879 --> 00:24:08,919
would look different I know if you're

00:24:06,109 --> 00:24:12,079
familiar but in HP one that would look

00:24:08,919 --> 00:24:15,399
the first line of the request is

00:24:12,079 --> 00:24:19,219
basically just get and then the protocol

00:24:15,399 --> 00:24:23,239
name and version and then the path right

00:24:19,219 --> 00:24:25,279
and if you put HTTP two because there's

00:24:23,239 --> 00:24:27,229
no like text-based

00:24:25,279 --> 00:24:28,429
line by line protocol these getting

00:24:27,229 --> 00:24:30,649
coded as headers so that they can also

00:24:28,429 --> 00:24:32,059
be compressed and so they're prefixed

00:24:30,649 --> 00:24:34,729
with this column so that they never

00:24:32,059 --> 00:24:36,199
clash so if you see any meters that do

00:24:34,729 --> 00:24:37,849
not start with colon and these are those

00:24:36,199 --> 00:24:39,440
sort of regular headers like the ones I

00:24:37,849 --> 00:24:41,839
start with colon are defined by the RFC

00:24:39,440 --> 00:24:44,629
and are sort of reserved pseudo headers

00:24:41,839 --> 00:24:46,069
and these get compressed really

00:24:44,629 --> 00:24:47,299
efficiently so they don't take as much

00:24:46,069 --> 00:24:48,559
bandwidth this actually what you see on

00:24:47,299 --> 00:24:51,199
the screen also if you have repetitive

00:24:48,559 --> 00:24:54,499
once they completely sort of encoded to

00:24:51,199 --> 00:24:56,779
their entropy entropy values so you see

00:24:54,499 --> 00:24:58,219
a lot of these session like this this

00:24:56,779 --> 00:25:00,229
singing session has a lot of streams

00:24:58,219 --> 00:25:03,019
going over it we can start seeing things

00:25:00,229 --> 00:25:06,259
like the parent stream ID for this one

00:25:03,019 --> 00:25:09,379
is zero that's the root is zero the then

00:25:06,259 --> 00:25:11,779
the take sort of incrementally go up the

00:25:09,379 --> 00:25:13,129
in terms of the stream ID so there's

00:25:11,779 --> 00:25:15,259
there's this difference between even and

00:25:13,129 --> 00:25:16,339
odd numbers of stream IDs depending on

00:25:15,259 --> 00:25:18,049
whether it's like initially by the

00:25:16,339 --> 00:25:19,190
client or from or by the server like

00:25:18,049 --> 00:25:21,859
which direction is going so you can kind

00:25:19,190 --> 00:25:23,629
of tell they can go up to like 31 bits

00:25:21,859 --> 00:25:26,839
so it's like a billion streams either

00:25:23,629 --> 00:25:27,870
direction so you should never be

00:25:26,839 --> 00:25:31,320
exhausting that actually

00:25:27,870 --> 00:25:33,419
now basically this is one way of looking

00:25:31,320 --> 00:25:37,169
at the the debugging thing what I wanted

00:25:33,419 --> 00:25:37,830
to actually do is install some of these

00:25:37,169 --> 00:25:42,179
tools

00:25:37,830 --> 00:25:45,630
who's got curl on their system probably

00:25:42,179 --> 00:25:48,960
everyone who has used curl before okay

00:25:45,630 --> 00:25:52,049
cool cool so just try to run like for

00:25:48,960 --> 00:25:53,520
those who have not and for those who

00:25:52,049 --> 00:25:57,409
have not yet seen HTTP to being

00:25:53,520 --> 00:26:00,990
inspected with curl just run curl oh

00:25:57,409 --> 00:26:05,899
okay just run curl - verbose and then

00:26:00,990 --> 00:26:05,899
the the URL HTTP copy gesture org

00:26:10,070 --> 00:26:15,120
so you'll see all this content right but

00:26:14,130 --> 00:26:16,890
all the way the top you see the

00:26:15,120 --> 00:26:18,750
interesting part girl actually gives you

00:26:16,890 --> 00:26:21,710
kind of an insight into how it sets up

00:26:18,750 --> 00:26:21,710
the connection with TLS and

00:26:23,290 --> 00:26:29,410
what's being sent with the headers so

00:26:28,090 --> 00:26:33,760
that the at the top you see things like

00:26:29,410 --> 00:26:35,020
this LPN or Alpine that's like how it's

00:26:33,760 --> 00:26:38,110
negotiating whether this server is

00:26:35,020 --> 00:26:42,730
actually HTTP 1.1 or HTTP 2 that's part

00:26:38,110 --> 00:26:44,410
of TLS so you see things like the exact

00:26:42,730 --> 00:26:45,370
handshake and a certificate exchange so

00:26:44,410 --> 00:26:48,610
these are a lot of round trips that are

00:26:45,370 --> 00:26:50,440
going on so in future versions of the

00:26:48,610 --> 00:26:51,970
protocol this is one of the things that

00:26:50,440 --> 00:26:54,730
we're trying to eliminate these kind of

00:26:51,970 --> 00:26:56,740
round trips you'll see things like which

00:26:54,730 --> 00:26:59,110
kind of what kind of certificate is it

00:26:56,740 --> 00:27:03,790
what else is it using to sign and digest

00:26:59,110 --> 00:27:05,290
and everything you see some details of

00:27:03,790 --> 00:27:07,840
the actual certificate so in this case

00:27:05,290 --> 00:27:09,970
for instance the CN the sense of a

00:27:07,840 --> 00:27:13,330
common name is co PJ and copy jester org

00:27:09,970 --> 00:27:14,350
so this certificate is only has copies s

00:27:13,330 --> 00:27:15,610
on it so when we were talking about

00:27:14,350 --> 00:27:16,600
coalescing connections you need to have

00:27:15,610 --> 00:27:18,340
like multiple domains on the same

00:27:16,600 --> 00:27:22,540
certificate the certificate would not be

00:27:18,340 --> 00:27:25,059
able to do that so it's also signed by

00:27:22,540 --> 00:27:26,559
let's encrypt which is like a very

00:27:25,059 --> 00:27:27,610
common way now most of most certificates

00:27:26,559 --> 00:27:30,790
are now signed by let's encrypt it's a

00:27:27,610 --> 00:27:34,780
free service that is available on most

00:27:30,790 --> 00:27:39,130
hosting companies free of charge and

00:27:34,780 --> 00:27:40,600
integrate this yourself then ok then we

00:27:39,130 --> 00:27:43,120
see the regular headers so this is

00:27:40,600 --> 00:27:45,309
fairly standard HTTP stuff where you see

00:27:43,120 --> 00:27:47,919
the method so the reason it doesn't show

00:27:45,309 --> 00:27:48,970
this as actually like this is not

00:27:47,919 --> 00:27:52,030
actually what was sent out this is a

00:27:48,970 --> 00:27:53,559
little bit of a lie by coral so the

00:27:52,030 --> 00:27:55,240
actual thing that gets sent out as those

00:27:53,559 --> 00:27:58,660
compressed headers which have a pseudo

00:27:55,240 --> 00:28:01,150
header that coulomb method cool on path

00:27:58,660 --> 00:28:02,770
and this is just curls representation

00:28:01,150 --> 00:28:03,580
because curl is kind of like a tool

00:28:02,770 --> 00:28:05,710
that's been around for ages

00:28:03,580 --> 00:28:07,450
and I'm guessing inter for the user

00:28:05,710 --> 00:28:10,690
interface this was a smaller way to make

00:28:07,450 --> 00:28:13,900
it familiar to everyone else so but this

00:28:10,690 --> 00:28:17,650
is not 100% accurate but it gives you a

00:28:13,900 --> 00:28:18,910
good idea of what's going on okay then

00:28:17,650 --> 00:28:21,580
another tool that wanted to share which

00:28:18,910 --> 00:28:26,470
is specifically built for HTTP 2 is NG

00:28:21,580 --> 00:28:31,680
HTTP so this one you probably have to do

00:28:26,470 --> 00:28:33,990
or hanji http/2 org

00:28:31,680 --> 00:28:37,710
so if you go to this website here engine

00:28:33,990 --> 00:28:40,050
http/2 org this is an open source

00:28:37,710 --> 00:28:42,060
library that implements HTTP - it's

00:28:40,050 --> 00:28:43,710
written in C it's the it's the

00:28:42,060 --> 00:28:46,080
underlying library for tools like curl

00:28:43,710 --> 00:28:48,720
it's also what's used in like a safari

00:28:46,080 --> 00:28:51,270
browser the Apache web server uses it

00:28:48,720 --> 00:28:53,760
and node.js also uses this and it comes

00:28:51,270 --> 00:28:55,680
with its own command-line various tools

00:28:53,760 --> 00:28:58,560
are included one is a client that we can

00:28:55,680 --> 00:28:59,820
now use the the command when you install

00:28:58,560 --> 00:29:01,770
this on your system you should actually

00:28:59,820 --> 00:29:04,500
try this now this is we're going to be

00:29:01,770 --> 00:29:05,970
using this or you oh you can even do

00:29:04,500 --> 00:29:07,800
your you can do it okay so Indian we'll

00:29:05,970 --> 00:29:11,940
walk you through how to get this working

00:29:07,800 --> 00:29:14,390
on your computer view this one yeah yeah

00:29:11,940 --> 00:29:14,390
that's cool

00:29:22,620 --> 00:29:30,320
it's a doctor thing who's got docker on

00:29:25,440 --> 00:29:30,320
your system okay cool nice

00:29:42,060 --> 00:29:45,920
you don't have no please consult

00:30:11,470 --> 00:30:17,030


00:30:13,990 --> 00:30:22,280
it didn't even recognize that yes we let

00:30:17,030 --> 00:30:24,610
me tie into that oh it's fine I just do

00:30:22,280 --> 00:30:24,610
it in this

00:30:30,440 --> 00:30:34,090
or do you think this is

00:30:37,320 --> 00:30:40,320
nope

00:30:45,030 --> 00:31:08,550
okay I think your computer needs this to

00:31:02,890 --> 00:31:08,550
work it needs to be kind of like it

00:31:10,080 --> 00:31:16,840
might be easier to install it with

00:31:12,820 --> 00:31:20,260
hungry someone has that yeah yeah okay

00:31:16,840 --> 00:31:23,580
so would you put your teamwork is that

00:31:20,260 --> 00:31:23,580
I'm yeah sure

00:31:26,899 --> 00:31:38,370
well yeah it's not imaginary so we

00:31:36,570 --> 00:31:39,659
things like a great suggestion there we

00:31:38,370 --> 00:31:41,010
can use homebrew to install this on our

00:31:39,659 --> 00:31:41,370
own machines that's actually what I do

00:31:41,010 --> 00:31:42,960
as well

00:31:41,370 --> 00:31:45,059
the demo was going to be a little bit

00:31:42,960 --> 00:31:47,549
more of a testing thing if we can get

00:31:45,059 --> 00:31:49,409
that okay that's fine so if you have a

00:31:47,549 --> 00:31:53,309
Mac and if you are able to install it by

00:31:49,409 --> 00:31:55,860
a brew just do that this the docker was

00:31:53,309 --> 00:31:58,230
mainly for those who don't have UNIX or

00:31:55,860 --> 00:32:01,350
Mac with I'm not having titled on

00:31:58,230 --> 00:32:03,179
Windows yet so the docker container is

00:32:01,350 --> 00:32:05,130
mainly for that but if you are able to

00:32:03,179 --> 00:32:06,480
install any HTTP to this all

00:32:05,130 --> 00:32:07,889
instructions on the website I didn't

00:32:06,480 --> 00:32:11,010
know it does not prove but if it's there

00:32:07,889 --> 00:32:12,210
just follow the government actually so

00:32:11,010 --> 00:32:22,820
one thing we could do is show to show

00:32:12,210 --> 00:32:26,120
the demo for the load testing okay I

00:32:22,820 --> 00:32:26,120
would like to

00:32:27,649 --> 00:32:37,890
for my collection

00:32:30,019 --> 00:32:40,830
everybody all right I'm not sure I can

00:32:37,890 --> 00:32:43,950
get everybody in here so you have to be

00:32:40,830 --> 00:32:46,460
representative with the corn exit thank

00:32:43,950 --> 00:32:48,890
you so much or do we do another one oh

00:32:46,460 --> 00:32:56,179
[Laughter]

00:32:48,890 --> 00:32:56,179
yeah sorry

00:33:01,130 --> 00:33:09,000
so next level Instagram so yeah set up

00:33:05,850 --> 00:33:10,740
Angie http/2 is here already and it so

00:33:09,000 --> 00:33:13,679
ndh still producer see liability which

00:33:10,740 --> 00:33:16,340
implements a lot of the lower level

00:33:13,679 --> 00:33:16,340
connection stuff

00:33:22,490 --> 00:33:26,060
yep okay anyone able to install it so

00:33:25,550 --> 00:33:31,990
far

00:33:26,060 --> 00:33:31,990
who's installed it already so forth

00:33:58,060 --> 00:34:02,390
so in case you are not able to install

00:34:00,950 --> 00:34:04,220
it yourself just I have a docker

00:34:02,390 --> 00:34:06,560
container with everything set up so it

00:34:04,220 --> 00:34:07,790
can just go to the site II oh sorry

00:34:06,560 --> 00:34:16,960
that's the local of stretchy this is

00:34:07,790 --> 00:34:20,450
again yeah should be able to access this

00:34:16,960 --> 00:34:21,919
this has the stuff setup so that if you

00:34:20,450 --> 00:34:23,870
are unable to install or finding some

00:34:21,919 --> 00:34:26,409
problems installing this should help you

00:34:23,870 --> 00:34:26,409
get started

00:34:34,060 --> 00:34:41,920
this is quite big though it's a nearly

00:34:36,950 --> 00:34:41,920
18 MB so you know just see fury

00:35:01,359 --> 00:35:14,779
you have problems installing just let me

00:35:03,829 --> 00:35:21,140
know something else additional that you

00:35:14,779 --> 00:35:24,260
install I do something except but this

00:35:21,140 --> 00:35:29,859
should get yeah that's actually

00:35:24,260 --> 00:35:29,859
predicting okay okay it's good enough

00:35:29,950 --> 00:35:37,270
oh yeah okay good point so if you want

00:35:35,829 --> 00:35:40,240
to access this URL make sure you are on

00:35:37,270 --> 00:35:53,380
the J's conf Wi-Fi network there are two

00:35:40,240 --> 00:35:56,500
networks yeah password is beware of the

00:35:53,380 --> 00:35:58,829
cat sitting beware of the cats is a

00:35:56,500 --> 00:35:58,829
password

00:37:04,500 --> 00:37:11,280
10:10 one what

00:37:21,590 --> 00:37:28,910
is anyone in stable to access this URL

00:37:25,910 --> 00:37:28,910
No

00:37:29,100 --> 00:37:37,320
you can access it which Wi-Fi network I

00:37:31,870 --> 00:37:37,320
own which one are you

00:37:37,410 --> 00:37:42,180
unless someone else's will be king that

00:37:39,520 --> 00:37:42,180
way filter

00:37:50,210 --> 00:38:02,240
you have oh yeah yeah VPN or something

00:37:55,710 --> 00:38:05,190
or firewall nothing okay then uh

00:38:02,240 --> 00:38:12,500
automatically so dish

00:38:05,190 --> 00:38:12,500
do you have brute yeah yeah yeah

00:38:17,029 --> 00:38:20,449
yeah you should

00:38:21,720 --> 00:38:35,180
oh that's it's good laughs this gitlab

00:38:28,619 --> 00:38:46,200
gita levy it should be power attacking

00:38:35,180 --> 00:38:51,119
yes I don't know the exact URL hopefully

00:38:46,200 --> 00:38:56,730
there's no more Sebastian's really no no

00:38:51,119 --> 00:38:59,099
I know save it access it today money Wow

00:38:56,730 --> 00:39:07,080
then let's do definitions of you know

00:38:59,099 --> 00:39:19,099
something might be somewhere something

00:39:07,080 --> 00:39:19,099
is downloading what is this oh no it's

00:39:21,930 --> 00:39:36,030
I think it's just too slow you probably

00:39:29,309 --> 00:39:38,040
need to it's hundred kbps not that but

00:39:36,030 --> 00:39:44,819
yeah it was the main thing for you to

00:39:38,040 --> 00:39:52,050
get installed anyone else has problem

00:39:44,819 --> 00:39:53,609
installing the ng HTTP do library can

00:39:52,050 --> 00:39:57,260
follow the installation instructions if

00:39:53,609 --> 00:39:57,260
the binaries taking too long to download

00:40:09,220 --> 00:40:14,380
so this is basically a C++ liability

00:40:12,339 --> 00:40:16,420
which is provides a lot of the low level

00:40:14,380 --> 00:40:19,270
abstractions for managing the actual

00:40:16,420 --> 00:40:21,460
frames that get sent over the HTTP to

00:40:19,270 --> 00:40:22,839
connection so different servers build on

00:40:21,460 --> 00:40:25,420
top of this like for example node.js

00:40:22,839 --> 00:40:26,890
chorus uses this library to manage some

00:40:25,420 --> 00:40:28,200
of the different api's that we're

00:40:26,890 --> 00:40:33,640
building for the code

00:40:28,200 --> 00:40:35,380
so yeah this also comes with a tool

00:40:33,640 --> 00:40:38,829
called hedge to load which we'll be

00:40:35,380 --> 00:40:41,770
using to say load test HTTP one and HTTP

00:40:38,829 --> 00:40:43,180
two connections that's what has set up

00:40:41,770 --> 00:40:47,369
in the docker image but I think it might

00:40:43,180 --> 00:40:47,369
take too long to demo

00:41:04,320 --> 00:41:10,000
so one of the things that I'll be

00:41:07,540 --> 00:41:11,350
showing this how how that summer there

00:41:10,000 --> 00:41:13,150
is some different ways in which has

00:41:11,350 --> 00:41:16,600
still be wonder has TB two are different

00:41:13,150 --> 00:41:18,100
so one of the things in is where http/2

00:41:16,600 --> 00:41:19,780
everything goes on the same connection

00:41:18,100 --> 00:41:21,790
and different requests happen on

00:41:19,780 --> 00:41:24,790
different streams as ourself just

00:41:21,790 --> 00:41:26,200
mentioned so with HTTP one for each

00:41:24,790 --> 00:41:29,230
request you need to open a different

00:41:26,200 --> 00:41:31,240
socket and because of this there are

00:41:29,230 --> 00:41:33,430
some security implications of that as

00:41:31,240 --> 00:41:35,260
well so for example if you want to do

00:41:33,430 --> 00:41:37,270
rate limiting or HTTP one right you

00:41:35,260 --> 00:41:39,550
might said something like okay I don't

00:41:37,270 --> 00:41:42,070
want more than say thousand connections

00:41:39,550 --> 00:41:43,420
open at the same time on the server but

00:41:42,070 --> 00:41:45,940
with HTTP to you

00:41:43,420 --> 00:41:48,550
that's that paradigm changes because you

00:41:45,940 --> 00:41:50,380
can with one connection you can have say

00:41:48,550 --> 00:41:53,350
thousand streams at the same time which

00:41:50,380 --> 00:41:55,810
can cause which can utilize a lot of

00:41:53,350 --> 00:41:57,760
resources on your server so when you're

00:41:55,810 --> 00:41:59,710
shifting to http - especially if you're

00:41:57,760 --> 00:42:02,350
doing that on your own server not just

00:41:59,710 --> 00:42:04,720
like using a CDN to manage your assets

00:42:02,350 --> 00:42:06,280
and stuff you need to be fine you need

00:42:04,720 --> 00:42:08,440
to fine-tune all these settings on your

00:42:06,280 --> 00:42:10,090
server for example nginx has a lot of

00:42:08,440 --> 00:42:11,650
different directives to manage number of

00:42:10,090 --> 00:42:13,720
channel open sessions and stuff like

00:42:11,650 --> 00:42:17,920
that so the thing I wanted to show here

00:42:13,720 --> 00:42:22,090
is like how with minimum amount of

00:42:17,920 --> 00:42:24,460
resources and attacker can generate a

00:42:22,090 --> 00:42:27,820
lot of traffic with the same with with

00:42:24,460 --> 00:42:29,590
HTTP - versus HTTP 1 so with HTTP - it's

00:42:27,820 --> 00:42:30,970
pretty cheap to start up sort of start

00:42:29,590 --> 00:42:32,890
make a request you just start a new

00:42:30,970 --> 00:42:35,890
stream and make a request with that

00:42:32,890 --> 00:42:37,420
stream with HTTP 1 it's different so

00:42:35,890 --> 00:42:39,520
what I'm doing here is basically I'm

00:42:37,420 --> 00:42:41,080
just starting a docker container with

00:42:39,520 --> 00:42:46,870
I'm just limiting the amount of memory

00:42:41,080 --> 00:42:50,680
and CPU which is able to use so yeah so

00:42:46,870 --> 00:42:52,960
if you look at it I have done the same

00:42:50,680 --> 00:42:55,420
thing I've just installed an D ng HTTP -

00:42:52,960 --> 00:42:58,110
it also comes with a library called h2

00:42:55,420 --> 00:43:01,390
load can look at the different

00:42:58,110 --> 00:43:04,630
parameters yeah

00:43:01,390 --> 00:43:07,150
so you can use different parameters to

00:43:04,630 --> 00:43:08,770
fear load test your application the cool

00:43:07,150 --> 00:43:11,710
thing about this is it allows you to

00:43:08,770 --> 00:43:15,160
send requests both via HTTP 1 and htb -

00:43:11,710 --> 00:43:17,350
so using this you can test which Tim

00:43:15,160 --> 00:43:19,600
works better not works better with scorn

00:43:17,350 --> 00:43:22,660
can send more this requests at the same

00:43:19,600 --> 00:43:24,190
time so yeah one of the things you can

00:43:22,660 --> 00:43:25,690
play around with number of requests that

00:43:24,190 --> 00:43:27,580
you total number of requests that you

00:43:25,690 --> 00:43:30,130
want to send and this is censored in

00:43:27,580 --> 00:43:31,480
batches so you can say that ok send 100

00:43:30,130 --> 00:43:33,550
requests at the same time I want you to

00:43:31,480 --> 00:43:35,260
send a total of 10,000 requests and

00:43:33,550 --> 00:43:37,390
number of threads you want to use I'm

00:43:35,260 --> 00:43:40,390
just going going to use 1 because I just

00:43:37,390 --> 00:43:42,610
have one core I have limited a docker

00:43:40,390 --> 00:43:45,370
access to just one core number of

00:43:42,610 --> 00:43:48,580
concurrent streams this only useful in

00:43:45,370 --> 00:43:50,820
HTTP 2 can also force TP 1 so let me

00:43:48,580 --> 00:43:50,820
just

00:43:55,470 --> 00:43:58,470
good

00:43:58,700 --> 00:44:05,400
so um so I'm just trying to send a lot

00:44:03,780 --> 00:44:07,830
of traffic to a server make sure that

00:44:05,400 --> 00:44:09,450
you can I've set up a sample server here

00:44:07,830 --> 00:44:12,930
don't probably don't bring down the

00:44:09,450 --> 00:44:16,140
copied a setup side but this is a desk I

00:44:12,930 --> 00:44:18,510
don't care if it goes down so it's just

00:44:16,140 --> 00:44:19,980
experiment at the executor comes the

00:44:18,510 --> 00:44:21,210
thing is this server is also running on

00:44:19,980 --> 00:44:22,500
a docker image it's very little

00:44:21,210 --> 00:44:26,700
resources so there's a high chance that

00:44:22,500 --> 00:44:32,770
it can go down of of course I am not

00:44:26,700 --> 00:44:41,210
redirecting to HTTPS but okay

00:44:32,770 --> 00:44:44,089
so so this is what I'm saying I'm saying

00:44:41,210 --> 00:44:47,809
like send 10,000 requests 100,000

00:44:44,089 --> 00:44:53,359
degrees I'll probably reduce that don't

00:44:47,809 --> 00:44:55,420
want to say yeah let me see what this

00:44:53,359 --> 00:44:55,420
does

00:44:55,660 --> 00:45:03,829
okay so yeah it's able to send that

00:45:00,289 --> 00:45:05,930
quite quickly so you think the chose

00:45:03,829 --> 00:45:08,210
HTTP 2 because you by default it uses

00:45:05,930 --> 00:45:10,400
HTTP 2 you can see the throughput here

00:45:08,210 --> 00:45:14,119
and you can also play around with the

00:45:10,400 --> 00:45:16,250
number of connections so within one

00:45:14,119 --> 00:45:18,109
connection it has multiple streams I'm

00:45:16,250 --> 00:45:19,730
starting 6 connections to see if that

00:45:18,109 --> 00:45:22,010
improves throughput it depends on your

00:45:19,730 --> 00:45:25,849
system configuration and stuff like that

00:45:22,010 --> 00:45:29,990
with HTTP 1 the throughput is much more

00:45:25,849 --> 00:45:34,819
lower so you can force HTTP 1 by sending

00:45:29,990 --> 00:45:36,319
this flag called h1 so here if you try

00:45:34,819 --> 00:45:38,029
to start a lot of connections at the

00:45:36,319 --> 00:45:40,549
same time the docker images test crashes

00:45:38,029 --> 00:45:43,119
like it I mean the it's not able to send

00:45:40,549 --> 00:45:45,829
as many parallel requests as HTTP 2 and

00:45:43,119 --> 00:45:48,799
you can play around with that so you can

00:45:45,829 --> 00:45:51,079
see if you start setting seed that is

00:45:48,799 --> 00:45:53,299
the number of open connections to say 15

00:45:51,079 --> 00:45:55,190
or 20 they don't be able to handle it so

00:45:53,299 --> 00:45:56,599
and you can see that it's much more

00:45:55,190 --> 00:45:59,990
slower you can measure the throughput

00:45:56,599 --> 00:46:03,799
you know just play around with this tool

00:45:59,990 --> 00:46:05,990
it's good for measuring seeing what how

00:46:03,799 --> 00:46:08,630
HTTP 1 and 2 are different for at a

00:46:05,990 --> 00:46:10,309
fundamental level while using streams is

00:46:08,630 --> 00:46:12,529
different from setting up a whole new

00:46:10,309 --> 00:46:14,180
connection to it's more memory efficient

00:46:12,529 --> 00:46:16,630
and stuff like that so you can just play

00:46:14,180 --> 00:46:16,630
around with this

00:46:40,690 --> 00:46:46,760
this has anyone has problem setting up

00:46:43,790 --> 00:46:49,180
in DHT without trying out h2 load just

00:46:46,760 --> 00:46:49,180
let me know

00:48:20,020 --> 00:48:25,180
as you can see the requests start

00:48:22,220 --> 00:48:25,180
failing aside

00:48:26,760 --> 00:48:31,380
parallel connections which is very bad

00:48:29,010 --> 00:48:34,170
with HTTP one so you can see that most

00:48:31,380 --> 00:48:35,670
requests just fail because it's not able

00:48:34,170 --> 00:48:41,090
to open that many parallel connections

00:48:35,670 --> 00:48:41,090
but HTTP do this much more easier to do

00:48:50,390 --> 00:49:00,410
so the URLs gitlab not github so if you

00:48:54,990 --> 00:49:00,410
want access the readme this is the your

00:49:08,720 --> 00:49:11,960
it was

00:49:12,370 --> 00:49:16,540
get him access it right yeah

00:49:19,789 --> 00:49:30,539
now we're able to access it that one

00:49:24,089 --> 00:49:35,640
yeah yeah this down so have you

00:49:30,539 --> 00:49:37,470
installed yeah so just think best so

00:49:35,640 --> 00:49:42,599
there now there will be a tool called

00:49:37,470 --> 00:49:44,819
its to load I think yeah so now you just

00:49:42,599 --> 00:49:46,739
give it a URL and insta and you need to

00:49:44,819 --> 00:49:47,940
can set the number of total request to

00:49:46,739 --> 00:49:49,829
send how many requests to send in

00:49:47,940 --> 00:50:01,759
parallel and play that and just monitor

00:49:49,829 --> 00:50:05,519
your CP usage and last yearI of

00:50:01,759 --> 00:50:08,269
basically there was a just purpose from

00:50:05,519 --> 00:50:12,150
his company over James now who's a

00:50:08,269 --> 00:50:13,829
really amazing node hacker were coming

00:50:12,150 --> 00:50:16,170
primarily and Matteo was supporting him

00:50:13,829 --> 00:50:19,349
in that and I contribute a little bit on

00:50:16,170 --> 00:50:21,839
some compatibility or push support

00:50:19,349 --> 00:50:25,950
testing and stuff like that but um to

00:50:21,839 --> 00:50:29,249
minister to of h2 URL I don't know if

00:50:25,950 --> 00:50:33,150
you call it hurl or what but jazz came I

00:50:29,249 --> 00:50:34,619
guess but if you npm install' h2 URL it

00:50:33,150 --> 00:50:36,930
gives you another option another tool

00:50:34,619 --> 00:50:39,089
they could use to do similar things to

00:50:36,930 --> 00:50:41,130
curl or chase different tune

00:50:39,089 --> 00:50:43,859
so it's another option just npm install

00:50:41,130 --> 00:50:47,069
this locally in your package or do a

00:50:43,859 --> 00:50:50,039
global installed then you guys everyone

00:50:47,069 --> 00:50:51,809
here missense and learn so something

00:50:50,039 --> 00:50:55,650
like some something minor but not yet

00:50:51,809 --> 00:50:58,410
seen is you can also ng xh2 URL and

00:50:55,650 --> 00:50:59,729
that's basically like npm at the tool

00:50:58,410 --> 00:51:02,700
comes with NPM so if you have note

00:50:59,729 --> 00:51:05,219
installed on your system you need no 9.4

00:51:02,700 --> 00:51:06,539
for this stuff by the way do stuff stay

00:51:05,219 --> 00:51:07,940
with the latest one that's changing like

00:51:06,539 --> 00:51:12,270
every week

00:51:07,940 --> 00:51:15,390
so if you do npx it's an NPM because 2

00:51:12,270 --> 00:51:18,420
NP x h2 URL and run the entire command

00:51:15,390 --> 00:51:20,940
what happens is that NP X is like a

00:51:18,420 --> 00:51:22,349
little helper and helper tool that NPM

00:51:20,940 --> 00:51:25,080
installs it in like a temporary location

00:51:22,349 --> 00:51:26,640
runs the command and when it finishes

00:51:25,080 --> 00:51:28,230
running it removes it immediately again

00:51:26,640 --> 00:51:30,330
so it's kind of like the benefit of

00:51:28,230 --> 00:51:32,220
doing a global install without actually

00:51:30,330 --> 00:51:36,210
polluting you know your your command

00:51:32,220 --> 00:51:40,230
line things basically so try try NP x h2

00:51:36,210 --> 00:51:42,420
URL - - super bowls and some URL put it

00:51:40,230 --> 00:51:45,290
out it's a nice it's uh just a little

00:51:42,420 --> 00:51:45,290
experimental thing

00:51:52,590 --> 00:51:55,830
each of these can give you a slightly

00:51:54,150 --> 00:51:57,600
different perspective like I was saying

00:51:55,830 --> 00:51:59,430
or they're also like curl actually kind

00:51:57,600 --> 00:52:01,050
of like home it's a few things about the

00:51:59,430 --> 00:52:03,690
protocol but then it tells you a lot

00:52:01,050 --> 00:52:05,730
more about TLS handshake so depending on

00:52:03,690 --> 00:52:06,840
what you're debugging each of these cut

00:52:05,730 --> 00:52:09,050
it might give you a different insight

00:52:06,840 --> 00:52:13,500
and might help you solve the problems

00:52:09,050 --> 00:52:16,100
okay I know for a fact that like the

00:52:13,500 --> 00:52:20,670
browser tool sometimes are fictitious I

00:52:16,100 --> 00:52:22,020
have to put it mildly like when you're

00:52:20,670 --> 00:52:23,280
doing things like server push and then

00:52:22,020 --> 00:52:24,960
you're trying to figure out why are

00:52:23,280 --> 00:52:27,780
there more is hitting your server when

00:52:24,960 --> 00:52:29,460
the browser tells you that it isn't you

00:52:27,780 --> 00:52:30,600
know it can you can lead to interesting

00:52:29,460 --> 00:52:32,310
things by look at the internals and

00:52:30,600 --> 00:52:34,440
seeing oh for some reason opens up two

00:52:32,310 --> 00:52:39,240
streams because some blog in a browser

00:52:34,440 --> 00:52:41,640
leads to you know the favicon icon being

00:52:39,240 --> 00:52:42,840
somehow on a separate bed because that's

00:52:41,640 --> 00:52:44,340
being rented by a different part of the

00:52:42,840 --> 00:52:45,810
user interface and it opens from UTC

00:52:44,340 --> 00:52:47,670
something like that all these kind of

00:52:45,810 --> 00:52:50,810
weird stuff happens and that's why it's

00:52:47,670 --> 00:52:56,590
useful to have like the full suite of

00:52:50,810 --> 00:52:58,670
debugging tools okay

00:52:56,590 --> 00:52:59,870
all right so everyone's got like a

00:52:58,670 --> 00:53:00,290
little bit of thing working out on

00:52:59,870 --> 00:53:02,090
somebody

00:53:00,290 --> 00:53:04,430
everyone's made a request and then

00:53:02,090 --> 00:53:07,810
looked at htv-2 stuff who still like

00:53:04,430 --> 00:53:07,810
need a little hand to go around

00:53:19,920 --> 00:53:23,340
some of us vote

00:53:57,320 --> 00:54:13,380
oh let me check this is basically it's

00:54:12,150 --> 00:54:17,369
arson of note are you in

00:54:13,380 --> 00:54:19,760
I think it's not understanding the async

00:54:17,369 --> 00:54:19,760
function

00:54:21,800 --> 00:54:36,840
yeah oh yeah

00:54:27,330 --> 00:54:38,820
this tends to 9.4 yeah yeah this

00:54:36,840 --> 00:54:41,550
definitely won't orchids by them make

00:54:38,820 --> 00:54:48,450
sure they are at least on not eight or

00:54:41,550 --> 00:54:52,410
nine yeah no yeah no yeah someone here

00:54:48,450 --> 00:54:54,650
had a docker issue yeah what do I get

00:54:52,410 --> 00:54:54,650
there

00:55:00,970 --> 00:56:14,650
oh are you terminal with the Linux term

00:56:11,250 --> 00:56:18,130
do you have that or you have a git bash

00:56:14,650 --> 00:56:20,109
or something yeah just try it on -

00:56:18,130 --> 00:56:23,680
that's what I mean because I think it's

00:56:20,109 --> 00:56:26,130
failing because he didn't expect Yankee

00:56:23,680 --> 00:56:26,130
passion

00:56:26,510 --> 00:56:37,400
oh but it's darker and stuff installed

00:56:31,850 --> 00:56:40,370
on parish just I'm using all dr.

00:56:37,400 --> 00:56:46,070
everyday in the in this Oh Windows okay

00:56:40,370 --> 00:56:47,660
oh I'm not sure that so no-legged he's

00:56:46,070 --> 00:56:49,810
running a bash script in the

00:56:47,660 --> 00:56:55,840
installation process being searched and

00:56:49,810 --> 00:56:55,840
oh but this is bash as Oh

00:57:01,060 --> 00:57:06,170
in Virtual Box we have Linux running or

00:57:03,680 --> 00:57:09,140
something yes

00:57:06,170 --> 00:57:12,760
no it's not in Russia box but I can run

00:57:09,140 --> 00:57:12,760
everything okay

00:57:15,810 --> 00:57:18,920
don't say

00:57:22,880 --> 00:57:29,289
I haven't tried it in Windows sorry

00:57:34,850 --> 00:57:38,020
this used to run

00:58:15,279 --> 00:58:18,549
nothing okay

00:58:44,070 --> 00:58:49,470
all right everybody got something

00:58:46,710 --> 00:58:53,060
working so guys your hand raised up if

00:58:49,470 --> 00:59:00,060
you don't have anything good passing it

00:58:53,060 --> 00:59:04,040
okay I'm gonna go on to the next part

00:59:00,060 --> 00:59:04,040
where we get more to the side of it

00:59:35,990 --> 00:59:42,330
because I think of APA except a second

00:59:38,910 --> 00:59:45,660
phone the push yeah so so the main thing

00:59:42,330 --> 00:59:49,050
is like HTTP 2 is experimental in

00:59:45,660 --> 00:59:52,230
node.js when you when you start using it

00:59:49,050 --> 00:59:53,730
it'll throw a warning that's fine that's

00:59:52,230 --> 00:59:54,090
supposed to be the case the reason it's

00:59:53,730 --> 00:59:55,470
there

00:59:54,090 --> 00:59:57,330
the reason is considered experimental is

00:59:55,470 --> 01:00:01,920
because the API does still change a

00:59:57,330 --> 01:00:06,000
little bit here and there and normally

01:00:01,920 --> 01:00:07,350
if you change any API in node core even

01:00:06,000 --> 01:00:08,880
even if it's the smallest thing like

01:00:07,350 --> 01:00:10,530
like you change a typo in an error

01:00:08,880 --> 01:00:13,020
message right that has to go through

01:00:10,530 --> 01:00:14,450
really lengthy deprecation cycle that

01:00:13,020 --> 01:00:17,670
could take years and years because of

01:00:14,450 --> 01:00:19,890
LTS the long term stability a long term

01:00:17,670 --> 01:00:22,920
support versions of note that could take

01:00:19,890 --> 01:00:24,630
years to actually fully go out and just

01:00:22,920 --> 01:00:27,660
waiting that long with HTTP 2 is just

01:00:24,630 --> 01:00:29,970
not acceptable right now we we didn't

01:00:27,660 --> 01:00:32,850
want to wait like years to actually ship

01:00:29,970 --> 01:00:35,310
it in the state in the current version

01:00:32,850 --> 01:00:37,110
of node and we also didn't want to have

01:00:35,310 --> 01:00:38,880
to leave bugs trailing and trailing for

01:00:37,110 --> 01:00:40,560
years potentially leaving people

01:00:38,880 --> 01:00:42,780
vulnerable to security issues so that's

01:00:40,560 --> 01:00:45,390
why HP 2 is just considered experimental

01:00:42,780 --> 01:00:46,740
so if you're using it expect that some

01:00:45,390 --> 01:00:48,210
of these api's might change so some of

01:00:46,740 --> 01:00:51,120
the frameworks that you're using the

01:00:48,210 --> 01:00:52,140
authors of those frameworks have to like

01:00:51,120 --> 01:00:53,310
really pay attention to this and

01:00:52,140 --> 01:00:55,380
constantly update so if you have a

01:00:53,310 --> 01:00:57,600
dependency on like a web service or some

01:00:55,380 --> 01:00:59,700
some some middleware that uses HTTP 2

01:00:57,600 --> 01:01:01,350
you know you might want to be updating

01:00:59,700 --> 01:01:03,420
that all the time whenever it is a new

01:01:01,350 --> 01:01:06,210
version of node test it out before you

01:01:03,420 --> 01:01:09,630
ship it in production so the current

01:01:06,210 --> 01:01:13,250
latest release is 9 point 4.0 as of

01:01:09,630 --> 01:01:17,390
yesterday that's what I'll be using so

01:01:13,250 --> 01:01:19,620
the basic API the way that you use it is

01:01:17,390 --> 01:01:22,890
really familiar

01:01:19,620 --> 01:01:24,540
we've got require HTTP for HTTP 1.1 then

01:01:22,890 --> 01:01:28,320
if you want to make that secure you use

01:01:24,540 --> 01:01:31,260
TLS by requiring HTTPS that is almost an

01:01:28,320 --> 01:01:33,270
exact same API if anyone's read any

01:01:31,260 --> 01:01:35,190
documentation on HTTPS basically you get

01:01:33,270 --> 01:01:36,330
a function called create server and with

01:01:35,190 --> 01:01:38,610
ACPs you get a function called create

01:01:36,330 --> 01:01:40,230
secure server right now if you do

01:01:38,610 --> 01:01:43,900
require HTTP to

01:01:40,230 --> 01:01:45,849
http/2 itself doesn't mandate TLS so you

01:01:43,900 --> 01:01:47,560
can use it with or without it's a new

01:01:45,849 --> 01:01:50,589
protocol but you can use with or without

01:01:47,560 --> 01:01:52,119
TLS so you get both the create server as

01:01:50,589 --> 01:01:55,030
well as creates or secure server

01:01:52,119 --> 01:01:56,650
functions so with HTTP 2 you can skip

01:01:55,030 --> 01:01:58,089
this difference here and just you can

01:01:56,650 --> 01:02:01,750
choose yourself whether you want TLS or

01:01:58,089 --> 01:02:03,640
not now you probably want TLS and I'll

01:02:01,750 --> 01:02:06,040
I'll probably go into that in a little

01:02:03,640 --> 01:02:11,560
second here but for now let's let's try

01:02:06,040 --> 01:02:13,180
to build a server using just a

01:02:11,560 --> 01:02:15,160
documentation so I want to do a little

01:02:13,180 --> 01:02:17,260
exercise which is to create an HTTP 2

01:02:15,160 --> 01:02:20,410
server and there's like a little cheat

01:02:17,260 --> 01:02:21,670
right there so the very student level

01:02:20,410 --> 01:02:22,810
and I'm sure it's like every single

01:02:21,670 --> 01:02:24,430
person here has already seen the code

01:02:22,810 --> 01:02:28,089
but try to create this without looking

01:02:24,430 --> 01:02:29,680
at the actual exercise now look at the

01:02:28,089 --> 01:02:31,180
documentation because the idea is that

01:02:29,680 --> 01:02:34,450
you familiarize yourself with the

01:02:31,180 --> 01:02:36,640
relation as your your reference so you

01:02:34,450 --> 01:02:38,470
don't have to memorize api's and other

01:02:36,640 --> 01:02:41,740
pointless trivia fact that changes all

01:02:38,470 --> 01:02:44,319
the time just always refer to the node

01:02:41,740 --> 01:02:48,010
documentation at no DSL org slash API

01:02:44,319 --> 01:02:51,339
slash HTTP 2.8 EML and this is nice to

01:02:48,010 --> 01:02:56,050
be written it's more or less if you see

01:02:51,339 --> 01:02:59,170
typos you might want to contribute a bug

01:02:56,050 --> 01:03:01,119
fix this is more or less up to date

01:02:59,170 --> 01:03:02,170
there's a couple of errors in there and

01:03:01,119 --> 01:03:03,819
I'll point out later that you might need

01:03:02,170 --> 01:03:05,829
to go to the list latest latest like on

01:03:03,819 --> 01:03:06,910
the repository itself because there's

01:03:05,829 --> 01:03:08,589
some of the api's have changed like a

01:03:06,910 --> 01:03:11,670
few weeks ago and and for some reason

01:03:08,589 --> 01:03:13,540
the documentation was not rebuilt yet

01:03:11,670 --> 01:03:15,430
now if you go here

01:03:13,540 --> 01:03:18,880
you'll start see there's a core API and

01:03:15,430 --> 01:03:23,640
there's a compatibility API so the

01:03:18,880 --> 01:03:26,980
reason for this is that there well ok

01:03:23,640 --> 01:03:29,200
essentially you have these layers of the

01:03:26,980 --> 01:03:31,030
note the no tshp to operation one is the

01:03:29,200 --> 01:03:33,579
ng h to be to library that we were

01:03:31,030 --> 01:03:35,859
talking about so that library is the

01:03:33,579 --> 01:03:38,079
lowest level of HTTP to in foundation

01:03:35,859 --> 01:03:40,540
node that's written in C it's just

01:03:38,079 --> 01:03:42,250
included in the source code in in the

01:03:40,540 --> 01:03:45,460
noches repository it's just included as

01:03:42,250 --> 01:03:47,380
a dependency untouched right there's the

01:03:45,460 --> 01:03:49,300
exact code from the ng HTTP view

01:03:47,380 --> 01:03:51,250
repository is included into the node.js

01:03:49,300 --> 01:03:53,920
repository so it's completely standard

01:03:51,250 --> 01:03:57,520
now the C++

01:03:53,920 --> 01:03:59,799
part of note j/s itself is what binds to

01:03:57,520 --> 01:04:01,630
the C code of this library and so

01:03:59,799 --> 01:04:07,569
there's a lot of C++ code that was

01:04:01,630 --> 01:04:10,210
written that exposes the API that ng

01:04:07,569 --> 01:04:12,430
HTTP view offers exposes it in in node

01:04:10,210 --> 01:04:16,150
c++ land so no most of the node

01:04:12,430 --> 01:04:18,819
internals are written in c++ they baby

01:04:16,150 --> 01:04:20,950
this is library called libuv which is

01:04:18,819 --> 01:04:23,349
sort of an event loop library that does

01:04:20,950 --> 01:04:24,730
all of the input output of a networking

01:04:23,349 --> 01:04:27,190
all the file access all the operating

01:04:24,730 --> 01:04:28,809
system hooks that's all c++ and it's

01:04:27,190 --> 01:04:30,160
there the reason for that is because a

01:04:28,809 --> 01:04:32,619
is high performance and B it's cross

01:04:30,160 --> 01:04:35,140
platform so libel UV kind of exposes

01:04:32,619 --> 01:04:37,540
file access and networking to like on

01:04:35,140 --> 01:04:39,400
mac on windows on linux with a cop api

01:04:37,540 --> 01:04:41,859
of exposes that event loop exposes the

01:04:39,400 --> 01:04:43,240
v8 JavaScript engine bindings it's

01:04:41,859 --> 01:04:44,440
posted all that in a nice high

01:04:43,240 --> 01:04:47,170
performance and cross-platform manner

01:04:44,440 --> 01:04:49,210
and so that's why we have to have c++ to

01:04:47,170 --> 01:04:51,970
connect to any other library like ng

01:04:49,210 --> 01:04:55,500
HTTP to for instance now because we are

01:04:51,970 --> 01:05:01,839
using javascript this this c++ layer

01:04:55,500 --> 01:05:04,750
exposes that its own api to a javascript

01:05:01,839 --> 01:05:10,150
and like but in an internal javascript

01:05:04,750 --> 01:05:13,119
library within within node and this is

01:05:10,150 --> 01:05:15,579
sort of like a layer where it splits

01:05:13,119 --> 01:05:17,260
into a core and a compatibility api and

01:05:15,579 --> 01:05:19,089
we can we can use that in the

01:05:17,260 --> 01:05:20,890
documentation so it's described as the

01:05:19,089 --> 01:05:22,869
core API and a compatibility api the

01:05:20,890 --> 01:05:26,049
compatibility api is trying to mimic

01:05:22,869 --> 01:05:27,700
everything that the normal HTTP one api

01:05:26,049 --> 01:05:30,190
X offers and the reason to that is

01:05:27,700 --> 01:05:31,720
because you want to stay compatible to

01:05:30,190 --> 01:05:33,430
provide an upgrade path for people who

01:05:31,720 --> 01:05:35,260
are currently using the existing web

01:05:33,430 --> 01:05:36,819
frameworks like happy or Express or

01:05:35,260 --> 01:05:39,040
connect or all these things or any kind

01:05:36,819 --> 01:05:40,720
of custom code or the note fetch all

01:05:39,040 --> 01:05:42,190
these kind of things you want to make it

01:05:40,720 --> 01:05:44,770
as easy as possible to migrate those

01:05:42,190 --> 01:05:48,190
projects over so we we expose all of the

01:05:44,770 --> 01:05:51,160
methods all of the properties as long as

01:05:48,190 --> 01:05:55,240
they exist as concepts in HTTP to try to

01:05:51,160 --> 01:05:58,329
map them to the same API but the core

01:05:55,240 --> 01:06:00,430
API is going to offer you access to the

01:05:58,329 --> 01:06:03,160
new concepts like push streams or the

01:06:00,430 --> 01:06:04,809
streams and a session it's gonna offer

01:06:03,160 --> 01:06:07,480
you access to like the h2 go to settings

01:06:04,809 --> 01:06:09,250
it's gonna give you a lower level ax

01:06:07,480 --> 01:06:10,750
a slightly higher performance because it

01:06:09,250 --> 01:06:14,140
doesn't do as much like wrapping and

01:06:10,750 --> 01:06:16,090
like extra lookups but performance plies

01:06:14,140 --> 01:06:17,410
they're more or less the same you could

01:06:16,090 --> 01:06:19,960
you can comfortably use a compatibility

01:06:17,410 --> 01:06:25,210
labor API and I never face any issues

01:06:19,960 --> 01:06:27,750
because of that so look at the core API

01:06:25,210 --> 01:06:32,410
and just build a little nodejs server

01:06:27,750 --> 01:06:36,130
it's really quite straightforward well I

01:06:32,410 --> 01:06:39,910
mean okay I'm just gonna go ahead and

01:06:36,130 --> 01:06:44,320
put this up here essentially like I said

01:06:39,910 --> 01:06:47,310
you get a create server method from the

01:06:44,320 --> 01:06:51,070
require HTTP to write you import it and

01:06:47,310 --> 01:06:53,109
the the most fundamental event that you

01:06:51,070 --> 01:06:55,210
can deal with any request as a stream

01:06:53,109 --> 01:06:59,200
every request is essentially a new

01:06:55,210 --> 01:07:00,700
stream a caption is a session you can

01:06:59,200 --> 01:07:05,470
think of like a TCP connection is a

01:07:00,700 --> 01:07:09,670
session and a stream is a request more

01:07:05,470 --> 01:07:11,050
or less now when you end this session or

01:07:09,670 --> 01:07:13,090
when this story when the stream opens

01:07:11,050 --> 01:07:14,980
you receive this stream object which is

01:07:13,090 --> 01:07:17,440
in documentation and you also get the

01:07:14,980 --> 01:07:18,940
headers already decoded so the stream

01:07:17,440 --> 01:07:20,950
actually you only receive this event

01:07:18,940 --> 01:07:22,060
once it fully parsed and processed all

01:07:20,950 --> 01:07:26,619
of the headers the headers could be

01:07:22,060 --> 01:07:28,330
split across multiple fragments so it's

01:07:26,619 --> 01:07:30,160
sort of the the the API kind of waits

01:07:28,330 --> 01:07:31,359
for all those to come in and once once

01:07:30,160 --> 01:07:34,000
it's completely done it'll give you the

01:07:31,359 --> 01:07:36,010
full of decoded decompressed normalized

01:07:34,000 --> 01:07:38,350
and everything sort of safe to work with

01:07:36,010 --> 01:07:40,480
headers object and that's just a map no

01:07:38,350 --> 01:07:44,410
prototype just a map of raw like key

01:07:40,480 --> 01:07:46,960
value fully decoded so I've got a little

01:07:44,410 --> 01:07:49,480
logic here to sort of hot show what this

01:07:46,960 --> 01:07:52,570
does so you can you can look at the day

01:07:49,480 --> 01:07:53,800
API and document run this yourself write

01:07:52,570 --> 01:07:55,359
this yourself or you just copy-paste

01:07:53,800 --> 01:07:57,280
this and just try to run this on your

01:07:55,359 --> 01:07:58,500
system and then play around using the

01:07:57,280 --> 01:08:00,940
tools that we set up earlier the

01:07:58,500 --> 01:08:04,660
debugging clients that we have hit

01:08:00,940 --> 01:08:08,170
against your own local server so

01:08:04,660 --> 01:08:14,340
Oh Jess but now you can try to ddos this

01:08:08,170 --> 01:08:16,720
one on your own under machine okay

01:08:14,340 --> 01:08:20,080
what's happening here is normally you

01:08:16,720 --> 01:08:22,120
would you do like something like send

01:08:20,080 --> 01:08:24,700
head or right head or whatever I always

01:08:22,120 --> 01:08:26,860
forget the API there's a new API who

01:08:24,700 --> 01:08:28,870
called respond where you just give it

01:08:26,860 --> 01:08:32,350
all these headers and remember the

01:08:28,870 --> 01:08:34,450
status code in HTTP 2 is not like this

01:08:32,350 --> 01:08:36,310
magical field in the first line it's

01:08:34,450 --> 01:08:37,360
just another pseudo header so when

01:08:36,310 --> 01:08:38,560
you're sending all your header so you

01:08:37,360 --> 01:08:41,230
can now send your status code like your

01:08:38,560 --> 01:08:43,480
200 your 404 your 500 whatever it is you

01:08:41,230 --> 01:08:45,070
can just send it as this : status header

01:08:43,480 --> 01:08:47,380
name with the value being this this

01:08:45,070 --> 01:08:50,050
number so you just send your send these

01:08:47,380 --> 01:08:51,520
send this response and then you that's

01:08:50,050 --> 01:08:53,890
just going to send the header fragment

01:08:51,520 --> 01:08:57,250
out to the to the client and then you

01:08:53,890 --> 01:08:59,140
can send any kind of data as a stream so

01:08:57,250 --> 01:09:01,750
you can you can pipe files to your

01:08:59,140 --> 01:09:04,240
response in you can like do a create

01:09:01,750 --> 01:09:05,440
file a crate read stream from a file or

01:09:04,240 --> 01:09:07,480
take any kind of stream mail you have a

01:09:05,440 --> 01:09:09,580
node and you can pipe it to this stream

01:09:07,480 --> 01:09:10,870
and it'll automatically flush all the

01:09:09,580 --> 01:09:13,600
data and do the buffering all really

01:09:10,870 --> 01:09:15,730
nicely but it this is a simple way to

01:09:13,600 --> 01:09:22,600
just send a string out there so if you

01:09:15,730 --> 01:09:23,800
connect to your port 8080 with your ya

01:09:22,600 --> 01:09:24,730
know so that's that's a key thing the

01:09:23,800 --> 01:09:26,440
browser won't actually work right now

01:09:24,730 --> 01:09:28,780
this is just a create server so this is

01:09:26,440 --> 01:09:30,280
there's no TLS there's no HTTP or

01:09:28,780 --> 01:09:34,090
anything like that that's why I'm

01:09:30,280 --> 01:09:37,900
leaving port 8080 to me they the port 80

01:09:34,090 --> 01:09:40,090
is support 80s for HTTP and port 443 as

01:09:37,900 --> 01:09:43,330
a default port for TLS all right so HP

01:09:40,090 --> 01:09:47,920
and HP ICF port 80 and 443 the reason

01:09:43,330 --> 01:09:51,550
why I'm using 8080 is because any port

01:09:47,920 --> 01:09:53,050
below 1024 on UNIX you have sudo access

01:09:51,550 --> 01:09:55,330
and it just complicates things

01:09:53,050 --> 01:09:57,070
needlessly and you might have already

01:09:55,330 --> 01:09:59,470
has something running on there so I use

01:09:57,070 --> 01:10:03,490
my values are usually this is personal

01:09:59,470 --> 01:10:06,010
preferences like 8080 and 8,000 for 443

01:10:03,490 --> 01:10:09,400
so I just changed this 82 or 443 in the

01:10:06,010 --> 01:10:10,690
other demos so keep that in mind when

01:10:09,400 --> 01:10:12,100
you're when you're requesting this that

01:10:10,690 --> 01:10:13,210
you're using so if you hit this with

01:10:12,100 --> 01:10:16,380
your browser your browser will just go

01:10:13,210 --> 01:10:16,380
like oh I can't connect it at all

01:10:17,600 --> 01:10:20,760
we'll do a demo we're like how did you

01:10:19,710 --> 01:10:24,389
two have to do this

01:10:20,760 --> 01:10:27,449
TLS thing after this so okay I wanna see

01:10:24,389 --> 01:10:30,080
that I've actually achieved this step so

01:10:27,449 --> 01:10:35,000
we have some HP two servers running

01:10:30,080 --> 01:10:35,000
anybody have a alright

01:10:36,960 --> 01:10:42,450
is this your local server hearing okay

01:10:45,450 --> 01:10:49,660
yeah yeah looks good

01:10:47,710 --> 01:10:54,130
and then there's data on your so my

01:10:49,660 --> 01:10:57,580
first response header data here how many

01:10:54,130 --> 01:10:58,210
oh hello there is you sort of printed in

01:10:57,580 --> 01:11:06,750
line here

01:10:58,210 --> 01:11:08,950
nice good luck good job you can try um

01:11:06,750 --> 01:11:10,270
you can try doing things like piping a

01:11:08,950 --> 01:11:11,620
file to it or something like you can

01:11:10,270 --> 01:11:14,130
read the local file type it to that

01:11:11,620 --> 01:11:14,130
response

01:11:21,140 --> 01:11:35,550
you got it awesome it's quick so the :

01:11:32,550 --> 01:11:39,750
think that's a pseudo header to do PS

01:11:35,550 --> 01:11:41,550
you do so that's basically when an HTTP

01:11:39,750 --> 01:11:45,240
to you don't have this like I need to be

01:11:41,550 --> 01:11:47,610
one you have like get space HTTP slash

01:11:45,240 --> 01:11:49,590
1.1 space and then slash the URL right

01:11:47,610 --> 01:11:51,750
the path so that's the first line of the

01:11:49,590 --> 01:11:53,100
request but in to you don't have like a

01:11:51,750 --> 01:11:54,810
line of your request anywhere it's

01:11:53,100 --> 01:11:56,970
binary so there's no concept of like the

01:11:54,810 --> 01:11:58,650
first line and so to just to have those

01:11:56,970 --> 01:12:00,360
concept they sort of map it to these

01:11:58,650 --> 01:12:02,340
pseudo header stuff so each part of that

01:12:00,360 --> 01:12:05,610
so the the method is like : method

01:12:02,340 --> 01:12:07,560
header and then the status is the 200

01:12:05,610 --> 01:12:09,570
it's like cool on status and then

01:12:07,560 --> 01:12:12,090
there's a colon path for the slash blah

01:12:09,570 --> 01:12:13,980
blah blah so then Apple that because

01:12:12,090 --> 01:12:15,900
then it just fits into the 80 pack

01:12:13,980 --> 01:12:17,010
header compression so this header frame

01:12:15,900 --> 01:12:18,870
just contains header header header

01:12:17,010 --> 01:12:20,340
header header and then this H pack

01:12:18,870 --> 01:12:22,290
compresses the whole thing no matter

01:12:20,340 --> 01:12:25,140
what it is right a header can have any

01:12:22,290 --> 01:12:27,240
name so this is quote path it's all just

01:12:25,140 --> 01:12:28,830
the same so it compresses it so that's

01:12:27,240 --> 01:12:30,630
why it maps this concept a little bit

01:12:28,830 --> 01:12:32,250
but yeah we still have to deal with like

01:12:30,630 --> 01:12:33,750
now in HP - if you request HP do you

01:12:32,250 --> 01:12:35,280
have these kind of pseudo headers and

01:12:33,750 --> 01:12:36,690
you don't have the list in standard

01:12:35,280 --> 01:12:39,420
that's why in the compatibility layer

01:12:36,690 --> 01:12:40,260
you can actually treat it like the

01:12:39,420 --> 01:12:43,500
normal hv1

01:12:40,260 --> 01:12:45,420
api but in the core with the core API

01:12:43,500 --> 01:12:48,620
are using now you have to deal with like

01:12:45,420 --> 01:12:48,620
: status and : path

01:12:51,309 --> 01:13:03,429
are you doing oh you're bending my code

01:12:55,489 --> 01:13:03,429
now okay you got it yeah

01:13:08,540 --> 01:13:19,160
all good here very working Bacchus you

01:13:15,810 --> 01:13:19,160
prefer to type instead of food

01:13:21,380 --> 01:13:26,870
oh it's a responder

01:13:32,280 --> 01:13:40,520
okay how are you guys yeah

01:13:42,219 --> 01:13:56,729
Oh see thank you for coming to go huh

01:13:52,239 --> 01:14:01,269
okay you got it running and then use the

01:13:56,729 --> 01:14:07,749
yeah in just not the x-axis the server

01:14:01,269 --> 01:14:12,309
what a proxy yeah NGH yeah and then just

01:14:07,749 --> 01:14:17,969
like it's based veal over hot and I

01:14:12,309 --> 01:14:17,969
maybe want to do for both wait

01:14:20,860 --> 01:14:25,900
nice hello world so you can see all the

01:14:24,820 --> 01:14:27,190
frames here that gets you like the

01:14:25,900 --> 01:14:29,940
headers frame coming out with the pseudo

01:14:27,190 --> 01:14:29,940
headers and everything in there

01:14:34,420 --> 01:14:41,440
what's good

01:14:35,960 --> 01:14:43,139
I got coffee yeah yeah that's fine

01:14:41,440 --> 01:14:45,960
[Music]

01:14:43,139 --> 01:14:57,630
Oh how's it going oh that's something

01:14:45,960 --> 01:14:59,699
wrong this is excellent ideas I've never

01:14:57,630 --> 01:15:01,830
got no done you have you have you got a

01:14:59,699 --> 01:15:04,469
note from your computer right okay and

01:15:01,830 --> 01:15:16,380
then have you tried to exercise thank

01:15:04,469 --> 01:15:17,550
you an apple any helpful okay you prefer

01:15:16,380 --> 01:15:22,969
to film it's fine if you wanna read on

01:15:17,550 --> 01:15:31,830
your own that's okay okay how's it going

01:15:22,969 --> 01:15:34,369
yeah but it doesn't work with oh you're

01:15:31,830 --> 01:15:36,389
trying to turn turn into HTML yeah

01:15:34,369 --> 01:15:37,770
where's the port yeah so you doesn't

01:15:36,389 --> 01:15:43,100
work there that's right so the browser

01:15:37,770 --> 01:15:45,210
doesn't allow HTTP - without encryption

01:15:43,100 --> 01:15:46,670
so we'll show I'll show like how to set

01:15:45,210 --> 01:15:51,110
it up to the encryption locally you know

01:15:46,670 --> 01:15:51,110
it's kind of tedious painful sometimes

01:15:52,580 --> 01:16:01,350
locally you read your own yes look at my

01:15:59,880 --> 01:16:05,520
tutorial I mean you can skip ahead I

01:16:01,350 --> 01:16:07,710
guess another so there's a I mean I just

01:16:05,520 --> 01:16:12,570
I have like some yeah some tools and

01:16:07,710 --> 01:16:14,520
whatever you know just published

01:16:12,570 --> 01:16:16,920
despondent I mean I've been using this

01:16:14,520 --> 01:16:20,090
forever but I never had a public yeah

01:16:16,920 --> 01:16:20,090
try it out

01:16:26,000 --> 01:16:33,990
I don't know hmm

01:16:31,060 --> 01:16:33,990
what is this

01:16:38,640 --> 01:16:45,400
okay okay hang on here need property pfx

01:16:43,030 --> 01:16:48,610
anything things the only different

01:16:45,400 --> 01:16:54,940
exercise I think you copied from the

01:16:48,610 --> 01:16:56,650
second one Ruby yeah this is already the

01:16:54,940 --> 01:16:58,920
secure server so the first is the basic

01:16:56,650 --> 01:16:58,920
server

01:17:16,290 --> 01:17:22,390
that's funny this looks this looks okay

01:17:20,800 --> 01:17:27,690
but can you make sure that this is safe

01:17:22,390 --> 01:17:27,690
and then try to run the file well using

01:17:37,840 --> 01:17:40,840
hmm

01:17:44,300 --> 01:18:00,420
what is Inc I see what's happening okay

01:17:57,810 --> 01:18:03,270
so you the version of node is very old

01:18:00,420 --> 01:18:04,950
and so you did an NPM install of H 2 B 2

01:18:03,270 --> 01:18:07,470
which is somehow like a module that's

01:18:04,950 --> 01:18:09,630
really old and basically they look at

01:18:07,470 --> 01:18:12,920
fixed by operating 2 node 9 point 4.0

01:18:09,630 --> 01:18:12,920
the latest current released

01:18:19,300 --> 01:18:28,080
I can I can curl it and I can you know

01:18:23,860 --> 01:18:32,260
in the browser the browser doesn't allow

01:18:28,080 --> 01:18:36,640
plain text and so you can only do a two

01:18:32,260 --> 01:18:38,590
Bs only for a to be wonderful

01:18:36,640 --> 01:18:40,300
they did not do that how can talk about

01:18:38,590 --> 01:18:41,350
why okay cuz everyone's having that no I

01:18:40,300 --> 01:18:45,370
think that's good everyone's getting to

01:18:41,350 --> 01:18:47,760
that point excellent yeah yeah exactly

01:18:45,370 --> 01:18:47,760
exactly

01:18:57,129 --> 01:19:00,239
you know you can just see you

01:19:04,920 --> 01:19:10,510
did everyone use ng HTTP to connect to

01:19:08,830 --> 01:19:11,530
it I guess right most people seem to be

01:19:10,510 --> 01:19:13,570
doing that because that's what we were

01:19:11,530 --> 01:19:15,190
using before if anyone used curl they

01:19:13,570 --> 01:19:18,070
might find that it's not possible to

01:19:15,190 --> 01:19:21,880
just connect by default that's why I've

01:19:18,070 --> 01:19:26,860
changed a command here sneakily - this -

01:19:21,880 --> 01:19:29,080
- HTTP to - prior - knowledge this is

01:19:26,860 --> 01:19:31,450
basically telling curl that don't worry

01:19:29,080 --> 01:19:33,670
this is HTTP - because otherwise you

01:19:31,450 --> 01:19:36,100
might be wondering like how does how

01:19:33,670 --> 01:19:38,920
does a browser or any user agent know

01:19:36,100 --> 01:19:41,380
what which protocol to use if you're

01:19:38,920 --> 01:19:42,940
using HTTP - it's all binary it's like a

01:19:41,380 --> 01:19:44,800
completely different handshake when do

01:19:42,940 --> 01:19:46,300
you when the browser the client sends

01:19:44,800 --> 01:19:50,260
its request it's completely different on

01:19:46,300 --> 01:19:52,150
the wire than what an HTTP 1 client

01:19:50,260 --> 01:19:53,920
would send and so you wouldn't be able

01:19:52,150 --> 01:19:56,470
to connect to this you might have also

01:19:53,920 --> 01:19:58,090
noticed that your browser struggles to

01:19:56,470 --> 01:19:59,500
open this in a page like some people

01:19:58,090 --> 01:20:00,040
have reported this now like if you open

01:19:59,500 --> 01:20:01,780
it in a browser

01:20:00,040 --> 01:20:03,160
it just doesn't load and it show you

01:20:01,780 --> 01:20:05,980
some tea less hair or some whatever

01:20:03,160 --> 01:20:08,290
protocol error thing now

01:20:05,980 --> 01:20:11,680
so for curl you can you can tell it that

01:20:08,290 --> 01:20:14,200
don't you have to use HTTP to 100%

01:20:11,680 --> 01:20:17,680
double confirm HP - prior knowledge

01:20:14,200 --> 01:20:18,960
right if you just do - - HTTP - it'll

01:20:17,680 --> 01:20:22,720
try to do what's called an upgrade

01:20:18,960 --> 01:20:27,340
mechanism which is a way that the HP -

01:20:22,720 --> 01:20:29,260
protocol declares that to a to an HP one

01:20:27,340 --> 01:20:31,750
client with a specific header with the

01:20:29,260 --> 01:20:35,050
upgrade header that says I also support

01:20:31,750 --> 01:20:37,960
HTTP - which tells the client to then

01:20:35,050 --> 01:20:39,400
sort of switch to HTTP - mode and start

01:20:37,960 --> 01:20:42,280
sending HTTP to traffic on that same

01:20:39,400 --> 01:20:43,960
connection so that's a very slow you

01:20:42,280 --> 01:20:46,840
know distant there's a there's a wasted

01:20:43,960 --> 01:20:48,460
round-trip again there and that's just

01:20:46,840 --> 01:20:50,350
not very efficient so browsers have sort

01:20:48,460 --> 01:20:52,690
of not implemented that another reason

01:20:50,350 --> 01:20:56,290
is that they don't run the reason to why

01:20:52,690 --> 01:20:58,810
they don't support HTTP - over plain

01:20:56,290 --> 01:21:01,410
plain text connections unencrypted like

01:20:58,810 --> 01:21:03,490
at all it's because it's really

01:21:01,410 --> 01:21:05,680
problematic to deploy that on the

01:21:03,490 --> 01:21:07,210
Internet if you introduce this kind of

01:21:05,680 --> 01:21:09,550
huge breaking changes like an entire new

01:21:07,210 --> 01:21:11,290
protocol there is so much infrastructure

01:21:09,550 --> 01:21:13,120
out there in terms of like proxy servers

01:21:11,290 --> 01:21:15,969
they're called middle boxes in sort of

01:21:13,120 --> 01:21:17,530
the the standard standard speak

01:21:15,969 --> 01:21:18,670
there's so many middleboxes you know

01:21:17,530 --> 01:21:20,590
there could be firewalls that could be

01:21:18,670 --> 01:21:23,710
like logging servers on corporate

01:21:20,590 --> 01:21:24,969
networks all kinds of optimizers caches

01:21:23,710 --> 01:21:26,620
for like mobile phones that are

01:21:24,969 --> 01:21:28,420
automatically transparently compressing

01:21:26,620 --> 01:21:29,949
your images and sort of all this

01:21:28,420 --> 01:21:31,630
infrastructure exists that makes it

01:21:29,949 --> 01:21:34,060
impossible to really deploy things in

01:21:31,630 --> 01:21:35,110
plain text because they assume that if

01:21:34,060 --> 01:21:36,820
it's plain text that they can mess

01:21:35,110 --> 01:21:38,890
around with it and they just end up

01:21:36,820 --> 01:21:41,980
breaking HTTP to send it in plain text

01:21:38,890 --> 01:21:44,350
because they they're built for I needs

01:21:41,980 --> 01:21:46,180
to be one world and now alone they don't

01:21:44,350 --> 01:21:48,670
recognize a protocol and updating all of

01:21:46,180 --> 01:21:49,989
that stuff would basically be a

01:21:48,670 --> 01:21:51,130
situation where you could never update

01:21:49,989 --> 01:21:52,360
it because nobody would do it unless

01:21:51,130 --> 01:21:54,250
there's an e to and it would only be

01:21:52,360 --> 01:21:55,570
Neetu if everyone's already upgraded so

01:21:54,250 --> 01:21:57,280
you get this chicken and egg thing and

01:21:55,570 --> 01:22:00,219
that's why you can really only introduce

01:21:57,280 --> 01:22:02,350
huge new protocol changes by fully

01:22:00,219 --> 01:22:06,250
encrypting everything and saying only

01:22:02,350 --> 01:22:08,530
like the slightest amount of bits in

01:22:06,250 --> 01:22:13,800
that head you know the handshake excuse

01:22:08,530 --> 01:22:13,800
me excuse me

01:22:19,640 --> 01:22:29,670
okay so that's why we have to use HTTPS

01:22:27,030 --> 01:22:32,250
to put a sir put it for the browser's to

01:22:29,670 --> 01:22:33,600
actually support it now so curl and a

01:22:32,250 --> 01:22:35,340
lot of other command tools they don't

01:22:33,600 --> 01:22:37,230
really care about that they're just like

01:22:35,340 --> 01:22:39,900
they're for debugging and the protocol

01:22:37,230 --> 01:22:41,250
the spec actually the spec describes how

01:22:39,900 --> 01:22:43,080
you can do it over TLS and I can do

01:22:41,250 --> 01:22:45,240
without TLS and the specs it describes

01:22:43,080 --> 01:22:46,140
like this upgrade mechanism so a lot of

01:22:45,240 --> 01:22:48,150
these command-line tools they'll

01:22:46,140 --> 01:22:50,790
actually support it node also note node

01:22:48,150 --> 01:22:52,860
supports like we saw our plain text and

01:22:50,790 --> 01:22:55,800
there's also a client built-in to the

01:22:52,860 --> 01:22:58,710
node the node hpo information neck that

01:22:55,800 --> 01:23:00,950
can connect to a plaintext to http to

01:22:58,710 --> 01:23:03,960
server but that's really only useful for

01:23:00,950 --> 01:23:05,820
like machine to machine like an API call

01:23:03,960 --> 01:23:08,490
to another API call if you want to skip

01:23:05,820 --> 01:23:10,290
over a nolte lasting or for for like

01:23:08,490 --> 01:23:11,910
writing unit tests like if you're trying

01:23:10,290 --> 01:23:13,920
to hit a server and you don't want to

01:23:11,910 --> 01:23:15,200
set up like certificates self-signed

01:23:13,920 --> 01:23:18,510
certificates and deal with all this

01:23:15,200 --> 01:23:19,890
self-signed hassle on your CI server for

01:23:18,510 --> 01:23:22,740
instance you can just make a plain text

01:23:19,890 --> 01:23:24,450
connection to that so but in the real

01:23:22,740 --> 01:23:31,310
world when you're dealing with users on

01:23:24,450 --> 01:23:33,780
browsers you're gonna need TLS okay so

01:23:31,310 --> 01:23:35,370
okay maybe before we add let's let's

01:23:33,780 --> 01:23:37,170
compare with the the core API that we've

01:23:35,370 --> 01:23:39,360
been using now with this stream we can

01:23:37,170 --> 01:23:42,300
compare this to the compatibility API so

01:23:39,360 --> 01:23:45,240
you notice here we've got still the same

01:23:42,300 --> 01:23:48,120
create server but we're providing in a

01:23:45,240 --> 01:23:51,900
callback right in the create server call

01:23:48,120 --> 01:23:54,290
so in the first example we just did a

01:23:51,900 --> 01:23:57,030
create server and we did not pass it any

01:23:54,290 --> 01:23:58,770
callback right it just we get a return

01:23:57,030 --> 01:24:00,540
value which immediately synchronously we

01:23:58,770 --> 01:24:02,160
get this server object back the server

01:24:00,540 --> 01:24:05,760
instance and then we attach an event

01:24:02,160 --> 01:24:07,650
handler to stream now the the this this

01:24:05,760 --> 01:24:09,510
is how you enable and this is a very

01:24:07,650 --> 01:24:12,300
subtle way I'm not a big fan of it but

01:24:09,510 --> 01:24:14,970
it this is a subtle way to enable

01:24:12,300 --> 01:24:18,750
compatibility API by passing an event

01:24:14,970 --> 01:24:20,280
handler to create server yeah this is

01:24:18,750 --> 01:24:21,930
sort of the tricky part like so you

01:24:20,280 --> 01:24:24,480
might do this by default because this is

01:24:21,930 --> 01:24:27,030
generally how you handle requests on HP

01:24:24,480 --> 01:24:29,490
one so you create server and you give it

01:24:27,030 --> 01:24:30,900
a callback for any kind of it's a

01:24:29,490 --> 01:24:32,880
request to call back right so the

01:24:30,900 --> 01:24:35,820
request event so the request if

01:24:32,880 --> 01:24:38,310
and in the core API we don't use that we

01:24:35,820 --> 01:24:39,630
just use the stream event and we have a

01:24:38,310 --> 01:24:40,889
session event also but we use a stream

01:24:39,630 --> 01:24:42,960
event to deal with a request and we get

01:24:40,889 --> 01:24:45,659
the headers and we didn't send the data

01:24:42,960 --> 01:24:47,400
back on that stream but this request and

01:24:45,659 --> 01:24:50,159
response objects are only part of the

01:24:47,400 --> 01:24:51,570
compatibility API and these are the ones

01:24:50,159 --> 01:24:54,719
that expose all of the there's sort of

01:24:51,570 --> 01:24:56,790
the h3 one legacy API stuff they expose

01:24:54,719 --> 01:24:59,280
all the same methods and properties like

01:24:56,790 --> 01:25:01,130
I said and so if you pass this callback

01:24:59,280 --> 01:25:03,150
in there you get a standard like I'm a

01:25:01,130 --> 01:25:06,179
familiar request object on a familiar

01:25:03,150 --> 01:25:08,460
response object and you can you can use

01:25:06,179 --> 01:25:11,550
them too soon either the familiar API is

01:25:08,460 --> 01:25:13,620
like right head with a number and then a

01:25:11,550 --> 01:25:16,230
map of headers and then again you can

01:25:13,620 --> 01:25:18,300
use a stream to just and to close it off

01:25:16,230 --> 01:25:19,739
with a string part pass it about has it

01:25:18,300 --> 01:25:21,060
back out so if you if you run this

01:25:19,739 --> 01:25:24,210
you'll get more or less the same thing

01:25:21,060 --> 01:25:27,179
but now using compatibility API if you

01:25:24,210 --> 01:25:28,080
log like the request object you'll see

01:25:27,179 --> 01:25:30,179
that looks very different from the

01:25:28,080 --> 01:25:31,830
stream object so it has these different

01:25:30,179 --> 01:25:33,330
properties the low-level ones are gonna

01:25:31,830 --> 01:25:35,639
be on the stream and the high-level ones

01:25:33,330 --> 01:25:36,960
are coming on request so one thing you

01:25:35,639 --> 01:25:38,310
might be wondering is like okay what

01:25:36,960 --> 01:25:39,600
well what if I have a request

01:25:38,310 --> 01:25:41,219
and I want to access the lower-level

01:25:39,600 --> 01:25:43,530
stuff locally that's just exposed

01:25:41,219 --> 01:25:44,969
request dot stream and you get access to

01:25:43,530 --> 01:25:46,770
the lower-level stuff again but you

01:25:44,969 --> 01:25:50,190
might you can you can see how that could

01:25:46,770 --> 01:25:51,360
be a slight hit on performance so if

01:25:50,190 --> 01:25:52,710
you're going for like a benchmarking

01:25:51,360 --> 01:25:54,800
tool some really high performance code

01:25:52,710 --> 01:25:57,000
you might want to stick to the core API

01:25:54,800 --> 01:25:59,280
without sort of the overhead of wrapping

01:25:57,000 --> 01:26:00,780
all of these objects and doing that

01:25:59,280 --> 01:26:03,360
extra parsing to expose a compatibility

01:26:00,780 --> 01:26:05,370
layer but it's there so in most cases

01:26:03,360 --> 01:26:06,870
you can just use the compatibility API

01:26:05,370 --> 01:26:08,040
because if it gives you all of that

01:26:06,870 --> 01:26:10,199
functionality of the middleware that

01:26:08,040 --> 01:26:12,270
you're already using with with whatever

01:26:10,199 --> 01:26:13,350
framework that you're on right now it

01:26:12,270 --> 01:26:16,130
gives you all of that like

01:26:13,350 --> 01:26:18,120
out-of-the-box pretty much works with

01:26:16,130 --> 01:26:19,650
well I'm not gonna say it works with

01:26:18,120 --> 01:26:21,630
everything but it works pretty well and

01:26:19,650 --> 01:26:23,909
it's very familiar if you've got if

01:26:21,630 --> 01:26:25,560
you've been using HTTP and on node for a

01:26:23,909 --> 01:26:27,860
couple years then there's gonna be very

01:26:25,560 --> 01:26:27,860
very familiar

01:26:28,010 --> 01:26:34,010
HTTP to get the HTTP or snugfit I'm very

01:26:31,159 --> 01:26:35,719
happy to a load test just on this to see

01:26:34,010 --> 01:26:42,730
my Cohen's D because it's a stable

01:26:35,719 --> 01:26:42,730
pattern that's right cool

01:26:46,050 --> 01:26:54,880
okay so that make sense I mean okay feel

01:26:52,150 --> 01:26:58,119
free to change the coder you had to

01:26:54,880 --> 01:27:00,510
maybe this one run it and see what see

01:26:58,119 --> 01:27:00,510
what happens

01:27:09,250 --> 01:27:12,250
so

01:27:12,900 --> 01:27:19,929
yeah oh by the way maybe I should

01:27:16,959 --> 01:27:20,559
clarify this this little guy here it's

01:27:19,929 --> 01:27:26,619
not an emoji

01:27:20,559 --> 01:27:30,309
it's an ipv6 local address so the ipv4

01:27:26,619 --> 01:27:32,709
would be like 127.0.0.1 and it would

01:27:30,309 --> 01:27:34,499
ipv6 because the addresses are really

01:27:32,709 --> 01:27:38,320
really long there's like this

01:27:34,499 --> 01:27:40,030
abbreviated notation and and I'm like

01:27:38,320 --> 01:27:41,139
the local host address essentially for

01:27:40,030 --> 01:27:43,449
ipv6

01:27:41,139 --> 01:27:45,190
it's just : : it's just completely

01:27:43,449 --> 01:27:49,840
revered cool cool

01:27:45,190 --> 01:27:52,780
but because the HTTP URL has like the

01:27:49,840 --> 01:27:54,820
colon for your port you kind of have to

01:27:52,780 --> 01:27:56,469
like wrap your ipv6 colon colon in these

01:27:54,820 --> 01:27:58,239
square brackets so essentially this

01:27:56,469 --> 01:27:59,829
becomes your hostname where this is the

01:27:58,239 --> 01:28:02,050
IP address that the double colon is your

01:27:59,829 --> 01:28:03,369
IP address and the square brackets is

01:28:02,050 --> 01:28:06,489
better to like say this is the hostname

01:28:03,369 --> 01:28:08,499
part of the URL and then the this colon

01:28:06,489 --> 01:28:11,860
here 8080 is just a divider between the

01:28:08,499 --> 01:28:13,119
port and a hostname the separator so

01:28:11,860 --> 01:28:15,309
that's why you'll see this in a lot of

01:28:13,119 --> 01:28:18,579
places and it's it trips it trips me up

01:28:15,309 --> 01:28:20,320
many many times and I fix bugs and

01:28:18,579 --> 01:28:22,959
people trimmer it's not like a lot where

01:28:20,320 --> 01:28:24,459
I see people forgetting to actually wrap

01:28:22,959 --> 01:28:26,860
them and you end up seeing URLs like

01:28:24,459 --> 01:28:27,969
HTTP colon slash slash and then triple

01:28:26,860 --> 01:28:30,729
colon and you're like what is the going

01:28:27,969 --> 01:28:34,260
on here people forget about that all the

01:28:30,729 --> 01:28:34,260
time it's annoying little gotcha

01:28:34,380 --> 01:28:39,870
so I just wanted to put that in there to

01:28:36,460 --> 01:28:43,540
make sure we everyone is aware of that

01:28:39,870 --> 01:28:47,020
okay now so let's get on to why like

01:28:43,540 --> 01:28:49,000
fixing this for the browser so TLS right

01:28:47,020 --> 01:28:51,550
like I was saying the reason why we have

01:28:49,000 --> 01:28:52,900
to use TLS is because of compatibility

01:28:51,550 --> 01:28:54,160
really like it without here that's it

01:28:52,900 --> 01:28:56,980
would just break we would never be able

01:28:54,160 --> 01:28:59,380
to rule out HP 2 because it would be

01:28:56,980 --> 01:29:00,670
trying to patch a huge change on to an

01:28:59,380 --> 01:29:02,740
existing protocol there's massive

01:29:00,670 --> 01:29:05,410
adoption and nobody would really want to

01:29:02,740 --> 01:29:05,800
implement that so there's this chicken

01:29:05,410 --> 01:29:09,760
and egg thing

01:29:05,800 --> 01:29:13,180
so the spec allows plain text but you

01:29:09,760 --> 01:29:19,480
really just want to use you really just

01:29:13,180 --> 01:29:22,390
want to use it over TLS so the spec

01:29:19,480 --> 01:29:25,330
actually refers to a TLS 1.3 and one in

01:29:22,390 --> 01:29:28,600
one part in one place but TLS 1.3

01:29:25,330 --> 01:29:30,040
doesn't officially exist yet and HTP to

01:29:28,600 --> 01:29:32,050
spec came out a while ago they were very

01:29:30,040 --> 01:29:33,790
optimistic that the TLS 1.3 would be

01:29:32,050 --> 01:29:36,040
settled and they continue to be

01:29:33,790 --> 01:29:37,510
optimistic and so like a month ago they

01:29:36,040 --> 01:29:39,130
were they were saying oh we should we

01:29:37,510 --> 01:29:40,900
should probably push back they were

01:29:39,130 --> 01:29:42,190
thinking that will be out in March or

01:29:40,900 --> 01:29:45,250
April this year but now it's probably

01:29:42,190 --> 01:29:47,890
gonna get packed push back to like q3 q4

01:29:45,250 --> 01:29:49,600
of this year and we'll see right so TLS

01:29:47,890 --> 01:29:52,390
1.3 is a work in progress right now

01:29:49,600 --> 01:29:54,880
we're on TLS 1.2 and despite the small

01:29:52,390 --> 01:29:57,250
change in version number there's like 10

01:29:54,880 --> 01:29:59,800
years of difference between them so

01:29:57,250 --> 01:30:01,750
don't underestimate TLS one point three

01:29:59,800 --> 01:30:05,140
is almost an entire new kind of protocol

01:30:01,750 --> 01:30:09,280
then till that's one point two one of

01:30:05,140 --> 01:30:13,300
the key changes right is the the sort of

01:30:09,280 --> 01:30:15,820
the design of TLS in the past until up

01:30:13,300 --> 01:30:18,160
and until including 1.2 was sort of this

01:30:15,820 --> 01:30:21,430
layered approach of protocols so you

01:30:18,160 --> 01:30:23,410
would first establish a TCP socket which

01:30:21,430 --> 01:30:25,600
means that you send you send something

01:30:23,410 --> 01:30:28,240
to the server to a syn packet and then

01:30:25,600 --> 01:30:29,110
you get back this acknowledgment and you

01:30:28,240 --> 01:30:30,490
would send back you know an

01:30:29,110 --> 01:30:31,620
acknowledgment to the server again so

01:30:30,490 --> 01:30:33,970
they'll be like this this this this

01:30:31,620 --> 01:30:35,950
round-trip going on before you could

01:30:33,970 --> 01:30:38,110
start your TLS handshake

01:30:35,950 --> 01:30:39,700
now the TLS handshake is again the

01:30:38,110 --> 01:30:41,470
client saying hey I want to do TLS and

01:30:39,700 --> 01:30:42,520
in the server going ok these are the

01:30:41,470 --> 01:30:44,020
certificates that I have and the

01:30:42,520 --> 01:30:45,760
mechanisms that I support and in the

01:30:44,020 --> 01:30:46,989
kline going back and saying here's ok

01:30:45,760 --> 01:30:48,640
here's the one I want to use

01:30:46,989 --> 01:30:49,989
and then sort of going okay now we're

01:30:48,640 --> 01:30:53,739
now are connected now you can send your

01:30:49,989 --> 01:30:56,440
request so but so we now have teal TCP

01:30:53,739 --> 01:30:58,330
one one round trip and then TLS two more

01:30:56,440 --> 01:31:00,010
round trips before we can even get into

01:30:58,330 --> 01:31:01,810
that HTTP request that we actually just

01:31:00,010 --> 01:31:04,150
want to send and so we're dealing with

01:31:01,810 --> 01:31:06,880
minimum of four round trips which is

01:31:04,150 --> 01:31:09,160
unacceptable in in most environments

01:31:06,880 --> 01:31:10,390
that's very wasteful you should be able

01:31:09,160 --> 01:31:13,989
to just transfer the whole thing and

01:31:10,390 --> 01:31:16,360
that has been a design goal of quick

01:31:13,989 --> 01:31:19,390
which is essentially the new sort of

01:31:16,360 --> 01:31:22,030
transport layer for HTTP that replaces

01:31:19,390 --> 01:31:24,969
this whole TCP TLS thing with a modular

01:31:22,030 --> 01:31:27,820
approach where you would send a single

01:31:24,969 --> 01:31:30,280
UDP Datagram that includes the quick

01:31:27,820 --> 01:31:32,620
session negotiate anything that includes

01:31:30,280 --> 01:31:35,200
your TLS 1.3 you know certificate

01:31:32,620 --> 01:31:36,820
algorithm kind of selections as well as

01:31:35,200 --> 01:31:38,620
your HTTP requests all in a single

01:31:36,820 --> 01:31:40,420
Datagram so that goes out from the

01:31:38,620 --> 01:31:42,910
client to the server and the server says

01:31:40,420 --> 01:31:45,040
ok for quick we will do this for TLS 1 3

01:31:42,910 --> 01:31:47,469
we will do that and here's your here's

01:31:45,040 --> 01:31:49,120
your response for your request on HTTP

01:31:47,469 --> 01:31:51,670
so you can get back the entire thing in

01:31:49,120 --> 01:31:53,020
a single round trip and from then on

01:31:51,670 --> 01:31:55,210
your server can you start pushing so you

01:31:53,020 --> 01:31:56,860
never have to actually send out a sort

01:31:55,210 --> 01:31:59,590
of a think time request were you waiting

01:31:56,860 --> 01:32:01,600
for the server to respond so you you

01:31:59,590 --> 01:32:03,969
could you get to completely eliminates

01:32:01,600 --> 01:32:07,090
the wasted round trips that you would

01:32:03,969 --> 01:32:07,930
have with us 1.2 so that's sort of where

01:32:07,090 --> 01:32:10,450
that's going

01:32:07,930 --> 01:32:12,940
I will say that neither neither quick

01:32:10,450 --> 01:32:13,810
nor TLS 1.3 are like standardized right

01:32:12,940 --> 01:32:15,730
now

01:32:13,810 --> 01:32:16,780
but if you open up your browser

01:32:15,730 --> 01:32:18,430
inspector you'll see that when you

01:32:16,780 --> 01:32:20,140
connect to Google comm or YouTube or

01:32:18,430 --> 01:32:21,520
something or or maybe even some Facebook

01:32:20,140 --> 01:32:22,690
sites you'll see that these guys are

01:32:21,520 --> 01:32:24,370
already playing around with it

01:32:22,690 --> 01:32:26,350
yeah even some CD ends like cloud 4 day

01:32:24,370 --> 01:32:27,730
and they'll once in awhile you'll see

01:32:26,350 --> 01:32:29,469
them announced that ode if they store -

01:32:27,730 --> 01:32:32,200
that's 1.3 don't worry it's all works

01:32:29,469 --> 01:32:37,150
what they support is maybe more like gee

01:32:32,200 --> 01:32:40,090
quick or gee TLS 123 or well like draft

01:32:37,150 --> 01:32:42,910
versions of TLS 1.3 and earlier versions

01:32:40,090 --> 01:32:44,980
of quick were sort of published by

01:32:42,910 --> 01:32:46,870
Google because what that research was

01:32:44,980 --> 01:32:49,360
was it was originally done there before

01:32:46,870 --> 01:32:52,739
moved into the IETF working group didn't

01:32:49,360 --> 01:32:52,739
you want to make a statement or

01:33:15,630 --> 01:33:19,079
all right

01:33:17,010 --> 01:33:20,159
don't get like struck by lightning on

01:33:19,079 --> 01:33:24,449
the beach party up by yourself or

01:33:20,159 --> 01:33:26,730
something you know yeah okay that's a

01:33:24,449 --> 01:33:29,280
little bit of a background and you know

01:33:26,730 --> 01:33:34,530
what's going to happen soon with quick

01:33:29,280 --> 01:33:36,389
and http2 and TLS here's some of the

01:33:34,530 --> 01:33:39,719
things that we're using from HTTP from

01:33:36,389 --> 01:33:41,760
from TLS 1.2 right now to make this HTTP

01:33:39,719 --> 01:33:43,789
2 stuff work and some of the things that

01:33:41,760 --> 01:33:46,619
you can use to make it even better so

01:33:43,789 --> 01:33:49,769
alpine if you saw the curl debug stuff

01:33:46,619 --> 01:33:52,250
this al pn alpine this is what it what

01:33:49,769 --> 01:33:55,019
it's using to connect to the server and

01:33:52,250 --> 01:33:58,829
figure out whether this HTTP URL is

01:33:55,019 --> 01:34:00,360
using HTTP 2 or HTTP 1 so because

01:33:58,829 --> 01:34:03,360
because of this stack or this layered

01:34:00,360 --> 01:34:05,400
approach there's first as TCP connection

01:34:03,360 --> 01:34:08,909
handshake this round-trip when it does

01:34:05,400 --> 01:34:11,130
the first round trip when the client

01:34:08,909 --> 01:34:13,739
makes the first round trip of the TLS

01:34:11,130 --> 01:34:16,349
handshake it basically includes a little

01:34:13,739 --> 01:34:18,690
little bit of information that says I

01:34:16,349 --> 01:34:21,360
support HTTP 2 but I also support HTTP

01:34:18,690 --> 01:34:24,179
1.1 the server receives this in the

01:34:21,360 --> 01:34:27,000
initial handshake and says ok I'm gonna

01:34:24,179 --> 01:34:29,039
serve you HP 10.1 or I'm going to serve

01:34:27,000 --> 01:34:30,570
you HP 2 so this that's that's really

01:34:29,039 --> 01:34:34,590
the handshake that's called alpine and

01:34:30,570 --> 01:34:38,369
in node that's now exposed with a simple

01:34:34,590 --> 01:34:40,230
property called allow HTTP 1 so this

01:34:38,369 --> 01:34:43,139
defaults to false you have to actually

01:34:40,230 --> 01:34:44,760
opt in to the backwards compatibility I

01:34:43,139 --> 01:34:46,199
forget why we made it false by default

01:34:44,760 --> 01:34:48,539
so basically I have to like pretty much

01:34:46,199 --> 01:34:49,800
always that Disqus yeah I would like I

01:34:48,539 --> 01:34:53,579
think by default you would want to have

01:34:49,800 --> 01:34:55,469
its be 1.1 backwards compatibility it

01:34:53,579 --> 01:34:57,000
seems like a good idea but you know you

01:34:55,469 --> 01:34:58,469
can you could leave it turn it off if

01:34:57,000 --> 01:34:59,849
you maybe like a year from now you go

01:34:58,469 --> 01:35:02,519
like whatever it works everywhere it's

01:34:59,849 --> 01:35:03,840
fine so that's that's one that's one

01:35:02,519 --> 01:35:04,949
mechanism that were using you you you

01:35:03,840 --> 01:35:06,929
might come across this name so now you

01:35:04,949 --> 01:35:09,389
can sound smart and talk about it

01:35:06,929 --> 01:35:13,949
SNI another one that's the server name

01:35:09,389 --> 01:35:15,750
identification SNI is basically how you

01:35:13,949 --> 01:35:17,820
put a lot of different host names on

01:35:15,750 --> 01:35:20,219
single single host on a single IP

01:35:17,820 --> 01:35:22,860
address HP one would use the host header

01:35:20,219 --> 01:35:25,679
for that I think it's actually HTTP 1.1

01:35:22,860 --> 01:35:27,690
that introduced it HP 1.0 you still had

01:35:25,679 --> 01:35:29,250
like I'd have like one IP address for

01:35:27,690 --> 01:35:30,180
one server because when you connect to a

01:35:29,250 --> 01:35:32,100
server you

01:35:30,180 --> 01:35:33,270
like I want this record I have this path

01:35:32,100 --> 01:35:35,280
name that I want to request with this

01:35:33,270 --> 01:35:36,450
method but the server wouldn't know

01:35:35,280 --> 01:35:38,190
which domain you're requesting it from

01:35:36,450 --> 01:35:39,540
so it would have to say okay this IP

01:35:38,190 --> 01:35:42,180
address I'm receiving this connection on

01:35:39,540 --> 01:35:44,310
that's configured to be dis hostname and

01:35:42,180 --> 01:35:45,780
with HP one point one they were like

01:35:44,310 --> 01:35:46,800
okay okay this is getting expensive to

01:35:45,780 --> 01:35:48,780
like maintain all these different IP

01:35:46,800 --> 01:35:51,750
addresses and so they introduced this

01:35:48,780 --> 01:35:53,130
host header host : and an example net

01:35:51,750 --> 01:35:55,470
alright that's that's the domain I wanna

01:35:53,130 --> 01:35:58,800
connect to and let's say that you're

01:35:55,470 --> 01:36:01,260
hosting your thing uh many many many

01:35:58,800 --> 01:36:02,730
websites on your shared server like

01:36:01,260 --> 01:36:04,830
cheap hosting or like you know you pay

01:36:02,730 --> 01:36:06,510
like a dollar a month for your website

01:36:04,830 --> 01:36:08,580
hosting they'll basically be one server

01:36:06,510 --> 01:36:11,370
with one IP address that hosts ten

01:36:08,580 --> 01:36:13,500
thousand websites right they rely on

01:36:11,370 --> 01:36:15,510
that host header to map like your

01:36:13,500 --> 01:36:17,640
request to the correct set of files to

01:36:15,510 --> 01:36:21,840
serve or to correct PHP to quote the run

01:36:17,640 --> 01:36:24,990
or whatever you want to do so in HTTP to

01:36:21,840 --> 01:36:27,420
that's happening like a step earlier at

01:36:24,990 --> 01:36:29,130
the TLS level the TLS 1.2 has this

01:36:27,420 --> 01:36:31,560
extension called sni the server name

01:36:29,130 --> 01:36:34,050
identification which you can use now

01:36:31,560 --> 01:36:36,270
into your to serve the correct

01:36:34,050 --> 01:36:37,830
certificate because you can't even get

01:36:36,270 --> 01:36:40,950
the request yet you don't get that host

01:36:37,830 --> 01:36:42,930
header you know about it before you get

01:36:40,950 --> 01:36:45,060
to serve your certificate so when you

01:36:42,930 --> 01:36:47,390
have a lot of hosts on one server you

01:36:45,060 --> 01:36:49,050
need to consider that they would all be

01:36:47,390 --> 01:36:51,720
they might all have a different

01:36:49,050 --> 01:36:53,580
certificate or TLS certificate you don't

01:36:51,720 --> 01:36:54,960
want to have like the same certificate

01:36:53,580 --> 01:36:56,850
for a hundred sites if that gets

01:36:54,960 --> 01:36:58,320
compromised then you're in a whole

01:36:56,850 --> 01:36:59,550
buncha trouble if you either revoke it

01:36:58,320 --> 01:37:01,170
you mender provoking everyone at the

01:36:59,550 --> 01:37:02,430
same time so there's complexities there

01:37:01,170 --> 01:37:04,980
and the reasons why you would not want

01:37:02,430 --> 01:37:06,510
to limit the number of hosts domain

01:37:04,980 --> 01:37:07,410
names on a single certificate so you

01:37:06,510 --> 01:37:10,500
need to be able to figure out which

01:37:07,410 --> 01:37:12,420
certificate to serve to the request

01:37:10,500 --> 01:37:14,730
before you get to the HTTP level that's

01:37:12,420 --> 01:37:16,560
why we use this thing called sni to say

01:37:14,730 --> 01:37:18,900
okay we've I'm gonna give you this

01:37:16,560 --> 01:37:21,180
certificate at the handshake level of

01:37:18,900 --> 01:37:23,070
TLS level then later in the HTTP 2 level

01:37:21,180 --> 01:37:24,240
there's no more a hosts header now that

01:37:23,070 --> 01:37:26,700
was deprecated and turned into the

01:37:24,240 --> 01:37:29,850
authority pseudo header this quona

01:37:26,700 --> 01:37:31,470
thority so that's where like I get that

01:37:29,850 --> 01:37:35,040
confused a lot of times host origin

01:37:31,470 --> 01:37:36,180
Authority I kind of like mix the mix

01:37:35,040 --> 01:37:39,360
them up mix and match them a little bit

01:37:36,180 --> 01:37:41,100
too many times but basically okay Alpine

01:37:39,360 --> 01:37:44,030
s and I and then the last one I want to

01:37:41,100 --> 01:37:48,260
show is a OCSP

01:37:44,030 --> 01:37:50,370
this is okay what is Oh again

01:37:48,260 --> 01:37:53,130
certificate stapling protocol like

01:37:50,370 --> 01:37:55,470
offline maybe or something I don't know

01:37:53,130 --> 01:37:59,060
essentially what okay so one problem is

01:37:55,470 --> 01:38:01,380
that when you issue a certificate to a

01:37:59,060 --> 01:38:03,180
for your domain you get a certificate

01:38:01,380 --> 01:38:04,920
from a from a certificate authority and

01:38:03,180 --> 01:38:06,990
then you go to your web host and you

01:38:04,920 --> 01:38:10,410
give them a certificate to serve your

01:38:06,990 --> 01:38:12,900
content on your domain maybe at some

01:38:10,410 --> 01:38:16,080
point you you save that and like sort of

01:38:12,900 --> 01:38:17,850
an insecure location on the computer

01:38:16,080 --> 01:38:21,080
that got hacked or you leaked it somehow

01:38:17,850 --> 01:38:23,790
and you need to revoke that certificate

01:38:21,080 --> 01:38:25,020
sure you could go and take it down from

01:38:23,790 --> 01:38:26,400
the web side you get a new certificate

01:38:25,020 --> 01:38:28,530
and upload it to your web server but

01:38:26,400 --> 01:38:30,360
everyone else might might still have

01:38:28,530 --> 01:38:32,040
that certificate right and you need to

01:38:30,360 --> 01:38:34,520
be able to tell them hey this this is no

01:38:32,040 --> 01:38:37,770
longer valid stop using it please and so

01:38:34,520 --> 01:38:41,580
what's happening is that the certificate

01:38:37,770 --> 01:38:43,350
itself includes a URL where the client

01:38:41,580 --> 01:38:44,940
can verify with the certificate

01:38:43,350 --> 01:38:46,890
authority whether or not this is still

01:38:44,940 --> 01:38:49,500
valid or with or is it on a revoke asian

01:38:46,890 --> 01:38:55,890
list so whenever you make a connection

01:38:49,500 --> 01:38:57,780
to a web server your client your

01:38:55,890 --> 01:38:59,190
browsers can actually make a make a do

01:38:57,780 --> 01:39:00,450
and do an extra check and again this is

01:38:59,190 --> 01:39:02,190
a round trip that your that's happening

01:39:00,450 --> 01:39:04,500
as delaying your load time and so

01:39:02,190 --> 01:39:07,620
there's a protocol called OCSP that's

01:39:04,500 --> 01:39:09,240
called staples it basically staples that

01:39:07,620 --> 01:39:11,100
response onto the certificate as it's

01:39:09,240 --> 01:39:12,930
being served to the client and so

01:39:11,100 --> 01:39:14,880
stapling means that the server the web

01:39:12,930 --> 01:39:17,240
server itself actually periodically goes

01:39:14,880 --> 01:39:20,100
and gets the latest sort of validity

01:39:17,240 --> 01:39:21,930
result and just staples it on so rather

01:39:20,100 --> 01:39:23,610
than every single browser making those

01:39:21,930 --> 01:39:25,260
calls like if you have a huge website

01:39:23,610 --> 01:39:26,490
and you have every single browser

01:39:25,260 --> 01:39:28,020
hitting that certificate authority

01:39:26,490 --> 01:39:29,520
they're gonna suffer like they need this

01:39:28,020 --> 01:39:32,100
stuff a huge amount of structure just to

01:39:29,520 --> 01:39:33,420
handle these revocation checks and so

01:39:32,100 --> 01:39:35,160
it's better that the web server itself

01:39:33,420 --> 01:39:38,280
just periodically checks it and includes

01:39:35,160 --> 01:39:39,960
it sticks it on to that certificate and

01:39:38,280 --> 01:39:41,250
and gives it to the client where the

01:39:39,960 --> 01:39:42,660
client and goes like okay this is still

01:39:41,250 --> 01:39:45,540
recent enough for me to consider it as

01:39:42,660 --> 01:39:46,110
non revoked and it also eliminates that

01:39:45,540 --> 01:39:47,850
roundtrip

01:39:46,110 --> 01:39:50,160
it so that it eliminates a round trip

01:39:47,850 --> 01:39:51,240
for the for that client so it doesn't

01:39:50,160 --> 01:39:52,650
need to like make another connection to

01:39:51,240 --> 01:39:54,030
another so host and do another DNS

01:39:52,650 --> 01:39:56,490
lookup because that could be very

01:39:54,030 --> 01:39:57,239
expensive so it's faster and it's less

01:39:56,490 --> 01:39:58,920
load on to see

01:39:57,239 --> 01:40:00,900
a server so it's cheaper so it's just

01:39:58,920 --> 01:40:03,929
generally better to do this but by

01:40:00,900 --> 01:40:08,340
default this is actually turned off in

01:40:03,929 --> 01:40:09,659
all node server to TLS so you need to do

01:40:08,340 --> 01:40:12,300
a little bit of code to make this work

01:40:09,659 --> 01:40:14,909
so I'll show you from one of my projects

01:40:12,300 --> 01:40:18,510
how I do that if you ever need to

01:40:14,909 --> 01:40:20,489
reference it just you know look at this

01:40:18,510 --> 01:40:27,440
as an example I'm by the way I'm using

01:40:20,489 --> 01:40:33,420
this thing called just require OCSP okay

01:40:27,440 --> 01:40:36,389
and then I build a cache and I basically

01:40:33,420 --> 01:40:40,710
this is basically a snippet from the

01:40:36,389 --> 01:40:42,929
make it a little bigger okay so the OCSP

01:40:40,710 --> 01:40:47,249
cache is essentially what I'm using to

01:40:42,929 --> 01:40:49,289
store the certificates that I've got up

01:40:47,249 --> 01:40:52,499
them to look up for right so whenever I

01:40:49,289 --> 01:40:54,630
get a request my server fight fires this

01:40:52,499 --> 01:40:58,489
event this is a standard TLS note event

01:40:54,630 --> 01:41:01,260
this is not new - this is not new in an

01:40:58,489 --> 01:41:04,110
HTTP - this is if you're using HTTP

01:41:01,260 --> 01:41:05,159
right now you could get this event and

01:41:04,110 --> 01:41:06,719
your problem if you're not handling it

01:41:05,159 --> 01:41:08,010
right now you're wasting all these round

01:41:06,719 --> 01:41:10,499
trips and your users are making all

01:41:08,010 --> 01:41:12,360
these extra calls so if you just want to

01:41:10,499 --> 01:41:14,760
improve the performance of like a

01:41:12,360 --> 01:41:17,969
standard HTTP you should still do this

01:41:14,760 --> 01:41:20,219
right now basically this is like caching

01:41:17,969 --> 01:41:21,449
the responses as they come back your

01:41:20,219 --> 01:41:23,510
server makes that request to look it up

01:41:21,449 --> 01:41:27,329
if it doesn't have a currently valid

01:41:23,510 --> 01:41:28,530
it's the sort of stapled response and

01:41:27,329 --> 01:41:31,730
otherwise it pulls it out of a cache and

01:41:28,530 --> 01:41:31,730
service directly so it's really fast

01:41:32,370 --> 01:41:41,500
this is the big concept sort of stapling

01:41:35,140 --> 01:41:44,739
make sense now a little bit okay all

01:41:41,500 --> 01:41:47,440
right so question now is how do we do

01:41:44,739 --> 01:41:50,350
this localhost certificate I had this

01:41:47,440 --> 01:41:53,190
for a long time now I've had a bit I've

01:41:50,350 --> 01:41:55,210
had like some well it started with like

01:41:53,190 --> 01:41:56,800
just going in a stack overflow every

01:41:55,210 --> 01:41:59,290
time and trying to find the right copy

01:41:56,800 --> 01:42:02,200
paste open SSL command line stuff

01:41:59,290 --> 01:42:03,940
it's very TV so I started automating it

01:42:02,200 --> 01:42:06,460
and I just last night to make this

01:42:03,940 --> 01:42:08,469
easier here I publish this TLS keygen on

01:42:06,460 --> 01:42:10,210
NPM so you should be able to just

01:42:08,469 --> 01:42:12,280
generate it by running that on your

01:42:10,210 --> 01:42:16,330
system it'll just generate a key up em

01:42:12,280 --> 01:42:18,880
and a cert them and and it'll try if

01:42:16,330 --> 01:42:21,010
you're on Mac or Linux not Windows sorry

01:42:18,880 --> 01:42:24,280
but cuz I didn't have any machine to

01:42:21,010 --> 01:42:25,900
test it on yet it will try to sort of

01:42:24,280 --> 01:42:27,280
set it up on your computer so that your

01:42:25,900 --> 01:42:28,630
computer trusts it and that's very

01:42:27,280 --> 01:42:31,150
convenient if you didn't like local

01:42:28,630 --> 01:42:32,710
development then your browser is not

01:42:31,150 --> 01:42:34,750
gonna show you those like security

01:42:32,710 --> 01:42:36,040
content warnings and I get really

01:42:34,750 --> 01:42:38,050
annoying when you try to do anything in

01:42:36,040 --> 01:42:39,160
the browser basically so you can you can

01:42:38,050 --> 01:42:40,960
use this tool to generate a certificate

01:42:39,160 --> 01:42:42,489
I have a trusted and then you use those

01:42:40,960 --> 01:42:48,370
certificates on any software that you

01:42:42,489 --> 01:42:50,080
that you're working with in ojs we TLS a

01:42:48,370 --> 01:42:51,430
couple of things that it does just to

01:42:50,080 --> 01:42:54,340
give you like some insights into TLS

01:42:51,430 --> 01:42:56,530
itself the tool that you're using is

01:42:54,340 --> 01:42:58,270
open SSL so most of you will have that

01:42:56,530 --> 01:43:00,489
installed already if not ruined brew

01:42:58,270 --> 01:43:04,860
install or you know more apt-get or

01:43:00,489 --> 01:43:08,500
whatever this got this thing called san

01:43:04,860 --> 01:43:10,810
service alternate names I think subject

01:43:08,500 --> 01:43:14,680
thank you okay so subject alternate

01:43:10,810 --> 01:43:17,080
names basically I the certificate can

01:43:14,680 --> 01:43:19,630
have a single common name the CN that we

01:43:17,080 --> 01:43:21,790
saw which describes the the domain name

01:43:19,630 --> 01:43:23,110
for the certificate but over time people

01:43:21,790 --> 01:43:25,090
are like okay well I want to have like a

01:43:23,110 --> 01:43:26,739
bunch more names and in wildcard names

01:43:25,090 --> 01:43:29,770
and IP addresses and all kinds of things

01:43:26,739 --> 01:43:31,690
and so this this extension was added to

01:43:29,770 --> 01:43:33,370
tier two certificates where you can then

01:43:31,690 --> 01:43:35,050
describe a bunch more domain names and

01:43:33,370 --> 01:43:36,430
it'll all get signed on one certificate

01:43:35,050 --> 01:43:39,450
it's very convenient when you want to

01:43:36,430 --> 01:43:42,489
have like your example.com and then your

01:43:39,450 --> 01:43:44,260
wwwww example.com on one certificate

01:43:42,489 --> 01:43:45,519
right instead of having two so when

01:43:44,260 --> 01:43:48,550
you're reconnect you can reuse it

01:43:45,519 --> 01:43:49,989
so basically this tool sets it up so

01:43:48,550 --> 01:43:52,090
that you have local host you have

01:43:49,989 --> 01:43:53,829
wildcard local host you have like one

01:43:52,090 --> 01:43:56,530
two seven zero zero one you have your

01:43:53,829 --> 01:43:59,110
ipv6 I have zero zero zero zero like all

01:43:56,530 --> 01:44:00,820
your like local stuff and it the same

01:43:59,110 --> 01:44:02,349
certificate works for any of them so

01:44:00,820 --> 01:44:04,090
when you go into the browser even if the

01:44:02,349 --> 01:44:05,920
remember like okay is it is it 1 2 7 or

01:44:04,090 --> 01:44:06,940
is it localhost and then if you want to

01:44:05,920 --> 01:44:08,079
experiment experiment with like

01:44:06,940 --> 01:44:10,030
different domain names you can just do

01:44:08,079 --> 01:44:12,219
something something dot localhost and

01:44:10,030 --> 01:44:14,710
you can set it up in your at C it's the

01:44:12,219 --> 01:44:16,480
hosts file to the same so to your local

01:44:14,710 --> 01:44:19,179
host and it'll all resolve which is

01:44:16,480 --> 01:44:21,099
critic valid certificate then also it's

01:44:19,179 --> 01:44:24,280
using ECC which is like elliptic curve

01:44:21,099 --> 01:44:27,159
cryptography no I'm not a cryptographer

01:44:24,280 --> 01:44:29,920
but usually when you see smaller numbers

01:44:27,159 --> 01:44:32,769
it means less secure but with with

01:44:29,920 --> 01:44:37,869
typical 2's certificates and you would

01:44:32,769 --> 01:44:40,360
have this RSA 2048 or 4096 or whatever

01:44:37,869 --> 01:44:41,499
you have these big big numbers the

01:44:40,360 --> 01:44:42,940
reason there's a big name is because the

01:44:41,499 --> 01:44:45,579
certificates actually that size is that

01:44:42,940 --> 01:44:47,739
many bits and in this case you own you

01:44:45,579 --> 01:44:50,050
can achieve similar levels of security

01:44:47,739 --> 01:44:52,449
with only 256 bits using this elliptic

01:44:50,050 --> 01:44:53,409
curve cryptography stuff so that's

01:44:52,449 --> 01:44:56,530
really nice and it's actually

01:44:53,409 --> 01:45:00,699
recommended at by some US government

01:44:56,530 --> 01:45:02,590
thing n ist some you know in whatever

01:45:00,699 --> 01:45:03,699
standards technology whatever stuff they

01:45:02,590 --> 01:45:05,440
recommend like these basically the

01:45:03,699 --> 01:45:08,980
baselines for what level of security do

01:45:05,440 --> 01:45:10,360
you need for for their operations and

01:45:08,980 --> 01:45:12,730
this is sort of generally accepted in

01:45:10,360 --> 01:45:14,559
the industry as like whatever what

01:45:12,730 --> 01:45:17,650
people use on the Internet and so right

01:45:14,559 --> 01:45:22,150
now if you're using like RSA 200 2048

01:45:17,650 --> 01:45:26,530
you can just use this the this this this

01:45:22,150 --> 01:45:29,349
elliptic this ECC be 2 5 6 or p-38 for

01:45:26,530 --> 01:45:31,690
this is slightly larger in terms of key

01:45:29,349 --> 01:45:33,670
but I think they're kind of rating them

01:45:31,690 --> 01:45:37,480
as prints the same in terms of security

01:45:33,670 --> 01:45:39,249
strength and so P 2 5 6 is more

01:45:37,480 --> 01:45:42,789
supported there have been issues in the

01:45:39,249 --> 01:45:45,550
past where people 3 8 4 was I think it

01:45:42,789 --> 01:45:47,110
was like nodes versions 9.0 to nine

01:45:45,550 --> 01:45:48,400
point two or three it was like

01:45:47,110 --> 01:45:50,079
temporarily not supported now I came

01:45:48,400 --> 01:45:51,670
back so it's a little bit of a pain if

01:45:50,079 --> 01:45:53,110
you want to just feel like okay this is

01:45:51,670 --> 01:45:57,289
a bigger number I want to use that go

01:45:53,110 --> 01:45:59,659
for it but this is still a sufficient

01:45:57,289 --> 01:46:00,769
the real risk is not even like we have

01:45:59,659 --> 01:46:02,199
to go bigger there's a whole nother

01:46:00,769 --> 01:46:05,360
different curve now coming out because

01:46:02,199 --> 01:46:07,280
there's some weird speculation and stuff

01:46:05,360 --> 01:46:09,530
going on like this might be compromised

01:46:07,280 --> 01:46:11,360
and NSA will like break it and whatever

01:46:09,530 --> 01:46:12,949
I know I don't think they're gonna come

01:46:11,360 --> 01:46:14,749
after Cooper yes but if your website is

01:46:12,949 --> 01:46:16,099
like super important and you might have

01:46:14,749 --> 01:46:18,409
to worry about that there so anyway

01:46:16,099 --> 01:46:20,570
there's these are called curves these

01:46:18,409 --> 01:46:22,579
are like close short codes for curves

01:46:20,570 --> 01:46:27,349
and there's a new curve coming out I

01:46:22,579 --> 01:46:29,630
forget what's like like x.25 five

01:46:27,349 --> 01:46:30,800
something something something so but

01:46:29,630 --> 01:46:32,840
that's all still going through ITF

01:46:30,800 --> 01:46:34,820
process and reviewing and the pics that

01:46:32,840 --> 01:46:36,260
takes a long time for a get adoption so

01:46:34,820 --> 01:46:42,139
you could use it but it's probably gonna

01:46:36,260 --> 01:46:46,190
work in most browsers so these like I

01:46:42,139 --> 01:46:47,929
would say stick with P 2 5 6 or RSA 2048

01:46:46,190 --> 01:46:52,940
if you want to be compatible and well

01:46:47,929 --> 01:46:56,209
supported today so this tool basically

01:46:52,940 --> 01:46:57,829
does that for you so try it out right

01:46:56,209 --> 01:47:01,760
now this is gonna help you with like

01:46:57,829 --> 01:47:04,900
general development run npx TLS - qijin

01:47:01,760 --> 01:47:09,409
and see what happens

01:47:04,900 --> 01:47:13,610
it's quite untested so I want to see I

01:47:09,409 --> 01:47:20,369
wanna hear what goes wrong sure

01:47:13,610 --> 01:47:22,369
syntax error so yeah so I think house

01:47:20,369 --> 01:47:26,579
you could you could you could just say

01:47:22,369 --> 01:47:27,750
fubar look closed yeah so but the

01:47:26,579 --> 01:47:49,349
certificates a wild card so it'll

01:47:27,750 --> 01:47:55,079
validate that in theory script at the

01:47:49,349 --> 01:47:58,099
command txt rescue June hey can you do

01:47:55,079 --> 01:47:58,099
no - Peters

01:48:00,510 --> 01:48:11,490
hmm seems like there's a

01:48:06,580 --> 01:48:15,810
syntax or set can anyone confirm that

01:48:11,490 --> 01:48:15,810
okay okay sorry let me look

01:48:18,280 --> 01:48:21,550
[Music]

01:48:28,250 --> 01:48:35,570
what's the line is it touch file in mine

01:48:32,390 --> 01:48:35,570
mine one

01:48:40,249 --> 01:48:43,849
does it say the filename

01:48:49,610 --> 01:48:57,920
what am I not seeing you think there's a

01:48:54,960 --> 01:48:57,920
there's a typo here

01:49:02,929 --> 01:49:24,510
no it's just restructuring it 9 4 0 okay

01:49:18,619 --> 01:49:27,000
so yeah I mean you can you could take a

01:49:24,510 --> 01:49:29,840
snippet and run it like you're why is it

01:49:27,000 --> 01:49:32,840
was it wrong and you won't see the issue

01:49:29,840 --> 01:49:32,840
absolutely

01:49:33,790 --> 01:49:44,480
where's that okay oh yeah I was just

01:49:42,679 --> 01:49:47,139
doing that to escape these bracket the

01:49:44,480 --> 01:49:47,139
other quotes

01:49:57,929 --> 01:50:06,389
runs on my machine hmm let me see let me

01:50:03,429 --> 01:50:09,389
see if it runs on the this guy to this

01:50:06,389 --> 01:50:09,389
kitchen

01:50:13,989 --> 01:50:16,019
Oh

01:50:21,820 --> 01:50:34,249
that's a weird one more chairs at the

01:50:27,499 --> 01:50:36,969
back apparently you don't expect a token

01:50:34,249 --> 01:50:36,969
parentis

01:50:40,440 --> 01:50:43,100
for Rebecca

01:50:50,300 --> 01:50:53,300
right

01:50:56,690 --> 01:51:02,180
I know yeah I'm just yeah

01:50:59,930 --> 01:51:07,670
tried tried it okay can you can can

01:51:02,180 --> 01:51:16,120
anyone try to do npm install like dev

01:51:07,670 --> 01:51:16,120
let's see that let's see okay so yeah

01:51:20,290 --> 01:51:23,710
okay let me try

01:51:35,180 --> 01:51:39,960
I'm just again stalling it in my local

01:51:37,530 --> 01:51:44,340
directory now the workspace that we had

01:51:39,960 --> 01:51:49,489
and then to your last keygen yeah that's

01:51:44,340 --> 01:51:49,489
funny okay

01:51:52,460 --> 01:51:54,460
Oh

01:52:23,119 --> 01:52:26,119
hmm

01:52:59,570 --> 01:53:07,260
no you said yeah right

01:53:04,130 --> 01:53:07,260
[Music]

01:53:07,370 --> 01:53:14,090
booter so if okay so okay we can just

01:53:12,690 --> 01:53:17,780
run it directly than you're saying

01:53:14,090 --> 01:53:17,780
so if you just do note

01:53:23,360 --> 01:53:30,510
okay so alright so sorry about this

01:53:27,890 --> 01:53:31,980
weirdness I'm not entirely sure what's

01:53:30,510 --> 01:53:35,370
going on I have a hint

01:53:31,980 --> 01:53:39,780
but anyway run it this way just run npm

01:53:35,370 --> 01:53:43,190
install and let me see you do npm

01:53:39,780 --> 01:53:45,150
install - uppercase D TLS - keygen

01:53:43,190 --> 01:53:49,380
that'll set it up as a local dev

01:53:45,150 --> 01:53:51,660
dependency and then you do node and in

01:53:49,380 --> 01:54:02,900
your node modules TLS - keygen CL I

01:53:51,660 --> 01:54:06,710
guess it's funny from the bin it fails

01:54:02,900 --> 01:54:06,710
but it's exactly the same file

01:54:14,630 --> 01:54:17,690
okay so

01:54:19,710 --> 01:54:25,630
so solar system didn't detect this as a

01:54:22,960 --> 01:54:28,020
attract process thank you thank you

01:54:25,630 --> 01:54:28,020
thank you

01:54:44,499 --> 01:54:56,369
I know what's the standard one like that

01:54:56,760 --> 01:54:59,760
okay

01:55:31,480 --> 01:55:41,060
hey thank you okay so you can just do

01:55:38,300 --> 01:55:48,500
the npx kiosk ijen right now it should

01:55:41,060 --> 01:55:50,330
be fixed okay

01:55:48,500 --> 01:55:52,310
so has anyone managed to generate a key

01:55:50,330 --> 01:55:54,530
in a certificate and then gone through

01:55:52,310 --> 01:55:56,710
the sudo thing and all that yeah it

01:55:54,530 --> 01:55:56,710
worked

01:55:56,800 --> 01:56:01,610
yeah yeah okay so you can you can verify

01:56:00,409 --> 01:56:04,310
whether or not that actually did

01:56:01,610 --> 01:56:08,869
anything just so you know I'm not like

01:56:04,310 --> 01:56:10,699
stealing everyone's passwords here open

01:56:08,869 --> 01:56:16,880
up this keychain access tool on Mac at

01:56:10,699 --> 01:56:18,889
least on Linux I'm not too sure you can

01:56:16,880 --> 01:56:20,030
essentially see if you search for

01:56:18,889 --> 01:56:22,760
localhost they should have some

01:56:20,030 --> 01:56:28,060
certificates here passports why am i

01:56:22,760 --> 01:56:28,060
talking about certificates yeah

01:56:30,680 --> 01:56:35,040
so I use this I use this thing a lot

01:56:33,330 --> 01:56:36,120
like this technique a lot so I've got a

01:56:35,040 --> 01:56:41,330
bunch of them you should have at least

01:56:36,120 --> 01:56:43,470
one here has anyone seen that okay you

01:56:41,330 --> 01:56:44,760
so if you ever need to do this manually

01:56:43,470 --> 01:56:46,620
this is what you do you just drag the

01:56:44,760 --> 01:56:52,050
certificate file onto this keychain

01:56:46,620 --> 01:56:55,230
access thing you double-click on the PEM

01:56:52,050 --> 01:56:57,480
file and for SSL on trust settings you

01:56:55,230 --> 01:56:59,070
just put on always trust and from that

01:56:57,480 --> 01:57:01,440
moment on most software that integrates

01:56:59,070 --> 01:57:02,790
well with Mac OS like Chrome browser or

01:57:01,440 --> 01:57:04,410
Safari they will just trust that

01:57:02,790 --> 01:57:06,150
certificate for connections that are on

01:57:04,410 --> 01:57:09,630
this for domains that are on this

01:57:06,150 --> 01:57:12,270
certificate so you can see for instance

01:57:09,630 --> 01:57:13,710
in this case it would be localhost plus

01:57:12,270 --> 01:57:16,320
the wildcards plus my local IP address

01:57:13,710 --> 01:57:18,870
etc so these kind of this this is like

01:57:16,320 --> 01:57:20,220
now a certificate that I can use with

01:57:18,870 --> 01:57:22,140
software without having to face like all

01:57:20,220 --> 01:57:24,360
these browser issues so the TLS keygen

01:57:22,140 --> 01:57:26,720
tool just automates as much as possible

01:57:24,360 --> 01:57:26,720
there

02:05:58,989 --> 02:06:19,389
a little bit yeah that's why I'm doing

02:06:12,880 --> 02:06:22,059
this in a module name we'll just be like

02:06:19,389 --> 02:06:25,289
look closed and these are just

02:06:22,059 --> 02:06:25,289
concatenated with semicolon

02:06:30,510 --> 02:06:42,320
you look I can generate is the OpenSSL

02:06:38,790 --> 02:06:42,320
command on your systems

02:06:43,659 --> 02:06:55,280
using the shell and what is it so can

02:06:53,539 --> 02:06:59,119
you try it in a regular standard

02:06:55,280 --> 02:07:02,809
terminal thing without over like this

02:06:59,119 --> 02:07:04,519
item - or something right because I

02:07:02,809 --> 02:07:07,159
think when node runs it it's just

02:07:04,519 --> 02:07:10,940
running it in plain bash right I'm not

02:07:07,159 --> 02:07:13,010
too sure but he's also got like a funky

02:07:10,940 --> 02:07:36,920
pin terminal like that mine's very

02:07:13,010 --> 02:07:38,599
vanilla it was I terminal well what node

02:07:36,920 --> 02:07:41,469
version is this one because any nines

02:07:38,599 --> 02:07:41,469
enough nvm anymore

02:07:45,170 --> 02:07:49,410
hey you got it right okay so it runs

02:07:47,760 --> 02:07:51,300
here okay then oh wait that's it so this

02:07:49,410 --> 02:07:58,760
part is fine right but I gotta do p.m.

02:07:51,300 --> 02:08:01,290
perm keep him in search firm you know

02:07:58,760 --> 02:08:03,330
none of that that's normal actually

02:08:01,290 --> 02:08:05,540
so that's actually a help message wait

02:08:03,330 --> 02:08:08,490
was that the whole thing the whole time

02:08:05,540 --> 02:08:21,630
no just type

02:08:08,490 --> 02:08:24,440
Quintanilla okay that was really my

02:08:21,630 --> 02:08:27,750
baddest bad UX right there

02:08:24,440 --> 02:08:30,420
welcome thank one second I gotta save

02:08:27,750 --> 02:08:37,220
him okay can you show me the commanding

02:08:30,420 --> 02:08:37,220
in that you're right the CLI right

02:08:39,449 --> 02:08:48,380
you know when you run the when you're in

02:08:42,810 --> 02:08:50,579
school I don't yes because they simply

02:08:48,380 --> 02:08:51,929
they switched over to the regular

02:08:50,579 --> 02:08:57,300
terminal or didn't they also I think I

02:08:51,929 --> 02:09:04,560
forgot to note right rifle track I want

02:08:57,300 --> 02:09:06,750
to just see first okay you know that

02:09:04,560 --> 02:09:08,579
just seems too often did they just

02:09:06,750 --> 02:09:12,300
forgot it to the key dopamine circuit

02:09:08,579 --> 02:09:14,230
them you know that's different first

02:09:12,300 --> 02:09:17,749
room I haven't tried out

02:09:14,230 --> 02:09:25,279
Ron she is just directly

02:09:17,749 --> 02:09:27,019
could be something there as well John

02:09:25,279 --> 02:09:30,519
for the open come install on that thing

02:09:27,019 --> 02:09:30,519
I guess

02:09:32,550 --> 02:09:36,510
that's the stenciling all mogul

02:09:37,560 --> 02:09:46,150
every reading so yeah that's like the

02:09:42,100 --> 02:09:49,389
file is there I don't know if it just

02:09:46,150 --> 02:09:51,690
wasn't generated or if it's in the wrong

02:09:49,389 --> 02:09:51,690
location

02:09:58,840 --> 02:10:16,250
does anyone else get this one doesn't

02:10:13,190 --> 02:10:18,440
okay yeah yeah okay sorry this is like

02:10:16,250 --> 02:10:22,810
my really bad UX your basically has you

02:10:18,440 --> 02:10:25,810
have to supply this part okay yeah

02:10:22,810 --> 02:10:25,810
basically

02:10:31,810 --> 02:10:34,850
okay that's his promise oh he's got the

02:10:34,040 --> 02:10:36,740
same issue

02:10:34,850 --> 02:10:41,090
can you try running in the regular

02:10:36,740 --> 02:10:48,519
terminal and then make sure you have not

02:10:41,090 --> 02:10:53,849
like node 9 point 4 yeah that's good

02:10:48,519 --> 02:10:58,449
it's time all right so he's working on

02:10:53,849 --> 02:11:02,159
bugging it also for them yeah yeah so

02:10:58,449 --> 02:11:02,159
now we've got two cases of that

02:11:08,389 --> 02:11:14,309
so it says that they can't find the key

02:11:11,309 --> 02:11:15,469
file hit search file which one you know

02:11:14,309 --> 02:11:17,789
the search file

02:11:15,469 --> 02:11:30,320
yeah can you try to making it like a

02:11:17,789 --> 02:11:30,320
like an absolute path to what is it on

02:11:32,209 --> 02:11:50,939
there now seeing the full thing they're

02:11:38,280 --> 02:11:53,900
reading so can you open up that code and

02:11:50,939 --> 02:11:53,900
then go to setup fearless

02:11:56,300 --> 02:12:08,960
okay so actually what I want to see

02:11:58,710 --> 02:12:08,960
right like it's one sink

02:12:13,270 --> 02:12:18,800
so what we want to see is like this

02:12:16,730 --> 02:12:20,090
whole thing what's actually happening

02:12:18,800 --> 02:12:22,430
because he's trying to deconstruct this

02:12:20,090 --> 02:12:24,200
now because it's got like some semester

02:12:22,430 --> 02:12:29,150
shells and like nesting bird investors

02:12:24,200 --> 02:12:30,380
and of yourself I'm wondering if it's

02:12:29,150 --> 02:12:37,280
good because I'm setting the shelter

02:12:30,380 --> 02:12:40,870
banner oh you know what you're using a

02:12:37,280 --> 02:12:40,870
fish or something or the Sh

02:12:50,010 --> 02:12:56,550
using some panel because you guys all

02:12:52,719 --> 02:12:56,550
have like interesting shells

02:13:02,969 --> 02:13:13,659
I'm gonna maybe not yeah no I don't know

02:13:07,030 --> 02:13:15,780
this is tricky man this is for updated

02:13:13,659 --> 02:13:15,780
Oh

02:13:22,650 --> 02:13:35,640
yeah maybe hang on maybe maybe a you

02:13:32,770 --> 02:13:35,640
know I see era

02:13:38,250 --> 02:13:47,620
he's got Yosemite just like think around

02:13:42,460 --> 02:13:49,840
the same era yeah yeah

02:13:47,620 --> 02:13:53,590
so because I've only tested in High

02:13:49,840 --> 02:13:56,080
Sierra good issue there maybe the open

02:13:53,590 --> 02:14:01,270
maybe the OpenSSL syntax changed can you

02:13:56,080 --> 02:14:04,330
update open SSL somehow because I don't

02:14:01,270 --> 02:14:05,650
ask you to update always I just like as

02:14:04,330 --> 02:14:12,220
an experiment to try with open SSL and

02:14:05,650 --> 02:14:15,040
later version mmm open open side of

02:14:12,220 --> 02:14:16,570
field us right now right now that set up

02:14:15,040 --> 02:14:19,420
to us we have set up filters in your

02:14:16,570 --> 02:14:21,340
code right did you assert the javascript

02:14:19,420 --> 02:14:21,880
file for set up realistic the teskigi

02:14:21,340 --> 02:14:25,630
anything

02:14:21,880 --> 02:14:29,970
yeah can you switch this on new king

02:14:25,630 --> 02:14:29,970
RSA yes which is on and switched it off

02:14:30,450 --> 02:14:35,250
because maybe it's just like not

02:14:32,350 --> 02:14:35,250
supporting GCC

02:14:36,690 --> 02:14:43,809
just missing my together it is so much

02:14:40,510 --> 02:14:46,840
on our side for mismatch is it something

02:14:43,809 --> 02:14:48,780
or in my most welcome because I'm not

02:14:46,840 --> 02:14:51,780
sure what we actually doing this

02:14:48,780 --> 02:14:51,780
three-step

02:14:52,560 --> 02:15:04,060
okay chewing the website the browser via

02:14:57,040 --> 02:15:06,489
keep touching it to look lost eight four

02:15:04,060 --> 02:15:09,810
four three side come from ice cream

02:15:06,489 --> 02:15:09,810
should be supported through the cones

02:15:13,380 --> 02:15:19,220
okay can I see your how are you running

02:15:17,490 --> 02:15:24,230
that one doesn't know your snippet Asia

02:15:19,220 --> 02:15:24,230
running yeah

02:15:32,400 --> 02:15:46,060
okay so it's is there anything else

02:15:41,710 --> 02:15:47,560
running right now I know of at least on

02:15:46,060 --> 02:15:49,920
hot eight four four three

02:15:47,560 --> 02:15:55,210
you sure can look you on that's that

02:15:49,920 --> 02:15:58,410
that's that - am i and is there any

02:15:55,210 --> 02:15:58,410
there's a search or something

02:16:03,030 --> 02:16:15,099
something's listening okay okay so it's

02:16:08,670 --> 02:16:17,670
okay okay this guy's in cannot support

02:16:15,099 --> 02:16:17,670
protocol

02:16:29,249 --> 02:16:37,929
still something to do in this step as I

02:16:33,160 --> 02:16:45,580
get it it's been directly no yeah I can

02:16:37,929 --> 02:16:47,949
do X which I mean my host file is a

02:16:45,580 --> 02:16:48,250
little bit nicer yeah that's fine that's

02:16:47,949 --> 02:16:49,840
fine

02:16:48,250 --> 02:16:52,889
I mean you shouldn't even have needed it

02:16:49,840 --> 02:16:55,349
because you're you you work for Sephora

02:16:52,889 --> 02:17:02,889
cool oops

02:16:55,349 --> 02:17:11,830
hey Yvonne Yvonne think she's a designer

02:17:02,889 --> 02:17:12,880
there oh I was just gonna if you just

02:17:11,830 --> 02:17:14,620
use localhost you should need it

02:17:12,880 --> 02:17:17,830
actually it's only I could want to set

02:17:14,620 --> 02:17:20,050
up like subdomain some local kind of

02:17:17,830 --> 02:17:25,840
like what you were doing there but this

02:17:20,050 --> 02:17:28,479
one what does that last line comment on

02:17:25,840 --> 02:17:29,949
all right over go don't you I can see

02:17:28,479 --> 02:17:35,880
you had a very rough night

02:17:29,949 --> 02:17:38,869
I for one in years to come you know Ruth

02:17:35,880 --> 02:17:40,909
that's pretty much

02:17:38,869 --> 02:17:43,819
but that guy so long here with me should

02:17:40,909 --> 02:17:45,290
get it working nice yeah yeah but this

02:17:43,819 --> 02:17:46,969
is the thing with like experimental

02:17:45,290 --> 02:17:48,109
stuff if there's so many educational

02:17:46,969 --> 02:17:54,139
platforms I have not you're gonna find

02:17:48,109 --> 02:17:56,960
out only be the keys that I have

02:17:54,139 --> 02:18:00,529
generate that up can you open up the

02:17:56,960 --> 02:18:14,029
Keith I think W is double-click up with

02:18:00,529 --> 02:18:17,000
the cert class and I mean finder so open

02:18:14,029 --> 02:18:18,469
up here and I don't think it's down and

02:18:17,000 --> 02:18:23,000
it just doesn't stroll to the correct

02:18:18,469 --> 02:18:26,300
one so it's search for localhost me you

02:18:23,000 --> 02:18:30,170
don't have it set up at all try to try

02:18:26,300 --> 02:18:39,349
to drag it in here so is there a way to

02:18:30,170 --> 02:18:42,050
add it unless this key is not generated

02:18:39,349 --> 02:18:43,579
hopefully the way I change the quickly

02:18:42,050 --> 02:18:45,740
going this I just need to stay home

02:18:43,579 --> 02:18:51,719
Frank open some windows

02:18:45,740 --> 02:18:55,100
Siena changed location change location

02:18:51,719 --> 02:18:55,100
what is it call now

02:19:00,650 --> 02:19:21,090
is that so damn does okay yeah mom

02:19:15,290 --> 02:19:22,950
so you gotta find somehow okay if you

02:19:21,090 --> 02:19:31,110
look at it let me know man no this is oh

02:19:22,950 --> 02:19:34,260
you gotta phone group yeah I did not

02:19:31,110 --> 02:19:35,310
know how did you generate the configure

02:19:34,260 --> 02:19:37,469
because I thought that was like a system

02:19:35,310 --> 02:19:40,380
thing it seems like every system I tried

02:19:37,469 --> 02:19:43,830
it had it like Linux Mac so it might be

02:19:40,380 --> 02:19:48,440
like a recent thing you got it from user

02:19:43,830 --> 02:19:48,440
local that's that's homebrew right yeah

02:19:49,250 --> 02:19:56,090
okay I'll have to put a fallback that

02:19:51,870 --> 02:19:56,090
one can you maybe make a issue on this

02:19:58,940 --> 02:20:09,240
out this is one my Mac thing yeah but

02:20:04,590 --> 02:20:12,110
somehow supplying that one I think this

02:20:09,240 --> 02:20:15,300
one is from Mac on our coins yeah

02:20:12,110 --> 02:20:17,280
whichever one your is it not just

02:20:15,300 --> 02:20:20,730
assembling

02:20:17,280 --> 02:20:22,410
I know if you can you can cut them just

02:20:20,730 --> 02:20:31,650
to simply see what see if there's any

02:20:22,410 --> 02:20:34,290
obvious defense it's big file tsa

02:20:31,650 --> 02:20:39,180
convict what the heck open your luggage

02:20:34,290 --> 02:20:43,140
with this thing it's a separate file

02:20:39,180 --> 02:20:47,670
open the file size of difference oops

02:20:43,140 --> 02:20:48,390
eleventy be kind of roughed in okay okay

02:20:47,670 --> 02:20:53,190
this is cool

02:20:48,390 --> 02:20:55,860
how did you find it locate the open

02:20:53,190 --> 02:20:57,060
ancestors and does it does it work now I

02:20:55,860 --> 02:21:08,070
recommend with you when you change the

02:20:57,060 --> 02:21:14,420
path this should be good who had the

02:21:08,070 --> 02:21:19,020
issue with Mavericks or was it yeah yeah

02:21:14,420 --> 02:21:22,310
yeah Capitan but it seems like there's

02:21:19,020 --> 02:21:26,550
okay it seems like he's got a solution

02:21:22,310 --> 02:21:30,060
so the command itself pulls up a default

02:21:26,550 --> 02:21:31,980
configuration and in here so it pulls up

02:21:30,060 --> 02:21:34,050
this country and this location seems

02:21:31,980 --> 02:21:36,750
have changed from the previous one so

02:21:34,050 --> 02:21:38,310
you search for do a to turn or do a

02:21:36,750 --> 02:21:41,930
terminal thing and just do like locate

02:21:38,310 --> 02:21:41,930
open so that's enough

02:21:47,939 --> 02:21:54,180
okay I don't know how you did that yeah

02:21:51,880 --> 02:21:54,180
exactly

02:21:54,750 --> 02:22:01,470
[Music]

02:21:57,489 --> 02:22:01,470
I was just get I wasn't asking for them

02:22:03,090 --> 02:22:11,310
could you help him he's trying to find

02:22:07,989 --> 02:22:11,310
the file here's another look II think

02:22:16,170 --> 02:22:30,430
you are working no how about here

02:22:24,060 --> 02:22:31,869
HD dress awesome okay you're skipping

02:22:30,430 --> 02:22:36,609
ahead frameworks and although you can go

02:22:31,869 --> 02:22:39,250
for it sorry it's just like weird

02:22:36,609 --> 02:22:54,970
compatibility she's faster fire is

02:22:39,250 --> 02:22:56,529
amazing I started using it like last

02:22:54,970 --> 02:22:58,270
year like mid last year whatever when I

02:22:56,529 --> 02:22:59,529
first came out I was like fixing bugs

02:22:58,270 --> 02:23:01,479
all the time like he's like reviewing my

02:22:59,529 --> 02:23:07,119
code it's good nice like I finally get

02:23:01,479 --> 02:23:09,460
to meet him you expressed I think

02:23:07,119 --> 02:23:11,319
there's still some issues expressed like

02:23:09,460 --> 02:23:13,569
the project is kind of stale and there I

02:23:11,319 --> 02:23:15,489
mean like there was always they do some

02:23:13,569 --> 02:23:17,710
hacky stuff with the with the the the

02:23:15,489 --> 02:23:19,600
way that they wrapped the put the

02:23:17,710 --> 02:23:21,550
request and the response objects that

02:23:19,600 --> 02:23:23,199
they get from node if you want and it

02:23:21,550 --> 02:23:24,819
doesn't work anymore but hb2 it's like

02:23:23,199 --> 02:23:27,100
some like doing things that the internal

02:23:24,819 --> 02:23:29,409
stone is like not using the official API

02:23:27,100 --> 02:23:31,479
and those things all broke so we've been

02:23:29,409 --> 02:23:35,350
trying to work with the guy

02:23:31,479 --> 02:23:37,749
his name Doug Doug Wilson trying to tell

02:23:35,350 --> 02:23:39,939
him like trying to fix these things yeah

02:23:37,749 --> 02:23:41,050
yeah and he he knows he's aware of those

02:23:39,939 --> 02:23:42,880
things but it's just like here's another

02:23:41,050 --> 02:23:45,100
time to commit to fixing its breasts

02:23:42,880 --> 02:23:48,340
which is kind of sad because millions of

02:23:45,100 --> 02:23:49,810
people using adventure yeah so I

02:23:48,340 --> 02:23:51,130
personally I was using connect for a

02:23:49,810 --> 02:23:52,930
long time and now for my new stuff I

02:23:51,130 --> 02:23:54,430
always use past if I what depends are

02:23:52,930 --> 02:23:56,249
connectors like more low level high

02:23:54,430 --> 02:23:58,749
performance stuff mystic would connect

02:23:56,249 --> 02:24:00,489
you can use the middlewares but nothing

02:23:58,749 --> 02:24:02,350
too fanciful well then fast if I get all

02:24:00,489 --> 02:24:03,999
this cool stuff work building API it's

02:24:02,350 --> 02:24:06,039
just the best thing ever so I put like a

02:24:03,999 --> 02:24:07,359
bunch of examples here usually I go

02:24:06,039 --> 02:24:09,760
through it and see how I was using

02:24:07,359 --> 02:24:10,960
schema I was doing the fallback and the

02:24:09,760 --> 02:24:15,970
configuring of like we routes and all

02:24:10,960 --> 02:24:18,939
that it's a really cool tool is working

02:24:15,970 --> 02:24:22,350
on both systems now all right good good

02:24:18,939 --> 02:24:22,350
good how about it how about here

02:24:32,490 --> 02:24:39,551
is there a can I ask at what point you

02:24:35,860 --> 02:24:41,501
get stuck or did you already good

02:24:39,551 --> 02:24:44,351
question I just sold out something I'm

02:24:41,501 --> 02:24:48,791
sorry sorry it's a bit like yeah it's a

02:24:44,351 --> 02:24:50,200
big classroom let's yeah no no it's not

02:24:48,791 --> 02:24:54,101
about anyone's Paul Facebook I'm curious

02:24:50,200 --> 02:24:56,320
like you we're able to like run it at

02:24:54,101 --> 02:25:03,160
all this is this is window so I'm also

02:24:56,320 --> 02:25:04,271
not sure how things go there so what

02:25:03,160 --> 02:25:05,591
happens for some of them was the same

02:25:04,271 --> 02:25:06,700
issue like they were like I'm an older

02:25:05,591 --> 02:25:09,700
version of Mac and it didn't work right

02:25:06,700 --> 02:25:11,921
and if you if you actually look at the

02:25:09,700 --> 02:25:13,721
source code of the school right it's

02:25:11,921 --> 02:25:15,820
basically just calling open SSL on the

02:25:13,721 --> 02:25:17,261
command line so if you're able to open

02:25:15,820 --> 02:25:19,601
this all up in a cell you can actually

02:25:17,261 --> 02:25:21,761
use that as well just like all it's

02:25:19,601 --> 02:25:23,860
doing is like sort of abstracting over

02:25:21,761 --> 02:25:25,360
it but it's kinda interesting cuz like

02:25:23,860 --> 02:25:26,530
if you ever need this open SSL command

02:25:25,360 --> 02:25:28,870
you just couldn't come up with your own

02:25:26,530 --> 02:25:34,091
fix for it and I would I would love a

02:25:28,870 --> 02:25:36,240
pull request for Windows I need how's it

02:25:34,091 --> 02:25:36,240
going

02:25:40,969 --> 02:25:48,859
our context and here's the dried fish

02:25:53,239 --> 02:25:58,579
and I'm trying to fast if I didn't

02:26:04,789 --> 02:26:20,459
perform a boost test with the 10,000

02:26:12,499 --> 02:26:24,419
cool three times

02:26:20,459 --> 02:26:27,289
requests per second Oh whereas this guy

02:26:24,419 --> 02:26:29,369
he had a decrease

02:26:27,289 --> 02:26:35,339
what compared to what I gave you two

02:26:29,369 --> 02:26:38,489
versus if you wanted yeah the tls versus

02:26:35,339 --> 02:26:45,629
mean just using faster five versus just

02:26:38,489 --> 02:26:55,079
using HTTP okay both of you - yeah and

02:26:45,629 --> 02:26:56,640
then what versus what the FASTA file is

02:26:55,079 --> 02:27:06,119
a framework that's on top of the native

02:26:56,640 --> 02:27:08,939
edge to be doing I wasn't there but in

02:27:06,119 --> 02:27:12,959
order to make it even faster so I guess

02:27:08,939 --> 02:27:15,679
these talking about there but the way

02:27:12,959 --> 02:27:18,029
the thing that is really better at is

02:27:15,679 --> 02:27:19,439
the damage sort of a JSON generator

02:27:18,029 --> 02:27:20,640
there's a it's like one of the

02:27:19,439 --> 02:27:23,299
dependencies of Festiva is this like

02:27:20,640 --> 02:27:25,739
thing that just generates JSON and

02:27:23,299 --> 02:27:26,640
generates those strings faster than the

02:27:25,739 --> 02:27:29,369
json stringify

02:27:26,640 --> 02:27:31,469
and that's one thing where it speeds up

02:27:29,369 --> 02:27:33,359
and one of the reasons they can do that

02:27:31,469 --> 02:27:36,449
is because they use the schema that you

02:27:33,359 --> 02:27:37,949
can supply to precalculate like you pre

02:27:36,449 --> 02:27:39,959
generate a function that just statically

02:27:37,949 --> 02:27:41,399
like it basically decree it from the

02:27:39,959 --> 02:27:42,810
schema create a function that you give

02:27:41,399 --> 02:27:45,239
it input it is create strings of those

02:27:42,810 --> 02:27:47,100
lengths right and you avoid a lot of

02:27:45,239 --> 02:27:48,149
like internal like allocating

02:27:47,100 --> 02:27:49,540
reallocating of string when you

02:27:48,149 --> 02:27:52,990
concatenate stuff

02:27:49,540 --> 02:27:55,300
and this is one thing we're nude sort of

02:27:52,990 --> 02:27:57,700
has internally like this concept of

02:27:55,300 --> 02:27:58,660
there's two kinds of strings and when it

02:27:57,700 --> 02:28:00,580
switches from one to the other

02:27:58,660 --> 02:28:02,140
s like reallocate all that memory or

02:28:00,580 --> 02:28:03,610
when a string goes beyond the boundary

02:28:02,140 --> 02:28:04,810
has to grow and like reallocate a much

02:28:03,610 --> 02:28:06,460
memory and a couple of times when you'd

02:28:04,810 --> 02:28:08,290
like generating a large JSON response

02:28:06,460 --> 02:28:11,290
that can really slow things down and so

02:28:08,290 --> 02:28:13,330
the way he set it up it sort of tricks

02:28:11,290 --> 02:28:15,521
node into following the correct path

02:28:13,330 --> 02:28:17,650
straight away rather than stumbling

02:28:15,521 --> 02:28:29,860
until we find the solution this is one

02:28:17,650 --> 02:28:31,420
thing where the committee faster yeah

02:28:29,860 --> 02:28:32,680
this would this people straight like to

02:28:31,420 --> 02:28:33,760
stand standard this is not like I

02:28:32,680 --> 02:28:35,740
perform more than anything like that

02:28:33,760 --> 02:28:37,480
this is more like showing you can do

02:28:35,740 --> 02:28:39,640
standard streaming stuff yeah actually

02:28:37,480 --> 02:28:42,670
there's a cool API called respond with

02:28:39,640 --> 02:28:44,650
file descriptor if you go to the API

02:28:42,670 --> 02:28:47,771
documentation right this is what I mean

02:28:44,650 --> 02:28:49,390
for like serving static content and even

02:28:47,771 --> 02:28:52,330
the FASTA file static middleware uses it

02:28:49,390 --> 02:28:56,530
as well okay so this is an API that's

02:28:52,330 --> 02:29:00,460
only in H to be to you know down like it

02:28:56,530 --> 02:29:01,900
lets the ng HTTP to library it's off at

02:29:00,460 --> 02:29:04,780
the C level like just deal with the file

02:29:01,900 --> 02:29:06,880
handling note can open a file file

02:29:04,780 --> 02:29:08,620
descriptor and pass it to ng hb2 and

02:29:06,880 --> 02:29:12,730
it'll do it so they'll avoid a lot of

02:29:08,620 --> 02:29:13,960
buffer copying in memory it's not even

02:29:12,730 --> 02:29:15,310
piping there's many piping like piping

02:29:13,960 --> 02:29:16,870
we mean that goes to node and we notice

02:29:15,310 --> 02:29:19,330
the copy buffers around this is just

02:29:16,870 --> 02:29:21,670
like just see library do the thing

02:29:19,330 --> 02:29:22,990
here's a fly descriptor and I think it

02:29:21,670 --> 02:29:25,690
is the OS doing an essentially at that

02:29:22,990 --> 02:29:27,640
point yeah so you avoid a lot of so if

02:29:25,690 --> 02:29:29,050
you go for like really high throughput

02:29:27,640 --> 02:29:33,850
that's actually what you can do to make

02:29:29,050 --> 02:29:36,780
it a little faster but discussion about

02:29:33,850 --> 02:29:36,780
this yesterday

02:29:37,619 --> 02:29:47,069
my Pradas be we have a bunch of

02:29:41,649 --> 02:29:54,000
Microsoft said oh now we have varnish

02:29:47,069 --> 02:29:58,569
okay and we have a cougar

02:29:54,000 --> 02:29:58,930
Express server yeah right at the back

02:29:58,569 --> 02:30:04,180
girl

02:29:58,930 --> 02:30:06,510
yeah could make any sense it mauritius

02:30:04,180 --> 02:30:06,510
around

02:30:09,560 --> 02:30:15,779
it doesn't die in force understand it

02:30:12,029 --> 02:30:22,050
doesn't actually sweetie right yeah good

02:30:15,779 --> 02:30:24,870
point I mean that's actual what most

02:30:22,050 --> 02:30:26,310
students do then you lose the ability to

02:30:24,870 --> 02:30:34,109
do push streams then you lose the

02:30:26,310 --> 02:30:35,279
ability to do all the features yeah but

02:30:34,109 --> 02:30:37,380
if you look at the back end and you have

02:30:35,279 --> 02:30:40,710
a varnish or nginx or anything and

02:30:37,380 --> 02:30:42,180
actually or whatever proxying you lose

02:30:40,710 --> 02:30:43,859
the edge spew aside from the from the

02:30:42,180 --> 02:30:54,029
back end because they only talk upstream

02:30:43,859 --> 02:30:56,729
to sp1 yes so what they use for that is

02:30:54,029 --> 02:30:59,040
the link preload header most of the

02:30:56,729 --> 02:31:00,569
students and most of the using peanuts

02:30:59,040 --> 02:31:02,490
no it's you can do that for a couple of

02:31:00,569 --> 02:31:05,220
requests but you can't like push a huge

02:31:02,490 --> 02:31:07,050
bunch of like a whole bunch of push push

02:31:05,220 --> 02:31:08,040
promises I've been actually playing

02:31:07,050 --> 02:31:09,720
around with that one like from a

02:31:08,040 --> 02:31:12,120
front-end developer background I wanted

02:31:09,720 --> 02:31:14,490
to just like do bundling with my server

02:31:12,120 --> 02:31:17,189
push and none of none of the none of

02:31:14,490 --> 02:31:19,260
these link preload solutions which would

02:31:17,189 --> 02:31:20,550
accommodate that because they like they

02:31:19,260 --> 02:31:24,060
don't compress that Harrier properly

02:31:20,550 --> 02:31:26,910
they kind of do it on the plane I guess

02:31:24,060 --> 02:31:28,560
but just like the limits on like how

02:31:26,910 --> 02:31:31,140
many you can do a push like a thousand

02:31:28,560 --> 02:31:32,460
little JavaScript and CSS files which

02:31:31,140 --> 02:31:34,050
like you know that's a standard from an

02:31:32,460 --> 02:31:35,460
application these days it's just like

02:31:34,050 --> 02:31:37,500
people don't see it because it's a big

02:31:35,460 --> 02:31:39,359
web pack bundle but if you deconstruct

02:31:37,500 --> 02:31:40,979
it into like its original parts then

02:31:39,359 --> 02:31:43,050
that would actually be like a thousand

02:31:40,979 --> 02:31:44,520
please promises and relate to be -

02:31:43,050 --> 02:31:46,439
that's not a problem the protocol is

02:31:44,520 --> 02:31:49,430
totally capable of that this is the most

02:31:46,439 --> 02:31:49,430
observers kind of choke

02:31:51,409 --> 02:31:54,540
when the caching is actually now

02:31:53,279 --> 02:31:56,489
different because you can have cash not

02:31:54,540 --> 02:31:59,970
just like a huge asset you can cash to

02:31:56,489 --> 02:32:01,949
each of these individual components so

02:31:59,970 --> 02:32:05,359
actually maybe I should talk about that

02:32:01,949 --> 02:32:05,359
because I have a section on that

02:32:07,439 --> 02:32:14,979
okay so most people have managed to get

02:32:12,189 --> 02:32:17,320
it working I hope sorry about all the

02:32:14,979 --> 02:32:18,970
compatibility issues with various shells

02:32:17,320 --> 02:32:21,820
and various operating systems and

02:32:18,970 --> 02:32:29,110
versions of Mac OS and all that but it

02:32:21,820 --> 02:32:31,630
was a great exercise I think we so I

02:32:29,110 --> 02:32:33,850
think probably also again a lot of

02:32:31,630 --> 02:32:36,010
people have skipped ahead to checking

02:32:33,850 --> 02:32:38,080
out some of these frameworks fast if I

02:32:36,010 --> 02:32:39,580
many of you were at Mateos workshop so

02:32:38,080 --> 02:32:42,580
you probably know more about it than I

02:32:39,580 --> 02:32:43,660
do now testify a great framework for

02:32:42,580 --> 02:32:47,350
working relates to b2 because it

02:32:43,660 --> 02:32:49,450
supports it out of the box now and you

02:32:47,350 --> 02:32:51,550
can use this with your Express

02:32:49,450 --> 02:32:52,570
middleware it's fast and all that like

02:32:51,550 --> 02:32:53,979
there's a whole bunch of marketing hype

02:32:52,570 --> 02:32:55,960
okay don't use a framework because it

02:32:53,979 --> 02:32:58,060
says it's fast use it because you

02:32:55,960 --> 02:32:59,770
because it works and does its job for

02:32:58,060 --> 02:33:02,439
you whatever it is if your job

02:32:59,770 --> 02:33:04,720
relies on you serving JSON output you

02:33:02,439 --> 02:33:06,070
know 10% faster then just get a bigger

02:33:04,720 --> 02:33:09,100
server or something

02:33:06,070 --> 02:33:12,160
it's like it

02:33:09,100 --> 02:33:14,920
my personal preference for using fast fi

02:33:12,160 --> 02:33:16,990
is that it's a very nice API it does the

02:33:14,920 --> 02:33:18,970
async/await stuff it makes my code more

02:33:16,990 --> 02:33:20,860
enjoyable to write and to read and

02:33:18,970 --> 02:33:22,840
that's my primary reason if I want to

02:33:20,860 --> 02:33:25,300
make it actually like serve way more

02:33:22,840 --> 02:33:26,590
requests I would probably look at very

02:33:25,300 --> 02:33:27,939
different strategies than just changing

02:33:26,590 --> 02:33:29,770
a framework and hoping for some silver

02:33:27,939 --> 02:33:32,439
bullet but that's just you know I don't

02:33:29,770 --> 02:33:33,460
want to I love that's why it's my by far

02:33:32,439 --> 02:33:36,310
my favorite choice and I would use it

02:33:33,460 --> 02:33:38,620
over express any day because it's just

02:33:36,310 --> 02:33:40,390
more up to date but if you want to

02:33:38,620 --> 02:33:42,310
compare like benchmarks and all that

02:33:40,390 --> 02:33:45,189
kind of stuff it's just not really that

02:33:42,310 --> 02:33:46,840
high of a priority for me personally not

02:33:45,189 --> 02:33:50,950
to say that it isn't actually the

02:33:46,840 --> 02:33:52,600
fastest thing also so yeah I put a

02:33:50,950 --> 02:33:54,670
little example in there like that shows

02:33:52,600 --> 02:33:56,680
some of the ways that you use it but

02:33:54,670 --> 02:33:58,960
again you guys probably already have

02:33:56,680 --> 02:34:00,340
gone through that this morning the only

02:33:58,960 --> 02:34:02,140
thing that's relevant to HP to you is

02:34:00,340 --> 02:34:03,970
that you basically just set it to be too

02:34:02,140 --> 02:34:05,979
true and you're good to go

02:34:03,970 --> 02:34:08,050
in HTTP options where you provide your

02:34:05,979 --> 02:34:09,910
crypto stuff you also just say allow

02:34:08,050 --> 02:34:14,439
HTTP 1 and it does the Alpine

02:34:09,910 --> 02:34:15,670
negotiating thing automatically so

02:34:14,439 --> 02:34:18,160
you've seen all this schema stuff

02:34:15,670 --> 02:34:20,110
basically for those who were not at that

02:34:18,160 --> 02:34:20,439
workshop FASTA fire has a couple of cool

02:34:20,110 --> 02:34:21,999
features

02:34:20,439 --> 02:34:25,050
beyond what like Express is typically

02:34:21,999 --> 02:34:27,850
capable of for instance middlewares

02:34:25,050 --> 02:34:29,920
and and and request handlers can be

02:34:27,850 --> 02:34:32,739
asynchronous functions out-of-the-box

02:34:29,920 --> 02:34:34,449
like he work with Cola or I think happy

02:34:32,739 --> 02:34:37,899
maybe they kind of support these things

02:34:34,449 --> 02:34:40,689
as well so you you can normally use a

02:34:37,899 --> 02:34:42,399
response object to sort of send output

02:34:40,689 --> 02:34:43,989
with FASTA file it's called the reply

02:34:42,399 --> 02:34:46,390
object and you have a slightly different

02:34:43,989 --> 02:34:48,970
API but it it's pretty pretty simple you

02:34:46,390 --> 02:34:50,739
just go reply and then send some stuff

02:34:48,970 --> 02:34:52,779
and by default it's really good at doing

02:34:50,739 --> 02:34:55,510
JSON it's all set up for JSON so the

02:34:52,779 --> 02:34:57,430
incoming request is expecting to be like

02:34:55,510 --> 02:34:58,899
if you do a post to a festivai server

02:34:57,430 --> 02:35:00,399
without configuration you should just

02:34:58,899 --> 02:35:02,439
give it a content type application JSON

02:35:00,399 --> 02:35:03,909
because this element expects JSON like

02:35:02,439 --> 02:35:05,709
it's just really convenient for modern

02:35:03,909 --> 02:35:06,909
applications you don't have to like

02:35:05,709 --> 02:35:09,880
configure all these things per route

02:35:06,909 --> 02:35:11,470
anymore on the output you can set things

02:35:09,880 --> 02:35:13,959
like a schema like a response schema for

02:35:11,470 --> 02:35:17,229
like a 200 response I'm expecting it to

02:35:13,959 --> 02:35:18,609
have a this to be of type object it

02:35:17,229 --> 02:35:20,350
could be type arrayed it could be type

02:35:18,609 --> 02:35:21,970
string whatever as long as it's valid

02:35:20,350 --> 02:35:23,590
JSON you describe it with this JSON

02:35:21,970 --> 02:35:26,140
schema which is this back JSON schema

02:35:23,590 --> 02:35:27,850
org there's a format that a lot of

02:35:26,140 --> 02:35:29,229
different projects are using I use this

02:35:27,850 --> 02:35:32,409
for other things as well but like fast

02:35:29,229 --> 02:35:34,180
if I use it to describe what is allowed

02:35:32,409 --> 02:35:36,640
or not allowed in for instance this

02:35:34,180 --> 02:35:38,199
output this is response of a 200 but it

02:35:36,640 --> 02:35:40,689
can also use it for like tweaking

02:35:38,199 --> 02:35:43,689
filtering out the valid versus invalid

02:35:40,689 --> 02:35:45,459
query string parameters or request

02:35:43,689 --> 02:35:47,289
payloads and all these kind of things so

02:35:45,459 --> 02:35:48,850
it's it's a really nice it's a nice to

02:35:47,289 --> 02:35:51,249
have it's optional you don't have to you

02:35:48,850 --> 02:35:53,739
set this all up but in this case I'm

02:35:51,249 --> 02:35:55,479
using it for convenience that I can make

02:35:53,739 --> 02:35:57,850
sure that only the node and the v8

02:35:55,479 --> 02:35:59,739
properties are being output because my

02:35:57,850 --> 02:36:02,289
handler this is the request handler

02:35:59,739 --> 02:36:03,880
right it it just returns processed out

02:36:02,289 --> 02:36:05,670
versions and the process of versions

02:36:03,880 --> 02:36:08,260
actually contains a lot more than just

02:36:05,670 --> 02:36:08,979
than just this node and v8 property it

02:36:08,260 --> 02:36:10,959
contains a whole bunch of other things

02:36:08,979 --> 02:36:13,539
but my output I'll be guaranteed that

02:36:10,959 --> 02:36:15,340
it'll only contain node and v8 it has a

02:36:13,539 --> 02:36:16,630
nice side effect of if he provides FEMA

02:36:15,340 --> 02:36:18,159
it actually makes faster fire faster

02:36:16,630 --> 02:36:20,829
because I can compile a function that

02:36:18,159 --> 02:36:24,640
just serializes your object into a

02:36:20,829 --> 02:36:26,109
string in one shot but it's it's great

02:36:24,640 --> 02:36:28,180
in cases where you're let's say you're

02:36:26,109 --> 02:36:31,300
using MongoDB you make a query to your

02:36:28,180 --> 02:36:33,569
database so you get back some some some

02:36:31,300 --> 02:36:35,399
some row from your database

02:36:33,569 --> 02:36:38,100
you just output it by doing like your

02:36:35,399 --> 02:36:39,659
just return the output actually return

02:36:38,100 --> 02:36:41,909
to promise to get the output so you can

02:36:39,659 --> 02:36:43,800
do this whole thing without like with

02:36:41,909 --> 02:36:45,239
with a lot less code right you just have

02:36:43,800 --> 02:36:48,899
an async function that returns your

02:36:45,239 --> 02:36:49,890
 query and if you set the schema it

02:36:48,899 --> 02:36:51,930
will filter out things like that

02:36:49,890 --> 02:36:52,800
underscore ID these kind of pesky little

02:36:51,930 --> 02:36:54,839
things that have to deal with otherwise

02:36:52,800 --> 02:36:56,879
all that I'll let you know pointless

02:36:54,839 --> 02:36:58,529
code just skip it just specify what you

02:36:56,879 --> 02:37:01,050
need to get done and pacify takes care

02:36:58,529 --> 02:37:02,819
of it so a lot of these nice things I

02:37:01,050 --> 02:37:06,989
really like about Festa Phi so I would

02:37:02,819 --> 02:37:08,399
use it for done so but yeah and take a

02:37:06,989 --> 02:37:10,319
look at Festa Phi if that's your thing

02:37:08,399 --> 02:37:12,270
go for it

02:37:10,319 --> 02:37:13,829
things like error handling is also taken

02:37:12,270 --> 02:37:15,510
care if you can you can set up schemas

02:37:13,829 --> 02:37:16,709
for your errors and stuff like that you

02:37:15,510 --> 02:37:18,419
can you don't even have to actually

02:37:16,709 --> 02:37:20,189
explicitly send an error you can just

02:37:18,419 --> 02:37:21,569
throw an error so this is the nice way

02:37:20,189 --> 02:37:23,039
to dealing with async functions if you

02:37:21,569 --> 02:37:25,289
have a promise that may may may throw an

02:37:23,039 --> 02:37:26,760
error who cares it'll just show a nice

02:37:25,289 --> 02:37:28,169
error message to the user and you don't

02:37:26,760 --> 02:37:30,720
have to write like I always try caches

02:37:28,169 --> 02:37:34,499
and all this stuff so really convenient

02:37:30,720 --> 02:37:35,669
modern code in north esta fire ok load

02:37:34,499 --> 02:37:39,529
testing we kind of covered enough of

02:37:35,669 --> 02:37:39,529
that thanks for killing my server again

02:37:40,279 --> 02:37:44,369
that's ok you know makes it stronger and

02:37:42,449 --> 02:37:46,800
by the way by the time I fix it

02:37:44,369 --> 02:37:49,499
coalescing connections talked a lot

02:37:46,800 --> 02:37:51,899
about that so I wanted to do example I

02:37:49,499 --> 02:37:54,989
really did this is something that has

02:37:51,899 --> 02:37:59,039
come out like like last week in node 9

02:37:54,989 --> 02:38:00,569
point 4 and it's been on my to-do list

02:37:59,039 --> 02:38:02,310
for a long time to actually get this

02:38:00,569 --> 02:38:04,079
working it would be amazing I tried

02:38:02,310 --> 02:38:05,399
playing with it for a few days and I

02:38:04,079 --> 02:38:06,959
just couldn't get the API working

02:38:05,399 --> 02:38:08,520
correctly it may be a it may be a

02:38:06,959 --> 02:38:11,489
browser issue that no browser actually

02:38:08,520 --> 02:38:12,689
supports this right now but it's yeah

02:38:11,489 --> 02:38:14,699
sorry I couldn't actually get this

02:38:12,689 --> 02:38:16,529
example working but the concept is there

02:38:14,699 --> 02:38:18,239
and this will get implemented going

02:38:16,529 --> 02:38:20,159
forward by all browsers and everyone

02:38:18,239 --> 02:38:21,569
else so a lot of tools can start using

02:38:20,159 --> 02:38:23,579
these CDNs will start offering these

02:38:21,569 --> 02:38:25,890
features there's more going on than just

02:38:23,579 --> 02:38:29,609
what's currently supported in node which

02:38:25,890 --> 02:38:31,680
is the alternative service ring which

02:38:29,609 --> 02:38:33,600
has this origin concept so the server

02:38:31,680 --> 02:38:35,550
basically when a client connects to a

02:38:33,600 --> 02:38:38,069
server to request example.com

02:38:35,550 --> 02:38:41,039
it can say I also serve food command bar

02:38:38,069 --> 02:38:42,749
comm and send those as origin frames to

02:38:41,039 --> 02:38:45,209
the client so that the client then knows

02:38:42,749 --> 02:38:46,710
like ok if if I do a DNS lookup for

02:38:45,209 --> 02:38:48,300
those domains and they match and it

02:38:46,710 --> 02:38:50,370
the certificate that's being used for

02:38:48,300 --> 02:38:53,910
this connection matches then I can reuse

02:38:50,370 --> 02:38:56,189
this HP to session to open streams to

02:38:53,910 --> 02:38:59,760
various servers on that same session so

02:38:56,189 --> 02:39:01,080
that's the concept but this is very new

02:38:59,760 --> 02:39:03,000
and experimental stuff so there's still

02:39:01,080 --> 02:39:05,670
things evolving and people are trying to

02:39:03,000 --> 02:39:07,979
make it better for instance now there's

02:39:05,670 --> 02:39:10,080
a lot of discussion in the last few

02:39:07,979 --> 02:39:11,220
months about secondary certificates this

02:39:10,080 --> 02:39:13,830
is a proposal I think by people from

02:39:11,220 --> 02:39:15,600
Akamai or Microsoft or whoever secondary

02:39:13,830 --> 02:39:20,189
certificates would be you connect with

02:39:15,600 --> 02:39:22,680
TLS to a host right you get a

02:39:20,189 --> 02:39:25,020
certificate back and then the server can

02:39:22,680 --> 02:39:26,460
send additional certificates so if you

02:39:25,020 --> 02:39:27,840
combine that like if you say like this

02:39:26,460 --> 02:39:29,670
there's another certificate it comes in

02:39:27,840 --> 02:39:31,920
for this at this this extra domain that

02:39:29,670 --> 02:39:33,479
I want to connect to and the server also

02:39:31,920 --> 02:39:35,790
declares its origin is supported on it

02:39:33,479 --> 02:39:38,460
on the thing then the server can then

02:39:35,790 --> 02:39:39,899
serve with any certificate later on like

02:39:38,460 --> 02:39:41,040
this could be not just at the initial

02:39:39,899 --> 02:39:42,449
handshake but it could be further down

02:39:41,040 --> 02:39:43,739
and when the server knows that now you

02:39:42,449 --> 02:39:45,330
can add it now you're gonna to make this

02:39:43,739 --> 02:39:48,080
you know extra request to a different

02:39:45,330 --> 02:39:50,489
origin I'm gonna serve that as well Oh

02:39:48,080 --> 02:39:52,979
additionally in terms of privacy this

02:39:50,489 --> 02:39:54,750
could be quite important with TLS

02:39:52,979 --> 02:39:56,010
there's certain things that are

02:39:54,750 --> 02:39:58,199
protected and certain things that are

02:39:56,010 --> 02:40:00,750
not protected right so for instance if

02:39:58,199 --> 02:40:05,899
you connect to a server if you connect

02:40:00,750 --> 02:40:08,430
to you know my spy server dot whatever

02:40:05,899 --> 02:40:11,340
people who are snooping on that your ISP

02:40:08,430 --> 02:40:15,270
or you know your your your government

02:40:11,340 --> 02:40:16,560
agency or whatever they could they would

02:40:15,270 --> 02:40:18,720
see which push you're connecting to

02:40:16,560 --> 02:40:20,489
they could not see what's in your

02:40:18,720 --> 02:40:21,989
request so they can't see you know the

02:40:20,489 --> 02:40:25,109
path name of the request because that's

02:40:21,989 --> 02:40:26,580
already encrypted if you're able to use

02:40:25,109 --> 02:40:29,100
secondary certificates you could connect

02:40:26,580 --> 02:40:31,229
to you know my generic service and then

02:40:29,100 --> 02:40:33,060
follow that up with a request to my

02:40:31,229 --> 02:40:35,430
secret-spy server right that would

02:40:33,060 --> 02:40:37,710
improve your privacy because you're

02:40:35,430 --> 02:40:39,510
using your view by the time you send

02:40:37,710 --> 02:40:41,550
that second request it's already fully

02:40:39,510 --> 02:40:42,660
fully encrypted and you can use those

02:40:41,550 --> 02:40:43,979
additional certificates and they would

02:40:42,660 --> 02:40:45,029
be none the wiser anyone who's spying

02:40:43,979 --> 02:40:47,640
logging that connection could never

02:40:45,029 --> 02:40:49,710
under Section happening beyond that

02:40:47,640 --> 02:40:51,930
first connection they only see that

02:40:49,710 --> 02:40:53,460
first handshake so that's do some VPN

02:40:51,930 --> 02:40:54,720
service or some privacy protection

02:40:53,460 --> 02:40:56,160
service and that's all they would see

02:40:54,720 --> 02:40:57,029
that you're using such a service but

02:40:56,160 --> 02:40:58,560
they would not see what you're actually

02:40:57,029 --> 02:40:59,760
requesting right now you can actually

02:40:58,560 --> 02:41:02,340
see that unless like

02:40:59,760 --> 02:41:04,740
we refuse VPNs for that this essentially

02:41:02,340 --> 02:41:06,390
is the benefits of a VPN but in in

02:41:04,740 --> 02:41:08,520
standard TLS on every web server and

02:41:06,390 --> 02:41:10,740
every CDN so those are some of the

02:41:08,520 --> 02:41:13,290
concepts that are being moved towards

02:41:10,740 --> 02:41:15,870
and like yeah I haven't been able to get

02:41:13,290 --> 02:41:17,490
it fully working yet so I'll rather

02:41:15,870 --> 02:41:23,399
focus maybe a little bit more the time

02:41:17,490 --> 02:41:25,380
we have on server push so we've seen

02:41:23,399 --> 02:41:26,609
some of the the frames that were being

02:41:25,380 --> 02:41:27,660
sent in the low-level stuff that we

02:41:26,609 --> 02:41:30,300
looked at the protocol packets and all

02:41:27,660 --> 02:41:31,680
that so those we saw data frames we saw

02:41:30,300 --> 02:41:33,510
header frames we saw settings frames

02:41:31,680 --> 02:41:35,370
there's another frame called a push

02:41:33,510 --> 02:41:37,350
promise it's very similar to a header

02:41:35,370 --> 02:41:39,420
frame in fact it contains almost exactly

02:41:37,350 --> 02:41:45,810
the same information with a slight tweak

02:41:39,420 --> 02:41:48,240
it also declares a there's a sort of the

02:41:45,810 --> 02:41:49,560
ID of a stream that it will use it has

02:41:48,240 --> 02:41:52,800
the intention to use in the future

02:41:49,560 --> 02:41:56,220
hence the promise so it basically

02:41:52,800 --> 02:41:57,840
reserves a stream by ID for future use

02:41:56,220 --> 02:42:00,000
so the server sends this saying like

02:41:57,840 --> 02:42:03,450
okay stream number 27 I'm gonna use it

02:42:00,000 --> 02:42:05,130
to send the response to these headers

02:42:03,450 --> 02:42:07,319
right so that's interesting to think

02:42:05,130 --> 02:42:09,510
about the response to headers the

02:42:07,319 --> 02:42:11,630
headers represent a request so the

02:42:09,510 --> 02:42:14,189
server is sending the client a request

02:42:11,630 --> 02:42:15,600
that's weird right like so normally the

02:42:14,189 --> 02:42:18,029
client sends a request to the server and

02:42:15,600 --> 02:42:19,410
the server responds order with it with

02:42:18,029 --> 02:42:21,330
the response and each of these headers

02:42:19,410 --> 02:42:23,819
and then each of these can have a body

02:42:21,330 --> 02:42:26,069
write request kind of a body write like

02:42:23,819 --> 02:42:29,040
if you do a post or a put or a patch or

02:42:26,069 --> 02:42:30,960
something so but in this case it's

02:42:29,040 --> 02:42:33,420
purely originating from the server

02:42:30,960 --> 02:42:35,609
sending a request to the client and then

02:42:33,420 --> 02:42:37,470
sending a response to the client so the

02:42:35,609 --> 02:42:40,800
reason for this request being going out

02:42:37,470 --> 02:42:43,500
from the server is that it has to say it

02:42:40,800 --> 02:42:45,390
has to tell the client enough

02:42:43,500 --> 02:42:47,250
information about the request so that

02:42:45,390 --> 02:42:48,569
the client can then determine when it

02:42:47,250 --> 02:42:50,399
when the time comes to actually make

02:42:48,569 --> 02:42:53,160
such a request whether or not it matches

02:42:50,399 --> 02:42:54,720
the promised stream and then it can skip

02:42:53,160 --> 02:42:57,689
the actual request going out it can just

02:42:54,720 --> 02:43:00,479
wait for it to come back ok so an

02:42:57,689 --> 02:43:07,859
example might clarify that a little bit

02:43:00,479 --> 02:43:14,029
if if asserts gzip but not brutally the

02:43:07,859 --> 02:43:18,689
server might send a promise for a

02:43:14,029 --> 02:43:20,579
encoded asset the client can then say ok

02:43:18,689 --> 02:43:22,020
this response is gonna come come to me

02:43:20,579 --> 02:43:24,600
but I can't use it because I don't

02:43:22,020 --> 02:43:26,489
understand this this content encoding so

02:43:24,600 --> 02:43:28,680
I'm just gonna go and request it anyway

02:43:26,489 --> 02:43:31,560
so you know it might be the same URL to

02:43:28,680 --> 02:43:33,390
the same asset but in encoding it could

02:43:31,560 --> 02:43:35,579
consider that as unsupported and just

02:43:33,390 --> 02:43:38,069
try to it'll just reset that that stream

02:43:35,579 --> 02:43:41,850
it will cancel that and it'll make the

02:43:38,069 --> 02:43:43,409
request anyway so that's why you might

02:43:41,850 --> 02:43:45,209
want to set things in that initial

02:43:43,409 --> 02:43:48,779
request that's coming in that push

02:43:45,209 --> 02:43:51,840
promise to have different meanings to

02:43:48,779 --> 02:43:55,590
the client right now though none of the

02:43:51,840 --> 02:43:56,939
browser's really care about the headers

02:43:55,590 --> 02:43:59,670
that you're sending so there's things

02:43:56,939 --> 02:44:03,619
like the very header where you can tell

02:43:59,670 --> 02:44:06,720
like caches or browsers whether a

02:44:03,619 --> 02:44:08,069
response from the same path is actually

02:44:06,720 --> 02:44:09,270
different or not in which ways it's

02:44:08,069 --> 02:44:11,340
different depending on which headers

02:44:09,270 --> 02:44:12,899
right now that's completely ignored when

02:44:11,340 --> 02:44:15,149
you when you do a push it's very easy

02:44:12,899 --> 02:44:17,010
the browser just looks at the the the

02:44:15,149 --> 02:44:18,060
path name and if it's the correct path

02:44:17,010 --> 02:44:19,859
in of the door class that it's going to

02:44:18,060 --> 02:44:21,239
make it'll except it'll wait for it if

02:44:19,859 --> 02:44:22,680
it's different it'll make its own

02:44:21,239 --> 02:44:24,899
request anyway so it's a very simple

02:44:22,680 --> 02:44:26,640
even planation but that will change so

02:44:24,899 --> 02:44:29,520
there's always already been declarations

02:44:26,640 --> 02:44:31,020
of intent by I think chrome to say that

02:44:29,520 --> 02:44:33,569
we will respect the very header in push

02:44:31,020 --> 02:44:35,010
promises but I'm so I'm not sure if it's

02:44:33,569 --> 02:44:35,729
currently in canary or anything like

02:44:35,010 --> 02:44:37,289
that

02:44:35,729 --> 02:44:38,670
but just be aware that that could be a

02:44:37,289 --> 02:44:40,890
thing so most of the time your push

02:44:38,670 --> 02:44:43,859
promise includes very little it's just

02:44:40,890 --> 02:44:44,939
the path name and maybe a mime type or

02:44:43,859 --> 02:44:47,909
something like if you want to do that

02:44:44,939 --> 02:44:49,800
but it's very very bare minimal a kind

02:44:47,909 --> 02:44:52,800
of request request that you're sending

02:44:49,800 --> 02:44:55,229
it into motion and a push promise so I'm

02:44:52,800 --> 02:44:58,409
using this personally for building web

02:44:55,229 --> 02:45:00,359
apps and sort of bundling JavaScript and

02:44:58,409 --> 02:45:02,069
CSS and fonts and whatever so that I

02:45:00,359 --> 02:45:03,510
don't have to use like client-side

02:45:02,069 --> 02:45:05,520
bundling tools like all these build

02:45:03,510 --> 02:45:06,510
tools like web pack I'd rather not have

02:45:05,520 --> 02:45:08,850
to use that I'd rather do that at a

02:45:06,510 --> 02:45:11,399
protocol level one reason is that

02:45:08,850 --> 02:45:12,569
because it just makes my life easier I

02:45:11,399 --> 02:45:13,409
don't have to setup this you know I

02:45:12,569 --> 02:45:14,609
don't have come up with a web pack

02:45:13,409 --> 02:45:17,819
configuration every little project that

02:45:14,609 --> 02:45:20,220
I do right it also benefits because you

02:45:17,819 --> 02:45:21,840
can do this even earlier than like a web

02:45:20,220 --> 02:45:24,149
pack with a pack if you have a bundle

02:45:21,840 --> 02:45:25,260
then okay you have this wasted

02:45:24,149 --> 02:45:26,971
round-trip still going on because you

02:45:25,260 --> 02:45:28,891
first have to know that HTML before

02:45:26,971 --> 02:45:33,061
I can actually even request that bundle

02:45:28,891 --> 02:45:35,610
so with push you eliminate that because

02:45:33,061 --> 02:45:36,841
as soon as you send your in HTML you can

02:45:35,610 --> 02:45:38,221
already start sending all your

02:45:36,841 --> 02:45:41,451
JavaScript on everything that mix then

02:45:38,221 --> 02:45:43,860
your TCP connection ramps up faster and

02:45:41,451 --> 02:45:45,961
you don't have to deal with like

02:45:43,860 --> 02:45:48,690
specifics of like only the JavaScript

02:45:45,961 --> 02:45:50,070
and then the CSS you can also just have

02:45:48,690 --> 02:45:51,931
JavaScript import other JavaScript

02:45:50,070 --> 02:45:53,161
import or CSS files employerís easily

02:45:51,931 --> 02:45:54,690
import and not have to wait for a

02:45:53,161 --> 02:45:56,551
roundtrip at each stage because it's

02:45:54,690 --> 02:46:01,351
already being pushed so I'll show an

02:45:56,551 --> 02:46:04,730
example of how I'm doing that this is a

02:46:01,351 --> 02:46:09,721
quick like proof of concept kind of

02:46:04,730 --> 02:46:10,921
exercise here I'll just go through it

02:46:09,721 --> 02:46:13,110
real quick so we can get to my meme

02:46:10,921 --> 02:46:15,391
something more interesting right now

02:46:13,110 --> 02:46:18,150
we've got a secure server which we

02:46:15,391 --> 02:46:21,931
understand and then we look at the HTTP

02:46:18,150 --> 02:46:23,940
version for some reason okay what we

02:46:21,931 --> 02:46:26,311
have to look at is a whether or not the

02:46:23,940 --> 02:46:29,581
client allows push so if your connects

02:46:26,311 --> 02:46:30,990
with like curl or ng HTTP they they have

02:46:29,581 --> 02:46:32,791
a setting that the court that they sent

02:46:30,990 --> 02:46:35,101
to the server the client setting that

02:46:32,791 --> 02:46:36,570
this allows push and so if the server

02:46:35,101 --> 02:46:37,591
were to actually send a push promise it

02:46:36,570 --> 02:46:39,511
would be considered a connection

02:46:37,591 --> 02:46:41,551
protocol err they will kill the

02:46:39,511 --> 02:46:43,291
connection and so you don't want that to

02:46:41,551 --> 02:46:44,101
happen all the time right it's kind of a

02:46:43,291 --> 02:46:45,931
bad behavior

02:46:44,101 --> 02:46:48,990
there could be legitimate reasons why a

02:46:45,931 --> 02:46:50,461
browser may switch off push I don't know

02:46:48,990 --> 02:46:52,860
of any browser that does that I run the

02:46:50,461 --> 02:46:54,511
command line testing tools but so you

02:46:52,860 --> 02:46:57,150
have to respect that still has to be

02:46:54,511 --> 02:46:59,131
complying with the protocol so you kind

02:46:57,150 --> 02:47:00,451
of always check because we're using

02:46:59,131 --> 02:47:02,881
compatibility layer there's this whole

02:47:00,451 --> 02:47:04,351
roundabout way of getting to the remote

02:47:02,881 --> 02:47:07,230
settings and then figuring out does it

02:47:04,351 --> 02:47:09,751
have an able push set to true so this

02:47:07,230 --> 02:47:11,641
enable push true that's ultimately the

02:47:09,751 --> 02:47:13,530
flag that you're looking for and when it

02:47:11,641 --> 02:47:17,521
does you can use the API that's exposed

02:47:13,530 --> 02:47:19,681
on the stream instanced to send the

02:47:17,521 --> 02:47:21,690
request headers so this is the server

02:47:19,681 --> 02:47:23,251
sending this fake request to the client

02:47:21,690 --> 02:47:25,591
and in this case all I'm sending is a

02:47:23,251 --> 02:47:29,851
simple path saying this is my dependency

02:47:25,591 --> 02:47:32,121
okay and it it receives a push stream

02:47:29,851 --> 02:47:36,789
and this is actually sort of the

02:47:32,121 --> 02:47:39,010
response to the fake request right so

02:47:36,789 --> 02:47:41,439
in terms of the protocol they see on the

02:47:39,010 --> 02:47:45,180
wire this call to push stream here with

02:47:41,439 --> 02:47:47,470
these headers this is the push promise

02:47:45,180 --> 02:47:50,289
frame this is the push promise frame

02:47:47,470 --> 02:47:52,180
that's going out and until you do

02:47:50,289 --> 02:47:55,029
something with this push stream object

02:47:52,180 --> 02:47:57,460
nothing's gonna happen so you can use

02:47:55,029 --> 02:47:59,670
this to kind of cleverly sort and rank

02:47:57,460 --> 02:48:02,409
how you actually emit your information

02:47:59,670 --> 02:48:04,600
typically what I what I do and what I

02:48:02,409 --> 02:48:08,199
think is sort of a good practice is you

02:48:04,600 --> 02:48:10,600
you receive a request you serve you send

02:48:08,199 --> 02:48:13,090
all of the push promises then you

02:48:10,600 --> 02:48:15,609
respond to the original request with the

02:48:13,090 --> 02:48:17,590
headers and the data frames and then you

02:48:15,609 --> 02:48:19,359
start fulfilling all of those promises

02:48:17,590 --> 02:48:22,539
with their response headers and their

02:48:19,359 --> 02:48:24,039
data the reason is that the earlier you

02:48:22,539 --> 02:48:25,930
send the response to the original

02:48:24,039 --> 02:48:27,939
request let's it's typically that your

02:48:25,930 --> 02:48:29,710
HTML the sooner the browser can start

02:48:27,939 --> 02:48:31,840
working with that and building the DOM

02:48:29,710 --> 02:48:34,210
and you know start scaffolding and

02:48:31,840 --> 02:48:36,069
everything out but you need to send the

02:48:34,210 --> 02:48:37,720
push promises first because otherwise it

02:48:36,069 --> 02:48:38,979
may still make those requests because it

02:48:37,720 --> 02:48:42,880
hasn't it doesn't know it's not aware

02:48:38,979 --> 02:48:45,130
that they these push promises exist

02:48:42,880 --> 02:48:47,529
right that you intend to send that so

02:48:45,130 --> 02:48:49,329
you might send a request out so the push

02:48:47,529 --> 02:48:51,430
promises first then the response to your

02:48:49,329 --> 02:48:53,109
main request and then all the responses

02:48:51,430 --> 02:48:55,090
to the push promises that's sort of the

02:48:53,109 --> 02:48:58,449
typical order that I've been playing

02:48:55,090 --> 02:49:02,489
with and it works very well now in this

02:48:58,449 --> 02:49:08,010
case what we're gonna see okay push

02:49:02,489 --> 02:49:08,010
dependencies okay so if we run that

02:49:08,221 --> 02:49:14,240
Oh wrong directory we weren't

02:49:14,870 --> 02:49:17,870
six

02:49:19,650 --> 02:49:27,110
yeah of course really living here

02:49:35,930 --> 02:49:49,939
okay so I've spun up the exercises as

02:49:38,939 --> 02:49:52,829
displayed and I'm going to now okay so

02:49:49,939 --> 02:50:00,689
what we see here is two requests one for

02:49:52,829 --> 02:50:03,869
slash and one for the favicon however it

02:50:00,689 --> 02:50:04,109
might not have had this open okay hang

02:50:03,869 --> 02:50:08,399
on

02:50:04,109 --> 02:50:11,369
reset okay we see two requests but we

02:50:08,399 --> 02:50:13,109
see four requests in here okay so what

02:50:11,369 --> 02:50:20,339
happened we see four requests from the

02:50:13,109 --> 02:50:24,239
browser and okay okay they're served

02:50:20,339 --> 02:50:26,159
from push so what is shown here protocol

02:50:24,239 --> 02:50:27,270
h2 in this initiator problem you can

02:50:26,159 --> 02:50:28,199
tell whether or not it's being served

02:50:27,270 --> 02:50:30,659
from the push cache or not

02:50:28,199 --> 02:50:34,020
so effectively only disk cache this

02:50:30,659 --> 02:50:37,169
requests this this the root index.html

02:50:34,020 --> 02:50:39,779
went out and our five icon so the round

02:50:37,169 --> 02:50:43,829
trips were avoided completely in serving

02:50:39,779 --> 02:50:45,989
this you know demo page and could prove

02:50:43,829 --> 02:50:47,879
that by showing that the console indeed

02:50:45,989 --> 02:50:49,739
logged hello world which came from a

02:50:47,879 --> 02:50:51,180
dependency to a script file that was

02:50:49,739 --> 02:50:53,189
being included so normally there would

02:50:51,180 --> 02:50:55,079
be two round-trips and in this case it

02:50:53,189 --> 02:50:57,419
was zero round trips like wasted so

02:50:55,079 --> 02:50:59,159
that's the proof of concept of like how

02:50:57,419 --> 02:51:01,439
can you use to bundle an entire

02:50:59,159 --> 02:51:05,339
JavaScript application with zero

02:51:01,439 --> 02:51:07,709
configuration or build tools of course

02:51:05,339 --> 02:51:09,989
the question is you know I don't have

02:51:07,709 --> 02:51:10,770
the code like each of my jobs good

02:51:09,989 --> 02:51:12,149
assets into this

02:51:10,770 --> 02:51:13,739
so there's tools around that that can be

02:51:12,149 --> 02:51:15,020
developed I've been working on some

02:51:13,739 --> 02:51:18,749
there's a lot of people who are

02:51:15,020 --> 02:51:20,489
experimenting with that right now most

02:51:18,749 --> 02:51:23,810
of what you see in in terms of public

02:51:20,489 --> 02:51:30,539
support for push it's going to be that

02:51:23,810 --> 02:51:32,459
this link rel preload style and there's

02:51:30,539 --> 02:51:33,629
a couple of reasons for that one is most

02:51:32,459 --> 02:51:35,039
of the students today are built on

02:51:33,629 --> 02:51:38,669
infrastructure that just doesn't really

02:51:35,039 --> 02:51:41,039
support HTTP two in the origin side of

02:51:38,669 --> 02:51:42,810
it so there's two sides to a CDN one is

02:51:41,039 --> 02:51:44,610
to the clients to the browsers so you

02:51:42,810 --> 02:51:47,311
connect to HB 2 and you get so

02:51:44,610 --> 02:51:50,311
responds with hb2 but the CDN itself

02:51:47,311 --> 02:51:52,580
that edge server has to make that proxy

02:51:50,311 --> 02:51:55,561
request to the actual origin server and

02:51:52,580 --> 02:51:56,910
almost none of them if any actually do

02:51:55,561 --> 02:51:59,610
that over HTTP - they all seem to do

02:51:56,910 --> 02:52:01,290
this over HP one so it's hard for

02:51:59,610 --> 02:52:03,900
anybody service to actually implement

02:52:01,290 --> 02:52:05,271
through HTTP - all the way just because

02:52:03,900 --> 02:52:07,500
of the technology stack that they're on

02:52:05,271 --> 02:52:09,301
secondly is that from the perspective of

02:52:07,500 --> 02:52:10,830
CDN they're not trying to solve a

02:52:09,301 --> 02:52:11,851
front-end developer problem they're

02:52:10,830 --> 02:52:17,101
trying to solve a network performance

02:52:11,851 --> 02:52:20,851
problem and the solution is potentially

02:52:17,101 --> 02:52:23,130
sufficient so me as a friend developer I

02:52:20,851 --> 02:52:25,170
see server pushes like this amazing

02:52:23,130 --> 02:52:26,820
solution to make my website faster

02:52:25,170 --> 02:52:28,440
automatically without configuration and

02:52:26,820 --> 02:52:29,641
all that to them what they're trying to

02:52:28,440 --> 02:52:31,021
solve is that think time that server

02:52:29,641 --> 02:52:33,301
think that in that little round trip and

02:52:31,021 --> 02:52:35,700
so as long as they can serve a single or

02:52:33,301 --> 02:52:36,000
maybe a couple of assets it's fine this

02:52:35,700 --> 02:52:37,681
sir

02:52:36,000 --> 02:52:39,240
so your initial request comes in and

02:52:37,681 --> 02:52:40,681
they have that edge cache they have a

02:52:39,240 --> 02:52:42,450
couple of files that that are included

02:52:40,681 --> 02:52:44,400
in this link preload that they can

02:52:42,450 --> 02:52:45,990
immediately push then they're filling

02:52:44,400 --> 02:52:47,700
that thing time already and so that

02:52:45,990 --> 02:52:49,860
narrow performance issue for them it's

02:52:47,700 --> 02:52:52,141
considered done but you'd never be able

02:52:49,860 --> 02:52:54,450
to like push you know 100 javascript

02:52:52,141 --> 02:52:55,561
files and 100 CSS files because your

02:52:54,450 --> 02:52:58,410
letter your header would just like be

02:52:55,561 --> 02:52:59,790
crazy long and most of these servers

02:52:58,410 --> 02:53:02,641
sort of have a limit on the size of

02:52:59,790 --> 02:53:05,761
headers and I like CloudFlare I think

02:53:02,641 --> 02:53:09,721
something like 24 maximum link preload

02:53:05,761 --> 02:53:11,221
25 or something capped they have pretty

02:53:09,721 --> 02:53:13,320
low limits on these things so like for

02:53:11,221 --> 02:53:17,250
for bundling and a whole bunch of assets

02:53:13,320 --> 02:53:19,011
it's not ideal and so this is one of the

02:53:17,250 --> 02:53:21,570
problems that I've faced and why I

02:53:19,011 --> 02:53:23,880
prefer to go over something like node

02:53:21,570 --> 02:53:25,200
where you have full HTTP - in any

02:53:23,880 --> 02:53:28,110
direction you want like you can easily

02:53:25,200 --> 02:53:29,880
proxy full HTTP - from the client to

02:53:28,110 --> 02:53:33,120
your proxy and from your proxy to the

02:53:29,880 --> 02:53:37,141
upstream right and so that's one issue

02:53:33,120 --> 02:53:39,811
second issue this is the second issue

02:53:37,141 --> 02:53:42,681
this is an example here our our hello

02:53:39,811 --> 02:53:46,130
world the second time I load this page

02:53:42,681 --> 02:53:47,660
right I make the same two requests and

02:53:46,130 --> 02:53:50,190
[Music]

02:53:47,660 --> 02:53:52,830
ready to go the same thing gets pushed

02:53:50,190 --> 02:53:55,471
but I could already have this in my

02:53:52,830 --> 02:53:57,061
cache I mean I already have this in my

02:53:55,471 --> 02:53:58,080
cache on the first time I loaded it but

02:53:57,061 --> 02:53:58,550
it's still being pushed so this being

02:53:58,080 --> 02:54:00,409
waste

02:53:58,550 --> 02:54:05,060
and it's pretty who has a mechanism

02:54:00,409 --> 02:54:07,119
where the client can sort of reset as

02:54:05,060 --> 02:54:09,470
pushed stream so to reject it

02:54:07,119 --> 02:54:11,029
but it could be that if you're pushing

02:54:09,470 --> 02:54:13,970
like a whole bunch of files that just of

02:54:11,029 --> 02:54:16,220
just do just a volume of push promises

02:54:13,970 --> 02:54:18,770
itself could be you know kilobytes and

02:54:16,220 --> 02:54:20,000
then the resetting each of these

02:54:18,770 --> 02:54:21,289
individually could be like tens of

02:54:20,000 --> 02:54:23,510
kilobytes so you're wasting potentially

02:54:21,289 --> 02:54:25,789
a lot of bandwidth that self will take

02:54:23,510 --> 02:54:26,090
round trips and so this isn't less than

02:54:25,789 --> 02:54:28,640
ideal

02:54:26,090 --> 02:54:30,350
to just rely on the client to cancel it

02:54:28,640 --> 02:54:31,579
also the server might have already in

02:54:30,350 --> 02:54:33,140
the meantime sent it out if you like two

02:54:31,579 --> 02:54:35,300
seconds away the server could already be

02:54:33,140 --> 02:54:36,439
like sending a whole bunch of data that

02:54:35,300 --> 02:54:39,079
your client will eventually just like

02:54:36,439 --> 02:54:42,229
reject or find useless and that's again

02:54:39,079 --> 02:54:45,050
wastage and so the solution to this is

02:54:42,229 --> 02:54:49,329
for the client to tell the server what

02:54:45,050 --> 02:54:49,329
it already has in its cache it does that

02:54:49,749 --> 02:54:52,839
wazzle this thing is called cash digest

02:54:51,519 --> 02:54:54,309
that's the proposal that's if you go to

02:54:52,839 --> 02:54:56,409
the HTTP working group you'll see cash

02:54:54,309 --> 02:54:59,499
digest proposal it's the concept of a

02:54:56,409 --> 02:55:02,289
bloom filter I'm not a computer science

02:54:59,499 --> 02:55:04,259
kind of background guy but I implemented

02:55:02,289 --> 02:55:06,789
it and the way I understand it is that

02:55:04,259 --> 02:55:08,019
you basically look at everything that's

02:55:06,789 --> 02:55:08,679
in your cache for this domain that

02:55:08,019 --> 02:55:10,689
you're connecting to

02:55:08,679 --> 02:55:13,329
you take a hash of it so you have this

02:55:10,689 --> 02:55:14,739
nice normalized random noise this

02:55:13,329 --> 02:55:16,299
distribution and you take the first

02:55:14,739 --> 02:55:17,709
couple of bits you sort of stick them

02:55:16,299 --> 02:55:19,239
all together and you pretty much send

02:55:17,709 --> 02:55:23,709
that to the server so your server has

02:55:19,239 --> 02:55:24,909
this list of abbreviated hashes of all

02:55:23,709 --> 02:55:27,189
the things that are in the clients cache

02:55:24,909 --> 02:55:28,929
so this takes a lot less bandwidth to

02:55:27,189 --> 02:55:31,059
transmit than just sending all of the

02:55:28,929 --> 02:55:33,039
URLs right so it's just nice and

02:55:31,059 --> 02:55:34,899
abbreviated and the server will then

02:55:33,039 --> 02:55:36,549
just say okay I'm trying to push this

02:55:34,899 --> 02:55:38,289
thing but I can look up in this cache

02:55:36,549 --> 02:55:40,119
digest whether or not the client already

02:55:38,289 --> 02:55:40,949
has it by just hashing the URL of the

02:55:40,119 --> 02:55:42,849
thing that I'm trying to serve

02:55:40,949 --> 02:55:44,799
abbreviating it and seeing if it matches

02:55:42,849 --> 02:55:47,079
any segment in that bloom filter that's

02:55:44,799 --> 02:55:51,219
roughly how it works to my understanding

02:55:47,079 --> 02:55:54,549
so this is a minimal processing cost and

02:55:51,219 --> 02:55:57,479
at a server and a client side but it

02:55:54,549 --> 02:56:00,219
saves the server from doing a lot of

02:55:57,479 --> 02:56:01,659
wasted round trips and network

02:56:00,219 --> 02:56:03,789
performance is way more expensive than

02:56:01,659 --> 02:56:05,409
CPU performance right it's very like

02:56:03,789 --> 02:56:07,779
most CPUs on web servers it can be

02:56:05,409 --> 02:56:10,629
practically idle serving you know 10

02:56:07,779 --> 02:56:12,099
gigabit links it's very you know easy to

02:56:10,629 --> 02:56:13,149
copy the copy buffers around so it's

02:56:12,099 --> 02:56:17,199
kind of nice to have something to throw

02:56:13,149 --> 02:56:19,929
CPUs at now but this hasn't been fully

02:56:17,199 --> 02:56:20,979
implemented yet in any browser on the

02:56:19,929 --> 02:56:23,109
market right now is still experimental

02:56:20,979 --> 02:56:24,999
and right now the proposals I'm

02:56:23,109 --> 02:56:27,849
switching from room filters to golem

02:56:24,999 --> 02:56:29,859
coated sets do cocoa filters and each of

02:56:27,849 --> 02:56:31,809
them have like some pros and cons and

02:56:29,859 --> 02:56:35,199
from my conversations with browser

02:56:31,809 --> 02:56:37,839
developers there's some difficulties

02:56:35,199 --> 02:56:38,919
there and so some people are still like

02:56:37,839 --> 02:56:40,539
ok why don't we just stick with this

02:56:38,919 --> 02:56:43,929
link preload cuz it's Hana it kind of

02:56:40,539 --> 02:56:47,759
maybe solves enough of the problem but

02:56:43,929 --> 02:56:50,199
to really really bundle like large

02:56:47,759 --> 02:56:51,639
front-end applications with server push

02:56:50,199 --> 02:56:53,919
you would need something like a cache

02:56:51,639 --> 02:56:59,279
digest and so one of the things I did

02:56:53,919 --> 02:57:01,719
was to create a experiment with a

02:56:59,279 --> 02:57:03,150
serviceworker that sits in the browser

02:57:01,719 --> 02:57:04,110
so you're up

02:57:03,150 --> 02:57:06,391
has to actually include the

02:57:04,110 --> 02:57:08,431
serviceworker it didn't hook syn to any

02:57:06,391 --> 02:57:10,860
fetch calls that the browser makes and

02:57:08,431 --> 02:57:13,460
uses the cache API that the server

02:57:10,860 --> 02:57:13,460
worker has access to

02:57:14,450 --> 02:57:19,410
um cache digest and rather than

02:57:17,370 --> 02:57:20,910
including it into a an HTP to frame it

02:57:19,410 --> 02:57:22,920
just sticks it into a header or in a

02:57:20,910 --> 02:57:24,660
cookie and passes it to a server your

02:57:22,920 --> 02:57:27,391
server processes this and so this

02:57:24,660 --> 02:57:28,650
requires a lot more like setup and a lot

02:57:27,391 --> 02:57:30,420
more infrastructure a little bit I guess

02:57:28,650 --> 02:57:32,490
but it doesn't require browser native

02:57:30,420 --> 02:57:34,290
support and it works great and another

02:57:32,490 --> 02:57:36,030
way of doing this was to do this on the

02:57:34,290 --> 02:57:37,470
server your server kind of calculates

02:57:36,030 --> 02:57:39,540
the digest based on what it has

02:57:37,470 --> 02:57:41,521
previously sent and this is being used

02:57:39,540 --> 02:57:43,410
now by this thing that I'm not supposed

02:57:41,521 --> 02:57:44,690
to like really mentioned publicly but

02:57:43,410 --> 02:57:47,311
it's open and public's or whatever

02:57:44,690 --> 02:57:50,460
there's a project under a certain

02:57:47,311 --> 02:57:53,040
internet search company that is supposed

02:57:50,460 --> 02:57:56,340
to like give you automatic push support

02:57:53,040 --> 02:57:59,851
for FASTA file and maybe general in

02:57:56,340 --> 02:58:03,210
general and this basically uses the

02:57:59,851 --> 02:58:04,830
server to generate the cache digest the

02:58:03,210 --> 02:58:06,300
downside to that is that the server

02:58:04,830 --> 02:58:08,990
doesn't know when something drops from

02:58:06,300 --> 02:58:12,900
the cache and that's a big downside so

02:58:08,990 --> 02:58:14,280
then you might have false negatives or

02:58:12,900 --> 02:58:16,110
false positives depending how you look

02:58:14,280 --> 02:58:18,960
at it but basically it could be not

02:58:16,110 --> 02:58:21,061
pushing things that are no longer

02:58:18,960 --> 02:58:23,160
available in the browser's cache and

02:58:21,061 --> 02:58:25,830
then just the client has to make those

02:58:23,160 --> 02:58:27,090
requests anyway and so there's there's

02:58:25,830 --> 02:58:28,950
downsides to all these things until it

02:58:27,090 --> 02:58:31,380
really gets into the browser it's always

02:58:28,950 --> 02:58:34,980
going to be a bit scrappy and you know

02:58:31,380 --> 02:58:35,940
hacky but it already solves like a huge

02:58:34,980 --> 02:58:38,190
amount of the problems that you have

02:58:35,940 --> 02:58:42,271
with bundling huge thousands or hundreds

02:58:38,190 --> 02:58:44,370
or hundreds or thousands of assets so

02:58:42,271 --> 02:58:46,170
cache digests it's a really cool

02:58:44,370 --> 02:58:47,820
solution and it's sort of experimental

02:58:46,170 --> 02:58:50,580
thing but if you want to set it up look

02:58:47,820 --> 02:58:52,950
at the serviceworker it's on my npm and

02:58:50,580 --> 02:58:57,990
all that i've written blog posts and

02:58:52,950 --> 02:58:59,700
articles about it it's really good so

02:58:57,990 --> 02:59:01,170
yeah we've got the two strategies you

02:58:59,700 --> 02:59:03,000
can either create a manifest for like

02:59:01,170 --> 02:59:04,170
what do you want to send personally I've

02:59:03,000 --> 02:59:06,420
been going with this manifest approach

02:59:04,170 --> 02:59:08,970
mostly the the tracking kind of model

02:59:06,420 --> 02:59:10,650
was introduced by jetty like this java

02:59:08,970 --> 02:59:12,840
application server like many years ago

02:59:10,650 --> 02:59:16,410
back back in the SPDY the speedy days

02:59:12,840 --> 02:59:18,601
before HTTP 2 or standardized so the

02:59:16,410 --> 02:59:20,130
idea is with with the automatic tracking

02:59:18,601 --> 02:59:22,080
thing is that it automatically generates

02:59:20,130 --> 02:59:23,311
beta based on statistical model when you

02:59:22,080 --> 02:59:24,990
get a request you send a couple

02:59:23,311 --> 02:59:26,670
responses and you say ok typically I get

02:59:24,990 --> 02:59:28,319
these responses sent to this request

02:59:26,670 --> 02:59:30,479
and after a couple of users generally

02:59:28,319 --> 02:59:32,819
get a pattern and from then on maybe

02:59:30,479 --> 02:59:34,740
like you start using that probability to

02:59:32,819 --> 02:59:36,810
send out all of those push streams every

02:59:34,740 --> 02:59:38,189
single time and you can combine that

02:59:36,810 --> 02:59:41,399
with a cache digest and get a really

02:59:38,189 --> 02:59:44,700
good approximation of you know close to

02:59:41,399 --> 02:59:46,530
perfect automatic push support the

02:59:44,700 --> 02:59:48,870
manifest is basically you use like a

02:59:46,530 --> 02:59:50,430
build tool or a manual can evoke and

02:59:48,870 --> 02:59:52,770
configure it is to say if I'm serving

02:59:50,430 --> 02:59:55,170
this HTML file I need this dependency

02:59:52,770 --> 02:59:57,479
and if I'm serving this CSS file it's

02:59:55,170 --> 02:59:59,160
including this plant and/or this image

02:59:57,479 --> 03:00:01,800
and so a build tool could build a

02:59:59,160 --> 03:00:03,420
dependency tree and generate a nice

03:00:01,800 --> 03:00:05,670
manifest that your server or your CDN

03:00:03,420 --> 03:00:08,010
edge could then use to push the correct

03:00:05,670 --> 03:00:10,470
assets I've built a tool that does that

03:00:08,010 --> 03:00:12,870
I haven't built the defensive tracer but

03:00:10,470 --> 03:00:16,080
I've built a tool that uses manifests as

03:00:12,870 --> 03:00:18,630
a concept and I found it to be quite

03:00:16,080 --> 03:00:19,680
effective when you previously in the

03:00:18,630 --> 03:00:22,770
good old days when we could still load

03:00:19,680 --> 03:00:25,319
co purchased it would actually push the

03:00:22,770 --> 03:00:28,410
various assets I'll show you how that's

03:00:25,319 --> 03:00:31,220
actually has been set up I don't know

03:00:28,410 --> 03:00:31,220
where the tab is here

03:00:31,740 --> 03:00:38,170
so a very simple configuration that we

03:00:34,480 --> 03:00:41,800
did for ku PJs was to say the manifest

03:00:38,170 --> 03:00:43,271
includes a single rule where the blob

03:00:41,800 --> 03:00:45,550
which is sort of like what was being

03:00:43,271 --> 03:00:48,790
requested if it matches any HTML file

03:00:45,550 --> 03:00:50,350
then you push the favicon and any asset

03:00:48,790 --> 03:00:52,240
that match these images CSS and

03:00:50,350 --> 03:00:53,561
JavaScript so it's a very simple rule

03:00:52,240 --> 03:00:55,240
that just pretty much pushes all the

03:00:53,561 --> 03:00:58,300
assets that matter to the HTML page it's

03:00:55,240 --> 03:01:01,720
a very simple page also so you might

03:00:58,300 --> 03:01:04,240
have more like you know slightly more

03:01:01,720 --> 03:01:06,670
complex pages there's a concept of code

03:01:04,240 --> 03:01:10,210
splitting in like some modern build

03:01:06,670 --> 03:01:13,150
tools this is effectively the same thing

03:01:10,210 --> 03:01:14,320
but with server push so you could say I

03:01:13,150 --> 03:01:16,420
have an I have an entry point for

03:01:14,320 --> 03:01:18,521
index.html where I need to push these

03:01:16,420 --> 03:01:20,200
things and have an entry point for app

03:01:18,521 --> 03:01:22,180
that HTML where I push these things and

03:01:20,200 --> 03:01:24,190
in this case the this is this this

03:01:22,180 --> 03:01:26,320
website has a landing page that's a very

03:01:24,190 --> 03:01:27,820
simple fast loading web page and it has

03:01:26,320 --> 03:01:30,280
a dashboard which is like a single page

03:01:27,820 --> 03:01:32,290
app and I can put these with two simple

03:01:30,280 --> 03:01:35,080
rules I can push all the correct assets

03:01:32,290 --> 03:01:36,670
automatically um the way this manifest

03:01:35,080 --> 03:01:39,880
works is not very well documented right

03:01:36,670 --> 03:01:43,090
now no sorry sorry to say we're working

03:01:39,880 --> 03:01:45,521
on that and this is this is one way of

03:01:43,090 --> 03:01:47,680
basically making server push very usable

03:01:45,521 --> 03:01:49,600
rather than having to hard code all of

03:01:47,680 --> 03:01:51,880
the you know streams or push and push

03:01:49,600 --> 03:01:53,950
stream and this is a really convenient

03:01:51,880 --> 03:01:55,510
way and I'm I'm going to be exposing

03:01:53,950 --> 03:01:56,920
this as a middleware that you can use

03:01:55,510 --> 03:02:00,340
with faster fire or anything else as

03:01:56,920 --> 03:02:02,200
well currently this is available in the

03:02:00,340 --> 03:02:03,340
entire server project but the you know

03:02:02,200 --> 03:02:04,780
the pain point there is that you need to

03:02:03,340 --> 03:02:07,990
actually use this server it only goes

03:02:04,780 --> 03:02:12,220
static files and for static hosting it's

03:02:07,990 --> 03:02:13,811
great for static hosting it's very

03:02:12,220 --> 03:02:15,070
convenient but I want to make it more

03:02:13,811 --> 03:02:16,540
available to like anyone who can just

03:02:15,070 --> 03:02:17,440
integrate this into their own web

03:02:16,540 --> 03:02:19,030
application I think they'll be more

03:02:17,440 --> 03:02:21,940
useful this is so far been more of an

03:02:19,030 --> 03:02:25,830
experiment so okay here this is

03:02:21,940 --> 03:02:27,790
basically exercise we're kind of like

03:02:25,830 --> 03:02:29,320
we've kind of like talked about this now

03:02:27,790 --> 03:02:33,010
if you want to do this exercise

03:02:29,320 --> 03:02:35,440
feel free to set it all up the

03:02:33,010 --> 03:02:37,420
instructions are right there but let's

03:02:35,440 --> 03:02:40,780
see oh one thing I should point out this

03:02:37,420 --> 03:02:42,370
is kind of a annoying gotcha

03:02:40,780 --> 03:02:45,780
that I that I thought would save you

03:02:42,370 --> 03:02:48,160
some time if you encounter it this is a

03:02:45,780 --> 03:02:52,141
maybe not so valid HTML page

03:02:48,160 --> 03:02:54,940
but regardless a script tag type module

03:02:52,141 --> 03:02:59,080
this is how you can do es modules in the

03:02:54,940 --> 03:03:02,561
browser it works cross-origin equals

03:02:59,080 --> 03:03:05,500
used credentials so if you do not put

03:03:02,561 --> 03:03:07,150
this use credentials thing your browser

03:03:05,500 --> 03:03:08,860
will still make an extra request for the

03:03:07,150 --> 03:03:10,450
asset you'll be pushing the certs are

03:03:08,860 --> 03:03:12,641
really pushing the asset the browser

03:03:10,450 --> 03:03:13,750
still makes an extra request it's this

03:03:12,641 --> 03:03:16,511
annoying little thing that you have to

03:03:13,750 --> 03:03:17,860
do on the initial script tag all that

03:03:16,511 --> 03:03:20,230
all the dependencies and everything else

03:03:17,860 --> 03:03:21,761
doesn't matter anymore once once the

03:03:20,230 --> 03:03:25,840
original entry point has that

03:03:21,761 --> 03:03:27,820
credentials cross-origin attribute so

03:03:25,840 --> 03:03:31,240
yeah because otherwise you'll find that

03:03:27,820 --> 03:03:32,351
this is quite weird to deal with let me

03:03:31,240 --> 03:03:36,271
show a little project that actually uses

03:03:32,351 --> 03:03:42,490
this this is - okay this is -

03:03:36,271 --> 03:03:46,570
manufactured so let me skip over this

03:03:42,490 --> 03:03:51,490
for now I'll show the actual website

03:03:46,570 --> 03:03:57,960
that uses it so my goal here was to use

03:03:51,490 --> 03:03:57,960
server push get a water please

03:04:00,250 --> 03:04:05,390
my goal was to use standards as many as

03:04:03,380 --> 03:04:08,060
much as possible so I'm using server

03:04:05,390 --> 03:04:09,859
push for bundling no build tools that

03:04:08,060 --> 03:04:12,460
are really doing anything substantial

03:04:09,859 --> 03:04:12,460
thank you very much

03:04:13,510 --> 03:04:15,569
you

03:09:15,570 --> 03:09:19,620
yeah so I've got a fallback for 200

03:09:18,480 --> 03:09:23,340
response that just goes through my

03:09:19,620 --> 03:09:25,200
client-side router and my manifest like

03:09:23,340 --> 03:09:27,870
I showed before it has an index for the

03:09:25,200 --> 03:09:29,640
static homepage and then the app which

03:09:27,870 --> 03:09:32,730
is the product if that gets served then

03:09:29,640 --> 03:09:36,960
it pushes all of the the web apps assets

03:09:32,730 --> 03:09:38,850
styles Java scripts images fonts and ID

03:09:36,960 --> 03:09:41,010
and I can exclude things like source

03:09:38,850 --> 03:09:43,290
maps because when I'm serving the app to

03:09:41,010 --> 03:09:45,090
a normal browser like I generate the

03:09:43,290 --> 03:09:46,650
source maps on the server so when I open

03:09:45,090 --> 03:09:48,480
up my inspector the inspector will load

03:09:46,650 --> 03:09:49,980
them but other users never need to

03:09:48,480 --> 03:09:51,450
either download the source map so we

03:09:49,980 --> 03:09:53,790
wasted bandwidth so I just exclude them

03:09:51,450 --> 03:09:55,500
from the server push their otherwise

03:09:53,790 --> 03:09:57,060
because I'm just using a simple wildcard

03:09:55,500 --> 03:10:03,660
it would include them so I have to

03:09:57,060 --> 03:10:07,740
explicitly exclude them here now I mean

03:10:03,660 --> 03:10:10,950
this is just like a simple single page

03:10:07,740 --> 03:10:13,410
app where's my OK in my entry point app

03:10:10,950 --> 03:10:15,990
that HTML and like I said I have to do

03:10:13,410 --> 03:10:18,590
this type module cross-origin News

03:10:15,990 --> 03:10:20,690
credentials so I've got an entry point

03:10:18,590 --> 03:10:26,160
app GS

03:10:20,690 --> 03:10:28,110
what I said is okay and then from here

03:10:26,160 --> 03:10:30,030
I'm just using import so and this is all

03:10:28,110 --> 03:10:33,060
like not transpiled this works in the in

03:10:30,030 --> 03:10:35,670
the browser today I've got a little

03:10:33,060 --> 03:10:37,560
client-side router that I'm a simple

03:10:35,670 --> 03:10:40,340
thing that like a couple dozen lines of

03:10:37,560 --> 03:10:43,080
code that just does some nice routing

03:10:40,340 --> 03:10:47,010
you but you could use your react routers

03:10:43,080 --> 03:10:47,460
or what have you here I'm so for each of

03:10:47,010 --> 03:10:49,290
these routes

03:10:47,460 --> 03:10:52,290
I'm instantiate in a custom element by

03:10:49,290 --> 03:10:53,670
its tag name and these elements have

03:10:52,290 --> 03:10:55,740
been defined by their respective

03:10:53,670 --> 03:10:58,380
component files which are just

03:10:55,740 --> 03:11:01,040
JavaScript files that define like for

03:10:58,380 --> 03:11:06,050
instance the login thing that we saw

03:11:01,040 --> 03:11:09,420
worst so that's coming from

03:11:06,050 --> 03:11:11,880
authentication login so the javascript

03:11:09,420 --> 03:11:13,890
file authentication login as a template

03:11:11,880 --> 03:11:15,060
element or extends in this template

03:11:13,890 --> 03:11:17,910
element which is an element I just like

03:11:15,060 --> 03:11:20,490
loading some HTML from its own attribute

03:11:17,910 --> 03:11:22,650
here and then you start setting up your

03:11:20,490 --> 03:11:24,570
callbacks and this is this is your web

03:11:22,650 --> 03:11:26,930
components custom element style of

03:11:24,570 --> 03:11:28,580
development that that you know I've been

03:11:26,930 --> 03:11:29,859
working with so there's no JSX it's a

03:11:28,580 --> 03:11:31,699
little bit more for both it's all Dom

03:11:29,859 --> 03:11:34,010
but it's it works its high-performance

03:11:31,699 --> 03:11:37,699
it works right now it works very well in

03:11:34,010 --> 03:11:39,199
Chrome and Safari Firefox is still

03:11:37,699 --> 03:11:43,580
lagging a little bit on web component

03:11:39,199 --> 03:11:45,979
support but I know I feel like that'll

03:11:43,580 --> 03:11:48,140
just catch up and I'm building this not

03:11:45,979 --> 03:11:49,880
for like use right now I'm not building

03:11:48,140 --> 03:11:50,750
this for legacy users I think that my

03:11:49,880 --> 03:11:52,699
target audience is people were

03:11:50,750 --> 03:11:54,949
interested in server push on HTTP to are

03:11:52,699 --> 03:11:57,319
probably people are using like state of

03:11:54,949 --> 03:11:58,370
the art stuff anyway and if this you

03:11:57,319 --> 03:11:59,960
know it gets adoption and couple of

03:11:58,370 --> 03:12:01,460
months from now chances are that even

03:11:59,960 --> 03:12:02,359
Firefox will come around and implement

03:12:01,460 --> 03:12:04,040
these things and ship those things

03:12:02,359 --> 03:12:07,370
should probably talk to some of the

03:12:04,040 --> 03:12:09,350
Mozilla people here about that but yeah

03:12:07,370 --> 03:12:11,180
like my concern was not so much with

03:12:09,350 --> 03:12:12,410
like full compatibility support but I

03:12:11,180 --> 03:12:14,569
was actually amazed that it worked as

03:12:12,410 --> 03:12:16,250
well as it did when I started developing

03:12:14,569 --> 03:12:18,800
this I was expecting it to be completely

03:12:16,250 --> 03:12:21,080
broken and besides a few minor glitches

03:12:18,800 --> 03:12:23,689
like that credentials thing on the

03:12:21,080 --> 03:12:27,170
script dog I was amazed at today just

03:12:23,689 --> 03:12:30,649
work with full web components with the

03:12:27,170 --> 03:12:32,930
v1 in spec with server push that just

03:12:30,649 --> 03:12:34,670
works really well this like occasionally

03:12:32,930 --> 03:12:36,649
you see like weird behavior when you're

03:12:34,670 --> 03:12:38,660
like command-r reloaded in Safari and

03:12:36,649 --> 03:12:40,279
sometimes it like does a lot of get

03:12:38,660 --> 03:12:42,890
requests and you don't understand why

03:12:40,279 --> 03:12:45,319
and there's some issues here and there

03:12:42,890 --> 03:12:47,630
but like it kind of works and these are

03:12:45,319 --> 03:12:49,310
just bugs that are gonna get fixed by

03:12:47,630 --> 03:12:50,870
other people so my project will

03:12:49,310 --> 03:12:53,390
automatically like will get better for

03:12:50,870 --> 03:12:57,470
free over time all right

03:12:53,390 --> 03:12:58,729
so this is a little project I want to

03:12:57,470 --> 03:13:00,439
show if you're interested in how it work

03:12:58,729 --> 03:13:02,630
just like it's all open source go

03:13:00,439 --> 03:13:04,670
through it um how do you happy to talk

03:13:02,630 --> 03:13:06,109
more about it but um it is the main

03:13:04,670 --> 03:13:08,390
thing I wanted to show I wanted to show

03:13:06,109 --> 03:13:11,210
the this static scene yeah um I'm

03:13:08,390 --> 03:13:14,120
guessing it's down as well since we knew

03:13:11,210 --> 03:13:17,840
from an observer so I've essentially

03:13:14,120 --> 03:13:20,449
turned the server project that I have

03:13:17,840 --> 03:13:21,470
into a SAS if you will it's a free

03:13:20,449 --> 03:13:24,109
platform where you can just deploy

03:13:21,470 --> 03:13:26,210
static sites so i usually i would i

03:13:24,109 --> 03:13:27,680
would use github pages or serge a sage

03:13:26,210 --> 03:13:29,630
or or nettle if i all these amazing

03:13:27,680 --> 03:13:31,460
products i would use those but none of

03:13:29,630 --> 03:13:34,189
them really supported HTTP to server

03:13:31,460 --> 03:13:36,109
push and so i wanted to combine those

03:13:34,189 --> 03:13:39,279
things so I've built with node.js I've

03:13:36,109 --> 03:13:41,110
built a little sass called HTTP to live

03:13:39,279 --> 03:13:43,090
where you can just deploy

03:13:41,110 --> 03:13:45,010
with a manifest and it will just serve

03:13:43,090 --> 03:13:47,561
it would push and my prototype has just

03:13:45,010 --> 03:13:48,880
been one node at my house you know I've

03:13:47,561 --> 03:13:50,710
got a nice gigabit connection and like

03:13:48,880 --> 03:13:52,090
my house is less than a millisecond away

03:13:50,710 --> 03:13:54,550
from the internet exchange in one North

03:13:52,090 --> 03:13:57,220
it's kind of sufficiently fast compared

03:13:54,550 --> 03:13:59,740
to an ec2 instance but effectively right

03:13:57,220 --> 03:14:01,061
now I'm in the process of upgrading all

03:13:59,740 --> 03:14:03,100
that infrastructure from this proof of

03:14:01,061 --> 03:14:05,320
concept into a more production capable

03:14:03,100 --> 03:14:06,990
actual global distributed CDN with

03:14:05,320 --> 03:14:09,100
multiple nodes and pops around the world

03:14:06,990 --> 03:14:10,570
and it's still a free open source

03:14:09,100 --> 03:14:12,730
service it's I think one of the only

03:14:10,570 --> 03:14:15,370
open-source CDNs out there and it's all

03:14:12,730 --> 03:14:16,630
built on nodejs and I'm having a lot of

03:14:15,370 --> 03:14:18,160
fun like actually playing with all this

03:14:16,630 --> 03:14:19,390
technology and making it possible for a

03:14:18,160 --> 03:14:22,450
lot of people to host their sites and

03:14:19,390 --> 03:14:25,540
get all that amazing performance so I

03:14:22,450 --> 03:14:27,730
hope you took away some things from here

03:14:25,540 --> 03:14:30,130
and there thanks for bearing with all

03:14:27,730 --> 03:14:31,840
the compatibility issues and everything

03:14:30,130 --> 03:14:33,010
that we faced this is just the nature of

03:14:31,840 --> 03:14:34,900
doing state-of-the-art stuff used to

03:14:33,010 --> 03:14:36,340
spend a lot of time fixing little things

03:14:34,900 --> 03:14:39,160
and then you go like why does this take

03:14:36,340 --> 03:14:41,040
4 hours to find one little you know a

03:14:39,160 --> 03:14:43,690
little missing dependency or whatever

03:14:41,040 --> 03:14:45,070
that's just how that's sort of how it is

03:14:43,690 --> 03:14:46,600
but if it's really good once you get

03:14:45,070 --> 03:14:48,280
something working that no one Ellen the

03:14:46,600 --> 03:14:50,080
world has done yet and once you start

03:14:48,280 --> 03:14:51,640
contributing to like node.js core like

03:14:50,080 --> 03:14:51,880
like a year ago I wasn't doing any of

03:14:51,640 --> 03:14:55,180
that

03:14:51,880 --> 03:14:59,110
no just stuff oh I only got into it

03:14:55,180 --> 03:15:00,730
about about that time because I saw that

03:14:59,110 --> 03:15:02,650
like people like Matteo and James and

03:15:00,730 --> 03:15:03,880
they were working on this stuff and I

03:15:02,650 --> 03:15:05,320
was like trying to just contribute to it

03:15:03,880 --> 03:15:07,750
I was just writing some tests for it

03:15:05,320 --> 03:15:10,660
you know I saw like some of the api's

03:15:07,750 --> 03:15:12,190
weren't like fully fleshed out yet and I

03:15:10,660 --> 03:15:14,500
just started doing little patches and it

03:15:12,190 --> 03:15:16,990
was just amazing to see the how

03:15:14,500 --> 03:15:19,180
receptive they were to it and the whole

03:15:16,990 --> 03:15:20,650
community of around node.js core has

03:15:19,180 --> 03:15:22,510
been really welcoming to these kind of

03:15:20,650 --> 03:15:24,550
patches so I highly recommend that if

03:15:22,510 --> 03:15:25,540
you see any bugs just going to do a

03:15:24,550 --> 03:15:26,890
little pull request you become a

03:15:25,540 --> 03:15:30,130
contributor to node it's a really good

03:15:26,890 --> 03:15:31,240
feeling to I just that your your your

03:15:30,130 --> 03:15:33,460
little fix goes out to millions of

03:15:31,240 --> 03:15:35,170
people around the world and millions of

03:15:33,460 --> 03:15:36,390
servers are running little patches that

03:15:35,170 --> 03:15:38,710
you submit it it's a really nice

03:15:36,390 --> 03:15:41,440
experience to go through that

03:15:38,710 --> 03:15:44,050
it's anyway I would say go play with

03:15:41,440 --> 03:15:45,670
these things and make awesome things so

03:15:44,050 --> 03:15:48,250
I think that's pretty much the end of my

03:15:45,670 --> 03:16:02,220
talk now thank you very much

03:15:48,250 --> 03:16:02,220
Oh so

03:16:03,250 --> 03:16:07,950

YouTube URL: https://www.youtube.com/watch?v=m0R4joKAPuE


