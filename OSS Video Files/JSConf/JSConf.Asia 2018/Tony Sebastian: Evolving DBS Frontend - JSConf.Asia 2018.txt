Title: Tony Sebastian: Evolving DBS Frontend - JSConf.Asia 2018
Publication date: 2018-02-04
Playlist: JSConf.Asia 2018
Description: 
	Over the last year, DBS frontend architecture for building customer facing applications has evolved to keep pace with the rapid advancement happening in the JavaScript world. Get excited how we approached and executed changes on large enterprise frontend.

Tony is a digital product development leader at DBS Bank in Singapore, with experience in delivering large and complex web and mobile products and infrastructure in the e-commerce, financial services and payments industry.


JSConf.Asia - Capitol Theatre, Singapore - 25 January 2018

Source: https://2018.jsconf.asia/

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:00,180 --> 00:00:12,370
[Music]

00:00:13,110 --> 00:00:22,949
hi guys my name is Tony Sebastian

00:00:17,850 --> 00:00:25,500
I'm from Kerala India and I work in DBS

00:00:22,949 --> 00:00:28,619
in Singapore and responsible for

00:00:25,500 --> 00:00:34,649
delivering digital consumer products in

00:00:28,619 --> 00:00:36,870
web and mobile across regions so here is

00:00:34,649 --> 00:00:39,090
what I am I'll be covering today where I

00:00:36,870 --> 00:00:41,640
will go through the journey that myself

00:00:39,090 --> 00:00:42,989
and my team went through so I'll be

00:00:41,640 --> 00:00:46,170
talking a little bit about the

00:00:42,989 --> 00:00:49,559
challenges and how we set our mission

00:00:46,170 --> 00:00:51,809
and the solution and the results that we

00:00:49,559 --> 00:00:54,570
have observe and we want to highlight

00:00:51,809 --> 00:01:00,680
that hopefully it will be a great

00:00:54,570 --> 00:01:00,680
takeaway for you guys so the challenges

00:01:01,100 --> 00:01:06,900
so in DBS scale we constantly have a

00:01:04,470 --> 00:01:11,520
massive amount of innovative initiative

00:01:06,900 --> 00:01:13,140
and enhancement in our pipeline and the

00:01:11,520 --> 00:01:16,680
second one is we want to reduce

00:01:13,140 --> 00:01:20,369
duplication of work so it's how very

00:01:16,680 --> 00:01:23,220
hard to team to know that when somebody

00:01:20,369 --> 00:01:26,460
have done something and how they can

00:01:23,220 --> 00:01:29,189
reuse those components or anything to

00:01:26,460 --> 00:01:34,310
their products so - we want to reduce

00:01:29,189 --> 00:01:34,310
the duplication of work so even though

00:01:34,340 --> 00:01:40,340
everything starts cymbal initially in a

00:01:37,380 --> 00:01:43,920
product and over the time it grows and

00:01:40,340 --> 00:01:46,590
we wipe you find very hard to handle the

00:01:43,920 --> 00:01:49,530
UI complexity so UI will become very

00:01:46,590 --> 00:01:51,990
complex so how do we handle that so

00:01:49,530 --> 00:01:55,740
these are the couple of challenges that

00:01:51,990 --> 00:01:59,509
we face in DBS particularly for the

00:01:55,740 --> 00:01:59,509
product development

00:02:03,020 --> 00:02:10,800
so given that challenges so my team have

00:02:08,130 --> 00:02:14,640
collaborated with various stakeholders

00:02:10,800 --> 00:02:17,370
like business design and legal

00:02:14,640 --> 00:02:19,710
compliance to address how we can address

00:02:17,370 --> 00:02:22,620
these challenges and we set up our

00:02:19,710 --> 00:02:26,880
mission what what should be our mission

00:02:22,620 --> 00:02:29,280
and one mission is that we have to build

00:02:26,880 --> 00:02:32,070
a modern front-end development framework

00:02:29,280 --> 00:02:35,370
which could accommodate our requirements

00:02:32,070 --> 00:02:37,200
and number two we need to build

00:02:35,370 --> 00:02:39,780
application and component bootstrap

00:02:37,200 --> 00:02:42,959
which could actually eliminate repeating

00:02:39,780 --> 00:02:44,430
work that the developers need to do so

00:02:42,959 --> 00:02:47,670
that they can focus on writing the

00:02:44,430 --> 00:02:51,989
business requirements so and number

00:02:47,670 --> 00:02:55,080
three is build reusable components this

00:02:51,989 --> 00:02:58,140
is to avoid developers to rebuild your

00:02:55,080 --> 00:03:00,750
components which they have built before

00:02:58,140 --> 00:03:02,760
and this would also help the

00:03:00,750 --> 00:03:06,110
organization's to streamline the

00:03:02,760 --> 00:03:06,110
branding across all products

00:03:10,800 --> 00:03:17,460
so with all this layout I would like to

00:03:14,390 --> 00:03:22,590
share what we have built and this might

00:03:17,460 --> 00:03:25,260
be interesting to you and we released or

00:03:22,590 --> 00:03:27,090
we developed a internal product we call

00:03:25,260 --> 00:03:29,070
we call it Falcon

00:03:27,090 --> 00:03:30,770
it's actually a UI framework with an

00:03:29,070 --> 00:03:34,440
opinionated set of tools and

00:03:30,770 --> 00:03:36,750
technologies and best practices to

00:03:34,440 --> 00:03:39,660
enable heavy reuse of the code across

00:03:36,750 --> 00:03:40,920
different team countries within DBS or

00:03:39,660 --> 00:03:44,300
within our company

00:03:40,920 --> 00:03:47,090
and we have built three important

00:03:44,300 --> 00:03:49,650
pillars a one is app structure

00:03:47,090 --> 00:03:53,400
generators and your component library

00:03:49,650 --> 00:03:56,010
and we choose react and redux as the

00:03:53,400 --> 00:03:57,630
base with other libraries and with all

00:03:56,010 --> 00:04:01,620
the capabilities like internalization

00:03:57,630 --> 00:04:06,000
Adobe Analytics a storybook react route

00:04:01,620 --> 00:04:09,540
so this is very opinionated set of tools

00:04:06,000 --> 00:04:15,450
and with the framework so I will just go

00:04:09,540 --> 00:04:19,890
through the the generate the app

00:04:15,450 --> 00:04:23,250
structure in detail so this is how our

00:04:19,890 --> 00:04:26,760
app structure looks like where we have

00:04:23,250 --> 00:04:29,760
the route reducer action saga and test

00:04:26,760 --> 00:04:32,490
where we have the components inside the

00:04:29,760 --> 00:04:36,540
app and inside the components we have

00:04:32,490 --> 00:04:38,670
reducer action saga and test so this is

00:04:36,540 --> 00:04:40,770
how typically a app structure looks like

00:04:38,670 --> 00:04:43,050
and it's standard across all the

00:04:40,770 --> 00:04:45,530
products that we use and developers are

00:04:43,050 --> 00:04:48,270
very comfortable with this structure and

00:04:45,530 --> 00:04:51,890
they can easily identify what they write

00:04:48,270 --> 00:04:55,410
and how they need to document it and

00:04:51,890 --> 00:04:58,500
this is the coolest thing that we built

00:04:55,410 --> 00:05:01,230
the two generators one is AB generator

00:04:58,500 --> 00:05:04,380
and UI generator so app generator is

00:05:01,230 --> 00:05:08,070
basically like you just give a command

00:05:04,380 --> 00:05:10,820
and it will ask you to - it will

00:05:08,070 --> 00:05:13,770
generate in the boilerplate and

00:05:10,820 --> 00:05:15,870
developers can straightaway right start

00:05:13,770 --> 00:05:18,520
writing the business requirements so

00:05:15,870 --> 00:05:22,650
even inside this app

00:05:18,520 --> 00:05:26,490
we have the generator for models routes

00:05:22,650 --> 00:05:29,860
a lot of things there inside there so

00:05:26,490 --> 00:05:32,919
developers are free to use or they can

00:05:29,860 --> 00:05:35,259
create the the structure acutely with

00:05:32,919 --> 00:05:37,479
this generators with this couple of

00:05:35,259 --> 00:05:40,780
commands and the other ECU I generator

00:05:37,479 --> 00:05:43,169
so this is based on the this is for the

00:05:40,780 --> 00:05:45,280
components so we have defined a

00:05:43,169 --> 00:05:47,050
boilerplate for building reusable

00:05:45,280 --> 00:05:50,410
components so it's standard across the

00:05:47,050 --> 00:05:52,509
the products and it's also defined the

00:05:50,410 --> 00:05:57,759
component structures and how you should

00:05:52,509 --> 00:05:59,949
document it so I will just go through

00:05:57,759 --> 00:06:04,150
the the number third is the UI component

00:05:59,949 --> 00:06:07,389
libraries so UI component libraries we

00:06:04,150 --> 00:06:09,069
use storybook internally to build the

00:06:07,389 --> 00:06:11,889
presentation components where it is

00:06:09,069 --> 00:06:14,259
reusable across product projects and

00:06:11,889 --> 00:06:15,940
hardened through open collaboration with

00:06:14,259 --> 00:06:18,340
the design and the business teams and

00:06:15,940 --> 00:06:21,520
it's configurable to suit a range of

00:06:18,340 --> 00:06:25,780
intended use cases and the good thing is

00:06:21,520 --> 00:06:28,240
it's t-mobile and thanks to storybook

00:06:25,780 --> 00:06:32,229
for recognizing us along with other tech

00:06:28,240 --> 00:06:35,400
giants and thanks and I would like to

00:06:32,229 --> 00:06:38,320
just present like what how does our

00:06:35,400 --> 00:06:41,919
component libraries looks like so these

00:06:38,320 --> 00:06:44,370
are the couple of the component

00:06:41,919 --> 00:06:46,840
libraries that we use in channel II and

00:06:44,370 --> 00:06:49,479
we have the libraries for the internet

00:06:46,840 --> 00:06:51,630
banking your forms and everything is

00:06:49,479 --> 00:06:56,409
documented well so that Bella preserve

00:06:51,630 --> 00:06:58,810
this can easily use this modules in

00:06:56,409 --> 00:07:03,159
their products and we use the semantic

00:06:58,810 --> 00:07:05,349
version to upgrade each libraries but

00:07:03,159 --> 00:07:09,880
how we achieve all these things and how

00:07:05,349 --> 00:07:13,330
we implemented this in our products so

00:07:09,880 --> 00:07:16,000
that's a challenging part but this this

00:07:13,330 --> 00:07:19,030
is the the thing that we want to also

00:07:16,000 --> 00:07:24,009
highlight and share principles that we

00:07:19,030 --> 00:07:25,750
follow so number one is no reinvent so

00:07:24,009 --> 00:07:27,479
given that all the production like ready

00:07:25,750 --> 00:07:30,639
libraries are built by the community

00:07:27,479 --> 00:07:33,220
there is no benefit to build by our own

00:07:30,639 --> 00:07:36,400
so in-house library

00:07:33,220 --> 00:07:39,970
tend not to cover in a fuse cases and we

00:07:36,400 --> 00:07:42,220
find it hard to get up to date so you

00:07:39,970 --> 00:07:45,880
introduce only minimal libraries if

00:07:42,220 --> 00:07:48,250
required and number two reduce choices

00:07:45,880 --> 00:07:50,710
we have too many libraries in the NPM

00:07:48,250 --> 00:07:53,320
and developers often confuse to choose

00:07:50,710 --> 00:07:55,210
the right libraries and these are all

00:07:53,320 --> 00:07:56,170
that all time consuming and not

00:07:55,210 --> 00:07:58,180
productive

00:07:56,170 --> 00:08:00,760
so using this Falcon framework that we

00:07:58,180 --> 00:08:03,670
built the product in term product team

00:08:00,760 --> 00:08:06,630
can focus on building things that brings

00:08:03,670 --> 00:08:09,690
valid to the business and our three

00:08:06,630 --> 00:08:12,790
standard guidelines so we defined

00:08:09,690 --> 00:08:15,120
recommended application layout structure

00:08:12,790 --> 00:08:17,200
components to bring consistent

00:08:15,120 --> 00:08:20,140
development and production environment

00:08:17,200 --> 00:08:22,720
to the product teams based on our data

00:08:20,140 --> 00:08:25,900
we also defined the browser support

00:08:22,720 --> 00:08:28,240
policy for where we want to build our

00:08:25,900 --> 00:08:31,570
product to the trajector customers not

00:08:28,240 --> 00:08:34,360
just to the something that is not

00:08:31,570 --> 00:08:36,940
relevant to a customer and number four

00:08:34,360 --> 00:08:39,640
is the flexible so we were we don't want

00:08:36,940 --> 00:08:42,220
to limit teams potential instead we want

00:08:39,640 --> 00:08:45,640
to encourage team to find a better way

00:08:42,220 --> 00:08:47,320
to improve together also also although

00:08:45,640 --> 00:08:49,330
this contradict with our opinion two

00:08:47,320 --> 00:08:51,370
choices most of the team preferred

00:08:49,330 --> 00:08:57,840
decisions made for them so that they can

00:08:51,370 --> 00:09:01,420
focus on building products so apart

00:08:57,840 --> 00:09:03,790
apart from the benefits so I would like

00:09:01,420 --> 00:09:06,580
to share the results what we have

00:09:03,790 --> 00:09:12,370
observed or what we have got through

00:09:06,580 --> 00:09:14,830
this journey so we and if I'd that there

00:09:12,370 --> 00:09:17,640
is a drastic decrease in time to first

00:09:14,830 --> 00:09:20,620
meaningful pane for product remake and

00:09:17,640 --> 00:09:25,030
the second is we work very closely with

00:09:20,620 --> 00:09:26,500
the design design and the business to

00:09:25,030 --> 00:09:29,410
build the standardize component and

00:09:26,500 --> 00:09:32,740
consistent experience so there's operon

00:09:29,410 --> 00:09:38,530
collaboration and first iterations

00:09:32,740 --> 00:09:40,840
between the the products and last happy

00:09:38,530 --> 00:09:43,520
developers so we value our developers

00:09:40,840 --> 00:09:45,110
and developers feel happy and confirm

00:09:43,520 --> 00:09:48,140
working with the chord base and they

00:09:45,110 --> 00:09:51,050
find it hard easier to add enhancement

00:09:48,140 --> 00:09:54,380
to existing products and also easier

00:09:51,050 --> 00:09:58,760
sprint planning since react is easily

00:09:54,380 --> 00:10:02,210
composable so these are the things that

00:09:58,760 --> 00:10:05,020
work for us just to recap so on this

00:10:02,210 --> 00:10:08,570
digital product transformation to build

00:10:05,020 --> 00:10:10,850
consistent user experience and high

00:10:08,570 --> 00:10:11,990
quality products these are the things

00:10:10,850 --> 00:10:14,630
that work for us

00:10:11,990 --> 00:10:17,920
one is the app structure where it gives

00:10:14,630 --> 00:10:20,390
the developers to develop or start

00:10:17,920 --> 00:10:24,080
onboarding start onboarding the product

00:10:20,390 --> 00:10:26,120
quickly and generators where app

00:10:24,080 --> 00:10:28,430
generator and component charities help

00:10:26,120 --> 00:10:31,060
us to kickstart development and also

00:10:28,430 --> 00:10:33,800
enable us to have faster iteration and

00:10:31,060 --> 00:10:36,410
number three is the UI component library

00:10:33,800 --> 00:10:38,000
with storybook worked well for us for to

00:10:36,410 --> 00:10:39,920
ensure components are seamlessly

00:10:38,000 --> 00:10:43,040
integrated with the products also

00:10:39,920 --> 00:10:45,800
documented for referencing anytime last

00:10:43,040 --> 00:10:48,920
not but least easier unit testing so we

00:10:45,800 --> 00:10:51,020
find it found it very easier to do unit

00:10:48,920 --> 00:10:53,960
testing with set of libraries that we

00:10:51,020 --> 00:10:57,160
choose like relax act or redux saga

00:10:53,960 --> 00:11:04,179
etcetera thank you

00:10:57,160 --> 00:11:04,179

YouTube URL: https://www.youtube.com/watch?v=sltPORiz1Ks


