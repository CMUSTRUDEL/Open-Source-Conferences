Title: "Refactoring CSS Without Losing Your Mind" - Harry Roberts
Publication date: 2016-12-05
Playlist: CSSconf Argentina 2016
Description: 
	Harry Roberts presenting "Refactoring CSS Without Losing Your Mind" at CSSConf Argentina 2016.
Captions: 
	00:00:14,759 --> 00:00:19,509
well good afternoon everyone um

00:00:17,529 --> 00:00:21,369
today's been amazing it's so good to be

00:00:19,509 --> 00:00:24,369
here the quality of the talks has been

00:00:21,369 --> 00:00:25,900
absolutely astounding which puts a lot

00:00:24,369 --> 00:00:29,740
of pressure on my shoulders for the last

00:00:25,900 --> 00:00:31,810
talk yeah it's quite a long talk it's

00:00:29,740 --> 00:00:35,559
quite a lot slide so I'll try not to run

00:00:31,810 --> 00:00:39,339
over refactoring CSS without losing your

00:00:35,559 --> 00:00:41,800
mind quite a scary topic refactoring any

00:00:39,339 --> 00:00:44,079
kind of code kind of scary CSS is

00:00:41,800 --> 00:00:46,149
particularly difficult so in this talk

00:00:44,079 --> 00:00:48,760
we're gonna look at some fairly

00:00:46,149 --> 00:00:50,980
philosophical stuff how do we prove the

00:00:48,760 --> 00:00:52,449
business case for refactoring CSS how do

00:00:50,980 --> 00:00:55,030
we go to our product owners that were

00:00:52,449 --> 00:00:57,910
project managers and get the time to

00:00:55,030 --> 00:00:59,920
refactor stuff what should we refactor

00:00:57,910 --> 00:01:01,440
what do we decide to refactor what can

00:00:59,920 --> 00:01:03,550
we leave alone for a bit longer

00:01:01,440 --> 00:01:04,449
that's gonna be the philosophical stuff

00:01:03,550 --> 00:01:06,850
and then we're gonna move on to some

00:01:04,449 --> 00:01:08,979
fairly practical tips and tricks and

00:01:06,850 --> 00:01:13,479
some weird stuff to help us actually

00:01:08,979 --> 00:01:15,640
refactor our CSS yeah so hello again

00:01:13,479 --> 00:01:17,830
from me it's my first time ever in

00:01:15,640 --> 00:01:20,349
Argentina so obviously my first time

00:01:17,830 --> 00:01:23,920
when Azhar is such a cool city having so

00:01:20,349 --> 00:01:26,500
much fun um I'm Harry I'm from the north

00:01:23,920 --> 00:01:29,890
of England which is probably why I'm

00:01:26,500 --> 00:01:33,190
really hard to understand very specific

00:01:29,890 --> 00:01:36,819
weird accent I am CSS wizardry online

00:01:33,190 --> 00:01:39,550
get Herbeck cetera but my job is I'm a

00:01:36,819 --> 00:01:42,340
consultant front-end architect so I deal

00:01:39,550 --> 00:01:44,530
with CSS architecture uh performance and

00:01:42,340 --> 00:01:46,000
I usually tend to do this at scale I

00:01:44,530 --> 00:01:48,069
tend to work with fairly large companies

00:01:46,000 --> 00:01:49,539
which means bigger code bases more

00:01:48,069 --> 00:01:52,360
developers bigger teams

00:01:49,539 --> 00:01:55,030
long-running projects which also means

00:01:52,360 --> 00:01:56,950
that there's more reason for requirement

00:01:55,030 --> 00:02:00,060
or a necessity to refactor things and

00:01:56,950 --> 00:02:03,239
unfortunately I hate refactoring CSS

00:02:00,060 --> 00:02:06,550
anybody here refactored some CSS before

00:02:03,239 --> 00:02:08,259
yeah most of us keep your hands up hands

00:02:06,550 --> 00:02:11,379
back up keep your hands up if you

00:02:08,259 --> 00:02:13,660
enjoyed that experience yeah exactly I

00:02:11,379 --> 00:02:17,680
don't trust you one person in this room

00:02:13,660 --> 00:02:19,390
enjoys refactoring CSS so yeah it's

00:02:17,680 --> 00:02:21,609
awful it's a horrible job because CSS

00:02:19,390 --> 00:02:23,349
you can't really write tests for it so

00:02:21,609 --> 00:02:24,860
if you modify one thing you don't even

00:02:23,349 --> 00:02:26,480
gonna break everything else

00:02:24,860 --> 00:02:28,550
so hopefully in this talk we'll look at

00:02:26,480 --> 00:02:30,680
some ways of making the refactoring

00:02:28,550 --> 00:02:33,350
process a little bit simpler a little

00:02:30,680 --> 00:02:35,810
bit safer I'm not gonna promise you

00:02:33,350 --> 00:02:39,470
it'll be an enjoyable experience but it

00:02:35,810 --> 00:02:41,390
will at least be a little easier let's

00:02:39,470 --> 00:02:44,120
start off then what do we talk about

00:02:41,390 --> 00:02:46,130
when we talk about refactoring there's a

00:02:44,120 --> 00:02:48,020
really nice definition from a very very

00:02:46,130 --> 00:02:50,330
clever man called Martin Fowler and he

00:02:48,020 --> 00:02:52,370
says that refactoring is the process of

00:02:50,330 --> 00:02:54,230
changing a software system in such a way

00:02:52,370 --> 00:02:56,959
that it does not alter the external

00:02:54,230 --> 00:03:00,080
behavior of the code yet improve the

00:02:56,959 --> 00:03:00,890
internal structure so right away what

00:03:00,080 --> 00:03:02,989
I'm getting from this is that

00:03:00,890 --> 00:03:04,670
refactoring doesn't benefit our users

00:03:02,989 --> 00:03:06,890
it's not for them it's for us it's a

00:03:04,670 --> 00:03:09,739
business decision it's a decision that

00:03:06,890 --> 00:03:11,600
developers product owners they make it

00:03:09,739 --> 00:03:13,940
so that we can have a nicer environment

00:03:11,600 --> 00:03:17,030
to work in so it's not initially for our

00:03:13,940 --> 00:03:20,150
users however I would argue that given

00:03:17,030 --> 00:03:22,130
enough time it will ultimately benefit

00:03:20,150 --> 00:03:23,989
our users because we'll be delivering

00:03:22,130 --> 00:03:25,730
better quality software we'll be

00:03:23,989 --> 00:03:28,640
delivering software with hopefully fewer

00:03:25,730 --> 00:03:30,230
bugs or errors we'll be able to add

00:03:28,640 --> 00:03:31,880
features quicker so we'll be able to

00:03:30,230 --> 00:03:34,340
deliver features to our customers now it

00:03:31,880 --> 00:03:35,780
uses much more quickly so refactoring

00:03:34,340 --> 00:03:38,180
starts off as a business decision that

00:03:35,780 --> 00:03:42,739
ultimately will benefit our users as

00:03:38,180 --> 00:03:45,260
well to my mind and at least for the

00:03:42,739 --> 00:03:47,570
purposes of this talk I consider kind of

00:03:45,260 --> 00:03:49,430
three separate types of refactoring

00:03:47,570 --> 00:03:52,160
there's a kind of as you go refactoring

00:03:49,430 --> 00:03:54,200
which everybody in this room every

00:03:52,160 --> 00:03:56,750
developer in the world should be doing

00:03:54,200 --> 00:03:58,340
this one all the time this is like when

00:03:56,750 --> 00:03:59,959
you need to build a new feature so you

00:03:58,340 --> 00:04:02,150
chilled a prototype you hack it together

00:03:59,959 --> 00:04:03,320
and it works now of course you're not

00:04:02,150 --> 00:04:05,000
going to leave it in that kind of

00:04:03,320 --> 00:04:07,010
condition you would go back and add

00:04:05,000 --> 00:04:09,380
comments you add documentation you dry

00:04:07,010 --> 00:04:11,239
it out you perhaps start using variables

00:04:09,380 --> 00:04:14,630
from the wider project to kind of make

00:04:11,239 --> 00:04:15,860
this code or more lean we should be

00:04:14,630 --> 00:04:17,390
doing this all the time but if we don't

00:04:15,860 --> 00:04:18,919
manage to do this if we don't manage to

00:04:17,390 --> 00:04:21,049
capture everything at this point we

00:04:18,919 --> 00:04:23,419
might end up with refactoring our

00:04:21,049 --> 00:04:25,070
technical debt technical debt I'm

00:04:23,419 --> 00:04:26,060
finding really interesting at the moment

00:04:25,070 --> 00:04:28,000
because I'm working with clients who

00:04:26,060 --> 00:04:30,380
have got quite a lot of it

00:04:28,000 --> 00:04:33,200
technical debt is kind of when you do

00:04:30,380 --> 00:04:35,300
what you can right now when you do you

00:04:33,200 --> 00:04:36,990
build a feature given a certain of

00:04:35,300 --> 00:04:39,180
limited time on knowledge

00:04:36,990 --> 00:04:40,560
information but you know that you need

00:04:39,180 --> 00:04:42,180
to go back and tidy up later so you

00:04:40,560 --> 00:04:44,100
built something with all the available

00:04:42,180 --> 00:04:46,950
information but you need to go back in

00:04:44,100 --> 00:04:48,750
future and tidy things up if we don't

00:04:46,950 --> 00:04:49,710
capture things at this point we end up

00:04:48,750 --> 00:04:51,240
getting on to the third type of

00:04:49,710 --> 00:04:53,790
refactoring which is actually more like

00:04:51,240 --> 00:04:55,740
a rewrite this is where you've ignored

00:04:53,790 --> 00:04:57,600
your technical debt for long enough that

00:04:55,740 --> 00:04:59,340
you can't refactor anymore it's too

00:04:57,600 --> 00:05:02,190
messy to start refactoring it's going to

00:04:59,340 --> 00:05:03,110
be cheaper to actually just tear it all

00:05:02,190 --> 00:05:06,500
down and start again

00:05:03,110 --> 00:05:09,270
anyone ended up in this situation before

00:05:06,500 --> 00:05:11,220
okay a few of us yeah it happens many on

00:05:09,270 --> 00:05:13,260
big projects and the rewrite takes two

00:05:11,220 --> 00:05:14,910
years and it's still not as good as when

00:05:13,260 --> 00:05:17,460
you started and it all goes wrong and

00:05:14,910 --> 00:05:21,600
it's a very expensive error-prone ever

00:05:17,460 --> 00:05:23,790
of pronet process unfortunately as you

00:05:21,600 --> 00:05:26,610
get further into a project the type of

00:05:23,790 --> 00:05:28,050
refactoring is likely to change right

00:05:26,610 --> 00:05:29,760
the longer you spend on a project the

00:05:28,050 --> 00:05:31,320
type of refactoring you need to do is

00:05:29,760 --> 00:05:33,420
probably going to change and

00:05:31,320 --> 00:05:36,390
unfortunately it gets progressively more

00:05:33,420 --> 00:05:39,270
expensive more costly it becomes a much

00:05:36,390 --> 00:05:42,060
bigger operation this talk is mainly

00:05:39,270 --> 00:05:44,640
going to discuss technical debt and the

00:05:42,060 --> 00:05:46,320
rewrites and overhauls it's all going

00:05:44,640 --> 00:05:48,660
it's also going to discuss that kind of

00:05:46,320 --> 00:05:50,190
bit in the middle how can we capture a

00:05:48,660 --> 00:05:51,900
technical debt before it becomes a

00:05:50,190 --> 00:05:54,510
rewrite or how do we rewrite something

00:05:51,900 --> 00:05:56,280
before it becomes a complete overhaul so

00:05:54,510 --> 00:06:00,570
we'll look at that kind of thin seam in

00:05:56,280 --> 00:06:02,610
the middle a quick aside on technical

00:06:00,570 --> 00:06:04,680
Batman have you all heard of the phrase

00:06:02,610 --> 00:06:07,470
technical debt you heard of technical

00:06:04,680 --> 00:06:08,880
debt oh cool half of us maybe for

00:06:07,470 --> 00:06:11,670
anybody who hasn't heard the phrase

00:06:08,880 --> 00:06:13,170
technical debt the URL on this slide is

00:06:11,670 --> 00:06:14,910
definitely worth checking out I will

00:06:13,170 --> 00:06:17,820
share the slides at the end of the talk

00:06:14,910 --> 00:06:20,610
but a technical debt is when you decide

00:06:17,820 --> 00:06:21,840
to do something right now to kind of

00:06:20,610 --> 00:06:23,970
take a shortcut so you do something

00:06:21,840 --> 00:06:25,530
right now to take a shortcut but you

00:06:23,970 --> 00:06:27,780
have to understand that that's like

00:06:25,530 --> 00:06:29,670
taking a loan that shortcut isn't free

00:06:27,780 --> 00:06:31,590
that shortcut will cost you something in

00:06:29,670 --> 00:06:34,430
the future except it won't just cost you

00:06:31,590 --> 00:06:37,650
the shortcut it will incur some interest

00:06:34,430 --> 00:06:39,750
probably the quickest most succinctly of

00:06:37,650 --> 00:06:42,050
technical debt is when you're working on

00:06:39,750 --> 00:06:44,550
a product and there's a problem and

00:06:42,050 --> 00:06:48,330
using important we'll fix that problem

00:06:44,550 --> 00:06:50,490
now typing important takes about four

00:06:48,330 --> 00:06:52,650
seconds right so four four second

00:06:50,490 --> 00:06:55,080
you can fix a problem that's really

00:06:52,650 --> 00:06:56,520
cheap but that's alone right that is

00:06:55,080 --> 00:06:57,990
technical debt because fixing the

00:06:56,520 --> 00:06:59,759
important in six months time isn't going

00:06:57,990 --> 00:07:02,759
to take four seconds it's gonna take you

00:06:59,759 --> 00:07:04,710
four days so four seconds now is

00:07:02,759 --> 00:07:06,539
technical debt you're getting a loan

00:07:04,710 --> 00:07:09,090
you're fixing the problem immediately

00:07:06,539 --> 00:07:13,009
but the repayment of four days in six

00:07:09,090 --> 00:07:15,300
months time is what technical debt is

00:07:13,009 --> 00:07:17,370
it's going to happen though technical

00:07:15,300 --> 00:07:19,139
that happens on nearly every project you

00:07:17,370 --> 00:07:20,819
work on you will need to get a release

00:07:19,139 --> 00:07:22,410
out of the door you'll have a bug that

00:07:20,819 --> 00:07:24,659
is on the live site you'll have to do

00:07:22,410 --> 00:07:26,460
something right now to get a quick win

00:07:24,659 --> 00:07:29,300
so technical debt is guaranteed to

00:07:26,460 --> 00:07:31,620
happen on any project of sufficient size

00:07:29,300 --> 00:07:33,210
the thing is we need to make sure we

00:07:31,620 --> 00:07:35,190
keep up our repayment so if you ignore

00:07:33,210 --> 00:07:36,419
the debt you end up going bankrupt your

00:07:35,190 --> 00:07:38,370
interest increases you end up going

00:07:36,419 --> 00:07:42,000
bankrupt so what you need to do is

00:07:38,370 --> 00:07:43,560
schedule in constant bug fixing every

00:07:42,000 --> 00:07:45,720
sprint you have you need to guarantee

00:07:43,560 --> 00:07:47,849
that you can get some time to fix bugs

00:07:45,720 --> 00:07:50,789
tidy up the codebase and sort of fix up

00:07:47,849 --> 00:07:52,800
your technical debt but that means

00:07:50,789 --> 00:07:54,810
bigger problems that brings problems you

00:07:52,800 --> 00:07:56,550
know what do we refactor when do we do

00:07:54,810 --> 00:07:58,740
it how long can we wait before we

00:07:56,550 --> 00:07:59,759
refactor something now the easy answer

00:07:58,740 --> 00:08:03,560
here is that we should always be

00:07:59,759 --> 00:08:05,669
refactoring something but in more detail

00:08:03,560 --> 00:08:09,960
we should refactor things if the

00:08:05,669 --> 00:08:11,550
projected cost of maintenance or the

00:08:09,960 --> 00:08:13,789
projected cost of maintaining a feature

00:08:11,550 --> 00:08:16,560
is higher than refactoring it

00:08:13,789 --> 00:08:18,300
the problem is tech debt and refactoring

00:08:16,560 --> 00:08:20,099
is that you have to be very good at your

00:08:18,300 --> 00:08:22,770
estimates and developers hate giving

00:08:20,099 --> 00:08:24,060
estimates you have to project the cost

00:08:22,770 --> 00:08:26,280
of maintaining a feature and if you

00:08:24,060 --> 00:08:28,409
think it's going to cost you 20 weeks

00:08:26,280 --> 00:08:30,750
over the next four years to maintain

00:08:28,409 --> 00:08:33,209
something but maybe 15 weeks to rewrite

00:08:30,750 --> 00:08:34,649
it those are the kind of numbers you

00:08:33,209 --> 00:08:38,099
have to work out and take back to the

00:08:34,649 --> 00:08:39,599
business you should only refactor things

00:08:38,099 --> 00:08:41,909
if the current version is actually

00:08:39,599 --> 00:08:44,790
slowing you down if the current codebase

00:08:41,909 --> 00:08:46,740
isn't actually causing any problems even

00:08:44,790 --> 00:08:49,110
if it might be ugly like their update if

00:08:46,740 --> 00:08:50,040
if it's not actually slowing you down or

00:08:49,110 --> 00:08:51,899
causing you problems you probably

00:08:50,040 --> 00:08:54,329
shouldn't refactor it you try and leave

00:08:51,899 --> 00:08:55,890
alone a little bit longer and from the

00:08:54,329 --> 00:08:57,540
flip side you should refactor something

00:08:55,890 --> 00:08:58,160
if the new version gives you actual

00:08:57,540 --> 00:09:00,170
actual

00:08:58,160 --> 00:09:02,029
tangible benefits if the new version is

00:09:00,170 --> 00:09:02,750
going to be measurably better than the

00:09:02,029 --> 00:09:06,290
old version

00:09:02,750 --> 00:09:08,120
perhaps you should refactor a minor kind

00:09:06,290 --> 00:09:10,129
of change in naming convention might not

00:09:08,120 --> 00:09:11,870
change the way you work upgrading to a

00:09:10,129 --> 00:09:13,579
new version of a framework might have

00:09:11,870 --> 00:09:17,240
huge impact so you need to make sure

00:09:13,579 --> 00:09:19,279
you've got measurable benefit looking at

00:09:17,240 --> 00:09:20,949
an example of kind of proving the

00:09:19,279 --> 00:09:23,449
business case or going to the business

00:09:20,949 --> 00:09:27,259
let's imagine we've got a project right

00:09:23,449 --> 00:09:28,910
now and a client rings up and they want

00:09:27,259 --> 00:09:30,649
to add a theme they want to add a theme

00:09:28,910 --> 00:09:32,600
to this website and the site was never

00:09:30,649 --> 00:09:33,980
built to have theming involved at all on

00:09:32,600 --> 00:09:35,600
the left hand side we've got the

00:09:33,980 --> 00:09:37,610
existing code base and the cost of

00:09:35,600 --> 00:09:40,910
hacking a theme into the existing code

00:09:37,610 --> 00:09:42,860
base might be two days then in a month's

00:09:40,910 --> 00:09:44,540
time another client rings up and says oh

00:09:42,860 --> 00:09:46,220
we saw that they had a theme and we want

00:09:44,540 --> 00:09:47,689
that and you've said to your product

00:09:46,220 --> 00:09:49,069
owner well it'll take two days again

00:09:47,689 --> 00:09:51,529
we'll hack a theme in and just make it

00:09:49,069 --> 00:09:53,540
work out across two days and three

00:09:51,529 --> 00:09:55,399
months time maybe hacking it in costs

00:09:53,540 --> 00:09:56,870
two and a half days because we created

00:09:55,399 --> 00:09:59,240
enough mess that it's actually taking

00:09:56,870 --> 00:10:01,189
progressively longer by the time we've

00:09:59,240 --> 00:10:02,630
added these sort of themes these four

00:10:01,189 --> 00:10:06,199
themes they overall cost within nine

00:10:02,630 --> 00:10:09,110
days the way of making a business case

00:10:06,199 --> 00:10:10,490
for refactoring or kind of deciding when

00:10:09,110 --> 00:10:12,709
to refactor is if you can make the

00:10:10,490 --> 00:10:15,199
projections that you can make it cheaper

00:10:12,709 --> 00:10:17,329
in the long run if we were to add the

00:10:15,199 --> 00:10:19,160
theme and refactor the CSS to have

00:10:17,329 --> 00:10:21,199
theming involved as a first-class

00:10:19,160 --> 00:10:22,550
citizen it might cost us seven days

00:10:21,199 --> 00:10:24,769
which to the business looks more

00:10:22,550 --> 00:10:26,600
expensive they've got an option you can

00:10:24,769 --> 00:10:28,339
spend seven days on it or two days on it

00:10:26,600 --> 00:10:30,529
the business wants to pick the two day

00:10:28,339 --> 00:10:31,819
version but what we can see is if we

00:10:30,529 --> 00:10:33,259
actually build theming in as a

00:10:31,819 --> 00:10:35,269
first-class citizen it might cost us a

00:10:33,259 --> 00:10:37,819
quarter of a day every single time it

00:10:35,269 --> 00:10:40,100
might become really really quick to add

00:10:37,819 --> 00:10:41,870
that feature so in the long run

00:10:40,100 --> 00:10:43,459
refactoring now actually works out

00:10:41,870 --> 00:10:45,920
cheaper but you don't get that return on

00:10:43,459 --> 00:10:48,470
investment until the features being

00:10:45,920 --> 00:10:49,519
asked for a number of times so if you

00:10:48,470 --> 00:10:51,800
think there's something might be asked

00:10:49,519 --> 00:10:53,089
for just once perhaps don't refactor if

00:10:51,800 --> 00:10:56,180
you think something might get Rieff

00:10:53,089 --> 00:10:59,839
asked for several times refactor and

00:10:56,180 --> 00:11:01,279
invest the opposite of debt is

00:10:59,839 --> 00:11:02,449
investment so you can have technical

00:11:01,279 --> 00:11:04,610
investment where you actually invest

00:11:02,449 --> 00:11:06,110
more time than you need right now in

00:11:04,610 --> 00:11:08,300
order to make things very very quick in

00:11:06,110 --> 00:11:11,270
the future

00:11:08,300 --> 00:11:12,740
okay when shouldn't we refactor this is

00:11:11,270 --> 00:11:15,620
an interesting one I have clients who

00:11:12,740 --> 00:11:17,630
ask me a lot about you know we need to

00:11:15,620 --> 00:11:19,070
refactor this or we want to rewrite this

00:11:17,630 --> 00:11:21,460
part of the project and a lot of the

00:11:19,070 --> 00:11:24,200
time I end up telling them not to bother

00:11:21,460 --> 00:11:26,210
if a part of the project isn't actually

00:11:24,200 --> 00:11:28,310
slowing you down perhaps it didn't need

00:11:26,210 --> 00:11:31,370
refactoring if it's just ugly or nasty

00:11:28,310 --> 00:11:32,060
code or not nice to look at I have to

00:11:31,370 --> 00:11:34,100
leave it alone

00:11:32,060 --> 00:11:37,280
only refactor if it's actually causing

00:11:34,100 --> 00:11:38,900
you problems if it can be ignored or

00:11:37,280 --> 00:11:40,730
avoided this sounds like terrible advice

00:11:38,900 --> 00:11:44,090
now I'm saying out loud but if you can

00:11:40,730 --> 00:11:45,740
ignore it or avoid it do so leave it as

00:11:44,090 --> 00:11:48,560
long as it works just leave it alone for

00:11:45,740 --> 00:11:49,760
as long as you can if you have to work

00:11:48,560 --> 00:11:51,800
with it every single day and it's really

00:11:49,760 --> 00:11:53,870
hard to work with that is causing you a

00:11:51,800 --> 00:11:55,310
problem you need to refactor it I've got

00:11:53,870 --> 00:11:59,480
a couple of examples of when not to reef

00:11:55,310 --> 00:12:01,670
like some specific examples if something

00:11:59,480 --> 00:12:03,830
is gonna be captured by a rewrite later

00:12:01,670 --> 00:12:05,180
on so I've had clients who've said you

00:12:03,830 --> 00:12:06,740
know we're gonna rebuild the entire

00:12:05,180 --> 00:12:09,350
platform next year but we want to

00:12:06,740 --> 00:12:11,060
refactor it now what well why do it

00:12:09,350 --> 00:12:13,310
twice just leave it a bit shitty for a

00:12:11,060 --> 00:12:16,160
year and like you know just rebuild it

00:12:13,310 --> 00:12:18,680
next year so unless you actually need to

00:12:16,160 --> 00:12:21,290
immediately leave it alone refactoring

00:12:18,680 --> 00:12:23,410
is largely a business kind of case right

00:12:21,290 --> 00:12:26,840
and it's cheaper to leave it alone so

00:12:23,410 --> 00:12:28,970
one example um a client asked me we want

00:12:26,840 --> 00:12:32,120
to rewrite all of our CSS onto the BEM

00:12:28,970 --> 00:12:34,580
naming convention now I love them I

00:12:32,120 --> 00:12:36,380
really really love them but I don't

00:12:34,580 --> 00:12:38,420
think taking two weeks out of product

00:12:36,380 --> 00:12:40,400
work to refactor your CSS onto the BEM

00:12:38,420 --> 00:12:43,310
naming convention is going to pay itself

00:12:40,400 --> 00:12:45,050
back very quickly rewrite in your entire

00:12:43,310 --> 00:12:47,030
CSS architecture is a very costly

00:12:45,050 --> 00:12:49,400
refactor it kind of it could potentially

00:12:47,030 --> 00:12:51,290
introduce a lot of bugs I don't think

00:12:49,400 --> 00:12:53,030
that just rewriting your CSS on to a

00:12:51,290 --> 00:12:56,390
certain naming convention is gonna be

00:12:53,030 --> 00:12:57,860
worth perhaps two weeks of your time if

00:12:56,390 --> 00:12:59,390
you disagree or if you can prove that

00:12:57,860 --> 00:13:01,400
you know having a better naming

00:12:59,390 --> 00:13:03,050
convention will speed you up by more

00:13:01,400 --> 00:13:04,730
than two weeks over the life of the

00:13:03,050 --> 00:13:06,170
project and perhaps is the correct thing

00:13:04,730 --> 00:13:07,790
to do but if the numbers don't agree

00:13:06,170 --> 00:13:13,400
with you you need to hold off

00:13:07,790 --> 00:13:15,920
refactoring another example I got a

00:13:13,400 --> 00:13:18,620
client so me we think that code for this

00:13:15,920 --> 00:13:20,030
nav is pretty ugly and I took a look at

00:13:18,620 --> 00:13:20,980
the code and it was pretty ugly it was

00:13:20,030 --> 00:13:24,579
awful

00:13:20,980 --> 00:13:26,709
disgusting um so I said to the client

00:13:24,579 --> 00:13:28,570
well do you actually need to refactor at

00:13:26,709 --> 00:13:31,600
how many times do you actually open up

00:13:28,570 --> 00:13:32,829
the nav like CSS JavaScript APIs you

00:13:31,600 --> 00:13:35,980
know how often do you actually work with

00:13:32,829 --> 00:13:37,810
it and they said well we don't if a user

00:13:35,980 --> 00:13:39,730
adds a new page in the CMS it just

00:13:37,810 --> 00:13:40,959
appears in the page and I said well so

00:13:39,730 --> 00:13:42,399
you don't actually have to edit any of

00:13:40,959 --> 00:13:45,970
this code like no we don't we don't

00:13:42,399 --> 00:13:47,649
really edit it at all okay what problems

00:13:45,970 --> 00:13:49,240
is it causing you right now is it not

00:13:47,649 --> 00:13:51,130
working in certain browsers is it

00:13:49,240 --> 00:13:53,589
inaccessible and like what's accessible

00:13:51,130 --> 00:13:55,540
it works but why spend time and money

00:13:53,589 --> 00:13:57,550
refactoring it leave it alone until you

00:13:55,540 --> 00:13:58,870
need to redesign the nav completely if

00:13:57,550 --> 00:14:00,399
you could ignore parts of the codebase

00:13:58,870 --> 00:14:06,430
to save the time save the money and

00:14:00,399 --> 00:14:07,779
don't refactor them okay right I want to

00:14:06,430 --> 00:14:10,839
talk to you about a concept that I came

00:14:07,779 --> 00:14:13,500
up with earlier this year this concept

00:14:10,839 --> 00:14:17,649
is called the refactoring tunnel a

00:14:13,500 --> 00:14:19,930
refactoring tunnel represents like the

00:14:17,649 --> 00:14:22,630
tunnel itself represents the workload of

00:14:19,930 --> 00:14:24,850
refactoring something if you pick a

00:14:22,630 --> 00:14:27,130
thing a part of your project project to

00:14:24,850 --> 00:14:29,019
refactor you should see that piece of

00:14:27,130 --> 00:14:30,610
work as being a tunnel and on day one

00:14:29,019 --> 00:14:32,740
when you start refactoring you step into

00:14:30,610 --> 00:14:34,000
the tunnel you can't see the end of a

00:14:32,740 --> 00:14:35,769
tunnel you don't know where the light is

00:14:34,000 --> 00:14:38,260
at the end you can see the light where

00:14:35,769 --> 00:14:40,060
you just came in and day two day three

00:14:38,260 --> 00:14:42,730
you progress further into the tunnel now

00:14:40,060 --> 00:14:44,680
the problem is we can pick tunnels that

00:14:42,730 --> 00:14:47,079
are way too long we could pick a tunnel

00:14:44,680 --> 00:14:48,459
on day four we can't see the light at

00:14:47,079 --> 00:14:51,250
the end of the tunnel but we can't see

00:14:48,459 --> 00:14:52,329
the light at the entrance either hasn't

00:14:51,250 --> 00:14:53,860
he only had that before when you've

00:14:52,329 --> 00:14:55,149
started refactoring something like I

00:14:53,860 --> 00:14:56,649
don't know where I am anymore

00:14:55,149 --> 00:14:59,380
I don't know how much more work there is

00:14:56,649 --> 00:15:02,470
to do this I call these refactoring

00:14:59,380 --> 00:15:04,630
tunnels a long refactoring tunnel is

00:15:02,470 --> 00:15:07,089
basically a refactoring project that is

00:15:04,630 --> 00:15:09,699
too big it had too much surface area it

00:15:07,089 --> 00:15:11,079
touched too much of the project and it

00:15:09,699 --> 00:15:13,180
leaves you really confused

00:15:11,079 --> 00:15:15,339
you stepped into the tunnel with good

00:15:13,180 --> 00:15:17,769
intentions but you got lost and after

00:15:15,339 --> 00:15:20,440
three four five days maybe even a couple

00:15:17,769 --> 00:15:22,510
of weeks you're so lost that you end up

00:15:20,440 --> 00:15:25,029
doing something like this and just

00:15:22,510 --> 00:15:27,730
saying just forget it just undo

00:15:25,029 --> 00:15:29,589
everything the navs broken the foot has

00:15:27,730 --> 00:15:31,880
disappeared on three pages people got

00:15:29,589 --> 00:15:35,090
login anymore everything's

00:15:31,880 --> 00:15:37,400
Giroud broken and you just throw it all

00:15:35,090 --> 00:15:39,440
in the bin how expensive is that you may

00:15:37,400 --> 00:15:42,470
have just lost five days of time and

00:15:39,440 --> 00:15:43,970
money by picking off a part of your

00:15:42,470 --> 00:15:44,830
refactoring or part of your project was

00:15:43,970 --> 00:15:48,110
too big

00:15:44,830 --> 00:15:50,870
always avoid long refactoring tunnels a

00:15:48,110 --> 00:15:53,450
long refactoring tunnel is basically any

00:15:50,870 --> 00:15:55,700
bit of work with a large surface area

00:15:53,450 --> 00:15:58,540
and what I mean by a large surface area

00:15:55,700 --> 00:16:03,200
is does it touch a lot of the project

00:15:58,540 --> 00:16:06,530
so perhaps refactoring your nav has a

00:16:03,200 --> 00:16:08,720
tiny surface area affects the nav but

00:16:06,530 --> 00:16:10,460
upgrading from bootstrap 3 to bootstrap

00:16:08,720 --> 00:16:12,350
4 have an enormous surface area that

00:16:10,460 --> 00:16:14,660
touches your entire project so try and

00:16:12,350 --> 00:16:16,640
avoid refactoring anything that has a

00:16:14,660 --> 00:16:21,080
surface area that big avoid long

00:16:16,640 --> 00:16:23,270
refactoring tunnels long refactoring

00:16:21,080 --> 00:16:25,460
tunnels as well as just being a bit

00:16:23,270 --> 00:16:26,900
scary and a bit confusing and a bit

00:16:25,460 --> 00:16:29,600
difficult to work with have some very

00:16:26,900 --> 00:16:31,310
specific problems if you try refactor

00:16:29,600 --> 00:16:33,580
all of your site from bootstrap 3 to

00:16:31,310 --> 00:16:35,990
bootstrap 4 there's gonna be a lot of

00:16:33,580 --> 00:16:37,970
stuff to merge back into master that

00:16:35,990 --> 00:16:40,070
huge deltas of things you need to merge

00:16:37,970 --> 00:16:42,200
back into your master or trunk branch

00:16:40,070 --> 00:16:44,030
the chance of naming conflicts is

00:16:42,200 --> 00:16:45,230
enormous the front of sorry not naming

00:16:44,030 --> 00:16:48,080
conflicts but just getting merge

00:16:45,230 --> 00:16:50,000
conflicts when you do a huge refactoring

00:16:48,080 --> 00:16:52,040
job getting it back into trunk is really

00:16:50,000 --> 00:16:53,750
really difficult and there's also the

00:16:52,040 --> 00:16:55,670
problem that if you're taking down a lot

00:16:53,750 --> 00:16:57,710
of the sites there's a chance that

00:16:55,670 --> 00:16:59,930
you're gonna break some of the things by

00:16:57,710 --> 00:17:02,450
accident introduce new bugs if anyone's

00:16:59,930 --> 00:17:03,380
ever taken a bike or a car apart and you

00:17:02,450 --> 00:17:06,470
put it back together and you've got a

00:17:03,380 --> 00:17:07,910
suspicious pile of screws like they

00:17:06,470 --> 00:17:09,110
should be in that car somewhere right

00:17:07,910 --> 00:17:11,060
that's exactly what happens when you try

00:17:09,110 --> 00:17:14,720
and take down your entire site and

00:17:11,060 --> 00:17:16,310
rebuild it instead we should pick off

00:17:14,720 --> 00:17:17,870
things with a limited and clear scope

00:17:16,310 --> 00:17:19,699
find something that you know will be a

00:17:17,870 --> 00:17:21,199
short refactoring tunnel for example

00:17:19,699 --> 00:17:24,079
just pick the now for right today I'm

00:17:21,199 --> 00:17:25,579
gonna refactor the nav get that work

00:17:24,079 --> 00:17:26,900
done make sure it's correct get it

00:17:25,579 --> 00:17:29,030
merged back in and then you've got two

00:17:26,900 --> 00:17:30,560
choices you can get back onto product

00:17:29,030 --> 00:17:32,150
work and start building features again

00:17:30,560 --> 00:17:33,440
or you could pick another refactoring

00:17:32,150 --> 00:17:35,930
turn off you could today well now I'll

00:17:33,440 --> 00:17:37,250
just do the buttons and rinse and repeat

00:17:35,930 --> 00:17:38,660
and keep doing this and before you know

00:17:37,250 --> 00:17:39,170
it the site has kind of refactored

00:17:38,660 --> 00:17:41,120
itself

00:17:39,170 --> 00:17:43,340
you didn't refactor your entire project

00:17:41,120 --> 00:17:44,809
onto a naming convention you reflected

00:17:43,340 --> 00:17:46,399
the buttons onto a naming convention

00:17:44,809 --> 00:17:49,100
then the nav onto a naming convention

00:17:46,399 --> 00:17:50,659
the carousel and it kind of reef actors

00:17:49,100 --> 00:17:57,289
itself by virtue of doing these small

00:17:50,659 --> 00:17:58,999
bits constantly these small bits we need

00:17:57,289 --> 00:18:02,659
to make sure we refactor these in

00:17:58,999 --> 00:18:04,340
isolation I've seen a lot of people

00:18:02,659 --> 00:18:06,799
struggle with refactoring projects

00:18:04,340 --> 00:18:10,580
because they try to rebuild the same

00:18:06,799 --> 00:18:12,169
feature back into the same project you

00:18:10,580 --> 00:18:13,700
need to get a completely fresh start

00:18:12,169 --> 00:18:16,549
pick the feature you're going to

00:18:13,700 --> 00:18:19,789
refactor open jsfiddle or copán and

00:18:16,549 --> 00:18:21,619
rebuild it there if you try and refactor

00:18:19,789 --> 00:18:23,720
a feature back into the same codebase

00:18:21,619 --> 00:18:25,940
you're going to taking advantage of

00:18:23,720 --> 00:18:27,679
legacy CSS right you'll be using the

00:18:25,940 --> 00:18:30,230
Cascade from CSS that might get

00:18:27,679 --> 00:18:31,970
reflected in future you need to start

00:18:30,230 --> 00:18:34,549
with a completely blank slate and build

00:18:31,970 --> 00:18:38,529
it as perfect as you can don't try and

00:18:34,549 --> 00:18:40,669
recycle already out-of-date environments

00:18:38,529 --> 00:18:42,499
then once you've refactored that in

00:18:40,669 --> 00:18:44,029
jsfiddle or code and copy and paste it

00:18:42,499 --> 00:18:47,330
back into your project and fix any

00:18:44,029 --> 00:18:48,950
problems at that point there let's say

00:18:47,330 --> 00:18:50,779
the Guardian want to refactor something

00:18:48,950 --> 00:18:52,879
and they pick the header in a refactor

00:18:50,779 --> 00:18:54,019
the header today and then they finish it

00:18:52,879 --> 00:18:56,899
they go to jsfiddle they get it

00:18:54,019 --> 00:18:58,669
completed as you can imagine as soon as

00:18:56,899 --> 00:19:00,409
you try and pull this header back into

00:18:58,669 --> 00:19:01,820
the project things are gonna go wrong

00:19:00,409 --> 00:19:04,549
there's gonna be some things will go

00:19:01,820 --> 00:19:06,590
wrong they'll be a leaky selector that

00:19:04,549 --> 00:19:08,119
breaks the link in the cut other colors

00:19:06,590 --> 00:19:09,860
of the links right or they'll be a high

00:19:08,119 --> 00:19:12,590
specificity selector that does something

00:19:09,860 --> 00:19:16,309
weird with the display we will get some

00:19:12,590 --> 00:19:18,649
breakages there's really nifty quite new

00:19:16,309 --> 00:19:20,749
technique or tip I guess for dealing

00:19:18,649 --> 00:19:24,350
with this and that's all initial who's

00:19:20,749 --> 00:19:26,149
heard of all initial like three people

00:19:24,350 --> 00:19:28,549
let's get a beer later where the cool

00:19:26,149 --> 00:19:30,649
kids write all initial oh this is

00:19:28,549 --> 00:19:33,860
amazing and all initial it effectively

00:19:30,649 --> 00:19:35,659
stops inheritance all initial sets every

00:19:33,860 --> 00:19:38,899
single CSS property back to its initial

00:19:35,659 --> 00:19:41,149
value this means that things don't leak

00:19:38,899 --> 00:19:43,039
into the Dom right you Styles don't leak

00:19:41,149 --> 00:19:46,129
into any other part of the project if it

00:19:43,039 --> 00:19:48,110
has all initials somewhere in there this

00:19:46,129 --> 00:19:49,639
is a very progressive way of defending

00:19:48,110 --> 00:19:51,350
against legacy now the reason I

00:19:49,639 --> 00:19:52,909
mentioned progressive is because we will

00:19:51,350 --> 00:19:55,940
need to discuss browser support in two

00:19:52,909 --> 00:19:57,980
slides time there is a very nice way of

00:19:55,940 --> 00:20:00,410
preventing I'm sorry protecting

00:19:57,980 --> 00:20:03,890
your newly refracted work against the

00:20:00,410 --> 00:20:06,590
effect of legacy hopefully we can see

00:20:03,890 --> 00:20:08,299
this not hmm yeah not really um here

00:20:06,590 --> 00:20:11,150
we've got a paragraph that's red and

00:20:08,299 --> 00:20:14,360
bold it's red and bold because the HTML

00:20:11,150 --> 00:20:16,580
and the div elements have got red and

00:20:14,360 --> 00:20:18,440
bold applied to them the paragraph

00:20:16,580 --> 00:20:20,660
itself has no styles directly applied

00:20:18,440 --> 00:20:23,419
but because of inheritance it turns red

00:20:20,660 --> 00:20:26,000
and it goes bold as soon as we put all

00:20:23,419 --> 00:20:29,240
initials on that paragraph it goes back

00:20:26,000 --> 00:20:30,860
to being black and font-weight:normal so

00:20:29,240 --> 00:20:33,950
we can stop things leaking into parts of

00:20:30,860 --> 00:20:36,380
the dom by using all initial there are

00:20:33,950 --> 00:20:37,940
some weird caveats with all initial so

00:20:36,380 --> 00:20:39,320
let us say we are refactoring our nav

00:20:37,940 --> 00:20:42,830
and we want to make sure that nothing

00:20:39,320 --> 00:20:44,900
from the outside project gets in if we

00:20:42,830 --> 00:20:46,820
were to write our CSS like this the font

00:20:44,900 --> 00:20:49,070
size and the font family rules here

00:20:46,820 --> 00:20:51,860
wouldn't actually cascade down into the

00:20:49,070 --> 00:20:53,690
link because the link also has all

00:20:51,860 --> 00:20:56,570
initial on it it will stop inheriting

00:20:53,690 --> 00:20:58,400
from its own parent the simple way

00:20:56,570 --> 00:21:00,500
around this we just have to write those

00:20:58,400 --> 00:21:01,970
style rules those declarations on the

00:21:00,500 --> 00:21:04,130
leaf node we have to move them down to

00:21:01,970 --> 00:21:08,900
here because they will not inherit from

00:21:04,130 --> 00:21:11,600
an ancestor ya browser support it's

00:21:08,900 --> 00:21:13,100
actually not terrible but it is still a

00:21:11,600 --> 00:21:17,299
kind of a progressive way of dealing

00:21:13,100 --> 00:21:19,610
with legacy all all that all initial

00:21:17,299 --> 00:21:22,190
will do is buy you a bit more time it

00:21:19,610 --> 00:21:25,250
will stop legacy styles appearing for

00:21:22,190 --> 00:21:26,990
all chrome users or Firefox users and it

00:21:25,250 --> 00:21:29,120
will stop the leakages for that for

00:21:26,990 --> 00:21:30,830
those people if you're still go back and

00:21:29,120 --> 00:21:32,360
fix anything that is broken so all

00:21:30,830 --> 00:21:34,669
initial just buys you a little bit more

00:21:32,360 --> 00:21:36,559
time but I do a little bit more time to

00:21:34,669 --> 00:21:38,030
fix these leaky Styles so it's quite a

00:21:36,559 --> 00:21:42,380
progressive way of defending against

00:21:38,030 --> 00:21:44,809
legacy now the next tip I want to share

00:21:42,380 --> 00:21:47,960
with you I actually implemented with a

00:21:44,809 --> 00:21:50,360
specific client earlier this year the

00:21:47,960 --> 00:21:52,910
defense CSS is like an internal open

00:21:50,360 --> 00:21:54,890
source project for any company or any

00:21:52,910 --> 00:21:57,200
team that is transitioning from old code

00:21:54,890 --> 00:21:59,059
to new code

00:21:57,200 --> 00:22:01,220
it basically answers the question what

00:21:59,059 --> 00:22:03,350
happens when you need to run reflected

00:22:01,220 --> 00:22:05,090
code and legacy code side by side and

00:22:03,350 --> 00:22:08,059
that question was asked of me by a

00:22:05,090 --> 00:22:09,470
company called Skype I actually used to

00:22:08,059 --> 00:22:10,170
work for sky about three years ago

00:22:09,470 --> 00:22:12,000
thought

00:22:10,170 --> 00:22:13,950
and they got back in touch with me at

00:22:12,000 --> 00:22:16,950
the end of last year because they wanted

00:22:13,950 --> 00:22:19,140
to modernize their UI toolkit they had

00:22:16,950 --> 00:22:21,630
an existing toolkit but the design

00:22:19,140 --> 00:22:23,700
language had it dated they wanted to

00:22:21,630 --> 00:22:26,370
change the architecture a little bit so

00:22:23,700 --> 00:22:28,560
I kind of went back in to help them we

00:22:26,370 --> 00:22:31,890
developed a new toolkit but sky is

00:22:28,560 --> 00:22:34,320
pretty enormous sky has about 30,000

00:22:31,890 --> 00:22:36,300
people working for them they're a big

00:22:34,320 --> 00:22:38,280
broadcast company in the UK so they deal

00:22:36,300 --> 00:22:41,550
with television ISP you know your

00:22:38,280 --> 00:22:42,900
internet service so this is a very very

00:22:41,550 --> 00:22:45,480
big project so what we have to do is

00:22:42,900 --> 00:22:47,070
pick a candidates that kind of prove the

00:22:45,480 --> 00:22:49,260
business value of this this bit of work

00:22:47,070 --> 00:22:50,730
so we picked the homepage itself run

00:22:49,260 --> 00:22:52,920
roll it out everywhere we started off by

00:22:50,730 --> 00:22:55,290
implementing the new toolkit on the home

00:22:52,920 --> 00:22:56,490
page then after that what the teams

00:22:55,290 --> 00:22:58,050
could start rolling out on their

00:22:56,490 --> 00:23:00,750
products and they could start adopting

00:22:58,050 --> 00:23:02,910
the new look and feel I had the problem

00:23:00,750 --> 00:23:05,040
is we had to run old and new in tandem

00:23:02,910 --> 00:23:07,020
certain sites were using an old toolkit

00:23:05,040 --> 00:23:08,970
and a new tool a new toolkit at the same

00:23:07,020 --> 00:23:10,950
time and as you can imagine trying to

00:23:08,970 --> 00:23:13,170
put two different CSS frameworks

00:23:10,950 --> 00:23:14,940
together in the same project leads to a

00:23:13,170 --> 00:23:16,770
bit of a mess things just weren't

00:23:14,940 --> 00:23:19,080
sitting right things just weren't really

00:23:16,770 --> 00:23:20,670
working well at all we've got these two

00:23:19,080 --> 00:23:22,530
projects that were kind of in conflict

00:23:20,670 --> 00:23:25,590
and they just would not meld together we

00:23:22,530 --> 00:23:27,120
couldn't get them to work nicely so what

00:23:25,590 --> 00:23:29,460
I end up doing is introduce this kind of

00:23:27,120 --> 00:23:32,130
internal open source project just called

00:23:29,460 --> 00:23:34,380
defense dot CSS and defense dot CSS was

00:23:32,130 --> 00:23:36,720
a polyfill that would tidy up all the

00:23:34,380 --> 00:23:38,070
mess between old and new and allowed

00:23:36,720 --> 00:23:42,000
them to sort of sit together a bit more

00:23:38,070 --> 00:23:44,040
nicely defense dr. CSS was an entirely

00:23:42,000 --> 00:23:45,510
new project it's a new dependency

00:23:44,040 --> 00:23:46,980
so the reason we run it like an open

00:23:45,510 --> 00:23:49,980
source project is because other teams

00:23:46,980 --> 00:23:52,500
needed to consume it and contribute to

00:23:49,980 --> 00:23:53,940
it if another team wanted to run the new

00:23:52,500 --> 00:23:56,940
toolkit as well they would need to

00:23:53,940 --> 00:23:59,700
install defensive CSS to fix the kind of

00:23:56,940 --> 00:24:01,620
problems between old and new the reason

00:23:59,700 --> 00:24:03,990
we wanted it in a third project or a

00:24:01,620 --> 00:24:06,090
separate file or so that when we

00:24:03,990 --> 00:24:07,470
transition completely to the new toolkit

00:24:06,090 --> 00:24:09,180
we can just hit delete right we don't

00:24:07,470 --> 00:24:11,100
want to leave any legacy stuff behind

00:24:09,180 --> 00:24:15,230
which want to remove the dependency

00:24:11,100 --> 00:24:18,690
advanced CSS and have all greenfield CSS

00:24:15,230 --> 00:24:20,460
and the stuff inside this file is

00:24:18,690 --> 00:24:23,160
horrible it's just horrible horrible

00:24:20,460 --> 00:24:24,600
stuff it's just typing until things look

00:24:23,160 --> 00:24:26,820
right

00:24:24,600 --> 00:24:28,769
it's full of hacked it's full of really

00:24:26,820 --> 00:24:30,570
nasty stuff it will be important in that

00:24:28,769 --> 00:24:32,490
this is the worst CSS you will ever

00:24:30,570 --> 00:24:33,330
write but that's completely fine it's

00:24:32,490 --> 00:24:39,480
temporary

00:24:33,330 --> 00:24:41,519
it is designed to be deleted I I want to

00:24:39,480 --> 00:24:42,539
show you what's in this file but um I

00:24:41,519 --> 00:24:44,909
can't

00:24:42,539 --> 00:24:47,490
I had to pixelate is that bad it's that

00:24:44,909 --> 00:24:51,510
offensive it probably violates the Code

00:24:47,490 --> 00:24:52,889
of Conduct it's really that bad but I

00:24:51,510 --> 00:24:55,139
hopefully you can see it is quite

00:24:52,889 --> 00:25:03,360
pixelated all these red bits they're

00:24:55,139 --> 00:25:06,870
important yeah defense CSS if you need

00:25:03,360 --> 00:25:09,120
to transition from old to new kind of in

00:25:06,870 --> 00:25:10,320
a very layered manner or if you're going

00:25:09,120 --> 00:25:13,019
to be running old and new at the same

00:25:10,320 --> 00:25:15,179
time consider moving all the fixers to a

00:25:13,019 --> 00:25:17,039
third project that can be rolled out to

00:25:15,179 --> 00:25:18,779
other teams it can be versioned it can

00:25:17,039 --> 00:25:20,130
be it could track your kind of your

00:25:18,779 --> 00:25:22,230
version of your old toolkit your version

00:25:20,130 --> 00:25:24,299
of your new toolkit and you can run it

00:25:22,230 --> 00:25:28,559
like a proper sort of dependency managed

00:25:24,299 --> 00:25:31,649
project oh the next tip I want to talk

00:25:28,559 --> 00:25:34,500
to you about is RF classes RF classes

00:25:31,649 --> 00:25:37,889
this is a really simple tip basically RF

00:25:34,500 --> 00:25:40,889
classes any refactored class just put an

00:25:37,889 --> 00:25:42,990
RF - in front of it this is just so that

00:25:40,889 --> 00:25:44,970
the net developers can see that alright

00:25:42,990 --> 00:25:47,789
RF nav has been reflected I don't need

00:25:44,970 --> 00:25:49,440
to touch this is new code but would also

00:25:47,789 --> 00:25:51,630
do some pretty clever stuff with this

00:25:49,440 --> 00:25:54,990
like we could write a selector like this

00:25:51,630 --> 00:25:56,909
I mean say if a class has RF - in it

00:25:54,990 --> 00:25:59,130
just put a green box around it that

00:25:56,909 --> 00:26:01,409
means it or me you look at our dev site

00:25:59,130 --> 00:26:02,880
we might see this we can see that the

00:26:01,409 --> 00:26:05,100
nav and the content blocks have been

00:26:02,880 --> 00:26:06,480
reflected right this is this is work

00:26:05,100 --> 00:26:08,730
that we've done this is work that has

00:26:06,480 --> 00:26:13,559
been completed this is new greenfield

00:26:08,730 --> 00:26:16,110
CSS on the flip side we could say find

00:26:13,559 --> 00:26:18,990
me a class but is a class that doesn't

00:26:16,110 --> 00:26:20,519
contain RF - put a red box around that

00:26:18,990 --> 00:26:23,399
and you can just hide these behind a

00:26:20,519 --> 00:26:25,350
config switch in your sass somewhere if

00:26:23,399 --> 00:26:27,299
we turn this selector on we can see that

00:26:25,350 --> 00:26:29,940
okay write anything with a red border

00:26:27,299 --> 00:26:32,700
around it is not refactored here we can

00:26:29,940 --> 00:26:34,230
see that the the temperature in London

00:26:32,700 --> 00:26:35,760
all that information that little masked

00:26:34,230 --> 00:26:36,880
head has been refactored we can see

00:26:35,760 --> 00:26:38,650
that's clean

00:26:36,880 --> 00:26:40,570
all the other red stuff is our to-do

00:26:38,650 --> 00:26:43,450
list this represents the worker it's

00:26:40,570 --> 00:26:46,450
still left to do that's just a really

00:26:43,450 --> 00:26:48,490
simple tiny tip just put our F - in

00:26:46,450 --> 00:26:50,260
front of refactored classes once you've

00:26:48,490 --> 00:26:52,240
finished the refactoring project if you

00:26:50,260 --> 00:26:54,700
can just kind of run a global find and

00:26:52,240 --> 00:26:56,110
replace there's a strip RF - back off of

00:26:54,700 --> 00:27:01,210
those classes and you've got a

00:26:56,110 --> 00:27:02,380
Greenfield codebase the net tip this is

00:27:01,210 --> 00:27:04,510
one of my party tricks

00:27:02,380 --> 00:27:06,700
I actually don't come to one of my

00:27:04,510 --> 00:27:10,260
parties have boring with this b-but

00:27:06,700 --> 00:27:12,610
refactoring specificity right if you're

00:27:10,260 --> 00:27:14,500
refactoring old CSS there is every

00:27:12,610 --> 00:27:16,590
chance you're trying to remove IDs you

00:27:14,500 --> 00:27:20,110
can I remove overly nested selectors

00:27:16,590 --> 00:27:22,050
this often means that any new CSS you

00:27:20,110 --> 00:27:24,100
introduced to the project might have

00:27:22,050 --> 00:27:27,340
collisions with specificity old

00:27:24,100 --> 00:27:30,790
selectors might be using IDs that might

00:27:27,340 --> 00:27:32,110
accidentally override your new work so

00:27:30,790 --> 00:27:35,440
dealing with specificity and legacy

00:27:32,110 --> 00:27:37,030
project is not fun we could just start

00:27:35,440 --> 00:27:38,560
throwing importance in there but we

00:27:37,030 --> 00:27:40,360
really really don't want to start

00:27:38,560 --> 00:27:43,180
putting importance into brand new

00:27:40,360 --> 00:27:47,290
greenfield CSS we're instantly accruing

00:27:43,180 --> 00:27:48,190
tech debt on a brand new project it's

00:27:47,290 --> 00:27:50,140
what we can do is we can hack

00:27:48,190 --> 00:27:51,970
specificity with minimal side effects

00:27:50,140 --> 00:27:55,150
there's some kind of funky things we can

00:27:51,970 --> 00:27:57,400
do to hack specificity around if we take

00:27:55,150 --> 00:27:59,080
a real simple snippet of HTML a link

00:27:57,400 --> 00:28:03,460
with a class of foo and an idea of bar

00:27:59,080 --> 00:28:05,200
and throw this CSS at it we've got three

00:28:03,460 --> 00:28:07,930
very different selectors here but we can

00:28:05,200 --> 00:28:09,460
probably all work out that hash bar is

00:28:07,930 --> 00:28:11,200
what's gonna win it's an ID it's

00:28:09,460 --> 00:28:13,600
infinitely more specific than a class

00:28:11,200 --> 00:28:15,880
who is infinitely more specific than an

00:28:13,600 --> 00:28:18,160
element so even though we've got these

00:28:15,880 --> 00:28:20,020
written in a certain sauce order they

00:28:18,160 --> 00:28:22,330
will be applied in the opposite order to

00:28:20,020 --> 00:28:24,910
what we kind of expect well not expect

00:28:22,330 --> 00:28:27,820
but the last one is the least likely to

00:28:24,910 --> 00:28:29,230
get applied so all of these selectors

00:28:27,820 --> 00:28:31,270
are working against their sauce order

00:28:29,230 --> 00:28:33,280
this is gonna be a definite definite

00:28:31,270 --> 00:28:35,530
problem when we are refactoring at our

00:28:33,280 --> 00:28:37,720
CSS so what we can do is be hacked our

00:28:35,530 --> 00:28:39,400
specificity around without changing the

00:28:37,720 --> 00:28:41,080
selector at all or rottweiler without

00:28:39,400 --> 00:28:43,960
changing what we are binding on to

00:28:41,080 --> 00:28:46,250
without changing the HTML we can rewrite

00:28:43,960 --> 00:28:49,080
all of that CSS so that every

00:28:46,250 --> 00:28:51,320
element has of every story every single

00:28:49,080 --> 00:28:55,500
selector has the exact same specificity

00:28:51,320 --> 00:28:57,570
if we were to write ID equals bar as an

00:28:55,500 --> 00:29:00,000
attribute that's a class equivalent of

00:28:57,570 --> 00:29:02,159
specificity we need to prefix that with

00:29:00,000 --> 00:29:05,250
an element so we can have an element and

00:29:02,159 --> 00:29:07,380
class equivalent specificity there the

00:29:05,250 --> 00:29:09,390
second one the class just stays as it is

00:29:07,380 --> 00:29:10,830
we put an element in front of that so

00:29:09,390 --> 00:29:13,529
that's got an element and a class worth

00:29:10,830 --> 00:29:14,760
of specificity and the final one staff

00:29:13,529 --> 00:29:16,770
that offers an element it was just an

00:29:14,760 --> 00:29:18,960
element we need to get that to have a

00:29:16,770 --> 00:29:21,299
class as well what we can do is we can

00:29:18,960 --> 00:29:23,429
just use the root pseudo element the

00:29:21,299 --> 00:29:26,250
root pseudo selector which just

00:29:23,429 --> 00:29:28,380
represents the HTML element in an HTML

00:29:26,250 --> 00:29:30,840
document or the SVG element in an SVG

00:29:28,380 --> 00:29:32,640
document and this also carries a class

00:29:30,840 --> 00:29:35,070
worth of specificity so now all of a

00:29:32,640 --> 00:29:37,980
sudden the last selector wins it can

00:29:35,070 --> 00:29:41,760
beat the ID I just pull this out into a

00:29:37,980 --> 00:29:43,710
more kind of digestible slide rewriting

00:29:41,760 --> 00:29:46,220
IDs as attribute selectors who will

00:29:43,710 --> 00:29:48,779
bring their specificity down to a class

00:29:46,220 --> 00:29:51,240
we've actually chained the same class

00:29:48,779 --> 00:29:54,539
with itself to increase its specificity

00:29:51,240 --> 00:29:54,899
by doubling it if we had got food food

00:29:54,539 --> 00:29:56,610
food

00:29:54,899 --> 00:29:58,320
it would triple the specificity we can

00:29:56,610 --> 00:30:02,490
do that for forever it'll just keep on

00:29:58,320 --> 00:30:04,649
going and we can also use the root

00:30:02,490 --> 00:30:06,990
element to introduce a class worth of

00:30:04,649 --> 00:30:09,919
specificity without ever having to worry

00:30:06,990 --> 00:30:12,149
about where the Dom node actually lives

00:30:09,919 --> 00:30:13,980
it's really important to remember that

00:30:12,149 --> 00:30:16,649
these are hacks these are disgusting

00:30:13,980 --> 00:30:19,380
these are horrible ideally we would

00:30:16,649 --> 00:30:22,799
refactor our CSS so that there wasn't a

00:30:19,380 --> 00:30:24,450
problem at all realistically we might

00:30:22,799 --> 00:30:26,820
have to use a few of these hacks I've

00:30:24,450 --> 00:30:30,299
used the double class one quite a lot of

00:30:26,820 --> 00:30:33,120
times we should never lean on things

00:30:30,299 --> 00:30:36,330
like important we can use things before

00:30:33,120 --> 00:30:38,340
things get that bad I'm not saying never

00:30:36,330 --> 00:30:40,950
use important what I said in the first

00:30:38,340 --> 00:30:43,980
talk and Twitter kind of set on fire

00:30:40,950 --> 00:30:45,659
with that one but yeah we can avoid

00:30:43,980 --> 00:30:47,760
using important for a lot longer by

00:30:45,659 --> 00:30:49,260
learning how to hack specificity around

00:30:47,760 --> 00:30:51,059
so if your legacy code is causing

00:30:49,260 --> 00:30:53,480
problems perhaps you use one of these

00:30:51,059 --> 00:30:53,480
techniques

00:30:54,310 --> 00:31:00,550
the next thing I wanna talk about is

00:30:57,160 --> 00:31:02,890
Shane CSS as an unheard of Shane CSS

00:31:00,550 --> 00:31:04,450
yeah a few of you I wrote about this a

00:31:02,890 --> 00:31:06,790
few years ago and I still really enjoy

00:31:04,450 --> 00:31:10,390
it because I just like making people

00:31:06,790 --> 00:31:12,520
write code in a file called shame the

00:31:10,390 --> 00:31:14,680
idea of shame dot CSS is that you have a

00:31:12,520 --> 00:31:17,680
totally new style sheet reserved just

00:31:14,680 --> 00:31:19,600
for your hockey code code that you have

00:31:17,680 --> 00:31:21,640
to write to get a release out on time

00:31:19,600 --> 00:31:23,080
but code that makes you feel a bit bad

00:31:21,640 --> 00:31:24,820
right because you just kind of

00:31:23,080 --> 00:31:28,270
disappointed with yourself hang your

00:31:24,820 --> 00:31:31,810
head in shame you could call it bugs CSS

00:31:28,270 --> 00:31:33,550
or like hacked CSS died of shame dot CSS

00:31:31,810 --> 00:31:36,390
is so that people see it and they're

00:31:33,550 --> 00:31:38,710
kind of intrigued like what's in here

00:31:36,390 --> 00:31:40,270
but it's just a dumping ground for all

00:31:38,710 --> 00:31:43,000
the nasty bits of CSS that you're a

00:31:40,270 --> 00:31:45,520
little bit ashamed of there are several

00:31:43,000 --> 00:31:47,710
benefits to having all your hacks in a

00:31:45,520 --> 00:31:51,340
separate file it's important to isolate

00:31:47,710 --> 00:31:54,130
our hacks I'm not naive enough to think

00:31:51,340 --> 00:31:56,590
that I don't write any hacky CSS ever

00:31:54,130 --> 00:31:58,240
we're all good developers we all have to

00:31:56,590 --> 00:32:00,040
write hacked at some point in our

00:31:58,240 --> 00:32:03,010
careers we have to hack something around

00:32:00,040 --> 00:32:04,810
because a deadline is looming this is

00:32:03,010 --> 00:32:06,760
technical debt right I writing a hack to

00:32:04,810 --> 00:32:09,430
fulfill a deadline is exactly what

00:32:06,760 --> 00:32:11,070
technical debt is that's kind of a loan

00:32:09,430 --> 00:32:13,420
that we take that we have to repay later

00:32:11,070 --> 00:32:15,640
what we need to do is keep a balance of

00:32:13,420 --> 00:32:17,560
our debt right we keep shamed up CSS as

00:32:15,640 --> 00:32:20,440
a file to reminders of what we need to

00:32:17,560 --> 00:32:23,680
refactor later so it makes it very easy

00:32:20,440 --> 00:32:26,950
to find and fix things that are wrong an

00:32:23,680 --> 00:32:30,160
example like chunk from i ashamed CSS

00:32:26,950 --> 00:32:31,930
file every bit of CSS in shame doc CSS

00:32:30,160 --> 00:32:34,030
should have the hack itself but should

00:32:31,930 --> 00:32:36,640
have a comment explaining what the

00:32:34,030 --> 00:32:39,280
problem is that you're fixing why you

00:32:36,640 --> 00:32:41,230
had to fix it and what you would do to

00:32:39,280 --> 00:32:43,030
fix it properly if you had enough time

00:32:41,230 --> 00:32:44,710
and then you can optionally leave kind

00:32:43,030 --> 00:32:46,110
of details that people can get in touch

00:32:44,710 --> 00:32:48,460
with if they need to ask you about it

00:32:46,110 --> 00:32:51,610
here you can see that I'm using the dot

00:32:48,460 --> 00:32:53,560
BTN BTN trick to force the button class

00:32:51,610 --> 00:32:55,900
just to have a higher specificity to

00:32:53,560 --> 00:33:00,340
override dot promo right it's a nasty

00:32:55,900 --> 00:33:01,960
hack but I had to do it so the benefits

00:33:00,340 --> 00:33:04,420
of having this this file is this is a

00:33:01,960 --> 00:33:05,580
self writing to-do list all of your

00:33:04,420 --> 00:33:07,140
to-do zarnow exist

00:33:05,580 --> 00:33:09,090
one foil he don't have to chase them

00:33:07,140 --> 00:33:11,910
around the project when you have a

00:33:09,090 --> 00:33:14,010
refactoring task or a sprint dedicated

00:33:11,910 --> 00:33:17,460
to refactoring open this file and start

00:33:14,010 --> 00:33:19,080
there it keeps your good code nice and

00:33:17,460 --> 00:33:20,970
clean it keeps all the messy stuff away

00:33:19,080 --> 00:33:22,800
from people who are working on

00:33:20,970 --> 00:33:24,960
Greenfield code this is actually really

00:33:22,800 --> 00:33:28,170
important has anybody heard of the

00:33:24,960 --> 00:33:30,720
broken windows theory oh cool a few of

00:33:28,170 --> 00:33:34,020
us right the broken windows theory kind

00:33:30,720 --> 00:33:36,390
of loosely suggests that um it's like

00:33:34,020 --> 00:33:41,250
her the example uses a New York kind of

00:33:36,390 --> 00:33:43,890
state like council if there's an

00:33:41,250 --> 00:33:46,710
abandoned or like vacant public building

00:33:43,890 --> 00:33:48,210
and somebody smashes a window New York

00:33:46,710 --> 00:33:50,460
Council sends someone around immediately

00:33:48,210 --> 00:33:51,780
to fix that window even if that building

00:33:50,460 --> 00:33:53,220
is going to be vacant for the next ten

00:33:51,780 --> 00:33:55,290
years they will fix the broken window

00:33:53,220 --> 00:33:57,300
immediately because as soon as there's

00:33:55,290 --> 00:33:58,410
one broken window someone else will

00:33:57,300 --> 00:34:00,210
throw a rock through another window

00:33:58,410 --> 00:34:02,220
another one until the building falls

00:34:00,210 --> 00:34:04,650
into disrepair it's kind of this this

00:34:02,220 --> 00:34:07,620
social kind of theory about snowballing

00:34:04,650 --> 00:34:11,280
effect the exact same thing happens in

00:34:07,620 --> 00:34:13,470
in software projects someone will use

00:34:11,280 --> 00:34:14,970
the first important and if they leave it

00:34:13,470 --> 00:34:17,580
in at the next developer comes along and

00:34:14,970 --> 00:34:18,750
sees an important and thinks wife they

00:34:17,580 --> 00:34:20,730
did it I'm gonna do it

00:34:18,750 --> 00:34:23,100
and before you know it you've gotten

00:34:20,730 --> 00:34:25,110
messy spiraling codebase so what we need

00:34:23,100 --> 00:34:27,180
to do is if we do need to add any

00:34:25,110 --> 00:34:30,180
importance if we need to add any hockey

00:34:27,180 --> 00:34:31,590
CSS took it away to one side so that for

00:34:30,180 --> 00:34:33,270
90 percent of the time when you're

00:34:31,590 --> 00:34:34,590
working on good clean code you're not

00:34:33,270 --> 00:34:36,180
reminded of all the bad stuff that's

00:34:34,590 --> 00:34:40,950
going on it just keeps you with a nice

00:34:36,180 --> 00:34:42,030
view of your project this is an

00:34:40,950 --> 00:34:45,590
interesting but you can see which parts

00:34:42,030 --> 00:34:49,590
of the codebase are problematic

00:34:45,590 --> 00:34:51,540
there's anybody being given a design to

00:34:49,590 --> 00:34:55,260
build or being given a feature request

00:34:51,540 --> 00:34:56,640
and you immediately think this is going

00:34:55,260 --> 00:34:58,080
to be awful right this is going to be

00:34:56,640 --> 00:35:00,060
really hard to build this is gonna be

00:34:58,080 --> 00:35:01,650
really happy yeah all of us with CSS

00:35:00,060 --> 00:35:04,200
developers of course that is basically

00:35:01,650 --> 00:35:05,340
what our job is right we get given these

00:35:04,200 --> 00:35:08,040
designs that are really nasty and

00:35:05,340 --> 00:35:09,690
horrible and we just think I can't build

00:35:08,040 --> 00:35:10,710
this nicely this is going to be happy

00:35:09,690 --> 00:35:11,670
we're gonna have to use this and this

00:35:10,710 --> 00:35:13,890
I'm gonna have to polyfill it with

00:35:11,670 --> 00:35:15,570
JavaScript and you've got back to your

00:35:13,890 --> 00:35:17,850
product owner or your project manager

00:35:15,570 --> 00:35:19,320
and you say hey look I actually think we

00:35:17,850 --> 00:35:21,090
shouldn't do this I think that this is

00:35:19,320 --> 00:35:22,680
bad idea because it's gonna really

00:35:21,090 --> 00:35:24,870
negatively affect the quality of our

00:35:22,680 --> 00:35:26,520
code base and they probably say

00:35:24,870 --> 00:35:30,000
something like well the clients happy to

00:35:26,520 --> 00:35:32,520
pay for it and you're like fine if you

00:35:30,000 --> 00:35:35,880
put all the hacks for that particular

00:35:32,520 --> 00:35:37,290
feature inside your shamed CSS file when

00:35:35,880 --> 00:35:39,960
that feature is finished you can go to

00:35:37,290 --> 00:35:43,290
your product owner and say two weeks ago

00:35:39,960 --> 00:35:45,480
this file had 17 lines of CSS in it now

00:35:43,290 --> 00:35:46,730
I finished that feature it has 212 lines

00:35:45,480 --> 00:35:49,380
of CSS in it

00:35:46,730 --> 00:35:50,850
this feature directly contribute bhai

00:35:49,380 --> 00:35:53,810
made their awkward numbers I have to do

00:35:50,850 --> 00:35:56,280
some math now it's like 198 lines of CSS

00:35:53,810 --> 00:35:58,500
that you've added to the project you can

00:35:56,280 --> 00:36:01,050
actually start to prove with numbers

00:35:58,500 --> 00:36:03,630
just how much technical debt particular

00:36:01,050 --> 00:36:05,850
features add to your project it remains

00:36:03,630 --> 00:36:07,980
the next time somebody asks for a weird

00:36:05,850 --> 00:36:09,650
feature you can say look last time we

00:36:07,980 --> 00:36:12,390
did this I told you it'd be a bad idea

00:36:09,650 --> 00:36:15,210
this is what happened I'm keen to avoid

00:36:12,390 --> 00:36:17,310
that happening again at the final good

00:36:15,210 --> 00:36:20,340
thing about shame dot CSS is it's easy

00:36:17,310 --> 00:36:24,540
to run get blame over a single file

00:36:20,340 --> 00:36:26,490
I was really nasty when I say this I'm

00:36:24,540 --> 00:36:28,410
not doing this in order to catch people

00:36:26,490 --> 00:36:30,930
out I've actually got quite an

00:36:28,410 --> 00:36:34,110
interesting story of how this really

00:36:30,930 --> 00:36:36,510
helped me on a project about two years

00:36:34,110 --> 00:36:38,700
ago I was kind of the lead consultant

00:36:36,510 --> 00:36:42,990
and lead developer on phase one at a

00:36:38,700 --> 00:36:44,520
fairly big elearning platform it's a

00:36:42,990 --> 00:36:46,590
really exciting project it turns a fun

00:36:44,520 --> 00:36:48,000
and I built kind of phase one and it's

00:36:46,590 --> 00:36:51,240
my job to hand it over to another team

00:36:48,000 --> 00:36:52,500
we had a full like proper handover

00:36:51,240 --> 00:36:54,750
workshop where I talked him through the

00:36:52,500 --> 00:36:56,160
architecture how everything worked and I

00:36:54,750 --> 00:37:00,090
was like do you understand and they're

00:36:56,160 --> 00:37:01,590
like yes we understand and I left and I

00:37:00,090 --> 00:37:02,970
came back about two months later just to

00:37:01,590 --> 00:37:04,590
check in and see how things were going

00:37:02,970 --> 00:37:05,700
and I said oh cool I'm gonna take a look

00:37:04,590 --> 00:37:07,620
through the codebase and see if there's

00:37:05,700 --> 00:37:10,020
anything we need to discuss and all of a

00:37:07,620 --> 00:37:12,030
sudden ashamed of CSS file it got it got

00:37:10,020 --> 00:37:13,170
enormous and I ran get blame across it

00:37:12,030 --> 00:37:17,040
and it's just one developer it was all

00:37:13,170 --> 00:37:19,020
his work and at first I was like he said

00:37:17,040 --> 00:37:20,250
he understood and he lied and at first I

00:37:19,020 --> 00:37:23,430
was kind of angry but then I realized

00:37:20,250 --> 00:37:25,770
that a way all of this CSS in here is

00:37:23,430 --> 00:37:28,350
around the grid system that's the thing

00:37:25,770 --> 00:37:29,850
I explained the least so what this

00:37:28,350 --> 00:37:32,279
taught me or what this told me was that

00:37:29,850 --> 00:37:34,049
I hadn't explained something very well

00:37:32,279 --> 00:37:35,849
the guy was hacking around stuff that

00:37:34,049 --> 00:37:39,150
already existed hadn't really made it

00:37:35,849 --> 00:37:40,799
obvious so it was a quick case of I said

00:37:39,150 --> 00:37:42,240
like dude can we grab a coffee for 58

00:37:40,799 --> 00:37:43,380
for 15 minutes like I want to show you

00:37:42,240 --> 00:37:46,349
some stuff about how the grid system

00:37:43,380 --> 00:37:48,359
works and basically what this allowed me

00:37:46,349 --> 00:37:50,130
to do was learn who struggles with which

00:37:48,359 --> 00:37:52,470
parts of the project as a lead developer

00:37:50,130 --> 00:37:54,089
or as a senior developer that's really

00:37:52,470 --> 00:37:56,250
useful information to have if you can

00:37:54,089 --> 00:37:59,430
see that this person is struggling with

00:37:56,250 --> 00:38:00,690
the nav or the carousel or something it

00:37:59,430 --> 00:38:02,309
means you can start sharing knowledge

00:38:00,690 --> 00:38:06,750
with the right people about the right

00:38:02,309 --> 00:38:08,779
things that's it for the kind of the

00:38:06,750 --> 00:38:10,799
tips I just wanna close on quite um

00:38:08,779 --> 00:38:12,599
there's an interesting thing that

00:38:10,799 --> 00:38:15,390
happened to me again about two years ago

00:38:12,599 --> 00:38:18,510
I had a very very interesting point of

00:38:15,390 --> 00:38:22,230
view given to me by a developer that I

00:38:18,510 --> 00:38:23,640
was talking to and it's about second

00:38:22,230 --> 00:38:25,190
chances this is kind of weird I never

00:38:23,640 --> 00:38:27,390
really do this kind of philosophical

00:38:25,190 --> 00:38:30,359
ending to a talk but I think it's quite

00:38:27,390 --> 00:38:31,950
poignant it was basically that second

00:38:30,359 --> 00:38:36,150
chances I was running a workshop in

00:38:31,950 --> 00:38:38,309
London and I always asked the attendees

00:38:36,150 --> 00:38:40,079
like well where do you work what do you

00:38:38,309 --> 00:38:43,289
work on what kind of stuff do you do and

00:38:40,079 --> 00:38:45,480
and one guy said that I'm brand new to

00:38:43,289 --> 00:38:49,079
web development I'm like I've been a

00:38:45,480 --> 00:38:50,430
developer for like two months and I said

00:38:49,079 --> 00:38:51,690
oh cool how are you finding it are you

00:38:50,430 --> 00:38:54,630
enjoying it and he said oh it's amazing

00:38:51,690 --> 00:38:56,430
I used to be a civil engineer so he used

00:38:54,630 --> 00:38:58,799
to build bridges and roads and that kind

00:38:56,430 --> 00:39:00,299
of stuff and I said so how are you

00:38:58,799 --> 00:39:01,980
finding the transition to web

00:39:00,299 --> 00:39:04,769
development and he said oh it's

00:39:01,980 --> 00:39:08,970
incredible because web developers have a

00:39:04,769 --> 00:39:10,980
chance to refactor things I am a civil

00:39:08,970 --> 00:39:13,170
engineer I can't refactor a bridge

00:39:10,980 --> 00:39:16,200
it's either perfect first time or 200

00:39:13,170 --> 00:39:17,250
people died and I was like yeah you're

00:39:16,200 --> 00:39:19,559
right that's incredible

00:39:17,250 --> 00:39:21,660
like yeah I never even thought about

00:39:19,559 --> 00:39:23,970
that you can't refactor a bridge it's

00:39:21,660 --> 00:39:27,480
like oh like what that's me going

00:39:23,970 --> 00:39:29,099
to prison yeah as a civil engineer I

00:39:27,480 --> 00:39:30,509
don't get the chance to or as civil

00:39:29,099 --> 00:39:32,430
engineers we don't get a chance to

00:39:30,509 --> 00:39:34,349
refactor our architecture and I was like

00:39:32,430 --> 00:39:37,140
oh my god like I've always looked at

00:39:34,349 --> 00:39:38,519
refactoring as a horrible job I've

00:39:37,140 --> 00:39:40,259
looked at refactoring as a chore

00:39:38,519 --> 00:39:41,930
something that I had to do something I

00:39:40,259 --> 00:39:43,130
resented

00:39:41,930 --> 00:39:45,170
what refactoring actually there's a

00:39:43,130 --> 00:39:46,819
second chance that most industries don't

00:39:45,170 --> 00:39:49,069
get it's a chance for us to learn about

00:39:46,819 --> 00:39:51,829
our product as we build it it's a chance

00:39:49,069 --> 00:39:54,290
to respond to changes in requirements or

00:39:51,829 --> 00:39:55,940
changes in use it's a chance for us to

00:39:54,290 --> 00:39:57,950
learn from previous mistakes or learn

00:39:55,940 --> 00:40:01,579
from new knowledge to make even better

00:39:57,950 --> 00:40:04,430
stuff surgeons can't refactor a heart

00:40:01,579 --> 00:40:06,170
surgery right you die civil engineers

00:40:04,430 --> 00:40:08,900
can't read factor a bridge pilots can't

00:40:06,170 --> 00:40:10,220
refactor a failed flight web developers

00:40:08,900 --> 00:40:11,750
we can be like yeah well this

00:40:10,220 --> 00:40:14,030
architecture is not good enough let me

00:40:11,750 --> 00:40:15,589
spend a week fixing it so rather than

00:40:14,030 --> 00:40:17,119
seeing refactoring is a nasty job

00:40:15,589 --> 00:40:18,680
perhaps we should see it as a kind of a

00:40:17,119 --> 00:40:21,740
second chance that is actually kind of

00:40:18,680 --> 00:40:23,210
cool I've actually gone 10 minutes over

00:40:21,740 --> 00:40:25,309
my time I think so I need to start

00:40:23,210 --> 00:40:28,550
wrapping up um okay let's leave on this

00:40:25,309 --> 00:40:29,690
then remember um prevention is cheaper

00:40:28,550 --> 00:40:32,480
than the cure if we can start

00:40:29,690 --> 00:40:34,220
refactoring things as we spot them as we

00:40:32,480 --> 00:40:35,720
are working we're going to keep things

00:40:34,220 --> 00:40:38,230
cheaper in the long run we don't have to

00:40:35,720 --> 00:40:41,000
tear things down and start again

00:40:38,230 --> 00:40:43,069
technical debt is fine right a lot of

00:40:41,000 --> 00:40:44,569
people avoid technical debt completely

00:40:43,069 --> 00:40:46,280
that's quite naive technical that is

00:40:44,569 --> 00:40:48,890
going to happen it's bound to happen

00:40:46,280 --> 00:40:50,930
which need to be very very careful very

00:40:48,890 --> 00:40:53,000
diligent in keeping up repayment so that

00:40:50,930 --> 00:40:56,780
we don't go bankrupt and have to rebuild

00:40:53,000 --> 00:40:58,849
the entire site I'm only refactor things

00:40:56,780 --> 00:41:00,559
once we can see tangible benefits try

00:40:58,849 --> 00:41:02,839
and avoid refactoring something just out

00:41:00,559 --> 00:41:04,400
of a sense of pride only refactor

00:41:02,839 --> 00:41:06,200
something if is actually slowing you

00:41:04,400 --> 00:41:10,490
down if it's causing problems if it's

00:41:06,200 --> 00:41:12,170
costing the business money avoid long

00:41:10,490 --> 00:41:13,940
refactoring tunnels do not pick

00:41:12,170 --> 00:41:16,819
refactoring tasks that have a large

00:41:13,940 --> 00:41:18,859
surface area pick off tiny granular jobs

00:41:16,819 --> 00:41:22,700
complete them as quickly as you can and

00:41:18,859 --> 00:41:24,710
move on to the next one and any hacks or

00:41:22,700 --> 00:41:27,049
refactored code any code that are even

00:41:24,710 --> 00:41:28,940
remotely interesting to other developers

00:41:27,049 --> 00:41:31,099
highlight it Aref

00:41:28,940 --> 00:41:35,180
in front of your refactored code hacky

00:41:31,099 --> 00:41:36,770
code inside shame dot CSS the very last

00:41:35,180 --> 00:41:39,319
thing I want to say to you or leave you

00:41:36,770 --> 00:41:42,290
with is this quote by Sir Robert

00:41:39,319 --> 00:41:43,849
baden-powell Robert baden-powell is the

00:41:42,290 --> 00:41:47,420
founder of the Boy Scouts a movement

00:41:43,849 --> 00:41:49,849
or was he's dead now and he said he

00:41:47,420 --> 00:41:50,970
famously said to his Boy Scouts always

00:41:49,849 --> 00:41:53,819
leave the camera

00:41:50,970 --> 00:41:55,200
cleaner than when you found it I'd like

00:41:53,819 --> 00:41:57,270
to think that as developers we have the

00:41:55,200 --> 00:41:59,730
same responsibility to leave the

00:41:57,270 --> 00:42:01,400
codebase cleaner than when we found it

00:41:59,730 --> 00:42:10,860
thank you very much for your time

00:42:01,400 --> 00:42:10,860

YouTube URL: https://www.youtube.com/watch?v=kbGYPm9uYfk


