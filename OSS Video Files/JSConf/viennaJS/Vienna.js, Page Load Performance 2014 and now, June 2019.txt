Title: Vienna.js, Page Load Performance 2014 and now, June 2019
Publication date: 2019-06-27
Playlist: viennaJS
Description: 
	Talk by Roland Schütz: 

I did a technology update on a website, which was developed and super optimized 2014. It was super interesting to see what works similar and what really changed. The result is a high performant modern website, which follows page speed best practises.  Especially for image loading is super interesting. The average mobile website page weight is ~50% images. So we talk about responsive images, lazy loading, progressive loading and other techniques that will improve the usability of your site or app.  After the talk you will definietly know more about how to optimize websites and images (way deeper than just responsive images).
Starting up security

By Stephan Pötschner
Security from a developers perspective: which types of attack to expect? What you can do to improve your security?
Captions: 
	00:00:00,000 --> 00:00:06,120
okay so I want to give you a practical

00:00:02,190 --> 00:00:07,890
talk on page load performance you

00:00:06,120 --> 00:00:10,320
probably many of you have seen these

00:00:07,890 --> 00:00:12,900
talks where you talk like oh this is how

00:00:10,320 --> 00:00:17,940
we start everything and in the end it's

00:00:12,900 --> 00:00:21,570
perfect real projects are never perfect

00:00:17,940 --> 00:00:22,949
because you have to work on the stuff

00:00:21,570 --> 00:00:26,160
you already have you have some

00:00:22,949 --> 00:00:28,109
dependencies you have some weird font

00:00:26,160 --> 00:00:32,160
libraries or whatever and you have to

00:00:28,109 --> 00:00:35,130
work with what you have also you can't

00:00:32,160 --> 00:00:38,460
optimize perfectly but you have to find

00:00:35,130 --> 00:00:40,500
a good middle ground and I'll try to

00:00:38,460 --> 00:00:42,690
talk about that and in the end you'll

00:00:40,500 --> 00:00:46,469
see that I'm trying to get perfect again

00:00:42,690 --> 00:00:50,910
and they'll be quite nerdy the whole

00:00:46,469 --> 00:00:53,489
thing started 2014 2014 I built this

00:00:50,910 --> 00:00:57,420
website with great technologies like

00:00:53,489 --> 00:00:59,699
jQuery and at the time it was a really

00:00:57,420 --> 00:01:03,329
cool website the whole thing with this

00:00:59,699 --> 00:01:05,549
triangle all rendered in CSS was really

00:01:03,329 --> 00:01:08,970
like fancy at the time and really cool

00:01:05,549 --> 00:01:12,060
and since then people still like to

00:01:08,970 --> 00:01:14,100
design and I didn't like to tech anymore

00:01:12,060 --> 00:01:17,700
and also the client didn't like to tech

00:01:14,100 --> 00:01:22,770
anymore because the backend looked like

00:01:17,700 --> 00:01:24,990
this and there were many we have some

00:01:22,770 --> 00:01:26,869
performance issues based on old

00:01:24,990 --> 00:01:31,049
technologies and things like that

00:01:26,869 --> 00:01:33,270
also there was in parallel WordPress

00:01:31,049 --> 00:01:36,710
block and the performance he was really

00:01:33,270 --> 00:01:39,540
bad you can see loading you can see bits

00:01:36,710 --> 00:01:42,720
loading almost 20 megabyte of data for

00:01:39,540 --> 00:01:46,460
opening the homepage of the block so

00:01:42,720 --> 00:01:50,180
there was a bit of pain in the ass so

00:01:46,460 --> 00:01:52,530
the idea was to make a full update

00:01:50,180 --> 00:01:54,479
technology update so we tried to take

00:01:52,530 --> 00:01:57,200
the code which or which still works and

00:01:54,479 --> 00:02:03,540
making modern and integrate it in a new

00:01:57,200 --> 00:02:07,409
CMS system the final CMS looks like this

00:02:03,540 --> 00:02:09,899
so the idea is that is the the CMS looks

00:02:07,409 --> 00:02:13,740
like the website and you can just inline

00:02:09,899 --> 00:02:15,240
write all the content you want and have

00:02:13,740 --> 00:02:21,150
everything like easy to understand

00:02:15,240 --> 00:02:26,490
instead of this instead of this thing

00:02:21,150 --> 00:02:28,950
here yes so this is where we started we

00:02:26,490 --> 00:02:34,680
have two projects which are using

00:02:28,950 --> 00:02:38,400
different code written in 2014 it's

00:02:34,680 --> 00:02:43,050
still quite okay but I want to have it

00:02:38,400 --> 00:02:46,650
better let's see if we can go there the

00:02:43,050 --> 00:02:49,500
first one was switches or I just ported

00:02:46,650 --> 00:02:53,430
the existing code to the new CMS system

00:02:49,500 --> 00:02:56,640
I took all the same transcript all the

00:02:53,430 --> 00:02:58,980
same CSS all the same HTML and just

00:02:56,640 --> 00:03:03,480
wrapped it in a new system the first

00:02:58,980 --> 00:03:06,060
thing which made problems was the sprite

00:03:03,480 --> 00:03:09,300
maps I'm not sure if all of you know

00:03:06,060 --> 00:03:12,090
that the idea was that if you have many

00:03:09,300 --> 00:03:15,240
small icons they take quite a long time

00:03:12,090 --> 00:03:17,280
to load because at the time a browser

00:03:15,240 --> 00:03:21,900
did only load for resources at the same

00:03:17,280 --> 00:03:24,210
time from one domain and so instead you

00:03:21,900 --> 00:03:26,220
make one big picture where all the small

00:03:24,210 --> 00:03:30,090
icons are in in it and then you just

00:03:26,220 --> 00:03:32,820
always use parts of that that was the

00:03:30,090 --> 00:03:36,750
best practice kind of macro optimization

00:03:32,820 --> 00:03:39,000
at the time it worked with compass so we

00:03:36,750 --> 00:03:42,480
have a Ruby dependency on it and it was

00:03:39,000 --> 00:03:45,690
quite a pain in the ass to to use this

00:03:42,480 --> 00:03:48,150
technology so we threw it away and we

00:03:45,690 --> 00:03:50,580
now just include icons normally yeah

00:03:48,150 --> 00:03:52,380
simple is never simple you think like oh

00:03:50,580 --> 00:03:54,210
I just take tit analogies and then it

00:03:52,380 --> 00:03:56,160
takes you two hours to just be able to

00:03:54,210 --> 00:03:59,400
start it up again on the development

00:03:56,160 --> 00:04:01,890
machine also all optimizations are

00:03:59,400 --> 00:04:05,580
trade-offs things like this theory is

00:04:01,890 --> 00:04:07,530
the sprite map right now it optimizes

00:04:05,580 --> 00:04:09,240
the speed but it made development more

00:04:07,530 --> 00:04:11,220
complex and you should always try to

00:04:09,240 --> 00:04:14,390
find the trader the trade-off that makes

00:04:11,220 --> 00:04:18,420
sense so you don't optimize everything

00:04:14,390 --> 00:04:20,880
so I said okay we don't need sprite maps

00:04:18,420 --> 00:04:24,780
anymore let's just include it as normal

00:04:20,880 --> 00:04:27,340
icons and the code became easier the

00:04:24,780 --> 00:04:30,150
biggest thing on a website are normally

00:04:27,340 --> 00:04:33,970
images they take up more than 50% of the

00:04:30,150 --> 00:04:37,020
of the of the kilobytes normally and so

00:04:33,970 --> 00:04:41,530
optimizing images is very important in

00:04:37,020 --> 00:04:44,290
in this original version responsive

00:04:41,530 --> 00:04:46,750
images did not exist yet so there were

00:04:44,290 --> 00:04:49,900
some JavaScript libraries who try to do

00:04:46,750 --> 00:04:51,250
that in browsers by by measuring the the

00:04:49,900 --> 00:04:54,729
size of the browser and then with

00:04:51,250 --> 00:04:56,440
JavaScript loading images so I got rid

00:04:54,729 --> 00:05:00,160
of all of that and used responsive

00:04:56,440 --> 00:05:04,240
images the basic idea is your website is

00:05:00,160 --> 00:05:06,250
not only looked at in one browser but we

00:05:04,240 --> 00:05:08,470
have many different browser sizes there

00:05:06,250 --> 00:05:11,410
are many different devices and you want

00:05:08,470 --> 00:05:13,780
to load for each device the image which

00:05:11,410 --> 00:05:16,860
is crystal sharp but at the same time

00:05:13,780 --> 00:05:19,630
not too big because it's wasted

00:05:16,860 --> 00:05:21,850
bandwidth so there are two reasons for

00:05:19,630 --> 00:05:23,200
Responsive images there's our direction

00:05:21,850 --> 00:05:25,690
so you can show different images for

00:05:23,200 --> 00:05:27,520
different screen sizes or different

00:05:25,690 --> 00:05:27,729
layouts I don't care about that right

00:05:27,520 --> 00:05:32,080
now

00:05:27,729 --> 00:05:33,520
this would be the idea here there's a

00:05:32,080 --> 00:05:36,039
picture element and then there's the

00:05:33,520 --> 00:05:38,320
performance thing where we have the

00:05:36,039 --> 00:05:41,639
exactly same image but in multi

00:05:38,320 --> 00:05:44,830
different in multiple different versions

00:05:41,639 --> 00:05:48,360
this is defined with sizes and source

00:05:44,830 --> 00:05:51,820
set in source set you have two options

00:05:48,360 --> 00:05:53,770
always use this one here so what this is

00:05:51,820 --> 00:05:56,320
doing is that I'm here defining a

00:05:53,770 --> 00:05:58,930
fallback image this is the one or not

00:05:56,320 --> 00:06:02,470
yeah this is like the fallback image and

00:05:58,930 --> 00:06:05,380
then I'm defining a source set and this

00:06:02,470 --> 00:06:09,940
means I'm defining hey this lighthouse

00:06:05,380 --> 00:06:11,919
image exists with 100 pixel width with

00:06:09,940 --> 00:06:14,169
200 pixels four hundred eight hundred

00:06:11,919 --> 00:06:16,360
thousand thousand four hundred thousand

00:06:14,169 --> 00:06:19,510
eight hundred so if I'm on a really big

00:06:16,360 --> 00:06:21,099
screen it will take the big image if I'm

00:06:19,510 --> 00:06:23,320
on a very small screen it will take the

00:06:21,099 --> 00:06:25,720
small image and this will be like five

00:06:23,320 --> 00:06:27,460
percent of this big screen so it's fast

00:06:25,720 --> 00:06:32,889
on mobile because it only loads the

00:06:27,460 --> 00:06:35,289
small thing the second part which I

00:06:32,889 --> 00:06:38,169
mentioned here at the top is the sizes

00:06:35,289 --> 00:06:41,169
this is the most typical use case where

00:06:38,169 --> 00:06:44,710
you write 50 few widths or

00:06:41,169 --> 00:06:47,919
the few risk means the browser with in

00:06:44,710 --> 00:06:49,540
in CSS pixels so ignore retina and

00:06:47,919 --> 00:06:49,930
everything the browser takes care of

00:06:49,540 --> 00:06:53,440
that

00:06:49,930 --> 00:06:56,020
just normal uses pixels and here it

00:06:53,440 --> 00:06:59,199
would take half of the browser width as

00:06:56,020 --> 00:07:03,790
picture size and you always need to do

00:06:59,199 --> 00:07:05,770
that in CSS and here as well with the

00:07:03,790 --> 00:07:08,260
sizes attribute because the browser

00:07:05,770 --> 00:07:10,449
fetches this and does not understand yet

00:07:08,260 --> 00:07:16,630
the CSS and still loads already record

00:07:10,449 --> 00:07:19,419
image and then depending on your on your

00:07:16,630 --> 00:07:20,979
device it automatically picks up the

00:07:19,419 --> 00:07:22,660
right image you don't really have to

00:07:20,979 --> 00:07:24,400
hear about the other thing just give

00:07:22,660 --> 00:07:26,860
that give it a lot of different size

00:07:24,400 --> 00:07:29,950
options a lot of different images and

00:07:26,860 --> 00:07:33,850
define your size is the easiest one is

00:07:29,950 --> 00:07:36,460
to just define sizes 100% you can't be

00:07:33,850 --> 00:07:40,030
really wrong here but on big screens you

00:07:36,460 --> 00:07:42,389
load some some unnecessary images so if

00:07:40,030 --> 00:07:44,520
you use some some libraries who

00:07:42,389 --> 00:07:48,639
automatically give you responsive images

00:07:44,520 --> 00:07:52,870
they normally use 100% view with which

00:07:48,639 --> 00:07:55,150
is kind of ok but not perfect if you

00:07:52,870 --> 00:07:57,610
write it manually and it just need to

00:07:55,150 --> 00:08:05,440
write and then leave once it's even

00:07:57,610 --> 00:08:08,050
better so this can grow quite large but

00:08:05,440 --> 00:08:10,210
you just do it once so you see here I

00:08:08,050 --> 00:08:14,020
have an image up here I have an image

00:08:10,210 --> 00:08:16,810
and it's just defined here with three

00:08:14,020 --> 00:08:19,150
breakpoints what size it will have and

00:08:16,810 --> 00:08:21,190
then I give loads of image options and

00:08:19,150 --> 00:08:22,650
the browser figures out which one to

00:08:21,190 --> 00:08:27,580
take

00:08:22,650 --> 00:08:29,860
that's the idea about responsive images

00:08:27,580 --> 00:08:31,990
the problem here still is if you have a

00:08:29,860 --> 00:08:34,330
very long page and you have many

00:08:31,990 --> 00:08:38,110
pictures maybe like four waist pictures

00:08:34,330 --> 00:08:40,169
which look cool that they all will all

00:08:38,110 --> 00:08:43,779
be loaded when you first open the page

00:08:40,169 --> 00:08:45,279
so the next thing you want to Mize is to

00:08:43,779 --> 00:08:48,760
only show the content which is shown

00:08:45,279 --> 00:08:52,390
right now and everything else later this

00:08:48,760 --> 00:08:53,410
is the concept of lazy sizes so let me

00:08:52,390 --> 00:08:57,010
just

00:08:53,410 --> 00:08:59,890
jump forward here so this is an example

00:08:57,010 --> 00:09:01,960
how a page would load in the beginning

00:08:59,890 --> 00:09:04,390
you see if just loaded a very bad image

00:09:01,960 --> 00:09:07,870
it looks the good one now and if I

00:09:04,390 --> 00:09:09,580
scroll down as soon as the scroll in the

00:09:07,870 --> 00:09:12,160
viewport it will load the

00:09:09,580 --> 00:09:14,230
high-resolution image and so on this

00:09:12,160 --> 00:09:17,140
page I have ten images but when I first

00:09:14,230 --> 00:09:20,260
open it it only loads one image and the

00:09:17,140 --> 00:09:21,520
other others come later there's a really

00:09:20,260 --> 00:09:25,600
good library for that which is called

00:09:21,520 --> 00:09:28,180
lazy sizes basically what you do is you

00:09:25,600 --> 00:09:31,780
just define instead of setting the sizes

00:09:28,180 --> 00:09:36,130
source set sizes and sources directly

00:09:31,780 --> 00:09:39,340
you add this data - before and then

00:09:36,130 --> 00:09:42,250
there's a Chavez script file laser sizes

00:09:39,340 --> 00:09:44,680
yes which looks for all images which are

00:09:42,250 --> 00:09:47,170
called lazy load checks if it's already

00:09:44,680 --> 00:09:50,890
in cache if it's in a cache it puts the

00:09:47,170 --> 00:09:53,440
right image there if not it will load

00:09:50,890 --> 00:09:57,100
that image or only when you come near

00:09:53,440 --> 00:10:00,840
the viewport and this is yeah you don't

00:09:57,100 --> 00:10:00,840
need to care about much of that anymore

00:10:01,080 --> 00:10:08,650
so this is the result you get and I'm on

00:10:06,160 --> 00:10:12,460
purpose not showing you too much code

00:10:08,650 --> 00:10:14,950
because it's really easy if you read the

00:10:12,460 --> 00:10:18,970
readme on github to understand how it

00:10:14,950 --> 00:10:22,840
looks I want to focus a bit more on how

00:10:18,970 --> 00:10:26,410
to do it so now this is the time where

00:10:22,840 --> 00:10:29,980
we have a decent website we have some

00:10:26,410 --> 00:10:32,170
CSS some JavaScript it loads the page we

00:10:29,980 --> 00:10:34,270
have responsive images and lazy loading

00:10:32,170 --> 00:10:39,400
which will already give you the the

00:10:34,270 --> 00:10:41,890
biggest amount of improvement and now we

00:10:39,400 --> 00:10:45,220
want to further optimize it this is

00:10:41,890 --> 00:10:49,090
where we start to open the developer

00:10:45,220 --> 00:10:50,920
tools and and there's a network tab and

00:10:49,090 --> 00:10:54,040
in the network tab you want to say this

00:10:50,920 --> 00:10:56,320
able cache and when you have to cache

00:10:54,040 --> 00:11:02,350
disabled you will always see how it

00:10:56,320 --> 00:11:04,180
would first load the page so in my well

00:11:02,350 --> 00:11:06,470
as always the first thing which loads

00:11:04,180 --> 00:11:08,330
will be the HTML page

00:11:06,470 --> 00:11:10,070
so it is on my local development machine

00:11:08,330 --> 00:11:13,160
so that's why it's a bit slow that's

00:11:10,070 --> 00:11:15,380
okay because it's just for testing you

00:11:13,160 --> 00:11:18,710
see the first thing which loads is my

00:11:15,380 --> 00:11:23,480
HTML file and then it loads a cookie

00:11:18,710 --> 00:11:27,800
consent CSS then it loads my then it

00:11:23,480 --> 00:11:29,810
loads a web font CSS then it loads my

00:11:27,800 --> 00:11:33,140
actual app CSS so this is where all my

00:11:29,810 --> 00:11:36,440
styles are then it loads it loads lacy

00:11:33,140 --> 00:11:39,200
sizes which we talked about already then

00:11:36,440 --> 00:11:41,570
it starts to load some images and then

00:11:39,200 --> 00:11:46,040
there's some further stuff probably

00:11:41,570 --> 00:11:50,320
interesting the reusing web font do you

00:11:46,040 --> 00:11:53,900
have custom fonts on the website so

00:11:50,320 --> 00:11:57,560
normally the the browser does not render

00:11:53,900 --> 00:12:00,770
any content xed content until the font

00:11:57,560 --> 00:12:06,230
is loaded so you'll see just white till

00:12:00,770 --> 00:12:08,960
the font load and you notice here at the

00:12:06,230 --> 00:12:12,980
top this is where we first start to load

00:12:08,960 --> 00:12:15,230
our our font which is quite late because

00:12:12,980 --> 00:12:17,210
it's one of the most important things if

00:12:15,230 --> 00:12:20,240
you open a web site the content should

00:12:17,210 --> 00:12:22,100
be visible as soon as possible so what I

00:12:20,240 --> 00:12:28,370
would like to do is to get the front

00:12:22,100 --> 00:12:31,940
loading more up here oh yeah there's

00:12:28,370 --> 00:12:35,300
some small side notes as I said this is

00:12:31,940 --> 00:12:38,390
local development and also if you work

00:12:35,300 --> 00:12:40,610
locally if you load a page the timing

00:12:38,390 --> 00:12:42,440
will change every time every time you

00:12:40,610 --> 00:12:45,380
execute on your local system something

00:12:42,440 --> 00:12:47,870
is slower or or faster that don't look

00:12:45,380 --> 00:12:50,060
at the actual numbers just look at the

00:12:47,870 --> 00:12:52,700
relationship which loads after what and

00:12:50,060 --> 00:12:56,560
how are things progressing and not so

00:12:52,700 --> 00:12:59,780
much on the speed of an individual thing

00:12:56,560 --> 00:13:03,470
also if you just open it up like this

00:12:59,780 --> 00:13:06,920
the downloading is really fast if I'm

00:13:03,470 --> 00:13:09,140
opening in my local browser image which

00:13:06,920 --> 00:13:12,440
is on my local machine downloading is

00:13:09,140 --> 00:13:16,220
really fast so you see actually these

00:13:12,440 --> 00:13:19,550
are huge images no no these are huge

00:13:16,220 --> 00:13:21,980
images 1 megabyte but it's tiny here

00:13:19,550 --> 00:13:25,790
and we'll see how to fix that a bit

00:13:21,980 --> 00:13:28,390
later the first thing which I would

00:13:25,790 --> 00:13:33,020
recommend you to start development is

00:13:28,390 --> 00:13:39,560
instead of including CSS resource just

00:13:33,020 --> 00:13:43,640
inline all your CSS in HTML so of course

00:13:39,560 --> 00:13:46,340
you will create a app CSS file but then

00:13:43,640 --> 00:13:49,310
instead of referencing it with link just

00:13:46,340 --> 00:13:51,620
include all of that in the HTML we will

00:13:49,310 --> 00:13:55,180
talk bit more about that later but now

00:13:51,620 --> 00:13:59,540
that would be the first step to do and

00:13:55,180 --> 00:14:01,850
now now we get a bit of different

00:13:59,540 --> 00:14:03,890
perspective this one is again our weird

00:14:01,850 --> 00:14:09,410
front loading CSS which we can get rid

00:14:03,890 --> 00:14:10,730
of but we start by loading the HTML and

00:14:09,410 --> 00:14:12,740
then it already starts loading the

00:14:10,730 --> 00:14:16,850
pictures then it loads the JavaScript

00:14:12,740 --> 00:14:17,440
and and so on our font is still at the

00:14:16,850 --> 00:14:21,790
bottom

00:14:17,440 --> 00:14:23,660
so our ideal graph how would that look

00:14:21,790 --> 00:14:27,710
this is actually a question you should

00:14:23,660 --> 00:14:31,910
ask yourself and for most websites ideal

00:14:27,710 --> 00:14:34,880
graph would be first load HTML then load

00:14:31,910 --> 00:14:37,520
the CSS you need because without CSS

00:14:34,880 --> 00:14:39,050
nothing can really render this is why

00:14:37,520 --> 00:14:41,330
I'm right now just in lining all those

00:14:39,050 --> 00:14:44,450
users so it just doesn't have any effect

00:14:41,330 --> 00:14:46,460
on loading and then probably the first

00:14:44,450 --> 00:14:49,550
thing you want to load is font if you

00:14:46,460 --> 00:14:53,420
have found and then you want to load the

00:14:49,550 --> 00:14:55,490
most important images depending on how

00:14:53,420 --> 00:15:00,830
this screen looks the most important

00:14:55,490 --> 00:15:02,750
images so how to fix the font loading

00:15:00,830 --> 00:15:05,810
there are a few things which you can

00:15:02,750 --> 00:15:10,760
should consider since a while there's

00:15:05,810 --> 00:15:13,160
web wofe too which is half the size of

00:15:10,760 --> 00:15:15,500
the old font so if your old project

00:15:13,160 --> 00:15:18,760
create a new version of your font which

00:15:15,500 --> 00:15:21,560
includes wofe - it's way smaller and

00:15:18,760 --> 00:15:25,520
here you can see there's a property

00:15:21,560 --> 00:15:29,510
called font display font display defines

00:15:25,520 --> 00:15:31,430
how browser should react if you load a

00:15:29,510 --> 00:15:33,350
website and the font is not yet loaded

00:15:31,430 --> 00:15:35,300
so if I open the

00:15:33,350 --> 00:15:37,640
the website the first time I'm using a

00:15:35,300 --> 00:15:39,520
web font it's not yet loaded the typical

00:15:37,640 --> 00:15:43,910
behavior would be that it's just white

00:15:39,520 --> 00:15:45,800
which makes it it feels like it's very

00:15:43,910 --> 00:15:49,130
slow because the thing I'm actually

00:15:45,800 --> 00:15:51,320
caring about the the text is not there

00:15:49,130 --> 00:15:54,680
so there is an option which is called

00:15:51,320 --> 00:15:58,010
swap and it's in most cases the

00:15:54,680 --> 00:16:02,000
recommended version what swap does is it

00:15:58,010 --> 00:16:05,240
takes a system font until the real web

00:16:02,000 --> 00:16:07,790
phone is loaded so this causes a real

00:16:05,240 --> 00:16:11,480
layout so when you loads the web font

00:16:07,790 --> 00:16:13,820
things move a bit but very fast you

00:16:11,480 --> 00:16:15,950
already have content to to read and so

00:16:13,820 --> 00:16:17,900
if the person opens the website the

00:16:15,950 --> 00:16:22,850
instantly see text which is really great

00:16:17,900 --> 00:16:26,360
and then in HTML at the top you can

00:16:22,850 --> 00:16:28,700
define something called preload and is

00:16:26,360 --> 00:16:31,670
pretty load you tell the browser what it

00:16:28,700 --> 00:16:35,300
should load even if it doesn't yet know

00:16:31,670 --> 00:16:38,840
that it needs it so in my example the

00:16:35,300 --> 00:16:43,070
browser typically opens the website in

00:16:38,840 --> 00:16:45,680
the website it includes the font which

00:16:43,070 --> 00:16:47,930
is a not self-hosted but it's hosted on

00:16:45,680 --> 00:16:51,830
a CDN so I can't directly linked to the

00:16:47,930 --> 00:16:54,620
that font and so I'm downloading as a

00:16:51,830 --> 00:16:57,770
CSS file and that CSS file it finds that

00:16:54,620 --> 00:17:03,260
it needs font and then it loads the font

00:16:57,770 --> 00:17:05,420
so this is like HTML CSS font and I want

00:17:03,260 --> 00:17:07,640
to get this users in the middle way so

00:17:05,420 --> 00:17:09,740
I'm defining preload and preload means

00:17:07,640 --> 00:17:11,689
when it's reading one of the first bytes

00:17:09,740 --> 00:17:15,680
of HTML it already knows all I need to

00:17:11,689 --> 00:17:18,550
load that font so what this means that

00:17:15,680 --> 00:17:22,970
actually it moves my font to the top and

00:17:18,550 --> 00:17:25,760
here I'm I'm optimizing for the typical

00:17:22,970 --> 00:17:29,690
use case so you have seen actually there

00:17:25,760 --> 00:17:31,610
are many different font versions I care

00:17:29,690 --> 00:17:35,270
about the one which will happen most of

00:17:31,610 --> 00:17:37,940
the time so Chrome or Firefox or modern

00:17:35,270 --> 00:17:41,030
browsers in modern browsers it supports

00:17:37,940 --> 00:17:44,740
both - so I'm pre loading walk - and you

00:17:41,030 --> 00:17:44,740
see it's the second thing already and

00:17:44,770 --> 00:17:49,850
yeah another thing is you can

00:17:47,150 --> 00:17:53,780
put your javascript in the header but

00:17:49,850 --> 00:17:55,430
define deferred differ and that means it

00:17:53,780 --> 00:17:59,870
will already start loading the

00:17:55,430 --> 00:18:08,870
JavaScript but it executed only after it

00:17:59,870 --> 00:18:11,300
finished creating the Dom so yeah also I

00:18:08,870 --> 00:18:16,280
removed some extra resources and this is

00:18:11,300 --> 00:18:18,680
how it looks now so you can see the big

00:18:16,280 --> 00:18:22,059
things are the HTML at the top which is

00:18:18,680 --> 00:18:26,030
so slow and then we have many resources

00:18:22,059 --> 00:18:28,220
I talked about that that it doesn't

00:18:26,030 --> 00:18:30,460
really show how long something that will

00:18:28,220 --> 00:18:32,840
download when I open it on the web and

00:18:30,460 --> 00:18:38,620
to fix that there's something called

00:18:32,840 --> 00:18:38,620
network throttling so what you can do is

00:18:39,070 --> 00:18:44,900
here at at the top there's Network

00:18:42,770 --> 00:18:46,760
throttling if you open it you can define

00:18:44,900 --> 00:18:49,910
how fast it should download assets or

00:18:46,760 --> 00:18:53,480
fake to asset down down to the assets so

00:18:49,910 --> 00:18:56,840
I'm changing it to 3G and then the

00:18:53,480 --> 00:18:58,730
website loads as if I would be on 3G and

00:18:56,840 --> 00:19:01,520
now it gives me a better understanding

00:18:58,730 --> 00:19:04,130
of how something would load I'm right

00:19:01,520 --> 00:19:06,650
now only showing you the desktop version

00:19:04,130 --> 00:19:08,450
of course the mobile is also important

00:19:06,650 --> 00:19:11,360
but on a desktop it's not really

00:19:08,450 --> 00:19:14,179
realistic that it you're only have

00:19:11,360 --> 00:19:16,460
sweetie but it's still great because it

00:19:14,179 --> 00:19:18,440
gives you enough time to look at how

00:19:16,460 --> 00:19:20,780
things are rendered and how things are

00:19:18,440 --> 00:19:22,250
reacting also my computer is slow

00:19:20,780 --> 00:19:23,929
because of the screen recording

00:19:22,250 --> 00:19:26,990
everything so it's really easy to see

00:19:23,929 --> 00:19:29,210
when I first load a page you see it

00:19:26,990 --> 00:19:31,640
loads the structure then it loads the

00:19:29,210 --> 00:19:34,030
fonts and then it starts to load the

00:19:31,640 --> 00:19:37,760
images and they take quite long time

00:19:34,030 --> 00:19:40,870
because there's a beak so this is room

00:19:37,760 --> 00:19:40,870
let's do it again

00:19:44,950 --> 00:19:50,210
yeah so it loads it first has the

00:19:47,360 --> 00:19:54,440
structure then it puts the text in and

00:19:50,210 --> 00:19:59,560
then it starts to put images in so this

00:19:54,440 --> 00:20:02,570
is now with 3G selected and you can see

00:19:59,560 --> 00:20:07,160
downloading these images these two big

00:20:02,570 --> 00:20:10,010
images takes up most of the time so so

00:20:07,160 --> 00:20:12,940
now this is something we can optimize we

00:20:10,010 --> 00:20:16,100
talked about lazy loading of images and

00:20:12,940 --> 00:20:19,160
if you just consider the page load time

00:20:16,100 --> 00:20:21,340
the full page load time lazy loading

00:20:19,160 --> 00:20:23,930
actually makes it worse

00:20:21,340 --> 00:20:27,620
because if I would open the page like

00:20:23,930 --> 00:20:30,800
this it will load and it just loads the

00:20:27,620 --> 00:20:33,530
resources but if I if I use lazy load it

00:20:30,800 --> 00:20:36,470
will first load some small version of

00:20:33,530 --> 00:20:40,400
the image which is some bandwidth then

00:20:36,470 --> 00:20:43,190
it needs to use the JavaScript to figure

00:20:40,400 --> 00:20:46,130
out what images to really load and then

00:20:43,190 --> 00:20:48,620
it loads the real images so the load

00:20:46,130 --> 00:20:52,280
time is longer but the perceived load

00:20:48,620 --> 00:20:55,280
time is better so if you take a look at

00:20:52,280 --> 00:20:57,920
how it will look now I already see all

00:20:55,280 --> 00:21:03,260
the structure I and this is just like

00:20:57,920 --> 00:21:06,470
really bad images and they will now

00:21:03,260 --> 00:21:07,100
appear the good ones but for this long

00:21:06,470 --> 00:21:09,050
time

00:21:07,100 --> 00:21:12,500
I already saw there are some pictures

00:21:09,050 --> 00:21:14,930
and so I already can understand what the

00:21:12,500 --> 00:21:19,310
web page is showing me and it feels way

00:21:14,930 --> 00:21:21,710
faster so this is what we see here now

00:21:19,310 --> 00:21:23,720
we are loading some really tiny pictures

00:21:21,710 --> 00:21:26,900
here at the top you see they have less

00:21:23,720 --> 00:21:28,580
than 10 kilobyte and then as the last

00:21:26,900 --> 00:21:32,300
element of all we're loading the big

00:21:28,580 --> 00:21:35,630
pictures so here the user can already

00:21:32,300 --> 00:21:37,880
see everything and this is just till if

00:21:35,630 --> 00:21:40,630
they can see the the high-resolution

00:21:37,880 --> 00:21:44,480
images that feels way better

00:21:40,630 --> 00:21:49,670
so the perceived loading time is way

00:21:44,480 --> 00:21:52,340
better and the content is I've no idea

00:21:49,670 --> 00:21:55,880
what I typed here also add the content

00:21:52,340 --> 00:21:58,310
is already faster to see so people can

00:21:55,880 --> 00:21:58,700
actually start reading text till the

00:21:58,310 --> 00:22:02,360
higher

00:21:58,700 --> 00:22:06,710
lucien images are loaded but the page

00:22:02,360 --> 00:22:11,720
load takes longer and also the biggest

00:22:06,710 --> 00:22:14,570
resources are loaded last so so it's

00:22:11,720 --> 00:22:16,640
it's not really optimal if you know this

00:22:14,570 --> 00:22:18,560
asset will take the longest time to

00:22:16,640 --> 00:22:20,690
download and then you wait the longest

00:22:18,560 --> 00:22:27,100
till you start downloading it that's not

00:22:20,690 --> 00:22:30,290
really great so I wasn't happy with that

00:22:27,100 --> 00:22:33,530
so I had another idea what I actually

00:22:30,290 --> 00:22:36,770
want to have is that very fast there's

00:22:33,530 --> 00:22:39,470
some kind of unsharp picture so you can

00:22:36,770 --> 00:22:42,020
already understand how the web site

00:22:39,470 --> 00:22:44,030
looks and then high-resolution images is

00:22:42,020 --> 00:22:45,920
loaded but I want to load the

00:22:44,030 --> 00:22:51,560
high-resolution image without JavaScript

00:22:45,920 --> 00:22:55,070
so I cannot use laser sizes so what I

00:22:51,560 --> 00:22:57,800
was trying here is I am using a normal

00:22:55,070 --> 00:23:00,830
responsive image so we source that and

00:22:57,800 --> 00:23:02,690
incises so the browser sees it

00:23:00,830 --> 00:23:05,690
understands it and loads the quark image

00:23:02,690 --> 00:23:10,960
and I'm using a background image on this

00:23:05,690 --> 00:23:15,860
image itself to show something fast and

00:23:10,960 --> 00:23:20,150
this looked like this and I wasn't

00:23:15,860 --> 00:23:23,000
really happy because what what happened

00:23:20,150 --> 00:23:26,210
now is that when I first opened the

00:23:23,000 --> 00:23:30,950
website you see a bit longer this gray

00:23:26,210 --> 00:23:33,350
background and so it flickers it is

00:23:30,950 --> 00:23:37,730
first load and the reason for that is it

00:23:33,350 --> 00:23:40,190
first loads HTML this use s and then the

00:23:37,730 --> 00:23:43,460
browser has to understand the CSS and

00:23:40,190 --> 00:23:45,110
only after it understood the CSS it can

00:23:43,460 --> 00:23:50,510
start to download the background image

00:23:45,110 --> 00:23:55,520
and this is why this feels worse than

00:23:50,510 --> 00:23:57,230
the Lazy sizes and if you remember we

00:23:55,520 --> 00:23:59,060
talked about something before how we

00:23:57,230 --> 00:24:01,930
could tell the browser that it actually

00:23:59,060 --> 00:24:07,730
needs this background image really fast

00:24:01,930 --> 00:24:08,930
there's preload again so I'm defining at

00:24:07,730 --> 00:24:11,030
the top really fast

00:24:08,930 --> 00:24:12,410
hey please download these two background

00:24:11,030 --> 00:24:17,720
images I'll need them

00:24:12,410 --> 00:24:20,270
and oops so what it does it loads the

00:24:17,720 --> 00:24:23,480
HTML it's instantly starts to download

00:24:20,270 --> 00:24:27,440
the background images and then here

00:24:23,480 --> 00:24:31,330
later but not as late as before it

00:24:27,440 --> 00:24:37,630
starts to download the big images and

00:24:31,330 --> 00:24:41,870
this you know it doesn't it sort yeah

00:24:37,630 --> 00:24:44,120
and so this now looks like this the

00:24:41,870 --> 00:24:46,400
website appears the background is really

00:24:44,120 --> 00:24:49,730
fast here and then it takes a long time

00:24:46,400 --> 00:24:56,900
to download the big resources but it

00:24:49,730 --> 00:25:00,590
feels like the final website or a yeah

00:24:56,900 --> 00:25:04,160
so these were some micro optimizations

00:25:00,590 --> 00:25:04,370
but micro optimizations which made my

00:25:04,160 --> 00:25:07,940
day

00:25:04,370 --> 00:25:12,140
I enjoy doing that there were some other

00:25:07,940 --> 00:25:15,560
micro optimizations the the old website

00:25:12,140 --> 00:25:18,320
used jQuery and it used it almost only

00:25:15,560 --> 00:25:21,380
for a date picker which was from jQuery

00:25:18,320 --> 00:25:23,660
UI date picker and there's a reason why

00:25:21,380 --> 00:25:27,830
you haven't seen the date picker because

00:25:23,660 --> 00:25:29,630
it's I can't read it's only used if you

00:25:27,830 --> 00:25:33,020
click a button and then there's this

00:25:29,630 --> 00:25:34,760
date picker so you could really easily

00:25:33,020 --> 00:25:40,970
either change it to a different library

00:25:34,760 --> 00:25:42,020
or load it later and I thought maybe for

00:25:40,970 --> 00:25:44,330
the browser to understand this

00:25:42,020 --> 00:25:46,790
javascript takes a bit of time and to

00:25:44,330 --> 00:25:49,700
download it as well I try to remove all

00:25:46,790 --> 00:25:51,380
the jQuery code without having a

00:25:49,700 --> 00:25:54,290
replacement just like my local

00:25:51,380 --> 00:25:57,170
development I removed it and it did not

00:25:54,290 --> 00:25:58,790
change the thing in performance so I

00:25:57,170 --> 00:25:59,210
figured out oh instead of wasting my

00:25:58,790 --> 00:26:02,740
time

00:25:59,210 --> 00:26:08,750
I just keep it in not a perfect world

00:26:02,740 --> 00:26:10,700
but it's fine there's another thing

00:26:08,750 --> 00:26:12,860
there is a separate gallery page which

00:26:10,700 --> 00:26:16,250
has quite a lot of JavaScript for this

00:26:12,860 --> 00:26:18,830
gallery logic actually removing that

00:26:16,250 --> 00:26:21,470
made a difference so this is a separate

00:26:18,830 --> 00:26:25,450
module and so this will only be loaded

00:26:21,470 --> 00:26:25,450
if I want a page where a gallery exists

00:26:26,700 --> 00:26:32,400
in line to users images I did something

00:26:29,429 --> 00:26:35,370
which you probably didn't notice so far

00:26:32,400 --> 00:26:39,990
but if you if you see how this page

00:26:35,370 --> 00:26:42,900
loads this one here is an image but it's

00:26:39,990 --> 00:26:45,960
an SVG and so I could inline that

00:26:42,900 --> 00:26:48,570
SVG in HTML and that's why it's here so

00:26:45,960 --> 00:26:51,380
fast because this is actually one of the

00:26:48,570 --> 00:26:54,630
most important content on this page here

00:26:51,380 --> 00:26:56,669
the goal of this page is that the that

00:26:54,630 --> 00:26:58,799
the user decides do you want to know

00:26:56,669 --> 00:27:01,710
more about the restaurant or about the

00:26:58,799 --> 00:27:04,590
hotel so being able to read this here is

00:27:01,710 --> 00:27:07,770
quite important and so you can inline

00:27:04,590 --> 00:27:10,230
SVG su cheese are normally super small

00:27:07,770 --> 00:27:18,710
so in lining them in the HTML is okay

00:27:10,230 --> 00:27:22,169
and then it's here really fast in Odom

00:27:18,710 --> 00:27:25,320
you could also use Pride Maps I did not

00:27:22,169 --> 00:27:27,780
do that I didn't feel like that's a

00:27:25,320 --> 00:27:31,710
great improvement anymore especially

00:27:27,780 --> 00:27:33,890
with now HTTP - it will not be important

00:27:31,710 --> 00:27:33,890
anymore

00:27:34,610 --> 00:27:40,830
also you remember at the beginning I

00:27:38,730 --> 00:27:44,340
told you that I just inline all these

00:27:40,830 --> 00:27:48,600
users and the reason for that was that

00:27:44,340 --> 00:27:50,340
later I can create their something I'm

00:27:48,600 --> 00:27:52,620
not sure if you know it there's

00:27:50,340 --> 00:27:56,780
something called critical critical paths

00:27:52,620 --> 00:27:59,820
CSS so the idea is you have a tool

00:27:56,780 --> 00:28:02,580
normally in the build step which figures

00:27:59,820 --> 00:28:06,450
out what CSS is used when you first open

00:28:02,580 --> 00:28:08,970
a page and it creates just a separate

00:28:06,450 --> 00:28:10,679
small version of your CSS which is the

00:28:08,970 --> 00:28:13,770
thing you need really really fast and

00:28:10,679 --> 00:28:15,720
then all the CSS which you'll see only

00:28:13,770 --> 00:28:18,210
apps of scrolling will be included later

00:28:15,720 --> 00:28:20,010
so the idea is if you have a big CSS

00:28:18,210 --> 00:28:21,870
file you can split it up in to one in

00:28:20,010 --> 00:28:24,750
two files the one which is really

00:28:21,870 --> 00:28:29,130
important your inline that and the other

00:28:24,750 --> 00:28:31,950
one can be loaded later in my case the

00:28:29,130 --> 00:28:35,100
CSS was so small that creating a

00:28:31,950 --> 00:28:38,640
critical path CSS did not make a

00:28:35,100 --> 00:28:40,950
difference so I kept it simple

00:28:38,640 --> 00:28:42,810
and did not do that because micro

00:28:40,950 --> 00:28:45,810
optimizations always make it harder for

00:28:42,810 --> 00:28:48,180
you to later maintain that if you do a

00:28:45,810 --> 00:28:49,890
lot of crazy micro optimizations it's

00:28:48,180 --> 00:28:51,260
great and then in a year you have to

00:28:49,890 --> 00:28:55,680
change something and you're like ah

00:28:51,260 --> 00:28:59,970
what's all this tooling yeah so it will

00:28:55,680 --> 00:29:04,830
never be perfect no to myself there's

00:28:59,970 --> 00:29:07,850
still way for improvement but it's

00:29:04,830 --> 00:29:13,190
really cool so in the optimal solution

00:29:07,850 --> 00:29:17,220
the page loads in less than a second and

00:29:13,190 --> 00:29:22,500
an even more important thing here is

00:29:17,220 --> 00:29:24,810
that already here the website feels like

00:29:22,500 --> 00:29:26,970
it's finished so way earlier than the

00:29:24,810 --> 00:29:28,710
full load because you can see already

00:29:26,970 --> 00:29:30,780
the HTML and you can see all the

00:29:28,710 --> 00:29:33,000
structure and then it just load some

00:29:30,780 --> 00:29:37,980
high quality stuff which I don't need so

00:29:33,000 --> 00:29:40,290
much so so importantly yeah obviously

00:29:37,980 --> 00:29:44,100
there's one thing which could further be

00:29:40,290 --> 00:29:47,250
improved the loading of the initial HTML

00:29:44,100 --> 00:29:51,150
if you have those as a static resource

00:29:47,250 --> 00:29:55,440
or if you use a series CDN this can also

00:29:51,150 --> 00:29:59,520
be optimized yeah and so this is how it

00:29:55,440 --> 00:30:02,760
looks finally you see I had the browser

00:29:59,520 --> 00:30:08,630
developer tools open so this is uncashed

00:30:02,760 --> 00:30:08,630
loading oops

00:30:09,200 --> 00:30:18,750
and it's here really fast also just as a

00:30:16,140 --> 00:30:21,660
side note do not only optimize the the

00:30:18,750 --> 00:30:25,950
home page I did the other pages as well

00:30:21,660 --> 00:30:27,810
it's just too much for this hog here try

00:30:25,950 --> 00:30:30,180
to focus on the pages which are used

00:30:27,810 --> 00:30:33,900
most often the home page is one of those

00:30:30,180 --> 00:30:36,510
whether you're others yeah I hope you

00:30:33,900 --> 00:30:39,630
liked my thoughts especially on this

00:30:36,510 --> 00:30:41,670
image loading things if you have

00:30:39,630 --> 00:30:44,460
questions you can contact me or of

00:30:41,670 --> 00:30:48,019
course ask questions now thanks

00:30:44,460 --> 00:30:48,019

YouTube URL: https://www.youtube.com/watch?v=Wpz2kRFqTgc


