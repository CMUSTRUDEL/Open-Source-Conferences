Title: Vienna.js, HTML5 & SVG pipeline for interactive experiences, January 2019
Publication date: 2019-02-03
Playlist: viennaJS
Description: 
	Talk By Simon Wallner:

Coming from Console development with very strict rules we had to find our way into the modern frontend world. We build our own pipeline using typescript that enforced compile time checks on code and our SVG assets to reduce the risk of common errors occuring when working in a creative team.
Captions: 
	00:00:00,810 --> 00:00:04,950
this dogs gonna be slightly different

00:00:03,270 --> 00:00:08,610
from the previous talks I guess it would

00:00:04,950 --> 00:00:11,460
be little less technical especially for

00:00:08,610 --> 00:00:13,769
you we're all very deeply in both to

00:00:11,460 --> 00:00:17,039
JavaScript so I have to apologize for

00:00:13,769 --> 00:00:19,609
maybe it might be a bit more a bit more

00:00:17,039 --> 00:00:22,160
shallow and going to different direction

00:00:19,609 --> 00:00:26,849
I'm going to be talking about about

00:00:22,160 --> 00:00:28,949
making html5 games with JavaScript or

00:00:26,849 --> 00:00:32,730
type script in our case and we're

00:00:28,949 --> 00:00:34,860
building heavily on SVG so we that's

00:00:32,730 --> 00:00:40,170
lost in a garden which is a four person

00:00:34,860 --> 00:00:43,110
team and it's two artists two

00:00:40,170 --> 00:00:45,629
programmers or kind of two arts two tech

00:00:43,110 --> 00:00:47,520
and that seems to be working quite nice

00:00:45,629 --> 00:00:52,500
so all the projects are kind of in the

00:00:47,520 --> 00:00:55,530
overlap between argent edge where we

00:00:52,500 --> 00:00:57,239
started out rough three years ago was as

00:00:55,530 --> 00:01:00,660
a video game developer which we still

00:00:57,239 --> 00:01:03,120
are so we did a games called light field

00:01:00,660 --> 00:01:05,939
some PlayStation and Xbox and also steam

00:01:03,120 --> 00:01:07,890
and the fancy racing game and so on so

00:01:05,939 --> 00:01:12,330
it's a bit different from the average

00:01:07,890 --> 00:01:15,390
web stuff we also did VR also in unity

00:01:12,330 --> 00:01:19,470
so that's c-sharp was a demo where you

00:01:15,390 --> 00:01:22,320
could manipulate everyday objects and do

00:01:19,470 --> 00:01:24,000
fancy stuff with it but besides kind of

00:01:22,320 --> 00:01:26,909
games and we are in their own project

00:01:24,000 --> 00:01:28,890
you're also doing contract work so part

00:01:26,909 --> 00:01:31,970
of companies games part of the park is

00:01:28,890 --> 00:01:34,650
part of the company's contract work so

00:01:31,970 --> 00:01:39,900
roughly a year ago or a year and a half

00:01:34,650 --> 00:01:43,680
ago client came to us since I probably

00:01:39,900 --> 00:01:45,509
need html5 games and your game

00:01:43,680 --> 00:01:49,369
developers so can you help us out of

00:01:45,509 --> 00:01:54,000
html5 games I was at world yes of course

00:01:49,369 --> 00:01:56,250
and thing is html5 is kind of different

00:01:54,000 --> 00:01:59,399
technology than what we were used to so

00:01:56,250 --> 00:02:01,229
a lot of the time the good thing was it

00:01:59,399 --> 00:02:02,969
was a relatively small project but we'd

00:02:01,229 --> 00:02:05,280
had a lot of time to do it because the

00:02:02,969 --> 00:02:07,229
client said okay just be done whenever

00:02:05,280 --> 00:02:09,300
it's done so it was very lucky for us

00:02:07,229 --> 00:02:10,800
that we had a lot of time to to develop

00:02:09,300 --> 00:02:12,480
our own tech do some research because

00:02:10,800 --> 00:02:13,409
javascript was quite new to us or the

00:02:12,480 --> 00:02:16,689
kind of the Charles

00:02:13,409 --> 00:02:18,430
ecosystem all the packages and so on

00:02:16,689 --> 00:02:20,049
that was very new to us a lot of time

00:02:18,430 --> 00:02:24,250
when it into learning acting these

00:02:20,049 --> 00:02:29,379
things so in the end we did a couple

00:02:24,250 --> 00:02:39,849
html5 games and here's just a very rough

00:02:29,379 --> 00:02:42,069
demo so the it's a bit smooth if if it's

00:02:39,849 --> 00:02:45,519
not a video and so the constraints that

00:02:42,069 --> 00:02:47,889
we have was html5 has run on every

00:02:45,519 --> 00:02:51,099
platform can modern browser based

00:02:47,889 --> 00:02:55,569
platform and also every aspect ratio so

00:02:51,099 --> 00:02:59,139
from classical landscape desktop

00:02:55,569 --> 00:03:01,959
browsers to portrait mode very tall

00:02:59,139 --> 00:03:05,200
mobile phones and the games are quite

00:03:01,959 --> 00:03:07,120
short is roughly 5 minutes it's reserved

00:03:05,200 --> 00:03:09,879
for 6 different games we've targeting

00:03:07,120 --> 00:03:13,719
different skills and so on so it's it's

00:03:09,879 --> 00:03:14,969
kind of a mix of stuff if you want to

00:03:13,719 --> 00:03:18,579
try something out for yourself here's

00:03:14,969 --> 00:03:20,530
two products that we have proud the last

00:03:18,579 --> 00:03:22,569
one is probably the more exciting one

00:03:20,530 --> 00:03:24,250
it's kind of a very very simple memory

00:03:22,569 --> 00:03:26,590
ish cam or you have to memorize stuff

00:03:24,250 --> 00:03:27,790
and the right one is more of an info

00:03:26,590 --> 00:03:33,040
graphic

00:03:27,790 --> 00:03:34,389
type thing so these are very quick photo

00:03:33,040 --> 00:03:38,500
prototypes that we did for another

00:03:34,389 --> 00:03:40,239
client just for demo purposes and they

00:03:38,500 --> 00:03:42,549
are built on our pipeline and I guess it

00:03:40,239 --> 00:03:45,159
took us three days or something like

00:03:42,549 --> 00:03:48,790
that to build those so it's one once

00:03:45,159 --> 00:03:52,989
everything is running and the pipeline

00:03:48,790 --> 00:03:56,459
works quite smoothly for us okay so of

00:03:52,989 --> 00:03:56,459
your playing so it seems to be working

00:03:57,970 --> 00:04:08,450
yes okay so I'd like to talk a bit about

00:04:05,390 --> 00:04:11,569
kind of why we went where we went

00:04:08,450 --> 00:04:14,540
because there's already JavaScript game

00:04:11,569 --> 00:04:16,579
engines out phaser and so on there's a

00:04:14,540 --> 00:04:18,380
lot of JavaScript games out there but

00:04:16,579 --> 00:04:21,079
still for us it wasn't really a good fit

00:04:18,380 --> 00:04:23,240
so when we saw that project I'm under

00:04:21,079 --> 00:04:25,400
creative director he came up with these

00:04:23,240 --> 00:04:26,870
mood boards so that's not art from him

00:04:25,400 --> 00:04:30,620
but it's art that he found that you have

00:04:26,870 --> 00:04:33,020
to to to drive to the project with and

00:04:30,620 --> 00:04:37,210
his art style and what you can see in

00:04:33,020 --> 00:04:40,100
the mood boards is kind of flat colors

00:04:37,210 --> 00:04:42,289
illustrative style he also does a lot of

00:04:40,100 --> 00:04:44,000
things with font and so on so kind of

00:04:42,289 --> 00:04:46,220
the rendering quality was very important

00:04:44,000 --> 00:04:47,919
for us and this is one of the reasons

00:04:46,220 --> 00:04:50,660
why we went with SVG instead of

00:04:47,919 --> 00:04:52,970
something canvas based because we wanted

00:04:50,660 --> 00:04:57,080
always to have very good very crisp

00:04:52,970 --> 00:04:58,970
render quality and this is you can I'd

00:04:57,080 --> 00:05:01,490
say you can get away with rendering to

00:04:58,970 --> 00:05:03,199
canvas if it's just geometry stuff but

00:05:01,490 --> 00:05:04,210
with font rendering it's very hard

00:05:03,199 --> 00:05:08,050
because

00:05:04,210 --> 00:05:10,639
sub-pixel anti-aliasing and and so on

00:05:08,050 --> 00:05:12,050
these are the things that you get for

00:05:10,639 --> 00:05:15,470
free and out of the box if you're using

00:05:12,050 --> 00:05:18,620
SVG SVG font you can use web fonts so a

00:05:15,470 --> 00:05:20,270
lot of things work out of the box in our

00:05:18,620 --> 00:05:24,320
favor and this is why we went to the MCG

00:05:20,270 --> 00:05:26,510
and many many years ago I did couple

00:05:24,320 --> 00:05:28,970
experiments 53 so I was kind of used to

00:05:26,510 --> 00:05:32,510
where I have an SVG and I can just plug

00:05:28,970 --> 00:05:37,400
stuff in I can move stuff around so did

00:05:32,510 --> 00:05:39,800
it fell do came as I mentioned we had

00:05:37,400 --> 00:05:42,409
this different aspect ratios or the the

00:05:39,800 --> 00:05:44,599
concept as you already saw was we have

00:05:42,409 --> 00:05:47,060
kind of one large game world and then

00:05:44,599 --> 00:05:49,340
the camera pans around in it and the

00:05:47,060 --> 00:05:51,289
good thing is it doesn't really matter

00:05:49,340 --> 00:05:54,260
how your aspect ratio is we kind of we

00:05:51,289 --> 00:05:56,870
always constrained the gameplay to two

00:05:54,260 --> 00:05:58,820
square and the square all those fits the

00:05:56,870 --> 00:06:00,830
screen and if you see more to the sides

00:05:58,820 --> 00:06:02,330
or more to the top of the bottom kind of

00:06:00,830 --> 00:06:04,099
there's nice background stuff that you

00:06:02,330 --> 00:06:07,430
see and it just doesn't break your

00:06:04,099 --> 00:06:09,909
anything so that also works quite quite

00:06:07,430 --> 00:06:09,909
nicely for us

00:06:10,490 --> 00:06:14,520
yeah so initially we didn't really

00:06:12,600 --> 00:06:15,540
wanted to reinvent the wheel and I spend

00:06:14,520 --> 00:06:19,110
a lot of time researching other

00:06:15,540 --> 00:06:20,310
JavaScript engines and one of the things

00:06:19,110 --> 00:06:25,140
that we also missed so we came were

00:06:20,310 --> 00:06:27,120
coming from unity and c-sharp is so

00:06:25,140 --> 00:06:29,810
unity it's a game I don't know how many

00:06:27,120 --> 00:06:34,700
people if you are familiar with unity

00:06:29,810 --> 00:06:37,140
couple is so so unity 3d is kind of the

00:06:34,700 --> 00:06:39,750
brother it's kind of unity and unreal

00:06:37,140 --> 00:06:42,060
engine they are kind of the two standard

00:06:39,750 --> 00:06:43,770
game engines for at least four

00:06:42,060 --> 00:06:48,480
independent developers up to a certain

00:06:43,770 --> 00:06:50,070
size Call of Duty and GTA are not build

00:06:48,480 --> 00:06:51,870
of unity really have their own tech but

00:06:50,070 --> 00:06:54,480
pretty much everybody else who doesn't

00:06:51,870 --> 00:06:56,910
have millions of development budget they

00:06:54,480 --> 00:06:58,920
probably use either unreal or unity so

00:06:56,910 --> 00:07:00,630
these are the two classical game engines

00:06:58,920 --> 00:07:02,580
and one of the benefits of those is that

00:07:00,630 --> 00:07:06,660
you have a very good editor so it's a

00:07:02,580 --> 00:07:10,170
lot of a lot of big part of games is

00:07:06,660 --> 00:07:12,090
content and the way to create content to

00:07:10,170 --> 00:07:14,400
manage your content that's the that's

00:07:12,090 --> 00:07:16,770
the driving thing so for us this is

00:07:14,400 --> 00:07:20,640
where we came from kind of very simple

00:07:16,770 --> 00:07:22,830
text deck unity C sharp couple libraries

00:07:20,640 --> 00:07:27,000
but nothing too fancy and this is what

00:07:22,830 --> 00:07:29,900
we were faced with not be really being

00:07:27,000 --> 00:07:34,590
familiar with the web it was

00:07:29,900 --> 00:07:36,300
mind-blowing to say the least it was

00:07:34,590 --> 00:07:39,390
really in the beginning quite tough for

00:07:36,300 --> 00:07:41,580
us to understand what different things

00:07:39,390 --> 00:07:43,530
are what's a different package

00:07:41,580 --> 00:07:45,480
management package managers kind of

00:07:43,530 --> 00:07:47,460
what's the stuff everybody used a year

00:07:45,480 --> 00:07:48,690
ago and nobody's using anymore and kind

00:07:47,460 --> 00:07:50,690
of what's the new stuff and why's

00:07:48,690 --> 00:07:54,170
everybody going to the new stuff so

00:07:50,690 --> 00:07:56,550
being new to the field this was very

00:07:54,170 --> 00:07:58,830
there's a quite a big hurdle for us to

00:07:56,550 --> 00:08:01,680
get into to making sure that we are on

00:07:58,830 --> 00:08:03,990
the right technology for whatever we're

00:08:01,680 --> 00:08:05,340
doing and making sure could've we get an

00:08:03,990 --> 00:08:06,870
overview over all the existing

00:08:05,340 --> 00:08:09,690
technology to make sure that we choose

00:08:06,870 --> 00:08:11,190
the right technology and maybe in the

00:08:09,690 --> 00:08:13,560
end of the talk you will all come up to

00:08:11,190 --> 00:08:16,170
me and say why didn't you use technology

00:08:13,560 --> 00:08:18,000
X and I would really appreciate it if

00:08:16,170 --> 00:08:19,350
you did that and probably the question

00:08:18,000 --> 00:08:22,650
is because we didn't really know that

00:08:19,350 --> 00:08:25,860
this existed so if something comes up to

00:08:22,650 --> 00:08:30,419
and please tell us they're always eager

00:08:25,860 --> 00:08:32,820
to learn it was quite clear for us that

00:08:30,419 --> 00:08:35,750
we want to to go with typescript that

00:08:32,820 --> 00:08:38,099
came up pretty early in our research

00:08:35,750 --> 00:08:40,529
personally I was quite an or I am quite

00:08:38,099 --> 00:08:42,360
intuitive JavaScript so I read the

00:08:40,529 --> 00:08:45,839
JavaScript good parts a couple years ago

00:08:42,360 --> 00:08:48,750
so I kind of liked JavaScript I also

00:08:45,839 --> 00:08:51,450
hate JavaScript for all the the pros and

00:08:48,750 --> 00:08:54,480
cons of it and so typescript seems to be

00:08:51,450 --> 00:08:57,900
doing the right thing for us because we

00:08:54,480 --> 00:08:59,339
wanted to have type checking we want to

00:08:57,900 --> 00:09:01,560
have compiled errors we don't want to

00:08:59,339 --> 00:09:03,180
have things breaking in and in

00:09:01,560 --> 00:09:04,610
production we want to have linters we

00:09:03,180 --> 00:09:06,480
want to have types we want to have

00:09:04,610 --> 00:09:08,430
static checking we want to have

00:09:06,480 --> 00:09:11,160
diagnostics and so on so that's because

00:09:08,430 --> 00:09:14,160
this is where we came from the C sharp

00:09:11,160 --> 00:09:17,580
side making sure that we don't shoot our

00:09:14,160 --> 00:09:19,620
own leg in the development and not find

00:09:17,580 --> 00:09:21,209
out until it's released that it was very

00:09:19,620 --> 00:09:27,810
important for us in typescript seems to

00:09:21,209 --> 00:09:29,160
be the very good thing and so it's not

00:09:27,810 --> 00:09:31,950
that we kind of really built a game

00:09:29,160 --> 00:09:34,670
engine so the game engine code is very

00:09:31,950 --> 00:09:36,810
very thin it doesn't really do do many

00:09:34,670 --> 00:09:38,520
many things because the games are

00:09:36,810 --> 00:09:42,240
relatively simple because it's only web

00:09:38,520 --> 00:09:44,610
and it's not five our epic something

00:09:42,240 --> 00:09:47,279
something but five minute experiences so

00:09:44,610 --> 00:09:49,170
it's the game engine part per se is not

00:09:47,279 --> 00:09:52,529
that complicated or not that interesting

00:09:49,170 --> 00:09:53,790
but the pipelining getting there this is

00:09:52,529 --> 00:09:57,270
kind of really what in meters in this

00:09:53,790 --> 00:10:00,900
project to getting all the art into game

00:09:57,270 --> 00:10:04,350
and a lot of went into thinking code

00:10:00,900 --> 00:10:08,190
versus data and data not as in the rest

00:10:04,350 --> 00:10:10,830
api is but data as in the art that we

00:10:08,190 --> 00:10:13,080
need for the game configuration for the

00:10:10,830 --> 00:10:14,459
game how fast is it is a character

00:10:13,080 --> 00:10:16,470
supposed to be moving we could all

00:10:14,459 --> 00:10:18,450
hard-coded in the code or we could kind

00:10:16,470 --> 00:10:19,920
of try to separate out all those and

00:10:18,450 --> 00:10:23,730
make sure that we have a way to work

00:10:19,920 --> 00:10:25,500
with that so the pipeline of the use as

00:10:23,730 --> 00:10:27,540
our editor because that was kind of the

00:10:25,500 --> 00:10:32,579
the main thing that we were missing from

00:10:27,540 --> 00:10:36,470
from many existing html5 engines so

00:10:32,579 --> 00:10:38,930
we're using pretty much of roughly any

00:10:36,470 --> 00:10:41,390
graphics editor we started off with

00:10:38,930 --> 00:10:44,750
Adobe Illustrator and then we moved on

00:10:41,390 --> 00:10:47,000
to the affinity designer so it's your

00:10:44,750 --> 00:10:49,760
standard vector graphics thing you could

00:10:47,000 --> 00:10:54,620
even use Inkscape if you really are into

00:10:49,760 --> 00:10:57,020
that and it allows us to to organize our

00:10:54,620 --> 00:11:00,170
content to put all the content in there

00:10:57,020 --> 00:11:01,730
so our designers they work pretty much

00:11:00,170 --> 00:11:04,120
exclusively in there they can lay out

00:11:01,730 --> 00:11:09,080
all the content - sprites and so on and

00:11:04,120 --> 00:11:13,400
it works quite nicely so this is kind of

00:11:09,080 --> 00:11:20,240
our main editor where everything art and

00:11:13,400 --> 00:11:23,870
content happens and then we have also a

00:11:20,240 --> 00:11:26,600
very strict folder structure the project

00:11:23,870 --> 00:11:28,820
is structure in a certain way so and

00:11:26,600 --> 00:11:33,080
then we have a compiled step where we

00:11:28,820 --> 00:11:36,320
take all our assets and transform them

00:11:33,080 --> 00:11:38,990
or compile them into the production

00:11:36,320 --> 00:11:40,310
thing and this compilation step and this

00:11:38,990 --> 00:11:41,330
pre-processing step is very important

00:11:40,310 --> 00:11:46,220
for us and this is where a lot of the

00:11:41,330 --> 00:11:48,170
things happen so he's just yeah that's

00:11:46,220 --> 00:11:50,540
another thing that we wanted to have is

00:11:48,170 --> 00:11:53,720
have everything as much standardized as

00:11:50,540 --> 00:11:55,370
possible so when I check out the project

00:11:53,720 --> 00:11:57,230
on any computer or a colleague checks

00:11:55,370 --> 00:12:00,290
out the project they only have to run

00:11:57,230 --> 00:12:02,240
npm install and then just gulp watch

00:12:00,290 --> 00:12:04,580
gulp serve and that should be it

00:12:02,240 --> 00:12:06,650
hopefully so that's if nothing breaks

00:12:04,580 --> 00:12:09,860
then this is and we are sure whenever

00:12:06,650 --> 00:12:14,650
you're doing a build on any machine the

00:12:09,860 --> 00:12:14,650
output supposedly the same all the time

00:12:17,880 --> 00:12:34,870
nd M and VM probably not yeah and then

00:12:31,149 --> 00:12:37,120
you you all know that CERN just and kind

00:12:34,870 --> 00:12:39,490
of also the browsers as a debugger and

00:12:37,120 --> 00:12:40,750
it works very nicely source maps and so

00:12:39,490 --> 00:12:42,730
on so it's very convenient for us to

00:12:40,750 --> 00:12:43,870
work so that's the pipeline as it is

00:12:42,730 --> 00:12:46,209
right now

00:12:43,870 --> 00:12:49,060
gulp is our our main thing it absolves

00:12:46,209 --> 00:12:50,589
of what we used to copy stuff to process

00:12:49,060 --> 00:12:53,740
images to do stuff

00:12:50,589 --> 00:12:56,769
ts lint browserify packaging then of

00:12:53,740 --> 00:12:59,380
course typescript India and oil veggies

00:12:56,769 --> 00:13:01,360
and then Bungie s so that we have one

00:12:59,380 --> 00:13:03,250
bundle yes in the end that then contains

00:13:01,360 --> 00:13:06,070
everything this was also a very steep

00:13:03,250 --> 00:13:09,149
learning curve for us to understand all

00:13:06,070 --> 00:13:12,579
the how bundling works in the browsers

00:13:09,149 --> 00:13:20,160
it works now but I'm not sure if this is

00:13:12,579 --> 00:13:26,709
the best way to do it okay so this is

00:13:20,160 --> 00:13:28,600
kind of interesting so this is what what

00:13:26,709 --> 00:13:32,170
we were faced with kind of the problem

00:13:28,600 --> 00:13:35,170
of separating code and data because many

00:13:32,170 --> 00:13:38,500
times in an SVG we use a lot of IDs so

00:13:35,170 --> 00:13:41,589
you define a T's in your editor and then

00:13:38,500 --> 00:13:43,990
use them in the code to move stuff

00:13:41,589 --> 00:13:48,310
around to do things with it so in the

00:13:43,990 --> 00:13:51,100
beginning we we had our IDs because on

00:13:48,310 --> 00:13:56,769
an illustrator which is not as stable as

00:13:51,100 --> 00:13:58,779
it should be and then sorry by hand we

00:13:56,769 --> 00:14:01,449
just generated kind of our constants

00:13:58,779 --> 00:14:03,490
file to make sure that at least we don't

00:14:01,449 --> 00:14:06,940
have that many magic strings so just one

00:14:03,490 --> 00:14:09,550
place where we say ok the overview is

00:14:06,940 --> 00:14:12,130
the ID if the overview is overview

00:14:09,550 --> 00:14:13,240
underscore one underscore and underscore

00:14:12,130 --> 00:14:16,199
one underscore is something that

00:14:13,240 --> 00:14:18,610
illustrator introduced so if something

00:14:16,199 --> 00:14:20,079
changes in the SVG during the export

00:14:18,610 --> 00:14:22,959
stepped and at least there's only one

00:14:20,079 --> 00:14:24,399
place that we we have to fix but still

00:14:22,959 --> 00:14:27,459
the thing is with you know straighter at

00:14:24,399 --> 00:14:29,770
that point things can change quite

00:14:27,459 --> 00:14:30,040
easily and the bad thing is that you

00:14:29,770 --> 00:14:32,769
don't

00:14:30,040 --> 00:14:34,360
no the things break until they break so

00:14:32,769 --> 00:14:36,490
that was that was quite a big if an

00:14:34,360 --> 00:14:39,250
issue for us so the intention is always

00:14:36,490 --> 00:14:40,899
there's no more magic strings you're

00:14:39,250 --> 00:14:43,389
always trying to do as little magic as

00:14:40,899 --> 00:14:46,959
possible with as much spotless as

00:14:43,389 --> 00:14:49,870
possible so what would indeed is but

00:14:46,959 --> 00:14:53,470
that we integrated a step in a bill

00:14:49,870 --> 00:14:55,180
pipeline so we take the SVG we transform

00:14:53,470 --> 00:14:57,759
it in our build pipeline we go through

00:14:55,180 --> 00:14:59,290
all of the the IDs and we generate code

00:14:57,759 --> 00:15:03,009
out of it and the code that we generate

00:14:59,290 --> 00:15:06,880
is this definitions file or this this

00:15:03,009 --> 00:15:10,569
constants file so whenever something

00:15:06,880 --> 00:15:12,759
changed changes in the SVG because the

00:15:10,569 --> 00:15:15,850
designer changes something introduces

00:15:12,759 --> 00:15:18,029
new stuff renames thing maybe they

00:15:15,850 --> 00:15:23,470
correct the typo something like that

00:15:18,029 --> 00:15:27,940
it's not the end project breaks but

00:15:23,470 --> 00:15:31,240
since kind of the ID name and the string

00:15:27,940 --> 00:15:34,209
are the same if the ID changes in the

00:15:31,240 --> 00:15:35,920
SVG it also changes to identify which

00:15:34,209 --> 00:15:37,660
means it introduces a compile error into

00:15:35,920 --> 00:15:39,670
the project so whenever something breaks

00:15:37,660 --> 00:15:45,310
in the SVG we have compiled errors in a

00:15:39,670 --> 00:15:46,899
project and we know right before it goes

00:15:45,310 --> 00:15:48,670
in production so that was very important

00:15:46,899 --> 00:15:51,370
for us and it's also very convenient so

00:15:48,670 --> 00:15:53,079
that we don't have to look it up top it

00:15:51,370 --> 00:16:01,269
into a con and constants file and then

00:15:53,079 --> 00:16:02,230
use it so it's all one automated step no

00:16:01,269 --> 00:16:07,480
not anymore

00:16:02,230 --> 00:16:10,420
that that's a good part so yeah so and

00:16:07,480 --> 00:16:13,060
be defined in the in the editor in

00:16:10,420 --> 00:16:17,110
Illustrator or in affinity designer you

00:16:13,060 --> 00:16:18,459
define them the the IDS are just the

00:16:17,110 --> 00:16:19,899
same that you give them as the group

00:16:18,459 --> 00:16:21,790
names whenever you have a group and you

00:16:19,899 --> 00:16:23,740
name it some something in your in

00:16:21,790 --> 00:16:30,160
illustrator and infinity designer this

00:16:23,740 --> 00:16:34,300
is what Stan used as the ID so we have

00:16:30,160 --> 00:16:37,089
an SVG builder with all the IDs and run

00:16:34,300 --> 00:16:40,389
over it in our pipeline and this system

00:16:37,089 --> 00:16:43,290
this tent generates this file for us if

00:16:40,389 --> 00:16:45,150
anything changes the file changes and

00:16:43,290 --> 00:16:48,720
definitions change and thus it doesn't

00:16:45,150 --> 00:16:51,270
compile anymore this also allows us to

00:16:48,720 --> 00:16:54,000
introduce more stuff so we can add also

00:16:51,270 --> 00:16:56,820
classes to things we can add whatever

00:16:54,000 --> 00:17:00,660
attributes we want to so we can really

00:16:56,820 --> 00:17:03,600
use the graphics editors to annotate the

00:17:00,660 --> 00:17:06,720
SVG output so we can say okay this is a

00:17:03,600 --> 00:17:09,270
button everything it has it has button

00:17:06,720 --> 00:17:11,130
on it will then automatically get a

00:17:09,270 --> 00:17:12,780
certain class or is treated in a certain

00:17:11,130 --> 00:17:15,420
way and so on so this really allows us

00:17:12,780 --> 00:17:18,300
to and important things to do everything

00:17:15,420 --> 00:17:24,360
in the in the editor and not hard-coded

00:17:18,300 --> 00:17:26,940
somewhere another thing that we did is

00:17:24,360 --> 00:17:30,600
also with the CSS files because many

00:17:26,940 --> 00:17:33,600
times we add classes we remove classes

00:17:30,600 --> 00:17:38,100
we target stuff and so on so we also run

00:17:33,600 --> 00:17:40,380
over our CSS files extract all the

00:17:38,100 --> 00:17:42,240
classes and so to make sure that we

00:17:40,380 --> 00:17:44,880
don't miss type something we don't add

00:17:42,240 --> 00:17:46,410
some mistyped class and nothing happens

00:17:44,880 --> 00:17:48,540
and we will talk we don't find out until

00:17:46,410 --> 00:17:52,170
at the very end when somebody plays the

00:17:48,540 --> 00:17:54,260
game but we we always try to make sure

00:17:52,170 --> 00:17:57,560
that we find out at compile time and not

00:17:54,260 --> 00:17:57,560
during runtime

00:17:58,880 --> 00:18:03,660
additionally then we also do it kind of

00:18:01,200 --> 00:18:06,000
with other assets so it's usually it's

00:18:03,660 --> 00:18:08,090
one largest VG file but then we might

00:18:06,000 --> 00:18:11,340
have additional assets we might have

00:18:08,090 --> 00:18:14,250
audio files additional images and so on

00:18:11,340 --> 00:18:17,610
and to make sure that these are not

00:18:14,250 --> 00:18:20,070
don't have typos in it and somebody

00:18:17,610 --> 00:18:22,650
deletes it and the code depends on it if

00:18:20,070 --> 00:18:25,220
you delete it then this just vanishes

00:18:22,650 --> 00:18:27,810
and your code doesn't compile anymore

00:18:25,220 --> 00:18:31,740
yeah so that's pretty much it in a

00:18:27,810 --> 00:18:33,630
nutshell so the main goal for us is to

00:18:31,740 --> 00:18:35,730
make sure this things break at compile

00:18:33,630 --> 00:18:38,190
time and this is kind of where we we try

00:18:35,730 --> 00:18:39,800
to to invest our time to and this really

00:18:38,190 --> 00:18:42,600
allowed us to having this pipeline

00:18:39,800 --> 00:18:46,290
really allows you to very rapidly create

00:18:42,600 --> 00:18:48,600
those small html5 games interactive

00:18:46,290 --> 00:18:50,870
illustrations because we SVG there's so

00:18:48,600 --> 00:18:53,650
many things that you can quite easily do

00:18:50,870 --> 00:18:56,559
you also started out

00:18:53,650 --> 00:18:59,260
doing animations there's animation

00:18:56,559 --> 00:19:01,480
pipeline that uses Adobe After Effects

00:18:59,260 --> 00:19:03,640
and then you can export those animations

00:19:01,480 --> 00:19:07,120
to Jason and then I guess it's body

00:19:03,640 --> 00:19:09,010
moving it's a Airbnb library that you

00:19:07,120 --> 00:19:10,120
can use to to animate things this is

00:19:09,010 --> 00:19:12,580
also something we have integrated

00:19:10,120 --> 00:19:18,430
something that we want to do more of in

00:19:12,580 --> 00:19:23,309
the future yeah that's pretty much it

00:19:18,430 --> 00:19:23,309

YouTube URL: https://www.youtube.com/watch?v=mxvjSm8oFXY


