Title: ViennaJS, Improving server rendering performance of React, October 2018
Publication date: 2018-11-01
Playlist: viennaJS
Description: 
	Talk by Daniel Stein

Using React and server-side rendering doesn't automatically give you the best performance. In this talk, I'll describe additional steps we took to improve page speeds in our new React architecture. Most of these steps are not limited to React and can be reused in other frontend applications easily.
Captions: 
	00:00:00,000 --> 00:00:04,440
my name is Daniel Stein I'm a front-end

00:00:02,190 --> 00:00:05,940
developer at communal and today I'm

00:00:04,440 --> 00:00:07,890
going to talk about what we're doing for

00:00:05,940 --> 00:00:11,130
our page speed in our JavaScript

00:00:07,890 --> 00:00:12,809
applications first a short introduction

00:00:11,130 --> 00:00:15,680
in case anybody here doesn't know what

00:00:12,809 --> 00:00:18,210
calluna does real company where people

00:00:15,680 --> 00:00:20,070
can rate their employers so the key they

00:00:18,210 --> 00:00:22,470
can give reviews about categories like

00:00:20,070 --> 00:00:24,600
how is my salary how is my working

00:00:22,470 --> 00:00:26,340
condition stuff like that and our goal

00:00:24,600 --> 00:00:27,720
is to give transparency to the workplace

00:00:26,340 --> 00:00:31,289
but that's not what I'm talking about

00:00:27,720 --> 00:00:33,120
today two years ago we basically came up

00:00:31,289 --> 00:00:34,649
with a new front-end architecture our

00:00:33,120 --> 00:00:36,360
old architecture became a little bit

00:00:34,649 --> 00:00:38,820
long in the truth it was using jQuery

00:00:36,360 --> 00:00:41,790
and angular and we decided we're going

00:00:38,820 --> 00:00:43,200
to use something more modern so what we

00:00:41,790 --> 00:00:46,289
decided on was to build all our

00:00:43,200 --> 00:00:48,809
following applications using react and

00:00:46,289 --> 00:00:50,820
we also wanted to use express service to

00:00:48,809 --> 00:00:55,379
noche service to handle all our

00:00:50,820 --> 00:00:56,820
requesters requests and responses and we

00:00:55,379 --> 00:00:58,770
also decided to use server-side

00:00:56,820 --> 00:01:01,109
rendering that was a requirement by our

00:00:58,770 --> 00:01:03,149
SEO team but it is also the first step

00:01:01,109 --> 00:01:06,450
that we took for having good performance

00:01:03,149 --> 00:01:07,860
in our applications in case anybody here

00:01:06,450 --> 00:01:10,740
doesn't know what server-side rendering

00:01:07,860 --> 00:01:13,350
is you're basically using your node

00:01:10,740 --> 00:01:15,150
server to parse the react application so

00:01:13,350 --> 00:01:16,830
instead of presenting to the user an

00:01:15,150 --> 00:01:18,720
empty page where he then has to download

00:01:16,830 --> 00:01:22,259
a bundle you already give him a full

00:01:18,720 --> 00:01:23,759
HTML response but that doesn't mean that

00:01:22,259 --> 00:01:25,290
he doesn't need to bundle anymore he

00:01:23,759 --> 00:01:27,150
still needs to download this because

00:01:25,290 --> 00:01:30,409
this is you stand for interactive stuff

00:01:27,150 --> 00:01:32,939
so like form validation or animations

00:01:30,409 --> 00:01:35,280
asynchronous data yeah all these kinds

00:01:32,939 --> 00:01:36,930
of things but it greatly improves the

00:01:35,280 --> 00:01:38,700
first render you get on the page and

00:01:36,930 --> 00:01:40,140
that's also really important for Google

00:01:38,700 --> 00:01:43,049
because they crawl your page much more

00:01:40,140 --> 00:01:46,290
often when you have a good HTML response

00:01:43,049 --> 00:01:48,869
for them already we also agreed on a

00:01:46,290 --> 00:01:51,030
performance testing strategy so we're

00:01:48,869 --> 00:01:52,500
using lighthouse and lighthouse is a

00:01:51,030 --> 00:01:54,869
tool that was bought by Google a few

00:01:52,500 --> 00:01:57,390
years ago and it's built into the Chrome

00:01:54,869 --> 00:01:58,770
browser itself nowadays so if you open

00:01:57,390 --> 00:02:00,630
up your web developer tools you have

00:01:58,770 --> 00:02:02,310
this little tab it's called audits and

00:02:00,630 --> 00:02:04,530
there you can just make one of these

00:02:02,310 --> 00:02:06,600
lighthouse tests and lighthouse is

00:02:04,530 --> 00:02:09,090
trying to then Network throttle and give

00:02:06,600 --> 00:02:11,280
you giving you a mobile view of your

00:02:09,090 --> 00:02:13,180
page so it basically tries to emulate

00:02:11,280 --> 00:02:15,700
what would a user see in the real

00:02:13,180 --> 00:02:19,540
world on a mobile device when he has 3G

00:02:15,700 --> 00:02:23,230
speeds we also have pretty clear goals

00:02:19,540 --> 00:02:25,569
for our performance so we want to have a

00:02:23,230 --> 00:02:27,549
first meaningful paint after 1.5 seconds

00:02:25,569 --> 00:02:29,260
so that's the first time that the user

00:02:27,549 --> 00:02:31,510
would see something on his device and he

00:02:29,260 --> 00:02:33,099
can start reading stuff and after five

00:02:31,510 --> 00:02:35,530
seconds the whole page should be

00:02:33,099 --> 00:02:37,450
completely interactive so then every

00:02:35,530 --> 00:02:39,310
form that he fills out to be validated

00:02:37,450 --> 00:02:44,079
all asynchronous data that is needed

00:02:39,310 --> 00:02:46,810
should be there yeah throughout 2017 we

00:02:44,079 --> 00:02:48,669
started rolling out our new features we

00:02:46,810 --> 00:02:50,379
rewrote the reviews page width which is

00:02:48,669 --> 00:02:52,120
the most important page on our website

00:02:50,379 --> 00:02:54,459
because that's where we get the data

00:02:52,120 --> 00:02:56,439
from all our users and we also decided

00:02:54,459 --> 00:02:58,750
to rewrite the home page they've got a

00:02:56,439 --> 00:03:02,049
new design with a more modular component

00:02:58,750 --> 00:03:04,120
based structure and we also introduced

00:03:02,049 --> 00:03:06,819
one new feature the question and answers

00:03:04,120 --> 00:03:09,519
feature where users can ask questions to

00:03:06,819 --> 00:03:11,409
specific companies and then people from

00:03:09,519 --> 00:03:12,730
this company so the employer himself or

00:03:11,409 --> 00:03:14,409
maybe other people that work at this

00:03:12,730 --> 00:03:15,849
company can go back and answer those

00:03:14,409 --> 00:03:18,909
questions to improve the transparency

00:03:15,849 --> 00:03:20,229
and you will probably hear me noticing

00:03:18,909 --> 00:03:21,699
this feature a few more times because

00:03:20,229 --> 00:03:25,930
that is the feature that I work on most

00:03:21,699 --> 00:03:28,030
of the time so yeah when we introduced

00:03:25,930 --> 00:03:29,500
the new architecture we were pretty sure

00:03:28,030 --> 00:03:31,870
performance will just come by itself

00:03:29,500 --> 00:03:33,609
won't be an issue because we're using

00:03:31,870 --> 00:03:35,079
this new awesome framework we're using

00:03:33,609 --> 00:03:38,859
server-side rendering so all the stuff

00:03:35,079 --> 00:03:41,470
is already done on our side of course we

00:03:38,859 --> 00:03:43,239
were completely wrong about this this

00:03:41,470 --> 00:03:45,250
was a lighthouse test I did one and a

00:03:43,239 --> 00:03:47,470
half years ago after we launched our new

00:03:45,250 --> 00:03:49,900
features and you see that it's nowhere

00:03:47,470 --> 00:03:52,180
even close to the to the goals we really

00:03:49,900 --> 00:03:54,819
decided on in the beginning our full

00:03:52,180 --> 00:03:57,129
page load took 17 seconds which was just

00:03:54,819 --> 00:03:59,409
how awful and the first time the user

00:03:57,129 --> 00:04:01,449
would see something marginally

00:03:59,409 --> 00:04:04,000
resembling the the content he had in the

00:04:01,449 --> 00:04:06,009
end was after 12.5 seconds so that's 11

00:04:04,000 --> 00:04:08,459
seconds slower that what we wanted to

00:04:06,009 --> 00:04:08,459
have in the beginning

00:04:08,759 --> 00:04:13,269
fortunately lighthouse also makes made

00:04:11,470 --> 00:04:16,479
it easy to identify some culprits in

00:04:13,269 --> 00:04:17,799
that regard so we immediately noticed we

00:04:16,479 --> 00:04:20,039
had a lot of blocking script so

00:04:17,799 --> 00:04:22,779
JavaScript files or CSS files were

00:04:20,039 --> 00:04:25,960
keeping the browser from rendering HTML

00:04:22,779 --> 00:04:26,650
because they blocked the render we also

00:04:25,960 --> 00:04:28,270
back then had

00:04:26,650 --> 00:04:30,330
fairly large bundle it was slowly

00:04:28,270 --> 00:04:34,360
approaching two megabytes which was just

00:04:30,330 --> 00:04:36,639
too much or Dom structure was very

00:04:34,360 --> 00:04:38,320
convoluted I mean you probably know this

00:04:36,639 --> 00:04:40,180
we're all lazy developers and so

00:04:38,320 --> 00:04:42,580
sometimes you just add empty component

00:04:40,180 --> 00:04:44,110
containers and they have developments

00:04:42,580 --> 00:04:47,080
and you actually don't need them but you

00:04:44,110 --> 00:04:49,330
still have them and also we didn't think

00:04:47,080 --> 00:04:51,699
too much about our resource cache

00:04:49,330 --> 00:04:54,310
caching strategy so how we should serve

00:04:51,699 --> 00:04:57,520
assets like images or even the bundles

00:04:54,310 --> 00:04:59,260
themselves in a good way and the rest of

00:04:57,520 --> 00:05:01,750
this talk will be now seven steps that

00:04:59,260 --> 00:05:04,960
we took in the last year to improve our

00:05:01,750 --> 00:05:06,910
performance and let me just start by

00:05:04,960 --> 00:05:09,550
saying none of these are specific to

00:05:06,910 --> 00:05:11,350
react a fairly framework agnostic and

00:05:09,550 --> 00:05:14,620
you can use them in any framework you

00:05:11,350 --> 00:05:17,979
won't even with PHP code kudo code or

00:05:14,620 --> 00:05:20,490
Java code yep

00:05:17,979 --> 00:05:23,320
step one was using asynchronous CSS I

00:05:20,490 --> 00:05:25,720
already said this so we had lots of

00:05:23,320 --> 00:05:27,970
blocking scripts that were so render

00:05:25,720 --> 00:05:30,669
blocking scripts and fortunately for

00:05:27,970 --> 00:05:32,289
JavaScript it was a fairly easy problem

00:05:30,669 --> 00:05:34,660
to solve because all modern browsers

00:05:32,289 --> 00:05:36,580
they have this attribute is called async

00:05:34,660 --> 00:05:38,050
and defer and you just put them on your

00:05:36,580 --> 00:05:40,060
script tags and then you basically tell

00:05:38,050 --> 00:05:42,550
the browser this is a JavaScript file I

00:05:40,060 --> 00:05:44,289
need so download it as fast as possible

00:05:42,550 --> 00:05:46,590
but don't let it keep you from rendering

00:05:44,289 --> 00:05:49,270
anything so it happens asynchronously

00:05:46,590 --> 00:05:53,110
but unfortunately for CSS something like

00:05:49,270 --> 00:05:54,669
that doesn't exist but there is that

00:05:53,110 --> 00:05:55,990
there are code approaches for that out

00:05:54,669 --> 00:05:58,690
there so we're using something called

00:05:55,990 --> 00:06:00,599
load CSS it was invented by the filament

00:05:58,690 --> 00:06:03,699
group which some of you might know and

00:06:00,599 --> 00:06:06,370
the basic idea behind this is that you

00:06:03,699 --> 00:06:08,169
identify what is the most important CSS

00:06:06,370 --> 00:06:09,789
that you have that would be everything

00:06:08,169 --> 00:06:11,860
that the user sees before he starts

00:06:09,789 --> 00:06:14,289
crawling on the page and you put this

00:06:11,860 --> 00:06:16,900
actually into the head tag of your

00:06:14,289 --> 00:06:18,789
website and the rest of the CSS you load

00:06:16,900 --> 00:06:21,880
that part asynchronously while

00:06:18,789 --> 00:06:24,130
JavaScript and this requires less than

00:06:21,880 --> 00:06:27,910
10 lines of JavaScript code and it works

00:06:24,130 --> 00:06:29,770
in all modern browsers and so what you

00:06:27,910 --> 00:06:31,539
don't get is basically that the users

00:06:29,770 --> 00:06:34,210
see something on the screen already

00:06:31,539 --> 00:06:35,800
while the browser's is downloading CSS

00:06:34,210 --> 00:06:37,990
in the background and there might be

00:06:35,800 --> 00:06:39,520
some flashing going on but it's it's a

00:06:37,990 --> 00:06:39,919
much better experience because the user

00:06:39,520 --> 00:06:42,650
can

00:06:39,919 --> 00:06:43,909
start reading stuff and if you think to

00:06:42,650 --> 00:06:45,680
yourself now okay this sounds very

00:06:43,909 --> 00:06:48,469
tedious because I mean identifying all

00:06:45,680 --> 00:06:48,949
your important CEA's assets I don't want

00:06:48,469 --> 00:06:50,900
to do this

00:06:48,949 --> 00:06:52,759
we of course automating this so we're

00:06:50,900 --> 00:06:54,889
using a tool called penthouse

00:06:52,759 --> 00:06:57,080
it's an NPM library and it uses a

00:06:54,889 --> 00:06:59,029
headless chrome that just parses the

00:06:57,080 --> 00:07:01,430
side and gives you this critical CSS

00:06:59,029 --> 00:07:02,810
that you need to put into your head and

00:07:01,430 --> 00:07:06,110
on the next slide I show you a video

00:07:02,810 --> 00:07:07,580
comparing these two approaches and so on

00:07:06,110 --> 00:07:09,349
the right side you have to bond with the

00:07:07,580 --> 00:07:12,050
asynchronous CSS approach and you should

00:07:09,349 --> 00:07:14,150
immediately see that it gives you much

00:07:12,050 --> 00:07:17,090
something much faster on the screen than

00:07:14,150 --> 00:07:20,180
the classical approach I recorded these

00:07:17,090 --> 00:07:22,520
two examples with slow 3G speeds and

00:07:20,180 --> 00:07:24,889
both take roughly the same time to have

00:07:22,520 --> 00:07:27,020
a complete render but the one with load

00:07:24,889 --> 00:07:29,240
CSS shows content to the user already

00:07:27,020 --> 00:07:35,930
after half the time that it takes the

00:07:29,240 --> 00:07:39,499
other approach to display something so

00:07:35,930 --> 00:07:44,120
for the head part it's right now roughly

00:07:39,499 --> 00:07:46,069
10 kilobytes and the rest is I think 20

00:07:44,120 --> 00:07:51,020
kilo byte gzip so I don't know how much

00:07:46,069 --> 00:07:52,789
is this in total them the second step we

00:07:51,020 --> 00:07:54,860
took was splitting up our applications

00:07:52,789 --> 00:07:57,620
in a better way as I said already we had

00:07:54,860 --> 00:07:59,210
a fairly large bundle at a time and we

00:07:57,620 --> 00:08:01,430
have to come up with a solution for that

00:07:59,210 --> 00:08:02,870
and so we did something very drastic we

00:08:01,430 --> 00:08:04,879
actually just said okay instead of

00:08:02,870 --> 00:08:07,039
having one monolithic react application

00:08:04,879 --> 00:08:09,050
let's just split it up at the logical

00:08:07,039 --> 00:08:10,909
steps so now we have three small

00:08:09,050 --> 00:08:12,589
applications one for the reviews page

00:08:10,909 --> 00:08:14,449
one for statical pages like the home

00:08:12,589 --> 00:08:16,370
page and the third one for profile

00:08:14,449 --> 00:08:18,889
specific pages like question-and-answers

00:08:16,370 --> 00:08:21,860
and by doing that we were able to

00:08:18,889 --> 00:08:23,659
quickly reduce the amount of code that

00:08:21,860 --> 00:08:25,339
was in the main bundles for each page

00:08:23,659 --> 00:08:27,409
because before it used to be that the

00:08:25,339 --> 00:08:29,060
user had to download all the code for

00:08:27,409 --> 00:08:32,120
all the pages and all the third-party

00:08:29,060 --> 00:08:33,829
libraries for all the pages and the

00:08:32,120 --> 00:08:35,899
second step that we did in the last few

00:08:33,829 --> 00:08:38,570
month was actually starting to use

00:08:35,899 --> 00:08:41,360
bundle splitting that wasn't possible

00:08:38,570 --> 00:08:42,740
for us a few months ago but with new

00:08:41,360 --> 00:08:46,220
frameworks that we are using right now

00:08:42,740 --> 00:08:47,540
it's made easier if you don't know what

00:08:46,220 --> 00:08:49,670
bundle splitting is you're basically

00:08:47,540 --> 00:08:51,440
using functions that web heck give you

00:08:49,670 --> 00:08:52,800
and to import

00:08:51,440 --> 00:08:55,140
bundles

00:08:52,800 --> 00:08:57,450
synchronously so you you again define

00:08:55,140 --> 00:08:58,830
some logical steps so for example here

00:08:57,450 --> 00:09:01,290
that would be this report in this use

00:08:58,830 --> 00:09:03,630
model that most people probably will

00:09:01,290 --> 00:09:05,550
never see and only if the user clicks on

00:09:03,630 --> 00:09:08,130
the button he loads a separate bundle

00:09:05,550 --> 00:09:12,630
that displays this content and by by

00:09:08,130 --> 00:09:14,880
using this and yeah utilizing this

00:09:12,630 --> 00:09:16,290
you're able to again reduce the amount

00:09:14,880 --> 00:09:17,760
of code you have in your main bundles

00:09:16,290 --> 00:09:22,440
because you split it up into several

00:09:17,760 --> 00:09:25,940
smaller chunks the third step we took

00:09:22,440 --> 00:09:28,589
was reevaluate in our web phone strategy

00:09:25,940 --> 00:09:30,209
of course back then we had a pretty nice

00:09:28,589 --> 00:09:32,010
pretty modern web font

00:09:30,209 --> 00:09:34,320
it's called Whitney you all see it here

00:09:32,010 --> 00:09:35,940
and it came in three styles it has a

00:09:34,320 --> 00:09:38,850
bold phone that had a regular found an

00:09:35,940 --> 00:09:40,380
italic font and it looked pretty nice it

00:09:38,850 --> 00:09:42,540
was very readable but it came with two

00:09:40,380 --> 00:09:44,370
major downsides the first one was of

00:09:42,540 --> 00:09:46,680
course that it was fairly expensive it

00:09:44,370 --> 00:09:49,320
was a subscription subscription service

00:09:46,680 --> 00:09:50,880
that we had to pay every month but for

00:09:49,320 --> 00:09:53,430
me as a front-end developer the more

00:09:50,880 --> 00:09:55,290
important part was that it was one of

00:09:53,430 --> 00:09:57,810
the biggest assets we actually served to

00:09:55,290 --> 00:09:59,459
the user it was 250 kilobytes that just

00:09:57,810 --> 00:10:02,640
were needed for this phone to display

00:09:59,459 --> 00:10:04,620
and so then we actually went to our

00:10:02,640 --> 00:10:06,450
designers and said hey can we take a

00:10:04,620 --> 00:10:09,000
different approach and what we came up

00:10:06,450 --> 00:10:10,350
with was was using system phones so

00:10:09,000 --> 00:10:12,680
these are phones that you already have

00:10:10,350 --> 00:10:14,970
installed on your devices they are

00:10:12,680 --> 00:10:16,890
specific to each device you have so on

00:10:14,970 --> 00:10:19,170
Mac OS you get San Francisco and Android

00:10:16,890 --> 00:10:21,630
devices you get Roboto but they are all

00:10:19,170 --> 00:10:23,310
pretty readable and highly optimized for

00:10:21,630 --> 00:10:24,779
high resolution screens and low

00:10:23,310 --> 00:10:26,670
resolution screens so they are very

00:10:24,779 --> 00:10:29,100
readable and have a very nice typography

00:10:26,670 --> 00:10:31,320
and also they give you this nice side

00:10:29,100 --> 00:10:33,060
effect that your websites look almost

00:10:31,320 --> 00:10:35,970
like native applications because they

00:10:33,060 --> 00:10:38,910
look the same as other applications that

00:10:35,970 --> 00:10:41,310
you're using on your device also what

00:10:38,910 --> 00:10:44,220
was a fairly awesome about this step was

00:10:41,310 --> 00:10:45,360
that it was pretty easy to get this to

00:10:44,220 --> 00:10:47,699
do the same change in the old

00:10:45,360 --> 00:10:49,470
architecture as you can imagine we still

00:10:47,699 --> 00:10:51,690
have a lot of pages that are not updated

00:10:49,470 --> 00:10:54,000
to a modern architecture but even there

00:10:51,690 --> 00:10:56,310
it was very easy to say okay don't surf

00:10:54,000 --> 00:10:57,930
this font anymore use system fonts we

00:10:56,310 --> 00:11:01,220
optimized a little bit our style sheets

00:10:57,930 --> 00:11:01,220
and that was it basically

00:11:02,840 --> 00:11:08,390
step four was reducing our external

00:11:05,120 --> 00:11:10,970
dependencies since we're using webpack

00:11:08,390 --> 00:11:12,620
to build our main bundle there are

00:11:10,970 --> 00:11:14,150
really cool tools out there like like

00:11:12,620 --> 00:11:16,100
this web pack bundle analyzer that

00:11:14,150 --> 00:11:17,450
clearly displays to you what are the

00:11:16,100 --> 00:11:19,820
biggest chunks that you have in your

00:11:17,450 --> 00:11:22,010
bundle and oftentimes especially in the

00:11:19,820 --> 00:11:24,680
beginning we noticed it was third-party

00:11:22,010 --> 00:11:26,360
libraries that we were using and my

00:11:24,680 --> 00:11:28,839
prime example for this is something that

00:11:26,360 --> 00:11:31,430
I introduced myself it's Redux form and

00:11:28,839 --> 00:11:33,230
it was a pretty nice library that gave

00:11:31,430 --> 00:11:35,660
you form validation basically for free

00:11:33,230 --> 00:11:37,610
but at the time I didn't think about

00:11:35,660 --> 00:11:39,290
that this would also be a really huge

00:11:37,610 --> 00:11:42,670
dependency that we suddenly introduced

00:11:39,290 --> 00:11:44,750
to a bundle and when we saw this and we

00:11:42,670 --> 00:11:46,520
re-evaluated our approach we said to

00:11:44,750 --> 00:11:48,320
ourselves okay form validation is not

00:11:46,520 --> 00:11:51,170
rocket science we can do this ourselves

00:11:48,320 --> 00:11:53,480
and save lots and lots of code by doing

00:11:51,170 --> 00:11:55,690
it ourselves and of course we did this

00:11:53,480 --> 00:11:58,490
with lots of other libraries as well and

00:11:55,690 --> 00:12:01,790
yeah so that's something that everyone

00:11:58,490 --> 00:12:03,710
here can probably do and related to that

00:12:01,790 --> 00:12:06,860
was also updating our packages on a

00:12:03,710 --> 00:12:09,260
regular basis a really cool example for

00:12:06,860 --> 00:12:11,360
this is react 16 when we started writing

00:12:09,260 --> 00:12:13,910
our plication like 15 was still the

00:12:11,360 --> 00:12:16,040
current version but when the newer

00:12:13,910 --> 00:12:17,630
version was released Facebook even on

00:12:16,040 --> 00:12:19,790
the blog advertised that one of their

00:12:17,630 --> 00:12:22,610
main goals was reducing the amount of

00:12:19,790 --> 00:12:24,589
code you load with this library so just

00:12:22,610 --> 00:12:27,940
by updating to react 16 we were able to

00:12:24,589 --> 00:12:30,430
save over 50 kilobytes and cheez-it and

00:12:27,940 --> 00:12:33,800
with that also came faster rendering

00:12:30,430 --> 00:12:35,600
react 16 actually took some steps to

00:12:33,800 --> 00:12:38,660
improve the rendering of each and every

00:12:35,600 --> 00:12:40,220
one of your components on the page and I

00:12:38,660 --> 00:12:41,570
don't say that this would happen every

00:12:40,220 --> 00:12:43,790
time you update a library in the

00:12:41,570 --> 00:12:45,650
external library but most developers out

00:12:43,790 --> 00:12:48,350
there also care about similar things so

00:12:45,650 --> 00:12:49,940
if you trust good libraries they also

00:12:48,350 --> 00:12:54,620
will probably take some steps to reduce

00:12:49,940 --> 00:12:57,230
your file sizes step 6

00:12:54,620 --> 00:12:59,690
was refactoring our template so a set is

00:12:57,230 --> 00:13:02,540
already in the beginning we had fairly

00:12:59,690 --> 00:13:04,850
convoluted bone structures in some

00:13:02,540 --> 00:13:06,440
places and lighthouse gives you this

00:13:04,850 --> 00:13:08,570
very clear goal that you should aim to

00:13:06,440 --> 00:13:10,700
have less than $1500 elements on the

00:13:08,570 --> 00:13:12,230
page you can probably imagine that if

00:13:10,700 --> 00:13:14,240
you have lots and lots of elements on

00:13:12,230 --> 00:13:16,390
the page it takes the browser some time

00:13:14,240 --> 00:13:20,350
to render those and also to clear

00:13:16,390 --> 00:13:21,760
calculate styling for this and so if you

00:13:20,350 --> 00:13:23,020
have components like this where you have

00:13:21,760 --> 00:13:24,970
empty difficulty nurse

00:13:23,020 --> 00:13:27,880
try to reduce them as much as possible

00:13:24,970 --> 00:13:29,800
so I introduced them back then because I

00:13:27,880 --> 00:13:31,870
added scrolling components or animation

00:13:29,800 --> 00:13:33,730
components but actually when I revile

00:13:31,870 --> 00:13:35,410
you ate this I saw that it's actually

00:13:33,730 --> 00:13:38,020
not needed and I can come out with

00:13:35,410 --> 00:13:39,790
cleaner code in the end and you might

00:13:38,020 --> 00:13:42,100
not think to yourself okay but one or

00:13:39,790 --> 00:13:43,720
two empty div container sets yeah I

00:13:42,100 --> 00:13:46,000
don't care about that but if you

00:13:43,720 --> 00:13:48,310
multiply it by the amount of components

00:13:46,000 --> 00:13:52,930
you reuse and this just gets out of hand

00:13:48,310 --> 00:13:54,550
pretty cool pretty quickly and an even

00:13:52,930 --> 00:13:57,580
more drastic approach we took there on

00:13:54,550 --> 00:13:59,560
the Q&A page was okay I just see that

00:13:57,580 --> 00:14:02,530
this image doesn't render very nice of

00:13:59,560 --> 00:14:05,680
this screen but it was adding pagination

00:14:02,530 --> 00:14:07,960
power to her pages when we introduced

00:14:05,680 --> 00:14:09,670
the features users would always load all

00:14:07,960 --> 00:14:12,190
the question answers that have ever been

00:14:09,670 --> 00:14:13,570
asked for a specific company and we

00:14:12,190 --> 00:14:16,320
quickly realized that this would loss

00:14:13,570 --> 00:14:18,970
was not a very scalable approach or

00:14:16,320 --> 00:14:20,620
api's were slowing down or rendering was

00:14:18,970 --> 00:14:23,830
slowing down both on the server and both

00:14:20,620 --> 00:14:25,630
on the client and so a few months ago we

00:14:23,830 --> 00:14:27,790
went back and actually said okay

00:14:25,630 --> 00:14:30,130
we just limit the amounts of questions

00:14:27,790 --> 00:14:32,350
we load in the meaning to 30 and that

00:14:30,130 --> 00:14:37,210
way we have much faster rendering times

00:14:32,350 --> 00:14:40,540
for these pages step 7

00:14:37,210 --> 00:14:44,470
was utilizing CD ends in a better way

00:14:40,540 --> 00:14:46,990
so we were already using AWS but we had

00:14:44,470 --> 00:14:48,370
lots of assets like our logo or country

00:14:46,990 --> 00:14:52,690
flags that were used in our language

00:14:48,370 --> 00:14:54,640
switcher and these assets were actually

00:14:52,690 --> 00:14:56,860
baked into our code because we we were

00:14:54,640 --> 00:14:59,920
using a sweet cheese and they were just

00:14:56,860 --> 00:15:01,720
in line input into the HTML and with

00:14:59,920 --> 00:15:04,420
that came two problems on the one hand

00:15:01,720 --> 00:15:06,310
we couldn't reuse reuse these assets

00:15:04,420 --> 00:15:08,680
across the applications so even though

00:15:06,310 --> 00:15:10,270
the user already downloaded the logo on

00:15:08,680 --> 00:15:12,490
one page you would have to redownload

00:15:10,270 --> 00:15:14,370
download it on the next page because it

00:15:12,490 --> 00:15:17,230
was simply part of the bundle and

00:15:14,370 --> 00:15:19,180
although these assets were not cached in

00:15:17,230 --> 00:15:21,220
a good way because every time we did a

00:15:19,180 --> 00:15:22,570
new deploy these caches would be

00:15:21,220 --> 00:15:25,690
invalidated and the users had to

00:15:22,570 --> 00:15:28,640
redownload these assets and what we're

00:15:25,690 --> 00:15:30,860
doing now is actually pretty simple we

00:15:28,640 --> 00:15:36,110
newly uploaded these assets to s3 and

00:15:30,860 --> 00:15:38,240
link to them in our applications and the

00:15:36,110 --> 00:15:40,010
second thing we did with AWS was

00:15:38,240 --> 00:15:44,060
actually starting serving our bundles

00:15:40,010 --> 00:15:46,640
from Emerson with every deploy we're

00:15:44,060 --> 00:15:48,890
doing now we have an extra step that

00:15:46,640 --> 00:15:52,490
just uploads the style sheets and

00:15:48,890 --> 00:15:54,320
JavaScript files to AWS and that

00:15:52,490 --> 00:15:57,530
actually reduces the amount of work our

00:15:54,320 --> 00:15:59,600
noches service have to do greatly

00:15:57,530 --> 00:16:01,880
because before every note yes serve I

00:15:59,600 --> 00:16:04,520
had to both render HTML responses but

00:16:01,880 --> 00:16:08,320
also serve JavaScript files and CSS

00:16:04,520 --> 00:16:11,470
files and now by using AWS this is just

00:16:08,320 --> 00:16:14,660
less amount of work to do

00:16:11,470 --> 00:16:16,700
yeah as I said we took seven steps

00:16:14,660 --> 00:16:20,780
roughly there's of course a lot of

00:16:16,700 --> 00:16:22,310
smaller optimizations as well but you

00:16:20,780 --> 00:16:25,130
might not wonder okay where are we now

00:16:22,310 --> 00:16:26,810
with PageSpeed and I'm pleased to say

00:16:25,130 --> 00:16:29,060
that we're at a much better place and in

00:16:26,810 --> 00:16:30,560
the beginning our time to our

00:16:29,060 --> 00:16:33,200
interactive could still be a little bit

00:16:30,560 --> 00:16:35,360
better it's just over five seconds so

00:16:33,200 --> 00:16:37,580
just over the goal that we have and our

00:16:35,360 --> 00:16:40,370
first content full paint is it's right

00:16:37,580 --> 00:16:42,530
where it should be and of course it was

00:16:40,370 --> 00:16:45,320
a lot of work to do but nothing if that

00:16:42,530 --> 00:16:48,290
was so complex that it ever scared us to

00:16:45,320 --> 00:16:51,770
do and I hope all of you can can reuse

00:16:48,290 --> 00:16:53,720
some of the stuff I showed you so yeah

00:16:51,770 --> 00:16:57,749
thank you for your attention

00:16:53,720 --> 00:16:57,749

YouTube URL: https://www.youtube.com/watch?v=nlb_djDqQHk


