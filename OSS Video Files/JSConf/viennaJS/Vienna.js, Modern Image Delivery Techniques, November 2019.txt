Title: Vienna.js, Modern Image Delivery Techniques, November 2019
Publication date: 2019-11-30
Playlist: viennaJS
Description: 
	Talk By Doug Sillars

The average mobile website page weight is ~50% images. Toss in the complication of thousands of differently sized screens, and it might appear that efficient delivery of images to every device is an impossible task. But all is not lost! In this talk, we’ll examine strategies to send the perfect image to every device, ensuring a fast, beautiful rendering of your content. We’ll look at progressive images, placeholder images, lazy loading and other techniques and real world examples that will improve the usability of your site or app. Attendees will come away with an understand of the current ‘state of the art’ for optimizing visual content on the web.
Captions: 
	00:00:00,060 --> 00:00:05,040
I'm Doug and we're gonna talk about

00:00:02,340 --> 00:00:09,540
delivering fast beautiful images on the

00:00:05,040 --> 00:00:11,790
web all right there we go

00:00:09,540 --> 00:00:14,700
all right so I'm Doug quick introductory

00:00:11,790 --> 00:00:15,900
slides I'm originally from Seattle but

00:00:14,700 --> 00:00:17,490
I've been traveling around Europe for

00:00:15,900 --> 00:00:20,100
four years with my family as a digital

00:00:17,490 --> 00:00:21,960
nomad I do freelance develop for

00:00:20,100 --> 00:00:23,340
relations I help people speed up their

00:00:21,960 --> 00:00:25,769
web pages their native apps

00:00:23,340 --> 00:00:28,140
I wrote a how to speed up Android apps

00:00:25,769 --> 00:00:29,939
that's the URL to the PDF if you want to

00:00:28,140 --> 00:00:32,040
download it and I'll post the slides

00:00:29,939 --> 00:00:34,260
later so you don't have to take a

00:00:32,040 --> 00:00:36,840
photograph and hope it comes out to get

00:00:34,260 --> 00:00:38,460
the URL if you ever want to reach me I'm

00:00:36,840 --> 00:00:41,820
Doug siller's on the Internet I'm the

00:00:38,460 --> 00:00:44,579
only one so I'm easy to find Twitter

00:00:41,820 --> 00:00:47,340
Gmail all that stuff so we're gonna

00:00:44,579 --> 00:00:51,510
start off looking it's kind of hard to

00:00:47,340 --> 00:00:53,640
see but there's a walkway right here and

00:00:51,510 --> 00:00:55,920
is nailed to the side of an ALP in

00:00:53,640 --> 00:00:57,360
Switzerland and so how many you sort of

00:00:55,920 --> 00:00:58,859
get nervous thinking about walking

00:00:57,360 --> 00:01:02,489
across this walkway that's literally

00:00:58,859 --> 00:01:04,799
nailed to the side of and help just

00:01:02,489 --> 00:01:07,200
about everybody I walked across this a

00:01:04,799 --> 00:01:09,210
few years ago with my family and my

00:01:07,200 --> 00:01:10,979
six-year-old daughter jumped and she

00:01:09,210 --> 00:01:13,200
walked across it so it rattled the whole

00:01:10,979 --> 00:01:16,770
time we were walking on it which added a

00:01:13,200 --> 00:01:18,180
little bit more to the experience but

00:01:16,770 --> 00:01:19,799
interestingly like four or five years

00:01:18,180 --> 00:01:21,840
ago Ericsson did a study and they put

00:01:19,799 --> 00:01:23,340
sensors on people's heads to measure

00:01:21,840 --> 00:01:25,110
stress responses and different things

00:01:23,340 --> 00:01:26,759
and they found that thinking about

00:01:25,110 --> 00:01:29,549
standing on the edge of a cliff raises

00:01:26,759 --> 00:01:31,470
your stress level they actually found

00:01:29,549 --> 00:01:33,869
that a slow mobile web site is more

00:01:31,470 --> 00:01:41,490
stressful than standing on the edge of a

00:01:33,869 --> 00:01:43,320
cliff so if you know we don't want to

00:01:41,490 --> 00:01:46,200
have slow websites because slow web

00:01:43,320 --> 00:01:47,549
sites if people are frustrated they tend

00:01:46,200 --> 00:01:49,170
to you know we go to little mall it's

00:01:47,549 --> 00:01:50,399
always happy music and bright lights so

00:01:49,170 --> 00:01:52,560
you're happy because you spend more

00:01:50,399 --> 00:01:53,939
money but if you're already frustrated

00:01:52,560 --> 00:01:55,320
when you go to the website

00:01:53,939 --> 00:01:57,240
you're not gonna visit as often you're

00:01:55,320 --> 00:01:58,320
probably gonna leave a lot sooner and if

00:01:57,240 --> 00:02:00,689
it's an e-commerce site they're gonna

00:01:58,320 --> 00:02:03,090
spend less money all right

00:02:00,689 --> 00:02:05,100
there's data behind this Google found

00:02:03,090 --> 00:02:07,680
that a three percent delay causes you to

00:02:05,100 --> 00:02:09,030
lose half of your customers a half

00:02:07,680 --> 00:02:10,800
second delay increases people's

00:02:09,030 --> 00:02:13,890
frustration and lowers their engagement

00:02:10,800 --> 00:02:16,350
both Amazon and Walmart found that

00:02:13,890 --> 00:02:18,330
people spend less money when the webpage

00:02:16,350 --> 00:02:21,330
is slower just even 100 milliseconds and

00:02:18,330 --> 00:02:22,860
a study a few years ago found that 4% of

00:02:21,330 --> 00:02:25,620
mobile users admit to throwing their

00:02:22,860 --> 00:02:28,130
phones when there's a slow website so we

00:02:25,620 --> 00:02:31,710
really don't want to have slow websites

00:02:28,130 --> 00:02:33,660
but what makes up webpages and this is

00:02:31,710 --> 00:02:37,290
10,000 web pages from earlier this year

00:02:33,660 --> 00:02:39,180
on mobile and the bottom is blue and

00:02:37,290 --> 00:02:41,520
that's your images and so you can see

00:02:39,180 --> 00:02:45,810
that images make up anywhere from about

00:02:41,520 --> 00:02:48,720
a third to oh you know 80% of the

00:02:45,810 --> 00:02:50,550
tonnage on every single web page right

00:02:48,720 --> 00:02:53,520
so if we could make the image is smaller

00:02:50,550 --> 00:02:55,500
and have them still look beautiful which

00:02:53,520 --> 00:02:57,030
is what we're gonna talk about today we

00:02:55,500 --> 00:02:58,980
can lower the tonnage of the webpage

00:02:57,030 --> 00:03:01,850
meaning it's gonna load faster and if it

00:02:58,980 --> 00:03:04,680
loads faster drive happier customers

00:03:01,850 --> 00:03:07,709
anyone use lighthouse lighthouse fans

00:03:04,680 --> 00:03:10,130
yes great to see all those hands so

00:03:07,709 --> 00:03:12,989
those who don't know lighthouse is a

00:03:10,130 --> 00:03:14,910
free open-source tool from Google it's

00:03:12,989 --> 00:03:17,550
inside chrome dev tools it's inside

00:03:14,910 --> 00:03:19,530
webpagetest and it will help you figure

00:03:17,550 --> 00:03:20,519
out speed optimizations for your web

00:03:19,530 --> 00:03:23,190
page it also helps you with

00:03:20,519 --> 00:03:25,110
accessibility there are four

00:03:23,190 --> 00:03:27,330
optimizations inside lighthouse for

00:03:25,110 --> 00:03:33,299
images quality format sizing and lazy

00:03:27,330 --> 00:03:35,790
loading web page test fans yes I love

00:03:33,299 --> 00:03:37,769
all those hands again at a great free

00:03:35,790 --> 00:03:41,100
open source tool to test how fast your

00:03:37,769 --> 00:03:42,420
webpages and you get their instances all

00:03:41,100 --> 00:03:44,910
around the world so you can see how fast

00:03:42,420 --> 00:03:47,670
your page loads in America in Ireland in

00:03:44,910 --> 00:03:51,120
Singapore right you can test all sorts

00:03:47,670 --> 00:03:52,590
of cool things a really neat tool built

00:03:51,120 --> 00:03:55,920
on top of web page test is called the

00:03:52,590 --> 00:03:58,519
HTTP archive and the HTTP archive tests

00:03:55,920 --> 00:04:00,690
five million web pages every month and

00:03:58,519 --> 00:04:02,519
throws them all into a sequel database

00:04:00,690 --> 00:04:04,860
you get all the web page test results

00:04:02,519 --> 00:04:07,739
for five million web pages that you can

00:04:04,860 --> 00:04:10,370
then query and learn about just earlier

00:04:07,739 --> 00:04:14,880
this month web the HTTP archive

00:04:10,370 --> 00:04:16,620
published this giant article the state

00:04:14,880 --> 00:04:18,209
of the web or something like the web

00:04:16,620 --> 00:04:20,549
Almanac is what we're calling it and

00:04:18,209 --> 00:04:22,140
it's got like 13 chapters with all this

00:04:20,549 --> 00:04:27,090
information pulled out of the HTTP

00:04:22,140 --> 00:04:30,900
archive really cool information I wrote

00:04:27,090 --> 00:04:32,790
part of the the media chapter but what

00:04:30,900 --> 00:04:35,250
we can do is because the HTTP archive

00:04:32,790 --> 00:04:37,860
has webpage test data and lighthouse

00:04:35,250 --> 00:04:41,490
data is we can see how the web is built

00:04:37,860 --> 00:04:44,940
based on these four best practices so

00:04:41,490 --> 00:04:48,690
the image quality test lighthouse says

00:04:44,940 --> 00:04:50,270
save all your images at 85% and so when

00:04:48,690 --> 00:04:52,200
you lower the quality of an image

00:04:50,270 --> 00:04:54,210
obviously you're increasing the

00:04:52,200 --> 00:04:57,000
compression but you can also make the

00:04:54,210 --> 00:04:59,460
image have pixelization in it lighthouse

00:04:57,000 --> 00:05:01,110
found that 85% nobody really notices and

00:04:59,460 --> 00:05:03,690
you generally make the image half the

00:05:01,110 --> 00:05:06,330
original size so you can use image magic

00:05:03,690 --> 00:05:08,190
from the command line to save it at 85

00:05:06,330 --> 00:05:09,840
percent quality you can use a

00:05:08,190 --> 00:05:12,180
cloud-based tool like cloud Neri we

00:05:09,840 --> 00:05:14,970
upload the full size image you get a URL

00:05:12,180 --> 00:05:16,919
and you can just add that q85 parameter

00:05:14,970 --> 00:05:19,860
in there and it returns the quality 85

00:05:16,919 --> 00:05:23,250
image for you automatically you can't

00:05:19,860 --> 00:05:25,229
tell from this projector but that's the

00:05:23,250 --> 00:05:27,360
hundred percent image that's the 85

00:05:25,229 --> 00:05:29,820
percent image what you can see as it

00:05:27,360 --> 00:05:31,590
goes from three point six to one point

00:05:29,820 --> 00:05:37,229
eight seven megabytes it's half the size

00:05:31,590 --> 00:05:39,570
but it still looks awesome a year ago in

00:05:37,229 --> 00:05:41,700
the HTTP archive a third of the Internet

00:05:39,570 --> 00:05:45,270
was failing this and 43% were passing

00:05:41,700 --> 00:05:47,970
this year were at about the same 48

00:05:45,270 --> 00:05:51,450
percent pass and 32 percent fail they

00:05:47,970 --> 00:05:54,240
changed the scoring a bit but still a

00:05:51,450 --> 00:05:56,340
third of the Internet is failing this of

00:05:54,240 --> 00:05:58,890
these sites that are failing the median

00:05:56,340 --> 00:06:02,220
page would be 3.7 seconds faster and use

00:05:58,890 --> 00:06:04,979
133 KS data these sites down here would

00:06:02,220 --> 00:06:07,530
be 10 seconds faster and use one point 6

00:06:04,979 --> 00:06:10,530
megabytes less data so there's a huge

00:06:07,530 --> 00:06:12,360
and that's the median so there's like 8

00:06:10,530 --> 00:06:16,169
percent there so 4 percent of web sites

00:06:12,360 --> 00:06:18,270
are actually worse than this you can

00:06:16,169 --> 00:06:19,680
save it at 50 percent and if this

00:06:18,270 --> 00:06:22,770
projector had a little bit more light

00:06:19,680 --> 00:06:25,470
you might see some pixelization in the

00:06:22,770 --> 00:06:26,850
sky and usually 20 percent looks

00:06:25,470 --> 00:06:29,389
horrible too but you can't tell them

00:06:26,850 --> 00:06:32,909
this projector either so like

00:06:29,389 --> 00:06:36,150
we could get away with a 500 K image if

00:06:32,909 --> 00:06:38,490
all monitors look like this one but we

00:06:36,150 --> 00:06:40,529
can't this image actually looks like

00:06:38,490 --> 00:06:44,369
crap right here on my screen and I have

00:06:40,529 --> 00:06:46,800
a crappy old Mac so but this one looks

00:06:44,369 --> 00:06:48,210
good we know that one is bad it'd be

00:06:46,800 --> 00:06:50,789
really neat if you could even find a

00:06:48,210 --> 00:06:53,039
better quality metric than 85% Google

00:06:50,789 --> 00:06:55,770
came up with 85% it works for most

00:06:53,039 --> 00:06:58,649
images there are tools that will do

00:06:55,770 --> 00:07:02,939
better than that Google actually has a

00:06:58,649 --> 00:07:04,469
tool called booter ugly all googles

00:07:02,939 --> 00:07:07,490
compression engineers are in Switzerland

00:07:04,469 --> 00:07:11,189
and they named everything after pastries

00:07:07,490 --> 00:07:13,349
and structural similarity is the one I'm

00:07:11,189 --> 00:07:14,279
going to use there's open source tools

00:07:13,349 --> 00:07:17,210
that will do it

00:07:14,279 --> 00:07:19,800
cloud Neri will do it so this is a

00:07:17,210 --> 00:07:22,439
Tobias Baldauf built a tool that will do

00:07:19,800 --> 00:07:24,930
it you say cue Auto with cloud Neri and

00:07:22,439 --> 00:07:26,849
what this does is structural similarity

00:07:24,930 --> 00:07:29,069
lowers the quality to where the human

00:07:26,849 --> 00:07:30,509
eye can't tell the difference so if it

00:07:29,069 --> 00:07:32,069
looks perfect to the human eye we might

00:07:30,509 --> 00:07:35,639
as well remove as many pixels as we can

00:07:32,069 --> 00:07:37,169
to make the file smaller and you can't

00:07:35,639 --> 00:07:41,370
tell it's still if this one still looks

00:07:37,169 --> 00:07:44,309
awesome it's 400 K smaller than 85% so

00:07:41,370 --> 00:07:48,419
we shaved off another 400 K and nobody

00:07:44,309 --> 00:07:50,189
is the wiser what we can also see is

00:07:48,419 --> 00:07:52,649
load these images up in webpagetest on a

00:07:50,189 --> 00:07:54,449
3G connection and you can see we took it

00:07:52,649 --> 00:07:57,300
from 21 seconds down to nine and a half

00:07:54,449 --> 00:07:58,830
seconds so we're drastically speeding up

00:07:57,300 --> 00:08:00,479
the delivery of this image it's still

00:07:58,830 --> 00:08:02,389
over a megabyte right it's still a

00:08:00,479 --> 00:08:05,759
megabyte and a half it's still too big

00:08:02,389 --> 00:08:08,129
but we'll work on that the second

00:08:05,759 --> 00:08:11,399
optimization inside lighthouse is the

00:08:08,129 --> 00:08:12,870
format there are a lot of different

00:08:11,399 --> 00:08:14,639
image formats out there right we've got

00:08:12,870 --> 00:08:17,029
JPEGs which are definitely the most

00:08:14,639 --> 00:08:19,469
popular we've got gifts we've got pngs

00:08:17,029 --> 00:08:22,680
let's talk about SVG's for a little bit

00:08:19,469 --> 00:08:24,269
vector graphics are really cool they're

00:08:22,680 --> 00:08:25,409
infinitely scalable because they're

00:08:24,269 --> 00:08:27,959
drawn to shapes and they're basically

00:08:25,409 --> 00:08:29,789
xml documents so that Twitter icon

00:08:27,959 --> 00:08:31,199
that's the same icon and you just

00:08:29,789 --> 00:08:33,060
stretch it because they're all vectors

00:08:31,199 --> 00:08:35,639
it just scales no matter what and it's

00:08:33,060 --> 00:08:39,599
awesome there's a web page out there

00:08:35,639 --> 00:08:41,579
that has this red logo of a target and I

00:08:39,599 --> 00:08:43,590
knew something was immediately wrong

00:08:41,579 --> 00:08:46,770
with this SVG

00:08:43,590 --> 00:08:49,320
so I opened up the SVG and these are all

00:08:46,770 --> 00:08:53,100
the circles and then you can see it says

00:08:49,320 --> 00:08:54,960
Adobe Illustrator and then and so what's

00:08:53,100 --> 00:08:57,779
happening here is Adobe Illustrator I

00:08:54,960 --> 00:08:59,100
think what it's doing is base64 encoding

00:08:57,779 --> 00:09:03,420
the original image and just throwing it

00:08:59,100 --> 00:09:09,750
in his metadata because why not it was

00:09:03,420 --> 00:09:11,880
946 K so the solution is to on line 32

00:09:09,750 --> 00:09:18,510
click drag to the bottom and press the

00:09:11,880 --> 00:09:20,190
delete 1 K this is more of a if you see

00:09:18,510 --> 00:09:21,960
an SVG that's that's big something's

00:09:20,190 --> 00:09:23,940
wrong and you should probably not launch

00:09:21,960 --> 00:09:27,270
that to production it's more of just a

00:09:23,940 --> 00:09:30,360
testing thing you can gzip that to 600

00:09:27,270 --> 00:09:33,660
bytes you can use brought Li take it

00:09:30,360 --> 00:09:39,570
down to 500 bytes again a Google

00:09:33,660 --> 00:09:42,870
compression algorithm they had - there's

00:09:39,570 --> 00:09:45,210
the orange one it was also 946 kilobytes

00:09:42,870 --> 00:09:48,690
for those of you in the know you can

00:09:45,210 --> 00:09:51,960
style SVG's to just change the color so

00:09:48,690 --> 00:09:55,290
two lines of FCSS and you've turned it

00:09:51,960 --> 00:09:57,330
from red to orange or you can go the 1.8

00:09:55,290 --> 00:09:59,310
megabyte approach that this webpage is

00:09:57,330 --> 00:10:03,800
doing we all know which one is going to

00:09:59,310 --> 00:10:03,800
be faster it's pretty straightforward

00:10:03,920 --> 00:10:10,170
another funny thing I see happened with

00:10:06,180 --> 00:10:13,650
a lot of images is pngs great format

00:10:10,170 --> 00:10:15,480
it's got transparency however a lot of

00:10:13,650 --> 00:10:17,339
the PNG s I see on the Internet

00:10:15,480 --> 00:10:19,320
have sort of this format and if you're a

00:10:17,339 --> 00:10:21,960
Mac user you recognize this format of

00:10:19,320 --> 00:10:27,089
screen underscore shot underscore year

00:10:21,960 --> 00:10:29,670
day month this American month day at

00:10:27,089 --> 00:10:31,170
time right this is a screenshot somebody

00:10:29,670 --> 00:10:33,720
got the perfect thing on their Mac and

00:10:31,170 --> 00:10:40,130
which took a screenshot and then pushed

00:10:33,720 --> 00:10:42,120
it to production this is not ideal I

00:10:40,130 --> 00:10:44,490
don't have the slide here but basically

00:10:42,120 --> 00:10:47,670
I found that 2% of the web has a

00:10:44,490 --> 00:10:50,370
screenshot an image with the parameter

00:10:47,670 --> 00:10:50,760
screenshot in the UM in the name of the

00:10:50,370 --> 00:10:53,459
file

00:10:50,760 --> 00:10:56,640
I took 3,000 of them turned them to JPEG

00:10:53,459 --> 00:10:59,220
save them at cue Auto

00:10:56,640 --> 00:11:01,290
35% of them were 10% the original size

00:10:59,220 --> 00:11:02,910
like screenshots are awesome these are

00:11:01,290 --> 00:11:04,560
screenshots of graphs that I made this

00:11:02,910 --> 00:11:07,320
is a screenshot of a tweet I made right

00:11:04,560 --> 00:11:09,570
there great but you need to compress it

00:11:07,320 --> 00:11:12,690
and change the format before you push it

00:11:09,570 --> 00:11:14,959
live on to the Internet and 2% of the

00:11:12,690 --> 00:11:20,579
web has screenshots on their web page

00:11:14,959 --> 00:11:23,339
according to the HTTP archive so the

00:11:20,579 --> 00:11:26,820
best practice inside a lighthouse says

00:11:23,339 --> 00:11:29,820
you should use web pea or JPEG 2000

00:11:26,820 --> 00:11:32,070
depending on the browser JPEG 2000 is

00:11:29,820 --> 00:11:33,870
supported by Safari and web P is

00:11:32,070 --> 00:11:37,769
supported by all the other major modern

00:11:33,870 --> 00:11:40,649
browsers so I'll just use web P is the

00:11:37,769 --> 00:11:46,110
term here because it works in you know

00:11:40,649 --> 00:11:48,750
everything but ie in Safari so when I

00:11:46,110 --> 00:11:51,029
save this same image as a web P it goes

00:11:48,750 --> 00:11:56,880
from 1.4 megabytes to about one megabyte

00:11:51,029 --> 00:11:58,920
so I saved another 400 K if you don't if

00:11:56,880 --> 00:12:00,750
you have users if you still have to

00:11:58,920 --> 00:12:03,149
support things like ie 11 you can use

00:12:00,750 --> 00:12:04,949
the picture tag where you serve a web P

00:12:03,149 --> 00:12:06,600
if the browser doesn't know what to do

00:12:04,949 --> 00:12:09,709
with the web P it will fall back to the

00:12:06,600 --> 00:12:12,990
JPEG because every browser supports JPEG

00:12:09,709 --> 00:12:14,730
and you should always have alt text but

00:12:12,990 --> 00:12:16,079
as you can see when I use a web P it

00:12:14,730 --> 00:12:17,880
goes from nine and a half seconds down

00:12:16,079 --> 00:12:19,980
to seven seconds we're still speeding up

00:12:17,880 --> 00:12:23,699
this image delivery we shaved off

00:12:19,980 --> 00:12:26,790
another two and a half seconds here if

00:12:23,699 --> 00:12:29,449
we look a year ago two thirds of the web

00:12:26,790 --> 00:12:31,320
was failing this best practice and

00:12:29,449 --> 00:12:33,890
almost two thirds of the web is still

00:12:31,320 --> 00:12:38,519
failing this best practice unfortunately

00:12:33,890 --> 00:12:40,589
that's from this year the median page

00:12:38,519 --> 00:12:42,329
would be six point six seconds faster by

00:12:40,589 --> 00:12:47,910
changing the image format of the images

00:12:42,329 --> 00:12:50,730
on the webpage these down here 26% of

00:12:47,910 --> 00:12:53,250
the web would the median page would be

00:12:50,730 --> 00:12:55,440
15 seconds faster and because that's the

00:12:53,250 --> 00:12:58,649
median that means that 13% of the web

00:12:55,440 --> 00:13:00,660
would actually be save even more than 15

00:12:58,649 --> 00:13:02,399
seconds on load time on a mobile

00:13:00,660 --> 00:13:07,199
connection like there's a huge potential

00:13:02,399 --> 00:13:09,390
to speed up the web here sizing of

00:13:07,199 --> 00:13:10,440
images sort of makes the most sense it's

00:13:09,390 --> 00:13:11,940
responsive image

00:13:10,440 --> 00:13:14,370
right you serve a different size image

00:13:11,940 --> 00:13:20,670
to this than you do to this than you do

00:13:14,370 --> 00:13:24,449
to a screen like this as an example this

00:13:20,670 --> 00:13:26,430
image right here was 13 million pixels

00:13:24,449 --> 00:13:30,480
it was 1.6 megabytes I do all the

00:13:26,430 --> 00:13:33,660
optimizations I get it down to 800 K but

00:13:30,480 --> 00:13:36,899
it's still 13 million pixels so when I

00:13:33,660 --> 00:13:38,759
serve it to a small device only 500

00:13:36,899 --> 00:13:41,519
thousand pixels show up on the screen so

00:13:38,759 --> 00:13:44,939
my phone ends up throwing away 12.5

00:13:41,519 --> 00:13:46,829
million pixels so people on these small

00:13:44,939 --> 00:13:49,230
devices are getting taxed EE they have

00:13:46,829 --> 00:13:51,769
to download the entire file and then the

00:13:49,230 --> 00:13:56,189
phone CPU has to fire up and throw away

00:13:51,769 --> 00:13:57,720
95 97 percent of the pixels that were

00:13:56,189 --> 00:14:00,750
downloaded before it can show up on the

00:13:57,720 --> 00:14:03,389
screen it's kind of like when you buy

00:14:00,750 --> 00:14:05,970
something from Amazon can you see that

00:14:03,389 --> 00:14:08,370
and you get a giant box full of brown

00:14:05,970 --> 00:14:10,110
paper and you have to go around and then

00:14:08,370 --> 00:14:11,699
find the thing in the bottom right we're

00:14:10,110 --> 00:14:14,790
doing this with images on the web today

00:14:11,699 --> 00:14:16,439
and we shouldn't do that there is a

00:14:14,790 --> 00:14:18,839
problem with that so this is a different

00:14:16,439 --> 00:14:21,360
image this image was originally 16

00:14:18,839 --> 00:14:23,790
million pixels and I downsized it to be

00:14:21,360 --> 00:14:27,060
1 million pixels and then what I did is

00:14:23,790 --> 00:14:29,279
I measured how much time it took the CPU

00:14:27,060 --> 00:14:31,649
to decode the image to throw away 15

00:14:29,279 --> 00:14:33,089
million pixels and on the desktop it was

00:14:31,649 --> 00:14:34,110
really fast it took less than 100

00:14:33,089 --> 00:14:37,230
milliseconds that's going to be

00:14:34,110 --> 00:14:38,850
instantaneous on a Motorola g4 sort of a

00:14:37,230 --> 00:14:42,000
mid-range Android device it took 200

00:14:38,850 --> 00:14:43,980
milliseconds on the Alcatel 1x which was

00:14:42,000 --> 00:14:45,600
on sale last year it's an Android go

00:14:43,980 --> 00:14:48,209
device it has a really really crappy

00:14:45,600 --> 00:14:51,000
processor in it it takes 800

00:14:48,209 --> 00:14:53,459
milliseconds to throw away all of those

00:14:51,000 --> 00:14:54,809
extra pixels so of course the problem

00:14:53,459 --> 00:14:57,809
with that is it's just making your

00:14:54,809 --> 00:14:59,490
webpage appear even slower it probably

00:14:57,809 --> 00:15:01,319
also causes the phone to heat up because

00:14:59,490 --> 00:15:05,250
the CPU is firing draining the battery

00:15:01,319 --> 00:15:07,920
faster it can really hurt people who are

00:15:05,250 --> 00:15:10,800
really low end devices and when you look

00:15:07,920 --> 00:15:12,629
this is from Akamai showing all of the

00:15:10,800 --> 00:15:15,449
different devices that hit Akamai that

00:15:12,629 --> 00:15:17,370
were Android and green means fast so

00:15:15,449 --> 00:15:19,589
these are all Samsung's right lots of

00:15:17,370 --> 00:15:21,449
divide lots of users but you can also

00:15:19,589 --> 00:15:23,040
see there are a lot of red and orange is

00:15:21,449 --> 00:15:24,140
over here and those are really slow

00:15:23,040 --> 00:15:26,120
devices so be

00:15:24,140 --> 00:15:30,320
images are going to take a long time to

00:15:26,120 --> 00:15:32,000
appear to those customers so the way you

00:15:30,320 --> 00:15:33,590
solve this of course is you generate a

00:15:32,000 --> 00:15:36,140
bunch of different images in this

00:15:33,590 --> 00:15:37,880
example I did 25 kilobytes different in

00:15:36,140 --> 00:15:40,280
size I generated 20 different images

00:15:37,880 --> 00:15:42,410
that's probably too many maybe you do 4

00:15:40,280 --> 00:15:44,450
maybe you do 5 different sizes if you

00:15:42,410 --> 00:15:46,730
look at what devices are hitting your

00:15:44,450 --> 00:15:49,040
server and look at the sizes and make

00:15:46,730 --> 00:15:50,390
that decision but when I serve the right

00:15:49,040 --> 00:15:51,860
size the image now I'm only using a

00:15:50,390 --> 00:15:53,360
hundred thousand pics i'm only throwing

00:15:51,860 --> 00:15:57,280
away a hundred thousand pixels as

00:15:53,360 --> 00:15:57,280
opposed to twelve and a half million

00:15:57,350 --> 00:16:03,110
I used responsive breakpoint it's a web

00:16:00,500 --> 00:16:07,670
page they have a way you can automate

00:16:03,110 --> 00:16:09,590
this as well this up on github when I do

00:16:07,670 --> 00:16:12,190
that now I'm serving the right size

00:16:09,590 --> 00:16:15,230
width and height to this mobile device

00:16:12,190 --> 00:16:17,030
so it's only 121 kilobytes and it only

00:16:15,230 --> 00:16:20,030
takes two seconds to get delivered to

00:16:17,030 --> 00:16:24,230
the mobile phone so by optimizing the

00:16:20,030 --> 00:16:27,500
the format the size and the quality I've

00:16:24,230 --> 00:16:29,480
taken it from 21 almost 22 seconds down

00:16:27,500 --> 00:16:34,340
to just over 2 seconds for that image to

00:16:29,480 --> 00:16:37,760
load huge improvement so if we look at

00:16:34,340 --> 00:16:41,120
responsive use on the web last year 57%

00:16:37,760 --> 00:16:44,450
of the web was passing this year 58% of

00:16:41,120 --> 00:16:45,470
the web is passing this best practice we

00:16:44,450 --> 00:16:48,740
could still have room for improvement

00:16:45,470 --> 00:16:50,930
here a quarter of the web is failing we

00:16:48,740 --> 00:16:53,270
could speed up our pages median one

00:16:50,930 --> 00:16:55,070
point six seconds these folks down here

00:16:53,270 --> 00:16:56,780
they're probably all the same websites

00:16:55,070 --> 00:16:58,940
that are failing all these best

00:16:56,780 --> 00:17:00,890
practices but we could say we're still

00:16:58,940 --> 00:17:04,000
looking at 14 seconds faster load time

00:17:00,890 --> 00:17:06,140
two and point four megabytes less data

00:17:04,000 --> 00:17:10,730
these are web pages that are obviously

00:17:06,140 --> 00:17:12,650
serving huge images to mobile devices so

00:17:10,730 --> 00:17:14,140
the first three best practices are all

00:17:12,650 --> 00:17:17,449
things we can do to one image at a time

00:17:14,140 --> 00:17:19,040
lazy loading is something we can do to

00:17:17,449 --> 00:17:21,160
our web page and there's JavaScript

00:17:19,040 --> 00:17:24,079
libraries that will do this for us and

00:17:21,160 --> 00:17:26,990
the idea is if you have a web page with

00:17:24,079 --> 00:17:29,570
six images only load the ones that show

00:17:26,990 --> 00:17:31,040
up on the screen at load time and then

00:17:29,570 --> 00:17:33,050
using the intersection observer if

00:17:31,040 --> 00:17:36,380
somebody Scrolls through you load the

00:17:33,050 --> 00:17:38,010
images lazily as they scroll through the

00:17:36,380 --> 00:17:40,180
page

00:17:38,010 --> 00:17:41,920
obviously if at load time if you'd only

00:17:40,180 --> 00:17:45,970
allowed two images versus six the page

00:17:41,920 --> 00:17:48,160
is gonna load faster huge improvement

00:17:45,970 --> 00:17:50,020
that a year over a year so a year ago 22

00:17:48,160 --> 00:17:52,180
percent of the web is passing this year

00:17:50,020 --> 00:17:54,130
56 percent of the web is passing so a

00:17:52,180 --> 00:17:56,890
lot of people are implementing lazy

00:17:54,130 --> 00:17:59,320
loading these folks that are still

00:17:56,890 --> 00:18:01,090
failing could be three seconds faster

00:17:59,320 --> 00:18:04,120
these folks way down here at the bottom

00:18:01,090 --> 00:18:06,400
could be 12 seconds faster there is a

00:18:04,120 --> 00:18:09,550
lot of performance potential by lazy

00:18:06,400 --> 00:18:12,580
loading images a lot of the way people

00:18:09,550 --> 00:18:14,590
do this is they have it's hard to tell

00:18:12,580 --> 00:18:17,710
on this projector but when you do a

00:18:14,590 --> 00:18:22,240
Google image search for cats in costume

00:18:17,710 --> 00:18:23,260
you get one color placeholder images so

00:18:22,240 --> 00:18:27,400
this is green

00:18:23,260 --> 00:18:28,870
trust me it's green and after the image

00:18:27,400 --> 00:18:31,540
loads it's a cat dressed up like a

00:18:28,870 --> 00:18:33,160
dinosaur and this one is pink and it's a

00:18:31,540 --> 00:18:35,620
cat dressed up like a bunny rabbit and

00:18:33,160 --> 00:18:37,680
so these are you know one color SVG's

00:18:35,620 --> 00:18:40,090
there are a couple hundred bytes and

00:18:37,680 --> 00:18:43,960
they load instantaneously they're part

00:18:40,090 --> 00:18:45,850
of the HTML and then when the when the

00:18:43,960 --> 00:18:48,310
actual image loads it just replaces it

00:18:45,850 --> 00:18:51,910
so you got the placeholder image and

00:18:48,310 --> 00:18:56,740
then the actual image replaces it this

00:18:51,910 --> 00:18:58,540
is a some waterfalls and this is a squib

00:18:56,740 --> 00:19:00,670
so it actually has more texture than

00:18:58,540 --> 00:19:03,760
just being green as some green and white

00:19:00,670 --> 00:19:05,230
it's a little fancier it's it's an

00:19:03,760 --> 00:19:08,020
open-source tool so you can play with

00:19:05,230 --> 00:19:09,700
that if you're interested so a lazy

00:19:08,020 --> 00:19:12,130
loading experiment I built this webpage

00:19:09,700 --> 00:19:15,700
it's like 12 megabytes it has huge

00:19:12,130 --> 00:19:17,200
images on it and this is the desktop

00:19:15,700 --> 00:19:20,560
view you know these are all the

00:19:17,200 --> 00:19:22,420
different screens that you can see it's

00:19:20,560 --> 00:19:24,490
just way zoomed out and so it's the page

00:19:22,420 --> 00:19:27,430
loads you start with the text and you

00:19:24,490 --> 00:19:31,120
can see that the text keeps reef lowing

00:19:27,430 --> 00:19:33,820
as more images pop into place and it's

00:19:31,120 --> 00:19:36,310
sort of hard to tell again but you can

00:19:33,820 --> 00:19:37,630
see up here on screen for there's still

00:19:36,310 --> 00:19:38,950
an image missing at the top of the

00:19:37,630 --> 00:19:40,300
screen right so if you're a user you

00:19:38,950 --> 00:19:42,250
might still be sitting at the top of the

00:19:40,300 --> 00:19:44,980
screen waiting for that image to load

00:19:42,250 --> 00:19:47,260
but all of these images down here are

00:19:44,980 --> 00:19:48,700
fully loaded so the browser is loading

00:19:47,260 --> 00:19:50,020
the images but not in an order that

00:19:48,700 --> 00:19:52,900
makes sense

00:19:50,020 --> 00:19:55,660
to a user we'd expect the images to load

00:19:52,900 --> 00:19:58,600
from top to bottom so inside Chrome

00:19:55,660 --> 00:20:00,250
they've enabled lazy loading and so you

00:19:58,600 --> 00:20:03,220
can turn on lazy loading and what

00:20:00,250 --> 00:20:05,350
happens is it figures out the layout of

00:20:03,220 --> 00:20:08,110
the entire page where all the images go

00:20:05,350 --> 00:20:09,640
at the very beginning of page load so

00:20:08,110 --> 00:20:11,320
you can see the entire page is now laid

00:20:09,640 --> 00:20:14,110
out in the placeholder images have all

00:20:11,320 --> 00:20:16,930
been put into place and now what happens

00:20:14,110 --> 00:20:18,730
is the images load from top to bottom so

00:20:16,930 --> 00:20:20,230
as our customers as our users scroll

00:20:18,730 --> 00:20:22,390
through the page the images are loading

00:20:20,230 --> 00:20:23,770
in the order that we actually consume

00:20:22,390 --> 00:20:27,340
the content and so that makes a lot of

00:20:23,770 --> 00:20:28,600
sense so this is built into Chrome today

00:20:27,340 --> 00:20:31,450
you can check it out there's been a lot

00:20:28,600 --> 00:20:32,950
of blog posts about it this year and so

00:20:31,450 --> 00:20:34,300
that's what's in lighthouse but let's

00:20:32,950 --> 00:20:36,940
talk about a few other things that we

00:20:34,300 --> 00:20:40,330
can do to optimize images on the web who

00:20:36,940 --> 00:20:42,460
loves animated gifs everybody or half

00:20:40,330 --> 00:20:44,170
the people that's awesome when I lived

00:20:42,460 --> 00:20:46,630
in Seattle I had a goat

00:20:44,170 --> 00:20:47,950
I had goats and this is Nora and I

00:20:46,630 --> 00:20:51,790
thought we need to make an animated gif

00:20:47,950 --> 00:20:53,980
of Nora and the problem is when I take

00:20:51,790 --> 00:20:55,660
that the movie which is 1.4 megabytes

00:20:53,980 --> 00:21:01,120
and I make an animated gif it goes to

00:20:55,660 --> 00:21:04,360
3.8 megabytes so if you go back to 1990

00:21:01,120 --> 00:21:06,790
and you read the spec the gif format is

00:21:04,360 --> 00:21:08,650
not intended as a platform for animation

00:21:06,790 --> 00:21:12,160
even though it can be done in a limited

00:21:08,650 --> 00:21:15,880
way like the spec tells us we shouldn't

00:21:12,160 --> 00:21:18,450
be using animated gifts but you know

00:21:15,880 --> 00:21:18,450
that ship has sailed

00:21:19,420 --> 00:21:23,440
the problem is animated gifts if you

00:21:21,550 --> 00:21:25,570
have 30 frames per second it's literally

00:21:23,440 --> 00:21:28,960
30 gifts that just there's no

00:21:25,570 --> 00:21:32,440
compression through time videos

00:21:28,960 --> 00:21:37,210
compressed through time and so if I save

00:21:32,440 --> 00:21:40,660
this as a movie it's only 250 K it's a

00:21:37,210 --> 00:21:44,050
lot smaller the couple things here one

00:21:40,660 --> 00:21:46,150
is gifts are only 256 colors so I

00:21:44,050 --> 00:21:47,950
stripped out thousands of colors I also

00:21:46,150 --> 00:21:51,100
removed the audio track because gifts

00:21:47,950 --> 00:21:52,900
are silent and then you know I made it a

00:21:51,100 --> 00:21:54,700
gift and you might be thinking but what

00:21:52,900 --> 00:21:57,400
about Twitter they use gifts for those

00:21:54,700 --> 00:22:01,090
of you can't see it says gif in the

00:21:57,400 --> 00:22:07,210
corner they're lying

00:22:01,090 --> 00:22:08,620
this movie so whenever you've got a gif

00:22:07,210 --> 00:22:09,730
in slack when you've got a gif on

00:22:08,620 --> 00:22:10,419
Twitter when you've got a gif on

00:22:09,730 --> 00:22:13,149
Facebook

00:22:10,419 --> 00:22:16,210
it's a movie and the reason it's a movie

00:22:13,149 --> 00:22:18,100
is that movies only 400k it's a lot

00:22:16,210 --> 00:22:21,399
faster to load so sort of gift the

00:22:18,100 --> 00:22:23,350
medium is okay but gift the format no we

00:22:21,399 --> 00:22:25,240
don't want to use that and so of course

00:22:23,350 --> 00:22:27,970
the way you do this is use the video tag

00:22:25,240 --> 00:22:30,159
you set it to loop and to autoplay that

00:22:27,970 --> 00:22:31,840
makes sense because gifts loop and you

00:22:30,159 --> 00:22:35,049
want us to autoplay you have to set it

00:22:31,840 --> 00:22:36,850
to muted and that's because videos don't

00:22:35,049 --> 00:22:38,889
play automatically on mobile unless

00:22:36,850 --> 00:22:40,330
they're muted in the browser that's true

00:22:38,889 --> 00:22:43,960
for both mobile chrome and Mobile Safari

00:22:40,330 --> 00:22:47,039
and so that will play I turned off the

00:22:43,960 --> 00:22:50,259
control so you can't start and stop it

00:22:47,039 --> 00:22:52,059
if you're really adventurous you can

00:22:50,259 --> 00:22:56,440
actually put movies in the picture tag

00:22:52,059 --> 00:22:58,080
and that will work on Safari you don't

00:22:56,440 --> 00:23:00,340
have it only works on Safari

00:22:58,080 --> 00:23:04,210
I'd recommend just using the video tag

00:23:00,340 --> 00:23:07,749
set works everywhere so that animated

00:23:04,210 --> 00:23:10,029
gif of Norah the goat takes 22 seconds

00:23:07,749 --> 00:23:11,649
to load on a 3G connection if I make it

00:23:10,029 --> 00:23:12,940
a movie it takes four and a half seconds

00:23:11,649 --> 00:23:15,789
it's sort of a no-brainer we're gonna

00:23:12,940 --> 00:23:18,669
make that gif a peak gif appear a lot

00:23:15,789 --> 00:23:20,379
faster if we use it as a video web P has

00:23:18,669 --> 00:23:24,669
an animated format too it doesn't save

00:23:20,379 --> 00:23:27,009
you a whole lot before I go the other

00:23:24,669 --> 00:23:30,399
things that we can do is who knows about

00:23:27,009 --> 00:23:32,950
light mode on Android it used to be

00:23:30,399 --> 00:23:35,110
called data saver mode and what happens

00:23:32,950 --> 00:23:36,580
if you have an Android phone and you go

00:23:35,110 --> 00:23:39,009
into your settings you can turn on light

00:23:36,580 --> 00:23:41,259
mode and what that does is it turns on

00:23:39,009 --> 00:23:44,110
the save data header so that means every

00:23:41,259 --> 00:23:47,049
request to every server you make adds a

00:23:44,110 --> 00:23:51,340
header that says whoa send me less stuff

00:23:47,049 --> 00:23:53,649
and this is about a year old but Tim

00:23:51,340 --> 00:23:56,619
found that five percent of his users had

00:23:53,649 --> 00:23:58,779
this header turned on if five percent of

00:23:56,619 --> 00:24:01,029
his customers are telling him send me

00:23:58,779 --> 00:24:02,559
less stuff he can send them a lower

00:24:01,029 --> 00:24:05,559
quality version of all the images that

00:24:02,559 --> 00:24:09,009
he's got maybe one size smaller maybe

00:24:05,559 --> 00:24:10,600
even remove the videos so there's if you

00:24:09,009 --> 00:24:12,279
can look at that you can actually decide

00:24:10,600 --> 00:24:14,660
if you want to serve less content to

00:24:12,279 --> 00:24:18,660
your customers

00:24:14,660 --> 00:24:21,200
cloud nari will actually serve smaller

00:24:18,660 --> 00:24:24,150
versions so if I haven't set to auto

00:24:21,200 --> 00:24:25,770
quality right the structural similarity

00:24:24,150 --> 00:24:28,860
it'll actually serve a more compressed

00:24:25,770 --> 00:24:31,320
version saving 45 kilobytes making that

00:24:28,860 --> 00:24:32,580
image smaller so it automatically there

00:24:31,320 --> 00:24:34,200
are some services that just

00:24:32,580 --> 00:24:37,320
automatically say oh save data we're

00:24:34,200 --> 00:24:39,180
gonna serve less stuff and then the

00:24:37,320 --> 00:24:43,260
network info API we should look at the

00:24:39,180 --> 00:24:47,300
network info API it will give you the

00:24:43,260 --> 00:24:49,830
estimated downlink connection and so

00:24:47,300 --> 00:24:51,780
I've had the opportunity to travel all

00:24:49,830 --> 00:24:53,880
over Europe and I've stated some Airbnb

00:24:51,780 --> 00:24:57,300
s with really really really slow

00:24:53,880 --> 00:25:01,620
internet really slow internet I was in

00:24:57,300 --> 00:25:03,240
West Cork Ireland and it had Wi-Fi but

00:25:01,620 --> 00:25:08,309
it was connected to a 3G router that

00:25:03,240 --> 00:25:11,070
only had edge and so for the whole house

00:25:08,309 --> 00:25:12,929
at one o'clock in the morning when all

00:25:11,070 --> 00:25:16,260
the iPhones turned off in the whole

00:25:12,929 --> 00:25:18,390
neighborhood it got fast so when I need

00:25:16,260 --> 00:25:21,000
it I needed to do some work that week so

00:25:18,390 --> 00:25:22,830
I just worked from like 1:00 until 6:00

00:25:21,000 --> 00:25:25,200
and then slept all morning because I had

00:25:22,830 --> 00:25:26,550
fast in everyone but then everybody woke

00:25:25,200 --> 00:25:29,100
up at 6:00 and the internet went back

00:25:26,550 --> 00:25:32,700
down to like I had I have a screen shot

00:25:29,100 --> 00:25:37,679
of a 400 second ping to Google 400

00:25:32,700 --> 00:25:40,800
seconds yeah so anyway when I was there

00:25:37,679 --> 00:25:43,260
Facebook didn't show movies it didn't

00:25:40,800 --> 00:25:44,910
show gifts all of that stuff just

00:25:43,260 --> 00:25:46,620
disappeared and then when I went into

00:25:44,910 --> 00:25:49,260
town and I fired up Facebook I got

00:25:46,620 --> 00:25:50,970
images in movies and gifts Facebook's I

00:25:49,260 --> 00:25:52,679
was on a slow connection and served me

00:25:50,970 --> 00:25:54,690
different content based on the speed of

00:25:52,679 --> 00:25:57,240
my network so we can do the same with

00:25:54,690 --> 00:25:59,190
our webpages Twitter will do the same

00:25:57,240 --> 00:26:00,750
thing it just it does the gifts will

00:25:59,190 --> 00:26:03,720
have a play on it as opposed to

00:26:00,750 --> 00:26:06,510
automatically autoplay so in conclusion

00:26:03,720 --> 00:26:08,880
we can optimize our images for quality

00:26:06,510 --> 00:26:10,740
format sizing lazy loading we should

00:26:08,880 --> 00:26:11,760
turn our anime gets to movies and we

00:26:10,740 --> 00:26:14,220
should look at the headers that our

00:26:11,760 --> 00:26:17,850
customers have those are the tools I

00:26:14,220 --> 00:26:20,520
used webpagetest each the archive image

00:26:17,850 --> 00:26:22,730
magic structural similarity Lacey sizes

00:26:20,520 --> 00:26:26,429
responsive breakpoints and cloud Mary

00:26:22,730 --> 00:26:27,610
all really great tools a lot of them are

00:26:26,429 --> 00:26:29,470
open source cloud Neri

00:26:27,610 --> 00:26:31,390
is not open source but it has a really

00:26:29,470 --> 00:26:34,270
generous free tier so you can get away

00:26:31,390 --> 00:26:35,830
with a lot of stuff using it and in

00:26:34,270 --> 00:26:37,480
conclusion images can be beautiful and

00:26:35,830 --> 00:26:39,520
fast so with that thank you very much

00:26:37,480 --> 00:26:42,940
for listening I appreciate it

00:26:39,520 --> 00:26:42,940

YouTube URL: https://www.youtube.com/watch?v=1dcn-eUmdBg


