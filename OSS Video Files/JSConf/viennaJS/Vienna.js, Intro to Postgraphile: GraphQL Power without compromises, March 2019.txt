Title: Vienna.js, Intro to Postgraphile: GraphQL Power without compromises, March 2019
Publication date: 2019-03-29
Playlist: viennaJS
Description: 
	Talk By Julio Garcia:

This talk will present Postgraphile, a library written in TypeScript that automatically converts DB Schemas to at GraphQL backend running in Node. Just because most of the coding is in the database, it doesn't mean we have to abandon our beloved JavaScript. I will also show exaples of JavaScript being used within PostgreSQL.
Captions: 
	00:00:00,060 --> 00:00:07,099
so good evening ladies and gentlemen

00:00:03,740 --> 00:00:09,240
first a little disclaimer I'm not

00:00:07,099 --> 00:00:11,580
associated with post Crowe file at all

00:00:09,240 --> 00:00:15,630
it's just a library but we discover a

00:00:11,580 --> 00:00:20,520
couple of months ago and we find it very

00:00:15,630 --> 00:00:22,230
interesting when I mentioned that what

00:00:20,520 --> 00:00:23,850
was gonna go given this talk the guys

00:00:22,230 --> 00:00:26,160
from four or five was very friend

00:00:23,850 --> 00:00:27,960
friendly and they sent us a bunch of

00:00:26,160 --> 00:00:32,340
material there are some stickers and

00:00:27,960 --> 00:00:35,760
some sheets that so cheat sheets about

00:00:32,340 --> 00:00:38,120
gruff quail about this library so grab

00:00:35,760 --> 00:00:43,469
them they are actually very interesting

00:00:38,120 --> 00:00:47,809
so first of all who among you would

00:00:43,469 --> 00:00:47,809
rather write a squirrel than JavaScript

00:00:48,350 --> 00:00:59,149
really so many ok that does that's cool

00:00:57,719 --> 00:01:03,090
that's interesting

00:00:59,149 --> 00:01:07,500
the second question is that who among

00:01:03,090 --> 00:01:10,080
you who rather use the right tool for

00:01:07,500 --> 00:01:13,590
the job that the tool that you are

00:01:10,080 --> 00:01:18,240
actually comfortable with and this

00:01:13,590 --> 00:01:20,970
question is you can't need to think

00:01:18,240 --> 00:01:22,890
about it a little bit because what is

00:01:20,970 --> 00:01:24,420
the right tool and this is something

00:01:22,890 --> 00:01:25,710
that you're going to be asking yourself

00:01:24,420 --> 00:01:28,020
throughout your career

00:01:25,710 --> 00:01:29,880
it's a questions that at the beginning

00:01:28,020 --> 00:01:30,509
of each project and even through the

00:01:29,880 --> 00:01:34,140
project

00:01:30,509 --> 00:01:36,710
you're gonna keep asking and the only

00:01:34,140 --> 00:01:39,119
way to have a good answer about it is

00:01:36,710 --> 00:01:41,659
knowing which options you have and

00:01:39,119 --> 00:01:44,820
keeping up to date with those options

00:01:41,659 --> 00:01:47,280
now every once in a while throughout

00:01:44,820 --> 00:01:50,070
your career you're gonna come through

00:01:47,280 --> 00:01:52,229
through through a one option a tool a

00:01:50,070 --> 00:01:55,619
library maybe some programming language

00:01:52,229 --> 00:01:59,399
that is you know that's gonna change the

00:01:55,619 --> 00:02:03,630
way you work deeply and this talk is

00:01:59,399 --> 00:02:05,939
about one of those options so Who am I

00:02:03,630 --> 00:02:07,860
my name is Julio Garcia and chief

00:02:05,939 --> 00:02:11,910
Software Architect at innovation rocks

00:02:07,860 --> 00:02:13,710
what he said and I've been doing a

00:02:11,910 --> 00:02:16,260
software developed for ever

00:02:13,710 --> 00:02:18,750
long time this is a photograph of my

00:02:16,260 --> 00:02:28,440
first computer with whole four kilobytes

00:02:18,750 --> 00:02:30,300
of RAM mid 80s you do the math and I'm

00:02:28,440 --> 00:02:34,590
gonna be talking today about post graph

00:02:30,300 --> 00:02:38,430
I'll post profile is library written in

00:02:34,590 --> 00:02:44,160
typescript that allows you to develop in

00:02:38,430 --> 00:02:48,150
a database schema in Postgres it uses

00:02:44,160 --> 00:02:50,610
ref reflection to get the structure of

00:02:48,150 --> 00:02:53,220
your database schema and it's able to

00:02:50,610 --> 00:02:55,860
generate automatically a graph quayle

00:02:53,220 --> 00:03:03,000
database a group a graph called

00:02:55,860 --> 00:03:05,310
a back-end endpoint so a I guess in all

00:03:03,000 --> 00:03:08,390
of you have an idea about what graph

00:03:05,310 --> 00:03:13,560
coil is we don't need to get into that

00:03:08,390 --> 00:03:17,220
why is this important

00:03:13,560 --> 00:03:18,810
it has have for the last years or so I

00:03:17,220 --> 00:03:20,940
have a little bit the feeling that we

00:03:18,810 --> 00:03:24,320
have started taking our databases for

00:03:20,940 --> 00:03:27,600
granted starting with the NOAA squirrel

00:03:24,320 --> 00:03:31,890
movement and dabei and rely on

00:03:27,600 --> 00:03:34,020
even more with a RM systems and no SQL

00:03:31,890 --> 00:03:36,390
databases and even though there is a

00:03:34,020 --> 00:03:41,370
place for our aims and there's this

00:03:36,390 --> 00:03:44,700
place for a no SQL databases a for a lot

00:03:41,370 --> 00:03:46,080
of projects a traditional SQL database

00:03:44,700 --> 00:03:51,570
especially something like post

00:03:46,080 --> 00:03:56,400
phosphorous is is very powerful first of

00:03:51,570 --> 00:03:58,680
all something like a Bosphorus is a

00:03:56,400 --> 00:04:02,190
other incredible feats of engineering

00:03:58,680 --> 00:04:04,800
phosphorus is gonna be 22 years old this

00:04:02,190 --> 00:04:07,200
year they have been developing for more

00:04:04,800 --> 00:04:11,270
than 30 years and throughout the time

00:04:07,200 --> 00:04:11,270
they have been improving in constantly

00:04:11,450 --> 00:04:15,690
second point is that in a lot of

00:04:13,830 --> 00:04:18,480
occasions especially when you have

00:04:15,690 --> 00:04:20,070
complex complex data structures and

00:04:18,480 --> 00:04:22,320
relationships between those data

00:04:20,070 --> 00:04:24,720
structures are very complicated having

00:04:22,320 --> 00:04:27,389
the logic as close as possible to the

00:04:24,720 --> 00:04:29,639
data allows you to have some forms of

00:04:27,389 --> 00:04:33,210
the optimization that are really not

00:04:29,639 --> 00:04:36,419
possible with with our aims and at the

00:04:33,210 --> 00:04:39,930
end the data is the foundation of your

00:04:36,419 --> 00:04:42,389
data off of your application all most

00:04:39,930 --> 00:04:44,840
applications that's the basis on top of

00:04:42,389 --> 00:04:47,270
which everything is base built and

00:04:44,840 --> 00:04:49,500
foundations are important

00:04:47,270 --> 00:04:54,629
we shouldn't be you shouldn't take them

00:04:49,500 --> 00:04:57,270
for granted so that means that in a lot

00:04:54,629 --> 00:04:59,539
of occasions being close to the database

00:04:57,270 --> 00:05:02,159
and having the power of the database is

00:04:59,539 --> 00:05:04,740
actually the right tool for the job and

00:05:02,159 --> 00:05:08,069
that's what post profiles offers that

00:05:04,740 --> 00:05:11,849
you can generate very quickly very fast

00:05:08,069 --> 00:05:14,580
this graph well a back-end without

00:05:11,849 --> 00:05:17,159
losing any compromises were making any

00:05:14,580 --> 00:05:22,199
compromises regarding the power of your

00:05:17,159 --> 00:05:25,259
a Postgres database so how do you do

00:05:22,199 --> 00:05:27,659
this first you start defining schemas

00:05:25,259 --> 00:05:30,479
schemas in posters are some kind of name

00:05:27,659 --> 00:05:32,460
is something like namespaces this is the

00:05:30,479 --> 00:05:35,009
first architectural decisions that you

00:05:32,460 --> 00:05:36,930
want to make and it allows you to make

00:05:35,009 --> 00:05:37,860
decisions for example in terms of

00:05:36,930 --> 00:05:41,900
security

00:05:37,860 --> 00:05:45,509
one alternative what I'm doing here is a

00:05:41,900 --> 00:05:48,810
simple application is a forum for

00:05:45,509 --> 00:05:50,789
questions and answers and I'm dividing

00:05:48,810 --> 00:05:53,940
two schemas one is going to be public

00:05:50,789 --> 00:05:55,740
and one is going to be private which may

00:05:53,940 --> 00:05:57,539
come helpful if you're going to do like

00:05:55,740 --> 00:05:59,669
Facebook and store your passwords in

00:05:57,539 --> 00:06:02,759
plain text or things like that you put

00:05:59,669 --> 00:06:05,729
them in at least in private but I didn't

00:06:02,759 --> 00:06:08,339
never do that anyway so how does it work

00:06:05,729 --> 00:06:12,080
first you start the wait you create your

00:06:08,339 --> 00:06:14,900
tables like any others a sequel

00:06:12,080 --> 00:06:18,810
instructions how you create your tables

00:06:14,900 --> 00:06:23,069
then on the server you can instantiate

00:06:18,810 --> 00:06:25,740
post grow file as a as a middleware for

00:06:23,069 --> 00:06:27,930
an Express application you pass on

00:06:25,740 --> 00:06:29,279
configuration information there the

00:06:27,930 --> 00:06:32,099
database are you're going to be hooking

00:06:29,279 --> 00:06:34,770
up in this case I'm setting up that I

00:06:32,099 --> 00:06:37,229
want the post profile to watch my

00:06:34,770 --> 00:06:38,849
Postgres database so anytime I change

00:06:37,229 --> 00:06:42,679
the schema it will reckon

00:06:38,849 --> 00:06:47,249
and recreate the back and again and I

00:06:42,679 --> 00:06:49,469
set it up to my application and we're

00:06:47,249 --> 00:06:52,439
finished that's everything you need to

00:06:49,469 --> 00:06:56,479
do so this allows you really to make

00:06:52,439 --> 00:06:58,919
work very very very fast but of course

00:06:56,479 --> 00:07:02,389
you are not finished it wouldn't be very

00:06:58,919 --> 00:07:08,459
useful if you were unable to actually a

00:07:02,389 --> 00:07:13,080
customize that your graph well queries

00:07:08,459 --> 00:07:14,580
and also security so the first

00:07:13,080 --> 00:07:17,909
alternative that you have for

00:07:14,580 --> 00:07:20,639
customizing the graph well is using this

00:07:17,909 --> 00:07:23,519
something else called smart comments on

00:07:20,639 --> 00:07:24,779
top you can see that there are regular

00:07:23,519 --> 00:07:27,990
comments there's something that you can

00:07:24,779 --> 00:07:30,089
do in Postgres that allows you to keep

00:07:27,990 --> 00:07:31,949
the documentation where you go to the

00:07:30,089 --> 00:07:33,300
graphic well on the right-hand when you

00:07:31,949 --> 00:07:36,449
see the documentation of your graphic

00:07:33,300 --> 00:07:39,449
well this text is gonna you're gonna be

00:07:36,449 --> 00:07:42,749
able to see that but on the bottom you

00:07:39,449 --> 00:07:46,019
see some other a possibilities to

00:07:42,749 --> 00:07:50,809
customize for example in my table for

00:07:46,019 --> 00:07:54,360
developers I don't want to expose the XP

00:07:50,809 --> 00:07:58,740
for the for the developer or the created

00:07:54,360 --> 00:08:00,749
add a field on a for one day on the

00:07:58,740 --> 00:08:03,300
create or updates or on updates

00:08:00,749 --> 00:08:07,259
this shouldn't be available when I do my

00:08:03,300 --> 00:08:10,139
graphical notations another possibility

00:08:07,259 --> 00:08:13,829
that I have is that using functions

00:08:10,139 --> 00:08:17,729
within Postgres I can create computed

00:08:13,829 --> 00:08:20,999
columns for example in this case I want

00:08:17,729 --> 00:08:24,569
to have a full name field in my in my

00:08:20,999 --> 00:08:26,879
graphic well endpoint and in order to do

00:08:24,569 --> 00:08:28,709
this I just create a function with some

00:08:26,879 --> 00:08:31,860
certain certain parameters with some

00:08:28,709 --> 00:08:35,990
certain a following in certain

00:08:31,860 --> 00:08:38,810
conventions and I can get back my my

00:08:35,990 --> 00:08:42,469
my full name one thing that you need to

00:08:38,810 --> 00:08:44,870
note here is that I'm not using sequel

00:08:42,469 --> 00:08:47,899
to write this function and using

00:08:44,870 --> 00:08:49,670
javascript that's one of the nice things

00:08:47,899 --> 00:08:52,160
that you can do in Postgres is that you

00:08:49,670 --> 00:08:54,260
have the possibility to write your

00:08:52,160 --> 00:08:57,320
functions in at a bunch of different

00:08:54,260 --> 00:09:00,790
languages I once met a guy that was

00:08:57,320 --> 00:09:03,800
doing a data analysis in our within a

00:09:00,790 --> 00:09:07,339
Postgres so if that tickles your fancy

00:09:03,800 --> 00:09:12,200
that's something that you can do also in

00:09:07,339 --> 00:09:15,560
any case it is possible it is there and

00:09:12,200 --> 00:09:17,720
in some situations it's gonna we there

00:09:15,560 --> 00:09:22,060
were more familiar maybe with JavaScript

00:09:17,720 --> 00:09:27,050
is going to help you develop some logic

00:09:22,060 --> 00:09:29,540
now security II one of the things that

00:09:27,050 --> 00:09:31,670
you have to think about of for

00:09:29,540 --> 00:09:33,920
implementing security is that we're

00:09:31,670 --> 00:09:37,310
going to be using the security system

00:09:33,920 --> 00:09:40,850
from post-crisis itself to secure your

00:09:37,310 --> 00:09:43,279
back-end that may sound like crazy talk

00:09:40,850 --> 00:09:45,649
but it's actually it actually works this

00:09:43,279 --> 00:09:48,589
actually the guys from Postgres

00:09:45,649 --> 00:09:50,660
themselves they have been spending a lot

00:09:48,589 --> 00:09:52,790
of time and a lot of effort I just

00:09:50,660 --> 00:09:56,420
mentioned before 30 years making this

00:09:52,790 --> 00:10:00,920
thing secure so it's possible to create

00:09:56,420 --> 00:10:03,709
a very good and very granular security

00:10:00,920 --> 00:10:06,020
system another advantage that you have

00:10:03,709 --> 00:10:10,010
is that the closer that you have your

00:10:06,020 --> 00:10:12,980
security to the data the less surface

00:10:10,010 --> 00:10:16,640
for attacks that you are opening some

00:10:12,980 --> 00:10:19,520
way possible hackers so in order to do

00:10:16,640 --> 00:10:23,209
the security for a post profile system

00:10:19,520 --> 00:10:25,220
first you go unlock everything up for

00:10:23,209 --> 00:10:29,050
example my functions I don't want to

00:10:25,220 --> 00:10:32,149
make my functions available for public

00:10:29,050 --> 00:10:33,740
second you define your roles the roles

00:10:32,149 --> 00:10:34,820
are there are gonna be a specific for

00:10:33,740 --> 00:10:37,310
your applications

00:10:34,820 --> 00:10:39,110
these are roles within the database and

00:10:37,310 --> 00:10:40,790
should correspond to the roles of the

00:10:39,110 --> 00:10:43,399
types of users that you're gonna have

00:10:40,790 --> 00:10:45,980
the first one is the role that post

00:10:43,399 --> 00:10:47,829
graph I'll itself the library is going

00:10:45,980 --> 00:10:49,580
to use to connect to the database and

00:10:47,829 --> 00:10:52,220
then I have

00:10:49,580 --> 00:10:54,230
two roles here define one for anonymous

00:10:52,220 --> 00:10:56,410
for someone that is not registered and

00:10:54,230 --> 00:11:02,750
one for our developers that have already

00:10:56,410 --> 00:11:07,970
registered the next thing is that you go

00:11:02,750 --> 00:11:10,040
and you run a permissions first to the

00:11:07,970 --> 00:11:11,959
schema and you can see here are not

00:11:10,040 --> 00:11:15,320
given permissions to any of these

00:11:11,959 --> 00:11:16,310
systems to the to the private schema

00:11:15,320 --> 00:11:19,250
that we mentioned before

00:11:16,310 --> 00:11:22,279
and then depending on what you want to

00:11:19,250 --> 00:11:25,279
do you give the permissions to different

00:11:22,279 --> 00:11:28,339
to different roles for examples in the

00:11:25,279 --> 00:11:31,519
case of the questions I want everybody

00:11:28,339 --> 00:11:35,209
should be able to view the question

00:11:31,519 --> 00:11:37,250
stable but insert update and delete only

00:11:35,209 --> 00:11:44,180
has to be someone with the role of a

00:11:37,250 --> 00:11:47,630
developer the next step is I am created

00:11:44,180 --> 00:11:49,850
on this private schema a table to store

00:11:47,630 --> 00:11:51,769
my developer account with the fields

00:11:49,850 --> 00:11:54,440
that I don't want to risk making public

00:11:51,769 --> 00:11:57,610
in this case pelipper ID the email and

00:11:54,440 --> 00:12:01,279
the password hash something that you can

00:11:57,610 --> 00:12:05,180
check here also is that it is possible

00:12:01,279 --> 00:12:10,010
to add some input validation directly on

00:12:05,180 --> 00:12:13,610
the database itself the next step is

00:12:10,010 --> 00:12:15,980
that once you have defined this the wait

00:12:13,610 --> 00:12:18,130
post profiles you have different

00:12:15,980 --> 00:12:20,709
alternatives to handle the

00:12:18,130 --> 00:12:22,730
authentication but one of the

00:12:20,709 --> 00:12:24,950
alternatives the one that comes out of

00:12:22,730 --> 00:12:28,459
the box within post grow files is using

00:12:24,950 --> 00:12:31,820
JSON web tokens the way that you create

00:12:28,459 --> 00:12:36,410
JSON web tokens is that first you define

00:12:31,820 --> 00:12:37,910
within a Postgres a type that is gonna

00:12:36,410 --> 00:12:41,149
have all the fields that you're gonna

00:12:37,910 --> 00:12:44,180
have in your way JSON web tokens in this

00:12:41,149 --> 00:12:46,760
case I have the role that I want the

00:12:44,180 --> 00:12:49,610
user to have I have the idea of the

00:12:46,760 --> 00:12:52,370
developer and a standard field that is

00:12:49,610 --> 00:12:56,240
the expiration date of the of the token

00:12:52,370 --> 00:12:58,880
a I don't know if you guys have

00:12:56,240 --> 00:13:00,830
experience with with JSON web tokens at

00:12:58,880 --> 00:13:02,660
the end I gonna give some

00:13:00,830 --> 00:13:08,649
resources where you can learn more about

00:13:02,660 --> 00:13:11,870
them and this is the function for

00:13:08,649 --> 00:13:14,149
authenticated user in this fog in this

00:13:11,870 --> 00:13:18,170
function when I'm guess and doing is it

00:13:14,149 --> 00:13:20,420
you get the email and the password that

00:13:18,170 --> 00:13:23,990
the user trying to authenticate sends

00:13:20,420 --> 00:13:27,170
you you get from the developer account

00:13:23,990 --> 00:13:31,250
all that they wrote that corresponds to

00:13:27,170 --> 00:13:33,410
the to that email you verified that the

00:13:31,250 --> 00:13:35,720
password hash corresponds to the

00:13:33,410 --> 00:13:39,079
password harder a store and if that's

00:13:35,720 --> 00:13:41,600
the case then you create here the

00:13:39,079 --> 00:13:45,290
content of your Jason Wentworth token

00:13:41,600 --> 00:13:49,339
given the role that you're using that is

00:13:45,290 --> 00:13:52,820
the developer the developer ID and I'm

00:13:49,339 --> 00:13:56,000
creating on the fly day the expiration

00:13:52,820 --> 00:14:00,579
the the expiration

00:13:56,000 --> 00:14:11,899
field and returning as Jeff as a as a

00:14:00,579 --> 00:14:15,680
JSON web token so the next been doing

00:14:11,899 --> 00:14:18,529
that we can guarantee that at this point

00:14:15,680 --> 00:14:23,329
that only developers can answer and I

00:14:18,529 --> 00:14:24,920
can ask questions and update their own

00:14:23,329 --> 00:14:27,079
questions but you don't want the

00:14:24,920 --> 00:14:30,560
developer to maybe update a question for

00:14:27,079 --> 00:14:33,649
someone else so in order to solve this

00:14:30,560 --> 00:14:37,510
problem you use something that is called

00:14:33,649 --> 00:14:40,130
a row level security it's a feature of

00:14:37,510 --> 00:14:45,500
Postgres starting on version nine points

00:14:40,130 --> 00:14:48,500
in 9.6 9.6 and it allows you to have

00:14:45,500 --> 00:14:52,520
very granular on a row level security

00:14:48,500 --> 00:14:55,940
for your different processes for example

00:14:52,520 --> 00:14:58,430
in this case for the table of question

00:14:55,940 --> 00:15:00,320
I'm letting everybody has to be able to

00:14:58,430 --> 00:15:03,589
select because everybody can read the

00:15:00,320 --> 00:15:06,649
questions but if I want to insert a

00:15:03,589 --> 00:15:09,709
question I'm gonna verify that there

00:15:06,649 --> 00:15:12,170
that the author ID that is the field

00:15:09,709 --> 00:15:14,240
that I have on the question corresponds

00:15:12,170 --> 00:15:16,820
to the

00:15:14,240 --> 00:15:19,970
to the developer ID that I'm storing my

00:15:16,820 --> 00:15:22,670
JSON adjacent worth talking the weather

00:15:19,970 --> 00:15:27,110
is working is that post profile in the

00:15:22,670 --> 00:15:30,110
background once you when you once you

00:15:27,110 --> 00:15:34,520
log in and you are sending with the

00:15:30,110 --> 00:15:37,700
request the the JSON web token it

00:15:34,520 --> 00:15:41,360
inserts this the fields of this Jason

00:15:37,700 --> 00:15:43,790
when token inside this session of the of

00:15:41,360 --> 00:15:46,160
the database and you have you can access

00:15:43,790 --> 00:15:48,920
these settings with this calling the

00:15:46,160 --> 00:15:52,820
current settings and use them to verify

00:15:48,920 --> 00:15:58,520
the security and the claims that the

00:15:52,820 --> 00:16:00,950
user is making so once don't that you

00:15:58,520 --> 00:16:04,279
need to set a couple of settings on the

00:16:00,950 --> 00:16:07,370
on on the side of the node.js I'm Adam

00:16:04,279 --> 00:16:09,550
here what's the default role that the

00:16:07,370 --> 00:16:13,190
user is gonna have in this case the the

00:16:09,550 --> 00:16:15,170
anonymous and getting the secret the

00:16:13,190 --> 00:16:18,620
secret is the what is going to be used

00:16:15,170 --> 00:16:21,790
to sign the JSON web talking and also

00:16:18,620 --> 00:16:25,760
given the type that is used within a

00:16:21,790 --> 00:16:30,470
Postgres to define the fields of the

00:16:25,760 --> 00:16:35,270
JSON web token and we're finished this

00:16:30,470 --> 00:16:39,910
way you have a secure a graphic wealth

00:16:35,270 --> 00:16:43,240
back end with a login a notification

00:16:39,910 --> 00:16:46,100
this is an example of the of the

00:16:43,240 --> 00:16:48,470
authenticate mutation given the email

00:16:46,100 --> 00:16:53,450
the password and I'm getting as a result

00:16:48,470 --> 00:16:56,959
a the JSON web token I've added extra

00:16:53,450 --> 00:17:00,020
the user ID the developer ID just as

00:16:56,959 --> 00:17:05,959
convenience even though it's and cold

00:17:00,020 --> 00:17:08,120
and windy JSON web token itself so you

00:17:05,959 --> 00:17:10,130
still have there are still other options

00:17:08,120 --> 00:17:13,939
that you can have if you need to

00:17:10,130 --> 00:17:17,030
customize the your by your back-end

00:17:13,939 --> 00:17:19,400
further for example one thing that is

00:17:17,030 --> 00:17:22,669
very useful with in Postgres is that you

00:17:19,400 --> 00:17:25,910
also have triggers similar to the ones

00:17:22,669 --> 00:17:28,130
that we saw from firebase in this case I

00:17:25,910 --> 00:17:31,580
want to as I mention before

00:17:28,130 --> 00:17:34,340
the XP of the of the user shouldn't be

00:17:31,580 --> 00:17:37,430
modified directly but as a reaction of

00:17:34,340 --> 00:17:39,650
what he's doing for example I wanted it

00:17:37,430 --> 00:17:42,200
to react whenever he they answer the

00:17:39,650 --> 00:17:44,660
question these experiments to increase

00:17:42,200 --> 00:17:47,540
but it's not a linear increase it has to

00:17:44,660 --> 00:17:52,160
follows a certain function so again I'm

00:17:47,540 --> 00:17:53,960
going back to to using the P L v8 which

00:17:52,160 --> 00:17:59,480
is the JavaScript engine that runs

00:17:53,960 --> 00:18:01,910
within within a Postgres and and and

00:17:59,480 --> 00:18:04,030
creating this function and below I

00:18:01,910 --> 00:18:06,650
defined the trigger and the trigger

00:18:04,030 --> 00:18:11,420
where I see what is saying here is that

00:18:06,650 --> 00:18:15,080
before H insert on the table answer I'm

00:18:11,420 --> 00:18:18,650
gonna execute this procedure and that

00:18:15,080 --> 00:18:21,170
way you can have a very clear separation

00:18:18,650 --> 00:18:23,930
of concerns for example you could define

00:18:21,170 --> 00:18:27,620
a function that modifies and updated add

00:18:23,930 --> 00:18:29,780
a field on the tables that is separated

00:18:27,620 --> 00:18:32,720
that is oscillated to the rest of to the

00:18:29,780 --> 00:18:34,790
rest of the process and it is handled on

00:18:32,720 --> 00:18:38,800
on each on so these triggers are

00:18:34,790 --> 00:18:42,590
actually a very powerful feature and if

00:18:38,800 --> 00:18:44,990
anything everything else fails you still

00:18:42,590 --> 00:18:49,000
have the possibility to create your own

00:18:44,990 --> 00:18:53,060
plugins post grow files is built

00:18:49,000 --> 00:18:55,010
completely using plugins and if you want

00:18:53,060 --> 00:18:57,260
you go in and you could create new

00:18:55,010 --> 00:18:58,910
plugins or you can replace plugins or

00:18:57,260 --> 00:19:02,150
you can replace all the plugins that are

00:18:58,910 --> 00:19:07,120
within this graphic engine here is an

00:19:02,150 --> 00:19:11,570
example of a very useful service plugin

00:19:07,120 --> 00:19:14,260
everything is just you send the you get

00:19:11,570 --> 00:19:17,720
an input use if I'm the finally here the

00:19:14,260 --> 00:19:21,260
my types from from the graphic well and

00:19:17,720 --> 00:19:25,670
I created my creating my resolver so

00:19:21,260 --> 00:19:28,910
this way you can work very fast you saw

00:19:25,670 --> 00:19:32,180
this in a matter of hours you can create

00:19:28,910 --> 00:19:35,680
a full graphic oil back-end and you are

00:19:32,180 --> 00:19:38,810
not losing any flexibility or any power

00:19:35,680 --> 00:19:41,480
regarding how to if you need some

00:19:38,810 --> 00:19:43,040
customization and for me

00:19:41,480 --> 00:19:46,309
something that furrows within the

00:19:43,040 --> 00:19:48,500
company that was always very important

00:19:46,309 --> 00:19:50,450
something we have been delaying a little

00:19:48,500 --> 00:19:54,559
bit to gone into the graph the whole

00:19:50,450 --> 00:19:56,750
graph well options was that I we were

00:19:54,559 --> 00:20:00,799
really looking for is a solution that

00:19:56,750 --> 00:20:04,370
allows to work with the database that we

00:20:00,799 --> 00:20:09,830
all look very much without losing any of

00:20:04,370 --> 00:20:12,080
the power so this is how they the graph

00:20:09,830 --> 00:20:14,570
called input looks is just set in a

00:20:12,080 --> 00:20:19,370
query with the with circles with the

00:20:14,570 --> 00:20:22,450
name and I get I get the data back this

00:20:19,370 --> 00:20:24,470
is some a list of some resources the

00:20:22,450 --> 00:20:26,390
documentation from post profile is

00:20:24,470 --> 00:20:29,059
actually very good this presentation is

00:20:26,390 --> 00:20:32,030
inspired greatly of one of the examples

00:20:29,059 --> 00:20:34,970
that they have inside and here are a

00:20:32,030 --> 00:20:37,040
couple of resources regarding the JSON

00:20:34,970 --> 00:20:40,910
web tokens it's an important topic

00:20:37,040 --> 00:20:45,679
something that you can i think is really

00:20:40,910 --> 00:20:49,820
very useful and also some information

00:20:45,679 --> 00:20:53,390
about the running PLD 8 i mean to be

00:20:49,820 --> 00:20:55,340
honest most of the time and use and

00:20:53,390 --> 00:20:58,460
using the regular language within within

00:20:55,340 --> 00:21:02,809
Postgres but on some occasion as i said

00:20:58,460 --> 00:21:06,080
and also because i can i can a it's nice

00:21:02,809 --> 00:21:10,870
to have be able to run a java script in

00:21:06,080 --> 00:21:13,940
there so thank you very much

00:21:10,870 --> 00:21:13,940

YouTube URL: https://www.youtube.com/watch?v=lMLz6m7WdcY


