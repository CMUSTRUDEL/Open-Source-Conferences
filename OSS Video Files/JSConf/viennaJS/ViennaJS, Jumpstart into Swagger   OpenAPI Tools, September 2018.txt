Title: ViennaJS, Jumpstart into Swagger   OpenAPI Tools, September 2018
Publication date: 2018-10-04
Playlist: viennaJS
Description: 
	Talk By Rainer Hahnekamp:

Design is the foundation of your API development. Swagger makes API design easy and Rainer will show you how he uses Swagger in his daily life.
Captions: 
	00:00:00,030 --> 00:00:05,430
so hello my name is Sarah and Ahana camp

00:00:02,460 --> 00:00:08,010
I am a software engineer and I want to

00:00:05,430 --> 00:00:11,670
give you a jumpstart into swagger or the

00:00:08,010 --> 00:00:14,610
open API tools so the plan for the next

00:00:11,670 --> 00:00:18,150
20 minutes is that I start with a

00:00:14,610 --> 00:00:20,160
theoretical part so I will explain what

00:00:18,150 --> 00:00:24,269
swagger is all about why you should use

00:00:20,160 --> 00:00:27,539
it and after that we will create a small

00:00:24,269 --> 00:00:29,310
web application called city info that

00:00:27,539 --> 00:00:32,759
will have a back-end where we will use

00:00:29,310 --> 00:00:35,610
Express and we will also create a small

00:00:32,759 --> 00:00:38,219
client in know chess and for both

00:00:35,610 --> 00:00:45,539
components we will try to apply the

00:00:38,219 --> 00:00:48,420
swagger tools okay so as everybody

00:00:45,539 --> 00:00:52,649
should know these days modern web

00:00:48,420 --> 00:00:55,860
applications provide web services or web

00:00:52,649 --> 00:00:59,780
services and you usually can access

00:00:55,860 --> 00:01:02,910
these web services wire a certain URL

00:00:59,780 --> 00:01:05,700
you have respond a request type that

00:01:02,910 --> 00:01:07,890
this web service expects and you have a

00:01:05,700 --> 00:01:09,990
response type that the web service

00:01:07,890 --> 00:01:15,180
returns so in our case it would be the

00:01:09,990 --> 00:01:17,490
URL cities that where the request is the

00:01:15,180 --> 00:01:20,280
name of a city along the population and

00:01:17,490 --> 00:01:24,390
then the sides and it returns a list of

00:01:20,280 --> 00:01:28,439
the existing cities now the problem is

00:01:24,390 --> 00:01:32,820
that if we implement this web service on

00:01:28,439 --> 00:01:34,259
the end on the server side then we have

00:01:32,820 --> 00:01:36,990
to create a client so that we can

00:01:34,259 --> 00:01:39,540
connect to it and the problem is that

00:01:36,990 --> 00:01:41,610
this is somehow some kind of duplicated

00:01:39,540 --> 00:01:44,790
code because we already have the

00:01:41,610 --> 00:01:46,710
information how the web service exists

00:01:44,790 --> 00:01:49,590
in the form of URL request and response

00:01:46,710 --> 00:01:53,430
type written in the backend but we have

00:01:49,590 --> 00:01:57,780
to rewrite it in the client and this is

00:01:53,430 --> 00:02:00,210
also a very boring work and if our

00:01:57,780 --> 00:02:02,909
application works very good is

00:02:00,210 --> 00:02:05,219
successfully then we extend it and we

00:02:02,909 --> 00:02:08,190
also have to maintain it so the problem

00:02:05,219 --> 00:02:10,319
is then again if we make some change on

00:02:08,190 --> 00:02:10,970
the server side in this case we have

00:02:10,319 --> 00:02:15,200
changed

00:02:10,970 --> 00:02:17,210
URL from cities to city and we forget to

00:02:15,200 --> 00:02:20,270
synchronize this change in our client

00:02:17,210 --> 00:02:22,670
then we have a problem the same is not

00:02:20,270 --> 00:02:27,140
just true for the URL it can also happen

00:02:22,670 --> 00:02:29,270
that we just change a property in the

00:02:27,140 --> 00:02:32,720
request or in the response and then

00:02:29,270 --> 00:02:37,330
again if we do not make the update in

00:02:32,720 --> 00:02:41,840
our client then we have again a problem

00:02:37,330 --> 00:02:43,730
if you have a if your web application is

00:02:41,840 --> 00:02:47,000
based on micro services then you have

00:02:43,730 --> 00:02:49,970
multiple problems and it does of course

00:02:47,000 --> 00:02:55,160
get worse if you are using multiple

00:02:49,970 --> 00:03:00,290
technologies so swagger is tries now to

00:02:55,160 --> 00:03:02,180
solve this problem and if I have to if I

00:03:00,290 --> 00:03:05,750
would have to define swagger then I

00:03:02,180 --> 00:03:08,959
would say it is a solution for creating

00:03:05,750 --> 00:03:12,560
but also maintaining and documenting web

00:03:08,959 --> 00:03:16,400
api's and the main target is of course

00:03:12,560 --> 00:03:19,370
to get rid of the code duplication in

00:03:16,400 --> 00:03:22,220
the client we also don't want to do all

00:03:19,370 --> 00:03:24,260
these synchronization work each time we

00:03:22,220 --> 00:03:25,580
change something and of course we do not

00:03:24,260 --> 00:03:30,970
want the PAC's

00:03:25,580 --> 00:03:30,970
that can result from these works

00:03:31,450 --> 00:03:38,690
so what swagger or how can this be done

00:03:34,989 --> 00:03:42,799
in its core swagger is just a

00:03:38,690 --> 00:03:45,440
specification and you might see the term

00:03:42,799 --> 00:03:48,080
swagger and open API and there's a

00:03:45,440 --> 00:03:50,170
reason for that because swagger is just

00:03:48,080 --> 00:03:52,310
a brand name from a company that

00:03:50,170 --> 00:03:55,700
introduced this is a product called

00:03:52,310 --> 00:03:58,790
smart yep and they decided that they

00:03:55,700 --> 00:04:01,700
want to open up the product so that also

00:03:58,790 --> 00:04:03,860
other companies can join it and they

00:04:01,700 --> 00:04:07,480
said ok we create this open API

00:04:03,860 --> 00:04:11,150
initiative which is actually swagger and

00:04:07,480 --> 00:04:14,410
so the saying is until they have so

00:04:11,150 --> 00:04:18,019
before they created the open API

00:04:14,410 --> 00:04:21,020
initiative the standard was called

00:04:18,019 --> 00:04:25,259
swagger and now with the open API

00:04:21,020 --> 00:04:27,300
initiative it is called just a open API

00:04:25,259 --> 00:04:30,780
the specification can be written in JSON

00:04:27,300 --> 00:04:33,030
or llamÃ³ as we will see later and the

00:04:30,780 --> 00:04:36,979
interesting part are now the tools or

00:04:33,030 --> 00:04:39,990
the ecosystem around this specification

00:04:36,979 --> 00:04:43,919
we have an editor not surprisingly that

00:04:39,990 --> 00:04:46,440
can help us we also have a tool that can

00:04:43,919 --> 00:04:50,750
generate us the documentation out of our

00:04:46,440 --> 00:04:54,570
specification so if you are used to use

00:04:50,750 --> 00:04:56,789
post postman the application or you

00:04:54,570 --> 00:04:58,949
write your own curl scripts to access

00:04:56,789 --> 00:05:00,630
your web services then this is something

00:04:58,949 --> 00:05:02,490
where swagga can already help you

00:05:00,630 --> 00:05:06,000
because it can generate this

00:05:02,490 --> 00:05:09,630
automatically and then we have the tools

00:05:06,000 --> 00:05:12,660
and the tools themselves can again be

00:05:09,630 --> 00:05:15,180
divided into two groups and the first

00:05:12,660 --> 00:05:19,320
group is called the API first or the

00:05:15,180 --> 00:05:22,440
first approach and in this approach

00:05:19,320 --> 00:05:24,750
you don't write any code yet but you

00:05:22,440 --> 00:05:28,830
start with writing a specification first

00:05:24,750 --> 00:05:31,440
and then there are some tools or code

00:05:28,830 --> 00:05:34,740
generators that can generate your client

00:05:31,440 --> 00:05:36,810
code to use this Web API so in this case

00:05:34,740 --> 00:05:39,419
in or in the JavaScript space there are

00:05:36,810 --> 00:05:41,909
code generators for no chess but also

00:05:39,419 --> 00:05:45,270
for angular and in no chess you would

00:05:41,909 --> 00:05:48,320
get npm module and in angular you would

00:05:45,270 --> 00:05:51,570
get an angular module and there are also

00:05:48,320 --> 00:05:54,900
code generators for service stops so

00:05:51,570 --> 00:05:57,780
where you can actually get some code

00:05:54,900 --> 00:05:59,330
that you can use in your back-end or in

00:05:57,780 --> 00:06:03,330
your server

00:05:59,330 --> 00:06:07,260
unfortunately for no chess this does not

00:06:03,330 --> 00:06:09,720
work so good but if you are using for

00:06:07,260 --> 00:06:12,419
example spring on the back end then I

00:06:09,720 --> 00:06:17,130
can really recommend it because that

00:06:12,419 --> 00:06:18,690
echo generators works very good the

00:06:17,130 --> 00:06:20,520
other approach is the code first

00:06:18,690 --> 00:06:23,400
approach so this is something where we

00:06:20,520 --> 00:06:26,690
already have our application and we want

00:06:23,400 --> 00:06:29,430
to integrate swagger afterwards and

00:06:26,690 --> 00:06:32,610
again there are several tools for

00:06:29,430 --> 00:06:34,650
different frameworks and the main point

00:06:32,610 --> 00:06:37,949
here is that these tools

00:06:34,650 --> 00:06:39,660
try to analyze your back-end so for

00:06:37,949 --> 00:06:41,610
example they go through your controllers

00:06:39,660 --> 00:06:44,070
they check what requests and what

00:06:41,610 --> 00:06:47,220
response types that you have there and

00:06:44,070 --> 00:06:49,620
they can generate the specification on

00:06:47,220 --> 00:06:51,780
the fly and then you can use the

00:06:49,620 --> 00:06:56,870
specification to create for example an

00:06:51,780 --> 00:07:00,540
angular client this is a common use case

00:06:56,870 --> 00:07:04,380
good this was it for the theoretical

00:07:00,540 --> 00:07:07,110
part we will now create this city info

00:07:04,380 --> 00:07:10,590
application so we will create a back-end

00:07:07,110 --> 00:07:12,930
that contains three web services list

00:07:10,590 --> 00:07:15,300
cities then we want something where we

00:07:12,930 --> 00:07:18,449
can add a city and also very kentley the

00:07:15,300 --> 00:07:21,750
city we want a documentation from our

00:07:18,449 --> 00:07:29,430
web service and then we also create a no

00:07:21,750 --> 00:07:33,180
chase client to access it good for no

00:07:29,430 --> 00:07:35,850
js' there exists a module called swagger

00:07:33,180 --> 00:07:38,729
this is not a coke generator but it is a

00:07:35,850 --> 00:07:41,849
helpful utility that tries to support us

00:07:38,729 --> 00:07:45,360
when we work with express in various

00:07:41,849 --> 00:07:48,240
ways and I have already installed it and

00:07:45,360 --> 00:07:50,520
the fourth the first thing that I can do

00:07:48,240 --> 00:07:53,810
is that I can create an project with it

00:07:50,520 --> 00:08:00,150
so I can say swagger this is the command

00:07:53,810 --> 00:08:01,950
project create server then it asks me

00:08:00,150 --> 00:08:05,280
what framework I want to use I say

00:08:01,950 --> 00:08:10,590
Express and then it generates some

00:08:05,280 --> 00:08:13,610
boilerplate Express application takes a

00:08:10,590 --> 00:08:17,729
while and as you can see here I have the

00:08:13,610 --> 00:08:20,550
directory server and inside of this

00:08:17,729 --> 00:08:24,180
server there is this app is that does

00:08:20,550 --> 00:08:26,460
not do very much it just is this swagger

00:08:24,180 --> 00:08:29,599
middleware and starts and Express

00:08:26,460 --> 00:08:32,099
instance looking at the dependencies

00:08:29,599 --> 00:08:36,390
there's also not that much just two

00:08:32,099 --> 00:08:39,300
dependencies and that's it and what I

00:08:36,390 --> 00:08:44,140
can do now is that I can start the

00:08:39,300 --> 00:08:47,560
swagger editor right out of this Express

00:08:44,140 --> 00:08:53,590
instance so I have to say swagger

00:08:47,560 --> 00:08:56,350
project edit server and this opens a

00:08:53,590 --> 00:09:00,210
browser window with already some

00:08:56,350 --> 00:09:00,210
predefined code I'm just removing this

00:09:00,300 --> 00:09:05,680
so this is not a spec of specification

00:09:03,250 --> 00:09:09,790
on the left side on the right side from

00:09:05,680 --> 00:09:11,830
your side and yeah so you just see here

00:09:09,790 --> 00:09:15,970
the version you have to give an info the

00:09:11,830 --> 00:09:18,490
title or I can say a city info and the

00:09:15,970 --> 00:09:20,290
host and what I am going to do now is

00:09:18,490 --> 00:09:23,620
that I create a web service or that I

00:09:20,290 --> 00:09:30,850
specify a web service that returns me a

00:09:23,620 --> 00:09:33,760
list of the cities so goes like this we

00:09:30,850 --> 00:09:37,090
have here this path property we have to

00:09:33,760 --> 00:09:41,470
set the URL in this case it is cities we

00:09:37,090 --> 00:09:51,910
will talk about this one later bigger

00:09:41,470 --> 00:09:54,130
here better I have to define the HTTP

00:09:51,910 --> 00:09:56,440
method in this case it is kept I have to

00:09:54,130 --> 00:09:59,320
define an operation ID which must be

00:09:56,440 --> 00:10:02,350
unique and then I have to define what we

00:09:59,320 --> 00:10:04,570
are actually returning and as you can

00:10:02,350 --> 00:10:07,810
see here I am referencing to a response

00:10:04,570 --> 00:10:09,970
that I also have to define so this is

00:10:07,810 --> 00:10:12,040
just the definition for the response

00:10:09,970 --> 00:10:16,150
called cities where we say again it is

00:10:12,040 --> 00:10:20,500
just an array again of type city so I

00:10:16,150 --> 00:10:22,900
have to find the type city which looks

00:10:20,500 --> 00:10:24,850
like this and city is defined that it

00:10:22,900 --> 00:10:28,060
has the properties name we have a

00:10:24,850 --> 00:10:31,120
population we have the size I also have

00:10:28,060 --> 00:10:32,950
to set the data type and what I'm also

00:10:31,120 --> 00:10:35,710
saying here is that these three

00:10:32,950 --> 00:10:38,230
properties are required and you can

00:10:35,710 --> 00:10:40,300
already see on the other side this is

00:10:38,230 --> 00:10:42,550
the so-called documentation the online

00:10:40,300 --> 00:10:45,460
documentation that was generated on the

00:10:42,550 --> 00:10:48,610
fly I can see here the path that I have

00:10:45,460 --> 00:10:52,930
defined I can see the HTTP method and I

00:10:48,610 --> 00:10:55,690
also can see what it will return and the

00:10:52,930 --> 00:10:57,220
cool thing is that I can from this page

00:10:55,690 --> 00:10:59,110
I can already access

00:10:57,220 --> 00:11:00,220
my rep service there is this button try

00:10:59,110 --> 00:11:04,199
this operation

00:11:00,220 --> 00:11:07,870
and if I click on it it tells me what

00:11:04,199 --> 00:11:10,470
request it will do and at the bottom I

00:11:07,870 --> 00:11:12,879
have again here this button send request

00:11:10,470 --> 00:11:15,189
if I click on it it will not work

00:11:12,879 --> 00:11:16,720
because I haven't yet started the server

00:11:15,189 --> 00:11:25,480
and I also don't have the implementation

00:11:16,720 --> 00:11:28,870
yet I'm just starting the server so the

00:11:25,480 --> 00:11:36,910
command is swagger project start server

00:11:28,870 --> 00:11:39,459
and now there is a small or helpful

00:11:36,910 --> 00:11:42,040
utility because I don't need to define

00:11:39,459 --> 00:11:44,170
the routing in my Express instance and

00:11:42,040 --> 00:11:46,480
this is where this this property here

00:11:44,170 --> 00:11:49,360
comes into play because here I can

00:11:46,480 --> 00:11:53,470
define the name of the JavaScript file

00:11:49,360 --> 00:11:55,870
where this response request will

00:11:53,470 --> 00:11:58,449
breweries will be responded and the

00:11:55,870 --> 00:12:01,839
operation ID is the function that will

00:11:58,449 --> 00:12:04,329
be called which means I require a city

00:12:01,839 --> 00:12:09,069
info JavaScript file with a function

00:12:04,329 --> 00:12:12,490
list cities switching over there is this

00:12:09,069 --> 00:12:21,339
directory API controllers and I create

00:12:12,490 --> 00:12:23,470
now this city info j/s file so I am

00:12:21,339 --> 00:12:26,290
defining here my data it's just an array

00:12:23,470 --> 00:12:29,199
that contains Graz and Venus example

00:12:26,290 --> 00:12:31,870
cities and then I define this list

00:12:29,199 --> 00:12:34,870
cities function that just returns this

00:12:31,870 --> 00:12:38,939
array and Jason I he'll I also have to

00:12:34,870 --> 00:12:38,939
export this function of course

00:12:40,550 --> 00:12:43,690
[Music]

00:12:50,700 --> 00:12:56,890
if I now say against and request then it

00:12:54,640 --> 00:13:01,570
tells me there is a success and I can

00:12:56,890 --> 00:13:04,150
already hear see the response and in the

00:13:01,570 --> 00:13:07,360
same manner I will now create the ad

00:13:04,150 --> 00:13:14,590
City web service and also that delete

00:13:07,360 --> 00:13:16,870
City service so again in this case is

00:13:14,590 --> 00:13:19,330
this the ad city I have to say that so

00:13:16,870 --> 00:13:22,620
the URL will still be cities but this

00:13:19,330 --> 00:13:25,270
time I say the HTTP method is post and

00:13:22,620 --> 00:13:27,460
since I am also getting some input I

00:13:25,270 --> 00:13:31,000
have to define here the parameters and

00:13:27,460 --> 00:13:35,440
what I'm saying here that the parameter

00:13:31,000 --> 00:13:38,170
the input becomes with the HTTP body we

00:13:35,440 --> 00:13:40,780
call it name and the data structure will

00:13:38,170 --> 00:13:44,080
be again the city structure that I have

00:13:40,780 --> 00:13:45,730
already defined in the beginning and of

00:13:44,080 --> 00:13:50,230
course we return again the list of

00:13:45,730 --> 00:13:53,170
cities and the delete web service looks

00:13:50,230 --> 00:13:57,730
a little bit similar with one difference

00:13:53,170 --> 00:14:00,730
because the URL in the URL we will place

00:13:57,730 --> 00:14:04,570
the name of the city that we want to

00:14:00,730 --> 00:14:07,420
have deleted we will use delete as HTTP

00:14:04,570 --> 00:14:09,580
method and again the parameters here

00:14:07,420 --> 00:14:18,160
this time it doesn't come with the body

00:14:09,580 --> 00:14:20,110
but with the path so if I collapse on

00:14:18,160 --> 00:14:22,450
the right side I see that the

00:14:20,110 --> 00:14:26,100
documentation has already updated itself

00:14:22,450 --> 00:14:27,610
but I still have to implement this

00:14:26,100 --> 00:14:31,990
service of course

00:14:27,610 --> 00:14:34,840
so I say add City and there is now also

00:14:31,990 --> 00:14:37,030
a further function from this swagger

00:14:34,840 --> 00:14:40,630
middleware because it puts a swagger

00:14:37,030 --> 00:14:43,780
object in the request object and there I

00:14:40,630 --> 00:14:46,450
can and access the parameters that I

00:14:43,780 --> 00:14:48,310
have already defined in my specification

00:14:46,450 --> 00:14:50,950
so I'm just requesting here the city

00:14:48,310 --> 00:14:53,410
that should be added I push it to the

00:14:50,950 --> 00:14:58,030
array engine just returning it

00:14:53,410 --> 00:15:00,880
and for the delete city service I can

00:14:58,030 --> 00:15:04,980
again use this swagger object again with

00:15:00,880 --> 00:15:08,380
the params object and please note that

00:15:04,980 --> 00:15:10,630
it is not relevant if I if the parameter

00:15:08,380 --> 00:15:13,030
comes from the from the path or if it

00:15:10,630 --> 00:15:15,610
comes from the body doesn't matter I can

00:15:13,030 --> 00:15:26,670
always access it wire this swagger

00:15:15,610 --> 00:15:26,670
object I also have to put it here and I

00:15:27,150 --> 00:15:35,020
just say safe and I cannot actually play

00:15:32,890 --> 00:15:37,360
with this web services already because I

00:15:35,020 --> 00:15:41,200
can now say post so I want to create a

00:15:37,360 --> 00:15:43,840
new city and click on try this operation

00:15:41,200 --> 00:15:47,200
and since we have to find now an input

00:15:43,840 --> 00:15:49,540
the swagger documentation already has

00:15:47,200 --> 00:15:51,730
prepared the required input fields for

00:15:49,540 --> 00:15:55,690
us and it was also telling us that these

00:15:51,730 --> 00:16:02,970
are required so I can say I want to add

00:15:55,690 --> 00:16:02,970
the city links population okay

00:16:04,380 --> 00:16:13,590
yeah and then I just say send request

00:16:10,550 --> 00:16:17,670
success and I can again see that I have

00:16:13,590 --> 00:16:21,330
no three cities and for the delete web

00:16:17,670 --> 00:16:23,730
service again I can also execute it here

00:16:21,330 --> 00:16:28,020
there is already the parameter name and

00:16:23,730 --> 00:16:30,960
I say I wanted to get Krauts again st.

00:16:28,020 --> 00:16:34,620
request and as you can see just be an

00:16:30,960 --> 00:16:38,250
end and survived so this was the back

00:16:34,620 --> 00:16:40,590
end part of our small application just

00:16:38,250 --> 00:16:42,900
as a to repeat that we saw how the

00:16:40,590 --> 00:16:45,840
swagger middle of our works we saw how

00:16:42,900 --> 00:16:48,390
how has swagger specification looks like

00:16:45,840 --> 00:16:51,780
and we also saw how the documentation

00:16:48,390 --> 00:16:54,870
looks and how we can use it and now we

00:16:51,780 --> 00:16:57,870
want to try create the noches client

00:16:54,870 --> 00:17:03,540
which can be done very quickly because

00:16:57,870 --> 00:17:06,990
we can use a code generator for this the

00:17:03,540 --> 00:17:09,540
code generator comes as jar file or you

00:17:06,990 --> 00:17:11,280
can also use taka and in my case I'm

00:17:09,540 --> 00:17:16,440
using Tucker because there exists a

00:17:11,280 --> 00:17:18,390
docker image and it's very short so I

00:17:16,440 --> 00:17:21,330
have here this the name of the docker

00:17:18,390 --> 00:17:24,240
image why I say generate I have to pass

00:17:21,330 --> 00:17:26,510
the swagger specification of course then

00:17:24,240 --> 00:17:30,020
I have the possibility to set a

00:17:26,510 --> 00:17:33,240
configuration since it is a node module

00:17:30,020 --> 00:17:36,180
I can say here that the node module

00:17:33,240 --> 00:17:38,010
should be named city info client that

00:17:36,180 --> 00:17:40,800
can set the version number and I can

00:17:38,010 --> 00:17:48,420
also say that I don't want that it is a

00:17:40,800 --> 00:17:51,590
snapshot yeah and of course the output

00:17:48,420 --> 00:17:54,690
directory and this last parameter tells

00:17:51,590 --> 00:17:57,300
the code generator which type of

00:17:54,690 --> 00:17:59,850
generator it should use and for the know

00:17:57,300 --> 00:18:05,880
chess the the name of the code generator

00:17:59,850 --> 00:18:08,360
is typescript fetch executed so generate

00:18:05,880 --> 00:18:11,360
client hopefully it works

00:18:08,360 --> 00:18:11,360
yep

00:18:12,000 --> 00:18:17,310
and we have not a new directory called

00:18:13,770 --> 00:18:19,370
client that has been generated and in

00:18:17,310 --> 00:18:24,330
this directory there is this file API

00:18:19,370 --> 00:18:28,110
API ts and it provides me with a class

00:18:24,330 --> 00:18:30,600
default API that already contains for

00:18:28,110 --> 00:18:32,640
each of the defined web services methods

00:18:30,600 --> 00:18:35,940
so I have you dis at City method I have

00:18:32,640 --> 00:18:40,530
a delete City method and I all also have

00:18:35,940 --> 00:18:43,530
the list cities method another fact is

00:18:40,530 --> 00:18:47,340
that it has also created the interface

00:18:43,530 --> 00:18:49,230
for the city type so just scroll up you

00:18:47,340 --> 00:18:53,460
see that that this is an interface with

00:18:49,230 --> 00:18:55,590
a name the population and the size so

00:18:53,460 --> 00:18:57,330
what I can do now I can use it of course

00:18:55,590 --> 00:19:00,450
and it would go like this

00:18:57,330 --> 00:19:03,900
so I'm instantiating this default API

00:19:00,450 --> 00:19:07,530
class and I say I want to add a new city

00:19:03,900 --> 00:19:10,590
as you can see since it is in typescript

00:19:07,530 --> 00:19:16,230
I also get some support from my IDE

00:19:10,590 --> 00:19:25,940
and this time I choose another city the

00:19:16,230 --> 00:19:34,290
same size as that population say this

00:19:25,940 --> 00:19:37,400
the size is this one I'm putting it

00:19:34,290 --> 00:19:37,400
inside a function

00:19:40,490 --> 00:19:47,040
and I'm storing the results so since it

00:19:44,040 --> 00:19:53,910
is a promise that I get returned into

00:19:47,040 --> 00:19:58,440
the variable cities so no it seems

00:19:53,910 --> 00:20:05,190
correct yes and I'm printing out the

00:19:58,440 --> 00:20:07,320
response that I get okay so I store this

00:20:05,190 --> 00:20:07,650
file then I can then I have to compile

00:20:07,320 --> 00:20:10,650
it

00:20:07,650 --> 00:20:13,620
of course so first I have to install

00:20:10,650 --> 00:20:19,200
their dependencies which is just a fetch

00:20:13,620 --> 00:20:25,520
library and the command is then I run

00:20:19,200 --> 00:20:32,130
build and then I can already execute

00:20:25,520 --> 00:20:34,920
this code and as you can see we have now

00:20:32,130 --> 00:20:41,700
three cities with Eisenstaedt and if I

00:20:34,920 --> 00:20:45,390
go back to my to my documentation and I

00:20:41,700 --> 00:20:48,150
cross check then again and I again I can

00:20:45,390 --> 00:20:49,980
see that this is Eisenstaedt and I know

00:20:48,150 --> 00:20:52,260
where I think we are already out of time

00:20:49,980 --> 00:20:53,910
but I want just to demonstrate how it

00:20:52,260 --> 00:20:55,650
looks like if you have to maintain this

00:20:53,910 --> 00:20:57,630
application because as I said in the

00:20:55,650 --> 00:20:59,760
beginning we have to maintain our

00:20:57,630 --> 00:21:03,750
application things change all the time

00:20:59,760 --> 00:21:09,330
and in this case I just changed the URL

00:21:03,750 --> 00:21:11,520
from cities to city I store it I don't

00:21:09,330 --> 00:21:13,020
have to do very much on the server side

00:21:11,520 --> 00:21:15,540
because if you remember the swagga

00:21:13,020 --> 00:21:18,809
middleware creates the routing on the

00:21:15,540 --> 00:21:21,690
fly what I still have to do that I have

00:21:18,809 --> 00:21:26,580
to regenerate my noches client so that

00:21:21,690 --> 00:21:29,179
this new information also there so I'm

00:21:26,580 --> 00:21:29,179
just copying

00:21:32,270 --> 00:21:43,080
this overt unsafe so I say again

00:21:37,440 --> 00:21:47,720
generate client as I didn't change any

00:21:43,080 --> 00:22:03,780
types or so just the URL I can just

00:21:47,720 --> 00:22:12,420
paste the code before again and again I

00:22:03,780 --> 00:22:20,400
know I run npm run build and then i run

00:22:12,420 --> 00:22:24,470
the next yes it doesn't work cheese and

00:22:20,400 --> 00:22:28,530
as you can see it worked the reason why

00:22:24,470 --> 00:22:30,630
where I start is just one entry if you

00:22:28,530 --> 00:22:33,150
might remember I evaded I have edited

00:22:30,630 --> 00:22:36,270
now a second time is that the Express

00:22:33,150 --> 00:22:39,290
have restored itself and we started with

00:22:36,270 --> 00:22:43,680
the old data and if you don't believe me

00:22:39,290 --> 00:22:49,650
I can open here the web developer tools

00:22:43,680 --> 00:22:53,010
and came again just request the list of

00:22:49,650 --> 00:22:59,630
the cities or you can just read here it

00:22:53,010 --> 00:23:03,660
tells City and again so here it is city

00:22:59,630 --> 00:23:05,670
okay so this is how Vega works we didn't

00:23:03,660 --> 00:23:08,550
have that much time but I think that you

00:23:05,670 --> 00:23:12,570
have some kind of idea how you can use

00:23:08,550 --> 00:23:15,090
it and again Vega works really good or

00:23:12,570 --> 00:23:17,310
even better when it comes to typed

00:23:15,090 --> 00:23:18,780
languages because then swagger also can

00:23:17,310 --> 00:23:21,540
generate the request and the response

00:23:18,780 --> 00:23:24,720
type which is not needed in a JavaScript

00:23:21,540 --> 00:23:26,520
environment okay and by that I'm

00:23:24,720 --> 00:23:29,470
finished

00:23:26,520 --> 00:23:29,470

YouTube URL: https://www.youtube.com/watch?v=_DiGSLSTmYY


