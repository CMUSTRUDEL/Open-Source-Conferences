Title: Vienna.js, How we did everything wrong and got away with it, February 2019
Publication date: 2019-03-06
Playlist: viennaJS
Description: 
	Talk by Marko Jurisic:

This talk describes converting of an enterprise application from a legacy jQuery solution to Angular. The talk will deal with design decisions, upgrade strategies, problems that we encountered and our solutions to them. I will also talk openly about the errors that we made and what would we do differently after three years of experience with using Angular for an enterprise application. We all share similar problems and by sharing and discussing we can avoid some mistakes and produce better products for our clients.
Captions: 
	00:00:00,030 --> 00:00:05,549
hello everybody my name is Markus agenda

00:00:03,240 --> 00:00:07,950
I will talk about my project which I did

00:00:05,549 --> 00:00:10,590
for another company before I started

00:00:07,950 --> 00:00:12,000
working for the club so everything I say

00:00:10,590 --> 00:00:17,580
here doesn't have anything to do with

00:00:12,000 --> 00:00:20,539
will Harvin as a company I will warn you

00:00:17,580 --> 00:00:23,880
in advance it's slightly opinionated

00:00:20,539 --> 00:00:27,090
don't throw sticks at me so at first a

00:00:23,880 --> 00:00:30,359
few words about me I started programming

00:00:27,090 --> 00:00:32,130
some 20 years ago change technologies

00:00:30,359 --> 00:00:36,239
takes every few years or a few months

00:00:32,130 --> 00:00:38,610
did some java servlets applets MIT let's

00:00:36,239 --> 00:00:41,550
everything possible then switch to front

00:00:38,610 --> 00:00:44,670
end did some PHP then JavaScript then

00:00:41,550 --> 00:00:48,690
again Java then in the past few years

00:00:44,670 --> 00:00:53,910
angular and now react so that makes me

00:00:48,690 --> 00:00:56,129
kind of a dinosaur in this field first

00:00:53,910 --> 00:00:58,710
of all I would like also some feedback

00:00:56,129 --> 00:01:02,609
from you how many of you had have done

00:00:58,710 --> 00:01:06,420
something with the angular so ok about

00:01:02,609 --> 00:01:08,640
half of you only to know how much how

00:01:06,420 --> 00:01:12,930
deep do I have to go to explain

00:01:08,640 --> 00:01:16,380
something well fundamentals etc so my

00:01:12,930 --> 00:01:18,840
motivation for this talk is as already

00:01:16,380 --> 00:01:22,890
said I worked on a big enterprise

00:01:18,840 --> 00:01:25,380
project which was successfully completed

00:01:22,890 --> 00:01:27,630
from my side and there's a kind of

00:01:25,380 --> 00:01:29,759
celebration I decided to wrap up all the

00:01:27,630 --> 00:01:36,299
lessons learned and share them with the

00:01:29,759 --> 00:01:38,970
community problem background it was a

00:01:36,299 --> 00:01:42,689
enterprise application used in a very

00:01:38,970 --> 00:01:47,369
big transport company with some 200 the

00:01:42,689 --> 00:01:50,490
screens with very complex forms complex

00:01:47,369 --> 00:01:52,860
validations complex data tables etc it

00:01:50,490 --> 00:01:55,229
was a written originally in Python and I

00:01:52,860 --> 00:01:58,810
think then later they switch to another

00:01:55,229 --> 00:02:00,020
back back-end with database and

00:01:58,810 --> 00:02:05,009
[Music]

00:02:00,020 --> 00:02:08,840
with jQuery based front-end it was very

00:02:05,009 --> 00:02:11,190
complicated and very difficult to

00:02:08,840 --> 00:02:13,500
develop her to add new features to it

00:02:11,190 --> 00:02:16,050
and to debug and so the decision was

00:02:13,500 --> 00:02:17,700
make to rewrite the whole thing at the

00:02:16,050 --> 00:02:21,180
time there was no view so we had to

00:02:17,700 --> 00:02:25,530
decide between anger and react how we do

00:02:21,180 --> 00:02:27,660
make this decision we wrote one page I

00:02:25,530 --> 00:02:30,360
think it was two pages actually so one

00:02:27,660 --> 00:02:33,959
data table and one form in both of these

00:02:30,360 --> 00:02:36,660
frameworks and then discussed how we

00:02:33,959 --> 00:02:38,580
should do further and at the end we

00:02:36,660 --> 00:02:40,170
decided to go with angular because the

00:02:38,580 --> 00:02:44,520
whole company all other things were

00:02:40,170 --> 00:02:48,780
doing angular and also mixing HTML and

00:02:44,520 --> 00:02:53,280
JavaScript was some color to all of us

00:02:48,780 --> 00:02:57,510
developers so we decided to go with

00:02:53,280 --> 00:03:00,870
angle we decided that we would do the

00:02:57,510 --> 00:03:04,230
transition we would do a smooth

00:03:00,870 --> 00:03:05,610
transition so no big bank deployment but

00:03:04,230 --> 00:03:08,880
we would we started the board's

00:03:05,610 --> 00:03:11,810
applications anger and the old one on

00:03:08,880 --> 00:03:14,430
the same note server and then switched

00:03:11,810 --> 00:03:19,920
one page after the other with parallel

00:03:14,430 --> 00:03:21,090
tests and one advantage was that we had

00:03:19,920 --> 00:03:23,730
the running system at all times

00:03:21,090 --> 00:03:27,920
sometimes get a few pages which did the

00:03:23,730 --> 00:03:30,480
same job in all them the new system but

00:03:27,920 --> 00:03:32,130
disadvantage was that we had to stay

00:03:30,480 --> 00:03:34,350
backwards compatible at all times

00:03:32,130 --> 00:03:36,090
a few times we forgot this and then had

00:03:34,350 --> 00:03:39,810
some problems but that's another story

00:03:36,090 --> 00:03:40,890
so decision was made and it began I'm

00:03:39,810 --> 00:03:44,220
the one on the left if you don't

00:03:40,890 --> 00:03:47,010
recognize me we started writing our

00:03:44,220 --> 00:03:49,980
application in angular at the time when

00:03:47,010 --> 00:03:52,920
we started it was early bit of angular

00:03:49,980 --> 00:03:56,130
and most of the toriel's looked

00:03:52,920 --> 00:03:59,180
something like this so you had just some

00:03:56,130 --> 00:04:02,910
basics and they had to build upon it and

00:03:59,180 --> 00:04:06,500
many of those to tell us were also aged

00:04:02,910 --> 00:04:09,060
because there was no better version of

00:04:06,500 --> 00:04:12,269
angular released every few months or

00:04:09,060 --> 00:04:15,870
weeks so it was a really rapid

00:04:12,269 --> 00:04:17,489
development and even today official Docs

00:04:15,870 --> 00:04:22,140
and examples look something like this

00:04:17,489 --> 00:04:25,289
for form support so we have two fields

00:04:22,140 --> 00:04:26,760
and one select box and just example what

00:04:25,289 --> 00:04:28,830
we had to build was something

00:04:26,760 --> 00:04:32,010
this so you can't see it that much but

00:04:28,830 --> 00:04:34,380
we have nested forms with repeaters with

00:04:32,010 --> 00:04:36,300
the tabs which are nested in tabs and if

00:04:34,380 --> 00:04:38,910
I change something go on this form then

00:04:36,300 --> 00:04:42,810
something in the same style tab should

00:04:38,910 --> 00:04:46,250
get read and die and disallow settings

00:04:42,810 --> 00:04:46,250
so it was also fun

00:04:46,670 --> 00:04:53,190
click intro to angular forms so angular

00:04:49,380 --> 00:04:55,590
has two types of forms

00:04:53,190 --> 00:04:59,190
the first one is template driven form

00:04:55,590 --> 00:05:00,810
where all form logic is defined in the

00:04:59,190 --> 00:05:05,870
template and it looks something like

00:05:00,810 --> 00:05:08,490
this so we have this ng model which does

00:05:05,870 --> 00:05:11,760
automatically binding between model and

00:05:08,490 --> 00:05:13,950
template and we if new value comes let's

00:05:11,760 --> 00:05:15,510
say from server then the value of this

00:05:13,950 --> 00:05:18,090
textbox will be automatically updated

00:05:15,510 --> 00:05:19,620
and also if we type something instead

00:05:18,090 --> 00:05:23,640
textbox it will be automatically updated

00:05:19,620 --> 00:05:25,590
in the model so all the examples at that

00:05:23,640 --> 00:05:28,560
time were made in this way so we started

00:05:25,590 --> 00:05:31,680
let's say - and later we added the

00:05:28,560 --> 00:05:34,830
validation and for complex validation it

00:05:31,680 --> 00:05:38,790
we it is recommended to use reactive

00:05:34,830 --> 00:05:41,880
force which are defined in code in type

00:05:38,790 --> 00:05:46,770
script and there you have to define all

00:05:41,880 --> 00:05:48,600
your forms etc and for complex

00:05:46,770 --> 00:05:55,080
validations it is much easier to do it

00:05:48,600 --> 00:05:57,510
in this way but we didn't remove this ng

00:05:55,080 --> 00:05:58,980
model we should have but we didn't

00:05:57,510 --> 00:06:00,180
because everything worked and do never

00:05:58,980 --> 00:06:01,830
change the running system so we just

00:06:00,180 --> 00:06:05,520
added a bit of functionality on top of

00:06:01,830 --> 00:06:07,440
it and as a result sometimes our form

00:06:05,520 --> 00:06:10,350
would get out of the sync with the model

00:06:07,440 --> 00:06:12,390
and one more symptom was this beautiful

00:06:10,350 --> 00:06:15,960
expression has changed out it was

00:06:12,390 --> 00:06:20,040
checked error which occurs only in

00:06:15,960 --> 00:06:24,180
development mode so you can just make it

00:06:20,040 --> 00:06:26,190
silent in production and it occurs in

00:06:24,180 --> 00:06:29,250
development model because angular does

00:06:26,190 --> 00:06:30,540
to change cycles in a development and if

00:06:29,250 --> 00:06:33,030
something changes between these two

00:06:30,540 --> 00:06:35,550
change detection cycles then you get

00:06:33,030 --> 00:06:37,080
this wonderful message there was there

00:06:35,550 --> 00:06:39,770
were also many - told us how to deal

00:06:37,080 --> 00:06:39,770
with this and

00:06:39,860 --> 00:06:45,510
one of them is just to use a change

00:06:42,510 --> 00:06:47,670
detector F and there are two ways how

00:06:45,510 --> 00:06:49,710
they can use it we have changed it

00:06:47,670 --> 00:06:52,500
actually change detective mark for check

00:06:49,710 --> 00:06:55,620
which checks the current component and

00:06:52,500 --> 00:06:58,530
all the components up the tree and also

00:06:55,620 --> 00:07:02,580
detect changes which detect changes in

00:06:58,530 --> 00:07:05,850
component ending the components engine

00:07:02,580 --> 00:07:08,760
the components of this component and so

00:07:05,850 --> 00:07:11,070
how would we would we do it we just

00:07:08,760 --> 00:07:12,840
paste it one if it didn't work then we

00:07:11,070 --> 00:07:15,330
would do the other if that didn't work

00:07:12,840 --> 00:07:18,060
he would do both of them maybe it was

00:07:15,330 --> 00:07:19,590
the other way around and that didn't

00:07:18,060 --> 00:07:21,270
work then we would just sprinkle change

00:07:19,590 --> 00:07:25,670
detector all over the cone and hope that

00:07:21,270 --> 00:07:30,030
it work sometimes we even succeeded but

00:07:25,670 --> 00:07:33,480
it wasn't a real solution so a real

00:07:30,030 --> 00:07:35,850
solution was to rewrite all the forms to

00:07:33,480 --> 00:07:39,360
use only the reactive approach so just

00:07:35,850 --> 00:07:41,540
one of those and also we introduced

00:07:39,360 --> 00:07:45,840
using green detection strategy on push

00:07:41,540 --> 00:07:48,870
wherever we could so that gave us also

00:07:45,840 --> 00:07:51,210
some performance improvements it was a

00:07:48,870 --> 00:07:53,280
few days effort but now we have a clean

00:07:51,210 --> 00:07:59,940
solution and these layers are not

00:07:53,280 --> 00:08:02,729
popping out anymore yes so once again a

00:07:59,940 --> 00:08:04,530
mixing of template driven forms and

00:08:02,729 --> 00:08:07,500
reactive forms is a bad idea

00:08:04,530 --> 00:08:10,410
it was deprecated in versions 6 and in

00:08:07,500 --> 00:08:14,850
the version 7 it was removed so actually

00:08:10,410 --> 00:08:17,460
had to do it it was started another

00:08:14,850 --> 00:08:19,770
common error it's all JavaScript ok we

00:08:17,460 --> 00:08:24,180
had typed it in the front end but it's

00:08:19,770 --> 00:08:29,729
still JavaScript so you often said that

00:08:24,180 --> 00:08:31,620
it's one big advantage of modern web

00:08:29,729 --> 00:08:33,960
stacks so we have javascript in the

00:08:31,620 --> 00:08:36,150
browser JavaScript and the backend then

00:08:33,960 --> 00:08:39,180
draws it in the database what could

00:08:36,150 --> 00:08:43,349
possibly go wrong what we did wrong

00:08:39,180 --> 00:08:45,000
there was that we had no validation so

00:08:43,349 --> 00:08:47,730
we used native mobile driver and just

00:08:45,000 --> 00:08:51,540
stored our objects in the database and

00:08:47,730 --> 00:08:54,120
it worked perfect no errors but

00:08:51,540 --> 00:08:55,860
some helper using interface fields also

00:08:54,120 --> 00:08:58,110
learning the database which shouldn't

00:08:55,860 --> 00:08:59,970
have been there and broke some a third

00:08:58,110 --> 00:09:02,250
system down the pipe Island pipeline so

00:08:59,970 --> 00:09:04,380
the export is our data and then nobody

00:09:02,250 --> 00:09:05,880
complained everything was okay and after

00:09:04,380 --> 00:09:08,040
a few weeks somebody said well hey my

00:09:05,880 --> 00:09:11,990
system is not working and you broke it

00:09:08,040 --> 00:09:15,360
so the solution was to use Mongoose and

00:09:11,990 --> 00:09:19,649
Mongoose enables us to write the schemas

00:09:15,360 --> 00:09:22,829
for our data so that we can validate if

00:09:19,649 --> 00:09:26,790
the right data is long into the database

00:09:22,829 --> 00:09:29,459
and also define data types which the

00:09:26,790 --> 00:09:31,259
fields are required and there was also a

00:09:29,459 --> 00:09:34,230
magic word you know or unknown fields

00:09:31,259 --> 00:09:37,170
which prevented the unknown fields from

00:09:34,230 --> 00:09:39,209
landing in the database and this photo

00:09:37,170 --> 00:09:40,889
has nothing to do with Mongoose but with

00:09:39,209 --> 00:09:42,980
Mongoose project but I really like how

00:09:40,889 --> 00:09:47,850
the little guy is fighting the line so

00:09:42,980 --> 00:09:49,589
it's an example of Mongoose so as

00:09:47,850 --> 00:09:54,660
already said we started with a very

00:09:49,589 --> 00:09:57,630
early version of angular and planned to

00:09:54,660 --> 00:09:59,399
go on with regular upgrades each time

00:09:57,630 --> 00:10:02,430
again there was a major version we would

00:09:59,399 --> 00:10:05,250
reserve a day or two and do the upgrades

00:10:02,430 --> 00:10:07,560
and most of the time it was simple you

00:10:05,250 --> 00:10:09,779
just update taking Jason to NPM install

00:10:07,560 --> 00:10:12,720
and and restart and we would get

00:10:09,779 --> 00:10:18,089
something like this sometimes actually

00:10:12,720 --> 00:10:20,730
it was the biggest problem the arity

00:10:18,089 --> 00:10:23,040
compiler nah maybe a few words about a

00:10:20,730 --> 00:10:25,079
compiler so angular has the two types of

00:10:23,040 --> 00:10:27,660
compiler which you can use the

00:10:25,079 --> 00:10:30,600
just-in-time compiler which compiles

00:10:27,660 --> 00:10:33,149
templates and logic as you roll them and

00:10:30,600 --> 00:10:37,949
there is also ahead of time compiler

00:10:33,149 --> 00:10:40,439
which compiles all HTML code CSS etc

00:10:37,949 --> 00:10:42,630
comparison to JavaScript and does

00:10:40,439 --> 00:10:45,420
Bangalow minification obfuscation etc

00:10:42,630 --> 00:10:48,480
and then you get performance

00:10:45,420 --> 00:10:52,500
improvements but as a side effect you

00:10:48,480 --> 00:10:56,939
had to update your code a bit so it was

00:10:52,500 --> 00:10:58,740
also not documented that all the fields

00:10:56,939 --> 00:11:02,880
which are used in the templates have to

00:10:58,740 --> 00:11:04,399
be public as we started as Java

00:11:02,880 --> 00:11:07,939
developers we

00:11:04,399 --> 00:11:10,879
made all the fields private as they

00:11:07,939 --> 00:11:13,550
should be and then we had to write to

00:11:10,879 --> 00:11:15,829
half of our application to confirm with

00:11:13,550 --> 00:11:17,629
the LT compiler but it was a smaller

00:11:15,829 --> 00:11:22,269
change when a bigger problem which also

00:11:17,629 --> 00:11:24,800
wasn't documented is that we use the

00:11:22,269 --> 00:11:27,879
HTTP to boost the power application so

00:11:24,800 --> 00:11:31,730
we first did before we booted angular we

00:11:27,879 --> 00:11:34,399
made back end the call to ask with which

00:11:31,730 --> 00:11:37,430
they conserve back-end services are we

00:11:34,399 --> 00:11:40,399
speaking on which stage am i running et

00:11:37,430 --> 00:11:44,050
cetera and it worked fine in a

00:11:40,399 --> 00:11:47,740
just-in-time compiler but ahead of time

00:11:44,050 --> 00:11:51,860
compiler wanted to explicitly explicitly

00:11:47,740 --> 00:11:54,410
add HTTP as a dependency and we also had

00:11:51,860 --> 00:11:57,529
this nice warning from the web storm but

00:11:54,410 --> 00:11:59,269
it worked I think there are some 200

00:11:57,529 --> 00:12:01,670
comments on github issue which deals

00:11:59,269 --> 00:12:04,430
with this problem and they are still the

00:12:01,670 --> 00:12:09,319
popping out so somebody is in karting in

00:12:04,430 --> 00:12:13,129
encountering this problem even today for

00:12:09,319 --> 00:12:14,809
grids we went with a G grid I must say

00:12:13,129 --> 00:12:18,860
it's the best resolution on the market

00:12:14,809 --> 00:12:21,889
they also had their quirks so they did a

00:12:18,860 --> 00:12:24,769
lot of model changes in the past few

00:12:21,889 --> 00:12:27,170
years we use the enterprise grid this

00:12:24,769 --> 00:12:31,339
what we paid for the license and did in

00:12:27,170 --> 00:12:34,069
memory grid model with client paging

00:12:31,339 --> 00:12:39,139
sorting filtering etc so he was almost

00:12:34,069 --> 00:12:41,990
all of their features and so they did

00:12:39,139 --> 00:12:44,179
some renaming of packages to a degree

00:12:41,990 --> 00:12:46,850
the core was is now called AG bit

00:12:44,179 --> 00:12:51,290
community they did that but they still

00:12:46,850 --> 00:12:53,899
had to change the my code and alter all

00:12:51,290 --> 00:12:56,809
the imports and there was also one very

00:12:53,899 --> 00:12:59,360
funny change from one version to the

00:12:56,809 --> 00:13:02,600
other they change the sorting arrow

00:12:59,360 --> 00:13:05,029
direction which started nicely

00:13:02,600 --> 00:13:08,899
discussion none of us developers notice

00:13:05,029 --> 00:13:10,939
that none of the users notice that for

00:13:08,899 --> 00:13:14,029
the first one was our tester they see

00:13:10,939 --> 00:13:16,279
everything and he said so I'm a sorting

00:13:14,029 --> 00:13:18,510
us and again this arrow is pointing

00:13:16,279 --> 00:13:21,450
downwards and then it started

00:13:18,510 --> 00:13:24,600
in discussion what is actually right if

00:13:21,450 --> 00:13:26,970
I had sorting ascending I expect the

00:13:24,600 --> 00:13:30,000
arrow to go upwards but then my data

00:13:26,970 --> 00:13:32,790
goes from A to Z downwards and so what

00:13:30,000 --> 00:13:34,110
is right we also found some articles

00:13:32,790 --> 00:13:36,840
which are dealing with the statement

00:13:34,110 --> 00:13:42,510
it's not conclusive silly it was a funny

00:13:36,840 --> 00:13:44,850
problem so this is an example of all the

00:13:42,510 --> 00:13:47,190
grid it looked something like this and

00:13:44,850 --> 00:13:50,100
it was almost impossible to change

00:13:47,190 --> 00:13:51,990
because half of the things were hard

00:13:50,100 --> 00:13:53,490
coded and those are the things that were

00:13:51,990 --> 00:13:56,250
not hard coded verbs

00:13:53,490 --> 00:13:58,470
I think this column was defining some

00:13:56,250 --> 00:14:01,290
15,000 or something like that so to add

00:13:58,470 --> 00:14:05,900
something was not trivial and in the new

00:14:01,290 --> 00:14:09,000
version we introduced a chi grid and

00:14:05,900 --> 00:14:12,540
there it's very easily to change the

00:14:09,000 --> 00:14:18,330
column types and also users can define

00:14:12,540 --> 00:14:20,760
their own their own grid layouts I

00:14:18,330 --> 00:14:22,650
stored all the data in the local storage

00:14:20,760 --> 00:14:27,930
so that each was I could store their

00:14:22,650 --> 00:14:31,170
filter settings column settings etc and

00:14:27,930 --> 00:14:36,840
if they refresh the page it would all be

00:14:31,170 --> 00:14:39,480
there here are some examples of forms me

00:14:36,840 --> 00:14:41,360
at the end of our project we also got

00:14:39,480 --> 00:14:45,270
support from a very good designer and

00:14:41,360 --> 00:14:48,120
she helped us a great deal to make the

00:14:45,270 --> 00:14:50,070
entire project more usable and to look

00:14:48,120 --> 00:14:52,500
better at the beginning we used all

00:14:50,070 --> 00:14:55,050
these red colors as in the old bit right

00:14:52,500 --> 00:14:57,390
on we rotate that design and read is

00:14:55,050 --> 00:15:00,150
frowned upon in web design so we

00:14:57,390 --> 00:15:02,970
transferred to this generic grain blue

00:15:00,150 --> 00:15:04,740
design I always made the joke I started

00:15:02,970 --> 00:15:06,060
doing blue applications I did blue

00:15:04,740 --> 00:15:07,770
applications for 10 years and was

00:15:06,060 --> 00:15:13,410
finally happy now I could do a red

00:15:07,770 --> 00:15:15,750
application but it's got blue here is

00:15:13,410 --> 00:15:19,590
another example of one complicated form

00:15:15,750 --> 00:15:23,100
which was broken down in smaller chunks

00:15:19,590 --> 00:15:24,960
so we had this navigation on the top

00:15:23,100 --> 00:15:28,850
navigation on the side and navigation

00:15:24,960 --> 00:15:31,620
third navigation there so all the

00:15:28,850 --> 00:15:37,170
editing parts were very

00:15:31,620 --> 00:15:41,430
small and easy to conceive a few words

00:15:37,170 --> 00:15:44,940
about performance a legacy grid which I

00:15:41,430 --> 00:15:48,540
just showed you took some 30 seconds to

00:15:44,940 --> 00:15:50,580
load and there were about 4,000 items

00:15:48,540 --> 00:15:57,060
and they were very big

00:15:50,580 --> 00:16:01,589
so with treated inside and in the last

00:15:57,060 --> 00:16:05,580
version we managed to reduce it to less

00:16:01,589 --> 00:16:07,800
than two seconds how we did it the first

00:16:05,580 --> 00:16:10,560
versions of the original are loaded all

00:16:07,800 --> 00:16:14,940
the data in there are there is also for

00:16:10,560 --> 00:16:18,060
each entity there were multiple time

00:16:14,940 --> 00:16:21,420
slices so we could define this data is

00:16:18,060 --> 00:16:25,500
valid from first six months this year

00:16:21,420 --> 00:16:27,920
and then after in the next six months

00:16:25,500 --> 00:16:32,010
there will be some other data and so

00:16:27,920 --> 00:16:35,160
some of these products had from 10 10

00:16:32,010 --> 00:16:37,530
times - time slices and it was just like

00:16:35,160 --> 00:16:41,040
if we were we would load the 10 objects

00:16:37,530 --> 00:16:43,740
and what I did I have implemented the

00:16:41,040 --> 00:16:46,140
poor man's graph QL so I loaded only the

00:16:43,740 --> 00:16:49,560
data that was actually shown in the

00:16:46,140 --> 00:16:51,180
table and just for the current time

00:16:49,560 --> 00:16:53,940
slice and also implemented server-side

00:16:51,180 --> 00:16:56,310
caching and also of course angular gave

00:16:53,940 --> 00:16:58,290
us some free performance improvements of

00:16:56,310 --> 00:17:01,110
the box with the ahead of tango padding

00:16:58,290 --> 00:17:07,290
and that's how we achieved these 1.8

00:17:01,110 --> 00:17:10,140
seconds so a few more lessons learned I

00:17:07,290 --> 00:17:12,089
will repeat again mixing of template

00:17:10,140 --> 00:17:16,470
driven and reactive forms was a very bad

00:17:12,089 --> 00:17:18,329
idea and if I were to do something like

00:17:16,470 --> 00:17:20,550
this from the start again I would

00:17:18,329 --> 00:17:21,689
probably go with redux or immutable so

00:17:20,550 --> 00:17:24,360
something like that to prevent

00:17:21,689 --> 00:17:25,800
accidental changing of model because we

00:17:24,360 --> 00:17:27,660
had some problems there - and which

00:17:25,800 --> 00:17:32,700
resulted in these expression has changed

00:17:27,660 --> 00:17:34,860
etcetera and also a good thing was to

00:17:32,700 --> 00:17:37,800
use this ahead of time compiler which

00:17:34,860 --> 00:17:41,070
brought us great performance

00:17:37,800 --> 00:17:43,230
improvements out of the box what I would

00:17:41,070 --> 00:17:47,380
like to see in the framework itself is

00:17:43,230 --> 00:17:49,750
possibility to create lightweight

00:17:47,380 --> 00:17:52,120
components may be something like style

00:17:49,750 --> 00:17:53,680
components in react because in angular

00:17:52,120 --> 00:17:55,630
we still have to create a class for each

00:17:53,680 --> 00:17:58,900
component and register it in moderator

00:17:55,630 --> 00:18:00,220
in a module etc so one line in the

00:17:58,900 --> 00:18:06,180
components would be a great improvement

00:18:00,220 --> 00:18:09,400
and would make our lives easier and also

00:18:06,180 --> 00:18:12,610
currently compiled code is a very ugly

00:18:09,400 --> 00:18:15,520
so you cannot debug it and look how it

00:18:12,610 --> 00:18:19,150
works and I can't wait to see how it

00:18:15,520 --> 00:18:24,580
works with ID so I wish would make much

00:18:19,150 --> 00:18:27,190
better compiled code I'd like to share

00:18:24,580 --> 00:18:28,690
also my favorite quote video an expert

00:18:27,190 --> 00:18:30,850
is a man who has made all the mistakes

00:18:28,690 --> 00:18:34,840
with which can be made in a very narrow

00:18:30,850 --> 00:18:37,720
field and also for the not dinosaurs

00:18:34,840 --> 00:18:39,490
among you something similar by the

00:18:37,720 --> 00:18:41,560
Taylor Swift believe in everything you

00:18:39,490 --> 00:18:48,180
do believe in any mistakes and grow from

00:18:41,560 --> 00:18:50,980
them a few closing thoughts finally I

00:18:48,180 --> 00:18:54,790
would like to say that it was a really

00:18:50,980 --> 00:18:57,010
fun ride so to grow and learn with the

00:18:54,790 --> 00:18:58,950
framework and to implement each feature

00:18:57,010 --> 00:19:03,490
as it was introduced all introduced

00:18:58,950 --> 00:19:10,950
animations ahead of tango power and many

00:19:03,490 --> 00:19:14,530
other features community is great so

00:19:10,950 --> 00:19:17,950
nowadays there are also many good

00:19:14,530 --> 00:19:21,730
tutorials such as angular in depth or

00:19:17,950 --> 00:19:26,680
the totem series or block of message

00:19:21,730 --> 00:19:30,730
style and I must say those were fun

00:19:26,680 --> 00:19:33,510
three years and we also had this one a

00:19:30,730 --> 00:19:37,270
printed on the wall of our office and

00:19:33,510 --> 00:19:39,970
each time when we were at this point we

00:19:37,270 --> 00:19:42,490
would laugh and know that it will get

00:19:39,970 --> 00:19:46,660
better so I must conclude it it's the

00:19:42,490 --> 00:19:49,040
best framework ever so it will be

00:19:46,660 --> 00:19:52,790
slightly up in it thank you

00:19:49,040 --> 00:19:52,790

YouTube URL: https://www.youtube.com/watch?v=PHMRum1-xLY


