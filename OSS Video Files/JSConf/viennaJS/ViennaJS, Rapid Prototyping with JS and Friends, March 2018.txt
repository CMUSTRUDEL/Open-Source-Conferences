Title: ViennaJS, Rapid Prototyping with JS and Friends, March 2018
Publication date: 2018-04-05
Playlist: viennaJS
Description: 
	Talk by Attila Ruf:
Difficulties in understanding the problem, crystal-balling for meaningful functionality, puzzling about user acceptance/technological feasibility and speed in delivery are the key challenges in driving ideas to business applications. This talk gives some insights on how Rapid Prototyping can help.
Captions: 
	00:00:00,030 --> 00:00:07,350
hello my name is Attila wolf and I'm a

00:00:04,460 --> 00:00:09,809
front-end developer I'm someone who

00:00:07,350 --> 00:00:12,750
loves to play around with new

00:00:09,809 --> 00:00:15,030
technologies old technologies

00:00:12,750 --> 00:00:20,100
yeah but mainly things with JavaScript

00:00:15,030 --> 00:00:22,680
because yeah this is what I enjoy I also

00:00:20,100 --> 00:00:28,550
like to create prototypes prototypes are

00:00:22,680 --> 00:00:32,610
is grateful for proving concepts proving

00:00:28,550 --> 00:00:37,170
ideas and to have something touchable

00:00:32,610 --> 00:00:39,329
and I'm pretty fortunate to to to work

00:00:37,170 --> 00:00:46,530
at the company that is actually doing

00:00:39,329 --> 00:00:53,750
prototyping yeah yeah this is my my

00:00:46,530 --> 00:00:57,449
competence as you see in the picture we

00:00:53,750 --> 00:01:03,210
we do prototype slightly like this in

00:00:57,449 --> 00:01:08,400
the first phase we we try to you to ID

00:01:03,210 --> 00:01:12,180
eight and understand ideas of our

00:01:08,400 --> 00:01:15,090
customers of their requirements this is

00:01:12,180 --> 00:01:17,549
a this is required to to discover and

00:01:15,090 --> 00:01:23,030
understand not so this is a key concept

00:01:17,549 --> 00:01:26,670
of a prototype yeah the goal is to

00:01:23,030 --> 00:01:31,470
validate technical feasibility and and

00:01:26,670 --> 00:01:36,270
user acceptance yeah but technical

00:01:31,470 --> 00:01:38,100
feasibility I mean if it works if it

00:01:36,270 --> 00:01:39,530
works for the user if it works in

00:01:38,100 --> 00:01:41,970
general

00:01:39,530 --> 00:01:45,299
there is a the key concept here is there

00:01:41,970 --> 00:01:47,490
is this vast failing and learning from

00:01:45,299 --> 00:01:50,670
from the behave from from these these

00:01:47,490 --> 00:01:52,939
failures if there are any and in some

00:01:50,670 --> 00:01:58,380
cases we will start from the beginning

00:01:52,939 --> 00:02:02,939
with a new concept now this is done it's

00:01:58,380 --> 00:02:09,020
it's clever with this one team one room

00:02:02,939 --> 00:02:09,020
concept which works like this

00:02:09,259 --> 00:02:12,259
the

00:02:12,569 --> 00:02:18,790
the business design architect and the UX

00:02:15,640 --> 00:02:20,860
architect tried to create a concept

00:02:18,790 --> 00:02:23,410
together with the customer product owner

00:02:20,860 --> 00:02:29,800
and the domain expert and the next step

00:02:23,410 --> 00:02:32,349
we we that's how the UI designer creates

00:02:29,800 --> 00:02:36,550
a visual prototype which usually ends up

00:02:32,349 --> 00:02:38,890
to being a click dummy this is our

00:02:36,550 --> 00:02:41,590
specification so we don't have a lot of

00:02:38,890 --> 00:02:46,239
text stand we don't we also don't do

00:02:41,590 --> 00:02:48,880
scrum because we don't need these these

00:02:46,239 --> 00:02:51,489
huge specific specific specification

00:02:48,880 --> 00:02:56,080
things and in the next step we start to

00:02:51,489 --> 00:02:59,890
develop the prototype the team which I'm

00:02:56,080 --> 00:03:02,080
part of as a front-end guy this happens

00:02:59,890 --> 00:03:03,880
simultaneously so the back end and the

00:03:02,080 --> 00:03:06,880
front end actually happens together and

00:03:03,880 --> 00:03:09,549
this results in something that I call

00:03:06,880 --> 00:03:11,890
user centric application design which is

00:03:09,549 --> 00:03:14,290
when you search for it and then wherever

00:03:11,890 --> 00:03:16,900
you get mostly not that what I mean

00:03:14,290 --> 00:03:20,890
under it and tune and I want you to

00:03:16,900 --> 00:03:23,620
explain it for this prototyping reuse

00:03:20,890 --> 00:03:26,380
currently this stack we use view Jas

00:03:23,620 --> 00:03:31,120
because it's simple and easy to set up

00:03:26,380 --> 00:03:33,700
it has lots of building things it's it

00:03:31,120 --> 00:03:36,430
works for us as a framework it has this

00:03:33,700 --> 00:03:40,209
router in the store which are easy to

00:03:36,430 --> 00:03:45,579
use to communicate with a back-end which

00:03:40,209 --> 00:03:47,410
is implemented in some language can be

00:03:45,579 --> 00:03:49,239
implemented in some language we use JSON

00:03:47,410 --> 00:03:53,889
API because it gives us incredible

00:03:49,239 --> 00:03:56,799
flexibility you can also use graph QL of

00:03:53,889 --> 00:03:59,500
course this worked for us so we chose it

00:03:56,799 --> 00:04:02,709
and then the the key essence and the

00:03:59,500 --> 00:04:04,799
entire thing is the the matching UI live

00:04:02,709 --> 00:04:08,560
you want to be fast you want to to

00:04:04,799 --> 00:04:11,019
handover something that's working for

00:04:08,560 --> 00:04:15,630
the customer so and it's something that

00:04:11,019 --> 00:04:20,099
is as close as possible to the UI to the

00:04:15,630 --> 00:04:24,010
to the UI design in the Kliq domain and

00:04:20,099 --> 00:04:26,150
in CMS's it should be beautiful and

00:04:24,010 --> 00:04:28,780
that's why matching UI library

00:04:26,150 --> 00:04:31,310
is easily configured and of course

00:04:28,780 --> 00:04:34,449
depending on the needs you

00:04:31,310 --> 00:04:37,639
you can install anything you want Maps

00:04:34,449 --> 00:04:41,509
really it's up to you yeah the basic

00:04:37,639 --> 00:04:45,560
principles here we use or yeah this is

00:04:41,509 --> 00:04:50,330
something I like to use is when yeah we

00:04:45,560 --> 00:04:56,690
use in a team as well put contextually

00:04:50,330 --> 00:04:59,270
close things together this is yeah well

00:04:56,690 --> 00:05:02,210
it's the best practice for us this means

00:04:59,270 --> 00:05:07,430
that you have your components store a

00:05:02,210 --> 00:05:11,210
namespace one in one directory we call

00:05:07,430 --> 00:05:13,580
the main and this fellow is a shallow

00:05:11,210 --> 00:05:17,960
structure so it's flattened out you

00:05:13,580 --> 00:05:21,080
don't have deep technical and abstract

00:05:17,960 --> 00:05:22,880
and whatever stuff we use across the

00:05:21,080 --> 00:05:25,780
team you bigger this language so

00:05:22,880 --> 00:05:29,479
everybody knows what's going on and we

00:05:25,780 --> 00:05:31,970
get this this language from actually the

00:05:29,479 --> 00:05:35,630
domain expert the customer and we do

00:05:31,970 --> 00:05:39,740
this because we need to talk to them in

00:05:35,630 --> 00:05:41,810
in some occasions and if you're working

00:05:39,740 --> 00:05:43,639
I don't know eight to ten hours straight

00:05:41,810 --> 00:05:45,860
on a prototype because at the end of the

00:05:43,639 --> 00:05:47,630
day you want to show them something it's

00:05:45,860 --> 00:05:49,520
it's pretty hard to formulate the

00:05:47,630 --> 00:05:52,030
language you would use in a

00:05:49,520 --> 00:05:55,849
computational environment to that one

00:05:52,030 --> 00:05:57,979
and then we make use of declarative

00:05:55,849 --> 00:06:01,370
methods now if you come from a react

00:05:57,979 --> 00:06:05,780
background or or a view background or

00:06:01,370 --> 00:06:08,419
well any declarative framework library

00:06:05,780 --> 00:06:11,960
whatever and it's nothing new for you

00:06:08,419 --> 00:06:15,039
also we use some some functional

00:06:11,960 --> 00:06:19,039
techniques but it's not a must it's just

00:06:15,039 --> 00:06:21,680
we have much things readable yeah so

00:06:19,039 --> 00:06:26,960
here deeper again containers and

00:06:21,680 --> 00:06:30,949
presenters thank you Dan Abramov the

00:06:26,960 --> 00:06:33,669
concept is not ours the work works great

00:06:30,949 --> 00:06:36,289
what comes here is the namespace store

00:06:33,669 --> 00:06:39,360
and if you are from a redux background

00:06:36,289 --> 00:06:42,060
this probably is something that doesn't

00:06:39,360 --> 00:06:48,180
sister but maybe I'm wrong I didn't do

00:06:42,060 --> 00:06:50,520
read access much yeah it's close close

00:06:48,180 --> 00:06:52,800
to the domain to the problem and then

00:06:50,520 --> 00:06:55,020
another part is the API communication

00:06:52,800 --> 00:06:59,659
which is a separate thing you want you

00:06:55,020 --> 00:07:03,870
to get it away as far without huge

00:06:59,659 --> 00:07:05,879
extractions from the core domain and we

00:07:03,870 --> 00:07:09,210
come new cage but it's yeah it's an

00:07:05,879 --> 00:07:15,000
abstract leave part of this this helps

00:07:09,210 --> 00:07:17,340
to to keep focus on the problem and it

00:07:15,000 --> 00:07:20,250
makes refactoring easier now imagine

00:07:17,340 --> 00:07:22,139
that you are working you are we're

00:07:20,250 --> 00:07:29,939
working on a prototype so you don't

00:07:22,139 --> 00:07:32,000
build Enterprise great software and and

00:07:29,939 --> 00:07:37,219
you need to throw away stuff

00:07:32,000 --> 00:07:41,699
occasionally even in later in later

00:07:37,219 --> 00:07:45,599
parts of the process yeah I know you

00:07:41,699 --> 00:07:48,330
begins language I understand yeah what

00:07:45,599 --> 00:07:51,210
I've just told you about this the entire

00:07:48,330 --> 00:07:53,669
team has to have a domain language even

00:07:51,210 --> 00:07:56,789
even the back the back ends guys who

00:07:53,669 --> 00:07:58,229
aren't directly working with us but when

00:07:56,789 --> 00:08:00,599
we're communicating with them it's

00:07:58,229 --> 00:08:02,250
essential yeah and the naming

00:08:00,599 --> 00:08:06,150
conventions should be simple nothing

00:08:02,250 --> 00:08:09,029
like a multi but supporter or something

00:08:06,150 --> 00:08:11,490
something segregation and and so on it's

00:08:09,029 --> 00:08:14,580
cool it's you it's it's specific it's

00:08:11,490 --> 00:08:19,650
it's exact but it's not it's not

00:08:14,580 --> 00:08:22,620
productive yeah this resulting in some

00:08:19,650 --> 00:08:24,659
sort of almost documented code and if

00:08:22,620 --> 00:08:27,779
you sit with the domain expert or the

00:08:24,659 --> 00:08:30,330
business developer in front of the code

00:08:27,779 --> 00:08:35,010
even they have some sort of idea what's

00:08:30,330 --> 00:08:37,620
going on there to separate a little bit

00:08:35,010 --> 00:08:42,469
at least we decided to go with with

00:08:37,620 --> 00:08:42,469
upper casing the the store related stuff

00:08:42,829 --> 00:08:50,970
and this is the declarative thing I was

00:08:48,839 --> 00:08:53,459
talking about here I wanted to mention

00:08:50,970 --> 00:08:56,730
that you shouldn't care about

00:08:53,459 --> 00:08:58,140
losing performance but apparently this

00:08:56,730 --> 00:09:00,870
is another problem as we have heard in

00:08:58,140 --> 00:09:03,510
previous talk it reduces the length of

00:09:00,870 --> 00:09:07,740
the code and increases the readability

00:09:03,510 --> 00:09:09,990
of it and this results in a more

00:09:07,740 --> 00:09:14,130
efficient coding as a team together and

00:09:09,990 --> 00:09:17,839
if you so this looks like this usually

00:09:14,130 --> 00:09:22,230
we we start to developing and sometimes

00:09:17,839 --> 00:09:26,970
the competence and and well we aren't

00:09:22,230 --> 00:09:29,610
fast enough or we are behind our goal we

00:09:26,970 --> 00:09:33,149
need to to get some some other team

00:09:29,610 --> 00:09:36,649
members and and they meet you to get on

00:09:33,149 --> 00:09:41,240
the bandwagon as fast as possible yeah

00:09:36,649 --> 00:09:45,660
what I I think are are essential for

00:09:41,240 --> 00:09:47,850
this approach is really defined process

00:09:45,660 --> 00:09:51,600
and you can only define this if you have

00:09:47,850 --> 00:09:53,940
gained experience in it then so I

00:09:51,600 --> 00:09:56,190
encourage everybody to to try to create

00:09:53,940 --> 00:09:58,529
some prototypes and a non-conventional

00:09:56,190 --> 00:10:02,730
way and an ugly way or everything and

00:09:58,529 --> 00:10:06,329
try to learn from it and and also have a

00:10:02,730 --> 00:10:08,610
team that's with many companies try to

00:10:06,329 --> 00:10:10,740
work or imagine to work with the team

00:10:08,610 --> 00:10:12,959
that has many different competences

00:10:10,740 --> 00:10:17,550
because not everybody is a developer

00:10:12,959 --> 00:10:21,270
here when we are doing the thing yes the

00:10:17,550 --> 00:10:25,459
the essence of all you should always

00:10:21,270 --> 00:10:28,770
know your - in the deepest way possible

00:10:25,459 --> 00:10:31,339
because only then you can be truly agile

00:10:28,770 --> 00:10:34,820
and the only thing you can can rewrite a

00:10:31,339 --> 00:10:37,560
reliable code that's working actually

00:10:34,820 --> 00:10:41,130
yeah this common language thing is

00:10:37,560 --> 00:10:45,450
really in essence here and to keep

00:10:41,130 --> 00:10:48,860
everything simple simple in sense of

00:10:45,450 --> 00:10:53,700
logic in sense of in sense of in

00:10:48,860 --> 00:10:58,920
structure in sense of well yeah

00:10:53,700 --> 00:11:01,440
everything so this was my first talk

00:10:58,920 --> 00:11:01,720
ever held on meetup so thank you very

00:11:01,440 --> 00:11:05,149
much

00:11:01,720 --> 00:11:05,149

YouTube URL: https://www.youtube.com/watch?v=m9a0tsUFdnM


