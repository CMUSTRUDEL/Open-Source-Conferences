Title: ViennaJS, Achieving End to End Type Safety with GraphQL, Prisma & TypeScript, October 2019
Publication date: 2019-11-02
Playlist: viennaJS
Description: 
	Talk by Tim Suchanek

Type safety is indispensable for developers to be productive and to have strong confidence in their code. In this talk, I explain the idea of end-to-end type safety in GraphQL and show a full-stack example using Apollo Client, GraphQL Nexus, Photon.js & GraphQL Code Generator.
Captions: 
	00:00:00,000 --> 00:00:05,339
hello everyone my name is Tim and I'm

00:00:02,639 --> 00:00:09,900
working for database tooling company

00:00:05,339 --> 00:00:13,410
called Prisma in Berlin so my talk title

00:00:09,900 --> 00:00:15,150
is called end to end type safety and so

00:00:13,410 --> 00:00:17,490
what are actually the ends that we are

00:00:15,150 --> 00:00:19,820
talking about here we're talking about a

00:00:17,490 --> 00:00:22,500
full stack web application traditional

00:00:19,820 --> 00:00:24,930
application going from database to

00:00:22,500 --> 00:00:26,789
front-end and we now somehow on a

00:00:24,930 --> 00:00:28,769
managed to get the data from the

00:00:26,789 --> 00:00:31,769
database into the front-end and the

00:00:28,769 --> 00:00:33,630
other way around so as you know there

00:00:31,769 --> 00:00:36,450
are a million different stacks that you

00:00:33,630 --> 00:00:38,640
can have and there's also a variety of

00:00:36,450 --> 00:00:41,730
numbers of layers you can have in

00:00:38,640 --> 00:00:44,640
between I will today show where a

00:00:41,730 --> 00:00:47,730
particular stack which includes graph GL

00:00:44,640 --> 00:00:52,500
and typescript who of you has already

00:00:47,730 --> 00:00:56,670
used typescript oh ok pretty much nearly

00:00:52,500 --> 00:00:57,989
everyone so that's good so the what are

00:00:56,670 --> 00:01:00,840
the layers that we are talking about

00:00:57,989 --> 00:01:02,670
today the first layer is the database in

00:01:00,840 --> 00:01:05,400
our example we're just using a sequel

00:01:02,670 --> 00:01:07,470
Lite database then we're accessing the

00:01:05,400 --> 00:01:10,740
data from our programming language as

00:01:07,470 --> 00:01:15,750
you can imagine it's a node.js context

00:01:10,740 --> 00:01:17,909
with a or M called photon J s then we're

00:01:15,750 --> 00:01:20,759
based on that we are creating a

00:01:17,909 --> 00:01:24,900
graphical schema with a tool called

00:01:20,759 --> 00:01:26,520
Nexus which is being exposed on a HTTP

00:01:24,900 --> 00:01:28,470
endpoint so we have a graph field so

00:01:26,520 --> 00:01:32,189
ever running and all of that will be

00:01:28,470 --> 00:01:36,030
consumed in react in the front-end so

00:01:32,189 --> 00:01:39,150
when we talk about type safety where do

00:01:36,030 --> 00:01:41,189
we get this type safety from typescript

00:01:39,150 --> 00:01:44,189
and I want to get this one out of the

00:01:41,189 --> 00:01:46,229
way directly in the beginning you don't

00:01:44,189 --> 00:01:49,079
have to use typescript but I still want

00:01:46,229 --> 00:01:51,090
to show you what kind of benefits you

00:01:49,079 --> 00:01:54,240
get in case you're using this tool in

00:01:51,090 --> 00:01:56,310
without types with just JavaScript so

00:01:54,240 --> 00:01:58,439
obviously the type safety you don't get

00:01:56,310 --> 00:02:00,119
in JavaScript meaning that if you now

00:01:58,439 --> 00:02:02,369
pass in a number but a string is

00:02:00,119 --> 00:02:04,890
expected you don't really get that much

00:02:02,369 --> 00:02:07,350
help or if you have property missing on

00:02:04,890 --> 00:02:09,209
an object javascript cannot really help

00:02:07,350 --> 00:02:10,679
you with that and therefore if you're

00:02:09,209 --> 00:02:12,780
refactoring and you're for example

00:02:10,679 --> 00:02:14,970
renaming a field

00:02:12,780 --> 00:02:17,190
mmm javascript is not really helping you

00:02:14,970 --> 00:02:19,020
with that and you have to search replace

00:02:17,190 --> 00:02:20,870
by hands on the other hand it's

00:02:19,020 --> 00:02:24,270
obviously fair to mention that

00:02:20,870 --> 00:02:25,740
typescript needs a big step although I'm

00:02:24,270 --> 00:02:28,020
using typescript mostly with a

00:02:25,740 --> 00:02:30,230
command-line tool called TS node so you

00:02:28,020 --> 00:02:33,750
can directly run the typescript files

00:02:30,230 --> 00:02:36,030
without a build step there things still

00:02:33,750 --> 00:02:39,080
like an extra thing that you need to

00:02:36,030 --> 00:02:40,260
take into account the good news is that

00:02:39,080 --> 00:02:43,860
auto-completion

00:02:40,260 --> 00:02:46,440
also works for JavaScript so if you're

00:02:43,860 --> 00:02:48,300
for example using vs code it informs you

00:02:46,440 --> 00:02:52,350
what kind of options you have when

00:02:48,300 --> 00:02:54,360
you're using the tooling so where do we

00:02:52,350 --> 00:02:57,900
start now with awful stagg application

00:02:54,360 --> 00:03:01,620
we're starting with this schema when

00:02:57,900 --> 00:03:03,870
using Prisma you have one file where you

00:03:01,620 --> 00:03:06,690
define your schema the structure of your

00:03:03,870 --> 00:03:09,750
data and here concretely we have a user

00:03:06,690 --> 00:03:13,230
which is related to many one user has

00:03:09,750 --> 00:03:15,420
many posts so we have a dedicated schema

00:03:13,230 --> 00:03:17,549
definition language here in order to be

00:03:15,420 --> 00:03:20,940
able to define the requirements we have

00:03:17,549 --> 00:03:23,700
for our data mmm how does it continue

00:03:20,940 --> 00:03:26,519
from here from here the schema flows up

00:03:23,700 --> 00:03:29,220
basically in the other layers the photon

00:03:26,519 --> 00:03:31,650
client will be generated based on that

00:03:29,220 --> 00:03:33,570
schema that has been defined then we

00:03:31,650 --> 00:03:35,970
have a tool called next was Prisma and

00:03:33,570 --> 00:03:38,700
will later get into what that is that

00:03:35,970 --> 00:03:41,190
generates a graphical schema which now

00:03:38,700 --> 00:03:42,989
can be consumed by tools in the

00:03:41,190 --> 00:03:45,299
front-end for example a tool called

00:03:42,989 --> 00:03:47,250
craft shell code generator which we are

00:03:45,299 --> 00:03:51,359
using in our rack code to have type

00:03:47,250 --> 00:03:54,750
safety for our front-end so let's go

00:03:51,359 --> 00:03:57,120
into the first layer which is photon let

00:03:54,750 --> 00:03:59,430
me give you a quick overview of what

00:03:57,120 --> 00:04:01,620
photon is and why it's interesting so

00:03:59,430 --> 00:04:04,049
it's basically an or am giving you

00:04:01,620 --> 00:04:05,730
access to your data and what is

00:04:04,049 --> 00:04:07,920
interesting about photon is that you

00:04:05,730 --> 00:04:09,930
have this select syntax here you can say

00:04:07,920 --> 00:04:13,200
I'm interested in the ID and the name

00:04:09,930 --> 00:04:16,019
and depending on the shape of this

00:04:13,200 --> 00:04:19,950
object that you're passing in here the

00:04:16,019 --> 00:04:22,140
return type is dynamic so it uses some

00:04:19,950 --> 00:04:23,460
typescript magic another hood you can

00:04:22,140 --> 00:04:25,550
ask me after the talk if you're

00:04:23,460 --> 00:04:27,740
interested but

00:04:25,550 --> 00:04:29,419
what is quite unique here and there is

00:04:27,740 --> 00:04:33,470
no other or M in any other language

00:04:29,419 --> 00:04:35,900
doing that depending on the input shape

00:04:33,470 --> 00:04:38,509
you automatically have the result typed

00:04:35,900 --> 00:04:43,129
so here we know the email is not a thing

00:04:38,509 --> 00:04:45,919
no the next layer is Nexus Nexus is a

00:04:43,129 --> 00:04:47,240
tool to implement graph GL service so in

00:04:45,919 --> 00:04:50,000
graph your hair you have a thing called

00:04:47,240 --> 00:04:53,270
a query and your schema and in this case

00:04:50,000 --> 00:04:55,550
we say we have a query called hello it's

00:04:53,270 --> 00:04:58,909
a string and it has a nullable field

00:04:55,550 --> 00:05:01,340
called name as the argument and has this

00:04:58,909 --> 00:05:05,870
function called resolve which basically

00:05:01,340 --> 00:05:08,210
is backing this query and on the right

00:05:05,870 --> 00:05:10,969
side you see the resulting graph care

00:05:08,210 --> 00:05:13,940
schema that we get by implementing such

00:05:10,969 --> 00:05:17,599
a graph here server and last but not

00:05:13,940 --> 00:05:19,870
least the front-end here we see on the

00:05:17,599 --> 00:05:22,909
right hand side we see our graph gets

00:05:19,870 --> 00:05:24,949
query that we have here we get to feed

00:05:22,909 --> 00:05:27,379
in our case these opposed and we're

00:05:24,949 --> 00:05:31,659
interested in the author and what we

00:05:27,379 --> 00:05:34,099
have here now is a react component and

00:05:31,659 --> 00:05:38,180
especially this part here feed query

00:05:34,099 --> 00:05:39,650
under the return line that is not a typo

00:05:38,180 --> 00:05:41,779
that is actually how you provide

00:05:39,650 --> 00:05:45,259
generics and typescript for JSX

00:05:41,779 --> 00:05:48,080
so query is a high order component by

00:05:45,259 --> 00:05:50,719
the rect Apollo package which is a

00:05:48,080 --> 00:05:53,599
graphical client and by providing feed

00:05:50,719 --> 00:05:55,610
query here as a generic this data object

00:05:53,599 --> 00:05:58,490
that we now get in our callback there is

00:05:55,610 --> 00:06:03,050
typed so depending on what we have in

00:05:58,490 --> 00:06:06,190
our our query here we know that we have

00:06:03,050 --> 00:06:09,560
these kind of properties on our posts

00:06:06,190 --> 00:06:11,360
but now let's actually battle test the

00:06:09,560 --> 00:06:15,199
stack and let's actually look into it

00:06:11,360 --> 00:06:18,139
how it looks like in reality and how you

00:06:15,199 --> 00:06:20,500
can measure how easy is such a stack is

00:06:18,139 --> 00:06:22,849
to use is by adding a field and

00:06:20,500 --> 00:06:25,430
basically seeing how many places do we

00:06:22,849 --> 00:06:27,370
have to touch about a year ago Pizza was

00:06:25,430 --> 00:06:30,860
quite famous in the JavaScript ecosystem

00:06:27,370 --> 00:06:36,320
I was tweeting that oh no I have to

00:06:30,860 --> 00:06:38,630
touch now 37 places and a year later now

00:06:36,320 --> 00:06:39,350
I believe that a number of places is

00:06:38,630 --> 00:06:43,850
significant

00:06:39,350 --> 00:06:46,820
we used it's not yet at 1 or 0 I mean at

00:06:43,850 --> 00:06:51,800
least one but we're at least much better

00:06:46,820 --> 00:06:53,780
off so the places in our lair system

00:06:51,800 --> 00:06:56,390
where do we have to touch something what

00:06:53,780 --> 00:06:58,190
has to change the first thing that has

00:06:56,390 --> 00:07:01,190
to change obviously in our database we

00:06:58,190 --> 00:07:03,950
need a new column then in our M or M

00:07:01,190 --> 00:07:05,570
photon in our case that thing somehow

00:07:03,950 --> 00:07:08,930
needs to be aware that the field has

00:07:05,570 --> 00:07:11,930
been introduced in our application our

00:07:08,930 --> 00:07:14,120
model or entity obviously also needs to

00:07:11,930 --> 00:07:17,300
include this the resulting graph QL

00:07:14,120 --> 00:07:19,180
schema needs to be updated and therefore

00:07:17,300 --> 00:07:21,140
in the front end we can then use this

00:07:19,180 --> 00:07:23,450
obviously in the front end we now want

00:07:21,140 --> 00:07:27,770
to use this field otherwise introducing

00:07:23,450 --> 00:07:30,190
that is useless when using the pro smart

00:07:27,770 --> 00:07:32,690
stack you save a bunch of steps here

00:07:30,190 --> 00:07:34,670
what you only have to do for the first

00:07:32,690 --> 00:07:36,350
two layers is adding it in the schema

00:07:34,670 --> 00:07:38,630
and the tooling helps you to

00:07:36,350 --> 00:07:41,410
automatically add it to the database and

00:07:38,630 --> 00:07:44,000
that the or M is updated automatically

00:07:41,410 --> 00:07:46,670
the in the application server you just

00:07:44,000 --> 00:07:48,680
added once in Nexus or Nexus Prisma I

00:07:46,670 --> 00:07:52,250
will later show that and it will be

00:07:48,680 --> 00:07:54,440
updating the graph QL schema and then

00:07:52,250 --> 00:07:58,580
later obviously you still need to use it

00:07:54,440 --> 00:07:59,540
in the front end in your components but

00:07:58,580 --> 00:08:02,990
talk is cheap

00:07:59,540 --> 00:08:05,690
so let's actually look into a demo we

00:08:02,990 --> 00:08:07,640
have a pretty simple block application

00:08:05,690 --> 00:08:11,540
here we have a feed we're

00:08:07,640 --> 00:08:14,210
differentiating between draft and let's

00:08:11,540 --> 00:08:17,330
say production block post and what we

00:08:14,210 --> 00:08:20,300
want to do now is introduce a field so

00:08:17,330 --> 00:08:23,000
here we have our schema defined and we

00:08:20,300 --> 00:08:26,210
would like to introduce a field to the

00:08:23,000 --> 00:08:29,600
pulse model let's say we introduce kind

00:08:26,210 --> 00:08:33,289
and we call it post kind and it could be

00:08:29,600 --> 00:08:35,539
an enum and this enum maybe has

00:08:33,289 --> 00:08:40,370
something called it could be a long read

00:08:35,539 --> 00:08:44,600
it could be comment and it could be news

00:08:40,370 --> 00:08:48,760
and I will quickly make this side here a

00:08:44,600 --> 00:08:48,760
bit bigger so

00:08:50,370 --> 00:09:01,839
we're okay here yeah

00:08:57,970 --> 00:09:04,089
and so now we have a command running

00:09:01,839 --> 00:09:06,459
here at the bottom which is called press

00:09:04,089 --> 00:09:09,160
medev this command watch is the schema

00:09:06,459 --> 00:09:11,050
file and as soon as it sees change it

00:09:09,160 --> 00:09:13,630
will migrate our local development

00:09:11,050 --> 00:09:16,420
database and we'll generate a new photon

00:09:13,630 --> 00:09:19,060
client here we have with this in this

00:09:16,420 --> 00:09:23,079
window with the star and rocket we have

00:09:19,060 --> 00:09:25,300
our node.js server running and that will

00:09:23,079 --> 00:09:28,720
also reload as soon as we save so now

00:09:25,300 --> 00:09:30,850
let's save the schema and as we see this

00:09:28,720 --> 00:09:33,670
is now regenerating the photon client

00:09:30,850 --> 00:09:37,630
and we now can actually use this new

00:09:33,670 --> 00:09:40,930
kind field in our application so our

00:09:37,630 --> 00:09:43,779
application here we have our type

00:09:40,930 --> 00:09:47,949
defined called post and now we decide

00:09:43,779 --> 00:09:50,889
okay we want to now expose this fields

00:09:47,949 --> 00:09:54,310
to the outer world so we just tell it

00:09:50,889 --> 00:09:57,070
dot kind and we can save this before we

00:09:54,310 --> 00:09:59,140
do so a quick overview what is the

00:09:57,070 --> 00:10:01,390
schema that we exposing right now this

00:09:59,140 --> 00:10:03,070
is a tool called raffia playground

00:10:01,390 --> 00:10:05,649
showing you the graphic your schema

00:10:03,070 --> 00:10:08,019
you're exposing and as we see that poles

00:10:05,649 --> 00:10:10,420
type doesn't yet have a kind so we can

00:10:08,019 --> 00:10:13,750
reload here that's the latest state we

00:10:10,420 --> 00:10:16,240
have as soon as we save the schema we

00:10:13,750 --> 00:10:18,390
can now reload our playgrounds and we

00:10:16,240 --> 00:10:22,480
will see we have a new kind that's nice

00:10:18,390 --> 00:10:25,120
however in our code we still see that

00:10:22,480 --> 00:10:28,959
there is a compile error and typescript

00:10:25,120 --> 00:10:31,899
tells us kind is missing so that's very

00:10:28,959 --> 00:10:34,060
nice Thank You typescript and we can now

00:10:31,899 --> 00:10:36,279
check out okay here some auto completion

00:10:34,060 --> 00:10:38,589
we can add the kind so this is a

00:10:36,279 --> 00:10:40,990
mutation where we're creating a post and

00:10:38,589 --> 00:10:43,420
the auto completion also shows us we can

00:10:40,990 --> 00:10:45,940
for example call it long read Because

00:10:43,420 --> 00:10:48,699
photon has already been updated and

00:10:45,940 --> 00:10:50,889
photon is basically the tool that we are

00:10:48,699 --> 00:10:54,190
using here to implement a graph here is

00:10:50,889 --> 00:10:57,720
alpha so if we save this now the

00:10:54,190 --> 00:11:00,370
compiler is happy and our API is ready

00:10:57,720 --> 00:11:01,420
the next step is to actually use this in

00:11:00,370 --> 00:11:03,460
the front-end

00:11:01,420 --> 00:11:07,240
in the front end we have a tool running

00:11:03,460 --> 00:11:08,890
called a graph code generator and what

00:11:07,240 --> 00:11:10,900
it does it basically looks into your

00:11:08,890 --> 00:11:13,870
graph care queries that you're refining

00:11:10,900 --> 00:11:15,700
here in your code and it matches them to

00:11:13,870 --> 00:11:17,860
the schema that is exposed by the server

00:11:15,700 --> 00:11:20,260
and if we for example would now call

00:11:17,860 --> 00:11:23,380
this field here published - it would say

00:11:20,260 --> 00:11:26,740
no this is not a thing yeah now the

00:11:23,380 --> 00:11:28,540
screen is big a bit small but in general

00:11:26,740 --> 00:11:31,240
it will just show you hey there's a

00:11:28,540 --> 00:11:33,750
problem so now we can introduce to a

00:11:31,240 --> 00:11:38,830
field called kind here it will reload

00:11:33,750 --> 00:11:40,960
it's happy and ok perfect the feed page

00:11:38,830 --> 00:11:44,800
has it so now we can introduce it to our

00:11:40,960 --> 00:11:48,040
post component the post component here

00:11:44,800 --> 00:11:51,070
with typescript defines its requirements

00:11:48,040 --> 00:11:53,140
it once opposed with a kind we can

00:11:51,070 --> 00:11:55,450
import the pulse kind based on the

00:11:53,140 --> 00:11:59,860
generated code which comes from the

00:11:55,450 --> 00:12:04,210
graph Kia coaching tool and now we can

00:11:59,860 --> 00:12:06,280
use the kind here and save this oh there

00:12:04,210 --> 00:12:09,160
we get an error what is going on

00:12:06,280 --> 00:12:11,200
mmm typescript no tells us there's

00:12:09,160 --> 00:12:12,910
another place where we're using the post

00:12:11,200 --> 00:12:15,970
component and that's called the drafts

00:12:12,910 --> 00:12:18,730
page so due to the type safety it now

00:12:15,970 --> 00:12:20,740
lets us know please also add the kind if

00:12:18,730 --> 00:12:22,960
you want to use it in the post component

00:12:20,740 --> 00:12:28,720
please also add it in the drafts page so

00:12:22,960 --> 00:12:33,400
we save this and theoretically yes and

00:12:28,720 --> 00:12:34,840
now it's updated perfect so and now

00:12:33,400 --> 00:12:38,470
let's look into the front-end are we

00:12:34,840 --> 00:12:41,740
actually using the kind we don't see it

00:12:38,470 --> 00:12:43,450
yet yes so we now see the default kind

00:12:41,740 --> 00:12:49,000
is long read because that is also the

00:12:43,450 --> 00:12:53,140
kind we change to and code okay so what

00:12:49,000 --> 00:12:54,700
did we just see we saw that it's nice to

00:12:53,140 --> 00:12:57,520
have a single source of truth of the

00:12:54,700 --> 00:12:59,530
schema because we automatically can

00:12:57,520 --> 00:13:02,920
update all the rest of our application

00:12:59,530 --> 00:13:05,860
we have Auto completion in our while

00:13:02,920 --> 00:13:06,910
cramming the data and we didn't have to

00:13:05,860 --> 00:13:11,860
touch all liars

00:13:06,910 --> 00:13:13,150
just three layers a bit better so how

00:13:11,860 --> 00:13:15,130
does the future look like

00:13:13,150 --> 00:13:17,860
what I just showed you is

00:13:15,130 --> 00:13:21,220
not yet production ready however we

00:13:17,860 --> 00:13:23,590
highly encourage you to use it and if

00:13:21,220 --> 00:13:25,630
you have any questions ideas want to

00:13:23,590 --> 00:13:28,590
join the discussion you can go to the

00:13:25,630 --> 00:13:30,250
github page of Prisma slash Prisma -

00:13:28,590 --> 00:13:33,700
thanks

00:13:30,250 --> 00:13:33,700

YouTube URL: https://www.youtube.com/watch?v=ogmJrSuA7ZI


