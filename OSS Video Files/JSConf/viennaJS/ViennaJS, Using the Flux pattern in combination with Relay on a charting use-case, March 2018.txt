Title: ViennaJS, Using the Flux pattern in combination with Relay on a charting use-case, March 2018
Publication date: 2018-04-05
Playlist: viennaJS
Description: 
	Talk by Daniel Steiner:
The flux pattern is around for a while and has found its implementations in popular libraries like e.g. Redux. When using a GraphQL server for the data representation of an application, Relay and Apollo are the two widely used GraphQL clients.
Captions: 
	00:00:00,000 --> 00:00:06,330
hello yeah first the title of my talk

00:00:03,920 --> 00:00:10,530
it's about the flux pattern in

00:00:06,330 --> 00:00:12,690
combination with relay and only in the

00:00:10,530 --> 00:00:14,070
end of the small talk it's on charting

00:00:12,690 --> 00:00:17,910
use-case why it is important for

00:00:14,070 --> 00:00:19,320
charting yeah to my person my name is

00:00:17,910 --> 00:00:23,330
Daniel Steiner

00:00:19,320 --> 00:00:27,869
I work as a front-end engineer at Quebec

00:00:23,330 --> 00:00:29,490
but it's only part of my job I also work

00:00:27,869 --> 00:00:32,399
at the University of Vienna as an

00:00:29,490 --> 00:00:37,050
theoretical astrophysicist I'm doing my

00:00:32,399 --> 00:00:39,899
PhD thesis there yeah and I came to

00:00:37,050 --> 00:00:42,180
programming doing it in my free time and

00:00:39,899 --> 00:00:44,399
was interested in solving problems

00:00:42,180 --> 00:00:48,030
basically which is the same thing I do

00:00:44,399 --> 00:00:50,670
at the University so I I don't know to

00:00:48,030 --> 00:00:54,360
say ended up but I'm working now at car

00:00:50,670 --> 00:00:58,890
back and yeah I like the diversity of

00:00:54,360 --> 00:01:02,879
doing different things in research and

00:00:58,890 --> 00:01:06,420
programming stuff so yeah that's for me

00:01:02,879 --> 00:01:10,950
yeah to Calva quenchers very briefly

00:01:06,420 --> 00:01:15,869
it's yeah we do software development

00:01:10,950 --> 00:01:18,600
mainly with the focus on tailor-made

00:01:15,869 --> 00:01:23,670
application solutions for businesses

00:01:18,600 --> 00:01:28,140
businesses with the UX with great UX

00:01:23,670 --> 00:01:30,960
tailor made by by us for them and on the

00:01:28,140 --> 00:01:33,990
backend we do our stack is the top net

00:01:30,960 --> 00:01:36,270
cord framework and on the front end we

00:01:33,990 --> 00:01:40,259
use front end we use typescript react

00:01:36,270 --> 00:01:43,380
relay craft well yeah that's very new

00:01:40,259 --> 00:01:48,329
set up and yeah we really enjoy to work

00:01:43,380 --> 00:01:52,320
with that so far at least yeah and also

00:01:48,329 --> 00:01:54,720
interest industrial IOT is a very big

00:01:52,320 --> 00:01:56,520
thing coming up every business wants to

00:01:54,720 --> 00:01:59,700
have it wants to have it on the

00:01:56,520 --> 00:02:02,460
platforms FinTech yeah you can we can

00:01:59,700 --> 00:02:05,549
talk afterwards about that so directly

00:02:02,460 --> 00:02:07,340
to talk very briefly what is relay and

00:02:05,549 --> 00:02:10,800
why should we use it

00:02:07,340 --> 00:02:12,480
relay modern modern especially because

00:02:10,800 --> 00:02:18,510
it's the new version of relay

00:02:12,480 --> 00:02:22,110
is a graphical client for JavaScript but

00:02:18,510 --> 00:02:24,390
specifically specifically made for react

00:02:22,110 --> 00:02:28,590
components so it's very tightly coupled

00:02:24,390 --> 00:02:32,299
to react and it's very well suited for

00:02:28,590 --> 00:02:38,190
data-driven applications for big data

00:02:32,299 --> 00:02:41,849
analysis charting tables for many

00:02:38,190 --> 00:02:43,709
entries whatever and and if a very

00:02:41,849 --> 00:02:47,160
interesting thing about that is that is

00:02:43,709 --> 00:02:50,069
decorative and it's co-located the data

00:02:47,160 --> 00:02:52,680
requirements for for a component a

00:02:50,069 --> 00:02:55,620
co-located co-located with the component

00:02:52,680 --> 00:02:59,569
itself meaning what what you can see

00:02:55,620 --> 00:03:02,790
here is at a component here which

00:02:59,569 --> 00:03:04,590
contains arbitrary content and then you

00:03:02,790 --> 00:03:07,709
see the data requirements here

00:03:04,590 --> 00:03:10,829
afterwards just in the same file for

00:03:07,709 --> 00:03:12,540
example which does wraps the data

00:03:10,829 --> 00:03:15,540
requirements around the component and

00:03:12,540 --> 00:03:18,980
there in there's just stands the graph

00:03:15,540 --> 00:03:24,000
quelle query or fragment in this case

00:03:18,980 --> 00:03:27,319
which explains and declarative estates

00:03:24,000 --> 00:03:30,840
which data we need in this component and

00:03:27,319 --> 00:03:33,030
another thing which is advantage over

00:03:30,840 --> 00:03:35,489
Apollo in my opinion is that it's very

00:03:33,030 --> 00:03:38,310
optimized for mobile first applications

00:03:35,489 --> 00:03:43,319
which which becomes more and more

00:03:38,310 --> 00:03:45,630
important in the future yeah that's just

00:03:43,319 --> 00:03:48,769
for relay I don't want to talk about

00:03:45,630 --> 00:03:53,340
relay it don't want to talk about a very

00:03:48,769 --> 00:03:57,299
special feature of that of relay so

00:03:53,340 --> 00:04:01,680
since relay 1.5 which is really really

00:03:57,299 --> 00:04:04,739
new it's four weeks old there is a new

00:04:01,680 --> 00:04:08,129
interesting feature was coming up in the

00:04:04,739 --> 00:04:11,879
new release and it's direct store

00:04:08,129 --> 00:04:16,169
manipulation of relay by handler

00:04:11,879 --> 00:04:19,889
functions most of you have heard Redux

00:04:16,169 --> 00:04:21,329
or Apollo or both and there you know

00:04:19,889 --> 00:04:24,630
that the flux pattern is all about

00:04:21,329 --> 00:04:26,600
having data stores distributed fluxes

00:04:24,630 --> 00:04:29,160
many data stores Rita

00:04:26,600 --> 00:04:31,890
reduced it to one datastore which is a

00:04:29,160 --> 00:04:35,120
good idea and works well and also relate

00:04:31,890 --> 00:04:37,500
us that but relay didn't give you the

00:04:35,120 --> 00:04:40,170
possibility to change that store

00:04:37,500 --> 00:04:42,930
directly but only relay itself could

00:04:40,170 --> 00:04:46,320
change it this changed with relay 1 byte

00:04:42,930 --> 00:04:50,160
5 and now we can do that so we have the

00:04:46,320 --> 00:04:53,280
same power as redux or a polo and or a

00:04:50,160 --> 00:05:00,110
polo has or have and we can directly

00:04:53,280 --> 00:05:00,110
manipulate it which can be used to

00:05:01,160 --> 00:05:09,530
define better re-rendering or updating

00:05:06,510 --> 00:05:14,250
mechanisms for react component trees and

00:05:09,530 --> 00:05:16,320
another feature from not really a relay

00:05:14,250 --> 00:05:18,720
now not really

00:05:16,320 --> 00:05:20,940
yeah it's it's a relay feature but it's

00:05:18,720 --> 00:05:22,890
a craft quelle feature and the first

00:05:20,940 --> 00:05:25,290
hand is type safety from the data

00:05:22,890 --> 00:05:29,880
requirements so craft well most of you

00:05:25,290 --> 00:05:33,660
know is a type safe way of getting data

00:05:29,880 --> 00:05:37,790
from the data graph well server which is

00:05:33,660 --> 00:05:42,000
connected to various data sources and

00:05:37,790 --> 00:05:42,680
with relay 1.5 you can define a client

00:05:42,000 --> 00:05:46,230
schemer

00:05:42,680 --> 00:05:48,120
so saying it's a schema which only the

00:05:46,230 --> 00:05:50,220
client knows and the server doesn't know

00:05:48,120 --> 00:05:53,490
that and then you have handler

00:05:50,220 --> 00:05:55,950
mechanisms or and client handlers which

00:05:53,490 --> 00:05:59,520
can populate these fields on the client

00:05:55,950 --> 00:06:03,560
and this can be used to or this can be

00:05:59,520 --> 00:06:07,110
exploited in a very powerful manner so

00:06:03,560 --> 00:06:09,270
what you can see here sorry is this is

00:06:07,110 --> 00:06:12,450
the way you do that it's very very

00:06:09,270 --> 00:06:14,910
easily done it's you set up and relay

00:06:12,450 --> 00:06:17,160
environment or labor environment and

00:06:14,910 --> 00:06:21,210
there normally you don't have to do this

00:06:17,160 --> 00:06:25,500
here this red box thing here but if you

00:06:21,210 --> 00:06:27,150
provide it you can plug in addition of

00:06:25,500 --> 00:06:29,420
the connection and the fire handler

00:06:27,150 --> 00:06:32,250
which are real a related things

00:06:29,420 --> 00:06:34,350
additional ones so I did here and this

00:06:32,250 --> 00:06:36,660
very easily easy example which I'll show

00:06:34,350 --> 00:06:39,810
you afterwards I had just yeah

00:06:36,660 --> 00:06:43,710
implemented a to do Angela which is

00:06:39,810 --> 00:06:47,970
the very very thing which manipulates

00:06:43,710 --> 00:06:50,070
the store and yeah here you can see in

00:06:47,970 --> 00:06:54,000
the fragment this is a field

00:06:50,070 --> 00:06:56,580
it's called seduce and if we annotated

00:06:54,000 --> 00:07:00,000
with this underscore underscore client

00:06:56,580 --> 00:07:03,390
field and provide a handle which is

00:07:00,000 --> 00:07:05,790
basically this year then it takes the to

00:07:03,390 --> 00:07:09,450
do handler here in this case for

00:07:05,790 --> 00:07:11,550
metaphor handling the field updating or

00:07:09,450 --> 00:07:16,860
the store updating mechanism for this

00:07:11,550 --> 00:07:22,380
field so how does that look like show

00:07:16,860 --> 00:07:24,930
yeah yeah I just came up with this very

00:07:22,380 --> 00:07:27,390
very small example it's basically the

00:07:24,930 --> 00:07:29,910
relay example for the to do app built

00:07:27,390 --> 00:07:32,880
with relay and it just manipulated it a

00:07:29,910 --> 00:07:35,910
little bit I also got help from

00:07:32,880 --> 00:07:40,500
colleague which did this pink blue thing

00:07:35,910 --> 00:07:44,820
here and what you can see here is in

00:07:40,500 --> 00:07:47,700
this box the normal the server provided

00:07:44,820 --> 00:07:50,250
or yeah server provided to do items and

00:07:47,700 --> 00:07:53,640
in are in there it's the normal way of

00:07:50,250 --> 00:07:57,390
using relay and here I just did another

00:07:53,640 --> 00:08:00,240
box which is which contains no to-do

00:07:57,390 --> 00:08:07,380
item from the server but it's processed

00:08:00,240 --> 00:08:11,250
by my own Handler and this gives you the

00:08:07,380 --> 00:08:13,650
power of processing first the data items

00:08:11,250 --> 00:08:16,050
of the server discard them if you don't

00:08:13,650 --> 00:08:18,810
need them and just use the processed

00:08:16,050 --> 00:08:20,729
ones and like and you can do everything

00:08:18,810 --> 00:08:23,970
you want you have you would do with

00:08:20,729 --> 00:08:27,090
normal field in a normal component with

00:08:23,970 --> 00:08:30,300
this ones and I did here the back output

00:08:27,090 --> 00:08:31,320
which just gives you a little idea what

00:08:30,300 --> 00:08:38,270
what's going on here

00:08:31,320 --> 00:08:38,270
so if I'm for example adding you to do

00:08:39,740 --> 00:08:43,539
the

00:08:41,469 --> 00:08:46,270
what what I want to did here is when I

00:08:43,539 --> 00:08:49,420
enter when I press enter now it gets

00:08:46,270 --> 00:08:51,399
populated on the on the phone it's it's

00:08:49,420 --> 00:08:54,820
in you to do but it's also getting

00:08:51,399 --> 00:08:59,220
updated automatically and pushed to the

00:08:54,820 --> 00:09:02,649
client field to do so and you can see

00:08:59,220 --> 00:09:04,690
that the text of the to do was

00:09:02,649 --> 00:09:07,720
manipulated also by the handler it's a

00:09:04,690 --> 00:09:10,360
very very powerful feature I can show

00:09:07,720 --> 00:09:12,820
you after what's why so you can see here

00:09:10,360 --> 00:09:15,220
without doing any state change in Iraq

00:09:12,820 --> 00:09:19,320
component notice no state changes at all

00:09:15,220 --> 00:09:22,750
I modified and updated automatically

00:09:19,320 --> 00:09:27,149
only by using relay those to do items

00:09:22,750 --> 00:09:30,490
and you can see here that you do list

00:09:27,149 --> 00:09:32,020
sudden update event and the to do list

00:09:30,490 --> 00:09:35,620
client current update the wind which is

00:09:32,020 --> 00:09:37,690
of course clear because a yeah I changed

00:09:35,620 --> 00:09:40,240
the to-do list and the to-do list for

00:09:37,690 --> 00:09:42,730
the client or with the client items but

00:09:40,240 --> 00:09:47,950
now I can also do things here for

00:09:42,730 --> 00:09:49,750
example I just press are checked and

00:09:47,950 --> 00:09:54,940
unchecked this to do add them from the

00:09:49,750 --> 00:09:59,709
client and here I did in a way that the

00:09:54,940 --> 00:10:03,000
server will not get any idea that I did

00:09:59,709 --> 00:10:08,440
that it's only for the client fields and

00:10:03,000 --> 00:10:10,420
you can see here the to-do list the do

00:10:08,440 --> 00:10:13,480
list of the original items doesn't get

00:10:10,420 --> 00:10:15,730
touched at all because here you see here

00:10:13,480 --> 00:10:17,890
that the Toulouse client is updated but

00:10:15,730 --> 00:10:22,270
only the Tallulah start a client is

00:10:17,890 --> 00:10:27,310
updated so getting this idea of how to

00:10:22,270 --> 00:10:31,300
do it just very close in this how this

00:10:27,310 --> 00:10:35,980
works in the just in the code here you

00:10:31,300 --> 00:10:37,930
just get this client field here and this

00:10:35,980 --> 00:10:39,579
get gets processed but it's to do

00:10:37,930 --> 00:10:42,130
handler which is showing a second and

00:10:39,579 --> 00:10:44,890
here are those fragments which get those

00:10:42,130 --> 00:10:46,660
data a pass down to the components where

00:10:44,890 --> 00:10:49,150
they are needed in the Technorati way

00:10:46,660 --> 00:10:52,740
and then I have here this to-do list

00:10:49,150 --> 00:10:52,740
somewhere yeah here and

00:10:53,930 --> 00:11:01,010
also the to-do list client and both of

00:10:57,890 --> 00:11:05,210
them have fragments inside for example

00:11:01,010 --> 00:11:07,279
if a to-do list client here has this

00:11:05,210 --> 00:11:09,500
client to this client to deuce is not

00:11:07,279 --> 00:11:09,860
defined on the server doesn't exist

00:11:09,500 --> 00:11:12,830
there

00:11:09,860 --> 00:11:19,070
it's only a field existing on the on the

00:11:12,830 --> 00:11:21,140
client and it's using those things to to

00:11:19,070 --> 00:11:24,140
populate it to the out this item list

00:11:21,140 --> 00:11:25,610
and you can do it in the same way as you

00:11:24,140 --> 00:11:31,910
would do it with the normal animal list

00:11:25,610 --> 00:11:32,540
so very easily done here so back to the

00:11:31,910 --> 00:11:35,660
slides

00:11:32,540 --> 00:11:39,050
why do we need that stuff or what can we

00:11:35,660 --> 00:11:42,980
exploit that and here comes the charting

00:11:39,050 --> 00:11:45,860
use case in mind we add a copic we

00:11:42,980 --> 00:11:48,710
currently build a charting component a

00:11:45,860 --> 00:11:51,710
very sophisticated one and advanced one

00:11:48,710 --> 00:11:55,790
and we had this problem that if you have

00:11:51,710 --> 00:12:01,520
really big data sets where one of those

00:11:55,790 --> 00:12:06,709
the x-axis especially is a date and time

00:12:01,520 --> 00:12:10,910
series we have first we have to pass we

00:12:06,709 --> 00:12:13,850
have to parse the data from the server

00:12:10,910 --> 00:12:16,459
make a moment chess object or a date of

00:12:13,850 --> 00:12:18,440
check or whatever out of it and then we

00:12:16,459 --> 00:12:22,279
have to build up the chart with it and

00:12:18,440 --> 00:12:29,690
every time we manipulate something for

00:12:22,279 --> 00:12:33,589
example to a slider change a slider or

00:12:29,690 --> 00:12:35,800
something and change the range of the of

00:12:33,589 --> 00:12:38,450
the chart everything gets rear-ended

00:12:35,800 --> 00:12:41,000
that's because we have to hold the data

00:12:38,450 --> 00:12:43,220
on a wrapper component to spread it over

00:12:41,000 --> 00:12:46,250
all components which need something from

00:12:43,220 --> 00:12:49,250
it from data and every time there's the

00:12:46,250 --> 00:12:52,400
went fired they up the wrapper which

00:12:49,250 --> 00:12:57,560
contains the parsed data for example for

00:12:52,400 --> 00:13:00,290
the date will introduce change as they

00:12:57,560 --> 00:13:01,820
change and this date change will fall

00:13:00,290 --> 00:13:04,890
down the whole component tree and

00:13:01,820 --> 00:13:06,940
trigger rerender for every component

00:13:04,890 --> 00:13:08,650
this is the normal way you can

00:13:06,940 --> 00:13:10,840
circumvent that a little bit by

00:13:08,650 --> 00:13:13,030
exploring this chute component up that

00:13:10,840 --> 00:13:16,120
feature of react but it's a very happy

00:13:13,030 --> 00:13:18,070
way and it does scale at all so why not

00:13:16,120 --> 00:13:20,340
coming up with another idea and the

00:13:18,070 --> 00:13:22,990
first idea which comes in mind is Redux

00:13:20,340 --> 00:13:25,900
why not using Redux and disconnect

00:13:22,990 --> 00:13:29,500
syntax and map state to prop thing or

00:13:25,900 --> 00:13:32,470
Apollo oops sorry

00:13:29,500 --> 00:13:35,340
and there you can do it if you have a

00:13:32,470 --> 00:13:38,470
tooltip and this or I have a mouse event

00:13:35,340 --> 00:13:41,170
which for example changes this tooltip

00:13:38,470 --> 00:13:43,900
thing here in this example the Redux

00:13:41,170 --> 00:13:48,070
story is updated the store update

00:13:43,900 --> 00:13:50,320
function connects this state this local

00:13:48,070 --> 00:13:53,110
state change in the store to props of

00:13:50,320 --> 00:13:55,540
the very specific component and only

00:13:53,110 --> 00:13:59,410
triggers re-render in this tooltip

00:13:55,540 --> 00:14:00,610
component which is obviously a

00:13:59,410 --> 00:14:06,520
performance boost for the whole

00:14:00,610 --> 00:14:09,040
component thing and you have if you if

00:14:06,520 --> 00:14:10,750
you do that consistently you can do that

00:14:09,040 --> 00:14:12,850
with the Polo you can do that with redux

00:14:10,750 --> 00:14:14,980
but now you can only do it also do it

00:14:12,850 --> 00:14:16,900
with relay and I think there's an

00:14:14,980 --> 00:14:20,200
advantage in doing it with relay now

00:14:16,900 --> 00:14:23,680
because it's much more it's easier much

00:14:20,200 --> 00:14:27,490
easier to to work with because it's

00:14:23,680 --> 00:14:29,320
basically no basically no boilerplate

00:14:27,490 --> 00:14:32,350
anymore you don't have to do anything

00:14:29,320 --> 00:14:35,890
just declaring this client field thing

00:14:32,350 --> 00:14:38,110
and update the handler or write the

00:14:35,890 --> 00:14:41,980
handler yourself and everything else is

00:14:38,110 --> 00:14:44,170
taken care of by relay itself and and it

00:14:41,980 --> 00:14:51,220
really works as you could see in this

00:14:44,170 --> 00:14:54,210
very easy example before yeah and yeah

00:14:51,220 --> 00:14:56,590
this is the demo I showed you before and

00:14:54,210 --> 00:14:57,940
yeah I have to show you another thing

00:14:56,590 --> 00:15:01,810
very shortly

00:14:57,940 --> 00:15:05,290
very very very want to end up is here

00:15:01,810 --> 00:15:07,990
this is a current chart of one of our

00:15:05,290 --> 00:15:10,900
products and there you have exactly this

00:15:07,990 --> 00:15:14,020
thing you have a slider which you can

00:15:10,900 --> 00:15:17,350
move and now there's several components

00:15:14,020 --> 00:15:21,580
which have to update it's the head

00:15:17,350 --> 00:15:23,710
the headline here and if you do this it

00:15:21,580 --> 00:15:27,370
has it is this component which reflects

00:15:23,710 --> 00:15:29,680
the last points here it's the it's the

00:15:27,370 --> 00:15:32,080
range here it's the graph itself it has

00:15:29,680 --> 00:15:34,630
to recalibrate it's because it's always

00:15:32,080 --> 00:15:36,730
starts at zero percent so the first

00:15:34,630 --> 00:15:38,710
value is always at zero percent so the

00:15:36,730 --> 00:15:40,780
whole crevice are recalibrated every

00:15:38,710 --> 00:15:42,970
time and if you have such things a

00:15:40,780 --> 00:15:45,820
complete rear end of everything which

00:15:42,970 --> 00:15:48,850
doesn't change is a it's it's not very

00:15:45,820 --> 00:15:51,160
performant and there this feature this

00:15:48,850 --> 00:15:54,940
brand new feature really comes in handy

00:15:51,160 --> 00:15:58,620
and yeah we had this prototyping phase

00:15:54,940 --> 00:16:00,940
now and it works so we implement it and

00:15:58,620 --> 00:16:05,430
yeah it's very interesting to work with

00:16:00,940 --> 00:16:07,840
that stuff it's it's undocumented so far

00:16:05,430 --> 00:16:16,000
which is a good sign that it's a cool

00:16:07,840 --> 00:16:19,300
thing at least for Facebook yeah that's

00:16:16,000 --> 00:16:21,660
for that and yeah I hand over to Daniel

00:16:19,300 --> 00:16:25,950
he also wants to say some things

00:16:21,660 --> 00:16:25,950

YouTube URL: https://www.youtube.com/watch?v=JIHKfVsjy-A


