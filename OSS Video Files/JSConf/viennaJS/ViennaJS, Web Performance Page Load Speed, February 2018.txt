Title: ViennaJS, Web Performance Page Load Speed, February 2018
Publication date: 2018-03-02
Playlist: viennaJS
Description: 
	Speaker: Roland SchÃ¼tz
Captions: 
	00:00:00,030 --> 00:00:05,190
today I want to talk about what web

00:00:02,760 --> 00:00:06,560
performance and to narrow it down

00:00:05,190 --> 00:00:10,080
because it's such a broad field

00:00:06,560 --> 00:00:13,519
specifically page load speed so how fast

00:00:10,080 --> 00:00:20,220
is your website till it first opens

00:00:13,519 --> 00:00:23,300
roughly why how and what to consider the

00:00:20,220 --> 00:00:26,580
first one is why why do we need that

00:00:23,300 --> 00:00:30,570
it's cool that's actually not for most

00:00:26,580 --> 00:00:34,590
developers like yeah if you need some

00:00:30,570 --> 00:00:37,530
reasons to tell your your boss or some

00:00:34,590 --> 00:00:40,020
marketing people there are loads of very

00:00:37,530 --> 00:00:44,129
clear statistics post from Google Amazon

00:00:40,020 --> 00:00:48,899
and others which show that a lot of

00:00:44,129 --> 00:00:51,629
people disappear if you have a bad page

00:00:48,899 --> 00:00:53,730
speed so if your site special mobile

00:00:51,629 --> 00:00:55,340
takes a long time to load they just go

00:00:53,730 --> 00:01:01,469
away

00:00:55,340 --> 00:01:05,129
yes also one second delay can mean up to

00:01:01,469 --> 00:01:09,330
20% less conversions so lots of money

00:01:05,129 --> 00:01:12,240
for big sites and yeah there are many

00:01:09,330 --> 00:01:14,070
more statistics like that you'll find

00:01:12,240 --> 00:01:19,020
lots of reasons how to convince here

00:01:14,070 --> 00:01:21,780
your boss how to test so there are many

00:01:19,020 --> 00:01:25,890
many different tools one of the more

00:01:21,780 --> 00:01:28,890
famous ones is Google PageSpeed and you

00:01:25,890 --> 00:01:31,049
can use it online or you can also use it

00:01:28,890 --> 00:01:33,000
as a Chrome extension so in the chrome

00:01:31,049 --> 00:01:36,780
developer tools there's an audit app and

00:01:33,000 --> 00:01:43,170
it leverages the page speed to give you

00:01:36,780 --> 00:01:45,119
feedback on your current site it ideally

00:01:43,170 --> 00:01:50,250
looks like this it gives you some

00:01:45,119 --> 00:01:52,229
statistics of what to optimize and how

00:01:50,250 --> 00:01:56,280
to optimize so if you have a page like

00:01:52,229 --> 00:01:59,149
this it gives you a score here it gives

00:01:56,280 --> 00:02:03,060
you a score for mobile and for desktop

00:01:59,149 --> 00:02:05,969
and it tells you here what you should

00:02:03,060 --> 00:02:10,080
improve and it tells you here what do

00:02:05,969 --> 00:02:12,690
you already have improved there's one

00:02:10,080 --> 00:02:13,180
very important thing here consider all

00:02:12,690 --> 00:02:16,180
these

00:02:13,180 --> 00:02:19,000
as recommendations they're not

00:02:16,180 --> 00:02:21,849
necessarily true I'll go into details

00:02:19,000 --> 00:02:26,280
more they are things you should check if

00:02:21,849 --> 00:02:32,230
it's good or not they might be fine

00:02:26,280 --> 00:02:35,769
then there's HP test it gives you so you

00:02:32,230 --> 00:02:36,519
enter a URL you get a result it runs a

00:02:35,769 --> 00:02:38,560
few times

00:02:36,519 --> 00:02:40,780
the ones at the top give you a rough

00:02:38,560 --> 00:02:45,760
idea if everything is good or not so

00:02:40,780 --> 00:02:48,489
good there are flaws to this one which

00:02:45,760 --> 00:02:50,889
is especially if you have a video if you

00:02:48,489 --> 00:02:52,750
have a video on the site at the top the

00:02:50,889 --> 00:02:56,109
whole statistics about low time and

00:02:52,750 --> 00:02:58,930
interactive or up because it

00:02:56,109 --> 00:03:00,760
considers so the video is always moving

00:02:58,930 --> 00:03:03,730
so it doesn't know when it's finished

00:03:00,760 --> 00:03:05,909
and also it waits till the whole video

00:03:03,730 --> 00:03:10,510
is loaded till it's considered loaded

00:03:05,909 --> 00:03:16,060
even if you stream the video so that's a

00:03:10,510 --> 00:03:20,590
small caveat yes this is a very general

00:03:16,060 --> 00:03:22,479
easy look to check you can the low time

00:03:20,590 --> 00:03:25,829
means basically how long does it take

00:03:22,479 --> 00:03:28,599
till your website is fully loaded the

00:03:25,829 --> 00:03:30,609
first bite means how long did your

00:03:28,599 --> 00:03:32,879
server application need to actually

00:03:30,609 --> 00:03:35,290
figure out what he wants to send you

00:03:32,879 --> 00:03:37,150
start rendering so the difference

00:03:35,290 --> 00:03:41,519
between first bite and start rendering

00:03:37,150 --> 00:03:44,889
is your CSS and JavaScript mainly and

00:03:41,519 --> 00:03:47,139
first interactive is also very strongly

00:03:44,889 --> 00:03:48,150
connected to JavaScript we'll go into

00:03:47,139 --> 00:03:51,280
details later

00:03:48,150 --> 00:03:53,739
so yeah mentioned it doesn't work if you

00:03:51,280 --> 00:03:57,699
have videos also one very good resource

00:03:53,739 --> 00:04:00,430
is if you use Google Analytics or pivec

00:03:57,699 --> 00:04:04,959
or one of these tools I use Google

00:04:00,430 --> 00:04:10,150
Analytics as example it tracks real user

00:04:04,959 --> 00:04:14,169
there so you can actually see how it

00:04:10,150 --> 00:04:15,849
behaved on real users and and yeah which

00:04:14,169 --> 00:04:18,519
is also interesting because it doesn't

00:04:15,849 --> 00:04:21,489
give you only your use case but it runs

00:04:18,519 --> 00:04:22,840
on Bill users also there is a new tool

00:04:21,489 --> 00:04:26,610
from Google called

00:04:22,840 --> 00:04:30,240
winning on mobile which gives you

00:04:26,610 --> 00:04:34,380
test data from from Google Chrome so in

00:04:30,240 --> 00:04:36,540
chrome if you say share my my data it

00:04:34,380 --> 00:04:41,550
will use this data to tell you how fast

00:04:36,540 --> 00:04:58,020
some websites are it's called winning on

00:04:41,550 --> 00:05:00,660
mobile I don't have any slides talking

00:04:58,020 --> 00:05:02,910
about page speed but I think it's by my

00:05:00,660 --> 00:05:06,750
notebook the better is quite almost

00:05:02,910 --> 00:05:09,210
empty yeah it's called Apted if you

00:05:06,750 --> 00:05:13,350
don't sit here just winning on mobile

00:05:09,210 --> 00:05:17,850
it's I think it doesn't do anything here

00:05:13,350 --> 00:05:21,120
yeah and it gives you real user data

00:05:17,850 --> 00:05:21,840
this is also already integrated into the

00:05:21,120 --> 00:05:23,970
PageSpeed

00:05:21,840 --> 00:05:26,070
so if you use PageSpeed on a domain

00:05:23,970 --> 00:05:37,800
where it has data it will show it to you

00:05:26,070 --> 00:05:40,620
in the top so this part here where it

00:05:37,800 --> 00:05:43,680
says how long your site takes compared

00:05:40,620 --> 00:05:47,430
to others and and this one here where it

00:05:43,680 --> 00:05:50,729
says unavailable in in my case this is

00:05:47,430 --> 00:05:53,900
the data from Google Chrome reports post

00:05:50,729 --> 00:05:53,900
on mobile and on desktop

00:05:54,350 --> 00:05:59,640
yes and so how to optimize I'm

00:05:57,600 --> 00:06:02,610
mentioning a few things on the server

00:05:59,640 --> 00:06:04,800
but we're not server guys will not talk

00:06:02,610 --> 00:06:08,280
about that's too much the first thing is

00:06:04,800 --> 00:06:09,960
you need to send out static HTML so if

00:06:08,280 --> 00:06:12,150
you have a react app if you have a angle

00:06:09,960 --> 00:06:15,210
app something like that you somehow need

00:06:12,150 --> 00:06:18,419
and there are many tools out that you

00:06:15,210 --> 00:06:21,090
render a first version on the server and

00:06:18,419 --> 00:06:24,380
send out some HTML and then the

00:06:21,090 --> 00:06:30,450
JavaScript should kick in and makes it

00:06:24,380 --> 00:06:33,360
yeah interactive the second of course

00:06:30,450 --> 00:06:37,169
you need SSL everybody who yeah

00:06:33,360 --> 00:06:39,630
you need SSL and you should consider how

00:06:37,169 --> 00:06:41,820
often you redirect someone before

00:06:39,630 --> 00:06:43,500
actually see the first page so many

00:06:41,820 --> 00:06:46,860
times your Enter

00:06:43,500 --> 00:06:55,380
I don't know example org then you get

00:06:46,860 --> 00:06:58,730
redirected to www.example.com l so users

00:06:55,380 --> 00:07:02,910
to redirect and that's valuable time

00:06:58,730 --> 00:07:05,700
actually most pages are redirected so

00:07:02,910 --> 00:07:10,560
this is very bad try to avoid it as much

00:07:05,700 --> 00:07:13,470
as possible and also try if it really is

00:07:10,560 --> 00:07:15,720
necessary try to do it on a server level

00:07:13,470 --> 00:07:22,350
like nginx or Apache and not on the

00:07:15,720 --> 00:07:25,290
application layer damn it

00:07:22,350 --> 00:07:27,210
my battery yes and the next thing this

00:07:25,290 --> 00:07:29,850
you you should leverage browser caching

00:07:27,210 --> 00:07:34,140
so you can configure how long resources

00:07:29,850 --> 00:07:37,680
are cached and that usually should be

00:07:34,140 --> 00:07:39,840
above one day so if you deliver CSS or

00:07:37,680 --> 00:07:42,900
JavaScript or images they normally don't

00:07:39,840 --> 00:07:45,360
change so put in long headers it's even

00:07:42,900 --> 00:07:47,490
good to for images or things like that

00:07:45,360 --> 00:07:50,910
to make like a week or a year or

00:07:47,490 --> 00:07:53,280
whatever you can do and if you have your

00:07:50,910 --> 00:07:57,330
code if you have your images on

00:07:53,280 --> 00:08:00,090
something like Amazon obvious or Google

00:07:57,330 --> 00:08:02,960
Cloud every time you change the image it

00:08:00,090 --> 00:08:09,150
creates a new URL anyway so you can

00:08:02,960 --> 00:08:11,580
cache it for as long as you want and if

00:08:09,150 --> 00:08:13,440
you use something like type kits it was

00:08:11,580 --> 00:08:17,300
an example here many times there's an

00:08:13,440 --> 00:08:23,370
optimization to say use long caching

00:08:17,300 --> 00:08:27,990
times and here's the great example of

00:08:23,370 --> 00:08:29,970
why Google pitch spades peach spade only

00:08:27,990 --> 00:08:32,010
gives you suggestions because it

00:08:29,970 --> 00:08:35,130
actually triggers often on their own

00:08:32,010 --> 00:08:38,729
code so here it tells me that the Google

00:08:35,130 --> 00:08:43,289
I fin frame API should be modified it's

00:08:38,729 --> 00:08:45,300
not you'll also get a warning that

00:08:43,289 --> 00:08:47,460
Google Analytics should be cached for

00:08:45,300 --> 00:08:49,680
longer than two hours and it's on the

00:08:47,460 --> 00:08:51,690
cache for two hours so you can't really

00:08:49,680 --> 00:08:53,020
do things about that that's why you

00:08:51,690 --> 00:08:54,940
normally will not

00:08:53,020 --> 00:08:56,650
hundred percent score in Google

00:08:54,940 --> 00:09:01,090
PageSpeed because there are other

00:08:56,650 --> 00:09:03,430
dependencies same with bmail and many

00:09:01,090 --> 00:09:07,750
others you'll you can change their

00:09:03,430 --> 00:09:10,750
servers right and use a CDN it's quite

00:09:07,750 --> 00:09:14,790
cheap already you can pay 10 20 bucks

00:09:10,750 --> 00:09:18,220
per month and get a good CDN and it

00:09:14,790 --> 00:09:23,050
improves your page speed as well so

00:09:18,220 --> 00:09:24,010
front end the first obvious one because

00:09:23,050 --> 00:09:29,200
it's so much

00:09:24,010 --> 00:09:31,570
data size optimize your images early it

00:09:29,200 --> 00:09:32,230
was easy you just compress the image and

00:09:31,570 --> 00:09:37,030
you're done

00:09:32,230 --> 00:09:40,690
but we have these small and so

00:09:37,030 --> 00:09:42,340
you need to you need to use responsive

00:09:40,690 --> 00:09:46,030
images there are two ways of using

00:09:42,340 --> 00:09:48,880
responsive images the first one is with

00:09:46,030 --> 00:09:51,190
sizes and source sets we actually find

00:09:48,880 --> 00:09:53,500
many different sizes of the same image

00:09:51,190 --> 00:09:58,240
and the browser just figures out which

00:09:53,500 --> 00:10:00,810
one it needs so here if I I'm defining

00:09:58,240 --> 00:10:04,360
that the the size of the image is always

00:10:00,810 --> 00:10:06,820
50% of the browser width and the browser

00:10:04,360 --> 00:10:10,300
itself knows how big it is so it can

00:10:06,820 --> 00:10:12,340
divide that by two it also knows if it

00:10:10,300 --> 00:10:14,620
uses a Retina display or something like

00:10:12,340 --> 00:10:16,960
that and it automatically chooses the

00:10:14,620 --> 00:10:19,090
right size of the image and then you

00:10:16,960 --> 00:10:23,080
just give it many different options of

00:10:19,090 --> 00:10:26,650
image sizes and your browser uses the

00:10:23,080 --> 00:10:28,510
right image that's easy to optimize if

00:10:26,650 --> 00:10:31,240
you want to show different images on

00:10:28,510 --> 00:10:33,940
mobile and a desktop you can also use

00:10:31,240 --> 00:10:38,290
the picture element which allows you to

00:10:33,940 --> 00:10:39,640
do art direction I'm not going into that

00:10:38,290 --> 00:10:43,960
too much because I actually gave a

00:10:39,640 --> 00:10:45,670
lightning talk about that already if you

00:10:43,960 --> 00:10:47,770
have an image with this full width on a

00:10:45,670 --> 00:10:51,210
browser you should have at least six

00:10:47,770 --> 00:10:56,260
different sizes for that image I

00:10:51,210 --> 00:10:59,740
typically use the biggest size around

00:10:56,260 --> 00:11:03,310
2000 pixel it depends a bit on how much

00:10:59,740 --> 00:11:05,020
you care about quality versus speed but

00:11:03,310 --> 00:11:06,279
you need a lot of different image

00:11:05,020 --> 00:11:08,860
variations

00:11:06,279 --> 00:11:12,550
and each of those images also need to be

00:11:08,860 --> 00:11:18,040
compressed so this is normally either

00:11:12,550 --> 00:11:23,860
your workflow like grunt gallop or

00:11:18,040 --> 00:11:27,759
whatever or your server and also you

00:11:23,860 --> 00:11:31,120
should use bad P but P is a kind of new

00:11:27,759 --> 00:11:34,959
image format it's pushed by by Google

00:11:31,120 --> 00:11:36,749
and if you use it if you use for example

00:11:34,959 --> 00:11:41,350
Google Chrome

00:11:36,749 --> 00:11:43,959
you should detect that your your server

00:11:41,350 --> 00:11:49,930
should detect that and deliver bappy

00:11:43,959 --> 00:11:52,209
images they are way way smaller and yeah

00:11:49,930 --> 00:11:53,499
many many services give you that out of

00:11:52,209 --> 00:11:56,319
the box if you use something cloud

00:11:53,499 --> 00:12:00,610
filler you just make one check box use

00:11:56,319 --> 00:12:04,449
that P and you're done and coming back

00:12:00,610 --> 00:12:07,149
to Google PageSpeed Google PageSpeed

00:12:04,449 --> 00:12:10,019
expects you to do very very aggressive

00:12:07,149 --> 00:12:13,149
image compression and if you have some

00:12:10,019 --> 00:12:16,899
design focused websites you might not

00:12:13,149 --> 00:12:20,500
want to do it that aggressive so really

00:12:16,899 --> 00:12:23,939
find your own balance here if you do it

00:12:20,500 --> 00:12:23,939
like Google will be very very aggressive

00:12:25,290 --> 00:12:28,860
which comes to

00:12:33,640 --> 00:12:38,890
no I don't have it on this page on some

00:12:36,820 --> 00:12:40,990
pages it triggers because it expects the

00:12:38,890 --> 00:12:47,079
image to be really really strongly

00:12:40,990 --> 00:12:49,120
compressed for videos to compress the

00:12:47,079 --> 00:12:51,190
video just use a tool called handbrake

00:12:49,120 --> 00:12:52,930
it's very easy just use the default

00:12:51,190 --> 00:12:57,370
settings and you'll be surprised how

00:12:52,930 --> 00:13:00,399
much space you can save and normally

00:12:57,370 --> 00:13:03,250
deliver them them as mp4 that cow goes

00:13:00,399 --> 00:13:06,790
almost every browser if you have really

00:13:03,250 --> 00:13:11,040
big size big sites you might need four

00:13:06,790 --> 00:13:15,010
backs but the optimal solution is mp4

00:13:11,040 --> 00:13:17,709
always provide a poster image so the the

00:13:15,010 --> 00:13:20,050
browser if you use the the video tag and

00:13:17,709 --> 00:13:22,029
you define a poster image what the

00:13:20,050 --> 00:13:24,360
browser does it first loads that picture

00:13:22,029 --> 00:13:27,810
and shows it till the video is ready

00:13:24,360 --> 00:13:31,320
which is really helpful and to optimize

00:13:27,810 --> 00:13:35,740
videos which are actually running on

00:13:31,320 --> 00:13:39,459
automatically if you set muted to true

00:13:35,740 --> 00:13:42,279
and autoplay the true it can run on your

00:13:39,459 --> 00:13:44,560
mobile phone so you you can have videos

00:13:42,279 --> 00:13:47,529
running on your mobile basically every

00:13:44,560 --> 00:13:50,500
modern mobile so no need anymore to use

00:13:47,529 --> 00:13:54,750
these compressed chief formats which are

00:13:50,500 --> 00:13:54,750
three times four times bigger than video

00:13:57,510 --> 00:14:03,010
the next one pretty obvious for you

00:14:00,370 --> 00:14:05,290
developers reduce the amount of

00:14:03,010 --> 00:14:11,050
resources you use and magnify JavaScript

00:14:05,290 --> 00:14:15,760
and CSS this is a trend of how big site

00:14:11,050 --> 00:14:17,860
a websites go and you'll see right now

00:14:15,760 --> 00:14:21,010
the typical size of a web site is around

00:14:17,860 --> 00:14:25,149
four megabytes and it should be between

00:14:21,010 --> 00:14:27,250
one or two typically so there's lots of

00:14:25,149 --> 00:14:31,140
improved possibility for yourself to

00:14:27,250 --> 00:14:31,140
position yourself as a fast web site

00:14:34,440 --> 00:14:43,240
yes here it gets a bit more difficult

00:14:38,560 --> 00:14:45,130
Google heavily focuses on limiting

00:14:43,240 --> 00:14:49,690
render blocking code render blocking

00:14:45,130 --> 00:14:51,670
means if your HTML is fully loaded is it

00:14:49,690 --> 00:14:53,709
able to show you something or is there

00:14:51,670 --> 00:14:55,690
some JavaScript in between some

00:14:53,709 --> 00:14:57,459
JavaScript in the head or some CSS in

00:14:55,690 --> 00:15:00,550
the head which blocks the rendering

00:14:57,459 --> 00:15:02,170
until it's loaded for CSS you normally

00:15:00,550 --> 00:15:06,130
need it because you need to have your

00:15:02,170 --> 00:15:06,910
CSS before it renders the page for

00:15:06,130 --> 00:15:08,980
JavaScript

00:15:06,910 --> 00:15:11,290
the first rendering should be able

00:15:08,980 --> 00:15:13,839
without JavaScript and you should put

00:15:11,290 --> 00:15:17,139
your JavaScript in the footer or define

00:15:13,839 --> 00:15:21,490
it as async which is common best

00:15:17,139 --> 00:15:24,579
practice yeah you should prioritize

00:15:21,490 --> 00:15:27,660
visible content that means if you have a

00:15:24,579 --> 00:15:30,610
list of I don't know hundred entries

00:15:27,660 --> 00:15:33,550
only the first one should load the real

00:15:30,610 --> 00:15:36,480
images and then usually lazy loading or

00:15:33,550 --> 00:15:40,720
use some just hundred kilobyte images

00:15:36,480 --> 00:15:44,560
and blur them so your page loads faster

00:15:40,720 --> 00:15:47,680
and inline CSS is something which is

00:15:44,560 --> 00:15:50,110
very very effective and it means extra

00:15:47,680 --> 00:15:53,130
effort for you the basic idea of

00:15:50,110 --> 00:15:56,050
inlining is that instead of having a

00:15:53,130 --> 00:16:00,459
separate CSS file which you link to you

00:15:56,050 --> 00:16:01,029
you inline that sees us and if your page

00:16:00,459 --> 00:16:03,510
is bigger

00:16:01,029 --> 00:16:06,069
you should only inline critical CSS

00:16:03,510 --> 00:16:09,970
inlining critical CSS can be very

00:16:06,069 --> 00:16:13,870
complicated there's a PageSpeed module

00:16:09,970 --> 00:16:15,940
for those Apache and nginx which will do

00:16:13,870 --> 00:16:18,190
it for you out of the box

00:16:15,940 --> 00:16:19,600
um just make sure it really works for

00:16:18,190 --> 00:16:24,010
you there are some edge cases which are

00:16:19,600 --> 00:16:26,410
not covered but that's that's an optimal

00:16:24,010 --> 00:16:30,010
solution another good solution is to

00:16:26,410 --> 00:16:33,160
totally inline all your CSS which works

00:16:30,010 --> 00:16:35,649
if if your CSS is in a reasonable size

00:16:33,160 --> 00:16:37,839
but try it out in your browser yourself

00:16:35,649 --> 00:16:39,959
and see if it gets actually faster or

00:16:37,839 --> 00:16:39,959
slower

00:16:41,339 --> 00:16:49,360
yes so that was a very high-level talk I

00:16:46,990 --> 00:16:53,200
would like to have your feedback if I

00:16:49,360 --> 00:16:55,180
should go in one of these topics in

00:16:53,200 --> 00:16:57,630
detail I could talk about each of these

00:16:55,180 --> 00:17:01,779
topics probably for 20 minutes

00:16:57,630 --> 00:17:03,760
as a more high-level consideration you

00:17:01,779 --> 00:17:07,000
always have to find a way to tween

00:17:03,760 --> 00:17:10,059
features you want to support the

00:17:07,000 --> 00:17:13,660
development time to make that fast and

00:17:10,059 --> 00:17:16,780
the page speed so it would be great if

00:17:13,660 --> 00:17:21,520
your website loads in one second and has

00:17:16,780 --> 00:17:23,799
a huge amount of features and it doesn't

00:17:21,520 --> 00:17:27,309
make sense in most of your projects

00:17:23,799 --> 00:17:29,410
because you're not Google right so just

00:17:27,309 --> 00:17:32,500
try to find a balance but make sure your

00:17:29,410 --> 00:17:34,390
website loads below three seconds if if

00:17:32,500 --> 00:17:39,370
it gets above three seconds you should

00:17:34,390 --> 00:17:42,820
really consider taking more time on the

00:17:39,370 --> 00:17:44,440
speed and less time on the features and

00:17:42,820 --> 00:17:46,390
also figure out some metrics in your

00:17:44,440 --> 00:17:48,309
company they might be different from

00:17:46,390 --> 00:17:51,700
company to company if you have news

00:17:48,309 --> 00:17:54,760
websites you need it faster if you have

00:17:51,700 --> 00:17:57,280
a website where people load it once and

00:17:54,760 --> 00:18:00,429
then spend half an hour on it it might

00:17:57,280 --> 00:18:02,020
be possible that it's slower but find a

00:18:00,429 --> 00:18:06,250
metric and then really stick to it so

00:18:02,020 --> 00:18:08,620
have an automatic test when you break it

00:18:06,250 --> 00:18:11,169
it doesn't deploy because that's the

00:18:08,620 --> 00:18:14,580
only option that you really take the

00:18:11,169 --> 00:18:17,450
time to me to optimize for speed

00:18:14,580 --> 00:18:21,059
all right thank you

00:18:17,450 --> 00:18:21,059

YouTube URL: https://www.youtube.com/watch?v=grHQoOdy7mo


