Title: Franziska Hinkelmann: Performance Profiling for V8 - JSConf.Asia 2016
Publication date: 2016-12-04
Playlist: JSConf.Asia 2016
Description: 
	Do you care about performance? Memory leaks, megamorphic cache misses, garbage collection jank, and deoptimizations can slow your app down. Chrome’s JavaScript engine, V8, ships with its own profiling tools that can identify such problems. We’ll dive deep into the inner workings of V8 to better understand what these terms mean - and how to avoid them. You’ll learn to identify and fix low-level JavaScript performance issues using several V8 developer tools.

Franziska is a software engineer at Google Germany. She works on the Chrome V8 team, focusing on anything related to Node.js.
She regularly teaches Node.js courses at the International Summer University for Women in Informatics and is a former organizer of the PHP User Group Munich.


JSConf.Asia - Capitol Theatre, Singapore - 26 November 2016.

Source: https://2016.jsconf.asia/
Slides: https://github.com/fhinkel/PerformanceProfiling/blob/master/JSConfAsia2016.pdf

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:20,029 --> 00:00:25,359
So we started off today with gPU programming and we're now moving on to compilers nice

00:00:27,199 --> 00:00:33,219
Um my name is Francisca Hinkelman. I'm a software engineer on the Chrome V8 team

00:00:33,220 --> 00:00:38,740
I'm also a node.js core collaborator and I talk about Profiling V8. I

00:00:44,150 --> 00:00:50,619
Think we can all agree that Javascript is incredibly powerful like not only in what it can do

00:00:50,620 --> 00:00:52,930
But also in how fast it can do it

00:00:53,870 --> 00:00:56,320
it's amazing that the Javascript a

00:00:56,900 --> 00:01:00,129
Scripting language you can run enterprise note service

00:01:00,130 --> 00:01:07,809
And you can run websites with these huge complex frameworks like a Facebook website or linkedin or YouTube and all that was a scripting language

00:01:08,030 --> 00:01:09,740
and

00:01:09,740 --> 00:01:11,949
the performance of Javascript, or

00:01:12,829 --> 00:01:18,339
the possibility to run such huge applications with Javascript of course comes down to the

00:01:18,859 --> 00:01:24,189
Javascript engines the virtual machines that take your source code and turn it into an executable

00:01:24,560 --> 00:01:30,909
Machine code make your website dynamic um so in this start, we'll look at V8

00:01:30,909 --> 00:01:33,068
that's the Javascript engine in Chrome and

00:01:33,649 --> 00:01:38,349
What it does to make Javascript so fast and how you can profile these optimizations?

00:01:40,460 --> 00:01:44,739
So to put V8 into context the eight is not the only Javascript engine

00:01:46,039 --> 00:01:51,159
The the Major Browsers all have their own Javascript engine we have check of our core that is in

00:01:51,439 --> 00:01:56,828
Microsoft Edge you might have heard kind of talk yesterday. We have Javascript core and Safari

00:01:57,049 --> 00:02:03,278
We have spider monkey and various other monkeys and firefox and we have V8 in chrome

00:02:03,950 --> 00:02:10,149
If you're familiar with nodejs that also runs with a javascript engine your default node comes with V8

00:02:10,149 --> 00:02:12,149
but you can also build it with Jack Krak for

00:02:14,250 --> 00:02:17,059
Electron refer talks about electrons and status

00:02:17,760 --> 00:02:21,709
Chromium and nodejs it has a V8 instance

00:02:21,709 --> 00:02:26,479
And then there's other engines that are smaller if you took yun talks there

00:02:26,480 --> 00:02:30,320
They are very good for iot devices because they're much much smaller

00:02:30,320 --> 00:02:34,339
They are not as fast as the big ones, but you can fit them on your little micro controllers

00:02:34,410 --> 00:02:37,309
So duct tape or Javascript are examples there

00:02:39,060 --> 00:02:40,290
in

00:02:40,290 --> 00:02:44,150
In order to talk successfully about program about profiling

00:02:44,819 --> 00:02:49,909
In this talk will look a little bit of some of the internal key concepts of V8

00:02:50,370 --> 00:02:54,110
So I'm hoping to give you some insight into this black box um

00:02:54,750 --> 00:02:57,559
what we eight is doing under the hood how you go from

00:02:58,140 --> 00:03:00,739
Source code to really fast machine code

00:03:01,260 --> 00:03:05,390
And I'll show you some some tools. How you can Profile V8

00:03:05,390 --> 00:03:07,550
so not profile Javascript on A

00:03:07,739 --> 00:03:12,679
Higher level that would be probably more useful if you want the first performance gains

00:03:12,690 --> 00:03:17,449
But really down at the Low level compiler level Javascript engine

00:03:18,810 --> 00:03:24,829
The the tools I'm showing you on the one hand. They're tools that we use internally at V8

00:03:24,829 --> 00:03:29,539
So if we want to make it faster if we want to figure out, why something slow, what is slow?

00:03:29,540 --> 00:03:35,509
Yeah, those are the tools we use and then we change we ade internally to make it faster

00:03:35,510 --> 00:03:40,340
but of course you can also use these tools to compile to profile your code and

00:03:41,130 --> 00:03:43,759
Maybe make some changes there to gain performance

00:03:47,220 --> 00:03:51,949
If you've used the chrome dev tools you might have seen there is a profile tab

00:03:51,950 --> 00:03:57,320
So you have two console and you can inspect your hTML and css, but there's also a profile

00:03:57,989 --> 00:04:03,589
profile Tab where you can record cPU profiles or heap snapshots and

00:04:04,230 --> 00:04:09,799
When you do that for Javascript, or you can also do it for node.js server application?

00:04:10,590 --> 00:04:13,009
You you start your app you load your website

00:04:13,010 --> 00:04:19,459
You start recording after while you stop it? And then you you get a profile of which functions are being run a lot

00:04:20,010 --> 00:04:25,909
So I did this year for compiling some typescript you see which function is spent

00:04:26,720 --> 00:04:32,239
time being spent on but one thing you see he unfortunately is this little exclamation mark

00:04:32,550 --> 00:04:35,060
Which of course means some kind of trouble?

00:04:35,910 --> 00:04:43,339
In this case the function is related to gets a warning from the profiler saying not optimized and the reason is

00:04:43,620 --> 00:04:45,620
optimized too many times

00:04:45,720 --> 00:04:47,720
so the next

00:04:47,760 --> 00:04:53,149
22 minutes, I want to dig into what does this optimization mean?

00:04:53,150 --> 00:04:57,500
What are we trying to optimize and why is this not happening or possible in this case?

00:04:58,320 --> 00:05:00,060
so

00:05:00,060 --> 00:05:03,440
Let's start with some fundamentals. I guess um

00:05:05,400 --> 00:05:11,390
Javascript is dynamically typed. It's not statically typed like C++. Or what you have arrest

00:05:11,390 --> 00:05:17,779
It's dynamically typed that means the types of your variables can change all the time and the compiler

00:05:17,970 --> 00:05:19,950
only influenced at runtime

00:05:19,950 --> 00:05:21,030
What?

00:05:21,030 --> 00:05:26,329
What kind of object or type it has it doesn't know that when I just sees the swiss code?

00:05:26,910 --> 00:05:28,910
um

00:05:29,430 --> 00:05:33,859
Here's a very simple example. It's an object defined as an object literal

00:05:34,380 --> 00:05:40,459
X is 1 and y is 1 do you know what the properties of this object are I?

00:05:41,970 --> 00:05:45,799
Mean it's it's very obvious x and y clearly our properties

00:05:46,080 --> 00:05:52,399
But are they do the only properties know this object also gets all the properties of the object

00:05:53,010 --> 00:05:58,069
Prototype or if you change the prototype it would get all the properties of that new prototype

00:05:59,610 --> 00:06:05,750
Ok so we figure out properties are x and y and everything from the prototype chain can the compiler rely on this information?

00:06:06,600 --> 00:06:10,369
No, because you can at any time delete properties of an object

00:06:10,770 --> 00:06:16,310
So this object that you have can change all the time and only at runtime can the compiler say yes?

00:06:16,310 --> 00:06:18,859
It has an x yes. It has y or not

00:06:19,440 --> 00:06:21,919
And of course you can also add properties

00:06:22,200 --> 00:06:29,059
So this type information is not available up front it's it's dynamic and the compiler always has to infer it

00:06:30,570 --> 00:06:31,919
and

00:06:31,919 --> 00:06:35,899
So since Java Script is dynamically typed. What all the

00:06:36,599 --> 00:06:41,688
Modern Javascript engines do those that care about performance those that we use under browsers

00:06:41,689 --> 00:06:45,259
Not necessarily on the smallest iot devices is so-called

00:06:45,869 --> 00:06:47,869
just-in-Time compilation

00:06:47,969 --> 00:06:51,858
So we compile as we execute a program in

00:06:52,649 --> 00:06:58,789
C++ this is very different if you've ever done any C++. It is clearly ahead of time compilation

00:06:59,429 --> 00:07:03,469
because you actually do two separate steps you first compile it and

00:07:04,019 --> 00:07:07,699
You add a little bit and then you get an executable that you can run

00:07:08,039 --> 00:07:12,199
There's no such thing in Javascript you you just run it. I mean you might

00:07:12,869 --> 00:07:18,499
Transpile it first depending what you use, but there's no separate compilation step from the execution

00:07:20,459 --> 00:07:27,709
But for Javascript because we don't have any type information anything can change all the time we need to do just-in-time compilation

00:07:34,499 --> 00:07:38,689
I'm gonna look at this example a lot. It's it's super simple

00:07:38,689 --> 00:07:42,439
it's a function that I called load and all it does it's it's

00:07:42,569 --> 00:07:47,658
Accessing a property you wouldn't even put that in a function usually because it doesn't do much

00:07:47,729 --> 00:07:51,888
but it's just return object that x given a parameter x and

00:07:52,169 --> 00:07:57,588
Obviously you do property access all the time in Javascript even if you do console dot lock

00:07:58,139 --> 00:08:01,909
Console is your object and blog as your property so it's just

00:08:02,129 --> 00:08:08,419
Everywhere you can't do without property access and this looks super simple you have it all the time. It looks very harmless

00:08:08,419 --> 00:08:11,118
You know what it does, but if you think about it carefully

00:08:11,519 --> 00:08:18,888
what are all the things that could happen here as to return value well as the compiler tries to get the value object at x

00:08:18,889 --> 00:08:20,189
um

00:08:20,189 --> 00:08:24,379
First of all if you put an undefined as a parameter, it'll throw a type error

00:08:26,549 --> 00:08:30,049
The object might not have two property x so it would be undefined

00:08:31,829 --> 00:08:38,929
Or it might be that the object itself doesn't have an own property x but somewhere up the prototype chain x was defined

00:08:39,089 --> 00:08:43,938
so the compiler would have to look up recursively the prototype chain until it finds x

00:08:45,089 --> 00:08:48,648
Object might be a proxy so we have to call it to get handler

00:08:50,310 --> 00:08:57,089
And x might have been defined and eggman script sic style as an exerciser script where you have to call the get function

00:08:57,089 --> 00:09:00,148
So you can have any kind of arbitrary side effects?

00:09:00,670 --> 00:09:07,620
So for the compiler this very simple object at x is is a lot of stuff it has to worry about

00:09:08,860 --> 00:09:10,860
um

00:09:11,110 --> 00:09:13,979
This is a snippet from the Acma script

00:09:14,529 --> 00:09:19,258
specification don't be worried about reading all this, but this is how the

00:09:19,930 --> 00:09:22,349
Ordinary get us what they call it is Define

00:09:24,220 --> 00:09:29,730
And you can tell this is quite involved for just a tiny little object that x down here

00:09:34,779 --> 00:09:38,219
So since we have property accesses everywhere on the program

00:09:38,230 --> 00:09:41,009
We eight needs to do a little trick because we can't afford

00:09:41,350 --> 00:09:45,749
To do these steps every time you do a console that log or any kind of access

00:09:46,329 --> 00:09:48,009
So let me show you what you do

00:09:48,009 --> 00:09:49,920
So here's the simple load function

00:09:49,920 --> 00:09:54,389
And we call it with this very simple object that is just a regular object

00:09:54,389 --> 00:09:59,639
no changes on the prototype chain it has one property x and it's an integer, so

00:10:00,189 --> 00:10:04,469
When we when the compiler encounters is this call of load?

00:10:05,769 --> 00:10:07,769
Well, we do implement

00:10:08,829 --> 00:10:13,619
Correct atmosphere Javascript, so the compiler has to follow these steps on a specification

00:10:14,139 --> 00:10:19,979
Which is quite involved and eventually it figures out okay? It's a value to script. I have to return this value

00:10:19,980 --> 00:10:22,709
Which is at a certain offset of this object?

00:10:23,559 --> 00:10:29,759
Okay, so we found object at x and now what we do is. We cache this information and

00:10:30,850 --> 00:10:33,569
What we are caching is we're caching for

00:10:34,179 --> 00:10:36,299
these kind of objects

00:10:36,819 --> 00:10:38,819
This is how you get the value?

00:10:39,009 --> 00:10:45,628
So we're not caching that specific object and the 5V caching objects that look exactly like this

00:10:46,389 --> 00:10:48,389
simple Literal in this case

00:10:48,999 --> 00:10:50,999
we know the

00:10:51,309 --> 00:10:57,989
Value for x is at a constant offset to our object, so that's some V8 internal that we know where it's stored

00:10:57,990 --> 00:11:03,479
but but we know any object that looks like this, so just one property it's called x and it's an

00:11:04,270 --> 00:11:06,660
This is how we get to the value if we needed?

00:11:07,420 --> 00:11:11,819
And we associate that cash with the call with this property access

00:11:13,780 --> 00:11:16,769
So when we later in the program called load again?

00:11:16,810 --> 00:11:18,810
We're calling it now as a different object

00:11:18,850 --> 00:11:25,350
this one has the object x is 17 and not 5 but they look very much the same if you think about the shape of

00:11:25,350 --> 00:11:26,800
these objects

00:11:26,800 --> 00:11:33,689
So when we do this again, and we get to this property access um well. We're being smart now

00:11:33,690 --> 00:11:40,230
We check the cache first to see if maybe we have already figured out how to do that um and we realize yes

00:11:40,230 --> 00:11:45,389
We have exactly these kind of objects we have an entry full objects that look like this in the cache

00:11:45,390 --> 00:11:47,350
so let's just get the

00:11:47,350 --> 00:11:53,639
Offset because that is where that value is and we furr can forget about these 10 steps that otherwise. We'd have to do

00:11:56,530 --> 00:12:02,910
Ok and um these caches the the former name is inline caches. We shortcut them to ICs

00:12:03,340 --> 00:12:07,439
So if you have a look at the 8 source code, there's a lot of ICs everywhere

00:12:09,580 --> 00:12:13,740
You have an IC associated to every property access

00:12:14,140 --> 00:12:19,350
Not to the function or the object but every single access so in this case you have two

00:12:20,050 --> 00:12:26,159
Completely separate inline caches for both these lines even though it looks the same and it's the same function

00:12:26,650 --> 00:12:30,389
and what you store in an IC is the keys a

00:12:31,180 --> 00:12:38,849
Shape of objects and the values are the fast path how to get that value?

00:12:39,790 --> 00:12:40,770
So in our case

00:12:40,770 --> 00:12:46,980
We're storing what the object looks like and we had to get to 5 or a 17 over my axis

00:12:47,010 --> 00:12:50,819
And when I say shape of objects internally we call this

00:12:51,220 --> 00:12:57,989
map of an object and sometimes it's also referred to as a hidden class so since Javascript doesn't have

00:12:58,510 --> 00:13:03,180
Classes, or didn't have classes until ES6 those are very different we call it

00:13:03,640 --> 00:13:07,680
We give objects internally such a hidden internal class

00:13:09,040 --> 00:13:14,310
Ok, so this is one way how we speed up the aid to do property accesses faster

00:13:15,520 --> 00:13:20,860
That would not be yet to have a reactor immigrant in any reasonable time

00:13:23,090 --> 00:13:27,819
What what any modern compiler has these days is at least?

00:13:28,250 --> 00:13:32,320
two compilers a basic one and an optimizing compiler

00:13:34,430 --> 00:13:41,259
in V8 we have actually two optimizing compilers at the moment the referred to as

00:13:41,660 --> 00:13:45,369
crankshaft and Turbofan if you've ever come across that um

00:13:45,590 --> 00:13:51,970
And so how that works is when you first run your program the basic compiler is trying to compile your code

00:13:52,370 --> 00:13:54,370
very very fast

00:13:54,620 --> 00:13:56,620
but too very

00:13:56,750 --> 00:14:01,570
Naive machine code so it might not be super fast when you run your first executed

00:14:02,120 --> 00:14:07,900
But after a while the basic compiler says well this function here that is executed all the time

00:14:07,970 --> 00:14:13,839
we should really speed this up into better machine code so the optimizing compiler takes over and

00:14:14,660 --> 00:14:16,869
recompiles a so-called hot function

00:14:17,720 --> 00:14:19,280
into

00:14:19,280 --> 00:14:23,829
Better machine code so you have more work because you have to recompile again

00:14:24,020 --> 00:14:27,999
But you get much much faster codes when you run it a lot. It's worth it

00:14:28,700 --> 00:14:30,700
and so if you combine

00:14:31,490 --> 00:14:37,839
Optimization with these inline caches that's where you get a big big jump in in speed

00:14:41,960 --> 00:14:43,190
Okay

00:14:43,190 --> 00:14:46,570
So I hope you still with me. It's early um

00:14:47,720 --> 00:14:48,920
if

00:14:48,920 --> 00:14:54,099
If I lost you a little bit now would be a good time to get back um

00:14:57,170 --> 00:15:04,989
I'm gonna show you no actual machine code for a simple function like that, so think about it you write

00:15:05,870 --> 00:15:13,150
Javascript source code with cool frameworks and lots of stuff and everything's changing all the time everybody can put modules up

00:15:13,190 --> 00:15:16,090
But when you compile it you get down to machine code

00:15:16,090 --> 00:15:21,489
That's basically the same for decades, and I think it's really cool to see how like

00:15:22,100 --> 00:15:27,189
The the high-level stuff what it ends up with in in machine code um

00:15:27,770 --> 00:15:29,770
So just to recap

00:15:30,319 --> 00:15:37,659
The Javascript engines they compile Javascript code down to machine code and I want to show you some machine code now

00:15:37,939 --> 00:15:39,939
still for this load example

00:15:40,999 --> 00:15:47,139
so this year is optimized for scene code for the simple load function that returns object at x and

00:15:47,689 --> 00:15:53,739
It might look like a lot. I mean, it's a full page of code but for like low-level machine code

00:15:53,740 --> 00:15:59,109
This is really not much, and I'm gonna show you what it actually does so up here. It says um

00:16:00,290 --> 00:16:03,819
Call Stack check. This is where we entered a function?

00:16:03,819 --> 00:16:08,199
We just have to make sure we don't have too much recursion recursion and we can still

00:16:09,920 --> 00:16:13,300
Have space on the stack. So this is where we start the function

00:16:15,199 --> 00:16:19,179
The next thing we do is a check nonce my sews my is

00:16:19,670 --> 00:16:27,610
The aide internal language for a small integer we distinguish between small integers or objects on the heap

00:16:29,449 --> 00:16:33,099
Anything that's an object must be on the heap if it's if it's a smile

00:16:33,100 --> 00:16:35,350
You can check the hidden class of it or anything

00:16:35,509 --> 00:16:42,128
So this is just a backup check basically making sure we we do deal with some kind of object internally

00:16:44,360 --> 00:16:46,009
and now the

00:16:46,009 --> 00:16:52,479
What the function should do now is get object that x and return that so what we do in this?

00:16:52,699 --> 00:16:58,628
Optimized piece of machine code is a so called check maps and I said map is our word for

00:16:59,449 --> 00:17:01,539
internal class or the shape of the object

00:17:02,059 --> 00:17:07,148
So what this optimist machine code is doing now. It's comparing the two maps of

00:17:07,699 --> 00:17:09,409
the

00:17:09,409 --> 00:17:11,409
Parameter that you passed into the function

00:17:11,449 --> 00:17:18,579
So that object has a map it's comparing that to the map that we saved in the inline cache when the basic

00:17:18,799 --> 00:17:24,999
Compiler ran this before and if those are the same just like in our example before if those are the same

00:17:26,299 --> 00:17:28,299
then we can do the

00:17:28,730 --> 00:17:35,439
cheap fast property access which in this case is a load named fear you know I'll just load this field at the

00:17:35,570 --> 00:17:37,570
specific offset and

00:17:37,610 --> 00:17:39,610
Be done with it return it

00:17:39,770 --> 00:17:41,770
now if those map checks

00:17:42,060 --> 00:17:43,840
if if we call

00:17:43,840 --> 00:17:46,709
The load function with an object now that looks very different

00:17:47,350 --> 00:17:51,630
Then the map check would fail we don't have the same as that what we had on the cache

00:17:51,630 --> 00:17:54,690
And we have to jump when we end up down here

00:17:55,420 --> 00:17:59,009
which says the optimization bailout, so

00:18:00,280 --> 00:18:02,999
You run your code you fill your cache

00:18:03,730 --> 00:18:10,830
eventually you decide let's make really fast machine code you use the information from the cache to make this machine code like it's

00:18:11,080 --> 00:18:15,719
Hard-Coded in there. It says check the map at exactly this address and

00:18:16,510 --> 00:18:21,599
Now when you're running this code when you put objects in that are very different from what?

00:18:21,760 --> 00:18:28,379
You are expecting from something you can't handle in the inline cache then you end up in Addy optimization

00:18:28,990 --> 00:18:35,250
So that's where the optimizing compiler says I can handle this and you go back to the basic slower compiler

00:18:37,360 --> 00:18:44,160
Okay, so um I said here. We make one map check because we had exactly one object in our cache

00:18:44,160 --> 00:18:50,700
So we only compared to this one object um that's why we distinguish different states of inline caches

00:18:51,370 --> 00:18:55,560
So we have if there's exactly one entry we call them monomorphic

00:18:55,570 --> 00:18:59,309
If there's a handful like up to four entries

00:18:59,310 --> 00:19:00,130
We call it

00:19:00,130 --> 00:19:07,710
polymorphic and anything more as mega morphic and if you want if you can you want your code to have mostly monomorphic

00:19:08,010 --> 00:19:11,489
Or maybe polymorphic caches but avoid the mega morphic

00:19:12,250 --> 00:19:13,450
um

00:19:13,450 --> 00:19:19,739
So here in this example that I just showed you there was one map check because the cache that we assumed the cash was

00:19:19,990 --> 00:19:24,150
monomorphic if our cache is polymorphic and then we

00:19:24,880 --> 00:19:28,890
Generate this optimized code um it would look like this

00:19:29,710 --> 00:19:32,189
which is exactly the same except that it has

00:19:32,590 --> 00:19:39,449
Four map checks in there we would compare against these four entries that we have in the cache now if it's mega morphic

00:19:39,450 --> 00:19:43,019
We can't keep going on with all these branches and we have to do

00:19:44,020 --> 00:19:50,790
Computationally more expensive things so that's why you want if possible always objects of the same shape

00:19:51,230 --> 00:19:53,230
at the property accesses

00:19:54,120 --> 00:19:59,479
So same game as before we are checking but if it matches one of the entries in the cache

00:19:59,730 --> 00:20:06,409
Then we can just fast jump and return if it doesn't match any one of them. We're back to this deoptimization

00:20:09,360 --> 00:20:12,679
Okay, and um you can actually try all of that

00:20:12,679 --> 00:20:17,119
You can just take chrome that you have anyways and if you started from the command line

00:20:18,120 --> 00:20:22,279
Be behind chrome just put this flag - those J's flags

00:20:22,889 --> 00:20:28,939
Equals and then put the V8 flags that you want so for this case if you put print opt coat

00:20:29,159 --> 00:20:35,659
Print optimized code you can also do a print code comments that gives you exactly this output

00:20:35,820 --> 00:20:42,169
So you start chrome put this behind it open a website and your console will go full with like output like this oh

00:20:46,470 --> 00:20:48,470
these flags

00:20:49,230 --> 00:20:50,370
Okay

00:20:50,370 --> 00:20:55,339
so we care about what the state of the inline caches is and if you want to dig a

00:20:55,529 --> 00:20:58,309
Little Deeper in what's going on in your application?

00:20:58,860 --> 00:21:05,000
we have a nice little tool for it ice the Icy explorer wenjian where you can explore the

00:21:05,399 --> 00:21:07,399
states of your inline caches

00:21:08,460 --> 00:21:13,909
You generate the output like I just said put the flags behind chrome and then load the file here

00:21:13,909 --> 00:21:18,648
And you can group your inline caches very nicely by different keys

00:21:19,679 --> 00:21:22,999
you really do want to use this tool not just the editor because

00:21:23,549 --> 00:21:27,259
Here was compiling some type script, and it's a million entries. This is

00:21:28,019 --> 00:21:30,169
Very nice if you get this grouped for you

00:21:31,740 --> 00:21:35,359
You can sort by different things like here for example

00:21:35,360 --> 00:21:40,939
I sorted by a code location and I drill down on the function that I saw earlier that had the

00:21:41,279 --> 00:21:46,969
Exclamation mark so I can see exactly okay. What is happening at the property accesses in this function?

00:21:48,510 --> 00:21:55,939
So nice little tool to see what are the inline caches doing because they affect the speed and the optimizations

00:21:56,940 --> 00:22:02,299
There's also a nice overview if you want to see which functions are actually being optimized that micro

00:22:02,440 --> 00:22:08,830
Kyla and any functions d optimize if you do tres opt and trace d upped you get this information, so

00:22:09,440 --> 00:22:14,320
Here if we run an example that calls load eventually if you run it often enough, you'll see

00:22:15,379 --> 00:22:17,979
Optimizing the function load, so the optimizing compiler

00:22:18,620 --> 00:22:22,059
Recompiles it generates machine code similar to what we just saw

00:22:22,639 --> 00:22:29,109
And then if you keep calling it and eventually call it with very different objects you will see D

00:22:29,450 --> 00:22:31,960
optimizing evicting entry from the code database

00:22:32,899 --> 00:22:35,349
So what's what's happening? Here is um

00:22:36,590 --> 00:22:41,620
In this optimize machine code that I showed you when the map check didn't work out?

00:22:41,620 --> 00:22:45,879
we jumped all the way to the bottom and said Bailout the optimization and

00:22:46,549 --> 00:22:48,549
what we aide is doing here, it's

00:22:49,039 --> 00:22:55,419
Deleting this optimize code because it figured well we optimized it, but it doesn't quite work, so we throw it away

00:22:55,419 --> 00:22:59,349
We start over with the slow basic compiler for this function again

00:23:02,240 --> 00:23:04,240
so

00:23:04,549 --> 00:23:11,168
You don't want to see this too much when you profile your app because it slows it down

00:23:12,139 --> 00:23:19,029
So back to this original problem where we saw the exclamation mark warning not optimized optimize too many times um

00:23:20,269 --> 00:23:23,289
Now we have a better understanding of what's going on here

00:23:23,409 --> 00:23:26,859
We have this function is related to there are things like property

00:23:27,169 --> 00:23:33,158
Excesses in it we run this function with the basic compiler we put entries into our inline caches

00:23:34,669 --> 00:23:41,349
And eventually we optimize it using the information from the inline cache, but then we run it with stuff that doesn't match

00:23:41,350 --> 00:23:46,779
What's in the cache and we d optimize it and we run it again and a slow compiler eventually say oh

00:23:46,779 --> 00:23:54,549
let's optimize it again, and then we do this ten times and eventually the compiler says no point in optimizing this because

00:23:55,429 --> 00:23:58,658
Generating the optimized code of course costs performance

00:23:59,299 --> 00:24:04,959
Let's just not optimize this function anymore. I give up so this is where this exclamation mark Comes from

00:24:05,629 --> 00:24:11,589
And so by by looking at the cPU profile looking at the inline caches

00:24:12,440 --> 00:24:14,619
Looking at optimized machine code

00:24:15,130 --> 00:24:18,940
So non-optimized code and looking at the original Javascript code

00:24:19,070 --> 00:24:25,360
It's possible to figure out what kind of changes to make to get rid of this optimization the optimization optimization

00:24:25,400 --> 00:24:32,079
Do you have to mutation thing? So when you make those changes you profile again? You don't get the exclamation mark Anymore

00:24:33,950 --> 00:24:35,950
okay um

00:24:38,240 --> 00:24:42,010
General warning as always with optimizations be very very careful

00:24:42,350 --> 00:24:46,449
only optimize if you really must if you have performance problems

00:24:46,450 --> 00:24:50,860
And then if you do optimize make sure you really measure and find your bottlenecks

00:24:50,860 --> 00:24:54,040
Don't blindly optimize don't say oh I've heard something about

00:24:54,410 --> 00:24:59,619
Optimizing compilers gonna start changing because here I can tweak and in my cache or something

00:25:00,560 --> 00:25:04,060
You just introduce bugs and make your code really hard to maintain

00:25:04,880 --> 00:25:07,989
That's just the usual optimization um

00:25:09,320 --> 00:25:12,040
but in this case specifically I

00:25:13,370 --> 00:25:19,390
Would almost advise against optimizing for things like that because those are V8 internals. They're not

00:25:20,180 --> 00:25:24,879
Agreed upon by the Acma Script Committee to be like this

00:25:26,390 --> 00:25:28,420
and they change internally like

00:25:29,720 --> 00:25:35,319
Every commit that we make every canary version you get every night things might have changed

00:25:35,510 --> 00:25:41,560
We might have figured a better way to do something. So when you did micro optimizations for something that is true today

00:25:41,630 --> 00:25:43,630
It might actually be

00:25:43,940 --> 00:25:45,970
Negatively affecting your performance tomorrow

00:25:46,730 --> 00:25:51,219
And then obviously it's just we ate the other Javascript engines work very differently

00:25:51,560 --> 00:25:55,839
so if you write your Javascript code in a specific weight, and they're only

00:25:56,540 --> 00:25:59,649
Faster and this one engine, but probably not in the other engines

00:26:02,900 --> 00:26:07,359
So I hope I was able to give you a little bit of an insight into this

00:26:07,730 --> 00:26:13,750
Black box of Javascript engines what they do from source code to really fast machine code

00:26:14,270 --> 00:26:19,420
If you want to play with any of this yourself and see what uh what's my app doing in general?

00:26:19,430 --> 00:26:21,669
Or what a little code Snippets doing?

00:26:21,980 --> 00:26:27,699
You can always just use chrome started from the command Line - - - j as flag

00:26:27,950 --> 00:26:33,769
equals and in some things we looked at was a trace of trace deopt print opcode or

00:26:34,380 --> 00:26:38,179
Trace I see if you're familiar with node you can also

00:26:39,029 --> 00:26:43,999
Start a node server and put the V8 flags here. Just put them right behind node

00:26:44,730 --> 00:26:47,120
and if you were more adventurous

00:26:47,120 --> 00:26:54,289
You can compile a V8 yourself and get D8 then it's the V8 debugging shell and run that with all the flags

00:26:54,510 --> 00:27:01,760
um if you use D8 you have the advantage that you don't get the overhead of things that happen in the browser or

00:27:02,100 --> 00:27:08,029
Things that happen in node before your function actually starts up and if you want to

00:27:08,519 --> 00:27:13,969
Explore your inline caches the ICC explorer is distributed with the V8 source code

00:27:14,190 --> 00:27:20,090
There's a link to it um if you have any questions or feedback or performance questions

00:27:20,220 --> 00:27:26,089

YouTube URL: https://www.youtube.com/watch?v=B9igDWV5ZUg


