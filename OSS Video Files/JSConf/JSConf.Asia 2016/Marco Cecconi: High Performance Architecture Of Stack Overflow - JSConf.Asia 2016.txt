Title: Marco Cecconi: High Performance Architecture Of Stack Overflow - JSConf.Asia 2016
Publication date: 2016-12-20
Playlist: JSConf.Asia 2016
Description: 
	Stack Overflow is a website that helps millions of developers every day. On the other hand, not many developers realize that this site serves them with incredible efficiency. For example, a question and answer page is typically served in 10ms.
How do you serve so many requests in so little time while running on 9 web servers? In this new talk, I will explain how this is planned, implemented and measured.

Marco is a developer in the core​ Q&A​ team of Stack Overflow since 2013. While not creating bugs and fixing them in a hurry, he enjoys blogging on sklivvz.com, covering computers topics from transistors to tech leadership.He frequently speaks on architecture, engineering and Stack Overflow.


JSConf.Asia - Capitol Theatre, Singapore - 25+26 November 2016.

Source: https://2016.jsconf.asia/
Slides: http://slides.com/sklivvz/high-perf-architecture-10/?token=W4iDQ79L#/

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:00,500 --> 00:00:23,699
[Music]

00:00:19,160 --> 00:00:29,640
how are you are you well rested after

00:00:23,699 --> 00:00:32,040
the break so my my name is Marco I'm

00:00:29,640 --> 00:00:33,210
amazed that my surname got pronounced

00:00:32,040 --> 00:00:37,140
right

00:00:33,210 --> 00:00:38,730
anyways I work for sack overflow I'm

00:00:37,140 --> 00:00:41,730
going to talk a bit about the

00:00:38,730 --> 00:00:47,219
architecture so how do we build stuff

00:00:41,730 --> 00:00:49,860
and first thing so there is this

00:00:47,219 --> 00:00:53,879
fantastic QR code if you scan it you'll

00:00:49,860 --> 00:00:57,059
be able to follow along the slides okay

00:00:53,879 --> 00:01:00,329
is I don't know if it works but you can

00:00:57,059 --> 00:01:04,379
try anyways so we are by the way we are

00:01:00,329 --> 00:01:08,040
a c-sharp company so we use C sharp

00:01:04,379 --> 00:01:09,630
we are not no js' and before anybody of

00:01:08,040 --> 00:01:11,490
you ask me the question that asks me

00:01:09,630 --> 00:01:13,500
every time why don't use nodejs or

00:01:11,490 --> 00:01:17,369
whatever okay if you do that I'm gonna

00:01:13,500 --> 00:01:21,330
make fun of you because of left ok so be

00:01:17,369 --> 00:01:23,430
careful anyway so architecture so I

00:01:21,330 --> 00:01:25,860
looked up the definition of architecture

00:01:23,430 --> 00:01:28,770
and it says the art of science of

00:01:25,860 --> 00:01:30,360
building specifically your practice of

00:01:28,770 --> 00:01:33,420
designing and building structures

00:01:30,360 --> 00:01:35,070
especially habitable ones of course in

00:01:33,420 --> 00:01:36,299
our case you know a software

00:01:35,070 --> 00:01:38,790
architecture is not about building

00:01:36,299 --> 00:01:41,820
houses is about building software where

00:01:38,790 --> 00:01:43,439
is the same concept and architecture is

00:01:41,820 --> 00:01:46,290
actually something that existed for a

00:01:43,439 --> 00:01:49,020
long time it was studied since we have

00:01:46,290 --> 00:01:51,689
texts talking about architecture there

00:01:49,020 --> 00:01:54,149
are more than 2,000 years years old and

00:01:51,689 --> 00:01:57,030
one thing that was notable even at the

00:01:54,149 --> 00:01:58,920
time is three characteristics that make

00:01:57,030 --> 00:02:01,229
the concept of architecture so three

00:01:58,920 --> 00:02:03,960
things that architected things must have

00:02:01,229 --> 00:02:05,700
so the first thing is durability right

00:02:03,960 --> 00:02:07,890
so you building a house you're building

00:02:05,700 --> 00:02:11,180
a temple you don't want the temple to

00:02:07,890 --> 00:02:12,390
meltdown when it's raining for example

00:02:11,180 --> 00:02:15,000
the

00:02:12,390 --> 00:02:16,740
thing is utility right you you created

00:02:15,000 --> 00:02:20,160
your fantastic temple you forgot to put

00:02:16,740 --> 00:02:22,860
in the doors and you know you can't go

00:02:20,160 --> 00:02:24,270
into it so it doesn't really work so so

00:02:22,860 --> 00:02:26,370
you need to have something that doesn't

00:02:24,270 --> 00:02:28,920
fall down and something that you can

00:02:26,370 --> 00:02:31,170
actually use but it's more interesting

00:02:28,920 --> 00:02:36,020
the third characteristic that a good

00:02:31,170 --> 00:02:38,730
architecture must have and is beauty and

00:02:36,020 --> 00:02:41,280
you can see how for example for a church

00:02:38,730 --> 00:02:44,310
or for a temple or for even for a house

00:02:41,280 --> 00:02:46,860
or a villa it may be something obvious

00:02:44,310 --> 00:02:50,150
right you want it to be beautiful but

00:02:46,860 --> 00:02:53,519
how does it work with code right and

00:02:50,150 --> 00:02:58,280
this is open to interpretation and but

00:02:53,519 --> 00:03:02,900
in our case we certainly have

00:02:58,280 --> 00:03:05,850
interpreted this as to mean performance

00:03:02,900 --> 00:03:07,769
so for us it's important that the code

00:03:05,850 --> 00:03:10,860
that we that we build is very efficient

00:03:07,769 --> 00:03:14,760
and efficiency is the ability to do

00:03:10,860 --> 00:03:20,370
something without without waste so there

00:03:14,760 --> 00:03:23,610
is one good way that we a method that we

00:03:20,370 --> 00:03:25,799
know all about that is very very

00:03:23,610 --> 00:03:31,019
efficient and allows us to get to

00:03:25,799 --> 00:03:34,769
solutions which perform that maximize

00:03:31,019 --> 00:03:38,040
the performance very easily and that

00:03:34,769 --> 00:03:39,660
method is the scientific method so if

00:03:38,040 --> 00:03:41,489
you think about it

00:03:39,660 --> 00:03:45,769
when when people when you have

00:03:41,489 --> 00:03:51,410
scientists doing science what they do is

00:03:45,769 --> 00:03:51,410
they have some observations and they

00:03:51,950 --> 00:03:57,329
think of a theory or some model that

00:03:55,380 --> 00:03:58,650
will explain the observed observations

00:03:57,329 --> 00:04:03,090
and use that model to make predictions

00:03:58,650 --> 00:04:05,040
and then they make experiments and then

00:04:03,090 --> 00:04:08,700
they verify whether these experiments

00:04:05,040 --> 00:04:10,709
are actually are actually confirming or

00:04:08,700 --> 00:04:12,290
disproving their policies so the most

00:04:10,709 --> 00:04:16,680
important meeting here are these three

00:04:12,290 --> 00:04:19,950
the small 3-step cycle here you know

00:04:16,680 --> 00:04:23,099
where you gather we gather data you

00:04:19,950 --> 00:04:23,669
refine and alter expand so you analyze

00:04:23,099 --> 00:04:26,280
your day

00:04:23,669 --> 00:04:29,729
and you build new theories all the time

00:04:26,280 --> 00:04:33,779
and we basically did something very

00:04:29,729 --> 00:04:37,680
similar so when we when we do code we

00:04:33,779 --> 00:04:40,710
build build code we build the product we

00:04:37,680 --> 00:04:43,560
measure performance and then we analyze

00:04:40,710 --> 00:04:47,969
the measurements and this allows us to

00:04:43,560 --> 00:04:51,300
define how to build the rest the rest of

00:04:47,969 --> 00:04:55,340
the product so the first thing that

00:04:51,300 --> 00:04:58,740
anybody is going to ask you if you are a

00:04:55,340 --> 00:05:00,900
customer and you want someone to design

00:04:58,740 --> 00:05:02,939
a church for you they're going to ask

00:05:00,900 --> 00:05:05,460
you okay so you want like something

00:05:02,939 --> 00:05:09,419
small what's your budget you know or

00:05:05,460 --> 00:05:12,000
something big so knowing the

00:05:09,419 --> 00:05:17,219
characteristics of what you're building

00:05:12,000 --> 00:05:18,659
is very important and therefore this

00:05:17,219 --> 00:05:20,669
this whole talk would be meaningless

00:05:18,659 --> 00:05:23,669
unless I told you a little bit about

00:05:20,669 --> 00:05:26,580
Stack Overflow and the kind of scale

00:05:23,669 --> 00:05:29,909
that we have so you can sort of relate

00:05:26,580 --> 00:05:34,400
or or see why we go to such lengths to

00:05:29,909 --> 00:05:37,349
do to do these things so first of all

00:05:34,400 --> 00:05:40,229
this is the top sites according to

00:05:37,349 --> 00:05:43,319
contest which is one of the two top

00:05:40,229 --> 00:05:45,509
measurement agencies that tell you how

00:05:43,319 --> 00:05:49,860
many unique visitors you have every

00:05:45,509 --> 00:05:52,710
month that were Flo would be between 17

00:05:49,860 --> 00:05:54,719
or 18 it's not there for a couple of

00:05:52,710 --> 00:05:57,389
reasons and but the most important one

00:05:54,719 --> 00:06:00,689
is that we have our traffic is actually

00:05:57,389 --> 00:06:02,310
split around all our network of sites so

00:06:00,689 --> 00:06:07,800
Stack Overflow is part of a larger

00:06:02,310 --> 00:06:09,539
network of 160 different sites with

00:06:07,800 --> 00:06:13,589
different topics that go from cooking to

00:06:09,539 --> 00:06:18,810
English to Japanese to philosophy or

00:06:13,589 --> 00:06:21,379
physics so Quantcast doesn't really work

00:06:18,810 --> 00:06:24,330
very well for this kind of setup and

00:06:21,379 --> 00:06:26,789
therefore it is split all the traffic in

00:06:24,330 --> 00:06:28,979
different blocks but putting them

00:06:26,789 --> 00:06:33,649
together we would be somewhere between

00:06:28,979 --> 00:06:33,649
Wikipedia and people which is pretty big

00:06:33,930 --> 00:06:38,130
by the way I was telling you is not very

00:06:36,060 --> 00:06:40,800
you know podcast is not very reliable I

00:06:38,130 --> 00:06:43,230
can tell you why so does anybody

00:06:40,800 --> 00:06:43,970
remember this coming out maybe in

00:06:43,230 --> 00:06:46,590
September

00:06:43,970 --> 00:06:48,570
so basically North Korea screwed up

00:06:46,590 --> 00:06:51,000
there there both the router

00:06:48,570 --> 00:06:54,810
configuration and turns out they have 28

00:06:51,000 --> 00:06:58,770
websites in the whole country so you can

00:06:54,810 --> 00:07:01,500
imagine them you know or like there and

00:06:58,770 --> 00:07:07,100
according to Qantas what are they

00:07:01,500 --> 00:07:07,100
looking at Stack Overflow

00:07:07,669 --> 00:07:11,790
so apparently we are very popular in

00:07:10,290 --> 00:07:17,660
North Korea so now you can trust this

00:07:11,790 --> 00:07:20,790
numbers clearly but okay it's just funny

00:07:17,660 --> 00:07:26,970
so I think in some version of this talk

00:07:20,790 --> 00:07:31,380
since 2013 when I when I started giving

00:07:26,970 --> 00:07:33,330
this talk we had somewhere around 100

00:07:31,380 --> 00:07:37,740
websites in our network that was talking

00:07:33,330 --> 00:07:42,750
about nowadays we have 160 and we are

00:07:37,740 --> 00:07:43,470
still growing of course and these are

00:07:42,750 --> 00:07:46,350
pageviews

00:07:43,470 --> 00:07:47,580
so again Quantcast so believe it you

00:07:46,350 --> 00:07:50,940
know take it or leave it

00:07:47,580 --> 00:07:52,950
but we were around 400 million pageviews

00:07:50,940 --> 00:07:55,890
per month when I joined and we're

00:07:52,950 --> 00:07:59,100
talking about this and nowadays we are

00:07:55,890 --> 00:08:01,289
actually over 1 1 billion 1.2 billion

00:07:59,100 --> 00:08:06,510
per month and this is not really up to

00:08:01,289 --> 00:08:11,160
date on the other hand the number of web

00:08:06,510 --> 00:08:14,130
servers was one in 2008 when the when

00:08:11,160 --> 00:08:15,660
the site started then he grew a bit to

00:08:14,130 --> 00:08:18,510
five in two thousand nine thousand ten

00:08:15,660 --> 00:08:21,530
and then 2011 we went to nine web

00:08:18,510 --> 00:08:24,900
servers and ever since then I started

00:08:21,530 --> 00:08:26,639
talking and we grew like we doubled up

00:08:24,900 --> 00:08:31,080
our traffic tripled our traffic and we

00:08:26,639 --> 00:08:35,490
still online web servers so to give you

00:08:31,080 --> 00:08:38,279
an idea I was looking today at some

00:08:35,490 --> 00:08:42,599
stats for some other sites which are

00:08:38,279 --> 00:08:44,850
there in the in that list so Pinterest

00:08:42,599 --> 00:08:46,850
which is two steps of on top of us

00:08:44,850 --> 00:08:52,440
in 2012 the what

00:08:46,850 --> 00:08:56,190
150 servers Wikipedia which is I think

00:08:52,440 --> 00:08:57,960
below us or just above us I have more or

00:08:56,190 --> 00:09:03,720
less 10 times the amount of hardware

00:08:57,960 --> 00:09:07,580
that we have so how do we do this we do

00:09:03,720 --> 00:09:09,950
this with this small poor man's

00:09:07,580 --> 00:09:11,610
scientific method build measure analyze

00:09:09,950 --> 00:09:16,640
so I'm going to give you a few examples

00:09:11,610 --> 00:09:19,350
very quickly because time runs out so

00:09:16,640 --> 00:09:22,860
first of all with the hardware so this

00:09:19,350 --> 00:09:26,910
is an actual picture of our own server

00:09:22,860 --> 00:09:29,160
farm server farm three racks and as you

00:09:26,910 --> 00:09:32,430
can see there is not much there and

00:09:29,160 --> 00:09:35,550
they're mostly databases all the stuff

00:09:32,430 --> 00:09:37,700
that you see up here all these numerous

00:09:35,550 --> 00:09:40,560
things here they're all these drives

00:09:37,700 --> 00:09:43,500
because we have a lot of content right

00:09:40,560 --> 00:09:46,940
so our main concern is actually running

00:09:43,500 --> 00:09:51,570
out of space is not running out of power

00:09:46,940 --> 00:09:53,040
so what do we do we serve the site and

00:09:51,570 --> 00:09:54,450
then we have this fantastic dashboard

00:09:53,040 --> 00:09:59,100
which is an open source project called

00:09:54,450 --> 00:10:01,440
observer which allows you to measure the

00:09:59,100 --> 00:10:04,589
performance of all the servers in it and

00:10:01,440 --> 00:10:11,850
as you can see in this screenshot can

00:10:04,589 --> 00:10:14,730
you read it yes so up here there are the

00:10:11,850 --> 00:10:18,720
database servers and you can see we got

00:10:14,730 --> 00:10:21,120
four and the way they are set up they

00:10:18,720 --> 00:10:24,270
are two for the network and two just for

00:10:21,120 --> 00:10:26,760
Stack Overflow of each pair one is

00:10:24,270 --> 00:10:30,350
read-only and the other one also accepts

00:10:26,760 --> 00:10:36,709
writes so basically there is only one

00:10:30,350 --> 00:10:39,860
server doing the actual hard work and

00:10:36,709 --> 00:10:42,329
this one's got a lot of RAM

00:10:39,860 --> 00:10:48,060
even though nowadays you know there is

00:10:42,329 --> 00:10:50,459
common to see terabytes of RAM so these

00:10:48,060 --> 00:10:53,279
are the web servers so this one runs

00:10:50,459 --> 00:10:56,220
like promotions and not the sides the

00:10:53,279 --> 00:10:58,020
sides are actually on this nine here as

00:10:56,220 --> 00:11:00,310
you can see this is a typical day and

00:10:58,020 --> 00:11:03,520
their CPU is like five percent

00:11:00,310 --> 00:11:06,310
10% so we have not only we only run on

00:11:03,520 --> 00:11:09,010
nine but these nine web servers are

00:11:06,310 --> 00:11:11,800
really really under capacity so we could

00:11:09,010 --> 00:11:14,020
lose a few of them and still be up and

00:11:11,800 --> 00:11:15,490
nobody wouldn't notice in fact sometimes

00:11:14,020 --> 00:11:20,410
when there is something dangerous we

00:11:15,490 --> 00:11:22,450
just take one out of the out of the load

00:11:20,410 --> 00:11:22,779
balancer and try to deploy stuff in

00:11:22,450 --> 00:11:24,670
there

00:11:22,779 --> 00:11:26,470
so if it goes crazy if he goes crazy we

00:11:24,670 --> 00:11:28,750
can just shut it up shut it down and

00:11:26,470 --> 00:11:31,510
nobody cares because the traffic is

00:11:28,750 --> 00:11:33,190
gonna just go on in fact we have

00:11:31,510 --> 00:11:35,140
calculated that we could probably use

00:11:33,190 --> 00:11:38,700
just one less web server and serve all

00:11:35,140 --> 00:11:38,700
the traffic if we were crazy enough

00:11:39,630 --> 00:11:46,330
after we get all this data what we do is

00:11:43,270 --> 00:11:48,730
do one big spreadsheet and we try to

00:11:46,330 --> 00:11:52,110
understand how much space are going to

00:11:48,730 --> 00:11:55,029
need next year and then based on that we

00:11:52,110 --> 00:11:55,839
buy new discs or buy new servers and so

00:11:55,029 --> 00:12:02,400
on and so on

00:11:55,839 --> 00:12:08,680
so again it's literally physically built

00:12:02,400 --> 00:12:10,270
measure and analyze the data and this is

00:12:08,680 --> 00:12:14,620
the architecture overall I just wanted

00:12:10,270 --> 00:12:19,420
to give a quick overview a word based so

00:12:14,620 --> 00:12:21,820
on top here this is where you are right

00:12:19,420 --> 00:12:24,460
so the requests come in here go through

00:12:21,820 --> 00:12:26,170
Reuters all the borderline stuff they go

00:12:24,460 --> 00:12:28,600
through low load balancer which is like

00:12:26,170 --> 00:12:31,089
one machine active and one machine is

00:12:28,600 --> 00:12:33,610
just stand by and they go into the

00:12:31,089 --> 00:12:36,610
famous nine web servers and in the back

00:12:33,610 --> 00:12:39,390
hand there is really very little there

00:12:36,610 --> 00:12:41,980
there is Redis which runs on two boxes

00:12:39,390 --> 00:12:47,200
there is elasticsearch that runs on

00:12:41,980 --> 00:12:49,510
three and we use that for searching the

00:12:47,200 --> 00:12:53,310
service tier is more interesting what

00:12:49,510 --> 00:12:56,020
this does is it's a specialized index of

00:12:53,310 --> 00:12:58,080
questions and questions and tags are you

00:12:56,020 --> 00:13:00,760
familiar with the waste our flow works

00:12:58,080 --> 00:13:02,589
you know I have a questions as a tag so

00:13:00,760 --> 00:13:05,279
you know this question you see sure of

00:13:02,589 --> 00:13:08,680
this question is no js' or whatever and

00:13:05,279 --> 00:13:09,630
when you navigate the site especially if

00:13:08,680 --> 00:13:12,830
you're logged in which

00:13:09,630 --> 00:13:16,170
to guess which questions are going to be

00:13:12,830 --> 00:13:20,520
interesting to you and we do that based

00:13:16,170 --> 00:13:23,220
on tags so there is a lot of querying

00:13:20,520 --> 00:13:26,070
going boolean query going on with with

00:13:23,220 --> 00:13:29,220
the tags and that actually can't be

00:13:26,070 --> 00:13:33,480
performed by sequel server that would be

00:13:29,220 --> 00:13:34,950
absolutely crazy so we moved on to

00:13:33,480 --> 00:13:38,190
something having something completely in

00:13:34,950 --> 00:13:40,650
memory but that also was too much and

00:13:38,190 --> 00:13:43,710
then so we move it to a separate server

00:13:40,650 --> 00:13:50,640
which only does that and then finally we

00:13:43,710 --> 00:13:54,060
have a single server so again build

00:13:50,640 --> 00:13:57,930
measure analyze that particular build

00:13:54,060 --> 00:14:03,720
measure analyze just shown was actually

00:13:57,930 --> 00:14:05,940
quite slow right you can do maybe yearly

00:14:03,720 --> 00:14:09,210
hardware refresh cycle if you're using

00:14:05,940 --> 00:14:11,430
the cloud you can increase the number of

00:14:09,210 --> 00:14:13,010
servers if you need to but in any Indian

00:14:11,430 --> 00:14:16,260
case you don't do that like

00:14:13,010 --> 00:14:18,690
second-by-second it's something that you

00:14:16,260 --> 00:14:21,180
do with time and whereas it's important

00:14:18,690 --> 00:14:24,810
to have these cycles optimized for speed

00:14:21,180 --> 00:14:28,500
so if you can do this cycle very quickly

00:14:24,810 --> 00:14:31,170
it's important because what this cycle

00:14:28,500 --> 00:14:33,060
does is takes a solution your product it

00:14:31,170 --> 00:14:35,190
just changes it slightly in the way it's

00:14:33,060 --> 00:14:37,410
implemented so it fits better your

00:14:35,190 --> 00:14:40,140
condition and the faster you can iterate

00:14:37,410 --> 00:14:46,140
the quicker it converges to an optimal

00:14:40,140 --> 00:14:48,240
solution so an example of this is actual

00:14:46,140 --> 00:14:52,530
code right so this is an example of code

00:14:48,240 --> 00:14:53,970
and I'll show it again later one thing

00:14:52,530 --> 00:15:01,290
that you can see in here and we

00:14:53,970 --> 00:15:04,560
optimized for is that this code

00:15:01,290 --> 00:15:07,290
basically what it does it takes all the

00:15:04,560 --> 00:15:09,660
table out of the DB this table contains

00:15:07,290 --> 00:15:12,480
content in particular it contains our

00:15:09,660 --> 00:15:15,210
health center and the store sitting in

00:15:12,480 --> 00:15:18,990
cash and installing a static object and

00:15:15,210 --> 00:15:20,160
it's there for use and and all the stuff

00:15:18,990 --> 00:15:22,680
is done in 10 lines of

00:15:20,160 --> 00:15:25,410
and the reason is you know the less code

00:15:22,680 --> 00:15:27,840
you write the faster you are in this

00:15:25,410 --> 00:15:32,730
step the faster your cycle is so it's

00:15:27,840 --> 00:15:34,830
important how do we measure that

00:15:32,730 --> 00:15:39,180
so once you have your page is being

00:15:34,830 --> 00:15:43,560
rendered normal users just see the site

00:15:39,180 --> 00:15:48,090
right so they just see that the page as

00:15:43,560 --> 00:15:51,500
developers see up here a small rectangle

00:15:48,090 --> 00:15:56,850
with the time so this page actually took

00:15:51,500 --> 00:15:58,560
100 no so yeah 150 119 one millisecond

00:15:56,850 --> 00:16:03,120
to to render this was really really slow

00:15:58,560 --> 00:16:05,550
for some reason in any case you can see

00:16:03,120 --> 00:16:07,560
what's wrong if you're a developer you

00:16:05,550 --> 00:16:10,380
can go up there click click on it and

00:16:07,560 --> 00:16:13,290
you get actually a complete breakdown on

00:16:10,380 --> 00:16:16,380
how the page was rendered where time was

00:16:13,290 --> 00:16:18,150
spent was it spent in this column here

00:16:16,380 --> 00:16:21,420
which is sequel was it spent on Redis

00:16:18,150 --> 00:16:23,880
calls was spent on elastic if there is

00:16:21,420 --> 00:16:26,250
some elastic calls in there you would

00:16:23,880 --> 00:16:28,110
also have a column and this tells you

00:16:26,250 --> 00:16:31,740
pretty much what you need to optimize

00:16:28,110 --> 00:16:35,730
and what the problems are not only that

00:16:31,740 --> 00:16:37,920
but profiling everything at every at

00:16:35,730 --> 00:16:41,550
every call allows us to actually store a

00:16:37,920 --> 00:16:45,600
subset of this data and put it in a

00:16:41,550 --> 00:16:47,670
sequel in a sequel database so not only

00:16:45,600 --> 00:16:51,150
I can see this particular page what

00:16:47,670 --> 00:16:54,180
happened in this particular rendering

00:16:51,150 --> 00:16:57,570
instance but I can also run averages

00:16:54,180 --> 00:16:59,790
over the last day for example and see

00:16:57,570 --> 00:17:03,600
okay how is the site how is this

00:16:59,790 --> 00:17:06,209
particular page performing today and

00:17:03,600 --> 00:17:09,900
then allows you allows me to actually

00:17:06,209 --> 00:17:12,689
get to graphs like this one so this is

00:17:09,900 --> 00:17:15,300
just something I did on a random day to

00:17:12,689 --> 00:17:17,459
tweet about it but as you can see this

00:17:15,300 --> 00:17:19,470
is a question page so when when you go

00:17:17,459 --> 00:17:23,069
on Google and say okay how do i parse

00:17:19,470 --> 00:17:26,520
HTML with the regex you land on our page

00:17:23,069 --> 00:17:28,610
and this is that page so these are the

00:17:26,520 --> 00:17:31,750
measurements for that page and

00:17:28,610 --> 00:17:35,270
can see rendering that page takes

00:17:31,750 --> 00:17:38,210
between maybe twenty ten and twenty

00:17:35,270 --> 00:17:41,330
milliseconds for most part and you can

00:17:38,210 --> 00:17:45,380
see also in here that about two three

00:17:41,330 --> 00:17:49,220
milliseconds of spent on average in in

00:17:45,380 --> 00:17:50,929
sequel and read this is like crazy it's

00:17:49,220 --> 00:17:54,620
like sub milliseconds we can't even

00:17:50,929 --> 00:17:56,000
measure it from most most part and it's

00:17:54,620 --> 00:18:00,320
also interesting to see that there are

00:17:56,000 --> 00:18:02,660
some spikes here those spikes are things

00:18:00,320 --> 00:18:04,940
that went wrong garbage collections and

00:18:02,660 --> 00:18:06,740
so on and so pages which are not

00:18:04,940 --> 00:18:09,950
performing as well as they could for

00:18:06,740 --> 00:18:12,200
example the one I was showing before had

00:18:09,950 --> 00:18:18,320
some problem it would definitely be in

00:18:12,200 --> 00:18:21,290
this small spike there so of course you

00:18:18,320 --> 00:18:24,830
know understanding which pages perform

00:18:21,290 --> 00:18:27,110
worse allows you to focus your effort in

00:18:24,830 --> 00:18:28,640
making them faster and this is how you

00:18:27,110 --> 00:18:31,610
get pages that rendering ten

00:18:28,640 --> 00:18:33,410
milliseconds I'm pretty sure your

00:18:31,610 --> 00:18:41,840
applications not as fast as this if you

00:18:33,410 --> 00:18:44,990
do web so I mean all these optimizations

00:18:41,840 --> 00:18:47,840
would be not very useful unless this

00:18:44,990 --> 00:18:50,660
cycling would would was fast in fact I

00:18:47,840 --> 00:18:56,740
think our cycle is pretty it's pretty

00:18:50,660 --> 00:19:00,169
fast so I actually went on and measured

00:18:56,740 --> 00:19:02,750
how many deployments we do on those nine

00:19:00,169 --> 00:19:06,260
web servers every day so when I joined I

00:19:02,750 --> 00:19:09,140
was told it was five they lied to me it

00:19:06,260 --> 00:19:12,440
was so I joined somewhere around here

00:19:09,140 --> 00:19:16,309
and actually was five like the first

00:19:12,440 --> 00:19:18,890
month though and they went down and then

00:19:16,309 --> 00:19:20,870
growing back up again so we are around

00:19:18,890 --> 00:19:25,120
five four four five deployments a day

00:19:20,870 --> 00:19:28,820
which is actually pretty good at least

00:19:25,120 --> 00:19:33,260
according to my former career where a

00:19:28,820 --> 00:19:35,780
deployment took six months by the way

00:19:33,260 --> 00:19:38,179
does anybody know why there is the spy

00:19:35,780 --> 00:19:42,010
here of like a gazillion developments

00:19:38,179 --> 00:19:42,010
just for that month anybody can guess

00:19:43,389 --> 00:19:53,539
sorry rejects no so this is because we

00:19:51,619 --> 00:19:56,200
release documentation and which is like

00:19:53,539 --> 00:19:59,149
a major expansion of the site is like a

00:19:56,200 --> 00:20:01,149
completely new part in which there are

00:19:59,149 --> 00:20:04,519
many examples documentation for

00:20:01,149 --> 00:20:07,099
languages and features and of course

00:20:04,519 --> 00:20:09,529
that came out with a large number of

00:20:07,099 --> 00:20:12,499
bikes and large number of consequent

00:20:09,529 --> 00:20:16,059
deployments so I was telling you before

00:20:12,499 --> 00:20:16,059
about the Help Center

00:20:16,219 --> 00:20:21,829
so the Help Center is just a random part

00:20:20,599 --> 00:20:24,769
of the site it's not a major part or

00:20:21,829 --> 00:20:26,299
site but even that is optimized and as I

00:20:24,769 --> 00:20:28,879
was showing you before so this is the

00:20:26,299 --> 00:20:32,690
code that actually is a complete storage

00:20:28,879 --> 00:20:34,820
of all the all the Help Center articles

00:20:32,690 --> 00:20:37,489
they're just you know blatantly stored

00:20:34,820 --> 00:20:39,469
in memory they're stored in a global

00:20:37,489 --> 00:20:41,299
variable which is something that if you

00:20:39,469 --> 00:20:43,519
went to any computer science course they

00:20:41,299 --> 00:20:47,329
would have told you never to do and we

00:20:43,519 --> 00:20:50,059
do it it's all everything is cache the

00:20:47,329 --> 00:20:52,249
global cache is a nice object at what it

00:20:50,059 --> 00:20:54,349
does it looks in memory do I have it in

00:20:52,249 --> 00:20:55,940
memory yes okay here it goes

00:20:54,349 --> 00:20:58,849
if I don't have it memory I'll look on

00:20:55,940 --> 00:21:01,249
readies for everything readies no ok

00:20:58,849 --> 00:21:03,769
then otherwise I'll just execute this

00:21:01,249 --> 00:21:09,769
lambda over here you got lambdas now in

00:21:03,769 --> 00:21:13,909
node.js right and and this is our ORM

00:21:09,769 --> 00:21:15,919
layer two lines of code basically this

00:21:13,909 --> 00:21:19,869
opens up a connection and this part runs

00:21:15,919 --> 00:21:23,659
and maps this people so as you can see

00:21:19,869 --> 00:21:26,479
the code is very is very tight and it's

00:21:23,659 --> 00:21:30,409
actually using a lot of this particular

00:21:26,479 --> 00:21:33,339
way of doing things where we use a lot

00:21:30,409 --> 00:21:36,709
of global stuff a lot of static stuff

00:21:33,339 --> 00:21:39,019
which in in language like the C sharp is

00:21:36,709 --> 00:21:41,359
really really not something you should

00:21:39,019 --> 00:21:47,959
be doing and we do it because it's fast

00:21:41,359 --> 00:21:50,059
it's really really damn fast there are

00:21:47,959 --> 00:21:52,799
also examples of caching which are

00:21:50,059 --> 00:21:54,840
really strange

00:21:52,799 --> 00:21:57,540
for example this is the actually the

00:21:54,840 --> 00:22:01,470
answer to should I help connect parse

00:21:57,540 --> 00:22:03,360
HTML with the regex you can't anyways

00:22:01,470 --> 00:22:07,170
this is just a question it's a very

00:22:03,360 --> 00:22:09,510
popular popular answer sorry and as all

00:22:07,170 --> 00:22:11,790
answers there is up there there is three

00:22:09,510 --> 00:22:14,580
small tabs they allow you to change the

00:22:11,790 --> 00:22:17,309
order of the answers whether you want to

00:22:14,580 --> 00:22:20,220
see the latest active one the oldest one

00:22:17,309 --> 00:22:22,049
or the most water one on top so that's a

00:22:20,220 --> 00:22:24,030
completely static content you know

00:22:22,049 --> 00:22:26,700
there's nothing in it that you need to

00:22:24,030 --> 00:22:29,070
do you know there is no calculations

00:22:26,700 --> 00:22:31,169
there is nothing the only thing that we

00:22:29,070 --> 00:22:34,350
need to do in order to display that in

00:22:31,169 --> 00:22:36,690
the backend is actually create objects

00:22:34,350 --> 00:22:41,970
for the three tabs and then we just

00:22:36,690 --> 00:22:44,130
render them right except that code is on

00:22:41,970 --> 00:22:47,669
a page which is rendered 1.2 billion

00:22:44,130 --> 00:22:49,460
times a month so that's a lot a hell of

00:22:47,669 --> 00:22:52,440
a lot of objects that are created here

00:22:49,460 --> 00:22:57,690
so in order to further optimize the code

00:22:52,440 --> 00:23:00,299
it actually makes sense to cache in

00:22:57,690 --> 00:23:01,710
memory those three objects so we just

00:23:00,299 --> 00:23:07,110
create them once instead of creating

00:23:01,710 --> 00:23:10,799
them every time the reason for this is

00:23:07,110 --> 00:23:12,299
garbage collection and if you do not yes

00:23:10,799 --> 00:23:15,419
you should be worrying about garbage

00:23:12,299 --> 00:23:19,260
collection even though you may not have

00:23:15,419 --> 00:23:21,210
been thinking about it so far what

00:23:19,260 --> 00:23:23,549
garbage collection is is the magic thing

00:23:21,210 --> 00:23:26,059
that allows you to create new objects

00:23:23,549 --> 00:23:28,559
and then you never have to delete them

00:23:26,059 --> 00:23:31,770
you know in old times when people

00:23:28,559 --> 00:23:34,679
actually use see you couldn't just

00:23:31,770 --> 00:23:36,870
create something out of nowhere the way

00:23:34,679 --> 00:23:39,210
to do to do it of course is you know to

00:23:36,870 --> 00:23:41,400
ask the runtime okay give me a chunk of

00:23:39,210 --> 00:23:42,690
memory then you use it and then you give

00:23:41,400 --> 00:23:44,730
it back and say okay I don't need it

00:23:42,690 --> 00:23:46,590
anymore if you forget to give it back

00:23:44,730 --> 00:23:48,299
then you keep on using more and more

00:23:46,590 --> 00:23:51,240
memory and then at the end you run out

00:23:48,299 --> 00:23:53,429
of memory but in a managed language like

00:23:51,240 --> 00:23:54,809
like JavaScript or C sharp you don't

00:23:53,429 --> 00:23:57,030
actually need to give that memory

00:23:54,809 --> 00:23:58,470
because the system is so smart that he

00:23:57,030 --> 00:24:00,690
figures out okay you don't need this

00:23:58,470 --> 00:24:03,300
stuff anymore so I'll just reclaim the

00:24:00,690 --> 00:24:04,060
memory for you and this is done by a

00:24:03,300 --> 00:24:05,860
thread

00:24:04,060 --> 00:24:07,780
and bacon thread called the garbage

00:24:05,860 --> 00:24:10,870
collector and what it does it takes all

00:24:07,780 --> 00:24:14,230
your objects all your functions all your

00:24:10,870 --> 00:24:16,210
contexts and goes through and see which

00:24:14,230 --> 00:24:18,700
one depends on which and which one is

00:24:16,210 --> 00:24:21,970
still alive which one is otoscope and

00:24:18,700 --> 00:24:23,620
then it clears up all the space this is

00:24:21,970 --> 00:24:25,960
great because it allows your code to be

00:24:23,620 --> 00:24:29,680
very simple but it sucks

00:24:25,960 --> 00:24:32,160
because in order to do this the garbage

00:24:29,680 --> 00:24:34,840
collector needs to actually freeze all

00:24:32,160 --> 00:24:36,550
all your code from prevent your home

00:24:34,840 --> 00:24:39,100
from running at some point and just

00:24:36,550 --> 00:24:41,080
clear up everything so if you got if you

00:24:39,100 --> 00:24:45,180
create a lot of instances or if you get

00:24:41,080 --> 00:24:48,610
create very complicated instances then

00:24:45,180 --> 00:24:50,770
this becomes this becomes complicated

00:24:48,610 --> 00:24:52,630
and it takes a long time so you don't

00:24:50,770 --> 00:24:54,550
want to do that one example is

00:24:52,630 --> 00:24:56,710
dependency injection so it is something

00:24:54,550 --> 00:24:59,440
that you do a lot with with testing

00:24:56,710 --> 00:25:01,990
right so instead of creating objects

00:24:59,440 --> 00:25:05,410
instead of getting them from the DB what

00:25:01,990 --> 00:25:08,080
do you do you create a container and

00:25:05,410 --> 00:25:10,030
that container is a magic object and

00:25:08,080 --> 00:25:11,650
knows how to build stuff and it knows

00:25:10,030 --> 00:25:13,360
whether you're testing or not testing

00:25:11,650 --> 00:25:15,490
and if you're testing use your test

00:25:13,360 --> 00:25:17,770
object and if you're not testing it's

00:25:15,490 --> 00:25:19,840
going to give you the real object so you

00:25:17,770 --> 00:25:22,360
can like the couple stuff you can do

00:25:19,840 --> 00:25:24,250
stuff without going to the database and

00:25:22,360 --> 00:25:27,100
so on all right you can do fantastic

00:25:24,250 --> 00:25:29,800
stuff like this right so you go to the

00:25:27,100 --> 00:25:33,430
repository say I want to get this thing

00:25:29,800 --> 00:25:35,560
and then and you don't know what it does

00:25:33,430 --> 00:25:37,720
right it could be if we go into a mock

00:25:35,560 --> 00:25:40,270
object but in this case it particularly

00:25:37,720 --> 00:25:41,950
is doing a lot of things like it's the

00:25:40,270 --> 00:25:45,790
invalidation security login and so on

00:25:41,950 --> 00:25:47,230
and you can't do this again because in

00:25:45,790 --> 00:25:49,930
reality what you're doing behind the

00:25:47,230 --> 00:25:51,460
scenes in the in the in the repositories

00:25:49,930 --> 00:25:54,400
you're creating a bunch of objects with

00:25:51,460 --> 00:25:57,310
all this stuff and we can't do that in

00:25:54,400 --> 00:25:59,850
fact we can't do that and therefore

00:25:57,310 --> 00:26:03,820
testing gets really really hard and

00:25:59,850 --> 00:26:06,580
therefore there you go we have very very

00:26:03,820 --> 00:26:12,620
few tests in the code basically we don't

00:26:06,580 --> 00:26:17,180
unit us at all so

00:26:12,620 --> 00:26:20,090
build measure analyze more stuff right

00:26:17,180 --> 00:26:25,880
so I was telling you about about unit

00:26:20,090 --> 00:26:28,400
tests right yeah that's the most

00:26:25,880 --> 00:26:33,860
interesting man in the world so that's

00:26:28,400 --> 00:26:35,540
pretty much a testing strategy so what

00:26:33,860 --> 00:26:38,780
happens when you when you do this right

00:26:35,540 --> 00:26:40,250
so what happens is okay if you do it in

00:26:38,780 --> 00:26:44,000
your likes or during a financial

00:26:40,250 --> 00:26:45,620
institution it's really bad if you're a

00:26:44,000 --> 00:26:49,370
site like Stack Overflow with your main

00:26:45,620 --> 00:26:54,350
customers are developers you get bug

00:26:49,370 --> 00:27:00,140
reports right so we have automated

00:26:54,350 --> 00:27:04,010
testers actually a lot of them do

00:27:00,140 --> 00:27:09,260
JavaScript and what happens is we

00:27:04,010 --> 00:27:11,780
actually get the solution so there you

00:27:09,260 --> 00:27:13,490
go see this is how you approximate stuff

00:27:11,780 --> 00:27:19,720
so you know you do the best of your

00:27:13,490 --> 00:27:19,720
condition anyway so

00:27:22,820 --> 00:27:27,300
anyways if you think you have pressure

00:27:25,170 --> 00:27:30,360
we do our pressure okay so we go down

00:27:27,300 --> 00:27:34,250
and we go we go on TechCrunch okay this

00:27:30,360 --> 00:27:34,250
is not it's not a fake

00:27:35,450 --> 00:27:39,930
okay build measure analyze and it's

00:27:37,920 --> 00:27:44,550
another cycle that we have okay it's not

00:27:39,930 --> 00:27:48,030
exactly that in practice is you know you

00:27:44,550 --> 00:27:49,950
hire great programmers or programmers

00:27:48,030 --> 00:27:50,690
that really have a lot of passion for

00:27:49,950 --> 00:27:55,860
what they do

00:27:50,690 --> 00:27:57,360
hackers and then you give them the right

00:27:55,860 --> 00:27:59,880
tools for the job

00:27:57,360 --> 00:28:02,070
right so you empower them you give them

00:27:59,880 --> 00:28:06,150
you know the harder the one the softer

00:28:02,070 --> 00:28:07,770
they want the trust they want and what

00:28:06,150 --> 00:28:11,700
they do is create great code or

00:28:07,770 --> 00:28:13,410
performant code and having a great code

00:28:11,700 --> 00:28:16,140
base I mean if successful product is

00:28:13,410 --> 00:28:17,670
what gets you again there are kind of

00:28:16,140 --> 00:28:20,220
people that you want to have in your

00:28:17,670 --> 00:28:21,750
company so isn't there a kind of cycle

00:28:20,220 --> 00:28:23,610
that we have but we are very conscious

00:28:21,750 --> 00:28:25,940
about it and it's very much

00:28:23,610 --> 00:28:30,150
part of what we do on a day to day basis

00:28:25,940 --> 00:28:32,220
and so I was just going to talk about

00:28:30,150 --> 00:28:35,340
hackers and this what came out like a

00:28:32,220 --> 00:28:39,690
90s movie so no real hackers look like

00:28:35,340 --> 00:28:42,450
this okay not really in the seventies

00:28:39,690 --> 00:28:51,300
though can anybody guess what company

00:28:42,450 --> 00:28:52,860
disease yeah so yes so we have a policy

00:28:51,300 --> 00:28:54,810
where you can get all all the all the

00:28:52,860 --> 00:28:58,320
tools that you want and if having three

00:28:54,810 --> 00:29:01,230
monitors is absolutely normal and you

00:28:58,320 --> 00:29:03,540
know having your favorite like clicky

00:29:01,230 --> 00:29:05,460
keyboard or you know visual studio if

00:29:03,540 --> 00:29:08,850
you need it or whatever so it's

00:29:05,460 --> 00:29:12,960
important to have all this thing coding

00:29:08,850 --> 00:29:15,030
wise we do stuff that okay people are

00:29:12,960 --> 00:29:18,450
actually I've been discouraged from

00:29:15,030 --> 00:29:22,100
doing in all the other jobs I had like

00:29:18,450 --> 00:29:25,170
for example they compiling your

00:29:22,100 --> 00:29:27,060
intermediate code that gets rendered is

00:29:25,170 --> 00:29:28,890
something maybe you don't do we no js'

00:29:27,060 --> 00:29:31,590
but we do it all the time to in order to

00:29:28,890 --> 00:29:31,990
to improve performance or if you look at

00:29:31,590 --> 00:29:33,880
it

00:29:31,990 --> 00:29:36,160
with queries look at the query plans of

00:29:33,880 --> 00:29:38,170
the my security plans and look at all

00:29:36,160 --> 00:29:42,010
the little bits and tweaks you can put

00:29:38,170 --> 00:29:44,100
into to make it's just likely faster all

00:29:42,010 --> 00:29:48,840
right so it's a cycle again you know

00:29:44,100 --> 00:29:53,100
hackers tools and and results are code

00:29:48,840 --> 00:29:56,050
so in conclusion I have 15 seconds

00:29:53,100 --> 00:29:58,510
okay so performance is a feature and not

00:29:56,050 --> 00:30:01,240
a luxury at least for us as I was

00:29:58,510 --> 00:30:03,910
telling you you know you want this site

00:30:01,240 --> 00:30:06,250
it doesn't fall down and you want a site

00:30:03,910 --> 00:30:08,410
that is usable and but it's you want to

00:30:06,250 --> 00:30:10,690
have the code base which is beautiful in

00:30:08,410 --> 00:30:15,130
our case performance is the beauty of

00:30:10,690 --> 00:30:18,309
our core base in order to optimize

00:30:15,130 --> 00:30:21,429
performance you need to have cycles and

00:30:18,309 --> 00:30:24,340
I'm pretty sure that no matter what your

00:30:21,429 --> 00:30:27,130
priorities are in your in your company

00:30:24,340 --> 00:30:29,380
you have your seen cycles you maybe you

00:30:27,130 --> 00:30:31,570
do a Giles and you have weekly cycles

00:30:29,380 --> 00:30:33,730
but you need to be very conscious about

00:30:31,570 --> 00:30:35,860
these cycles and optimize for them you

00:30:33,730 --> 00:30:38,410
know I'm pretty sure that most companies

00:30:35,860 --> 00:30:43,809
don't measure as much as we do so all

00:30:38,410 --> 00:30:45,190
the cycle schedules hewed up the results

00:30:43,809 --> 00:30:48,160
that you get are become very very

00:30:45,190 --> 00:30:51,220
specific to your case as I was saying

00:30:48,160 --> 00:30:53,530
you know automated testers this is

00:30:51,220 --> 00:30:56,740
specific to us it won't work anywhere

00:30:53,530 --> 00:30:59,470
else but it's also extremely high value

00:30:56,740 --> 00:31:05,260
if you think about all that I've talked

00:30:59,470 --> 00:31:07,360
about and how we can do code which is

00:31:05,260 --> 00:31:09,370
not testable but then we can test it

00:31:07,360 --> 00:31:11,890
another way it's all a chain of things

00:31:09,370 --> 00:31:14,740
that work together and this only works

00:31:11,890 --> 00:31:17,230
for us and you need to build the same

00:31:14,740 --> 00:31:20,380
thing in your own case you need to build

00:31:17,230 --> 00:31:22,030
the perfect architecture for your own

00:31:20,380 --> 00:31:25,809
case if someone comes to you and tells

00:31:22,030 --> 00:31:29,230
you just do whatever architecture acts

00:31:25,809 --> 00:31:31,330
several less we had the new one is

00:31:29,230 --> 00:31:34,059
everything's going to be better maybe

00:31:31,330 --> 00:31:37,770
it's true maybe it's not true you know

00:31:34,059 --> 00:31:40,630
it really depends whether it fits you

00:31:37,770 --> 00:31:45,270
garbage collection is a pain at scale

00:31:40,630 --> 00:31:45,270
and you know I know js2 sorry

00:31:45,390 --> 00:31:49,830
so you need to hire hackers and hire

00:31:47,910 --> 00:31:52,230
people with a passion for coding that go

00:31:49,830 --> 00:31:53,670
beyond you know just merely doing the

00:31:52,230 --> 00:31:57,090
job for eight hours and then going home

00:31:53,670 --> 00:31:58,890
and I need to insert a plug about Stack

00:31:57,090 --> 00:32:01,890
Overflow jobs and this is how we

00:31:58,890 --> 00:32:06,240
monetize so if you want the job we job

00:32:01,890 --> 00:32:09,960
for you and buy three monitors because

00:32:06,240 --> 00:32:13,440
come on they are cheap now so anyway so

00:32:09,960 --> 00:32:17,520
quick announcement you know we have

00:32:13,440 --> 00:32:19,940
badges to encourage good behavior we are

00:32:17,520 --> 00:32:23,070
giving away today in tomorrow this badge

00:32:19,940 --> 00:32:24,870
it's a silver badge cannot robot in

00:32:23,070 --> 00:32:27,990
order to get it you have to come and

00:32:24,870 --> 00:32:30,510
talk to me and I give you a code to

00:32:27,990 --> 00:32:32,190
unlock one for yourself and this just

00:32:30,510 --> 00:32:36,860
encourage people to come and talk to us

00:32:32,190 --> 00:32:40,590
that's all the reason that is there so

00:32:36,860 --> 00:32:44,190
that's thing and that's it so that's my

00:32:40,590 --> 00:32:45,540
Twitter and that's a game so thank you

00:32:44,190 --> 00:32:51,079
very much

00:32:45,540 --> 00:32:51,079

YouTube URL: https://www.youtube.com/watch?v=uNVlQ1yPsto


