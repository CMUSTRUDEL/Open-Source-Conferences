Title: Jan Jongboom: Run Your JS App For Years On A Single Coin Cell - JSConf.Asia 2016
Publication date: 2016-11-30
Playlist: JSConf.Asia 2016
Description: 
	In the past years we have seen a number of initiatives to bring JavaScript to Internet of Things devices. The idea seems great: one language for both device, server and the web application. But IoT devices are a different beast... They have to run for years on a battery, have rock-solid security and networking stacks built in, and there needs to be a story to go from development board to production. We have seen various approaches: from running node.js on an embedded Linux box, to cross-compiling JavaScript to Lua to machine code, to ripping out motherboards out of phones. None of them with much success.
If we want JavaScript on IoT devices we need to start thinking small. IoT devices generally run on microcontrollers. Tiny computers, with processing power measured in MHz and RAM measured in kilobytes. What they lack in processing power, they make up in power consumption - they can easily run for years on a coin cell - and in peripherals, some chips have over a hundred Input/Output ports to connect sensors, actuators and radios. And from there, we need to look at a library ecosystem that is already proven on microcontrollers... Well-tested middleware, that has both security and battery consumption as top priorities.
In this presentation Iâ€˜ll talk about microcontrollers, JavaScript, and tiny beacons; and will probably play with lasers through JavaScript.

Jan keeps following JSConf.Asia around. And we're glad he does! He is now working as Developer Evangelist IoT for ARM, and is always on the lookout on how to connect the web with the real world.
He loves doing unexpected stuff with sensors, flying drones from the browser, and breaking phones.
Before ARM he was a core contributor to Firefox OS, and he wrote hundreds of patches to various open source projects.
He's also a Google Developer Expert for Web technologies.


JSConf.Asia - Capitol Theatre, Singapore - 25+26 November 2016

Source: https://2016.jsconf.asia/
Slides: http://www.slideshare.net/janjongboom/run-your-javascript-app-for-years-on-a-coin-cell-jsconfasia-2016

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:00,500 --> 00:00:18,250
[Music]

00:00:21,380 --> 00:00:27,150
hello hi yes

00:00:25,160 --> 00:00:29,580
incredibly good to be back here

00:00:27,150 --> 00:00:31,650
third time actually here at here in

00:00:29,580 --> 00:00:34,980
Singapore I was here five years ago when

00:00:31,650 --> 00:00:36,930
Thomas organized J s Camtasia was called

00:00:34,980 --> 00:00:39,239
back then my name is Yong Yong boom

00:00:36,930 --> 00:00:42,420
I am developer evangelist IOT at arm

00:00:39,239 --> 00:00:44,730
arms the company that makes it basically

00:00:42,420 --> 00:00:45,539
all the chipsets all the chips are in

00:00:44,730 --> 00:00:47,910
your phones

00:00:45,539 --> 00:00:50,100
in a lot of the smart devices that you

00:00:47,910 --> 00:00:54,390
might have in your house have ARM chips

00:00:50,100 --> 00:00:56,550
in them and we're going to talk a little

00:00:54,390 --> 00:00:59,879
bit about JavaScript and IOT I know that

00:00:56,550 --> 00:01:02,219
this morning if we're talk from woman

00:00:59,879 --> 00:01:05,100
from tehsil we're gonna build on top of

00:01:02,219 --> 00:01:07,710
that we're gonna take it one step

00:01:05,100 --> 00:01:11,130
further we're not just gonna look at

00:01:07,710 --> 00:01:14,130
okay how do I do my prototyping in

00:01:11,130 --> 00:01:16,680
JavaScript but if we go from there how

00:01:14,130 --> 00:01:19,740
can I run that application then on a

00:01:16,680 --> 00:01:23,189
coin sell for multiple years which is a

00:01:19,740 --> 00:01:25,290
challenge so when I propose this to to

00:01:23,189 --> 00:01:26,930
Thomas Thomas said this was me and

00:01:25,290 --> 00:01:29,220
Thomas in Bali earlier this year

00:01:26,930 --> 00:01:32,070
Thomas said yeah it's fine if you come

00:01:29,220 --> 00:01:34,890
back but you need to bring lasers so

00:01:32,070 --> 00:01:37,380
what we have in front of ear for lasers

00:01:34,890 --> 00:01:39,439
that we're gonna utilize later in this

00:01:37,380 --> 00:01:41,549
point and later at later in this talk

00:01:39,439 --> 00:01:47,909
and hopefully I have something for you

00:01:41,549 --> 00:01:49,820
to take home as well so in the last five

00:01:47,909 --> 00:01:51,770
years I've seen JavaScript change a

00:01:49,820 --> 00:01:55,740
tremendous bit

00:01:51,770 --> 00:01:57,420
javascript has more or less and don't

00:01:55,740 --> 00:01:58,640
ask me how it happened jobs get this

00:01:57,420 --> 00:02:01,860
taken over the world

00:01:58,640 --> 00:02:03,840
we we've seen JavaScript pop up

00:02:01,860 --> 00:02:05,790
basically everywhere in the last few

00:02:03,840 --> 00:02:07,259
years you know when I started

00:02:05,790 --> 00:02:10,009
programming and this were in the days

00:02:07,259 --> 00:02:13,320
that Phoebe script was still a thing

00:02:10,009 --> 00:02:15,640
JavaScript first took over the browsers

00:02:13,320 --> 00:02:17,560
then all of a sudden it started taking

00:02:15,640 --> 00:02:20,050
over servers as well when we got no GS

00:02:17,560 --> 00:02:22,210
and the situation that we're now in is

00:02:20,050 --> 00:02:25,030
that is even making its way into the IOT

00:02:22,210 --> 00:02:29,170
space two years ago or a year and a half

00:02:25,030 --> 00:02:31,270
ago it's J's conf us we did a program

00:02:29,170 --> 00:02:34,150
called node Rockets in which we

00:02:31,270 --> 00:02:38,470
developed and builds senior just by

00:02:34,150 --> 00:02:41,110
ourselves a rocket powered by JavaScript

00:02:38,470 --> 00:02:43,570
videos that based on water power will

00:02:41,110 --> 00:02:46,210
shoot up in the air write a JavaScript

00:02:43,570 --> 00:02:48,910
program where we can verify whether it

00:02:46,210 --> 00:02:50,800
was already going down when it goes down

00:02:48,910 --> 00:02:52,870
deploy a parachute lengthen things

00:02:50,800 --> 00:02:54,460
safely get a nice video everything had

00:02:52,870 --> 00:02:57,340
happened as you might see from this

00:02:54,460 --> 00:03:00,520
photo our rocket didn't completely work

00:02:57,340 --> 00:03:02,860
as planned but there was JavaScript

00:03:00,520 --> 00:03:05,920
inside and the reason the JavaScript

00:03:02,860 --> 00:03:07,870
gains momentum here around these kind of

00:03:05,920 --> 00:03:09,910
solutions like I want to build something

00:03:07,870 --> 00:03:11,710
connected or something smart that

00:03:09,910 --> 00:03:13,960
doesn't even need a screen or doesn't

00:03:11,710 --> 00:03:16,240
even it's not even mains powered it's

00:03:13,960 --> 00:03:18,070
because it's easy to learn and because

00:03:16,240 --> 00:03:21,190
there we can easily make a big community

00:03:18,070 --> 00:03:25,120
around it you know we've seen libraries

00:03:21,190 --> 00:03:27,430
like like Johnny Five with team boards

00:03:25,120 --> 00:03:29,350
like tehsil they make it really easy to

00:03:27,430 --> 00:03:32,080
leverage JavaScript leverage the amazing

00:03:29,350 --> 00:03:34,020
community that is around javascript that

00:03:32,080 --> 00:03:36,130
we might miss from traditional

00:03:34,020 --> 00:03:38,650
programming languages traditional

00:03:36,130 --> 00:03:40,900
programming methods for IOT devices and

00:03:38,650 --> 00:03:44,110
see them here to quickly help us build

00:03:40,900 --> 00:03:46,300
connected devices now typically these

00:03:44,110 --> 00:03:48,760
these solutions including the the rocket

00:03:46,300 --> 00:03:51,970
that we built run on a development board

00:03:48,760 --> 00:03:54,520
like a recipe by a chip or maybe a

00:03:51,970 --> 00:03:56,440
tehsil often using a library like Johnny

00:03:54,520 --> 00:04:00,459
v the JavaScript robotics framework

00:03:56,440 --> 00:04:03,430
there many others the key is everything

00:04:00,459 --> 00:04:06,700
is built on top of no GS and that has a

00:04:03,430 --> 00:04:08,830
number of really big downsides the most

00:04:06,700 --> 00:04:13,720
important one is that well no GS is

00:04:08,830 --> 00:04:17,200
desktop software right battery usage has

00:04:13,720 --> 00:04:18,910
never been a concern no Jess's desktop

00:04:17,200 --> 00:04:21,640
software running on desktop great

00:04:18,910 --> 00:04:25,120
computers I can run a full desktop on a

00:04:21,640 --> 00:04:26,710
Raspberry Pi so it means that

00:04:25,120 --> 00:04:30,880
the two biggest downside that I see

00:04:26,710 --> 00:04:33,850
there its first of all it's way over

00:04:30,880 --> 00:04:36,520
powerful we're trying to do every time I

00:04:33,850 --> 00:04:38,050
see an article on the interrupts where

00:04:36,520 --> 00:04:40,000
basically someone says well I got this

00:04:38,050 --> 00:04:43,120
super cool temperature sensor on a

00:04:40,000 --> 00:04:44,560
recipe by three running yeah I wrote the

00:04:43,120 --> 00:04:46,780
program in OGS the only thing that I'm

00:04:44,560 --> 00:04:48,639
thinking at that point is well that

00:04:46,780 --> 00:04:50,830
you're using a quad-core machine to run

00:04:48,639 --> 00:04:54,070
a temperature sensor it's got this

00:04:50,830 --> 00:04:55,930
computer good way around right and this

00:04:54,070 --> 00:04:57,940
is bad if you if you want to go a little

00:04:55,930 --> 00:05:01,330
bit further than just simple prototyping

00:04:57,940 --> 00:05:03,820
on one end it is equally expensive to

00:05:01,330 --> 00:05:08,470
put a Raspberry Pi in everything runs

00:05:03,820 --> 00:05:12,419
you $40 the other thing which is no I

00:05:08,470 --> 00:05:14,770
think is is worse in that sense is that

00:05:12,419 --> 00:05:16,660
well look at look at battery usage

00:05:14,770 --> 00:05:18,970
current consumption arrests replied

00:05:16,660 --> 00:05:23,590
three in idle modes consumes 2 + or 20

00:05:18,970 --> 00:05:25,330
milliamps of current if you if you told

00:05:23,590 --> 00:05:26,740
me this a year ago or no idea what you

00:05:25,330 --> 00:05:28,660
were talking about but let's compare it

00:05:26,740 --> 00:05:30,940
if we want to run that rest free pie 3

00:05:28,660 --> 00:05:32,950
for a year on a battery you know it's

00:05:30,940 --> 00:05:34,840
not even a coin cell relatively powerful

00:05:32,950 --> 00:05:38,110
this is the budget that we need to work

00:05:34,840 --> 00:05:40,900
with we need to be sixteen hundred times

00:05:38,110 --> 00:05:44,789
more efficient to run a recipe by three

00:05:40,900 --> 00:05:48,180
off a battery than we can currently do

00:05:44,789 --> 00:05:48,180
can we do better

00:05:51,759 --> 00:06:00,129
I bet you were expecting Obama here sure

00:05:58,569 --> 00:06:02,050
so let's look a bit at like how

00:06:00,129 --> 00:06:05,110
professional companies do that if I'm

00:06:02,050 --> 00:06:07,509
building a real IT solution today what

00:06:05,110 --> 00:06:09,669
am i using well this for example a

00:06:07,509 --> 00:06:12,159
Honeywell sensor temperature sensor that

00:06:09,669 --> 00:06:14,080
you put outside these weren't fine on

00:06:12,159 --> 00:06:16,830
batteries and if they've run fine on

00:06:14,080 --> 00:06:21,039
batteries for many years the key here is

00:06:16,830 --> 00:06:22,870
my controllers my controllers are really

00:06:21,039 --> 00:06:27,339
tiny computers running on really really

00:06:22,870 --> 00:06:29,379
tiny chips this is one this is a chip

00:06:27,339 --> 00:06:30,849
from Nordic semiconductors it's point

00:06:29,379 --> 00:06:33,129
six centimeters five point six

00:06:30,849 --> 00:06:34,870
centimeters that's a scale that we're

00:06:33,129 --> 00:06:36,669
thinking about this is a development

00:06:34,870 --> 00:06:37,960
board for that ship this little thing

00:06:36,669 --> 00:06:40,509
you can't even see it from the audience

00:06:37,960 --> 00:06:43,899
that is responsible for all computing it

00:06:40,509 --> 00:06:45,550
combines the MCU it combines RAM and

00:06:43,899 --> 00:06:47,740
combines flash storage and a Bluetooth

00:06:45,550 --> 00:06:53,050
chip in a half centimeter by a half a

00:06:47,740 --> 00:06:55,270
centimeter it's insanity but you know

00:06:53,050 --> 00:06:57,520
it's a trade-off yes they're small and

00:06:55,270 --> 00:06:59,560
yes they are cheap typical mic

00:06:57,520 --> 00:07:00,939
controllers run one dollar two dollars

00:06:59,560 --> 00:07:02,680
very easy to integrate in your own

00:07:00,939 --> 00:07:05,020
design but it has a trade-off

00:07:02,680 --> 00:07:06,639
I can't run Linux on of it Linux on it I

00:07:05,020 --> 00:07:09,370
can't run another operating system on it

00:07:06,639 --> 00:07:11,949
the cons run v8 on it so that means that

00:07:09,370 --> 00:07:13,569
no GS is kind of out of the question the

00:07:11,949 --> 00:07:17,919
way they're not powerful enough for that

00:07:13,569 --> 00:07:20,110
a powerful mic controller will maybe

00:07:17,919 --> 00:07:26,009
have 80 megahertz of processor speeds

00:07:20,110 --> 00:07:28,689
and 64 kilobytes of RAM you know and

00:07:26,009 --> 00:07:33,189
with with a lack of power also comes a

00:07:28,689 --> 00:07:37,029
lack of ecosystem because it's hard as a

00:07:33,189 --> 00:07:38,589
program then it's C++ it's assembly that

00:07:37,029 --> 00:07:43,659
means that we don't get a nice ecosystem

00:07:38,589 --> 00:07:45,639
around that we have with JavaScript sort

00:07:43,659 --> 00:07:47,199
of got me thinking I've been I've been

00:07:45,639 --> 00:07:49,959
toying with the idea of JavaScript and

00:07:47,199 --> 00:07:53,409
connected devices for the past two three

00:07:49,959 --> 00:07:56,379
years and in a way I want best of all

00:07:53,409 --> 00:08:00,099
worlds I want two cheap designs of a

00:07:56,379 --> 00:08:03,189
microcontroller I want the easy way of

00:08:00,099 --> 00:08:05,620
integrating that into my own designs but

00:08:03,189 --> 00:08:07,660
also love to have a vibrant and

00:08:05,620 --> 00:08:09,250
community around that similar to what we

00:08:07,660 --> 00:08:13,330
can currently do in the know GS

00:08:09,250 --> 00:08:15,580
connected devices ecosystem wouldn't it

00:08:13,330 --> 00:08:23,410
be amazing if you could run JavaScript

00:08:15,580 --> 00:08:25,060
on these microcontrollers in arm we've

00:08:23,410 --> 00:08:26,620
been thinking about ways of making my

00:08:25,060 --> 00:08:29,020
controller development easier already

00:08:26,620 --> 00:08:30,790
for about the last seven years so we we

00:08:29,020 --> 00:08:33,130
developed a product called

00:08:30,790 --> 00:08:36,039
embeds mr. program working on the day to

00:08:33,130 --> 00:08:37,419
day basis well the first thing that we

00:08:36,039 --> 00:08:39,370
wanted to do is make Mike control

00:08:37,419 --> 00:08:41,380
developing in general easier so we

00:08:39,370 --> 00:08:42,789
created the ambit platform with over a

00:08:41,380 --> 00:08:44,680
hundred board support that's two hundred

00:08:42,789 --> 00:08:45,730
thousand developers you guys have no

00:08:44,680 --> 00:08:49,330
idea what it is because you're not

00:08:45,730 --> 00:08:50,980
embedded deaths but it also means that

00:08:49,330 --> 00:08:53,560
we already have lots of api's libraries

00:08:50,980 --> 00:08:55,000
and community around it's not enough

00:08:53,560 --> 00:08:56,740
that's what I'm saying is if LR

00:08:55,000 --> 00:08:58,930
evangelist I wanna want to have a bigger

00:08:56,740 --> 00:09:02,260
community of course I want that you know

00:08:58,930 --> 00:09:03,480
it's all in C++ and then game along Sam

00:09:02,260 --> 00:09:07,480
Soon

00:09:03,480 --> 00:09:09,490
Sampson developed a Jerry script is not

00:09:07,480 --> 00:09:11,770
the official logo if you've seen

00:09:09,490 --> 00:09:13,360
Seinfeld you understand the reference

00:09:11,770 --> 00:09:15,459
let's develop a Samsung and it's a

00:09:13,360 --> 00:09:18,880
JavaScript VM for ultra constraint

00:09:15,459 --> 00:09:20,800
devices the Jerry's give VM unlike no GS

00:09:18,880 --> 00:09:23,860
runs on Mike Rotolo the whole idea is

00:09:20,800 --> 00:09:26,740
that it fits in 64 K of RAM and it's

00:09:23,860 --> 00:09:28,240
written in Japanese he plus plus so I

00:09:26,740 --> 00:09:32,740
figured if we can combine these two

00:09:28,240 --> 00:09:35,230
projects we have a met on this side

00:09:32,740 --> 00:09:36,580
making it super easy to program on my

00:09:35,230 --> 00:09:39,010
controllers for a lot of different ones

00:09:36,580 --> 00:09:41,380
so we don't need to port to a new market

00:09:39,010 --> 00:09:43,390
role every time comes out we still have

00:09:41,380 --> 00:09:45,520
the flexibility of JavaScript VM so

00:09:43,390 --> 00:09:48,730
that's the project that there were that

00:09:45,520 --> 00:09:50,110
was launched actually this morning and

00:09:48,730 --> 00:09:51,730
worked really hard to get the website

00:09:50,110 --> 00:09:53,500
out which is called JavaScript and

00:09:51,730 --> 00:09:56,110
embeds and it combines the best of all

00:09:53,500 --> 00:10:00,100
worlds of my controller development with

00:09:56,110 --> 00:10:03,160
JavaScript it combines the power to run

00:10:00,100 --> 00:10:06,450
on little tiny boards like these and

00:10:03,160 --> 00:10:10,300
this is a this is a microcontroller

00:10:06,450 --> 00:10:11,470
under $2 retail price and they're two

00:10:10,300 --> 00:10:14,350
dollars you can buy it in single

00:10:11,470 --> 00:10:16,630
quantities as a Wi-Fi chip on board and

00:10:14,350 --> 00:10:19,510
now can run JavaScript can run all your

00:10:16,630 --> 00:10:22,060
programs that is freaking

00:10:19,510 --> 00:10:25,840
awesome that is okay getting ahead of

00:10:22,060 --> 00:10:28,750
myself so today we're releasing that we

00:10:25,840 --> 00:10:30,100
runs on 40 different boards already so

00:10:28,750 --> 00:10:31,950
you can just go to a website pick any of

00:10:30,100 --> 00:10:35,050
those boards so my Wi-Fi so my bluetooth

00:10:31,950 --> 00:10:38,530
all the critical parts drivers operating

00:10:35,050 --> 00:10:39,880
system etc are still written in C++ it's

00:10:38,530 --> 00:10:41,590
it's a project that's been has been

00:10:39,880 --> 00:10:43,210
going for about seven years already so

00:10:41,590 --> 00:10:44,530
we have stuff like deep sleep and have a

00:10:43,210 --> 00:10:48,190
way of like putting your microcontroller

00:10:44,530 --> 00:10:50,200
in really really deep sleep states you

00:10:48,190 --> 00:10:52,210
can leverage or C++ ecosystem around

00:10:50,200 --> 00:10:53,950
it's in every connectivity methods your

00:10:52,210 --> 00:10:56,170
whole application code Korean JavaScript

00:10:53,950 --> 00:10:57,940
still take advantage of our stuff that

00:10:56,170 --> 00:11:00,960
we done on making it run efficiently

00:10:57,940 --> 00:11:03,160
making it go to sleep whenever possible

00:11:00,960 --> 00:11:06,510
while still maintaining the flexibility

00:11:03,160 --> 00:11:08,860
of writing your application in Jas so

00:11:06,510 --> 00:11:10,960
this is one of the simple programs that

00:11:08,860 --> 00:11:14,020
we have really easy how to override

00:11:10,960 --> 00:11:17,490
blinky you start with cloning our sample

00:11:14,020 --> 00:11:20,470
write a little bit of code run gulp

00:11:17,490 --> 00:11:22,330
JavaScript stuff it creates a file and

00:11:20,470 --> 00:11:24,400
you just drag the file onto your boards

00:11:22,330 --> 00:11:26,230
the development board mounts as a USB

00:11:24,400 --> 00:11:28,570
mass storage device so you don't need

00:11:26,230 --> 00:11:32,890
any drivers just drag and drop them

00:11:28,570 --> 00:11:35,710
application running nice flexible be

00:11:32,890 --> 00:11:38,650
aware if you think like yeah I want to

00:11:35,710 --> 00:11:42,430
do this javascript is really really slow

00:11:38,650 --> 00:11:45,570
on this on these things raw performance

00:11:42,430 --> 00:11:47,830
is about a hundred times slower than C++

00:11:45,570 --> 00:11:51,790
but because we've written all the

00:11:47,830 --> 00:11:54,310
critical parts in C++ you know the boot

00:11:51,790 --> 00:11:57,120
load our networking stacks basically

00:11:54,310 --> 00:12:00,040
everything else that not your user code

00:11:57,120 --> 00:12:01,030
efficiency is relatively good especially

00:12:00,040 --> 00:12:03,250
if you sleep a lot

00:12:01,030 --> 00:12:05,200
you can spawn out of JavaScript whenever

00:12:03,250 --> 00:12:06,940
we need it we can run stuff in C++ in a

00:12:05,200 --> 00:12:10,270
separate thread but this way we have

00:12:06,940 --> 00:12:12,040
like a with a model where we have the

00:12:10,270 --> 00:12:14,890
nice flexibility of Java scripts but

00:12:12,040 --> 00:12:17,350
still can run stuff at native speed in

00:12:14,890 --> 00:12:22,720
C++ a bit similar how nodejs does that

00:12:17,350 --> 00:12:25,480
on on Linux systems but it's through

00:12:22,720 --> 00:12:26,650
microcontroller right yeah applications

00:12:25,480 --> 00:12:28,180
code might run a bit slow but it's a

00:12:26,650 --> 00:12:30,910
real microcontroller it's come with all

00:12:28,180 --> 00:12:32,380
the benefits we can run this is one of

00:12:30,910 --> 00:12:33,350
the development boards again this one

00:12:32,380 --> 00:12:36,170
even as a

00:12:33,350 --> 00:12:37,850
little coin cell holder welcomes a

00:12:36,170 --> 00:12:39,970
little here and that's because it's

00:12:37,850 --> 00:12:42,110
actually meant to run off a coin cell

00:12:39,970 --> 00:12:43,520
using this approach we can write

00:12:42,110 --> 00:12:45,530
JavaScript applications that run

00:12:43,520 --> 00:12:46,700
straight on that absent members later it

00:12:45,530 --> 00:12:50,210
also allows you to do some really

00:12:46,700 --> 00:12:52,820
interesting experiments the BBC micro

00:12:50,210 --> 00:12:56,240
bits is a low computer that's been given

00:12:52,820 --> 00:12:59,420
to every 10 and 11 year old kid in both

00:12:56,240 --> 00:13:02,900
the UK and ins and in Iceland now it is

00:12:59,420 --> 00:13:05,600
how they learned blurt program as part

00:13:02,900 --> 00:13:07,130
of their official primary school

00:13:05,600 --> 00:13:09,020
curriculum it's really cool

00:13:07,130 --> 00:13:10,820
all these kids like a million kids have

00:13:09,020 --> 00:13:12,320
gotten like this little board and had

00:13:10,820 --> 00:13:14,240
learned a program and by having an

00:13:12,320 --> 00:13:16,550
abstraction layer on top of it on top of

00:13:14,240 --> 00:13:21,190
like our native api's we can all of a

00:13:16,550 --> 00:13:23,530
sudden have little simulators that run

00:13:21,190 --> 00:13:25,610
sobriquet the program it in the browser

00:13:23,530 --> 00:13:27,350
drag little blocks together we can

00:13:25,610 --> 00:13:29,840
simulate it and after that we compile it

00:13:27,350 --> 00:13:32,090
run it in our VM and all of a sudden

00:13:29,840 --> 00:13:35,480
have the same experience on the device

00:13:32,090 --> 00:13:38,600
and here same thing we can do and this

00:13:35,480 --> 00:13:41,380
simulator that comes with J's and embeds

00:13:38,600 --> 00:13:44,720
I hacked it together in the plane here

00:13:41,380 --> 00:13:47,210
so on top you see basically three three

00:13:44,720 --> 00:13:48,980
LEDs toggling will run exactly the same

00:13:47,210 --> 00:13:50,960
on the board and then we can also fake

00:13:48,980 --> 00:13:52,490
extra peripherals like the Bluetooth

00:13:50,960 --> 00:13:54,860
stack so in this case you can connect I

00:13:52,490 --> 00:13:57,290
see what is happening if I could connect

00:13:54,860 --> 00:14:00,620
my phone to the device and for example

00:13:57,290 --> 00:14:02,360
toggled toggle the LED year which I just

00:14:00,620 --> 00:14:05,030
did so it's some really interesting

00:14:02,360 --> 00:14:06,920
things some other stuff do we do is that

00:14:05,030 --> 00:14:09,860
we abstract away many microcontroller

00:14:06,920 --> 00:14:12,680
problems manual threat management

00:14:09,860 --> 00:14:15,890
interrupts switching it's all abstracted

00:14:12,680 --> 00:14:17,120
away behind the JavaScript event loop so

00:14:15,890 --> 00:14:19,250
even if you wanted to make like a real

00:14:17,120 --> 00:14:20,800
product out of this having a JavaScript

00:14:19,250 --> 00:14:23,030
abstraction on top of it is really nice

00:14:20,800 --> 00:14:24,500
in the future what I would really like

00:14:23,030 --> 00:14:26,120
to do is because we have everything in

00:14:24,500 --> 00:14:28,130
the event loop automatic power

00:14:26,120 --> 00:14:29,240
management just put the device to sleep

00:14:28,130 --> 00:14:31,070
you don't need to do anything you don't

00:14:29,240 --> 00:14:33,320
need to call sleep we just realize oh

00:14:31,070 --> 00:14:36,350
every second do this in between I'll go

00:14:33,320 --> 00:14:38,690
to sleep and make everything magic so to

00:14:36,350 --> 00:14:40,760
come back can we run this on on a on a

00:14:38,690 --> 00:14:45,410
coin cell right now yes

00:14:40,760 --> 00:14:47,030
remember to 20 point 1 to 7 milliamp is

00:14:45,410 --> 00:14:50,090
the budget that we have you want to run

00:14:47,030 --> 00:14:52,130
is one year in AAA battery these are

00:14:50,090 --> 00:14:54,080
numbers of a JavaScript beacon with

00:14:52,130 --> 00:14:57,890
Bluetooth on sending a message every

00:14:54,080 --> 00:15:00,710
seconds broadcasting it outs her budget

00:14:57,890 --> 00:15:02,990
is point zero to a there's seven years

00:15:00,710 --> 00:15:05,720
in an AAA battery and on a coincidence

00:15:02,990 --> 00:15:10,100
out a year and a half that is freaking

00:15:05,720 --> 00:15:14,660
impressive search how script yes thank

00:15:10,100 --> 00:15:16,550
you so current States its released today

00:15:14,660 --> 00:15:20,300
it's some embedded comm /cas

00:15:16,550 --> 00:15:22,160
with 40 board support it's unfortunately

00:15:20,300 --> 00:15:23,900
at the moment if you want to use C++

00:15:22,160 --> 00:15:25,340
libraries we have about 6,000 of them

00:15:23,900 --> 00:15:27,410
for basically every peripheral that

00:15:25,340 --> 00:15:29,420
you'll find if you buy sensor if you buy

00:15:27,410 --> 00:15:32,600
an actuator if you buy an accelerometer

00:15:29,420 --> 00:15:34,160
ever we need a C++ binding right now I'm

00:15:32,600 --> 00:15:35,630
hoping that someone here in the audience

00:15:34,160 --> 00:15:37,550
will say yon of course I'm gonna help

00:15:35,630 --> 00:15:39,290
you with that because then we can

00:15:37,550 --> 00:15:42,560
automate that shooting me to art it's

00:15:39,290 --> 00:15:44,810
Apache 2 license it's better but please

00:15:42,560 --> 00:15:46,910
help us it's gonna be freaking amazing

00:15:44,810 --> 00:15:49,010
I said everything available Emma thumbs

00:15:46,910 --> 00:15:53,630
yes here's one of the things we can do

00:15:49,010 --> 00:15:55,880
with that whoo got lasers controlled

00:15:53,630 --> 00:15:57,080
through JavaScript and I can do stuff

00:15:55,880 --> 00:15:58,280
and I don't know if you can actually see

00:15:57,080 --> 00:15:59,780
this from the audience because they're a

00:15:58,280 --> 00:16:03,050
little bit less bright than I thought

00:15:59,780 --> 00:16:05,090
but lasers JavaScript's all kinds of

00:16:03,050 --> 00:16:06,350
cool stuff runs on the coin cell if this

00:16:05,090 --> 00:16:09,790
is not the future then I don't know what

00:16:06,350 --> 00:16:09,790
is and with that I want to thank you all

00:16:12,420 --> 00:16:14,480

YouTube URL: https://www.youtube.com/watch?v=3HLRwcVqgFE


