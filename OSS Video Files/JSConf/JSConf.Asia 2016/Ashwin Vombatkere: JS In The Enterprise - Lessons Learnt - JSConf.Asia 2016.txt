Title: Ashwin Vombatkere: JS In The Enterprise - Lessons Learnt - JSConf.Asia 2016
Publication date: 2016-12-18
Playlist: JSConf.Asia 2016
Description: 
	I will share my learnings and practices from implementing JavaScript in large enterprises. The intent is to bake these learnings into your planning and development process and help you build sustainable applications for enterprise companies using JavaScript as well.

Ashwin is a Lead Consultant developer with ThoughtWorks. He started his journey over 12 years ago as a developer helping to build enterprise scale Java applications for the leasing industry. Over the years, he has experienced Ruby and had an extended tryst with .net building micro services for the rail industry.
Over the last few years Ashwin spent most of his time building single page JavaScript applications for large enterprises. During this period he has gained experience with Angular, Node.js and a whole suite of other JavaScript utilities to help champion agile delivery.


JSConf.Asia - Capitol Theatre, Singapore - 25+26 November 2016.

Source: https://2016.jsconf.asia/

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:19,120 --> 00:00:24,170
my name is ash will I work for thought

00:00:21,950 --> 00:00:26,330
works as a developer so I've spent a

00:00:24,170 --> 00:00:29,210
little about 12 years in the industry I

00:00:26,330 --> 00:00:32,689
spent most of my career working on back

00:00:29,210 --> 00:00:35,060
in Java and.net applications but over

00:00:32,689 --> 00:00:36,740
the last few years I have worked a lot

00:00:35,060 --> 00:00:40,070
in front in JavaScript applications

00:00:36,740 --> 00:00:41,450
within large enterprises and it's been a

00:00:40,070 --> 00:00:43,460
lot of fun working with JavaScript

00:00:41,450 --> 00:00:45,350
within the enterprise but at the same

00:00:43,460 --> 00:00:47,090
time there are a few lessons that I've

00:00:45,350 --> 00:00:49,520
learned that I'd like to share with

00:00:47,090 --> 00:00:51,440
y'all the intent is so that when you

00:00:49,520 --> 00:00:52,760
take JavaScript into the enterprise you

00:00:51,440 --> 00:00:55,460
are more productive within the

00:00:52,760 --> 00:00:57,829
enterprise you also reduce risk for an

00:00:55,460 --> 00:00:59,750
enterprise and at the same time enjoy

00:00:57,829 --> 00:01:04,009
working with JavaScript within the

00:00:59,750 --> 00:01:06,830
enterprise so I'm going to be primarily

00:01:04,009 --> 00:01:08,600
focusing on three things the first one

00:01:06,830 --> 00:01:11,710
is expectations within an enterprise

00:01:08,600 --> 00:01:14,210
when it comes to building software and

00:01:11,710 --> 00:01:16,790
then I'm going to go over enterprise

00:01:14,210 --> 00:01:18,979
planning and the impact of JavaScript

00:01:16,790 --> 00:01:21,140
when it comes to planning within an

00:01:18,979 --> 00:01:22,760
enterprise and then I'm going to talk

00:01:21,140 --> 00:01:25,190
about certain constraints that are

00:01:22,760 --> 00:01:30,200
present in large enterprises that can

00:01:25,190 --> 00:01:33,200
act as barriers at times so let me start

00:01:30,200 --> 00:01:35,119
with the enterprise expectations these

00:01:33,200 --> 00:01:37,400
are things that need to be managed well

00:01:35,119 --> 00:01:41,869
if not the reality ends up in the

00:01:37,400 --> 00:01:44,840
opposite direction at times so the first

00:01:41,869 --> 00:01:46,310
one I want to focus on is there's an

00:01:44,840 --> 00:01:49,189
expectation within enterprises of

00:01:46,310 --> 00:01:50,840
modularization enterprises by the nature

00:01:49,189 --> 00:01:53,210
of their size and their geographical

00:01:50,840 --> 00:01:55,540
distribution often run similar

00:01:53,210 --> 00:01:58,640
businesses in different regions and

00:01:55,540 --> 00:02:00,830
there is always high appetite for reuse

00:01:58,640 --> 00:02:02,900
within an enterprise an application

00:02:00,830 --> 00:02:04,670
built in one place they want the same

00:02:02,900 --> 00:02:05,990
look and feel similar experience in

00:02:04,670 --> 00:02:08,499
other regions so they want to reuse a

00:02:05,990 --> 00:02:10,879
lot of the code that is being used

00:02:08,499 --> 00:02:13,270
sometimes these things in large

00:02:10,879 --> 00:02:15,650
enterprises are not use case drivel

00:02:13,270 --> 00:02:19,300
so if we don't put a thought towards

00:02:15,650 --> 00:02:22,100
modularization or we use a bad use case

00:02:19,300 --> 00:02:23,390
you can end up with very high costs when

00:02:22,100 --> 00:02:25,640
it comes to reuse of your code across

00:02:23,390 --> 00:02:28,430
regions and this is something that

00:02:25,640 --> 00:02:30,110
enterprises don't like at the same time

00:02:28,430 --> 00:02:33,260
if you don't have a proper use case for

00:02:30,110 --> 00:02:37,220
this reuse you end up over engineering

00:02:33,260 --> 00:02:39,470
the concept of modularization so how do

00:02:37,220 --> 00:02:41,330
we r immediate this right so what we can

00:02:39,470 --> 00:02:44,450
do is we can try and prepare for this

00:02:41,330 --> 00:02:47,959
modularization not overthink it so you

00:02:44,450 --> 00:02:50,870
favor building loosely coupled code try

00:02:47,959 --> 00:02:52,750
and build modules in JavaScript but at

00:02:50,870 --> 00:02:54,650
the same time make sure these modules

00:02:52,750 --> 00:02:56,870
communicate with other modules through

00:02:54,650 --> 00:02:59,000
events rather than point-to-point

00:02:56,870 --> 00:03:01,700
communication for example if you have a

00:02:59,000 --> 00:03:03,230
module that logs in that it raised an

00:03:01,700 --> 00:03:04,910
event once you're successfully logged in

00:03:03,230 --> 00:03:07,550
and people who are interested in that

00:03:04,910 --> 00:03:09,560
event can then react that way this code

00:03:07,550 --> 00:03:12,950
is much more reusable than coupling your

00:03:09,560 --> 00:03:16,610
login module two different modules try

00:03:12,950 --> 00:03:19,750
and share your code as widgets rather

00:03:16,610 --> 00:03:23,239
than as big modules that have

00:03:19,750 --> 00:03:25,730
functionality so these widgets can be

00:03:23,239 --> 00:03:28,010
configurable you can have them as

00:03:25,730 --> 00:03:29,989
resealable widgets make them responsive

00:03:28,010 --> 00:03:31,250
then these widgets can be used in

00:03:29,989 --> 00:03:35,030
different applications within an

00:03:31,250 --> 00:03:38,209
enterprise at the same time start by

00:03:35,030 --> 00:03:40,430
packaging your code so you can share

00:03:38,209 --> 00:03:42,890
your code as bower components you can

00:03:40,430 --> 00:03:45,980
share them as node modules use a package

00:03:42,890 --> 00:03:49,760
manager such as you know npm we heard a

00:03:45,980 --> 00:03:52,310
lot about n p.m. today at the same time

00:03:49,760 --> 00:03:53,989
within enterprises if you see it's very

00:03:52,310 --> 00:03:55,579
difficult to create a module and and

00:03:53,989 --> 00:03:57,380
upload it onto the internet into a

00:03:55,579 --> 00:04:00,320
public repository this is something that

00:03:57,380 --> 00:04:02,540
enterprises wouldn't allow and in this

00:04:00,320 --> 00:04:05,989
case it's important that if you want to

00:04:02,540 --> 00:04:08,239
do node or power you have an internal

00:04:05,989 --> 00:04:10,700
module depository so you can use a tool

00:04:08,239 --> 00:04:13,459
such as artifactory and artifactory

00:04:10,700 --> 00:04:15,920
supports power and npm so you can upload

00:04:13,459 --> 00:04:18,350
your notice your modules to a private

00:04:15,920 --> 00:04:23,150
repository within an enterprise so

00:04:18,350 --> 00:04:25,340
factor this very early the next thing

00:04:23,150 --> 00:04:26,420
I'll focus on is non-functional

00:04:25,340 --> 00:04:29,600
requirements

00:04:26,420 --> 00:04:31,280
right so within an enterprise we often

00:04:29,600 --> 00:04:32,630
underestimate these non functional

00:04:31,280 --> 00:04:35,000
requirements there are quite a few of

00:04:32,630 --> 00:04:38,270
them and primarily around custom

00:04:35,000 --> 00:04:39,770
analytics many enterprises do not allow

00:04:38,270 --> 00:04:41,930
their data to be sent out over the

00:04:39,770 --> 00:04:44,240
Internet so your access to analytic

00:04:41,930 --> 00:04:46,070
tools that are available is less more

00:04:44,240 --> 00:04:49,220
often than ever they have solutions for

00:04:46,070 --> 00:04:50,840
this different solutions you know paid

00:04:49,220 --> 00:04:53,300
solutions running in different parts of

00:04:50,840 --> 00:04:55,810
the world so they would like you to

00:04:53,300 --> 00:04:58,160
integrate with these solutions

00:04:55,810 --> 00:05:00,230
authentication and authorization again

00:04:58,160 --> 00:05:01,910
they have third-party software that does

00:05:00,230 --> 00:05:04,190
it for them we need to integrate with

00:05:01,910 --> 00:05:09,110
this there is always a requirement for a

00:05:04,190 --> 00:05:10,970
lot of auditing within an enterprise so

00:05:09,110 --> 00:05:13,310
if we don't deal with this early you

00:05:10,970 --> 00:05:14,690
often find that we grossly underestimate

00:05:13,310 --> 00:05:17,210
the amount of work involved in

00:05:14,690 --> 00:05:18,950
non-functional requirements and what we

00:05:17,210 --> 00:05:24,500
build is sometimes not reusable across

00:05:18,950 --> 00:05:27,860
regions so a few suggestions to

00:05:24,500 --> 00:05:29,000
remediate this is try and build your non

00:05:27,860 --> 00:05:32,090
functional requirements in a

00:05:29,000 --> 00:05:33,890
non-invasive fashion in JavaScript so

00:05:32,090 --> 00:05:35,480
you can use similar service head

00:05:33,890 --> 00:05:37,370
concepts that you have in Java or.net

00:05:35,480 --> 00:05:40,910
you can do aspect-oriented programming

00:05:37,370 --> 00:05:43,130
within javascript as well and what this

00:05:40,910 --> 00:05:44,480
tends to do is it decouples a lot of

00:05:43,130 --> 00:05:46,520
these non functional requirements from

00:05:44,480 --> 00:05:48,350
your functional code hence making it

00:05:46,520 --> 00:05:50,720
easier to change and it doesn't pollute

00:05:48,350 --> 00:05:53,920
your main business functionality right

00:05:50,720 --> 00:05:57,470
because these are horizontal concerns

00:05:53,920 --> 00:06:00,320
there are many aop frameworks available

00:05:57,470 --> 00:06:02,120
I have worked with angular aop primarily

00:06:00,320 --> 00:06:04,520
there is meld and aspect chase as well

00:06:02,120 --> 00:06:07,790
some of these frameworks also support

00:06:04,520 --> 00:06:09,050
promises so you have a handle to send

00:06:07,790 --> 00:06:12,080
out data once a promise has been

00:06:09,050 --> 00:06:13,760
resolved or rejected right so they have

00:06:12,080 --> 00:06:15,760
support for it so try not to build your

00:06:13,760 --> 00:06:19,040
own use some of these frameworks and

00:06:15,760 --> 00:06:21,440
lastly unit tests your non functional

00:06:19,040 --> 00:06:23,900
requirements because these are very hard

00:06:21,440 --> 00:06:30,170
to debug because they are instrumented

00:06:23,900 --> 00:06:32,720
around your code the next expectation

00:06:30,170 --> 00:06:35,240
within enterprises is often metrics and

00:06:32,720 --> 00:06:37,790
documentation so enterprise is large

00:06:35,240 --> 00:06:39,840
enterprises often have a lot of vendors

00:06:37,790 --> 00:06:42,590
that build things for them

00:06:39,840 --> 00:06:45,389
and they experience vendor churn so

00:06:42,590 --> 00:06:47,430
there is always a risk of losing

00:06:45,389 --> 00:06:49,220
knowledge right which is why there is a

00:06:47,430 --> 00:06:52,770
lot of emphasis on documentation

00:06:49,220 --> 00:06:54,960
sometimes enterprises like to own or

00:06:52,770 --> 00:06:56,790
transfer that ownership to themselves

00:06:54,960 --> 00:06:58,800
once they feel they are ready to take

00:06:56,790 --> 00:07:01,380
over the code at that point they look

00:06:58,800 --> 00:07:04,290
out for documentation and there are

00:07:01,380 --> 00:07:06,180
always kpi's link towards quality of

00:07:04,290 --> 00:07:08,400
what is being generated and it's

00:07:06,180 --> 00:07:10,320
important that we build the same kind of

00:07:08,400 --> 00:07:12,780
quality metrics into our JavaScript code

00:07:10,320 --> 00:07:18,690
that we use for our back-end server side

00:07:12,780 --> 00:07:21,479
code as well so if we don't deal with

00:07:18,690 --> 00:07:23,400
this early it could result in a lot of

00:07:21,479 --> 00:07:24,990
risk to an enterprise and a lot of cost

00:07:23,400 --> 00:07:27,270
as well because the knowledge transfer

00:07:24,990 --> 00:07:28,440
doesn't happen in an effective way so

00:07:27,270 --> 00:07:31,169
there is an expectation for

00:07:28,440 --> 00:07:33,479
documentation if we don't have metrics

00:07:31,169 --> 00:07:35,039
or tools that can give us metrics on the

00:07:33,479 --> 00:07:36,930
kind of quality of the code we are

00:07:35,039 --> 00:07:39,539
writing you would end up with poor

00:07:36,930 --> 00:07:41,729
quality and the most boring thing that

00:07:39,539 --> 00:07:43,250
you will find is having to write a lot

00:07:41,729 --> 00:07:47,840
of documentation towards the end

00:07:43,250 --> 00:07:50,610
right when a lot of context is lost so

00:07:47,840 --> 00:07:53,370
how do we r immediate this start right

00:07:50,610 --> 00:07:54,870
at the beginning do not allow this to

00:07:53,370 --> 00:07:56,010
pile up towards the end be aware that

00:07:54,870 --> 00:07:58,710
this is an expectation within

00:07:56,010 --> 00:08:02,010
enterprises choose a JavaScript analysis

00:07:58,710 --> 00:08:05,220
tool such as say plateau or sonar aureus

00:08:02,010 --> 00:08:07,500
lint and set good thresholds for your

00:08:05,220 --> 00:08:08,940
code quality so lot of these tools are

00:08:07,500 --> 00:08:11,880
able to analyze your cyclomatic

00:08:08,940 --> 00:08:13,410
complexity duplication and structure of

00:08:11,880 --> 00:08:15,270
your code and you know the cleanliness

00:08:13,410 --> 00:08:18,349
of your code they give you very good

00:08:15,270 --> 00:08:20,490
metrics another important thing is

00:08:18,349 --> 00:08:22,229
within enterprises there's always a

00:08:20,490 --> 00:08:24,090
demand to have a holistic view of your

00:08:22,229 --> 00:08:26,550
software quality guide so they have

00:08:24,090 --> 00:08:28,800
tools that generate quality reports for

00:08:26,550 --> 00:08:30,660
their back-end software they do not want

00:08:28,800 --> 00:08:32,940
reports for a front end to be separated

00:08:30,660 --> 00:08:34,890
out from the back end so see always

00:08:32,940 --> 00:08:36,089
within an enterprise go find out what is

00:08:34,890 --> 00:08:38,159
the current tools that are being used

00:08:36,089 --> 00:08:39,690
for analysis see if you can integrate

00:08:38,159 --> 00:08:42,839
your front-end reports with that so you

00:08:39,690 --> 00:08:45,060
get a holistic picture of quality you

00:08:42,839 --> 00:08:47,790
could J stock have comments that

00:08:45,060 --> 00:08:50,209
document your code or even more fun is

00:08:47,790 --> 00:08:52,440
if you can build live documentation that

00:08:50,209 --> 00:08:55,010
stays current with

00:08:52,440 --> 00:08:57,240
the code that you write so there are

00:08:55,010 --> 00:09:02,250
runtimes that allow you to inspect them

00:08:57,240 --> 00:09:03,540
and you can generate documentation the

00:09:02,250 --> 00:09:08,100
next part I am going to focus on is

00:09:03,540 --> 00:09:10,230
enterprise planning many enterprises

00:09:08,100 --> 00:09:12,810
budget once a year they budget for an

00:09:10,230 --> 00:09:15,660
entire year and they plan for a year's

00:09:12,810 --> 00:09:17,070
worth of work and these promises are

00:09:15,660 --> 00:09:19,080
then made by the business to their

00:09:17,070 --> 00:09:21,390
customers and once that is done you will

00:09:19,080 --> 00:09:27,960
find that functional delivery often

00:09:21,390 --> 00:09:29,670
takes assumes priority JavaScript world

00:09:27,960 --> 00:09:33,030
is a lot of fun but there's also a lot

00:09:29,670 --> 00:09:34,680
of churn and this churn could result in

00:09:33,030 --> 00:09:36,660
frequent rewrites and this is often

00:09:34,680 --> 00:09:40,680
unanticipated when it comes to a

00:09:36,660 --> 00:09:42,120
year-long worth of work right and just

00:09:40,680 --> 00:09:43,920
to pursue that your long worth of work

00:09:42,120 --> 00:09:45,930
if we don't stay on the upgrade path

00:09:43,920 --> 00:09:53,610
this is going to increase the cost and

00:09:45,930 --> 00:09:56,280
risk of delaying this sorry so how do we

00:09:53,610 --> 00:09:57,750
r immediate this situation right so it

00:09:56,280 --> 00:10:01,050
would be good if we can prepare for this

00:09:57,750 --> 00:10:03,720
churn you know and then protect yourself

00:10:01,050 --> 00:10:09,360
from the churn and create a Java Script

00:10:03,720 --> 00:10:10,530
decorator within the enterprise so I'll

00:10:09,360 --> 00:10:14,060
talk a bit about preparing for this

00:10:10,530 --> 00:10:16,470
journal so often front-end code has been

00:10:14,060 --> 00:10:17,970
mainly for validation purposes but

00:10:16,470 --> 00:10:19,500
things have changed right we are now

00:10:17,970 --> 00:10:21,780
using frameworks such as angular or

00:10:19,500 --> 00:10:23,850
ember wherein you can have a lot of

00:10:21,780 --> 00:10:25,950
logic sitting within the front end now I

00:10:23,850 --> 00:10:27,390
think a lot of the programming

00:10:25,950 --> 00:10:28,940
principles that apply to back-end code

00:10:27,390 --> 00:10:31,920
apply to your front and software as well

00:10:28,940 --> 00:10:34,320
so within your MVC framework as well you

00:10:31,920 --> 00:10:36,720
can layer your code into controllers

00:10:34,320 --> 00:10:38,640
that manage your UI and then you can

00:10:36,720 --> 00:10:40,560
have layers of code such as facades that

00:10:38,640 --> 00:10:44,370
you know delegate to a service layer

00:10:40,560 --> 00:10:46,650
which then talk to your back-end now if

00:10:44,370 --> 00:10:48,930
you do not want to couple yourself to a

00:10:46,650 --> 00:10:51,470
framework try and keep your facade

00:10:48,930 --> 00:10:53,580
services etc and plain old JavaScript

00:10:51,470 --> 00:10:55,260
because then it makes it easier to

00:10:53,580 --> 00:10:56,640
change because only your controllers

00:10:55,260 --> 00:11:00,660
then are coupled to a framework that's

00:10:56,640 --> 00:11:02,820
undergoing the chump also try and use

00:11:00,660 --> 00:11:05,850
dependency injection for whatever

00:11:02,820 --> 00:11:08,370
objects that you build things like xmas

00:11:05,850 --> 00:11:10,440
six modules or required a system days

00:11:08,370 --> 00:11:11,819
these help you inject dependencies and

00:11:10,440 --> 00:11:13,500
makes it much more easy to unit test

00:11:11,819 --> 00:11:17,759
your code right and swapping out

00:11:13,500 --> 00:11:20,399
dependencies becomes easier once you are

00:11:17,759 --> 00:11:24,800
prepared protect yourself as well from

00:11:20,399 --> 00:11:28,079
this Joan so favor hi unit test coverage

00:11:24,800 --> 00:11:29,490
at the same time try and make sure that

00:11:28,079 --> 00:11:30,779
your unit tests are not coupled to the

00:11:29,490 --> 00:11:33,779
framework that's undergoing shown

00:11:30,779 --> 00:11:35,819
because these are your safety net and if

00:11:33,779 --> 00:11:37,709
they break when the framework changes

00:11:35,819 --> 00:11:39,000
then you do not have anything to verify

00:11:37,709 --> 00:11:42,360
that your code is still doing what it

00:11:39,000 --> 00:11:43,920
was supposed to write so and then have

00:11:42,360 --> 00:11:45,810
high functional test coverage as well

00:11:43,920 --> 00:11:47,940
these often don't tend to make

00:11:45,810 --> 00:11:50,069
assumptions of the underlying tech

00:11:47,940 --> 00:11:51,240
that's being used so when you change a

00:11:50,069 --> 00:11:53,220
framework these tests hopefully

00:11:51,240 --> 00:11:56,459
shouldn't change and they can be your

00:11:53,220 --> 00:11:58,259
safety net lastly to work well with the

00:11:56,459 --> 00:12:00,000
business make sure that you factor the

00:11:58,259 --> 00:12:03,750
upgrades for the software choices that

00:12:00,000 --> 00:12:05,790
you've made into the plan and plan your

00:12:03,750 --> 00:12:07,740
work accordingly make sure you include

00:12:05,790 --> 00:12:09,060
your tests and documentation because

00:12:07,740 --> 00:12:12,769
these two might change because of the

00:12:09,060 --> 00:12:12,769
churn we often tend to miss these out

00:12:13,189 --> 00:12:20,389
create a jace TechRadar what does this

00:12:17,310 --> 00:12:22,889
radar do this radar would help you

00:12:20,389 --> 00:12:25,529
standardize within the enterprise what

00:12:22,889 --> 00:12:26,939
frameworks you want to adopt right my

00:12:25,529 --> 00:12:27,810
adopt what I mean is these are things

00:12:26,939 --> 00:12:29,370
that have worked well with and

00:12:27,810 --> 00:12:31,199
enterprise have been very productive

00:12:29,370 --> 00:12:33,959
than an enterprise so you continue to

00:12:31,199 --> 00:12:35,430
use it within the enterprise trial is

00:12:33,959 --> 00:12:37,199
somewhere where you have projects that

00:12:35,430 --> 00:12:38,759
can absorb a bit of risk you believe

00:12:37,199 --> 00:12:43,380
something will work and you can try it

00:12:38,759 --> 00:12:45,329
out then SS is where you're actually

00:12:43,380 --> 00:12:46,620
just spiking out with this piece of

00:12:45,329 --> 00:12:48,089
software and trying to find out whether

00:12:46,620 --> 00:12:50,880
this is going to help within an

00:12:48,089 --> 00:12:52,709
enterprise hold is a recommendation that

00:12:50,880 --> 00:12:55,110
you're making stop using something

00:12:52,709 --> 00:12:57,060
within an enterprise all right so this

00:12:55,110 --> 00:12:59,939
helps in bringing about some consistency

00:12:57,060 --> 00:13:01,290
in the choice of frameworks because we

00:12:59,939 --> 00:13:04,050
are spoiled by choice in the JavaScript

00:13:01,290 --> 00:13:06,180
world periodically try and refine this

00:13:04,050 --> 00:13:07,709
radar so that it stays current this can

00:13:06,180 --> 00:13:14,069
be curated by a group of key people

00:13:07,709 --> 00:13:17,069
within the enterprise lastly focus on

00:13:14,069 --> 00:13:19,279
enterprise constraints so the first

00:13:17,069 --> 00:13:22,829
constraint is the browser ecosystem

00:13:19,279 --> 00:13:24,180
now enterprises always want their

00:13:22,829 --> 00:13:27,060
software to be supported on all versions

00:13:24,180 --> 00:13:28,829
of available process read ie6 not

00:13:27,060 --> 00:13:32,639
anymore but I have been in those

00:13:28,829 --> 00:13:34,200
situations right and unfortunately some

00:13:32,639 --> 00:13:36,300
of these browsers are not even available

00:13:34,200 --> 00:13:38,519
within the enterprise so enterprises

00:13:36,300 --> 00:13:40,380
have a way of you know installing

00:13:38,519 --> 00:13:43,709
software and it's very hard to get the

00:13:40,380 --> 00:13:45,870
kind of version that you want and based

00:13:43,709 --> 00:13:47,610
on this browser choice the choice of

00:13:45,870 --> 00:13:50,040
frameworks that you use might end up

00:13:47,610 --> 00:13:51,899
with need for poly filling which we know

00:13:50,040 --> 00:13:58,889
is not very performant in browsers such

00:13:51,899 --> 00:14:04,139
as I now this could result in high

00:13:58,889 --> 00:14:08,220
maintenance and low performance one of

00:14:04,139 --> 00:14:10,800
the ways to remediate this is you could

00:14:08,220 --> 00:14:11,730
use analytics from applications that

00:14:10,800 --> 00:14:14,070
have already been built in the

00:14:11,730 --> 00:14:15,449
enterprise to know what is the browser

00:14:14,070 --> 00:14:17,850
said that your customers are currently

00:14:15,449 --> 00:14:20,250
using use this to drive your technical

00:14:17,850 --> 00:14:23,220
choices and make choices where you can

00:14:20,250 --> 00:14:26,010
avoid poly filling set up a process for

00:14:23,220 --> 00:14:27,720
installing the supported browsers so

00:14:26,010 --> 00:14:28,890
that you can deliver in an agile fashion

00:14:27,720 --> 00:14:34,730
and you don't know how to have to delay

00:14:28,890 --> 00:14:37,470
your testing to the end and lastly

00:14:34,730 --> 00:14:39,329
focus on a constraint which is

00:14:37,470 --> 00:14:41,970
enterprises have a lockdown environment

00:14:39,329 --> 00:14:43,440
when it comes to internet access so it's

00:14:41,970 --> 00:14:44,940
often very difficult to just get into an

00:14:43,440 --> 00:14:48,029
enterprise and do an NPM install and it

00:14:44,940 --> 00:14:49,699
will not work so there is always limited

00:14:48,029 --> 00:14:51,990
internet access within an enterprise

00:14:49,699 --> 00:14:53,699
there are lengthy software approval

00:14:51,990 --> 00:14:58,050
processes for installing any piece of

00:14:53,699 --> 00:15:01,350
software this becomes a barrier using

00:14:58,050 --> 00:15:05,970
open source and also results in a lot of

00:15:01,350 --> 00:15:08,160
loss of productivity so remediation is

00:15:05,970 --> 00:15:09,990
prepared for open source as i said

00:15:08,160 --> 00:15:12,120
earlier provision and internal package

00:15:09,990 --> 00:15:15,079
repository such as artifactory which can

00:15:12,120 --> 00:15:17,399
get you your Bower and NPM modules

00:15:15,079 --> 00:15:19,350
request for read-only access to github

00:15:17,399 --> 00:15:21,510
so that you can install things from the

00:15:19,350 --> 00:15:23,040
internet and also a soft and internet

00:15:21,510 --> 00:15:26,360
access because for open source to be

00:15:23,040 --> 00:15:29,040
successful you need good forum support

00:15:26,360 --> 00:15:30,600
I'll finish by talking about the last

00:15:29,040 --> 00:15:31,939
constraint which is compliance and

00:15:30,600 --> 00:15:34,619
security

00:15:31,939 --> 00:15:36,899
with front-end JavaScript applications

00:15:34,619 --> 00:15:39,480
some part of your enterprise data now

00:15:36,899 --> 00:15:40,920
begins to reside in the browser they

00:15:39,480 --> 00:15:44,129
reside in browser caches they could

00:15:40,920 --> 00:15:47,189
reside on the disk of the user now if

00:15:44,129 --> 00:15:48,779
this is not secure then it could result

00:15:47,189 --> 00:15:50,699
in a regulatory violation for

00:15:48,779 --> 00:15:53,309
enterprises which can bring a lot of

00:15:50,699 --> 00:15:57,989
risk financial risk and reputational

00:15:53,309 --> 00:15:59,549
risk to an enterprise so you can

00:15:57,989 --> 00:16:01,230
remediate this by setting up a

00:15:59,549 --> 00:16:03,869
certification and approval process right

00:16:01,230 --> 00:16:05,699
at the beginning make sure that you have

00:16:03,869 --> 00:16:06,959
competent people or bodies to certify

00:16:05,699 --> 00:16:09,269
that whatever data you are going to be

00:16:06,959 --> 00:16:11,220
storing now in the front end is secure

00:16:09,269 --> 00:16:13,679
and it is compliant with the policies

00:16:11,220 --> 00:16:15,540
that govern the enterprise and also put

00:16:13,679 --> 00:16:17,220
in a licence approval process to make

00:16:15,540 --> 00:16:19,160
sure that the enterprise is safe from

00:16:17,220 --> 00:16:22,679
the kind of software that you are using

00:16:19,160 --> 00:16:25,139
we often minify a JavaScript code there

00:16:22,679 --> 00:16:27,089
are options to include the licenses and

00:16:25,139 --> 00:16:29,819
not have them removed from the software

00:16:27,089 --> 00:16:31,589
so just be aware about this so this is

00:16:29,819 --> 00:16:33,769
all I have to share with you folks thank

00:16:31,589 --> 00:16:33,769

YouTube URL: https://www.youtube.com/watch?v=loh8MarYBfw


