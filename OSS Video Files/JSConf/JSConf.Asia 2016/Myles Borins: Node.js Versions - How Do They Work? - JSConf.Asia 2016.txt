Title: Myles Borins: Node.js Versions - How Do They Work? - JSConf.Asia 2016
Publication date: 2016-12-15
Playlist: JSConf.Asia 2016
Description: 
	Node.js is growing up, and with that comes the responsibility of delivering proper legacy support. From Node.js Argon (v4.2.0) onwards, there is an official Long Term Support release cycle that lasts for 30 months. How does a project moving at the pace of Node maintain multiple release lines? How does a commit get backported? How is a release actually made? You will learn all this and more in this talk.

Myles is an artist, musician, developer, and inventor. He works for IBM spending most of his time contributing to the node.js ecosystem. He graduated with a Master of Music Science and Technology from c.c.r.m.a. a.k.a the center for computer research in music and acoustics.


JSConf.Asia - Capitol Theatre, Singapore - 25+26 November 2016.

Source: https://2016.jsconf.asia/
Slides: https://kni.sh/jsconf-asia-2016/

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:01,100 --> 00:00:19,839
[Music]

00:00:19,840 --> 00:00:25,130
salamat petang thank you so much all for

00:00:23,150 --> 00:00:26,480
being here I put this in front of every

00:00:25,130 --> 00:00:28,820
one of my presentations it's a lot of

00:00:26,480 --> 00:00:36,220
fun and I'll just stare at it can we get

00:00:28,820 --> 00:00:36,220
the house lights lowered please pardon

00:00:36,700 --> 00:00:46,160
so I look up at this cat and I just kind

00:00:39,560 --> 00:00:47,840
of reach I just do this generally not

00:00:46,160 --> 00:00:55,570
this long but again I'm just stalling

00:00:47,840 --> 00:00:57,770
for the lights and it calms me down as

00:00:55,570 --> 00:01:00,399
long as you keep laughing I'm going to

00:00:57,770 --> 00:01:00,399
keep doing it

00:01:05,800 --> 00:01:12,370
okay that seems good I'm so much more

00:01:09,010 --> 00:01:14,880
relaxed now okay so let's let's talk

00:01:12,370 --> 00:01:19,020
about node versions so my name is miles

00:01:14,880 --> 00:01:25,090
I work for a small disruptive startup

00:01:19,020 --> 00:01:27,880
called IBM and I contribute to a small

00:01:25,090 --> 00:01:29,380
platform called nodejs it's worth

00:01:27,880 --> 00:01:31,390
mentioning you'll see cut at the bottom

00:01:29,380 --> 00:01:33,970
here the opinions in this talk are my

00:01:31,390 --> 00:01:35,500
own you know you got to just say that if

00:01:33,970 --> 00:01:38,200
you're ever up on stage I advise that

00:01:35,500 --> 00:01:42,040
you say that always cover yourself but

00:01:38,200 --> 00:01:44,320
so version how do they work so it turns

00:01:42,040 --> 00:01:47,170
out you know versions are versions are a

00:01:44,320 --> 00:01:50,080
lot like magnets and stick with me on

00:01:47,170 --> 00:01:57,010
this for a second versions versions are

00:01:50,080 --> 00:01:59,110
a lot like magnets primarily in the way

00:01:57,010 --> 00:02:01,150
that many people are pretty darn

00:01:59,110 --> 00:02:02,680
confused about how they work like how do

00:02:01,150 --> 00:02:04,090
magnets work I don't know how two

00:02:02,680 --> 00:02:05,590
versions work well I do know so that's

00:02:04,090 --> 00:02:08,679
why I'm here I'm going to tell you about

00:02:05,590 --> 00:02:11,350
it but you know real talk this stuff is

00:02:08,679 --> 00:02:14,350
complicated there's a lot of moving

00:02:11,350 --> 00:02:15,700
parts and trying to hold it all in your

00:02:14,350 --> 00:02:17,260
head at one time can be really hard

00:02:15,700 --> 00:02:20,830
especially if it's not something that

00:02:17,260 --> 00:02:22,660
you're used to but you know the nice

00:02:20,830 --> 00:02:25,030
thing here is that you don't actually

00:02:22,660 --> 00:02:27,430
need to understand everything to

00:02:25,030 --> 00:02:28,950
contribute in a meaningful way I think

00:02:27,430 --> 00:02:31,690
this is a really great takeaway for

00:02:28,950 --> 00:02:34,060
software in general or even just you

00:02:31,690 --> 00:02:35,739
know like life but you don't need to

00:02:34,060 --> 00:02:37,300
understand everything to make a

00:02:35,739 --> 00:02:39,880
difference to contribute and to help

00:02:37,300 --> 00:02:41,080
make a difference so what we're going to

00:02:39,880 --> 00:02:43,060
do is we're going to start with a small

00:02:41,080 --> 00:02:44,830
piece we're going to break it down and

00:02:43,060 --> 00:02:47,050
figure out how this becomes something

00:02:44,830 --> 00:02:50,320
bigger and the first small piece to talk

00:02:47,050 --> 00:02:52,720
about is semantic versioning Rico is

00:02:50,320 --> 00:02:56,020
awesome and brought it up earlier and

00:02:52,720 --> 00:02:58,239
you know we see this in any of you have

00:02:56,020 --> 00:02:59,620
written code how many of you have have

00:02:58,239 --> 00:03:01,930
heard of semantic versioning before can

00:02:59,620 --> 00:03:03,790
I just see hands that's awesome that's a

00:03:01,930 --> 00:03:07,150
lot of you for those of you who haven't

00:03:03,790 --> 00:03:08,920
any time you see a version number that

00:03:07,150 --> 00:03:11,200
version number can be semantic

00:03:08,920 --> 00:03:12,610
versioning I'll say can be because some

00:03:11,200 --> 00:03:13,660
people just like to put random numbers

00:03:12,610 --> 00:03:16,000
in front of their code and it doesn't

00:03:13,660 --> 00:03:18,520
mean anything but what semantic

00:03:16,000 --> 00:03:19,630
versioning is is it's a contract it's a

00:03:18,520 --> 00:03:21,370
contract from the people who

00:03:19,630 --> 00:03:24,430
we're developing the code to the people

00:03:21,370 --> 00:03:26,440
are using the code to let them know how

00:03:24,430 --> 00:03:28,600
the code works and what kind of changes

00:03:26,440 --> 00:03:32,290
to expect them between versions we have

00:03:28,600 --> 00:03:34,300
the major the minor and the patch

00:03:32,290 --> 00:03:36,240
version numbers and so let's talk a

00:03:34,300 --> 00:03:40,060
little bit about what those are

00:03:36,240 --> 00:03:42,610
assembler a patch is any change which

00:03:40,060 --> 00:03:45,790
does not add new features and does not

00:03:42,610 --> 00:03:47,620
break any expected behavior a patch

00:03:45,790 --> 00:03:51,220
change can be an update to documentation

00:03:47,620 --> 00:03:53,470
it can be an update to a test it can be

00:03:51,220 --> 00:03:55,780
an optimization to make something faster

00:03:53,470 --> 00:03:57,010
it could be a bug fix there's a whole

00:03:55,780 --> 00:03:59,020
list of things that can come in

00:03:57,010 --> 00:04:00,160
assembler patch and basically as I was

00:03:59,020 --> 00:04:02,020
saying the only thing that's important

00:04:00,160 --> 00:04:06,370
is it's not a new feature and it doesn't

00:04:02,020 --> 00:04:09,420
change behavior what's a minor so a

00:04:06,370 --> 00:04:13,360
minor is anything that adds any new

00:04:09,420 --> 00:04:15,370
functionality to a piece of code this

00:04:13,360 --> 00:04:20,830
can be a new function this can be an

00:04:15,370 --> 00:04:22,780
extended API this could be this could be

00:04:20,830 --> 00:04:24,670
a new feature that isn't even something

00:04:22,780 --> 00:04:26,800
that you directly call on but it just

00:04:24,670 --> 00:04:29,350
kind of changes the way things work any

00:04:26,800 --> 00:04:30,700
time that you add something new to a

00:04:29,350 --> 00:04:32,410
code and you're doing a release you

00:04:30,700 --> 00:04:36,610
should do that release as December minor

00:04:32,410 --> 00:04:38,890
a December major is any change that's

00:04:36,610 --> 00:04:40,810
breaking that could be changing the name

00:04:38,890 --> 00:04:42,940
of a function that could be changing the

00:04:40,810 --> 00:04:44,770
functionality of a return in the node

00:04:42,940 --> 00:04:46,390
project we even consider changing error

00:04:44,770 --> 00:04:49,780
messages assembler major because of how

00:04:46,390 --> 00:04:51,730
many people rely on our error messages

00:04:49,780 --> 00:04:53,800
for making decisions or for checking

00:04:51,730 --> 00:04:55,210
things you may be doing like a catch and

00:04:53,800 --> 00:04:58,650
then making a change based on the catch

00:04:55,210 --> 00:05:00,820
of a throw so we'll get more into

00:04:58,650 --> 00:05:04,570
examples of things that are breaking a

00:05:00,820 --> 00:05:06,310
little bit later so node has a number of

00:05:04,570 --> 00:05:07,960
different release lines we have the

00:05:06,310 --> 00:05:09,610
current release line which is most

00:05:07,960 --> 00:05:12,460
recently released v seven point two

00:05:09,610 --> 00:05:14,050
point zero that was released on Tuesday

00:05:12,460 --> 00:05:17,770
or as I've learned on Wednesday in

00:05:14,050 --> 00:05:20,920
Singapore we have active LTS there's

00:05:17,770 --> 00:05:23,800
versions 6.9 point 1 and version four

00:05:20,920 --> 00:05:26,370
point six point two these are two

00:05:23,800 --> 00:05:28,600
different release lines v4 has been

00:05:26,370 --> 00:05:32,229
being released a little bit longer and

00:05:28,600 --> 00:05:33,340
v6 is a little more is a little newer v6

00:05:32,229 --> 00:05:36,070
was actually moved in

00:05:33,340 --> 00:05:37,840
LTS about a month ago and we'll talk a

00:05:36,070 --> 00:05:40,870
little bit more about what LTS is it

00:05:37,840 --> 00:05:42,550
stands for long-term support and we have

00:05:40,870 --> 00:05:45,820
maintenance LT LT s and you're going to

00:05:42,550 --> 00:05:48,340
see these 0 1217 you'll notice that V 0

00:05:45,820 --> 00:05:50,320
10 is not on there anymore which is

00:05:48,340 --> 00:05:51,850
really great 10 was around for a long

00:05:50,320 --> 00:05:54,910
time and it's it's great that we don't

00:05:51,850 --> 00:05:56,050
need to maintain it anymore because it

00:05:54,910 --> 00:05:58,660
was very different than all the other

00:05:56,050 --> 00:06:00,940
releases and we'll talk about why so as

00:05:58,660 --> 00:06:03,520
I said the 0-10 is no longer mint

00:06:00,940 --> 00:06:05,650
maintained and v-0 12 is actually going

00:06:03,520 --> 00:06:07,240
to be end of life in December so if any

00:06:05,650 --> 00:06:09,070
of you are running note and production

00:06:07,240 --> 00:06:11,650
at your company's and you currently have

00:06:09,070 --> 00:06:13,030
stuff running on V 0 10 or V 0 12 you

00:06:11,650 --> 00:06:14,620
should work on getting that upgraded as

00:06:13,030 --> 00:06:16,360
soon as possible and we'll talk a little

00:06:14,620 --> 00:06:20,080
bit later about what versions to use and

00:06:16,360 --> 00:06:22,810
and why so you know we were talking

00:06:20,080 --> 00:06:25,630
about V 0 10 and then V 0 12 and then

00:06:22,810 --> 00:06:28,389
all of a sudden we jump to v4 and v6 so

00:06:25,630 --> 00:06:30,490
where the heck did V 1 through 3 go and

00:06:28,389 --> 00:06:31,990
what's the deal with 12 and where's 5

00:06:30,490 --> 00:06:35,919
there's all these different numbers what

00:06:31,990 --> 00:06:38,800
do they mean so when node when the node

00:06:35,919 --> 00:06:40,960
project was started you had even an odd

00:06:38,800 --> 00:06:42,639
releases and the even releases were

00:06:40,960 --> 00:06:45,310
stable releases and the odd releases

00:06:42,639 --> 00:06:47,169
were unstable releases and for a very

00:06:45,310 --> 00:06:50,440
long time you would have you know like

00:06:47,169 --> 00:06:51,910
v08 and that was a stable release and it

00:06:50,440 --> 00:06:53,530
was expected not to have any breaking

00:06:51,910 --> 00:06:55,300
changes on it and then you would have V

00:06:53,530 --> 00:06:57,940
0 11 we're more experimental things

00:06:55,300 --> 00:06:58,990
would happen v9 we're more expensive

00:06:57,940 --> 00:07:01,840
things would happen and then when they

00:06:58,990 --> 00:07:04,539
were ready for a bump they would bump up

00:07:01,840 --> 00:07:05,950
to an even number again you're going to

00:07:04,539 --> 00:07:08,289
notice there's an interesting pattern in

00:07:05,950 --> 00:07:10,990
cember if you do not have a 1 in the

00:07:08,289 --> 00:07:12,700
first digit your sembra minor digit

00:07:10,990 --> 00:07:14,560
actually becomes December major digit

00:07:12,700 --> 00:07:16,389
and you're cember patch digit becomes

00:07:14,560 --> 00:07:18,940
your sin ver minor digit and you end up

00:07:16,389 --> 00:07:21,970
losing the granularity of even having

00:07:18,940 --> 00:07:23,860
the idea of assembler patch this is a

00:07:21,970 --> 00:07:27,220
problem if you want to follow some ver

00:07:23,860 --> 00:07:28,690
direct like to the key and the spec and

00:07:27,220 --> 00:07:30,070
that's why actually a lot of people

00:07:28,690 --> 00:07:32,260
suggest that you start your code at

00:07:30,070 --> 00:07:36,010
version 1 point 0 which may not be

00:07:32,260 --> 00:07:37,570
entirely intuitive based on practices in

00:07:36,010 --> 00:07:39,430
the past many people would wait until

00:07:37,570 --> 00:07:41,770
their code base was stable and reliable

00:07:39,430 --> 00:07:44,560
before going to one and using going to

00:07:41,770 --> 00:07:46,340
one as a way to signal that personally I

00:07:44,560 --> 00:07:47,480
think having that extra grand

00:07:46,340 --> 00:07:50,180
molarity and the ability to stick

00:07:47,480 --> 00:07:51,380
December is way more important people

00:07:50,180 --> 00:07:55,070
will know the stability based on your

00:07:51,380 --> 00:07:57,830
documentation so it started taking a

00:07:55,070 --> 00:08:00,380
really long time to get to v-0 12 the

00:07:57,830 --> 00:08:03,020
0-10 was the stable version of node for

00:08:00,380 --> 00:08:04,699
almost two years in the path 20 12

00:08:03,020 --> 00:08:07,370
wasn't entirely clear and even more so

00:08:04,699 --> 00:08:09,680
than that the path to v1 was like

00:08:07,370 --> 00:08:11,180
completely people had no idea when node

00:08:09,680 --> 00:08:13,910
was going to go to v1 and start being

00:08:11,180 --> 00:08:17,090
able to properly follow cember and a

00:08:13,910 --> 00:08:19,820
number of people on the project fed up

00:08:17,090 --> 00:08:21,979
with waiting fork the project in

00:08:19,820 --> 00:08:23,479
December of 2014 it's hard to believe

00:08:21,979 --> 00:08:26,240
that it's almost been two years since I

00:08:23,479 --> 00:08:29,030
ojs when they forked the project they

00:08:26,240 --> 00:08:31,130
did what is actually interestingly the

00:08:29,030 --> 00:08:33,800
correct cember thing and they released

00:08:31,130 --> 00:08:35,240
it as one point oh so this new I ojs

00:08:33,800 --> 00:08:36,979
project came out it came out with

00:08:35,240 --> 00:08:39,050
version 1 point 0 they still released

00:08:36,979 --> 00:08:40,250
binaries that were called node and you

00:08:39,050 --> 00:08:42,200
could have the choice to go and download

00:08:40,250 --> 00:08:46,790
node V 0 10 or you could go and download

00:08:42,200 --> 00:08:50,089
I ojs one and so as that project moved

00:08:46,790 --> 00:08:52,370
forward it just did more releases in the

00:08:50,089 --> 00:08:56,209
februari of 2015 right before node

00:08:52,370 --> 00:08:58,220
summit joint released v 0 12 v 0 dot 12

00:08:56,209 --> 00:09:00,020
did not have any of the updates that

00:08:58,220 --> 00:09:02,150
were happening in the I ojs project and

00:09:00,020 --> 00:09:04,040
had a slightly updated version of v8

00:09:02,150 --> 00:09:05,209
which was still quite old unfortunately

00:09:04,040 --> 00:09:06,560
and I had some updates to

00:09:05,209 --> 00:09:09,230
internationalization which was very

00:09:06,560 --> 00:09:11,000
useful but it had still continued to go

00:09:09,230 --> 00:09:12,470
further away from the direction that a

00:09:11,000 --> 00:09:17,120
lot of the community had been working on

00:09:12,470 --> 00:09:19,750
so during this time the I ojs project

00:09:17,120 --> 00:09:23,300
move forward in n cuts version 1 2 and 3

00:09:19,750 --> 00:09:24,800
based on semantic versioning they had an

00:09:23,300 --> 00:09:26,510
extremely aggressive release process

00:09:24,800 --> 00:09:27,920
where basically anytime that something

00:09:26,510 --> 00:09:29,660
was agreed on that it should be landed

00:09:27,920 --> 00:09:30,950
it just landed and when they cut a

00:09:29,660 --> 00:09:33,680
release they would just cut a release

00:09:30,950 --> 00:09:35,779
with the appropriate December to signal

00:09:33,680 --> 00:09:37,520
the release line this is really great as

00:09:35,779 --> 00:09:38,900
a way to move a project forward quickly

00:09:37,520 --> 00:09:41,089
and there was a lot of ground to catch

00:09:38,900 --> 00:09:42,740
up on the node project but this isn't

00:09:41,089 --> 00:09:43,790
the best way to do something when you

00:09:42,740 --> 00:09:45,770
have a project that's being run in

00:09:43,790 --> 00:09:48,740
production by companies such as NASA and

00:09:45,770 --> 00:09:50,000
paypal and netflix they need something

00:09:48,740 --> 00:09:52,130
that's a little bit more reliable and

00:09:50,000 --> 00:09:54,380
you can't be expecting your teams to do

00:09:52,130 --> 00:09:58,160
assembler major bump every other week

00:09:54,380 --> 00:09:59,480
and have to fix broken stuff so node was

00:09:58,160 --> 00:10:01,639
put in a foundation

00:09:59,480 --> 00:10:03,740
and the projects I ojs and node were

00:10:01,639 --> 00:10:06,380
merged as version four point oh in

00:10:03,740 --> 00:10:07,820
September of 2015 this is around the

00:10:06,380 --> 00:10:12,139
same time that I started working on the

00:10:07,820 --> 00:10:15,620
project so what we have up here is our

00:10:12,139 --> 00:10:18,649
release schedule for nodejs so what you

00:10:15,620 --> 00:10:21,860
can see up here is node 0 10 which ended

00:10:18,649 --> 00:10:24,709
maintenance in October 2016 we could see

00:10:21,860 --> 00:10:26,810
that 0 12 had a current release and a

00:10:24,709 --> 00:10:29,000
top in October 2015 and moved into

00:10:26,810 --> 00:10:31,310
active LTS and then it was a maintenance

00:10:29,000 --> 00:10:33,199
until December at which wich point

00:10:31,310 --> 00:10:36,230
december 31st of this year we're going

00:10:33,199 --> 00:10:37,370
to be deprecating node V 0 12 you'll see

00:10:36,230 --> 00:10:38,750
we have master here and we'll talk a

00:10:37,370 --> 00:10:40,820
little bit more about that and how we

00:10:38,750 --> 00:10:42,920
manage the different versions and we

00:10:40,820 --> 00:10:45,440
have knowed v4 note before is the is the

00:10:42,920 --> 00:10:47,329
first LTS release of node it is

00:10:45,440 --> 00:10:48,589
currently in an active LTS release

00:10:47,329 --> 00:10:51,290
process we'll talk a little bit more

00:10:48,589 --> 00:10:53,930
about that in a bit and in April of 2017

00:10:51,290 --> 00:10:57,880
that will move to maintenance node v5

00:10:53,930 --> 00:11:02,269
was a current release from October 2015

00:10:57,880 --> 00:11:03,860
until a little bit after April 2016 so

00:11:02,269 --> 00:11:05,600
the way that it works right now is we

00:11:03,860 --> 00:11:07,190
have our current release line every six

00:11:05,600 --> 00:11:11,180
months we do a cember major bump and

00:11:07,190 --> 00:11:13,610
every even release is a release that's

00:11:11,180 --> 00:11:15,380
going to go into into LTS and have you

00:11:13,610 --> 00:11:16,639
every odd release is a release that

00:11:15,380 --> 00:11:19,279
would be deprecated after the release

00:11:16,639 --> 00:11:22,220
process so you can see lower down how we

00:11:19,279 --> 00:11:23,959
have the same release process for v6 and

00:11:22,220 --> 00:11:27,110
we have v7 which is the current release

00:11:23,959 --> 00:11:29,540
which will be end of life you know in in

00:11:27,110 --> 00:11:30,649
October when we bump to v8 so what

00:11:29,540 --> 00:11:33,170
you'll notice on here is that we have an

00:11:30,649 --> 00:11:36,440
active LTS in a maintenance LTS so long

00:11:33,170 --> 00:11:38,060
term support lasts for 30 months after

00:11:36,440 --> 00:11:40,399
the branch has moved out of the current

00:11:38,060 --> 00:11:42,260
release stream you have 18 months of

00:11:40,399 --> 00:11:43,459
active back boarding and 12 months of

00:11:42,260 --> 00:11:46,100
maintenance back boarding so let's take

00:11:43,459 --> 00:11:49,459
a little bit more into that so current

00:11:46,100 --> 00:11:51,470
which right now is v7 gets every commit

00:11:49,459 --> 00:11:53,660
that lands on to master that is in

00:11:51,470 --> 00:11:56,180
cember major so every week or every

00:11:53,660 --> 00:11:58,069
other week depending on how many commits

00:11:56,180 --> 00:12:00,410
are sitting on master will cut a new

00:11:58,069 --> 00:12:02,269
version of the current release line that

00:12:00,410 --> 00:12:04,190
will get a bump to either cember minor

00:12:02,269 --> 00:12:06,500
or cember patch depending on the commits

00:12:04,190 --> 00:12:09,620
that are in that are sitting on master

00:12:06,500 --> 00:12:11,600
everything gets in there these can be

00:12:09,620 --> 00:12:13,220
updates that may actually have the

00:12:11,600 --> 00:12:15,709
potential of a regression

00:12:13,220 --> 00:12:17,089
the purpose of this is that by living on

00:12:15,709 --> 00:12:19,100
the current release lining going out

00:12:17,089 --> 00:12:20,360
into production for individuals we can

00:12:19,100 --> 00:12:22,160
catch regressions that we're not

00:12:20,360 --> 00:12:24,470
catching in our review or testing

00:12:22,160 --> 00:12:29,149
process quickly and before it ends up

00:12:24,470 --> 00:12:30,949
reaching in LTS so active LTS is the

00:12:29,149 --> 00:12:32,480
process of back porting commits that

00:12:30,949 --> 00:12:35,029
have landed into the current release

00:12:32,480 --> 00:12:37,850
line onto our active release line so are

00:12:35,029 --> 00:12:40,370
right now v4 and v6 are both active LTS

00:12:37,850 --> 00:12:42,920
and so we go through when we audit every

00:12:40,370 --> 00:12:44,959
commit that's landed on on master that

00:12:42,920 --> 00:12:47,209
have moved into current that's been in a

00:12:44,959 --> 00:12:49,699
release for at least two weeks the idea

00:12:47,209 --> 00:12:52,490
here is that what these can be updates

00:12:49,699 --> 00:12:55,370
to tests updates to documentation and

00:12:52,490 --> 00:12:58,730
bug fixes we generally do not backports

00:12:55,370 --> 00:13:01,220
ember major commits assembler december

00:12:58,730 --> 00:13:03,230
minor commits to LTS but if something

00:13:01,220 --> 00:13:05,959
makes sense and has a very very low

00:13:03,230 --> 00:13:07,399
probability of causing breakages we have

00:13:05,959 --> 00:13:09,139
a working group that will vote on it and

00:13:07,399 --> 00:13:11,509
sometimes we'll backports ember minor

00:13:09,139 --> 00:13:13,639
stuff an example of that would be we're

00:13:11,509 --> 00:13:15,980
in the process of releasing some new

00:13:13,639 --> 00:13:17,689
symbols for openssl to windows so

00:13:15,980 --> 00:13:20,720
there's a lot of hacks that exist in the

00:13:17,689 --> 00:13:23,540
ecosystem right now to be able to act to

00:13:20,720 --> 00:13:25,850
access some openssl symbols when writing

00:13:23,540 --> 00:13:27,649
native modules on windows and buyback

00:13:25,850 --> 00:13:29,209
porting this we're able to actually get

00:13:27,649 --> 00:13:30,620
this fixed in production we have

00:13:29,209 --> 00:13:31,939
companies such as PayPal who have come

00:13:30,620 --> 00:13:33,800
to us and told us that they're floating

00:13:31,939 --> 00:13:35,569
these commits already in production on

00:13:33,800 --> 00:13:37,100
the LTS release lines so we know that

00:13:35,569 --> 00:13:38,779
it's stable we know that there's a very

00:13:37,100 --> 00:13:41,180
low chance of breaking things so it

00:13:38,779 --> 00:13:43,100
makes sense to backport it so we also

00:13:41,180 --> 00:13:45,259
have maintenance LTS that's the last 12

00:13:43,100 --> 00:13:47,120
months of the 30-month cycle maitenance

00:13:45,259 --> 00:13:48,559
LTS is not going to have the same active

00:13:47,120 --> 00:13:50,240
back porting we're not going back and

00:13:48,559 --> 00:13:52,189
getting as many things as possible

00:13:50,240 --> 00:13:53,689
landed what we're doing is we're making

00:13:52,189 --> 00:13:55,550
sure that if there's major security

00:13:53,689 --> 00:13:57,410
vulnerabilities or major bugs that are

00:13:55,550 --> 00:13:59,569
found that we're patching them in

00:13:57,410 --> 00:14:01,250
releasing security updates so this

00:13:59,569 --> 00:14:02,779
happens whenever there's a cv for

00:14:01,250 --> 00:14:05,420
something like openssl which there's

00:14:02,779 --> 00:14:07,819
been a couple releases on v12 and v10 in

00:14:05,420 --> 00:14:09,800
the last six months for those this could

00:14:07,819 --> 00:14:12,529
be a bug that's found we've had security

00:14:09,800 --> 00:14:14,959
releases for our own modules for HTTP

00:14:12,529 --> 00:14:16,779
we've had security releases for a number

00:14:14,959 --> 00:14:20,089
of other other dependents that we ship

00:14:16,779 --> 00:14:21,949
this is really important we want to make

00:14:20,089 --> 00:14:23,600
sure that if you go and put something

00:14:21,949 --> 00:14:25,189
into production on note if you went and

00:14:23,600 --> 00:14:26,810
put something in production on node V

00:14:25,189 --> 00:14:28,279
for when it when LTS a

00:14:26,810 --> 00:14:30,680
year ago you're going to have three

00:14:28,279 --> 00:14:32,480
years of support where you don't have to

00:14:30,680 --> 00:14:33,920
worry about things breaking or about

00:14:32,480 --> 00:14:36,320
vulnerabilities well you have your code

00:14:33,920 --> 00:14:38,150
in there and we believe that that's

00:14:36,320 --> 00:14:40,010
enough time to give you an upgrade path

00:14:38,150 --> 00:14:45,230
for your things that you have sitting in

00:14:40,010 --> 00:14:46,670
production so what about master we've

00:14:45,230 --> 00:14:48,290
talked about master a little bit but I

00:14:46,670 --> 00:14:50,630
didn't talk too much about how we land

00:14:48,290 --> 00:14:53,540
things master is a special case any

00:14:50,630 --> 00:14:55,670
commit that gets approved lands directly

00:14:53,540 --> 00:14:58,940
into master we don't have a dev branch

00:14:55,670 --> 00:15:00,770
we don't have any special branch for

00:14:58,940 --> 00:15:02,210
master we have master and then our

00:15:00,770 --> 00:15:04,430
release lines that branch off of that

00:15:02,210 --> 00:15:06,620
any cember major commit any sin ver

00:15:04,430 --> 00:15:08,300
patch commit any sin ver minor commit

00:15:06,620 --> 00:15:10,100
they all just go right into master and

00:15:08,300 --> 00:15:11,360
then we cherry pick off of master to our

00:15:10,100 --> 00:15:13,610
release lines when we're ready to do

00:15:11,360 --> 00:15:15,110
releases what this means is if you're

00:15:13,610 --> 00:15:17,930
ever running off the nightly version of

00:15:15,110 --> 00:15:20,510
node that's built off the head which

00:15:17,930 --> 00:15:22,250
would right now be a nightly a v8 you

00:15:20,510 --> 00:15:24,290
have the opportunity or potential of

00:15:22,250 --> 00:15:27,080
getting major changes that are sitting

00:15:24,290 --> 00:15:28,820
there we tend to not land december

00:15:27,080 --> 00:15:31,280
majors right away all the time we give

00:15:28,820 --> 00:15:33,710
it a lot of time but we also cut off

00:15:31,280 --> 00:15:34,970
cember majors landing on to master about

00:15:33,710 --> 00:15:36,800
a month before we're about to cut a

00:15:34,970 --> 00:15:39,470
release so that we have the proper time

00:15:36,800 --> 00:15:40,580
to run an air RC + beta + test the

00:15:39,470 --> 00:15:45,760
things aren't going to break things for

00:15:40,580 --> 00:15:51,070
people so how do we manage all of this

00:15:45,760 --> 00:15:53,990
magic mostly and particularly

00:15:51,070 --> 00:15:56,210
particularly we do it with get magic and

00:15:53,990 --> 00:15:57,950
what I really love about get magic is

00:15:56,210 --> 00:16:01,640
that get magic is magic with trees and

00:15:57,950 --> 00:16:04,430
that basically makes us elves which I'm

00:16:01,640 --> 00:16:05,990
really into but so we maintain release

00:16:04,430 --> 00:16:08,990
branches and this is what's important we

00:16:05,990 --> 00:16:11,300
have a zero 12x French a 4x branch a6x

00:16:08,990 --> 00:16:14,120
branch and a7x branch these are our

00:16:11,300 --> 00:16:17,240
release branch lines we also have

00:16:14,120 --> 00:16:20,209
staging branches 12x staging 4x staging

00:16:17,240 --> 00:16:22,390
6x staging and 7x staging each of these

00:16:20,209 --> 00:16:24,650
staging branches are where we'll we'll

00:16:22,390 --> 00:16:29,660
cherry-pick commits off of master in

00:16:24,650 --> 00:16:31,250
between releases so most changes as I

00:16:29,660 --> 00:16:32,720
said have to live in a release for at

00:16:31,250 --> 00:16:34,850
least two weeks before they'll be back

00:16:32,720 --> 00:16:36,830
ported to the LTS staging but as soon as

00:16:34,850 --> 00:16:39,260
something lands on master it can land on

00:16:36,830 --> 00:16:40,070
7x staging now the only time where this

00:16:39,260 --> 00:16:42,560
is an entirely

00:16:40,070 --> 00:16:44,600
true is for documentation updates or

00:16:42,560 --> 00:16:45,920
sometimes for tooling updates we won't

00:16:44,600 --> 00:16:48,320
actually wait for things to go out

00:16:45,920 --> 00:16:49,970
because we need to like for a tap

00:16:48,320 --> 00:16:52,160
reporter update for example we need our

00:16:49,970 --> 00:16:54,230
entire CI release working on all of our

00:16:52,160 --> 00:16:56,120
different branches so it's not a like

00:16:54,230 --> 00:16:57,980
fast and hard rule but for anything that

00:16:56,120 --> 00:16:59,660
has any potential of breaking things it

00:16:57,980 --> 00:17:02,810
needs to be in production before we

00:16:59,660 --> 00:17:04,459
landed on LTS so let's do a little bit

00:17:02,810 --> 00:17:06,079
of a demo and I'm going to be having a

00:17:04,459 --> 00:17:07,550
screen up here so if you can't read it

00:17:06,079 --> 00:17:09,680
just all of you together just scream

00:17:07,550 --> 00:17:12,230
enhance and I'll zoom in a little bit so

00:17:09,680 --> 00:17:14,690
you can see but see here's here's the

00:17:12,230 --> 00:17:16,160
nodejs repo and I'm going to show you a

00:17:14,690 --> 00:17:18,440
little bit of how our release process

00:17:16,160 --> 00:17:20,120
works so we can go here to pull requests

00:17:18,440 --> 00:17:21,890
and you know I'm just going to go and

00:17:20,120 --> 00:17:23,510
grab a random pull request that I

00:17:21,890 --> 00:17:25,760
definitely haven't audited or thought

00:17:23,510 --> 00:17:29,030
that I'm going to use as an example here

00:17:25,760 --> 00:17:31,370
this is by my friend Francis it's a new

00:17:29,030 --> 00:17:33,320
commit that allows test dot pi to use

00:17:31,370 --> 00:17:34,640
the full path of a test so this is

00:17:33,320 --> 00:17:35,870
actually really useful for us we have a

00:17:34,640 --> 00:17:37,880
test runner and the test runner is

00:17:35,870 --> 00:17:40,450
written in Python if you go to run that

00:17:37,880 --> 00:17:42,200
test runner you can run individual tests

00:17:40,450 --> 00:17:44,060
unfortunately the test runner was

00:17:42,200 --> 00:17:47,210
designed that you can't actually pass

00:17:44,060 --> 00:17:50,210
the full test so if we take a look here

00:17:47,210 --> 00:17:52,640
if we had the word test in front and the

00:17:50,210 --> 00:17:54,020
dot J s at the end the test runner

00:17:52,640 --> 00:17:56,330
actually wouldn't recognize that path

00:17:54,020 --> 00:17:58,160
what it would recognize is without the

00:17:56,330 --> 00:18:00,380
test directory and without the j s at

00:17:58,160 --> 00:18:01,580
the end and that's not really useful if

00:18:00,380 --> 00:18:04,730
you're working on your own machine and

00:18:01,580 --> 00:18:06,830
one or on your own test so Francis went

00:18:04,730 --> 00:18:08,540
through and basically all it does is

00:18:06,830 --> 00:18:10,550
normalize the path in case you have

00:18:08,540 --> 00:18:14,630
tests in front and gf's at the at the

00:18:10,550 --> 00:18:17,780
end and this allows us to now run

00:18:14,630 --> 00:18:20,120
individual tests so what we can do here

00:18:17,780 --> 00:18:21,830
is we can go and grab this commit and we

00:18:20,120 --> 00:18:23,360
could copy the link this is a really

00:18:21,830 --> 00:18:27,590
cool thing will go and look at when we

00:18:23,360 --> 00:18:29,780
open it here we could see the commit so

00:18:27,590 --> 00:18:32,210
github actually has this amazing feature

00:18:29,780 --> 00:18:35,750
where you can add dot patch to the end

00:18:32,210 --> 00:18:38,720
of a commit they broke it actually so

00:18:35,750 --> 00:18:41,450
you need to like I have a little regex

00:18:38,720 --> 00:18:43,640
that fixes that but now we get this get

00:18:41,450 --> 00:18:44,900
mail message come and grab me later if

00:18:43,640 --> 00:18:47,060
you want to learn more about what a mail

00:18:44,900 --> 00:18:48,860
messages but it's the old way in which

00:18:47,060 --> 00:18:50,720
the gate project used to pass around

00:18:48,860 --> 00:18:53,660
commits and you can float a mail message

00:18:50,720 --> 00:18:55,370
directly onto a tree without having any

00:18:53,660 --> 00:18:57,320
expected changes happening to that tree

00:18:55,370 --> 00:18:59,000
so it's really great about this is we

00:18:57,320 --> 00:19:00,920
can take those mail messages pass them

00:18:59,000 --> 00:19:03,260
to get a.m. and it's going to patch it

00:19:00,920 --> 00:19:06,020
directly onto the head of the tree so we

00:19:03,260 --> 00:19:11,230
can go we can take this link we can go

00:19:06,020 --> 00:19:14,480
here on master and we can patch it and

00:19:11,230 --> 00:19:18,920
we've applied it to the head so now we

00:19:14,480 --> 00:19:20,840
can go and look at the commit and we can

00:19:18,920 --> 00:19:22,100
see that we have this commit here in a

00:19:20,840 --> 00:19:24,590
commit message but it's missing the

00:19:22,100 --> 00:19:26,920
metadata that we use in the project so

00:19:24,590 --> 00:19:29,600
what I can do is I can go back here to

00:19:26,920 --> 00:19:33,410
the original pull request and we have

00:19:29,600 --> 00:19:36,640
this little utility that we use going to

00:19:33,410 --> 00:19:36,640
just refresh this really quickly

00:19:43,299 --> 00:19:48,789
so the utility is deciding not to work

00:19:45,970 --> 00:19:51,279
in that version of Chrome so as we've

00:19:48,789 --> 00:19:54,610
seen with live coding today being fun

00:19:51,279 --> 00:19:56,619
let's try it here for a second we press

00:19:54,610 --> 00:19:59,080
this it's going to generate the metadata

00:19:56,619 --> 00:20:01,239
that we need for the commit we're going

00:19:59,080 --> 00:20:03,489
to go back in here we're going to paste

00:20:01,239 --> 00:20:04,809
the metadata into the commit we're going

00:20:03,489 --> 00:20:07,809
to save that we're going to close it

00:20:04,809 --> 00:20:14,559
we've now made the commit and then we're

00:20:07,809 --> 00:20:16,899
going to push to master so we've just

00:20:14,559 --> 00:20:18,129
updated note and so what I'm going to do

00:20:16,899 --> 00:20:22,659
is I'm going to go and grab that commit

00:20:18,129 --> 00:20:24,669
I'm going to go back to the to the thing

00:20:22,659 --> 00:20:27,220
here i'm going to say you know where it

00:20:24,669 --> 00:20:29,019
landed and i'm going to close it so

00:20:27,220 --> 00:20:32,019
we've actually landed a pull request on

00:20:29,019 --> 00:20:33,369
two nodes master branch so because this

00:20:32,019 --> 00:20:35,559
is a commit that doesn't affect anything

00:20:33,369 --> 00:20:38,200
that's problematic we can actually go

00:20:35,559 --> 00:20:41,470
ahead and start back boarding it on to

00:20:38,200 --> 00:20:43,690
our various release lines so we can look

00:20:41,470 --> 00:20:46,830
here at the head we can grab this and we

00:20:43,690 --> 00:20:52,389
can check out the seven point x staging

00:20:46,830 --> 00:20:53,889
okay and now we can cherry-pick it so

00:20:52,389 --> 00:20:57,399
now we can see it's sitting on on the

00:20:53,889 --> 00:20:59,139
staging branch for the next release and

00:20:57,399 --> 00:21:00,460
we could push that and as long as no one

00:20:59,139 --> 00:21:03,190
else has put anything on the stage one

00:21:00,460 --> 00:21:04,359
branch we should be good which we are so

00:21:03,190 --> 00:21:06,309
now we've updated and put it into

00:21:04,359 --> 00:21:10,330
staging but we can also do is take it a

00:21:06,309 --> 00:21:11,919
step further we can look here at v 68 we

00:21:10,330 --> 00:21:13,419
can update the tree so we could get the

00:21:11,919 --> 00:21:14,769
commits that are sitting in master and

00:21:13,419 --> 00:21:20,739
just what we're doing that I'm going to

00:21:14,769 --> 00:21:24,600
update d for as well and can go you can

00:21:20,739 --> 00:21:24,600
grab this commit grab that link address

00:21:27,700 --> 00:21:36,080
we can patch it on v6 we catch it on v4

00:21:32,450 --> 00:21:39,440
and we can push upstream to both the v6

00:21:36,080 --> 00:21:41,180
staging and the v4 staging so now we've

00:21:39,440 --> 00:21:43,610
gone ahead and we've we've landed this

00:21:41,180 --> 00:21:44,960
update into all of our release lines so

00:21:43,610 --> 00:21:47,000
I can go and market so that we know that

00:21:44,960 --> 00:21:48,770
it's ready to go so we've gone ahead and

00:21:47,000 --> 00:21:50,990
taken this commit that fixes our tooling

00:21:48,770 --> 00:21:52,850
we've updated all of our release lines

00:21:50,990 --> 00:21:55,580
and it's ready to go in all of our next

00:21:52,850 --> 00:21:57,170
releases for node so this is kind of an

00:21:55,580 --> 00:22:00,170
example of what the release process

00:21:57,170 --> 00:22:01,520
looks like so if any of you have more

00:22:00,170 --> 00:22:03,620
questions about how we manage that

00:22:01,520 --> 00:22:05,600
release come and grab me but this is the

00:22:03,620 --> 00:22:07,240
process of landing code onto node and

00:22:05,600 --> 00:22:10,490
updating our different release processes

00:22:07,240 --> 00:22:12,830
so when we're ready for a release we'll

00:22:10,490 --> 00:22:14,330
go and we'll branch off of the four

00:22:12,830 --> 00:22:16,340
point x six point X or seven its

00:22:14,330 --> 00:22:17,780
branches and then we'll cherry picker

00:22:16,340 --> 00:22:20,660
commits that are sitting on staging

00:22:17,780 --> 00:22:22,310
ready to go into the release how do we

00:22:20,660 --> 00:22:24,230
know which trick which commits we're

00:22:22,310 --> 00:22:26,720
going to cherry pick we primarily know

00:22:24,230 --> 00:22:28,970
through github labels so every commit

00:22:26,720 --> 00:22:30,500
the December major has a label every

00:22:28,970 --> 00:22:33,260
commits the December minor has a label

00:22:30,500 --> 00:22:35,540
we also have LTS watch labels and we

00:22:33,260 --> 00:22:37,790
have don't land labels so if I go back

00:22:35,540 --> 00:22:41,570
to the repo here for a second and we go

00:22:37,790 --> 00:22:43,130
to our pull requests here we could go

00:22:41,570 --> 00:22:47,000
here and we can say hey what's

00:22:43,130 --> 00:22:51,770
everything that we have unlike on the

00:22:47,000 --> 00:22:53,570
floor point LTS watch for v4 point X and

00:22:51,770 --> 00:22:55,160
we're going to see all the stuff that's

00:22:53,570 --> 00:22:58,490
ready to land there and we can do LTS

00:22:55,160 --> 00:22:59,690
watch for six point X as well and now we

00:22:58,490 --> 00:23:02,180
have a list of all the commits that are

00:22:59,690 --> 00:23:03,800
ready to land on both that have closed

00:23:02,180 --> 00:23:06,530
and already landed on master we have a

00:23:03,800 --> 00:23:09,410
big list here so we can go back here and

00:23:06,530 --> 00:23:14,180
we can see that there's another commit

00:23:09,410 --> 00:23:15,980
that I was that i was looking at which

00:23:14,180 --> 00:23:18,440
is this right here which changes a

00:23:15,980 --> 00:23:19,970
deprecated deprecated method that isn't

00:23:18,440 --> 00:23:23,570
supposed to exist but still does and we

00:23:19,970 --> 00:23:24,800
can see that this was landed by Franzi

00:23:23,570 --> 00:23:27,350
who's sitting in the audience right now

00:23:24,800 --> 00:23:29,840
and she landed it in eighty nineteen

00:23:27,350 --> 00:23:31,700
forty one two and so I asked her if it

00:23:29,840 --> 00:23:33,710
should be backboard and she said that if

00:23:31,700 --> 00:23:35,420
it lands cleanly we can so we can go

00:23:33,710 --> 00:23:38,220
ahead and we can copy this commit that's

00:23:35,420 --> 00:23:42,090
ready to land and we can run our

00:23:38,220 --> 00:23:44,220
to command but it didn't work which is

00:23:42,090 --> 00:23:46,740
unfortunate but expected so we can

00:23:44,220 --> 00:23:48,330
actually just say please and now we're

00:23:46,740 --> 00:23:50,970
going to use a three-way merge strategy

00:23:48,330 --> 00:23:54,210
instead of the git merge strategy and we

00:23:50,970 --> 00:23:57,480
push it upstream and we can see there's

00:23:54,210 --> 00:24:00,450
the commit and I think that it's already

00:23:57,480 --> 00:24:04,409
landed so now we can go back to v4 and

00:24:00,450 --> 00:24:06,179
we can try to patch it and we're going

00:24:04,409 --> 00:24:07,530
to see a wait it didn't work so we can

00:24:06,179 --> 00:24:12,390
see what's going on we can see there's

00:24:07,530 --> 00:24:13,710
actually a diff in note CC and we can

00:24:12,390 --> 00:24:15,210
see that there's actually some stuff

00:24:13,710 --> 00:24:17,909
that exists on this tree that doesn't

00:24:15,210 --> 00:24:19,590
exist in v4 and generally when we start

00:24:17,909 --> 00:24:21,840
touching c++ and changes that I'm not

00:24:19,590 --> 00:24:23,190
familiar with I get kind of nervous so

00:24:21,840 --> 00:24:25,230
what I'm going to do is I'm actually

00:24:23,190 --> 00:24:26,880
just going to abort this I'm going to go

00:24:25,230 --> 00:24:30,570
back to this I'm going to switch the tag

00:24:26,880 --> 00:24:32,220
for LTS v6 and let them know that we've

00:24:30,570 --> 00:24:34,230
landed it but I'm also going to do is

00:24:32,220 --> 00:24:36,600
again a lamo label to say don't tool and

00:24:34,230 --> 00:24:39,120
don't land it on v4 because it didn't

00:24:36,600 --> 00:24:40,679
land cleanly we're going to see those

00:24:39,120 --> 00:24:42,890
labels update we're going to go down

00:24:40,679 --> 00:24:46,320
here and I'm going to just messaged

00:24:42,890 --> 00:24:51,270
frenzy and just say you know landed

00:24:46,320 --> 00:24:54,510
cleanly on v6 but not before please feel

00:24:51,270 --> 00:24:57,090
free to manually backport so now we've

00:24:54,510 --> 00:24:59,370
gone it's landed on six it's ready to go

00:24:57,090 --> 00:25:00,870
in a 6 release it didn't land on for so

00:24:59,370 --> 00:25:02,039
we put a label so that we know that it's

00:25:00,870 --> 00:25:03,659
not going to land on the four in the

00:25:02,039 --> 00:25:05,010
future but we've messaged someone to

00:25:03,659 --> 00:25:08,580
give them the opportunity to land it

00:25:05,010 --> 00:25:10,049
later if we'd like so this is how we go

00:25:08,580 --> 00:25:12,419
through and we have tools that we can

00:25:10,049 --> 00:25:14,700
use that can automate going through all

00:25:12,419 --> 00:25:16,980
of these different labels so if we're on

00:25:14,700 --> 00:25:18,990
the six right here we can use this tool

00:25:16,980 --> 00:25:20,130
called branch diff and we can say hey

00:25:18,990 --> 00:25:23,940
you know what's the difference between

00:25:20,130 --> 00:25:26,130
the 6.8 staging and v6 point acts and

00:25:23,940 --> 00:25:27,299
it's nothing which was fun but we could

00:25:26,130 --> 00:25:29,460
then go and say well what's the

00:25:27,299 --> 00:25:30,450
difference between v6 and master it's

00:25:29,460 --> 00:25:32,250
going to go through and it's going to

00:25:30,450 --> 00:25:34,320
grab every single commit it's going to

00:25:32,250 --> 00:25:36,030
compare them based on labels and what's

00:25:34,320 --> 00:25:37,799
really cool about this tool is instead

00:25:36,030 --> 00:25:39,659
of doing it based on the tree which is

00:25:37,799 --> 00:25:41,280
what a git diff usually does it does it

00:25:39,659 --> 00:25:43,169
based on our metadata and it does it

00:25:41,280 --> 00:25:45,030
based on the titles of the commit so

00:25:43,169 --> 00:25:47,549
what it can do is we actually care about

00:25:45,030 --> 00:25:49,919
atomic change atomic change is not the

00:25:47,549 --> 00:25:51,600
same thing as the changes in which we

00:25:49,919 --> 00:25:54,059
have in a get

00:25:51,600 --> 00:25:55,470
tree so a diff between two trees that

00:25:54,059 --> 00:25:57,390
have different changes are going to be a

00:25:55,470 --> 00:25:59,610
diff but we care about are the actual

00:25:57,390 --> 00:26:01,799
commits so now what we can see here are

00:25:59,610 --> 00:26:04,169
all the commits that are a master that

00:26:01,799 --> 00:26:05,970
are not on v6 and there's a whole bunch

00:26:04,169 --> 00:26:07,230
and a lot of them are cember major so

00:26:05,970 --> 00:26:08,610
what we're able to do is actually make a

00:26:07,230 --> 00:26:13,020
whole bunch of different labels and you

00:26:08,610 --> 00:26:16,679
can see here if I go to github com to my

00:26:13,020 --> 00:26:18,630
gists I maintain a gist of various

00:26:16,679 --> 00:26:20,460
audits that I'm doing and we could see

00:26:18,630 --> 00:26:22,380
the audit of v6 this is the command that

00:26:20,460 --> 00:26:23,610
includes excluding labels and these are

00:26:22,380 --> 00:26:25,200
all the commits that still need to be

00:26:23,610 --> 00:26:27,120
labeled they have not yet been labeled

00:26:25,200 --> 00:26:28,980
they live on master not yet on these six

00:26:27,120 --> 00:26:30,840
and i go through periodically you know

00:26:28,980 --> 00:26:32,640
once every two weeks or so and audit

00:26:30,840 --> 00:26:34,950
these the last time i actually did a

00:26:32,640 --> 00:26:35,970
live stream of it and explained commits

00:26:34,950 --> 00:26:38,250
what was going through what was

00:26:35,970 --> 00:26:40,440
happening if you follow me on twitter at

00:26:38,250 --> 00:26:41,730
the alpha nerd I'll tweet on there

00:26:40,440 --> 00:26:44,100
whenever I'm going to be doing these

00:26:41,730 --> 00:26:46,020
these live sessions and if enough of you

00:26:44,100 --> 00:26:47,760
from Singapore interested because I have

00:26:46,020 --> 00:26:49,320
a really weird sleep schedule I totally

00:26:47,760 --> 00:26:51,840
be up for doing it at a time it's like

00:26:49,320 --> 00:26:53,220
reasonable for you but so now that we

00:26:51,840 --> 00:26:55,530
have these labels were able to use tools

00:26:53,220 --> 00:26:57,450
like I was talking about release tools

00:26:55,530 --> 00:26:58,890
including branch diff to find the

00:26:57,450 --> 00:27:01,470
difference release tools such as

00:26:58,890 --> 00:27:03,299
changelog maker which can use that the

00:27:01,470 --> 00:27:05,850
diffs between the branches and generate

00:27:03,299 --> 00:27:07,919
our change log for us we also have

00:27:05,850 --> 00:27:12,330
various scripts that we use during the

00:27:07,919 --> 00:27:14,700
release and all of those allow us to do

00:27:12,330 --> 00:27:17,039
our release process and automate it so

00:27:14,700 --> 00:27:18,000
we got a little bit of time left so

00:27:17,039 --> 00:27:21,090
we're going to talk a little bit about

00:27:18,000 --> 00:27:25,200
what is a breaking change I love this

00:27:21,090 --> 00:27:28,679
one I really hope no one got hurt but

00:27:25,200 --> 00:27:30,390
it's just that's pretty glorious just

00:27:28,679 --> 00:27:32,070
good I know I just said I don't have a

00:27:30,390 --> 00:27:36,120
lot of time but I'm just gonna watch it

00:27:32,070 --> 00:27:38,640
anyways so as we talked about before

00:27:36,120 --> 00:27:40,230
what's December major change what's a

00:27:38,640 --> 00:27:42,450
breaking change it's a change in

00:27:40,230 --> 00:27:45,210
behavior generally a change in behavior

00:27:42,450 --> 00:27:46,559
is obvious but sometimes we can be

00:27:45,210 --> 00:27:48,240
really surprised and we're going to talk

00:27:46,559 --> 00:27:51,120
a little bit about how we figure out if

00:27:48,240 --> 00:27:52,470
we have breaking changes and then look

00:27:51,120 --> 00:27:56,190
at an example of one that's unexpected

00:27:52,470 --> 00:27:57,990
so how do we avoid breaking changes you

00:27:56,190 --> 00:28:00,750
know there's obvious ways continuous

00:27:57,990 --> 00:28:02,700
integration and a large testing suite

00:28:00,750 --> 00:28:04,409
but we also do something called smoke

00:28:02,700 --> 00:28:05,280
testing so one of the utilities that

00:28:04,409 --> 00:28:07,170
I've worked on is called

00:28:05,280 --> 00:28:09,000
canary in the gold mine what it will do

00:28:07,170 --> 00:28:11,280
is it will actually go and grab the

00:28:09,000 --> 00:28:14,160
tarball from github of a module it will

00:28:11,280 --> 00:28:16,170
untie it it will NPM install it and then

00:28:14,160 --> 00:28:17,790
it will run npm test it will then take

00:28:16,170 --> 00:28:20,130
the results of that test and give us the

00:28:17,790 --> 00:28:22,740
results so you can npm install this npm

00:28:20,130 --> 00:28:24,240
install g you can see I TGM and start

00:28:22,740 --> 00:28:25,800
running test Suites on your laptop if

00:28:24,240 --> 00:28:27,600
you want but what's interesting is it

00:28:25,800 --> 00:28:29,520
also comes with the lookup table of the

00:28:27,600 --> 00:28:30,900
top 70 modules in the ecosystem that

00:28:29,520 --> 00:28:33,600
we've derived for a number of different

00:28:30,900 --> 00:28:35,070
reasons we then run that in CI and we

00:28:33,600 --> 00:28:37,380
can run the test suite automate the test

00:28:35,070 --> 00:28:39,660
suite of 70 of the top modules in n p.m.

00:28:37,380 --> 00:28:41,190
and then get those results to see if

00:28:39,660 --> 00:28:43,890
something's broken and we can run that

00:28:41,190 --> 00:28:45,120
test on any arbitrary commit of node we

00:28:43,890 --> 00:28:46,800
are now at the point where we will not

00:28:45,120 --> 00:28:49,050
land December major change or do a

00:28:46,800 --> 00:28:50,910
release if anything is broken and canary

00:28:49,050 --> 00:28:52,440
in the gold line so what this means is

00:28:50,910 --> 00:28:54,450
that anytime someone sends a commit

00:28:52,440 --> 00:28:55,890
that's questionable we can run canary in

00:28:54,450 --> 00:28:57,210
the gold mine and we can tell whether or

00:28:55,890 --> 00:29:02,250
not we've actually broken something in

00:28:57,210 --> 00:29:03,840
the ecosystem so once upon a time canary

00:29:02,250 --> 00:29:05,310
in the gold mine found some failures

00:29:03,840 --> 00:29:08,970
there was a failure in Jade and a

00:29:05,310 --> 00:29:10,680
failure and body parser so it turned out

00:29:08,970 --> 00:29:11,700
that Jade just moved their args their

00:29:10,680 --> 00:29:13,830
orgs and did an update their

00:29:11,700 --> 00:29:15,480
package.json so this was an example of

00:29:13,830 --> 00:29:17,430
where we didn't actually break anything

00:29:15,480 --> 00:29:18,810
but the modules themselves broke

00:29:17,430 --> 00:29:20,310
something and this has been an awesome

00:29:18,810 --> 00:29:22,440
side effect of canary on a gold mine

00:29:20,310 --> 00:29:24,450
that wasn't expected was that when we

00:29:22,440 --> 00:29:26,970
actually have were able to test that

00:29:24,450 --> 00:29:28,740
these orgs have broken things we can

00:29:26,970 --> 00:29:30,540
actually give a heads up to people hey

00:29:28,740 --> 00:29:33,060
your module is broken and they like they

00:29:30,540 --> 00:29:34,770
love it two days ago we actually found

00:29:33,060 --> 00:29:36,750
that ember CLI pushed some stuff that

00:29:34,770 --> 00:29:39,750
was unexpected that broke note in a

00:29:36,750 --> 00:29:41,460
weird way just on v4 and we were able to

00:29:39,750 --> 00:29:43,020
let them know within like two days of

00:29:41,460 --> 00:29:44,580
their release and they were able to get

00:29:43,020 --> 00:29:48,090
an update out in about 30 minutes

00:29:44,580 --> 00:29:49,050
because they were so adamant that they

00:29:48,090 --> 00:29:50,310
would be tested in canary in the

00:29:49,050 --> 00:29:53,160
coalmine that they worked with us super

00:29:50,310 --> 00:29:55,650
quickly so the next one that broke was

00:29:53,160 --> 00:29:58,920
body parser how many people here know

00:29:55,650 --> 00:30:00,990
what body parser is can I see a number

00:29:58,920 --> 00:30:05,370
of hands how many people here know what

00:30:00,990 --> 00:30:08,550
Express is cool so Express is a tool

00:30:05,370 --> 00:30:10,710
that's used for running all sorts of

00:30:08,550 --> 00:30:12,720
servers it's used inside a paypal's

00:30:10,710 --> 00:30:15,600
Kraken so an idea of how much it's used

00:30:12,720 --> 00:30:18,690
so there was an optimization to query

00:30:15,600 --> 00:30:21,540
string parse that took a length and

00:30:18,690 --> 00:30:23,010
this is the change that came in and we

00:30:21,540 --> 00:30:25,710
can see just like right here essentially

00:30:23,010 --> 00:30:28,050
originally we just checked if the max

00:30:25,710 --> 00:30:31,110
keys was larger than the length and then

00:30:28,050 --> 00:30:35,430
we just cut it and instead we realize

00:30:31,110 --> 00:30:37,560
that you can too stringed up split you

00:30:35,430 --> 00:30:39,180
could pass a max length and in doing so

00:30:37,560 --> 00:30:42,540
we were able to have an optimization and

00:30:39,180 --> 00:30:44,040
not create lots of garbage so one thing

00:30:42,540 --> 00:30:46,860
we didn't account for was infinity

00:30:44,040 --> 00:30:48,810
because based on the spec the number

00:30:46,860 --> 00:30:51,000
that you give for max length is actually

00:30:48,810 --> 00:30:53,310
an integer and when infinity gets

00:30:51,000 --> 00:30:55,350
inferred to be an integer it infers 20

00:30:53,310 --> 00:30:57,320
so body parts are actually had a test

00:30:55,350 --> 00:31:00,030
for this and we found out that basically

00:30:57,320 --> 00:31:03,270
what would originally have passed one

00:31:00,030 --> 00:31:04,440
with this code started passing zero so

00:31:03,270 --> 00:31:05,640
this was a code that was a small

00:31:04,440 --> 00:31:07,230
optimization it was something that

00:31:05,640 --> 00:31:08,550
easily would have been backported we

00:31:07,230 --> 00:31:10,290
would have had no idea that this could

00:31:08,550 --> 00:31:12,030
have broken code in production but I

00:31:10,290 --> 00:31:13,770
mean this is an extremely hot code this

00:31:12,030 --> 00:31:15,720
could have broken the world but Canarian

00:31:13,770 --> 00:31:18,750
the gold mine found it smoke testing

00:31:15,720 --> 00:31:20,010
save the day so with the change the

00:31:18,750 --> 00:31:21,780
change had landed on master but not

00:31:20,010 --> 00:31:23,190
going on out in a release yet so we were

00:31:21,780 --> 00:31:27,300
able to land to fix before it even hit

00:31:23,190 --> 00:31:30,180
userland so let's quickly wrap up which

00:31:27,300 --> 00:31:33,330
version should you use forex has had the

00:31:30,180 --> 00:31:34,980
while on LTS to stabilize 6x has been on

00:31:33,330 --> 00:31:37,440
LTS for about a month and it's getting

00:31:34,980 --> 00:31:38,700
ready for a third LTS release and v7 is

00:31:37,440 --> 00:31:42,150
always getting the latest and greatest

00:31:38,700 --> 00:31:44,340
things so why use V for hardened by an

00:31:42,150 --> 00:31:45,600
ongoing release process you already have

00:31:44,340 --> 00:31:46,710
an app in production that's working you

00:31:45,600 --> 00:31:50,460
probably should just stick to vie for

00:31:46,710 --> 00:31:51,810
right now why use v6 and it's going to

00:31:50,460 --> 00:31:53,280
have the longest support cycle of all

00:31:51,810 --> 00:31:55,770
the LTS releases that are out right now

00:31:53,280 --> 00:31:58,830
and it's the closer to master of all the

00:31:55,770 --> 00:32:00,720
LTS releases it also comes with v8 5.1

00:31:58,830 --> 00:32:04,590
which has a much larger coverage of es6

00:32:00,720 --> 00:32:06,090
than 4.8 which was in node v4 and it has

00:32:04,590 --> 00:32:07,590
the inspector api i don't know if you've

00:32:06,090 --> 00:32:08,910
used that yet some people have talked

00:32:07,590 --> 00:32:12,180
about it earlier this conference it's

00:32:08,910 --> 00:32:13,680
awesome do you have to use LTS you know

00:32:12,180 --> 00:32:16,260
no you can do whatever you want I'm not

00:32:13,680 --> 00:32:18,600
the boss of you but if you want to use

00:32:16,260 --> 00:32:20,390
6x what you're going to get is v8 5.4

00:32:18,600 --> 00:32:22,800
you're going to get a little bit of yes

00:32:20,390 --> 00:32:24,150
2016 you know you can use two stars for

00:32:22,800 --> 00:32:25,470
doing exponents which is super cool

00:32:24,150 --> 00:32:27,240
you're going to have the latest and

00:32:25,470 --> 00:32:29,120
greatest stuff but if you use in

00:32:27,240 --> 00:32:31,650
production I'm going to be really scared

00:32:29,120 --> 00:32:32,190
so you know be prepared for breakages if

00:32:31,650 --> 00:32:33,330
you're in

00:32:32,190 --> 00:32:34,470
doctor and that's just kind of the

00:32:33,330 --> 00:32:37,110
message that will leave you with their

00:32:34,470 --> 00:32:39,379
so thank you all so much this is a dog

00:32:37,110 --> 00:32:39,379
surfing

00:32:40,080 --> 00:32:43,619

YouTube URL: https://www.youtube.com/watch?v=3gkm7oafWxs


