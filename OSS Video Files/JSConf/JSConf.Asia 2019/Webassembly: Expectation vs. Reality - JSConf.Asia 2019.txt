Title: Webassembly: Expectation vs. Reality - JSConf.Asia 2019
Publication date: 2019-07-05
Playlist: JSConf.Asia 2019
Description: 
	Speaker: Patrick Walther

Web Assembly has arrived in all major browsers. With it being in plain sight instead of hidden behind browser flags we can start and bring our high performance applications to the browser. In this workshop we’re going to look at the basics of Web Assembly and see what is already in the browsers today and what is yet to come. From there we will implement a real performance heavy task in our browser. We will compare the performance of our Web Assembly code to a plain JavaScript version. Afterwards you will be able to decide when to use Web Assembly and what specific performance benefits It will give you.

Requirements:
Bring a laptop. Have a recent web-browser, Git and NodeJS installed. If local wifi allows it we will be working with http-server package locally and access this from our smartphones. If not we might use a service like Zeit Cloud (https://zeit.co/now).

Patrick started his programming journey as a Java Developer but became hooked on Web Development very quickly. At Zühlke he has been able to quickly gain a lot of expertise in various projects and industries transforming portals, platforms, calculators and many more applications into proper responsive web applications. His love for the web has grown through the years only surpassed by his love for burgers! So if you know the best burger place in Singapore, hit him up!

Event Page: https://2019.jsconf.asia/

Produced by Engineers.SG

Help us caption & translate this video!

https://amara.org/v/pl3r/
Captions: 
	00:00:00,000 --> 00:00:04,589
we can have a nice afternoon together

00:00:01,410 --> 00:00:06,480
and if you didn't expect webassembly

00:00:04,589 --> 00:00:09,210
you're probably in the wrong room so we

00:00:06,480 --> 00:00:12,059
do some webassembly today we will

00:00:09,210 --> 00:00:15,330
probably not be like very in-depth on

00:00:12,059 --> 00:00:17,609
like how a for loop would be transpired

00:00:15,330 --> 00:00:20,660
down to almost assembly code or

00:00:17,609 --> 00:00:24,480
something we will look at it from a more

00:00:20,660 --> 00:00:26,460
use case specific point of view so we

00:00:24,480 --> 00:00:28,769
will do some actual use cases with

00:00:26,460 --> 00:00:31,949
webassembly today together we will use

00:00:28,769 --> 00:00:34,770
some rust and some Seba I'll get into

00:00:31,949 --> 00:00:39,210
that right afterwards first let me

00:00:34,770 --> 00:00:43,230
quickly introduce myself so my name is

00:00:39,210 --> 00:00:44,460
Patrick I am from Switzerland there are

00:00:43,230 --> 00:00:49,110
some guys from Switzerland here right

00:00:44,460 --> 00:00:51,690
yeah from my own company hello I started

00:00:49,110 --> 00:00:54,960
programming back in 2005 I did an

00:00:51,690 --> 00:00:56,070
apprenticeship I stumbled kinda into PHP

00:00:54,960 --> 00:00:57,960
I didn't know at the time what

00:00:56,070 --> 00:01:00,210
programming was so there was the thing

00:00:57,960 --> 00:01:02,789
called PHP somebody on Stack Overflow

00:01:00,210 --> 00:01:04,799
told me put it on your inner file and

00:01:02,789 --> 00:01:07,080
put it on a server and then it will just

00:01:04,799 --> 00:01:09,659
run and actually it did that so I was

00:01:07,080 --> 00:01:11,189
quite fascinated at that time and later

00:01:09,659 --> 00:01:12,960
on wanted to do something in the

00:01:11,189 --> 00:01:14,729
front-end right so now when the user

00:01:12,960 --> 00:01:17,130
clicks something something should happen

00:01:14,729 --> 00:01:20,820
that would be nice so I stumbled into

00:01:17,130 --> 00:01:25,409
JavaScript with jQuery how to support ie

00:01:20,820 --> 00:01:28,020
ie 5.5 and 6 at that time were nice

00:01:25,409 --> 00:01:30,060
times yeah so if I think about our

00:01:28,020 --> 00:01:32,670
browser problems today they're much

00:01:30,060 --> 00:01:35,729
nicer than they were back then right so

00:01:32,670 --> 00:01:37,890
everybody who had to support ie 5 to 5 6

00:01:35,729 --> 00:01:41,549
knows what I'm probably talking about

00:01:37,890 --> 00:01:44,030
right yes so I have grown to become or I

00:01:41,549 --> 00:01:50,009
became a Charma script enthusiast

00:01:44,030 --> 00:01:51,960
yeh I do work for a company called suka

00:01:50,009 --> 00:01:53,640
sorry for these funny dots under you

00:01:51,960 --> 00:01:56,520
that's just the chairman language right

00:01:53,640 --> 00:02:00,240
so that's the last name of the guy I

00:01:56,520 --> 00:02:03,119
founded the company so we are a Swiss

00:02:00,240 --> 00:02:05,850
based company we were founded in 1968

00:02:03,119 --> 00:02:07,680
and we do mostly software consulting and

00:02:05,850 --> 00:02:09,099
business like agile business

00:02:07,680 --> 00:02:11,109
transformation

00:02:09,099 --> 00:02:15,609
we started off in Switzerland but

00:02:11,109 --> 00:02:17,859
nowadays we are kind of global we are

00:02:15,609 --> 00:02:20,739
operating in 8 countries so don't worry

00:02:17,859 --> 00:02:22,930
if you can't read the names so the

00:02:20,739 --> 00:02:25,840
basics are we are in middle Europe or

00:02:22,930 --> 00:02:28,299
Central Europe it's cold right a bit of

00:02:25,840 --> 00:02:31,629
Eastern Europe and three years ago we

00:02:28,299 --> 00:02:34,209
started right here sukkah Asia that's

00:02:31,629 --> 00:02:35,859
why we are here today or why I had the

00:02:34,209 --> 00:02:39,159
opportunity from a company to come

00:02:35,859 --> 00:02:42,790
actually here to Asia which is very cool

00:02:39,159 --> 00:02:45,909
so we have suka Singapore we started two

00:02:42,790 --> 00:02:48,189
years ago with zero people right and now

00:02:45,909 --> 00:02:50,519
we are at 36 in place so we are growing

00:02:48,189 --> 00:02:53,169
quite fast which is very cool and

00:02:50,519 --> 00:02:55,449
actually we want to grow more so we

00:02:53,169 --> 00:02:59,439
would like to reach a target of 100

00:02:55,449 --> 00:03:02,590
employees at the end of next year let's

00:02:59,439 --> 00:03:04,269
see if we can reach our goal there's

00:03:02,590 --> 00:03:07,599
also silk your Hong Kong which is a bit

00:03:04,269 --> 00:03:09,099
smaller it's still a bit a bit fresh so

00:03:07,599 --> 00:03:10,959
it's one and a half years ago when it

00:03:09,099 --> 00:03:12,849
was founded and it's currently at 20

00:03:10,959 --> 00:03:16,930
employees so it's smaller than here but

00:03:12,849 --> 00:03:19,060
still still a nice little team so if

00:03:16,930 --> 00:03:20,949
you're interested if you want to know

00:03:19,060 --> 00:03:23,259
more about what we do and how we do it

00:03:20,949 --> 00:03:25,870
and where we are all from we are these

00:03:23,259 --> 00:03:27,790
guys with their shirts now if you took

00:03:25,870 --> 00:03:29,470
one you have one of these shirts too now

00:03:27,790 --> 00:03:30,840
right but the guys that wear it now

00:03:29,470 --> 00:03:33,759
where are they

00:03:30,840 --> 00:03:37,090
behind back there all these guys are

00:03:33,759 --> 00:03:39,099
working and girls sorry are working for

00:03:37,090 --> 00:03:40,930
silica if you have any questions if you

00:03:39,099 --> 00:03:45,129
want to get in touch with us just come

00:03:40,930 --> 00:03:48,579
talk to us we actually like to talk so

00:03:45,129 --> 00:03:52,780
but now guess let's get into it oops

00:03:48,579 --> 00:03:56,290
voila so our goals today are that we can

00:03:52,780 --> 00:03:59,889
all kind of say what is webassembly all

00:03:56,290 --> 00:04:01,959
about how can i how can I achieve new

00:03:59,889 --> 00:04:04,030
native performance in the browser how do

00:04:01,959 --> 00:04:05,789
I send the code to the browser how do I

00:04:04,030 --> 00:04:08,379
interact with it that's that's basically

00:04:05,789 --> 00:04:11,289
the most important part so how can I

00:04:08,379 --> 00:04:16,239
send data back and forth between my

00:04:11,289 --> 00:04:18,820
JavaScript and my C Java rust go

00:04:16,239 --> 00:04:21,079
whatever language codes I want to have

00:04:18,820 --> 00:04:23,240
running in webassembly

00:04:21,079 --> 00:04:25,159
and in the end we're all still gonna

00:04:23,240 --> 00:04:26,810
have some fun like do some exercises

00:04:25,159 --> 00:04:31,099
that you can just fool around a bit and

00:04:26,810 --> 00:04:32,930
see what it's actually capable of that's

00:04:31,099 --> 00:04:34,460
basically the schedule around here I

00:04:32,930 --> 00:04:37,250
thought we might want to have like two

00:04:34,460 --> 00:04:39,319
minor breaks so we are not completely

00:04:37,250 --> 00:04:42,710
down in here and we can get some oxygen

00:04:39,319 --> 00:04:46,280
from from the outside we will first look

00:04:42,710 --> 00:04:48,319
at some basics a bit of theory and then

00:04:46,280 --> 00:04:50,659
we will get into our first exercises and

00:04:48,319 --> 00:04:53,150
then we will have a look into more

00:04:50,659 --> 00:04:55,819
in-depth use cases so how does it really

00:04:53,150 --> 00:04:59,599
really work if we're gonna pass strings

00:04:55,819 --> 00:05:02,449
if we want to work with 64-bit integers

00:04:59,599 --> 00:05:06,520
and stuff like that and in the end we'll

00:05:02,449 --> 00:05:09,440
have a experimenting exercise with

00:05:06,520 --> 00:05:11,379
OpenCV I will explain that a bit in a

00:05:09,440 --> 00:05:15,590
second

00:05:11,379 --> 00:05:17,270
exactly so if you wonder if you never

00:05:15,590 --> 00:05:19,940
have seen that this kind of presentation

00:05:17,270 --> 00:05:21,740
is with the framework reveal.js I guess

00:05:19,940 --> 00:05:23,539
most of you have already seen that I

00:05:21,740 --> 00:05:26,240
think a lot of speakers actually used

00:05:23,539 --> 00:05:32,029
that here at the conference so you might

00:05:26,240 --> 00:05:34,969
not be that new to you so let's jump

00:05:32,029 --> 00:05:37,340
right into him yeah what is web assembly

00:05:34,969 --> 00:05:40,190
so from now on I probably gonna call it

00:05:37,340 --> 00:05:42,139
often buzzin because it's shorter than

00:05:40,190 --> 00:05:44,500
web assembly but it means the same thing

00:05:42,139 --> 00:05:49,340
we will see Rosen throughout the whole

00:05:44,500 --> 00:05:52,789
workshop so don't get it I hope it don't

00:05:49,340 --> 00:05:54,710
get you confused or something the cool

00:05:52,789 --> 00:05:56,419
thing is why web assembly also really

00:05:54,710 --> 00:05:59,120
took off in the last couple of months or

00:05:56,419 --> 00:06:03,469
years is because browser support has to

00:05:59,120 --> 00:06:05,960
has increased a lot so you see like

00:06:03,469 --> 00:06:09,080
maybe two years ago you would have to

00:06:05,960 --> 00:06:10,729
start Chrome with certain flags that web

00:06:09,080 --> 00:06:13,190
assembly is actually available to you

00:06:10,729 --> 00:06:14,930
but nowadays it's readily available in

00:06:13,190 --> 00:06:18,020
all the browsers that you actually want

00:06:14,930 --> 00:06:21,409
to use obviously since I 11 is not being

00:06:18,020 --> 00:06:24,979
actively developed anymore right I 11

00:06:21,409 --> 00:06:27,740
constantly about H Safari Firefox Chrome

00:06:24,979 --> 00:06:31,039
they all have a good implementation of

00:06:27,740 --> 00:06:32,719
web assembly 1.0 we will talk a bit

00:06:31,039 --> 00:06:34,319
about that what is what is going to come

00:06:32,719 --> 00:06:36,689
in the next couple of months

00:06:34,319 --> 00:06:41,939
or years so this is the first

00:06:36,689 --> 00:06:44,309
webassembly version so what is was an

00:06:41,939 --> 00:06:47,449
apps actually so so what do we have to

00:06:44,309 --> 00:06:49,499
think of when we talk about webassembly

00:06:47,449 --> 00:06:52,589
basically it's bytecode for the browser

00:06:49,499 --> 00:06:54,839
right we can we can actually send a

00:06:52,589 --> 00:06:58,589
binary to the browser and it will run in

00:06:54,839 --> 00:07:01,080
a VM with near native performance so

00:06:58,589 --> 00:07:03,869
whatever we can compile to that format

00:07:01,080 --> 00:07:06,389
will be able to run in the browser right

00:07:03,869 --> 00:07:08,459
away no need for any backends no need

00:07:06,389 --> 00:07:10,619
for any other calls you get your binary

00:07:08,459 --> 00:07:12,869
you tell the brand I should run that in

00:07:10,619 --> 00:07:16,289
that web assembly VM and it will just

00:07:12,869 --> 00:07:18,659
just work we will see that later on it's

00:07:16,289 --> 00:07:20,399
actually a first I think or one of the

00:07:18,659 --> 00:07:24,539
first times that all the browser vendors

00:07:20,399 --> 00:07:26,459
including Apple were really able to sit

00:07:24,539 --> 00:07:28,889
at the table and say this is the format

00:07:26,459 --> 00:07:31,110
we all support our no prefixes there's

00:07:28,889 --> 00:07:32,819
nothing else in it so they really all

00:07:31,110 --> 00:07:35,219
have the same VM well the same

00:07:32,819 --> 00:07:37,520
implementation of it that's really cool

00:07:35,219 --> 00:07:37,520
in my opinion

00:07:39,470 --> 00:07:45,510
but you might ask what languages can

00:07:43,110 --> 00:07:49,440
actually be compiled to a samurai can I

00:07:45,510 --> 00:07:51,960
use Java can I use go language so I

00:07:49,440 --> 00:07:53,820
included a list of or a github

00:07:51,960 --> 00:07:57,080
repository where somebody actually

00:07:53,820 --> 00:07:59,730
curated or is has a curated list of

00:07:57,080 --> 00:08:02,040
languages that are supported currently

00:07:59,730 --> 00:08:04,620
so this is basically just a list of

00:08:02,040 --> 00:08:08,760
languages that have a compiler that can

00:08:04,620 --> 00:08:10,740
compile to the yasm so you see here

00:08:08,760 --> 00:08:13,740
there are hatched eggs or hatched

00:08:10,740 --> 00:08:17,070
chickens and eggs so the ones with the X

00:08:13,740 --> 00:08:19,230
they are not there yet but the ones with

00:08:17,070 --> 00:08:21,720
the hatched chickens are very good

00:08:19,230 --> 00:08:23,669
supported so you see the C language is

00:08:21,720 --> 00:08:26,220
like C and C++ they are very good

00:08:23,669 --> 00:08:29,280
supported we have go which is good

00:08:26,220 --> 00:08:30,930
supported we have Lua and I think

00:08:29,280 --> 00:08:34,919
brainfuck right so if you want to write

00:08:30,930 --> 00:08:37,229
brainfuck go ahead and rust that's

00:08:34,919 --> 00:08:39,630
actually what we will be using a bit

00:08:37,229 --> 00:08:44,130
throughout this workshop don't worry if

00:08:39,630 --> 00:08:46,410
you don't know rust that well you don't

00:08:44,130 --> 00:08:48,630
need any in-depth knowledge so we will

00:08:46,410 --> 00:08:51,750
have very basic small functions in web

00:08:48,630 --> 00:08:53,700
assembly and fool around with them right

00:08:51,750 --> 00:08:56,400
so you don't have to know how the memory

00:08:53,700 --> 00:08:59,640
management of rust actually works how

00:08:56,400 --> 00:09:02,190
all the details of all the types are we

00:08:59,640 --> 00:09:04,560
will just have a very basic set so don't

00:09:02,190 --> 00:09:08,700
worry about that I hope it will be will

00:09:04,560 --> 00:09:10,740
not be overwhelming at all so let's look

00:09:08,700 --> 00:09:12,570
at a small compilation example that we

00:09:10,740 --> 00:09:15,180
have kind of understands what happens

00:09:12,570 --> 00:09:18,240
behind the scenes so this is a little C

00:09:15,180 --> 00:09:24,000
code can you all see that is to contrast

00:09:18,240 --> 00:09:25,980
okay enough is it good okay so this is a

00:09:24,000 --> 00:09:27,900
little C function that does factorial

00:09:25,980 --> 00:09:31,470
right you probably all know that if we

00:09:27,900 --> 00:09:34,440
make if you have the factorial of 5 you

00:09:31,470 --> 00:09:36,570
would multiply 5 times 4 times 3 times 2

00:09:34,440 --> 00:09:39,960
times 1 which would then be hundred and

00:09:36,570 --> 00:09:43,080
20 so a very easy function that is

00:09:39,960 --> 00:09:47,220
recursive so we call ourselves with n

00:09:43,080 --> 00:09:48,930
minus 1 or yeah n minus 1 so we would

00:09:47,220 --> 00:09:50,200
first compile that in an intermediate

00:09:48,930 --> 00:09:52,300
format so

00:09:50,200 --> 00:09:53,800
from there it will be easier to compile

00:09:52,300 --> 00:09:56,589
it to actual webassembly

00:09:53,800 --> 00:09:58,720
so you still see some of you might be a

00:09:56,589 --> 00:10:00,820
bit more familiar with code like that so

00:09:58,720 --> 00:10:03,370
you can kinda figure out what that would

00:10:00,820 --> 00:10:06,209
do or maybe you can at least kind of

00:10:03,370 --> 00:10:09,130
draw some some lines between here and

00:10:06,209 --> 00:10:11,260
the C code we saw before right you might

00:10:09,130 --> 00:10:13,570
think like okay I see kind of there is

00:10:11,260 --> 00:10:15,970
the integer and we do something with

00:10:13,570 --> 00:10:18,880
that and in the end it will look like

00:10:15,970 --> 00:10:20,290
that so obviously we are all able to

00:10:18,880 --> 00:10:22,449
read that right away right we are

00:10:20,290 --> 00:10:24,670
programmers so we just see that like the

00:10:22,449 --> 00:10:27,880
matrix and we see oh yeah obviously this

00:10:24,670 --> 00:10:29,709
is factorial yeah no I just wanted you

00:10:27,880 --> 00:10:32,139
to show this is the actual format that

00:10:29,709 --> 00:10:35,050
will be sent over the line so that you

00:10:32,139 --> 00:10:38,130
saw it there's also a text

00:10:35,050 --> 00:10:40,720
representation of that whole thing so

00:10:38,130 --> 00:10:43,420
this is what it looks like when we are

00:10:40,720 --> 00:10:45,670
using the IDE later on when we will

00:10:43,420 --> 00:10:48,990
program a bit if you click on the bottom

00:10:45,670 --> 00:10:51,339
binary you will see that code actually

00:10:48,990 --> 00:10:53,440
this is not what will be sent to the

00:10:51,339 --> 00:10:57,130
browser this is just the format for us

00:10:53,440 --> 00:10:59,140
that we can actually read at least to a

00:10:57,130 --> 00:11:01,360
certain extent right you can kinda see

00:10:59,140 --> 00:11:04,300
what's happening so what we actually do

00:11:01,360 --> 00:11:05,740
here this is but this is not what we

00:11:04,300 --> 00:11:07,779
will send to the browser we will

00:11:05,740 --> 00:11:10,329
actually send a binary to the browser

00:11:07,779 --> 00:11:14,170
not this string representation this is

00:11:10,329 --> 00:11:18,100
just for us so we can see the bit or we

00:11:14,170 --> 00:11:19,750
can at least least read it a bit so

00:11:18,100 --> 00:11:22,899
let's come to the limitations right so

00:11:19,750 --> 00:11:25,089
we have seen we can compile cool so can

00:11:22,899 --> 00:11:27,760
we compile anything does this everything

00:11:25,089 --> 00:11:29,699
where to do we have like any native

00:11:27,760 --> 00:11:32,019
function you could think about

00:11:29,699 --> 00:11:34,300
unfortunately no so let's first talk

00:11:32,019 --> 00:11:36,519
about memory memory management is a huge

00:11:34,300 --> 00:11:40,510
thing right we probably all struggled

00:11:36,519 --> 00:11:44,050
with it once at least what web assembly

00:11:40,510 --> 00:11:45,940
has is flat linear memory if if that

00:11:44,050 --> 00:11:47,920
doesn't really ring a bell with you this

00:11:45,940 --> 00:11:50,199
means pretty much you have one array and

00:11:47,920 --> 00:11:52,480
every element of the array is one byte

00:11:50,199 --> 00:11:56,199
so if you would have one kilobyte of

00:11:52,480 --> 00:11:59,170
memory you will have a array with 1024

00:11:56,199 --> 00:12:01,510
elements every element would be one byte

00:11:59,170 --> 00:12:03,200
so fairly easy right you can just

00:12:01,510 --> 00:12:05,090
navigate on that array if you

00:12:03,200 --> 00:12:07,070
wanna do some pointer magic you can just

00:12:05,090 --> 00:12:09,770
increase and decrease your pointer and

00:12:07,070 --> 00:12:11,570
read any byte that you wanna have until

00:12:09,770 --> 00:12:15,680
you get some out of memory exception or

00:12:11,570 --> 00:12:17,750
index out of bounds exception what it

00:12:15,680 --> 00:12:20,120
doesn't happen this is a very important

00:12:17,750 --> 00:12:22,430
thing this is also why you saw Java is

00:12:20,120 --> 00:12:24,050
not quite there yet it's not a hatch

00:12:22,430 --> 00:12:26,300
deck it's still kind of in that

00:12:24,050 --> 00:12:29,480
breathing State

00:12:26,300 --> 00:12:32,600
we don't have garbage collection so this

00:12:29,480 --> 00:12:34,820
means we we have a memory array and if

00:12:32,600 --> 00:12:36,740
you are with C or C++ you are you're you

00:12:34,820 --> 00:12:38,870
sit right you free your own memory so

00:12:36,740 --> 00:12:41,270
that works but languages that use

00:12:38,870 --> 00:12:43,580
garbage collection don't work out of the

00:12:41,270 --> 00:12:48,020
box so that's a big thing we will talk

00:12:43,580 --> 00:12:50,270
about later but it's working progress I

00:12:48,020 --> 00:12:52,970
will come to that point so if you

00:12:50,270 --> 00:12:54,860
thought like you can send a binary to

00:12:52,970 --> 00:12:57,440
the browser and they can just run as a

00:12:54,860 --> 00:12:59,300
whole web application as of now this is

00:12:57,440 --> 00:13:01,400
not really the case we don't have access

00:12:59,300 --> 00:13:04,430
to all the browser stuff so for example

00:13:01,400 --> 00:13:06,980
Dom is missing so if we have our C

00:13:04,430 --> 00:13:08,720
program we can't go like document query

00:13:06,980 --> 00:13:11,360
element and then we will just get the

00:13:08,720 --> 00:13:12,950
Dom node currently this is not supported

00:13:11,360 --> 00:13:15,260
but this is one of the bigger issues

00:13:12,950 --> 00:13:17,810
that is being discussed and is proposed

00:13:15,260 --> 00:13:23,690
for one of the upcoming upcoming

00:13:17,810 --> 00:13:25,490
versions of Basel then this is a this is

00:13:23,690 --> 00:13:29,420
quite a high limitation if you want to

00:13:25,490 --> 00:13:32,570
do a lot of hardcore computing where you

00:13:29,420 --> 00:13:35,150
want to have the leverage of the GPU so

00:13:32,570 --> 00:13:37,760
you can actually be fast or how fast

00:13:35,150 --> 00:13:39,230
math currently there is no cheap you

00:13:37,760 --> 00:13:41,150
access and it's not really planned

00:13:39,230 --> 00:13:43,460
because it's a very hard discussion

00:13:41,150 --> 00:13:45,560
there is so much to discuss about how

00:13:43,460 --> 00:13:47,600
you actually access the different

00:13:45,560 --> 00:13:49,310
graphics cards with all their different

00:13:47,600 --> 00:13:52,430
architectures and different programming

00:13:49,310 --> 00:13:54,230
languages so this is something that is

00:13:52,430 --> 00:13:58,520
being discussed but it's not like as a

00:13:54,230 --> 00:14:00,170
big priority currently so I'm sorry if

00:13:58,520 --> 00:14:03,410
you want to have your blockchain miner

00:14:00,170 --> 00:14:05,270
in the browser not yet unfortunately

00:14:03,410 --> 00:14:08,440
because CPU mining is not that good

00:14:05,270 --> 00:14:11,200
right but also what's maybe a bit of a

00:14:08,440 --> 00:14:14,480
better actual use case that we have

00:14:11,200 --> 00:14:14,840
heavy machine learning is often done on

00:14:14,480 --> 00:14:17,120
that

00:14:14,840 --> 00:14:19,070
pure so you can't do that right now so

00:14:17,120 --> 00:14:25,460
when we do machine learning stuff we are

00:14:19,070 --> 00:14:27,560
limited to CPU CPU calculations then one

00:14:25,460 --> 00:14:29,210
of the biggest limitations that we will

00:14:27,560 --> 00:14:31,190
stumble across right from the beginning

00:14:29,210 --> 00:14:33,680
is there aren't many types in web

00:14:31,190 --> 00:14:36,770
assembly that doesn't mean like your C

00:14:33,680 --> 00:14:38,600
code can't use all its types right C can

00:14:36,770 --> 00:14:40,460
use any type it wants I mean it has

00:14:38,600 --> 00:14:42,760
direct memory access it just does what

00:14:40,460 --> 00:14:45,830
it wants but the interface between

00:14:42,760 --> 00:14:48,350
browsers and web assembly basically has

00:14:45,830 --> 00:14:51,500
these four types or these five types we

00:14:48,350 --> 00:14:55,040
have integers 32 and 64 bits we have

00:14:51,500 --> 00:14:58,279
floats 32 and 64 bits and real functions

00:14:55,040 --> 00:15:00,770
but this is pretty much all we have - we

00:14:58,279 --> 00:15:03,260
have on earth that we can actually use

00:15:00,770 --> 00:15:07,100
for the first couple of exercises we

00:15:03,260 --> 00:15:09,920
will basically be sending integers forth

00:15:07,100 --> 00:15:15,020
and back so that's kind of a limitation

00:15:09,920 --> 00:15:17,990
but this is being worked on - so what we

00:15:15,020 --> 00:15:20,060
do when we want to exchange other types

00:15:17,990 --> 00:15:22,910
so we are back to pointer arithmetic

00:15:20,060 --> 00:15:26,450
right so what we would do is if we take

00:15:22,910 --> 00:15:28,730
a rust example we would allocate memory

00:15:26,450 --> 00:15:30,950
for a string and rust would write that

00:15:28,730 --> 00:15:33,200
string into that memory then take the

00:15:30,950 --> 00:15:35,750
pointer the pointer is an integer right

00:15:33,200 --> 00:15:37,400
so we send that integer through the

00:15:35,750 --> 00:15:40,700
interface get it to JavaScript

00:15:37,400 --> 00:15:42,620
JavaScript on its side has access from

00:15:40,700 --> 00:15:45,290
the from from above right to the

00:15:42,620 --> 00:15:47,330
webassembly memory so what it does is it

00:15:45,290 --> 00:15:50,030
takes a pointer goes into that array

00:15:47,330 --> 00:15:52,730
reach the string until the first 0

00:15:50,030 --> 00:15:55,880
because C strings for example are 0

00:15:52,730 --> 00:15:59,150
null-terminated so it reads until it

00:15:55,880 --> 00:16:01,910
finds the first 0 thus interpret every

00:15:59,150 --> 00:16:05,720
byte as a utf-8 byte and voila we have

00:16:01,910 --> 00:16:07,490
our string in JavaScript it's not very

00:16:05,720 --> 00:16:10,459
cool but we will do it later on so you

00:16:07,490 --> 00:16:12,740
will see how it does so this is what we

00:16:10,459 --> 00:16:14,150
kind of have to deal with now but we

00:16:12,740 --> 00:16:16,339
will see that light source oh don't

00:16:14,150 --> 00:16:18,899
worry about it too much

00:16:16,339 --> 00:16:21,420
but what is coming right we want to know

00:16:18,899 --> 00:16:23,070
okay these are the limitations for what

00:16:21,420 --> 00:16:25,050
should be coming and one of the first

00:16:23,070 --> 00:16:28,459
things is also the first things I

00:16:25,050 --> 00:16:30,660
mentioned at the limitations actually

00:16:28,459 --> 00:16:32,910
since garbage collection is not

00:16:30,660 --> 00:16:35,160
supported right now all the languages

00:16:32,910 --> 00:16:37,350
that use a garbage collector can I have

00:16:35,160 --> 00:16:40,019
to do their own garbage collector then

00:16:37,350 --> 00:16:42,089
compile it down tourism and then send it

00:16:40,019 --> 00:16:44,579
with your actual binary to the browser

00:16:42,089 --> 00:16:48,480
so the browser instantiates you're

00:16:44,579 --> 00:16:50,610
welcome code plus that sent garbage

00:16:48,480 --> 00:16:52,740
collector that will then work in web

00:16:50,610 --> 00:16:56,100
assembly so Russ does it that way for

00:16:52,740 --> 00:16:58,980
example obviously not very good for

00:16:56,100 --> 00:17:01,200
binary size and and the whole efficiency

00:16:58,980 --> 00:17:03,049
so what they are working on now is that

00:17:01,200 --> 00:17:06,179
you have some basic garbage collection

00:17:03,049 --> 00:17:08,459
in web assembly right away so you don't

00:17:06,179 --> 00:17:09,750
have to send your own garbage collector

00:17:08,459 --> 00:17:12,390
we don't want to be writing our own

00:17:09,750 --> 00:17:14,280
garbage collectors right then another

00:17:12,390 --> 00:17:16,169
big thing is host bindings this is

00:17:14,280 --> 00:17:19,650
actually cool so this would mean we can

00:17:16,169 --> 00:17:21,929
actually take Tom notes sent them to web

00:17:19,650 --> 00:17:24,689
assembly or even create the web assembly

00:17:21,929 --> 00:17:27,839
at the dom nodes in webassembly sent

00:17:24,689 --> 00:17:30,570
them forth and back transform them

00:17:27,839 --> 00:17:32,820
update and delete them so the host

00:17:30,570 --> 00:17:36,440
bindings proposal is very cool and would

00:17:32,820 --> 00:17:38,820
actually allow us to do a lot of things

00:17:36,440 --> 00:17:42,390
then what I didn't mention with the

00:17:38,820 --> 00:17:45,000
limitations multi-threading so threats

00:17:42,390 --> 00:17:46,410
should be coming soon what they were

00:17:45,000 --> 00:17:48,809
thinking is that you can have an

00:17:46,410 --> 00:17:52,559
abstraction over threads so not every

00:17:48,809 --> 00:17:54,179
browser has to deal with every or your

00:17:52,559 --> 00:17:56,669
web assembly code doesn't have to deal

00:17:54,179 --> 00:17:58,799
with on which operating system it runs

00:17:56,669 --> 00:18:01,530
right and which way it does create a

00:17:58,799 --> 00:18:03,510
threat so what they were thinking is you

00:18:01,530 --> 00:18:06,090
already have threads in the web with web

00:18:03,510 --> 00:18:09,570
workers right so you can already kind of

00:18:06,090 --> 00:18:12,059
have threats so they would leverage what

00:18:09,570 --> 00:18:13,650
is existing and would take that to web

00:18:12,059 --> 00:18:15,780
assembly so you can actually have

00:18:13,650 --> 00:18:18,929
threats in the form or in the same way

00:18:15,780 --> 00:18:19,549
that web workers will work or kind of

00:18:18,929 --> 00:18:22,700
the same way

00:18:19,549 --> 00:18:24,169
exactly the same way then one of the

00:18:22,700 --> 00:18:25,850
biggest problems I think everybody

00:18:24,169 --> 00:18:28,730
everyone in here has struggled with that

00:18:25,850 --> 00:18:31,070
right exception happening every language

00:18:28,730 --> 00:18:34,070
has its own concept we have a lot of

00:18:31,070 --> 00:18:36,860
various exception handling mechanisms

00:18:34,070 --> 00:18:38,509
and we will see that later on whether

00:18:36,860 --> 00:18:41,179
assembly doesn't have one yet

00:18:38,509 --> 00:18:43,159
so if you see code fails this can be

00:18:41,179 --> 00:18:44,869
very hard to debug and kind of find out

00:18:43,159 --> 00:18:46,639
what actually happened because the

00:18:44,869 --> 00:18:48,169
exception is not like going up to

00:18:46,639 --> 00:18:50,330
JavaScript then we can just have a

00:18:48,169 --> 00:18:54,350
try-catch around it this is not working

00:18:50,330 --> 00:18:56,149
currently but it should be in probably

00:18:54,350 --> 00:18:58,759
more of the far future I would say

00:18:56,149 --> 00:19:01,100
because if you go to the github

00:18:58,759 --> 00:19:03,440
repository or web assembly and follow

00:19:01,100 --> 00:19:05,960
that issue you will see there's a lot of

00:19:03,440 --> 00:19:08,539
discussions and this goes way beyond

00:19:05,960 --> 00:19:12,830
whether I understand so I don't even try

00:19:08,539 --> 00:19:15,499
to explain that to you here reference

00:19:12,830 --> 00:19:17,029
types is very closely coupled to the

00:19:15,499 --> 00:19:19,340
host bindings approach so this would

00:19:17,029 --> 00:19:21,830
mean that we actually leverage that

00:19:19,340 --> 00:19:24,590
interface to have that any ref type so

00:19:21,830 --> 00:19:27,350
we can pass in various kind of types and

00:19:24,590 --> 00:19:29,269
references this would be closely coupled

00:19:27,350 --> 00:19:32,149
to the house binding so both of them

00:19:29,269 --> 00:19:36,820
would kind of be have to be solved for

00:19:32,149 --> 00:19:39,739
it to work properly and to a cool extent

00:19:36,820 --> 00:19:42,919
and that's a lot more so there's a cool

00:19:39,739 --> 00:19:46,549
list of that I think where is it oh yeah

00:19:42,919 --> 00:19:49,399
the guy Colin Everhart he has a very

00:19:46,549 --> 00:19:51,649
goodness about that if you're gonna have

00:19:49,399 --> 00:19:53,629
a look at that he has really every

00:19:51,649 --> 00:19:55,730
proposal there is in which phase it is

00:19:53,629 --> 00:19:59,269
what he thinks about it what he thinks

00:19:55,730 --> 00:20:01,009
is the actual hard part about it so if

00:19:59,269 --> 00:20:02,899
you want to read more about that and you

00:20:01,009 --> 00:20:05,539
want to really go into all the details

00:20:02,899 --> 00:20:08,210
all the nitty-gritty details check that

00:20:05,539 --> 00:20:10,820
out really cool blog post in my opinion

00:20:08,210 --> 00:20:12,499
you will have access to my presentation

00:20:10,820 --> 00:20:16,190
later on so you will have all these

00:20:12,499 --> 00:20:19,140
links cool

00:20:16,190 --> 00:20:21,870
so that's it very short a brief

00:20:19,140 --> 00:20:24,960
introduction to webassembly the theory

00:20:21,870 --> 00:20:28,039
before we go into our first exercises so

00:20:24,960 --> 00:20:30,900
do you have any questions at that moment

00:20:28,039 --> 00:20:33,929
still feeling okay ish retired from

00:20:30,900 --> 00:20:35,669
lunch probably right cool so let's move

00:20:33,929 --> 00:20:38,850
on let's go let's go to the actual

00:20:35,669 --> 00:20:42,840
exercises the fun stuff right cool where

00:20:38,850 --> 00:20:44,580
are we here we are so let's try out the

00:20:42,840 --> 00:20:48,390
basics of web assembly what I just kind

00:20:44,580 --> 00:20:50,309
of talked about we want to build and run

00:20:48,390 --> 00:20:51,870
some code that's what we are here for at

00:20:50,309 --> 00:20:55,770
least I hope that's what you are here

00:20:51,870 --> 00:20:58,260
for right so we're going to take rust

00:20:55,770 --> 00:20:59,940
for for a minute so I will do probably

00:20:58,260 --> 00:21:02,279
the shortest rust introduction you will

00:20:59,940 --> 00:21:04,980
ever get and it will not be in any way

00:21:02,279 --> 00:21:07,710
even closely to be complete so we'll

00:21:04,980 --> 00:21:13,740
just look at a very very easy function

00:21:07,710 --> 00:21:16,140
declaration this one fairly easy

00:21:13,740 --> 00:21:19,169
function I think what it does everybody

00:21:16,140 --> 00:21:21,840
of you see what it does it adds one to a

00:21:19,169 --> 00:21:23,940
given integer so this is hardcore math

00:21:21,840 --> 00:21:26,419
right we will be so fast with that and

00:21:23,940 --> 00:21:27,840
JavaScript would be so slow with that no

00:21:26,419 --> 00:21:30,090
obviously not

00:21:27,840 --> 00:21:32,850
but let's look at the rest function so

00:21:30,090 --> 00:21:35,970
what is it so the first thing we notice

00:21:32,850 --> 00:21:36,929
is that little flag up at the at the top

00:21:35,970 --> 00:21:39,330
of our function

00:21:36,929 --> 00:21:41,940
it says no mangle I hope you can all

00:21:39,330 --> 00:21:44,429
read that from the contrast what it does

00:21:41,940 --> 00:21:46,289
is basically just tell the compiler hey

00:21:44,429 --> 00:21:48,539
please don't change the name of that

00:21:46,289 --> 00:21:50,340
function and don't remove it because you

00:21:48,539 --> 00:21:52,620
see that nobody actually calls it right

00:21:50,340 --> 00:21:54,600
if you would use the rust compiler

00:21:52,620 --> 00:21:56,250
without that he would just remove the

00:21:54,600 --> 00:21:59,789
function and the binary would get his

00:21:56,250 --> 00:22:01,289
zero bytes because he says yeah you

00:21:59,789 --> 00:22:02,580
don't call that function so I'm gonna

00:22:01,289 --> 00:22:05,730
optimize it away

00:22:02,580 --> 00:22:07,380
good job so with no mangle we can

00:22:05,730 --> 00:22:10,140
actually tell the compiler please don't

00:22:07,380 --> 00:22:12,270
do that we need to be able to call that

00:22:10,140 --> 00:22:14,309
function by name so change the name

00:22:12,270 --> 00:22:18,630
please don't change the name and please

00:22:14,309 --> 00:22:21,809
don't remove it because yeah so which

00:22:18,630 --> 00:22:23,970
public extern see we say rust that this

00:22:21,809 --> 00:22:26,820
function will be called from externally

00:22:23,970 --> 00:22:27,630
and it will be called by AC like

00:22:26,820 --> 00:22:30,570
language

00:22:27,630 --> 00:22:32,370
so what Russ does is make sure that a CE

00:22:30,570 --> 00:22:34,980
compiled language can actually call that

00:22:32,370 --> 00:22:38,040
external function and this is what we

00:22:34,980 --> 00:22:40,080
will have when we call it over the web

00:22:38,040 --> 00:22:42,240
assembly interface you would actually

00:22:40,080 --> 00:22:44,340
not have to write that C that's kind of

00:22:42,240 --> 00:22:46,260
the default of rust but I did include it

00:22:44,340 --> 00:22:50,430
here so you have the whole example so

00:22:46,260 --> 00:22:53,280
you see what's actually going on so this

00:22:50,430 --> 00:22:54,720
is the function declaration I think

00:22:53,280 --> 00:22:57,990
that's actually pretty similar to what

00:22:54,720 --> 00:22:59,430
you would see with typescript or maybe

00:22:57,990 --> 00:23:02,190
you are used to CoffeeScript or

00:22:59,430 --> 00:23:05,190
something the only thing that you see

00:23:02,190 --> 00:23:09,240
here is the 32-bit integer so we get one

00:23:05,190 --> 00:23:14,240
parameter in called X and we will return

00:23:09,240 --> 00:23:17,010
one 32-bit integer I think simple right

00:23:14,240 --> 00:23:18,630
and this is the actual block the actual

00:23:17,010 --> 00:23:20,820
function so what do you notice here

00:23:18,630 --> 00:23:23,400
there is no return statement if you want

00:23:20,820 --> 00:23:25,290
to you can always add a return but rust

00:23:23,400 --> 00:23:27,780
doesn't need you to rust will just

00:23:25,290 --> 00:23:30,420
return the last expression you have in

00:23:27,780 --> 00:23:32,310
your block so if you're feeling lazy

00:23:30,420 --> 00:23:33,210
today yesterday you don't need

00:23:32,310 --> 00:23:34,740
semicolons

00:23:33,210 --> 00:23:36,780
you don't need return statements with

00:23:34,740 --> 00:23:39,870
rust if you want to do them either way

00:23:36,780 --> 00:23:44,640
they will not hurt you so whatever you

00:23:39,870 --> 00:23:47,280
like cool but since I don't want you to

00:23:44,640 --> 00:23:50,250
have to install the rust compiler right

00:23:47,280 --> 00:23:52,050
we have Linux Mac OS windows certainly

00:23:50,250 --> 00:23:54,240
what would work on some of the machines

00:23:52,050 --> 00:23:57,210
and the Sun we would just have some

00:23:54,240 --> 00:23:59,280
weird issues I'm gonna use the web

00:23:57,210 --> 00:24:01,670
assembly studio an awesome project by

00:23:59,280 --> 00:24:05,070
the Mozilla group or a Mozilla company

00:24:01,670 --> 00:24:09,840
it is an online either IDE that allows

00:24:05,070 --> 00:24:11,970
us to actually write rust or C or I

00:24:09,840 --> 00:24:14,190
think there's weather some assembly

00:24:11,970 --> 00:24:16,950
script but we are going to use rust

00:24:14,190 --> 00:24:19,980
today so we can write our code in there

00:24:16,950 --> 00:24:23,520
and directly compile and run it from

00:24:19,980 --> 00:24:27,600
there which is amazing in my opinion so

00:24:23,520 --> 00:24:30,870
if I can ask you all to try to go to

00:24:27,600 --> 00:24:33,510
that URL when I tried it last time

00:24:30,870 --> 00:24:35,250
somebody was trying it with H and it

00:24:33,510 --> 00:24:37,140
wasn't working with H I should work with

00:24:35,250 --> 00:24:40,680
Firefox Safari and Chrome so I

00:24:37,140 --> 00:24:45,540
hope there's nobody like wanting to hard

00:24:40,680 --> 00:24:49,020
car use edge so you can try it

00:24:45,540 --> 00:24:50,760
yeah is everybody in the Wi-Fi the Wi-Fi

00:24:49,020 --> 00:24:53,610
password would be over there otherwise

00:24:50,760 --> 00:24:55,080
so La Salle chairs comes with the Wi-Fi

00:24:53,610 --> 00:24:57,590
and choice confession would be the

00:24:55,080 --> 00:24:57,590
password

00:25:01,470 --> 00:25:06,040
when you go in there you will get that

00:25:03,820 --> 00:25:08,860
little assistant over here please select

00:25:06,040 --> 00:25:11,620
the simple roast project the empty rust

00:25:08,860 --> 00:25:13,330
project we will go step by step until we

00:25:11,620 --> 00:25:15,580
kind of reached at lower hello world

00:25:13,330 --> 00:25:17,560
rust project please don't open that yet

00:25:15,580 --> 00:25:19,780
but because it will have pretty much

00:25:17,560 --> 00:25:22,390
everything in there but we will kind of

00:25:19,780 --> 00:25:25,630
try to go step by step until we kind of

00:25:22,390 --> 00:25:27,880
until we finally understand what the

00:25:25,630 --> 00:25:29,740
hello world project actually does so

00:25:27,880 --> 00:25:38,800
please go into the empty Russ project

00:25:29,740 --> 00:25:41,070
and let's see what we have there since I

00:25:38,800 --> 00:25:46,000
want to try to come code a bit to here I

00:25:41,070 --> 00:25:48,520
have to do it like that okay so if you

00:25:46,000 --> 00:25:51,610
open the empty Russ project you will see

00:25:48,520 --> 00:25:53,260
that source folder over here here are

00:25:51,610 --> 00:25:56,530
the three files that we are actually

00:25:53,260 --> 00:25:59,440
interested in the HTML Javascript and

00:25:56,530 --> 00:26:02,590
the rust so first of all if you go to

00:25:59,440 --> 00:26:06,100
the rust file you will see that this is

00:26:02,590 --> 00:26:09,370
absolutely one-to-one the function that

00:26:06,100 --> 00:26:10,990
we just looked at right so nothing too

00:26:09,370 --> 00:26:12,510
fancy here you have just heard about

00:26:10,990 --> 00:26:15,730
that function cool

00:26:12,510 --> 00:26:18,070
if you click build up here like there's

00:26:15,730 --> 00:26:21,130
a build command if you hit that you will

00:26:18,070 --> 00:26:23,860
see there is a output on the bottom task

00:26:21,130 --> 00:26:26,080
field is running and then build complete

00:26:23,860 --> 00:26:28,210
what you will notice is now you have an

00:26:26,080 --> 00:26:30,760
out folder and there's the myosin file

00:26:28,210 --> 00:26:33,700
so this is our binary as mentioned

00:26:30,760 --> 00:26:36,370
before if you click on that you will

00:26:33,700 --> 00:26:38,560
actually see these s expressions that we

00:26:36,370 --> 00:26:41,680
were talking about earlier if you really

00:26:38,560 --> 00:26:44,020
want to watch or I want to take a look

00:26:41,680 --> 00:26:46,420
at the binary you can right click on

00:26:44,020 --> 00:26:47,320
that file name and somewhere down here

00:26:46,420 --> 00:26:51,220
you

00:26:47,320 --> 00:26:53,860
have view as binary and this helps us a

00:26:51,220 --> 00:26:55,570
lot right cool but if you want to look

00:26:53,860 --> 00:26:57,970
at it this is what actually will be sent

00:26:55,570 --> 00:27:02,080
to the browser just so you know this is

00:26:57,970 --> 00:27:04,090
not the real format nice but we see here

00:27:02,080 --> 00:27:07,510
we have a function that is exported

00:27:04,090 --> 00:27:10,360
called add one and there's some inter

00:27:07,510 --> 00:27:15,100
232 param and the results that is

00:27:10,360 --> 00:27:17,320
integer 32 so what we would expect right

00:27:15,100 --> 00:27:19,600
nothing too fancy around here so let's

00:27:17,320 --> 00:27:21,790
look at the Java Script what do we need

00:27:19,600 --> 00:27:24,310
to actually get that running and I will

00:27:21,790 --> 00:27:26,950
be reformatting that quickly a little

00:27:24,310 --> 00:27:29,190
bit so it's easier to read for us or at

00:27:26,950 --> 00:27:33,730
least I hope it is easier to read for us

00:27:29,190 --> 00:27:35,880
so let's have a look at that yeah is it

00:27:33,730 --> 00:27:41,100
big enough do you can you read it

00:27:35,880 --> 00:27:43,660
otherwise just scream and say cool I

00:27:41,100 --> 00:27:46,570
hope everybody in here knows fetch right

00:27:43,660 --> 00:27:48,130
so we just fetch a file out main Razzles

00:27:46,570 --> 00:27:50,740
so this is it right

00:27:48,130 --> 00:27:52,390
we know that file then what we do is we

00:27:50,740 --> 00:27:55,120
create an array buffer out of it and

00:27:52,390 --> 00:27:56,980
that will be handed directly to web

00:27:55,120 --> 00:27:59,260
assembly so if you go to your browser

00:27:56,980 --> 00:28:01,900
console nowadays you will see you have

00:27:59,260 --> 00:28:04,090
that webassembly object right on your

00:28:01,900 --> 00:28:07,420
window object so every browser nowadays

00:28:04,090 --> 00:28:09,820
hasa you can just use it like that what

00:28:07,420 --> 00:28:11,830
we can do is we take this array of bytes

00:28:09,820 --> 00:28:16,150
and instantiate the web assembly

00:28:11,830 --> 00:28:18,400
instance out of it cool a promise and it

00:28:16,150 --> 00:28:20,980
will return us this result on that

00:28:18,400 --> 00:28:23,980
results we have the instance and this is

00:28:20,980 --> 00:28:27,210
finally finally our Bassem interface

00:28:23,980 --> 00:28:31,990
right so here we are you see over here

00:28:27,210 --> 00:28:33,790
there's an expert's on that object so

00:28:31,990 --> 00:28:36,550
this is where all the exporter functions

00:28:33,790 --> 00:28:39,160
of our bottom of our running lesson will

00:28:36,550 --> 00:28:40,900
be located at and as you probably

00:28:39,160 --> 00:28:44,290
guessed right we are going to call that

00:28:40,900 --> 00:28:46,600
one function yeah what we're going to do

00:28:44,290 --> 00:28:48,760
is we expect there to be a return value

00:28:46,600 --> 00:28:50,070
and we will add that to that element

00:28:48,760 --> 00:28:53,100
called I

00:28:50,070 --> 00:28:53,880
with the ID container if you look at the

00:28:53,100 --> 00:28:56,190
HTML

00:28:53,880 --> 00:28:58,500
I think couldn't be much more easy than

00:28:56,190 --> 00:29:01,230
that right so you have a span that is

00:28:58,500 --> 00:29:04,470
called container what a surprise

00:29:01,230 --> 00:29:07,190
and a script that we fetch right main

00:29:04,470 --> 00:29:10,050
touch is the one we see over here

00:29:07,190 --> 00:29:13,920
nothing too fancy going on so the HTML

00:29:10,050 --> 00:29:16,260
will take the JavaScript JavaScript will

00:29:13,920 --> 00:29:19,140
fetch the yasm file will instantiate it

00:29:16,260 --> 00:29:20,640
call that one function on it and we'll

00:29:19,140 --> 00:29:24,360
show this to the browser

00:29:20,640 --> 00:29:25,950
so let's he'll hit build again and

00:29:24,360 --> 00:29:29,310
there's one important thing that you

00:29:25,950 --> 00:29:31,320
have to know if you don't save it you

00:29:29,310 --> 00:29:33,690
see it here I have that I have that

00:29:31,320 --> 00:29:35,820
circle if you don't save it and you

00:29:33,690 --> 00:29:38,190
click build it will not take in your

00:29:35,820 --> 00:29:40,470
changes your changes are only in the

00:29:38,190 --> 00:29:43,200
compile step if you save it so don't

00:29:40,470 --> 00:29:45,350
forget just press ctrl or command s

00:29:43,200 --> 00:29:49,890
whatever operating system you are on and

00:29:45,350 --> 00:29:53,940
this circle up here will disappear now

00:29:49,890 --> 00:29:56,970
when you hit build and run voila this

00:29:53,940 --> 00:29:59,010
should be it I hope you all see that can

00:29:56,970 --> 00:30:01,080
you try that out if you have build and

00:29:59,010 --> 00:30:04,160
run we will send a dress code I think

00:30:01,080 --> 00:30:06,960
it's done on the server we'll compile it

00:30:04,160 --> 00:30:11,610
make that ransom file load it into the

00:30:06,960 --> 00:30:14,400
browser give it 41 the rust will

00:30:11,610 --> 00:30:18,630
actually add that plus one and then we

00:30:14,400 --> 00:30:21,150
will output it to our browser again does

00:30:18,630 --> 00:30:23,640
this not work for anybody or is

00:30:21,150 --> 00:30:27,270
everybody happy everybody sees 42 the

00:30:23,640 --> 00:30:30,210
answer to all of our questions perfect

00:30:27,270 --> 00:30:34,410
nice to see so this is easy right so

00:30:30,210 --> 00:30:39,870
let's go into B this a bit more so that

00:30:34,410 --> 00:30:42,000
was maybe too easy so yeah ok let's have

00:30:39,870 --> 00:30:44,520
a quick look at the instantiation I

00:30:42,000 --> 00:30:46,680
already explained that we have to do an

00:30:44,520 --> 00:30:48,870
array buffer and webassembly doesn't

00:30:46,680 --> 00:30:51,780
Stan she eight expects us to have the

00:30:48,870 --> 00:30:53,490
array buffer because it is a binary file

00:30:51,780 --> 00:30:55,740
right we can't really do anything else

00:30:53,490 --> 00:30:56,460
with it we can't kind of make a choice

00:30:55,740 --> 00:30:58,740
on out of

00:30:56,460 --> 00:31:01,350
or something so an array buffer is

00:30:58,740 --> 00:31:04,320
probably probably the appropriate format

00:31:01,350 --> 00:31:07,800
of that whole thing there is a new

00:31:04,320 --> 00:31:09,450
method instantiate streaming it's called

00:31:07,800 --> 00:31:11,640
so we don't have to deal with the array

00:31:09,450 --> 00:31:14,460
buffer this is all done internally so

00:31:11,640 --> 00:31:16,530
here we can just add the fetch out of

00:31:14,460 --> 00:31:19,500
the fetch promise that we get back into

00:31:16,530 --> 00:31:21,540
that instantiate streaming it will be

00:31:19,500 --> 00:31:24,540
handled by web sembly or the web

00:31:21,540 --> 00:31:26,460
assembly API and we don't have to care

00:31:24,540 --> 00:31:30,300
about the array before anymore this is

00:31:26,460 --> 00:31:32,730
cool and a little bit more performant

00:31:30,300 --> 00:31:35,700
when you have very big binaries that can

00:31:32,730 --> 00:31:39,450
make a difference but unfortunately we

00:31:35,700 --> 00:31:42,060
have a new ie here so Safari is not yet

00:31:39,450 --> 00:31:45,510
on that but I should have it hopefully

00:31:42,060 --> 00:31:50,490
soon as of yesterday I think it wasn't

00:31:45,510 --> 00:31:55,770
in there but I hope it will be will be

00:31:50,490 --> 00:31:57,840
soon oh that's the wrong arrow but now

00:31:55,770 --> 00:31:59,940
let's talk about I mean it's all fun

00:31:57,840 --> 00:32:02,670
right we we call the function we get an

00:31:59,940 --> 00:32:04,890
integer back not very interesting we

00:32:02,670 --> 00:32:07,740
want to kind of have this ability to

00:32:04,890 --> 00:32:10,020
have a callback right tell rust as soon

00:32:07,740 --> 00:32:12,180
as you're done call us back because we

00:32:10,020 --> 00:32:14,160
are Chava Script developers there's only

00:32:12,180 --> 00:32:17,550
one way to personalities and it's

00:32:14,160 --> 00:32:19,880
callbacks cool there is the import

00:32:17,550 --> 00:32:22,230
object you see on both of these methods

00:32:19,880 --> 00:32:24,210
the instantiate and instantiate

00:32:22,230 --> 00:32:25,650
streaming there would be a second

00:32:24,210 --> 00:32:29,400
parameter that I didn't tell you about

00:32:25,650 --> 00:32:33,720
earlier so next to our array byte array

00:32:29,400 --> 00:32:35,580
of bytes we could also input a import

00:32:33,720 --> 00:32:38,550
object let's have a look at how that

00:32:35,580 --> 00:32:40,470
will look like that import object can

00:32:38,550 --> 00:32:43,530
have functions on it and we can actually

00:32:40,470 --> 00:32:45,510
pass that into rust at that point and

00:32:43,530 --> 00:32:47,430
rust will see these functions and will

00:32:45,510 --> 00:32:49,740
actually be able to call them so this is

00:32:47,430 --> 00:32:52,470
this is getting cooler right so we get

00:32:49,740 --> 00:32:54,660
some functionality done on here so how

00:32:52,470 --> 00:32:57,800
is that actually done let's look at the

00:32:54,660 --> 00:33:00,890
JavaScript for data first you notice um

00:32:57,800 --> 00:33:04,230
just a named it import object a very

00:33:00,890 --> 00:33:06,630
simple JavaScript object then there is

00:33:04,230 --> 00:33:09,210
one property that we have to set its

00:33:06,630 --> 00:33:11,910
this is just expected so all the import

00:33:09,210 --> 00:33:14,760
functions interests should be on that nf

00:33:11,910 --> 00:33:17,280
property otherwise I think during the

00:33:14,760 --> 00:33:19,260
build step the IDE will complain and say

00:33:17,280 --> 00:33:21,900
hey your import object doesn't have an

00:33:19,260 --> 00:33:24,060
end property so please add that

00:33:21,900 --> 00:33:26,580
otherwise you won't be able to actually

00:33:24,060 --> 00:33:29,280
call your functions so and if it's just

00:33:26,580 --> 00:33:31,800
another object and in here finally our

00:33:29,280 --> 00:33:35,370
functions are situated so cool things

00:33:31,800 --> 00:33:39,090
and as we know I want to debug right so

00:33:35,370 --> 00:33:42,360
I need console log so what I do is I

00:33:39,090 --> 00:33:45,390
call it log results as one parameter and

00:33:42,360 --> 00:33:46,830
I will just call console log in it so

00:33:45,390 --> 00:33:48,870
the cool thing is here right I'm back

00:33:46,830 --> 00:33:50,820
other JavaScript functions so my scope

00:33:48,870 --> 00:33:53,340
is actually what you would expect if

00:33:50,820 --> 00:33:55,350
that JavaScript function so we are not

00:33:53,340 --> 00:33:55,950
in some fancy pantsy scoping or

00:33:55,350 --> 00:33:58,560
something

00:33:55,950 --> 00:34:00,840
when ruffed calls us we are exactly at

00:33:58,560 --> 00:34:03,300
that scope you would expect so this is

00:34:00,840 --> 00:34:05,550
cool we can use all these window methods

00:34:03,300 --> 00:34:07,800
we could use other variables and

00:34:05,550 --> 00:34:09,090
functions that will be in our scope like

00:34:07,800 --> 00:34:12,570
you would expect it to work

00:34:09,090 --> 00:34:15,570
this is fairly cool and in the end you

00:34:12,570 --> 00:34:17,429
see webassembly instantiate we have to

00:34:15,570 --> 00:34:23,340
ask that import object in there and

00:34:17,429 --> 00:34:25,129
we're done on the rough side so the

00:34:23,340 --> 00:34:29,370
compiler will obviously complain and say

00:34:25,129 --> 00:34:31,620
no no no you call a function that isn't

00:34:29,370 --> 00:34:34,950
existing at compile time so we have to

00:34:31,620 --> 00:34:37,379
tell the RUS compiler please trust us we

00:34:34,950 --> 00:34:39,360
will have that function at runtime you

00:34:37,379 --> 00:34:41,669
don't see it anchored at compile time

00:34:39,360 --> 00:34:43,350
but that doesn't mean it won't work we

00:34:41,669 --> 00:34:45,480
will promise you we will add that

00:34:43,350 --> 00:34:47,940
function at one time so this is the

00:34:45,480 --> 00:34:49,830
external block with rust we can say that

00:34:47,940 --> 00:34:52,350
and say there's a function it will be

00:34:49,830 --> 00:34:54,929
called log result and since we can't

00:34:52,350 --> 00:34:58,230
pass strings yet we will just pass an

00:34:54,929 --> 00:35:01,740
integer so we'll say you can put in one

00:34:58,230 --> 00:35:03,900
integer and it's a 32-bit integer we

00:35:01,740 --> 00:35:06,060
will obviously look in this a bit more

00:35:03,900 --> 00:35:09,630
afterwards so that we can have our

00:35:06,060 --> 00:35:13,480
proper hello world project but now in AO

00:35:09,630 --> 00:35:16,070
we have to stick to integers

00:35:13,480 --> 00:35:17,720
what will it look like then in rust so

00:35:16,070 --> 00:35:20,450
if you take the same function as before

00:35:17,720 --> 00:35:22,580
you see there is no return type anymore

00:35:20,450 --> 00:35:25,070
obviously we call a function right we

00:35:22,580 --> 00:35:28,910
don't return an integer anymore

00:35:25,070 --> 00:35:30,680
and we have that unsafe block before we

00:35:28,910 --> 00:35:33,470
call the function why do we need that

00:35:30,680 --> 00:35:36,470
unsafe block rust

00:35:33,470 --> 00:35:39,110
tries to be safe like he tries to or he

00:35:36,470 --> 00:35:42,170
the compiler tries to make as many

00:35:39,110 --> 00:35:44,120
assertions as possible and tries to help

00:35:42,170 --> 00:35:46,130
you as much as possible so you won't

00:35:44,120 --> 00:35:48,620
screw it up right you won't shoot

00:35:46,130 --> 00:35:50,450
yourself in the foot so what it does it

00:35:48,620 --> 00:35:51,920
will tell you well this is an external

00:35:50,450 --> 00:35:54,290
block I can't help you on that

00:35:51,920 --> 00:35:56,840
so you have to wrap your call in an

00:35:54,290 --> 00:35:59,240
unsafe block so I actually know this is

00:35:56,840 --> 00:36:02,210
expected to be unsafe I can't have all

00:35:59,240 --> 00:36:05,180
my assertions on there so as soon as we

00:36:02,210 --> 00:36:07,460
have that unsafe block we we won't get

00:36:05,180 --> 00:36:10,040
any upsetting messages from our rust

00:36:07,460 --> 00:36:12,440
compiler anymore he will just wave it

00:36:10,040 --> 00:36:15,140
through and say okay you seem to know

00:36:12,440 --> 00:36:18,400
what you do I hope you do let's just go

00:36:15,140 --> 00:36:18,400
ahead and compile that

00:36:19,840 --> 00:36:28,300
cool so I have to quickly check

00:36:26,680 --> 00:36:30,490
something there should be a QR code

00:36:28,300 --> 00:36:33,070
somewhere around here I think I skipped

00:36:30,490 --> 00:36:36,550
it I'm very sorry that was around here

00:36:33,070 --> 00:36:39,190
yes I'm sorry so this presentation is

00:36:36,550 --> 00:36:42,160
actually on the web so all the exercises

00:36:39,190 --> 00:36:44,890
have these code snippets in there so

00:36:42,160 --> 00:36:47,710
please follow my presentation if you

00:36:44,890 --> 00:36:50,440
open either bits of Lee's large web

00:36:47,710 --> 00:36:53,920
assembly - workshop or scan the QR code

00:36:50,440 --> 00:36:57,490
you will get to my index page this is

00:36:53,920 --> 00:37:00,340
the page that you saw before from there

00:36:57,490 --> 00:37:03,510
you can open these various presentations

00:37:00,340 --> 00:37:07,690
so every chapter every chapter is an own

00:37:03,510 --> 00:37:09,460
presentation so keep that index open so

00:37:07,690 --> 00:37:15,220
we'll always have the possibility to

00:37:09,460 --> 00:37:17,620
jump into any chapter you want to did

00:37:15,220 --> 00:37:25,960
everybody get the link everybody on the

00:37:17,620 --> 00:37:28,300
page perfect so now we are at three

00:37:25,960 --> 00:37:34,690
chapter three so if you open that you

00:37:28,300 --> 00:37:37,210
will get to this slide over here so

00:37:34,690 --> 00:37:39,370
please take a look at these arrows so

00:37:37,210 --> 00:37:41,680
usually what I do is I have these kind

00:37:39,370 --> 00:37:44,200
of topics and we have an exercise we

00:37:41,680 --> 00:37:46,000
will go down vertically so you can

00:37:44,200 --> 00:37:48,520
navigate with your arrows or you can

00:37:46,000 --> 00:37:50,880
click on these arrows so whenever we are

00:37:48,520 --> 00:37:53,950
in an exercise you have to navigate

00:37:50,880 --> 00:37:55,720
vertically to find the code examples

00:37:53,950 --> 00:38:01,830
that you will be using for that current

00:37:55,720 --> 00:38:01,830
exercise so now we are at

00:38:03,500 --> 00:38:09,240
here cultures functions from rust if you

00:38:07,200 --> 00:38:13,380
hit escape you will get into this

00:38:09,240 --> 00:38:18,150
overview so this is actually the last

00:38:13,380 --> 00:38:20,760
exercise for that chapter can go into

00:38:18,150 --> 00:38:24,330
here and then you see all these code

00:38:20,760 --> 00:38:27,720
blocks and in the end you have the link

00:38:24,330 --> 00:38:29,460
again for web assembly studio so let's

00:38:27,720 --> 00:38:32,130
try to do that let's try to call a

00:38:29,460 --> 00:38:34,320
JavaScript function from rust so you

00:38:32,130 --> 00:38:37,380
have all the code examples that you use

00:38:34,320 --> 00:38:39,990
to create this exercise go to web

00:38:37,380 --> 00:38:41,490
assembly studio try to recreate that and

00:38:39,990 --> 00:38:43,980
if you have any questions I'll be around

00:38:41,490 --> 00:38:47,190
just come and ask me or I will come to

00:38:43,980 --> 00:38:49,050
you let's take like 10-15 minutes let's

00:38:47,190 --> 00:38:51,869
see how long you need for that and then

00:38:49,050 --> 00:38:57,020
discuss the exercise any questions for

00:38:51,869 --> 00:38:57,020
that cool happy hacking

00:39:42,010 --> 00:39:45,270
are you the outlaws

00:39:50,780 --> 00:39:58,330
so far clear I think it's quite easy

00:39:54,050 --> 00:39:58,330
right it's not too much to ask

00:40:00,590 --> 00:40:09,190
the audio quick I probably can't do

00:40:06,530 --> 00:40:13,140
anything about that right

00:40:09,190 --> 00:40:13,140
which is so that so is that

00:40:16,880 --> 00:40:20,110
I hope so

00:40:53,369 --> 00:40:57,390
is it okay if I take a picture of all of

00:40:55,619 --> 00:41:00,319
you working or is there anybody who

00:40:57,390 --> 00:41:00,319
wouldn't wanna have

00:41:21,990 --> 00:41:26,359
yes how could I give a console furnace

00:41:27,640 --> 00:41:33,730
oh oh yeah let me let me

00:41:38,369 --> 00:41:44,439
just got a very good question so how do

00:41:41,469 --> 00:41:46,329
you see the console of that your actual

00:41:44,439 --> 00:41:48,519
browser console is to console for that

00:41:46,329 --> 00:41:50,829
either IDE so if you open up your

00:41:48,519 --> 00:41:52,929
console you will see whatever you do

00:41:50,829 --> 00:41:56,069
with console log and stuff like that so

00:41:52,929 --> 00:41:56,069
you should see it in here

00:42:14,280 --> 00:42:18,579
when I click this building

00:42:16,099 --> 00:42:18,579
yeah

00:42:19,220 --> 00:42:25,100
it doesn't do anything not cause a long

00:42:21,500 --> 00:42:28,670
one yeah I mean that's easy this is

00:42:25,100 --> 00:42:33,260
weird for me to try here well yeah you

00:42:28,670 --> 00:42:39,740
can but I'm just oh did you safe did you

00:42:33,260 --> 00:42:41,750
forget to save oh that's that's so

00:42:39,740 --> 00:42:44,890
stupid I I stumbled over that a lot of

00:42:41,750 --> 00:42:44,890
times don't worry the way

00:42:52,589 --> 00:42:55,589
sorry

00:42:59,349 --> 00:43:02,349
coming

00:43:08,060 --> 00:43:16,690
yeah that looks simple associated by it

00:43:11,900 --> 00:43:20,030
oh oh look at this mind should be bite

00:43:16,690 --> 00:43:22,080
see ours there's an S missing let's try

00:43:20,030 --> 00:43:29,970
it like that

00:43:22,080 --> 00:43:34,650
always safe so stupid that looks better

00:43:29,970 --> 00:43:37,920
right yeah perfect you also see it over

00:43:34,650 --> 00:43:41,090
here I think yeah it also like if you

00:43:37,920 --> 00:43:41,090
look at comes what

00:43:45,210 --> 00:43:47,960
okay

00:43:53,460 --> 00:43:56,460
yeah

00:43:57,349 --> 00:44:03,959
the return oh yeah look what was he tall

00:44:01,380 --> 00:44:07,529
seus um he expected to have an i-32 but

00:44:03,959 --> 00:44:09,809
he found a function so you just have to

00:44:07,529 --> 00:44:12,949
remove the return type right because we

00:44:09,809 --> 00:44:17,759
are a void function right if you cha

00:44:12,949 --> 00:44:19,739
always yeah that's annoying cause we are

00:44:17,759 --> 00:44:25,400
not used anymore to having to click Save

00:44:19,739 --> 00:44:28,369
right perfect here you go right sure

00:44:25,400 --> 00:44:31,199
like then don't block me though

00:44:28,369 --> 00:44:33,119
no the idea is that you actually call

00:44:31,199 --> 00:44:36,779
this from your rusts code right so here

00:44:33,119 --> 00:44:38,670
you are in JavaScript so you can remove

00:44:36,779 --> 00:44:41,429
that over here but go into your rust

00:44:38,670 --> 00:44:44,729
file and you should be able to call it

00:44:41,429 --> 00:44:46,739
from here so what you can do is remove

00:44:44,729 --> 00:44:48,449
that return type from your function

00:44:46,739 --> 00:44:50,939
right say this is not returning anything

00:44:48,449 --> 00:44:54,140
anymore and then you can call it here

00:44:50,939 --> 00:44:54,140
lob result that

00:44:55,410 --> 00:45:01,950
exactly and you have to have that unsafe

00:44:58,589 --> 00:45:03,750
block around it and see yeah that's it

00:45:01,950 --> 00:45:07,549
can you look at the slides I think if

00:45:03,750 --> 00:45:11,430
you go down a bit yeah you can see

00:45:07,549 --> 00:45:15,019
because because the compiler will expect

00:45:11,430 --> 00:45:20,269
you to only call functions that are safe

00:45:15,019 --> 00:45:20,269
so cool let's try it yeah

00:45:23,650 --> 00:45:29,839
did you say

00:45:26,330 --> 00:45:34,609
cool sure

00:45:29,839 --> 00:45:38,809
oh there isn't there what happens oh we

00:45:34,609 --> 00:45:41,479
still have the return type yeah

00:45:38,809 --> 00:45:42,999
either you did that or you remove the

00:45:41,479 --> 00:45:45,079
return type right because we don't

00:45:42,999 --> 00:45:46,969
necessarily have to return all the thing

00:45:45,079 --> 00:45:53,689
but this is okay - yeah I'll write it

00:45:46,969 --> 00:45:55,759
out safe this is when you're not on the

00:45:53,689 --> 00:46:04,579
file then come on this will trigger to a

00:45:55,759 --> 00:46:07,519
chrome come on Esther Oh Oh perfect cool

00:46:04,579 --> 00:46:10,189
yeah do you not need to know manga like

00:46:07,519 --> 00:46:13,219
extend stuff no because this is actually

00:46:10,189 --> 00:46:15,380
from rust I did it expects you to say

00:46:13,219 --> 00:46:17,539
these are external functions so I love

00:46:15,380 --> 00:46:21,309
not remember it will not open to my stop

00:46:17,539 --> 00:46:21,309
block away yeah yeah

00:46:23,080 --> 00:46:31,060
was yeah if rough composite to say why

00:46:27,820 --> 00:46:35,530
don't we you see directly instant we can

00:46:31,060 --> 00:46:38,620
so rest doesn't not compare to see right

00:46:35,530 --> 00:46:41,320
rust compares to wasn't binary it we

00:46:38,620 --> 00:46:45,250
will use to see types to move between

00:46:41,320 --> 00:46:46,630
JavaScript and rust so rust itself uses

00:46:45,250 --> 00:46:48,460
its rust compiler and they'll be

00:46:46,630 --> 00:46:52,030
compiled to its own binary it will not

00:46:48,460 --> 00:46:53,410
be see but we will use the C types to

00:46:52,030 --> 00:46:56,560
move between JavaScript because

00:46:53,410 --> 00:46:58,180
JavaScript knows C kind of strings we

00:46:56,560 --> 00:46:59,890
will get our will explain it when we get

00:46:58,180 --> 00:47:01,990
to that because we kind of have to tell

00:46:59,890 --> 00:47:04,060
JavaScript we have to read it from

00:47:01,990 --> 00:47:06,220
memory ourselves right so we have to

00:47:04,060 --> 00:47:09,220
know what format is that string and the

00:47:06,220 --> 00:47:11,290
C string is just bytes with a zero at

00:47:09,220 --> 00:47:15,120
the end so this is easy to read for us

00:47:11,290 --> 00:47:21,580
does it mean I can you see with rust see

00:47:15,120 --> 00:47:24,570
see with you mean like enter see real

00:47:21,580 --> 00:47:24,570
see any rust

00:47:24,799 --> 00:47:29,490
and fifty types

00:47:26,940 --> 00:47:31,920
I don't know rust enough for that I

00:47:29,490 --> 00:47:34,079
could work but I haven't ever tried it

00:47:31,920 --> 00:47:37,049
rust was created solely for the purposes

00:47:34,079 --> 00:47:39,839
where was them no rust is actually one

00:47:37,049 --> 00:47:42,720
of it should be a easier approachable

00:47:39,839 --> 00:47:46,049
language than C but should be pretty

00:47:42,720 --> 00:47:47,970
similarly low level and they just when

00:47:46,049 --> 00:47:48,690
they came out it was like oh there's

00:47:47,970 --> 00:47:54,150
webassembly

00:47:48,690 --> 00:47:58,410
we will do a first citizen compiled

00:47:54,150 --> 00:48:00,720
target for rust so rust is just kind of

00:47:58,410 --> 00:48:07,339
coincidence that is so heavy on our

00:48:00,720 --> 00:48:07,339
assembly so I think yes tell me

00:48:09,630 --> 00:48:17,530
so add one there is another function

00:48:12,910 --> 00:48:20,250
show me your arrest code whose part that

00:48:17,530 --> 00:48:20,250
makes good

00:48:23,490 --> 00:48:31,880
yeah yeah exactly there's some other

00:48:27,450 --> 00:48:35,570
sort of failure than yourselves

00:48:31,880 --> 00:48:35,570
yeah this is me

00:48:38,650 --> 00:48:47,320
I don't see it right away

00:48:43,200 --> 00:48:53,770
import object is to write reference

00:48:47,320 --> 00:48:57,610
PGI exactly it's not perfect this is

00:48:53,770 --> 00:48:59,500
what you're expected to do yeah yeah I

00:48:57,610 --> 00:49:02,230
mean looks good

00:48:59,500 --> 00:49:03,730
can actually the rest again and address

00:49:02,230 --> 00:49:06,160
some stuff yeah that's what she's really

00:49:03,730 --> 00:49:08,950
calling from the last measure oh yeah

00:49:06,160 --> 00:49:11,700
oh no I mean a telepaths frame is fairly

00:49:08,950 --> 00:49:14,500
you see can I go to the rest again um

00:49:11,700 --> 00:49:16,780
all you need to know mangle to be right

00:49:14,500 --> 00:49:19,450
above the function so the compiler

00:49:16,780 --> 00:49:28,860
removed a functionary that's the issue

00:49:19,450 --> 00:49:28,860
yeah Oh is a good question

00:49:29,470 --> 00:49:34,170
[Music]

00:49:30,690 --> 00:49:34,170
I'm not sure

00:49:34,410 --> 00:49:39,910
what is this

00:49:36,900 --> 00:49:43,920
split can you open can you kick it

00:49:39,910 --> 00:49:43,920
oh it's just another okay

00:49:46,810 --> 00:49:54,710
I'm sorry we agree the ball you want to

00:49:49,490 --> 00:49:57,760
become thank you I am very very

00:49:54,710 --> 00:49:57,760
sorry I don't know

00:49:59,290 --> 00:50:04,840
come or maybe just reloaded but yeah I

00:50:03,610 --> 00:50:09,060
mean then you will lose your code

00:50:04,840 --> 00:50:09,060
obviously I I don't know I'm sorry

00:50:12,050 --> 00:50:20,160
cool did it work for everyone anyone

00:50:16,860 --> 00:50:22,380
having problems with it we can otherwise

00:50:20,160 --> 00:50:25,470
look at it in the break if you want to

00:50:22,380 --> 00:50:32,220
because we are already almost there but

00:50:25,470 --> 00:50:35,070
let's quickly go through this oh so I've

00:50:32,220 --> 00:50:36,930
been higher it's very so let's quickly

00:50:35,070 --> 00:50:42,000
go to their web assembly project and

00:50:36,930 --> 00:50:44,160
just do what we said so I think a lot of

00:50:42,000 --> 00:50:48,300
you noticed you can actually just copy

00:50:44,160 --> 00:50:52,170
paste the code from here it will work or

00:50:48,300 --> 00:50:55,560
it should work so what we need I'm sorry

00:50:52,170 --> 00:51:00,090
this is a bit can never can anybody can

00:50:55,560 --> 00:51:02,910
everybody read that right cool so we

00:51:00,090 --> 00:51:05,250
have the import object over here just

00:51:02,910 --> 00:51:08,040
add it like that there is no return

00:51:05,250 --> 00:51:10,050
value in the end for this so a lot of

00:51:08,040 --> 00:51:12,540
people noticed it themselves you can

00:51:10,050 --> 00:51:14,550
remove that here don't have to but in

00:51:12,540 --> 00:51:16,890
the end we want to call log result right

00:51:14,550 --> 00:51:22,530
we don't have to return anything anymore

00:51:16,890 --> 00:51:25,730
from the add one function yeah so let's

00:51:22,530 --> 00:51:28,730
take the rust external block over here

00:51:25,730 --> 00:51:28,730
yes

00:51:30,150 --> 00:51:34,890
make sure that this no mangle is

00:51:32,430 --> 00:51:37,849
directly above your function if you take

00:51:34,890 --> 00:51:40,260
this away and like move it up to here

00:51:37,849 --> 00:51:42,900
the compiler will not care about it

00:51:40,260 --> 00:51:45,029
anymore because it's only meant to be on

00:51:42,900 --> 00:51:47,730
top of a function so the compiler

00:51:45,029 --> 00:51:50,609
actually knows this function will be

00:51:47,730 --> 00:51:54,930
staying in there forever

00:51:50,609 --> 00:52:00,539
okay so now we only have to call this

00:51:54,930 --> 00:52:03,690
log result with X plus let's multiply up

00:52:00,539 --> 00:52:06,000
for once and this is important here when

00:52:03,690 --> 00:52:07,799
I don't return anything anymore I need

00:52:06,000 --> 00:52:11,279
to remove that type right if I leave

00:52:07,799 --> 00:52:14,279
that in the compiler will tell me no no

00:52:11,279 --> 00:52:17,160
no so I figure I look at that you see

00:52:14,279 --> 00:52:20,099
now rust is always returning the last

00:52:17,160 --> 00:52:23,069
expression so what he says is I expect

00:52:20,099 --> 00:52:25,589
you to return an integer 32-bit but what

00:52:23,069 --> 00:52:28,339
you did is you returned a function call

00:52:25,589 --> 00:52:30,900
since log result is a function call so

00:52:28,339 --> 00:52:32,880
these messages down here I think the

00:52:30,900 --> 00:52:35,910
rest compiler is actually quite a nice

00:52:32,880 --> 00:52:38,309
compiler it helps you with rather nice

00:52:35,910 --> 00:52:41,460
messages so always take a look at the

00:52:38,309 --> 00:52:44,220
output down here usually it helps so

00:52:41,460 --> 00:52:47,369
let's remove that and the last thing we

00:52:44,220 --> 00:52:50,039
have to do at that unsafe block so this

00:52:47,369 --> 00:52:54,809
is all let's quickly try it out if it

00:52:50,039 --> 00:52:56,339
really works well build and run it so

00:52:54,809 --> 00:52:58,440
yeah I think a lot of you already

00:52:56,339 --> 00:53:00,900
struggled with that command s all the

00:52:58,440 --> 00:53:02,520
time I'm sorry we are not used to that

00:53:00,900 --> 00:53:06,900
anymore right that we have to save

00:53:02,520 --> 00:53:11,730
manually ok you see a t2 and also what I

00:53:06,900 --> 00:53:14,490
said before actually in your browser

00:53:11,730 --> 00:53:16,980
console you see this is no trick we

00:53:14,490 --> 00:53:21,690
really put in the console log function

00:53:16,980 --> 00:53:24,450
that we think we put in cool so that's

00:53:21,690 --> 00:53:27,420
it for the first part that was easy

00:53:24,450 --> 00:53:29,690
right oh yeah you can't see the quiz

00:53:27,420 --> 00:53:32,190
already

00:53:29,690 --> 00:53:34,740
okay if you want to go check that out

00:53:32,190 --> 00:53:37,920
web assembly on MDM I mean as always

00:53:34,740 --> 00:53:40,620
Mozilla developer Network documentation

00:53:37,920 --> 00:53:43,320
just fantastic and webassembly studio is

00:53:40,620 --> 00:53:45,540
actually an open source project you can

00:53:43,320 --> 00:53:47,400
go i mean maybe you've seen that there's

00:53:45,540 --> 00:53:49,020
a github issues but when you write you

00:53:47,400 --> 00:53:50,490
can go there you can check it out you

00:53:49,020 --> 00:53:54,000
can build it on your own machine and run

00:53:50,490 --> 00:53:56,730
it locally very cool so you don't need

00:53:54,000 --> 00:53:59,850
internet for it to work I think to learn

00:53:56,730 --> 00:54:03,720
and teach like this actually a very cool

00:53:59,850 --> 00:54:06,810
project so this will already be our

00:54:03,720 --> 00:54:10,680
first short break so you can kind of

00:54:06,810 --> 00:54:15,740
maybe go pee and drink something and we

00:54:10,680 --> 00:54:20,480
will see you again in 15 minutes so for

00:54:15,740 --> 00:54:20,480
10 minutes after 2:00 so that I'm clear

00:54:33,390 --> 00:54:37,410
get it working yeah

00:54:38,650 --> 00:54:52,480
getting combined exactly yeah exactly

00:54:44,940 --> 00:54:55,600
oh okay no I think I brushed over that a

00:54:52,480 --> 00:55:01,030
bit this is the actual rust compiler so

00:54:55,600 --> 00:55:03,910
what the web assembly what the studio

00:55:01,030 --> 00:55:06,130
down here does I will explain that after

00:55:03,910 --> 00:55:08,230
a short break there's a build there's a

00:55:06,130 --> 00:55:09,940
built type script file I should have

00:55:08,230 --> 00:55:12,120
explained that I will do that after the

00:55:09,940 --> 00:55:12,120
break

00:55:12,970 --> 00:55:17,950
yes can we directly open in the browser

00:55:15,430 --> 00:55:20,650
also because like we have some HTML

00:55:17,950 --> 00:55:22,750
content over there is it possible this

00:55:20,650 --> 00:55:26,380
main dot HTML file I downloaded from

00:55:22,750 --> 00:55:30,750
there so if I download this all these

00:55:26,380 --> 00:55:36,370
file comes GSRs and maimed or HTML so

00:55:30,750 --> 00:55:37,380
okay if everyone's still here doesn't

00:55:36,370 --> 00:55:40,060
look that way

00:55:37,380 --> 00:55:43,660
well that's okay they will get back soon

00:55:40,060 --> 00:55:47,320
I see people coming cool are there any

00:55:43,660 --> 00:55:50,320
unanswered questions right now there's

00:55:47,320 --> 00:55:53,140
something I didn't really explain all

00:55:50,320 --> 00:55:57,160
that well so I will try to explain that

00:55:53,140 --> 00:56:00,220
now some people ask me how does this

00:55:57,160 --> 00:56:02,830
actually gets compiled right I didn't

00:56:00,220 --> 00:56:05,830
really tell you that so over there and

00:56:02,830 --> 00:56:08,500
there's ability as that ominous file and

00:56:05,830 --> 00:56:11,590
this is how this is actually being built

00:56:08,500 --> 00:56:15,210
and let's quickly look into it so we use

00:56:11,590 --> 00:56:18,670
code still people using gulp today

00:56:15,210 --> 00:56:21,880
Wow a few phew that's cool I haven't

00:56:18,670 --> 00:56:23,319
used call for a while so this was a kind

00:56:21,880 --> 00:56:26,180
of a reminder for

00:56:23,319 --> 00:56:29,000
that I don't know it anymore so we have

00:56:26,180 --> 00:56:31,790
one task here built and you see there is

00:56:29,000 --> 00:56:34,339
this service if you go look at web

00:56:31,790 --> 00:56:35,839
assembly studio github repository you

00:56:34,339 --> 00:56:38,480
will find they have a little service

00:56:35,839 --> 00:56:41,930
here which will make a call to their

00:56:38,480 --> 00:56:46,099
back-end so what's happening here is we

00:56:41,930 --> 00:56:50,059
get to file main rust and we send it to

00:56:46,099 --> 00:56:52,700
the backend to be compiled we say look

00:56:50,059 --> 00:56:56,119
this is a rust file and we want you to

00:56:52,700 --> 00:56:59,510
build it for web assembly what we will

00:56:56,119 --> 00:57:01,490
get back is that object called data we

00:56:59,510 --> 00:57:04,579
will see it later on and then we will

00:57:01,490 --> 00:57:07,819
create your project a new file out main

00:57:04,579 --> 00:57:10,550
razzin this one and will set data to

00:57:07,819 --> 00:57:12,740
what we go back from the back end so the

00:57:10,550 --> 00:57:14,660
chava scripts the char script code

00:57:12,740 --> 00:57:17,240
doesn't have to compile now right

00:57:14,660 --> 00:57:20,089
but the rust code has to compile and we

00:57:17,240 --> 00:57:22,309
can't really compile rust in the browser

00:57:20,089 --> 00:57:25,069
probably would be possible somehow right

00:57:22,309 --> 00:57:26,780
but it's easier now so what they do is

00:57:25,069 --> 00:57:29,089
send it to the backend

00:57:26,780 --> 00:57:32,059
let it be compiled on the backend and

00:57:29,089 --> 00:57:34,579
get the binary back and I create a file

00:57:32,059 --> 00:57:38,450
with it so we have to find a actual

00:57:34,579 --> 00:57:40,880
binary file we will look into that a

00:57:38,450 --> 00:57:43,940
little bit later I was always also

00:57:40,880 --> 00:57:45,920
getting the question like rust is

00:57:43,940 --> 00:57:49,430
another webassembly only language rust

00:57:45,920 --> 00:57:51,589
wasn't invented with kind of web

00:57:49,430 --> 00:57:53,920
assembly in mind I think it's more of a

00:57:51,589 --> 00:57:56,380
coincidence that when they actually

00:57:53,920 --> 00:57:58,990
came out with rust that webassembly was

00:57:56,380 --> 00:58:03,460
right there so they said let's make

00:57:58,990 --> 00:58:08,790
webassembly one of the default or one of

00:58:03,460 --> 00:58:11,770
the easy to access compilation targets

00:58:08,790 --> 00:58:14,440
so this is basically everything

00:58:11,770 --> 00:58:17,170
it is rust you could also obviously

00:58:14,440 --> 00:58:20,109
compile rust just to an executable and

00:58:17,170 --> 00:58:22,119
then run it on any machine you want that

00:58:20,109 --> 00:58:23,859
they support this is just cool and it

00:58:22,119 --> 00:58:26,020
was very easy for me to make these

00:58:23,859 --> 00:58:28,480
teaching cases here right so that's why

00:58:26,020 --> 00:58:31,450
I was using rust so we don't compile

00:58:28,480 --> 00:58:31,869
rust to see or anything anything here we

00:58:31,450 --> 00:58:37,710
come

00:58:31,869 --> 00:58:42,579
pile rust to webassembly binary just a

00:58:37,710 --> 00:58:45,520
clarification about that okay so let's

00:58:42,579 --> 00:58:51,069
go to our in-depth exercises that

00:58:45,520 --> 00:58:53,559
webassembly in-depth so I mean it's all

00:58:51,069 --> 00:58:56,049
fun right we pass some integers but

00:58:53,559 --> 00:58:57,849
that's not really mind blowing like why

00:58:56,049 --> 00:58:59,500
would we pass integers in these

00:58:57,849 --> 00:59:03,190
functions it doesn't really help us a

00:58:59,500 --> 00:59:05,770
lot and the use cases well maybe we have

00:59:03,190 --> 00:59:07,900
that extremely hard to calculate math

00:59:05,770 --> 00:59:10,030
function okay maybe that could be

00:59:07,900 --> 00:59:12,010
something that is cool but let's be

00:59:10,030 --> 00:59:14,619
honest what we want to do is we want to

00:59:12,010 --> 00:59:16,599
pass arbitrary data right we want to we

00:59:14,619 --> 00:59:19,059
want to be able to really have an API

00:59:16,599 --> 00:59:22,000
where we can pass what every every we

00:59:19,059 --> 00:59:25,690
want so how do we handle these kind of

00:59:22,000 --> 00:59:28,299
complex types let's start with not the

00:59:25,690 --> 00:59:30,910
most complex type right string currently

00:59:28,299 --> 00:59:32,589
some of you might have tried that if you

00:59:30,910 --> 00:59:35,650
want to pass a string it will fail

00:59:32,589 --> 00:59:37,530
miserably you will get fancy exception

00:59:35,650 --> 00:59:41,260
messages that this is not working

00:59:37,530 --> 00:59:43,420
so Watson currently only knows these

00:59:41,260 --> 00:59:46,420
integers and floats types as I mentioned

00:59:43,420 --> 00:59:52,420
before integer 32 and 64-bit and float

00:59:46,420 --> 00:59:55,030
32 64 bits so what we have to do to

00:59:52,420 --> 00:59:57,100
actually be able to pass strings is in

00:59:55,030 --> 01:00:00,130
rust we will allocate memory

00:59:57,100 --> 01:00:03,060
on our linear memory array write a

01:00:00,130 --> 01:00:05,860
string into there take the pointer

01:00:03,060 --> 01:00:08,440
return it because the pointer is an

01:00:05,860 --> 01:00:10,210
integer is 32-bit right so we can take

01:00:08,440 --> 01:00:12,640
that point to return it from our

01:00:10,210 --> 01:00:14,440
function to JavaScript so JavaScript now

01:00:12,640 --> 01:00:18,850
has an index right

01:00:14,440 --> 01:00:21,220
it's like 1347 or something whatever

01:00:18,850 --> 01:00:23,590
that just points to an element in the

01:00:21,220 --> 01:00:26,410
memory array so we go to the web

01:00:23,590 --> 01:00:28,270
assembly part in JavaScript take the

01:00:26,410 --> 01:00:31,030
memory out of there well the memory

01:00:28,270 --> 01:00:33,280
array and say I want to read the byte at

01:00:31,030 --> 01:00:36,040
that position and then I'm gonna

01:00:33,280 --> 01:00:39,880
increase and read every byte until I

01:00:36,040 --> 01:00:42,190
find a byte that is 0 because we are

01:00:39,880 --> 01:00:45,430
gonna deal with the C string

01:00:42,190 --> 01:00:48,730
implementation that means we have utf-8

01:00:45,430 --> 01:00:51,850
strings every byte is a utf-8 fight and

01:00:48,730 --> 01:00:55,660
it will be finished by a zero as soon as

01:00:51,850 --> 01:00:57,550
we read a zero we know we're done if we

01:00:55,660 --> 01:00:59,380
read over it you will get that classical

01:00:57,550 --> 01:01:00,070
in exercise of fans exception and stuff

01:00:59,380 --> 01:01:04,000
like that

01:01:00,070 --> 01:01:06,520
so let's not do that yeah so how does

01:01:04,000 --> 01:01:08,800
that look so now we get into rust a

01:01:06,520 --> 01:01:11,890
little bit more bear with me here for a

01:01:08,800 --> 01:01:14,410
quick while it's not that complicated so

01:01:11,890 --> 01:01:17,350
you see we have some imports we have

01:01:14,410 --> 01:01:19,930
another return type and we do some fancy

01:01:17,350 --> 01:01:21,570
stuff here with C strings so let's break

01:01:19,930 --> 01:01:26,530
it down

01:01:21,570 --> 01:01:27,370
part by part so in rust usually stuff is

01:01:26,530 --> 01:01:30,010
immutable

01:01:27,370 --> 01:01:34,330
so when we have mutable things we will

01:01:30,010 --> 01:01:38,440
prepend mu T for mutable for all of you

01:01:34,330 --> 01:01:41,020
that now C or C++ that asterisk means we

01:01:38,440 --> 01:01:44,440
have a pointer we will not return the

01:01:41,020 --> 01:01:46,990
string we will return the pointer to the

01:01:44,440 --> 01:01:50,350
memory location where that string is in

01:01:46,990 --> 01:01:55,540
and the C char is kind of an alias

01:01:50,350 --> 01:01:58,210
bye-bye rust that is the C type so since

01:01:55,540 --> 01:02:00,550
C types are native they were I a bit

01:01:58,210 --> 01:02:03,280
from architecture to architecture so

01:02:00,550 --> 01:02:05,360
rust made like one Aaliyah's for that

01:02:03,280 --> 01:02:08,810
char character type in

01:02:05,360 --> 01:02:11,360
see that is called C underscore char so

01:02:08,810 --> 01:02:15,050
this means nothing else that we are

01:02:11,360 --> 01:02:17,660
handling a C type in here so in the

01:02:15,050 --> 01:02:22,790
memory there will be that character type

01:02:17,660 --> 01:02:26,540
of C then we have this a higher level

01:02:22,790 --> 01:02:28,910
construct of rust the C string object so

01:02:26,540 --> 01:02:30,580
this is for us that has a lot of these

01:02:28,910 --> 01:02:33,260
helpers on it so we can actually

01:02:30,580 --> 01:02:34,640
instantiate it do things with it like

01:02:33,260 --> 01:02:36,590
you know it from from other high level

01:02:34,640 --> 01:02:39,680
languages right we have just this string

01:02:36,590 --> 01:02:42,950
helpers so what we can do we take that

01:02:39,680 --> 01:02:47,150
in here make new so we have that C

01:02:42,950 --> 01:02:49,340
string object now this means the bases

01:02:47,150 --> 01:02:52,400
down below is what I just mentioned

01:02:49,340 --> 01:02:55,310
before we have a string that is now null

01:02:52,400 --> 01:02:56,960
terminated so there will be a 0 in the

01:02:55,310 --> 01:02:59,180
end when we write that to the memory

01:02:56,960 --> 01:03:01,670
there will be a 0 at the end this is

01:02:59,180 --> 01:03:05,900
important for us because otherwise we

01:03:01,670 --> 01:03:08,330
would probably fail then as soon as we

01:03:05,900 --> 01:03:09,920
have that C string object we have to

01:03:08,330 --> 01:03:12,620
make sure that we get to that point in

01:03:09,920 --> 01:03:15,470
turn so the first thing is we do the

01:03:12,620 --> 01:03:18,200
first thing we do is unwrap it what that

01:03:15,470 --> 01:03:20,330
means is it will take like an unboxing

01:03:18,200 --> 01:03:22,700
it will take away that C string stuff

01:03:20,330 --> 01:03:26,180
and we will be left with that C

01:03:22,700 --> 01:03:28,730
character type this is what we want then

01:03:26,180 --> 01:03:31,730
with interim we will convert it to a

01:03:28,730 --> 01:03:33,920
pointer instead of the actual type we

01:03:31,730 --> 01:03:36,410
will have a pointer in our hand this is

01:03:33,920 --> 01:03:38,720
what we want also a very relevant

01:03:36,410 --> 01:03:40,280
side-effect of that rust will not

01:03:38,720 --> 01:03:42,560
garbage-collected right we have to care

01:03:40,280 --> 01:03:44,720
about that if we don't use that variable

01:03:42,560 --> 01:03:47,180
rust will eventually go ahead and say oh

01:03:44,720 --> 01:03:49,220
I don't need that string anymore and

01:03:47,180 --> 01:03:52,190
kill it and if we are in Chaves you have

01:03:49,220 --> 01:03:53,660
trying to read that yet this this will

01:03:52,190 --> 01:03:56,210
not work right this will throw an

01:03:53,660 --> 01:03:57,920
exception obviously so interro

01:03:56,210 --> 01:03:59,190
will do that for us we will have a

01:03:57,920 --> 01:04:02,130
pointer and

01:03:59,190 --> 01:04:04,230
we'll not garbage collected anymore but

01:04:02,130 --> 01:04:06,810
memory leaks I hear you say

01:04:04,230 --> 01:04:09,740
so now rust is not garbage collecting it

01:04:06,810 --> 01:04:12,329
anymore it is not on the Chow escaped

01:04:09,740 --> 01:04:14,940
not on the Chavez script heap

01:04:12,329 --> 01:04:18,420
so that means Java Script is not garbage

01:04:14,940 --> 01:04:22,260
collecting it either so what happens is

01:04:18,420 --> 01:04:22,619
it will stay in that memory not good not

01:04:22,260 --> 01:04:24,960
good

01:04:22,619 --> 01:04:27,060
but obviously we can fix that and please

01:04:24,960 --> 01:04:30,180
bear with me here this is a hack I know

01:04:27,060 --> 01:04:33,290
that but it will do what we want so we

01:04:30,180 --> 01:04:37,829
can have another function that is called

01:04:33,290 --> 01:04:39,839
deallocate string it will take exactly

01:04:37,829 --> 01:04:43,290
that pointer that we just returned right

01:04:39,839 --> 01:04:45,990
I pointed to a seed character and what

01:04:43,290 --> 01:04:48,750
it will do is it will instantiate a

01:04:45,990 --> 01:04:51,150
variable from that string and not use

01:04:48,750 --> 01:04:53,540
that variable anymore so rust will

01:04:51,150 --> 01:04:56,970
garbage collecting eventually eventually

01:04:53,540 --> 01:05:00,270
it's not life you know so we're just

01:04:56,970 --> 01:05:03,180
creating a stupid variable that is good

01:05:00,270 --> 01:05:05,550
for nothing but with that kind of hack

01:05:03,180 --> 01:05:07,349
we give the garbage collection back to

01:05:05,550 --> 01:05:10,619
rust we say hey here take that string

01:05:07,349 --> 01:05:14,550
and when you don't use it anymore free

01:05:10,619 --> 01:05:16,349
the memory that's what we do here this

01:05:14,550 --> 01:05:19,140
is just a helper function this is not

01:05:16,349 --> 01:05:21,119
what we want to look into it most but

01:05:19,140 --> 01:05:22,770
this this will help us not make memory

01:05:21,119 --> 01:05:28,099
leaks so you will never have to care

01:05:22,770 --> 01:05:28,099
about weird memory issues

01:05:28,599 --> 01:05:35,210
yeah you saw up here there's again our

01:05:32,450 --> 01:05:38,690
lovely little unsafe block this one here

01:05:35,210 --> 01:05:41,030
right we need that because we are

01:05:38,690 --> 01:05:44,270
reading an arbitrary pointer you could

01:05:41,030 --> 01:05:46,520
pass in any interpreter rust can't

01:05:44,270 --> 01:05:49,220
validate that so it doesn't know is that

01:05:46,520 --> 01:05:52,190
an actual pointer to our memory or will

01:05:49,220 --> 01:05:54,740
it overflow the memory is it type safe

01:05:52,190 --> 01:05:56,210
you say this is a C character right but

01:05:54,740 --> 01:05:58,580
you just give me a pointer it could be

01:05:56,210 --> 01:06:00,770
anything so everybody who had to work

01:05:58,580 --> 01:06:02,990
with C++ at some point it probably knows

01:06:00,770 --> 01:06:05,740
the issues around dangling pointers and

01:06:02,990 --> 01:06:09,320
stuff like that so we have to tell rust

01:06:05,740 --> 01:06:14,869
please just trust us we are engineers we

01:06:09,320 --> 01:06:19,540
know what we are doing probably cool so

01:06:14,869 --> 01:06:23,080
we have to rust park we make a string we

01:06:19,540 --> 01:06:25,700
return it as a pointer and we have an

01:06:23,080 --> 01:06:28,820
infection that we can call to deallocate

01:06:25,700 --> 01:06:31,700
that string again so the rough side it's

01:06:28,820 --> 01:06:35,150
already but the JavaScript side is not

01:06:31,700 --> 01:06:37,130
yet there so you see there's a little

01:06:35,150 --> 01:06:39,290
function here it looks very nice and

01:06:37,130 --> 01:06:42,260
fluffy at all that's copy C string

01:06:39,290 --> 01:06:46,520
function I mean how hard can it be to

01:06:42,260 --> 01:06:49,550
read from memory right oh yeah that's it

01:06:46,520 --> 01:06:51,589
so I don't expect you to fully

01:06:49,550 --> 01:06:52,790
understand that if you want to go ahead

01:06:51,589 --> 01:06:54,589
take a look at it

01:06:52,790 --> 01:06:57,170
what it basically does is we have a

01:06:54,589 --> 01:06:59,540
generator function up here and this is

01:06:57,170 --> 01:07:02,450
looping over the memory with that wire

01:06:59,540 --> 01:07:05,060
and you see it will stop when it hits a

01:07:02,450 --> 01:07:07,369
zero what I said before right we start

01:07:05,060 --> 01:07:09,650
at a certain point err we loop over each

01:07:07,369 --> 01:07:11,839
byte in the array and we will when we

01:07:09,650 --> 01:07:14,240
will hit the zero we say get we're done

01:07:11,839 --> 01:07:16,220
we have the whole string if there is no

01:07:14,240 --> 01:07:20,420
zero we will loop and loop and loop

01:07:16,220 --> 01:07:23,480
we will eventually crush so let's hope

01:07:20,420 --> 01:07:26,270
that doesn't happen so what we do here

01:07:23,480 --> 01:07:30,320
you in eight array so unsigned integer

01:07:26,270 --> 01:07:32,240
array then we have to decode it right so

01:07:30,320 --> 01:07:34,160
now we have an array of bytes so we

01:07:32,240 --> 01:07:37,490
basically have a copy of that memory

01:07:34,160 --> 01:07:40,460
snippet where the string is and this is

01:07:37,490 --> 01:07:44,000
this is relevant to get we now have a

01:07:40,460 --> 01:07:47,330
copy so JavaScript has that string in

01:07:44,000 --> 01:07:49,220
its own heap now as I copy it's still in

01:07:47,330 --> 01:07:52,160
the web assembly part that's why we have

01:07:49,220 --> 01:07:55,280
to free the memory but JavaScript copied

01:07:52,160 --> 01:07:57,980
the string now what we need to do is the

01:07:55,280 --> 01:08:02,930
text decoder utf-8 we know each of these

01:07:57,980 --> 01:08:05,359
bytes is a utf-8 character so we have to

01:08:02,930 --> 01:08:07,970
tell JavaScript hey read this fight as

01:08:05,359 --> 01:08:09,670
utf-8 characters and voila

01:08:07,970 --> 01:08:12,440
we should get a string in the end

01:08:09,670 --> 01:08:15,170
hopefully and what you see down here

01:08:12,440 --> 01:08:17,900
this is where we call it so we take that

01:08:15,170 --> 01:08:20,270
original pointer you see that up here we

01:08:17,900 --> 01:08:22,819
safe this point to that we get in we

01:08:20,270 --> 01:08:25,580
save it initially and then in the end as

01:08:22,819 --> 01:08:27,620
soon as we have copied that string we

01:08:25,580 --> 01:08:30,350
call that funny little D allocation

01:08:27,620 --> 01:08:32,270
method here so rust will garbage

01:08:30,350 --> 01:08:34,700
collector string that is not the passing

01:08:32,270 --> 01:08:38,989
memory so we don't have to care about

01:08:34,700 --> 01:08:41,680
that anymore and in the end we return

01:08:38,989 --> 01:08:45,150
that string so this is now a utf-8

01:08:41,680 --> 01:08:51,930
decoded string cool

01:08:45,150 --> 01:08:57,240
and this is what we will do now yeah so

01:08:51,930 --> 01:08:59,640
yeah we are in chapter 4 handling

01:08:57,240 --> 01:09:01,530
complex sites you can go down here all

01:08:59,640 --> 01:09:05,100
the code you need is basically in here

01:09:01,530 --> 01:09:08,160
go ahead try it out and in the end if

01:09:05,100 --> 01:09:10,350
everything works we are very close to

01:09:08,160 --> 01:09:15,780
having a proper hello world function

01:09:10,350 --> 01:09:17,850
yeah I think we we take 15 minutes for

01:09:15,780 --> 01:09:21,020
that I would say because this is a

01:09:17,850 --> 01:09:21,020
little bit harder

01:10:41,630 --> 01:10:51,290
when I get into this yeah oh yeah

01:10:56,220 --> 01:11:03,050
could I try something

01:10:59,240 --> 01:11:07,420
and now to be honest let's

01:11:03,050 --> 01:11:10,820
that's amid last thing here and removed

01:11:07,420 --> 01:11:12,190
Elsa statement like just follow through

01:11:10,820 --> 01:11:18,190
right

01:11:12,190 --> 01:11:20,050
this is right Lucas okay so let me Creek

01:11:18,190 --> 01:11:21,400
you train without the semicolons I had

01:11:20,050 --> 01:11:24,160
some issues when it would add

01:11:21,400 --> 01:11:27,810
semi-colons so

01:11:24,160 --> 01:11:27,810
you never know just to be sure

01:11:31,530 --> 01:11:36,570
three two one and then 0 and then

01:11:39,920 --> 01:11:44,080
it's just what he expects to see

01:11:45,380 --> 01:11:49,720
what do we expect to see Fibonacci

01:11:47,600 --> 01:11:51,770
should always and up the last two

01:11:49,720 --> 01:11:54,980
numbers right yeah

01:11:51,770 --> 01:11:58,930
so this case I objected reasons I

01:11:54,980 --> 01:12:01,770
supposed to be returning just three

01:11:58,930 --> 01:12:01,770
plus one

01:12:01,790 --> 01:12:05,770
yeah this is what it does right

01:12:06,480 --> 01:12:12,160
two-one-zero one that's kind of weird

01:12:08,440 --> 01:12:13,990
here but the first can we kind of take

01:12:12,160 --> 01:12:16,600
that out for a second just to see what

01:12:13,990 --> 01:12:22,530
the actual results oh can you comment

01:12:16,600 --> 01:12:22,530
that sorry but I'm so bad before

01:12:26,499 --> 01:12:32,489
yes exactly that's cool exactly Oh X has

01:12:30,070 --> 01:12:32,489
to be X

01:12:33,739 --> 01:12:36,460
perfect

01:12:41,110 --> 01:12:52,360
so we drink them something doing wrong

01:12:45,700 --> 01:12:53,410
because firstly smaller equals one or a

01:12:52,360 --> 01:12:55,240
pen Thanks

01:12:53,410 --> 01:12:58,660
so it should never be melted write a

01:12:55,240 --> 01:13:01,400
zero right because yeah

01:12:58,660 --> 01:13:07,830
kind of make sure of that Wow

01:13:01,400 --> 01:13:12,050
now it can be right if X is 2x minus 2 0

01:13:07,830 --> 01:13:12,050
so I think the algorithm is wrong

01:13:12,250 --> 01:13:15,330
let me quickly check

01:13:19,979 --> 01:13:24,420
and they increased up to it too I'm not

01:13:23,039 --> 01:13:27,590
sure if that's right I'm not very good

01:13:24,420 --> 01:13:27,590
at math I have to have it

01:13:28,300 --> 01:13:33,630
so what happens now when we take of life

01:13:37,729 --> 01:13:46,920
so far two plus three is that right

01:13:43,010 --> 01:13:48,960
I'm sure I think yeah I think what the

01:13:46,920 --> 01:13:51,000
basic problem was I think you should

01:13:48,960 --> 01:13:53,070
probably omit semicolons and return

01:13:51,000 --> 01:13:55,080
statements as much as you can because I

01:13:53,070 --> 01:13:57,630
had some real issues with semicolon but

01:13:55,080 --> 01:14:00,990
I'm too bad a trust to tell you what the

01:13:57,630 --> 01:14:03,090
actual problem it is so I think what you

01:14:00,990 --> 01:14:04,950
do works now you probably have to just

01:14:03,090 --> 01:14:11,130
figure out what the correct mathematical

01:14:04,950 --> 01:14:13,140
algorithm is else for probably I think

01:14:11,130 --> 01:14:15,600
else is I think else is okay and I just

01:14:13,140 --> 01:14:17,900
took that out to be sure can you write

01:14:15,600 --> 01:14:17,900
yeah

01:14:19,030 --> 01:14:26,140
yeah

01:14:21,469 --> 01:14:32,630
yeah yeah I think the semicolon from the

01:14:26,140 --> 01:14:33,680
other piece I'm sure Feli methods like

01:14:32,630 --> 01:14:37,250
this right yes

01:14:33,680 --> 01:14:39,560
so like earlier also in the same yeah

01:14:37,250 --> 01:14:42,110
yeah cool cool yeah Jessica

01:14:39,560 --> 01:14:45,550
ODU's has actually have to be on the top

01:14:42,110 --> 01:14:45,550
oh yeah sorry

01:14:46,100 --> 01:14:52,810
I should have mentioned that I guess

01:14:49,090 --> 01:14:52,810
cool let's try it out

01:14:55,710 --> 01:15:00,960
so you have to copy strain method yeah

01:14:58,320 --> 01:15:02,730
exactly a copy to dry it over write this

01:15:00,960 --> 01:15:06,060
note or two on top or here fine it's

01:15:02,730 --> 01:15:08,190
fine blue anodized now you have to be in

01:15:06,060 --> 01:15:12,150
here right because here you don't have

01:15:08,190 --> 01:15:16,070
access to the the actual web assembly

01:15:12,150 --> 01:15:19,680
instance so it has to be in here exactly

01:15:16,070 --> 01:15:24,470
yeah cool so we are in the right scope

01:15:19,680 --> 01:15:24,470
now yeah so run it

01:15:27,870 --> 01:15:34,220
kind of here you go thanks strength tell

01:15:32,100 --> 01:15:34,220
me

01:15:34,840 --> 01:15:41,650
print the message should we the other in

01:15:37,300 --> 01:15:44,320
this frame already or the allocation

01:15:41,650 --> 01:15:46,540
happens in the copy string method you

01:15:44,320 --> 01:15:48,790
see it here because the thing is we

01:15:46,540 --> 01:15:50,830
copied right so JavaScript will care it

01:15:48,790 --> 01:15:53,470
for its own string that we will actually

01:15:50,830 --> 01:15:55,450
print out it will care about right we

01:15:53,470 --> 01:15:57,130
have garbage collection we just have to

01:15:55,450 --> 01:15:59,950
make sure that after reading it that

01:15:57,130 --> 01:16:01,420
webassembly memory is freed so this

01:15:59,950 --> 01:16:03,690
string up here this will be garbage

01:16:01,420 --> 01:16:06,760
collected by JavaScript that's all okay

01:16:03,690 --> 01:16:09,040
perfect I don't have anything in the

01:16:06,760 --> 01:16:10,630
local school can you check in the global

01:16:09,040 --> 01:16:16,420
scope is there any global scope variable

01:16:10,630 --> 01:16:19,330
things like that in Russ to me outside

01:16:16,420 --> 01:16:21,130
so it was not able to identify so there

01:16:19,330 --> 01:16:23,260
is no concept of global variable system

01:16:21,130 --> 01:16:25,600
so you are here in Charles crypt right

01:16:23,260 --> 01:16:28,990
so your global variables window in here

01:16:25,600 --> 01:16:31,360
so we are in basic JavaScript you have

01:16:28,990 --> 01:16:33,640
the window object available to you

01:16:31,360 --> 01:16:34,900
anytime in inches but Russ doesn't have

01:16:33,640 --> 01:16:40,660
something like that

01:16:34,900 --> 01:16:42,310
Russ doesn't no way window that's why it

01:16:40,660 --> 01:16:44,800
extract everything to be in the method

01:16:42,310 --> 01:16:47,410
no no this is just us you had you get

01:16:44,800 --> 01:16:49,990
the actual web assembly instance in here

01:16:47,410 --> 01:16:52,000
in that method so here you access

01:16:49,990 --> 01:16:54,040
results instance experts right you can't

01:16:52,000 --> 01:16:57,460
access that above that right because

01:16:54,040 --> 01:17:00,340
this is a promise you are in the promise

01:16:57,460 --> 01:17:03,730
then a block so you have your

01:17:00,340 --> 01:17:05,320
asynchronous right so you don't have you

01:17:03,730 --> 01:17:07,049
don't have any access to that instance

01:17:05,320 --> 01:17:11,809
from the outside

01:17:07,049 --> 01:17:14,809
that's why we have to be in there okay

01:17:11,809 --> 01:17:14,809
yes

01:17:15,950 --> 01:17:23,830
opposed to get it like ya understand

01:17:19,460 --> 01:17:23,830
and not necessarily why yeah tell me

01:17:26,989 --> 01:17:31,239
quite sure why on store whether and

01:17:29,030 --> 01:17:31,239
stuff

01:17:31,240 --> 01:17:38,150
registering for you yeah because the rep

01:17:33,980 --> 01:17:40,310
assembly interface defines four times so

01:17:38,150 --> 01:17:43,520
Ross knows types strings those types

01:17:40,310 --> 01:17:45,140
strings sorry JavaScript no sites but in

01:17:43,520 --> 01:17:47,360
between the interface where they have to

01:17:45,140 --> 01:17:55,790
go through only knows integer and float

01:17:47,360 --> 01:17:58,130
that's our base problem yeah this is one

01:17:55,790 --> 01:18:00,110
of those things I showed with an e ref

01:17:58,130 --> 01:18:02,150
and the host bindings they should

01:18:00,110 --> 01:18:07,610
leverage that but currently this is the

01:18:02,150 --> 01:18:10,730
limit yeah right yeah so yeah we are

01:18:07,610 --> 01:18:12,140
pointer magic yes I was just trying to

01:18:10,730 --> 01:18:14,480
change the code a little bit

01:18:12,140 --> 01:18:15,320
oh yeah cool nice extra scripts

01:18:14,480 --> 01:18:18,320
excellent

01:18:15,320 --> 01:18:19,690
yeah it's deallocate string thing that

01:18:18,320 --> 01:18:22,599
we're beginning from

01:18:19,690 --> 01:18:24,670
don't love the idea of passing

01:18:22,599 --> 01:18:27,310
around the whole module like it just got

01:18:24,670 --> 01:18:28,989
weeds that's cool yeah the thing was you

01:18:27,310 --> 01:18:30,940
need to make sure if you need to have

01:18:28,989 --> 01:18:32,469
the memory yeah exactly

01:18:30,940 --> 01:18:34,239
because we need we need the memory

01:18:32,469 --> 01:18:35,829
buffer right that's a rate that we're

01:18:34,239 --> 01:18:37,570
gonna read from so we have to make sure

01:18:35,829 --> 01:18:39,190
that this is in there what we're getting

01:18:37,570 --> 01:18:41,099
back from here is not just the exported

01:18:39,190 --> 01:18:43,960
functions this isn't like exporting

01:18:41,099 --> 01:18:46,300
exactly memory memory is something that

01:18:43,960 --> 01:18:48,400
webassembly exports for you so you can

01:18:46,300 --> 01:18:49,810
actually access the memory array of what

01:18:48,400 --> 01:18:52,540
they're certainly absolutely you get

01:18:49,810 --> 01:18:55,840
that for free kind of so there's a whole

01:18:52,540 --> 01:18:57,699
bunch of like exports is it's not a lot

01:18:55,840 --> 01:18:59,619
I think its memory and your function I

01:18:57,699 --> 01:19:02,530
think it's really here is just go memory

01:18:59,619 --> 01:19:05,820
yeah yeah exactly so yeah can actually

01:19:02,530 --> 01:19:05,820
pass it in yet

01:19:06,349 --> 01:19:09,070
uh-huh

01:19:09,520 --> 01:19:13,780
now in also naming those with like I

01:19:12,460 --> 01:19:16,570
guess there's our us conventions to use

01:19:13,780 --> 01:19:18,490
underscore I really like mixing these

01:19:16,570 --> 01:19:19,030
when I get a job it's the same thing oh

01:19:18,490 --> 01:19:21,010
yeah

01:19:19,030 --> 01:19:26,670
you have to kind of make sure here now

01:19:21,010 --> 01:19:26,670
we have a name clash to make sure

01:19:35,820 --> 01:19:40,349
and that's that one is it yeah that

01:19:38,130 --> 01:19:43,400
one's absolutely yeah that's another

01:19:40,349 --> 01:19:43,400
so China

01:19:45,570 --> 01:19:50,430
and I suppose you get to find this a

01:19:47,160 --> 01:19:54,330
utility function the elegance ring is

01:19:50,430 --> 01:19:57,770
another function well do you have a typo

01:19:54,330 --> 01:19:57,770
in there or something could it be

01:19:58,670 --> 01:20:06,500
you know oh you don't have it in here

01:20:02,270 --> 01:20:09,290
you need to deallocate from yeah no no

01:20:06,500 --> 01:20:11,600
it's really only actually memory that is

01:20:09,290 --> 01:20:15,290
and they've I think it's pretty much on

01:20:11,600 --> 01:20:18,170
the top but you go yeah yeah exactly

01:20:15,290 --> 01:20:20,780
that one anything and then Oh mango

01:20:18,170 --> 01:20:23,410
don't forget to know my heart knowing do

01:20:20,780 --> 01:20:24,770
I need it you need it for each function

01:20:23,410 --> 01:20:26,720
absolutely

01:20:24,770 --> 01:20:28,730
that's why that wasn't working I thought

01:20:26,720 --> 01:20:32,150
that was just a oh yeah though you need

01:20:28,730 --> 01:20:35,650
it on each function absolutely that's

01:20:32,150 --> 01:20:35,650
just a rough thing so yeah

01:20:37,409 --> 01:20:46,760
now I can be happy yeah yeah now you can

01:20:39,929 --> 01:20:46,760
do the naming that you want to go here

01:20:46,829 --> 01:20:51,969
yeah sometimes it's a bit quirky you

01:20:49,749 --> 01:20:56,400
have to be in here click in here then

01:20:51,969 --> 01:21:00,550
yeah that's good Cup

01:20:56,400 --> 01:21:02,730
cross fingers I see this to not defile

01:21:00,550 --> 01:21:02,730
this

01:21:04,500 --> 01:21:07,160
did I

01:21:07,889 --> 01:21:13,590
well oh yeah take an actual call so

01:21:10,920 --> 01:21:16,920
that's cool it could read until there

01:21:13,590 --> 01:21:17,280
right so it seems like now yeah here you

01:21:16,920 --> 01:21:19,850
go

01:21:17,280 --> 01:21:19,850
cool

01:21:23,689 --> 01:21:30,340
yeah

01:21:26,030 --> 01:21:32,900
yes so you mentioned that you asked them

01:21:30,340 --> 01:21:35,780
the execution of the Wesen is actually

01:21:32,900 --> 01:21:38,270
running on but we yeah yeah so how does

01:21:35,780 --> 01:21:40,210
the browser give is synchronous or is it

01:21:38,270 --> 01:21:42,940
not service

01:21:40,210 --> 01:21:44,380
I mean my JavaScript calls the lesson

01:21:42,940 --> 01:21:48,510
then do something else in JavaScript

01:21:44,380 --> 01:21:48,510
again yeah this is not synchronous

01:21:52,070 --> 01:21:58,880
so you have two separate runtimes yeah

01:21:59,059 --> 01:22:06,210
well but rough the sinker so when you

01:22:03,150 --> 01:22:09,179
call add 1 this will be directly

01:22:06,210 --> 01:22:12,229
executed so your JavaScript code won't

01:22:09,179 --> 01:22:12,229
run any further

01:22:12,450 --> 01:22:16,960
so you know it's not like you have

01:22:14,740 --> 01:22:19,810
promises around your webassembly calls

01:22:16,960 --> 01:22:22,060
it's just like it's two to run times but

01:22:19,810 --> 01:22:25,150
when you say call dad one function it

01:22:22,060 --> 01:22:26,890
will directly return synchronous so this

01:22:25,150 --> 01:22:29,560
is synchronous because the Java is

01:22:26,890 --> 01:22:31,870
waiting for the rest it the exact is

01:22:29,560 --> 01:22:33,340
like the call style so dress colors on

01:22:31,870 --> 01:22:35,620
the call stack and the next thing

01:22:33,340 --> 01:22:38,370
JavaScript can do is actually access

01:22:35,620 --> 01:22:38,370
okay

01:22:45,119 --> 01:22:51,460
okay I hope that most of you have gotten

01:22:48,969 --> 01:22:53,860
this to work this is kind of a cool

01:22:51,460 --> 01:22:57,969
little thing when you realize okay now I

01:22:53,860 --> 01:23:00,340
read something from memory in JavaScript

01:22:57,969 --> 01:23:02,949
I've never done that before like this is

01:23:00,340 --> 01:23:05,380
let's say the most low-level thing I've

01:23:02,949 --> 01:23:07,330
done in JavaScript so let's try it out

01:23:05,380 --> 01:23:09,639
so I'm gonna try that quickly too

01:23:07,330 --> 01:23:13,150
let's remove what I have here and just

01:23:09,639 --> 01:23:17,199
add that in write the second function in

01:23:13,150 --> 01:23:20,949
we saw here the allocation this one so

01:23:17,199 --> 01:23:23,650
some of the people in here asked me you

01:23:20,949 --> 01:23:26,500
need that no manual in front of every

01:23:23,650 --> 01:23:28,599
function otherwise the compiler removes

01:23:26,500 --> 01:23:31,150
your functions so if you forget one of

01:23:28,599 --> 01:23:33,130
these no manuals that's when you

01:23:31,150 --> 01:23:35,800
probably get some issues like this is

01:23:33,130 --> 01:23:38,739
another function and stuff like that so

01:23:35,800 --> 01:23:40,449
you need it in front of every function

01:23:38,739 --> 01:23:42,790
so this is all the roughs code we have

01:23:40,449 --> 01:23:46,599
right we have two methods welcome

01:23:42,790 --> 01:23:49,570
message and the allocate string and I

01:23:46,599 --> 01:23:52,510
will remove that import object for now

01:23:49,570 --> 01:23:58,599
so it's a bit easier overview for you

01:23:52,510 --> 01:24:04,239
guys and paste that in so make sure that

01:23:58,599 --> 01:24:06,280
this JavaScript star is in the them in

01:24:04,239 --> 01:24:08,139
here right you need access to that

01:24:06,280 --> 01:24:12,130
instance that you just created since

01:24:08,139 --> 01:24:14,440
this is asynchronous we can't paste that

01:24:12,130 --> 01:24:16,929
code up here right because results is

01:24:14,440 --> 01:24:19,480
not accessible from up here because this

01:24:16,929 --> 01:24:23,020
will be only available after we loaded

01:24:19,480 --> 01:24:29,310
everything so we have to have that code

01:24:23,020 --> 01:24:32,310
in here let's remove these two lines oh

01:24:29,310 --> 01:24:32,310
cool

01:24:32,389 --> 01:24:39,050
this so we instantiate we get the module

01:24:36,230 --> 01:24:41,690
results instance experts and then we

01:24:39,050 --> 01:24:44,060
call get welcome message then we copy

01:24:41,690 --> 01:24:48,380
that see string oh the C string function

01:24:44,060 --> 01:24:52,940
so let's copy that as a whole so we

01:24:48,380 --> 01:24:56,659
don't have to worry about whoop and when

01:24:52,940 --> 01:25:02,060
we build and run this it should say

01:24:56,659 --> 01:25:05,300
hello from rust oh oh hello from rust

01:25:02,060 --> 01:25:06,619
cool so what we did is we passed

01:25:05,300 --> 01:25:09,949
pointers yeah

01:25:06,619 --> 01:25:12,350
pointed out that arithmetic we read from

01:25:09,949 --> 01:25:15,790
that memory so you might have seen this

01:25:12,350 --> 01:25:19,070
year we just access module dot memory

01:25:15,790 --> 01:25:22,520
web assembly is actually exporting this

01:25:19,070 --> 01:25:25,880
memory object for us so this is how we

01:25:22,520 --> 01:25:28,010
can access that buffer so the actual

01:25:25,880 --> 01:25:31,310
array where we can work on right we need

01:25:28,010 --> 01:25:34,880
that so this is the memory from rust in

01:25:31,310 --> 01:25:36,520
web assembly that we access here right

01:25:34,880 --> 01:25:39,350
away

01:25:36,520 --> 01:25:41,480
and yeah as soon as you see hello from

01:25:39,350 --> 01:25:44,690
Russells down here you have actually

01:25:41,480 --> 01:25:46,489
saved AC string into a memory and read

01:25:44,690 --> 01:25:51,650
it from JavaScript and passed it as

01:25:46,489 --> 01:25:54,500
utf-8 but this is a bit hard right I

01:25:51,650 --> 01:25:55,880
mean we don't have with the string it's

01:25:54,500 --> 01:25:59,659
easy well easy

01:25:55,880 --> 01:26:03,080
we can't just read until zeroes but try

01:25:59,659 --> 01:26:05,780
to pass now arbitrary objects with

01:26:03,080 --> 01:26:08,080
arrays in it that's where it's gonna get

01:26:05,780 --> 01:26:11,570
really heavy so we don't want to do that

01:26:08,080 --> 01:26:14,630
and we don't need to do that so there's

01:26:11,570 --> 01:26:16,670
a good tuning for us I only wanted to

01:26:14,630 --> 01:26:18,679
show you this so you would actually know

01:26:16,670 --> 01:26:20,570
what happens underneath it that you

01:26:18,679 --> 01:26:23,360
understand this has to be done because

01:26:20,570 --> 01:26:25,159
we only can pass integers and floats but

01:26:23,360 --> 01:26:27,199
we're not gonna do that anymore now now

01:26:25,159 --> 01:26:29,480
we're gonna have one abstraction between

01:26:27,199 --> 01:26:32,369
us and web assembly so it's gonna be

01:26:29,480 --> 01:26:37,199
easier for us to stay sane in our head

01:26:32,369 --> 01:26:39,360
so every every current language that we

01:26:37,199 --> 01:26:41,969
can compile to webassembly

01:26:39,360 --> 01:26:45,510
has its own kind of helping tool for

01:26:41,969 --> 01:26:47,880
that in rust is called as invention for

01:26:45,510 --> 01:26:51,000
c and c++ you might have heard of that

01:26:47,880 --> 01:26:54,150
it's called Emscripten people that know

01:26:51,000 --> 01:26:59,690
as inches know and Skipton is around for

01:26:54,150 --> 01:26:59,690
quite some time now but yeah

01:27:01,920 --> 01:27:09,850
it allows us to have high-level

01:27:04,180 --> 01:27:13,030
interaction so various types and it does

01:27:09,850 --> 01:27:15,360
all this post bindings kind of for us so

01:27:13,030 --> 01:27:19,060
we can now pass in and out of of

01:27:15,360 --> 01:27:21,570
webassembly whatever we feel like and we

01:27:19,060 --> 01:27:24,730
will see that this can really be alone

01:27:21,570 --> 01:27:27,190
what's also cool is imagine banchon can

01:27:24,730 --> 01:27:29,200
actually generate typing for you for

01:27:27,190 --> 01:27:31,930
typescript so that's in my opinion a

01:27:29,200 --> 01:27:33,910
huge boss here that the bat tool does

01:27:31,930 --> 01:27:35,650
very well we will not look into that

01:27:33,910 --> 01:27:37,930
because of time constraints we won't

01:27:35,650 --> 01:27:40,240
have time to explore all the options but

01:27:37,930 --> 01:27:43,030
you could theoretically generate

01:27:40,240 --> 01:27:45,400
typing's from your rust code so in

01:27:43,030 --> 01:27:47,470
typescript you would actually know what

01:27:45,400 --> 01:27:50,560
this function is returning and what it

01:27:47,470 --> 01:27:54,760
can pass into it at any time which would

01:27:50,560 --> 01:27:58,780
be nice the downside of this now we have

01:27:54,760 --> 01:28:01,780
a wrapper between web assembly and rust

01:27:58,780 --> 01:28:04,510
or the web assembly interface and rust

01:28:01,780 --> 01:28:07,570
and JavaScript and the web assembly

01:28:04,510 --> 01:28:09,850
interface because when we send some

01:28:07,570 --> 01:28:11,800
arbitrary object on the JavaScript side

01:28:09,850 --> 01:28:14,770
we kind of have to transform that and

01:28:11,800 --> 01:28:17,410
save it into an array and from the rough

01:28:14,770 --> 01:28:19,690
side the same right we have to know how

01:28:17,410 --> 01:28:22,570
is this kind of stored but we don't want

01:28:19,690 --> 01:28:25,090
to see it so we generate code now on the

01:28:22,570 --> 01:28:25,510
JavaScript side and on the on the Watson

01:28:25,090 --> 01:28:29,140
side

01:28:25,510 --> 01:28:31,990
rust site and we will only interact with

01:28:29,140 --> 01:28:33,070
resin now through that resin bind chain

01:28:31,990 --> 01:28:37,090
how that looks

01:28:33,070 --> 01:28:39,610
we will see it right away so what now

01:28:37,090 --> 01:28:42,040
happens is when we compile a ransom file

01:28:39,610 --> 01:28:45,040
it will actually compile into a

01:28:42,040 --> 01:28:47,740
JavaScript file and a vassal file on the

01:28:45,040 --> 01:28:48,810
JavaScript side we have the bindings so

01:28:47,740 --> 01:28:51,750
that we actually know

01:28:48,810 --> 01:28:53,580
how we read these arbitrary types and on

01:28:51,750 --> 01:28:57,000
the western side we have to compile

01:28:53,580 --> 01:29:00,510
dress code plus also these bindings so

01:28:57,000 --> 01:29:03,180
JavaScript and rust know what the other

01:29:00,510 --> 01:29:05,160
part is gonna save into memory and read

01:29:03,180 --> 01:29:09,450
from memory so we have to kind of

01:29:05,160 --> 01:29:12,300
abstract that for us so we have

01:29:09,450 --> 01:29:13,530
basically we have three steps to do we

01:29:12,300 --> 01:29:16,050
have to make sure that the bust is

01:29:13,530 --> 01:29:17,970
compiled with Rasim banchon so this is

01:29:16,050 --> 01:29:23,220
actually a compiler extension in that

01:29:17,970 --> 01:29:25,320
sort then we we need to make sure that

01:29:23,220 --> 01:29:27,930
the compiler knows it was invention it

01:29:25,320 --> 01:29:30,140
will compile it with was invention and

01:29:27,930 --> 01:29:33,360
we will need to make sure that these

01:29:30,140 --> 01:29:35,970
chase findings that I talked about are

01:29:33,360 --> 01:29:38,220
loaded into the browser before we access

01:29:35,970 --> 01:29:39,960
web assembly because they have to be

01:29:38,220 --> 01:29:43,470
there to have to provide us all these

01:29:39,960 --> 01:29:45,840
wrappers to to send all these arbitrary

01:29:43,470 --> 01:29:49,830
types in and receive them out of we're

01:29:45,840 --> 01:29:55,320
assembling how does that look like on

01:29:49,830 --> 01:29:58,020
the website it's it's kind of easy there

01:29:55,320 --> 01:30:00,300
is this line up here that helps us with

01:29:58,020 --> 01:30:02,880
that oh I'm sorry this one I will not go

01:30:00,300 --> 01:30:05,370
into that too much this is Russ and we

01:30:02,880 --> 01:30:08,910
save us that we need some macros to be

01:30:05,370 --> 01:30:11,370
executed for that I think that's a

01:30:08,910 --> 01:30:13,800
detail we just omit for that workshop so

01:30:11,370 --> 01:30:15,240
we don't have to go into rust macros and

01:30:13,800 --> 01:30:17,690
all that stuff we're just gonna leave

01:30:15,240 --> 01:30:21,870
that out for a moment this will activate

01:30:17,690 --> 01:30:24,930
Wes invention for the compiler so we can

01:30:21,870 --> 01:30:26,850
actually use all of it then we say it

01:30:24,930 --> 01:30:29,490
there's an external crate the crate

01:30:26,850 --> 01:30:31,440
that's like an NPM package for rust so

01:30:29,490 --> 01:30:33,270
there's a massive engine crate this will

01:30:31,440 --> 01:30:36,000
actually loads the library that we will

01:30:33,270 --> 01:30:38,130
then be using and here we say that we

01:30:36,000 --> 01:30:40,860
need this preload that will help us with

01:30:38,130 --> 01:30:44,160
all the helper functions that we will be

01:30:40,860 --> 01:30:47,220
using now the actual rust code doesn't

01:30:44,160 --> 01:30:49,650
look all that's different you see up

01:30:47,220 --> 01:30:52,380
here this is slightly different instead

01:30:49,650 --> 01:30:55,080
of no manual vasin banshan introduced a

01:30:52,380 --> 01:30:56,870
new introduces a new flag it's called

01:30:55,080 --> 01:31:00,620
Bassem binds chain

01:30:56,870 --> 01:31:03,050
the compiler for one no mango please

01:31:00,620 --> 01:31:05,090
don't remove it but on the other hand it

01:31:03,050 --> 01:31:08,930
will also make sure that all these types

01:31:05,090 --> 01:31:11,630
are working correctly then you see we

01:31:08,930 --> 01:31:13,490
can just return a regular rough string

01:31:11,630 --> 01:31:15,950
as you would expect it that's cool

01:31:13,490 --> 01:31:19,040
so this is what we do here but what we

01:31:15,950 --> 01:31:22,670
get in is a string reference I will get

01:31:19,040 --> 01:31:24,530
into why this is the case this is a

01:31:22,670 --> 01:31:26,870
little macro from Russ that is just

01:31:24,530 --> 01:31:30,110
helping us we can have these braces here

01:31:26,870 --> 01:31:32,960
and all the parameters you will add

01:31:30,110 --> 01:31:35,240
afterwards will be replaced into these

01:31:32,960 --> 01:31:38,570
spots with the braces so this is just a

01:31:35,240 --> 01:31:41,180
fancy print line right nothing else this

01:31:38,570 --> 01:31:45,920
will return a string that is hello comma

01:31:41,180 --> 01:31:49,940
and then whatever you pass into it as a

01:31:45,920 --> 01:31:51,800
name so the rest function isn't that all

01:31:49,940 --> 01:31:54,800
that complicated this is all that we

01:31:51,800 --> 01:31:59,210
have to do on the rough side so far so

01:31:54,800 --> 01:32:00,470
cool yeah these macros by the way you

01:31:59,210 --> 01:32:06,260
always see them because of the

01:32:00,470 --> 01:32:08,750
exclamation mark rust has this best yeah

01:32:06,260 --> 01:32:10,550
rust does this that every mark row has

01:32:08,750 --> 01:32:11,030
to have this exclamation mark in its

01:32:10,550 --> 01:32:13,480
name

01:32:11,030 --> 01:32:16,790
but I said we're not going to look into

01:32:13,480 --> 01:32:20,270
more of these markers we just use it for

01:32:16,790 --> 01:32:24,290
creating that string that's all it has

01:32:20,270 --> 01:32:27,200
to do so this is the case here that's

01:32:24,290 --> 01:32:29,870
relevant javascript strings are utf-16

01:32:27,200 --> 01:32:33,350
and they have some limitations to that

01:32:29,870 --> 01:32:36,050
so how pairs are matched up I am way too

01:32:33,350 --> 01:32:39,470
stupid to explain this so rust the rust

01:32:36,050 --> 01:32:42,560
guys they have done a cool documentation

01:32:39,470 --> 01:32:45,860
why it's hard to go from this utf-16 to

01:32:42,560 --> 01:32:48,380
that utf-8 of rust without getting these

01:32:45,860 --> 01:32:51,110
nice little black boxes with question

01:32:48,380 --> 01:32:52,940
marks in it so this is why they give you

01:32:51,110 --> 01:32:55,910
that reference they have to do some

01:32:52,940 --> 01:32:57,560
stuff that it is guaranteed that that

01:32:55,910 --> 01:33:00,170
string will never have on

01:32:57,560 --> 01:33:02,930
glanceable characters in it so this is

01:33:00,170 --> 01:33:06,500
why you get a string a reference of a

01:33:02,930 --> 01:33:08,810
string in the end there's a base type

01:33:06,500 --> 01:33:10,370
behind that it's called chase string

01:33:08,810 --> 01:33:12,590
that's what they used to actually

01:33:10,370 --> 01:33:16,070
convert all that stuff if you want to

01:33:12,590 --> 01:33:19,100
read up on that these are good good

01:33:16,070 --> 01:33:21,110
starting points but this would kind of

01:33:19,100 --> 01:33:22,970
be too much for that workshop now so

01:33:21,110 --> 01:33:26,480
we're just gonna accept the fact that

01:33:22,970 --> 01:33:28,520
when we have something in JavaScript

01:33:26,480 --> 01:33:30,590
that we have to when we get a string or

01:33:28,520 --> 01:33:36,020
give it back we'll have this reference

01:33:30,590 --> 01:33:39,620
reference type here so there's one last

01:33:36,020 --> 01:33:42,620
thing if you recall the diagram from up

01:33:39,620 --> 01:33:44,360
above this one when I showed you that

01:33:42,620 --> 01:33:47,260
builds of TS file

01:33:44,360 --> 01:33:50,120
you saw that the ransom file is only

01:33:47,260 --> 01:33:52,970
compiled the rust file is only compiled

01:33:50,120 --> 01:33:54,560
into one thousand file and we have to

01:33:52,970 --> 01:33:57,260
change that now right because we have

01:33:54,560 --> 01:34:02,450
these JavaScript bindings so what

01:33:57,260 --> 01:34:04,490
webassembly studio is providing us this

01:34:02,450 --> 01:34:07,250
is what it is now right service dot

01:34:04,490 --> 01:34:09,980
compiled trial but webassembly studio

01:34:07,250 --> 01:34:13,390
actually has compiled a file with

01:34:09,980 --> 01:34:16,790
bindings very cool so what that does is

01:34:13,390 --> 01:34:20,720
back here we have the same call we say

01:34:16,790 --> 01:34:23,210
we enter main rust it is rust code you

01:34:20,720 --> 01:34:26,450
have to generate Watson code and the

01:34:23,210 --> 01:34:28,820
same options but the return type is

01:34:26,450 --> 01:34:33,410
slightly different because if you look

01:34:28,820 --> 01:34:36,260
at it before we have this data object

01:34:33,410 --> 01:34:38,780
and we would just say Avastin sets the

01:34:36,260 --> 01:34:41,210
other but what we do now is that data

01:34:38,780 --> 01:34:44,880
object has actually two properties on it

01:34:41,210 --> 01:34:49,290
now one is Bazin this is the binary and

01:34:44,880 --> 01:34:52,230
is Bassem bindings chase bank Chen sorry

01:34:49,290 --> 01:34:55,320
so we create two files here so this is

01:34:52,230 --> 01:34:58,409
the basic difference we have one out

01:34:55,320 --> 01:35:01,920
main dot Bassem file and we have one

01:34:58,409 --> 01:35:04,710
main underscore bindings that jeaious so

01:35:01,920 --> 01:35:08,150
now we created both so we compiled a

01:35:04,710 --> 01:35:10,790
trust into JavaScript and interest a

01:35:08,150 --> 01:35:13,110
business sorry

01:35:10,790 --> 01:35:16,020
the only thing that we need to make sure

01:35:13,110 --> 01:35:18,179
now is that is actually loaded into HTML

01:35:16,020 --> 01:35:22,980
before or other script is actually

01:35:18,179 --> 01:35:24,780
execute it so this is I mean it's kind

01:35:22,980 --> 01:35:27,900
of trivial right so we just load that

01:35:24,780 --> 01:35:30,090
main by next is that we just created in

01:35:27,900 --> 01:35:32,670
the build step and that's all we need to

01:35:30,090 --> 01:35:35,550
do so how does the JavaScript side look

01:35:32,670 --> 01:35:38,969
like so this is different now

01:35:35,550 --> 01:35:42,270
you remember that before we have to call

01:35:38,969 --> 01:35:44,280
fetch and array buffer and then whoever

01:35:42,270 --> 01:35:47,580
same did not instantiate with their

01:35:44,280 --> 01:35:50,550
buffer all of this is now done by Wesen

01:35:47,580 --> 01:35:53,100
binds chain as I told you we do not

01:35:50,550 --> 01:35:53,969
interact any more directly with

01:35:53,100 --> 01:35:57,090
webassembly

01:35:53,969 --> 01:35:59,520
we will interact only through Bassem

01:35:57,090 --> 01:36:01,710
binds chain this is our interaction

01:35:59,520 --> 01:36:04,560
point now to actually get this code

01:36:01,710 --> 01:36:06,330
running so the string is the same right

01:36:04,560 --> 01:36:09,330
we just say hey take that file and

01:36:06,330 --> 01:36:11,550
instantiate and what we get when that

01:36:09,330 --> 01:36:13,469
promise returns the instance is ready

01:36:11,550 --> 01:36:16,800
wherever somebody started up and we can

01:36:13,469 --> 01:36:19,800
just call it you see that this function

01:36:16,800 --> 01:36:22,230
is then calling that greet method and

01:36:19,800 --> 01:36:26,130
this is the second thing that is new up

01:36:22,230 --> 01:36:29,730
here except instead of having to go

01:36:26,130 --> 01:36:31,940
through instances of experts and then

01:36:29,730 --> 01:36:34,590
calling dot greet on it

01:36:31,940 --> 01:36:38,550
vasin binds chain is providing us the

01:36:34,590 --> 01:36:41,489
experts as these these properties on

01:36:38,550 --> 01:36:44,760
that global object so vasin binds chain

01:36:41,489 --> 01:36:47,429
is on our window object this is a global

01:36:44,760 --> 01:36:50,460
object that we now have and we can get

01:36:47,429 --> 01:36:51,550
all the exports from there so if you

01:36:50,460 --> 01:36:53,890
want to make it easier

01:36:51,550 --> 01:36:56,740
not have these destructuring things you

01:36:53,890 --> 01:37:01,390
could also go ahead and just say vasin

01:36:56,740 --> 01:37:03,790
underscore bind chin doctor greet right

01:37:01,390 --> 01:37:05,950
this is the same so here we just have

01:37:03,790 --> 01:37:09,010
that fancy restructuring so we take

01:37:05,950 --> 01:37:11,590
creed out of it as a standalone function

01:37:09,010 --> 01:37:14,560
but you could also oh well not like this

01:37:11,590 --> 01:37:18,130
but like this you could just call it

01:37:14,560 --> 01:37:20,290
like that this is just as every window

01:37:18,130 --> 01:37:22,360
object properly as you know you have

01:37:20,290 --> 01:37:25,950
access to it its global you can't just

01:37:22,360 --> 01:37:31,840
go ahead grab whatever you want to and

01:37:25,950 --> 01:37:34,150
execute it yeah so maybe if you go to

01:37:31,840 --> 01:37:36,730
the exercise delete your existing

01:37:34,150 --> 01:37:38,980
JavaScript and rust coat and take the

01:37:36,730 --> 01:37:41,560
ones from these examples so you don't

01:37:38,980 --> 01:37:43,510
have any clashes with names or something

01:37:41,560 --> 01:37:46,450
so you don't end up trying to track down

01:37:43,510 --> 01:37:52,500
some naming issue or anything so this is

01:37:46,450 --> 01:37:52,500
all the code you need for that yeah

01:37:52,650 --> 01:37:58,030
exactly that's what I already said that

01:37:55,330 --> 01:38:02,170
that main bindings is this is actually

01:37:58,030 --> 01:38:05,080
the code there's the script that does at

01:38:02,170 --> 01:38:07,810
this vasin binds chain property to the

01:38:05,080 --> 01:38:12,580
window object and we will have access to

01:38:07,810 --> 01:38:15,340
that now yeah so there's three things we

01:38:12,580 --> 01:38:18,100
have to do we try to pass these strings

01:38:15,340 --> 01:38:21,490
now without having to read on the memory

01:38:18,100 --> 01:38:24,840
which would be cool right so make sure

01:38:21,490 --> 01:38:27,160
that it's comparative present Bancha and

01:38:24,840 --> 01:38:30,100
import these bindings and then you

01:38:27,160 --> 01:38:35,530
should be all set for that so let's try

01:38:30,100 --> 01:38:37,600
that out I would say we take another 10

01:38:35,530 --> 01:38:40,380
to 15 minutes depending on how many

01:38:37,600 --> 01:38:40,380
questions there are

01:39:21,880 --> 01:39:28,570
is it any fun well that doesn't sound

01:39:26,300 --> 01:39:28,570
fun

01:40:28,039 --> 01:40:38,459
for what this time that's a reference of

01:40:33,539 --> 01:40:41,999
a string reference but that's that

01:40:38,459 --> 01:40:44,689
specific jeaious style reference that I

01:40:41,999 --> 01:40:48,269
mentioned because of that utf-16

01:40:44,689 --> 01:40:50,429
position this is what it does yeah it's

01:40:48,269 --> 01:40:57,510
good it's a little bit weird and then

01:40:50,429 --> 01:41:00,149
are these like no like this is like them

01:40:57,510 --> 01:41:03,169
yeah this is kind of rust macros for the

01:41:00,149 --> 01:41:14,099
compiler yeah yeah exactly and then

01:41:03,169 --> 01:41:16,379
instead of having like yeah rust has is

01:41:14,099 --> 01:41:18,840
called rust hacker yes

01:41:16,379 --> 01:41:21,590
yeah the third hole dependency

01:41:18,840 --> 01:41:21,590
resolution stuff

01:41:21,719 --> 01:41:24,349
yeah

01:41:34,619 --> 01:41:41,729
sorry oh yeah I'm sorry

01:42:26,800 --> 01:42:32,840
exactly if you I will ever show it if

01:42:31,309 --> 01:42:34,489
you look at these bindings you will see

01:42:32,840 --> 01:42:36,260
that it does pretty much what we did

01:42:34,489 --> 01:42:37,610
earlier so you see that this all

01:42:36,260 --> 01:42:40,249
generator code now

01:42:37,610 --> 01:42:42,860
but you see here they do the cache get

01:42:40,249 --> 01:42:45,650
you into it from memory they go to that

01:42:42,860 --> 01:42:47,719
buffer they take that array they have

01:42:45,650 --> 01:42:51,669
the text encoder you see they pretty

01:42:47,719 --> 01:42:51,669
much do it the same way as we did before

01:46:27,190 --> 01:46:38,210
nice that's it with another

01:46:32,010 --> 01:46:43,260
but Serena's NPM package crate ishes

01:46:38,210 --> 01:46:45,780
extends package the shelf a pastor says

01:46:43,260 --> 01:46:49,340
not even maven dependencies doesn't

01:46:45,780 --> 01:46:49,340
every Ruthie okay

01:46:54,620 --> 01:47:00,890
rust I am NOT a heavy user of wrath no

01:46:58,580 --> 01:47:05,440
but I think we have rust developers but

01:47:00,890 --> 01:47:08,780
nah I wouldn't know of any her abduction

01:47:05,440 --> 01:47:12,140
project we have a rest I think there are

01:47:08,780 --> 01:47:14,570
smaller services when each company as a

01:47:12,140 --> 01:47:16,730
kind of thing which is that I use so I

01:47:14,570 --> 01:47:19,700
think we have customers that have small

01:47:16,730 --> 01:47:22,550
services written in rust and go for a

01:47:19,700 --> 01:47:25,190
gold you

01:47:22,550 --> 01:47:27,410
yeah rust is very easy to teach the

01:47:25,190 --> 01:47:28,940
basics PO there will be one more

01:47:27,410 --> 01:47:31,510
exercise and then we'll be done with the

01:47:28,940 --> 01:47:35,980
basics that we get on to the fun stuff

01:47:31,510 --> 01:47:35,980
so let's let's discuss that

01:47:40,370 --> 01:47:47,060
okay so let's discuss this exercise

01:47:43,469 --> 01:47:49,530
quickly this will be the second-to-last

01:47:47,060 --> 01:47:51,690
basic exercise so bear with me for one

01:47:49,530 --> 01:47:53,969
more and then we will have the fun

01:47:51,690 --> 01:47:57,929
exercise where we will actually do a

01:47:53,969 --> 01:48:01,800
more real world real world example right

01:47:57,929 --> 01:48:04,830
because this helps us understand it but

01:48:01,800 --> 01:48:07,500
it doesn't really reflect what we will

01:48:04,830 --> 01:48:09,929
use it for afterwards so let's quickly

01:48:07,500 --> 01:48:12,960
go through it we import the crates that

01:48:09,929 --> 01:48:17,270
we need we ask that one function here to

01:48:12,960 --> 01:48:19,159
actually get that hello world message

01:48:17,270 --> 01:48:27,190
yeah

01:48:19,159 --> 01:48:29,650
then we extend our build step like this

01:48:27,190 --> 01:48:32,560
so this isn't that bill TS that I

01:48:29,650 --> 01:48:37,270
mentioned before right so we take this

01:48:32,560 --> 01:48:38,020
one out and X oops like this replace it

01:48:37,270 --> 01:48:40,510
with the new one

01:48:38,020 --> 01:48:43,240
so in here now you see that we do the

01:48:40,510 --> 01:48:46,930
main wasm and that main bindings chance

01:48:43,240 --> 01:48:49,570
cool so we got to rust all set up we get

01:48:46,930 --> 01:48:53,560
the build step to do what we want so we

01:48:49,570 --> 01:48:59,620
need to import the script in our main

01:48:53,560 --> 01:49:02,380
HTML that's around here this one cool

01:48:59,620 --> 01:49:07,500
and then there is just the JavaScript

01:49:02,380 --> 01:49:11,500
left so let's take that in as well

01:49:07,500 --> 01:49:16,870
nice so if we build and run that now we

01:49:11,500 --> 01:49:20,950
should see hello JS conveys Asia perfect

01:49:16,870 --> 01:49:24,790
that's what we wanted to see nice okay

01:49:20,950 --> 01:49:27,850
so you see now here we have the main

01:49:24,790 --> 01:49:30,760
mass of the binary and start bindings if

01:49:27,850 --> 01:49:33,250
you take a look at that bindings fine so

01:49:30,760 --> 01:49:35,770
this is all generated so it's a bit ugly

01:49:33,250 --> 01:49:38,110
code but if you check what they do you

01:49:35,770 --> 01:49:40,960
see that they also use the text encoder

01:49:38,110 --> 01:49:44,500
that we used before they go to the

01:49:40,960 --> 01:49:47,200
memory buffer as we did before they do

01:49:44,500 --> 01:49:49,510
this unsigned integer array a decode

01:49:47,200 --> 01:49:52,930
stuff and then you see function pass

01:49:49,510 --> 01:49:55,300
string 2000 which allocates memory on

01:49:52,930 --> 01:49:57,100
the rough side and then writes the

01:49:55,300 --> 01:50:00,550
string in the buffer and everything like

01:49:57,100 --> 01:50:03,970
that so they pretty much do what we did

01:50:00,550 --> 01:50:04,320
before so that's what wasum invention is

01:50:03,970 --> 01:50:06,570
now

01:50:04,320 --> 01:50:09,150
- right so we don't have to care about

01:50:06,570 --> 01:50:13,079
that anymore it's not nice College since

01:50:09,150 --> 01:50:15,239
its generated but now we don't have to

01:50:13,079 --> 01:50:17,849
care for ourselves anymore right we

01:50:15,239 --> 01:50:20,190
don't have to maintain that memory stuff

01:50:17,849 --> 01:50:24,270
and read everything out of there Rasim

01:50:20,190 --> 01:50:26,630
binds Chen we'll take care of this so

01:50:24,270 --> 01:50:29,310
that's actually what we wanted very cool

01:50:26,630 --> 01:50:31,530
so there's just one thing left and then

01:50:29,310 --> 01:50:35,310
we have all the basics covered or yeah

01:50:31,530 --> 01:50:37,679
all all major basics covered before we

01:50:35,310 --> 01:50:42,719
are able to call JavaScript functions

01:50:37,679 --> 01:50:45,329
out of rust can we also pass rings back

01:50:42,719 --> 01:50:48,300
to JavaScript right we didn't or not

01:50:45,329 --> 01:50:51,449
pass Rings back but call a javascript

01:50:48,300 --> 01:50:53,699
native function with a string you

01:50:51,449 --> 01:50:56,790
haven't proven that yet so this is a

01:50:53,699 --> 01:51:00,329
very small exercise it uses Basma

01:50:56,790 --> 01:51:02,190
banchon again so you know that little X

01:51:00,329 --> 01:51:04,590
term blocks that we used earlier for our

01:51:02,190 --> 01:51:07,050
log results function we can leverage

01:51:04,590 --> 01:51:09,810
that a bit and add that lesson bind

01:51:07,050 --> 01:51:11,880
chain up there what that will do is well

01:51:09,810 --> 01:51:14,579
combined chain on the JavaScript side

01:51:11,880 --> 01:51:17,460
will search for the function and try to

01:51:14,579 --> 01:51:19,980
inject that on the instantiation phase

01:51:17,460 --> 01:51:20,940
of your web assembly so when we don't

01:51:19,980 --> 01:51:23,190
say anything

01:51:20,940 --> 01:51:25,500
Masum banshan will go to the global

01:51:23,190 --> 01:51:28,349
scope window and will search that

01:51:25,500 --> 01:51:31,710
function so this will inject window dot

01:51:28,349 --> 01:51:33,929
alert so now we have the window alert

01:51:31,710 --> 01:51:36,599
function passed into it we don't need to

01:51:33,929 --> 01:51:38,639
do anything on the JavaScript side since

01:51:36,599 --> 01:51:40,619
this will all be done in our binding

01:51:38,639 --> 01:51:43,980
strayer's that will be generated by our

01:51:40,619 --> 01:51:47,940
compile step so the charge cube it's not

01:51:43,980 --> 01:51:49,860
not different this is a thing that we

01:51:47,940 --> 01:51:52,560
only have to do on the rough side and

01:51:49,860 --> 01:51:55,020
pass invention will inject the correct

01:51:52,560 --> 01:51:56,260
functions now you think like you have

01:51:55,020 --> 01:51:59,739
what if I want to

01:51:56,260 --> 01:52:02,800
some specific functions so they have it

01:51:59,739 --> 01:52:05,200
covered if you say nothing there's no

01:52:02,800 --> 01:52:08,410
flag it will search for window dr.

01:52:05,200 --> 01:52:11,500
Holland if you say hey hey the chance

01:52:08,410 --> 01:52:15,870
namespace is console Wes invention will

01:52:11,500 --> 01:52:18,790
go for window that console that lock so

01:52:15,870 --> 01:52:21,340
this is how we would inject comes along

01:52:18,790 --> 01:52:23,680
and if we want to have it twice you know

01:52:21,340 --> 01:52:26,110
the console log statement of JavaScript

01:52:23,680 --> 01:52:28,239
obviously takes in our arbitrary types

01:52:26,110 --> 01:52:30,610
rusts doesn't really know that right

01:52:28,239 --> 01:52:33,160
Russ doesn't know that pass me anything

01:52:30,610 --> 01:52:35,770
log statement pass me an array or an

01:52:33,160 --> 01:52:40,030
object log statement so if you want to

01:52:35,770 --> 01:52:43,090
have a second console log injected with

01:52:40,030 --> 01:52:46,540
just another typing you see here we say

01:52:43,090 --> 01:52:48,970
unsigned int 32 bit and here we say

01:52:46,540 --> 01:52:51,460
string reference you can even go further

01:52:48,970 --> 01:52:55,720
and say okay the Chinese name spaces

01:52:51,460 --> 01:52:57,910
console and the function name is log but

01:52:55,720 --> 01:53:00,010
in Russ that function name will be

01:52:57,910 --> 01:53:03,280
console underscore log on the scoring

01:53:00,010 --> 01:53:04,930
you 32 so a bass invention will not look

01:53:03,280 --> 01:53:07,870
at your function name anymore

01:53:04,930 --> 01:53:10,180
it will only check these two variables

01:53:07,870 --> 01:53:12,280
if you set them and just from there

01:53:10,180 --> 01:53:15,489
we'll search the correct function to

01:53:12,280 --> 01:53:17,950
pass into our web assembly code so

01:53:15,489 --> 01:53:20,560
lesson function will set up that import

01:53:17,950 --> 01:53:22,840
object it will add the correct functions

01:53:20,560 --> 01:53:25,330
into that import object and will pass

01:53:22,840 --> 01:53:28,020
them in so we don't have to care on the

01:53:25,330 --> 01:53:30,790
JavaScript side anymore because that

01:53:28,020 --> 01:53:36,119
JavaScript bindings file will do it all

01:53:30,790 --> 01:53:38,389
for us is that is that kind of clear

01:53:36,119 --> 01:53:38,389
yeah

01:53:39,550 --> 01:53:42,550
console

01:53:44,579 --> 01:53:48,730
okay so the question was if you want to

01:53:47,050 --> 01:53:50,499
come to look master look

01:53:48,730 --> 01:53:53,619
you mean the JavaScript math that love

01:53:50,499 --> 01:53:55,929
so what you would do is another line

01:53:53,619 --> 01:53:59,920
here and you would say the JavaScript

01:53:55,929 --> 01:54:03,119
namespace is math right so let's just

01:53:59,920 --> 01:54:07,570
write it if it would go like that oh

01:54:03,119 --> 01:54:10,119
this is written like this so this one

01:54:07,570 --> 01:54:13,780
now vasin ban channel will now go to

01:54:10,119 --> 01:54:16,059
window dot math dot log so that would

01:54:13,780 --> 01:54:19,659
now be the logarithmic function right

01:54:16,059 --> 01:54:22,480
master logarithm so now I could go ahead

01:54:19,659 --> 01:54:26,050
and say console log underscore u-32 and

01:54:22,480 --> 01:54:28,659
call this log function well this is a

01:54:26,050 --> 01:54:30,099
bit the naming is not very nice right

01:54:28,659 --> 01:54:32,289
because it looks like it's a log

01:54:30,099 --> 01:54:34,510
statement but this is math dot love

01:54:32,289 --> 01:54:39,429
everything so we would probably go ahead

01:54:34,510 --> 01:54:41,769
and say okay that jeaious underscore let

01:54:39,429 --> 01:54:44,619
me quickly get that into you so I can

01:54:41,769 --> 01:54:46,389
actually write that chase name is log

01:54:44,619 --> 01:54:50,440
master lock and here we would probably

01:54:46,389 --> 01:54:55,690
say like math underscore log and integer

01:54:50,440 --> 01:54:57,550
would be a 32-bit integer probably so

01:54:55,690 --> 01:55:00,579
this is how we wouldn't check the math

01:54:57,550 --> 01:55:03,699
function right so math dot log would now

01:55:00,579 --> 01:55:06,909
be available for us at math underscore

01:55:03,699 --> 01:55:09,960
log in rust and then we can go ahead and

01:55:06,909 --> 01:55:12,769
say okay and we need a third function

01:55:09,960 --> 01:55:17,579
well

01:55:12,769 --> 01:55:20,460
oops okay good and that is the console

01:55:17,579 --> 01:55:24,420
log function again and this time we want

01:55:20,460 --> 01:55:27,929
to add a 32-bit integer into it so we

01:55:24,420 --> 01:55:30,739
would say this is now console underscore

01:55:27,929 --> 01:55:34,050
log on this car I thirty two like this

01:55:30,739 --> 01:55:37,440
so now we have both methods in there

01:55:34,050 --> 01:55:40,710
right so we now inject it the math

01:55:37,440 --> 01:55:42,960
logarithm function and we inject the

01:55:40,710 --> 01:55:44,999
console log but other completely

01:55:42,960 --> 01:55:51,559
different names so they are not kind of

01:55:44,999 --> 01:55:51,559
messing up our brains the stomach

01:55:54,909 --> 01:56:00,679
okay so let's try to do that this is a

01:55:58,489 --> 01:56:02,840
short exercise just trying to do

01:56:00,679 --> 01:56:05,300
whatever function you would like pass it

01:56:02,840 --> 01:56:08,540
in see if you can call it if you can

01:56:05,300 --> 01:56:11,059
alert hellos like this example that I

01:56:08,540 --> 01:56:13,489
think other year you could do a alert

01:56:11,059 --> 01:56:15,820
hello world or something and have fun

01:56:13,489 --> 01:56:15,820
with it

01:56:16,800 --> 01:56:22,050
yeah let's take five to ten minutes try

01:56:20,070 --> 01:56:24,330
that out and that will be the last basic

01:56:22,050 --> 01:56:26,490
exercise after that we will do some fun

01:56:24,330 --> 01:56:29,310
image processing that we actually see

01:56:26,490 --> 01:56:31,590
what webassembly is capable of we just

01:56:29,310 --> 01:56:35,360
had to learn the basics first so we

01:56:31,590 --> 01:56:35,360
understand what happens under the hood

01:56:40,660 --> 01:56:44,520
be there in a second yeah

01:56:45,900 --> 01:56:50,310
I was curious

01:56:48,929 --> 01:56:52,409
it's gonna like waiting until that's

01:56:50,310 --> 01:56:59,270
ready before coals the function and uses

01:56:52,409 --> 01:57:01,920
okay Adam yeah yeah from here what is it

01:56:59,270 --> 01:57:04,199
yeah this is only setting up the web

01:57:01,920 --> 01:57:06,210
assembly instance right because Bassem

01:57:04,199 --> 01:57:07,860
binds chen already knows what you are

01:57:06,210 --> 01:57:10,140
exporting your us because it was there

01:57:07,860 --> 01:57:12,150
at compile time right so it already

01:57:10,140 --> 01:57:13,980
knows you are exporting a great function

01:57:12,150 --> 01:57:23,670
die that's why it provides you that

01:57:13,980 --> 01:57:25,590
output what what this is doing is it

01:57:23,670 --> 01:57:27,989
loads to binary and then it does

01:57:25,590 --> 01:57:29,940
webassembly does instantiate it does

01:57:27,989 --> 01:57:33,210
have to set up the web assembly instance

01:57:29,940 --> 01:57:36,989
right exactly exactly this is all it

01:57:33,210 --> 01:57:40,560
does now does it return anything I think

01:57:36,989 --> 01:57:42,179
I don't think Shelton's no I think this

01:57:40,560 --> 01:57:43,679
is all handled in that global object

01:57:42,179 --> 01:57:45,690
okay I don't think it has a return type

01:57:43,679 --> 01:57:48,699
anymore but I'm not on the pension just

01:57:45,690 --> 01:57:51,300
I'm sure make sense yeah okay

01:57:48,699 --> 01:57:51,300
yeah

01:57:53,760 --> 01:58:00,300
like something in navigator which good

01:57:58,110 --> 01:58:02,670
question so when you when you look at

01:58:00,300 --> 01:58:07,290
the choice that it's actually putting

01:58:02,670 --> 01:58:09,870
out did you did you build that now not

01:58:07,290 --> 01:58:11,880
yet try to build that quickly because

01:58:09,870 --> 01:58:13,470
you see what it actually does and then

01:58:11,880 --> 01:58:18,120
it can kind of see what you would expect

01:58:13,470 --> 01:58:20,100
it to to input there so now a search for

01:58:18,120 --> 01:58:21,900
one of the methods you import it like

01:58:20,100 --> 01:58:26,580
what did you do console log or something

01:58:21,900 --> 01:58:29,130
what do we have the alert search for the

01:58:26,580 --> 01:58:31,489
other function because you should see it

01:58:29,130 --> 01:58:31,489
here now

01:58:33,190 --> 01:58:38,650
oh yeah so you see what it does it's

01:58:37,570 --> 01:58:41,710
fairly weird

01:58:38,650 --> 01:58:44,260
so you see actually it creates a new

01:58:41,710 --> 01:58:46,030
function for you and in there it will

01:58:44,260 --> 01:58:47,650
call the alert so it's kind of wraps

01:58:46,030 --> 01:58:49,660
your function so if that would be

01:58:47,650 --> 01:58:51,610
undefined you would get undefined this

01:58:49,660 --> 01:58:55,270
is another function right yeah that

01:58:51,610 --> 01:58:59,560
would be what happens okay so under that

01:58:55,270 --> 01:59:02,310
specific case yes they were throwing her

01:58:59,560 --> 01:59:02,310
in Chaves good

01:59:03,090 --> 01:59:08,800
exactly exactly yeah well no it was

01:59:07,090 --> 01:59:11,260
probably run divestment because this

01:59:08,800 --> 01:59:13,390
will be called from from rust right

01:59:11,260 --> 01:59:16,210
you'll recover from rust but then on the

01:59:13,390 --> 01:59:22,930
JavaScript side it will fail because it

01:59:16,210 --> 01:59:24,010
tries to call undefined yeah exactly

01:59:22,930 --> 01:59:27,750
exactly

01:59:24,010 --> 01:59:27,750
got nice face cut

01:59:48,080 --> 01:59:52,860
okay let's already get into the honey

01:59:51,090 --> 01:59:55,500
because this is just a last quick

01:59:52,860 --> 01:59:57,720
exercise let's just do the basic example

01:59:55,500 --> 02:00:04,290
right I think most of you already have

01:59:57,720 --> 02:00:06,060
it running if not don't worry so if we

02:00:04,290 --> 02:00:08,100
have that external block right this is

02:00:06,060 --> 02:00:11,070
all we do we just have to call it from

02:00:08,100 --> 02:00:14,940
somewhere so I mean we can make a new

02:00:11,070 --> 02:00:16,560
function right so we can say well let's

02:00:14,940 --> 02:00:21,170
be honest with our function names right

02:00:16,560 --> 02:00:26,370
let's call it alert let's call it alert

02:00:21,170 --> 02:00:29,880
hello world this gets in a string and

02:00:26,370 --> 02:00:32,550
we'll return absolutely nothing so what

02:00:29,880 --> 02:00:37,440
we will do is we will call alert like

02:00:32,550 --> 02:00:40,700
this right so we can call that alert

02:00:37,440 --> 02:00:43,500
hello world and this should actually

02:00:40,700 --> 02:00:46,920
call our alert functions that we should

02:00:43,500 --> 02:00:49,470
get a stupid alert message right so

02:00:46,920 --> 02:00:54,810
let's just try that so instead of

02:00:49,470 --> 02:00:57,930
greeting here we just called a new alert

02:00:54,810 --> 02:00:59,850
hello world like this and since we don't

02:00:57,930 --> 02:01:02,580
have a return type this line down here

02:00:59,850 --> 02:01:04,470
doesn't make any sense so now we call it

02:01:02,580 --> 02:01:07,980
like that and this should now throw an

02:01:04,470 --> 02:01:10,590
error because I did leave something out

02:01:07,980 --> 02:01:12,270
that is relevant so let's just join it

02:01:10,590 --> 02:01:16,590
build and run it and see what the rust

02:01:12,270 --> 02:01:18,570
disaster that oh so it said I am

02:01:16,590 --> 02:01:20,910
expecting you to add this reference

02:01:18,570 --> 02:01:23,730
string but you give me a correct

02:01:20,910 --> 02:01:27,330
complete string so what I have to do the

02:01:23,730 --> 02:01:30,300
issue is now here I have the format

02:01:27,330 --> 02:01:34,950
macro which is returning a string well

02:01:30,300 --> 02:01:39,060
as you see alert is expecting this so

02:01:34,950 --> 02:01:40,050
what I do is I add data saying put the

02:01:39,060 --> 02:01:43,050
reference of that

02:01:40,050 --> 02:01:48,270
and rust will be totally happy with that

02:01:43,050 --> 02:01:51,750
so let's see yeah you see up here well

02:01:48,270 --> 02:01:55,140
it's not the best contrast so the native

02:01:51,750 --> 02:01:57,030
alert of mine brow is the fire so if we

02:01:55,140 --> 02:01:58,800
go here like confirm you know you know

02:01:57,030 --> 02:02:02,430
the confirm right with the buttons on it

02:01:58,800 --> 02:02:05,340
so let's just call the confirm now what

02:02:02,430 --> 02:02:07,230
happens you see I get these buttons up

02:02:05,340 --> 02:02:10,850
here so these are really the native

02:02:07,230 --> 02:02:16,920
methods right we can't call them now

02:02:10,850 --> 02:02:21,030
cool so this was all for the basics I

02:02:16,920 --> 02:02:22,980
hope it was okay for you it was fun for

02:02:21,030 --> 02:02:25,590
the basics but now we want to see what

02:02:22,980 --> 02:02:27,720
an actual real-world use case looks like

02:02:25,590 --> 02:02:30,000
so how do we do for example image

02:02:27,720 --> 02:02:31,860
processing but I would advise that we

02:02:30,000 --> 02:02:34,080
make a short break of ten minutes and

02:02:31,860 --> 02:02:37,040
start with the last exercise at

02:02:34,080 --> 02:02:37,040
half-past three

02:02:42,590 --> 02:02:48,110
soon but we will already start otherwise

02:02:45,350 --> 02:02:53,020
we'll get into a hurry for last exercise

02:02:48,110 --> 02:02:56,960
and we don't want that so go over to the

02:02:53,020 --> 02:03:00,260
the lowest the last one chapter 5

02:02:56,960 --> 02:03:03,710
real-world use case this is what we will

02:03:00,260 --> 02:03:07,310
look at now so what do I think of

02:03:03,710 --> 02:03:09,500
real-world use case um what we will use

02:03:07,310 --> 02:03:14,510
this OpenCV does anybody in here know

02:03:09,500 --> 02:03:17,840
over the CV a bit are you are you

02:03:14,510 --> 02:03:21,170
actively using open CV nobody really

02:03:17,840 --> 02:03:25,310
cool so we won't do hard core functions

02:03:21,170 --> 02:03:28,280
of open CV so I will explain every

02:03:25,310 --> 02:03:29,960
function that we need for those who know

02:03:28,280 --> 02:03:32,660
the open CV it's one of the biggest

02:03:29,960 --> 02:03:36,230
libraries for computer vision it is

02:03:32,660 --> 02:03:40,150
written and C C++ so as you may think

02:03:36,230 --> 02:03:43,400
this CV in open CV is computer vision

02:03:40,150 --> 02:03:45,140
and the cool thing is in C and C++ right

02:03:43,400 --> 02:03:47,750
and if you remember correct if you

02:03:45,140 --> 02:03:51,050
remember from my first couple of slides

02:03:47,750 --> 02:03:52,940
C and C++ are pretty much done over for

02:03:51,050 --> 02:03:56,720
assembly so you can compile them to

02:03:52,940 --> 02:04:01,850
webassembly very easily so let's do that

02:03:56,720 --> 02:04:04,190
then luckily there is somebody at open

02:04:01,850 --> 02:04:07,490
CV who already did this so the standard

02:04:04,190 --> 02:04:09,980
built of open CV can be triggered to

02:04:07,490 --> 02:04:13,190
compile to basel instead of native

02:04:09,980 --> 02:04:14,600
architecture code we won't compile it

02:04:13,190 --> 02:04:17,240
ourselves because you will have to

02:04:14,600 --> 02:04:20,360
install si Lang compiler and Emscripten

02:04:17,240 --> 02:04:24,140
and you would compile it for five to ten

02:04:20,360 --> 02:04:26,690
minutes since that is kind of a not so

02:04:24,140 --> 02:04:29,340
nice thing to do I did the pre compiling

02:04:26,690 --> 02:04:31,620
for us so we already have a

02:04:29,340 --> 02:04:35,490
pilot OpenCV library and it's a two

02:04:31,620 --> 02:04:37,080
megabytes big so it's not optimal to

02:04:35,490 --> 02:04:38,190
send it to the browser often so we'll

02:04:37,080 --> 02:04:41,130
try to catch it

02:04:38,190 --> 02:04:46,110
oh yeah I forgot to mention a

02:04:41,130 --> 02:04:48,210
description so we used vassal bind chain

02:04:46,110 --> 02:04:51,630
for rust right so that helped us with

02:04:48,210 --> 02:04:55,380
those bindings from rust to JavaScript

02:04:51,630 --> 02:04:57,600
all C and C++ side we have MS triptan

02:04:55,380 --> 02:04:59,160
and you can basically if if you put it

02:04:57,600 --> 02:05:01,800
very simple that's not entirely correct

02:04:59,160 --> 02:05:04,740
but if you put it simple it's comparable

02:05:01,800 --> 02:05:07,740
to wasn't binds change it does also do

02:05:04,740 --> 02:05:09,510
JavaScript bindings it will help us to

02:05:07,740 --> 02:05:12,330
have this high level interaction with

02:05:09,510 --> 02:05:14,360
all the types we want to so this is

02:05:12,330 --> 02:05:17,580
gonna help us a lot and this is what

02:05:14,360 --> 02:05:22,950
OpenCV internally uses when you compile

02:05:17,580 --> 02:05:24,300
it to webassembly so let's do image

02:05:22,950 --> 02:05:26,670
processing shall we

02:05:24,300 --> 02:05:28,530
the first thing you have to do is check

02:05:26,670 --> 02:05:32,400
out that literally gives you posit Orion

02:05:28,530 --> 02:05:39,930
shouldn't be too big this is the setup

02:05:32,400 --> 02:05:42,900
for our last two as a - yeah - exercises

02:05:39,930 --> 02:05:45,360
that we will do when you have it when

02:05:42,900 --> 02:05:48,510
you downloaded it execute npm install

02:05:45,360 --> 02:05:52,350
and npm start and then you should have a

02:05:48,510 --> 02:05:55,080
local running web server on port 8080 or

02:05:52,350 --> 02:05:58,470
if your part ID ID is actually taken it

02:05:55,080 --> 02:06:01,920
will start on 1881 8080 to whatever is

02:05:58,470 --> 02:06:04,020
free it will show you in the console you

02:06:01,920 --> 02:06:06,600
will not have to restart that web server

02:06:04,020 --> 02:06:08,880
because it's just a plain static web

02:06:06,600 --> 02:06:11,250
server we have no build come we have no

02:06:08,880 --> 02:06:13,650
build step we have no post piece

02:06:11,250 --> 02:06:17,460
processing nothing like that so this is

02:06:13,650 --> 02:06:19,560
really a stupid web server so you don't

02:06:17,460 --> 02:06:21,420
have to restarted or anything just keep

02:06:19,560 --> 02:06:23,280
it up and running and the only thing you

02:06:21,420 --> 02:06:26,510
have to do is refresh your browser when

02:06:23,280 --> 02:06:26,510
you actually change things

02:06:27,280 --> 02:06:32,359
okay try to check that out

02:06:29,719 --> 02:06:36,139
I hope everybody has an editor River so

02:06:32,359 --> 02:06:38,329
like your favorite editor on you we it's

02:06:36,139 --> 02:06:40,879
not like you need a super-duper editor

02:06:38,329 --> 02:06:43,329
so you will be okay with pretty much any

02:06:40,879 --> 02:06:43,329
editor

02:06:44,379 --> 02:06:53,079
did everybody manage to clone to get

02:06:48,499 --> 02:06:58,189
your posit ory everybody has it perfect

02:06:53,079 --> 02:07:02,300
cool as soon as you have it run NPM

02:06:58,189 --> 02:07:04,519
install an NPM start and then you should

02:07:02,300 --> 02:07:07,489
be able to visit localhost 8080 or

02:07:04,519 --> 02:07:11,179
whatever it says on the console if you

02:07:07,489 --> 02:07:13,189
don't get a page shown I seen that on

02:07:11,179 --> 02:07:16,399
some Windows machines that can happen

02:07:13,189 --> 02:07:19,550
then just add a slash index dot HTML to

02:07:16,399 --> 02:07:21,530
the URL sometimes HTTP server doesn't

02:07:19,550 --> 02:07:24,619
automatically redirect you to the

02:07:21,530 --> 02:07:27,079
index.html page I haven't really found

02:07:24,619 --> 02:07:30,169
how to properly solve this so if this

02:07:27,079 --> 02:07:33,260
happens just add slash index dot HTML in

02:07:30,169 --> 02:07:36,439
the end and you should be good if

02:07:33,260 --> 02:07:39,050
everything works all right you can open

02:07:36,439 --> 02:07:41,030
the console and after some seconds you

02:07:39,050 --> 02:07:43,609
should see that console message over

02:07:41,030 --> 02:07:46,280
there runtime ready what that means is

02:07:43,609 --> 02:07:49,070
whether somebody started with open CD in

02:07:46,280 --> 02:07:52,280
it and open CV runtime is ready for you

02:07:49,070 --> 02:07:55,689
we don't do anything yet with it so

02:07:52,280 --> 02:07:59,599
don't worry if you don't see anything

02:07:55,689 --> 02:08:05,050
cool so do you see that les who sees

02:07:59,599 --> 02:08:07,459
that message ok like half of you right

02:08:05,050 --> 02:08:09,349
ok does anybody have like an error

02:08:07,459 --> 02:08:14,379
message or just not there yet

02:08:09,349 --> 02:08:14,379
error messages I'll come and see quickly

02:08:22,640 --> 02:08:28,500
unless each part closed no post one or

02:08:26,940 --> 02:08:30,510
do you have some sort of plug-in up

02:08:28,500 --> 02:08:32,430
there that looks like a plugin issue

02:08:30,510 --> 02:08:36,840
because you see it's not from the main

02:08:32,430 --> 02:08:38,370
chest open it in an incognito window for

02:08:36,840 --> 02:08:41,310
once and see if you get that message

02:08:38,370 --> 02:08:43,830
there - no okay so it's one of your

02:08:41,310 --> 02:08:44,489
plugins don't worry about that who had

02:08:43,830 --> 02:08:50,420
an issue

02:08:44,489 --> 02:08:55,880
- nobody oh cool

02:08:50,420 --> 02:08:55,880
so who sees the console log message now

02:08:57,610 --> 02:09:02,610
if some of you okay not too many let's

02:08:59,830 --> 02:09:06,430
let's wait for another minute

02:09:02,610 --> 02:09:09,090
anybody have exceptions or something are

02:09:06,430 --> 02:09:09,090
you stuck

02:09:11,449 --> 02:09:26,429
corrupted this looks good

02:09:16,489 --> 02:09:27,929
can you try to add / index.html okay

02:09:26,429 --> 02:09:30,389
that's that's that issue that I was

02:09:27,929 --> 02:09:31,949
mentioning so I don't know why so if you

02:09:30,389 --> 02:09:33,750
go to the console now you should see

02:09:31,949 --> 02:09:39,690
that runtime ready know that browser

02:09:33,750 --> 02:09:42,270
comes out sorry perfect yeah it's the

02:09:39,690 --> 02:09:44,849
browser console where that console

02:09:42,270 --> 02:09:50,810
statement should be at at the terminal

02:09:44,849 --> 02:09:53,460
console okay I hope it works freedom

02:09:50,810 --> 02:09:55,469
otherwise when we are at the exercise I

02:09:53,460 --> 02:09:58,619
will come to the people that still have

02:09:55,469 --> 02:10:01,860
issues good so what do we do from here

02:09:58,619 --> 02:10:03,330
right that's not very interesting a very

02:10:01,860 --> 02:10:05,550
short introduction to the protec

02:10:03,330 --> 02:10:08,369
structure we have three main files to

02:10:05,550 --> 02:10:10,679
the relevant in the binary folder you

02:10:08,369 --> 02:10:11,610
have the OpenCV Deshaies file this is

02:10:10,679 --> 02:10:15,119
the compiled

02:10:11,610 --> 02:10:16,969
OpenCV file maybe don't open it there's

02:10:15,119 --> 02:10:19,440
a six megabyte

02:10:16,969 --> 02:10:22,440
base64 encoded string with the complete

02:10:19,440 --> 02:10:24,989
Bassem binary in it it might kill your

02:10:22,440 --> 02:10:26,610
editor depending on what you use you can

02:10:24,989 --> 02:10:31,020
open it you will see a lot of funny

02:10:26,610 --> 02:10:33,929
letters but yeah maybe done and then we

02:10:31,020 --> 02:10:36,060
have the index.html and main show us so

02:10:33,929 --> 02:10:38,219
a nice little web project no build snap

02:10:36,060 --> 02:10:42,889
nothing so I kind of like it already

02:10:38,219 --> 02:10:45,630
cool yeah I think I told you that

02:10:42,889 --> 02:10:48,540
so the difference to what we did before

02:10:45,630 --> 02:10:50,340
this one is not having a battle of the

02:10:48,540 --> 02:10:53,400
score bind chain of the window object

02:10:50,340 --> 02:10:54,989
what we will get is a CD object so

02:10:53,400 --> 02:10:58,070
whenever you want to interact with

02:10:54,989 --> 02:11:00,710
OpenCV we will go over that CV dot

02:10:58,070 --> 02:11:04,340
whatever it is then whatever function we

02:11:00,710 --> 02:11:07,910
cool so let's do our first exercise

02:11:04,340 --> 02:11:09,980
first when we wanna have real-time image

02:11:07,910 --> 02:11:13,670
processing we need some sort of video

02:11:09,980 --> 02:11:18,020
stream right so let's go into WebRTC who

02:11:13,670 --> 02:11:19,960
knows WebRTC okay not too many so I'm

02:11:18,020 --> 02:11:22,460
gonna quickly show quickly go into it

02:11:19,960 --> 02:11:26,630
whatever actually see we can basically

02:11:22,460 --> 02:11:28,910
get streams of audio video or both in

02:11:26,630 --> 02:11:30,590
the browser the idea the basic idea

02:11:28,910 --> 02:11:32,900
where it came from is that he can have

02:11:30,590 --> 02:11:34,430
video chats or audio chats in your

02:11:32,900 --> 02:11:36,410
browser because that stream that you

02:11:34,430 --> 02:11:38,390
have you can send it over the network

02:11:36,410 --> 02:11:41,390
and then it can basically make your own

02:11:38,390 --> 02:11:42,950
Skype if you want to and that is pretty

02:11:41,390 --> 02:11:45,970
much integrated in every browser

02:11:42,950 --> 02:11:48,140
nowadays probably except for ie 11 I

02:11:45,970 --> 02:11:52,100
wouldn't know this is just a random

02:11:48,140 --> 02:11:53,750
guess we won't use that for sending it

02:11:52,100 --> 02:11:56,330
over the net we will just fetch the

02:11:53,750 --> 02:11:59,000
webcam camera off stream so we have a

02:11:56,330 --> 02:12:02,360
stream that we can sample all right that

02:11:59,000 --> 02:12:04,190
we can do image processing this is

02:12:02,360 --> 02:12:06,110
actually not all that hard

02:12:04,190 --> 02:12:08,390
what you do is navigate it of media

02:12:06,110 --> 02:12:11,090
devices this is where it's located up

02:12:08,390 --> 02:12:13,430
and then it can say get user media and

02:12:11,090 --> 02:12:15,890
you have an options object where you can

02:12:13,430 --> 02:12:18,980
say what do you want if you look at the

02:12:15,890 --> 02:12:22,070
documentation these don't have to be

02:12:18,980 --> 02:12:24,110
bullying you actually can add a config

02:12:22,070 --> 02:12:25,820
object so you can say I want the

02:12:24,110 --> 02:12:26,810
front-facing camera I want the back

02:12:25,820 --> 02:12:28,940
facing camera

02:12:26,810 --> 02:12:31,130
I want it in landscape mode I want

02:12:28,940 --> 02:12:34,160
whatever we are just gonna be very

02:12:31,130 --> 02:12:35,660
simple here we say you have one webcam

02:12:34,160 --> 02:12:38,990
stream probably on your notebook

02:12:35,660 --> 02:12:42,080
I guess just give us that that's all we

02:12:38,990 --> 02:12:44,360
need it's a promise we can say then and

02:12:42,080 --> 02:12:45,050
in here we will get this dream that's

02:12:44,360 --> 02:12:47,780
all we want

02:12:45,050 --> 02:12:51,890
cool but what do we do with that stream

02:12:47,780 --> 02:12:54,170
now we can get the video tracks since we

02:12:51,890 --> 02:12:57,140
are a very simple webcam there will be

02:12:54,170 --> 02:12:59,660
one video track so we're just gonna say

02:12:57,140 --> 02:13:02,120
give us that first video track can not

02:12:59,660 --> 02:13:04,340
care about it anymore we will use that

02:13:02,120 --> 02:13:05,610
video track later on you see it down

02:13:04,340 --> 02:13:07,560
here we were

02:13:05,610 --> 02:13:09,780
the width and the height of our video

02:13:07,560 --> 02:13:12,120
stream on there we don't use it from the

02:13:09,780 --> 02:13:14,250
start so don't worry about it

02:13:12,120 --> 02:13:19,770
these are the settings that we get from

02:13:14,250 --> 02:13:22,770
there when you look at the JavaScript

02:13:19,770 --> 02:13:25,740
object you see that on the top two lines

02:13:22,770 --> 02:13:27,840
I have two elements that I get from the

02:13:25,740 --> 02:13:30,540
HTML you can look at them it's a video

02:13:27,840 --> 02:13:32,490
element and the canvas element the first

02:13:30,540 --> 02:13:35,280
element we are going to use is the video

02:13:32,490 --> 02:13:37,200
element so what we can do now the video

02:13:35,280 --> 02:13:40,680
element has a property named source

02:13:37,200 --> 02:13:42,300
object you can just set this dream on to

02:13:40,680 --> 02:13:46,640
the source subject and what will happen

02:13:42,300 --> 02:13:49,740
is you will see yourself yeah

02:13:46,640 --> 02:13:53,160
so let's try to do that get the video

02:13:49,740 --> 02:13:55,740
stream added to the input object a input

02:13:53,160 --> 02:13:58,500
video element and see if you can see

02:13:55,740 --> 02:14:00,240
yourself or if something goes wrong does

02:13:58,500 --> 02:14:03,530
anybody still have problems with running

02:14:00,240 --> 02:14:05,739
the project like basically running it

02:14:03,530 --> 02:14:08,060
cool

02:14:05,739 --> 02:14:09,889
let's just take five minutes or ten

02:14:08,060 --> 02:14:11,330
minutes for that depending on how long

02:14:09,889 --> 02:14:13,960
it takes you but it shouldn't shouldn't

02:14:11,330 --> 02:14:13,960
be too hard

02:14:21,869 --> 02:14:27,780
yeah you have to check out the little

02:14:24,929 --> 02:14:31,710
gate drop out there it's in their fifth

02:14:27,780 --> 02:14:35,670
chapter of the maybe go back to the

02:14:31,710 --> 02:14:37,980
index I think it's at just be exactly

02:14:35,670 --> 02:14:42,030
there that's the fifth one mm-hmm

02:14:37,980 --> 02:14:44,909
but then I think pretty in the first and

02:14:42,030 --> 02:14:48,179
the second one one more and that you can

02:14:44,909 --> 02:14:49,710
go what to the right and then down this

02:14:48,179 --> 02:14:52,730
is to get a rapper that you have to

02:14:49,710 --> 02:14:52,730
check out under this one

02:15:08,400 --> 02:15:11,960
yes there you are

02:15:20,369 --> 02:15:26,579
OSE faces all over the place that's cool

02:15:23,280 --> 02:15:26,579
very good

02:15:28,389 --> 02:15:32,219
anyway yeah

02:15:34,269 --> 02:15:42,579
yeah another face down here

02:15:36,530 --> 02:15:42,579
I like cameras

02:15:52,270 --> 02:15:58,320
it's working for you get easily they

02:15:55,690 --> 02:15:58,320
have unrefined

02:15:58,379 --> 02:16:01,639
don't forget either

02:16:02,380 --> 02:16:05,010
what

02:16:07,010 --> 02:16:10,340
during her

02:16:21,440 --> 02:16:25,429
can you make a hard refresh

02:16:34,900 --> 02:16:41,220
huh

02:16:36,881 --> 02:16:41,220
um how can her

02:16:46,800 --> 02:16:50,870
you should media device about that

02:16:55,030 --> 02:16:58,030
what

02:16:58,149 --> 02:17:00,689
and

02:17:15,770 --> 02:17:21,720
did you oh can you check your our ticket

02:17:19,650 --> 02:17:27,780
settings if room doesn't have access to

02:17:21,720 --> 02:17:31,470
your webcam system security probably I

02:17:27,780 --> 02:17:34,070
guess or ein Gavin oh you have it in

02:17:31,470 --> 02:17:34,070
English right

02:17:34,580 --> 02:17:38,139
that's like accessibility

02:17:39,940 --> 02:17:45,390
oh no this is just if it can use the

02:17:42,790 --> 02:17:45,390
audio stuff

02:17:47,640 --> 02:17:53,970
can you try that in safari quickly Oh -

02:17:51,520 --> 02:17:53,970
the camera

02:17:56,469 --> 02:18:00,569
you have to click on the lock of the

02:17:58,059 --> 02:18:00,569
bonus

02:18:06,170 --> 02:18:13,800
huh this is a real

02:18:10,150 --> 02:18:17,050
the crow should ask you for that I think

02:18:13,800 --> 02:18:18,740
get it try it with Safari that's your

02:18:17,050 --> 02:18:21,309
work

02:18:18,740 --> 02:18:21,309
yeah

02:18:24,960 --> 02:18:29,639
my last example uh-huh

02:18:31,070 --> 02:18:38,330
it's arranged and have your family

02:18:34,510 --> 02:18:41,740
probably because of our memory do you

02:18:38,330 --> 02:18:41,740
have like some sort of loop that is

02:18:44,540 --> 02:18:50,319
we can look at that later on I have to

02:18:47,719 --> 02:18:50,319
move on Oh

02:18:55,550 --> 02:18:58,550
cool

02:18:59,360 --> 02:19:03,510
perfect I see a lot of faces on the

02:19:01,770 --> 02:19:03,660
screens that seems to be working all

02:19:03,510 --> 02:19:06,120
right

02:19:03,660 --> 02:19:09,230
does everybody have some major problems

02:19:06,120 --> 02:19:13,860
with it or does it work for everybody

02:19:09,230 --> 02:19:15,330
working cool okay so that's not really

02:19:13,860 --> 02:19:16,950
what we want to do right that's just

02:19:15,330 --> 02:19:20,160
what we needed to do to get an input

02:19:16,950 --> 02:19:21,809
stream so now we want to have open sea

02:19:20,160 --> 02:19:23,580
view right now we have that input stream

02:19:21,809 --> 02:19:25,230
and now we want to make sure that we

02:19:23,580 --> 02:19:26,070
call our sea library that we just

02:19:25,230 --> 02:19:28,590
cross-compiled

02:19:26,070 --> 02:19:30,150
or we would compile down to Azen now we

02:19:28,590 --> 02:19:32,690
want to really call it and see what

02:19:30,150 --> 02:19:36,929
happens so how do we do that

02:19:32,690 --> 02:19:39,420
luckily OpenCV has a thing called video

02:19:36,929 --> 02:19:43,320
capture that can capture frames from a

02:19:39,420 --> 02:19:46,260
video element very convenient so we can

02:19:43,320 --> 02:19:48,690
say where we have our video and then we

02:19:46,260 --> 02:19:52,530
can say video capture dot read and it

02:19:48,690 --> 02:19:54,660
will read a OpenCV matrix out of that

02:19:52,530 --> 02:19:58,230
image and then we can work in that

02:19:54,660 --> 02:20:00,960
matrix which is cool so this is how it

02:19:58,230 --> 02:20:03,930
looks you need to have a global variable

02:20:00,960 --> 02:20:06,230
cap and then you can instantiate it with

02:20:03,930 --> 02:20:09,420
our input video element we can just say

02:20:06,230 --> 02:20:11,700
CV dot video capture and we can

02:20:09,420 --> 02:20:15,390
instantiate that with new and this is

02:20:11,700 --> 02:20:18,000
how we create our first open CV object

02:20:15,390 --> 02:20:21,960
right so open CV is now instantiating

02:20:18,000 --> 02:20:24,750
that video capture thing for us so this

02:20:21,960 --> 02:20:26,521
is already a very complex type right so

02:20:24,750 --> 02:20:28,950
we can already share that between

02:20:26,521 --> 02:20:29,530
webassembly and JavaScript which is kind

02:20:28,950 --> 02:20:33,250
of fast in

02:20:29,530 --> 02:20:35,620
already so this is how we set it up now

02:20:33,250 --> 02:20:38,050
OpenCV know is there's a video stream

02:20:35,620 --> 02:20:42,130
going on and we just have to pass that

02:20:38,050 --> 02:20:46,780
into OpenCV now that we can actually

02:20:42,130 --> 02:20:48,880
pinch what we need is the output canvas

02:20:46,780 --> 02:20:51,190
needs to have a width in the height we

02:20:48,880 --> 02:20:53,950
want to paint that picture that we get

02:20:51,190 --> 02:20:56,530
from OpenCV onto a canvas now so

02:20:53,950 --> 02:20:59,141
whatever we do on OpenCV we do some

02:20:56,530 --> 02:21:01,391
transformations and whatever in the end

02:20:59,141 --> 02:21:03,101
we can't put that back into the video

02:21:01,391 --> 02:21:07,061
element we have to render that image

02:21:03,101 --> 02:21:09,730
that we just did onto a canvas so I made

02:21:07,061 --> 02:21:11,920
that HTML element already available to

02:21:09,730 --> 02:21:13,980
you it's collage put canvas and you have

02:21:11,920 --> 02:21:17,080
to make sure that the size of the canvas

02:21:13,980 --> 02:21:20,050
matches the size of our stream otherwise

02:21:17,080 --> 02:21:23,710
OpenCV will complain and say well you

02:21:20,050 --> 02:21:25,511
try to paint a matrix onto a canvas and

02:21:23,710 --> 02:21:28,391
they are not the same size this doesn't

02:21:25,511 --> 02:21:31,950
work so it's important that we set width

02:21:28,391 --> 02:21:31,950
and height of our canvas

02:21:32,669 --> 02:21:40,390
then we need two matrices one is the

02:21:37,779 --> 02:21:43,119
source matrix this is what we get out of

02:21:40,390 --> 02:21:46,270
the video stream and the other is the

02:21:43,119 --> 02:21:48,249
destination matrix in between we will do

02:21:46,270 --> 02:21:51,249
some conversion on that mail image right

02:21:48,249 --> 02:21:53,560
so we read a matrix transform it into a

02:21:51,249 --> 02:21:56,619
destination matrix paint that

02:21:53,560 --> 02:21:58,689
destination matrix onto our canvas this

02:21:56,619 --> 02:22:02,409
is the steps you are gonna do this is

02:21:58,689 --> 02:22:03,789
just how you instantiate them also make

02:22:02,409 --> 02:22:05,470
sure that we do that in that start

02:22:03,789 --> 02:22:07,720
streaming function we don't want to

02:22:05,470 --> 02:22:10,359
create a new matrix with every frame

02:22:07,720 --> 02:22:13,270
right this is not fun because that would

02:22:10,359 --> 02:22:15,760
be heavy on the memory we can always

02:22:13,270 --> 02:22:18,989
reuse the last matrix right we don't

02:22:15,760 --> 02:22:21,399
have to do a new matrix all the time

02:22:18,989 --> 02:22:24,300
yeah also here it's important that

02:22:21,399 --> 02:22:27,340
height and width are really correct and

02:22:24,300 --> 02:22:32,709
behind well in the end of that line you

02:22:27,340 --> 02:22:35,560
can see these two values of OpenCV what

02:22:32,709 --> 02:22:40,029
I mean is you have heard that already

02:22:35,560 --> 02:22:42,760
8-bit unsigned int is 8u and c4 means

02:22:40,029 --> 02:22:44,970
how many channels we have when we read

02:22:42,760 --> 02:22:49,029
from our webcam we get four channels

02:22:44,970 --> 02:22:52,090
basically it's RGB and a alpha Channel

02:22:49,029 --> 02:22:54,069
so this is what we get in and now for

02:22:52,090 --> 02:22:57,100
our first exercise we're going to do a

02:22:54,069 --> 02:22:59,229
grayscale so we reduce from four

02:22:57,100 --> 02:23:01,779
channels to one channel that is only

02:22:59,229 --> 02:23:03,879
gray we will remove all the colors that

02:23:01,779 --> 02:23:06,280
is our first easy exercise that we're

02:23:03,879 --> 02:23:08,190
going to try

02:23:06,280 --> 02:23:11,320
yeah

02:23:08,190 --> 02:23:14,261
so we have four things that we have to

02:23:11,320 --> 02:23:16,120
do we saw it earlier we set up the video

02:23:14,261 --> 02:23:18,610
capture and two matrixes that is already

02:23:16,120 --> 02:23:21,730
cool now we have to have some sort of

02:23:18,610 --> 02:23:24,761
painting loop right so we have to read

02:23:21,730 --> 02:23:27,730
from the video capture then we convert

02:23:24,761 --> 02:23:30,190
to grayscale and then we draw to the

02:23:27,730 --> 02:23:32,410
canvas and then we call us again and

02:23:30,190 --> 02:23:34,950
then we have our basic animation loop

02:23:32,410 --> 02:23:37,900
that will fetch from the video stream

02:23:34,950 --> 02:23:41,221
grayscale all the things to draw onto

02:23:37,900 --> 02:23:43,780
the canvas so how does that look like

02:23:41,221 --> 02:23:47,230
the video capture is actually super easy

02:23:43,780 --> 02:23:49,540
is a dot read and hand in the source

02:23:47,230 --> 02:23:52,181
matrix so what it will do it will

02:23:49,540 --> 02:23:54,490
transform that image to a matrix so now

02:23:52,181 --> 02:23:58,601
our source matrix has an image in it

02:23:54,490 --> 02:24:02,320
cool then we convert the color so OpenCV

02:23:58,601 --> 02:24:05,230
has a method called convert : so we say

02:24:02,320 --> 02:24:07,840
we go from the source matrix we will

02:24:05,230 --> 02:24:10,090
write into the destination matrix and

02:24:07,840 --> 02:24:13,320
this is the color transformation that

02:24:10,090 --> 02:24:20,440
you have to apply we go from RGB a to

02:24:13,320 --> 02:24:24,190
grayscale and last but not least we make

02:24:20,440 --> 02:24:26,410
an E and show it's called I am sure we

02:24:24,190 --> 02:24:29,050
have to input the canvas element here so

02:24:26,410 --> 02:24:32,200
OpenCV knows about that canvas element

02:24:29,050 --> 02:24:34,931
and we say which matrix should be

02:24:32,200 --> 02:24:37,660
printed onto our drawn onto that canvas

02:24:34,931 --> 02:24:41,440
and since the destination matrix is now

02:24:37,660 --> 02:24:42,771
our grayscale matrix this is what we

02:24:41,440 --> 02:24:47,330
want to do

02:24:42,771 --> 02:24:51,860
and Indians loop it

02:24:47,330 --> 02:24:55,230
who knows requestanimationframe in here

02:24:51,860 --> 02:24:58,200
cool cool ok so for the ones that don't

02:24:55,230 --> 02:25:01,200
know it we can ask the browser to call

02:24:58,200 --> 02:25:03,900
us in 60 frames per second if possible

02:25:01,200 --> 02:25:06,030
this is that function we can hand in the

02:25:03,900 --> 02:25:09,150
function and the browser will schedule

02:25:06,030 --> 02:25:11,880
us and we'll try to call us every what

02:25:09,150 --> 02:25:14,400
is it 13 milliseconds so we have 60

02:25:11,880 --> 02:25:16,830
frames per second if that doesn't work

02:25:14,400 --> 02:25:19,920
if we are too slow he will just schedule

02:25:16,830 --> 02:25:22,860
us as fast as he can without blocking

02:25:19,920 --> 02:25:24,570
his rendering loop so this is just a way

02:25:22,860 --> 02:25:26,730
that the browser makes sure we are not

02:25:24,570 --> 02:25:29,730
spamming user interaction between

02:25:26,730 --> 02:25:33,540
browser and JavaScript so in the end of

02:25:29,730 --> 02:25:36,480
our function we can say okay we are done

02:25:33,540 --> 02:25:38,820
now please reschedule us we want to draw

02:25:36,480 --> 02:25:43,950
again and then the browser will will let

02:25:38,820 --> 02:25:45,391
us draw again yeah this is it so you

02:25:43,950 --> 02:25:48,271
have all the codes you need for the

02:25:45,391 --> 02:25:50,700
exercise put it together and see if you

02:25:48,271 --> 02:25:55,400
get a greyscale image of yourself on the

02:25:50,700 --> 02:25:55,400
right side let's say 10 minutes for now

02:26:10,960 --> 02:26:15,250
exactly it has to be yet

02:26:19,200 --> 02:26:26,070
mm-hm we can set that up here you don't

02:26:22,021 --> 02:26:27,570
have to do it in the in the loop but you

02:26:26,070 --> 02:26:29,550
can do it in the loop but you don't have

02:26:27,570 --> 02:26:32,510
to that's work you need to do once right

02:26:29,550 --> 02:26:32,510
and that it's good yeah

02:26:34,040 --> 02:26:42,260
oh yeah I would do let's see the

02:26:40,399 --> 02:26:44,060
initialization of these things you can

02:26:42,260 --> 02:26:46,970
also do up here right you don't you only

02:26:44,060 --> 02:26:49,100
have to have to do that once Jesus

02:26:46,970 --> 02:26:50,750
messaging I don't believe these martyrs

02:26:49,100 --> 02:26:52,810
capture well I just tell you stuck

02:26:50,750 --> 02:26:55,310
actually yeah yeah this is we do

02:26:52,810 --> 02:26:57,439
initialize all the opencv objects that

02:26:55,310 --> 02:26:59,720
we use yeah and this is the function we

02:26:57,439 --> 02:27:02,960
want to repeatedly call now right so

02:26:59,720 --> 02:27:05,359
these actually do actual reading exactly

02:27:02,960 --> 02:27:08,359
this is what we do when for each frame

02:27:05,359 --> 02:27:08,960
right that we can so this part should be

02:27:08,359 --> 02:27:11,060
in here

02:27:08,960 --> 02:27:13,279
you should call it from here once but

02:27:11,060 --> 02:27:16,279
that function should stand somewhere on

02:27:13,279 --> 02:27:19,340
its own like outside of your context for

02:27:16,279 --> 02:27:25,700
example that's why we save these things

02:27:19,340 --> 02:27:30,200
into the global scope okay so funny

02:27:25,700 --> 02:27:31,700
inside yeah it will work it will work so

02:27:30,200 --> 02:27:33,950
we can leave it in there if you want to

02:27:31,700 --> 02:27:35,840
the only relevant thing is that inside

02:27:33,950 --> 02:27:37,939
the function you have to call that

02:27:35,840 --> 02:27:40,580
window requestanimationframe again right

02:27:37,939 --> 02:27:44,060
because like this you will only be

02:27:40,580 --> 02:27:49,930
called once and you have to tell the

02:27:44,060 --> 02:27:49,930
browser yeah okay that should work

02:28:00,750 --> 02:28:08,181
kinds of input monster-sized should be

02:28:03,030 --> 02:28:08,181
the same as to video so let me see

02:28:19,000 --> 02:28:26,290
Oh Oh you have to do that after you set

02:28:22,000 --> 02:28:28,180
the stream because before that it will

02:28:26,290 --> 02:28:29,830
not oh no no no I should work

02:28:28,180 --> 02:28:32,660
you should work you're right sorry I'm

02:28:29,830 --> 02:28:35,510
getting the value from

02:28:32,660 --> 02:28:35,990
the video track here that should be

02:28:35,510 --> 02:28:41,870
alright

02:28:35,990 --> 02:28:44,240
yes you're right can you try to set the

02:28:41,870 --> 02:28:46,100
width and height of the input video as

02:28:44,240 --> 02:28:51,800
well the same way you do it up there

02:28:46,100 --> 02:28:56,090
just for the input a video yeah no no

02:28:51,800 --> 02:28:57,229
just copy duplicate right right below

02:28:56,090 --> 02:29:00,410
them is yeah

02:28:57,229 --> 02:29:06,350
no no right below right here

02:29:00,410 --> 02:29:08,840
so here and now do it on the input video

02:29:06,350 --> 02:29:10,850
instead of the output canvas so both are

02:29:08,840 --> 02:29:14,030
set to the same size you know the input

02:29:10,850 --> 02:29:22,540
video is the video element right try to

02:29:14,030 --> 02:29:22,540
do it there yeah yes okay try that

02:29:26,210 --> 02:29:30,310
it's okay yeah

02:29:34,130 --> 02:29:40,890
so there are two lines of codes missing

02:29:37,140 --> 02:29:43,320
I am very sorry I made that example up

02:29:40,890 --> 02:29:47,820
here that you have to set the canvas bit

02:29:43,320 --> 02:29:50,160
and hang I forgot to mention here you

02:29:47,820 --> 02:29:52,620
have to do the same on the input video

02:29:50,160 --> 02:29:54,810
element otherwise OpenCV will complain

02:29:52,620 --> 02:29:58,110
and say your video is not the same as

02:29:54,810 --> 02:30:01,230
your canvas so you have to do these two

02:29:58,110 --> 02:30:03,600
lines for the input video as well you

02:30:01,230 --> 02:30:05,960
can do it on the same spot sorry I

02:30:03,600 --> 02:30:05,960
forgot that

02:30:49,240 --> 02:31:03,910
oh it's black black why is it black what

02:30:55,030 --> 02:31:07,510
happens o your own function oh you need

02:31:03,910 --> 02:31:09,640
to do it this part in one specific

02:31:07,510 --> 02:31:12,100
function that can call itself again

02:31:09,640 --> 02:31:15,340
right you can do that outside whatever

02:31:12,100 --> 02:31:18,720
you want there can say like processed

02:31:15,340 --> 02:31:18,720
video or something Oh

02:31:24,190 --> 02:31:26,760
yeah

02:31:27,270 --> 02:31:33,869
exactly and then I can

02:31:30,789 --> 02:31:37,359
you need to put that into here as well

02:31:33,869 --> 02:31:38,529
the function right you have to exact

02:31:37,359 --> 02:31:41,489
perfect

02:31:38,529 --> 02:31:41,489
that's your work

02:31:42,311 --> 02:31:48,370
yes there you go yeah yeah

02:31:50,869 --> 02:32:00,779
okay where are you let me quickly see so

02:31:58,260 --> 02:32:02,729
the width and the height you can get

02:32:00,779 --> 02:32:05,909
from these settings settings has width

02:32:02,729 --> 02:32:10,829
and height on it so maybe do all of

02:32:05,909 --> 02:32:12,750
these things up here like until cap

02:32:10,829 --> 02:32:15,689
reads like this whole block you don't

02:32:12,750 --> 02:32:17,729
you only have to do once so you don't

02:32:15,689 --> 02:32:20,600
need to do that and they can really

02:32:17,729 --> 02:32:23,520
capture too you can do that up there

02:32:20,600 --> 02:32:27,140
this one yeah so you only need this in

02:32:23,520 --> 02:32:27,140
your actual function

02:32:27,529 --> 02:32:34,299
yeah and then you can go for a setting

02:32:30,409 --> 02:32:38,569
start with ya and settings tonight

02:32:34,299 --> 02:32:40,489
exactly perfect okay so that looks good

02:32:38,569 --> 02:32:42,289
now we just have to make sure that that

02:32:40,489 --> 02:32:44,629
window requestanimationframe is inside

02:32:42,289 --> 02:32:46,249
your function because you want at the

02:32:44,629 --> 02:32:50,379
end when you are done right you want it

02:32:46,249 --> 02:32:50,379
to be cold again cool try it

02:32:52,820 --> 02:33:00,271
Oh doesn't allow you to do that okay

02:32:56,771 --> 02:33:03,340
okay almost do we get an error message

02:33:00,271 --> 02:33:05,610
nothing so can you show me the function

02:33:03,340 --> 02:33:05,610
again

02:33:08,271 --> 02:33:21,851
that looks good we have cells for

02:33:13,700 --> 02:33:21,851
Charles this actually looks good

02:33:22,060 --> 02:33:29,489
I don't see your issue see get back to

02:33:25,839 --> 02:33:32,129
default yeah that's good with Heights

02:33:29,489 --> 02:33:34,830
you're doing it the right way

02:33:32,129 --> 02:33:37,320
huh

02:33:34,830 --> 02:33:40,040
you can't currently see what issues any

02:33:37,320 --> 02:33:40,040
real of the rats

02:33:45,820 --> 02:33:51,189
huh

02:33:47,710 --> 02:33:53,560
can you try it this is are you using

02:33:51,189 --> 02:33:55,500
Chrome or Firefox

02:33:53,560 --> 02:33:59,439
can you try anything Crump just for a

02:33:55,500 --> 02:34:01,810
quick try not that it should it should

02:33:59,439 --> 02:34:03,399
work for for Firefox as well just want

02:34:01,810 --> 02:34:06,250
to make sure that this is not some weird

02:34:03,399 --> 02:34:09,970
bug okay cool we are having an actual

02:34:06,250 --> 02:34:13,960
error but I don't see it currently so

02:34:09,970 --> 02:34:17,109
input video is the capture you have

02:34:13,960 --> 02:34:24,149
video hide video wait settings with

02:34:17,109 --> 02:34:24,149
something's I have to make rush you

02:34:24,800 --> 02:34:32,180
huh no you don't have to do anything on

02:34:28,970 --> 02:34:34,420
the HTML or you shouldn't shouldn't host

02:34:32,180 --> 02:34:34,420
it

02:34:38,699 --> 02:34:43,870
that looks all good

02:34:40,991 --> 02:34:46,950
kappa source test

02:34:43,870 --> 02:34:46,950
process already

02:34:47,080 --> 02:34:55,990
you go down again like justice right so

02:34:51,280 --> 02:34:59,050
you be color RGB a to gray oh oh it's to

02:34:55,990 --> 02:35:02,819
grayscale I think isn't it can you check

02:34:59,050 --> 02:35:02,819
under or did you copy it

02:35:05,921 --> 02:35:10,961
this one no it's that one huh that's

02:35:09,891 --> 02:35:15,110
weird

02:35:10,961 --> 02:35:17,541
can you put it in my opinion you're

02:35:15,110 --> 02:35:19,681
doing the right thing yeah I don't see

02:35:17,541 --> 02:35:21,440
you later

02:35:19,681 --> 02:35:23,910
and I can't really know that

02:35:21,440 --> 02:35:26,040
unfortunately you see it in the browser

02:35:23,910 --> 02:35:30,780
though if you go to the Patriot have it

02:35:26,040 --> 02:35:33,891
open and you enter CV dealt color oh you

02:35:30,780 --> 02:35:33,891
have to write it and small

02:35:34,690 --> 02:35:37,690
RGBA

02:35:38,891 --> 02:35:41,610
hmm

02:35:47,939 --> 02:35:50,870
this is mute

02:35:52,590 --> 02:35:56,399
I'll have to continue and there's a

02:35:54,449 --> 02:36:03,960
branch if the solution we can then look

02:35:56,399 --> 02:36:07,229
at it what is it what happens okay so I

02:36:03,960 --> 02:36:12,029
hope most of you have gotten it to work

02:36:07,229 --> 02:36:14,369
somehow I included a solutions branch so

02:36:12,029 --> 02:36:17,250
if you check out the branch solution

02:36:14,369 --> 02:36:19,050
grayscale it will do the code than you

02:36:17,250 --> 02:36:21,630
need and it should work for you all so

02:36:19,050 --> 02:36:25,770
what do you have to do oh this is a bit

02:36:21,630 --> 02:36:29,220
small can you read that so good so what

02:36:25,770 --> 02:36:31,290
you needed to do is I did the specific

02:36:29,220 --> 02:36:33,479
pixel risk you could omit the pixel

02:36:31,290 --> 02:36:35,640
because the browser is thinking that you

02:36:33,479 --> 02:36:40,800
need pixels when you don't say anything

02:36:35,640 --> 02:36:43,399
so there's pixel height and we set that

02:36:40,800 --> 02:36:47,760
on the input video and the output canvas

02:36:43,399 --> 02:36:50,010
we said it on the source object display

02:36:47,760 --> 02:36:52,170
that I added in is basically for iOS

02:36:50,010 --> 02:36:55,350
Safari because Safari is very

02:36:52,170 --> 02:36:57,720
restrictive about how to apply auto

02:36:55,350 --> 02:36:59,939
playing videos so you don't need that

02:36:57,720 --> 02:37:04,020
specifically I added it in that it works

02:36:59,939 --> 02:37:06,720
on most browsers then we have the matrix

02:37:04,020 --> 02:37:10,380
settings as you seen them the video

02:37:06,720 --> 02:37:13,319
captures set up and then we say go ahead

02:37:10,380 --> 02:37:15,510
process video so what do you see here I

02:37:13,319 --> 02:37:18,540
have a little I have added a little

02:37:15,510 --> 02:37:21,540
something in iframe counter so you would

02:37:18,540 --> 02:37:24,180
go with read converter color show and

02:37:21,540 --> 02:37:27,050
then requestanimationframe again so

02:37:24,180 --> 02:37:33,810
let's let's just look at it right um

02:37:27,050 --> 02:37:36,569
let's go for localhost 8080 voila this

02:37:33,810 --> 02:37:39,540
is how it should look like hello and you

02:37:36,569 --> 02:37:44,069
see up here we are getting 60 frames per

02:37:39,540 --> 02:37:45,869
second well 59 frames per second this is

02:37:44,069 --> 02:37:47,899
what it should look like so that's a

02:37:45,869 --> 02:37:50,430
very easy example I mean gray scaling

02:37:47,899 --> 02:37:53,180
isn't supposed to take a lot of

02:37:50,430 --> 02:37:53,180
processing power

02:37:53,350 --> 02:38:00,850
but we can do something else that does

02:37:56,229 --> 02:38:04,390
so let's look at that now let's go to

02:38:00,850 --> 02:38:06,520
that oh yeah memory leaks we are in see

02:38:04,390 --> 02:38:10,300
so we have a lot of gels with memory

02:38:06,520 --> 02:38:13,180
leaks now since we start when the

02:38:10,300 --> 02:38:15,580
webpage loads up and we end when the

02:38:13,180 --> 02:38:18,729
webpage is closed we don't need to care

02:38:15,580 --> 02:38:21,159
as much but usually all these objects

02:38:18,729 --> 02:38:23,050
the matrices have a delete function on

02:38:21,159 --> 02:38:24,460
them if you don't need them anymore you

02:38:23,050 --> 02:38:26,680
would actually have to call delete

02:38:24,460 --> 02:38:28,359
because yeah it's C right we have to

02:38:26,680 --> 02:38:32,619
free memory it won't be garbage

02:38:28,359 --> 02:38:36,159
collected yeah but in our example we

02:38:32,619 --> 02:38:38,800
won't have to care about that as much so

02:38:36,159 --> 02:38:43,060
let's come to the fun part right so we

02:38:38,800 --> 02:38:45,159
have a stream we have open CV an open CV

02:38:43,060 --> 02:38:46,869
can handle classifiers if you have been

02:38:45,159 --> 02:38:49,869
at the talk yesterday I think it was

02:38:46,869 --> 02:38:52,479
about classifiers that can detect is it

02:38:49,869 --> 02:38:55,119
a cat or a dog we will use a classifier

02:38:52,479 --> 02:38:57,850
that can detect is it a face or is it

02:38:55,119 --> 02:39:00,159
not a face it's not the best classifier

02:38:57,850 --> 02:39:03,580
so you will be able to fool it somehow

02:39:00,159 --> 02:39:07,239
but it is an OK classifier so that's the

02:39:03,580 --> 02:39:08,979
first thing we need classifier then we

02:39:07,239 --> 02:39:11,020
need to run that classifier with each

02:39:08,979 --> 02:39:12,970
frame we already have set up that loop

02:39:11,020 --> 02:39:14,770
now right and if it didn't work for you

02:39:12,970 --> 02:39:20,020
check out the solution branch then you

02:39:14,770 --> 02:39:22,000
have dances that loop set up then we get

02:39:20,020 --> 02:39:24,850
a vector which is basically an array

02:39:22,000 --> 02:39:27,729
right so we can go through this vector

02:39:24,850 --> 02:39:32,619
with faces and draw these as rectangles

02:39:27,729 --> 02:39:35,470
on our video stream the classifier that

02:39:32,619 --> 02:39:37,479
we're going to use is called har cascade

02:39:35,470 --> 02:39:40,090
classifier that's a pre trained

02:39:37,479 --> 02:39:42,340
classifier I haven't done that this is

02:39:40,090 --> 02:39:44,529
from OpenCV they provide that that's

02:39:42,340 --> 02:39:47,350
like a standard classifier for you to

02:39:44,529 --> 02:39:48,970
choose so we don't have to train that

02:39:47,350 --> 02:39:49,681
right we don't want to Train it to you

02:39:48,970 --> 02:39:51,960
we don't

02:39:49,681 --> 02:39:54,721
for now so we can just take that

02:39:51,960 --> 02:39:57,690
pre-trained one then we load that it's

02:39:54,721 --> 02:39:59,431
an XML and we give it to open CV you

02:39:57,690 --> 02:40:01,500
don't have to do that because it's a bit

02:39:59,431 --> 02:40:04,891
cumbersome we have to fetch it make a

02:40:01,500 --> 02:40:07,141
byte array input into open CV I already

02:40:04,891 --> 02:40:11,790
did that for you and I did it on a

02:40:07,141 --> 02:40:14,431
branch called exercise face detection so

02:40:11,790 --> 02:40:19,681
when you start this exercise checkout

02:40:14,431 --> 02:40:22,200
exercise face detection so what we have

02:40:19,681 --> 02:40:24,450
to care about now is we run the

02:40:22,200 --> 02:40:27,000
classifier the classifier is designed to

02:40:24,450 --> 02:40:31,530
run on a grayscale image so you already

02:40:27,000 --> 02:40:34,051
know how that works but with the end

02:40:31,530 --> 02:40:36,330
result let me show you the end result so

02:40:34,051 --> 02:40:38,670
there's also a solution face detection

02:40:36,330 --> 02:40:39,330
please don't go right there that won't

02:40:38,670 --> 02:40:41,730
be fun

02:40:39,330 --> 02:40:44,341
but we will do it now that you see what

02:40:41,730 --> 02:40:49,320
we are trying to achieve at least so

02:40:44,341 --> 02:40:51,120
let's go on there so here you see oh you

02:40:49,320 --> 02:40:54,150
see there is actually up something up

02:40:51,120 --> 02:40:58,650
there that looks oh he recognizes my

02:40:54,150 --> 02:40:59,160
face over up here that's cool oh he's

02:40:58,650 --> 02:41:00,990
not so sure

02:40:59,160 --> 02:41:04,170
oh now he's pretty sure but this is also

02:41:00,990 --> 02:41:06,450
a face so you see it's not the best face

02:41:04,170 --> 02:41:07,051
detection algorithm but it's okay it's

02:41:06,450 --> 02:41:09,780
okay

02:41:07,051 --> 02:41:12,841
so we don't want this image to be

02:41:09,780 --> 02:41:14,940
grayscale right that wouldn't be fun so

02:41:12,841 --> 02:41:17,521
what we have to care for is that we have

02:41:14,940 --> 02:41:19,440
a new matrix that is not grayscale

02:41:17,521 --> 02:41:21,570
because that crazy can one we use for

02:41:19,440 --> 02:41:25,500
the classifier so we will have a third

02:41:21,570 --> 02:41:27,360
matrix that is just to show to the users

02:41:25,500 --> 02:41:30,150
that is looking cool right that has all

02:41:27,360 --> 02:41:32,670
four channels on it so we need to we

02:41:30,150 --> 02:41:37,440
basically need a copy of our source

02:41:32,670 --> 02:41:40,440
matrix for that so this is how we can

02:41:37,440 --> 02:41:43,449
copy a matrix nothing very fancy around

02:41:40,440 --> 02:41:45,100
here this matrix for the grayscale with

02:41:43,449 --> 02:41:47,409
have to initialize with height and width

02:41:45,100 --> 02:41:50,319
because we are not growing it going to

02:41:47,409 --> 02:41:53,169
put it on the canvas or read it from the

02:41:50,319 --> 02:41:55,569
camera so we will get the source matrix

02:41:53,169 --> 02:41:59,589
in here and it will get the size of that

02:41:55,569 --> 02:42:01,629
source matrix just inherently so this is

02:41:59,589 --> 02:42:04,569
basically what we do instead of from

02:42:01,629 --> 02:42:07,869
source to destination we go from that

02:42:04,569 --> 02:42:10,689
copy its destination thing to gray that

02:42:07,869 --> 02:42:16,060
new matrix that we just initialized up

02:42:10,689 --> 02:42:18,729
here just one more matrix then we need

02:42:16,060 --> 02:42:21,159
to instantiate a vector where our

02:42:18,729 --> 02:42:24,609
algorithm will put the faces in so we

02:42:21,159 --> 02:42:26,770
know what faces he found and this is how

02:42:24,609 --> 02:42:28,689
the classifier is done wrong you can

02:42:26,770 --> 02:42:31,119
look at the bottom this is where you see

02:42:28,689 --> 02:42:32,770
how the classifier is accentuated but

02:42:31,119 --> 02:42:34,869
it's a bit cumbersome so don't worry

02:42:32,770 --> 02:42:37,689
about that we have to load the XML files

02:42:34,869 --> 02:42:40,600
and everything so this is just a new

02:42:37,689 --> 02:42:43,779
classifier with that XML file that we

02:42:40,600 --> 02:42:45,909
just loaded detect multiscale so it will

02:42:43,779 --> 02:42:49,180
scale the image and multiple factors and

02:42:45,909 --> 02:42:52,600
try to see which faces are real faces on

02:42:49,180 --> 02:42:57,119
all scaling factors so he is pretty sure

02:42:52,600 --> 02:43:00,310
that this is a face the values down here

02:42:57,119 --> 02:43:01,989
at the end here these are values that

02:43:00,310 --> 02:43:04,689
probably people that have actual

02:43:01,989 --> 02:43:06,759
experience in image processing can tell

02:43:04,689 --> 02:43:08,709
you more about I don't know them very

02:43:06,759 --> 02:43:11,739
well these are just like default values

02:43:08,709 --> 02:43:16,810
to have a basic face detection algorithm

02:43:11,739 --> 02:43:19,659
running so when we do that here you see

02:43:16,810 --> 02:43:23,259
that we put in that faces vector after

02:43:19,659 --> 02:43:25,719
this one run that face vector has faces

02:43:23,259 --> 02:43:28,329
on it so we just need to look through

02:43:25,719 --> 02:43:31,390
that lecture and paint these faces easy

02:43:28,329 --> 02:43:34,299
as that this will look something like

02:43:31,390 --> 02:43:36,129
this since this is a sea of check now

02:43:34,299 --> 02:43:38,420
right that that vector is not a

02:43:36,129 --> 02:43:42,770
JavaScript object

02:43:38,420 --> 02:43:45,550
arrey you can't do that for each dot map

02:43:42,770 --> 02:43:48,590
or dot filter so you have to do a

02:43:45,550 --> 02:43:53,120
classical for loop over it get the size

02:43:48,590 --> 02:43:57,380
with dot size and get the face with that

02:43:53,120 --> 02:44:01,899
in the x-axis I face have four things on

02:43:57,380 --> 02:44:04,970
it XY where it is and width and height

02:44:01,899 --> 02:44:08,540
so we only have to draw a rectangle with

02:44:04,970 --> 02:44:11,930
open CV this is called CV dot rectangle

02:44:08,540 --> 02:44:14,060
this is how it will look like we draw it

02:44:11,930 --> 02:44:15,920
on the destination matrix so we will

02:44:14,060 --> 02:44:19,460
make a rectangle on the destination

02:44:15,920 --> 02:44:23,239
matrix we need two points here I gave

02:44:19,460 --> 02:44:25,909
you the code for a one point this is top

02:44:23,239 --> 02:44:30,050
left how you get to the bottom right is

02:44:25,909 --> 02:44:33,620
your exercise and this is the color RGB

02:44:30,050 --> 02:44:38,149
a so this will be red you can do

02:44:33,620 --> 02:44:41,479
whatever color you want to there one one

02:44:38,149 --> 02:44:44,689
small notes I scaled down the inputs to

02:44:41,479 --> 02:44:47,330
320 pixels this is where the algorithm

02:44:44,689 --> 02:44:48,890
works best usually you wouldn't do that

02:44:47,330 --> 02:44:51,250
visibly to the user

02:44:48,890 --> 02:44:53,960
you would take the matrix scale it down

02:44:51,250 --> 02:44:56,630
internally give it to the classifier and

02:44:53,960 --> 02:44:59,630
then scale up the rectangles again and

02:44:56,630 --> 02:45:01,850
put out the output destination matrix

02:44:59,630 --> 02:45:06,080
would be full scale again so the user

02:45:01,850 --> 02:45:08,779
has best possible resolution but this is

02:45:06,080 --> 02:45:10,819
just more code so what I did is just I

02:45:08,779 --> 02:45:15,050
cropped the whole inputs that's in the

02:45:10,819 --> 02:45:19,300
input matrix to 320 pixels that's not

02:45:15,050 --> 02:45:23,060
very nice but it is fast and performant

02:45:19,300 --> 02:45:25,640
yeah so you can go to the exercise face

02:45:23,060 --> 02:45:27,880
detection branch and try to get that up

02:45:25,640 --> 02:45:27,880
and running

02:45:28,390 --> 02:45:34,790
and you also can try to fiddle a bit

02:45:31,580 --> 02:45:37,760
with parameters and colors and you can

02:45:34,790 --> 02:45:40,040
also do circles if you want to draw a

02:45:37,760 --> 02:45:42,710
circle around the face whatever you like

02:45:40,040 --> 02:45:45,800
to if you want to check it out

02:45:42,710 --> 02:45:47,990
I deployed the solution of the cloud so

02:45:45,800 --> 02:45:51,230
we can go onto here and you can try it

02:45:47,990 --> 02:45:53,500
out so you see what you should be aiming

02:45:51,230 --> 02:45:53,500
for

02:46:22,580 --> 02:46:26,779
yeah tell me

02:46:30,030 --> 02:46:36,110
I do not miss men's their tightness

02:46:32,610 --> 02:46:36,110
metal do yes

02:46:37,670 --> 02:46:44,340
look yeah the problem is you try to read

02:46:41,431 --> 02:46:48,721
the matrix here but you're setting the

02:46:44,340 --> 02:46:50,070
width and height here so this is after

02:46:48,721 --> 02:46:51,990
it reads so here it will throw an

02:46:50,070 --> 02:46:54,170
exception because it has no width and

02:46:51,990 --> 02:46:54,170
height

02:47:13,010 --> 02:47:18,420
exactly that's can you go back to your

02:47:16,200 --> 02:47:21,210
this is the problem you see you are

02:47:18,420 --> 02:47:24,720
reading and while reading is as there is

02:47:21,210 --> 02:47:28,820
no there is no size on it so you have to

02:47:24,720 --> 02:47:28,820
do that I'm here somewhere

02:47:30,910 --> 02:47:35,980
yeah

02:47:33,381 --> 02:47:35,980
cool

02:47:38,021 --> 02:47:44,200
here you need a dollar in front of the

02:47:40,570 --> 02:47:48,431
yeah exactly

02:47:44,200 --> 02:47:52,540
and they're too cool so this should work

02:47:48,431 --> 02:47:56,730
oh wait wait a second can you go back

02:47:52,540 --> 02:47:56,730
across this video where is the function

02:47:57,570 --> 02:48:06,390
oh yeah you have to put this part into

02:48:03,840 --> 02:48:08,310
that function right this is the one that

02:48:06,390 --> 02:48:10,590
loops all the time you don't want to do

02:48:08,310 --> 02:48:13,200
all that right all the time we just want

02:48:10,590 --> 02:48:17,330
to do d3 so maybe make a new function

02:48:13,200 --> 02:48:17,330
down here or something and put these in

02:48:20,440 --> 02:48:24,051
no.11

02:48:21,741 --> 02:48:26,230
yep exactly all this needs to be in

02:48:24,051 --> 02:48:26,230
there

02:48:39,249 --> 02:48:44,180
exactly

02:48:41,540 --> 02:48:46,010
and put that in perfect and now we just

02:48:44,180 --> 02:48:48,050
have to call it once from up here so

02:48:46,010 --> 02:48:52,630
that it actually initializes the the

02:48:48,050 --> 02:48:52,630
loop and this don't work Oh

02:49:07,721 --> 02:49:12,660
Oh what did it say

02:49:10,290 --> 02:49:16,560
huh

02:49:12,660 --> 02:49:18,840
oh you mean because of caching I don't

02:49:16,560 --> 02:49:20,910
think so that let's see again your code

02:49:18,840 --> 02:49:24,420
I think there's just probably just

02:49:20,910 --> 02:49:25,590
something very small a window that was

02:49:24,420 --> 02:49:28,590
settings sorry

02:49:25,590 --> 02:49:32,790
settings start with not window you have

02:49:28,590 --> 02:49:35,130
to take the stream yeah I think I will

02:49:32,790 --> 02:49:39,020
do the quest now because people are kind

02:49:35,130 --> 02:49:39,020
of leaving already so we can get to

02:49:41,819 --> 02:49:50,520
I already showed it huh well oh yeah I

02:49:46,379 --> 02:49:54,020
can yeah and hop hop hop

02:49:50,520 --> 02:49:55,660
Oh No where is it what does it say

02:49:54,020 --> 02:49:59,040
kidding

02:49:55,660 --> 02:49:59,040
I am sorry maybe

02:50:04,619 --> 02:50:09,369
no no no you don't need to restart our

02:50:07,210 --> 02:50:11,880
episode that's just a static web server

02:50:09,369 --> 02:50:11,880
he does nothing

02:50:16,990 --> 02:50:21,730
can you go into the main chairs quickly

02:50:21,829 --> 02:50:29,479
if you go to sources oh yeah yeah this

02:50:26,449 --> 02:50:31,189
is definitely the newest code right okay

02:50:29,479 --> 02:50:34,879
so let's go back to the code we missed

02:50:31,189 --> 02:50:37,779
one height or not one whistle infant

02:50:34,879 --> 02:50:37,779
video iPod

02:50:38,569 --> 02:50:47,389
oh yeah yeah up here it's with that

02:50:41,449 --> 02:50:52,399
height copy/paste alright cool

02:50:47,389 --> 02:50:54,759
so now it should work so reload and that

02:50:52,399 --> 02:50:54,759
should work

02:50:55,640 --> 02:50:59,720
here you go cool

02:51:09,359 --> 02:51:14,560
so I see that already some of you are

02:51:12,220 --> 02:51:17,770
leaving so before all of you are gone

02:51:14,560 --> 02:51:19,689
there are two things I want to say we

02:51:17,770 --> 02:51:21,220
will quickly look at the solution so you

02:51:19,689 --> 02:51:23,979
can work on that on your own if you want

02:51:21,220 --> 02:51:26,649
to and I will do a little quiz to get

02:51:23,979 --> 02:51:31,779
some Swiss chocolate so the three best

02:51:26,649 --> 02:51:34,050
ones will get oops a big chocolate so

02:51:31,779 --> 02:51:40,140
let's quickly look at the solution just

02:51:34,050 --> 02:51:42,729
brush over it very quickly so you see

02:51:40,140 --> 02:51:45,580
the only change that we have to do is in

02:51:42,729 --> 02:51:48,460
process video we will copy to that new

02:51:45,580 --> 02:51:52,540
destination matrix we make that new

02:51:48,460 --> 02:51:55,779
grayscale matrix then we run that

02:51:52,540 --> 02:51:58,870
multiscale classifier and then we loop

02:51:55,779 --> 02:52:01,779
over all phases the bottom right point

02:51:58,870 --> 02:52:05,109
we can just say face dot X plus width

02:52:01,779 --> 02:52:08,080
and face the Y plus height right so we

02:52:05,109 --> 02:52:10,660
get the bottom right or from your point

02:52:08,080 --> 02:52:11,500
of view the bottom right point that

02:52:10,660 --> 02:52:14,380
makes more sense

02:52:11,500 --> 02:52:16,689
and the rest is the same right we have

02:52:14,380 --> 02:52:21,250
that rectangle and we still do image

02:52:16,689 --> 02:52:22,870
show so if you checked it out I think we

02:52:21,250 --> 02:52:25,120
are not getting the best frame rates

02:52:22,870 --> 02:52:27,250
there are people that optimize this

02:52:25,120 --> 02:52:31,840
better so if you look at it I think

02:52:27,250 --> 02:52:34,270
before we that's weird so before we were

02:52:31,840 --> 02:52:37,090
able to get up to 15 frames per seconds

02:52:34,270 --> 02:52:41,080
sometimes yeah you see now 14 15 frames

02:52:37,090 --> 02:52:45,939
per second not very good so if we would

02:52:41,080 --> 02:52:48,160
be optimizing that thing and website

02:52:45,939 --> 02:52:50,500
people did that you see we would get

02:52:48,160 --> 02:52:53,800
they get 30 frames per second for web

02:52:50,500 --> 02:52:56,620
assembly they did a comparison to us and

02:52:53,800 --> 02:52:59,050
choice and native that's the same kind

02:52:56,620 --> 02:53:01,000
of algorithm we are using just we are

02:52:59,050 --> 02:53:02,420
not using it very optimized with just do

02:53:01,000 --> 02:53:05,970
a very simple example

02:53:02,420 --> 02:53:09,530
so if you do it with a some chairs

02:53:05,970 --> 02:53:15,510
it is around 20 frames per second and

02:53:09,530 --> 02:53:17,160
native JavaScript is at 2 frames so this

02:53:15,510 --> 02:53:19,350
is where actually you native performance

02:53:17,160 --> 02:53:22,860
makes a very big difference if you want

02:53:19,350 --> 02:53:24,480
to be somewhere close to real-time or

02:53:22,860 --> 02:53:27,270
something in that direction you should

02:53:24,480 --> 02:53:31,970
totally go for web assembly in that

02:53:27,270 --> 02:53:31,970
direction cool

02:53:33,360 --> 02:53:39,250
yeah I think that's probably my sum up

02:53:36,970 --> 02:53:42,250
of everything you don't need to use

02:53:39,250 --> 02:53:44,320
webassembly to have minor road

02:53:42,250 --> 02:53:46,150
improvements on your Chava script code

02:53:44,320 --> 02:53:49,740
base or something like that where

02:53:46,150 --> 02:53:53,200
assembly is meant to run heavy stuff so

02:53:49,740 --> 02:53:55,030
use it for that don't use it to get your

02:53:53,200 --> 02:53:57,340
angular app faster or something like

02:53:55,030 --> 02:54:01,780
that that's not whatever it will be your

02:53:57,340 --> 02:54:04,270
firm cool so all the resources we used

02:54:01,780 --> 02:54:06,870
all the stuff we can read up on I mean

02:54:04,270 --> 02:54:10,090
you have to link to my presentation now

02:54:06,870 --> 02:54:11,500
yeah let's do a little bit Kristin the

02:54:10,090 --> 02:54:16,320
end I think you have already seen that

02:54:11,500 --> 02:54:16,320
there is this Kahoot thingy right so

02:54:19,890 --> 02:54:28,000
go to cahoots Delta IT and enter that

02:54:25,300 --> 02:54:31,420
pin and your name and then we can have a

02:54:28,000 --> 02:54:37,780
fun little Chris and after that we will

02:54:31,420 --> 02:54:46,620
be done okay we have naughty nicknames

02:54:37,780 --> 02:54:46,620
oh okay okay cool

02:55:02,070 --> 02:55:05,341
and ice

02:55:06,550 --> 02:55:12,410
cool are we all is there somebody who

02:55:09,350 --> 02:55:18,460
wants to shine we're all good

02:55:12,410 --> 02:55:18,460
so get ready oh oh

02:55:18,980 --> 02:55:25,480
I up with the logo sorry what's

02:55:23,330 --> 02:55:28,820
the short form of webassembly

02:55:25,480 --> 02:55:30,440
you have 10 seconds time the earlier you

02:55:28,820 --> 02:55:33,561
click the more points you will be

02:55:30,440 --> 02:55:36,470
rewarded ooh and think all already

02:55:33,561 --> 02:55:40,390
answered that cool yeah and obviously

02:55:36,470 --> 02:55:44,330
some might have clicked wrong right but

02:55:40,390 --> 02:55:48,830
almost everybody knew that cool so we

02:55:44,330 --> 02:55:50,540
have somebody in front Johnny I hope I

02:55:48,830 --> 02:55:53,780
pronounced that right I'm sorry if I

02:55:50,540 --> 02:55:56,690
didn't cool what's the next question

02:55:53,780 --> 02:56:00,040
what was our IDE code that we used for

02:55:56,690 --> 02:56:00,040
our basic examples

02:56:06,530 --> 02:56:11,490
yeah I see way too easy questions for

02:56:10,771 --> 02:56:15,300
you guys

02:56:11,490 --> 02:56:18,630
way too easy all around okay there was

02:56:15,300 --> 02:56:22,530
somebody was very advanced on that okay

02:56:18,630 --> 02:56:24,780
move up to the next question how do we

02:56:22,530 --> 02:56:27,351
tell the Russ compiler to not remove our

02:56:24,780 --> 02:56:27,351
function

02:56:35,101 --> 02:56:43,720
so easy questions I need that so easy

02:56:40,271 --> 02:56:48,760
cool yeah Kahoot is still up from nice

02:56:43,720 --> 02:56:50,080
let's go on to the next question what's

02:56:48,760 --> 02:57:01,050
the name of the computer vision library

02:56:50,080 --> 02:57:05,400
we used yes who's the fastest precedence

02:57:01,050 --> 02:57:05,400
so somebody clicked wrong

02:57:06,851 --> 02:57:12,580
Oh didn't take my clicker first so

02:57:10,030 --> 02:57:15,221
Kahoot seems to be very fast at school

02:57:12,580 --> 02:57:17,440
let's go to the last question how many

02:57:15,221 --> 02:57:20,801
employee is the suka Singapore have

02:57:17,440 --> 02:57:27,690
currently I mean there has to be one to

02:57:20,801 --> 02:57:36,700
decide right so it is 34 is it 35 36 37

02:57:27,690 --> 02:57:39,070
oh that's a nice curve there cool okay

02:57:36,700 --> 02:57:43,330
that was a fun question for the end so

02:57:39,070 --> 02:57:47,351
that we definitely have a kind of people

02:57:43,330 --> 02:57:50,170
on top so congrats to these three people

02:57:47,351 --> 02:57:53,801
come up front in the end you can collect

02:57:50,170 --> 02:57:56,230
your Toblerone here I hope you have fun

02:57:53,801 --> 02:57:59,400
during that workshop and that you like

02:57:56,230 --> 02:58:03,150
webassembly now as much as I do and yeah

02:57:59,400 --> 02:58:11,530
have a nice rest of the conference

02:58:03,150 --> 02:58:11,530

YouTube URL: https://www.youtube.com/watch?v=KU2tKJIjNIU


