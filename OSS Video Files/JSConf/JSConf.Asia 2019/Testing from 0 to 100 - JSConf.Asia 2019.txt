Title: Testing from 0 to 100 - JSConf.Asia 2019
Publication date: 2019-07-05
Playlist: JSConf.Asia 2019
Description: 
	Speaker: Tai Shi Ling @taishiling

Unit tests... API tests... UI tests... mocha... chai... jasmine... cucumber... enzyme...?
Want to introduce test automation to your project, but not sure where to start and what tools to use? 
Join this workshop!
Learn strategies for planning your tests, bring your laptop for some hands-on on different testing techniques and libraries for testing the backend to the frontend on a RealWorld project, and finally let's hook your tests up to your favorite CI/CD!

Requirements:
Bring a laptop. Have a recent web-browser, Git and NodeJS installed.

Shi Ling is the CEO and co-founder of UI-licious, a tool to help software teams rapidly test and monitor end-to-end user journeys for their web app. She's been building web apps since jQuery, obsessing over performance and padding, and these days testing and accessibility for the front-end. She can also do kung-fu, but these days she mostly code-foo.

Event Page: https://2019.jsconf.asia/

Produced by Engineers.SG

Help us caption & translate this video!

https://amara.org/v/pl3n/
Captions: 
	00:00:00,000 --> 00:00:05,549
yes I'll go ahead and start the workshop

00:00:02,879 --> 00:00:06,859
until when these two fellows sit down

00:00:05,549 --> 00:00:13,230
please

00:00:06,859 --> 00:00:15,509
okay so welcome to testing zero to 100

00:00:13,230 --> 00:00:18,840
my mission here today is to teach you

00:00:15,509 --> 00:00:23,279
guys all about testing from unit testing

00:00:18,840 --> 00:00:25,170
to API testing - for your back-end and

00:00:23,279 --> 00:00:26,789
testing your front end with component

00:00:25,170 --> 00:00:30,869
testing which should be covered by one

00:00:26,789 --> 00:00:33,030
of our guests and as well as UI testing

00:00:30,869 --> 00:00:34,860
end to end testing and video regression

00:00:33,030 --> 00:00:38,969
testing with another guest as well

00:00:34,860 --> 00:00:42,000
so we're gonna get you guys from testing

00:00:38,969 --> 00:00:44,550
zero two testing here oh yeah so a quick

00:00:42,000 --> 00:00:47,700
introduction about Who I am

00:00:44,550 --> 00:00:50,760
hi my name is Schilling and I am

00:00:47,700 --> 00:00:54,360
co-founder of VI leashes we provide

00:00:50,760 --> 00:00:58,859
tools for you to automate UI testing but

00:00:54,360 --> 00:01:01,020
before I used to be before I found that

00:00:58,859 --> 00:01:03,120
this company I used to be full stack

00:01:01,020 --> 00:01:05,220
developer at another startup I was doing

00:01:03,120 --> 00:01:09,119
back in front and everything from energy

00:01:05,220 --> 00:01:12,090
it takes to just everything so and like

00:01:09,119 --> 00:01:14,939
Main Street is that I used to I used to

00:01:12,090 --> 00:01:17,549
really suck at coding I was a junior

00:01:14,939 --> 00:01:19,650
developer once before and I wrote zero

00:01:17,549 --> 00:01:21,689
tests until I put my hand too many times

00:01:19,650 --> 00:01:25,290
and I decided that I should start

00:01:21,689 --> 00:01:27,750
writing tests from now on so the reason

00:01:25,290 --> 00:01:32,040
why I'm giving this workshop is because

00:01:27,750 --> 00:01:33,360
I came to learn that it wasn't just me

00:01:32,040 --> 00:01:36,390
who didn't had the habit of writing

00:01:33,360 --> 00:01:38,820
tests in fact the company that I joined

00:01:36,390 --> 00:01:41,130
in a back then there was you it was a

00:01:38,820 --> 00:01:43,680
six year old company startup actually

00:01:41,130 --> 00:01:46,770
and there were a coin above senior

00:01:43,680 --> 00:01:49,500
developers but testing wasn't in a blood

00:01:46,770 --> 00:01:52,740
so I joined projects and none of the

00:01:49,500 --> 00:01:55,829
projects had tested off so I had the

00:01:52,740 --> 00:01:58,229
fortune or misfortune of joining this

00:01:55,829 --> 00:02:01,649
particular project that was written in

00:01:58,229 --> 00:02:05,640
Jake Jake hurry and angular at the same

00:02:01,649 --> 00:02:07,590
time so some parts of the pages just G

00:02:05,640 --> 00:02:10,440
curry and some parts of the pages are

00:02:07,590 --> 00:02:11,690
angular spy applications so as I mix and

00:02:10,440 --> 00:02:14,270
only that it was

00:02:11,690 --> 00:02:15,980
also jQuery UI plus bootstrap do

00:02:14,270 --> 00:02:19,730
passbook step trees so you can imagine

00:02:15,980 --> 00:02:22,010
if I want to add one new feature I would

00:02:19,730 --> 00:02:23,780
take a very long time so of course Ivy

00:02:22,010 --> 00:02:25,580
factory Ronnie I need a code to be clean

00:02:23,780 --> 00:02:27,230
for me to be able to work on it but of

00:02:25,580 --> 00:02:29,420
course if you refactor I don't know why

00:02:27,230 --> 00:02:31,970
I changed one component and a totally

00:02:29,420 --> 00:02:33,230
unrelated component break so so of

00:02:31,970 --> 00:02:35,990
course I'm very scared I because I

00:02:33,230 --> 00:02:38,060
released so many bugs to production I

00:02:35,990 --> 00:02:39,980
got scolded a lot of times I got scolded

00:02:38,060 --> 00:02:42,020
not just by managers I also got scolded

00:02:39,980 --> 00:02:44,540
by customizing a why you like that okay

00:02:42,020 --> 00:02:47,450
so so can I learn I learned my lesson

00:02:44,540 --> 00:02:51,380
and saw the writing test and oh my own

00:02:47,450 --> 00:02:53,840
so I usually disapprove of any

00:02:51,380 --> 00:02:55,940
gatekeeping behavior but if that's one

00:02:53,840 --> 00:02:58,370
thing that I'm very geeky P about is

00:02:55,940 --> 00:03:00,380
that you're not a real software engineer

00:02:58,370 --> 00:03:02,510
if you don't write your test

00:03:00,380 --> 00:03:05,540
ok so writing test is super important

00:03:02,510 --> 00:03:07,970
and I learned to write tests also

00:03:05,540 --> 00:03:11,120
because I wanted to go on vacation with

00:03:07,970 --> 00:03:13,130
peace ok so I I broke tests while I was

00:03:11,120 --> 00:03:16,250
on vacation I ain't gonna wake when I

00:03:13,130 --> 00:03:18,440
came back so you don't want that in your

00:03:16,250 --> 00:03:20,209
life I you just want to go you don't

00:03:18,440 --> 00:03:22,280
want to sleep in your hotel room and

00:03:20,209 --> 00:03:23,630
video or shared or whether they're the

00:03:22,280 --> 00:03:24,410
team is ok or not should I check my knee

00:03:23,630 --> 00:03:25,730
or not okay

00:03:24,410 --> 00:03:28,370
yeah so you don't know you just want to

00:03:25,730 --> 00:03:30,739
sleep in peace so the day that I talk is

00:03:28,370 --> 00:03:32,000
about covering tests from your friend

00:03:30,739 --> 00:03:36,590
y'all a back cover

00:03:32,000 --> 00:03:39,680
oh it's ok so can I just get a show of

00:03:36,590 --> 00:03:43,519
hands of any cool here's right test at

00:03:39,680 --> 00:03:45,640
least a unit test ok not bad ok we have

00:03:43,519 --> 00:03:49,760
like fifty percent so it's pretty good

00:03:45,640 --> 00:03:51,320
so today this is what we are going to

00:03:49,760 --> 00:03:54,080
cover so I have already mentioned it

00:03:51,320 --> 00:03:56,330
we're gonna cover unit testing with

00:03:54,080 --> 00:03:58,430
mocha and chai all of it is JavaScript

00:03:56,330 --> 00:04:01,880
because the GS calm so I will be

00:03:58,430 --> 00:04:04,130
covering a J unit in Java but you need

00:04:01,880 --> 00:04:06,800
to think more contrite they'll do a API

00:04:04,130 --> 00:04:09,950
testing we've hitched try HTTP and this

00:04:06,800 --> 00:04:12,080
also includes setting up your server and

00:04:09,950 --> 00:04:14,239
tearing it down setting up and tearing

00:04:12,080 --> 00:04:17,419
down your server and your databases so

00:04:14,239 --> 00:04:20,150
that you get clean environments to run

00:04:17,419 --> 00:04:21,799
your tests reliably and we also gotta

00:04:20,150 --> 00:04:24,260
cover end to end testing with webdriver

00:04:21,799 --> 00:04:27,230
oh and also with using your you are

00:04:24,260 --> 00:04:30,170
and bonus materials because we have a

00:04:27,230 --> 00:04:32,120
few our interesting guests at just calm

00:04:30,170 --> 00:04:34,970
so we grab them and also ask them to do

00:04:32,120 --> 00:04:40,520
some demonstration or testing with every

00:04:34,970 --> 00:04:43,250
Tuesday yes so I think to start off how

00:04:40,520 --> 00:04:45,380
do we get to 100% testing yourself like

00:04:43,250 --> 00:04:46,820
this mythical end of the rainbow that

00:04:45,380 --> 00:04:50,330
you will never reach but we're gonna try

00:04:46,820 --> 00:04:53,870
and one of the same testing is not

00:04:50,330 --> 00:04:56,090
enough for you to just do unit testing

00:04:53,870 --> 00:04:58,010
it's not enough so the reason why it's

00:04:56,090 --> 00:05:00,380
not enough it's because you could you

00:04:58,010 --> 00:05:01,850
you you can't just test things in

00:05:00,380 --> 00:05:04,370
isolation you need to test things when

00:05:01,850 --> 00:05:06,080
they work together so this is very silly

00:05:04,370 --> 00:05:09,470
you don't understand your founders thing

00:05:06,080 --> 00:05:11,750
and it's not wash your hands okay so

00:05:09,470 --> 00:05:16,340
this obviously integration testing was

00:05:11,750 --> 00:05:20,210
not done here so that is three layers of

00:05:16,340 --> 00:05:23,720
testing we have the oh I can I can just

00:05:20,210 --> 00:05:26,990
press next okay so we have three layers

00:05:23,720 --> 00:05:29,870
of testing that is unit tests at your

00:05:26,990 --> 00:05:33,050
bottom and we have integration test and

00:05:29,870 --> 00:05:35,780
acceptance there so this is in a pyramid

00:05:33,050 --> 00:05:37,520
structure because why you're supposed to

00:05:35,780 --> 00:05:40,550
do it is you're supposed to write more

00:05:37,520 --> 00:05:43,670
of the unit tests and less of the

00:05:40,550 --> 00:05:46,760
acceptance tests and the integration

00:05:43,670 --> 00:05:48,980
test so the reason is because the test

00:05:46,760 --> 00:05:51,230
at the top of the pyramid they cover

00:05:48,980 --> 00:05:52,940
more of your code but because they cover

00:05:51,230 --> 00:05:55,490
more record and they also require more

00:05:52,940 --> 00:05:58,460
setup they take longer to run so if you

00:05:55,490 --> 00:06:01,010
want to be very efficient about running

00:05:58,460 --> 00:06:04,310
your test write more of your unit tests

00:06:01,010 --> 00:06:06,620
and forever whatever that is not able to

00:06:04,310 --> 00:06:09,200
be covered by your unit test you you

00:06:06,620 --> 00:06:11,930
write some of the integration tests and

00:06:09,200 --> 00:06:13,700
some of the UI tests so that you if you

00:06:11,930 --> 00:06:16,190
write all everything in UI test your

00:06:13,700 --> 00:06:17,570
test is just gonna be a slow your entire

00:06:16,190 --> 00:06:20,450
test so it's just going to be quite slow

00:06:17,570 --> 00:06:22,130
so that's how you balance out all these

00:06:20,450 --> 00:06:25,850
things and I think this is one of the

00:06:22,130 --> 00:06:28,220
things that people get confused by when

00:06:25,850 --> 00:06:31,040
I work with teams that have zero tests

00:06:28,220 --> 00:06:32,720
like my Oh company even the senior

00:06:31,040 --> 00:06:35,000
engineers back then we were thinking

00:06:32,720 --> 00:06:37,310
yeah I should write tests and but every

00:06:35,000 --> 00:06:38,030
like they there was two factions so we

00:06:37,310 --> 00:06:40,700
actually had a

00:06:38,030 --> 00:06:43,220
they say we should start from unit tests

00:06:40,700 --> 00:06:44,930
and another faction say no no no we

00:06:43,220 --> 00:06:47,750
should start from integration test

00:06:44,930 --> 00:06:49,400
because another day is how everything

00:06:47,750 --> 00:06:51,920
was together that's more important and

00:06:49,400 --> 00:06:54,910
then for me it's like I don't care you

00:06:51,920 --> 00:06:57,380
start unit test or API tests or

00:06:54,910 --> 00:07:00,050
integration tests or UI tests as well as

00:06:57,380 --> 00:07:02,360
days test there is starting some ways

00:07:00,050 --> 00:07:06,650
but I like 1% tax preparation is better

00:07:02,360 --> 00:07:08,030
than 0% test coverage so and one good

00:07:06,650 --> 00:07:10,370
guideline if you want to remember

00:07:08,030 --> 00:07:12,220
takeaway from letting all these tests

00:07:10,370 --> 00:07:15,290
and you're still confused okay where

00:07:12,220 --> 00:07:16,370
what part is the best place to start

00:07:15,290 --> 00:07:19,430
with testing because it's so

00:07:16,370 --> 00:07:21,230
overwhelming that then I think it's

00:07:19,430 --> 00:07:23,180
always good to start with the scariest

00:07:21,230 --> 00:07:25,160
piece of code that you are too afraid to

00:07:23,180 --> 00:07:28,300
refactor you write the test for that so

00:07:25,160 --> 00:07:30,770
for me when I worked on that project I

00:07:28,300 --> 00:07:33,380
ain't been right the test for the UI

00:07:30,770 --> 00:07:35,120
test first I actually wrote the test for

00:07:33,380 --> 00:07:38,540
the payments module because we had a

00:07:35,120 --> 00:07:41,030
very complex calculations for how we

00:07:38,540 --> 00:07:44,090
should build the customers and the

00:07:41,030 --> 00:07:45,800
business team had new ideas every month

00:07:44,090 --> 00:07:47,870
so you want to change the formula for

00:07:45,800 --> 00:07:50,030
how they want to build a customer so in

00:07:47,870 --> 00:07:53,180
order for me to safely make sure that

00:07:50,030 --> 00:07:55,760
the logic is still correct I write my

00:07:53,180 --> 00:07:58,010
test so that I can change the then then

00:07:55,760 --> 00:07:59,570
I would change the logic according to

00:07:58,010 --> 00:08:01,730
the requirements from the business team

00:07:59,570 --> 00:08:03,980
so so that was like the piece of code

00:08:01,730 --> 00:08:06,920
that was scariest for me because if the

00:08:03,980 --> 00:08:09,170
building module fails and we are not not

00:08:06,920 --> 00:08:11,630
charging the customer because the the

00:08:09,170 --> 00:08:14,840
company will lose money and organiz even

00:08:11,630 --> 00:08:16,640
worse okay so that was like that's a

00:08:14,840 --> 00:08:18,320
guideline just start with the scariest

00:08:16,640 --> 00:08:20,620
piece of code if you cannot be gone

00:08:18,320 --> 00:08:23,660
where is a good place to start okay so

00:08:20,620 --> 00:08:26,300
let's move on to some of the labs so

00:08:23,660 --> 00:08:27,740
today's lab is caught that thing zero to

00:08:26,300 --> 00:08:29,960
hero because we're gonna catch bugs

00:08:27,740 --> 00:08:32,270
Pokemon box actually so if you know

00:08:29,960 --> 00:08:34,220
they're gonna be a hero okay gotta catch

00:08:32,270 --> 00:08:38,030
them all okay so we're gonna start with

00:08:34,220 --> 00:08:41,270
the workshop so I need you to head over

00:08:38,030 --> 00:08:45,320
to this github repo and forkie clone it

00:08:41,270 --> 00:08:47,600
and run npm install and if you have any

00:08:45,320 --> 00:08:50,400
issues doing the npm installation you

00:08:47,600 --> 00:08:52,410
can call me my ta which

00:08:50,400 --> 00:08:55,530
is that Eugene over here and also Aaron

00:08:52,410 --> 00:08:57,450
over there who go around to help you

00:08:55,530 --> 00:09:00,390
guys if you're stuck on NPM installation

00:08:57,450 --> 00:09:03,300
so we'll just give you guys about ten

00:09:00,390 --> 00:09:06,590
minutes to do the installation and yeah

00:09:03,300 --> 00:09:06,590
just call us if you need any help

00:10:30,220 --> 00:10:39,779
I can smell some water water what the

00:10:36,360 --> 00:10:44,970
Thanks mm-hmm

00:10:39,779 --> 00:10:52,259
one water well water

00:10:44,970 --> 00:10:55,439
ones I want okay you all some water okay

00:10:52,259 --> 00:10:59,009
what that okay

00:10:55,439 --> 00:10:59,009
you want one okay

00:11:11,440 --> 00:11:17,949
sorry boo-boo uh mocha is low called oh

00:11:15,430 --> 00:11:20,829
yeah it's not so your install definition

00:11:17,949 --> 00:11:21,250
it will be installed later in later

00:11:20,829 --> 00:11:24,639
steps

00:11:21,250 --> 00:11:27,509
oh yeah he's like he's they were

00:11:24,639 --> 00:11:27,509
installing a sting

00:11:27,519 --> 00:11:31,720
yeah the DB is not populated they were

00:11:29,019 --> 00:11:37,410
populated in exercise tree do you want

00:11:31,720 --> 00:11:37,410
to pass out the water yeah

00:12:32,850 --> 00:12:46,740
you want water days off Walter yes no

00:12:44,500 --> 00:12:46,740
okay

00:12:50,460 --> 00:12:57,600
you need help oh you need want the oh

00:12:54,670 --> 00:12:57,600
it's over here

00:13:35,830 --> 00:13:51,900
I try to kick you out

00:14:07,580 --> 00:14:12,650
any position I know it's not clone

00:14:11,240 --> 00:14:15,410
properly so I'm just going to read it

00:14:12,650 --> 00:14:23,180
across okay the forum is not working the

00:14:15,410 --> 00:14:26,740
quarry is not working okay this area

00:14:23,180 --> 00:14:26,740
here okay

00:14:49,450 --> 00:14:51,480
ah

00:14:59,020 --> 00:15:03,880
oh yeah soon reading is very small

00:15:29,290 --> 00:15:36,190
because I think it doesn't they just

00:15:33,650 --> 00:15:36,190
died okay

00:15:41,490 --> 00:15:43,490
Oh

00:15:54,560 --> 00:15:59,170
Oh ask them for someone doing it green

00:15:59,709 --> 00:16:02,709
okay

00:16:07,200 --> 00:16:13,450
yeah we're just gonna move for hate

00:16:10,090 --> 00:16:15,280
first and if you need any help if you're

00:16:13,450 --> 00:16:18,310
lagging behind who ask the TAS to help

00:16:15,280 --> 00:16:21,040
you so I'm gonna go ahead and explain

00:16:18,310 --> 00:16:23,680
the structure of the project first and

00:16:21,040 --> 00:16:27,610
we're gonna start with testing with

00:16:23,680 --> 00:16:30,670
mocha so let me open up the project so

00:16:27,610 --> 00:16:32,730
over here in our project we have the

00:16:30,670 --> 00:16:35,410
what we want to do is to test the

00:16:32,730 --> 00:16:37,840
pokemons class itself so the book in one

00:16:35,410 --> 00:16:41,050
class is just very very simple it just

00:16:37,840 --> 00:16:44,470
sets the attributes of our pokemons so

00:16:41,050 --> 00:16:46,780
it's a pokemons class is in site models

00:16:44,470 --> 00:16:48,910
Pokemon OGS and we were pointing up you

00:16:46,780 --> 00:16:51,940
can see that pokemon has a number of

00:16:48,910 --> 00:16:54,220
attributes yes the ID yes name yes types

00:16:51,940 --> 00:16:57,370
you can set study as a bug type of grass

00:16:54,220 --> 00:16:59,290
type electric-type here's some other

00:16:57,370 --> 00:17:01,630
attributes that says how strong this

00:16:59,290 --> 00:17:04,150
pokemon is how fast is pokemons it

00:17:01,630 --> 00:17:05,770
doesn't use any special pecks and

00:17:04,150 --> 00:17:09,640
whether or not is a legendary Pokemon

00:17:05,770 --> 00:17:12,459
yeah so what I want to do is to make

00:17:09,640 --> 00:17:14,650
sure that we all do a few simple tests

00:17:12,459 --> 00:17:20,339
like testing whether if we said the name

00:17:14,650 --> 00:17:20,339
of the pocket yes also mean

00:17:25,220 --> 00:17:33,600
is this big enough for the folks at the

00:17:28,020 --> 00:17:39,059
back okay okay so we can attach the set

00:17:33,600 --> 00:17:40,170
name actually method of Pokemon and when

00:17:39,059 --> 00:17:42,540
you set a name you should obviously

00:17:40,170 --> 00:17:46,679
check when you get a name is the same

00:17:42,540 --> 00:17:49,920
name so what we want to do first is to

00:17:46,679 --> 00:17:53,280
make sure that we were gonna use maka to

00:17:49,920 --> 00:17:55,020
run to set our test a mocha is a testing

00:17:53,280 --> 00:17:58,410
framework white that's for you is to

00:17:55,020 --> 00:18:00,750
manage the setup the execution the

00:17:58,410 --> 00:18:03,450
teardown and reporting your tests so you

00:18:00,750 --> 00:18:06,419
can actually plug in different assertion

00:18:03,450 --> 00:18:08,700
libraries to maka maka can still well

00:18:06,419 --> 00:18:10,710
just run using those livee all it does

00:18:08,700 --> 00:18:13,470
is to catch whether the assertion

00:18:10,710 --> 00:18:15,570
library trolls in a type error called an

00:18:13,470 --> 00:18:17,910
assertion error and then he chose a

00:18:15,570 --> 00:18:20,790
social area you would mount the suit as

00:18:17,910 --> 00:18:22,530
a failure so besides that you also do

00:18:20,790 --> 00:18:24,390
the teardown and reporting so the

00:18:22,530 --> 00:18:26,460
reporting can she plug in any kind of

00:18:24,390 --> 00:18:28,380
our reporter so the report today we're

00:18:26,460 --> 00:18:30,679
gonna use is just called a spec reporter

00:18:28,380 --> 00:18:32,640
back actually change it to a HTML

00:18:30,679 --> 00:18:35,309
reporter if you just want to see your

00:18:32,640 --> 00:18:37,440
test window as a HTML document so you

00:18:35,309 --> 00:18:41,880
just keeping things simple first thing

00:18:37,440 --> 00:18:47,340
first do npm install mocha there safe -

00:18:41,880 --> 00:18:48,990
and this usually have this quick test

00:18:47,340 --> 00:18:51,900
script set up so you don't need to do

00:18:48,990 --> 00:18:53,790
this step anymore and the first step is

00:18:51,900 --> 00:18:54,809
what we're gonna do first exercise is

00:18:53,790 --> 00:18:58,950
we're gonna test

00:18:54,809 --> 00:19:00,630
hello Pikachu so once we let's create a

00:18:58,950 --> 00:19:04,830
test after you have done your npm

00:19:00,630 --> 00:19:09,510
install mocha okay let me just do it

00:19:04,830 --> 00:19:11,220
this so first thing pushers do npm

00:19:09,510 --> 00:19:15,020
install mocha

00:19:11,220 --> 00:19:15,020
save that if ever ready

00:19:15,970 --> 00:19:20,990
and what we're gonna do is we're gonna

00:19:18,710 --> 00:19:23,690
set up our tests in the test folder so

00:19:20,990 --> 00:19:26,779
so the test has already been created for

00:19:23,690 --> 00:19:32,049
you so let's write our test in unit test

00:19:26,779 --> 00:19:36,200
one dot Pokemon and how Moka works is

00:19:32,049 --> 00:19:39,259
the test suits to define a test so that

00:19:36,200 --> 00:19:45,999
you use the word describe so we can we

00:19:39,259 --> 00:19:45,999
are going to say describe Pokemon

00:19:46,600 --> 00:19:49,720
[Applause]

00:19:50,580 --> 00:19:56,970
elvadine described pokemon we are going

00:19:53,620 --> 00:20:01,480
to create another test so it's up to

00:19:56,970 --> 00:20:04,570
test to group the the pass for set name

00:20:01,480 --> 00:20:07,120
together so we could test every we could

00:20:04,570 --> 00:20:10,210
test whether you be sent me with an

00:20:07,120 --> 00:20:13,980
empty value and where they produce us an

00:20:10,210 --> 00:20:17,320
error or and we can test if we provide a

00:20:13,980 --> 00:20:20,620
proper string whether it properly sets

00:20:17,320 --> 00:20:22,420
the the pokemons name so this these are

00:20:20,620 --> 00:20:24,280
two test cases but we want to group it

00:20:22,420 --> 00:20:27,060
into one test so together so you're just

00:20:24,280 --> 00:20:35,590
going to clean out there so say describe

00:20:27,060 --> 00:20:38,650
the set name function okay so we're

00:20:35,590 --> 00:20:46,170
gonna do next is we're gonna import our

00:20:38,650 --> 00:20:50,740
pokemon class so cons pokemon require

00:20:46,170 --> 00:20:57,730
from the go up one level two level

00:20:50,740 --> 00:21:00,670
models and pokemon so now if you want to

00:20:57,730 --> 00:21:07,090
define the test group itself we need to

00:21:00,670 --> 00:21:09,640
say it oh so this is the case itself and

00:21:07,090 --> 00:21:11,290
what we should what we want to say what

00:21:09,640 --> 00:21:14,110
we want to put in the first parameter is

00:21:11,290 --> 00:21:16,510
a description of the cases also i wanna

00:21:14,110 --> 00:21:23,070
for this case we should just as it

00:21:16,510 --> 00:21:26,950
should set name when given non empty

00:21:23,070 --> 00:21:29,680
string and then we proceed with the

00:21:26,950 --> 00:21:32,160
function and we'll write our test script

00:21:29,680 --> 00:21:32,160
over here

00:21:32,700 --> 00:21:40,700
is so gonna create our Pokemon bar come

00:21:39,149 --> 00:21:43,669
on

00:21:40,700 --> 00:21:46,799
because who knew Pokemon

00:21:43,669 --> 00:21:48,570
so the Pokemon constructor it is gonna

00:21:46,799 --> 00:21:51,029
leave it blank first and we're going to

00:21:48,570 --> 00:21:52,590
test the setting of the name through the

00:21:51,029 --> 00:21:58,019
name function instead of true that

00:21:52,590 --> 00:21:59,279
constructor so pokemon dot set name and

00:21:58,019 --> 00:22:04,259
we're just going to call this one a

00:21:59,279 --> 00:22:06,809
Pikachu and what we have to do at the

00:22:04,259 --> 00:22:08,999
end so every test has to test one

00:22:06,809 --> 00:22:10,950
hypothesis and also have to have at

00:22:08,999 --> 00:22:14,100
least some assertions so what we're

00:22:10,950 --> 00:22:16,799
going to assert here is to say expect

00:22:14,100 --> 00:22:19,139
that the the name of the Pikachu is

00:22:16,799 --> 00:22:23,059
equals to the name of a Pokemon is

00:22:19,139 --> 00:22:26,609
equals to Pikachu so ad assertion here

00:22:23,059 --> 00:22:29,070
so mukha itself doesn't come with any

00:22:26,609 --> 00:22:31,409
assertion libraries built in but no js'

00:22:29,070 --> 00:22:34,049
has an assertion library so we're going

00:22:31,409 --> 00:22:39,720
to import the nodejs assertion library

00:22:34,049 --> 00:22:47,159
cons require a certain assert equals to

00:22:39,720 --> 00:22:53,809
require a certain ok so i go open up the

00:22:47,159 --> 00:22:56,609
know jess assertion library so this the

00:22:53,809 --> 00:22:59,850
documentation for the assertion library

00:22:56,609 --> 00:23:02,909
in no trout and what you can see is i

00:22:59,850 --> 00:23:05,609
think the the one that the the assertion

00:23:02,909 --> 00:23:07,919
everyone is this assertion so you just

00:23:05,609 --> 00:23:10,679
want to say assert the value is equals

00:23:07,919 --> 00:23:14,730
to and what it does is he wants the

00:23:10,679 --> 00:23:17,639
input to be evaluated into a true true

00:23:14,730 --> 00:23:18,929
value so it is not true you print out

00:23:17,639 --> 00:23:25,309
the error message so what you're gonna

00:23:18,929 --> 00:23:30,450
do here is a certain Pokemon dot name

00:23:25,309 --> 00:23:35,999
equals to Pikachu and if it's not

00:23:30,450 --> 00:23:37,859
Pikachu we just print the Pokemon name

00:23:35,999 --> 00:23:41,859
should be

00:23:37,859 --> 00:23:44,289
because chew we can actually I believe

00:23:41,859 --> 00:23:46,960
the message is optional so we can

00:23:44,289 --> 00:23:51,899
actually take this out in they will

00:23:46,960 --> 00:23:51,899
generate default social message for us

00:23:57,260 --> 00:24:03,000
okay and to run the test

00:23:59,580 --> 00:24:05,610
oh if you already have this I usually

00:24:03,000 --> 00:24:09,930
already have this setup so scripts

00:24:05,610 --> 00:24:11,910
thought test so we already broken it up

00:24:09,930 --> 00:24:13,980
into different types of scripts for unit

00:24:11,910 --> 00:24:16,260
testing for API testing and end-to-end

00:24:13,980 --> 00:24:20,070
testing but what we can just do is npm

00:24:16,260 --> 00:24:21,810
pass to run our test over here and over

00:24:20,070 --> 00:24:24,420
here you can see my results after

00:24:21,810 --> 00:24:27,630
running a test it says yes correct

00:24:24,420 --> 00:24:30,660
we are able to set the name - Pikachu

00:24:27,630 --> 00:24:32,640
are correctly so let's say if let's just

00:24:30,660 --> 00:24:33,180
break this test on purpose and just say

00:24:32,640 --> 00:24:35,910
that okay

00:24:33,180 --> 00:24:38,850
I think this supposed to be Pikachu you

00:24:35,910 --> 00:24:40,410
say Oh Pikachu and we can just run these

00:24:38,850 --> 00:24:43,910
tests to make sure that it fails oh

00:24:40,410 --> 00:24:43,910
actually this is not correct

00:24:47,780 --> 00:25:02,490
not oh sure why is this noise not

00:24:50,910 --> 00:25:04,640
validating let's use the echo instead of

00:25:02,490 --> 00:25:09,330
double equal so we can also use the

00:25:04,640 --> 00:25:12,900
equal method which says this is what you

00:25:09,330 --> 00:25:15,630
actually get and what is the value you

00:25:12,900 --> 00:25:22,170
expect so let's try this and maybe this

00:25:15,630 --> 00:25:24,630
is better okay now this is failing so so

00:25:22,170 --> 00:25:26,940
the node.js assertion library is a

00:25:24,630 --> 00:25:29,010
little bit weird sometimes so to be

00:25:26,940 --> 00:25:31,110
honest I don't like using the node.js

00:25:29,010 --> 00:25:37,320
assertion library by itself and I would

00:25:31,110 --> 00:25:39,720
rather use try so yeah I'm feeling this

00:25:37,320 --> 00:25:41,790
person on purpose yeah so if I put it

00:25:39,720 --> 00:25:43,560
just to make sure that a socialite be

00:25:41,790 --> 00:25:46,050
well sometimes you must make check if

00:25:43,560 --> 00:25:48,030
the your test is valid so it's always

00:25:46,050 --> 00:25:50,250
good to just fail your test on purpose

00:25:48,030 --> 00:25:53,750
just to make sure that your test is

00:25:50,250 --> 00:25:53,750
working introspect yes

00:26:02,710 --> 00:26:07,960
it depends on the assertion libraries

00:26:05,650 --> 00:26:10,240
import actually so over here we are

00:26:07,960 --> 00:26:12,190
using the node.js library so the

00:26:10,240 --> 00:26:14,770
documentation if you read the docs he

00:26:12,190 --> 00:26:16,330
wants you to put the actual value and

00:26:14,770 --> 00:26:18,310
then the expected value so we're gonna

00:26:16,330 --> 00:26:23,980
use another library they're actually

00:26:18,310 --> 00:26:26,290
gonna use the child library next so the

00:26:23,980 --> 00:26:29,410
child like we lets you write tests in a

00:26:26,290 --> 00:26:32,680
BDD style so BDD style lets you describe

00:26:29,410 --> 00:26:37,110
your tests like regular English language

00:26:32,680 --> 00:26:41,050
so it's a try supports two forms of BDD

00:26:37,110 --> 00:26:43,870
style syntax one is shoot and another

00:26:41,050 --> 00:26:46,210
one is expect so that one would sound a

00:26:43,870 --> 00:26:48,220
lot more easier for you to read as well

00:26:46,210 --> 00:26:50,860
so we're gonna try importing the chili

00:26:48,220 --> 00:26:54,570
breed X and to test our to write the

00:26:50,860 --> 00:26:54,570
same test in the Thai style

00:26:57,670 --> 00:27:05,540
okay so let's get rid of this assertion

00:27:02,540 --> 00:27:07,130
library and we're gonna import the chili

00:27:05,540 --> 00:27:11,900
bean states so if you haven't already

00:27:07,130 --> 00:27:18,830
done so just do NPM install chai and

00:27:11,900 --> 00:27:20,840
save that as well my advice is

00:27:18,830 --> 00:27:25,850
installing we are going to import the

00:27:20,840 --> 00:27:31,610
shoot syntax so cons should equals to

00:27:25,850 --> 00:27:34,850
require try and try provides you a

00:27:31,610 --> 00:27:37,220
module called shoot but you can just

00:27:34,850 --> 00:27:40,430
import shoot on its own you actually

00:27:37,220 --> 00:27:45,460
need to call shoot so what should does

00:27:40,430 --> 00:27:45,460
is that it extends the object class

00:27:47,560 --> 00:27:51,860
sorry this will extend the object class

00:27:49,970 --> 00:27:55,790
so that what you can do here instead of

00:27:51,860 --> 00:28:01,180
saying assert equals the actual process

00:27:55,790 --> 00:28:11,320
expected you can say Pokemon dot name

00:28:01,180 --> 00:28:11,320
should okay should be equal

00:28:13,190 --> 00:28:19,520
Pikachu we're gonna go ahead and run

00:28:17,250 --> 00:28:19,520
this

00:28:24,510 --> 00:28:30,669
and this is passing with the shoot

00:28:27,880 --> 00:28:33,460
syntax as well so we can take a look at

00:28:30,669 --> 00:28:36,309
the child library itself to see more of

00:28:33,460 --> 00:28:39,190
the different kind of syntax that shoot

00:28:36,309 --> 00:28:42,789
provides us so you look in the API and

00:28:39,190 --> 00:28:45,580
you can click on the shoot and expect

00:28:42,789 --> 00:28:48,190
syntax you'll see that it's very English

00:28:45,580 --> 00:28:49,840
like and what you he provides you our

00:28:48,190 --> 00:28:53,580
language change so you can pretty much

00:28:49,840 --> 00:28:53,580
change your your pass

00:28:59,159 --> 00:29:31,299
yes yeah I'm I have nested the the test

00:29:28,690 --> 00:29:33,970
in one more level when I was finalizing

00:29:31,299 --> 00:29:36,429
the workshops oil you might there be be

00:29:33,970 --> 00:29:39,100
a little bit different in the actual

00:29:36,429 --> 00:29:41,770
documentation here so anyway the short

00:29:39,100 --> 00:29:43,899
syntax I'm having a bit trouble finding

00:29:41,770 --> 00:29:45,990
the examples for should in the child

00:29:43,899 --> 00:29:49,120
social I be but you can see expect is

00:29:45,990 --> 00:29:53,049
expect if you want to check equals I

00:29:49,120 --> 00:29:55,870
think that's fine echo so echo is very

00:29:53,049 --> 00:29:58,659
similar to should equal you just expect

00:29:55,870 --> 00:30:02,669
the actual the value itself to be equals

00:29:58,659 --> 00:30:05,470
the actual value you expect it to be so

00:30:02,669 --> 00:30:07,809
and you can do a lot of kind of sort of

00:30:05,470 --> 00:30:11,500
assertions for should so we can do

00:30:07,809 --> 00:30:14,409
should expect the Pokemon name to appear

00:30:11,500 --> 00:30:17,200
string so maybe you could pass in number

00:30:14,409 --> 00:30:20,049
and maybe expect to be coerced into the

00:30:17,200 --> 00:30:22,630
string you can also expect you can also

00:30:20,049 --> 00:30:24,909
pass in the Pokemon type side if you

00:30:22,630 --> 00:30:27,340
pass in two types like the bug type in a

00:30:24,909 --> 00:30:29,020
grass type and then we can say okay go

00:30:27,340 --> 00:30:31,059
grab the type and make sure that the

00:30:29,020 --> 00:30:34,570
types are is actually lying of too so

00:30:31,059 --> 00:30:36,059
make sure that we didn't just add to two

00:30:34,570 --> 00:30:37,739
types that we get one out so

00:30:36,059 --> 00:30:41,879
yes you can do a lot of kind of

00:30:37,739 --> 00:30:45,960
assertions so let's try doing your the

00:30:41,879 --> 00:30:49,289
test in media expect syntax instead so

00:30:45,960 --> 00:30:53,159
to import your expect class the expect

00:30:49,289 --> 00:30:54,960
assertion we do something similar as

00:30:53,159 --> 00:31:00,090
well we can require we need to require

00:30:54,960 --> 00:31:04,639
the module require chai and we require

00:31:00,090 --> 00:31:14,389
the module inside china is called expect

00:31:04,639 --> 00:31:20,119
you can say expect pokey more name to be

00:31:14,389 --> 00:31:22,589
equal Pikachu

00:31:20,119 --> 00:31:24,539
then run this again and make sure that

00:31:22,589 --> 00:31:28,440
you still work so it still works so this

00:31:24,539 --> 00:31:30,599
syntax so so it's it depends on what

00:31:28,440 --> 00:31:32,909
what you are comfortable with you want

00:31:30,599 --> 00:31:34,979
you can choose the shoots in task and

00:31:32,909 --> 00:31:38,460
choose the expects in text or if you

00:31:34,979 --> 00:31:41,519
just wanna use assertion as well we can

00:31:38,460 --> 00:31:44,609
do that so well it's always good to test

00:31:41,519 --> 00:31:47,309
happy scenario users will make mistakes

00:31:44,609 --> 00:31:49,259
so it's always important to test whether

00:31:47,309 --> 00:31:53,009
your application shows a proper error

00:31:49,259 --> 00:31:55,889
message so let's try testing if we what

00:31:53,009 --> 00:31:58,169
happens if we set the name to be an

00:31:55,889 --> 00:32:01,109
empty value so you will try to set empty

00:31:58,169 --> 00:32:02,639
value on because you are on the Pokemon

00:32:01,109 --> 00:32:07,859
it should show you an error that says

00:32:02,639 --> 00:32:13,529
the name is required so in Korean new

00:32:07,859 --> 00:32:18,830
test case and says it should show error

00:32:13,529 --> 00:32:18,830
if name is missing

00:32:22,940 --> 00:32:27,950
so we're gonna create our pokemon again

00:32:29,600 --> 00:32:38,190
and study the empty so what we're gonna

00:32:35,280 --> 00:32:40,440
do is we are gonna be using the choice

00:32:38,190 --> 00:32:43,430
assertion like we instead of the no J's

00:32:40,440 --> 00:32:46,830
assertion idea to check for errors so

00:32:43,430 --> 00:32:49,740
the reason for that is no J's accession

00:32:46,830 --> 00:32:52,920
like we seems to not want in the way

00:32:49,740 --> 00:32:55,590
that I expected to so choice the way

00:32:52,920 --> 00:32:58,500
Chinese checks for error is al it makes

00:32:55,590 --> 00:33:04,530
a little bit more sense to me okay let

00:32:58,500 --> 00:33:06,840
me find shows so you can test to see

00:33:04,530 --> 00:33:08,910
nari secondary test shows and test

00:33:06,840 --> 00:33:12,750
that's not true by the unit test chose

00:33:08,910 --> 00:33:15,750
instead so truth and set function as the

00:33:12,750 --> 00:33:20,220
first parameter so the function is the

00:33:15,750 --> 00:33:25,080
the the code they expect to troll the

00:33:20,220 --> 00:33:28,140
error so we're gonna actually import the

00:33:25,080 --> 00:33:31,020
entire assertion library first so so we

00:33:28,140 --> 00:33:32,550
are replacing this native assertion

00:33:31,020 --> 00:33:35,520
library with the try assertion library

00:33:32,550 --> 00:33:41,430
so let's call hey every choir trifa's

00:33:35,520 --> 00:33:43,680
chai dot assert and what we're going to

00:33:41,430 --> 00:33:47,060
do here is we are going to do assert

00:33:43,680 --> 00:33:47,060
dart rose

00:33:48,590 --> 00:33:57,590
function and we're gonna put this piece

00:33:53,100 --> 00:34:01,830
of code over here that should draw area

00:33:57,590 --> 00:34:03,690
into the first function so this way if

00:34:01,830 --> 00:34:07,529
you set name with empty value this

00:34:03,690 --> 00:34:13,470
should show an error and I believe the

00:34:07,529 --> 00:34:16,679
error name is called name cannot be

00:34:13,470 --> 00:34:18,450
empty so there's other types of

00:34:16,679 --> 00:34:19,980
assertion going on so like mean cannot

00:34:18,450 --> 00:34:23,069
be string you can test that if you want

00:34:19,980 --> 00:34:25,970
to as well but you're gonna test name is

00:34:23,069 --> 00:34:31,349
empty so the second parameter that the

00:34:25,970 --> 00:34:33,480
that that sir expects is the name of the

00:34:31,349 --> 00:34:35,929
error message itself so you shouldn't

00:34:33,480 --> 00:34:38,849
throw a generic it shouldn't roll like

00:34:35,929 --> 00:34:41,099
type error you should throw the proper

00:34:38,849 --> 00:34:43,490
error that says name is empty so that is

00:34:41,099 --> 00:34:46,379
actually helpful to whoever's using this

00:34:43,490 --> 00:34:49,799
library whoever's using this setname

00:34:46,379 --> 00:34:52,020
method itself then go ahead and run the

00:34:49,799 --> 00:34:54,629
test so now we have two tests so we

00:34:52,020 --> 00:34:56,970
should see two two times being ran our

00:34:54,629 --> 00:34:58,710
first test which is set name when given

00:34:56,970 --> 00:35:01,680
a non empty string and it's also in

00:34:58,710 --> 00:35:09,150
control area so let's say if we correct

00:35:01,680 --> 00:35:11,250
this it will so if we actually set the

00:35:09,150 --> 00:35:14,940
name and it didn't show any error the

00:35:11,250 --> 00:35:16,410
seductress will will throw an error will

00:35:14,940 --> 00:35:19,319
fail the test and say well we're

00:35:16,410 --> 00:35:23,430
expecting a error to be thrown over here

00:35:19,319 --> 00:35:25,470
but that did not happen so this is how

00:35:23,430 --> 00:35:28,200
it should test your negative scenarios

00:35:25,470 --> 00:35:33,799
as well okay

00:35:28,200 --> 00:35:33,799
so it's very simple to write tests for

00:35:34,160 --> 00:35:40,349
synchronous functions but then if you

00:35:37,740 --> 00:35:42,180
want to test callbacks and promises

00:35:40,349 --> 00:35:45,660
Mokhtar can handle day as well by the

00:35:42,180 --> 00:35:47,339
way you write your test for callbacks

00:35:45,660 --> 00:35:48,900
and promises it's a little bit different

00:35:47,339 --> 00:35:51,150
depending whether you're testing a

00:35:48,900 --> 00:35:55,250
problem is or you're testing a callback

00:35:51,150 --> 00:35:57,650
so how child expects you to write your

00:35:55,250 --> 00:35:59,750
pants for callbacks ones up book it

00:35:57,650 --> 00:36:02,840
gives you a done function so that when

00:35:59,750 --> 00:36:04,609
you finish doing your callback you can

00:36:02,840 --> 00:36:06,470
call the end you should do your

00:36:04,609 --> 00:36:09,140
assertion and then after that you call

00:36:06,470 --> 00:36:11,750
it done function to tell maka that

00:36:09,140 --> 00:36:13,910
you're done with this test it's also for

00:36:11,750 --> 00:36:17,540
example if you are testing a function

00:36:13,910 --> 00:36:20,330
called chef to make sandwich and we can

00:36:17,540 --> 00:36:22,670
pass and we expect the shaft or make

00:36:20,330 --> 00:36:24,380
sandwich to either give us an area or

00:36:22,670 --> 00:36:27,320
sandwich the arrow could be like that's

00:36:24,380 --> 00:36:29,060
no sandwich and or to give us the same

00:36:27,320 --> 00:36:31,849
which back you could say like okay if

00:36:29,060 --> 00:36:35,150
error then called the done function with

00:36:31,849 --> 00:36:36,859
an error otherwise oh we don't have an

00:36:35,150 --> 00:36:39,740
error but we expect the second parameter

00:36:36,859 --> 00:36:42,260
sandwich to exist and then we once we

00:36:39,740 --> 00:36:44,900
are done with an assertion we call it

00:36:42,260 --> 00:36:50,230
done function so if you are doing a

00:36:44,900 --> 00:36:53,210
promise instead we should is similar but

00:36:50,230 --> 00:36:55,250
mocha is able to handle promises on its

00:36:53,210 --> 00:36:57,410
own so all you need to do is to return

00:36:55,250 --> 00:37:00,200
the promise so let's say chef don't make

00:36:57,410 --> 00:37:02,450
sandwich is a promise instead of call

00:37:00,200 --> 00:37:04,910
back you just say shut up make sandwich

00:37:02,450 --> 00:37:06,500
then if the sandwich we call the

00:37:04,910 --> 00:37:09,230
sandwich then expect the same we should

00:37:06,500 --> 00:37:12,589
exist otherwise we'll catch the error

00:37:09,230 --> 00:37:16,849
and then trow it back up and walk away I

00:37:12,589 --> 00:37:19,880
just handle the the error okay so we're

00:37:16,849 --> 00:37:24,680
gonna try this with the Pokedex

00:37:19,880 --> 00:37:26,900
so the Pokedex is say is the database of

00:37:24,680 --> 00:37:29,630
your pokémon's itself so you're going to

00:37:26,900 --> 00:37:31,369
create another test we will start

00:37:29,630 --> 00:37:39,740
writing our asynchronous tests in number

00:37:31,369 --> 00:37:43,160
two pokedex GS and the enemy trick okay

00:37:39,740 --> 00:37:46,720
so let's try writing a test for the safe

00:37:43,160 --> 00:37:49,160
function of pokedex so when you save a

00:37:46,720 --> 00:37:51,950
Pokemon to the database and if the

00:37:49,160 --> 00:37:54,170
Pokemon doesn't exist we should get the

00:37:51,950 --> 00:37:58,359
idea of the ID for the Pokemon should be

00:37:54,170 --> 00:37:58,359
set so we can set that up

00:38:05,189 --> 00:38:15,329
so you create a suit called pokedex you

00:38:12,009 --> 00:38:15,329
can describe the

00:38:17,680 --> 00:38:43,010
safe function and then our pest issues

00:38:26,960 --> 00:38:47,620
it should add Pokemon to pokedex so the

00:38:43,010 --> 00:38:51,590
pocket X is inside our DB folder itself

00:38:47,620 --> 00:38:57,440
so in the opening up the entire pokedex

00:38:51,590 --> 00:39:00,050
easy returns promises so you can see

00:38:57,440 --> 00:39:04,280
that we need to connect to our pokedex

00:39:00,050 --> 00:39:06,620
super storage and we'll close it there's

00:39:04,280 --> 00:39:10,960
also a safe function to add a Pokemon to

00:39:06,620 --> 00:39:10,960
the Pokedex okay

00:39:13,020 --> 00:39:27,720
so let's create our pokedex it's also

00:39:23,710 --> 00:39:27,720
import our pokédex first

00:39:43,820 --> 00:39:50,090
and we need to connect our pokedex to a

00:39:46,940 --> 00:39:53,120
storage mechanism so you're just gonna

00:39:50,090 --> 00:39:56,600
so so you're not because everything is

00:39:53,120 --> 00:39:58,640
is a promise it would actually be

00:39:56,600 --> 00:40:00,680
simpler and easier for us to be using

00:39:58,640 --> 00:40:03,530
the a singer weight method so I'm gonna

00:40:00,680 --> 00:40:03,950
add a Singh to the front of our function

00:40:03,530 --> 00:40:07,820
over here

00:40:03,950 --> 00:40:11,030
sari Singh and then we're just gonna

00:40:07,820 --> 00:40:14,750
wait for our pokedex to be connected to

00:40:11,030 --> 00:40:19,840
our storage weight and we're gonna we're

00:40:14,750 --> 00:40:23,300
gonna save our our pokedex hope I will

00:40:19,840 --> 00:40:27,350
connect our pokedex to a storage file

00:40:23,300 --> 00:40:29,780
there's also we are sponsoring our data

00:40:27,350 --> 00:40:32,720
in a brief MySQL light so will you

00:40:29,780 --> 00:40:46,760
actually just save it to a file storage

00:40:32,720 --> 00:40:55,880
and test the SQL like tree and this

00:40:46,760 --> 00:41:01,550
should be fine okay so um so we're gonna

00:40:55,880 --> 00:41:04,330
create a Pokemon Pokemon again you

00:41:01,550 --> 00:41:04,330
Pokemon

00:41:04,910 --> 00:41:17,380
part the Pokemon class Manos come on

00:41:27,400 --> 00:41:33,710
and then after you created a pokemons

00:41:30,050 --> 00:41:35,440
they're just gonna say okay pokedex save

00:41:33,710 --> 00:41:40,300
the pokemons

00:41:35,440 --> 00:41:42,920
to the Pokedex I'm just gonna await this

00:41:40,300 --> 00:41:46,369
and at the end of it what we're gonna do

00:41:42,920 --> 00:41:51,500
is we're gonna assert that the Pokemon

00:41:46,369 --> 00:41:56,960
idea exists Pokemon dot ID who even say

00:41:51,500 --> 00:42:04,700
that okay the pokemons ID should exist I

00:41:56,960 --> 00:42:09,170
believe and Pokemon ID is a string maybe

00:42:04,700 --> 00:42:16,000
I believe it's a string oh I think it's

00:42:09,170 --> 00:42:18,349
a number actually yeah sure oh to be

00:42:16,000 --> 00:42:22,780
okay I think it should be a string

00:42:18,349 --> 00:42:22,780
should be a string

00:42:29,420 --> 00:42:34,730
yeah the ID yeah so we're gonna save the

00:42:33,050 --> 00:42:36,920
Pokemon to the Pokedex

00:42:34,730 --> 00:42:40,010
and the Pokedex behavior is that if the

00:42:36,920 --> 00:42:52,460
Pokemon never existed ever we are going

00:42:40,010 --> 00:42:55,930
to set an ID for the Pokemon okay not

00:42:52,460 --> 00:42:55,930
let me check yourself

00:42:56,470 --> 00:43:02,990
oops

00:42:57,620 --> 00:43:06,560
I think we need to initialize our yeah

00:43:02,990 --> 00:43:08,600
we need to create a DB first sorry about

00:43:06,560 --> 00:43:11,500
that let me check our instructions for

00:43:08,600 --> 00:43:11,500
creating the DB

00:43:20,810 --> 00:43:26,910
today let me change you you guys get

00:43:24,450 --> 00:43:29,400
lost there's a test of solutions folder

00:43:26,910 --> 00:43:35,430
which I'm gonna cheat with and actually

00:43:29,400 --> 00:43:38,000
grab our BB setup function which I think

00:43:35,430 --> 00:43:38,000
it's not here either

00:43:38,240 --> 00:43:41,570
yeah yeah

00:44:04,490 --> 00:44:09,320
so give me we have time to pass

00:44:06,780 --> 00:44:09,320
officials

00:44:09,859 --> 00:44:12,859
okay

00:44:20,950 --> 00:44:26,890
Oh actually no the failure is because

00:44:23,890 --> 00:44:29,700
the pokemons name is not a synod in Iran

00:44:26,890 --> 00:44:29,700
trendy stands before

00:44:37,820 --> 00:44:43,560
expiry yeah you need to run next maybe

00:44:40,920 --> 00:44:47,390
let me just check this out first see ya

00:44:43,560 --> 00:44:50,280
okay so uh so what you do first is uh

00:44:47,390 --> 00:44:52,980
let's skip ahead to this segment here I

00:44:50,280 --> 00:44:55,830
need you to install next and to setup

00:44:52,980 --> 00:45:00,870
the database so the instructions here is

00:44:55,830 --> 00:45:03,480
NPM install next - G and then run next

00:45:00,870 --> 00:45:06,420
migrate up with the but change the

00:45:03,480 --> 00:45:10,770
environment to test itself so NPM

00:45:06,420 --> 00:45:14,100
install next there's G so after you

00:45:10,770 --> 00:45:17,040
install that you're just gonna run the

00:45:14,100 --> 00:45:20,070
migration function which is next

00:45:17,040 --> 00:45:25,710
migrated up but change the environment

00:45:20,070 --> 00:45:29,070
from development to test okay why is in

00:45:25,710 --> 00:45:30,810
the a better way if you get get this

00:45:29,070 --> 00:45:32,880
command I say you cannot open a database

00:45:30,810 --> 00:45:39,060
file that means you need to create your

00:45:32,880 --> 00:45:41,240
storage folder why is it still not able

00:45:39,060 --> 00:45:41,240
to

00:45:44,720 --> 00:45:47,320
ha

00:45:53,530 --> 00:45:59,110
yep so what is thus is it's gonna run

00:45:56,890 --> 00:46:00,250
the migrations steps a it's gonna become

00:45:59,110 --> 00:46:03,400
irrelevant later

00:46:00,250 --> 00:46:05,980
so in this examples we are just gonna

00:46:03,400 --> 00:46:07,780
run the test verse beforehand but later

00:46:05,980 --> 00:46:10,840
on in data examples we are just gonna

00:46:07,780 --> 00:46:13,090
get it has to always roll back the the

00:46:10,840 --> 00:46:15,430
database and to migrate it up and then

00:46:13,090 --> 00:46:17,320
to see your database so so first we are

00:46:15,430 --> 00:46:17,740
just gonna do the migration by hand

00:46:17,320 --> 00:46:20,650
please

00:46:17,740 --> 00:46:24,610
and then now let's run the test again

00:46:20,650 --> 00:46:26,980
IBM test yeah so this test is now

00:46:24,610 --> 00:46:30,640
passing because we finally set out a

00:46:26,980 --> 00:46:34,180
database and yeah the is running a test

00:46:30,640 --> 00:46:36,430
to say that okay it shoot at the Pokemon

00:46:34,180 --> 00:46:38,320
to the database and the Pokemon idea

00:46:36,430 --> 00:46:41,260
should exist and the ID should be a

00:46:38,320 --> 00:46:43,480
number so it's a is anyone start so far

00:46:41,260 --> 00:46:46,390
we've the okay so it is not give you

00:46:43,480 --> 00:46:49,830
guys a bit more time to get this era

00:46:46,390 --> 00:46:49,830
because next can be a bit tricky

00:47:06,920 --> 00:47:10,239
[Music]

00:47:45,150 --> 00:47:52,720
so so I'm gonna repeat any structures

00:47:48,910 --> 00:47:56,080
again to set up your database after you

00:47:52,720 --> 00:47:58,420
in stone thanks globally you we are

00:47:56,080 --> 00:48:00,940
gonna run the migrate up and what

00:47:58,420 --> 00:48:03,640
migrate up actually does is it's going

00:48:00,940 --> 00:48:05,680
to run all the migrations within this

00:48:03,640 --> 00:48:08,830
photo over here so if you look at the

00:48:05,680 --> 00:48:11,470
migrations folder you'll see that there

00:48:08,830 --> 00:48:13,810
is two functions over here one is up

00:48:11,470 --> 00:48:16,990
when it's down up actually that's a

00:48:13,810 --> 00:48:19,630
setup for you and what it over here is

00:48:16,990 --> 00:48:22,540
going to create the pokémons table with

00:48:19,630 --> 00:48:24,520
the incremental ID and a name and then

00:48:22,540 --> 00:48:29,410
expects the name to be unique as well

00:48:24,520 --> 00:48:32,080
and you'll create a JSON table JSON

00:48:29,410 --> 00:48:34,570
column and all attributes and timestamps

00:48:32,080 --> 00:48:38,100
as well and then if you say migrate down

00:48:34,570 --> 00:48:38,100
are you going to just drop the table

00:48:58,170 --> 00:49:04,080
have you know what happened here

00:49:09,440 --> 00:49:21,529
there's no much enough power to charge

00:49:16,220 --> 00:49:24,410
that he doesn't want to charge from hmm

00:49:21,529 --> 00:49:29,029
I think there's not enough yeah I think

00:49:24,410 --> 00:49:32,539
that's not a need to remove you know a

00:49:29,029 --> 00:49:36,650
but you don't have I and I will connect

00:49:32,539 --> 00:49:40,160
to this thoroughly hm

00:49:36,650 --> 00:49:42,819
yes yes okay right Scalia this is you -

00:49:40,160 --> 00:49:42,819
yeah

00:49:50,140 --> 00:49:57,490
because there's nothing else are here

00:49:52,790 --> 00:49:57,490
because there's lady changing yeah yeah

00:50:06,650 --> 00:50:13,640
sorry you just use scroll to the part

00:50:10,219 --> 00:50:16,939
where they are subject where are we drop

00:50:13,640 --> 00:50:18,979
database okay so you go to the readme if

00:50:16,939 --> 00:50:21,619
you want to jump ahead and go a little

00:50:18,979 --> 00:50:32,269
bit faster you can alter it Wow

00:50:21,619 --> 00:50:33,890
yeah so is set number two exercise so

00:50:32,269 --> 00:50:37,009
second you can start from here actually

00:50:33,890 --> 00:50:40,099
so you pokedex or drop table and create

00:50:37,009 --> 00:50:43,449
yeah mm-hmm yeah you know we're gonna do

00:50:40,099 --> 00:50:43,449
a more complex formally on

00:50:50,860 --> 00:51:01,990
oh yeah no such diva okay so so what you

00:50:58,690 --> 00:51:05,740
have to do is to have you install next

00:51:01,990 --> 00:51:08,410
okay you have so so oh I didn't need to

00:51:05,740 --> 00:51:10,060
do run the migrate migrate a Pokemon

00:51:08,410 --> 00:51:11,440
again I think it's your sound there

00:51:10,060 --> 00:51:17,670
because he's complaining that the TiVo

00:51:11,440 --> 00:51:17,670
is not set up yes

00:51:23,400 --> 00:51:29,079
please hurry up daddy can you run the

00:51:25,539 --> 00:51:37,480
test again wait wait

00:51:29,079 --> 00:51:45,190
yeah run the test it MP and that's the

00:51:37,480 --> 00:51:47,549
run test so now the NPN pest to run the

00:51:45,190 --> 00:51:47,549
test yeah

00:51:56,350 --> 00:52:04,810
do you have the second your you're not

00:52:02,320 --> 00:52:11,800
running the Pokedex test so where is

00:52:04,810 --> 00:52:14,050
your pokedex test yeah so we are testing

00:52:11,800 --> 00:52:21,130
the Pokedex so that we can pass the

00:52:14,050 --> 00:52:24,490
assertions okay so so eating we can

00:52:21,130 --> 00:52:26,820
follow the meet me where continue from

00:52:24,490 --> 00:52:30,580
[Music]

00:52:26,820 --> 00:52:32,170
so you can continue from this part over

00:52:30,580 --> 00:52:34,600
here so testing for missus so you can

00:52:32,170 --> 00:52:36,300
write your test for testing the Pokedex

00:52:34,600 --> 00:52:54,850
so that we can actually test the

00:52:36,300 --> 00:52:56,740
database itself yeah yeah yes have you

00:52:54,850 --> 00:52:59,770
do you have the storage pool oh it's

00:52:56,740 --> 00:53:02,080
always stays okay so can you

00:52:59,770 --> 00:53:05,040
I think it's dot slash because you're

00:53:02,080 --> 00:53:05,040
running it at the room

00:53:07,120 --> 00:53:12,490
okay now EB says insert you need to run

00:53:10,340 --> 00:53:15,290
the migrations people set up the the

00:53:12,490 --> 00:53:17,990
database so actually the database has to

00:53:15,290 --> 00:53:31,760
be named test of s Carol I because it's

00:53:17,990 --> 00:53:34,820
configured to test yeah then you need to

00:53:31,760 --> 00:53:38,180
run the migration scripts actually so

00:53:34,820 --> 00:53:40,220
the migration script is yeah but change

00:53:38,180 --> 00:53:43,840
environment to test so that you are

00:53:40,220 --> 00:53:43,840
migrating the you testing environment

00:53:45,850 --> 00:53:50,140
okay you created a table so you can't

00:53:48,080 --> 00:53:52,730
run a test again

00:53:50,140 --> 00:53:59,150
yeah yeah what if you're running a game

00:53:52,730 --> 00:54:01,220
again every the second time it will be

00:53:59,150 --> 00:54:03,260
lost I think you'll be after epic tools

00:54:01,220 --> 00:54:05,390
I'll try to actually skip some of the

00:54:03,260 --> 00:54:11,690
parts like callback so that so I think

00:54:05,390 --> 00:54:15,560
maybe in one hour searching but only

00:54:11,690 --> 00:54:17,770
discos and I will come back okay yeah

00:54:15,560 --> 00:54:17,770
okay

00:54:26,060 --> 00:54:35,040
unable to open that Avista so okay so do

00:54:30,390 --> 00:54:36,780
your test I think changes to one dot

00:54:35,040 --> 00:54:42,300
slash yeah because you're running it

00:54:36,780 --> 00:54:45,000
other oh yeah yeah that's why yeah so

00:54:42,300 --> 00:54:48,420
are you you're running at the root so

00:54:45,000 --> 00:54:50,550
that okay so if you get this error

00:54:48,420 --> 00:54:54,500
insert into you need to render migration

00:54:50,550 --> 00:54:58,920
and change the environment to test yep

00:54:54,500 --> 00:55:01,560
yep so run that so it's really up to

00:54:58,920 --> 00:55:09,240
date can you run the run run your purse

00:55:01,560 --> 00:55:12,270
again so okay so no okay so this reason

00:55:09,240 --> 00:55:13,470
is because you already added Pikachu to

00:55:12,270 --> 00:55:15,960
the database and that's how you add

00:55:13,470 --> 00:55:17,400
another Pikachu so the a that's actually

00:55:15,960 --> 00:55:19,740
the next party we're going to but you

00:55:17,400 --> 00:55:22,130
can read the readme your go faster to

00:55:19,740 --> 00:55:28,910
clean up the database this haven't you

00:55:22,130 --> 00:55:32,130
know know so so so if you are getting

00:55:28,910 --> 00:55:35,850
error that says you can't insert to the

00:55:32,130 --> 00:55:38,460
database because poke pokémon names is a

00:55:35,850 --> 00:55:40,380
unique must be a unique Paradise

00:55:38,460 --> 00:55:42,930
internal if you keep running the test

00:55:40,380 --> 00:55:45,840
Pikachu is already in a database because

00:55:42,930 --> 00:55:47,730
you are in the first test so what we

00:55:45,840 --> 00:55:51,090
have to do is to clean up the database

00:55:47,730 --> 00:55:52,920
and what maca does is it gives you hooks

00:55:51,090 --> 00:55:55,170
so we're gonna use the hooks so that

00:55:52,920 --> 00:55:57,980
every time we run a test we are gonna

00:55:55,170 --> 00:56:03,630
drop the database and create a again

00:55:57,980 --> 00:56:06,390
yeah so over here before we are we run

00:56:03,630 --> 00:56:09,650
our polka dots decks test we're gonna

00:56:06,390 --> 00:56:12,690
say before everything so the pocket

00:56:09,650 --> 00:56:15,750
there is actually a lot of hooks there

00:56:12,690 --> 00:56:18,960
is the before who the after who that

00:56:15,750 --> 00:56:20,900
runs once after or before and after all

00:56:18,960 --> 00:56:24,390
health and Anessa before each burger

00:56:20,900 --> 00:56:27,270
we're gonna do four before each so that

00:56:24,390 --> 00:56:30,440
we get a clean clean setup for each of

00:56:27,270 --> 00:56:30,440
your your test

00:56:36,839 --> 00:56:45,330
you know I'm gonna do is I'm gonna move

00:56:39,790 --> 00:56:54,130
our pokey decks to the top over here

00:56:45,330 --> 00:56:56,339
before everything I okay baby she I

00:56:54,130 --> 00:56:56,339
don't

00:56:57,490 --> 00:56:59,490
Oh

00:57:04,089 --> 00:57:10,300
so before each test you're going to

00:57:06,950 --> 00:57:10,300
connect to the database

00:57:20,530 --> 00:57:29,130
you know believe we have a let me just

00:57:26,770 --> 00:57:29,130
check the

00:57:33,650 --> 00:57:37,900
oh you're gonna call the meat all

00:58:12,140 --> 00:58:17,560
so we can also just close the Pokedex

00:58:15,470 --> 00:58:19,880
after after each - just - just in case

00:58:17,560 --> 00:58:22,610
as well so you're just gonna run this

00:58:19,880 --> 00:58:25,820
again yeah

00:58:22,610 --> 00:58:28,310
so so now we be set up and tear down

00:58:25,820 --> 00:58:31,340
he's gonna drop the they need all the

00:58:28,310 --> 00:58:33,410
records so that because she is no longer

00:58:31,340 --> 00:58:36,290
that the database any time you run the

00:58:33,410 --> 00:58:38,540
data the the test it will add Pikachu to

00:58:36,290 --> 00:58:40,430
a fresh new database way because she

00:58:38,540 --> 00:58:42,740
wasn't there before so now you wouldn't

00:58:40,430 --> 00:58:48,160
get you you'll get a clean environment

00:58:42,740 --> 00:58:48,160
to pass with every time okay

00:58:50,589 --> 00:58:58,660
so is anyone stuck so far okay

00:58:59,440 --> 00:59:11,900
okay so we're gonna move on to testing

00:59:03,350 --> 00:59:14,390
your API is then so let's start our

00:59:11,900 --> 00:59:16,670
server so that we can test the API is

00:59:14,390 --> 00:59:19,460
that so the API is are running so that

00:59:16,670 --> 00:59:21,440
we can test it so to run out tester we

00:59:19,460 --> 00:59:26,540
are gonna run I think we already run

00:59:21,440 --> 00:59:28,760
when this oh okay I'll run the migration

00:59:26,540 --> 00:59:30,650
test scripts again for the development

00:59:28,760 --> 00:59:32,720
environment so that when we start the

00:59:30,650 --> 00:59:34,520
test I will restart so but it's gonna

00:59:32,720 --> 00:59:37,120
start in the development environment so

00:59:34,520 --> 00:59:37,120
we're gonna test that

00:59:37,660 --> 00:59:40,520
okay

00:59:38,840 --> 00:59:43,550
so run your migration test for the

00:59:40,520 --> 00:59:45,020
development environment this time

00:59:43,550 --> 00:59:46,790
there's an additional command you have

00:59:45,020 --> 00:59:49,220
to run the seep command

00:59:46,790 --> 00:59:51,950
so this is just gonna run the zip file

00:59:49,220 --> 00:59:53,720
they will add all the the first

00:59:51,950 --> 00:59:55,040
generation of Pokemon so the database so

00:59:53,720 --> 00:59:59,810
that when you get the API there's

00:59:55,040 --> 01:00:06,370
something for you to go with the APM

00:59:59,810 --> 01:00:09,050
start and now we have the tests on the

01:00:06,370 --> 01:00:12,040
port 3000 so you should be able to see

01:00:09,050 --> 01:00:12,040
this

01:00:13,170 --> 01:00:18,340
okay so you should see your application

01:00:15,940 --> 01:00:22,570
loaded here and a pen we're gonna test

01:00:18,340 --> 01:00:25,510
this API the pokemons start stash

01:00:22,570 --> 01:00:29,890
pokemons yeah so you should see if you

01:00:25,510 --> 01:00:34,480
go to / API - Pokemon you should see I

01:00:29,890 --> 01:00:37,119
think about 151 pokemons so you don't

01:00:34,480 --> 01:00:40,140
have all these pokemons I should base

01:00:37,119 --> 01:00:40,140
your hands and get some help

01:01:27,810 --> 01:01:30,440
right

01:01:38,680 --> 01:01:45,710
so we look into the since thought Jaso

01:01:43,160 --> 01:01:48,800
just briefly explain it is what its

01:01:45,710 --> 01:01:51,650
gonna do is it's gonna go to the Pokemon

01:01:48,800 --> 01:01:54,170
database delete everything and it's just

01:01:51,650 --> 01:01:56,270
gonna read your Pokemon or CSV file

01:01:54,170 --> 01:01:58,520
which has a la bhakti months but just

01:01:56,270 --> 01:02:01,880
your first gen pokemons and it's just

01:01:58,520 --> 01:02:05,150
gonna start reading your CSV line by

01:02:01,880 --> 01:02:07,490
line and inserting it so then we get all

01:02:05,150 --> 01:02:08,690
pokemons and every time you run a seat

01:02:07,490 --> 01:02:13,130
phone it's just gonna drop everything

01:02:08,690 --> 01:02:16,099
and see CD over and over again so let's

01:02:13,130 --> 01:02:20,599
try writing some API cares so to write

01:02:16,099 --> 01:02:23,510
our API test there are some plugins that

01:02:20,599 --> 01:02:26,210
you can put into chai there's so one of

01:02:23,510 --> 01:02:29,260
the nice things about China is that is

01:02:26,210 --> 01:02:32,089
very extensible so there are a lot of

01:02:29,260 --> 01:02:36,410
extensions for China is useful so let me

01:02:32,089 --> 01:02:38,359
just see where it is our world so so

01:02:36,410 --> 01:02:40,760
what's on the useful plugins I released

01:02:38,359 --> 01:02:41,510
over here is a child she TV show we are

01:02:40,760 --> 01:02:44,119
gonna use

01:02:41,510 --> 01:02:47,330
there's also child JSON schema which you

01:02:44,119 --> 01:02:49,910
can use to validate if the response is

01:02:47,330 --> 01:02:52,460
looks as Ackley like the schema they

01:02:49,910 --> 01:02:55,220
expected you can use child Dom for

01:02:52,460 --> 01:02:57,050
testing Dom elements you can say Oh grab

01:02:55,220 --> 01:02:59,060
this Dom element that's the Dom element

01:02:57,050 --> 01:03:03,230
have the actually built of name equals

01:02:59,060 --> 01:03:05,690
to ABC and I use it to test or a URL so

01:03:03,230 --> 01:03:08,330
gonna say right oh it's URL equals 2 /

01:03:05,690 --> 01:03:10,910
ki slash Pokemon for example they also

01:03:08,330 --> 01:03:13,430
use it to test power so you can say use

01:03:10,910 --> 01:03:16,849
the triphala to test is is the directory

01:03:13,430 --> 01:03:19,010
created with this form so and that's

01:03:16,849 --> 01:03:21,260
just for fun that's a child okay if you

01:03:19,010 --> 01:03:23,450
really want to do a very silly version

01:03:21,260 --> 01:03:24,609
of your tie key it's actually quite

01:03:23,450 --> 01:03:28,010
funny

01:03:24,609 --> 01:03:29,570
so try doggy instead of saying this

01:03:28,010 --> 01:03:34,330
crisis such get treats

01:03:29,570 --> 01:03:38,119
wow very tense yeah so it's just for fun

01:03:34,330 --> 01:03:41,540
okay so let's start writing our word our

01:03:38,119 --> 01:03:45,020
API test and before we write our API

01:03:41,540 --> 01:03:46,580
test please install try HTTP and now

01:03:45,020 --> 01:03:49,820
we're gonna start working from a new

01:03:46,580 --> 01:03:52,460
folder again go to tools

01:03:49,820 --> 01:03:57,560
EP I guess we're gonna create new

01:03:52,460 --> 01:04:00,550
because import the try HTTP to our

01:03:57,560 --> 01:04:00,550
application

01:04:11,400 --> 01:04:20,329
okay so once you install try itself you

01:04:15,749 --> 01:04:26,789
need to call child or use IH t PT TDP to

01:04:20,329 --> 01:04:28,109
use the plugin just go and copy that and

01:04:26,789 --> 01:04:30,589
then we're gonna do the same thing in

01:04:28,109 --> 01:04:30,589
this cry

01:04:35,990 --> 01:04:41,960
and let's call this API tests

01:04:42,910 --> 01:04:59,740
and let us grab this and this has a will

01:04:49,000 --> 01:04:59,740
get epi Pokemon and then it

01:05:00,910 --> 01:05:09,040
should get 151 pokemons

01:05:04,880 --> 01:05:09,040
again we should retreat

01:05:25,700 --> 01:05:35,960
so let's take a look at the tie HTTP

01:05:29,319 --> 01:05:39,410
documentation itself and I for to you to

01:05:35,960 --> 01:05:42,710
do post requests to try what you have to

01:05:39,410 --> 01:05:45,170
do is to say okay try the request the

01:05:42,710 --> 01:05:47,630
base URL of an application and then the

01:05:45,170 --> 01:05:51,260
path that you want to test selections

01:05:47,630 --> 01:05:53,960
grab this and our application is hosted

01:05:51,260 --> 01:06:00,309
port 3000 so just change this to 3000

01:05:53,960 --> 01:06:07,549
and the you're gonna get the API

01:06:00,309 --> 01:06:12,319
pokémons request and then the last thing

01:06:07,549 --> 01:06:14,869
you have to do is to do send send to

01:06:12,319 --> 01:06:22,099
perform the request itself so this is

01:06:14,869 --> 01:06:26,839
also a asynchronous request so you can

01:06:22,099 --> 01:06:30,530
either use a callback or you can or you

01:06:26,839 --> 01:06:33,950
can use promises to handle this so try

01:06:30,530 --> 01:06:36,290
the request actually returns both

01:06:33,950 --> 01:06:38,480
there's a callback version and there's a

01:06:36,290 --> 01:06:45,520
promise version so let's just use the

01:06:38,480 --> 01:06:48,650
promised version say sync

01:06:45,520 --> 01:06:54,319
and after you send it we want to say I

01:06:48,650 --> 01:06:58,339
believe it's a den then so I should do

01:06:54,319 --> 01:07:03,410
it then your experiment spawns otherwise

01:06:58,339 --> 01:07:08,569
if you give us an error just trow the

01:07:03,410 --> 01:07:13,250
arrow so then now we can assert the

01:07:08,569 --> 01:07:17,359
response itself so if you look at but

01:07:13,250 --> 01:07:21,970
solve assertions does try support so the

01:07:17,359 --> 01:07:24,980
triage TTP parking it extends the expect

01:07:21,970 --> 01:07:27,260
syntax so that you can have expect to

01:07:24,980 --> 01:07:33,040
have status 1 2 3 so you just want to

01:07:27,260 --> 01:07:33,040
make sure that he has status 2000 first

01:07:34,000 --> 01:07:37,990
then go around pass again

01:07:40,790 --> 01:07:48,470
hmm

01:07:43,040 --> 01:07:58,070
okay expect is not defined missing

01:07:48,470 --> 01:08:00,500
something sorry yeah yeah yeah I forgot

01:07:58,070 --> 01:08:04,790
to put that in so I think my

01:08:00,500 --> 01:08:08,300
documentation is missing one part so you

01:08:04,790 --> 01:08:10,580
need to require to expect library furs

01:08:08,300 --> 01:08:13,070
from chai and then you call try to use

01:08:10,580 --> 01:08:18,049
Chinese DTP to use the plug-in and you

01:08:13,070 --> 01:08:20,299
extend the expect library let's run a

01:08:18,049 --> 01:08:26,600
test again so tada

01:08:20,299 --> 01:08:29,770
so so we expect the the response to give

01:08:26,600 --> 01:08:37,130
us back 2000 we can also expect the

01:08:29,770 --> 01:08:40,400
nearest bones to be to have I believe

01:08:37,130 --> 01:08:44,500
let me let's just test the haters so let

01:08:40,400 --> 01:08:49,480
me cheat a bit in look at our solutions

01:08:44,500 --> 01:08:49,480
so that's let's add this in

01:08:52,609 --> 01:09:00,109
and uh take a look at this so that's a

01:08:58,520 --> 01:09:02,240
lot assertions you can do on your

01:09:00,109 --> 01:09:06,230
request you can say okay expect the

01:09:02,240 --> 01:09:08,120
status to be 2000 expect da de we expect

01:09:06,230 --> 01:09:11,750
to have a content type header that

01:09:08,120 --> 01:09:13,310
should be a JSON in utf-8 format and if

01:09:11,750 --> 01:09:16,550
we want to make sure that the response

01:09:13,310 --> 01:09:19,160
we get back is a JSON and the response

01:09:16,550 --> 01:09:21,850
body itself we want it to be a type of

01:09:19,160 --> 01:09:24,680
array and let's make sure that we have

01:09:21,850 --> 01:09:26,839
151 pokemon actually and the first

01:09:24,680 --> 01:09:28,520
pokemon that we should get its name it

01:09:26,839 --> 01:09:32,330
should be a bubble so if you see not in

01:09:28,520 --> 01:09:34,010
this order then is our is not for it's

01:09:32,330 --> 01:09:35,720
not correct because we see that our data

01:09:34,010 --> 01:09:37,990
with the first pokemon to be about a

01:09:35,720 --> 01:09:37,990
song

01:09:42,940 --> 01:09:49,040
okay so I think it got different I think

01:09:46,880 --> 01:09:53,320
you have seeded the wrong data for

01:09:49,040 --> 01:09:58,449
myself so I actually have 721 data

01:09:53,320 --> 01:09:58,449
let me redo my

01:10:43,530 --> 01:10:48,070
my seat fall is kind of rhombus is

01:10:46,150 --> 01:10:51,460
sitting me 731

01:10:48,070 --> 01:11:02,170
pokémon's instead of 151 - we'll go with

01:10:51,460 --> 01:11:04,260
that and change my best yeah okay there

01:11:02,170 --> 01:11:04,260
you go

01:11:05,460 --> 01:11:11,409
so if you wanna test post request is

01:11:08,739 --> 01:11:13,630
actually pretty straightforward as well

01:11:11,409 --> 01:11:18,280
so let's grab let's take a look at the

01:11:13,630 --> 01:11:20,380
solution for adding a pokemon so if you

01:11:18,280 --> 01:11:26,170
want to do you want to add a Pokemon

01:11:20,380 --> 01:11:30,460
instead so you can actually just say

01:11:26,170 --> 01:11:33,880
pose api the api day one and then send

01:11:30,460 --> 01:11:36,070
the data over and again do the same

01:11:33,880 --> 01:11:38,320
thing is gonna expect colors just like

01:11:36,070 --> 01:11:43,179
that's me one that's moved to us a new

01:11:38,320 --> 01:11:45,909
trio over there just at this and you

01:11:43,179 --> 01:11:48,639
will send the pokemon the military over

01:11:45,909 --> 01:11:51,059
to the api created and then we expect

01:11:48,639 --> 01:11:54,190
the response to give us back the Moochie

01:11:51,059 --> 01:11:56,289
pokemon itself and the body should

01:11:54,190 --> 01:12:01,539
contain a json with the name of the

01:11:56,289 --> 01:12:04,119
pokemon being new tree okay so similarly

01:12:01,539 --> 01:12:06,369
for API test because it's still

01:12:04,119 --> 01:12:08,739
interacting with our database we want to

01:12:06,369 --> 01:12:12,489
set it up and tear it down again we also

01:12:08,739 --> 01:12:15,309
don't want to always keep our our

01:12:12,489 --> 01:12:17,409
database a web server to syria we want

01:12:15,309 --> 01:12:20,650
to ultimately get the test will start

01:12:17,409 --> 01:12:23,679
the server and to turn it off again so

01:12:20,650 --> 01:12:27,670
to do this what we can actually do is to

01:12:23,679 --> 01:12:30,070
use triking she oughta make the try HTTP

01:12:27,670 --> 01:12:30,460
can actually do this automatically for

01:12:30,070 --> 01:12:33,309
you

01:12:30,460 --> 01:12:35,710
so all you need to do is to say let's

01:12:33,309 --> 01:12:38,349
get d that's just listen to your

01:12:35,710 --> 01:12:39,940
application and then it was what it does

01:12:38,349 --> 01:12:42,489
is before each you will start the server

01:12:39,940 --> 01:12:44,469
and shut it down instead of you having

01:12:42,489 --> 01:12:46,630
to say the part of the server is at

01:12:44,469 --> 01:12:48,460
three thousand and before you open run a

01:12:46,630 --> 01:12:50,110
test you need to open up the server so

01:12:48,460 --> 01:12:54,130
that's a little bit of a two-step

01:12:50,110 --> 01:12:56,789
process so we're gonna import our

01:12:54,130 --> 01:13:05,329
application so cons

01:12:56,789 --> 01:13:05,329
that equals to require the sovereignty

01:13:08,190 --> 01:13:15,250
so you import our application and then

01:13:12,040 --> 01:13:17,020
instead of saying a request the absolute

01:13:15,250 --> 01:13:19,750
URL we're just going to say request the

01:13:17,020 --> 01:13:22,960
application and here is requesting the

01:13:19,750 --> 01:13:33,730
application as well and that's just from

01:13:22,960 --> 01:13:36,900
this oh happy it's not defined by having

01:13:33,730 --> 01:13:36,900
some indentation area

01:13:43,389 --> 01:13:50,380
okay so this is essentially the same as

01:13:47,409 --> 01:13:53,440
what we are doing before but why does is

01:13:50,380 --> 01:13:57,580
it automatically turn on your server and

01:13:53,440 --> 01:14:01,380
turning off when you are done so then we

01:13:57,580 --> 01:14:05,889
are gonna do our set our hooks again so

01:14:01,380 --> 01:14:11,100
to clean up our database as well so

01:14:05,889 --> 01:14:11,100
before each standout before each again

01:14:26,300 --> 01:14:30,660
okay so what we're gonna do is we are

01:14:28,680 --> 01:14:33,270
gonna so previously we've been running

01:14:30,660 --> 01:14:36,240
our next migration script by hanging in

01:14:33,270 --> 01:14:37,980
the command line but we want to be we

01:14:36,240 --> 01:14:40,290
are developers going to be as lazy as

01:14:37,980 --> 01:14:42,600
possible we actually want a test to run

01:14:40,290 --> 01:14:47,610
the next migration script on on its own

01:14:42,600 --> 01:14:51,180
so what we can do is you wanna import

01:14:47,610 --> 01:14:52,890
next inside and next we want to turn

01:14:51,180 --> 01:14:55,560
next to setup with the following

01:14:52,890 --> 01:14:58,110
configuration file which is the test

01:14:55,560 --> 01:14:59,670
environment configuration file the

01:14:58,110 --> 01:15:01,710
configuration file is defined in the

01:14:59,670 --> 01:15:03,720
next fall I think the path here is wrong

01:15:01,710 --> 01:15:07,650
in my have to correct that so the next

01:15:03,720 --> 01:15:11,400
file is define in your route itself in a

01:15:07,650 --> 01:15:14,490
route defines that the the environment

01:15:11,400 --> 01:15:16,080
the file name for development the file

01:15:14,490 --> 01:15:20,330
name for test and the file name for

01:15:16,080 --> 01:15:23,640
production itself so just grab grab the

01:15:20,330 --> 01:15:25,200
configuration from there and then what

01:15:23,640 --> 01:15:27,780
we'll do is we'll run the rollback

01:15:25,200 --> 01:15:29,700
script we go to run your next migrate

01:15:27,780 --> 01:15:33,180
down which simply just drops the

01:15:29,700 --> 01:15:36,450
database and then next migrate leaders

01:15:33,180 --> 01:15:38,550
actually upgrades all your schema to the

01:15:36,450 --> 01:15:41,730
latest version of the migration and then

01:15:38,550 --> 01:15:44,460
we're going to do is before each of the

01:15:41,730 --> 01:15:46,260
tests see the database again so we see

01:15:44,460 --> 01:15:48,450
the database or just drop all the

01:15:46,260 --> 01:15:50,340
entries and put it back again so just

01:15:48,450 --> 01:16:00,050
some I'm just gonna copy and paste this

01:15:50,340 --> 01:16:02,880
and put it here and also remember to

01:16:00,050 --> 01:16:04,740
import so you don't need to import next

01:16:02,880 --> 01:16:07,560
because it's already here but we

01:16:04,740 --> 01:16:12,870
actually need to set the process to be

01:16:07,560 --> 01:16:14,760
tests so I just put it here we go so

01:16:12,870 --> 01:16:19,050
this is what you should look like when

01:16:14,760 --> 01:16:24,740
you're your hook should look like let's

01:16:19,050 --> 01:16:24,740
run the test again let's build

01:16:25,330 --> 01:16:35,790
you cannot destroy of undefined or Nexus

01:16:29,050 --> 01:16:35,790
Anglophone twice next time you fine

01:17:02,080 --> 01:17:07,790
what's going on here

01:17:05,220 --> 01:17:07,790
huh

01:17:34,330 --> 01:17:38,360
okay I'm not too sure why the previous

01:17:36,680 --> 01:17:40,520
code was complaining that next was

01:17:38,360 --> 01:17:44,450
undefined but I just copied my solution

01:17:40,520 --> 01:17:48,410
please study again so try this out and

01:17:44,450 --> 01:17:50,540
you should be able to retest your ad

01:17:48,410 --> 01:17:54,140
function again again so we can actually

01:17:50,540 --> 01:17:58,040
try doing these two times just to be

01:17:54,140 --> 01:18:00,770
sure that we don't try at mill two in

01:17:58,040 --> 01:18:06,800
two different tests and you should not

01:18:00,770 --> 01:18:08,270
show us any error boom no money so we're

01:18:06,800 --> 01:18:21,610
just gonna try this just to make sure

01:18:08,270 --> 01:18:21,610
that it's okay it's money

01:18:23,520 --> 01:18:30,990
care for some use I'm getting 151

01:18:27,220 --> 01:18:30,990
instead so once I have one here

01:18:59,909 --> 01:19:06,360
so I added the at Pokemon test two times

01:19:04,230 --> 01:19:09,030
on purpose just to make sure that the

01:19:06,360 --> 01:19:18,630
seat is working let me get my tummy no

01:19:09,030 --> 01:19:21,480
again yeah so he's adding the Pokemon

01:19:18,630 --> 01:19:23,429
twice but it's like no problem like the

01:19:21,480 --> 01:19:25,920
the seed is working and it's carrying a

01:19:23,429 --> 01:19:37,110
database between each test so there you

01:19:25,920 --> 01:19:39,480
go okay so is anyone stuck give you guys

01:19:37,110 --> 01:19:49,290
about ten minutes before we move on to

01:19:39,480 --> 01:19:58,260
end-to-end testing yeah we spoke water

01:19:49,290 --> 01:20:00,750
as well so ideally try to set it up and

01:19:58,260 --> 01:20:02,880
so that you can save it be a pine and

01:20:00,750 --> 01:20:11,940
then I need something I can't go grab

01:20:02,880 --> 01:20:13,980
one of the keys around here so I can run

01:20:11,940 --> 01:20:16,969
it set up Paul exercise three point

01:20:13,980 --> 01:20:16,969
three pairs of your time

01:20:31,730 --> 01:20:38,270
and to end testing and some notes about

01:20:35,000 --> 01:20:40,220
using next doesn't matter whether your

01:20:38,270 --> 01:20:43,430
project already uses nets for the

01:20:40,220 --> 01:20:45,590
database you can just use notes on its

01:20:43,430 --> 01:20:47,750
own to see the databases from so that's

01:20:45,590 --> 01:20:54,650
helpful enough for you to get some of

01:20:47,750 --> 01:20:58,670
the tests are seeded so we have all your

01:20:54,650 --> 01:21:01,280
back and cover with unit testing and in

01:20:58,670 --> 01:21:04,790
API testing so that's that's your

01:21:01,280 --> 01:21:06,950
front-end itself so buffering itself we

01:21:04,790 --> 01:21:10,700
usually perform our users after

01:21:06,950 --> 01:21:13,100
inspecting and one very strict way of

01:21:10,700 --> 01:21:15,440
defining acceptance testing is that the

01:21:13,100 --> 01:21:17,720
software means the business requirements

01:21:15,440 --> 01:21:21,590
but business requirements sounds very

01:21:17,720 --> 01:21:24,170
unrelatable so better way to just define

01:21:21,590 --> 01:21:27,440
acceptance testing is does it work for

01:21:24,170 --> 01:21:29,930
the user okay so one thing that you want

01:21:27,440 --> 01:21:33,050
to make sure how we want to structure

01:21:29,930 --> 01:21:37,040
our acceptance test is like user stories

01:21:33,050 --> 01:21:39,140
so a user story should contain they what

01:21:37,040 --> 01:21:42,860
the the motif or the user like what he

01:21:39,140 --> 01:21:45,340
wants to do in the application and if

01:21:42,860 --> 01:21:47,570
you wanna just get started with

01:21:45,340 --> 01:21:49,580
Epsilon's testing you go we just kept

01:21:47,570 --> 01:21:51,980
Kabul or you're happy flow first because

01:21:49,580 --> 01:21:53,720
each cases there can be a lot of things

01:21:51,980 --> 01:21:56,000
can be very exhaustive but if you just

01:21:53,720 --> 01:21:58,670
want to get base coverages do I have

01:21:56,000 --> 01:22:02,030
beef loafers and then then you can cover

01:21:58,670 --> 01:22:03,920
a negative testing to make sure that if

01:22:02,030 --> 01:22:05,570
your user makes mistakes because they

01:22:03,920 --> 01:22:07,640
are human sometimes maybe they are just

01:22:05,570 --> 01:22:09,500
older folks like my grandparents or my

01:22:07,640 --> 01:22:11,270
parents and sometimes you're just not

01:22:09,500 --> 01:22:14,210
know how the UI works and do something

01:22:11,270 --> 01:22:17,239
wrong the the application should be half

01:22:14,210 --> 01:22:18,770
way not to give then an appropriate

01:22:17,239 --> 01:22:22,850
error message so that they can recover

01:22:18,770 --> 01:22:26,390
but that's again negative testing that

01:22:22,850 --> 01:22:29,090
is very exhaustive so yeah if you want

01:22:26,390 --> 01:22:30,680
to start with you our testing is very

01:22:29,090 --> 01:22:32,720
good to start with your happy flows

01:22:30,680 --> 01:22:35,780
first so that you don't get overwhelmed

01:22:32,720 --> 01:22:37,400
with fun investing so there's actually

01:22:35,780 --> 01:22:37,900
many ways to send us your front-end

01:22:37,400 --> 01:22:40,659
besides

01:22:37,900 --> 01:22:44,770
that's also a component testing which

01:22:40,659 --> 01:22:49,449
we'll cover later on so there are field

01:22:44,770 --> 01:22:52,090
tools to set up your UI testing so it

01:22:49,449 --> 01:22:53,860
can be very elaborate as well who say

01:22:52,090 --> 01:22:57,670
you are tested because if you think

01:22:53,860 --> 01:23:01,330
about it your consumers are using your

01:22:57,670 --> 01:23:06,850
application in Chrome in Firefox Safari

01:23:01,330 --> 01:23:09,190
ie age then that's just the desktop they

01:23:06,850 --> 01:23:11,469
will be looking at it in mobile iphone

01:23:09,190 --> 01:23:14,290
Safari Mobile which is different from

01:23:11,469 --> 01:23:16,780
Safari desktop and then you have other

01:23:14,290 --> 01:23:19,690
Asian devices that have vivo and then

01:23:16,780 --> 01:23:23,429
the Chinese browser says the UC browser

01:23:19,690 --> 01:23:26,260
the squirrel icons today's a lot of

01:23:23,429 --> 01:23:29,130
infrastructure to set up if you want to

01:23:26,260 --> 01:23:32,320
keep keeping it simple we can use

01:23:29,130 --> 01:23:35,800
different tools so there are providers

01:23:32,320 --> 01:23:37,719
eyebrows tag like sauce that that

01:23:35,800 --> 01:23:40,179
provides your infrastructure so later

01:23:37,719 --> 01:23:42,850
don't ever think about it if you want a

01:23:40,179 --> 01:23:45,340
DIY which I will cover later on you can

01:23:42,850 --> 01:23:47,800
do so as well but this fair warning is

01:23:45,340 --> 01:23:50,620
not a walk in a pub because for me to

01:23:47,800 --> 01:23:52,510
write this crazy street not even though

01:23:50,620 --> 01:23:54,370
I'm experienced in setting up selenium

01:23:52,510 --> 01:23:56,199
is due to me two hours to set up

01:23:54,370 --> 01:23:58,300
selenium because the documentation has

01:23:56,199 --> 01:24:01,270
changed in the last two or three years

01:23:58,300 --> 01:24:03,850
so a figure out how to set up so they

01:24:01,270 --> 01:24:06,159
all over again for the latest version of

01:24:03,850 --> 01:24:09,070
Chrome and Firefox se right cetera so

01:24:06,159 --> 01:24:10,810
it's a that that spec changes in law and

01:24:09,070 --> 01:24:12,219
you really don't attach this if you if

01:24:10,810 --> 01:24:15,550
you can you should really try to avoid

01:24:12,219 --> 01:24:18,880
setting your own setting ups so I'm just

01:24:15,550 --> 01:24:24,250
gonna do a demo of how you can test your

01:24:18,880 --> 01:24:27,040
issues distribution and what we do extra

01:24:24,250 --> 01:24:29,500
dishes is we provide something like a

01:24:27,040 --> 01:24:31,900
core tanks and for you to test your

01:24:29,500 --> 01:24:34,440
application so what you're gonna do is

01:24:31,900 --> 01:24:38,310
how we're gonna start our server again

01:24:34,440 --> 01:24:38,310
first our house over

01:24:38,940 --> 01:24:45,160
and I love hoops I think I have

01:24:41,680 --> 01:24:48,220
something running we have 40,000 so

01:24:45,160 --> 01:24:50,820
reading use sorry about 3000 open and

01:24:48,220 --> 01:24:54,390
the next thing you want to do is so I

01:24:50,820 --> 01:24:56,800
access requires the application to be on

01:24:54,390 --> 01:24:59,050
expose to the internet through to test

01:24:56,800 --> 01:25:02,650
it so what we're gonna do is we're gonna

01:24:59,050 --> 01:25:07,990
use angle which allows you to slice the

01:25:02,650 --> 01:25:09,880
interface of penises so you never radio

01:25:07,990 --> 01:25:11,710
in stop-and-go you can't just do npm

01:25:09,880 --> 01:25:14,590
install and grop there are other

01:25:11,710 --> 01:25:23,920
alternative to ink go you can go ahead

01:25:14,590 --> 01:25:24,820
and start setting up so we have startup

01:25:23,920 --> 01:25:28,180
Ingram

01:25:24,820 --> 01:25:31,680
he's gonna expose your pod 3000 so

01:25:28,180 --> 01:25:34,780
insane anchor HTTP 3000 he's gonna

01:25:31,680 --> 01:25:37,120
listen over Sara HTTP server that

01:25:34,780 --> 01:25:41,980
listens to 40,000 and gives you a public

01:25:37,120 --> 01:25:45,790
URL like this so this is the public URL

01:25:41,980 --> 01:25:49,840
that I got F 2 2 8 2 7 5 5 minecraft I

01:25:45,790 --> 01:25:51,910
go and open that he actually loads these

01:25:49,840 --> 01:25:55,680
applications which is my own application

01:25:51,910 --> 01:26:02,710
itself so if I actually turn off my

01:25:55,680 --> 01:26:04,930
application over here it's still loading

01:26:02,710 --> 01:26:06,910
all the images so they burn it off and I

01:26:04,930 --> 01:26:09,670
load it you're just gonna say alright

01:26:06,910 --> 01:26:14,680
not their vacation it's not there any on

01:26:09,670 --> 01:26:15,160
again so once you have set that up it's

01:26:14,680 --> 01:26:17,650
no big deal

01:26:15,160 --> 01:26:19,450
thank you blow all the excess so there's

01:26:17,650 --> 01:26:24,010
a something so complete there's too many

01:26:19,450 --> 01:26:26,820
connections base for me to make a

01:26:24,010 --> 01:26:36,450
connection because of the images

01:26:26,820 --> 01:26:40,650
oh sorry I am actually gonna set up an

01:26:36,450 --> 01:26:44,120
alternative because and grow totals the

01:26:40,650 --> 01:26:44,120
number of requests in half

01:27:03,260 --> 01:27:09,920
oh yes okay so if you're having trouble

01:27:08,180 --> 01:27:11,840
setting out and growing and grow its

01:27:09,920 --> 01:27:14,090
completeness to any connection that's

01:27:11,840 --> 01:27:18,200
alternative service called Savio and

01:27:14,090 --> 01:28:11,110
what you need to do is just SSH - ah ep2

01:27:18,200 --> 01:28:11,110
pot localhost 3000 Soviet so yeah so

01:28:11,290 --> 01:28:38,210
okay so in our application here it's

01:28:35,510 --> 01:28:42,170
loaded in this public URL mother's not

01:28:38,210 --> 01:28:44,270
so Bureau not net and to test this

01:28:42,170 --> 01:28:48,130
application well it was just that's the

01:28:44,270 --> 01:28:51,530
search application you can go to stupid

01:28:48,130 --> 01:28:54,920
the GRE is calm okay just go to yeah

01:28:51,530 --> 01:28:57,200
it's just so calm and click on create a

01:28:54,920 --> 01:28:59,630
test so creating a test and run your

01:28:57,200 --> 01:29:02,300
test on your wishes is coming free and

01:28:59,630 --> 01:29:05,510
he's a lot like the import pen there's a

01:29:02,300 --> 01:29:12,500
tutorial over here okay you can use so

01:29:05,510 --> 01:29:16,100
what we are gonna do is we clear this so

01:29:12,500 --> 01:29:17,870
the first step we can do is just to go

01:29:16,100 --> 01:29:22,700
to our L and just make sure that it's

01:29:17,870 --> 01:29:25,910
loaded the next thing we wanna do is say

01:29:22,700 --> 01:29:27,350
fill in the name of the pokemon that we

01:29:25,910 --> 01:29:35,150
want to search so we can say hide our

01:29:27,350 --> 01:29:40,850
field name and I look for a new tool and

01:29:35,150 --> 01:29:42,920
I don't click if you wanna go to you

01:29:40,850 --> 01:29:46,010
want to click on a search just to

01:29:42,920 --> 01:29:49,719
execute the search itself it's taking a

01:29:46,010 --> 01:29:49,719
bit of time to load up the server

01:29:49,730 --> 01:29:54,470
and when you're done searching it we

01:29:52,160 --> 01:29:57,260
want to see I don't see just to do it

01:29:54,470 --> 01:30:01,430
assertion that the number of results

01:29:57,260 --> 01:30:08,990
found is one so if you look at okay

01:30:01,430 --> 01:30:13,850
that's saying oh there's no pokemons

01:30:08,990 --> 01:30:16,360
comment - okay it's a space actually we

01:30:13,850 --> 01:30:19,610
don't displace new - without the space

01:30:16,360 --> 01:30:21,110
so I know that the application so they

01:30:19,610 --> 01:30:25,370
really have to think about okay I want

01:30:21,110 --> 01:30:28,910
to set up my chrome and what we want to

01:30:25,370 --> 01:30:34,580
do is make sure that we actually see one

01:30:28,910 --> 01:30:38,720
Pokemon and now you want to make sure

01:30:34,580 --> 01:30:40,940
that you see me ohh - as the Pokemon

01:30:38,720 --> 01:30:43,700
itself and maybe I just want to assert

01:30:40,940 --> 01:30:47,960
that that Pokemon that we see he's a

01:30:43,700 --> 01:30:50,480
psychic pokémon oh okay just assert that

01:30:47,960 --> 01:30:54,380
the HP is a hundred and sixty balls and

01:30:50,480 --> 01:30:57,500
also let's say HP 1:06 so you're going

01:30:54,380 --> 01:31:00,200
and bandit and I why it's gonna do

01:30:57,500 --> 01:31:02,720
behind the scenes is he's gonna call

01:31:00,200 --> 01:31:05,360
infrastructure which is managed by my

01:31:02,720 --> 01:31:06,860
CTO with Eugene I call me Eugene as a

01:31:05,360 --> 01:31:08,030
service because he extracts

01:31:06,860 --> 01:31:10,640
infrastructure for me

01:31:08,030 --> 01:31:16,970
so Eugene accessories be a 8x which is

01:31:10,640 --> 01:31:19,670
has yeah so it would actually set up the

01:31:16,970 --> 01:31:24,620
past in our back-end and start the

01:31:19,670 --> 01:31:27,920
chrome the the chrome in Dhaka or in the

01:31:24,620 --> 01:31:30,700
case of Ivy or age or safari society and

01:31:27,920 --> 01:31:33,260
that's why sometimes it takes a while to

01:31:30,700 --> 01:31:36,140
accept a start-up browser now actually

01:31:33,260 --> 01:31:38,570
the browser is stutter but he's taking a

01:31:36,140 --> 01:31:41,510
bit of time to load the application it's

01:31:38,570 --> 01:31:44,270
not because there are seven days to toki

01:31:41,510 --> 01:31:46,280
mo sits up so what your Alicia's does is

01:31:44,270 --> 01:31:48,890
that actually waits for an application

01:31:46,280 --> 01:31:52,760
to be fully loaded before it starts

01:31:48,890 --> 01:31:54,830
running the next steps and some

01:31:52,760 --> 01:31:58,340
interesting bits of the new additions is

01:31:54,830 --> 01:31:59,239
that you don't need to figure out what

01:31:58,340 --> 01:32:03,499
the

01:31:59,239 --> 01:32:06,530
the ID of the the name view is you don't

01:32:03,499 --> 01:32:08,059
need to figure out what is the what such

01:32:06,530 --> 01:32:10,900
the idea of the search button is you

01:32:08,059 --> 01:32:14,689
just need to say okay I click on such ok

01:32:10,900 --> 01:32:16,760
name is the course of you to so what

01:32:14,689 --> 01:32:19,760
your initial start it's gonna look for

01:32:16,760 --> 01:32:22,400
the rain saying I know few name is gonna

01:32:19,760 --> 01:32:26,269
look for the occurrence of name honor on

01:32:22,400 --> 01:32:28,519
your home HTML and Dom element and if

01:32:26,269 --> 01:32:31,699
you find me it's just gonna search

01:32:28,519 --> 01:32:35,539
around it he didn't a Dom tree or it's

01:32:31,699 --> 01:32:38,209
gonna do a search or wrong in the Dom

01:32:35,539 --> 01:32:41,959
tree the animals that occur usually

01:32:38,209 --> 01:32:43,789
around in in Texas are any finds a text

01:32:41,959 --> 01:32:46,099
in computer comical intelligent guys

01:32:43,789 --> 01:32:48,739
that okay that any few is probably

01:32:46,099 --> 01:32:50,420
related to this word name and that is

01:32:48,739 --> 01:32:53,119
probably the label for this input

01:32:50,420 --> 01:32:55,639
yourself so you don't have to write

01:32:53,119 --> 01:32:58,729
perfect HTML code to be able to run

01:32:55,639 --> 01:33:00,829
parents on your initials in fact you can

01:32:58,729 --> 01:33:02,719
invite pretty crappy code and your

01:33:00,829 --> 01:33:05,150
Alicia's can try to make these bad guys

01:33:02,719 --> 01:33:08,059
on what you mean when you say or feeling

01:33:05,150 --> 01:33:10,340
the certain I mean for you and you can

01:33:08,059 --> 01:33:11,840
you'll be very simple to write test

01:33:10,340 --> 01:33:15,860
because you don't need to think about

01:33:11,840 --> 01:33:18,769
what your CSS is so so even if someone

01:33:15,860 --> 01:33:20,809
changed in CSS for your search button or

01:33:18,769 --> 01:33:25,369
they change the CSS for your name field

01:33:20,809 --> 01:33:28,909
then there's no the test wouldn't thing

01:33:25,369 --> 01:33:31,010
and another thing about the behaviors

01:33:28,909 --> 01:33:34,400
also this is a server-side applications

01:33:31,010 --> 01:33:36,949
the urologist is actually very good at

01:33:34,400 --> 01:33:39,110
handling asynchronous components now so

01:33:36,949 --> 01:33:42,199
you won't swing any paper that possible

01:33:39,110 --> 01:33:43,999
if you're using angular react if I we

01:33:42,199 --> 01:33:46,760
use your additions to test your wishes

01:33:43,999 --> 01:33:48,530
itself which is the on view so so some

01:33:46,760 --> 01:33:50,329
methyl and snails I can see we use your

01:33:48,530 --> 01:33:51,679
leashes to test your wishes which tests

01:33:50,329 --> 01:33:54,920
and other websites so there's like three

01:33:51,679 --> 01:33:56,659
layers of nesting yeah so it still work

01:33:54,920 --> 01:34:00,469
yeah you were automatically in every

01:33:56,659 --> 01:34:02,719
single component all murkly wait for the

01:34:00,469 --> 01:34:04,699
component to below that for up to 15

01:34:02,719 --> 01:34:06,739
seconds so you can see configure Panama

01:34:04,699 --> 01:34:08,679
so if you are working on blockchain or

01:34:06,739 --> 01:34:11,110
as a boy for zombies I need the

01:34:08,679 --> 01:34:13,269
to wait ten minutes for the process to

01:34:11,110 --> 01:34:15,760
be completed because a command don't set

01:34:13,269 --> 01:34:19,239
time of command time out to be equals to

01:34:15,760 --> 01:34:21,999
15 so we have we do cover a lot of

01:34:19,239 --> 01:34:25,409
commands over here you can say the test

01:34:21,999 --> 01:34:28,539
dragon draw test status code as well

01:34:25,409 --> 01:34:33,130
filling in the field snoring creaking

01:34:28,539 --> 01:34:34,389
accepting alerts so it's pretty easy so

01:34:33,130 --> 01:34:38,829
if you want to change the time out you

01:34:34,389 --> 01:34:41,079
can say okay time out is 15 seconds okay

01:34:38,829 --> 01:34:44,110
so it's pretty simple to set up pets on

01:34:41,079 --> 01:34:46,179
your Isha's but of course we want to

01:34:44,110 --> 01:34:49,479
figure out how to do this on our own as

01:34:46,179 --> 01:34:53,559
a exercise so what we can do if you want

01:34:49,479 --> 01:34:56,199
to DIY this is you need to set up

01:34:53,559 --> 01:35:00,189
selenium and you need to install a

01:34:56,199 --> 01:35:03,849
webdriver library itself so so the for

01:35:00,189 --> 01:35:06,820
for browser automation there is a

01:35:03,849 --> 01:35:09,099
standard called the webdriver protocol

01:35:06,820 --> 01:35:09,969
and he's a center that is specified by

01:35:09,099 --> 01:35:13,239
the wc3

01:35:09,969 --> 01:35:16,239
community that specifies how the browser

01:35:13,239 --> 01:35:18,219
should implement the drivers for cash

01:35:16,239 --> 01:35:21,010
automation so you can think of this as

01:35:18,219 --> 01:35:23,590
printers and your scenario might be as

01:35:21,010 --> 01:35:25,119
the printer dialog so yes Sulli on

01:35:23,590 --> 01:35:27,369
diabetes if you have common interface

01:35:25,119 --> 01:35:29,619
for you to write the commands and your

01:35:27,369 --> 01:35:31,510
interface with the chrome driver and for

01:35:29,619 --> 01:35:33,729
Firefox that is the Gecko driver and

01:35:31,510 --> 01:35:36,479
Amerinet driver and for Safari the

01:35:33,729 --> 01:35:39,599
safari driver ie this ie driver but

01:35:36,479 --> 01:35:43,949
sometimes they don't follow the specs so

01:35:39,599 --> 01:35:46,530
it is it's up to you to discover how the

01:35:43,949 --> 01:35:48,820
browsers don't follow the specs like

01:35:46,530 --> 01:35:52,260
sometimes when they open up the you

01:35:48,820 --> 01:35:54,760
select menu Safari which is free so

01:35:52,260 --> 01:35:56,829
sometimes you need to figure that out on

01:35:54,760 --> 01:35:58,989
your own if you want to use selenium on

01:35:56,829 --> 01:36:01,840
your own but let's try that

01:35:58,989 --> 01:36:04,930
anyway you

01:36:01,840 --> 01:36:06,940
so let's move on to exercise 3.2 and try

01:36:04,930 --> 01:36:10,270
setting up selenium on the world the

01:36:06,940 --> 01:36:12,700
fastest way to set up selenium on your

01:36:10,270 --> 01:36:16,090
computer is to use selenium standalone

01:36:12,700 --> 01:36:21,600
which knows where our order URLs to

01:36:16,090 --> 01:36:21,600
download so we can go ahead and say okay

01:36:35,480 --> 01:36:38,620
[Music]

01:36:55,830 --> 01:37:05,410
yeah it's different setting up Selena's

01:36:59,560 --> 01:37:08,680
different for my different or clinics

01:37:05,410 --> 01:37:10,480
different on Windows machines as well so

01:37:08,680 --> 01:37:12,550
it's a bit complicated so once you have

01:37:10,480 --> 01:37:22,780
done your npm install sanam stand-alone

01:37:12,550 --> 01:37:25,530
you can do some standalone install so

01:37:22,780 --> 01:37:27,910
sorry s download install is gonna

01:37:25,530 --> 01:37:29,980
install some default drivers it's gonna

01:37:27,910 --> 01:37:31,810
install your selenium driver as a name

01:37:29,980 --> 01:37:34,240
server there's only install your chrome

01:37:31,810 --> 01:37:36,850
driver and he's gonna install your

01:37:34,240 --> 01:37:38,620
Firefox drivers and right now it's just

01:37:36,850 --> 01:37:41,860
taking the leaders of each of the

01:37:38,620 --> 01:37:44,710
drivers and then next thing what you

01:37:41,860 --> 01:37:49,600
want to do is to install a whole bunch

01:37:44,710 --> 01:37:52,650
of things that we want from webdriver so

01:37:49,600 --> 01:37:55,330
webdriver IO is an implementation of

01:37:52,650 --> 01:37:57,340
it's a library that interfaces with the

01:37:55,330 --> 01:37:59,110
webdriver protocol so it's gonna

01:37:57,340 --> 01:38:01,750
instruct all the different it's gonna

01:37:59,110 --> 01:38:04,210
set up the the browsers for you and it's

01:38:01,750 --> 01:38:06,790
going to shut it down for you and it's

01:38:04,210 --> 01:38:09,220
gonna send commands to the browsers so

01:38:06,790 --> 01:38:10,600
you can take a look at the API on at

01:38:09,220 --> 01:38:12,820
your leisure but we're just gonna do

01:38:10,600 --> 01:38:14,960
something simple like search for Pokemon

01:38:12,820 --> 01:38:20,030
again

01:38:14,960 --> 01:38:22,580
so install the bunch of stuff over here

01:38:20,030 --> 01:38:27,530
I'm going to use the MOCA finger as well

01:38:22,580 --> 01:38:31,650
and then the step two is a copy over the

01:38:27,530 --> 01:38:35,700
WI or conflict from samples or just to

01:38:31,650 --> 01:38:39,260
do you can or you can just rename it

01:38:35,700 --> 01:38:45,200
from sample Dodgers to to wdi or config

01:38:39,260 --> 01:38:47,700
so get its meaning this so let me just

01:38:45,200 --> 01:38:54,870
find true why we have set up over here

01:38:47,700 --> 01:38:58,350
so over here we have the banner look we

01:38:54,870 --> 01:39:01,200
are gonna run webdriver a local instance

01:38:58,350 --> 01:39:03,420
of webdriver I go and I is gonna point

01:39:01,200 --> 01:39:07,860
to the test that we have defined in

01:39:03,420 --> 01:39:10,080
patrie end-to-end test and over here we

01:39:07,860 --> 01:39:13,470
have defined okay a maximum instance of

01:39:10,080 --> 01:39:16,770
10 and our capabilities that we have on

01:39:13,470 --> 01:39:19,410
this machine that we have should be one

01:39:16,770 --> 01:39:22,110
instance of Firefox and one instance of

01:39:19,410 --> 01:39:25,350
Chrome and now we are just going to log

01:39:22,110 --> 01:39:26,580
out or in fork and if you if you find it

01:39:25,350 --> 01:39:29,220
very noisy you could just set it to

01:39:26,580 --> 01:39:33,960
error so there is no when some when

01:39:29,220 --> 01:39:37,620
selenium fields and he's gonna use

01:39:33,960 --> 01:39:39,270
connect to selenium standalone and we're

01:39:37,620 --> 01:39:42,210
gonna use mock I as well so that is a

01:39:39,270 --> 01:39:46,050
more consistent yeah and that's pretty

01:39:42,210 --> 01:39:48,900
much and also we need to so so we're

01:39:46,050 --> 01:39:51,420
actually not going to use mocha as the

01:39:48,900 --> 01:39:54,420
the driver the test running so we're

01:39:51,420 --> 01:39:56,160
gonna use WD iOS the test run itself so

01:39:54,420 --> 01:39:58,470
the ability i all you need to tell it to

01:39:56,160 --> 01:40:00,060
import try again so in the before

01:39:58,470 --> 01:40:02,940
statement you need to do the same thing

01:40:00,060 --> 01:40:05,010
as far as you do it at the top import

01:40:02,940 --> 01:40:07,890
try to expect

01:40:05,010 --> 01:40:12,150
Tycho's expect and also it can do try to

01:40:07,890 --> 01:40:14,340
shoot which would extend the object or

01:40:12,150 --> 01:40:18,450
prototype with these shoot our language

01:40:14,340 --> 01:40:22,560
chains okay so then the last part what

01:40:18,450 --> 01:40:25,500
we're gonna do is we're gonna do start

01:40:22,560 --> 01:40:26,200
writing our search pokemon test so this

01:40:25,500 --> 01:40:30,370
is

01:40:26,200 --> 01:40:33,760
gonna be a little bit we want to set set

01:40:30,370 --> 01:40:39,090
up I'll define our scripts again so this

01:40:33,760 --> 01:40:39,090
is quite I would and end-to-end test

01:40:42,330 --> 01:41:05,170
describe our so we're just waiting the

01:40:47,440 --> 01:41:09,880
test again it should search actually all

01:41:05,170 --> 01:41:12,880
browser tests they are asynchronous but

01:41:09,880 --> 01:41:15,640
if you use WD iOS Arana instead of

01:41:12,880 --> 01:41:18,160
webdriver in only so so so webdriver

01:41:15,640 --> 01:41:20,350
runs in two modes it can actually run in

01:41:18,160 --> 01:41:23,830
synchronous mode and you can run in

01:41:20,350 --> 01:41:26,560
synchronous mode so we are gonna get try

01:41:23,830 --> 01:41:28,750
to WD i/o to run in synchronous mic

01:41:26,560 --> 01:41:30,460
remember if there's a flag over here by

01:41:28,750 --> 01:41:32,200
over run in synchronous mode so we don't

01:41:30,460 --> 01:41:37,330
everything about are your weights again

01:41:32,200 --> 01:41:39,730
and what the video exposes to you is the

01:41:37,330 --> 01:41:44,950
browser object itself so we can take a

01:41:39,730 --> 01:41:46,720
look at the API so if you wanna the most

01:41:44,950 --> 01:41:49,060
basic thing we should do is just to go

01:41:46,720 --> 01:41:51,820
to a URL so the simplest come on it's

01:41:49,060 --> 01:41:54,340
just browser dot your L URL itself so

01:41:51,820 --> 01:41:59,280
we're just gonna grab that and let's

01:41:54,340 --> 01:41:59,280
just go to localhost 3000

01:42:07,159 --> 01:42:13,650
you know we can adjust grab the title of

01:42:10,469 --> 01:42:15,360
the browser just to try to make sure

01:42:13,650 --> 01:42:22,039
that we have do some kind basic

01:42:15,360 --> 01:42:22,039
assertion maybe that was a loser at idle

01:42:22,280 --> 01:42:40,079
you know what we can do is I expect

01:42:24,960 --> 01:42:43,260
again title to be key tags so if you

01:42:40,079 --> 01:42:46,079
want to run the test because I have set

01:42:43,260 --> 01:42:48,480
up the end-to-end test to run with a

01:42:46,079 --> 01:42:52,079
different test runner you say running

01:42:48,480 --> 01:42:54,750
with mocha by itself it will run with WD

01:42:52,079 --> 01:42:57,329
IO we actually need to set up a

01:42:54,750 --> 01:43:01,559
different script for testing so you need

01:42:57,329 --> 01:43:12,860
to run the test test : e to e so run e

01:43:01,559 --> 01:43:12,860
to test : e to e let's go back here

01:43:16,980 --> 01:43:23,970
so I should kind of expect so he's

01:43:20,680 --> 01:43:26,530
running in Firefox and Chrome and over

01:43:23,970 --> 01:43:29,680
so if you're running tests on localhost

01:43:26,530 --> 01:43:32,020
the trouble is that you cannot pass your

01:43:29,680 --> 01:43:34,000
machine many strains test because it's

01:43:32,020 --> 01:43:36,400
gonna interfere with the test itself but

01:43:34,000 --> 01:43:39,100
what you have seen previously is it just

01:43:36,400 --> 01:43:41,770
starts the Chrome browser and Firefox

01:43:39,100 --> 01:43:43,630
browser in parallel and starts executing

01:43:41,770 --> 01:43:46,480
the command and you can see it's very

01:43:43,630 --> 01:43:48,700
fast as well it will just open up the

01:43:46,480 --> 01:43:50,050
browser get the title cozy so sometimes

01:43:48,700 --> 01:43:52,210
you might be able to see what's

01:43:50,050 --> 01:43:54,250
happening and on top that the

01:43:52,210 --> 01:43:56,020
screenshots are another set of commands

01:43:54,250 --> 01:43:59,950
itself but you have to DIY the

01:43:56,020 --> 01:44:02,680
screenshots if you want to do that so I

01:43:59,950 --> 01:44:06,120
think I have some trouble with this

01:44:02,680 --> 01:44:13,180
expect mmm

01:44:06,120 --> 01:44:19,140
doing something wrong ah it's not to be

01:44:13,180 --> 01:44:19,140
is to be equal okey guys run that again

01:44:31,690 --> 01:44:37,880
you know so we have to test passing we

01:44:35,270 --> 01:44:40,640
are just gonna go to that URL and I

01:44:37,880 --> 01:44:42,440
expect the title to be pokédex so that's

01:44:40,640 --> 01:44:45,590
a little bit boring we want to do a

01:44:42,440 --> 01:44:48,650
little bit more stuff so let's do

01:44:45,590 --> 01:44:53,450
something like view in the view so

01:44:48,650 --> 01:44:58,010
browser so to to fill in a few what you

01:44:53,450 --> 01:45:02,690
need to do is to send the value you need

01:44:58,010 --> 01:45:06,200
uses send myself you said very common

01:45:02,690 --> 01:45:09,260
itself so you need to grab the you need

01:45:06,200 --> 01:45:11,450
to select the element that you want to

01:45:09,260 --> 01:45:15,020
eat directly and then set the value

01:45:11,450 --> 01:45:18,890
itself so to select de so if you are

01:45:15,020 --> 01:45:20,870
using webdriver most libraries they will

01:45:18,890 --> 01:45:25,810
expect you to provide a CSS selector

01:45:20,870 --> 01:45:31,480
expand selector so over here in our

01:45:25,810 --> 01:45:34,340
application the the pokemon the pokemon

01:45:31,480 --> 01:45:38,060
name view is actually type that has ID

01:45:34,340 --> 01:45:41,360
of pokemons their search - form - name -

01:45:38,060 --> 01:45:45,820
input so we're going to grab that I'm

01:45:41,360 --> 01:45:54,560
gonna say like okay grab this ID and

01:45:45,820 --> 01:45:57,140
dot's add value to the meal to the next

01:45:54,560 --> 01:46:00,350
thing we have to do is to say okay you

01:45:57,140 --> 01:46:05,270
click on that button when you click on

01:46:00,350 --> 01:46:09,380
the search button which is this button

01:46:05,270 --> 01:46:15,800
with this particular ID pokemon - search

01:46:09,380 --> 01:46:21,170
- phone - Sammy - BTN in a command to

01:46:15,800 --> 01:46:22,690
click on it is quick you just click stop

01:46:21,170 --> 01:46:24,939
though you select it you click on it

01:46:22,690 --> 01:46:28,689
don't click

01:46:24,939 --> 01:46:31,900
and then what we're gonna do is the next

01:46:28,689 --> 01:46:33,579
steps would be actually get D to check

01:46:31,900 --> 01:46:39,659
the Pokemon cut yourself to see whether

01:46:33,579 --> 01:46:44,489
he has to the tanks meal - so Pokemon

01:46:39,659 --> 01:46:44,489
okay let's just take a look at this

01:46:49,050 --> 01:46:53,919
you're just gonna be a little bit lazy

01:46:51,070 --> 01:46:57,489
here and just just test for the pokemons

01:46:53,919 --> 01:47:01,419
count yourself so the pokemons count is

01:46:57,489 --> 01:47:01,900
inside a class a bow a diamond with the

01:47:01,419 --> 01:47:03,760
cast

01:47:01,900 --> 01:47:08,889
Pokemon countin so I'm just going to get

01:47:03,760 --> 01:47:12,599
pokemon town and get thanks so get text

01:47:08,889 --> 01:47:17,530
is gonna get the value of Pokemon to a

01:47:12,599 --> 01:47:27,189
variable so count anyway just gonna say

01:47:17,530 --> 01:47:28,659
expect count to be equal one so one is

01:47:27,189 --> 01:47:29,949
in text because when you get text you

01:47:28,659 --> 01:47:33,789
give you a text it's not gonna be a

01:47:29,949 --> 01:47:35,590
number unless you do parse tags you're

01:47:33,789 --> 01:47:37,679
gonna run this again in Chrome and

01:47:35,590 --> 01:47:37,679
Firefox

01:47:48,950 --> 01:47:53,720
yeah so it's super fast maybe you guys

01:47:51,810 --> 01:47:56,030
have missed it when he actually access

01:47:53,720 --> 01:47:58,890
when it's completed the pokemons

01:47:56,030 --> 01:48:01,200
completed so I'm gonna run this again

01:47:58,890 --> 01:48:03,450
vicita is passing so he got grabbed

01:48:01,200 --> 01:48:11,520
attacks grabbed account and asserted a

01:48:03,450 --> 01:48:13,380
is equal to 1 so again I bought this for

01:48:11,520 --> 01:48:15,480
moment he's gonna film you to click on

01:48:13,380 --> 01:48:18,420
search and grab text and close it so

01:48:15,480 --> 01:48:19,860
it's super fast so this will give you a

01:48:18,420 --> 01:48:21,270
screenshot so if you want to make sure

01:48:19,860 --> 01:48:22,800
that everything passes you either look

01:48:21,270 --> 01:48:25,350
at the console if something goes wrong

01:48:22,800 --> 01:48:28,370
and you run test again and I boil it

01:48:25,350 --> 01:48:31,320
until it's done so that is how you set

01:48:28,370 --> 01:48:33,270
end-to-end tests on your own if you want

01:48:31,320 --> 01:48:36,750
have more questions about setting up

01:48:33,270 --> 01:48:39,630
these Williams on Asian Safari on ie you

01:48:36,750 --> 01:48:42,150
can talk to Eugene mess Eugene Eugene

01:48:39,630 --> 01:48:45,390
yes if you have a want to test other

01:48:42,150 --> 01:48:50,340
browsers okay so that's basically the

01:48:45,390 --> 01:48:52,560
end of our workshop for end-to-end

01:48:50,340 --> 01:48:53,880
testing and actually going to get our

01:48:52,560 --> 01:48:57,780
guess

01:48:53,880 --> 01:49:00,930
Jill you want to show articles so epic

01:48:57,780 --> 01:49:02,340
tools is a video regression testing to

01:49:00,930 --> 01:49:07,160
our length

01:49:02,340 --> 01:49:10,160
Gio introduced video regression to you

01:49:07,160 --> 01:49:10,160
okay

01:49:11,070 --> 01:49:16,430
[Applause]

01:49:17,070 --> 01:49:20,070
yeah

01:49:32,690 --> 01:49:38,750
so what should you consider between a

01:49:35,599 --> 01:49:41,360
different framework you should first of

01:49:38,750 --> 01:49:43,550
all look at the browser's about so one

01:49:41,360 --> 01:49:46,520
of the very popular ones you are here of

01:49:43,550 --> 01:49:50,659
any patent you will show you is Cyprus

01:49:46,520 --> 01:49:53,360
so Cyprus supports only Chrome so if you

01:49:50,659 --> 01:49:56,570
want to test fire for second Oh luck

01:49:53,360 --> 01:49:58,900
with Cyprus and then Cyprus actually

01:49:56,570 --> 01:50:01,790
doesn't use the webdriver protocol I

01:49:58,900 --> 01:50:04,010
uses the chrome dev 2 protocol which is

01:50:01,790 --> 01:50:05,810
why is lightning fast so if you want

01:50:04,010 --> 01:50:08,929
performance and don't care about testing

01:50:05,810 --> 01:50:11,179
other browsers besides Chrome now in

01:50:08,929 --> 01:50:13,010
Cyprus might be a suitable tool the

01:50:11,179 --> 01:50:15,949
thing about most other testing tools

01:50:13,010 --> 01:50:19,429
compared to your Irish's is that you

01:50:15,949 --> 01:50:21,500
need to ID or add a class for every

01:50:19,429 --> 01:50:23,420
single one of the elements that you want

01:50:21,500 --> 01:50:26,000
to test so if you want to test the

01:50:23,420 --> 01:50:28,130
search button you can't just say test us

01:50:26,000 --> 01:50:30,230
you can't just say I don't click such

01:50:28,130 --> 01:50:33,020
that's it doesn't really work you

01:50:30,230 --> 01:50:37,730
actually need to explicitly say select

01:50:33,020 --> 01:50:41,060
the button with the IDE search - form -

01:50:37,730 --> 01:50:43,010
log that's submit - button then don't

01:50:41,060 --> 01:50:45,920
click so that's all the syntax can be

01:50:43,010 --> 01:50:48,110
very verbose I think it's really up to

01:50:45,920 --> 01:50:49,099
you to check each and every one of the

01:50:48,110 --> 01:50:51,619
frameworks to see whether you're

01:50:49,099 --> 01:50:55,429
comfortable with it the other one is

01:50:51,619 --> 01:50:57,050
another difference is some some tools

01:50:55,429 --> 01:51:02,090
actually like nightmare GSI if I

01:50:57,050 --> 01:51:03,650
remember they want you to add a singer

01:51:02,090 --> 01:51:05,210
wait for every single on the command so

01:51:03,650 --> 01:51:07,730
maybe you don't like AC wait that much

01:51:05,210 --> 01:51:10,340
so that's very small differences between

01:51:07,730 --> 01:51:19,540
the stop writing your tests yeah

01:51:10,340 --> 01:51:23,869
okay sorry okay good

01:51:19,540 --> 01:51:26,060
can you oh so it's just I'm not gonna

01:51:23,869 --> 01:51:28,820
East modules now I'm gonna talk about my

01:51:26,060 --> 01:51:31,219
favorite subject which is testing I come

01:51:28,820 --> 01:51:33,679
from applitools I have about 20 minutes

01:51:31,219 --> 01:51:37,760
before I rush to the airport and go back

01:51:33,679 --> 01:51:40,880
home the other home but so I want to

01:51:37,760 --> 01:51:43,960
really do an explanation of what visual

01:51:40,880 --> 01:51:48,219
testing is about and

01:51:43,960 --> 01:51:53,650
and do a quick demo of how we do it at

01:51:48,219 --> 01:51:56,440
applitools so first of all what is

01:51:53,650 --> 01:51:59,080
visual testing webdriver L which you're

01:51:56,440 --> 01:52:01,600
gonna use in a second and Cypress and

01:51:59,080 --> 01:52:03,790
selenium webdriver and lots of others do

01:52:01,600 --> 01:52:06,550
functional testing what does that mean

01:52:03,790 --> 01:52:08,350
you click on a button you check that the

01:52:06,550 --> 01:52:11,680
button does what it's supposed to do

01:52:08,350 --> 01:52:14,170
right click on Add to Cart you check

01:52:11,680 --> 01:52:15,489
that the item was added to cart you

01:52:14,170 --> 01:52:17,440
click on this you check of that

01:52:15,489 --> 01:52:19,690
so you're basically clicking on stuff or

01:52:17,440 --> 01:52:21,340
write a typing stuff and then checking

01:52:19,690 --> 01:52:23,020
lots of elements on the page to ensure

01:52:21,340 --> 01:52:25,570
that the functionality works correctly

01:52:23,020 --> 01:52:25,930
but as somebody tweeted about a month

01:52:25,570 --> 01:52:30,430
ago

01:52:25,930 --> 01:52:32,770
look my CSS didn't load the page looked

01:52:30,430 --> 01:52:36,370
like yet all my functional tests

01:52:32,770 --> 01:52:39,250
passed okay which is true we don't care

01:52:36,370 --> 01:52:42,550
that your tests you've tested your unit

01:52:39,250 --> 01:52:44,560
code your business logic you've tested

01:52:42,550 --> 01:52:46,570
your API logic in your integration with

01:52:44,560 --> 01:52:48,400
the database you've tested the

01:52:46,570 --> 01:52:51,700
functionality of your front-end code

01:52:48,400 --> 01:52:55,210
what about so if this at all your code

01:52:51,700 --> 01:52:57,820
except to stop two parts the HTML and

01:52:55,210 --> 01:53:00,760
most importantly the CSS none of the

01:52:57,820 --> 01:53:02,710
functional tests test the CSS none of

01:53:00,760 --> 01:53:05,050
the functional tests test how your brow

01:53:02,710 --> 01:53:07,360
I mean how your application looks like

01:53:05,050 --> 01:53:09,910
and that is as important

01:53:07,360 --> 01:53:12,520
well not as important but almost as

01:53:09,910 --> 01:53:15,250
important as functional testing and in

01:53:12,520 --> 01:53:17,710
these days of responsive design you're

01:53:15,250 --> 01:53:20,950
mostly web developers I'm guessing who

01:53:17,710 --> 01:53:22,930
has whose application is responsive ok

01:53:20,950 --> 01:53:25,960
responsive as in supports multiple

01:53:22,930 --> 01:53:28,960
widths right an increasing number and

01:53:25,960 --> 01:53:31,180
it's going to grow more and more ok now

01:53:28,960 --> 01:53:32,950
I've seen a lot of developers change the

01:53:31,180 --> 01:53:35,739
CSS and then do this with the browser

01:53:32,950 --> 01:53:37,719
right and then change the CSS and then

01:53:35,739 --> 01:53:40,630
do this with the browser to check that

01:53:37,719 --> 01:53:42,280
all but are you really checking or are

01:53:40,630 --> 01:53:44,830
you just yeah looks ok

01:53:42,280 --> 01:53:48,040
ok we're not really checking we're

01:53:44,830 --> 01:53:50,710
definitely not checking all the minor

01:53:48,040 --> 01:53:53,469
variations and I was talking here at J's

01:53:50,710 --> 01:53:56,570
Khan fascia to a designer and he says

01:53:53,469 --> 01:53:59,510
yeah come on some guy changed

01:53:56,570 --> 01:54:02,540
and the button like moved three pixels

01:53:59,510 --> 01:54:04,790
to the left and I noticed it because I'm

01:54:02,540 --> 01:54:06,890
a designer and I go to the developer and

01:54:04,790 --> 01:54:09,170
the developer says come on what do you

01:54:06,890 --> 01:54:12,290
care about three pixels developers well

01:54:09,170 --> 01:54:14,810
we don't see that okay we do not see

01:54:12,290 --> 01:54:16,940
that and we need to see that and if we

01:54:14,810 --> 01:54:19,190
do it manually again and again and again

01:54:16,940 --> 01:54:21,260
and again we won't see that we will get

01:54:19,190 --> 01:54:24,500
tired which is what visual testing is

01:54:21,260 --> 01:54:27,320
all about okay so visual testing is all

01:54:24,500 --> 01:54:32,930
about looking at the app the visual

01:54:27,320 --> 01:54:36,050
aspects of your application now it's not

01:54:32,930 --> 01:54:38,630
easy it's not easy doing that I have a

01:54:36,050 --> 01:54:41,540
talk I did a talk at risk you know CSS

01:54:38,630 --> 01:54:43,940
conf talked about the four elephants in

01:54:41,540 --> 01:54:47,330
the room there are four main problems in

01:54:43,940 --> 01:54:51,620
in CSS one first of all how does sorry

01:54:47,330 --> 01:54:55,510
wait i I'm jumping ahead ha totally this

01:54:51,620 --> 01:54:58,310
is the beauty of a conference you know

01:54:55,510 --> 01:55:00,170
she came to me and said hey I have a

01:54:58,310 --> 01:55:02,120
testing workshop why don't you do a demo

01:55:00,170 --> 01:55:04,490
and say okay so I came totally

01:55:02,120 --> 01:55:06,140
unprepared I will do a demo it will be

01:55:04,490 --> 01:55:13,100
nice but sometimes I'm gonna jump like

01:55:06,140 --> 01:55:15,200
crazy so how do we do visual testing a

01:55:13,100 --> 01:55:17,360
lot of people come to me in the in the

01:55:15,200 --> 01:55:19,400
to the booth and they think that we look

01:55:17,360 --> 01:55:22,670
at a screen shot we look at the page and

01:55:19,400 --> 01:55:25,160
say yeah this looks good right we don't

01:55:22,670 --> 01:55:28,820
do that we don't do that other people

01:55:25,160 --> 01:55:31,610
think that we feed a design system into

01:55:28,820 --> 01:55:33,530
our into our application like the

01:55:31,610 --> 01:55:35,990
margins should be this the fonts should

01:55:33,530 --> 01:55:38,180
be this etc etc and then we took the

01:55:35,990 --> 01:55:40,580
page for correctness we don't do that

01:55:38,180 --> 01:55:43,430
either it's basically impossible because

01:55:40,580 --> 01:55:47,060
the rules are so huge that you're

01:55:43,430 --> 01:55:49,340
basically rewriting the CSS again what

01:55:47,060 --> 01:55:52,400
we do is what we call visual regression

01:55:49,340 --> 01:55:55,160
testing we change that what was still is

01:55:52,400 --> 01:55:57,560
we're changing that nothing we're

01:55:55,160 --> 01:55:59,750
testing that nothing changed between the

01:55:57,560 --> 01:56:01,870
last time and the next time and and the

01:55:59,750 --> 01:56:05,420
next guest will also be talking about

01:56:01,870 --> 01:56:08,120
snapshot testing which is not visual and

01:56:05,420 --> 01:56:10,400
which basically checks that the HTML

01:56:08,120 --> 01:56:12,890
itself the HTML elements the day

01:56:10,400 --> 01:56:15,170
and thus pans that doesn't change from

01:56:12,890 --> 01:56:17,480
Ron - Ron we're doing the same but we're

01:56:15,170 --> 01:56:19,929
doing it visually so running a test in

01:56:17,480 --> 01:56:23,989
visual is very similar to webdriver IO

01:56:19,929 --> 01:56:26,780
okay you run the test you click click

01:56:23,989 --> 01:56:29,030
click using browser automation ok in the

01:56:26,780 --> 01:56:30,590
test you say navigate to this page and

01:56:29,030 --> 01:56:33,409
then click on this and then click on

01:56:30,590 --> 01:56:35,120
that you take a screenshot the first

01:56:33,409 --> 01:56:37,969
time the test runs that screenshot is

01:56:35,120 --> 01:56:39,920
the baseline this is what should be you

01:56:37,969 --> 01:56:42,500
look at it manually you let the designer

01:56:39,920 --> 01:56:44,690
look at it manually they they all say

01:56:42,500 --> 01:56:46,600
yeah we're okay and then the next time

01:56:44,690 --> 01:56:50,420
the test runs we compare the screenshots

01:56:46,600 --> 01:56:53,360
okay if they're the same the test passes

01:56:50,420 --> 01:56:56,810
if they're not the same two things can

01:56:53,360 --> 01:56:59,600
happen either it's a bug which is what

01:56:56,810 --> 01:57:01,640
usually happens yeah it's a bug we found

01:56:59,600 --> 01:57:04,280
the bug we're good we fix the CSS we're

01:57:01,640 --> 01:57:07,280
done or well it's a feature if it's not

01:57:04,280 --> 01:57:09,350
a bug it's a feature right it's a

01:57:07,280 --> 01:57:11,840
feature we added things we change the

01:57:09,350 --> 01:57:14,270
styling according to the design so we

01:57:11,840 --> 01:57:17,780
need to approve it approving it means

01:57:14,270 --> 01:57:19,940
accepting it as the new baseline okay so

01:57:17,780 --> 01:57:22,000
that is how visual testing works click

01:57:19,940 --> 01:57:24,380
click click using browser automation

01:57:22,000 --> 01:57:26,090
screenshot click click click screenshot

01:57:24,380 --> 01:57:28,820
we do lots of screenshots on all the

01:57:26,090 --> 01:57:30,590
states of the application or specific to

01:57:28,820 --> 01:57:33,110
components we can do also component

01:57:30,590 --> 01:57:35,000
testing and then compare the screenshots

01:57:33,110 --> 01:57:37,670
to the previous screen shots if there's

01:57:35,000 --> 01:57:39,710
a problem we alert and you can tell us

01:57:37,670 --> 01:57:42,170
whether it's a bug or feature that is

01:57:39,710 --> 01:57:44,210
basically but what is what what's the

01:57:42,170 --> 01:57:45,800
problem there Armani OSS tools that do

01:57:44,210 --> 01:57:47,870
that there are a couple of problems

01:57:45,800 --> 01:57:50,390
first of all if you're using webdriver

01:57:47,870 --> 01:57:54,290
i/o behind the scenes you're using

01:57:50,390 --> 01:57:58,010
selenium selenium for reasons I cannot

01:57:54,290 --> 01:58:00,050
understand chose not to do full-page

01:57:58,010 --> 01:58:01,790
screenshots so every time you take a

01:58:00,050 --> 01:58:04,250
screenshot you're using selenium you're

01:58:01,790 --> 01:58:05,780
taking only the viewport the window so

01:58:04,250 --> 01:58:07,550
if you want to do a full-page screenshot

01:58:05,780 --> 01:58:08,960
you need to do the scrolling stuff and

01:58:07,550 --> 01:58:11,300
it's really really complicated

01:58:08,960 --> 01:58:13,580
ok so taking a screenshot using selenium

01:58:11,300 --> 01:58:17,480
is very difficult all the other tools

01:58:13,580 --> 01:58:19,010
really easy that's the one per elephant

01:58:17,480 --> 01:58:22,520
it's not a big elephant but it's still a

01:58:19,010 --> 01:58:26,450
fun the other one is the comparison whoo

01:58:22,520 --> 01:58:28,460
hearing one a Mac version from a Windows

01:58:26,450 --> 01:58:32,090
version is basically impossible

01:58:28,460 --> 01:58:35,630
comparing Chrome 74 to 73 is difficult

01:58:32,090 --> 01:58:38,300
comparing Chrome 74 to Chrome 74 same

01:58:35,630 --> 01:58:40,940
machine different GPUs doesn't work and

01:58:38,300 --> 01:58:42,950
why because each one of them render

01:58:40,940 --> 01:58:45,740
stuff just a little bit differently

01:58:42,950 --> 01:58:48,320
there are anti-aliasing stuff with the

01:58:45,740 --> 01:58:50,000
way you render JPEGs all kinds of weird

01:58:48,320 --> 01:58:51,830
things and you start getting false

01:58:50,000 --> 01:58:53,630
positives you start getting false

01:58:51,830 --> 01:58:56,780
positives and you start moving the

01:58:53,630 --> 01:58:59,810
slider zero error rate which is false

01:58:56,780 --> 01:59:02,000
positives and or I accept five percent

01:58:59,810 --> 01:59:03,950
error rate or ten percent error rate and

01:59:02,000 --> 01:59:05,960
you keep moving that slider to the right

01:59:03,950 --> 01:59:09,470
and what do you start getting false

01:59:05,960 --> 01:59:10,850
negatives okay so you choose the slider

01:59:09,470 --> 01:59:12,980
how much false positives or false

01:59:10,850 --> 01:59:15,470
negatives you want that's the second

01:59:12,980 --> 01:59:18,290
problem what what applitools does is we

01:59:15,470 --> 01:59:20,660
have a team of four algorithms people

01:59:18,290 --> 01:59:23,780
that all they do is deal with visual

01:59:20,660 --> 01:59:26,390
algorithms that do DIF in it is possible

01:59:23,780 --> 01:59:28,220
it's complicated very complicated but

01:59:26,390 --> 01:59:32,090
we've basically solved that problem of

01:59:28,220 --> 01:59:34,040
visual diffing between screen shots the

01:59:32,090 --> 01:59:35,390
third is managing those screen shots if

01:59:34,040 --> 01:59:36,980
you're doing a lot of screen shots and

01:59:35,390 --> 01:59:39,440
you have 50 and you're changing the

01:59:36,980 --> 01:59:41,000
header now you need to check that all

01:59:39,440 --> 01:59:45,590
the header changes and all the screen

01:59:41,000 --> 01:59:46,640
shots are exactly the same okay you have

01:59:45,590 --> 01:59:48,920
to go through each one of those

01:59:46,640 --> 01:59:50,870
screenshots and and manage that and

01:59:48,920 --> 01:59:52,940
accept this and reject that and do all

01:59:50,870 --> 01:59:54,020
kinds of stuff so managing those screen

01:59:52,940 --> 01:59:56,980
shots is a problem

01:59:54,020 --> 01:59:59,570
the fourth one I think is the more most

01:59:56,980 --> 02:00:01,100
problematic you want to check you don't

01:59:59,570 --> 02:00:02,480
want to check you want to run the test

02:00:01,100 --> 02:00:06,590
on Chrome but you want to check it on

02:00:02,480 --> 02:00:08,750
Chrome on firefox on iphone with on ipad

02:00:06,590 --> 02:00:10,190
with on desktop with you have CSS

02:00:08,750 --> 02:00:12,350
breakpoints you want to check them on

02:00:10,190 --> 02:00:15,080
each one of those breakpoints how do you

02:00:12,350 --> 02:00:17,960
do that and keep your tests running in

02:00:15,080 --> 02:00:20,840
in like in not running hours but running

02:00:17,960 --> 02:00:23,390
minutes okay how do you do that that's

02:00:20,840 --> 02:00:26,510
for me the biggest problem so let's

02:00:23,390 --> 02:00:29,720
let's let's see a test let's see how we

02:00:26,510 --> 02:00:32,110
solve those problems and then I run to

02:00:29,720 --> 02:00:32,110
their course

02:00:33,249 --> 02:00:44,840
okay so this is the webdriver i/o test

02:00:39,639 --> 02:00:45,559
okay should I make it bigger yep there

02:00:44,840 --> 02:00:49,400
we go

02:00:45,559 --> 02:00:51,579
now I'm not gonna run it because we

02:00:49,400 --> 02:00:54,889
still don't support webdriver io5

02:00:51,579 --> 02:00:56,300
applitools and and this is webdriver l5

02:00:54,889 --> 02:00:58,610
so I'm gonna show you the code

02:00:56,300 --> 02:01:02,150
but I'm gonna run it under Cyprus but

02:00:58,610 --> 02:01:04,309
it's the same thing okay so what we do

02:01:02,150 --> 02:01:06,800
let's ignore the eyes thing applitools

02:01:04,309 --> 02:01:08,269
eyes is the visual testing tool eyes you

02:01:06,800 --> 02:01:10,909
get the metaphor it's right it's

02:01:08,269 --> 02:01:14,269
actually really cute I like it browser

02:01:10,909 --> 02:01:18,289
that URL navigates to that URL and then

02:01:14,269 --> 02:01:20,719
we click on the checkbox called dragon I

02:01:18,289 --> 02:01:23,360
want to filter and show only the dragon

02:01:20,719 --> 02:01:28,820
pokemons I don't understand Pokemon so I

02:01:23,360 --> 02:01:32,570
may be wrong but I need to catch them

02:01:28,820 --> 02:01:36,530
all right and then I click on the forum

02:01:32,570 --> 02:01:38,599
submit button okay I click on it so that

02:01:36,530 --> 02:01:41,929
it submits the shirts it leaves me with

02:01:38,599 --> 02:01:43,849
only the dragon pokemons and then I take

02:01:41,929 --> 02:01:45,949
a screenshot I take a screenshot and

02:01:43,849 --> 02:01:48,199
compare it to the previous to the

02:01:45,949 --> 02:01:52,639
baseline screenshot then I click on a

02:01:48,199 --> 02:01:54,320
specific card click on the card and take

02:01:52,639 --> 02:01:58,130
another screenshot this is basically

02:01:54,320 --> 02:02:00,229
what I do I also in initialize eyes and

02:01:58,130 --> 02:02:02,840
I do an open session in a closed session

02:02:00,229 --> 02:02:08,150
that's not very interesting in Cyprus

02:02:02,840 --> 02:02:14,030
it's exactly the same but but

02:02:08,150 --> 02:02:15,800
differently oh wait I want to write it's

02:02:14,030 --> 02:02:17,840
exactly the same but differently instead

02:02:15,800 --> 02:02:21,190
of dollar you did side out get Claire

02:02:17,840 --> 02:02:24,190
click but it's the same test so let me

02:02:21,190 --> 02:02:24,190
run

02:02:28,280 --> 02:02:36,750
this is running Cyprus so by the way if

02:02:34,800 --> 02:02:38,670
you install Cyprus or webdriver or

02:02:36,750 --> 02:02:40,949
whatever tool if you want to add eyes

02:02:38,670 --> 02:02:45,829
functionality you just npm install eyes

02:02:40,949 --> 02:02:48,539
and and then you have the new command so

02:02:45,829 --> 02:02:51,119
but all tools are exactly the same I

02:02:48,539 --> 02:02:53,190
mean if its eyes if its other commercial

02:02:51,119 --> 02:02:55,590
tools if it's open-source tools they all

02:02:53,190 --> 02:02:58,320
do the same this is this is Cyprus it's

02:02:55,590 --> 02:03:00,179
a really cool tool and we're running

02:02:58,320 --> 02:03:02,159
notice that the test is finished running

02:03:00,179 --> 02:03:04,409
but but we're all we're still running

02:03:02,159 --> 02:03:06,630
because in the background we're

02:03:04,409 --> 02:03:07,949
comparing all the screenshots and making

02:03:06,630 --> 02:03:10,199
sure that everything's ok

02:03:07,949 --> 02:03:13,849
it should take about 20 seconds 30

02:03:10,199 --> 02:03:13,849
seconds wait 20 seconds

02:03:14,420 --> 02:03:26,520
ok now what do I want I want - to check

02:03:25,409 --> 02:03:30,110
the test past

02:03:26,520 --> 02:03:33,110
ok but I can look at the screenshots

02:03:30,110 --> 02:03:33,110
nope

02:03:35,469 --> 02:03:41,510
and this is Pokemon and I have the

02:03:38,810 --> 02:03:43,850
scripts three screenshots here the two

02:03:41,510 --> 02:03:46,700
screenshots this is one screenshot and

02:03:43,850 --> 02:03:49,900
this is the second screenshot okay we're

02:03:46,700 --> 02:03:53,300
taking full page in this case chrome 74

02:03:49,900 --> 02:03:55,610
1024 by 768 perfect I've seen the

02:03:53,300 --> 02:03:58,430
screenshots now we talked about the

02:03:55,610 --> 02:04:01,480
whole responsive with stuff so let's

02:03:58,430 --> 02:04:01,480
let's do something else

02:04:02,830 --> 02:04:11,270
we've tested it under chrome 1024 by 768

02:04:06,610 --> 02:04:15,320
let's add some more Chrome's like 800 by

02:04:11,270 --> 02:04:20,380
600 9 1900 by 1800 let's do some Firefox

02:04:15,320 --> 02:04:23,390
stuff and ie okay so now we have oh

02:04:20,380 --> 02:04:30,260
let's do a chrome emulation of iPhone X

02:04:23,390 --> 02:04:35,300
and iPad okay and run the test Cypress

02:04:30,260 --> 02:04:36,739
is very annoying and that I save and it

02:04:35,300 --> 02:04:39,890
immediately starts running the test

02:04:36,739 --> 02:04:41,870
because it's really fast it is really

02:04:39,890 --> 02:04:44,870
fast so I'm running it

02:04:41,870 --> 02:04:49,670
I've now instead of two screenshots I

02:04:44,870 --> 02:04:51,890
have like about 40 to 30 screenshots for

02:04:49,670 --> 02:04:55,430
all the responsive widths and all the

02:04:51,890 --> 02:04:57,620
different browsers okay it should take

02:04:55,430 --> 02:05:03,020
roughly the same amount of time it's

02:04:57,620 --> 02:05:06,140
still 25 seconds let's look at the

02:05:03,020 --> 02:05:08,480
amplitudes eyes stuff and there we go

02:05:06,140 --> 02:05:11,150
the Pokemon you can see it running on

02:05:08,480 --> 02:05:16,750
all these browsers the same amount of

02:05:11,150 --> 02:05:22,670
time now as you can see here we have

02:05:16,750 --> 02:05:26,330
this is a bit too big I 11 10 1280 by

02:05:22,670 --> 02:05:28,040
1024 let's look at smaller one you can

02:05:26,330 --> 02:05:33,500
see that the responsive design works

02:05:28,040 --> 02:05:35,120
here we have three columns and here we

02:05:33,500 --> 02:05:37,280
have four columns okay

02:05:35,120 --> 02:05:40,820
so we're basically testing responsive

02:05:37,280 --> 02:05:43,130
design using this application but all

02:05:40,820 --> 02:05:44,540
the screenshots all the renderings not

02:05:43,130 --> 02:05:46,610
the test the test is running on this

02:05:44,540 --> 02:05:48,650
machine once but all the screenshots and

02:05:46,610 --> 02:05:51,620
all the renderings are running on

02:05:48,650 --> 02:05:55,610
we call the visual grid so that it can

02:05:51,620 --> 02:05:57,650
can run the test we do not run the test

02:05:55,610 --> 02:05:59,390
themselves that's for you i'll ishes

02:05:57,650 --> 02:06:01,310
that is for browserstack

02:05:59,390 --> 02:06:08,810
etc etc if you want to do cross browser

02:06:01,310 --> 02:06:12,620
functional tests don't come to us okay

02:06:08,810 --> 02:06:18,440
so that is the the the the thing let's

02:06:12,620 --> 02:06:21,620
let's do a bug let's add a bug a visual

02:06:18,440 --> 02:06:23,330
bug let's change the CSS oh look I'm

02:06:21,620 --> 02:06:25,370
exactly the what I want instead the

02:06:23,330 --> 02:06:28,640
color the submit button the search

02:06:25,370 --> 02:06:40,190
button instead of this I'll do purple

02:06:28,640 --> 02:06:41,750
whatever and save and rerun the test it

02:06:40,190 --> 02:06:46,790
should take again roughly the same

02:06:41,750 --> 02:06:48,560
amount of seconds running through all

02:06:46,790 --> 02:06:57,040
those browsers all those responsive

02:06:48,560 --> 02:06:57,040
width and let's go to eyes running

02:07:03,000 --> 02:07:10,870
there we go we found diffs let's look at

02:07:07,900 --> 02:07:16,060
them they're all in the same place we

02:07:10,870 --> 02:07:19,150
can do the cool demo thing okay but if

02:07:16,060 --> 02:07:21,550
we look at it it's exactly that problem

02:07:19,150 --> 02:07:24,310
I'll remove this you can see the

02:07:21,550 --> 02:07:29,080
baseline and the check point you can see

02:07:24,310 --> 02:07:31,060
the difference between now notice now

02:07:29,080 --> 02:07:33,910
now I can alway whether there's the

02:07:31,060 --> 02:07:38,020
really cool feature now not not demo it

02:07:33,910 --> 02:07:42,670
so it's a really really okay now what

02:07:38,020 --> 02:07:45,750
caused this bug some CSS or HTML change

02:07:42,670 --> 02:07:53,110
but what we can do sorry

02:07:45,750 --> 02:08:01,360
why am I doing this is click here or not

02:07:53,110 --> 02:08:05,490
sorry let's start again click here what

02:08:01,360 --> 02:08:10,780
we will see is not just a visual disk

02:08:05,490 --> 02:08:14,890
but a CSS and HTML div we're seeing the

02:08:10,780 --> 02:08:16,360
bug okay we because what we do because

02:08:14,890 --> 02:08:17,800
we're running all the tests in the

02:08:16,360 --> 02:08:20,200
background we're getting all the HTML

02:08:17,800 --> 02:08:23,740
and the CSS to show the screenshots we

02:08:20,200 --> 02:08:25,630
can dip it once we dip that HTML CSS we

02:08:23,740 --> 02:08:27,550
just you know there's this is the bug

02:08:25,630 --> 02:08:30,280
this is what caused this visual this

02:08:27,550 --> 02:08:31,150
specific visual div okay if we had

02:08:30,280 --> 02:08:33,250
different diffs

02:08:31,150 --> 02:08:36,670
each click would show you the different

02:08:33,250 --> 02:08:39,490
diff that caused this book no idea how

02:08:36,670 --> 02:08:42,280
this works that's why we have a four

02:08:39,490 --> 02:08:45,370
people algorithm team to do this kind of

02:08:42,280 --> 02:08:47,650
magic but it is magic in it work the

02:08:45,370 --> 02:08:50,410
last thing is don't forget we need to

02:08:47,650 --> 02:08:53,200
approve or disprove it too or reject the

02:08:50,410 --> 02:08:56,470
change we can do it one by one or we can

02:08:53,200 --> 02:09:00,190
group all the changes and let applitools

02:08:56,470 --> 02:09:02,560
tell us hey this is all the changes it's

02:09:00,190 --> 02:09:05,080
just the same change just approve or

02:09:02,560 --> 02:09:08,380
reject it and once as you can see it's

02:09:05,080 --> 02:09:11,710
not infallible it it it did it into

02:09:08,380 --> 02:09:13,390
three groups because it's not you know

02:09:11,710 --> 02:09:15,260
it's it's still only four people

02:09:13,390 --> 02:09:17,960
algorithm teams

02:09:15,260 --> 02:09:20,270
another 10 people algorithm team but it

02:09:17,960 --> 02:09:23,390
will get better and 3 is much better

02:09:20,270 --> 02:09:26,480
than like 30 so so we're good here we

02:09:23,390 --> 02:09:28,910
can accept or reject the change and then

02:09:26,480 --> 02:09:31,490
continue on so this is the basics of

02:09:28,910 --> 02:09:34,840
visual testing right a test using

02:09:31,490 --> 02:09:38,060
webdriver IO whatever tool you have ad

02:09:34,840 --> 02:09:40,970
using whatever tool OSS are open source

02:09:38,060 --> 02:09:43,100
of commercial ad those checks to check

02:09:40,970 --> 02:09:45,500
the screenshot it will check against a

02:09:43,100 --> 02:09:47,420
baseline and then if there are tips you

02:09:45,500 --> 02:09:49,640
need to approve and reject the changes

02:09:47,420 --> 02:09:53,270
this is the base of visual testing I

02:09:49,640 --> 02:09:55,970
think it's one of the important tools in

02:09:53,270 --> 02:10:06,980
your tool to set as testing and thank

02:09:55,970 --> 02:10:10,550
you very much right now so I try to keep

02:10:06,980 --> 02:10:13,100
things very very shortly yesterday we

02:10:10,550 --> 02:10:16,040
were talking about testing she discover

02:10:13,100 --> 02:10:18,110
what it was and asked me to do a little

02:10:16,040 --> 02:10:20,930
introduction of snapshot test because

02:10:18,110 --> 02:10:40,730
it's not including the it was not

02:10:20,930 --> 02:10:45,050
include I will explain this now so just

02:10:40,730 --> 02:10:49,900
a little question who here is ever used

02:10:45,050 --> 02:10:53,420
just before Oh very few people actually

02:10:49,900 --> 02:10:56,570
okay so basically just is a test

02:10:53,420 --> 02:10:59,630
framework which is written in Facebook

02:10:56,570 --> 02:11:04,580
and a lot of people that use react is

02:10:59,630 --> 02:11:06,740
just to test their UI code I'm here to

02:11:04,580 --> 02:11:09,910
talk about the snapshot test feature we

02:11:06,740 --> 02:11:14,780
implemented three years ago now in jest

02:11:09,910 --> 02:11:17,780
and despite being implemented in jest

02:11:14,780 --> 02:11:20,180
there are other framework that took the

02:11:17,780 --> 02:11:23,780
code from Jess because is all release

02:11:20,180 --> 02:11:26,510
source and all these in a mono repo so a

02:11:23,780 --> 02:11:28,489
lot of part can be reused and I think

02:11:26,510 --> 02:11:31,160
Ava's implemented

02:11:28,489 --> 02:11:35,180
if you use our you may be able to use it

02:11:31,160 --> 02:11:39,320
I'm not sure about the other like mocha

02:11:35,180 --> 02:11:41,060
but well I will try to explain how we

02:11:39,320 --> 02:11:41,870
work in just because that's what I know

02:11:41,060 --> 02:11:47,600
better

02:11:41,870 --> 02:11:50,330
so like the snapshot test first we

02:11:47,600 --> 02:11:53,600
wanted to test UI because that's what

02:11:50,330 --> 02:11:56,420
all you add Webber want to do right the

02:11:53,600 --> 02:11:58,760
problem we do that is that the only

02:11:56,420 --> 02:12:01,790
solution that kind of work is end to end

02:11:58,760 --> 02:12:05,120
testing i'm ii am testing us some issue

02:12:01,790 --> 02:12:08,930
because in order to do like the basic

02:12:05,120 --> 02:12:11,290
and to end test you need to first open a

02:12:08,930 --> 02:12:13,940
browser wait for the browser to load

02:12:11,290 --> 02:12:14,300
navigate to the page wait for the page

02:12:13,940 --> 02:12:18,890
to load

02:12:14,300 --> 02:12:19,460
wait for the Dom to be ready select

02:12:18,890 --> 02:12:21,950
salon

02:12:19,460 --> 02:12:24,469
some element usually like a text or a

02:12:21,950 --> 02:12:27,230
button do some interaction with the

02:12:24,469 --> 02:12:29,660
button wait for animation to finish or

02:12:27,230 --> 02:12:32,060
some API to be called and then if

02:12:29,660 --> 02:12:34,219
everything didn't break do a screenshot

02:12:32,060 --> 02:12:36,410
of that and then run this test over and

02:12:34,219 --> 02:12:41,719
over to see the difference like we see

02:12:36,410 --> 02:12:45,800
before in the previous talk now

02:12:41,719 --> 02:12:48,380
this is also very slow because all these

02:12:45,800 --> 02:12:52,580
things needs to happen in order to have

02:12:48,380 --> 02:12:55,280
the screen shot if for running one test

02:12:52,580 --> 02:12:57,739
it takes 30 second running thousand of

02:12:55,280 --> 02:13:00,230
tests will take a lot of time and the

02:12:57,739 --> 02:13:05,210
web developer usually don't want to wait

02:13:00,230 --> 02:13:10,190
that much in order to ship their code so

02:13:05,210 --> 02:13:12,950
we thought what if we think what we want

02:13:10,190 --> 02:13:16,430
really to test you I usually is a

02:13:12,950 --> 02:13:19,719
function of your input and it generates

02:13:16,430 --> 02:13:22,670
the same output right and in react

02:13:19,719 --> 02:13:25,850
there is the virtual Dom concept so all

02:13:22,670 --> 02:13:28,969
the UI is a tree but this doesn't really

02:13:25,850 --> 02:13:31,430
apply only to reality applies in DJ as

02:13:28,969 --> 02:13:34,940
for example is the same or even if you

02:13:31,430 --> 02:13:37,430
use anything like in the example of

02:13:34,940 --> 02:13:39,530
today is only server-side render but at

02:13:37,430 --> 02:13:41,390
the end of the day when you call the

02:13:39,530 --> 02:13:42,110
index page it will generate the same

02:13:41,390 --> 02:13:47,380
HTML

02:13:42,110 --> 02:13:50,990
so if you can take that tree of the

02:13:47,380 --> 02:13:53,900
output of our function and somehow

02:13:50,990 --> 02:13:58,400
serialize it and store it we can compare

02:13:53,900 --> 02:14:02,660
on the next run and since we can do that

02:13:58,400 --> 02:14:05,540
without connecting to a browser we just

02:14:02,660 --> 02:14:08,480
need to check that that code works once

02:14:05,540 --> 02:14:12,650
by visually looking that and then

02:14:08,480 --> 02:14:16,130
accepting our output and when we run the

02:14:12,650 --> 02:14:18,890
second time if we find anything is wrong

02:14:16,130 --> 02:14:22,010
it will tell us before even we run on

02:14:18,890 --> 02:14:28,220
the browser because you can compare with

02:14:22,010 --> 02:14:31,180
the previous output and just is able to

02:14:28,220 --> 02:14:34,910
snap your test to catch all these thing

02:14:31,180 --> 02:14:38,480
now imagine if we have multiple

02:14:34,910 --> 02:14:41,960
developer working on different teams and

02:14:38,480 --> 02:14:45,230
they share a common UI component library

02:14:41,960 --> 02:14:48,200
for example and everyone is happy and is

02:14:45,230 --> 02:14:51,230
using like a button sum but somehow

02:14:48,200 --> 02:14:53,330
someone in a different department decide

02:14:51,230 --> 02:14:55,970
that the normal button doesn't work

02:14:53,330 --> 02:14:58,820
anymore they want that to be purple and

02:14:55,970 --> 02:15:02,630
with like our general rainbow on the

02:14:58,820 --> 02:15:05,750
bottom and so we change the UI component

02:15:02,630 --> 02:15:07,490
for for Pam because they want that it

02:15:05,750 --> 02:15:10,310
works for them and is perfect for them

02:15:07,490 --> 02:15:12,170
but they don't know that a department in

02:15:10,310 --> 02:15:14,930
a different place is using the same

02:15:12,170 --> 02:15:16,850
component and when they run their tests

02:15:14,930 --> 02:15:19,450
everything works because they run their

02:15:16,850 --> 02:15:22,430
test right

02:15:19,450 --> 02:15:23,930
but of course after deploying the other

02:15:22,430 --> 02:15:24,980
department see what's happening here

02:15:23,930 --> 02:15:29,750
everything is broken

02:15:24,980 --> 02:15:32,510
why is my button now like this now if

02:15:29,750 --> 02:15:34,850
you have like a very small snapshot test

02:15:32,510 --> 02:15:37,700
for each component each base component

02:15:34,850 --> 02:15:39,800
you can avoid this because when the

02:15:37,700 --> 02:15:42,770
department changed the button it runs

02:15:39,800 --> 02:15:46,400
all the tests and he runs all the tests

02:15:42,770 --> 02:15:49,310
in the UI components library and you

02:15:46,400 --> 02:15:54,239
will be able to catch that another

02:15:49,310 --> 02:15:57,989
another part is using that and he

02:15:54,239 --> 02:16:01,440
maybe not the case to change everything

02:15:57,989 --> 02:16:04,140
and can revert that otherwise if you say

02:16:01,440 --> 02:16:06,000
oh do you like that button you can just

02:16:04,140 --> 02:16:08,790
talk to them and say oh yes we like that

02:16:06,000 --> 02:16:12,360
as well you can just proceed right so

02:16:08,790 --> 02:16:16,230
this is how this is why we build the

02:16:12,360 --> 02:16:18,179
snapshot and snapshot is not just for UI

02:16:16,230 --> 02:16:22,320
you can apply that to everything

02:16:18,179 --> 02:16:24,270
everything is a function you can run

02:16:22,320 --> 02:16:27,120
that function you have an output you can

02:16:24,270 --> 02:16:29,429
run through a serialize ER and get an

02:16:27,120 --> 02:16:31,199
output one example of this is I don't

02:16:29,429 --> 02:16:35,450
know if anyone here has use prettier

02:16:31,199 --> 02:16:41,280
before do you know prettier prettier

02:16:35,450 --> 02:16:43,500
used snapshots for the test case so what

02:16:41,280 --> 02:16:46,439
we do is basically prettier is a linter

02:16:43,500 --> 02:16:48,840
that automatically change your code to

02:16:46,439 --> 02:16:50,630
apply some rules and rewrite that so

02:16:48,840 --> 02:16:53,070
everyone is using the same rules and

02:16:50,630 --> 02:16:55,950
there's no more comment oh you forgot

02:16:53,070 --> 02:16:57,389
the space here you forgot these

02:16:55,950 --> 02:16:58,559
parentheses should be there instead of

02:16:57,389 --> 02:17:00,689
there

02:16:58,559 --> 02:17:04,160
in order to do that we run a lot of

02:17:00,689 --> 02:17:06,929
cases we write we write some JavaScript

02:17:04,160 --> 02:17:09,240
they feed the JavaScript to prettier and

02:17:06,929 --> 02:17:12,000
then they generate the output and by

02:17:09,240 --> 02:17:14,099
using snapchat tests we can compare all

02:17:12,000 --> 02:17:16,050
the input and the output and when they

02:17:14,099 --> 02:17:19,500
change we can see regression immediately

02:17:16,050 --> 02:17:24,150
without even you don't have to run

02:17:19,500 --> 02:17:27,689
against like all the code base so I have

02:17:24,150 --> 02:17:33,120
prepared a very little example of this

02:17:27,689 --> 02:17:35,340
hopefully will work this is not perfect

02:17:33,120 --> 02:17:39,260
because I Huck that together in a few

02:17:35,340 --> 02:17:39,260
hours so yep

02:17:42,610 --> 02:17:51,640
okay I don't think that we working yeah

02:17:46,730 --> 02:17:51,640
I think this is sorry

02:18:08,120 --> 02:18:16,979
so basically I took the example that

02:18:12,510 --> 02:18:23,760
everyone is was looking at today and I

02:18:16,979 --> 02:18:26,179
create test for test solution that but

02:18:23,760 --> 02:18:30,240
basically rewrite the test using just

02:18:26,179 --> 02:18:32,820
and the only difference is that to be is

02:18:30,240 --> 02:18:37,519
like to be capitalized instead of to dot

02:18:32,820 --> 02:18:40,889
B there's basically just use expect from

02:18:37,519 --> 02:18:44,250
you can use expect in other frameworks

02:18:40,889 --> 02:18:46,380
as well you can download from NPM and so

02:18:44,250 --> 02:18:47,910
the the way you write the expectation is

02:18:46,380 --> 02:18:53,280
slightly different not that much

02:18:47,910 --> 02:18:56,849
different and I wrote just the first two

02:18:53,280 --> 02:19:01,110
and then I rewrote the end-to-end test

02:18:56,849 --> 02:19:03,510
that was and I try to make this is

02:19:01,110 --> 02:19:07,080
overly complicated because you don't

02:19:03,510 --> 02:19:08,929
need to do this of course but in order

02:19:07,080 --> 02:19:11,639
to show up what you can do with just

02:19:08,929 --> 02:19:15,570
just allow to mock things so in this

02:19:11,639 --> 02:19:21,540
case here I'm op Express router so when

02:19:15,570 --> 02:19:23,479
we register the route it will save the

02:19:21,540 --> 02:19:28,349
route and then we can call the route

02:19:23,479 --> 02:19:30,179
directly on the unit test and being a

02:19:28,349 --> 02:19:33,150
unit test it means he doesn't have to

02:19:30,179 --> 02:19:36,330
spawn a browser it doesn't have to wait

02:19:33,150 --> 02:19:36,780
you just hold it usually you don't do

02:19:36,330 --> 02:19:38,939
this

02:19:36,780 --> 02:19:41,189
by the way you just export the model and

02:19:38,939 --> 02:19:44,429
into the model and run the model but in

02:19:41,189 --> 02:19:49,740
this case I just want to show up to show

02:19:44,429 --> 02:19:51,810
that it's possible to in any different

02:19:49,740 --> 02:19:54,890
different occasion you might have

02:19:51,810 --> 02:19:57,570
different configuration different

02:19:54,890 --> 02:19:59,610
library like view it all works

02:19:57,570 --> 02:20:01,830
differently but in this case there's no

02:19:59,610 --> 02:20:04,229
react there's no JavaScript in the frame

02:20:01,830 --> 02:20:09,450
it's just server-side render so what I

02:20:04,229 --> 02:20:12,570
did here was just to show that we render

02:20:09,450 --> 02:20:16,250
the the application the pick this

02:20:12,570 --> 02:20:19,650
application use pug jeaious which is a

02:20:16,250 --> 02:20:20,939
template library so it just rendered

02:20:19,650 --> 02:20:23,729
through Park

02:20:20,939 --> 02:20:25,859
and then just for fun I load that -

02:20:23,729 --> 02:20:30,539
cheerio which is kind of jQuery for

02:20:25,859 --> 02:20:35,209
nodejs in order to show that the title

02:20:30,539 --> 02:20:38,760
is pokedex just to show that before

02:20:35,209 --> 02:20:41,039
showing the snapshot I want to show what

02:20:38,760 --> 02:20:43,619
usually we do we just search for

02:20:41,039 --> 02:20:45,239
something look that is correct

02:20:43,619 --> 02:20:47,850
search from something else and look at

02:20:45,239 --> 02:20:50,520
this correct so this is using what the

02:20:47,850 --> 02:20:53,760
server-side returns and at the end they

02:20:50,520 --> 02:20:57,029
just snapshot everything so when I run

02:20:53,760 --> 02:21:04,909
this it generates folder cool snapshots

02:20:57,029 --> 02:21:07,470
and you save the snapshot here and

02:21:04,909 --> 02:21:09,180
basically this is the output of the

02:21:07,470 --> 02:21:12,209
snapshot and it's human readable because

02:21:09,180 --> 02:21:15,149
I parse this through J's beautifier so

02:21:12,209 --> 02:21:17,789
since its HTML you just prettify the

02:21:15,149 --> 02:21:20,699
HTML so everyone can just check this if

02:21:17,789 --> 02:21:26,249
you have a in a beat up you will see

02:21:20,699 --> 02:21:30,630
that like very like sorry let me change

02:21:26,249 --> 02:21:32,880
it here if you do HTML for example you

02:21:30,630 --> 02:21:35,670
will see it like this for example and

02:21:32,880 --> 02:21:40,409
then it is very easy to compare what

02:21:35,670 --> 02:21:43,369
what is your expectation of and if your

02:21:40,409 --> 02:21:48,319
petition is correct then you can proceed

02:21:43,369 --> 02:21:52,890
and just usually it's very very fast but

02:21:48,319 --> 02:21:56,609
here I'm running under bash on Windows

02:21:52,890 --> 02:21:59,069
which makes everything slower because of

02:21:56,609 --> 02:22:00,689
the way bathroom windows one works from

02:21:59,069 --> 02:22:02,609
bathroom windows 2 which will be

02:22:00,689 --> 02:22:04,859
released soon by Microsoft will make

02:22:02,609 --> 02:22:08,130
this like order of magnitude faster

02:22:04,859 --> 02:22:10,439
because all the file system API right

02:22:08,130 --> 02:22:13,529
now pass through a security level so

02:22:10,439 --> 02:22:17,220
each time you open a file it's very very

02:22:13,529 --> 02:22:21,329
slow but still it takes like 8 second

02:22:17,220 --> 02:22:26,010
for running this Antwan test if I now

02:22:21,329 --> 02:22:29,249
change the test so in this test I had to

02:22:26,010 --> 02:22:32,369
mock the process to be production

02:22:29,249 --> 02:22:34,380
because the database is only available

02:22:32,369 --> 02:22:37,439
for production this machine you

02:22:34,380 --> 02:22:44,960
Faneuil change the test like this and

02:22:37,439 --> 02:22:44,960
rerun I can show you may be consumed

02:22:45,550 --> 02:22:59,370
or maybe not so now he's running the

02:22:54,430 --> 02:23:04,890
same test again but this time he should

02:22:59,370 --> 02:23:04,890
not be able to find the database and

02:23:05,820 --> 02:23:12,460
well in here actually here is each

02:23:10,030 --> 02:23:14,970
failing on the first expectation because

02:23:12,460 --> 02:23:18,520
there's no Pikachu anymore

02:23:14,970 --> 02:23:20,010
sorry my voice so we just show the

02:23:18,520 --> 02:23:23,010
snapshot because otherwise he doesn't

02:23:20,010 --> 02:23:23,010
run

02:23:34,650 --> 02:23:42,591
I have to fill this time because waiting

02:23:39,991 --> 02:23:51,991
10 seconds run all the tests is very

02:23:42,591 --> 02:23:55,561
boring okay so now here we have the DS

02:23:51,991 --> 02:24:00,991
the visual DS of what's happening so we

02:23:55,561 --> 02:24:04,951
can see that the previous snapshot at

02:24:00,991 --> 02:24:05,371
all this data but now there's nothing

02:24:04,951 --> 02:24:07,771
here

02:24:05,371 --> 02:24:12,031
because these are all removed and this

02:24:07,771 --> 02:24:14,551
is all the ad and we can see here

02:24:12,031 --> 02:24:16,531
there's zero Pokemon instead of funding

02:24:14,551 --> 02:24:18,321
Pikachu because right now is not

02:24:16,531 --> 02:24:20,551
connecting to the database and

02:24:18,321 --> 02:24:21,421
immediately I know that there is

02:24:20,551 --> 02:24:25,521
something wrong here

02:24:21,421 --> 02:24:33,721
because and I can see what is wrong here

02:24:25,521 --> 02:24:35,911
if we instead let me check let me change

02:24:33,721 --> 02:24:38,391
this back so it connects to the database

02:24:35,911 --> 02:24:38,391
again

02:24:42,650 --> 02:24:51,860
and search for Charizard I never run

02:24:50,340 --> 02:24:54,919
this test I don't know if it works

02:24:51,860 --> 02:24:54,919
[Music]

02:25:03,340 --> 02:25:08,480
and also right now I'm running just all

02:25:06,980 --> 02:25:10,311
the time manually but you can run in

02:25:08,480 --> 02:25:11,900
watch mode so as soon as you save you

02:25:10,311 --> 02:25:14,960
will run the test and show immediately

02:25:11,900 --> 02:25:17,960
and it's very very fast so I suggest to

02:25:14,960 --> 02:25:21,470
try that and now here we can see that

02:25:17,960 --> 02:25:26,710
the difference is still not finding the

02:25:21,470 --> 02:25:28,940
Pokemon but anyway the difference I

02:25:26,710 --> 02:25:31,101
think it's not sure it is not written

02:25:28,940 --> 02:25:32,601
correctly but it shows all the

02:25:31,101 --> 02:25:40,670
difference between previously and

02:25:32,601 --> 02:25:43,580
currently so my point is that just gives

02:25:40,670 --> 02:25:47,120
you this ability to do snapshot test I

02:25:43,580 --> 02:25:49,970
just want you to know that it's possible

02:25:47,120 --> 02:25:53,420
to use this also another framework there

02:25:49,970 --> 02:25:55,280
are some caches for example if you have

02:25:53,420 --> 02:25:58,220
something you render something with the

02:25:55,280 --> 02:26:01,220
current time for example that wouldn't

02:25:58,220 --> 02:26:03,950
work normally because if you snapshot

02:26:01,220 --> 02:26:06,670
now in it will only work now and not

02:26:03,950 --> 02:26:11,870
like in a second you can mock that

02:26:06,670 --> 02:26:14,450
justice out very good

02:26:11,870 --> 02:26:18,580
mocking support so it's very easy to

02:26:14,450 --> 02:26:23,061
mock date to return always the same date

02:26:18,580 --> 02:26:26,420
sometimes these might be a bit too noisy

02:26:23,061 --> 02:26:27,200
in that case you can write a different

02:26:26,420 --> 02:26:30,980
serializer

02:26:27,200 --> 02:26:32,720
to remove the part that change a lot but

02:26:30,980 --> 02:26:36,021
you don't really care if it's changing

02:26:32,720 --> 02:26:38,510
or not but overall it's a good solution

02:26:36,021 --> 02:26:43,090
and I'm using this right now I'm working

02:26:38,510 --> 02:26:47,540
Rakatan and we use this a lot we also

02:26:43,090 --> 02:26:49,160
basically a lot of UI developer some UI

02:26:47,540 --> 02:26:52,280
component library and they use something

02:26:49,160 --> 02:26:56,021
like style guide or something similar to

02:26:52,280 --> 02:26:59,450
that and and basically when you do that

02:26:56,021 --> 02:27:02,030
you have this website where it shows

02:26:59,450 --> 02:27:03,771
your component in with different Vario

02:27:02,030 --> 02:27:05,811
variants for example if you have a

02:27:03,771 --> 02:27:10,360
button with the icon without the icon

02:27:05,811 --> 02:27:14,420
you can just see that in a you spawn up

02:27:10,360 --> 02:27:15,450
this website and see sorry with

02:27:14,420 --> 02:27:18,210
storybook or sty

02:27:15,450 --> 02:27:20,730
goddess you can see the component in all

02:27:18,210 --> 02:27:23,210
the variants and since you already

02:27:20,730 --> 02:27:28,351
instruct how to render that component

02:27:23,210 --> 02:27:31,641
you can run just nutshot on that and

02:27:28,351 --> 02:27:35,340
that was what what we do there are four

02:27:31,641 --> 02:27:43,141
style I think both for style guide is

02:27:35,340 --> 02:27:46,021
and for the other they are plugin for

02:27:43,141 --> 02:27:48,931
automatically run jess and run just

02:27:46,021 --> 02:27:51,931
snapshots so you know that when you

02:27:48,931 --> 02:27:54,021
finish with your component and you you

02:27:51,931 --> 02:27:58,530
run the test you update the snapshot you

02:27:54,021 --> 02:28:01,920
know that is it should be correct like

02:27:58,530 --> 02:28:05,311
that because if you have some HTML if

02:28:01,920 --> 02:28:08,851
you have styling HTML as well it will as

02:28:05,311 --> 02:28:16,771
well it will be easier to see your

02:28:08,851 --> 02:28:19,500
regressions and yeah basically they are

02:28:16,771 --> 02:28:21,931
this automation already available so

02:28:19,500 --> 02:28:26,820
please try it if you didn't try it

02:28:21,931 --> 02:28:28,650
before again is not it's not just for

02:28:26,820 --> 02:28:30,090
react you can use it for view you can

02:28:28,650 --> 02:28:34,510
use it for angular it means for

02:28:30,090 --> 02:28:40,339
everything thank you

02:28:34,510 --> 02:28:40,339
[Applause]

02:28:44,600 --> 02:28:51,920
the last thing we want to do all

02:28:49,819 --> 02:28:53,149
spectrum of testing which is quite

02:28:51,920 --> 02:28:56,029
comprehensive so we have functional

02:28:53,149 --> 02:28:59,029
testing which is your code in JavaScript

02:28:56,029 --> 02:29:00,319
you could have functional testing for

02:28:59,029 --> 02:29:02,659
your application for whatever language

02:29:00,319 --> 02:29:04,189
is then from that case refer to your own

02:29:02,659 --> 02:29:06,500
language specific library like je unit

02:29:04,189 --> 02:29:09,260
for Java Python we have its own etc etc

02:29:06,500 --> 02:29:12,319
the next layer is API testing so in this

02:29:09,260 --> 02:29:14,810
case API testing it tends to be more

02:29:12,319 --> 02:29:16,310
unified so you could eat there's there

02:29:14,810 --> 02:29:19,130
are other tools to sound like postman

02:29:16,310 --> 02:29:21,409
itself or for what your use your code

02:29:19,130 --> 02:29:22,699
technically use that to API test even as

02:29:21,409 --> 02:29:24,739
a java application because at the end of

02:29:22,699 --> 02:29:26,630
day an API is a HTTP server so it

02:29:24,739 --> 02:29:27,770
doesn't matter what's your testing code

02:29:26,630 --> 02:29:30,560
or development code you can actually

02:29:27,770 --> 02:29:32,720
have it separately the layer the layer

02:29:30,560 --> 02:29:35,000
after that is the component testing so

02:29:32,720 --> 02:29:36,590
this is where you taking a snapshot of

02:29:35,000 --> 02:29:38,540
the output and then you're comparing

02:29:36,590 --> 02:29:40,310
historical d-day after that is

02:29:38,540 --> 02:29:45,470
end-to-end testing so things like UI

02:29:40,310 --> 02:29:48,710
leashes or webdriver and if it's not

02:29:45,470 --> 02:29:50,869
gone okay so things like UI looks just

02:29:48,710 --> 02:29:53,210
like em webdriver will help let you know

02:29:50,869 --> 02:29:54,859
that that your application is not

02:29:53,210 --> 02:29:56,840
working functional integration testing

02:29:54,859 --> 02:29:58,760
but one thing that I joke about is like

02:29:56,840 --> 02:30:01,220
or somebody can white text on pink

02:29:58,760 --> 02:30:02,960
background and your IDs just will say

02:30:01,220 --> 02:30:05,540
everything's okay because the button

02:30:02,960 --> 02:30:08,479
worked on the flip side everything to

02:30:05,540 --> 02:30:10,040
side a plea to or well let you know that

02:30:08,479 --> 02:30:12,500
something changed so perhaps do

02:30:10,040 --> 02:30:14,390
something oh you can have all these

02:30:12,500 --> 02:30:16,340
tools and however one thing that I see

02:30:14,390 --> 02:30:19,189
increasingly a problem especially in

02:30:16,340 --> 02:30:21,680
Singapore is they're very habit of oh I

02:30:19,189 --> 02:30:23,899
set this up alright this I write this

02:30:21,680 --> 02:30:25,729
test I run it yeah it's great

02:30:23,899 --> 02:30:27,830
six months down the road when was the

02:30:25,729 --> 02:30:31,970
last time you ran a test six months ago

02:30:27,830 --> 02:30:33,739
so the things that is where you run your

02:30:31,970 --> 02:30:35,899
test is equally important that you run

02:30:33,739 --> 02:30:38,270
it and in particular when you're talking

02:30:35,899 --> 02:30:39,739
about test includes integration thing

02:30:38,270 --> 02:30:41,689
things I stripe and all that you should

02:30:39,739 --> 02:30:45,199
be running it regularly be daily weekly

02:30:41,689 --> 02:30:47,239
monthly whatever schedule is best is

02:30:45,199 --> 02:30:49,159
always with together with your commits

02:30:47,239 --> 02:30:50,580
and Bill but about different themes call

02:30:49,159 --> 02:30:52,440
different active starts so

02:30:50,580 --> 02:30:55,050
a real quick run-through and CIC DPAC

02:30:52,440 --> 02:30:57,450
nines is that is that uh how many here

02:30:55,050 --> 02:31:00,480
have Jenkins or get let race hence see

02:30:57,450 --> 02:31:04,740
one two three four five six so yeah so

02:31:00,480 --> 02:31:08,010
how many you see I okay everyone too

02:31:04,740 --> 02:31:10,561
late so so so so so I'm not going to be

02:31:08,010 --> 02:31:13,320
to go to so there are multiple CI cd2

02:31:10,561 --> 02:31:15,061
Jenkins is pretty much the older

02:31:13,320 --> 02:31:18,000
grandfather one is the open source file

02:31:15,061 --> 02:31:21,690
you can install anywhere you want if you

02:31:18,000 --> 02:31:24,150
get lab is the is the newer thing right

02:31:21,690 --> 02:31:26,970
now because it does version control + CI

02:31:24,150 --> 02:31:30,390
+ c d+ cuba ladies control plus a long

02:31:26,970 --> 02:31:32,250
list of other things and Travis CI is

02:31:30,390 --> 02:31:33,780
the popular open source one for the

02:31:32,250 --> 02:31:35,670
github project so you can actually

02:31:33,780 --> 02:31:37,230
integrate into it you can just plug it

02:31:35,670 --> 02:31:40,710
into any of your github project and you

02:31:37,230 --> 02:31:42,930
have your free CI CD - and what's most

02:31:40,710 --> 02:31:44,280
common so I'm gonna use Travis CI says

02:31:42,930 --> 02:31:47,010
it's a probable it's most common is that

02:31:44,280 --> 02:31:48,690
in your repository how they work is that

02:31:47,010 --> 02:31:52,440
you integrate to your repository and you

02:31:48,690 --> 02:31:55,010
have a travesty ml file for get lucky ml

02:31:52,440 --> 02:31:57,870
involve changes in Jenkins MO and so on

02:31:55,010 --> 02:32:00,090
so so what you can do inside there is

02:31:57,870 --> 02:32:01,680
actually the very same bash script

02:32:00,090 --> 02:32:03,750
commands that you have been running to

02:32:01,680 --> 02:32:06,030
write to write to run your test you

02:32:03,750 --> 02:32:07,500
could look at you could first you if you

02:32:06,030 --> 02:32:08,550
need install dependencies you could set

02:32:07,500 --> 02:32:10,470
up the script to install the

02:32:08,550 --> 02:32:12,720
dependencies so you can do the

02:32:10,470 --> 02:32:14,580
installation steps you can do this this

02:32:12,720 --> 02:32:15,720
this by separating out so your system

02:32:14,580 --> 02:32:17,970
will know to actually catch this

02:32:15,720 --> 02:32:20,220
installation steps finally you can do

02:32:17,970 --> 02:32:22,110
the execution so this could be your npm

02:32:20,220 --> 02:32:24,450
run or even in the case of your lucious

02:32:22,110 --> 02:32:26,101
you could use it to trigger CRI to to

02:32:24,450 --> 02:32:27,870
actually run all those test prep steps

02:32:26,101 --> 02:32:29,730
all those complex processes like for

02:32:27,870 --> 02:32:31,680
example running Angra and then putting

02:32:29,730 --> 02:32:33,720
in getting a URL and then testing it can

02:32:31,680 --> 02:32:35,880
also be automated through the CI process

02:32:33,720 --> 02:32:37,620
and once you once you have that you can

02:32:35,880 --> 02:32:39,540
always integrate it with slack and it

02:32:37,620 --> 02:32:43,950
should notify you in case anything go

02:32:39,540 --> 02:32:45,990
wrong unfortunately so unfortunately

02:32:43,950 --> 02:32:48,090
because what we realized was that when

02:32:45,990 --> 02:32:49,980
when we launched our product previously

02:32:48,090 --> 02:32:51,570
a lot people came to us you need see I

02:32:49,980 --> 02:32:53,610
didn't see how are you can you see ICD

02:32:51,570 --> 02:32:56,190
and then when we launched it we realized

02:32:53,610 --> 02:32:58,230
only like three people were using the CI

02:32:56,190 --> 02:32:59,910
to them and we went around asking most

02:32:58,230 --> 02:33:01,920
of them said yeah we said that we wanted

02:32:59,910 --> 02:33:03,360
it what with Jenkins but we haven't had

02:33:01,920 --> 02:33:06,840
our Jenkins server year

02:33:03,360 --> 02:33:09,000
so so so so if you if you really don't

02:33:06,840 --> 02:33:10,470
have that like at the very very basic

02:33:09,000 --> 02:33:13,470
simple simple man you could actually

02:33:10,470 --> 02:33:15,300
have setup like on our platform for your

02:33:13,470 --> 02:33:17,100
dishes you could set up your sign up a

02:33:15,300 --> 02:33:19,860
lot in flow and you can set up

02:33:17,100 --> 02:33:21,510
monitoring so monitoring is is where you

02:33:19,860 --> 02:33:23,850
are able to schedule any job that you

02:33:21,510 --> 02:33:25,740
previously saw that you returned select

02:33:23,850 --> 02:33:27,180
the process that you want to run it on

02:33:25,740 --> 02:33:30,600
and start to run it at a certain

02:33:27,180 --> 02:33:32,610
interval and to notify you by email by

02:33:30,600 --> 02:33:35,100
web which can be used for slack for

02:33:32,610 --> 02:33:36,900
example and and you can schedule it to

02:33:35,100 --> 02:33:38,100
let's say run every night 2 a.m. which

02:33:36,900 --> 02:33:40,470
is seems to be a real common thing

02:33:38,100 --> 02:33:42,990
regardless of what country you're at and

02:33:40,470 --> 02:33:46,080
and you get your results from from there

02:33:42,990 --> 02:33:48,300
onwards accordingly so for example in

02:33:46,080 --> 02:33:50,040
this case that Netflix laptop one so

02:33:48,300 --> 02:33:51,271
this is actually an actual Netflix test

02:33:50,040 --> 02:33:53,880
that we run continuously and

02:33:51,271 --> 02:33:56,840
surprisingly even Netflix sometimes

02:33:53,880 --> 02:34:03,960
fails so like if you took a 5th of June

02:33:56,840 --> 02:34:06,860
first I know this is also like when even

02:34:03,960 --> 02:34:09,300
true somehow I'm getting espanol in

02:34:06,860 --> 02:34:11,160
Singapore I don't know why but these

02:34:09,300 --> 02:34:13,920
things actually happen without you

02:34:11,160 --> 02:34:15,480
noticing it and and sometimes test it's

02:34:13,920 --> 02:34:17,400
not just about running once it's about

02:34:15,480 --> 02:34:19,650
running again and again and again on

02:34:17,400 --> 02:34:21,090
your deafened Varma until touch you like

02:34:19,650 --> 02:34:22,950
maybe because you created too many users

02:34:21,090 --> 02:34:25,410
maybe you're just today they thought we

02:34:22,950 --> 02:34:25,830
had your index rental numbers and things

02:34:25,410 --> 02:34:28,110
like that

02:34:25,830 --> 02:34:31,350
Rani continuously until the on-site

02:34:28,110 --> 02:34:33,660
breaks and you fix it and yep that's

02:34:31,350 --> 02:34:36,150
pretty much out of time so yeah please

02:34:33,660 --> 02:34:37,470
call do she does whatever testing please

02:34:36,150 --> 02:34:42,540
do keep testing

02:34:37,470 --> 02:34:49,330
[Applause]

02:34:42,540 --> 02:34:51,939
yes yes we have a ciq chain which you

02:34:49,330 --> 02:34:55,890
can call through the CI CD so I mean you

02:34:51,939 --> 02:34:55,890
could quite too bad sorry - grace yes

02:34:56,610 --> 02:35:01,030
direct integration we fix our service

02:34:59,050 --> 02:35:04,740
but there's a bigger plan for now the

02:35:01,030 --> 02:35:04,740

YouTube URL: https://www.youtube.com/watch?v=mqICUajF8Mo


