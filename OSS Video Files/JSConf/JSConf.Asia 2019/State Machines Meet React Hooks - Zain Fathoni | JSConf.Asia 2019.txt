Title: State Machines Meet React Hooks - Zain Fathoni | JSConf.Asia 2019
Publication date: 2019-06-24
Playlist: JSConf.Asia 2019
Description: 
	Surprised of too many things went wrong in your UI components? 🤔
Ever felt that freeing your components from bugs is a never-ending endeavour? 🤮
Familiar with this kind of code in React? 😏
Join Zains journey in solving those kinds of issues using State Machines and see how they go in action with React Hooks. 🥳

Zain is an Indonesian developer working at Ninja Van as a Senior Software Engineer to help reshape its user-facing products to be more reliable and user-friendly. His passion in JavaScript drove him to spend his spare time learning it to switch from Backend Development to Frontend Development. He also enjoys playing musical instruments and hanging out with his family.


JSConf.Asia - LASALLE College of the Arts, Singapore - 15 June 2019

Source: https://2019.jsconf.asia/

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.


Intro animation "something something prisms" by Martin Schuhfuss
https://codepen.io/usefulthink/pen/WogmvW

Intro music "Know" by Matt McKegg
https://soundcloud.com/destroy-with-science/know
Captions: 
	00:00:00,620 --> 00:00:19,170
[Music]

00:00:15,650 --> 00:00:22,609
yeah I'm Zen pathani I'm Jane on Twitter

00:00:19,170 --> 00:00:24,630
and github and almost everything else

00:00:22,609 --> 00:00:26,460
today I'm going to talk about state

00:00:24,630 --> 00:00:32,040
machines meat we are cooks who knows

00:00:26,460 --> 00:00:34,680
sits machines here alright so yeah I

00:00:32,040 --> 00:00:36,270
know that you're a bit all this because

00:00:34,680 --> 00:00:40,160
state machines are all the odd things

00:00:36,270 --> 00:00:42,989
right it has been around for decades and

00:00:40,160 --> 00:00:46,050
now we are bringing this old stuff into

00:00:42,989 --> 00:00:48,300
react cooks which is just probably a few

00:00:46,050 --> 00:00:54,239
months ago released on stable version of

00:00:48,300 --> 00:00:56,219
react so yeah I have somebody I have two

00:00:54,239 --> 00:00:58,140
kids and I'm living in Singapore working

00:00:56,219 --> 00:01:03,000
as a ninja fan working at ninja friend

00:00:58,140 --> 00:01:04,920
as a front-end stuff previously I was a

00:01:03,000 --> 00:01:10,350
back-end developer but I just moved to

00:01:04,920 --> 00:01:13,369
from n for one and a half years and I'll

00:01:10,350 --> 00:01:20,880
react and it's hooks will Oh sucks here

00:01:13,369 --> 00:01:23,310
great okay what this talk is here I'm

00:01:20,880 --> 00:01:25,950
going to give you a very brief

00:01:23,310 --> 00:01:28,979
introduction to state machines so for

00:01:25,950 --> 00:01:31,140
you who just born yesterday who will

00:01:28,979 --> 00:01:34,079
just who never heard of state machines

00:01:31,140 --> 00:01:36,689
probably you need to get some basic

00:01:34,079 --> 00:01:41,579
concepts of it and then I'm going to

00:01:36,689 --> 00:01:45,509
walk you through to my personal journey

00:01:41,579 --> 00:01:49,560
when I was working on a feature in in

00:01:45,509 --> 00:01:52,320
Japan but that journey is too long too

00:01:49,560 --> 00:01:59,340
crammed up in 30 minutes right that's

00:01:52,320 --> 00:02:01,170
why I cram I cut it down and I simplify

00:01:59,340 --> 00:02:03,210
those things so what you're seeing here

00:02:01,170 --> 00:02:06,299
is not the real thing that I'm good but

00:02:03,210 --> 00:02:11,730
it's just a simulation of of my journey

00:02:06,299 --> 00:02:13,170
at the time so and since it's a code

00:02:11,730 --> 00:02:13,740
journey so there will be a lot of code

00:02:13,170 --> 00:02:16,500
so

00:02:13,740 --> 00:02:18,290
luckily this is my this is the first

00:02:16,500 --> 00:02:22,410
talk in the morning so I hope you're

00:02:18,290 --> 00:02:25,910
fresh enough to digest more good this

00:02:22,410 --> 00:02:28,200
morning and what this talk is not is

00:02:25,910 --> 00:02:30,840
this is not an introduction to react

00:02:28,200 --> 00:02:36,270
cooks so I'm not gonna introduce you to

00:02:30,840 --> 00:02:40,350
any concept of records and it's not also

00:02:36,270 --> 00:02:44,280
dig deep down to state machines concept

00:02:40,350 --> 00:02:46,110
because it has a lot of concepts we if

00:02:44,280 --> 00:02:51,450
you talk about it thoroughly it will

00:02:46,110 --> 00:02:53,930
take a few days for review so what is

00:02:51,450 --> 00:02:56,940
state machines

00:02:53,930 --> 00:02:59,310
well when I'm mentioning state machines

00:02:56,940 --> 00:03:04,320
I am referring to this finite state

00:02:59,310 --> 00:03:06,990
machines which is on Wikipedia yeah it's

00:03:04,320 --> 00:03:10,550
like this definition and we have some

00:03:06,990 --> 00:03:10,550
states and

00:03:23,330 --> 00:03:28,010
and why are we bringing this old stuff

00:03:25,820 --> 00:03:29,540
into foreign stuff because you soul is

00:03:28,010 --> 00:03:32,510
that machines are only used in critical

00:03:29,540 --> 00:03:34,790
systems in oil and gas company in NASA

00:03:32,510 --> 00:03:39,920
for building the rover to send to Mars

00:03:34,790 --> 00:03:42,020
because they can afford to have error or

00:03:39,920 --> 00:03:44,150
a new bug in production like us we can

00:03:42,020 --> 00:03:47,390
afford it right we can afford a bug in

00:03:44,150 --> 00:03:49,910
production and we can immediately push

00:03:47,390 --> 00:03:52,340
some code and deploy it but that's not

00:03:49,910 --> 00:03:54,380
the case for them they cannot just push

00:03:52,340 --> 00:03:58,670
a code to Mars right because it take

00:03:54,380 --> 00:04:01,250
months to get there so but why why

00:03:58,670 --> 00:04:06,590
bringing this this complicated stuff in

00:04:01,250 --> 00:04:10,220
the front end there are a lot of there

00:04:06,590 --> 00:04:13,460
are a lot of explanations which is

00:04:10,220 --> 00:04:16,730
explained by the creator of X state in

00:04:13,460 --> 00:04:18,650
this talk so you can just go through the

00:04:16,730 --> 00:04:25,400
accommodation and take a look at why

00:04:18,650 --> 00:04:28,660
that's this important but the one of the

00:04:25,400 --> 00:04:31,370
idea that I am getting sold out is

00:04:28,660 --> 00:04:33,950
because it provides a common language

00:04:31,370 --> 00:04:36,790
for designers and developers so let me

00:04:33,950 --> 00:04:36,790
explain Italy

00:04:37,120 --> 00:04:46,450
anybody ever get this kind of flow from

00:04:40,310 --> 00:04:48,800
designers or yep one two three okay so

00:04:46,450 --> 00:04:56,870
are we the only ones doing the complex

00:04:48,800 --> 00:04:59,720
stuff so I got I have a pitch in in our

00:04:56,870 --> 00:05:03,650
product in in Japan which is basically a

00:04:59,720 --> 00:05:06,050
calendar so this calendar you know an

00:05:03,650 --> 00:05:08,450
interaction in a calendar is a lot right

00:05:06,050 --> 00:05:10,490
there could be creating new staff or

00:05:08,450 --> 00:05:14,240
feeding the staff or filling the list of

00:05:10,490 --> 00:05:17,720
items in calendar and since we are a

00:05:14,240 --> 00:05:21,890
start-up we do it lean so instead of

00:05:17,720 --> 00:05:24,440
having all requirements given up at the

00:05:21,890 --> 00:05:27,500
first place we we just get the

00:05:24,440 --> 00:05:29,510
requirements gradually one by one so

00:05:27,500 --> 00:05:32,990
initially I got only probably one of

00:05:29,510 --> 00:05:34,640
this diagram but then I'm the next

00:05:32,990 --> 00:05:35,930
period I get another one on the next one

00:05:34,640 --> 00:05:37,070
I get another one then this diagram

00:05:35,930 --> 00:05:40,370
getting more and more

00:05:37,070 --> 00:05:43,910
complex and it's it's getting harder for

00:05:40,370 --> 00:05:48,290
me to understand my code and really my

00:05:43,910 --> 00:05:54,230
code to this diagram but luckily I'm

00:05:48,290 --> 00:05:58,790
getting pitch this idea so somebody so

00:05:54,230 --> 00:06:00,140
when I watched the top it he said that

00:05:58,790 --> 00:06:01,490
that machine provided common language

00:06:00,140 --> 00:06:03,320
for designers and developers and I

00:06:01,490 --> 00:06:07,550
thought it is it quite make sense

00:06:03,320 --> 00:06:10,010
because we're having this by using state

00:06:07,550 --> 00:06:14,560
machines we can actually code in a way

00:06:10,010 --> 00:06:17,170
that the diagram is presented to us and

00:06:14,560 --> 00:06:26,050
I will show you later that we can do

00:06:17,170 --> 00:06:29,150
vice-versa so my problem at the time was

00:06:26,050 --> 00:06:33,860
the complex UI flows that I get it

00:06:29,150 --> 00:06:37,940
requires multiple states by States here

00:06:33,860 --> 00:06:39,770
I mean states in react so I can it can

00:06:37,940 --> 00:06:41,990
be in hooks and it can be in in class

00:06:39,770 --> 00:06:45,350
components but it's basically the react

00:06:41,990 --> 00:06:48,380
States and multiple states are generally

00:06:45,350 --> 00:06:52,820
two implicit which means probably some

00:06:48,380 --> 00:06:54,530
let's say we have three states we have a

00:06:52,820 --> 00:06:56,600
combination of three states on that

00:06:54,530 --> 00:06:58,190
company right and then we are four

00:06:56,600 --> 00:07:02,090
states we have combination for this and

00:06:58,190 --> 00:07:04,640
imagine if the UI is too complex we can

00:07:02,090 --> 00:07:06,440
get the state explore it and it's

00:07:04,640 --> 00:07:10,730
getting harder to manage the states

00:07:06,440 --> 00:07:14,510
inside the company yep so those implicit

00:07:10,730 --> 00:07:15,760
States for me it's harder to reason

00:07:14,510 --> 00:07:19,370
about

00:07:15,760 --> 00:07:21,860
that's why bugs keep showing up on

00:07:19,370 --> 00:07:23,690
production due to this invisible state

00:07:21,860 --> 00:07:25,910
so I thought that I covered all the

00:07:23,690 --> 00:07:28,250
states but apparently there are some

00:07:25,910 --> 00:07:29,810
other combination of states that is not

00:07:28,250 --> 00:07:35,210
covered yet and it's appearing

00:07:29,810 --> 00:07:39,860
production so yeah let's try using state

00:07:35,210 --> 00:07:44,780
machines to solve this problem so my

00:07:39,860 --> 00:07:48,340
hypothesis is by using state machines we

00:07:44,780 --> 00:07:50,780
can make our States visible which means

00:07:48,340 --> 00:07:53,660
if we have my own physical States

00:07:50,780 --> 00:07:56,170
means no hidden bugs anymore right so

00:07:53,660 --> 00:07:59,630
let's hope it turns out that way

00:07:56,170 --> 00:08:01,100
enough talk so I told you that there

00:07:59,630 --> 00:08:06,860
will be a lot of good a lot of good

00:08:01,100 --> 00:08:08,389
we're starting to jump into the code I

00:08:06,860 --> 00:08:14,320
will give you a brief solution

00:08:08,389 --> 00:08:17,139
interaction through the x-step API so

00:08:14,320 --> 00:08:20,450
this is a simple toggle machine example

00:08:17,139 --> 00:08:23,540
so I'm just importing a machine function

00:08:20,450 --> 00:08:27,130
from X depth and I pass down a

00:08:23,540 --> 00:08:29,810
configuration object to the machine

00:08:27,130 --> 00:08:32,510
this configuration object configuration

00:08:29,810 --> 00:08:35,180
object should contain at least the first

00:08:32,510 --> 00:08:41,360
is the initial State so which state that

00:08:35,180 --> 00:08:43,370
it initially on when it started and then

00:08:41,360 --> 00:08:45,520
all the available States so in this case

00:08:43,370 --> 00:08:48,890
I have inactive State and then I have

00:08:45,520 --> 00:08:51,980
active state as well and within those

00:08:48,890 --> 00:08:55,040
states we can define state transitions

00:08:51,980 --> 00:08:59,260
so which is a way to to move between

00:08:55,040 --> 00:09:02,870
between states so in this case on toggle

00:08:59,260 --> 00:09:05,120
events we move to active state and on

00:09:02,870 --> 00:09:07,700
and from the active State on toggle

00:09:05,120 --> 00:09:13,010
offense to the same event we move to

00:09:07,700 --> 00:09:16,220
inactive State so this is the bare

00:09:13,010 --> 00:09:19,790
minimum of a state machine so we can try

00:09:16,220 --> 00:09:27,020
to copy this line and we can visualize

00:09:19,790 --> 00:09:31,880
it from the code yep here it is so now

00:09:27,020 --> 00:09:34,010
we cut our code visualize like this so

00:09:31,880 --> 00:09:36,500
it looks like the diagram that I shown

00:09:34,010 --> 00:09:39,589
you before the diagram that I that we

00:09:36,500 --> 00:09:41,900
cut from the designers it seems a bit

00:09:39,589 --> 00:09:44,180
overkill right I mean talker stuff what

00:09:41,900 --> 00:09:46,820
can be more complex than this what why

00:09:44,180 --> 00:09:50,050
do we need this ceremony just for

00:09:46,820 --> 00:09:55,330
toggling stuff but we will get to it

00:09:50,050 --> 00:09:55,330
soon so let's start the journey

00:09:55,389 --> 00:10:03,259
here I'm gonna walk you through my

00:09:58,519 --> 00:10:06,769
journey and I'm gonna split them step by

00:10:03,259 --> 00:10:09,470
step so it step consists of first the

00:10:06,769 --> 00:10:13,100
conventional implementation of it using

00:10:09,470 --> 00:10:15,170
hoops and then next we will get into

00:10:13,100 --> 00:10:17,000
this state machine definition and then

00:10:15,170 --> 00:10:23,199
next we will integrate that state

00:10:17,000 --> 00:10:27,139
machine into our app so for the first

00:10:23,199 --> 00:10:28,399
let's say imagine this is we are doing

00:10:27,139 --> 00:10:30,800
it in Sprint's and this is ours for

00:10:28,399 --> 00:10:33,190
spring so the first feature is simple

00:10:30,800 --> 00:10:38,180
this just toggle the model feasibility

00:10:33,190 --> 00:10:40,759
which I have button and I click and the

00:10:38,180 --> 00:10:43,870
militia up and I close and it closes

00:10:40,759 --> 00:10:43,870
it's impressive

00:10:44,709 --> 00:10:53,149
this is our bear component which uses a

00:10:49,699 --> 00:10:57,560
button and a model and I feels nothing

00:10:53,149 --> 00:10:59,750
here yet so for tracking the

00:10:57,560 --> 00:11:05,959
traceability step usually we use you

00:10:59,750 --> 00:11:10,040
step and then we just initiate the state

00:11:05,959 --> 00:11:12,620
with force and on button click we set it

00:11:10,040 --> 00:11:18,040
to true on closed model click we set it

00:11:12,620 --> 00:11:21,709
to false so this is our implementation

00:11:18,040 --> 00:11:26,540
it seems simple right why do we need set

00:11:21,709 --> 00:11:29,750
machines but let's try doing this simple

00:11:26,540 --> 00:11:33,800
thing using Sigma shins so I just add

00:11:29,750 --> 00:11:38,660
not the I just had an ID here so this is

00:11:33,800 --> 00:11:41,870
a machine for this case so we have an

00:11:38,660 --> 00:11:46,970
infeasible state as an easy L and then

00:11:41,870 --> 00:11:49,040
we put an open event so that it can go

00:11:46,970 --> 00:11:52,880
to visible state and this visible step

00:11:49,040 --> 00:11:54,319
has a closed event to invisible state so

00:11:52,880 --> 00:11:57,649
this is our simple machine which looks

00:11:54,319 --> 00:12:01,040
like our total machine before and when

00:11:57,649 --> 00:12:02,500
we select it it has similar thing the

00:12:01,040 --> 00:12:05,269
difference the only difference is that

00:12:02,500 --> 00:12:07,740
we have different events that occur so

00:12:05,269 --> 00:12:11,190
by having different events there

00:12:07,740 --> 00:12:13,140
no way for this state to let's say we're

00:12:11,190 --> 00:12:15,870
in physical state and we send clothes

00:12:13,140 --> 00:12:18,750
even it will do nothing because there's

00:12:15,870 --> 00:12:22,500
no clothes even on this state so that's

00:12:18,750 --> 00:12:24,990
what makes it contain we cannot go to

00:12:22,500 --> 00:12:31,710
any other state which is not defined

00:12:24,990 --> 00:12:34,590
here so let's integrate that solution

00:12:31,710 --> 00:12:40,770
into our app this is the same barebone

00:12:34,590 --> 00:12:43,950
app but I just imported not stuff use

00:12:40,770 --> 00:12:46,920
machine here is react cooked react

00:12:43,950 --> 00:12:49,800
custom hooks which is written in X state

00:12:46,920 --> 00:12:51,420
and you can look at the expression on

00:12:49,800 --> 00:12:55,230
the recommendation I wouldn't walk you

00:12:51,420 --> 00:12:58,590
through and this custom hooks accept

00:12:55,230 --> 00:13:00,510
first the machine itself the machine

00:12:58,590 --> 00:13:02,700
definition that we just did and then it

00:13:00,510 --> 00:13:05,760
accept some options which is one of them

00:13:02,700 --> 00:13:09,900
is the dev tools which means that we can

00:13:05,760 --> 00:13:16,500
debug our our app or our tension in

00:13:09,900 --> 00:13:18,450
redux dev tools and next we accept we

00:13:16,500 --> 00:13:21,540
get the concept and send even send a

00:13:18,450 --> 00:13:24,630
function to send even so for opening the

00:13:21,540 --> 00:13:26,820
model this simply sent an open even and

00:13:24,630 --> 00:13:36,770
for closing the Mirage is simply send

00:13:26,820 --> 00:13:39,110
close event and here to determine that

00:13:36,770 --> 00:13:41,760
whether the model is shown or not

00:13:39,110 --> 00:13:44,910
instead of placing physical state before

00:13:41,760 --> 00:13:47,190
we pass down the current state and the

00:13:44,910 --> 00:13:49,260
value of the current state and if the

00:13:47,190 --> 00:13:55,680
state is feasible then we display the

00:13:49,260 --> 00:13:58,290
model this is it and we still have the

00:13:55,680 --> 00:14:00,960
same working what our company but the

00:13:58,290 --> 00:14:04,470
only the difference is we can track it

00:14:00,960 --> 00:14:06,840
down in redux so we have an open even

00:14:04,470 --> 00:14:09,090
here changing state visible invisible to

00:14:06,840 --> 00:14:12,800
visible and we have closed even here

00:14:09,090 --> 00:14:12,800
changing state from visible to invisible

00:14:13,880 --> 00:14:19,910
okay that seems simple but now let's go

00:14:16,970 --> 00:14:22,759
to the spring this spear into a garment

00:14:19,910 --> 00:14:25,730
to which is we have to differentiate

00:14:22,759 --> 00:14:28,910
between view and edit screens like then

00:14:25,730 --> 00:14:32,000
our model was just no contain right but

00:14:28,910 --> 00:14:35,779
now it has a content and it has added

00:14:32,000 --> 00:14:38,569
button when I when we so it is feeling

00:14:35,779 --> 00:14:40,639
the thing here and then when you click

00:14:38,569 --> 00:14:43,339
the edit it is editing that thing and it

00:14:40,639 --> 00:14:46,790
can submit so that's the second

00:14:43,339 --> 00:14:52,519
requirement this is our old code in

00:14:46,790 --> 00:14:54,589
conventional hooks we have to add

00:14:52,519 --> 00:14:57,470
another state because we were checking

00:14:54,589 --> 00:15:03,829
another thing right here so we just add

00:14:57,470 --> 00:15:05,420
a editing step and then the ref the

00:15:03,829 --> 00:15:09,500
state value that we are passing down to

00:15:05,420 --> 00:15:12,740
the model so we are passing down this

00:15:09,500 --> 00:15:17,589
view and edit state value based on those

00:15:12,740 --> 00:15:19,939
two states before so the feasible and

00:15:17,589 --> 00:15:23,420
editing if it is feasible then it's not

00:15:19,939 --> 00:15:30,019
editing then this view and yeah

00:15:23,420 --> 00:15:31,160
something like this and that's for this

00:15:30,019 --> 00:15:33,680
for getting the state and now for

00:15:31,160 --> 00:15:37,670
changing the state we should propagate

00:15:33,680 --> 00:15:39,850
to the events of clicking or some or a

00:15:37,670 --> 00:15:41,720
grow of clicking these buttons to

00:15:39,850 --> 00:15:45,019
setting the States

00:15:41,720 --> 00:15:46,399
so right here we we set editing to false

00:15:45,019 --> 00:15:47,630
when we want to crystal when we are

00:15:46,399 --> 00:15:50,060
crossing the model so it gets to the

00:15:47,630 --> 00:15:53,360
initial set and then on edit button we

00:15:50,060 --> 00:15:56,209
just set it to true so that's our

00:15:53,360 --> 00:15:59,149
implementation it's still mini 2 plus so

00:15:56,209 --> 00:16:04,910
far so why don't we but why we better is

00:15:59,149 --> 00:16:10,069
writing state machines but we do some

00:16:04,910 --> 00:16:13,100
unusual stuff sometimes right now let's

00:16:10,069 --> 00:16:14,569
write state machine and right here I'm

00:16:13,100 --> 00:16:21,620
going to introduce you to a new concept

00:16:14,569 --> 00:16:25,550
part here a hierarchical state so here

00:16:21,620 --> 00:16:27,750
we have a new state but it's not in it's

00:16:25,550 --> 00:16:30,300
not sibling of the existing state but

00:16:27,750 --> 00:16:32,280
has to be children of an existing state

00:16:30,300 --> 00:16:34,470
because this state is actually inside

00:16:32,280 --> 00:16:37,400
the visible because this state is only

00:16:34,470 --> 00:16:41,430
exists when the model is visible right

00:16:37,400 --> 00:16:43,350
and we can just add those states inside

00:16:41,430 --> 00:16:46,590
it so this is called hierarchical

00:16:43,350 --> 00:16:49,650
straight state and inside the visible

00:16:46,590 --> 00:16:52,080
said we have a few state which is an

00:16:49,650 --> 00:16:54,870
initial state and then we can go to the

00:16:52,080 --> 00:16:57,270
Edit State but then from edit state we

00:16:54,870 --> 00:17:01,890
need to go to the parent State right so

00:16:57,270 --> 00:17:03,660
there is no the the default when it

00:17:01,890 --> 00:17:06,660
accepts the state it can only access

00:17:03,660 --> 00:17:09,959
this its siblings it so how do we we

00:17:06,660 --> 00:17:12,990
access the parent step luckily actually

00:17:09,959 --> 00:17:16,380
provide a way to do it by defining an ID

00:17:12,990 --> 00:17:20,160
on appearances or or any any data or

00:17:16,380 --> 00:17:21,959
anywhere on the machine and then we can

00:17:20,160 --> 00:17:25,920
just refer to that ID but by just by

00:17:21,959 --> 00:17:28,770
putting a hash in front of it so this is

00:17:25,920 --> 00:17:32,430
our state machine definition then it

00:17:28,770 --> 00:17:35,700
looks like this when we visualize it so

00:17:32,430 --> 00:17:36,840
on invisible this invisible and physical

00:17:35,700 --> 00:17:39,840
thing is the same thing that we have

00:17:36,840 --> 00:17:44,010
previously but then we have two new

00:17:39,840 --> 00:17:47,040
states inside the visible state so when

00:17:44,010 --> 00:17:49,860
we are on view we can edit it and if you

00:17:47,040 --> 00:17:52,500
can submit it and when we are inside in

00:17:49,860 --> 00:17:56,610
any of this we can still close the model

00:17:52,500 --> 00:17:59,370
that's how it works right so let's

00:17:56,610 --> 00:18:03,000
implement this in our state machine this

00:17:59,370 --> 00:18:04,440
our previous one we need to change the

00:18:03,000 --> 00:18:10,310
value that we are passing to the model

00:18:04,440 --> 00:18:13,470
because now our feasible set is not

00:18:10,310 --> 00:18:16,170
string it's not always a string because

00:18:13,470 --> 00:18:19,070
unfeasible we have to inner states so it

00:18:16,170 --> 00:18:26,160
will be an object so we are passing on

00:18:19,070 --> 00:18:28,290
that object so if if that if the state

00:18:26,160 --> 00:18:30,990
is an object and contains visible and

00:18:28,290 --> 00:18:33,090
visible contains in state then we press

00:18:30,990 --> 00:18:35,820
that inner state otherwise it will be

00:18:33,090 --> 00:18:38,790
undefined so that that's why this is

00:18:35,820 --> 00:18:41,160
still valid for our model tomorrow will

00:18:38,790 --> 00:18:44,270
show when we have

00:18:41,160 --> 00:18:46,830
inner state in the feasible state and

00:18:44,270 --> 00:18:49,680
then for editing some defense it's

00:18:46,830 --> 00:18:52,740
simply sending those events out using

00:18:49,680 --> 00:18:58,320
the send function that's it

00:18:52,740 --> 00:19:02,670
and when we try doing this it works and

00:18:58,320 --> 00:19:10,080
we can also see the redux yeah so now

00:19:02,670 --> 00:19:12,330
when we are opening the state yeah now

00:19:10,080 --> 00:19:15,960
now we have this visible edit so when we

00:19:12,330 --> 00:19:18,330
were close the value is the field is

00:19:15,960 --> 00:19:21,720
invisible and when you open it the fella

00:19:18,330 --> 00:19:24,060
is now visible good view and now it's

00:19:21,720 --> 00:19:27,920
physical edit so it's how X that

00:19:24,060 --> 00:19:30,840
represents the state okay

00:19:27,920 --> 00:19:36,360
so far we are getting with more

00:19:30,840 --> 00:19:40,620
complicated here now so on the Sprint 3

00:19:36,360 --> 00:19:42,030
we had a new feature to show the create

00:19:40,620 --> 00:19:44,700
screen when opening Moodle with empty

00:19:42,030 --> 00:19:46,980
data remember that my case was a

00:19:44,700 --> 00:19:49,440
calendar when we click a date there

00:19:46,980 --> 00:19:52,890
could be something in it which is this

00:19:49,440 --> 00:19:55,800
is our it is this case but there could

00:19:52,890 --> 00:19:58,830
be nothing on it which we don't have

00:19:55,800 --> 00:20:02,220
anything to show right so that's why we

00:19:58,830 --> 00:20:03,780
have to go to immediate little editing

00:20:02,220 --> 00:20:07,080
mode which is called create because

00:20:03,780 --> 00:20:10,860
we're creating something so we have two

00:20:07,080 --> 00:20:13,530
cases now and to accommodate it to

00:20:10,860 --> 00:20:17,040
accommodate that in our conventional

00:20:13,530 --> 00:20:20,910
implementation we add another state

00:20:17,040 --> 00:20:22,680
called data the data object or the thing

00:20:20,910 --> 00:20:27,840
in the country and we initialize it with

00:20:22,680 --> 00:20:30,840
an empty array so now it's getting more

00:20:27,840 --> 00:20:33,240
complicated well we have to incorporate

00:20:30,840 --> 00:20:36,780
these three states feasible editing and

00:20:33,240 --> 00:20:38,400
data to and derive a state value from

00:20:36,780 --> 00:20:42,390
that then we have to write these

00:20:38,400 --> 00:20:45,330
conditional stars this seems a bit still

00:20:42,390 --> 00:20:52,260
more manageable but we are still far

00:20:45,330 --> 00:20:54,600
away forwards so this update buttons to

00:20:52,260 --> 00:20:56,340
have two things now now we

00:20:54,600 --> 00:20:59,220
of an empty which is the old stuff and

00:20:56,340 --> 00:21:02,070
then we can open access which is we are

00:20:59,220 --> 00:21:03,720
setting we are opening the water and we

00:21:02,070 --> 00:21:05,160
are setting the data to have some

00:21:03,720 --> 00:21:11,669
content here it's just an empty string

00:21:05,160 --> 00:21:13,710
to simplify and don't forget to clean up

00:21:11,669 --> 00:21:16,470
the data when we are crossing the motor

00:21:13,710 --> 00:21:20,429
or submitting so there's our

00:21:16,470 --> 00:21:24,690
implementation okay now it's getting

00:21:20,429 --> 00:21:26,010
more complex because now all of those

00:21:24,690 --> 00:21:26,669
additional logic are scattered

00:21:26,010 --> 00:21:28,950
everywhere

00:21:26,669 --> 00:21:32,760
and it's harder to understand because

00:21:28,950 --> 00:21:37,710
it's too implicit which that is this

00:21:32,760 --> 00:21:39,870
list oh and which tests actually so

00:21:37,710 --> 00:21:44,309
let's try implementing this with set

00:21:39,870 --> 00:21:53,280
machines and here here is where it got

00:21:44,309 --> 00:21:55,470
more useful now so in this case we are

00:21:53,280 --> 00:21:58,400
triggering the same event which is

00:21:55,470 --> 00:22:02,309
opening the model so we need to

00:21:58,400 --> 00:22:08,070
transition the step from invisible to

00:22:02,309 --> 00:22:10,049
visible and here is how we define the

00:22:08,070 --> 00:22:13,970
transition but there is another way of

00:22:10,049 --> 00:22:16,470
defining this transition which is

00:22:13,970 --> 00:22:20,039
defining it is an object so that we can

00:22:16,470 --> 00:22:21,510
add some more things here so this

00:22:20,039 --> 00:22:25,140
actually the same thing with the

00:22:21,510 --> 00:22:29,490
previous one and this another way to

00:22:25,140 --> 00:22:33,600
define it as an array so that we can

00:22:29,490 --> 00:22:35,309
target different things so that we so

00:22:33,600 --> 00:22:39,270
now we can target different states from

00:22:35,309 --> 00:22:43,740
the same state within using the same

00:22:39,270 --> 00:22:44,549
event how do we differ between this

00:22:43,740 --> 00:22:49,350
target and the target

00:22:44,549 --> 00:22:51,240
we differ it using condition so this

00:22:49,350 --> 00:22:53,340
condition inside machine is called car

00:22:51,240 --> 00:22:55,679
which means like imagine a state is a

00:22:53,340 --> 00:22:59,280
place and we have guards in front of the

00:22:55,679 --> 00:23:00,659
in one of the state in front of the

00:22:59,280 --> 00:23:02,549
place like like our grass which is

00:23:00,659 --> 00:23:04,409
scanning or attack so even though if

00:23:02,549 --> 00:23:07,290
somebody is trying to come into this

00:23:04,409 --> 00:23:08,220
stage without having the proper tag they

00:23:07,290 --> 00:23:10,830
wouldn't be allowed

00:23:08,220 --> 00:23:17,580
- coming right so this like this is why

00:23:10,830 --> 00:23:21,179
it called it's called God so here we are

00:23:17,580 --> 00:23:23,070
guarding that if the data is zero if the

00:23:21,179 --> 00:23:26,400
data length zero and then we go to this

00:23:23,070 --> 00:23:30,830
state otherwise we go to the previous

00:23:26,400 --> 00:23:35,700
one so just created add a create set and

00:23:30,830 --> 00:23:39,809
that's it so this is our news visualized

00:23:35,700 --> 00:23:42,179
a machine we have a new condition here

00:23:39,809 --> 00:23:43,980
so it's the same event but different

00:23:42,179 --> 00:23:47,100
condition with this condition we go

00:23:43,980 --> 00:23:50,130
directly to create and the rest are the

00:23:47,100 --> 00:23:54,210
same so when we implement this into the

00:23:50,130 --> 00:23:56,909
scene let's rename the current button

00:23:54,210 --> 00:24:00,299
and then so now it's open empty and

00:23:56,909 --> 00:24:02,159
press down an object instead of just

00:24:00,299 --> 00:24:05,309
passing out a string now we press it and

00:24:02,159 --> 00:24:08,309
pass an object with the type of that

00:24:05,309 --> 00:24:12,390
string and a payload in it so we pass

00:24:08,309 --> 00:24:16,710
down an empty period and we also need to

00:24:12,390 --> 00:24:18,780
have another another button which sends

00:24:16,710 --> 00:24:23,010
the same event but with different data

00:24:18,780 --> 00:24:26,070
here that's it that's our implementation

00:24:23,010 --> 00:24:40,559
in our component so it still works the

00:24:26,070 --> 00:24:43,950
same okay now we get to the final spring

00:24:40,559 --> 00:24:45,450
in the stop we have to show this screen

00:24:43,950 --> 00:24:48,240
when we are opening a model with

00:24:45,450 --> 00:24:50,309
multiple data so imagine that there is a

00:24:48,240 --> 00:24:53,460
date where we have multiple things there

00:24:50,309 --> 00:24:55,620
so we don't know yet which one to feel

00:24:53,460 --> 00:24:57,090
right which one to feel like this so if

00:24:55,620 --> 00:24:59,100
you have multiple data which one to show

00:24:57,090 --> 00:25:01,049
we don't know that's why we are

00:24:59,100 --> 00:25:03,090
displaying a list of them and the user

00:25:01,049 --> 00:25:05,130
can click on one of the lists and we can

00:25:03,090 --> 00:25:10,440
show the view and it does the same thing

00:25:05,130 --> 00:25:13,200
like before so now this is our old

00:25:10,440 --> 00:25:16,029
component add another step which is

00:25:13,200 --> 00:25:18,220
called index which

00:25:16,029 --> 00:25:25,179
represents the index that we are seeing

00:25:18,220 --> 00:25:27,519
and I enjoy it with with -1 so it's so

00:25:25,179 --> 00:25:29,980
if we if you use now when we compare it

00:25:27,519 --> 00:25:31,840
to other numbers it bit strange in

00:25:29,980 --> 00:25:36,610
JavaScript so just let's use this

00:25:31,840 --> 00:25:39,509
sentinel value then incorporated index

00:25:36,610 --> 00:25:41,440
into our new state which is lys and

00:25:39,509 --> 00:25:45,250
don't forget to add another condition

00:25:41,440 --> 00:25:47,940
because now this condition is change

00:25:45,250 --> 00:25:51,929
because of this

00:25:47,940 --> 00:25:54,940
add new buttons with different data here

00:25:51,929 --> 00:25:59,110
don't forget to reset that index to the

00:25:54,940 --> 00:26:01,990
-1 when you cross the model so now it's

00:25:59,110 --> 00:26:03,940
getting more and more complicated well

00:26:01,990 --> 00:26:06,309
this is not mind-blowing yet because

00:26:03,940 --> 00:26:10,149
it's still step 4 imagine that in

00:26:06,309 --> 00:26:19,840
production I have like step 10 or step

00:26:10,149 --> 00:26:21,970
20 so yes it blowed my mind so with in

00:26:19,840 --> 00:26:23,379
solutions we can do it the other way we

00:26:21,970 --> 00:26:27,490
can do it the same way that we did

00:26:23,379 --> 00:26:31,870
before so it just add another guard and

00:26:27,490 --> 00:26:34,179
another state to go but then now it's

00:26:31,870 --> 00:26:35,919
getting harder to retry because then

00:26:34,179 --> 00:26:40,120
what's the point of using insta machine

00:26:35,919 --> 00:26:43,570
if we still get it hard to read we can

00:26:40,120 --> 00:26:46,750
alias this state sorry we can elect this

00:26:43,570 --> 00:26:49,240
guard into a simple string so it's more

00:26:46,750 --> 00:26:51,399
readable so now we have if empty then

00:26:49,240 --> 00:26:55,840
this if single then this if and else

00:26:51,399 --> 00:26:57,730
this and we do find those cards into

00:26:55,840 --> 00:26:58,929
this object in step so this is the

00:26:57,730 --> 00:27:03,149
second object that we pass through the

00:26:58,929 --> 00:27:09,039
machine and it's just naming the

00:27:03,149 --> 00:27:11,080
condition as as a string and then define

00:27:09,039 --> 00:27:15,639
another list 8 with any actions

00:27:11,080 --> 00:27:19,870
interacting with it so that's here is

00:27:15,639 --> 00:27:22,210
our new state we have a new open even

00:27:19,870 --> 00:27:24,190
state with different condition but now

00:27:22,210 --> 00:27:26,019
it's with a proper name so if it's empty

00:27:24,190 --> 00:27:27,850
then it's going here if it's single

00:27:26,019 --> 00:27:29,060
Danny screen here if it's nothing then

00:27:27,850 --> 00:27:36,770
is going to the

00:27:29,060 --> 00:27:41,890
stayed which is initialized to this yeah

00:27:36,770 --> 00:27:45,230
now just add another button will open

00:27:41,890 --> 00:27:50,270
even same of an event but with different

00:27:45,230 --> 00:27:52,340
data now we have multiple data and and

00:27:50,270 --> 00:27:54,860
inside the model we have an interaction

00:27:52,340 --> 00:27:56,960
to view the details and go back to the

00:27:54,860 --> 00:28:01,390
ListView so we just passed down the back

00:27:56,960 --> 00:28:04,450
and few events and that's it our

00:28:01,390 --> 00:28:06,710
implementation is now more readable and

00:28:04,450 --> 00:28:11,600
it's easier to read yes

00:28:06,710 --> 00:28:19,280
and now we can inspect this yeah it's

00:28:11,600 --> 00:28:21,290
working all right so let's compare our

00:28:19,280 --> 00:28:24,710
previous implementation the old way to

00:28:21,290 --> 00:28:26,660
the state machine implementation so with

00:28:24,710 --> 00:28:29,300
our solutions we usually use you state

00:28:26,660 --> 00:28:31,130
right but in with this machine we don't

00:28:29,300 --> 00:28:36,740
use it anymore we just use use machine

00:28:31,130 --> 00:28:39,230
and replace those multiple states before

00:28:36,740 --> 00:28:43,040
with just a single call out of the use

00:28:39,230 --> 00:28:45,200
machine and we have to stew things here

00:28:43,040 --> 00:28:48,800
now this is the state and is the event

00:28:45,200 --> 00:28:51,200
and now instead of having those implicit

00:28:48,800 --> 00:28:53,330
starts at state cost which we don't

00:28:51,200 --> 00:28:55,070
really have any idea what does this - oh

00:28:53,330 --> 00:28:57,470
this is doing the same thing actually

00:28:55,070 --> 00:28:59,180
but it's harder to understand we need to

00:28:57,470 --> 00:29:02,000
read this code probably two or three

00:28:59,180 --> 00:29:04,190
more times to actually understand what's

00:29:02,000 --> 00:29:06,890
happening on this code but by using the

00:29:04,190 --> 00:29:08,420
machines we can just know what have

00:29:06,890 --> 00:29:10,730
what's happening on this button what's

00:29:08,420 --> 00:29:18,650
happening on this action just by looking

00:29:10,730 --> 00:29:23,960
at once and now our app is more simple

00:29:18,650 --> 00:29:25,460
and easier to understand but we're

00:29:23,960 --> 00:29:27,290
actually just moving away the complexity

00:29:25,460 --> 00:29:31,660
from death to the state machine right

00:29:27,290 --> 00:29:34,430
but the situation is still complex right

00:29:31,660 --> 00:29:36,080
yes it's still complex but the the

00:29:34,430 --> 00:29:37,520
difference between the solution the

00:29:36,080 --> 00:29:39,140
community of the state machine it and

00:29:37,520 --> 00:29:41,330
the competitor of the very first

00:29:39,140 --> 00:29:42,710
implementation is this the machine can

00:29:41,330 --> 00:29:46,730
be visualized easily

00:29:42,710 --> 00:29:49,970
so we're using the same visualizer we

00:29:46,730 --> 00:29:53,060
can visualize all the state in a way

00:29:49,970 --> 00:29:56,390
that that corresponds to the flow that

00:29:53,060 --> 00:29:58,880
we have let me get from the designers so

00:29:56,390 --> 00:30:02,540
this visualization for me it reduces the

00:29:58,880 --> 00:30:04,640
cognitive overload so based on my

00:30:02,540 --> 00:30:08,240
experience the appendage assist now

00:30:04,640 --> 00:30:10,940
since I'll still are feeble it's easier

00:30:08,240 --> 00:30:12,680
to test so we can just test from

00:30:10,940 --> 00:30:15,350
whenever from whichever state to go to

00:30:12,680 --> 00:30:18,290
whichever state and in fact I did all

00:30:15,350 --> 00:30:20,510
the tests so I'm confident enough with

00:30:18,290 --> 00:30:24,530
my machine I am confident that my

00:30:20,510 --> 00:30:28,520
machine will break but a setback free si

00:30:24,530 --> 00:30:32,840
hypothesize apparently not so it's not

00:30:28,520 --> 00:30:35,930
completely bug free so the the bug comes

00:30:32,840 --> 00:30:37,580
not from the state but it came from the

00:30:35,930 --> 00:30:41,450
discrepancies between the state and the

00:30:37,580 --> 00:30:44,510
rendered fuse so I had the correct state

00:30:41,450 --> 00:30:47,060
but you know inside that model and we're

00:30:44,510 --> 00:30:48,500
just so far we're just passing down the

00:30:47,060 --> 00:30:50,450
state of the model right but what's

00:30:48,500 --> 00:30:52,520
happening inside the model is some it's

00:30:50,450 --> 00:30:54,920
kind of it can go wrong over there so

00:30:52,520 --> 00:30:58,190
the box is coming from that model view

00:30:54,920 --> 00:30:59,810
so instead of just testing the state we

00:30:58,190 --> 00:31:01,640
should also have tested the rendered

00:30:59,810 --> 00:31:06,500
view as well in this case we should have

00:31:01,640 --> 00:31:10,250
tested Model View so that's why I'm

00:31:06,500 --> 00:31:14,030
suggesting us to consider integration

00:31:10,250 --> 00:31:17,840
tests so my lesson slot in this journey

00:31:14,030 --> 00:31:21,350
is when we are using state machines it

00:31:17,840 --> 00:31:24,470
must be designed thoroughly because it's

00:31:21,350 --> 00:31:27,050
a complex stuff it so the state machines

00:31:24,470 --> 00:31:31,430
will just work but it works as we design

00:31:27,050 --> 00:31:34,070
so if we design it badly then it will go

00:31:31,430 --> 00:31:35,630
spit and yes it's easy to pass the state

00:31:34,070 --> 00:31:38,240
because just just testing the string

00:31:35,630 --> 00:31:41,890
testing the object right but don't

00:31:38,240 --> 00:31:45,290
forget to test the rendered fuse and

00:31:41,890 --> 00:31:47,900
another thing that I learned is there's

00:31:45,290 --> 00:31:50,420
no super about it we cannot use still

00:31:47,900 --> 00:31:52,850
machines everywhere just like we cannot

00:31:50,420 --> 00:31:56,140
use redux everywhere and we cannot use

00:31:52,850 --> 00:32:01,720
get derived state from props

00:31:56,140 --> 00:32:08,220
anyway yeah so just be mindful that we

00:32:01,720 --> 00:32:10,570
might not need state machines as well so

00:32:08,220 --> 00:32:13,450
my takeaway from this experience is

00:32:10,570 --> 00:32:15,940
please use state machines sparingly so

00:32:13,450 --> 00:32:18,340
use it when you need it and when you use

00:32:15,940 --> 00:32:20,260
it it's all isolate the state management

00:32:18,340 --> 00:32:24,460
into custom hooks so it's easier to

00:32:20,260 --> 00:32:26,620
understand and do pass and always test

00:32:24,460 --> 00:32:31,690
your code thoroughly which means testing

00:32:26,620 --> 00:32:33,400
all the codes including the few so in

00:32:31,690 --> 00:32:35,200
this talk I very scratch the surface of

00:32:33,400 --> 00:32:38,890
state machines concepts there are a lot

00:32:35,200 --> 00:32:41,309
of things more instead machines you can

00:32:38,890 --> 00:32:44,590
just read out read up to the

00:32:41,309 --> 00:32:46,630
documentation a lot of things even in

00:32:44,590 --> 00:32:48,790
fact I didn't I also didn't learn all

00:32:46,630 --> 00:32:52,870
the stuff there yet so I just explained

00:32:48,790 --> 00:32:56,200
what I implemented so I asked suggesting

00:32:52,870 --> 00:32:58,870
you to learn to testing trophy by

00:32:56,200 --> 00:33:02,410
considered I actually took his course

00:32:58,870 --> 00:33:07,240
and it seems much more useful to prevent

00:33:02,410 --> 00:33:09,760
some bugs happening in our code now so

00:33:07,240 --> 00:33:14,490
we can get enough confidence within our

00:33:09,760 --> 00:33:17,110
code so I think that's all thank you for

00:33:14,490 --> 00:33:19,330
your attention and I want to give a

00:33:17,110 --> 00:33:23,110
special thanks to David courtship which

00:33:19,330 --> 00:33:26,020
is the creator of X state and Rodrigo

00:33:23,110 --> 00:33:28,690
Pombo for his amazing cool surfer that I

00:33:26,020 --> 00:33:30,520
used here even though it is still in

00:33:28,690 --> 00:33:34,120
alpha version but it's pretty good right

00:33:30,520 --> 00:33:36,910
I think nothing wrong happens so you can

00:33:34,120 --> 00:33:39,510
access this site in this ring and this

00:33:36,910 --> 00:33:39,510

YouTube URL: https://www.youtube.com/watch?v=ioh7aqrBcs0


