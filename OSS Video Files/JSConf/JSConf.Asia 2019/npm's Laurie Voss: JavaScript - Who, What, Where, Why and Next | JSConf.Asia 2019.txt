Title: npm's Laurie Voss: JavaScript - Who, What, Where, Why and Next | JSConf.Asia 2019
Publication date: 2019-06-24
Playlist: JSConf.Asia 2019
Description: 
	npm has more data than anyone about who JavaScript developers are and what weâ€™re up to. Using our unparalleled access to registry usage stats and the results of our 2019 ecosystem survey of over 33,000 developers, I break down the current state of JavaScript and where trends look like theyâ€™re headed, from frameworks through security best practices, so you can make more informed technical choices.

Laurie has been a web developer for 23 years and is passionate about making the web better and web development more accessible to everybody. He is co-founder and Chief Data Officer at npm, Inc., provider of package management and security services to the JavaScript developers of the world.


JSConf.Asia - LASALLE College of the Arts, Singapore - 16 June 2019

Source: https://2019.jsconf.asia/

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.


Intro animation "something something prisms" by Martin Schuhfuss
https://codepen.io/usefulthink/pen/WogmvW

Intro music "Know" by Matt McKegg
https://soundcloud.com/destroy-with-science/know
Captions: 
	00:00:00,620 --> 00:00:15,820
[Music]

00:00:18,199 --> 00:00:24,779
hello everybody uh thank you so much for

00:00:22,800 --> 00:00:27,000
inviting me and thank you for staying

00:00:24,779 --> 00:00:28,619
all the way to the last talk on a

00:00:27,000 --> 00:00:30,119
three-day conference I know that it is

00:00:28,619 --> 00:00:32,040
very hard to keep the energy going all

00:00:30,119 --> 00:00:35,790
the way to the end of a conference and

00:00:32,040 --> 00:00:37,590
the very end of the day this has been a

00:00:35,790 --> 00:00:40,350
great conference I want to thank the

00:00:37,590 --> 00:00:42,059
organizers the staff the volunteers for

00:00:40,350 --> 00:00:44,129
an amazing conference I go to a lot of

00:00:42,059 --> 00:00:47,010
conferences and this has been absolutely

00:00:44,129 --> 00:00:48,510
world-class the curation of the talks

00:00:47,010 --> 00:00:52,379
the quality of the speakers the

00:00:48,510 --> 00:00:53,840
organization the a/v the food please

00:00:52,379 --> 00:00:59,030
let's all give them a round of applause

00:00:53,840 --> 00:01:02,129
[Applause]

00:00:59,030 --> 00:01:08,760
and before we get started we have to do

00:01:02,129 --> 00:01:10,770
the pre talk speaker selfie because if

00:01:08,760 --> 00:01:12,500
it doesn't end up on Instagram did it

00:01:10,770 --> 00:01:16,110
even happen

00:01:12,500 --> 00:01:19,920
all right with that important business

00:01:16,110 --> 00:01:22,200
out of the way hello I'm Laurie I helped

00:01:19,920 --> 00:01:24,479
co-found NPM Inc I didn't invent NPM I

00:01:22,200 --> 00:01:27,180
just did all of the other stuff and I'm

00:01:24,479 --> 00:01:29,520
currently chief data officer there but

00:01:27,180 --> 00:01:31,710
what I really AM is a web developer I've

00:01:29,520 --> 00:01:33,390
been a web developer for 23 years now

00:01:31,710 --> 00:01:35,400
which means that I have been writing

00:01:33,390 --> 00:01:40,470
HTML longer than some of you have been

00:01:35,400 --> 00:01:42,689
alive but making the web bigger and

00:01:40,470 --> 00:01:45,060
better and more accessible by getting

00:01:42,689 --> 00:01:48,390
more people involved that is what really

00:01:45,060 --> 00:01:50,399
motivates me and I know that you were

00:01:48,390 --> 00:01:52,380
all expecting a talk about the future of

00:01:50,399 --> 00:01:54,210
JavaScript but at the last minute I

00:01:52,380 --> 00:01:56,909
decided I would just throw the whole

00:01:54,210 --> 00:02:00,200
thing out and instead this talk is gonna

00:01:56,909 --> 00:02:01,749
be about micro front ends

00:02:00,200 --> 00:02:05,869
[Music]

00:02:01,749 --> 00:02:07,819
can you even imagine this is just a joke

00:02:05,869 --> 00:02:09,080
for like the five people who spend way

00:02:07,819 --> 00:02:11,720
too much time on Twitter and will

00:02:09,080 --> 00:02:14,000
understand this joke what I'm really

00:02:11,720 --> 00:02:17,660
here to talk about is JavaScript I'm

00:02:14,000 --> 00:02:21,260
gonna talk about who we are we the

00:02:17,660 --> 00:02:22,790
people who write JavaScript where we use

00:02:21,260 --> 00:02:25,549
JavaScript and what we're doing with it

00:02:22,790 --> 00:02:27,620
today and I'm also going to talk about

00:02:25,549 --> 00:02:30,170
why we're doing this stuff the forces

00:02:27,620 --> 00:02:32,959
that got JavaScript and us into where we

00:02:30,170 --> 00:02:34,579
are today and then finally I'm going to

00:02:32,959 --> 00:02:35,810
talk about what comes next I'm gonna

00:02:34,579 --> 00:02:38,269
look at all of the trends that we're

00:02:35,810 --> 00:02:42,319
seeing and make some guesses about where

00:02:38,269 --> 00:02:44,569
it's going the goal of this talk is to

00:02:42,319 --> 00:02:47,930
give you a sense of where you are in the

00:02:44,569 --> 00:02:50,030
landscape of JavaScript and where your

00:02:47,930 --> 00:02:51,980
current tools and techniques sit in that

00:02:50,030 --> 00:02:54,349
landscape because too many developers

00:02:51,980 --> 00:02:56,660
work in a sort of vacuum you don't know

00:02:54,349 --> 00:02:59,450
if the stuff that you're doing is a best

00:02:56,660 --> 00:03:01,220
practice or if it's a fad or if it's

00:02:59,450 --> 00:03:03,349
this outdated technique that nobody does

00:03:01,220 --> 00:03:05,440
anymore too many people are like I'm

00:03:03,349 --> 00:03:07,970
gonna do this thing and I hope it's okay

00:03:05,440 --> 00:03:10,670
but we know and we should be able to

00:03:07,970 --> 00:03:12,139
share that information with you so I

00:03:10,670 --> 00:03:16,510
hope you'll leave this talk feeling good

00:03:12,139 --> 00:03:18,500
about one thing that you're using and

00:03:16,510 --> 00:03:20,030
realizing it's time to move away from

00:03:18,500 --> 00:03:22,280
one other thing that you're using and

00:03:20,030 --> 00:03:25,730
also curious and excited about learning

00:03:22,280 --> 00:03:27,560
one new thing but before I say all of

00:03:25,730 --> 00:03:29,810
this stuff it's worth asking how we know

00:03:27,560 --> 00:03:31,880
all of this stuff I have three main

00:03:29,810 --> 00:03:34,069
sources first the NPM registry logs

00:03:31,880 --> 00:03:36,829
every time you download a package we see

00:03:34,069 --> 00:03:38,120
it happen they contain an enormous

00:03:36,829 --> 00:03:41,389
amount of information about what

00:03:38,120 --> 00:03:42,970
JavaScript developers are up to second

00:03:41,389 --> 00:03:46,040
we went out and asked people directly

00:03:42,970 --> 00:03:47,930
two years ago we did a survey of 16,000

00:03:46,040 --> 00:03:50,450
JavaScript developers and last year we

00:03:47,930 --> 00:03:51,739
did a bigger one of 33,000 JavaScript

00:03:50,450 --> 00:03:54,980
developers and asked you directly like

00:03:51,739 --> 00:03:56,359
what are you using and why and I also

00:03:54,980 --> 00:03:58,010
supplemented and double-checked our

00:03:56,359 --> 00:04:00,319
numbers using the excellent state of

00:03:58,010 --> 00:04:02,720
JavaScript survey run by independent

00:04:00,319 --> 00:04:04,849
members of the community incidentally

00:04:02,720 --> 00:04:06,440
while this talk is strictly about

00:04:04,849 --> 00:04:08,870
JavaScript if you are interested in

00:04:06,440 --> 00:04:10,519
warren CSS the same people who did the

00:04:08,870 --> 00:04:12,639
state of javascript survey this year for

00:04:10,519 --> 00:04:14,910
the first time did a state of CSS survey

00:04:12,639 --> 00:04:17,459
and it's full of fun

00:04:14,910 --> 00:04:19,950
Meishan about what is going on in the

00:04:17,459 --> 00:04:22,200
world of CSS and the website is an

00:04:19,950 --> 00:04:23,760
absolute nightmare CSS transitions

00:04:22,200 --> 00:04:27,930
because they just threw in everything

00:04:23,760 --> 00:04:29,580
that they could possibly do and before

00:04:27,930 --> 00:04:31,200
we dive in a few quick disclaimers some

00:04:29,580 --> 00:04:32,340
of what I'm presenting here is facts and

00:04:31,200 --> 00:04:34,230
some of what I'm presenting here is

00:04:32,340 --> 00:04:36,480
opinions and I've tried to be as clear

00:04:34,230 --> 00:04:40,620
as possible about when I'm doing which

00:04:36,480 --> 00:04:43,050
one of those things sometimes people see

00:04:40,620 --> 00:04:45,030
a graph that I present that says that a

00:04:43,050 --> 00:04:47,250
technology that they love is getting

00:04:45,030 --> 00:04:50,940
less popular and then they get mad at me

00:04:47,250 --> 00:04:53,070
and what I'm asking you to do is I have

00:04:50,940 --> 00:04:55,050
a bunch of really terrible opinions get

00:04:53,070 --> 00:04:56,910
mad about the opinions don't get mad

00:04:55,050 --> 00:04:58,590
about the graph the graph is just a

00:04:56,910 --> 00:05:02,190
thing you can't get mad at it it's just

00:04:58,590 --> 00:05:04,140
happening I don't have a horse in this

00:05:02,190 --> 00:05:05,370
race other than NPM I don't contribute

00:05:04,140 --> 00:05:08,310
to any of the projects that I'm talking

00:05:05,370 --> 00:05:09,930
about so I'm not I'm trying to you know

00:05:08,310 --> 00:05:14,610
just present the facts without any bias

00:05:09,930 --> 00:05:15,870
here but all facts have bias secondly a

00:05:14,610 --> 00:05:17,790
lot of what I'm talking about involves

00:05:15,870 --> 00:05:19,560
relative popularity of technologies and

00:05:17,790 --> 00:05:21,720
I want to make clear but just because

00:05:19,560 --> 00:05:22,770
the technology is popular that doesn't

00:05:21,720 --> 00:05:24,990
mean that I think it's the best

00:05:22,770 --> 00:05:28,530
technology in fact I don't even know

00:05:24,990 --> 00:05:30,270
what the best technology means Evan you

00:05:28,530 --> 00:05:32,340
and his talk yesterday gave a really

00:05:30,270 --> 00:05:34,380
great description of the sort of space

00:05:32,340 --> 00:05:35,700
that frameworks in particular live in

00:05:34,380 --> 00:05:37,860
it's this sort of multi-dimensional

00:05:35,700 --> 00:05:40,380
space where you can't even know what's

00:05:37,860 --> 00:05:41,820
best there is no best there's just you

00:05:40,380 --> 00:05:46,980
know trade-offs that you make in all

00:05:41,820 --> 00:05:49,919
sorts of directions so for technology

00:05:46,980 --> 00:05:51,450
popularity is useful if there are a lot

00:05:49,919 --> 00:05:53,010
of people using your technology then

00:05:51,450 --> 00:05:54,840
there gonna be a lot of blog posts a lot

00:05:53,010 --> 00:05:57,060
of tutorials a lot of questions answered

00:05:54,840 --> 00:06:00,030
on Stack Overflow there will be a lot of

00:05:57,060 --> 00:06:01,290
people helping find and fix bugs so if

00:06:00,030 --> 00:06:03,410
you work with something that's very

00:06:01,290 --> 00:06:05,520
popular it often makes your work easier

00:06:03,410 --> 00:06:07,740
regardless of you know how good that

00:06:05,520 --> 00:06:10,550
technology is by you know whatever

00:06:07,740 --> 00:06:12,810
definition of good you want to use so

00:06:10,550 --> 00:06:15,060
popularity is what I have data about and

00:06:12,810 --> 00:06:16,320
popularity is what I'm talking about but

00:06:15,060 --> 00:06:20,250
I'm not saying that things are better

00:06:16,320 --> 00:06:22,110
and finally I really love this stuff and

00:06:20,250 --> 00:06:24,180
I'd have to get very excited about this

00:06:22,110 --> 00:06:25,800
stuff and when I get excited I cursed

00:06:24,180 --> 00:06:27,659
like a drunken sailor

00:06:25,800 --> 00:06:29,190
and there's just nothing I intend to do

00:06:27,659 --> 00:06:33,389
about that so you're all just going to

00:06:29,190 --> 00:06:35,129
have to deal so who are we

00:06:33,389 --> 00:06:37,500
JavaScript developers the answer is

00:06:35,129 --> 00:06:39,930
we're pretty much like all developers at

00:06:37,500 --> 00:06:41,340
this point when we said that when we set

00:06:39,930 --> 00:06:42,840
out to get these questions I was like oh

00:06:41,340 --> 00:06:44,280
well I'm expecting JavaScript developers

00:06:42,840 --> 00:06:46,080
to be different demographically in some

00:06:44,280 --> 00:06:48,330
way maybe we're younger maybe we work on

00:06:46,080 --> 00:06:50,849
different stuff now it turns out that

00:06:48,330 --> 00:06:53,250
almost everybody who is a programmer

00:06:50,849 --> 00:06:55,110
gets to do JavaScript these days and so

00:06:53,250 --> 00:06:56,729
we look like all other programmers we

00:06:55,110 --> 00:06:59,250
have the same age distribution the same

00:06:56,729 --> 00:07:00,840
levels of education we work in every

00:06:59,250 --> 00:07:02,580
industry and in every country in the

00:07:00,840 --> 00:07:04,740
world and the reason is there are just

00:07:02,580 --> 00:07:08,819
so many of us there are 11 million

00:07:04,740 --> 00:07:11,129
JavaScript developers in 2019 and those

00:07:08,819 --> 00:07:13,199
11 million developers are using more

00:07:11,129 --> 00:07:15,060
open source software than any other

00:07:13,199 --> 00:07:17,940
language community has ever used before

00:07:15,060 --> 00:07:19,919
the NPM registry is the largest

00:07:17,940 --> 00:07:23,159
repository of open-source software of

00:07:19,919 --> 00:07:24,930
any kind and by any measure by number of

00:07:23,159 --> 00:07:26,460
modules by lines of code by number of

00:07:24,930 --> 00:07:28,530
users whatever measure you want to pick

00:07:26,460 --> 00:07:30,830
it is more than twice as big as the

00:07:28,530 --> 00:07:32,819
next-biggest registry of course

00:07:30,830 --> 00:07:34,710
everybody knows that javascript in

00:07:32,819 --> 00:07:36,120
particular has a tendency to use lots of

00:07:34,710 --> 00:07:39,090
modules so maybe that's not a fair

00:07:36,120 --> 00:07:40,949
comparison so does having a really big

00:07:39,090 --> 00:07:43,740
registry translate to any other kind of

00:07:40,949 --> 00:07:44,969
activity on github javascript is the

00:07:43,740 --> 00:07:46,680
largest language by a number of

00:07:44,969 --> 00:07:48,419
repositories by a number of issues and

00:07:46,680 --> 00:07:51,449
by number of lines of code and it has

00:07:48,419 --> 00:07:53,909
been for seven years in a row on Stack

00:07:51,449 --> 00:07:56,310
Overflow they did a survey of 80,000

00:07:53,909 --> 00:07:58,710
developers and JavaScript was again the

00:07:56,310 --> 00:08:00,779
most popular language with 68% of all

00:07:58,710 --> 00:08:02,849
developers in their survey saying that

00:08:00,779 --> 00:08:04,020
they use it of course you're all at JS

00:08:02,849 --> 00:08:06,449
console you probably knew that

00:08:04,020 --> 00:08:07,169
JavaScript was pretty popular but here

00:08:06,449 --> 00:08:09,210
is the truth

00:08:07,169 --> 00:08:11,069
javascript is the most popular

00:08:09,210 --> 00:08:12,719
programming language in the world today

00:08:11,069 --> 00:08:14,639
and because there are more developers in

00:08:12,719 --> 00:08:16,800
the world today than ever before it is

00:08:14,639 --> 00:08:20,729
the most popular programming language

00:08:16,800 --> 00:08:22,860
that has ever existed as JavaScript

00:08:20,729 --> 00:08:24,960
community continues to grow the

00:08:22,860 --> 00:08:26,610
JavaScript community is changing the

00:08:24,960 --> 00:08:29,069
JavaScript the one thing that we noticed

00:08:26,610 --> 00:08:31,050
that's changed about us between our

00:08:29,069 --> 00:08:32,729
survey in 2018 and the one we did last

00:08:31,050 --> 00:08:34,740
year this year is that JavaScript

00:08:32,729 --> 00:08:36,990
developers are getting more experienced

00:08:34,740 --> 00:08:39,640
they've been writing JavaScript for

00:08:36,990 --> 00:08:43,630
longer we especially noticed this with

00:08:39,640 --> 00:08:45,400
p.m. itself a year ago half of NPM users

00:08:43,630 --> 00:08:47,080
were what we consider new they'd been

00:08:45,400 --> 00:08:51,760
using NPM for less than two years and

00:08:47,080 --> 00:08:54,310
this year only 36% are round about 2014

00:08:51,760 --> 00:08:56,290
and 2015 there was a massive spike in

00:08:54,310 --> 00:08:58,300
the number of NPM users it was when the

00:08:56,290 --> 00:09:00,580
existing pool of JavaScript developers

00:08:58,300 --> 00:09:01,870
sort of latched on to the idea that NPM

00:09:00,580 --> 00:09:06,880
was a thing that they should use and

00:09:01,870 --> 00:09:09,160
they all showed up at once and today the

00:09:06,880 --> 00:09:11,620
number of new NPM users and the number

00:09:09,160 --> 00:09:13,570
of new JavaScript users is pretty much

00:09:11,620 --> 00:09:15,820
the same basically anybody who learns

00:09:13,570 --> 00:09:17,860
JavaScript learns NPM at the same time

00:09:15,820 --> 00:09:20,350
and all of the people who had learned

00:09:17,860 --> 00:09:24,100
JavaScript before NPM came along have at

00:09:20,350 --> 00:09:26,380
this point pretty much all adopted it so

00:09:24,100 --> 00:09:28,600
now we believe that about 99% of

00:09:26,380 --> 00:09:30,070
JavaScript developers use NPM that's

00:09:28,600 --> 00:09:33,190
part of why we have so much information

00:09:30,070 --> 00:09:36,580
and it's part of why in this talk I use

00:09:33,190 --> 00:09:38,650
the terms like NPM users or respondents

00:09:36,580 --> 00:09:40,600
or JavaScript developers as pretty much

00:09:38,650 --> 00:09:43,930
interchangeable because they pretty much

00:09:40,600 --> 00:09:45,370
are this ever-growing pool of

00:09:43,930 --> 00:09:47,380
increasingly experienced JavaScript

00:09:45,370 --> 00:09:50,470
developers means that we've seen a shift

00:09:47,380 --> 00:09:52,300
in what people care about we knew from

00:09:50,470 --> 00:09:54,790
analyzing last year's data when we cut

00:09:52,300 --> 00:09:57,670
people up by how long they've been doing

00:09:54,790 --> 00:09:59,260
JavaScript that more experienced

00:09:57,670 --> 00:10:01,300
developers care more about best

00:09:59,260 --> 00:10:02,560
practices they knew do more bundling

00:10:01,300 --> 00:10:04,450
they do more lending they care more

00:10:02,560 --> 00:10:06,880
about security the care about they care

00:10:04,450 --> 00:10:08,560
more about everything and because all of

00:10:06,880 --> 00:10:10,090
javascript is becoming more experienced

00:10:08,560 --> 00:10:15,100
that's now true of all JavaScript

00:10:10,090 --> 00:10:16,480
developers as a whole since last year's

00:10:15,100 --> 00:10:18,220
survey the number of people concerned

00:10:16,480 --> 00:10:20,920
about the security of their open source

00:10:18,220 --> 00:10:23,440
has increased in the last two years

00:10:20,920 --> 00:10:26,350
NPM has introduced two-factor off to

00:10:23,440 --> 00:10:29,110
help protect package publishers from

00:10:26,350 --> 00:10:30,700
having their account stolen as well as a

00:10:29,110 --> 00:10:33,070
security team and a bunch of automation

00:10:30,700 --> 00:10:34,690
behind the scenes to detect and flag

00:10:33,070 --> 00:10:36,670
malicious packages but malicious

00:10:34,690 --> 00:10:39,160
packages while they get a lot of press

00:10:36,670 --> 00:10:40,990
they're not really the biggest source of

00:10:39,160 --> 00:10:42,520
security vulnerabilities the biggest

00:10:40,990 --> 00:10:43,930
source of security vulnerabilities is

00:10:42,520 --> 00:10:46,240
accidental vulnerabilities

00:10:43,930 --> 00:10:47,740
vulnerabilities caused by you using a

00:10:46,240 --> 00:10:49,630
package with a known security

00:10:47,740 --> 00:10:53,020
vulnerability and not updating your

00:10:49,630 --> 00:10:53,540
dependencies so last year we introduced

00:10:53,020 --> 00:10:56,449
the end

00:10:53,540 --> 00:10:57,649
audit command which will find and fix

00:10:56,449 --> 00:10:59,509
security vulnerabilities in your

00:10:57,649 --> 00:11:02,240
application by upgrading to a more

00:10:59,509 --> 00:11:03,230
secure version of that package in the

00:11:02,240 --> 00:11:06,199
last 30 days

00:11:03,230 --> 00:11:08,149
we have performed more than 335 million

00:11:06,199 --> 00:11:13,069
of these audits because they happen

00:11:08,149 --> 00:11:14,329
every time you run NPM install if you

00:11:13,069 --> 00:11:15,949
think that your company should be doing

00:11:14,329 --> 00:11:18,380
more about JavaScript security and it

00:11:15,949 --> 00:11:20,360
probably should then you'll forgive me

00:11:18,380 --> 00:11:23,630
if I spend a little time mentioning NPM

00:11:20,360 --> 00:11:25,819
Enterprise NPM Enterprise gives you your

00:11:23,630 --> 00:11:28,550
own registry on your own domain with

00:11:25,819 --> 00:11:29,660
your own NPM website where you can see

00:11:28,550 --> 00:11:30,800
what you where you're devs have

00:11:29,660 --> 00:11:32,660
published you can publish your own

00:11:30,800 --> 00:11:34,459
packages you can search within all of

00:11:32,660 --> 00:11:36,680
your company's Java scripts you can see

00:11:34,459 --> 00:11:38,360
full package pages and read Me's it's

00:11:36,680 --> 00:11:40,040
just like having your own little NPM

00:11:38,360 --> 00:11:42,019
universe inside of your company it

00:11:40,040 --> 00:11:44,000
includes single sign-on support and

00:11:42,019 --> 00:11:45,230
extra security and compliance reporting

00:11:44,000 --> 00:11:47,329
which is the kind of stuff that big

00:11:45,230 --> 00:11:49,579
companies need basically if you are a

00:11:47,329 --> 00:11:51,050
big company you should probably be using

00:11:49,579 --> 00:11:52,220
it and if you are a smaller company we

00:11:51,050 --> 00:11:54,350
have a company we have a product called

00:11:52,220 --> 00:11:57,769
orgs which does many of the same things

00:11:54,350 --> 00:11:59,510
and is a lot cheaper so back to the

00:11:57,769 --> 00:12:02,230
survey data after that terrible terrible

00:11:59,510 --> 00:12:02,230
sales pitch

00:12:02,240 --> 00:12:07,399
I was wearing the rainbow shirt and

00:12:05,329 --> 00:12:10,160
there's rainbow unicorns on the stage

00:12:07,399 --> 00:12:13,339
and I have been for the entire three

00:12:10,160 --> 00:12:14,930
days I've been telling myself I'm gonna

00:12:13,339 --> 00:12:16,610
do some of this talk while sitting on

00:12:14,930 --> 00:12:21,589
the damn unicorn so that's gonna be this

00:12:16,610 --> 00:12:23,720
section so another aspect of our

00:12:21,589 --> 00:12:26,000
increasingly experienced user base is

00:12:23,720 --> 00:12:28,220
that people actually care about the

00:12:26,000 --> 00:12:30,380
software licenses that they use that was

00:12:28,220 --> 00:12:32,480
kind of a surprise because like people

00:12:30,380 --> 00:12:34,130
think of JavaScript developers as being

00:12:32,480 --> 00:12:36,230
Cowboys who just like throw in

00:12:34,130 --> 00:12:39,260
there without looking at it but it turns

00:12:36,230 --> 00:12:41,870
out that 58% of JavaScript developers

00:12:39,260 --> 00:12:43,850
say that the software license effects

00:12:41,870 --> 00:12:47,240
their decision to use an open-source

00:12:43,850 --> 00:12:48,889
package and 55% of those people say that

00:12:47,240 --> 00:12:51,199
their company actively prevents them

00:12:48,889 --> 00:12:53,420
from using certain software licenses so

00:12:51,199 --> 00:12:55,310
overall 29 percent of people are

00:12:53,420 --> 00:12:58,040
prohibited from using certain licenses

00:12:55,310 --> 00:13:00,800
what license is exactly well

00:12:58,040 --> 00:13:02,839
unsurprisingly the GPL and the a GPL are

00:13:00,800 --> 00:13:04,399
unpopular because of the restrictions

00:13:02,839 --> 00:13:06,769
that a place on commercial development

00:13:04,399 --> 00:13:09,800
but bigger than those was

00:13:06,769 --> 00:13:11,989
nice licenses basically anybody who

00:13:09,800 --> 00:13:13,850
cares about licenses has to hire a

00:13:11,989 --> 00:13:14,449
lawyer to tell them which licenses are

00:13:13,850 --> 00:13:16,069
okay

00:13:14,449 --> 00:13:17,989
so if you use a license that they've

00:13:16,069 --> 00:13:19,519
never heard of they have to go back to

00:13:17,989 --> 00:13:22,160
the lawyer and pay the lawyer more money

00:13:19,519 --> 00:13:24,649
nobody wants to do that so if you're

00:13:22,160 --> 00:13:26,839
releasing open source software by all

00:13:24,649 --> 00:13:28,910
means include some kind of license but

00:13:26,839 --> 00:13:30,410
stick to one of the big popular licenses

00:13:28,910 --> 00:13:32,809
because otherwise people will just go

00:13:30,410 --> 00:13:35,149
this license is too weird I will not use

00:13:32,809 --> 00:13:37,549
it a really great example of that was

00:13:35,149 --> 00:13:40,089
Facebook tried to change the license

00:13:37,549 --> 00:13:43,489
that react is licensed under and like

00:13:40,089 --> 00:13:46,009
react a very popular Facebook very large

00:13:43,489 --> 00:13:48,079
company but even they could not get past

00:13:46,009 --> 00:13:49,790
the battery of annoyed lawyers going no

00:13:48,079 --> 00:13:55,249
we do not want to have to figure this

00:13:49,790 --> 00:13:56,600
out again go back to MIT and the final

00:13:55,249 --> 00:13:58,970
aspect of who we are that I want to

00:13:56,600 --> 00:14:01,429
touch on is a consequence of how

00:13:58,970 --> 00:14:03,860
ubiquitous JavaScript has become which

00:14:01,429 --> 00:14:06,049
is that 25% of JavaScript developers

00:14:03,860 --> 00:14:08,779
don't consider JavaScript to be their

00:14:06,049 --> 00:14:10,699
primary language because javascript is

00:14:08,779 --> 00:14:12,049
so popular it's becoming escapable and

00:14:10,699 --> 00:14:13,279
because it's inescapable there's a mean

00:14:12,049 --> 00:14:15,679
it means that there's a lot of people

00:14:13,279 --> 00:14:18,049
who program javascript who are doing so

00:14:15,679 --> 00:14:20,299
because they have to not because they

00:14:18,049 --> 00:14:25,459
want to and that is going to show up in

00:14:20,299 --> 00:14:26,720
a bunch of places in this data so what

00:14:25,459 --> 00:14:28,639
are these other languages written by

00:14:26,720 --> 00:14:30,170
developers who don't who Brent don't

00:14:28,639 --> 00:14:32,269
primarily write JavaScript well the top

00:14:30,170 --> 00:14:33,619
of the list is typescript typescript is

00:14:32,269 --> 00:14:36,799
an interesting case and I'm gonna talk

00:14:33,619 --> 00:14:38,839
more about it in a bit but there's also

00:14:36,799 --> 00:14:42,290
lots of Python and Java and C and C

00:14:38,839 --> 00:14:43,429
sharp in there and we'll see the effect

00:14:42,290 --> 00:14:45,860
that that's having later interestingly

00:14:43,429 --> 00:14:47,360
12% of JavaScript developers say that

00:14:45,860 --> 00:14:49,759
javascript is the only language they

00:14:47,360 --> 00:14:52,970
write it's just all JavaScript all the

00:14:49,759 --> 00:14:56,360
time for 12% of you but 88% of you are

00:14:52,970 --> 00:14:58,790
writing something else so now we've

00:14:56,360 --> 00:15:01,549
covered who we are we are all over the

00:14:58,790 --> 00:15:03,230
world we are every age and experience we

00:15:01,549 --> 00:15:04,939
are increasingly sophisticated and we

00:15:03,230 --> 00:15:07,489
care more about licensing and security

00:15:04,939 --> 00:15:09,379
than we used to where are we writing all

00:15:07,489 --> 00:15:11,860
of this javascript well the answer is

00:15:09,379 --> 00:15:15,769
every goddamn place you can imagine

00:15:11,860 --> 00:15:18,769
first and most obviously is browsers 97%

00:15:15,769 --> 00:15:20,660
of us are writing code for browsers 77%

00:15:18,769 --> 00:15:23,240
of us are also writing JavaScript for

00:15:20,660 --> 00:15:25,220
servus so noches is obviously still a

00:15:23,240 --> 00:15:27,379
big part of the JavaScript's community

00:15:25,220 --> 00:15:30,800
but there are two big surprises in here

00:15:27,379 --> 00:15:32,660
and the first one is native apps 46% of

00:15:30,800 --> 00:15:35,930
JavaScript developers are writing native

00:15:32,660 --> 00:15:37,910
apps and 13% of us are doing embedded as

00:15:35,930 --> 00:15:39,430
I'm going to dig into all of these

00:15:37,910 --> 00:15:42,949
numbers because they're fascinating

00:15:39,430 --> 00:15:45,259
first off when people write for browsers

00:15:42,949 --> 00:15:46,100
do they target the mobile web or the

00:15:45,259 --> 00:15:48,199
desktop web

00:15:46,100 --> 00:15:50,870
well the overwhelming majority 72%

00:15:48,199 --> 00:15:52,790
target both but despite all of our talk

00:15:50,870 --> 00:15:55,120
about mobile first a vanishingly small

00:15:52,790 --> 00:15:57,709
number of people target only mobile and

00:15:55,120 --> 00:15:59,870
27% of us are getting away without

00:15:57,709 --> 00:16:01,970
thinking about mobile at all that is

00:15:59,870 --> 00:16:03,709
probably a legitimate number because

00:16:01,970 --> 00:16:05,329
there's lots of applications we're just

00:16:03,709 --> 00:16:07,310
never gonna be used on a phone like it's

00:16:05,329 --> 00:16:08,449
some internal app admin application like

00:16:07,310 --> 00:16:09,639
no one's ever gonna be running that on

00:16:08,449 --> 00:16:13,189
their phone

00:16:09,639 --> 00:16:14,959
but let's talk about native apps 46% of

00:16:13,189 --> 00:16:15,379
JavaScript developers are writing native

00:16:14,959 --> 00:16:18,769
apps

00:16:15,379 --> 00:16:21,079
by a native app I mean an application

00:16:18,769 --> 00:16:23,269
that runs directly on your desktop or

00:16:21,079 --> 00:16:25,370
your phone I don't mean like you know

00:16:23,269 --> 00:16:27,230
it's not a shortcut that's you know

00:16:25,370 --> 00:16:29,240
actually a web app it's being either

00:16:27,230 --> 00:16:30,920
transpiled or it's running directly with

00:16:29,240 --> 00:16:33,139
full access to the file system like an

00:16:30,920 --> 00:16:34,819
electron we were very careful about how

00:16:33,139 --> 00:16:36,920
we phrased this question to make sure

00:16:34,819 --> 00:16:38,720
that that was what people were answering

00:16:36,920 --> 00:16:40,790
about this year because when we asked it

00:16:38,720 --> 00:16:42,230
two years ago we used this ridiculously

00:16:40,790 --> 00:16:43,819
vague language and everybody was like

00:16:42,230 --> 00:16:48,740
well sometimes people look at it on

00:16:43,819 --> 00:16:52,490
mobile so it's a mobile app anyway I'm a

00:16:48,740 --> 00:16:54,560
very bad statistician anyway where are

00:16:52,490 --> 00:16:57,290
we writing these native apps as you can

00:16:54,560 --> 00:16:58,459
see the biggest group is mobile devs 35%

00:16:57,290 --> 00:17:00,800
of respondents said that they are

00:16:58,459 --> 00:17:02,990
writing native mobile apps that's of all

00:17:00,800 --> 00:17:05,659
JavaScript developers 35% are writing

00:17:02,990 --> 00:17:07,429
native mobile apps and 26% of

00:17:05,659 --> 00:17:08,030
respondents are writing native desktop

00:17:07,429 --> 00:17:10,669
agz

00:17:08,030 --> 00:17:13,240
apps and a big chunk are doing both so

00:17:10,669 --> 00:17:16,069
what are they using to do all this stuff

00:17:13,240 --> 00:17:17,659
amongst the desktop developers 26% of

00:17:16,069 --> 00:17:19,640
devs say that they write native desktop

00:17:17,659 --> 00:17:22,760
apps and we have a bit of a puzzle here

00:17:19,640 --> 00:17:25,010
because most of what we think of as

00:17:22,760 --> 00:17:27,409
being desktop application development in

00:17:25,010 --> 00:17:29,270
JavaScript happens an electron but only

00:17:27,409 --> 00:17:31,820
21% of people say that they use

00:17:29,270 --> 00:17:33,710
electrons so there's 5% who are writing

00:17:31,820 --> 00:17:34,380
native desktop apps but not using

00:17:33,710 --> 00:17:35,940
electron

00:17:34,380 --> 00:17:39,110
I don't know what they're using if you

00:17:35,940 --> 00:17:43,020
know what they're using please tell me

00:17:39,110 --> 00:17:44,910
on the native mobile app side I measured

00:17:43,020 --> 00:17:46,440
the popularity of frameworks for native

00:17:44,910 --> 00:17:48,000
mobile apps I'm gonna explain how I

00:17:46,440 --> 00:17:50,370
measured this in a second but for the

00:17:48,000 --> 00:17:52,350
moment just believe me that green line

00:17:50,370 --> 00:17:54,330
is all native native mobile app

00:17:52,350 --> 00:17:56,130
development as you can see it's staying

00:17:54,330 --> 00:17:58,230
pretty much constant but what's happened

00:17:56,130 --> 00:17:59,700
is it's fragmented Cordova used to be

00:17:58,230 --> 00:18:03,809
the only game in town that's the yellow

00:17:59,700 --> 00:18:05,400
line but it is its shares going down in

00:18:03,809 --> 00:18:08,490
favor of the red line which is react

00:18:05,400 --> 00:18:13,380
native now they're both equal at about

00:18:08,490 --> 00:18:14,730
19 percent of JavaScript developers but

00:18:13,380 --> 00:18:16,169
if you're using some other framework to

00:18:14,730 --> 00:18:18,720
do native mobile app development please

00:18:16,169 --> 00:18:20,909
tell me about it the final where

00:18:18,720 --> 00:18:23,970
question is about server side apps where

00:18:20,909 --> 00:18:25,020
are we deploying them so 77% of us are

00:18:23,970 --> 00:18:27,030
writing server side apps and

00:18:25,020 --> 00:18:29,370
unsurprisingly docker and other

00:18:27,030 --> 00:18:31,470
container applications like kubernetes

00:18:29,370 --> 00:18:34,860
are everybody's jam everybody is

00:18:31,470 --> 00:18:37,230
deploying that way these days but

00:18:34,860 --> 00:18:38,760
deployment platforms like Heroku and

00:18:37,230 --> 00:18:42,630
Neto Phi and stuff like that are

00:18:38,760 --> 00:18:44,549
surprisingly popular and VMs are a

00:18:42,630 --> 00:18:46,020
surprisingly unpopular choice I don't

00:18:44,549 --> 00:18:47,309
know if I'm just old school but I sort

00:18:46,020 --> 00:18:49,110
of think of VMs as being like the

00:18:47,309 --> 00:18:51,840
default way that you deploy software but

00:18:49,110 --> 00:18:53,760
if they're not anymore but the real

00:18:51,840 --> 00:18:56,700
surprise in this number in these numbers

00:18:53,760 --> 00:18:58,650
was service server lists has left out of

00:18:56,700 --> 00:19:01,110
the sort of early adopter category and

00:18:58,650 --> 00:19:05,490
at 33% this is a mainstream technology

00:19:01,110 --> 00:19:08,460
now so now let's talk about what we're

00:19:05,490 --> 00:19:10,230
using to do all of this as with the who

00:19:08,460 --> 00:19:13,679
in the where sections this I'm going to

00:19:10,230 --> 00:19:15,659
try and keep as factual as possible to

00:19:13,679 --> 00:19:17,640
measure this stuff I use a metric called

00:19:15,659 --> 00:19:19,080
share of registry it's a very useful

00:19:17,640 --> 00:19:20,610
metric but it's also a somewhat

00:19:19,080 --> 00:19:23,010
confusing metric it was the one that I

00:19:20,610 --> 00:19:27,390
was just using so I'm going to explain

00:19:23,010 --> 00:19:29,370
it briefly this is a graph of weekly

00:19:27,390 --> 00:19:31,620
downloads from the NPM registry at the

00:19:29,370 --> 00:19:34,350
moment we do a little under 12 billion

00:19:31,620 --> 00:19:37,350
downloads every seven days and that

00:19:34,350 --> 00:19:40,080
number has grown by 26 thousand percent

00:19:37,350 --> 00:19:42,840
since NPM became a company and that

00:19:40,080 --> 00:19:44,490
presents something of a problem first it

00:19:42,840 --> 00:19:46,169
presents something of a scaling problem

00:19:44,490 --> 00:19:47,669
but it also presents something of a

00:19:46,169 --> 00:19:48,250
problem if you're trying to measure the

00:19:47,669 --> 00:19:50,800
popular

00:19:48,250 --> 00:19:53,830
of stuff because download numbers always

00:19:50,800 --> 00:19:56,980
go up download numbers go up for

00:19:53,830 --> 00:19:58,510
everything here's a graph of downloads

00:19:56,980 --> 00:20:00,820
of some major front-end frameworks

00:19:58,510 --> 00:20:03,250
they're all growing pretty fast in fact

00:20:00,820 --> 00:20:04,810
everything in the registry is constantly

00:20:03,250 --> 00:20:06,460
growing in terms of download numbers

00:20:04,810 --> 00:20:08,020
even the shittiest package in the

00:20:06,460 --> 00:20:10,060
registry is getting more and more

00:20:08,020 --> 00:20:11,770
downloads every week just because more

00:20:10,060 --> 00:20:13,300
and more people show up every week and

00:20:11,770 --> 00:20:16,530
are like I don't know I'll download evil

00:20:13,300 --> 00:20:16,530
package 1 this seems fine

00:20:16,560 --> 00:20:21,760
so using absolute growth of downloads is

00:20:19,870 --> 00:20:23,410
not a good way of measuring popularity

00:20:21,760 --> 00:20:25,540
since Ted we're using relative

00:20:23,410 --> 00:20:27,520
popularity as a percentage of all

00:20:25,540 --> 00:20:30,520
downloads and that's what we call share

00:20:27,520 --> 00:20:32,830
of registry so here are all the same

00:20:30,520 --> 00:20:34,690
packages again using share of registry

00:20:32,830 --> 00:20:36,610
as the metric instead and suddenly

00:20:34,690 --> 00:20:38,230
what's going on is much clearer some

00:20:36,610 --> 00:20:40,240
stuff is going up some stuff is staying

00:20:38,230 --> 00:20:42,370
flat and some stuff is going down but

00:20:40,240 --> 00:20:46,300
it's important to remember that going

00:20:42,370 --> 00:20:47,680
down is only in relative terms so it

00:20:46,300 --> 00:20:50,110
just means that you're not growing as

00:20:47,680 --> 00:20:52,050
fast as everything else if you stay flat

00:20:50,110 --> 00:20:54,910
on this graph that means that you grew

00:20:52,050 --> 00:20:57,850
26,000 percent if you're going up on

00:20:54,910 --> 00:21:00,220
this graph you grew faster than 26,000

00:20:57,850 --> 00:21:02,040
percent so if you're going up at all on

00:21:00,220 --> 00:21:05,820
this graph then you are really growing

00:21:02,040 --> 00:21:08,350
so let's dig into these actual numbers

00:21:05,820 --> 00:21:11,590
the story of front-end frameworks in

00:21:08,350 --> 00:21:15,520
2019 is very simple and it is that react

00:21:11,590 --> 00:21:17,260
has conquered the web react has more

00:21:15,520 --> 00:21:19,270
than four times as many downloads as the

00:21:17,260 --> 00:21:20,830
next most popular framework and there

00:21:19,270 --> 00:21:23,890
has never been anything like this

00:21:20,830 --> 00:21:25,830
popular in front-end frameworks part of

00:21:23,890 --> 00:21:28,120
the reason for that is because react

00:21:25,830 --> 00:21:30,010
isn't just a front-end framework in fact

00:21:28,120 --> 00:21:31,450
it's not even a front-end framework it's

00:21:30,010 --> 00:21:33,520
just a component model and that

00:21:31,450 --> 00:21:35,890
component model is used by web apps but

00:21:33,520 --> 00:21:38,200
as we saw with the native apps it's also

00:21:35,890 --> 00:21:39,670
used in react native for mobile and it's

00:21:38,200 --> 00:21:42,670
used in electron for desktop

00:21:39,670 --> 00:21:44,620
applications but all this is just the

00:21:42,670 --> 00:21:47,050
Downloads data what about the survey

00:21:44,620 --> 00:21:50,380
where we asked actual people in our

00:21:47,050 --> 00:21:52,960
survey 63% of JavaScript developers say

00:21:50,380 --> 00:21:54,670
that they use react but using is a vague

00:21:52,960 --> 00:21:56,380
term but what you know do you just use

00:21:54,670 --> 00:21:59,050
it sometimes are using it you know just

00:21:56,380 --> 00:22:01,570
to try stuff out so we asked a more

00:21:59,050 --> 00:22:01,870
specific question 57% of people say that

00:22:01,570 --> 00:22:04,180
they

00:22:01,870 --> 00:22:06,100
right reacts themselves 6% say they use

00:22:04,180 --> 00:22:09,280
react written by other people but more

00:22:06,100 --> 00:22:11,440
interestingly 15% of people say that

00:22:09,280 --> 00:22:13,720
they don't use react but are considering

00:22:11,440 --> 00:22:15,520
it which means that they're even at 63

00:22:13,720 --> 00:22:17,620
percent which is already an absurd

00:22:15,520 --> 00:22:21,250
amount of adoption there still might be

00:22:17,620 --> 00:22:23,290
room for react to continue to grow but

00:22:21,250 --> 00:22:24,940
as you saw in that graph react growth

00:22:23,290 --> 00:22:26,980
kind of seems like it might be slowing

00:22:24,940 --> 00:22:29,890
down so it's not clear what's going to

00:22:26,980 --> 00:22:31,720
happen next to the react to dig even

00:22:29,890 --> 00:22:35,230
further we asked people how much they

00:22:31,720 --> 00:22:36,960
write react inside the fifteen fifty

00:22:35,230 --> 00:22:38,800
seven percent of people who write react

00:22:36,960 --> 00:22:41,230
forty-nine percent said that they

00:22:38,800 --> 00:22:43,179
primarily write react which means 26

00:22:41,230 --> 00:22:45,070
percent of all NPM users are primarily

00:22:43,179 --> 00:22:47,020
writing react a quarter of the of

00:22:45,070 --> 00:22:48,970
JavaScript developers are primarily

00:22:47,020 --> 00:22:50,380
writing react and if you include the

00:22:48,970 --> 00:22:53,559
people who write at some of the time

00:22:50,380 --> 00:22:55,990
that means 47 percent nearly half of

00:22:53,559 --> 00:22:59,080
JavaScript developers are writing react

00:22:55,990 --> 00:23:01,179
some or most of the time there has never

00:22:59,080 --> 00:23:03,730
been a framework with that kind of

00:23:01,179 --> 00:23:06,179
adoption it is changing the way web

00:23:03,730 --> 00:23:08,950
development works

00:23:06,179 --> 00:23:10,390
moving on to some other frameworks last

00:23:08,950 --> 00:23:12,340
year I got into some trouble because I

00:23:10,390 --> 00:23:14,140
took angular version 1 and angular

00:23:12,340 --> 00:23:15,970
version 2 onwards and I called them both

00:23:14,140 --> 00:23:17,470
angular and I put them together and I

00:23:15,970 --> 00:23:19,450
didn't separate them out and I was

00:23:17,470 --> 00:23:22,900
strenuously informed that that was

00:23:19,450 --> 00:23:25,690
incorrect angular version 1 is now

00:23:22,900 --> 00:23:27,490
called angularjs angular version 2

00:23:25,690 --> 00:23:29,020
onwards is a completely different

00:23:27,490 --> 00:23:30,670
framework that has nothing to do with

00:23:29,020 --> 00:23:33,790
the first version and it's called

00:23:30,670 --> 00:23:36,400
angular I think but that is a little bit

00:23:33,790 --> 00:23:38,200
confusing I feel like I was justified

00:23:36,400 --> 00:23:40,000
and not knowing that there that there's

00:23:38,200 --> 00:23:42,190
two things called angular and they're

00:23:40,000 --> 00:23:44,650
not the same anyway

00:23:42,190 --> 00:23:48,250
as you can see angularjs has been in

00:23:44,650 --> 00:23:51,490
decline since 2016 and angular 2 plus

00:23:48,250 --> 00:23:53,470
has been in decline since 2017 but again

00:23:51,490 --> 00:23:56,679
it's important to keep in mind this is

00:23:53,470 --> 00:23:59,290
only in relative terms in absolute terms

00:23:56,679 --> 00:24:01,690
both of these frameworks have more users

00:23:59,290 --> 00:24:03,490
than they've ever had before in absolute

00:24:01,690 --> 00:24:05,530
terms both of these frameworks are still

00:24:03,490 --> 00:24:07,860
growing they're just not growing as fast

00:24:05,530 --> 00:24:10,030
as everything else in the registry

00:24:07,860 --> 00:24:12,850
angular remains an extremely popular

00:24:10,030 --> 00:24:14,970
framework 37% of NPM users are using one

00:24:12,850 --> 00:24:17,190
or the other version of angular

00:24:14,970 --> 00:24:19,049
and 29% of NPM users say that they are

00:24:17,190 --> 00:24:20,940
using the current version if you

00:24:19,049 --> 00:24:23,220
extrapolate out that means there's

00:24:20,940 --> 00:24:26,190
probably about 3 million people who do

00:24:23,220 --> 00:24:27,809
angular which is definitely nothing to

00:24:26,190 --> 00:24:31,919
sneeze at and probably means that it's

00:24:27,809 --> 00:24:33,570
not going to go anywhere so let's look

00:24:31,919 --> 00:24:36,059
at the next two most obvious framework

00:24:33,570 --> 00:24:38,849
which is view view is the only major

00:24:36,059 --> 00:24:40,830
framework other than react which is

00:24:38,849 --> 00:24:43,289
strong showing strong positive growth

00:24:40,830 --> 00:24:45,330
and it is very very positive share of

00:24:43,289 --> 00:24:47,309
registry for view has more than doubled

00:24:45,330 --> 00:24:49,460
in the last two years which means that

00:24:47,309 --> 00:24:53,070
downloads grew more than a factor of 10

00:24:49,460 --> 00:24:55,649
and our survey data backs this up 27% of

00:24:53,070 --> 00:24:58,320
NPM users say that they are using view

00:24:55,649 --> 00:25:00,090
which is up from 24% last year which

00:24:58,320 --> 00:25:02,220
means that roughly the same number of

00:25:00,090 --> 00:25:05,940
people who are using view as are using

00:25:02,220 --> 00:25:07,409
the current version of angular one thing

00:25:05,940 --> 00:25:09,599
that I haven't talked about so far is

00:25:07,409 --> 00:25:11,369
web components and part of that is that

00:25:09,599 --> 00:25:13,320
web components are built into browsers

00:25:11,369 --> 00:25:14,729
so there isn't a share of registry

00:25:13,320 --> 00:25:17,399
they're not downloading anything from

00:25:14,729 --> 00:25:18,570
NPM to use web components but the other

00:25:17,399 --> 00:25:21,869
reason is that they just don't seem to

00:25:18,570 --> 00:25:24,090
be very popular we didn't ask about them

00:25:21,869 --> 00:25:27,090
an NPM survey which was a mistake on my

00:25:24,090 --> 00:25:28,799
part the state of j/s survey allowed

00:25:27,090 --> 00:25:31,019
people to volunteer if they were using

00:25:28,799 --> 00:25:33,659
web components but less than one percent

00:25:31,019 --> 00:25:35,549
of web developers did so I'm not

00:25:33,659 --> 00:25:38,970
ignoring web components but my data on

00:25:35,549 --> 00:25:40,739
them is not very good at the moment the

00:25:38,970 --> 00:25:42,029
people who build web components like the

00:25:40,739 --> 00:25:43,259
people who work for browsers and build

00:25:42,029 --> 00:25:44,700
web components they tell me that web

00:25:43,259 --> 00:25:46,470
components are much more popular than I

00:25:44,700 --> 00:25:50,729
believe but of course they would say

00:25:46,470 --> 00:25:52,590
that moving from the front end to the

00:25:50,729 --> 00:25:56,340
back end there has been a real

00:25:52,590 --> 00:25:57,690
revolution previously if I was talking

00:25:56,340 --> 00:26:00,690
about the back end I'd have talked about

00:25:57,690 --> 00:26:01,919
frameworks like happy or ember and those

00:26:00,690 --> 00:26:04,049
things are still around and they are

00:26:01,919 --> 00:26:06,269
showing basically flat growth in the

00:26:04,049 --> 00:26:08,159
registry which is to say 25000 percent

00:26:06,269 --> 00:26:09,629
growth you know healthy but not

00:26:08,159 --> 00:26:12,749
spectacular by the standards of the

00:26:09,629 --> 00:26:15,080
registry but now everybody has moved to

00:26:12,749 --> 00:26:17,669
writing rich front-end apps those

00:26:15,080 --> 00:26:19,559
frameworks which are about providing

00:26:17,669 --> 00:26:21,119
static views they're just not as popular

00:26:19,559 --> 00:26:23,999
they're just not as much of a fit for

00:26:21,119 --> 00:26:26,399
what we're doing instead what's happened

00:26:23,999 --> 00:26:28,080
is that front-end framework enthusiasts

00:26:26,399 --> 00:26:29,190
have realized that for performance

00:26:28,080 --> 00:26:32,460
reasons they need to deliver

00:26:29,190 --> 00:26:34,049
pre-rendered HTML from the server and so

00:26:32,460 --> 00:26:36,269
they called it server-side rendering or

00:26:34,049 --> 00:26:38,700
SSR and they invented a bunch of stuff

00:26:36,269 --> 00:26:42,779
to do that which is to say they invented

00:26:38,700 --> 00:26:44,100
backends so now all of the bet all of

00:26:42,779 --> 00:26:47,220
the front-end frameworks are also

00:26:44,100 --> 00:26:48,750
back-end frameworks they provide

00:26:47,220 --> 00:26:50,100
collections of servers and routers that

00:26:48,750 --> 00:26:52,890
make it easy to build a full server

00:26:50,100 --> 00:26:54,750
using your favorite framework I don't

00:26:52,890 --> 00:26:56,190
know about you but the idea that I can

00:26:54,750 --> 00:26:57,750
just write a bunch of components and

00:26:56,190 --> 00:26:59,279
throw them into exists an existing

00:26:57,750 --> 00:27:00,510
framework that does all of the serving

00:26:59,279 --> 00:27:03,419
and parsing and stuff for me that's

00:27:00,510 --> 00:27:07,309
great but it's also super familiar I'm

00:27:03,419 --> 00:27:09,600
pretty sure that is how PHP works

00:27:07,309 --> 00:27:11,850
someday soon somebody is gonna like you

00:27:09,600 --> 00:27:13,769
know do this huge flashy launch with an

00:27:11,850 --> 00:27:15,690
amazing website and be like you can you

00:27:13,769 --> 00:27:17,850
can build a website by just ft peeing

00:27:15,690 --> 00:27:20,309
your react components to a server and

00:27:17,850 --> 00:27:24,870
then the circle will be completes and we

00:27:20,309 --> 00:27:26,429
will have finished reinventing PHP so

00:27:24,870 --> 00:27:27,000
before I talk about these new SSR

00:27:26,429 --> 00:27:28,679
frameworks

00:27:27,000 --> 00:27:30,809
it's important to note that they are all

00:27:28,679 --> 00:27:34,860
still pretty small here for comparison

00:27:30,809 --> 00:27:37,380
is Express Express is a goddamn giant of

00:27:34,860 --> 00:27:39,120
a package it used to be 1.5% of registry

00:27:37,380 --> 00:27:40,500
downloads all by itself and while the

00:27:39,120 --> 00:27:42,600
rest of the registry has sort of grown

00:27:40,500 --> 00:27:44,309
up around it it is still very very big

00:27:42,600 --> 00:27:46,110
all of the other frameworks that I'm

00:27:44,309 --> 00:27:48,889
about to talk about they are that little

00:27:46,110 --> 00:27:51,090
flat line at the bottom of this graph

00:27:48,889 --> 00:27:52,980
but when you take Express out of the

00:27:51,090 --> 00:27:55,710
picture the new picture is very

00:27:52,980 --> 00:27:58,769
interesting at the top of our list is

00:27:55,710 --> 00:28:00,389
Gatsby Gatsby uses react and it provides

00:27:58,769 --> 00:28:02,010
a whole set of tools for hooking it up

00:28:00,389 --> 00:28:04,320
to backends and providing easy

00:28:02,010 --> 00:28:06,360
deployment methods for it got to be

00:28:04,320 --> 00:28:08,190
snuck up on us in our previous survey we

00:28:06,360 --> 00:28:10,139
didn't ask about Gatsby at all and this

00:28:08,190 --> 00:28:11,309
year's survey 8% of people said that

00:28:10,139 --> 00:28:13,950
they are using Gatsby

00:28:11,309 --> 00:28:17,460
for comparison frameworks that we used

00:28:13,950 --> 00:28:19,470
to talk about like happy and and amber

00:28:17,460 --> 00:28:22,380
they're at like 5 percent and 4 percent

00:28:19,470 --> 00:28:24,029
so Gatsby being at 8 percent means that

00:28:22,380 --> 00:28:28,019
it is a real and serious framework that

00:28:24,029 --> 00:28:30,720
is showing real growth and next comes a

00:28:28,019 --> 00:28:32,490
trio of back-end frameworks which all

00:28:30,720 --> 00:28:35,029
have nearly the same name in a way that

00:28:32,490 --> 00:28:39,149
is not confusing or irritating at all

00:28:35,029 --> 00:28:40,909
first up is next Jess it's another react

00:28:39,149 --> 00:28:43,580
based framework

00:28:40,909 --> 00:28:46,100
and our survey respondents love next j/s

00:28:43,580 --> 00:28:49,250
about 9% of them say that they use it

00:28:46,100 --> 00:28:50,690
the registry downloads data gives gatsby

00:28:49,250 --> 00:28:52,039
the edge but it's clear that those two

00:28:50,690 --> 00:28:53,450
things are both very popular and pretty

00:28:52,039 --> 00:28:56,509
close together in terms of the number of

00:28:53,450 --> 00:28:58,669
users then there is Knox

00:28:56,509 --> 00:29:02,029
with au which is very much like next J s

00:28:58,669 --> 00:29:03,679
but it's for view instead 5% of devs in

00:29:02,029 --> 00:29:05,840
our survey say that they use it and it's

00:29:03,679 --> 00:29:09,139
showing similar healthy growth and then

00:29:05,840 --> 00:29:11,179
there's nest jeaious with an S which is

00:29:09,139 --> 00:29:16,340
apparently also very much like next to

00:29:11,179 --> 00:29:17,779
J's but it's for angular our survey

00:29:16,340 --> 00:29:20,200
didn't ask about it because I only found

00:29:17,779 --> 00:29:22,549
out about it quite recently but

00:29:20,200 --> 00:29:24,950
extrapolating from its download data

00:29:22,549 --> 00:29:28,970
probably about 2% of NPM users are using

00:29:24,950 --> 00:29:30,259
Ness GS so closely related to all that

00:29:28,970 --> 00:29:33,289
these front-end frameworks that are now

00:29:30,259 --> 00:29:34,490
back-end frameworks is graph QL there

00:29:33,289 --> 00:29:36,019
have been a couple of talks about graph

00:29:34,490 --> 00:29:38,330
QL at this conference it's a pretty fun

00:29:36,019 --> 00:29:40,519
technology it is the hot new way of

00:29:38,330 --> 00:29:43,580
building api's that power all of this

00:29:40,519 --> 00:29:45,740
stuff and as you can see graph QL score

00:29:43,580 --> 00:29:47,830
library and two of its most popular

00:29:45,740 --> 00:29:50,360
clients are all very very steadily

00:29:47,830 --> 00:29:51,830
climbing and share of registry and this

00:29:50,360 --> 00:29:53,899
climb is reflected in the survey data

00:29:51,830 --> 00:29:55,669
the survey data says that 22% of

00:29:53,899 --> 00:29:58,940
JavaScript developers are already using

00:29:55,669 --> 00:30:02,659
graph QL but the really interesting

00:29:58,940 --> 00:30:04,250
number is that half of NPM users 49% say

00:30:02,659 --> 00:30:05,960
they are considering using graph QL

00:30:04,250 --> 00:30:08,769
which means that 2019 is going to be a

00:30:05,960 --> 00:30:10,970
very big year for that technology and

00:30:08,769 --> 00:30:12,409
the final set of trend data we're going

00:30:10,970 --> 00:30:15,610
to look at is the hottest trend of all

00:30:12,409 --> 00:30:18,110
which is not writing JavaScript anymore

00:30:15,610 --> 00:30:19,610
remember all of those non primary

00:30:18,110 --> 00:30:21,169
JavaScript writers especially the ones

00:30:19,610 --> 00:30:23,659
coming from typed languages like Java

00:30:21,169 --> 00:30:26,509
and c-sharp and stuff this is how their

00:30:23,659 --> 00:30:28,580
influence is showing up the biggest part

00:30:26,509 --> 00:30:30,200
of this trend is typescript last year we

00:30:28,580 --> 00:30:31,820
were caught completely by surprise when

00:30:30,200 --> 00:30:35,149
we asked people how much if they use

00:30:31,820 --> 00:30:38,179
typescript and 46% of them said yes this

00:30:35,149 --> 00:30:40,730
year 63% of them said that they are

00:30:38,179 --> 00:30:43,639
using typescript so we immediately asked

00:30:40,730 --> 00:30:47,269
a bunch of a bunch more questions what

00:30:43,639 --> 00:30:49,159
does using mean so it turns out that 15%

00:30:47,269 --> 00:30:51,679
of people who say that they 15% of

00:30:49,159 --> 00:30:53,419
people are using libraries that are

00:30:51,679 --> 00:30:54,590
written in typescript and the main

00:30:53,419 --> 00:30:56,059
culprit here is angular

00:30:54,590 --> 00:30:58,070
angular is written in typescript so all

00:30:56,059 --> 00:30:59,659
the angular users show up as typescript

00:30:58,070 --> 00:31:01,159
users but they're not really writing

00:30:59,659 --> 00:31:04,909
typescript so they're just using a thing

00:31:01,159 --> 00:31:06,799
that is written in typescript it's

00:31:04,909 --> 00:31:08,450
interesting that both react and ember

00:31:06,799 --> 00:31:10,179
have type scripts now so the only major

00:31:08,450 --> 00:31:14,299
framework that doesn't have some

00:31:10,179 --> 00:31:15,830
typescript in it is view but even if you

00:31:14,299 --> 00:31:17,330
say that you write typescript do you

00:31:15,830 --> 00:31:19,730
mean that you write it all the time or

00:31:17,330 --> 00:31:22,130
just to try it out within the typescript

00:31:19,730 --> 00:31:24,740
developers 52% primarily write

00:31:22,130 --> 00:31:26,870
typescript and another 34% write

00:31:24,740 --> 00:31:29,720
typescript some of the time which means

00:31:26,870 --> 00:31:31,309
that overall 36% of NPM users are

00:31:29,720 --> 00:31:34,070
writing typescript somewhere all of the

00:31:31,309 --> 00:31:36,770
time a third of javascript developers

00:31:34,070 --> 00:31:38,720
don't write JavaScript anymore that is a

00:31:36,770 --> 00:31:41,750
stunning change in the landscape in

00:31:38,720 --> 00:31:42,919
which we're sitting incidentally one of

00:31:41,750 --> 00:31:45,260
the features of typescript

00:31:42,919 --> 00:31:46,880
is that it has type definition files and

00:31:45,260 --> 00:31:48,860
those type definition files are hosted

00:31:46,880 --> 00:31:51,049
under the types of scope which is on NPM

00:31:48,860 --> 00:31:52,789
so I went looking to see exactly how

00:31:51,049 --> 00:31:54,860
much of registry traffic is the type

00:31:52,789 --> 00:31:56,990
scope and it turns out it's 2.5 percent

00:31:54,860 --> 00:31:59,630
all by itself being constantly

00:31:56,990 --> 00:32:00,950
downloaded by copies of vs code which

00:31:59,630 --> 00:32:02,450
means that we're probably going to need

00:32:00,950 --> 00:32:07,010
to have a chat with Microsoft about

00:32:02,450 --> 00:32:08,750
their bandwidth bill the other part of

00:32:07,010 --> 00:32:09,860
the not writing JavaScript trend is

00:32:08,750 --> 00:32:12,110
webassembly

00:32:09,860 --> 00:32:15,080
cast just gave a great talk about web

00:32:12,110 --> 00:32:16,610
assembly and gave a whole bunch of good

00:32:15,080 --> 00:32:19,370
reasons for using web assembly and its

00:32:16,610 --> 00:32:22,220
place in the ecosystem but in case you

00:32:19,370 --> 00:32:23,600
somehow were asleep for that web

00:32:22,220 --> 00:32:25,460
assembly is a technology that lets you

00:32:23,600 --> 00:32:26,840
take any compiled language and run it on

00:32:25,460 --> 00:32:28,309
the web at near native speeds and

00:32:26,840 --> 00:32:30,289
there's two interesting things about

00:32:28,309 --> 00:32:32,330
that the first is obviously the speed

00:32:30,289 --> 00:32:34,070
but the people who write web assembly

00:32:32,330 --> 00:32:37,070
say that the much more interesting part

00:32:34,070 --> 00:32:38,899
is the second part which is that it

00:32:37,070 --> 00:32:41,149
gives you the ability to use existing

00:32:38,899 --> 00:32:44,270
code written in other languages directly

00:32:41,149 --> 00:32:45,950
on the web to me one of the most

00:32:44,270 --> 00:32:47,809
exciting features of web assembly is

00:32:45,950 --> 00:32:50,330
that when assembly modules are

00:32:47,809 --> 00:32:52,700
interoperable with existing NPM modules

00:32:50,330 --> 00:32:54,620
written in JavaScript so you can use a

00:32:52,700 --> 00:32:56,809
tool like wisent pack which is for rust

00:32:54,620 --> 00:32:59,450
or equivalent tools for other languages

00:32:56,809 --> 00:33:01,700
and you can write code in those

00:32:59,450 --> 00:33:04,190
languages publish it as a module to the

00:33:01,700 --> 00:33:06,289
NPM registry and then just npm install

00:33:04,190 --> 00:33:08,390
it into a JavaScript application and it

00:33:06,289 --> 00:33:10,250
will work you won't even know that it's

00:33:08,390 --> 00:33:11,870
not JavaScript's it'll just happen and

00:33:10,250 --> 00:33:13,640
the way that I know that you won't know

00:33:11,870 --> 00:33:15,770
it's JavaScript is because it already

00:33:13,640 --> 00:33:19,910
happened it's is already happening the

00:33:15,770 --> 00:33:21,530
call is coming from inside the house our

00:33:19,910 --> 00:33:23,480
stats say that webassembly is still very

00:33:21,530 --> 00:33:25,700
new only about 3 percent of people say

00:33:23,480 --> 00:33:27,280
that they use it but you know at the

00:33:25,700 --> 00:33:30,500
scale of NPM that means that about

00:33:27,280 --> 00:33:33,530
300,000 people are using it and we found

00:33:30,500 --> 00:33:35,480
that just 0.06 percent of packages in

00:33:33,530 --> 00:33:37,340
the registry contain wasm but that is

00:33:35,480 --> 00:33:39,500
about 600 packages and some of those are

00:33:37,340 --> 00:33:42,080
very interesting but the big number for

00:33:39,500 --> 00:33:43,820
webassembly is 54% that is how the

00:33:42,080 --> 00:33:45,350
percentage of people who say that they

00:33:43,820 --> 00:33:50,260
are considering using webassembly

00:33:45,350 --> 00:33:53,450
webassembly is about to be very very big

00:33:50,260 --> 00:33:55,940
so now we know who we are and what we're

00:33:53,450 --> 00:33:58,460
using and those facts together can point

00:33:55,940 --> 00:34:01,010
us towards explanations as to why this

00:33:58,460 --> 00:34:04,880
is where I switch from facts to analysis

00:34:01,010 --> 00:34:10,840
and by analysis I mean opinions but

00:34:04,880 --> 00:34:13,880
first just a quick drink of water

00:34:10,840 --> 00:34:16,310
because I'm going real slow and talking

00:34:13,880 --> 00:34:18,290
a lot so for this next bit I need to

00:34:16,310 --> 00:34:20,390
split up the room into two teams so

00:34:18,290 --> 00:34:22,730
everybody on this side of the line you

00:34:20,390 --> 00:34:26,600
are team a everybody on this side of the

00:34:22,730 --> 00:34:27,340
line you are team B team a let me hear

00:34:26,600 --> 00:34:35,270
it

00:34:27,340 --> 00:34:36,500
team B team a team B fantastic I'm not

00:34:35,270 --> 00:34:38,330
going to use that for anything it's just

00:34:36,500 --> 00:34:42,320
to keep you awake after 30 minutes of

00:34:38,330 --> 00:34:44,000
grass the other thing that I said that I

00:34:42,320 --> 00:34:46,130
would do is I would give a pair of NPM

00:34:44,000 --> 00:34:47,659
socks away but I didn't have time to

00:34:46,130 --> 00:34:50,870
come up with any system for giving the

00:34:47,659 --> 00:34:53,419
socks away is Shivani here there you are

00:34:50,870 --> 00:34:54,950
Shivani had the bright idea of just

00:34:53,419 --> 00:34:58,600
asking me on Twitter if she could get

00:34:54,950 --> 00:34:58,600
the socks so she gets the sauce

00:35:00,460 --> 00:35:06,550
[Applause]

00:35:03,599 --> 00:35:09,579
so the first question to answer in the Y

00:35:06,550 --> 00:35:10,990
section is why is JavaScript the most

00:35:09,579 --> 00:35:13,180
popular programming language in the

00:35:10,990 --> 00:35:14,890
world I think we can discard the idea

00:35:13,180 --> 00:35:18,550
that it is the best designed language in

00:35:14,890 --> 00:35:22,150
the world one possible answer is the NPM

00:35:18,550 --> 00:35:25,000
registry a guy called Leo meyerovich for

00:35:22,150 --> 00:35:27,280
his PhD did a study of in which he

00:35:25,000 --> 00:35:29,109
researched why people pick programming

00:35:27,280 --> 00:35:31,599
languages this is a very useful study

00:35:29,109 --> 00:35:33,099
for answering this question so he was

00:35:31,599 --> 00:35:34,900
asking you know is it features is its

00:35:33,099 --> 00:35:35,589
speed is it because they're forced to by

00:35:34,900 --> 00:35:37,270
their company

00:35:35,589 --> 00:35:38,920
like what is it that makes somebody pick

00:35:37,270 --> 00:35:40,720
a programming language and the number

00:35:38,920 --> 00:35:43,660
one reason turned out to be open source

00:35:40,720 --> 00:35:45,670
modules it turns out that if there is a

00:35:43,660 --> 00:35:47,079
library that exists that helps you get

00:35:45,670 --> 00:35:49,869
the job that you're trying to get done

00:35:47,079 --> 00:35:52,030
done then you switch to the language in

00:35:49,869 --> 00:35:55,060
which that library exists and because

00:35:52,030 --> 00:35:56,530
the largest set of libraries is NPM that

00:35:55,060 --> 00:35:58,450
means an enormous number of people are

00:35:56,530 --> 00:36:00,160
moving to JavaScript because of all of

00:35:58,450 --> 00:36:03,730
them libraries that are existing in NPM

00:36:00,160 --> 00:36:06,310
and once you start doing that a positive

00:36:03,730 --> 00:36:08,319
feedback loop kicks in more open source

00:36:06,310 --> 00:36:11,349
libraries bring more users and those

00:36:08,319 --> 00:36:13,839
users write more open source once about

00:36:11,349 --> 00:36:16,990
every 15 minutes or so somebody on

00:36:13,839 --> 00:36:21,280
Twitter sends me this picture but it's

00:36:16,990 --> 00:36:23,829
not actually a bad analogy the NPM

00:36:21,280 --> 00:36:25,869
registry has created a gravity well that

00:36:23,829 --> 00:36:27,460
pulls in developers and every time a new

00:36:25,869 --> 00:36:31,630
developer joins the JavaScript community

00:36:27,460 --> 00:36:33,400
they increase the pull and this has

00:36:31,630 --> 00:36:35,680
created the new type of JavaScript

00:36:33,400 --> 00:36:37,599
developer The Reluctant JavaScript er

00:36:35,680 --> 00:36:40,630
this used to be a very small group but

00:36:37,599 --> 00:36:42,849
is now possibly a quarter or more of the

00:36:40,630 --> 00:36:44,680
JavaScript community is reluctant Java

00:36:42,849 --> 00:36:45,940
Scriptures they don't write Java scripts

00:36:44,680 --> 00:36:48,040
because they like it they write

00:36:45,940 --> 00:36:50,260
JavaScript because they have to and that

00:36:48,040 --> 00:36:52,630
is bad that's bad for them because they

00:36:50,260 --> 00:36:54,040
hate it but it's also bad for Java

00:36:52,630 --> 00:36:55,540
scripts because people who don't like a

00:36:54,040 --> 00:36:59,440
language are not going to write it well

00:36:55,540 --> 00:37:01,480
and this happened before in 2009 and

00:36:59,440 --> 00:37:04,030
2010 Ruby developers who were writing

00:37:01,480 --> 00:37:05,680
web apps got sucked into the exploding

00:37:04,030 --> 00:37:06,760
popularity of Java scripts and they

00:37:05,680 --> 00:37:08,200
 hated it

00:37:06,760 --> 00:37:10,390
they told us that they hated it at the

00:37:08,200 --> 00:37:12,069
time in the survey data they've made

00:37:10,390 --> 00:37:14,960
very clear that they still hate it and

00:37:12,069 --> 00:37:16,979
don't want to be writing JavaScript

00:37:14,960 --> 00:37:18,359
some of them wanted some of them

00:37:16,979 --> 00:37:21,359
attempted to solve this problem with

00:37:18,359 --> 00:37:23,160
CoffeeScript which introduced a ton of

00:37:21,359 --> 00:37:26,130
Ruby like features into JavaScript

00:37:23,160 --> 00:37:28,229
CoffeeScript failed but honestly the

00:37:26,130 --> 00:37:30,479
Ruby folks mostly one like JavaScript

00:37:28,229 --> 00:37:32,160
these days modern JavaScript has a ton

00:37:30,479 --> 00:37:36,839
of language features that are basically

00:37:32,160 --> 00:37:39,329
copied from Ruby and typescript is

00:37:36,839 --> 00:37:40,769
something like that pattern remember all

00:37:39,329 --> 00:37:41,999
of those non primary JavaScript

00:37:40,769 --> 00:37:44,670
developers who are working in typed

00:37:41,999 --> 00:37:46,529
languages like Java and c-sharp a bunch

00:37:44,670 --> 00:37:47,999
of people from those languages have come

00:37:46,529 --> 00:37:50,369
to the JavaScript community and found

00:37:47,999 --> 00:37:54,329
that they've missed types and typescript

00:37:50,369 --> 00:37:57,420
gives them those types backing so given

00:37:54,329 --> 00:37:58,859
the popularity of types and people using

00:37:57,420 --> 00:38:00,839
those type languages and also

00:37:58,859 --> 00:38:03,029
Microsoft's considerable backing to

00:38:00,839 --> 00:38:04,410
typescript I don't think the typescript

00:38:03,029 --> 00:38:08,910
is going to be the kind of failure that

00:38:04,410 --> 00:38:11,400
CoffeeScript was in our survey 17% of

00:38:08,910 --> 00:38:13,109
people who had heard of webassembly

00:38:11,400 --> 00:38:15,089
said that the thing that they found most

00:38:13,109 --> 00:38:16,859
interesting about web assembly was that

00:38:15,089 --> 00:38:18,630
it allowed them to write a language

00:38:16,859 --> 00:38:23,130
other than JavaScript and they preferred

00:38:18,630 --> 00:38:25,289
doing that web assembly freeze web

00:38:23,130 --> 00:38:27,359
developers and it frees web development

00:38:25,289 --> 00:38:29,400
from JavaScript and the result will be

00:38:27,359 --> 00:38:31,739
that a bunch of people will stop writing

00:38:29,400 --> 00:38:32,549
JavaScript but that is not something to

00:38:31,739 --> 00:38:35,009
be worried about

00:38:32,549 --> 00:38:39,029
first not everybody will stop just the

00:38:35,009 --> 00:38:41,099
people who hate it and second when

00:38:39,029 --> 00:38:42,960
people writing web assembly are looking

00:38:41,099 --> 00:38:45,029
for a way to share code with each other

00:38:42,960 --> 00:38:47,609
the massive gravity well of the NPM

00:38:45,029 --> 00:38:49,529
registry will make it obvious the best

00:38:47,609 --> 00:38:52,739
place to share your web assembly modules

00:38:49,529 --> 00:38:55,559
is also the NPM registry web assembly

00:38:52,739 --> 00:38:57,630
will make JavaScript stronger by giving

00:38:55,559 --> 00:38:58,920
it access to the best libraries no

00:38:57,630 --> 00:39:03,049
matter what language they were written

00:38:58,920 --> 00:39:05,460
it that is a tremendously exciting idea

00:39:03,049 --> 00:39:07,880
the next question we're spending time on

00:39:05,460 --> 00:39:10,739
is what the hell is going on with react

00:39:07,880 --> 00:39:12,779
part of the explanation is that react

00:39:10,739 --> 00:39:14,519
isn't a full web framework it has no

00:39:12,779 --> 00:39:17,130
opinions about routing or data modules

00:39:14,519 --> 00:39:18,779
like other frameworks do so as opinions

00:39:17,130 --> 00:39:22,380
change about the best way to do routing

00:39:18,779 --> 00:39:24,059
and data people don't have to abandon

00:39:22,380 --> 00:39:25,650
react to be able to do that they can

00:39:24,059 --> 00:39:27,630
just switch from you know flux to

00:39:25,650 --> 00:39:32,730
reduction from Redux to whatever

00:39:27,630 --> 00:39:35,940
next it's just a component model and it

00:39:32,730 --> 00:39:38,010
creates truly reusable fully functioning

00:39:35,940 --> 00:39:39,480
components if you've never seen quite

00:39:38,010 --> 00:39:42,330
how well that can work here are two

00:39:39,480 --> 00:39:44,910
examples of react components that you

00:39:42,330 --> 00:39:47,010
can just npm install today two of the

00:39:44,910 --> 00:39:49,260
most annoying and fiddly components a

00:39:47,010 --> 00:39:52,320
color picker and a date picker and you

00:39:49,260 --> 00:39:54,600
can just npm install them that my

00:39:52,320 --> 00:39:56,370
friends has been the dream for 20 years

00:39:54,600 --> 00:39:58,560
I don't want to have to implement a date

00:39:56,370 --> 00:40:02,940
picker ever again and now I don't have

00:39:58,560 --> 00:40:04,350
to other projects provide whole

00:40:02,940 --> 00:40:06,590
libraries of excellent pre-built

00:40:04,350 --> 00:40:09,360
components to use react toolbox does one

00:40:06,590 --> 00:40:11,010
using Google's material design although

00:40:09,360 --> 00:40:13,590
it's not like an official Google project

00:40:11,010 --> 00:40:14,700
or anything and reach UI is an excellent

00:40:13,590 --> 00:40:17,070
start on addressing accessibility

00:40:14,700 --> 00:40:18,690
concerns and react by providing a

00:40:17,070 --> 00:40:21,660
library of fully accessible react

00:40:18,690 --> 00:40:24,600
components but now react can go even

00:40:21,660 --> 00:40:27,330
further as you've already heard of this

00:40:24,600 --> 00:40:29,430
conference react 16.8 introduced hooks

00:40:27,330 --> 00:40:31,230
hooks are a new way of handling state in

00:40:29,430 --> 00:40:33,210
react but from my perspective the most

00:40:31,230 --> 00:40:34,800
interesting thing about hooks is that it

00:40:33,210 --> 00:40:37,110
is very easy to add a whole bunch of

00:40:34,800 --> 00:40:42,330
functionality to your application using

00:40:37,110 --> 00:40:44,490
hooks by just npm installing them an

00:40:42,330 --> 00:40:46,080
early promising demonstration of this is

00:40:44,490 --> 00:40:48,030
react use which is a library that

00:40:46,080 --> 00:40:49,890
provides a ton of functionality for the

00:40:48,030 --> 00:40:53,010
like you know more dark and dangerous

00:40:49,890 --> 00:40:54,930
corners of the Web API in your react app

00:40:53,010 --> 00:40:56,550
by just npm installing the functionality

00:40:54,930 --> 00:40:59,430
that you want to use with way less

00:40:56,550 --> 00:41:01,140
effort on your part and this suggests an

00:40:59,430 --> 00:41:03,540
enticing future where we can build web

00:41:01,140 --> 00:41:06,090
apps at a whole new level of abstraction

00:41:03,540 --> 00:41:07,710
all of these things together mean that

00:41:06,090 --> 00:41:09,900
we won't have to think too hard about

00:41:07,710 --> 00:41:13,500
what the server is or how it works or

00:41:09,900 --> 00:41:15,030
even where it is and we can put existing

00:41:13,500 --> 00:41:16,500
components together instead of having to

00:41:15,030 --> 00:41:19,590
build them from scratch every time we

00:41:16,500 --> 00:41:21,180
start a new project and each new

00:41:19,590 --> 00:41:22,860
component added to the pile of

00:41:21,180 --> 00:41:25,200
components inside of the NPM registry

00:41:22,860 --> 00:41:27,900
will make it more attractive to use

00:41:25,200 --> 00:41:29,160
those components again the same feedback

00:41:27,900 --> 00:41:32,010
loop that created the NPM registry

00:41:29,160 --> 00:41:34,740
itself could make react and react

00:41:32,010 --> 00:41:39,060
components an unstoppable force that

00:41:34,740 --> 00:41:39,840
changes web development forever but it's

00:41:39,060 --> 00:41:41,430
not guaranteed

00:41:39,840 --> 00:41:43,020
reiax growth seems to be

00:41:41,430 --> 00:41:45,480
slowing down and view is showing a lot

00:41:43,020 --> 00:41:47,250
of growth so is view the future will

00:41:45,480 --> 00:41:50,430
react to decline and fall like every

00:41:47,250 --> 00:41:53,520
framework ever before in the next couple

00:41:50,430 --> 00:41:54,240
of years we get to find out in the

00:41:53,520 --> 00:41:56,609
meantime

00:41:54,240 --> 00:41:59,160
reacts dominance on the front end has

00:41:56,609 --> 00:42:01,349
totally changed the back end as I showed

00:41:59,160 --> 00:42:03,480
earlier frameworks that enable

00:42:01,349 --> 00:42:04,980
server-side rendering of react apps are

00:42:03,480 --> 00:42:08,760
now more popular than traditional

00:42:04,980 --> 00:42:11,190
back-end frameworks so instead of

00:42:08,760 --> 00:42:12,780
writing code for clients and servers we

00:42:11,190 --> 00:42:15,390
just write code for clients and we get

00:42:12,780 --> 00:42:17,309
the server to figure it out we

00:42:15,390 --> 00:42:20,579
increasingly abstract away how code is

00:42:17,309 --> 00:42:22,890
deployed and just give it away entirely

00:42:20,579 --> 00:42:28,680
to serverless things or deployment

00:42:22,890 --> 00:42:30,450
services building all apps is rich

00:42:28,680 --> 00:42:31,619
front-end apps I'm not sure that that is

00:42:30,450 --> 00:42:33,359
a good idea I'm not sure that that's

00:42:31,619 --> 00:42:35,339
always the best kind of app that we can

00:42:33,359 --> 00:42:38,010
build but it certainly is a popular idea

00:42:35,339 --> 00:42:40,829
and as I've been pointing out popularity

00:42:38,010 --> 00:42:43,079
has its own momentum at least one

00:42:40,829 --> 00:42:45,210
browser maker is already working on

00:42:43,079 --> 00:42:49,859
specific optimizations to the browser to

00:42:45,210 --> 00:42:51,450
make react faster and last year I made

00:42:49,859 --> 00:42:52,740
the case that react components or at

00:42:51,450 --> 00:42:54,569
least some of the core parts of them

00:42:52,740 --> 00:42:56,579
should become part of the browser so

00:42:54,569 --> 00:42:58,640
that we can make our frameworks smaller

00:42:56,579 --> 00:43:00,690
and we can make our frameworks faster

00:42:58,640 --> 00:43:03,150
because we did that before we did that

00:43:00,690 --> 00:43:05,040
with jQuery a lot of the api's that we

00:43:03,150 --> 00:43:06,630
that were in jQuery are now just part of

00:43:05,040 --> 00:43:08,790
the web api we think of ourselves as

00:43:06,630 --> 00:43:10,440
having stopped using jQuery but we still

00:43:08,790 --> 00:43:13,589
use jQuery every day we just don't need

00:43:10,440 --> 00:43:15,450
to download a library to do it so I

00:43:13,589 --> 00:43:17,910
stand by that I think some parts of

00:43:15,450 --> 00:43:19,440
react are so good and so popular that at

00:43:17,910 --> 00:43:22,770
this point they should probably be part

00:43:19,440 --> 00:43:24,359
of the web so let's take all of these

00:43:22,770 --> 00:43:25,559
trends and analysis and opinions and

00:43:24,359 --> 00:43:27,270
weave them all together and make some

00:43:25,559 --> 00:43:29,250
guesses about the future this is where I

00:43:27,270 --> 00:43:33,839
go from slightly wrong to extremely

00:43:29,250 --> 00:43:35,970
wrong first is a future I don't have to

00:43:33,839 --> 00:43:37,740
guess about and that is NPM tink NPM

00:43:35,970 --> 00:43:39,720
tink is a tremendously exciting leap

00:43:37,740 --> 00:43:42,720
forward in package management it's a

00:43:39,720 --> 00:43:44,460
package manager and a runtime and you

00:43:42,720 --> 00:43:45,990
won't have to install packages anymore

00:43:44,460 --> 00:43:47,130
you won't have to transpile type scripts

00:43:45,990 --> 00:43:49,770
you won't have to think about whether

00:43:47,130 --> 00:43:52,650
assembly you can just import stuff and

00:43:49,770 --> 00:43:54,560
tink will figure it out so let's watch

00:43:52,650 --> 00:43:56,770
that happen

00:43:54,560 --> 00:43:59,060
will it have downloaded the whole video

00:43:56,770 --> 00:44:00,770
what you're seeing is two modules in

00:43:59,060 --> 00:44:03,290
this folder one is JavaScript and one is

00:44:00,770 --> 00:44:06,140
wasum the main file is typescript index

00:44:03,290 --> 00:44:08,540
TS we import that as 'm straight into

00:44:06,140 --> 00:44:11,180
the typescript and then we use tink SH

00:44:08,540 --> 00:44:12,620
to run that typescript we don't have to

00:44:11,180 --> 00:44:14,300
do any transpiling we don't have to do

00:44:12,620 --> 00:44:17,590
any loading there is no other code in

00:44:14,300 --> 00:44:20,000
this folder tink just figures it out

00:44:17,590 --> 00:44:22,490
that's amazing we don't have to do any

00:44:20,000 --> 00:44:26,150
of that stuff anymore the ergonomics of

00:44:22,490 --> 00:44:28,220
that are wonderful dan I dream of

00:44:26,150 --> 00:44:30,080
tweeted recently about how vb6 is what

00:44:28,220 --> 00:44:31,490
got him into programming and it's a

00:44:30,080 --> 00:44:33,140
really great point because it's exactly

00:44:31,490 --> 00:44:36,320
where it seems like all of this stuff is

00:44:33,140 --> 00:44:39,020
going imagine a world where you can

00:44:36,320 --> 00:44:40,490
build a web app without needing to know

00:44:39,020 --> 00:44:44,060
all the details of how all of your

00:44:40,490 --> 00:44:46,190
components work people hate on vb6

00:44:44,060 --> 00:44:48,230
but at one point it was the world's most

00:44:46,190 --> 00:44:51,500
programming popular programming language

00:44:48,230 --> 00:44:53,510
and that's us now vb6 unlocked and

00:44:51,500 --> 00:44:55,430
created a generation of programmers by

00:44:53,510 --> 00:44:57,620
making programming very easy and

00:44:55,430 --> 00:45:01,730
accessible for everyone that made it

00:44:57,620 --> 00:45:03,530
very good and very popular think how

00:45:01,730 --> 00:45:05,720
many more people could get to be web

00:45:03,530 --> 00:45:07,880
developers if you could build a real and

00:45:05,720 --> 00:45:10,850
useful web app by dragging and dropping

00:45:07,880 --> 00:45:12,740
open-source components into it that

00:45:10,850 --> 00:45:14,150
wouldn't make your job obsolete we would

00:45:12,740 --> 00:45:15,950
still need everyone in this room to be

00:45:14,150 --> 00:45:18,650
writing components but we would need a

00:45:15,950 --> 00:45:20,090
room ten times this size to hold all of

00:45:18,650 --> 00:45:22,880
the people who would be using the

00:45:20,090 --> 00:45:24,890
components that we write it would be a

00:45:22,880 --> 00:45:27,170
whole new level of abstraction it would

00:45:24,890 --> 00:45:29,270
create a whole new type of web developer

00:45:27,170 --> 00:45:31,820
and it would unlock a whole new sequence

00:45:29,270 --> 00:45:34,070
and a whole new class of web apps that

00:45:31,820 --> 00:45:37,640
currently it's too expensive for anyone

00:45:34,070 --> 00:45:40,760
to build that is a tremendously exciting

00:45:37,640 --> 00:45:43,280
idea and then you add to that mix web

00:45:40,760 --> 00:45:45,470
assembly which it's still very early

00:45:43,280 --> 00:45:47,630
days right now but you could bring every

00:45:45,470 --> 00:45:49,700
useful library from every other language

00:45:47,630 --> 00:45:51,830
and put them into the JavaScript

00:45:49,700 --> 00:45:54,400
universe and make all of those libraries

00:45:51,830 --> 00:45:56,930
interoperable with no performance hit

00:45:54,400 --> 00:45:58,940
suddenly not only is it easier to build

00:45:56,930 --> 00:46:01,840
these apps in JavaScript but what you

00:45:58,940 --> 00:46:04,790
can build would be greatly expanded and

00:46:01,840 --> 00:46:06,500
the last piece of the puzzle is all of

00:46:04,790 --> 00:46:08,150
those native app developers that's

00:46:06,500 --> 00:46:10,730
already nearly half of

00:46:08,150 --> 00:46:13,339
take highly performant rich web apps and

00:46:10,730 --> 00:46:15,829
then run them anywhere that you like on

00:46:13,339 --> 00:46:19,569
desktops on phones on tablets on watches

00:46:15,829 --> 00:46:22,400
on VR VR headsets on your shoes

00:46:19,569 --> 00:46:24,140
JavaScript running everywhere absorbing

00:46:22,400 --> 00:46:26,059
all of the other languages into a single

00:46:24,140 --> 00:46:28,369
unified world of open-source components

00:46:26,059 --> 00:46:30,700
built by an ever expanding and

00:46:28,369 --> 00:46:32,809
increasingly diverse set of developers

00:46:30,700 --> 00:46:35,809
there is no guarantee that that will

00:46:32,809 --> 00:46:37,490
happen but I can imagine a world where

00:46:35,809 --> 00:46:39,619
the thing that we currently call web

00:46:37,490 --> 00:46:42,440
development just becomes the way that we

00:46:39,619 --> 00:46:44,269
build software and after 23 years of

00:46:42,440 --> 00:46:47,150
watching web development change and grow

00:46:44,269 --> 00:46:49,700
no time has ever been more exciting to

00:46:47,150 --> 00:46:51,950
be a web developer and you my friends

00:46:49,700 --> 00:46:57,109
and colleagues are perfectly placed to

00:46:51,950 --> 00:46:59,960
become part of that change the web is an

00:46:57,109 --> 00:47:02,750
amazing force for good and evil it is a

00:46:59,960 --> 00:47:04,789
toy and the tool it's a playground and

00:47:02,750 --> 00:47:07,490
it's a marketplace it is alternately

00:47:04,789 --> 00:47:09,710
amazing and terrifying and its power we

00:47:07,490 --> 00:47:11,750
can do so much good and we can do so

00:47:09,710 --> 00:47:13,759
much harm but I choose to believe that

00:47:11,750 --> 00:47:16,130
in the long run we will collectively

00:47:13,759 --> 00:47:18,559
decide to do more things that help the

00:47:16,130 --> 00:47:20,420
world than hurt it we have all made

00:47:18,559 --> 00:47:23,779
mistakes that have hurt people I know

00:47:20,420 --> 00:47:26,089
that I have but I believe that in the

00:47:23,779 --> 00:47:28,730
course of time our good decisions will

00:47:26,089 --> 00:47:31,490
outweigh our bad decisions and the web

00:47:28,730 --> 00:47:33,529
will grow forever I hope what I've

00:47:31,490 --> 00:47:35,299
shared with you today has helped you see

00:47:33,529 --> 00:47:37,279
where you are and what you can do I hope

00:47:35,299 --> 00:47:39,529
that's helped motivate you and make you

00:47:37,279 --> 00:47:40,579
curious I hope you've had a fantastic

00:47:39,529 --> 00:47:42,829
jeaious cough

00:47:40,579 --> 00:47:45,849
I certainly have and thank you all so

00:47:42,829 --> 00:47:45,849

YouTube URL: https://www.youtube.com/watch?v=H8IaDYrv-3E


