Title: Getting Closure on React Hooks by Shawn Wang | JSConf.Asia 2019
Publication date: 2019-06-24
Playlist: JSConf.Asia 2019
Description: 
	The design of React Hooks requires a good understanding of closures in JavaScript. In this talk, weâ€™ll reintroduce closures by building a tiny clone of React! This will serve two purposes â€“ to demonstrate the effective use of closures, and to show how you can build a Hooks clone in just 29 lines of readable JS. Finally, we arrive at how you get Custom Hooks and the Rules of Hooks out of this incredible mental model!

Originally from Singapore, swyx is an Infinite Builder working on Developer Experience at Netlify. In his free time he helps people Learn in Public at Egghead.io and /r/reactjs.


JSConf.Asia - LASALLE College of the Arts, Singapore - 15 June 2019

Source: https://2019.jsconf.asia/

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.


Intro animation "something something prisms" by Martin Schuhfuss
https://codepen.io/usefulthink/pen/WogmvW

Intro music "Know" by Matt McKegg
https://soundcloud.com/destroy-with-science/know
Captions: 
	00:00:00,620 --> 00:00:15,820
[Music]

00:00:16,190 --> 00:00:19,740
hi everyone

00:00:17,550 --> 00:00:22,380
my name is Sean and I'm here to talk

00:00:19,740 --> 00:00:24,420
about hooks what's really great is

00:00:22,380 --> 00:00:26,880
inconvenient is that half the room

00:00:24,420 --> 00:00:28,830
already knows hooks and users react so I

00:00:26,880 --> 00:00:30,630
don't have to introduce it very much my

00:00:28,830 --> 00:00:32,940
name is Sean I go by Swick's on Twitter

00:00:30,630 --> 00:00:35,219
I work at Nikola Phi is a developer

00:00:32,940 --> 00:00:37,920
experience engineer I I moonlight as a

00:00:35,219 --> 00:00:40,140
moderator on the reax subreddit there's

00:00:37,920 --> 00:00:41,790
120,000 of us talking about react and

00:00:40,140 --> 00:00:44,149
getting jobs and getting started and

00:00:41,790 --> 00:00:47,460
react if you want to join in hire people

00:00:44,149 --> 00:00:49,140
please join us and my other big thing is

00:00:47,460 --> 00:00:50,850
that I learned in public so anything

00:00:49,140 --> 00:00:52,860
that I learned I try to do talks and

00:00:50,850 --> 00:00:55,949
blog posts and share stuff and this is

00:00:52,860 --> 00:00:57,719
one of those so I'm gonna start this

00:00:55,949 --> 00:00:59,219
talk by talking about Rene Magritte he's

00:00:57,719 --> 00:01:00,570
one of these painters you might

00:00:59,219 --> 00:01:01,920
recognize the painting in the background

00:01:00,570 --> 00:01:03,870
that's one of his more famous ones

00:01:01,920 --> 00:01:05,820
that's the man in the bowler hat and he

00:01:03,870 --> 00:01:07,380
does several variations of this this

00:01:05,820 --> 00:01:09,720
one's probably you've seen this as well

00:01:07,380 --> 00:01:11,909
and they're all surrealist like they

00:01:09,720 --> 00:01:13,530
look they look really good he has skills

00:01:11,909 --> 00:01:15,810
but he just paint something that's not

00:01:13,530 --> 00:01:18,479
exactly real and it's meant to make you

00:01:15,810 --> 00:01:20,909
slightly disturbed slightly like out of

00:01:18,479 --> 00:01:22,020
out of kilter this one's also I really

00:01:20,909 --> 00:01:23,189
like this because it's like that it's

00:01:22,020 --> 00:01:25,740
just like a floating rock that's

00:01:23,189 --> 00:01:28,020
probably the inspiration for Pandora and

00:01:25,740 --> 00:01:30,150
and this one I also like it's just kind

00:01:28,020 --> 00:01:31,619
of like there's like human intimacy but

00:01:30,150 --> 00:01:34,470
they're not really seeing each other you

00:01:31,619 --> 00:01:36,420
can't see them he has a thing against

00:01:34,470 --> 00:01:39,119
painting faces this one's about I think

00:01:36,420 --> 00:01:41,369
in the impermanence of life like things

00:01:39,119 --> 00:01:44,520
remain and the the man just goes away

00:01:41,369 --> 00:01:48,000
anyway the most famous one is probably

00:01:44,520 --> 00:01:49,829
this one I'm not good at French so but

00:01:48,000 --> 00:01:51,780
it just says this is not a pipe it's a

00:01:49,829 --> 00:01:53,460
picture of a pipe is not a pipe so it's

00:01:51,780 --> 00:01:55,229
a it's a it's an interesting useful

00:01:53,460 --> 00:01:57,030
model for people to discuss it's meant

00:01:55,229 --> 00:01:58,740
to make you slightly off-kilter but well

00:01:57,030 --> 00:02:00,479
I think I think it's actually useful

00:01:58,740 --> 00:02:01,290
right like you can you can point to this

00:02:00,479 --> 00:02:05,130
and everyone knows what you're talking

00:02:01,290 --> 00:02:08,009
about as a pipe and this is the the

00:02:05,130 --> 00:02:09,720
frame that I want to set this talk with

00:02:08,009 --> 00:02:12,450
like this is not a pipe but it is a

00:02:09,720 --> 00:02:13,200
useful discussion of a pipe

00:02:12,450 --> 00:02:14,849
how does

00:02:13,200 --> 00:02:16,860
I have to and I'm updated it for the

00:02:14,849 --> 00:02:18,959
Millennials so this is a little bit more

00:02:16,860 --> 00:02:21,420
updated in terms of a meme that meme was

00:02:18,959 --> 00:02:23,040
like a hundred years old this is bit

00:02:21,420 --> 00:02:27,269
more recent and this is the more recent

00:02:23,040 --> 00:02:29,730
one I always yeah I'm very good with

00:02:27,269 --> 00:02:31,140
means so so how does that have to do

00:02:29,730 --> 00:02:32,459
with ReactOS I'm gonna assume that

00:02:31,140 --> 00:02:34,519
everyone's seen the talks and see the

00:02:32,459 --> 00:02:36,720
see the video as in see the docs

00:02:34,519 --> 00:02:40,410
obviously go go check it out if you have

00:02:36,720 --> 00:02:42,030
it and mainly hooks were meant to

00:02:40,410 --> 00:02:45,180
replace on the problems with classes and

00:02:42,030 --> 00:02:46,950
in particular binding that this that's

00:02:45,180 --> 00:02:48,510
not the only issue and that's not the

00:02:46,950 --> 00:02:51,480
primary issue but that is one of the

00:02:48,510 --> 00:02:52,980
issues but but we happen to have

00:02:51,480 --> 00:02:55,560
exchanged the problem with that with

00:02:52,980 --> 00:02:57,599
with with closures there you start to

00:02:55,560 --> 00:02:59,250
run into stale closures all the time and

00:02:57,599 --> 00:03:01,349
having to refresh your memory on what

00:02:59,250 --> 00:03:03,030
closures are so I was I was running

00:03:01,349 --> 00:03:05,610
today as well as well as adopting hooks

00:03:03,030 --> 00:03:07,829
and so I looked for a startled look for

00:03:05,610 --> 00:03:09,329
definitions obviously you turn the mdn a

00:03:07,829 --> 00:03:10,860
closure is a combination of a function

00:03:09,329 --> 00:03:13,049
in mexico environment with a function

00:03:10,860 --> 00:03:15,709
was declared very clear right and blah

00:03:13,049 --> 00:03:18,840
blah blah like i look at all these

00:03:15,709 --> 00:03:20,970
comments and honestly the the most clear

00:03:18,840 --> 00:03:23,250
one was actually w3schools it's a

00:03:20,970 --> 00:03:25,260
closure makes it possible for a function

00:03:23,250 --> 00:03:26,880
to have private variables that's the

00:03:25,260 --> 00:03:31,260
only time I've ever found w3schools

00:03:26,880 --> 00:03:35,160
useful but thank you anyway

00:03:31,260 --> 00:03:36,600
so so then I have this exercise of like

00:03:35,160 --> 00:03:38,850
why not write hooks from scratch and

00:03:36,600 --> 00:03:40,230
practice closures as well because if it

00:03:38,850 --> 00:03:42,660
can have private variables I kind of

00:03:40,230 --> 00:03:45,389
stateful functions so this is the part

00:03:42,660 --> 00:03:49,560
where we start live coding and we have

00:03:45,389 --> 00:03:51,900
time okay so what do I mean by stateful

00:03:49,560 --> 00:03:53,549
functions let's just have a variable on

00:03:51,900 --> 00:03:54,660
the global scope I hope this is big

00:03:53,549 --> 00:03:56,549
enough for everyone

00:03:54,660 --> 00:03:58,139
variable on a global scope and I'm gonna

00:03:56,549 --> 00:04:03,180
constantly I only have a function called

00:03:58,139 --> 00:04:06,359
add if I can spell under intense

00:04:03,180 --> 00:04:09,620
scrutiny in pledge then pressure food

00:04:06,359 --> 00:04:14,970
plus one it's going to return foo and

00:04:09,620 --> 00:04:16,650
now every time I call it it's gonna

00:04:14,970 --> 00:04:18,510
increment by one right it's a stateful

00:04:16,650 --> 00:04:20,280
function in the sense that as every time

00:04:18,510 --> 00:04:22,470
I call it there's some internal state

00:04:20,280 --> 00:04:24,570
going on that's that's that's being

00:04:22,470 --> 00:04:27,229
mutated and and and you can see the

00:04:24,570 --> 00:04:29,030
result of that the problem of this is is

00:04:27,229 --> 00:04:31,009
thus the the fou variable is on the

00:04:29,030 --> 00:04:32,960
global scope so any intermediate script

00:04:31,009 --> 00:04:35,240
can just mess of it right like I can

00:04:32,960 --> 00:04:37,880
just say like food 999 and that screws

00:04:35,240 --> 00:04:39,650
up my my expectations of what's supposed

00:04:37,880 --> 00:04:42,380
to happen if I make if I'm writing a

00:04:39,650 --> 00:04:44,180
library that's not a good it's not

00:04:42,380 --> 00:04:46,340
that's not very secure so I need to

00:04:44,180 --> 00:04:48,080
contain I need to protect this variable

00:04:46,340 --> 00:04:50,120
somehow and move it off the global scope

00:04:48,080 --> 00:04:52,430
and how do I do that I move that inside

00:04:50,120 --> 00:04:54,229
the scope of the of the function right

00:04:52,430 --> 00:04:58,130
and so now JavaScript just refuses to

00:04:54,229 --> 00:05:00,050
run it just doesn't let you modify food

00:04:58,130 --> 00:05:02,630
that's great but I give up

00:05:00,050 --> 00:05:04,520
the statefulness I gave I just call it

00:05:02,630 --> 00:05:07,099
every single time in it and it just has

00:05:04,520 --> 00:05:09,680
the same has the same value so how do i

00:05:07,099 --> 00:05:11,690
how do I fix this I can't exactly fix

00:05:09,680 --> 00:05:14,530
this with this API what I can do is

00:05:11,690 --> 00:05:17,419
return a function inside of the function

00:05:14,530 --> 00:05:19,870
and do the exact same thing inside there

00:05:17,419 --> 00:05:22,490
I'm just a switch this to get add

00:05:19,870 --> 00:05:25,490
function higher-order function I guess

00:05:22,490 --> 00:05:28,400
and I'm gonna call get add in there and

00:05:25,490 --> 00:05:30,169
now it still works again I have a state

00:05:28,400 --> 00:05:32,510
I have my stateful function back and I

00:05:30,169 --> 00:05:34,220
cannot touch foo inside and internally

00:05:32,510 --> 00:05:35,690
right so those are the requirements that

00:05:34,220 --> 00:05:36,949
we want we want stateful functions and

00:05:35,690 --> 00:05:38,330
we want them to be protected we on that

00:05:36,949 --> 00:05:41,210
state to be protected

00:05:38,330 --> 00:05:43,430
the last JavaScript refresher so this is

00:05:41,210 --> 00:05:45,680
a closure right I add the add function

00:05:43,430 --> 00:05:48,080
is this anonymous function in here and

00:05:45,680 --> 00:05:50,180
it closes over this full variable that's

00:05:48,080 --> 00:05:52,669
inside of the get add function no one

00:05:50,180 --> 00:05:54,880
else can access it but and can access it

00:05:52,669 --> 00:05:57,199
every time is executed that's closure so

00:05:54,880 --> 00:05:58,310
the last thing I'm gonna remind you and

00:05:57,199 --> 00:06:01,099
then we will actually start to clone

00:05:58,310 --> 00:06:03,500
react is that if I don't want this ugly

00:06:01,099 --> 00:06:05,900
get add thing it's kind of ugly I can

00:06:03,500 --> 00:06:08,960
just delete this replace get add with a

00:06:05,900 --> 00:06:10,550
parenthesis and I'll just paste it in

00:06:08,960 --> 00:06:12,530
there and it does exactly the same thing

00:06:10,550 --> 00:06:14,720
so this is the module pattern it's also

00:06:12,530 --> 00:06:16,550
called be Fe the immediately invoking

00:06:14,720 --> 00:06:18,220
function expression a lot of you are

00:06:16,550 --> 00:06:21,560
seen if you look at bundler output

00:06:18,220 --> 00:06:23,419
alright let's clone react so first thing

00:06:21,560 --> 00:06:25,820
when I clone is the used state variable

00:06:23,419 --> 00:06:32,180
you state hook it takes an initial value

00:06:25,820 --> 00:06:34,639
and in its vowel I'm gonna call it and

00:06:32,180 --> 00:06:37,039
what does it return it returns a state

00:06:34,639 --> 00:06:38,970
and it's set state I'm going to refer a

00:06:37,039 --> 00:06:41,280
lot by the way to the

00:06:38,970 --> 00:06:43,080
that the docs like if people knew if

00:06:41,280 --> 00:06:45,470
people knew to hugs definitely check out

00:06:43,080 --> 00:06:48,180
the docs first before watching this talk

00:06:45,470 --> 00:06:49,620
so how do you how do you define state

00:06:48,180 --> 00:06:51,240
and set state how do you implement that

00:06:49,620 --> 00:06:52,860
we're just gonna have some internal

00:06:51,240 --> 00:06:54,480
variable that's just called the internal

00:06:52,860 --> 00:06:57,060
value and we're just gonna initialize it

00:06:54,480 --> 00:06:59,250
to in it Val we're gonna have state and

00:06:57,060 --> 00:07:02,220
it's just a sign that - Val for now this

00:06:59,250 --> 00:07:03,420
is wrong but we just get something

00:07:02,220 --> 00:07:05,640
showing on the screen and then we'll

00:07:03,420 --> 00:07:09,960
modify from there set state takes a new

00:07:05,640 --> 00:07:14,190
value and it sets that new value to the

00:07:09,960 --> 00:07:16,830
internal Val okay good so now we have

00:07:14,190 --> 00:07:21,480
hooks in node let's use it count set

00:07:16,830 --> 00:07:24,420
count so this is D structuring or ad

00:07:21,480 --> 00:07:26,340
structuring and and all that so again

00:07:24,420 --> 00:07:29,040
these are all standard JavaScript

00:07:26,340 --> 00:07:30,720
patterns that are pretty handy when

00:07:29,040 --> 00:07:33,600
doing this and then now we're gonna

00:07:30,720 --> 00:07:35,910
console dot log count we're going to set

00:07:33,600 --> 00:07:37,860
counts to two and then we're gonna

00:07:35,910 --> 00:07:39,960
console out count again so what I expect

00:07:37,860 --> 00:07:42,900
is to log out one and two

00:07:39,960 --> 00:07:45,090
unfortunately I log out one and one over

00:07:42,900 --> 00:07:46,470
here and that means that I'm not really

00:07:45,090 --> 00:07:48,930
it's not really working

00:07:46,470 --> 00:07:49,980
unfortunately it actually is that set

00:07:48,930 --> 00:07:51,810
count is working

00:07:49,980 --> 00:07:53,760
it's modifying internal value but the

00:07:51,810 --> 00:07:56,250
problem is when ID structure this counts

00:07:53,760 --> 00:07:57,810
is assigned the value of one and it is

00:07:56,250 --> 00:07:59,340
one here and it is one here that's what

00:07:57,810 --> 00:08:01,440
we're logging out one so we need

00:07:59,340 --> 00:08:04,260
someplace to just repoed the internal

00:08:01,440 --> 00:08:06,030
state again one easy it's very cheap way

00:08:04,260 --> 00:08:07,980
to do it is to turn the state into a

00:08:06,030 --> 00:08:11,640
getter function and now I can just call

00:08:07,980 --> 00:08:13,080
get I just call the function and now I

00:08:11,640 --> 00:08:16,919
have my state full function back again

00:08:13,080 --> 00:08:18,450
so one into and and and this is kind of

00:08:16,919 --> 00:08:19,770
hooks in note if you need hooks in node

00:08:18,450 --> 00:08:22,410
that's that's all the implementation

00:08:19,770 --> 00:08:24,450
it's eight lines but we want to do more

00:08:22,410 --> 00:08:25,890
than that the in reacts you don't call a

00:08:24,450 --> 00:08:27,630
getter function you just used the

00:08:25,890 --> 00:08:29,250
variable and it's live every time and

00:08:27,630 --> 00:08:31,169
it's just fresh and it's the correct

00:08:29,250 --> 00:08:33,120
value don't you don't call it a weird

00:08:31,169 --> 00:08:35,250
getter function so we want to model that

00:08:33,120 --> 00:08:36,510
but it involves a pretty large refactor

00:08:35,250 --> 00:08:37,530
I'm gonna walk you through it you

00:08:36,510 --> 00:08:39,120
already know everything that you need to

00:08:37,530 --> 00:08:40,409
know so I'm gonna zoom a little bit all

00:08:39,120 --> 00:08:42,990
right so the first thing we want to do

00:08:40,409 --> 00:08:45,750
is put our hook inside of a reactive

00:08:42,990 --> 00:08:48,000
module I'm gonna cut this I'm going to

00:08:45,750 --> 00:08:50,430
introduce a react module it's going to

00:08:48,000 --> 00:08:51,000
be a function that I immediately invoke

00:08:50,430 --> 00:08:53,460
right

00:08:51,000 --> 00:08:56,700
I'm gonna paste my hook in there and I'm

00:08:53,460 --> 00:08:58,800
gonna return an object that has a u

00:08:56,700 --> 00:09:00,840
state property so now the only thing

00:08:58,800 --> 00:09:02,790
I've changed is in my usage I can call

00:09:00,840 --> 00:09:05,370
react use state and it does exactly the

00:09:02,790 --> 00:09:08,610
same thing everyone with me alright okay

00:09:05,370 --> 00:09:11,310
cool so so I've done I put I created my

00:09:08,610 --> 00:09:13,050
react module and I've sort of wrapped up

00:09:11,310 --> 00:09:13,740
my functionality I can do that to my

00:09:13,050 --> 00:09:15,420
hook as well

00:09:13,740 --> 00:09:20,030
what wraps are on a hook a component

00:09:15,420 --> 00:09:23,220
right so I can declare a component and

00:09:20,030 --> 00:09:25,440
and that's just a regular function and

00:09:23,220 --> 00:09:27,900
put the hook in there normally I'd be

00:09:25,440 --> 00:09:28,770
rendering to the Dom but in this case I

00:09:27,900 --> 00:09:31,110
don't have a door might just have the

00:09:28,770 --> 00:09:34,440
console so I'm just going to return an

00:09:31,110 --> 00:09:36,260
object and simulate that we'll get to

00:09:34,440 --> 00:09:39,600
the other stuff in a second so render

00:09:36,260 --> 00:09:42,960
I'm gonna have consult log counts and

00:09:39,600 --> 00:09:44,280
then click this is just for simulating I

00:09:42,960 --> 00:09:48,210
don't have a button so we're just gonna

00:09:44,280 --> 00:09:50,910
roll with this it's the best you got and

00:09:48,210 --> 00:09:53,760
I'm just gonna put in an object yeah

00:09:50,910 --> 00:09:55,410
forget the object okay so so the last

00:09:53,760 --> 00:09:57,720
thing that we need to do is we need to

00:09:55,410 --> 00:09:59,280
teach we have react and we have the

00:09:57,720 --> 00:10:00,960
component we need we need to we need to

00:09:59,280 --> 00:10:04,110
teach react how to render the component

00:10:00,960 --> 00:10:08,070
so that's right the render function it

00:10:04,110 --> 00:10:10,560
takes a component and a component is

00:10:08,070 --> 00:10:16,410
just a function right so let's just call

00:10:10,560 --> 00:10:18,360
it and then the when you call it you get

00:10:16,410 --> 00:10:20,040
an object that has a render and it click

00:10:18,360 --> 00:10:22,260
right so let's just called the render

00:10:20,040 --> 00:10:23,670
all right let's actually just put log

00:10:22,260 --> 00:10:25,110
something out on the screen and then

00:10:23,670 --> 00:10:27,300
we'll just return it so that we can do

00:10:25,110 --> 00:10:29,580
other stuff with the component and I'm

00:10:27,300 --> 00:10:31,890
gonna expose that inside of my react

00:10:29,580 --> 00:10:33,360
module over here so we're at 16 lines

00:10:31,890 --> 00:10:35,220
not too bad

00:10:33,360 --> 00:10:39,900
and now I can replace all this logging

00:10:35,220 --> 00:10:42,839
stuff and do something like react render

00:10:39,900 --> 00:10:44,610
component we should see something show

00:10:42,839 --> 00:10:47,790
up on the screen up that's not exactly

00:10:44,610 --> 00:10:49,350
what I want but whatever and I can

00:10:47,790 --> 00:10:51,720
because there's there's a return value

00:10:49,350 --> 00:10:54,000
over here I can take this and I can

00:10:51,720 --> 00:10:55,820
start accessing stuff on the object

00:10:54,000 --> 00:10:58,710
right like the click function that I

00:10:55,820 --> 00:11:02,010
wrote so I can just say click and I can

00:10:58,710 --> 00:11:03,680
render it again react I'll click is not

00:11:02,010 --> 00:11:06,199
a function oh it's

00:11:03,680 --> 00:11:07,999
okay cool it's a little bit like TDD

00:11:06,199 --> 00:11:08,930
instant feedback in this rebel thing is

00:11:07,999 --> 00:11:11,029
really nice

00:11:08,930 --> 00:11:12,439
okay so the only thing that's wrong with

00:11:11,029 --> 00:11:13,850
this now is I'm logging the state get er

00:11:12,439 --> 00:11:14,959
right that's the that's the thing that

00:11:13,850 --> 00:11:16,699
we did just now there was like a hacky

00:11:14,959 --> 00:11:19,550
thing let's just get rid of that let's

00:11:16,699 --> 00:11:23,689
lift the value up to the the internal

00:11:19,550 --> 00:11:26,059
value up to the scope of react and we're

00:11:23,689 --> 00:11:27,649
going to get rid of the getter function

00:11:26,059 --> 00:11:29,600
we don't need it anymore and we're just

00:11:27,649 --> 00:11:31,939
gonna let the getter function close over

00:11:29,600 --> 00:11:34,399
the internal value the the you stay

00:11:31,939 --> 00:11:37,220
close over the internal value so now it

00:11:34,399 --> 00:11:43,369
just returns every single time it

00:11:37,220 --> 00:11:50,059
renders so so this is the okay so this

00:11:43,369 --> 00:11:52,610
is I'm running into something that I

00:11:50,059 --> 00:12:00,730
didn't expect over here so I'm gonna try

00:11:52,610 --> 00:12:04,040
to debunk a little bit I think okay so

00:12:00,730 --> 00:12:06,439
it comes yeah I think I think I said

00:12:04,040 --> 00:12:08,809
comes oh yeah I need two plus one of

00:12:06,439 --> 00:12:10,069
course if I'm selling cars to the

00:12:08,809 --> 00:12:13,550
original accounts it's not gonna

00:12:10,069 --> 00:12:15,350
increment so yeah okay so I practice

00:12:13,550 --> 00:12:17,480
this a lot so it's very unusual for me

00:12:15,350 --> 00:12:18,800
to screw up like that so you can see we

00:12:17,480 --> 00:12:19,970
have our stateful functions back right

00:12:18,800 --> 00:12:21,800
but we've gone through a whole buncha

00:12:19,970 --> 00:12:24,350
ceremony but now we have a react module

00:12:21,800 --> 00:12:26,990
we have a component right it kind of

00:12:24,350 --> 00:12:28,790
looks like a component and and we can we

00:12:26,990 --> 00:12:30,889
can do things to the component and it

00:12:28,790 --> 00:12:33,740
updates in state so that's really good

00:12:30,889 --> 00:12:35,959
until you try to have multiple states

00:12:33,740 --> 00:12:36,949
multiple hooks so let's just have a text

00:12:35,959 --> 00:12:38,689
hook it's gonna look slightly different

00:12:36,949 --> 00:12:40,759
so that you can differentiate between

00:12:38,689 --> 00:12:42,379
the number and the text I'm gonna call

00:12:40,759 --> 00:12:45,050
it apple just because that's the first

00:12:42,379 --> 00:12:47,360
thing I think about I'm gonna log it out

00:12:45,050 --> 00:12:48,860
as well so we're gonna log it out in our

00:12:47,360 --> 00:12:52,100
render and I'm gonna have a new method

00:12:48,860 --> 00:12:53,600
I'm just going to call it type I'm just

00:12:52,100 --> 00:12:58,129
gonna take a word and it's gonna set

00:12:53,600 --> 00:13:01,759
text to that word okay let's get rid of

00:12:58,129 --> 00:13:03,949
this and we'll use that type function

00:13:01,759 --> 00:13:05,929
here and you'll see what's wrong with it

00:13:03,949 --> 00:13:08,689
in a second so I'm gonna set that to

00:13:05,929 --> 00:13:10,720
pear okay so so what's happening here

00:13:08,689 --> 00:13:14,089
our component is here it's got two hooks

00:13:10,720 --> 00:13:15,799
the first click happens and and both

00:13:14,089 --> 00:13:16,970
counts and texts are both set to two and

00:13:15,799 --> 00:13:20,149
then we

00:13:16,970 --> 00:13:22,430
at that type and both counts in Texas

00:13:20,149 --> 00:13:24,709
both set to pair so what's wrong with

00:13:22,430 --> 00:13:26,000
this this image we are trying to use to

00:13:24,709 --> 00:13:27,829
a hoax but they're they're they're just

00:13:26,000 --> 00:13:29,509
oh they're just using the same store in

00:13:27,829 --> 00:13:30,980
the memory right because we only have

00:13:29,509 --> 00:13:34,100
one variable and it's constantly

00:13:30,980 --> 00:13:35,540
overwriting that single variable so the

00:13:34,100 --> 00:13:37,370
the mental image of hooks that you have

00:13:35,540 --> 00:13:39,250
now should grow a little bit and you

00:13:37,370 --> 00:13:42,529
should think of hooks as a rays of

00:13:39,250 --> 00:13:44,629
effects so let's just use an array and

00:13:42,529 --> 00:13:46,160
we'll stand to know which hook we're

00:13:44,629 --> 00:13:48,579
currently operating on we also need an

00:13:46,160 --> 00:13:51,800
index so I'm gonna have an index of zero

00:13:48,579 --> 00:13:53,209
so so now now we're now it's pretty

00:13:51,800 --> 00:13:55,970
clear we're gonna replace all the

00:13:53,209 --> 00:13:58,189
internal values with just hooks and in

00:13:55,970 --> 00:14:01,639
the current index so now nothing has

00:13:58,189 --> 00:14:03,439
changed because we're still not oh it's

00:14:01,639 --> 00:14:05,269
not incrementing the index so I'm gonna

00:14:03,439 --> 00:14:07,310
have a rule there at the end of the at

00:14:05,269 --> 00:14:08,449
the end of a hook after we're done we

00:14:07,310 --> 00:14:10,339
should just always increment the index

00:14:08,449 --> 00:14:11,629
so that the next hook can take and can

00:14:10,339 --> 00:14:14,389
take place so now we have an

00:14:11,629 --> 00:14:16,339
independently updating counts and text

00:14:14,389 --> 00:14:18,649
is not changing that's good but over

00:14:16,339 --> 00:14:20,209
here we still have this weird bug and

00:14:18,649 --> 00:14:22,220
that's because I just keep incrementing

00:14:20,209 --> 00:14:23,899
index plus one plus one plus one plus

00:14:22,220 --> 00:14:26,449
one I need to reset it back to zero so

00:14:23,899 --> 00:14:28,309
that every single time a rerender it's

00:14:26,449 --> 00:14:29,769
gonna start and go through all these

00:14:28,309 --> 00:14:31,939
hooks from scratch because it's

00:14:29,769 --> 00:14:34,670
referring to their internal hook storage

00:14:31,939 --> 00:14:37,610
so yeah let's just set it to zero and

00:14:34,670 --> 00:14:39,500
now I'm gonna break everything and this

00:14:37,610 --> 00:14:42,079
is because of a very subtle bug again

00:14:39,500 --> 00:14:44,029
set state is called asynchronously set

00:14:42,079 --> 00:14:46,670
state is called after a render right and

00:14:44,029 --> 00:14:49,129
and by that time hope the the indexes

00:14:46,670 --> 00:14:50,629
actually set back to zero so this this

00:14:49,129 --> 00:14:52,730
index being a live value that's a

00:14:50,629 --> 00:14:55,639
problem for us the way to fix that

00:14:52,730 --> 00:14:57,069
problem is to freeze it so let's have an

00:14:55,639 --> 00:15:00,379
internal index and we'll just freeze it

00:14:57,069 --> 00:15:03,290
and we'll that set state closed over

00:15:00,379 --> 00:15:06,410
second NewsAsia closure close over that

00:15:03,290 --> 00:15:08,899
internal frozen index value okay so now

00:15:06,410 --> 00:15:11,329
we have a component we are rendering it

00:15:08,899 --> 00:15:14,240
we have a count of one we're clicking

00:15:11,329 --> 00:15:16,430
the account updates to to the text

00:15:14,240 --> 00:15:18,319
doesn't change then we type pair and

00:15:16,430 --> 00:15:20,180
then count doesn't change and tax

00:15:18,319 --> 00:15:22,279
changes so we have independently moving

00:15:20,180 --> 00:15:24,889
states right and that's something that's

00:15:22,279 --> 00:15:26,569
a new paradigm in the hooks model as

00:15:24,889 --> 00:15:28,279
well that you every component used to

00:15:26,569 --> 00:15:29,809
have one object for state and everything

00:15:28,279 --> 00:15:30,499
you're just forced to put every all you

00:15:29,809 --> 00:15:31,879
stay on today

00:15:30,499 --> 00:15:33,649
checked now you have independently

00:15:31,879 --> 00:15:37,009
moving states and you can be a bit more

00:15:33,649 --> 00:15:38,809
precise with that alright so and you can

00:15:37,009 --> 00:15:40,639
already start to see some of the issues

00:15:38,809 --> 00:15:42,529
we've hooked some of the rules of hooks

00:15:40,639 --> 00:15:44,509
so these are when the people introduce

00:15:42,529 --> 00:15:46,699
hooks I think one of the biggest

00:15:44,509 --> 00:15:48,319
problems with folks that people had was

00:15:46,699 --> 00:15:49,579
that you you can you have to call them

00:15:48,319 --> 00:15:52,099
unconditionally you couldn't put them

00:15:49,579 --> 00:15:54,109
inside an if or a loop or some sort of

00:15:52,099 --> 00:15:55,969
dynamic value so I just want you to

00:15:54,109 --> 00:15:59,089
imagine what happens to this if I do

00:15:55,969 --> 00:16:01,789
like math dot random more than five

00:15:59,089 --> 00:16:05,269
point five right so this gets this gets

00:16:01,789 --> 00:16:07,009
called half of the time what is the hook

00:16:05,269 --> 00:16:09,139
index value of this this is this should

00:16:07,009 --> 00:16:10,729
be one the okay next value but sometimes

00:16:09,139 --> 00:16:13,999
it's zero because this doesn't execute

00:16:10,729 --> 00:16:16,099
and so the the the state values get get

00:16:13,999 --> 00:16:17,689
off right so you're just not allowed to

00:16:16,099 --> 00:16:19,729
do that and that's what we have linters

00:16:17,689 --> 00:16:23,379
that's why you understand the rules

00:16:19,729 --> 00:16:26,389
looks just a fundamental basis okay so

00:16:23,379 --> 00:16:28,069
we're not done I'm not happy we only

00:16:26,389 --> 00:16:30,439
have the state hook we also have the

00:16:28,069 --> 00:16:32,059
effect hook the best way to model this

00:16:30,439 --> 00:16:34,639
is to just use it and then we'll

00:16:32,059 --> 00:16:38,299
backfill what that what that is so a use

00:16:34,639 --> 00:16:42,859
effects hook takes a call back or just

00:16:38,299 --> 00:16:44,599
say console.log yes calm and then it

00:16:42,859 --> 00:16:46,609
also takes an optional dependency array

00:16:44,599 --> 00:16:49,159
I'm just gonna use an empty array for

00:16:46,609 --> 00:16:50,629
now all right so so we have that API

00:16:49,159 --> 00:16:52,909
let's just let's go and implement it

00:16:50,629 --> 00:16:55,669
right so this is our module again so

00:16:52,909 --> 00:16:58,279
function use effects callback and

00:16:55,669 --> 00:17:00,289
dependency array okay so this is the

00:16:58,279 --> 00:17:02,439
hardest part of the talk bear with me

00:17:00,289 --> 00:17:06,049
but I have I know what I'm doing so

00:17:02,439 --> 00:17:08,000
we're good so so we want to have this

00:17:06,049 --> 00:17:09,679
variable we'll just have like like

00:17:08,000 --> 00:17:11,899
whether it has changed or not and just

00:17:09,679 --> 00:17:13,759
set it to true so by default we're just

00:17:11,899 --> 00:17:16,699
going to keep rerender ring and if if

00:17:13,759 --> 00:17:18,589
the dependencies have changed we're

00:17:16,699 --> 00:17:20,750
gonna call the callback right that makes

00:17:18,589 --> 00:17:22,129
sense if the dependencies have changed

00:17:20,750 --> 00:17:25,329
we're gonna call the callback so the

00:17:22,129 --> 00:17:27,409
hard part is to detect change over here

00:17:25,329 --> 00:17:29,119
in order to detect change we need to

00:17:27,409 --> 00:17:30,470
basically diff the old dependencies and

00:17:29,119 --> 00:17:32,029
a new dependencies that means we need to

00:17:30,470 --> 00:17:34,220
store and keep around the dependencies

00:17:32,029 --> 00:17:37,879
somewhere where's the good place for

00:17:34,220 --> 00:17:39,019
that turns out it's the hooks array so

00:17:37,879 --> 00:17:41,419
we're going to store it inside of the

00:17:39,019 --> 00:17:43,090
hooks array and we'll draw it out at the

00:17:41,419 --> 00:17:47,450
start of our effect

00:17:43,090 --> 00:17:49,550
the old dependencies so hooks index okay

00:17:47,450 --> 00:17:50,930
sometimes this is undefined though so so

00:17:49,550 --> 00:17:54,200
that's why we need to guard it with an

00:17:50,930 --> 00:17:56,230
if oh and by the way always increment

00:17:54,200 --> 00:17:58,550
the index at the end of talk okay so

00:17:56,230 --> 00:18:00,830
sometimes it's undefined so what we're

00:17:58,550 --> 00:18:02,810
gonna do is replace this and just go if

00:18:00,830 --> 00:18:04,300
the old dependencies do exist that means

00:18:02,810 --> 00:18:06,490
we have an old array and a new array

00:18:04,300 --> 00:18:08,930
this is the hardest part in the entire

00:18:06,490 --> 00:18:10,940
code so bear with me so we're gonna

00:18:08,930 --> 00:18:12,920
modify has changed to look at dependency

00:18:10,940 --> 00:18:15,470
array we want to have we want to look at

00:18:12,920 --> 00:18:17,800
some of them we want to do a ray dot

00:18:15,470 --> 00:18:20,450
some and that's just a lesser known

00:18:17,800 --> 00:18:22,250
array prototype method we want to look

00:18:20,450 --> 00:18:24,890
at the dependency and that index and we

00:18:22,250 --> 00:18:28,400
want to compare that dependency to that

00:18:24,890 --> 00:18:30,410
index we're gonna use object dot is so a

00:18:28,400 --> 00:18:32,030
lot of people like I don't know it

00:18:30,410 --> 00:18:34,430
internal is react to use this object is

00:18:32,030 --> 00:18:37,940
internally because not a number triple

00:18:34,430 --> 00:18:41,690
equals not a number is false object dot

00:18:37,940 --> 00:18:44,300
is not a number and not a number it's

00:18:41,690 --> 00:18:46,670
true so that's just a slightly better

00:18:44,300 --> 00:18:48,160
option so people went with that so we're

00:18:46,670 --> 00:18:52,220
just going to say object that is

00:18:48,160 --> 00:18:53,570
dependency and the old dependencies the

00:18:52,220 --> 00:18:57,470
corresponding index of that old

00:18:53,570 --> 00:18:58,790
dependency I think that's it oh and then

00:18:57,470 --> 00:19:03,380
we need to expose it in our reactor

00:18:58,790 --> 00:19:05,930
module ba-boom so what do you have now

00:19:03,380 --> 00:19:07,760
we have a component with a use effect of

00:19:05,930 --> 00:19:10,880
an empty array it start it only runs

00:19:07,760 --> 00:19:14,000
once at the start and never again in in

00:19:10,880 --> 00:19:16,220
any of the updates if I put in counts

00:19:14,000 --> 00:19:17,600
here then it depends on that counts and

00:19:16,220 --> 00:19:20,330
it updates when the count changes from

00:19:17,600 --> 00:19:24,260
one to two it runs if I change it to

00:19:20,330 --> 00:19:26,450
text from when the text updates from

00:19:24,260 --> 00:19:29,690
Apple to pair it runs and when I delete

00:19:26,450 --> 00:19:31,790
it it also runs every single time so

00:19:29,690 --> 00:19:33,710
that's the spec of use effect and it

00:19:31,790 --> 00:19:37,640
wasn't that hard right to implement all

00:19:33,710 --> 00:19:39,530
this so this is normally where this is

00:19:37,640 --> 00:19:41,120
as far as I plan to go I was like okay

00:19:39,530 --> 00:19:43,610
you've kind of proved out the hooks

00:19:41,120 --> 00:19:45,950
model but I'm very been ambitious person

00:19:43,610 --> 00:19:47,810
and I was like this kind of looks like

00:19:45,950 --> 00:19:49,520
react but is not really react everyone

00:19:47,810 --> 00:19:52,400
kind of knows that so what can I do to

00:19:49,520 --> 00:19:54,149
put this on the Dom which is a really

00:19:52,400 --> 00:19:56,369
stupid question to ask

00:19:54,149 --> 00:19:58,199
we're live coding talk but we're gonna

00:19:56,369 --> 00:19:59,759
do it we're gonna this looks like node

00:19:58,199 --> 00:20:01,229
but actually we have not been coding in

00:19:59,759 --> 00:20:03,209
node at all it's just been the console

00:20:01,229 --> 00:20:04,649
and I have it I have a browser

00:20:03,209 --> 00:20:06,989
implementation here thanks to code

00:20:04,649 --> 00:20:09,659
sandbox so let's do it

00:20:06,989 --> 00:20:12,719
actually that was probably a bad idea I

00:20:09,659 --> 00:20:16,769
have some I have some pre-prepared CSS

00:20:12,719 --> 00:20:19,259
I'm gonna import that it's not showing

00:20:16,769 --> 00:20:22,919
the autofill an immediate background

00:20:19,259 --> 00:20:24,929
very nice CSS effects for demos and then

00:20:22,919 --> 00:20:28,379
I also have some utilities that I

00:20:24,929 --> 00:20:32,389
imported so I have a create element

00:20:28,379 --> 00:20:35,789
object that I have from my utils folder

00:20:32,389 --> 00:20:38,249
and create what create element does is

00:20:35,789 --> 00:20:40,259
is what JSX compiles to by babel right

00:20:38,249 --> 00:20:42,959
hopefully everyone knows that i'm gonna

00:20:40,259 --> 00:20:45,269
expose it inside of my inside of my

00:20:42,959 --> 00:20:48,599
react module and now I can use JSX

00:20:45,269 --> 00:20:51,749
inside of my component so I'm gonna say

00:20:48,599 --> 00:20:54,479
Dave hello well let's get something to

00:20:51,749 --> 00:20:56,669
show up on the screen unfortunately

00:20:54,479 --> 00:20:58,139
we're not done oh sorry let me just

00:20:56,669 --> 00:21:00,239
comment it out unfortunately we're not

00:20:58,139 --> 00:21:02,729
done we also need a render function that

00:21:00,239 --> 00:21:06,539
actually renders to a Dom element so

00:21:02,729 --> 00:21:08,609
let's just import render okay the render

00:21:06,539 --> 00:21:10,259
API that I have written is slightly

00:21:08,609 --> 00:21:12,809
different because it memorizes the hooks

00:21:10,259 --> 00:21:15,089
so I'm just gonna delete the render

00:21:12,809 --> 00:21:17,519
function that we wrote and I'm gonna

00:21:15,089 --> 00:21:18,869
expose the render function it's a high

00:21:17,519 --> 00:21:22,829
order function it just takes the hooks

00:21:18,869 --> 00:21:24,269
and it in and it has an E and it outputs

00:21:22,829 --> 00:21:26,099
a render function that we can actually

00:21:24,269 --> 00:21:28,499
use like you wouldn't use a normal

00:21:26,099 --> 00:21:36,869
render function so let's just go like

00:21:28,499 --> 00:21:38,849
that very nice so we have JSX this is

00:21:36,869 --> 00:21:40,679
JSX and it only works because we act our

00:21:38,849 --> 00:21:41,399
create element in the Babel JSX plugin

00:21:40,679 --> 00:21:44,939
okay

00:21:41,399 --> 00:21:46,949
let's keep going so so what do we do

00:21:44,939 --> 00:21:49,859
let's actually prove out that everything

00:21:46,949 --> 00:21:55,229
works and and this is a full reax clone

00:21:49,859 --> 00:21:59,479
it's not but trust me so let's have a

00:21:55,229 --> 00:22:01,589
button i took the opportunity to alright

00:21:59,479 --> 00:22:04,229
you'll see what happens I'm gonna write

00:22:01,589 --> 00:22:06,749
a standard event handler it's gonna set

00:22:04,229 --> 00:22:07,980
counts to count plus 1 I it was the

00:22:06,749 --> 00:22:09,390
first time I ever forgot

00:22:07,980 --> 00:22:12,480
plus one and obviously it's on stage

00:22:09,390 --> 00:22:14,850
very stressful and it just says click me

00:22:12,480 --> 00:22:17,400
for example and then it's gonna have the

00:22:14,850 --> 00:22:19,440
current count yeah everyone should be

00:22:17,400 --> 00:22:20,610
very familiar with this I don't have hot

00:22:19,440 --> 00:22:22,730
reloading figure it out so you're gonna

00:22:20,610 --> 00:22:23,910
see me manually refresh a few times so

00:22:22,730 --> 00:22:25,710
yeah

00:22:23,910 --> 00:22:28,740
button showed up I have nicely some nice

00:22:25,710 --> 00:22:31,799
CSS because I cheated but if I click it

00:22:28,740 --> 00:22:34,020
it doesn't work why mmm

00:22:31,799 --> 00:22:36,059
because when remember when we were doing

00:22:34,020 --> 00:22:38,700
this we were manually rerender every

00:22:36,059 --> 00:22:39,510
time right there reactions this concept

00:22:38,700 --> 00:22:41,280
of a work loop

00:22:39,510 --> 00:22:43,169
it always loops around to check if

00:22:41,280 --> 00:22:45,450
there's work to be done so we need to

00:22:43,169 --> 00:22:48,270
simulate this work loop by manually

00:22:45,450 --> 00:22:49,980
doing it and also screw it I can write a

00:22:48,270 --> 00:22:52,340
work loop that's not too hard right it's

00:22:49,980 --> 00:22:55,559
only you know we've got like 10 minutes

00:22:52,340 --> 00:22:57,270
so let's write a work loop and the work

00:22:55,559 --> 00:22:58,620
loop is simply I'm gonna set the index

00:22:57,270 --> 00:23:00,600
to zero because every time you render

00:22:58,620 --> 00:23:01,950
you have to set the index to zero we're

00:23:00,600 --> 00:23:04,470
gonna call the render function again

00:23:01,950 --> 00:23:07,290
pass in their hooks argument and then

00:23:04,470 --> 00:23:07,919
we're gonna call the set timeout with

00:23:07,290 --> 00:23:10,350
the work loop

00:23:07,919 --> 00:23:13,440
I'm gonna set a loop of 300 milliseconds

00:23:10,350 --> 00:23:16,440
in reality it's it's of course I will

00:23:13,440 --> 00:23:19,320
call back so it's much faster but this

00:23:16,440 --> 00:23:24,390
is what you get this is what works for

00:23:19,320 --> 00:23:27,480
this demo so we have clicking we just

00:23:24,390 --> 00:23:29,190
live code at this the last point I want

00:23:27,480 --> 00:23:31,919
to make I think in this entire thing is

00:23:29,190 --> 00:23:33,809
I have custom hooks notice that we did

00:23:31,919 --> 00:23:35,730
not write any any custom hooks code

00:23:33,809 --> 00:23:38,250
right nothing here was specific to

00:23:35,730 --> 00:23:42,630
custom hooks but if I paste this

00:23:38,250 --> 00:23:45,929
pre-prepared custom hook that's I have a

00:23:42,630 --> 00:23:48,960
used dogs hook it it has it has a state

00:23:45,929 --> 00:23:52,350
it has an a which has an array it

00:23:48,960 --> 00:23:55,320
fetches an API based on the counts that

00:23:52,350 --> 00:23:57,720
like feed in count is 1 2 3 4 5 and it

00:23:55,320 --> 00:24:00,450
gives back a number of pictures a number

00:23:57,720 --> 00:24:02,700
of URLs of dog images and it just

00:24:00,450 --> 00:24:05,429
returns that image so I can use this

00:24:02,700 --> 00:24:06,870
custom hook again I didn't I didn't I

00:24:05,429 --> 00:24:10,590
didn't do any I didn't do any custom

00:24:06,870 --> 00:24:13,110
hook specific code right I can use dogs

00:24:10,590 --> 00:24:18,060
it once accounts so I pass in the count

00:24:13,110 --> 00:24:22,620
from there and I can render that into

00:24:18,060 --> 00:24:25,050
map item bog-standard stuff completely

00:24:22,620 --> 00:24:26,580
and not accessible by the way but I'm

00:24:25,050 --> 00:24:29,700
the only one accessing this code anyway

00:24:26,580 --> 00:24:32,820
so it works fine you should have an alt

00:24:29,700 --> 00:24:34,170
tag so so let me yeah all right

00:24:32,820 --> 00:24:36,630
again I haven't figured out hot

00:24:34,170 --> 00:24:45,480
reloading so but this is a fully working

00:24:36,630 --> 00:24:47,970
app so thank you thank you so then I'm

00:24:45,480 --> 00:24:49,830
like okay so the punchline what is the

00:24:47,970 --> 00:24:52,260
punch line this is the punch line I'm

00:24:49,830 --> 00:24:54,740
just gonna paste it in and I'm going to

00:24:52,260 --> 00:25:00,030
remind you of what we're talking about

00:24:54,740 --> 00:25:02,700
this is not react this is not react I

00:25:00,030 --> 00:25:05,130
have a fully dynamic app yeah I have the

00:25:02,700 --> 00:25:07,950
full API I have JSX I have custom hooks

00:25:05,130 --> 00:25:09,750
I have the render I've cloned everything

00:25:07,950 --> 00:25:13,170
that you usually use this is not react

00:25:09,750 --> 00:25:23,190
why I cloned this in 40 lines of code if

00:25:13,170 --> 00:25:25,230
you magnify it if it's in a tweet if

00:25:23,190 --> 00:25:26,880
you're if you're wondering about the the

00:25:25,230 --> 00:25:28,740
you tools folder by the way the you

00:25:26,880 --> 00:25:31,230
tools folder is only a hundred and

00:25:28,740 --> 00:25:32,760
twenty lines and it's mostly helper

00:25:31,230 --> 00:25:35,190
functions like create text element and

00:25:32,760 --> 00:25:40,920
all that that JSX needs so this is

00:25:35,190 --> 00:25:42,360
normal what is react so that's a that's

00:25:40,920 --> 00:25:44,310
my that's where I'm gonna leave you that

00:25:42,360 --> 00:25:46,800
I have homework for you I want you to go

00:25:44,310 --> 00:25:49,200
home and write react from scratch I want

00:25:46,800 --> 00:25:50,610
you to practice I want to eat we need to

00:25:49,200 --> 00:25:52,470
practice closures I want you to get good

00:25:50,610 --> 00:25:54,780
at like understanding the mental model

00:25:52,470 --> 00:25:57,660
and understand what you use react for

00:25:54,780 --> 00:26:00,240
you don't use react for this API API is

00:25:57,660 --> 00:26:03,090
really good right we can copy it view or

00:26:00,240 --> 00:26:04,620
you will copy it like spell copy n but

00:26:03,090 --> 00:26:06,630
what do you use react for what is what

00:26:04,620 --> 00:26:09,030
is the hundreds of thousands of lines of

00:26:06,630 --> 00:26:12,270
code what is that for I have my answer

00:26:09,030 --> 00:26:14,250
I'm gonna tweet all this out later but I

00:26:12,270 --> 00:26:17,100
want you to have that curiosity don't

00:26:14,250 --> 00:26:19,350
just stop at the surface and that's my

00:26:17,100 --> 00:26:22,390
talk you can see the full source at

00:26:19,350 --> 00:26:24,450
Strix that i go slash talks thank you

00:26:22,390 --> 00:26:24,450

YouTube URL: https://www.youtube.com/watch?v=KJP1E-Y-xyo


