Title: Navigating the Wild Seas of Native ES Modules by Gil Tayar | JSConf.Asia 2019
Publication date: 2019-06-21
Playlist: JSConf.Asia 2019
Description: 
	ES Module support in Node v12 is not just a refinement of the support it has in Node v10, but is rather pointing to a direction in which Node and browser ES Modules converge into one system, a system which will enable ES modules to "just work" within the native npm ecosystem, without the need for transpilers or bundlers. This talk will examine this, and show how this will be possible in the upcoming years.

From the olden days of DOS, Gil was, is, and always will be a software developer. He has co-founded WebCollage, survived the bubble collapses, and designed cloudy projects at Wix.
His current passion is figuring out how to test software, a passion which he has turned into his main job as Senior Architect at Applitools, where he develops tests for software that tests software, which is almost one meta layer too many for him.

This talk is sponsored by AppliTools - https://applitools.com


JSConf.Asia - LASALLE College of the Arts, Singapore - 14 June 2019

Source: https://2019.jsconf.asia/

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.


Intro animation "something something prisms" by Martin Schuhfuss
https://codepen.io/usefulthink/pen/WogmvW

Intro music "Know" by Matt McKegg
https://soundcloud.com/destroy-with-science/know
Captions: 
	00:00:00,000 --> 00:00:15,820
[Music]

00:00:16,279 --> 00:00:23,609
nativist modules this is what I'm gonna

00:00:18,570 --> 00:00:26,430
talk about but first first first make it

00:00:23,609 --> 00:00:32,610
work there we go

00:00:26,430 --> 00:00:34,680
so I'm I go way back to the 80s I tried

00:00:32,610 --> 00:00:38,989
the whole startup CTO thing didn't work

00:00:34,680 --> 00:00:38,989
out I'm probably gonna die developer

00:00:40,370 --> 00:00:46,620
coding till the last minute testing the

00:00:43,920 --> 00:00:50,309
code is a passion of had since like

00:00:46,620 --> 00:00:52,230
forever like 20 years I test everything

00:00:50,309 --> 00:00:55,530
I write how many people the right test

00:00:52,230 --> 00:00:59,640
for their code okay how many people

00:00:55,530 --> 00:01:01,430
write this for their CSS see if you want

00:00:59,640 --> 00:01:03,809
to learn about it come talk to me about

00:01:01,430 --> 00:01:06,930
applitools Apple it was all about visual

00:01:03,809 --> 00:01:09,840
testing we have a booth come over it'll

00:01:06,930 --> 00:01:11,880
be interesting but I'm not here to talk

00:01:09,840 --> 00:01:15,990
about visual testing I'm here to make

00:01:11,880 --> 00:01:20,280
things work okay I'll stick here but

00:01:15,990 --> 00:01:23,670
before that surprise that's me the

00:01:20,280 --> 00:01:25,680
little baby that's my dad and in the

00:01:23,670 --> 00:01:32,549
background do you know what what that is

00:01:25,680 --> 00:01:39,060
that's Singapore I was born here yeah 50

00:01:32,549 --> 00:01:40,799
years ago ooh my age so it's an amazing

00:01:39,060 --> 00:01:42,869
experience for me I got here yesterday

00:01:40,799 --> 00:01:45,810
and just you know walked around it oh my

00:01:42,869 --> 00:01:48,119
god this is this is this is home just

00:01:45,810 --> 00:01:49,439
the last one my mother and me and I

00:01:48,119 --> 00:01:52,020
don't know you probably recognize the

00:01:49,439 --> 00:01:55,939
pool it's probably very changed so yeah

00:01:52,020 --> 00:01:55,939
I'm home thank you for having me

00:01:58,100 --> 00:02:06,090
nativist modules just a reminder for

00:02:02,759 --> 00:02:08,429
those of us who haven't used es modules

00:02:06,090 --> 00:02:10,560
it's the export/import thing where if

00:02:08,429 --> 00:02:13,500
you're exporting you have a module a

00:02:10,560 --> 00:02:16,110
file and you export a function or X

00:02:13,500 --> 00:02:18,210
for the value or whatever and then in

00:02:16,110 --> 00:02:20,550
another module you import it using that

00:02:18,210 --> 00:02:21,210
syntax that is what I talk about when

00:02:20,550 --> 00:02:24,090
I'm saying

00:02:21,210 --> 00:02:26,940
es modules okay so everybody is on board

00:02:24,090 --> 00:02:28,800
most front-end developers know what that

00:02:26,940 --> 00:02:31,590
is because web packing and all those

00:02:28,800 --> 00:02:35,430
bundlers back in people lists

00:02:31,590 --> 00:02:38,010
okay what are native es modules right

00:02:35,430 --> 00:02:41,400
the way the way I define it as es code

00:02:38,010 --> 00:02:43,950
that you know just works without without

00:02:41,400 --> 00:02:46,770
any any problem and I'll explain that

00:02:43,950 --> 00:02:48,720
because back in 2015 I gave a talk it

00:02:46,770 --> 00:02:51,360
was called navigating the wild seas of

00:02:48,720 --> 00:02:54,959
es modules and I had to explain stuff

00:02:51,360 --> 00:02:56,640
like the syntax which isn't he doesn't

00:02:54,959 --> 00:02:59,370
need to be explained today default

00:02:56,640 --> 00:03:02,700
export translation the whole idea of

00:02:59,370 --> 00:03:04,470
Babel wasn't really used back then not

00:03:02,700 --> 00:03:06,690
to mention bundling the idea of taking

00:03:04,470 --> 00:03:09,120
all that JavaScript code and bundling it

00:03:06,690 --> 00:03:11,970
into one file this whole idea was very

00:03:09,120 --> 00:03:14,280
new I had to explain it and everything

00:03:11,970 --> 00:03:17,220
we take for granted today was needed to

00:03:14,280 --> 00:03:18,780
be explained and today you we all know

00:03:17,220 --> 00:03:20,730
the syntax well almost all of you

00:03:18,780 --> 00:03:23,160
translation is a given everybody who's

00:03:20,730 --> 00:03:26,340
barbel in the front end and bundling is

00:03:23,160 --> 00:03:30,450
like yeah right and and and we forgot

00:03:26,340 --> 00:03:32,670
something we forgot that between 2015

00:03:30,450 --> 00:03:34,709
and 2019 we had to go through the valley

00:03:32,670 --> 00:03:37,380
of JavaScript fatigue who remembers

00:03:34,709 --> 00:03:40,320
JavaScript fatigue there we go what's

00:03:37,380 --> 00:03:42,930
this whole you know the configurations

00:03:40,320 --> 00:03:45,060
and webpack people got confused so much

00:03:42,930 --> 00:03:47,400
about all that and for the right reasons

00:03:45,060 --> 00:03:49,620
it was difficult and still is difficult

00:03:47,400 --> 00:03:53,670
but today it's like you know we're back

00:03:49,620 --> 00:03:57,390
Bob L configuration hell nobody sees the

00:03:53,670 --> 00:04:01,739
problem anymore but it's there it's not

00:03:57,390 --> 00:04:05,910
easy and native modules is trying to go

00:04:01,739 --> 00:04:07,739
back to the simpler times yeah trying to

00:04:05,910 --> 00:04:10,560
go back to the simpler times when we can

00:04:07,739 --> 00:04:13,049
just refresh the webpage and that's it

00:04:10,560 --> 00:04:16,320
work no configuration no web pack no

00:04:13,049 --> 00:04:20,790
translation no nothing we want as much

00:04:16,320 --> 00:04:23,160
as to just work and we want them to work

00:04:20,790 --> 00:04:24,840
both in the browser and in no js' and

00:04:23,160 --> 00:04:27,330
this talk is exactly about that

00:04:24,840 --> 00:04:29,940
how the path is going to be it's not

00:04:27,330 --> 00:04:33,180
there yet and I will you will see it

00:04:29,940 --> 00:04:35,370
it's not there 2019 we're not there with

00:04:33,180 --> 00:04:37,620
s modules native ES modules but I

00:04:35,370 --> 00:04:40,919
believe somewhere in 2020 and definitely

00:04:37,620 --> 00:04:45,750
in 2021 we will all be using es modules

00:04:40,919 --> 00:04:47,879
natively so you know come I'll come back

00:04:45,750 --> 00:04:53,490
in two years hopefully and you will tell

00:04:47,879 --> 00:04:56,430
me remember you were wrong that's a plug

00:04:53,490 --> 00:04:59,550
in for my CFP in two years okay

00:04:56,430 --> 00:05:01,409
using these modules today we code with

00:04:59,550 --> 00:05:03,150
es modules we have lots of files they're

00:05:01,409 --> 00:05:05,159
all importing and exporting thing and

00:05:03,150 --> 00:05:08,789
we're basically creating a dependency

00:05:05,159 --> 00:05:10,830
graph of files and modules importing and

00:05:08,789 --> 00:05:13,860
exporting one another and we take that

00:05:10,830 --> 00:05:16,349
we use webpack or roll-up or any bundler

00:05:13,860 --> 00:05:18,090
of choice we create one big file which

00:05:16,349 --> 00:05:22,199
we just stripped source but that's what

00:05:18,090 --> 00:05:26,270
it is today no native but believe it or

00:05:22,199 --> 00:05:32,219
not today all modern browsers

00:05:26,270 --> 00:05:36,180
meaning not ie okay seriously who hates

00:05:32,219 --> 00:05:39,240
I I have to support it in my visual grid

00:05:36,180 --> 00:05:41,849
anyway all native is modules all old

00:05:39,240 --> 00:05:44,669
browsers all modern browsers use native

00:05:41,849 --> 00:05:47,699
modules you can just use them without

00:05:44,669 --> 00:05:49,440
transpiling and how do you do that first

00:05:47,699 --> 00:05:51,330
of all your scripture is just like any

00:05:49,440 --> 00:05:53,310
other but you don't scriptures a bundle

00:05:51,330 --> 00:05:55,710
your scriptures to the root of the

00:05:53,310 --> 00:05:58,169
application app J s or whatever but you

00:05:55,710 --> 00:06:00,479
add type equals module first of all was

00:05:58,169 --> 00:06:02,580
that what's that type equals module

00:06:00,479 --> 00:06:04,259
thing and the answer is it's a new

00:06:02,580 --> 00:06:09,330
concept it's actually not new it's from

00:06:04,259 --> 00:06:12,090
2015 from es6 es6 defined two kinds of

00:06:09,330 --> 00:06:14,219
codes or two kinds of interpretations of

00:06:12,090 --> 00:06:16,740
JavaScript code one is script that's the

00:06:14,219 --> 00:06:18,740
one we're used to and the others module

00:06:16,740 --> 00:06:21,360
that's the new one and I'll explain

00:06:18,740 --> 00:06:23,539
script is not allowed to use import or

00:06:21,360 --> 00:06:26,039
export that's the first thing easy and

00:06:23,539 --> 00:06:28,110
for there are little minor differences

00:06:26,039 --> 00:06:31,199
for example this the this and in the

00:06:28,110 --> 00:06:33,719
global scope is window or global or

00:06:31,199 --> 00:06:35,669
whatever global thing we have and it's

00:06:33,719 --> 00:06:39,210
non strict by default if you want it to

00:06:35,669 --> 00:06:40,710
be strict you add you strict module code

00:06:39,210 --> 00:06:43,169
is allowed to use import index

00:06:40,710 --> 00:06:46,410
obviously it's module code and this is

00:06:43,169 --> 00:06:48,539
undefined no idea why but this is true

00:06:46,410 --> 00:06:51,509
and it's always tricked by definition

00:06:48,539 --> 00:06:54,780
it's strict always so remember that

00:06:51,509 --> 00:06:56,460
script source app jeaious this is real

00:06:54,780 --> 00:06:58,530
this is from a front-end testing

00:06:56,460 --> 00:06:59,820
workshop I'm giving I'm using native es

00:06:58,530 --> 00:07:03,330
modules kids because it's the simplest

00:06:59,820 --> 00:07:06,180
and I'm doing import controller from dot

00:07:03,330 --> 00:07:09,660
slash control yes and this just works

00:07:06,180 --> 00:07:12,360
okay no bundling no nothing browsers

00:07:09,660 --> 00:07:14,789
understand that without web bank so

00:07:12,360 --> 00:07:17,580
let's let's talk about that first of all

00:07:14,789 --> 00:07:19,320
each import we have so we can see three

00:07:17,580 --> 00:07:21,509
imports here that's each of them is a

00:07:19,320 --> 00:07:25,830
separate HTTP GET they're basically

00:07:21,509 --> 00:07:27,900
getting the controller JS file and there

00:07:25,830 --> 00:07:30,539
are no bears specifiers you have to

00:07:27,900 --> 00:07:33,960
start everything either in absolute URL

00:07:30,539 --> 00:07:36,240
HTTP colon slash whatever or a relative

00:07:33,960 --> 00:07:38,880
URL dot slash whatever or dot slash

00:07:36,240 --> 00:07:41,430
folder slash folders left whatever dot J

00:07:38,880 --> 00:07:43,740
S and you have to specify the extension

00:07:41,430 --> 00:07:46,139
because that's how a web servers work

00:07:43,740 --> 00:07:47,659
you need to specify the extension okay

00:07:46,139 --> 00:07:51,419
that's the three things

00:07:47,659 --> 00:07:53,820
h/h import is an HTTP GET no bear

00:07:51,419 --> 00:07:56,250
specifiers like import load - or import

00:07:53,820 --> 00:07:58,770
whatever and you must specify the

00:07:56,250 --> 00:08:01,229
extension and the execution model is

00:07:58,770 --> 00:08:03,750
cool it's not like today it's

00:08:01,229 --> 00:08:06,360
asynchronous so all the loading and the

00:08:03,750 --> 00:08:08,400
parsing of modules is asynchronous it's

00:08:06,360 --> 00:08:10,979
happening in parallel so this is really

00:08:08,400 --> 00:08:13,139
really fast and the ink in the sync the

00:08:10,979 --> 00:08:14,909
execution once the loading and parsing

00:08:13,139 --> 00:08:16,800
is done you first load and parse

00:08:14,909 --> 00:08:18,479
everything asynchronously and then you

00:08:16,800 --> 00:08:20,960
start executing the modules that

00:08:18,479 --> 00:08:23,880
javascript and the modules bottom up

00:08:20,960 --> 00:08:26,159
today it's synchronous tomorrow once we

00:08:23,880 --> 00:08:29,820
have top-level await hopefully it will

00:08:26,159 --> 00:08:31,470
be also asynchronous but the million

00:08:29,820 --> 00:08:34,829
dollar question is the question on

00:08:31,470 --> 00:08:36,899
everyone's mind ok extensions and

00:08:34,829 --> 00:08:39,300
everything can we take our NPM waistcoat

00:08:36,899 --> 00:08:43,050
our web pack code which uses imports and

00:08:39,300 --> 00:08:44,570
just use it in the browser and the

00:08:43,050 --> 00:08:48,360
answer is nope

00:08:44,570 --> 00:08:50,400
not yet not yet remember 2021 when I'm

00:08:48,360 --> 00:08:55,270
back here

00:08:50,400 --> 00:08:57,370
hyejung extent why first of all do when

00:08:55,270 --> 00:09:00,340
we import a relative like imports

00:08:57,370 --> 00:09:04,840
something from dot /foo do we added rjs

00:09:00,340 --> 00:09:07,300
today no the the web pack or if we're

00:09:04,840 --> 00:09:10,060
using node as the dodgiest automatically

00:09:07,300 --> 00:09:12,760
but in in today's world in the browser

00:09:10,060 --> 00:09:14,800
world we need to add that no bare

00:09:12,760 --> 00:09:17,140
specifies I mean without bare specifies

00:09:14,800 --> 00:09:19,780
without importing packages like lodash

00:09:17,140 --> 00:09:22,060
and and and whatever we can't really

00:09:19,780 --> 00:09:25,470
work and the last thing is I have

00:09:22,060 --> 00:09:28,060
hundreds of es modules in my in my app

00:09:25,470 --> 00:09:30,520
HTTP getting each and every one of them

00:09:28,060 --> 00:09:34,510
that that's a killer we will talk about

00:09:30,520 --> 00:09:36,760
each one of these and how we will deal

00:09:34,510 --> 00:09:39,840
with them and part of how we will deal

00:09:36,760 --> 00:09:43,330
with them is looking to the nodejs part

00:09:39,840 --> 00:09:47,500
let's see how that works

00:09:43,330 --> 00:09:49,450
in in node Reyes native is modules in

00:09:47,500 --> 00:09:52,420
nodejs and then we'll combine everything

00:09:49,450 --> 00:09:55,600
in and you'll see the whole picture now

00:09:52,420 --> 00:09:57,850
no chest already has a really good

00:09:55,600 --> 00:10:00,490
module solution negative if you want

00:09:57,850 --> 00:10:02,260
it's called common areas and it looks

00:10:00,490 --> 00:10:03,940
like this for all you front-end

00:10:02,260 --> 00:10:07,210
developers that don't trust back-end

00:10:03,940 --> 00:10:11,530
developers I remember that don't don't

00:10:07,210 --> 00:10:17,760
go walking in alleys at night and I see

00:10:11,530 --> 00:10:21,160
her now I've been both by the way so

00:10:17,760 --> 00:10:22,810
okay so require it's it's required users

00:10:21,160 --> 00:10:24,730
require syntax it's not a syntax

00:10:22,810 --> 00:10:27,820
actually a function which imports net

00:10:24,730 --> 00:10:30,880
and DNS and node fetch and whatever very

00:10:27,820 --> 00:10:35,040
very similar the syntax is similar to es

00:10:30,880 --> 00:10:37,030
modules but it isn't okay it's it's

00:10:35,040 --> 00:10:41,320
specific to node.js and it's called

00:10:37,030 --> 00:10:43,839
common J's or CJ s in short and SM is es

00:10:41,320 --> 00:10:48,839
modules in short so yes I mean no js'

00:10:43,839 --> 00:10:52,360
has to take the existing system and

00:10:48,839 --> 00:10:55,839
slowly migrate to a totally new system

00:10:52,360 --> 00:10:59,050
which is similar but not exactly the

00:10:55,839 --> 00:11:02,940
same which is really really tough and

00:10:59,050 --> 00:11:05,280
it's a it's a it's a it's a

00:11:02,940 --> 00:11:08,600
a tug of war sorry it's a tug of war

00:11:05,280 --> 00:11:12,240
between two things between two goals

00:11:08,600 --> 00:11:14,640
first of all forward thinking I want es

00:11:12,240 --> 00:11:17,250
Eman no Jas we want es mi no J's to be

00:11:14,640 --> 00:11:20,340
compatible with tc39 with with

00:11:17,250 --> 00:11:22,440
JavaScript's specification it has to be

00:11:20,340 --> 00:11:25,590
compatible to the letter it can't just

00:11:22,440 --> 00:11:28,890
do its own thing and the other thing it

00:11:25,590 --> 00:11:33,090
needs to be compatible with browser is

00:11:28,890 --> 00:11:36,750
modules why because the the modules

00:11:33,090 --> 00:11:39,060
working group in node and wants the

00:11:36,750 --> 00:11:41,400
whole thing to work together once code

00:11:39,060 --> 00:11:44,040
that is universal that works both in the

00:11:41,400 --> 00:11:46,800
browser and in nodejs and works

00:11:44,040 --> 00:11:48,930
seamlessly together so that is one of

00:11:46,800 --> 00:11:51,630
the goals of nodejs work modules working

00:11:48,930 --> 00:11:55,710
group not ignore what is happening in

00:11:51,630 --> 00:11:57,900
the browser unfortunately we need to go

00:11:55,710 --> 00:12:01,710
the other way we want to work well with

00:11:57,900 --> 00:12:04,620
common GS okay and we want to be

00:12:01,710 --> 00:12:07,350
somewhat compatible with the web pack

00:12:04,620 --> 00:12:10,590
way of esm as we've seen web pack and

00:12:07,350 --> 00:12:12,930
browser ism are not the same we can't

00:12:10,590 --> 00:12:15,570
move from one to another but we want to

00:12:12,930 --> 00:12:17,700
be somewhat compatible with them so that

00:12:15,570 --> 00:12:20,130
the migration process works

00:12:17,700 --> 00:12:22,350
okay so we have forward thinking goals

00:12:20,130 --> 00:12:24,090
and backward compatibility goals and a

00:12:22,350 --> 00:12:28,080
lot of times there's a conflict between

00:12:24,090 --> 00:12:31,590
them and we have to choose and it's a

00:12:28,080 --> 00:12:34,920
discussion it's very very controversial

00:12:31,590 --> 00:12:37,560
but usually what is chosen is the

00:12:34,920 --> 00:12:40,560
forward thinking goes this will hamper

00:12:37,560 --> 00:12:42,510
migration probably but in the end it

00:12:40,560 --> 00:12:44,460
will I think it will benefit everybody

00:12:42,510 --> 00:12:49,080
so let's see what they came up with you

00:12:44,460 --> 00:12:51,240
know in no.12 first of all not like

00:12:49,080 --> 00:12:53,250
require required does the same thing as

00:12:51,240 --> 00:12:56,100
web pack you don't have to specify the

00:12:53,250 --> 00:12:58,710
extension so this won't work import

00:12:56,100 --> 00:13:00,960
something from somewhere won't work this

00:12:58,710 --> 00:13:09,210
is better you must specify the extension

00:13:00,960 --> 00:13:11,310
dot Jas but it's not yes it's MJS or as

00:13:09,210 --> 00:13:13,940
I like to call it the michael jackson

00:13:11,310 --> 00:13:13,940
script

00:13:14,440 --> 00:13:19,880
yeah

00:13:16,060 --> 00:13:22,700
so yeah it's actually module JavaScript

00:13:19,880 --> 00:13:26,660
or or whatever jsm was was already taken

00:13:22,700 --> 00:13:30,440
so MJS is the new thing first of all why

00:13:26,660 --> 00:13:32,390
extensions my extensions obviously

00:13:30,440 --> 00:13:34,610
browser compatibility remember the goal

00:13:32,390 --> 00:13:36,649
is browser compatibility if browsers say

00:13:34,610 --> 00:13:40,550
that we need an extension then we're

00:13:36,649 --> 00:13:43,730
going that way in node.js but why it dot

00:13:40,550 --> 00:13:47,390
MJS and not dodge yes because an ESM

00:13:43,730 --> 00:13:50,209
file is not a script it's a module and

00:13:47,390 --> 00:13:52,610
it has different way of thinking about

00:13:50,209 --> 00:13:56,000
the code in there and if an editor tool

00:13:52,610 --> 00:13:58,430
for example wants to yes let's say yes

00:13:56,000 --> 00:14:00,470
lint what's this lint the file it needs

00:13:58,430 --> 00:14:04,220
to know that this is a margin this is

00:14:00,470 --> 00:14:08,089
module code and not script code so they

00:14:04,220 --> 00:14:10,760
decided on a specific extension there

00:14:08,089 --> 00:14:15,370
are other reasons but in essence that is

00:14:10,760 --> 00:14:17,959
the point this was like they're idiots

00:14:15,370 --> 00:14:20,089
back there and in the modules working

00:14:17,959 --> 00:14:22,760
group this caused a huge uproar and we

00:14:20,089 --> 00:14:25,579
understand that developers love their

00:14:22,760 --> 00:14:27,770
JavaScript extension and I understand

00:14:25,579 --> 00:14:29,600
there's a there's you know it's just an

00:14:27,770 --> 00:14:35,079
extension but there's an emotion feeling

00:14:29,600 --> 00:14:37,940
to dot J s I really understand that and

00:14:35,079 --> 00:14:40,670
so they came up in no.12 with a solution

00:14:37,940 --> 00:14:43,760
which is type equals module so if you

00:14:40,670 --> 00:14:47,270
have a package.json with type module in

00:14:43,760 --> 00:14:50,630
it a field a property then all the ESM

00:14:47,270 --> 00:14:53,240
all that package the j s files will be

00:14:50,630 --> 00:14:55,220
ESM but then they will be only a same

00:14:53,240 --> 00:14:57,950
and not common J's so you can switch

00:14:55,220 --> 00:15:01,610
between the two you can say I want this

00:14:57,950 --> 00:15:05,380
to be a regular package common J s J's

00:15:01,610 --> 00:15:09,529
file is a common J's or I want it to be

00:15:05,380 --> 00:15:12,980
a SM in all J's or ASM so you have this

00:15:09,529 --> 00:15:16,160
dot MJS is always yeah yes M is always

00:15:12,980 --> 00:15:20,029
yes M code dot CJ s is always CJ s and

00:15:16,160 --> 00:15:22,730
that j s is by default common j s but if

00:15:20,029 --> 00:15:26,480
we have type module then it's es m weird

00:15:22,730 --> 00:15:30,800
but it's you know like compromise No

00:15:26,480 --> 00:15:33,800
but is really happy which is good we in

00:15:30,800 --> 00:15:35,149
in in in common jazz we can NN webpack

00:15:33,800 --> 00:15:38,029
we can do something like import

00:15:35,149 --> 00:15:42,529
something and specify a directory ok

00:15:38,029 --> 00:15:44,630
this doesn't work anymore well if this

00:15:42,529 --> 00:15:47,899
doesn't work anymore if we have dot

00:15:44,630 --> 00:15:50,449
index jsr index dot MJS that doesn't

00:15:47,899 --> 00:15:53,209
work anymore it works only if some deer

00:15:50,449 --> 00:15:56,959
has a package.json again browser

00:15:53,209 --> 00:15:59,240
compatibility and this is bear

00:15:56,959 --> 00:16:02,360
specifiers import something from low -

00:15:59,240 --> 00:16:05,360
or from whatever package it is obviously

00:16:02,360 --> 00:16:09,110
this works I mean if that didn't work

00:16:05,360 --> 00:16:13,820
no no js' program would work anywhere

00:16:09,110 --> 00:16:15,889
but you can't use the index J s thing in

00:16:13,820 --> 00:16:18,350
node module so package has to have a

00:16:15,889 --> 00:16:22,459
package.json with a main entry point and

00:16:18,350 --> 00:16:24,529
you can't rely on index dot Reyes but

00:16:22,459 --> 00:16:28,790
you're saying why do we need this whole

00:16:24,529 --> 00:16:31,699
thing because bear specifiers are anyway

00:16:28,790 --> 00:16:34,490
not backward-compatible it doesn't

00:16:31,699 --> 00:16:38,149
really matter whatever we choose in

00:16:34,490 --> 00:16:43,430
nodejs because there are no bear

00:16:38,149 --> 00:16:45,649
specifiers in in in the browser which

00:16:43,430 --> 00:16:47,209
brings us to yes they're not specified

00:16:45,649 --> 00:16:49,160
there yet they're currently illegal if

00:16:47,209 --> 00:16:51,589
you try to put a bear specifier in a

00:16:49,160 --> 00:16:55,639
browser code then it will blow up and

00:16:51,589 --> 00:17:00,800
give an error but and it works in nodejs

00:16:55,639 --> 00:17:05,030
but this was an opportunity finally for

00:17:00,800 --> 00:17:08,059
the node people to start influencing the

00:17:05,030 --> 00:17:10,939
browser people okay for note saying look

00:17:08,059 --> 00:17:13,309
we understand bear specifiers we know

00:17:10,939 --> 00:17:16,160
how that ecosystem works let's work with

00:17:13,309 --> 00:17:18,049
you people and define something that

00:17:16,160 --> 00:17:20,630
will make bear specifiers work in the

00:17:18,049 --> 00:17:23,919
browser and be node.js compatible and

00:17:20,630 --> 00:17:28,610
what they make what they came up with

00:17:23,919 --> 00:17:31,640
was import Maps import maps are needed

00:17:28,610 --> 00:17:34,160
only by the browser no js' doesn't need

00:17:31,640 --> 00:17:36,740
them yet but they're needed only brought

00:17:34,160 --> 00:17:38,990
by the browser no js' if it gets a bear

00:17:36,740 --> 00:17:40,460
specifier it knows to look in the node

00:17:38,990 --> 00:17:42,470
modules folder

00:17:40,460 --> 00:17:46,220
in the node modules directory but

00:17:42,470 --> 00:17:48,830
browsers don't so what you do is and

00:17:46,220 --> 00:17:50,600
let's look at the right side we have a

00:17:48,830 --> 00:17:52,820
script type equals module and it's

00:17:50,600 --> 00:17:56,330
importing lodash for example that's a

00:17:52,820 --> 00:17:58,880
bare specifier to for this to work we

00:17:56,330 --> 00:18:03,230
need another script type equals import

00:17:58,880 --> 00:18:05,060
map which specifies all the imports so

00:18:03,230 --> 00:18:07,610
for example you have import moment and

00:18:05,060 --> 00:18:10,480
import load - and the import load that

00:18:07,610 --> 00:18:14,180
says if we're importing a bear specifier

00:18:10,480 --> 00:18:17,510
then that bear specifier that will be

00:18:14,180 --> 00:18:20,420
the file for that bear specifier so the

00:18:17,510 --> 00:18:25,310
browser looks into that conversion map

00:18:20,420 --> 00:18:28,670
and knows where which HTTP GET to do to

00:18:25,310 --> 00:18:31,100
bring lodash in it's actually makes

00:18:28,670 --> 00:18:32,870
total sense and very easy there's a lot

00:18:31,100 --> 00:18:35,000
of details around it you can go and look

00:18:32,870 --> 00:18:37,400
import maps on the web it's really

00:18:35,000 --> 00:18:39,350
interesting and really cool it's

00:18:37,400 --> 00:18:41,780
starting to become implemented in Chrome

00:18:39,350 --> 00:18:44,090
hopefully other browsers will catch up

00:18:41,780 --> 00:18:47,030
and we will have a standard and it is a

00:18:44,090 --> 00:18:49,940
path to universal es modules modules

00:18:47,030 --> 00:18:55,010
that work without any change both in

00:18:49,940 --> 00:18:58,100
node and the browser and web pack and

00:18:55,010 --> 00:19:00,530
how will it work in node the idea is or

00:18:58,100 --> 00:19:04,400
or for browsers the idea is once you npm

00:19:00,530 --> 00:19:06,980
install or yarn add your module that npm

00:19:04,400 --> 00:19:09,530
install or yarn add will modify an

00:19:06,980 --> 00:19:12,650
import map in the root of your in the

00:19:09,530 --> 00:19:14,930
root in the root of your package it will

00:19:12,650 --> 00:19:16,910
modify the import map so that browsers

00:19:14,930 --> 00:19:19,940
if your script source to that import map

00:19:16,910 --> 00:19:23,270
will know exactly where things are so

00:19:19,940 --> 00:19:26,570
you will npm install your packages and

00:19:23,270 --> 00:19:28,940
then just import them there using native

00:19:26,570 --> 00:19:31,400
syntax and then know where pack is

00:19:28,940 --> 00:19:33,650
needed you will just refresh change the

00:19:31,400 --> 00:19:37,340
file refresh the page or do hot module

00:19:33,650 --> 00:19:40,130
reloading and boom everything works no

00:19:37,340 --> 00:19:41,810
we're back know bundlers whatsoever by

00:19:40,130 --> 00:19:43,220
the way the npm install things that

00:19:41,810 --> 00:19:49,220
updates the import map that's a

00:19:43,220 --> 00:19:52,190
speculation of mine so coffin here so as

00:19:49,220 --> 00:19:53,840
we've seen we get used universal native

00:19:52,190 --> 00:19:55,429
is modules mean

00:19:53,840 --> 00:19:58,400
knowledge eels that were both in the

00:19:55,429 --> 00:20:02,150
browser and in npm LAN nodejs etc

00:19:58,400 --> 00:20:04,400
without any change and this is the most

00:20:02,150 --> 00:20:05,960
important thing import Maps will allow

00:20:04,400 --> 00:20:08,360
no Jason browser J's browser

00:20:05,960 --> 00:20:14,029
compatibility with no translation or

00:20:08,360 --> 00:20:16,000
bundling so let's review what about the

00:20:14,029 --> 00:20:18,980
problem of extensions for module files

00:20:16,000 --> 00:20:22,549
node forces you to write extension so

00:20:18,980 --> 00:20:24,140
the everybody is basically saying when

00:20:22,549 --> 00:20:26,570
you're importing something or when

00:20:24,140 --> 00:20:28,970
you're requiring something start adding

00:20:26,570 --> 00:20:31,010
extensions to that thing because the

00:20:28,970 --> 00:20:33,350
world is migrating to having the

00:20:31,010 --> 00:20:35,510
extension in the import it may be a bit

00:20:33,350 --> 00:20:37,610
ugly but that is the reality

00:20:35,510 --> 00:20:39,860
what about bear specifiers bear

00:20:37,610 --> 00:20:42,080
specifiers which was a problem now we

00:20:39,860 --> 00:20:44,929
have we will have import maps in a year

00:20:42,080 --> 00:20:48,020
or two and we've solved that problem

00:20:44,929 --> 00:20:50,779
what about HTTP getting every one of my

00:20:48,020 --> 00:20:53,299
hundred modules is that solved nope and

00:20:50,779 --> 00:20:56,480
the answer here that I call it the black

00:20:53,299 --> 00:20:58,760
hole problem because I'm certain a lot

00:20:56,480 --> 00:21:01,190
of you have seen this the heaviest

00:20:58,760 --> 00:21:06,350
object in the universe and some of you

00:21:01,190 --> 00:21:11,270
haven't that's nice yeah node modules is

00:21:06,350 --> 00:21:14,480
huge lots of modules first of all it's

00:21:11,270 --> 00:21:15,830
not that big because we want the the not

00:21:14,480 --> 00:21:17,809
the dev dependency we want the

00:21:15,830 --> 00:21:19,909
production dependencies most of the

00:21:17,809 --> 00:21:21,980
hugeness in node modules is having

00:21:19,909 --> 00:21:23,870
typescript bubble web pack is lint and

00:21:21,980 --> 00:21:26,630
all those development tools inside node

00:21:23,870 --> 00:21:29,659
modules it's like in Java every project

00:21:26,630 --> 00:21:32,240
has a Java compiler and Eclipse and

00:21:29,659 --> 00:21:34,370
whatever development tools are inside

00:21:32,240 --> 00:21:36,740
this is the situation in in in

00:21:34,370 --> 00:21:38,870
JavaScript today so it's not that big

00:21:36,740 --> 00:21:41,270
but it's still too big for production

00:21:38,870 --> 00:21:43,520
it's still like tens of modules hundreds

00:21:41,270 --> 00:21:45,559
of more of modules too big for

00:21:43,520 --> 00:21:49,789
production if I need to HTTP get all of

00:21:45,559 --> 00:21:52,730
them that's a problem now I don't have a

00:21:49,789 --> 00:21:55,190
lot of time so I'm not gonna you know

00:21:52,730 --> 00:21:58,250
expand on this the solution people

00:21:55,190 --> 00:22:00,500
thought was gonna happen was HTTP 2

00:21:58,250 --> 00:22:03,260
which allows us to bring a lot of files

00:22:00,500 --> 00:22:07,670
at were at the same time and for the

00:22:03,260 --> 00:22:11,710
server to push all these files to the

00:22:07,670 --> 00:22:11,710
even before the browser requests them

00:22:13,660 --> 00:22:18,559
yeah that's better

00:22:16,460 --> 00:22:20,330
but it's not good enough there's an

00:22:18,559 --> 00:22:21,920
article on that I don't want to I don't

00:22:20,330 --> 00:22:24,290
want to talk about that

00:22:21,920 --> 00:22:26,570
it's it's it's like I do want to talk

00:22:24,290 --> 00:22:29,000
about that but I'm out of time and the

00:22:26,570 --> 00:22:31,840
other thing and I think the real answer

00:22:29,000 --> 00:22:35,510
is what is called the web packages

00:22:31,840 --> 00:22:37,280
solution the web packages is a upcoming

00:22:35,510 --> 00:22:40,610
standard which enables us to bundle

00:22:37,280 --> 00:22:42,280
files as they are as HTTP resources and

00:22:40,610 --> 00:22:45,320
give them to the browser in one time

00:22:42,280 --> 00:22:49,870
fascinating a subject again I don't have

00:22:45,320 --> 00:22:49,870
time so wrap up

00:22:50,299 --> 00:22:57,460
browsers support only relative paths and

00:22:54,080 --> 00:22:57,460
it's lunch I know I know

00:22:57,470 --> 00:23:02,299
node support for relative path is

00:22:59,780 --> 00:23:05,720
intentionally browser compatible so it

00:23:02,299 --> 00:23:08,750
uses extension it uses MJS but if you

00:23:05,720 --> 00:23:12,110
really love your Jas use type module in

00:23:08,750 --> 00:23:15,049
the package.json bear specifiers are

00:23:12,110 --> 00:23:16,850
there a node support for bear specifiers

00:23:15,049 --> 00:23:19,549
in browser will be coming hopefully

00:23:16,850 --> 00:23:22,130
using the import map proposal and the

00:23:19,549 --> 00:23:23,929
black hole problem is a problem now but

00:23:22,130 --> 00:23:26,660
it probably will be solved by technology

00:23:23,929 --> 00:23:29,200
sister HTTP 2 and web packages so the

00:23:26,660 --> 00:23:31,480
future is very bright for its modules

00:23:29,200 --> 00:23:34,280
node and browser interoperability

00:23:31,480 --> 00:23:36,559
without the need for bundlers and

00:23:34,280 --> 00:23:39,940
transpilers simpler times people are

00:23:36,559 --> 00:23:44,729
coming thank you very much

00:23:39,940 --> 00:23:44,729

YouTube URL: https://www.youtube.com/watch?v=Zyoztl_7l7g


