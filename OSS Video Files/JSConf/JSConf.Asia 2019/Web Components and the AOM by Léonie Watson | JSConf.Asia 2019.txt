Title: Web Components and the AOM by Léonie Watson | JSConf.Asia 2019
Publication date: 2019-06-21
Playlist: JSConf.Asia 2019
Description: 
	We can use Web Components to create reusable solutions. With Custom Elements, the Shadow DOM, HTML Templates, the Web Speech API, and a little ARIA, we can create a progressively more advanced solution for anyone who wants to listen to content; and when the Accessibility Object Model (AOM) lands, we'll be able to do even more.

Léonie is Director of TetraLogical; a member of the W3C Advisory Board; co-Chair of the W3C Web Platform Working Group; and a member of the Accelerated Mobile Pages (AMP) Advisory Committee. Amongst other things, Léonie is co-organiser of the Inclusive Design 24 (#id24) conference; co-author of the Inclusive Design Principles; and mentor to young people interested in the fields of accessibility and inclusive design.


JSConf.Asia - LASALLE College of the Arts, Singapore - 14 June 2019

Source: https://2019.jsconf.asia/

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.


Intro animation "something something prisms" by Martin Schuhfuss
https://codepen.io/usefulthink/pen/WogmvW

Intro music "Know" by Matt McKegg
https://soundcloud.com/destroy-with-science/know
Captions: 
	00:00:00,000 --> 00:00:15,820
[Music]

00:00:16,850 --> 00:00:23,850
selamat pagi

00:00:18,210 --> 00:00:26,910
anyhow hello today I would like to talk

00:00:23,850 --> 00:00:29,789
to you about web components and an

00:00:26,910 --> 00:00:34,320
experimental JavaScript API called the

00:00:29,789 --> 00:00:36,149
accessibility object model or a om when

00:00:34,320 --> 00:00:38,610
we load some HTML into the browser

00:00:36,149 --> 00:00:41,550
several things happen more or less at

00:00:38,610 --> 00:00:44,430
the same time the HTML gets translated

00:00:41,550 --> 00:00:46,680
into the Dom tree it also gets

00:00:44,430 --> 00:00:49,860
translated into the accessibility tree

00:00:46,680 --> 00:00:52,170
and finally it gets translated into the

00:00:49,860 --> 00:00:55,739
user interface the part that we can see

00:00:52,170 --> 00:00:58,410
and we can interact with so if we take a

00:00:55,739 --> 00:01:00,300
button element our HTML is very very

00:00:58,410 --> 00:01:02,309
simple just open and close the button

00:01:00,300 --> 00:01:05,339
elements with some text content in the

00:01:02,309 --> 00:01:07,229
middle our Dom looks exactly the same we

00:01:05,339 --> 00:01:09,229
see that element is a node in the Dom

00:01:07,229 --> 00:01:11,460
tree and the text leaf in the middle

00:01:09,229 --> 00:01:13,770
when we look at the accessibility tree

00:01:11,460 --> 00:01:15,840
we get more information about this node

00:01:13,770 --> 00:01:17,520
and the node in the accessibility tree

00:01:15,840 --> 00:01:20,280
for this button element says that it has

00:01:17,520 --> 00:01:22,439
a role of button but its accessible name

00:01:20,280 --> 00:01:24,420
is play that's the text inside the

00:01:22,439 --> 00:01:26,850
button element and that it's state is

00:01:24,420 --> 00:01:29,159
focusable so if you use a keyboard and

00:01:26,850 --> 00:01:31,079
not a mouse or trackpad you can use the

00:01:29,159 --> 00:01:34,799
tab key to focus on the button and

00:01:31,079 --> 00:01:36,750
interact with it our UI then presents a

00:01:34,799 --> 00:01:38,549
button on the screen that we can click

00:01:36,750 --> 00:01:41,400
or interact with with a keyboard or

00:01:38,549 --> 00:01:44,299
touchpad and with a bit of styling it

00:01:41,400 --> 00:01:47,040
looks hopefully reasonably presentable

00:01:44,299 --> 00:01:49,649
so if we were to try and create a button

00:01:47,040 --> 00:01:51,509
elements using a web component there are

00:01:49,649 --> 00:01:54,149
a couple of ways we could do this we

00:01:51,509 --> 00:01:57,180
could use a customized custom element

00:01:54,149 --> 00:01:59,549
this takes the HTML button element and

00:01:57,180 --> 00:02:01,649
extends it so it means that when we set

00:01:59,549 --> 00:02:03,540
up our web component our constructor is

00:02:01,649 --> 00:02:05,820
really simple we just call super because

00:02:03,540 --> 00:02:07,829
that's good practice in web components

00:02:05,820 --> 00:02:09,599
and we don't need to do anything else

00:02:07,829 --> 00:02:12,660
apart from give our custom element a

00:02:09,599 --> 00:02:13,620
name in this case custom dash button if

00:02:12,660 --> 00:02:15,690
you're not familiar we

00:02:13,620 --> 00:02:17,790
web components and custom elements they

00:02:15,690 --> 00:02:19,319
must always have a dash in their name

00:02:17,790 --> 00:02:22,680
and this is just to help the browser

00:02:19,319 --> 00:02:25,409
separate a native HTML element from the

00:02:22,680 --> 00:02:27,030
HTML spec from one that we've created as

00:02:25,409 --> 00:02:30,239
developers through the custom elements

00:02:27,030 --> 00:02:32,010
API our connected callback is also

00:02:30,239 --> 00:02:33,989
really simple we don't need to do very

00:02:32,010 --> 00:02:37,110
much at all we just need to add some

00:02:33,989 --> 00:02:40,019
click functionality to make button work

00:02:37,110 --> 00:02:43,379
and that's pretty much all there is to

00:02:40,019 --> 00:02:45,959
it our HTML however looks a little bit

00:02:43,379 --> 00:02:48,660
ugly we use the button elements as we

00:02:45,959 --> 00:02:51,500
would in standard HTML but we add the is

00:02:48,660 --> 00:02:54,840
attribute to it so we say button is

00:02:51,500 --> 00:02:57,269
custom button so our HTML has already

00:02:54,840 --> 00:03:00,000
grown another attribute which is not too

00:02:57,269 --> 00:03:03,390
terrible but it's not as clean in code

00:03:00,000 --> 00:03:05,129
terms as we might like it to be Dom

00:03:03,390 --> 00:03:07,230
looks pretty much exactly the same

00:03:05,129 --> 00:03:10,590
nothing much changes in that translation

00:03:07,230 --> 00:03:12,780
and accessibility tree also looks pretty

00:03:10,590 --> 00:03:14,579
much the same it still says it's the

00:03:12,780 --> 00:03:16,379
thing with a roll of button the text is

00:03:14,579 --> 00:03:18,720
still its accessible name and it's still

00:03:16,379 --> 00:03:21,389
focusable so effectively what we've done

00:03:18,720 --> 00:03:24,690
is just recreate the button element as a

00:03:21,389 --> 00:03:26,459
custom element and we can see this work

00:03:24,690 --> 00:03:28,530
pretty much like you'd expect a button

00:03:26,459 --> 00:03:31,400
to work only this time we'll hear a

00:03:28,530 --> 00:03:34,799
screen reader announce the button to

00:03:31,400 --> 00:03:36,419
play button and the screen reader picks

00:03:34,799 --> 00:03:38,459
up that information from the

00:03:36,419 --> 00:03:40,919
accessibility tree it recognizes the

00:03:38,459 --> 00:03:42,870
accessible name play and it recognizes

00:03:40,919 --> 00:03:45,750
it that it's a button and tells the user

00:03:42,870 --> 00:03:48,060
that information there's a problem

00:03:45,750 --> 00:03:50,010
though apart from the fact that the HTML

00:03:48,060 --> 00:03:52,919
looks a little bit less clean than we

00:03:50,010 --> 00:03:54,389
want it to be customized custom elements

00:03:52,919 --> 00:03:57,120
are not particularly well supported

00:03:54,389 --> 00:04:00,120
they're not supported in WebKit Apple is

00:03:57,120 --> 00:04:02,310
pretty firmly opposed to introducing

00:04:00,120 --> 00:04:04,919
support for customized custom elements

00:04:02,310 --> 00:04:07,980
so we might have to turn our attention

00:04:04,919 --> 00:04:10,379
to autonomous custom elements now an

00:04:07,980 --> 00:04:12,510
autonomous custom element doesn't extend

00:04:10,379 --> 00:04:14,579
an existing HTML element so we can't

00:04:12,510 --> 00:04:16,169
inherit all the good behavior from say

00:04:14,579 --> 00:04:18,750
button that we just did with the

00:04:16,169 --> 00:04:20,549
customized element instead we have to

00:04:18,750 --> 00:04:22,079
start pretty much from scratch and that

00:04:20,549 --> 00:04:24,479
means we've got to do all the work that

00:04:22,079 --> 00:04:25,200
the browser does for us normally for

00:04:24,479 --> 00:04:27,600
ourselves

00:04:25,200 --> 00:04:30,150
so in constructor

00:04:27,600 --> 00:04:31,860
need to set things up a little bit

00:04:30,150 --> 00:04:34,170
differently you'll notice that the the

00:04:31,860 --> 00:04:35,760
definition is slightly different this

00:04:34,170 --> 00:04:37,650
time I'm going to create a toggle button

00:04:35,760 --> 00:04:39,720
as well you may have noticed from the

00:04:37,650 --> 00:04:42,060
video we just played that that button

00:04:39,720 --> 00:04:43,440
looked different when it was pressed but

00:04:42,060 --> 00:04:45,570
the screen reader didn't pick up on that

00:04:43,440 --> 00:04:47,490
information so we're gonna set about

00:04:45,570 --> 00:04:49,710
creating that toggle button so the

00:04:47,490 --> 00:04:52,080
definition has changed to be a toggle -

00:04:49,710 --> 00:04:53,640
button this time and if we look at the

00:04:52,080 --> 00:04:56,730
connected callback there's an awful lot

00:04:53,640 --> 00:04:59,520
more going on inside it we need to set

00:04:56,730 --> 00:05:00,810
the role just using setattribute so

00:04:59,520 --> 00:05:02,910
that's the bit that fills in the

00:05:00,810 --> 00:05:04,890
accessibility role we need to set

00:05:02,910 --> 00:05:06,720
tabindex to zero that's the bit that

00:05:04,890 --> 00:05:09,810
will make our custom element focusable

00:05:06,720 --> 00:05:11,970
with the keyboard and we add in an aria

00:05:09,810 --> 00:05:14,820
attribute aria-pressed and we set it

00:05:11,970 --> 00:05:17,190
initially to false this is the attribute

00:05:14,820 --> 00:05:19,140
that will tell screen readers and inform

00:05:17,190 --> 00:05:20,880
the accessibility tree that this is a

00:05:19,140 --> 00:05:23,370
different kind of button it's one that

00:05:20,880 --> 00:05:26,790
can be turned on or off and we'll see

00:05:23,370 --> 00:05:31,680
how that develops we have a function

00:05:26,790 --> 00:05:33,540
into the click and keyboard event

00:05:31,680 --> 00:05:35,640
handlers and we're just gonna switch the

00:05:33,540 --> 00:05:38,430
status of the aria-pressed attribute

00:05:35,640 --> 00:05:40,200
over so when someone uses the keyboard

00:05:38,430 --> 00:05:42,870
or the mouse to interact with the button

00:05:40,200 --> 00:05:44,910
will flip the value to true while it's

00:05:42,870 --> 00:05:46,740
pressed and flip it back again to false

00:05:44,910 --> 00:05:48,060
when it's not pressed and this will

00:05:46,740 --> 00:05:51,330
change the accessibility state

00:05:48,060 --> 00:05:54,000
information in the accessibility tree so

00:05:51,330 --> 00:05:56,430
our HTML looks a lot more simple we just

00:05:54,000 --> 00:05:58,110
open and close our toggle - button

00:05:56,430 --> 00:06:01,260
elements and we still put the text on

00:05:58,110 --> 00:06:03,720
the inside our Dom however it starts to

00:06:01,260 --> 00:06:05,580
look a little bit messy we see all the

00:06:03,720 --> 00:06:07,290
attributes we've just set inside the

00:06:05,580 --> 00:06:09,810
custom elements that have indexed the

00:06:07,290 --> 00:06:12,060
role the aria-pressed they actually leak

00:06:09,810 --> 00:06:14,430
out from the custom element into the Dom

00:06:12,060 --> 00:06:17,310
so unfortunately here things start to

00:06:14,430 --> 00:06:19,080
get a bit more messy looking our

00:06:17,310 --> 00:06:20,850
accessibility tree has also changed a

00:06:19,080 --> 00:06:22,980
little bit the type of the button the

00:06:20,850 --> 00:06:24,960
role of the button is now toggle button

00:06:22,980 --> 00:06:27,720
in some browsers and some accessibility

00:06:24,960 --> 00:06:29,580
API is it's known as a push button so

00:06:27,720 --> 00:06:31,680
this is just a different type of button

00:06:29,580 --> 00:06:34,890
everything else is pretty much the same

00:06:31,680 --> 00:06:36,240
but the state now also has a recognition

00:06:34,890 --> 00:06:39,210
of the fact that this button can be

00:06:36,240 --> 00:06:41,129
pressed or not pressed so there is more

00:06:39,210 --> 00:06:42,539
named States and roll

00:06:41,129 --> 00:06:45,509
information available in the

00:06:42,539 --> 00:06:46,830
accessibility tree in the browser when a

00:06:45,509 --> 00:06:48,659
screen reader or another assistive

00:06:46,830 --> 00:06:50,969
technology queries that information from

00:06:48,659 --> 00:06:54,179
the browser the experience for the user

00:06:50,969 --> 00:06:58,849
changes quite dramatically play toggle

00:06:54,179 --> 00:07:01,349
button not pressed pressed not pressed

00:06:58,849 --> 00:07:02,819
so we now have a custom element that is

00:07:01,349 --> 00:07:04,649
a toggle button it has all the

00:07:02,819 --> 00:07:06,869
accessibility characteristics that we

00:07:04,649 --> 00:07:09,029
need to inform something like a screen

00:07:06,869 --> 00:07:10,979
reader that it's a toggle button and the

00:07:09,029 --> 00:07:13,080
user now gets to understand when that

00:07:10,979 --> 00:07:15,449
button is pressed and when it's not so

00:07:13,080 --> 00:07:17,459
the experience is a lot better for

00:07:15,449 --> 00:07:20,610
someone who can't see the visual state

00:07:17,459 --> 00:07:22,649
of the button changing here's where we

00:07:20,610 --> 00:07:26,219
come to that experimental JavaScript API

00:07:22,649 --> 00:07:28,800
I mentioned the AOM is still relatively

00:07:26,219 --> 00:07:31,439
new it's being developed in the web

00:07:28,800 --> 00:07:34,829
platform incubator community group ycg

00:07:31,439 --> 00:07:38,639
at the w3c and it's being worked on by

00:07:34,829 --> 00:07:42,179
people from Apple Mozilla and Google and

00:07:38,639 --> 00:07:44,639
it's a JavaScript API that will let us

00:07:42,179 --> 00:07:46,529
get involved in that relationship that I

00:07:44,639 --> 00:07:48,569
mentioned in the very first slide that

00:07:46,529 --> 00:07:52,139
until now has only happened within the

00:07:48,569 --> 00:07:54,689
browser so up till now the accessibility

00:07:52,139 --> 00:07:56,789
tree has only ever been created by the

00:07:54,689 --> 00:07:59,099
browser and the only thing that has

00:07:56,789 --> 00:08:01,110
access to that accessibility tree other

00:07:59,099 --> 00:08:03,539
than the browser our assistive

00:08:01,110 --> 00:08:05,189
technologies like screen readers for the

00:08:03,539 --> 00:08:08,099
first time now as developers through the

00:08:05,189 --> 00:08:10,379
AOM JavaScript API we're about to get

00:08:08,099 --> 00:08:11,459
access to that tree ourselves and that

00:08:10,379 --> 00:08:14,219
opens up a lot of different

00:08:11,459 --> 00:08:15,479
possibilities and also a few challenges

00:08:14,219 --> 00:08:19,079
and things that we're going to need to

00:08:15,479 --> 00:08:22,439
be aware of phase one is going to

00:08:19,079 --> 00:08:24,839
introduce Aria reflection it means we're

00:08:22,439 --> 00:08:27,029
going to be able to set different roles

00:08:24,839 --> 00:08:29,099
and attributes and have them reflected

00:08:27,029 --> 00:08:31,289
back so it keeps things much simpler and

00:08:29,099 --> 00:08:34,529
lets us use more familiar JavaScript

00:08:31,289 --> 00:08:37,079
syntax so for reflecting the attributes

00:08:34,529 --> 00:08:39,209
there are two interface mix-ins that

00:08:37,079 --> 00:08:41,490
have actually been added not only to the

00:08:39,209 --> 00:08:43,680
AOM specification but they will also be

00:08:41,490 --> 00:08:46,230
added to one point two of the Aria

00:08:43,680 --> 00:08:48,959
specification Aria is accessible rich

00:08:46,230 --> 00:08:50,610
Internet applications and these two

00:08:48,959 --> 00:08:54,460
interface mix-ins will let us reflect

00:08:50,610 --> 00:08:57,250
back rolls and other Aria attributes

00:08:54,460 --> 00:08:59,350
so if we rewrite our connected callback

00:08:57,250 --> 00:09:01,330
for the toggle button we can see the

00:08:59,350 --> 00:09:04,600
change in syntax instead of having to

00:09:01,330 --> 00:09:07,060
use set attribute we can use element dot

00:09:04,600 --> 00:09:09,810
roll equals button to set the the role

00:09:07,060 --> 00:09:12,490
of the element we can use element dots

00:09:09,810 --> 00:09:15,940
tabindex equals 0 and element

00:09:12,490 --> 00:09:19,690
aria-pressed 'false notice though that

00:09:15,940 --> 00:09:22,240
the way tabindex & aria-pressed written

00:09:19,690 --> 00:09:23,920
has changed there's now a capital I on

00:09:22,240 --> 00:09:26,020
the index of tabindex where there

00:09:23,920 --> 00:09:27,700
wouldn't normally be and the dash has

00:09:26,020 --> 00:09:29,770
gone from the Aria dashed pressed

00:09:27,700 --> 00:09:30,310
attribute and instead it two uses

00:09:29,770 --> 00:09:33,220
camelcase

00:09:30,310 --> 00:09:35,080
so all of these Aria attributes have a

00:09:33,220 --> 00:09:37,000
slightly different way of being written

00:09:35,080 --> 00:09:38,589
but they achieve pretty much the same

00:09:37,000 --> 00:09:40,870
thing we set all those properties and

00:09:38,589 --> 00:09:44,589
characteristics exactly as we did in the

00:09:40,870 --> 00:09:47,200
earlier example we can also or we will

00:09:44,589 --> 00:09:49,120
be able to set element references now

00:09:47,200 --> 00:09:50,709
this is where we get into the part that

00:09:49,120 --> 00:09:52,240
is still so experimental it doesn't

00:09:50,709 --> 00:09:54,940
actually exist in the browser's yet not

00:09:52,240 --> 00:09:56,770
even behind the flag but what we'd be

00:09:54,940 --> 00:09:59,200
able to do is where we have an element

00:09:56,770 --> 00:10:02,230
sorry an attribute like Aria described

00:09:59,200 --> 00:10:03,730
by which up till now you can use to

00:10:02,230 --> 00:10:06,820
point to another piece of content on the

00:10:03,730 --> 00:10:08,950
page using its ID value as the reference

00:10:06,820 --> 00:10:11,350
point and it will associate that piece

00:10:08,950 --> 00:10:14,140
of text with the first element so

00:10:11,350 --> 00:10:16,089
typical example is you focus on a form

00:10:14,140 --> 00:10:17,650
filled with a screen reader you'll here

00:10:16,089 --> 00:10:19,480
the label of the form field announced

00:10:17,650 --> 00:10:21,610
the type of the form field announced and

00:10:19,480 --> 00:10:23,830
then you could use Aria described by to

00:10:21,610 --> 00:10:25,870
associate an extra hint to help someone

00:10:23,830 --> 00:10:27,370
fill out that information and the screen

00:10:25,870 --> 00:10:31,230
reader would automatically read that out

00:10:27,370 --> 00:10:33,490
to putting ID references on things is

00:10:31,230 --> 00:10:36,070
often quite heavy weights you can have

00:10:33,490 --> 00:10:38,500
hundreds sometimes thousands in a heavy

00:10:36,070 --> 00:10:40,810
application of ID references on a page

00:10:38,500 --> 00:10:42,610
but what will happen in the future is

00:10:40,810 --> 00:10:45,370
that we'll be able to use just plain

00:10:42,610 --> 00:10:47,140
JavaScript element references in our

00:10:45,370 --> 00:10:49,690
code instead of having to use ID

00:10:47,140 --> 00:10:52,149
references so for example we'll be able

00:10:49,690 --> 00:10:54,579
to use Aria described by elements to

00:10:52,149 --> 00:10:56,770
feed it one or more reference points for

00:10:54,579 --> 00:10:59,410
the information we want to hook up in

00:10:56,770 --> 00:11:01,089
the user interface but as I say this is

00:10:59,410 --> 00:11:03,610
experimental yet we can't play around

00:11:01,089 --> 00:11:05,980
with this feature if you're curious

00:11:03,610 --> 00:11:07,930
there is a series of harness of web

00:11:05,980 --> 00:11:10,690
platform tests available for

00:11:07,930 --> 00:11:13,149
one a at the moment if you take a look

00:11:10,690 --> 00:11:16,089
at it in Chrome or the new edge chromium

00:11:13,149 --> 00:11:18,760
beta you'll find that about 65 out of

00:11:16,089 --> 00:11:20,920
the 95 tests are currently passing so

00:11:18,760 --> 00:11:22,870
that's all the attribute and role

00:11:20,920 --> 00:11:26,680
reflections but none of the element

00:11:22,870 --> 00:11:29,709
reflections Safari is doing really well

00:11:26,680 --> 00:11:31,420
with about 79 interestingly WebKit

00:11:29,709 --> 00:11:33,100
Safari has taken out from behind the

00:11:31,420 --> 00:11:35,200
flag so this works actually at the

00:11:33,100 --> 00:11:37,080
production level in Chrome it's still

00:11:35,200 --> 00:11:39,670
behind the AOM accessibility flag

00:11:37,080 --> 00:11:41,620
Firefox hasn't yet introduced any

00:11:39,670 --> 00:11:44,010
support behind the flag or otherwise but

00:11:41,620 --> 00:11:46,750
I'm pretty sure it will catch up soon so

00:11:44,010 --> 00:11:48,160
hitting those tests in your browser is a

00:11:46,750 --> 00:11:50,320
pretty good way to keep up to date with

00:11:48,160 --> 00:11:53,920
how much of phase one is currently

00:11:50,320 --> 00:11:56,950
available to play with phase one B

00:11:53,920 --> 00:11:58,540
introduces custom element semantics now

00:11:56,950 --> 00:12:00,250
the idea behind this phase is that we

00:11:58,540 --> 00:12:01,870
can start to clean up some of that Dom

00:12:00,250 --> 00:12:04,420
leakage that we saw with our toggle

00:12:01,870 --> 00:12:06,790
button example we don't want all the

00:12:04,420 --> 00:12:08,529
tabindex the role the Aria press to the

00:12:06,790 --> 00:12:10,149
other attributes to leak out into the

00:12:08,529 --> 00:12:11,339
Dom when we create a custom element we

00:12:10,149 --> 00:12:14,440
want to keep the accessibility

00:12:11,339 --> 00:12:16,839
encapsulated so this is the part of the

00:12:14,440 --> 00:12:18,640
spec that will let us do that in two

00:12:16,839 --> 00:12:21,850
different ways ultimately we'll be able

00:12:18,640 --> 00:12:23,470
to set accessibility characteristics at

00:12:21,850 --> 00:12:26,400
the time the custom element is created

00:12:23,470 --> 00:12:31,029
and ones that can be adapted and changed

00:12:26,400 --> 00:12:32,980
in the element internals so for example

00:12:31,029 --> 00:12:35,620
we could change our code slightly so

00:12:32,980 --> 00:12:37,029
that element definitions options include

00:12:35,620 --> 00:12:38,950
things like setting the role and the

00:12:37,029 --> 00:12:41,140
tabindex because we want those to be

00:12:38,950 --> 00:12:43,570
established in the custom element the

00:12:41,140 --> 00:12:45,160
moment it's created exactly as though we

00:12:43,570 --> 00:12:48,370
were using a standard HTML button

00:12:45,160 --> 00:12:51,520
element we can then do per instance

00:12:48,370 --> 00:12:53,970
semantics using an internals variable we

00:12:51,520 --> 00:12:56,140
can attach the internals in the

00:12:53,970 --> 00:12:58,060
constructor for the custom element and

00:12:56,140 --> 00:12:59,709
that lets us set things that will change

00:12:58,060 --> 00:13:01,600
through the course of the custom

00:12:59,709 --> 00:13:03,940
elements lifetime so aria-pressed will

00:13:01,600 --> 00:13:06,910
change in response to user interactions

00:13:03,940 --> 00:13:09,550
so we set that here instead of as an

00:13:06,910 --> 00:13:11,770
immutable characteristic in the element

00:13:09,550 --> 00:13:13,209
definition options but as I say

00:13:11,770 --> 00:13:16,310
unfortunately at the moment we still

00:13:13,209 --> 00:13:19,130
can't play with this just yet

00:13:16,310 --> 00:13:21,740
phase two is all about user interactions

00:13:19,130 --> 00:13:24,980
and events we're all really used to

00:13:21,740 --> 00:13:27,260
events like click key down key press a

00:13:24,980 --> 00:13:29,270
whole bunch of others but when you

00:13:27,260 --> 00:13:31,220
introduce an assistive technology like a

00:13:29,270 --> 00:13:33,670
screen reader into the equation things

00:13:31,220 --> 00:13:36,890
get a little bit more complicated so

00:13:33,670 --> 00:13:39,770
they are going to change the way that

00:13:36,890 --> 00:13:43,130
events are synthesized and also

00:13:39,770 --> 00:13:45,350
introduced some new events the reason

00:13:43,130 --> 00:13:48,080
for the synthesis is to protect the

00:13:45,350 --> 00:13:50,300
privacy of assistive technology users so

00:13:48,080 --> 00:13:52,160
if they were just to create some

00:13:50,300 --> 00:13:55,010
assistive technology events it would

00:13:52,160 --> 00:13:56,750
very very easy to detect not only that

00:13:55,010 --> 00:13:59,240
the user was using a particular

00:13:56,750 --> 00:14:00,950
assistive technology but what type of

00:13:59,240 --> 00:14:02,870
assistive technology they were using and

00:14:00,950 --> 00:14:05,210
that of course would make it very easy

00:14:02,870 --> 00:14:06,490
to determine that the person was blind

00:14:05,210 --> 00:14:08,960
because they're using a screen reader

00:14:06,490 --> 00:14:10,820
had mobility impairments because they're

00:14:08,960 --> 00:14:12,410
using speech recognition and so

00:14:10,820 --> 00:14:15,170
obviously it's important that we protect

00:14:12,410 --> 00:14:17,500
that user privacy so what happens is

00:14:15,170 --> 00:14:19,940
when someone using a screen reader

00:14:17,500 --> 00:14:21,980
carries out an action it will synthesize

00:14:19,940 --> 00:14:24,680
a click event for example so

00:14:21,980 --> 00:14:26,300
particularly on touch devices if you tap

00:14:24,680 --> 00:14:28,160
a device with a screen reader running

00:14:26,300 --> 00:14:30,110
it's a double tap gesture not a single

00:14:28,160 --> 00:14:32,570
tap that you'll be used to but that will

00:14:30,110 --> 00:14:35,210
synthesize a click event and similarly

00:14:32,570 --> 00:14:38,420
other events are cloaked if you like

00:14:35,210 --> 00:14:40,460
using these synthesized events they're

00:14:38,420 --> 00:14:42,830
also going to introduce some new events

00:14:40,460 --> 00:14:46,010
particularly increment and decrement

00:14:42,830 --> 00:14:49,070
scroll up scroll down and dismiss and

00:14:46,010 --> 00:14:51,890
this very much plays into touchscreen

00:14:49,070 --> 00:14:55,390
devices at the moment it's pretty much

00:14:51,890 --> 00:14:57,950
impossible to create a custom slider

00:14:55,390 --> 00:15:00,470
using all the accessibility

00:14:57,950 --> 00:15:02,420
characteristics that are available and

00:15:00,470 --> 00:15:04,790
to have it usable with a screen reader

00:15:02,420 --> 00:15:06,560
on a touch device the reason is that

00:15:04,790 --> 00:15:08,810
when you have a screen reader running on

00:15:06,560 --> 00:15:11,630
your touch screen flick up and flick

00:15:08,810 --> 00:15:13,940
down the gestures you'd probably use to

00:15:11,630 --> 00:15:16,190
adjust the value of a slider are already

00:15:13,940 --> 00:15:18,200
used for screen reader specific commands

00:15:16,190 --> 00:15:21,980
so there's no way that those commands

00:15:18,200 --> 00:15:23,990
can be separated out into using a slider

00:15:21,980 --> 00:15:26,660
they're always protected they're always

00:15:23,990 --> 00:15:28,580
ring-fenced for the screen reader so if

00:15:26,660 --> 00:15:29,630
you go to something like the Aria

00:15:28,580 --> 00:15:31,400
authoring practice

00:15:29,630 --> 00:15:34,340
guide and pick up the blueprint design

00:15:31,400 --> 00:15:35,930
pattern for a slider there implement it

00:15:34,340 --> 00:15:37,190
perfectly but try to use it on a

00:15:35,930 --> 00:15:39,410
touchscreen device with the screen

00:15:37,190 --> 00:15:41,570
reader running it won't work the slider

00:15:39,410 --> 00:15:44,920
can't be adjusted in the way that you'd

00:15:41,570 --> 00:15:46,820
expect so these are being put into

00:15:44,920 --> 00:15:49,930
practice these new events will come

00:15:46,820 --> 00:15:53,180
along to help us get around that problem

00:15:49,930 --> 00:15:55,400
phase 3 will let us introduce virtual

00:15:53,180 --> 00:15:56,720
accessibility nodes into the tree this

00:15:55,400 --> 00:15:58,880
is where we really start to get our

00:15:56,720 --> 00:16:02,180
hands on that browser only functionality

00:15:58,880 --> 00:16:04,460
will be able to add entirely new nodes

00:16:02,180 --> 00:16:06,050
into the accessibility tree up until

00:16:04,460 --> 00:16:07,910
this point there is always a

00:16:06,050 --> 00:16:09,950
corresponding Dom node for an

00:16:07,910 --> 00:16:12,890
accessibility node but we can change

00:16:09,950 --> 00:16:14,900
that this is the bit where it starts to

00:16:12,890 --> 00:16:16,970
feel really scary what we don't want to

00:16:14,900 --> 00:16:18,890
happen is for developers to start

00:16:16,970 --> 00:16:21,080
creating entirely secondary

00:16:18,890 --> 00:16:22,970
accessibility trees just for screen

00:16:21,080 --> 00:16:25,520
reader users that bear no resemblance to

00:16:22,970 --> 00:16:26,900
the Dom good practice is always going to

00:16:25,520 --> 00:16:29,450
be to try and keep those two things

00:16:26,900 --> 00:16:31,490
synchronized with each other but one

00:16:29,450 --> 00:16:34,010
really clear use case is doing something

00:16:31,490 --> 00:16:35,420
with the canvas element when we draw

00:16:34,010 --> 00:16:37,400
something to the screen using canvas

00:16:35,420 --> 00:16:38,780
it's all done in JavaScript so there are

00:16:37,400 --> 00:16:40,280
no HTML elements there's no

00:16:38,780 --> 00:16:42,380
accessibility semantics that are

00:16:40,280 --> 00:16:45,080
available to the accessibility tree and

00:16:42,380 --> 00:16:46,790
so two screen readers so one use of

00:16:45,080 --> 00:16:48,710
being able to add virtual nodes to the

00:16:46,790 --> 00:16:51,500
accessibility tree is that we can attach

00:16:48,710 --> 00:16:53,900
a shadow root to the canvas element we

00:16:51,500 --> 00:16:55,790
can then start adding a virtual branch

00:16:53,900 --> 00:16:57,950
of the accessibility tree in there to

00:16:55,790 --> 00:16:59,690
provide fullback content specifically

00:16:57,950 --> 00:17:01,370
for people who can't see the JavaScript

00:16:59,690 --> 00:17:03,560
rendered content inside the canvas

00:17:01,370 --> 00:17:05,720
element but this is a long way off now

00:17:03,560 --> 00:17:07,250
and there's a lot of obstacles to

00:17:05,720 --> 00:17:09,670
getting to this point but it really does

00:17:07,250 --> 00:17:12,860
have some interesting possibilities

00:17:09,670 --> 00:17:15,050
phase four lastly is probably the most

00:17:12,860 --> 00:17:16,699
complicated of all the phases it's going

00:17:15,050 --> 00:17:18,290
to give us access to all computed

00:17:16,699 --> 00:17:20,900
accessibility properties in the

00:17:18,290 --> 00:17:22,579
accessibility tree both for the

00:17:20,900 --> 00:17:25,750
accessibility nodes that are associated

00:17:22,579 --> 00:17:27,890
with Dom nodes but also for the entire

00:17:25,750 --> 00:17:29,840
accessibility tree we'll be able to walk

00:17:27,890 --> 00:17:32,150
through the accessibility tree in the

00:17:29,840 --> 00:17:34,010
same way that we can walk the Dom now so

00:17:32,150 --> 00:17:35,930
again it's going to open up a lot of

00:17:34,010 --> 00:17:38,060
possibilities for functionality and

00:17:35,930 --> 00:17:40,160
capability but I think they're keeping

00:17:38,060 --> 00:17:41,630
this one till the last phase because it

00:17:40,160 --> 00:17:43,630
is the one that's going to take the most

00:17:41,630 --> 00:17:46,370
discussion the most thinking

00:17:43,630 --> 00:17:48,110
so looking at those things this is how

00:17:46,370 --> 00:17:50,770
we can think about building

00:17:48,110 --> 00:17:53,299
accessibility into our custom elements

00:17:50,770 --> 00:17:55,490
recognizing that if we use autonomous

00:17:53,299 --> 00:17:56,960
custom elements we need to add in the

00:17:55,490 --> 00:17:59,960
accessibility characteristics for

00:17:56,960 --> 00:18:01,820
ourselves and that the AO M in time is

00:17:59,960 --> 00:18:05,240
going to give us a lot more flexibility

00:18:01,820 --> 00:18:07,070
to do that but we can also use custom

00:18:05,240 --> 00:18:09,740
elements in fact the whole web component

00:18:07,070 --> 00:18:14,510
stack to solve accessibility problems as

00:18:09,740 --> 00:18:17,539
well sorry so we can create a speak

00:18:14,510 --> 00:18:19,220
content element for example I use a

00:18:17,539 --> 00:18:21,710
screen reader and one thing I quite

00:18:19,220 --> 00:18:24,320
often do is if I want to look at the

00:18:21,710 --> 00:18:26,720
news I will go and set my screen reader

00:18:24,320 --> 00:18:27,740
reading a news item on the website and

00:18:26,720 --> 00:18:29,330
then I'll go off and make myself a cup

00:18:27,740 --> 00:18:30,740
of tea while I'm still listening to it

00:18:29,330 --> 00:18:33,049
because I don't need to look at the

00:18:30,740 --> 00:18:34,880
screen my screen reader on my headset is

00:18:33,049 --> 00:18:36,740
portable I can just walk around the

00:18:34,880 --> 00:18:39,049
house put the kettle on make the tea and

00:18:36,740 --> 00:18:40,220
still listen to the news story and I've

00:18:39,049 --> 00:18:42,530
often thought this would be a really

00:18:40,220 --> 00:18:45,230
useful thing for everybody to be able to

00:18:42,530 --> 00:18:47,750
do being tied to your chair to your

00:18:45,230 --> 00:18:50,299
computer your laptop is not always the

00:18:47,750 --> 00:18:52,370
ideal experience so perhaps we can use

00:18:50,299 --> 00:18:55,309
custom elements to create a widget that

00:18:52,370 --> 00:18:57,470
will let us have a button on screen that

00:18:55,309 --> 00:18:59,840
will read a designated piece of content

00:18:57,470 --> 00:19:02,840
out loud and it turns out it's

00:18:59,840 --> 00:19:05,900
reasonably easy to achieve we can use

00:19:02,840 --> 00:19:08,360
the HTML template element to set up the

00:19:05,900 --> 00:19:10,280
actual element we'll chuck some styling

00:19:08,360 --> 00:19:14,750
in there just to make the the button and

00:19:10,280 --> 00:19:19,610
the div look good we will also use some

00:19:14,750 --> 00:19:21,320
slots to manage things so in the

00:19:19,610 --> 00:19:23,780
template we've got a button element that

00:19:21,320 --> 00:19:25,340
contains a slot element and this will

00:19:23,780 --> 00:19:27,049
let us pull through content from the

00:19:25,340 --> 00:19:30,500
light Dom from the the developer code

00:19:27,049 --> 00:19:32,299
and we'll also set up a div that's also

00:19:30,500 --> 00:19:34,850
going to be a slot for the content that

00:19:32,299 --> 00:19:37,850
we want to be spoken out loud

00:19:34,850 --> 00:19:40,909
in our connected callback we will do all

00:19:37,850 --> 00:19:42,409
sorts of things we will grab the control

00:19:40,909 --> 00:19:45,200
the thing we'll hit to make it speak

00:19:42,409 --> 00:19:46,909
we'll grab the element that contains the

00:19:45,200 --> 00:19:48,620
content and then from there we'll grab

00:19:46,909 --> 00:19:52,820
the content that we want to be spoken

00:19:48,620 --> 00:19:56,059
out loud in our function we will set up

00:19:52,820 --> 00:19:56,960
the web speech API to make it talk we'll

00:19:56,059 --> 00:20:00,049
create

00:19:56,960 --> 00:20:01,880
since this is object and will attach to

00:20:00,049 --> 00:20:03,529
that to the text that we want spoken out

00:20:01,880 --> 00:20:06,320
loud that we've grabbed from the light

00:20:03,529 --> 00:20:08,750
Dom and then lastly we need to set a

00:20:06,320 --> 00:20:11,000
timeout because what we want to do is

00:20:08,750 --> 00:20:12,980
lastly make the button look like it's

00:20:11,000 --> 00:20:15,049
been pressed for as long as the contents

00:20:12,980 --> 00:20:17,360
being spoken and then we want to return

00:20:15,049 --> 00:20:19,279
it to its default States when it's

00:20:17,360 --> 00:20:21,020
finished we're using the aria-pressed

00:20:19,279 --> 00:20:23,090
attribute again to make sure that that

00:20:21,020 --> 00:20:25,940
happens in the accessibility state as

00:20:23,090 --> 00:20:29,870
well as the visual state reset state

00:20:25,940 --> 00:20:31,909
then just checks after 500 milliseconds

00:20:29,870 --> 00:20:34,640
and it checks to see if the speech uh

00:20:31,909 --> 00:20:36,470
pterence is still talking if it is still

00:20:34,640 --> 00:20:39,350
talking it resets the timer for another

00:20:36,470 --> 00:20:42,070
500 if it isn't then it returns the

00:20:39,350 --> 00:20:44,750
state of the button back to non pressed

00:20:42,070 --> 00:20:46,880
would you one last bit of under the hood

00:20:44,750 --> 00:20:49,520
magic and we're going to attach the

00:20:46,880 --> 00:20:52,250
visual state of the button to the

00:20:49,520 --> 00:20:54,440
attribute selector using aria-pressed so

00:20:52,250 --> 00:20:56,809
as the value of aria-pressed is changed

00:20:54,440 --> 00:20:58,520
the visual style of the button changes

00:20:56,809 --> 00:21:00,620
accordingly and it just makes the whole

00:20:58,520 --> 00:21:02,720
thing sync up a lot more easily under

00:21:00,620 --> 00:21:04,850
the hood and what we get at the end of

00:21:02,720 --> 00:21:07,429
it is a very simple piece of text on

00:21:04,850 --> 00:21:09,679
page a button that we can hit and

00:21:07,429 --> 00:21:15,909
hopefully everything all works for

00:21:09,679 --> 00:21:22,250
everybody one tequila two tequila three

00:21:15,909 --> 00:21:24,380
tequila floor and so custom elements

00:21:22,250 --> 00:21:27,080
hopefully this has given you a brief

00:21:24,380 --> 00:21:29,870
insight into can be used not only as I

00:21:27,080 --> 00:21:31,549
said to solve accessibility problems but

00:21:29,870 --> 00:21:33,260
if we get them right add in all the

00:21:31,549 --> 00:21:35,330
accessibility properties that we need to

00:21:33,260 --> 00:21:38,990
they give us a really powerful way to

00:21:35,330 --> 00:21:41,960
create new and useful features on the

00:21:38,990 --> 00:21:44,539
web I need to really thank a couple of

00:21:41,960 --> 00:21:46,880
people Scott O'Hara and Patrick Walker

00:21:44,539 --> 00:21:48,289
and Dan Hopkins who all gave me a

00:21:46,880 --> 00:21:50,450
tremendous amount of help while I was

00:21:48,289 --> 00:21:54,409
putting this together there's a URL

00:21:50,450 --> 00:21:56,870
on-screen from Pat which leads to a way

00:21:54,409 --> 00:21:58,340
to implement a slider that will work in

00:21:56,870 --> 00:22:00,080
accessibility terms on touchscreen

00:21:58,340 --> 00:22:02,240
devices you basically use a native

00:22:00,080 --> 00:22:03,620
slider element you hook it up to the

00:22:02,240 --> 00:22:05,029
custom visuals that you want to make

00:22:03,620 --> 00:22:06,770
sure you keep it all in sync but if

00:22:05,029 --> 00:22:08,660
you're curious about an interim solution

00:22:06,770 --> 00:22:10,430
until the aom arrives

00:22:08,660 --> 00:22:12,500
that's a really good one to check but

00:22:10,430 --> 00:22:13,730
otherwise I recommend that you follow

00:22:12,500 --> 00:22:15,620
all of these people they're all damn

00:22:13,730 --> 00:22:18,170
good developers in their own right and

00:22:15,620 --> 00:22:21,370
pretty damn good people too and lastly

00:22:18,170 --> 00:22:24,570
thank you very much to all of you

00:22:21,370 --> 00:22:24,570

YouTube URL: https://www.youtube.com/watch?v=ZMZMMuXRFcE


