Title: Yan Zhu: Encrypt the Web For $0 - JSConf Budapest 2016
Publication date: 2016-06-09
Playlist: JSConf Budapest 2016
Description: 
	Everyone in 2016 knows that websites should use HTTPS. However, there is a common misconception that TLS and other security measures are expensive and slow down both web developers and page load times. This talk will show you some easy tricks to make your site more secure without sacrificing performance or requiring a lot of effort.

http://jsconfbp.com/speakers/yan-zhu.html
Captions: 
	00:00:06,520 --> 00:00:12,410
let's make sure that's guys concede yeah

00:00:09,889 --> 00:00:14,780
the slides are up so as a word of

00:00:12,410 --> 00:00:18,320
warning I had a nosebleed right before

00:00:14,780 --> 00:00:19,820
coming out here so if I suddenly start

00:00:18,320 --> 00:00:24,110
like dripping blood everywhere please

00:00:19,820 --> 00:00:26,960
excuse me while I fix that but like 80%

00:00:24,110 --> 00:00:28,940
chance that won't happen so today I'm

00:00:26,960 --> 00:00:32,210
here to talk about encrypting the web

00:00:28,940 --> 00:00:33,829
for zero dollars which hope which is

00:00:32,210 --> 00:00:38,420
hopefully an amount that everyone can

00:00:33,829 --> 00:00:41,840
afford so when we talk about web

00:00:38,420 --> 00:00:44,780
security people say oh well you know

00:00:41,840 --> 00:00:47,600
what that slows us down like security as

00:00:44,780 --> 00:00:49,070
antistick all to speed so I want to

00:00:47,600 --> 00:00:50,930
start this talk by talking a little bit

00:00:49,070 --> 00:00:53,030
about web performance because I think

00:00:50,930 --> 00:00:54,590
performance is a good incentive to

00:00:53,030 --> 00:00:56,690
security like if you can have both

00:00:54,590 --> 00:00:57,920
performance and security that's a win

00:00:56,690 --> 00:01:01,130
win and you have an easier time

00:00:57,920 --> 00:01:06,649
convincing people to be secure so who

00:01:01,130 --> 00:01:08,930
thinks the web is fast who thinks it's

00:01:06,649 --> 00:01:10,640
not okay well so that was kind of a

00:01:08,930 --> 00:01:14,270
trick question because what what do we

00:01:10,640 --> 00:01:16,760
really mean by fast so let's look at

00:01:14,270 --> 00:01:21,860
some data from the last two years on

00:01:16,760 --> 00:01:25,549
websites from HTTP archive.org so as you

00:01:21,860 --> 00:01:28,040
see the total transfer size of HTML CSS

00:01:25,549 --> 00:01:31,159
and JavaScript is steadily going up over

00:01:28,040 --> 00:01:33,200
that time the total request size the

00:01:31,159 --> 00:01:35,920
total number of requests has you know

00:01:33,200 --> 00:01:39,470
hasn't increased significantly

00:01:35,920 --> 00:01:42,049
especially CSS is going up at a at a

00:01:39,470 --> 00:01:45,560
higher rate than than any other resource

00:01:42,049 --> 00:01:46,760
type the number of TCP connections has

00:01:45,560 --> 00:01:49,159
actually stayed about the same

00:01:46,760 --> 00:01:52,939
so each the average website opens about

00:01:49,159 --> 00:01:55,070
40 TCP connections this number of sites

00:01:52,939 --> 00:01:58,159
with flash which many of you know is a

00:01:55,070 --> 00:02:01,420
huge security problem is thankfully

00:01:58,159 --> 00:02:05,450
thankfully dying down but very slowly

00:02:01,420 --> 00:02:09,049
the number of HTTP requests happily is

00:02:05,450 --> 00:02:10,729
going up so which brings us to the next

00:02:09,049 --> 00:02:14,239
point so we we all we probably all know

00:02:10,729 --> 00:02:16,880
that HTTPS is the foundation of web

00:02:14,239 --> 00:02:18,400
security if you don't have HTTPS you

00:02:16,880 --> 00:02:20,290
don't have any meaningful

00:02:18,400 --> 00:02:22,200
security so it's it's really a

00:02:20,290 --> 00:02:28,060
prerequisite to anything you want to do

00:02:22,200 --> 00:02:30,730
on the web so is is TLS fast yet and the

00:02:28,060 --> 00:02:33,610
answer I believe is yes so years ago

00:02:30,730 --> 00:02:35,650
people would have said no like TCP sorry

00:02:33,610 --> 00:02:38,230
TLS handshakes are really slow

00:02:35,650 --> 00:02:40,480
you shouldn't implement TLS but I think

00:02:38,230 --> 00:02:44,980
the argument is that those arguments are

00:02:40,480 --> 00:02:48,819
now invalid as one example who here uses

00:02:44,980 --> 00:02:52,780
Netflix right quite a few hands so

00:02:48,819 --> 00:02:55,629
Netflix is going to start securing video

00:02:52,780 --> 00:02:57,220
streams over HTTPS this year this is a

00:02:55,629 --> 00:02:59,049
really big deal because Netflix has a

00:02:57,220 --> 00:03:02,019
huge amount of traffic and they were one

00:02:59,049 --> 00:03:06,430
of the the last large websites to move

00:03:02,019 --> 00:03:09,819
over to HTTPS so in 2015 people would

00:03:06,430 --> 00:03:11,920
Netflix and chill you know but in 2016

00:03:09,819 --> 00:03:15,519
you can Netflix over HTTPS and chill

00:03:11,920 --> 00:03:18,909
which is way better and and to show you

00:03:15,519 --> 00:03:22,180
how significant this is so on the the

00:03:18,909 --> 00:03:24,910
first chart is the amount of encrypted

00:03:22,180 --> 00:03:26,590
traffic in North America so weirdly in

00:03:24,910 --> 00:03:29,829
this graph encrypted as read and

00:03:26,590 --> 00:03:32,109
unencrypted is green so about 30 percent

00:03:29,829 --> 00:03:35,709
of traffic is unencrypted 65 percent is

00:03:32,109 --> 00:03:38,319
encrypted in 2016 when Netflix over

00:03:35,709 --> 00:03:41,440
moves over to HTTPS that's going to flip

00:03:38,319 --> 00:03:44,319
in fact about 65 percent of traffic will

00:03:41,440 --> 00:03:47,440
be encrypted and a 30 percent won't be

00:03:44,319 --> 00:03:50,069
so so this is a really big deal and if

00:03:47,440 --> 00:03:52,870
Netflix can do it um so can we

00:03:50,069 --> 00:03:55,540
there's this great website by oh your

00:03:52,870 --> 00:03:57,190
Agora called as TLS fasciae and I'll

00:03:55,540 --> 00:04:00,040
summarize some of the key points from

00:03:57,190 --> 00:04:01,989
that so basically TLS is fast now

00:04:00,040 --> 00:04:04,739
because we have faster CPUs and we have

00:04:01,989 --> 00:04:09,220
a lot of cool tricks we can use to make

00:04:04,739 --> 00:04:11,019
TLS less expensive so before we get into

00:04:09,220 --> 00:04:14,470
that let's let's go over what a TLS

00:04:11,019 --> 00:04:17,409
handshake looks like so your browser

00:04:14,470 --> 00:04:21,639
says okay compute ok server I'd like to

00:04:17,409 --> 00:04:23,830
start TLS and server says okay I've AK

00:04:21,639 --> 00:04:26,650
knowledge that okay so the sender says

00:04:23,830 --> 00:04:29,680
client hello Service says server hello

00:04:26,650 --> 00:04:32,139
these are some cipher suites I support

00:04:29,680 --> 00:04:34,449
and client goes back and says ok

00:04:32,139 --> 00:04:37,539
this is the cypher I pick this is a

00:04:34,449 --> 00:04:41,199
random data I'm gonna use as the seed

00:04:37,539 --> 00:04:43,120
for our encryption and services okay got

00:04:41,199 --> 00:04:46,719
it and then finally after three

00:04:43,120 --> 00:04:50,229
round-trips finally we can start sending

00:04:46,719 --> 00:04:52,300
data encrypted so this is usually what

00:04:50,229 --> 00:04:56,199
people talk about when they say that TLS

00:04:52,300 --> 00:04:58,360
is slow or TLS is CPU intensive it's not

00:04:56,199 --> 00:05:00,550
the actual you know encrypted data part

00:04:58,360 --> 00:05:03,340
it's it's the setting up of encryption

00:05:00,550 --> 00:05:06,669
which takes three round-trips the TLS

00:05:03,340 --> 00:05:08,469
handshake but there's actually a neat

00:05:06,669 --> 00:05:12,219
trick called session resumption which

00:05:08,469 --> 00:05:14,199
you can use to reduce reduced round

00:05:12,219 --> 00:05:16,659
trips to to round trips in most cases

00:05:14,199 --> 00:05:20,050
and I hope everyone has been using this

00:05:16,659 --> 00:05:22,409
so basically on the server one way to do

00:05:20,050 --> 00:05:25,599
it is that the server keeps track of

00:05:22,409 --> 00:05:28,060
which client will like which clients

00:05:25,599 --> 00:05:30,009
have been issued which secrets and the

00:05:28,060 --> 00:05:32,379
client all the client has to do is say

00:05:30,009 --> 00:05:34,479
hey look here's a here's an ID from the

00:05:32,379 --> 00:05:36,819
last time we talked I'm just gonna use

00:05:34,479 --> 00:05:39,969
the same secret data as last time so

00:05:36,819 --> 00:05:41,650
that saves one round-trip and so you can

00:05:39,969 --> 00:05:43,659
just say client hello server hello and

00:05:41,650 --> 00:05:47,620
then immediately start sending encrypted

00:05:43,659 --> 00:05:50,080
data so TLS session resumption is good

00:05:47,620 --> 00:05:51,430
and everyone should look look it up and

00:05:50,080 --> 00:05:54,789
you know figure out how to set it up in

00:05:51,430 --> 00:05:58,779
Apache or nginx it's pretty easy and

00:05:54,789 --> 00:06:01,469
it's a it's a good win another way TLS

00:05:58,779 --> 00:06:04,719
is going to get faster is with HTTP -

00:06:01,469 --> 00:06:07,419
how many people have already set up HTTP

00:06:04,719 --> 00:06:09,159
- on any of their servers so it's

00:06:07,419 --> 00:06:11,710
actually a very few hands I think maybe

00:06:09,159 --> 00:06:14,259
like less than a dozen Wow

00:06:11,710 --> 00:06:18,189
so so I'm gonna explain the motivation

00:06:14,259 --> 00:06:21,490
for HTTP - so remember in 1995 around

00:06:18,189 --> 00:06:24,669
one HTTP one was standardized this is

00:06:21,490 --> 00:06:26,289
what websites look like around 1995 and

00:06:24,669 --> 00:06:27,520
that's actually kind of what my website

00:06:26,289 --> 00:06:29,889
looks like now but we won't talk about

00:06:27,520 --> 00:06:32,050
it so there's this header right and unit

00:06:29,889 --> 00:06:34,000
say like oh this is yawns MIT homepage

00:06:32,050 --> 00:06:36,279
and then there's some content like yawn

00:06:34,000 --> 00:06:38,469
is a really boring person etc and this

00:06:36,279 --> 00:06:40,479
was really nice and really fast and HTTP

00:06:38,469 --> 00:06:43,029
one does those quite well for stuff like

00:06:40,479 --> 00:06:45,380
this but this is what websites look like

00:06:43,029 --> 00:06:48,680
in 2015 20 years later

00:06:45,380 --> 00:06:50,690
you know you usually have think of like

00:06:48,680 --> 00:06:53,470
BuzzFeed you have a flash ad you have

00:06:50,690 --> 00:06:56,090
some some like ridiculously coke-fueled

00:06:53,470 --> 00:06:57,860
advertisements at the top you have some

00:06:56,090 --> 00:07:00,290
Twitter polls on the side and you know

00:06:57,860 --> 00:07:03,820
for ads a disguise that some tracking

00:07:00,290 --> 00:07:05,810
pixels random JavaScript some clickbait

00:07:03,820 --> 00:07:07,490
you know just like stuff you don't want

00:07:05,810 --> 00:07:09,620
to see and like scrolling using

00:07:07,490 --> 00:07:12,380
javascript etc sites are a lot more

00:07:09,620 --> 00:07:15,410
complicated than they were in 2003 in

00:07:12,380 --> 00:07:17,930
1995 and so it makes sense that we want

00:07:15,410 --> 00:07:21,740
a new protocol to handle handle this

00:07:17,930 --> 00:07:24,590
kind of document so I think of HTTP 2 as

00:07:21,740 --> 00:07:28,760
like HTTP one if HTTP 1 took a lot of

00:07:24,590 --> 00:07:30,650
stimulants some of the ways it's faster

00:07:28,760 --> 00:07:33,650
are you use by no instead of text and

00:07:30,650 --> 00:07:35,450
encoding header compression and server

00:07:33,650 --> 00:07:38,800
push but the thing I really want to

00:07:35,450 --> 00:07:41,660
point out is that in HTTP 2 you can send

00:07:38,800 --> 00:07:44,120
multiple requests on a single TCP

00:07:41,660 --> 00:07:47,210
connection remember earlier how I said

00:07:44,120 --> 00:07:50,120
most websites use about 40 TCP

00:07:47,210 --> 00:07:51,590
connections which seems like a lot you

00:07:50,120 --> 00:07:54,470
can reduce that number and therefore get

00:07:51,590 --> 00:07:58,490
more performant websites to illustrate

00:07:54,470 --> 00:08:01,160
this ok HTTP 1 browser says give me

00:07:58,490 --> 00:08:01,670
index dot HTML server site ok here you

00:08:01,160 --> 00:08:03,530
go

00:08:01,670 --> 00:08:05,540
browsers like ok great I got it now

00:08:03,530 --> 00:08:06,290
let's get some stylesheets servers like

00:08:05,540 --> 00:08:07,910
here you go

00:08:06,290 --> 00:08:09,740
browsers like great now let's get some

00:08:07,910 --> 00:08:12,740
more stuff so you it's just like you

00:08:09,740 --> 00:08:14,240
know back and forth but in HTTP 2 you

00:08:12,740 --> 00:08:16,550
don't like the browser doesn't have to

00:08:14,240 --> 00:08:18,830
wait for the server to respond reply

00:08:16,550 --> 00:08:21,770
before sending a new request so browser

00:08:18,830 --> 00:08:23,660
says get index.html server says here you

00:08:21,770 --> 00:08:26,810
go and I'm browser can just say get

00:08:23,660 --> 00:08:29,090
styles and get scripts and then both of

00:08:26,810 --> 00:08:31,280
those are sent over to TCP the same TCP

00:08:29,090 --> 00:08:34,789
connection and so you can see like the

00:08:31,280 --> 00:08:37,400
time has strung on the y-axis and that's

00:08:34,789 --> 00:08:40,070
pretty great so obviously we all want to

00:08:37,400 --> 00:08:43,340
use HTTP - um does that require

00:08:40,070 --> 00:08:45,440
encryption this was a huge controversy

00:08:43,340 --> 00:08:46,640
in the standards bodies because people

00:08:45,440 --> 00:08:48,310
thought oh we should move to an all

00:08:46,640 --> 00:08:52,400
encrypted web why don't we just make

00:08:48,310 --> 00:08:54,470
HTTP to require encryption well sadly

00:08:52,400 --> 00:08:56,200
the answer is no HTTP to does not

00:08:54,470 --> 00:08:58,150
require encryption

00:08:56,200 --> 00:09:00,750
but happily and practice it kind of

00:08:58,150 --> 00:09:03,880
actually does and what I mean by that is

00:09:00,750 --> 00:09:07,630
there's two ways to upgrade a site from

00:09:03,880 --> 00:09:10,330
HTTP one to HTTP two one method is plain

00:09:07,630 --> 00:09:13,840
text HTTP two and the second method is

00:09:10,330 --> 00:09:16,090
only available over HTTPS so a method

00:09:13,840 --> 00:09:17,800
one the client can send this upgrade

00:09:16,090 --> 00:09:20,590
header and then the server replies with

00:09:17,800 --> 00:09:23,980
a 101 with switching code and then you

00:09:20,590 --> 00:09:26,590
upgrade and it's in the method to the

00:09:23,980 --> 00:09:30,720
client says I support HTTP 2 in the

00:09:26,590 --> 00:09:33,520
client hello of the TLS handshake and so

00:09:30,720 --> 00:09:35,350
most importantly method 2 is the only

00:09:33,520 --> 00:09:37,480
one that will be supported by Chrome and

00:09:35,350 --> 00:09:39,190
Firefox so if you want to support you

00:09:37,480 --> 00:09:40,960
know just these two kind of tiny

00:09:39,190 --> 00:09:43,000
browsers you know maybe you might care

00:09:40,960 --> 00:09:44,710
about then you should use the second

00:09:43,000 --> 00:09:47,860
method if you only care about like curl

00:09:44,710 --> 00:09:50,560
and really command line method one works

00:09:47,860 --> 00:09:53,620
all right and here's what that looks

00:09:50,560 --> 00:09:55,840
like a boring Wireshark dump but you can

00:09:53,620 --> 00:09:59,320
see in the client hello there's this al

00:09:55,840 --> 00:10:00,580
peon protocol and you can you can open

00:09:59,320 --> 00:10:02,770
up Wireshark and look at your browser

00:10:00,580 --> 00:10:04,630
and make sure it's supporting HTTP 2 and

00:10:02,770 --> 00:10:07,600
your server supports HP 2 if you see

00:10:04,630 --> 00:10:11,470
these fields and the client hello the

00:10:07,600 --> 00:10:12,790
TLS handshake so that's great right and

00:10:11,470 --> 00:10:15,040
that's that should be a good incentive

00:10:12,790 --> 00:10:19,780
for all of us to switch over to HTTPS

00:10:15,040 --> 00:10:21,460
but then developers say Oh HTTP is

00:10:19,780 --> 00:10:23,470
really annoying to set up and maintain

00:10:21,460 --> 00:10:26,530
how many of you have said this or heard

00:10:23,470 --> 00:10:28,270
someone say this to you before yeah I

00:10:26,530 --> 00:10:29,440
hear it less and less now but a few

00:10:28,270 --> 00:10:31,290
years ago I think this was like

00:10:29,440 --> 00:10:34,840
something that was really common

00:10:31,290 --> 00:10:37,480
commonly thought and there's good reason

00:10:34,840 --> 00:10:39,130
for it because previously if you wanted

00:10:37,480 --> 00:10:41,110
to set up SSL over something like

00:10:39,130 --> 00:10:43,450
DreamHost you would have this like long

00:10:41,110 --> 00:10:45,760
wiki page with 14 steps and you'd have

00:10:43,450 --> 00:10:48,130
to copy and paste certificate signing

00:10:45,760 --> 00:10:50,110
request and like not accidentally copy

00:10:48,130 --> 00:10:55,330
and paste or private key and do all this

00:10:50,110 --> 00:10:58,930
this magic furthermore tziolis isn't a

00:10:55,330 --> 00:11:01,690
fixed standard really because as Krypton

00:10:58,930 --> 00:11:04,510
our Krypton cryptanalytic attacks get

00:11:01,690 --> 00:11:08,260
better cipher suites that we used to use

00:11:04,510 --> 00:11:09,710
are deprecated for instance rc4 up until

00:11:08,260 --> 00:11:12,620
2013 you know

00:11:09,710 --> 00:11:14,780
it was commonly recommended and then we

00:11:12,620 --> 00:11:17,030
decided that like NSA can probably break

00:11:14,780 --> 00:11:20,000
our c4 so let's just suddenly stop using

00:11:17,030 --> 00:11:21,290
it and if you're if you're running a

00:11:20,000 --> 00:11:22,900
server you have to keep track of these

00:11:21,290 --> 00:11:25,460
things and it's kind of a lot of work

00:11:22,900 --> 00:11:27,920
there's also a big problem called mixed

00:11:25,460 --> 00:11:30,860
content blocking basically when you

00:11:27,920 --> 00:11:33,050
visit a site over HTTPS the browser says

00:11:30,860 --> 00:11:34,820
hey I don't want to load any HTTP

00:11:33,050 --> 00:11:36,470
content because that's insecure and

00:11:34,820 --> 00:11:39,560
that's gonna downgrade the security of

00:11:36,470 --> 00:11:41,990
our entire site to http so the browser

00:11:39,560 --> 00:11:45,710
instead of loading those HTTP resources

00:11:41,990 --> 00:11:47,390
it blocks them and so this can be a pain

00:11:45,710 --> 00:11:48,830
for you as a website developer if you're

00:11:47,390 --> 00:11:51,800
depending on all these like third

00:11:48,830 --> 00:11:53,780
parties that don't use support HTTPS but

00:11:51,800 --> 00:11:56,210
you want to move your site over to HTTPS

00:11:53,780 --> 00:11:57,770
so when you upgrade like all these

00:11:56,210 --> 00:11:59,060
scripts and styles and images are

00:11:57,770 --> 00:12:00,830
blocked and someone visits your website

00:11:59,060 --> 00:12:04,970
and they're like this is totally broken

00:12:00,830 --> 00:12:07,400
what the what the heck but there's a

00:12:04,970 --> 00:12:09,740
there's a nice standard so I work I

00:12:07,400 --> 00:12:11,750
hoped with this while I was in w3c

00:12:09,740 --> 00:12:15,380
it's called upgrade and secure requests

00:12:11,750 --> 00:12:17,450
so you can set this header called

00:12:15,380 --> 00:12:19,340
content security policy upgrade and

00:12:17,450 --> 00:12:21,020
secure request you know just copy and

00:12:19,340 --> 00:12:23,120
paste this into your config file or

00:12:21,020 --> 00:12:25,970
whatever and basically the browser will

00:12:23,120 --> 00:12:28,580
automatically upgrade insecure requests

00:12:25,970 --> 00:12:31,010
and treat them as if they were HTTPS so

00:12:28,580 --> 00:12:33,800
instead of blocking those HTTP resources

00:12:31,010 --> 00:12:36,650
the browser optimistically goes over

00:12:33,800 --> 00:12:38,660
HTTP first and sees if they work and if

00:12:36,650 --> 00:12:41,720
it doesn't work then it blocks them but

00:12:38,660 --> 00:12:43,490
if I actually had to use this recently

00:12:41,720 --> 00:12:46,460
because I did something weird with

00:12:43,490 --> 00:12:48,800
WordPress and I broke my blog it like

00:12:46,460 --> 00:12:52,010
WordPress just rewrote all my HTTPS

00:12:48,800 --> 00:12:54,680
links to http and instead of like going

00:12:52,010 --> 00:12:58,340
through my code and like manually like

00:12:54,680 --> 00:12:59,720
search and replacing HTTP HTTPS I just

00:12:58,340 --> 00:13:01,700
set this header upgrade and secure

00:12:59,720 --> 00:13:03,860
request and then suddenly the browser

00:13:01,700 --> 00:13:07,280
starts upgrading everything and then my

00:13:03,860 --> 00:13:09,320
blog is nice and beautiful again okay so

00:13:07,280 --> 00:13:12,850
things are getting better right from the

00:13:09,320 --> 00:13:16,850
standards perspective and from from like

00:13:12,850 --> 00:13:19,250
you know getting TLS into everyone's

00:13:16,850 --> 00:13:19,910
configuration but still still TLS is

00:13:19,250 --> 00:13:22,400
kind of hard

00:13:19,910 --> 00:13:23,150
that's an arguable partly because it

00:13:22,400 --> 00:13:28,160
used to cost

00:13:23,150 --> 00:13:29,870
money so at iff and mozilla and and a

00:13:28,160 --> 00:13:32,450
few other organizations a bunch of

00:13:29,870 --> 00:13:34,070
people came together and said so how

00:13:32,450 --> 00:13:37,150
about we just start a certificate

00:13:34,070 --> 00:13:39,110
authority how hard can it be right and

00:13:37,150 --> 00:13:40,970
how about we just give out free

00:13:39,110 --> 00:13:42,680
certificates in an automated way that

00:13:40,970 --> 00:13:44,120
takes like less than five seconds so

00:13:42,680 --> 00:13:47,390
people can't complain that it's taking

00:13:44,120 --> 00:13:49,550
too long and how about we automate TLS

00:13:47,390 --> 00:13:51,860
configuration for everyone so that when

00:13:49,550 --> 00:13:53,720
a cipher suite is deprecated you don't

00:13:51,860 --> 00:13:55,670
have to like manually read hacker news

00:13:53,720 --> 00:13:58,820
and figure out what to do we'll just do

00:13:55,670 --> 00:14:01,220
it for you so let's incorrect it's

00:13:58,820 --> 00:14:03,560
called let's encrypt probably most of

00:14:01,220 --> 00:14:07,520
you have heard of it by now it's been in

00:14:03,560 --> 00:14:10,280
public beta for a while so the way this

00:14:07,520 --> 00:14:13,610
was formed was is RG is a new on

00:14:10,280 --> 00:14:16,490
nonprofit created mostly from PFF

00:14:13,610 --> 00:14:19,460
Mozilla and University of Michigan we

00:14:16,490 --> 00:14:22,430
are funded by financial donations from

00:14:19,460 --> 00:14:25,940
Cisco and alchemy and also from various

00:14:22,430 --> 00:14:28,130
groups like Google for our actual

00:14:25,940 --> 00:14:31,190
certificate we are working on getting

00:14:28,130 --> 00:14:33,890
into the root certificate stores of all

00:14:31,190 --> 00:14:36,830
the major browsers and operating systems

00:14:33,890 --> 00:14:38,960
but for now we're Frost signed by a CA

00:14:36,830 --> 00:14:41,450
called I don't trust so most browsers

00:14:38,960 --> 00:14:43,730
will recognize us because they recognize

00:14:41,450 --> 00:14:47,930
ID and trusts so we are seen as a valid

00:14:43,730 --> 00:14:49,940
intermediate CA um thank you to all our

00:14:47,930 --> 00:14:52,610
sponsors this is who they are in case

00:14:49,940 --> 00:14:54,620
you're curious current status is we've

00:14:52,610 --> 00:14:57,110
been in beta while we were in private

00:14:54,620 --> 00:15:01,490
beta in November for months we're now in

00:14:57,110 --> 00:15:03,290
public beta we issued about 10,000 certs

00:15:01,490 --> 00:15:05,330
in the first eight hours which was like

00:15:03,290 --> 00:15:05,930
whoa we can't believe this is actually

00:15:05,330 --> 00:15:08,780
happening

00:15:05,930 --> 00:15:10,370
one serve per 30 seconds and so far

00:15:08,780 --> 00:15:12,500
there's been over three million

00:15:10,370 --> 00:15:16,520
certificates issued the last time I gave

00:15:12,500 --> 00:15:18,020
this talk was in March and that was 1.4

00:15:16,520 --> 00:15:19,490
million so when I was preparing these

00:15:18,020 --> 00:15:21,260
slides I was like oh maybe it's two

00:15:19,490 --> 00:15:23,840
million by now but turns out in the last

00:15:21,260 --> 00:15:25,150
month and the rate has gone up a bit and

00:15:23,840 --> 00:15:28,700
they sent out over three million

00:15:25,150 --> 00:15:32,090
certificates um here's the graph you can

00:15:28,700 --> 00:15:33,890
see it's going steeply up and to the to

00:15:32,090 --> 00:15:35,580
the right I always get right and left

00:15:33,890 --> 00:15:39,580
confused

00:15:35,580 --> 00:15:44,020
so more stats whelmed France seems to be

00:15:39,580 --> 00:15:50,470
the most popular popular theology so far

00:15:44,020 --> 00:15:51,700
Germany is pretty close though and okay

00:15:50,470 --> 00:15:53,110
so let's talk about let's encrypt

00:15:51,700 --> 00:15:55,120
clients because I think this is where

00:15:53,110 --> 00:15:59,650
things are really interesting to you all

00:15:55,120 --> 00:16:01,900
as JavaScript developers so let's

00:15:59,650 --> 00:16:04,630
encrypt tries to address a lot of

00:16:01,900 --> 00:16:06,520
different different well so there's a

00:16:04,630 --> 00:16:08,950
lot of different different types of

00:16:06,520 --> 00:16:12,010
servers let some could be addressing I

00:16:08,950 --> 00:16:16,200
call this the let's encrypt the server

00:16:12,010 --> 00:16:20,440
the server the server layer cake I guess

00:16:16,200 --> 00:16:22,660
so at the top is people like Facebook

00:16:20,440 --> 00:16:24,040
and Yahoo who are these large companies

00:16:22,660 --> 00:16:27,040
and they run their own custom

00:16:24,040 --> 00:16:28,990
infrastructure the one layer below is

00:16:27,040 --> 00:16:31,180
people who've on like large websites and

00:16:28,990 --> 00:16:33,190
they have multiple servers a layer below

00:16:31,180 --> 00:16:34,840
that is people who run single servers

00:16:33,190 --> 00:16:37,120
like me like I have a digital ocean

00:16:34,840 --> 00:16:39,340
instance since made obeisance tenses and

00:16:37,120 --> 00:16:41,380
then at the bottom is this like large

00:16:39,340 --> 00:16:43,090
number of websites that use WordPress or

00:16:41,380 --> 00:16:45,130
DreamHost where these people just have

00:16:43,090 --> 00:16:46,480
these like WYSIWYG editors and they

00:16:45,130 --> 00:16:49,210
don't really have a terminal where they

00:16:46,480 --> 00:16:51,460
can like log in and do commands so

00:16:49,210 --> 00:16:54,160
currently let's encrypt is pretty good

00:16:51,460 --> 00:16:55,870
for the middle two tiers but we we still

00:16:54,160 --> 00:16:58,720
need some help getting to the getting

00:16:55,870 --> 00:17:01,570
the top and bottom layers so how are we

00:16:58,720 --> 00:17:04,120
gonna take over the world well so the

00:17:01,570 --> 00:17:05,770
good news is as I said if you have if

00:17:04,120 --> 00:17:07,480
you're running common server software

00:17:05,770 --> 00:17:10,060
will probably work for you already

00:17:07,480 --> 00:17:13,630
so our official client which is in

00:17:10,060 --> 00:17:15,400
Python will get you a cert and set and

00:17:13,630 --> 00:17:18,700
even set it up and configure it on

00:17:15,400 --> 00:17:20,200
Apache and nginx people have also been

00:17:18,700 --> 00:17:21,850
really active in the community and

00:17:20,200 --> 00:17:24,580
they've written these like libraries and

00:17:21,850 --> 00:17:26,050
scripts for in bash Python etc just to

00:17:24,580 --> 00:17:27,910
do the part where that you like get and

00:17:26,050 --> 00:17:31,030
fetch you get a revoke and renew

00:17:27,910 --> 00:17:33,130
certificates people have also made a

00:17:31,030 --> 00:17:36,340
written integrations for let's encrypt

00:17:33,130 --> 00:17:39,310
with popular servers like Express caddy

00:17:36,340 --> 00:17:41,920
known middleware like happy and all that

00:17:39,310 --> 00:17:44,140
and rails and there's lots more if you

00:17:41,920 --> 00:17:47,200
if you want to see see the rest you can

00:17:44,140 --> 00:17:48,790
check out our wiki so so that's all good

00:17:47,200 --> 00:17:51,400
but if you don't have

00:17:48,790 --> 00:17:53,140
she'll then you're kind of in trouble

00:17:51,400 --> 00:17:55,180
because you can't just like log in and

00:17:53,140 --> 00:17:58,660
say app get install let's encrypt let's

00:17:55,180 --> 00:18:00,340
encrypt get me a certificate but there

00:17:58,660 --> 00:18:02,350
is a solution which is that we let's

00:18:00,340 --> 00:18:04,570
encrypt will partner with your hosting

00:18:02,350 --> 00:18:06,340
provider and this is this has been

00:18:04,570 --> 00:18:08,410
happening pretty rapidly so let's

00:18:06,340 --> 00:18:12,370
encrypt already integrates with dream

00:18:08,410 --> 00:18:13,900
host WordPress calm and OVH alchemy is

00:18:12,370 --> 00:18:16,600
also working on this and it might be

00:18:13,900 --> 00:18:18,490
available to some customers if you use

00:18:16,600 --> 00:18:20,530
WordPress and you're using like self

00:18:18,490 --> 00:18:23,650
hosted WordPress you can just install a

00:18:20,530 --> 00:18:25,180
plugin that someone wrote and finally if

00:18:23,650 --> 00:18:27,610
you just want a certificate and you

00:18:25,180 --> 00:18:28,960
don't care about like you know having a

00:18:27,610 --> 00:18:30,700
fancy command line and being all

00:18:28,960 --> 00:18:32,740
efficient you can just get a cert

00:18:30,700 --> 00:18:36,010
through your browser like you used to

00:18:32,740 --> 00:18:41,230
back in the old days through HTTP GET

00:18:36,010 --> 00:18:43,150
HTTP for free com okay so at the top of

00:18:41,230 --> 00:18:44,890
the layer cake earlier there was this

00:18:43,150 --> 00:18:46,990
this year that said large custom

00:18:44,890 --> 00:18:49,000
infrastructure so if you if you work

00:18:46,990 --> 00:18:51,270
with a company that has large custom

00:18:49,000 --> 00:18:53,830
infrastructure or is a hosting provider

00:18:51,270 --> 00:18:56,200
and you're too big to use let's encrypt

00:18:53,830 --> 00:18:58,200
right now we can most likely make

00:18:56,200 --> 00:19:00,940
something work for you so email us

00:18:58,200 --> 00:19:02,290
sponsor outlets encrypts that's probably

00:19:00,940 --> 00:19:04,030
not the best email but it was the

00:19:02,290 --> 00:19:06,370
closest one I could find or you can just

00:19:04,030 --> 00:19:08,800
email me directly we'd love to help you

00:19:06,370 --> 00:19:12,670
get more as a sell out into the world

00:19:08,800 --> 00:19:15,460
any way we can so yeah so here's some

00:19:12,670 --> 00:19:17,620
more data on who is actually using the

00:19:15,460 --> 00:19:20,500
let's encrypt client you can see it's

00:19:17,620 --> 00:19:22,540
mostly people using our official Python

00:19:20,500 --> 00:19:25,330
client and then their smaller numbers

00:19:22,540 --> 00:19:29,380
using like the go caddy client and so

00:19:25,330 --> 00:19:31,690
forth if you're interested in building a

00:19:29,380 --> 00:19:34,090
let's encrypt client for you know some

00:19:31,690 --> 00:19:36,130
life for some framework or from server

00:19:34,090 --> 00:19:39,520
for some server where they're currently

00:19:36,130 --> 00:19:41,350
isn't one it's pretty easy um I'll just

00:19:39,520 --> 00:19:42,970
quickly give you like a high-level

00:19:41,350 --> 00:19:45,340
overview of how to do that but you can

00:19:42,970 --> 00:19:47,860
find all our code on github and you can

00:19:45,340 --> 00:19:49,420
look at our Python interfaces file for

00:19:47,860 --> 00:19:52,360
like the exact interface you should

00:19:49,420 --> 00:19:55,060
implement but basically it's pretty it's

00:19:52,360 --> 00:19:57,220
it's pretty simple there's a you have to

00:19:55,060 --> 00:19:59,620
implement it an Authenticator which is

00:19:57,220 --> 00:20:01,270
the part that proves to the let's

00:19:59,620 --> 00:20:02,269
encrypt certificate authority that's

00:20:01,270 --> 00:20:05,119
someone

00:20:02,269 --> 00:20:08,539
actually owns their domain name so you

00:20:05,119 --> 00:20:11,389
have to get challenges perform the

00:20:08,539 --> 00:20:12,889
challenges and then revert changes that

00:20:11,389 --> 00:20:15,080
were done to the server in order to do

00:20:12,889 --> 00:20:17,029
their challenges the protocol is a

00:20:15,080 --> 00:20:20,389
little bit gnarly so I won't get into

00:20:17,029 --> 00:20:23,839
the details but it's all in there and

00:20:20,389 --> 00:20:26,719
then ops and then you can implement this

00:20:23,839 --> 00:20:29,509
kind of optional installer part which is

00:20:26,719 --> 00:20:31,789
what actually puts the certificate into

00:20:29,509 --> 00:20:34,459
the server and sets up SSL and takes

00:20:31,789 --> 00:20:36,889
care of renewal so there's a lot more

00:20:34,459 --> 00:20:39,139
stuff going on here like figuring out

00:20:36,889 --> 00:20:42,109
what domain names someone has set up on

00:20:39,139 --> 00:20:44,539
their server figuring out where to

00:20:42,109 --> 00:20:47,599
deploy the cert where like which folders

00:20:44,539 --> 00:20:49,099
it's been set up in and so forth it's

00:20:47,599 --> 00:20:52,369
probably making your eyes bleed so I'm

00:20:49,099 --> 00:20:54,139
going to gloss over the slide but at the

00:20:52,369 --> 00:20:56,389
end of the day the point of let's

00:20:54,139 --> 00:20:59,029
encrypt is that it's easy for people off

00:20:56,389 --> 00:21:01,099
or server operators to use and so I'm

00:20:59,029 --> 00:21:03,289
gonna show you how easy it is hopefully

00:21:01,099 --> 00:21:04,940
in this one simple slide you can get

00:21:03,289 --> 00:21:07,339
clone let's encrypt go into your

00:21:04,940 --> 00:21:09,979
directory and just run lets approved

00:21:07,339 --> 00:21:12,589
Auto to install and then once that's

00:21:09,979 --> 00:21:13,549
done just run let's encrypt Apache to

00:21:12,589 --> 00:21:15,440
set up on Apache

00:21:13,549 --> 00:21:18,320
and in the future you'll be able to run

00:21:15,440 --> 00:21:20,989
let's encrypt - - - - - engine X but I

00:21:18,320 --> 00:21:23,029
think that's not not fully supported yet

00:21:20,989 --> 00:21:25,459
and then later when you want to renew

00:21:23,029 --> 00:21:27,379
assert to say let's equip renew and in

00:21:25,459 --> 00:21:29,629
the unfortunate case that you have to

00:21:27,379 --> 00:21:32,629
revoke a certificate let's encrypt

00:21:29,629 --> 00:21:34,249
provoke so that's it's pretty much as

00:21:32,629 --> 00:21:37,969
easy as like as it can get

00:21:34,249 --> 00:21:38,959
okay and people are using this and just

00:21:37,969 --> 00:21:42,320
to prove it to you

00:21:38,959 --> 00:21:44,690
this is this was real Firefox telemetry

00:21:42,320 --> 00:21:48,440
data of the percentage of page loads

00:21:44,690 --> 00:21:50,179
that use HTTPS and as you can see as of

00:21:48,440 --> 00:21:53,899
the let's encrypt launch the slope has

00:21:50,179 --> 00:21:55,549
gone up visibly so I think let's encrypt

00:21:53,899 --> 00:21:57,139
is making a difference in the world in

00:21:55,549 --> 00:22:01,190
terms of who you how many people use

00:21:57,139 --> 00:22:03,320
HTTPS so let's encrypt is hopefully

00:22:01,190 --> 00:22:04,609
gonna make the Internet great again not

00:22:03,320 --> 00:22:06,829
that it's not already great it's

00:22:04,609 --> 00:22:09,469
actually already pretty great and if you

00:22:06,829 --> 00:22:13,059
want to help here are some links that's

00:22:09,469 --> 00:22:13,059

YouTube URL: https://www.youtube.com/watch?v=n9Fe68xgKUw


