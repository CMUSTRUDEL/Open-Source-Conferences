Title: Anand Vemuri: Offensive and Defensive Strategies for Client-Side JS Security - JSConf Budapest 2016
Publication date: 2016-06-16
Playlist: JSConf Budapest 2016
Description: 
	Secure software development principles have become of paramount importance in recent times. Studies have revealed that corporate cyber security breaches have most frequently occurred at the web application layer. Furthermore, within the web application security landscape, client-side attack vectors have been known to be particularly dangerous if exploited. Most client-side security resources tend to primarily discuss Cross-Site Scripting (XSS) exploits and remediation tips.

This talk will specifically focus on the other less common client-side vulnerabilities that are not as frequently discussed. Intentionally vulnerable applications developed with client-side JavaScript frameworks will be attacked and exploited live. Remediation strategies will also be discussed so that developers have tools to prevent these vulnerabilities. Through strengthening the security posture of JavaScript applications, we can take strides towards creating a more secure Internet.

http://jsconfbp.com/speakers/anand-vemuri.html
Captions: 
	00:00:04,330 --> 00:00:16,480
sorry I don't mean to okay sorry about

00:00:09,820 --> 00:00:18,279
that um so yeah this is who I am and so

00:00:16,480 --> 00:00:20,320
we're going to be talking about security

00:00:18,279 --> 00:00:23,199
best practices today and they say that

00:00:20,320 --> 00:00:24,400
you know in defensive security you have

00:00:23,199 --> 00:00:26,320
to like prevent against a lot of

00:00:24,400 --> 00:00:28,560
security vulnerabilities and I find that

00:00:26,320 --> 00:00:31,240
the easiest way to really prevent

00:00:28,560 --> 00:00:32,920
against your you know security

00:00:31,240 --> 00:00:34,300
vulnerabilities on your application is

00:00:32,920 --> 00:00:36,370
to have a really good understanding of

00:00:34,300 --> 00:00:37,570
the offensive perspective so we're going

00:00:36,370 --> 00:00:40,000
to take a little bit of an offensive

00:00:37,570 --> 00:00:43,059
stance today as we go and go ahead and

00:00:40,000 --> 00:00:45,070
break the web so just a quick raise of

00:00:43,059 --> 00:00:47,559
hands how many of you guys are are

00:00:45,070 --> 00:00:49,360
hackers how many of you have worked with

00:00:47,559 --> 00:00:52,440
security either developing secure

00:00:49,360 --> 00:00:55,089
software or just loosely like using

00:00:52,440 --> 00:00:58,390
using some kind of security concept just

00:00:55,089 --> 00:00:59,589
raise your hand awesome and that's that

00:00:58,390 --> 00:01:00,940
that's good i'd like to see a lot of

00:00:59,589 --> 00:01:03,040
people doing that because i mean that

00:01:00,940 --> 00:01:07,360
we're developing secure content which is

00:01:03,040 --> 00:01:08,770
good for me as a user to know but yep so

00:01:07,360 --> 00:01:12,100
I'd like to take you on a story that was

00:01:08,770 --> 00:01:13,720
kind of the motivation for this this

00:01:12,100 --> 00:01:14,980
talk really and it starts with this

00:01:13,720 --> 00:01:17,560
vulnerability called cross-site

00:01:14,980 --> 00:01:20,320
scripting these cross-site scripting is

00:01:17,560 --> 00:01:23,020
a vulnerability that it's it's basically

00:01:20,320 --> 00:01:24,040
you know people make a very big deal out

00:01:23,020 --> 00:01:25,360
of it it's considered to be one of the

00:01:24,040 --> 00:01:28,890
most critical vulnerabilities and it's a

00:01:25,360 --> 00:01:32,470
very serious vulnerability as well and

00:01:28,890 --> 00:01:34,090
it it's a it's a vulnerability that

00:01:32,470 --> 00:01:36,040
attacks users you can think of it as a

00:01:34,090 --> 00:01:38,440
client side JavaScript eject injection

00:01:36,040 --> 00:01:41,409
attack so basically if somebody is a

00:01:38,440 --> 00:01:42,790
user I can inject my arbitrary script

00:01:41,409 --> 00:01:44,200
into their browser and have their

00:01:42,790 --> 00:01:47,229
browser run whatever I want it you're on

00:01:44,200 --> 00:01:50,260
if an application is vulnerable now I

00:01:47,229 --> 00:01:52,150
would not do anything malicious

00:01:50,260 --> 00:01:53,979
personally but I know that there are

00:01:52,150 --> 00:01:56,590
many people out there who if given that

00:01:53,979 --> 00:01:58,030
ability would use it for no good so we

00:01:56,590 --> 00:02:01,180
want to prevent our applications from

00:01:58,030 --> 00:02:02,920
these kind of attacks so how does it

00:02:01,180 --> 00:02:05,950
work well it starts with a really evil

00:02:02,920 --> 00:02:09,909
guy and this guy sends a malicious

00:02:05,950 --> 00:02:12,190
request to an innocent victim the victim

00:02:09,909 --> 00:02:13,480
will then click on the link or whatever

00:02:12,190 --> 00:02:14,050
it might be maybe it's stored in the

00:02:13,480 --> 00:02:16,660
payload

00:02:14,050 --> 00:02:18,550
hidden the DOM and the content has done

00:02:16,660 --> 00:02:20,350
served the user and the script executes

00:02:18,550 --> 00:02:28,570
and this is a typical scenario that we

00:02:20,350 --> 00:02:30,370
see for cross-site scripting so coming

00:02:28,570 --> 00:02:31,660
into the application security space I

00:02:30,370 --> 00:02:33,310
was very excited by these kind of

00:02:31,660 --> 00:02:35,080
vulnerabilities I would you know before

00:02:33,310 --> 00:02:36,700
I had any real formal training and

00:02:35,080 --> 00:02:38,680
application security i would i would

00:02:36,700 --> 00:02:41,170
read up about these vulnerabilities and

00:02:38,680 --> 00:02:43,390
feel very very elite and a hacker like

00:02:41,170 --> 00:02:46,600
because i was able to inject JavaScript

00:02:43,390 --> 00:02:49,690
into my friends pages and just be in the

00:02:46,600 --> 00:02:51,780
elite hacker so when I when I one of a a

00:02:49,690 --> 00:02:55,840
client assessment that I was working on

00:02:51,780 --> 00:02:58,630
I came into a very interesting scenario

00:02:55,840 --> 00:03:00,610
and you know it would be fun for me to

00:02:58,630 --> 00:03:02,200
tell you about it but it would be even

00:03:00,610 --> 00:03:06,130
more exciting for me to show you so I'd

00:03:02,200 --> 00:03:08,590
like to start hacking and quick shout

00:03:06,130 --> 00:03:12,270
out to my colleagues Ken Toller and

00:03:08,590 --> 00:03:15,460
jelly Bedoya for creating a open-source

00:03:12,270 --> 00:03:18,370
vulnerable node.js application so you

00:03:15,460 --> 00:03:20,770
guys can this github link is the is the

00:03:18,370 --> 00:03:22,060
repo and you guys can use this for your

00:03:20,770 --> 00:03:23,709
own hacking pleasure it's it's

00:03:22,060 --> 00:03:27,090
completely intentionally vulnerable so

00:03:23,709 --> 00:03:27,090
you can practice all your skills on it

00:03:27,150 --> 00:03:37,690
okay so i think i have this thing

00:03:30,550 --> 00:03:39,280
started on my localhost 3000 okay and

00:03:37,690 --> 00:03:41,500
this is the application and what i'm

00:03:39,280 --> 00:03:45,760
going to be doing is I'm going to be

00:03:41,500 --> 00:03:47,440
using a intercepting proxy called burp

00:03:45,760 --> 00:03:49,510
suite and what burp suite is is

00:03:47,440 --> 00:03:51,820
basically every time I submit a request

00:03:49,510 --> 00:03:54,190
to the server from the client rather

00:03:51,820 --> 00:03:56,800
than actually authenticating it's going

00:03:54,190 --> 00:03:57,940
to sorry rather than actually sending it

00:03:56,800 --> 00:03:59,500
directly to the server it's going to

00:03:57,940 --> 00:04:00,850
it's going to go through my proxy and

00:03:59,500 --> 00:04:11,470
then my proxy will send the request to

00:04:00,850 --> 00:04:13,780
the server so let me try logging in okay

00:04:11,470 --> 00:04:16,360
and there you see my password but this

00:04:13,780 --> 00:04:18,160
is the this is the login request to the

00:04:16,360 --> 00:04:20,260
server and so we can interest let the

00:04:18,160 --> 00:04:22,780
intercept go through and we're testing

00:04:20,260 --> 00:04:25,330
the application and it's basically like

00:04:22,780 --> 00:04:29,080
it's a fork of the wine cellar backbone

00:04:25,330 --> 00:04:30,880
tutorial app written in node but it's

00:04:29,080 --> 00:04:33,250
got some added features because it's

00:04:30,880 --> 00:04:34,900
vulnerable and you know we're just kind

00:04:33,250 --> 00:04:36,700
of when you're starting to test the

00:04:34,900 --> 00:04:38,260
application we're just kind of looking

00:04:36,700 --> 00:04:40,420
around to see get it getting a feel for

00:04:38,260 --> 00:04:43,300
things and we see like okay like we can

00:04:40,420 --> 00:04:46,750
edit these fields and so okay well why

00:04:43,300 --> 00:04:48,580
don't I do like just type something in

00:04:46,750 --> 00:04:53,310
for fun and see see what happens I'll

00:04:48,580 --> 00:04:55,540
turn my interceptor on and I'll save and

00:04:53,310 --> 00:04:57,310
my request comes through and it looks

00:04:55,540 --> 00:05:01,060
like it's a JSON request that's sitting

00:04:57,310 --> 00:05:03,190
up put to my server in back okay this is

00:05:01,060 --> 00:05:06,300
this is the expected behavior now let's

00:05:03,190 --> 00:05:08,590
try to do something malicious and

00:05:06,300 --> 00:05:12,190
JavaScript starts with a script i

00:05:08,590 --> 00:05:16,260
believe and we'll put a pop-up notifying

00:05:12,190 --> 00:05:16,260
our users that they have been hacked

00:05:17,850 --> 00:05:25,860
i'll hit save okay nothing looks like it

00:05:22,240 --> 00:05:31,210
really happened not super exciting oh

00:05:25,860 --> 00:05:33,490
look our pop-up just fired so this this

00:05:31,210 --> 00:05:35,680
is a clearly vulnerable to cross-site

00:05:33,490 --> 00:05:39,669
scripting now we've injected a malicious

00:05:35,680 --> 00:05:41,919
about malicious URL into or script into

00:05:39,669 --> 00:05:45,430
our page moreover every time we load

00:05:41,919 --> 00:05:49,090
this page again it's going to come back

00:05:45,430 --> 00:05:54,240
again this is a stored cross-site

00:05:49,090 --> 00:05:54,240
scripting attack and so I'm sitting here

00:05:55,830 --> 00:06:00,729
and I'm really excited now because I'm

00:05:58,090 --> 00:06:03,280
able to go to my client and tell them oh

00:06:00,729 --> 00:06:04,930
my gosh like we found stored cross-site

00:06:03,280 --> 00:06:07,300
scripting on your application this is a

00:06:04,930 --> 00:06:09,130
really serious deal this is I mean this

00:06:07,300 --> 00:06:11,140
is like their bug bounty programs that

00:06:09,130 --> 00:06:12,669
pay upwards of ten thousand dollars for

00:06:11,140 --> 00:06:15,430
finding you know flaws like this on

00:06:12,669 --> 00:06:17,229
their application so I am extremely

00:06:15,430 --> 00:06:18,880
excited and I tell my client this and

00:06:17,229 --> 00:06:20,830
I'm expecting them to be you know

00:06:18,880 --> 00:06:21,449
writing me a million-dollar check and

00:06:20,830 --> 00:06:24,419
getting

00:06:21,449 --> 00:06:26,550
no a public news article about how I

00:06:24,419 --> 00:06:29,580
saved their infrastructure and I'm just

00:06:26,550 --> 00:06:32,069
really excited about this unfortunately

00:06:29,580 --> 00:06:34,949
the customer is not really impressed and

00:06:32,069 --> 00:06:36,900
I'm wondering why is it that you know

00:06:34,949 --> 00:06:38,819
you might not be impressed by this

00:06:36,900 --> 00:06:40,469
vulnerability I mean this is a really

00:06:38,819 --> 00:06:43,529
critical vulnerability and I was able to

00:06:40,469 --> 00:06:44,639
easily demonstrate it so I'm like no

00:06:43,529 --> 00:06:46,080
this is actually a really serious

00:06:44,639 --> 00:06:49,379
problem you should you should take a

00:06:46,080 --> 00:06:51,449
look at it and they they're like no and

00:06:49,379 --> 00:06:55,020
there's two reasons why they don't care

00:06:51,449 --> 00:06:58,469
about it the first reason is that fur

00:06:55,020 --> 00:07:01,650
starters the the request that I've

00:06:58,469 --> 00:07:04,499
demonstrated happens in a you know in a

00:07:01,650 --> 00:07:07,439
put request and so there's a vulnerable

00:07:04,499 --> 00:07:10,430
parameter in the put request and the

00:07:07,439 --> 00:07:13,020
only way for me to actually attack the

00:07:10,430 --> 00:07:15,389
application is if I were was able to

00:07:13,020 --> 00:07:16,710
intercept the put request and inject my

00:07:15,389 --> 00:07:19,770
malicious content and send it to the

00:07:16,710 --> 00:07:21,120
server right now this process is really

00:07:19,770 --> 00:07:23,370
difficult to do unless you're just

00:07:21,120 --> 00:07:24,899
attacking yourself this is the clients

00:07:23,370 --> 00:07:28,379
logic as well I mean there's there's no

00:07:24,899 --> 00:07:30,749
way that a user who we trust to use our

00:07:28,379 --> 00:07:32,610
server would would do this to themselves

00:07:30,749 --> 00:07:34,740
so I don't really think that this is a

00:07:32,610 --> 00:07:36,629
big deal I don't really see any huge

00:07:34,740 --> 00:07:37,949
need to fix from this so unless you can

00:07:36,629 --> 00:07:41,039
show us something else I think you

00:07:37,949 --> 00:07:42,749
should just try harder secondly the

00:07:41,039 --> 00:07:45,300
application is not even exposed to the

00:07:42,749 --> 00:07:48,089
public internet it's a private server so

00:07:45,300 --> 00:07:49,770
you know I can't even go to their

00:07:48,089 --> 00:07:51,539
application and test it i have to go

00:07:49,770 --> 00:07:57,419
through some kind of VPN that only they

00:07:51,539 --> 00:07:59,159
have access to so i'm a little dejected

00:07:57,419 --> 00:08:02,009
by this because i put a lot of effort

00:07:59,159 --> 00:08:04,229
into this vulnerability and it didn't

00:08:02,009 --> 00:08:05,999
really make much of an impact and in

00:08:04,229 --> 00:08:08,310
fact they're they're thinking about

00:08:05,999 --> 00:08:09,930
letting this vulnerability just go and

00:08:08,310 --> 00:08:13,499
slide without really demonstrating any

00:08:09,930 --> 00:08:17,550
real impact from it and so I feel a

00:08:13,499 --> 00:08:19,439
little dejected off by that but I sit

00:08:17,550 --> 00:08:22,469
back and I ask myself two very important

00:08:19,439 --> 00:08:24,870
questions one how do we exploit

00:08:22,469 --> 00:08:27,599
vulnerabilities that require victims to

00:08:24,870 --> 00:08:29,310
attack themselves so to speak secondly

00:08:27,599 --> 00:08:30,990
how do we attack web applications on a

00:08:29,310 --> 00:08:34,169
private network like that we can't even

00:08:30,990 --> 00:08:35,080
access I mean is application security

00:08:34,169 --> 00:08:37,840
limited to just

00:08:35,080 --> 00:08:40,260
public things so after doing a little

00:08:37,840 --> 00:08:43,690
bit of googling and research and study I

00:08:40,260 --> 00:08:47,020
came across this class of a text called

00:08:43,690 --> 00:08:49,990
to surf attacks on Caesar for tax are

00:08:47,020 --> 00:08:52,150
kind of the vulnerability that many

00:08:49,990 --> 00:08:54,190
people might not have heard about but

00:08:52,150 --> 00:08:56,140
can actually be used in very crucial

00:08:54,190 --> 00:09:01,600
situations to really deliver some very

00:08:56,140 --> 00:09:04,780
cool cool results so Caesar stands for

00:09:01,600 --> 00:09:06,160
cross-site request forgery so what this

00:09:04,780 --> 00:09:08,020
basically means is if we look at how

00:09:06,160 --> 00:09:11,170
this works is if we have you know our

00:09:08,020 --> 00:09:12,550
attacker mallory and our victim bob and

00:09:11,170 --> 00:09:15,760
let's say that bob is on the internal

00:09:12,550 --> 00:09:20,080
network or maybe has access to a server

00:09:15,760 --> 00:09:23,920
and we want to make bob do something to

00:09:20,080 --> 00:09:26,110
attack himself essentially or send off a

00:09:23,920 --> 00:09:28,260
request as though we were Bob what we

00:09:26,110 --> 00:09:30,970
could do is Mallory can set up a

00:09:28,260 --> 00:09:33,910
malicious URL from a third-party domain

00:09:30,970 --> 00:09:36,250
and because both people have access to

00:09:33,910 --> 00:09:38,830
the public Internet when Bob goes to

00:09:36,250 --> 00:09:41,410
this domain and interacts with it that

00:09:38,830 --> 00:09:43,960
page will then submit a state changing

00:09:41,410 --> 00:09:45,610
request to the third part to the

00:09:43,960 --> 00:09:47,920
original domain that we never had access

00:09:45,610 --> 00:09:50,530
to so this is the same kind of logic

00:09:47,920 --> 00:09:53,110
that we use if you go to facebook com or

00:09:50,530 --> 00:09:55,600
gmail com in one browser and then you

00:09:53,110 --> 00:09:57,220
open up another tab and then you you go

00:09:55,600 --> 00:09:58,840
to facebook com you don't have to keep

00:09:57,220 --> 00:10:00,430
real authentic eating because the

00:09:58,840 --> 00:10:02,290
cookies are stored in your browser and

00:10:00,430 --> 00:10:04,030
every time you send a request to that

00:10:02,290 --> 00:10:05,860
domain the cookies are sent with that

00:10:04,030 --> 00:10:09,880
request even if you're not necessarily

00:10:05,860 --> 00:10:11,740
your origin isn't that that domain and

00:10:09,880 --> 00:10:13,510
so we're basically leveraging this

00:10:11,740 --> 00:10:15,880
fundamental flaw that was you know the

00:10:13,510 --> 00:10:19,630
internet was developed with to attack

00:10:15,880 --> 00:10:23,800
users who we can't really access you

00:10:19,630 --> 00:10:33,550
know privately so let's let's see how

00:10:23,800 --> 00:10:36,480
this works okay well I have here on a

00:10:33,550 --> 00:10:36,480
public server a

00:10:44,920 --> 00:10:50,029
there we go so here is a public page you

00:10:48,800 --> 00:10:51,440
might have gotten a pop-up like this

00:10:50,029 --> 00:10:57,670
before when you were casually browsing

00:10:51,440 --> 00:10:59,899
the web and this is a just you know a

00:10:57,670 --> 00:11:02,810
third-party domain it's completely not

00:10:59,899 --> 00:11:09,820
associated with our med seller

00:11:02,810 --> 00:11:13,600
application but it is very convincing I

00:11:09,820 --> 00:11:15,949
would like to get 1 million dollars and

00:11:13,600 --> 00:11:20,149
it's on the internet so it can't be a

00:11:15,949 --> 00:11:21,410
lie so so I'll turn my interceptor on

00:11:20,149 --> 00:11:22,730
cuz I'm a little cautious I want to see

00:11:21,410 --> 00:11:28,190
what's actually happening behind the

00:11:22,730 --> 00:11:29,750
scenes I'll submit this request if you

00:11:28,190 --> 00:11:31,910
take a look here what's happening is

00:11:29,750 --> 00:11:35,980
we're sending a post request to register

00:11:31,910 --> 00:11:40,579
an admin user by the name of lolcatz

00:11:35,980 --> 00:11:42,680
until let's just see if this works and

00:11:40,579 --> 00:11:46,069
we're actually redirected to the Maine

00:11:42,680 --> 00:11:54,800
med seller page so let's try logging in

00:11:46,069 --> 00:11:57,380
with our new user LOLOL and of course

00:11:54,800 --> 00:11:59,449
we're hacked but now as you can see we

00:11:57,380 --> 00:12:03,350
are we're logged in as an administrative

00:11:59,449 --> 00:12:06,110
user because we've exploited the Caesar

00:12:03,350 --> 00:12:08,600
phoner ability on this application now

00:12:06,110 --> 00:12:10,060
one thing to note is that the way that

00:12:08,600 --> 00:12:12,560
this application works is that there are

00:12:10,060 --> 00:12:14,389
admin users and normal roles and so

00:12:12,560 --> 00:12:16,040
we've actually created an admin account

00:12:14,389 --> 00:12:18,740
which is why we're able to see all of

00:12:16,040 --> 00:12:21,579
the medicines even the prescription

00:12:18,740 --> 00:12:24,829
medicines in this case and so this is a

00:12:21,579 --> 00:12:28,699
you know we've just kind of exploited

00:12:24,829 --> 00:12:34,220
this vulnerability using a boner ability

00:12:28,699 --> 00:12:36,800
that we didn't think was possible before

00:12:34,220 --> 00:12:38,779
and so we're really happy and we go back

00:12:36,800 --> 00:12:40,730
to the clients and we tell them you know

00:12:38,779 --> 00:12:43,430
we've used to surf and now we are able

00:12:40,730 --> 00:12:45,949
to attack your application even if

00:12:43,430 --> 00:12:49,459
you're not publicly accessible so we're

00:12:45,949 --> 00:12:51,699
making progress they come back to us and

00:12:49,459 --> 00:12:53,169
they say you know that's cool but we use

00:12:51,699 --> 00:12:55,629
web services and everything is handled

00:12:53,169 --> 00:12:57,220
by a JSON request and so the whole logic

00:12:55,629 --> 00:13:00,129
behind your attack is that you're

00:12:57,220 --> 00:13:03,850
forging an HTML reform to be submitted

00:13:00,129 --> 00:13:06,790
to my server and because we can't forge

00:13:03,850 --> 00:13:09,660
an HTML form to send json requests this

00:13:06,790 --> 00:13:16,660
is really not an issue for us either so

00:13:09,660 --> 00:13:18,459
try harder and so it's a little bit of a

00:13:16,660 --> 00:13:20,529
setback now because even though we found

00:13:18,459 --> 00:13:23,889
we've made progress we're still not able

00:13:20,529 --> 00:13:25,869
to you know completely convince them

00:13:23,889 --> 00:13:31,419
that we can chain exploits together and

00:13:25,869 --> 00:13:33,129
make danger happen but then we start

00:13:31,419 --> 00:13:35,139
thinking about things and the way that

00:13:33,129 --> 00:13:39,609
the JavaScript works and JavaScript

00:13:35,139 --> 00:13:42,069
servers handle requests and we realize

00:13:39,609 --> 00:13:44,339
that you know JSON posts are not

00:13:42,069 --> 00:13:48,100
completely safe if you think about how

00:13:44,339 --> 00:13:49,929
you know the server handles request

00:13:48,100 --> 00:13:51,220
server-side you'llyou'll most of you

00:13:49,929 --> 00:13:52,449
have probably written if you've written

00:13:51,220 --> 00:13:54,579
server-side code you've probably written

00:13:52,449 --> 00:13:55,929
a function similar to this we have fun

00:13:54,579 --> 00:13:57,939
can request response and then you're

00:13:55,929 --> 00:14:02,709
setting some body parameter from your

00:13:57,939 --> 00:14:06,879
post under request body and request body

00:14:02,709 --> 00:14:11,399
is actually a JSON so what what's

00:14:06,879 --> 00:14:13,959
interesting here is that well you know

00:14:11,399 --> 00:14:15,279
even though the application is expecting

00:14:13,959 --> 00:14:17,739
something that looks like this which

00:14:15,279 --> 00:14:22,419
with encoding type JSON if you don't

00:14:17,739 --> 00:14:24,459
specifically say that I'm only going to

00:14:22,419 --> 00:14:26,709
accept JSON objects and I'm not going to

00:14:24,459 --> 00:14:28,539
accept anything else if you send a

00:14:26,709 --> 00:14:33,309
request that looks like this of text

00:14:28,539 --> 00:14:35,259
type plane it'll still come as a request

00:14:33,309 --> 00:14:37,239
object and you know and the server side

00:14:35,259 --> 00:14:42,850
it handles it as a JSON so we can

00:14:37,239 --> 00:14:45,339
theoretically you know use use our

00:14:42,850 --> 00:14:47,470
exploit to you know forge an HTML

00:14:45,339 --> 00:14:52,569
request as though we're in HTML form and

00:14:47,470 --> 00:14:53,769
and exploit the server but this time

00:14:52,569 --> 00:14:54,759
let's have some fun because we've

00:14:53,769 --> 00:14:56,259
already discovered that there's a

00:14:54,759 --> 00:14:57,999
cross-site scripting vulnerability and

00:14:56,259 --> 00:14:59,529
that's really what we're after how to

00:14:57,999 --> 00:15:01,929
exploit that and I'll site scripting is

00:14:59,529 --> 00:15:03,819
a very serious problem and in order to

00:15:01,929 --> 00:15:04,499
help us facilitate the exploitation of

00:15:03,819 --> 00:15:06,629
cross

00:15:04,499 --> 00:15:08,849
scripting we have what's called browser

00:15:06,629 --> 00:15:10,619
exploitation framework which if you guys

00:15:08,849 --> 00:15:12,389
haven't heard of this before is really

00:15:10,619 --> 00:15:14,399
really cool it basically makes

00:15:12,389 --> 00:15:16,799
exploiting cross-site scripting almost

00:15:14,399 --> 00:15:21,629
like a point-and-click kind of thing and

00:15:16,799 --> 00:15:31,129
so we're going to use this now and we

00:15:21,629 --> 00:15:31,129
have here very conveniently we have

00:15:35,740 --> 00:15:45,550
okay so this is another seesaw request

00:15:38,820 --> 00:15:47,770
and this is a even more convincing

00:15:45,550 --> 00:15:49,720
argument in the last because we didn't

00:15:47,770 --> 00:15:53,260
win anything last time but telling us

00:15:49,720 --> 00:15:54,790
this time we will actually win let's

00:15:53,260 --> 00:15:58,120
take a look at what this is actually

00:15:54,790 --> 00:15:59,890
doing flips view the page source and if

00:15:58,120 --> 00:16:03,030
you can see over here we have you know

00:15:59,890 --> 00:16:06,370
we're constructing our form but inside

00:16:03,030 --> 00:16:08,520
the name parameter we actually have a

00:16:06,370 --> 00:16:12,310
cross-site scripting payload which is

00:16:08,520 --> 00:16:16,690
injecting this seemingly harmless script

00:16:12,310 --> 00:16:20,370
into our page so let's see what happens

00:16:16,690 --> 00:16:23,520
when we do that we are going to submit a

00:16:20,370 --> 00:16:27,970
JSON request now while our request by

00:16:23,520 --> 00:16:29,410
HTML form and we get a JSON response

00:16:27,970 --> 00:16:31,060
back because that's what happens when

00:16:29,410 --> 00:16:32,530
you send a JSON request and you know if

00:16:31,060 --> 00:16:34,000
I was just a user and had no idea what I

00:16:32,530 --> 00:16:35,500
clicked on I'm just really bummed that I

00:16:34,000 --> 00:16:38,170
didn't win a million bucks right now for

00:16:35,500 --> 00:16:41,080
the second time thought I'd learned the

00:16:38,170 --> 00:16:46,780
lesson the first time but if you look at

00:16:41,080 --> 00:16:53,020
our browsed meds we see this interesting

00:16:46,780 --> 00:16:56,830
guy here and this is a this is we've

00:16:53,020 --> 00:16:59,890
just created a new medicine and we see

00:16:56,830 --> 00:17:02,170
that this script is here and I mean

00:16:59,890 --> 00:17:03,700
there's no pop up there's no there's no

00:17:02,170 --> 00:17:05,260
real indication that we've been hacked

00:17:03,700 --> 00:17:07,360
if I didn't really look at this page I

00:17:05,260 --> 00:17:11,830
wouldn't know what's happening but as it

00:17:07,360 --> 00:17:15,750
turns out secretly enough I have a

00:17:11,830 --> 00:17:19,180
server here that is running Kali Linux

00:17:15,750 --> 00:17:20,650
which is an offensive security linux

00:17:19,180 --> 00:17:22,420
distribution and by the way if you ever

00:17:20,650 --> 00:17:24,520
walk into a coffee shop and you see

00:17:22,420 --> 00:17:26,290
somebody using kali linux disconnect

00:17:24,520 --> 00:17:28,780
from the internet and run away because

00:17:26,290 --> 00:17:30,730
there is no reason for somebody to use

00:17:28,780 --> 00:17:33,580
this unless they are professional

00:17:30,730 --> 00:17:39,430
penetration tester or like doing

00:17:33,580 --> 00:17:41,770
something that's not you know good so we

00:17:39,430 --> 00:17:44,670
will check out what's going on in the

00:17:41,770 --> 00:17:44,670
world of beef

00:17:52,760 --> 00:17:57,419
okay and now we see that our IP address

00:17:55,470 --> 00:17:59,880
is online and we actually have remote

00:17:57,419 --> 00:18:01,350
access our to our browser and we see all

00:17:59,880 --> 00:18:03,529
of our browser information here we see

00:18:01,350 --> 00:18:06,570
that it is a you know Mozilla Firefox

00:18:03,529 --> 00:18:08,010
little LA and so this stuff is pretty

00:18:06,570 --> 00:18:09,269
cool but what's really interesting is

00:18:08,010 --> 00:18:20,159
that we have some commands that we can

00:18:09,269 --> 00:18:22,380
kick off and let's see so there are some

00:18:20,159 --> 00:18:24,179
very interesting exploits here you can

00:18:22,380 --> 00:18:26,070
find the session cookie for the users

00:18:24,179 --> 00:18:28,409
you can install a keylogger you can do a

00:18:26,070 --> 00:18:29,580
lot of really cool stuff but you know I

00:18:28,409 --> 00:18:31,590
never really get a chance to demonstrate

00:18:29,580 --> 00:18:33,630
any of the more fun ones and because

00:18:31,590 --> 00:18:35,850
we're at JS conf we can kind of have

00:18:33,630 --> 00:18:38,880
some fun with this so let's try to play

00:18:35,850 --> 00:18:42,570
a sound so I can try to stream my

00:18:38,880 --> 00:18:44,370
content through another person's browser

00:18:42,570 --> 00:18:49,649
so I'm going to kick off this this audio

00:18:44,370 --> 00:18:57,139
file and if all works well let's put the

00:18:49,649 --> 00:18:57,139
button and we're just casually browsing

00:19:00,440 --> 00:19:08,250
so we've just demonstrated that I mean

00:19:06,600 --> 00:19:10,620
we're now doing this all remote as well

00:19:08,250 --> 00:19:12,450
so we're able to kick off our own audio

00:19:10,620 --> 00:19:13,769
stream on to the clients browser and

00:19:12,450 --> 00:19:16,049
this is just one of the many instances

00:19:13,769 --> 00:19:19,200
we can control their webcam we can

00:19:16,049 --> 00:19:21,389
control you know do a key key logger get

00:19:19,200 --> 00:19:23,399
their session we can do quite a bit with

00:19:21,389 --> 00:19:24,720
with cross-site scripting and caesar

00:19:23,399 --> 00:19:27,169
combined together it's a very dangerous

00:19:24,720 --> 00:19:27,169
combination

00:19:27,779 --> 00:19:35,499
so so how do we fix this because I mean

00:19:33,220 --> 00:19:37,899
if we're getting to a point where I can

00:19:35,499 --> 00:19:39,669
play my music on your computer they're

00:19:37,899 --> 00:19:41,769
using your web application during work

00:19:39,669 --> 00:19:44,049
hours I'm sure many companies wouldn't

00:19:41,769 --> 00:19:45,669
be very happy about that so we want to

00:19:44,049 --> 00:19:49,659
work on fixing this vulnerability so

00:19:45,669 --> 00:19:51,850
that we don't have to worry about you

00:19:49,659 --> 00:19:53,799
know these kind of attacks in the future

00:19:51,850 --> 00:19:55,450
and the way to do it is really what's

00:19:53,799 --> 00:19:57,370
called a sea surface oken which is a

00:19:55,450 --> 00:20:00,519
cryptographically secure synchronizer

00:19:57,370 --> 00:20:02,110
token pattern so what what this means is

00:20:00,519 --> 00:20:04,389
that when the browser sends a get

00:20:02,110 --> 00:20:05,950
request to the to the web server ideally

00:20:04,389 --> 00:20:09,009
you'd want to create some kind of token

00:20:05,950 --> 00:20:10,720
as either a cookie or a hidden field or

00:20:09,009 --> 00:20:12,399
a header or something that just

00:20:10,720 --> 00:20:13,690
basically authenticates the browser to

00:20:12,399 --> 00:20:15,369
the server and says hey this is the

00:20:13,690 --> 00:20:19,419
right browser this is the browser that's

00:20:15,369 --> 00:20:20,919
intending to make this request if if not

00:20:19,419 --> 00:20:22,960
then you want to completely disregard

00:20:20,919 --> 00:20:25,960
the request so when we submit post

00:20:22,960 --> 00:20:27,909
requests or stain changing operations we

00:20:25,960 --> 00:20:30,990
want to see that see surf token along

00:20:27,909 --> 00:20:35,220
with the request otherwise we would

00:20:30,990 --> 00:20:36,850
reject the request a secondary defense

00:20:35,220 --> 00:20:38,350
mitigation that you could potentially

00:20:36,850 --> 00:20:39,850
have and when we're talking about

00:20:38,350 --> 00:20:41,769
security vulnerability is there's really

00:20:39,850 --> 00:20:43,389
no silver bullet there's just a lot of

00:20:41,769 --> 00:20:45,460
barriers you could potentially bypass

00:20:43,389 --> 00:20:48,700
one so it's a good idea to have multiple

00:20:45,460 --> 00:20:50,860
defense mechanisms in place and so a

00:20:48,700 --> 00:20:52,059
secondary defense a quick band-aid if

00:20:50,860 --> 00:20:54,279
you discovered this in your application

00:20:52,059 --> 00:20:55,960
is by setting the origin header so if

00:20:54,279 --> 00:20:58,210
you do then you're pretty much ensuring

00:20:55,960 --> 00:20:59,889
that only if you validate for the origin

00:20:58,210 --> 00:21:03,100
header which basically says that you

00:20:59,889 --> 00:21:06,249
know only accept requests from the

00:21:03,100 --> 00:21:08,070
origin so you know then you don't have

00:21:06,249 --> 00:21:10,629
to worry about third-party attacks and

00:21:08,070 --> 00:21:12,669
finally we have CSP which is another

00:21:10,629 --> 00:21:14,139
potential secondary measure CST is a

00:21:12,669 --> 00:21:15,820
very big topic content security policy

00:21:14,139 --> 00:21:17,649
these are basically headers that you can

00:21:15,820 --> 00:21:18,879
set in your browser to prevent you know

00:21:17,649 --> 00:21:20,139
malicious scripts from being injected

00:21:18,879 --> 00:21:22,450
it's very good for cross-site scripting

00:21:20,139 --> 00:21:25,299
mitigation and you know other injection

00:21:22,450 --> 00:21:27,129
attacks it's a fairly complicated

00:21:25,299 --> 00:21:28,480
process which marathon talk on its own

00:21:27,129 --> 00:21:30,789
so if you want to learn more about this

00:21:28,480 --> 00:21:36,269
please do either tweet at me or hit me

00:21:30,789 --> 00:21:38,440
up at lunch or anytime you see me and

00:21:36,269 --> 00:21:40,240
before we leave I want to make three

00:21:38,440 --> 00:21:42,850
points regarding Caesar

00:21:40,240 --> 00:21:44,980
one is that random is not the same thing

00:21:42,850 --> 00:21:46,870
as cryptographically secure and so

00:21:44,980 --> 00:21:48,130
cryptographically secure mean i mean

00:21:46,870 --> 00:21:49,929
when you talk about computers there's

00:21:48,130 --> 00:21:52,690
really no such thing as real randomness

00:21:49,929 --> 00:21:55,270
everything a pseudo-random and so if you

00:21:52,690 --> 00:21:57,370
have you know master andum is generating

00:21:55,270 --> 00:21:59,559
32 numbers which you then uses your sis

00:21:57,370 --> 00:22:01,600
your token that might seem very

00:21:59,559 --> 00:22:05,470
uncrackable but the problem is is that

00:22:01,600 --> 00:22:08,230
when you're dealing with very large or

00:22:05,470 --> 00:22:10,240
very large computational devices they

00:22:08,230 --> 00:22:11,559
can use you know the NSA would have the

00:22:10,240 --> 00:22:13,150
computational power to crack that

00:22:11,559 --> 00:22:15,340
because it's not cryptographically

00:22:13,150 --> 00:22:17,200
secure there's a pattern behind it so as

00:22:15,340 --> 00:22:20,020
much as possible if you have to develop

00:22:17,200 --> 00:22:21,820
your own custom Susur which I don't

00:22:20,020 --> 00:22:24,540
recommend but if you have to use

00:22:21,820 --> 00:22:28,230
whatever's cryptographically secure

00:22:24,540 --> 00:22:30,370
secondly implementation of a good C surf

00:22:28,230 --> 00:22:31,679
mitigation is really difficult because

00:22:30,370 --> 00:22:33,730
there's a lot of things to worry about

00:22:31,679 --> 00:22:35,740
method interchange is when you're able

00:22:33,730 --> 00:22:37,360
to submit post requests as get requests

00:22:35,740 --> 00:22:38,800
and if you're able to submit post

00:22:37,360 --> 00:22:41,530
requests get requests well guess what

00:22:38,800 --> 00:22:43,720
typically a lot of your state changing

00:22:41,530 --> 00:22:45,610
operations are just post but if you're

00:22:43,720 --> 00:22:47,110
doing it as yet then there's no real

00:22:45,610 --> 00:22:48,340
protection that some frameworks can

00:22:47,110 --> 00:22:51,429
offer against that attack so you can

00:22:48,340 --> 00:22:53,440
bypass your mitigation just almost by

00:22:51,429 --> 00:22:57,160
switching the verb you could also have

00:22:53,440 --> 00:23:01,059
see sort of token replays in where the

00:22:57,160 --> 00:23:03,309
token will you know if one token can be

00:23:01,059 --> 00:23:05,230
reused multiple times and so if you

00:23:03,309 --> 00:23:06,820
generate a large number of tokens and

00:23:05,230 --> 00:23:08,530
then just you know send them out you can

00:23:06,820 --> 00:23:09,730
potentially have you know the same token

00:23:08,530 --> 00:23:12,970
being used multiple times it's not a

00:23:09,730 --> 00:23:15,670
very robust approach to securing your

00:23:12,970 --> 00:23:17,890
application the token must be tied to

00:23:15,670 --> 00:23:19,809
the user session on the server so if you

00:23:17,890 --> 00:23:22,390
could imagine like if Facebook allowed

00:23:19,809 --> 00:23:24,370
for you know you need to find my C surf

00:23:22,390 --> 00:23:27,429
token and then construct a CSF request

00:23:24,370 --> 00:23:29,050
for your account I could post statuses

00:23:27,429 --> 00:23:30,790
on your behalf by forging a request

00:23:29,050 --> 00:23:31,540
because I could just use my token so

00:23:30,790 --> 00:23:33,850
that wouldn't be a very effective

00:23:31,540 --> 00:23:35,650
measure so we want to make sure that the

00:23:33,850 --> 00:23:37,690
token must be tied to the user session

00:23:35,650 --> 00:23:40,929
you know so only you can use your token

00:23:37,690 --> 00:23:44,950
and if you are using CS or tokens

00:23:40,929 --> 00:23:46,210
exposed in your get parameter as a get

00:23:44,950 --> 00:23:50,280
parameter then the problem that you run

00:23:46,210 --> 00:23:53,620
into is that you could potentially have

00:23:50,280 --> 00:23:55,720
you know logs or some other network

00:23:53,620 --> 00:23:57,760
traffic's see the SI sirve token in the

00:23:55,720 --> 00:24:01,240
network traffic itself and intercept it

00:23:57,760 --> 00:24:03,970
that way and so even though it's you

00:24:01,240 --> 00:24:05,980
know still something you could it's just

00:24:03,970 --> 00:24:08,190
kind of a decoration on top of what the

00:24:05,980 --> 00:24:10,540
what the attacker really has to do to

00:24:08,190 --> 00:24:15,010
exploit so implementation for this is

00:24:10,540 --> 00:24:17,440
quite difficult and finally the cross

00:24:15,010 --> 00:24:18,520
origin recut resource sharing so this

00:24:17,440 --> 00:24:19,960
header is something that's very

00:24:18,520 --> 00:24:21,309
interesting I see this very frequently

00:24:19,960 --> 00:24:23,950
with some of the applications that are

00:24:21,309 --> 00:24:26,350
very enterprise level so what you

00:24:23,950 --> 00:24:28,929
usually see is this header the access

00:24:26,350 --> 00:24:30,400
control allow origin this allows your

00:24:28,929 --> 00:24:33,340
application to be accessible by

00:24:30,400 --> 00:24:34,720
third-party resources and so what this

00:24:33,340 --> 00:24:36,640
means is you can essentially send xhr

00:24:34,720 --> 00:24:38,530
requests from a third-party domain to

00:24:36,640 --> 00:24:41,470
your application if you've set this

00:24:38,530 --> 00:24:44,350
header to allow for that now if you do a

00:24:41,470 --> 00:24:46,660
wild-card approach and you allow for you

00:24:44,350 --> 00:24:48,250
know any origin whatsoever the problem

00:24:46,660 --> 00:24:50,800
that you run into is that you could

00:24:48,250 --> 00:24:53,530
potentially have a situation where you

00:24:50,800 --> 00:24:55,750
have you know an attacker submitting an

00:24:53,530 --> 00:25:00,040
xhr request and forging a request from

00:24:55,750 --> 00:25:01,960
you know from the third-party browser or

00:25:00,040 --> 00:25:03,700
third-party application to your ear

00:25:01,960 --> 00:25:05,380
application but because you're allowed

00:25:03,700 --> 00:25:07,480
to use JavaScript in this case you can

00:25:05,380 --> 00:25:10,929
get a call back to so whereas

00:25:07,480 --> 00:25:13,120
traditional CSF is just for data our

00:25:10,929 --> 00:25:14,679
state changing operations if you enable

00:25:13,120 --> 00:25:16,000
cross-origin resource sharing you could

00:25:14,679 --> 00:25:18,550
potentially even get data exfiltration

00:25:16,000 --> 00:25:20,380
so you get requests become vulnerable at

00:25:18,550 --> 00:25:23,920
that point so make sure that like this

00:25:20,380 --> 00:25:25,330
this wildcard header it's not a good

00:25:23,920 --> 00:25:28,510
thing you should always try to make sure

00:25:25,330 --> 00:25:29,950
that you're able to allow only the

00:25:28,510 --> 00:25:32,980
domains that you need to access your

00:25:29,950 --> 00:25:35,800
application that you trust so here are

00:25:32,980 --> 00:25:38,500
some resources for different JavaScript

00:25:35,800 --> 00:25:39,910
based servers that you can use a

00:25:38,500 --> 00:25:41,050
middleware that you could just plug and

00:25:39,910 --> 00:25:45,130
chug into your application that makes

00:25:41,050 --> 00:25:48,070
this whole ceremony very very easy to

00:25:45,130 --> 00:25:50,440
fix you have like see surf khoa happy

00:25:48,070 --> 00:25:53,970
express you surf I use these all the

00:25:50,440 --> 00:25:56,559
time and you know javascript is very

00:25:53,970 --> 00:25:58,780
lucky in the sense that you can you know

00:25:56,559 --> 00:26:00,070
middleware is very easy so if you were

00:25:58,780 --> 00:26:01,390
doing this in other languages it might

00:26:00,070 --> 00:26:03,340
be more difficult and more of an

00:26:01,390 --> 00:26:05,460
architectural shift in your application

00:26:03,340 --> 00:26:07,770
but you can do this very simply

00:26:05,460 --> 00:26:11,190
and it has a very tremendous security

00:26:07,770 --> 00:26:12,809
impact if you do that so a major

00:26:11,190 --> 00:26:14,309
takeaways that I'd like to deliver here

00:26:12,809 --> 00:26:15,390
are that application security

00:26:14,309 --> 00:26:17,789
vulnerabilities can be used in

00:26:15,390 --> 00:26:19,440
combination so as we saw even though we

00:26:17,789 --> 00:26:21,270
had like a low severity cross-site

00:26:19,440 --> 00:26:22,860
scripting if we were able to combine

00:26:21,270 --> 00:26:25,140
that with a cross-site request forgery

00:26:22,860 --> 00:26:27,210
attack then those two vulnerability is

00:26:25,140 --> 00:26:29,250
combined could then deliver a very

00:26:27,210 --> 00:26:30,750
dangerous attack vector and so just

00:26:29,250 --> 00:26:32,340
because something might seem like it's

00:26:30,750 --> 00:26:33,799
not a very big threat I think the

00:26:32,340 --> 00:26:36,480
important thing to take away from

00:26:33,799 --> 00:26:38,159
application to application security is

00:26:36,480 --> 00:26:39,750
that the context really matters and so

00:26:38,159 --> 00:26:42,600
it really depends on what else is

00:26:39,750 --> 00:26:43,830
President the application no state

00:26:42,600 --> 00:26:45,510
changing operation should be get

00:26:43,830 --> 00:26:47,970
requests if you're doing state changing

00:26:45,510 --> 00:26:49,799
operations as get requests in your web

00:26:47,970 --> 00:26:51,390
application then you're kind of

00:26:49,799 --> 00:26:53,070
complicating the security of your

00:26:51,390 --> 00:26:55,350
application because you have to protect

00:26:53,070 --> 00:26:57,809
see surf on get requests which is never

00:26:55,350 --> 00:27:00,510
easy so as much as possible try to avoid

00:26:57,809 --> 00:27:02,789
this make sure that the csr token is

00:27:00,510 --> 00:27:06,090
cryptographically secure even if you're

00:27:02,789 --> 00:27:08,960
using a trusted like trusted middleware

00:27:06,090 --> 00:27:11,220
provider evil you know krypter krypter

00:27:08,960 --> 00:27:12,990
graffiti evolving and so what might be

00:27:11,220 --> 00:27:15,270
secure now might not be secure 10 years

00:27:12,990 --> 00:27:18,029
from now so if you're seeing a browser

00:27:15,270 --> 00:27:20,159
or a paper from 1999 telling you to use

00:27:18,029 --> 00:27:22,039
a certain algorithm you might want to

00:27:20,159 --> 00:27:24,840
double check that for today's standard

00:27:22,039 --> 00:27:28,070
and finally see search middleware saves

00:27:24,840 --> 00:27:30,659
lives so please do you know fixed

00:27:28,070 --> 00:27:34,080
implement as much as you can mitigations

00:27:30,659 --> 00:27:35,610
for this vulnerability so thank you so

00:27:34,080 --> 00:27:38,399
much if you have any questions you can

00:27:35,610 --> 00:27:41,360
always tweet at me or hit me up at any

00:27:38,399 --> 00:27:41,360
time outside thank

00:27:42,950 --> 00:27:45,010

YouTube URL: https://www.youtube.com/watch?v=qNmOUzxGg0Y


