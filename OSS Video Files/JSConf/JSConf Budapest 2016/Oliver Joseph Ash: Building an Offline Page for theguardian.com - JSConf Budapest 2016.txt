Title: Oliver Joseph Ash: Building an Offline Page for theguardian.com - JSConf Budapest 2016
Publication date: 2016-06-15
Playlist: JSConf Budapest 2016
Description: 
	You’re on a train to work and you open up the Guardian app on your phone. A tunnel surrounds you, but the app still works in very much the same way as it usually would—despite your lack of internet connection, you still get the full experience, only the content shown will be stale. If you tried the same for the Guardian website, however, it wouldn’t load at all. Native apps have long had the tools to deal with these situations, in order to deliver rich user experiences whatever the user’s situation may be. With service workers, the web is catching up. This talk will explain how Oliver used service workers to build an offline page for theguardian.com.

http://jsconfbp.com/speakers/oliver-joseph-ash.html
Captions: 
	00:00:08,630 --> 00:00:13,860
hi everyone okay welcome to Hangover

00:00:11,910 --> 00:00:17,160
 number two I hope you're not

00:00:13,860 --> 00:00:18,779
feeling too however this morning my name

00:00:17,160 --> 00:00:22,140
is Oliver ash you can find me on twitter

00:00:18,779 --> 00:00:24,029
at this user name and today i'm going to

00:00:22,140 --> 00:00:27,540
be talking about how i built an offline

00:00:24,029 --> 00:00:30,060
page for the Guardian com I work at the

00:00:27,540 --> 00:00:32,520
Guardian previously I worked on the

00:00:30,060 --> 00:00:35,130
content management system which is a web

00:00:32,520 --> 00:00:38,010
application you can see here this is

00:00:35,130 --> 00:00:40,320
called composer if you want to hear more

00:00:38,010 --> 00:00:41,880
about that you can come talk to me later

00:00:40,320 --> 00:00:43,920
but essentially this is the tool that

00:00:41,880 --> 00:00:47,360
all the journalists key is to publish

00:00:43,920 --> 00:00:50,880
content to the web and also print and

00:00:47,360 --> 00:00:52,530
now I work on the website and so if you

00:00:50,880 --> 00:00:58,670
hump me into the Guardian com this is

00:00:52,530 --> 00:01:01,890
what it looks like I'm going to begin by

00:00:58,670 --> 00:01:06,090
comparing web and native and how these

00:01:01,890 --> 00:01:09,780
two different platforms compare when it

00:01:06,090 --> 00:01:12,720
comes to performance in a native app

00:01:09,780 --> 00:01:15,060
when you open when you open it it will

00:01:12,720 --> 00:01:16,770
download some content and cash it so the

00:01:15,060 --> 00:01:18,720
next time you're open it and you're

00:01:16,770 --> 00:01:20,729
offline well you just see the stale

00:01:18,720 --> 00:01:22,830
content this is a guardian up I'm

00:01:20,729 --> 00:01:25,470
offline but I can still see the homepage

00:01:22,830 --> 00:01:29,250
I can actually navigate into content and

00:01:25,470 --> 00:01:32,159
I can still read it the same thing if

00:01:29,250 --> 00:01:35,909
the server is down I'll see the stale

00:01:32,159 --> 00:01:37,890
content if I have a poor connection then

00:01:35,909 --> 00:01:40,950
I'll see the stell content whilst we try

00:01:37,890 --> 00:01:42,180
to get the new content that might take a

00:01:40,950 --> 00:01:44,700
long time but at least I'm seeing

00:01:42,180 --> 00:01:46,890
something in the meantime and if I have

00:01:44,700 --> 00:01:48,960
a good connection then I'll briefly see

00:01:46,890 --> 00:01:51,240
the cell content and then I'll see the

00:01:48,960 --> 00:01:52,650
new content once it arrives we will know

00:01:51,240 --> 00:01:56,700
this because we will use native apps

00:01:52,650 --> 00:01:58,439
every day but on the web well if you're

00:01:56,700 --> 00:02:00,180
flying you don't really get anything if

00:01:58,439 --> 00:02:03,299
I try to go to the Guardian calm and I'm

00:02:00,180 --> 00:02:05,580
a flying I just get this chrome or Fline

00:02:03,299 --> 00:02:07,110
page little and in fact there is a game

00:02:05,580 --> 00:02:10,700
you can play if you tap on the dinosaur

00:02:07,110 --> 00:02:13,739
it's quite fun I'm not very good at they

00:02:10,700 --> 00:02:17,129
if the server's down again I'll just get

00:02:13,739 --> 00:02:18,599
this page it's not very useful and if I

00:02:17,129 --> 00:02:20,129
have a poor connection then you're going

00:02:18,599 --> 00:02:20,850
to be if you try to let the Guardian

00:02:20,129 --> 00:02:22,980
drama anyone

00:02:20,850 --> 00:02:26,400
so you're going to be staring at a white

00:02:22,980 --> 00:02:27,960
screen until the content of isles and if

00:02:26,400 --> 00:02:30,150
you have a good connection then finally

00:02:27,960 --> 00:02:35,310
we have the happy path you see the new

00:02:30,150 --> 00:02:36,780
content and and and the offline page is

00:02:35,310 --> 00:02:39,000
actually becoming something of a symbol

00:02:36,780 --> 00:02:41,160
like this is an advertisement in the cap

00:02:39,000 --> 00:02:44,010
underground station or in the capital of

00:02:41,160 --> 00:02:45,330
Argentina and you can see that the the

00:02:44,010 --> 00:02:47,700
dinosaur that I just showed you on the

00:02:45,330 --> 00:02:50,700
offline page and is actually used in an

00:02:47,700 --> 00:02:53,280
advertisement say what why don't we use

00:02:50,700 --> 00:02:57,740
that as an opportunity to push our brand

00:02:53,280 --> 00:03:01,020
and so to give the user something useful

00:02:57,740 --> 00:03:03,810
so we can we can do that we can do

00:03:01,020 --> 00:03:07,050
better and as a start the guards

00:03:03,810 --> 00:03:10,920
intercom we built an offline page so if

00:03:07,050 --> 00:03:16,320
i'm on https page on the guardian and i

00:03:10,920 --> 00:03:18,870
go offline when i refresh that page I'll

00:03:16,320 --> 00:03:21,900
see the offline page and it has a

00:03:18,870 --> 00:03:24,540
crossword you can play but I'm not very

00:03:21,900 --> 00:03:29,760
good at crossword this way have a go

00:03:24,540 --> 00:03:32,790
there if you want to try it out we are

00:03:29,760 --> 00:03:34,620
we have limited it to the smashing fire

00:03:32,790 --> 00:03:36,720
/ developer blog section and that's

00:03:34,620 --> 00:03:40,980
because of browser bucks which I will

00:03:36,720 --> 00:03:46,040
explain later so I'm gonna I'm going to

00:03:40,980 --> 00:03:50,190
break down how we built it in four steps

00:03:46,040 --> 00:03:54,720
the first step is introducing service

00:03:50,190 --> 00:03:56,940
workers I before I go into that I just

00:03:54,720 --> 00:04:00,420
want to emphasize that this is something

00:03:56,940 --> 00:04:04,290
that I was able to build in less than a

00:04:00,420 --> 00:04:06,780
day I think mid 2015 Jake came into the

00:04:04,290 --> 00:04:09,660
Guardian office to talk about service

00:04:06,780 --> 00:04:11,640
workers and I thought okay I'm going to

00:04:09,660 --> 00:04:13,350
use this as an opportunity to try and

00:04:11,640 --> 00:04:15,360
learn and spilled something and I was

00:04:13,350 --> 00:04:17,190
able to build what you just saw in less

00:04:15,360 --> 00:04:19,320
than a day I did have to do some

00:04:17,190 --> 00:04:21,270
polishing to get into production but

00:04:19,320 --> 00:04:22,590
that was no more than a few hours so

00:04:21,270 --> 00:04:25,740
everything you see here you can learn

00:04:22,590 --> 00:04:27,060
you can I want to inspire you to go

00:04:25,740 --> 00:04:30,479
ahead and pay with these technologies

00:04:27,060 --> 00:04:31,849
yourself so what is the service worker

00:04:30,479 --> 00:04:33,289
well

00:04:31,849 --> 00:04:36,649
I don't know if this needs an

00:04:33,289 --> 00:04:38,330
introduction really but i'm going to i'm

00:04:36,649 --> 00:04:40,999
going to do an introduction but create

00:04:38,330 --> 00:04:43,369
chrome dev summit last year i think

00:04:40,999 --> 00:04:47,029
someone counted how many times the word

00:04:43,369 --> 00:04:49,069
service workers was used and they

00:04:47,029 --> 00:04:51,169
counted 66.5 I actually think that's

00:04:49,069 --> 00:04:52,399
probably a guess and I think it was

00:04:51,169 --> 00:04:56,749
probably mentioned more than a hundred

00:04:52,399 --> 00:04:58,279
times but there we go and of course if

00:04:56,749 --> 00:05:00,610
you if you didn't know what service

00:04:58,279 --> 00:05:02,869
workers well then you probably

00:05:00,610 --> 00:05:05,599
discovered yesterday that actually it's

00:05:02,869 --> 00:05:10,610
just a cake and you can eat service

00:05:05,599 --> 00:05:13,369
workers so a service worker is a script

00:05:10,610 --> 00:05:16,249
that runs in the background and it's

00:05:13,369 --> 00:05:19,759
useful for features that require no user

00:05:16,249 --> 00:05:21,919
interaction so that might be listening

00:05:19,759 --> 00:05:24,229
to a push event and you might want to

00:05:21,919 --> 00:05:26,990
show a notification when you receive a

00:05:24,229 --> 00:05:29,360
push oven we might be intersecting and

00:05:26,990 --> 00:05:30,559
handling Network requests which is

00:05:29,360 --> 00:05:32,360
something that will be using

00:05:30,559 --> 00:05:35,149
specifically for the affluent page as

00:05:32,360 --> 00:05:36,919
well as I'll show you and in the future

00:05:35,149 --> 00:05:39,439
it will be used for other things like a

00:05:36,919 --> 00:05:42,729
background think if you have some data

00:05:39,439 --> 00:05:45,800
that you want to update periodically or

00:05:42,729 --> 00:05:49,879
alarmed if you want to show a reminder a

00:05:45,800 --> 00:05:51,649
specific time to a user and also maybe

00:05:49,879 --> 00:05:53,659
geofencing so when you enter a

00:05:51,649 --> 00:05:56,059
geographical perimeter you want to

00:05:53,659 --> 00:05:59,360
perform some action all of these things

00:05:56,059 --> 00:06:01,819
the service work is a perfect place to

00:05:59,360 --> 00:06:03,349
have to have those features and it's

00:06:01,819 --> 00:06:05,300
also a progressive enhancement because

00:06:03,349 --> 00:06:08,719
if you don't have service worker then

00:06:05,300 --> 00:06:13,369
your your website just works as it as it

00:06:08,719 --> 00:06:17,479
was before to do two things tonight it's

00:06:13,369 --> 00:06:20,839
https only and it's supported in chrome

00:06:17,479 --> 00:06:25,300
or opera and firefox a moment but maybe

00:06:20,839 --> 00:06:25,300
safari next decades we'll see

00:06:26,600 --> 00:06:32,610
and for the observant among you you may

00:06:30,270 --> 00:06:36,960
realize that actually the Guardian isn't

00:06:32,610 --> 00:06:40,020
on HTTPS but we are migrating we're

00:06:36,960 --> 00:06:42,150
actually migrating pay section by

00:06:40,020 --> 00:06:45,060
section these are the ones that you can

00:06:42,150 --> 00:06:46,410
go to today and they are HTTPS and if

00:06:45,060 --> 00:06:51,420
you go to any of these page you'll get

00:06:46,410 --> 00:06:53,100
our service worker and if you want to

00:06:51,420 --> 00:06:54,450
learn more about how the migration is

00:06:53,100 --> 00:06:56,880
going come and talk to me afterwards but

00:06:54,450 --> 00:07:00,240
I think we've essentially ruled out as

00:06:56,880 --> 00:07:04,100
advertising as a problem so we've almost

00:07:00,240 --> 00:07:04,100
got the green light to go for the HTTPS

00:07:04,610 --> 00:07:11,070
so creating and registering a service

00:07:08,400 --> 00:07:13,350
worker just imagine me we create a empty

00:07:11,070 --> 00:07:15,780
file called service worker George S and

00:07:13,350 --> 00:07:18,419
on an HTML page we're going to have a

00:07:15,780 --> 00:07:23,070
script that tells the browser we want to

00:07:18,419 --> 00:07:26,010
register it we have a service worker

00:07:23,070 --> 00:07:27,690
registered now but nothing is really

00:07:26,010 --> 00:07:30,060
happening the request is just going

00:07:27,690 --> 00:07:35,220
straight from the page to the server and

00:07:30,060 --> 00:07:36,510
back if if you want to see yourselves

00:07:35,220 --> 00:07:37,980
worker you can actually use the dev

00:07:36,510 --> 00:07:40,500
tools to see that if you go into the

00:07:37,980 --> 00:07:44,460
resources panel and I can service work

00:07:40,500 --> 00:07:48,000
it down the left-hand side likewise in

00:07:44,460 --> 00:07:50,280
chrome if you go to about debugging hash

00:07:48,000 --> 00:07:53,760
workers and you can see your service

00:07:50,280 --> 00:07:55,890
worker there as well so we have we have

00:07:53,760 --> 00:07:59,010
a we have a service worker but it's not

00:07:55,890 --> 00:08:00,450
doing anything what we need to do is we

00:07:59,010 --> 00:08:02,700
need to we need to download some

00:08:00,450 --> 00:08:04,620
resources ahead of time and the show to

00:08:02,700 --> 00:08:08,310
the user when they're offline we want to

00:08:04,620 --> 00:08:09,750
prime the cash and service worker has

00:08:08,310 --> 00:08:12,060
something called the install event which

00:08:09,750 --> 00:08:15,900
is the perfect opportunity to do this

00:08:12,060 --> 00:08:20,250
and so I don't have too much code today

00:08:15,900 --> 00:08:24,570
but this is just to show you how you

00:08:20,250 --> 00:08:26,190
prank ash we in the install event we

00:08:24,570 --> 00:08:30,660
just run a function called update cash

00:08:26,190 --> 00:08:33,750
and that opens a new cache and it adds

00:08:30,660 --> 00:08:36,390
three different assets to the cash the

00:08:33,750 --> 00:08:37,900
offline page which is the HTML some CSS

00:08:36,390 --> 00:08:43,210
which we need for that for the

00:08:37,900 --> 00:08:44,980
homepage to work and some JavaScript and

00:08:43,210 --> 00:08:48,430
we also we're going to version the cash

00:08:44,980 --> 00:08:50,710
because as we see later we want to we

00:08:48,430 --> 00:08:52,360
want to know when the user has an old

00:08:50,710 --> 00:08:58,060
version and then we want to update it

00:08:52,360 --> 00:09:00,070
and but you'll see that later and in our

00:08:58,060 --> 00:09:01,600
case as you saw the offline page has a

00:09:00,070 --> 00:09:03,850
critter has a crossword that's actually

00:09:01,600 --> 00:09:06,400
built as a reactor reactor application

00:09:03,850 --> 00:09:08,130
and that's all contained within within

00:09:06,400 --> 00:09:11,290
the JavaScript that we're cashing here

00:09:08,130 --> 00:09:15,100
so now we have a service worker and cash

00:09:11,290 --> 00:09:16,720
but we're not doing anything still you

00:09:15,100 --> 00:09:18,820
know the offline page doesn't work yet

00:09:16,720 --> 00:09:21,010
request is just going straight to the

00:09:18,820 --> 00:09:24,060
server and back so the next thing we

00:09:21,010 --> 00:09:27,850
need to do is we need to handle requests

00:09:24,060 --> 00:09:30,910
with something called to fetch event the

00:09:27,850 --> 00:09:34,590
fetch event lets you intercept requests

00:09:30,910 --> 00:09:38,460
and handle them programmatically and so

00:09:34,590 --> 00:09:42,340
the default is just for the browser to

00:09:38,460 --> 00:09:43,900
to make the request to the network and

00:09:42,340 --> 00:09:45,340
in the code here which I've just added

00:09:43,900 --> 00:09:50,230
to the bottom of the code that you saw

00:09:45,340 --> 00:09:51,760
previously and I'm just going dude doing

00:09:50,230 --> 00:09:53,110
what the browser were doing it anyway so

00:09:51,760 --> 00:09:55,900
I'm not doing anything different here

00:09:53,110 --> 00:09:57,100
but what you could do is you could fetch

00:09:55,900 --> 00:09:59,890
for what you could fetch from the catch

00:09:57,100 --> 00:10:06,360
cash instead or you could construct a

00:09:59,890 --> 00:10:08,830
response programmatically so now our

00:10:06,360 --> 00:10:10,600
service worker is actually doing

00:10:08,830 --> 00:10:14,320
something the the requests are actually

00:10:10,600 --> 00:10:17,110
going through the service worker to the

00:10:14,320 --> 00:10:20,080
server and back but we still don't help

00:10:17,110 --> 00:10:23,410
your flowing page working and let's move

00:10:20,080 --> 00:10:25,270
on just to give you an idea of the

00:10:23,410 --> 00:10:27,430
flexibility you have in a service worker

00:10:25,270 --> 00:10:30,190
it is very very programmatic so you can

00:10:27,430 --> 00:10:32,020
actually construct your own response as

00:10:30,190 --> 00:10:36,340
you can see here I have a string of HTML

00:10:32,020 --> 00:10:38,710
and I could just construct your response

00:10:36,340 --> 00:10:41,320
from that string and respond with that

00:10:38,710 --> 00:10:43,630
and that the browser is a perfectly

00:10:41,320 --> 00:10:46,110
valid response so you have a lot of

00:10:43,630 --> 00:10:46,110
control

00:10:47,799 --> 00:10:53,809
so in order to use the fetch event to

00:10:51,499 --> 00:10:55,459
serve the offline page and I need to I

00:10:53,809 --> 00:10:57,290
need to break this down into two parts

00:10:55,459 --> 00:11:00,259
because we have we have two different

00:10:57,290 --> 00:11:03,920
types of content we have HTML which is

00:11:00,259 --> 00:11:07,220
mutable and so you know the Guardian com

00:11:03,920 --> 00:11:09,319
is some HTML and it changes every time

00:11:07,220 --> 00:11:11,689
someone adds new contents for the

00:11:09,319 --> 00:11:15,259
offline page will also change and every

00:11:11,689 --> 00:11:19,639
time we make a change to it or you know

00:11:15,259 --> 00:11:21,739
the crossword updates whereas we have we

00:11:19,639 --> 00:11:24,679
have immutable assets like a CSS and

00:11:21,739 --> 00:11:27,079
JavaScript once we deploy those they are

00:11:24,679 --> 00:11:30,170
on the Internet forever and and if you

00:11:27,079 --> 00:11:33,319
request that URL and it will it will

00:11:30,170 --> 00:11:34,790
always return the same content so we

00:11:33,319 --> 00:11:36,470
have different kasia strategies for

00:11:34,790 --> 00:11:39,019
these different different types of

00:11:36,470 --> 00:11:44,089
requests so I'm we need to handle them

00:11:39,019 --> 00:11:46,610
separately for HTML and when when you're

00:11:44,089 --> 00:11:48,350
offline and you make a request for some

00:11:46,610 --> 00:11:51,169
HTML that's the time when we want to

00:11:48,350 --> 00:11:53,660
show you offline page so what would be

00:11:51,169 --> 00:11:55,610
is what we want to do is we want to go

00:11:53,660 --> 00:11:56,989
to the network first because if you are

00:11:55,610 --> 00:12:00,110
online we don't want to show the offline

00:11:56,989 --> 00:12:02,689
page but if there is an error when we

00:12:00,110 --> 00:12:05,600
try to go to the to the network then

00:12:02,689 --> 00:12:07,249
we'll fall back to the cash and this is

00:12:05,600 --> 00:12:12,919
a path pattern known as network first

00:12:07,249 --> 00:12:16,579
then cash this is the same in fetch

00:12:12,919 --> 00:12:18,819
event you saw earlier I the only change

00:12:16,579 --> 00:12:22,730
I've made here is I've guarded the

00:12:18,819 --> 00:12:24,679
response and I'm only handling HTML

00:12:22,730 --> 00:12:27,589
requests and the way I do that is by

00:12:24,679 --> 00:12:30,350
looking at the request headers and so

00:12:27,589 --> 00:12:33,290
the request accept header and tells me

00:12:30,350 --> 00:12:35,809
whether or not the browser accepts HTML

00:12:33,290 --> 00:12:39,549
and all only I'll only handle the

00:12:35,809 --> 00:12:43,939
request if the browser does except HTML

00:12:39,549 --> 00:12:47,799
that's not useful in itself but we will

00:12:43,939 --> 00:12:50,119
elaborate so moving on we hit we have

00:12:47,799 --> 00:12:52,009
that we're doing the fetch to the

00:12:50,119 --> 00:12:56,480
network and we want to fall back to the

00:12:52,009 --> 00:12:59,800
cash fetch returns a promise so if

00:12:56,480 --> 00:13:03,339
you're offline fetch will return

00:12:59,800 --> 00:13:07,089
will return a rejected promise so we

00:13:03,339 --> 00:13:09,490
catch that promise rejection and we

00:13:07,089 --> 00:13:15,399
retrieve something from the cache which

00:13:09,490 --> 00:13:17,620
is that offline page and now if you're

00:13:15,399 --> 00:13:20,529
offline you get this beautiful offline

00:13:17,620 --> 00:13:23,709
page that something's missing I hope you

00:13:20,529 --> 00:13:28,720
can notice we're missing some styling

00:13:23,709 --> 00:13:31,779
and some behavior so we now need to

00:13:28,720 --> 00:13:35,110
handle asset requests and as I said

00:13:31,779 --> 00:13:36,670
earlier these were immutable so what we

00:13:35,110 --> 00:13:38,769
want to do really is we want to go to

00:13:36,670 --> 00:13:41,820
the cash straight away because we know

00:13:38,769 --> 00:13:45,790
that they're going to be in there and

00:13:41,820 --> 00:13:50,470
this is how we do that if it's not HTML

00:13:45,790 --> 00:13:53,350
then we'll just look in the cash to see

00:13:50,470 --> 00:13:57,339
if there's a an entry that matches the

00:13:53,350 --> 00:13:59,170
request that's coming through ah that's

00:13:57,339 --> 00:14:02,920
not going to work for things which

00:13:59,170 --> 00:14:05,079
aren't in the cash so we need to we need

00:14:02,920 --> 00:14:08,350
to take a different approach we want to

00:14:05,079 --> 00:14:10,329
go to the cash first and if it's not in

00:14:08,350 --> 00:14:13,660
a cash then we'll try the network and

00:14:10,329 --> 00:14:15,550
this is good for any CSS or JavaScript

00:14:13,660 --> 00:14:17,890
any assets that we don't have in the

00:14:15,550 --> 00:14:19,360
cash because remember remember we're

00:14:17,890 --> 00:14:23,320
only cashing things which are needed for

00:14:19,360 --> 00:14:25,950
your flame page and the way we do that

00:14:23,320 --> 00:14:29,829
is the same code we had before and

00:14:25,950 --> 00:14:32,010
cashes match returns at promise and

00:14:29,829 --> 00:14:37,360
we'll see if the value of that from its

00:14:32,010 --> 00:14:39,579
is undefined or not and if there is a

00:14:37,360 --> 00:14:41,290
value then we'll just use that otherwise

00:14:39,579 --> 00:14:48,540
we'll go to the network using the fetch

00:14:41,290 --> 00:14:51,640
function the final part to talk about is

00:14:48,540 --> 00:14:54,300
updating the crossword so we publish new

00:14:51,640 --> 00:14:58,540
crosswords every day we have an avid

00:14:54,300 --> 00:15:00,279
user base and it would be great if the

00:14:58,540 --> 00:15:04,990
offline page contained the latest

00:15:00,279 --> 00:15:07,720
crossword and how would you do this well

00:15:04,990 --> 00:15:10,400
the way we're currently doing it is in

00:15:07,720 --> 00:15:12,510
the global scope of our service worker

00:15:10,400 --> 00:15:15,240
with we're seeing if the cache is

00:15:12,510 --> 00:15:17,700
updated or not and we know we know that

00:15:15,240 --> 00:15:20,400
by looking at the cache name that we

00:15:17,700 --> 00:15:22,350
defined earlier as I said earlier we've

00:15:20,400 --> 00:15:25,560
version the cash so if there isn't a

00:15:22,350 --> 00:15:28,980
version that matches today's date then

00:15:25,560 --> 00:15:31,410
we know it's not up to date and if it's

00:15:28,980 --> 00:15:33,180
not up to date then we'll run the same

00:15:31,410 --> 00:15:35,700
function that we ran in the install

00:15:33,180 --> 00:15:37,770
event the update cash function and then

00:15:35,700 --> 00:15:41,940
once that finishes we can safely delete

00:15:37,770 --> 00:15:44,310
the old caches in the future we might

00:15:41,940 --> 00:15:48,270
want to use the background sync API for

00:15:44,310 --> 00:15:49,950
this instead it's kind of it's a bit of

00:15:48,270 --> 00:15:51,720
a hack doing it doing it here and

00:15:49,950 --> 00:15:54,150
actually the reason this works is

00:15:51,720 --> 00:15:56,790
because the browser closes the service

00:15:54,150 --> 00:15:59,250
worker and disabled memory and then it

00:15:56,790 --> 00:16:01,800
will boot it up again when you visit

00:15:59,250 --> 00:16:03,420
that page again and so this code in the

00:16:01,800 --> 00:16:09,420
global scope actually gets it gets a

00:16:03,420 --> 00:16:13,250
chance to run quite frequently sorry

00:16:09,420 --> 00:16:17,610
there we go we have an offline page and

00:16:13,250 --> 00:16:19,520
everything works next I want to talk

00:16:17,610 --> 00:16:21,750
about what we might use service worker

00:16:19,520 --> 00:16:24,450
for in the future on the Guardian calm

00:16:21,750 --> 00:16:26,390
and you're flying page right now is a

00:16:24,450 --> 00:16:30,480
little bit insignificant because of our

00:16:26,390 --> 00:16:32,970
HTTPS migration is still ongoing and

00:16:30,480 --> 00:16:34,560
also browser support but it will

00:16:32,970 --> 00:16:37,080
increase in significance you can imagine

00:16:34,560 --> 00:16:41,640
a year from now when browser support is

00:16:37,080 --> 00:16:44,850
really good and we're on HTTPS loads of

00:16:41,640 --> 00:16:47,040
people will see that offline page so we

00:16:44,850 --> 00:16:48,870
would like to extend it maybe do what

00:16:47,040 --> 00:16:51,180
native apps to show the stale content or

00:16:48,870 --> 00:16:53,550
download content ahead of time and show

00:16:51,180 --> 00:16:56,070
them show the user personalized content

00:16:53,550 --> 00:17:00,900
for them because we know what you've

00:16:56,070 --> 00:17:02,280
been reading recently and we also have a

00:17:00,900 --> 00:17:07,020
feature called save for later we could

00:17:02,280 --> 00:17:09,660
use that as a action that states I want

00:17:07,020 --> 00:17:13,020
to read this offline and we could also

00:17:09,660 --> 00:17:15,780
go full you're flying fast and I'll fly

00:17:13,020 --> 00:17:18,689
first what does that mean it means when

00:17:15,780 --> 00:17:20,699
I request the HTML I get a response

00:17:18,689 --> 00:17:23,449
instantly with just a shell of the page

00:17:20,699 --> 00:17:28,860
and that's coming from the cash

00:17:23,449 --> 00:17:30,690
via the service worker that improves

00:17:28,860 --> 00:17:32,270
experience quite significantly for users

00:17:30,690 --> 00:17:35,610
with poor connections as we saw earlier

00:17:32,270 --> 00:17:37,200
when we compared native and web if you

00:17:35,610 --> 00:17:38,610
if you have a poor connection you open a

00:17:37,200 --> 00:17:41,130
website you're just going to be staring

00:17:38,610 --> 00:17:43,380
a white screen so service workers allows

00:17:41,130 --> 00:17:49,080
you to to avoid that situation and give

00:17:43,380 --> 00:17:50,700
a much better experience and yeah we

00:17:49,080 --> 00:17:55,710
could show you Stella content whilst

00:17:50,700 --> 00:17:58,590
clutching new new new content as well so

00:17:55,710 --> 00:18:00,600
just to create a very happy demo me to

00:17:58,590 --> 00:18:04,110
demonstrate what I meant by that this is

00:18:00,600 --> 00:18:07,320
kind of how many content websites why

00:18:04,110 --> 00:18:12,059
today you tap on a link and then nothing

00:18:07,320 --> 00:18:14,520
happens for 5-10 seconds depending on

00:18:12,059 --> 00:18:16,770
your network connection and then finally

00:18:14,520 --> 00:18:19,799
the new content downloads and it flashes

00:18:16,770 --> 00:18:22,980
and it appears on screen but you're not

00:18:19,799 --> 00:18:24,900
really giving you any feedback would it

00:18:22,980 --> 00:18:28,230
would be much better if when I tap on

00:18:24,900 --> 00:18:29,400
that link i get feedback straightaway to

00:18:28,230 --> 00:18:30,990
say okay something is happening

00:18:29,400 --> 00:18:35,250
something floating and then when the new

00:18:30,990 --> 00:18:39,169
content arrives it just appears and that

00:18:35,250 --> 00:18:39,169
is what we mean by show architecture i

00:18:40,100 --> 00:18:44,820
also want to mention some problems and

00:18:42,929 --> 00:18:46,860
caveats that I had when I was working on

00:18:44,820 --> 00:18:49,710
this mentioned earlier that there were

00:18:46,860 --> 00:18:56,070
browser bugs as a weird bargain chrome

00:18:49,710 --> 00:18:58,289
where any redirect from HTTP to HTTPS

00:18:56,070 --> 00:19:00,350
would result in there in a view of the

00:18:58,289 --> 00:19:03,179
offline page even if you went offline

00:19:00,350 --> 00:19:06,419
and we also had a weird bug in Firefox

00:19:03,179 --> 00:19:09,570
where cookies were dropped and which

00:19:06,419 --> 00:19:12,870
meant that or no those odd behavior like

00:19:09,570 --> 00:19:17,820
users on HTTPS sections couldn't use

00:19:12,870 --> 00:19:19,080
come commenting for some reason but we

00:19:17,820 --> 00:19:21,960
worked around those and they weren't

00:19:19,080 --> 00:19:24,299
they weren't too severe and it's it's

00:19:21,960 --> 00:19:27,000
been good to push and identify those

00:19:24,299 --> 00:19:30,539
lace bugs I think the vol being fixed

00:19:27,000 --> 00:19:32,880
now and another problem we had was in

00:19:30,539 --> 00:19:35,159
interleaving of versions in the seed in

00:19:32,880 --> 00:19:36,720
cash and I want to explain what I mean

00:19:35,159 --> 00:19:38,490
by that because I think

00:19:36,720 --> 00:19:40,409
other people might have this problem

00:19:38,490 --> 00:19:43,559
when they when they tried to cash wings

00:19:40,409 --> 00:19:47,610
in a service worker so we have a service

00:19:43,559 --> 00:19:49,440
worker and that caches I've simplified

00:19:47,610 --> 00:19:51,539
the example here that this cash is two

00:19:49,440 --> 00:19:55,549
things it caches the offline page which

00:19:51,539 --> 00:19:58,470
it's an HTML and it caches some CSS and

00:19:55,549 --> 00:20:04,440
that offline page when you try to run it

00:19:58,470 --> 00:20:06,630
it will try to load that CSS and if if

00:20:04,440 --> 00:20:11,730
we looked at how things were cashed in

00:20:06,630 --> 00:20:14,429
our CDN when you request the service

00:20:11,730 --> 00:20:16,620
worker for the first time okay the CDN

00:20:14,429 --> 00:20:19,679
is going to cash that we say it's going

00:20:16,620 --> 00:20:21,090
to cash it for 60 seconds when you

00:20:19,679 --> 00:20:23,669
request your flowing page for the first

00:20:21,090 --> 00:20:27,090
time the CDM will cash that as well for

00:20:23,669 --> 00:20:30,270
60 seconds in the same with the CSS but

00:20:27,090 --> 00:20:35,760
because the CSS is an immutable thing we

00:20:30,270 --> 00:20:39,500
can cash that for much longer but at

00:20:35,760 --> 00:20:43,070
some point in time we do a deploy and

00:20:39,500 --> 00:20:45,990
someone changes a service worker and

00:20:43,070 --> 00:20:48,960
when you when someone makes a request

00:20:45,990 --> 00:20:50,610
for that the CDM wall will cash the new

00:20:48,960 --> 00:20:54,030
version if the old version has fallen

00:20:50,610 --> 00:20:56,159
out of the cash and that leads to a

00:20:54,030 --> 00:20:58,470
situation like this where you have the

00:20:56,159 --> 00:21:02,130
new version of the service worker which

00:20:58,470 --> 00:21:04,260
is telling the browser to cash the old

00:21:02,130 --> 00:21:06,120
the old version of the offline page

00:21:04,260 --> 00:21:10,350
because the CDN still has that version

00:21:06,120 --> 00:21:12,570
and and the new version of the CSS and

00:21:10,350 --> 00:21:14,039
of course when you try to run the

00:21:12,570 --> 00:21:17,130
offline page because you'll get an old

00:21:14,039 --> 00:21:19,230
version the CSS just won't work because

00:21:17,130 --> 00:21:22,409
it will be trying to lay the version 1

00:21:19,230 --> 00:21:28,380
into the version 2 is a difficult

00:21:22,409 --> 00:21:31,370
situation and we could have fixed it one

00:21:28,380 --> 00:21:33,809
way we could have fixed it is by naming

00:21:31,370 --> 00:21:36,960
versioning the service worker and the

00:21:33,809 --> 00:21:40,799
offline page but the way we actually

00:21:36,960 --> 00:21:42,750
fixed it was using something I guess you

00:21:40,799 --> 00:21:45,679
would call a cache manifest and so this

00:21:42,750 --> 00:21:48,960
is just some Jason that has some HTML

00:21:45,679 --> 00:21:50,230
for the offline page and a list of

00:21:48,960 --> 00:21:52,540
assets to download

00:21:50,230 --> 00:21:54,820
and because a cache manifest will will

00:21:52,540 --> 00:21:56,260
be a single entry in the CD in cash you

00:21:54,820 --> 00:22:03,419
can guarantee that there will be no

00:21:56,260 --> 00:22:03,419
interleaving of versions so there we go

00:22:03,960 --> 00:22:10,990
finally why why did I why did I do this

00:22:07,929 --> 00:22:14,490
I mean it's fun to experiment with new

00:22:10,990 --> 00:22:17,350
browser technology of course but

00:22:14,490 --> 00:22:19,419
although there's insignificant usage due

00:22:17,350 --> 00:22:21,040
to HTTPS and browser support right now I

00:22:19,419 --> 00:22:22,840
think it's good to plant the seeds and a

00:22:21,040 --> 00:22:26,350
lot of people don't realize that the

00:22:22,840 --> 00:22:28,809
webcam work offline and so I think it's

00:22:26,350 --> 00:22:31,809
good to start demonstrating that and

00:22:28,809 --> 00:22:35,590
people will start to see the product as

00:22:31,809 --> 00:22:39,280
as these things do increase in support

00:22:35,590 --> 00:22:43,630
and also it's good to iron out browser

00:22:39,280 --> 00:22:45,929
bugs that pushes the web for words and I

00:22:43,630 --> 00:22:48,970
really like this quote by Nolan awesome

00:22:45,929 --> 00:22:50,740
if we only use features that work in ie8

00:22:48,970 --> 00:22:54,429
we're condemning ourselves to 98 world

00:22:50,740 --> 00:22:56,200
so I think I really really would like to

00:22:54,429 --> 00:22:59,110
encourage everyone to like trying new

00:22:56,200 --> 00:23:00,370
service workers today because you can

00:22:59,110 --> 00:23:06,190
start building really great things of

00:23:00,370 --> 00:23:08,290
them so in conclusion and service

00:23:06,190 --> 00:23:10,570
workers allows us to progressively

00:23:08,290 --> 00:23:12,730
enhance the experience for users who are

00:23:10,570 --> 00:23:15,340
offline and but also uses with poor

00:23:12,730 --> 00:23:18,400
connections and its really really easy

00:23:15,340 --> 00:23:21,549
to build an offline page and and it's a

00:23:18,400 --> 00:23:24,790
really good place to start so go ahead

00:23:21,549 --> 00:23:27,880
and have a go here is some third reading

00:23:24,790 --> 00:23:30,910
I wrote a blog post about all of this if

00:23:27,880 --> 00:23:33,730
you want to read that and there's also a

00:23:30,910 --> 00:23:37,690
great explainer on service workers on

00:23:33,730 --> 00:23:39,460
Alex Russell's github and you can

00:23:37,690 --> 00:23:40,630
actually visit the Guardian service

00:23:39,460 --> 00:23:43,360
worker if you want to take a look at

00:23:40,630 --> 00:23:45,250
what code we have in there I will admit

00:23:43,360 --> 00:23:46,480
it's not exactly the same as what you've

00:23:45,250 --> 00:23:48,340
seen here because I've had to work

00:23:46,480 --> 00:23:53,860
around browser bugs and things like that

00:23:48,340 --> 00:23:56,549
and but that's life thank you very much

00:23:53,860 --> 00:23:56,549

YouTube URL: https://www.youtube.com/watch?v=hx1fqAXXViA


