Title: Stefan Baumgartner: HTTP 2 is coming! Unbundle all the things?!? - JSConf Budapest 2016
Publication date: 2016-06-17
Playlist: JSConf Budapest 2016
Description: 
	HTTP - the way how clients and servers talk to each other on the internet - just got a major update. The first update in 15 years! HTTP/2 has landed and promises solutions to all the current performance workarounds we have for web applications: no more image sprites, no more concatenation, no domain sharding tricks. Just deploy like it's 1999! Well, that's at least what we got promised...

In this session, we will explore the major features of the new HTTP version and its implications for todays JavaScript developers. We will critically analyze recommendations for deployment strategies and find out which impact they have on our current applications, as well as on the applications to come.

http://jsconfbp.com/speakers/stefan-baumgartner.html
Captions: 
	00:00:07,440 --> 00:00:13,629
this this is so huge being introduced by

00:00:10,420 --> 00:00:15,219
check our table that's like one that's

00:00:13,629 --> 00:00:18,880
my most favorite moment in my life I

00:00:15,219 --> 00:00:20,890
guess I I tried to make some some video

00:00:18,880 --> 00:00:24,400
of how I feel right now and that's

00:00:20,890 --> 00:00:33,090
everything I can come up with do we have

00:00:24,400 --> 00:00:36,090
sound yea ringing Tony aquarium club and

00:00:33,090 --> 00:00:36,090
yeah

00:00:41,420 --> 00:00:48,030
well credit where credit's due that joke

00:00:46,260 --> 00:00:49,769
was made by two beers bottle of just

00:00:48,030 --> 00:00:51,420
four days ago and he took one of my

00:00:49,769 --> 00:00:52,890
jokes so I took one of his jokes and I

00:00:51,420 --> 00:00:55,129
thought it might be a good idea yeah so

00:00:52,890 --> 00:00:57,420
um yeah well that's how I feel um

00:00:55,129 --> 00:01:01,640
anybody who had a crush on Princess Leia

00:00:57,420 --> 00:01:04,290
back then sorry that I ruined it for you

00:01:01,640 --> 00:01:05,670
but yeah I'm talking about performance

00:01:04,290 --> 00:01:07,920
here and I have been introduced by a

00:01:05,670 --> 00:01:10,560
performance God so actually how I really

00:01:07,920 --> 00:01:21,140
feel how I think this might turn out is

00:01:10,560 --> 00:01:21,140
more something like like this yeah

00:01:25,640 --> 00:01:31,890
basically I'm having my Tim berners-lee

00:01:27,869 --> 00:01:34,319
moment right now which is kind of weird

00:01:31,890 --> 00:01:36,119
because I actually I did nothing you

00:01:34,319 --> 00:01:39,869
know I met so many people here who did

00:01:36,119 --> 00:01:42,360
so much great stuff on Wednesday who has

00:01:39,869 --> 00:01:44,520
been here on Wednesday yeah I made tuna

00:01:42,360 --> 00:01:49,259
since new kids I wouldn't say he's a

00:01:44,520 --> 00:01:52,619
childhood hero of mine but a mid 20 of

00:01:49,259 --> 00:01:55,080
mine and yeah yeah you know walking

00:01:52,619 --> 00:01:59,090
around meeting so many great people and

00:01:55,080 --> 00:02:02,099
telling everybody he fan of your work

00:01:59,090 --> 00:02:04,619
the only thing that I did that got kind

00:02:02,099 --> 00:02:06,270
of popular or and recognized was this

00:02:04,619 --> 00:02:09,509
one choked back then about one and a

00:02:06,270 --> 00:02:11,670
half year ago what's power package

00:02:09,509 --> 00:02:13,379
manager insta late with NPM % piano

00:02:11,670 --> 00:02:16,080
package manager instil it with bluebirds

00:02:13,379 --> 00:02:18,510
brew I'm sure you can insulate to that

00:02:16,080 --> 00:02:19,950
something like that and i think the

00:02:18,510 --> 00:02:22,019
choke was much much better back then and

00:02:19,950 --> 00:02:24,660
it's better than jokes about how a

00:02:22,019 --> 00:02:29,790
really good service has no padding

00:02:24,660 --> 00:02:31,830
modules but hey i'm here to talk about

00:02:29,790 --> 00:02:34,200
HTTP to and how to unbundle all the

00:02:31,830 --> 00:02:36,030
things and when I wrote this proposal it

00:02:34,200 --> 00:02:39,360
was called HTTP two is coming actually

00:02:36,030 --> 00:02:40,800
HTTP ub2 is here and the question is

00:02:39,360 --> 00:02:44,040
unbundle all the things this

00:02:40,800 --> 00:02:45,569
professional drawing of edits dog was

00:02:44,040 --> 00:02:48,359
done by my colleague the other one was

00:02:45,569 --> 00:02:49,620
done by me so in case you wonder what's

00:02:48,359 --> 00:02:51,330
going on there

00:02:49,620 --> 00:02:52,709
it's the main javascript file going to

00:02:51,330 --> 00:02:55,709
be beheaded because we are going to

00:02:52,709 --> 00:02:57,840
unbundle all the things but you know

00:02:55,709 --> 00:03:00,780
this is every time you hear about HTTP

00:02:57,840 --> 00:03:03,120
to you hear this one advice or this one

00:03:00,780 --> 00:03:05,099
rule unbundle all the things no

00:03:03,120 --> 00:03:08,310
concatenation number bundling no mob

00:03:05,099 --> 00:03:10,230
packing a logical I don't know browser

00:03:08,310 --> 00:03:12,480
if I webpack all get obsolete I don't

00:03:10,230 --> 00:03:14,909
know and I don't like jumping to

00:03:12,480 --> 00:03:17,670
conclusions like that they always want

00:03:14,909 --> 00:03:19,530
to know why we are doing something like

00:03:17,670 --> 00:03:22,859
that I want to know why these things

00:03:19,530 --> 00:03:25,829
happen this is like the one time back in

00:03:22,859 --> 00:03:27,750
the early 90s at my place it was a

00:03:25,829 --> 00:03:30,359
lovely lonely which village with about

00:03:27,750 --> 00:03:32,819
700 people living in there and to God

00:03:30,359 --> 00:03:36,269
the pizza joint this was the first time

00:03:32,819 --> 00:03:38,430
those people ate pizza at all and every

00:03:36,269 --> 00:03:42,209
slice of pizza was was served with

00:03:38,430 --> 00:03:44,459
ketchup and mayonnaise and so we thought

00:03:42,209 --> 00:03:46,379
yep this is how you eat pizza with

00:03:44,459 --> 00:03:51,329
ketchup mayonnaise not knowing that this

00:03:46,379 --> 00:03:53,190
was a sacrilege so I I when I when I got

00:03:51,329 --> 00:03:56,190
first time outside of my religion had

00:03:53,190 --> 00:03:58,319
real pizza I tried to question why did

00:03:56,190 --> 00:03:59,849
we get ketchup and mayonnaise I'll turns

00:03:58,319 --> 00:04:01,709
out the pizza so bad you couldn't eat it

00:03:59,849 --> 00:04:05,220
without it but you know that was just

00:04:01,709 --> 00:04:07,260
kind of this rule you you heard you saw

00:04:05,220 --> 00:04:08,760
everybody in my village packed and

00:04:07,260 --> 00:04:11,400
eating pizza with ketchup mayonnaise you

00:04:08,760 --> 00:04:15,060
idiot you did it and I wonder if that's

00:04:11,400 --> 00:04:18,419
the same case with HTTP to and not

00:04:15,060 --> 00:04:20,160
bundling stuff so I want to I want to

00:04:18,419 --> 00:04:23,190
question why I want to know that the

00:04:20,160 --> 00:04:25,440
wisent why we are doing stuff and to do

00:04:23,190 --> 00:04:28,860
so we have to go back yelled to the 90s

00:04:25,440 --> 00:04:30,539
to my pizza joint adventure to tim

00:04:28,860 --> 00:04:32,729
berners-lee you've seen him already and

00:04:30,539 --> 00:04:36,270
this is tim berners-lee accessing the

00:04:32,729 --> 00:04:38,849
web page from his his office pc this is

00:04:36,270 --> 00:04:42,599
the first web server being a turn so

00:04:38,849 --> 00:04:47,000
that was in the basement office office

00:04:42,599 --> 00:04:53,520
building and this was the World Wide Web

00:04:47,000 --> 00:04:55,710
the World Wide Web kinda small world but

00:04:53,520 --> 00:04:58,520
what Tim berners-lee did he invented two

00:04:55,710 --> 00:05:01,229
things one thing was the hypertext

00:04:58,520 --> 00:05:03,030
markup language the other thing was the

00:05:01,229 --> 00:05:05,520
hypertext Transfer Protocol

00:05:03,030 --> 00:05:07,200
anybody remembers them must must must be

00:05:05,520 --> 00:05:09,510
a thing of the 90s and the hypertext

00:05:07,200 --> 00:05:14,130
Transfer Protocol was made to transfer

00:05:09,510 --> 00:05:16,110
stuff like this so it was a protocol to

00:05:14,130 --> 00:05:17,940
transfer text documents from the

00:05:16,110 --> 00:05:22,710
basement of CERN up to the first floor

00:05:17,940 --> 00:05:27,030
where Tim berners-lee was and from back

00:05:22,710 --> 00:05:29,700
then in terms of protocol nothing much

00:05:27,030 --> 00:05:32,610
has changed we are still working with

00:05:29,700 --> 00:05:34,680
kind of the same protocol item a few of

00:05:32,610 --> 00:05:38,460
you edge cases here and there but other

00:05:34,680 --> 00:05:39,930
than that we're working with them HTTP

00:05:38,460 --> 00:05:43,590
builds up on TCP you've heard that

00:05:39,930 --> 00:05:45,770
yesterday at the ants talk TCB has some

00:05:43,590 --> 00:05:48,060
sort of freeway connection that's like a

00:05:45,770 --> 00:05:49,920
secret gang sign with your drug dealer

00:05:48,060 --> 00:05:52,710
or something I guess if you if you add

00:05:49,920 --> 00:05:57,060
TLS to it it's like making sure nobody's

00:05:52,710 --> 00:05:58,740
a cup and they have this this is a round

00:05:57,060 --> 00:06:03,450
trip this goes to the Internet and back

00:05:58,740 --> 00:06:04,770
again so before data can be sent what

00:06:03,450 --> 00:06:07,530
browsers and servers do is like

00:06:04,770 --> 00:06:11,340
communicating and making sure we are

00:06:07,530 --> 00:06:13,530
knowing each other and the first version

00:06:11,340 --> 00:06:15,540
of the protocol could just handle one

00:06:13,530 --> 00:06:18,480
request just work with one tcp

00:06:15,540 --> 00:06:20,580
connection one HTTP request and

00:06:18,480 --> 00:06:22,710
everything else had to wait in line head

00:06:20,580 --> 00:06:26,760
of line blocking that's cold where you

00:06:22,710 --> 00:06:29,310
can download the index.html file when

00:06:26,760 --> 00:06:30,750
index HTML file is back to the next

00:06:29,310 --> 00:06:32,730
resource like an image or something like

00:06:30,750 --> 00:06:34,800
that and back in the day that was okay

00:06:32,730 --> 00:06:39,180
but assume people found out okay maybe

00:06:34,800 --> 00:06:41,880
we need something more and the reworked

00:06:39,180 --> 00:06:43,830
a little bit the protocol for HTTP 1.1

00:06:41,880 --> 00:06:47,850
and you know what's better than having

00:06:43,830 --> 00:06:49,530
one request having two requests that was

00:06:47,850 --> 00:06:51,510
actually in the proposals or you can do

00:06:49,530 --> 00:06:54,630
two parallel because browsers actually

00:06:51,510 --> 00:06:57,180
went to six so you can 26 parallel

00:06:54,630 --> 00:06:59,550
requests pertinent domain I wonder why

00:06:57,180 --> 00:07:03,180
didn't ever get up to 11 it's beyond me

00:06:59,550 --> 00:07:07,440
but still for each request for each HTTP

00:07:03,180 --> 00:07:10,230
recreate TTP request they are doing you

00:07:07,440 --> 00:07:12,300
had a new TCP connection so it was like

00:07:10,230 --> 00:07:14,250
the server opened up this freebie

00:07:12,300 --> 00:07:16,620
handshake the secret gang sign every

00:07:14,250 --> 00:07:19,350
time a new resource was requested

00:07:16,620 --> 00:07:21,210
and this led to this one advice back

00:07:19,350 --> 00:07:23,940
when we did the performance optimization

00:07:21,210 --> 00:07:25,889
the best request is a request not being

00:07:23,940 --> 00:07:27,990
made and memorize this this is coming up

00:07:25,889 --> 00:07:30,030
lots of time during my presentation up

00:07:27,990 --> 00:07:32,340
now the best request is a request not

00:07:30,030 --> 00:07:35,550
being made which meant that we should

00:07:32,340 --> 00:07:37,500
avoid self triggering stuff the triggers

00:07:35,550 --> 00:07:39,270
requests like having a source having a

00:07:37,500 --> 00:07:42,270
URL in your style sheets having link

00:07:39,270 --> 00:07:44,040
href and downloading a strategy you

00:07:42,270 --> 00:07:47,820
should do as few as possible of them

00:07:44,040 --> 00:07:49,919
back into HTTP 11 days and to achieve

00:07:47,820 --> 00:07:52,380
this we relied on things like

00:07:49,919 --> 00:07:54,389
concatenation like combining one every

00:07:52,380 --> 00:07:56,490
tribal script file into one combining

00:07:54,389 --> 00:07:58,620
every CSS file into one just having one

00:07:56,490 --> 00:08:00,720
javascript file downloaded having one

00:07:58,620 --> 00:08:04,070
CSS file downloaded your third of image

00:08:00,720 --> 00:08:06,900
sprites already this morning with nico

00:08:04,070 --> 00:08:08,760
that's basically just all the image in

00:08:06,900 --> 00:08:10,680
one for all the images in one file all

00:08:08,760 --> 00:08:12,060
the icons in one file and you cut out

00:08:10,680 --> 00:08:14,039
all the little bits and pieces and

00:08:12,060 --> 00:08:15,539
display them and of course in learning

00:08:14,039 --> 00:08:17,400
stuff like not making the grass at all

00:08:15,539 --> 00:08:20,370
pack everything into the HTML and

00:08:17,400 --> 00:08:21,720
download it and those were early

00:08:20,370 --> 00:08:23,550
performance optimizations and they were

00:08:21,720 --> 00:08:25,710
necessary because the web for evolving

00:08:23,550 --> 00:08:28,169
right now this is a screen hood from

00:08:25,710 --> 00:08:32,099
yesterday from HTTP archive the average

00:08:28,169 --> 00:08:35,159
web page is about 2.3 megabyte in total

00:08:32,099 --> 00:08:39,570
which is insane and two-thirds of it are

00:08:35,159 --> 00:08:42,659
images and also on average we have about

00:08:39,570 --> 00:08:47,250
40 TCP connections right now that are

00:08:42,659 --> 00:08:49,050
happening per page that might not be big

00:08:47,250 --> 00:08:52,350
thing if you if you if you think about

00:08:49,050 --> 00:08:55,950
it but let's say 44 no actually it's

00:08:52,350 --> 00:08:57,990
pretty big but let's say you have an

00:08:55,950 --> 00:09:00,470
image heavy website like the most

00:08:57,990 --> 00:09:04,980
popular search engine in the world

00:09:00,470 --> 00:09:08,970
starts with ug anybody knows it yeah

00:09:04,980 --> 00:09:11,880
giffey these are lots and lots of images

00:09:08,970 --> 00:09:14,100
and if you if you open this web page on

00:09:11,880 --> 00:09:16,560
the mobile device where you have added

00:09:14,100 --> 00:09:18,600
latency not only getting this this TCP

00:09:16,560 --> 00:09:20,279
request the TCP connection going on but

00:09:18,600 --> 00:09:22,380
also having to connect to a tower

00:09:20,279 --> 00:09:25,880
sending your signal into space and back

00:09:22,380 --> 00:09:27,900
again and passing Starship Enterprise

00:09:25,880 --> 00:09:29,110
that is really something and let me

00:09:27,900 --> 00:09:30,490
visualize that for you

00:09:29,110 --> 00:09:31,779
that means that you open up to

00:09:30,490 --> 00:09:33,370
connections and they're pretty good at

00:09:31,779 --> 00:09:34,690
getting forward like Jesus is a bit a

00:09:33,370 --> 00:09:37,029
little bit a little bit faster than

00:09:34,690 --> 00:09:38,200
chairs but chairs holding up and then

00:09:37,029 --> 00:09:41,230
you start with downloading all the

00:09:38,200 --> 00:09:43,899
images that was it with your website you

00:09:41,230 --> 00:09:46,810
have to wait like indefinitely and this

00:09:43,899 --> 00:09:49,390
is why HTTP two was made a TDP was made

00:09:46,810 --> 00:09:53,560
to serve today's web and instead of

00:09:49,390 --> 00:09:55,600
opening a TCP request me almost for

00:09:53,560 --> 00:09:57,880
every HTTP request like opening it a

00:09:55,600 --> 00:09:59,980
separate TCP connection they just rely

00:09:57,880 --> 00:10:01,870
on one connection and he CP is really

00:09:59,980 --> 00:10:03,339
good at handling a lots of stuff if you

00:10:01,870 --> 00:10:05,260
ever downloaded a video or any other

00:10:03,339 --> 00:10:07,899
file from someplace that's really huge

00:10:05,260 --> 00:10:09,700
to see that downloading this one file is

00:10:07,899 --> 00:10:12,250
actually really really fast but if you

00:10:09,700 --> 00:10:17,140
do multiple files it gets kind of here

00:10:12,250 --> 00:10:19,480
and HTTP two works in streams where you

00:10:17,140 --> 00:10:22,149
have one stream to send requests and one

00:10:19,480 --> 00:10:24,640
stream to get all the responses and you

00:10:22,149 --> 00:10:26,890
can start sending a get request for one

00:10:24,640 --> 00:10:29,649
image and no matter at which time you

00:10:26,890 --> 00:10:31,120
can go for the second one and then the

00:10:29,649 --> 00:10:32,920
server starts answering in small

00:10:31,120 --> 00:10:35,290
packages that can be assembled on the

00:10:32,920 --> 00:10:37,149
client so you have year image 1 and

00:10:35,290 --> 00:10:39,399
image to inter whined and interleaved

00:10:37,149 --> 00:10:43,540
and everything comes back to the client

00:10:39,399 --> 00:10:45,519
in this assembled there so this means

00:10:43,540 --> 00:10:47,680
that for a website that was done with

00:10:45,519 --> 00:10:51,190
HTTP 1.1 thought when those grey blocks

00:10:47,680 --> 00:10:55,029
to say areas are those TCP connections

00:10:51,190 --> 00:10:58,839
is getting everything going which HTTP

00:10:55,029 --> 00:11:00,190
to you're going to to reduce those TCP

00:10:58,839 --> 00:11:04,360
connection because everything is served

00:11:00,190 --> 00:11:06,579
by this one tcp connection so you start

00:11:04,360 --> 00:11:10,570
a lot lot faster by with downloading

00:11:06,579 --> 00:11:11,829
yourself and actually since HTTP two

00:11:10,570 --> 00:11:13,990
doesn't have a limit on parallel

00:11:11,829 --> 00:11:15,910
connections they also start a lot lot

00:11:13,990 --> 00:11:18,820
earlier and that's how this this speed

00:11:15,910 --> 00:11:20,680
up comes to be there's a nice video from

00:11:18,820 --> 00:11:25,510
from browser where they're going to

00:11:20,680 --> 00:11:27,699
combine to a compared to the design web

00:11:25,510 --> 00:11:30,670
page one time on HTTP 11 one time on

00:11:27,699 --> 00:11:33,519
HTTP two and on the left side it'll lock

00:11:30,670 --> 00:11:35,769
all of tiny little images getting

00:11:33,519 --> 00:11:37,750
getting across the wire and you can

00:11:35,769 --> 00:11:39,579
really see how fast it's going to be so

00:11:37,750 --> 00:11:41,360
this was the last time I tried it i'm

00:11:39,579 --> 00:11:44,329
doing now another one

00:11:41,360 --> 00:11:47,240
and this was HTTP on the run pretty fast

00:11:44,329 --> 00:11:48,410
actually he couldn't even see it just in

00:11:47,240 --> 00:11:51,620
a blink of an eye so that's really

00:11:48,410 --> 00:11:54,350
really fast I tried it with some

00:11:51,620 --> 00:11:57,200
webpages for instance my blog and on

00:11:54,350 --> 00:11:59,390
HTTP one thought one I had about 22 that

00:11:57,200 --> 00:12:02,660
six seconds load time that was already a

00:11:59,390 --> 00:12:05,870
performance optimal nated blog but HTTP

00:12:02,660 --> 00:12:08,540
two I had another 800 milliseconds less

00:12:05,870 --> 00:12:10,339
and it's even better on mobile because

00:12:08,540 --> 00:12:13,790
you don't have to connect to to space

00:12:10,339 --> 00:12:15,560
anymore or to the next hour on mobile

00:12:13,790 --> 00:12:17,990
you can really see a speed-up of it's

00:12:15,560 --> 00:12:19,730
about it took about half as long to

00:12:17,990 --> 00:12:23,120
download this stuff so it's all about

00:12:19,730 --> 00:12:24,800
fighting this latency not making any

00:12:23,120 --> 00:12:27,860
more connections than uni because TCP is

00:12:24,800 --> 00:12:30,350
capable of handling all of that in turn

00:12:27,860 --> 00:12:33,950
this also means that if you have a slow

00:12:30,350 --> 00:12:35,779
website on HTTP 11 you will still have a

00:12:33,950 --> 00:12:37,370
slow website at HTTP to it's just

00:12:35,779 --> 00:12:40,130
downloading faster but if you don't

00:12:37,370 --> 00:12:41,720
follow or if you don't don't respect the

00:12:40,130 --> 00:12:44,930
usual performance guidelines you still

00:12:41,720 --> 00:12:46,820
will have a slow htb to web page

00:12:44,930 --> 00:12:50,000
performance guideline like minifying

00:12:46,820 --> 00:12:51,350
chairs and CSS optimizing those images

00:12:50,000 --> 00:12:54,410
everything basically everything that

00:12:51,350 --> 00:12:56,029
nikka settle this morning and the most

00:12:54,410 --> 00:12:58,310
important thing is do not block

00:12:56,029 --> 00:13:00,230
rendering so get the thing that renders

00:12:58,310 --> 00:13:01,970
your page out the very rare avast and

00:13:00,230 --> 00:13:07,399
then just download all the other stuff

00:13:01,970 --> 00:13:11,449
and this is top notch thought leadership

00:13:07,399 --> 00:13:13,880
here with that given H db2 is not only

00:13:11,449 --> 00:13:15,440
here for performance optimization but

00:13:13,880 --> 00:13:17,209
it's an engineering opportunity and this

00:13:15,440 --> 00:13:19,190
is the part where where this whole thing

00:13:17,209 --> 00:13:23,839
of unbundle all the things comes into

00:13:19,190 --> 00:13:25,910
place let me elaborate so the best

00:13:23,839 --> 00:13:30,380
request is a request not being made you

00:13:25,910 --> 00:13:33,440
heard that already this means that you

00:13:30,380 --> 00:13:35,540
don't have to download at this dis dis

00:13:33,440 --> 00:13:38,660
advisor it said why still holds up

00:13:35,540 --> 00:13:41,720
somehow not by just combining everything

00:13:38,660 --> 00:13:43,610
into one because this is basically a for

00:13:41,720 --> 00:13:45,230
travel script files I wouldn't get any

00:13:43,610 --> 00:13:47,300
speed up if I would combine them because

00:13:45,230 --> 00:13:49,399
this concatenation is basically done in

00:13:47,300 --> 00:13:52,630
the stream of the TCP connection and

00:13:49,399 --> 00:13:52,630
just pull onto my side

00:13:53,200 --> 00:13:58,490
but what I can do now instead of having

00:13:56,540 --> 00:14:00,680
one huge file and transferring it over

00:13:58,490 --> 00:14:02,360
the wire I can select the palace that

00:14:00,680 --> 00:14:05,540
amount to transfer so let's say this

00:14:02,360 --> 00:14:07,790
index dot HTML file doesn't need one of

00:14:05,540 --> 00:14:10,760
those JavaScript files I just leave it

00:14:07,790 --> 00:14:12,470
out I just transferred less weight than

00:14:10,760 --> 00:14:16,670
it did before and that's what's meant

00:14:12,470 --> 00:14:18,620
with the best request is regrets not

00:14:16,670 --> 00:14:21,440
being made so you don't do this request

00:14:18,620 --> 00:14:23,750
because you don't need this file another

00:14:21,440 --> 00:14:25,940
example this is like half of our icons

00:14:23,750 --> 00:14:27,890
that we have in our product and a

00:14:25,940 --> 00:14:30,440
question for the audience what do you

00:14:27,890 --> 00:14:33,890
think is far as transporting this or

00:14:30,440 --> 00:14:38,090
transporting those wagons it's of course

00:14:33,890 --> 00:14:40,490
those 2i cancer if this what is so

00:14:38,090 --> 00:14:42,140
instead of transporting one sprite that

00:14:40,490 --> 00:14:44,450
has like everything in it and you save

00:14:42,140 --> 00:14:48,380
it on the client just get over what you

00:14:44,450 --> 00:14:50,810
really really really need engineering

00:14:48,380 --> 00:14:52,940
step one get over what you really need

00:14:50,810 --> 00:14:55,580
engineering sep two and i'll start with

00:14:52,940 --> 00:15:00,350
the best request it's a request not

00:14:55,580 --> 00:15:03,440
being made again this can be thought of

00:15:00,350 --> 00:15:05,600
some some some differently what if the

00:15:03,440 --> 00:15:09,680
client doesn't have to make a request at

00:15:05,600 --> 00:15:11,420
all what if you download two files I

00:15:09,680 --> 00:15:14,030
edit some some version markers in there

00:15:11,420 --> 00:15:16,640
and just set an expiry head off

00:15:14,030 --> 00:15:21,080
indefinitely so these files always stay

00:15:16,640 --> 00:15:23,630
with the client you can do then things

00:15:21,080 --> 00:15:26,780
like okay just exchanging the second

00:15:23,630 --> 00:15:28,700
foul so the client gets to this web page

00:15:26,780 --> 00:15:31,190
to second time he already has the

00:15:28,700 --> 00:15:33,110
version one from the h and SVG and his

00:15:31,190 --> 00:15:34,910
downloading version 2 from the goddess

00:15:33,110 --> 00:15:37,820
which is just downloading the second

00:15:34,910 --> 00:15:40,460
file so they were the best request that

00:15:37,820 --> 00:15:44,630
wasn't made was downloading agent we won

00:15:40,460 --> 00:15:49,130
again and and this is the huge power of

00:15:44,630 --> 00:15:50,890
HTTP too so yeah in some way unbundle

00:15:49,130 --> 00:15:53,420
all the things if you think about this

00:15:50,890 --> 00:15:55,460
writing image that's the way to do if

00:15:53,420 --> 00:15:56,930
you think about not having bytes

00:15:55,460 --> 00:16:00,200
transferred over that you don't need

00:15:56,930 --> 00:16:02,300
that's the way to do it but it's a

00:16:00,200 --> 00:16:03,680
little bit more to it and one thing or

00:16:02,300 --> 00:16:06,170
one oddity that I really really liked

00:16:03,680 --> 00:16:06,940
was the one from Khan Academy where it

00:16:06,170 --> 00:16:09,370
just took an old

00:16:06,940 --> 00:16:13,420
jquery based web application or web page

00:16:09,370 --> 00:16:16,930
and didn't do the packaging anymore and

00:16:13,420 --> 00:16:19,390
it turned out that the new HTTP to web

00:16:16,930 --> 00:16:22,120
page was a lot lot slower than the

00:16:19,390 --> 00:16:24,940
original one for one reason it was a

00:16:22,120 --> 00:16:26,320
giclee application and everybody who has

00:16:24,940 --> 00:16:28,410
written check variable against knows

00:16:26,320 --> 00:16:33,730
that there's a lot of boilerplate code

00:16:28,410 --> 00:16:36,310
really a lot and she tip is really good

00:16:33,730 --> 00:16:38,860
at repetition so when the chi tipped all

00:16:36,310 --> 00:16:40,750
those JavaScript files into one banner

00:16:38,860 --> 00:16:42,940
when they combined all those JavaScript

00:16:40,750 --> 00:16:44,400
files into one bundling gzip did the

00:16:42,940 --> 00:16:50,320
repetition of the boilerplate code

00:16:44,400 --> 00:16:53,590
actually improved the performance for

00:16:50,320 --> 00:16:55,630
this bundled travel script file and this

00:16:53,590 --> 00:16:59,140
is where this this rule like unbundle

00:16:55,630 --> 00:17:01,180
all the things fails in this case that

00:16:59,140 --> 00:17:03,910
just didn't work cheated at the cheat

00:17:01,180 --> 00:17:08,319
zip performance win was much much better

00:17:03,910 --> 00:17:10,089
than the wind ahead by by activating

00:17:08,319 --> 00:17:13,810
HTTP two winters pushing everything over

00:17:10,089 --> 00:17:15,939
the wire so what they then did is like

00:17:13,810 --> 00:17:18,339
refactoring the application throughout a

00:17:15,939 --> 00:17:19,510
little a little bit of of other

00:17:18,339 --> 00:17:22,230
JavaScript files but other than that

00:17:19,510 --> 00:17:25,689
really good article to read and we also

00:17:22,230 --> 00:17:28,060
we also made some tests with one

00:17:25,689 --> 00:17:30,000
application of ours which I want to

00:17:28,060 --> 00:17:32,500
elaborate a little more given the time

00:17:30,000 --> 00:17:34,180
or still halfway through with the slides

00:17:32,500 --> 00:17:38,710
oh hey let's go in the last three

00:17:34,180 --> 00:17:41,530
minutes or something let's go back to

00:17:38,710 --> 00:17:44,020
this to tease two images we have the

00:17:41,530 --> 00:17:47,860
agent that sweetie we have the gout v2s

00:17:44,020 --> 00:17:49,450
ricci so i can interchange those images

00:17:47,860 --> 00:17:51,130
really like i can update this cloud

00:17:49,450 --> 00:17:54,610
image all over again and all over again

00:17:51,130 --> 00:17:56,170
would you say that if you if you have to

00:17:54,610 --> 00:17:59,200
change one image you have to change the

00:17:56,170 --> 00:18:01,660
other they are completely separate from

00:17:59,200 --> 00:18:05,080
each other let's look at this handsome

00:18:01,660 --> 00:18:10,120
fellow you can make out the teasing

00:18:05,080 --> 00:18:16,770
agent or guy or person or whatever what

00:18:10,120 --> 00:18:20,169
about now something's kind of missing so

00:18:16,770 --> 00:18:22,419
this is what we call it dependency

00:18:20,169 --> 00:18:24,850
this is important if you yeah your head

00:18:22,419 --> 00:18:26,799
is a dependency of yours this is

00:18:24,850 --> 00:18:29,739
important if you take this world over to

00:18:26,799 --> 00:18:32,830
travel script this is some weird to

00:18:29,739 --> 00:18:34,029
JavaScript architect rivals designing we

00:18:32,830 --> 00:18:35,259
have versions everywhere like the

00:18:34,029 --> 00:18:36,850
version one of the payment chairs

00:18:35,259 --> 00:18:39,220
version one of validation shares we have

00:18:36,850 --> 00:18:41,350
a call to action that validation depends

00:18:39,220 --> 00:18:44,739
on the overhyped framework on some

00:18:41,350 --> 00:18:48,489
lodash or other utility and this call to

00:18:44,739 --> 00:18:53,850
action JavaScript so every tribal

00:18:48,489 --> 00:18:56,950
equipment lab works with with file names

00:18:53,850 --> 00:18:59,619
so what happens if I have to update one

00:18:56,950 --> 00:19:03,100
version of my call to action javascript

00:18:59,619 --> 00:19:05,109
I would also have to update validation

00:19:03,100 --> 00:19:07,629
show at the validation charl script so

00:19:05,109 --> 00:19:10,330
instead of just pushing one javascript

00:19:07,629 --> 00:19:14,440
file out there again in the next round I

00:19:10,330 --> 00:19:18,299
have to put a sector put both of them by

00:19:14,440 --> 00:19:22,090
validation v2 and collection be too so

00:19:18,299 --> 00:19:23,919
let's try to to order our JavaScript

00:19:22,090 --> 00:19:25,179
files in terms of frequency of change

00:19:23,919 --> 00:19:26,619
usually if you're working with some

00:19:25,179 --> 00:19:28,960
single page application framework or any

00:19:26,619 --> 00:19:30,970
other library libraries are pretty rigid

00:19:28,960 --> 00:19:33,309
you don't up them date them on a daily

00:19:30,970 --> 00:19:36,009
base then you have the utility layer

00:19:33,309 --> 00:19:41,350
which means that this is some sort of

00:19:36,009 --> 00:19:43,269
here we left pad or low dash or whatever

00:19:41,350 --> 00:19:47,169
and then we have your models and modules

00:19:43,269 --> 00:19:49,059
on top of that and you can exchange all

00:19:47,169 --> 00:19:52,029
the stuff on the top level freely

00:19:49,059 --> 00:19:54,009
without having any fear that that you

00:19:52,029 --> 00:19:57,789
have to change more than one file but if

00:19:54,009 --> 00:19:59,999
you change anything below you have to

00:19:57,789 --> 00:20:04,029
change everything that's on top of them

00:19:59,999 --> 00:20:06,279
so in this one example that we had we

00:20:04,029 --> 00:20:08,999
had a rod optimized utility layer I

00:20:06,279 --> 00:20:12,039
think of building your own moderniser

00:20:08,999 --> 00:20:16,090
build where you just have those tests in

00:20:12,039 --> 00:20:18,009
it that you really like and a change

00:20:16,090 --> 00:20:19,480
happened in this layer like I had to add

00:20:18,009 --> 00:20:21,639
some new functionality because one of my

00:20:19,480 --> 00:20:23,679
models was using this functionality this

00:20:21,639 --> 00:20:25,330
meant that I had to change all the

00:20:23,679 --> 00:20:28,929
modules as well because this utility

00:20:25,330 --> 00:20:31,029
layer has changed and what we did to

00:20:28,929 --> 00:20:33,399
overcome this since most of the models

00:20:31,029 --> 00:20:33,730
just took a little tiny wee bit of the

00:20:33,399 --> 00:20:36,010
city

00:20:33,730 --> 00:20:39,280
italy or maybe one function or maybe two

00:20:36,010 --> 00:20:41,680
functions nothing much we started tree

00:20:39,280 --> 00:20:44,290
shaking this tree who is heard of tree

00:20:41,680 --> 00:20:47,470
shaking in here quite a lot of what

00:20:44,290 --> 00:20:51,760
everybody who hasn't heard of it this

00:20:47,470 --> 00:20:55,750
works with Eggman stripped 16 Sumitra

00:20:51,760 --> 00:20:57,130
between 2016 and six with a conscript

00:20:55,750 --> 00:21:00,250
with the current version of ECMO script

00:20:57,130 --> 00:21:02,710
um if you use egg no script modules you

00:21:00,250 --> 00:21:06,070
can import them like that and there are

00:21:02,710 --> 00:21:07,330
tools like roll up chess or web I guess

00:21:06,070 --> 00:21:10,450
we pack the neck the current version of

00:21:07,330 --> 00:21:12,820
web pack does that work as well who can

00:21:10,450 --> 00:21:14,400
just import those bits and pieces that

00:21:12,820 --> 00:21:16,690
you really need to if I have a huge

00:21:14,400 --> 00:21:18,910
utility library and I just want to have

00:21:16,690 --> 00:21:21,160
this one helper function what those

00:21:18,910 --> 00:21:24,270
tools can do is extract those functions

00:21:21,160 --> 00:21:27,430
so my module now has those two functions

00:21:24,270 --> 00:21:30,900
included as well so instead of having a

00:21:27,430 --> 00:21:33,970
broad utility labor everybody consumes

00:21:30,900 --> 00:21:38,080
we pack those utilities that we needed

00:21:33,970 --> 00:21:40,000
into the module and so we had lots of

00:21:38,080 --> 00:21:42,280
highly flexible modules that we could

00:21:40,000 --> 00:21:44,440
exchange it will and the library was

00:21:42,280 --> 00:21:49,420
still underneath that was the way we did

00:21:44,440 --> 00:21:52,030
it there so that's one way to go if you

00:21:49,420 --> 00:21:55,450
request me to answer you what you want

00:21:52,030 --> 00:21:57,330
to do with your application remember the

00:21:55,450 --> 00:22:00,850
best request is regrets not being made

00:21:57,330 --> 00:22:03,010
but it's all I have a few of you advises

00:22:00,850 --> 00:22:04,780
that I can give you the first one is

00:22:03,010 --> 00:22:07,390
create independent exchangeable

00:22:04,780 --> 00:22:09,700
components so every package that you

00:22:07,390 --> 00:22:11,680
have and that you can deploy without

00:22:09,700 --> 00:22:13,480
touching everything else that's a win

00:22:11,680 --> 00:22:15,010
for HTTP too because your check just can

00:22:13,480 --> 00:22:16,480
update the version number everything

00:22:15,010 --> 00:22:17,950
else is on the client and you just

00:22:16,480 --> 00:22:19,210
transfer those little bits and pieces

00:22:17,950 --> 00:22:22,660
over the wire that you need for the next

00:22:19,210 --> 00:22:24,670
version create small and detach bundles

00:22:22,660 --> 00:22:27,220
if you're going to bundle yourself try

00:22:24,670 --> 00:22:30,490
to bundle them in a sensible way so they

00:22:27,220 --> 00:22:32,950
don't touch anything else coat

00:22:30,490 --> 00:22:34,750
application and edit weight is ok if the

00:22:32,950 --> 00:22:37,300
file can stay long on the client that's

00:22:34,750 --> 00:22:38,950
like me having a belly so I can go a

00:22:37,300 --> 00:22:42,940
whole day without food which I did today

00:22:38,950 --> 00:22:44,860
and think about long lasting

00:22:42,940 --> 00:22:46,909
applications in frequency of change so

00:22:44,860 --> 00:22:48,950
it's good to get a lot

00:22:46,909 --> 00:22:51,229
over when you first download the webpage

00:22:48,950 --> 00:22:52,519
but people are going to visit your

00:22:51,229 --> 00:22:54,700
product or your application or your

00:22:52,519 --> 00:22:56,749
webpage hopefully more than once so

00:22:54,700 --> 00:23:01,789
everything they have there already and

00:22:56,749 --> 00:23:05,629
they can use already is win and do we

00:23:01,789 --> 00:23:08,899
have still to a minute I made some I

00:23:05,629 --> 00:23:10,999
made some weird looking into the crystal

00:23:08,899 --> 00:23:12,470
ball and doing some predictions on how

00:23:10,999 --> 00:23:14,690
travel script frameworks are going to

00:23:12,470 --> 00:23:16,999
handle this and the things I came up was

00:23:14,690 --> 00:23:19,789
like amber is going to have wonderful

00:23:16,999 --> 00:23:21,889
integrated solution ready and you can

00:23:19,789 --> 00:23:23,749
easily migrate to it it will make for

00:23:21,889 --> 00:23:26,690
great conference talks but sadly howdini

00:23:23,749 --> 00:23:28,639
anybody is going to use it angry belches

00:23:26,690 --> 00:23:30,289
observes the ecosystem for a while and

00:23:28,639 --> 00:23:31,700
creates the undoubtedly best solution in

00:23:30,289 --> 00:23:33,229
version free to use it you have to

00:23:31,700 --> 00:23:36,559
include angular 1 dot 5 and go to and a

00:23:33,229 --> 00:23:38,840
bunch of ember.js modules and react is

00:23:36,559 --> 00:23:40,759
going to do nothing but the community

00:23:38,840 --> 00:23:42,229
will cup amber three build tools in

00:23:40,759 --> 00:23:45,489
several different solution that occur at

00:23:42,229 --> 00:23:49,460
least seven ! sin test in their strings

00:23:45,489 --> 00:23:52,190
but might turn out to be false oh don't

00:23:49,460 --> 00:23:54,859
bet on that so a lasting remark and

00:23:52,190 --> 00:23:58,970
that's all the things to take use tools

00:23:54,859 --> 00:24:00,590
not rules and I'm here for about 15 more

00:23:58,970 --> 00:24:04,639
minutes because now I confused everybody

00:24:00,590 --> 00:24:07,549
and at around four I have to jump onto a

00:24:04,639 --> 00:24:10,669
train go back home and getting

00:24:07,549 --> 00:24:14,239
embarrassed for many many more people at

00:24:10,669 --> 00:24:16,669
a wedding so yeah if you have any

00:24:14,239 --> 00:24:19,279
questions awesome click other than that

00:24:16,669 --> 00:24:21,849
thank you very much thank you for the

00:24:19,279 --> 00:24:21,849
pledge for having me

00:24:27,450 --> 00:24:33,700
and this one more thing I'm immediately

00:24:31,180 --> 00:24:36,130
going to regret this but I announced now

00:24:33,700 --> 00:24:39,190
javaScript conference that lens is going

00:24:36,130 --> 00:24:41,890
to have in January 2017 and now that i

00:24:39,190 --> 00:24:44,320
announced it for about before about 500

00:24:41,890 --> 00:24:47,140
people i actually can't go back anymore

00:24:44,320 --> 00:24:51,340
so i'm going to have to do this but yeah

00:24:47,140 --> 00:24:55,380
mark your calendar january 2017 there's

00:24:51,340 --> 00:24:55,380

YouTube URL: https://www.youtube.com/watch?v=98z0XjYWX0o


