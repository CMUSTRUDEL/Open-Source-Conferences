Title: Laurie Voss: What everybody should know about npm - JSConf Budapest 2016
Publication date: 2016-06-09
Playlist: JSConf Budapest 2016
Description: 
	npm is six years old, but 80% of npm users turned up in the last year. That's a lot of new people! Because of that, a lot of older, core features aren't known about by the majority of npm users. This talk is about how npm expects you to use npm, and the commands and workflows that can make you into a power user. There will be lots of stuff for beginners, and definitely some tricks that even most pros don't know.

http://jsconfbp.com/speakers/laurie-voss.html
Captions: 
	00:00:09,299 --> 00:00:18,820
ways with the left pad jokes never gonna

00:00:13,510 --> 00:00:24,039
hear the end of the left pad jokes can

00:00:18,820 --> 00:00:26,350
everyone see that fantastic huh all

00:00:24,039 --> 00:00:28,270
right now so not trapped behind a podium

00:00:26,350 --> 00:00:30,160
gonna try and use the fancy web app

00:00:28,270 --> 00:00:33,400
which requires internet access therefore

00:00:30,160 --> 00:00:34,030
it's not gonna work no it's not oh it's

00:00:33,400 --> 00:00:39,940
gonna work

00:00:34,030 --> 00:00:41,770
Web Apps everyone so I'm Laurie like he

00:00:39,940 --> 00:00:43,239
said I'm the CTO of NPM Inc and the

00:00:41,770 --> 00:00:45,879
important thing to remember is that I'm

00:00:43,239 --> 00:00:48,280
not the famous NPM guy the famous NPM

00:00:45,879 --> 00:00:49,690
guy is Isaac Schluter not him I'm just

00:00:48,280 --> 00:00:51,850
the guy that he picked to run

00:00:49,690 --> 00:00:53,590
engineering and I'm here to talk about

00:00:51,850 --> 00:00:57,699
the stuff that everybody should know

00:00:53,590 --> 00:01:00,699
about NPM why am I talking about that

00:00:57,699 --> 00:01:02,500
stuff because NPM has a lot of users

00:01:00,699 --> 00:01:04,989
these days there's something like 4

00:01:02,500 --> 00:01:08,860
million NPM users and they download a

00:01:04,989 --> 00:01:12,490
billion packages every 7 days how many

00:01:08,860 --> 00:01:16,630
of you use NPM raise your hands how many

00:01:12,490 --> 00:01:20,020
of you use NPM every single day how many

00:01:16,630 --> 00:01:25,390
of you work for NPM you're all buying

00:01:20,020 --> 00:01:28,630
that guy a drink but my point is that

00:01:25,390 --> 00:01:30,909
the NPM community is growing really fast

00:01:28,630 --> 00:01:33,580
half of NPM users have been using it for

00:01:30,909 --> 00:01:35,530
less than a year which means that our

00:01:33,580 --> 00:01:36,369
Newser base is full of new people and

00:01:35,530 --> 00:01:38,710
that is great

00:01:36,369 --> 00:01:40,420
welcome to NPM but it means that there

00:01:38,710 --> 00:01:44,290
are a bunch of features of NPM that

00:01:40,420 --> 00:01:46,060
people who have been using NPM for a

00:01:44,290 --> 00:01:47,920
while know about but people who are new

00:01:46,060 --> 00:01:50,020
to NPM don't know about and you know

00:01:47,920 --> 00:01:52,869
that's more than half of you so that's

00:01:50,020 --> 00:01:54,460
what this talk is about fixing and I

00:01:52,869 --> 00:01:55,780
think even if you've been using NPM for

00:01:54,460 --> 00:02:03,119
a while there will be some stuff in here

00:01:55,780 --> 00:02:04,960
you don't know about so come on web apps

00:02:03,119 --> 00:02:08,340
let's start with the very most basic

00:02:04,960 --> 00:02:10,720
thing this is the architecture of NPM

00:02:08,340 --> 00:02:12,579
sitting on your computer is the CLI

00:02:10,720 --> 00:02:15,069
that's the command-line client that is

00:02:12,579 --> 00:02:17,440
the thing that runs when you run NPM and

00:02:15,069 --> 00:02:19,959
when you ask it to install and and when

00:02:17,440 --> 00:02:22,959
you ask NPM to install a package

00:02:19,959 --> 00:02:24,640
the CLI talks to the registry which is a

00:02:22,959 --> 00:02:26,950
set of servers all across the world and

00:02:24,640 --> 00:02:29,260
it asks it what versions exist and it

00:02:26,950 --> 00:02:31,120
tells them and then NPM picks from that

00:02:29,260 --> 00:02:34,000
set of versions the best version that

00:02:31,120 --> 00:02:36,790
matches the specifications in your

00:02:34,000 --> 00:02:40,299
package JSON and then it downloads it

00:02:36,790 --> 00:02:43,510
from one of three possible places first

00:02:40,299 --> 00:02:45,040
NPM will check the local cache if you've

00:02:43,510 --> 00:02:48,040
ever installed that version of that

00:02:45,040 --> 00:02:49,420
package before even if it was for some

00:02:48,040 --> 00:02:52,060
other project then it will install from

00:02:49,420 --> 00:02:54,390
the local copy this is gonna be super

00:02:52,060 --> 00:02:54,390
annoying

00:02:54,599 --> 00:02:59,440
so people complain oh NP M downloads the

00:02:58,150 --> 00:03:00,670
universe every single time it really

00:02:59,440 --> 00:03:02,410
doesn't like if you've ever downloaded

00:03:00,670 --> 00:03:05,019
that thing before it doesn't bother to

00:03:02,410 --> 00:03:06,220
do it and if it's not in the local cache

00:03:05,019 --> 00:03:07,989
it will check the registry and the

00:03:06,220 --> 00:03:10,750
registry is behind a very big worldwide

00:03:07,989 --> 00:03:12,640
cache called a CDN so usually when you

00:03:10,750 --> 00:03:14,079
download a package you're downloading it

00:03:12,640 --> 00:03:15,489
from very close to you you're

00:03:14,079 --> 00:03:16,900
downloading it from some server that's

00:03:15,489 --> 00:03:19,150
in your country which is why it's very

00:03:16,900 --> 00:03:20,920
fast and it's only if those other two

00:03:19,150 --> 00:03:22,810
fail that we go to our servers which are

00:03:20,920 --> 00:03:25,180
in the US and in Australia and in

00:03:22,810 --> 00:03:27,850
Germany so you're usually going pretty

00:03:25,180 --> 00:03:29,799
fast when all of this may sound really

00:03:27,850 --> 00:03:34,209
basic but the reason that I mentioned

00:03:29,799 --> 00:03:35,650
this stuff is because about half of NPM

00:03:34,209 --> 00:03:38,319
users don't know that the local cache

00:03:35,650 --> 00:03:40,959
exists and about 20 percent of NPM users

00:03:38,319 --> 00:03:43,120
don't know that the registry exists a

00:03:40,959 --> 00:03:46,180
lot of people think that NPM packages

00:03:43,120 --> 00:03:47,859
are just hosted on github which github

00:03:46,180 --> 00:03:49,480
would be very annoyed about if that were

00:03:47,859 --> 00:03:51,400
true because they download a billion

00:03:49,480 --> 00:03:53,019
packages every week that would be a lot

00:03:51,400 --> 00:03:56,950
of stuff from github for them to serve

00:03:53,019 --> 00:03:59,440
for free for no reason of course it is

00:03:56,950 --> 00:04:02,139
possible to specify a github URL as a

00:03:59,440 --> 00:04:05,349
package dependency and if you do that

00:04:02,139 --> 00:04:07,000
NPM will download from github and that

00:04:05,349 --> 00:04:09,340
will work with any git hosting service

00:04:07,000 --> 00:04:11,260
so you can use it with github gist's you

00:04:09,340 --> 00:04:13,780
can install from a gist if that felt

00:04:11,260 --> 00:04:15,340
like a good idea to you you can install

00:04:13,780 --> 00:04:26,590
from bitbucket you can install from git

00:04:15,340 --> 00:04:28,240
lab to my slides if you want to you can

00:04:26,590 --> 00:04:31,200
also have your own private copy of NPM

00:04:28,240 --> 00:04:31,200
called NPM Enterprise

00:04:31,529 --> 00:04:35,569
it sits inside your firewall and it

00:04:33,990 --> 00:04:39,029
hosts your packages for you

00:04:35,569 --> 00:04:40,469
NPM Enterprise will store copies of

00:04:39,029 --> 00:04:42,090
public packages as well as your private

00:04:40,469 --> 00:04:43,770
packages and you can apply your own

00:04:42,090 --> 00:04:45,330
policies for which of your packages get

00:04:43,770 --> 00:04:47,370
married inside your firewall so you can

00:04:45,330 --> 00:04:48,960
say just mirror the whole registry I

00:04:47,370 --> 00:04:51,120
want some kind of outage insurance you

00:04:48,960 --> 00:04:52,770
can say Mira stuff that matches my

00:04:51,120 --> 00:04:54,300
security pallas you can say mirrors

00:04:52,770 --> 00:04:57,680
stuff that matches my licensing

00:04:54,300 --> 00:04:57,680
restrictions whatever you want it to do

00:04:58,909 --> 00:05:04,560
and my slides are really messed up but

00:05:03,060 --> 00:05:07,229
that's the simplest picture of NPM as

00:05:04,560 --> 00:05:08,339
possible architecture so let's get on to

00:05:07,229 --> 00:05:10,199
the really interesting stuff which is

00:05:08,339 --> 00:05:12,599
the NPM commands starting with the most

00:05:10,199 --> 00:05:15,449
important NPM command which is NPM

00:05:12,599 --> 00:05:20,310
install NPM dash G this will update your

00:05:15,449 --> 00:05:22,439
NPM this will get you NPM 3 which is the

00:05:20,310 --> 00:05:23,999
latest NPM and it's not it's not bundled

00:05:22,439 --> 00:05:26,610
with anything other than node 4 right

00:05:23,999 --> 00:05:29,129
now and we recommend it it is both

00:05:26,610 --> 00:05:31,979
faster and more reliable than NPM 2 and

00:05:29,129 --> 00:05:34,020
that is you know that fact is new it was

00:05:31,979 --> 00:05:37,259
not faster and it was not more reliable

00:05:34,020 --> 00:05:39,089
until relatively recently if you're not

00:05:37,259 --> 00:05:40,319
yet ready to upgrade to NPM 3 you can

00:05:39,089 --> 00:05:41,909
use that command at the bottom which

00:05:40,319 --> 00:05:44,460
will give you the latest version of NPM

00:05:41,909 --> 00:05:46,680
to both NPM 2 and NPM 3 are updated

00:05:44,460 --> 00:05:49,939
every single week with new fixes so lots

00:05:46,680 --> 00:05:54,779
of people are dozens of versions behind

00:05:49,939 --> 00:05:55,680
this next command that you should know

00:05:54,779 --> 00:05:57,689
is NPM in it

00:05:55,680 --> 00:06:00,599
NPM and it will start a new package for

00:05:57,689 --> 00:06:02,099
you by creating your package JSON it

00:06:00,599 --> 00:06:04,949
will ask you a bunch of questions like a

00:06:02,099 --> 00:06:07,080
questionnaire but it also has a bunch of

00:06:04,949 --> 00:06:08,639
smart defaults so if you're just pretty

00:06:07,080 --> 00:06:10,110
sure that NPM init is going to get all

00:06:08,639 --> 00:06:12,240
the defaults right which it gets right

00:06:10,110 --> 00:06:16,289
most of the time you can just run NPM in

00:06:12,240 --> 00:06:17,849
it - - yes don't write your package JSON

00:06:16,289 --> 00:06:20,310
yourself this is the thing I'm going to

00:06:17,849 --> 00:06:22,199
come back to a couple of times most of

00:06:20,310 --> 00:06:23,879
the time NPM has tools that will write

00:06:22,199 --> 00:06:25,409
your package JSON for you and it's

00:06:23,879 --> 00:06:30,479
better at it than you are so you should

00:06:25,409 --> 00:06:33,810
just let it do that a relatively new

00:06:30,479 --> 00:06:35,399
feature of NPM is scopes there are so

00:06:33,810 --> 00:06:38,039
many packages now there's like 280

00:06:35,399 --> 00:06:39,539
thousand packages that if you're trying

00:06:38,039 --> 00:06:40,800
to name a new package it can be kind of

00:06:39,539 --> 00:06:43,289
a pain in the ass because all of the

00:06:40,800 --> 00:06:44,540
good names are taken so the solution is

00:06:43,289 --> 00:06:46,700
that you can publish packages

00:06:44,540 --> 00:06:48,380
underneath your username and this lets

00:06:46,700 --> 00:06:49,940
you use nice descriptive package names

00:06:48,380 --> 00:06:53,750
because nothing under your username is

00:06:49,940 --> 00:06:55,820
taken and the scope is part of the name

00:06:53,750 --> 00:06:57,470
so you publish using the scope and you

00:06:55,820 --> 00:06:59,060
install using the scope and you require

00:06:57,470 --> 00:07:02,000
the code using the scope it's extremely

00:06:59,060 --> 00:07:03,590
simple to use scoped packages can be

00:07:02,000 --> 00:07:05,450
public like global packages are and

00:07:03,590 --> 00:07:07,610
scoped packages can also be private

00:07:05,450 --> 00:07:11,810
which is another paid feature there's a

00:07:07,610 --> 00:07:13,430
couple of blogs in here here's an

00:07:11,810 --> 00:07:14,870
advanced trick this is the one that I

00:07:13,430 --> 00:07:16,250
throw in to make sure that nobody can

00:07:14,870 --> 00:07:19,640
say they didn't find anything they never

00:07:16,250 --> 00:07:22,550
knew before if you have a big team and

00:07:19,640 --> 00:07:24,080
you create packages all the time and you

00:07:22,550 --> 00:07:26,840
have some standards about what your

00:07:24,080 --> 00:07:29,390
package JSON should look like you can

00:07:26,840 --> 00:07:32,420
create a dot NPM init J's file in your

00:07:29,390 --> 00:07:34,160
home directory and when NPM in it runs

00:07:32,420 --> 00:07:36,260
it will pick up that file and execute it

00:07:34,160 --> 00:07:38,350
and change the questionnaire that NPM

00:07:36,260 --> 00:07:40,940
init runs which can be extremely useful

00:07:38,350 --> 00:07:43,640
you can set defaults that are different

00:07:40,940 --> 00:07:45,650
from the standard defaults you can skip

00:07:43,640 --> 00:07:47,000
questions you can set a package naming

00:07:45,650 --> 00:07:49,190
convention you can do whatever the hell

00:07:47,000 --> 00:07:50,600
you want because it's just arbitrary

00:07:49,190 --> 00:07:52,190
JavaScript running in there using a

00:07:50,600 --> 00:07:54,560
package called prom xored which I'm not

00:07:52,190 --> 00:07:57,350
gonna go into but you can do really cool

00:07:54,560 --> 00:07:58,880
stuff and just share that your npm in it

00:07:57,350 --> 00:08:00,740
with your entire team and sort of

00:07:58,880 --> 00:08:02,630
suddenly all of your packages across

00:08:00,740 --> 00:08:06,740
your team are initialized in the same

00:08:02,630 --> 00:08:08,420
useful way one last thing about MPM in

00:08:06,740 --> 00:08:11,900
it that some people don't know is that

00:08:08,420 --> 00:08:13,850
npm init can always be safely rerun and

00:08:11,900 --> 00:08:16,280
that's useful because npm makes smart

00:08:13,850 --> 00:08:19,190
guesses about stuff if you are in a git

00:08:16,280 --> 00:08:20,720
git repo and you run npm init and PM

00:08:19,190 --> 00:08:23,450
will know that and it will add your git

00:08:20,720 --> 00:08:25,370
repo to your repository field if you've

00:08:23,450 --> 00:08:27,560
installed stuff into node modules in you

00:08:25,370 --> 00:08:29,570
run npm in it it will automatically put

00:08:27,560 --> 00:08:32,240
the node modules into your dependencies

00:08:29,570 --> 00:08:34,040
field so even if you do that out of

00:08:32,240 --> 00:08:35,240
order even if you npm init and then you

00:08:34,040 --> 00:08:36,860
install some stuff and then you add a

00:08:35,240 --> 00:08:38,150
git repo you can just run NPM at it

00:08:36,860 --> 00:08:39,740
again and it will pick that stuff up

00:08:38,150 --> 00:08:41,360
again and then will add it to package

00:08:39,740 --> 00:08:43,640
JSON without blowing away any of the

00:08:41,360 --> 00:08:44,960
stuff that you put in to package JSON so

00:08:43,640 --> 00:08:46,280
it's completely safe and you can just

00:08:44,960 --> 00:08:48,440
rerun it all the time to make sure that

00:08:46,280 --> 00:08:55,280
NPM and it thinks that your package JSON

00:08:48,440 --> 00:08:57,140
is up to snuff so like I said never edit

00:08:55,280 --> 00:08:58,370
your package JSON yourself here's

00:08:57,140 --> 00:08:59,540
another way to avoid doing

00:08:58,370 --> 00:09:01,550
which a lot of people don't know which

00:08:59,540 --> 00:09:03,110
is npm install' - - save that will

00:09:01,550 --> 00:09:05,210
automatically add your package to your

00:09:03,110 --> 00:09:09,080
the package - your package JSON for you

00:09:05,210 --> 00:09:10,820
you can use - yes for short if you use -

00:09:09,080 --> 00:09:12,740
- save Devitt will add it to your dev

00:09:10,820 --> 00:09:15,650
dependencies you can also do - D for

00:09:12,740 --> 00:09:17,870
short why should you be adding stuff to

00:09:15,650 --> 00:09:20,110
your dev dependencies because then you

00:09:17,870 --> 00:09:22,610
can skip installing them on production

00:09:20,110 --> 00:09:23,990
npm install' - - production will skip it

00:09:22,610 --> 00:09:25,250
your dev dependencies which will make

00:09:23,990 --> 00:09:26,750
your production installs much much

00:09:25,250 --> 00:09:28,960
faster you won't need your testing

00:09:26,750 --> 00:09:31,160
framework you won't need a bunch of

00:09:28,960 --> 00:09:33,170
helper libraries that you only use in

00:09:31,160 --> 00:09:35,750
development on production so you can

00:09:33,170 --> 00:09:38,540
just skip installing them and another

00:09:35,750 --> 00:09:41,480
way to make installs faster is to use

00:09:38,540 --> 00:09:43,279
bundled dependencies bundle dependencies

00:09:41,480 --> 00:09:45,560
are included in your package they're

00:09:43,279 --> 00:09:47,750
thrown right in there so they don't need

00:09:45,560 --> 00:09:49,700
to be downloaded separately if you

00:09:47,750 --> 00:09:52,130
bundle all of your dependencies then an

00:09:49,700 --> 00:09:53,690
NPM install becomes a single large file

00:09:52,130 --> 00:09:55,190
that you download and unpack without

00:09:53,690 --> 00:09:56,960
having to do any additional downloads

00:09:55,190 --> 00:09:59,110
which can make things a lot faster and

00:09:56,960 --> 00:10:02,450
is a big time saver for larger projects

00:09:59,110 --> 00:10:04,310
this is how NPM distributes itself and

00:10:02,450 --> 00:10:09,500
PM bundles all of its dependencies

00:10:04,310 --> 00:10:11,240
together I mentioned earlier that when

00:10:09,500 --> 00:10:13,310
NPM installs it checks the server for

00:10:11,240 --> 00:10:16,040
the current list of versions this means

00:10:13,310 --> 00:10:18,589
that even if you already have the

00:10:16,040 --> 00:10:20,240
current version in your local cache it's

00:10:18,589 --> 00:10:21,650
still gonna need to check the server and

00:10:20,240 --> 00:10:23,089
hit the server and go are there any

00:10:21,650 --> 00:10:26,540
newer versions in this version that I

00:10:23,089 --> 00:10:28,850
have which means that you still have to

00:10:26,540 --> 00:10:30,050
hit the network and that check is

00:10:28,850 --> 00:10:32,390
usually very quick because it's just

00:10:30,050 --> 00:10:33,890
like a 304 most of the time because it's

00:10:32,390 --> 00:10:35,600
not really downloading anything but that

00:10:33,890 --> 00:10:37,459
can still be really annoying if you're

00:10:35,600 --> 00:10:39,140
in a low bandwidth environment like

00:10:37,459 --> 00:10:43,700
airplane Wi-Fi or the nation of

00:10:39,140 --> 00:10:45,110
Australia and the cashman option is your

00:10:43,700 --> 00:10:46,820
Savior here the catchment option

00:10:45,110 --> 00:10:48,470
controls how long NPM weights between

00:10:46,820 --> 00:10:50,990
checking the registry to see if there's

00:10:48,470 --> 00:10:53,540
a newer version and the default is just

00:10:50,990 --> 00:10:55,670
10 seconds so if you've got an install

00:10:53,540 --> 00:10:57,620
that's 30 seconds long it can check for

00:10:55,670 --> 00:10:59,450
the same package three times within the

00:10:57,620 --> 00:11:02,300
same installation sequence which is not

00:10:59,450 --> 00:11:03,860
super smart if I'm being honest so you

00:11:02,300 --> 00:11:05,930
can set that to 60 seconds or something

00:11:03,860 --> 00:11:08,320
else and your installs will often go a

00:11:05,930 --> 00:11:08,320
lot faster

00:11:15,400 --> 00:11:20,690
but NPM is more than just a way to to

00:11:18,860 --> 00:11:23,870
install the pendants ease NPM has a

00:11:20,690 --> 00:11:26,060
bunch of other stuff it's also a way to

00:11:23,870 --> 00:11:27,740
automate the way that your team uses

00:11:26,060 --> 00:11:29,570
your app that's one of the things that

00:11:27,740 --> 00:11:31,670
NPM with the features that NPM is sort

00:11:29,570 --> 00:11:33,560
of accumulated over the years is it's a

00:11:31,670 --> 00:11:36,200
way of crystallizing the best practices

00:11:33,560 --> 00:11:39,980
of your team into a machine rather than

00:11:36,200 --> 00:11:42,080
just a list and one of the simplest ways

00:11:39,980 --> 00:11:43,820
to do that is NPM default run scripts

00:11:42,080 --> 00:11:45,650
you can add these to the scripts section

00:11:43,820 --> 00:11:47,570
of your package JSON

00:11:45,650 --> 00:11:50,450
unfortunately there's no automatic way

00:11:47,570 --> 00:11:52,520
of doing it but then you then you and

00:11:50,450 --> 00:11:54,950
your team can use NPM start an NPM stop

00:11:52,520 --> 00:11:56,390
and restart and test to control the

00:11:54,950 --> 00:11:57,680
basic operations of the app that you're

00:11:56,390 --> 00:12:00,320
building

00:11:57,680 --> 00:12:01,730
NPM tests is also used by CI systems

00:12:00,320 --> 00:12:03,110
like Travis to run your tests

00:12:01,730 --> 00:12:08,840
automatically so you don't have to tell

00:12:03,110 --> 00:12:14,570
Travis how to do that so now you've got

00:12:08,840 --> 00:12:17,390
an app or a module wait no hang on there

00:12:14,570 --> 00:12:18,920
we go oh one other feature of run

00:12:17,390 --> 00:12:22,730
scripts is that they have dev

00:12:18,920 --> 00:12:24,380
dependencies in their path so if you

00:12:22,730 --> 00:12:26,390
have grunt oh you have gulp or your tap

00:12:24,380 --> 00:12:28,940
or you have mocha which you might be

00:12:26,390 --> 00:12:31,640
tempted to install globally and run your

00:12:28,940 --> 00:12:32,780
test with or run your tooling with you

00:12:31,640 --> 00:12:35,180
can install them into your dev

00:12:32,780 --> 00:12:37,220
dependencies and you can refer to them

00:12:35,180 --> 00:12:38,360
in your run scripts just directly

00:12:37,220 --> 00:12:41,750
without needing to know that they're

00:12:38,360 --> 00:12:43,100
installed this prevents two problems it

00:12:41,750 --> 00:12:44,300
prevents problems with different

00:12:43,100 --> 00:12:45,830
projects that you have requiring

00:12:44,300 --> 00:12:47,360
different versions of those things if

00:12:45,830 --> 00:12:50,660
you've ever had two projects that

00:12:47,360 --> 00:12:52,520
require different versions of mocha and

00:12:50,660 --> 00:12:54,020
fail your tests in either one then you

00:12:52,520 --> 00:12:56,360
can solve it by having them local to

00:12:54,020 --> 00:12:57,770
each project and it also saves your

00:12:56,360 --> 00:12:59,330
teammates from having to install those

00:12:57,770 --> 00:13:00,800
global tools when they install your

00:12:59,330 --> 00:13:02,210
project they just come along for the

00:13:00,800 --> 00:13:04,190
ride with the rest of the project which

00:13:02,210 --> 00:13:05,210
is super useful and it doesn't cost you

00:13:04,190 --> 00:13:06,800
anything because their dev dependencies

00:13:05,210 --> 00:13:11,990
you can skip installing them in

00:13:06,800 --> 00:13:13,370
production so now you've got an app or a

00:13:11,990 --> 00:13:17,000
module and you can test it and you can

00:13:13,370 --> 00:13:18,230
run it and you'll want to publish it if

00:13:17,000 --> 00:13:19,760
it's a package that you want the world

00:13:18,230 --> 00:13:21,020
to see then you can do what people have

00:13:19,760 --> 00:13:22,760
always done you could just run NPM

00:13:21,020 --> 00:13:25,610
publish and using

00:13:22,760 --> 00:13:27,500
using a global name but if it's just

00:13:25,610 --> 00:13:29,420
your team or if it's a personal app of

00:13:27,500 --> 00:13:30,889
yours you'll probably want to put it

00:13:29,420 --> 00:13:35,680
under scope and you might want it to be

00:13:30,889 --> 00:13:39,970
private so now we've got as far as

00:13:35,680 --> 00:13:39,970
publishing the first version of your app

00:13:40,300 --> 00:13:45,019
but the pub but the power of NPM comes

00:13:43,100 --> 00:13:48,199
from the way that it handles multiple

00:13:45,019 --> 00:13:51,139
versions and the root of that is

00:13:48,199 --> 00:13:53,269
semantic versioning or semver semantic

00:13:51,139 --> 00:13:55,190
versioning at heart is very simple you

00:13:53,269 --> 00:13:56,930
know past it's hard it gets very very

00:13:55,190 --> 00:14:00,290
complicated but at heart it's very

00:13:56,930 --> 00:14:02,060
simple semver is a contract it's a

00:14:00,290 --> 00:14:04,880
contract between the author of a package

00:14:02,060 --> 00:14:07,070
and the users of the package that says

00:14:04,880 --> 00:14:08,720
how big a change happened between two

00:14:07,070 --> 00:14:11,750
versions the first number called the

00:14:08,720 --> 00:14:13,399
major number is for breaking changes

00:14:11,750 --> 00:14:14,660
it's for stuff that requires users to

00:14:13,399 --> 00:14:16,760
change their code if they're going to

00:14:14,660 --> 00:14:18,529
use this new version the second number

00:14:16,760 --> 00:14:19,760
called the minors for feature changes it

00:14:18,529 --> 00:14:21,279
means you've added something without

00:14:19,760 --> 00:14:24,440
changing anything that was there before

00:14:21,279 --> 00:14:26,480
and the last one called the patch number

00:14:24,440 --> 00:14:28,639
is for bug and security fixes they

00:14:26,480 --> 00:14:32,170
should correct bugs without requiring

00:14:28,639 --> 00:14:32,170
people to change their code in any way

00:14:33,970 --> 00:14:38,209
when you update your package you have to

00:14:36,380 --> 00:14:39,889
update your version and the version is

00:14:38,209 --> 00:14:42,829
part of package JSON so like most

00:14:39,889 --> 00:14:46,250
changes to package JSON NPM has a way to

00:14:42,829 --> 00:14:48,290
do that for you use NPM version major

00:14:46,250 --> 00:14:50,089
for breaking changes use NPM version

00:14:48,290 --> 00:14:53,029
minor for new features in NPM version

00:14:50,089 --> 00:14:54,589
patch for fixes version also supports

00:14:53,029 --> 00:14:57,199
all of the other sort of complicated

00:14:54,589 --> 00:14:59,240
edge cases of the semper versioning

00:14:57,199 --> 00:15:01,269
system but they're complicated so I'm

00:14:59,240 --> 00:15:03,769
not going to go into them

00:15:01,269 --> 00:15:05,899
version also creates a get tag at the

00:15:03,769 --> 00:15:07,670
same time that it that it bumps your

00:15:05,899 --> 00:15:09,410
version for you and it tags your your

00:15:07,670 --> 00:15:11,720
get repo which is extremely useful so

00:15:09,410 --> 00:15:14,269
you can throw in a dash M and that will

00:15:11,720 --> 00:15:18,800
be applied to the as the commit message

00:15:14,269 --> 00:15:22,000
for that get tag but of course semver is

00:15:18,800 --> 00:15:25,490
a promise it's not a guarantee and

00:15:22,000 --> 00:15:27,589
sometimes those things that you thought

00:15:25,490 --> 00:15:29,839
were features they cause stuff to break

00:15:27,589 --> 00:15:31,699
because you didn't do the feature right

00:15:29,839 --> 00:15:32,899
and sometimes you're bug fix causes

00:15:31,699 --> 00:15:35,050
stuff to break because people were

00:15:32,899 --> 00:15:37,630
relying on the broken behavior

00:15:35,050 --> 00:15:39,339
that shouldn't happen but it does so

00:15:37,630 --> 00:15:40,589
what is a responsible NPM developers

00:15:39,339 --> 00:15:43,720
supposed to do

00:15:40,589 --> 00:15:45,550
well NPM shrink-wrap was invented to

00:15:43,720 --> 00:15:47,200
solve that problem it captures your

00:15:45,550 --> 00:15:48,670
entire dependency tree all of their

00:15:47,200 --> 00:15:51,820
dependencies and their dependencies all

00:15:48,670 --> 00:15:53,620
the way down and it saves them to a

00:15:51,820 --> 00:15:55,450
shrink wrap JSON file which it puts in

00:15:53,620 --> 00:15:58,000
the root of your package and it once

00:15:55,450 --> 00:16:00,640
when you install your package elsewhere

00:15:58,000 --> 00:16:02,620
if there's a shrink wrap file there NPM

00:16:00,640 --> 00:16:06,130
will install the exact version specified

00:16:02,620 --> 00:16:07,360
in the shrink wrap file but there's a

00:16:06,130 --> 00:16:10,899
problem with that which is that shrink

00:16:07,360 --> 00:16:12,700
wrap is kind of buggy sorry we're

00:16:10,899 --> 00:16:15,370
working on that but in the meantime

00:16:12,700 --> 00:16:18,910
there's packages like cling wrap and I

00:16:15,370 --> 00:16:20,860
think shrunk wrap or something which

00:16:18,910 --> 00:16:22,570
have had some success instead of

00:16:20,860 --> 00:16:24,250
papering over the holes that exist in

00:16:22,570 --> 00:16:25,750
shrink wrap right now but actually

00:16:24,250 --> 00:16:28,829
fixing shrink wrap is one of the things

00:16:25,750 --> 00:16:31,920
that the team is working on this year

00:16:28,829 --> 00:16:34,420
but all of this so far has been assuming

00:16:31,920 --> 00:16:35,500
that you're there's just one of you that

00:16:34,420 --> 00:16:37,930
you're writing the package and you're

00:16:35,500 --> 00:16:40,149
publishing it but in reality you work in

00:16:37,930 --> 00:16:41,560
a team and you want other people in your

00:16:40,149 --> 00:16:43,329
company to be able to use your package

00:16:41,560 --> 00:16:44,620
and some of them should be able to

00:16:43,329 --> 00:16:48,279
publish it but some of them should only

00:16:44,620 --> 00:16:49,570
be able to install it and this is

00:16:48,279 --> 00:16:52,089
especially important when working with

00:16:49,570 --> 00:16:54,160
private packages the old way to do this

00:16:52,089 --> 00:16:59,800
was NPM owner but there's a better way

00:16:54,160 --> 00:17:01,510
now and that is NPM organizations to use

00:16:59,800 --> 00:17:04,209
organizations we added two new commands

00:17:01,510 --> 00:17:07,270
to NPM NPM team and NPM access these let

00:17:04,209 --> 00:17:08,829
you put people into teams and give them

00:17:07,270 --> 00:17:12,010
access to packages in a really granular

00:17:08,829 --> 00:17:15,669
way NPM organizations are a paid feature

00:17:12,010 --> 00:17:17,470
right now we are hoping to change that

00:17:15,669 --> 00:17:21,130
so I apologize for this being a slight

00:17:17,470 --> 00:17:22,600
plug as well the team command is pretty

00:17:21,130 --> 00:17:24,640
self-explanatory you can create and

00:17:22,600 --> 00:17:25,839
destroy a team you can add people to the

00:17:24,640 --> 00:17:27,160
team with add you can remove them with

00:17:25,839 --> 00:17:31,360
RM and you can see who's in the team

00:17:27,160 --> 00:17:34,600
with LS NPM access is similarly pretty

00:17:31,360 --> 00:17:36,429
self-explanatory access grant gives a

00:17:34,600 --> 00:17:38,290
team read-only or read/write access to a

00:17:36,429 --> 00:17:42,010
package access revoke takes that

00:17:38,290 --> 00:17:43,809
permission away access LS packages shows

00:17:42,010 --> 00:17:46,929
you what packages a user or a team can

00:17:43,809 --> 00:17:49,030
see and access LS collaborators

00:17:46,929 --> 00:17:52,960
it shows you what users and teams

00:17:49,030 --> 00:17:55,120
access to a particular package so with

00:17:52,960 --> 00:17:57,070
the plug over let's level up again we

00:17:55,120 --> 00:17:59,320
went from one user with one package to

00:17:57,070 --> 00:18:01,210
multiple users with one package and now

00:17:59,320 --> 00:18:03,700
it's time for multiple packages imagine

00:18:01,210 --> 00:18:06,730
that you have split up your system into

00:18:03,700 --> 00:18:08,050
a micro service architecture you have

00:18:06,730 --> 00:18:09,520
several micro services they have shared

00:18:08,050 --> 00:18:14,050
logic so you split the code up into

00:18:09,520 --> 00:18:15,730
modules that multiple services use so

00:18:14,050 --> 00:18:17,050
now you've got an app and you've got sub

00:18:15,730 --> 00:18:19,420
modules and you want to be able to work

00:18:17,050 --> 00:18:22,920
on them at the same time the command

00:18:19,420 --> 00:18:25,060
that you want to do that is NPM link

00:18:22,920 --> 00:18:28,210
here's how it works in the root of your

00:18:25,060 --> 00:18:31,480
package which is called Alice run NPM

00:18:28,210 --> 00:18:34,000
link now go to your other package which

00:18:31,480 --> 00:18:36,250
is called Bob and run NPM link Alice and

00:18:34,000 --> 00:18:37,780
suddenly Alice is immediately available

00:18:36,250 --> 00:18:39,160
in Bob any changes that you make in

00:18:37,780 --> 00:18:40,300
Alice will be immediately available in

00:18:39,160 --> 00:18:43,510
Bob and you can work on the two at the

00:18:40,300 --> 00:18:45,130
same time this is a trivial feature but

00:18:43,510 --> 00:18:48,010
it's absolutely essential to working on

00:18:45,130 --> 00:18:49,480
large NPM projects NPM itself consists

00:18:48,010 --> 00:18:51,760
of dozens of modules and it's impossible

00:18:49,480 --> 00:18:56,290
to work on NPM without using lots of NPM

00:18:51,760 --> 00:18:58,930
link so cool we've got multiple users

00:18:56,290 --> 00:19:00,280
multiple packages if you want to level

00:18:58,930 --> 00:19:02,410
up again the next thing is multiple

00:19:00,280 --> 00:19:03,940
releases if you have a lot of users

00:19:02,410 --> 00:19:06,100
you're gonna find this valuable you're

00:19:03,940 --> 00:19:07,480
gonna have the stable version that most

00:19:06,100 --> 00:19:09,190
people are using and you're gonna want

00:19:07,480 --> 00:19:12,820
to have a next or a beta version that

00:19:09,190 --> 00:19:14,290
new people are using of course you could

00:19:12,820 --> 00:19:15,610
just tell people which the specific

00:19:14,290 --> 00:19:17,500
version is you'd like one point five

00:19:15,610 --> 00:19:19,570
point seven that's beta everybody should

00:19:17,500 --> 00:19:21,370
try it out but that's kind of a pain in

00:19:19,570 --> 00:19:24,610
the ass and NPM is here to remove pains

00:19:21,370 --> 00:19:28,360
in your ass so you can use dis tags also

00:19:24,610 --> 00:19:30,880
called release tags to do this you can

00:19:28,360 --> 00:19:33,730
apply a disc tag at publish time by

00:19:30,880 --> 00:19:35,500
using - - tag when you publish by

00:19:33,730 --> 00:19:37,660
default every publish gets tagged it

00:19:35,500 --> 00:19:39,160
gets tagged as latest and with you NPM

00:19:37,660 --> 00:19:41,230
install what you're actually doing is

00:19:39,160 --> 00:19:43,300
you're NPM installing at latest whatever

00:19:41,230 --> 00:19:47,500
the latest tag points to is what gets

00:19:43,300 --> 00:19:49,270
installed so but you can run anything

00:19:47,500 --> 00:19:51,250
you can run in NPM install package at

00:19:49,270 --> 00:19:52,750
beta NPM install package a test NPM

00:19:51,250 --> 00:19:56,170
install package at whatever arbitrary

00:19:52,750 --> 00:19:58,540
tag you've made up so once you've done

00:19:56,170 --> 00:20:00,400
that you've got this beta tag and you're

00:19:58,540 --> 00:20:02,050
like okay cool this version is no longer

00:20:00,400 --> 00:20:02,710
beta this version is latest how do you

00:20:02,050 --> 00:20:04,090
change

00:20:02,710 --> 00:20:05,680
the tag once the thing is already

00:20:04,090 --> 00:20:09,370
published that's where the dist Anka

00:20:05,680 --> 00:20:11,140
mint comes in this tag ad applies the

00:20:09,370 --> 00:20:14,170
tag you specify to the version that you

00:20:11,140 --> 00:20:17,200
specify only one version of a package

00:20:14,170 --> 00:20:18,880
can have a tag at any one time so if you

00:20:17,200 --> 00:20:21,490
add it to a new version it's the same as

00:20:18,880 --> 00:20:23,620
moving it from the old version you can

00:20:21,490 --> 00:20:27,910
use remove to tack to remove the tag

00:20:23,620 --> 00:20:30,610
entirely you can see what tags exist

00:20:27,910 --> 00:20:32,580
with LS big packages like babel have

00:20:30,610 --> 00:20:35,350
adopted a new release strategy where

00:20:32,580 --> 00:20:37,840
they release all of the new versions of

00:20:35,350 --> 00:20:40,090
their package on a next tag you know

00:20:37,840 --> 00:20:41,680
just as ci passes it gets automatically

00:20:40,090 --> 00:20:43,090
published and when everything has

00:20:41,680 --> 00:20:44,290
reached the next tag they then do a

00:20:43,090 --> 00:20:45,580
single operation that switches

00:20:44,290 --> 00:20:47,920
everything on the next tag to the

00:20:45,580 --> 00:20:50,380
current tag which is if you've got a big

00:20:47,920 --> 00:20:55,180
NPM project can be a nice granular way

00:20:50,380 --> 00:20:56,410
of doing that so one other way that you

00:20:55,180 --> 00:20:58,930
can use tags is when you're installing

00:20:56,410 --> 00:21:01,570
your dependencies you can run npm

00:20:58,930 --> 00:21:03,520
install with - - tag and NPM will prefer

00:21:01,570 --> 00:21:05,230
versions that have that tag this is

00:21:03,520 --> 00:21:06,610
useful if you're working on a big

00:21:05,230 --> 00:21:08,380
project with lots of people and some

00:21:06,610 --> 00:21:09,430
people have started releasing next stuff

00:21:08,380 --> 00:21:11,950
and you don't want to have to update

00:21:09,430 --> 00:21:14,170
your dependencies you just say install

00:21:11,950 --> 00:21:15,820
this project on the next tag and it will

00:21:14,170 --> 00:21:20,050
pull in all of your dependencies on next

00:21:15,820 --> 00:21:22,980
tags if you've got them of course

00:21:20,050 --> 00:21:25,150
sometimes you make a mistake and you

00:21:22,980 --> 00:21:27,040
publish a version by accident or you

00:21:25,150 --> 00:21:28,690
have a bug that's gonna take a long time

00:21:27,040 --> 00:21:31,840
to fix and you just want that version to

00:21:28,690 --> 00:21:32,590
be gone an NPM unpublish lets you do

00:21:31,840 --> 00:21:35,890
that

00:21:32,590 --> 00:21:37,480
as you may have heard recently and

00:21:35,890 --> 00:21:39,820
publishing a package can cause trouble

00:21:37,480 --> 00:21:42,370
if there's a bunch of people depending

00:21:39,820 --> 00:21:43,840
on that package so recently we made a

00:21:42,370 --> 00:21:45,310
change in the way that unpublished works

00:21:43,840 --> 00:21:46,750
which is if you unpublished something

00:21:45,310 --> 00:21:49,060
you can unpublish it easily for the

00:21:46,750 --> 00:21:51,520
first 24 hours and after the first 24

00:21:49,060 --> 00:21:53,890
hours you have to contact support to

00:21:51,520 --> 00:21:56,380
make sure that this is a thing that you

00:21:53,890 --> 00:21:59,950
intended to do and is safe for everyone

00:21:56,380 --> 00:22:02,050
to do and we're probably not you know

00:21:59,950 --> 00:22:03,550
giving package aways package names away

00:22:02,050 --> 00:22:07,450
to corporations anymore that didn't seem

00:22:03,550 --> 00:22:09,430
to work out but if you've got a package

00:22:07,450 --> 00:22:11,980
or a version that you don't want people

00:22:09,430 --> 00:22:13,780
to use anymore rather than on publishing

00:22:11,980 --> 00:22:15,660
it the safer and friendlier way is to

00:22:13,780 --> 00:22:17,710
use NPM deprecated

00:22:15,660 --> 00:22:18,880
people will still be able to install the

00:22:17,710 --> 00:22:20,230
package they'll just get a little

00:22:18,880 --> 00:22:21,580
friendly notice saying hey you shouldn't

00:22:20,230 --> 00:22:23,470
use this package anymore it's much

00:22:21,580 --> 00:22:24,880
easier and it's much safer and it

00:22:23,470 --> 00:22:27,340
doesn't break the whole universe and

00:22:24,880 --> 00:22:32,650
happy you know have to do forever jokes

00:22:27,340 --> 00:22:34,960
about left bad so if you've been running

00:22:32,650 --> 00:22:36,040
a project for a while you'll find that

00:22:34,960 --> 00:22:37,750
some of your dependencies have been

00:22:36,040 --> 00:22:39,480
updated but with breaking changes so

00:22:37,750 --> 00:22:41,950
they won't automatically be pulled in

00:22:39,480 --> 00:22:44,620
how do you find these updates that's

00:22:41,950 --> 00:22:46,530
what NPM outdated is for NPM outdid will

00:22:44,620 --> 00:22:49,630
give you a list like this one here

00:22:46,530 --> 00:22:52,870
current shows you what you have locally

00:22:49,630 --> 00:22:54,670
and wanted shows you the version that

00:22:52,870 --> 00:22:56,560
would be in the maximum version that

00:22:54,670 --> 00:22:58,210
would be installed by your sambara range

00:22:56,560 --> 00:22:59,650
so if you've installed recently these

00:22:58,210 --> 00:23:02,170
two are usually the same and if they're

00:22:59,650 --> 00:23:04,900
not the same NPM update will bring them

00:23:02,170 --> 00:23:07,510
into alignment with each other the last

00:23:04,900 --> 00:23:09,520
column which is the latest shows if

00:23:07,510 --> 00:23:13,450
there's a version that is outside you're

00:23:09,520 --> 00:23:15,070
allowed range but still exists like a

00:23:13,450 --> 00:23:16,510
breaking change so you can decide if you

00:23:15,070 --> 00:23:17,890
want to upgrade without having to you

00:23:16,510 --> 00:23:25,090
know just install new things to check

00:23:17,890 --> 00:23:26,470
everybody's webpage so there's more

00:23:25,090 --> 00:23:27,580
stuff about run scripts I called them

00:23:26,470 --> 00:23:29,860
run scripts in here's why I did that

00:23:27,580 --> 00:23:32,110
which is that in the script stanza of

00:23:29,860 --> 00:23:34,180
your package.json you can define any

00:23:32,110 --> 00:23:36,820
scripts at all and then you can run them

00:23:34,180 --> 00:23:38,920
using the NPM run command so like start

00:23:36,820 --> 00:23:40,780
and stop and test all of these arbitrary

00:23:38,920 --> 00:23:43,180
run scripts they get dev dependencies in

00:23:40,780 --> 00:23:45,310
their path and you can use them for all

00:23:43,180 --> 00:23:48,040
sorts of things at NPM we tend to use

00:23:45,310 --> 00:23:49,630
NPM run dev as a shorthand of starting

00:23:48,040 --> 00:23:54,520
the server in development mode which is

00:23:49,630 --> 00:23:56,200
nice are the people use NPM run set up

00:23:54,520 --> 00:23:58,360
to initialize their databases the first

00:23:56,200 --> 00:24:00,100
time so that you don't have to have like

00:23:58,360 --> 00:24:01,630
a complicated wiki page about you know

00:24:00,100 --> 00:24:03,070
here's how you set up your databases for

00:24:01,630 --> 00:24:05,050
the first time when you when you hired a

00:24:03,070 --> 00:24:06,940
new dev that's what I mean about package

00:24:05,050 --> 00:24:09,460
JSON and NPM being a way of

00:24:06,940 --> 00:24:12,700
crystallizing your your team's processes

00:24:09,460 --> 00:24:14,110
into the code anything that you might

00:24:12,700 --> 00:24:15,550
have put in a wiki somewhere you can

00:24:14,110 --> 00:24:17,020
just slap it into package JSON and you

00:24:15,550 --> 00:24:18,190
can have it version controlled along

00:24:17,020 --> 00:24:20,050
with everything else so you no longer

00:24:18,190 --> 00:24:21,520
have to tell everybody that's not how we

00:24:20,050 --> 00:24:22,930
run tests anymore this is how we run

00:24:21,520 --> 00:24:24,340
tests anymore that's not how you set up

00:24:22,930 --> 00:24:26,340
the database this is how you set up the

00:24:24,340 --> 00:24:28,740
database

00:24:26,340 --> 00:24:30,990
so I already mentioned that run scripts

00:24:28,740 --> 00:24:32,370
get dev dependencies for free another

00:24:30,990 --> 00:24:34,410
useful thing that they get for Frieza

00:24:32,370 --> 00:24:36,720
they get a bunch of NPM variables every

00:24:34,410 --> 00:24:39,360
key in package JSON is available to your

00:24:36,720 --> 00:24:42,300
run scripts in the environment as an NPM

00:24:39,360 --> 00:24:45,210
package value and every configuration

00:24:42,300 --> 00:24:49,380
value used by NPM is available as an NPM

00:24:45,210 --> 00:24:51,480
config value even more usefully if you

00:24:49,380 --> 00:24:54,300
create a config key like this one in

00:24:51,480 --> 00:24:55,500
your package JSON you can put default

00:24:54,300 --> 00:24:57,690
values in there and they will be

00:24:55,500 --> 00:25:00,000
overridden by values in NPM s

00:24:57,690 --> 00:25:02,040
configuration command configuration

00:25:00,000 --> 00:25:03,960
files so as you can see in this example

00:25:02,040 --> 00:25:07,050
I set a default port for my thing to run

00:25:03,960 --> 00:25:08,880
on to be used by my start script forever

00:25:07,050 --> 00:25:10,920
for instance it just wants to know what

00:25:08,880 --> 00:25:13,860
port it should run on but somebody can

00:25:10,920 --> 00:25:15,810
use NPM config to set the value of that

00:25:13,860 --> 00:25:17,220
config and it will be overridden without

00:25:15,810 --> 00:25:21,690
you having to constantly swap in

00:25:17,220 --> 00:25:23,190
configuration files the final and most

00:25:21,690 --> 00:25:25,140
useful feature of NPM run scripts that

00:25:23,190 --> 00:25:27,150
I'm going to mention is lifecycle hooks

00:25:25,140 --> 00:25:29,810
certain names for run scripts are

00:25:27,150 --> 00:25:32,340
special this is the big list of them

00:25:29,810 --> 00:25:34,380
these scripts will run automatically in

00:25:32,340 --> 00:25:35,910
response to events so events like

00:25:34,380 --> 00:25:38,490
publishing your package or running the

00:25:35,910 --> 00:25:40,080
version command or running install and

00:25:38,490 --> 00:25:42,330
you can use this to do all sorts of

00:25:40,080 --> 00:25:45,360
things like really common use of the

00:25:42,330 --> 00:25:47,570
install event is two compiled binary

00:25:45,360 --> 00:25:49,830
dependencies if your package has those

00:25:47,570 --> 00:25:52,350
but you can do other cool stuff you can

00:25:49,830 --> 00:25:55,080
force the event to fail if the script

00:25:52,350 --> 00:25:57,390
fails so for instance you can put a pre

00:25:55,080 --> 00:25:59,250
publish script that runs your tests

00:25:57,390 --> 00:26:01,230
which makes it impossible to publish a

00:25:59,250 --> 00:26:03,570
version that doesn't pass your test this

00:26:01,230 --> 00:26:07,490
can be a nice low friction way of like

00:26:03,570 --> 00:26:07,490
ensuring best practices within your team

00:26:18,940 --> 00:26:23,110
the other thing that I should talk about

00:26:20,560 --> 00:26:25,090
that is super useful is the NPM RC file

00:26:23,110 --> 00:26:26,590
or more accurately the NPM RC files

00:26:25,090 --> 00:26:30,250
because there are four of them and this

00:26:26,590 --> 00:26:32,080
is a frequent source of confusion what

00:26:30,250 --> 00:26:34,060
the NPM RC files is they do is they

00:26:32,080 --> 00:26:36,400
provide default configuration options

00:26:34,060 --> 00:26:38,290
for NPM and NPM accepts over a hundred

00:26:36,400 --> 00:26:41,920
configuration options writing them down

00:26:38,290 --> 00:26:44,830
in some place is often pretty useful if

00:26:41,920 --> 00:26:46,330
you put an NPM LC in your package root

00:26:44,830 --> 00:26:48,700
you can that's a good place to put per

00:26:46,330 --> 00:26:49,720
package per project configuration

00:26:48,700 --> 00:26:51,550
settings that would be shared across

00:26:49,720 --> 00:26:53,170
your team if you have stuff that's

00:26:51,550 --> 00:26:54,640
relevant just to you like your assets

00:26:53,170 --> 00:26:56,490
token and stuff like that you can put it

00:26:54,640 --> 00:26:59,290
in the one in your home directory

00:26:56,490 --> 00:27:02,530
there's also you know global ones and

00:26:59,290 --> 00:27:04,300
and and you can also look at an PM's

00:27:02,530 --> 00:27:06,670
built-in ones if that sounds like a good

00:27:04,300 --> 00:27:09,700
idea to you

00:27:06,670 --> 00:27:11,860
another thing that NPM RC does is it

00:27:09,700 --> 00:27:13,750
holds your authentication token you can

00:27:11,860 --> 00:27:16,570
use this token to authenticate other

00:27:13,750 --> 00:27:18,700
services to NPM a really common use case

00:27:16,570 --> 00:27:22,090
for this is CI if you are using private

00:27:18,700 --> 00:27:23,650
packages if you don't you don't have put

00:27:22,090 --> 00:27:25,870
your auth token directly into your code

00:27:23,650 --> 00:27:28,030
you can do something like this where you

00:27:25,870 --> 00:27:29,950
put the NPM token variable into your

00:27:28,030 --> 00:27:31,930
into your NPM RC file it will get

00:27:29,950 --> 00:27:34,080
automatically expanded if you set it as

00:27:31,930 --> 00:27:36,970
an environment variable within Travis

00:27:34,080 --> 00:27:38,620
this is a really useful thing to do and

00:27:36,970 --> 00:27:40,240
Remy's post which I'm linking to there

00:27:38,620 --> 00:27:44,320
has a lot of details on how to do that

00:27:40,240 --> 00:27:46,030
the best way there are a handful of fun

00:27:44,320 --> 00:27:47,140
configuration options which I'm going to

00:27:46,030 --> 00:27:51,580
skip because I'm running a little bit

00:27:47,140 --> 00:27:52,630
over time and so before I get out of

00:27:51,580 --> 00:27:54,970
here I want to mention that there's a

00:27:52,630 --> 00:27:56,500
few third-party tools that are not part

00:27:54,970 --> 00:27:58,600
of NPM but they're so useful and so

00:27:56,500 --> 00:28:00,160
popular that they're becoming intrinsic

00:27:58,600 --> 00:28:03,370
to the way people write note code and

00:28:00,160 --> 00:28:05,610
use NPM these days the first is bable

00:28:03,370 --> 00:28:08,110
bable is a transpiler

00:28:05,610 --> 00:28:09,790
it's a tool that transforms next version

00:28:08,110 --> 00:28:11,910
JavaScript into JavaScript that can run

00:28:09,790 --> 00:28:14,410
today either a note or in your browser

00:28:11,910 --> 00:28:17,440
it can also transpile stuff that isn't

00:28:14,410 --> 00:28:19,390
JavaScript like JSX or typescript and

00:28:17,440 --> 00:28:20,980
lots of projects and tutorials these

00:28:19,390 --> 00:28:22,990
days we're seeing just sort of assume

00:28:20,980 --> 00:28:24,430
you already know how to transfer your

00:28:22,990 --> 00:28:26,590
code and that's a thing that everybody

00:28:24,430 --> 00:28:27,850
does so if you've been wondering how the

00:28:26,590 --> 00:28:29,860
hell it is that all these people are

00:28:27,850 --> 00:28:30,960
using es6 before es6 is globally

00:28:29,860 --> 00:28:34,080
available Babel

00:28:30,960 --> 00:28:36,659
how they're doing it another thing that

00:28:34,080 --> 00:28:38,370
people do and assume that you already

00:28:36,659 --> 00:28:40,860
know how to do is to make your note code

00:28:38,370 --> 00:28:42,120
available into your browser there are

00:28:40,860 --> 00:28:44,970
two popular ways to do this the first

00:28:42,120 --> 00:28:46,950
and older one is browserify built by the

00:28:44,970 --> 00:28:49,860
wonderful genius sub stack it is an

00:28:46,950 --> 00:28:51,480
amazingly powerful flexible tool and the

00:28:49,860 --> 00:28:53,429
second one is web pack which is a newer

00:28:51,480 --> 00:28:55,380
more sort of batteries included solution

00:28:53,429 --> 00:28:56,850
that does much of the same things they

00:28:55,380 --> 00:28:58,289
will both help you transpile your code

00:28:56,850 --> 00:29:00,380
and make it easily available to your

00:28:58,289 --> 00:29:02,640
browser in a predictable way

00:29:00,380 --> 00:29:05,669
another tool that we're finding super

00:29:02,640 --> 00:29:08,640
useful right now is green keeper green

00:29:05,669 --> 00:29:11,760
keeper is like NPM outdated in the cloud

00:29:08,640 --> 00:29:13,679
it constantly checks for updates to the

00:29:11,760 --> 00:29:16,049
packages that you depend on and it runs

00:29:13,679 --> 00:29:18,000
your tests on them to make sure that

00:29:16,049 --> 00:29:19,230
minor updates haven't broken you they

00:29:18,000 --> 00:29:20,610
said that they weren't going to but they

00:29:19,230 --> 00:29:22,110
might have anyway and green keepers

00:29:20,610 --> 00:29:25,289
making sure that your tests are always

00:29:22,110 --> 00:29:27,750
green get it and it will even submit a

00:29:25,289 --> 00:29:29,820
PR to include the new change if it's

00:29:27,750 --> 00:29:32,570
safe for your app and we've turned it on

00:29:29,820 --> 00:29:34,860
for most of our repos a 10:00 p.m. and

00:29:32,570 --> 00:29:36,570
the last third-party thing I want to

00:29:34,860 --> 00:29:40,890
mention is the node security project and

00:29:36,570 --> 00:29:42,899
they're two NS P n SP consults node

00:29:40,890 --> 00:29:44,580
security projects data based of node and

00:29:42,899 --> 00:29:46,770
security vulnerabilities when you run an

00:29:44,580 --> 00:29:48,750
SP check and it will alert you if you're

00:29:46,770 --> 00:29:51,299
using a vulnerable module so if you hook

00:29:48,750 --> 00:29:53,130
an SP check into those life cycle events

00:29:51,299 --> 00:29:54,690
that I was talking about you can make it

00:29:53,130 --> 00:29:56,250
such that it is impossible for you to

00:29:54,690 --> 00:29:58,020
publish a version of your code that

00:29:56,250 --> 00:30:01,130
contains vulnerable modules which is a

00:29:58,020 --> 00:30:01,130
really good idea

00:30:02,120 --> 00:30:06,600
so one thing you may be asking at this

00:30:05,130 --> 00:30:08,100
point is like I've just given you this

00:30:06,600 --> 00:30:10,049
whirlwind tour of like dozens and dozens

00:30:08,100 --> 00:30:12,809
of features what on earth is tying all

00:30:10,049 --> 00:30:15,210
of these things together it does all

00:30:12,809 --> 00:30:16,860
these random things what ties them

00:30:15,210 --> 00:30:18,750
together is that they take something

00:30:16,860 --> 00:30:20,850
that you had to do all the time and it

00:30:18,750 --> 00:30:22,140
turns it into an automatic thing that

00:30:20,850 --> 00:30:24,360
happens without you having to think

00:30:22,140 --> 00:30:26,270
about it they take things that were hard

00:30:24,360 --> 00:30:29,100
and they make them simpler and faster

00:30:26,270 --> 00:30:30,990
the message of NPM is that NPM is here

00:30:29,100 --> 00:30:33,419
to get out of your way we are not here

00:30:30,990 --> 00:30:35,279
to add a bunch of ceremony that is not

00:30:33,419 --> 00:30:37,169
what we are about we don't want to tell

00:30:35,279 --> 00:30:38,700
you how to do things we want to find out

00:30:37,169 --> 00:30:40,470
the things that you're already doing and

00:30:38,700 --> 00:30:42,510
make them as simple as we possibly can

00:30:40,470 --> 00:30:44,250
so if there's something that you do

00:30:42,510 --> 00:30:44,610
every day and it's still really hard you

00:30:44,250 --> 00:30:46,200
should

00:30:44,610 --> 00:30:48,000
about it you should find me today and

00:30:46,200 --> 00:30:49,710
complain to me about it and that's what

00:30:48,000 --> 00:30:53,880
NPM will get out of your way to do next

00:30:49,710 --> 00:30:55,500
so there you go that is the big recap of

00:30:53,880 --> 00:30:57,270
all of the things that we think that

00:30:55,500 --> 00:30:58,590
everybody should know about NPM I hope

00:30:57,270 --> 00:31:01,710
you all learned at least one useful

00:30:58,590 --> 00:31:04,080
thing and if you've got any questions

00:31:01,710 --> 00:31:05,910
you should stop me in the hallway good

00:31:04,080 --> 00:31:07,500
questions get good NPM swag and I have a

00:31:05,910 --> 00:31:11,000
big bag of it to give away that I don't

00:31:07,500 --> 00:31:11,000
want to take back thank you very much

00:31:16,110 --> 00:31:18,170

YouTube URL: https://www.youtube.com/watch?v=zWEU8kNKi3Q


