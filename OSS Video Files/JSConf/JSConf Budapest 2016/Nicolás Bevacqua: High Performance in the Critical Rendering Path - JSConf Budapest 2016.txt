Title: NicolÃ¡s Bevacqua: High Performance in the Critical Rendering Path - JSConf Budapest 2016
Publication date: 2016-06-15
Playlist: JSConf Budapest 2016
Description: 
	This talk covers the past, present and future of web application performance when it comes to delivery optimization. I'll start by glancing over what you're already doing -- minifying your static assets, bundling them together, and using progressive enhancement techniques. Then I'll move on to what you should be doing -- optimizing TCP network delivery, inlining critical CSS, deferring font loading and CSS so that you don't block the rendering path, and of course deferring JavaScript. Afterwards we'll look at the future, and what HTTP 2.0 has in store for us, going full circle and letting us forego hacks of the past like bundling and minification.

http://jsconfbp.com/speakers/nicolas-bevacqua.html
Captions: 
	00:00:03,710 --> 00:00:05,770
you

00:00:08,880 --> 00:00:21,010
okay thanks Jake for your awesome jokes

00:00:13,920 --> 00:00:23,109
yeah yeah it's pretty amazing so I'm

00:00:21,010 --> 00:00:26,970
going to talk about high performance in

00:00:23,109 --> 00:00:29,590
the critical path this is something that

00:00:26,970 --> 00:00:32,169
I'm interested in and I became

00:00:29,590 --> 00:00:35,829
interested in mostly because bug when I

00:00:32,169 --> 00:00:39,039
started my blog I was just loving now

00:00:35,829 --> 00:00:41,350
then as most people who take on a

00:00:39,039 --> 00:00:44,050
personal project at some point in the

00:00:41,350 --> 00:00:46,239
lives I had to have a client side

00:00:44,050 --> 00:00:50,140
rendering framework because back then it

00:00:46,239 --> 00:00:52,179
was like the thing to do right so this

00:00:50,140 --> 00:00:55,059
turned out to be really really slow so

00:00:52,179 --> 00:00:59,850
mostly all you saw my blog where these

00:00:55,059 --> 00:01:02,440
spinning balls so eventually I was

00:00:59,850 --> 00:01:05,920
interesting performance and making my

00:01:02,440 --> 00:01:08,770
side load faster on the first load so

00:01:05,920 --> 00:01:11,049
today I'm going to be trying to speak

00:01:08,770 --> 00:01:14,530
how you can achieve that kind of thing

00:01:11,049 --> 00:01:18,789
and how to make sure that it doesn't

00:01:14,530 --> 00:01:22,390
happen to you that you have like five

00:01:18,789 --> 00:01:25,630
second page loads so the first thing

00:01:22,390 --> 00:01:27,430
that you need to do in order to improve

00:01:25,630 --> 00:01:30,369
your performance is actually measure

00:01:27,430 --> 00:01:34,659
what's going on and know where your site

00:01:30,369 --> 00:01:36,130
is sitting on so there are a ton of

00:01:34,659 --> 00:01:38,500
different ways that you can measure

00:01:36,130 --> 00:01:41,049
performance the first one it's probably

00:01:38,500 --> 00:01:45,039
the most abuse you Shaz open dev tools

00:01:41,049 --> 00:01:47,140
and run an audit of your sign this is

00:01:45,039 --> 00:01:50,799
not very interesting but it's probably

00:01:47,140 --> 00:01:54,189
the easiest way of running these kind of

00:01:50,799 --> 00:01:56,170
performance analysis and it gives you

00:01:54,189 --> 00:01:59,259
some tips on how to improve performance

00:01:56,170 --> 00:02:03,009
like caching gzip in and stuff like that

00:01:59,259 --> 00:02:04,859
so you get per resource advice and you

00:02:03,009 --> 00:02:08,170
also get some cash in best practices

00:02:04,859 --> 00:02:12,610
along with some other general tips like

00:02:08,170 --> 00:02:15,430
minify your stuff and so on but that's

00:02:12,610 --> 00:02:17,860
the this simple option right then you

00:02:15,430 --> 00:02:18,210
have PageSpeed insights which is an

00:02:17,860 --> 00:02:20,340
online

00:02:18,210 --> 00:02:23,370
in service where you can just paste on

00:02:20,340 --> 00:02:27,660
in oral to your side and it will tell

00:02:23,370 --> 00:02:31,410
you a few different metrics on how your

00:02:27,660 --> 00:02:33,480
site rates like how is it performing in

00:02:31,410 --> 00:02:35,910
the case of moil connections and how is

00:02:33,480 --> 00:02:37,770
it performing in desktop connections

00:02:35,910 --> 00:02:41,070
which are supposed to be better and so

00:02:37,770 --> 00:02:42,480
on um it gives you some tips and the

00:02:41,070 --> 00:02:46,740
kind of things that you should consider

00:02:42,480 --> 00:02:49,710
fixing and it even gives you some your

00:02:46,740 --> 00:02:52,230
ex advice like maybe your buttons are

00:02:49,710 --> 00:02:55,650
too small for a moral device and things

00:02:52,230 --> 00:02:59,640
like that so it's a nice tool to try out

00:02:55,650 --> 00:03:05,550
too it gives you both desktop and mobile

00:02:59,640 --> 00:03:07,920
wrap scores from 1 to 100 and some

00:03:05,550 --> 00:03:10,560
practical advice as well in in the in

00:03:07,920 --> 00:03:13,920
each of those scenarios that you should

00:03:10,560 --> 00:03:16,920
fix or consider fixin you can always

00:03:13,920 --> 00:03:21,270
learn more going through the resources

00:03:16,920 --> 00:03:25,580
that they give you and they also give

00:03:21,270 --> 00:03:28,890
you some of some best practices like

00:03:25,580 --> 00:03:30,360
differing non-critical content and so on

00:03:28,890 --> 00:03:34,560
which is something that we'll talk more

00:03:30,360 --> 00:03:36,720
about later on during this talk and then

00:03:34,560 --> 00:03:39,150
another tool that really really like is

00:03:36,720 --> 00:03:42,900
webpagetest in web page this is

00:03:39,150 --> 00:03:45,510
basically something you just put the

00:03:42,900 --> 00:03:48,150
link to your site and waiting in a queue

00:03:45,510 --> 00:03:51,450
for for a machine to be assigned to you

00:03:48,150 --> 00:03:55,320
and the way this works is it will fire

00:03:51,450 --> 00:03:58,800
up your side and it'll shoot the video

00:03:55,320 --> 00:04:01,320
have the site is loaded and then it will

00:03:58,800 --> 00:04:04,980
give you a bunch of different analytics

00:04:01,320 --> 00:04:08,160
and metrics that you can act on for

00:04:04,980 --> 00:04:11,690
example it gives you the load time in

00:04:08,160 --> 00:04:14,640
seconds the time to first by the time to

00:04:11,690 --> 00:04:19,560
pagelet page complete and all these

00:04:14,640 --> 00:04:22,049
different points in the life cycle of

00:04:19,560 --> 00:04:26,240
your page and also gives you rough

00:04:22,049 --> 00:04:29,969
scores like in page speed using grades

00:04:26,240 --> 00:04:33,599
for time to first byte keep alive

00:04:29,969 --> 00:04:35,429
compressed transfer caching where you're

00:04:33,599 --> 00:04:40,069
using a CDN or not where you're

00:04:35,429 --> 00:04:45,389
compressing images um things like that

00:04:40,069 --> 00:04:49,889
besides this brace you also get the

00:04:45,389 --> 00:04:53,249
waterfall view which is a very easy way

00:04:49,889 --> 00:04:56,519
to look at how your page is loaded and

00:04:53,249 --> 00:04:59,689
what resources plug the next few so for

00:04:56,519 --> 00:05:03,719
example in this example you can see that

00:04:59,689 --> 00:05:05,669
fonts are blocking everything else and

00:05:03,719 --> 00:05:08,789
maybe if you were able to love those

00:05:05,669 --> 00:05:10,919
fonts asynchronously or not all of them

00:05:08,789 --> 00:05:13,979
at all maybe because they are cached

00:05:10,919 --> 00:05:17,069
you'll save like 600 milliseconds or

00:05:13,979 --> 00:05:21,059
even more so it's really easy looking at

00:05:17,069 --> 00:05:23,969
this to figure out how to parallel eyes

00:05:21,059 --> 00:05:28,019
your downloads so that even takes a

00:05:23,969 --> 00:05:31,019
shorter amount of time and just as you

00:05:28,019 --> 00:05:33,599
had the grades in general you can also

00:05:31,019 --> 00:05:38,059
look at these grades on a per resource

00:05:33,599 --> 00:05:42,749
basis so if you for instance have bad

00:05:38,059 --> 00:05:47,759
static caching you may want to look at

00:05:42,749 --> 00:05:50,909
this because most of those failed grades

00:05:47,759 --> 00:05:53,610
may be due to third-party ads and stuff

00:05:50,909 --> 00:05:59,809
like that that you probably have on your

00:05:53,610 --> 00:06:02,759
side so it's one other thing to consider

00:05:59,809 --> 00:06:04,829
um and like I said they take a video of

00:06:02,759 --> 00:06:07,469
your side loading and this makes it very

00:06:04,829 --> 00:06:10,079
easy to spot things like flashes of

00:06:07,469 --> 00:06:14,610
invisible text and it helps you

00:06:10,079 --> 00:06:16,739
calculate the how fast your site is

00:06:14,610 --> 00:06:22,489
loading using a metric called the speed

00:06:16,739 --> 00:06:25,169
index which is I'll just read this

00:06:22,489 --> 00:06:27,360
spandex takes the visual progress of the

00:06:25,169 --> 00:06:30,059
visual page loading and computes an

00:06:27,360 --> 00:06:32,729
overall score for how quickly the

00:06:30,059 --> 00:06:36,839
content was painting so this basically

00:06:32,729 --> 00:06:41,220
means spandex tells you how fast content

00:06:36,839 --> 00:06:44,100
is viewable to your users

00:06:41,220 --> 00:06:47,820
and generally speaking and speed index

00:06:44,100 --> 00:06:51,090
of 1000 or less is a good value to be in

00:06:47,820 --> 00:06:55,410
the lower is the faster your patients

00:06:51,090 --> 00:06:59,820
showing content to you your users so in

00:06:55,410 --> 00:07:02,010
short web page that gives you a very

00:06:59,820 --> 00:07:05,490
detailed inspection of februari single

00:07:02,010 --> 00:07:09,840
request it analyzed is TCP traffic and

00:07:05,490 --> 00:07:12,660
shows you all of these low-level things

00:07:09,840 --> 00:07:15,060
like handshakes honor than what's going

00:07:12,660 --> 00:07:17,910
on in every single step of the

00:07:15,060 --> 00:07:20,820
connection it helps you identify

00:07:17,910 --> 00:07:23,010
bottlenecks and visualize progress and

00:07:20,820 --> 00:07:26,570
this makes it very very easy to figure

00:07:23,010 --> 00:07:30,390
out wearing in your in your page load

00:07:26,570 --> 00:07:34,680
you are taking too much up taking up too

00:07:30,390 --> 00:07:37,770
much time the problem with every single

00:07:34,680 --> 00:07:40,320
one of these tools is that you have to

00:07:37,770 --> 00:07:45,330
proactively go to these sites or open up

00:07:40,320 --> 00:07:47,310
devtools and run the audit and it's just

00:07:45,330 --> 00:07:51,480
something that you may just do once

00:07:47,310 --> 00:07:54,540
after my talk and then never do again so

00:07:51,480 --> 00:07:57,120
this is not what i recommend are all i

00:07:54,540 --> 00:08:00,450
recommend that you automate this stuff

00:07:57,120 --> 00:08:06,960
and you measure often not just once

00:08:00,450 --> 00:08:08,400
after check on BP so there are a few

00:08:06,960 --> 00:08:11,280
different tools we can use to automate

00:08:08,400 --> 00:08:15,830
all of this one of them is called PSI

00:08:11,280 --> 00:08:21,090
it's an admiral that comes with a CLI

00:08:15,830 --> 00:08:23,130
grunt and gulp plugins someone that when

00:08:21,090 --> 00:08:25,890
use it on the comment line you shall see

00:08:23,130 --> 00:08:30,419
the the same stats that you should use

00:08:25,890 --> 00:08:35,610
on PageSpeed insights which is what PSI

00:08:30,419 --> 00:08:38,969
is short for um and then on grant amanha

00:08:35,610 --> 00:08:44,670
you just get json objects this is pretty

00:08:38,969 --> 00:08:46,920
useful to to automate the these

00:08:44,670 --> 00:08:49,020
measurements and maybe make some sort of

00:08:46,920 --> 00:08:52,260
graph over time and five your site is

00:08:49,020 --> 00:08:54,720
evolving I one not so it's one thing to

00:08:52,260 --> 00:08:57,980
consider there's a similar to

00:08:54,720 --> 00:09:02,129
for a web page since it's a little bit

00:08:57,980 --> 00:09:04,110
slower because again you need to be put

00:09:02,129 --> 00:09:07,980
in a queue for so that you are assigned

00:09:04,110 --> 00:09:09,839
a computer where your test will run and

00:09:07,980 --> 00:09:14,009
then you need to make another request

00:09:09,839 --> 00:09:16,589
and and then eventually like two minutes

00:09:14,009 --> 00:09:20,279
later you'll get all of these data but

00:09:16,589 --> 00:09:25,079
it's so much data that you you'll want

00:09:20,279 --> 00:09:28,500
to use it probably so take it take that

00:09:25,079 --> 00:09:32,160
into account and then there's why slow

00:09:28,500 --> 00:09:34,889
which is kind of outdated ish so I think

00:09:32,160 --> 00:09:37,019
I'm really included earlier but you can

00:09:34,889 --> 00:09:40,649
still out i made this using run twice

00:09:37,019 --> 00:09:43,620
low so it's an hour or two that similar

00:09:40,649 --> 00:09:47,490
to the dev tool audits that we saw

00:09:43,620 --> 00:09:49,230
earlier so what do we do with all these

00:09:47,490 --> 00:09:52,620
measurements right we know our site is

00:09:49,230 --> 00:09:54,930
slow now so what what what can we do

00:09:52,620 --> 00:09:56,879
about that well the first thing that I

00:09:54,930 --> 00:10:00,420
recommend is setting up a performance

00:09:56,879 --> 00:10:02,639
budget and these basically helps you

00:10:00,420 --> 00:10:05,550
track the impact of every comment

00:10:02,639 --> 00:10:07,620
because if you're enforcing a

00:10:05,550 --> 00:10:10,980
performance budget that basically says

00:10:07,620 --> 00:10:15,509
okay if my page isn't loading in a

00:10:10,980 --> 00:10:17,550
second or our second I have or or if my

00:10:15,509 --> 00:10:22,230
page weighs more than three megabytes

00:10:17,550 --> 00:10:24,689
then these build is going to fail and if

00:10:22,230 --> 00:10:27,990
you do this you will ensure a certain

00:10:24,689 --> 00:10:31,620
level of performance throughout your

00:10:27,990 --> 00:10:32,970
site which is a great thing there are a

00:10:31,620 --> 00:10:35,910
lot of different things that you can

00:10:32,970 --> 00:10:38,699
track its much as page load so for

00:10:35,910 --> 00:10:41,670
example you can track milestone timings

00:10:38,699 --> 00:10:45,269
like the load time or the time to the

00:10:41,670 --> 00:10:46,829
first piece of content like a tweet for

00:10:45,269 --> 00:10:49,860
instance this is something that we are

00:10:46,829 --> 00:10:52,470
popularized and then it became thing

00:10:49,860 --> 00:10:55,949
there's also speed index which is the

00:10:52,470 --> 00:10:59,209
index I defined earlier this thing comes

00:10:55,949 --> 00:11:02,880
from google and it has like math in it

00:10:59,209 --> 00:11:05,970
but it's pretty accurate way of

00:11:02,880 --> 00:11:07,680
measuring your performance um

00:11:05,970 --> 00:11:09,660
then there are simpler metrics that you

00:11:07,680 --> 00:11:13,680
can use like quantity based metrics like

00:11:09,660 --> 00:11:16,740
Rico scanned page weight image weight

00:11:13,680 --> 00:11:19,949
and so on and there are even simpler

00:11:16,740 --> 00:11:22,769
rules like just using whatever why slow

00:11:19,949 --> 00:11:28,680
gives you or whatever page please score

00:11:22,769 --> 00:11:31,079
you have our now you can enforce any of

00:11:28,680 --> 00:11:33,720
these using a something called perf

00:11:31,079 --> 00:11:36,750
budget it's again a package that you can

00:11:33,720 --> 00:11:38,670
use to enforce all of these different

00:11:36,750 --> 00:11:40,920
metrics and it comes with a bunch of

00:11:38,670 --> 00:11:46,439
options that you can use and basically

00:11:40,920 --> 00:11:50,519
if if one of your isn't met

00:11:46,439 --> 00:11:51,980
then the the build will fail the task

00:11:50,519 --> 00:11:54,949
will file on the bill will file

00:11:51,980 --> 00:11:58,079
hopefully your site won't be deployed

00:11:54,949 --> 00:12:04,019
because it will be let it it would be

00:11:58,079 --> 00:12:05,819
less performant towards that but what

00:12:04,019 --> 00:12:09,180
can we really do to improve performance

00:12:05,819 --> 00:12:12,329
beyond minification right because there

00:12:09,180 --> 00:12:14,430
are a ton of different things that we

00:12:12,329 --> 00:12:18,480
can look at in the web stack going from

00:12:14,430 --> 00:12:22,350
TCP all the way to JavaScript so let's

00:12:18,480 --> 00:12:25,730
start with the lower lower levels like

00:12:22,350 --> 00:12:29,730
networking if you are interested in this

00:12:25,730 --> 00:12:31,769
beyond what I can talk about in 30

00:12:29,730 --> 00:12:33,660
minutes I recommend reading

00:12:31,769 --> 00:12:36,959
high-performance browser browser

00:12:33,660 --> 00:12:41,449
networking by Ilya it's a very good book

00:12:36,959 --> 00:12:44,040
it it describes him in a lot of detail

00:12:41,449 --> 00:12:50,269
all of the underlying protocols of the

00:12:44,040 --> 00:12:55,259
web all the way from TCP HTTP HTTPS

00:12:50,269 --> 00:12:57,300
everything websockets where DC or not it

00:12:55,259 --> 00:13:02,699
talks a lot about more networks and why

00:12:57,300 --> 00:13:04,800
it's important to to understand it helps

00:13:02,699 --> 00:13:08,399
you understand why progressive

00:13:04,800 --> 00:13:11,699
enhancement is important because on

00:13:08,399 --> 00:13:14,939
intermittent connections you you want to

00:13:11,699 --> 00:13:17,819
deliver the fastest possible experience

00:13:14,939 --> 00:13:18,810
to your users so it talks a lot about

00:13:17,819 --> 00:13:21,360
again

00:13:18,810 --> 00:13:26,490
the intersection between UX and

00:13:21,360 --> 00:13:29,040
performance but beyond that something

00:13:26,490 --> 00:13:32,460
that you can extract strike from that

00:13:29,040 --> 00:13:36,330
book is how to optimize tcp and there

00:13:32,460 --> 00:13:38,670
are two basic ways of doing that first

00:13:36,330 --> 00:13:41,370
off you you you should increase the

00:13:38,670 --> 00:13:43,950
initial TC being window size and this

00:13:41,370 --> 00:13:45,990
basically allows you to have more

00:13:43,950 --> 00:13:49,620
throughput on every connection from the

00:13:45,990 --> 00:13:53,400
get-go and to do that you basically need

00:13:49,620 --> 00:13:56,490
to have the latest version of your OS in

00:13:53,400 --> 00:13:57,839
production and that's basically it and

00:13:56,490 --> 00:14:01,110
the other thing that you should be doing

00:13:57,839 --> 00:14:02,970
is disabling slow sorry start and this

00:14:01,110 --> 00:14:06,210
is part of the TCP protocol that's

00:14:02,970 --> 00:14:08,940
usually enabled by default but what it

00:14:06,210 --> 00:14:10,410
does is on long-lived connections

00:14:08,940 --> 00:14:14,250
because you're supposed to be using

00:14:10,410 --> 00:14:18,140
keep-alive on HTTP so unlucky live

00:14:14,250 --> 00:14:21,990
connections that go idle for for a while

00:14:18,140 --> 00:14:25,260
slow sorry sir make sure that the

00:14:21,990 --> 00:14:30,510
throughput goes back to an acceptable

00:14:25,260 --> 00:14:32,480
level and then that's not very good in

00:14:30,510 --> 00:14:36,240
in web connections where you're using

00:14:32,480 --> 00:14:40,830
may be reusing a single connection for

00:14:36,240 --> 00:14:44,400
many many requests when it comes to http

00:14:40,830 --> 00:14:47,730
obviously just make less requests um and

00:14:44,400 --> 00:14:50,310
we all can be done turn on keep alive

00:14:47,730 --> 00:14:52,530
because that way you have to go through

00:14:50,310 --> 00:14:55,800
all of the handshakes involved in

00:14:52,530 --> 00:14:57,990
setting up a connection obviously gz

00:14:55,800 --> 00:15:03,480
ball detects that expires and it occurs

00:14:57,990 --> 00:15:08,040
and use CD ends so there's not a lot of

00:15:03,480 --> 00:15:13,040
explaining that's required there and

00:15:08,040 --> 00:15:17,520
absolutely look into using HTTP to https

00:15:13,040 --> 00:15:19,589
speedy and all these things because they

00:15:17,520 --> 00:15:23,820
come with a lot of different benefits

00:15:19,589 --> 00:15:25,860
for you some of them are non blocking

00:15:23,820 --> 00:15:27,450
multiplexing and this basically means

00:15:25,860 --> 00:15:29,850
that you're going to reuse a single

00:15:27,450 --> 00:15:34,290
connection for the whole

00:15:29,850 --> 00:15:38,190
regine and send all of the requests

00:15:34,290 --> 00:15:41,579
through that and it also has higher

00:15:38,190 --> 00:15:46,649
compression which basically saves even

00:15:41,579 --> 00:15:48,360
more bites by by not sending the cookie

00:15:46,649 --> 00:15:52,350
headers for instance when they are the

00:15:48,360 --> 00:15:54,120
same as the last request I wanna um and

00:15:52,350 --> 00:15:58,290
there's also proactive server push which

00:15:54,120 --> 00:16:02,550
allows a server to send along with the

00:15:58,290 --> 00:16:04,589
HP's of HTML for instance some CSS and

00:16:02,550 --> 00:16:09,779
JavaScript that's also required by that

00:16:04,589 --> 00:16:12,060
page in Heller so that the the browser

00:16:09,779 --> 00:16:14,459
doesn't need to wait until the page has

00:16:12,060 --> 00:16:19,740
loaded to start downloading downloading

00:16:14,459 --> 00:16:23,670
those dependencies and others the the

00:16:19,740 --> 00:16:26,370
website right and then here we have HTML

00:16:23,670 --> 00:16:28,560
and the the single best piece of advice

00:16:26,370 --> 00:16:31,139
I have here is just run around the

00:16:28,560 --> 00:16:34,680
server side you can always become a

00:16:31,139 --> 00:16:38,250
single patient later but important thing

00:16:34,680 --> 00:16:42,750
is that you deliver your content first

00:16:38,250 --> 00:16:44,310
and last different critical asset

00:16:42,750 --> 00:16:47,519
loading and this includes all the

00:16:44,310 --> 00:16:53,310
JavaScript that you have all the images

00:16:47,519 --> 00:16:56,670
are below default and so on another CSS

00:16:53,310 --> 00:16:58,920
ah one thing that you could do is in

00:16:56,670 --> 00:17:02,420
line in critical CSS this basically

00:16:58,920 --> 00:17:07,230
means if this was your page and the the

00:17:02,420 --> 00:17:09,390
D in your web browser all of the content

00:17:07,230 --> 00:17:11,610
does below default imagine all of these

00:17:09,390 --> 00:17:13,230
slides that are coming up those are

00:17:11,610 --> 00:17:17,400
aren't critical because they are not

00:17:13,230 --> 00:17:21,209
loaded now so you should be able to

00:17:17,400 --> 00:17:24,179
defer all of that CSS from the initial

00:17:21,209 --> 00:17:27,929
page load and just in line in a style

00:17:24,179 --> 00:17:30,740
tag the DCSS for this page so it looks

00:17:27,929 --> 00:17:35,070
very fast and you don't have a blocking

00:17:30,740 --> 00:17:38,730
request for CSS we'll look at that later

00:17:35,070 --> 00:17:41,960
too um avoid them domain some things

00:17:38,730 --> 00:17:47,480
like that is responsive

00:17:41,960 --> 00:17:51,710
sign concatenate the unfollow a style

00:17:47,480 --> 00:17:53,390
guide that's that doesn't quite sound

00:17:51,710 --> 00:17:55,760
like something that would improve

00:17:53,390 --> 00:17:57,950
performance but it does because you

00:17:55,760 --> 00:18:01,850
don't repeat yourself on things like

00:17:57,950 --> 00:18:05,929
this so eventually the code base is much

00:18:01,850 --> 00:18:08,000
cleaner than otherwise it'll be when it

00:18:05,929 --> 00:18:12,169
comes to phones load them asynchronously

00:18:08,000 --> 00:18:13,909
because they are very very expensive you

00:18:12,169 --> 00:18:16,940
can use a fallback font while you're

00:18:13,909 --> 00:18:19,429
loading and then switch them preventing

00:18:16,940 --> 00:18:22,909
a flashes of invisible text while

00:18:19,429 --> 00:18:26,450
different slowed use fewer phones this

00:18:22,909 --> 00:18:28,520
is something that's probably easier said

00:18:26,450 --> 00:18:30,470
than done because it's not like you can

00:18:28,520 --> 00:18:33,289
go back to your company and be like oh

00:18:30,470 --> 00:18:35,870
hey yeah this guy at the conference said

00:18:33,289 --> 00:18:41,600
use P or funds we're cutting all the

00:18:35,870 --> 00:18:43,789
phones um designer won't like me but but

00:18:41,600 --> 00:18:48,049
the truth is that design works well with

00:18:43,789 --> 00:18:51,529
constraints and if you plan on using

00:18:48,049 --> 00:18:55,940
less funds from the get-go and try to

00:18:51,529 --> 00:18:59,120
work that with your design teams they'll

00:18:55,940 --> 00:19:00,740
probably be thrilled about it probably

00:18:59,120 --> 00:19:03,649
not in the middle of the project but

00:19:00,740 --> 00:19:06,559
definitely when it's just getting

00:19:03,649 --> 00:19:11,929
started um and obviously cash funds

00:19:06,559 --> 00:19:15,580
aggressively using some some mechanism

00:19:11,929 --> 00:19:18,289
like local storage or just HTTP caching

00:19:15,580 --> 00:19:20,570
when it comes to images I think the best

00:19:18,289 --> 00:19:22,970
thing that you should do is a shrink in

00:19:20,570 --> 00:19:26,450
them because usually you have like user

00:19:22,970 --> 00:19:29,270
uploaded images are like very big like

00:19:26,450 --> 00:19:35,120
screenshots taken on a Mac and there are

00:19:29,270 --> 00:19:37,279
like four 4000 pixels wide so you should

00:19:35,120 --> 00:19:40,580
bring them and there are tools you can

00:19:37,279 --> 00:19:43,190
use that you should be four images below

00:19:40,580 --> 00:19:46,820
default create spreadsheets using tools

00:19:43,190 --> 00:19:49,460
much as having your designer do that in

00:19:46,820 --> 00:19:53,179
line tiny dynamic images may be like

00:19:49,460 --> 00:19:55,100
gravitas and so on um and use CSS for

00:19:53,179 --> 00:19:58,340
simple icons like that

00:19:55,100 --> 00:20:02,450
and one you should be able to live

00:19:58,340 --> 00:20:06,370
without JavaScript I said it differ all

00:20:02,450 --> 00:20:09,340
of it use small smaller modules acid

00:20:06,370 --> 00:20:12,380
hashing and cash bender scraped

00:20:09,340 --> 00:20:15,620
separately so they are cached more

00:20:12,380 --> 00:20:18,980
aggressively so yeah how the hell do we

00:20:15,620 --> 00:20:29,179
do all of this right well that's soon

00:20:18,980 --> 00:20:30,710
you guys um but in all seriousness one

00:20:29,179 --> 00:20:33,850
of the things that you should be using

00:20:30,710 --> 00:20:38,510
his engine eggs which allows you to

00:20:33,850 --> 00:20:42,549
serve static content and cash it very

00:20:38,510 --> 00:20:45,260
aggressively it supports HTTP to now

00:20:42,549 --> 00:20:49,520
gzip compression all this good stuff by

00:20:45,260 --> 00:20:53,470
default um and it allows you to lay some

00:20:49,520 --> 00:20:57,620
pressure off of your front end servers

00:20:53,470 --> 00:20:59,600
set up a CDN first look into this maybe

00:20:57,620 --> 00:21:03,350
you don't actually need a CM for like

00:20:59,600 --> 00:21:07,970
your personal blog but I still set set

00:21:03,350 --> 00:21:09,950
one up for mine because why not um you

00:21:07,970 --> 00:21:11,690
can use cloud flour if you're just

00:21:09,950 --> 00:21:14,539
setting up your first in the end it's

00:21:11,690 --> 00:21:16,990
pretty easy to set up but there are

00:21:14,539 --> 00:21:19,909
other enterprise the options as well

00:21:16,990 --> 00:21:21,890
when it comes to rendering them both the

00:21:19,909 --> 00:21:24,230
server side on the client side there are

00:21:21,890 --> 00:21:26,659
a bunch of different options that you

00:21:24,230 --> 00:21:29,780
can use there's a backbone with some

00:21:26,659 --> 00:21:34,340
hacky thing called render there's

00:21:29,780 --> 00:21:36,679
angular 2 maybe I think there's tunnels

00:21:34,340 --> 00:21:40,700
which is this thing i did that nobody

00:21:36,679 --> 00:21:43,400
knows about so don't use that there's

00:21:40,700 --> 00:21:48,320
free act which people do now so maybe

00:21:43,400 --> 00:21:50,299
use that but just try to run the server

00:21:48,320 --> 00:21:53,570
side and then figure out how to run

00:21:50,299 --> 00:21:56,799
their own decline hmm when it comes to

00:21:53,570 --> 00:22:00,320
the foreign assets shaz you say sing for

00:21:56,799 --> 00:22:03,140
for javascript and then when it comes to

00:22:00,320 --> 00:22:05,450
style times justa you can set the media

00:22:03,140 --> 00:22:07,160
type to something invalid like only ex

00:22:05,450 --> 00:22:09,110
or something

00:22:07,160 --> 00:22:11,090
and then after a timeout said the

00:22:09,110 --> 00:22:13,880
immediate I to all and that allowed the

00:22:11,090 --> 00:22:18,730
Stiles asynchronously and not blogging

00:22:13,880 --> 00:22:22,160
your page don't ask me why but it works

00:22:18,730 --> 00:22:26,510
when it comes to I new CSS you can

00:22:22,160 --> 00:22:30,530
remove things like bootstraps code that

00:22:26,510 --> 00:22:34,760
nobody uses just there's this package

00:22:30,530 --> 00:22:36,910
called an CSS and you can it's a like a

00:22:34,760 --> 00:22:39,880
common line a gold package and whatnot

00:22:36,910 --> 00:22:42,230
and it allows you to get rid of all the

00:22:39,880 --> 00:22:47,210
bootstrap code that you use and just

00:22:42,230 --> 00:22:51,950
have like the button class maybe don't

00:22:47,210 --> 00:22:54,470
use bootstrap but you can my point in

00:22:51,950 --> 00:22:56,390
line critical CSS and there are plenty

00:22:54,470 --> 00:22:59,630
of tools you can use to do this it's

00:22:56,390 --> 00:23:02,150
kind of convoluted because the dimension

00:22:59,630 --> 00:23:07,100
to do this is something called penthouse

00:23:02,150 --> 00:23:10,910
it allows you to it's a script for

00:23:07,100 --> 00:23:13,280
phantom shares and it allows you to look

00:23:10,910 --> 00:23:15,410
at the page and extract from a

00:23:13,280 --> 00:23:17,810
stylesheet all of the CSS that's

00:23:15,410 --> 00:23:21,500
actually being used at the top of the

00:23:17,810 --> 00:23:23,690
page and it prints that out so then you

00:23:21,500 --> 00:23:26,150
need to take that put it in style Tai

00:23:23,690 --> 00:23:28,880
and for the rest of the styles as we saw

00:23:26,150 --> 00:23:31,010
earlier there's also a package called

00:23:28,880 --> 00:23:34,970
critical that allows you to automate all

00:23:31,010 --> 00:23:39,340
of these things in a bit of an easier

00:23:34,970 --> 00:23:45,320
way but it's well worth the trouble so

00:23:39,340 --> 00:23:48,710
consider doing that use of unloader this

00:23:45,320 --> 00:23:51,110
is pretty obvious you just have to to

00:23:48,710 --> 00:23:54,320
give it your font name and then when

00:23:51,110 --> 00:23:56,450
it's loaded it that's a document a class

00:23:54,320 --> 00:23:58,820
on the document and then you can swap

00:23:56,450 --> 00:24:02,440
the funds so that you have flashes of

00:23:58,820 --> 00:24:05,390
imbecile texts and you maybe have some

00:24:02,440 --> 00:24:08,780
some flash when you're swapping the

00:24:05,390 --> 00:24:10,640
fonts but it's very small and it also

00:24:08,780 --> 00:24:14,540
helps you speed up page loads

00:24:10,640 --> 00:24:17,540
significantly optimized images you can

00:24:14,540 --> 00:24:20,180
use image mean to optimize them to

00:24:17,540 --> 00:24:20,419
remove metadata that you don't need and

00:24:20,180 --> 00:24:24,230
stop

00:24:20,419 --> 00:24:27,200
like that when it comes to shrinking

00:24:24,230 --> 00:24:29,149
them you're gonna use graphics magic it

00:24:27,200 --> 00:24:33,379
also has like an animal that you can

00:24:29,149 --> 00:24:37,700
easily use in in galt tasks with like

00:24:33,379 --> 00:24:41,629
five lines of code so do that image mean

00:24:37,700 --> 00:24:44,899
has like planes for SVG and JPEG and all

00:24:41,629 --> 00:24:49,299
the things I comes with the CLI and gulp

00:24:44,899 --> 00:24:51,739
and grunt plugins so it's pretty useful

00:24:49,299 --> 00:24:54,289
then when it comes to spreadsheets you

00:24:51,739 --> 00:24:57,619
can use bright smith this thing

00:24:54,289 --> 00:25:01,279
basically you give it a equal a beam

00:24:57,619 --> 00:25:03,909
pattern of where your PNG icons are and

00:25:01,279 --> 00:25:07,190
it'll give you back a CSS style sheet

00:25:03,909 --> 00:25:09,919
with all the classes that you need for

00:25:07,190 --> 00:25:12,409
your icons and a single spreadsheet so

00:25:09,919 --> 00:25:17,119
it's pretty handy and it also has a CLI

00:25:12,409 --> 00:25:19,879
and a grunt task um when it comes to

00:25:17,119 --> 00:25:22,850
inline in images you can use the data

00:25:19,879 --> 00:25:25,850
URI manual and it's basically either a

00:25:22,850 --> 00:25:28,639
common line tool or or an API you give

00:25:25,850 --> 00:25:31,669
it the the path to your file and it

00:25:28,639 --> 00:25:34,429
gives you back the decompressed data URI

00:25:31,669 --> 00:25:39,019
for that that you can just embed in your

00:25:34,429 --> 00:25:42,340
side so that's awesome you can also use

00:25:39,019 --> 00:25:44,690
a module system again kind of like

00:25:42,340 --> 00:25:52,249
following a style guide this allows you

00:25:44,690 --> 00:25:55,419
to not have 20 persons of jQuery common

00:25:52,249 --> 00:25:59,749
shares or I es6 modules either way

00:25:55,419 --> 00:26:03,559
they're both pretty awesome so that's

00:25:59,749 --> 00:26:05,840
pretty much really need if you want to

00:26:03,559 --> 00:26:08,749
learn more about all of these things and

00:26:05,840 --> 00:26:13,489
maybe gets your hands a little bit dirty

00:26:08,749 --> 00:26:16,909
you can use perf school it's a con line

00:26:13,489 --> 00:26:19,309
tutorial thing that I did it has

00:26:16,909 --> 00:26:22,759
exercises that you can follow they're

00:26:19,309 --> 00:26:26,840
basically what I discuss today in the

00:26:22,759 --> 00:26:28,860
endurance doc um is pretty fun to do so

00:26:26,840 --> 00:26:36,070
it has guts and it

00:26:28,860 --> 00:26:38,410
to people like that and yeah and I wrote

00:26:36,070 --> 00:26:41,140
the book called the JavaScript

00:26:38,410 --> 00:26:44,110
application design it has like a bunch

00:26:41,140 --> 00:26:46,210
of stuff that's it's not quite on

00:26:44,110 --> 00:26:48,280
performance but its own code quality and

00:26:46,210 --> 00:26:50,740
processes and automation all these

00:26:48,280 --> 00:26:55,180
things so if you care about any of that

00:26:50,740 --> 00:26:56,500
then just follow that link or maybe send

00:26:55,180 --> 00:26:58,180
me an email or something i will give you

00:26:56,500 --> 00:27:01,990
a discount code if you're too cheap to

00:26:58,180 --> 00:27:04,500
buy the full price um and that's it

00:27:01,990 --> 00:27:04,500

YouTube URL: https://www.youtube.com/watch?v=1iWSokC29vQ


