Title: Maurice De Beijer: Event-Sourcing your React-Flux applications - JSConf Budapest 2016
Publication date: 2016-06-10
Playlist: JSConf Budapest 2016
Description: 
	Most React-Flux applications just store the data being edited as is in a database. While it is perfectly fine to treat data in a simple CRUD fashion like this with a smaller application this is not very optimal when applications get more complex. For more complex applications using the Command Query Responsibility Segregation (CQRS) design pattern together with Event-Sourcing (ES) is a much more powerful solution.

With Event-Sourcing every action leading up to the current state is stored as a separate domain event. This collection of domain events is then used as the write model in the CQRS model. These same events are projected out to a secondary database to build the read model for the application. In this session Maurice de Beijer will explain why you might want to use Event-Sourcing and how to get started with this design in your React and Flux applications.

http://jsconfbp.com/speakers/maurice-de-beijer.html
Captions: 
	00:00:04,410 --> 00:00:14,730
Thank You Jacob good afternoon everyone

00:00:11,630 --> 00:00:18,740
I'd like to talk this session about ven

00:00:14,730 --> 00:00:21,539
sourcing Redux and react applications

00:00:18,740 --> 00:00:25,170
now decision is more about architecture

00:00:21,539 --> 00:00:28,500
I use redux and reacts as examples but

00:00:25,170 --> 00:00:30,840
this would basically apply to any Java

00:00:28,500 --> 00:00:33,629
scripts application or for that matter

00:00:30,840 --> 00:00:37,020
even any smart client server site

00:00:33,629 --> 00:00:40,010
application desktop application the

00:00:37,020 --> 00:00:43,110
architecture is universally applicable

00:00:40,010 --> 00:00:46,079
so who my name is waste buyer i'm from

00:00:43,110 --> 00:00:48,570
the netherlands I'm freelance instructor

00:00:46,079 --> 00:00:52,140
developer and I consoled to lots of

00:00:48,570 --> 00:00:53,940
companies doing stuff so if you want to

00:00:52,140 --> 00:00:56,870
learn more about react I've recently

00:00:53,940 --> 00:00:59,579
started the Kickstarter campaign and

00:00:56,870 --> 00:01:01,140
with any luck if it gets fun that I'm

00:00:59,579 --> 00:01:03,979
going to create a whole course about

00:01:01,140 --> 00:01:06,780
reacts where you can do learn much more

00:01:03,979 --> 00:01:12,030
so if you want to go there that's the

00:01:06,780 --> 00:01:14,520
link so why am i interested in event

00:01:12,030 --> 00:01:16,470
sourcing and these kind of our sticker

00:01:14,520 --> 00:01:18,539
things well I want to make better

00:01:16,470 --> 00:01:20,399
applications and that's a goal I've had

00:01:18,539 --> 00:01:22,440
for a long time and there is a lot

00:01:20,399 --> 00:01:25,020
involved with making better applications

00:01:22,440 --> 00:01:27,630
the front end has to be better and react

00:01:25,020 --> 00:01:29,429
helps me a lot there day that

00:01:27,630 --> 00:01:31,920
manipulation in the front end has to be

00:01:29,429 --> 00:01:34,289
better that's where Redux comes in helps

00:01:31,920 --> 00:01:38,250
me a lot put on the server side we have

00:01:34,289 --> 00:01:40,020
to do things a lot better as well and

00:01:38,250 --> 00:01:43,410
one of the reasons things need to be

00:01:40,020 --> 00:01:47,130
better is because of fire like this one

00:01:43,410 --> 00:01:48,739
of my main customers creates safety

00:01:47,130 --> 00:01:52,679
software for the oil and gas industry

00:01:48,739 --> 00:01:55,140
and we kind of try to prevent these

00:01:52,679 --> 00:01:56,610
accidents from happening now we don't

00:01:55,140 --> 00:01:58,800
control people we can't actually

00:01:56,610 --> 00:02:01,229
forcibly stop someone from doing

00:01:58,800 --> 00:02:03,209
something wrong but we do create so far

00:02:01,229 --> 00:02:05,580
where all the work is planned and we

00:02:03,209 --> 00:02:08,069
kind of evaluate well if someone is

00:02:05,580 --> 00:02:09,770
going to open up a gas main lying and

00:02:08,069 --> 00:02:15,120
someone else is going to do some welding

00:02:09,770 --> 00:02:16,950
then torches sparks free gas that's

00:02:15,120 --> 00:02:17,790
probably not a good combination you

00:02:16,950 --> 00:02:19,890
probably will

00:02:17,790 --> 00:02:22,260
to separate those in time so they don't

00:02:19,890 --> 00:02:26,400
happen at the same time or you will get

00:02:22,260 --> 00:02:29,280
accidents like this happen so

00:02:26,400 --> 00:02:32,040
traditionally people be storing data in

00:02:29,280 --> 00:02:35,280
all sorts of ways you might have been

00:02:32,040 --> 00:02:40,290
using relational data or an object

00:02:35,280 --> 00:02:42,989
database like MongoDB and typically in

00:02:40,290 --> 00:02:44,879
the traditional application architecture

00:02:42,989 --> 00:02:46,620
used to be quite simple with there's

00:02:44,879 --> 00:02:49,139
something like this at the very high

00:02:46,620 --> 00:02:51,359
level so the left we've got our database

00:02:49,139 --> 00:02:53,129
and in the middle we've got our server

00:02:51,359 --> 00:02:55,290
for application and that server

00:02:53,129 --> 00:02:58,859
application grabs data from the database

00:02:55,290 --> 00:03:01,019
whenever a client connects client is on

00:02:58,859 --> 00:03:03,000
the left hand side sorry the right hand

00:03:01,019 --> 00:03:05,189
side it's the browser running a react

00:03:03,000 --> 00:03:08,430
application in this case and it kind of

00:03:05,189 --> 00:03:09,959
passes that data to the clients and then

00:03:08,430 --> 00:03:12,450
whenever the client has made some kind

00:03:09,959 --> 00:03:14,280
of changes it passes the data back to do

00:03:12,450 --> 00:03:16,799
server the server probably does some

00:03:14,280 --> 00:03:19,709
sort of validation and stores it in the

00:03:16,799 --> 00:03:23,010
database this is the kind of system you

00:03:19,709 --> 00:03:27,060
might end up if you just use restful

00:03:23,010 --> 00:03:28,919
styles of working with data and that's

00:03:27,060 --> 00:03:31,199
fine if you've got a relatively simple

00:03:28,919 --> 00:03:33,750
application if you've got to do

00:03:31,199 --> 00:03:36,060
application you're not going to have lot

00:03:33,750 --> 00:03:39,030
of multi-user contention most people

00:03:36,060 --> 00:03:40,829
manage their own to-do list no one else

00:03:39,030 --> 00:03:42,750
is going to touch that maybe in the case

00:03:40,829 --> 00:03:45,239
of a manager he'll have a secretory

00:03:42,750 --> 00:03:47,190
managing his to-do list but in that case

00:03:45,239 --> 00:03:50,190
it's probably the secretary doing all

00:03:47,190 --> 00:03:52,769
the work and even if you create to the

00:03:50,190 --> 00:03:54,239
to do list to rule them all is the whole

00:03:52,769 --> 00:03:57,030
world is going to use it you'll have

00:03:54,239 --> 00:03:59,310
lots of small lists but there won't be

00:03:57,030 --> 00:04:02,900
much interaction and a relatively simple

00:03:59,310 --> 00:04:07,169
architecture is going to be just fine

00:04:02,900 --> 00:04:09,389
but if you want to create reacts

00:04:07,169 --> 00:04:10,979
component to render something like that

00:04:09,389 --> 00:04:12,750
in this case it's not for to do

00:04:10,979 --> 00:04:15,090
applications it's actually for work

00:04:12,750 --> 00:04:17,759
permits you might end up with a react

00:04:15,090 --> 00:04:19,650
component like this really simple it

00:04:17,759 --> 00:04:22,380
just takes in a list it's good no clue

00:04:19,650 --> 00:04:25,139
where it actually came from it knows

00:04:22,380 --> 00:04:26,880
there is something that it can do it can

00:04:25,139 --> 00:04:29,550
draft the permit which basically means

00:04:26,880 --> 00:04:31,560
we're building up a whole permit

00:04:29,550 --> 00:04:33,900
requests specifying what we want

00:04:31,560 --> 00:04:36,570
to do where we want to do it when what

00:04:33,900 --> 00:04:38,370
kind of tools we want to use etc but

00:04:36,570 --> 00:04:40,500
react component doesn't really know

00:04:38,370 --> 00:04:42,570
where it came from how its treated

00:04:40,500 --> 00:04:44,520
they're really simple and that's how

00:04:42,570 --> 00:04:48,960
your reactor components should typically

00:04:44,520 --> 00:04:51,570
be so if you've got a little more

00:04:48,960 --> 00:04:53,820
complex application which our

00:04:51,570 --> 00:04:56,430
application is you want to be a bit more

00:04:53,820 --> 00:04:59,250
explicit about updating things and

00:04:56,430 --> 00:05:01,320
that's where the CQ rest pattern or

00:04:59,250 --> 00:05:05,729
command the query responsibility

00:05:01,320 --> 00:05:09,240
segregation comes in and insecure s

00:05:05,729 --> 00:05:12,030
commands are very important commands are

00:05:09,240 --> 00:05:13,979
used from the client to update things so

00:05:12,030 --> 00:05:15,900
we're not taking a resource like in a

00:05:13,979 --> 00:05:18,000
restful system downloaded changing its

00:05:15,900 --> 00:05:20,280
ending that home resource back though

00:05:18,000 --> 00:05:22,080
we're very explicit about I've got a

00:05:20,280 --> 00:05:25,710
resource I want to make some changes to

00:05:22,080 --> 00:05:27,960
it this is why I want to do it if you

00:05:25,710 --> 00:05:29,790
take all your command names and you give

00:05:27,960 --> 00:05:33,300
those to some kind of say business

00:05:29,790 --> 00:05:35,789
analyst or end user he should be able to

00:05:33,300 --> 00:05:39,419
understand that so what commands like

00:05:35,789 --> 00:05:42,300
update fields is a lousy command it

00:05:39,419 --> 00:05:48,479
doesn't convey business value draft

00:05:42,300 --> 00:05:51,090
permits pay check check credits records

00:05:48,479 --> 00:05:54,479
those are valid commands and something

00:05:51,090 --> 00:05:57,240
which makes sense and if you use see

00:05:54,479 --> 00:06:00,360
caress the architecture will become

00:05:57,240 --> 00:06:02,100
somewhat more complex like this on the

00:06:00,360 --> 00:06:06,510
right and still site we still got our

00:06:02,100 --> 00:06:08,280
browser application using react if it

00:06:06,510 --> 00:06:10,740
wants to get some data from the surface

00:06:08,280 --> 00:06:13,380
it goes to the query surface at the top

00:06:10,740 --> 00:06:15,990
and the query surface is probably a

00:06:13,380 --> 00:06:18,720
restful service but all it does is get

00:06:15,990 --> 00:06:22,320
data it never responds to with boots or

00:06:18,720 --> 00:06:25,979
a post or a delete it only retrieves

00:06:22,320 --> 00:06:27,660
data purely redone so what if you want

00:06:25,979 --> 00:06:30,360
to change something well the client

00:06:27,660 --> 00:06:32,789
sends very explicit commands to the

00:06:30,360 --> 00:06:35,160
server so the commands go down to the

00:06:32,789 --> 00:06:37,470
bottom to the command surface it does

00:06:35,160 --> 00:06:40,080
all the validation it could potentially

00:06:37,470 --> 00:06:41,849
reject the command like you want to

00:06:40,080 --> 00:06:43,890
deposit or you want to withdraw some

00:06:41,849 --> 00:06:44,790
money from your bank account but you

00:06:43,890 --> 00:06:46,590
don't actually have

00:06:44,790 --> 00:06:49,350
enough money well in that case your

00:06:46,590 --> 00:06:53,280
request is rejected your command is not

00:06:49,350 --> 00:06:57,390
valid and the plan could get a 400 style

00:06:53,280 --> 00:07:00,660
error back but assuming the command is

00:06:57,390 --> 00:07:02,460
valid the database gets updated and the

00:07:00,660 --> 00:07:04,440
client or in the other connected clients

00:07:02,460 --> 00:07:08,820
could actually retrieve thread through

00:07:04,440 --> 00:07:11,130
the query surface so what does a command

00:07:08,820 --> 00:07:12,900
like that look like in JavaScript well

00:07:11,130 --> 00:07:15,330
it's really simple commands are really

00:07:12,900 --> 00:07:18,150
simple objects we try to keep them as

00:07:15,330 --> 00:07:20,910
flat as possible it's just back of data

00:07:18,150 --> 00:07:24,600
a couple of interesting things though

00:07:20,910 --> 00:07:27,600
first of all every command has an ID in

00:07:24,600 --> 00:07:30,300
some cases in more complex applications

00:07:27,600 --> 00:07:32,700
especially if you've not got the perfect

00:07:30,300 --> 00:07:35,610
connection like we do when we have to

00:07:32,700 --> 00:07:38,370
work with offshore platforms you might

00:07:35,610 --> 00:07:40,050
get commands which get sent twice after

00:07:38,370 --> 00:07:42,600
all if you've got a timeout from from

00:07:40,050 --> 00:07:44,940
HTTP requests you don't really know what

00:07:42,600 --> 00:07:49,350
happens did my command reach the server

00:07:44,940 --> 00:07:52,550
and what's the response timed out or did

00:07:49,350 --> 00:07:55,350
it never actually receive the server so

00:07:52,550 --> 00:07:58,200
every command has a unique ID if its

00:07:55,350 --> 00:08:01,020
recent for some reason then the server

00:07:58,200 --> 00:08:03,120
can check based on that command tidy am

00:08:01,020 --> 00:08:05,100
I duplicating the same month and if so

00:08:03,120 --> 00:08:08,370
get rejected because it's already done

00:08:05,100 --> 00:08:10,250
it the other important thing is the

00:08:08,370 --> 00:08:12,690
command name what are we actually

00:08:10,250 --> 00:08:14,400
intending to do there and based on the

00:08:12,690 --> 00:08:17,700
command name there will be a whole bunch

00:08:14,400 --> 00:08:20,190
of other data or maybe very little in

00:08:17,700 --> 00:08:22,020
case of delete apartment then all you

00:08:20,190 --> 00:08:24,090
would need to know the permit ID to

00:08:22,020 --> 00:08:25,860
delete and that's all but in this case

00:08:24,090 --> 00:08:29,990
with draft permits to raise a whole

00:08:25,860 --> 00:08:29,990
bunch of data about the permits there

00:08:30,290 --> 00:08:35,130
after a command like this has been

00:08:32,760 --> 00:08:38,250
successful we kind of need to update the

00:08:35,130 --> 00:08:40,680
reader store on the clients so we Redux

00:08:38,250 --> 00:08:44,340
you typically have actions to signify

00:08:40,680 --> 00:08:47,250
that something happens and an action is

00:08:44,340 --> 00:08:49,200
very strongly related to a command a

00:08:47,250 --> 00:08:51,900
command is ok I want to do something

00:08:49,200 --> 00:08:56,190
well the action is ok that's been done

00:08:51,900 --> 00:08:57,910
it was successful now go and update the

00:08:56,190 --> 00:09:00,940
data on the client

00:08:57,910 --> 00:09:04,090
so you see this action notice different

00:09:00,940 --> 00:09:06,610
the command was draft permit so

00:09:04,090 --> 00:09:09,160
commanding tense the action is permit

00:09:06,610 --> 00:09:12,240
drafted we know the draft command has

00:09:09,160 --> 00:09:14,620
been successful so it's past tense and

00:09:12,240 --> 00:09:19,540
the data in there is going to be pretty

00:09:14,620 --> 00:09:22,030
much the same thing so that's nice that

00:09:19,540 --> 00:09:23,920
gives us a much better our stature but

00:09:22,030 --> 00:09:26,860
it still leaves us with one big problem

00:09:23,920 --> 00:09:30,430
if we looked at the database it only has

00:09:26,860 --> 00:09:33,790
the current state in there and it's like

00:09:30,430 --> 00:09:35,440
how did we get there if you look at this

00:09:33,790 --> 00:09:37,900
rock formation which is in the west of

00:09:35,440 --> 00:09:40,630
France it's kind of like a beautiful

00:09:37,900 --> 00:09:44,200
rock formation but how did it get to be

00:09:40,630 --> 00:09:47,070
the way it is did we have a solid rock

00:09:44,200 --> 00:09:51,070
there once upon a time and it waves

00:09:47,070 --> 00:09:54,190
break a big hole into it or maybe was it

00:09:51,070 --> 00:09:57,220
deposited on top and did deposit grow up

00:09:54,190 --> 00:10:00,160
to form that arch you really can tell

00:09:57,220 --> 00:10:03,370
all we've got is the current state and

00:10:00,160 --> 00:10:06,570
if you think about databases you quite

00:10:03,370 --> 00:10:08,920
often experience problems like well

00:10:06,570 --> 00:10:10,570
something in the database is wrong like

00:10:08,920 --> 00:10:14,290
there is something which should not be

00:10:10,570 --> 00:10:16,630
the way it is it's invalid we know that

00:10:14,290 --> 00:10:19,810
but how did it get to be in that a valid

00:10:16,630 --> 00:10:22,090
state we don't know all we can say is

00:10:19,810 --> 00:10:25,030
well okay it's invalid now somehow that

00:10:22,090 --> 00:10:27,520
happens maybe we've got some logic error

00:10:25,030 --> 00:10:29,830
but we really don't know how it got to

00:10:27,520 --> 00:10:33,010
be that way but will write some kind of

00:10:29,830 --> 00:10:35,410
sequel script to patch it and we're good

00:10:33,010 --> 00:10:38,230
to go again and maybe a month later the

00:10:35,410 --> 00:10:40,870
same problem occurs again still no clue

00:10:38,230 --> 00:10:45,250
why it happens so we really want to know

00:10:40,870 --> 00:10:49,270
a bit more about how stuff got to be the

00:10:45,250 --> 00:10:53,080
way it is so that's where event sourcing

00:10:49,270 --> 00:10:55,510
comes in a fence or thing is really

00:10:53,080 --> 00:10:57,820
something which is theoretically quite

00:10:55,510 --> 00:11:00,040
old it's based on accounting and

00:10:57,820 --> 00:11:03,580
bookkeeping which is be used for ages

00:11:00,040 --> 00:11:07,660
and a guy called Greg young basically

00:11:03,580 --> 00:11:09,220
implemented that in data storage so he

00:11:07,660 --> 00:11:11,130
said well instead of destroying the

00:11:09,220 --> 00:11:13,290
current state we're going to store

00:11:11,130 --> 00:11:17,310
are everything that leads up to the

00:11:13,290 --> 00:11:18,780
current state all of those events and if

00:11:17,310 --> 00:11:21,690
you think about that draft permits

00:11:18,780 --> 00:11:24,660
command I showed a few minutes ago well

00:11:21,690 --> 00:11:26,730
if that was successful we would change

00:11:24,660 --> 00:11:30,150
some states well in an event source

00:11:26,730 --> 00:11:33,660
system we would store an event permit

00:11:30,150 --> 00:11:36,150
drafted and like the commands could be

00:11:33,660 --> 00:11:38,580
validated and rejected if it was invalid

00:11:36,150 --> 00:11:42,000
the event is store if it is successful

00:11:38,580 --> 00:11:44,040
so we know it's happened its history

00:11:42,000 --> 00:11:47,010
which also means it's never going to

00:11:44,040 --> 00:11:50,940
change we're only going to add more to

00:11:47,010 --> 00:11:53,400
or to the table of events so if someone

00:11:50,940 --> 00:11:56,220
makes it change through that permit does

00:11:53,400 --> 00:11:58,770
another draft the command it's not going

00:11:56,220 --> 00:12:00,420
to override the first permit drafted

00:11:58,770 --> 00:12:03,180
events no it's going to create a second

00:12:00,420 --> 00:12:06,180
one and they don't stack on top of each

00:12:03,180 --> 00:12:09,480
other and the current States is a result

00:12:06,180 --> 00:12:11,910
of applying all those commands or all

00:12:09,480 --> 00:12:14,130
those events i should say in functional

00:12:11,910 --> 00:12:18,590
terms the current state is a left fault

00:12:14,130 --> 00:12:21,780
of all stored events now turns out that

00:12:18,590 --> 00:12:24,390
something which is relatively new in

00:12:21,780 --> 00:12:27,630
computer terms but in real life is be

00:12:24,390 --> 00:12:31,560
used for ages and ages even back in the

00:12:27,630 --> 00:12:33,600
days of the Pharaohs bookkeeping always

00:12:31,560 --> 00:12:36,480
had to rule like we don't distort a

00:12:33,600 --> 00:12:38,700
current state we store transactions and

00:12:36,480 --> 00:12:41,820
even back then the far-out might have

00:12:38,700 --> 00:12:44,520
had ten cows and one will be born then

00:12:41,820 --> 00:12:46,890
they won't cross out to ten given that

00:12:44,520 --> 00:12:48,390
they use clay tablets and papyrus back

00:12:46,890 --> 00:12:50,820
then crossing that would probably be

00:12:48,390 --> 00:12:53,670
quite hard but they would add another

00:12:50,820 --> 00:12:56,280
line cow born on whatever date and

00:12:53,670 --> 00:12:58,080
number one and when they got to the

00:12:56,280 --> 00:13:00,390
bottom of the tie tablet they would kind

00:12:58,080 --> 00:13:02,910
of sum them up and start a new tablet

00:13:00,390 --> 00:13:07,110
they say at the top current status is

00:13:02,910 --> 00:13:09,660
the Pharaoh has 11 calves and then they

00:13:07,110 --> 00:13:14,760
would report sales their purchases etc

00:13:09,660 --> 00:13:16,440
and kind of keep tally that way now

00:13:14,760 --> 00:13:18,900
bookkeeping has been doing that for

00:13:16,440 --> 00:13:22,310
thousands and thousands of years even

00:13:18,900 --> 00:13:24,480
the model double entry bookkeeping is

00:13:22,310 --> 00:13:27,060
hundreds of years old it was

00:13:24,480 --> 00:13:29,760
invented around fifteen hundreds by an

00:13:27,060 --> 00:13:32,130
Italian monk and he created to double

00:13:29,760 --> 00:13:34,889
book entry bookkeeping system which

00:13:32,130 --> 00:13:37,440
basically prevents lots of mistakes and

00:13:34,889 --> 00:13:39,810
makes it really easy to detect errors if

00:13:37,440 --> 00:13:43,350
they've been made so in that respect

00:13:39,810 --> 00:13:45,800
it's really nothing new and one of the

00:13:43,350 --> 00:13:49,410
great things it's a perfect or that look

00:13:45,800 --> 00:13:53,820
we know exactly what happens when it

00:13:49,410 --> 00:13:56,459
happens how it happens usually by who it

00:13:53,820 --> 00:13:58,320
happens depending on what you store in

00:13:56,459 --> 00:14:00,300
the event but usually you store all

00:13:58,320 --> 00:14:02,490
those things so if you run into the

00:14:00,300 --> 00:14:04,769
database you detect some kind of anomaly

00:14:02,490 --> 00:14:06,930
dare you say well that state isn't what

00:14:04,769 --> 00:14:08,430
it should be it really should be

00:14:06,930 --> 00:14:10,889
something different instead of saying

00:14:08,430 --> 00:14:13,110
well don't know how it good to be there

00:14:10,889 --> 00:14:15,000
but it is there now we can actually go

00:14:13,110 --> 00:14:17,519
through all the events being store up

00:14:15,000 --> 00:14:19,079
for that item and track well okay these

00:14:17,519 --> 00:14:21,779
changes were made these changes were

00:14:19,079 --> 00:14:24,060
made and you can determine what changed

00:14:21,779 --> 00:14:26,100
actually caused the error maybe there is

00:14:24,060 --> 00:14:27,959
something wrong with c'mon validation

00:14:26,100 --> 00:14:30,420
maybe there is something wrong with

00:14:27,959 --> 00:14:32,279
updating the current state at least

00:14:30,420 --> 00:14:37,110
you've got a complete track of what

00:14:32,279 --> 00:14:39,060
happens so you can lock that so if we

00:14:37,110 --> 00:14:41,250
look at the high level architecture or

00:14:39,060 --> 00:14:43,019
for an event-driven system will see

00:14:41,250 --> 00:14:44,279
something like this so on the right hand

00:14:43,019 --> 00:14:47,339
side who still got our browser

00:14:44,279 --> 00:14:48,990
application using reactor redux and it

00:14:47,339 --> 00:14:51,060
still connects up to that same two

00:14:48,990 --> 00:14:54,120
services the commanding service and the

00:14:51,060 --> 00:14:56,160
query surface so as far as the client

00:14:54,120 --> 00:14:57,870
concerns there is really no difference

00:14:56,160 --> 00:15:00,389
all the difference here is at the back

00:14:57,870 --> 00:15:03,060
ends the command surface basically takes

00:15:00,389 --> 00:15:07,529
each command turns into an event it gets

00:15:03,060 --> 00:15:08,880
stored in its own database whatever you

00:15:07,529 --> 00:15:11,389
want to use there are different

00:15:08,880 --> 00:15:13,800
libraries implementations you can use

00:15:11,389 --> 00:15:15,449
there is a projector surface which

00:15:13,800 --> 00:15:17,850
basically picks up the whole stream of

00:15:15,449 --> 00:15:19,829
events coming in and it says well if

00:15:17,850 --> 00:15:22,230
this event happened and I want to show

00:15:19,829 --> 00:15:25,050
it in some way and it updates a

00:15:22,230 --> 00:15:26,850
projection database for it now I've said

00:15:25,050 --> 00:15:28,649
projection database but it could be

00:15:26,850 --> 00:15:30,720
plural you could actually project into

00:15:28,649 --> 00:15:33,089
different databases you might say well

00:15:30,720 --> 00:15:35,670
I've got a relational database for

00:15:33,089 --> 00:15:37,810
normal projections but I use elastic

00:15:35,670 --> 00:15:42,400
search for file searching

00:15:37,810 --> 00:15:47,350
and I might use MongoDB for documents

00:15:42,400 --> 00:15:49,330
database for yet other services and the

00:15:47,350 --> 00:15:52,420
query site actually queries that

00:15:49,330 --> 00:15:54,580
projection database so why do we need

00:15:52,420 --> 00:15:56,830
two different databases or projections

00:15:54,580 --> 00:15:58,930
and the event store well the event store

00:15:56,830 --> 00:16:01,120
is just a list of everything leading up

00:15:58,930 --> 00:16:04,450
to the current state which makes it very

00:16:01,120 --> 00:16:05,830
hard to query for lots of queries now

00:16:04,450 --> 00:16:08,110
they're actually some queries which are

00:16:05,830 --> 00:16:10,990
really efficient to do that like you

00:16:08,110 --> 00:16:13,330
could ask from well whoever drafted the

00:16:10,990 --> 00:16:15,940
permit and then deleted it within five

00:16:13,330 --> 00:16:18,970
minutes after that something you found

00:16:15,940 --> 00:16:22,000
really easily query in normal database

00:16:18,970 --> 00:16:24,760
but if you want to know about all

00:16:22,000 --> 00:16:28,390
permits for a given drilling platform or

00:16:24,760 --> 00:16:30,400
all customers that are overdraft that's

00:16:28,390 --> 00:16:33,100
a lot harder to do in an event database

00:16:30,400 --> 00:16:34,300
and that's very easy in a projection

00:16:33,100 --> 00:16:36,820
database because you can basically

00:16:34,300 --> 00:16:42,040
choose whatever you want and whatever is

00:16:36,820 --> 00:16:43,540
most suitable for your need but we can

00:16:42,040 --> 00:16:46,180
actually expand a bit on this

00:16:43,540 --> 00:16:49,540
architecture because if we've got a

00:16:46,180 --> 00:16:52,060
projector surface which receives every

00:16:49,540 --> 00:16:54,460
event we can also create another surface

00:16:52,060 --> 00:16:56,440
which says well I'll also receive all

00:16:54,460 --> 00:16:59,050
events and i'm going to use push

00:16:56,440 --> 00:17:01,720
notifications to all connected clients

00:16:59,050 --> 00:17:04,660
use something like web sockets or socket

00:17:01,720 --> 00:17:07,300
build io or whatever technology you want

00:17:04,660 --> 00:17:09,550
long polling could work but basically

00:17:07,300 --> 00:17:11,949
every client that's connected scan

00:17:09,550 --> 00:17:14,380
indicates whatever data it's interested

00:17:11,949 --> 00:17:16,720
in and it's gets notifications of

00:17:14,380 --> 00:17:20,170
whatever changed it will receive all

00:17:16,720 --> 00:17:22,569
those events now you can have as many

00:17:20,170 --> 00:17:25,449
clients connected as you want someone

00:17:22,569 --> 00:17:28,300
makes a change and everyone else sees

00:17:25,449 --> 00:17:30,250
that change and even if they're editing

00:17:28,300 --> 00:17:34,740
something as long as the two edits are

00:17:30,250 --> 00:17:37,450
not an actual conflict like the current

00:17:34,740 --> 00:17:39,670
bank account balance for a client might

00:17:37,450 --> 00:17:42,100
be updated through an event and another

00:17:39,670 --> 00:17:44,679
user is changing their address well

00:17:42,100 --> 00:17:46,810
we're both related to a customer but

00:17:44,679 --> 00:17:49,780
it's not really a conflict because it's

00:17:46,810 --> 00:17:51,460
different item would be affected by

00:17:49,780 --> 00:17:53,980
different events different commands

00:17:51,460 --> 00:17:58,330
so that would still be perfectly fine to

00:17:53,980 --> 00:18:00,940
update so what does that look on the

00:17:58,330 --> 00:18:02,950
client side well we've got our views

00:18:00,940 --> 00:18:05,950
which is basically what the user sees

00:18:02,950 --> 00:18:07,659
they're typically done with react at

00:18:05,950 --> 00:18:10,270
least in our application that's done

00:18:07,659 --> 00:18:14,380
with react but that could be angular it

00:18:10,270 --> 00:18:18,370
could be some simple view library J

00:18:14,380 --> 00:18:20,590
mustache or something like that we've

00:18:18,370 --> 00:18:24,490
got Redux which is by far the most

00:18:20,590 --> 00:18:27,070
popular flux implementation and it has

00:18:24,490 --> 00:18:29,169
its store which is basically the current

00:18:27,070 --> 00:18:32,080
states of whatever data you are working

00:18:29,169 --> 00:18:34,870
with that gets updated by actions and

00:18:32,080 --> 00:18:38,200
those actions are updated in part by

00:18:34,870 --> 00:18:41,620
user actions in view and imparts by

00:18:38,200 --> 00:18:45,100
server actions from as a result of other

00:18:41,620 --> 00:18:47,320
users being pushed back to web socket

00:18:45,100 --> 00:18:49,110
API so because a really nice

00:18:47,320 --> 00:18:52,360
architecture would really clean

00:18:49,110 --> 00:18:54,669
redefines data flows which makes

00:18:52,360 --> 00:18:59,789
everything very predictable very

00:18:54,669 --> 00:19:03,850
performance and very easy to understand

00:18:59,789 --> 00:19:06,490
now I mentioned projections and a lot of

00:19:03,850 --> 00:19:09,039
time when people start working with

00:19:06,490 --> 00:19:11,799
events or systems projection caused some

00:19:09,039 --> 00:19:14,260
issues what is a projection how shoot it

00:19:11,799 --> 00:19:17,590
look how should you shape your

00:19:14,260 --> 00:19:20,169
projection where should you project well

00:19:17,590 --> 00:19:22,299
it really depends on your needs like

00:19:20,169 --> 00:19:27,419
I've got a map here it's a map of the

00:19:22,299 --> 00:19:30,130
world it's a Mercator projection and I

00:19:27,419 --> 00:19:32,529
at least I assume it's an accurate map I

00:19:30,130 --> 00:19:34,809
haven't actually checked that they've

00:19:32,529 --> 00:19:38,169
got another map of the world here

00:19:34,809 --> 00:19:41,020
basically exactly the same data this is

00:19:38,169 --> 00:19:43,450
a more white projection so they're very

00:19:41,020 --> 00:19:45,130
different projections based on the same

00:19:43,450 --> 00:19:47,919
day that because there are different

00:19:45,130 --> 00:19:50,049
needs if you flip back to the Mercator

00:19:47,919 --> 00:19:52,570
projection if you take a look at

00:19:50,049 --> 00:19:56,220
Greenland the big white blob at the top

00:19:52,570 --> 00:20:00,340
it looks about the same size as Africa

00:19:56,220 --> 00:20:03,460
turns out that's not the case the more

00:20:00,340 --> 00:20:05,140
white projection is specifically made so

00:20:03,460 --> 00:20:07,540
you can compare areas

00:20:05,140 --> 00:20:09,790
so you can see that Greenland is not

00:20:07,540 --> 00:20:13,080
smaller than Africa and reality it's

00:20:09,790 --> 00:20:15,760
about the size of the Arabian Peninsula

00:20:13,080 --> 00:20:18,250
so what's the point of this map then

00:20:15,760 --> 00:20:20,410
well it turns out for navigation if

00:20:18,250 --> 00:20:22,450
you're moving the ship across the ocean

00:20:20,410 --> 00:20:24,700
ricotta projection is really nice

00:20:22,450 --> 00:20:27,610
because if you draw a straight line on a

00:20:24,700 --> 00:20:29,110
Mercator projection map you get a

00:20:27,610 --> 00:20:31,240
straight compass heading and if you

00:20:29,110 --> 00:20:32,650
follow that compass heading assuming

00:20:31,240 --> 00:20:34,090
there is no drift down wind than

00:20:32,650 --> 00:20:37,480
anything which you'll end up exactly

00:20:34,090 --> 00:20:39,010
where you want it to go and with the

00:20:37,480 --> 00:20:41,620
mall wide projection that's not the case

00:20:39,010 --> 00:20:44,860
so different projections based on the

00:20:41,620 --> 00:20:47,050
same data for different needs so it's

00:20:44,860 --> 00:20:49,210
actually fine if you want to start

00:20:47,050 --> 00:20:51,900
projecting out data and you're going to

00:20:49,210 --> 00:20:55,690
project it out in many many different

00:20:51,900 --> 00:20:58,090
shapes depending on your needs and the

00:20:55,690 --> 00:21:00,550
good thing with events or system the

00:20:58,090 --> 00:21:04,090
source of truth is not the projections

00:21:00,550 --> 00:21:06,910
the projections are just read only view

00:21:04,090 --> 00:21:10,210
of whatever the current state the source

00:21:06,910 --> 00:21:12,100
of truth is the stored events so if you

00:21:10,210 --> 00:21:14,320
come up with a new projection you need

00:21:12,100 --> 00:21:17,110
some time later well you can just create

00:21:14,320 --> 00:21:19,540
it based on all the store at events you

00:21:17,110 --> 00:21:21,460
just reread them again and create a new

00:21:19,540 --> 00:21:23,920
projection so you can throw away your

00:21:21,460 --> 00:21:29,670
projections and basically rebuild all of

00:21:23,920 --> 00:21:32,950
that whenever you want to so what does

00:21:29,670 --> 00:21:35,430
the Redux coat look like on the clients

00:21:32,950 --> 00:21:39,970
I've got there a simple example and you

00:21:35,430 --> 00:21:42,490
basically see redux producer which takes

00:21:39,970 --> 00:21:45,730
all the incoming actions like the one I

00:21:42,490 --> 00:21:48,580
see previously and it checks the type

00:21:45,730 --> 00:21:53,230
and it decides how it should handle the

00:21:48,580 --> 00:21:55,210
type by default it kind of says well the

00:21:53,230 --> 00:21:57,070
default action at the bottom I don't

00:21:55,210 --> 00:21:58,960
know anything to do about this action so

00:21:57,070 --> 00:22:01,630
I'm just going to return the state s is

00:21:58,960 --> 00:22:03,340
but in this case for the permit edit or

00:22:01,630 --> 00:22:06,190
permit drafted commands it actually

00:22:03,340 --> 00:22:08,950
knows how to handle those and does

00:22:06,190 --> 00:22:12,190
something and now this only handles the

00:22:08,950 --> 00:22:14,320
case of permits the collection of

00:22:12,190 --> 00:22:17,540
permits it doesn't worry about how to

00:22:14,320 --> 00:22:19,440
handle individual permits

00:22:17,540 --> 00:22:22,080
individual permits are done by a

00:22:19,440 --> 00:22:24,810
different producer so it knows if a

00:22:22,080 --> 00:22:28,160
single permits is drafted how the state

00:22:24,810 --> 00:22:31,380
inside of that permit actually changes

00:22:28,160 --> 00:22:35,340
now redux basically combines all those

00:22:31,380 --> 00:22:38,130
different producers into one complex

00:22:35,340 --> 00:22:40,590
tree and every time an action is fired

00:22:38,130 --> 00:22:45,090
that tree gets a chance to handle that

00:22:40,590 --> 00:22:48,210
and it decides how the current state

00:22:45,090 --> 00:22:50,520
should be so even though the terminology

00:22:48,210 --> 00:22:53,880
is very different than used in the vents

00:22:50,520 --> 00:22:56,820
or existence in reality it's really the

00:22:53,880 --> 00:22:58,890
same thing an action in redux is an

00:22:56,820 --> 00:23:01,200
event in the events or system it's

00:22:58,890 --> 00:23:03,870
something that happens we projected in

00:23:01,200 --> 00:23:07,950
the events or system well we reduce it

00:23:03,870 --> 00:23:12,510
in Redux end result is we've got some

00:23:07,950 --> 00:23:16,830
state to work with so how do we wire

00:23:12,510 --> 00:23:21,270
things up well inside of our react

00:23:16,830 --> 00:23:22,860
application we have a start-up so at the

00:23:21,270 --> 00:23:25,410
bottom you can see that react don't

00:23:22,860 --> 00:23:27,570
render which actually should be react do

00:23:25,410 --> 00:23:30,330
not render this code is slightly old

00:23:27,570 --> 00:23:32,790
sorry about that and you see that our

00:23:30,330 --> 00:23:35,400
application the app elements is wrapped

00:23:32,790 --> 00:23:39,450
inside the provider that provider is

00:23:35,400 --> 00:23:42,960
provided by reacts redux which basically

00:23:39,450 --> 00:23:45,180
connects Redux to react like I mentioned

00:23:42,960 --> 00:23:47,940
before Redux could be used anywhere

00:23:45,180 --> 00:23:49,830
without react but that connects it to up

00:23:47,940 --> 00:23:53,160
and that makes all the day they're

00:23:49,830 --> 00:23:59,310
stored inside our redux store available

00:23:53,160 --> 00:24:03,240
for all react components next thing is

00:23:59,310 --> 00:24:05,670
ok now we need that components to have

00:24:03,240 --> 00:24:09,480
data so one of the first components I

00:24:05,670 --> 00:24:12,500
showed that list of permits needs to

00:24:09,480 --> 00:24:16,170
have the list of permits to display and

00:24:12,500 --> 00:24:19,020
you do let using another thing react

00:24:16,170 --> 00:24:21,390
Redux provides the Kinect function which

00:24:19,020 --> 00:24:24,240
Bailey says will connect up some data

00:24:21,390 --> 00:24:27,780
from the store what well there's a map

00:24:24,240 --> 00:24:30,300
states to props so it map state from the

00:24:27,780 --> 00:24:32,850
store to properties in we have

00:24:30,300 --> 00:24:36,420
and in this case it just says well met

00:24:32,850 --> 00:24:38,880
all the permits from that store into the

00:24:36,420 --> 00:24:43,140
properties of the components so it has

00:24:38,880 --> 00:24:45,270
its list of permits the other thing the

00:24:43,140 --> 00:24:49,050
original component had was that draft

00:24:45,270 --> 00:24:51,900
permit commands so it needs to know how

00:24:49,050 --> 00:24:53,700
to handle that and the second function

00:24:51,900 --> 00:24:56,090
here on the slide is actually intended

00:24:53,700 --> 00:24:59,400
for that so map dates patch to props

00:24:56,090 --> 00:25:01,980
dispatching means dispatch in action so

00:24:59,400 --> 00:25:06,510
some thing in the back end producers

00:25:01,980 --> 00:25:08,730
api's etc get to handle that so with

00:25:06,510 --> 00:25:11,760
this we've basically completed the

00:25:08,730 --> 00:25:14,460
circle we've got reacts components which

00:25:11,760 --> 00:25:16,800
are completely unaware of how the day

00:25:14,460 --> 00:25:20,040
that works they are purely focused on

00:25:16,800 --> 00:25:22,860
rendering we've got Redux which is all

00:25:20,040 --> 00:25:26,100
about the client-side state which is fed

00:25:22,860 --> 00:25:29,010
on the one hand by user actions on the

00:25:26,100 --> 00:25:32,070
other hand by push notifications from

00:25:29,010 --> 00:25:34,770
the server you've got the server which

00:25:32,070 --> 00:25:37,620
stores all the events resulting in the

00:25:34,770 --> 00:25:39,960
commands being sent in a database and

00:25:37,620 --> 00:25:43,410
projects those out into a rig model or

00:25:39,960 --> 00:25:48,140
whatever shape we need and we've got a

00:25:43,410 --> 00:25:51,480
very scalable and very nice architektur

00:25:48,140 --> 00:25:55,350
so with that I'm slightly out of time

00:25:51,480 --> 00:25:57,300
but at the end of my presentation all my

00:25:55,350 --> 00:25:59,970
slides will be a SlideShare later this

00:25:57,300 --> 00:26:02,400
afternoon so on the right hand bottom

00:25:59,970 --> 00:26:04,830
you can see my Twitter accounts if you

00:26:02,400 --> 00:26:06,960
just check my Twitter accounts somewhere

00:26:04,830 --> 00:26:09,420
at the end of the afternoon you'll find

00:26:06,960 --> 00:26:12,660
a tweak there pointing to the slides and

00:26:09,420 --> 00:26:15,540
slide share and with that I would like

00:26:12,660 --> 00:26:18,620
to thank you for inviting me and

00:26:15,540 --> 00:26:18,620

YouTube URL: https://www.youtube.com/watch?v=LrkXWj9zxsU


