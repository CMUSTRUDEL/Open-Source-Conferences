Title: MountainWest JavaScript 2014 - Traces of Errors: Getting Better JavaScript Stacktraces
Publication date: 2020-01-24
Playlist: MountainWest JavaScript 2014
Description: 
	By Todd Gardner

Let's write better JavaScript. Let's find and debug our errors. The first step is to understand them. We'll discuss JavaScript Error object in detail: How to use errors, how to catch them, and how to understand them. The asynchronous capabilities of JavaScript pose challenges to error handling that confuse many developers, so let's talk about some techniques to deal with errors across asynchronous boundaries. I'll also share some tips to improve the maintenance of your JavaScript applications.
Let's fix our bugs!

Help us caption & translate this video!

http://amara.org/v/FG26/
Captions: 
	00:00:09,000 --> 00:00:22,519
[Music]

00:00:25,390 --> 00:00:32,630
all right oh honey he talks without

00:00:28,810 --> 00:00:34,700
caffeine everybody hopefully there's not

00:00:32,630 --> 00:00:37,280
too much overlap with jaemin's talk I'm

00:00:34,700 --> 00:00:43,160
gonna be talking about air handling on

00:00:37,280 --> 00:00:45,350
the client side so we've seen a lot of

00:00:43,160 --> 00:00:47,540
really cool JavaScript technology last

00:00:45,350 --> 00:00:49,160
two days but this afternoon I'd like to

00:00:47,540 --> 00:00:51,710
talk a little bit about what do we do

00:00:49,160 --> 00:00:53,540
when it all falls on its face this talk

00:00:51,710 --> 00:00:56,480
is called traces of airs and it's about

00:00:53,540 --> 00:00:58,490
first actually getting stack traces in

00:00:56,480 --> 00:01:01,280
your client-side code and then getting

00:00:58,490 --> 00:01:05,690
better stack traces but why is that

00:01:01,280 --> 00:01:07,369
important because whenever you're trying

00:01:05,690 --> 00:01:09,530
to show something awesome to your

00:01:07,369 --> 00:01:12,530
customers to your clients to your users

00:01:09,530 --> 00:01:14,450
or to a roomful of developers inevitably

00:01:12,530 --> 00:01:16,640
a large percentage of the time it will

00:01:14,450 --> 00:01:21,590
blow up right in front of you and will

00:01:16,640 --> 00:01:23,240
blow up in very unexpected ways that may

00:01:21,590 --> 00:01:26,860
or may not tell you anything interesting

00:01:23,240 --> 00:01:26,860
about what happened or what went wrong

00:01:27,069 --> 00:01:37,720
you can fix this one I get this all the

00:01:30,440 --> 00:01:40,880
time so errors are inevitable

00:01:37,720 --> 00:01:42,979
they're usually costly often

00:01:40,880 --> 00:01:44,780
embarrassing but if we take a little bit

00:01:42,979 --> 00:01:47,119
of time to instrument our client-side

00:01:44,780 --> 00:01:48,819
code and expect that errors will happen

00:01:47,119 --> 00:01:51,560
and get better information about them

00:01:48,819 --> 00:01:57,789
hopefully we can feel a little bit less

00:01:51,560 --> 00:01:57,789
like and maybe a little bit more like

00:01:59,009 --> 00:02:04,659
so let's talk a little bit bit about air

00:02:02,020 --> 00:02:06,610
handling in the client side I'm Todd

00:02:04,659 --> 00:02:09,190
Gardner I'm from Minneapolis Minnesota

00:02:06,610 --> 00:02:12,580
so it's way warmer here than where I'm

00:02:09,190 --> 00:02:14,799
from I'm a co-founder of a company

00:02:12,580 --> 00:02:17,349
called Trek juice which is a client-side

00:02:14,799 --> 00:02:19,870
air handler if you're looking for one I

00:02:17,349 --> 00:02:21,160
tweet it Tod H Gardner sometimes angrily

00:02:19,870 --> 00:02:23,769
about JavaScript things that I don't

00:02:21,160 --> 00:02:24,819
like so feel free to heckle me there all

00:02:23,769 --> 00:02:27,190
right so here's what I want to talk

00:02:24,819 --> 00:02:29,230
about today first some basics about the

00:02:27,190 --> 00:02:33,130
JavaScript error object in the browser

00:02:29,230 --> 00:02:35,620
and how it was implemented over and over

00:02:33,130 --> 00:02:37,660
and over again and then we'll talk about

00:02:35,620 --> 00:02:39,569
the paths that airs take through

00:02:37,660 --> 00:02:42,220
client-side code which are sometimes

00:02:39,569 --> 00:02:44,230
unexpected to people who don't primarily

00:02:42,220 --> 00:02:45,880
program in JavaScript and then we'll

00:02:44,230 --> 00:02:47,890
talk about some custom paths that we can

00:02:45,880 --> 00:02:51,400
force our errors down to get some better

00:02:47,890 --> 00:02:55,510
information about them so I'm good all

00:02:51,400 --> 00:02:57,090
right so let's start with mdn what does

00:02:55,510 --> 00:02:58,989
it have to say about the error object

00:02:57,090 --> 00:03:01,750
it's pretty straightforward

00:02:58,989 --> 00:03:03,459
we get it instances of errors by

00:03:01,750 --> 00:03:05,319
instantiating through the air function

00:03:03,459 --> 00:03:07,900
we can pass a few things to it and get

00:03:05,319 --> 00:03:10,090
some interesting things out things we'd

00:03:07,900 --> 00:03:11,769
expect in any you know modern language

00:03:10,090 --> 00:03:13,840
you know the message where it came from

00:03:11,769 --> 00:03:17,500
the stacktrace about what was executing

00:03:13,840 --> 00:03:19,000
at the time this is easy enough like why

00:03:17,500 --> 00:03:20,730
aren't why are we even caring about this

00:03:19,000 --> 00:03:24,040
why did you guys invite me to talk

00:03:20,730 --> 00:03:27,730
because it's not that simple it is not

00:03:24,040 --> 00:03:30,160
that simple Ben Cisco says no this is

00:03:27,730 --> 00:03:34,870
what the air object in the client-side

00:03:30,160 --> 00:03:39,579
really looks like it's terrible this is

00:03:34,870 --> 00:03:41,319
these are all infuriating despairing

00:03:39,579 --> 00:03:42,760
things that you'll encounter when trying

00:03:41,319 --> 00:03:45,400
to actually work with an air object

00:03:42,760 --> 00:03:49,989
across the browsers that real people use

00:03:45,400 --> 00:03:53,650
not just latest Chrome it will make you

00:03:49,989 --> 00:03:55,900
despair and will make you feel like the

00:03:53,650 --> 00:03:58,169
whole Internet is broken and nobody

00:03:55,900 --> 00:03:58,169
cares

00:04:02,240 --> 00:04:10,530
so let's take a look I got a little demo

00:04:07,370 --> 00:04:12,959
so I have several demos today umm

00:04:10,530 --> 00:04:15,480
they're all vanilla Jas not doing

00:04:12,959 --> 00:04:17,579
anything fancy here the only thing that

00:04:15,480 --> 00:04:20,970
I really bring in here is this little

00:04:17,579 --> 00:04:22,830
utility library that does something very

00:04:20,970 --> 00:04:25,650
boring and ugly so I'm not going to

00:04:22,830 --> 00:04:28,020
bother showing you the code it takes an

00:04:25,650 --> 00:04:29,730
object and an element and print

00:04:28,020 --> 00:04:31,889
recursively prints every property on

00:04:29,730 --> 00:04:35,729
that object into it just so we can see

00:04:31,889 --> 00:04:37,950
what's going on in this case I'm just

00:04:35,729 --> 00:04:40,440
gonna create a new error object with a

00:04:37,950 --> 00:04:42,030
simple message and I'm gonna print out

00:04:40,440 --> 00:04:46,919
what that error looks like into the Dom

00:04:42,030 --> 00:04:51,150
so we can take a look at it let's start

00:04:46,919 --> 00:04:54,600
with Firefox here's what the error

00:04:51,150 --> 00:04:55,830
object looks like we got it looks pretty

00:04:54,600 --> 00:04:57,810
close to what mdn told us it was going

00:04:55,830 --> 00:05:00,360
to be right we have our name or message

00:04:57,810 --> 00:05:03,240
or file number a line number a column

00:05:00,360 --> 00:05:06,390
number that's that's a zero which seems

00:05:03,240 --> 00:05:07,979
kind of weird and a stack trace so

00:05:06,390 --> 00:05:13,520
that's cool well let's take a look at

00:05:07,979 --> 00:05:17,640
Chrome what's Chrome look like well

00:05:13,520 --> 00:05:21,690
that's not the same that's not the same

00:05:17,640 --> 00:05:23,280
at all it looks like Chrome treats the

00:05:21,690 --> 00:05:25,200
air object particularly the stack trace

00:05:23,280 --> 00:05:26,280
is like a catch-all of like all the

00:05:25,200 --> 00:05:28,160
information you do going to be is in

00:05:26,280 --> 00:05:30,479
this formatted string and nowhere else

00:05:28,160 --> 00:05:32,310
there's the name of the air air and

00:05:30,479 --> 00:05:34,860
example error and the column and the

00:05:32,310 --> 00:05:36,419
line numbers are all in there whereas

00:05:34,860 --> 00:05:38,460
Firefox promoted those things to

00:05:36,419 --> 00:05:41,760
first-class properties on the object

00:05:38,460 --> 00:05:42,990
itself alright so so I mean all the

00:05:41,760 --> 00:05:44,460
information is there so that's that's

00:05:42,990 --> 00:05:50,610
still fine I guess well what about

00:05:44,460 --> 00:05:56,190
Internet Explorer so we look at air

00:05:50,610 --> 00:05:57,570
Explorer and we get even less we don't

00:05:56,190 --> 00:05:59,460
we have we have no we don't know what

00:05:57,570 --> 00:06:01,979
happened at all we have a message unless

00:05:59,460 --> 00:06:04,530
you are very very verbose with your

00:06:01,979 --> 00:06:05,430
error messages I don't know that you

00:06:04,530 --> 00:06:09,270
could ever figure out where this was

00:06:05,430 --> 00:06:10,710
coming from well you know maybe there's

00:06:09,270 --> 00:06:13,770
some other magic going on here maybe

00:06:10,710 --> 00:06:17,250
throw does some things so let's try like

00:06:13,770 --> 00:06:20,039
adding that so in addition to just a

00:06:17,250 --> 00:06:28,349
plain ol air we're gonna try throwing an

00:06:20,039 --> 00:06:32,010
error and then we'll immediately catch

00:06:28,349 --> 00:06:34,140
it and we'll just do the same thing and

00:06:32,010 --> 00:06:37,200
we'll just print out its properties so

00:06:34,140 --> 00:06:41,510
we can compare the two let's print this

00:06:37,200 --> 00:06:41,510
out into j/s air thrown

00:06:48,910 --> 00:06:56,320
and this one it will be a throne air

00:06:53,130 --> 00:07:06,730
everybody see what I'm just doing okay

00:06:56,320 --> 00:07:08,560
oh thank you so let's try again alright

00:07:06,730 --> 00:07:13,840
so now in Firefox we can compare a

00:07:08,560 --> 00:07:15,630
throne and a nun throne air and what's

00:07:13,840 --> 00:07:17,950
different

00:07:15,630 --> 00:07:20,820
apparently the act of throwing in

00:07:17,950 --> 00:07:24,070
Firefox generates a column number I

00:07:20,820 --> 00:07:25,780
don't know why it seems to me that the

00:07:24,070 --> 00:07:27,730
column number and the row number are you

00:07:25,780 --> 00:07:34,180
know parallel concepts and should behave

00:07:27,730 --> 00:07:38,110
the same but they don't let's take a

00:07:34,180 --> 00:07:40,240
look at chrome this is the most sane

00:07:38,110 --> 00:07:41,010
example today because they're exactly

00:07:40,240 --> 00:07:43,570
the same

00:07:41,010 --> 00:07:46,480
throw does actually nothing at all in

00:07:43,570 --> 00:07:49,930
chrome I have the exact same object does

00:07:46,480 --> 00:07:52,810
not change the behavior but it in an

00:07:49,930 --> 00:07:55,960
Explorer an error is really a worthless

00:07:52,810 --> 00:07:57,730
thing until you throw it because it's

00:07:55,960 --> 00:07:58,390
the act of throwing that generates the

00:07:57,730 --> 00:08:01,780
stacktrace

00:07:58,390 --> 00:08:05,050
in area net explorer 11 so that's super

00:08:01,780 --> 00:08:08,770
but notice that yet again if you look at

00:08:05,050 --> 00:08:10,780
the stack trace in chrome versus the

00:08:08,770 --> 00:08:13,690
stack trace in internet explorer we had

00:08:10,780 --> 00:08:21,550
yet another format of what stack traces

00:08:13,690 --> 00:08:25,300
look like so at this point we might be a

00:08:21,550 --> 00:08:30,660
little confused or where we might be a

00:08:25,300 --> 00:08:34,090
little freaked out it's gonna get worse

00:08:30,660 --> 00:08:36,729
so right along with the instabilities

00:08:34,090 --> 00:08:38,410
that occur in how browsers chose to

00:08:36,729 --> 00:08:39,760
implement the air object there's

00:08:38,410 --> 00:08:41,260
differences in how they implemented

00:08:39,760 --> 00:08:43,930
their global air handler

00:08:41,260 --> 00:08:47,830
so as Jamin alluded to in the previous

00:08:43,930 --> 00:08:49,570
talk the simplest way to capture airs is

00:08:47,830 --> 00:08:51,820
just by attaching to the window on air

00:08:49,570 --> 00:08:53,170
if a browser gets catches an air from

00:08:51,820 --> 00:08:55,060
your code and it doesn't know what else

00:08:53,170 --> 00:08:57,940
to do with it it tries to pass it to

00:08:55,060 --> 00:08:59,230
this function but every browser has a

00:08:57,940 --> 00:09:01,089
different shape of what an error looks

00:08:59,230 --> 00:09:02,770
like and it has a little bit different

00:09:01,089 --> 00:09:08,890
behavior of what window honored

00:09:02,770 --> 00:09:11,380
so let's take a look at that so here's

00:09:08,890 --> 00:09:13,330
another very simple example and in this

00:09:11,380 --> 00:09:15,250
one I'm just attaching a function to

00:09:13,330 --> 00:09:19,420
window on air and I'm printing out

00:09:15,250 --> 00:09:21,520
whatever it happens to give us and then

00:09:19,420 --> 00:09:22,839
I'm just global e throwing in air just

00:09:21,520 --> 00:09:23,850
to make sure this whole thing blows up

00:09:22,839 --> 00:09:30,420
on me

00:09:23,850 --> 00:09:35,980
so in Firefox we take a look at it and

00:09:30,420 --> 00:09:39,510
it's pretty worthless huh I get a global

00:09:35,980 --> 00:09:43,300
air happened in this file on line 31

00:09:39,510 --> 00:09:44,970
which looks a lot like a is undefined

00:09:43,300 --> 00:09:51,339
scripts j/s line 1

00:09:44,970 --> 00:09:52,630
what about Internet Explorer let it be

00:09:51,339 --> 00:09:56,230
said that Internet Explorer gives us

00:09:52,630 --> 00:09:57,790
more information than Firefox because we

00:09:56,230 --> 00:10:00,310
got one more piece of information we got

00:09:57,790 --> 00:10:01,930
the column number I don't know what good

00:10:00,310 --> 00:10:06,399
a column number really does in debugging

00:10:01,930 --> 00:10:09,390
your air but it's more information well

00:10:06,399 --> 00:10:09,390
let's take a look at Chrome

00:10:15,070 --> 00:10:20,140
now there's some magic happening here

00:10:16,510 --> 00:10:21,880
there's something wonderful because you

00:10:20,140 --> 00:10:23,860
see we get the basic stuff that we got

00:10:21,880 --> 00:10:26,530
before the air the line number of column

00:10:23,860 --> 00:10:30,610
numbers file but we also get that fifth

00:10:26,530 --> 00:10:33,940
property we get the air itself and with

00:10:30,610 --> 00:10:38,800
it it's stacktrace and that is amazing

00:10:33,940 --> 00:10:41,140
and it's sad it's amazing that we had

00:10:38,800 --> 00:10:43,750
now for the first time have real stack

00:10:41,140 --> 00:10:46,510
traces and real airs simply by attaching

00:10:43,750 --> 00:10:48,520
to the global air handler and it's sad

00:10:46,510 --> 00:10:51,220
because it took fifteen years of browser

00:10:48,520 --> 00:10:54,670
technology to realize to pass the air to

00:10:51,220 --> 00:10:56,530
the global air handler why did it take

00:10:54,670 --> 00:10:59,190
so long to figure out hey maybe we

00:10:56,530 --> 00:10:59,190
should do this

00:11:00,360 --> 00:11:07,660
that said chrome is awesome for doing

00:11:05,410 --> 00:11:09,940
that I expect Firefox will catch up

00:11:07,660 --> 00:11:12,040
shortly but we still have to deal with

00:11:09,940 --> 00:11:14,290
Internet Explorer we still have to deal

00:11:12,040 --> 00:11:16,990
with other random device specific

00:11:14,290 --> 00:11:22,180
browsers definitely have to deal with IE

00:11:16,990 --> 00:11:26,250
11 probably 10 unfortunately 9 I'm sorry

00:11:22,180 --> 00:11:26,250
8 and I pity you 7

00:11:35,440 --> 00:11:42,250
all right so we talked about the

00:11:40,480 --> 00:11:43,750
JavaScript air object and the global air

00:11:42,250 --> 00:11:46,270
handler and how it was very

00:11:43,750 --> 00:11:48,220
inconsistently implemented across many

00:11:46,270 --> 00:11:50,200
different browsers and note that all of

00:11:48,220 --> 00:11:52,720
those were the latest and greatest that

00:11:50,200 --> 00:11:55,990
was latest chrome Laius Firefox in I 11

00:11:52,720 --> 00:11:59,290
we go back in time that gets weirder and

00:11:55,990 --> 00:12:01,270
weirder and harder and harder so let's

00:11:59,290 --> 00:12:03,520
take a look at how airs move through

00:12:01,270 --> 00:12:07,030
JavaScript applications so we all have

00:12:03,520 --> 00:12:09,820
the same understanding of that so here's

00:12:07,030 --> 00:12:11,530
a real simple example at some point the

00:12:09,820 --> 00:12:13,540
native code of the browser decides to

00:12:11,530 --> 00:12:16,150
invoke your function your app calls

00:12:13,540 --> 00:12:17,410
initialize whatever which calls other

00:12:16,150 --> 00:12:20,320
functions and there's a whole stack of

00:12:17,410 --> 00:12:23,080
things that happen and at some point an

00:12:20,320 --> 00:12:25,270
error happens and it bubbles back up

00:12:23,080 --> 00:12:28,000
through the call stack eventually

00:12:25,270 --> 00:12:32,800
landing on the native code was the

00:12:28,000 --> 00:12:39,460
native code do anybody know what the

00:12:32,800 --> 00:12:40,510
native code does window on air doesn't

00:12:39,460 --> 00:12:41,860
know where else to do with it at that

00:12:40,510 --> 00:12:44,950
point if it made it all the way back to

00:12:41,860 --> 00:12:46,810
the native code nobody handled it Baz

00:12:44,950 --> 00:12:48,790
didn't catch it bar didn't catch it

00:12:46,810 --> 00:12:50,200
foo didn't catch it it bubbles all the

00:12:48,790 --> 00:12:52,270
way out to native native doesn't know

00:12:50,200 --> 00:12:53,890
what to do with it says hate is there

00:12:52,270 --> 00:12:56,950
anything here on window on air to catch

00:12:53,890 --> 00:13:03,130
this thing as a last resort and we can

00:12:56,950 --> 00:13:05,170
see this in the demo so here's another

00:13:03,130 --> 00:13:07,930
example and this one's going to get a

00:13:05,170 --> 00:13:10,090
little longer let's start at the bottom

00:13:07,930 --> 00:13:12,190
so I've attached a window on air handler

00:13:10,090 --> 00:13:13,600
that does the same thing before is I

00:13:12,190 --> 00:13:14,860
catch you know the arguments that come

00:13:13,600 --> 00:13:17,020
in through window on air and I print

00:13:14,860 --> 00:13:22,120
them out and I'm invoking a function

00:13:17,020 --> 00:13:23,550
called outer collar outer collar is I'm

00:13:22,120 --> 00:13:25,960
just trying to do something that

00:13:23,550 --> 00:13:29,560
resembles what a real live production

00:13:25,960 --> 00:13:31,780
app would do is it's calling an inline

00:13:29,560 --> 00:13:34,300
function maybe this is like a map or a

00:13:31,780 --> 00:13:36,640
filter or some sort of like you know Map

00:13:34,300 --> 00:13:39,280
Reduce kind of function that does some

00:13:36,640 --> 00:13:40,750
business logic for you and as part of

00:13:39,280 --> 00:13:43,420
that we're calling with this function

00:13:40,750 --> 00:13:46,030
trigger air trigger air is the thing

00:13:43,420 --> 00:13:47,410
that actually triggers the air on every

00:13:46,030 --> 00:13:48,880
step of the way I'm try catching and

00:13:47,410 --> 00:13:49,329
printing out the properties of it and

00:13:48,880 --> 00:13:50,949
then

00:13:49,329 --> 00:13:53,470
throwing it just so that we can see what

00:13:50,949 --> 00:13:54,699
the air looks like at each step we can

00:13:53,470 --> 00:13:57,749
see what it looks like on the innermost

00:13:54,699 --> 00:14:00,850
trigger inside the anonymous function

00:13:57,749 --> 00:14:03,839
inside the outer caller eventually

00:14:00,850 --> 00:14:03,839
landing our window on there

00:14:07,139 --> 00:14:11,949
so here's it here's that an example the

00:14:09,699 --> 00:14:13,749
airing function itself prints the air

00:14:11,949 --> 00:14:16,660
and traverses up through the inner

00:14:13,749 --> 00:14:18,819
caller in the outer caller and then

00:14:16,660 --> 00:14:23,079
loses everything cool about it and drops

00:14:18,819 --> 00:14:24,670
on the global air handler note that we

00:14:23,079 --> 00:14:26,350
have the stack trace at each level the

00:14:24,670 --> 00:14:28,660
secretary isn't built as it traverses

00:14:26,350 --> 00:14:30,850
the lowest level has the stack trace and

00:14:28,660 --> 00:14:32,949
we can kind of reason about it a little

00:14:30,850 --> 00:14:36,119
bit here so let's kind of compare this

00:14:32,949 --> 00:14:39,429
line by line so here I have a stack

00:14:36,119 --> 00:14:41,410
going off on trigger air line 43 so

00:14:39,429 --> 00:14:43,049
what's happened forty three we can see

00:14:41,410 --> 00:14:46,869
that's where the air is being thrown

00:14:43,049 --> 00:14:49,559
then something weird happens we have two

00:14:46,869 --> 00:14:52,929
lines of outer collar here on

00:14:49,559 --> 00:14:55,379
fifty-seven and fifty four what's

00:14:52,929 --> 00:14:57,399
happening on those lines

00:14:55,379 --> 00:15:00,249
fifty-seven is the call to trigger air

00:14:57,399 --> 00:15:03,489
and 54 is where we're invoking this

00:15:00,249 --> 00:15:05,949
inner function now Firefox and all the

00:15:03,489 --> 00:15:07,779
other browsers as well they don't know

00:15:05,949 --> 00:15:10,480
what to call this thing there's a

00:15:07,779 --> 00:15:12,790
function here and it's inside inner

00:15:10,480 --> 00:15:16,299
collar but it doesn't have a name it's

00:15:12,790 --> 00:15:18,669
an anonymous function and anonymous

00:15:16,299 --> 00:15:20,980
functions if you take one thing away

00:15:18,669 --> 00:15:23,709
from my talk I want it to be this

00:15:20,980 --> 00:15:25,929
anonymous functions kill debug ability

00:15:23,709 --> 00:15:27,939
of your stack traces because you don't

00:15:25,929 --> 00:15:29,739
know what that function is anonymous

00:15:27,939 --> 00:15:30,819
functions get passed around you don't

00:15:29,739 --> 00:15:33,339
know where they are when they get

00:15:30,819 --> 00:15:36,449
invoked a lot of the time so it doesn't

00:15:33,339 --> 00:15:42,610
hurt at all to just give things names

00:15:36,449 --> 00:15:45,040
like inner collar now we can reason

00:15:42,610 --> 00:15:46,809
about this much better inner collar is

00:15:45,040 --> 00:15:49,689
kind of a controlled example here this

00:15:46,809 --> 00:15:51,540
could be in the case of the react talk

00:15:49,689 --> 00:15:55,179
yesterday that this could have been

00:15:51,540 --> 00:15:56,619
filter out Enter key presses as in the

00:15:55,179 --> 00:16:00,189
name of this anonymous function that got

00:15:56,619 --> 00:16:02,980
passed in or map one object on to

00:16:00,189 --> 00:16:04,720
another object using name

00:16:02,980 --> 00:16:07,300
for your for your functions gives you a

00:16:04,720 --> 00:16:09,430
better a better way to reason about what

00:16:07,300 --> 00:16:11,709
went wrong when you need to encounter a

00:16:09,430 --> 00:16:13,420
stack we've got something else weird

00:16:11,709 --> 00:16:15,010
happening here at the bottom I got a

00:16:13,420 --> 00:16:18,610
couple just anonymous functions

00:16:15,010 --> 00:16:19,930
executing on line 75 and 77 there's not

00:16:18,610 --> 00:16:23,079
a whole lot we can do about that

00:16:19,930 --> 00:16:26,290
75 is the original call and 77 is my

00:16:23,079 --> 00:16:28,389
self executing closure here but if we

00:16:26,290 --> 00:16:30,339
wanted to you know really be sure we had

00:16:28,389 --> 00:16:32,889
names we can give a name to our self

00:16:30,339 --> 00:16:36,250
executing closure as well and now we can

00:16:32,889 --> 00:16:38,709
see that main execute outer caller

00:16:36,250 --> 00:16:41,260
execute inner collar execute trigger

00:16:38,709 --> 00:16:43,420
error and this is a way better way to

00:16:41,260 --> 00:16:44,769
reason about what things went wrong in

00:16:43,420 --> 00:16:53,589
your application if you should encounter

00:16:44,769 --> 00:16:55,420
an error but this is not that different

00:16:53,589 --> 00:16:57,279
from any other language because we've

00:16:55,420 --> 00:16:58,990
just been talking about how synchronous

00:16:57,279 --> 00:17:00,579
JavaScript functions bubble errors

00:16:58,990 --> 00:17:02,620
between them when everything is running

00:17:00,579 --> 00:17:06,040
at the same time but that's not where

00:17:02,620 --> 00:17:10,650
it's hard the hard part about JavaScript

00:17:06,040 --> 00:17:10,650
is the asynchronous nature and callbacks

00:17:14,910 --> 00:17:19,530
so let's try this again with callbacks

00:17:19,709 --> 00:17:25,270
your your code at some point will invoke

00:17:23,319 --> 00:17:27,189
some native function it was gonna call

00:17:25,270 --> 00:17:28,690
add event listener or it's gonna call

00:17:27,189 --> 00:17:30,820
set interval or it's got call set

00:17:28,690 --> 00:17:32,620
timeout and it's gonna ask that native

00:17:30,820 --> 00:17:34,210
code that hey when something happens

00:17:32,620 --> 00:17:36,910
call me back

00:17:34,210 --> 00:17:38,590
do this other thing for me and then when

00:17:36,910 --> 00:17:39,760
that event happens the native code sure

00:17:38,590 --> 00:17:43,570
enough will call that function you

00:17:39,760 --> 00:17:45,220
passed but what happens when that

00:17:43,570 --> 00:17:47,230
function throws an error what happens

00:17:45,220 --> 00:17:49,210
when your click handler dies for some

00:17:47,230 --> 00:17:51,070
reason because the user didn't enter the

00:17:49,210 --> 00:17:53,530
input you expected or for whatever

00:17:51,070 --> 00:17:56,230
reason well a lot of the code that we

00:17:53,530 --> 00:17:57,730
write seems to expect that that native

00:17:56,230 --> 00:18:02,380
that error is just going to bubble right

00:17:57,730 --> 00:18:04,419
back to foo but it doesn't when that

00:18:02,380 --> 00:18:07,090
native code picked it back up foo wasn't

00:18:04,419 --> 00:18:09,250
executing any more fluid long since been

00:18:07,090 --> 00:18:10,960
destroyed and so the only place that

00:18:09,250 --> 00:18:13,840
that Nate the native code has to put it

00:18:10,960 --> 00:18:16,890
is to bring it back to window on air and

00:18:13,840 --> 00:18:16,890
we can see this happening too

00:18:19,350 --> 00:18:23,260
so here's an example that's starting to

00:18:21,670 --> 00:18:29,500
look a little bit more like a real

00:18:23,260 --> 00:18:31,809
application this time I have an app in

00:18:29,500 --> 00:18:34,120
my app has a few things on it it's got

00:18:31,809 --> 00:18:37,030
an initialize function where I'm wiring

00:18:34,120 --> 00:18:39,340
up some click handlers I have my click

00:18:37,030 --> 00:18:42,970
Handler itself that in this case will

00:18:39,340 --> 00:18:45,610
generate an error and then I built a an

00:18:42,970 --> 00:18:47,559
application-level on air handler and I

00:18:45,610 --> 00:18:49,419
could use this to like you know show the

00:18:47,559 --> 00:18:51,340
user a pop-up saying oops sorry and air

00:18:49,419 --> 00:18:53,169
happened or maybe I want to Ajax these

00:18:51,340 --> 00:18:55,750
calls back to the server or whatever I

00:18:53,169 --> 00:18:58,540
can I want to do with like a real error

00:18:55,750 --> 00:19:00,610
message or a real error object and I

00:18:58,540 --> 00:19:02,740
want to make sure that I get areas into

00:19:00,610 --> 00:19:05,950
my application air handler so I've just

00:19:02,740 --> 00:19:08,260
brute-force rapped my entire app in a

00:19:05,950 --> 00:19:13,360
try-catch handler forcing airs to on air

00:19:08,260 --> 00:19:16,419
and that should work right but just in

00:19:13,360 --> 00:19:18,790
case just in case we're going to attach

00:19:16,419 --> 00:19:22,140
a window on your hat handler so we'll

00:19:18,790 --> 00:19:22,140
spin up the app and call initialize

00:19:27,820 --> 00:19:35,710
so here's my app I'm a trigger an event

00:19:31,779 --> 00:19:38,139
and it dies and it hops right over my

00:19:35,710 --> 00:19:41,409
application air handler a try-catch

00:19:38,139 --> 00:19:43,929
didn't catch it it jumped right out of

00:19:41,409 --> 00:19:46,419
the on click handler and went to the

00:19:43,929 --> 00:19:48,100
global handler and we can see why right

00:19:46,419 --> 00:19:53,409
here in the stack trace which you can't

00:19:48,100 --> 00:19:56,590
see when I highlighted the only thing on

00:19:53,409 --> 00:19:58,869
the stack is on click the only thing

00:19:56,590 --> 00:20:01,840
there because it was the native code

00:19:58,869 --> 00:20:05,679
that invoked on click initialize didn't

00:20:01,840 --> 00:20:08,499
invoke on click when we attach this

00:20:05,679 --> 00:20:10,149
event here we ripped that on click

00:20:08,499 --> 00:20:12,190
function out of our application we

00:20:10,149 --> 00:20:14,080
passed it into the native code to call

00:20:12,190 --> 00:20:16,239
back so when the native code receives

00:20:14,080 --> 00:20:18,789
this event and calls here and the event

00:20:16,239 --> 00:20:20,950
throws out it doesn't throw out into

00:20:18,789 --> 00:20:22,479
this trycatch it's not there it's

00:20:20,950 --> 00:20:25,840
somewhere else it's embedded in the

00:20:22,479 --> 00:20:28,059
native code somewhere this is what I

00:20:25,840 --> 00:20:30,460
like to think of as this asynchronous

00:20:28,059 --> 00:20:32,440
boundary that exists in in JavaScript

00:20:30,460 --> 00:20:35,379
between things that attach events and

00:20:32,440 --> 00:20:37,239
things that receive events and errors do

00:20:35,379 --> 00:20:40,080
not move across that asynchronous

00:20:37,239 --> 00:20:40,080
boundary by default

00:20:48,040 --> 00:20:53,750
so we talked about the browser error

00:20:52,280 --> 00:20:55,550
object and we talked about the paths

00:20:53,750 --> 00:20:56,870
that it takes both through normal

00:20:55,550 --> 00:20:59,090
synchronous calls and through

00:20:56,870 --> 00:21:01,580
asynchronous calls so now I want to try

00:20:59,090 --> 00:21:06,680
and address this problem specifically of

00:21:01,580 --> 00:21:08,900
this asynchronous or this this

00:21:06,680 --> 00:21:10,580
asynchronous boundary that these that

00:21:08,900 --> 00:21:12,650
the paths have to cross and give one

00:21:10,580 --> 00:21:16,550
potential solution for how we can pass

00:21:12,650 --> 00:21:20,300
errors across it so let's take a look at

00:21:16,550 --> 00:21:22,280
some code again so I have a little

00:21:20,300 --> 00:21:24,530
helper that I wrote and I'd like to get

00:21:22,280 --> 00:21:26,960
your thoughts on it it's kind of

00:21:24,530 --> 00:21:28,100
terrible code but it was the easiest

00:21:26,960 --> 00:21:32,060
thing to do to solve this particular

00:21:28,100 --> 00:21:34,700
problem what I'm doing here is I'm

00:21:32,060 --> 00:21:36,880
monkey patching add eventlistener and

00:21:34,700 --> 00:21:38,930
I'm adding some functionality to it I'm

00:21:36,880 --> 00:21:41,510
capturing the original add event

00:21:38,930 --> 00:21:44,690
listener and then I'm redefining it on

00:21:41,510 --> 00:21:48,920
every element and the thing I'm adding

00:21:44,690 --> 00:21:50,690
to it is a third parameter so in

00:21:48,920 --> 00:21:52,490
addition to saying I want to listen to

00:21:50,690 --> 00:21:53,120
click events and pick get an onclick

00:21:52,490 --> 00:21:55,580
handler

00:21:53,120 --> 00:21:57,980
I'm also passing in an on-air handler

00:21:55,580 --> 00:21:59,330
that hey if you blow up I want you to

00:21:57,980 --> 00:22:02,990
call me back with this with this

00:21:59,330 --> 00:22:05,330
function and then the function that I

00:22:02,990 --> 00:22:07,460
pass in to the original add event

00:22:05,330 --> 00:22:09,710
listener isn't your callback function at

00:22:07,460 --> 00:22:12,620
all it's a little anonymous one that I

00:22:09,710 --> 00:22:16,340
wrote right here that tries to invoke

00:22:12,620 --> 00:22:19,580
your callback and if it fails tries to

00:22:16,340 --> 00:22:21,650
pass it to your on-air function and if

00:22:19,580 --> 00:22:26,600
not it just behaves exactly as it would

00:22:21,650 --> 00:22:29,500
before so if we add this to our little

00:22:26,600 --> 00:22:29,500
application here

00:22:39,960 --> 00:22:53,950
what this gives us is by simply adding

00:22:43,360 --> 00:22:56,740
on air to this line of code our demo now

00:22:53,950 --> 00:22:58,480
behaves as we expect and we get the air

00:22:56,740 --> 00:23:01,480
moving from where it was originally

00:22:58,480 --> 00:23:03,670
triggered directly to our application

00:23:01,480 --> 00:23:06,160
level air handler and not the global air

00:23:03,670 --> 00:23:08,710
handler now there there's some garbage

00:23:06,160 --> 00:23:11,500
that got left over here the stack trace

00:23:08,710 --> 00:23:14,350
is detecting this little trickery I

00:23:11,500 --> 00:23:16,630
played so on click is still on the stack

00:23:14,350 --> 00:23:19,140
as well as this anonymous function that

00:23:16,630 --> 00:23:21,910
I'd put in wrapped add eventlistener

00:23:19,140 --> 00:23:24,550
now if we wanted to get more clever we

00:23:21,910 --> 00:23:27,100
can get around this but this is

00:23:24,550 --> 00:23:29,440
reflecting that I've kind of added some

00:23:27,100 --> 00:23:31,240
glue this wrap event listener that this

00:23:29,440 --> 00:23:33,340
crossing that boundary for me and

00:23:31,240 --> 00:23:35,710
allowing me to pass these air objects

00:23:33,340 --> 00:23:38,050
back and forth now this is a pretty

00:23:35,710 --> 00:23:40,150
crude example right here where you'd

00:23:38,050 --> 00:23:42,040
have to manually specify an on on air

00:23:40,150 --> 00:23:44,260
handler every time but you could think

00:23:42,040 --> 00:23:45,640
about this in a way of maybe for your

00:23:44,260 --> 00:23:47,830
application on a whole

00:23:45,640 --> 00:23:50,140
you always want airs to go into a

00:23:47,830 --> 00:23:52,900
particular function and so rather than

00:23:50,140 --> 00:23:55,270
listening to window on air you can just

00:23:52,900 --> 00:23:59,440
override base types to always have

00:23:55,270 --> 00:24:02,290
on-air functions that does come with

00:23:59,440 --> 00:24:04,120
some risk not all browsers arc as

00:24:02,290 --> 00:24:09,390
accepting of monkey patching host

00:24:04,120 --> 00:24:09,390
functions but it's an option to consider

00:24:12,150 --> 00:24:17,820
so those are the three things that I

00:24:15,040 --> 00:24:20,500
wanted to talk about in general but

00:24:17,820 --> 00:24:23,770
there's a bunch more context that we can

00:24:20,500 --> 00:24:25,510
talk about in terms of client-side air

00:24:23,770 --> 00:24:29,740
handling and some things that I want you

00:24:25,510 --> 00:24:31,840
guys to know about so if you want to get

00:24:29,740 --> 00:24:33,670
more information about client-side air

00:24:31,840 --> 00:24:35,020
handling there's a couple of libraries

00:24:33,670 --> 00:24:36,850
that you should really look at first is

00:24:35,020 --> 00:24:38,710
stack trace guess this has been around

00:24:36,850 --> 00:24:41,020
for quite some time and this solves a

00:24:38,710 --> 00:24:42,340
particular problem the thing that stack

00:24:41,020 --> 00:24:44,200
trace GS is trying to solve is to

00:24:42,340 --> 00:24:47,290
normalize the format of the stack trace

00:24:44,200 --> 00:24:49,030
as we saw in the earlier example every

00:24:47,290 --> 00:24:51,190
browser structured it a little bit

00:24:49,030 --> 00:24:53,350
differently and that pattern will

00:24:51,190 --> 00:24:55,120
continue as we look into opera as we

00:24:53,350 --> 00:24:57,340
look into Android browser as we look

00:24:55,120 --> 00:24:58,870
into other weird browsers they all have

00:24:57,340 --> 00:25:01,630
a slightly different format of their

00:24:58,870 --> 00:25:03,220
stacktrace stacktrace will try and

00:25:01,630 --> 00:25:04,539
normalize that on the client-side so

00:25:03,220 --> 00:25:07,150
that you can do some programmatic

00:25:04,539 --> 00:25:09,760
checking against it the second is Trace

00:25:07,150 --> 00:25:12,640
kit which is also open source out on

00:25:09,760 --> 00:25:15,130
github the goal of trace kits is to get

00:25:12,640 --> 00:25:16,780
stack traces in situations and word

00:25:15,130 --> 00:25:21,429
browsers where you'd normally wouldn't

00:25:16,780 --> 00:25:23,620
do it and such as old versions of ie or

00:25:21,429 --> 00:25:25,480
the only place that you have to catch

00:25:23,620 --> 00:25:27,130
the air is on window on there and it

00:25:25,480 --> 00:25:28,750
does some very clever things where it

00:25:27,130 --> 00:25:31,419
looks at the source code of the

00:25:28,750 --> 00:25:32,860
JavaScript executing and computes using

00:25:31,419 --> 00:25:34,659
line numbers and column numbers and

00:25:32,860 --> 00:25:36,909
tries to guess a stack trace on your

00:25:34,659 --> 00:25:40,059
behalf and it's pretty good at it

00:25:36,909 --> 00:25:42,280
it's scarily good at it the third thing

00:25:40,059 --> 00:25:44,080
is zone jazz which isn't particularly

00:25:42,280 --> 00:25:45,700
too air handling but it does provide

00:25:44,080 --> 00:25:47,380
some function here this has come out of

00:25:45,700 --> 00:25:50,080
the angular team and I believe is a port

00:25:47,380 --> 00:25:51,970
of domains from Dart is what somebody

00:25:50,080 --> 00:25:54,400
had told me at one point but what it

00:25:51,970 --> 00:25:56,169
allows you to do is glue together those

00:25:54,400 --> 00:25:59,799
two sides of that asynchronous boundary

00:25:56,169 --> 00:26:02,080
and say and have some context of what

00:25:59,799 --> 00:26:03,190
where was an event attached and where

00:26:02,080 --> 00:26:05,020
did an heir happen and get a

00:26:03,190 --> 00:26:07,570
consolidated stack trace across those

00:26:05,020 --> 00:26:10,840
using zone J as that is possible and

00:26:07,570 --> 00:26:12,820
third or finally Trek jess is my

00:26:10,840 --> 00:26:16,799
commercial thing that you should look at

00:26:12,820 --> 00:26:16,799
at some point or talk to me later so

00:26:19,559 --> 00:26:24,669
hopefully we're all a little bit happier

00:26:22,570 --> 00:26:26,440
now about client side if you just add a

00:26:24,669 --> 00:26:28,690
little bit extra work to your client

00:26:26,440 --> 00:26:31,720
side code we can you stop worrying about

00:26:28,690 --> 00:26:36,070
airs and E is undefined and just go back

00:26:31,720 --> 00:26:36,800
to doing some awesome apps that's all I

00:26:36,070 --> 00:26:44,550
got

00:26:36,800 --> 00:26:44,550
[Applause]

00:26:44,670 --> 00:26:54,880
[Music]

00:26:58,740 --> 00:27:06,509

YouTube URL: https://www.youtube.com/watch?v=4Tys-VuBPgo


