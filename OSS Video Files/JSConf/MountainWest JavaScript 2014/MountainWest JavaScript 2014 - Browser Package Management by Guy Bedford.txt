Title: MountainWest JavaScript 2014 - Browser Package Management by Guy Bedford
Publication date: 2020-01-24
Playlist: MountainWest JavaScript 2014
Description: 
	We still don't have a sensible package management workflow for the browser. Instead we have various pieces of package management tooling that may or may not play well together. The main reason for this is the lack of agreement on a module system and module loader for the browser.
With the ES6 module specification getting very close to completion, we now have a module format and dynamic loader that are specified natively for the browser. The hope is that this will provide the stability we need to move us closer towards agreement on methods allowing module management in the browser to be as easy as using npm on the server.
The ES6 Module Loader polyfill enables these ES6 module loading methods in browsers today, and with builds the polyfill is suitable for production use. The loader can also be customized to support dynamically loading AMD, CommonJS and global scripts directly in the browser, providing an upgrade path for legacy modules.
jspm is a package management system for JavaScript that is built on top of these principles of ES6 modules and the ES6 dynamic loader from the core. It also provides a CDN and CLI for working with flat dependency-managed modules of any module format directly from GitHub or npm.
This talk will provide an overview of ES6 modules and the module loader, as well as providing examples of these techniques in action.

Help us caption & translate this video!

http://amara.org/v/FG2Z/
Captions: 
	00:00:24,850 --> 00:00:29,300
thank you all so much for inviting me

00:00:27,290 --> 00:00:31,010
here to speak with you I want to share

00:00:29,300 --> 00:00:33,230
with you three projects related to

00:00:31,010 --> 00:00:36,110
package management and module management

00:00:33,230 --> 00:00:38,350
in the browser and instead of just

00:00:36,110 --> 00:00:40,370
diving straight into these projects and

00:00:38,350 --> 00:00:42,950
trying to justify them to you and

00:00:40,370 --> 00:00:44,239
explain them to you from the from where

00:00:42,950 --> 00:00:47,180
they are today I thought a nice way to

00:00:44,239 --> 00:00:48,590
go into it would be to actually start by

00:00:47,180 --> 00:00:50,000
explaining to you how I got involved in

00:00:48,590 --> 00:00:51,739
these projects in the first place and

00:00:50,000 --> 00:00:55,880
then the decisions can make a lot more

00:00:51,739 --> 00:01:00,740
sense from that perspective so two years

00:00:55,880 --> 00:01:06,380
ago I was basically began work on this

00:01:00,740 --> 00:01:08,210
framework cords sjs and I been working

00:01:06,380 --> 00:01:10,970
on a number of dynamic web applications

00:01:08,210 --> 00:01:12,140
and one of the things that I was asking

00:01:10,970 --> 00:01:14,270
was the same sort of question that seems

00:01:12,140 --> 00:01:15,770
to come up time and time again which is

00:01:14,270 --> 00:01:18,259
how do you actually build these things

00:01:15,770 --> 00:01:20,180
and how do you encapsulate parts of

00:01:18,259 --> 00:01:23,090
components of your app and really

00:01:20,180 --> 00:01:25,910
modularize so that you can have cleaner

00:01:23,090 --> 00:01:28,369
code and it was that kind of idea just

00:01:25,910 --> 00:01:30,800
how to encapsulate a single component

00:01:28,369 --> 00:01:32,119
that I was working on in zest year so I

00:01:30,800 --> 00:01:35,720
really dug into this problem really

00:01:32,119 --> 00:01:37,459
enjoyed digging into it and as I got

00:01:35,720 --> 00:01:41,119
deeper into it just felt like it really

00:01:37,459 --> 00:01:44,240
was a problem with module management so

00:01:41,119 --> 00:01:47,569
then I found requirejs and this was an

00:01:44,240 --> 00:01:49,700
amazing project I absolutely really

00:01:47,569 --> 00:01:52,130
liked the ideas and started bringing

00:01:49,700 --> 00:01:56,060
this into the framework so what I

00:01:52,130 --> 00:01:58,369
managed to do was basically design the

00:01:56,060 --> 00:02:01,940
different components to each be a module

00:01:58,369 --> 00:02:03,979
in requirejs so that you could basically

00:02:01,940 --> 00:02:06,800
naturally through the modularity of the

00:02:03,979 --> 00:02:09,979
app it created a natural encapsulation

00:02:06,800 --> 00:02:13,190
and a code organization without needing

00:02:09,979 --> 00:02:15,980
much more than that and basically what

00:02:13,190 --> 00:02:19,310
ended up was with something like this so

00:02:15,980 --> 00:02:21,470
you could require a component so say you

00:02:19,310 --> 00:02:23,900
had a dialogue or something the

00:02:21,470 --> 00:02:26,240
stylesheet was a dependency so I used a

00:02:23,900 --> 00:02:28,250
require JS plugin to automatically

00:02:26,240 --> 00:02:30,319
inject the style when you load the

00:02:28,250 --> 00:02:32,300
component so as soon as you require it

00:02:30,319 --> 00:02:35,890
the Styles been injected

00:02:32,300 --> 00:02:38,680
and then the templates as well would be

00:02:35,890 --> 00:02:41,000
part of that so you just render these

00:02:38,680 --> 00:02:43,880
components into a containing elements

00:02:41,000 --> 00:02:47,210
and with some rendering options so any

00:02:43,880 --> 00:02:49,340
component could have some options so I

00:02:47,210 --> 00:02:51,350
was pretty excited about it I worked on

00:02:49,340 --> 00:02:53,630
it for quite a bit of time went down

00:02:51,350 --> 00:02:58,300
lots of wrong paths and sort of came up

00:02:53,630 --> 00:03:00,800
with a system and I was ready to now

00:02:58,300 --> 00:03:02,930
sort of send this out to people get

00:03:00,800 --> 00:03:06,410
users and hopefully get some feedback on

00:03:02,930 --> 00:03:10,160
it so I started posting out to websites

00:03:06,410 --> 00:03:13,910
and the next thing I wanted to do as

00:03:10,160 --> 00:03:16,100
well was the natural part of using

00:03:13,910 --> 00:03:19,790
modules to kind of structure app is that

00:03:16,100 --> 00:03:22,520
you can firstly it's the code

00:03:19,790 --> 00:03:24,260
organization perspective the second part

00:03:22,520 --> 00:03:26,600
of it is you can share code between apps

00:03:24,260 --> 00:03:28,250
so if I make a dialogue component for

00:03:26,600 --> 00:03:30,640
one side it should be very easy to use

00:03:28,250 --> 00:03:32,750
that dialogue component on another site

00:03:30,640 --> 00:03:34,400
so if I wanted to actually use this

00:03:32,750 --> 00:03:36,590
dialogue component on another site what

00:03:34,400 --> 00:03:39,500
I need to do is share this configuration

00:03:36,590 --> 00:03:42,110
so I'd need to make sure that the same

00:03:39,500 --> 00:03:44,750
require JS configuration was shared with

00:03:42,110 --> 00:03:48,110
the other sites and this was immediately

00:03:44,750 --> 00:03:50,750
a hurdle so this require JS

00:03:48,110 --> 00:03:52,400
configuration really is a massive pain

00:03:50,750 --> 00:03:54,830
and I don't know how many of you use

00:03:52,400 --> 00:03:57,800
required yes but this is really what

00:03:54,830 --> 00:03:59,180
what kills the the experience of it we

00:03:57,800 --> 00:04:00,950
none of us really know quite how to

00:03:59,180 --> 00:04:03,860
configure we're all using slightly

00:04:00,950 --> 00:04:05,600
different configurations and there's two

00:04:03,860 --> 00:04:07,760
main problems with that we need to be

00:04:05,600 --> 00:04:10,250
referring to modules by the same unique

00:04:07,760 --> 00:04:11,480
names we need to be calling jquery the

00:04:10,250 --> 00:04:13,580
same thing we need to be calling

00:04:11,480 --> 00:04:15,230
bootstrap the same name so that my

00:04:13,580 --> 00:04:16,669
modules can work with your modules so if

00:04:15,230 --> 00:04:18,859
we really want to be able to share code

00:04:16,669 --> 00:04:21,650
we need to be sharing module names and

00:04:18,859 --> 00:04:22,640
the other side of it is that all of us

00:04:21,650 --> 00:04:24,680
are individually doing this

00:04:22,640 --> 00:04:26,780
configuration and the shim config and

00:04:24,680 --> 00:04:28,220
all these things but we're all redoing

00:04:26,780 --> 00:04:31,580
it none of us are really sharing the

00:04:28,220 --> 00:04:32,960
configuration that we're doing so if I

00:04:31,580 --> 00:04:34,669
want to use bootstrap I have to go

00:04:32,960 --> 00:04:36,320
through the same process of working out

00:04:34,669 --> 00:04:38,210
okay it's dependent on jquery and it has

00:04:36,320 --> 00:04:40,400
to export the jquery export so it's

00:04:38,210 --> 00:04:41,720
going to be easy to require and then

00:04:40,400 --> 00:04:43,760
everyone else has to do the same thing

00:04:41,720 --> 00:04:45,290
so i'm not able to share my

00:04:43,760 --> 00:04:47,430
configuration with you

00:04:45,290 --> 00:04:48,600
so I was just wondering about how this

00:04:47,430 --> 00:04:49,830
can be done better because i really

00:04:48,600 --> 00:04:52,770
wanted an easy way to share these

00:04:49,830 --> 00:04:54,870
components as modules and around that

00:04:52,770 --> 00:04:56,220
time there was this project jam i don't

00:04:54,870 --> 00:04:59,310
know how many of you have used this

00:04:56,220 --> 00:05:00,990
remember it but this is great a really

00:04:59,310 --> 00:05:02,370
amazing project it was a front-end

00:05:00,990 --> 00:05:04,530
package manager I think it was probably

00:05:02,370 --> 00:05:07,440
the first really decent front-end

00:05:04,530 --> 00:05:09,570
package manager and what I would do is

00:05:07,440 --> 00:05:11,700
we have the same names for the modules

00:05:09,570 --> 00:05:13,800
so when i install backbone i just

00:05:11,700 --> 00:05:16,470
require backbone and we're both talking

00:05:13,800 --> 00:05:18,150
about the same backbone module so my

00:05:16,470 --> 00:05:19,980
code can naturally work with your code

00:05:18,150 --> 00:05:22,290
and then would automatically at the

00:05:19,980 --> 00:05:25,020
bottom you see updating required config

00:05:22,290 --> 00:05:28,200
die jeaious so it automatically inject

00:05:25,020 --> 00:05:31,470
the configuration necessary to shim

00:05:28,200 --> 00:05:33,750
these modules to make them work

00:05:31,470 --> 00:05:35,670
correctly so it's solved those two

00:05:33,750 --> 00:05:37,560
problems unique module naming so

00:05:35,670 --> 00:05:39,210
globally unique module naming just like

00:05:37,560 --> 00:05:42,210
urls a unique model name should be

00:05:39,210 --> 00:05:45,780
unique and configuration injection and

00:05:42,210 --> 00:05:48,660
sharing but of course being a developer

00:05:45,780 --> 00:05:52,290
I had to question whether this could

00:05:48,660 --> 00:05:54,300
have been done even better and around

00:05:52,290 --> 00:05:55,950
that time I was talking with Adam Kishan

00:05:54,300 --> 00:05:59,400
of its he was working on a framework

00:05:55,950 --> 00:06:01,140
called kick strap and he was saying that

00:05:59,400 --> 00:06:03,120
what he wanted for his uses was the

00:06:01,140 --> 00:06:05,520
ability for them to just open up an HTML

00:06:03,120 --> 00:06:08,010
page and start developing he didn't want

00:06:05,520 --> 00:06:12,240
them to have to install a offline

00:06:08,010 --> 00:06:14,600
package manager so I was thinking about

00:06:12,240 --> 00:06:17,130
this and it made a lot of sense actually

00:06:14,600 --> 00:06:18,780
the web was very much designed around

00:06:17,130 --> 00:06:21,270
this principle that you can just open up

00:06:18,780 --> 00:06:23,160
a web browser and start developing as

00:06:21,270 --> 00:06:25,169
soon as we started making tools a

00:06:23,160 --> 00:06:27,120
prerequisite to development we

00:06:25,169 --> 00:06:28,650
immediately kill that workflow which is

00:06:27,120 --> 00:06:31,169
one of the fundamental workflows on the

00:06:28,650 --> 00:06:32,970
web so it seems to make sense that you

00:06:31,169 --> 00:06:34,410
know if you want people who are less

00:06:32,970 --> 00:06:36,030
technical involved in a website and

00:06:34,410 --> 00:06:39,030
still to be able to work on it and load

00:06:36,030 --> 00:06:43,080
it in a development phase it could be a

00:06:39,030 --> 00:06:45,240
nice thing to to maintain and the other

00:06:43,080 --> 00:06:49,200
thing is making it really easy to to

00:06:45,240 --> 00:06:51,360
load modules the lower the friction is

00:06:49,200 --> 00:06:53,400
to using something and especially on the

00:06:51,360 --> 00:06:55,770
web we feel is so much the lower that

00:06:53,400 --> 00:06:57,370
initial barrier to entry the easier it

00:06:55,770 --> 00:06:59,020
is to get involved in things

00:06:57,370 --> 00:07:00,400
it's one of the reasons why the web is

00:06:59,020 --> 00:07:03,810
so successful as well that's because

00:07:00,400 --> 00:07:06,010
it's so easy to navigate through it URL

00:07:03,810 --> 00:07:08,590
so the question is why do we even need

00:07:06,010 --> 00:07:09,940
to install surely we could since it on

00:07:08,590 --> 00:07:11,710
the web we're connected to the internet

00:07:09,940 --> 00:07:13,449
and all these packages are available

00:07:11,710 --> 00:07:15,880
online why can't I just require

00:07:13,449 --> 00:07:20,020
immediately in the browser and that was

00:07:15,880 --> 00:07:22,330
very much the idea for JSP a so for me

00:07:20,020 --> 00:07:23,979
that idea was just to compiling not to

00:07:22,330 --> 00:07:27,280
immediately start prototype something

00:07:23,979 --> 00:07:29,830
and playing around with it so it

00:07:27,280 --> 00:07:32,860
basically worked something like this you

00:07:29,830 --> 00:07:35,590
they include a CDN based required yes in

00:07:32,860 --> 00:07:38,440
the page and then you could require

00:07:35,590 --> 00:07:40,960
anything from the registry directly in

00:07:38,440 --> 00:07:43,470
the HTML page and it would download it

00:07:40,960 --> 00:07:48,490
and download its dependencies over CDM

00:07:43,470 --> 00:07:50,410
carefully cashed in the browser etc so I

00:07:48,490 --> 00:07:52,060
thought this was pretty powerful because

00:07:50,410 --> 00:07:53,590
now if I wanted to share my zest

00:07:52,060 --> 00:07:54,880
proponent with you if I want to show you

00:07:53,590 --> 00:07:57,940
my dialogue component that I've been

00:07:54,880 --> 00:08:00,070
working on I can tell you to just open

00:07:57,940 --> 00:08:01,660
up a page enter this in and then I just

00:08:00,070 --> 00:08:04,210
have to tell you the name of my dialogue

00:08:01,660 --> 00:08:05,500
and since that name is unique you'd be

00:08:04,210 --> 00:08:07,389
able to immediately see that same

00:08:05,500 --> 00:08:08,740
dialogue and be able to see my code I

00:08:07,389 --> 00:08:11,889
just thought that's the simplest

00:08:08,740 --> 00:08:14,190
possible way to share code it was just

00:08:11,889 --> 00:08:18,610
too compelling not to explore further

00:08:14,190 --> 00:08:20,800
and then of course just like jam you

00:08:18,610 --> 00:08:23,080
would then also have a tool to work

00:08:20,800 --> 00:08:24,940
locally so the the CDN was very much a

00:08:23,080 --> 00:08:26,440
convenience but then you would go off

00:08:24,940 --> 00:08:28,210
alone you'll be able to install anything

00:08:26,440 --> 00:08:29,440
from the registry and then the only

00:08:28,210 --> 00:08:31,780
change you would need to make in your

00:08:29,440 --> 00:08:33,550
page is instead of using the hosted

00:08:31,780 --> 00:08:35,349
version of required yes you'd use a

00:08:33,550 --> 00:08:37,089
local version and then you'd include

00:08:35,349 --> 00:08:38,950
that configuration that had been

00:08:37,089 --> 00:08:40,330
automatically generated and then

00:08:38,950 --> 00:08:45,910
everything else in your app would behave

00:08:40,330 --> 00:08:49,529
the same way and then the other thing is

00:08:45,910 --> 00:08:54,190
around this time speedy was really

00:08:49,529 --> 00:08:55,870
becoming more and more popular so with

00:08:54,190 --> 00:08:58,720
the initial system if you want to do

00:08:55,870 --> 00:09:00,550
this it would take three TCP connections

00:08:58,720 --> 00:09:02,770
three different round trips you'd

00:09:00,550 --> 00:09:05,410
request the require function you get it

00:09:02,770 --> 00:09:07,810
returning you then request bootstrap for

00:09:05,410 --> 00:09:10,209
example and then you get the response

00:09:07,810 --> 00:09:11,020
and then the require Jace would see the

00:09:10,209 --> 00:09:12,520
bootstraps to Penn

00:09:11,020 --> 00:09:14,110
then on jQuery and then we would

00:09:12,520 --> 00:09:18,000
separately request jquery and get it

00:09:14,110 --> 00:09:20,110
back with speedy we can actually

00:09:18,000 --> 00:09:23,680
multiplex all those requests over a

00:09:20,110 --> 00:09:26,310
single TCP connection so I've managed to

00:09:23,680 --> 00:09:28,360
set up that up and then with speedy push

00:09:26,310 --> 00:09:30,010
what you can actually do is create an

00:09:28,360 --> 00:09:32,710
intelligent server that knows the module

00:09:30,010 --> 00:09:34,360
traces of all the modules so when I

00:09:32,710 --> 00:09:36,160
request bootstrap the server already

00:09:34,360 --> 00:09:38,620
knows that it's dependent on jQuery and

00:09:36,160 --> 00:09:40,990
so I send that request to bootstrap it

00:09:38,620 --> 00:09:43,960
sends bootstrap and it also immediately

00:09:40,990 --> 00:09:45,790
sends jQuery at the same time and the

00:09:43,960 --> 00:09:47,650
way speedy push works as well as if you

00:09:45,790 --> 00:09:49,750
already have j.crew you get sent the

00:09:47,650 --> 00:09:51,580
headers first so you can compare the

00:09:49,750 --> 00:09:52,840
headers against your current the browser

00:09:51,580 --> 00:09:55,600
automatically compares the headers

00:09:52,840 --> 00:09:57,790
against the cash and if it doesn't need

00:09:55,600 --> 00:09:59,560
it immediately sends a cancel request so

00:09:57,790 --> 00:10:02,050
you get completely fine grained caching

00:09:59,560 --> 00:10:04,600
for the full dependency tree reducing it

00:10:02,050 --> 00:10:07,120
down to a one trip latency which is

00:10:04,600 --> 00:10:08,290
pretty incredible so I was pretty

00:10:07,120 --> 00:10:11,290
pleased with that I thought it was a

00:10:08,290 --> 00:10:13,450
really nice fast CDN for being able to

00:10:11,290 --> 00:10:16,080
easily share code and I was ready to

00:10:13,450 --> 00:10:18,700
start creating more more more of these

00:10:16,080 --> 00:10:23,440
components possessed and hopefully get

00:10:18,700 --> 00:10:25,930
more users around this time it then

00:10:23,440 --> 00:10:29,440
turned out that browserify was no longer

00:10:25,930 --> 00:10:31,300
a joke project with a wizard on the

00:10:29,440 --> 00:10:34,390
front but it was actually something that

00:10:31,300 --> 00:10:36,210
people were taking seriously and there

00:10:34,390 --> 00:10:39,130
was actually this incredible backlash

00:10:36,210 --> 00:10:40,690
against required yes and people were

00:10:39,130 --> 00:10:42,610
finding required a is very difficult to

00:10:40,690 --> 00:10:44,410
work with and one of the main reasons

00:10:42,610 --> 00:10:46,330
for this was actually because it was it

00:10:44,410 --> 00:10:48,880
gave a lot of power to the user and that

00:10:46,330 --> 00:10:50,860
that configuration is so difficult to

00:10:48,880 --> 00:10:52,420
work with everyone gets caught up when

00:10:50,860 --> 00:10:56,530
it gets frustrated and says well browser

00:10:52,420 --> 00:10:58,120
fires a lot easier but this was this was

00:10:56,530 --> 00:11:00,430
very frustrating because I had now built

00:10:58,120 --> 00:11:02,280
two projects spends a lot of time so

00:11:00,430 --> 00:11:05,860
we're now about a year and a half later

00:11:02,280 --> 00:11:08,640
or a year or so and spent a lot of time

00:11:05,860 --> 00:11:11,110
on these two projects both of whom are

00:11:08,640 --> 00:11:14,260
completely foundationally built on top

00:11:11,110 --> 00:11:15,850
of require JS so I've pretty much built

00:11:14,260 --> 00:11:17,530
that as my core foundation for both

00:11:15,850 --> 00:11:19,660
these projects and now there was a

00:11:17,530 --> 00:11:21,250
massive backlash against it which is

00:11:19,660 --> 00:11:22,960
incredibly frustrating when the very

00:11:21,250 --> 00:11:23,379
foundations of the projects I'd spent so

00:11:22,960 --> 00:11:26,049
much

00:11:23,379 --> 00:11:31,119
could so easily be argued against them

00:11:26,049 --> 00:11:33,519
threatened at the same time jam was

00:11:31,119 --> 00:11:36,029
pretty much now dead project it hadn't

00:11:33,519 --> 00:11:38,169
managed to get a call user base up and

00:11:36,029 --> 00:11:40,779
one of the main reasons for this was

00:11:38,169 --> 00:11:42,609
because the jam registry it wasn't clear

00:11:40,779 --> 00:11:44,769
who was responsible for maintaining the

00:11:42,609 --> 00:11:47,049
configuration of which modules so they

00:11:44,769 --> 00:11:48,759
weren't being kept working and up to

00:11:47,049 --> 00:11:50,889
date the registry hadn't gained a

00:11:48,759 --> 00:11:52,239
critical mass to be able to really be

00:11:50,889 --> 00:11:55,319
something useful and that's a really

00:11:52,239 --> 00:11:57,699
hard thing when bootstrapping a registry

00:11:55,319 --> 00:11:59,919
so the creative Jam actually went on to

00:11:57,699 --> 00:12:02,679
create hoodie kalyan and got involved in

00:11:59,919 --> 00:12:04,269
that project right look at the same time

00:12:02,679 --> 00:12:08,829
Jess Jess had been around for quite a

00:12:04,269 --> 00:12:10,749
while and it had had no users so no one

00:12:08,829 --> 00:12:15,179
had really got involved in the project

00:12:10,749 --> 00:12:18,029
and they've been no real feedback on it

00:12:15,179 --> 00:12:21,849
so I was kind of now in a situation

00:12:18,029 --> 00:12:23,739
where I had these two projects with this

00:12:21,849 --> 00:12:27,249
kind of foundational threat to require

00:12:23,739 --> 00:12:29,799
yes and neither particularly getting

00:12:27,249 --> 00:12:31,209
many users so I had to really focus and

00:12:29,799 --> 00:12:33,850
work out what I really wanted to put my

00:12:31,209 --> 00:12:35,669
my efforts into and around this time

00:12:33,850 --> 00:12:38,139
I've been reading a lot about es6

00:12:35,669 --> 00:12:41,589
specification and one of the things that

00:12:38,139 --> 00:12:46,119
the es6 specification defines is a new

00:12:41,589 --> 00:12:47,889
module format for javascript and so when

00:12:46,119 --> 00:12:50,979
we're having these debates about which

00:12:47,889 --> 00:12:54,209
is better common jayus or AMD it's

00:12:50,979 --> 00:12:56,019
really quite irrelevant because the the

00:12:54,209 --> 00:12:58,629
ultimate system that's going to be

00:12:56,019 --> 00:13:00,189
replacing both of these is es6 modules

00:12:58,629 --> 00:13:04,379
and they are actually coming more

00:13:00,189 --> 00:13:06,909
quickly than then I mean we believed and

00:13:04,379 --> 00:13:08,999
the other thing that the es6 module

00:13:06,909 --> 00:13:12,759
specification defines is a dynamic

00:13:08,999 --> 00:13:17,439
module loader which actually behaves

00:13:12,759 --> 00:13:19,959
very very similarly to require yes it's

00:13:17,439 --> 00:13:23,229
a promise based loader so you use

00:13:19,959 --> 00:13:25,689
venable to get back your module but but

00:13:23,229 --> 00:13:28,179
it's very much a similar type of loader

00:13:25,689 --> 00:13:29,679
to require JS so I've been thinking a

00:13:28,179 --> 00:13:33,609
lot about this thinking a lot about

00:13:29,679 --> 00:13:35,379
loaders and it seemed that it really

00:13:33,609 --> 00:13:37,180
should be possible to polyfill this

00:13:35,379 --> 00:13:38,650
loader and and

00:13:37,180 --> 00:13:41,050
if we could polyfill this loader and

00:13:38,650 --> 00:13:42,370
make it work in browsers today that

00:13:41,050 --> 00:13:44,110
would be a loader that we could really

00:13:42,370 --> 00:13:47,760
rely on it's a it's a loader I could

00:13:44,110 --> 00:13:50,500
build a project on and not worry that a

00:13:47,760 --> 00:13:55,690
simple blog post online can suddenly

00:13:50,500 --> 00:13:57,310
offset my whole project so I then found

00:13:55,690 --> 00:14:00,370
this project online which had been

00:13:57,310 --> 00:14:03,790
started by addy Osmani and him and Luke

00:14:00,370 --> 00:14:06,040
Hoban had basically created just a very

00:14:03,790 --> 00:14:07,960
first implementation of this of a

00:14:06,040 --> 00:14:12,240
polyfill for this dynamic system loader

00:14:07,960 --> 00:14:16,780
and so I got involved in the project and

00:14:12,240 --> 00:14:21,160
here it is today it's basically a

00:14:16,780 --> 00:14:23,320
complete polyfill now for using es6

00:14:21,160 --> 00:14:25,450
modules and that dynamic ears six

00:14:23,320 --> 00:14:27,460
modulator in the browser it's written

00:14:25,450 --> 00:14:30,460
the exact module pipeline it uses

00:14:27,460 --> 00:14:33,580
matches the exact is six specification

00:14:30,460 --> 00:14:35,350
so the function names are the same so

00:14:33,580 --> 00:14:40,390
the way the loading pipeline works is to

00:14:35,350 --> 00:14:43,240
the spec and if you create if you build

00:14:40,390 --> 00:14:46,900
on top of its public API you're building

00:14:43,240 --> 00:14:50,740
on top of a spec API which which is for

00:14:46,900 --> 00:14:53,580
me a very solid foundation so I'm just

00:14:50,740 --> 00:14:56,740
going to show very quick demo of this

00:14:53,580 --> 00:15:02,020
it's not the core theme of the talk but

00:14:56,740 --> 00:15:04,210
I will just quickly go into it so the

00:15:02,020 --> 00:15:07,570
example I'm going to use is the the

00:15:04,210 --> 00:15:11,320
tracer to do NBC project which is also

00:15:07,570 --> 00:15:14,320
been created by areas money and this is

00:15:11,320 --> 00:15:18,760
a to module application so I've got two

00:15:14,320 --> 00:15:23,020
modules jsf and JS to-do app and it uses

00:15:18,760 --> 00:15:25,630
es6 syntax as well so here's the app bar

00:15:23,020 --> 00:15:27,400
and that imports from to-do app so we

00:15:25,630 --> 00:15:31,240
use relative naming just like you would

00:15:27,400 --> 00:15:34,540
in AMD or common jess and it uses era

00:15:31,240 --> 00:15:38,110
syntax and it uses various es6 features

00:15:34,540 --> 00:15:40,390
and then we have to do app which is the

00:15:38,110 --> 00:15:43,020
main application file and this uses to

00:15:40,390 --> 00:15:47,770
structuring classes error functions

00:15:43,020 --> 00:15:51,270
various things so how do I use this in a

00:15:47,770 --> 00:15:51,270
browser well

00:15:51,460 --> 00:15:56,540
here's the main index page it sets up

00:15:54,560 --> 00:15:58,730
some boilerplate and then at the bottom

00:15:56,540 --> 00:16:00,170
here's what I need to include to load

00:15:58,730 --> 00:16:02,450
those modules so the first thing I do is

00:16:00,170 --> 00:16:05,330
I include tracer which is Google's

00:16:02,450 --> 00:16:07,730
compiler for compiling es6 into es5 and

00:16:05,330 --> 00:16:10,160
as soon as I include tracer the es6

00:16:07,730 --> 00:16:13,190
module loader polyfill will know that it

00:16:10,160 --> 00:16:14,570
now needs to convert es6 in cs5 and then

00:16:13,190 --> 00:16:16,790
when i import something it'll do that

00:16:14,570 --> 00:16:18,650
conversion so i can actually just import

00:16:16,790 --> 00:16:20,690
from these raw ear six files and i'll do

00:16:18,650 --> 00:16:23,930
the conversion in the browser run the

00:16:20,690 --> 00:16:28,610
full module pipeline the es6 modulator

00:16:23,930 --> 00:16:30,290
itself it's 15 kilobytes minified so

00:16:28,610 --> 00:16:35,740
it's actually a production suitable

00:16:30,290 --> 00:16:38,270
loader if I now open up the index page

00:16:35,740 --> 00:16:42,380
you see the whole things just compiled

00:16:38,270 --> 00:16:49,390
in the browser so it's compiled the es6

00:16:42,380 --> 00:16:49,390
and loaded these two files which were

00:16:49,810 --> 00:16:56,810
see it's loaded the es6 directly in the

00:16:52,520 --> 00:17:00,800
browser converted it with tracer and is

00:16:56,810 --> 00:17:08,990
now working so you can see it's all

00:17:00,800 --> 00:17:12,760
working correctly all right and i did do

00:17:08,990 --> 00:17:15,380
a tour confluence at fluent conference

00:17:12,760 --> 00:17:16,910
about practical workflows for different

00:17:15,380 --> 00:17:20,839
build workflows that you can use with

00:17:16,910 --> 00:17:22,070
tracer so i'm not going to go into the

00:17:20,839 --> 00:17:23,330
different build scenarios and the

00:17:22,070 --> 00:17:26,990
different ways that you can work with it

00:17:23,330 --> 00:17:28,459
today the real question I want to ask

00:17:26,990 --> 00:17:30,260
now is well how can you really use this

00:17:28,459 --> 00:17:31,790
to create a loader that would do the

00:17:30,260 --> 00:17:34,190
same sort of thing required yes would

00:17:31,790 --> 00:17:38,780
have done and the way I'm going to do

00:17:34,190 --> 00:17:41,900
this is I'm going to use a extension to

00:17:38,780 --> 00:17:44,750
the loader so the way the es6 module

00:17:41,900 --> 00:17:45,860
specification is designed is the load is

00:17:44,750 --> 00:17:48,770
designed to be extended with

00:17:45,860 --> 00:17:51,170
compatibility layers to load AMD common

00:17:48,770 --> 00:17:52,970
J's and existing module formats so it's

00:17:51,170 --> 00:17:54,590
very much in the specification design

00:17:52,970 --> 00:17:57,080
but it doesn't provide those

00:17:54,590 --> 00:17:58,670
compatibility layers so what you can do

00:17:57,080 --> 00:18:00,620
is you can use those extension hooks

00:17:58,670 --> 00:18:03,360
which are a public spectrum pata belay p

00:18:00,620 --> 00:18:05,549
I and you can extend that that

00:18:03,360 --> 00:18:07,230
system loader to be able to behave more

00:18:05,549 --> 00:18:10,530
like what you'd expect from something

00:18:07,230 --> 00:18:12,420
like required yes so I've put together a

00:18:10,530 --> 00:18:15,840
project called system guess which does

00:18:12,420 --> 00:18:17,549
exactly that it adds md colleges and

00:18:15,840 --> 00:18:20,190
global script loading support to that

00:18:17,549 --> 00:18:22,260
system spec loader it adds map config

00:18:20,190 --> 00:18:23,970
shim config a plug-in system just like

00:18:22,260 --> 00:18:26,820
require JS multi version supports

00:18:23,970 --> 00:18:30,090
various features it comes to 12

00:18:26,820 --> 00:18:31,950
kilobytes minified so together with the

00:18:30,090 --> 00:18:34,380
es6 module loader polyfill you can get a

00:18:31,950 --> 00:18:36,059
loader that's 27 kilobytes and it's

00:18:34,380 --> 00:18:38,070
highly suitable for production that

00:18:36,059 --> 00:18:40,530
behaves almost identically to require

00:18:38,070 --> 00:18:48,630
yes so i just want to show you a demo of

00:18:40,530 --> 00:18:50,790
that so what i've done is i've just used

00:18:48,630 --> 00:18:54,510
Bauer to download the es6 module loader

00:18:50,790 --> 00:18:56,820
polyfill and system jess and then i'm

00:18:54,510 --> 00:18:58,770
going to include those in a page so i

00:18:56,820 --> 00:19:00,960
just first include the es6 module odor

00:18:58,770 --> 00:19:02,730
and then system DJ s i'm not using any

00:19:00,960 --> 00:19:05,309
es6 functionality now i just want to

00:19:02,730 --> 00:19:08,850
load AMD modules so I'm not including

00:19:05,309 --> 00:19:14,460
tracer and I'm just going to create a

00:19:08,850 --> 00:19:15,809
very simple module module Jess and I can

00:19:14,460 --> 00:19:18,360
now choose if i want to write common

00:19:15,809 --> 00:19:25,669
jess or md so for example if i want to

00:19:18,360 --> 00:19:28,380
write md this is AMD and to load that i

00:19:25,669 --> 00:19:32,280
just use that same system dynamic loader

00:19:28,380 --> 00:19:33,870
system dot imports module I'm just going

00:19:32,280 --> 00:19:36,290
to log it so we can see it in the

00:19:33,870 --> 00:19:36,290
console

00:19:43,430 --> 00:19:50,300
so there you see it's detected its AMD

00:19:47,690 --> 00:19:53,750
and it's shown us the module I could

00:19:50,300 --> 00:19:57,260
have just also written that as common

00:19:53,750 --> 00:20:01,790
J's so module that exports this is

00:19:57,260 --> 00:20:04,460
conscious and if I run the same thing it

00:20:01,790 --> 00:20:06,290
loads it as common J's so it's using

00:20:04,460 --> 00:20:08,480
those compatibility layers to detect the

00:20:06,290 --> 00:20:12,170
module format and do the right thing for

00:20:08,480 --> 00:20:13,520
it I don't have a lot of time to go

00:20:12,170 --> 00:20:16,370
through all the features of systems a/s

00:20:13,520 --> 00:20:17,720
is a lot in the documentation but I want

00:20:16,370 --> 00:20:20,150
to just want to show you one feature

00:20:17,720 --> 00:20:22,790
very quickly which i think is kind of an

00:20:20,150 --> 00:20:24,020
interesting feature of modules and was a

00:20:22,790 --> 00:20:26,150
very important one when I was writing

00:20:24,020 --> 00:20:28,910
zest which is the fact that you can use

00:20:26,150 --> 00:20:30,560
a plugin system to have CSS requires and

00:20:28,910 --> 00:20:32,120
it's a bit of an arbitrary one but i

00:20:30,560 --> 00:20:35,050
just wanted to show it because i think

00:20:32,120 --> 00:20:37,400
it's relevant for four components so

00:20:35,050 --> 00:20:39,560
because i'm in common J's i need to use

00:20:37,400 --> 00:20:41,090
a require function but the string i put

00:20:39,560 --> 00:20:42,740
into the require function is the same

00:20:41,090 --> 00:20:46,360
string that's going to run through as if

00:20:42,740 --> 00:20:48,890
i did a system that import function so

00:20:46,360 --> 00:20:51,320
let's say I wanted to load a style that

00:20:48,890 --> 00:20:53,810
CSS file from the same folder I can use

00:20:51,320 --> 00:20:55,100
relative module syntax and this is now

00:20:53,810 --> 00:20:58,280
running through the plug-in system

00:20:55,100 --> 00:21:01,970
system JSI verse the syntax in require

00:20:58,280 --> 00:21:03,710
JS you have CSS curl ! and then then

00:21:01,970 --> 00:21:05,780
module name I just found that really

00:21:03,710 --> 00:21:08,000
annoying because it feels like it should

00:21:05,780 --> 00:21:09,830
be an extension based plug-in system so

00:21:08,000 --> 00:21:11,150
instead I put the exclamation mark at

00:21:09,830 --> 00:21:12,650
the end and then it'll read the

00:21:11,150 --> 00:21:14,570
extension and use that as the plug-in

00:21:12,650 --> 00:21:16,580
name if the plugin name is different to

00:21:14,570 --> 00:21:18,500
the extension name I could have added it

00:21:16,580 --> 00:21:20,750
on at the end so it's the same idea but

00:21:18,500 --> 00:21:22,670
just I just reordered it which is

00:21:20,750 --> 00:21:26,930
probably not great for compatibility but

00:21:22,670 --> 00:21:30,130
I think it's nicer and then if I create

00:21:26,930 --> 00:21:30,130
this style of CSS

00:21:36,130 --> 00:21:41,059
so you see you can load a dependency

00:21:39,200 --> 00:21:43,010
that's a starchy and it's using the CSS

00:21:41,059 --> 00:21:44,000
plugin which was in the same folder but

00:21:43,010 --> 00:21:45,919
that's just to show you some of the

00:21:44,000 --> 00:21:48,980
power of these systems for when it comes

00:21:45,919 --> 00:21:55,130
to if you want to look at components and

00:21:48,980 --> 00:21:57,500
that sort of thing alright so now I went

00:21:55,130 --> 00:21:59,299
back to JSP em and I updated from this

00:21:57,500 --> 00:22:03,950
require system and I built the whole

00:21:59,299 --> 00:22:05,659
thing on top of system Jess and so now

00:22:03,950 --> 00:22:07,490
it's pretty happy I had a system that

00:22:05,659 --> 00:22:10,100
was now using this the spec compliant

00:22:07,490 --> 00:22:11,450
loader no more there's these module

00:22:10,100 --> 00:22:13,610
format Wars are going to cause issues

00:22:11,450 --> 00:22:17,600
with with my projects so I was pretty

00:22:13,610 --> 00:22:19,940
pleased with that around this time i

00:22:17,600 --> 00:22:22,370
noticed that ryan grove was doing some

00:22:19,940 --> 00:22:23,600
work on Raw github which is pretty

00:22:22,370 --> 00:22:27,470
interesting because you could require

00:22:23,600 --> 00:22:29,299
things directly of Gita and also

00:22:27,470 --> 00:22:31,039
considering the jam it had such issues

00:22:29,299 --> 00:22:33,710
bootstrapping and initial module

00:22:31,039 --> 00:22:35,419
registry I really wanted to avoid having

00:22:33,710 --> 00:22:37,159
to try and create this community around

00:22:35,419 --> 00:22:40,730
a registry and make sure that there's

00:22:37,159 --> 00:22:44,809
people responsible for everything so I

00:22:40,730 --> 00:22:46,880
then added a github endpoints to the to

00:22:44,809 --> 00:22:48,320
the system so instead of having its own

00:22:46,880 --> 00:22:51,260
registry you would load things directly

00:22:48,320 --> 00:22:53,330
of github I would for example if I load

00:22:51,260 --> 00:22:55,010
here without any version it would

00:22:53,330 --> 00:22:57,950
automatically check the tags on github

00:22:55,010 --> 00:22:59,720
look for the most stable some of it

00:22:57,950 --> 00:23:02,090
would check if any of the tags or sember

00:22:59,720 --> 00:23:06,769
tags choose the latest stable version

00:23:02,090 --> 00:23:09,320
and give you that version and also with

00:23:06,769 --> 00:23:11,330
fine-grained caching and then I did the

00:23:09,320 --> 00:23:13,899
same for mpm and went through and works

00:23:11,330 --> 00:23:17,299
out how to make all the MPN dependencies

00:23:13,899 --> 00:23:20,600
run through correctly when when loaded

00:23:17,299 --> 00:23:23,720
in this way so now it had gone full

00:23:20,600 --> 00:23:26,000
circle so browserify from being a threat

00:23:23,720 --> 00:23:27,440
to the foundation so the projects i was

00:23:26,000 --> 00:23:29,750
working on browserify was now something

00:23:27,440 --> 00:23:31,730
that was complimentary if a module is

00:23:29,750 --> 00:23:35,809
written for browserify that works in the

00:23:31,730 --> 00:23:37,159
browser would now also work on JSP em so

00:23:35,809 --> 00:23:38,419
it really just opened up those

00:23:37,159 --> 00:23:40,130
communities instead of them being

00:23:38,419 --> 00:23:43,700
competing things and this is pretty

00:23:40,130 --> 00:23:46,269
great so I want to show you a demo of

00:23:43,700 --> 00:23:52,450
loading a browserify module

00:23:46,269 --> 00:23:55,899
using the CDN this demo was created by

00:23:52,450 --> 00:23:58,149
mikkola Lysenko and it's a sort of a

00:23:55,899 --> 00:24:01,059
voxel demo he was kind enough to offer

00:23:58,149 --> 00:24:02,529
permission from his user today sorry

00:24:01,059 --> 00:24:03,700
before I dive strange that damn i just

00:24:02,529 --> 00:24:05,499
want to show you some simple demos of

00:24:03,700 --> 00:24:08,469
loading things like jquery directly or

00:24:05,499 --> 00:24:10,749
get up so this example I've got this

00:24:08,469 --> 00:24:14,589
unique name for jquery on get up which

00:24:10,749 --> 00:24:16,389
is github components repo /j query it's

00:24:14,589 --> 00:24:18,759
got a main entry point specified in the

00:24:16,389 --> 00:24:20,709
package.json so i don't need to go

00:24:18,759 --> 00:24:22,119
forward slash jquery i can just load the

00:24:20,709 --> 00:24:24,609
package by name and we'll use the main

00:24:22,119 --> 00:24:26,409
entry point i could enter the exact

00:24:24,609 --> 00:24:29,200
version indirectly and i would get

00:24:26,409 --> 00:24:33,779
version 2.1 point oh I shall write as

00:24:29,200 --> 00:24:33,779
well so I'm going to open that up and

00:24:35,639 --> 00:24:42,039
there it's loaded jquery from the CDM i

00:24:39,759 --> 00:24:44,559
can also load j.crew directly from mpm

00:24:42,039 --> 00:24:48,279
so mpm jcreator now properly maintained

00:24:44,559 --> 00:24:50,769
and it then loads that and there it is

00:24:48,279 --> 00:24:53,529
if you look at the network tab you'll

00:24:50,769 --> 00:24:55,839
see it's sending a request to mpm JS

00:24:53,529 --> 00:24:58,059
p.m. that I /j query and then the right

00:24:55,839 --> 00:25:00,579
version and the response is getting back

00:24:58,059 --> 00:25:05,349
is a min ified version of jQuery so it

00:25:00,579 --> 00:25:06,549
automatically minna fires from NPM so

00:25:05,349 --> 00:25:09,009
that means that anything on NPM can

00:25:06,549 --> 00:25:11,589
pretty much be required the example I

00:25:09,009 --> 00:25:14,289
want to show now is the voxel demo which

00:25:11,589 --> 00:25:16,959
I published as box life and demo on NPM

00:25:14,289 --> 00:25:20,070
this is quite a large module tree so it

00:25:16,959 --> 00:25:24,159
actually loads from I think it's around

00:25:20,070 --> 00:25:26,459
I think it's around 50 packages separate

00:25:24,159 --> 00:25:29,469
NPM packages that are being loaded and

00:25:26,459 --> 00:25:33,089
it results in about 120 different

00:25:29,469 --> 00:25:34,959
separate module requests in the browser

00:25:33,089 --> 00:25:36,369
and just to show you that this is

00:25:34,959 --> 00:25:41,499
happening on a fresh cash I'll just

00:25:36,369 --> 00:25:43,299
clear the cache first alright so the

00:25:41,499 --> 00:25:45,190
network panel can be quite fun to watch

00:25:43,299 --> 00:25:47,259
in these so I'll just open that up and

00:25:45,190 --> 00:25:50,369
make it smaller because there are going

00:25:47,259 --> 00:25:52,839
to be a lot but let's hope it works

00:25:50,369 --> 00:25:56,139
alright so that's it's chasing the full

00:25:52,839 --> 00:25:59,190
tree and pushing it with speedy push you

00:25:56,139 --> 00:26:01,080
see at the bottom there was 128 requests

00:25:59,190 --> 00:26:03,060
almost three hundred kilobytes and there

00:26:01,080 --> 00:26:05,880
we have this voxel demo running it's

00:26:03,060 --> 00:26:07,950
designed as a browserify module and just

00:26:05,880 --> 00:26:10,350
loading it through the CDN mpm system

00:26:07,950 --> 00:26:20,190
you can now very easily load that in the

00:26:10,350 --> 00:26:21,900
browser but what happens thank you so

00:26:20,190 --> 00:26:23,760
this is great to play with them to share

00:26:21,900 --> 00:26:24,990
code but what happens when I want to

00:26:23,760 --> 00:26:26,550
actually use this in a project where I

00:26:24,990 --> 00:26:28,890
want to be able to download this this

00:26:26,550 --> 00:26:30,990
fool dependency tree so I can use the JS

00:26:28,890 --> 00:26:34,380
p.m. command-line tool which you would

00:26:30,990 --> 00:26:38,220
install with NPM install JSP mg and I

00:26:34,380 --> 00:26:39,780
can create a new project and I'm still

00:26:38,220 --> 00:26:41,310
just working on making this a nice

00:26:39,780 --> 00:26:43,920
experience to work with it's still very

00:26:41,310 --> 00:26:46,170
rough but hopefully you can at least get

00:26:43,920 --> 00:26:48,960
an idea for what you can do with it so I

00:26:46,170 --> 00:26:50,700
want to install NPM voxel demo and this

00:26:48,960 --> 00:26:55,200
will now trace it and its dependencies

00:26:50,700 --> 00:26:56,670
and install them all into my appt flat

00:26:55,200 --> 00:27:00,120
version management is a very different

00:26:56,670 --> 00:27:02,160
problem to the hierarchical dependency

00:27:00,120 --> 00:27:04,080
management that's done in node so what

00:27:02,160 --> 00:27:06,030
happens is as you install dependencies

00:27:04,080 --> 00:27:09,120
you reach conflicts and you have to

00:27:06,030 --> 00:27:10,770
resolve them by basically upgrading or

00:27:09,120 --> 00:27:12,090
downgrading modules within the range so

00:27:10,770 --> 00:27:14,070
that everything can optimally share

00:27:12,090 --> 00:27:15,660
dependencies because you don't want to

00:27:14,070 --> 00:27:17,100
duplicate but you reach scenarios like

00:27:15,660 --> 00:27:19,170
this where you do have to duplicate it

00:27:17,100 --> 00:27:21,510
so it's saying GL shade already has

00:27:19,170 --> 00:27:22,920
version or point 0 point six sorry I

00:27:21,510 --> 00:27:24,660
need to work on my wording which can't

00:27:22,920 --> 00:27:25,890
downgrade to no point no point five are

00:27:24,660 --> 00:27:28,140
you sure you want to install a version

00:27:25,890 --> 00:27:29,490
for so it reaches a conflict and it asks

00:27:28,140 --> 00:27:32,790
every time it Forks and I think there's

00:27:29,490 --> 00:27:35,340
three forks in this one there you go and

00:27:32,790 --> 00:27:36,630
so now it's installed the full tree and

00:27:35,340 --> 00:27:38,250
what that's done is its created this

00:27:36,630 --> 00:27:40,770
configuration file just like that

00:27:38,250 --> 00:27:42,780
require JS configuration file so the

00:27:40,770 --> 00:27:45,150
first thing it does is it tells it mpm

00:27:42,780 --> 00:27:47,910
and github are now just in those in my

00:27:45,150 --> 00:27:49,860
local jspn packages folder and now it

00:27:47,910 --> 00:27:53,340
creates the full dependency tree map for

00:27:49,860 --> 00:27:55,290
all the modules so it says it this

00:27:53,340 --> 00:27:56,940
basically maps out the version ranges

00:27:55,290 --> 00:27:58,890
that every module is allowed to use down

00:27:56,940 --> 00:28:00,840
the tree and then at the bottom we have

00:27:58,890 --> 00:28:02,940
the exact version solution so having

00:28:00,840 --> 00:28:04,800
done this install what it's actually

00:28:02,940 --> 00:28:07,020
done is it's built in the exact version

00:28:04,800 --> 00:28:08,040
solutions that I'm using in my app so

00:28:07,020 --> 00:28:09,600
that means when I load in the browser

00:28:08,040 --> 00:28:11,790
already knows the exact versions i'm

00:28:09,600 --> 00:28:12,990
using so you can see the forks quite

00:28:11,790 --> 00:28:15,030
clearly here as well

00:28:12,990 --> 00:28:16,650
the forks come out as array values in

00:28:15,030 --> 00:28:18,750
the tree and if I want to manually

00:28:16,650 --> 00:28:21,380
resolve Forks I can actually go through

00:28:18,750 --> 00:28:23,820
and start replacing the exact version

00:28:21,380 --> 00:28:25,740
manual changes to this configuration are

00:28:23,820 --> 00:28:28,980
respected by the command line tool so it

00:28:25,740 --> 00:28:30,300
won't change anything without asking so

00:28:28,980 --> 00:28:31,920
to actually use this in my up what I

00:28:30,300 --> 00:28:35,429
need to do is also download the loader

00:28:31,920 --> 00:28:38,370
file so that system j s es6 module

00:28:35,429 --> 00:28:40,110
loader and then i'm just going to use

00:28:38,370 --> 00:28:42,540
those loader files so the only change i

00:28:40,110 --> 00:28:44,700
need to make to my whole app now is to

00:28:42,540 --> 00:28:49,800
just use this local version of system j

00:28:44,700 --> 00:28:52,530
s which is and when everything is now

00:28:49,800 --> 00:28:54,150
versioned at this point and then i need

00:28:52,530 --> 00:28:56,400
to include the configuration which will

00:28:54,150 --> 00:28:58,800
tell it what everything is and then i

00:28:56,400 --> 00:29:01,770
can do exactly the same import so if i

00:28:58,800 --> 00:29:03,660
run this now with some luck it'll run

00:29:01,770 --> 00:29:07,880
the whole thing locally it's got a two

00:29:03,660 --> 00:29:11,160
second render time so there it is and

00:29:07,880 --> 00:29:16,050
you can see in the network panel it's

00:29:11,160 --> 00:29:18,720
all loading from far as opposed to see

00:29:16,050 --> 00:29:21,540
dia and then i can now I've got a local

00:29:18,720 --> 00:29:25,640
project that I can work with alright so

00:29:21,540 --> 00:29:25,640
that's jage p.m. oops

00:29:28,659 --> 00:29:34,009
so what about performance so this

00:29:31,519 --> 00:29:36,139
important question is it really good for

00:29:34,009 --> 00:29:39,139
performance so what I did was a demo of

00:29:36,139 --> 00:29:42,200
the voxel engine 92 separate module

00:29:39,139 --> 00:29:43,909
files over megabytes of code and what I

00:29:42,200 --> 00:29:46,730
did was made a browser fire bundle and

00:29:43,909 --> 00:29:48,710
also use the JSP em CDN and ran the two

00:29:46,730 --> 00:29:51,769
side by side and see which was fought

00:29:48,710 --> 00:29:53,509
step so the first test was to run the

00:29:51,769 --> 00:29:56,059
local version so just like you saw just

00:29:53,509 --> 00:29:58,669
now when I was loading all the modules

00:29:56,059 --> 00:30:01,639
locally in the browser that I downloaded

00:29:58,669 --> 00:30:03,619
I compared that to creating a browserify

00:30:01,639 --> 00:30:07,039
bundle and just loading that in there in

00:30:03,619 --> 00:30:08,840
the browser this is the result it took

00:30:07,039 --> 00:30:11,119
about half a second for the JSP em

00:30:08,840 --> 00:30:12,830
version to load but about 140

00:30:11,119 --> 00:30:16,309
milliseconds for the browser 5mon delta

00:30:12,830 --> 00:30:18,679
lloyd so the bundle was quicker also

00:30:16,309 --> 00:30:20,840
bearing in mind that the JSP em the

00:30:18,679 --> 00:30:24,379
system load o is actually based on a

00:30:20,840 --> 00:30:26,090
polyfill so when that system load is

00:30:24,379 --> 00:30:29,899
written natively in the browser it could

00:30:26,090 --> 00:30:32,119
potentially be a lot faster but it's not

00:30:29,899 --> 00:30:33,859
quite the full picture because really

00:30:32,119 --> 00:30:35,960
what we have is a build time with

00:30:33,859 --> 00:30:38,179
browserify so with JSP emma was loading

00:30:35,960 --> 00:30:39,799
everything live off the file system with

00:30:38,179 --> 00:30:43,159
browserify it needs a first to a 3

00:30:39,799 --> 00:30:44,869
second build so if I change any file I'm

00:30:43,159 --> 00:30:49,730
actually getting a better development

00:30:44,869 --> 00:30:52,159
experience with JSP a and then remote

00:30:49,730 --> 00:30:54,739
what I did was I used the same speedy

00:30:52,159 --> 00:30:58,609
service so that the CDN so I wasn't

00:30:54,739 --> 00:31:01,100
comparing speedy against HTTP and i

00:30:58,609 --> 00:31:03,679
created the bundle loaded up onto the

00:31:01,100 --> 00:31:05,299
server and then compared that to just

00:31:03,679 --> 00:31:08,119
doing the direct CD and require that i

00:31:05,299 --> 00:31:10,429
showed just now and then compared which

00:31:08,119 --> 00:31:12,799
was faster i removed any obvious

00:31:10,429 --> 00:31:15,529
outliers due to tcp areas or anything

00:31:12,799 --> 00:31:17,059
like that and made sure to test them at

00:31:15,529 --> 00:31:19,909
the same time so the network conditions

00:31:17,059 --> 00:31:22,869
were similar I'm just wondering what

00:31:19,909 --> 00:31:25,639
everyone thinks with the sitter's

00:31:22,869 --> 00:31:27,889
multiplexing server with speedy push be

00:31:25,639 --> 00:31:30,019
faster or slower than just loading a

00:31:27,889 --> 00:31:32,690
full browserify bundle any opinions on

00:31:30,019 --> 00:31:38,889
that which run disney was faster JSP r

00:31:32,690 --> 00:31:38,889
more browser fire any ideas really

00:31:41,500 --> 00:31:46,310
it's a bit rigged they're actually

00:31:44,270 --> 00:31:48,650
exactly the same so that the network

00:31:46,310 --> 00:31:51,140
variation was was the biggest factor in

00:31:48,650 --> 00:31:52,850
the test and on average they were

00:31:51,140 --> 00:31:55,010
actually around exactly the same range

00:31:52,850 --> 00:31:57,200
and this is quite amazing it means that

00:31:55,010 --> 00:31:59,060
speedy pushed really can replace

00:31:57,200 --> 00:32:00,410
bundling concatenation techniques and

00:31:59,060 --> 00:32:03,590
more tests need to be done like this

00:32:00,410 --> 00:32:05,060
that really test for example with style

00:32:03,590 --> 00:32:07,910
sheets if you have an important of style

00:32:05,060 --> 00:32:10,220
sheets instead of in lining it use user

00:32:07,910 --> 00:32:12,650
server that can speedy push those and we

00:32:10,220 --> 00:32:14,180
need a not a lot more things that can

00:32:12,650 --> 00:32:15,590
measure this and show that it really can

00:32:14,180 --> 00:32:18,050
replace bundling because i think it's

00:32:15,590 --> 00:32:19,520
looking very promising and it would be

00:32:18,050 --> 00:32:21,370
quite amazing because it really changed

00:32:19,520 --> 00:32:23,660
development workflow is quite a lot if

00:32:21,370 --> 00:32:25,910
if you don't need to do these bundling

00:32:23,660 --> 00:32:29,240
builds if you don't need to do anything

00:32:25,910 --> 00:32:30,680
like that any concatenation acts I think

00:32:29,240 --> 00:32:32,480
that's quite an exciting future for the

00:32:30,680 --> 00:32:37,160
web I think it's a pretty pretty nice

00:32:32,480 --> 00:32:39,830
way to develop so I started out creating

00:32:37,160 --> 00:32:43,390
a framework it was very ambitious I

00:32:39,830 --> 00:32:45,500
wanted to like create a component and

00:32:43,390 --> 00:32:47,480
obviously this is a much bigger problem

00:32:45,500 --> 00:32:48,740
than anyone can work on and it's solved

00:32:47,480 --> 00:32:50,420
by teams of people working on different

00:32:48,740 --> 00:32:53,180
technologies from speedy to web

00:32:50,420 --> 00:32:56,470
components to new generations of servers

00:32:53,180 --> 00:32:59,180
and cdns and new development techniques

00:32:56,470 --> 00:33:00,650
but the great thing was in the process I

00:32:59,180 --> 00:33:04,520
got involved in the es6 module loader

00:33:00,650 --> 00:33:06,500
and working on system Jess which is it's

00:33:04,520 --> 00:33:08,840
great table to work on some part of that

00:33:06,500 --> 00:33:12,760
and I've really enjoyed working on these

00:33:08,840 --> 00:33:16,340
projects these are good to use today

00:33:12,760 --> 00:33:18,590
system j s will work in IE 9 plus if

00:33:16,340 --> 00:33:20,480
anyone wants i ate support it's possible

00:33:18,590 --> 00:33:23,480
i'm looking for someone to help sponsor

00:33:20,480 --> 00:33:26,990
that developments in a nutshell JSP I'm

00:33:23,480 --> 00:33:28,670
started out as from that idea that I

00:33:26,990 --> 00:33:30,350
just wanted to be able to easily require

00:33:28,670 --> 00:33:32,000
something and be able to just share a

00:33:30,350 --> 00:33:35,870
component by giving someone in module

00:33:32,000 --> 00:33:38,630
name and saying load that and it became

00:33:35,870 --> 00:33:42,010
a package manager for system j s which i

00:33:38,630 --> 00:33:44,000
think is quite a strong foundation so

00:33:42,010 --> 00:33:47,000
thank you very much for listening and

00:33:44,000 --> 00:33:48,530
please try these projects outs let me

00:33:47,000 --> 00:33:50,160
know your feedback on them it's not

00:33:48,530 --> 00:33:51,660
something i can do on my own

00:33:50,160 --> 00:33:53,460
I've reached I've got so far on my own

00:33:51,660 --> 00:33:55,140
but I really now need feedback from

00:33:53,460 --> 00:33:57,360
other people and other people to help me

00:33:55,140 --> 00:33:58,380
with these projects so so please try

00:33:57,360 --> 00:34:01,130
them out and let me know what you think

00:33:58,380 --> 00:34:01,130

YouTube URL: https://www.youtube.com/watch?v=MXzQP38mdnE


