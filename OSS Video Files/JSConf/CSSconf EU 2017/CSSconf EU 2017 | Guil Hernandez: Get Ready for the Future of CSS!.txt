Title: CSSconf EU 2017 | Guil Hernandez: Get Ready for the Future of CSS!
Publication date: 2017-06-06
Playlist: CSSconf EU 2017
Description: 
	http://2017.cssconf.eu/speakers/guil-hernandez.html

It’s time to start thinking about new and upcoming CSS features that will boost your workflow and give you more power and flexibility when building your projects. This talk covers the latest CSS features, including: color manipulation, custom properties, selectors level 4, and what's new in media queries. We’ll also have a look at in-browser design features like blend modes and clip-path.
Captions: 
	00:00:00,750 --> 00:00:12,920
[Music]

00:00:10,670 --> 00:00:16,020
thanks Jessica

00:00:12,920 --> 00:00:17,820
alright thanks so much everyone good

00:00:16,020 --> 00:00:19,410
afternoon thanks so much for having me

00:00:17,820 --> 00:00:21,420
here it's my first time in Berlin in

00:00:19,410 --> 00:00:22,890
Germany in general had a great time

00:00:21,420 --> 00:00:24,600
meeting a lot of you and just learning

00:00:22,890 --> 00:00:25,350
so much from some of the attendings here

00:00:24,600 --> 00:00:27,599
um

00:00:25,350 --> 00:00:29,820
I'm Gil Hernandez coming to you from

00:00:27,599 --> 00:00:30,960
South Florida and I work at treehouse

00:00:29,820 --> 00:00:33,300
I'm the front-end web development

00:00:30,960 --> 00:00:36,420
teacher and treehouse we have

00:00:33,300 --> 00:00:38,190
programming courses and printing web

00:00:36,420 --> 00:00:40,680
development courses online technology

00:00:38,190 --> 00:00:42,960
school I specifically teach courses

00:00:40,680 --> 00:00:45,930
about two FS JavaScript and most

00:00:42,960 --> 00:00:48,809
recently react you can find me on the

00:00:45,930 --> 00:00:52,199
Twitter's as a QH and most places on the

00:00:48,809 --> 00:00:53,579
Internet and I love CSS right that's why

00:00:52,199 --> 00:00:55,410
I'm here that's one of my favorite

00:00:53,579 --> 00:00:57,300
subjects to teach and talk about so

00:00:55,410 --> 00:00:59,100
today I'm going to be talking about some

00:00:57,300 --> 00:01:01,020
of the more fascinating and interesting

00:00:59,100 --> 00:01:03,589
things happening in CSS right now

00:01:01,020 --> 00:01:07,200
because CSS now provides some really

00:01:03,589 --> 00:01:09,229
amazing tools right that empower us more

00:01:07,200 --> 00:01:11,549
than ever before and gives us more

00:01:09,229 --> 00:01:14,790
flexibility over things like design and

00:01:11,549 --> 00:01:18,360
images effects design layout colors even

00:01:14,790 --> 00:01:20,310
managing and reusing values right so if

00:01:18,360 --> 00:01:22,350
you haven't started using or looking to

00:01:20,310 --> 00:01:24,659
new these features yet I'm going to

00:01:22,350 --> 00:01:26,009
cover just enough to get to using them

00:01:24,659 --> 00:01:28,350
and help you begin leveraging these

00:01:26,009 --> 00:01:29,430
features to empower your workflows and

00:01:28,350 --> 00:01:31,409
improve your projects and we're going to

00:01:29,430 --> 00:01:33,390
be looking at a little bit of code and

00:01:31,409 --> 00:01:35,850
lots of demos in the next 30 minutes or

00:01:33,390 --> 00:01:38,610
so but I am going to put this aside

00:01:35,850 --> 00:01:39,780
after the talk and for timing reasons

00:01:38,610 --> 00:01:41,790
I'm not going to go into too much about

00:01:39,780 --> 00:01:44,399
browser support but at the end we'll be

00:01:41,790 --> 00:01:48,450
a resources slide with some links to

00:01:44,399 --> 00:01:49,680
that so let's kick things up by talking

00:01:48,450 --> 00:01:53,159
about CSS variables

00:01:49,680 --> 00:01:55,470
aka custom property so we know that CSS

00:01:53,159 --> 00:01:58,079
can be immensely repetitive right and

00:01:55,470 --> 00:02:00,390
maintaining it can be cumbersome now if

00:01:58,079 --> 00:02:02,729
you're using a preprocessor like that

00:02:00,390 --> 00:02:04,469
you already used to declaring variables

00:02:02,729 --> 00:02:07,049
and keeping track of values in your

00:02:04,469 --> 00:02:08,369
style sheet well as we all kind of know

00:02:07,049 --> 00:02:10,890
since not too long ago you can

00:02:08,369 --> 00:02:13,080
add variables directly in CFS and like

00:02:10,890 --> 00:02:15,030
variables and pre-processors CSS

00:02:13,080 --> 00:02:16,980
variables they hold references to values

00:02:15,030 --> 00:02:18,269
that then you can reference to write

00:02:16,980 --> 00:02:20,640
your style sheets but there's plenty of

00:02:18,269 --> 00:02:23,879
differences to using CSS variables over

00:02:20,640 --> 00:02:26,400
preprocessor variables and they're

00:02:23,879 --> 00:02:28,170
formerly known as custom properties

00:02:26,400 --> 00:02:29,670
because you declare them using a new

00:02:28,170 --> 00:02:31,409
custom property syntax that means you

00:02:29,670 --> 00:02:33,659
can name them anything you want as long

00:02:31,409 --> 00:02:35,370
as you prefix them with those two dashes

00:02:33,659 --> 00:02:37,319
you go Songo value then refer to that

00:02:35,370 --> 00:02:38,970
property name and your CSS to use the

00:02:37,319 --> 00:02:40,650
value now for example if you're

00:02:38,970 --> 00:02:42,359
repeating the same color value in

00:02:40,650 --> 00:02:45,060
different places you can create a

00:02:42,359 --> 00:02:46,739
variable that so your font size or base

00:02:45,060 --> 00:02:48,329
color you set it to the repeated valid

00:02:46,739 --> 00:02:50,250
like you would a regular CSS property

00:02:48,329 --> 00:02:52,859
and what's cool is that they follow the

00:02:50,250 --> 00:02:54,329
rules of the Cascade so you first have

00:02:52,859 --> 00:02:56,670
to declare them on some element and

00:02:54,329 --> 00:02:58,409
you'll often declare variables that will

00:02:56,670 --> 00:03:02,459
be referenced by many elements like your

00:02:58,409 --> 00:03:04,650
base color or based on size on the root

00:03:02,459 --> 00:03:07,440
right so we have to scope them to an

00:03:04,650 --> 00:03:09,390
element usually the the root and what

00:03:07,440 --> 00:03:11,609
that does it's Cookson at the highest

00:03:09,390 --> 00:03:13,560
level of the Cascade that way the values

00:03:11,609 --> 00:03:15,450
are available everywhere and they can be

00:03:13,560 --> 00:03:16,799
referenced and inherited by all elements

00:03:15,450 --> 00:03:18,900
now the browser doesn't do anything

00:03:16,799 --> 00:03:20,910
right with a custom property or a robot

00:03:18,900 --> 00:03:23,910
first so to call the value you have to

00:03:20,910 --> 00:03:25,980
use the VAR function to reference the

00:03:23,910 --> 00:03:27,989
valued rather now with bar in place you

00:03:25,980 --> 00:03:29,459
know anytime you change the value for

00:03:27,989 --> 00:03:32,069
the constant property it gets propagated

00:03:29,459 --> 00:03:34,680
it gets passed down along to wherever

00:03:32,069 --> 00:03:36,150
it's being used and it makes your CSS

00:03:34,680 --> 00:03:38,699
work a little less error-prone

00:03:36,150 --> 00:03:41,040
and a bit easier right now a property

00:03:38,699 --> 00:03:43,379
value can contain more than one bar

00:03:41,040 --> 00:03:45,989
function like you see here that's use

00:03:43,379 --> 00:03:48,209
two bars to define a gradient it's also

00:03:45,989 --> 00:03:49,680
possible to assign a value to custom

00:03:48,209 --> 00:03:51,660
property using other variables like in

00:03:49,680 --> 00:03:52,980
this gradient custom property here and

00:03:51,660 --> 00:03:55,230
you can use them for fonts backs

00:03:52,980 --> 00:03:57,480
layout styles and so on so on to about

00:03:55,230 --> 00:03:59,910
code duplication now this isn't terribly

00:03:57,480 --> 00:04:01,859
exciting just yet right because we've

00:03:59,910 --> 00:04:05,849
been able to do this for some time with

00:04:01,859 --> 00:04:08,340
fasts or blasts and other imposed CSS

00:04:05,849 --> 00:04:11,190
right well custom properties weren't

00:04:08,340 --> 00:04:13,680
created just to be the CSS equivalent of

00:04:11,190 --> 00:04:15,060
preprocessor variables or even offer the

00:04:13,680 --> 00:04:17,769
same functionality right they can also

00:04:15,060 --> 00:04:21,699
do lots and lots of things that

00:04:17,769 --> 00:04:24,129
sister's camp so let's look at why the

00:04:21,699 --> 00:04:26,889
pre-processors in CSS variables they're

00:04:24,129 --> 00:04:28,240
like two different entities it's like

00:04:26,889 --> 00:04:30,639
they live in two completely different

00:04:28,240 --> 00:04:33,580
worlds first preprocessors they don't

00:04:30,639 --> 00:04:35,830
run on the browser and they live in a

00:04:33,580 --> 00:04:37,870
source file on your machine right and

00:04:35,830 --> 00:04:39,729
the preprocessors replaced variables

00:04:37,870 --> 00:04:41,949
with static values and they're compiled

00:04:39,729 --> 00:04:43,419
to CSS and the browser knows nothing

00:04:41,949 --> 00:04:45,370
about those variables in the variables

00:04:43,419 --> 00:04:48,669
themselves know nothing about your Dom

00:04:45,370 --> 00:04:52,240
structure now on the other hand CSS

00:04:48,669 --> 00:04:54,190
variables are entirely more flexible

00:04:52,240 --> 00:04:56,199
than preprocessor variables but so when

00:04:54,190 --> 00:04:58,569
you update the value of a CSS variable

00:04:56,199 --> 00:04:59,530
about the browser updates it anywhere

00:04:58,569 --> 00:05:01,000
it's referenced and it does it have

00:04:59,530 --> 00:05:03,580
runtime so this makes them incredibly

00:05:01,000 --> 00:05:05,169
dynamic and it opens up lots of other

00:05:03,580 --> 00:05:07,330
interesting possibilities and just

00:05:05,169 --> 00:05:08,860
replacing colors and font values so

00:05:07,330 --> 00:05:11,289
let's look at some those for example in

00:05:08,860 --> 00:05:12,400
fact you can't update the value of a

00:05:11,289 --> 00:05:14,289
variable

00:05:12,400 --> 00:05:16,180
from within a meteor query right but you

00:05:14,289 --> 00:05:18,370
can with CSS variables you can update

00:05:16,180 --> 00:05:20,289
them live inside media queries so for

00:05:18,370 --> 00:05:22,630
example we have this gutter variable

00:05:20,289 --> 00:05:24,909
here and it's initially scoped to the

00:05:22,630 --> 00:05:26,229
root element and then it's reference

00:05:24,909 --> 00:05:28,360
within the rule such that need a gutter

00:05:26,229 --> 00:05:30,310
with far and then you can use media

00:05:28,360 --> 00:05:32,289
queries to provide these new contacts

00:05:30,310 --> 00:05:33,940
that redefined the value of the gutter

00:05:32,289 --> 00:05:36,130
at certain break points so you can see

00:05:33,940 --> 00:05:38,020
that gutter property the values are

00:05:36,130 --> 00:05:39,819
updated live at each breakpoint right

00:05:38,020 --> 00:05:42,580
the values themselves are sort of

00:05:39,819 --> 00:05:45,310
responsive to that now CSS custom

00:05:42,580 --> 00:05:46,750
properties or variables they behave like

00:05:45,310 --> 00:05:49,539
regular property so that means they can

00:05:46,750 --> 00:05:52,509
inherit cascade and they can be scoped

00:05:49,539 --> 00:05:54,400
to any selector so here we have the

00:05:52,509 --> 00:05:56,110
space button class right and users

00:05:54,400 --> 00:05:58,060
variable to set the background color of

00:05:56,110 --> 00:06:01,270
the buttons and then instead of defining

00:05:58,060 --> 00:06:02,889
that button BG variable at the root

00:06:01,270 --> 00:06:04,690
scope like we did earlier we can declare

00:06:02,889 --> 00:06:06,580
it on different selectors like button

00:06:04,690 --> 00:06:08,469
modifier classes here right button call

00:06:06,580 --> 00:06:10,360
out button info and then we assign the

00:06:08,469 --> 00:06:12,969
values there and those selectors they

00:06:10,360 --> 00:06:15,009
provide a new scope and what's great is

00:06:12,969 --> 00:06:17,889
the properties they get resolved

00:06:15,009 --> 00:06:19,900
according to the normal and inherit and

00:06:17,889 --> 00:06:22,270
inheritance cascading rule size so the

00:06:19,900 --> 00:06:24,310
browser or updates values of that button

00:06:22,270 --> 00:06:26,680
I've just based on the class or the Dom

00:06:24,310 --> 00:06:30,370
element the variable scope to you can

00:06:26,680 --> 00:06:31,540
even update CSS variables inline within

00:06:30,370 --> 00:06:32,860
the style attribute

00:06:31,540 --> 00:06:35,260
that's sort of how live they are in the

00:06:32,860 --> 00:06:37,870
browser array so scoping CSS variables

00:06:35,260 --> 00:06:39,550
to Dom elements gives us even more

00:06:37,870 --> 00:06:42,820
interesting possibility since they

00:06:39,550 --> 00:06:44,560
follow the Cascade and inheritance we

00:06:42,820 --> 00:06:46,510
can and we could style them based on

00:06:44,560 --> 00:06:48,310
where they appear in the Dom so in other

00:06:46,510 --> 00:06:50,530
words were going to efficiently set how

00:06:48,310 --> 00:06:51,970
an element looks right when it's inside

00:06:50,530 --> 00:06:54,850
of another element look variable so for

00:06:51,970 --> 00:06:56,470
example to update the styles of a button

00:06:54,850 --> 00:06:59,470
component just based on whether it

00:06:56,470 --> 00:07:02,320
appears inside a a banner a card or a

00:06:59,470 --> 00:07:03,610
modal class you might create descendant

00:07:02,320 --> 00:07:05,860
selectors like this to do that right

00:07:03,610 --> 00:07:08,320
well with CSS variables we can update

00:07:05,860 --> 00:07:10,600
the styles without having to write these

00:07:08,320 --> 00:07:12,400
kind of complex selectors or descendant

00:07:10,600 --> 00:07:14,470
selectors that is going to couple your

00:07:12,400 --> 00:07:15,730
CSS to the Dom structure so what this

00:07:14,470 --> 00:07:17,770
does is it makes the components you

00:07:15,730 --> 00:07:19,570
build a completely expensive alright so

00:07:17,770 --> 00:07:22,690
now the button can display different

00:07:19,570 --> 00:07:25,360
font size a color background or any

00:07:22,690 --> 00:07:26,950
property just based on where it appears

00:07:25,360 --> 00:07:29,830
on the page and the CSS variables

00:07:26,950 --> 00:07:31,930
declared on its parent so here that this

00:07:29,830 --> 00:07:33,610
button rule is the CSS properties whose

00:07:31,930 --> 00:07:37,450
values we want to update dynamically

00:07:33,610 --> 00:07:40,480
with variables and then to change how

00:07:37,450 --> 00:07:42,340
that button appears inside a banner a

00:07:40,480 --> 00:07:44,830
card or a modal you define the different

00:07:42,340 --> 00:07:47,440
variables inside the selectors so now

00:07:44,830 --> 00:07:50,140
any button class that's a descendant of

00:07:47,440 --> 00:07:51,850
banner art or modal can inherit these

00:07:50,140 --> 00:07:53,200
properties and the best part is that you

00:07:51,850 --> 00:07:55,570
don't have to know anything about the

00:07:53,200 --> 00:07:58,900
context right we get this perfectly be

00:07:55,570 --> 00:08:02,020
mobile and reusable button clone you can

00:07:58,900 --> 00:08:04,510
also do simple calculations with CSS

00:08:02,020 --> 00:08:06,670
variables so here I handed use cases

00:08:04,510 --> 00:08:08,230
using the calc function to perform

00:08:06,670 --> 00:08:10,600
calculations that determine your length

00:08:08,230 --> 00:08:14,160
value so this is using variables to

00:08:10,600 --> 00:08:17,290
build pixel and values for margins

00:08:14,160 --> 00:08:20,880
now the variables cannot only be updated

00:08:17,290 --> 00:08:23,440
using inheritance as we saw earlier and

00:08:20,880 --> 00:08:25,030
David's talk you can also interact with

00:08:23,440 --> 00:08:27,700
them right using JavaScript you can get

00:08:25,030 --> 00:08:29,680
and set a CSS values from your

00:08:27,700 --> 00:08:31,210
JavaScript and that's where things start

00:08:29,680 --> 00:08:32,500
to get really interesting right so in

00:08:31,210 --> 00:08:34,450
this simple demo we had the ball that's

00:08:32,500 --> 00:08:35,650
moving around the page and it's just

00:08:34,450 --> 00:08:38,229
based on where you click on that page

00:08:35,650 --> 00:08:40,630
right now the background color and the

00:08:38,229 --> 00:08:43,160
CSS transform properties are all being

00:08:40,630 --> 00:08:46,580
updated live with JavaScript

00:08:43,160 --> 00:08:48,590
and the way you interact with the CFX

00:08:46,580 --> 00:08:50,240
variables with JavaScript is with the

00:08:48,590 --> 00:08:53,380
get property value and set property

00:08:50,240 --> 00:08:55,640
methods so back to the ball animation

00:08:53,380 --> 00:08:57,470
this uses variables right to set the

00:08:55,640 --> 00:08:59,690
values for the background color and the

00:08:57,470 --> 00:09:02,150
XY translation values being created with

00:08:59,690 --> 00:09:04,310
alpha and then in your JavaScript it's

00:09:02,150 --> 00:09:06,320
able to set the background color and

00:09:04,310 --> 00:09:07,340
those translation values with a set

00:09:06,320 --> 00:09:09,020
property method so here we're just

00:09:07,340 --> 00:09:10,940
setting the values and not getting them

00:09:09,020 --> 00:09:13,160
so for example within a click event

00:09:10,940 --> 00:09:15,470
listener sending the translation values

00:09:13,160 --> 00:09:17,090
to those XY coordinates at which the

00:09:15,470 --> 00:09:19,190
clicking happens with position x

00:09:17,090 --> 00:09:21,320
position Y properties and then to change

00:09:19,190 --> 00:09:24,350
the background color values setting that

00:09:21,320 --> 00:09:27,800
that ball BG property to random X L with

00:09:24,350 --> 00:09:30,440
a helper function there so now that

00:09:27,800 --> 00:09:32,630
you've seen how and where CSS variables

00:09:30,440 --> 00:09:35,300
work you should know where they do not

00:09:32,630 --> 00:09:37,670
work so you cannot use CSS variables and

00:09:35,300 --> 00:09:39,470
selectors you can't use them in property

00:09:37,670 --> 00:09:42,050
names either you can only use them in

00:09:39,470 --> 00:09:44,030
values they're also not valid in media

00:09:42,050 --> 00:09:45,950
query expressions which is kind of a

00:09:44,030 --> 00:09:47,660
bummer I wish they were and you can't

00:09:45,950 --> 00:09:49,660
use them to create length values like

00:09:47,660 --> 00:09:52,670
the middle box rule here that's invalid

00:09:49,660 --> 00:09:56,080
and again you should use calc to build

00:09:52,670 --> 00:09:56,080
your length values using CSS variables

00:09:56,110 --> 00:10:04,310
cool so let's switch gears here the the

00:10:01,100 --> 00:10:07,700
evolution of CSS keeps providing more

00:10:04,310 --> 00:10:09,380
and more ways to help us make creative

00:10:07,700 --> 00:10:11,390
decisions in the browser right because

00:10:09,380 --> 00:10:13,580
many of today's features resemble a lot

00:10:11,390 --> 00:10:15,860
of tools you'd normally use in your

00:10:13,580 --> 00:10:18,140
graphics editor so blend modes or

00:10:15,860 --> 00:10:20,210
example you might have worked with some

00:10:18,140 --> 00:10:22,780
of these now blend modes are part of the

00:10:20,210 --> 00:10:25,220
compositing and blending CSS spec

00:10:22,780 --> 00:10:27,560
compositing meaning combining two or

00:10:25,220 --> 00:10:30,410
more elements into one like compositing

00:10:27,560 --> 00:10:32,750
an image with its backdrop and blending

00:10:30,410 --> 00:10:35,030
is a form of compositing that calculates

00:10:32,750 --> 00:10:37,610
the mixing of colors wherever an element

00:10:35,030 --> 00:10:38,810
in its background over overlaps so it

00:10:37,610 --> 00:10:41,450
defines how those colors mix in the

00:10:38,810 --> 00:10:44,780
overlapping areas and CSS gives us two

00:10:41,450 --> 00:10:45,950
properties to create and blend elements

00:10:44,780 --> 00:10:48,350
together so we have a background blend

00:10:45,950 --> 00:10:50,330
mode mix blend mode and let's take a

00:10:48,350 --> 00:10:53,420
look at some of these so the background

00:10:50,330 --> 00:10:55,370
blend mode properly blends an element

00:10:53,420 --> 00:10:55,910
with background layer and the background

00:10:55,370 --> 00:10:59,450
can be an

00:10:55,910 --> 00:11:01,340
a gradient that can be a color and so

00:10:59,450 --> 00:11:03,920
for example in this header rule here we

00:11:01,340 --> 00:11:06,170
are blending a background image with a

00:11:03,920 --> 00:11:07,820
linear gradient and then we're given it

00:11:06,170 --> 00:11:09,530
a background blend with a multiply which

00:11:07,820 --> 00:11:11,810
it's a common value for that

00:11:09,530 --> 00:11:13,970
now what multiply does is it modifies

00:11:11,810 --> 00:11:15,200
the background area by multiplying the

00:11:13,970 --> 00:11:17,510
colors in the image

00:11:15,200 --> 00:11:19,160
by the colors of the linear gradient in

00:11:17,510 --> 00:11:21,890
this particular combination makes for

00:11:19,160 --> 00:11:23,840
more vibrant and a beautiful background

00:11:21,890 --> 00:11:25,490
image right you'll find that the

00:11:23,840 --> 00:11:27,710
background blend mode options are very

00:11:25,490 --> 00:11:30,260
similar to ones you'd find in Photoshop

00:11:27,710 --> 00:11:32,750
rides you have screening overlay dark

00:11:30,260 --> 00:11:34,640
and saturation and a bunch more now

00:11:32,750 --> 00:11:38,540
mixed blend mode is a little different

00:11:34,640 --> 00:11:41,720
in that it blends the the content of an

00:11:38,540 --> 00:11:43,010
SVG or HTML element with any content

00:11:41,720 --> 00:11:45,470
that's painted underneath it so we're

00:11:43,010 --> 00:11:47,030
not just limited to background areas so

00:11:45,470 --> 00:11:49,580
that means you can blend or a composite

00:11:47,030 --> 00:11:52,520
two or more embedded images together so

00:11:49,580 --> 00:11:54,950
for example here this image is inside a

00:11:52,520 --> 00:11:56,810
header it has a dark background area and

00:11:54,950 --> 00:11:59,120
what CSS we can seamlessly blend them

00:11:56,810 --> 00:12:00,980
together by setting the images mix blend

00:11:59,120 --> 00:12:06,350
mode to lighten because of that dark

00:12:00,980 --> 00:12:08,390
area now when I found out that you could

00:12:06,350 --> 00:12:10,520
blend an image element with a background

00:12:08,390 --> 00:12:12,620
layer I started using the explained mode

00:12:10,520 --> 00:12:14,510
to help give my grayscale images some

00:12:12,620 --> 00:12:16,580
life right and in color and create

00:12:14,510 --> 00:12:18,800
custom sets of colors for images so for

00:12:16,580 --> 00:12:20,780
example it's rounded image and I did

00:12:18,800 --> 00:12:22,070
have to place it inside additive or

00:12:20,780 --> 00:12:24,440
inside a containing element to do this

00:12:22,070 --> 00:12:25,880
but you can give that div or a

00:12:24,440 --> 00:12:27,860
containing element a background color or

00:12:25,880 --> 00:12:30,740
a gradient and then for instance use

00:12:27,860 --> 00:12:34,250
multiply to just blend it together with

00:12:30,740 --> 00:12:35,900
the background of its parent and what's

00:12:34,250 --> 00:12:37,850
cool that great scale images tend to

00:12:35,900 --> 00:12:40,070
have smaller file sizes than color

00:12:37,850 --> 00:12:41,840
images so you can take advantage of that

00:12:40,070 --> 00:12:43,880
in these grayscale images and explain

00:12:41,840 --> 00:12:47,300
those to apply pretty much any series of

00:12:43,880 --> 00:12:49,040
colors to your images and you could also

00:12:47,300 --> 00:12:51,620
do this with SVG right you can use the

00:12:49,040 --> 00:12:53,750
image element to render a raster image

00:12:51,620 --> 00:12:55,460
and you give the SVG a background and

00:12:53,750 --> 00:12:56,990
then you use your mix blend mode and

00:12:55,460 --> 00:12:59,780
this way you avoid writing some of that

00:12:56,990 --> 00:13:01,770
extra CSS that's required to make that

00:12:59,780 --> 00:13:06,030
image fit inside that if

00:13:01,770 --> 00:13:08,130
ah and here's another example of explain

00:13:06,030 --> 00:13:10,320
mode being used to create that knock out

00:13:08,130 --> 00:13:11,670
text effect and for this one it's kind

00:13:10,320 --> 00:13:14,040
of slow but I animated the background

00:13:11,670 --> 00:13:16,260
right so you can really see that the

00:13:14,040 --> 00:13:20,790
true blending and compositing power of

00:13:16,260 --> 00:13:23,880
mix blend mode now another one of my

00:13:20,790 --> 00:13:25,530
favorites new cssm it effects that isn't

00:13:23,880 --> 00:13:28,320
part of blending and compositing but it

00:13:25,530 --> 00:13:30,840
is part of the filters level two spec is

00:13:28,320 --> 00:13:33,120
back drop filter so if you've worked

00:13:30,840 --> 00:13:35,670
with CSS filters you know that you can

00:13:33,120 --> 00:13:38,280
apply a series of these filter Photoshop

00:13:35,670 --> 00:13:40,350
like effects HTML elementally you can

00:13:38,280 --> 00:13:42,510
have a blur drop shadow very scale

00:13:40,350 --> 00:13:45,420
contracts and invert and a bunch of

00:13:42,510 --> 00:13:47,070
others well the backdrop filter property

00:13:45,420 --> 00:13:49,890
lets you add some of those same effects

00:13:47,070 --> 00:13:52,410
but to the area behind an element right

00:13:49,890 --> 00:13:54,240
so the way this works it needs at least

00:13:52,410 --> 00:13:57,180
two elements to work property properly

00:13:54,240 --> 00:13:59,940
the backdrop filter feature so you need

00:13:57,180 --> 00:14:01,970
a target element that you apply the

00:13:59,940 --> 00:14:04,920
filter to like our field to a rule here

00:14:01,970 --> 00:14:06,780
and then you need to element behind or

00:14:04,920 --> 00:14:08,040
underneath the target and that's the

00:14:06,780 --> 00:14:09,960
backdrop area that's the area that's

00:14:08,040 --> 00:14:11,670
going to be affected by and you apply

00:14:09,960 --> 00:14:15,060
the filter effects do so for instance

00:14:11,670 --> 00:14:16,590
this is setting the backdrop filter to

00:14:15,060 --> 00:14:18,570
invert the colors by a hundred percent

00:14:16,590 --> 00:14:21,090
and blend them by two pixels so it's so

00:14:18,570 --> 00:14:24,000
any area behind that and see I made this

00:14:21,090 --> 00:14:30,360
draggable so yep so that that's the

00:14:24,000 --> 00:14:31,620
filter element here which so if you take

00:14:30,360 --> 00:14:33,270
a look at this later you'll see when you

00:14:31,620 --> 00:14:35,280
drag it around you can see the colors in

00:14:33,270 --> 00:14:39,330
Kurt in the background oh here we go

00:14:35,280 --> 00:14:41,100
I like doing it here there it is there

00:14:39,330 --> 00:14:42,300
we go so yeah so the colors are

00:14:41,100 --> 00:14:44,960
inverting and then the backdrop here

00:14:42,300 --> 00:14:44,960
it's being blended

00:14:47,170 --> 00:14:52,220
now the backdrop filters can also

00:14:49,280 --> 00:14:55,030
enhance the models and overlay than your

00:14:52,220 --> 00:14:57,380
design so for instance this overlay box

00:14:55,030 --> 00:14:59,660
there's a filter behind it that blurs

00:14:57,380 --> 00:15:02,060
the dye for an area and darkens the hue

00:14:59,660 --> 00:15:04,100
to draw more attention to that overlay

00:15:02,060 --> 00:15:06,170
box and the content and there animatable

00:15:04,100 --> 00:15:07,880
to that's one of the best parts so you

00:15:06,170 --> 00:15:10,070
till you have a gallery or a product

00:15:07,880 --> 00:15:10,760
page where you need to click to expand

00:15:10,070 --> 00:15:13,220
something right

00:15:10,760 --> 00:15:14,360
well backdrop filter can enhance that

00:15:13,220 --> 00:15:16,130
and make it more interesting so here

00:15:14,360 --> 00:15:18,740
it's blurring the background and

00:15:16,130 --> 00:15:20,420
adjusting the hue when the image scales

00:15:18,740 --> 00:15:23,030
up so being able to apply these kind of

00:15:20,420 --> 00:15:25,730
blending and filtering effects the HTML

00:15:23,030 --> 00:15:27,380
elements just with CFS really gives us a

00:15:25,730 --> 00:15:31,010
lot of power and flexibility when we're

00:15:27,380 --> 00:15:33,910
designing and building our projects now

00:15:31,010 --> 00:15:35,980
in a similar vein one feature that is

00:15:33,910 --> 00:15:38,210
sort of letting us break out of that

00:15:35,980 --> 00:15:40,550
commonplace rectangular nature

00:15:38,210 --> 00:15:42,470
displaying content on the web if CSS

00:15:40,550 --> 00:15:45,590
shapes because our designs usually

00:15:42,470 --> 00:15:47,150
consist of shapes like polygons and

00:15:45,590 --> 00:15:49,340
circles but our content is usually

00:15:47,150 --> 00:15:51,170
contained with these rectangular boxes

00:15:49,340 --> 00:15:53,840
well shapes provide a whole new way to

00:15:51,170 --> 00:15:55,010
set our how our context wraps or flows

00:15:53,840 --> 00:15:58,490
on the page so we're able to use

00:15:55,010 --> 00:16:00,890
geometric shapes as CSS values and have

00:15:58,490 --> 00:16:03,530
our text flow around those shapes so for

00:16:00,890 --> 00:16:05,780
now the the shapes feature only works on

00:16:03,530 --> 00:16:07,640
floated element using the new shape

00:16:05,780 --> 00:16:10,280
outside property so for instance we can

00:16:07,640 --> 00:16:13,040
take this circular image here float it

00:16:10,280 --> 00:16:15,650
left in our design and then define an

00:16:13,040 --> 00:16:16,940
out shape outside property to turn on

00:16:15,650 --> 00:16:19,100
the safe feature that's what makes it

00:16:16,940 --> 00:16:20,990
work and then the value you see here the

00:16:19,100 --> 00:16:23,840
circle function that's the new function

00:16:20,990 --> 00:16:25,970
that's going to create the CSS shape

00:16:23,840 --> 00:16:28,460
it's a for example it's going to set the

00:16:25,970 --> 00:16:30,590
inline text to flow around the circular

00:16:28,460 --> 00:16:32,030
shape of the image so that's pretty neat

00:16:30,590 --> 00:16:35,180
but what's what's interesting is that

00:16:32,030 --> 00:16:37,940
you can also leverage the box model and

00:16:35,180 --> 00:16:41,120
use regular box model keyword values to

00:16:37,940 --> 00:16:43,490
flow content around a circular image for

00:16:41,120 --> 00:16:45,680
example so the image already uses a

00:16:43,490 --> 00:16:47,930
border radius to create that circle or

00:16:45,680 --> 00:16:50,060
effect so instead of having a browser to

00:16:47,930 --> 00:16:53,180
do a little bit of extra work to

00:16:50,060 --> 00:16:55,640
redefine a circular shape you can set

00:16:53,180 --> 00:16:56,940
shape outside to border box all pretty

00:16:55,640 --> 00:16:59,130
familiar with that

00:16:56,940 --> 00:17:01,830
and then the text will follow the outer

00:16:59,130 --> 00:17:05,340
image the outer wrap images circular

00:17:01,830 --> 00:17:06,990
border now the way you apply a margin

00:17:05,340 --> 00:17:08,730
when you're using these box model

00:17:06,990 --> 00:17:11,250
keyword values is with the new shape

00:17:08,730 --> 00:17:13,110
margin property as per example here

00:17:11,250 --> 00:17:15,420
we're setting it to 20 pixels and this

00:17:13,110 --> 00:17:19,320
is also a new new property of the shapes

00:17:15,420 --> 00:17:20,250
module now the polygon function that's

00:17:19,320 --> 00:17:23,220
the one that's going to give you

00:17:20,250 --> 00:17:25,650
unlimited shaped possibilities in your

00:17:23,220 --> 00:17:28,170
design right with polygon you create a

00:17:25,650 --> 00:17:29,760
shape by defining those XY coordinates

00:17:28,170 --> 00:17:32,520
for each point in the polygon so for

00:17:29,760 --> 00:17:35,310
example you can set a text to flow

00:17:32,520 --> 00:17:37,500
around the right edge of a triangle

00:17:35,310 --> 00:17:38,610
using three polygon points and that will

00:17:37,500 --> 00:17:39,900
give you something like this you see the

00:17:38,610 --> 00:17:43,020
content wrapping around the right

00:17:39,900 --> 00:17:46,680
slanted edge this one's a little bit

00:17:43,020 --> 00:17:48,540
more complex I define multiple polygon

00:17:46,680 --> 00:17:50,970
points to set the heading in paragraph

00:17:48,540 --> 00:17:54,270
to flow around the contours of my

00:17:50,970 --> 00:17:57,540
coworker Nick and yeah use these the

00:17:54,270 --> 00:17:59,640
handy CSS shapes editor tool it's a

00:17:57,540 --> 00:18:01,230
Chrome extension to create this and a

00:17:59,640 --> 00:18:02,940
lot of the shapes I'd experiment with

00:18:01,230 --> 00:18:04,350
but polygon and if you haven't seen this

00:18:02,940 --> 00:18:06,930
yet it's an interactive shapes editor

00:18:04,350 --> 00:18:08,430
that lets you edit polygons points and

00:18:06,930 --> 00:18:10,050
you can immediately visualize how your

00:18:08,430 --> 00:18:13,950
the text is going to flow around the

00:18:10,050 --> 00:18:17,130
shape you set now a feature that works

00:18:13,950 --> 00:18:21,180
very well along take long side shapes is

00:18:17,130 --> 00:18:23,940
the clip pet so clipping is a longtime

00:18:21,180 --> 00:18:26,250
teacher of graphic design that's you

00:18:23,940 --> 00:18:29,130
stood partially or fully high parts of a

00:18:26,250 --> 00:18:31,710
graphics and CSS the clip path property

00:18:29,130 --> 00:18:33,570
lets you clip portions of an HTML

00:18:31,710 --> 00:18:35,610
element and like CSS J's we're not

00:18:33,570 --> 00:18:37,560
limited to rectangular clipping paths

00:18:35,610 --> 00:18:40,370
we're able to draw clipping regions with

00:18:37,560 --> 00:18:44,430
basic shapes polygon points even in SVG

00:18:40,370 --> 00:18:46,140
and so we use the clip path property and

00:18:44,430 --> 00:18:49,020
that's going to create a clipping region

00:18:46,140 --> 00:18:50,310
that will set the visible portions of an

00:18:49,020 --> 00:18:52,590
element so for example you can quickly

00:18:50,310 --> 00:18:54,360
and easily remove background portions of

00:18:52,590 --> 00:18:56,880
an image in your design for example this

00:18:54,360 --> 00:18:59,220
dark area here and we're giving clip

00:18:56,880 --> 00:19:00,540
paths the circle property it's a circle

00:18:59,220 --> 00:19:02,430
function and that's one of the basic

00:19:00,540 --> 00:19:04,870
shape functions that's going to define a

00:19:02,430 --> 00:19:06,940
clipping path

00:19:04,870 --> 00:19:09,490
so now any part outside of that clipping

00:19:06,940 --> 00:19:11,890
region they become hidden or or clipped

00:19:09,490 --> 00:19:14,799
right to reveal the circular image so

00:19:11,890 --> 00:19:17,200
using what's great is that using clip

00:19:14,799 --> 00:19:20,470
path and CSS shapes they work

00:19:17,200 --> 00:19:23,020
hand-in-hand so you can reuse your clip

00:19:20,470 --> 00:19:24,429
path values right - to define a shape

00:19:23,020 --> 00:19:25,900
around your clipping path they both use

00:19:24,429 --> 00:19:28,809
it exactly the same syntax that for

00:19:25,900 --> 00:19:30,309
example here we're providing the shape

00:19:28,809 --> 00:19:32,140
outside property the same exact circle

00:19:30,309 --> 00:19:33,520
function we gave clip back and that's

00:19:32,140 --> 00:19:39,159
going to flow the text around that clip

00:19:33,520 --> 00:19:41,440
region looks really wide there so in

00:19:39,159 --> 00:19:43,690
your markup you can also do this with

00:19:41,440 --> 00:19:47,049
SVG right so you use the the clip path

00:19:43,690 --> 00:19:49,330
SVG element inside it and you define all

00:19:47,049 --> 00:19:51,220
your polygon points and then in your CSS

00:19:49,330 --> 00:19:53,799
you can reference that clip app with the

00:19:51,220 --> 00:19:57,429
clip a property the URL function and

00:19:53,799 --> 00:19:59,080
then you call up the clip path ID and

00:19:57,429 --> 00:20:01,870
then that could produce something like

00:19:59,080 --> 00:20:03,820
this right so this is a heading with a

00:20:01,870 --> 00:20:05,620
div it with a background image and as

00:20:03,820 --> 00:20:07,899
you can see that the polygon points they

00:20:05,620 --> 00:20:09,789
follow the exact shapes of the

00:20:07,899 --> 00:20:12,130
mountaintops so as a result those

00:20:09,789 --> 00:20:16,000
portions get clipped and clip out the

00:20:12,130 --> 00:20:17,860
the bottom part of the text now to help

00:20:16,000 --> 00:20:19,570
you set clipping paths developer Bennett

00:20:17,860 --> 00:20:21,490
feely he built this really fun and

00:20:19,570 --> 00:20:23,559
useful tool it's an interactive tool

00:20:21,490 --> 00:20:26,260
called Clippy and you can use the tool

00:20:23,559 --> 00:20:27,940
to create clip paths shakes or just

00:20:26,260 --> 00:20:30,669
simply experiment with what CSS clip

00:20:27,940 --> 00:20:31,990
paths can do for you right so to give

00:20:30,669 --> 00:20:35,140
you an example we've all seen that

00:20:31,990 --> 00:20:36,820
trendy slanted header effect on websites

00:20:35,140 --> 00:20:38,860
and applications I've seen it done with

00:20:36,820 --> 00:20:42,120
pseudo elements and transform so I've

00:20:38,860 --> 00:20:45,220
seen it done with SPG's or with an image

00:20:42,120 --> 00:20:46,960
what will it - like clip e in clip path

00:20:45,220 --> 00:20:48,399
you can really create it pretty quickly

00:20:46,960 --> 00:20:50,620
in a few seconds to drag the controls

00:20:48,399 --> 00:20:52,360
around to create the shapes then copy

00:20:50,620 --> 00:20:54,159
and paste the code it spits out it into

00:20:52,360 --> 00:20:56,770
your CSS for example they had a rule and

00:20:54,159 --> 00:20:58,059
you and you get that visual effect and

00:20:56,770 --> 00:21:01,840
what's great is that when you use

00:20:58,059 --> 00:21:03,789
percentage based coordinates it's going

00:21:01,840 --> 00:21:09,820
to give you flexible and responsible

00:21:03,789 --> 00:21:13,510
clipping paths all right now color

00:21:09,820 --> 00:21:15,460
module level 4 is going to give you new

00:21:13,510 --> 00:21:17,230
interesting ways to apply color values

00:21:15,460 --> 00:21:19,210
in your CSS so you're going to have new

00:21:17,230 --> 00:21:21,400
color functions that let you adjust and

00:21:19,210 --> 00:21:23,290
modify colors you're going to have new

00:21:21,400 --> 00:21:25,320
values for setting the opacity of colors

00:21:23,290 --> 00:21:27,760
and one of those is 8 digit hex notation

00:21:25,320 --> 00:21:30,760
and this is going to let you set RGB a

00:21:27,760 --> 00:21:32,590
channels as regular hexadecimal values

00:21:30,760 --> 00:21:35,650
so in other words you get to do alpha

00:21:32,590 --> 00:21:37,540
directly in hex by simply tacking on a

00:21:35,650 --> 00:21:39,100
pair of digits to to the value so those

00:21:37,540 --> 00:21:41,260
last two digits specify the Alpha

00:21:39,100 --> 00:21:42,880
Channel of the color we're value of zero

00:21:41,260 --> 00:21:46,150
zero gives you a fully transparent color

00:21:42,880 --> 00:21:49,210
and FF represents a fully opaque color

00:21:46,150 --> 00:21:50,980
and it uses the the regular hexadecimal

00:21:49,210 --> 00:21:53,050
system to define the Alpha so if you're

00:21:50,980 --> 00:21:55,300
used to defining your values in RGB a or

00:21:53,050 --> 00:21:57,130
hsla you'll find that it can be a little

00:21:55,300 --> 00:21:59,620
bit unintuitive at first so for instance

00:21:57,130 --> 00:22:01,720
if you want to set a 50 percent

00:21:59,620 --> 00:22:06,310
transparency you're going to use 80 not

00:22:01,720 --> 00:22:07,630
50 and then 80 would be CC 20 is 33 and

00:22:06,310 --> 00:22:09,700
so on so it can be a little tricky at

00:22:07,630 --> 00:22:11,050
first but there are some charts out

00:22:09,700 --> 00:22:15,280
there that you can use as a preference

00:22:11,050 --> 00:22:17,140
for 8 digit X values for alpha and one

00:22:15,280 --> 00:22:18,670
of the best places to use these are

00:22:17,140 --> 00:22:21,310
going to be in places where you've

00:22:18,670 --> 00:22:25,150
already defined hex values and you just

00:22:21,310 --> 00:22:27,850
want to add a city to it right or if you

00:22:25,150 --> 00:22:29,830
just heart using hex values in general

00:22:27,850 --> 00:22:31,630
you're those extra two digits might save

00:22:29,830 --> 00:22:34,750
you the time it might take to look up

00:22:31,630 --> 00:22:36,550
the RGB equivalent of a color now

00:22:34,750 --> 00:22:38,080
browser support for a digit hex is

00:22:36,550 --> 00:22:41,680
currently limited it's limited to

00:22:38,080 --> 00:22:43,480
Firefox and Safari but you can also use

00:22:41,680 --> 00:22:45,750
it in Chrome if you've enabled the

00:22:43,480 --> 00:22:50,800
experimental web platform features

00:22:45,750 --> 00:22:52,480
now not all hex RGB HSL values are easy

00:22:50,800 --> 00:22:55,420
to remember right so if you if you're

00:22:52,480 --> 00:22:57,310
writing plain CSS changing or adjusting

00:22:55,420 --> 00:22:59,740
a color value often means having a

00:22:57,310 --> 00:23:02,260
reference your graphics editor or color

00:22:59,740 --> 00:23:04,720
tool and pre-process letters already

00:23:02,260 --> 00:23:07,240
offer color functions right that can

00:23:04,720 --> 00:23:09,040
apply transparency to colors have

00:23:07,240 --> 00:23:11,530
functions that can darken them lighten

00:23:09,040 --> 00:23:13,960
and blend them well CSS is about to take

00:23:11,530 --> 00:23:16,630
a huge leap forward and get a color

00:23:13,960 --> 00:23:18,550
modification function of its own the new

00:23:16,630 --> 00:23:21,910
color mod function is going to let you

00:23:18,550 --> 00:23:24,340
manipulate colors by taking a regular

00:23:21,910 --> 00:23:26,830
color value and applying color adjusters

00:23:24,340 --> 00:23:28,750
to it and these color adjusters are

00:23:26,830 --> 00:23:32,110
like smaller functions within color mod

00:23:28,750 --> 00:23:34,630
that for example can adjust the color

00:23:32,110 --> 00:23:36,670
few the Alpha lightness saturation blend

00:23:34,630 --> 00:23:39,400
colors together and lots lots lots more

00:23:36,670 --> 00:23:41,110
now this bag for this function is still

00:23:39,400 --> 00:23:43,030
a working draft but doesn't really have

00:23:41,110 --> 00:23:45,970
browser so good browser support yet but

00:23:43,030 --> 00:23:48,190
you can use it you can start using it in

00:23:45,970 --> 00:23:50,080
post ESS it has a color function that

00:23:48,190 --> 00:23:52,690
works exactly the way the color mod

00:23:50,080 --> 00:23:55,000
function is supposed to work and in fact

00:23:52,690 --> 00:23:59,230
color models named color and it was

00:23:55,000 --> 00:24:01,510
recently renamed color mod and you can

00:23:59,230 --> 00:24:04,870
begin experimenting with it in code pen

00:24:01,510 --> 00:24:07,630
if you've been able to post CSS and the

00:24:04,870 --> 00:24:09,070
color function atom so let's take a look

00:24:07,630 --> 00:24:12,640
at some of those works so for example we

00:24:09,070 --> 00:24:14,530
have a lightness adjuster here and that

00:24:12,640 --> 00:24:16,990
lightens a color value by the specified

00:24:14,530 --> 00:24:18,490
amount so for example 20% here you can

00:24:16,990 --> 00:24:20,710
also take away lightness by setting a

00:24:18,490 --> 00:24:22,420
negative percentage value but the best

00:24:20,710 --> 00:24:25,150
part is that you can pass two or more

00:24:22,420 --> 00:24:28,540
adjusters to your color mod function so

00:24:25,150 --> 00:24:31,210
alongside alpha and lightness the hue

00:24:28,540 --> 00:24:33,610
adjuster you see here changes the view

00:24:31,210 --> 00:24:35,530
of a color by rotating the color wheel

00:24:33,610 --> 00:24:39,220
by the specified amount so for example 5

00:24:35,530 --> 00:24:41,500
degrees here now if you throw CSS

00:24:39,220 --> 00:24:43,660
variables into the mix you can start to

00:24:41,500 --> 00:24:45,850
see how useful the color mod function

00:24:43,660 --> 00:24:47,350
can be for creating color palettes in

00:24:45,850 --> 00:24:50,290
your design from a small set of colors

00:24:47,350 --> 00:24:51,820
or from a single base color so here we

00:24:50,290 --> 00:24:53,050
have a set of color variables and

00:24:51,820 --> 00:24:55,420
they're created from a base color

00:24:53,050 --> 00:24:58,150
crimson and it's using adjusters like

00:24:55,420 --> 00:25:00,120
hue and lightness and it's even getting

00:24:58,150 --> 00:25:02,260
the complementary colors just to create

00:25:00,120 --> 00:25:04,210
strong visual contrast so now you can

00:25:02,260 --> 00:25:06,340
change that base color to any value like

00:25:04,210 --> 00:25:08,260
cornflower blue hot pink

00:25:06,340 --> 00:25:09,460
iein crimson and the rest of the colors

00:25:08,260 --> 00:25:10,960
are just going to adjust to that base

00:25:09,460 --> 00:25:12,640
value the route the result is a

00:25:10,960 --> 00:25:15,400
completely different color combination

00:25:12,640 --> 00:25:19,630
each time so having a way to quickly

00:25:15,400 --> 00:25:21,850
explore and manipulate colors on the fly

00:25:19,630 --> 00:25:23,170
right while working in the browser with

00:25:21,850 --> 00:25:25,060
a simple intuitive function like color

00:25:23,170 --> 00:25:27,010
mine's going to be a huge huge one for

00:25:25,060 --> 00:25:29,740
CSS and there's a really neat tool out

00:25:27,010 --> 00:25:31,180
there called color video and you can use

00:25:29,740 --> 00:25:33,190
these to compose your colors and

00:25:31,180 --> 00:25:35,910
experiment with all the color functions

00:25:33,190 --> 00:25:38,340
and all the adjusters

00:25:35,910 --> 00:25:40,140
cool let's keep moving so selectors

00:25:38,340 --> 00:25:42,690
level four there's a lots and lots of

00:25:40,140 --> 00:25:45,240
new selectors on the wave and level four

00:25:42,690 --> 00:25:47,039
now many of them are not supported by

00:25:45,240 --> 00:25:49,410
browsers yet because it's still sort of

00:25:47,039 --> 00:25:50,400
a working draft now I'll spend a little

00:25:49,410 --> 00:25:52,919
bit of time covering some of the

00:25:50,400 --> 00:25:54,809
selectors that I've found useful just a

00:25:52,919 --> 00:25:56,570
myelin work and something to have the

00:25:54,809 --> 00:26:00,210
most browser support and one of those is

00:25:56,570 --> 00:26:01,890
Nexus so matches is a functional pseudo

00:26:00,210 --> 00:26:03,809
class and it's going to help you write

00:26:01,890 --> 00:26:05,820
complex selectors or descendant

00:26:03,809 --> 00:26:07,200
selectors a lot faster and what it

00:26:05,820 --> 00:26:10,220
really does is just provide a little

00:26:07,200 --> 00:26:12,870
syntactic sugar for creating groups of

00:26:10,220 --> 00:26:15,809
descendants direct child even sibling

00:26:12,870 --> 00:26:19,530
selectors so matches is it takes of

00:26:15,809 --> 00:26:21,870
regular selectors as argument so for

00:26:19,530 --> 00:26:23,280
example here the selector is going to

00:26:21,870 --> 00:26:26,159
match any button class that's a

00:26:23,280 --> 00:26:27,900
descendant of card modal in form and

00:26:26,159 --> 00:26:29,480
it's the same as writing the the full

00:26:27,900 --> 00:26:31,950
selector group you see there below it

00:26:29,480 --> 00:26:35,070
you can also pass photo classes so this

00:26:31,950 --> 00:26:36,570
is going to make it a lot easier to for

00:26:35,070 --> 00:26:38,039
example style your links this is

00:26:36,570 --> 00:26:41,580
targeting the hover focus and active

00:26:38,039 --> 00:26:44,220
visit it all at once and inside matches

00:26:41,580 --> 00:26:46,799
you can pass through two elements and

00:26:44,220 --> 00:26:48,750
combinators but you can still create

00:26:46,799 --> 00:26:50,669
selectors using matches in a Combinator

00:26:48,750 --> 00:26:51,750
outside that argument list so for

00:26:50,669 --> 00:26:54,960
instance this is going to match any

00:26:51,750 --> 00:26:58,289
paragraph that's a adjacent sibling of

00:26:54,960 --> 00:27:00,179
image paragraph and form and as you can

00:26:58,289 --> 00:27:01,530
see it just saves a little time right by

00:27:00,179 --> 00:27:04,110
helping you to avoid writing out all

00:27:01,530 --> 00:27:06,570
those selector combinations manually now

00:27:04,110 --> 00:27:08,280
if you do a search for browser support

00:27:06,570 --> 00:27:11,400
on matches you'll find that it's

00:27:08,280 --> 00:27:12,630
implemented under the name any as it was

00:27:11,400 --> 00:27:14,070
originally known but it looks like it's

00:27:12,630 --> 00:27:17,880
going to be standardized in level 4

00:27:14,070 --> 00:27:20,640
under the name matches those are the new

00:27:17,880 --> 00:27:23,610
optionality pseudo classes that target

00:27:20,640 --> 00:27:25,260
form controls like text fields text

00:27:23,610 --> 00:27:27,630
areas and select and it targets them

00:27:25,260 --> 00:27:29,010
based on whether they are optional or

00:27:27,630 --> 00:27:30,900
required so you can spell them

00:27:29,010 --> 00:27:32,850
differently and there's the ones I

00:27:30,900 --> 00:27:35,580
really enjoyed using and had fun in my

00:27:32,850 --> 00:27:37,350
own work are the validity pseudo classes

00:27:35,580 --> 00:27:39,450
and these let you give your users visual

00:27:37,350 --> 00:27:41,340
feedback just based on the validity of

00:27:39,450 --> 00:27:43,110
the data they type into a field so for

00:27:41,340 --> 00:27:45,840
example if you have an email input field

00:27:43,110 --> 00:27:47,669
that's required you can define invalid

00:27:45,840 --> 00:27:49,230
and valid pseudo classes that style then

00:27:47,669 --> 00:27:50,909
just based on what you

00:27:49,230 --> 00:27:52,980
types into the field so here's the Texas

00:27:50,909 --> 00:27:55,769
if you've entered a valid email format

00:27:52,980 --> 00:27:58,080
for example and then at pseudo-classes

00:27:55,769 --> 00:28:00,480
to the mix sorry pseudo elements to the

00:27:58,080 --> 00:28:01,799
mixin and it can be really useful it

00:28:00,480 --> 00:28:03,539
gives you there's even more visual

00:28:01,799 --> 00:28:06,360
feedback like you can display an icon

00:28:03,539 --> 00:28:08,340
when the data goes from invalid to valid

00:28:06,360 --> 00:28:15,149
so here's going to display that smiley

00:28:08,340 --> 00:28:17,399
emoji for example now you can take

00:28:15,149 --> 00:28:20,190
things a few steps further and display

00:28:17,399 --> 00:28:22,610
an icon for both in valid and invalid

00:28:20,190 --> 00:28:24,870
emails now normally you'll maybe use

00:28:22,610 --> 00:28:25,860
JavaScript right to to do something like

00:28:24,870 --> 00:28:27,990
this but we'll see the size you get

00:28:25,860 --> 00:28:30,389
these input validation checks for free

00:28:27,990 --> 00:28:32,789
now it's not going to check if the email

00:28:30,389 --> 00:28:34,559
itself is a valid email it's just

00:28:32,789 --> 00:28:38,340
validating the inputs according to the

00:28:34,559 --> 00:28:39,870
validity semantics defined by HTML as a

00:28:38,340 --> 00:28:41,700
few sites out there that can help you

00:28:39,870 --> 00:28:43,159
keep track on browser support for these

00:28:41,700 --> 00:28:45,779
level 4 selectors if you don't want to

00:28:43,159 --> 00:28:47,789
individually search for them on for

00:28:45,779 --> 00:28:50,610
example can I use com you can use CSS

00:28:47,789 --> 00:28:52,380
for selectors com to see if your browser

00:28:50,610 --> 00:28:55,169
supports some of these and it'll let you

00:28:52,380 --> 00:28:57,840
know now finally some of the features I

00:28:55,169 --> 00:28:59,370
talked about they're not they're new to

00:28:57,840 --> 00:29:01,019
browsers right so they're not all

00:28:59,370 --> 00:29:04,139
supported yet everywhere but that

00:29:01,019 --> 00:29:05,700
shouldn't mean that you can't use them

00:29:04,139 --> 00:29:06,779
or at least begin experimenting with

00:29:05,700 --> 00:29:09,120
them right you're still able to use a

00:29:06,779 --> 00:29:10,649
lot of those today while providing these

00:29:09,120 --> 00:29:12,179
elegant fallbacks for browsers that

00:29:10,649 --> 00:29:14,970
don't support them using feature queries

00:29:12,179 --> 00:29:18,120
so the app support rule is bringing

00:29:14,970 --> 00:29:19,519
native feature detection to CSS so I can

00:29:18,120 --> 00:29:22,500
analyze whether or not a browser

00:29:19,519 --> 00:29:24,179
supports a CSS property it looks a lot

00:29:22,500 --> 00:29:26,399
like a media query so for example here

00:29:24,179 --> 00:29:28,649
at the bottom this is querying for grid

00:29:26,399 --> 00:29:30,419
layout and it's specifying the the

00:29:28,649 --> 00:29:32,220
property value pair used to define a

00:29:30,419 --> 00:29:35,039
grid display grid so then inside the

00:29:32,220 --> 00:29:37,919
rule we're inside the supports rule we

00:29:35,039 --> 00:29:40,110
are including all the the grid styles

00:29:37,919 --> 00:29:42,120
for the content and then flexbox

00:29:40,110 --> 00:29:43,799
currently has better support than grids

00:29:42,120 --> 00:29:46,110
right so the browsers that don't support

00:29:43,799 --> 00:29:47,610
read layout are going to layout the

00:29:46,110 --> 00:29:49,529
content using the Flex box properties

00:29:47,610 --> 00:29:51,000
defined outside the feature foyer so

00:29:49,529 --> 00:29:53,010
it's kind of like having moderniser

00:29:51,000 --> 00:29:54,539
which is a feature detection tool built

00:29:53,010 --> 00:29:56,880
with JavaScript but right in the browser

00:29:54,539 --> 00:29:58,440
it's going to perform a lot faster and

00:29:56,880 --> 00:30:00,240
you can query multiple features at once

00:29:58,440 --> 00:30:00,780
so for example here up top

00:30:00,240 --> 00:30:02,610
we

00:30:00,780 --> 00:30:04,920
the and operator and that's checking for

00:30:02,610 --> 00:30:07,710
grid and writing modes of work and

00:30:04,920 --> 00:30:09,720
writing mode is also a new CSS property

00:30:07,710 --> 00:30:11,850
that changes the layout in alignment of

00:30:09,720 --> 00:30:14,340
text so in browser supporting both

00:30:11,850 --> 00:30:16,470
features users will do something like

00:30:14,340 --> 00:30:18,120
this and browsers that don't support

00:30:16,470 --> 00:30:19,530
these will simply display a normal

00:30:18,120 --> 00:30:21,570
heading in paragraph which isn't a big

00:30:19,530 --> 00:30:23,700
deal and as you can see there they have

00:30:21,570 --> 00:30:25,650
really good browser support the feature

00:30:23,700 --> 00:30:27,420
queries do and the supports rule and

00:30:25,650 --> 00:30:28,890
browsers that don't support these

00:30:27,420 --> 00:30:30,330
feature queries they're going to ignore

00:30:28,890 --> 00:30:33,650
what's written inside the support rule

00:30:30,330 --> 00:30:36,240
and just fall back to your regular CSS

00:30:33,650 --> 00:30:38,730
and finally here's the list of the

00:30:36,240 --> 00:30:40,350
browser support links I talked about

00:30:38,730 --> 00:30:41,940
earlier that covers all the features I

00:30:40,350 --> 00:30:45,300
talked today I talked about today and

00:30:41,940 --> 00:30:47,010
yeah as with almost anything in

00:30:45,300 --> 00:30:48,930
front-end web development and web

00:30:47,010 --> 00:30:50,790
development there's so many features and

00:30:48,930 --> 00:30:52,680
factors to consider when building your

00:30:50,790 --> 00:30:55,170
projects so many of the things I've

00:30:52,680 --> 00:30:57,180
covered are really enhancement features

00:30:55,170 --> 00:30:59,550
right so you don't want to overdo it and

00:30:57,180 --> 00:31:01,650
you want to be sure that your design and

00:30:59,550 --> 00:31:02,790
content still still speaks to your users

00:31:01,650 --> 00:31:04,380
even with some of these features in

00:31:02,790 --> 00:31:06,120
place so hopefully what I talked about

00:31:04,380 --> 00:31:09,000
today gives you lots of interesting new

00:31:06,120 --> 00:31:11,280
ideas for your next project and as I

00:31:09,000 --> 00:31:13,500
always tell students that treehouse

00:31:11,280 --> 00:31:15,600
right this use all the guidelines and

00:31:13,500 --> 00:31:18,420
suggestions and the things you learn and

00:31:15,600 --> 00:31:20,250
see just the final works best for you

00:31:18,420 --> 00:31:21,990
and your project in your team you don't

00:31:20,250 --> 00:31:23,460
have to immediately use all the new

00:31:21,990 --> 00:31:24,750
things and learn everything just because

00:31:23,460 --> 00:31:26,910
they're popular at the moment right

00:31:24,750 --> 00:31:28,440
matter of preference a lot of it so

00:31:26,910 --> 00:31:30,690
what's important you develop your own

00:31:28,440 --> 00:31:33,120
approach style and just because since

00:31:30,690 --> 00:31:36,080
consistent about it right and that's all

00:31:33,120 --> 00:31:36,080
I have to say thanks

00:31:37,820 --> 00:31:42,580

YouTube URL: https://www.youtube.com/watch?v=UMwunYQGvhs


