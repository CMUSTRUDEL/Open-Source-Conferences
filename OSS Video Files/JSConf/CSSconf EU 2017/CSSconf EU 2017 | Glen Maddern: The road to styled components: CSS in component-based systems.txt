Title: CSSconf EU 2017 | Glen Maddern: The road to styled components: CSS in component-based systems
Publication date: 2017-05-31
Playlist: CSSconf EU 2017
Description: 
	Building user interfaces on the web is hard, because the web, and thus CSS, was inherently made for documents. Because UIs fundamentally are not documents, we've seen a mindset shift towards building component-based system.

The rise of JavaScript frameworks like React, Ember and recently Angular 2, the effort of the W3C to standardize a web-native component system, pattern libraries and styleguides being considered 'the right way to build web applications' and many other things have illuminated this revolution â€“ we are now in the "Component Age".

With that and a few more things in mind, Max along with Glen Maddern (co-creator of css-modules) sat down and started thinking about styling in this new era. They took the best of CSS and the Web to build a new way to style component-based systems. In this talk, Glen (stepping in last minute for Max!)  will share what they thought about and why they arrived where they did: styled-components.
Captions: 
	00:00:00,750 --> 00:00:09,169
[Music]

00:00:09,590 --> 00:00:16,640
thank you very much this is really

00:00:12,960 --> 00:00:20,039
happening isn't it um uh hey as I said

00:00:16,640 --> 00:00:23,310
max was originally going to give this

00:00:20,039 --> 00:00:23,970
talk they had to pull out for family

00:00:23,310 --> 00:00:26,250
reasons

00:00:23,970 --> 00:00:28,140
him and I have worked really closely for

00:00:26,250 --> 00:00:29,580
about a year on our project of CSS and

00:00:28,140 --> 00:00:32,969
JavaScript project called style

00:00:29,580 --> 00:00:34,950
components and so he asked and the

00:00:32,969 --> 00:00:40,590
organizers here asked if I might be able

00:00:34,950 --> 00:00:42,930
to fill in which is daunting I've only

00:00:40,590 --> 00:00:45,510
had about 24 hours to prepare so I

00:00:42,930 --> 00:00:49,829
please ask your forgiveness for the

00:00:45,510 --> 00:00:52,230
general improvisational tone of my

00:00:49,829 --> 00:00:53,309
presentation today but I wanted to do

00:00:52,230 --> 00:00:56,460
this because there was a lot of stuff

00:00:53,309 --> 00:00:57,930
that I knew that max wanted to talk to

00:00:56,460 --> 00:01:01,199
you about he wanted to share with you

00:00:57,930 --> 00:01:04,589
wanted to see your reaction to and get

00:01:01,199 --> 00:01:06,930
your feedback on and so I thought if I

00:01:04,589 --> 00:01:10,890
could come up here I could potentially

00:01:06,930 --> 00:01:12,299
do that obviously I'm not going to be

00:01:10,890 --> 00:01:15,600
able to do exactly what max was going to

00:01:12,299 --> 00:01:18,869
do but what I thought I could do and

00:01:15,600 --> 00:01:21,540
could try to get prepared in a day was

00:01:18,869 --> 00:01:24,030
to talk about my own perspective on the

00:01:21,540 --> 00:01:26,729
work that we've both done my own journey

00:01:24,030 --> 00:01:29,009
into working in CSS and JavaScript and

00:01:26,729 --> 00:01:31,650
hopefully along the way cover everything

00:01:29,009 --> 00:01:35,009
that max wanted to tell you using his

00:01:31,650 --> 00:01:36,659
slides so I thought I'd start by

00:01:35,009 --> 00:01:38,670
introducing myself my name is Blaine I'm

00:01:36,659 --> 00:01:42,240
from Australia I'm from Melbourne like

00:01:38,670 --> 00:01:44,939
Mark who just spoke if you were here at

00:01:42,240 --> 00:01:46,979
CFS come see you last time around 18

00:01:44,939 --> 00:01:48,600
months ago I was talking about a project

00:01:46,979 --> 00:01:52,759
that Mark and I worked on called CSS

00:01:48,600 --> 00:01:54,780
modules these days I am much more

00:01:52,759 --> 00:01:57,119
involved install components in fact

00:01:54,780 --> 00:02:00,390
that's my main focus and I've become a

00:01:57,119 --> 00:02:01,680
really strong believer in CSS and

00:02:00,390 --> 00:02:06,210
JavaScript for a lot of the same reasons

00:02:01,680 --> 00:02:07,950
that Mark just explained but I think

00:02:06,210 --> 00:02:09,360
it's a place of real innovation and it's

00:02:07,950 --> 00:02:11,009
really exciting and I wanted to try to

00:02:09,360 --> 00:02:12,390
convey some of the things that I thought

00:02:11,009 --> 00:02:14,400
were important where

00:02:12,390 --> 00:02:17,130
and I've been working on it and why I

00:02:14,400 --> 00:02:20,010
think you potentially may want to get

00:02:17,130 --> 00:02:23,100
involved as well I was trying to figure

00:02:20,010 --> 00:02:24,330
out what the summary of Max's talk was

00:02:23,100 --> 00:02:26,819
going to be and so I thought I'd start

00:02:24,330 --> 00:02:29,250
with the conclusion which is that I

00:02:26,819 --> 00:02:30,959
think what we're all saying is that CSS

00:02:29,250 --> 00:02:33,480
and JavaScript is worth looking at if

00:02:30,959 --> 00:02:35,970
you haven't yet it's worth your time

00:02:33,480 --> 00:02:37,320
the investment in developing your skills

00:02:35,970 --> 00:02:39,050
and forming your own opinions about

00:02:37,320 --> 00:02:43,260
whether it's right for you it's

00:02:39,050 --> 00:02:45,870
potentially only recently become a real

00:02:43,260 --> 00:02:47,940
candidate for use in your own projects

00:02:45,870 --> 00:02:50,370
but I think it is there now

00:02:47,940 --> 00:02:53,519
Max and I kind of came to working on

00:02:50,370 --> 00:02:55,830
this project together last year Max is

00:02:53,519 --> 00:02:57,750
very heavily and you know integrated

00:02:55,830 --> 00:03:00,060
into the react community I find myself

00:02:57,750 --> 00:03:02,130
much more like all I'm trying to do is

00:03:00,060 --> 00:03:04,980
get my CSS to work and so between the

00:03:02,130 --> 00:03:07,230
two of us felt like we were maybe going

00:03:04,980 --> 00:03:10,410
to stumble upon an API that might work

00:03:07,230 --> 00:03:13,080
but in order to tell you about why style

00:03:10,410 --> 00:03:16,560
components is the way that it is I

00:03:13,080 --> 00:03:20,280
thought I'd start by the component end

00:03:16,560 --> 00:03:21,750
of it because I think the idea of

00:03:20,280 --> 00:03:24,600
building your UI in terms of components

00:03:21,750 --> 00:03:26,820
is I mean I think pretty much we all

00:03:24,600 --> 00:03:28,590
accept that it's a best practice but I

00:03:26,820 --> 00:03:30,780
don't think it's self-evident that it

00:03:28,590 --> 00:03:32,640
would be the case so I thought if we

00:03:30,780 --> 00:03:34,590
talk a little bit about what makes a

00:03:32,640 --> 00:03:36,720
good component Y component driven

00:03:34,590 --> 00:03:39,450
development is actually useful it will

00:03:36,720 --> 00:03:46,500
help understand why style components is

00:03:39,450 --> 00:03:48,239
the way that it is oh yeah so one of the

00:03:46,500 --> 00:03:51,390
things you could say you could you could

00:03:48,239 --> 00:03:54,150
cast at the feet of components is that

00:03:51,390 --> 00:03:56,670
it breaks the separation concerns you

00:03:54,150 --> 00:03:58,739
could consider CSS HTML and JavaScript

00:03:56,670 --> 00:04:00,780
to be a hundred percent separate

00:03:58,739 --> 00:04:02,610
concerns and for the browser's purposes

00:04:00,780 --> 00:04:03,840
they absolutely are they handle

00:04:02,610 --> 00:04:05,850
differently their case differently they

00:04:03,840 --> 00:04:07,049
have different performance profiles some

00:04:05,850 --> 00:04:10,049
of them block rendering some of them

00:04:07,049 --> 00:04:13,200
don't but as an author as you're

00:04:10,049 --> 00:04:16,700
developing these UIs I'm not convinced

00:04:13,200 --> 00:04:18,810
that technological lines are necessarily

00:04:16,700 --> 00:04:20,989
the concerns of which you should be

00:04:18,810 --> 00:04:25,069
separating on

00:04:20,989 --> 00:04:26,569
for me components are a better

00:04:25,069 --> 00:04:28,610
separation concerns because they

00:04:26,569 --> 00:04:30,289
encapsulate a unit of functionality if

00:04:28,610 --> 00:04:31,490
you're talking to your designers if

00:04:30,289 --> 00:04:34,789
you're talking to your customers about

00:04:31,490 --> 00:04:37,370
what you've built then you're talking in

00:04:34,789 --> 00:04:39,530
functional units or visual units not in

00:04:37,370 --> 00:04:42,710
terms of this one has JavaScript this

00:04:39,530 --> 00:04:45,319
one doesn't one of the things I like

00:04:42,710 --> 00:04:47,180
about encapsulation or at least like

00:04:45,319 --> 00:04:49,580
about talking about a calculation is the

00:04:47,180 --> 00:04:52,880
primary purpose of components is that

00:04:49,580 --> 00:04:55,400
really emphasizes the importance of what

00:04:52,880 --> 00:04:56,900
you call your components what you name

00:04:55,400 --> 00:04:59,210
them and how you design them at what

00:04:56,900 --> 00:05:02,539
their properties are and that to me is

00:04:59,210 --> 00:05:05,419
the real benefit to working with this

00:05:02,539 --> 00:05:08,389
stuff so let me show you what I mean if

00:05:05,419 --> 00:05:11,330
you've got a button component here the

00:05:08,389 --> 00:05:13,550
button component button class name

00:05:11,330 --> 00:05:15,710
button renders out a button with a type

00:05:13,550 --> 00:05:17,150
of submit and Parsa to the class name

00:05:15,710 --> 00:05:19,940
now this is a react example but

00:05:17,150 --> 00:05:21,620
obviously components are common

00:05:19,940 --> 00:05:23,270
throughout every UI framework at the

00:05:21,620 --> 00:05:24,590
moment so if you're not using react

00:05:23,270 --> 00:05:26,240
hopefully you can translate these

00:05:24,590 --> 00:05:28,669
examples all of the examples today will

00:05:26,240 --> 00:05:31,070
be react so this is a pretty simple

00:05:28,669 --> 00:05:32,780
component button the only thing that's

00:05:31,070 --> 00:05:36,380
really doing is hiding the fact that

00:05:32,780 --> 00:05:38,810
there's a default type of submit for me

00:05:36,380 --> 00:05:40,759
if you wanted to make that button more

00:05:38,810 --> 00:05:43,009
prominent Milton bigger or a different

00:05:40,759 --> 00:05:45,080
color or something then you might add a

00:05:43,009 --> 00:05:47,180
second class to it a primary class this

00:05:45,080 --> 00:05:49,610
is sort of a been variation or modifier

00:05:47,180 --> 00:05:51,050
rather that simply gets passed through

00:05:49,610 --> 00:05:53,330
it doesn't change anything else about

00:05:51,050 --> 00:05:55,009
the button just adds another class and

00:05:53,330 --> 00:05:56,810
this is a sort of workflow I think that

00:05:55,009 --> 00:06:01,009
a lot of us became quite comfortable

00:05:56,810 --> 00:06:02,449
with and and doesn't scare us at all if

00:06:01,009 --> 00:06:04,009
you look at another example where you

00:06:02,449 --> 00:06:06,259
have to change the type of the button

00:06:04,009 --> 00:06:09,169
but you also have to attach a class name

00:06:06,259 --> 00:06:12,289
you get this sort of weird duplication

00:06:09,169 --> 00:06:13,520
where you've got using two variables to

00:06:12,289 --> 00:06:15,349
say the same thing because potentially

00:06:13,520 --> 00:06:17,889
not all disabled buttons are the same

00:06:15,349 --> 00:06:22,340
and so button disabled has some specific

00:06:17,889 --> 00:06:24,650
CSS attached to it really what you've

00:06:22,340 --> 00:06:26,030
got here is these three distinct states

00:06:24,650 --> 00:06:27,620
of our component and yet there's

00:06:26,030 --> 00:06:31,159
information there that we've written

00:06:27,620 --> 00:06:32,720
that isn't relevant to us as we're using

00:06:31,159 --> 00:06:35,220
these buttons

00:06:32,720 --> 00:06:37,710
the class names in particular are just

00:06:35,220 --> 00:06:40,590
implementation details what's really

00:06:37,710 --> 00:06:42,600
important to us is that there are three

00:06:40,590 --> 00:06:45,240
types of buttons currently being used

00:06:42,600 --> 00:06:48,540
the default the primary and the disabled

00:06:45,240 --> 00:06:50,790
this is our API contract between the

00:06:48,540 --> 00:06:53,970
user and the implementation details are

00:06:50,790 --> 00:06:55,410
all hidden and what's even better is

00:06:53,970 --> 00:06:56,880
that you can name the component and the

00:06:55,410 --> 00:06:58,680
properties whatever you want you can

00:06:56,880 --> 00:07:00,960
build up a library of terms that make

00:06:58,680 --> 00:07:02,850
sense to you as your team I think this

00:07:00,960 --> 00:07:05,940
is even more this is more semantic than

00:07:02,850 --> 00:07:09,000
working with HTML elements and class

00:07:05,940 --> 00:07:11,010
names because well for one you reuse

00:07:09,000 --> 00:07:14,070
HTML elements to mean very different

00:07:11,010 --> 00:07:15,780
things too there's also only a limited

00:07:14,070 --> 00:07:18,360
set of valid HTML elements and three

00:07:15,780 --> 00:07:21,690
your class names have to be valid CSS

00:07:18,360 --> 00:07:26,100
things living in a global super global

00:07:21,690 --> 00:07:26,580
namespace the goal is to build up Lego

00:07:26,100 --> 00:07:29,300
Vaughan's

00:07:26,580 --> 00:07:33,260
like individual customized usable

00:07:29,300 --> 00:07:37,350
reusable pieces that encapsulate

00:07:33,260 --> 00:07:40,290
something behavior visual you know

00:07:37,350 --> 00:07:42,930
information typography something and I

00:07:40,290 --> 00:07:45,390
think starting from this basic point

00:07:42,930 --> 00:07:47,280
when you start thinking about how you

00:07:45,390 --> 00:07:51,270
would design a library for CSS and

00:07:47,280 --> 00:07:54,479
JavaScript is where we got is how we

00:07:51,270 --> 00:07:56,880
created style components so as Mark has

00:07:54,479 --> 00:07:59,729
just said why would you want to use

00:07:56,880 --> 00:08:01,440
JavaScript to pass your CSS to your

00:07:59,729 --> 00:08:02,820
components why is it beneficial he

00:08:01,440 --> 00:08:05,040
already talked about not automatically

00:08:02,820 --> 00:08:05,669
being able to make your class names not

00:08:05,040 --> 00:08:08,570
collide

00:08:05,669 --> 00:08:10,800
maybe inline critical critical sales

00:08:08,570 --> 00:08:12,390
optimization package management all of

00:08:10,800 --> 00:08:14,100
those things but for me the one I one

00:08:12,390 --> 00:08:16,919
thing I wanted to emphasize is that

00:08:14,100 --> 00:08:18,120
JavaScript as a platform to be designing

00:08:16,919 --> 00:08:19,500
these things is actually a lot more

00:08:18,120 --> 00:08:21,570
powerful than anything we've been able

00:08:19,500 --> 00:08:23,700
to use before you don't have a

00:08:21,570 --> 00:08:25,770
preprocessor like sass that's totally

00:08:23,700 --> 00:08:29,460
incompatible to every other preprocessor

00:08:25,770 --> 00:08:30,780
like less you don't have post CSS

00:08:29,460 --> 00:08:33,630
transforms that have to be run in a

00:08:30,780 --> 00:08:35,550
certain order because they're all

00:08:33,630 --> 00:08:38,570
assuming that they read in a file from

00:08:35,550 --> 00:08:41,430
disk transform it and then export it

00:08:38,570 --> 00:08:43,740
that fundamentally is not a power not as

00:08:41,430 --> 00:08:48,930
powerful as an idea

00:08:43,740 --> 00:08:50,010
as code and data just ask anyone or the

00:08:48,930 --> 00:08:52,320
last time that you've had to go through

00:08:50,010 --> 00:08:54,060
your web pack config to realize that

00:08:52,320 --> 00:08:55,470
these files on disk have to be loaded in

00:08:54,060 --> 00:09:00,000
the exact right way otherwise the

00:08:55,470 --> 00:09:01,140
application rate breaks but this is kind

00:09:00,000 --> 00:09:04,649
of where I got to last year this is

00:09:01,140 --> 00:09:07,050
where I kind of hit a wall because I was

00:09:04,649 --> 00:09:09,390
convinced by all of those arguments

00:09:07,050 --> 00:09:12,120
it was definitely going to be better to

00:09:09,390 --> 00:09:14,580
have altered your JavaScript or CSS in

00:09:12,120 --> 00:09:17,209
JavaScript but I didn't think it was

00:09:14,580 --> 00:09:20,850
better to write your CSS in JavaScript

00:09:17,209 --> 00:09:24,029
there was nothing that was as easy as

00:09:20,850 --> 00:09:29,160
fluid as powerful as the CSS that I

00:09:24,029 --> 00:09:30,480
didn't using and so then those benefits

00:09:29,160 --> 00:09:32,520
aren't worth it I mean I've only talked

00:09:30,480 --> 00:09:35,610
about this morning about the skill and

00:09:32,520 --> 00:09:37,440
the value of people who know CSS and how

00:09:35,610 --> 00:09:39,959
that's often undervalued and in fact if

00:09:37,440 --> 00:09:42,390
you design an API for those people that

00:09:39,959 --> 00:09:44,160
really limits them and to ask them to

00:09:42,390 --> 00:09:46,890
totally change how they work then you're

00:09:44,160 --> 00:09:49,380
doing them a disservice so what I wanted

00:09:46,890 --> 00:09:52,200
to do was to design a library that opens

00:09:49,380 --> 00:09:56,010
up the power of the JavaScript platform

00:09:52,200 --> 00:09:58,890
while still feeling like CSS and that's

00:09:56,010 --> 00:10:01,589
what that's what style components aims

00:09:58,890 --> 00:10:03,390
to be and this is where Max and I might

00:10:01,589 --> 00:10:05,010
actually differ about how we would pitch

00:10:03,390 --> 00:10:06,959
it what we would talk about how we'd

00:10:05,010 --> 00:10:09,720
explain it and why we you know what

00:10:06,959 --> 00:10:11,370
we're so enthusiastic about for me I see

00:10:09,720 --> 00:10:14,209
style components as the CSS and

00:10:11,370 --> 00:10:17,490
JavaScript libraries for CSS people I

00:10:14,209 --> 00:10:19,050
think it's a making a version of CSS and

00:10:17,490 --> 00:10:22,370
JavaScript that's as good as possible

00:10:19,050 --> 00:10:24,570
for those people all the benefits of

00:10:22,370 --> 00:10:26,490
componentization and the JavaScript

00:10:24,570 --> 00:10:29,190
ecosystem without losing that power that

00:10:26,490 --> 00:10:31,529
familiarity and that expressiveness she

00:10:29,190 --> 00:10:33,029
max on the other hand he might take a

00:10:31,529 --> 00:10:35,070
different approach he might think that

00:10:33,029 --> 00:10:37,079
the real power behind style components

00:10:35,070 --> 00:10:39,180
is the way that it lets you encapsulate

00:10:37,079 --> 00:10:41,430
and combine these building blocks

00:10:39,180 --> 00:10:43,890
components more easily than anything

00:10:41,430 --> 00:10:46,770
else and that's actually why I'm really

00:10:43,890 --> 00:10:48,660
glad to be working on this with him and

00:10:46,770 --> 00:10:51,400
the rest of the wider community that

00:10:48,660 --> 00:10:54,490
contributes to the project because

00:10:51,400 --> 00:10:56,110
in essence the project is both it is

00:10:54,490 --> 00:10:58,240
trying to do both it is trying to be

00:10:56,110 --> 00:10:59,980
both the best thing for CSS people and

00:10:58,240 --> 00:11:02,920
the best thing for component minded

00:10:59,980 --> 00:11:05,020
people and it does that by encapsulating

00:11:02,920 --> 00:11:07,750
the relationship between a style and its

00:11:05,020 --> 00:11:10,500
component in something called a style

00:11:07,750 --> 00:11:13,360
component right hence the name and

00:11:10,500 --> 00:11:15,160
expressing your InDesign intent in a way

00:11:13,360 --> 00:11:19,330
that leads you down a heavily component

00:11:15,160 --> 00:11:22,120
driven path so we'll see how it works

00:11:19,330 --> 00:11:24,280
now the first thing to notice is that

00:11:22,120 --> 00:11:26,620
it's a normal JavaScript library

00:11:24,280 --> 00:11:28,570
it doesn't require a web pack config it

00:11:26,620 --> 00:11:30,580
doesn't load files from disk

00:11:28,570 --> 00:11:33,850
it doesn't need a babel transform all

00:11:30,580 --> 00:11:35,170
they're there there is at least two that

00:11:33,850 --> 00:11:38,800
will optimize it and do other things

00:11:35,170 --> 00:11:42,190
that you can look into but it's just a

00:11:38,800 --> 00:11:45,070
JavaScript project the first thing you

00:11:42,190 --> 00:11:49,000
do is you define a style component title

00:11:45,070 --> 00:11:51,130
as a styled h1 and that could be a

00:11:49,000 --> 00:11:52,780
styled div style image style anything it

00:11:51,130 --> 00:11:54,220
could be a styled abstract component

00:11:52,780 --> 00:11:57,580
reactor a ttle link could be anything

00:11:54,220 --> 00:12:00,760
but that's your kind of syntax and then

00:11:57,580 --> 00:12:03,130
beneath that you just write CSS you add

00:12:00,760 --> 00:12:05,890
a little block of CSS and it should feel

00:12:03,130 --> 00:12:07,660
as close to writing a CSS file as

00:12:05,890 --> 00:12:09,100
possible the only things I mean if

00:12:07,660 --> 00:12:11,710
you're writing this in CSS it would be

00:12:09,100 --> 00:12:13,750
dot title instead of compt title the

00:12:11,710 --> 00:12:16,240
only thing that's new here is a style of

00:12:13,750 --> 00:12:19,210
h1 other than that this is a string now

00:12:16,240 --> 00:12:21,630
you may not recognize the syntax here

00:12:19,210 --> 00:12:24,610
this is a neo 6 feature called a

00:12:21,630 --> 00:12:25,780
template literal which is the back tick

00:12:24,610 --> 00:12:27,760
there means you can do a multi-line

00:12:25,780 --> 00:12:28,990
string that then just gets passed around

00:12:27,760 --> 00:12:30,790
as code this isn't being like

00:12:28,990 --> 00:12:34,720
precompiled or something by babel or

00:12:30,790 --> 00:12:36,820
anything for a second component on the

00:12:34,720 --> 00:12:38,530
page you have the same thing a wrapper

00:12:36,820 --> 00:12:40,420
component and that should feel as close

00:12:38,530 --> 00:12:42,550
as possible to writing CSS as quickly

00:12:40,420 --> 00:12:46,240
you know the same thing a name and some

00:12:42,550 --> 00:12:48,850
rules so when you come to use the

00:12:46,240 --> 00:12:52,390
component what you've done is you've

00:12:48,850 --> 00:12:54,790
completely hidden that information when

00:12:52,390 --> 00:12:57,280
you in this render method in this in the

00:12:54,790 --> 00:12:58,690
component definition the only thing

00:12:57,280 --> 00:13:00,850
that's there is the names of the

00:12:58,690 --> 00:13:02,140
components using their relationship to

00:13:00,850 --> 00:13:03,800
each other the fact that the wrap the

00:13:02,140 --> 00:13:06,589
title is inside the brother

00:13:03,800 --> 00:13:07,850
and the content right to me this is the

00:13:06,589 --> 00:13:10,310
separation concerns that I've been

00:13:07,850 --> 00:13:12,350
looking for if I want to go and change

00:13:10,310 --> 00:13:14,029
the rapper to be a section tag instead

00:13:12,350 --> 00:13:17,029
of a div or a main tag of want to change

00:13:14,029 --> 00:13:19,820
the title via h2 h3 for any other reason

00:13:17,029 --> 00:13:22,310
I don't have to actually change it here

00:13:19,820 --> 00:13:25,910
that's all an implementation to detail

00:13:22,310 --> 00:13:29,230
of the style component the component now

00:13:25,910 --> 00:13:32,089
simply assembles these building blocks

00:13:29,230 --> 00:13:34,490
but importantly and as make as mark

00:13:32,089 --> 00:13:36,230
touched on when it renders it's just

00:13:34,490 --> 00:13:37,850
HTML CSS it's not there's nothing

00:13:36,230 --> 00:13:38,959
different it's not trying to do it's not

00:13:37,850 --> 00:13:41,209
trying to re-implement the web platform

00:13:38,959 --> 00:13:42,560
it's not trying to presuppose anything

00:13:41,209 --> 00:13:48,350
about what it's running on it's just

00:13:42,560 --> 00:13:50,480
generating H ones and classes and that

00:13:48,350 --> 00:13:53,450
ability to write actual CSS I think is a

00:13:50,480 --> 00:13:55,730
really big benefit but we go a little

00:13:53,450 --> 00:13:57,260
bit further because most of us who've

00:13:55,730 --> 00:13:59,480
worked with CSS for a long time

00:13:57,260 --> 00:14:01,790
don't just write CSS we write something

00:13:59,480 --> 00:14:04,089
like that and so if you look at a more

00:14:01,790 --> 00:14:06,500
complex component we can see what I mean

00:14:04,089 --> 00:14:10,430
if we have a color changer which in this

00:14:06,500 --> 00:14:12,260
case is a styled section we can use a

00:14:10,430 --> 00:14:15,950
direct descendant selector by nesting

00:14:12,260 --> 00:14:18,320
and this is basically because I like

00:14:15,950 --> 00:14:20,390
this from sass a lot and so I brought it

00:14:18,320 --> 00:14:21,740
across now nesting is the sort of thing

00:14:20,390 --> 00:14:22,970
in sass that sometimes bites you a

00:14:21,740 --> 00:14:25,790
little bit and you can overuse it

00:14:22,970 --> 00:14:27,560
definitely but here if that h2 is a

00:14:25,790 --> 00:14:29,060
little bit more complex it'll be so easy

00:14:27,560 --> 00:14:31,959
to break it out into another component

00:14:29,060 --> 00:14:34,520
that it kinda doesn't have that same

00:14:31,959 --> 00:14:39,110
failure case it doesn't actually go as

00:14:34,520 --> 00:14:40,640
bad what's also really good is that

00:14:39,110 --> 00:14:43,550
media queries that sort of thing like

00:14:40,640 --> 00:14:45,649
again in sass you just put them inside a

00:14:43,550 --> 00:14:47,180
component declaration when it compiles

00:14:45,649 --> 00:14:50,029
they get inverted and the media query is

00:14:47,180 --> 00:14:51,680
valid but it means that you can work

00:14:50,029 --> 00:14:57,350
with these things as quickly and as

00:14:51,680 --> 00:15:01,579
easily as you work with a satphone and

00:14:57,350 --> 00:15:03,170
so that's kind of the CSS half of the

00:15:01,579 --> 00:15:05,060
library which is trying to be as

00:15:03,170 --> 00:15:08,060
familiar as possible and in fact like

00:15:05,060 --> 00:15:09,140
familiarity I think is a huge design

00:15:08,060 --> 00:15:11,570
constraint now it's something that's

00:15:09,140 --> 00:15:13,100
really difficult to do like the

00:15:11,570 --> 00:15:14,670
implementation of style components is

00:15:13,100 --> 00:15:16,560
massively complicated by the

00:15:14,670 --> 00:15:18,810
fact that it does nothing but for me

00:15:16,560 --> 00:15:22,020
it's really worth it because it makes it

00:15:18,810 --> 00:15:28,380
easier to bring the same knowledge and

00:15:22,020 --> 00:15:30,000
skills across into this new place so the

00:15:28,380 --> 00:15:31,560
other half of style component is the

00:15:30,000 --> 00:15:34,350
fact that this is JavaScript these are

00:15:31,560 --> 00:15:37,260
components these do work like react

00:15:34,350 --> 00:15:39,540
components and so we have different ways

00:15:37,260 --> 00:15:44,670
of solving the same challenges that

00:15:39,540 --> 00:15:47,940
every UI system has for style components

00:15:44,670 --> 00:15:49,680
which using props so a button example

00:15:47,940 --> 00:15:51,780
and if you're not familiar with react

00:15:49,680 --> 00:15:53,550
then button is the component and primary

00:15:51,780 --> 00:15:57,990
is a prop in this case it's just a

00:15:53,550 --> 00:16:00,300
boolean attribute we can use it by

00:15:57,990 --> 00:16:03,000
defining our button to be a style button

00:16:00,300 --> 00:16:07,410
and then using some sort of magic in

00:16:03,000 --> 00:16:08,940
here we have this interpolation inside

00:16:07,410 --> 00:16:10,200
the template string which is the dollar

00:16:08,940 --> 00:16:12,180
squiggly bracket

00:16:10,200 --> 00:16:14,370
all right this sort of syntax might look

00:16:12,180 --> 00:16:16,320
familiar but again it is totally

00:16:14,370 --> 00:16:18,780
standard JavaScript it's just new it's

00:16:16,320 --> 00:16:20,250
just not commonly used and what we've

00:16:18,780 --> 00:16:23,340
done here is we've inserted these two

00:16:20,250 --> 00:16:26,280
functions to say that whatever depending

00:16:23,340 --> 00:16:28,740
on the primary prop either have it white

00:16:26,280 --> 00:16:31,680
on pale violet red or pale violet red on

00:16:28,740 --> 00:16:32,880
white now you can use these

00:16:31,680 --> 00:16:34,320
interpolations for anything they don't

00:16:32,880 --> 00:16:37,310
have to be functions functions will get

00:16:34,320 --> 00:16:37,310
run on every new prop

00:16:37,440 --> 00:16:41,760
if you want to just use variables this

00:16:39,810 --> 00:16:44,460
is the same way that you do it it's very

00:16:41,760 --> 00:16:45,840
simple let mixing you know media queries

00:16:44,460 --> 00:16:48,630
you can abstract them all and in fact

00:16:45,840 --> 00:16:51,300
polished came out of the desire to get a

00:16:48,630 --> 00:16:54,690
standard library for CSS basically that

00:16:51,300 --> 00:16:56,100
worked in this little way so that when

00:16:54,690 --> 00:16:57,600
you call this what you've done is you've

00:16:56,100 --> 00:17:00,270
created one button without a primary

00:16:57,600 --> 00:17:02,130
prop one button with one they generate

00:17:00,270 --> 00:17:04,140
different CSS and they get different

00:17:02,130 --> 00:17:08,730
class names attached and so then they

00:17:04,140 --> 00:17:11,490
appear differently so the next more

00:17:08,730 --> 00:17:13,890
advanced kind of feature is the idea of

00:17:11,490 --> 00:17:16,200
theming right instead of having to only

00:17:13,890 --> 00:17:17,700
change the display of something by

00:17:16,200 --> 00:17:19,740
talking to it directly we can actually

00:17:17,700 --> 00:17:22,740
set up an environment and then build

00:17:19,740 --> 00:17:24,870
these components that respond to it

00:17:22,740 --> 00:17:28,319
we can customize components and

00:17:24,870 --> 00:17:30,929
distances my note and this is some code

00:17:28,319 --> 00:17:32,909
to do that we have this component called

00:17:30,929 --> 00:17:34,860
the theme provider and then you set up a

00:17:32,909 --> 00:17:36,330
theme as an object which it could be

00:17:34,860 --> 00:17:37,799
anything it'll get passed down but

00:17:36,330 --> 00:17:40,230
basically in this case we've just set up

00:17:37,799 --> 00:17:41,820
a key and value primary and pale violet

00:17:40,230 --> 00:17:43,860
red these are Max's slides he loves

00:17:41,820 --> 00:17:48,120
paler violet red I'm more of a papaya

00:17:43,860 --> 00:17:49,559
whip kind of guy but yeah so that then

00:17:48,120 --> 00:17:51,419
when you render it if you wrap it in

00:17:49,559 --> 00:17:52,559
this theme provider then that data is

00:17:51,419 --> 00:17:54,510
available to all of your style

00:17:52,559 --> 00:17:56,970
components and that can really change

00:17:54,510 --> 00:18:00,720
actually how what you think a component

00:17:56,970 --> 00:18:02,100
is responsible for when you go to use it

00:18:00,720 --> 00:18:03,720
again use one of these function

00:18:02,100 --> 00:18:06,630
interpolations but this time you

00:18:03,720 --> 00:18:10,440
actually read the primary value off the

00:18:06,630 --> 00:18:12,390
theme off the props and then when that

00:18:10,440 --> 00:18:16,860
button renders it'll come out pale

00:18:12,390 --> 00:18:18,720
violet red if you want to change that

00:18:16,860 --> 00:18:20,850
button in two different places you now

00:18:18,720 --> 00:18:22,950
have another option rather than just

00:18:20,850 --> 00:18:25,679
making a variant of that button you can

00:18:22,950 --> 00:18:27,419
simply wrap it in a new theme here we

00:18:25,679 --> 00:18:29,220
have two themes one with pearl violet

00:18:27,419 --> 00:18:31,500
red one medium C green I do like that

00:18:29,220 --> 00:18:34,289
color actually and then when you wrap it

00:18:31,500 --> 00:18:37,020
in those two themes they render

00:18:34,289 --> 00:18:38,520
differently you can do this stuff really

00:18:37,020 --> 00:18:41,549
really well with CSS variables as well

00:18:38,520 --> 00:18:43,559
but the theming works through react

00:18:41,549 --> 00:18:44,640
reaction mechanism so it sprouts a

00:18:43,559 --> 00:18:49,559
support will go a lot further back

00:18:44,640 --> 00:18:52,230
basically anything react supports okay

00:18:49,559 --> 00:18:54,720
the key here is that these variables

00:18:52,230 --> 00:18:56,010
passed down through the whole tree they

00:18:54,720 --> 00:18:57,000
don't have to be directly beneath them

00:18:56,010 --> 00:19:00,179
which means you can have components

00:18:57,000 --> 00:19:02,520
adapt to their relationship between the

00:19:00,179 --> 00:19:05,340
theme and the a and the component

00:19:02,520 --> 00:19:06,120
without having to directly make them

00:19:05,340 --> 00:19:07,409
talk to each other there can be

00:19:06,120 --> 00:19:12,299
different files different parts of the

00:19:07,409 --> 00:19:15,000
tree the final feature that I want to

00:19:12,299 --> 00:19:17,490
talk about style components is about

00:19:15,000 --> 00:19:19,919
react native so mark touched on this

00:19:17,490 --> 00:19:23,370
which is the ability or the kind of new

00:19:19,919 --> 00:19:25,440
ability or nascent ability for us web

00:19:23,370 --> 00:19:27,960
developers to target platforms that

00:19:25,440 --> 00:19:30,840
aren't the web something like react

00:19:27,960 --> 00:19:33,750
native is designed to offer the same

00:19:30,840 --> 00:19:36,300
mental model as react for the web but

00:19:33,750 --> 00:19:39,060
and it even reimplemented like the

00:19:36,300 --> 00:19:41,730
CSS flexbox spec in order to make it as

00:19:39,060 --> 00:19:45,900
familiar as possible but open up these

00:19:41,730 --> 00:19:48,180
new environments to so with style

00:19:45,900 --> 00:19:49,950
components we support that by we wrote a

00:19:48,180 --> 00:19:51,900
different back-end we wrote a back-end

00:19:49,950 --> 00:19:54,210
that targets back native instead of

00:19:51,900 --> 00:19:56,340
injecting CSS in the head it passes

00:19:54,210 --> 00:19:58,800
those styled objects to the CSS to the

00:19:56,340 --> 00:20:01,380
react native components it means you can

00:19:58,800 --> 00:20:02,910
work with these things as you can keep

00:20:01,380 --> 00:20:05,010
things as familiar as possible

00:20:02,910 --> 00:20:08,010
you still name things in the same way

00:20:05,010 --> 00:20:09,690
you still use the same syntax for CSS

00:20:08,010 --> 00:20:12,330
although react native doesn't support

00:20:09,690 --> 00:20:15,590
all of CSS so there are some times where

00:20:12,330 --> 00:20:19,980
it is a little bit different but the

00:20:15,590 --> 00:20:21,570
mental model is at the same when you

00:20:19,980 --> 00:20:23,190
come to render it you're still just

00:20:21,570 --> 00:20:26,700
rendering components and in fact this

00:20:23,190 --> 00:20:29,280
component here has nothing react native

00:20:26,700 --> 00:20:31,590
specific about it at all so potentially

00:20:29,280 --> 00:20:34,050
you can have share some components that

00:20:31,590 --> 00:20:35,760
do something but between web and native

00:20:34,050 --> 00:20:37,200
they pick a different wrapper and a

00:20:35,760 --> 00:20:39,090
different title because the wrapper and

00:20:37,200 --> 00:20:44,190
react native is a view and the wrapper

00:20:39,090 --> 00:20:46,110
on the web is a div say but again when

00:20:44,190 --> 00:20:48,300
it runs it's just the same code as any

00:20:46,110 --> 00:20:49,980
other react native code there's nothing

00:20:48,300 --> 00:20:54,540
different about using Styles components

00:20:49,980 --> 00:20:57,300
once it's running so I would love if you

00:20:54,540 --> 00:20:59,220
would go and give this a try then hit me

00:20:57,300 --> 00:21:01,260
or max or any of the other contributors

00:20:59,220 --> 00:21:02,940
up on github or on Twitter and let us

00:21:01,260 --> 00:21:04,440
know what you think there's actually a

00:21:02,940 --> 00:21:06,840
bunch of new stuff that's about to go

00:21:04,440 --> 00:21:07,910
into the library which is what I was

00:21:06,840 --> 00:21:10,410
supposed to be working on yesterday

00:21:07,910 --> 00:21:13,710
while max was preparing his talk but it

00:21:10,410 --> 00:21:15,270
didn't quite work out like that it's

00:21:13,710 --> 00:21:18,060
pretty this is pretty much all I have so

00:21:15,270 --> 00:21:20,130
I just wanted to end by repeating this

00:21:18,060 --> 00:21:22,350
assertion I think this stuff is really

00:21:20,130 --> 00:21:25,170
ready I mean like you may not be sold on

00:21:22,350 --> 00:21:26,790
style components but there's so many

00:21:25,170 --> 00:21:28,380
other interesting approaches out there

00:21:26,790 --> 00:21:31,860
there's something other different design

00:21:28,380 --> 00:21:34,680
ideas being tested because you have this

00:21:31,860 --> 00:21:36,600
more powerful platform and I wanted to

00:21:34,680 --> 00:21:39,960
kind of at least give a little bit more

00:21:36,600 --> 00:21:42,450
a wider view which is the point of all

00:21:39,960 --> 00:21:44,970
of this work is to make things better

00:21:42,450 --> 00:21:47,730
for everybody to try to make things

00:21:44,970 --> 00:21:49,440
faster or more reliable or more

00:21:47,730 --> 00:21:51,060
maintainable for your team

00:21:49,440 --> 00:21:53,490
and potentially to make it easier for

00:21:51,060 --> 00:21:54,630
new people to join the industry every

00:21:53,490 --> 00:21:58,620
time that we can make things a little

00:21:54,630 --> 00:22:00,480
bit better it helps everybody and so I'm

00:21:58,620 --> 00:22:03,480
going to steal marks phrase for the end

00:22:00,480 --> 00:22:05,310
because I really liked this this is one

00:22:03,480 --> 00:22:08,870
of the core reasons that I felt

00:22:05,310 --> 00:22:08,870
compelled to actually work on this stuff

00:22:09,230 --> 00:22:14,660
interesting violin the first talk talked

00:22:11,490 --> 00:22:18,600
about this historical separation between

00:22:14,660 --> 00:22:20,430
CSS work and real development and it

00:22:18,600 --> 00:22:23,490
made me think that I realized the only

00:22:20,430 --> 00:22:25,320
way to understand all of the CSS J and J

00:22:23,490 --> 00:22:27,320
s work is to realize that there was

00:22:25,320 --> 00:22:30,960
never actually any of that difference

00:22:27,320 --> 00:22:33,180
CSS and J's presupposes that CSS was an

00:22:30,960 --> 00:22:34,890
engineering task all along and it's just

00:22:33,180 --> 00:22:37,440
trying to bring the most powerful tool

00:22:34,890 --> 00:22:39,780
to bear to fmjs

00:22:37,440 --> 00:22:42,060
isn't an opposition to CSS knowledge

00:22:39,780 --> 00:22:43,920
it's simply about allowing you to design

00:22:42,060 --> 00:22:45,930
systems that enforce the kinds of

00:22:43,920 --> 00:22:47,960
practices you think are important these

00:22:45,930 --> 00:22:50,130
are the ones that I think are important

00:22:47,960 --> 00:22:51,780
so in conclusion javascript really

00:22:50,130 --> 00:22:54,420
powerful and it makes working with CSS

00:22:51,780 --> 00:22:56,220
better thank you so much for listening

00:22:54,420 --> 00:22:57,770
to me talk having the tools it's a

00:22:56,220 --> 00:23:00,570
tremendous privilege to be up here

00:22:57,770 --> 00:23:02,580
speaking to you even if it's under

00:23:00,570 --> 00:23:04,440
unfortunate circumstances so I wanted to

00:23:02,580 --> 00:23:05,940
which max all the best and sure will be

00:23:04,440 --> 00:23:07,320
here next year if you've got any

00:23:05,940 --> 00:23:09,960
questions about style components please

00:23:07,320 --> 00:23:10,440
come and talk to me I might have a

00:23:09,960 --> 00:23:13,020
little lie-down

00:23:10,440 --> 00:23:14,610
now that I'll be around as pie tonight

00:23:13,020 --> 00:23:17,380
thank you very much

00:23:14,610 --> 00:23:20,970
[Applause]

00:23:17,380 --> 00:23:20,970
I'll bring it in

00:23:21,600 --> 00:23:24,780

YouTube URL: https://www.youtube.com/watch?v=MT4D_DioYC8


