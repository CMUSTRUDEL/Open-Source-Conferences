Title: CSSconf EU 2017 | Mark Dalgleish: A Unified Styling Language
Publication date: 2017-05-31
Playlist: CSSconf EU 2017
Description: 
	http://2017.cssconf.eu/speakers/mark-dalgleish.html

In the past few years, we’ve witnessed a massive increase in the amount of CSS experimentation, with ideas like CSS Modules and—most controversially—the rise of CSS-in-JS. But does mixing our styles and logic run counter to the original ideas of CSS? Does it break progressive enhancement?

In this talk, we’ll take an empathetic look at these new approaches, how they relate to the history of CSS, and why they might possibly hold the key to the future of CSS—all from the point-of-view of someone who has been writing CSS since 1999.
Captions: 
	00:00:00,750 --> 00:00:11,910
[Music]

00:00:10,260 --> 00:00:13,440
thank you so as you heard my name is

00:00:11,910 --> 00:00:15,990
Marco Alicia I'm here all the way from

00:00:13,440 --> 00:00:18,570
Melbourne Australia and believe it or

00:00:15,990 --> 00:00:21,320
not my clicker isn't working yes it is

00:00:18,570 --> 00:00:24,090
I've been working the web since 1999

00:00:21,320 --> 00:00:26,939
where I first got my start with HTML and

00:00:24,090 --> 00:00:28,410
of course very soon after CSS and it

00:00:26,939 --> 00:00:30,000
probably goes without saying

00:00:28,410 --> 00:00:33,300
given that I'm here that I really love

00:00:30,000 --> 00:00:34,920
CSS but I've also been a big part of the

00:00:33,300 --> 00:00:36,570
react community the last few years I'm a

00:00:34,920 --> 00:00:40,410
huge fan of the react model and what

00:00:36,570 --> 00:00:42,690
allows us to do with our product and out

00:00:40,410 --> 00:00:44,579
of the reactor mmunity came my work with

00:00:42,690 --> 00:00:46,710
CSS module something many of you are

00:00:44,579 --> 00:00:49,379
probably familiar with and it's a very

00:00:46,710 --> 00:00:52,949
popular alternative to CSS nsj it brings

00:00:49,379 --> 00:00:54,719
the component scoping model to CSS and

00:00:52,949 --> 00:00:55,980
given that you might be surprised that

00:00:54,719 --> 00:00:58,320
I'm not actually here today to talk to

00:00:55,980 --> 00:01:01,260
you about CSS modules I am here today to

00:00:58,320 --> 00:01:02,789
talk to you about CSS nsj please don't

00:01:01,260 --> 00:01:05,159
all leave immediately

00:01:02,789 --> 00:01:06,810
I think CSS and J yes even though I

00:01:05,159 --> 00:01:11,100
don't use it in my own work is is a

00:01:06,810 --> 00:01:12,780
really interesting thing to look at what

00:01:11,100 --> 00:01:14,310
I find frustrating though is that I've

00:01:12,780 --> 00:01:16,740
been part of the react community and

00:01:14,310 --> 00:01:18,090
seeing all this work often what's said

00:01:16,740 --> 00:01:20,009
to these people is that they should just

00:01:18,090 --> 00:01:21,299
learn CSS that they're just avoiding it

00:01:20,009 --> 00:01:24,000
that they're trying to do everything in

00:01:21,299 --> 00:01:26,640
JavaScript and what I think is that the

00:01:24,000 --> 00:01:29,310
core of this is you know there's a

00:01:26,640 --> 00:01:31,680
separation here going on I think that

00:01:29,310 --> 00:01:33,420
people think is there but for me it's

00:01:31,680 --> 00:01:35,100
not there I'm a big part of the react

00:01:33,420 --> 00:01:36,990
community as I said and I love component

00:01:35,100 --> 00:01:38,100
systems but I've been around the web for

00:01:36,990 --> 00:01:39,600
a long time and I'm a big fan of

00:01:38,100 --> 00:01:40,829
progressive enhancement that's actually

00:01:39,600 --> 00:01:45,299
what brought me to react in the first

00:01:40,829 --> 00:01:47,040
place and I bring this to my own work so

00:01:45,299 --> 00:01:49,680
this right here is a video of what I've

00:01:47,040 --> 00:01:51,360
been working on the past few years in

00:01:49,680 --> 00:01:53,610
Melbourne at seek which is the leading

00:01:51,360 --> 00:01:55,770
job site now what you're looking at is a

00:01:53,610 --> 00:01:57,810
single page app built in react it's

00:01:55,770 --> 00:01:59,340
responsive it's fast it's a single page

00:01:57,810 --> 00:02:01,049
app so it's all rendered in the client

00:01:59,340 --> 00:02:03,420
hitting api's and rendering in your

00:02:01,049 --> 00:02:05,189
browser but the catch is that everything

00:02:03,420 --> 00:02:07,469
you're seeing here I actually disable

00:02:05,189 --> 00:02:08,819
JavaScript in my browser so despite

00:02:07,469 --> 00:02:10,379
being a single page app written in

00:02:08,819 --> 00:02:11,630
JavaScript you can run it without

00:02:10,379 --> 00:02:15,100
JavaScript

00:02:11,630 --> 00:02:15,100
and that's what reactor allows us to do

00:02:15,190 --> 00:02:21,470
so I'm very interested in CSS and j/s

00:02:19,450 --> 00:02:23,000
again even though I'm not using it in my

00:02:21,470 --> 00:02:26,690
own work I'm keeping a close eye on it

00:02:23,000 --> 00:02:27,980
and I think you should be too that's the

00:02:26,690 --> 00:02:31,100
that's the important point I think

00:02:27,980 --> 00:02:32,930
that's why I'm here today but why why

00:02:31,100 --> 00:02:36,830
are people doing this and why should you

00:02:32,930 --> 00:02:38,360
be interested as well there's five key

00:02:36,830 --> 00:02:39,800
reasons I want to cover today there's

00:02:38,360 --> 00:02:41,480
there's more to it than this but I think

00:02:39,800 --> 00:02:43,490
these are the practical benefits you get

00:02:41,480 --> 00:02:44,600
from taking on this approach and even if

00:02:43,490 --> 00:02:45,920
you're not going to bring this into your

00:02:44,600 --> 00:02:47,900
own work I think it will help you get a

00:02:45,920 --> 00:02:49,880
sense of why people are doing something

00:02:47,900 --> 00:02:51,680
that seems maybe ridiculous from the

00:02:49,880 --> 00:02:53,290
outside so we're going to look at scope

00:02:51,680 --> 00:02:56,180
styles are going to look at critical CSS

00:02:53,290 --> 00:02:59,870
smarter optimizations package management

00:02:56,180 --> 00:03:03,530
and finally non browser styling so the

00:02:59,870 --> 00:03:04,940
first one is scope styles now I guess I

00:03:03,530 --> 00:03:07,640
don't have to convince you of the fact

00:03:04,940 --> 00:03:11,060
that managing CSS at scale is really

00:03:07,640 --> 00:03:12,950
hard so much so that I say that it's the

00:03:11,060 --> 00:03:14,780
hardest problem in front end because if

00:03:12,950 --> 00:03:16,790
you think about working with multiple

00:03:14,780 --> 00:03:19,130
people on a large project over a long

00:03:16,790 --> 00:03:21,350
period of time if you don't have much

00:03:19,130 --> 00:03:23,600
structure what's the technology that

00:03:21,350 --> 00:03:26,030
goes downhill the fastest and becomes

00:03:23,600 --> 00:03:28,100
unmaintainable it's CSS and that's

00:03:26,030 --> 00:03:29,480
that's something that the CSS community

00:03:28,100 --> 00:03:32,210
has known for a long time and we've been

00:03:29,480 --> 00:03:35,590
working hard to solve it the big entries

00:03:32,210 --> 00:03:38,330
in this is io CSS from the core sullivan

00:03:35,590 --> 00:03:40,850
we've got snacks from jonathan snook and

00:03:38,330 --> 00:03:42,620
we've also got been from Yandex which I

00:03:40,850 --> 00:03:46,010
from my experience seems to be the one

00:03:42,620 --> 00:03:47,750
most popular in the wild now Ben is a

00:03:46,010 --> 00:03:50,030
naming convention for your classes that

00:03:47,750 --> 00:03:51,350
I'm sure you're all familiar with but at

00:03:50,030 --> 00:03:52,850
the end of the day BEM is just a

00:03:51,350 --> 00:03:55,520
convention there's nothing stopping you

00:03:52,850 --> 00:03:58,220
from not writing your classes in the bed

00:03:55,520 --> 00:04:00,440
style at any given moment but even so

00:03:58,220 --> 00:04:02,420
it's a fantastic way to manage

00:04:00,440 --> 00:04:04,160
complexity at scale and our code bases

00:04:02,420 --> 00:04:06,650
in fact I'd say that if you're working

00:04:04,160 --> 00:04:10,340
in CSS at scale an approach like this is

00:04:06,650 --> 00:04:12,830
invaluable but if it's so central to

00:04:10,340 --> 00:04:14,840
managing CSS at scale well why is it

00:04:12,830 --> 00:04:17,390
just a convention this is something that

00:04:14,840 --> 00:04:18,530
I wrestled with quite heavily but when

00:04:17,390 --> 00:04:19,970
you think of it when you look at it

00:04:18,530 --> 00:04:22,040
closely particularly in a component

00:04:19,970 --> 00:04:24,470
system Ben blocks are essentially

00:04:22,040 --> 00:04:25,520
components it's the same abstraction and

00:04:24,470 --> 00:04:27,410
when you're working with

00:04:25,520 --> 00:04:29,990
single page app framework or library

00:04:27,410 --> 00:04:32,780
like react your components are defined

00:04:29,990 --> 00:04:34,099
in JavaScript so having your CSS follow

00:04:32,780 --> 00:04:37,490
the same scoping rules as your

00:04:34,099 --> 00:04:38,539
components is really valuable what we're

00:04:37,490 --> 00:04:39,800
going to do from now is going to take

00:04:38,539 --> 00:04:41,900
we're going to take a quick look at a

00:04:39,800 --> 00:04:45,199
library that does this this is glamour

00:04:41,900 --> 00:04:47,330
from sunil pi and basically what it does

00:04:45,199 --> 00:04:49,159
is it allows you to define your CSS in

00:04:47,330 --> 00:04:51,289
JavaScript but the key thing is that

00:04:49,159 --> 00:04:53,449
whenever you define a rule or set of

00:04:51,289 --> 00:04:54,949
rules like this it generates a class for

00:04:53,449 --> 00:04:56,360
you automatically so that means that you

00:04:54,949 --> 00:04:57,919
don't have to worry about scoping it in

00:04:56,360 --> 00:05:01,699
the global namespace that's handled for

00:04:57,919 --> 00:05:04,159
you and so that the hashing classes is

00:05:01,699 --> 00:05:05,990
done for you rather than by name by hand

00:05:04,159 --> 00:05:09,169
and so we're enforcing that scoping at

00:05:05,990 --> 00:05:10,849
development time one thing I really have

00:05:09,169 --> 00:05:13,520
to address early on it's kind of the

00:05:10,849 --> 00:05:15,830
elephant in the room these libraries or

00:05:13,520 --> 00:05:17,780
at least the most recent ones they don't

00:05:15,830 --> 00:05:20,090
do inline Styles they are all about

00:05:17,780 --> 00:05:21,830
generating real CSS and inserting it

00:05:20,090 --> 00:05:24,919
into the document exactly what you would

00:05:21,830 --> 00:05:28,159
have written by hand another entry in

00:05:24,919 --> 00:05:30,440
the CSS andreas space is jss Biola

00:05:28,159 --> 00:05:34,069
Oleg's solar Budd ski and he's actually

00:05:30,440 --> 00:05:36,289
from here in Berlin but like I said

00:05:34,069 --> 00:05:38,210
because it's not inline Styles it's real

00:05:36,289 --> 00:05:40,039
CSS we can do things like add hover

00:05:38,210 --> 00:05:41,360
stylings we can add media queries and

00:05:40,039 --> 00:05:46,009
these will all work the way you would

00:05:41,360 --> 00:05:47,930
expect when you attach these styles to

00:05:46,009 --> 00:05:49,460
the document that's the moment at which

00:05:47,930 --> 00:05:52,310
it hands the classes to you so now you

00:05:49,460 --> 00:05:54,259
have a reference to those classes and

00:05:52,310 --> 00:05:55,819
when you insert some markup into the

00:05:54,259 --> 00:05:58,759
document whether it's by some fancy

00:05:55,819 --> 00:06:01,340
framework or even just inner HTML you

00:05:58,759 --> 00:06:03,409
can now interpolate those classes into

00:06:01,340 --> 00:06:05,120
the HTML like so so here our class is

00:06:03,409 --> 00:06:06,650
classes about heading and that evaluates

00:06:05,120 --> 00:06:08,889
to a string that was generated by the

00:06:06,650 --> 00:06:12,199
library not by us

00:06:08,889 --> 00:06:13,699
so scopes CSS is all about scoping to

00:06:12,199 --> 00:06:15,409
components that's what this is all about

00:06:13,699 --> 00:06:17,090
and that's why you see this work coming

00:06:15,409 --> 00:06:20,360
out of the reactor mmunity and similar

00:06:17,090 --> 00:06:22,159
libraries so much so that there's often

00:06:20,360 --> 00:06:25,460
bindings for the libraries like react

00:06:22,159 --> 00:06:27,440
jss so here what you're seeing is that

00:06:25,460 --> 00:06:28,789
we're injecting the styles at the bottom

00:06:27,440 --> 00:06:30,740
there we're injecting them into the

00:06:28,789 --> 00:06:32,690
component and then within the component

00:06:30,740 --> 00:06:33,620
we have access to those classes so in a

00:06:32,690 --> 00:06:35,330
sense what we're doing is we're

00:06:33,620 --> 00:06:37,150
generating a little stylesheet for every

00:06:35,330 --> 00:06:38,949
single component

00:06:37,150 --> 00:06:40,690
and if you're looking at this and

00:06:38,949 --> 00:06:42,820
wondering what about separating concerns

00:06:40,690 --> 00:06:45,490
do I have to put my styles in the same

00:06:42,820 --> 00:06:46,990
file as my JavaScript as my components

00:06:45,490 --> 00:06:48,340
and even though a lot of people do

00:06:46,990 --> 00:06:50,680
there's nothing stopping you from

00:06:48,340 --> 00:06:51,910
architecting your app differently you

00:06:50,680 --> 00:06:54,340
could extract your styles into a

00:06:51,910 --> 00:06:55,600
separate file and export them and then

00:06:54,340 --> 00:06:57,490
where you want to use it you can just

00:06:55,600 --> 00:06:58,389
import them at the top of that file but

00:06:57,490 --> 00:07:00,790
what you're doing is you make an

00:06:58,389 --> 00:07:02,710
explicit reference from where you define

00:07:00,790 --> 00:07:04,180
the styles to where you use them the

00:07:02,710 --> 00:07:07,030
maintainability of your Styles is

00:07:04,180 --> 00:07:08,500
greatly increased at this point but

00:07:07,030 --> 00:07:10,270
what's important here is your Styles are

00:07:08,500 --> 00:07:11,919
now passed around like regular code it's

00:07:10,270 --> 00:07:13,539
not something that that sits in the

00:07:11,919 --> 00:07:14,889
global scope implicitly it's something

00:07:13,539 --> 00:07:16,600
that you have to hand around your

00:07:14,889 --> 00:07:19,870
application to the components that need

00:07:16,600 --> 00:07:23,050
it and component scoping is now

00:07:19,870 --> 00:07:25,060
automated for us this is the basis of

00:07:23,050 --> 00:07:27,190
working in an environment like atomic

00:07:25,060 --> 00:07:29,410
design where it's all about components

00:07:27,190 --> 00:07:31,120
all the way down and to do this at scale

00:07:29,410 --> 00:07:34,840
effectively with multiple people we need

00:07:31,120 --> 00:07:36,669
to scope our CSS the key thing here is

00:07:34,840 --> 00:07:38,830
that been a best practice in the CSS

00:07:36,669 --> 00:07:40,060
community is now baked in it's not

00:07:38,830 --> 00:07:43,660
opt-in it's not something you have to

00:07:40,060 --> 00:07:44,620
remember to do it's done for you now at

00:07:43,660 --> 00:07:46,270
this point you might be looking at it

00:07:44,620 --> 00:07:48,190
and thinking if you're familiar with CSS

00:07:46,270 --> 00:07:50,320
modules that's exactly what CSS modules

00:07:48,190 --> 00:07:51,610
does for you and that's right so if

00:07:50,320 --> 00:07:53,380
that's all you want

00:07:51,610 --> 00:07:56,289
CSS modules will do that for you and

00:07:53,380 --> 00:07:57,729
it's really great but another feature

00:07:56,289 --> 00:07:59,349
came along that people are experiment

00:07:57,729 --> 00:08:01,180
experimenting with that really opened my

00:07:59,349 --> 00:08:03,270
eyes for the possibility of doing scales

00:08:01,180 --> 00:08:05,530
in JavaScript and that's critical CSS

00:08:03,270 --> 00:08:07,389
now Patrick's already covered a little

00:08:05,530 --> 00:08:09,400
bit of this earlier today but just for a

00:08:07,389 --> 00:08:11,770
quick recap this is something that

00:08:09,400 --> 00:08:14,410
Google PageSpeed have been talking about

00:08:11,770 --> 00:08:15,970
for a while now and recommending that

00:08:14,410 --> 00:08:18,010
you do in your applications and that's

00:08:15,970 --> 00:08:19,780
inlining styles for the current page in

00:08:18,010 --> 00:08:23,020
the head of the document to improve that

00:08:19,780 --> 00:08:24,460
that initial rendering speed so it looks

00:08:23,020 --> 00:08:26,169
something like this as we've seen before

00:08:24,460 --> 00:08:28,090
your your inlining the styles that are

00:08:26,169 --> 00:08:29,680
relevant to this page in the head and

00:08:28,090 --> 00:08:30,940
then the rest of your stylesheet can

00:08:29,680 --> 00:08:33,880
safely set at the bottom of the page

00:08:30,940 --> 00:08:36,520
delaying the full stylesheet until later

00:08:33,880 --> 00:08:37,570
when it's when it's needed there's some

00:08:36,520 --> 00:08:39,669
really great tooling up there for

00:08:37,570 --> 00:08:41,320
automating this but a project called

00:08:39,669 --> 00:08:43,779
critical from addy Osmani that does this

00:08:41,320 --> 00:08:45,339
for us and it's really great to do this

00:08:43,779 --> 00:08:47,230
of course for obvious reasons speeding

00:08:45,339 --> 00:08:48,550
up that initial render but the problem

00:08:47,230 --> 00:08:49,990
is that well first of all it's an

00:08:48,550 --> 00:08:52,870
optional optimization

00:08:49,990 --> 00:08:56,230
you have to add in later but as Patrick

00:08:52,870 --> 00:08:58,450
said as well my clique is playing up

00:08:56,230 --> 00:09:00,190
it's hard to maintain and it's hard to

00:08:58,450 --> 00:09:02,170
automate and I completely agree with

00:09:00,190 --> 00:09:03,670
this it's quite a heavyweight system is

00:09:02,170 --> 00:09:05,170
powered by phantom Jo so it's not

00:09:03,670 --> 00:09:08,110
something you'd want to do on every

00:09:05,170 --> 00:09:10,120
request on the server for example if you

00:09:08,110 --> 00:09:11,709
look at CSS and JSO in a server rendered

00:09:10,120 --> 00:09:14,920
environment it's a complete opposite

00:09:11,709 --> 00:09:18,130
because with CSS and J is critical CSS

00:09:14,920 --> 00:09:20,560
is not just an optimization server-side

00:09:18,130 --> 00:09:24,040
CSS and J's actually depends on critical

00:09:20,560 --> 00:09:25,510
CSS to work a good example of this is

00:09:24,040 --> 00:09:28,300
the library Aphrodite from Khan Academy

00:09:25,510 --> 00:09:29,800
and it looks something like this so at

00:09:28,300 --> 00:09:32,170
the top there you can see we're defining

00:09:29,800 --> 00:09:34,300
our Styles next to our component as

00:09:32,170 --> 00:09:36,160
we've already seen but what I want you

00:09:34,300 --> 00:09:37,480
to pay attention to is inside the render

00:09:36,160 --> 00:09:39,760
function for that heading component

00:09:37,480 --> 00:09:41,440
every time we reference our Styles we're

00:09:39,760 --> 00:09:43,060
wrapping them in a call to the CSS

00:09:41,440 --> 00:09:45,550
function and what this function is doing

00:09:43,060 --> 00:09:47,980
is its allowing aphrodite to keep track

00:09:45,550 --> 00:09:49,720
of every style that's being used at any

00:09:47,980 --> 00:09:51,550
moment in time so if you do a full

00:09:49,720 --> 00:09:53,380
render of the application Aphrodite

00:09:51,550 --> 00:09:56,470
knows exactly which Styles you need

00:09:53,380 --> 00:09:58,420
exactly which Styles you don't need so

00:09:56,470 --> 00:10:00,420
that means that on a server when you're

00:09:58,420 --> 00:10:03,160
rendering server-side for every request

00:10:00,420 --> 00:10:05,050
you can hook into Aphrodite and render

00:10:03,160 --> 00:10:07,000
your application to a string and part of

00:10:05,050 --> 00:10:10,329
that is getting both the HTML and the

00:10:07,000 --> 00:10:12,010
CSS for that for that render so now

00:10:10,329 --> 00:10:13,750
getting the critical CSS is something

00:10:12,010 --> 00:10:15,579
that's automated for us on every render

00:10:13,750 --> 00:10:17,890
here we're generating a string of a

00:10:15,579 --> 00:10:19,810
style tag and inside of it we're

00:10:17,890 --> 00:10:22,510
inserting the CSS content that was

00:10:19,810 --> 00:10:24,310
generated for us by Aphrodite and if

00:10:22,510 --> 00:10:26,440
you've worked with react on the server

00:10:24,310 --> 00:10:27,820
or seen what how it works before you'll

00:10:26,440 --> 00:10:29,290
see that this is very familiar because

00:10:27,820 --> 00:10:31,060
this is exactly what you do with react

00:10:29,290 --> 00:10:32,860
as well so even though react can run in

00:10:31,060 --> 00:10:34,600
the browser we can also render it on the

00:10:32,860 --> 00:10:36,100
server and all the HTML that react

00:10:34,600 --> 00:10:38,050
generates for us we can insert it into

00:10:36,100 --> 00:10:42,459
the string so now we have static HTML

00:10:38,050 --> 00:10:44,200
and static CSS so the key thing here is

00:10:42,459 --> 00:10:46,450
that even though we're defining

00:10:44,200 --> 00:10:48,160
everything in JavaScript you might think

00:10:46,450 --> 00:10:49,779
that javascript is required but this is

00:10:48,160 --> 00:10:51,279
built for progressive enhancement the

00:10:49,779 --> 00:10:53,020
browser can completely shut off

00:10:51,279 --> 00:10:58,000
JavaScript and things will still work as

00:10:53,020 --> 00:11:00,160
expected so even if your server rendered

00:10:58,000 --> 00:11:02,440
or if like what we do at seek sometimes

00:11:00,160 --> 00:11:04,179
is statically pre-rendered to HTML so

00:11:02,440 --> 00:11:06,069
even for simplest static

00:11:04,179 --> 00:11:07,599
we can leverage the same components and

00:11:06,069 --> 00:11:10,659
we can render the static HTML and CSS

00:11:07,599 --> 00:11:12,220
and again there's a bit of a theme here

00:11:10,659 --> 00:11:15,549
which is that the best practice of

00:11:12,220 --> 00:11:17,639
critical CSS is built-in it's not opt-in

00:11:15,549 --> 00:11:19,929
when you work in this environment the

00:11:17,639 --> 00:11:21,699
third point I want to cover is smarter

00:11:19,929 --> 00:11:23,979
optimizations and this is all based on

00:11:21,699 --> 00:11:25,479
the fact that CSS and J's has better

00:11:23,979 --> 00:11:28,509
integration with your markup as we'll

00:11:25,479 --> 00:11:30,099
see now in the CSS community there's

00:11:28,509 --> 00:11:32,379
been a big focus on how we can reduce

00:11:30,099 --> 00:11:34,299
our CSS bundle to the absolute minimum

00:11:32,379 --> 00:11:36,429
as we add more and more styles to our

00:11:34,299 --> 00:11:37,839
application our style sheets grow larger

00:11:36,429 --> 00:11:39,819
and larger over time and how do we deal

00:11:37,839 --> 00:11:41,709
with that there's been some really

00:11:39,819 --> 00:11:43,929
interesting work from Yahoo and atomic

00:11:41,709 --> 00:11:45,999
CSS they use a really interesting

00:11:43,929 --> 00:11:48,339
somewhat controversial function call

00:11:45,999 --> 00:11:49,839
style syntax in their classes and from

00:11:48,339 --> 00:11:51,599
this they can use some tooling to

00:11:49,839 --> 00:11:54,699
generate a style sheet for you

00:11:51,599 --> 00:11:57,039
there's also tachyons from Adam Moss

00:11:54,699 --> 00:11:58,239
that does something similar it's a

00:11:57,039 --> 00:11:59,739
slightly more opinionated framework

00:11:58,239 --> 00:12:02,079
style and it gives you a suite of

00:11:59,739 --> 00:12:03,669
classes to choose from and apply the

00:12:02,079 --> 00:12:04,959
idea is that once you get familiar with

00:12:03,669 --> 00:12:07,869
the library you'd be able to read these

00:12:04,959 --> 00:12:09,189
of course and the key idea that they're

00:12:07,869 --> 00:12:11,559
pushing here is that they're treating

00:12:09,189 --> 00:12:14,979
classes like inline styles to try and

00:12:11,559 --> 00:12:17,049
reduce the CSS in that final bundle now

00:12:14,979 --> 00:12:19,479
to me this one is a little bit of a

00:12:17,049 --> 00:12:21,339
mixed bag in the sense that I value the

00:12:19,479 --> 00:12:23,259
output I think it's worth trying to cut

00:12:21,339 --> 00:12:24,849
down the CSS bundle but it comes at

00:12:23,259 --> 00:12:26,529
quite a cost at development time you

00:12:24,849 --> 00:12:28,839
have to buy into a framework or you're

00:12:26,529 --> 00:12:30,220
using obscure syntax and these sorts of

00:12:28,839 --> 00:12:31,599
things are hard to use in a team

00:12:30,220 --> 00:12:33,609
environment where maybe not everyone

00:12:31,599 --> 00:12:36,669
familiar not everyone is bought in so

00:12:33,609 --> 00:12:38,679
I'm not so sure on this one but if you

00:12:36,669 --> 00:12:41,979
look at the way CSS and j/s works and

00:12:38,679 --> 00:12:44,169
surface modules as well you never

00:12:41,979 --> 00:12:45,970
hard-code a string to a class it's

00:12:44,169 --> 00:12:47,919
always a reference to a string that's

00:12:45,970 --> 00:12:49,689
provided to you either from the library

00:12:47,919 --> 00:12:52,389
from the tooling so here we're saying

00:12:49,689 --> 00:12:54,309
that this aside uses the Styles dot side

00:12:52,389 --> 00:12:56,709
by class but because that's a reference

00:12:54,309 --> 00:12:59,679
with string it might resolve to a simple

00:12:56,709 --> 00:13:01,269
string like sidebar after all we know it

00:12:59,679 --> 00:13:03,639
could be made up of several classes

00:13:01,269 --> 00:13:05,139
dozens of classes it's actually not out

00:13:03,639 --> 00:13:07,599
of our control it's the tooling that

00:13:05,139 --> 00:13:09,249
takes care of this for us so that opens

00:13:07,599 --> 00:13:11,349
up some really interesting possibilities

00:13:09,249 --> 00:13:13,389
the perfect example of this is a really

00:13:11,349 --> 00:13:16,029
great library called style Tron by Ryan

00:13:13,389 --> 00:13:17,620
Zhou and this one really to me shows

00:13:16,029 --> 00:13:19,570
where we can start to do red

00:13:17,620 --> 00:13:23,560
clean new things once we blow the lines

00:13:19,570 --> 00:13:25,690
between CSS and JavaScript because what

00:13:23,560 --> 00:13:28,180
it brings to the table is dynamic zero

00:13:25,690 --> 00:13:30,430
config atomic CSS all the benefits of

00:13:28,180 --> 00:13:32,170
reducing that final payload without the

00:13:30,430 --> 00:13:36,310
development time cost without having to

00:13:32,170 --> 00:13:38,560
buy into a framework in the same way so

00:13:36,310 --> 00:13:40,420
what I want to show you here is is what

00:13:38,560 --> 00:13:42,610
it kind of looks like in practice so on

00:13:40,420 --> 00:13:43,930
the left there what you've got is three

00:13:42,610 --> 00:13:45,460
different sets of rules being defined

00:13:43,930 --> 00:13:48,070
and on the right there you've got the

00:13:45,460 --> 00:13:49,839
final generated CSS the first thing

00:13:48,070 --> 00:13:51,790
you'll notice is that the generated CSS

00:13:49,839 --> 00:13:53,410
is half the size and why is that

00:13:51,790 --> 00:13:56,860
it's because there's a lot of repetition

00:13:53,410 --> 00:13:59,110
going on so font size of 1.6 M is in the

00:13:56,860 --> 00:14:01,420
first and the last one a height of 32

00:13:59,110 --> 00:14:03,610
pixels is in the top and middle set of

00:14:01,420 --> 00:14:06,220
rules and display:inline-block block is

00:14:03,610 --> 00:14:07,980
in the last two so that means in effect

00:14:06,220 --> 00:14:10,210
we've really only got three unique

00:14:07,980 --> 00:14:12,580
combinations with so we only need three

00:14:10,210 --> 00:14:15,040
classes and this is something that style

00:14:12,580 --> 00:14:16,690
Tron can take care of that for for us

00:14:15,040 --> 00:14:18,640
automatically by generating these

00:14:16,690 --> 00:14:20,529
virtual class strings in the middle so

00:14:18,640 --> 00:14:21,670
you notice we've got classes of a b a c

00:14:20,529 --> 00:14:23,410
bc

00:14:21,670 --> 00:14:25,839
that's encapsulating what's in common

00:14:23,410 --> 00:14:28,000
between these different styles for us so

00:14:25,839 --> 00:14:31,660
that that atomic CSS style string can

00:14:28,000 --> 00:14:33,400
actually be generated for us so in code

00:14:31,660 --> 00:14:36,670
what that looks like at its lowest level

00:14:33,400 --> 00:14:39,130
is style Tron gives us an API to inject

00:14:36,670 --> 00:14:41,440
a single declaration of a property value

00:14:39,130 --> 00:14:43,120
and media query combination again this

00:14:41,440 --> 00:14:45,730
is not inline style this is generating

00:14:43,120 --> 00:14:47,860
real CSS and for this what we get is the

00:14:45,730 --> 00:14:50,459
class a this is the first class we've

00:14:47,860 --> 00:14:52,690
generated so once we start to generate

00:14:50,459 --> 00:14:54,490
classes for multiple rules what you'll

00:14:52,690 --> 00:14:56,620
start to see is what we saw before so

00:14:54,490 --> 00:14:58,630
here the color red is used in both the

00:14:56,620 --> 00:15:01,540
first and second sets so we get the

00:14:58,630 --> 00:15:03,610
class a but display:inline-block in font

00:15:01,540 --> 00:15:05,410
size 1.6 m/s they're different so we get

00:15:03,610 --> 00:15:07,690
different classes so all the common

00:15:05,410 --> 00:15:09,339
styles are factored out for us but it's

00:15:07,690 --> 00:15:13,420
hidden away behind this abstraction of

00:15:09,339 --> 00:15:14,950
generating the class names for us so

00:15:13,420 --> 00:15:17,170
what that means when we generate our

00:15:14,950 --> 00:15:19,390
final bundle is that when you can pierce

00:15:17,170 --> 00:15:22,330
the Ultron to other CSS and Jas

00:15:19,390 --> 00:15:24,250
approaches you get you get half the size

00:15:22,330 --> 00:15:26,350
of a bundle basically because it's able

00:15:24,250 --> 00:15:28,930
to aggressively optimize down to the

00:15:26,350 --> 00:15:31,730
minimum set of combinations of property

00:15:28,930 --> 00:15:33,170
value and media query

00:15:31,730 --> 00:15:34,790
and just to be clear as well this is

00:15:33,170 --> 00:15:38,840
real-world CSS this is actually from

00:15:34,790 --> 00:15:41,450
Airbnb this set of CSS and again the

00:15:38,840 --> 00:15:43,070
trend continues that the best practice

00:15:41,450 --> 00:15:45,680
in terms of generating the smallest

00:15:43,070 --> 00:15:47,810
output of atomic CSS it's now baked in

00:15:45,680 --> 00:15:49,250
it's not opt-in and we can only do this

00:15:47,810 --> 00:15:53,330
because now we have closer integration

00:15:49,250 --> 00:15:55,460
between our markup and our Styles the

00:15:53,330 --> 00:15:57,650
fourth point I think is where I really

00:15:55,460 --> 00:16:02,120
start to be sold on this idea and that's

00:15:57,650 --> 00:16:04,550
around package management I want you to

00:16:02,120 --> 00:16:07,060
think about how we share CSS we've been

00:16:04,550 --> 00:16:09,260
doing it for a long time how do we do it

00:16:07,060 --> 00:16:10,700
you might think that we've had package

00:16:09,260 --> 00:16:14,120
managers that are friendly to the front

00:16:10,700 --> 00:16:15,920
end like valor and that's true but even

00:16:14,120 --> 00:16:18,470
when you're using package managers like

00:16:15,920 --> 00:16:20,000
NPM when you're including CSS into your

00:16:18,470 --> 00:16:22,670
application from a third-party package

00:16:20,000 --> 00:16:24,080
the inclusion step is generally a manual

00:16:22,670 --> 00:16:25,430
step it's something that you have to go

00:16:24,080 --> 00:16:27,050
out of your way to wire into your

00:16:25,430 --> 00:16:28,550
application which is completely

00:16:27,050 --> 00:16:32,030
different from the code that you're

00:16:28,550 --> 00:16:34,700
installing and I think the key reason

00:16:32,030 --> 00:16:36,620
why this is happening is because our CSS

00:16:34,700 --> 00:16:38,510
and the package managers that provide it

00:16:36,620 --> 00:16:40,550
are not coupled to a module system in

00:16:38,510 --> 00:16:44,060
the way that we've seen with NPM and

00:16:40,550 --> 00:16:45,890
commonjs modules because when you think

00:16:44,060 --> 00:16:47,750
about what happens on NPM for example

00:16:45,890 --> 00:16:49,580
and how it deals with packages that have

00:16:47,750 --> 00:16:51,890
dependencies of dependencies of

00:16:49,580 --> 00:16:54,620
dependencies they're easily able to

00:16:51,890 --> 00:16:55,910
manage that fact but with CSS it's

00:16:54,620 --> 00:16:57,830
something that we can't really do very

00:16:55,910 --> 00:17:01,010
well we can't build CSS built up of

00:16:57,830 --> 00:17:02,450
other CSS and I think you see this trend

00:17:01,010 --> 00:17:04,730
play out in terms of the different

00:17:02,450 --> 00:17:06,500
styles of package managers so Bower as a

00:17:04,730 --> 00:17:08,420
package manager had this problem as well

00:17:06,500 --> 00:17:10,790
is very much about flat dependencies

00:17:08,420 --> 00:17:13,160
whereas NPM is more about a web of

00:17:10,790 --> 00:17:15,680
dependencies small libraries that that

00:17:13,160 --> 00:17:17,959
many many people provide and it plays

00:17:15,680 --> 00:17:19,580
out I think in in in the exponential

00:17:17,959 --> 00:17:24,320
growth of the number of packages being

00:17:19,580 --> 00:17:25,730
created when you have this flat set of

00:17:24,320 --> 00:17:28,310
dependencies like we've seen with Bower

00:17:25,730 --> 00:17:29,990
or like we see in the CSS community what

00:17:28,310 --> 00:17:32,480
you end up having is monolithic

00:17:29,990 --> 00:17:34,700
dependencies big big libraries this is

00:17:32,480 --> 00:17:37,040
what leads to things like in the older

00:17:34,700 --> 00:17:38,810
world of front-end single page

00:17:37,040 --> 00:17:40,910
applications you might install jQuery

00:17:38,810 --> 00:17:43,250
you might have saw underscore you - all

00:17:40,910 --> 00:17:44,150
backbone and then you were done because

00:17:43,250 --> 00:17:46,370
you didn't really

00:17:44,150 --> 00:17:48,200
a good way to manage much more code than

00:17:46,370 --> 00:17:49,970
that and in the CSS world we've seen the

00:17:48,200 --> 00:17:54,110
same things with where you would pick a

00:17:49,970 --> 00:17:57,950
framework like a like tachyons for

00:17:54,110 --> 00:18:00,380
example and then that was it so where's

00:17:57,950 --> 00:18:03,140
our package manager for CSS for sass for

00:18:00,380 --> 00:18:05,060
less we we don't really have one that's

00:18:03,140 --> 00:18:06,860
catered to that specific needs that

00:18:05,060 --> 00:18:09,650
really tackles it in the same way that

00:18:06,860 --> 00:18:11,300
we've seen elsewhere but what I want you

00:18:09,650 --> 00:18:12,800
to do is think a little bit differently

00:18:11,300 --> 00:18:13,940
about the web platform for a second and

00:18:12,800 --> 00:18:15,470
you think about where's our package

00:18:13,940 --> 00:18:18,860
manager for HTML we're putting all this

00:18:15,470 --> 00:18:21,860
focus on CSS what do you think about it

00:18:18,860 --> 00:18:25,850
we already share HTML a lot but we share

00:18:21,860 --> 00:18:27,350
it via JavaScript so you install jQuery

00:18:25,850 --> 00:18:29,210
components you install backbone

00:18:27,350 --> 00:18:31,370
components angular directives react

00:18:29,210 --> 00:18:33,170
components these are all encapsulating

00:18:31,370 --> 00:18:35,000
HTML in JavaScript and that's what

00:18:33,170 --> 00:18:36,500
enables us to share and build on top of

00:18:35,000 --> 00:18:38,240
each other in a way that wouldn't be

00:18:36,500 --> 00:18:41,270
possible if we were just using static

00:18:38,240 --> 00:18:43,820
HTML so the question is what if we

00:18:41,270 --> 00:18:46,940
started sharing CSS via JavaScript and

00:18:43,820 --> 00:18:48,800
NPM in the same way packaging up our CSS

00:18:46,940 --> 00:18:51,830
behind JavaScript in the way our HTML

00:18:48,800 --> 00:18:53,600
templates are as well instead of mix-ins

00:18:51,830 --> 00:18:56,300
we have functions that operate on plain

00:18:53,600 --> 00:18:58,780
data strings and objects instead of

00:18:56,300 --> 00:19:02,420
extending rules we just use built-in

00:18:58,780 --> 00:19:04,700
syntax like the new object spread syntax

00:19:02,420 --> 00:19:07,910
for spreading our rules objects of rules

00:19:04,700 --> 00:19:10,640
together now this means that we can

00:19:07,910 --> 00:19:12,470
compose and share our Styles like any

00:19:10,640 --> 00:19:14,680
other code in our application and we can

00:19:12,470 --> 00:19:17,330
leverage package managers to do this a

00:19:14,680 --> 00:19:19,220
good example of how this plays out is a

00:19:17,330 --> 00:19:20,870
really great library called polish by

00:19:19,220 --> 00:19:24,680
Max turbo who couldn't be here today and

00:19:20,870 --> 00:19:27,650
nikrif and polished is really the lodash

00:19:24,680 --> 00:19:30,080
of CSS and J's it's it's a whole suite

00:19:27,650 --> 00:19:32,390
of utility functions for operating on

00:19:30,080 --> 00:19:34,940
CSS in a JavaScript environment but more

00:19:32,390 --> 00:19:36,530
importantly it's not relegated to the

00:19:34,940 --> 00:19:39,050
style part of your application you can

00:19:36,530 --> 00:19:40,160
use this anywhere and this is

00:19:39,050 --> 00:19:41,570
particularly useful if you're doing

00:19:40,160 --> 00:19:43,100
things like building style guides and

00:19:41,570 --> 00:19:45,050
you want to programmatically have access

00:19:43,100 --> 00:19:46,520
to the logic behind your CSS this is a

00:19:45,050 --> 00:19:48,800
problem we face all the time where I

00:19:46,520 --> 00:19:51,400
work and having the logic in JavaScript

00:19:48,800 --> 00:19:53,800
neatly solves this problem

00:19:51,400 --> 00:19:56,980
so the hope is that once you move

00:19:53,800 --> 00:19:59,470
towards expressing CSS in JavaScript we

00:19:56,980 --> 00:20:03,010
can start to see open source CSS look

00:19:59,470 --> 00:20:05,140
more like the NPM chart there where more

00:20:03,010 --> 00:20:06,970
and more Styles are built upon shared

00:20:05,140 --> 00:20:08,380
low-level functions are written and

00:20:06,970 --> 00:20:11,980
built upon and shared in a way that we

00:20:08,380 --> 00:20:13,990
haven't done before and ironically

00:20:11,980 --> 00:20:15,880
enough we can do this by embracing

00:20:13,990 --> 00:20:19,840
JavaScript modules of module format

00:20:15,880 --> 00:20:21,670
that's in it widely supported today the

00:20:19,840 --> 00:20:23,710
final point I want to cover is much more

00:20:21,670 --> 00:20:25,630
future facing this is not necessarily

00:20:23,710 --> 00:20:28,000
something that the CSS and J's community

00:20:25,630 --> 00:20:29,650
is particularly particularly big on but

00:20:28,000 --> 00:20:31,990
I think it's something that really is

00:20:29,650 --> 00:20:33,040
not possible today in the CSS community

00:20:31,990 --> 00:20:35,950
and it's really interesting and that's

00:20:33,040 --> 00:20:37,330
non browsers filing now again like I

00:20:35,950 --> 00:20:39,250
said I've been a big part of the react

00:20:37,330 --> 00:20:41,860
community and reacts really interesting

00:20:39,250 --> 00:20:43,360
for a number of reasons but one of the

00:20:41,860 --> 00:20:45,429
big reasons is the fact that you don't

00:20:43,360 --> 00:20:48,000
deal with Dom manipulation directly you

00:20:45,429 --> 00:20:49,750
deal with virtual Dom you deal with a

00:20:48,000 --> 00:20:51,040
representation of what the final Dom

00:20:49,750 --> 00:20:53,650
will be rather than touching it directly

00:20:51,040 --> 00:20:55,510
and what that means is that when it

00:20:53,650 --> 00:20:57,010
comes time to render you actually use a

00:20:55,510 --> 00:20:58,720
renderer for that environment that

00:20:57,010 --> 00:21:00,070
you're dealing with so here when you

00:20:58,720 --> 00:21:02,260
when you render your react up on the

00:21:00,070 --> 00:21:03,790
server you're in a client you're pulling

00:21:02,260 --> 00:21:06,580
in from react Dom something that's built

00:21:03,790 --> 00:21:08,590
for dealing with the Dom but the fact is

00:21:06,580 --> 00:21:10,840
that react cor can actually have

00:21:08,590 --> 00:21:13,420
different renderers you don't just have

00:21:10,840 --> 00:21:15,190
to target the Dom it's not just virtual

00:21:13,420 --> 00:21:16,870
Dom its virtual whatever it is whatever

00:21:15,190 --> 00:21:18,460
the primitives are of the environment

00:21:16,870 --> 00:21:20,110
that you're working in so you would have

00:21:18,460 --> 00:21:21,670
seen that play out with react native

00:21:20,110 --> 00:21:23,500
something that I'm sure you've all seen

00:21:21,670 --> 00:21:26,050
before and react native is about

00:21:23,500 --> 00:21:28,210
bringing this idea of working with

00:21:26,050 --> 00:21:30,100
virtual representations of the final

00:21:28,210 --> 00:21:32,530
components in this case you're dealing

00:21:30,100 --> 00:21:34,030
with native components but what's

00:21:32,530 --> 00:21:35,260
interesting about react native is they

00:21:34,030 --> 00:21:38,020
wanted to make it friendly to people

00:21:35,260 --> 00:21:39,670
like us web developers who know CSS in

00:21:38,020 --> 00:21:41,110
and out and it comes with its own

00:21:39,670 --> 00:21:43,270
stylesheet abstraction so even though

00:21:41,110 --> 00:21:45,400
you're working in a native app you style

00:21:43,270 --> 00:21:46,990
your apps with what appears to be CSS

00:21:45,400 --> 00:21:48,670
here we're creating a style sheet with

00:21:46,990 --> 00:21:51,750
very familiar properties border-radius

00:21:48,670 --> 00:21:53,980
and with color font size and font weight

00:21:51,750 --> 00:21:55,929
but what's really interesting about it

00:21:53,980 --> 00:21:57,850
is the fact that you can use flexbox

00:21:55,929 --> 00:21:59,710
this is an environment that's completely

00:21:57,850 --> 00:22:01,360
outside of a browser doesn't natively

00:21:59,710 --> 00:22:04,110
have flexbox and yet here we are using

00:22:01,360 --> 00:22:06,150
flexbox in an iOS or android application

00:22:04,110 --> 00:22:09,059
the way they achieve this was actually

00:22:06,150 --> 00:22:11,280
by re-implementing flexbox in javascript

00:22:09,059 --> 00:22:13,020
in a project called CSS layout and there

00:22:11,280 --> 00:22:14,700
was a massive test suite making sure

00:22:13,020 --> 00:22:16,530
that it followed the spec correctly and

00:22:14,700 --> 00:22:19,559
this allowed them to bring the world of

00:22:16,530 --> 00:22:21,559
flex box into their native apps it's now

00:22:19,559 --> 00:22:24,059
been formalized in a project called yoga

00:22:21,559 --> 00:22:25,500
that's targeting a lot more environment

00:22:24,059 --> 00:22:27,150
so now it's actually no longer written

00:22:25,500 --> 00:22:29,790
in JavaScript it's written in C it

00:22:27,150 --> 00:22:31,590
targets Java c-sharp Objective C and C

00:22:29,790 --> 00:22:33,750
as well but what's really interesting

00:22:31,590 --> 00:22:35,280
about yoga is they've said that their

00:22:33,750 --> 00:22:37,799
focus is on creating an expressive

00:22:35,280 --> 00:22:39,840
layout library not implementing all of

00:22:37,799 --> 00:22:41,820
CSS so in a sense that might seem like

00:22:39,840 --> 00:22:43,470
it's being somewhat restrictive but I

00:22:41,820 --> 00:22:46,049
think if you think about our own work

00:22:43,470 --> 00:22:48,240
managing CSS at scale is all about

00:22:46,049 --> 00:22:50,340
picking a reasonable subset of the

00:22:48,240 --> 00:22:52,559
language you think about BEM you are you

00:22:50,340 --> 00:22:54,540
are deciding to not do a whole lot of

00:22:52,559 --> 00:22:56,160
things that CSS can do but you do this

00:22:54,540 --> 00:22:58,740
to make your app more maintainable to

00:22:56,160 --> 00:23:01,650
unlock further abilities in your team

00:22:58,740 --> 00:23:05,400
and to make your product more resilient

00:23:01,650 --> 00:23:06,720
over time so that means that if you're

00:23:05,400 --> 00:23:07,980
working react native you're not dealing

00:23:06,720 --> 00:23:09,690
with table layouts you're not dealing

00:23:07,980 --> 00:23:11,220
with floats you're dealing with flexbox

00:23:09,690 --> 00:23:12,929
and again because we're working outside

00:23:11,220 --> 00:23:15,390
of the browser environment we don't have

00:23:12,929 --> 00:23:16,559
the Cascade we have scope styles but in

00:23:15,390 --> 00:23:20,429
some ways this makes our app more

00:23:16,559 --> 00:23:22,020
maintainable and more portable what this

00:23:20,429 --> 00:23:24,030
unlocks now is the ability for us to

00:23:22,020 --> 00:23:25,890
finally have cross-platform components

00:23:24,030 --> 00:23:27,360
with embedded styles styles that are

00:23:25,890 --> 00:23:28,770
tightly coupled to the component in a

00:23:27,360 --> 00:23:31,500
way that makes them available to

00:23:28,770 --> 00:23:33,419
different platforms a really good

00:23:31,500 --> 00:23:35,040
example of what this allows us to do is

00:23:33,419 --> 00:23:37,620
a project called react native web from

00:23:35,040 --> 00:23:39,330
Nicholas Gallagher at Twitter and what

00:23:37,620 --> 00:23:41,040
react native web is it basically allows

00:23:39,330 --> 00:23:43,049
us to have a drop-in replacement where

00:23:41,040 --> 00:23:44,820
you can alias react native with react

00:23:43,049 --> 00:23:46,110
native web and everything you've written

00:23:44,820 --> 00:23:48,090
for your react native app can actually

00:23:46,110 --> 00:23:49,320
run in a browser and this is what

00:23:48,090 --> 00:23:52,799
they're experimenting with at Twitter

00:23:49,320 --> 00:23:54,630
today a similar project along the same

00:23:52,799 --> 00:23:56,929
lines as react primitives by Leland

00:23:54,630 --> 00:24:00,030
Richardson he works at Airbnb and

00:23:56,929 --> 00:24:02,010
recently we've seen funnily enough react

00:24:00,030 --> 00:24:04,620
XP from Microsoft which is a

00:24:02,010 --> 00:24:06,660
cross-platform component abstraction

00:24:04,620 --> 00:24:10,110
which again includes its own stylesheet

00:24:06,660 --> 00:24:12,000
system but can we take our components

00:24:10,110 --> 00:24:14,640
even further not all of us a building

00:24:12,000 --> 00:24:17,100
native apps is there much value beyond

00:24:14,640 --> 00:24:17,789
that we've seen a really interesting

00:24:17,100 --> 00:24:19,229
answer

00:24:17,789 --> 00:24:21,960
recently I'm sure a few of you have seen

00:24:19,229 --> 00:24:25,109
this react Sketchup by John Gould from

00:24:21,960 --> 00:24:27,419
from Airbnb as well and this is to me is

00:24:25,109 --> 00:24:29,220
really key not just to the future of

00:24:27,419 --> 00:24:30,539
components but to the future of design

00:24:29,220 --> 00:24:34,289
and how designers and developers

00:24:30,539 --> 00:24:36,960
interact because what reacts Sketchup

00:24:34,289 --> 00:24:39,090
lets you do is write react code with

00:24:36,960 --> 00:24:41,580
Styles co-located with your components

00:24:39,090 --> 00:24:43,979
but render not into a native app not

00:24:41,580 --> 00:24:45,960
into a browser but into sketch I'm sure

00:24:43,979 --> 00:24:47,789
most of you are probably not aware as I

00:24:45,960 --> 00:24:49,679
wasn't but sketch actually has a

00:24:47,789 --> 00:24:51,690
JavaScript API or actually a cocoa

00:24:49,679 --> 00:24:53,759
script API and that's what allows them

00:24:51,690 --> 00:24:56,099
to run this code in an environment

00:24:53,759 --> 00:24:58,109
that's typically targeting designers we

00:24:56,099 --> 00:25:01,080
can bridge a gap in a really interesting

00:24:58,109 --> 00:25:03,330
way and if like me you work day in day

00:25:01,080 --> 00:25:05,129
out on design systems in the browser

00:25:03,330 --> 00:25:06,779
this unlocks a really interesting

00:25:05,129 --> 00:25:09,749
potential of how we interact with our

00:25:06,779 --> 00:25:11,039
designers and we can do really

00:25:09,749 --> 00:25:13,460
interesting things like this here's a

00:25:11,039 --> 00:25:16,440
video that John posted which is showing

00:25:13,460 --> 00:25:18,929
responsive design style rendering into

00:25:16,440 --> 00:25:20,879
sketch all driven by code and this is

00:25:18,929 --> 00:25:24,029
only possible because we've been able to

00:25:20,879 --> 00:25:27,019
write our our markup and our Styles in a

00:25:24,029 --> 00:25:29,279
way that's portable outside of a browser

00:25:27,019 --> 00:25:31,979
what we're looking at here is finally

00:25:29,279 --> 00:25:33,979
cross-platform cross-disciplinary Design

00:25:31,979 --> 00:25:36,960
Systems

00:25:33,979 --> 00:25:39,299
we're having cross-platform code as the

00:25:36,960 --> 00:25:40,950
source of truth in our design systems so

00:25:39,299 --> 00:25:44,909
instead of sketching the source of truth

00:25:40,950 --> 00:25:46,559
or Photoshop or PDFs code is now the

00:25:44,909 --> 00:25:48,450
source of truth but we can move that

00:25:46,559 --> 00:25:54,200
code back into an environment where the

00:25:48,450 --> 00:25:56,909
designers can also make use of it so

00:25:54,200 --> 00:25:59,070
it's been a whirlwind tour of why people

00:25:56,909 --> 00:26:00,629
want to do CSS and j/s or at least why

00:25:59,070 --> 00:26:03,179
you want to be interested in it at the

00:26:00,629 --> 00:26:05,099
very least and just to recap all of this

00:26:03,179 --> 00:26:07,049
it's all about scoping our Styles to the

00:26:05,099 --> 00:26:09,149
component so that we can scale up to

00:26:07,049 --> 00:26:11,009
large systems and make them maintainable

00:26:09,149 --> 00:26:12,899
in a way that doesn't require so much

00:26:11,009 --> 00:26:14,669
careful hand-holding it's about

00:26:12,899 --> 00:26:16,229
optimizing our apps in ways that we

00:26:14,669 --> 00:26:18,509
couldn't before and then it's about

00:26:16,229 --> 00:26:20,399
taking our work and sharing it through

00:26:18,509 --> 00:26:21,269
package managers again in ways that we

00:26:20,399 --> 00:26:24,239
couldn't do before

00:26:21,269 --> 00:26:25,649
it's about composing large applications

00:26:24,239 --> 00:26:27,029
out of that shared code and being able

00:26:25,649 --> 00:26:28,830
to build a community that we haven't

00:26:27,029 --> 00:26:30,309
been able to build before and it's about

00:26:28,830 --> 00:26:32,649
unifying on

00:26:30,309 --> 00:26:35,409
on a portable platform that can target

00:26:32,649 --> 00:26:37,869
multiple environments it's about moving

00:26:35,409 --> 00:26:39,609
us towards a unified styling language

00:26:37,869 --> 00:26:41,619
and it's doing it in a way that I never

00:26:39,609 --> 00:26:43,690
would have expected and it's taken me a

00:26:41,619 --> 00:26:46,210
while to admit that this might very well

00:26:43,690 --> 00:26:49,299
be the future of how we do styling for

00:26:46,210 --> 00:26:51,070
the web and beyond and this is what I'm

00:26:49,299 --> 00:26:53,259
bringing into my work day in and day out

00:26:51,070 --> 00:26:55,719
because I work on a component system and

00:26:53,259 --> 00:26:57,969
it's all about components it's all about

00:26:55,719 --> 00:27:00,039
abstracting the styles behind a clean

00:26:57,969 --> 00:27:01,359
component interface and I think this is

00:27:00,039 --> 00:27:03,129
the basis of how we're going to build

00:27:01,359 --> 00:27:06,849
better and better systems into the

00:27:03,129 --> 00:27:08,169
future critically I want to do this

00:27:06,849 --> 00:27:11,830
without breaking in a progressive

00:27:08,169 --> 00:27:13,539
enhancement I've come from a deep web

00:27:11,830 --> 00:27:15,279
background and I really love what the

00:27:13,539 --> 00:27:20,349
web platform provides and I think we can

00:27:15,279 --> 00:27:22,299
have the best of both worlds here so

00:27:20,349 --> 00:27:23,499
when we think about learning CSS and we

00:27:22,299 --> 00:27:26,589
think about everything that we've just

00:27:23,499 --> 00:27:28,629
seen all of this stuff nothing prevents

00:27:26,589 --> 00:27:30,669
you from the fact that you have still

00:27:28,629 --> 00:27:33,909
have to learn CSS you still have to

00:27:30,669 --> 00:27:36,909
learn CSS and that's where we all come

00:27:33,909 --> 00:27:38,619
in the CSS in just J's community is not

00:27:36,909 --> 00:27:40,599
done yet there's still a whole lot of

00:27:38,619 --> 00:27:43,059
innovation happening and that's where we

00:27:40,599 --> 00:27:45,099
need to get involved because there's a

00:27:43,059 --> 00:27:46,719
bunch of problems that are still being

00:27:45,099 --> 00:27:49,119
worked on there's a lot of room for

00:27:46,719 --> 00:27:50,889
improvement and and that the the one

00:27:49,119 --> 00:27:52,359
library to rule them all has not been

00:27:50,889 --> 00:27:53,919
written yet so we're looking at

00:27:52,359 --> 00:27:56,229
improving performance we're looking at

00:27:53,919 --> 00:27:58,659
extracting static CSS where possible

00:27:56,229 --> 00:28:00,580
hopefully as much as possible we've seen

00:27:58,659 --> 00:28:02,950
people experiment with targeting CSS

00:28:00,580 --> 00:28:06,039
variables rather than targeting the web

00:28:02,950 --> 00:28:07,450
of several years ago and finally the

00:28:06,039 --> 00:28:08,950
most important thing and I think this is

00:28:07,450 --> 00:28:11,019
where the people in this room can help

00:28:08,950 --> 00:28:13,049
the most of all is making developers

00:28:11,019 --> 00:28:15,609
happy because what we're seeing here is

00:28:13,049 --> 00:28:17,200
potentially the future of CSS tooling

00:28:15,609 --> 00:28:19,899
and we want to make sure that we get it

00:28:17,200 --> 00:28:22,869
right and I really hope that that from

00:28:19,899 --> 00:28:25,509
this you you take the message that this

00:28:22,869 --> 00:28:26,589
isn't as as ridiculous as it sounds

00:28:25,509 --> 00:28:28,359
there's actually some very sound

00:28:26,589 --> 00:28:29,349
thinking behind it and your input is

00:28:28,359 --> 00:28:31,089
going to be really valuable and

00:28:29,349 --> 00:28:32,379
hopefully maybe you've come around to

00:28:31,089 --> 00:28:34,389
the fact that there's something to this

00:28:32,379 --> 00:28:36,399
and something worth checking out so

00:28:34,389 --> 00:28:37,550
that's it for me thank you so much for

00:28:36,399 --> 00:28:39,520
listening

00:28:37,550 --> 00:28:42,640
[Applause]

00:28:39,520 --> 00:28:42,640

YouTube URL: https://www.youtube.com/watch?v=X_uTCnaRe94


