Title: CSSconf EU 2017 | David Khourshid: Getting Reactive with CSS
Publication date: 2017-05-29
Playlist: CSSconf EU 2017
Description: 
	http://2017.cssconf.eu/speakers/david-khourshid.html

As user interfaces evolve and become more interactive, design requirements become more complex. By combining CSS variables with reactive programming in JS, we can now express animations, styles, layout, and more in ways never before possible with CSS. In this talk, weâ€™ll explore what functional reactive programming is, why it is incredibly useful, and how we can leverage the power of CSS variables to push the limits of styling the web.
Captions: 
	00:00:00,750 --> 00:00:09,169
[Music]

00:00:09,590 --> 00:00:16,170
hi everyone I prepared this because the

00:00:12,809 --> 00:00:21,539
Wi-Fi was growing up on me so actually I

00:00:16,170 --> 00:00:24,240
wired in and now it works so my name is

00:00:21,539 --> 00:00:26,039
David crocheted and I'm excited to be

00:00:24,240 --> 00:00:28,010
here for two reasons

00:00:26,039 --> 00:00:31,410
number one I get to share the stage with

00:00:28,010 --> 00:00:34,110
so many amazing talented women and men

00:00:31,410 --> 00:00:34,590
in the CSS community so that's pretty

00:00:34,110 --> 00:00:37,110
awesome

00:00:34,590 --> 00:00:39,840
and also because today we're going to be

00:00:37,110 --> 00:00:41,040
exploring some areas of CSS that we

00:00:39,840 --> 00:00:45,780
frankly never thought was possible

00:00:41,040 --> 00:00:47,969
before I work for Microsoft so I'm

00:00:45,780 --> 00:00:52,590
obligated to tell you that edge does not

00:00:47,969 --> 00:00:57,539
suck okay and if it does I'm not on the

00:00:52,590 --> 00:00:59,789
edge team so it's not my fault a year

00:00:57,539 --> 00:01:02,879
and a half ago I entered a hackathon

00:00:59,789 --> 00:01:05,640
with my friends um it was an angular 2

00:01:02,879 --> 00:01:08,310
hackathon which almost sounds like fun

00:01:05,640 --> 00:01:10,860
and there were two main goals number one

00:01:08,310 --> 00:01:13,619
was learn the basics of angular 2 which

00:01:10,860 --> 00:01:17,790
I think right now is on version 5 or 13

00:01:13,619 --> 00:01:20,939
and also build a useful app using Engler

00:01:17,790 --> 00:01:26,390
2 so something like a to-do list or a

00:01:20,939 --> 00:01:30,390
weather app so we built tinder for goats

00:01:26,390 --> 00:01:34,710
this was our app idea you know not

00:01:30,390 --> 00:01:37,320
really viable but um I was delegated as

00:01:34,710 --> 00:01:39,840
the CSS person for doing this project

00:01:37,320 --> 00:01:41,850
and everyone else to the angular which I

00:01:39,840 --> 00:01:44,880
was thankful for and they were thankful

00:01:41,850 --> 00:01:46,860
that I was doing that CSS because as you

00:01:44,880 --> 00:01:48,509
all know the maximum number of CSS

00:01:46,860 --> 00:01:50,310
developers that could work on a

00:01:48,509 --> 00:01:54,680
stylesheet without messing it up is

00:01:50,310 --> 00:01:58,350
between zero and one and so I was at one

00:01:54,680 --> 00:02:00,509
and I managed to make the interface look

00:01:58,350 --> 00:02:03,509
as close to the attender in her face as

00:02:00,509 --> 00:02:06,930
possible with the exception of one thing

00:02:03,509 --> 00:02:08,940
and that's the whole swiping thing now I

00:02:06,930 --> 00:02:11,790
had only two hours to do this so I was

00:02:08,940 --> 00:02:13,060
trying to frantically figure out how do

00:02:11,790 --> 00:02:15,670
I do the whole

00:02:13,060 --> 00:02:17,710
swiping interaction so I was looking up

00:02:15,670 --> 00:02:20,560
tutorials and they said here's this

00:02:17,710 --> 00:02:23,410
jQuery thing you could use here's this

00:02:20,560 --> 00:02:25,810
ionic thing but none of those were going

00:02:23,410 --> 00:02:30,310
to work in Engler - just because angular

00:02:25,810 --> 00:02:32,800
2 was so new and so this led to a lot of

00:02:30,310 --> 00:02:37,750
questions first and foremost how our

00:02:32,800 --> 00:02:40,180
goats going to use this app and secondly

00:02:37,750 --> 00:02:43,390
how do you create interactive

00:02:40,180 --> 00:02:48,220
experiences in you know CSS and

00:02:43,390 --> 00:02:50,560
JavaScript so for years I challenged

00:02:48,220 --> 00:02:52,450
myself to create these complex

00:02:50,560 --> 00:02:57,250
interfaces and even animations like this

00:02:52,450 --> 00:03:00,280
box using only CSS and by doing that I

00:02:57,250 --> 00:03:04,150
got to see how much CSS could actually

00:03:00,280 --> 00:03:06,340
do because one year constraints to

00:03:04,150 --> 00:03:08,620
thinking inside the box and stuff

00:03:06,340 --> 00:03:11,800
outside the box you get to know the box

00:03:08,620 --> 00:03:13,570
really well so by doing this I got to

00:03:11,800 --> 00:03:16,660
you know look at all the ins and outs of

00:03:13,570 --> 00:03:18,670
CSS and all the little tricks that you

00:03:16,660 --> 00:03:20,980
could use in order to create complex

00:03:18,670 --> 00:03:24,310
things but eventually working in just

00:03:20,980 --> 00:03:28,510
CSS you hit a wall right and you

00:03:24,310 --> 00:03:30,790
discover that CSS is not powerful at all

00:03:28,510 --> 00:03:33,010
you know you need JavaScript to do

00:03:30,790 --> 00:03:35,560
complex interactions but I also

00:03:33,010 --> 00:03:39,040
discovered that CSS not being powerful

00:03:35,560 --> 00:03:41,620
is a good thing and there's a principle

00:03:39,040 --> 00:03:43,930
of least power that the w3c has where it

00:03:41,620 --> 00:03:46,450
says to use a language with the least

00:03:43,930 --> 00:03:48,820
power in order to express what you want

00:03:46,450 --> 00:03:56,470
to do so CSS would be that language for

00:03:48,820 --> 00:03:58,450
styling now on CSS HTML and JavaScript

00:03:56,470 --> 00:04:00,150
are pretty much the bread and butter of

00:03:58,450 --> 00:04:03,910
web apps which is completely different

00:04:00,150 --> 00:04:09,329
than Android apps or iOS apps where is

00:04:03,910 --> 00:04:09,329
some Java and Swift or objective-c and

00:04:09,570 --> 00:04:13,299
we're in an age right now where

00:04:11,410 --> 00:04:15,549
progressive web apps are becoming more

00:04:13,299 --> 00:04:19,000
and more important and alliance between

00:04:15,549 --> 00:04:21,609
web apps and native apps are being

00:04:19,000 --> 00:04:24,160
blurred and because of this micro

00:04:21,609 --> 00:04:26,040
interactions are crucial not only

00:04:24,160 --> 00:04:28,710
because users come to a

00:04:26,040 --> 00:04:30,660
affected because users wants to be able

00:04:28,710 --> 00:04:32,190
to play with an interface and move it

00:04:30,660 --> 00:04:34,440
and pan it and do all sorts of stuff

00:04:32,190 --> 00:04:39,540
with it but also because it reduces

00:04:34,440 --> 00:04:43,620
cognitive load so what if what if web

00:04:39,540 --> 00:04:46,230
apps felt like native apps and if we

00:04:43,620 --> 00:04:49,650
could think about that how exactly can

00:04:46,230 --> 00:04:52,410
we get there now Android and iOS have a

00:04:49,650 --> 00:04:54,180
slight advantage you know you have core

00:04:52,410 --> 00:04:59,190
animations you have layouts you have

00:04:54,180 --> 00:05:02,160
property animations and they they handle

00:04:59,190 --> 00:05:05,460
nated interactions like touch and voice

00:05:02,160 --> 00:05:08,010
and all sorts of stuff natively within

00:05:05,460 --> 00:05:11,310
their api's the web is playing catch-up

00:05:08,010 --> 00:05:14,250
but it still has a little while to go so

00:05:11,310 --> 00:05:18,080
think about this what if interactive web

00:05:14,250 --> 00:05:21,180
user interfaces were easier to make

00:05:18,080 --> 00:05:28,580
right and what if they were easier to

00:05:21,180 --> 00:05:30,800
make with CSS so you all might know that

00:05:28,580 --> 00:05:35,460
CSS is awesome

00:05:30,800 --> 00:05:37,770
but some people don't think so some

00:05:35,460 --> 00:05:41,760
people are like and no CSS has its

00:05:37,770 --> 00:05:42,960
quirks right and there's you know some

00:05:41,760 --> 00:05:46,050
of the things that we sometimes struggle

00:05:42,960 --> 00:05:47,490
with CSS but the thing is if you you

00:05:46,050 --> 00:05:49,770
know read the spec for once in your life

00:05:47,490 --> 00:05:52,440
you could fix a lot of these problems

00:05:49,770 --> 00:05:55,470
but that doesn't stop people from

00:05:52,440 --> 00:05:58,590
thinking that CSS is just awful so

00:05:55,470 --> 00:06:01,560
instead today what I want you to do at

00:05:58,590 --> 00:06:05,640
least for the next 24 minutes and 13 12

00:06:01,560 --> 00:06:07,710
seconds is to think of CSS as fun and

00:06:05,640 --> 00:06:10,230
we're going to make it fun by

00:06:07,710 --> 00:06:15,510
introducing functional and reactive

00:06:10,230 --> 00:06:17,730
programming right and the techniques I'm

00:06:15,510 --> 00:06:21,960
going to show you are you know going to

00:06:17,730 --> 00:06:24,020
be applied anywhere so we're going to be

00:06:21,960 --> 00:06:27,030
talking about CSS variables and

00:06:24,020 --> 00:06:28,440
functional and reactive programming what

00:06:27,030 --> 00:06:32,610
we're not going to be talking about is

00:06:28,440 --> 00:06:33,630
CSS JavaScript that means later and

00:06:32,610 --> 00:06:35,970
we're not going to be talking about

00:06:33,630 --> 00:06:37,830
frameworks such as react angular and

00:06:35,970 --> 00:06:39,510
view and other things that you might be

00:06:37,830 --> 00:06:41,460
using to build web apps

00:06:39,510 --> 00:06:43,050
the reason is because the techniques I'm

00:06:41,460 --> 00:06:48,030
going to show you can be applied

00:06:43,050 --> 00:06:51,390
anywhere so as you might know you know

00:06:48,030 --> 00:06:53,400
on the subject of CSS MJS there's only

00:06:51,390 --> 00:06:54,840
two hard things in computer science you

00:06:53,400 --> 00:06:55,470
know of course the first one is naming

00:06:54,840 --> 00:07:02,840
things

00:06:55,470 --> 00:07:05,400
now CSS MJS aims to tackle this one

00:07:02,840 --> 00:07:08,550
naming things so how many of you have

00:07:05,400 --> 00:07:11,910
actually used something like CSS modules

00:07:08,550 --> 00:07:14,610
or I'll know any of the other million

00:07:11,910 --> 00:07:17,280
CSS MJS things how many of you use it

00:07:14,610 --> 00:07:20,520
alright so you might know how it works

00:07:17,280 --> 00:07:23,670
right you have a style sheet or you have

00:07:20,520 --> 00:07:26,100
something where you define styles and it

00:07:23,670 --> 00:07:29,330
takes whatever class name you give it

00:07:26,100 --> 00:07:33,690
and it turns it into complete gibberish

00:07:29,330 --> 00:07:35,880
and this way it tackles the naming

00:07:33,690 --> 00:07:38,610
things problems and it also tackles the

00:07:35,880 --> 00:07:43,320
problem of global styles by isolating

00:07:38,610 --> 00:07:51,180
this by creating unintelligible name not

00:07:43,320 --> 00:07:54,030
part and also there is there were some

00:07:51,180 --> 00:07:56,400
solutions that were proposed a long time

00:07:54,030 --> 00:07:58,640
ago in Internet Explorer 7 we had

00:07:56,400 --> 00:08:02,190
something called CSS expressions and

00:07:58,640 --> 00:08:03,900
this is where we put JavaScript inside

00:08:02,190 --> 00:08:06,620
of CSS so it's actually sort of the

00:08:03,900 --> 00:08:09,690
complete opposite of doing CSS MJS and

00:08:06,620 --> 00:08:12,150
over here is code to vertically Center

00:08:09,690 --> 00:08:13,830
this div in the body so this goes to

00:08:12,150 --> 00:08:16,590
show you how hard it is to vertically

00:08:13,830 --> 00:08:18,980
Center something in Internet Explorer

00:08:16,590 --> 00:08:21,780
where we have to add all of that and

00:08:18,980 --> 00:08:23,640
Netscape and not wanting to be left out

00:08:21,780 --> 00:08:26,760
of the party came out with its own

00:08:23,640 --> 00:08:29,880
JavaScript style sheets where instead of

00:08:26,760 --> 00:08:33,660
using CSS it just used plain JavaScript

00:08:29,880 --> 00:08:35,700
in order to style anything and if you're

00:08:33,660 --> 00:08:41,970
wondering why Netscape died it's because

00:08:35,700 --> 00:08:44,460
of this but now today we have CSS

00:08:41,970 --> 00:08:46,860
variables also known as CSS custom

00:08:44,460 --> 00:08:49,080
properties but let's be honest no one's

00:08:46,860 --> 00:08:51,960
ever going to call it that and

00:08:49,080 --> 00:08:53,140
thankfully for all the browser's that we

00:08:51,960 --> 00:08:57,210
care about its

00:08:53,140 --> 00:09:00,280
supported which is really really awesome

00:08:57,210 --> 00:09:03,180
unfortunately in Internet Explorer if

00:09:00,280 --> 00:09:05,830
you have to support Internet Explorer

00:09:03,180 --> 00:09:07,780
variables aren't supported variables

00:09:05,830 --> 00:09:12,690
don't work but that's ok cuz nothing

00:09:07,780 --> 00:09:14,770
else works and there's also Opera Mini 2

00:09:12,690 --> 00:09:17,830
all right so how many of you actually

00:09:14,770 --> 00:09:20,500
know what CSS variables are I I would

00:09:17,830 --> 00:09:22,510
assume most of you right because er SPSS

00:09:20,500 --> 00:09:25,360
conference you want to you know be

00:09:22,510 --> 00:09:27,460
up-to-date on the latest and greatest so

00:09:25,360 --> 00:09:29,830
here's the CSS variable in case you

00:09:27,460 --> 00:09:31,900
don't know it starts with two dashes and

00:09:29,830 --> 00:09:34,720
the reason it starts with two dashes is

00:09:31,900 --> 00:09:36,460
actually a really important reason I

00:09:34,720 --> 00:09:39,010
don't know what that reason is

00:09:36,460 --> 00:09:42,280
but it I'm sure it's important right now

00:09:39,010 --> 00:09:44,620
this does nothing until you actually

00:09:42,280 --> 00:09:47,740
apply the variable inside of a ver

00:09:44,620 --> 00:09:49,810
statement like that and so this 150

00:09:47,740 --> 00:09:51,940
pixels is applied to the transform and

00:09:49,810 --> 00:09:56,020
so it moves one hundreds of B pixels to

00:09:51,940 --> 00:09:59,010
the right but what if we do this what if

00:09:56,020 --> 00:10:03,130
we took the unit's out of the variable

00:09:59,010 --> 00:10:05,380
right now we have to use calc and when

00:10:03,130 --> 00:10:06,700
you're using CSS variables the more you

00:10:05,380 --> 00:10:09,100
use it you're going to discover that

00:10:06,700 --> 00:10:12,430
calc is going to be your best friend

00:10:09,100 --> 00:10:16,600
with CSS variables here's why we did

00:10:12,430 --> 00:10:19,810
this it's because you can set to use

00:10:16,600 --> 00:10:22,420
this variables using javascript all you

00:10:19,810 --> 00:10:24,910
have to do is you take the elements the

00:10:22,420 --> 00:10:27,010
node you do the nodes that style that

00:10:24,910 --> 00:10:30,100
set property and then you can set that

00:10:27,010 --> 00:10:33,430
to get this variable to any number or

00:10:30,100 --> 00:10:34,990
string that works inside of CSS so in

00:10:33,430 --> 00:10:36,880
this case I'm using a library called

00:10:34,990 --> 00:10:40,320
hammer and I love hammered because

00:10:36,880 --> 00:10:43,900
hammer handles touches pans taps any

00:10:40,320 --> 00:10:45,730
interaction with your fingers so so what

00:10:43,900 --> 00:10:48,370
emulates mobile experience is really

00:10:45,730 --> 00:10:51,340
well and over here I'm just setting it

00:10:48,370 --> 00:10:54,190
to recognize when I pan left and right I

00:10:51,340 --> 00:10:58,690
take the Delta X from that and I set it

00:10:54,190 --> 00:11:00,910
to that Delta X variable and so now I

00:10:58,690 --> 00:11:03,880
could use that variable inside of this

00:11:00,910 --> 00:11:06,640
transformed there's one problem here

00:11:03,880 --> 00:11:08,440
though and that's when I dupe an end

00:11:06,640 --> 00:11:10,630
I set it to zero because obviously we're

00:11:08,440 --> 00:11:13,450
not panning anymore and just jumped to

00:11:10,630 --> 00:11:16,570
the mill this is where the magic of CSS

00:11:13,450 --> 00:11:20,020
comes in we can set another variable

00:11:16,570 --> 00:11:25,120
called panning and do sort of like a a

00:11:20,020 --> 00:11:28,540
boolean CSS where we set it to 1 if we

00:11:25,120 --> 00:11:32,080
are panning and we set to 0 if we're not

00:11:28,540 --> 00:11:34,570
panning and over here down spawn don't

00:11:32,080 --> 00:11:39,010
know if you can see but we set the

00:11:34,570 --> 00:11:42,370
transition duration to 600 milliseconds

00:11:39,010 --> 00:11:44,590
if we're not panning and we set to 0 if

00:11:42,370 --> 00:11:47,410
we are panning because the movement is

00:11:44,590 --> 00:11:51,880
controlled with our fingers and you

00:11:47,410 --> 00:11:56,170
might see this complex formula over here

00:11:51,880 --> 00:11:58,660
and this reverses whatever I passed into

00:11:56,170 --> 00:12:01,300
panning so if I am panning negative 1

00:11:58,660 --> 00:12:03,700
times 1 plus 1 is 0 so it's the opposite

00:12:01,300 --> 00:12:07,180
if I'm not handing negative 1 times 0

00:12:03,700 --> 00:12:08,800
plus 1 is 1 so I am caning I like to

00:12:07,180 --> 00:12:11,770
call this boolean Stiles

00:12:08,800 --> 00:12:16,410
also known as BS not not to be confused

00:12:11,770 --> 00:12:16,410
with the other BS you know bootstrap

00:12:16,530 --> 00:12:24,220
so here's I'm just kidding by the way

00:12:19,450 --> 00:12:26,290
here's the real example over here and so

00:12:24,220 --> 00:12:28,990
I'm just using my mouse to just go back

00:12:26,290 --> 00:12:34,450
and forth and you can see it works

00:12:28,990 --> 00:12:36,900
pretty well if you're clapping out that

00:12:34,450 --> 00:12:39,640
I'm really excited because there's more

00:12:36,900 --> 00:12:40,720
you might be asking why did I use the SS

00:12:39,640 --> 00:12:44,020
variables to do this

00:12:40,720 --> 00:12:47,440
why can I just set it directly using

00:12:44,020 --> 00:12:49,750
javascript so there's a few reasons if

00:12:47,440 --> 00:12:54,040
you've ever tried to use media queries

00:12:49,750 --> 00:12:56,350
in JavaScript it's a complete pain like

00:12:54,040 --> 00:12:58,510
especially trying to detect when the

00:12:56,350 --> 00:13:00,970
window resizes listening for that

00:12:58,510 --> 00:13:02,890
putting in the requestanimationframe so

00:13:00,970 --> 00:13:05,110
it doesn't block your UI all the time

00:13:02,890 --> 00:13:08,650
and there's also things like

00:13:05,110 --> 00:13:09,910
prefer to reduce motion which you know I

00:13:08,650 --> 00:13:11,500
don't even know how to do it in

00:13:09,910 --> 00:13:14,740
JavaScript but I'm sure that there's a

00:13:11,500 --> 00:13:17,050
way and so you could use media queries

00:13:14,740 --> 00:13:19,340
in order to control your CSS variables

00:13:17,050 --> 00:13:21,080
this is great because that means

00:13:19,340 --> 00:13:23,450
that whatever values you're sending

00:13:21,080 --> 00:13:25,070
through JavaScript you're not married to

00:13:23,450 --> 00:13:26,900
those values you're not committed to

00:13:25,070 --> 00:13:30,110
them you could use them however you want

00:13:26,900 --> 00:13:31,700
in your CSS files and what this also

00:13:30,110 --> 00:13:34,160
means is that you could use them in

00:13:31,700 --> 00:13:36,530
pseudo elements I recognize I said

00:13:34,160 --> 00:13:39,470
pseudo selectors over here I was wrong

00:13:36,530 --> 00:13:41,630
I'm sorry don't attack me on Twitter or

00:13:39,470 --> 00:13:43,760
anything but yeah you could use them

00:13:41,630 --> 00:13:46,790
inside before and after which makes

00:13:43,760 --> 00:13:48,590
things really easy of course you could

00:13:46,790 --> 00:13:51,530
sort of emulate before and after

00:13:48,590 --> 00:13:53,140
elements in JavaScript but don't do it

00:13:51,530 --> 00:13:58,100
please

00:13:53,140 --> 00:14:02,120
there's also performance it's much much

00:13:58,100 --> 00:14:05,270
much faster to set a CSS variable on a

00:14:02,120 --> 00:14:08,690
parent's container that is inherited by

00:14:05,270 --> 00:14:11,690
all of its child and descendant elements

00:14:08,690 --> 00:14:13,580
then having to go through each and every

00:14:11,690 --> 00:14:16,160
single one of those elements that has

00:14:13,580 --> 00:14:18,740
that style and set them one by one and

00:14:16,160 --> 00:14:22,160
so here's a benchmark where it shows

00:14:18,740 --> 00:14:25,040
that more than twice as fast as doing it

00:14:22,160 --> 00:14:27,710
with inline Styles if you don't believe

00:14:25,040 --> 00:14:29,570
me you could just click this link but

00:14:27,710 --> 00:14:34,040
don't tweet us because I will get in

00:14:29,570 --> 00:14:36,530
trouble and there's also in section two

00:14:34,040 --> 00:14:38,810
you could open up your dev tools and you

00:14:36,530 --> 00:14:41,900
could immediately inspect via CSS

00:14:38,810 --> 00:14:44,630
variables apply through anywhere just so

00:14:41,900 --> 00:14:46,520
you could see that it doesn't matter

00:14:44,630 --> 00:14:48,980
where these values are coming from right

00:14:46,520 --> 00:14:51,250
you could just modify them directly and

00:14:48,980 --> 00:14:53,450
be able to visually see immediately

00:14:51,250 --> 00:14:57,190
what's happening when you change those

00:14:53,450 --> 00:15:03,170
values which is much harder to do in

00:14:57,190 --> 00:15:07,340
JavaScript so what if instead you you

00:15:03,170 --> 00:15:10,660
wanted to react to any events at any

00:15:07,340 --> 00:15:13,190
time that could come from anywhere in

00:15:10,660 --> 00:15:16,310
order to create rich interactive user

00:15:13,190 --> 00:15:22,100
interfaces in an expressive declarative

00:15:16,310 --> 00:15:24,260
way so this is where functional reactive

00:15:22,100 --> 00:15:27,700
animations come in I could tell you're

00:15:24,260 --> 00:15:31,700
really excited so hold on there

00:15:27,700 --> 00:15:35,720
Proactive animations here's our reactive

00:15:31,700 --> 00:15:38,570
animations are they are animations that

00:15:35,720 --> 00:15:43,010
involve discrete changes due to

00:15:38,570 --> 00:15:44,480
potentially continuous events so if

00:15:43,010 --> 00:15:47,480
you're a musician one of the best ways

00:15:44,480 --> 00:15:50,060
to think about this is sheet music sound

00:15:47,480 --> 00:15:52,450
is conceptually continuous right you

00:15:50,060 --> 00:15:55,580
play a note it goes on and it's

00:15:52,450 --> 00:15:56,060
basically an infinite series of sound

00:15:55,580 --> 00:15:58,580
waves

00:15:56,060 --> 00:16:01,100
however sheet music is like you know

00:15:58,580 --> 00:16:03,590
single dots on the page that represents

00:16:01,100 --> 00:16:04,430
what you play and animations are sort of

00:16:03,590 --> 00:16:07,040
the same way

00:16:04,430 --> 00:16:10,010
animations are conceptually continuous

00:16:07,040 --> 00:16:12,260
right but there's specific keyframes

00:16:10,010 --> 00:16:14,630
where you define all of these animations

00:16:12,260 --> 00:16:18,500
and so that's where the discrete changes

00:16:14,630 --> 00:16:20,570
are now this idea is not new it's

00:16:18,500 --> 00:16:23,650
actually really really old coming from

00:16:20,570 --> 00:16:26,450
1997 a year after

00:16:23,650 --> 00:16:29,480
well visit CSS or the web was born or

00:16:26,450 --> 00:16:32,270
something like that and in this paper

00:16:29,480 --> 00:16:34,190
which is very much an academic paper

00:16:32,270 --> 00:16:36,380
there's one quote where it says by

00:16:34,190 --> 00:16:38,900
allowing programmers to express the what

00:16:36,380 --> 00:16:42,230
of an interactive animation one can hope

00:16:38,900 --> 00:16:44,360
to automate the how of its presentation

00:16:42,230 --> 00:16:46,190
and I quoted this because it's the only

00:16:44,360 --> 00:16:50,630
paragraph I understood in this entire

00:16:46,190 --> 00:16:52,760
paper but also because it um and this is

00:16:50,630 --> 00:16:54,410
her website by the way this is what they

00:16:52,760 --> 00:16:56,360
did with reactive animations we're not

00:16:54,410 --> 00:17:00,200
going to be doing this this is just

00:16:56,360 --> 00:17:02,180
weird but it's important to understand

00:17:00,200 --> 00:17:05,330
this because it blurs the lines between

00:17:02,180 --> 00:17:07,640
development and design which is really

00:17:05,330 --> 00:17:09,590
good so in JavaScript we have what's

00:17:07,640 --> 00:17:11,990
called a value which could be anything

00:17:09,590 --> 00:17:14,570
it could be a number boolean value it

00:17:11,990 --> 00:17:17,390
could be an object and if we have

00:17:14,570 --> 00:17:19,850
multiple you know a multiple collection

00:17:17,390 --> 00:17:21,250
of these values we have an array or an

00:17:19,850 --> 00:17:26,060
iterable

00:17:21,250 --> 00:17:28,340
now this is the the spectrum of things

00:17:26,060 --> 00:17:30,740
that happen immediately we get this

00:17:28,340 --> 00:17:33,590
value immediately we get each of those

00:17:30,740 --> 00:17:35,260
values in the array immediately now what

00:17:33,590 --> 00:17:37,910
about things that happen over time a

00:17:35,260 --> 00:17:38,980
single value can be represented as a

00:17:37,910 --> 00:17:41,530
promise

00:17:38,980 --> 00:17:43,510
you get a value but it doesn't come

00:17:41,530 --> 00:17:45,880
immediately it comes eventually maybe

00:17:43,510 --> 00:17:49,240
after three seconds we're going to be

00:17:45,880 --> 00:17:52,000
talking about today is observables which

00:17:49,240 --> 00:17:58,480
are multiple values just like an array

00:17:52,000 --> 00:18:00,550
that all occur over time so we're going

00:17:58,480 --> 00:18:03,760
to be implementing observables with rxjs

00:18:00,550 --> 00:18:05,800
and this is a library that follows the

00:18:03,760 --> 00:18:08,350
observable spec so this is something

00:18:05,800 --> 00:18:11,890
that could very well be a native part of

00:18:08,350 --> 00:18:13,960
the web but this is essentially a

00:18:11,890 --> 00:18:18,400
polyfill with a whole bunch of goodies

00:18:13,960 --> 00:18:22,000
built into it so if we do um observable

00:18:18,400 --> 00:18:25,180
from event we could represent mouth

00:18:22,000 --> 00:18:28,540
moves for example on the box by grabbing

00:18:25,180 --> 00:18:30,340
the client X and the client Y and being

00:18:28,540 --> 00:18:33,240
able to observe each one of those

00:18:30,340 --> 00:18:36,070
positions on the map we could use our

00:18:33,240 --> 00:18:38,560
server both from a bent pattern for

00:18:36,070 --> 00:18:40,000
doing the same thing and this is for

00:18:38,560 --> 00:18:43,660
things that are not natively Dom

00:18:40,000 --> 00:18:46,300
elements so if I'm using hammer Jas then

00:18:43,660 --> 00:18:49,080
I could um I could grab the Delta X

00:18:46,300 --> 00:18:52,450
Delta Y values by passing in a callback

00:18:49,080 --> 00:18:56,230
into this from a bent pattern and here's

00:18:52,450 --> 00:18:58,630
why this is so powerful it's because we

00:18:56,230 --> 00:19:01,840
could operate and compose these

00:18:58,630 --> 00:19:03,790
observable values so if you think of

00:19:01,840 --> 00:19:06,750
this as an array of value set happening

00:19:03,790 --> 00:19:09,640
over time and we get all of these events

00:19:06,750 --> 00:19:11,440
represented as balls we could map each

00:19:09,640 --> 00:19:13,450
of these false that's one of the

00:19:11,440 --> 00:19:17,620
operators and transform it into

00:19:13,450 --> 00:19:18,880
something else such as a square but

00:19:17,620 --> 00:19:22,570
because we're working over time

00:19:18,880 --> 00:19:24,460
we could also delay or do other time

00:19:22,570 --> 00:19:26,500
like transformations such as the

00:19:24,460 --> 00:19:28,600
bouncing and throttling and buffering

00:19:26,500 --> 00:19:31,150
things that you can't do with an array

00:19:28,600 --> 00:19:34,020
because in the array exists at only a

00:19:31,150 --> 00:19:36,490
single point in time and not over time

00:19:34,020 --> 00:19:39,640
there's also filtering of course just

00:19:36,490 --> 00:19:42,370
like an array and there's a important

00:19:39,640 --> 00:19:45,310
operator called scan and what scan does

00:19:42,370 --> 00:19:47,710
is it takes the previous value and it

00:19:45,310 --> 00:19:50,440
combines it with the current value so

00:19:47,710 --> 00:19:52,300
over here I'm just adding 1 plus 1 is 2

00:19:50,440 --> 00:19:55,360
2 plus 1 is 3

00:19:52,300 --> 00:19:57,550
three plus five is eight and so on and

00:19:55,360 --> 00:20:02,590
this is a distancing operator that I use

00:19:57,550 --> 00:20:05,980
a lot when I use rxjs so these are

00:20:02,590 --> 00:20:07,570
called marble diagrams and they're fun

00:20:05,980 --> 00:20:09,910
to play with because you could visually

00:20:07,570 --> 00:20:12,250
see on this website arced marbles com

00:20:09,910 --> 00:20:14,980
how observables work together with

00:20:12,250 --> 00:20:20,680
different operators I personally like to

00:20:14,980 --> 00:20:22,600
call them observables so I'm subscribing

00:20:20,680 --> 00:20:24,700
to observables is where the magic

00:20:22,600 --> 00:20:30,220
actually happens once you have an

00:20:24,700 --> 00:20:32,650
observable if you hit subscribe you get

00:20:30,220 --> 00:20:35,050
each value as they come in

00:20:32,650 --> 00:20:37,600
so it's sort of like a callback except

00:20:35,050 --> 00:20:39,490
by doing this you could isolate all of

00:20:37,600 --> 00:20:42,790
your side effects and changes into one

00:20:39,490 --> 00:20:45,190
dot subscribe and be observable

00:20:42,790 --> 00:20:47,530
the other good thing about is you define

00:20:45,190 --> 00:20:50,320
it but it doesn't do anything unless it

00:20:47,530 --> 00:20:54,070
absolutely has to so it's really lazy

00:20:50,320 --> 00:20:59,410
it's sort of like me all right so here's

00:20:54,070 --> 00:21:02,740
an example of using observables to get

00:20:59,410 --> 00:21:06,400
the get something else get a change

00:21:02,740 --> 00:21:08,140
value from this this range over here and

00:21:06,400 --> 00:21:10,360
the reason I'm doing this is because I

00:21:08,140 --> 00:21:12,340
got a comment on this pen that said this

00:21:10,360 --> 00:21:15,550
dog is a little bit hyperactive but it's

00:21:12,340 --> 00:21:19,030
cool and so I added a range slider in

00:21:15,550 --> 00:21:20,830
order to slow the animation down and you

00:21:19,030 --> 00:21:24,010
can see where I'm doing that over here

00:21:20,830 --> 00:21:27,850
I'm grabbing this value and I'm using it

00:21:24,010 --> 00:21:29,320
to define each of the durations I didn't

00:21:27,850 --> 00:21:35,260
realize I also made so that it goes

00:21:29,320 --> 00:21:38,320
super fast though too so yeah now we

00:21:35,260 --> 00:21:41,050
could also add physics all I'm doing is

00:21:38,320 --> 00:21:43,690
adding a dinette dynamics Ras library in

00:21:41,050 --> 00:21:47,440
order to create a physics observable

00:21:43,690 --> 00:21:51,310
every time I stop panning so when I do

00:21:47,440 --> 00:21:53,800
that instead of just going smoothly back

00:21:51,310 --> 00:21:56,590
to the location it bounces right back

00:21:53,800 --> 00:21:58,960
this has been controlled entirely with

00:21:56,590 --> 00:22:01,330
CSS variables the only thing that Java

00:21:58,960 --> 00:22:03,550
scripts doing is sending over the values

00:22:01,330 --> 00:22:05,799
so now we have complete control of

00:22:03,550 --> 00:22:09,009
styling and we could use those values

00:22:05,799 --> 00:22:11,190
however we want here's another example

00:22:09,009 --> 00:22:13,809
where I'm actually using

00:22:11,190 --> 00:22:19,119
requestanimationframe in an observable

00:22:13,809 --> 00:22:22,299
in order to to tilt this clock in a

00:22:19,119 --> 00:22:23,649
smooth way and so you could see that

00:22:22,299 --> 00:22:26,470
over here

00:22:23,649 --> 00:22:29,830
smooth mouse so if I change this and I

00:22:26,470 --> 00:22:32,320
just used now then you're going to see

00:22:29,830 --> 00:22:34,330
that it's very very rigid and this is

00:22:32,320 --> 00:22:38,409
one of the beauties of being able to

00:22:34,330 --> 00:22:42,749
compose observables and control them

00:22:38,409 --> 00:22:42,749
declaratively just like you do with CSS

00:22:44,220 --> 00:22:49,480
alright here's another example that I

00:22:47,139 --> 00:22:53,230
did recently where I'm using linear

00:22:49,480 --> 00:22:56,109
interpolation to smoothly go from one

00:22:53,230 --> 00:22:59,859
place to another and this is also being

00:22:56,109 --> 00:23:01,659
controlled with CSS variables as well so

00:22:59,859 --> 00:23:05,489
I have a bunch of things that I'm

00:23:01,659 --> 00:23:08,109
listening to right touches touchend

00:23:05,489 --> 00:23:10,570
numbers which is whenever the number

00:23:08,109 --> 00:23:14,109
changes in the range and I'm making it

00:23:10,570 --> 00:23:15,519
smooth by using lerp where on by the way

00:23:14,109 --> 00:23:17,350
if you don't know what lerp is linear

00:23:15,519 --> 00:23:19,419
interpolation it's just if you're going

00:23:17,350 --> 00:23:21,399
from one place to another instead of

00:23:19,419 --> 00:23:23,379
from jumping from one place to another

00:23:21,399 --> 00:23:25,539
you go part of the way there and then a

00:23:23,379 --> 00:23:28,090
little closer and a little closer so you

00:23:25,539 --> 00:23:35,909
get this really smooth effect going on

00:23:28,090 --> 00:23:40,330
here and when my last things I made is

00:23:35,909 --> 00:23:44,889
this app which uses a lot of observables

00:23:40,330 --> 00:23:47,739
and a lot of CSS variables too and this

00:23:44,889 --> 00:23:49,960
is one of the reasons I'm using CSS

00:23:47,739 --> 00:23:52,749
variables is because for example that's

00:23:49,960 --> 00:23:55,570
Delta X value for going left and right

00:23:52,749 --> 00:23:58,269
that's the only value value need to send

00:23:55,570 --> 00:24:00,970
in JavaScript in order to control so

00:23:58,269 --> 00:24:02,759
many things for example I'm controlling

00:24:00,970 --> 00:24:06,190
the gradients in the background I'm

00:24:02,759 --> 00:24:08,409
controlling the contents inside and also

00:24:06,190 --> 00:24:10,779
controlling the text inside here so

00:24:08,409 --> 00:24:12,990
there's a lot of things and a lot of

00:24:10,779 --> 00:24:16,330
moving parts that are happening with

00:24:12,990 --> 00:24:19,779
just that single value that single CSS

00:24:16,330 --> 00:24:23,320
variable now there's a really

00:24:19,779 --> 00:24:25,210
good reason why we want to move to CSS

00:24:23,320 --> 00:24:28,659
very or not CSS variables but

00:24:25,210 --> 00:24:32,349
observables and be able to expressively

00:24:28,659 --> 00:24:35,469
and declaratively define these

00:24:32,349 --> 00:24:38,200
animations and these interactions this

00:24:35,469 --> 00:24:41,229
is a charts by the material motion team

00:24:38,200 --> 00:24:44,109
at Google and it shows the typical

00:24:41,229 --> 00:24:46,929
process for what happens when we create

00:24:44,109 --> 00:24:48,460
a motion design designers prototype that

00:24:46,929 --> 00:24:50,320
they get feedback they use that feedback

00:24:48,460 --> 00:24:51,969
to continue the prototyping and

00:24:50,320 --> 00:24:54,309
eventually they hand off that motion

00:24:51,969 --> 00:24:57,339
design to a developer or a team of a

00:24:54,309 --> 00:25:02,499
team of developers and from there that's

00:24:57,339 --> 00:25:06,219
when the engineering starts instead we

00:25:02,499 --> 00:25:09,190
could narrow that cycle and have the

00:25:06,219 --> 00:25:13,119
prototype be an actual working prototype

00:25:09,190 --> 00:25:16,419
using real code that both engineers and

00:25:13,119 --> 00:25:19,419
designers can work on in tandem and by

00:25:16,419 --> 00:25:21,309
doing this and by allowing the feedback

00:25:19,419 --> 00:25:23,950
cycle to be part of the development

00:25:21,309 --> 00:25:27,580
instead of just part of the prototyping

00:25:23,950 --> 00:25:31,570
you ship faster and that's one of the

00:25:27,580 --> 00:25:33,849
main goals right because right now the

00:25:31,570 --> 00:25:36,519
way we're sort of doing things in

00:25:33,849 --> 00:25:39,729
JavaScript for dynamic styling is we

00:25:36,519 --> 00:25:43,899
apply two styles directly in JavaScript

00:25:39,729 --> 00:25:46,450
but if we move styling over to CSS and

00:25:43,899 --> 00:25:49,919
use JavaScript only for sending over

00:25:46,450 --> 00:25:53,409
values then we could potentially replace

00:25:49,919 --> 00:25:56,229
JavaScript and CSS with any sourcing any

00:25:53,409 --> 00:25:58,659
medium which means that these important

00:25:56,229 --> 00:26:00,070
values can come from anywhere and they

00:25:58,659 --> 00:26:03,759
could be applied to anything

00:26:00,070 --> 00:26:07,179
so instead CSS think of it as canvas or

00:26:03,759 --> 00:26:12,070
can give it as WebGL or think of it as

00:26:07,179 --> 00:26:14,710
platforms such as Android or iOS so one

00:26:12,070 --> 00:26:17,080
team is doing this right now which is

00:26:14,710 --> 00:26:19,509
material motion this is something that

00:26:17,080 --> 00:26:23,649
is very much in progress they're making

00:26:19,509 --> 00:26:26,349
a animation library using observables

00:26:23,649 --> 00:26:30,309
just like we talked about and they're

00:26:26,349 --> 00:26:32,859
targeting us iOS with Swift androids and

00:26:30,309 --> 00:26:33,490
the web it's still a few months out but

00:26:32,859 --> 00:26:36,100
they have a

00:26:33,490 --> 00:26:38,410
documentation on it and some really cool

00:26:36,100 --> 00:26:41,170
examples already so I definitely invite

00:26:38,410 --> 00:26:43,570
you to check that out and when doing

00:26:41,170 --> 00:26:46,570
this I also think of the future of what

00:26:43,570 --> 00:26:49,059
could be done with prototyping if any of

00:26:46,570 --> 00:26:50,920
you have used Facebook origami studio

00:26:49,059 --> 00:26:54,460
then this might look familiar to you

00:26:50,920 --> 00:26:56,410
where we define these these little

00:26:54,460 --> 00:26:59,290
fragments that you could connect to

00:26:56,410 --> 00:27:01,660
other fragments and what these are like

00:26:59,290 --> 00:27:03,010
is sort of a function where you connect

00:27:01,660 --> 00:27:05,380
one function to another and then you

00:27:03,010 --> 00:27:08,650
could control exactly what happens

00:27:05,380 --> 00:27:11,860
dynamically when creating your motion

00:27:08,650 --> 00:27:13,990
designs for at the beauty of this though

00:27:11,860 --> 00:27:18,250
is that it could be translated directly

00:27:13,990 --> 00:27:22,710
to code and so that way we blur the

00:27:18,250 --> 00:27:25,170
lines between design and development so

00:27:22,710 --> 00:27:27,580
what will you make with CSS variables

00:27:25,170 --> 00:27:31,150
this is an example of something that

00:27:27,580 --> 00:27:33,870
someone made with CSS variables and

00:27:31,150 --> 00:27:37,809
observables where when I move my mouse

00:27:33,870 --> 00:27:40,300
it's actually changing the HSL value and

00:27:37,809 --> 00:27:44,770
it's sending the delta x position of the

00:27:40,300 --> 00:27:46,360
mouse over the CSS and so the javascript

00:27:44,770 --> 00:27:49,950
is not controlling this all JavaScript's

00:27:46,360 --> 00:27:52,720
doing is sending over the values and

00:27:49,950 --> 00:27:55,330
yeah there's a whole collection of CSS

00:27:52,720 --> 00:27:56,800
variables that I've collected over coat

00:27:55,330 --> 00:28:00,760
ends because because then sort of my

00:27:56,800 --> 00:28:03,550
addiction but I really invite you to

00:28:00,760 --> 00:28:06,010
play around with CSS variables see what

00:28:03,550 --> 00:28:08,230
you could make and see how using

00:28:06,010 --> 00:28:10,600
observables can really help your

00:28:08,230 --> 00:28:15,660
interactive user interfaces in both

00:28:10,600 --> 00:28:15,660
design and development so thank you

00:28:16,530 --> 00:28:21,600
thank you

00:28:18,780 --> 00:28:24,350
okay so we're going to have a break for

00:28:21,600 --> 00:28:24,350

YouTube URL: https://www.youtube.com/watch?v=4IRPxCMAIfA


