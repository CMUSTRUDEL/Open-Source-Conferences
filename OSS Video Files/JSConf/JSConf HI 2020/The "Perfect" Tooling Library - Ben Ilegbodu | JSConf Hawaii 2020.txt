Title: The "Perfect" Tooling Library - Ben Ilegbodu | JSConf Hawaii 2020
Publication date: 2020-03-12
Playlist: JSConf HI 2020
Description: 
	So you have a great idea for the perfect JS library... but the implementation is only half the battle. You also need to configure infrastructure to develop, test, build and deploy your package. How do you set up Typescript and other static checking? Do you target ESM or CJS builds? Is integration testing even possible? There’s so much extra to consider!

Let’s learn what makes up the “perfect” library tooling. Familiarity with developing JavaScript packages will help you get the most out of this session, but you will gain plenty of helpful insights even if you have yet to build one. Oh, and don’t worry if you don’t understand all of those terms — you soon will after this video!

Slides: https://slides.benmvp.com/2020/jsconfhi/perfect-lib#/

JSConf Hawaii will return in 2021
https://www.jsconfhi.com/
Captions: 
	00:00:08,530 --> 00:00:16,090
Aloha everyone thank you for singing

00:00:12,010 --> 00:00:19,510
to me this is called the perfect the

00:00:16,090 --> 00:00:21,610
perfect JavaScript library because in

00:00:19,510 --> 00:00:23,920
JavaScript tooling because it's

00:00:21,610 --> 00:00:27,010
obviously highly subjective right like

00:00:23,920 --> 00:00:30,039
these are my natural naturally my own

00:00:27,010 --> 00:00:31,570
opinions about what we should choose but

00:00:30,039 --> 00:00:34,510
it's the talk that I wish I would have

00:00:31,570 --> 00:00:36,190
heard three four years ago I first

00:00:34,510 --> 00:00:39,580
started building out JavaScript

00:00:36,190 --> 00:00:41,860
libraries because libraries have vastly

00:00:39,580 --> 00:00:44,769
different concerns than apps that we

00:00:41,860 --> 00:00:46,449
build for users so these are the

00:00:44,769 --> 00:00:48,909
learnings that I've kind of picked up

00:00:46,449 --> 00:00:52,680
over time building tooling type things

00:00:48,909 --> 00:00:54,909
both an open source on the job as

00:00:52,680 --> 00:00:56,830
watching other people and seeing what

00:00:54,909 --> 00:00:57,580
they did in order to build their

00:00:56,830 --> 00:00:59,799
libraries

00:00:57,580 --> 00:01:01,870
so I've already tweeted up link to the

00:00:59,799 --> 00:01:04,120
slides if you want to follow along I'm

00:01:01,870 --> 00:01:05,770
going to have tons of resources and

00:01:04,120 --> 00:01:07,720
links to other things that I can't deep

00:01:05,770 --> 00:01:11,170
dive into so if you go to my Twitter

00:01:07,720 --> 00:01:14,260
been MVP you should already see a tweet

00:01:11,170 --> 00:01:17,350
there so whenever we're talking about

00:01:14,260 --> 00:01:20,440
non end user features like building up

00:01:17,350 --> 00:01:22,960
tooling we need to ask ourselves like

00:01:20,440 --> 00:01:24,850
what's the benefit of all this like do

00:01:22,960 --> 00:01:27,430
these decisions that we're going to do

00:01:24,850 --> 00:01:30,820
they really really matter because if

00:01:27,430 --> 00:01:32,680
it's not a feature for the end user then

00:01:30,820 --> 00:01:35,080
it needs to be a feature for the

00:01:32,680 --> 00:01:37,990
developer so that they can then give

00:01:35,080 --> 00:01:40,240
value to the end user otherwise we find

00:01:37,990 --> 00:01:42,610
ourselves bike shedding and arguing over

00:01:40,240 --> 00:01:44,770
things that really don't matter so this

00:01:42,610 --> 00:01:48,790
article by Kent C Dodds that basically

00:01:44,770 --> 00:01:51,670
says exactly that it says basically we

00:01:48,790 --> 00:01:54,510
need to measure our success how well we

00:01:51,670 --> 00:01:57,340
can deliver what the end user wants

00:01:54,510 --> 00:02:00,600
therefore our choice of tooling should

00:01:57,340 --> 00:02:07,090
be based upon that goal and nothing else

00:02:00,600 --> 00:02:10,479
so then as a result our kind of focused

00:02:07,090 --> 00:02:13,629
on the user mentality it still applies

00:02:10,479 --> 00:02:15,849
for the tooling of libraries except that

00:02:13,629 --> 00:02:18,040
the user in this case or other

00:02:15,849 --> 00:02:20,409
developers those developers that are

00:02:18,040 --> 00:02:23,489
going to build things use our library

00:02:20,409 --> 00:02:25,420
and their apps for other users so

00:02:23,489 --> 00:02:27,130
instead about

00:02:25,420 --> 00:02:29,500
think about how we should write the code

00:02:27,130 --> 00:02:31,989
in this talk Malta already talked

00:02:29,500 --> 00:02:33,730
already covered some of that stuff we're

00:02:31,989 --> 00:02:36,640
going to focus on everything else that's

00:02:33,730 --> 00:02:41,020
related to the library and to the repo

00:02:36,640 --> 00:02:45,780
so everything that enables developers to

00:02:41,020 --> 00:02:48,430
build user experiences using our library

00:02:45,780 --> 00:02:50,230
but first can I get everyone to stand up

00:02:48,430 --> 00:02:52,030
real quick I'm gonna get everyone to

00:02:50,230 --> 00:02:56,050
stand up I know we're about to have

00:02:52,030 --> 00:02:58,450
lunch and such so what I like to do and

00:02:56,050 --> 00:03:00,970
the beginning of my talks is to have

00:02:58,450 --> 00:03:03,549
everybody do 10 squats together just

00:03:00,970 --> 00:03:04,959
like this okay so it's just something to

00:03:03,549 --> 00:03:06,430
have fun you know if you don't want to

00:03:04,959 --> 00:03:08,350
you could totally sit down and not do it

00:03:06,430 --> 00:03:09,850
you could just move your arms or

00:03:08,350 --> 00:03:12,819
whatever but something to get the blood

00:03:09,850 --> 00:03:14,860
flowing right before we have lunch so we

00:03:12,819 --> 00:03:18,489
can you know have more space to have

00:03:14,860 --> 00:03:20,769
lunch so let's do the Tin Tin squats

00:03:18,489 --> 00:03:23,590
together we'll start with zero okay

00:03:20,769 --> 00:03:26,280
because it's JavaScript right and we'll

00:03:23,590 --> 00:03:32,410
count out together here we go ready zero

00:03:26,280 --> 00:03:36,720
yeah that's weird one two three nice

00:03:32,410 --> 00:03:43,989
nice four I think we're halfway yep five

00:03:36,720 --> 00:03:46,030
six almost there seven yes eight nine oh

00:03:43,989 --> 00:03:47,950
yeah that's it okay all right

00:03:46,030 --> 00:03:53,109
obviously everyone have a seat nicely

00:03:47,950 --> 00:03:55,209
done nicely done okay so just to

00:03:53,109 --> 00:03:57,670
formally introduce myself my name is

00:03:55,209 --> 00:04:01,720
Benna leg to do I'm a Christian a

00:03:57,670 --> 00:04:03,489
husband and a father this is my family

00:04:01,720 --> 00:04:05,350
right here it's my wife Rashida

00:04:03,489 --> 00:04:07,959
we've been married nine years we'll be

00:04:05,350 --> 00:04:11,410
10 years in September our oldest

00:04:07,959 --> 00:04:14,590
daughter Simone she will be six next

00:04:11,410 --> 00:04:17,739
month our middle daughter Avery next to

00:04:14,590 --> 00:04:20,229
me she is three and a half and then our

00:04:17,739 --> 00:04:23,139
youngest son Asher who's looking very

00:04:20,229 --> 00:04:26,139
confused in this picture he turned one

00:04:23,139 --> 00:04:29,080
last year so we live in the San

00:04:26,139 --> 00:04:31,660
Francisco Bay Area in a small town

00:04:29,080 --> 00:04:33,160
called Pittsburgh not to be confused

00:04:31,660 --> 00:04:37,210
with Pittsburgh Pennsylvania

00:04:33,160 --> 00:04:39,189
but it's Pittsburgh California and I'm

00:04:37,210 --> 00:04:42,909
also a Google developer expert

00:04:39,189 --> 00:04:45,199
Microsoft MVP both in web technologies

00:04:42,909 --> 00:04:48,080
so as you might have guessed for my

00:04:45,199 --> 00:04:50,930
t-shirt I work at stitch fix I'm a

00:04:48,080 --> 00:04:52,129
principal front-end engineer there for

00:04:50,930 --> 00:04:54,650
those of you who haven't heard of stitch

00:04:52,129 --> 00:04:58,009
fix it's an online personal styling

00:04:54,650 --> 00:05:01,310
service so basically take the bird out

00:04:58,009 --> 00:05:03,259
of shopping so that you can get quality

00:05:01,310 --> 00:05:07,340
clothes for yourselves so we combine

00:05:03,259 --> 00:05:10,029
technology data science with actual real

00:05:07,340 --> 00:05:13,699
human stylists in order to bring you

00:05:10,029 --> 00:05:15,110
awesome clothes oh I want to mention

00:05:13,699 --> 00:05:17,539
that we're three right

00:05:15,110 --> 00:05:20,139
our headquarters is in San Francisco but

00:05:17,539 --> 00:05:22,360
we have a huge remote culture so we have

00:05:20,139 --> 00:05:25,729
engineers throughout the whole country

00:05:22,360 --> 00:05:31,370
in fact to my colleagues James and

00:05:25,729 --> 00:05:32,870
Nathan are Nolan are here here at the

00:05:31,370 --> 00:05:34,789
conference they're actually way in the

00:05:32,870 --> 00:05:37,520
back there so it's my first time getting

00:05:34,789 --> 00:05:40,120
to see them in person except not on blue

00:05:37,520 --> 00:05:43,909
jeans so that will be super fun

00:05:40,120 --> 00:05:46,669
so anyway enough about me let's talk

00:05:43,909 --> 00:05:50,210
about building this perfect javascript

00:05:46,669 --> 00:05:52,039
library right so the the info applies

00:05:50,210 --> 00:05:55,879
whether you're creating an open-source

00:05:52,039 --> 00:05:58,789
library or even an internal library

00:05:55,879 --> 00:06:01,430
within your your company so remember

00:05:58,789 --> 00:06:04,839
we're shifting our focus to what the

00:06:01,430 --> 00:06:07,099
users our developers need not what we

00:06:04,839 --> 00:06:10,550
particularly care about okay

00:06:07,099 --> 00:06:12,500
so let's jump right in the first thing

00:06:10,550 --> 00:06:16,039
that I suggest that we need is we need

00:06:12,500 --> 00:06:17,599
helpful Docs bucks that explain how to

00:06:16,039 --> 00:06:21,349
install the library

00:06:17,599 --> 00:06:23,120
examples of use the library and and then

00:06:21,349 --> 00:06:27,199
once you finally figure out how the

00:06:23,120 --> 00:06:30,259
library works a full API spec so the

00:06:27,199 --> 00:06:33,979
question for us then is what makes it

00:06:30,259 --> 00:06:35,810
possible to have helpful ducks well my

00:06:33,979 --> 00:06:39,919
suggestion is that we write the docs

00:06:35,810 --> 00:06:42,860
before the implementation why because

00:06:39,919 --> 00:06:45,710
writing good Docs is actually really

00:06:42,860 --> 00:06:48,969
hard so writing the docs beforehand

00:06:45,710 --> 00:06:51,889
makes it a little bit easier I suggest

00:06:48,969 --> 00:06:52,490
because one we're more likely to have

00:06:51,889 --> 00:06:55,610
cohesive

00:06:52,490 --> 00:06:57,590
DOX if we write it all up front the

00:06:55,610 --> 00:07:00,229
formatting of the docs the inclusion of

00:06:57,590 --> 00:07:03,349
examples if they'll all be consistent to

00:07:00,229 --> 00:07:08,030
all be the same and then secondly when

00:07:03,349 --> 00:07:09,830
we write the docs when we know ahead of

00:07:08,030 --> 00:07:12,740
time we know about how the library works

00:07:09,830 --> 00:07:14,720
the least right so we're able to have

00:07:12,740 --> 00:07:16,849
empathy for newcomers which was also

00:07:14,720 --> 00:07:17,630
what malted mentioned in this talk as

00:07:16,849 --> 00:07:20,599
well

00:07:17,630 --> 00:07:22,789
and then lastly number three we can get

00:07:20,599 --> 00:07:25,159
feedback from theirs before we do the

00:07:22,789 --> 00:07:27,139
implementation and we'll be able to just

00:07:25,159 --> 00:07:29,509
give them the docs in the format that

00:07:27,139 --> 00:07:31,580
anybody using the library would read

00:07:29,509 --> 00:07:34,819
them so that they'll be able to really

00:07:31,580 --> 00:07:36,110
understand how how things work and it's

00:07:34,819 --> 00:07:40,009
much better than trying to give them

00:07:36,110 --> 00:07:41,389
give them an implementation spec so then

00:07:40,009 --> 00:07:44,060
the question is like what kind of Docs

00:07:41,389 --> 00:07:46,190
should you write I want you to keep in

00:07:44,060 --> 00:07:48,740
mind that they're at least four types of

00:07:46,190 --> 00:07:53,479
Docs there are tutorials there how to

00:07:48,740 --> 00:07:55,150
guys explanations and references so if

00:07:53,479 --> 00:07:58,099
I'm using lodash as an example

00:07:55,150 --> 00:08:02,090
references would be the traditional API

00:07:58,099 --> 00:08:05,599
Docs for lo - how two guys would be

00:08:02,090 --> 00:08:10,090
example showing common use cases for lo

00:08:05,599 --> 00:08:13,509
- functions like pick for instance

00:08:10,090 --> 00:08:17,419
explanations on the other hand our blogs

00:08:13,509 --> 00:08:21,759
videos talks at conferences to explain

00:08:17,419 --> 00:08:24,430
maybe why using lodash chain is poor

00:08:21,759 --> 00:08:28,759
performing there so they're really

00:08:24,430 --> 00:08:30,800
opinionated in their topic and it's

00:08:28,759 --> 00:08:35,300
stuff that you wouldn't necessarily put

00:08:30,800 --> 00:08:38,510
in API Docs and then tutorials would be

00:08:35,300 --> 00:08:42,770
low - workshops that we'd find on

00:08:38,510 --> 00:08:46,640
egghead or front-end masters online to

00:08:42,770 --> 00:08:49,730
help guide the user step-by-step so for

00:08:46,640 --> 00:08:52,940
your perfect library you should at least

00:08:49,730 --> 00:08:57,709
have references and how-to guides so the

00:08:52,940 --> 00:08:59,720
API Docs and the examples so in summary

00:08:57,709 --> 00:09:03,589
for the docs my suggestion for your

00:08:59,720 --> 00:09:06,410
repose read me md file is to have things

00:09:03,589 --> 00:09:09,790
in this order write badges description

00:09:06,410 --> 00:09:12,829
installation quick guide then the API

00:09:09,790 --> 00:09:15,290
technical details contributing and

00:09:12,829 --> 00:09:17,480
license and I want to call out that the

00:09:15,290 --> 00:09:20,149
technical details should be at the

00:09:17,480 --> 00:09:22,009
bottom right usually the library gets

00:09:20,149 --> 00:09:24,290
created because they want to solve some

00:09:22,009 --> 00:09:26,480
kind of technical problem make something

00:09:24,290 --> 00:09:28,759
faster or make something better so it

00:09:26,480 --> 00:09:31,009
gets put at the top of the readme and

00:09:28,759 --> 00:09:33,110
it's like paragraphs and paragraphs and

00:09:31,009 --> 00:09:34,399
nobody wants to read that stuff only you

00:09:33,110 --> 00:09:37,069
care about that stuff

00:09:34,399 --> 00:09:41,000
so put that at the bottom and you know

00:09:37,069 --> 00:09:43,790
show me how to install your library ok

00:09:41,000 --> 00:09:47,000
so then with helpful Doc's I'm now able

00:09:43,790 --> 00:09:49,040
to use your library write and develop

00:09:47,000 --> 00:09:52,939
but then the next thing that I would

00:09:49,040 --> 00:09:54,920
need is I would need typescript types so

00:09:52,939 --> 00:09:58,069
for those who don't know typescript is a

00:09:54,920 --> 00:10:01,279
type superset of JavaScript that

00:09:58,069 --> 00:10:03,829
compiles down to plain JavaScript though

00:10:01,279 --> 00:10:05,959
this suggestion may be a little bit

00:10:03,829 --> 00:10:07,779
controversial right it's certainly my

00:10:05,959 --> 00:10:10,189
own bias because I love using typescript

00:10:07,779 --> 00:10:11,089
but the numbers from the state of

00:10:10,189 --> 00:10:14,360
JavaScript

00:10:11,089 --> 00:10:18,380
Servais kind of backed me up typescript

00:10:14,360 --> 00:10:20,529
has become super duper popular in 2018 I

00:10:18,380 --> 00:10:24,290
consider it the year that everyone

00:10:20,529 --> 00:10:26,839
discovered typescript right so only a

00:10:24,290 --> 00:10:28,880
third of people in 2017 were using

00:10:26,839 --> 00:10:33,259
typescript then the number jumped to

00:10:28,880 --> 00:10:35,750
almost half in 2018 and then last year

00:10:33,259 --> 00:10:38,029
it was nearly 60% of people using

00:10:35,750 --> 00:10:40,759
typescript and when you add in all

00:10:38,029 --> 00:10:44,389
people who want to learn how to use

00:10:40,759 --> 00:10:47,240
typescript the number jumps to 80% so

00:10:44,389 --> 00:10:50,600
that means 8 out of every 10 developers

00:10:47,240 --> 00:10:52,639
will need typescript definitions from

00:10:50,600 --> 00:10:56,959
your library in order to develop in

00:10:52,639 --> 00:10:59,809
typescript so then the question is what

00:10:56,959 --> 00:11:02,949
makes it possible to make typescript

00:10:59,809 --> 00:11:06,949
definitions available to the developers

00:11:02,949 --> 00:11:11,470
well one option is you could build your

00:11:06,949 --> 00:11:14,089
app build your library rather in

00:11:11,470 --> 00:11:16,220
JavaScript regular JavaScript and then

00:11:14,089 --> 00:11:19,309
add typescript definitions too

00:11:16,220 --> 00:11:20,270
definitely typed it's this repo of high

00:11:19,309 --> 00:11:22,930
quality

00:11:20,270 --> 00:11:26,390
typescript definitions so they're like

00:11:22,930 --> 00:11:29,120
7,000 typescript definite in that repo

00:11:26,390 --> 00:11:30,680
react is in their lo dashes in their

00:11:29,120 --> 00:11:31,970
various different libraries that are

00:11:30,680 --> 00:11:33,890
written that are not written in

00:11:31,970 --> 00:11:34,640
typescript but have typescript types

00:11:33,890 --> 00:11:37,430
available

00:11:34,640 --> 00:11:39,260
the only drawback or one of the

00:11:37,430 --> 00:11:41,300
drawbacks with this really is that you

00:11:39,260 --> 00:11:43,310
have to know typescript really well in

00:11:41,300 --> 00:11:46,460
order to create typescript definitions

00:11:43,310 --> 00:11:48,790
so my suggestion is you just might as

00:11:46,460 --> 00:11:51,130
well write it in typescript right

00:11:48,790 --> 00:11:54,800
there's definitely a learning curve with

00:11:51,130 --> 00:11:57,980
using typescript no doubt but in the

00:11:54,800 --> 00:11:59,930
interest of serving your users the other

00:11:57,980 --> 00:12:02,810
developers who want to use your library

00:11:59,930 --> 00:12:06,230
writing in typescript is the best way to

00:12:02,810 --> 00:12:07,940
provide type definition files because

00:12:06,230 --> 00:12:09,950
they're going to get auto-generated and

00:12:07,940 --> 00:12:12,320
I'll talk a little bit later about about

00:12:09,950 --> 00:12:16,490
how that happens it's also really

00:12:12,320 --> 00:12:20,150
difficult to write types for untyped

00:12:16,490 --> 00:12:22,670
code because when we have untyped code

00:12:20,150 --> 00:12:25,040
we're able to make some shortcuts and

00:12:22,670 --> 00:12:26,330
assumptions about how things work but

00:12:25,040 --> 00:12:28,940
those things aren't allowed and

00:12:26,330 --> 00:12:34,030
typescript because we have to be type

00:12:28,940 --> 00:12:38,300
safe so typescript also in addition

00:12:34,030 --> 00:12:40,310
gives us modern JavaScript so all of the

00:12:38,300 --> 00:12:43,190
nice features that are coming out and

00:12:40,310 --> 00:12:46,580
new versions of Okuma script those are

00:12:43,190 --> 00:12:48,620
also available in typescript so it not

00:12:46,580 --> 00:12:51,230
only a win because we give type

00:12:48,620 --> 00:12:54,500
definitions to our users but we also get

00:12:51,230 --> 00:12:58,700
to develop with matcha it's kind of

00:12:54,500 --> 00:13:01,630
everybody's winning in that sense all

00:12:58,700 --> 00:13:05,750
right so now let's get a little bit

00:13:01,630 --> 00:13:07,610
tactical here so now I know how to use

00:13:05,750 --> 00:13:10,970
your Lib because you gave me helpful

00:13:07,610 --> 00:13:12,500
docs I you provided typescript

00:13:10,970 --> 00:13:16,220
definitions because you wrote in

00:13:12,500 --> 00:13:18,200
typescript so now I'm good I can just

00:13:16,220 --> 00:13:22,750
build my app and continue to use your

00:13:18,200 --> 00:13:25,570
awesome library but while developing

00:13:22,750 --> 00:13:30,050
there's nothing more frustrating than

00:13:25,570 --> 00:13:31,940
running into a library bug right and in

00:13:30,050 --> 00:13:33,590
the beginning you know we're trusting we

00:13:31,940 --> 00:13:36,200
assume the libraries

00:13:33,590 --> 00:13:38,270
perfect so the problem is with us so

00:13:36,200 --> 00:13:39,830
we're spending hours and hours wondering

00:13:38,270 --> 00:13:42,890
why you know I'm giving all this

00:13:39,830 --> 00:13:44,630
information are providing the parameters

00:13:42,890 --> 00:13:46,160
that the library says and those helpful

00:13:44,630 --> 00:13:47,630
Docs and I'm not getting the help the

00:13:46,160 --> 00:13:49,550
answer that I was supposed to like

00:13:47,630 --> 00:13:52,640
what's going on

00:13:49,550 --> 00:13:55,970
so we really want our library to be

00:13:52,640 --> 00:13:57,920
perfect like bug free we need to do our

00:13:55,970 --> 00:14:00,380
absolute best to make sure that there

00:13:57,920 --> 00:14:01,880
are no bugs so then the question of

00:14:00,380 --> 00:14:05,720
course is like what do we have to do in

00:14:01,880 --> 00:14:09,110
order to make our library as bug free as

00:14:05,720 --> 00:14:11,990
possible well it starts with the

00:14:09,110 --> 00:14:15,740
three-headed monster of unit test

00:14:11,990 --> 00:14:19,190
testing with coverage from jest linting

00:14:15,740 --> 00:14:22,340
from es lint and then type checking from

00:14:19,190 --> 00:14:25,010
typescript so I want to call out the

00:14:22,340 --> 00:14:26,510
type checking because not only is

00:14:25,010 --> 00:14:29,360
developing an typescript

00:14:26,510 --> 00:14:31,430
like good for providing type definitions

00:14:29,360 --> 00:14:33,290
like we talked about it's also good

00:14:31,430 --> 00:14:35,030
because it helps ru it's also good for

00:14:33,290 --> 00:14:37,760
our users because it helps to prevent

00:14:35,030 --> 00:14:39,770
bugs so those like edge cases where

00:14:37,760 --> 00:14:42,260
something was undefined when you didn't

00:14:39,770 --> 00:14:44,120
expect it to be undefined or you were

00:14:42,260 --> 00:14:46,340
factor a function but forget to change

00:14:44,120 --> 00:14:48,140
one of the places where you called it

00:14:46,340 --> 00:14:51,380
like typescript will catch all of those

00:14:48,140 --> 00:14:54,890
different things and with Visual Studio

00:14:51,380 --> 00:14:57,560
code you can get type checking happening

00:14:54,890 --> 00:14:59,390
as you're coding so you're like fixing

00:14:57,560 --> 00:15:04,100
problems or catching problems as you're

00:14:59,390 --> 00:15:06,490
coding but I'm guessing most of you knew

00:15:04,100 --> 00:15:06,490
that already

00:15:06,830 --> 00:15:11,810
what I'm more interested in is taking it

00:15:09,020 --> 00:15:14,180
to a kind of a next level so typically

00:15:11,810 --> 00:15:16,640
you would run linting and type checking

00:15:14,180 --> 00:15:19,580
and unit testing with three separate

00:15:16,640 --> 00:15:22,430
commands like I mentioned but with a

00:15:19,580 --> 00:15:25,760
feature ingest called Jeff's projects

00:15:22,430 --> 00:15:28,190
you can run them all through just so

00:15:25,760 --> 00:15:31,760
gest has been a refactored maybe a year

00:15:28,190 --> 00:15:36,230
ago into a platform so in the beginning

00:15:31,760 --> 00:15:39,080
you have what I call the file collector

00:15:36,230 --> 00:15:41,860
and that determines like what files

00:15:39,080 --> 00:15:45,710
should be run in order to be tested and

00:15:41,860 --> 00:15:47,180
then at the end part have what I call

00:15:45,710 --> 00:15:49,940
the error reporter that

00:15:47,180 --> 00:15:52,850
shows what errors happened and what

00:15:49,940 --> 00:15:55,700
passed and all those things and then in

00:15:52,850 --> 00:15:58,910
the middle there's the runner which is

00:15:55,700 --> 00:16:01,040
the actual thing we're running so

00:15:58,910 --> 00:16:03,800
typically that's just been a unit test

00:16:01,040 --> 00:16:05,450
runner in the middle but now you can

00:16:03,800 --> 00:16:08,690
have different plugins to run other

00:16:05,450 --> 00:16:11,270
things so you can have an es Lindt

00:16:08,690 --> 00:16:14,260
runner or you can have a TS c a

00:16:11,270 --> 00:16:17,210
typescript compiler runner in the middle

00:16:14,260 --> 00:16:20,900
so what now when you use that set of

00:16:17,210 --> 00:16:23,120
thing now you can have es Lindt run in

00:16:20,900 --> 00:16:26,690
watch mode which is not possible with

00:16:23,120 --> 00:16:29,810
the es let command-line because just

00:16:26,690 --> 00:16:32,540
runs in in wash watch mode you can also

00:16:29,810 --> 00:16:35,450
run all of the things in parallel as

00:16:32,540 --> 00:16:37,790
well because that's how just runs and

00:16:35,450 --> 00:16:40,760
then you get a consistent error

00:16:37,790 --> 00:16:44,870
reporting at the end about which things

00:16:40,760 --> 00:16:47,330
failed so simply you call just drop your

00:16:44,870 --> 00:16:49,820
test script in your npm script and

00:16:47,330 --> 00:16:52,190
you're off to the races and everything

00:16:49,820 --> 00:16:55,190
will be tested there and then you can

00:16:52,190 --> 00:16:57,110
take that test script and you can run it

00:16:55,190 --> 00:16:59,870
in your CI or your continuous

00:16:57,110 --> 00:17:02,330
integration environment so there are

00:16:59,870 --> 00:17:05,480
many CI services out there like Travis

00:17:02,330 --> 00:17:07,670
or circle CI but lately I have been

00:17:05,480 --> 00:17:10,130
using github actions and github

00:17:07,670 --> 00:17:12,950
workflows and and really really loving

00:17:10,130 --> 00:17:14,990
it because I can just use git up

00:17:12,950 --> 00:17:17,750
github actions and not have to sign up

00:17:14,990 --> 00:17:20,300
for a different service and connect it

00:17:17,750 --> 00:17:22,700
to my repo so here's an example of a

00:17:20,300 --> 00:17:27,020
github workflow that runs the tests on

00:17:22,700 --> 00:17:29,390
no 10 on no 12 and 13 so whenever I'm

00:17:27,020 --> 00:17:32,330
running my tests part of it is I run it

00:17:29,390 --> 00:17:34,160
on all the LTS versions so that'll be

00:17:32,330 --> 00:17:36,740
ten and twelve the even numbers because

00:17:34,160 --> 00:17:39,200
eight just got dropped and then I run it

00:17:36,740 --> 00:17:41,510
on the latest odd to see if there are

00:17:39,200 --> 00:17:43,490
any new things backwards-compatible

00:17:41,510 --> 00:17:44,690
changes that I got it kind of catch as

00:17:43,490 --> 00:17:47,120
quickly as possible

00:17:44,690 --> 00:17:49,490
so it's important to run on multiple

00:17:47,120 --> 00:17:50,720
versions of node for your library

00:17:49,490 --> 00:17:54,440
because you don't know which versions

00:17:50,720 --> 00:17:56,180
your developers are going to use so I

00:17:54,440 --> 00:17:57,770
really want to spend more time unpacking

00:17:56,180 --> 00:17:59,000
some of those things that I talked about

00:17:57,770 --> 00:18:01,640
but I don't

00:17:59,000 --> 00:18:03,530
time to go into those details so here

00:18:01,640 --> 00:18:08,780
are a bunch of links to resources that

00:18:03,530 --> 00:18:12,409
kind of go more into those all right so

00:18:08,780 --> 00:18:16,070
we've discussed helpful Docs we talked

00:18:12,409 --> 00:18:18,919
about typescript types and then how our

00:18:16,070 --> 00:18:22,100
library could be bug free let's bring it

00:18:18,919 --> 00:18:26,179
home with the last one so no matter how

00:18:22,100 --> 00:18:29,390
hard you test and test and test there

00:18:26,179 --> 00:18:31,250
are inevitably be bugs you know we're

00:18:29,390 --> 00:18:34,250
still gonna be bugs no matter how well

00:18:31,250 --> 00:18:35,570
we write our code so or even if you

00:18:34,250 --> 00:18:37,640
write perfect code they're still gonna

00:18:35,570 --> 00:18:39,049
be a feature request from someone that's

00:18:37,640 --> 00:18:42,950
a really good idea that you want to

00:18:39,049 --> 00:18:45,320
implement so you want to be able changes

00:18:42,950 --> 00:18:48,230
out to your users out to those

00:18:45,320 --> 00:18:50,960
developers as quickly as possible so

00:18:48,230 --> 00:18:56,120
from their initial request to when it's

00:18:50,960 --> 00:18:58,549
published on the registry we want to

00:18:56,120 --> 00:19:00,500
make that as quick as possible so the

00:18:58,549 --> 00:19:03,580
question for us is like what makes those

00:19:00,500 --> 00:19:06,110
changes get there as quickly as possible

00:19:03,580 --> 00:19:09,020
the first it starts with the issue

00:19:06,110 --> 00:19:11,150
itself okay whether it's a bug or a

00:19:09,020 --> 00:19:13,700
feature request we want is money as much

00:19:11,150 --> 00:19:15,919
in detail as possible so with github

00:19:13,700 --> 00:19:18,679
issue templates you can guide the

00:19:15,919 --> 00:19:21,110
developer into a flow based upon their

00:19:18,679 --> 00:19:23,419
need so whether it's a bug report or a

00:19:21,110 --> 00:19:26,390
feature request and then with each of

00:19:23,419 --> 00:19:28,190
those templates you can have labels tied

00:19:26,390 --> 00:19:30,200
to them so things are automatically

00:19:28,190 --> 00:19:32,500
categorized for you when you're

00:19:30,200 --> 00:19:35,510
filtering through different problems and

00:19:32,500 --> 00:19:38,360
one thing I do want to call out is

00:19:35,510 --> 00:19:42,919
specifically for bugs you can suggest

00:19:38,360 --> 00:19:46,159
that the developers and run the end info

00:19:42,919 --> 00:19:48,669
package and include its results and it

00:19:46,159 --> 00:19:51,080
provides all this information about

00:19:48,669 --> 00:19:53,870
their environment so whether they're

00:19:51,080 --> 00:19:55,820
Windows or Mac or you know what versions

00:19:53,870 --> 00:19:57,140
of node and yarn and NPM they have

00:19:55,820 --> 00:19:59,210
installed and there's plenty of other

00:19:57,140 --> 00:20:01,970
things in the CLI that you can configure

00:19:59,210 --> 00:20:04,880
so you can go to their helpful Docs and

00:20:01,970 --> 00:20:07,250
find out more about it but it kind of

00:20:04,880 --> 00:20:12,440
just answers a lot of the questions from

00:20:07,250 --> 00:20:14,480
the start ok so there are various

00:20:12,440 --> 00:20:15,890
communication files to streamline the

00:20:14,480 --> 00:20:18,020
process thank you very much

00:20:15,890 --> 00:20:21,200
so I want to call out the prettier

00:20:18,020 --> 00:20:22,820
config file especially if you're not

00:20:21,200 --> 00:20:24,680
familiar with prettier it provides

00:20:22,820 --> 00:20:28,070
consistent formatting to all of your

00:20:24,680 --> 00:20:31,190
files JavaScript CSS like markdown files

00:20:28,070 --> 00:20:35,690
everything so now there's no time wasted

00:20:31,190 --> 00:20:37,580
arguing over the format of your code but

00:20:35,690 --> 00:20:38,840
it also makes development super fast

00:20:37,580 --> 00:20:41,480
because you no longer have to think

00:20:38,840 --> 00:20:42,890
about formatting your code just if you

00:20:41,480 --> 00:20:46,690
have an editor that automatically

00:20:42,890 --> 00:20:48,950
formats unsaved or on paste or whenever

00:20:46,690 --> 00:20:51,050
your code gets formatted so you don't

00:20:48,950 --> 00:20:53,810
have to spend time you know adding a new

00:20:51,050 --> 00:20:55,400
line and then tabbing in three times and

00:20:53,810 --> 00:20:59,540
moving the curly brace like it'll do all

00:20:55,400 --> 00:21:01,010
that stuff for you in fact if you're

00:20:59,540 --> 00:21:02,900
starting out with the library there are

00:21:01,010 --> 00:21:04,760
a couple of scripts that you can run as

00:21:02,900 --> 00:21:07,670
a way to just kind of bootstrap your

00:21:04,760 --> 00:21:09,980
library so you can run the license

00:21:07,670 --> 00:21:11,660
package to give you whatever license you

00:21:09,980 --> 00:21:14,660
want and that becomes your license that

00:21:11,660 --> 00:21:16,730
MD you can run the git ignore package

00:21:14,660 --> 00:21:18,860
and I'll give you a good ignore based

00:21:16,730 --> 00:21:21,770
upon your environment most likely node

00:21:18,860 --> 00:21:25,100
you can generate a code of conduct with

00:21:21,770 --> 00:21:27,440
the cough gin or Cove gin package then

00:21:25,100 --> 00:21:31,430
you run goodd in it you run NPM in it

00:21:27,440 --> 00:21:33,140
and you're off to the races there so

00:21:31,430 --> 00:21:37,730
then after the code is written the PR

00:21:33,140 --> 00:21:39,740
passes it gets merged into master or

00:21:37,730 --> 00:21:42,110
whatever your release branch is we need

00:21:39,740 --> 00:21:45,140
to get that code out to the registry as

00:21:42,110 --> 00:21:47,240
soon as possible so the first step is

00:21:45,140 --> 00:21:51,350
ensuring that we're generating the

00:21:47,240 --> 00:21:53,270
actual target formats module formats so

00:21:51,350 --> 00:21:56,990
that they can be consumed by the

00:21:53,270 --> 00:21:59,390
developers app so these days for modern

00:21:56,990 --> 00:22:03,380
j/s I suggest two formats

00:21:59,390 --> 00:22:05,950
that's Atma script module format or ESM

00:22:03,380 --> 00:22:09,890
mainly for tree shaking and then

00:22:05,950 --> 00:22:13,630
commonjs or CJ s which is for a lot of

00:22:09,890 --> 00:22:16,790
the standard node of applications so

00:22:13,630 --> 00:22:20,180
first you have the main field that's for

00:22:16,790 --> 00:22:23,940
your CJ s endpoint then you want to have

00:22:20,180 --> 00:22:26,170
the module and J s next

00:22:23,940 --> 00:22:28,900
properties that's the entry point for

00:22:26,170 --> 00:22:31,300
ESM and then there's also the side

00:22:28,900 --> 00:22:33,790
effects property that webpack uses for

00:22:31,300 --> 00:22:36,700
Atma script modules as well I have a

00:22:33,790 --> 00:22:40,350
link a resource that explains the neset

00:22:36,700 --> 00:22:43,360
then necessary the need for that then

00:22:40,350 --> 00:22:45,640
you have the type field that points to

00:22:43,360 --> 00:22:48,520
your type script definitions there that

00:22:45,640 --> 00:22:51,610
we talked about in part two you have the

00:22:48,520 --> 00:22:55,510
files field that points to where the

00:22:51,610 --> 00:22:58,600
built files are located and we use that

00:22:55,510 --> 00:23:00,520
instead of using NPM ignore which is

00:22:58,600 --> 00:23:03,300
what's traditionally used and I have an

00:23:00,520 --> 00:23:08,650
article that explains why that is and

00:23:03,300 --> 00:23:11,800
then now we use babel to transpile our

00:23:08,650 --> 00:23:15,340
typescript into vanilla Jas so both the

00:23:11,800 --> 00:23:17,760
ESM and the CJ s targets you just use a

00:23:15,340 --> 00:23:22,179
typescript plug-in in order to do it and

00:23:17,760 --> 00:23:24,100
then we use TSC TSC the typescript

00:23:22,179 --> 00:23:27,190
compiler to build the typescript

00:23:24,100 --> 00:23:31,150
definitions and lastly wrap it all up

00:23:27,190 --> 00:23:34,420
into a nice build script that can be run

00:23:31,150 --> 00:23:37,090
to run all of those together and then

00:23:34,420 --> 00:23:40,900
with that build script in place we can

00:23:37,090 --> 00:23:45,309
achieve continuous delivery or the CD

00:23:40,900 --> 00:23:47,740
side of CIN CD so first we run the build

00:23:45,309 --> 00:23:50,230
to generate all those files and then

00:23:47,740 --> 00:23:53,410
secondly we use a package called

00:23:50,230 --> 00:23:56,260
semantic reliefs to actually release to

00:23:53,410 --> 00:23:58,540
the package registry so it's meant to be

00:23:56,260 --> 00:24:00,640
executed in your CI environment after

00:23:58,540 --> 00:24:04,350
every successful build to your release

00:24:00,640 --> 00:24:07,950
branch most likely master so it makes

00:24:04,350 --> 00:24:11,980
releases what they say unromantic and

00:24:07,950 --> 00:24:15,550
unsentimental so the cool thing about

00:24:11,980 --> 00:24:18,850
this is that I can merge a PR for my

00:24:15,550 --> 00:24:22,000
library from my phone and it gets

00:24:18,850 --> 00:24:24,160
automatically released to NPM within

00:24:22,000 --> 00:24:27,550
five minutes like I don't have to be on

00:24:24,160 --> 00:24:29,679
my computer and do a NPM version and

00:24:27,550 --> 00:24:33,580
push something out like it all happens

00:24:29,679 --> 00:24:35,620
inside of CI which is pretty cool and

00:24:33,580 --> 00:24:37,660
then lastly you should probably verify

00:24:35,620 --> 00:24:41,350
that what she released was actually good

00:24:37,660 --> 00:24:43,660
so you can use unpackage or je s deliver

00:24:41,350 --> 00:24:47,560
or even on NPM they have this new

00:24:43,660 --> 00:24:50,650
Explorer tab to browse your package to

00:24:47,560 --> 00:24:52,030
make sure all the files were there so

00:24:50,650 --> 00:24:54,880
here are all the resources that I was

00:24:52,030 --> 00:24:58,480
alluding to as I was going on please get

00:24:54,880 --> 00:25:00,690
the slides and check those out to click

00:24:58,480 --> 00:25:03,790
through ok

00:25:00,690 --> 00:25:07,900
whoo ok that was a lot of stuff right

00:25:03,790 --> 00:25:09,490
and chances are that you probably missed

00:25:07,900 --> 00:25:12,010
something when you're responding to that

00:25:09,490 --> 00:25:14,170
slack message right I know some of you

00:25:12,010 --> 00:25:18,520
are doing it I can see some of you are

00:25:14,170 --> 00:25:20,500
doing it ok but let's quickly recap but

00:25:18,520 --> 00:25:22,750
instead of going it by user need I'm

00:25:20,500 --> 00:25:27,070
gonna group it by what we care about now

00:25:22,750 --> 00:25:30,010
so we can be a little bit selfish now so

00:25:27,070 --> 00:25:33,220
and we'll see that the what makes up a

00:25:30,010 --> 00:25:35,500
perfect library a perfect repo is a mix

00:25:33,220 --> 00:25:39,640
of communication tools as well as

00:25:35,500 --> 00:25:42,070
technical things just like the perfect

00:25:39,640 --> 00:25:45,640
developer is a mix of technical skills

00:25:42,070 --> 00:25:47,860
and communication skills I'm not gonna

00:25:45,640 --> 00:25:50,080
spend time talking about 10x or nothing

00:25:47,860 --> 00:25:52,150
nothing like that ok so here we go this

00:25:50,080 --> 00:25:54,490
is everything on one slide so you have

00:25:52,150 --> 00:25:56,590
your development experience that starts

00:25:54,490 --> 00:25:59,080
with being able to write modern j/s and

00:25:56,590 --> 00:26:01,780
if you're using a nice editor like PS

00:25:59,080 --> 00:26:04,390
code prettier es LAN type chucking

00:26:01,780 --> 00:26:07,510
happens while you develop then we have

00:26:04,390 --> 00:26:10,390
testing and continuous integration I

00:26:07,510 --> 00:26:12,370
suggest using github actions and running

00:26:10,390 --> 00:26:15,370
just as a platform so everything works

00:26:12,370 --> 00:26:19,170
together for building and continuous

00:26:15,370 --> 00:26:23,380
delivery we use babble for transpiling

00:26:19,170 --> 00:26:25,120
typescript for type definitions and then

00:26:23,380 --> 00:26:28,450
a whole bunch of fields in your package

00:26:25,120 --> 00:26:31,210
JSON in order to use semantic release

00:26:28,450 --> 00:26:33,700
and release automatically and then

00:26:31,210 --> 00:26:36,970
lastly there are a bunch of reef repo

00:26:33,700 --> 00:26:39,910
files as I call it that are basically

00:26:36,970 --> 00:26:42,790
all around communication and allowing

00:26:39,910 --> 00:26:49,450
the developers ease and using your

00:26:42,790 --> 00:26:51,549
library so that was all the info that I

00:26:49,450 --> 00:26:52,960
needed like three or four years ago and

00:26:51,549 --> 00:26:54,999
when I was trying to build my first

00:26:52,960 --> 00:26:57,820
library and I was trying to do it the

00:26:54,999 --> 00:26:59,590
correct way from the beginning but to be

00:26:57,820 --> 00:27:03,489
honest I probably would have been too

00:26:59,590 --> 00:27:05,549
overwhelmed at that point like I counted

00:27:03,489 --> 00:27:08,259
in that previous slide like 20 different

00:27:05,549 --> 00:27:11,769
suggestions that I had in order to build

00:27:08,259 --> 00:27:13,570
that perfect repo and at that time even

00:27:11,769 --> 00:27:15,460
though I wanted to do it right I was

00:27:13,570 --> 00:27:17,610
more focused on actually building the

00:27:15,460 --> 00:27:19,509
library itself not all this tooling

00:27:17,610 --> 00:27:21,429
infrastructure because I didn't care

00:27:19,509 --> 00:27:25,059
about it then as much as I care about it

00:27:21,429 --> 00:27:27,009
now and even now like I don't want to go

00:27:25,059 --> 00:27:29,980
through all those 20 things every time

00:27:27,009 --> 00:27:32,859
I'm building a library so I created this

00:27:29,980 --> 00:27:37,600
zero config CLI tool I call it

00:27:32,859 --> 00:27:40,389
Bennett in VP CLI after myself yes and

00:27:37,600 --> 00:27:42,879
it abstract all of that work for all the

00:27:40,389 --> 00:27:45,070
libraries that I'm building so it does

00:27:42,879 --> 00:27:47,830
everything but write the docs and

00:27:45,070 --> 00:27:49,090
obviously the source code should write

00:27:47,830 --> 00:27:53,559
the source code that would be amazing

00:27:49,090 --> 00:27:56,619
but it's not it's not sentient yet okay

00:27:53,559 --> 00:27:59,590
so the CLI does have some options right

00:27:56,619 --> 00:28:02,830
so you could totally use it for your

00:27:59,590 --> 00:28:05,649
library but it's called the bit MVP CLI

00:28:02,830 --> 00:28:08,200
for a reason it's for me and for my

00:28:05,649 --> 00:28:10,119
library so you know I'm not gonna accept

00:28:08,200 --> 00:28:12,129
any issue tickets to make it more

00:28:10,119 --> 00:28:14,289
configurable I'm just telling you right

00:28:12,129 --> 00:28:16,600
now that's not going to happen

00:28:14,289 --> 00:28:18,220
so if it works kind of like a react

00:28:16,600 --> 00:28:20,859
scripts if you ever have used that

00:28:18,220 --> 00:28:24,460
before if with create react app you can

00:28:20,859 --> 00:28:26,470
run NPM been MVP CLI create with the

00:28:24,460 --> 00:28:30,119
name of your library and it will create

00:28:26,470 --> 00:28:33,489
the whole folder all the github

00:28:30,119 --> 00:28:36,249
workflows all the templates package.json

00:28:33,489 --> 00:28:39,759
with all the fields and then it installs

00:28:36,249 --> 00:28:41,529
the package the CLI as a dependency so

00:28:39,759 --> 00:28:44,499
that it could run all of the other

00:28:41,529 --> 00:28:46,389
scripts as well so the test script and

00:28:44,499 --> 00:28:49,389
the build script do basically what I

00:28:46,389 --> 00:28:51,639
talked about before this dart script is

00:28:49,389 --> 00:28:55,419
for development which basically runs

00:28:51,639 --> 00:28:58,239
tests in watch mode so it just checks

00:28:55,419 --> 00:29:00,340
whatever you've done and your get

00:28:58,239 --> 00:29:03,909
changes and it will run the tests based

00:29:00,340 --> 00:29:05,440
upon that changed code but the most

00:29:03,909 --> 00:29:06,850
interesting thing which I really

00:29:05,440 --> 00:29:10,560
really really wish I could spend more

00:29:06,850 --> 00:29:14,710
time on as the integrate command and

00:29:10,560 --> 00:29:16,300
basically what it does is it packages up

00:29:14,710 --> 00:29:18,310
the library in a tarball

00:29:16,300 --> 00:29:20,620
the same tarball that gets pushed up to

00:29:18,310 --> 00:29:23,290
the registry but instead of pushing it

00:29:20,620 --> 00:29:25,870
to the registry and you'll have a

00:29:23,290 --> 00:29:28,360
separate app that it will install your

00:29:25,870 --> 00:29:30,640
library into so you can install

00:29:28,360 --> 00:29:34,510
something from a tar ball from the file

00:29:30,640 --> 00:29:37,120
system and then I run tests and import

00:29:34,510 --> 00:29:39,550
the library as if I was using it like a

00:29:37,120 --> 00:29:42,040
application and I run tests that way to

00:29:39,550 --> 00:29:44,800
make sure that like I exported all the

00:29:42,040 --> 00:29:46,750
methods correctly my dev dependencies

00:29:44,800 --> 00:29:48,430
and dependencies have been set up the

00:29:46,750 --> 00:29:50,650
right way because sometimes I put them

00:29:48,430 --> 00:29:52,780
in the wrong place so to make sure that

00:29:50,650 --> 00:29:55,420
when developers using the library that

00:29:52,780 --> 00:29:56,830
have everything that they need so if

00:29:55,420 --> 00:30:02,430
you're interested in that you can check

00:29:56,830 --> 00:30:06,730
check out the library and lastly the CLI

00:30:02,430 --> 00:30:09,580
uses itself for development and testing

00:30:06,730 --> 00:30:12,850
and building so it's kind of like the

00:30:09,580 --> 00:30:16,840
original perfect library that's enabling

00:30:12,850 --> 00:30:19,930
other perfect libraries to be created so

00:30:16,840 --> 00:30:22,180
one last thing friend of mine Jonathan

00:30:19,930 --> 00:30:24,730
creamer he is really passionate about

00:30:22,180 --> 00:30:26,440
front-end tooling as am I so he's

00:30:24,730 --> 00:30:29,470
wanting to create this community around

00:30:26,440 --> 00:30:32,980
front-end tooling he's coined the term

00:30:29,470 --> 00:30:35,650
div ops instead of DevOps for this type

00:30:32,980 --> 00:30:37,780
of thing so he has a blog about it and

00:30:35,650 --> 00:30:40,950
there's a slack group and there's a

00:30:37,780 --> 00:30:42,670
subreddit that you can join for that

00:30:40,950 --> 00:30:44,050
okay so that's it

00:30:42,670 --> 00:30:46,480
I just flooded you with all this

00:30:44,050 --> 00:30:49,810
information I want to remind you that

00:30:46,480 --> 00:30:51,520
the slides I tweeted out a link to the

00:30:49,810 --> 00:30:53,890
slide so you can totally follow it there

00:30:51,520 --> 00:30:56,410
hopefully there's stuff that you learned

00:30:53,890 --> 00:30:58,660
right there's also likely stuff that I

00:30:56,410 --> 00:31:00,850
forgotten so I welcome your feedback to

00:30:58,660 --> 00:31:03,430
tell me some things that could be added

00:31:00,850 --> 00:31:05,410
to make it even better I want to thank

00:31:03,430 --> 00:31:07,960
the conference the conference organizers

00:31:05,410 --> 00:31:10,780
for inviting me to share my knowledge

00:31:07,960 --> 00:31:13,600
with all of you and I want to thank you

00:31:10,780 --> 00:31:15,820
all too for coming to the talk because

00:31:13,600 --> 00:31:17,950
you know the hallway track is real like

00:31:15,820 --> 00:31:19,240
you could have been there you know you

00:31:17,950 --> 00:31:21,970
could have gone to get ahead

00:31:19,240 --> 00:31:25,390
start on lunch like some people have

00:31:21,970 --> 00:31:28,210
done you can't see them but I totally

00:31:25,390 --> 00:31:28,929
can see them but it's okay I'm not hurt

00:31:28,210 --> 00:31:30,820
at all

00:31:28,929 --> 00:31:32,290
and it's Hawaii right so you could

00:31:30,820 --> 00:31:34,270
totally be anywhere else but here but

00:31:32,290 --> 00:31:36,429
you're still here so I really really

00:31:34,270 --> 00:31:38,320
appreciate it so if you've got any

00:31:36,429 --> 00:31:39,670
questions feel free to find me

00:31:38,320 --> 00:31:41,920
afterwards

00:31:39,670 --> 00:31:45,190
I have swag that I'm givin away like

00:31:41,920 --> 00:31:46,840
this hat so I'll give that out or if

00:31:45,190 --> 00:31:50,140
you're introverted you can ping me on

00:31:46,840 --> 00:31:52,070
Twitter so thank you very much enjoy the

00:31:50,140 --> 00:31:57,700
rest of the conference in Mahalo

00:31:52,070 --> 00:31:57,700

YouTube URL: https://www.youtube.com/watch?v=kQ4r9OATmB0


