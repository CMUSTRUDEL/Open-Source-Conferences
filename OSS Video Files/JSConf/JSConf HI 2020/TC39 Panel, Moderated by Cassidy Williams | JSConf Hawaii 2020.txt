Title: TC39 Panel, Moderated by Cassidy Williams | JSConf Hawaii 2020
Publication date: 2020-03-29
Playlist: JSConf HI 2020
Description: 
	TC39 is the international standards committee in charge of charting the future of JavaScript through the ECMAScript standard. In this panel, members of the committee join Cassidy Williams to answer questions sourced from the JSConf Hawaii audience, including questions about how the committee decides on changes to the language, and how companies, organizations, or individuals can get more involved.

Learn more about TC39: https://github.com/tc39

JSConf Hawaii will return soon
https://www.jsconfhi.com/
Captions: 
	00:00:08,240 --> 00:00:14,650
hi I'm miles borns I work for Google as

00:00:12,049 --> 00:00:14,650
a developer advocate

00:00:15,810 --> 00:00:22,080
c39 for just over three years my name is

00:00:20,040 --> 00:00:24,750
Michael say buff I work at Apple on the

00:00:22,080 --> 00:00:32,189
JavaScript core engine been attending

00:00:24,750 --> 00:00:37,320
tc39 since 2015 my name is Mark Miller I

00:00:32,189 --> 00:00:39,660
started on tc39 in 2007 while I was at

00:00:37,320 --> 00:00:41,190
Google about two years ago I left to

00:00:39,660 --> 00:00:43,020
form a gorrik which is a blockchain

00:00:41,190 --> 00:00:46,980
start-up where we're going to be running

00:00:43,020 --> 00:00:50,000
JavaScript on blockchain and I've been

00:00:46,980 --> 00:00:52,830
doing a lot of work to make the language

00:00:50,000 --> 00:00:56,760
better able to support more disciplined

00:00:52,830 --> 00:00:59,940
and more secure programming I'm Aki

00:00:56,760 --> 00:01:03,270
Braun I work at PayPal I work at

00:00:59,940 --> 00:01:07,710
Braintree at PayPal I've been on the

00:01:03,270 --> 00:01:12,509
committee since 2017 and I have been

00:01:07,710 --> 00:01:15,409
co-chair this will be my second year hi

00:01:12,509 --> 00:01:17,640
I'm Rob Palmer I work for Bloomberg

00:01:15,409 --> 00:01:20,520
where I lead the JavaScript

00:01:17,640 --> 00:01:23,869
infrastructure and tooling team I've

00:01:20,520 --> 00:01:26,429
been on the committee since 2018 and

00:01:23,869 --> 00:01:32,759
just this week I became one of four

00:01:26,429 --> 00:01:38,539
co-chairs like a key here hi my name is

00:01:32,759 --> 00:01:40,649
Shankar I've been on tc39 since 2018 I'm

00:01:38,539 --> 00:01:42,619
I'm work at Google on the

00:01:40,649 --> 00:01:45,740
internationalization engineering team

00:01:42,619 --> 00:01:47,999
and I lead the lead the

00:01:45,740 --> 00:01:53,039
internationalization subcommittee for

00:01:47,999 --> 00:01:55,950
tc39 focusing on making JavaScript's a

00:01:53,039 --> 00:01:59,490
language that's very friendly for for

00:01:55,950 --> 00:02:01,829
international first applications and hi

00:01:59,490 --> 00:02:05,399
I'm Justin Ridge well I also work for

00:02:01,829 --> 00:02:08,270
Google I work on the amp project and I'm

00:02:05,399 --> 00:02:11,039
one of the core maintainer Jean Babel

00:02:08,270 --> 00:02:14,700
wow so many impressive people in the

00:02:11,039 --> 00:02:17,069
room so the first question that pretty

00:02:14,700 --> 00:02:19,680
much a lot of people have asked is what

00:02:17,069 --> 00:02:23,310
is the organization behind tc39 and what

00:02:19,680 --> 00:02:26,750
actually is tc39 any one of you can

00:02:23,310 --> 00:02:26,750
answer that I'm sure very well

00:02:26,870 --> 00:02:33,090
okay so tc39 is the thirty-ninth

00:02:30,810 --> 00:02:35,069
Technical Committee of ACMA

00:02:33,090 --> 00:02:38,700
international Accra International is a

00:02:35,069 --> 00:02:41,519
standards body they are who publishes

00:02:38,700 --> 00:02:44,099
the Xmas script standard once a year

00:02:41,519 --> 00:02:47,250
which you may think about you know

00:02:44,099 --> 00:02:51,480
es2015 changed on things sure but every

00:02:47,250 --> 00:02:57,090
year now it gets published 2016 2017

00:02:51,480 --> 00:02:58,319
yes 2020 what we published in June yeah

00:02:57,090 --> 00:03:02,659
yeah

00:02:58,319 --> 00:03:04,889
so we ACMA is an organization made up of

00:03:02,659 --> 00:03:07,620
member organizations

00:03:04,889 --> 00:03:09,450
it's a standards body that large

00:03:07,620 --> 00:03:11,549
corporations small companies and

00:03:09,450 --> 00:03:15,450
nonprofits and universities can all join

00:03:11,549 --> 00:03:18,120
and once organization has joined ACMA

00:03:15,450 --> 00:03:18,569
they can send delegates that's what we

00:03:18,120 --> 00:03:22,489
all are

00:03:18,569 --> 00:03:24,750
delegates to two technical committees I

00:03:22,489 --> 00:03:27,359
don't know if that actually explains

00:03:24,750 --> 00:03:30,530
what's behind a tc39 or not that answers

00:03:27,359 --> 00:03:33,079
that answers the question pretty well so

00:03:30,530 --> 00:03:35,190
I'm sure you get a lot of features

00:03:33,079 --> 00:03:37,470
requests and features that are proposed

00:03:35,190 --> 00:03:38,790
and everything how does a feature move

00:03:37,470 --> 00:03:45,090
through the committee through the

00:03:38,790 --> 00:03:48,959
proposal process crack at that now we

00:03:45,090 --> 00:03:50,729
have a stage process in the

00:03:48,959 --> 00:03:54,509
documentation of stage one through stage

00:03:50,729 --> 00:03:56,220
four there is a stage 0 computer

00:03:54,509 --> 00:03:58,220
scientists we don't know how to count we

00:03:56,220 --> 00:04:01,680
start counting at zero instead of one

00:03:58,220 --> 00:04:03,569
but stage zero stage one is this is an

00:04:01,680 --> 00:04:06,209
idea that that someone thinks would be

00:04:03,569 --> 00:04:07,680
good to add to the language and stage

00:04:06,209 --> 00:04:09,150
one proposal basically says the

00:04:07,680 --> 00:04:12,269
committee thinks this is worthwhile to

00:04:09,150 --> 00:04:14,729
consider adding to language Stage two is

00:04:12,269 --> 00:04:18,299
now in the step where you're going to

00:04:14,729 --> 00:04:20,099
look at SPECT X so how you specify it

00:04:18,299 --> 00:04:21,570
you define semantics and things like

00:04:20,099 --> 00:04:23,970
that Stage three is where it's

00:04:21,570 --> 00:04:25,440
implemented by at least two

00:04:23,970 --> 00:04:28,259
implementations and an implementation

00:04:25,440 --> 00:04:30,000
doesn't necessarily have to be for

00:04:28,259 --> 00:04:33,000
example the engine a JavaScript engine

00:04:30,000 --> 00:04:35,789
side of a browser it could be for

00:04:33,000 --> 00:04:37,830
example a Babel implementation it could

00:04:35,789 --> 00:04:39,169
also be there's a embedded engine called

00:04:37,830 --> 00:04:41,210
XS

00:04:39,169 --> 00:04:43,340
it could be in that engine as well and

00:04:41,210 --> 00:04:45,650
stage 4 it's in the language stage 4

00:04:43,340 --> 00:04:47,840
synonymous with it's in the standard and

00:04:45,650 --> 00:04:49,460
we say something stage 4 until it's

00:04:47,840 --> 00:04:51,110
produced in that standard so there's

00:04:49,460 --> 00:04:56,300
stage 4 proposals that are gonna be part

00:04:51,110 --> 00:04:57,919
of the 2020s 2020 and after 2020 is out

00:04:56,300 --> 00:04:59,479
we won't call them stage 4 they're just

00:04:57,919 --> 00:05:01,789
in the language so that's basically the

00:04:59,479 --> 00:05:04,789
process you go through it's typically

00:05:01,789 --> 00:05:06,289
done by a champion that's going to take

00:05:04,789 --> 00:05:08,180
it or champions there could be more than

00:05:06,289 --> 00:05:09,169
one person more than one delegate that's

00:05:08,180 --> 00:05:12,139
going to take it through that whole

00:05:09,169 --> 00:05:13,939
process there's some debating on on you

00:05:12,139 --> 00:05:14,990
know is this a at each stage is this

00:05:13,939 --> 00:05:16,610
something that we think is worthwhile

00:05:14,990 --> 00:05:19,729
are people going to use it what are the

00:05:16,610 --> 00:05:21,199
use cases also the semantics of the

00:05:19,729 --> 00:05:23,360
semantics mesh well with the rest of the

00:05:21,199 --> 00:05:24,650
language so on and so forth so that's

00:05:23,360 --> 00:05:29,029
basically the process that we go through

00:05:24,650 --> 00:05:30,889
to put something in the language so for

00:05:29,029 --> 00:05:33,289
a were you going to say something it's

00:05:30,889 --> 00:05:34,460
worth noting that our standard for

00:05:33,289 --> 00:05:36,789
whether or not we're going to tackle

00:05:34,460 --> 00:05:41,330
something in the first place isn't is

00:05:36,789 --> 00:05:44,089
this new syntax or API something that we

00:05:41,330 --> 00:05:46,550
want to add it's is there a problem that

00:05:44,089 --> 00:05:49,069
we're going to solve which i think is a

00:05:46,550 --> 00:05:50,779
maybe a different approach than a lot of

00:05:49,069 --> 00:05:52,909
people assume that we make to make you

00:05:50,779 --> 00:05:55,069
change the language it's it's Wiis we

00:05:52,909 --> 00:05:56,960
identify problems that need solving

00:05:55,069 --> 00:06:00,279
and from there we decide how we're going

00:05:56,960 --> 00:06:02,689
to do that so I first heard about

00:06:00,279 --> 00:06:05,960
optional chaining which i think is stage

00:06:02,689 --> 00:06:07,689
4 now now I first heard about that I

00:06:05,960 --> 00:06:12,860
think when it was stage 0 which was like

00:06:07,689 --> 00:06:15,830
three years ago or something 2016 and so

00:06:12,860 --> 00:06:18,259
is that typical for something to take

00:06:15,830 --> 00:06:20,509
that long to go through stage zero to

00:06:18,259 --> 00:06:24,349
stage four how long does something

00:06:20,509 --> 00:06:26,060
typically take years so I was actually

00:06:24,349 --> 00:06:28,610
one of the co champions on optional

00:06:26,060 --> 00:06:30,740
chaining thank you the I actually saw

00:06:28,610 --> 00:06:32,330
there are Google internal documents

00:06:30,740 --> 00:06:35,389
suggesting optional chaining back in

00:06:32,330 --> 00:06:37,639
like 2012 the fact that we add only

00:06:35,389 --> 00:06:38,629
finally produced the spec text for it

00:06:37,639 --> 00:06:43,580
and tried to go through the staging

00:06:38,629 --> 00:06:45,589
process starting in like 2016 or so the

00:06:43,580 --> 00:06:47,629
I think there was a little bit of

00:06:45,589 --> 00:06:48,800
infighting about what the scope of what

00:06:47,629 --> 00:06:51,440
we wanted to do with optional chaining

00:06:48,800 --> 00:06:52,670
and how far like the optional miss the

00:06:51,440 --> 00:06:54,350
chain is

00:06:52,670 --> 00:06:57,230
where it ends whether or not should be

00:06:54,350 --> 00:06:59,090
undefined or null so that took a little

00:06:57,230 --> 00:07:02,570
bit of time extra time in order to work

00:06:59,090 --> 00:07:04,400
through but then once we actually add

00:07:02,570 --> 00:07:05,330
like a concrete idea we knew all the

00:07:04,400 --> 00:07:07,910
solution to it

00:07:05,330 --> 00:07:10,730
it only took maybe three meetings to go

00:07:07,910 --> 00:07:13,850
from the stage to stage three and then

00:07:10,730 --> 00:07:15,590
to stage four so once we actually have

00:07:13,850 --> 00:07:17,440
agreement about overdoing it's pretty

00:07:15,590 --> 00:07:20,900
quick but it's getting that initial idea

00:07:17,440 --> 00:07:23,270
hammered out that took forever yeah and

00:07:20,900 --> 00:07:26,000
I just add to that really quickly so as

00:07:23,270 --> 00:07:27,400
Justin mentioned we need multiple times

00:07:26,000 --> 00:07:31,850
a year so we have six meetings a year

00:07:27,400 --> 00:07:34,040
every other month generally a future if

00:07:31,850 --> 00:07:38,480
it goes for a stage advanced advancement

00:07:34,040 --> 00:07:41,420
only goes one stage per meeting and so

00:07:38,480 --> 00:07:44,240
in theory and this is not generally in

00:07:41,420 --> 00:07:49,100
practice but kind of the fastest you

00:07:44,240 --> 00:07:53,000
could go through the whole process would

00:07:49,100 --> 00:07:55,700
be like eight months has anything ever

00:07:53,000 --> 00:07:57,290
gone in eight months I I don't know if

00:07:55,700 --> 00:07:59,900
it's gone that fast but I have seen

00:07:57,290 --> 00:08:05,060
proposals for example that are for very

00:07:59,900 --> 00:08:06,980
very clearly defined features that come

00:08:05,060 --> 00:08:09,260
in as stage two because they've come

00:08:06,980 --> 00:08:11,510
with a really really clear use case the

00:08:09,260 --> 00:08:12,890
spec text is already written it is not

00:08:11,510 --> 00:08:15,620
controversial that this is something

00:08:12,890 --> 00:08:18,110
that we need I'm spacing on the exact

00:08:15,620 --> 00:08:20,390
one I know that a delegate Mike Samuel

00:08:18,110 --> 00:08:25,310
had a couple catch went through very

00:08:20,390 --> 00:08:27,500
quickly optional catch I'm a bit puzzled

00:08:25,310 --> 00:08:30,440
by the process implication there I don't

00:08:27,500 --> 00:08:33,140
remember anything so to speak coming in

00:08:30,440 --> 00:08:36,800
at stage two just that it rapidly

00:08:33,140 --> 00:08:37,970
advanced the stage two there's a few

00:08:36,800 --> 00:08:39,410
examples from the internationalization

00:08:37,970 --> 00:08:41,270
point of view where we bring things

00:08:39,410 --> 00:08:44,900
directly and at stage two which sort of

00:08:41,270 --> 00:08:46,550
segues for how do proposals work on

00:08:44,900 --> 00:08:49,430
internationalization so we have a

00:08:46,550 --> 00:08:50,990
subcommittee where we were we review

00:08:49,430 --> 00:08:53,300
internationalization specific features

00:08:50,990 --> 00:08:55,010
this is things in the insult object so

00:08:53,300 --> 00:08:56,480
in tool number format until date format

00:08:55,010 --> 00:08:59,930
into a col later those kinds of things

00:08:56,480 --> 00:09:02,090
and we review you know the those

00:08:59,930 --> 00:09:04,000
proposals and check the use cases and

00:09:02,090 --> 00:09:06,230
check the implement ability of them

00:09:04,000 --> 00:09:09,100
before we bring them to

00:09:06,230 --> 00:09:11,690
full committee so we frequently have

00:09:09,100 --> 00:09:13,310
proposals that come directly and at

00:09:11,690 --> 00:09:15,530
stage two because we've already done a

00:09:13,310 --> 00:09:20,000
lot of this vetting before we bring them

00:09:15,530 --> 00:09:21,410
to the larger committee and you know it

00:09:20,000 --> 00:09:23,030
means that sometimes we can have

00:09:21,410 --> 00:09:25,910
proposals that go through the process

00:09:23,030 --> 00:09:29,630
faster because of that for prefer Intel

00:09:25,910 --> 00:09:32,170
I find that the biggest bottleneck for

00:09:29,630 --> 00:09:34,910
us is getting the implementations

00:09:32,170 --> 00:09:37,190
because in the internationalization API

00:09:34,910 --> 00:09:38,810
is tends to be to tend to have a lot of

00:09:37,190 --> 00:09:40,790
dependencies and are more difficult to

00:09:38,810 --> 00:09:43,250
implement sometimes because you know

00:09:40,790 --> 00:09:46,100
they vary you know greatly from you know

00:09:43,250 --> 00:09:49,070
language to language and region to

00:09:46,100 --> 00:09:50,930
region so so we tend to have a lot of

00:09:49,070 --> 00:09:53,780
proposals that get stuck at stage three

00:09:50,930 --> 00:09:55,910
and can say it's age three for a year or

00:09:53,780 --> 00:09:59,510
more before the browsers have all have

00:09:55,910 --> 00:10:00,680
have implemented them whereas whereas I

00:09:59,510 --> 00:10:03,680
know a lot of other proposals that get

00:10:00,680 --> 00:10:05,420
stuck at stage 1 or stage 2 and one

00:10:03,680 --> 00:10:07,430
thing I was just gonna add really

00:10:05,420 --> 00:10:11,060
quickly is there is somewhat of an

00:10:07,430 --> 00:10:12,500
ambiguity in the stages and so the

00:10:11,060 --> 00:10:13,730
conversation that Mark and I were having

00:10:12,500 --> 00:10:16,760
right now is actually a very healthy

00:10:13,730 --> 00:10:18,380
debate that can often happen around like

00:10:16,760 --> 00:10:20,090
there's the reality of how things go

00:10:18,380 --> 00:10:21,740
through but then our understanding of

00:10:20,090 --> 00:10:25,610
how that applies to the stages can vary

00:10:21,740 --> 00:10:27,560
and so it is not uncommon we're a group

00:10:25,610 --> 00:10:30,200
of people who like being pedantic it is

00:10:27,560 --> 00:10:32,600
not uncommon that during a meeting we

00:10:30,200 --> 00:10:35,120
may actually stop and discuss the

00:10:32,600 --> 00:10:37,490
process and ensure that we're being fair

00:10:35,120 --> 00:10:40,460
to the process that were yeah following

00:10:37,490 --> 00:10:42,380
all the criteria and I at least like to

00:10:40,460 --> 00:10:44,720
think that it is to an extent a living

00:10:42,380 --> 00:10:46,760
thing and we want to be flexible and we

00:10:44,720 --> 00:10:50,270
want to have a process that that creates

00:10:46,760 --> 00:10:53,510
a great language so you know even just

00:10:50,270 --> 00:10:56,660
this past week I think probably almost a

00:10:53,510 --> 00:10:58,160
third of the committee time in the three

00:10:56,660 --> 00:11:00,380
meetings that we had were discussing a

00:10:58,160 --> 00:11:03,770
variety of different process changes

00:11:00,380 --> 00:11:06,650
that were exploring for a number of

00:11:03,770 --> 00:11:09,710
different reasons including potentially

00:11:06,650 --> 00:11:11,720
introducing more remote work that we

00:11:09,710 --> 00:11:13,970
could do or more ways of meeting in

00:11:11,720 --> 00:11:16,490
between meetings because one of the

00:11:13,970 --> 00:11:19,010
things that can't happen for good or for

00:11:16,490 --> 00:11:20,060
bad if you bring something for stage

00:11:19,010 --> 00:11:21,680
advancement and someone

00:11:20,060 --> 00:11:22,990
points out something that you hadn't

00:11:21,680 --> 00:11:25,130
thought of between the two meetings

00:11:22,990 --> 00:11:27,110
something and get delayed for two months

00:11:25,130 --> 00:11:28,970
which is why things can take three or

00:11:27,110 --> 00:11:30,410
four years so we're actively trying to

00:11:28,970 --> 00:11:32,450
think of different working modes that we

00:11:30,410 --> 00:11:33,700
can use to minimize the possibility of

00:11:32,450 --> 00:11:36,530
that happening

00:11:33,700 --> 00:11:37,580
so speaking of all of this process and

00:11:36,530 --> 00:11:41,480
you mentioned the actual implementation

00:11:37,580 --> 00:11:43,580
part how does the implementation process

00:11:41,480 --> 00:11:47,200
work and how do you actually know that

00:11:43,580 --> 00:11:47,200
things are being implemented correctly

00:11:50,860 --> 00:11:58,880
you can use my mic if it doesn't work

00:11:53,980 --> 00:12:01,190
and so one of the the key criteria or

00:11:58,880 --> 00:12:03,620
actually landing in the spec and -

00:12:01,190 --> 00:12:06,380
getting it into stage four is that we

00:12:03,620 --> 00:12:10,640
have conformance tests so the the main

00:12:06,380 --> 00:12:13,930
project for that is let's test 262 and

00:12:10,640 --> 00:12:16,250
and that has a number of maintainer x'

00:12:13,930 --> 00:12:22,100
folk who've done a lot of work on that

00:12:16,250 --> 00:12:25,490
and oh yeah a ton ton of work there with

00:12:22,100 --> 00:12:29,810
Leo voltar in particular contributing

00:12:25,490 --> 00:12:32,390
and so having that all implementations

00:12:29,810 --> 00:12:35,510
to go through should be a hundred cent

00:12:32,390 --> 00:12:37,640
compliant with that ideally I think you

00:12:35,510 --> 00:12:41,750
can see a lot of the stats that there's

00:12:37,640 --> 00:12:44,120
still still a way to go there oh yeah

00:12:41,750 --> 00:12:46,190
there was a project oh you can you can

00:12:44,120 --> 00:12:48,860
see them for yourself at test 262 dot

00:12:46,190 --> 00:12:51,770
report it's a website that shows each of

00:12:48,860 --> 00:12:55,190
the engines and how many tests are what

00:12:51,770 --> 00:12:57,020
their compliance looks like and all of

00:12:55,190 --> 00:12:59,300
you in the room can help with this as

00:12:57,020 --> 00:13:01,400
well because whenever a feature is

00:12:59,300 --> 00:13:04,400
released it normally comes out in

00:13:01,400 --> 00:13:07,670
browsers in early versions like Canary

00:13:04,400 --> 00:13:10,070
versions and maybe it's behind a flag so

00:13:07,670 --> 00:13:12,620
if you enable these in your browsers and

00:13:10,070 --> 00:13:15,920
then and try them out there if you find

00:13:12,620 --> 00:13:18,050
any issues if you find any bugs or maybe

00:13:15,920 --> 00:13:21,710
you've just got feedback maybe you like

00:13:18,050 --> 00:13:23,810
it maybe you don't and please do please

00:13:21,710 --> 00:13:27,260
do provide that feedback all the

00:13:23,810 --> 00:13:29,060
proposals have a repo on github

00:13:27,260 --> 00:13:31,970
so you can raise an issue there and

00:13:29,060 --> 00:13:33,590
that's always massively appreciated and

00:13:31,970 --> 00:13:35,900
we do see a

00:13:33,590 --> 00:13:38,180
a lot of people reporting real-life

00:13:35,900 --> 00:13:40,480
things there or you can file an issue on

00:13:38,180 --> 00:13:43,490
the actual browser bug trackers as well

00:13:40,480 --> 00:13:45,260
so so please please do try and

00:13:43,490 --> 00:13:48,680
experiment and have fun

00:13:45,260 --> 00:13:50,780
our organization is tc39 on github and

00:13:48,680 --> 00:13:53,690
you can see every proposal we're talking

00:13:50,780 --> 00:13:56,720
about and the agendas for every meeting

00:13:53,690 --> 00:13:57,800
we're doing and a few other things so

00:13:56,720 --> 00:14:00,920
it's the easiest way to actually

00:13:57,800 --> 00:14:04,760
participate in the process that back to

00:14:00,920 --> 00:14:06,500
the implementations during stage 3

00:14:04,760 --> 00:14:08,990
that's where these implementations are

00:14:06,500 --> 00:14:10,850
being done and quite often we quite

00:14:08,990 --> 00:14:12,790
often it's often the case that we find

00:14:10,850 --> 00:14:16,580
that we're under specified about certain

00:14:12,790 --> 00:14:18,410
semantics and so implementation a will

00:14:16,580 --> 00:14:20,180
do something one way and implementation

00:14:18,410 --> 00:14:23,630
B will do something slightly different

00:14:20,180 --> 00:14:25,670
and it's during that that process either

00:14:23,630 --> 00:14:27,440
using test 262 or the tests that those

00:14:25,670 --> 00:14:29,420
implementations write to validate their

00:14:27,440 --> 00:14:30,740
own implementation that we find those

00:14:29,420 --> 00:14:33,200
are some discrepancies and we work

00:14:30,740 --> 00:14:34,700
through those discrepancies and and

00:14:33,200 --> 00:14:36,110
unify things and we're going through a

00:14:34,700 --> 00:14:37,820
proposal now where there's a little bit

00:14:36,110 --> 00:14:39,110
unification around that but that

00:14:37,820 --> 00:14:41,810
occasionally happens and that's why we

00:14:39,110 --> 00:14:43,700
have that implementation stage or stages

00:14:41,810 --> 00:14:44,990
hi Mary focus on implementation that we

00:14:43,700 --> 00:14:46,310
make sure that we're compliant with each

00:14:44,990 --> 00:14:47,960
other we're compatible with each other

00:14:46,310 --> 00:14:52,120
as well as complying with what the spec

00:14:47,960 --> 00:14:55,010
says I always like to talk about

00:14:52,120 --> 00:14:59,690
weaknesses as well as strengths my tests

00:14:55,010 --> 00:15:01,670
262 is an amazing piece of work but it's

00:14:59,690 --> 00:15:05,180
important to understand that it consists

00:15:01,670 --> 00:15:07,400
of very very detailed unit tests they go

00:15:05,180 --> 00:15:10,070
through the spec kind of in order and

00:15:07,400 --> 00:15:12,580
try to make sure to touch everything in

00:15:10,070 --> 00:15:16,270
the spec individually as a unit test

00:15:12,580 --> 00:15:18,710
what it is not is an integration test

00:15:16,270 --> 00:15:22,130
languages have lots and lots of

00:15:18,710 --> 00:15:24,470
non-local and non orthogonal interaction

00:15:22,130 --> 00:15:27,830
between features and we have repeatedly

00:15:24,470 --> 00:15:31,310
seen non conformance that was not

00:15:27,830 --> 00:15:33,200
detected by test 262 at the non

00:15:31,310 --> 00:15:35,900
orthogonal interaction of different

00:15:33,200 --> 00:15:37,520
language features so going forward one

00:15:35,900 --> 00:15:42,830
of the things that that I would very

00:15:37,520 --> 00:15:44,450
much like to see is some creative

00:15:42,830 --> 00:15:46,850
thinking on how to bring more

00:15:44,450 --> 00:15:47,990
integration testing you're testing the

00:15:46,850 --> 00:15:49,370
language

00:15:47,990 --> 00:15:51,260
and how to do that without a

00:15:49,370 --> 00:15:53,260
combinatorial explosion I think it's an

00:15:51,260 --> 00:15:55,670
interesting problem

00:15:53,260 --> 00:15:57,019
so are these repos that you've all

00:15:55,670 --> 00:15:58,459
mentioned is that the best way to

00:15:57,019 --> 00:16:00,350
interact with the committee are there

00:15:58,459 --> 00:16:02,839
other ways that individual developers

00:16:00,350 --> 00:16:11,870
can get involved outside of being a

00:16:02,839 --> 00:16:15,200
delegate from their company we have a

00:16:11,870 --> 00:16:18,980
discourse instance at yes dot discourse

00:16:15,200 --> 00:16:23,180
dot group where you can ask questions

00:16:18,980 --> 00:16:26,810
you can see discussions of sort of

00:16:23,180 --> 00:16:28,100
potential ideas or or you know kick

00:16:26,810 --> 00:16:30,829
around some thoughts you might have a

00:16:28,100 --> 00:16:34,640
language there's also of course github

00:16:30,829 --> 00:16:36,950
each proposal is at t39 slash proposal -

00:16:34,640 --> 00:16:38,300
the proposal name and you can see all of

00:16:36,950 --> 00:16:41,930
them at tc39

00:16:38,300 --> 00:16:44,779
slash proposals you can contribute

00:16:41,930 --> 00:16:48,470
yourself as long as you have filled out

00:16:44,779 --> 00:16:50,750
our royalty-free intellectual property

00:16:48,470 --> 00:16:52,399
rights agreement which sounds like a

00:16:50,750 --> 00:16:54,170
mouthful but let me tell you my

00:16:52,399 --> 00:16:56,360
organization has rather cautious

00:16:54,170 --> 00:17:01,700
attorneys and they're like not school so

00:16:56,360 --> 00:17:09,319
you know it's cool we also are on IRC

00:17:01,700 --> 00:17:11,630
we're on freenode at tc39 good I'm on

00:17:09,319 --> 00:17:12,740
Twitter all the time we got our we got

00:17:11,630 --> 00:17:17,300
our Twitter handle back but I don't

00:17:12,740 --> 00:17:21,500
actually know who uses it so so contact

00:17:17,300 --> 00:17:23,689
you on Twitter specifically actually a

00:17:21,500 --> 00:17:25,730
lot of us do follow looking 40 through

00:17:23,689 --> 00:17:27,829
nine hashtag to see what people are

00:17:25,730 --> 00:17:29,480
saying and thinking about this stuff

00:17:27,829 --> 00:17:32,650
we're working on so it actually is a

00:17:29,480 --> 00:17:32,650
pretty decent way to get our attention

00:17:33,429 --> 00:17:39,559
we also have a process as the committee

00:17:36,440 --> 00:17:41,720
known as invited experts so if you're

00:17:39,559 --> 00:17:44,030
working on like open source libraries

00:17:41,720 --> 00:17:45,950
are working on things that directly

00:17:44,030 --> 00:17:48,050
impact the standards that we're working

00:17:45,950 --> 00:17:50,380
on there is a process in which you can

00:17:48,050 --> 00:17:54,620
be invited to come and attend a meeting

00:17:50,380 --> 00:17:57,710
we I'm working on one proposal right now

00:17:54,620 --> 00:17:59,540
for module attributes where I believe

00:17:57,710 --> 00:18:00,690
that I could be mistaken but I believe

00:17:59,540 --> 00:18:02,550
one of the people

00:18:00,690 --> 00:18:03,900
working on it is not a delegate one of

00:18:02,550 --> 00:18:06,480
the champions is someone from the

00:18:03,900 --> 00:18:08,280
ecosystem who helps maintain Babel who's

00:18:06,480 --> 00:18:12,270
building out examples of the

00:18:08,280 --> 00:18:14,160
implementation and I won't lie like it

00:18:12,270 --> 00:18:16,650
is a little bit of a black box to figure

00:18:14,160 --> 00:18:18,330
out how to get involved but when you

00:18:16,650 --> 00:18:20,250
find those contacts and all these people

00:18:18,330 --> 00:18:22,620
who you see on the stage now can be in a

00:18:20,250 --> 00:18:24,720
place where you can start there

00:18:22,620 --> 00:18:27,270
but if you have ideas and you can get a

00:18:24,720 --> 00:18:29,130
champion excited about it there's

00:18:27,270 --> 00:18:31,680
definitely a lot of ways that you can

00:18:29,130 --> 00:18:34,110
help directly in creating proposals and

00:18:31,680 --> 00:18:36,240
potentially even come to the meeting the

00:18:34,110 --> 00:18:39,150
open jazz foundation in particular is a

00:18:36,240 --> 00:18:42,630
member as a non-profit and we have

00:18:39,150 --> 00:18:44,760
within the open Jas foundation $40,000 a

00:18:42,630 --> 00:18:46,530
year travel budget to cover travel for

00:18:44,760 --> 00:18:48,720
people within the foundation we've

00:18:46,530 --> 00:18:50,790
actually paid for individuals who are

00:18:48,720 --> 00:18:53,130
not members of large companies have been

00:18:50,790 --> 00:18:54,960
invited as experts to go and attend the

00:18:53,130 --> 00:18:57,420
meetings because the travel can be cost

00:18:54,960 --> 00:18:59,640
prohibitive but there are ways to do it

00:18:57,420 --> 00:19:02,190
and I think as a group one of the things

00:18:59,640 --> 00:19:02,670
we do want to do hopefully in the near

00:19:02,190 --> 00:19:04,230
future

00:19:02,670 --> 00:19:06,540
is try to make some of this better

00:19:04,230 --> 00:19:11,850
documented so folks can figure out how

00:19:06,540 --> 00:19:15,090
to get involved cool and another

00:19:11,850 --> 00:19:18,300
interaction point is that there's a set

00:19:15,090 --> 00:19:21,420
of calls they're set up so running

00:19:18,300 --> 00:19:23,190
regularly for things like tooling where

00:19:21,420 --> 00:19:27,840
we get the tools vendors or altar all

00:19:23,190 --> 00:19:29,490
together like typescript Apple if you

00:19:27,840 --> 00:19:31,040
have an interest in maintaining our

00:19:29,490 --> 00:19:34,620
tools there you could join yourself

00:19:31,040 --> 00:19:39,360
there's also a frameworks call where for

00:19:34,620 --> 00:19:41,640
example react view and all these

00:19:39,360 --> 00:19:44,130
contributors come on to talk about hem

00:19:41,640 --> 00:19:46,860
how the new Pro new proposals that are

00:19:44,130 --> 00:19:49,080
coming up hey they may be shaped or

00:19:46,860 --> 00:19:51,900
where they might impact leave these

00:19:49,080 --> 00:19:55,290
groups and there's also the educators

00:19:51,900 --> 00:19:58,020
call this is all about people who are

00:19:55,290 --> 00:20:00,390
teaching the language so if you're if

00:19:58,020 --> 00:20:02,250
you have a responsibility for teaching

00:20:00,390 --> 00:20:04,860
people at your company and/or an

00:20:02,250 --> 00:20:06,750
interest in that please do join and then

00:20:04,860 --> 00:20:09,660
you'll hear about all the new proposals

00:20:06,750 --> 00:20:13,620
coming up and if you have concerns maybe

00:20:09,660 --> 00:20:14,700
a feature is going to be hard to teach

00:20:13,620 --> 00:20:17,010
the people

00:20:14,700 --> 00:20:19,110
is going to confuse them then that's an

00:20:17,010 --> 00:20:23,010
excellent way to provide feedback and

00:20:19,110 --> 00:20:25,140
talk to other humans speaking of that is

00:20:23,010 --> 00:20:27,570
there with all of the new things being

00:20:25,140 --> 00:20:30,200
added is there a risk of the language

00:20:27,570 --> 00:20:40,140
being too cryptic for new developers ooh

00:20:30,200 --> 00:20:45,450
you have a thought yes okay yes it's

00:20:40,140 --> 00:20:47,550
it's a continual battle but this

00:20:45,450 --> 00:20:50,400
committee I think has been engaging in

00:20:47,550 --> 00:20:53,370
the battle well but there's an inherent

00:20:50,400 --> 00:20:57,180
problem in the dynamics of any standards

00:20:53,370 --> 00:20:59,940
committee which is there's two things

00:20:57,180 --> 00:21:02,670
being battled there's two things in

00:20:59,940 --> 00:21:05,720
tension one is for any new feature the

00:21:02,670 --> 00:21:09,690
benefit of the feature individually and

00:21:05,720 --> 00:21:11,430
then there's the overall cost on the

00:21:09,690 --> 00:21:14,130
complexity of the language as a whole

00:21:11,430 --> 00:21:16,650
and when you're the promoter of a

00:21:14,130 --> 00:21:19,260
particular feature and and even if

00:21:16,650 --> 00:21:22,770
you're not the promoter when in the room

00:21:19,260 --> 00:21:26,250
we're discussing the feature we're very

00:21:22,770 --> 00:21:28,170
naturally are focused on thinking about

00:21:26,250 --> 00:21:33,180
the feature in which case we're

00:21:28,170 --> 00:21:36,780
generally thinking about the the value

00:21:33,180 --> 00:21:41,550
of the feature it's very hard to

00:21:36,780 --> 00:21:44,070
maintain vigilance to guard the overall

00:21:41,550 --> 00:21:46,740
complexity budget of the language and as

00:21:44,070 --> 00:21:50,610
the language gets bigger the danger

00:21:46,740 --> 00:21:54,990
increases because each additional thing

00:21:50,610 --> 00:21:58,880
added is a smaller fraction addition so

00:21:54,990 --> 00:22:01,680
it's easier not to see the danger

00:21:58,880 --> 00:22:04,580
there's also sort of the first I think

00:22:01,680 --> 00:22:07,950
two years we've had a presentation about

00:22:04,580 --> 00:22:10,080
syntax complexity there's all these very

00:22:07,950 --> 00:22:12,810
funny slides about how cryptic can you

00:22:10,080 --> 00:22:15,690
make your code layout presents this

00:22:12,810 --> 00:22:20,100
every time last year it was just filled

00:22:15,690 --> 00:22:22,470
with so many question marks I like to do

00:22:20,100 --> 00:22:23,490
like triple nested turn Ares and classes

00:22:22,470 --> 00:22:26,710
just to be like did you know you could

00:22:23,490 --> 00:22:34,299
do that and then people's brains hurt

00:22:26,710 --> 00:22:36,549
I think one of the other protections we

00:22:34,299 --> 00:22:39,669
have in the committee from the language

00:22:36,549 --> 00:22:42,669
becoming too complex is that in more

00:22:39,669 --> 00:22:45,419
recent years though previously and the

00:22:42,669 --> 00:22:48,549
committee was populated with mostly

00:22:45,419 --> 00:22:50,860
implementers and a few other people in

00:22:48,549 --> 00:22:53,409
recent years the the membership has

00:22:50,860 --> 00:22:56,169
grown quite a lot and so there are now a

00:22:53,409 --> 00:23:01,510
lot more users of JavaScript involved

00:22:56,169 --> 00:23:04,049
and so there's a lot more regular web

00:23:01,510 --> 00:23:06,880
web developers and they're there to

00:23:04,049 --> 00:23:09,630
actively speak up if they believe that

00:23:06,880 --> 00:23:13,600
that things are getting an out of hand

00:23:09,630 --> 00:23:16,270
so for new features to come in how often

00:23:13,600 --> 00:23:18,279
does it come from these just web

00:23:16,270 --> 00:23:19,690
developers out in the wild how many how

00:23:18,279 --> 00:23:21,370
often do they come from community

00:23:19,690 --> 00:23:24,100
requests and how often do they come from

00:23:21,370 --> 00:23:34,360
internally in the committee or elsewhere

00:23:24,100 --> 00:23:37,390
I think for Intel we we have a github

00:23:34,360 --> 00:23:40,419
repository which is github comm / tc39

00:23:37,390 --> 00:23:43,169
slash equi four zero two four zero two

00:23:40,419 --> 00:23:47,230
is the number of the insula

00:23:43,169 --> 00:23:50,500
specification and we get feature

00:23:47,230 --> 00:23:52,570
requests from from from users and the

00:23:50,500 --> 00:23:56,340
more users that request a feature the

00:23:52,570 --> 00:23:58,990
more interesting that feature becomes

00:23:56,340 --> 00:24:04,600
for us to prioritize and implementing

00:23:58,990 --> 00:24:07,240
ultimately you know these proposals are

00:24:04,600 --> 00:24:10,750
driven by the members of ACMA

00:24:07,240 --> 00:24:13,809
international so for the ins for the

00:24:10,750 --> 00:24:16,360
Intel objects these features generally

00:24:13,809 --> 00:24:20,860
have to be features that's in my case

00:24:16,360 --> 00:24:23,110
Google clients need but those are quite

00:24:20,860 --> 00:24:26,649
often aligned closely with the features

00:24:23,110 --> 00:24:30,250
that that regular web developers need so

00:24:26,649 --> 00:24:32,500
it's really good to get signals on what

00:24:30,250 --> 00:24:33,730
features users are requesting and at

00:24:32,500 --> 00:24:36,130
least for install the way that we do

00:24:33,730 --> 00:24:38,860
that is by engaging with users on github

00:24:36,130 --> 00:24:40,690
which also segues back to the earlier

00:24:38,860 --> 00:24:42,850
question about how can you get involved

00:24:40,690 --> 00:24:46,120
if you go to our github page we have a

00:24:42,850 --> 00:24:47,680
calendar with our monthly meetings we

00:24:46,120 --> 00:24:51,040
have a monthly to our phone meeting

00:24:47,680 --> 00:24:54,280
which you can you can subscribe to that

00:24:51,040 --> 00:24:59,710
calendar if you're interested and silent

00:24:54,280 --> 00:25:02,380
to those meetings so I think my my claim

00:24:59,710 --> 00:25:05,080
subjectively is that at least 80% maybe

00:25:02,380 --> 00:25:06,970
90% of new features in the last three or

00:25:05,080 --> 00:25:10,630
four years have been done by developers

00:25:06,970 --> 00:25:13,990
and not implementers I think that's been

00:25:10,630 --> 00:25:15,940
the case recently I believe before that

00:25:13,990 --> 00:25:18,100
there is implementers were more wanting

00:25:15,940 --> 00:25:19,630
to add certain features as engine

00:25:18,100 --> 00:25:21,460
developers and language niobium

00:25:19,630 --> 00:25:24,330
developers I think it's it's it's

00:25:21,460 --> 00:25:26,910
switched in like the last five years I

00:25:24,330 --> 00:25:28,960
guess one thing I can add as well

00:25:26,910 --> 00:25:30,040
especially when we talked about stage

00:25:28,960 --> 00:25:32,740
one we talked about the difference

00:25:30,040 --> 00:25:35,860
between coming with solutions versus

00:25:32,740 --> 00:25:38,740
coming with problems and so I think that

00:25:35,860 --> 00:25:41,020
while the solutions may not be exactly

00:25:38,740 --> 00:25:43,210
what developers from the ecosystem had

00:25:41,020 --> 00:25:45,610
in mind or even necessarily what we had

00:25:43,210 --> 00:25:47,290
in mind as we just like as we're still

00:25:45,610 --> 00:25:48,940
discovering the problem space the

00:25:47,290 --> 00:25:51,040
problems that were coming to solve are

00:25:48,940 --> 00:25:53,380
very much problems that developers are

00:25:51,040 --> 00:25:55,330
running into and I think some of the

00:25:53,380 --> 00:25:57,100
work that we've done around modules is a

00:25:55,330 --> 00:25:59,020
really great example of that like being

00:25:57,100 --> 00:26:02,020
able to write modular code very much a

00:25:59,020 --> 00:26:03,460
developer problem what kind of weird

00:26:02,020 --> 00:26:07,780
solutions we need to come up with

00:26:03,460 --> 00:26:09,880
because of history you know that may not

00:26:07,780 --> 00:26:13,210
be something anyone would have ever come

00:26:09,880 --> 00:26:17,350
up with in a vacuum so it's a bit of a

00:26:13,210 --> 00:26:19,450
balance there so with all of these

00:26:17,350 --> 00:26:20,710
things coming into play what are what

00:26:19,450 --> 00:26:22,570
are the goals for the committee

00:26:20,710 --> 00:26:24,970
especially in like the next five years

00:26:22,570 --> 00:26:33,220
what is JavaScript's identity in the

00:26:24,970 --> 00:26:34,390
next five or so years or more if there

00:26:33,220 --> 00:26:37,810
are so many different answers I'm

00:26:34,390 --> 00:26:39,760
genuinely curious honestly so I think

00:26:37,810 --> 00:26:42,400
one of the most important things about

00:26:39,760 --> 00:26:44,680
the nature of the committee is that

00:26:42,400 --> 00:26:46,330
people on the committee represent

00:26:44,680 --> 00:26:47,830
different constituencies and have

00:26:46,330 --> 00:26:51,550
different perspectives and different

00:26:47,830 --> 00:26:53,910
long-term visions back I think three

00:26:51,550 --> 00:26:57,750
years ago now

00:26:53,910 --> 00:27:00,330
the there was a set of presentations

00:26:57,750 --> 00:27:01,910
specifically soliciting from committee

00:27:00,330 --> 00:27:04,020
members who wanted to present on this

00:27:01,910 --> 00:27:06,420
what their long-term vision for

00:27:04,020 --> 00:27:07,980
javascript was I did one of those it's

00:27:06,420 --> 00:27:11,520
up on YouTube I recommend it

00:27:07,980 --> 00:27:14,340
but the important thing about the

00:27:11,520 --> 00:27:17,010
diversity of goals on the committee

00:27:14,340 --> 00:27:19,740
combined with the consensus process is

00:27:17,010 --> 00:27:22,610
something really magical happens as we

00:27:19,740 --> 00:27:25,350
all negotiate with each other is

00:27:22,610 --> 00:27:27,870
something will seem very good for some

00:27:25,350 --> 00:27:31,050
goals and will conflict with other goals

00:27:27,870 --> 00:27:33,090
and when that conflict is unresolved

00:27:31,050 --> 00:27:37,160
that can prevent it from going forward

00:27:33,090 --> 00:27:39,900
but the thing that's being proposed is

00:27:37,160 --> 00:27:42,810
it's it's not that there's a particular

00:27:39,900 --> 00:27:45,180
technical solution that somebody's

00:27:42,810 --> 00:27:48,000
trying to move forward they're trying to

00:27:45,180 --> 00:27:51,120
solve a problem and when you run into

00:27:48,000 --> 00:27:54,000
those conflicts it forces the people who

00:27:51,120 --> 00:27:56,640
want the feature to figure out how to

00:27:54,000 --> 00:27:59,310
redesign the feature so that it doesn't

00:27:56,640 --> 00:28:01,350
step on any of the other goals and often

00:27:59,310 --> 00:28:04,020
these are goals that those people would

00:28:01,350 --> 00:28:07,860
not have had in mind if it was not for

00:28:04,020 --> 00:28:09,840
the the the discussions in the room and

00:28:07,860 --> 00:28:11,490
the need to achieve consensus well I

00:28:09,840 --> 00:28:14,520
think we have a very very good process

00:28:11,490 --> 00:28:17,550
and it and the language as it moves

00:28:14,520 --> 00:28:21,080
forward really does succeed at advancing

00:28:17,550 --> 00:28:23,940
many different visions of the language I

00:28:21,080 --> 00:28:27,480
think one of the it's also going going

00:28:23,940 --> 00:28:29,760
on now is that say like three years ago

00:28:27,480 --> 00:28:32,550
node wasn't really involved in the

00:28:29,760 --> 00:28:36,030
conversation at tc39 and node now very

00:28:32,550 --> 00:28:37,710
much is we also have embedded devices

00:28:36,030 --> 00:28:41,520
that are using javascript there's a new

00:28:37,710 --> 00:28:43,590
TC TC 53 and you know you're talking

00:28:41,520 --> 00:28:45,570
about JavaScript for very very small

00:28:43,590 --> 00:28:46,920
constrained devices not necessarily

00:28:45,570 --> 00:28:48,960
wearables but certainly that's one of

00:28:46,920 --> 00:28:51,630
the targets and that's kind of a

00:28:48,960 --> 00:28:54,060
different ecosystem marks involved in

00:28:51,630 --> 00:28:56,040
javascript on blockchain so you know

00:28:54,060 --> 00:28:57,660
five years ago javascript was about the

00:28:56,040 --> 00:28:59,640
browser and pretty much that's about it

00:28:57,660 --> 00:29:01,560
and we saw this monitor mantra don't

00:28:59,640 --> 00:29:04,050
break the web and you can't have a

00:29:01,560 --> 00:29:06,330
breaking change but the conversation is

00:29:04,050 --> 00:29:08,490
now involving other ways javascript is

00:29:06,330 --> 00:29:10,620
being used and I think that that

00:29:08,490 --> 00:29:12,150
like I said coming before the last three

00:29:10,620 --> 00:29:16,590
years and I think that's can continue to

00:29:12,150 --> 00:29:18,450
be the case moving forward let us not

00:29:16,590 --> 00:29:21,090
forget my favorite places that

00:29:18,450 --> 00:29:26,940
javascript is running satellites in

00:29:21,090 --> 00:29:28,860
space and whirlpool washing machines so

00:29:26,940 --> 00:29:32,490
I think for myself and Michael kind of

00:29:28,860 --> 00:29:34,320
touched on it selfishly my my hope for

00:29:32,490 --> 00:29:36,060
the language over the next many years is

00:29:34,320 --> 00:29:37,920
that we have a lot of different places

00:29:36,060 --> 00:29:39,840
where we're gonna want run JavaScript

00:29:37,920 --> 00:29:43,560
and I would very much like to have a

00:29:39,840 --> 00:29:45,870
language that we can run everywhere one

00:29:43,560 --> 00:29:48,480
of the biggest risks that we have in the

00:29:45,870 --> 00:29:50,640
way that we standardize things is we

00:29:48,480 --> 00:29:52,920
don't standardize absolutely everything

00:29:50,640 --> 00:29:54,480
there are things that are left up for

00:29:52,920 --> 00:29:57,030
the hosts and the implementers to make

00:29:54,480 --> 00:29:59,430
decisions on really obvious one is the

00:29:57,030 --> 00:30:00,960
specifier when you import a module how

00:29:59,430 --> 00:30:02,610
do you turn that specifier into a path

00:30:00,960 --> 00:30:04,800
on the file system and then resolve that

00:30:02,610 --> 00:30:06,210
to actually get the resources the

00:30:04,800 --> 00:30:08,730
language doesn't actually know anything

00:30:06,210 --> 00:30:10,920
about a file system so this is left up

00:30:08,730 --> 00:30:12,930
to the host in the embedder to figure

00:30:10,920 --> 00:30:15,930
out which becomes a place where we can

00:30:12,930 --> 00:30:17,910
have contention between a thing like

00:30:15,930 --> 00:30:19,590
node and the browser and that's

00:30:17,910 --> 00:30:22,410
something I've been doing a lot of work

00:30:19,590 --> 00:30:27,390
on within node but I'd very much like to

00:30:22,410 --> 00:30:28,770
see us move towards having developers

00:30:27,390 --> 00:30:30,330
the people in this room be able to like

00:30:28,770 --> 00:30:32,160
kind of write code once and run it in

00:30:30,330 --> 00:30:34,410
all these different environments and not

00:30:32,160 --> 00:30:36,000
need to know all of the different

00:30:34,410 --> 00:30:37,980
intricacies and that's not to say there

00:30:36,000 --> 00:30:41,220
won't be unique api's across these

00:30:37,980 --> 00:30:44,600
environments but the the core language

00:30:41,220 --> 00:30:44,600
should not be getting in the way of that

00:30:46,250 --> 00:30:52,890
I'll take a stab so from the from the

00:30:51,360 --> 00:30:57,320
internationalization engineering

00:30:52,890 --> 00:31:02,340
perspective our our team at Google is is

00:30:57,320 --> 00:31:05,220
is is looking forward to building an IE

00:31:02,340 --> 00:31:06,810
10 frame work not just for JavaScript

00:31:05,220 --> 00:31:09,150
but also for other client-side

00:31:06,810 --> 00:31:11,790
applications including Android and iOS

00:31:09,150 --> 00:31:16,140
and watch OS and where OS and flutter

00:31:11,790 --> 00:31:18,720
and fuchsia and we're sort of starting

00:31:16,140 --> 00:31:21,180
with JavaScript as one of the most

00:31:18,720 --> 00:31:23,580
popular client-side

00:31:21,180 --> 00:31:26,280
forms the the web platform in general

00:31:23,580 --> 00:31:27,810
and then sort of taking some of some of

00:31:26,280 --> 00:31:29,940
the lessons that we learn here and then

00:31:27,810 --> 00:31:33,330
applying those to the other platforms so

00:31:29,940 --> 00:31:34,950
we're sorta so I sort of see JavaScript

00:31:33,330 --> 00:31:43,110
as sort of the leader in how you can

00:31:34,950 --> 00:31:45,120
build a great ITN friendly platform so I

00:31:43,110 --> 00:31:46,770
think you can probably tell from some of

00:31:45,120 --> 00:31:49,800
the answers here that the wide range of

00:31:46,770 --> 00:31:53,460
answers that there is no singular vision

00:31:49,800 --> 00:32:00,600
there is no dictator that decides

00:31:53,460 --> 00:32:05,340
exactly exactly what it's going to be a

00:32:00,600 --> 00:32:10,080
key keeps us on time she's very very

00:32:05,340 --> 00:32:13,260
good and but that's also also another

00:32:10,080 --> 00:32:16,980
thing is that javascript is not owned by

00:32:13,260 --> 00:32:19,890
any one person or company I think that's

00:32:16,980 --> 00:32:23,070
a really big thing about the reason that

00:32:19,890 --> 00:32:25,770
it's special reason that lots of people

00:32:23,070 --> 00:32:27,840
come together to invest in the language

00:32:25,770 --> 00:32:32,090
people invest their careers into it

00:32:27,840 --> 00:32:34,710
their spare time but equally companies

00:32:32,090 --> 00:32:36,540
these features that are coming out they

00:32:34,710 --> 00:32:40,440
don't come for free companies are

00:32:36,540 --> 00:32:42,030
choosing to to direct investment because

00:32:40,440 --> 00:32:46,230
they think that javascript is a safe

00:32:42,030 --> 00:32:49,470
investment for the future and will

00:32:46,230 --> 00:32:50,910
continue to grow and evolve and in

00:32:49,470 --> 00:32:52,470
building on their perhaps the real

00:32:50,910 --> 00:33:01,160
javascript is the friends we made along

00:32:52,470 --> 00:33:05,040
the way so having talked about why this

00:33:01,160 --> 00:33:07,620
this composition of lots of different

00:33:05,040 --> 00:33:09,720
goals has been so beneficial for

00:33:07,620 --> 00:33:11,480
JavaScript I'll now also tell you just a

00:33:09,720 --> 00:33:14,790
bit about division I've been pursuing

00:33:11,480 --> 00:33:18,390
when I joined the committee the standard

00:33:14,790 --> 00:33:22,440
JavaScript was Eknath script 3 and the

00:33:18,390 --> 00:33:24,560
committee was most of the committee was

00:33:22,440 --> 00:33:26,820
trying to standardize on ACMA script for

00:33:24,560 --> 00:33:30,840
when I joined the committee I joined the

00:33:26,820 --> 00:33:32,400
rebellion against ACMA script for one of

00:33:30,840 --> 00:33:34,420
my proudest accomplishments on the

00:33:32,400 --> 00:33:42,100
committee is helping to kill ACMA script

00:33:34,420 --> 00:33:44,920
and and the thing that we were designing

00:33:42,100 --> 00:33:47,560
instead the the the underdog was a time

00:33:44,920 --> 00:33:52,330
ACMA script 3.1 became equi script 5 a

00:33:47,560 --> 00:33:55,000
neck mascara 5 is a rare accomplishment

00:33:52,330 --> 00:33:56,940
a rare kind of accomplishment on a

00:33:55,000 --> 00:34:02,200
standards committee which is its

00:33:56,940 --> 00:34:06,130
subtractive it gives the users a better

00:34:02,200 --> 00:34:08,590
language by making it smaller and

00:34:06,130 --> 00:34:11,380
specifically the introduction of

00:34:08,590 --> 00:34:13,659
strictmode you can't break the old

00:34:11,380 --> 00:34:16,240
sloppy code but the strict mode was an

00:34:13,659 --> 00:34:19,300
opt-in to create a simpler language that

00:34:16,240 --> 00:34:21,850
was better bite because it left out so

00:34:19,300 --> 00:34:24,580
many missed features so the shirt that

00:34:21,850 --> 00:34:28,419
I'm wearing today really does express my

00:34:24,580 --> 00:34:32,230
vision which is starting from big messy

00:34:28,419 --> 00:34:36,280
JavaScript find different subsets of it

00:34:32,230 --> 00:34:38,679
that can be enforced subsets that by

00:34:36,280 --> 00:34:41,020
staying within those subsets you can

00:34:38,679 --> 00:34:42,550
have an improved developer experience

00:34:41,020 --> 00:34:45,040
you can program in a more disciplined

00:34:42,550 --> 00:34:48,399
manner you can program in a more secure

00:34:45,040 --> 00:34:50,800
manner and you can compose programs that

00:34:48,399 --> 00:34:52,560
are written separately with with less

00:34:50,800 --> 00:34:54,760
danger that the that they'll have

00:34:52,560 --> 00:34:57,340
inadvertent interference with each other

00:34:54,760 --> 00:34:59,560
so in particular I've been working

00:34:57,340 --> 00:35:02,110
towards a vision we call SES secure echo

00:34:59,560 --> 00:35:05,560
script which is one of the circles on

00:35:02,110 --> 00:35:07,990
this t-shirt on this t-shirt that's a

00:35:05,560 --> 00:35:09,400
great shirt I would like to see do you

00:35:07,990 --> 00:35:10,900
have that graphic on Twitter or

00:35:09,400 --> 00:35:12,250
somewhere where we could look for it ok

00:35:10,900 --> 00:35:16,120
I don't know that we have it on Twitter

00:35:12,250 --> 00:35:20,410
but we have it yet yeah yes it'll it'll

00:35:16,120 --> 00:35:23,080
get or something sure yeah it's Andy

00:35:20,410 --> 00:35:26,280
Jesse you repository the Jesse is the is

00:35:23,080 --> 00:35:29,320
one of these smaller languages here that

00:35:26,280 --> 00:35:30,820
we use it or gorrik it's not something

00:35:29,320 --> 00:35:34,180
we're proposing as a standard but that's

00:35:30,820 --> 00:35:35,950
worth it's graphic is found eight so a

00:35:34,180 --> 00:35:37,720
few of you mentioned having JavaScript

00:35:35,950 --> 00:35:39,940
run everywhere across different

00:35:37,720 --> 00:35:43,840
platforms and space of washing machines

00:35:39,940 --> 00:35:46,990
everywhere so because it's being

00:35:43,840 --> 00:35:48,070
targeted by so many different devices so

00:35:46,990 --> 00:35:49,600
many different compiled

00:35:48,070 --> 00:35:51,640
there's so many different things how

00:35:49,600 --> 00:35:53,920
does that affect the design at all of

00:35:51,640 --> 00:35:56,590
how you have to move forward because

00:35:53,920 --> 00:35:59,170
it's starting to be everywhere and be

00:35:56,590 --> 00:36:01,240
targeted by so many things one of the

00:35:59,170 --> 00:36:03,040
the reasons we have implementers start

00:36:01,240 --> 00:36:04,900
implementing these features at stage

00:36:03,040 --> 00:36:06,550
three is because we actually want their

00:36:04,900 --> 00:36:09,460
feedback about whether this is something

00:36:06,550 --> 00:36:11,080
that's possible in their engines because

00:36:09,460 --> 00:36:13,870
if we add a feature not every language

00:36:11,080 --> 00:36:15,430
or not every engine can actually do the

00:36:13,870 --> 00:36:18,700
feature then that's not really a feature

00:36:15,430 --> 00:36:20,260
you can't depend on it anymore so that's

00:36:18,700 --> 00:36:22,630
the reason one of the reasons we require

00:36:20,260 --> 00:36:24,250
two implementations before going to

00:36:22,630 --> 00:36:26,110
stage four is just to make sure that

00:36:24,250 --> 00:36:28,090
everyone has had time to actually look

00:36:26,110 --> 00:36:33,730
at it try to implement it and it's

00:36:28,090 --> 00:36:35,170
actually possible cool that was a

00:36:33,730 --> 00:36:39,160
concise enough answer nobody has words

00:36:35,170 --> 00:36:43,170
okay if no one else has anything to add

00:36:39,160 --> 00:36:46,090
on to that I'm so for the insole space

00:36:43,170 --> 00:36:48,160
there's sort of two places that you can

00:36:46,090 --> 00:36:49,900
do internationalization in your

00:36:48,160 --> 00:36:52,620
client-side code you can either do it in

00:36:49,900 --> 00:36:56,110
you can either ship the JavaScript

00:36:52,620 --> 00:36:58,120
directly to do the date formatting for

00:36:56,110 --> 00:37:01,480
example or you can use the browser

00:36:58,120 --> 00:37:04,090
engine so by putting this into the job

00:37:01,480 --> 00:37:06,010
into the JavaScript engine and we are

00:37:04,090 --> 00:37:07,750
actually able to make the app the

00:37:06,010 --> 00:37:09,400
JavaScript code that you have to ship a

00:37:07,750 --> 00:37:12,130
lot smaller and then that's one of the

00:37:09,400 --> 00:37:14,800
motivating factors for having insel in

00:37:12,130 --> 00:37:17,260
the standard library of the language and

00:37:14,800 --> 00:37:18,610
it's it's implemented in a separate

00:37:17,260 --> 00:37:20,260
specification so you can have a

00:37:18,610 --> 00:37:23,080
conforming JavaScript implementation

00:37:20,260 --> 00:37:24,760
without the Intel object but at least

00:37:23,080 --> 00:37:26,920
four browser applications this is a very

00:37:24,760 --> 00:37:29,440
important feature and so this is one way

00:37:26,920 --> 00:37:32,710
that we're able to provide this feature

00:37:29,440 --> 00:37:36,660
for for browser users and not

00:37:32,710 --> 00:37:39,190
necessarily require it for all

00:37:36,660 --> 00:37:43,420
implementations of ECMO to six-two which

00:37:39,190 --> 00:37:45,670
is the main language how often I know we

00:37:43,420 --> 00:37:47,620
already talked about like how features

00:37:45,670 --> 00:37:49,600
come in from from different places how

00:37:47,620 --> 00:37:52,360
often do features come in based on other

00:37:49,600 --> 00:37:54,430
languages and other things like I don't

00:37:52,360 --> 00:37:57,820
know see c-sharp

00:37:54,430 --> 00:38:00,730
Perl anything there there appears to be

00:37:57,820 --> 00:38:05,440
a lot of that recently

00:38:00,730 --> 00:38:09,100
you know c-sharp Ruby things like that

00:38:05,440 --> 00:38:12,490
that we're adding those and in a lot of

00:38:09,100 --> 00:38:14,080
cases that's syntactic sugar and we

00:38:12,490 --> 00:38:16,030
already have the capability you know

00:38:14,080 --> 00:38:17,410
think about like arrow functions we can

00:38:16,030 --> 00:38:18,700
do functions we do function for a long

00:38:17,410 --> 00:38:19,930
time but now we have arrow functions

00:38:18,700 --> 00:38:22,170
because that's one ways of people like

00:38:19,930 --> 00:38:24,880
brain functions we have another language

00:38:22,170 --> 00:38:26,410
and there's I think there's a little bit

00:38:24,880 --> 00:38:28,630
of a danger here that we have to be

00:38:26,410 --> 00:38:30,400
careful because if we take every

00:38:28,630 --> 00:38:31,780
construct in every other language that

00:38:30,400 --> 00:38:33,910
we already have some way of doing that

00:38:31,780 --> 00:38:35,050
in JavaScript we add it and so now you

00:38:33,910 --> 00:38:38,530
have multiple ways of doing the same

00:38:35,050 --> 00:38:43,770
thing it may become confusing so Ruby

00:38:38,530 --> 00:38:48,370
what's that it may become Ruby yeah so

00:38:43,770 --> 00:38:50,260
there there is a lot of genesis of ideas

00:38:48,370 --> 00:38:52,270
for JavaScript proposals for JavaScript

00:38:50,260 --> 00:38:55,540
that we see that do come from other

00:38:52,270 --> 00:38:57,550
languages and go back to the discussion

00:38:55,540 --> 00:38:59,080
earlier where there's you know people on

00:38:57,550 --> 00:39:01,630
the committee says okay this is what the

00:38:59,080 --> 00:39:03,190
syntax will look like possibly if we do

00:39:01,630 --> 00:39:05,920
this for all languages and so there's

00:39:03,190 --> 00:39:08,020
this weighing the balance of how much

00:39:05,920 --> 00:39:10,450
because mostly these are syntax kind of

00:39:08,020 --> 00:39:12,370
proposals what is the syntax budget we

00:39:10,450 --> 00:39:13,870
have you're running out of special

00:39:12,370 --> 00:39:16,390
characters and having three characters

00:39:13,870 --> 00:39:19,210
in a row for a keyword starting to get

00:39:16,390 --> 00:39:21,910
to be a little bit too much is the is

00:39:19,210 --> 00:39:24,760
this feature worth it and so that's the

00:39:21,910 --> 00:39:26,200
the discussion you have and again as

00:39:24,760 --> 00:39:27,790
much as Mark said it's not just that

00:39:26,200 --> 00:39:31,930
feature but that in collective with all

00:39:27,790 --> 00:39:36,010
the other features and one thing to add

00:39:31,930 --> 00:39:38,290
on top also the motivation may not come

00:39:36,010 --> 00:39:40,360
from other languages but I think it's

00:39:38,290 --> 00:39:41,920
definitely an important thing for us to

00:39:40,360 --> 00:39:43,960
as part of research as if we've

00:39:41,920 --> 00:39:45,520
identified a problem we look at the

00:39:43,960 --> 00:39:48,460
solutions that other languages have come

00:39:45,520 --> 00:39:50,350
up with maybe they come up with a great

00:39:48,460 --> 00:39:51,610
solution that we can copy but they may

00:39:50,350 --> 00:39:53,050
have also come up with a solution that

00:39:51,610 --> 00:39:54,100
absolutely didn't work which we can

00:39:53,050 --> 00:39:57,940
learn from and not make the same

00:39:54,100 --> 00:39:59,530
mistakes so I think that any champion

00:39:57,940 --> 00:40:03,730
who is really doing their due diligence

00:39:59,530 --> 00:40:06,760
is looking at other languages for at the

00:40:03,730 --> 00:40:08,770
very least inspiration when designing

00:40:06,760 --> 00:40:11,740
things within JavaScript the phrase

00:40:08,770 --> 00:40:15,360
prior art comes up a lot in proposals

00:40:11,740 --> 00:40:18,130
like a lot it's good

00:40:15,360 --> 00:40:20,470
well we did have a question from Twitter

00:40:18,130 --> 00:40:22,810
and the question was what is the

00:40:20,470 --> 00:40:29,290
difference between tc39 and groups like

00:40:22,810 --> 00:40:31,960
w3c there there are a number of

00:40:29,290 --> 00:40:34,180
different standards organizations that

00:40:31,960 --> 00:40:37,240
standardize different things so tc39

00:40:34,180 --> 00:40:40,210
exists with an ECMO and focuses on the

00:40:37,240 --> 00:40:41,860
core language in just the language and a

00:40:40,210 --> 00:40:44,220
really great example that can show a

00:40:41,860 --> 00:40:47,620
difference here is the console object

00:40:44,220 --> 00:40:49,780
most people myself included debug by

00:40:47,620 --> 00:40:51,130
console logging it's really easy and it

00:40:49,780 --> 00:40:55,120
works and you put emoji in there and

00:40:51,130 --> 00:40:57,190
then that works you're like oh but the

00:40:55,120 --> 00:41:00,370
JavaScript language doesn't have any

00:40:57,190 --> 00:41:04,150
sort of idea of system calls it doesn't

00:41:00,370 --> 00:41:06,010
have this idea of printing so it doesn't

00:41:04,150 --> 00:41:08,560
have any output you can execute and run

00:41:06,010 --> 00:41:10,240
things and put it out console has no

00:41:08,560 --> 00:41:11,950
place within the language if we wanted

00:41:10,240 --> 00:41:14,050
to implement console in the language

00:41:11,950 --> 00:41:16,900
we'd have to also implement like our own

00:41:14,050 --> 00:41:18,910
kernel for interacting with the the

00:41:16,900 --> 00:41:21,970
system which I don't think mark would be

00:41:18,910 --> 00:41:24,750
happy about I'll give it to you

00:41:21,970 --> 00:41:28,120
afterwards to add on that process but

00:41:24,750 --> 00:41:29,440
the console is standardized at the what

00:41:28,120 --> 00:41:31,720
working group of what working group

00:41:29,440 --> 00:41:33,760
standard is is a number of different

00:41:31,720 --> 00:41:36,430
things including the URL object and

00:41:33,760 --> 00:41:39,310
these are things that traditionally were

00:41:36,430 --> 00:41:40,660
implemented in the browser fetch is

00:41:39,310 --> 00:41:42,370
another standard that was made at what

00:41:40,660 --> 00:41:44,350
working group but you're seeing other

00:41:42,370 --> 00:41:46,510
runtimes such as node and demo and

00:41:44,350 --> 00:41:48,760
CloudFlare edge workers adopting these

00:41:46,510 --> 00:41:51,340
web standards that are not from tc39 to

00:41:48,760 --> 00:41:53,950
make part of their runtime we talked

00:41:51,340 --> 00:41:57,160
about implementers and engines that's

00:41:53,950 --> 00:41:58,840
like v8 or Jas core or SpiderMonkey

00:41:57,160 --> 00:42:01,570
these are the JavaScript engines inside

00:41:58,840 --> 00:42:03,310
of the browser's but a pro a product

00:42:01,570 --> 00:42:04,990
like Chrome is made up of a lot of

00:42:03,310 --> 00:42:06,430
different parts of which the JavaScript

00:42:04,990 --> 00:42:07,990
engine is just one there's the whole

00:42:06,430 --> 00:42:09,610
rendering layer there's everything that

00:42:07,990 --> 00:42:13,360
has to do with accessing all the system

00:42:09,610 --> 00:42:15,250
bits so w3c for example is where HTML is

00:42:13,360 --> 00:42:18,220
specified between w3c and what working

00:42:15,250 --> 00:42:20,830
group CSS is specified at w3c web

00:42:18,220 --> 00:42:23,020
assembly is specified at w3c and these

00:42:20,830 --> 00:42:24,280
organizations have a different

00:42:23,020 --> 00:42:26,260
fast-track to international

00:42:24,280 --> 00:42:27,910
standardization they have completely

00:42:26,260 --> 00:42:29,650
different governance models my

00:42:27,910 --> 00:42:31,359
standing at w3c where I've not done a

00:42:29,650 --> 00:42:33,250
ton of work is that each working group

00:42:31,359 --> 00:42:34,930
charters their own charter and operates

00:42:33,250 --> 00:42:36,910
completely differently so the CSS

00:42:34,930 --> 00:42:38,170
working group and what working group the

00:42:36,910 --> 00:42:40,569
CSS working group and webassembly

00:42:38,170 --> 00:42:42,970
working group operate completely

00:42:40,569 --> 00:42:44,500
differently I do think that especially

00:42:42,970 --> 00:42:47,500
with division that I proposed earlier

00:42:44,500 --> 00:42:49,569
there is a need now more more than ever

00:42:47,500 --> 00:42:50,980
for these various organizations to be

00:42:49,569 --> 00:42:53,140
working together and thinking about a

00:42:50,980 --> 00:42:54,430
shared division and I think an

00:42:53,140 --> 00:42:55,690
interesting problem for the next couple

00:42:54,430 --> 00:42:58,059
of years will be starting to think about

00:42:55,690 --> 00:43:00,549
like hey where are neutral spaces where

00:42:58,059 --> 00:43:02,289
we can all collaborate Michael's working

00:43:00,549 --> 00:43:04,900
on a proposal for built-in modules for

00:43:02,289 --> 00:43:06,760
example and a big question is well who

00:43:04,900 --> 00:43:08,920
owns the built-ins where do those

00:43:06,760 --> 00:43:12,490
built-ins come from how do we categorize

00:43:08,920 --> 00:43:13,990
those built-ins and you need a lot of

00:43:12,490 --> 00:43:15,609
trust between different groups if we're

00:43:13,990 --> 00:43:18,099
going to expect other people to kind of

00:43:15,609 --> 00:43:21,490
respect it and the flip side is there is

00:43:18,099 --> 00:43:23,380
a risk that if tc39 tries to specify an

00:43:21,490 --> 00:43:26,109
overstep that people won't want to

00:43:23,380 --> 00:43:27,520
implement the spec that is thankfully

00:43:26,109 --> 00:43:30,190
something that's never happened but it

00:43:27,520 --> 00:43:34,480
is a very real risk I think that every

00:43:30,190 --> 00:43:36,960
member on our committee takes the the we

00:43:34,480 --> 00:43:38,799
have a really large responsibility

00:43:36,960 --> 00:43:40,589
everything works right now because

00:43:38,799 --> 00:43:43,359
people are happy and working together

00:43:40,589 --> 00:43:44,349
but that is fragile and could fall apart

00:43:43,359 --> 00:43:52,150
if we don't take that responsibility

00:43:44,349 --> 00:43:56,410
seriously want to explain a interesting

00:43:52,150 --> 00:44:00,460
historical accident that I love story

00:43:56,410 --> 00:44:02,950
tile that that really set us up for

00:44:00,460 --> 00:44:07,359
success and we really just got lucky

00:44:02,950 --> 00:44:09,849
here the first few decades of

00:44:07,359 --> 00:44:13,900
JavaScript's existence there was only

00:44:09,849 --> 00:44:16,420
one host which was the browser and you

00:44:13,900 --> 00:44:20,529
think about a language that's only being

00:44:16,420 --> 00:44:22,539
used for one purpose and the thing that

00:44:20,529 --> 00:44:26,829
is looking back on that kind of

00:44:22,539 --> 00:44:29,619
miraculous is that the language does not

00:44:26,829 --> 00:44:32,980
have many browser concepts in it and

00:44:29,619 --> 00:44:35,740
doesn't have any browser io in it even

00:44:32,980 --> 00:44:39,250
when the language was evolving only

00:44:35,740 --> 00:44:41,530
under pressure to serve one host it did

00:44:39,250 --> 00:44:43,270
not the ballot the cut

00:44:41,530 --> 00:44:45,910
boundary between the language as

00:44:43,270 --> 00:44:49,600
computational and the host as providing

00:44:45,910 --> 00:44:52,090
IO was maintained there's I think the

00:44:49,600 --> 00:44:53,890
only explanation for this historically

00:44:52,090 --> 00:44:55,780
because people didn't appreciate that

00:44:53,890 --> 00:44:58,480
that property until there were multiple

00:44:55,780 --> 00:45:01,030
hosts historically the only explanation

00:44:58,480 --> 00:45:06,400
that I can see is what's called Conway's

00:45:01,030 --> 00:45:09,310
law Conway's law is that an organization

00:45:06,400 --> 00:45:12,520
can only create technical artifacts

00:45:09,310 --> 00:45:14,710
whose communications structure reflects

00:45:12,520 --> 00:45:19,060
the communications structure of the

00:45:14,710 --> 00:45:24,810
organization the language was under

00:45:19,060 --> 00:45:28,390
Aetna the browser was under w3c that

00:45:24,810 --> 00:45:32,080
organizational split I think more than

00:45:28,390 --> 00:45:34,120
anything is responsible for the language

00:45:32,080 --> 00:45:37,000
and the browser not getting too

00:45:34,120 --> 00:45:39,850
entangled even when nobody was viewing

00:45:37,000 --> 00:45:43,480
the lack of entanglement as a virtue

00:45:39,850 --> 00:45:46,660
that needed to be maintained that's a

00:45:43,480 --> 00:45:48,790
really cool story because I didn't I

00:45:46,660 --> 00:45:50,620
didn't know about the separation as much

00:45:48,790 --> 00:45:52,420
until you started talking about it and

00:45:50,620 --> 00:45:55,000
that was great well we are slowly

00:45:52,420 --> 00:45:57,400
running out of time one last thing

00:45:55,000 --> 00:46:03,160
do any of you have a favorite JavaScript

00:45:57,400 --> 00:46:05,680
joke one at one of my favorites for

00:46:03,160 --> 00:46:09,910
example not that I had any other ready

00:46:05,680 --> 00:46:11,950
or anything was there was a developer

00:46:09,910 --> 00:46:14,320
that said hey what is this and the other

00:46:11,950 --> 00:46:18,670
developer said oh I tried to call about

00:46:14,320 --> 00:46:24,400
it earlier but I was in a bind what is

00:46:18,670 --> 00:46:30,370
this bind call okay anyway do you y'all

00:46:24,400 --> 00:46:34,170
have any others yes dude do you want to

00:46:30,370 --> 00:46:34,170
hear an asynchronous joke yes

00:46:34,840 --> 00:46:37,929
[Music]

00:46:38,060 --> 00:46:53,460
kid you promised okay one and how do you

00:46:48,260 --> 00:46:55,840
fix a jog javascript bug you can soul it

00:46:53,460 --> 00:46:59,090
[Laughter]

00:46:55,840 --> 00:47:00,970
well I think with that we're done thank

00:46:59,090 --> 00:47:02,530
you all so much

00:47:00,970 --> 00:47:08,309
this is awesome

00:47:02,530 --> 00:47:08,309

YouTube URL: https://www.youtube.com/watch?v=7UmhSRWQq9M


