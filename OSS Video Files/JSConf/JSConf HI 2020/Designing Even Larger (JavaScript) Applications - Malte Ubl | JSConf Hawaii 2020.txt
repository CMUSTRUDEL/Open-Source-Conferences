Title: Designing Even Larger (JavaScript) Applications - Malte Ubl | JSConf Hawaii 2020
Publication date: 2020-03-09
Playlist: JSConf HI 2020
Description: 
	This talk in blog post form: https://www.industrialempathy.com/posts/designing-even-larger-applications/

Building frameworks is fun. And even if your project is using one of the awesome open-source frameworks, it might at some point reach the point where you need just a little bit more software infrastructure then you find on npm: Things may start with a custom build script and end with your own full blown framework.

But building frameworks is also difficult. And many folks might have read the first paragraph thinking “That is us, but I wish we had something clean, stable and most importantly standard instead”.

In this sequel to the popular “Designing very large (JavaScript) applications” talk, we’ll take a deep look at the principles of framework design and how we can apply them to build better software. We’ll look at how to go about designing a framework, how to ensure that developers like it, and how to make sure that systems get into a clean and stable state as quickly as possible.

Prequel Talk: https://www.youtube.com/watch?v=ZZmUwXEiPm4
Prequel Transcript: https://medium.com/@cramforce/designing-very-large-javascript-applications-6e013a3291a3

JSConf Hawaii will return in 2021
https://www.jsconfhi.com/
Captions: 
	00:00:08,490 --> 00:00:13,000
today I want to talk about designing

00:00:11,020 --> 00:00:15,550
even larger

00:00:13,000 --> 00:00:18,360
is actually a sequel to talk I gave a

00:00:15,550 --> 00:00:21,430
jessica of Australia two years ago and

00:00:18,360 --> 00:00:24,220
just like that last time I want to kind

00:00:21,430 --> 00:00:26,290
of ground this talk in our career

00:00:24,220 --> 00:00:28,300
progression as software engineers

00:00:26,290 --> 00:00:30,220
I think many of you in the audience

00:00:28,300 --> 00:00:32,710
would maybe call yourself a senior self

00:00:30,220 --> 00:00:35,470
engineer or if you're not there yet you

00:00:32,710 --> 00:00:37,330
aspire to be one and so the way I would

00:00:35,470 --> 00:00:39,580
describe what it means to be seen

00:00:37,330 --> 00:00:41,860
yourself engineer is that if someone

00:00:39,580 --> 00:00:43,809
comes to me and they say like hey you

00:00:41,860 --> 00:00:45,670
know I'm out to do this project in this

00:00:43,809 --> 00:00:47,920
domain that you already filming you with

00:00:45,670 --> 00:00:49,360
you would say yeah that's actually

00:00:47,920 --> 00:00:51,160
something I know how to do I don't need

00:00:49,360 --> 00:00:53,140
to need anyone else's help

00:00:51,160 --> 00:00:55,840
I'm a senior person I know how to do it

00:00:53,140 --> 00:00:58,239
and then this was kind of the series of

00:00:55,840 --> 00:01:00,399
my last remark was going beyond that and

00:00:58,239 --> 00:01:02,320
with that software engineering lens but

00:01:00,399 --> 00:01:05,229
I'm not talking so much about people but

00:01:02,320 --> 00:01:06,640
still you kind of transcend beyond

00:01:05,229 --> 00:01:08,530
yourself right it doesn't

00:01:06,640 --> 00:01:11,050
the only looking at solving problems

00:01:08,530 --> 00:01:12,910
yourself you're looking at how can i as

00:01:11,050 --> 00:01:14,649
a software engineer anticipate our

00:01:12,910 --> 00:01:16,149
others two things and then design api's

00:01:14,649 --> 00:01:17,710
accordingly so that they are more

00:01:16,149 --> 00:01:20,770
successful right so I think that is

00:01:17,710 --> 00:01:23,890
really beyond seniority in this talk

00:01:20,770 --> 00:01:26,979
today I want to go one level beyond that

00:01:23,890 --> 00:01:30,340
I want to breach this stage where I can

00:01:26,979 --> 00:01:32,799
say I can design software such that for

00:01:30,340 --> 00:01:35,200
loops of engineers the probability

00:01:32,799 --> 00:01:38,470
increases that the suffer that they

00:01:35,200 --> 00:01:40,330
produce is good now there are three key

00:01:38,470 --> 00:01:42,159
words here first of all large groups of

00:01:40,330 --> 00:01:43,930
engineers so if you're working to

00:01:42,159 --> 00:01:46,030
startup or like a three-person company

00:01:43,930 --> 00:01:49,270
then this talk may seem superfluous

00:01:46,030 --> 00:01:51,369
boring and extra like not something you

00:01:49,270 --> 00:01:54,369
care about but I think many of you may

00:01:51,369 --> 00:01:56,619
be working insurance companies bangs or

00:01:54,369 --> 00:01:59,079
anything right like wherever you have a

00:01:56,619 --> 00:01:59,860
bunch of folks and multiple teams and

00:01:59,079 --> 00:02:02,680
you kind of kinda need to coordinate

00:01:59,860 --> 00:02:04,659
stuff then I'm talking about probability

00:02:02,680 --> 00:02:06,909
there's no security here right you can

00:02:04,659 --> 00:02:09,790
only try to set things up so they'll

00:02:06,909 --> 00:02:12,760
probably work but there's no guarantees

00:02:09,790 --> 00:02:15,370
there's no silver bullets finally I want

00:02:12,760 --> 00:02:16,959
to talk about good stuff here so this is

00:02:15,370 --> 00:02:18,940
not a product management

00:02:16,959 --> 00:02:21,970
all right this talk will not help you

00:02:18,940 --> 00:02:25,180
write the right program but it will help

00:02:21,970 --> 00:02:27,580
you write that program good so what I

00:02:25,180 --> 00:02:29,680
mean is it being maintainable high

00:02:27,580 --> 00:02:31,900
performance having low buck density

00:02:29,680 --> 00:02:33,400
being delivered on time that type of

00:02:31,900 --> 00:02:35,980
stuff right these qualities that

00:02:33,400 --> 00:02:39,550
transcend the product aspect of software

00:02:35,980 --> 00:02:41,050
engineering I want to clarify one more

00:02:39,550 --> 00:02:44,140
thing I'm gonna say stuff like

00:02:41,050 --> 00:02:45,910
frameworks software infrastructure other

00:02:44,140 --> 00:02:48,459
stuff like that all the time I kind of

00:02:45,910 --> 00:02:51,550
treat them interchangeably what I mean

00:02:48,459 --> 00:02:53,890
is kind of suffer that we are building

00:02:51,550 --> 00:02:56,410
that helps other people build better

00:02:53,890 --> 00:02:58,930
software and what I would like you all

00:02:56,410 --> 00:03:00,640
to kind of put your mind into like

00:02:58,930 --> 00:03:03,790
you're the person in your company who's

00:03:00,640 --> 00:03:06,160
responsible for kind of defining how

00:03:03,790 --> 00:03:07,750
people write software and then write the

00:03:06,160 --> 00:03:10,360
infrastructure the software that they

00:03:07,750 --> 00:03:12,310
are using to write software and when I

00:03:10,360 --> 00:03:14,860
say you build a framework but I don't

00:03:12,310 --> 00:03:16,540
mean that you make your own react or

00:03:14,860 --> 00:03:17,470
angular right maybe that's actually the

00:03:16,540 --> 00:03:18,940
right way to do it but it's not

00:03:17,470 --> 00:03:22,000
necessary right I think whenever you

00:03:18,940 --> 00:03:23,500
have a larger set of teams you want to

00:03:22,000 --> 00:03:25,209
kind of standardize how they build

00:03:23,500 --> 00:03:26,920
applications and that kind of puts a

00:03:25,209 --> 00:03:29,019
framework around how people buy build

00:03:26,920 --> 00:03:30,459
applications so that's what I mean again

00:03:29,019 --> 00:03:33,220
like think about you being the person

00:03:30,459 --> 00:03:36,010
who's responsible for this and then this

00:03:33,220 --> 00:03:38,379
talk is about how you are successful at

00:03:36,010 --> 00:03:40,870
that job and I'm going to talk about

00:03:38,379 --> 00:03:42,670
that in three chapters the first one I

00:03:40,870 --> 00:03:44,590
call understanding the degree of

00:03:42,670 --> 00:03:47,769
uncertainty then we're going to learn

00:03:44,590 --> 00:03:49,360
how to solve all known problems and then

00:03:47,769 --> 00:03:52,569
final are we going to learn about

00:03:49,360 --> 00:03:54,640
deploying change cool let's dive right

00:03:52,569 --> 00:03:56,140
in with our friends or in our Heisenberg

00:03:54,640 --> 00:03:57,629
telling us that this is actually

00:03:56,140 --> 00:03:59,650
impossible

00:03:57,629 --> 00:04:03,340
understanding the degree of uncertainty

00:03:59,650 --> 00:04:05,860
how far are we that what's actually

00:04:03,340 --> 00:04:08,590
needed to be done is the thing that's

00:04:05,860 --> 00:04:10,510
needed to be done that is absolutely key

00:04:08,590 --> 00:04:13,060
for self engineering I'm going to talk

00:04:10,510 --> 00:04:16,150
about a technique to kind of understand

00:04:13,060 --> 00:04:18,459
how well we understand things for that

00:04:16,150 --> 00:04:20,260
we need to understand the problem space

00:04:18,459 --> 00:04:22,120
really well and understand how well we

00:04:20,260 --> 00:04:23,919
understand this sorry about the busy

00:04:22,120 --> 00:04:26,590
slides these are just a few questions

00:04:23,919 --> 00:04:29,169
basically and the answers aren't even

00:04:26,590 --> 00:04:31,120
that important but ask yourself what is

00:04:29,169 --> 00:04:32,919
what is it in the existing

00:04:31,120 --> 00:04:35,169
infrastructure that your users and your

00:04:32,919 --> 00:04:37,000
users or developers what are they

00:04:35,169 --> 00:04:39,310
struggling with and how are they

00:04:37,000 --> 00:04:40,540
struggling with it what is the class of

00:04:39,310 --> 00:04:42,910
applications that folk

00:04:40,540 --> 00:04:44,830
we'll built using your work and kind of

00:04:42,910 --> 00:04:47,260
bra terms what are the trends in the

00:04:44,830 --> 00:04:49,120
industry that influence what type of

00:04:47,260 --> 00:04:50,050
software is probably going to be written

00:04:49,120 --> 00:04:51,400
in the future

00:04:50,050 --> 00:04:55,030
right because infrastructure is always

00:04:51,400 --> 00:04:58,090
for future software now all of these you

00:04:55,030 --> 00:05:00,910
know may sound like reading the tea

00:04:58,090 --> 00:05:02,110
leaves but I think usually you know if

00:05:00,910 --> 00:05:04,240
you've been doing this for a while you

00:05:02,110 --> 00:05:07,000
actually might have answers and so the

00:05:04,240 --> 00:05:09,670
key here is really you do this exercise

00:05:07,000 --> 00:05:11,560
to understand like how well can you

00:05:09,670 --> 00:05:13,390
answer this right that's really the key

00:05:11,560 --> 00:05:14,890
like if this is like really easy and you

00:05:13,390 --> 00:05:17,050
write it down and everything is clear

00:05:14,890 --> 00:05:18,430
that's one side or the other side is

00:05:17,050 --> 00:05:21,400
like no I actually have no idea how they

00:05:18,430 --> 00:05:23,590
answer this question I know nothing even

00:05:21,400 --> 00:05:26,890
more powerful than knowing what people

00:05:23,590 --> 00:05:29,920
want to do is what they don't want to do

00:05:26,890 --> 00:05:32,260
so these are non goals so what are non

00:05:29,920 --> 00:05:33,520
goals non goals aren't you know let's

00:05:32,260 --> 00:05:37,750
say you work for a manufacturing company

00:05:33,520 --> 00:05:40,210
and you don't need to like build an

00:05:37,750 --> 00:05:41,020
insurance piece of software right that's

00:05:40,210 --> 00:05:42,610
not an ondol

00:05:41,020 --> 00:05:44,290
that's ridiculous of course you don't

00:05:42,610 --> 00:05:46,390
want to do this right an on goal is

00:05:44,290 --> 00:05:48,280
something that it's actually super

00:05:46,390 --> 00:05:49,630
reasonable and even likely that you want

00:05:48,280 --> 00:05:51,700
to do it but you know you don't want to

00:05:49,630 --> 00:05:54,880
do it right like it's not a requirement

00:05:51,700 --> 00:05:56,740
and so this might even be more difficult

00:05:54,880 --> 00:05:58,810
than answering and like if you if you're

00:05:56,740 --> 00:06:01,000
able to answer these questions that can

00:05:58,810 --> 00:06:04,780
be very powerful you know the degree of

00:06:01,000 --> 00:06:07,540
uncertainty is low so why why is

00:06:04,780 --> 00:06:09,880
uncertainty so so so important when

00:06:07,540 --> 00:06:11,860
uncertainty is hot you're gonna have to

00:06:09,880 --> 00:06:14,110
make trade-offs you need to be flexible

00:06:11,860 --> 00:06:15,610
right you need to say okay I need to I

00:06:14,110 --> 00:06:17,230
don't know whether I need to support

00:06:15,610 --> 00:06:19,300
this so I better make it that it's

00:06:17,230 --> 00:06:20,380
possible right and whenever you're in

00:06:19,300 --> 00:06:22,780
that situation

00:06:20,380 --> 00:06:25,960
you need to make trade-offs right so

00:06:22,780 --> 00:06:28,390
trade-offs are situations where you need

00:06:25,960 --> 00:06:30,430
to kind of square to things and make

00:06:28,390 --> 00:06:31,570
them both possible and probably end up

00:06:30,430 --> 00:06:33,490
with something that's not quite as

00:06:31,570 --> 00:06:36,880
awesome is something that only needs do

00:06:33,490 --> 00:06:40,810
one of those two things and the problem

00:06:36,880 --> 00:06:43,210
with trade-offs is that they make stuff

00:06:40,810 --> 00:06:46,030
difficult and when you have unnecessary

00:06:43,210 --> 00:06:47,380
trade-offs that really breaks software

00:06:46,030 --> 00:06:49,720
engineering like software engineering

00:06:47,380 --> 00:06:52,120
hates unnecessary trade-off and it's the

00:06:49,720 --> 00:06:53,100
root of all evil what is an example for

00:06:52,120 --> 00:06:55,680
this let's say

00:06:53,100 --> 00:06:58,500
in your company you built this

00:06:55,680 --> 00:07:00,450
infrastructure for mobile apps and you

00:06:58,500 --> 00:07:02,130
anticipate that you know if maybe the

00:07:00,450 --> 00:07:03,930
salespeople they have old crappy Android

00:07:02,130 --> 00:07:05,730
phones with low memory and so you need

00:07:03,930 --> 00:07:07,560
to make it such that everything works in

00:07:05,730 --> 00:07:09,030
the whole memory situation and to design

00:07:07,560 --> 00:07:11,190
the software frameworks such as

00:07:09,030 --> 00:07:12,960
everyone's going and like needs to kit

00:07:11,190 --> 00:07:15,120
worry about memory and manage it and

00:07:12,960 --> 00:07:16,560
like all that stuff right and then it

00:07:15,120 --> 00:07:17,790
turns out your company goes and buys

00:07:16,560 --> 00:07:19,890
never on your phone and that was

00:07:17,790 --> 00:07:21,360
completely for nothing right that's an

00:07:19,890 --> 00:07:23,010
unnecessary trade-off but it's now much

00:07:21,360 --> 00:07:24,570
more difficult to write software in your

00:07:23,010 --> 00:07:27,710
system because it's in theory possible

00:07:24,570 --> 00:07:30,030
to run in these lower power devices and

00:07:27,710 --> 00:07:31,950
so interestingly this is a bit of a

00:07:30,030 --> 00:07:34,170
generalization of Donald Knuth famous

00:07:31,950 --> 00:07:34,830
theorem premature optimization is the

00:07:34,170 --> 00:07:36,750
root of all evil

00:07:34,830 --> 00:07:38,730
right so premature optimization is just

00:07:36,750 --> 00:07:40,830
a special case of an unnecessary

00:07:38,730 --> 00:07:43,110
trade-off but it doesn't only have to be

00:07:40,830 --> 00:07:44,520
about performance every time you make

00:07:43,110 --> 00:07:45,930
your software do something that it

00:07:44,520 --> 00:07:48,150
doesn't need to do you made an

00:07:45,930 --> 00:07:49,620
unnecessary trade-off in the baseline of

00:07:48,150 --> 00:07:53,640
software design that can be really

00:07:49,620 --> 00:07:55,230
really fatal cool so I think that's a

00:07:53,640 --> 00:07:56,820
bit of a web development conference I

00:07:55,230 --> 00:08:01,020
wanted to have one slide about web

00:07:56,820 --> 00:08:03,390
development we have been doing web

00:08:01,020 --> 00:08:05,880
frameworks for a few years right like

00:08:03,390 --> 00:08:07,980
it's been over 20 years now and we

00:08:05,880 --> 00:08:10,020
actually understand how to build web

00:08:07,980 --> 00:08:12,030
frameworks really well and if we don't

00:08:10,020 --> 00:08:13,650
and if we do a bad job it's our fault

00:08:12,030 --> 00:08:14,280
but it's not because we don't understand

00:08:13,650 --> 00:08:16,320
how to do this

00:08:14,280 --> 00:08:18,870
maybe we personally like the experience

00:08:16,320 --> 00:08:20,670
but we could do a really good job right

00:08:18,870 --> 00:08:22,260
so that's that's where the degree of

00:08:20,670 --> 00:08:24,900
uncertainty is actually quite low like

00:08:22,260 --> 00:08:27,480
we know how to build web apps on the

00:08:24,900 --> 00:08:30,390
other hand imagine it's 2015 and your

00:08:27,480 --> 00:08:32,729
mother comes and says hey I want you to

00:08:30,390 --> 00:08:34,710
build infrastructure for building deep

00:08:32,729 --> 00:08:36,750
learning and you're like well I have

00:08:34,710 --> 00:08:38,430
never done this before like no one in my

00:08:36,750 --> 00:08:40,890
company has ever done it before there's

00:08:38,430 --> 00:08:42,900
like three blog posts about it then the

00:08:40,890 --> 00:08:44,310
degree of uncertainty is really high

00:08:42,900 --> 00:08:46,320
right and you won't be able to build

00:08:44,310 --> 00:08:49,680
infrastructure that's quite as nice

00:08:46,320 --> 00:08:51,360
right and so obviously it's always going

00:08:49,680 --> 00:08:52,590
to be a range between like we understand

00:08:51,360 --> 00:08:55,020
this really well we don't understand it

00:08:52,590 --> 00:08:56,940
at all but it's really important in

00:08:55,020 --> 00:08:58,830
software engineering that you can deal

00:08:56,940 --> 00:09:00,540
with uncertainty right there's always

00:08:58,830 --> 00:09:03,750
going to be something that you don't

00:09:00,540 --> 00:09:05,920
know and they need to be able to live in

00:09:03,750 --> 00:09:10,010
that in that space

00:09:05,920 --> 00:09:12,350
so the reason why it's so important to

00:09:10,010 --> 00:09:15,080
understand the degree of uncertainty is

00:09:12,350 --> 00:09:16,850
because it allows us to then tailor the

00:09:15,080 --> 00:09:20,360
application to that concerning to you

00:09:16,850 --> 00:09:23,780
and the way we do it is by tailoring the

00:09:20,360 --> 00:09:26,030
degree of abstraction how abstract are

00:09:23,780 --> 00:09:28,210
we making stuff for our developers and

00:09:26,030 --> 00:09:30,590
let me get something out of the way

00:09:28,210 --> 00:09:32,390
abstractions are awesome you want to

00:09:30,590 --> 00:09:35,240
abstract everything as much as possible

00:09:32,390 --> 00:09:36,680
because abstractions make it really

00:09:35,240 --> 00:09:38,000
expressive he can do exactly what you

00:09:36,680 --> 00:09:39,650
want it's really fast you don't have to

00:09:38,000 --> 00:09:43,490
write as much code everything's great

00:09:39,650 --> 00:09:45,020
right except when that abstraction is

00:09:43,490 --> 00:09:48,800
the wrong abstraction that gets in your

00:09:45,020 --> 00:09:50,180
way right you go in that abstraction

00:09:48,800 --> 00:09:52,190
doesn't do what you want so you have to

00:09:50,180 --> 00:09:54,350
work around it you have to like kind of

00:09:52,190 --> 00:09:56,150
beat to it and like make it do what you

00:09:54,350 --> 00:09:57,890
want and everything is painful and

00:09:56,150 --> 00:10:00,740
terrible and not what you want right

00:09:57,890 --> 00:10:03,770
like that's that's bad so if you

00:10:00,740 --> 00:10:05,840
understand how well you understand the

00:10:03,770 --> 00:10:07,280
problem space you can tailor the

00:10:05,840 --> 00:10:10,250
abstraction to that degree of

00:10:07,280 --> 00:10:12,710
uncertainty and if you think you know I

00:10:10,250 --> 00:10:15,170
don't actually understand that so well

00:10:12,710 --> 00:10:16,700
you will reduce the degree of

00:10:15,170 --> 00:10:18,230
abstraction right so that's that's

00:10:16,700 --> 00:10:20,570
really the key how well do you

00:10:18,230 --> 00:10:22,220
understand what you need to do if you

00:10:20,570 --> 00:10:24,440
don't understand it do City grab

00:10:22,220 --> 00:10:29,240
subsection wait wait do you agree that's

00:10:24,440 --> 00:10:32,330
that's her kind of the random picture

00:10:29,240 --> 00:10:35,180
anyway cool so kind of the summary here

00:10:32,330 --> 00:10:37,160
being like go take the time to

00:10:35,180 --> 00:10:40,640
understand how well you know things and

00:10:37,160 --> 00:10:43,160
then tailor stuff towards it again it's

00:10:40,640 --> 00:10:45,650
always going to be the case that we have

00:10:43,160 --> 00:10:47,300
to deal with some uncertainty so it's

00:10:45,650 --> 00:10:50,210
really useful that there's a set of

00:10:47,300 --> 00:10:52,220
techniques that's always good we can

00:10:50,210 --> 00:10:54,560
solve all known problems in software

00:10:52,220 --> 00:10:57,380
engineering I'm going to present four

00:10:54,560 --> 00:10:59,420
techniques to do this again no matter

00:10:57,380 --> 00:11:03,040
how little you know you always want to

00:10:59,420 --> 00:11:06,740
do these four things the first one is

00:11:03,040 --> 00:11:09,590
optimizing iteration velocity so we're

00:11:06,740 --> 00:11:11,660
the mean with this is developer and you

00:11:09,590 --> 00:11:14,450
hit safe in your editor how long does it

00:11:11,660 --> 00:11:15,860
take to go from that moment until you

00:11:14,450 --> 00:11:18,950
find out whether that was a good change

00:11:15,860 --> 00:11:21,769
right and there's on one hand you have

00:11:18,950 --> 00:11:23,839
the super awesome hot coat really don't

00:11:21,769 --> 00:11:26,570
su type everything updates on screen

00:11:23,839 --> 00:11:28,519
magic and the other hand you like

00:11:26,570 --> 00:11:30,440
manually go to the console Kindle your

00:11:28,519 --> 00:11:31,760
job or application server recompile

00:11:30,440 --> 00:11:33,589
everything it takes 20 minutes to

00:11:31,760 --> 00:11:35,600
startup right that's kind of the the

00:11:33,589 --> 00:11:37,760
range and I think probably many of you

00:11:35,600 --> 00:11:41,740
can feel with me you've been somewhere

00:11:37,760 --> 00:11:44,600
between these these two two extremes now

00:11:41,740 --> 00:11:47,269
that's obviously nice for something to

00:11:44,600 --> 00:11:49,490
be fast but the reality is slow

00:11:47,269 --> 00:11:52,519
iteration cycles actually introduce

00:11:49,490 --> 00:11:55,370
trade-offs into our software design if

00:11:52,519 --> 00:11:56,360
it takes a long time to find out that

00:11:55,370 --> 00:11:59,120
you've made a mistake

00:11:56,360 --> 00:12:01,610
mistakes are expensive as a software

00:11:59,120 --> 00:12:03,050
designer the professional thing to do is

00:12:01,610 --> 00:12:05,600
them to go and say like I have to design

00:12:03,050 --> 00:12:07,490
this API so that no one can ever get it

00:12:05,600 --> 00:12:08,839
wrong in their usage right because if

00:12:07,490 --> 00:12:11,209
they get it wrong it's so expensive

00:12:08,839 --> 00:12:13,639
right so how do you even do that that

00:12:11,209 --> 00:12:15,800
nobody can misuse your API it's really

00:12:13,639 --> 00:12:17,690
difficult right so if on the other hand

00:12:15,800 --> 00:12:20,360
everything's super fast people can

00:12:17,690 --> 00:12:22,160
explore explore stuff do things you know

00:12:20,360 --> 00:12:24,920
figure things out because the cost of

00:12:22,160 --> 00:12:26,930
failure is so low then you as a designer

00:12:24,920 --> 00:12:29,060
of that API can say okay maybe it's fine

00:12:26,930 --> 00:12:33,350
for people to do a bit more exploring

00:12:29,060 --> 00:12:37,910
here so the message is make iteration

00:12:33,350 --> 00:12:40,699
cycles fast very similar is the aspect

00:12:37,910 --> 00:12:43,970
of debug ability so it's a framework

00:12:40,699 --> 00:12:46,279
author it's actually in your hand to you

00:12:43,970 --> 00:12:46,850
know control how hard it is to debug a

00:12:46,279 --> 00:12:49,640
system

00:12:46,850 --> 00:12:51,860
maybe you design this like awesome but

00:12:49,640 --> 00:12:53,750
like complex blackbox state machine that

00:12:51,860 --> 00:12:56,600
no one can figure out it's just random

00:12:53,750 --> 00:12:58,449
things sometimes the right ones but

00:12:56,600 --> 00:13:01,430
sometimes not but nobody knows why right

00:12:58,449 --> 00:13:04,279
maybe your stack traces are super long

00:13:01,430 --> 00:13:05,959
and confuse people or maybe on the other

00:13:04,279 --> 00:13:07,579
side you put in this like really

00:13:05,959 --> 00:13:09,410
sensible logging and tracing framework

00:13:07,579 --> 00:13:11,899
and people understand what's going on

00:13:09,410 --> 00:13:16,040
they make a mistake it's fine they're

00:13:11,899 --> 00:13:18,470
you know they fix it no problem similar

00:13:16,040 --> 00:13:21,940
to debug ability you're in control of

00:13:18,470 --> 00:13:21,940
how testable your system is

00:13:26,470 --> 00:13:31,370
like maybe in your framework it's really

00:13:29,180 --> 00:13:33,590
difficult to instantiate a system to the

00:13:31,370 --> 00:13:35,180
state where then someone goes and write

00:13:33,590 --> 00:13:37,580
a unit test right or maybe it's really

00:13:35,180 --> 00:13:40,160
easy and if it's easy to test the system

00:13:37,580 --> 00:13:42,980
someone can go and like make sure what

00:13:40,160 --> 00:13:45,620
they did is right and you know again

00:13:42,980 --> 00:13:46,790
it's much easier to write to built in

00:13:45,620 --> 00:13:51,050
that system without understanding

00:13:46,790 --> 00:13:53,390
everything so well cool we don't have

00:13:51,050 --> 00:13:55,910
three topics that are more only like

00:13:53,390 --> 00:13:58,510
software side of the world the fourth

00:13:55,910 --> 00:14:00,080
topic for solving all known problems is

00:13:58,510 --> 00:14:04,760
slightly different

00:14:00,080 --> 00:14:06,290
it's empathy so as engineers and

00:14:04,760 --> 00:14:08,660
software engineers who build software

00:14:06,290 --> 00:14:10,880
for software engineers I mentioned this

00:14:08,660 --> 00:14:12,920
in my last talk that's really empathy on

00:14:10,880 --> 00:14:14,510
easy mode right like we can understand

00:14:12,920 --> 00:14:17,180
how other software engineers field we

00:14:14,510 --> 00:14:19,190
run ourselves much more likely that our

00:14:17,180 --> 00:14:21,290
own intuition is actually the right one

00:14:19,190 --> 00:14:23,480
that if we try to have empathy with like

00:14:21,290 --> 00:14:25,010
a some more random person who we don't

00:14:23,480 --> 00:14:26,810
understand or we don't know their

00:14:25,010 --> 00:14:29,990
background right that's really helpful

00:14:26,810 --> 00:14:33,110
and can do really well today I want to

00:14:29,990 --> 00:14:35,660
talk about a very special aspect of

00:14:33,110 --> 00:14:38,240
empathy if you're designer of a

00:14:35,660 --> 00:14:39,620
framework you could build the perfect

00:14:38,240 --> 00:14:42,320
application with it right you know

00:14:39,620 --> 00:14:43,550
everything about it you can do get

00:14:42,320 --> 00:14:46,400
everything right it's like very little

00:14:43,550 --> 00:14:48,650
code everything is perfect but every

00:14:46,400 --> 00:14:51,650
other person who will ever use it will

00:14:48,650 --> 00:14:53,960
know less about it right and so think

00:14:51,650 --> 00:14:55,490
about what it means to not know

00:14:53,960 --> 00:14:57,980
everything about a piece of software

00:14:55,490 --> 00:15:00,589
right think about how you can make an

00:14:57,980 --> 00:15:03,740
API robust towards not knowing

00:15:00,589 --> 00:15:05,600
everything and you know their end result

00:15:03,740 --> 00:15:10,700
will be that people will just be much

00:15:05,600 --> 00:15:12,740
happier users of your application cool

00:15:10,700 --> 00:15:15,770
so now we learned how to solve all known

00:15:12,740 --> 00:15:17,450
problems of software engineering let's

00:15:15,770 --> 00:15:23,720
go to the final chapter which is

00:15:17,450 --> 00:15:26,660
deploying change the so this is really

00:15:23,720 --> 00:15:28,670
really really key what I like to say

00:15:26,660 --> 00:15:31,010
that you know software infrastructure

00:15:28,670 --> 00:15:33,920
that has no usage has no impact which

00:15:31,010 --> 00:15:34,790
seems obvious right but it's so common

00:15:33,920 --> 00:15:36,680
in this field

00:15:34,790 --> 00:15:38,089
the people built ivory towers right

00:15:36,680 --> 00:15:40,670
where you have a team and they go in

00:15:38,089 --> 00:15:42,380
like they've built something awesome and

00:15:40,670 --> 00:15:45,290
they're really excited about it and you

00:15:42,380 --> 00:15:47,029
know it being fun to build it was

00:15:45,290 --> 00:15:49,040
probably a reason why they did it and

00:15:47,029 --> 00:15:50,990
then they come and say like hey I have a

00:15:49,040 --> 00:15:53,360
thing and you're like but that doesn't

00:15:50,990 --> 00:15:56,329
do what I want right and then everyone's

00:15:53,360 --> 00:15:58,610
sad and they move on to the next ivory

00:15:56,329 --> 00:16:00,170
tower right so if you want to

00:15:58,610 --> 00:16:01,880
professionalize this that is not the

00:16:00,170 --> 00:16:03,889
right way to do it right getting your

00:16:01,880 --> 00:16:07,459
stuff adopted is everything and it's a

00:16:03,889 --> 00:16:10,070
big part of your job so much though that

00:16:07,459 --> 00:16:12,800
my first advice for how to get this

00:16:10,070 --> 00:16:16,190
right is actually totally in the realm

00:16:12,800 --> 00:16:18,079
of marketing right so software engineers

00:16:16,190 --> 00:16:21,230
again they're human beings they want to

00:16:18,079 --> 00:16:23,870
work on stuff that's cool and that they

00:16:21,230 --> 00:16:27,920
heard about on Twitter and that's

00:16:23,870 --> 00:16:29,959
exciting right so it's fine to go and

00:16:27,920 --> 00:16:32,389
put the stuff they want in your

00:16:29,959 --> 00:16:33,949
infrastructure right like they they all

00:16:32,389 --> 00:16:35,630
like it more and then they use it more

00:16:33,949 --> 00:16:37,310
and everyone's happy and if that's not

00:16:35,630 --> 00:16:42,260
the worst unnecessary trade-off in the

00:16:37,310 --> 00:16:44,029
world then it's just okay right cool so

00:16:42,260 --> 00:16:47,269
that's more on the marketing side let's

00:16:44,029 --> 00:16:50,870
go to some bit more serious topic which

00:16:47,269 --> 00:16:53,810
is that adopting software is easier if

00:16:50,870 --> 00:16:56,269
you can do incremental adoption what

00:16:53,810 --> 00:16:57,949
this means is that instead of going like

00:16:56,269 --> 00:16:59,990
Haley's new framework rewrite everything

00:16:57,949 --> 00:17:02,630
from scratch in two years and hopefully

00:16:59,990 --> 00:17:05,839
it's good to make incremental progress

00:17:02,630 --> 00:17:07,339
as you kind of work on it like have

00:17:05,839 --> 00:17:11,480
something after months after something

00:17:07,339 --> 00:17:13,730
after two months you know and and you

00:17:11,480 --> 00:17:15,230
know I think basically even if you start

00:17:13,730 --> 00:17:16,880
with that major rewrite at some point

00:17:15,230 --> 00:17:18,650
someone's gonna say like we need to have

00:17:16,880 --> 00:17:20,750
something in production alright we can't

00:17:18,650 --> 00:17:23,179
go on like this where we kind of do

00:17:20,750 --> 00:17:25,459
everything twice for like that whole

00:17:23,179 --> 00:17:26,660
period of time right so this is really

00:17:25,459 --> 00:17:29,179
something that if you want your stuff

00:17:26,660 --> 00:17:32,780
adopted it's a key that you allow for

00:17:29,179 --> 00:17:34,640
incremental adoption first technique

00:17:32,780 --> 00:17:36,440
here is really concrete just think about

00:17:34,640 --> 00:17:39,590
two different scenarios

00:17:36,440 --> 00:17:42,260
the first is composition of your new

00:17:39,590 --> 00:17:43,850
framework code into a legacy code let's

00:17:42,260 --> 00:17:45,830
say you haven't gotten around to like

00:17:43,850 --> 00:17:48,470
rewriting the app shell yet everything's

00:17:45,830 --> 00:17:49,820
still kind of the old way you did it

00:17:48,470 --> 00:17:52,039
but the team comes and says I'm going to

00:17:49,820 --> 00:17:54,440
build that you feature in the new

00:17:52,039 --> 00:17:56,299
framework and so your framework is

00:17:54,440 --> 00:17:58,639
designed such that they can kind of live

00:17:56,299 --> 00:18:01,039
inside the old codebase right that's

00:17:58,639 --> 00:18:02,470
composition into legacy code and then

00:18:01,039 --> 00:18:05,690
there's the other side which is

00:18:02,470 --> 00:18:08,000
composition of legacy code into your

00:18:05,690 --> 00:18:10,450
codebase let's say you have is like

00:18:08,000 --> 00:18:14,990
super ultra customized business-critical

00:18:10,450 --> 00:18:16,789
jQuery datepicker right and and and

00:18:14,990 --> 00:18:19,549
people want to have it right and they

00:18:16,789 --> 00:18:21,950
want to keep it and so you you design

00:18:19,549 --> 00:18:24,470
your framework such that that jQuery

00:18:21,950 --> 00:18:26,509
thing which probably valid and violates

00:18:24,470 --> 00:18:28,970
all the assumptions you ever made still

00:18:26,509 --> 00:18:31,370
works right that is composition of

00:18:28,970 --> 00:18:33,409
legacy code if your new code base both

00:18:31,370 --> 00:18:35,840
of these things put trade-off pressure

00:18:33,409 --> 00:18:38,120
on your system because suddenly all

00:18:35,840 --> 00:18:40,940
these all these assumptions are no

00:18:38,120 --> 00:18:42,259
longer valid but but it's probably worth

00:18:40,940 --> 00:18:46,460
it because it allows people to

00:18:42,259 --> 00:18:48,879
incrementally adopt your software second

00:18:46,460 --> 00:18:51,889
technique I call temporary imperfection

00:18:48,879 --> 00:18:53,750
so again as a framework author you

00:18:51,889 --> 00:18:56,210
probably have this like really idealized

00:18:53,750 --> 00:18:58,279
view of the world like how people build

00:18:56,210 --> 00:19:01,009
software using your thing and then it

00:18:58,279 --> 00:19:02,960
comes crashing down in thing when people

00:19:01,009 --> 00:19:05,720
do incremental adoption because not

00:19:02,960 --> 00:19:08,120
everything is great so my advice would

00:19:05,720 --> 00:19:10,220
be to do the following write a Lynch

00:19:08,120 --> 00:19:12,710
rule using is Lind or something like

00:19:10,220 --> 00:19:15,740
that that identifies the old way of

00:19:12,710 --> 00:19:18,019
doing something right and then when

00:19:15,740 --> 00:19:20,299
someone when there's code in the code

00:19:18,019 --> 00:19:21,139
base that isn't not the new way you get

00:19:20,299 --> 00:19:22,519
an error message

00:19:21,139 --> 00:19:24,200
hopefully that error message also says

00:19:22,519 --> 00:19:25,759
you know this is no longer the right way

00:19:24,200 --> 00:19:28,429
of doing it here are pointers to

00:19:25,759 --> 00:19:30,769
documentation how to do it right that's

00:19:28,429 --> 00:19:34,340
step one you have this lint rule step

00:19:30,769 --> 00:19:37,100
two is to then go and allow all existing

00:19:34,340 --> 00:19:38,360
violations saying okay here's like 500

00:19:37,100 --> 00:19:41,000
times where people do it wrong

00:19:38,360 --> 00:19:43,850
it's all fine right like these are all

00:19:41,000 --> 00:19:47,870
allowed now you're in a state where all

00:19:43,850 --> 00:19:49,700
new code has to comply with a new way of

00:19:47,870 --> 00:19:50,840
doing it and this is really powerful

00:19:49,700 --> 00:19:52,399
because there might be all these

00:19:50,840 --> 00:19:54,559
engineers in your organization who

00:19:52,399 --> 00:19:56,240
haven't really read the email where they

00:19:54,559 --> 00:19:57,799
were told that they need to do something

00:19:56,240 --> 00:19:58,909
differently they haven't come to your

00:19:57,799 --> 00:20:00,139
talk right

00:19:58,909 --> 00:20:02,240
but these know they get an error message

00:20:00,139 --> 00:20:04,790
and they are ok cool I can I can do it

00:20:02,240 --> 00:20:06,020
you weigh right it's really powerful the

00:20:04,790 --> 00:20:08,570
other thing that's kind of interesting

00:20:06,020 --> 00:20:09,950
inside said this allow list which you've

00:20:08,570 --> 00:20:12,710
probably checked into your git

00:20:09,950 --> 00:20:15,020
repository it's a lecture of technical

00:20:12,710 --> 00:20:17,630
debt right technical depth can be this

00:20:15,020 --> 00:20:20,660
like abstract concept that you know you

00:20:17,630 --> 00:20:23,360
have and it's probably out there

00:20:20,660 --> 00:20:25,790
somewhere but like really difficult to

00:20:23,360 --> 00:20:28,190
nail down where it is right but this is

00:20:25,790 --> 00:20:29,720
loudest like you literally know in file

00:20:28,190 --> 00:20:32,210
X line 15

00:20:29,720 --> 00:20:34,370
there's my technical debt right and now

00:20:32,210 --> 00:20:36,380
you can pay it off you can maybe have a

00:20:34,370 --> 00:20:37,940
you know team fix it where you say like

00:20:36,380 --> 00:20:39,500
one week we're just going to go at this

00:20:37,940 --> 00:20:41,540
list and like it's gonna be gone after

00:20:39,500 --> 00:20:42,530
that week and we're all happy right so

00:20:41,540 --> 00:20:45,410
that's really I think it's a powerful

00:20:42,530 --> 00:20:46,730
way to think about like materializing

00:20:45,410 --> 00:20:48,830
technical debt is something that's like

00:20:46,730 --> 00:20:52,750
very concrete just like depth on your

00:20:48,830 --> 00:20:56,090
bank account you have this modest cool

00:20:52,750 --> 00:20:59,300
next technique which is key for for

00:20:56,090 --> 00:21:01,730
getting my adoption is to try for

00:20:59,300 --> 00:21:03,770
automated migration right it's not gonna

00:21:01,730 --> 00:21:04,460
get you all the way but it's pretty

00:21:03,770 --> 00:21:06,140
powerful

00:21:04,460 --> 00:21:07,910
this for example GS code shift from

00:21:06,140 --> 00:21:09,440
Facebook but basically you're kind of

00:21:07,910 --> 00:21:11,210
described a pattern this is the old way

00:21:09,440 --> 00:21:16,640
visiting your way you get from her from

00:21:11,210 --> 00:21:19,880
A to B it's great again this is possibly

00:21:16,640 --> 00:21:22,070
problematic right it puts trait of

00:21:19,880 --> 00:21:24,620
pressure on your on your new API because

00:21:22,070 --> 00:21:26,870
now the new API has to basically be

00:21:24,620 --> 00:21:28,820
happy with what was already in the code

00:21:26,870 --> 00:21:31,429
but it can't really add new stuff in

00:21:28,820 --> 00:21:33,860
this mechanism but it might be worth it

00:21:31,429 --> 00:21:35,420
because you know no one has to do that

00:21:33,860 --> 00:21:37,250
work manually it's probably going to

00:21:35,420 --> 00:21:41,330
make people more happy than having to do

00:21:37,250 --> 00:21:44,059
everything by themselves alright moving

00:21:41,330 --> 00:21:46,190
on from these like more software things

00:21:44,059 --> 00:21:49,520
it's like a little bit more about humans

00:21:46,190 --> 00:21:52,010
I think the one thing I would like to

00:21:49,520 --> 00:21:56,000
take everyone away from this talk is

00:21:52,010 --> 00:21:57,890
that when you're in this role of being

00:21:56,000 --> 00:22:00,530
like the person responsible for the

00:21:57,890 --> 00:22:02,390
software infrastructure you always need

00:22:00,530 --> 00:22:04,250
a customer zero right that is what's

00:22:02,390 --> 00:22:08,150
going to that's the antidote to the

00:22:04,250 --> 00:22:09,440
ivory tower the customer zero what it's

00:22:08,150 --> 00:22:11,240
going to happen is they're going to be

00:22:09,440 --> 00:22:12,980
the first customer we're going to who's

00:22:11,240 --> 00:22:15,240
going to use your thing and build a real

00:22:12,980 --> 00:22:17,070
product and what you need to do is you

00:22:15,240 --> 00:22:18,600
go and sit with them to pay programming

00:22:17,070 --> 00:22:20,970
or not like but at least be there and

00:22:18,600 --> 00:22:23,309
like go build it with them right this is

00:22:20,970 --> 00:22:24,510
before you declare it you're done right

00:22:23,309 --> 00:22:27,120
because now you can validate your

00:22:24,510 --> 00:22:29,309
assumption you can find corner cases and

00:22:27,120 --> 00:22:30,809
you can help like you can iterate on

00:22:29,309 --> 00:22:34,350
your framework until it's actually good

00:22:30,809 --> 00:22:36,450
it might not have been there right now

00:22:34,350 --> 00:22:37,830
this first customer should not be a

00:22:36,450 --> 00:22:39,390
migration speech chump it should be

00:22:37,830 --> 00:22:40,950
something you build from scratch because

00:22:39,390 --> 00:22:42,390
when you know migrations are always

00:22:40,950 --> 00:22:44,040
gonna be somewhat painful and long

00:22:42,390 --> 00:22:45,360
winding and you know why would you

00:22:44,040 --> 00:22:46,950
migrate to something that might not even

00:22:45,360 --> 00:22:49,830
be what you want yet right so you need

00:22:46,950 --> 00:22:51,360
quick feedback cycles at that point but

00:22:49,830 --> 00:22:53,059
this will be really crucial to really

00:22:51,360 --> 00:22:56,220
ensure that what you're building is good

00:22:53,059 --> 00:22:58,320
another important piece of advice is one

00:22:56,220 --> 00:23:00,000
of the ironic things is that if you

00:22:58,320 --> 00:23:01,170
never build anything with your thing how

00:23:00,000 --> 00:23:03,750
do you even build right the

00:23:01,170 --> 00:23:05,820
documentation for how to build something

00:23:03,750 --> 00:23:07,440
with it right like how to how to how to

00:23:05,820 --> 00:23:08,970
write the onboarding dog to start from

00:23:07,440 --> 00:23:11,760
scratch if you've never done it right so

00:23:08,970 --> 00:23:13,890
if you go and have a customer's ear and

00:23:11,760 --> 00:23:15,480
you work with them that's the one time

00:23:13,890 --> 00:23:17,400
chance you really get to write that

00:23:15,480 --> 00:23:18,410
onboarding dog right so don't don't miss

00:23:17,400 --> 00:23:20,910
it

00:23:18,410 --> 00:23:23,910
now because there's all that kind of

00:23:20,910 --> 00:23:26,070
designed for large organizations there's

00:23:23,910 --> 00:23:28,740
gonna be some organizational challenges

00:23:26,070 --> 00:23:30,270
is finding a customers you're right you

00:23:28,740 --> 00:23:32,670
might not find that team that's like

00:23:30,270 --> 00:23:35,190
cool with working with it's unproven

00:23:32,670 --> 00:23:38,610
unstable and like probably not even good

00:23:35,190 --> 00:23:41,700
piece of framework right so what do you

00:23:38,610 --> 00:23:44,850
do to get that customer zero that that's

00:23:41,700 --> 00:23:47,280
the right one for you what I've found is

00:23:44,850 --> 00:23:49,170
that there's typically a team that likes

00:23:47,280 --> 00:23:51,410
to be on the cutting edge right one of

00:23:49,170 --> 00:23:53,700
the things you can pitch is to say hey

00:23:51,410 --> 00:23:56,490
you'll eventually have to migrate to

00:23:53,700 --> 00:23:58,020
this because that's the future why don't

00:23:56,490 --> 00:24:00,480
you want to be on the new thing already

00:23:58,020 --> 00:24:02,220
so you save that step right that could

00:24:00,480 --> 00:24:04,290
be very attractive for it to him and you

00:24:02,220 --> 00:24:06,809
can argue because I'm gonna sit with you

00:24:04,290 --> 00:24:09,120
I'm gonna actually tailor or make this

00:24:06,809 --> 00:24:11,520
framework to do what you want right you

00:24:09,120 --> 00:24:13,350
were you're privileged over any future

00:24:11,520 --> 00:24:15,900
user who will just have to kind of deal

00:24:13,350 --> 00:24:17,970
with what what it is because I'm going

00:24:15,900 --> 00:24:19,140
to like realize okay it's not perfect

00:24:17,970 --> 00:24:20,640
for this use case and I'm gonna make it

00:24:19,140 --> 00:24:22,530
perfect right this can be really

00:24:20,640 --> 00:24:26,340
powerful even considering all the

00:24:22,530 --> 00:24:28,380
downsides now maybe that doesn't work in

00:24:26,340 --> 00:24:28,650
that case your organization has to be

00:24:28,380 --> 00:24:30,720
made

00:24:28,650 --> 00:24:32,340
mature enough to accept that we will

00:24:30,720 --> 00:24:34,830
have to be a mandate right there will

00:24:32,340 --> 00:24:38,640
have to be the time or you say you

00:24:34,830 --> 00:24:40,770
actually have to use this right and and

00:24:38,640 --> 00:24:42,840
that can be can be confusing for

00:24:40,770 --> 00:24:45,570
organization but it's so important

00:24:42,840 --> 00:24:46,800
because if you have it the alternative

00:24:45,570 --> 00:24:48,300
is that the infrastructure team is just

00:24:46,800 --> 00:24:49,710
going to go and build ivory towers and

00:24:48,300 --> 00:24:51,450
everyone's unhappy right so yeah well

00:24:49,710 --> 00:24:53,670
it's still better to mandate that

00:24:51,450 --> 00:24:57,060
somewhat to use yourself dock for your

00:24:53,670 --> 00:24:58,560
stuff and not doing it all all right we

00:24:57,060 --> 00:25:01,580
have our first customer eventually you

00:24:58,560 --> 00:25:05,490
will have to do the first migration and

00:25:01,580 --> 00:25:07,380
once again it's actually your job to do

00:25:05,490 --> 00:25:09,030
this migration together with that team

00:25:07,380 --> 00:25:11,190
that actually wants to do it so they're

00:25:09,030 --> 00:25:13,350
migrating to your framework the reason

00:25:11,190 --> 00:25:15,840
why it's so key that you do this

00:25:13,350 --> 00:25:17,700
yourself is you have that point B that's

00:25:15,840 --> 00:25:19,050
the future to your framework and you

00:25:17,700 --> 00:25:22,170
have to point a that's where the team is

00:25:19,050 --> 00:25:25,140
right if you're not there that team will

00:25:22,170 --> 00:25:26,730
go and say hey I need to go to point B

00:25:25,140 --> 00:25:28,440
it's difficult but I'll figure it out

00:25:26,730 --> 00:25:30,000
they kind of take it as god given like

00:25:28,440 --> 00:25:32,580
because they take your infrastructure

00:25:30,000 --> 00:25:33,750
it's kind of being there right you can

00:25:32,580 --> 00:25:35,910
be like hmm

00:25:33,750 --> 00:25:38,010
I could make that one change here and

00:25:35,910 --> 00:25:39,660
would be so much easier and because I

00:25:38,010 --> 00:25:42,030
have this all in my head I know what

00:25:39,660 --> 00:25:43,260
what's possible to change and because

00:25:42,030 --> 00:25:44,430
you're a lazy person you're gonna make

00:25:43,260 --> 00:25:46,650
that migration you're really easy and

00:25:44,430 --> 00:25:50,270
that is going to help everyone who comes

00:25:46,650 --> 00:25:52,950
after you have a much better time right

00:25:50,270 --> 00:25:54,660
cool these were the things I want to

00:25:52,950 --> 00:25:56,670
talk about just let me summarize really

00:25:54,660 --> 00:25:59,150
quick the first thing we need to do is

00:25:56,670 --> 00:26:02,130
we understand the problem space and then

00:25:59,150 --> 00:26:04,620
tailor our abstractions to that degree

00:26:02,130 --> 00:26:07,650
of uncertainty even if uncertainty is

00:26:04,620 --> 00:26:09,270
high we want to solve all known problems

00:26:07,650 --> 00:26:11,550
you might remember that increase

00:26:09,270 --> 00:26:13,500
interracial velocity make the ability

00:26:11,550 --> 00:26:15,810
great testability great and have an

00:26:13,500 --> 00:26:18,240
empathy with your users and then finally

00:26:15,810 --> 00:26:21,120
nothing here matters if you don't focus

00:26:18,240 --> 00:26:23,370
on team adoption pick yourself a likable

00:26:21,120 --> 00:26:26,510
focus on incremental adoption and get

00:26:23,370 --> 00:26:28,860
those customer a migration zero folks

00:26:26,510 --> 00:26:30,909
that's all I had today thank you very

00:26:28,860 --> 00:26:32,970
much

00:26:30,909 --> 00:26:32,970

YouTube URL: https://www.youtube.com/watch?v=z4mRkhhHdWo


