Title: Custom Hooks in React: The Ultimate UI Abstraction Layer - Tanner Linsley | JSConf Hawaii 2020
Publication date: 2020-03-29
Playlist: JSConf HI 2020
Description: 
	Custom Hooks in React are useful for much more than just managing the local state and one-dimensional side-effects you see in almost every React Hooks example.

They can be used to build sophisticated memoization pipelines and chained-effects that automatically manage local and network resources.

But most importantly, they provide a new new layer of abstraction to accomplish new and amazing patterns that we couldn't have just over a year ago.

On the surface, this abstraction layer is simply collection of custom hooks, but when unlocked, it can be the most powerful piece of your application architecture.

JSConf Hawaii will return soon
https://www.jsconfhi.com/
Captions: 
	00:00:08,510 --> 00:00:15,410
so like I said my name is Tanner Linsley

00:00:11,600 --> 00:00:20,540
from Utah and I love JavaScript so much

00:00:15,410 --> 00:00:22,360
I also love react even more I'm happy to

00:00:20,540 --> 00:00:25,460
be able to talk about react at a

00:00:22,360 --> 00:00:27,650
JavaScript conference I'm on github

00:00:25,460 --> 00:00:29,330
probably way too much writing way too

00:00:27,650 --> 00:00:30,590
many open-source libraries I'm also on

00:00:29,330 --> 00:00:33,739
Twitter and YouTube so you can come say

00:00:30,590 --> 00:00:35,900
hi to me there if you want I know that

00:00:33,739 --> 00:00:41,870
you're all probably feeling like you

00:00:35,900 --> 00:00:44,420
can't see my screen yeah you're probably

00:00:41,870 --> 00:00:48,470
feeling a little bit like my son here

00:00:44,420 --> 00:00:49,940
you know just really tired and wanting

00:00:48,470 --> 00:00:55,400
to consume that last little bit of

00:00:49,940 --> 00:00:57,320
JavaScript just do your best you know

00:00:55,400 --> 00:01:00,040
that it's I know it's hard but we're

00:00:57,320 --> 00:01:03,290
gonna make it through it together

00:01:00,040 --> 00:01:05,330
because today I'm talking about react

00:01:03,290 --> 00:01:08,119
hooks and more specifically custom react

00:01:05,330 --> 00:01:08,990
hooks and I'm so excited about this I

00:01:08,119 --> 00:01:11,810
hope you are too

00:01:08,990 --> 00:01:15,440
I know it's been a noisy year you guys

00:01:11,810 --> 00:01:17,030
probably feel like whether you're

00:01:15,440 --> 00:01:19,580
whether you love react or not you

00:01:17,030 --> 00:01:20,990
probably feel this way so I'm gonna do

00:01:19,580 --> 00:01:23,140
my best today to make sure that this is

00:01:20,990 --> 00:01:25,880
not just another react hoaxes tutorial

00:01:23,140 --> 00:01:28,130
it's going to be fast because I have a

00:01:25,880 --> 00:01:30,860
lot of content to go over and there's

00:01:28,130 --> 00:01:33,380
going to be a lot of code hopefully it's

00:01:30,860 --> 00:01:37,220
a lot of fun I'm gonna be saying use a

00:01:33,380 --> 00:01:40,790
lot so it's hard it's a tongue twister

00:01:37,220 --> 00:01:43,280
you'll see so before we get into my the

00:01:40,790 --> 00:01:46,580
bulk of my talk let's go through react

00:01:43,280 --> 00:01:48,320
hooks basics really quickly classes are

00:01:46,580 --> 00:01:49,850
out we no longer write with classes

00:01:48,320 --> 00:01:51,950
everything is just a function now and

00:01:49,850 --> 00:01:53,720
that is so nice it makes us so that

00:01:51,950 --> 00:01:56,060
components that used to look like this

00:01:53,720 --> 00:01:58,610
to use state don't have to look like

00:01:56,060 --> 00:02:01,159
that anymore we can just use use state

00:01:58,610 --> 00:02:03,440
it's so much better in my opinion where

00:02:01,159 --> 00:02:05,720
we can use use reducer class life cycles

00:02:03,440 --> 00:02:08,300
are no longer a thing oh I'm so glad to

00:02:05,720 --> 00:02:09,920
be done with these things also we don't

00:02:08,300 --> 00:02:10,670
have to do manual change detection

00:02:09,920 --> 00:02:13,010
anymore

00:02:10,670 --> 00:02:14,959
with the old class life cycles we can

00:02:13,010 --> 00:02:17,060
just use the use of fact function from

00:02:14,959 --> 00:02:18,760
react passes some dependencies and

00:02:17,060 --> 00:02:20,959
everything will just synchronize for us

00:02:18,760 --> 00:02:21,980
it also comes built-in with memoization

00:02:20,959 --> 00:02:24,050
and can

00:02:21,980 --> 00:02:26,599
to state and things around memorizing

00:02:24,050 --> 00:02:28,190
values and functions where before we

00:02:26,599 --> 00:02:30,590
could do this with react before but now

00:02:28,190 --> 00:02:32,629
it's built in so we can make sure that

00:02:30,590 --> 00:02:36,950
we're only computing or doing work when

00:02:32,629 --> 00:02:38,180
we need to be doing it and last the most

00:02:36,950 --> 00:02:40,370
important thing that I'd like to talk

00:02:38,180 --> 00:02:42,019
about today is custom hooks which a

00:02:40,370 --> 00:02:44,120
custom hook is really just a function

00:02:42,019 --> 00:02:47,599
that runs inside of a component that can

00:02:44,120 --> 00:02:49,250
run other hooks or other functions like

00:02:47,599 --> 00:02:51,049
use state use reduce or whatever and

00:02:49,250 --> 00:02:52,879
they can be recursive they can go

00:02:51,049 --> 00:02:54,200
forever you can have a custom hook call

00:02:52,879 --> 00:02:55,900
another custom hook calling it a custom

00:02:54,200 --> 00:02:58,370
hook call another custom hook and

00:02:55,900 --> 00:02:59,660
everything will just come back in and it

00:02:58,370 --> 00:03:02,090
just works it's amazing

00:02:59,660 --> 00:03:03,890
it makes us so patterns like this that

00:03:02,090 --> 00:03:05,120
before we had to nest all these

00:03:03,890 --> 00:03:07,430
callbacks and create higher-order

00:03:05,120 --> 00:03:09,290
components and render props and you know

00:03:07,430 --> 00:03:12,500
functions as children all that gets to

00:03:09,290 --> 00:03:14,150
go away and we're simply left with a

00:03:12,500 --> 00:03:15,980
couple of function calls that we can

00:03:14,150 --> 00:03:18,680
make inside of our inside of our

00:03:15,980 --> 00:03:21,379
components custom hooks are so powerful

00:03:18,680 --> 00:03:23,120
I believe that they give us a couple

00:03:21,379 --> 00:03:26,690
more affordances that we didn't have

00:03:23,120 --> 00:03:28,549
when we were using class components I

00:03:26,690 --> 00:03:30,049
think that they encouraged us to build

00:03:28,549 --> 00:03:31,910
our own solutions because it makes

00:03:30,049 --> 00:03:35,329
building our own solutions easier the

00:03:31,910 --> 00:03:38,000
API is more expressive I also believe

00:03:35,329 --> 00:03:39,980
that building hook's custom hooks way

00:03:38,000 --> 00:03:41,840
more portable and shareable than

00:03:39,980 --> 00:03:44,239
building custom components and trying to

00:03:41,840 --> 00:03:45,769
move logic around with components the

00:03:44,239 --> 00:03:48,709
other great thing is that custom hooks

00:03:45,769 --> 00:03:50,269
can be component aware and abstract

00:03:48,709 --> 00:03:52,669
essentially anything that we want them

00:03:50,269 --> 00:03:54,799
to this makes them very powerful for

00:03:52,669 --> 00:03:56,480
integrating with essentially anything we

00:03:54,799 --> 00:03:59,000
want to integrate with the outset in the

00:03:56,480 --> 00:04:01,040
outside world away from react and last

00:03:59,000 --> 00:04:03,260
but not least I think that they highly

00:04:01,040 --> 00:04:04,190
encourage rapid iteration for some of

00:04:03,260 --> 00:04:08,840
the reasons that I'm going to talk about

00:04:04,190 --> 00:04:10,280
today so the biggest reason that I

00:04:08,840 --> 00:04:13,790
believe that all those things are true

00:04:10,280 --> 00:04:16,400
is that hooks they with the introduction

00:04:13,790 --> 00:04:19,209
of custom hooks I think that we're going

00:04:16,400 --> 00:04:21,709
to see or have already seen a return to

00:04:19,209 --> 00:04:24,710
components handling user interface and

00:04:21,709 --> 00:04:26,449
hooks handling business logic and if

00:04:24,710 --> 00:04:27,940
this seems like a no-brainer you're

00:04:26,449 --> 00:04:30,110
ahead of the curve and if it doesn't

00:04:27,940 --> 00:04:32,690
that's what I'd like to talk about today

00:04:30,110 --> 00:04:34,990
through so many migrations of old

00:04:32,690 --> 00:04:37,480
projects to hooks going 100

00:04:34,990 --> 00:04:38,920
hooks and new greenfield projects where

00:04:37,480 --> 00:04:41,740
I was able to experiment with new

00:04:38,920 --> 00:04:43,750
patterns around custom hooks and see you

00:04:41,740 --> 00:04:46,510
know how far can we push the limits of

00:04:43,750 --> 00:04:50,440
this new API I've discovered a couple of

00:04:46,510 --> 00:04:53,680
use cases that have really sparked new

00:04:50,440 --> 00:04:55,930
interest for me with this hooks API

00:04:53,680 --> 00:04:59,410
most of them around building portable UI

00:04:55,930 --> 00:05:01,600
utilities a few of them well actually a

00:04:59,410 --> 00:05:05,440
lot of them around managing global state

00:05:01,600 --> 00:05:07,180
and server state and also encapsulating

00:05:05,440 --> 00:05:10,750
business logic for our applications

00:05:07,180 --> 00:05:12,010
inside of these custom hooks and I want

00:05:10,750 --> 00:05:14,650
to share with you a couple of these use

00:05:12,010 --> 00:05:17,170
cases today to show you how custom hooks

00:05:14,650 --> 00:05:20,080
can really change the way that you think

00:05:17,170 --> 00:05:22,540
about writing your applications and to

00:05:20,080 --> 00:05:25,240
be more productive why not start off

00:05:22,540 --> 00:05:27,970
with something that is so hot right now

00:05:25,240 --> 00:05:29,350
you can't ship an app without it and

00:05:27,970 --> 00:05:31,090
it's sometimes it's the first thing that

00:05:29,350 --> 00:05:32,350
we all think about probably the most

00:05:31,090 --> 00:05:37,450
important thing we all think about

00:05:32,350 --> 00:05:40,150
that's dark mode you can't ship without

00:05:37,450 --> 00:05:42,310
it right this is so hot right now

00:05:40,150 --> 00:05:43,810
everybody wants a dark mode you know

00:05:42,310 --> 00:05:45,070
everybody's got that toggle at the top

00:05:43,810 --> 00:05:48,400
of their site you go between light and

00:05:45,070 --> 00:05:49,840
dark mode it's pretty easy to do you can

00:05:48,400 --> 00:05:53,170
just set up some state and toggle

00:05:49,840 --> 00:05:55,330
between it with a function set is dark

00:05:53,170 --> 00:05:56,680
to true or false it's really that easy I

00:05:55,330 --> 00:05:59,710
wanted something a little more

00:05:56,680 --> 00:06:02,230
sophisticated for my dark mode I don't

00:05:59,710 --> 00:06:06,670
know if you guys have ever seen

00:06:02,230 --> 00:06:10,030
match media but it's an API that you can

00:06:06,670 --> 00:06:12,730
use to match CSS media queries in

00:06:10,030 --> 00:06:14,230
JavaScript and detect certain things

00:06:12,730 --> 00:06:16,180
about the users environment right here

00:06:14,230 --> 00:06:17,680
we have a match media that's detecting

00:06:16,180 --> 00:06:19,600
whether the user prefers a light or a

00:06:17,680 --> 00:06:22,450
dark theme and we can actually set up

00:06:19,600 --> 00:06:24,040
our state to start with that so that if

00:06:22,450 --> 00:06:26,230
the user has a darker light theme

00:06:24,040 --> 00:06:28,180
preference on their device our state now

00:06:26,230 --> 00:06:30,610
starts with that preference and they can

00:06:28,180 --> 00:06:33,370
toggle between it but who has this

00:06:30,610 --> 00:06:36,820
enabled on their computer this auto mode

00:06:33,370 --> 00:06:38,650
I do and I love it and I thought

00:06:36,820 --> 00:06:41,230
wouldn't it be amazing if we could make

00:06:38,650 --> 00:06:43,840
it so our light and dark themes would

00:06:41,230 --> 00:06:46,300
actually react to that automatic mode on

00:06:43,840 --> 00:06:48,340
our devices turns out it's not too hard

00:06:46,300 --> 00:06:50,290
we can take an effect and

00:06:48,340 --> 00:06:51,970
put our match media inside it and listen

00:06:50,290 --> 00:06:54,669
to changes to that match media and

00:06:51,970 --> 00:06:57,490
update our dark variable whenever that

00:06:54,669 --> 00:06:59,650
changes and if we put all that together

00:06:57,490 --> 00:07:01,660
inside of our app right here it's all

00:06:59,650 --> 00:07:03,550
just handled for us now the Sun sets we

00:07:01,660 --> 00:07:05,500
go into dark mode the Sun rises we go

00:07:03,550 --> 00:07:08,229
into light mode it's actually pretty fun

00:07:05,500 --> 00:07:09,990
to play with but the problem I see here

00:07:08,229 --> 00:07:12,639
is that a lot of this logic is now

00:07:09,990 --> 00:07:14,530
taking up space in my app component and

00:07:12,639 --> 00:07:17,560
I don't really like that talking about

00:07:14,530 --> 00:07:19,870
clean code opinions here but this I see

00:07:17,560 --> 00:07:21,820
is a great example of where we can make

00:07:19,870 --> 00:07:24,280
our first custom hook we can actually

00:07:21,820 --> 00:07:26,860
just take all that logic and rip it out

00:07:24,280 --> 00:07:28,780
into its own file we'll call it use dark

00:07:26,860 --> 00:07:30,430
mode and everything in here is exactly

00:07:28,780 --> 00:07:33,130
the same except for we're returning is

00:07:30,430 --> 00:07:35,290
dark at the very end and that makes this

00:07:33,130 --> 00:07:37,750
use dark mode hook extremely versatile

00:07:35,290 --> 00:07:39,789
in our app now we can import that file

00:07:37,750 --> 00:07:41,860
call use dark mode and it's going to

00:07:39,789 --> 00:07:42,550
give us true or false but it's not just

00:07:41,860 --> 00:07:44,350
true or false

00:07:42,550 --> 00:07:46,000
it's true or false that changes over

00:07:44,350 --> 00:07:48,100
time and all of the lifecycle and

00:07:46,000 --> 00:07:50,440
updating and all of the intelligence of

00:07:48,100 --> 00:07:51,940
that dark mode is built into that hook

00:07:50,440 --> 00:07:54,900
and all we have to do is call it and

00:07:51,940 --> 00:07:58,590
that is our first custom hood for today

00:07:54,900 --> 00:07:58,590
that's when everybody gloves

00:08:00,940 --> 00:08:04,060
so the next thing that I thought every

00:08:03,100 --> 00:08:05,620
application needs

00:08:04,060 --> 00:08:07,750
everybody has written this a thousand

00:08:05,620 --> 00:08:09,910
times clicking outside of an element and

00:08:07,750 --> 00:08:11,800
I don't know why the browser's don't

00:08:09,910 --> 00:08:13,360
make it easier to do this Nate natively

00:08:11,800 --> 00:08:15,400
but you know I feel like I'm

00:08:13,360 --> 00:08:18,340
implementing this every day clicking

00:08:15,400 --> 00:08:19,750
outside of a menu or a modal or whatever

00:08:18,340 --> 00:08:21,850
right and then you want to do something

00:08:19,750 --> 00:08:23,290
to it I thought what about you know

00:08:21,850 --> 00:08:25,750
there's not a better excuse to write a

00:08:23,290 --> 00:08:26,950
custom component for this and I thought

00:08:25,750 --> 00:08:28,450
we might as well just make the

00:08:26,950 --> 00:08:31,630
assumption that this is going to be a

00:08:28,450 --> 00:08:34,210
custom hook right out of the gate so I

00:08:31,630 --> 00:08:37,030
assumed that I could take a ref created

00:08:34,210 --> 00:08:40,240
by user F put it on to whatever element

00:08:37,030 --> 00:08:41,560
I want to keep track of and then have a

00:08:40,240 --> 00:08:43,150
handle or something like you know

00:08:41,560 --> 00:08:45,310
console logging hey you clicked outside

00:08:43,150 --> 00:08:47,530
of this thing and I could pass those two

00:08:45,310 --> 00:08:49,930
things to this used click outside hook

00:08:47,530 --> 00:08:51,610
and it would just work and I wrote this

00:08:49,930 --> 00:08:54,310
actually before I wrote the use click

00:08:51,610 --> 00:08:56,740
outside hook to see how reliable it was

00:08:54,310 --> 00:08:58,930
to design API surround hooks before even

00:08:56,740 --> 00:09:00,370
writing him it turns out it wasn't too

00:08:58,930 --> 00:09:04,360
difficult we start with the function

00:09:00,370 --> 00:09:06,370
signature we throw in an effect that's

00:09:04,360 --> 00:09:07,720
going to set up our event listeners on

00:09:06,370 --> 00:09:10,120
the document for when we click on the

00:09:07,720 --> 00:09:11,590
document those call our internal

00:09:10,120 --> 00:09:13,330
listener here that checks to see if the

00:09:11,590 --> 00:09:15,250
target we clicked is inside of the

00:09:13,330 --> 00:09:18,370
element that we're tracking and if it

00:09:15,250 --> 00:09:21,640
isn't it calls our callback turns out it

00:09:18,370 --> 00:09:23,860
just works and we would probably use

00:09:21,640 --> 00:09:27,130
this for a little bit and think wow this

00:09:23,860 --> 00:09:28,840
is great I'm a genius but eventually you

00:09:27,130 --> 00:09:30,870
might notice something very strange

00:09:28,840 --> 00:09:34,930
there's something fishy going on here

00:09:30,870 --> 00:09:36,340
and it has to do with the use effects

00:09:34,930 --> 00:09:37,780
dependencies now if you're using the

00:09:36,340 --> 00:09:39,580
eslint plugin react hooks which you

00:09:37,780 --> 00:09:41,620
should be 99% of the time it does

00:09:39,580 --> 00:09:44,230
exactly what you want it to it auto

00:09:41,620 --> 00:09:46,900
fills affected dependencies for your

00:09:44,230 --> 00:09:49,300
hooks it's so helpful I love it you can

00:09:46,900 --> 00:09:51,010
just hit save and if you have a yes

00:09:49,300 --> 00:09:53,320
let's setup it will just do the changes

00:09:51,010 --> 00:09:54,790
for you and that's what it did here when

00:09:53,320 --> 00:09:56,290
we built our hook here on the right you

00:09:54,790 --> 00:09:59,020
can see it automatically filled in the

00:09:56,290 --> 00:10:01,089
callback and the L ref down there in our

00:09:59,020 --> 00:10:03,400
dependencies but the problem is that the

00:10:01,089 --> 00:10:05,290
callback is changing every single render

00:10:03,400 --> 00:10:06,850
from where we're using it on the left

00:10:05,290 --> 00:10:08,860
side here on click outside we're

00:10:06,850 --> 00:10:10,270
creating it every single time which

00:10:08,860 --> 00:10:12,670
means that those event listeners are

00:10:10,270 --> 00:10:14,410
firing off every single time that we

00:10:12,670 --> 00:10:17,829
render we're adding and removing

00:10:14,410 --> 00:10:19,329
event listeners that is not cool well it

00:10:17,829 --> 00:10:21,790
turns out it's pretty easy to just wrap

00:10:19,329 --> 00:10:23,079
that and use call back from react and

00:10:21,790 --> 00:10:25,029
it's going to make it so that that

00:10:23,079 --> 00:10:27,069
callback function doesn't change unless

00:10:25,029 --> 00:10:29,079
the dependencies change there are no

00:10:27,069 --> 00:10:30,879
dependencies yet so nothing's going to

00:10:29,079 --> 00:10:32,649
change and it will stop you know

00:10:30,879 --> 00:10:35,199
creating those event listeners over and

00:10:32,649 --> 00:10:37,180
over and over but this begs the question

00:10:35,199 --> 00:10:40,449
for me why why do I have to have that

00:10:37,180 --> 00:10:42,610
use callback around that function this

00:10:40,449 --> 00:10:45,129
is probably an advanced edge case but I

00:10:42,610 --> 00:10:48,040
feel like there's nothing inside of my

00:10:45,129 --> 00:10:50,980
use click outside hook that cares about

00:10:48,040 --> 00:10:53,529
this callback changing and I decided

00:10:50,980 --> 00:10:54,879
that that's part of the API so I wanted

00:10:53,529 --> 00:10:57,879
to get rid of it and one of the easiest

00:10:54,879 --> 00:10:59,620
ways to do that is to instead of

00:10:57,879 --> 00:11:01,779
referencing the callback directly we can

00:10:59,620 --> 00:11:05,259
use this pattern of tracking the latest

00:11:01,779 --> 00:11:08,500
version of that callback in a ref itself

00:11:05,259 --> 00:11:10,689
and when we do that the callback ref is

00:11:08,500 --> 00:11:13,120
now added to the dependency array which

00:11:10,689 --> 00:11:14,980
will never change but the value that we

00:11:13,120 --> 00:11:16,720
hold inside it will and that way we're

00:11:14,980 --> 00:11:19,029
only setting up and tearing down that

00:11:16,720 --> 00:11:20,410
event listener when we actually need to

00:11:19,029 --> 00:11:23,560
when the element that we're tracking

00:11:20,410 --> 00:11:26,050
actually changes so now there's no

00:11:23,560 --> 00:11:28,120
callback we can pass whatever function

00:11:26,050 --> 00:11:31,990
we want into that use click outside hook

00:11:28,120 --> 00:11:38,949
and that is our second custom hood for

00:11:31,990 --> 00:11:40,300
today what's fantastic about this is you

00:11:38,949 --> 00:11:41,980
can move this around your app you can

00:11:40,300 --> 00:11:43,930
import it to as many components as you

00:11:41,980 --> 00:11:45,850
want or you can just copy and paste this

00:11:43,930 --> 00:11:48,100
into another app there's no external

00:11:45,850 --> 00:11:50,410
dependencies other than react and I do

00:11:48,100 --> 00:11:52,329
this all the time Greenfield project I'm

00:11:50,410 --> 00:11:53,800
like oh I really love that hook I go

00:11:52,329 --> 00:11:55,899
back to the last project that I was

00:11:53,800 --> 00:11:58,089
working on I open the file I copy it and

00:11:55,899 --> 00:12:00,279
I move it over it's that easy I don't

00:11:58,089 --> 00:12:01,750
even really rely on external libraries

00:12:00,279 --> 00:12:04,480
so do a lot of this stuff because it's

00:12:01,750 --> 00:12:08,620
just so simple that's something that

00:12:04,480 --> 00:12:11,230
isn't simple is state state is as

00:12:08,620 --> 00:12:13,629
particularly global state

00:12:11,230 --> 00:12:16,300
global state is highly opinionated

00:12:13,629 --> 00:12:18,480
there's a new way to manage global State

00:12:16,300 --> 00:12:22,300
everyday comes out there's a new library

00:12:18,480 --> 00:12:23,800
it's kind of noisy and we're gonna be

00:12:22,300 --> 00:12:26,139
talking a lot about global state here

00:12:23,800 --> 00:12:27,639
for the last part of this talk global

00:12:26,139 --> 00:12:28,400
state in my opinion is something that's

00:12:27,639 --> 00:12:31,970
always trying to

00:12:28,400 --> 00:12:34,160
help you it's because you think you have

00:12:31,970 --> 00:12:36,380
a handle on it and then your your

00:12:34,160 --> 00:12:38,510
requirements change and everything

00:12:36,380 --> 00:12:40,940
changes in your app and it kind of pulls

00:12:38,510 --> 00:12:42,530
the rug out from underneath you this is

00:12:40,940 --> 00:12:45,920
usually how global State starts and

00:12:42,530 --> 00:12:47,480
you're like wow this is so simple I have

00:12:45,920 --> 00:12:49,580
a hook it's going to return some global

00:12:47,480 --> 00:12:50,990
state theoretically and then for some

00:12:49,580 --> 00:12:54,800
reason it can quickly turn into

00:12:50,990 --> 00:12:56,510
something like this not to name names or

00:12:54,800 --> 00:12:58,640
anything but this is something I would

00:12:56,510 --> 00:13:01,070
try and avoid I don't I don't want to

00:12:58,640 --> 00:13:02,600
have to go to these links to use global

00:13:01,070 --> 00:13:03,830
State so I'm going to take you on a

00:13:02,600 --> 00:13:05,270
little bit of a journey of finding

00:13:03,830 --> 00:13:09,530
global State today

00:13:05,270 --> 00:13:11,600
and it's going to be so introspective

00:13:09,530 --> 00:13:13,460
and enlightening that maybe you'll want

00:13:11,600 --> 00:13:16,220
to actually handle your own global State

00:13:13,460 --> 00:13:19,430
after today let's start by creating a

00:13:16,220 --> 00:13:22,460
global store we can use react context to

00:13:19,430 --> 00:13:24,680
pass values down our react tree not have

00:13:22,460 --> 00:13:26,900
to pass them through props we can start

00:13:24,680 --> 00:13:29,300
with a store provider that's just a

00:13:26,900 --> 00:13:32,840
wrapper around context that will set up

00:13:29,300 --> 00:13:35,150
some state with a store with a store and

00:13:32,840 --> 00:13:38,210
asset store function right there that we

00:13:35,150 --> 00:13:40,910
can pass down through our context value

00:13:38,210 --> 00:13:42,530
and then we'll have a use store custom

00:13:40,910 --> 00:13:45,140
hook that just wraps around that use

00:13:42,530 --> 00:13:47,000
context and what that does is it now

00:13:45,140 --> 00:13:49,340
inside of our app we can declare some

00:13:47,000 --> 00:13:51,020
initial state pass that initial state

00:13:49,340 --> 00:13:53,240
into our store provider and now that

00:13:51,020 --> 00:13:54,800
state is going to be available to all

00:13:53,240 --> 00:13:56,330
the components inside of it including

00:13:54,800 --> 00:13:59,030
the little - duze component down there

00:13:56,330 --> 00:14:01,280
and inside of a instead of our

00:13:59,030 --> 00:14:03,290
components we can consume the store

00:14:01,280 --> 00:14:05,900
pretty easily by just calling you store

00:14:03,290 --> 00:14:07,730
which gives us the current state of the

00:14:05,900 --> 00:14:11,150
store and a way to update it which right

00:14:07,730 --> 00:14:13,520
now is just set state set States kind of

00:14:11,150 --> 00:14:15,800
boring though and it's a prone to break

00:14:13,520 --> 00:14:18,710
and I don't really feel good about

00:14:15,800 --> 00:14:20,600
manipulating the store directly from a

00:14:18,710 --> 00:14:24,080
component so what if we took it a step

00:14:20,600 --> 00:14:27,440
further to use reducer use reducer is

00:14:24,080 --> 00:14:28,940
really pretty simple to use in my

00:14:27,440 --> 00:14:31,730
opinion just create a reducer function

00:14:28,940 --> 00:14:33,290
here we can do it in our app we can pass

00:14:31,730 --> 00:14:35,660
that reducer function into our store

00:14:33,290 --> 00:14:37,160
provider we created and instead of used

00:14:35,660 --> 00:14:38,420
State now we can just use reducer

00:14:37,160 --> 00:14:40,130
passively reduce through the initial

00:14:38,420 --> 00:14:42,080
state and instead of a set state

00:14:40,130 --> 00:14:42,259
function to directly modify the store

00:14:42,080 --> 00:14:44,329
now

00:14:42,259 --> 00:14:47,419
a dispatcher we can use so in our

00:14:44,329 --> 00:14:49,220
components instead of importing the set

00:14:47,419 --> 00:14:51,589
state we get the dispatch and now we can

00:14:49,220 --> 00:14:53,869
dispatch actions and have a little bit

00:14:51,589 --> 00:14:55,720
more confidence about the actions that

00:14:53,869 --> 00:14:59,600
are taking place inside of our app

00:14:55,720 --> 00:15:00,919
especially for even four components like

00:14:59,600 --> 00:15:02,449
an individual to do where we're not

00:15:00,919 --> 00:15:04,609
necessarily reading from the store but

00:15:02,449 --> 00:15:06,619
just dispatching we can still import

00:15:04,609 --> 00:15:09,350
just we can still import the store and

00:15:06,619 --> 00:15:12,619
get a hold of dispatcher to send off

00:15:09,350 --> 00:15:13,879
some events this pattern is really

00:15:12,619 --> 00:15:16,009
simple it will probably get you pretty

00:15:13,879 --> 00:15:17,539
far but at the end of the day might

00:15:16,009 --> 00:15:19,549
bring up questions about unnecessary

00:15:17,539 --> 00:15:21,229
renders you know I'm rear end during

00:15:19,549 --> 00:15:23,149
every component in my app every single

00:15:21,229 --> 00:15:26,089
time that the state changes even if I'm

00:15:23,149 --> 00:15:27,739
only dispatching well it turns out we

00:15:26,089 --> 00:15:31,729
can use a concept called multiple

00:15:27,739 --> 00:15:33,889
context to aid this a little bit multi

00:15:31,729 --> 00:15:35,539
context a multi context global store was

00:15:33,889 --> 00:15:36,139
first introduced to me by my friend Kent

00:15:35,539 --> 00:15:38,449
C Dodds

00:15:36,139 --> 00:15:41,149
and he's made a popular through a couple

00:15:38,449 --> 00:15:43,309
of blog posts which are just fantastic

00:15:41,149 --> 00:15:45,470
and it describes creating two separate

00:15:43,309 --> 00:15:47,629
contexts for your store and your

00:15:45,470 --> 00:15:49,669
dispatcher and sending them both down

00:15:47,629 --> 00:15:52,910
the down the line and creating another

00:15:49,669 --> 00:15:54,589
use dispatch custom hook there so now

00:15:52,910 --> 00:15:57,049
inside of our components if we want the

00:15:54,589 --> 00:15:58,489
store we use the use store hook and if

00:15:57,049 --> 00:16:01,279
we want the dispatcher we use they use

00:15:58,489 --> 00:16:02,569
dispatch hook this makes it so that in

00:16:01,279 --> 00:16:04,189
components that are only using the

00:16:02,569 --> 00:16:05,720
dispatcher they're not going to get

00:16:04,189 --> 00:16:08,299
updated every single time to store

00:16:05,720 --> 00:16:11,239
updates and that will get rid of a lot

00:16:08,299 --> 00:16:14,259
of weird unnecessary renders around that

00:16:11,239 --> 00:16:18,559
scenario let's take it a step further

00:16:14,259 --> 00:16:20,419
what about a single store is probably

00:16:18,559 --> 00:16:22,309
not going to scale for very long if you

00:16:20,419 --> 00:16:24,379
have a lot of global state in your

00:16:22,309 --> 00:16:26,659
application you don't want every single

00:16:24,379 --> 00:16:28,489
component updating when this state that

00:16:26,659 --> 00:16:30,470
you're consuming updates that global

00:16:28,489 --> 00:16:32,809
State so we can take it a step further

00:16:30,470 --> 00:16:34,999
with multiple stores we can take all of

00:16:32,809 --> 00:16:37,129
that logic that we had to create our

00:16:34,999 --> 00:16:40,249
global store and just wrap it into a

00:16:37,129 --> 00:16:41,659
function and we can create as many of

00:16:40,249 --> 00:16:43,429
these global stores as we want by

00:16:41,659 --> 00:16:46,339
passing them in a reducer in initial

00:16:43,429 --> 00:16:48,409
state so if we wanted to do store we

00:16:46,339 --> 00:16:50,569
just pass it the to do reducer it gives

00:16:48,409 --> 00:16:52,669
us back the provider and a couple of

00:16:50,569 --> 00:16:55,639
hooks to consume it and we're off to the

00:16:52,669 --> 00:16:56,480
races we come into our app we provide

00:16:55,639 --> 00:16:58,639
our traduced

00:16:56,480 --> 00:17:01,100
the entire app and you know what I want

00:16:58,639 --> 00:17:03,110
some Louisville state to manage all of

00:17:01,100 --> 00:17:06,020
my menus being open and stuff like that

00:17:03,110 --> 00:17:08,660
so I'll make a layout store as well and

00:17:06,020 --> 00:17:10,910
I'll wrap that around my app and then

00:17:08,660 --> 00:17:12,620
inside of our component like our menu

00:17:10,910 --> 00:17:15,500
that we wanted to click outside and have

00:17:12,620 --> 00:17:18,110
it you know change around we can hook it

00:17:15,500 --> 00:17:20,120
up to that use layout store by both

00:17:18,110 --> 00:17:22,040
subscribing to the store to see if it's

00:17:20,120 --> 00:17:23,449
open and the dispatcher to make sure

00:17:22,040 --> 00:17:25,900
that we can toggle it closed when we

00:17:23,449 --> 00:17:28,750
click outside of it

00:17:25,900 --> 00:17:31,070
the next step in our journey is

00:17:28,750 --> 00:17:33,799
persistence right now our global store

00:17:31,070 --> 00:17:35,450
isn't really persisting anything this is

00:17:33,799 --> 00:17:36,799
extremely important because your users

00:17:35,450 --> 00:17:39,200
are going to reload the page and

00:17:36,799 --> 00:17:41,660
everything's going to disappear so let's

00:17:39,200 --> 00:17:42,980
throw in some local storage local

00:17:41,660 --> 00:17:45,860
storage is pretty easy to use especially

00:17:42,980 --> 00:17:49,299
if you're using a reducer so right here

00:17:45,860 --> 00:17:52,220
we can instantiate our reducer

00:17:49,299 --> 00:17:54,770
initial-value from local storage and

00:17:52,220 --> 00:17:56,809
also every time a reducer runs we can

00:17:54,770 --> 00:17:59,240
save the resulting state into local

00:17:56,809 --> 00:18:01,070
storage using a key and now every single

00:17:59,240 --> 00:18:02,690
time that your users reload the page

00:18:01,070 --> 00:18:08,059
they're going to get the last state that

00:18:02,690 --> 00:18:10,460
they were left with I know this is where

00:18:08,059 --> 00:18:14,240
you guys want to be and I'm working hard

00:18:10,460 --> 00:18:17,840
to get you there just to make sure that

00:18:14,240 --> 00:18:29,110
everybody is awake like that I got some

00:18:17,840 --> 00:18:29,110
t-shirts all right

00:18:30,269 --> 00:18:39,759
moving on what about remote data

00:18:36,309 --> 00:18:41,950
persistence so local storage is great

00:18:39,759 --> 00:18:44,710
but eventually users are going to want

00:18:41,950 --> 00:18:46,029
some remote data persistence they're

00:18:44,710 --> 00:18:47,619
gonna want to store their data on a

00:18:46,029 --> 00:18:49,570
server they're gonna want things to sync

00:18:47,619 --> 00:18:53,799
between their devices they're so

00:18:49,570 --> 00:18:56,470
entitled so let's talk about server

00:18:53,799 --> 00:18:58,600
state now I say server state because I

00:18:56,470 --> 00:19:00,369
believe that it is truly different from

00:18:58,600 --> 00:19:02,889
global state but it is the same in

00:19:00,369 --> 00:19:05,889
spirit server state introduces some

00:19:02,889 --> 00:19:08,440
interesting challenges around moving

00:19:05,889 --> 00:19:11,409
from synchronous api's to asynchronous

00:19:08,440 --> 00:19:13,989
api's we're no longer interacting with a

00:19:11,409 --> 00:19:17,549
store or a dispatcher we are interacting

00:19:13,989 --> 00:19:20,470
with you know fetching assets and

00:19:17,549 --> 00:19:22,600
sending mutations or queries to the

00:19:20,470 --> 00:19:25,869
server and expecting them to do things

00:19:22,600 --> 00:19:26,859
right and along along with that we're

00:19:25,869 --> 00:19:28,539
gonna notice that a lot of our

00:19:26,859 --> 00:19:31,200
components where we'd previously wired

00:19:28,539 --> 00:19:33,369
up things like dispatch in the store

00:19:31,200 --> 00:19:35,080
that kind of becomes a little bit of a

00:19:33,369 --> 00:19:38,830
question mark now where are we getting

00:19:35,080 --> 00:19:41,499
those things well turns out that our

00:19:38,830 --> 00:19:44,320
components are really great places to

00:19:41,499 --> 00:19:48,399
compose business logic and user

00:19:44,320 --> 00:19:50,289
interface together and this can be so

00:19:48,399 --> 00:19:52,269
easy that sometimes it's a detriment we

00:19:50,289 --> 00:19:54,909
take things like local state markup you

00:19:52,269 --> 00:19:58,179
at UI events Styles things that I feel

00:19:54,909 --> 00:19:59,769
are meant to be in components and we

00:19:58,179 --> 00:20:02,139
kind of mix them together with all this

00:19:59,769 --> 00:20:04,570
state and these external utilities or

00:20:02,139 --> 00:20:06,159
maybe expensive computation or or side

00:20:04,570 --> 00:20:07,629
effects that are happening on servers

00:20:06,159 --> 00:20:09,429
right and we take all that when we

00:20:07,629 --> 00:20:12,159
smoosh it together inside of our

00:20:09,429 --> 00:20:14,559
components and sometimes it can make

00:20:12,159 --> 00:20:16,889
them easy to hard to reason about and

00:20:14,559 --> 00:20:19,480
I'd like to propose a new pattern today

00:20:16,889 --> 00:20:21,879
where we need to remember that custom

00:20:19,480 --> 00:20:23,679
hooks are free now there's no cost of

00:20:21,879 --> 00:20:26,019
adding a new custom hood other than the

00:20:23,679 --> 00:20:27,759
cost of abstraction you can ask Kent C

00:20:26,019 --> 00:20:29,559
Dodds what he how he feels about the

00:20:27,759 --> 00:20:32,559
cost of abstraction he talks about it a

00:20:29,559 --> 00:20:36,639
lot but today I'd like to introduce a

00:20:32,559 --> 00:20:38,889
new layer of abstraction to our journey

00:20:36,639 --> 00:20:40,740
they're just custom hooks there's really

00:20:38,889 --> 00:20:43,170
nothing to say other than that and

00:20:40,740 --> 00:20:45,180
they're going to proxy

00:20:43,170 --> 00:20:47,820
all of our business logic between our

00:20:45,180 --> 00:20:49,110
components and the external services and

00:20:47,820 --> 00:20:51,090
the external features that we want to

00:20:49,110 --> 00:20:52,650
integrate with them so in this case

00:20:51,090 --> 00:20:55,050
we're going to take our two dews

00:20:52,650 --> 00:20:57,690
component we're going to write a use two

00:20:55,050 --> 00:20:59,460
dews custom hook that's going to do all

00:20:57,690 --> 00:21:02,160
the heavy lifting for us between our

00:20:59,460 --> 00:21:04,110
data what would that look like we could

00:21:02,160 --> 00:21:06,180
just start with a use to do we can

00:21:04,110 --> 00:21:08,130
import used seduced into our component

00:21:06,180 --> 00:21:10,050
and just expect that it returns to Deus

00:21:08,130 --> 00:21:12,930
and that would be enough for now

00:21:10,050 --> 00:21:14,490
this used to deuce hook could do

00:21:12,930 --> 00:21:16,350
whatever we wanted to as long as it

00:21:14,490 --> 00:21:18,240
returns to deuce that's all we care

00:21:16,350 --> 00:21:19,920
about the implementation details are

00:21:18,240 --> 00:21:22,500
hidden from the component it doesn't

00:21:19,920 --> 00:21:24,300
care and it shouldn't so if we wanted to

00:21:22,500 --> 00:21:25,890
implement our existing in-memory store

00:21:24,300 --> 00:21:28,560
we could just import our memories our

00:21:25,890 --> 00:21:31,530
store and return the - duze from it and

00:21:28,560 --> 00:21:33,210
we would be fine but remember we need to

00:21:31,530 --> 00:21:35,100
talk about asynchronous state and state

00:21:33,210 --> 00:21:36,900
coming from the server that changes a

00:21:35,100 --> 00:21:38,910
lot of things especially if we're not

00:21:36,900 --> 00:21:41,730
talking about suspense which is a whole

00:21:38,910 --> 00:21:43,170
other talk but let's assume that we're

00:21:41,730 --> 00:21:44,610
not using suspense and this is what

00:21:43,170 --> 00:21:45,930
something like that would look like we

00:21:44,610 --> 00:21:47,490
know that it's going to be loading at

00:21:45,930 --> 00:21:49,380
some point we know there could be an

00:21:47,490 --> 00:21:52,560
error or we know we could have to do and

00:21:49,380 --> 00:21:54,630
as long as we conform to this function

00:21:52,560 --> 00:21:57,330
signature we can actually do a lot with

00:21:54,630 --> 00:22:00,510
this custom hook this used to dus custom

00:21:57,330 --> 00:22:03,870
hook that we just made we could use an

00:22:00,510 --> 00:22:05,820
effect and like a tool like Axios to

00:22:03,870 --> 00:22:08,340
communicate with a rest server that

00:22:05,820 --> 00:22:10,290
would load our traduz for us and we can

00:22:08,340 --> 00:22:12,300
manage all of the you know the loading

00:22:10,290 --> 00:22:15,090
state and everything ourselves or we

00:22:12,300 --> 00:22:17,250
could use a very common hook called a

00:22:15,090 --> 00:22:18,870
used promise that will let us pass a

00:22:17,250 --> 00:22:20,730
function that returns a promise and

00:22:18,870 --> 00:22:23,340
handle all of that is loading in error

00:22:20,730 --> 00:22:25,500
State for us again as long as we're

00:22:23,340 --> 00:22:27,120
returning the to do is the loading state

00:22:25,500 --> 00:22:28,650
in the error any component that's

00:22:27,120 --> 00:22:31,440
consuming to do this isn't really going

00:22:28,650 --> 00:22:33,450
to care and you know we could do the

00:22:31,440 --> 00:22:35,790
same thing take this pattern and apply

00:22:33,450 --> 00:22:38,250
the same pattern to anything doing a

00:22:35,790 --> 00:22:39,600
mutation so if we had you know a to do

00:22:38,250 --> 00:22:42,420
component that was going to toggle

00:22:39,600 --> 00:22:44,910
something we could have that used toggle

00:22:42,420 --> 00:22:45,150
to do custom hook take care of that for

00:22:44,910 --> 00:22:48,420
us

00:22:45,150 --> 00:22:51,750
so instead of importing you know some

00:22:48,420 --> 00:22:54,030
rest api or you know Axios directly

00:22:51,750 --> 00:22:56,580
inside of our component we import use

00:22:54,030 --> 00:22:57,120
toggle to do we call it and it'll give

00:22:56,580 --> 00:22:59,370
us a func

00:22:57,120 --> 00:23:00,570
you know instead of just giving us

00:22:59,370 --> 00:23:02,460
function let's assume it's going to be

00:23:00,570 --> 00:23:04,320
asynchronous it'll give us a function

00:23:02,460 --> 00:23:07,290
and the loading state and error state as

00:23:04,320 --> 00:23:09,450
well and again that unlocks us to do and

00:23:07,290 --> 00:23:12,270
unlocks us the ability to do whatever we

00:23:09,450 --> 00:23:13,559
want in that you STOVL to do hook we can

00:23:12,270 --> 00:23:15,720
do whatever we want as long as we're

00:23:13,559 --> 00:23:18,080
returning a function that the component

00:23:15,720 --> 00:23:20,460
can call and an is loading an air state

00:23:18,080 --> 00:23:22,559
so we could use our in-memory store

00:23:20,460 --> 00:23:25,290
again and just hook it right up to our

00:23:22,559 --> 00:23:26,870
to-do store is loading an error is false

00:23:25,290 --> 00:23:30,150
and all all the time if we're doing this

00:23:26,870 --> 00:23:32,309
or we can go into the rest into the rest

00:23:30,150 --> 00:23:35,600
paradigm and just use Axios to you know

00:23:32,309 --> 00:23:40,010
issue off some type of a post command to

00:23:35,600 --> 00:23:43,530
to our server to toggle this to do but

00:23:40,010 --> 00:23:45,929
you know this can get pretty I know this

00:23:43,530 --> 00:23:47,490
can get pretty confusing very quickly if

00:23:45,929 --> 00:23:49,830
you're if you're managing all these side

00:23:47,490 --> 00:23:51,870
effects especially when we start

00:23:49,830 --> 00:23:53,730
thinking about things like caching what

00:23:51,870 --> 00:23:55,590
happens when we're using these custom

00:23:53,730 --> 00:23:57,870
hooks multiple times in our app if we

00:23:55,590 --> 00:24:00,000
need to do Xin multiple places are they

00:23:57,870 --> 00:24:02,309
separate copies are we you know

00:24:00,000 --> 00:24:04,290
reduplicating things are we creating

00:24:02,309 --> 00:24:06,420
race conditions and if we're caching

00:24:04,290 --> 00:24:08,760
when are we fetching that data you know

00:24:06,420 --> 00:24:11,220
what there are so many questions that

00:24:08,760 --> 00:24:14,010
happen along there well we don't have to

00:24:11,220 --> 00:24:16,710
stop there are used to dues a custom

00:24:14,010 --> 00:24:18,900
hook can doesn't have to communicate

00:24:16,710 --> 00:24:20,940
directly with our server it could use

00:24:18,900 --> 00:24:22,950
other hooks as well there's a library

00:24:20,940 --> 00:24:26,220
created called react query that helps

00:24:22,950 --> 00:24:28,890
with scenarios like this you can use

00:24:26,220 --> 00:24:31,110
react query to give it a function that

00:24:28,890 --> 00:24:34,080
returns a promise it'll handle caching

00:24:31,110 --> 00:24:35,760
and invalidation and make sure that

00:24:34,080 --> 00:24:37,770
you're only you know you're not

00:24:35,760 --> 00:24:39,980
duplicating to Do's across your entire

00:24:37,770 --> 00:24:42,720
app even if you use it multiple times

00:24:39,980 --> 00:24:45,240
and you'll notice that the really cool

00:24:42,720 --> 00:24:47,100
part is that our return signature is

00:24:45,240 --> 00:24:49,860
exactly the same so we just moved from

00:24:47,100 --> 00:24:51,840
this weird funky promise based way of

00:24:49,860 --> 00:24:54,870
fetching our data to something like

00:24:51,840 --> 00:24:58,710
react query and all of our components

00:24:54,870 --> 00:25:00,720
that use that use the used to do so

00:24:58,710 --> 00:25:03,480
didn't have to change at all it's just

00:25:00,720 --> 00:25:05,640
an implementation detail same thing we

00:25:03,480 --> 00:25:07,620
could do for the mutations we could add

00:25:05,640 --> 00:25:11,389
in react query for the use toggle to do

00:25:07,620 --> 00:25:13,830
and in fact react query handles

00:25:11,389 --> 00:25:16,559
react query handles a lot of the

00:25:13,830 --> 00:25:18,570
invalidation for mutations so running

00:25:16,559 --> 00:25:20,309
this mutation would invalidate all of

00:25:18,570 --> 00:25:22,049
the other queries on the page

00:25:20,309 --> 00:25:24,240
getting to Do's and it would cause all

00:25:22,049 --> 00:25:29,580
of them to update it's not very

00:25:24,240 --> 00:25:31,860
unsimilar to tools like Apollo and I

00:25:29,580 --> 00:25:35,880
don't use graph QL a whole lot but when

00:25:31,860 --> 00:25:36,960
I do I do enjoy using Apollo and you

00:25:35,880 --> 00:25:39,330
know what would it take to switch to

00:25:36,960 --> 00:25:42,899
something like Apollo well we could

00:25:39,330 --> 00:25:45,059
import Apollo and make a query use the

00:25:42,899 --> 00:25:47,309
use query hook from Apollo and again

00:25:45,059 --> 00:25:50,190
we're just returning to dues is loading

00:25:47,309 --> 00:25:51,929
an error we just moved from react query

00:25:50,190 --> 00:25:55,320
to Apollo we didn't have to change

00:25:51,929 --> 00:25:58,080
anything in our entire app so the same

00:25:55,320 --> 00:26:00,090
thing with the causing a mutation you

00:25:58,080 --> 00:26:02,250
know as long as we're returning that

00:26:00,090 --> 00:26:04,620
toggle to do and is loading error again

00:26:02,250 --> 00:26:06,779
our mutations don't have to change so we

00:26:04,620 --> 00:26:09,289
were able to you know just in the last

00:26:06,779 --> 00:26:12,059
five minutes well go from in memory

00:26:09,289 --> 00:26:13,830
management of our data to promises to

00:26:12,059 --> 00:26:16,139
react query in Apollo we can probably

00:26:13,830 --> 00:26:20,399
even move to relay if we want it all

00:26:16,139 --> 00:26:22,259
because we're using this this pattern of

00:26:20,399 --> 00:26:24,750
creating your own custom hooks to

00:26:22,259 --> 00:26:27,960
abstract our own business logic in our

00:26:24,750 --> 00:26:30,960
apps away from our components to make

00:26:27,960 --> 00:26:33,929
them smarter and to make them more

00:26:30,960 --> 00:26:34,409
reliable this pattern to me is extremely

00:26:33,929 --> 00:26:36,990
powerful

00:26:34,409 --> 00:26:38,759
I see basically all the time in my

00:26:36,990 --> 00:26:41,159
applications all my components are

00:26:38,759 --> 00:26:42,389
communicating with custom hooks to

00:26:41,159 --> 00:26:45,120
handle most of their business logic

00:26:42,389 --> 00:26:47,129
which are then reaching out to possibly

00:26:45,120 --> 00:26:50,039
even more custom hooks or external API

00:26:47,129 --> 00:26:52,440
or whatever this creates a really nice

00:26:50,039 --> 00:26:54,570
encapsulation around you know what is

00:26:52,440 --> 00:26:56,789
user interface what is business logic

00:26:54,570 --> 00:27:00,659
and what are the services I'm trying to

00:26:56,789 --> 00:27:02,970
use in my applications thinking in this

00:27:00,659 --> 00:27:06,480
thinking from this perspective you can

00:27:02,970 --> 00:27:09,029
start to imagine so many great custom

00:27:06,480 --> 00:27:10,889
hooks that you would want to use inside

00:27:09,029 --> 00:27:13,559
of your apps but maybe not something

00:27:10,889 --> 00:27:15,389
that would be shareable outside of your

00:27:13,559 --> 00:27:17,669
app you know it's okay if a custom hook

00:27:15,389 --> 00:27:18,840
is proprietary to something you're

00:27:17,669 --> 00:27:23,250
working on if it makes you more

00:27:18,840 --> 00:27:24,300
productive so these custom hooks and the

00:27:23,250 --> 00:27:27,630
idea of custom hooks

00:27:24,300 --> 00:27:30,960
so powerful I I take things to the

00:27:27,630 --> 00:27:33,840
extreme and I create tons of open-source

00:27:30,960 --> 00:27:36,240
libraries built on custom hooks those

00:27:33,840 --> 00:27:39,300
four are just a few of them

00:27:36,240 --> 00:27:41,180
reiax table is in fact just a hook it

00:27:39,300 --> 00:27:43,470
actually doesn't render anything for you

00:27:41,180 --> 00:27:44,820
it just as a hook that gives you

00:27:43,470 --> 00:27:46,700
everything you need to render your own

00:27:44,820 --> 00:27:50,130
table it's a really interesting concept

00:27:46,700 --> 00:27:53,340
but my hope and invitation to all of you

00:27:50,130 --> 00:27:56,310
today is to look at your hooks in your

00:27:53,340 --> 00:27:58,620
apps and think of ways that you can make

00:27:56,310 --> 00:28:00,390
yourself more agile abstract your

00:27:58,620 --> 00:28:02,940
business logic into your custom hooks

00:28:00,390 --> 00:28:04,050
and make your components dumber thereby

00:28:02,940 --> 00:28:06,930
making them smarter

00:28:04,050 --> 00:28:08,910
so be sure to check me out github

00:28:06,930 --> 00:28:12,420
Twitter YouTube come talk to me I'd love

00:28:08,910 --> 00:28:15,390
to chat and can't forget nozzle dot IO

00:28:12,420 --> 00:28:18,630
that's my company they I started back in

00:28:15,390 --> 00:28:22,290
Utah we build marketing software that

00:28:18,630 --> 00:28:24,500
helps agencies know where they rank in

00:28:22,290 --> 00:28:31,589
Google so thanks

00:28:24,500 --> 00:28:31,589

YouTube URL: https://www.youtube.com/watch?v=J-g9ZJha8FE


