Title: A Crash Course on Worker Threads - Rich Trott | JSConf Hawaii 2020
Publication date: 2020-03-26
Playlist: JSConf HI 2020
Description: 
	Node.js 10.5.0 introduced 'worker_threads', enabling the creation of simple multi-threaded applications in JavaScript. This may sound daunting if you've never dealt with threads before in another language. But JavaScript threads are pretty simple and, very importantly, fun. This talk will be a quick introduction to the fun of worker_threads.

I promise not to make any "you got your multi-threaded chocolate in my single-threaded JavaScript peanut butter" jokes.

Thumbnail photo by Etienne Girardet on Unsplash

Slides: https://www.palacefamilysteakhouse.com/multimedia/jsconfhi2020.pdf

Story of University of Hawaii and Ethernet: https://mailchi.mp/d93c463d5650/the-secret-nerd-history-of-hawaii

JSConf Hawaii will return soon
https://www.jsconfhi.com/
Captions: 
	00:00:08,230 --> 00:00:12,699
so right worker threads crash-course all

00:00:10,780 --> 00:00:16,390
right let's see is this work the way I

00:00:12,699 --> 00:00:17,980
wanted to it kind of does yeah so I've

00:00:16,390 --> 00:00:20,199
kind of stuck with the title because I

00:00:17,980 --> 00:00:21,610
chose it but it's really this is really

00:00:20,199 --> 00:00:24,220
more like an introduction to the things

00:00:21,610 --> 00:00:25,660
I like / you / want to talk about in

00:00:24,220 --> 00:00:28,570
worker threads or perhaps even more

00:00:25,660 --> 00:00:30,519
accurately I was doing a thing and I

00:00:28,570 --> 00:00:31,839
wanted to talk about the thing and they

00:00:30,519 --> 00:00:32,800
ended up talking about worker threads so

00:00:31,839 --> 00:00:36,579
that I could stand up here and talk

00:00:32,800 --> 00:00:38,409
about the thing so I talk fast I usually

00:00:36,579 --> 00:00:41,199
say I will try not to and I will fail

00:00:38,409 --> 00:00:44,050
I'm sorry but I have 25 minutes and like

00:00:41,199 --> 00:00:45,730
40 billion slides so talking fast is my

00:00:44,050 --> 00:00:47,770
superpower right now I know it's not

00:00:45,730 --> 00:00:49,899
very Hawaii to talk really fast but

00:00:47,770 --> 00:00:51,280
doing the best I can anyway my name is

00:00:49,899 --> 00:00:52,930
rich and I work for the University of

00:00:51,280 --> 00:00:55,300
California at their San Francisco campus

00:00:52,930 --> 00:00:56,920
in the library B and then I'm including

00:00:55,300 --> 00:00:58,390
I'm including myself in this we all act

00:00:56,920 --> 00:01:00,219
like the internet didn't exist until

00:00:58,390 --> 00:01:02,710
Amazon and pets.com

00:01:00,219 --> 00:01:04,149
came along but government institutions

00:01:02,710 --> 00:01:05,979
including public universities like the

00:01:04,149 --> 00:01:08,110
University of California were there for

00:01:05,979 --> 00:01:10,600
decades working on hard problems like F

00:01:08,110 --> 00:01:13,300
an Ethernet how does it work one of the

00:01:10,600 --> 00:01:14,770
Jays convoy organisers had a blog post

00:01:13,300 --> 00:01:17,560
about the role of the University of

00:01:14,770 --> 00:01:18,369
Hawaii and in that sort of stuff and you

00:01:17,560 --> 00:01:21,310
should read it because it's really

00:01:18,369 --> 00:01:24,160
fascinating anyway as you might imagine

00:01:21,310 --> 00:01:27,179
the UCSF library does not have an

00:01:24,160 --> 00:01:29,590
extraordinary large Deverell budget

00:01:27,179 --> 00:01:31,209
don't blog devrel positions there's not

00:01:29,590 --> 00:01:33,190
a lot of money around for me to travel

00:01:31,209 --> 00:01:34,989
to Tropico locales to attend conferences

00:01:33,190 --> 00:01:36,429
and talk about javascript so for making

00:01:34,989 --> 00:01:38,229
it possible for people like me and

00:01:36,429 --> 00:01:41,590
perhaps more importantly people who are

00:01:38,229 --> 00:01:43,060
not like me in several respects to be on

00:01:41,590 --> 00:01:45,670
the stage of this conference mad props

00:01:43,060 --> 00:01:49,630
to the GS convoy organizers and the

00:01:45,670 --> 00:01:51,399
sponsors so I am the composer of a rock

00:01:49,630 --> 00:01:52,750
opera this would normally be my fun fact

00:01:51,399 --> 00:01:55,869
by the way but since there's part of my

00:01:52,750 --> 00:01:58,179
talk I held it back I'm the composer of

00:01:55,869 --> 00:02:00,489
a rock opera about a steak house and it

00:01:58,179 --> 00:02:05,349
includes dancers and in steak suits and

00:02:00,489 --> 00:02:08,009
things like that it sounds I hope this

00:02:05,349 --> 00:02:09,840
works it sounds something like this

00:02:08,009 --> 00:02:13,680
[Music]

00:02:09,840 --> 00:02:13,680
okay it's gonna hang on

00:02:20,900 --> 00:02:26,760
it's really really groovy so anyway um

00:02:23,640 --> 00:02:27,720
but we're gonna that's actually the good

00:02:26,760 --> 00:02:30,360
thing to fail because I didn't actually

00:02:27,720 --> 00:02:32,040
come here to play excerpts from from a

00:02:30,360 --> 00:02:34,440
rock opera I just bring it up because I

00:02:32,040 --> 00:02:36,420
put most of the most of the likes I put

00:02:34,440 --> 00:02:38,610
a link to the slides and a link to all

00:02:36,420 --> 00:02:42,510
the things I talked about in here at

00:02:38,610 --> 00:02:44,040
pals family steakhouse calm so now the

00:02:42,510 --> 00:02:45,690
only reason I get to stand up here and

00:02:44,040 --> 00:02:48,450
play excerpts from my rock operas

00:02:45,690 --> 00:02:50,460
because I work on node by the way who

00:02:48,450 --> 00:02:52,560
runs node everybody does if you don't

00:02:50,460 --> 00:02:54,960
think you did your run node right okay

00:02:52,560 --> 00:02:59,070
um so if you're using this yeah it

00:02:54,960 --> 00:03:00,780
doesn't point is I only 25 minutes um if

00:02:59,070 --> 00:03:03,420
you're running node you're running a lot

00:03:00,780 --> 00:03:10,110
of code that I wrote on a 2013 MacBook

00:03:03,420 --> 00:03:12,300
just so uh me and like two hundred other

00:03:10,110 --> 00:03:14,280
two two thousand other people but anyway

00:03:12,300 --> 00:03:15,480
um so some quick disclaimers the views

00:03:14,280 --> 00:03:16,710
expressed on my own not show you those

00:03:15,480 --> 00:03:18,600
of my employer that's a standard

00:03:16,710 --> 00:03:20,760
disclaimer also the views expressed are

00:03:18,600 --> 00:03:22,920
my own and not necessarily those of node

00:03:20,760 --> 00:03:24,239
there are a lot of other people involved

00:03:22,920 --> 00:03:26,070
in node and naturally I don't see

00:03:24,239 --> 00:03:28,020
everything the same way just two days

00:03:26,070 --> 00:03:30,270
ago was decide to remove a handful of

00:03:28,020 --> 00:03:32,100
deprecated API is from the codebase that

00:03:30,270 --> 00:03:33,870
I think we should just leave in there so

00:03:32,100 --> 00:03:36,120
clearly my opinions are not those of

00:03:33,870 --> 00:03:38,190
node necessarily but I wasn't nearly as

00:03:36,120 --> 00:03:40,980
angry as this person was about it anyway

00:03:38,190 --> 00:03:43,770
without of the way back to node hey have

00:03:40,980 --> 00:03:46,170
you heard about worker threads they were

00:03:43,770 --> 00:03:47,970
introduced in node 10.5 dot zero but it

00:03:46,170 --> 00:03:50,300
required a command line flag to using

00:03:47,970 --> 00:03:53,540
that version so in no.12

00:03:50,300 --> 00:03:56,250
you don't need a command line flag and

00:03:53,540 --> 00:03:57,780
you really want to use twelve dot eleven

00:03:56,250 --> 00:03:59,600
or newer because that's the first

00:03:57,780 --> 00:04:01,620
version where worker threads were

00:03:59,600 --> 00:04:03,510
determined to be stable rather than

00:04:01,620 --> 00:04:05,700
experimental and really you want to use

00:04:03,510 --> 00:04:07,440
12150 because that's the version that

00:04:05,700 --> 00:04:11,519
was released like a day or two ago that

00:04:07,440 --> 00:04:13,320
fixes some security issues if you like

00:04:11,519 --> 00:04:15,750
to live on the edge use the current

00:04:13,320 --> 00:04:17,880
version that won't be supported yet in a

00:04:15,750 --> 00:04:19,470
few months but it's node 13 eight zero

00:04:17,880 --> 00:04:21,299
which is the version that was released a

00:04:19,470 --> 00:04:24,060
few days ago it's security fixes um

00:04:21,299 --> 00:04:27,240
anyway yeah worker threads what are they

00:04:24,060 --> 00:04:29,220
even so they're kind of like web workers

00:04:27,240 --> 00:04:30,870
but different there's no

00:04:29,220 --> 00:04:34,170
there's no shared worker for example

00:04:30,870 --> 00:04:36,090
uh-oh that's suppose there it is okay if

00:04:34,170 --> 00:04:38,070
you've not used web workers don't worry

00:04:36,090 --> 00:04:39,420
stay with me um they're also kind of

00:04:38,070 --> 00:04:41,190
like threads and other programming

00:04:39,420 --> 00:04:43,020
languages but also not like threads and

00:04:41,190 --> 00:04:44,700
other programming languages if you use

00:04:43,020 --> 00:04:47,760
threads another programming language is

00:04:44,700 --> 00:04:49,170
cool if not don't worry stay with me man

00:04:47,760 --> 00:04:51,510
that image takes a while to load it's

00:04:49,170 --> 00:04:53,610
pretty big okay um anyway javascript is

00:04:51,510 --> 00:04:54,960
single threaded as we all know even if

00:04:53,610 --> 00:04:56,130
you don't know what that means there's

00:04:54,960 --> 00:04:58,230
an excellent chance you've heard

00:04:56,130 --> 00:05:01,290
JavaScript is single threaded before

00:04:58,230 --> 00:05:04,260
seeing it on this slide that's because

00:05:01,290 --> 00:05:06,120
there's one cold hard unchanging fact in

00:05:04,260 --> 00:05:08,760
this ever-changing world in which we

00:05:06,120 --> 00:05:12,740
live in and that question with a kiss

00:05:08,760 --> 00:05:15,300
javascript is single threaded arguably

00:05:12,740 --> 00:05:17,370
literally arguably because like some

00:05:15,300 --> 00:05:19,650
people like to argue about this um I

00:05:17,370 --> 00:05:24,210
don't want to have that argument though

00:05:19,650 --> 00:05:27,720
so the point is your code does one thing

00:05:24,210 --> 00:05:31,170
at one time it's why this program never

00:05:27,720 --> 00:05:33,780
exits there's only one execution I'm

00:05:31,170 --> 00:05:36,419
sorry that's why there's only one one

00:05:33,780 --> 00:05:37,980
execution thread handling this code the

00:05:36,419 --> 00:05:39,810
code in the set timeout which would

00:05:37,980 --> 00:05:43,710
cause the while loop to stop never

00:05:39,810 --> 00:05:44,910
execute right um it's a you know it's

00:05:43,710 --> 00:05:47,790
just going to sit in the wild loop

00:05:44,910 --> 00:05:49,770
forever and and and the timeout won't

00:05:47,790 --> 00:05:50,970
fire until the wild loop exits the wild

00:05:49,770 --> 00:05:52,800
loop is never going to exit to the time

00:05:50,970 --> 00:05:56,160
at number fires stuck in the in flew for

00:05:52,800 --> 00:05:57,630
ever classic deadlock right so this code

00:05:56,160 --> 00:05:59,580
will run forever or until you press

00:05:57,630 --> 00:06:01,770
control-c or you turn off your computer

00:05:59,580 --> 00:06:03,990
or whatever but it's not gonna exit

00:06:01,770 --> 00:06:05,669
cleanly and whatever causes to exit it's

00:06:03,990 --> 00:06:07,590
not going to be the set timeout this is

00:06:05,669 --> 00:06:08,880
called blocking the event loop you may

00:06:07,590 --> 00:06:11,280
have heard that phrase before you've

00:06:08,880 --> 00:06:14,669
heard it in Max's talk like 20 minutes

00:06:11,280 --> 00:06:16,860
ago he recommended sam roberts video

00:06:14,669 --> 00:06:18,810
that's great it's great great talk I

00:06:16,860 --> 00:06:20,520
recommend this one this is uh what the

00:06:18,810 --> 00:06:22,620
heck is the event loop anyway by philip

00:06:20,520 --> 00:06:24,000
roberts if you get nothing else i have

00:06:22,620 --> 00:06:25,800
this talk let it be that you should get

00:06:24,000 --> 00:06:27,090
more than one thing out of this talk but

00:06:25,800 --> 00:06:28,740
if you get only get two things from this

00:06:27,090 --> 00:06:31,230
talk let the second one be that you want

00:06:28,740 --> 00:06:34,140
to watch this talk okay that talk not

00:06:31,230 --> 00:06:36,480
this talk see this is what happens when

00:06:34,140 --> 00:06:38,250
i have to compress for hours worth of

00:06:36,480 --> 00:06:39,479
material in 25 minutes anyway there's a

00:06:38,250 --> 00:06:43,110
link to that talk at pal's family stays

00:06:39,479 --> 00:06:46,020
calm now you may be thinking but

00:06:43,110 --> 00:06:47,040
note is asynchronous I don't really have

00:06:46,020 --> 00:06:48,330
to worry about blocking the event loop

00:06:47,040 --> 00:06:50,640
you're probably not thinking that but

00:06:48,330 --> 00:06:52,080
you might be someone might be it can you

00:06:50,640 --> 00:06:53,520
know node can effectively do many things

00:06:52,080 --> 00:06:56,010
at once like handle multiple

00:06:53,520 --> 00:06:59,220
simultaneous HTTP requests or read

00:06:56,010 --> 00:07:00,720
multiple files max was just telling it

00:06:59,220 --> 00:07:03,960
but telling us about this in the last

00:07:00,720 --> 00:07:07,350
talk and his slides were gorgeous so it

00:07:03,960 --> 00:07:08,910
must be true and it is true because max

00:07:07,350 --> 00:07:11,790
is a good egg he would not lead you

00:07:08,910 --> 00:07:13,560
astray but the built-in asynchronous

00:07:11,790 --> 00:07:15,990
nature of node has been around

00:07:13,560 --> 00:07:19,200
input/output IO that's why I mentioned

00:07:15,990 --> 00:07:21,150
files and it's why I mentioned HTTP if

00:07:19,200 --> 00:07:25,950
you're if you're doing say data science

00:07:21,150 --> 00:07:28,260
stuff maybe or like processing graphics

00:07:25,950 --> 00:07:29,850
you know image image processing or

00:07:28,260 --> 00:07:32,190
basically anything it's CPU intensive

00:07:29,850 --> 00:07:33,780
then let's just say that the default

00:07:32,190 --> 00:07:37,470
state of things in node and in

00:07:33,780 --> 00:07:39,780
JavaScript is not as asynchronous so

00:07:37,470 --> 00:07:41,790
prior to worker threads the usual way

00:07:39,780 --> 00:07:44,460
people would offload CPU in a

00:07:41,790 --> 00:07:47,640
non-blocking way in node was the cluster

00:07:44,460 --> 00:07:50,100
module and if that's working for you

00:07:47,640 --> 00:07:52,410
great but here's the thing

00:07:50,100 --> 00:07:54,570
cluster spreads your work out workload

00:07:52,410 --> 00:07:56,280
out across multiple processes and each

00:07:54,570 --> 00:07:58,230
of those processes has independent

00:07:56,280 --> 00:08:00,420
memory and so on so I make sharing large

00:07:58,230 --> 00:08:02,820
amounts of data problematic and each

00:08:00,420 --> 00:08:06,330
process consumes the full amount of RAM

00:08:02,820 --> 00:08:08,790
required by node so this can be really

00:08:06,330 --> 00:08:11,100
inefficient again though if it's working

00:08:08,790 --> 00:08:12,870
for you great but if it doesn't work for

00:08:11,100 --> 00:08:15,600
you it's if it doesn't work for a lot of

00:08:12,870 --> 00:08:16,830
things and even if it is working worker

00:08:15,600 --> 00:08:18,450
threads will often work out better and

00:08:16,830 --> 00:08:20,640
here's why worker threads are

00:08:18,450 --> 00:08:23,970
lightweight it's not a whole process

00:08:20,640 --> 00:08:25,470
it's just a thread and they're better at

00:08:23,970 --> 00:08:27,090
sharing data which we'll talk about

00:08:25,470 --> 00:08:28,350
briefly and then I'll do some hand

00:08:27,090 --> 00:08:32,190
waving stuff until you go look at the

00:08:28,350 --> 00:08:33,840
documentation um so let's dive in here's

00:08:32,190 --> 00:08:35,970
the hello world example and let's just

00:08:33,840 --> 00:08:37,680
go through it step by step the first

00:08:35,970 --> 00:08:40,760
line pulls in three things from the

00:08:37,680 --> 00:08:42,570
worker threads module it pulls in the

00:08:40,760 --> 00:08:43,770
let's see here so starting from the

00:08:42,570 --> 00:08:46,080
right hand side suppose in the parent

00:08:43,770 --> 00:08:49,300
portals in the is main thread boolean

00:08:46,080 --> 00:08:53,589
and it also pulls in the worker class

00:08:49,300 --> 00:08:57,130
and yeah so his main thread at the

00:08:53,589 --> 00:08:59,800
parent port so we use is main thread to

00:08:57,130 --> 00:09:02,010
to make sure we are we are not using

00:08:59,800 --> 00:09:04,060
we're not inside a worker thread already

00:09:02,010 --> 00:09:05,080
basically we're checking you know we're

00:09:04,060 --> 00:09:07,029
checking that we're not wearing thread

00:09:05,080 --> 00:09:08,980
so that we know that's okay to launch a

00:09:07,029 --> 00:09:10,029
worker thread if we didn't do that we

00:09:08,980 --> 00:09:11,200
might be in a worker thread that

00:09:10,029 --> 00:09:12,399
launches a worker thread that launches a

00:09:11,200 --> 00:09:13,450
work thread that launches work thread

00:09:12,399 --> 00:09:15,790
and it's just work threats all the way

00:09:13,450 --> 00:09:18,779
down until your run out of I don't know

00:09:15,790 --> 00:09:21,610
stack heap something some kind of ramp

00:09:18,779 --> 00:09:23,230
anyway some kind of resource this check

00:09:21,610 --> 00:09:24,940
is usually only necessary if you have

00:09:23,230 --> 00:09:26,440
your worker thread code and your main

00:09:24,940 --> 00:09:29,380
thread code in the same file I don't

00:09:26,440 --> 00:09:31,029
usually like to do that but for a hello

00:09:29,380 --> 00:09:32,709
world example it seemed convenient to

00:09:31,029 --> 00:09:35,140
just have one blob of code and not like

00:09:32,709 --> 00:09:39,010
here's the word huh so that's what I did

00:09:35,140 --> 00:09:40,390
is main thread cool anyway so we're in

00:09:39,010 --> 00:09:42,100
the main thread so what we're gonna do

00:09:40,390 --> 00:09:43,810
is create a worker thread so we use the

00:09:42,100 --> 00:09:45,820
constructor for the worker class and

00:09:43,810 --> 00:09:48,279
that's what that new worker is all about

00:09:45,820 --> 00:09:51,070
right new is the keyword for instructors

00:09:48,279 --> 00:09:52,510
in JavaScript and we pass it underbar

00:09:51,070 --> 00:09:55,540
underbar our file name which is the

00:09:52,510 --> 00:09:57,760
special node.js variable that says you

00:09:55,540 --> 00:10:00,100
know the file the path to the file that

00:09:57,760 --> 00:10:01,450
contains the the code currently being

00:10:00,100 --> 00:10:03,970
executed if you didn't know that that

00:10:01,450 --> 00:10:05,079
was what that was now you do um you can

00:10:03,970 --> 00:10:07,480
create a worker thread to run any

00:10:05,079 --> 00:10:08,980
JavaScript spot file you specify but

00:10:07,480 --> 00:10:10,540
like I said here we're just keeping it

00:10:08,980 --> 00:10:13,270
one file you can also pass it a string

00:10:10,540 --> 00:10:15,370
that and and and tell it that this is a

00:10:13,270 --> 00:10:17,410
blob of code to execute I don't like to

00:10:15,370 --> 00:10:19,270
do that because that's basically eval

00:10:17,410 --> 00:10:23,620
and I you know we've all been taught

00:10:19,270 --> 00:10:25,420
that eval is you know God kills a kitten

00:10:23,620 --> 00:10:27,880
or something like that when eval you

00:10:25,420 --> 00:10:30,880
know you know and so you know like to

00:10:27,880 --> 00:10:34,120
avoid it but anyway so we've created a

00:10:30,880 --> 00:10:37,180
worker analysis in for messages from the

00:10:34,120 --> 00:10:39,160
worker this is the usual event listener

00:10:37,180 --> 00:10:40,690
syntax in node remember we're in the

00:10:39,160 --> 00:10:43,029
main thread still not the worker thread

00:10:40,690 --> 00:10:44,649
we're listening for messages message

00:10:43,029 --> 00:10:45,790
events on the worker we've created and

00:10:44,649 --> 00:10:48,760
when we get one we're going to use

00:10:45,790 --> 00:10:49,899
console.log to print the message okay so

00:10:48,760 --> 00:10:52,089
and that's it for the main thread that's

00:10:49,899 --> 00:10:53,740
all we're doing now remember we were in

00:10:52,089 --> 00:10:55,990
an if block that checked if we were in

00:10:53,740 --> 00:10:57,670
the main thread so now let's use the

00:10:55,990 --> 00:11:00,250
else block and do the right stuff for

00:10:57,670 --> 00:11:01,240
when we're in the worker threads and all

00:11:00,250 --> 00:11:03,339
we're gonna do

00:11:01,240 --> 00:11:06,010
is use parent port to send a message to

00:11:03,339 --> 00:11:08,500
the main thread and the main thread

00:11:06,010 --> 00:11:09,580
parent port will be no but you know so

00:11:08,500 --> 00:11:10,839
if we want to send a message to the

00:11:09,580 --> 00:11:13,209
worker from the parent port we use the

00:11:10,839 --> 00:11:14,940
port the post message method that's on

00:11:13,209 --> 00:11:17,860
the worker instance we'll see that later

00:11:14,940 --> 00:11:19,420
sorry that I'm talking so fast but in a

00:11:17,860 --> 00:11:21,070
worker thread parent port dot post

00:11:19,420 --> 00:11:22,870
message like we see they are used to

00:11:21,070 --> 00:11:24,820
send messages through the main thread so

00:11:22,870 --> 00:11:27,550
let's use it to send a message that says

00:11:24,820 --> 00:11:28,750
hello world and that's the end of the

00:11:27,550 --> 00:11:30,880
file you'll remember them the main

00:11:28,750 --> 00:11:32,320
thread we set up a listener that would

00:11:30,880 --> 00:11:34,649
take the message and print it out so

00:11:32,320 --> 00:11:37,000
this is the convoluted way to

00:11:34,649 --> 00:11:38,470
console.log hello world not terribly

00:11:37,000 --> 00:11:40,600
useful there are much easier ways to do

00:11:38,470 --> 00:11:42,310
that of course but it doesn't reduce the

00:11:40,600 --> 00:11:43,750
very basic concepts of worker threads

00:11:42,310 --> 00:11:46,330
and now let's do something equally

00:11:43,750 --> 00:11:47,770
contrived but more interesting and I'll

00:11:46,330 --> 00:11:49,959
try to slow down a little bit

00:11:47,770 --> 00:11:52,330
six degrees of Kevin Bacon perhaps you

00:11:49,959 --> 00:11:54,040
remember the game if not it's simple

00:11:52,330 --> 00:11:56,529
given the name of it an actor in a film

00:11:54,040 --> 00:12:01,270
your job is to well that's a cool effect

00:11:56,529 --> 00:12:03,880
um your job should you choose to accept

00:12:01,270 --> 00:12:05,980
it is to connect to them to Kevin Bacon

00:12:03,880 --> 00:12:09,040
in six or fewer steps in the following

00:12:05,980 --> 00:12:13,649
manner let's say you're challenged to

00:12:09,040 --> 00:12:18,279
connect Katy Perry to Kevin Bacon I

00:12:13,649 --> 00:12:21,850
don't think this is gonna get old in six

00:12:18,279 --> 00:12:23,440
or fewer steps Katy Perry whirs Katy

00:12:21,850 --> 00:12:26,140
Perry was in Zoolander 2 with John

00:12:23,440 --> 00:12:28,060
Malkovich and John Malkovich was in

00:12:26,140 --> 00:12:29,680
Queens logic with Kevin Bacon boom Katy

00:12:28,060 --> 00:12:32,560
Perry to Kevin Bacon in two steps I've

00:12:29,680 --> 00:12:34,870
seen neither of those films um anyway

00:12:32,560 --> 00:12:37,270
there are already websites to solve six

00:12:34,870 --> 00:12:39,760
degrees of Kevin Bacon by using IMDB

00:12:37,270 --> 00:12:41,740
data several years ago I wanted to do

00:12:39,760 --> 00:12:43,779
this for musicians playing on recordings

00:12:41,740 --> 00:12:45,490
of individual songs so I made a site

00:12:43,779 --> 00:12:49,329
called music routes and it's been broken

00:12:45,490 --> 00:12:52,870
for a long time because some one who I

00:12:49,329 --> 00:12:54,490
won't say what it was but removed an API

00:12:52,870 --> 00:12:56,110
that I was dependent on and then I never

00:12:54,490 --> 00:12:57,399
bother fixing it anyway it's been

00:12:56,110 --> 00:13:00,040
brewing for a long time so let's fix it

00:12:57,399 --> 00:13:01,810
so first surprisingly there is no usable

00:13:00,040 --> 00:13:03,640
database available on what musicians

00:13:01,810 --> 00:13:06,550
play on what tracks on what recordings

00:13:03,640 --> 00:13:07,899
and some people say what about all music

00:13:06,550 --> 00:13:09,250
they only have information who played on

00:13:07,899 --> 00:13:10,720
what album not track by track

00:13:09,250 --> 00:13:12,279
information other people ask me about

00:13:10,720 --> 00:13:13,839
musicbrainz they only have artists

00:13:12,279 --> 00:13:14,980
associated with tracks not individual

00:13:13,839 --> 00:13:16,540
musicians

00:13:14,980 --> 00:13:18,430
so me little ass butt discards they have

00:13:16,540 --> 00:13:19,630
published album credits but sometimes

00:13:18,430 --> 00:13:21,760
the album credits don't list

00:13:19,630 --> 00:13:24,459
track-by-track data and often they are

00:13:21,760 --> 00:13:26,470
wrong even intentionally so ask me for

00:13:24,459 --> 00:13:28,899
examples after the talk because I love

00:13:26,470 --> 00:13:30,880
talking about this sort of stuff but

00:13:28,899 --> 00:13:32,260
otherwise just know that discogs data

00:13:30,880 --> 00:13:33,730
correctly reflects what's on the album

00:13:32,260 --> 00:13:35,740
sleeve which does not correctly reflect

00:13:33,730 --> 00:13:37,360
what is in reality all the time that

00:13:35,740 --> 00:13:39,399
brings us to wiki data which has some

00:13:37,360 --> 00:13:41,589
data along these lines but way less than

00:13:39,399 --> 00:13:43,990
you think that's cool though its wiki

00:13:41,589 --> 00:13:46,420
data so everyone can add data to it but

00:13:43,990 --> 00:13:48,070
it's very very unusable slow for the

00:13:46,420 --> 00:13:49,870
many many many queries that would be

00:13:48,070 --> 00:13:51,459
required to do this so I built my own

00:13:49,870 --> 00:13:55,269
database and published it it's very

00:13:51,459 --> 00:13:57,130
incomplete but it will do here I also

00:13:55,269 --> 00:13:59,470
built a rudimentary little visualizer

00:13:57,130 --> 00:14:02,560
for it and we'll see that in a bit

00:13:59,470 --> 00:14:05,290
so ok in order to solve these things we

00:14:02,560 --> 00:14:07,180
could use breadth-first search and many

00:14:05,290 --> 00:14:09,100
of you maybe most of you maybe all of

00:14:07,180 --> 00:14:10,540
you I don't know may already know what

00:14:09,100 --> 00:14:13,120
breadth-first searches but just in case

00:14:10,540 --> 00:14:15,730
I am now going to give the world's worst

00:14:13,120 --> 00:14:17,410
overview of breadth-first search let's

00:14:15,730 --> 00:14:17,980
go back to connecting Katy Perry to

00:14:17,410 --> 00:14:21,209
Kevin Bacon

00:14:17,980 --> 00:14:23,649
step one is Katy Perry Kevin Bacon

00:14:21,209 --> 00:14:25,930
that's a JavaScript truth triple equal

00:14:23,649 --> 00:14:29,380
there in the middle the answer is

00:14:25,930 --> 00:14:31,180
obviously no step two find everyone that

00:14:29,380 --> 00:14:32,980
was in a movie with Katy Perry do any of

00:14:31,180 --> 00:14:34,870
those people happen to be Kevin Bacon

00:14:32,980 --> 00:14:36,370
and the answer is still no step three

00:14:34,870 --> 00:14:37,930
find everyone that was in a movie with

00:14:36,370 --> 00:14:39,519
any of those people that were in a movie

00:14:37,930 --> 00:14:41,019
with Katy Perry do any of those people

00:14:39,519 --> 00:14:42,519
happen to be Kevin Bacon and as we saw

00:14:41,019 --> 00:14:44,560
before with the Katy Perry John

00:14:42,519 --> 00:14:46,839
Malkovich Kevin Bacon thing the answer

00:14:44,560 --> 00:14:48,519
is yes so we're done congratulations you

00:14:46,839 --> 00:14:50,110
just witnessed the worst explanation of

00:14:48,519 --> 00:14:51,910
breadth-first search ever but we're not

00:14:50,110 --> 00:14:54,100
done let's do a slightly better

00:14:51,910 --> 00:14:55,630
explanation this will be second worst

00:14:54,100 --> 00:14:57,730
explanation of breadth-first search ever

00:14:55,630 --> 00:14:59,139
we're again going to connect Katy Perry

00:14:57,730 --> 00:15:00,490
Kevin Bacon but this time not through

00:14:59,139 --> 00:15:03,339
movies this time let's do it through

00:15:00,490 --> 00:15:05,589
music Kevin Bacon has a band with his

00:15:03,339 --> 00:15:07,510
brother Michael Bacon and the band is

00:15:05,589 --> 00:15:11,470
called the bacon brothers I am NOT

00:15:07,510 --> 00:15:13,779
making that up so let's see if we can

00:15:11,470 --> 00:15:16,930
connect Katy Perry to Kevin Bacon via

00:15:13,779 --> 00:15:19,899
music step one is Katy Perry Kevin Bacon

00:15:16,930 --> 00:15:21,670
No so here's a visualization of Katy

00:15:19,899 --> 00:15:23,649
Perry and everyone she recorded with on

00:15:21,670 --> 00:15:25,000
her album one of the boys which I'm

00:15:23,649 --> 00:15:26,829
sorry to say is the only album of hers

00:15:25,000 --> 00:15:28,570
that I have in the data set you can open

00:15:26,829 --> 00:15:30,640
a pull request to fix that if you want

00:15:28,570 --> 00:15:32,290
to correct that massive injustice but

00:15:30,640 --> 00:15:34,180
anyway Katy Perry is a circle in the

00:15:32,290 --> 00:15:35,860
middle and each circle the surrounding

00:15:34,180 --> 00:15:37,630
ring is someone who is one step away

00:15:35,860 --> 00:15:39,400
from Katy Perry because they recorded

00:15:37,630 --> 00:15:42,820
with her on their album notably absent

00:15:39,400 --> 00:15:44,920
in that ring of people Kevin Bacon now

00:15:42,820 --> 00:15:46,420
imagine we take each of the circles in

00:15:44,920 --> 00:15:47,650
the ring around Katy Perry and we find

00:15:46,420 --> 00:15:49,060
out everyone who recorded with each of

00:15:47,650 --> 00:15:50,560
those people and we take all those

00:15:49,060 --> 00:15:52,570
people and make an outer ring with

00:15:50,560 --> 00:15:54,490
circles for each of those people now I

00:15:52,570 --> 00:15:56,140
didn't do that but I did scroll this

00:15:54,490 --> 00:15:57,460
blue riot line around things to show

00:15:56,140 --> 00:15:59,350
where the outer ring of circles would be

00:15:57,460 --> 00:16:01,090
and the number of circles the number of

00:15:59,350 --> 00:16:03,370
circles in that ring is going to grow

00:16:01,090 --> 00:16:04,990
exponentially or at least exponentially

00:16:03,370 --> 00:16:07,840
ish it's gonna grow very very quickly

00:16:04,990 --> 00:16:08,890
which is part of why I didn't do it so

00:16:07,840 --> 00:16:09,970
you don't want to see all those circles

00:16:08,890 --> 00:16:11,290
anyway but I'm here to tell you

00:16:09,970 --> 00:16:12,970
something exciting about that outer ring

00:16:11,290 --> 00:16:14,530
it totally has Kevin Bacon in it and

00:16:12,970 --> 00:16:16,270
that's basically breadth-first search

00:16:14,530 --> 00:16:18,070
now we can take a look at the results

00:16:16,270 --> 00:16:19,240
instruct our paths so here's what the

00:16:18,070 --> 00:16:21,460
path looks like if you don't believe me

00:16:19,240 --> 00:16:23,980
it's Katy Perry the David Stuart Dave

00:16:21,460 --> 00:16:26,860
Stewart Jon Bon Jovi - Kevin Bacon okay

00:16:23,980 --> 00:16:29,140
so that's breadth-first search now let's

00:16:26,860 --> 00:16:30,490
implement it no no just kidding four

00:16:29,140 --> 00:16:32,110
verses of this presentation it's an

00:16:30,490 --> 00:16:33,280
implementation detail and there are

00:16:32,110 --> 00:16:34,570
trade-offs and various ways to implement

00:16:33,280 --> 00:16:36,910
it that we don't really have time to go

00:16:34,570 --> 00:16:39,610
into you can check out the repository

00:16:36,910 --> 00:16:40,870
for how I implemented it as well as to

00:16:39,610 --> 00:16:42,310
other algorithms we'll talk about in a

00:16:40,870 --> 00:16:44,080
bit but the important thing is that our

00:16:42,310 --> 00:16:46,090
approach will keep the CPU busy rather

00:16:44,080 --> 00:16:47,410
than do a bunch of work up front this is

00:16:46,090 --> 00:16:48,850
so that we can see how cool worker

00:16:47,410 --> 00:16:50,530
threads are but it's also a legitimate

00:16:48,850 --> 00:16:52,120
trade-off one might make in the real

00:16:50,530 --> 00:16:54,010
world it's not always worth it to spend

00:16:52,120 --> 00:16:56,140
a bunch of time upfront pre-processing

00:16:54,010 --> 00:16:57,880
if it's too time-consuming or takes up

00:16:56,140 --> 00:16:59,620
too many too much storage or if there's

00:16:57,880 --> 00:17:01,390
too much unpredictability about what

00:16:59,620 --> 00:17:03,130
you're going to get etc so here's what

00:17:01,390 --> 00:17:05,709
it looks like let's step through this

00:17:03,130 --> 00:17:07,120
okay the first line gets all the track's

00:17:05,709 --> 00:17:09,040
for the start person let's say it's a

00:17:07,120 --> 00:17:12,150
Reetha Franklin and puts all those

00:17:09,040 --> 00:17:14,230
tracks at the element at index zero

00:17:12,150 --> 00:17:15,820
that's index zero and the array of

00:17:14,230 --> 00:17:17,320
tracks for the start person now the

00:17:15,820 --> 00:17:19,680
index indicates how many steps we've

00:17:17,320 --> 00:17:21,910
gone from the start individual so um

00:17:19,680 --> 00:17:23,560
this next line populates the

00:17:21,910 --> 00:17:25,390
corresponding array of individuals that

00:17:23,560 --> 00:17:27,910
are in that are the source of the tracks

00:17:25,390 --> 00:17:29,890
above again in index zero in this case

00:17:27,910 --> 00:17:33,400
it's an array of just one individual

00:17:29,890 --> 00:17:34,780
knee namely Aretha Franklin for the two

00:17:33,400 --> 00:17:36,100
lines starting here we're going to do

00:17:34,780 --> 00:17:38,010
the exact same thing for the target

00:17:36,100 --> 00:17:40,090
person let's say it's Carrie Brownstein

00:17:38,010 --> 00:17:41,740
this line checks to see if we have a

00:17:40,090 --> 00:17:42,340
match by seeing if there is one or more

00:17:41,740 --> 00:17:45,520
tracks

00:17:42,340 --> 00:17:47,409
that are in both lists of tracks lastly

00:17:45,520 --> 00:17:50,799
this wild loop runs until we find a

00:17:47,409 --> 00:17:52,450
match so this line adds all the

00:17:50,799 --> 00:17:54,279
individuals and tracks that result from

00:17:52,450 --> 00:17:56,500
going out one more step from the start

00:17:54,279 --> 00:17:58,029
individual then we've gone this far so

00:17:56,500 --> 00:17:59,919
all the people on tracks with Aretha

00:17:58,029 --> 00:18:01,480
Franklin then the next time it runs it's

00:17:59,919 --> 00:18:02,950
all the people on tracks but they're in

00:18:01,480 --> 00:18:05,950
people's tracking let's see out our blue

00:18:02,950 --> 00:18:09,070
line and so on and so forth and this

00:18:05,950 --> 00:18:10,659
line updates the matches list so the

00:18:09,070 --> 00:18:13,240
while loop will stop if we found a match

00:18:10,659 --> 00:18:15,520
each time through the that last while

00:18:13,240 --> 00:18:18,220
loop like I said grows exponentially ish

00:18:15,520 --> 00:18:20,409
gets slower and slower and slower with

00:18:18,220 --> 00:18:23,230
longer and longer paths so here's a run

00:18:20,409 --> 00:18:24,370
with the results it took more than 14

00:18:23,230 --> 00:18:26,380
seconds just to do the breadth-first

00:18:24,370 --> 00:18:28,630
search that's that's a lot we can do

00:18:26,380 --> 00:18:32,070
better even without worker threads we

00:18:28,630 --> 00:18:34,750
can do bi-directional search so uh

00:18:32,070 --> 00:18:36,070
bi-directional search right okay now at

00:18:34,750 --> 00:18:38,049
this point you may be feeling a bit like

00:18:36,070 --> 00:18:39,730
the you know this dog you might be

00:18:38,049 --> 00:18:41,049
thinking when is it gonna shut up about

00:18:39,730 --> 00:18:43,179
this stuff and go back to worker threads

00:18:41,049 --> 00:18:45,279
soon don't worry so but first

00:18:43,179 --> 00:18:46,840
bi-directional search here's how it

00:18:45,279 --> 00:18:48,309
works first Katy Perry is not Kevin

00:18:46,840 --> 00:18:50,710
Bacon despite striking resemblance

00:18:48,309 --> 00:18:52,390
second we look for everyone that

00:18:50,710 --> 00:18:55,510
connected to Katy Perry and check to see

00:18:52,390 --> 00:18:57,130
if Kevin Bacon is in there he is not now

00:18:55,510 --> 00:18:59,080
we do something different we bounce back

00:18:57,130 --> 00:19:00,309
to Kevin Bacon and we get everyone

00:18:59,080 --> 00:19:02,409
connected to him we check to see if

00:19:00,309 --> 00:19:05,470
there's an overlap and again there isn't

00:19:02,409 --> 00:19:08,049
and then we do once you know we okay so

00:19:05,470 --> 00:19:10,630
right I sky obviously to leave this

00:19:08,049 --> 00:19:11,919
slide that's okay though so we do one

00:19:10,630 --> 00:19:14,049
for Kevin Bacon and so on so forth until

00:19:11,919 --> 00:19:16,240
they share a person and it's gonna look

00:19:14,049 --> 00:19:18,190
like this so here's your search that

00:19:16,240 --> 00:19:19,720
oval on the left is Katy Perry that oval

00:19:18,190 --> 00:19:21,309
on the right is Kevin Bacon they're not

00:19:19,720 --> 00:19:23,049
the same person there's all the people

00:19:21,309 --> 00:19:24,760
play with Katy Perry okay they're not

00:19:23,049 --> 00:19:26,470
Kevin Bacon there's all the people that

00:19:24,760 --> 00:19:27,789
played with with with the people that

00:19:26,470 --> 00:19:28,210
play with Katy Perry still no Kevin

00:19:27,789 --> 00:19:29,559
Bacon

00:19:28,210 --> 00:19:31,419
okay that was breadth-first search we

00:19:29,559 --> 00:19:33,730
found Kevin Bacon now let's do it with

00:19:31,419 --> 00:19:34,510
bi-directional search okay one step away

00:19:33,730 --> 00:19:36,279
from Katy Perry

00:19:34,510 --> 00:19:37,750
oh look Kevin Bacon and now well that

00:19:36,279 --> 00:19:39,250
wasn't an expensive search because we're

00:19:37,750 --> 00:19:40,840
not going to the outer circles yet oh

00:19:39,250 --> 00:19:42,250
look we only have to do one expensive

00:19:40,840 --> 00:19:44,080
search we're gonna see a lot better

00:19:42,250 --> 00:19:47,169
performance before we get a match okay

00:19:44,080 --> 00:19:48,700
um don't believe me about bi-directional

00:19:47,169 --> 00:19:50,350
search or I've gone too fast hey there's

00:19:48,700 --> 00:19:52,240
a Wikipedia article and even talks about

00:19:50,350 --> 00:19:53,830
big o-notation prove that it's faster

00:19:52,240 --> 00:19:55,330
and better and all that sort of stuff

00:19:53,830 --> 00:19:57,490
here's what bi-directional search looks

00:19:55,330 --> 00:20:00,770
like implemented

00:19:57,490 --> 00:20:02,240
and we're just gonna look at the while

00:20:00,770 --> 00:20:03,380
loop because that's where all the that's

00:20:02,240 --> 00:20:05,990
where all the interesting changes

00:20:03,380 --> 00:20:07,370
basically instead of doing just the one

00:20:05,990 --> 00:20:09,779
side the start side we're gonna do the

00:20:07,370 --> 00:20:12,389
start side and the target side

00:20:09,779 --> 00:20:13,950
and holy moley we went from over 14

00:20:12,389 --> 00:20:15,299
seconds less than three seconds that's

00:20:13,950 --> 00:20:16,950
awesome that's probably good enough

00:20:15,299 --> 00:20:19,679
actually to just called it today but

00:20:16,950 --> 00:20:20,940
wait why be bound by a single thread

00:20:19,679 --> 00:20:23,249
rather than doing one breadth-first

00:20:20,940 --> 00:20:24,509
search from Katy Perry and then waiting

00:20:23,249 --> 00:20:26,159
for it to finish and then checking

00:20:24,509 --> 00:20:27,450
against Kevin Bacon and when you forgot

00:20:26,159 --> 00:20:29,369
to finish and then bouncing back to Katy

00:20:27,450 --> 00:20:31,529
Perry why not just sort of just let them

00:20:29,369 --> 00:20:32,759
both run and give you data as fast as

00:20:31,529 --> 00:20:34,499
they can and every time you get data

00:20:32,759 --> 00:20:36,960
from one check to see if you can stop

00:20:34,499 --> 00:20:39,359
stop both threads and go from there and

00:20:36,960 --> 00:20:40,499
see how fast that is so to create our

00:20:39,359 --> 00:20:42,330
worker thread to this time we are

00:20:40,499 --> 00:20:43,919
calling new worker again and this time

00:20:42,330 --> 00:20:46,440
we are putting the worker code in a file

00:20:43,919 --> 00:20:46,799
called worker j/s so we'll see that in a

00:20:46,440 --> 00:20:48,119
moment

00:20:46,799 --> 00:20:49,409
there's also a new thing over here in

00:20:48,119 --> 00:20:51,690
the second argument which is a worker

00:20:49,409 --> 00:20:53,879
data property this allows us to provide

00:20:51,690 --> 00:20:56,609
the idea of the individual just to start

00:20:53,879 --> 00:20:58,320
with this serializes the data and sends

00:20:56,609 --> 00:21:00,059
it to the worker which then uncie

00:20:58,320 --> 00:21:02,700
realises it into its own copy of the

00:21:00,059 --> 00:21:05,249
data now worker thread so that's kind of

00:21:02,700 --> 00:21:07,379
just like passing you know basically you

00:21:05,249 --> 00:21:10,049
know more or less JSON data over and

00:21:07,379 --> 00:21:11,789
then you know it uncie realizes the JSON

00:21:10,049 --> 00:21:14,369
day that's not exactly JSON data it can

00:21:11,789 --> 00:21:15,239
handle circular references but we're

00:21:14,369 --> 00:21:17,249
gonna threads could do this awesome

00:21:15,239 --> 00:21:19,830
magical thing where if you do things

00:21:17,249 --> 00:21:21,749
just right you can share memory and also

00:21:19,830 --> 00:21:23,489
transfer memory buffers between the main

00:21:21,749 --> 00:21:25,139
thread and the worker thread sharing

00:21:23,489 --> 00:21:27,210
memory doesn't actually resemble sharing

00:21:25,139 --> 00:21:29,519
Nacho's but I needed an image anyway

00:21:27,210 --> 00:21:30,899
we're doing this in the app we're not

00:21:29,519 --> 00:21:32,609
doing this in the app working data just

00:21:30,899 --> 00:21:35,429
sends a copy but if your data is of a

00:21:32,609 --> 00:21:36,929
predictable size and format and there's

00:21:35,429 --> 00:21:38,309
a lot of it look at the docs for

00:21:36,929 --> 00:21:41,279
information on sharing and transferring

00:21:38,309 --> 00:21:43,289
data it's really cool in addition to the

00:21:41,279 --> 00:21:45,269
shared memory stuff there's pooling for

00:21:43,289 --> 00:21:46,739
this application we oh we always need

00:21:45,269 --> 00:21:48,239
two workers and we don't care about the

00:21:46,739 --> 00:21:50,099
cost of starting them up only when we

00:21:48,239 --> 00:21:52,109
need them but in an application where

00:21:50,099 --> 00:21:53,190
where your needs are more dynamic you're

00:21:52,109 --> 00:21:55,320
trying to get the absolute best

00:21:53,190 --> 00:21:56,639
performance you can you'll want to

00:21:55,320 --> 00:21:58,679
investigate having a pool of workers

00:21:56,639 --> 00:21:59,909
that you use as needed and they're NPM

00:21:58,679 --> 00:22:02,820
modules that help you do that if you

00:21:59,909 --> 00:22:04,200
need to anyway over in the worker we're

00:22:02,820 --> 00:22:06,149
reading the worker data value is done

00:22:04,200 --> 00:22:07,469
like this we import the work of data

00:22:06,149 --> 00:22:10,019
property from the built in worker

00:22:07,469 --> 00:22:11,840
threads module and then we read the

00:22:10,019 --> 00:22:13,520
value of the ID key

00:22:11,840 --> 00:22:16,010
context switching back to the main

00:22:13,520 --> 00:22:18,770
thread we have an error listener that

00:22:16,010 --> 00:22:20,779
simply throws any unexpected errors and

00:22:18,770 --> 00:22:22,460
we call a callback that we use when we

00:22:20,779 --> 00:22:23,900
receive a message from the worker the

00:22:22,460 --> 00:22:25,460
index here is used to distinguish the

00:22:23,900 --> 00:22:27,260
results in Katy Perry's group from the

00:22:25,460 --> 00:22:29,299
results in Kevin Bacon's group we might

00:22:27,260 --> 00:22:31,340
use 0 for Katy Perry and 1 for Kevin

00:22:29,299 --> 00:22:32,690
Bacon let's head over to the worker code

00:22:31,340 --> 00:22:35,690
again to see how the worker sends a

00:22:32,690 --> 00:22:37,429
message so when the worker is created it

00:22:35,690 --> 00:22:39,230
grabs all the track's the individual is

00:22:37,429 --> 00:22:42,830
on and also makes a note of the

00:22:39,230 --> 00:22:45,559
individual ID and uses post message to

00:22:42,830 --> 00:22:47,000
send the message and that's it that will

00:22:45,559 --> 00:22:48,860
cause the message event to be emitted in

00:22:47,000 --> 00:22:50,090
the main thread resulting in execution

00:22:48,860 --> 00:22:52,779
of the callback so let's check out what

00:22:50,090 --> 00:22:52,779
the callback does

00:22:52,960 --> 00:22:56,830
again the index is a value that lets us

00:22:55,059 --> 00:22:59,440
know if we're dealing with Katy Perry or

00:22:56,830 --> 00:23:00,880
Kevin Bacon is it start or the target we

00:22:59,440 --> 00:23:03,100
also get all the individuals for whom

00:23:00,880 --> 00:23:04,750
the track is derived tracks are derived

00:23:03,100 --> 00:23:07,179
rather and we check to see if there are

00:23:04,750 --> 00:23:08,620
any tracks that are on both lists thus

00:23:07,179 --> 00:23:12,309
indicating our expanding circles are

00:23:08,620 --> 00:23:13,840
overlapping if we have a match we call a

00:23:12,309 --> 00:23:16,149
function called done we'll check that on

00:23:13,840 --> 00:23:17,710
in a moment and if we're not done we

00:23:16,149 --> 00:23:19,299
send a message to the worker to go get

00:23:17,710 --> 00:23:20,799
us another expanding ring of tracks and

00:23:19,299 --> 00:23:22,390
individuals I'm not going to show the

00:23:20,799 --> 00:23:24,279
worker code that listens for the message

00:23:22,390 --> 00:23:26,649
is pretty similar to what we've already

00:23:24,279 --> 00:23:28,390
seen if it gets a string value next it

00:23:26,649 --> 00:23:29,980
gets the next set of search results and

00:23:28,390 --> 00:23:32,289
sends them back to the main thread this

00:23:29,980 --> 00:23:33,700
is way too much for 25 minutes but just

00:23:32,289 --> 00:23:35,200
know that to receive the message the

00:23:33,700 --> 00:23:37,960
workers listen to the message event on

00:23:35,200 --> 00:23:39,010
the parent port object so I do want to

00:23:37,960 --> 00:23:40,419
talk about that done function really

00:23:39,010 --> 00:23:42,669
quickly though it removes the listener

00:23:40,419 --> 00:23:43,960
we have for both workers and then it

00:23:42,669 --> 00:23:46,179
calls this method that's on the worker

00:23:43,960 --> 00:23:47,500
called Turman or terminate does it ends

00:23:46,179 --> 00:23:49,120
the worker thread and returns a promise

00:23:47,500 --> 00:23:52,120
that resolves to the return code of the

00:23:49,120 --> 00:23:53,740
worker code if we have cleanup code or

00:23:52,120 --> 00:23:55,419
whatever we want to make sure it runs we

00:23:53,740 --> 00:23:57,520
can put in an async function and await

00:23:55,419 --> 00:23:59,230
the value rather than just calling

00:23:57,520 --> 00:24:00,820
terminate like we're doing here but in

00:23:59,230 --> 00:24:02,529
this case you know we don't have any

00:24:00,820 --> 00:24:04,029
cleanup I don't care it connects it with

00:24:02,529 --> 00:24:07,000
an error code I just want it to go away

00:24:04,029 --> 00:24:08,850
so do that and lastly we've print our

00:24:07,000 --> 00:24:10,960
results so let's see how it performs

00:24:08,850 --> 00:24:12,429
remember it took 14 seconds with

00:24:10,960 --> 00:24:13,809
breadth-first search it took it took

00:24:12,429 --> 00:24:15,640
just under three seconds with

00:24:13,809 --> 00:24:17,529
bi-directional search oh my gosh it's

00:24:15,640 --> 00:24:19,630
less than 700 milliseconds now I can't

00:24:17,529 --> 00:24:22,649
believe it it's unbelievable by the way

00:24:19,630 --> 00:24:25,000
all of these scripts are in the

00:24:22,649 --> 00:24:27,460
repository at posted earlier I showed

00:24:25,000 --> 00:24:30,549
earlier and that's it pal spent mistakes

00:24:27,460 --> 00:24:31,809
commlink anyway um now with my 53

00:24:30,549 --> 00:24:33,309
seconds remaining I have to admit that

00:24:31,809 --> 00:24:34,570
the main motivation here wasn't really

00:24:33,309 --> 00:24:36,399
to talk about worker threads awesome as

00:24:34,570 --> 00:24:39,490
they are it was to find out how far I

00:24:36,399 --> 00:24:41,140
was from little Nass X the answer by the

00:24:39,490 --> 00:24:42,789
way is 6 degrees

00:24:41,140 --> 00:24:44,529
it starts with little mass X he of

00:24:42,789 --> 00:24:47,350
course you know recorded with Billy Ray

00:24:44,529 --> 00:24:49,510
Cyrus on you know I have him come on old

00:24:47,350 --> 00:24:51,610
town road the second degree is country

00:24:49,510 --> 00:24:52,899
star Mary Chapin carpenter who along

00:24:51,610 --> 00:24:54,760
with Billy Ray Cyrus was on that Dolly

00:24:52,899 --> 00:24:57,580
Parton song called Romeo Dolly Parton

00:24:54,760 --> 00:24:59,470
gets her own slide the Afro mentioned

00:24:57,580 --> 00:25:01,000
Romeo was her thirty second studio album

00:24:59,470 --> 00:25:02,230
she wrote it she produced the record

00:25:01,000 --> 00:25:03,970
people who aren't country fans don't

00:25:02,230 --> 00:25:05,409
realize the extent to achieved in

00:25:03,970 --> 00:25:06,850
control over sound in her career I'm not

00:25:05,409 --> 00:25:08,770
a country fan but I

00:25:06,850 --> 00:25:10,240
recognises she's a legend and a force to

00:25:08,770 --> 00:25:13,270
be reckoned with do not mess with dolly

00:25:10,240 --> 00:25:15,460
and also you know since we're talking

00:25:13,270 --> 00:25:16,840
about Old Town Road but the analogous

00:25:15,460 --> 00:25:19,180
legend unfortunately reckoned with a

00:25:16,840 --> 00:25:20,860
node is on a Henningsen she's the one

00:25:19,180 --> 00:25:22,750
most responsible for implementing worker

00:25:20,860 --> 00:25:24,670
threads and as far as all things node go

00:25:22,750 --> 00:25:25,450
is extremely difficult to give on the

00:25:24,670 --> 00:25:27,310
too much credit

00:25:25,450 --> 00:25:30,310
so I'm I'm up here talking about worker

00:25:27,310 --> 00:25:31,690
threads but like she did 99.999% of the

00:25:30,310 --> 00:25:33,010
hard work get this done and the other

00:25:31,690 --> 00:25:35,200
point zero one percent was done by

00:25:33,010 --> 00:25:37,060
people aren't me anyway back to this

00:25:35,200 --> 00:25:38,620
nonsense after Dolly Parton's track Mary

00:25:37,060 --> 00:25:40,300
Chapin carpenter goes through Saturday

00:25:38,620 --> 00:25:41,980
Night Live bandleader G Smith and Tom

00:25:40,300 --> 00:25:44,050
Waits trumpet player before getting to

00:25:41,980 --> 00:25:45,490
me but why should I restrict fun Benny

00:25:44,050 --> 00:25:47,470
exercises like this to me

00:25:45,490 --> 00:25:50,200
I put this up at a glitch URL which is

00:25:47,470 --> 00:25:52,780
you know works so if you want to you

00:25:50,200 --> 00:25:53,980
know try to connect it's retic know I

00:25:52,780 --> 00:25:56,170
mean let's just great but I mean you

00:25:53,980 --> 00:25:57,850
know it's like you know like I you can

00:25:56,170 --> 00:26:00,280
just also get the repository and just

00:25:57,850 --> 00:26:02,620
run the Express app on your local

00:26:00,280 --> 00:26:04,300
machine they'll be faster oh let's just

00:26:02,620 --> 00:26:07,180
awesome I love it but you can go over

00:26:04,300 --> 00:26:08,500
here and try to you know see if you can

00:26:07,180 --> 00:26:12,550
connect you know I don't know

00:26:08,500 --> 00:26:13,450
Miles Davis to Billy Ray Cyrus yeah so

00:26:12,550 --> 00:26:15,400
like I said everything's a palace my

00:26:13,450 --> 00:26:17,770
mistake house calm thanks I'm out of

00:26:15,400 --> 00:26:22,950
time and yeah thank you

00:26:17,770 --> 00:26:22,950

YouTube URL: https://www.youtube.com/watch?v=GRb-XQ5JRA8


