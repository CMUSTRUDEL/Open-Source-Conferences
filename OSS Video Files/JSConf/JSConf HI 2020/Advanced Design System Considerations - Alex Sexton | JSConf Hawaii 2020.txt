Title: Advanced Design System Considerations - Alex Sexton | JSConf Hawaii 2020
Publication date: 2020-03-24
Playlist: JSConf HI 2020
Description: 
	"Design Systems" and component libraries are a popular solution for abstracting common UI elements and flows to be reusable across many applications.They allow you to spend more time on the details, and reduce the complexity of implementing consistent experiences.There's a good chance that you're using one already!

Scaling these systems to provide value to *lots* of teams across your organization, or in open - source - land, requires solving for each team's different use-cases simultaneously. How do you add in support for internationalization, accessibility, theming (dark mode!), server rendering, or multiple render targets? How do you support the teams that need it in React *and* the teams that need it in Svelte? How do you provide a system that is flexible enough, but doesn't become prohibitively complex? How can you export your components to popular design tools for your designers to build with?

Let's dive into approaches to solving these problems in scalable ways, and take a look at how Stripe has chosen to tackle some of these issues in the real world. Let's look at how to make sure a design system specifies design choices and allows users to build quickly, but doesn't lock you into specific frameworks or trendy tools out of the gate.

Slides: https://noti.st/slexaxton/6mnxbQ/advanced-design-systems-considerations

JSConf Hawaii will return soon
https://www.jsconfhi.com/
Captions: 
	00:00:08,639 --> 00:00:14,620
I'm here to talk today about I actually

00:00:12,099 --> 00:00:16,689
regret the name of my talk a little bit

00:00:14,620 --> 00:00:19,689
advanced Design Systems considerations

00:00:16,689 --> 00:00:23,800
mostly because it's a mouthful but also

00:00:19,689 --> 00:00:27,369
I mean advanced less like advanced math

00:00:23,800 --> 00:00:31,090
and more like advanced osteoarthritis or

00:00:27,369 --> 00:00:33,160
something right I want to talk about

00:00:31,090 --> 00:00:35,260
what the work is once you convince

00:00:33,160 --> 00:00:36,790
everyone at your company to use your

00:00:35,260 --> 00:00:38,320
design system and once you're done

00:00:36,790 --> 00:00:43,000
building out all the name-brand

00:00:38,320 --> 00:00:44,890
components so I work with stripe on our

00:00:43,000 --> 00:00:47,260
design system team we're two designers

00:00:44,890 --> 00:00:48,670
two engineers and a manager for a total

00:00:47,260 --> 00:00:50,290
of five people and I just found out from

00:00:48,670 --> 00:00:53,170
Wikipedia I promise this is true that

00:00:50,290 --> 00:00:54,400
stripe is over 2,000 employees now so

00:00:53,170 --> 00:00:56,530
that's a heck of a ratio one to five

00:00:54,400 --> 00:00:59,649
that's the goal right for design systems

00:00:56,530 --> 00:01:01,930
their leverage dedicated team of four

00:00:59,649 --> 00:01:03,310
individual contributors can abstract and

00:01:01,930 --> 00:01:06,549
maintain the design language and

00:01:03,310 --> 00:01:08,890
technical implementation for a component

00:01:06,549 --> 00:01:12,159
library for 2,000 people how's it going

00:01:08,890 --> 00:01:16,229
it's fine it's good it's I think I think

00:01:12,159 --> 00:01:20,289
it does a good job it's not magic

00:01:16,229 --> 00:01:21,819
despite my most sincere efforts I was a

00:01:20,289 --> 00:01:24,459
great talk by the way

00:01:21,819 --> 00:01:27,189
I think we create more value than we

00:01:24,459 --> 00:01:29,889
remove I believe in our goals and I

00:01:27,189 --> 00:01:30,819
think my co-workers and teammates on

00:01:29,889 --> 00:01:32,889
this team are some of the most

00:01:30,819 --> 00:01:36,490
thoughtful and capable people to be

00:01:32,889 --> 00:01:38,229
working on this problem in existence so

00:01:36,490 --> 00:01:42,850
we've done nifty work on accessible

00:01:38,229 --> 00:01:46,179
color systems applying a lot of magic to

00:01:42,850 --> 00:01:48,939
choosing one and we've made building

00:01:46,179 --> 00:01:53,020
consistent stripes looking interfaces a

00:01:48,939 --> 00:01:54,459
little bit easier and we have some or

00:01:53,020 --> 00:01:56,799
another version of just about every

00:01:54,459 --> 00:01:59,859
component that you can think of often to

00:01:56,799 --> 00:02:02,289
our detriment this is massive work

00:01:59,859 --> 00:02:04,209
design systems are hardly a new concept

00:02:02,289 --> 00:02:07,779
you don't look much further than an old

00:02:04,209 --> 00:02:10,450
NASA graphics standard manual from 60s

00:02:07,779 --> 00:02:12,220
and 70s to find cool cool design systems

00:02:10,450 --> 00:02:14,380
but there are very new challenges

00:02:12,220 --> 00:02:16,450
especially technical ones that compound

00:02:14,380 --> 00:02:20,079
on the old challenges the complexity is

00:02:16,450 --> 00:02:22,040
multiplied Robert Rendell recently wrote

00:02:20,079 --> 00:02:24,709
an essay that compared design systems to

00:02:22,040 --> 00:02:27,469
the idea of a hyper object and that idea

00:02:24,709 --> 00:02:30,140
resonated with my team very strongly and

00:02:27,469 --> 00:02:32,750
with me he is referencing a book by

00:02:30,140 --> 00:02:34,609
James bridle called the new Dark Age it

00:02:32,750 --> 00:02:36,859
says a hyper object is I'm going to read

00:02:34,609 --> 00:02:39,170
to you a thing that surrounds us

00:02:36,859 --> 00:02:41,019
envelops and entangles us that is

00:02:39,170 --> 00:02:43,489
literally too big to see in its entirety

00:02:41,019 --> 00:02:44,959
mostly we perceive hyper objects through

00:02:43,489 --> 00:02:47,450
their influence on other things a

00:02:44,959 --> 00:02:48,819
melting ice sheet a dying sea the

00:02:47,450 --> 00:02:51,379
buffeting of a transatlantic flight

00:02:48,819 --> 00:02:53,120
hyper objects happen everywhere at once

00:02:51,379 --> 00:02:54,079
but we can only experience them in the

00:02:53,120 --> 00:02:56,090
local environment

00:02:54,079 --> 00:02:57,859
in fact they stand outside both our

00:02:56,090 --> 00:02:59,959
perception and our measurement they

00:02:57,859 --> 00:03:02,090
exist without us because they are so

00:02:59,959 --> 00:03:03,829
close and get so hard to see they defy

00:03:02,090 --> 00:03:05,780
our ability to describe them rationally

00:03:03,829 --> 00:03:07,790
and to master or overcome them in

00:03:05,780 --> 00:03:10,120
traditional sense climate change is a

00:03:07,790 --> 00:03:13,909
hyper object but so is nuclear radiation

00:03:10,120 --> 00:03:16,730
evolution and the Internet I agree

00:03:13,909 --> 00:03:19,459
that's very dramatic design systems are

00:03:16,730 --> 00:03:22,280
not climate change they do often feel

00:03:19,459 --> 00:03:24,079
like sneakily complex systems like no

00:03:22,280 --> 00:03:26,000
single person can hold the whole thing

00:03:24,079 --> 00:03:27,680
in their head anymore it's like trying

00:03:26,000 --> 00:03:30,290
to figure out what shape the crop circle

00:03:27,680 --> 00:03:31,699
is from inside the cornfield you can

00:03:30,290 --> 00:03:34,370
spend an incredible amount of time

00:03:31,699 --> 00:03:36,650
thoughtfully tackling an issue only to

00:03:34,370 --> 00:03:38,479
zoom out zoom out again just to see that

00:03:36,650 --> 00:03:41,139
you're working in a tiny subsection of a

00:03:38,479 --> 00:03:43,639
tiny subsection of your design system

00:03:41,139 --> 00:03:45,260
and that idea really sums up a lot of

00:03:43,639 --> 00:03:47,720
the work that's involved in the second

00:03:45,260 --> 00:03:50,150
and third waves there need a bit put

00:03:47,720 --> 00:03:51,979
into a design system it's all about

00:03:50,150 --> 00:03:54,590
trying to make the entire thing useful

00:03:51,979 --> 00:03:57,169
while all also making any arbitrary

00:03:54,590 --> 00:03:59,989
subset equally useful do not require

00:03:57,169 --> 00:04:01,959
each person each user of the system to

00:03:59,989 --> 00:04:04,010
hold the entire thing in their heads

00:04:01,959 --> 00:04:05,629
there's of course lots of information

00:04:04,010 --> 00:04:09,019
that exists on how to create a design

00:04:05,629 --> 00:04:10,459
system there books and tutorials and how

00:04:09,019 --> 00:04:12,650
to jump past a lot of the difficult pain

00:04:10,459 --> 00:04:14,299
points that's not my focus here but I

00:04:12,650 --> 00:04:16,519
certainly would be lost without all that

00:04:14,299 --> 00:04:18,549
prior art so I'd be happy to recommend

00:04:16,519 --> 00:04:21,109
some of that if you want to chat later

00:04:18,549 --> 00:04:22,520
you first get started on design system

00:04:21,109 --> 00:04:25,070
you have some fundamentally different

00:04:22,520 --> 00:04:26,479
and often opposite goals is when you're

00:04:25,070 --> 00:04:28,580
trying to level up an existing design

00:04:26,479 --> 00:04:30,680
system when you first get started you

00:04:28,580 --> 00:04:32,719
want to make lots of new components your

00:04:30,680 --> 00:04:34,580
goal is coverage you want to maximize

00:04:32,719 --> 00:04:35,720
the number of designs that are possible

00:04:34,580 --> 00:04:37,520
with your system

00:04:35,720 --> 00:04:39,530
you work on selling people to use it

00:04:37,520 --> 00:04:41,450
versus rolling their own components or

00:04:39,530 --> 00:04:43,460
doing one-off designs and you actively

00:04:41,450 --> 00:04:45,320
seek real estate in your applications to

00:04:43,460 --> 00:04:48,110
see what you can replace with a cleaner

00:04:45,320 --> 00:04:49,640
design system version of the thing you

00:04:48,110 --> 00:04:52,280
want people to be excited about using

00:04:49,640 --> 00:04:55,070
your design system once you hit critical

00:04:52,280 --> 00:04:56,870
mass of adoption your goals are to start

00:04:55,070 --> 00:04:59,600
your goals start shifting pretty quickly

00:04:56,870 --> 00:05:01,700
you worry more about keeping the system

00:04:59,600 --> 00:05:04,250
healthy and alive not about selling its

00:05:01,700 --> 00:05:06,350
value directly you fight to make sure

00:05:04,250 --> 00:05:08,180
you don't become too dated but for the

00:05:06,350 --> 00:05:11,750
most part he hit a stage where your goal

00:05:08,180 --> 00:05:14,540
is to blend into the platform one of my

00:05:11,750 --> 00:05:16,280
favorite 2019 goals on my team at stripe

00:05:14,540 --> 00:05:17,930
was that another team would announce a

00:05:16,280 --> 00:05:20,390
conversion of their application to our

00:05:17,930 --> 00:05:22,760
design system without thanking us at the

00:05:20,390 --> 00:05:25,160
end of the email our goal was to become

00:05:22,760 --> 00:05:26,780
part of the expected platform rather

00:05:25,160 --> 00:05:28,820
than an exciting tool that people have

00:05:26,780 --> 00:05:31,870
to think a lot about we it happened is

00:05:28,820 --> 00:05:34,160
both frustrating and very exciting

00:05:31,870 --> 00:05:36,050
another surprising change in the second

00:05:34,160 --> 00:05:37,430
phase is that where you once judge

00:05:36,050 --> 00:05:40,040
yourself on how many components you

00:05:37,430 --> 00:05:42,080
added in a quarter you start valuing the

00:05:40,040 --> 00:05:43,550
opposite whether it's crafty old

00:05:42,080 --> 00:05:45,740
components that never did the right

00:05:43,550 --> 00:05:46,880
thing anyway or super specific

00:05:45,740 --> 00:05:50,060
components that could probably be

00:05:46,880 --> 00:05:51,470
achieved by customizing generic ones you

00:05:50,060 --> 00:05:54,620
quickly appreciate the things that

00:05:51,470 --> 00:05:56,419
reduce the system complexity your

00:05:54,620 --> 00:05:57,950
primary goal stays the same as poor

00:05:56,419 --> 00:06:00,080
though it's to provide a system that

00:05:57,950 --> 00:06:03,560
adheres to your values so the resulting

00:06:00,080 --> 00:06:05,870
you eyes adhere to your values really

00:06:03,560 --> 00:06:08,630
common design system thing I see

00:06:05,870 --> 00:06:10,729
sometimes even attached to two goals for

00:06:08,630 --> 00:06:13,250
your business metrics or something as a

00:06:10,729 --> 00:06:15,790
desire to add components in perpetuity I

00:06:13,250 --> 00:06:18,229
think this happens for two reasons first

00:06:15,790 --> 00:06:19,820
is the idea that the more components you

00:06:18,229 --> 00:06:21,800
make the faster it will make developers

00:06:19,820 --> 00:06:23,750
and the more useful the library will be

00:06:21,800 --> 00:06:25,370
I think this assumption comes from a

00:06:23,750 --> 00:06:27,560
good place but I've never seen it play

00:06:25,370 --> 00:06:28,820
out in practice a very solid core of

00:06:27,560 --> 00:06:32,090
atomic components can be well understood

00:06:28,820 --> 00:06:34,580
and proposed and recomposed by your

00:06:32,090 --> 00:06:35,840
users and unlimited permutations you

00:06:34,580 --> 00:06:40,130
build them well you won't have to fit

00:06:35,840 --> 00:06:41,600
new ideas into old components the faulty

00:06:40,130 --> 00:06:43,160
assumption is that having a component

00:06:41,600 --> 00:06:45,020
that does something close to what you

00:06:43,160 --> 00:06:46,910
want makes you faster well when I think

00:06:45,020 --> 00:06:48,830
back to the most frustrating waste of

00:06:46,910 --> 00:06:49,460
time in my career it's almost always in

00:06:48,830 --> 00:06:51,590
trying to

00:06:49,460 --> 00:06:53,030
figure some mega components to do one

00:06:51,590 --> 00:06:55,190
thing that it wasn't quite designed to

00:06:53,030 --> 00:06:57,860
do so fight for a cut atomic components

00:06:55,190 --> 00:06:59,690
doesn't mean your applications shouldn't

00:06:57,860 --> 00:07:02,000
make their own logic list complex non

00:06:59,690 --> 00:07:04,550
non atomic components that they share

00:07:02,000 --> 00:07:05,930
between the app but it just means that

00:07:04,550 --> 00:07:09,139
those components probably shouldn't live

00:07:05,930 --> 00:07:10,940
in your design system the other reason I

00:07:09,139 --> 00:07:12,650
see engineers continuously add

00:07:10,940 --> 00:07:14,960
components is that they actually have a

00:07:12,650 --> 00:07:16,729
secret desire to rewrite the things that

00:07:14,960 --> 00:07:19,310
they don't own at the company I know

00:07:16,729 --> 00:07:20,810
this sounds like a conspiracy theory and

00:07:19,310 --> 00:07:23,360
I'm sorry for that but I'm gonna keep

00:07:20,810 --> 00:07:25,520
going it does follow a pretty natural

00:07:23,360 --> 00:07:27,500
evolution first you fix all the buttons

00:07:25,520 --> 00:07:29,479
and then you fix all the menus and tabs

00:07:27,500 --> 00:07:31,720
and cards and eventually you're out of

00:07:29,479 --> 00:07:33,770
kind of the atomic seeming components

00:07:31,720 --> 00:07:35,360
you still want things to look better and

00:07:33,770 --> 00:07:37,130
so instead of stopping you find yourself

00:07:35,360 --> 00:07:39,229
searching for any patterns that are

00:07:37,130 --> 00:07:41,750
reused more than one time to turn into

00:07:39,229 --> 00:07:43,340
components oh here's a person card and a

00:07:41,750 --> 00:07:46,370
detailed person card we could kind of

00:07:43,340 --> 00:07:49,460
smash those together and retake that

00:07:46,370 --> 00:07:52,240
land suddenly they're pretty business

00:07:49,460 --> 00:07:55,159
specific and pretty application specific

00:07:52,240 --> 00:07:56,810
and then you want the pricing page to

00:07:55,159 --> 00:07:58,909
look nicer but it's so entrenched in the

00:07:56,810 --> 00:08:00,620
old stack that no one will touch it so

00:07:58,909 --> 00:08:02,539
eventually throw off all pretenses of

00:08:00,620 --> 00:08:04,880
component reuse and you build the

00:08:02,539 --> 00:08:06,860
pricing banner component throw it in the

00:08:04,880 --> 00:08:10,759
design system and then replace it so you

00:08:06,860 --> 00:08:12,979
don't have to look at it anymore we have

00:08:10,759 --> 00:08:14,300
I I have these urges everyone has these

00:08:12,979 --> 00:08:16,639
urges but I'd recommend you work these

00:08:14,300 --> 00:08:18,199
things out or get organizationally

00:08:16,639 --> 00:08:21,080
rather than declaring manifest destiny

00:08:18,199 --> 00:08:22,659
on other teams technical debt you'll

00:08:21,080 --> 00:08:26,060
like your design system more in the end

00:08:22,659 --> 00:08:27,110
I want to dig back into the first point

00:08:26,060 --> 00:08:28,880
I brought up there though there's this

00:08:27,110 --> 00:08:30,770
common perception of design systems that

00:08:28,880 --> 00:08:33,050
they're intended to increase efficiency

00:08:30,770 --> 00:08:35,270
and I think this is entirely wrong but I

00:08:33,050 --> 00:08:37,339
think efficiency is a secondary goal of

00:08:35,270 --> 00:08:39,680
a design system the primary goal of a

00:08:37,339 --> 00:08:42,649
design system in my opinion is to uphold

00:08:39,680 --> 00:08:44,240
your values design systems are so you

00:08:42,649 --> 00:08:45,950
can ensure that when a developer is

00:08:44,240 --> 00:08:47,959
making trade-offs to ship something

00:08:45,950 --> 00:08:49,880
before a looming deadline that that

00:08:47,959 --> 00:08:51,290
thing falls off the chopping block that

00:08:49,880 --> 00:08:53,480
the thing that falls off the chopping

00:08:51,290 --> 00:08:55,459
block is an accessibility a performance

00:08:53,480 --> 00:08:57,680
or visual consistency or all attention

00:08:55,459 --> 00:09:00,079
to detail design systems are tools to

00:08:57,680 --> 00:09:01,760
uphold the quality of your product even

00:09:00,079 --> 00:09:03,320
in the face of consuming teams that

00:09:01,760 --> 00:09:05,750
aren't paying particular attention

00:09:03,320 --> 00:09:07,280
quality a design system is successful

00:09:05,750 --> 00:09:10,220
when someone can throw together equip a

00:09:07,280 --> 00:09:11,810
quick application and why while that

00:09:10,220 --> 00:09:14,090
application may fail to achieve the

00:09:11,810 --> 00:09:15,890
specific business goals it still upholds

00:09:14,090 --> 00:09:17,870
the values that are otherwise left

00:09:15,890 --> 00:09:19,730
behind in crunch time it's accessible

00:09:17,870 --> 00:09:23,060
consistent performant and whatever else

00:09:19,730 --> 00:09:24,500
you've decided is important to you one

00:09:23,060 --> 00:09:27,260
of my first actionable recommendations

00:09:24,500 --> 00:09:29,750
is to fight against the wrong contextual

00:09:27,260 --> 00:09:31,310
specificity and components it's very

00:09:29,750 --> 00:09:33,800
common to end up with a lot of similar

00:09:31,310 --> 00:09:36,170
components that often do almost the same

00:09:33,800 --> 00:09:39,110
thing and maybe even describe the

00:09:36,170 --> 00:09:41,540
context that they're used in icon button

00:09:39,110 --> 00:09:44,660
icon action icon menu icon all our

00:09:41,540 --> 00:09:46,250
seemingly icons it's also common to

00:09:44,660 --> 00:09:47,840
recognize this complexity and then move

00:09:46,250 --> 00:09:49,970
everything over into a single component

00:09:47,840 --> 00:09:52,880
and you end up with kind of like an

00:09:49,970 --> 00:09:55,370
explosion of props that all do something

00:09:52,880 --> 00:09:57,350
very specific only for one use case you

00:09:55,370 --> 00:09:59,180
can't always avoid one of these traps

00:09:57,350 --> 00:10:01,880
but we want to move in a direction that

00:09:59,180 --> 00:10:05,440
tries to allow the context to dictate

00:10:01,880 --> 00:10:07,670
the differences not a bunch of problem

00:10:05,440 --> 00:10:09,800
so let's see if we can contextually

00:10:07,670 --> 00:10:12,170
create a button icon which is the one at

00:10:09,800 --> 00:10:14,030
the top there without actually needing a

00:10:12,170 --> 00:10:15,650
component like that you notice in this

00:10:14,030 --> 00:10:19,220
example from the stripe dashboard we

00:10:15,650 --> 00:10:20,930
have two icon types visible one icon

00:10:19,220 --> 00:10:22,880
inside the button and one outside

00:10:20,930 --> 00:10:25,340
they're mostly the same but the one

00:10:22,880 --> 00:10:27,110
inside the button is 12 pixels and the

00:10:25,340 --> 00:10:28,160
one outside the button is 14 pixels

00:10:27,110 --> 00:10:31,480
that's your different I mean they're

00:10:28,160 --> 00:10:31,480
also different icons but relax

00:10:32,350 --> 00:10:35,580
I'd expect many people's first

00:10:33,940 --> 00:10:38,410
iterations to look something like this

00:10:35,580 --> 00:10:39,940
we add a prop directly to button to

00:10:38,410 --> 00:10:42,790
declare the type of the icon we'd like

00:10:39,940 --> 00:10:45,520
it to contain icon equals gear you can

00:10:42,790 --> 00:10:46,540
imagine it puts a gear into the icon but

00:10:45,520 --> 00:10:47,950
then we recognize that in order to

00:10:46,540 --> 00:10:49,570
change anything about the icon

00:10:47,950 --> 00:10:52,480
we'd actually need to duplicate all the

00:10:49,570 --> 00:10:53,770
props from icon onto button so if we

00:10:52,480 --> 00:10:56,260
wanted to change the size we'd have to

00:10:53,770 --> 00:10:59,440
like add an icon size prop there or an

00:10:56,260 --> 00:11:04,090
icon style prop to grab them all that's

00:10:59,440 --> 00:11:06,970
possible but not pretty it stands out to

00:11:04,090 --> 00:11:09,850
me that button also must now import icon

00:11:06,970 --> 00:11:11,970
whether you use it or not so let's try

00:11:09,850 --> 00:11:14,290
another approach to try to separate them

00:11:11,970 --> 00:11:17,380
put it directly inside the component

00:11:14,290 --> 00:11:19,540
like this so now we put an actual icon

00:11:17,380 --> 00:11:21,880
inside an actual button this is great

00:11:19,540 --> 00:11:25,690
and we could be done but like I said

00:11:21,880 --> 00:11:27,640
sadly icons are 14 pixels by default and

00:11:25,690 --> 00:11:29,530
the icons inside of a button are 12

00:11:27,640 --> 00:11:32,080
pixels by default we could make a rule

00:11:29,530 --> 00:11:34,240
that says all developers must remember

00:11:32,080 --> 00:11:36,370
to change the size to 12 when they put

00:11:34,240 --> 00:11:40,180
an icon in a button but we all know how

00:11:36,370 --> 00:11:42,400
well that would go our complexity of our

00:11:40,180 --> 00:11:44,590
system is leaking out we have a

00:11:42,400 --> 00:11:47,500
dependency between button icons that

00:11:44,590 --> 00:11:49,090
that we're not describing well so rather

00:11:47,500 --> 00:11:50,650
than require each developer to remember

00:11:49,090 --> 00:11:52,510
this on their own we could make a new

00:11:50,650 --> 00:11:55,030
component that's mostly an icon maybe it

00:11:52,510 --> 00:11:56,680
even wraps an icon but sets the button

00:11:55,030 --> 00:11:58,860
defaults instead of the regular icon

00:11:56,680 --> 00:12:01,210
defaults in this case being 12 pixels

00:11:58,860 --> 00:12:02,920
but we're back to button icon again this

00:12:01,210 --> 00:12:05,800
is this is where we started this is the

00:12:02,920 --> 00:12:07,630
hyper object in action the user of our

00:12:05,800 --> 00:12:10,510
system has to know about all the quirks

00:12:07,630 --> 00:12:11,890
involved in icons versus button icons to

00:12:10,510 --> 00:12:13,540
know that they want to put an icon into

00:12:11,890 --> 00:12:15,520
a button and they have to actually use

00:12:13,540 --> 00:12:17,080
the different type of icon not an icon

00:12:15,520 --> 00:12:18,670
itself and they have to learn the

00:12:17,080 --> 00:12:20,800
specific thing about the system they

00:12:18,670 --> 00:12:23,320
have to hold a lot more in their heads

00:12:20,800 --> 00:12:24,400
in order to use it also what happens if

00:12:23,320 --> 00:12:26,110
someone doesn't know about button icon

00:12:24,400 --> 00:12:28,780
and just jams an icon in there anyways

00:12:26,110 --> 00:12:34,570
then you are mixing 14 pixel until pixel

00:12:28,780 --> 00:12:35,680
icon Sheen one approaches all this that

00:12:34,570 --> 00:12:37,840
we could take somewhere in the middle of

00:12:35,680 --> 00:12:39,580
the two solutions is allow a regular

00:12:37,840 --> 00:12:42,220
icon to be passed into the button but

00:12:39,580 --> 00:12:44,170
make it a prop rather than something

00:12:42,220 --> 00:12:45,610
that goes into the children the button

00:12:44,170 --> 00:12:48,700
can safely override the

00:12:45,610 --> 00:12:50,560
add the 12:12 pixel size before

00:12:48,700 --> 00:12:53,050
injecting it into the the children

00:12:50,560 --> 00:12:54,700
inside the code this was initially

00:12:53,050 --> 00:12:56,529
pretty attractive to me but I think it

00:12:54,700 --> 00:12:58,240
still leaks complexity back out to the

00:12:56,529 --> 00:13:00,490
user we still have the initial problem

00:12:58,240 --> 00:13:04,209
where we have to add special icon props

00:13:00,490 --> 00:13:06,070
like icon position starts to be an issue

00:13:04,209 --> 00:13:08,019
here and we still don't prevent someone

00:13:06,070 --> 00:13:09,700
who doesn't know about these props from

00:13:08,019 --> 00:13:13,209
just Jemmy an icon directly into the

00:13:09,700 --> 00:13:14,920
children we can fix that problem and

00:13:13,209 --> 00:13:17,260
kind of paper over a few more by getting

00:13:14,920 --> 00:13:20,260
rid of children entirely

00:13:17,260 --> 00:13:21,880
which is a technique that is often used

00:13:20,260 --> 00:13:23,980
we can replace the functionality with a

00:13:21,880 --> 00:13:25,480
label prop it's not it's not pretty but

00:13:23,980 --> 00:13:27,399
it feels like it probably meets our

00:13:25,480 --> 00:13:29,320
goals in this specific case but maybe

00:13:27,399 --> 00:13:31,480
not many others I don't feel great about

00:13:29,320 --> 00:13:34,420
this it feels like button just got a

00:13:31,480 --> 00:13:36,670
whole lot uglier and using entire system

00:13:34,420 --> 00:13:39,040
feels less regular I think as a user I

00:13:36,670 --> 00:13:40,510
might be compelled to just skip using

00:13:39,040 --> 00:13:44,350
the design system button and kind of

00:13:40,510 --> 00:13:45,670
roll my own and make one myself my

00:13:44,350 --> 00:13:48,040
opinion we have to work backwards from

00:13:45,670 --> 00:13:50,709
the goal state users can reason really

00:13:48,040 --> 00:13:51,880
well with our original solution it's

00:13:50,709 --> 00:13:54,010
actually not our original solution but

00:13:51,880 --> 00:13:55,540
the second solution and just put an icon

00:13:54,010 --> 00:13:57,459
inside the button you don't need to know

00:13:55,540 --> 00:13:59,320
anything about the system in order to

00:13:57,459 --> 00:14:01,720
write this this is just composing two

00:13:59,320 --> 00:14:04,779
atomic pieces possibly the only two you

00:14:01,720 --> 00:14:08,079
know and if it did what we wanted this

00:14:04,779 --> 00:14:09,430
subsystem would feel closed we have to

00:14:08,079 --> 00:14:10,540
just solve for the problem the icon

00:14:09,430 --> 00:14:13,589
should be smaller when it's inside of a

00:14:10,540 --> 00:14:15,579
button how do we do that

00:14:13,589 --> 00:14:18,399
it seems like we have to either make

00:14:15,579 --> 00:14:20,230
icon aware of when it's in a button we

00:14:18,399 --> 00:14:23,170
had to make button aware of it when it

00:14:20,230 --> 00:14:24,760
contains an icon so let's try the ladder

00:14:23,170 --> 00:14:26,920
inside of a button you don't have to

00:14:24,760 --> 00:14:28,750
actually read this too closely we can

00:14:26,920 --> 00:14:30,610
enumerate each of the contexts that it

00:14:28,750 --> 00:14:32,320
knows about to try to render something

00:14:30,610 --> 00:14:34,240
different and adapt to its surroundings

00:14:32,320 --> 00:14:36,459
so we have this kind of thing that I'm

00:14:34,240 --> 00:14:38,980
abstract anout called is in button is

00:14:36,459 --> 00:14:41,260
this icon in a button this is not ideal

00:14:38,980 --> 00:14:43,240
if we can be rendered into multiple

00:14:41,260 --> 00:14:45,370
things there's this combat auric logic

00:14:43,240 --> 00:14:47,829
of am i in a card and a button and a

00:14:45,370 --> 00:14:49,839
something and it just explodes also like

00:14:47,829 --> 00:14:51,880
are we doing upwards tree traversal in

00:14:49,839 --> 00:14:55,420
order to determine that it seems all

00:14:51,880 --> 00:14:57,370
pretty plainly not nice so here's our

00:14:55,420 --> 00:14:59,350
goal state again just to try to recenter

00:14:57,370 --> 00:15:02,140
s let's try flipping who knows about who

00:14:59,350 --> 00:15:04,030
maybe we can make the button find and

00:15:02,140 --> 00:15:06,730
change icons that are inside of it to be

00:15:04,030 --> 00:15:10,270
a smaller size this is actually pretty

00:15:06,730 --> 00:15:12,010
similar to our real first idea where we

00:15:10,270 --> 00:15:14,830
just added an icon prop and and that

00:15:12,010 --> 00:15:16,690
felt pretty natural but it's not a great

00:15:14,830 --> 00:15:18,880
solution for the same reason because the

00:15:16,690 --> 00:15:21,310
button needs to know about and possibly

00:15:18,880 --> 00:15:22,810
even directly depend on icon you get

00:15:21,310 --> 00:15:25,360
some weird code like this where you have

00:15:22,810 --> 00:15:27,040
to import icon from the button and then

00:15:25,360 --> 00:15:28,600
you have to search down into the

00:15:27,040 --> 00:15:31,090
children to see if it contains icons

00:15:28,600 --> 00:15:33,580
like it says clearly maybe not a very

00:15:31,090 --> 00:15:36,310
tenable solution it's about as ugly of a

00:15:33,580 --> 00:15:38,950
company as I could think of actually I

00:15:36,310 --> 00:15:44,770
know I can be less obviously silly and

00:15:38,950 --> 00:15:46,180
write some CSS this is better but it's

00:15:44,770 --> 00:15:48,490
still pretty sad because now regardless

00:15:46,180 --> 00:15:50,080
of whether we need an icon or not every

00:15:48,490 --> 00:15:52,630
time we pull in button we also have to

00:15:50,080 --> 00:15:53,800
pull in all or part of icon they become

00:15:52,630 --> 00:15:58,600
someone clear that trying to resolve

00:15:53,800 --> 00:16:00,400
this is our primary objective sorry our

00:15:58,600 --> 00:16:02,440
primary objective is to decouple these

00:16:00,400 --> 00:16:04,900
two components neither should depend on

00:16:02,440 --> 00:16:06,730
the other so we want to create

00:16:04,900 --> 00:16:11,350
relationships without encoding strict

00:16:06,730 --> 00:16:12,550
dependencies this is a theme this is

00:16:11,350 --> 00:16:15,220
pretty similar to the goal in

00:16:12,550 --> 00:16:17,110
denormalization in databases so two

00:16:15,220 --> 00:16:18,790
models share a common value so we can

00:16:17,110 --> 00:16:20,290
either have them fully depend on each

00:16:18,790 --> 00:16:22,930
other be in the same row as each other

00:16:20,290 --> 00:16:26,350
or we can create a reference to a shared

00:16:22,930 --> 00:16:28,330
value kind of like a foreign key to

00:16:26,350 --> 00:16:30,670
solve this we've added a new concept to

00:16:28,330 --> 00:16:34,120
our design system and encapsulate the

00:16:30,670 --> 00:16:35,800
same idea it's a shared value these we

00:16:34,120 --> 00:16:37,630
call these values tokens but you don't

00:16:35,800 --> 00:16:40,000
have to it's certainly an overloaded

00:16:37,630 --> 00:16:42,100
term it's a tiny shared dependency that

00:16:40,000 --> 00:16:44,290
holds a value remembers the context that

00:16:42,100 --> 00:16:46,090
it's set in in this case it determines

00:16:44,290 --> 00:16:48,670
the size of an icon

00:16:46,090 --> 00:16:50,290
either component is free to write or

00:16:48,670 --> 00:16:53,320
read from the value or stop doing

00:16:50,290 --> 00:16:55,480
anything with the value at all in this

00:16:53,320 --> 00:16:58,120
specific case we have icon size token

00:16:55,480 --> 00:16:59,440
it's 14 pixels by default icon we'd use

00:16:58,120 --> 00:17:01,030
this value to determine its width and

00:16:59,440 --> 00:17:03,910
height and button would override this

00:17:01,030 --> 00:17:05,740
value for any of its children so it

00:17:03,910 --> 00:17:07,420
looks like we have an icon inside of a

00:17:05,740 --> 00:17:09,760
button and it's going to read the value

00:17:07,420 --> 00:17:12,300
through the context button and see that

00:17:09,760 --> 00:17:14,670
it's 12 so this is our solution

00:17:12,300 --> 00:17:16,410
it also means that you can delete button

00:17:14,670 --> 00:17:19,020
entirely from your application and

00:17:16,410 --> 00:17:21,270
things keep working or you can delete

00:17:19,020 --> 00:17:22,530
icons from your application maybe you

00:17:21,270 --> 00:17:24,660
have a weirdly named token but

00:17:22,530 --> 00:17:28,260
everything stays working and neither

00:17:24,660 --> 00:17:30,210
file depends on on the other we still

00:17:28,260 --> 00:17:33,900
have a directed a cyclical dependency

00:17:30,210 --> 00:17:37,470
graph of the old dag for my graph nerds

00:17:33,900 --> 00:17:40,800
out there so these are now atomic

00:17:37,470 --> 00:17:42,600
components again our final solution

00:17:40,800 --> 00:17:44,550
doesn't look very interesting to an end

00:17:42,600 --> 00:17:46,890
user that's the goal

00:17:44,550 --> 00:17:48,810
it's exactly this first most natural

00:17:46,890 --> 00:17:50,490
idea that we had before but now thanks

00:17:48,810 --> 00:17:52,110
to the in token the the token that

00:17:50,490 --> 00:17:53,820
encodes the relationship of a shared

00:17:52,110 --> 00:17:55,500
value user doesn't have to worry about

00:17:53,820 --> 00:17:57,210
the icon being the wrong size in the

00:17:55,500 --> 00:18:00,900
wrong spot and they also don't have to

00:17:57,210 --> 00:18:03,210
bring along their own icon just whenever

00:18:00,900 --> 00:18:05,580
they import button they only carry

00:18:03,210 --> 00:18:09,570
tokens they encode relationships without

00:18:05,580 --> 00:18:12,000
creating strict dependencies our goal in

00:18:09,570 --> 00:18:13,260
separating buttons and icons like this

00:18:12,000 --> 00:18:15,990
is to make sure that each component

00:18:13,260 --> 00:18:18,180
isn't reliant on the other the token

00:18:15,990 --> 00:18:20,220
idea is just one illustrative part not

00:18:18,180 --> 00:18:22,260
some Silver Bullet of creating system

00:18:20,220 --> 00:18:24,510
that doesn't leak complexity all over

00:18:22,260 --> 00:18:25,620
the users a theme that arises when you

00:18:24,510 --> 00:18:27,840
think about these concepts is

00:18:25,620 --> 00:18:30,000
decentralization if your goal is to be

00:18:27,840 --> 00:18:31,770
able to avoid needing the entire system

00:18:30,000 --> 00:18:33,870
in your head and it makes sense that

00:18:31,770 --> 00:18:35,790
each centralization becomes a critical

00:18:33,870 --> 00:18:38,400
property of things you add to the system

00:18:35,790 --> 00:18:41,310
but centralization is difficult to avoid

00:18:38,400 --> 00:18:44,010
and it can be very sneaky and and bite

00:18:41,310 --> 00:18:45,690
you from all over the place consider the

00:18:44,010 --> 00:18:47,250
button and icon example from before we

00:18:45,690 --> 00:18:48,660
have two totally disparate atomic

00:18:47,250 --> 00:18:50,820
components and just trying to make the

00:18:48,660 --> 00:18:52,800
icon size twelve pixels inside of a

00:18:50,820 --> 00:18:54,690
button causes or create a dependency in

00:18:52,800 --> 00:18:57,810
one or both directions which is super

00:18:54,690 --> 00:19:01,530
rough there are other pretty common feet

00:18:57,810 --> 00:19:04,140
guns that aren't super obvious as well

00:19:01,530 --> 00:19:06,330
configuration stands out as a major

00:19:04,140 --> 00:19:07,650
point of centralization we have a big

00:19:06,330 --> 00:19:09,900
system that all functions independently

00:19:07,650 --> 00:19:11,520
and we often Jam every option for the

00:19:09,900 --> 00:19:13,500
independent pieces into a giant JSON

00:19:11,520 --> 00:19:14,810
file at the top this points at a flaw of

00:19:13,500 --> 00:19:18,030
the way we think about configure a

00:19:14,810 --> 00:19:20,250
configuration in my opinion it's a

00:19:18,030 --> 00:19:22,980
top-down global store of variables to be

00:19:20,250 --> 00:19:24,180
set by the consumer of your system we've

00:19:22,980 --> 00:19:26,780
all been warned about

00:19:24,180 --> 00:19:28,830
local variables before I'm sure

00:19:26,780 --> 00:19:31,080
configuration is often contextual

00:19:28,830 --> 00:19:32,910
configuration begets more configuration

00:19:31,080 --> 00:19:34,320
what we're really trying to achieve when

00:19:32,910 --> 00:19:36,300
we make something configurable is giving

00:19:34,320 --> 00:19:38,640
control over something to the

00:19:36,300 --> 00:19:40,590
implementer luckily there are patterns

00:19:38,640 --> 00:19:42,360
for this other than just shared global

00:19:40,590 --> 00:19:44,250
constants on our team we've lean into

00:19:42,360 --> 00:19:47,850
the idea of inversion of control for

00:19:44,250 --> 00:19:50,730
configuration we use exportable tokens

00:19:47,850 --> 00:19:53,430
that same token system we use before and

00:19:50,730 --> 00:19:55,260
they can be overwritten at each level of

00:19:53,430 --> 00:19:57,510
application hierarchy kind of like

00:19:55,260 --> 00:19:58,860
context can be you can declare your

00:19:57,510 --> 00:20:01,320
configurable tokens where they're used

00:19:58,860 --> 00:20:04,440
rather than at the top this leans into

00:20:01,320 --> 00:20:05,940
our decentralization goals imagine

00:20:04,440 --> 00:20:08,280
instead of setting a global brand color

00:20:05,940 --> 00:20:09,900
you imported the brand color token from

00:20:08,280 --> 00:20:11,880
the color's module and overrode it or

00:20:09,900 --> 00:20:13,260
aliased it and then any child component

00:20:11,880 --> 00:20:16,170
that used brand color we get your

00:20:13,260 --> 00:20:18,840
updated value much like the 12 pixels

00:20:16,170 --> 00:20:20,850
example the configuration becomes code

00:20:18,840 --> 00:20:24,330
but that code can live anywhere not just

00:20:20,850 --> 00:20:26,130
at the very top theming in general is

00:20:24,330 --> 00:20:28,620
the best use case that we've seen for

00:20:26,130 --> 00:20:30,210
this we can start with a color set

00:20:28,620 --> 00:20:32,910
that's imported and overridden and

00:20:30,210 --> 00:20:34,980
remixed all throughout the app and the

00:20:32,910 --> 00:20:38,010
equivalent centralized config would be

00:20:34,980 --> 00:20:40,560
thousands of lines of JSON here another

00:20:38,010 --> 00:20:42,270
thing that you can kind of inject into

00:20:40,560 --> 00:20:45,060
this idea of in version control is

00:20:42,270 --> 00:20:47,760
internationalization it's a great

00:20:45,060 --> 00:20:50,220
pattern for internationalization because

00:20:47,760 --> 00:20:51,510
my rough advice and and I do a lot of

00:20:50,220 --> 00:20:53,880
work with the internationalization is

00:20:51,510 --> 00:20:56,460
that your application already has to

00:20:53,880 --> 00:20:58,260
solve internationalization problems so

00:20:56,460 --> 00:21:01,020
rather than solve them again just cede

00:20:58,260 --> 00:21:02,550
control back out to the application each

00:21:01,020 --> 00:21:04,260
user of your design system may be using

00:21:02,550 --> 00:21:05,360
different localization tools and

00:21:04,260 --> 00:21:07,470
embedding internationals

00:21:05,360 --> 00:21:10,590
internationalized formatters and message

00:21:07,470 --> 00:21:13,560
bundles and doing that also in your

00:21:10,590 --> 00:21:15,510
design system could bloat it to unusable

00:21:13,560 --> 00:21:17,670
levels you want to avoid creating a

00:21:15,510 --> 00:21:20,160
parallel internationalization system

00:21:17,670 --> 00:21:22,800
that's used in the application this is

00:21:20,160 --> 00:21:25,740
good for performance and just

00:21:22,800 --> 00:21:26,910
cleanliness so it's not a huge leap to

00:21:25,740 --> 00:21:28,530
say that instead of rendering

00:21:26,910 --> 00:21:30,450
internationalized text as the default

00:21:28,530 --> 00:21:31,830
label for your button that you'd use

00:21:30,450 --> 00:21:34,170
approach that we've been discussing to

00:21:31,830 --> 00:21:35,910
allow applications to override the

00:21:34,170 --> 00:21:38,090
formatters to mash ones that they are to

00:21:35,910 --> 00:21:38,090
use

00:21:39,380 --> 00:21:44,250
the key to a well internationalized

00:21:42,450 --> 00:21:46,020
design system is really just being a

00:21:44,250 --> 00:21:47,280
highly composable design system that

00:21:46,020 --> 00:21:50,700
gives control over to a well

00:21:47,280 --> 00:21:52,410
internationalized application last kind

00:21:50,700 --> 00:21:55,170
of idea that I want to talk about is one

00:21:52,410 --> 00:21:58,200
that we're kind of playing with right

00:21:55,170 --> 00:22:00,570
now still we are looking to mimic some

00:21:58,200 --> 00:22:02,070
of the patterns in swiss blue.i from

00:22:00,570 --> 00:22:05,370
apple and there's been some interesting

00:22:02,070 --> 00:22:06,720
fallout from that one interesting

00:22:05,370 --> 00:22:07,950
property of Swift UI

00:22:06,720 --> 00:22:09,810
if you're used to modern JavaScript

00:22:07,950 --> 00:22:12,480
frameworks is that you nearly always

00:22:09,810 --> 00:22:14,610
start with single root level component

00:22:12,480 --> 00:22:16,770
rather than the somewhat more common

00:22:14,610 --> 00:22:18,690
higher-order components model where

00:22:16,770 --> 00:22:20,880
components wrap other components wrap

00:22:18,690 --> 00:22:23,940
other components they call these

00:22:20,880 --> 00:22:25,830
blank-slate base components of view and

00:22:23,940 --> 00:22:27,300
so we do two but you could call it a box

00:22:25,830 --> 00:22:29,940
or a component or something whatever you

00:22:27,300 --> 00:22:32,010
want another property of Swift UI is

00:22:29,940 --> 00:22:34,830
that an inorder set of modifications

00:22:32,010 --> 00:22:37,410
called the modifiers surprisingly that

00:22:34,830 --> 00:22:38,490
is run on that base component so you can

00:22:37,410 --> 00:22:39,620
think of that as a set of

00:22:38,490 --> 00:22:42,360
transformations

00:22:39,620 --> 00:22:43,830
so what are we transforming in our react

00:22:42,360 --> 00:22:45,180
brains these are just transforms on the

00:22:43,830 --> 00:22:46,590
children or the props or the state or

00:22:45,180 --> 00:22:47,760
the attributes that you know the kind of

00:22:46,590 --> 00:22:50,700
for things that you have control over

00:22:47,760 --> 00:22:53,100
and in this example we first take the

00:22:50,700 --> 00:22:54,390
content we add the padding and then we

00:22:53,100 --> 00:22:55,980
add a background color and then we add a

00:22:54,390 --> 00:22:58,380
foreground color then we change the font

00:22:55,980 --> 00:23:00,630
it's a procedural which feels kind of

00:22:58,380 --> 00:23:03,750
weird but also maybe kind of cool and

00:23:00,630 --> 00:23:05,280
just calling on this collet we call it

00:23:03,750 --> 00:23:07,080
on the content itself we just return the

00:23:05,280 --> 00:23:10,770
content with the dot padding on it I

00:23:07,080 --> 00:23:12,780
know it seems cool so we tried it out we

00:23:10,770 --> 00:23:15,270
kind of put a similar idea into a react

00:23:12,780 --> 00:23:16,620
component the view component starts with

00:23:15,270 --> 00:23:18,600
no children or state of props or

00:23:16,620 --> 00:23:20,820
attributes and each modifier has a job

00:23:18,600 --> 00:23:22,680
to add modify or remove one or many of

00:23:20,820 --> 00:23:24,240
those things when you think about this

00:23:22,680 --> 00:23:26,010
you can actually drop frameworks out of

00:23:24,240 --> 00:23:28,110
the picture they're mostly irrelevant

00:23:26,010 --> 00:23:29,940
until you're done building up the set of

00:23:28,110 --> 00:23:31,920
those children state props and

00:23:29,940 --> 00:23:34,080
attributes but this happens after all

00:23:31,920 --> 00:23:36,150
the modifiers run you can use your

00:23:34,080 --> 00:23:38,730
framework of choice to render that

00:23:36,150 --> 00:23:40,320
actual set this is kind of magic for a

00:23:38,730 --> 00:23:42,180
few different reasons the first is that

00:23:40,320 --> 00:23:44,640
you have an audible list of transforms

00:23:42,180 --> 00:23:46,710
that you add to your component and makes

00:23:44,640 --> 00:23:48,660
building up a component really easy to

00:23:46,710 --> 00:23:50,380
observe first we had some text then we

00:23:48,660 --> 00:23:52,440
had a CSS class that we had

00:23:50,380 --> 00:23:54,669
the Candler then we update some state

00:23:52,440 --> 00:23:56,770
instead of sharing a button component

00:23:54,669 --> 00:23:58,990
itself you can actually share just the

00:23:56,770 --> 00:24:00,760
list of modifiers that a button has that

00:23:58,990 --> 00:24:03,130
means components are always only one

00:24:00,760 --> 00:24:04,960
level deep which vibes really well with

00:24:03,130 --> 00:24:07,059
our goals around sports dependency

00:24:04,960 --> 00:24:08,320
graphs between components and we're just

00:24:07,059 --> 00:24:11,200
passing around little groups of these

00:24:08,320 --> 00:24:12,429
little transforms now this concept is a

00:24:11,200 --> 00:24:14,169
little easier to understand when you see

00:24:12,429 --> 00:24:16,720
it we were able to put together a little

00:24:14,169 --> 00:24:19,150
modifier step through a viewer the top

00:24:16,720 --> 00:24:22,299
button with hello world in it is the end

00:24:19,150 --> 00:24:24,010
state and then the each check box turns

00:24:22,299 --> 00:24:27,039
on a different modifier and then you can

00:24:24,010 --> 00:24:30,549
kind of eventually see that come through

00:24:27,039 --> 00:24:33,100
the projector contrast hurts up a little

00:24:30,549 --> 00:24:34,450
bit but maybe it's filled still it's

00:24:33,100 --> 00:24:37,679
enough this is the array of modifiers

00:24:34,450 --> 00:24:37,679
that we're kind of turning on or off

00:24:38,309 --> 00:24:42,520
second reason this is magic is the bit I

00:24:41,140 --> 00:24:43,690
mentioned before pretty much none of

00:24:42,520 --> 00:24:46,000
this has anything to do with a framework

00:24:43,690 --> 00:24:47,559
until you need to render the actual

00:24:46,000 --> 00:24:49,570
component so you're just generating and

00:24:47,559 --> 00:24:51,520
transforming the configuration for a

00:24:49,570 --> 00:24:53,020
future component then you have to turn

00:24:51,520 --> 00:24:55,480
your children state props attributes

00:24:53,020 --> 00:24:57,429
into a rendered component so nearly all

00:24:55,480 --> 00:24:59,770
components can be described as a set of

00:24:57,429 --> 00:25:01,720
modifiers instead of as unique

00:24:59,770 --> 00:25:02,919
components and that means your design

00:25:01,720 --> 00:25:04,539
system components can be described

00:25:02,919 --> 00:25:07,419
outside the bounds of a single UI

00:25:04,539 --> 00:25:09,220
framework means we can write a renderer

00:25:07,419 --> 00:25:11,710
and react it also means we could write a

00:25:09,220 --> 00:25:13,530
renderer insult or view or even

00:25:11,710 --> 00:25:16,179
something like a sketch or figma plugin

00:25:13,530 --> 00:25:19,179
to automatically get our components into

00:25:16,179 --> 00:25:21,039
a design tool from code this is a

00:25:19,179 --> 00:25:22,390
powerful idea there's still a bunch of

00:25:21,039 --> 00:25:24,190
work to write these renders it's not a

00:25:22,390 --> 00:25:25,720
panacea and some things like a date

00:25:24,190 --> 00:25:28,000
picker so far have been a little too

00:25:25,720 --> 00:25:30,220
interactive to get in this magic

00:25:28,000 --> 00:25:31,900
framework agnostic way but if design

00:25:30,220 --> 00:25:34,030
systems are about upholding the values

00:25:31,900 --> 00:25:35,200
of your company it's unlikely that those

00:25:34,030 --> 00:25:37,330
values will change just because

00:25:35,200 --> 00:25:39,220
something is more trendy than react now

00:25:37,330 --> 00:25:40,990
you should build up a system that

00:25:39,220 --> 00:25:42,400
encodes your values and you should write

00:25:40,990 --> 00:25:43,929
a renderer that displays them in the

00:25:42,400 --> 00:25:45,820
cool frameworks that your teams want you

00:25:43,929 --> 00:25:48,760
to implement even if those frameworks

00:25:45,820 --> 00:25:51,220
change over time so what a success look

00:25:48,760 --> 00:25:54,610
like I have no idea of course we're not

00:25:51,220 --> 00:25:58,510
even close to success we have to phone

00:25:54,610 --> 00:26:00,610
number inputs I don't know why we're

00:25:58,510 --> 00:26:01,870
hardly at the fully baked stage of any

00:26:00,610 --> 00:26:03,550
of these ideas

00:26:01,870 --> 00:26:05,410
I want to discuss them with you for that

00:26:03,550 --> 00:26:07,000
reason but it definitely feels like

00:26:05,410 --> 00:26:09,210
there's a thread throughout all the

00:26:07,000 --> 00:26:11,590
solutions and problems that we're facing

00:26:09,210 --> 00:26:13,090
Design Systems are hyper objects so we

00:26:11,590 --> 00:26:15,100
need to make design systems that contain

00:26:13,090 --> 00:26:17,470
closed subsystems that are

00:26:15,100 --> 00:26:19,480
comprehensible that starts with making

00:26:17,470 --> 00:26:21,880
atomic components that favor extremely

00:26:19,480 --> 00:26:23,650
small dependency trees an atomic

00:26:21,880 --> 00:26:25,510
component is its own complete closed sub

00:26:23,650 --> 00:26:27,130
system and any arbitrary set of those

00:26:25,510 --> 00:26:29,140
subsystems can be composed into

00:26:27,130 --> 00:26:32,620
increasingly larger closed sub systems

00:26:29,140 --> 00:26:34,720
that's a sentence decisions are

00:26:32,620 --> 00:26:36,490
decentralized components are tied

00:26:34,720 --> 00:26:38,350
together via ceding control to each

00:26:36,490 --> 00:26:41,290
other and based on the order of their

00:26:38,350 --> 00:26:43,390
composition your values are deeply

00:26:41,290 --> 00:26:46,360
connected and encoded into the technical

00:26:43,390 --> 00:26:48,280
implementation but not tied directly to

00:26:46,360 --> 00:26:49,750
the framework of the week a successful

00:26:48,280 --> 00:26:52,900
design system can describe intent

00:26:49,750 --> 00:26:54,940
without needing react more than anything

00:26:52,900 --> 00:26:57,370
though a good design system prioritizes

00:26:54,940 --> 00:26:58,809
upholding values over everything else it

00:26:57,370 --> 00:27:00,820
facilitates the increased likelihood

00:26:58,809 --> 00:27:05,460
that applications are built with it are

00:27:00,820 --> 00:27:05,460
also share those same values Thanks

00:27:06,270 --> 00:27:12,069

YouTube URL: https://www.youtube.com/watch?v=EDyiaDJJu-4


