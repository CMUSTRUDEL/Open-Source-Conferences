Title: Claudia Hernández: Down the Rabbit Hole: Javascript in Wonderland | JSConf EU 2017
Publication date: 2017-06-01
Playlist: JSConf EU 2017
Description: 
	http://2017.jsconf.eu/speakers/claudia-hernndez-down-the-rabbit-hole-javascript-in-wonderland.html

What even makes sense in Javascript ?

For a language originally created in 10 days it surely has a lot of quirks and perks many JS developers are unaware of. Sometimes, it might even seem like we fell down the rabbit hole only to find that NaN is actually a Number, undefined can be defined, +!![] equals 1, Array.sort() may not work as you suspected and so much other nonsense that can trip any JS developer’s mind.

This talk is a collection of Javascript’s oddities and unexpected behaviors that hopefully will prevent some future headaches and help understand the language that we all love in a more deeper and meaningful way.
Captions: 
	00:00:03,429 --> 00:00:08,020
Claudia Hernandez - Down the Rabbit Hole.

00:00:30,230 --> 00:00:33,100
CLAUDIA: Thank you very much for having me here today.

00:00:33,100 --> 00:00:36,250
I'm so excited to be at JSConf Europe.

00:00:36,250 --> 00:00:39,010
It is a dream come true.

00:00:39,010 --> 00:00:45,050
My name is Claudia Hernandez, I'm from Mexico and a huge fan of Alice in Wonderland and

00:00:45,050 --> 00:00:48,740
I work at Daily motion.

00:00:48,740 --> 00:00:54,760
If you have comments, suggestions or complaints, you can find me on Twitter as before.

00:00:54,760 --> 00:00:56,610
Don't hesitate.

00:00:56,610 --> 00:01:01,610
Enough about me, because you are not here for me, so, for the following three minutes,

00:01:01,610 --> 00:01:05,180
I'm - 30 minutes, I'm going to be your own personal white rabbit because I'm going to

00:01:05,180 --> 00:01:12,280
drag you with me into the rabbit hole at show you some really weird things going on in JavaScript.

00:01:12,280 --> 00:01:17,110
One things first: I'm not an expert, but I'm a really, really curious person and I love

00:01:17,110 --> 00:01:18,210
to know how things work.

00:01:18,210 --> 00:01:22,670
This is one of the main reasons that I decided to do this talk.

00:01:22,670 --> 00:01:26,090
Most of the things that you're going to be seeing in the following slides are things

00:01:26,090 --> 00:01:30,030
that I have come across and, at the beginning, I didn't understand what was going on.

00:01:30,030 --> 00:01:35,080
So, the beauty of JavaScript.

00:01:35,080 --> 00:01:39,990
JavaScript is a kind of language where nothing is what it is.

00:01:39,990 --> 00:01:48,550
Because math.min is not math.max because in JavaScript, everything is what it isn't.

00:01:48,550 --> 00:01:57,630
Contrary-wise, what is is not in JavaScript.

00:01:57,630 --> 00:02:02,820
Two totally different totally similar looking - it's not what it actually is.

00:02:02,820 --> 00:02:03,820
What is going on?

00:02:03,820 --> 00:02:15,129
I'm not going to go into detail in believes examples, but if you're curious about them,

00:02:15,129 --> 00:02:21,129
they have to do with inconsistencies in floating point numbers in JavaScript and other languages

00:02:21,129 --> 00:02:25,030
and knowing the difference between primitive and reference types.

00:02:25,030 --> 00:02:28,739
The thing with JavaScript is that JavaScript is very easy to learn.

00:02:28,739 --> 00:02:33,900
Everyone can do a console.log in their browser but it is harder to learn in a deeper and

00:02:33,900 --> 00:02:35,110
meaningful way.

00:02:35,110 --> 00:02:40,700
This is our first part through Wonder land.

00:02:40,700 --> 00:02:45,609
NaN literally stands for: not a number.

00:02:45,609 --> 00:02:48,449
Bess what?

00:02:48,449 --> 00:02:49,650
Type of NaN is number.

00:02:49,650 --> 00:02:54,760
It is going - what is going on?

00:02:54,760 --> 00:02:58,459
NaN is the returned value of of a mathematical operation that failed.

00:02:58,459 --> 00:03:07,109
We try to do operations both eperands are not number, or we do things that are not defined

00:03:07,109 --> 00:03:13,230
like dividing zero by zero or get the square route of a negative number, we will also get

00:03:13,230 --> 00:03:14,230
NaN.

00:03:14,230 --> 00:03:20,930
NaN is trying to tell us something along the lines of, "I tried to perform this mat mallal

00:03:20,930 --> 00:03:22,531
operation so I failed.

00:03:22,531 --> 00:03:24,150
Here's this fail number instead.

00:03:24,150 --> 00:03:27,939
Back"maybe the label NaN is misleading.

00:03:27,939 --> 00:03:33,650
Maybe it would be easier to think of it as "bad number, failed number, invalid" more

00:03:33,650 --> 00:03:35,260
than not a number.

00:03:35,260 --> 00:03:40,819
Because bottom line, NaN is of numeric type but it represents a value that could not represent

00:03:40,819 --> 00:03:42,329
a valid number.

00:03:42,329 --> 00:03:49,129
In JavaScript, mathematical operations can lead to an error or crash.

00:03:49,129 --> 00:03:52,629
So what if we wanted to know if a value is equal to NaN or not?

00:03:52,629 --> 00:03:56,010
If this was your first guess, let me tell you something.

00:03:56,010 --> 00:04:02,040
Actually, NaN is not equal to, greater than, or less than anything, including itself.

00:04:02,040 --> 00:04:04,680
But why is that you may be wondering?

00:04:04,680 --> 00:04:07,439
So NaN is not only a JavaScript thing.

00:04:07,439 --> 00:04:15,889
NaN is defined by the standard called the IEEE754, and, to keep things short, because

00:04:15,889 --> 00:04:24,060
this is a 30-minute talk, basically, what this standard tells us is there are 16,777,214

00:04:24,060 --> 00:04:28,419
different floating point values as NaNs.

00:04:28,419 --> 00:04:29,569
What does this mean?

00:04:29,569 --> 00:04:34,699
This means there are so many different representations of NaN that it is highly unlikely that one

00:04:34,699 --> 00:04:38,340
NaN is equal to another NaN.

00:04:38,340 --> 00:04:40,449
Nan is not equal to NaN.

00:04:40,449 --> 00:04:49,740
I think we agree that NaN stands for "not a number" so the only way if we know if a

00:04:49,740 --> 00:04:53,740
value is NaN or not is to use the JavaScript built-in function is NaN.

00:04:53,740 --> 00:05:00,620
Now let's talk about sorting arrays because that's always fun.

00:05:00,620 --> 00:05:05,889
Can you spot what is seriously wrong in this code?

00:05:05,889 --> 00:05:13,430
In my world, 235 and 33 after the number 4, but in JavaScript, things are not what they

00:05:13,430 --> 00:05:14,430
seem.

00:05:14,430 --> 00:05:15,930
What is going on?

00:05:15,930 --> 00:05:18,639
JavaScript is doing lexicographical sorting.

00:05:18,639 --> 00:05:19,639
What is that?

00:05:19,639 --> 00:05:31,159
It is likes dictionary-like alphabetic type sorting, not numerical

00:05:31,159 --> 00:05:33,440
at all.

00:05:33,440 --> 00:05:37,659
For every character in the strings, it is comparing the unicode value.

00:05:37,659 --> 00:05:41,729
It is the unicode ID of any character.

00:05:41,729 --> 00:05:47,550
So, in this example, we have a colour array red and blue, we call the sort blue, red is

00:05:47,550 --> 00:05:53,400
coming before red, because of alphabetical sorting, but we have a numerical array with

00:05:53,400 --> 00:05:58,490
80 and nine and this will be the exact same thing we call third method with those numbers

00:05:58,490 --> 00:05:59,960
as strings.

00:05:59,960 --> 00:06:03,729
Basically, 80 has that smaller unicode point value.

00:06:03,729 --> 00:06:10,039
In a more simple way, we can say that 80 is lexicographically less than nine and it starts

00:06:10,039 --> 00:06:11,979
to make more sense now.

00:06:11,979 --> 00:06:19,009
If you want to know the point value of any character, you can use the string code, the

00:06:19,009 --> 00:06:20,009
method.

00:06:20,009 --> 00:06:27,780
25 and 33 are indeed lexicographically less than four.

00:06:27,780 --> 00:06:35,470
When we're trying to sort an array, lexicographical sorting is not the first thing we want.

00:06:35,470 --> 00:06:40,740
What we are missing here is that the third method can take us a parameter compare function,

00:06:40,740 --> 00:06:47,830
so if a compare function is given, if a is smaller than b, we return -1.

00:06:47,830 --> 00:06:55,650
If a is greater than b, we return one, and b comes before a, and in any other case, we

00:06:55,650 --> 00:07:05,531
return a and b and zero - if you're as curious as I am, you wonder what is the algorithm

00:07:05,531 --> 00:07:10,710
behind that native sort method in JavaScript, and the answer is that actually it depends

00:07:10,710 --> 00:07:16,669
on the JavaScript engine, because the standard doesn't impose a certain algorithm to be used

00:07:16,669 --> 00:07:19,750
so every JavaScript engine is free to use whatever they want.

00:07:19,750 --> 00:07:28,580
Out of curiosity, if you want to know, Spidermonkey for Firefox is a combination of algorithms

00:07:28,580 --> 00:07:34,120
insertions for small arrays for performance, and V8 Chrome is using Quick sort Sort and

00:07:34,120 --> 00:07:35,120
Insertion Sort.

00:07:35,120 --> 00:07:42,849
There's an a fun fact for you people who love computer science.

00:07:42,849 --> 00:07:48,970
Now that we have finally provided the compare function, we can have a numerical sort.

00:07:48,970 --> 00:07:51,610
The tilde operator.

00:07:51,610 --> 00:07:55,650
How many have used this operator before?

00:07:55,650 --> 00:07:58,110
A few of you.

00:07:58,110 --> 00:08:03,080
This is a bit-wise operator.

00:08:03,080 --> 00:08:04,080
What is that?

00:08:04,080 --> 00:08:07,909
It's an operator that would take a number, transform it into a sequence of bits and then

00:08:07,909 --> 00:08:12,551
it will do some kind of operation on it and it will turn back an integer as a result and

00:08:12,551 --> 00:08:14,199
it is very important.

00:08:14,199 --> 00:08:21,460
Now, maybe just maybe, you're familiar with the bit-wise and the but those are not the

00:08:21,460 --> 00:08:29,440
same as the logical "and" or "or".

00:08:29,440 --> 00:08:36,060
Today I'm going to be talking about the bitwise not.

00:08:36,060 --> 00:08:38,940
What it is doing is inverting the bits in a sequence.

00:08:38,940 --> 00:08:45,060
I know we normally don't do these kind of specific to be operations in our applications,

00:08:45,060 --> 00:08:46,630
so let me put it this way.

00:08:46,630 --> 00:08:49,190
The operator is just doing this small algorithm.

00:08:49,190 --> 00:08:52,700
It's adding one and then changing the sign.

00:08:52,700 --> 00:08:58,320
We can pass the -2 and get along.

00:08:58,320 --> 00:09:04,870
Et cetera the million-dollar question here is what actual use in real life can we give

00:09:04,870 --> 00:09:05,870
to these operators?

00:09:05,870 --> 00:09:12,760
So, one of it is by using a double tilde operator, bitwise, and we can truncate using numbers

00:09:12,760 --> 00:09:18,170
and this is quicker than using math trunk.

00:09:18,170 --> 00:09:25,320
We can use other bitwise operators to do the same thing, and, as I told you, this is faster.

00:09:25,320 --> 00:09:34,800
Another thing we can use with the bitwise is imagine that we want to know if someone

00:09:34,800 --> 00:09:38,050
is coming to the tea-party that we want to have later.

00:09:38,050 --> 00:09:44,610
So you know, the array function these index methods.

00:09:44,610 --> 00:09:49,880
The way this method works is that it will give us the position of an element if it was

00:09:49,880 --> 00:09:55,160
found on an array and, if it was not found, it would just return -1.

00:09:55,160 --> 00:10:01,390
A lot of developers have used this method, and they will do a lot of these things.

00:10:01,390 --> 00:10:11,720
They will compare it if the index method is bigger - all of this can be simplified by

00:10:11,720 --> 00:10:14,079
using the tilde operator.

00:10:14,079 --> 00:10:19,089
Basically what is happening here is that the let me was not found, the index method will

00:10:19,089 --> 00:10:25,190
turn back a -1, then we will pass this -1 to the tilde operator and it will transform

00:10:25,190 --> 00:10:28,360
it into a false zero.

00:10:28,360 --> 00:10:32,160
It will mean that the element was actually found in any other case.

00:10:32,160 --> 00:10:36,810
Now, before you start getting angry at me, I know that this is not very code-friendly

00:10:36,810 --> 00:10:45,370
but don't worry because ES7 has a new function called includes which will return us a Boolean

00:10:45,370 --> 00:10:47,790
that will save whether the element was found or not.

00:10:47,790 --> 00:10:49,110
Don't worry about.

00:10:49,110 --> 00:10:51,199
ES7 has our backs.

00:10:51,199 --> 00:10:52,500
Cool.

00:10:52,500 --> 00:10:59,980
Let's talk about for loops they can be fun.

00:10:59,980 --> 00:11:08,279
I once saw this in a JavaScript book and I don't get what it means, what's going on.

00:11:08,279 --> 00:11:12,270
Now let me bring you back to those days when you're learning about JavaScript variables,

00:11:12,270 --> 00:11:15,450
and loops, and you were so eager to learn everything.

00:11:15,450 --> 00:11:19,670
Let me remind you something basic about JavaScript and for loops.

00:11:19,670 --> 00:11:26,449
For loops have three parts, an initialisation, condition, and iteration part.

00:11:26,449 --> 00:11:29,949
They're optional in JavaScript.

00:11:29,949 --> 00:11:37,740
You can take the first part, declare variables outside a loop and it doesn't matter or you

00:11:37,740 --> 00:11:42,540
can remove the condition for it, and if you do that, JavaScript will automatically consider

00:11:42,540 --> 00:11:48,130
it as true and it is up to you to break the loop, or you can even take the iteration for

00:11:48,130 --> 00:11:54,050
a farther away, and this this case, the condition part is acting at the same time as a iteration

00:11:54,050 --> 00:11:55,050
part.

00:11:55,050 --> 00:12:03,339
Once this I drops until zero, it will be a false zero and get in the way of the loop.

00:12:03,339 --> 00:12:04,440
You can remove everything.

00:12:04,440 --> 00:12:08,950
If you do that, as I told you before, the cognition part will be automatically considered

00:12:08,950 --> 00:12:15,399
as true, and basically what we are looking for is just an infinite loop.

00:12:15,399 --> 00:12:18,560
So, cool.

00:12:18,560 --> 00:12:20,250
Let's talk about undefined.

00:12:20,250 --> 00:12:27,500
This is variable that has been declared but has no value on it.

00:12:27,500 --> 00:12:31,940
It is part of the window object.

00:12:31,940 --> 00:12:37,990
So, what would happen if we wanted to be really clever and define undefine?

00:12:37,990 --> 00:12:42,830
Actually, the result of this piece of code actually depends on the browser that you're

00:12:42,830 --> 00:12:49,329
running it, so, for older browsers from internet explorer 8 and below, you could redefine on

00:12:49,329 --> 00:12:50,329
define.

00:12:50,329 --> 00:12:54,209
This has already been solved for modern browsers.

00:12:54,209 --> 00:13:00,460
Now I get it: while it is becoming less and less of a problem, we have to take, I mean

00:13:00,460 --> 00:13:04,540
we have to care about these kind of issues because if you support older browsers, there

00:13:04,540 --> 00:13:07,779
is a possibility that people might try to define your own defines.

00:13:07,779 --> 00:13:13,089
The thing with JavaScript is that JavaScript rarely runs in isolation.

00:13:13,089 --> 00:13:19,530
We often run it with other libraries, with external code, so just be careful.

00:13:19,530 --> 00:13:22,690
But the madness doesn't stop there.

00:13:22,690 --> 00:13:27,750
Undefine isn't a reserve word in JavaScript meaning you can use it as a variable name

00:13:27,750 --> 00:13:31,600
which I totally don't recommend, of course.

00:13:31,600 --> 00:13:33,970
What have we learned so far?

00:13:33,970 --> 00:13:38,020
Not a number is a number, that it sorts lexicographically by default.

00:13:38,020 --> 00:13:46,279
The tilde is not a bit operator and undefined, defined - sometimes.

00:13:46,279 --> 00:13:48,639
Am I boring you?

00:13:48,639 --> 00:13:51,200
Is this like, not that fun?

00:13:51,200 --> 00:13:53,319
No in wait!

00:13:53,319 --> 00:13:56,509
Because the mad JavaScript party is just about to begin.

00:13:56,509 --> 00:14:00,540
And before I start talking about it, just a little bit of a disclaimer.

00:14:00,540 --> 00:14:08,470
The former content is designed to challenge programmers, not for practical use.

00:14:08,470 --> 00:14:13,230
Now JavaScript without letters and without numbers.

00:14:13,230 --> 00:14:19,500
Before I get into it, I'm going to keep repeating something that we have in here in the previous

00:14:19,500 --> 00:14:20,590
box.

00:14:20,590 --> 00:14:26,529
Javascript is a dynamic-type language so we don't have to declare the type of data we

00:14:26,529 --> 00:14:27,970
hold when we declare it.

00:14:27,970 --> 00:14:30,850
This is a interpreter.

00:14:30,850 --> 00:14:38,319
When we mix types, we can have really, really weird conversions that can lead to really,

00:14:38,319 --> 00:14:41,190
really crazy results.

00:14:41,190 --> 00:14:47,000
What I'm going to show you is how to write valid JavaScript using square brackets, parentheses,

00:14:47,000 --> 00:14:51,399
curly breaks, the plus operator and the exclamation point.

00:14:51,399 --> 00:14:55,370
I'm not crazy.

00:14:55,370 --> 00:15:03,569
I've been talking about the previous slide about values.

00:15:03,569 --> 00:15:09,290
Here's the thing: everything in JavaScript has a Boolean value, everything can be falsy

00:15:09,290 --> 00:15:10,290
or truthy.

00:15:10,290 --> 00:15:11,639
How can we know that?

00:15:11,639 --> 00:15:20,560
The golden rule is this one: everything in JavaScript is truthy unless it is falsy.

00:15:20,560 --> 00:15:28,480
The false values by default are false, zero, empty string, null, undefined, and none.

00:15:28,480 --> 00:15:36,600
The truth is everything else, and it could be a string zero, an empty area, an empty

00:15:36,600 --> 00:15:37,600
object.

00:15:37,600 --> 00:15:38,680
Now, the behaves.

00:15:38,680 --> 00:15:44,449
So, in this example, in the first one, what we are trying to do is we are trying to negate

00:15:44,449 --> 00:15:49,730
an empty array, so we are first in JavaScript to treat that empty array as a Boolean type,

00:15:49,730 --> 00:15:55,430
and, if you remember from the previous side, that an empty array is just a truthy volume,

00:15:55,430 --> 00:16:00,650
so we are negating a true so we get a false, and in the second example we're negating a

00:16:00,650 --> 00:16:06,750
false so we get a truth.

00:16:06,750 --> 00:16:12,500
By just using the class operator which actual function is just to transform things things

00:16:12,500 --> 00:16:13,540
into numbers.

00:16:13,540 --> 00:16:14,629
Guess what?

00:16:14,629 --> 00:16:21,110
Once we have zero and one, we have a way to create any other number.

00:16:21,110 --> 00:16:26,660
You can picture it as adding one, plus one, plus one be until infinity.

00:16:26,660 --> 00:16:29,829
We can also convert things into strings.

00:16:29,829 --> 00:16:34,830
In JavaScript, you can only concatenate things with the plus operator or with add numbers.

00:16:34,830 --> 00:16:39,110
If you try to put anything else over there, JavaScript is going to automatically try to

00:16:39,110 --> 00:16:43,279
transform it into a primitive type, a number or a string.

00:16:43,279 --> 00:16:48,320
So in this first case, the first part is just a false, which is a Boolean type which is

00:16:48,320 --> 00:16:55,019
a primitive type, and an empty array is automatically formed by JavaScript into a string.

00:16:55,019 --> 00:16:57,779
So these actually give us a string false or string true.

00:16:57,779 --> 00:17:02,910
These work the exact same way for numbers: we can convert numbers into strings using

00:17:02,910 --> 00:17:04,620
this technique.

00:17:04,620 --> 00:17:08,000
So what if we wanted to do bigger numbers because we're not going to add one plus one

00:17:08,000 --> 00:17:10,010
plus infinity.

00:17:10,010 --> 00:17:16,350
We can transform into strings every single detail and then concatenate those details

00:17:16,350 --> 00:17:33,850
back and transform the whole thing back into a number, so 123 actually looks like this

00:17:33,850 --> 00:17:39,930
in alphanumeric JavaScript.

00:17:39,930 --> 00:17:46,310
Now that we have access to the words and vocabulary, we can transform it into strings as I showed

00:17:46,310 --> 00:17:51,690
you before and access every single character as if they were arrays.

00:17:51,690 --> 00:17:56,700
So, if you're following along, perhaps you might notice that what we can do is we can

00:17:56,700 --> 00:18:02,830
try to make up functions and words that actually mean something to JavaScript.

00:18:02,830 --> 00:18:13,320
So, Martin - he should be somewhere in the crowd - creator of jsfuck.

00:18:13,320 --> 00:18:16,680
I love the term, because I think it is really clever.

00:18:16,680 --> 00:18:20,880
What we are trying to do is given the set of characters of words, we're trying to make

00:18:20,880 --> 00:18:25,210
up junctions that mean something to JavaScript.

00:18:25,210 --> 00:18:32,390
To keep things short, we can have access to call, concat, constructor, filter.

00:18:32,390 --> 00:18:33,920
How does this look in action?

00:18:33,920 --> 00:18:37,710
I will show you step by step so you understand.

00:18:37,710 --> 00:18:41,810
This piece of code is doing another one in your browser.

00:18:41,810 --> 00:18:43,740
Here's how it works.

00:18:43,740 --> 00:18:46,570
The first part is just an empty array.

00:18:46,570 --> 00:18:48,340
No surprise there.

00:18:48,340 --> 00:18:55,640
The future segment is trying to access the filtered function of that empty array which

00:18:55,640 --> 00:18:58,030
is a function.

00:18:58,030 --> 00:19:05,120
The constructor part is just getting that constructor for functions.

00:19:05,120 --> 00:19:09,890
And the constructor of functions can actually take a parameter, a string, that will return

00:19:09,890 --> 00:19:13,950
back and a new function with that string as its Buddy.

00:19:13,950 --> 00:19:19,430
So now, you can finally get the last part is just out executing that new function.

00:19:19,430 --> 00:19:27,190
So basically, it will give us in our browser another 1, and the code behind it is the code

00:19:27,190 --> 00:19:33,990
actually used to make this work, and it does work.

00:19:33,990 --> 00:19:37,180
So, yes - if you're interesting interested in that technique, you can find a lot of converters

00:19:37,180 --> 00:19:41,940
online and I encourage you to check the open source - the code source, sorry, and there

00:19:41,940 --> 00:19:55,630
are jsfuckdemo, JScrewIt, and the most well known is JSFuck from Martin.

00:19:55,630 --> 00:19:57,310
There is no limit to this.

00:19:57,310 --> 00:20:06,920
I came across this repository called JS screwed rewriting the whole JS library using this

00:20:06,920 --> 00:20:09,630
alphanumeric technique.

00:20:09,630 --> 00:20:12,160
This is the source code.

00:20:12,160 --> 00:20:16,070
A lot of people have way too much time on their hands - not like me!

00:20:16,070 --> 00:20:22,330
At this point, you might be wondering like Claudia, I would never write JavaScript that

00:20:22,330 --> 00:20:23,330
way.

00:20:23,330 --> 00:20:25,540
Why should I even care about these things!

00:20:25,540 --> 00:20:27,270
One good reason could be security.

00:20:27,270 --> 00:20:34,760
This is a Tweet from a few months ago in which Martin was pointing out to a blog post from

00:20:34,760 --> 00:20:43,550
a security researcher that he found a - on eBay.was able to inject malicious code into

00:20:43,550 --> 00:20:46,580
eBay by this technique.

00:20:46,580 --> 00:20:53,470
It was filtering text such as script or iFrame and not aware by this technique.

00:20:53,470 --> 00:20:57,490
I guess by this time, it is already fixed.

00:20:57,490 --> 00:21:03,910
Yes, and we are reaching the end of our journey.

00:21:03,910 --> 00:21:05,830
This is our last part.

00:21:05,830 --> 00:21:14,800
I can't leave without talking about arrow functions because they are - array functions.

00:21:14,800 --> 00:21:16,110
This is common to see.

00:21:16,110 --> 00:21:21,980
It doesn't work because the context of the function that is inside the function is no

00:21:21,980 --> 00:21:23,850
longer in the same context.

00:21:23,850 --> 00:21:31,660
A lot of developers have actually solved this issue with other - by adding new variables

00:21:31,660 --> 00:21:41,680
such as that equals this, but actually, there is one thing: arrow functions don't have a

00:21:41,680 --> 00:21:47,190
arguments, they don't have super and they don't have new targets.

00:21:47,190 --> 00:21:52,200
Any reference to them will just lexically resolve up.

00:21:52,200 --> 00:22:01,590
We can rewrite the - we will reference the full contents and we will have something being

00:22:01,590 --> 00:22:03,890
displayed.

00:22:03,890 --> 00:22:12,470
What if we wanted to be really, really stubborn and we actually wanted to - since arrow functions

00:22:12,470 --> 00:22:18,090
don't have a context at all, there's nothing the bind method can actually grab on.

00:22:18,090 --> 00:22:25,950
So I guess, what I want to say with this last part is that arrow functions are not about

00:22:25,950 --> 00:22:32,510
writing less, they actually have a behaviour that we have to learn how to use and use it

00:22:32,510 --> 00:22:33,510
accordingly.

00:22:33,510 --> 00:22:35,700
Was it all a dream?

00:22:35,700 --> 00:22:38,070
Sadly, no, this is real JavaScript.

00:22:38,070 --> 00:22:40,760
These are the things we have to deal with every day.

00:22:40,760 --> 00:22:46,640
So, but why should we care about all of the things that I just showed you?

00:22:46,640 --> 00:22:48,070
First of all, knowledge is power.

00:22:48,070 --> 00:22:52,640
We have to know when writing the code, we're writing and how it works.

00:22:52,640 --> 00:22:53,640
We have to push the limits.

00:22:53,640 --> 00:22:58,300
It is us who has to make JavaScript this amazing language that is it running on our servers

00:22:58,300 --> 00:23:00,140
on the December stop everywhere.

00:23:00,140 --> 00:23:02,260
We have to push it to the limit.

00:23:02,260 --> 00:23:05,390
We have to break the rules.

00:23:05,390 --> 00:23:07,250
Don't forget play is learning.

00:23:07,250 --> 00:23:12,970
This quirkiness of JavaScript makes me want to continue working on it, make mistakes and

00:23:12,970 --> 00:23:17,930
just play around with it, and this is ultimately what nation me every day a better developer,

00:23:17,930 --> 00:23:20,200
just diving into the language itself.

00:23:20,200 --> 00:23:23,170
And it is the power of the language.

00:23:23,170 --> 00:23:28,010
This is a code that I really like that says, "JavaScript is a language that has survived

00:23:28,010 --> 00:23:32,540
not despite its flaws but because of them."

00:23:32,540 --> 00:23:36,070
And the last thing: I just want to read this quote from a really, really good book that

00:23:36,070 --> 00:23:44,280
I recommend from called If Hemingway Wrote JavaScript: the best JavaScript is those who

00:23:44,280 --> 00:23:50,430
succeed easy language, they develop their own idioms and their own voice.

00:23:50,430 --> 00:23:51,430
That's all from me.

00:23:51,430 --> 00:23:52,430
I hope you liked it, and danke sch�n.

00:23:52,430 --> 00:23:53,430
[Applause].

00:23:53,430 --> 00:23:54,430
>> Thank you so much, Claudia, for the fantastic presentation.

00:23:54,430 --> 00:23:55,430
As everyone is escaping to lunch, I have some announcements, one moment!

00:23:55,430 --> 00:23:56,430
So, one announcement is we have community talks during lunch again.

00:23:56,430 --> 00:23:57,430
The one that will be running now is lightning talks about DAT project and UX night school

00:23:57,430 --> 00:23:58,430
and there are also workshops in the Mozilla booth around Rust and WebAssembly done by

00:23:58,430 --> 00:23:59,430
Lin Clark and another person, whose name I can't remember off the top of my head.

00:23:59,430 --> 00:24:00,430
The final announcement is we are going to have a panel on the TC39.

00:24:00,430 --> 00:24:01,430
If you've been curious about how JavaScript is standardised, how we came up to the point

00:24:01,430 --> 00:24:02,430
of having ES6.

00:24:02,430 --> 00:24:03,430
I would like to introduce a couple of the panel members who will be on that 4.15.

00:24:03,430 --> 00:24:04,430
Can we have a round of I have an applause for these individuals.

00:24:04,430 --> 00:24:05,430
And also James Snell is here.

00:24:05,430 --> 00:24:06,430
I didn't see him there.

00:24:06,430 --> 00:24:07,430
Yes, these people will be on stage.

00:24:07,430 --> 00:24:08,430
I will be asking them questions.

00:24:08,430 --> 00:24:09,430
If you have questions, we have a hashtag been it's, this, C39qs.

00:24:09,430 --> 00:24:10,430
If you have asking to ask these people, we won't be able to do live questions, so that's

00:24:10,430 --> 00:24:11,430
how best to get in touch.

00:24:11,430 --> 00:24:12,430
Yes.

00:24:12,430 --> 00:24:12,930

YouTube URL: https://www.youtube.com/watch?v=gE9xn-KOp1I


