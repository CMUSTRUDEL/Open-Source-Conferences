Title: Chen Shay: You don't need AMP for that | JSConf EU 2017
Publication date: 2017-07-31
Playlist: JSConf EU 2017
Description: 
	But it makes things so nice and easy :) AMP at its heart is a JavaScript library for building super fast static web pages. Being purely web tech based, we can understand how it works and take the best ideas and use them in non-AMP projects. This talk will dig into the nitty gritty details of AMP and uncover how the sausage is made so to say. We’ll talk about network concurrency, font loading, image optimizations, and this magic thing called pre-rendering. Even if you never plan to use AMP, you’ll learn new tricks that you’ll be able to use to speed up your next project!
Captions: 
	00:00:00,110 --> 00:00:11,810
[Music]

00:00:08,730 --> 00:00:11,810
[Applause]

00:00:13,510 --> 00:00:26,989
[Music]

00:00:28,640 --> 00:00:32,700
good afternoon everyone

00:00:30,720 --> 00:00:35,190
my name is Senne che and the software

00:00:32,700 --> 00:00:38,399
engineer on the amp project and today

00:00:35,190 --> 00:00:42,149
I'm going to share with you our secrets

00:00:38,399 --> 00:00:44,370
for making web pages stuff and hopefully

00:00:42,149 --> 00:00:46,920
you learn some of the best practices and

00:00:44,370 --> 00:00:51,149
apply them in your own development

00:00:46,920 --> 00:00:54,180
process but first let me show you what

00:00:51,149 --> 00:00:58,680
problem we're trying to solve this is a

00:00:54,180 --> 00:01:00,809
typical mobile page and I as a user want

00:00:58,680 --> 00:01:03,539
to see this page I have just clicked on

00:01:00,809 --> 00:01:06,869
a link to open this page and read the

00:01:03,539 --> 00:01:09,330
content but I can't because there are

00:01:06,869 --> 00:01:14,820
things that are preventing me from doing

00:01:09,330 --> 00:01:17,880
so the first is that it's extremely slow

00:01:14,820 --> 00:01:20,220
to load in fact does anyone here in the

00:01:17,880 --> 00:01:26,450
audience know how long it takes the

00:01:20,220 --> 00:01:29,909
average mobile page to load 15 seconds

00:01:26,450 --> 00:01:33,570
15 seconds you know that after 3 seconds

00:01:29,909 --> 00:01:37,229
half your users are gone after 10

00:01:33,570 --> 00:01:44,340
seconds nobody's there 15 seconds is

00:01:37,229 --> 00:01:47,369
horrible the average is 19 seconds so

00:01:44,340 --> 00:01:50,909
after I finally loaded my page I have

00:01:47,369 --> 00:01:53,430
this flash of unstyled content which is

00:01:50,909 --> 00:01:58,020
very jarring and could possibly give you

00:01:53,430 --> 00:01:59,759
a Pepsi and after I takes forever to

00:01:58,020 --> 00:02:02,670
load I have a flash of unstyled content

00:01:59,759 --> 00:02:04,590
I start reading the page in 20 seconds

00:02:02,670 --> 00:02:07,350
later when it's just that the best part

00:02:04,590 --> 00:02:11,340
and I want to see what happens this ad

00:02:07,350 --> 00:02:12,390
loads out of nowhere and fix my content

00:02:11,340 --> 00:02:13,860
around and I lose my

00:02:12,390 --> 00:02:15,690
place and I don't know where I am

00:02:13,860 --> 00:02:22,050
anymore and I really want to know what

00:02:15,690 --> 00:02:24,930
happens next so then I try to look for

00:02:22,050 --> 00:02:27,780
where I was but now my browser is kind

00:02:24,930 --> 00:02:31,860
of frozen or it's janky and I can't find

00:02:27,780 --> 00:02:35,370
where I left off this is a horrible

00:02:31,860 --> 00:02:38,640
horrible experience we have all been

00:02:35,370 --> 00:02:41,730
here before but why should you as

00:02:38,640 --> 00:02:43,350
developers care about this you have a

00:02:41,730 --> 00:02:46,470
million things you could be doing with

00:02:43,350 --> 00:02:49,830
your time why is it important to fix

00:02:46,470 --> 00:02:52,380
these issues well my answer is that it's

00:02:49,830 --> 00:02:56,459
important if you want to keep your users

00:02:52,380 --> 00:02:58,950
and your revenue today I'm going to take

00:02:56,459 --> 00:03:00,720
you under the hood and show you what's

00:02:58,950 --> 00:03:03,180
going on that's causing all these issues

00:03:00,720 --> 00:03:05,459
I'm going to show you the 10 sets that

00:03:03,180 --> 00:03:07,680
we take with amp to address these issues

00:03:05,459 --> 00:03:10,080
to make the web experience much better

00:03:07,680 --> 00:03:12,750
and hopefully you'll be able to apply

00:03:10,080 --> 00:03:16,110
what we do in your own development

00:03:12,750 --> 00:03:20,549
process to make your pages better in

00:03:16,110 --> 00:03:22,709
faster so first let's look at the first

00:03:20,549 --> 00:03:25,110
problem which is that it's very slow to

00:03:22,709 --> 00:03:27,900
load and what's happening here is that

00:03:25,110 --> 00:03:31,350
there are things that are blocking the

00:03:27,900 --> 00:03:33,269
render and these things happen to be

00:03:31,350 --> 00:03:35,700
files that you have to download before

00:03:33,269 --> 00:03:38,310
you could see anything on your page they

00:03:35,700 --> 00:03:41,459
could be the assess files they could be

00:03:38,310 --> 00:03:42,840
JavaScript files and they have to

00:03:41,459 --> 00:03:48,000
download and it takes a really long time

00:03:42,840 --> 00:03:51,690
and to solve this we decided that we

00:03:48,000 --> 00:03:54,360
need all scripts to be asynchronous so

00:03:51,690 --> 00:03:56,370
that you can see the HTML on your page

00:03:54,360 --> 00:03:58,380
you can have the page load and the

00:03:56,370 --> 00:04:00,870
script will load in the background and

00:03:58,380 --> 00:04:05,579
they don't have to block the render of

00:04:00,870 --> 00:04:07,769
your page the next thing is that we only

00:04:05,579 --> 00:04:10,200
want to download JavaScript that you

00:04:07,769 --> 00:04:13,350
need on your page so here for example is

00:04:10,200 --> 00:04:16,049
a carousel not every page will have a

00:04:13,350 --> 00:04:19,829
carousel so not every page should

00:04:16,049 --> 00:04:23,039
download the JavaScript of a carousel so

00:04:19,829 --> 00:04:25,500
we break the page up into components and

00:04:23,039 --> 00:04:26,470
we tell the browser specifically what

00:04:25,500 --> 00:04:28,090
JavaScript we

00:04:26,470 --> 00:04:32,950
want to download so that you only

00:04:28,090 --> 00:04:36,340
download what you need for your page the

00:04:32,950 --> 00:04:38,530
next thing is that we inline CSS so

00:04:36,340 --> 00:04:41,440
external stylesheets tend to be very

00:04:38,530 --> 00:04:44,050
large and they take a very long time to

00:04:41,440 --> 00:04:45,850
load so in lining it means that you

00:04:44,050 --> 00:04:49,300
don't have to download them separately

00:04:45,850 --> 00:04:51,820
and it's going to be a lot faster this

00:04:49,300 --> 00:04:53,860
is like taking a carry-on luggage with

00:04:51,820 --> 00:04:56,830
you when you fly it's going to be a lot

00:04:53,860 --> 00:04:58,350
faster than if you check in your baggage

00:04:56,830 --> 00:05:01,120
and end up being one of these people

00:04:58,350 --> 00:05:03,660
waiting at the carousel nobody wants to

00:05:01,120 --> 00:05:06,010
be here because it takes forever so

00:05:03,660 --> 00:05:07,840
check in your don't check in your

00:05:06,010 --> 00:05:11,590
luggage carry it on with you inline your

00:05:07,840 --> 00:05:14,710
CSS now when you fly and you take a

00:05:11,590 --> 00:05:16,930
carry-on suitcase with you you have to

00:05:14,710 --> 00:05:20,440
limit how many things you bring right

00:05:16,930 --> 00:05:22,060
because you don't have room for your

00:05:20,440 --> 00:05:25,810
entire house in your carry-on luggage

00:05:22,060 --> 00:05:30,220
and we decided that we're going to limit

00:05:25,810 --> 00:05:32,919
CSS by 60 kilobytes and 50 kilobytes is

00:05:30,220 --> 00:05:36,100
just like the space in your carry-on

00:05:32,919 --> 00:05:37,600
luggage it's just enough for all the

00:05:36,100 --> 00:05:39,430
things that you need but you're not

00:05:37,600 --> 00:05:45,130
going to bring a bunch of junk that you

00:05:39,430 --> 00:05:47,020
don't need the next thing so also the 50

00:05:45,130 --> 00:05:49,120
kilobytes what it forces you to do is

00:05:47,020 --> 00:05:52,210
clean up CSS that you don't longer need

00:05:49,120 --> 00:05:55,330
now around wintertime a lot of us have

00:05:52,210 --> 00:05:57,460
these promotions for for Christmas or

00:05:55,330 --> 00:06:01,390
for the holidays for certain sales and

00:05:57,460 --> 00:06:03,850
we have CSS for it and then we get rid

00:06:01,390 --> 00:06:06,180
of the we don't show it anymore because

00:06:03,850 --> 00:06:09,630
you know in January Christmas is over

00:06:06,180 --> 00:06:12,840
but someone forgot to clean up the CSS

00:06:09,630 --> 00:06:16,210
it's still there even if your users

00:06:12,840 --> 00:06:18,910
don't see it but they're paying for it

00:06:16,210 --> 00:06:21,160
with their time because it takes longer

00:06:18,910 --> 00:06:25,960
to download and their wallets because

00:06:21,160 --> 00:06:27,490
this takes up data so limiting CSS to 50

00:06:25,960 --> 00:06:29,530
kilobytes means that you're going to

00:06:27,490 --> 00:06:31,150
have to clean up these things and it's

00:06:29,530 --> 00:06:34,900
going to give your users a much better

00:06:31,150 --> 00:06:37,330
experience the next thing I want to talk

00:06:34,900 --> 00:06:38,660
about is third-party JavaScript and

00:06:37,330 --> 00:06:43,720
mainly

00:06:38,660 --> 00:06:47,150
in relation to ad so ad have not all

00:06:43,720 --> 00:06:49,340
kept up with the time and a lot of them

00:06:47,150 --> 00:06:52,540
think that they need third party

00:06:49,340 --> 00:06:54,860
JavaScript for their execution and

00:06:52,540 --> 00:06:57,610
because ads are important and they make

00:06:54,860 --> 00:07:00,680
money we have to allow them to exist and

00:06:57,610 --> 00:07:03,410
so they use third party JavaScript but

00:07:00,680 --> 00:07:05,840
we we have to tell them they need to be

00:07:03,410 --> 00:07:09,320
in sandbox iframes because third party

00:07:05,840 --> 00:07:13,250
JavaScript does horrible things first

00:07:09,320 --> 00:07:14,750
they write think script so again you

00:07:13,250 --> 00:07:16,850
have this issue where you have to wait

00:07:14,750 --> 00:07:19,220
for these scripts to load before you

00:07:16,850 --> 00:07:21,350
could see anything on your page the next

00:07:19,220 --> 00:07:25,280
thing is that they document dot write

00:07:21,350 --> 00:07:26,690
more things script so you have a lot

00:07:25,280 --> 00:07:29,570
more Singh script that you have to wait

00:07:26,690 --> 00:07:31,000
for and it all adds up and the third

00:07:29,570 --> 00:07:32,210
thing that they do is style

00:07:31,000 --> 00:07:36,350
recalculations

00:07:32,210 --> 00:07:39,580
which is very heavy on the CPU because

00:07:36,350 --> 00:07:42,230
they have to scan your entire page and

00:07:39,580 --> 00:07:45,050
it also might be wrong because if you

00:07:42,230 --> 00:07:47,300
name a CSS class the same thing an ad

00:07:45,050 --> 00:07:49,100
could potentially change the style of

00:07:47,300 --> 00:07:52,540
something on your page such as your logo

00:07:49,100 --> 00:07:56,030
and you don't want that so by limiting

00:07:52,540 --> 00:07:58,280
third parties to these sandbox iframes

00:07:56,030 --> 00:08:00,350
they're still going to do these bad

00:07:58,280 --> 00:08:01,730
things but they're not going to affect

00:08:00,350 --> 00:08:04,790
the rest of the page they're not going

00:08:01,730 --> 00:08:07,760
to affect the load and they have their

00:08:04,790 --> 00:08:10,220
little box where they can play and also

00:08:07,760 --> 00:08:12,470
doing salary calculations are going it's

00:08:10,220 --> 00:08:14,330
going to be a lot cheaper because it's

00:08:12,470 --> 00:08:17,450
only going to scan the content of the

00:08:14,330 --> 00:08:20,660
iframe rather than your entire page this

00:08:17,450 --> 00:08:22,520
is like allowing your toddlers to play

00:08:20,660 --> 00:08:24,920
with paint and you know that they're

00:08:22,520 --> 00:08:27,020
going to make a mess you just want to

00:08:24,920 --> 00:08:28,900
keep that must away from other parts of

00:08:27,020 --> 00:08:31,580
your help

00:08:28,900 --> 00:08:35,960
the next thing we do is resource

00:08:31,580 --> 00:08:40,669
prioritization so a typical mobile page

00:08:35,960 --> 00:08:44,350
is a lot longer than then your viewport

00:08:40,669 --> 00:08:48,710
then your first viewport of a phone and

00:08:44,350 --> 00:08:51,710
sometimes we don't actually download the

00:08:48,710 --> 00:08:52,500
entire page when a user taps on it but

00:08:51,710 --> 00:08:54,210
the

00:08:52,500 --> 00:08:56,940
our perceive the load to be

00:08:54,210 --> 00:09:00,180
instantaneous because we load the

00:08:56,940 --> 00:09:04,320
content in the first viewport before we

00:09:00,180 --> 00:09:06,110
load the rest of the page and this makes

00:09:04,320 --> 00:09:08,010
the perception of the load

00:09:06,110 --> 00:09:13,020
instantaneously even if we didn't have

00:09:08,010 --> 00:09:15,450
the time to download everything and we

00:09:13,020 --> 00:09:18,420
also do something called pre connect so

00:09:15,450 --> 00:09:20,760
for example here's a YouTube video and

00:09:18,420 --> 00:09:23,040
to lo the contents of a YouTube video

00:09:20,760 --> 00:09:25,260
there are a lot of things going on but

00:09:23,040 --> 00:09:26,610
one of them is we have to connect to the

00:09:25,260 --> 00:09:30,210
source right we have to connect to

00:09:26,610 --> 00:09:32,070
YouTube and that takes up time so by

00:09:30,210 --> 00:09:34,680
connecting ahead of time as we know that

00:09:32,070 --> 00:09:37,560
there's a YouTube video or an image or

00:09:34,680 --> 00:09:39,330
for example with Twitter to load the you

00:09:37,560 --> 00:09:41,130
know the content you have to connect to

00:09:39,330 --> 00:09:43,200
one server to load images you have to

00:09:41,130 --> 00:09:45,630
connect to another server by doing these

00:09:43,200 --> 00:09:48,870
connections ahead of time when it comes

00:09:45,630 --> 00:09:54,150
time to load the content it's going to

00:09:48,870 --> 00:09:57,450
load much faster so now we've gotten rid

00:09:54,150 --> 00:10:00,510
of this slow loading problem but we're

00:09:57,450 --> 00:10:03,000
not done because we have this flash of

00:10:00,510 --> 00:10:05,700
unstyled content and we don't want this

00:10:03,000 --> 00:10:08,820
and what's happening here is that the

00:10:05,700 --> 00:10:10,680
page is loading but then the styles are

00:10:08,820 --> 00:10:13,290
being applied after the page has loaded

00:10:10,680 --> 00:10:17,070
and to solve this problem we use an

00:10:13,290 --> 00:10:20,220
invisibility trick and we set the

00:10:17,070 --> 00:10:23,550
opacity of the body to zero so it exists

00:10:20,220 --> 00:10:26,490
but it's invisible to the user and then

00:10:23,550 --> 00:10:29,580
the styles are applied and eventually

00:10:26,490 --> 00:10:32,490
the JavaScript will load and unhide the

00:10:29,580 --> 00:10:37,290
page so to the user it's perceived as

00:10:32,490 --> 00:10:40,200
being loaded like this first but what

00:10:37,290 --> 00:10:43,050
happens if there is no JavaScript well

00:10:40,200 --> 00:10:45,750
we have this no script to unhide the

00:10:43,050 --> 00:10:50,180
body if there's nothing there to unhide

00:10:45,750 --> 00:10:53,520
the body and then finally what if

00:10:50,180 --> 00:10:55,560
JavaScript servers go down which can

00:10:53,520 --> 00:11:00,390
happen everyone's in a couple of years

00:10:55,560 --> 00:11:04,410
right and to address this issue we do a

00:11:00,390 --> 00:11:06,930
CSS timeout animation timeout so

00:11:04,410 --> 00:11:08,190
for some reason the page thinks that

00:11:06,930 --> 00:11:11,610
there is a JavaScript that the server

00:11:08,190 --> 00:11:15,480
times out then we will have a timeout

00:11:11,610 --> 00:11:18,440
that will unhide the body if the

00:11:15,480 --> 00:11:21,389
JavaScript never arrives

00:11:18,440 --> 00:11:23,970
now what I just described to you it's

00:11:21,389 --> 00:11:25,860
what we currently do but there is a bit

00:11:23,970 --> 00:11:28,319
of a time delay and we're currently

00:11:25,860 --> 00:11:32,160
working on doing server-side rendering

00:11:28,319 --> 00:11:34,980
so that there will be zero time delay so

00:11:32,160 --> 00:11:37,860
now we reload fast we got rid of the

00:11:34,980 --> 00:11:40,949
flash of unstyled content but we're not

00:11:37,860 --> 00:11:43,110
done because 20 seconds into reading

00:11:40,949 --> 00:11:45,209
this ad loads out of nowhere and shifts

00:11:43,110 --> 00:11:48,870
the content all around and nobody likes

00:11:45,209 --> 00:11:50,970
it and what's happening here is just

00:11:48,870 --> 00:11:54,509
like I talked about earlier is that I'd

00:11:50,970 --> 00:11:56,100
use these third parties Java scripts and

00:11:54,509 --> 00:12:01,949
they're really slow they take forever to

00:11:56,100 --> 00:12:03,870
load we can't force all the ads to be

00:12:01,949 --> 00:12:06,360
implemented in a way that they're going

00:12:03,870 --> 00:12:08,339
to load fast right we can't force them

00:12:06,360 --> 00:12:11,490
to do that but we have to allow them to

00:12:08,339 --> 00:12:13,980
play so to solve this problem where we

00:12:11,490 --> 00:12:17,670
let them exist but don't punish our

00:12:13,980 --> 00:12:19,800
users we put these placeholders because

00:12:17,670 --> 00:12:23,250
we know that there's going to be an ADD

00:12:19,800 --> 00:12:26,990
and we have static resource sizing so we

00:12:23,250 --> 00:12:30,000
know the size of the ad and so the user

00:12:26,990 --> 00:12:32,610
can read the contents of the page and

00:12:30,000 --> 00:12:35,880
then it's up to the ad to load on time

00:12:32,610 --> 00:12:38,970
and eventually the ad will load and it

00:12:35,880 --> 00:12:40,949
won't shift the content so the user can

00:12:38,970 --> 00:12:46,380
continue reading and have a pleasant

00:12:40,949 --> 00:12:49,110
experience and we've solved this content

00:12:46,380 --> 00:12:52,529
shifting issue but we're still not done

00:12:49,110 --> 00:12:54,660
because we need to address this frozen

00:12:52,529 --> 00:12:58,350
janky problem that's happening and

00:12:54,660 --> 00:13:03,540
what's going on here is that the CPU is

00:12:58,350 --> 00:13:06,029
overworked and overloaded and to address

00:13:03,540 --> 00:13:08,250
this we do a few things first is that

00:13:06,029 --> 00:13:11,459
style recalculations are really

00:13:08,250 --> 00:13:12,480
expensive so we want to minimize style

00:13:11,459 --> 00:13:16,019
recalculations

00:13:12,480 --> 00:13:17,430
and we do so by caching the coordinates

00:13:16,019 --> 00:13:19,830
so we know where all the things

00:13:17,430 --> 00:13:22,560
our and then we know when things resize

00:13:19,830 --> 00:13:25,520
and that's the only time that we're

00:13:22,560 --> 00:13:29,040
going to recalculate the style

00:13:25,520 --> 00:13:33,570
also we batch the dome access so for

00:13:29,040 --> 00:13:35,940
example I have this code sample where we

00:13:33,570 --> 00:13:38,520
measure something and then we set the

00:13:35,940 --> 00:13:40,529
height we change the zone and then we

00:13:38,520 --> 00:13:42,089
measure something again and then we

00:13:40,529 --> 00:13:44,339
change the zone by setting the width and

00:13:42,089 --> 00:13:47,220
then we measure something again and this

00:13:44,339 --> 00:13:50,220
is a very reasonable chunk of code but

00:13:47,220 --> 00:13:52,770
what's happening here is that the style

00:13:50,220 --> 00:13:54,660
is being recalculated every time you

00:13:52,770 --> 00:13:55,470
measure something because the dome has

00:13:54,660 --> 00:13:58,230
changed

00:13:55,470 --> 00:14:01,740
so by batching the dome access we can

00:13:58,230 --> 00:14:03,870
schedule a read for the first animation

00:14:01,740 --> 00:14:07,950
frame and then we can schedule a write

00:14:03,870 --> 00:14:10,290
for the next animation frame so that you

00:14:07,950 --> 00:14:12,630
only recalculate the style one time in

00:14:10,290 --> 00:14:16,770
this example and this is going to be a

00:14:12,630 --> 00:14:19,230
lot less expensive for the CPU so we

00:14:16,770 --> 00:14:21,390
have a max of one style recalculation

00:14:19,230 --> 00:14:23,490
for spring and this is the main thing

00:14:21,390 --> 00:14:25,560
that makes amp pages fast when you

00:14:23,490 --> 00:14:27,360
interact with them this is really the

00:14:25,560 --> 00:14:30,420
only thing you can afford if you want to

00:14:27,360 --> 00:14:33,839
get to 60 frames per second and we only

00:14:30,420 --> 00:14:35,700
do two style recalculations for a page

00:14:33,839 --> 00:14:41,910
load which is very low compared to other

00:14:35,700 --> 00:14:45,029
pages the next thing is that we want to

00:14:41,910 --> 00:14:49,080
do GPU optimizable animations only in

00:14:45,029 --> 00:14:54,060
our in our amp components so animations

00:14:49,080 --> 00:14:58,650
are very expensive for this CPU and we

00:14:54,060 --> 00:15:00,360
want the CPU to the handover the work to

00:14:58,650 --> 00:15:03,480
delegate the work over to the GPU

00:15:00,360 --> 00:15:08,730
because the GPU can do animations really

00:15:03,480 --> 00:15:11,790
quickly and really cheaply and so in our

00:15:08,730 --> 00:15:14,459
amp components we only allow animations

00:15:11,790 --> 00:15:18,420
that the GPU can perform in this case

00:15:14,459 --> 00:15:21,480
it's transform and opacity so if you

00:15:18,420 --> 00:15:24,060
wanted to animate the width the GPU is

00:15:21,480 --> 00:15:26,070
not going to know how to do it and it's

00:15:24,060 --> 00:15:29,040
going to say CPU you go ahead and do

00:15:26,070 --> 00:15:29,939
this so we don't allow width or height

00:15:29,040 --> 00:15:32,159
animation

00:15:29,939 --> 00:15:35,039
but we do allow transform and opacity

00:15:32,159 --> 00:15:38,579
because the GPU knows how to do this and

00:15:35,039 --> 00:15:41,549
it can do it very cheaply so now we've

00:15:38,579 --> 00:15:45,029
gotten rid of the frozenness and janky

00:15:41,549 --> 00:15:47,099
nice but I want to take a moment so

00:15:45,029 --> 00:15:50,159
everything I talked about now any

00:15:47,099 --> 00:15:54,659
developer can do you can apply in all of

00:15:50,159 --> 00:15:57,869
your development processes but because

00:15:54,659 --> 00:15:59,579
we're talking about amp amp also uses a

00:15:57,869 --> 00:16:01,709
cache so if you wanted to build a system

00:15:59,579 --> 00:16:05,220
it's a little bit more complicated but

00:16:01,709 --> 00:16:09,779
you can optimize with cache and what we

00:16:05,220 --> 00:16:12,929
do is first of all the cache we have

00:16:09,779 --> 00:16:14,729
servers that are located in lots of

00:16:12,929 --> 00:16:17,939
places all over the world so they're

00:16:14,729 --> 00:16:19,769
physically located next to you and that

00:16:17,939 --> 00:16:21,269
means that delivery of the content is

00:16:19,769 --> 00:16:23,249
going to be a lot faster when these

00:16:21,269 --> 00:16:25,139
servers are located next to and these

00:16:23,249 --> 00:16:26,819
servers they could be Google servers or

00:16:25,139 --> 00:16:29,759
they could be CloudFlare servers it

00:16:26,819 --> 00:16:33,359
doesn't matter but that's going to give

00:16:29,759 --> 00:16:35,459
you that real boost of speed is to have

00:16:33,359 --> 00:16:38,519
this cache and some of the optimizations

00:16:35,459 --> 00:16:41,669
that we do on the cache is the first is

00:16:38,519 --> 00:16:44,429
efficient pre-rendering the browser is

00:16:41,669 --> 00:16:47,249
used to have this thing called a rel

00:16:44,429 --> 00:16:49,139
equals pre-render where you could tell

00:16:47,249 --> 00:16:50,399
their browser you could have a link on

00:16:49,139 --> 00:16:55,439
your page and you could tell the browser

00:16:50,399 --> 00:16:57,299
hey download pre-render this link so the

00:16:55,439 --> 00:17:00,899
browser would download all the contents

00:16:57,299 --> 00:17:02,849
of the page and and then when the user

00:17:00,899 --> 00:17:05,759
would click on the link the page would

00:17:02,849 --> 00:17:08,039
load instantaneously but the problem

00:17:05,759 --> 00:17:11,159
with this was that it downloads the

00:17:08,039 --> 00:17:13,730
entire contents of the page all of the

00:17:11,159 --> 00:17:16,169
images all of the ads all of the

00:17:13,730 --> 00:17:18,539
analytics so the third party JavaScript

00:17:16,169 --> 00:17:20,579
and it would R execute arbitrary

00:17:18,539 --> 00:17:25,110
JavaScript in the background and that's

00:17:20,579 --> 00:17:29,629
very heavy for the CPU so instead what

00:17:25,110 --> 00:17:32,970
we did is we pre render only the first

00:17:29,629 --> 00:17:35,399
viewport and we don't execute any

00:17:32,970 --> 00:17:38,519
third-party JavaScript so none of the

00:17:35,399 --> 00:17:40,379
analytics and all that stuff and what

00:17:38,519 --> 00:17:44,120
this does is it makes pre-rendering

00:17:40,379 --> 00:17:46,920
extremely cheap and non expensive

00:17:44,120 --> 00:17:48,900
the next thing we do is resource

00:17:46,920 --> 00:17:51,420
compression and by resource I mean all

00:17:48,900 --> 00:17:53,720
the things all the files that the users

00:17:51,420 --> 00:17:56,940
are going to download on to their page

00:17:53,720 --> 00:18:00,320
and some of these files are JavaScript

00:17:56,940 --> 00:18:04,020
files and so we use a closure compiler

00:18:00,320 --> 00:18:05,580
to compress our code and here's a chunk

00:18:04,020 --> 00:18:07,440
of code on the list and if you run it

00:18:05,580 --> 00:18:09,870
through the closure compiler it's going

00:18:07,440 --> 00:18:13,680
to compress it to the chunk on the right

00:18:09,870 --> 00:18:16,260
and on top of that oh it also does tree

00:18:13,680 --> 00:18:17,820
shaking so it gets rid of dead code and

00:18:16,260 --> 00:18:22,320
methods that aren't being used and so on

00:18:17,820 --> 00:18:24,660
and we have our own optimizations that

00:18:22,320 --> 00:18:26,940
we do on top of the closure compiler so

00:18:24,660 --> 00:18:29,310
we get rid of developer codes such as

00:18:26,940 --> 00:18:31,590
blogs that you only use for development

00:18:29,310 --> 00:18:33,720
but your users they shouldn't have to

00:18:31,590 --> 00:18:35,850
download those lungs because they're not

00:18:33,720 --> 00:18:40,380
going to be useful so we get rid of

00:18:35,850 --> 00:18:42,960
those as well on our main page on the

00:18:40,380 --> 00:18:45,900
HTML we use a compression algorithm

00:18:42,960 --> 00:18:48,360
called brought Lee and that saved us 8%

00:18:45,900 --> 00:18:51,630
over gzip which is another compression

00:18:48,360 --> 00:18:53,850
algorithm and then finally I want to

00:18:51,630 --> 00:18:57,420
talk about images because images make up

00:18:53,850 --> 00:19:00,300
64 percent of the bytes of an average

00:18:57,420 --> 00:19:03,540
mobile page that's huge so if you can

00:19:00,300 --> 00:19:07,980
effect images you can have a huge impact

00:19:03,540 --> 00:19:10,320
on the size of the page so we compress

00:19:07,980 --> 00:19:12,870
images the first thing that we do is we

00:19:10,320 --> 00:19:14,790
remove invisible data this is metadata

00:19:12,870 --> 00:19:19,530
that your users don't see such as

00:19:14,790 --> 00:19:21,540
geolocation and so on and we also we

00:19:19,530 --> 00:19:24,690
reduce the quality of the image and we

00:19:21,540 --> 00:19:26,940
try to have one color sample for every

00:19:24,690 --> 00:19:30,990
four pixels and this reduce the image

00:19:26,940 --> 00:19:33,200
size by 40 bytes on top of that in for

00:19:30,990 --> 00:19:37,160
browsers that support WebP II which is

00:19:33,200 --> 00:19:39,720
another image format such as JPEG we

00:19:37,160 --> 00:19:42,960
convert the images to WebP II and that

00:19:39,720 --> 00:19:44,670
reduces the images further and then for

00:19:42,960 --> 00:19:47,220
Chrome users that have data saver

00:19:44,670 --> 00:19:50,460
enabled or places in the world where

00:19:47,220 --> 00:19:53,790
data is extremely slow we lower the

00:19:50,460 --> 00:19:55,860
quality of the images even further to

00:19:53,790 --> 00:19:57,070
save more bytes so now when we apply

00:19:55,860 --> 00:20:00,340
these

00:19:57,070 --> 00:20:03,009
three things on an image let's look at

00:20:00,340 --> 00:20:06,669
the before and after so before we have

00:20:03,009 --> 00:20:09,779
two hundred and forty thousand bytes for

00:20:06,669 --> 00:20:13,210
the left image and the right image has

00:20:09,779 --> 00:20:16,269
25 thousand bytes that's about a 90%

00:20:13,210 --> 00:20:20,559
reduction in bytes and keep in mind

00:20:16,269 --> 00:20:24,610
images make up 65% of your page so

00:20:20,559 --> 00:20:26,080
that's pretty big and you might look at

00:20:24,610 --> 00:20:29,200
it and say you know what I don't like

00:20:26,080 --> 00:20:32,110
the image on the right it's not as good

00:20:29,200 --> 00:20:34,330
I could tell the difference but I want

00:20:32,110 --> 00:20:37,509
to tell you that actually I switched

00:20:34,330 --> 00:20:39,820
them so the image on the right is the

00:20:37,509 --> 00:20:46,690
before the image on the left is actually

00:20:39,820 --> 00:20:49,000
the after so now to summarize everything

00:20:46,690 --> 00:20:53,230
if you haven't paid attention or if you

00:20:49,000 --> 00:20:56,320
just walked in to make webpages faster

00:20:53,230 --> 00:20:57,940
we want to unblock the render by making

00:20:56,320 --> 00:20:59,740
sure that scripts are asynchronous so

00:20:57,940 --> 00:21:02,019
you don't have to wait for them you want

00:20:59,740 --> 00:21:04,269
to bring your CSS with you you want to

00:21:02,019 --> 00:21:07,480
inline it and you want to limit it to 50

00:21:04,269 --> 00:21:10,120
kilobytes and third javascript is

00:21:07,480 --> 00:21:11,440
third-party javascript is okay but you

00:21:10,120 --> 00:21:12,730
want to put them in iframes

00:21:11,440 --> 00:21:14,590
so they don't affect the rest of your

00:21:12,730 --> 00:21:16,419
page and you want to prioritize your

00:21:14,590 --> 00:21:20,110
resources you want to load the things

00:21:16,419 --> 00:21:23,230
that the user is going to see first also

00:21:20,110 --> 00:21:24,639
we use opacity magic to make sure that

00:21:23,230 --> 00:21:27,070
this doesn't happen and we're going to

00:21:24,639 --> 00:21:30,700
do server-side rendering in the future

00:21:27,070 --> 00:21:34,240
so that there isn't even a tiny bit of a

00:21:30,700 --> 00:21:37,899
delay and you want to stop shipping by

00:21:34,240 --> 00:21:40,029
having placeholders and static resource

00:21:37,899 --> 00:21:42,700
sizing so that your users don't suffer

00:21:40,029 --> 00:21:46,899
from this atrocity that I'd usually

00:21:42,700 --> 00:21:50,860
commit and then you want to unfreeze

00:21:46,899 --> 00:21:53,049
your page by giving your CPU space to

00:21:50,860 --> 00:21:57,070
breathe so less cell recalculation and

00:21:53,049 --> 00:22:00,490
let the GPU do the animations and then

00:21:57,070 --> 00:22:02,409
if you can do cache optimizations and do

00:22:00,490 --> 00:22:06,129
cheap pre-rendering and compress your

00:22:02,409 --> 00:22:08,019
page so let's see how we're doing 19

00:22:06,129 --> 00:22:10,509
seconds for the average mobile page to

00:22:08,019 --> 00:22:14,499
load and less than one second

00:22:10,509 --> 00:22:18,609
for Ambon search and what does this mean

00:22:14,499 --> 00:22:21,909
well it translates to 10x less data we

00:22:18,609 --> 00:22:23,979
have higher CTR publishers are saying

00:22:21,909 --> 00:22:27,729
higher CTR and higher ad viewer ability

00:22:23,979 --> 00:22:31,959
and today there are about 2 billion amp

00:22:27,729 --> 00:22:37,059
documents from about 900,000 different

00:22:31,959 --> 00:22:39,070
domains so hopefully if you apply some

00:22:37,059 --> 00:22:42,399
of these things you can see similar

00:22:39,070 --> 00:22:43,869
benefits as well and if you don't want

00:22:42,399 --> 00:22:47,109
to do all of that work you're welcome to

00:22:43,869 --> 00:22:50,139
use em now I know this is Jay's cons and

00:22:47,109 --> 00:22:52,719
you all love JavaScript so you might not

00:22:50,139 --> 00:22:54,879
want to use em because it doesn't

00:22:52,719 --> 00:22:56,799
involve writing a lot of JavaScript so

00:22:54,879 --> 00:22:59,739
I'm here to tell you that you're welcome

00:22:56,799 --> 00:23:01,569
to write progressive web app and use em

00:22:59,739 --> 00:23:03,789
for content delivery and that way you

00:23:01,569 --> 00:23:05,829
can write lots of fancy JavaScript and

00:23:03,789 --> 00:23:07,839
if you're passionate about what we do

00:23:05,829 --> 00:23:09,309
and you want to help out amp is an open

00:23:07,839 --> 00:23:10,809
source project and we welcome

00:23:09,309 --> 00:23:13,899
contributors there you're welcome

00:23:10,809 --> 00:23:17,379
to work on the project with us and

00:23:13,899 --> 00:23:20,079
create m components to learn more about

00:23:17,379 --> 00:23:22,449
the m project please go to EMTALA org

00:23:20,079 --> 00:23:25,239
visit our youtube page if you want to

00:23:22,449 --> 00:23:27,489
contribute bitly slash health amp and

00:23:25,239 --> 00:23:29,039
right after this we will be at the am

00:23:27,489 --> 00:23:30,840
booth if you'd like to meet our team

00:23:29,039 --> 00:23:32,370
thank you

00:23:30,840 --> 00:23:33,740
[Applause]

00:23:32,370 --> 00:23:40,099
[Music]

00:23:33,740 --> 00:23:40,099

YouTube URL: https://www.youtube.com/watch?v=EcG5ll_6fJk


