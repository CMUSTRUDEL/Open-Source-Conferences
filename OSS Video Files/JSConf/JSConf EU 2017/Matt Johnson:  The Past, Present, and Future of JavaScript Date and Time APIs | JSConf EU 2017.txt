Title: Matt Johnson:  The Past, Present, and Future of JavaScript Date and Time APIs | JSConf EU 2017
Publication date: 2017-05-20
Playlist: JSConf EU 2017
Description: 
	http://2017.jsconf.eu/speakers/matt-johnson-the-past-present-and-future-of-javascript-date-and-time-apis.html

JavaScript is notoriously bad when it comes to date and time problems. The built-in Date object has so many quirks and implementation differences that many developers have abandoned it, in favor of libraries. How did we get here, and what can be done about this? This talk is in three parts, and led by maintainers of the Moment.js library. First, you’ll understand how the Date object came to be, what parts of it are useful, and where the problems are. Next, you’ll learn about the present-day alternatives. We’ll cover three modern JavaScript libraries: Moment, date-fns, and js-joda, all of which are viable solutions. Lastly, you’ll hear about how we are working through the ECMAScript technical committee to get better support for dates, times and time zones built-in to the language.
Captions: 
	00:00:01,870 --> 00:00:02,870
The Past, Present and Future of JavaScript Date and Time APIs

00:00:02,870 --> 00:00:03,870
Matt Johnson

00:00:21,870 --> 00:00:29,000
[Applause] MATT: Just a second here.

00:00:29,000 --> 00:00:30,800
Okay.

00:00:30,800 --> 00:00:33,610
So everybody hear me all right?

00:00:33,610 --> 00:00:37,560
I'm Matt, I work on Moment.js.

00:00:37,560 --> 00:00:38,829
Everybody in the room use Moment.js?

00:00:38,829 --> 00:00:40,449
A few people, yes?

00:00:40,449 --> 00:00:43,230
Lots of people, pretty much everybody.

00:00:43,230 --> 00:00:48,039
We have been lucky enough to become one of the premier libraries for JavaScript.

00:00:48,039 --> 00:00:50,250
We didn't set out to do that.

00:00:50,250 --> 00:00:54,629
It would have been nice if JavaScript date was good from the beginning so that's kind

00:00:54,629 --> 00:01:01,589
of what I want to talk to you about today, how did we get here, what can you do today,

00:01:01,589 --> 00:01:06,710
are there other good options other than Moment.js, I think there are, and what are we going to

00:01:06,710 --> 00:01:07,750
do in the future?

00:01:07,750 --> 00:01:12,430
So I work at Microsoft, a site reliability engineer which means I don't do a lot of JavaScript

00:01:12,430 --> 00:01:14,080
in the daytime.

00:01:14,080 --> 00:01:20,720
I have been a JavaScript developer for quite had a while though, also a .NET developer.

00:01:20,720 --> 00:01:26,950
I mainly focus on the domain of date and time so if you ever have questions about time zone,

00:01:26,950 --> 00:01:33,890
daylight saving time, how to schedule things, any of those sorts of topics, you can probably

00:01:33,890 --> 00:01:36,620
find me on Stack Overflow, that's usually where I hang out.

00:01:36,620 --> 00:01:42,110
I also have a lot of open source daytime related libraries and if you've got daytime bugs on

00:01:42,110 --> 00:01:47,170
your projects I may have jumped in and fixed it.

00:01:47,170 --> 00:01:48,630
That's what I do.

00:01:48,630 --> 00:01:52,860
And I like cheese, because everybody likes cheese.

00:01:52,860 --> 00:01:55,640
So what is a date, let's talk about dates.

00:01:55,640 --> 00:01:59,080
I think a date looks like this January 1st.

00:01:59,080 --> 00:02:01,840
Everybody agree with me that's a date?

00:02:01,840 --> 00:02:05,700
Yes, I think that's a date.

00:02:05,700 --> 00:02:09,789
But that gets us into problems with JavaScript.

00:02:09,789 --> 00:02:12,980
If we take a look at this little demo that I made here, this is literally all I have,

00:02:12,980 --> 00:02:20,770
a HTML5 date input type, okay, and all I am going to do with that is just give you the

00:02:20,770 --> 00:02:21,770
output.

00:02:21,770 --> 00:02:27,599
I am going to feed that into the value of an object and I am going to say to date string.

00:02:27,599 --> 00:02:34,540
Let's say I was born today, okay, what happened here?

00:02:34,540 --> 00:02:38,310
I picked May 7th but I got May 6th.

00:02:38,310 --> 00:02:41,879
Does anybody ever run into this problem with the date object?

00:02:41,879 --> 00:02:45,840
This is one of the things that people yell and scream about the date object.

00:02:45,840 --> 00:02:46,840
What's going on here?

00:02:46,840 --> 00:02:50,700
What's going on here is that I'm from the United States and I haven't adjusted this

00:02:50,700 --> 00:02:58,840
computer's time zone to be east of the UTC line, it's still west of it, so if you happen

00:02:58,840 --> 00:03:05,219
to be that negative offset from UTC you will find that JavaScript will throw your dates

00:03:05,219 --> 00:03:14,970
off by one, and this happens because the specification originally wasn't clear about what to do when

00:03:14,970 --> 00:03:17,459
you only have a date.

00:03:17,459 --> 00:03:23,090
It just said: if I've got some value what I don't know the offset then the offset must

00:03:23,090 --> 00:03:24,139
be UTC.

00:03:24,139 --> 00:03:27,670
Well, what's an UTC day?

00:03:27,670 --> 00:03:32,640
From UTC midnight to UTC the end of midnight - the only people that I know of that are

00:03:32,640 --> 00:03:35,151
always on an UTC day are mostly in Iceland.

00:03:35,151 --> 00:03:39,810
Iceland is on GMT year round.

00:03:39,810 --> 00:03:46,489
Even in Greenwich where they draw the Greenwich mean line, that's not on UTC all the time.

00:03:46,489 --> 00:03:51,760
They are UTC plus one right now for British Summer Time so there's a discrepancy in the

00:03:51,760 --> 00:03:57,510
last two forms here between this specification which is where we get all of our date and

00:03:57,510 --> 00:04:03,090
time standards from and the other specification.

00:04:03,090 --> 00:04:09,230
As you can see the third item on there is a date and a time and originally it was said

00:04:09,230 --> 00:04:15,480
that should be UTC but they later corrected it to be local so fortunately for date and

00:04:15,480 --> 00:04:22,840
times we now know all modern browsers will be on local time but for date forms they got

00:04:22,840 --> 00:04:27,379
stuck with UTC and really this comes down to web reality.

00:04:27,379 --> 00:04:31,150
We wanted to change it, the implementers all wanted to change it but when Chrome tried

00:04:31,150 --> 00:04:38,230
there were so many lash backs within a small window that they had to revert so the script

00:04:38,230 --> 00:04:45,050
now only says four date only forms they are UTC and that's because that's the reality

00:04:45,050 --> 00:04:49,770
of the web since the early days of the Internet.

00:04:49,770 --> 00:04:53,370
But a date - what is a date?

00:04:53,370 --> 00:05:02,100
It's not [audio problem] in JavaScript it's not, it's a time stamp.

00:05:02,100 --> 00:05:12,889
It's the number of seconds since - the number of milliseconds since - you can't have.

00:05:12,889 --> 00:05:17,560
We lost display here.

00:05:17,560 --> 00:05:19,300
Hold on.

00:05:19,300 --> 00:05:27,539
There we go, so we can't have just the date represented in terms of milliseconds.

00:05:27,539 --> 00:05:36,020
You all should probably know this but not every day is a whole number of 24 hours exactly

00:05:36,020 --> 00:05:40,409
and the days that aren't are random all around the world because of time zones.

00:05:40,409 --> 00:05:43,919
When we are in standard time and then we switch to summertime or we call it daylight time

00:05:43,919 --> 00:05:51,990
in some parts of the world, we might have a 23 or 25-hour local day depending on which

00:05:51,990 --> 00:05:56,440
way we are transitioning.

00:05:56,440 --> 00:06:04,330
If you live on this small island called Lord Howe Island they only switch by half an hour

00:06:04,330 --> 00:06:10,990
so you will have a 23.5-hour day, or a 24.5-hour day, so you can't just measure a date in terms

00:06:10,990 --> 00:06:12,050
of milliseconds.

00:06:12,050 --> 00:06:14,639
It's the wrong type.

00:06:14,639 --> 00:06:16,990
I like to call it a datish.

00:06:16,990 --> 00:06:23,580
We have the falsey, truthy, it's a datish.

00:06:23,580 --> 00:06:28,000
There's this wonderful quote: off by one and naming thins, cash validation doesn't apply

00:06:28,000 --> 00:06:29,000
here.

00:06:29,000 --> 00:06:33,650
I usually throw time zones into the mix of things that are hard in computer science so

00:06:33,650 --> 00:06:38,169
one wonders what were they thinking, why did they do this?

00:06:38,169 --> 00:06:43,560
I have to go back to this, Brendan and I, one of the inventors of JavaScript called

00:06:43,560 --> 00:06:49,900
Live Script back then, they had very little time to do this and they were told just make

00:06:49,900 --> 00:06:56,060
it look like Java, and he has told us many times, and there's a couple of blog posts.

00:06:56,060 --> 00:07:04,129
Actually it was Ken Smith, not Brendan, Ken of net scape, took the utility code from Java

00:07:04,129 --> 00:07:12,439
in the implementation and translated into the implementation for the early days to JavaScript.

00:07:12,439 --> 00:07:14,159
This is what that looked like.

00:07:14,159 --> 00:07:18,101
Everybody thinks that it all happened all at once but if you look at the dates you can

00:07:18,101 --> 00:07:21,740
see that when they developed it Java was in beta.

00:07:21,740 --> 00:07:22,740
Nobody had used this thing.

00:07:22,740 --> 00:07:29,479
They just said this is how Java does dates so this is how JavaScript will do dates and

00:07:29,479 --> 00:07:37,990
by the time Java 1.0 came out the JavaScript prototype was set in stone and then when Java

00:07:37,990 --> 00:07:44,380
1.1 came out we deprecated almost all the functionality, moving it off to something

00:07:44,380 --> 00:07:51,379
called Java calendar so we are stuck with a model that was fundamentally broken and

00:07:51,379 --> 00:07:56,599
found pretty early on, and we never did anything about.

00:07:56,599 --> 00:08:03,830
We published ECMAScript 1.0 afterwards and adjusted that and that's just what we have

00:08:03,830 --> 00:08:09,560
today, so there's a lot of things that are wrong besides just the date parsing.

00:08:09,560 --> 00:08:13,580
I showed you how when you parse the date you can be off by one but look at this code.

00:08:13,580 --> 00:08:17,639
Can anybody guess what this result?

00:08:17,639 --> 00:08:18,639
This looks reasonable.

00:08:18,639 --> 00:08:22,330
A lot of people would write something like this.

00:08:22,330 --> 00:08:25,340
Just think in your mind what you might think it is.

00:08:25,340 --> 00:08:28,699
I look at that and say: well, it's December 31st and I'm adding a month so it must be

00:08:28,699 --> 00:08:36,820
January 31st, is the result.

00:08:36,820 --> 00:08:41,979
>> [off mic] MATT: We end up at March 2nd.

00:08:41,979 --> 00:08:47,620
Only when I run this code from this time zone in Berlin.

00:08:47,620 --> 00:09:00,079
Notice in terms of time we did something implicit which

00:09:00,079 --> 00:09:05,220
converted it from local to UTC time and gave me an UTC-based time stamp so not only do

00:09:05,220 --> 00:09:13,100
I end up on March 2nd, because I actually started on November 31st, which doesn't exist,

00:09:13,100 --> 00:09:16,510
so I started - sorry, on January 31st.

00:09:16,510 --> 00:09:22,440
So I went to February 31st, which doesn't exist, so I went into March, and then I went

00:09:22,440 --> 00:09:24,660
back an hour for UTC.

00:09:24,660 --> 00:09:25,920
So there's a lot of things wrong with this.

00:09:25,920 --> 00:09:29,680
The other thing that it highlights is that data is mutable.

00:09:29,680 --> 00:09:30,680
Notice how I've added a month?

00:09:30,680 --> 00:09:35,300
I had on get the month and then increment it and then rely on this bubbling functionality

00:09:35,300 --> 00:09:39,670
in order to move from one month to the next.

00:09:39,670 --> 00:09:45,360
These are really difficult concepts, especially for a beginner developer.

00:09:45,360 --> 00:09:49,649
Date in almost any other language is a value type, it's immutable.

00:09:49,649 --> 00:09:52,970
It doesn't change once you create it.

00:09:52,970 --> 00:09:57,050
If you add a month, you have a specific method; add a month and you get back the one with

00:09:57,050 --> 00:09:58,410
the month added.

00:09:58,410 --> 00:10:02,880
The other thing we have wrong with date is notice nowhere here did I say what time I

00:10:02,880 --> 00:10:07,400
was starting, I just started it in local time so the only thing it supports is the local

00:10:07,400 --> 00:10:10,630
time that the environment is running on and UTC.

00:10:10,630 --> 00:10:17,390
Well, that's really bad if you are a Node developer because nobody cares about the times

00:10:17,390 --> 00:10:18,600
going on your server.

00:10:18,600 --> 00:10:22,490
You really shouldn't care about times going on your server anyway.

00:10:22,490 --> 00:10:30,940
Okay, this one I love, strings should be interchangeable in most JavaScript things, we have string

00:10:30,940 --> 00:10:33,540
0, regular 0, 00, or 000.

00:10:33,540 --> 00:10:38,149
Does anybody think this should give the same results, whatever they might be?

00:10:38,149 --> 00:10:41,600
They kind of should be the same defaults.

00:10:41,600 --> 00:10:46,820
I will give you a hint, they are in descending order here.

00:10:46,820 --> 00:10:52,450
Every one of those things is going to give you something different, and so the first

00:10:52,450 --> 00:10:56,610
one is because when you only parse a number as a string it's treated as a year, so year

00:10:56,610 --> 00:11:02,493
2000, and anything that is parsed as a number is treated as a time stamp so we are right

00:11:02,493 --> 00:11:04,270
at the epoch there.

00:11:04,270 --> 00:11:14,699
Notice it's not midnight there, it's 11.00am so not even the same time.

00:11:14,699 --> 00:11:16,959
1.00am.

00:11:16,959 --> 00:11:27,100
1900 is because if you pass a year from 0 to 99 JavaScript data treats that as 1900

00:11:27,100 --> 00:11:32,829
to avoid Y2K problems but as soon as you go to 100 that is year 100 so they are not even

00:11:32,829 --> 00:11:36,980
sequential in terms of parameters.

00:11:36,980 --> 00:11:42,860
And 09 just because of the overflow situation I showed you before, we have no such thing

00:11:42,860 --> 00:11:46,770
as the easier day of the month so it just goes back one day.

00:11:46,770 --> 00:11:50,320
What do we do with this?

00:11:50,320 --> 00:11:54,540
We saw Java came out with Joda-Time.

00:11:54,540 --> 00:11:57,690
If you are a Java developer you should be familiar with it.

00:11:57,690 --> 00:12:06,459
It is the base for 3010 which made its way onto Java 8 so you should be using Java 8

00:12:06,459 --> 00:12:13,520
with the time package with a few tweaks to make it better.

00:12:13,520 --> 00:12:18,579
There is alternate one that is also very good called Time4J and they take a little different

00:12:18,579 --> 00:12:22,389
philosophy between the two.

00:12:22,389 --> 00:12:26,009
We also had to address this with libraries.

00:12:26,009 --> 00:12:33,399
Really early on there was a date JS library and I don't recommend you use that today but

00:12:33,399 --> 00:12:38,690
Sugar and Moment came on the scene in 2011 and Sugar is still pretty good if you want

00:12:38,690 --> 00:12:45,160
to do something called natural language parsing, like if you have a string that says: what

00:12:45,160 --> 00:12:49,820
time is it three days and two months from now and it's actually spelt out as a string,

00:12:49,820 --> 00:12:54,410
Sugar will parse that and try to make a good guess at it.

00:12:54,410 --> 00:12:57,200
But most people are using Moment.

00:12:57,200 --> 00:13:02,899
Moment does about 90% of the things you would want to do with date and time.

00:13:02,899 --> 00:13:05,140
Maybe even 99%.

00:13:05,140 --> 00:13:08,350
But Moment isn't the only thing out there.

00:13:08,350 --> 00:13:12,560
There are people working on a port of the Joda-Time standard into JavaScript, that's

00:13:12,560 --> 00:13:16,660
the js-joda library and I think JS is pretty awesome.

00:13:16,660 --> 00:13:24,589
There is also this thing called date functions which has got a lot of notoriety lately, which

00:13:24,589 --> 00:13:29,130
says instead of a very large JavaScript object if all you need to do is add a month, let's

00:13:29,130 --> 00:13:30,380
just add a month.

00:13:30,380 --> 00:13:35,350
So you pull in individual functions for different things, so I am going to show you those libraries.

00:13:35,350 --> 00:13:42,050
Moment I saw everybody is familiar with.

00:13:42,050 --> 00:13:44,850
We are very specific when we do our parsing.

00:13:44,850 --> 00:13:50,589
We don't make that assumption that said: I can tell you what you want.

00:13:50,589 --> 00:13:55,130
No, I can't always tell what you want, sometimes you have to tell me so if you give me a string

00:13:55,130 --> 00:13:59,680
with no context and you don't tell me what it is then I will assume it's local time because

00:13:59,680 --> 00:14:01,730
that's what the date object does.

00:14:01,730 --> 00:14:05,790
If you give me a string with no context and tell me you want it as UTC then I will assume

00:14:05,790 --> 00:14:10,500
it is UTC and we have time zone support through the Moment time grown library that imports

00:14:10,500 --> 00:14:17,089
the database that pretty much all modern computing uses.

00:14:17,089 --> 00:14:23,660
Moment's API is fluid and intentional so we can do something liked and 200 days and then

00:14:23,660 --> 00:14:24,660
format that.

00:14:24,660 --> 00:14:29,009
I can tell exactly what my input style should be so there's no confusion on whether that's

00:14:29,009 --> 00:14:38,060
July 5th or May 7th, because I'm telling you explicitly that it's day, month, year format.

00:14:38,060 --> 00:14:43,490
The only problem that we have lately with Moment is it is still a mutable API and that's

00:14:43,490 --> 00:14:49,200
because when it was originally developed it was built using the JavaScript date object

00:14:49,200 --> 00:14:54,649
as its basis so notice I clone the Moment here before I start adding to it.

00:14:54,649 --> 00:14:59,850
If I didn't do that, it wouldn't just output the same string here but would also change

00:14:59,850 --> 00:15:04,940
the value of this M variable, so it's important when you are working with Moment that you

00:15:04,940 --> 00:15:07,550
realise it does mutate the object as you work through its API.

00:15:07,550 --> 00:15:10,180
That's something we are considering from OF3O.

00:15:10,180 --> 00:15:20,460
There's some progress on that so hopeful we will have a Moment 30 with immutable API.

00:15:20,460 --> 00:15:22,149
You can validate simple dates.

00:15:22,149 --> 00:15:25,990
It does what it says it does and it does it pretty good.

00:15:25,990 --> 00:15:30,060
Let's look at this date functions library I mentioned.

00:15:30,060 --> 00:15:34,560
It's very lightweight and modular, and the intent is every single function is its own

00:15:34,560 --> 00:15:36,880
module so you only pull on the ones you need.

00:15:36,880 --> 00:15:41,329
If all I need is something that will format a string and add some days then I just import

00:15:41,329 --> 00:15:43,900
those to functions.

00:15:43,900 --> 00:15:49,850
It uses date objects as I was saying so I create a date object, I format it, I get the

00:15:49,850 --> 00:15:50,850
output.

00:15:50,850 --> 00:15:56,079
Again, remember that JavaScript date object has zero base months so it looks like I'm

00:15:56,079 --> 00:16:07,100
parsing January 1st but it is not, it is February 1st so the string says February 1st.

00:16:07,100 --> 00:16:14,270
This adds days as it says, so it doesn't add a value.

00:16:14,270 --> 00:16:19,360
So if you want immutable functions check out date functions.

00:16:19,360 --> 00:16:27,690
Js-joda is also really good, it also has an immutable API, it models separation of concerns

00:16:27,690 --> 00:16:32,819
very well so we have a different object which is a local date and local in this context

00:16:32,819 --> 00:16:38,310
doesn't mean local to the computer; it means not - it means could be local anywhere.

00:16:38,310 --> 00:16:41,209
It means somebody is local.

00:16:41,209 --> 00:16:46,269
And that's just terminology that has been borrowed over from the ISO8601 standard into

00:16:46,269 --> 00:16:51,990
Java and now up into js-joda so you may see that a few places.

00:16:51,990 --> 00:17:00,270
When we work with this API, we don't have to have the API guess what we want; we tell

00:17:00,270 --> 00:17:01,490
it specifically what we want.

00:17:01,490 --> 00:17:07,540
We say: here is a date, get the start of the day, I wants that for Berlin and then I want

00:17:07,540 --> 00:17:12,130
to know the equivalent time in the computer's local time or in UTC.

00:17:12,130 --> 00:17:14,200
I can do these things very easily.

00:17:14,200 --> 00:17:17,150
The start of day function is a really interesting concept also.

00:17:17,150 --> 00:17:23,949
Keep in mind that not every day starts right at midnight so a start of day isn't just snap

00:17:23,949 --> 00:17:26,190
to midnight and truncate off data.

00:17:26,190 --> 00:17:29,140
If you are in Brazil or a few other places around the world when they start daylight

00:17:29,140 --> 00:17:38,820
saving time they go from 11.5959 of the night before up to 0100, so you have to have those

00:17:38,820 --> 00:17:45,320
rules in your data to know that the start of day is not necessarily midnight.

00:17:45,320 --> 00:17:50,730
And Joda-Time is also immutable, so we have D1 and D2 here being different objects, the

00:17:50,730 --> 00:17:52,909
same as I showed you before.

00:17:52,909 --> 00:17:54,550
So what are we going to do?

00:17:54,550 --> 00:17:58,030
How are we going to get out of this mess where we don't have to use libraries or deal with

00:17:58,030 --> 00:18:00,020
an API that is broken.

00:18:00,020 --> 00:18:04,740
I think we should fix it, do you think we should fix it?

00:18:04,740 --> 00:18:20,590
So Moment.js is a JavaScript Foundation member, Maddie and Brian Terlson are helping with

00:18:20,590 --> 00:18:25,600
this and we've reached stage 1 which means we have general approval of the committee

00:18:25,600 --> 00:18:29,580
to think about how to do a new date API.

00:18:29,580 --> 00:18:35,169
We have a general idea about what we want but it is not locked in so definitely come

00:18:35,169 --> 00:18:41,960
take a look and give your opinions, we will take issues on GitHub, we will take poll requests,

00:18:41,960 --> 00:18:47,730
any way you want to talk to us or come find Maggie after the talk here.

00:18:47,730 --> 00:18:49,760
Generally we want to make date better.

00:18:49,760 --> 00:18:55,380
We want to learn from the APIs that have come before us, not just in JavaScript but in other

00:18:55,380 --> 00:19:01,409
languages, we want to be comfortable for everybody who uses JavaScript so it needs to be idiomatic,

00:19:01,409 --> 00:19:05,840
not to bring in a whole load of Java cruft and other things that don't apply, at least

00:19:05,840 --> 00:19:10,520
not today, and we are going to do the 1 base months, not the 0 base months.

00:19:10,520 --> 00:19:14,070
I will put my foot down on that one.

00:19:14,070 --> 00:19:23,330
Possible ideas: it might look like Moment, or Joda-Time or Time4J, it might be that we

00:19:23,330 --> 00:19:32,460
provide functionality so that platforms can do what they need to do in a smaller and more

00:19:32,460 --> 00:19:36,530
direct way but we don't know yet, so help us figure it out.

00:19:36,530 --> 00:19:40,710
Here are some examples, and you can see we have this zone date time object that's a very

00:19:40,710 --> 00:19:46,460
joda-like object but I'm not doing a lot of object construction to get the time zone.

00:19:46,460 --> 00:19:50,200
I'm just parsing them along as strings.

00:19:50,200 --> 00:20:00,419
If I want to add time, I might do something like add to, and that's very Moment-like.

00:20:00,419 --> 00:20:02,240
What else might we be able to do?

00:20:02,240 --> 00:20:07,380
This is actually a very complex problem if you are in a scheduling environment.

00:20:07,380 --> 00:20:12,120
If I need to run an event at the same time every day but it's in the user's local day,

00:20:12,120 --> 00:20:17,799
so this is a starting point and then I say I want the next four occurrences but I'm crossing

00:20:17,799 --> 00:20:23,950
a daylight saving time transition so 8.00am every day even when the offset in the Pacific

00:20:23,950 --> 00:20:29,690
time zone changes from minus 8 to minus 7 you can see here the UTC output has changed

00:20:29,690 --> 00:20:34,990
also so I cannot schedule in UTC time, I need to schedule in local time and doing that without

00:20:34,990 --> 00:20:37,909
a library is really, really hard with the JavaScript object.

00:20:37,909 --> 00:20:44,279
Most people will just say: plus 24, times 60, times 60, times whatever to get the next

00:20:44,279 --> 00:20:47,760
instant but then you will find you're running at 7.00 or 9.00am and they will be off by

00:20:47,760 --> 00:20:51,560
one.

00:20:51,560 --> 00:20:54,570
It would look something like this.

00:20:54,570 --> 00:20:58,310
If you think this looks awful and you have a better idea, come talk to us.

00:20:58,310 --> 00:21:03,300
If you think this is great, let us know, and that's really all I've got so please give

00:21:03,300 --> 00:21:04,300
your feedback.

00:21:04,300 --> 00:21:09,020
If you have other questions, come find me afterwards, or you can always post on Stack

00:21:09,020 --> 00:21:10,250
Overflow.

00:21:10,250 --> 00:21:14,290
If you just tag it with date time or time zone, I will find it probably.

00:21:14,290 --> 00:21:21,740
Lots of other people as well, and I have a six-hour course on fundamentals on Pluralsight

00:21:21,740 --> 00:21:22,910
if you really want on dive in, so thank you very much.

00:21:22,910 --> 00:21:23,910
[Applause] >> Thank you so much for that.

00:21:23,910 --> 00:21:24,910
That was fantastic.

00:21:24,910 --> 00:21:25,910
We are running a little ahead of time so I think maybe we've got time for a question

00:21:25,910 --> 00:21:26,910
or two, if you want to handle that?

00:21:26,910 --> 00:21:27,910
Anyone has any questions, stick your hand up.

00:21:27,910 --> 00:21:28,910
MATT: Question?

00:21:28,910 --> 00:21:29,910
>> Questions from anybody?

00:21:29,910 --> 00:21:30,910
MATT: No.

00:21:30,910 --> 00:21:31,910
Okay.

00:21:31,910 --> 00:21:32,410

YouTube URL: https://www.youtube.com/watch?v=aVuor-VAWTI


