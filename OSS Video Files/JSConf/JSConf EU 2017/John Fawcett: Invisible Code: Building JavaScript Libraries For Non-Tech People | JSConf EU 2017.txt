Title: John Fawcett: Invisible Code: Building JavaScript Libraries For Non-Tech People | JSConf EU 2017
Publication date: 2017-06-06
Playlist: JSConf EU 2017
Description: 
	http://2017.jsconf.eu/speakers/john-fawcett-Invisible-code-building-javascript-libraries-for-non-technical-people.html

The vast majority of website owners (and therefore JavaScript users) are non-technical. They donâ€™t know how to copy-paste an embed code, much less how to use ES7 or React. But these website owners have a right to the same high quality tools we use every day.

By building tools which can be dropped into pages, which learn their configuration from their environment, which assume reasonable defaults and deliver value without having to be told how, we can make what we build work for everyone, not just the lovely people in this room.
Captions: 
	00:00:00,170 --> 00:00:01,180
Invisible Code: Building JavaScript Libraries For Non-Technical People

00:00:27,830 --> 00:00:31,539
[Applause] JOHN: So everybody in this room, it's probably

00:00:31,539 --> 00:00:36,050
their domain to add new functionality to the website but what about the majority of website

00:00:36,050 --> 00:00:41,129
owners, what about that salon daughter who has his daughter hack together a website for

00:00:41,129 --> 00:00:42,129
him?

00:00:42,129 --> 00:00:48,179
It starts off simple and then he has a script tag added here, a widget, an image gallery,

00:00:48,179 --> 00:00:53,769
a couple of analytics tracking tools for some reason, so over time the small, simple website

00:00:53,769 --> 00:00:57,780
turns into this multimegabyte monstrosity.

00:00:57,780 --> 00:01:00,309
It's not really his fault.

00:01:00,309 --> 00:01:03,909
He doesn't know exactly what he is doing, he doesn't know the end result is going to

00:01:03,909 --> 00:01:10,200
make his website cooler, so how can we as developers of this third party embedded code

00:01:10,200 --> 00:01:13,890
make this situation a little better?

00:01:13,890 --> 00:01:19,320
Before we get started my name is John Fawcett, I have been building out our AMP experience,

00:01:19,320 --> 00:01:21,460
you may know Google AMP.

00:01:21,460 --> 00:01:26,270
Also been helping out on our apps team so I have been writing quite a bit of embedded

00:01:26,270 --> 00:01:29,810
JavaScript lately and it has been fun.

00:01:29,810 --> 00:01:37,049
So before we get started into the main thing, let's take a look at some presumably reputable

00:01:37,049 --> 00:01:45,810
survey, so according to Netcraft back in 2016 we hit over 1 billion unique host names and

00:01:45,810 --> 00:01:50,229
that's Carl up there just for effect, right, he has nothing to do with this and also I

00:01:50,229 --> 00:01:55,909
added an emoji about an hour ago because everybody else seems to have them, so a billion host

00:01:55,909 --> 00:02:02,439
names, and 72% of these pages make more than 51 requests and we can imagine that seems

00:02:02,439 --> 00:02:09,929
a little high and, of course, there is a bunch that make way too many requests, right, so

00:02:09,929 --> 00:02:13,810
the reason I'm showing you this is just to give you perspective.

00:02:13,810 --> 00:02:19,650
We are developers and we kind of know what we are doing maybe, and the rest of the people

00:02:19,650 --> 00:02:24,530
that maybe own the rest of the billion host names on the Internet probably don't know

00:02:24,530 --> 00:02:27,330
as much.

00:02:27,330 --> 00:02:33,140
We should get inside their head, how are they even adding this functionality to their website?

00:02:33,140 --> 00:02:36,060
There's really three sort of scenarios they go through.

00:02:36,060 --> 00:02:38,739
They either know enough to be a little bit dangerous.

00:02:38,739 --> 00:02:43,260
They find a script tag on the Internet and then just paste it into their site and then

00:02:43,260 --> 00:02:44,879
tweet things until it works.

00:02:44,879 --> 00:02:56,550
Then there's CMS plugins like Wix and Squarespace, but maybe just ask a developer, or they copy

00:02:56,550 --> 00:03:01,942
and paste as well, but we are going to focus on these first two because at the end of the

00:03:01,942 --> 00:03:04,069
day these are pretty much exactly the same.

00:03:04,069 --> 00:03:09,870
Maybe in WordPress you have a few extra APIs but these pretty much have the same constraints.

00:03:09,870 --> 00:03:12,950
What are the constraints?

00:03:12,950 --> 00:03:15,530
The first thing is environment.

00:03:15,530 --> 00:03:22,260
This is a huge umbrella term, I know, but when writing a web app we have a very well-defined

00:03:22,260 --> 00:03:25,980
audience that we can actually develop for.

00:03:25,980 --> 00:03:30,500
And for building embedded code we actually have two different kinds of users.

00:03:30,500 --> 00:03:34,549
We have the person that's going to be consuming the code and pasting it on their website one

00:03:34,549 --> 00:03:39,049
way or the other, and we have the end users, and we can't make assumptions about what those

00:03:39,049 --> 00:03:40,530
end users really are.

00:03:40,530 --> 00:03:46,420
We want our code to be basically run everywhere and that's pretty difficult, right?

00:03:46,420 --> 00:03:49,489
So yeah, it's weird.

00:03:49,489 --> 00:03:51,290
Next thing is file size.

00:03:51,290 --> 00:03:57,260
We really need to respect the end user's bandwidth and capacity to parse JavaScript.

00:03:57,260 --> 00:04:03,469
We also need to respect the website owner so these are no-brainer things but we really

00:04:03,469 --> 00:04:09,830
have to keep them in mind when running or making third party code to be embedded.

00:04:09,830 --> 00:04:15,640
And browser compatibility, again if you can define your audience you know, but we can't

00:04:15,640 --> 00:04:23,230
really define that, it's their audience, so browser compatibility is more about global

00:04:23,230 --> 00:04:31,060
trends so you are going to have to support older versions of IE than you want to.

00:04:31,060 --> 00:04:40,830
And the user is an excuse for poor developer ergonomics so they are creating a single JavaScript

00:04:40,830 --> 00:04:47,810
that is hand-rolled to be ES5 compliant and it's not maintainable, and it gets worse and

00:04:47,810 --> 00:04:50,470
worse over time.

00:04:50,470 --> 00:04:57,850
So network: you are likely being embedded in a page where there's a ton of network requests

00:04:57,850 --> 00:05:04,190
because they have three different analytics libraries that are all tracking clicks and

00:05:04,190 --> 00:05:09,560
the mouse movements, so something you need to keep in mind is you may be trying to perform

00:05:09,560 --> 00:05:14,890
a network request when there's a bunch of other network requests going on, so maybe

00:05:14,890 --> 00:05:18,820
we can do something, maybe we can check to see how many network requests are going on

00:05:18,820 --> 00:05:24,970
and try to push our pay load at a time when it's less chatty.

00:05:24,970 --> 00:05:31,521
So you are thinking you are going to write a little widget for general consumption, maybe

00:05:31,521 --> 00:05:39,400
an image gallery or anything, and let's just - basic stuff, I know you guys know this.

00:05:39,400 --> 00:05:40,800
You don't need fonts, okay?

00:05:40,800 --> 00:05:42,220
Just use the host environment.

00:05:42,220 --> 00:05:43,900
Fonts are crazy.

00:05:43,900 --> 00:05:45,310
You don't need them.

00:05:45,310 --> 00:05:48,150
No global rules; compress your images if you have them.

00:05:48,150 --> 00:05:54,650
Maybe even [sound problem] ... okay, back to what we are talking about.

00:05:54,650 --> 00:05:58,980
You may be asking: okay, we are going to write some isolated DOM stuff and we are going to

00:05:58,980 --> 00:05:59,980
style it.

00:05:59,980 --> 00:06:05,560
The question is do I have an external sheet or do I go with inline styles?

00:06:05,560 --> 00:06:07,440
Okay.

00:06:07,440 --> 00:06:10,850
It actually doesn't matter so much because the problems you are going to run up against

00:06:10,850 --> 00:06:13,480
are pretty much exactly the same.

00:06:13,480 --> 00:06:17,340
You are being sane, you are prefixing your styles, you are doing inline and then you

00:06:17,340 --> 00:06:23,410
run across a global style, like this is going to happen pretty much at least 20% of the

00:06:23,410 --> 00:06:31,960
pages you are embedded on, somebody is overwriting it dev style, okay, and you are like: okay,

00:06:31,960 --> 00:06:39,160
maybe I can be very specific about my style sheets and only - I will check for all these

00:06:39,160 --> 00:06:40,160
things.

00:06:40,160 --> 00:06:44,890
Then some reset comes along and has an important tag, and you are like: oh!

00:06:44,890 --> 00:06:47,180
Okay, what can we do about this.

00:06:47,180 --> 00:06:52,481
What can we do about the global styles that resets are putting important on, and one of

00:06:52,481 --> 00:06:56,100
the things you can do is custom tags.

00:06:56,100 --> 00:07:00,440
This works in IE9 and up and everything else for the most part.

00:07:00,440 --> 00:07:08,370
It's not compliant with the HTML5 spec but it's one way to get style isolation.

00:07:08,370 --> 00:07:14,510
In IE9 you need to create an element of the name before you use it so here we have a custom

00:07:14,510 --> 00:07:20,730
element called my widget and we have got style isolation for the most part, so we solve that

00:07:20,730 --> 00:07:25,670
and then somebody has got an all elements select over and it's adding a border radius

00:07:25,670 --> 00:07:33,880
to your newly designed and styled widget, and you are like: okay, let's figure this

00:07:33,880 --> 00:07:35,120
out.

00:07:35,120 --> 00:07:41,250
So anyway, so we've got this and what do we do about this situation?

00:07:41,250 --> 00:07:45,080
There's one thing that we can do and it's to use iframes.

00:07:45,080 --> 00:07:51,580
That's the only way you are going to achieve true style isolation and it's a good idea

00:07:51,580 --> 00:07:56,710
to run your widget inside the iframe anyway because it's a little more respectful of the

00:07:56,710 --> 00:07:57,800
host's environment.

00:07:57,800 --> 00:08:04,660
Yes, I guess we are having some interface problems but I will go on.

00:08:04,660 --> 00:08:12,250
So iframes, if you run a little bit of code on the host environment that puts an iframe

00:08:12,250 --> 00:08:18,570
on the page that's going to run maybe more code in the background, some of that code

00:08:18,570 --> 00:08:23,060
can be prioritised and not pretty much overtake the page.

00:08:23,060 --> 00:08:31,310
Let's find out what's going on with this slide situation, and then I will continue.

00:08:31,310 --> 00:08:34,510
This is the part of the talk where I say, "How's everybody feeling?

00:08:34,510 --> 00:08:42,250
Get up and take a stretch".

00:08:42,250 --> 00:08:50,850
Well, you've maybe been seeing this crazy scrolling thing, and there's like a bunch

00:08:50,850 --> 00:08:56,920
of JavaScript CSS properties in there, so what we can do with the iframe if we embed

00:08:56,920 --> 00:09:05,279
it and we do this for some isolation is to put the iframe in the DOM and then apply our

00:09:05,279 --> 00:09:12,629
own defaults to it, and we take pretty much every single CSS property and put it on that

00:09:12,629 --> 00:09:20,269
iframe so we can have an expected behaviour locally and on anybody else's page.

00:09:20,269 --> 00:09:28,660
Of course, there's still edge cases but this does cover some of them.

00:09:28,660 --> 00:09:32,930
The iframe brings us to JavaScript, right, we are creating the iframe and adding all

00:09:32,930 --> 00:09:41,040
those CSS properties, so what are the pitfalls and crazy stories?

00:09:41,040 --> 00:09:46,220
Well, first off let's get the basics out of the way - and keep flashing my slides.

00:09:46,220 --> 00:09:48,939
Well, all right.

00:09:48,939 --> 00:09:53,140
I could just turn my computer around and everybody can come closer.

00:09:53,140 --> 00:09:54,430
[Laughter] >> It was flashing all of yesterday as well.

00:09:54,430 --> 00:09:56,579
JOHN: Yes, I will just go through it, and we will just deal with it.

00:09:56,579 --> 00:09:58,600
So anyway, let's get the basics out of the way.

00:09:58,600 --> 00:10:02,930
There is some really simple stuff that I know everybody knows: don't use globals, of course.

00:10:02,930 --> 00:10:04,249
We've known this for a while.

00:10:04,249 --> 00:10:09,240
Please, for the love of God, don't, don't mess with the prototype, don't depend on a

00:10:09,240 --> 00:10:13,240
library that messes with the prototype.

00:10:13,240 --> 00:10:14,650
Minify your code.

00:10:14,650 --> 00:10:16,220
Don't make a bunch of requests.

00:10:16,220 --> 00:10:21,360
If you have something you need to phone home with, create a route that you can batch request

00:10:21,360 --> 00:10:25,959
to so you are only sending one, so if somebody is on a mobile phone the biggest problem is

00:10:25,959 --> 00:10:31,949
latency and if you are making a bunch of requests phoning home just at least make a route that's

00:10:31,949 --> 00:10:35,529
going to be able to accept multiple of those requests, it's not too hard.

00:10:35,529 --> 00:10:38,430
And of course profile your code.

00:10:38,430 --> 00:10:43,350
The biggest problem I feel on a lot of these sites is they've can included 47 jQuery plugins

00:10:43,350 --> 00:10:48,930
and not all of them were very considerate of performance.

00:10:48,930 --> 00:10:55,959
If you are going to be having a copy and paste script tag consider within the script tag

00:10:55,959 --> 00:11:03,200
itself - I saw it and was, "Holy crap", this is a great idea, and got a lot of feedback

00:11:03,200 --> 00:11:06,540
from non-technical people, saying, "That's all you have to do?"

00:11:06,540 --> 00:11:10,540
Yes, that's all you have to do.

00:11:10,540 --> 00:11:16,459
A little story about building the AMP viewer.

00:11:16,459 --> 00:11:21,999
If you can imagine a block of code here and then imagine a scenario I put myself in, we

00:11:21,999 --> 00:11:28,750
will be in good shape here, so we are reason the AMP viewer and the AMP viewer - actually,

00:11:28,750 --> 00:11:31,620
how many people are familiar with AMP from Google?

00:11:31,620 --> 00:11:35,319
So you know when you search for Donald Trump and you are wondering why I'm searching for

00:11:35,319 --> 00:11:42,129
Donald Trump, and you go to the search results, it has the little carousel - oh, look at that,

00:11:42,129 --> 00:11:43,129
Cloudflare!

00:11:43,129 --> 00:11:47,360
Hmm, that seems to be extending my desktop now.

00:11:47,360 --> 00:11:52,040
You want to check that out?

00:11:52,040 --> 00:11:54,370
I guess it's in Preferences.

00:11:54,370 --> 00:11:59,180
We can maybe move it over.

00:11:59,180 --> 00:12:12,550
Let's check out Preferences.

00:12:12,550 --> 00:12:15,899
Display.

00:12:15,899 --> 00:12:17,580
There we go.

00:12:17,580 --> 00:12:18,580
Perfect.

00:12:18,580 --> 00:12:26,329
Okay, so I will go back talking about AMP viewer real quick, so you click on a miniature

00:12:26,329 --> 00:12:30,829
carousel in a search result, it has that little lightning bolt and you instantly load the

00:12:30,829 --> 00:12:31,980
page.

00:12:31,980 --> 00:12:36,249
Google does this by pre-rendering the document or pre-rendering the document they loaded

00:12:36,249 --> 00:12:38,399
in an iframe in the background.

00:12:38,399 --> 00:12:43,189
They've got it in a Google CDM and when you click the article it flashes in the view and

00:12:43,189 --> 00:12:48,110
tells the AMP document: hey, you are now visible, you are now allowed to download images and

00:12:48,110 --> 00:12:53,790
to download your analytics tracking tools and actually start tracking so that's kind

00:12:53,790 --> 00:12:55,019
of what the AMP viewer does.

00:12:55,019 --> 00:13:00,790
So anyway, I had some similar code as this and we had already deployed it to thousands

00:13:00,790 --> 00:13:06,579
of sites, and we've started collecting data and one of the pieces of data we collected

00:13:06,579 --> 00:13:09,480
was that this list was undefined.

00:13:09,480 --> 00:13:15,360
If you - you don't really have to understand the code but the iterator function to the

00:13:15,360 --> 00:13:20,420
enumeration methods like map and filter receive three arguments, and the third is list.

00:13:20,420 --> 00:13:24,569
It's the original list that you are iterating on.

00:13:24,569 --> 00:13:30,160
So why, in what scenario is list actually undefined?

00:13:30,160 --> 00:13:36,470
The answer is: when somebody overrides your prototype with an implementation of map that

00:13:36,470 --> 00:13:38,589
does not include list.

00:13:38,589 --> 00:13:39,839
And who does this?

00:13:39,839 --> 00:13:45,160
Well, prototype.js actually did it before 2012 and they realised their folly in 2012

00:13:45,160 --> 00:13:54,540
and released a new version but there's still a ton of websites that use pre-2012 prototype.js.

00:13:54,540 --> 00:13:57,199
What do you even do about that?

00:13:57,199 --> 00:14:00,440
How far do you go in not trusting JavaScript?

00:14:00,440 --> 00:14:06,029
The answer is for us, you know, we went ahead and fixed it and said: okay, let's not rely

00:14:06,029 --> 00:14:13,220
on that variable because there's too many people that are relying on Prototype.js, pre-2012

00:14:13,220 --> 00:14:16,139
I might add.

00:14:16,139 --> 00:14:17,570
So it's up to you.

00:14:17,570 --> 00:14:20,589
You really need to be collecting that data though, that's the important part.

00:14:20,589 --> 00:14:21,709
How do you do it?

00:14:21,709 --> 00:14:23,459
Well, we used Sentry.

00:14:23,459 --> 00:14:26,329
If you haven't used Sentry, it's really awesome, okay?

00:14:26,329 --> 00:14:29,149
I'm just going to zoom in here.

00:14:29,149 --> 00:14:34,970
I mean, you get all kinds of great information, you get the browser and all, the device and

00:14:34,970 --> 00:14:42,069
the breakdown of browser and the errors that are occurring and you will see here the stack

00:14:42,069 --> 00:14:47,790
trace comes in, and we are running completely uglified code and yet when the error comes

00:14:47,790 --> 00:14:52,459
in we can actually see the line that had the error and you see this is a TypeScript file

00:14:52,459 --> 00:14:58,760
which we will talk about a little bit later in developer ergonomics, so yes, we have TypeScript

00:14:58,760 --> 00:15:02,180
or we have Sentry error reporting.

00:15:02,180 --> 00:15:08,180
Now, we only run this for a sample of our users so not everybody is going to be reporting

00:15:08,180 --> 00:15:11,240
errors to us, and it's a pretty easy thing to do.

00:15:11,240 --> 00:15:17,610
You just say: hey, script actually report errors to Sentry; or don't report errors to

00:15:17,610 --> 00:15:18,610
Sentry.

00:15:18,610 --> 00:15:20,139
So that's another thing about being a little bit responsible.

00:15:20,139 --> 00:15:26,350
You don't want every single one of your pieces of code phoning home for whatever reason,

00:15:26,350 --> 00:15:27,870
but there's a problem.

00:15:27,870 --> 00:15:33,230
If you've ever used Sentry you know there's a line called Raven.js which is a sort of

00:15:33,230 --> 00:15:38,999
embedded library of sorts as well and they follow the pattern of a massive JavaScript

00:15:38,999 --> 00:15:45,759
file that is about 2400 lines of code at the end of the day and it's 24 kilobytes minified

00:15:45,759 --> 00:15:54,809
and you have to wonder how many SHR wrappers there are on any given website so Raven.js

00:15:54,809 --> 00:16:01,399
is great, it does a lot of stuff for you, but it was too much for us.

00:16:01,399 --> 00:16:07,040
So what we did is we already had our own SHR wrapper, we already had the ability to parse

00:16:07,040 --> 00:16:10,120
stack traces.

00:16:10,120 --> 00:16:12,870
We just used the API, right?

00:16:12,870 --> 00:16:16,450
If we have access to the API, we can go ahead and push all that error information and we

00:16:16,450 --> 00:16:19,769
don't have that insane amount of code in our build.

00:16:19,769 --> 00:16:24,439
What this really looks like is you are just hooking into the on air function on window

00:16:24,439 --> 00:16:31,199
and you can't use at event listener, Air, I've already tried, but you can override this

00:16:31,199 --> 00:16:34,860
function and hopes nobody else does as well.

00:16:34,860 --> 00:16:40,230
You also need to check that the file name coming through is actually your file because

00:16:40,230 --> 00:16:42,730
there's going to be a ton of errors on the page and you don't want to be reporting them

00:16:42,730 --> 00:16:47,119
all to your Sentry incidents.

00:16:47,119 --> 00:16:55,970
So how do you get rid of those SHR wrappers and one of the things we came up with is API

00:16:55,970 --> 00:16:57,689
fingerprinting.

00:16:57,689 --> 00:17:01,870
We live in a world where jQuery of us this dominant library and still is, even though

00:17:01,870 --> 00:17:09,220
we rarely use it anymore as developers in this room, so - well, let's just look.

00:17:09,220 --> 00:17:17,740
According to some survey 89.5% of their top websites use jQuery and then estimates for

00:17:17,740 --> 00:17:26,140
the entire Internet is just under 20% so you have a very high likelihood that $.AJAX exists

00:17:26,140 --> 00:17:27,550
already.

00:17:27,550 --> 00:17:36,280
So we should start building little abstractions that make it look like Fetch exists for everybody,

00:17:36,280 --> 00:17:42,910
even if they don't have Fetch and maybe they have jQuery, and yes, it's a pretty good chance

00:17:42,910 --> 00:17:44,650
had a they do have jQuery.

00:17:44,650 --> 00:17:45,650
What if they don't?

00:17:45,650 --> 00:17:46,650
Object query?

00:17:46,650 --> 00:17:47,650
Try something else.

00:17:47,650 --> 00:17:52,410
These are really cheap and then you have a really nice interface.

00:17:52,410 --> 00:17:59,870
So what if this embedded code is still running and relying on the Fetch API?

00:17:59,870 --> 00:18:01,890
You need to download it.

00:18:01,890 --> 00:18:06,310
Or you could say this code is not going to work and I'm going to error out and you are

00:18:06,310 --> 00:18:09,030
like: oh, I have a 80% likelihood that my code will work.

00:18:09,030 --> 00:18:10,930
No, we can do better.

00:18:10,930 --> 00:18:18,681
We can actually just dynamically fetch polyfill or jQuery even because maybe they have it

00:18:18,681 --> 00:18:19,681
cached.

00:18:19,681 --> 00:18:30,910
A problem: we are seeing if some code exists and then if it doesn't we have some asynchronous

00:18:30,910 --> 00:18:37,010
step that must occur and in reality we would want an interface that just works.

00:18:37,010 --> 00:18:43,650
You pull in a module statistically from your bundle and you say: get me this resource and

00:18:43,650 --> 00:18:46,400
you want to be able to just check the body, right?

00:18:46,400 --> 00:18:48,480
You want this.

00:18:48,480 --> 00:18:53,260
But in a situation where dependencies may not have even been loaded yet, we need to

00:18:53,260 --> 00:18:59,130
queue up these requests and once the dependencies are satisfied and the API has been defined,

00:18:59,130 --> 00:19:03,260
then we can go ahead and resume those requests but to a developer it should feel just like

00:19:03,260 --> 00:19:05,340
this.

00:19:05,340 --> 00:19:08,630
So we created a little library.

00:19:08,630 --> 00:19:14,370
It's essentially dependency injection, right, but it's a little bit different.

00:19:14,370 --> 00:19:17,780
So we just had these little decorators and of course the decorators are a little bit

00:19:17,780 --> 00:19:24,370
of fluff, they are not that much code to add in, but you could use the non-decorator API

00:19:24,370 --> 00:19:25,630
just as well.

00:19:25,630 --> 00:19:31,300
So we let these functions though that we need the fetch API and whatever the fetch API that

00:19:31,300 --> 00:19:38,430
will be defined by us, and we also want to let it know that any call to these functions

00:19:38,430 --> 00:19:44,400
should be queued up until the fetch API actually exists and has been resolved.

00:19:44,400 --> 00:19:48,390
So what does defining the fetch API look like for this?

00:19:48,390 --> 00:19:55,910
The first thing, the same little library we build, we are going to pull in a definer option

00:19:55,910 --> 00:20:00,550
where we set up the dependencies, let it know what they mean.

00:20:00,550 --> 00:20:06,720
We pull in some strategies from the other part of the library and we only pull in the

00:20:06,720 --> 00:20:10,470
things that we are actually looking for because our module bundler is going to do some tree

00:20:10,470 --> 00:20:15,360
shaking, right, and we are going to have as little code as possible so we pull in these

00:20:15,360 --> 00:20:19,520
different strategies and then we go ahead and define what Fetch would be and it's just

00:20:19,520 --> 00:20:20,570
a chain of these strategies.

00:20:20,570 --> 00:20:26,270
We are going to look for the built in global fetch, then look for jQueries and wrap it,

00:20:26,270 --> 00:20:33,620
then build an external resource, wait for it to load and then apply the jQuery strategy.

00:20:33,620 --> 00:20:42,650
I say jQuery because probably others are cached just from their travels.

00:20:42,650 --> 00:20:44,660
That takes care of that.

00:20:44,660 --> 00:20:49,580
Let's keep our bundle size down.

00:20:49,580 --> 00:21:01,550
Performance tips: I can't really say a whole lot - many have already said, and maybe Jason,

00:21:01,550 --> 00:21:04,550
but we will go over a little bit of stuff.

00:21:04,550 --> 00:21:09,450
The main thing we found is we don't want to negatively affect performance on the page

00:21:09,450 --> 00:21:14,200
and we don't want necessarily the best performance but we should probably queue our expensive

00:21:14,200 --> 00:21:21,230
actions so with the AMP viewer for a lot of our customers there is this discovery step,

00:21:21,230 --> 00:21:22,230
right?

00:21:22,230 --> 00:21:25,800
And we are going to take all the links on the page and then check an external service

00:21:25,800 --> 00:21:29,380
to see if any of those links are AMP.

00:21:29,380 --> 00:21:33,980
And then we are going to modify the DOM with little icons that say: this is an AMP link.

00:21:33,980 --> 00:21:36,740
If you click on it, it's going to be really fast.

00:21:36,740 --> 00:21:39,930
And that's an expensive operation because we are calling up to a service and then modifying

00:21:39,930 --> 00:21:43,440
the DOM so what can we do about that?

00:21:43,440 --> 00:21:51,140
The thing we came up with to non-effect performance on initial load is a measure of FPS and you

00:21:51,140 --> 00:21:56,820
can do that by using request animation and counting the frames.

00:21:56,820 --> 00:22:04,830
So the measure XHR is not super-reliable and I'm not even going to talk about it.

00:22:04,830 --> 00:22:09,830
Some expensive operation just needs to be put on a queue and be deferred until later

00:22:09,830 --> 00:22:16,080
and we can go ahead and just tell it: hey, when the FPS is at least 30, then maybe it's

00:22:16,080 --> 00:22:18,100
a safe time to go ahead and do this.

00:22:18,100 --> 00:22:24,100
We will probably want to wait until other libraries have done their thing and this will

00:22:24,100 --> 00:22:27,620
probably work.

00:22:27,620 --> 00:22:33,760
So developer ergonomics, earlier I said a lot of these embedded JavaScript libraries,

00:22:33,760 --> 00:22:41,060
they sacrifice a lot of the modern development practices that we've learned over the past

00:22:41,060 --> 00:22:48,190
few years in favour of creating a very small, tight, single JavaScript file, and I'm arguing

00:22:48,190 --> 00:22:53,350
that that will result in crappier code that will not be maintained properly, so just think

00:22:53,350 --> 00:22:54,610
about it.

00:22:54,610 --> 00:22:58,610
So for AMP viewer reading TypeScript as I said before, it's really great, it produces

00:22:58,610 --> 00:23:03,950
fairly small type code that's ES5 compliant and we have a really great developer experience

00:23:03,950 --> 00:23:04,950
from it.

00:23:04,950 --> 00:23:05,971
So what does the AMP viewer do?

00:23:05,971 --> 00:23:07,990
This is what I was explaining before.

00:23:07,990 --> 00:23:11,840
A little BMW cable, that's not going to work.

00:23:11,840 --> 00:23:13,780
That is cool.

00:23:13,780 --> 00:23:18,400
Let's try to go back and see if it does it.

00:23:18,400 --> 00:23:21,280
Whatever, you guys know what I was talking about.

00:23:21,280 --> 00:23:26,250
It handles push state history API, it has got very smooth animations and we are actually

00:23:26,250 --> 00:23:32,220
using a library called Preact and Jason Miller is giving a talk right now about it and it's

00:23:32,220 --> 00:23:39,540
a 3.5 version of React so it works really well, we've got it on thousands of websites

00:23:39,540 --> 00:23:45,810
right now and some of the builds are under 15 kilobytes which to me still seems too much.

00:23:45,810 --> 00:23:48,440
3.5 of those kilobytes is Preact.

00:23:48,440 --> 00:23:56,720
I am pretty sure we can get this down, all the components, everything, and once I figure

00:23:56,720 --> 00:24:02,410
out how to properly mangle all my props using Closure Compiler I think we will be in a pretty

00:24:02,410 --> 00:24:04,500
good state.

00:24:04,500 --> 00:24:09,380
So anyway, like I said, we've got this really beautiful component-based architecture using

00:24:09,380 --> 00:24:14,440
TypeScript so everything is checked statically at compile time and we didn't really have

00:24:14,440 --> 00:24:21,050
to sacrifice the code in order to have a small file size.

00:24:21,050 --> 00:24:27,340
Also, you know, module bundlers these days roll up in webpack, they can export things

00:24:27,340 --> 00:24:33,140
to globals and just use function closures so you are having really tight code that is

00:24:33,140 --> 00:24:38,050
just wrapped by functions rather than something like browser - little header file or a little

00:24:38,050 --> 00:24:43,830
header part that helps load the module at run time so you don't have a whole lot of

00:24:43,830 --> 00:24:49,210
overhead and you can also export to multiple targets, right?

00:24:49,210 --> 00:24:52,750
The general consumption target is going to be to global.

00:24:52,750 --> 00:24:55,520
Something they are going to copy and paste that needs to self-register under the page

00:24:55,520 --> 00:25:00,010
is going to be text supported, right?

00:25:00,010 --> 00:25:05,520
But so many times I have downloaded or tried to use an analytics tool and they say the

00:25:05,520 --> 00:25:11,720
way to install this is you copy and paste this chunk of minified onto your page, and

00:25:11,720 --> 00:25:21,900
I end up copying and pasting that into its own little module so it's all in my bundle,

00:25:21,900 --> 00:25:22,900
right?

00:25:22,900 --> 00:25:26,150
So it's so easy to just have a different target for your developers.

00:25:26,150 --> 00:25:32,240
You have an ES6 target and you say in your package data: here is my ES next entry point

00:25:32,240 --> 00:25:36,970
and here is my main entry point, my widget.

00:25:36,970 --> 00:25:45,190
It's really easy to do so use rollup or webpack please and also export to global for the non-techies.

00:25:45,190 --> 00:25:51,340
So we've kind of gone all over the place and I hope that you maybe learned a little bit

00:25:51,340 --> 00:25:53,850
from my travels.

00:25:53,850 --> 00:25:59,320
So please responsibly code and maybe try out the fingerprinting API.

00:25:59,320 --> 00:26:02,760
That should be open source pretty soon.

00:26:02,760 --> 00:26:08,990
And queue your expensive operations because, yes, it's good for the world.

00:26:08,990 --> 00:26:09,990
So thanks.

00:26:09,990 --> 00:26:10,490

YouTube URL: https://www.youtube.com/watch?v=CPTNEPvSMZs


