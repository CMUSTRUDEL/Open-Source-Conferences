Title: TC39 (JavaScript standard committee) panel | JSConf EU 2017
Publication date: 2017-05-18
Playlist: JSConf EU 2017
Description: 
	TC39 is the standards committee that defines the JavaScript language.
Captions: 
	00:00:03,129 --> 00:00:04,129
TC39 Panel >> Hello!

00:00:04,129 --> 00:00:05,129
Welcome, everyone!

00:00:05,129 --> 00:00:06,129
Random enthusiasm!

00:00:06,129 --> 00:00:07,129
Wow.

00:00:07,129 --> 00:00:08,129
! [Cheering].

00:00:08,129 --> 00:00:09,129
That is better than the last break.

00:00:09,129 --> 00:00:10,129
I don't know whether you had more cake and coffee, but this is really great.

00:00:10,129 --> 00:00:11,129
This is a new format to JSConf and I'm excited about this.

00:00:11,129 --> 00:00:12,180
I think it is going to be great.

00:00:12,180 --> 00:00:16,299
I personally didn't know what TC39 was and now I do and I'm excited.

00:00:16,299 --> 00:00:20,999
If you're wondering how JavaScript gets standardised, how they are making those calls and how you

00:00:20,999 --> 00:00:25,070
can get involved, this is the right session to be at.

00:00:25,070 --> 00:00:30,252
I will invite quite a few people to the stage, and I hope they do something cool because

00:00:30,252 --> 00:00:31,252
I can't, I don't have the dance skills!

00:00:31,252 --> 00:00:32,252
I will invite, Maggie be Miles James, Dan and Dominic to the stage.

00:00:32,252 --> 00:00:33,252
Please give them a warm welcome.

00:00:33,252 --> 00:00:34,252
[Applause].

00:00:34,252 --> 00:00:35,252
This exciting discussion will be moderated by Elia.

00:00:35,252 --> 00:00:36,252
You can ask questions on Twitter.

00:00:36,252 --> 00:00:37,252
We're about to have an insightful discussion about how JavaScript will be built.

00:00:37,252 --> 00:00:39,220
JULIA: I hope everyone is doing well after the cake and that was great.

00:00:39,220 --> 00:00:43,970
Thank you so much to the people who have agreed to be on the panel.

00:00:43,970 --> 00:00:52,650
We have James at the end, there, Dominic, Jan, Miles, and Maggie.

00:00:52,650 --> 00:00:54,320
Does everyone with their mic on?

00:00:54,320 --> 00:00:55,320
>> Yes.

00:00:55,320 --> 00:00:56,320
>> Yes.

00:00:56,320 --> 00:00:57,320
>> Hello.

00:00:57,320 --> 00:00:58,829
JULIA: this is going to be really exciting!

00:00:58,829 --> 00:01:03,390
I think the question that a lot of people, if they haven't about TC39, the first time

00:01:03,390 --> 00:01:06,010
they saw it on the schedule.

00:01:06,010 --> 00:01:08,270
They are going to be wondering what is this.

00:01:08,270 --> 00:01:12,290
Who would like to take that on?

00:01:12,290 --> 00:01:18,820
>> TC39 is the standards committee that defines JavaScript, so it's been around basically

00:01:18,820 --> 00:01:20,789
as long, long as the language as been.

00:01:20,789 --> 00:01:27,799
We meet every month.

00:01:27,799 --> 00:01:35,020
This is the group that designed ES6 and designing async 08.

00:01:35,020 --> 00:01:40,149
The spec is designed on GitHub.

00:01:40,149 --> 00:01:46,350
>> The other thing is TC39 works on JavaScript standardisation which is distinct from web

00:01:46,350 --> 00:01:52,579
standardisation which is done by other standards orgs, so a lot of the APIs that you use, mayor

00:01:52,579 --> 00:01:55,880
not you're not.

00:01:55,880 --> 00:01:58,850
People aren't sure session time out is a web API.

00:01:58,850 --> 00:02:04,250
The things in the JavaScript are small - we're focused on language features, small syntax

00:02:04,250 --> 00:02:06,270
and core library.

00:02:06,270 --> 00:02:12,060
JULIA: one thing that I heard is that JavaScript is really a standalone language, used on the

00:02:12,060 --> 00:02:16,140
web, but it is really like something you can use anywhere.

00:02:16,140 --> 00:02:20,000
And one thing that people can be interested in is what is a standard, actually?

00:02:20,000 --> 00:02:21,750
What does that mean?

00:02:21,750 --> 00:02:31,761
>> Standard is just a document that describes what is - what a certain thing is, what is

00:02:31,761 --> 00:02:38,680
supposed to happen when you execute some code in the example of a programming language.

00:02:38,680 --> 00:02:44,130
A standard really takes relevance when it corresponds to implementations, when it's

00:02:44,130 --> 00:02:49,470
a design that everyone agrees on, and that people can actually take advantage of.

00:02:49,470 --> 00:02:55,170
There are lots of standards that you can find if you search around, and some of them are

00:02:55,170 --> 00:02:59,660
outdated, and some of them were just fantasy.

00:02:59,660 --> 00:03:04,760
I think that the JavaScript standard that TC39 produced does a really good job of striking

00:03:04,760 --> 00:03:13,050
a balance between continuing to add new things and also maintaining relevance through certain

00:03:13,050 --> 00:03:15,640
processes.

00:03:15,640 --> 00:03:21,160
>> The term "standard" tends to be overused in a lot of contexts.

00:03:21,160 --> 00:03:24,650
It's essentially a document that describes the way something should happen.

00:03:24,650 --> 00:03:29,100
It is not necessarily - it doesn't necessarily describe the way things actually happen, the

00:03:29,100 --> 00:03:31,650
way the implementers have done it.

00:03:31,650 --> 00:03:36,879
It is the set-up rules, if you're going to do this, do it like this.

00:03:36,879 --> 00:03:41,140
>> The other cool thing about JavaScript, having a standard and having a pretty solid

00:03:41,140 --> 00:03:46,000
one, is this is unusual among a lot of languages.

00:03:46,000 --> 00:03:51,790
Languages - I hope I'm not inaccurate here - but Ruby and Python do not have the standard,

00:03:51,790 --> 00:03:53,830
they have the original implementation.

00:03:53,830 --> 00:04:00,000
Everyone who wants to have something compatible with those reverse-engineers it.

00:04:00,000 --> 00:04:03,950
Maybe this is okay for a server, or a mostly server language, but for something where we

00:04:03,950 --> 00:04:10,130
have four competing implementations at least in the browser and elsewhere, it is really

00:04:10,130 --> 00:04:14,100
important to have a central document that says everybody should be working the same

00:04:14,100 --> 00:04:15,100
way.

00:04:15,100 --> 00:04:20,090
JULIA: something that is particularly unique about JavaScript's standard is that the standard

00:04:20,090 --> 00:04:25,540
leads the language, so the C# programming language - I work for Microsoft, I have tonnes

00:04:25,540 --> 00:04:34,990
of interaction with .NET, they make the standard after they create the programming language,

00:04:34,990 --> 00:04:40,250
and, in JavaScript, we have the opposite happening: we create the standard and then the engines

00:04:40,250 --> 00:04:41,510
pick it up and implement it.

00:04:41,510 --> 00:04:48,190
So that's a very unusual characteristic that has to do with the nature of the web.

00:04:48,190 --> 00:04:52,640
JULIA: I think it is interesting that you said you're working with Microsoft.

00:04:52,640 --> 00:04:58,070
On the TC39 which stands to have "technical committee 39" you're representing the JS Foundation,

00:04:58,070 --> 00:04:59,070
right?

00:04:59,070 --> 00:05:06,090
Can you talk a bit about how you got involved in the committee and also representing the

00:05:06,090 --> 00:05:07,660
group that you do.

00:05:07,660 --> 00:05:14,870
>> Sure, so, one thing everyone should know is that some people up on this stage do have

00:05:14,870 --> 00:05:20,370
academic backgrounds in language design and extensive work there, but that's not like

00:05:20,370 --> 00:05:23,340
a requirement for TC39.

00:05:23,340 --> 00:05:28,530
For me, I am a very average full stack web developer for Microsoft.

00:05:28,530 --> 00:05:30,560
I work in crisis management.

00:05:30,560 --> 00:05:34,730
It has nothing to do with language design at all.

00:05:34,730 --> 00:05:41,150
I'm nowhere near the language design teams at Microsoft, and I maintain Moment.js, the

00:05:41,150 --> 00:05:42,860
daytime library.

00:05:42,860 --> 00:05:53,510
What I found Moment exists is because the date functionality in JavaScript is very bad,

00:05:53,510 --> 00:05:58,950
and I started like running around Microsoft when I first starting working there a year

00:05:58,950 --> 00:06:02,290
ago, and I was like, "Does anybody care?

00:06:02,290 --> 00:06:04,699
Is anybody going to fix the date?

00:06:04,699 --> 00:06:07,330
Still broken!"

00:06:07,330 --> 00:06:11,330
And nobody - I wouldn't say nobody did - in fact, Brian Charleston's who is Microsoft's

00:06:11,330 --> 00:06:15,430
representative to TC39, he was like, "I care a lot about that."

00:06:15,430 --> 00:06:21,560
When we found each other, he was like, "Let's get this done."

00:06:21,560 --> 00:06:24,860
I had to find a way to get there.

00:06:24,860 --> 00:06:33,389
The JS Foundation again is a open-source foundation that supports the needs of many of the major

00:06:33,389 --> 00:06:39,090
open-source libraries in the JavaScript ecosystem, to all of the jQuery is under JS Foundation,

00:06:39,090 --> 00:06:46,150
Lowe Dash Grunt Webpack, they said if you care so much about this standard, we can send

00:06:46,150 --> 00:06:48,250
you to go and represent our libraries.

00:06:48,250 --> 00:06:49,970
That's how I ended up there.

00:06:49,970 --> 00:06:52,840
JULIA: thank you.

00:06:52,840 --> 00:06:57,699
We have some people who have been working on the committee for like varying periods

00:06:57,699 --> 00:07:02,520
of time, so Maggie you've recently joined, and we also have Dominic who has been part

00:07:02,520 --> 00:07:05,979
of TC39 for a few years.

00:07:05,979 --> 00:07:10,589
Can you talk about your experience joining and what was TC39 like before?

00:07:10,589 --> 00:07:15,030
>> Yes, it is kind of funny to think - I guess I'm one of the people who has been on the

00:07:15,030 --> 00:07:16,470
committee longest in the panel.

00:07:16,470 --> 00:07:21,860
There's a lot of new faces, so I still feel like I'm relatively new.

00:07:21,860 --> 00:07:25,449
There are a lot of people who are the committee and very well established.

00:07:25,449 --> 00:07:30,330
My story: I was a web developer using JavaScript.

00:07:30,330 --> 00:07:34,260
I got kind of involved in the language just through curiosity.

00:07:34,260 --> 00:07:38,220
I was like, "Oh, I learned about all these new features, when are they coming?

00:07:38,220 --> 00:07:39,889
What is the deal?

00:07:39,889 --> 00:07:47,930
I hear Firefox has let and const why aren't they in the language?"

00:07:47,930 --> 00:07:53,729
One area I really got involved in was asynchronous APIs and promises, and there was a push to

00:07:53,729 --> 00:07:59,400
put these in the web platform somehow either through the DOM APIs or the language.

00:07:59,400 --> 00:08:03,720
I thought it would work well in the language.

00:08:03,720 --> 00:08:05,490
There was a meeting in Boston.

00:08:05,490 --> 00:08:09,390
I took some time off work and got the bus up from New York.

00:08:09,390 --> 00:08:17,630
I presented my written-up fairly formal spec on how Promises should work in JavaScript,

00:08:17,630 --> 00:08:20,320
and the committee was like, "This is pretty good.

00:08:20,320 --> 00:08:22,570
Let's get this into ES6."

00:08:22,570 --> 00:08:28,720
So that was just the beginning of a long journey and a lot of arguments committee and -

00:08:28,720 --> 00:08:31,810
>> Many arguments!

00:08:31,810 --> 00:08:34,270
>> And Promises was certainly not without controversy.

00:08:34,270 --> 00:08:39,510
I think they've been pretty successful, and after - I stayed involved, I did in - this

00:08:39,510 --> 00:08:43,730
a lot in my free time, got involved in other web standards.

00:08:43,730 --> 00:08:50,760
Google hired me to represent in TC39 and do this full-time.

00:08:50,760 --> 00:08:52,009
That was my journey.

00:08:52,009 --> 00:08:53,110
>> That's pretty great.

00:08:53,110 --> 00:08:57,630
JULIA: I just want to touch super quickly, you're talking about getting features in the

00:08:57,630 --> 00:08:58,630
spec.

00:08:58,630 --> 00:09:00,760
Can you say a bit about that process?

00:09:00,760 --> 00:09:05,920
Where do you start and what steps do you go through to get something into the spec?

00:09:05,920 --> 00:09:13,430
>> Yes, so there is a whole formal process, but to boil it down to its essentials, the

00:09:13,430 --> 00:09:20,000
first step is explain the feature, explain what it would look like by developers, what

00:09:20,000 --> 00:09:21,690
need would it address?

00:09:21,690 --> 00:09:23,450
Does it exist in other languages?

00:09:23,450 --> 00:09:26,840
What cross-cutting concerns might there be across the other languages that exist?

00:09:26,840 --> 00:09:32,160
Generally, it is convincing people this is a good idea and your solution to the problem

00:09:32,160 --> 00:09:35,589
is to solve the problem.

00:09:35,589 --> 00:09:40,890
Then you advance through the stages of increasingly formalising your proposal, writing actual

00:09:40,890 --> 00:09:49,540
spec text, and bringing it to the committee, and getting it increasingly checked and solidified

00:09:49,540 --> 00:09:50,880
along the way.

00:09:50,880 --> 00:09:54,570
>> There is a multistage proposal.

00:09:54,570 --> 00:10:00,830
In order to advance to the next step, there has to be a certain amount of implementation

00:10:00,830 --> 00:10:02,770
experience.

00:10:02,770 --> 00:10:09,080
It advances, the spec needs to reflect what is actually implemented, so that way, when

00:10:09,080 --> 00:10:14,680
it comes out of the other end, you know it actually matches what users are going to be

00:10:14,680 --> 00:10:19,370
using out in the world.

00:10:19,370 --> 00:10:20,370
>> That's somewhat new.

00:10:20,370 --> 00:10:22,590
ES6 was the speck that led the implementations.

00:10:22,590 --> 00:10:29,930
Now they are more intent on, which is very healthy, but I can go through this a lot but

00:10:29,930 --> 00:10:30,930
I won't.

00:10:30,930 --> 00:10:35,209
JULIA: we have the won September of a champion.

00:10:35,209 --> 00:10:39,310
Maggie, can you speak about that at all?

00:10:39,310 --> 00:10:45,130
>> Sure, so the whole, I guess, reason that I ended up at TC39 at all, which actually

00:10:45,130 --> 00:10:48,480
is a lot big like knowledge Nick's reason which is I heard a heck of of a lot about

00:10:48,480 --> 00:10:50,770
one thing.

00:10:50,770 --> 00:10:56,880
For the moment, I am the champion or the person who is responsible for moving forward the

00:10:56,880 --> 00:10:58,890
fixing of dates.

00:10:58,890 --> 00:11:00,790
In the language.

00:11:00,790 --> 00:11:08,220
I share that responsibility with Brian at Microsoft, and to get a proposal moved forward

00:11:08,220 --> 00:11:13,460
through the process, you have to find someone willing to champion that proposal.

00:11:13,460 --> 00:11:19,980
Now, many people on TC39 represent browser implementers or other large corporations,

00:11:19,980 --> 00:11:24,240
so we have a few people from Google here.

00:11:24,240 --> 00:11:30,050
In my case, I actually would be the person who would represent you, because I represent

00:11:30,050 --> 00:11:35,380
the JS Foundation which is basically we think of ourselves as the community at large, but

00:11:35,380 --> 00:11:38,839
to get a proposal through, you need to find a champion, and that would be the person who

00:11:38,839 --> 00:11:46,430
represents you as part of your organisation, Microsoft, Mozilla, Google, et cetera, or

00:11:46,430 --> 00:11:52,910
if you don't have a larger organisation direct, then come find me or Leo Walter.

00:11:52,910 --> 00:11:54,340
JULIA: awesome.

00:11:54,340 --> 00:12:04,589
Those are things that are on development right now that each of you are super excited about.

00:12:04,589 --> 00:12:07,940
What is the most exciting thing coming up in the next spec?

00:12:07,940 --> 00:12:13,709
What is in development right now?

00:12:13,709 --> 00:12:18,269
>> For me, it is not necessarily what's coming up soon, it is what already was developed,

00:12:18,269 --> 00:12:19,980
and that's modules, right?

00:12:19,980 --> 00:12:25,630
I've been working very hard with some of the folks in the Node community to get modules

00:12:25,630 --> 00:12:27,850
into Node, and they are coming.

00:12:27,850 --> 00:12:31,630
It is going to take a long time, but they are coming.

00:12:31,630 --> 00:12:36,120
But, yes, that is the thing I'm most excited about seeing advance.

00:12:36,120 --> 00:12:41,200
>> Yeah, like James, coming from the browser perspective, I also am spending a lot of time

00:12:41,200 --> 00:12:42,310
getting modules.

00:12:42,310 --> 00:12:48,779
We put out the syntax for them in ES6 but no semantics, so saying modules in ES6 is

00:12:48,779 --> 00:12:52,050
not really true in a large sense.

00:12:52,050 --> 00:12:53,840
So we're finally getting to that point.

00:12:53,840 --> 00:12:55,450
I spend a lot of time on that.

00:12:55,450 --> 00:12:59,470
I've also worked on shared array buffer which is the subject of an upcoming talk.

00:12:59,470 --> 00:13:00,670
We had a lot of fun.

00:13:00,670 --> 00:13:03,900
It is similar in that it needs to integrate into the web platform.

00:13:03,900 --> 00:13:08,190
We need to say what threads can you share this array buffer between?

00:13:08,190 --> 00:13:12,580
It's not a question for the language but a thing that defines the threads, the web workers

00:13:12,580 --> 00:13:14,350
and web platform.

00:13:14,350 --> 00:13:20,540
Finally, I'm also championing a proposal called async adderation.

00:13:20,540 --> 00:13:31,190
>> A smaller thing I'm working on is features for regular expressions.

00:13:31,190 --> 00:13:36,990
This allows to you do things like reference unicode categories for characters in a regular

00:13:36,990 --> 00:13:42,870
expression, or also give names to groups that are being captured, and a couple of other

00:13:42,870 --> 00:13:43,870
things.

00:13:43,870 --> 00:13:49,240
I'm definitely excited about that, and the implementation is in V8 behind a flag, and

00:13:49,240 --> 00:14:00,720
I'm also work on a specification for arbitrary sized images in JavaScript with operator overloading.

00:14:00,720 --> 00:14:03,950
[Applause].

00:14:03,950 --> 00:14:06,170
Also some features for classes.

00:14:06,170 --> 00:14:10,730
I'm definitely interested in getting more feedback from this whole group on all these.

00:14:10,730 --> 00:14:14,959
>> Work on the big instep before the classes.

00:14:14,959 --> 00:14:21,180
>> So, what I'm most excited about right now is not a feature of the language, but I will

00:14:21,180 --> 00:14:23,140
call it a feature of the committee.

00:14:23,140 --> 00:14:28,760
There is a lot of work going on right now for a code of conduct within TC39, and that

00:14:28,760 --> 00:14:34,589
is interesting because many code of conducts are about conduct of a community, which is

00:14:34,589 --> 00:14:40,280
very different than conduct of a committee, so it is interesting to try to reconcile the

00:14:40,280 --> 00:14:46,220
differences between this and find the language that works, but it is being put through the

00:14:46,220 --> 00:14:51,279
process, and I would say, I've only been to three meetings, but I've seen the conduct

00:14:51,279 --> 00:14:55,250
change just with this being on the table.

00:14:55,250 --> 00:15:00,610
>> I suppose it is obvious I'm excited about date!

00:15:00,610 --> 00:15:01,610
[Laughter].

00:15:01,610 --> 00:15:07,510
I will - I do want to mention, along with the 262 specification for the JavaScript programming

00:15:07,510 --> 00:15:18,920
language, TC39 handles 402 which is the internationalisation APIs coming from the date/time space, this

00:15:18,920 --> 00:15:20,540
stuff is really important.

00:15:20,540 --> 00:15:25,020
I'm really excited for everything that is going on in Intel because it will really help

00:15:25,020 --> 00:15:28,420
people produce more global applications.

00:15:28,420 --> 00:15:37,089
JULIA: we also have a number of questions, so we out - so we sourced a number of people

00:15:37,089 --> 00:15:44,640
from you people, the community through this hashtag, and I'm going to read out a couple

00:15:44,640 --> 00:15:45,640
of them.

00:15:45,640 --> 00:15:51,410
Unfortunately, the panel is very short, because like all of these topics are fascinating and

00:15:51,410 --> 00:15:54,589
could be a talk all on their own.

00:15:54,589 --> 00:15:58,680
We selected a couple of those questions that we could answer in the time that we have and

00:15:58,680 --> 00:16:01,130
I'm just going to ask a couple of them now.

00:16:01,130 --> 00:16:06,829
One of the questions we were asked is what is the state of the binder operator, and what

00:16:06,829 --> 00:16:08,200
needs to be done to advance it?

00:16:08,200 --> 00:16:10,070
That came from Tobias.

00:16:10,070 --> 00:16:15,210
>> I think I can take this.

00:16:15,210 --> 00:16:23,839
The bind operator is a fairly popular proposal: briefly, the idea combines several ideas into

00:16:23,839 --> 00:16:25,490
one.

00:16:25,490 --> 00:16:31,550
You want this method-change syntax so you can define things in another library but use

00:16:31,550 --> 00:16:36,430
them as if they're methods on an existing library, so in other languages, this might

00:16:36,430 --> 00:16:43,180
be called extension methods, or something like that, and this is a pretty great idea

00:16:43,180 --> 00:16:47,760
because then you could define something like low dash but use it as if it were on a native

00:16:47,760 --> 00:16:49,570
array as if they were methods.

00:16:49,570 --> 00:16:56,240
It also gives you syntactic sugar for binding and extracting methods, and a number of other

00:16:56,240 --> 00:16:57,790
things, and there are variants of this.

00:16:57,790 --> 00:17:02,540
There is a pipeline operator where the bind operator uses this, the pipeline operator

00:17:02,540 --> 00:17:05,790
uses the first argument like low dash.

00:17:05,790 --> 00:17:11,030
The problem that it's this complicated space with a lot of decisions about, "Well, do we

00:17:11,030 --> 00:17:13,540
really want to tie it to this or the first argument?

00:17:13,540 --> 00:17:15,949
Do we really want to tie binding into the story?

00:17:15,949 --> 00:17:19,709
Or do we really want to make it more general?"

00:17:19,709 --> 00:17:24,280
Every time somebody's tried to pick this up, there's so many people who feel the opposite

00:17:24,280 --> 00:17:26,809
way, largely in the community.

00:17:26,809 --> 00:17:31,860
The committee I think would be open to anything if we had a clear signal from the community,

00:17:31,860 --> 00:17:34,070
in my perspective.

00:17:34,070 --> 00:17:38,300
It has been discouraging trying to get it moving forward.

00:17:38,300 --> 00:17:42,850
The other thing is we just - you know, well, we have had champions, but I think they've

00:17:42,850 --> 00:17:43,850
gotten discouraged.

00:17:43,850 --> 00:17:46,179
I don't know if that's fair in Dan's estimation?

00:17:46,179 --> 00:17:52,015
>> I would just want to phrase, reiterate by saying this is a big opportunity for saying

00:17:52,015 --> 00:18:00,970
this is a big involvement for - opportunity for community involvement and it is a positive.

00:18:00,970 --> 00:18:07,940
The committee is definitely interested in this proposal once we have more of these kind

00:18:07,940 --> 00:18:09,370
of signals.

00:18:09,370 --> 00:18:18,660
>> Standards are that are made without community involvement are not good standards, period.

00:18:18,660 --> 00:18:20,530
[Applause].

00:18:20,530 --> 00:18:28,351
JULIA: that's a very good point, because there is sort of an issue with that how many people

00:18:28,351 --> 00:18:31,290
know about this committee, and they don't know how to get involved with it, and this

00:18:31,290 --> 00:18:34,940
is also an opportunity for us to get more people involved.

00:18:34,940 --> 00:18:41,870
James, I'm actually going to direct this at you because you mentioned modules, and someone

00:18:41,870 --> 00:18:49,080
has asked, "What is the status of ES Interrupt - module interrupt" and it's been raised many

00:18:49,080 --> 00:18:53,340
times, and they're wondering what the status is.

00:18:53,340 --> 00:19:00,050
>> This is an area where the browsers are ahead of Node.

00:19:00,050 --> 00:19:04,100
There's still some variance in the browser and Dominic could speak to that better than

00:19:04,100 --> 00:19:05,169
than I could.

00:19:05,169 --> 00:19:12,340
As far as Node implementation, we're a long way off - until at least a year until the

00:19:12,340 --> 00:19:15,030
community has something to work with.

00:19:15,030 --> 00:19:16,201
We're going to get there.

00:19:16,201 --> 00:19:24,490
There is a lot more issues on the servers than on the Node side, that the browsers just

00:19:24,490 --> 00:19:29,400
don't have to deal with, so it is a lot, it is a very difficult technical problem.

00:19:29,400 --> 00:19:33,440
Once we get there, I think by the time we get there, the browsers will be like, "What

00:19:33,440 --> 00:19:34,900
took you so long?"

00:19:34,900 --> 00:19:39,289
We will be able to ensure pretty good interrupt, but, yeah.

00:19:39,289 --> 00:19:45,000
>> Yeah, from the browser side, we're trying to do as much as we can to iron out the bugs

00:19:45,000 --> 00:19:50,620
in the underlying infrastructure, so that when Node is able to tackle it, we can say,

00:19:50,620 --> 00:19:53,040
"Okay, it's ready for you."

00:19:53,040 --> 00:19:55,860
Again it's just this multi-year process.

00:19:55,860 --> 00:20:00,790
First we had module syntax and how module for the browser.

00:20:00,790 --> 00:20:03,610
Semantics are bolt-proof until you have them working in two environments.

00:20:03,610 --> 00:20:07,549
It's not a great interface.

00:20:07,549 --> 00:20:10,020
It's tough.

00:20:10,020 --> 00:20:16,640
>> A big challenge here also is that Ecma 262 only defines the semantics for models

00:20:16,640 --> 00:20:18,700
but not for loading.

00:20:18,700 --> 00:20:23,470
There are different constraints.

00:20:23,470 --> 00:20:28,660
So the browser can't block the main thread while it's loading everything, so you have

00:20:28,660 --> 00:20:33,289
only like this asynchronous load phase before asynchronous execute operation, whereas the

00:20:33,289 --> 00:20:40,460
way Require works is synchronous execution through the whole tree when it's the loading.

00:20:40,460 --> 00:20:47,960
This isn't - we can reconcile this, but it is just - it breaks my brain and many people's

00:20:47,960 --> 00:20:48,960
brains.

00:20:48,960 --> 00:20:54,760
It takes a lot of time to find a way to do it that allows both the code in the browser

00:20:54,760 --> 00:20:56,730
and in Node to run similarly.

00:20:56,730 --> 00:21:01,600
What we want to avoid is a case where you need to start worrying is, is it running in

00:21:01,600 --> 00:21:04,470
Node or in a browser?

00:21:04,470 --> 00:21:07,980
>> I published a couple of articles of this on Medium.

00:21:07,980 --> 00:21:12,460
There's likely to be another one in a couple of months.

00:21:12,460 --> 00:21:13,770
So, small hint!

00:21:13,770 --> 00:21:16,440
That will give a pretty good update.

00:21:16,440 --> 00:21:19,690
This is a whole topic that can take a long time to discuss.

00:21:19,690 --> 00:21:24,580
>> Please subscribe to the news letter.

00:21:24,580 --> 00:21:28,800
JULIA: another question: will you drop any features from JavaScript?

00:21:28,800 --> 00:21:32,430
>> I will take this.

00:21:32,430 --> 00:21:38,390
So, with come the Node perspective, just looking at Node, just looking at Node, every time

00:21:38,390 --> 00:21:47,150
we want to deprecate something or drop something, there are pitch forks and we have to go running.

00:21:47,150 --> 00:21:50,600
Imagine that on the language level.

00:21:50,600 --> 00:21:53,049
Probably not.

00:21:53,049 --> 00:21:59,120
>> Yes, I mean, think of it from a semantic versioning perspective: Node gets to make

00:21:59,120 --> 00:22:04,080
breaking changes it gets to say, "We've incremented the major version number, we look at the change

00:22:04,080 --> 00:22:06,970
log and upgrade."

00:22:06,970 --> 00:22:13,559
Browsers don't, they just update every six weeks, if you're lucky, every six months,

00:22:13,559 --> 00:22:16,289
or not.

00:22:16,289 --> 00:22:20,630
The users certainly don't get to look at the change log.

00:22:20,630 --> 00:22:23,679
From that perspective, browsers are always on major version 1.0.

00:22:23,679 --> 00:22:29,960
>> On the other hand, it doesn't upgrade on a completely 100 per cent strict "you're not

00:22:29,960 --> 00:22:34,690
going to see any changes that might break things".

00:22:34,690 --> 00:22:41,690
ES6 did make a whole bunch of changes that did break things and browsers had to come

00:22:41,690 --> 00:22:46,760
back and say look, we tried shipping this, and it actually broke things in the way that

00:22:46,760 --> 00:22:50,440
the committee didn't expect because the committee didn't want to break things and it didn't

00:22:50,440 --> 00:22:58,440
want to stay compatible, so there was a sort of back and forth, and we arrived at a more

00:22:58,440 --> 00:23:04,900
compatible version, but there are cases of breakage that are very strange, like adding

00:23:04,900 --> 00:23:15,840
method to arrays, is observed in some browsers to break their users even if other browsers

00:23:15,840 --> 00:23:23,690
don't find it can be breaking, so what actually is a simpler version, a major change we can't

00:23:23,690 --> 00:23:26,440
do is a little bit fuzzy.

00:23:26,440 --> 00:23:30,600
>> Certainly, like and these are tiny changes.

00:23:30,600 --> 00:23:37,289
We're not going to remove with "with" or "var" or something.

00:23:37,289 --> 00:23:44,040
JULIA: we will move over to one question from the community which will take us into the

00:23:44,040 --> 00:23:54,549
next, which is what as a panel or as people are you doing to become more visible, and

00:23:54,549 --> 00:23:56,510
better connected to the community?

00:23:56,510 --> 00:24:01,110
>> I will take this one.

00:24:01,110 --> 00:24:05,940
This speaks to how I actually got involved.

00:24:05,940 --> 00:24:14,490
Last year, throughout Node and TC39's relationship, there's never been a great relationship there.

00:24:14,490 --> 00:24:16,720
They weren't talking to one another.

00:24:16,720 --> 00:24:23,020
Here you had one of the most popular JavaScript platforms, and there was no connection, no

00:24:23,020 --> 00:24:26,200
communication going on with the community or with the committee.

00:24:26,200 --> 00:24:30,980
It really came to a head last year, it was just a tonne of public arguing on Twitter

00:24:30,980 --> 00:24:35,440
which is always great fun.

00:24:35,440 --> 00:24:43,270
We came to realise if Node wanted to engage, we needed actually to show up in the meetings,

00:24:43,270 --> 00:24:47,879
get involved in the discussions, provide feedback on the proposals as they were being proposed

00:24:47,879 --> 00:24:48,879
- it's a novel concept.

00:24:48,879 --> 00:24:54,330
It goes back to my own thing that would you community involvement, it is not good.

00:24:54,330 --> 00:24:55,520
We wanted to become involved.

00:24:55,520 --> 00:24:59,660
It was literally a matter of just showing up.

00:24:59,660 --> 00:25:07,500
JULIA: so I think something that a lot of people will be interested in is, like, what

00:25:07,500 --> 00:25:13,940
as audience members, what can they do - also myself - what can I look at?

00:25:13,940 --> 00:25:17,620
What's a great place to start getting involved?

00:25:17,620 --> 00:25:23,559
>> The standard is developed both in the in-person meetings and also on GitHub.

00:25:23,559 --> 00:25:27,080
It is developed with patches.

00:25:27,080 --> 00:25:28,679
People can submit PRs.

00:25:28,679 --> 00:25:34,080
We do have a number of community contributors who are not committee members who do submit

00:25:34,080 --> 00:25:41,450
DRs and get real spec changes and really help us develop a lot of difficult details with

00:25:41,450 --> 00:25:44,960
this specification.

00:25:44,960 --> 00:25:50,929
So there is one main repository for the master spec, and there are a bunch of smaller repositories

00:25:50,929 --> 00:25:55,429
for the proposals which are not yet merged into the main spec.

00:25:55,429 --> 00:26:03,419
In these proposals, it's great if people file bugs or add issues, or at comments to bugs

00:26:03,419 --> 00:26:07,260
to give feedback on the proposals.

00:26:07,260 --> 00:26:14,450
Some proposals are available in Babble or cross-compilation environments, and you can

00:26:14,450 --> 00:26:22,700
use them in your own code, and give feedback to us based on that, especially if you can

00:26:22,700 --> 00:26:25,600
do it in GitHub issues.

00:26:25,600 --> 00:26:30,559
That's the most accessible way to propose champions.

00:26:30,559 --> 00:26:43,929
JULIA: so www.github.com/39. >> this was been a - this has been a big change.

00:26:43,929 --> 00:26:50,440
both in TC39, the spec used to be developed in a Word document which the editor kept on

00:26:50,440 --> 00:26:58,320
his computer and sent out to a mailing list once a month, so having it a visible changeless

00:26:58,320 --> 00:27:03,670
- where he can submit requests and issues, it is pretty great.

00:27:03,670 --> 00:27:05,710
there is a lot more we can do.

00:27:05,710 --> 00:27:10,330
I hope that we are trying to meet you guys where you are, and certainly where I like

00:27:10,330 --> 00:27:22,460
to spend more of my day instead of my inbox. >> one place that you can look at well is

00:27:22,460 --> 00:27:29,640
TC39/agendas. and, on agendas, you can find the agendas of the next meetings, and this

00:27:29,640 --> 00:27:34,600
is a great way to discover what language features are actively being developed.

00:27:34,600 --> 00:27:39,520
because there are lots of different repos, it can be really hard to find a focus.

00:27:39,520 --> 00:27:42,950
if you look in agendas, you can find that.

00:27:42,950 --> 00:27:51,270
JULIA: there is so much that we want to talk about.

00:27:51,270 --> 00:28:02,039
I guess the best thing we can do now is [sound cut] specifically to ask, then I believe we've

00:28:02,039 --> 00:28:09,019
chosen a location to sit for a bit and take your questions.

00:28:09,019 --> 00:28:14,360
>> we will go to the - all of us will be at community space afterwards.

00:28:14,360 --> 00:28:23,690
there is stuff scheduled - >> 

00:28:23,690 --> 00:28:24,909
Google booth.

00:28:24,909 --> 00:28:28,630
JULIA: these wonderful folks will be there to answer more questions.

00:28:28,630 --> 00:28:35,610
there are lots of topics and questions about diversity workers being done now.

00:28:35,610 --> 00:28:42,120
the TC39 has been for around for a while but pertinent discussions that are still happening.

00:28:42,120 --> 00:28:47,860
make yourself - if you have questions, come and ask, and feel free to get involved.

00:28:47,860 --> 00:28:48,860
thank you.

00:28:48,860 --> 00:28:49,220

YouTube URL: https://www.youtube.com/watch?v=cZTp2MaxcJg


