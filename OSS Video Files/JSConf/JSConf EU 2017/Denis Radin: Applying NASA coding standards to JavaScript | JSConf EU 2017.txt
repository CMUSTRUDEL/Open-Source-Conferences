Title: Denis Radin: Applying NASA coding standards to JavaScript | JSConf EU 2017
Publication date: 2017-06-06
Playlist: JSConf EU 2017
Description: 
	http://2017.jsconf.eu/speakers/denis-radin-applying-nasa-coding-standards-to-javascript.html

Jet Propulsion Laboratory - scientific institution making research and development for NASA. Their portfolio includes such famous missions as Curiosity Mars rover and Voyager probe which left solar system after 25 years of flight and still providing scientific information. High level of automation and long duration of missions led to superior demands to software quality. As a result of JPL amazing experience a set of code guidelines was developed and published recently. Since demands to web-driven software constantly increase and more critical tasks are entrusted to JavaScript, lets apply NASA coding guidelines to JavaScript / HTML applications for higher performance, reliability and the better world.
Captions: 
	00:00:03,129 --> 00:00:11,930
Denis Radin - Applying NASA coding standards to JavaScript

00:00:33,960 --> 00:00:34,960
[Applause] . DENIS: Good morning, guys.

00:00:34,960 --> 00:00:36,980
I hope you have had a nice breakfast and that you're filled out with energy enough to make

00:00:36,980 --> 00:00:42,940
this mental shift on applying NASA coding standards to JavaScript.

00:00:42,940 --> 00:00:49,760
This talk is actually composed of two talks I have given before, so the first talk is

00:00:49,760 --> 00:00:55,829
about exploring what boundaries of JavaScript could be, and then the second talk is about

00:00:55,829 --> 00:01:01,900
why they're not there and how to get there, how to ensure more trust in JavaScript.

00:01:01,900 --> 00:01:05,700
My name is Denis Radin.

00:01:05,700 --> 00:01:12,030
You will find me on the network as an open source commander.

00:01:12,030 --> 00:01:15,859
I'm a mobile developer.

00:01:15,859 --> 00:01:22,960
Before talking about JavaScript guidelines, let's talk about the guidelines for this universe.

00:01:22,960 --> 00:01:31,070
One of the fundamental tendencies of this universe is a tendency to unification.

00:01:31,070 --> 00:01:36,829
This universe respects unification - the shape of planets, the laws of physics are constant

00:01:36,829 --> 00:01:41,319
every, will be unified in this universe.

00:01:41,319 --> 00:01:50,249
According to Wikipedia unification is to place elements in particular order built on strict

00:01:50,249 --> 00:01:52,899
systems which is comfortable to use.

00:01:52,899 --> 00:01:56,310
Increase the diversity, comfortable to use, strict system.

00:01:56,310 --> 00:01:59,810
Yes there are standardised in this universe.

00:01:59,810 --> 00:02:05,970
They very similar, a bit different, very individual but they tend to be standardised and then

00:02:05,970 --> 00:02:10,619
humanity adopted this tending to standardisation also.

00:02:10,619 --> 00:02:15,960
Every time we start something new, we start on some new field, a technology field, industry,

00:02:15,960 --> 00:02:22,220
or whatever, we start with whole variety of possible solutions.

00:02:22,220 --> 00:02:31,300
It works for politics, for economics, for art, for engineering, and, yes, today, we're

00:02:31,300 --> 00:02:33,870
going to talk about engineering first of all.

00:02:33,870 --> 00:02:40,260
As I said, in the beginning, we do the whole lot of possible solutions whatever is the

00:02:40,260 --> 00:02:45,020
best - but only the best, most sufficient survive.

00:02:45,020 --> 00:02:46,310
You see a plan in the background.

00:02:46,310 --> 00:02:48,940
- you see a plane in the background.

00:02:48,940 --> 00:02:55,090
Can you distinguish if it is a Boeing or Airbus?

00:02:55,090 --> 00:02:56,440
Maybe someone can?

00:02:56,440 --> 00:03:00,180
Maybe maybe not, to be honest.

00:03:00,180 --> 00:03:03,510
This one, it's very similar.

00:03:03,510 --> 00:03:06,760
They're really only specialist can distinguish Boeing or Airbus.

00:03:06,760 --> 00:03:11,580
If you go to the plane, you can see if it is a Boeing or an Airbus, but it was not like

00:03:11,580 --> 00:03:18,870
that in the beginning, some crazy constructions.

00:03:18,870 --> 00:03:22,350
The same kind of story we see in software development.

00:03:22,350 --> 00:03:29,540
We develop software for 60 years, but such a common thing as defining a UI is not standardised

00:03:29,540 --> 00:03:30,570
yet.

00:03:30,570 --> 00:03:38,420
It's not standardised yet, so it still looks like the early ages of aviation, so let's

00:03:38,420 --> 00:03:46,530
try to compare early ages of aviation with our current state of what we recently had

00:03:46,530 --> 00:04:02,410
in a front-end, developer, and compare solutions from ten development, the solutions - okay.

00:04:02,410 --> 00:04:04,690
The early ages of aviation, I welcoming with it.

00:04:04,690 --> 00:04:05,690
I don't think it works.

00:04:05,690 --> 00:04:06,690
-- I connect with it.

00:04:06,690 --> 00:04:07,690
I don't think it works.

00:04:07,690 --> 00:04:08,690
Can you help me with that?

00:04:08,690 --> 00:04:09,690
I can connect to Wi-Fi.

00:04:09,690 --> 00:04:10,690
Yes, Wi-Fi's good.

00:04:10,690 --> 00:04:11,690
Should I put the show password?

00:04:11,690 --> 00:04:12,690
You don't have the password.

00:04:12,690 --> 00:04:13,690
Oh, really ... [suggestions shouted from the audience].

00:04:13,690 --> 00:04:14,690
No.

00:04:14,690 --> 00:04:15,690
It works!

00:04:15,690 --> 00:04:16,690
Amazing.

00:04:16,690 --> 00:04:17,690
[Applause].

00:04:17,690 --> 00:04:18,690
Here is where we have a problem.

00:04:18,690 --> 00:04:19,690
Is it going to work here?

00:04:19,690 --> 00:04:20,690
No, still, okay ... . If I do a refresh.

00:04:20,690 --> 00:04:21,690
Then ... no, sorry, guys, it doesn't work.

00:04:21,690 --> 00:04:22,690
Is there another cord, maybe?

00:04:22,690 --> 00:04:23,690
No?

00:04:23,690 --> 00:04:24,690
No internet?

00:04:24,690 --> 00:04:25,690
[Sighs].

00:04:25,690 --> 00:04:26,690
So, no chance?

00:04:26,690 --> 00:04:27,690
Maybe 4G?

00:04:27,690 --> 00:04:28,690
Someone has good 4G?

00:04:28,690 --> 00:04:29,690
Let's do it.

00:04:29,690 --> 00:04:30,690
Then the password is ... [Laughter] You've seen it?

00:04:30,690 --> 00:04:31,690
No, please!

00:04:31,690 --> 00:04:32,690
Patrick, now you should be somewhere close to the stage.

00:04:32,690 --> 00:04:33,690
Thank you.

00:04:33,690 --> 00:04:34,690
[Applause].

00:04:34,690 --> 00:04:35,690
That was a collaboration.

00:04:35,690 --> 00:04:36,690
Great.

00:04:36,690 --> 00:04:37,690
So, yes, as I said, 60 years of trying to make things standardised in UI development,

00:04:37,690 --> 00:04:38,690
software development industry, but we still don't have standards.

00:04:38,690 --> 00:04:39,690
It reminds me of the early ages of aviation when when we had the solutions to make early

00:04:39,690 --> 00:04:40,690
flight.

00:04:40,690 --> 00:04:41,690
Let's try to compare early ages of aviation with early ages of software development we

00:04:41,690 --> 00:04:42,690
have now.

00:04:42,690 --> 00:04:43,690
This amazing video, technologies.

00:04:43,690 --> 00:04:44,690
What kind of technology is that?

00:04:44,690 --> 00:04:50,210
Microsoft Silverlight.

00:04:50,210 --> 00:05:00,470
Adobe Flex.

00:05:00,470 --> 00:05:13,660
It's a good try.

00:05:13,660 --> 00:05:18,970
It's completely amazing.

00:05:18,970 --> 00:05:25,010
That's the Flash.

00:05:25,010 --> 00:05:34,420
It almost did it, and it was pretty at first.

00:05:34,420 --> 00:05:35,420
My favourite.

00:05:35,420 --> 00:05:44,060
He's not shooting himself in the leg, but just Java applets!

00:05:44,060 --> 00:05:45,639
[Laughter].

00:05:45,639 --> 00:05:55,030
So, yes, basically, as I said, once we start something, we try all kinds of different solutions

00:05:55,030 --> 00:06:02,280
but then only the best survive and the same works for software engineering, for any kind

00:06:02,280 --> 00:06:08,650
of engineering.

00:06:08,650 --> 00:06:16,590
All planets around, a lot of physics constant everywhere and all UIs are going to be unified.

00:06:16,590 --> 00:06:19,520
What is going to be the standard for UIs?

00:06:19,520 --> 00:06:20,980
Let's get it.

00:06:20,980 --> 00:06:26,380
We all want it, a web platform.

00:06:26,380 --> 00:06:31,400
We all believe it which is why we are here together at this conference.

00:06:31,400 --> 00:06:45,790
And it seems I'm a big - I try to have my two positions together - so, if ovation has

00:06:45,790 --> 00:06:53,120
UI was then UI innovation is going to be standardised with the UI development, so, why not to build

00:06:53,120 --> 00:06:57,810
your aircraft instrument with HTML JavaScript?

00:06:57,810 --> 00:06:58,810
Why not.

00:06:58,810 --> 00:06:59,990
There is a motivation for that.

00:06:59,990 --> 00:07:04,030
There is a motivation in terms of unification, liability and accessibility.

00:07:04,030 --> 00:07:09,490
First of all, we live in the age of drones, unmanned drones, then access to a state of

00:07:09,490 --> 00:07:15,620
a flight mission, where HTTP, for example, is a pretty good thing to have, then unification

00:07:15,620 --> 00:07:20,710
means we have a lot of developers developing with JavaScript and web technologies, and

00:07:20,710 --> 00:07:25,139
it's not that hard to develop flight instrument, to be honest.

00:07:25,139 --> 00:07:26,860
I mean, displaying interfaces.

00:07:26,860 --> 00:07:28,760
It is good unified technology.

00:07:28,760 --> 00:07:32,979
Also, if you think about the web platform, it is amazingly reliable.

00:07:32,979 --> 00:07:37,430
The billions of users daily opens billions of pages.

00:07:37,430 --> 00:07:45,710
And they constantly contribute to a safety and a reliability of a platform.

00:07:45,710 --> 00:07:50,690
And also, once we have unified technology to general instruments, we can establish a

00:07:50,690 --> 00:07:54,920
components market for our products and some of you can develop aircraft instruments and

00:07:54,920 --> 00:07:57,169
sell them to Boeing, for example.

00:07:57,169 --> 00:07:59,740
For example, why not?

00:07:59,740 --> 00:08:05,790
Once I saw that there is a motivation, let's try to do that, it was not hard, to be honest.

00:08:05,790 --> 00:08:13,940
There were some caveats, but then we ended up by a real, real flight on a real planet

00:08:13,940 --> 00:08:25,500
was - Flying around Amsterdam around 1,000 metres here, a real HTML thing and we will

00:08:25,500 --> 00:08:28,080
flying and relying on it.

00:08:28,080 --> 00:08:34,870
Yes, maybe it was cool, actually.

00:08:34,870 --> 00:08:43,159
First ever flight with HTML/JavaScript instrument, but then, okay would be we did it.

00:08:43,159 --> 00:08:47,420
The considerations there to consider was of course reliability.

00:08:47,420 --> 00:09:00,450
Of course, we need, if you have problems with your instruments, fuck -

00:09:00,450 --> 00:09:07,190
less responsive instrument and it's better than can make fresh, then resources can - efficiency

00:09:07,190 --> 00:09:12,070
also to think about maybe for this you can use GPU accelerated pass or alternative rendering

00:09:12,070 --> 00:09:14,610
members of rendering on canvas.

00:09:14,610 --> 00:09:23,030
Now, you can imagine, you can take your place in an aeroplane and someone says to you, "Hey,

00:09:23,030 --> 00:09:30,260
with man, flight commander have a JavaScript-driven instrument in his cabin."

00:09:30,260 --> 00:09:35,279
You're going to fly it on a Boeing, on a JavaScript-driven Boeing.

00:09:35,279 --> 00:09:41,590
The web developer, JavaScript developer dropped fuel lines and you're going to fly with that.

00:09:41,590 --> 00:09:46,060
You're going to be scared definitely, or not?

00:09:46,060 --> 00:09:49,330
Who will fly this plane?

00:09:49,330 --> 00:09:52,490
Yes, it was quick.

00:09:52,490 --> 00:09:54,860
I get back.

00:09:54,860 --> 00:09:55,860
Yes.

00:09:55,860 --> 00:10:00,120
But just let's think why you're not going to fly this plane.

00:10:00,120 --> 00:10:04,959
It is basically your perception of yourself, your perception of web development, and your

00:10:04,959 --> 00:10:06,590
perception of JavaScript development.

00:10:06,590 --> 00:10:13,209
It is basically your trust in yourself, your trust in the web platform, it is your trust

00:10:13,209 --> 00:10:15,920
in guidelines in what is normal for JavaScript.

00:10:15,920 --> 00:10:21,830
Of course, it is easy to understand why it happened because the price, the price of mistake,

00:10:21,830 --> 00:10:25,480
of error, is very cheap in a JavaScript roll.

00:10:25,480 --> 00:10:31,920
Just reload the page, everything starts again, you're safe, but then the rest of the missions,

00:10:31,920 --> 00:10:34,210
when it's not like that.

00:10:34,210 --> 00:10:41,570
And that was a web platform, JavaScript language, we have more and more of such missions.

00:10:41,570 --> 00:10:48,830
And we need to rethink our guidelines and rethink what's normal for JavaScript.

00:10:48,830 --> 00:10:55,310
And change the way people perceive JavaScript and how we trust ourselves.

00:10:55,310 --> 00:11:00,500
So, we need more guidelines, probably, to change the way what's normal.

00:11:00,500 --> 00:11:03,380
Let's have a look at Jet Propulsion Laboratory which is the institution.

00:11:03,380 --> 00:11:11,500
It is a NASA kind of branch which works on projects like Curiosity Mars Rover and the

00:11:11,500 --> 00:11:21,500
Voyager, which is amazing because it is 36 years flying in deep space without any bucks.

00:11:21,500 --> 00:11:25,480
Can JavaScript do that?

00:11:25,480 --> 00:11:26,800
No.

00:11:26,800 --> 00:11:32,820
We have a similar problem, when I used to work for Unity Media on a set-top boxes.

00:11:32,820 --> 00:11:40,740
We had the set-top boxes, half a million lines of code, and the stability and performance

00:11:40,740 --> 00:11:45,550
were pretty high-priority, so one month without reset was pretty challenging.

00:11:45,550 --> 00:11:48,600
We tried to adopt this NASA guidelines.

00:11:48,600 --> 00:11:54,360
It is not - it is not some weird thing.

00:11:54,360 --> 00:12:00,180
It is really guidelines which GPLU and NASA use and they're published online.

00:12:00,180 --> 00:12:01,339
You can check them.

00:12:01,339 --> 00:12:02,710
Yes, let's try.

00:12:02,710 --> 00:12:08,970
Rule number 1: no function should be longer than what can be printed on a sheet of paper.

00:12:08,970 --> 00:12:13,060
It comes from all times.

00:12:13,060 --> 00:12:15,320
You may have seen this photo.

00:12:15,320 --> 00:12:22,350
It is Margaret Hamilton with the author of Apollo mission source code, staying with the

00:12:22,350 --> 00:12:27,279
source code, basically, and it's easy to understand why they were talking about sheets of paper

00:12:27,279 --> 00:12:37,149
at that time, but now - it means higher readability compared to what you have written altogether,

00:12:37,149 --> 00:12:40,390
you can impose your functions better.

00:12:40,390 --> 00:12:44,320
Better at composibility, also.

00:12:44,320 --> 00:12:50,050
Then, yes, in if you don't do it, it is obvious.

00:12:50,050 --> 00:12:52,180
It's really obvious to adopt this rule.

00:12:52,180 --> 00:13:01,380
Rule number 2 constructs do not use go-to statements and indirect recursion.

00:13:01,380 --> 00:13:04,790
Go-to is easy to understand but what about recursion?

00:13:04,790 --> 00:13:09,290
How can we live without recursion and why so NASA want to be?

00:13:09,290 --> 00:13:15,100
The reason for that is that NASA relies on static analysis a lot and they want code to

00:13:15,100 --> 00:13:16,540
be predictable.

00:13:16,540 --> 00:13:19,360
They use static analysis for that.

00:13:19,360 --> 00:13:23,570
What sounds like rule number two, predictability.

00:13:23,570 --> 00:13:33,200
If you want to write reliable code, then start to write predictable code.

00:13:33,200 --> 00:13:36,990
Define code in standards, follow it.

00:13:36,990 --> 00:13:42,610
Now it is really a important part of JavaScript if you don't use aesthetic analysis, you should

00:13:42,610 --> 00:13:45,579
use aesthetic analysis to support standard.

00:13:45,579 --> 00:13:51,450
US ES link with plug-ins.

00:13:51,450 --> 00:13:54,620
Airbnb is a good place to start.

00:13:54,620 --> 00:14:02,940
There are a whole local load of plugins, but there are a lot of nice things happening to

00:14:02,940 --> 00:14:08,910
increase the quality of your code, and support the standard you established.

00:14:08,910 --> 00:14:13,410
Collect metrics because you need to track how things are going in your code base and

00:14:13,410 --> 00:14:15,089
analyse types.

00:14:15,089 --> 00:14:20,240
Right, good tools for analysing types now.

00:14:20,240 --> 00:14:24,589
Rule number 3: do not use memory, dynamic memory allocation after initialisation.

00:14:24,589 --> 00:14:31,899
Okay, so it's really weird advice for JavaScript land because JavaScript has dynamic memory

00:14:31,899 --> 00:14:37,200
allocation by default and then memory is managed by JavaScript and garbage collection.

00:14:37,200 --> 00:14:45,880
That's a problem because we got too relaxed about that and many environment don't respect.

00:14:45,880 --> 00:14:48,440
Respect that because garbage collection might become your enemy.

00:14:48,440 --> 00:14:55,110
I will not run into details balls I have the shrinks, but then I don't think I have enough

00:14:55,110 --> 00:14:56,110
of time.

00:14:56,110 --> 00:15:00,742
I hope everybody knows why garbage collection is bad and how to - how basically to work

00:15:00,742 --> 00:15:07,540
with memory leaks and our to, or someone want to look how timeline works.

00:15:07,540 --> 00:15:10,230
No, okay.

00:15:10,230 --> 00:15:16,620
Then measure with dev tool timeline how much memory I'm going to use and then compare the

00:15:16,620 --> 00:15:21,990
state of your application, snapshots of your application to see where the memory leaks,

00:15:21,990 --> 00:15:29,820
the state of the system of your memory, and then, yes, just take care of your memory.

00:15:29,820 --> 00:15:39,660
Variables top of the scope to increase serviceability, use CS lint first on top, one place to keep

00:15:39,660 --> 00:15:40,779
Europe variables.

00:15:40,779 --> 00:15:42,300
Source them for predictability.

00:15:42,300 --> 00:15:51,940
Watch memory leaks, clean listeners and variables not used more.

00:15:51,940 --> 00:15:55,510
Use ESLint, it is very important to start with that.

00:15:55,510 --> 00:16:00,589
Switch to JavaScript aesthetic memory mode with object pooling.

00:16:00,589 --> 00:16:07,380
Some of them know there is kind of an option to have less memory allocation during the

00:16:07,380 --> 00:16:14,589
runtime by using object pulling so it looks like you set objects initially when the application

00:16:14,589 --> 00:16:19,970
starts, for example, you create 256 objects, then you have a function to get object from

00:16:19,970 --> 00:16:22,990
pool and you put it back, release object.

00:16:22,990 --> 00:16:26,730
You always use the 256 objects then it is less memory allocation.

00:16:26,730 --> 00:16:34,100
It is not static, right, but at least you try.

00:16:34,100 --> 00:16:38,940
All must have a fixed set upper bound.

00:16:38,940 --> 00:16:46,279
It also comes from NASA tend to have a good static analysis, but I don't think we should

00:16:46,279 --> 00:16:47,829
follow this rule.

00:16:47,829 --> 00:16:59,040
We would like to have recursion still and we would like to be flexible.

00:16:59,040 --> 00:17:07,169
The assertion density should average two assertions per function.

00:17:07,169 --> 00:17:08,170
Assertion is not a unit test.

00:17:08,170 --> 00:17:16,210
It is something run in runtime and it checks the state of publication matches given.

00:17:16,210 --> 00:17:23,550
So rule number 5 means sounds like test well.

00:17:23,550 --> 00:17:27,449
Right?

00:17:27,449 --> 00:17:30,950
Minimum amount of test is super function.

00:17:30,950 --> 00:17:37,070
Analysis systems state you're in runtime generate errors in case of critical considerations.

00:17:37,070 --> 00:17:39,580
Mission coverage but be aware.

00:17:39,580 --> 00:17:45,750
100 coverage doesn't mean you have well toasted code because coverage is a quantitative not

00:17:45,750 --> 00:17:47,440
qualitative metric.

00:17:47,440 --> 00:17:57,610
Then rule number 6: data objects must be declared at the smallest possible level of scope.

00:17:57,610 --> 00:18:08,260
That is basically all about your table, and many of us, most of us, face this problem.

00:18:08,260 --> 00:18:15,650
There are good tools now in the JavaScript world to solve this problem, then, yes, things

00:18:15,650 --> 00:18:20,440
like Redux, unidirection flows, and so on.

00:18:20,440 --> 00:18:27,140
Anyway, it is really nice to see there are good matches between NASA needs, NASA problems

00:18:27,140 --> 00:18:31,130
and our problems, and we also have some solutions for them.

00:18:31,130 --> 00:18:39,760
Yes, it is also good for plugins there, developed by Roman Melnick and works pretty �well.

00:18:39,760 --> 00:18:51,720
For example, you can test your reducers for pureness.

00:18:51,720 --> 00:18:53,830
Rule number 7.

00:18:53,830 --> 00:19:01,980
This rule, NASA say they break the most of them.

00:19:01,980 --> 00:19:08,650
Basically, it says rather than develop - each - you call functions then you immediately

00:19:08,650 --> 00:19:11,190
check is it the correct response from it?

00:19:11,190 --> 00:19:12,190
Not.

00:19:12,190 --> 00:19:15,070
Then NASA often break it.

00:19:15,070 --> 00:19:17,260
I don't think we are going to use it as well.

00:19:17,260 --> 00:19:20,130
So rule number 7 we will skip.

00:19:20,130 --> 00:19:24,950
Rule number 8: the use of pre-processor must be limited to the inclusion of header files

00:19:24,950 --> 00:19:36,860
or simple - says the - we have a lot of pre-processing now in JavaScript also, but actually there

00:19:36,860 --> 00:19:38,070
are two problems with that.

00:19:38,070 --> 00:19:42,450
The first problem with pre-processing, this transpiling is that you don't only the code

00:19:42,450 --> 00:19:45,190
you execute any more, the browser executes.

00:19:45,190 --> 00:19:50,910
It is pretty reliable nowadays but still you should keep in mind the coat you write is

00:19:50,910 --> 00:19:54,970
not the code you execute, and there is - coat you write is not the code you execute.

00:19:54,970 --> 00:19:57,559
There is a price for that.

00:19:57,559 --> 00:19:59,590
Comparing performance of - transpilation engines.

00:19:59,590 --> 00:20:02,450
Sometimes, it is identical.

00:20:02,450 --> 00:20:07,850
A few months ago, a year ago, it was very different.

00:20:07,850 --> 00:20:14,280
I mean, there are a lot of green fields but still some yellow stuff means two times slower,

00:20:14,280 --> 00:20:15,870
three times slower.

00:20:15,870 --> 00:20:21,240
Transpilation has a price and you should be aware of that.

00:20:21,240 --> 00:20:25,420
There is a cost for bundling and transpiling.

00:20:25,420 --> 00:20:30,090
There is a table of differences, different bundlers, and the difference sometimes is

00:20:30,090 --> 00:20:34,250
10 or 20 per cent, so it's remarkable.

00:20:34,250 --> 00:20:43,070
You even may change your bundling system because of that, but I don't think you will do.

00:20:43,070 --> 00:20:50,610
Rule number 9: the use of pointers should be restricted especially no more than one

00:20:50,610 --> 00:20:53,180
level of the references allow.

00:20:53,180 --> 00:20:54,770
Function pointers are not permitted.

00:20:54,770 --> 00:21:02,520
Okay, it is hard to use for JavaScript because the object, then we have a lot of pointers,

00:21:02,520 --> 00:21:09,680
but, yes, still can be used.

00:21:09,680 --> 00:21:14,380
Because in two ways: so, one of them is code change.

00:21:14,380 --> 00:21:20,490
So, if you use call change it's the level of the reference, as we say.

00:21:20,490 --> 00:21:27,179
We had a less performance because every call by the chain takes some time so it decreases

00:21:27,179 --> 00:21:28,240
performance.

00:21:28,240 --> 00:21:30,130
So, loose coupling.

00:21:30,130 --> 00:21:37,860
That is just an or architect usual patterning, not JavaScript or C.

00:21:37,860 --> 00:21:43,450
If you have a dog - a classic example - you don't say - you just say "dog run" and the

00:21:43,450 --> 00:21:49,720
dog knows how to run depends on its own state.

00:21:49,720 --> 00:21:55,059
So loose coupling and the smaller code change.

00:21:55,059 --> 00:22:04,590
Rule number 10: all code must be compiled from the first day of development with no

00:22:04,590 --> 00:22:06,440
compiler warnings enabled.

00:22:06,440 --> 00:22:09,340
This basically is the most important one.

00:22:09,340 --> 00:22:13,840
It is basically the way you perceive your process is the way you receive your code base,

00:22:13,840 --> 00:22:16,651
and just let's name it, keep it green.

00:22:16,651 --> 00:22:21,870
Keep it green foreign the first day of development.

00:22:21,870 --> 00:22:25,230
Perceive your project assumption series from the first day of development.

00:22:25,230 --> 00:22:29,970
I know some of you already started with a different approach.

00:22:29,970 --> 00:22:32,970
So you are already red.

00:22:32,970 --> 00:22:39,289
What do you do if you already fucked up?

00:22:39,289 --> 00:22:40,330
Don't panic.

00:22:40,330 --> 00:22:47,950
Prioritise your models, do tests, implement standards, implement style we were talking

00:22:47,950 --> 00:22:48,950
about.

00:22:48,950 --> 00:22:51,840
It was ten rules of NASA.

00:22:51,840 --> 00:22:56,620
The tenth is the last one.

00:22:56,620 --> 00:23:04,680
Then trying adopting them and more things, more plugins been by establishing standards,

00:23:04,680 --> 00:23:14,410
by making your code base better, by improving the process, we can make this visit which

00:23:14,410 --> 00:23:22,419
currently does not allow you to fly on a JavaScript-driven aeroplane.

00:23:22,419 --> 00:23:29,410
We can make this change, and to perceive ourselves differently, to perceive ourselves like developers

00:23:29,410 --> 00:23:34,669
who produce first-class code, who produce the same kind of code people?

00:23:34,669 --> 00:23:43,630
NASA and GPL produce, and if it goes this way, if it constantly improves our code analysis

00:23:43,630 --> 00:23:49,480
tools, our process, and our perception of web development, our trust in ourselves, one

00:23:49,480 --> 00:23:52,700
day, we're going to be there.

00:23:52,700 --> 00:24:01,630
One day, we are going to be on aeroplanes - I know some people already interest in aeroplanes

00:24:01,630 --> 00:24:12,750
using Node.js in Boeing, but they standard some models at KLM in the Netherlands, they

00:24:12,750 --> 00:24:19,190
standardise to put in a rack on the Airbus, and, it works.

00:24:19,190 --> 00:24:23,140
It is not connected to the flight system but they use it for media, but it is a long way

00:24:23,140 --> 00:24:26,560
to standardise the JS models for that.

00:24:26,560 --> 00:24:27,830
They did it.

00:24:27,830 --> 00:24:31,100
Boeing is already on Boeing and Airbus.

00:24:31,100 --> 00:24:41,290
So, yes, let's try and we, why not - also, the Netherlands company are building ships

00:24:41,290 --> 00:24:43,130
with JavaScript.

00:24:43,130 --> 00:24:45,700
If ships are there, planes are there.

00:24:45,700 --> 00:24:46,700
What stops us?

00:24:46,700 --> 00:24:52,360
Only trust in our ourselves, only our perception of web development and our perception of JavaScript.

00:24:52,360 --> 00:24:53,360
That's it.

00:24:53,360 --> 00:24:54,360
Thank you.

00:24:54,360 --> 00:24:55,360
[Applause].

00:24:55,360 --> 00:24:55,860

YouTube URL: https://www.youtube.com/watch?v=z8hG-3Ak_b4


