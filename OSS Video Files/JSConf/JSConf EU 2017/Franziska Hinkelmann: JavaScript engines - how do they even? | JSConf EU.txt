Title: Franziska Hinkelmann: JavaScript engines - how do they even? | JSConf EU
Publication date: 2017-05-16
Playlist: JSConf EU 2017
Description: 
	http://2017.jsconf.eu/speakers/franziska-hinkelmann-javascript-engines-how-do-they-even.html

Want to know how JavaScript engines work? Why is JavaScript so fast? What is just-in-time compilation? Weâ€™ll look at basic concepts of compilers, challenges posed by modern JavaScript, and how to write compiler-friendly JavaScript.
Captions: 
	00:00:03,139 --> 00:00:23,080
Franziska Hinkelmann - JavaScript engines how do they even?

00:00:42,350 --> 00:00:45,660
FRANZISKA: Good morning, are you pumped about low-level JavaScript stuff. That's what we

00:00:45,660 --> 00:00:50,270
are going to do now. I'm Franziska Hinkelmann on the V8 team, in Munich, not that far away.

00:00:50,270 --> 00:00:58,039
V8 is being developed in Germany for the most part. V8 is the JavaScript engine, and my

00:00:58,039 --> 00:01:05,449
work focuses a lot on performance optimisations for ES6 and ES6 next features and I talk to

00:01:05,449 --> 00:01:13,860
you about JavaScript engines now. Engines: why would you care about engines at all? Well,

00:01:13,860 --> 00:01:18,729
if you have any JavaScript source code and you run it, it's always the engine that runs

00:01:18,729 --> 00:01:28,100
it for you. It doesn't matter if you run it in the browser, or node node.js or an IoT

00:01:28,100 --> 00:01:33,570
device, to go from something you write to executing that, that's what the engines are

00:01:33,570 --> 00:01:41,079
doing. JavaScript engines are the heart of everything that we do. JavaScript engines

00:01:41,079 --> 00:01:46,960
have been evolved a lot in the last 22 years. We can run massive complex frameworks and

00:01:46,960 --> 00:01:52,409
enterprise node.js service and there is a lot of cool technology in JavaScript engines.

00:01:52,409 --> 00:01:59,110
I hope in the next 20 minutes to give you a bit of an idea what's happening inside those

00:01:59,110 --> 00:02:04,740
engines, what is making your code run so fast? I will be talking a little bit about performance,

00:02:04,740 --> 00:02:11,200
and I just want to point out when I talk about performance, I mean specifically only JavaScript

00:02:11,200 --> 00:02:15,881
performance, like computing and running actual JavaScript. I'm not talking about all the

00:02:15,881 --> 00:02:20,500
other things that are super important for performance like DOM and rendering and network

00:02:20,500 --> 00:02:30,099
latency. When I say performance, I mean computing and running JavaScript. There are several

00:02:30,099 --> 00:02:36,159
JavaScript engines, all the major browsers have their own JavaScript engine, and it is

00:02:36,159 --> 00:02:41,870
really good there are several engines because more engines mean competition. Competition

00:02:41,870 --> 00:02:51,860
really means better performance and better adherence to the standard. In the major browsers,

00:02:51,860 --> 00:03:02,540
just to drop a few names, up there, JavaScript -

00:03:02,540 --> 00:03:10,330
Spidermonkey is in Firefox by Mozilla and V8 is in Chrome. If you run node.js, you know

00:03:10,330 --> 00:03:15,849
you need an engine. By default, node.js comes with V8 but there is a Chakra core build of

00:03:15,849 --> 00:03:21,650
node.js and there you get node.js with a Microsoft Chakra engine, and there is a SpiderNode project

00:03:21,650 --> 00:03:33,879
using Spidermonkey. Again, if you're working on IoT, if you work on small devices, you

00:03:33,879 --> 00:03:40,080
might want to trade in performance for memory size. The performance on the browsers are

00:03:40,080 --> 00:03:47,580
fast, they take up a lot of memory. On IoT devices, you can take smaller engines somewhat

00:03:47,580 --> 00:04:04,220
slower but they fit, like Duktape or Jerryscript. The ECMAScript is designed by the TC39 committee.

00:04:04,220 --> 00:04:09,760
They discuss additions and changes to the language and formalise it as a standard, and

00:04:09,760 --> 00:04:15,689
then we engine implementers implement those standards to give you JavaScript. That's really

00:04:15,689 --> 00:04:22,941
cool before we have a TC39 panel here this afternoon, so some committee members are here

00:04:22,941 --> 00:04:27,720
to answer your questions, and they still take questions, so you can Tweet some questions

00:04:27,720 --> 00:04:31,720
for the panel this afternoon. If you want to know what is happening in the language,

00:04:31,720 --> 00:04:41,570
what is the take on a few changes, like that. All right, so JavaScript is a standard. We

00:04:41,570 --> 00:04:47,450
implement that. And the engine is the thing responsible for using the rules on the standard

00:04:47,450 --> 00:04:54,890
and then to run your JavaScript. What is a really cool thing about JavaScript, besides

00:04:54,890 --> 00:05:01,450
the awesome community and JSConf? One thing that I think is really cool is that if you

00:05:01,450 --> 00:05:08,280
write JavaScript code, and you have variables, you can just say var x equals something. You

00:05:08,280 --> 00:05:19,080
don't have to worry about what that x actually is. You can use var or const but you don't

00:05:19,080 --> 00:05:26,110
have to distinguish upfront if you have a number, a string, or an array. If you have

00:05:26,110 --> 00:05:31,680
ever written C++, the rules are really, really strict, and you first have to figure out and

00:05:31,680 --> 00:05:39,290
read up a lot about integers just to get your first "hello world" program running. If you

00:05:39,290 --> 00:05:46,790
write C++ and want to define a variable that values 17, you have to specify and know what

00:05:46,790 --> 00:05:54,370
you want to specify. In this case, I'm specifying aspect and integer which can be a whole number,

00:05:54,370 --> 00:06:01,000
positive or negative. They can only be - within a certain range, so, if your number gets too

00:06:01,000 --> 00:06:07,770
big, it doesn't fit into an integer any more. If you write JavaScript, don't care about

00:06:07,770 --> 00:06:12,750
any of that. That makes it really simple for us. We don't have to worry about this. It

00:06:12,750 --> 00:06:18,940
makes it easy to get started, it makes it easier to explain it, it makes prototyping

00:06:18,940 --> 00:06:26,290
usually faster, so that's a really cool thing for a language. And we call this the language

00:06:26,290 --> 00:06:32,610
is dynamically typed, so a language like C++ where you have to define this is considered

00:06:32,610 --> 00:06:41,700
statically typed. It is not only about the basic types, strings where you think you can

00:06:41,700 --> 00:06:48,880
figure out where they are and say not not much more work. This is for more complex objects.

00:06:48,880 --> 00:06:54,650
When you have any objects in JavaScript, you can add and delete properties as you wish,

00:06:54,650 --> 00:06:59,880
as you need, you don't have to make that clear beforehand. So this object here as the properties

00:06:59,880 --> 00:07:07,080
x and y but if needed, it can delete a property, it can add a property. I have access to all

00:07:07,080 --> 00:07:13,280
the properties on the prototype change which I can also change. So, that's something that

00:07:13,280 --> 00:07:20,470
makes it easy to work with objects, and sometimes, it would be even impossible to specify beforehand

00:07:20,470 --> 00:07:25,620
what exactly your object is like. If you get a bunk of Jason over the net and turn it into

00:07:25,620 --> 00:07:32,410
an object, sometimes, you don't know actually what the properties will be. For us as developers,

00:07:32,410 --> 00:07:37,830
that's super useful. It makes it a little bit easier. If you're a compiler, though,

00:07:37,830 --> 00:07:43,720
this is not good, because you give so little information to the compiler, the compilers

00:07:43,720 --> 00:07:48,490
have a hard time generating machine code which is fast if they have no information. That's

00:07:48,490 --> 00:07:54,280
why the point in C++ you specify all that because the compiler needs this information

00:07:54,280 --> 00:08:03,380
upfront so it can compile your code into an executable. C++ is statically typed not to

00:08:03,380 --> 00:08:08,721
make it hard for developers because that allows you to generate fast machine code when you

00:08:08,721 --> 00:08:21,620
compile C++. But know know JavaScript is pretty fast, right? We have huge libraries, huge

00:08:21,620 --> 00:08:28,330
frameworks, we run all these JavaScript tools to transpile our code. JavaScript is really

00:08:28,330 --> 00:08:33,709
fast, even though it is dynamically typed, and we have all this freedom when we are using

00:08:33,709 --> 00:08:40,270
objects and types. And the trick that all modern JavaScript engines use is so-called

00:08:40,270 --> 00:08:50,031
just In Time compilation, abbreviated as JIT compilation which means "just in time. What

00:08:50,031 --> 00:08:57,830
that means is we're not first compiling ahead of tame, finished a compilation and then run

00:08:57,830 --> 00:09:03,490
the code, we are mixing these two steps together and we're using information from running the

00:09:03,490 --> 00:09:10,450
code to recompiling the code. So we are compiling the source code just in time as we need it,

00:09:10,450 --> 00:09:15,810
we collect some information when we run it, and then we recompile this source code. If

00:09:15,810 --> 00:09:22,470
you think about C++ again which is compiled ahead of time, it is two separate steps. You

00:09:22,470 --> 00:09:27,590
first compile it, you get an executable, and then you run that executable. In JavaScript,

00:09:27,590 --> 00:09:36,070
that is one step. If you start a node - note process, you say note server just - it is

00:09:36,070 --> 00:09:42,460
all together because compilation and execution goes at the same time and there is feedback

00:09:42,460 --> 00:09:52,200
going back and forth to speed up the execution. What modern engines have is they don't have

00:09:52,200 --> 00:09:57,850
one compiler, they have at least two compilers where one of them is an optimising compiler.

00:09:57,850 --> 00:10:05,440
The main concept I want you to take away here is we have an optimising compiler that is

00:10:05,440 --> 00:10:09,520
recompiling hot functions, so a function that you're using a lot that is worth speeding

00:10:09,520 --> 00:10:15,610
up is considered hot, that is recompiled by the optimising compiler which means we compile

00:10:15,610 --> 00:10:20,870
the code, we run it a few times, we collect information about the types and then we say,

00:10:20,870 --> 00:10:25,760
"Oh, this function is not, let's make it faster by using the information that we have got

00:10:25,760 --> 00:10:33,590
at so far." So when we're recompiling, when we're optimising, we're recompiling assuming

00:10:33,590 --> 00:10:38,940
that we will see similar types as before, so we bake in this information in the optimised

00:10:38,940 --> 00:10:46,120
machine code. Now since JavaScript does dynamically type, no-one is forcing you to keep that same

00:10:46,120 --> 00:10:51,240
type, and you can change the kind of inputs you give to your functions, so it might happen

00:10:51,240 --> 00:10:56,560
that, at some point, you run this optimised function on different kind of objects and

00:10:56,560 --> 00:11:01,680
then you have to de-optimise, you can use this optimised code for that, and you fall

00:11:01,680 --> 00:11:09,780
back to the baseline compiler. So, compile, run a few times, optimise, assuming certain

00:11:09,780 --> 00:11:16,170
conditions, run the optimised code, if the conditions fail, go back to the basic code.

00:11:16,170 --> 00:11:22,510
Now, so you start with JavaScript source code, then the parser generates an abstract syntax

00:11:22,510 --> 00:11:30,691
tree. I will not talk about the parser because my co-worker Marja will tell you how we parse

00:11:30,691 --> 00:11:36,480
JavaScript and how you can write it to make it a little faster. The source code is consumed

00:11:36,480 --> 00:11:42,790
by the parser and then we generate an abstract syntax stream. Then a compiler is using that

00:11:42,790 --> 00:11:50,800
abstract syntax stream to make the machine code. We collect the information and pass

00:11:50,800 --> 00:11:57,090
it on to the optimising compiler to generate faster machine code. Every once in a while,

00:11:57,090 --> 00:12:03,630
we have to bail out de-optimised, do an OSI exit to go back to the slower baseline machine

00:12:03,630 --> 00:12:13,870
code. In the V8 engine, the baseline compiler is an interpreter called Ignition, and the

00:12:13,870 --> 00:12:23,090
optimising compiler is called TurboFan. If you hear about them not in relation to cars,

00:12:23,090 --> 00:12:33,240
it is about the compiler pipeline in V8! It used to be crank shaft, we fixed it out, ignition,

00:12:33,240 --> 00:12:44,020
make Chrome and node fast. In Spidermonkey the optimising compiler is Ironmonkey, and

00:12:44,020 --> 00:12:56,140
there are a few more around where Safari, they don't have one optimising compilers but

00:12:56,140 --> 00:13:04,750
two, so a low-level interpreter and a DFG optimising compiler and B3, and Chakra also

00:13:04,750 --> 00:13:16,360
has an optimising compiler. The optimising compiler uses previously seen type information.

00:13:16,360 --> 00:13:22,250
If you change your objects all the time, then we cannot generate good optimised code or

00:13:22,250 --> 00:13:27,930
if you've generated, you have to de-optimise a lot. De-optimisation always means a small

00:13:27,930 --> 00:13:36,050
performance hit. From the high-level concept, and now I want you show you on a really concrete

00:13:36,050 --> 00:13:43,790
example. I'm going to show you the optimised machine code for this on an Intel processor.

00:13:43,790 --> 00:13:48,700
I'm using a very simple example. It is a load function that takes the parameter and all

00:13:48,700 --> 00:13:56,350
it does is is it returns object at x. The property examine is, you do it all - property

00:13:56,350 --> 00:14:03,310
axis in JavaScript is fairly complicated for the compiler because if you have an object

00:14:03,310 --> 00:14:08,200
that a compiler doesn't know anything about it and you want x, you don't know where is

00:14:08,200 --> 00:14:13,680
this x? Does this object have an x? Is it may be under prototype chain? How are the

00:14:13,680 --> 00:14:18,130
properties stored for the object? Where in the memory is the value for x? In implement,

00:14:18,130 --> 00:14:27,540
this does quite a lot of work to do something like "object that x". So, one small thing

00:14:27,540 --> 00:14:32,071
I have to explain before we get started is how objects are represented internally. We

00:14:32,071 --> 00:14:41,861
represent object types incrementally by transitioning for every property to a new type. So, if you

00:14:41,861 --> 00:14:49,360
have an empty object literal, it is represented by just object, basically. If you have a literal

00:14:49,360 --> 00:14:54,690
with a property x, then we transition from the empty literal type to the next type that's

00:14:54,690 --> 00:14:59,850
a literal with an x property. And then if you have more properties, we transition over

00:14:59,850 --> 00:15:05,550
to more types of objects, so that's an internal representation since you don't have to specify

00:15:05,550 --> 00:15:11,360
a class or anything in JavaScript, you can just modify object types as you want. Internally,

00:15:11,360 --> 00:15:17,440
we keep track of a type of objects. And because of these transitions, it is actually making

00:15:17,440 --> 00:15:23,670
a difference if your object has x defined first or y defined first, so just because

00:15:23,670 --> 00:15:29,991
two objects have the same properties, they're not the same type internally. All right, so

00:15:29,991 --> 00:15:36,870
I'm running the load function a few times, and I'm always running them with these objects

00:15:36,870 --> 00:15:42,210
here. They look similar, but it is not the same objects. The X and Y values are obviously

00:15:42,210 --> 00:15:47,510
different. But all these objects have the same shape. Internally, they all correspond

00:15:47,510 --> 00:15:53,130
to this kind of object. So, if I'm running the function a lot, eventually, the compiler

00:15:53,130 --> 00:15:58,230
says, "Hey, this is a hot function, let's optimise it" and this is what it is being

00:15:58,230 --> 00:16:05,880
optimised to. So this is assembly code. But I will explain to you what is happening here.

00:16:05,880 --> 00:16:10,690
So, at the top, I left out a little bit of stuff, this is where we said up the stack

00:16:10,690 --> 00:16:17,750
- set up the stack when we enter the function. The important thing is here: this address

00:16:17,750 --> 00:16:23,740
corresponds to the type of the object that we fed the function with. So, internally,

00:16:23,740 --> 00:16:32,550
this address represents an object that has an x and a y. So this is optimised code that

00:16:32,550 --> 00:16:38,610
was generated after we have run the function a few times. And it has memorised this type,

00:16:38,610 --> 00:16:45,149
and now when we run this function again in assembly code low-level, register level, we

00:16:45,149 --> 00:16:53,180
load this type, and then we do a comparison. We are comparing our parameter where it has

00:16:53,180 --> 00:17:00,649
the same type as what we saved before. We run it and say does the new parameter look

00:17:00,649 --> 00:17:08,890
like the things we've seen in the past? If the comparison is true, we move over here

00:17:08,890 --> 00:17:15,819
where we just - where we now are getting the value of x. So this is the address of the

00:17:15,819 --> 00:17:22,610
object plus 17, which means take a memory offset off the object because we know at this

00:17:22,610 --> 00:17:29,150
position, it is the x value. So this short cut corresponds to the value for x. And we

00:17:29,150 --> 00:17:34,679
can just take that from memory and be done with it. That is getting object of x. We don't

00:17:34,679 --> 00:17:38,391
have to look in the prototype chain or see if there are side effects or anything. Just

00:17:38,391 --> 00:17:46,120
say if this kind of object comes, then the value is here in memory. Now, if we are calling

00:17:46,120 --> 00:17:51,690
the optimised code with an object that looks different than this kind of object, then the

00:17:51,690 --> 00:17:58,920
comparison of the object types is going to fail, and we have to do a jump down to 5a

00:17:58,920 --> 00:18:05,200
and 5a is a de-optimisation bail-out. On that schematic, de-optimisation bail-out is the

00:18:05,200 --> 00:18:12,920
point from where we go from the fast optimised code back to the slow baseline code because

00:18:12,920 --> 00:18:19,620
we don't have optimised code to handle the code if we run it with different kind of objects,

00:18:19,620 --> 00:18:25,490
because if we say, "For any kind of objects, the x value is over here in memory", that

00:18:25,490 --> 00:18:34,280
would be wrong. When you write JavaScript code, it is actually compiled to machine code

00:18:34,280 --> 00:18:39,290
like this, that looks different depending on your system's architecture, that this is

00:18:39,290 --> 00:18:47,300
what is happening at the very basis when you're running JavaScript code. When I ran this function

00:18:47,300 --> 00:18:52,900
with objects that have a different type - like these objects here have different properties

00:18:52,900 --> 00:18:58,610
so we don't consider them the same type, one has an a, one doesn't, it has a b property

00:18:58,610 --> 00:19:06,610
instead - to optimise the machine code looks very similar to what we've just seen, instead

00:19:06,610 --> 00:19:13,880
of one type, we have four types now, one that corresponds to every input that we have recorded

00:19:13,880 --> 00:19:20,130
before. So we do four comparisons, if we match either one of those with the new object we've

00:19:20,130 --> 00:19:27,651
put in, we say short cut, take the value of a memory from here, we are done with it. If

00:19:27,651 --> 00:19:36,920
none of them matches, then we jump, and, again, we are jumping to a de-optimisation. So, depending

00:19:36,920 --> 00:19:43,790
on the input values that we've observed, the optimised code looks different - like the

00:19:43,790 --> 00:19:49,740
first one had one comparison, this had four comparisons. Now, you're saying, okay, so

00:19:49,740 --> 00:19:55,059
you're just adding comparisons for every single input type, but you can see this doesn't sail

00:19:55,059 --> 00:20:00,050
because then you have these if compares, if compares, it would take forever and really

00:20:00,050 --> 00:20:07,870
blow up memory. What we do is, if you have more than four types, we actually don't compare

00:20:07,870 --> 00:20:15,280
to all the types any more, this address here does not correspond to a specific type. This

00:20:15,280 --> 00:20:22,890
one just points to string x because we wanted the property x, and we have to call into function

00:20:22,890 --> 00:20:29,440
which is now looking up property x in a big pool of 3,000 entries. You can imagine in

00:20:29,440 --> 00:20:34,490
machine code, it looks short, but this is an expensive call here. It is much more expensive

00:20:34,490 --> 00:20:43,120
than just saying, "Move this from memory over here." As a performance tip at this really,

00:20:43,120 --> 00:20:50,360
really low level of engine-level performance things, one thing that helps de-optimising

00:20:50,360 --> 00:20:55,700
compilers or the JavaScript engines in general is if you are always using the same type of

00:20:55,700 --> 00:21:03,100
objects. So, if your objects represent the same thing anyways, and if it is possible

00:21:03,100 --> 00:21:08,930
in not making your code terribly unreadable, try to make them the same type for the engine.

00:21:08,930 --> 00:21:16,660
So, for example, in this case, this is exactly the same information as to slides before,

00:21:16,660 --> 00:21:22,750
except that I'm always adding b, c. D, as undefined to all the objects. Now, for the

00:21:22,750 --> 00:21:28,120
compiler, this is considered one object type, and the optimised code is nice and short,

00:21:28,120 --> 00:21:34,230
there is exactly one type of object that corresponds to this bigger object with all the parameters,

00:21:34,230 --> 00:21:45,030
and then there is one comparison saying is this the same? Use the value done. This is

00:21:45,030 --> 00:21:52,100
the general idea. Store information or collect information by running, recompile, assuming

00:21:52,100 --> 00:21:57,610
we get the exact same type of inputs - like different values but similar types - and then

00:21:57,610 --> 00:22:03,760
the resulting code is really fast as long as you don't change types. We recently implemented

00:22:03,760 --> 00:22:11,220
this speed-up for an ES6 feature. In ES6, you have the option to define object literals

00:22:11,220 --> 00:22:17,299
with computer property names. In ES5 when you had a variable as a key, you first had

00:22:17,299 --> 00:22:24,440
to create the object and then you could set that property. So, if x is a variable and

00:22:24,440 --> 00:22:33,231
you want o of x, you have to create the literal. In ES6, you can do this in one step. Just

00:22:33,231 --> 00:22:41,350
use the brackets inside the object notation. We saw in benchmarks that this right-hand

00:22:41,350 --> 00:22:48,200
side is a lot slower than the ES5 equivalent. You saw in the last talk the list of benchmarks,

00:22:48,200 --> 00:22:53,050
the yellow and green thing. This one was red because it was so much slower than the ES5

00:22:53,050 --> 00:22:59,770
counterpart. But we applied the same principle. A lot of times in this kind of code, the x

00:22:59,770 --> 00:23:05,880
is a symbol, and every function runs is the same symbol, so we applied this principle

00:23:05,880 --> 00:23:11,980
here. We run the code a few times, we memorise what x is and optimise to a fast pass saying

00:23:11,980 --> 00:23:18,020
if it is the same symbol we've seen all the time, then this is the kind of object we are

00:23:18,020 --> 00:23:24,350
creating instead of to make the these expensive object transitions when we are creating this

00:23:24,350 --> 00:23:31,429
every time. So by applying these optimisation principles, we've got a ten-times speed-up

00:23:31,429 --> 00:23:41,179
on that benchmark, and the yellow-green benchmark list is on par with the ES5 equivalent. You

00:23:41,179 --> 00:23:46,020
can use this ES6 feature without having to worry that it would slow down your performance

00:23:46,020 --> 00:23:54,720
if that is really critical to you. So far, the high-level overview, you can't put too

00:23:54,720 --> 00:24:00,090
much into 25 minutes. I hope I was able to give you some idea of what is going on. If

00:24:00,090 --> 00:24:04,410
you want to dig deeper into that, of course you can try it out yourself and make your

00:24:04,410 --> 00:24:11,680
own experiments and see what is going on. All the engines are open source, or all the

00:24:11,680 --> 00:24:17,320
engines I mentioned are open source. You can get the source code, look at that, of course.

00:24:17,320 --> 00:24:24,350
But you can play around with it. You probably have Node installed anyways, so use Note or

00:24:24,350 --> 00:24:33,350
Chrome and palace in a few - if you pass in print opt code you will see the optimised

00:24:33,350 --> 00:24:47,231
code that I have just shown you. So, because of how JavaScript is dynamically typed, we

00:24:47,231 --> 00:24:53,640
have to use JIT compilation to get any kind of speed speed. Because of how the optimising

00:24:53,640 --> 00:25:01,970
compilers under JIT work, your JavaScript code, if it's statically typed, then that's

00:25:01,970 --> 00:25:04,010
the best thing you can do for the compilers. Thank you. [Cheering].

00:25:04,010 --> 00:25:05,010
>> Thank you very much to Franziska for the excellent introduction to how the engine works

00:25:05,010 --> 00:25:06,010
in JavaScript - very interesting topic. I think when we work practically with JavaScript,

00:25:06,010 --> 00:25:07,010
we don't know what is going on on the system level, we don't know how our code is being

00:25:07,010 --> 00:25:08,010
compiled. We're going to start again in just a couple of minutes with our next talk, and,

00:25:08,010 --> 00:25:09,010
if anyone is here what is curious going on in the other track, we have Ben Vinegar talking

00:25:09,010 --> 00:25:10,010
about source maps. Graph QL has put fliers out on the table. They have a discount code.

00:25:10,010 --> 00:25:11,010
It is another conference that's going to be taking place just across the river on 21st

00:25:11,010 --> 00:25:11,510

YouTube URL: https://www.youtube.com/watch?v=p-iiEDtpy6I


