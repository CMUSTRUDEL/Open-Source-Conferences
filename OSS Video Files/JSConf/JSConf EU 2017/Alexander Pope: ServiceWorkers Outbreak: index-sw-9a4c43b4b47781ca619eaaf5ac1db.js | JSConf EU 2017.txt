Title: Alexander Pope: ServiceWorkers Outbreak: index-sw-9a4c43b4b47781ca619eaaf5ac1db.js | JSConf EU 2017
Publication date: 2017-05-16
Playlist: JSConf EU 2017
Description: 
	http://2017.jsconf.eu/speakers/alexander-pope-outbreak-indexsw9a4c43b4b4778e7d1ca619eaaf5ac1dbjs.html

August 30, 2016, was by all accounts an average Tuesday, and release number 523 just a simple re-factor, but something went horribly wrong that day: bad code escaped from the office, and it quickly spread to infect tens of thousands, giving rise to a hoard of zombie ServiceWorkers!

This is a disaster about a typo. This is a thriller about technology out of control. This is a tragedy about wasted CPU cycles. This is a cautionary tale about living in the age of ServiceWorker.
Captions: 
	00:00:00,170 --> 00:00:01,170
Outbreak: index-sw-9a4c43b4b4778e7d1ca619eaaf5ac1db.js Alexander Pope

00:00:45,210 --> 00:00:46,210
ALEXANDER: All right.

00:00:46,210 --> 00:00:47,210
[Applause] There we are.

00:00:47,210 --> 00:00:48,210
Do we have some music?

00:00:48,210 --> 00:00:49,210
There we go.

00:00:49,210 --> 00:00:50,210
Hello, welcome to the last Side Track event.

00:00:50,210 --> 00:00:55,090
My name is Alexander Pope and I'm really excited to be here today to share this story with

00:00:55,090 --> 00:00:56,260
all of you.

00:00:56,260 --> 00:01:00,279
[spooky music] It's a scary story so I hope nobody has a

00:01:00,279 --> 00:01:07,110
weak stomach, and like the scariest stories, it's all true.

00:01:07,110 --> 00:01:08,110
Mostly.

00:01:08,110 --> 00:01:10,229
I'm going to try something here.

00:01:10,229 --> 00:01:15,140
I am going to try and actually say the title of the talk.

00:01:15,140 --> 00:01:18,310
This is Outbreak: index-sw-9a4c43b4b4778e7d1ca619eaaf5ac1db.js.

00:01:18,310 --> 00:01:51,530
[Cheering] If this wasn't attached to my head, I would

00:01:51,530 --> 00:01:57,999
just drop the mic and go, but I have a story to tell and here we go.

00:01:57,999 --> 00:02:05,270
In the corner of a functional though charmless open office, Alexander sits at his desk staring

00:02:05,270 --> 00:02:29,620
intently

00:02:29,620 --> 00:02:33,620
at the screen.

00:02:33,620 --> 00:02:39,540
A phone rings in the background, momentarily disrupting the early morning stillness.

00:02:39,540 --> 00:02:47,620
[Inaudible announcement] The following morning, in a cramped meeting

00:02:47,620 --> 00:02:54,270
room, Alexander enthusiastically sketches on a wall-mounted white board.

00:02:54,270 --> 00:03:15,160
[Inaudible film] >> Alexander, we hope you are aware ... [inaudible]

00:03:15,160 --> 00:03:16,160
something is broken.

00:03:16,160 --> 00:03:22,470
Fix it and ship it.

00:03:22,470 --> 00:03:25,440
Just change something.

00:03:25,440 --> 00:03:32,260
Within 24 hours at least.

00:03:32,260 --> 00:03:34,560
[inaudible].

00:03:34,560 --> 00:03:41,990
ALEXANDER: Days later, Alexander hurries, cleans up commits while rebasing a git merge

00:03:41,990 --> 00:03:42,990
for release.

00:03:42,990 --> 00:03:48,670
The desk is littered with disposable coffee cups.

00:03:48,670 --> 00:04:13,700
[Inaudible film] >> Alexander, have

00:04:13,700 --> 00:04:21,170
you forgotten about something?

00:04:21,170 --> 00:04:24,330
ALEXANDER: Several weeks passed.

00:04:24,330 --> 00:04:31,630
In the quiet of a darkened living room Alexander anxiously scans error logs.

00:04:31,630 --> 00:04:42,410
Notification alerts pierce the silence.

00:04:42,410 --> 00:04:50,360
>> Function ... I don't get it.

00:04:50,360 --> 00:05:07,530
How can that all be ... this specification is unstable, as you are well aware.

00:05:07,530 --> 00:05:11,050
>> Shut up.

00:05:11,050 --> 00:05:12,810
Focus.

00:05:12,810 --> 00:05:19,090
ALEXANDER: One week later, back at the office, Alexander puzzles over the latest error logs.

00:05:19,090 --> 00:05:20,230
>> That's weird.

00:05:20,230 --> 00:05:30,700
... it's just not possible.

00:05:30,700 --> 00:05:42,150
ALEXANDER: More weeks pass.

00:05:42,150 --> 00:05:54,440
Visibly tired and distraught, Alexander slumps over his computer at

00:05:54,440 --> 00:05:56,470
the dinner table.

00:05:56,470 --> 00:06:07,070
A baby cries in

00:06:07,070 --> 00:06:08,530
the background.

00:06:08,530 --> 00:06:19,539
>> This is starting to freak me out [inaudible] ...

00:06:19,539 --> 00:06:34,480
>> Don't be ridiculous, in a year or two ... [inaudible from film] ...

00:06:34,480 --> 00:06:37,270
ALEXANDER: Ooh!

00:06:37,270 --> 00:06:53,550
That

00:06:53,550 --> 00:06:56,160
gives me chills every time I think about it.

00:06:56,160 --> 00:06:59,650
Permanently installed, that is a horror story.

00:06:59,650 --> 00:07:05,490
You know, there's something strangely compelling about a disaster story.

00:07:05,490 --> 00:07:11,000
Sometimes it's the disaster as an act of God, other times it's man-made but the best of

00:07:11,000 --> 00:07:18,250
them have this in common: the central characters are faced with difficult, sometimes impossible

00:07:18,250 --> 00:07:20,050
moral dilemmas.

00:07:20,050 --> 00:07:26,050
As viewers we ask ourselves how we would behave in similar circumstances.

00:07:26,050 --> 00:07:28,140
Could we handle the pressure?

00:07:28,140 --> 00:07:30,770
Would we make the same choices?

00:07:30,770 --> 00:07:34,640
Would we do the right thing?

00:07:34,640 --> 00:07:39,650
Some of my favourite disaster stories are about epidemics, or disease outbreaks that

00:07:39,650 --> 00:07:47,890
threaten humanity: think Night of the Living Dead, 28 Days Later, 12 Monkeys, Children

00:07:47,890 --> 00:07:51,560
of Men, and many others.

00:07:51,560 --> 00:07:56,270
Many of these stories and the entire zombie genre in fact were inspired by the book I

00:07:56,270 --> 00:08:00,270
Am Legend by Richard Matheson.

00:08:00,270 --> 00:08:04,680
The book has been adapted three times for the big screen and my favourite version is

00:08:04,680 --> 00:08:08,440
The Omega Man from 1971 starring Charlton Heston.

00:08:08,440 --> 00:08:12,580
I love it because it is just so 70s.

00:08:12,580 --> 00:08:17,400
And Charlton Heston just can't stop delivering cheesy one-liners, no matter what happens

00:08:17,400 --> 00:08:23,730
to him.

00:08:23,730 --> 00:08:43,529
[Inaudible film] ALEXANDER: The antagonists in this version

00:08:43,529 --> 00:08:51,129
are more human than the vampires and zombies of the others, and I like that this cult of

00:08:51,129 --> 00:08:56,839
albino mutants spends all of its time raging against the science and technology that they

00:08:56,839 --> 00:08:59,810
blame for their fate.

00:08:59,810 --> 00:09:03,490
In most zombie stories they don't plan on turning people into zombies, it just sort

00:09:03,490 --> 00:09:09,600
of happens by accident and it's usually because technology goes a little bit out of control.

00:09:09,600 --> 00:09:17,120
Now, as I struggled against my own mob of zombie service workers I realised that there

00:09:17,120 --> 00:09:21,680
is a real risk of triggering technological backlash.

00:09:21,680 --> 00:09:29,079
Now, as web developers we are constantly tempted to throw more and more technology at the problem

00:09:29,079 --> 00:09:36,180
but if we aren't careful we might end up pissing off our users, making things that are slow,

00:09:36,180 --> 00:09:41,029
annoying, inefficient, insecure, or even just full of bugs.

00:09:41,029 --> 00:09:45,880
It really risks alienating the people we are trying to make happy.

00:09:45,880 --> 00:09:52,130
Now, for the next 11.5 minutes things are going to get a little serious.

00:09:52,130 --> 00:09:57,740
Not like, "Oh my God, this is serious!" kind of serious, but more like the grown-up kind

00:09:57,740 --> 00:09:59,629
of serious.

00:09:59,629 --> 00:10:04,579
There will be a lot of information that may or may not be relevant to you now, but don't

00:10:04,579 --> 00:10:11,480
worry, if one day you find out you need it you can always find it on GitHub.

00:10:11,480 --> 00:10:15,360
Before we first go too deep, just in case some of you are wondering what the hell a

00:10:15,360 --> 00:10:19,820
service worker actually is, here are the basics.

00:10:19,820 --> 00:10:25,220
A service worker is a script installed via a web page that runs in the background.

00:10:25,220 --> 00:10:30,829
It gives you the power to control asset caching, to handle requests from pages and workers

00:10:30,829 --> 00:10:37,779
when offline, and to respond to incoming push notifications.

00:10:37,779 --> 00:10:43,910
Service worker is a type of worker, so it doesn't have access to the DOM, AJAX or local

00:10:43,910 --> 00:10:49,899
storage but it does have post message for communicating with clients, fetch for accessing

00:10:49,899 --> 00:10:55,089
the network and IndexedDB for storage.

00:10:55,089 --> 00:11:00,569
Service worker has a life cycle which starts with registration, when the file is downloaded

00:11:00,569 --> 00:11:08,000
and executed; it then enters the installation phase when the install event is triggered,

00:11:08,000 --> 00:11:12,810
and if there is already an older version installed and it's actively controlling clients, the

00:11:12,810 --> 00:11:20,509
service worker enters what's called the waiting phase until all clients have disconnected.

00:11:20,509 --> 00:11:25,990
When it's safe to start controlling new clients the activate event is triggered and the service

00:11:25,990 --> 00:11:29,250
worker enters the activation phase.

00:11:29,250 --> 00:11:36,000
Finally, when the activation phase is over, the service worker is known as running, and

00:11:36,000 --> 00:11:40,990
able respond to client network requests via the fetch event handler.

00:11:40,990 --> 00:11:48,100
Now, service worker also has new toys including a cache API for storing network requests and

00:11:48,100 --> 00:11:53,920
responses, a clients API for managing connective clients, which are pages and workers, and

00:11:53,920 --> 00:11:59,949
a push API for managing push notifications from remote servers.

00:11:59,949 --> 00:12:03,819
So with that out of the way we can get down to business.

00:12:03,819 --> 00:12:09,139
How do we avoid the next zombie apocalypse?

00:12:09,139 --> 00:12:14,709
Or here are some things I wish I had known before I started with service worker.

00:12:14,709 --> 00:12:20,959
Rule number 1, in no particular order, understand how promises work but don't use them, use

00:12:20,959 --> 00:12:28,579
async/await if you can instead.

00:12:28,579 --> 00:12:33,959
Using async/await can really help make things more legible.

00:12:33,959 --> 00:12:38,170
Although very few browsers support native async/await, it's just syntactic sugar over

00:12:38,170 --> 00:12:43,519
generators and promises, and every one that supports service worker will also support

00:12:43,519 --> 00:12:48,069
async/await.

00:12:48,069 --> 00:12:53,580
Using Babel with the async-to-generator plugin will do the transformation for you but be

00:12:53,580 --> 00:13:03,660
aware that this code cannot be uglified - you should use Babili which is another plugin

00:13:03,660 --> 00:13:08,100
for Babel that you can use for minification instead.

00:13:08,100 --> 00:13:23,220
Two, don't use while the page is loading.

00:13:23,220 --> 00:13:29,260
Wait for the window on load event or some other signal before registering.

00:13:29,260 --> 00:13:33,329
Rule number three: know your dependencies.

00:13:33,329 --> 00:13:39,809
During the installation phase, passing a promise to event.waituntil will delay service worker

00:13:39,809 --> 00:13:42,269
activation until it's resolved.

00:13:42,269 --> 00:13:48,709
However, if it's rejected, the service worker will be thrown away and marked redundant.

00:13:48,709 --> 00:13:54,059
Now, since the installation phase is when you want to pre-cache all your assets, any

00:13:54,059 --> 00:13:59,089
asset that fails to load will cause a rejection.

00:13:59,089 --> 00:14:03,619
In this sense, you can think of pre-cached assets as hard dependencies, so you should

00:14:03,619 --> 00:14:06,699
beware.

00:14:06,699 --> 00:14:11,410
Rule number 4: cache smarter.

00:14:11,410 --> 00:14:17,920
When upgrading a service worker, it's common practice to pre-cache assets in a new, uniquely

00:14:17,920 --> 00:14:23,410
named cache before deleting any old caches during the activation phase.

00:14:23,410 --> 00:14:29,839
Now, in most cases this is a really good approach but if you release very often you can avoid

00:14:29,839 --> 00:14:38,559
wasting storage and bandwidth by only fetching new assets and then recycling the old ones.

00:14:38,559 --> 00:14:43,139
Now you can first create more than one cache to separate versioned assets from those that

00:14:43,139 --> 00:14:50,079
won't change, and copy versioned assets from the old cache if they already exist.

00:14:50,079 --> 00:14:59,749
Now, obviously this is not as neat as cache at all, but it is much more efficient.

00:14:59,749 --> 00:15:07,569
Rule number 5: avoid forcing activation for major changes.

00:15:07,569 --> 00:15:13,939
Forcing activation after an update can break already connected clients if the new service

00:15:13,939 --> 00:15:18,490
worker is very different from the old version.

00:15:18,490 --> 00:15:24,360
So you can avoid calling self-.skipWaiting after a major change and consider actually

00:15:24,360 --> 00:15:32,380
prompting the user to trigger a manual refresh, and that way there won't be any breakage.

00:15:32,380 --> 00:15:37,399
Rule number 6, use a library for messaging.

00:15:37,399 --> 00:15:41,750
Sending messages between a service worker and its clients is actually kind of weird.

00:15:41,750 --> 00:15:49,970
The API is a bit hard to work with but using a library like Swivel makes it a lot easier.

00:15:49,970 --> 00:15:55,110
Number 7: never rename the service worker file.

00:15:55,110 --> 00:15:59,110
Once the service worker has been installed and activated, it will need to be updated,

00:15:59,110 --> 00:16:06,309
of course, but often we cache the HTML file that triggers the registration so it would

00:16:06,309 --> 00:16:13,000
be difficult to install a new service worker if it had a new name from that HTML file.

00:16:13,000 --> 00:16:17,420
So you can avoid this chicken and egg problem by making sure that the service worker script

00:16:17,420 --> 00:16:22,820
file name is never unique, it's always the same.

00:16:22,820 --> 00:16:27,930
Along with that, rule number 8: you have to set correct cache headers because, of course,

00:16:27,930 --> 00:16:32,809
if the service worker script file names are static and the browser fetches the script

00:16:32,809 --> 00:16:37,519
through the browser cache before going to the network you will need to correctly set

00:16:37,519 --> 00:16:42,959
cache control headers to prevent the browser from caching outdated versions.

00:16:42,959 --> 00:16:51,220
As a precaution, to avoid accidentally installing a service worker for days, weeks or months,

00:16:51,220 --> 00:16:58,120
caches will be bypassed if the script is older than 24 hours, regardless of what you set.

00:16:58,120 --> 00:17:04,339
Now, cash invalidation is always tricky as we know, so in the future browsers will be

00:17:04,339 --> 00:17:09,890
using cache busting always by default to ensure that the service worker script files are always

00:17:09,890 --> 00:17:13,200
up-to-date.

00:17:13,200 --> 00:17:17,990
Rule number 9: invalidate your service worker when updated.

00:17:17,990 --> 00:17:22,570
The service worker will be updated if it is byte different from previous versions.

00:17:22,570 --> 00:17:28,630
Now, a simple pattern you can use to treat the service worker as a boot loader by using

00:17:28,630 --> 00:17:34,820
import scripts and version dependencies, and that's all you have to have in your service

00:17:34,820 --> 00:17:35,870
worker file.

00:17:35,870 --> 00:17:40,970
Rule number 10: add a feature flag or kill switch.

00:17:40,970 --> 00:17:44,490
This one is important.

00:17:44,490 --> 00:17:50,670
Having an easy way to disable existing service workers is a life saver really.

00:17:50,670 --> 00:17:55,830
Add a feature flag to control on registration.

00:17:55,830 --> 00:18:04,160
Keep a no op service worker handy in case you have to have a quick deploy, or even better,

00:18:04,160 --> 00:18:13,040
have a service worker phone home to check its version then force an update if it's outdated.

00:18:13,040 --> 00:18:16,920
Rule number 11: don't cache bad responses.

00:18:16,920 --> 00:18:22,521
You should always check the ok property of the response object returned from a fetch

00:18:22,521 --> 00:18:29,560
call before you add it to your cache because HTTP response codes, they don't cause the

00:18:29,560 --> 00:18:31,560
promise to reject.

00:18:31,560 --> 00:18:33,530
So you have to manually check.

00:18:33,530 --> 00:18:39,150
Rule 12: don't store global state.

00:18:39,150 --> 00:18:42,010
Storing global state in a service worker is really bad.

00:18:42,010 --> 00:18:43,010
Bad idea.

00:18:43,010 --> 00:18:48,290
Because code outside of the event handlers, like install, activate and fetch, they run

00:18:48,290 --> 00:18:52,660
each time the service worker is started, but the service worker is stopped and started

00:18:52,660 --> 00:19:01,000
many times over its lifetime as the - yes, the device manages battery and other resources,

00:19:01,000 --> 00:19:07,430
so it's really important not to store global state because it will be destroyed at unexpected

00:19:07,430 --> 00:19:10,280
times.

00:19:10,280 --> 00:19:15,830
Rule number 13: guard against missing APIs.

00:19:15,830 --> 00:19:22,920
A number of API methods were added in later browser versions, so it's wise to test whether

00:19:22,920 --> 00:19:26,240
they exist before calling them.

00:19:26,240 --> 00:19:31,060
The following methods were added in later versions of Chrome, for example, after service

00:19:31,060 --> 00:19:34,960
worker was launched.

00:19:34,960 --> 00:19:39,720
Rule number 14, this is an important one too: test your service worker.

00:19:39,720 --> 00:19:45,170
Now, because of the installation life cycle and the unique environment that they run in,

00:19:45,170 --> 00:19:48,000
service workers are really difficult to test.

00:19:48,000 --> 00:19:53,060
As always, running tests in real browsers with real code is going to give you the most

00:19:53,060 --> 00:19:59,260
realistic results but unfortunately there aren't yet any good tools to help with browser

00:19:59,260 --> 00:20:00,690
tests.

00:20:00,690 --> 00:20:05,590
But the methodology well laid out in this article by Matt Gaunt of Google.

00:20:05,590 --> 00:20:07,490
Highly recommended.

00:20:07,490 --> 00:20:12,461
Now, automating browser tests comes with its own set of challenges as some of you will

00:20:12,461 --> 00:20:18,550
know so it's best to test as much as possible.

00:20:18,550 --> 00:20:26,000
Fortunately there are some tools available to easily mock and test service worker environment.

00:20:26,000 --> 00:20:31,870
As part of their service workers tool chain Pinterest has developed helper functions and

00:20:31,870 --> 00:20:39,150
a mock you can use to make the Node.js global look more like a service worker.

00:20:39,150 --> 00:20:45,890
I've also released a project called sw-test-env and it's a little more thorough mock of the

00:20:45,890 --> 00:20:53,910
service worker environment and allows you to run scripts in an isolated sandboxed context.

00:20:53,910 --> 00:20:59,160
With it, you can inspect the properties of the service worker scope, manually trigger

00:20:59,160 --> 00:21:06,081
events, post message between clients and service worker instances, use import scripts, fetch

00:21:06,081 --> 00:21:13,680
real or mocked data, use indexedDB storage and require modules from inside your service

00:21:13,680 --> 00:21:17,040
worker file without a build script.

00:21:17,040 --> 00:21:23,700
Now, here is an example from one of the unit tests I wrote for my slides because I write

00:21:23,700 --> 00:21:25,670
tests for my slides.

00:21:25,670 --> 00:21:33,150
First, we load the service worker file; then we create a populate an old version of the

00:21:33,150 --> 00:21:34,820
cache.

00:21:34,820 --> 00:21:41,310
Then we trigger the install phase; and finally we read from the cache to verify the old version

00:21:41,310 --> 00:21:43,310
has in fact been recycled.

00:21:43,310 --> 00:21:49,160
Now, I think it could be a really useful tool so if you get the chance, take a look and

00:21:49,160 --> 00:21:52,540
let me know what you think.

00:21:52,540 --> 00:21:58,400
Finally, rule number 15: use a service worker generator tool.

00:21:58,400 --> 00:22:02,820
If you don't want to get your hands dirty with all these details, you can use one of

00:22:02,820 --> 00:22:04,900
several service worker generator tools.

00:22:04,900 --> 00:22:08,150
There are lots of good ones out there.

00:22:08,150 --> 00:22:11,220
But you should still write tests.

00:22:11,220 --> 00:22:17,630
So, now that we are educated, you might be wondering what happened.

00:22:17,630 --> 00:22:21,120
What was the recipe for this disaster?

00:22:21,120 --> 00:22:28,810
Simply, it was one part ignorance, one part stupidity and one part mystery.

00:22:28,810 --> 00:22:36,720
Now, we know that versions of Chrome before 46 didn't support cache at all.

00:22:36,720 --> 00:22:42,590
So any client missing that API should have caused the promise return to the install event

00:22:42,590 --> 00:22:45,320
to reject with a syntax error.

00:22:45,320 --> 00:22:49,090
Undefined as not a function.

00:22:49,090 --> 00:22:55,050
Unfortunately a catch was also added to the promised chain in order to report install

00:22:55,050 --> 00:23:00,430
errors, but the error was never thrown further up the chain.

00:23:00,430 --> 00:23:06,700
And the service worker was installed instead of thrown away.

00:23:06,700 --> 00:23:13,160
That explains how some clients became infected with a broken service worker, and based on

00:23:13,160 --> 00:23:19,410
the number of errors reported it's clear that most of the infected were soon cured, but

00:23:19,410 --> 00:23:27,480
it's still a mystery to me as to why or how a small number became permanently cursed.

00:23:27,480 --> 00:23:34,130
Now, even after trying to install an empty service worker, then eventually a kill switch

00:23:34,130 --> 00:23:39,750
to unregister it completely, that broken file still haunts me and probably will until every

00:23:39,750 --> 00:23:43,270
one of those devices is retired.

00:23:43,270 --> 00:23:48,830
[Laughter] Now, even if the details are lost on you,

00:23:48,830 --> 00:23:58,080
I hope I've made my case that service worker is a complex beast.

00:23:58,080 --> 00:24:03,860
It is awesome, but it's kind of awesome like the way a chainsaw is awesome.

00:24:03,860 --> 00:24:08,270
[Laughter] It's really powerful, and really easy to lose

00:24:08,270 --> 00:24:13,120
a hand, a foot, maybe some toes.

00:24:13,120 --> 00:24:20,640
But don't be afraid because a lot of people use chainsaws every day without spilling blood.

00:24:20,640 --> 00:24:29,220
They take precautions, they dress for the job and they read the instructions.

00:24:29,220 --> 00:24:34,600
Now that I know more, now that I have some tools for testing, I'm ready to get back into

00:24:34,600 --> 00:24:41,020
the lab and I hope that everyone here is also ready because service worker really is the

00:24:41,020 --> 00:24:48,530
best thing since AJAX and I know everyone remembers how that turned out.

00:24:48,530 --> 00:24:53,330
So thank you and remember to kill your bugs and zombies but not your dreams.

00:24:53,330 --> 00:24:54,500
Thank you.

00:24:54,500 --> 00:24:56,860
[Applause] REMY: Awesome stuff.

00:24:56,860 --> 00:24:59,220

YouTube URL: https://www.youtube.com/watch?v=CPP9ew4Co0M


