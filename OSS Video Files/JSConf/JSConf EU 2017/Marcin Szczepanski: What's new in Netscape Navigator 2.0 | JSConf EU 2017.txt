Title: Marcin Szczepanski: What's new in Netscape Navigator 2.0 | JSConf EU 2017
Publication date: 2017-06-02
Playlist: JSConf EU 2017
Description: 
	http://2017.jsconf.eu/speakers/2017-03-23-marc-szczepanski-whats-new-in-netscape-navigator-20.html

How can we know how good we’ve got it without really understanding how good we used to have it? JavaScript was first released with Netscape Navigator 2.0 in September 1995 - can an application from today exist in the browsers of yesterday?

Just how different was the development experience then compared to now? Is it feasible to implement a modern Web application in the browser that pioneered client-side development? What would code from 1995 look like rewritten with today’s JavaScript?

In this talk I will answer those questions by implementing TodoMVC in some early browsers. When we’re through, we’ll leave with an appreciation of just how far the Web and Web development have come in the last 20 years.
Captions: 
	00:00:00,110 --> 00:00:11,859
[Music]

00:00:08,730 --> 00:00:11,859
[Applause]

00:00:13,510 --> 00:00:27,559
[Music]

00:00:29,300 --> 00:00:34,620
so what were you doing in 1995 hands up

00:00:32,790 --> 00:00:37,260
if you're alive in 1995

00:00:34,620 --> 00:00:40,710
okay good hands up you're on the

00:00:37,260 --> 00:00:42,180
internet already okay a few good hands

00:00:40,710 --> 00:00:45,390
up if you're getting paid to work on the

00:00:42,180 --> 00:00:47,150
internet like commercially No a couple

00:00:45,390 --> 00:00:49,980
of hands okay

00:00:47,150 --> 00:00:52,080
1995 this browser Netscape Navigator 2

00:00:49,980 --> 00:00:53,730
was released and amongst other things

00:00:52,080 --> 00:00:55,590
did include a little language you might

00:00:53,730 --> 00:00:57,720
have heard of called JavaScript now you

00:00:55,590 --> 00:01:00,330
might be thinking why at a conference

00:00:57,720 --> 00:01:01,950
where people are talking about the

00:01:00,330 --> 00:01:03,810
future of JavaScript future front-end

00:01:01,950 --> 00:01:05,820
development I'm talking about a 20 year

00:01:03,810 --> 00:01:08,040
old browser mostly just seemed like a

00:01:05,820 --> 00:01:10,140
fun idea kind of look back and try and

00:01:08,040 --> 00:01:12,300
implement something that we might build

00:01:10,140 --> 00:01:15,270
today in the browser in a old browser

00:01:12,300 --> 00:01:16,890
that wasn't really designed for it and

00:01:15,270 --> 00:01:18,899
so really just a bit of nostalgia

00:01:16,890 --> 00:01:21,840
because I was kind of around for not

00:01:18,899 --> 00:01:23,820
quite this early but early enough mostly

00:01:21,840 --> 00:01:24,960
though I'm getting old and you kids

00:01:23,820 --> 00:01:26,820
these days don't know how good you've

00:01:24,960 --> 00:01:30,240
got it with all the dev tools and

00:01:26,820 --> 00:01:32,610
everything you've got access to it my

00:01:30,240 --> 00:01:33,990
journey with JavaScript started my first

00:01:32,610 --> 00:01:38,340
job out of university probably about

00:01:33,990 --> 00:01:40,170
1999 and commonly we use JavaScript to

00:01:38,340 --> 00:01:41,610
implement this kind of navigation you

00:01:40,170 --> 00:01:43,470
couldn't do this with CSS at the time

00:01:41,610 --> 00:01:44,880
you had to use JavaScript this is

00:01:43,470 --> 00:01:49,619
actually one I found on web archive that

00:01:44,880 --> 00:01:52,020
I built probably about 2002 or so and so

00:01:49,619 --> 00:01:54,149
when I started that first job one of my

00:01:52,020 --> 00:01:56,190
co-workers had built this library that

00:01:54,149 --> 00:01:57,420
could work in all the browser's we have

00:01:56,190 --> 00:02:00,750
to support which at the time would have

00:01:57,420 --> 00:02:02,970
been like IA 5 ie6 netscape for Netscape

00:02:00,750 --> 00:02:05,459
6 or with slightly different ways of

00:02:02,970 --> 00:02:06,000
doing dynamic content and so it was

00:02:05,459 --> 00:02:08,009
really impressive

00:02:06,000 --> 00:02:11,340
just like how much effort you had to put

00:02:08,009 --> 00:02:13,709
in to get that working but all that

00:02:11,340 --> 00:02:17,370
still was five years after Netscape

00:02:13,709 --> 00:02:18,569
Navigator 2 so to understand why we're

00:02:17,370 --> 00:02:20,400
going to have limitations when we try

00:02:18,569 --> 00:02:22,740
and implement modern techniques in this

00:02:20,400 --> 00:02:25,290
old browser it's worth looking back at

00:02:22,740 --> 00:02:27,110
what this browser what JavaScript was

00:02:25,290 --> 00:02:29,520
created for in the first place even

00:02:27,110 --> 00:02:32,849
though it's in the name JavaScript has

00:02:29,520 --> 00:02:35,730
very little to do with Java was just

00:02:32,849 --> 00:02:37,800
really Netscape wanted to take advantage

00:02:35,730 --> 00:02:39,810
of the popularity of Java at the time

00:02:37,800 --> 00:02:41,580
with Java applets and they got a

00:02:39,810 --> 00:02:44,580
trademark agreement with Sun to use the

00:02:41,580 --> 00:02:46,740
Java name during development javascript

00:02:44,580 --> 00:02:48,660
was actually called mocker initially and

00:02:46,740 --> 00:02:50,850
then live script in the first navigator

00:02:48,660 --> 00:02:55,200
betas before it finally came out as

00:02:50,850 --> 00:02:57,540
javascript the Netscape 2 documentation

00:02:55,200 --> 00:02:59,070
described JavaScript as a compact object

00:02:57,540 --> 00:03:00,770
based scripting language for developing

00:02:59,070 --> 00:03:02,670
client and server internet applications

00:03:00,770 --> 00:03:04,170
that's what I found interesting I didn't

00:03:02,670 --> 00:03:06,450
realize this that server internet

00:03:04,170 --> 00:03:08,730
applications were actually something

00:03:06,450 --> 00:03:11,280
that was intended for JavaScript from

00:03:08,730 --> 00:03:14,430
the beginning so Netscape had something

00:03:11,280 --> 00:03:16,230
called Netscape Enterprise Server and as

00:03:14,430 --> 00:03:17,670
part of that there was a component

00:03:16,230 --> 00:03:20,130
called livewire which let you write

00:03:17,670 --> 00:03:23,520
server-side JavaScript it was more like

00:03:20,130 --> 00:03:25,230
PHP than no j-f in that you had a HTML

00:03:23,520 --> 00:03:26,220
page with a server tag and in that

00:03:25,230 --> 00:03:27,840
server tag you could write the

00:03:26,220 --> 00:03:30,120
JavaScript that would be evaluated on

00:03:27,840 --> 00:03:32,400
the server to make database calls and

00:03:30,120 --> 00:03:33,900
things like that but that kind of died

00:03:32,400 --> 00:03:36,090
away with Netscape Enterprise Server and

00:03:33,900 --> 00:03:38,760
it wasn't for another whether it is 10

00:03:36,090 --> 00:03:42,390
15 years until back in JavaScript became

00:03:38,760 --> 00:03:46,350
a thing again mostly what javascript was

00:03:42,390 --> 00:03:49,010
used for was performed elevation as now

00:03:46,350 --> 00:03:53,220
back then Network round trips were

00:03:49,010 --> 00:03:54,450
expensive potentially and so anytime you

00:03:53,220 --> 00:03:55,860
could save the user by telling them

00:03:54,450 --> 00:04:00,360
they'd fill in the form incorrectly

00:03:55,860 --> 00:04:01,680
was very helpful and so at the time

00:04:00,360 --> 00:04:03,480
though you couldn't do any nice

00:04:01,680 --> 00:04:05,280
client-side stuff you basically had to

00:04:03,480 --> 00:04:09,300
pop up an alert to tell them what they'd

00:04:05,280 --> 00:04:11,910
filled in so I didn't want to just do

00:04:09,300 --> 00:04:14,100
something aim for something simple so I

00:04:11,910 --> 00:04:16,769
wanted to set myself a goal to try and

00:04:14,100 --> 00:04:19,530
build something in Netscape 2 that I

00:04:16,769 --> 00:04:22,199
knew was going to be challenging and so

00:04:19,530 --> 00:04:24,180
I decided to choose to do MVC mainly

00:04:22,199 --> 00:04:26,370
because to-do lists are familiar for

00:04:24,180 --> 00:04:28,710
everyone for those not familiar with to

00:04:26,370 --> 00:04:31,500
do MVC it's coming out near project

00:04:28,710 --> 00:04:33,720
started by a teaser just spoke and it's

00:04:31,500 --> 00:04:36,090
basically a repository of to do MVC

00:04:33,720 --> 00:04:38,850
basis to do lists implemented in various

00:04:36,090 --> 00:04:40,319
frameworks I knew I wasn't going to be

00:04:38,850 --> 00:04:42,930
able to get it to look like this or I

00:04:40,319 --> 00:04:44,960
wasn't even sure how how I was going to

00:04:42,930 --> 00:04:48,140
be able to get in terms of functionality

00:04:44,960 --> 00:04:50,780
but I gave it a shot anyway

00:04:48,140 --> 00:04:53,890
so I faced some early challenges before

00:04:50,780 --> 00:04:56,480
I even started working on the to-do list

00:04:53,890 --> 00:04:58,580
first of all I have basically so I got

00:04:56,480 --> 00:05:01,850
my virtual machine setup I got Netscape

00:04:58,580 --> 00:05:03,260
running and one thing I couldn't do one

00:05:01,850 --> 00:05:05,360
thing I want to do was just try and load

00:05:03,260 --> 00:05:07,370
a script show an alert box just to make

00:05:05,360 --> 00:05:08,570
sure everything was working and so I had

00:05:07,370 --> 00:05:11,210
a web server running on the host machine

00:05:08,570 --> 00:05:14,830
which is how I could still develop on my

00:05:11,210 --> 00:05:16,790
Mac and just load pages on Windows and

00:05:14,830 --> 00:05:20,090
so the life of me I just couldn't get it

00:05:16,790 --> 00:05:21,740
to load like it would the script wasn't

00:05:20,090 --> 00:05:23,600
loading looking my web server logs there

00:05:21,740 --> 00:05:25,280
was no request for the script and I

00:05:23,600 --> 00:05:26,990
wasn't sure was going on eventually

00:05:25,280 --> 00:05:29,960
somewhere in the documentation I found

00:05:26,990 --> 00:05:31,490
that the source attribute wasn't

00:05:29,960 --> 00:05:34,430
actually supported for the script tag in

00:05:31,490 --> 00:05:35,800
Netscape to ASCII all scripting had to

00:05:34,430 --> 00:05:38,320
be in line

00:05:35,800 --> 00:05:41,060
the next challenge was going to be that

00:05:38,320 --> 00:05:44,270
that there was no Dom API there was no

00:05:41,060 --> 00:05:46,310
way to rewrite elements that were on the

00:05:44,270 --> 00:05:49,880
page or even access most elements on the

00:05:46,310 --> 00:05:52,280
page basically Netscape like most

00:05:49,880 --> 00:05:54,020
browsers would render the page you could

00:05:52,280 --> 00:05:55,670
have script tags on the page while it

00:05:54,020 --> 00:05:57,680
was rendering and write out dynamic

00:05:55,670 --> 00:05:59,480
content but once the page was finished

00:05:57,680 --> 00:06:02,060
if you say as a result of an event

00:05:59,480 --> 00:06:05,360
handler or a set timeout you did another

00:06:02,060 --> 00:06:06,770
document right then it would clear out

00:06:05,360 --> 00:06:07,250
what was on the page and start a new

00:06:06,770 --> 00:06:09,200
page

00:06:07,250 --> 00:06:11,030
I just want to cheat by just having my

00:06:09,200 --> 00:06:13,760
whole dynamic app being a document dot

00:06:11,030 --> 00:06:15,290
write I didn't think that'd be fair so

00:06:13,760 --> 00:06:16,880
before I talk about how I actually

00:06:15,290 --> 00:06:19,610
implemented what I did let's just have a

00:06:16,880 --> 00:06:23,930
look at how far I go so this is to do

00:06:19,610 --> 00:06:25,730
MVC running in Netscape 2 so dynamic so

00:06:23,930 --> 00:06:28,160
you can actually check and uncheck items

00:06:25,730 --> 00:06:32,770
and the content updates you can add new

00:06:28,160 --> 00:06:35,690
items I need to relax after this

00:06:32,770 --> 00:06:39,140
filtering works you can clear the

00:06:35,690 --> 00:06:41,720
completed items yeah so the basics are

00:06:39,140 --> 00:06:43,790
there that's like that

00:06:41,720 --> 00:06:45,050
so let's rather than just showing this

00:06:43,790 --> 00:06:47,840
let's talk about how it was actually

00:06:45,050 --> 00:06:50,540
implemented the key to all this was

00:06:47,840 --> 00:06:51,980
frame sets for those not familiar with

00:06:50,540 --> 00:06:53,330
frame sets and you may not be if you

00:06:51,980 --> 00:06:55,610
haven't been doing web development for a

00:06:53,330 --> 00:06:58,160
long time because it's now a deprecated

00:06:55,610 --> 00:06:59,720
feature frame sets you can basically

00:06:58,160 --> 00:07:00,520
instead of a body tag on a page you can

00:06:59,720 --> 00:07:02,830
have a frame set

00:07:00,520 --> 00:07:04,060
and in there you can define frames of

00:07:02,830 --> 00:07:05,979
content to be loaded from different

00:07:04,060 --> 00:07:08,979
sources it's essentially what evolved

00:07:05,979 --> 00:07:10,509
into iframes eventually and along with

00:07:08,979 --> 00:07:12,130
that you can net frame sets and you

00:07:10,509 --> 00:07:14,440
could lay them out using these row and

00:07:12,130 --> 00:07:16,449
column attributes so it was kind of like

00:07:14,440 --> 00:07:21,009
the early days of CSS grid if you want

00:07:16,449 --> 00:07:22,210
to think about it that way and so frame

00:07:21,009 --> 00:07:24,910
sets were the key because I was working

00:07:22,210 --> 00:07:26,860
at the Netscape to dock so this is the

00:07:24,910 --> 00:07:30,490
documentation that Netscape provided for

00:07:26,860 --> 00:07:31,960
JavaScript and it was used to frame set

00:07:30,490 --> 00:07:33,639
so the navigation was on the left and

00:07:31,960 --> 00:07:34,960
then the content was on the right but

00:07:33,639 --> 00:07:36,370
one thing they had was down the bottom

00:07:34,960 --> 00:07:37,990
these height content buttons when you

00:07:36,370 --> 00:07:39,789
hit that button it would hide and show

00:07:37,990 --> 00:07:41,169
it and that was dynamic and I thinking

00:07:39,789 --> 00:07:43,419
how they do that and looking at the

00:07:41,169 --> 00:07:47,919
source for that was what inspired my

00:07:43,419 --> 00:07:51,160
solution so I built what's called a

00:07:47,919 --> 00:07:53,320
pseudo dynamic app basically you have a

00:07:51,160 --> 00:07:55,120
frame set and the state lives in the

00:07:53,320 --> 00:07:57,789
frame set itself so in the script tag

00:07:55,120 --> 00:07:59,229
you set up some JavaScript state then

00:07:57,789 --> 00:08:00,490
they have two frames and the reason for

00:07:59,229 --> 00:08:02,259
this another one of those things that

00:08:00,490 --> 00:08:03,789
took me a while to work out was that you

00:08:02,259 --> 00:08:07,090
need at least two frames otherwise a

00:08:03,789 --> 00:08:09,580
frame set won't render at all and so the

00:08:07,090 --> 00:08:11,310
content frame is the dynamic part it's

00:08:09,580 --> 00:08:15,610
written out using a combination of

00:08:11,310 --> 00:08:17,800
static HTML and document rights so to

00:08:15,610 --> 00:08:19,180
have a quick look at that she got the

00:08:17,800 --> 00:08:21,400
state and then you've got document dot

00:08:19,180 --> 00:08:23,380
write tags that access the state from

00:08:21,400 --> 00:08:25,449
the parent frame and then you've got say

00:08:23,380 --> 00:08:27,370
a button and if you want to update

00:08:25,449 --> 00:08:29,289
something in the state then you have an

00:08:27,370 --> 00:08:31,960
event handler that calls a function in

00:08:29,289 --> 00:08:34,329
the parent frame set now the key to it

00:08:31,960 --> 00:08:36,789
is this this is effectively the

00:08:34,329 --> 00:08:40,209
equivalent of document reload which

00:08:36,789 --> 00:08:41,469
didn't exist and so basically we're

00:08:40,209 --> 00:08:43,419
telling the content frame to reload

00:08:41,469 --> 00:08:46,420
itself and when it reloads itself it'll

00:08:43,419 --> 00:08:48,610
read the current state and so that's how

00:08:46,420 --> 00:08:52,209
the application works now when you think

00:08:48,610 --> 00:08:54,399
about it you've got the state the state

00:08:52,209 --> 00:08:56,020
gets reflected by the view and any

00:08:54,399 --> 00:08:57,520
actions that happen on the view get fed

00:08:56,020 --> 00:08:59,170
back into the state so essentially what

00:08:57,520 --> 00:09:01,320
we've done is implemented the flux model

00:08:59,170 --> 00:09:05,359
for Netscape to

00:09:01,320 --> 00:09:05,359
[Applause]

00:09:05,439 --> 00:09:10,249
but apart from just the challenge of how

00:09:08,269 --> 00:09:13,759
to actually set up the architecture for

00:09:10,249 --> 00:09:15,499
this there was some just challenges in

00:09:13,759 --> 00:09:17,119
terms of limitations in the language and

00:09:15,499 --> 00:09:20,029
limitations in the dev environment that

00:09:17,119 --> 00:09:21,529
I want to take you through so studies

00:09:20,029 --> 00:09:23,480
was error handling when a JavaScript

00:09:21,529 --> 00:09:25,999
error occurred you'll just get this

00:09:23,480 --> 00:09:28,609
modal pop-up you couldn't click outside

00:09:25,999 --> 00:09:30,139
it was useful I could told you what line

00:09:28,609 --> 00:09:32,600
the error was on told you what the error

00:09:30,139 --> 00:09:34,429
was conveniently they used a lot of

00:09:32,600 --> 00:09:37,609
keyword reserves a lot of keywords from

00:09:34,429 --> 00:09:40,509
C and Java so const was already reserved

00:09:37,609 --> 00:09:42,919
back in 1995 which is convenient now and

00:09:40,509 --> 00:09:44,749
yeah when you dismissed it if there was

00:09:42,919 --> 00:09:46,549
another error then you would get the

00:09:44,749 --> 00:09:49,100
next error would pop up and so for

00:09:46,549 --> 00:09:51,799
example if you visit google.com in

00:09:49,100 --> 00:09:54,949
Netscape 2 you get this whole bunch of

00:09:51,799 --> 00:09:56,359
errors from their analytics code and you

00:09:54,949 --> 00:09:57,859
basic after you can't really tell from

00:09:56,359 --> 00:09:59,540
the framerate of the gift but I'm

00:09:57,859 --> 00:10:01,759
basically just missing dialogue after

00:09:59,540 --> 00:10:05,749
dialogue after dialogue just to be able

00:10:01,759 --> 00:10:09,559
to see the page underneath so these days

00:10:05,749 --> 00:10:11,299
when we develop we're used to writing to

00:10:09,559 --> 00:10:12,889
the console like we just want to quickly

00:10:11,299 --> 00:10:13,970
output a state of a variable at a

00:10:12,889 --> 00:10:17,389
particular point in time we use the

00:10:13,970 --> 00:10:18,919
console Netscape didn't have a console

00:10:17,389 --> 00:10:20,660
there was a Java console for Java

00:10:18,919 --> 00:10:23,089
applets - right - but there was no

00:10:20,660 --> 00:10:26,410
JavaScript console so basically instead

00:10:23,089 --> 00:10:29,419
we would use alerts you'd basically

00:10:26,410 --> 00:10:30,649
pop-up alert and with the contents of

00:10:29,419 --> 00:10:32,959
your variable at a particular point in

00:10:30,649 --> 00:10:35,269
time and sometimes this was the only way

00:10:32,959 --> 00:10:37,519
to debug something in case of event

00:10:35,269 --> 00:10:40,730
handlers there was some event handlers

00:10:37,519 --> 00:10:42,139
that some event handlers would just fail

00:10:40,730 --> 00:10:43,819
silently they wouldn't even pop up the

00:10:42,139 --> 00:10:45,529
standard error dialog so you had to

00:10:43,819 --> 00:10:48,619
basically put an alert after every line

00:10:45,529 --> 00:10:50,629
of your event handler and try and work

00:10:48,619 --> 00:10:52,759
out which one fired last and from there

00:10:50,629 --> 00:10:53,899
work out what the actual error was at

00:10:52,759 --> 00:10:59,149
least you knew which line it was on

00:10:53,899 --> 00:11:01,189
probably the other thing we're used to

00:10:59,149 --> 00:11:03,410
when developing applications these days

00:11:01,189 --> 00:11:06,259
is being able to use like the elements

00:11:03,410 --> 00:11:08,239
panel in dev tools and C or the elements

00:11:06,259 --> 00:11:10,759
on the page what current state they're

00:11:08,239 --> 00:11:12,769
in but all you had was view source in

00:11:10,759 --> 00:11:13,790
there - gate - and it wasn't even view

00:11:12,769 --> 00:11:15,890
source

00:11:13,790 --> 00:11:17,510
of a frame you can only view the source

00:11:15,890 --> 00:11:19,340
of the page itself which wasn't very

00:11:17,510 --> 00:11:23,320
useful when all the page contained was a

00:11:19,340 --> 00:11:26,810
frame set and so a common technique a

00:11:23,320 --> 00:11:28,940
common technique when building dynamic

00:11:26,810 --> 00:11:31,670
content with document rate would be to

00:11:28,940 --> 00:11:34,730
put the string in a variable first alert

00:11:31,670 --> 00:11:36,410
that and you have to manually inspect to

00:11:34,730 --> 00:11:37,670
see where you've missed a bracket or

00:11:36,410 --> 00:11:40,010
quote or something that was causing it

00:11:37,670 --> 00:11:41,690
to render incorrectly and potentially

00:11:40,010 --> 00:11:44,600
you would if it was a big string I

00:11:41,690 --> 00:11:47,810
remember times copying the contents of

00:11:44,600 --> 00:11:49,280
the alert and pasting it into a document

00:11:47,810 --> 00:11:52,550
where I could use like HTML tidy or

00:11:49,280 --> 00:11:55,190
something to try and format the HTML to

00:11:52,550 --> 00:11:59,480
see where I'd missed miss some bit of

00:11:55,190 --> 00:12:01,520
HTML next challenges were around the

00:11:59,480 --> 00:12:03,860
language itself so there's no short

00:12:01,520 --> 00:12:07,460
object shorthand so it meant creating a

00:12:03,860 --> 00:12:10,130
state a nested state took a lot of

00:12:07,460 --> 00:12:12,080
verbosity and the other thing you might

00:12:10,130 --> 00:12:14,870
notice there is that my two dues aren't

00:12:12,080 --> 00:12:16,880
an array they're an object and it looks

00:12:14,870 --> 00:12:18,890
like an array like it's numerically

00:12:16,880 --> 00:12:20,300
indexed and goal length but the reason

00:12:18,890 --> 00:12:22,760
for that was JavaScript one didn't even

00:12:20,300 --> 00:12:24,140
actually contain an array data type it

00:12:22,760 --> 00:12:26,840
didn't actually come until JavaScript

00:12:24,140 --> 00:12:29,810
1.1 which was like nine months after

00:12:26,840 --> 00:12:31,970
Netscape to the documentation mentioned

00:12:29,810 --> 00:12:35,210
this had said just use objects they're

00:12:31,970 --> 00:12:37,040
similar enough to arrays basically and

00:12:35,210 --> 00:12:40,100
provide like a little helper function

00:12:37,040 --> 00:12:45,020
for creating an array from like a set of

00:12:40,100 --> 00:12:46,850
arguments there was no the only way you

00:12:45,020 --> 00:12:48,230
could declare a function was globally so

00:12:46,850 --> 00:12:50,270
you couldn't declare a function inside a

00:12:48,230 --> 00:12:52,490
function you can declare an anonymous

00:12:50,270 --> 00:12:54,830
function you couldn't have a function as

00:12:52,490 --> 00:12:57,110
a result of an event a callback for like

00:12:54,830 --> 00:13:00,800
a set timeout so that was pretty

00:12:57,110 --> 00:13:03,050
limiting one workaround for for example

00:13:00,800 --> 00:13:05,720
to set timeouts and things like that was

00:13:03,050 --> 00:13:07,460
you'd use the eval syntax of set timeout

00:13:05,720 --> 00:13:09,740
with IP Goodpaster string and that

00:13:07,460 --> 00:13:16,400
string would be eval after the timeout

00:13:09,740 --> 00:13:18,500
had expired the object model in Netscape

00:13:16,400 --> 00:13:20,510
2 was also very limited as I mentioned

00:13:18,500 --> 00:13:23,480
Netscape was really designed for form

00:13:20,510 --> 00:13:24,980
validation was just so javascript was

00:13:23,480 --> 00:13:27,020
intended mainly to perform validation

00:13:24,980 --> 00:13:28,250
and smaller things like that so it's

00:13:27,020 --> 00:13:29,990
reflected in the object model you

00:13:28,250 --> 00:13:32,180
basically attacked as access to forms

00:13:29,990 --> 00:13:34,130
and within those forms just the various

00:13:32,180 --> 00:13:37,900
elements there was no arbitrary access

00:13:34,130 --> 00:13:37,900
to any element on the page

00:13:42,340 --> 00:13:45,200
similarly the event model was quite

00:13:44,660 --> 00:13:46,310
limited

00:13:45,200 --> 00:13:49,190
there was no add eventlistener you

00:13:46,310 --> 00:13:50,690
couldn't programmatically add event that

00:13:49,190 --> 00:13:53,420
was still five years away and I guess

00:13:50,690 --> 00:13:55,040
with inline scripting it wasn't much

00:13:53,420 --> 00:13:56,960
benefit to being able added

00:13:55,040 --> 00:14:00,380
programmatically and the event handlers

00:13:56,960 --> 00:14:01,610
themselves were limited so for example

00:14:00,380 --> 00:14:05,240
now where you might expect a mouse-over

00:14:01,610 --> 00:14:08,300
to work on any element that have a size

00:14:05,240 --> 00:14:09,890
and is visible in Netscape 2 it would

00:14:08,300 --> 00:14:11,720
only work for an anchor but it wouldn't

00:14:09,890 --> 00:14:13,190
work for an image for example anybody

00:14:11,720 --> 00:14:14,960
had to just look at the docks to see

00:14:13,190 --> 00:14:20,720
what elements events were supported

00:14:14,960 --> 00:14:23,330
where obviously the last challenge with

00:14:20,720 --> 00:14:25,400
styling so I had to use tables for

00:14:23,330 --> 00:14:28,520
layout although that really didn't go

00:14:25,400 --> 00:14:29,780
away for at least another 10-15 years if

00:14:28,520 --> 00:14:31,790
you've had to work on email templates

00:14:29,780 --> 00:14:37,370
you may have even written a table last

00:14:31,790 --> 00:14:39,920
week for layout and colors were fairly

00:14:37,370 --> 00:14:41,210
limited so you could set basically you

00:14:39,920 --> 00:14:42,830
could set the background color of the

00:14:41,210 --> 00:14:44,480
body but you couldn't even set the

00:14:42,830 --> 00:14:46,640
background color of a table or a table

00:14:44,480 --> 00:14:48,290
cell which is why the layout of that

00:14:46,640 --> 00:14:53,300
to-do list was just all white pretty

00:14:48,290 --> 00:14:55,220
much so basically the or you had access

00:14:53,300 --> 00:14:57,080
to so in terms of styling was the font

00:14:55,220 --> 00:15:00,470
tag and font tag you could set the size

00:14:57,080 --> 00:15:03,350
and the color of the text and again it

00:15:00,470 --> 00:15:06,200
was limited in that the size wasn't a

00:15:03,350 --> 00:15:07,940
pixel size it was basically a fixed

00:15:06,200 --> 00:15:10,130
number like 1 to 7 you could set it to

00:15:07,940 --> 00:15:12,260
and that was basically decided by the

00:15:10,130 --> 00:15:13,640
browser what those seven sizes were you

00:15:12,260 --> 00:15:16,220
can also use relative sizes so

00:15:13,640 --> 00:15:20,210
plus/minus based on the size of the

00:15:16,220 --> 00:15:21,620
containing element they might notice I

00:15:20,210 --> 00:15:23,660
said there you could set the font size

00:15:21,620 --> 00:15:25,880
and font color one thing you couldn't

00:15:23,660 --> 00:15:27,530
set is the font face so the font face

00:15:25,880 --> 00:15:30,830
attribute wasn't actually part of the

00:15:27,530 --> 00:15:31,850
HTML 3.2 spec even so Netscape didn't

00:15:30,830 --> 00:15:32,840
let you actually change the font the

00:15:31,850 --> 00:15:33,980
only reason you're not looking at Times

00:15:32,840 --> 00:15:35,600
New Roman right now is because I've just

00:15:33,980 --> 00:15:37,930
changed the default browser font to

00:15:35,600 --> 00:15:40,000
something that's a bit more pleasant

00:15:37,930 --> 00:15:41,860
and so yeah the face attribute was

00:15:40,000 --> 00:15:43,810
something that Microsoft actually added

00:15:41,860 --> 00:15:47,529
as a custom attribute initially in their

00:15:43,810 --> 00:15:48,700
browser so powerful note there was a

00:15:47,529 --> 00:15:49,690
couple little quirks I just want I

00:15:48,700 --> 00:15:51,190
wanted to show you was like a little

00:15:49,690 --> 00:15:52,779
memory corruption issue I ran into if

00:15:51,190 --> 00:15:55,029
you really rapidly click on those items

00:15:52,779 --> 00:15:58,120
you suddenly get memory leaks from

00:15:55,029 --> 00:16:00,730
outside of your page like the URL or

00:15:58,120 --> 00:16:02,920
sometimes HTTP header or something so

00:16:00,730 --> 00:16:04,480
that was fun and at one point I think I

00:16:02,920 --> 00:16:06,940
had something where if I didn't force

00:16:04,480 --> 00:16:08,380
the encoding to utf-8 I would just get

00:16:06,940 --> 00:16:11,290
like weirdness with the font but that

00:16:08,380 --> 00:16:14,080
may have just been a VirtualBox issue so

00:16:11,290 --> 00:16:16,420
we've kind of taken Netscape to as far

00:16:14,080 --> 00:16:18,160
as we can take it I want to kind of move

00:16:16,420 --> 00:16:21,190
forward at least a little bit in time to

00:16:18,160 --> 00:16:24,220
a browser that was supposed to support

00:16:21,190 --> 00:16:27,370
building dynamic applications that

00:16:24,220 --> 00:16:29,380
browser wasn't Netscape 3 Netscape 3

00:16:27,370 --> 00:16:31,420
came out pretty quickly after Netscape 2

00:16:29,380 --> 00:16:34,270
had some JavaScript improvements like

00:16:31,420 --> 00:16:35,650
arrays but it didn't have any Dinah I

00:16:34,270 --> 00:16:38,380
had the same programming model for

00:16:35,650 --> 00:16:44,230
dynamic content so instead let's move on

00:16:38,380 --> 00:16:46,060
to next cake fall so Netscape 4 was the

00:16:44,230 --> 00:16:49,300
first netscape browser to support what

00:16:46,060 --> 00:16:50,620
was called at the time dynamic HTML did

00:16:49,300 --> 00:16:53,830
anyone own a copy of this book at any

00:16:50,620 --> 00:16:54,850
point in time there's a few I didn't

00:16:53,830 --> 00:16:56,290
know in the third edition but I looked

00:16:54,850 --> 00:16:57,730
back at my Amazon purchase history and

00:16:56,290 --> 00:17:00,130
this is like one of the first books live

00:16:57,730 --> 00:17:04,179
aboard in like 99 when I started working

00:17:00,130 --> 00:17:10,630
and the way Netscape implemented dynamic

00:17:04,179 --> 00:17:13,809
HTML was through the use of pelea tag so

00:17:10,630 --> 00:17:17,380
layers were an element that you could

00:17:13,809 --> 00:17:20,559
reposition you could modify its content

00:17:17,380 --> 00:17:23,500
you could resize it so finally you could

00:17:20,559 --> 00:17:24,880
sort of build some dynamic dynamic

00:17:23,500 --> 00:17:28,540
content on your page without jumping

00:17:24,880 --> 00:17:30,309
through in theory too many hoops so

00:17:28,540 --> 00:17:32,200
let's have a look what the to-do list

00:17:30,309 --> 00:17:33,370
apart from just with layers and with all

00:17:32,200 --> 00:17:35,950
the other features in there care for

00:17:33,370 --> 00:17:37,929
what it looks like so you have a looking

00:17:35,950 --> 00:17:39,610
a little bit nicer we've got different

00:17:37,929 --> 00:17:41,890
background colors leaves with a little

00:17:39,610 --> 00:17:45,070
key line in between items source tool

00:17:41,890 --> 00:17:47,020
tables for layout mostly but it is using

00:17:45,070 --> 00:17:49,190
layers as well so we can still add an

00:17:47,020 --> 00:17:51,049
item

00:17:49,190 --> 00:17:53,570
yeah all that work so I'm not going to

00:17:51,049 --> 00:17:55,340
go through all this part again so let's

00:17:53,570 --> 00:17:56,960
talk about how the implementation in

00:17:55,340 --> 00:18:00,760
Netscape 4 differed from what I did in

00:17:56,960 --> 00:18:03,350
that scape 2 so now instead of using

00:18:00,760 --> 00:18:04,520
frame sets we're using layers to

00:18:03,350 --> 00:18:06,309
implement this now something that's not

00:18:04,520 --> 00:18:08,179
reflected in these slides was that I

00:18:06,309 --> 00:18:10,700
built like a little component

00:18:08,179 --> 00:18:12,620
abstraction around the layers so I could

00:18:10,700 --> 00:18:15,860
have essentially like the application

00:18:12,620 --> 00:18:17,660
was an object and had child objects for

00:18:15,860 --> 00:18:19,010
the different components or that knew

00:18:17,660 --> 00:18:21,890
about their layer and could re render

00:18:19,010 --> 00:18:24,530
their own layer in terms of the data

00:18:21,890 --> 00:18:27,110
model it still looked pretty similar in

00:18:24,530 --> 00:18:30,080
terms of the state they maintained in

00:18:27,110 --> 00:18:32,840
the parent and the children being able

00:18:30,080 --> 00:18:36,440
to re render themselves so you can see

00:18:32,840 --> 00:18:38,179
their layers basically they implement

00:18:36,440 --> 00:18:39,919
their own document each layer is its own

00:18:38,179 --> 00:18:42,230
HTML document so your three years

00:18:39,919 --> 00:18:43,820
document right to update a layer and you

00:18:42,230 --> 00:18:45,650
still face the same restrictions in that

00:18:43,820 --> 00:18:49,270
as soon as you start writing to it it

00:18:45,650 --> 00:18:49,270
resets the content that's already there

00:18:51,070 --> 00:18:57,110
but because these smaller components it

00:18:53,990 --> 00:18:59,659
means probably not as bad that you've

00:18:57,110 --> 00:19:02,030
got basically fast HTML in strings

00:18:59,659 --> 00:19:04,429
everywhere and so I've kind of used like

00:19:02,030 --> 00:19:07,070
a again to use the analogy like a

00:19:04,429 --> 00:19:08,780
reactive type model where when I want to

00:19:07,070 --> 00:19:10,460
update I just basically told all the

00:19:08,780 --> 00:19:11,960
childhood components to update with the

00:19:10,460 --> 00:19:17,059
current state and they you had a

00:19:11,960 --> 00:19:22,490
rerender themselves so what challenges

00:19:17,059 --> 00:19:24,020
whether when building for Netscape 4 so

00:19:22,490 --> 00:19:25,549
first we already talked about briefly

00:19:24,020 --> 00:19:26,900
about what the challenges were with

00:19:25,549 --> 00:19:28,510
layers now the big thing about layers

00:19:26,900 --> 00:19:31,669
was they're always absolutely positioned

00:19:28,510 --> 00:19:35,720
so you couldn't have a layer inside

00:19:31,669 --> 00:19:37,429
another element you could have a layer

00:19:35,720 --> 00:19:39,110
inside a layer that you couldn't have a

00:19:37,429 --> 00:19:40,940
layer like within the layer of an

00:19:39,110 --> 00:19:42,200
existing page so for example that

00:19:40,940 --> 00:19:45,500
example I gave before with the

00:19:42,200 --> 00:19:47,240
navigation menu in your normal HTML

00:19:45,500 --> 00:19:49,850
layer you just leave a gap and then you

00:19:47,240 --> 00:19:52,669
would absolutely position the layers to

00:19:49,850 --> 00:19:54,260
fit in there the challenge with that was

00:19:52,669 --> 00:19:56,690
that for example for a to-do list which

00:19:54,260 --> 00:19:58,340
is dynamically size depending on the

00:19:56,690 --> 00:20:00,890
number of items you need to have a way

00:19:58,340 --> 00:20:02,160
for those components to be able to say

00:20:00,890 --> 00:20:03,750
how tall they are based on

00:20:02,160 --> 00:20:04,650
number items they've got said if you

00:20:03,750 --> 00:20:08,450
want a position like the footer

00:20:04,650 --> 00:20:12,480
underneath for example and obviously

00:20:08,450 --> 00:20:14,760
debugging is difficult as I mentioned

00:20:12,480 --> 00:20:17,040
before there's no elements panel student

00:20:14,760 --> 00:20:19,410
existed in Netscape four and so it meant

00:20:17,040 --> 00:20:23,220
if say a layer disappeared off-screen

00:20:19,410 --> 00:20:25,140
you have no way of telling why you

00:20:23,220 --> 00:20:27,210
couldn't tell if it was because you'd

00:20:25,140 --> 00:20:28,890
set the exposition incorrectly or

00:20:27,210 --> 00:20:31,680
whether you'd hidden it inadvertently or

00:20:28,890 --> 00:20:34,680
some other some other bug so again it

00:20:31,680 --> 00:20:37,670
was a lot of manual alerts and waiting

00:20:34,680 --> 00:20:37,670
for errors and things like that

00:20:38,570 --> 00:20:45,420
the layer API kind of looked like forms

00:20:43,350 --> 00:20:46,920
before so we still couldn't just

00:20:45,420 --> 00:20:51,360
arbitrary get any elements you can only

00:20:46,920 --> 00:20:52,800
get layers by name or by ID and once you

00:20:51,360 --> 00:20:56,450
had access to a layer you can access

00:20:52,800 --> 00:20:56,450
this document to which document property

00:20:56,810 --> 00:21:03,170
you could set the attribute sub layers

00:21:00,570 --> 00:21:05,940
are kind of like almost like CSS styling

00:21:03,170 --> 00:21:07,260
type properties and also have these

00:21:05,940 --> 00:21:09,050
convenience functions for things like

00:21:07,260 --> 00:21:12,960
relative positioning relative sizing

00:21:09,050 --> 00:21:14,400
which could be useful at times and if

00:21:12,960 --> 00:21:17,250
you really want to go crazy and you had

00:21:14,400 --> 00:21:20,280
nested layers then you could access them

00:21:17,250 --> 00:21:21,810
like this probably not recommended

00:21:20,280 --> 00:21:23,490
though and one thing I wanted to point

00:21:21,810 --> 00:21:26,580
out there was for visibility it was

00:21:23,490 --> 00:21:28,410
actually wasn't a boolean it was three

00:21:26,580 --> 00:21:31,910
states so you can have hide show and

00:21:28,410 --> 00:21:31,910
inherit I think was the other one

00:21:33,230 --> 00:21:38,250
debugging in Netscape 4 wasn't much

00:21:36,570 --> 00:21:40,440
easier but it was a little bit easier no

00:21:38,250 --> 00:21:42,960
longer did you get a modal alert that

00:21:40,440 --> 00:21:44,250
would block what the page you would

00:21:42,960 --> 00:21:46,350
instead get told there was a JavaScript

00:21:44,250 --> 00:21:48,660
error and p-type JavaScript colon have

00:21:46,350 --> 00:21:51,180
suggested there you'll get the

00:21:48,660 --> 00:21:53,280
JavaScript console now this wasn't the

00:21:51,180 --> 00:21:55,380
console as we used to today it was

00:21:53,280 --> 00:21:56,760
fairly limited but it would show you all

00:21:55,380 --> 00:21:58,470
the errors that had occurred not just

00:21:56,760 --> 00:22:00,360
the first one that probably a bad

00:21:58,470 --> 00:22:02,010
example but if you had like a set

00:22:00,360 --> 00:22:03,540
timeout or set interval that was firing

00:22:02,010 --> 00:22:05,400
every 100 milliseconds and throwing an

00:22:03,540 --> 00:22:06,570
error it would eventually tell you that

00:22:05,400 --> 00:22:08,460
there was too many errors and that would

00:22:06,570 --> 00:22:10,350
stop processing them though this

00:22:08,460 --> 00:22:13,080
JavaScript type in that you typ in an

00:22:10,350 --> 00:22:14,130
evaluate arbitrary JavaScript but there

00:22:13,080 --> 00:22:16,410
was limits to what it could do as well

00:22:14,130 --> 00:22:17,580
you typed in window or you got was

00:22:16,410 --> 00:22:19,650
object window there was no way to

00:22:17,580 --> 00:22:21,210
inspect the properties of an object

00:22:19,650 --> 00:22:25,410
unless you knew what they were in

00:22:21,210 --> 00:22:27,120
advance if you typed in window location

00:22:25,410 --> 00:22:28,950
then you would get the location of the

00:22:27,120 --> 00:22:30,780
JavaScript console not the page you

00:22:28,950 --> 00:22:36,330
opened it from which wasn't necessarily

00:22:30,780 --> 00:22:37,910
very helpful and so lastly styling in

00:22:36,330 --> 00:22:40,290
Netscape 4 was a little bit better and

00:22:37,910 --> 00:22:42,720
it was the first Netscape version to

00:22:40,290 --> 00:22:44,070
implement CSS but it wasn't really CSS

00:22:42,720 --> 00:22:47,760
had a lot of issues

00:22:44,070 --> 00:22:49,230
what made it was CSS basically the

00:22:47,760 --> 00:22:50,850
history of that is Netscape had

00:22:49,230 --> 00:22:52,350
originally been working towards

00:22:50,850 --> 00:22:53,910
implementing JavaScript style sheets and

00:22:52,350 --> 00:22:54,990
I think there's a talk on JavaScript

00:22:53,910 --> 00:23:00,030
style sheets later on this conference

00:22:54,990 --> 00:23:01,020
and and they were hoping javascript

00:23:00,030 --> 00:23:03,180
associates what was going to be

00:23:01,020 --> 00:23:04,770
standardized but in CSS got standardized

00:23:03,180 --> 00:23:06,750
and they have to have scrambled to

00:23:04,770 --> 00:23:08,880
provide the implementation of CSS in

00:23:06,750 --> 00:23:12,120
Netscape 4 and so it shows with the kind

00:23:08,880 --> 00:23:13,590
of bugs that that occur this wasn't

00:23:12,120 --> 00:23:16,650
necessarily a bug but a limitation at

00:23:13,590 --> 00:23:19,140
the time was only one class name third

00:23:16,650 --> 00:23:21,840
class attribute so you couldn't compose

00:23:19,140 --> 00:23:23,310
classes which meant that there was a lot

00:23:21,840 --> 00:23:25,190
of repetition of styles if you wanted to

00:23:23,310 --> 00:23:27,450
have different variants of a class

00:23:25,190 --> 00:23:29,190
inheritance was buggy or missing at

00:23:27,450 --> 00:23:32,670
times if you set the color of the body

00:23:29,190 --> 00:23:34,020
text if you create as a table then in

00:23:32,670 --> 00:23:36,150
the table the color would be reset again

00:23:34,020 --> 00:23:36,890
so a lot of duplication and the fonts as

00:23:36,150 --> 00:23:39,570
well

00:23:36,890 --> 00:23:41,850
lastly the styles were just buggy in

00:23:39,570 --> 00:23:43,680
general like padding on that last list

00:23:41,850 --> 00:23:44,910
item and it's added the padding to the

00:23:43,680 --> 00:23:50,700
body but it hasn't actually

00:23:44,910 --> 00:23:53,550
resented ver bullet so just to wrap up

00:23:50,700 --> 00:23:55,470
what have we learnt nothing you can

00:23:53,550 --> 00:23:57,510
probably apply to your day job but

00:23:55,470 --> 00:24:01,650
hopefully what you've gotten out of this

00:23:57,510 --> 00:24:03,810
is an appreciation for just how

00:24:01,650 --> 00:24:07,050
difficult it was to work with these

00:24:03,810 --> 00:24:10,770
early browsers basically that there was

00:24:07,050 --> 00:24:11,850
a lot of challenges involved and so if

00:24:10,770 --> 00:24:13,980
you're around in the early days of the

00:24:11,850 --> 00:24:15,150
web and you saw some cool websites you

00:24:13,980 --> 00:24:16,380
can hopefully have an appreciation of

00:24:15,150 --> 00:24:20,250
just how much work would have gone into

00:24:16,380 --> 00:24:23,399
making those work right and just in

00:24:20,250 --> 00:24:24,869
general I really want to personally and

00:24:23,399 --> 00:24:26,759
hopefully from everyone here thankful

00:24:24,869 --> 00:24:31,019
the people that work on developer tools

00:24:26,759 --> 00:24:33,269
probably a few of them in this room it's

00:24:31,019 --> 00:24:35,009
really awesome the tools we have today

00:24:33,269 --> 00:24:39,869
and it just makes it so much easier to

00:24:35,009 --> 00:24:44,779
work with the web so with that this one

00:24:39,869 --> 00:24:44,779
is done and thank you

00:24:51,000 --> 00:24:53,060

YouTube URL: https://www.youtube.com/watch?v=Z-nXRZkge2U


