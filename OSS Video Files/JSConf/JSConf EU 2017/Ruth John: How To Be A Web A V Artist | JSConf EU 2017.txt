Title: Ruth John: How To Be A Web A V Artist | JSConf EU 2017
Publication date: 2017-05-25
Playlist: JSConf EU 2017
Description: 
	http://2017.jsconf.eu/speakers/ruth-john-how-to-be-a-web-av-artist.html

Come and be fascinated by the world of audio visualisation in a browser. This isnâ€™t just about creating stunning data vis to music! We see how we can pipe data realtime into custom properties to enhance our visuals. The speaker re-addresses how we analyse sound via the Web Audio API and proposes a better way of processing the data to better suit music. And, to top it all off, we harness the Web MIDI API for full hardware control as well. You may not think it, but this really is a talk with a great deal of take-aways and new techniques for you to consider in your coding life.
Captions: 
	00:00:03,139 --> 00:00:26,039
"How To Be A Web A/V Artist" Ruth John

00:00:49,769 --> 00:00:55,510
RUTH: Oh, hello, JSConf!

00:00:55,510 --> 00:01:00,649
That's an exclusive for everybody who's sitting here because they're going to have to cut

00:01:00,649 --> 00:01:03,280
it out of the video.

00:01:03,280 --> 00:01:05,120
I am so sorry!

00:01:05,120 --> 00:01:07,271
I don't have the right to play that music.

00:01:07,271 --> 00:01:11,450
But I really, really wanted to!

00:01:11,450 --> 00:01:17,280
It's fine, it's at the beginning, they can cut that out.

00:01:17,280 --> 00:01:18,280
Hi.

00:01:18,280 --> 00:01:20,310
I'm Ruth.

00:01:20,310 --> 00:01:27,070
This is the part of the talk where I tell you where I'm from, what I do, who I am.

00:01:27,070 --> 00:01:28,990
I think I kind of just did that.

00:01:28,990 --> 00:01:31,090
So, hi, I'm Ruth.

00:01:31,090 --> 00:01:36,740
I'm here today to talk to you about how to be a web AV artist.

00:01:36,740 --> 00:01:37,740
Yeah...

00:01:37,740 --> 00:01:38,890
I know.

00:01:38,890 --> 00:01:40,320
I know.

00:01:40,320 --> 00:01:45,200
To be honest with you, I struggled with the practicality of this talk.

00:01:45,200 --> 00:01:51,579
I'm going to be talking about WebAudio API, and MIDI API and I don't know how many of

00:01:51,579 --> 00:01:59,280
you are going to go back to work on Monday and put the word "MIDI API" into a website.

00:01:59,280 --> 00:02:08,229
So I kind of thought to myself when I saw this about six months ago, that I should take

00:02:08,229 --> 00:02:09,610
it literally.

00:02:09,610 --> 00:02:10,700
This is a Venn diagram.

00:02:10,700 --> 00:02:15,900
This is a Venn diagram about practical talks at conferences.

00:02:15,900 --> 00:02:20,152
And on the left-hand side, you've got what people actually talk about, and you've got

00:02:20,152 --> 00:02:25,440
on the right-hand side, what attendees want you to talk about.

00:02:25,440 --> 00:02:31,790
So I made two lists just to make sure that this is a really useful talk, by the way,

00:02:31,790 --> 00:02:35,120
I made two lists.

00:02:35,120 --> 00:02:40,871
One list is things that I have to avoid talking about, and the other list is things that I

00:02:40,871 --> 00:02:43,590
have to include in this talk.

00:02:43,590 --> 00:02:47,520
And then it would be really, really useful for all of you, and my talk anxiety will go

00:02:47,520 --> 00:02:49,099
away.

00:02:49,099 --> 00:02:55,660
So I have to avoid analytics, operational excellence, chat ops, orchestration.

00:02:55,660 --> 00:02:57,070
That's fine.

00:02:57,070 --> 00:03:01,670
I think I can totally avoid these things.

00:03:01,670 --> 00:03:08,500
I have to include duct tape, workarounds, bike shedding, and coffee, and tea.

00:03:08,500 --> 00:03:11,150
Easy things to include for a developer.

00:03:11,150 --> 00:03:12,150
Great.

00:03:12,150 --> 00:03:15,650
Now that I've got that out of the way, let's begin.

00:03:15,650 --> 00:03:18,580
So what is an AV artist?

00:03:18,580 --> 00:03:20,700
AV stands for audio- visual.

00:03:20,700 --> 00:03:26,640
So as an audio-visual artist, it's just taking some audio and making visualizations from

00:03:26,640 --> 00:03:28,970
that audio.

00:03:28,970 --> 00:03:31,630
Another name for this is a VJ.

00:03:31,630 --> 00:03:33,620
There's not a lot of making the audio.

00:03:33,620 --> 00:03:39,239
We're just taking what other people are making and using the data from it.

00:03:39,239 --> 00:03:42,500
Who, out there, remembers this?

00:03:42,500 --> 00:03:43,500
>> Winamp!

00:03:43,500 --> 00:03:47,989
It really whips the llama's ass!

00:03:47,989 --> 00:03:53,360
RUTH: For those of you who don't remember, because there are going to be a few people

00:03:53,360 --> 00:03:58,870
who don't remember, this is the best mp3 player of all the time.

00:03:58,870 --> 00:04:05,500
It's lightweight, and easy to install and quick, and free, but it actually played music

00:04:05,500 --> 00:04:07,709
that you had on your hard drive.

00:04:07,709 --> 00:04:09,110
It's amazing.

00:04:09,110 --> 00:04:11,489
But that was not the best thing about Winamp.

00:04:11,489 --> 00:04:18,489
This was the best thing about Winamp.

00:04:18,489 --> 00:04:23,690
So you could whip up these visuals and they would go in time to the music and you could

00:04:23,690 --> 00:04:26,920
just sit and watch for hours.

00:04:26,920 --> 00:04:32,520
This was probably the most influential thing of any VJ of my generation and this is kind

00:04:32,520 --> 00:04:33,610
of what got me into it.

00:04:33,610 --> 00:04:35,350
I said, I want to make this!

00:04:35,350 --> 00:04:37,000
This is great!

00:04:37,000 --> 00:04:42,530
So the first thing that we need to make things like this is audio and that's good.

00:04:42,530 --> 00:04:45,730
We have a Web Audio API.

00:04:45,730 --> 00:04:46,810
And that gets us audio.

00:04:46,810 --> 00:04:47,810
That's great.

00:04:47,810 --> 00:04:49,550
There's four main ways that you can do it with the Web Audio API.

00:04:49,550 --> 00:04:51,310
I'm sure you've come across most of these.

00:04:51,310 --> 00:04:52,930
So you can create sound yourself.

00:04:52,930 --> 00:05:00,650
And so you instigate an oscillator, and you can grab elements from the DOM.

00:05:00,650 --> 00:05:08,660
If you have audio-video element in the DOM, you can pipe it from that.

00:05:08,660 --> 00:05:12,940
You can stream it, and that's usually taking it from the camera, or the microphone from

00:05:12,940 --> 00:05:19,410
your laptop and you can stream it into the audio API, or you can go get a sound file

00:05:19,410 --> 00:05:21,340
and buffer the data from that sound file.

00:05:21,340 --> 00:05:25,540
So what you're doing is taking the data and putting it in sort of a container that the

00:05:25,540 --> 00:05:29,120
audio API has, and then you can use the data.

00:05:29,120 --> 00:05:34,800
I'm using the Fetch API as an example here to go and get my sound file.

00:05:34,800 --> 00:05:37,210
So a couple of examples.

00:05:37,210 --> 00:05:41,970
This one, I'll taking the sound from a sound file.

00:05:41,970 --> 00:05:48,270
I'm just piping it in and it's analyzing that.

00:05:48,270 --> 00:05:50,680
And this one is actually picking up on my voice.

00:05:50,680 --> 00:05:54,900
So it's picking up the microphone from my laptop, and streaming it into the audio API.

00:05:54,900 --> 00:05:58,460
This is my preferred method for the moment because I don't know where I'm going to be

00:05:58,460 --> 00:06:01,281
doing the visualizations.

00:06:01,281 --> 00:06:07,660
And so we need to be able to analyze the sound.

00:06:07,660 --> 00:06:09,130
Oh, okay.

00:06:09,130 --> 00:06:13,720
I'm not allowed to say "analytics."

00:06:13,720 --> 00:06:17,060
That was a -- thank you very much, Turk.

00:06:17,060 --> 00:06:22,740
It's going to trip me every single time whenever this is said.

00:06:22,740 --> 00:06:24,960
But I'm talking about analytics.

00:06:24,960 --> 00:06:29,500
So to analyze sound, we can do it at the Web Audio API level, as well, and we can do that

00:06:29,500 --> 00:06:36,550
with the analyzer node and we can use the sound that we created, or got with the audio

00:06:36,550 --> 00:06:44,110
API and it would give us analyzed data back, and what it gives us is something like this,

00:06:44,110 --> 00:06:46,050
which is an array of frequency velocities.

00:06:46,050 --> 00:06:50,980
For those of you who don't know what that means, frequency is sound levels.

00:06:50,980 --> 00:06:54,010
It's like low sounds to high sounds.

00:06:54,010 --> 00:07:01,470
And what we're actually scanning for here is naught hertz to 30,000 kilohertz, that's

00:07:01,470 --> 00:07:03,700
very, very high.

00:07:03,700 --> 00:07:11,960
And that's higher a resolution than we can actually detect and the velocity of the volume

00:07:11,960 --> 00:07:18,680
is just the frequency of that volume at any given point and it's just a number and then

00:07:18,680 --> 00:07:22,520
we can just use those numbers, which is exactly what's going on here.

00:07:22,520 --> 00:07:28,370
This is just a bunch of i-elements and I'm taking that data value, that velocity value,

00:07:28,370 --> 00:07:31,590
and I'm making it the height of those i-elements.

00:07:31,590 --> 00:07:32,990
It's really rather straightforward.

00:07:32,990 --> 00:07:38,280
Just loop through these, great.

00:07:38,280 --> 00:07:43,790
We can all make visuals and my talk is over and we can go for an early lunch.

00:07:43,790 --> 00:07:45,330
We could actually do some more complicated stuff.

00:07:45,330 --> 00:07:49,620
But it is relatively easy and we're just using HTML, CSS, and JavaScript, actually just to

00:07:49,620 --> 00:07:52,930
do something really cool.

00:07:52,930 --> 00:07:57,710
So I wondered how far could we really take this with just these technologies and I started

00:07:57,710 --> 00:07:59,450
a bunch of experiments.

00:07:59,450 --> 00:08:04,400
And everybody knows when you start experimenting, you need some inspiration.

00:08:04,400 --> 00:08:05,940
So this was my first inspiration.

00:08:05,940 --> 00:08:08,580
This is Bridget Riley, she's a super cool artist.

00:08:08,580 --> 00:08:10,130
It said so on the slides.

00:08:10,130 --> 00:08:18,090
I actually discovered her at ScotlandJS there, and she had an exhibition at Edinborough,

00:08:18,090 --> 00:08:30,740
and it was really, really great and I said, I'm going to visualize paintings.

00:08:30,740 --> 00:08:36,550
And these are all divs, and I'm just using Flexbox, and I'm getting the data back.

00:08:36,550 --> 00:08:37,550
It's just really simple.

00:08:37,550 --> 00:08:47,860
And this one is another one showing some triangles based on that data.

00:08:47,860 --> 00:08:53,740
And this is just simply stuff in the DOM.

00:08:53,740 --> 00:09:00,230
And, of course, if we're using things in the DOM, we can try and instigate some lovely

00:09:00,230 --> 00:09:03,880
CSS because I'm at a JavaScript conference, so I thought I would bring in some CSS, I

00:09:03,880 --> 00:09:05,780
thought that would be a really, really good idea.

00:09:05,780 --> 00:09:08,170
Transforms are cool.

00:09:08,170 --> 00:09:13,300
With visualizations, I really feel like you could do some symmetry.

00:09:13,300 --> 00:09:19,120
If I could take whatever's in the DOM and replicate it, and rotate it around with just

00:09:19,120 --> 00:09:22,490
the function, then I could do whatever I have in the DOM.

00:09:22,490 --> 00:09:23,860
That would be really great.

00:09:23,860 --> 00:09:25,650
That would let me do whatever I want to do the set.

00:09:25,650 --> 00:09:30,440
So I did that, and so I've got literally one-quarter of the screen.

00:09:30,440 --> 00:09:38,300
And I thought, well, we could put anything in the DOM.

00:09:38,300 --> 00:09:44,560
And that's a good thing, as well because you want to be able to use videos and imagery,

00:09:44,560 --> 00:09:50,500
so I thought, wouldn't it be cool if we could just drop a gif in one of these quarters and

00:09:50,500 --> 00:09:52,830
reflect and rotate that around?

00:09:52,830 --> 00:09:54,580
And you can do that, as well.

00:09:54,580 --> 00:09:56,430
This is a My Little Pony gif.

00:09:56,430 --> 00:10:00,330
My favorite kind of gif.

00:10:00,330 --> 00:10:06,490
And so on and so forth of the lovely CSS things we have are blends and filters.

00:10:06,490 --> 00:10:11,570
So the visualization that we have at the top of the show, we can just add some blend modes

00:10:11,570 --> 00:10:17,240
to that, and we've got a much nicer visualization -- well, I think the first one was pretty

00:10:17,240 --> 00:10:18,240
good.

00:10:18,240 --> 00:10:19,650
But this one has just got some blend modes on.

00:10:19,650 --> 00:10:23,860
So each element is just fighting for the next element.

00:10:23,860 --> 00:10:29,380
Top tips for you, filters, filters, if you're unaware in CSS of things like saturation,

00:10:29,380 --> 00:10:35,940
inversion, and things like that, work on video, so if you are playing video clips in your

00:10:35,940 --> 00:10:42,170
set, you can invert with literally just a CSS property which works really, really well.

00:10:42,170 --> 00:10:44,890
It's really good.

00:10:44,890 --> 00:10:49,010
One CSS thing which is actually really, really interesting, and something that was great

00:10:49,010 --> 00:10:52,870
to experiment with was custom properties.

00:10:52,870 --> 00:10:57,020
Now we've got a lot of data and we've got a lot of data in our JavaScript but we might

00:10:57,020 --> 00:10:59,640
be styling with CSS.

00:10:59,640 --> 00:11:04,670
So it's almost like, well, okay, we can change styles in JavaScript, that's fine.

00:11:04,670 --> 00:11:07,550
But this is an interesting one.

00:11:07,550 --> 00:11:11,710
I'm sure everybody has seen this but I am just going to go over it.

00:11:11,710 --> 00:11:16,500
If you've ever used a CSS preprocessor, so SASS, or LESS, or something like that, you

00:11:16,500 --> 00:11:19,640
probably have come across variables.

00:11:19,640 --> 00:11:22,850
This is almost the same idea in spec.

00:11:22,850 --> 00:11:29,130
So at the top there, we've got some CSS, and you declare whatever you want your variable

00:11:29,130 --> 00:11:32,290
in the root element, with a dash, dash and then whatever you want.

00:11:32,290 --> 00:11:38,690
This level that I have in mind is going to reflect the frequency data which I'm getting

00:11:38,690 --> 00:11:43,320
from the analyzer node and then all I'm doing is changing the width and the height later

00:11:43,320 --> 00:11:46,150
on in the CSS.

00:11:46,150 --> 00:11:52,600
And then in the JavaScript, I could parse that frequency data back to my CSS.

00:11:52,600 --> 00:11:56,190
So I can do this with document.element.* property.

00:11:56,190 --> 00:12:04,620
So it can update in real time, and this is all in JavaScript and CSS but it's very, very

00:12:04,620 --> 00:12:05,620
handy.

00:12:05,620 --> 00:12:07,510
And again, it can come in very, very handy for effects.

00:12:07,510 --> 00:12:10,490
So I did this.

00:12:10,490 --> 00:12:13,710
This is an example of all the things that you've just seen.

00:12:13,710 --> 00:12:16,680
You've got some DOM elements, you've got some blend modes, you've got some custom properties

00:12:16,680 --> 00:12:17,680
going on.

00:12:17,680 --> 00:12:21,430
What you might notice is it's a little bit janky.

00:12:21,430 --> 00:12:23,760
It doesn't really like operating.

00:12:23,760 --> 00:12:26,920
Uh, now let's talk about operational excellence.

00:12:26,920 --> 00:12:27,920
It's okay.

00:12:27,920 --> 00:12:30,400
We're halfway through the talk, 50%.

00:12:30,400 --> 00:12:33,380
Who knows which way this is going to go.

00:12:33,380 --> 00:12:34,380
Okay.

00:12:34,380 --> 00:12:37,560
I'm not allowed to talk about chat ops, or orchestration.

00:12:37,560 --> 00:12:38,560
Okay, okay.

00:12:38,560 --> 00:12:46,880
So yeah, this is a little bit, yeah, janky, and I was thinking about performance.

00:12:46,880 --> 00:12:48,060
This is my friend, Ben.

00:12:48,060 --> 00:12:53,380
It's really, really good to talk to your friends and not just for rubber-duckying when you

00:12:53,380 --> 00:12:58,740
have bugs in your code but when you're considering the overall thing that you're building and

00:12:58,740 --> 00:13:06,540
the best way and all the stuff, it's really good to chat -- oh, chat ops.

00:13:06,540 --> 00:13:07,910
I couldn't avoid orchestration.

00:13:07,910 --> 00:13:09,710
I could totally avoid orchestration.

00:13:09,710 --> 00:13:10,710
It's fine.

00:13:10,710 --> 00:13:13,070
This will be a really useful talk, I promise you.

00:13:13,070 --> 00:13:17,870
So I was talking to Ben and he was talking to me about the interactive piece that he

00:13:17,870 --> 00:13:21,840
was doing which was very similar to the stuff that I'm talking to you about, and we went

00:13:21,840 --> 00:13:24,860
over performance because the performance wasn't going over very well.

00:13:24,860 --> 00:13:29,860
And he said to me, maybe I should use D3.js.

00:13:29,860 --> 00:13:33,980
Now I usually don't use libraries unless I have to.

00:13:33,980 --> 00:13:38,840
But it kind of made sense because D3 is a visualization library.

00:13:38,840 --> 00:13:46,840
And when a lot of people think of D3, they think of bar charts, and visualized data.

00:13:46,840 --> 00:13:48,710
But that's what it does well.

00:13:48,710 --> 00:13:52,230
I have some data and I want to visualize it.

00:13:52,230 --> 00:13:56,570
It's also good for maths I'm working with numbers a lot.

00:13:56,570 --> 00:14:02,170
And it's very good with the DOM and it's helpful because that was kind of what was hindering

00:14:02,170 --> 00:14:03,770
performance.

00:14:03,770 --> 00:14:09,870
And I could use SVGs because that's really, really nice for the render.

00:14:09,870 --> 00:14:13,310
So that begins experiment number two.

00:14:13,310 --> 00:14:15,980
This is my inspiration for experiments number two.

00:14:15,980 --> 00:14:18,620
This is called Super Graphic by Tim Leon.

00:14:18,620 --> 00:14:25,370
And it charts data from graphic novels.

00:14:25,370 --> 00:14:27,410
So stuff like this starts happening.

00:14:27,410 --> 00:14:31,540
So this is a basic sunburst chart but it's just picking up on my voice and it's making

00:14:31,540 --> 00:14:32,920
a nice visualization.

00:14:32,920 --> 00:14:35,760
Ooh, it's coming up on all the screens.

00:14:35,760 --> 00:14:37,970
That's cool.

00:14:37,970 --> 00:14:42,090
I quite like screens and projectors, you might have guessed.

00:14:42,090 --> 00:14:46,370
And things like this, which is also lovely.

00:14:46,370 --> 00:14:47,370
And there's quite a few.

00:14:47,370 --> 00:14:52,430
So we can sort of reimagine the spectrum that we saw earlier and we can have circles instead.

00:14:52,430 --> 00:14:59,630
And that be can a nice thing to be mixing into a set when we actually get to the end

00:14:59,630 --> 00:15:00,630
and we do that.

00:15:00,630 --> 00:15:01,990
This is one of my favorites, actually.

00:15:01,990 --> 00:15:03,660
It's just a nice little circle.

00:15:03,660 --> 00:15:06,440
It has little rainbow colors.

00:15:06,440 --> 00:15:10,800
I wanted to just, for a second, go back to analysis.

00:15:10,800 --> 00:15:15,940
Um, and this is just before we have lunch.

00:15:15,940 --> 00:15:18,610
Engage brain, or try and make this make sense.

00:15:18,610 --> 00:15:24,880
If we take this array of frequency velocities that we were talking about at the beginning

00:15:24,880 --> 00:15:27,380
of the talk, there is one thing about it.

00:15:27,380 --> 00:15:38,029
It goes from naught hertz to 20,000 Hz.

00:15:38,029 --> 00:15:40,860
This is a keyboard, or a piano.

00:15:40,860 --> 00:15:43,260
This is where it sits on that frequency scale.

00:15:43,260 --> 00:15:46,950
It only goes up to about 6,000 Hz.

00:15:46,950 --> 00:15:50,980
I'm not trying to give the experience of the notes.

00:15:50,980 --> 00:15:57,960
I'm trying to give a visualization based on the music that is being played.

00:15:57,960 --> 00:16:04,520
So I can use this as a guide and I can think, actually, that kind of top part of the array,

00:16:04,520 --> 00:16:06,120
I probably don't need that.

00:16:06,120 --> 00:16:09,970
It's probably not being used in music that we listen to.

00:16:09,970 --> 00:16:15,380
The other thing to note about this are you aware is it goes up in even steps.

00:16:15,380 --> 00:16:20,730
So each item is going to be, like, an even step of the last one.

00:16:20,730 --> 00:16:23,180
That's not how notes work.

00:16:23,180 --> 00:16:24,279
So this is a keyboard.

00:16:24,279 --> 00:16:30,690
I've highlighted some keys, A, on a keyboard, keys that are denoted in the letters, H, G,

00:16:30,690 --> 00:16:36,250
and they start again, so an A, and an A, and they're octaves apart and we say octaves because

00:16:36,250 --> 00:16:49,380
there's two As, and -- so this middle key here, this orange key,

00:16:49,380 --> 00:16:53,760
this is A. This runs at 440 Hz.

00:16:53,760 --> 00:16:59,550
The one below it, the purple A, runs at 220 Hz.

00:16:59,550 --> 00:17:01,930
That's a 220 Hz gap.

00:17:01,930 --> 00:17:05,250
The one above it, however, the green one, runs at 880 Hz.

00:17:05,250 --> 00:17:13,490
So that's a 440 Hz gap, they're not equaling, they're doubling.

00:17:13,490 --> 00:17:18,140
So to get a better analysis from the audio that we get from the API, we want to kind

00:17:18,140 --> 00:17:19,520
of do something like this.

00:17:19,520 --> 00:17:21,410
We slice the array.

00:17:21,410 --> 00:17:23,470
We kind of don't need that data, there's no point.

00:17:23,470 --> 00:17:26,920
Having it, and then I need to spread it out.

00:17:26,920 --> 00:17:30,400
So imagine function.

00:17:30,400 --> 00:17:33,630
It's too close to lunch.

00:17:33,630 --> 00:17:35,830
I won't go through it.

00:17:35,830 --> 00:17:39,500
And it is on the Internet -- I've written an article about it.

00:17:39,500 --> 00:17:44,100
So we're pushing this new data back into the data so just to confirm, I'm going to do it

00:17:44,100 --> 00:17:48,790
-- we've got seven and a half minutes left!

00:17:48,790 --> 00:17:50,450
And I've got a couple of examples for you.

00:17:50,450 --> 00:17:55,120
So this is -- let me just -- there we go.

00:17:55,120 --> 00:17:58,720
This is a visualization before I do anything on the data, and you can see that it's quite

00:17:58,720 --> 00:18:01,000
heavy towards the right.

00:18:01,000 --> 00:18:08,290
So this is where the analysis starts, is on the right.

00:18:08,290 --> 00:18:14,750
Afterwards, after we've run the function, we get something a little like this, which

00:18:14,750 --> 00:18:20,730
is much more spread out, and I think works better as a visualization and also it's going

00:18:20,730 --> 00:18:25,150
to be good if I want to do anything like low, middle, and high frequency detection because

00:18:25,150 --> 00:18:29,850
I can actually do it on the music that's basically playing, not the data that we get back from

00:18:29,850 --> 00:18:34,220
the audio API.

00:18:34,220 --> 00:18:36,840
So we have visualizations.

00:18:36,840 --> 00:18:37,840
That's the crux of it.

00:18:37,840 --> 00:18:38,840
You can all go in and make visualizations.

00:18:38,840 --> 00:18:39,840
That's great.

00:18:39,840 --> 00:18:49,960
I did some code that are not the final versions that I want to use, so you can go on CodePen,

00:18:49,960 --> 00:18:51,000
and have a look.

00:18:51,000 --> 00:18:54,890
One last thing, I'm checking my time here.

00:18:54,890 --> 00:18:57,400
How do I control these visuals?

00:18:57,400 --> 00:18:59,170
That's important, I'm going to be playing sets.

00:18:59,170 --> 00:19:03,080
And you're going to be playing sets of DJs, and they're going to be controlling stuff

00:19:03,080 --> 00:19:12,690
like decks and stuff.

00:19:12,690 --> 00:19:16,760
And try the Gamepad API.

00:19:16,760 --> 00:19:23,020
But the Gamepad, that's a little bit funky, and there's not a lot of control on the game

00:19:23,020 --> 00:19:24,020
pad.

00:19:24,020 --> 00:19:26,370
So there's the '80s API.

00:19:26,370 --> 00:19:35,510
It's a data protocol for instruments to talk to each other.

00:19:35,510 --> 00:19:41,970
And it came around 1993, and instruments manufacturers came together because there was a rise in

00:19:41,970 --> 00:19:46,970
electronic instruments in the '70s, and they said, wouldn't it be nice if these all could

00:19:46,970 --> 00:19:53,760
talk to each other, and they came up with this spec, the MIDI.

00:19:53,760 --> 00:19:55,890
This is a MIDI instrument.

00:19:55,890 --> 00:19:59,240
The big difference between a MIDI instrument and what I'm about to show you is this has

00:19:59,240 --> 00:20:03,210
onboard audio.

00:20:03,210 --> 00:20:09,330
I can plug this into my computer, and it would send MIDI data, but it also plays data standard

00:20:09,330 --> 00:20:18,330
alone but it can also talk to other instruments and orchestrate with those.

00:20:18,330 --> 00:20:22,500
We are so close to the end of the talk now.

00:20:22,500 --> 00:20:24,030
Useless talk.

00:20:24,030 --> 00:20:25,570
Never mind.

00:20:25,570 --> 00:20:27,870
Never mind, haha.

00:20:27,870 --> 00:20:28,870
MIDI instrument.

00:20:28,870 --> 00:20:31,980
The big difference between these and what you're probably more likely to see and want

00:20:31,980 --> 00:20:34,940
to use, which is this, is this is a MIDI controller.

00:20:34,940 --> 00:20:39,020
This doesn't have any onboard audio but it's still sending MIDI data so if you plug this

00:20:39,020 --> 00:20:43,240
into your computer and run some code like this, which is the Web MIDI API, you can pick

00:20:43,240 --> 00:20:48,080
up on the data it's sending, which is, again, just numbers and that's really cool.

00:20:48,080 --> 00:20:52,180
There's lots and lots of different MIDI controllers out there and if you search for them, you'll

00:20:52,180 --> 00:20:57,120
come up with loads of them and I recommend buying them and trying out that code because

00:20:57,120 --> 00:20:58,120
it's really fun.

00:20:58,120 --> 00:21:02,490
This is my MIDI controller, this is my Minin, this is the little one that I carry around

00:21:02,490 --> 00:21:03,490
in my handbag.

00:21:03,490 --> 00:21:13,220
This finds on Bluetooth, they used to run on DIN which was a round fat cable that which

00:21:13,220 --> 00:21:14,350
some of you might remember.

00:21:14,350 --> 00:21:26,269
Hope that the gods are being kind to me, I can use this to mix... it's worth in there

00:21:26,269 --> 00:21:27,440
but not in here.

00:21:27,440 --> 00:21:32,510
Let's see if that one will.

00:21:32,510 --> 00:21:33,510
No.

00:21:33,510 --> 00:21:36,740
It's not happening today.

00:21:36,740 --> 00:21:39,730
I can use this to mix my visuals and change them.

00:21:39,730 --> 00:21:43,480
So I can attach all the different things that I've made for the different buttons and then

00:21:43,480 --> 00:21:48,070
choose which ones come up at different times and then I can mix from one into the other,

00:21:48,070 --> 00:21:51,740
which is great.

00:21:51,740 --> 00:21:52,970
Whoo.

00:21:52,970 --> 00:21:56,160
Is any of this real?

00:21:56,160 --> 00:21:58,420
Kind of seems silly, doesn't it?

00:21:58,420 --> 00:22:02,290
I'm making crazy visualizations in the browser, and controlling them with little boxes of

00:22:02,290 --> 00:22:04,679
light pads.

00:22:04,679 --> 00:22:05,990
This is me.

00:22:05,990 --> 00:22:08,050
I have a little pocket projector.

00:22:08,050 --> 00:22:12,700
So I put my laptop and my MIDI controller and my projector in the bag, and I've kind

00:22:12,700 --> 00:22:19,080
of hacked the bag so you can unzip it, and kind of carry it around like an usherette

00:22:19,080 --> 00:22:25,280
tray, and so you can carry it around, and this is me projecting it on my local streets

00:22:25,280 --> 00:22:26,280
in my city.

00:22:26,280 --> 00:22:27,820
And I did this.

00:22:27,820 --> 00:22:28,820
This is a real thing.

00:22:28,820 --> 00:22:33,809
And this is running the software all in a browser and some people started talking to

00:22:33,809 --> 00:22:37,670
me on the Internet -- the Internets are good.

00:22:37,670 --> 00:22:41,390
And things like this happened.

00:22:41,390 --> 00:22:46,470
So there's a whole bunch of us doing similar things, taking web technologies and building

00:22:46,470 --> 00:22:47,980
things with it.

00:22:47,980 --> 00:22:51,720
They build music software with JavaScript, they control lights with JavaScript.

00:22:51,720 --> 00:22:56,590
I don't know whether you saw nested loops at the beginning of today, one of the guys,

00:22:56,590 --> 00:23:02,230
Martin, he was controlling all the lights via DMX, with JavaScript.

00:23:02,230 --> 00:23:04,680
LiveJS.network if you have to check us out.

00:23:04,680 --> 00:23:12,440
We have a stand with lots of MIDI controllers and we have lots -- and the music that you

00:23:12,440 --> 00:23:14,950
hear between the breaks that's us.

00:23:14,950 --> 00:23:18,890
And if you've got a GitHub organization, you gotta be real.

00:23:18,890 --> 00:23:23,620
If you've got a GitHub organization, that's, like, a badge of reality right there.

00:23:23,620 --> 00:23:25,840
And we play gigs.

00:23:25,840 --> 00:23:29,510
We're not just together at conferences, but we actually play gigs.

00:23:29,510 --> 00:23:33,240
So I can go do my day job and go and play a gig.

00:23:33,240 --> 00:23:34,240
Madness!

00:23:34,240 --> 00:23:36,799
We got to play a festival over the summer.

00:23:36,799 --> 00:23:43,710
There is one thing that I really, really want to address before I go, and that's this.

00:23:43,710 --> 00:23:50,290
You see, I don't think that my talk really picked up on what was really going on, and

00:23:50,290 --> 00:23:52,710
I'm sure you guys did, right?

00:23:52,710 --> 00:23:57,670
The keen among you will realize... um, sound?

00:23:57,670 --> 00:23:58,740
Nope?

00:23:58,740 --> 00:23:59,800
Okay.

00:23:59,800 --> 00:24:05,020
There was duct tape holding the portable VJ kit together.

00:24:05,020 --> 00:24:08,610
Of course there's duct tape holding everything together!

00:24:08,610 --> 00:24:12,179
Then, it's on a bike!

00:24:12,179 --> 00:24:13,179
Yes!

00:24:13,179 --> 00:24:16,400
Still more sound!

00:24:16,400 --> 00:24:18,020
This whole function is a workaround!

00:24:18,020 --> 00:24:19,020
Yeah!

00:24:19,020 --> 00:24:20,020
And -- drinking coffee!

00:24:20,020 --> 00:24:21,020
Thank you very, very much.

00:24:21,020 --> 00:24:22,020
All the music that you heard was by Canera.

00:24:22,020 --> 00:24:23,020
I recommend that you look her up on Soundcloud.

00:24:23,020 --> 00:24:24,960
And I'm @ruthjohn on the Internet.

00:24:24,960 --> 00:24:27,249
Come and talk to me over there!

00:24:27,249 --> 00:24:28,249
[ Applause ]

00:24:28,249 --> 00:24:29,249
>> Thank you so much, Ruth, that was super inspiring and really awesome, and I'm totally

00:24:29,249 --> 00:24:30,249
going to check out your booth later.

00:24:30,249 --> 00:24:31,249
So it is lunch.

00:24:31,249 --> 00:24:32,249
Who's hungry?

00:24:32,249 --> 00:24:33,249
There's food and there's also talks and community events and other stuff.

00:24:33,249 --> 00:24:34,249
There's so much going on in the festival area.

00:24:34,249 --> 00:24:35,249
If you want to find out more about Code Mirror, and UX School at Knight, there's going to

00:24:35,249 --> 00:24:36,380
be a community lunch during lunch -- a community talk during lunch.

00:24:36,380 --> 00:24:37,380
And there's also going to be a Rust Q&A at the Mozilla sponsor booth, and there'll be

00:24:37,380 --> 00:24:38,380
other things going on at the sponsor booth.

00:24:38,380 --> 00:24:39,380
So lots of things going on.

00:24:39,380 --> 00:24:40,380
Check it out.

00:24:40,380 --> 00:24:41,380
And we'll see you after lunch, in an hour.

00:24:41,380 --> 00:24:42,380
See you guys at 2:00!

00:24:42,380 --> 00:24:43,380
[ Lunch Break ]

00:24:43,380 --> 00:24:44,380
Also we sometimes have these slides saying that the talks are starting at 11:15.

00:24:44,380 --> 00:24:45,380
Sometimes the slides are wrong.

00:24:45,380 --> 00:24:46,380
The Internet schedules are right.

00:24:46,380 --> 00:24:46,880

YouTube URL: https://www.youtube.com/watch?v=Lby6fk5gC4k


