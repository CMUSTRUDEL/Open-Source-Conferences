Title: Anjana Vakil: Immutable data structures for functional JS | JSConf EU
Publication date: 2017-05-14
Playlist: JSConf EU 2017
Description: 
	http://2017.jsconf.eu/speakers/anjana-vakil-immutable-data-structures-for-functional-js.html

Functional programming has been gaining a lot of popularity in the JS community, and with good reason: rejecting side-effects and mutability - in-place changes to data - helps avoid a lot of headaches. But when you refuse to mutate objects, you have to create a whole new object each time something changes, which can slow things down and eat up memory, making functional programming seem inefficient.

That’s where immutable data structures come in - to save the day, and time and space! Also called “persistent data structures”, they help you efficiently make new “modified” versions of immutable objects, by reusing parts of the old object that you don’t need to change.

In this talk we’ll take a look at how these data structures work, why they’re fantastic for functional programming, and how we can easily use them in our JS code thanks to libraries like Mori and Immutable.js.
Captions: 
	00:00:03,139 --> 00:00:31,310
Hi, everybody.

00:00:31,310 --> 00:00:32,310
How we doing?

00:00:32,310 --> 00:00:34,140
We got caffeinated?

00:00:34,140 --> 00:00:35,370
Feeling good?

00:00:35,370 --> 00:00:36,370
Nice.

00:00:36,370 --> 00:00:39,809
So I'm Anjana Vakil, hello.

00:00:39,809 --> 00:00:44,870
You can find me on Twitter at my name and today I'd like to talk to you about immutable

00:00:44,870 --> 00:00:49,489
data structures for functional programming in JavaScript.

00:00:49,489 --> 00:00:54,930
We're going to take a look at what immutable data structures are, why they're a really

00:00:54,930 --> 00:00:59,820
cool way to handle the immutability that we typically use when we're doing functional

00:00:59,820 --> 00:01:06,350
programming and how we can do that in JavaScript because I hear y'all like JavaScript!

00:01:06,350 --> 00:01:09,150
So a little about me.

00:01:09,150 --> 00:01:12,290
I'm probably the only not-web-developer in the room.

00:01:12,290 --> 00:01:14,970
I am an engineer for Uber Research.

00:01:14,970 --> 00:01:20,470
I work with them to develop a custom query language for data in the scientific research

00:01:20,470 --> 00:01:21,850
funding domain.

00:01:21,850 --> 00:01:25,950
I'm also an alum of the Recurse Center, which is a fantastic programming community in New

00:01:25,950 --> 00:01:32,560
York City, and I am an alum of the Outreach Program, which if you have haven't heard of

00:01:32,560 --> 00:01:41,210
it, it's getting women and more folks involved in these by giving them internships at Mozilla.

00:01:41,210 --> 00:01:49,270
So I'm really happy to chat about those things if you want to come grab me after the talk.

00:01:49,270 --> 00:01:54,409
But you might know that I like functional programming.

00:01:54,409 --> 00:01:55,909
I think it rocks.

00:01:55,909 --> 00:01:59,770
Anybody else agree with me that functional programming is cool?

00:01:59,770 --> 00:02:00,770
Yeah!

00:02:00,770 --> 00:02:07,549
Yeah, so functional programming is a pretty great way to avoid some of the headaches of

00:02:07,549 --> 00:02:10,190
like imperative and object-oriented programming.

00:02:10,190 --> 00:02:15,400
In functional programming, what we typically do is conceive of our programs as being just

00:02:15,400 --> 00:02:16,730
pure functions.

00:02:16,730 --> 00:02:22,489
That means their transform their inputs to outputs, and that's all they do.

00:02:22,489 --> 00:02:29,200
They don't have my side effects like changing things in the console, and my taking things

00:02:29,200 --> 00:02:31,780
in the global state are side effects.

00:02:31,780 --> 00:02:38,210
But our data becomes data in, data out, and transformers of data.

00:02:38,210 --> 00:02:43,290
And one thing that goes hand-in-hand with this, with avoiding side effects is immutable

00:02:43,290 --> 00:02:44,610
data.

00:02:44,610 --> 00:02:48,000
Immutable data meaning once we've created it, it never changes.

00:02:48,000 --> 00:02:53,080
So this is a really good way of changing something accidental outside of your function.

00:02:53,080 --> 00:02:56,659
If everything is immutable, you can't change anything.

00:02:56,659 --> 00:03:02,720
So immutability another thing that rocks and it rocks pretty hard for other reasons that

00:03:02,720 --> 00:03:04,160
we'll see in a moment.

00:03:04,160 --> 00:03:07,659
But speaking of rocks, let's talk about rocks.

00:03:07,659 --> 00:03:14,110
So this is a rock, and immutability rocks in the way that rocks rock.

00:03:14,110 --> 00:03:18,049
Now I don't know about you, but I've been going to a lot of tech conferences recently

00:03:18,049 --> 00:03:21,849
and I've been feeling like there has enough poetry.

00:03:21,849 --> 00:03:28,290
So I'd like to read you a poem: Nobody sits like this rock sits.

00:03:28,290 --> 00:03:30,379
You rock, rock.

00:03:30,379 --> 00:03:33,629
The rock just sits and is.

00:03:33,629 --> 00:03:36,439
You show us how to just sit here.

00:03:36,439 --> 00:03:38,299
And that's what we need.

00:03:38,299 --> 00:03:40,730
It's so true, so deep.

00:03:40,730 --> 00:03:45,430
This is from -- Don't thank me, thank I Heart Huckabees, that's

00:03:45,430 --> 00:03:46,430
a great movie.

00:03:46,430 --> 00:03:48,080
Check it out.

00:03:48,080 --> 00:03:51,799
So this is really how immutable data rocks.

00:03:51,799 --> 00:03:53,439
It just sits there.

00:03:53,439 --> 00:03:54,439
It just is.

00:03:54,439 --> 00:03:58,931
Once we've created it, it never changes and that's amazing because it can help us avoid

00:03:58,931 --> 00:04:01,549
some of the headaches of immutability.

00:04:01,549 --> 00:04:08,090
So with immutability, we have some things pretty easy, but other things become harder

00:04:08,090 --> 00:04:09,250
and we'll see how that looks.

00:04:09,250 --> 00:04:13,521
So let's say I have an array called foo and it's got some numbers in it.

00:04:13,521 --> 00:04:16,470
Hm, and I'm already bored.

00:04:16,470 --> 00:04:17,500
Let's make it more fun.

00:04:17,500 --> 00:04:23,490
Let's say I have a zoo with some animals -- more fun!

00:04:23,490 --> 00:04:26,520
And I decided that I want to change something up about my zoo.

00:04:26,520 --> 00:04:30,130
Maybe I want to replace that rabbit there with something a little more exotic.

00:04:30,130 --> 00:04:32,730
Like an alien!

00:04:32,730 --> 00:04:33,730
So this is cool.

00:04:33,730 --> 00:04:36,250
I'm happy because I wanted a more exotic zoo.

00:04:36,250 --> 00:04:38,010
I got an alien in my zoo now.

00:04:38,010 --> 00:04:42,390
I didn't have to change anything except for that one little cell in my array.

00:04:42,390 --> 00:04:49,300
That's pretty sweet but my co-worker over was expecting zoo to be filled with earth

00:04:49,300 --> 00:04:54,550
beings, earth animals, and wasn't accounting for there being an alien in it.

00:04:54,550 --> 00:04:56,510
Who put that in there?

00:04:56,510 --> 00:04:58,820
Now my program doesn't work anymore.

00:04:58,820 --> 00:05:00,420
Who did that?

00:05:00,420 --> 00:05:04,590
So immutability has a couple problems.

00:05:04,590 --> 00:05:10,690
We have to manage who's been changing what, when -- who's been putting which animals in

00:05:10,690 --> 00:05:11,690
the zoo.

00:05:11,690 --> 00:05:16,880
We have to have a lot of overhead to manage that state, and that gives us headaches as

00:05:16,880 --> 00:05:19,690
individuals, and as teams.

00:05:19,690 --> 00:05:23,970
We also get bugs in the code because maybe I was only planning -- or my co-worker was

00:05:23,970 --> 00:05:30,140
only planning -- to handle terrestrial beings and didn't have a case of aliens being accounted

00:05:30,140 --> 00:05:32,780
for, and that broke something.

00:05:32,780 --> 00:05:37,390
So these are some side effects of immutability that don't make us happy.

00:05:37,390 --> 00:05:40,460
Let's try doing things the immutable way.

00:05:40,460 --> 00:05:47,150
So in an immutable world, my array, my zoo, once I've created it, it just sits and is

00:05:47,150 --> 00:05:48,150
forever.

00:05:48,150 --> 00:05:50,280
I cannot change it.

00:05:50,280 --> 00:05:56,300
What I can do if I want a new zoo that's more exotic is I can make a copy that's the same

00:05:56,300 --> 00:06:03,470
size as my original array, and I can make the modification I want, so I can put my alien

00:06:03,470 --> 00:06:05,050
in there in place of the rabbit.

00:06:05,050 --> 00:06:15,010
And so this is pretty sweet because now my co-worker is maybe, and they're, like, whoo,

00:06:15,010 --> 00:06:20,720
nothing broke in my program, and it's all still animal creatures but I had to copy over

00:06:20,720 --> 00:06:21,970
that whole array.

00:06:21,970 --> 00:06:28,590
I had to allocate the space for that entire array, even all of the stuff that didn't change.

00:06:28,590 --> 00:06:32,100
I had to copy all of that over, as well.

00:06:32,100 --> 00:06:35,440
So this means that my code runs pretty slow.

00:06:35,440 --> 00:06:37,090
And it also takes up a lot of memory.

00:06:37,090 --> 00:06:39,460
It takes up a lot of space and time.

00:06:39,460 --> 00:06:44,710
The complexity on those things are bad because copying is a waste of both time and space.

00:06:44,710 --> 00:06:46,090
It makes us sad face!

00:06:46,090 --> 00:06:47,220
We don't want that.

00:06:47,220 --> 00:06:52,040
So if we want to do immutability, we must be able to find a better way of doing that.

00:06:52,040 --> 00:06:57,090
Luckily for us, a lot of very smart folks have been thinking very hard about this problem

00:06:57,090 --> 00:07:00,080
for a while, and they've come up with some really good solutions for how we can deal

00:07:00,080 --> 00:07:02,130
with immutability efficiently.

00:07:02,130 --> 00:07:05,500
immutable data structures!

00:07:05,500 --> 00:07:10,660
So immutable data structures is a term that you may have heard about, with functional

00:07:10,660 --> 00:07:14,570
programming, or also in terms of React where they come in handy.

00:07:14,570 --> 00:07:21,780
Technically, an immutable data structure is like the rock, it just sits, and is once you

00:07:21,780 --> 00:07:22,780
create it.

00:07:22,780 --> 00:07:24,440
It never changes.

00:07:24,440 --> 00:07:28,310
But also hear the term persistent data structures banged about.

00:07:28,310 --> 00:07:31,160
Sometimes these are used interchangeably, but they have slightly different meanings.

00:07:31,160 --> 00:07:38,690
So if immutable data is data that never changes, persistent data is data for which we have

00:07:38,690 --> 00:07:40,660
access to old versions.

00:07:40,660 --> 00:07:46,780
So as we've been creating new modified versions of our data structures, we keep the old versions

00:07:46,780 --> 00:07:48,160
around.

00:07:48,160 --> 00:07:53,280
You might hear about partially persistent data structures where we can look at the old

00:07:53,280 --> 00:07:57,020
versions, we can access them, but we can't go back and update any of them.

00:07:57,020 --> 00:08:01,400
All we can update is the most current version that we have.

00:08:01,400 --> 00:08:05,940
And then you might also hear about fully persistent data structures where we can actually time

00:08:05,940 --> 00:08:09,500
travel, we can go back and update any of our past versions.

00:08:09,500 --> 00:08:15,610
And if this is starting to ring a bell like it's version control like git, it's sort of

00:08:15,610 --> 00:08:17,280
the same idea.

00:08:17,280 --> 00:08:21,590
So we're going to talk about these as persistent immutable data structures, they're both persistent,

00:08:21,590 --> 00:08:22,970
and immutable.

00:08:22,970 --> 00:08:26,340
Let's see how this works.

00:08:26,340 --> 00:08:30,930
The key to all of this is we want the old versions of our data, like, my original zoo

00:08:30,930 --> 00:08:31,930
to stay put.

00:08:31,930 --> 00:08:37,660
We just want to to sit like the rock but we want new versions to be created efficiently.

00:08:37,660 --> 00:08:44,520
So what magical tricks do we have to use to, like, make this happen?

00:08:44,520 --> 00:08:51,940
Do we have to make invocations do dances to the gods of space and time complexity?

00:08:51,940 --> 00:08:53,010
No.

00:08:53,010 --> 00:08:54,670
It's very simple.

00:08:54,670 --> 00:08:56,790
Trees and sharing.

00:08:56,790 --> 00:08:58,900
Isn't that sweet?

00:08:58,900 --> 00:09:03,580
These two simple concepts will get us efficient immutable data.

00:09:03,580 --> 00:09:05,220
How?

00:09:05,220 --> 00:09:09,100
So let's talk about trees because trees rock pretty hard, as well, alternative, unfortunately

00:09:09,100 --> 00:09:13,300
I don't have a poem for that, sorry.

00:09:13,300 --> 00:09:19,220
Imagine that we could find a way to represent our zoo array as a tree.

00:09:19,220 --> 00:09:23,260
So one thing I could do is I could put all of my animals -- all of my values -- in the

00:09:23,260 --> 00:09:28,890
leaves of a tree, and I could make it so that each leaf holds one value, one animal.

00:09:28,890 --> 00:09:31,460
But they might get lonely, so let's put them with a buddy.

00:09:31,460 --> 00:09:33,570
Let's put them 2x2.

00:09:33,570 --> 00:09:37,530
So each of our leaves will have two values and we'll hope that the buddies get along

00:09:37,530 --> 00:09:43,770
and not each each other -- looking at you, tiger, number six, don't eat that koala, and

00:09:43,770 --> 00:09:49,931
we can go up to intermediate nodes up and up, until we get to the root node of the whole

00:09:49,931 --> 00:09:57,240
structure, and now that root is an array represented previously by a tree.

00:09:57,240 --> 00:10:01,910
So this is my tree now in this structure.

00:10:01,910 --> 00:10:05,880
So given this type of structure, how do we update something?

00:10:05,880 --> 00:10:09,470
Given that my data is immutable, and it can never change, how can I handle the fact that

00:10:09,470 --> 00:10:12,870
it has an alien in it.

00:10:12,870 --> 00:10:17,590
So here what I would do is I would take the node that contains the value that I want to

00:10:17,590 --> 00:10:18,590
change.

00:10:18,590 --> 00:10:26,890
So in this case it would be the 0/1 node that you see on the bottom of the screen.

00:10:26,890 --> 00:10:31,170
And so I make a new copy where I've still got my monkey but I've changed the rabbit

00:10:31,170 --> 00:10:34,170
to an alien.

00:10:34,170 --> 00:10:39,590
And then I need to copy any of the intermediate nodes in the tree that were pointing to the

00:10:39,590 --> 00:10:41,110
node that I changed.

00:10:41,110 --> 00:10:46,330
So I basically trace a path up towards the root of the tree, which, now, I've got a new

00:10:46,330 --> 00:10:51,280
root, which means another version of the data structure.

00:10:51,280 --> 00:10:57,050
So this technique of making this update by copying the path from the leaf I changed to

00:10:57,050 --> 00:10:59,230
the root is called path copying.

00:10:59,230 --> 00:11:04,200
That's pretty cool because now I didn't have to copy the entire array; I just had to copy

00:11:04,200 --> 00:11:10,080
the nodes on the way from the root to the leaf that I changed.

00:11:10,080 --> 00:11:14,720
So if we've turned in something linear and copying into something logarithm.

00:11:14,720 --> 00:11:20,170
That's pretty cool, that's more performant, and the data of this is that all of these

00:11:20,170 --> 00:11:25,910
nodes in yellow here, so most of the tree is shared between the two versions, between

00:11:25,910 --> 00:11:27,100
the old version and the new.

00:11:27,100 --> 00:11:32,030
And so this saves me a lot of space because I can actually reuse the parts of the original

00:11:32,030 --> 00:11:36,680
version that didn't change, whereas, before, I had to copy those over, as well.

00:11:36,680 --> 00:11:41,300
So this means that what was before, like, a lot of memory consumption becomes a lot

00:11:41,300 --> 00:11:46,080
smaller because you don't have to store as many copies of the things if they didn't change.

00:11:46,080 --> 00:11:50,670
And that's called structural changing because we're sharing the structure of the tree between

00:11:50,670 --> 00:11:53,370
the two versions.

00:11:53,370 --> 00:11:59,690
So we've been talking about updating things but how do we get at the values in our data

00:11:59,690 --> 00:12:00,690
structure?

00:12:00,690 --> 00:12:01,690
How do we access them?

00:12:01,690 --> 00:12:06,640
Well, it turns out this isn't just a tree, it's a special type of tree called a TRIE

00:12:06,640 --> 00:12:13,050
tree, which originally came from the world "retrieval," so people could, I guess, call

00:12:13,050 --> 00:12:19,670
it tree, which is funny because we also call TREE trees, so we can call them "tries" if

00:12:19,670 --> 00:12:20,670
we want.

00:12:20,670 --> 00:12:31,730
So a try is a type of tree, where the leaves represent the values, and the paths to the

00:12:31,730 --> 00:12:37,279
value are the keys that that data is associated with.

00:12:37,279 --> 00:12:41,620
So often you see TRIEs with values stored as keys.

00:12:41,620 --> 00:12:49,460
So, for example, if I have T stored as a key, what I do to get to the T is I trace the tree

00:12:49,460 --> 00:12:53,290
one letter at a time.

00:12:53,290 --> 00:12:58,880
Then I go to T, and then to E, and then to EA, is my key, and then my value there is

00:12:58,880 --> 00:13:00,300
three.

00:13:00,300 --> 00:13:05,060
Because everything at the end sounds like "ee" in this talk.

00:13:05,060 --> 00:13:11,480
So this is pretty cool, but in our data structure, we weren't using words, we just wanted an

00:13:11,480 --> 00:13:14,830
array-type thing, we wanted indeces, right?

00:13:14,830 --> 00:13:22,130
So the insight here is if we treat the index as a binary number, then we can pretend that

00:13:22,130 --> 00:13:27,640
that's kind of, like, our word and we can descend the tree, bit-by-bit as if each representation

00:13:27,640 --> 00:13:32,230
of our binary representation is a letter.

00:13:32,230 --> 00:13:33,880
So let's see how that works.

00:13:33,880 --> 00:13:40,529
If I'm trying to get at item five in my array, so the animal at index five, I'd convert that

00:13:40,529 --> 00:13:46,580
to binary, so that's one, zero, one, and then I step through that as if it was a word.

00:13:46,580 --> 00:13:49,850
I step through it letter-by-letter, bit-by-bit.

00:13:49,850 --> 00:13:54,010
So I go from the root to the branch.

00:13:54,010 --> 00:13:55,600
I have a choice of either zero or one.

00:13:55,600 --> 00:13:57,060
I go to branch one first.

00:13:57,060 --> 00:14:03,270
And then I go to branch zero, and then I take the thing on the one side.

00:14:03,270 --> 00:14:09,940
So I go one, zero, one, down my tree and then I end up at my frog at index five.

00:14:09,940 --> 00:14:15,230
So this is a pretty simple insight but it ends up being incredibly powerful because

00:14:15,230 --> 00:14:21,850
it allows us to quickly traverse this tree structure, which lets us use that structural

00:14:21,850 --> 00:14:27,830
sharing to more efficiently represent our new copies of our immutable data structure.

00:14:27,830 --> 00:14:34,529
And, importantly, we don't have to be using a binary tree, meaning we have two branches

00:14:34,529 --> 00:14:37,320
from each node.

00:14:37,320 --> 00:14:42,730
That fits pretty well on a slide, but actually what you mostly see is a 32-way branching.

00:14:42,730 --> 00:14:47,670
So in our trees that we've been looking at, we've kind of had one bit of information per

00:14:47,670 --> 00:14:48,670
level.

00:14:48,670 --> 00:14:55,110
And we've been descending bit-by-bit but if we had a 32-way branching tree, it would be

00:14:55,110 --> 00:14:58,620
five bits of information that we would be representing at each level.

00:14:58,620 --> 00:15:01,110
So that would look something like this.

00:15:01,110 --> 00:15:10,070
If we had a much bigger number, like, 18,977, in binary, that's that bunch of ones and zeros.

00:15:10,070 --> 00:15:13,670
This would be a really deep tree if I had to descend into it one at a time, it would

00:15:13,670 --> 00:15:15,350
be like 15 levels deep.

00:15:15,350 --> 00:15:17,070
Too much, too long.

00:15:17,070 --> 00:15:24,900
So if I'd make more branches at each level, then I can chunk this up into kind of 5-bit

00:15:24,900 --> 00:15:33,790
letters as it were, and descend the tree that it's now only three levels using the 32-way

00:15:33,790 --> 00:15:35,000
branching.

00:15:35,000 --> 00:15:40,800
So this is kind of a tradeoff between how deep your tree is going to be, and how big

00:15:40,800 --> 00:15:44,930
the nodes are going to be because if I have just one bit of information at each level

00:15:44,930 --> 00:15:46,390
then I have really small nodes.

00:15:46,390 --> 00:15:50,380
That's quick to copy over but I have to go very, very deep down in the tree for a larger

00:15:50,380 --> 00:15:51,380
array.

00:15:51,380 --> 00:15:56,980
And generally, research has found that 32 is a pretty good tradeoff between the depth

00:15:56,980 --> 00:15:59,420
of the tree.

00:15:59,420 --> 00:16:05,040
So what we've seen is a bitmap vector TRIE.

00:16:05,040 --> 00:16:08,310
That's just jargon.

00:16:08,310 --> 00:16:09,440
We don't need to care about that.

00:16:09,440 --> 00:16:13,550
But if you need something to Google, you can Google that.

00:16:13,550 --> 00:16:18,690
This is cool for array-type of things and we have an index we want to jump there, but

00:16:18,690 --> 00:16:19,690
what about objects?

00:16:19,690 --> 00:16:25,151
We also want to be able to associate objects with arbitrary keys, not just indeces, so

00:16:25,151 --> 00:16:29,800
we want non-integers as keys, how does that work?

00:16:29,800 --> 00:16:33,260
So if I want a version of my data structure where it's no longer an array but it's something

00:16:33,260 --> 00:16:38,000
like an object where I'm associated letters with each of my animals like M for monkey,

00:16:38,000 --> 00:16:44,520
and P for panda, et cetera, what I can do is I can take my keys, in this case, they're

00:16:44,520 --> 00:16:48,540
letters, and hash them to get a number that represents the key.

00:16:48,540 --> 00:16:52,160
So that each key will have its own number.

00:16:52,160 --> 00:16:54,980
They won't be in order necessarily, but that's okay.

00:16:54,980 --> 00:16:56,430
Objects don't have to be in order.

00:16:56,430 --> 00:17:03,610
And then we can use the hash of that number in binary to descend the tree as before.

00:17:03,610 --> 00:17:10,020
So if I wanted to look up the value associated with key "F," I could hash F, get some number,

00:17:10,020 --> 00:17:14,429
and let's say I get five, like, A, B, C, D, E, five.

00:17:14,429 --> 00:17:19,189
And that would be represented in binary as one, and I descend the tree as before, here,

00:17:19,189 --> 00:17:23,420
for simplicity, just using a one bit at a time, two-way branching tree.

00:17:23,420 --> 00:17:28,000
But typically we would be doing this with 32 branches per level.

00:17:28,000 --> 00:17:34,820
So, again, we just descend the tree using the binary representation of our key, in this

00:17:34,820 --> 00:17:40,220
case, we used a hash function to transform it from some arbitrary object into a number

00:17:40,220 --> 00:17:43,809
and we get the animal we want -- in this case, our frog.

00:17:43,809 --> 00:17:44,809
Cool.

00:17:44,809 --> 00:17:51,120
So that, if you want to Google it, the thing you could Google is a hash array mapped TRIE.

00:17:51,120 --> 00:17:57,110
And this was a data structure parented by Phil Bagwell, and Rich Hickey, kind of started

00:17:57,110 --> 00:18:03,481
using it, and a lot of these an implemented in languages like Clojure to implement the

00:18:03,481 --> 00:18:05,730
data efficiently.

00:18:05,730 --> 00:18:12,300
There's a ton of optimizations that are usually done on these data structures to make them

00:18:12,300 --> 00:18:17,550
super-duper fast and lots of details that we're not covering here but this is the basic

00:18:17,550 --> 00:18:19,120
idea.

00:18:19,120 --> 00:18:25,050
Trees to represent our data, structural sharing so that we can reuse as much information as

00:18:25,050 --> 00:18:28,970
possible between the old versions and the new versions.

00:18:28,970 --> 00:18:38,260
And this idea of using binary representations of our keys, whether indeces, or hashed keys

00:18:38,260 --> 00:18:42,590
to descend the tree to find the thing we're looking for.

00:18:42,590 --> 00:18:47,730
So to recap, mutability induces headaches.

00:18:47,730 --> 00:18:52,240
It is to be avoided especially if you're doing functional programming where the essential

00:18:52,240 --> 00:18:58,540
idea is to not have side effects and only be using pure functions that don't change

00:18:58,540 --> 00:19:03,520
anything except do the computation on the input and return the output.

00:19:03,520 --> 00:19:07,710
Immutability, on the other hand, is great because if I'm using immutable data, I can't

00:19:07,710 --> 00:19:13,990
mess up my co-worker's program by making the zoo she only thought was animals suddenly

00:19:13,990 --> 00:19:15,390
have an alien in it.

00:19:15,390 --> 00:19:21,610
But copying is a really bad way of handling data because it is not efficient neither with

00:19:21,610 --> 00:19:24,100
respect to time, nor space.

00:19:24,100 --> 00:19:30,770
And structural sharing, using these tree structures -- or TRIE structures, and sharing as much

00:19:30,770 --> 00:19:35,720
information from one version to the next is the really performant way to do this.

00:19:35,720 --> 00:19:40,750
And so you're probably thinking, okay, these data structures are pretty cool.

00:19:40,750 --> 00:19:42,740
But what am I supposed to do with them?

00:19:42,740 --> 00:19:47,690
I'm not going to be building boxes of emoji here, am I?

00:19:47,690 --> 00:19:50,280
No, you don't have to.

00:19:50,280 --> 00:19:55,760
In JavaScript, there are some really great libraries out there to help you use these

00:19:55,760 --> 00:19:57,170
right off the bat.

00:19:57,170 --> 00:20:00,710
There are various solutions but I'm going to talk about a couple of them.

00:20:00,710 --> 00:20:02,590
So one is called Mori.

00:20:02,590 --> 00:20:08,480
Mori is basically a port of Clojure script by David Nolan that allows you to leverage

00:20:08,480 --> 00:20:13,830
the implementations of these data structures from ClojureScript, which is the version of

00:20:13,830 --> 00:20:21,130
Clojure which targets JavaScript from the comfort of your vanilla JavaScript.

00:20:21,130 --> 00:20:23,770
And it's got a bit more of a Clojure feel to it.

00:20:23,770 --> 00:20:26,760
A bit more of a functional language feel.

00:20:26,760 --> 00:20:30,490
The API is functional and we're going to see what that looks like in a moment.

00:20:30,490 --> 00:20:32,840
But that's one thing that kind of sets this library apart.

00:20:32,840 --> 00:20:36,870
On the other hand, there's also Immutable.js.

00:20:36,870 --> 00:20:38,929
This is a library put out by Facebook.

00:20:38,929 --> 00:20:41,610
It was created by Lee Byron.

00:20:41,610 --> 00:20:45,450
And this is a JavaScript implementation of these data structures.

00:20:45,450 --> 00:20:48,590
So it has a bit more of that native JavaScript feel to it.

00:20:48,590 --> 00:20:52,220
It doesn't have kind of the Clojure background brought in.

00:20:52,220 --> 00:20:57,780
And that means it's got a more object-oriented style API, although it is still returning

00:20:57,780 --> 00:21:05,910
new versions of data structures instead of changing mutable structures in place.

00:21:05,910 --> 00:21:08,049
So let's see what those look like.

00:21:08,049 --> 00:21:10,641
This is how you might use Mori to create what's called a vector.

00:21:10,641 --> 00:21:18,830
A vector is the data structure from Mori that you'd probably be using as an array-type thing.

00:21:18,830 --> 00:21:22,700
So I've got a vector that I'm calling A because it's sort of array-ish.

00:21:22,700 --> 00:21:25,950
It's got one and two in it.

00:21:25,950 --> 00:21:31,050
And if I want to push something onto that, the function that I'd use is conj.

00:21:31,050 --> 00:21:34,650
This is from the Clojure called, Lisp-speak.

00:21:34,650 --> 00:21:42,890
And what I would put in is the original A, and then what I want, which is, in this case,

00:21:42,890 --> 00:21:44,090
three.

00:21:44,090 --> 00:21:47,600
And you'll see that this creates this new structure on the right.

00:21:47,600 --> 00:21:56,170
These vector, one, two, and one, two, three, they look different because they're not really

00:21:56,170 --> 00:22:00,049
JavaScript arrays although you can convert back and forth.

00:22:00,049 --> 00:22:07,200
But the point is this cong function returns a new value which I can catch as A2 and I

00:22:07,200 --> 00:22:11,860
can prove to myself that my original A didn't change by using the count function to see

00:22:11,860 --> 00:22:12,860
how many things are in it.

00:22:12,860 --> 00:22:15,140
And there's only two things in it.

00:22:15,140 --> 00:22:21,080
But I can prove that my version, A2, has the third thing by trying to access, by using

00:22:21,080 --> 00:22:26,940
the get function to trying to get two, which it tells me, it is indeed three.

00:22:26,940 --> 00:22:32,350
This is the same thing that you would use in Immutable.js.

00:22:32,350 --> 00:22:38,890
Here you would use Immutable.js.list.of, that's interesting syntax.

00:22:38,890 --> 00:22:43,600
But it creates something more like a JavaScript array.

00:22:43,600 --> 00:22:49,900
Although it is not an array, it is a JS list.

00:22:49,900 --> 00:22:56,670
That I'll call an array and if I want to add something onto a new version of A, I use this

00:22:56,670 --> 00:22:59,620
sort of dot-method notation that we're used to.

00:22:59,620 --> 00:23:03,299
I'd say a.push(3), but, importantly, this is not changing a.

00:23:03,299 --> 00:23:13,049
It's just returning a new value of a, which I'm going to capture as a2 and I can prove

00:23:13,049 --> 00:23:14,559
to myself that it didn't change.

00:23:14,559 --> 00:23:22,350
A.size tells me it's two, and if I try to get the item at index two, I find that it's

00:23:22,350 --> 00:23:26,390
three, as I expected.

00:23:26,390 --> 00:23:33,679
So, similarly, for what are called maps, which is kind of the key-value object that we might

00:23:33,679 --> 00:23:39,470
be using, if I create an object, o, which is going to be my Mori hashmap data structure,

00:23:39,470 --> 00:23:45,230
I'm associating a is one, b with two, again, we see that the syntax is a little different

00:23:45,230 --> 00:23:48,620
from our regular JavaScript beastlier not regular JavaScript objects.

00:23:48,620 --> 00:23:52,250
They're super special immutable data structures, they need special syntax.

00:23:52,250 --> 00:24:01,870
And so if I want to change the value of one of my keys, I can use this asoc function,

00:24:01,870 --> 00:24:06,840
and then change the value of three in my new version, o2, and then I can prove to myself

00:24:06,840 --> 00:24:12,200
that the original didn't change by using the get function to make sure that a in the original

00:24:12,200 --> 00:24:18,320
one -- o, is one, and the a in o2 is three, as I would expect.

00:24:18,320 --> 00:24:23,490
And it looks quite similar in Immutable.js except the structure is called map, not hashmap,

00:24:23,490 --> 00:24:31,190
and I can pass in a little JavaScript object, and it gives me a little o, a little more

00:24:31,190 --> 00:24:33,190
JavaScript syntax than we're used to.

00:24:33,190 --> 00:24:39,230
This has a bit more of a syntax and feel that you might be used to from JavaScript programming,

00:24:39,230 --> 00:24:45,330
I can use the set method on o to create a new version where a is now three, and I can

00:24:45,330 --> 00:24:50,870
use the get methods on my old version o, and my new-version o2 to prove to myself that

00:24:50,870 --> 00:24:52,720
the old one didn't change.

00:24:52,720 --> 00:24:55,150
So these are really immutable data structures.

00:24:55,150 --> 00:25:02,030
They look really weird if you try to look at them in the console just as JavaScript

00:25:02,030 --> 00:25:03,030
objects.

00:25:03,030 --> 00:25:06,030
They're really fun to kind of poke down into because they have this complicated tree structure.

00:25:06,030 --> 00:25:09,650
So I highly recommend that you try out these libraries and see what works for you.

00:25:09,650 --> 00:25:15,340
I can tell you really just briefly before I run out of time here, that how they compare

00:25:15,340 --> 00:25:22,830
is basically, again, Mori is from the Clojure world, it's ClojureScript.

00:25:22,830 --> 00:25:32,370
But the Immutable.js has more of the o.get() kind of feel to it, if you're comfortable

00:25:32,370 --> 00:25:34,429
writing JavaScript like that.

00:25:34,429 --> 00:25:39,240
However, for me, it gives me a little bit of a cognitive dissonance there because it

00:25:39,240 --> 00:25:46,220
looks like we're mutating things with those calls -- we're not -- but for me, to get more

00:25:46,220 --> 00:25:50,880
into the mindset of functional programming, I prefer the functional programming of Mori

00:25:50,880 --> 00:25:59,160
because it gets to the way that we conceive things as inputs and not just outs.

00:25:59,160 --> 00:26:05,049
We don't want to be in the mindset of making changes in place to objects.

00:26:05,049 --> 00:26:10,000
There's also some minor performance differences between the two, Mori is a bit faster, and

00:26:10,000 --> 00:26:11,570
Immutable.js is a bit smaller.

00:26:11,570 --> 00:26:16,090
But they're both great options, try them out, and I hope one of them works for you.

00:26:16,090 --> 00:26:18,150
So that's my talk.

00:26:18,150 --> 00:26:19,650
I hope it's been useful.

00:26:19,650 --> 00:26:23,230
Go forth and don't mutate your data!

00:26:23,230 --> 00:26:24,340

YouTube URL: https://www.youtube.com/watch?v=Wo0qiGPSV-s


