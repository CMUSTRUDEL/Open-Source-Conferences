Title: Matthew Shotton:  Dynamic video in the browser | JSConf EU 2017
Publication date: 2017-06-06
Playlist: JSConf EU 2017
Description: 
	http://2017.jsconf.eu/speakers/matthew-shotton-dynamic-video-in-the-browser.html

Rather than just playing videos in the browser; what if you could edit and composite them on the fly?

Just as the Web Audio API allowed for dynamic audio manipulation, we can now do similar things for video, opening up the creative possibilities for interactive visual experiences on the web.

In this talk I’ll show you how, with some live coded demos using an open source library. I’ll also talk about how the BBC is using these techniques to explore the future of TV.
Captions: 
	00:00:00,110 --> 00:00:11,859
[Music]

00:00:08,730 --> 00:00:11,859
[Applause]

00:00:13,510 --> 00:00:27,559
[Music]

00:00:28,580 --> 00:00:34,500
hi so I'm Matthew Sean I'm I work for

00:00:31,920 --> 00:00:36,300
the BBC and today I'm going to talk to

00:00:34,500 --> 00:00:39,870
you about doing dynamic video in the

00:00:36,300 --> 00:00:42,030
browser but the for all of that I want

00:00:39,870 --> 00:00:46,260
to give you a brief history of

00:00:42,030 --> 00:00:47,730
broadcasting in emoji so in the

00:00:46,260 --> 00:00:49,890
beginning people transferred knowledge

00:00:47,730 --> 00:00:52,320
News knowledge and stories by word of

00:00:49,890 --> 00:00:56,010
mouth and this information would change

00:00:52,320 --> 00:00:58,170
and adapt over time then the written

00:00:56,010 --> 00:01:00,270
word came along and this allowed these

00:00:58,170 --> 00:01:01,829
news information and stories to be

00:01:00,270 --> 00:01:05,220
locked down to a single representation

00:01:01,829 --> 00:01:06,930
and this was almost the first form of

00:01:05,220 --> 00:01:13,140
broadcasting except it was very very

00:01:06,930 --> 00:01:15,390
slow then radio came along and for the

00:01:13,140 --> 00:01:16,950
first time information could be

00:01:15,390 --> 00:01:21,840
delivered to millions of people live

00:01:16,950 --> 00:01:23,909
from a single central authority that was

00:01:21,840 --> 00:01:26,030
shortly followed by TV which was very

00:01:23,909 --> 00:01:30,780
much the same except we added pictures

00:01:26,030 --> 00:01:32,759
and then Along Came the Internet this

00:01:30,780 --> 00:01:34,860
distributed network of communication

00:01:32,759 --> 00:01:37,740
that had the potential to let anyone

00:01:34,860 --> 00:01:42,329
speak to millions of people and it was

00:01:37,740 --> 00:01:45,810
amazing and a bunch of really good

00:01:42,329 --> 00:01:47,759
people worked really really hard and we

00:01:45,810 --> 00:01:49,530
learned how to fit the radio and the

00:01:47,759 --> 00:01:55,070
television over the same pipes of the

00:01:49,530 --> 00:01:57,450
cats but the internet isn't broadcasting

00:01:55,070 --> 00:02:00,329
it's something different with its own

00:01:57,450 --> 00:02:02,460
exciting possibilities and that could be

00:02:00,329 --> 00:02:05,909
a bit of an existential crisis for a

00:02:02,460 --> 00:02:08,009
company with broadcasting in its name so

00:02:05,909 --> 00:02:09,509
hello I'm Matthew chaton I work in

00:02:08,009 --> 00:02:12,590
research and development in the UX team

00:02:09,509 --> 00:02:14,209
at the British Broadcasting Corporation

00:02:12,590 --> 00:02:15,470
I love making things as well this is

00:02:14,209 --> 00:02:17,209
some stuff I made I just put it in

00:02:15,470 --> 00:02:19,430
because I really love making stuff so I

00:02:17,209 --> 00:02:21,650
like physical things so it is like 3d

00:02:19,430 --> 00:02:23,750
printers and giant torches and stuff but

00:02:21,650 --> 00:02:25,190
I'm going to talk to you today about a

00:02:23,750 --> 00:02:30,080
software project I've been building at

00:02:25,190 --> 00:02:32,239
work called the video context so the

00:02:30,080 --> 00:02:35,840
video context is an open source library

00:02:32,239 --> 00:02:37,610
developed by BBC R&D and its aim is to

00:02:35,840 --> 00:02:40,910
make it really easy to make interactive

00:02:37,610 --> 00:02:42,830
video on the web and can I get a quick

00:02:40,910 --> 00:02:46,010
hands up who's use the Web Audio API at

00:02:42,830 --> 00:02:48,440
all okay so a couple if that's cool so

00:02:46,010 --> 00:02:52,069
like the video context is very similar

00:02:48,440 --> 00:02:54,620
to the Web Audio API but the video it

00:02:52,069 --> 00:02:57,080
allows you to sequence and play HTML

00:02:54,620 --> 00:03:00,980
media elements like videos images and

00:02:57,080 --> 00:03:03,019
canvases it's also pretty fast so all

00:03:00,980 --> 00:03:06,069
image processing operations are done in

00:03:03,019 --> 00:03:11,660
shaders using WebGL and it's built using

00:03:06,069 --> 00:03:14,599
modern open web technologies so now dive

00:03:11,660 --> 00:03:17,209
right in and show you some code so this

00:03:14,599 --> 00:03:21,130
is a full example of a really simple

00:03:17,209 --> 00:03:24,799
video context composition so this is a

00:03:21,130 --> 00:03:27,200
HTML document the video context is

00:03:24,799 --> 00:03:28,700
brought in at the top and then we have a

00:03:27,200 --> 00:03:30,440
canvas and that's going to be we're

00:03:28,700 --> 00:03:31,579
going to render too so I'm going to zoom

00:03:30,440 --> 00:03:33,940
in a bit more on this code so you can

00:03:31,579 --> 00:03:38,630
see what's going on

00:03:33,940 --> 00:03:41,359
so we first get a reference to the

00:03:38,630 --> 00:03:44,359
canvas and then we pass it into a new

00:03:41,359 --> 00:03:46,970
video context instance and then we

00:03:44,359 --> 00:03:49,280
create some image source nodes so source

00:03:46,970 --> 00:03:52,100
nodes in the video context are is

00:03:49,280 --> 00:03:55,310
anything that'll output some form of

00:03:52,100 --> 00:03:57,590
media and so the video context is all

00:03:55,310 --> 00:03:59,540
graph based as well so in order to see

00:03:57,590 --> 00:04:01,310
the output of these image nodes need to

00:03:59,540 --> 00:04:03,380
connect them to the destination so the

00:04:01,310 --> 00:04:05,239
destination is a special case in the

00:04:03,380 --> 00:04:06,530
video context and it represents the

00:04:05,239 --> 00:04:09,859
final canvas that things are going to

00:04:06,530 --> 00:04:11,630
get rendered to we then need to sequence

00:04:09,859 --> 00:04:12,920
these source nodes for playback so the

00:04:11,630 --> 00:04:14,870
first image will play from time 0 to

00:04:12,920 --> 00:04:18,739
time for the second image will play from

00:04:14,870 --> 00:04:22,099
time for to time 8 and then we're going

00:04:18,739 --> 00:04:23,330
to tell the video context to play so I

00:04:22,099 --> 00:04:25,350
talked about how it was a rendering

00:04:23,330 --> 00:04:26,820
graph this is a really

00:04:25,350 --> 00:04:28,710
simple representation of that graphic so

00:04:26,820 --> 00:04:30,150
you have the two image notes one from

00:04:28,710 --> 00:04:31,620
time zero it's time for one print time

00:04:30,150 --> 00:04:33,120
for two time eight and we have the

00:04:31,620 --> 00:04:36,210
destination we have the connections

00:04:33,120 --> 00:04:39,180
between the two so this is thought that

00:04:36,210 --> 00:04:42,060
looks like some pretty glorious space

00:04:39,180 --> 00:04:44,220
caps so this has a bit of extra stuff

00:04:42,060 --> 00:04:46,170
thrown in to visualize it a bit easier

00:04:44,220 --> 00:04:47,910
we have a time line down the bottom that

00:04:46,170 --> 00:04:50,880
shows the images being played back from

00:04:47,910 --> 00:04:52,830
time 0.44 to time eight and then there's

00:04:50,880 --> 00:04:57,780
that graph view the side that shows you

00:04:52,830 --> 00:04:59,070
when things are rendering so this isn't

00:04:57,780 --> 00:05:00,930
so interesting at the moment it's just

00:04:59,070 --> 00:05:04,830
two two pictures rolling around so let's

00:05:00,930 --> 00:05:10,710
make it a bit more interesting so to do

00:05:04,830 --> 00:05:12,180
that we're going to add video so this is

00:05:10,710 --> 00:05:13,590
a video source node and you create

00:05:12,180 --> 00:05:16,050
exactly the same ways you create an

00:05:13,590 --> 00:05:18,960
image source node we can pass in a link

00:05:16,050 --> 00:05:21,930
to a video file you then connect it into

00:05:18,960 --> 00:05:24,210
the rendering wrap and we're going to

00:05:21,930 --> 00:05:27,000
set it playing again from time 0 to time

00:05:24,210 --> 00:05:28,650
II and I should say all of these image

00:05:27,000 --> 00:05:32,630
and video source knows a black back

00:05:28,650 --> 00:05:35,910
underneath by HTML media elements so

00:05:32,630 --> 00:05:38,160
buried inside the image node is a just a

00:05:35,910 --> 00:05:42,720
regular image element buried inside the

00:05:38,160 --> 00:05:44,460
video note is a html5 video element so

00:05:42,720 --> 00:05:45,270
playing and this is what the new graph

00:05:44,460 --> 00:05:46,650
looks like so it's a bit more

00:05:45,270 --> 00:05:48,390
complicated we still got our same view

00:05:46,650 --> 00:05:50,220
image node we have a video know down the

00:05:48,390 --> 00:05:51,930
bottom and that's clicked as the

00:05:50,220 --> 00:05:53,480
destination and this is what that looks

00:05:51,930 --> 00:05:56,580
like

00:05:53,480 --> 00:06:00,300
so this is a bit disappointing we've

00:05:56,580 --> 00:06:03,090
lost our space cats and the reason that

00:06:00,300 --> 00:06:04,680
happened is because the video context

00:06:03,090 --> 00:06:07,020
will render the media in the order that

00:06:04,680 --> 00:06:08,310
it gets connected so our two cat

00:06:07,020 --> 00:06:09,390
pictures are still being rendered but

00:06:08,310 --> 00:06:13,830
they're being rendered behind Shia

00:06:09,390 --> 00:06:15,840
LaBeouf so you might have noticed that

00:06:13,830 --> 00:06:18,510
child buff was conveniently against a

00:06:15,840 --> 00:06:20,610
green screen so I'm going to take a

00:06:18,510 --> 00:06:24,660
brief aside and talk about how green

00:06:20,610 --> 00:06:26,580
screening is done so this is

00:06:24,660 --> 00:06:28,620
traditionally quite an expensive thing

00:06:26,580 --> 00:06:32,400
to compute because you need to iterate

00:06:28,620 --> 00:06:35,040
out of every pixel inside an image tests

00:06:32,400 --> 00:06:36,660
whether it's green this is greater than

00:06:35,040 --> 00:06:37,690
a certain threshold and if it isn't make

00:06:36,660 --> 00:06:39,220
it transparent

00:06:37,690 --> 00:06:40,330
and this is one of the ways that weather

00:06:39,220 --> 00:06:43,180
presenters are put in front of their

00:06:40,330 --> 00:06:46,750
interactive weather maps so yeah this is

00:06:43,180 --> 00:06:49,750
quite expensive in a 1920 by 1080 image

00:06:46,750 --> 00:06:51,850
at about two million pixels at 25 frames

00:06:49,750 --> 00:06:55,000
per second that's 15 million pixels per

00:06:51,850 --> 00:06:56,980
second we need to process but web

00:06:55,000 --> 00:06:58,360
fortunately web GL shaders pride a

00:06:56,980 --> 00:07:01,150
really convenient way to do this

00:06:58,360 --> 00:07:04,030
efficiently so a WebGL shader is a chunk

00:07:01,150 --> 00:07:05,830
of code which runs on the GPU and

00:07:04,030 --> 00:07:08,200
they're typically written in a c-lite

00:07:05,830 --> 00:07:09,970
language called GLSL and they describe

00:07:08,200 --> 00:07:11,830
operations which get run in parallel

00:07:09,970 --> 00:07:14,020
across many processing units on the GPU

00:07:11,830 --> 00:07:15,700
and this makes them perfect for doing

00:07:14,020 --> 00:07:21,130
simple operations across many many

00:07:15,700 --> 00:07:23,890
pixels so back to the code I'm going to

00:07:21,130 --> 00:07:26,670
now create a color threshold node so

00:07:23,890 --> 00:07:29,770
this is similar to the source nodes

00:07:26,670 --> 00:07:32,530
except it's an effect and you pass into

00:07:29,770 --> 00:07:36,100
it a definition and this describes what

00:07:32,530 --> 00:07:37,900
that effect should do we then disconnect

00:07:36,100 --> 00:07:39,610
the video node from destination and

00:07:37,900 --> 00:07:40,780
connect to the color threshold node then

00:07:39,610 --> 00:07:44,530
connect the call threshold node to the

00:07:40,780 --> 00:07:46,180
destination so quickly I'll give you a

00:07:44,530 --> 00:07:48,670
brief look into what one of those

00:07:46,180 --> 00:07:50,290
definitions look like and this is super

00:07:48,670 --> 00:07:51,850
complicated and don't worry about if you

00:07:50,290 --> 00:07:54,550
don't understand any of it it's it's

00:07:51,850 --> 00:07:55,930
mostly shader code and so the bit in the

00:07:54,550 --> 00:07:59,500
white box is the fragment shader code

00:07:55,930 --> 00:08:00,940
that does our green streaming so the

00:07:59,500 --> 00:08:03,730
video context has a bunch of effects

00:08:00,940 --> 00:08:05,080
built in but it also is quite a nice

00:08:03,730 --> 00:08:06,220
environment for playing around and

00:08:05,080 --> 00:08:12,100
experimenting with building your own

00:08:06,220 --> 00:08:14,050
shaders so back to the code we've

00:08:12,100 --> 00:08:16,150
created that graph which looks like this

00:08:14,050 --> 00:08:17,410
r2 image nodes we have a video node

00:08:16,150 --> 00:08:19,630
which is now connected the effect nodes

00:08:17,410 --> 00:08:24,100
then connect to the destination and that

00:08:19,630 --> 00:08:28,770
results in this which is much better we

00:08:24,100 --> 00:08:28,770
can see our space caps again thank you

00:08:29,730 --> 00:08:34,720
yeah so we're going to take you walk

00:08:32,530 --> 00:08:35,950
through that route one more time we're

00:08:34,720 --> 00:08:37,390
going to introduce transitions because

00:08:35,950 --> 00:08:39,670
transitions are really important in

00:08:37,390 --> 00:08:41,110
video editing so a transition is how you

00:08:39,670 --> 00:08:44,410
might move from one video clip to the

00:08:41,110 --> 00:08:45,460
next so rather than just doing a

00:08:44,410 --> 00:08:47,260
straight cut you might have like a

00:08:45,460 --> 00:08:49,480
crossfade we might have a star light you

00:08:47,260 --> 00:08:52,780
might do something a bit more jazzy so

00:08:49,480 --> 00:08:56,770
we're going to create a new video note

00:08:52,780 --> 00:08:59,530
and this is created using the same

00:08:56,770 --> 00:09:01,060
source the first video note but we're

00:08:59,530 --> 00:09:03,400
having we have this dispaly at the end

00:09:01,060 --> 00:09:05,770
in this 10.5 and that tells the video

00:09:03,400 --> 00:09:07,930
context how far in for that source video

00:09:05,770 --> 00:09:09,880
to seek before it starts playing back so

00:09:07,930 --> 00:09:11,800
this is how you can sort of cut up pre

00:09:09,880 --> 00:09:15,370
existing video files but using this

00:09:11,800 --> 00:09:16,600
library so you can create a transition

00:09:15,370 --> 00:09:18,540
note and this is really similar to get

00:09:16,600 --> 00:09:22,720
effect mode except we pass in a

00:09:18,540 --> 00:09:24,250
transition definition and then we call

00:09:22,720 --> 00:09:26,710
transition on it so this is going to

00:09:24,250 --> 00:09:28,840
transition from time three two times six

00:09:26,710 --> 00:09:32,620
from the first input the second input of

00:09:28,840 --> 00:09:34,360
the transition node we then connect our

00:09:32,620 --> 00:09:35,830
to video notice the transition knows a

00:09:34,360 --> 00:09:39,610
transition note of the color threshold

00:09:35,830 --> 00:09:45,160
node and then we set up our second video

00:09:39,610 --> 00:09:46,270
node start playing and this produces a

00:09:45,160 --> 00:09:47,710
graph that looks like this is getting a

00:09:46,270 --> 00:09:57,220
bit complicated now and might be a bit

00:09:47,710 --> 00:09:59,200
hard to read but results in this so

00:09:57,220 --> 00:10:00,880
we've got Shia LaBeouf the in green

00:09:59,200 --> 00:10:03,960
screen for the two green screen videos

00:10:00,880 --> 00:10:03,960
are being transitioned between

00:10:10,290 --> 00:10:16,480
but wait there's more so as I said the

00:10:14,380 --> 00:10:17,680
video context has a bunch of effects

00:10:16,480 --> 00:10:23,800
built in and a bunch of transitions

00:10:17,680 --> 00:10:26,590
built in and this is a demonstration I

00:10:23,800 --> 00:10:29,440
put together to kind of try and push the

00:10:26,590 --> 00:10:32,260
limits so this is a level 11

00:10:29,440 --> 00:10:37,300
simultaneous effects and five transition

00:10:32,260 --> 00:10:40,480
effects happening in real time on full

00:10:37,300 --> 00:10:44,020
frame images and this was rendered live

00:10:40,480 --> 00:10:46,890
in the browser and then each one was

00:10:44,020 --> 00:10:49,420
scaled to fit into this this grid and

00:10:46,890 --> 00:10:50,470
this really shows the power of shaders

00:10:49,420 --> 00:10:52,480
that you're able to do this much

00:10:50,470 --> 00:10:57,850
processing this quickly in the browser

00:10:52,480 --> 00:10:59,200
it's crazy so are the features

00:10:57,850 --> 00:11:02,050
everything I've shown you by the video

00:10:59,200 --> 00:11:03,400
context so far has been very much set up

00:11:02,050 --> 00:11:07,810
a processing graphs at the park playing

00:11:03,400 --> 00:11:10,030
times and say running but it allows you

00:11:07,810 --> 00:11:11,230
to do everything dynamically as well so

00:11:10,030 --> 00:11:13,210
at any point I could have disconnected

00:11:11,230 --> 00:11:14,620
or reconnected those nodes any point I

00:11:13,210 --> 00:11:16,210
prefer craters new effects

00:11:14,620 --> 00:11:18,700
I could have set of new media's replay

00:11:16,210 --> 00:11:20,260
back this makes it makes it quite a rich

00:11:18,700 --> 00:11:22,750
environment for building interactive

00:11:20,260 --> 00:11:24,490
video experiences it also has a limited

00:11:22,750 --> 00:11:27,040
mobile support which I'll I'll go into

00:11:24,490 --> 00:11:29,170
in a bit and if you're into making sort

00:11:27,040 --> 00:11:33,700
of 360 interactive video it integrates

00:11:29,170 --> 00:11:34,630
really nicely with a frame as well so

00:11:33,700 --> 00:11:37,810
I'm going to take a bit of time now to

00:11:34,630 --> 00:11:39,970
go through some of the challenges we

00:11:37,810 --> 00:11:42,430
came up across when we built the video

00:11:39,970 --> 00:11:44,320
from text and these challenges are

00:11:42,430 --> 00:11:47,170
pretty agnostic the video context work

00:11:44,320 --> 00:11:48,670
and the likely come off if you're trying

00:11:47,170 --> 00:11:54,550
to build interactive video experiences

00:11:48,670 --> 00:11:56,710
yourself so most browsers are limited to

00:11:54,550 --> 00:11:59,650
about six to eight simultaneous HTTP

00:11:56,710 --> 00:12:01,089
connections for domain and if you have

00:11:59,650 --> 00:12:02,890
many clips to play that you want to play

00:12:01,089 --> 00:12:04,390
back to back a naive way of doing this

00:12:02,890 --> 00:12:07,270
to make sure they all play properly is

00:12:04,390 --> 00:12:08,800
to create HTML video elements for each

00:12:07,270 --> 00:12:11,740
of those clips of front and set them pre

00:12:08,800 --> 00:12:13,630
loading but this quickly saturates the

00:12:11,740 --> 00:12:14,800
number of available requests to a single

00:12:13,630 --> 00:12:17,500
domain and you can make your website

00:12:14,800 --> 00:12:19,210
really slow and responsive so the

00:12:17,500 --> 00:12:20,830
solution to this is the video context

00:12:19,210 --> 00:12:23,260
will load clips just in time so

00:12:20,830 --> 00:12:24,490
all HTML media elements they create

00:12:23,260 --> 00:12:26,110
about four seconds before they're

00:12:24,490 --> 00:12:27,519
actually needs needed which gives it

00:12:26,110 --> 00:12:33,519
enough time to kind of preload things

00:12:27,519 --> 00:12:35,170
and get it working so that's all it

00:12:33,519 --> 00:12:38,110
needs to be a master clock to sync

00:12:35,170 --> 00:12:39,550
everything to in the video context and

00:12:38,110 --> 00:12:43,230
the natural fit for this would seem to

00:12:39,550 --> 00:12:44,920
be the video current time attribute

00:12:43,230 --> 00:12:48,880
unfortunately the rightest updates

00:12:44,920 --> 00:12:51,130
varies between browsers so if you're

00:12:48,880 --> 00:12:54,070
doing things that require frame accurate

00:12:51,130 --> 00:12:55,570
cutting between Clips if your current

00:12:54,070 --> 00:12:59,380
time attribute is only updating every

00:12:55,570 --> 00:13:00,550
bit of a second it can break things so

00:12:59,380 --> 00:13:02,769
the solution to this was to use a

00:13:00,550 --> 00:13:04,630
requestanimationframe as a master time

00:13:02,769 --> 00:13:09,550
source which gave us millisecond level

00:13:04,630 --> 00:13:11,470
accuracy and frame accurate updates this

00:13:09,550 --> 00:13:13,870
doesn't come without its own problems so

00:13:11,470 --> 00:13:16,480
if you switch tabs the crest animation

00:13:13,870 --> 00:13:18,700
frame callback gets halted and this

00:13:16,480 --> 00:13:20,050
means so traditionally on the vid on the

00:13:18,700 --> 00:13:21,279
web if you're playing back video and you

00:13:20,050 --> 00:13:23,740
switch the tabs you'd expect the video

00:13:21,279 --> 00:13:25,450
to keep playing in the background but

00:13:23,740 --> 00:13:28,660
the video context won't both do that if

00:13:25,450 --> 00:13:30,640
it only is a requestanimationframe so

00:13:28,660 --> 00:13:32,050
the solution we came up for this is - as

00:13:30,640 --> 00:13:34,089
soon as you switch tabs spin out a

00:13:32,050 --> 00:13:36,100
webworker and inside the web worker run

00:13:34,089 --> 00:13:38,380
a set timeout loop and this won't be as

00:13:36,100 --> 00:13:41,290
accurate as a requestanimationframe but

00:13:38,380 --> 00:13:47,800
it will give you enough timing to keep

00:13:41,290 --> 00:13:49,180
the video context ticking over okay I'm

00:13:47,800 --> 00:13:55,480
a little bit ashamed of this one so

00:13:49,180 --> 00:13:57,160
they're with me so on mobile there's no

00:13:55,480 --> 00:14:00,100
water playing video and this is to

00:13:57,160 --> 00:14:05,290
prevent videos also playing and using

00:14:00,100 --> 00:14:08,170
Foley on mobile data and the way so the

00:14:05,290 --> 00:14:10,120
reason for this is all control calls to

00:14:08,170 --> 00:14:11,709
a video element must originate from or

00:14:10,120 --> 00:14:13,540
the first one must originate from a user

00:14:11,709 --> 00:14:16,589
action in order for a video element to

00:14:13,540 --> 00:14:19,000
be controlled programmatically on mobile

00:14:16,589 --> 00:14:20,949
so the solution to this in video context

00:14:19,000 --> 00:14:25,230
is we create a pool of elements with no

00:14:20,949 --> 00:14:28,630
source and they're all there

00:14:25,230 --> 00:14:30,209
with no source and when you call play

00:14:28,630 --> 00:14:32,980
for the first time in the video context

00:14:30,209 --> 00:14:33,880
play gets called on all of those video

00:14:32,980 --> 00:14:35,620
elements but nothing

00:14:33,880 --> 00:14:37,089
because there's no source attribute but

00:14:35,620 --> 00:14:39,009
it puts them in this activated state

00:14:37,089 --> 00:14:41,949
where we can then control them

00:14:39,009 --> 00:14:43,720
programmatically so the video context

00:14:41,949 --> 00:14:45,339
then manages this pool of activated

00:14:43,720 --> 00:14:46,690
video elements when it needs one little

00:14:45,339 --> 00:14:48,130
porn out of the pool it will use it to

00:14:46,690 --> 00:14:52,329
play my video and I'll put it back into

00:14:48,130 --> 00:14:54,880
the pool so this allows us to play back

00:14:52,329 --> 00:14:59,110
video on mobile that doesn't start at

00:14:54,880 --> 00:15:02,560
the very beginning foot sequences okay

00:14:59,110 --> 00:15:05,980
so finally this is kind of a biggie

00:15:02,560 --> 00:15:08,860
there's no low-level API for frame

00:15:05,980 --> 00:15:10,000
accurate sync of multiple videos and

00:15:08,860 --> 00:15:12,160
this is kind of a problem because we

00:15:10,000 --> 00:15:14,649
have quite complex timing requirements

00:15:12,160 --> 00:15:16,750
in the video context we have videos

00:15:14,649 --> 00:15:19,959
playing on a timeline at any point we

00:15:16,750 --> 00:15:21,970
also have offsets within those videos if

00:15:19,959 --> 00:15:24,160
you're taking a clip out of them we need

00:15:21,970 --> 00:15:27,310
to make sure they all stay in sync the

00:15:24,160 --> 00:15:28,930
solution to this one yeah you kind of

00:15:27,310 --> 00:15:30,639
you've got to set them playing and then

00:15:28,930 --> 00:15:33,310
hope for the best basically you can do

00:15:30,639 --> 00:15:35,470
some quite naive things so if a video

00:15:33,310 --> 00:15:36,699
starts buffering then pause will do of

00:15:35,470 --> 00:15:39,160
your videos and liquid start playing

00:15:36,699 --> 00:15:41,139
again and it turns out perceptually this

00:15:39,160 --> 00:15:43,930
isn't so bad like people have an

00:15:41,139 --> 00:15:45,550
expectation of video on the web that it

00:15:43,930 --> 00:15:46,959
might buffer now and again which if in

00:15:45,550 --> 00:15:49,300
broadcasting world if that happens

00:15:46,959 --> 00:15:50,769
it'd be a massive no-no but you can kind

00:15:49,300 --> 00:15:55,120
of get away with it on the web a bit

00:15:50,769 --> 00:15:58,149
more okay so this is the big question

00:15:55,120 --> 00:16:00,639
like why okay why we do this is all well

00:15:58,149 --> 00:16:02,709
and unlike as much as some others might

00:16:00,639 --> 00:16:04,630
want to turn broadcasting into cat gifs

00:16:02,709 --> 00:16:09,639
and Shia LaBeouf it's probably not the

00:16:04,630 --> 00:16:12,970
future unfortunately so this is the

00:16:09,639 --> 00:16:15,069
BBC's mission statement and of note it

00:16:12,970 --> 00:16:17,529
doesn't actually contain any mention of

00:16:15,069 --> 00:16:22,740
broadcasting which may be avert sites or

00:16:17,529 --> 00:16:27,550
central crisis so in R&D where I work

00:16:22,740 --> 00:16:30,370
our role is to use new technologies in a

00:16:27,550 --> 00:16:32,589
way that lets the BBC inform educate and

00:16:30,370 --> 00:16:34,569
entertain people so it's faster cheaper

00:16:32,589 --> 00:16:36,610
and better for now into the future

00:16:34,569 --> 00:16:39,189
and specifically the user experience

00:16:36,610 --> 00:16:41,350
team where I work we use user led design

00:16:39,189 --> 00:16:43,060
to create novel experiences to drive

00:16:41,350 --> 00:16:45,580
technological change

00:16:43,060 --> 00:16:47,950
and for this tool the choices generally

00:16:45,580 --> 00:16:49,660
the web so I'm going to show you a quick

00:16:47,950 --> 00:16:51,160
demo video and this is one of the

00:16:49,660 --> 00:16:52,510
prototypes you put together building the

00:16:51,160 --> 00:16:54,910
video context and we've built a whole

00:16:52,510 --> 00:16:57,240
range of these but I'll let just show

00:16:54,910 --> 00:16:57,240
you this one

00:17:05,020 --> 00:17:09,589
forecaster and the BBC R&D labs

00:17:07,569 --> 00:17:11,750
demonstrates how a new approach

00:17:09,589 --> 00:17:14,390
delivering programs would open the door

00:17:11,750 --> 00:17:17,839
to more personal flexible experiences

00:17:14,390 --> 00:17:20,209
for our audiences in this demonstrator

00:17:17,839 --> 00:17:22,280
we transmit each of the media elements

00:17:20,209 --> 00:17:24,169
separately and because of this we have

00:17:22,280 --> 00:17:26,480
the ability to control each of these

00:17:24,169 --> 00:17:29,510
individual elements in isolation from

00:17:26,480 --> 00:17:31,700
one another the timeline tracks you see

00:17:29,510 --> 00:17:33,950
the bottom of the footage represent the

00:17:31,700 --> 00:17:34,549
timelines for each media object in the

00:17:33,950 --> 00:17:37,460
forecast

00:17:34,549 --> 00:17:39,500
to illustrate this you can see how the

00:17:37,460 --> 00:17:42,950
on-screen graphics can be toggled on or

00:17:39,500 --> 00:17:45,830
off or the whole backdrop removed to

00:17:42,950 --> 00:17:48,409
reveal the raw green screen footage by

00:17:45,830 --> 00:17:50,030
delivering content in this way one of

00:17:48,409 --> 00:17:53,030
the biggest potentials lies in the

00:17:50,030 --> 00:17:55,039
enhancements of accessibility replacing

00:17:53,030 --> 00:17:56,840
the standard presenter with a signer the

00:17:55,039 --> 00:18:00,140
first-class presence from the video for

00:17:56,840 --> 00:18:01,880
example or rearranging the on-screen

00:18:00,140 --> 00:18:05,390
graphics when subtitle elements are

00:18:01,880 --> 00:18:07,370
present to avoid overlap you could also

00:18:05,390 --> 00:18:09,140
change the background map to a higher

00:18:07,370 --> 00:18:12,830
contrast view to aid the visually

00:18:09,140 --> 00:18:14,840
impaired if media were delivered in this

00:18:12,830 --> 00:18:17,510
way we could also have the footage

00:18:14,840 --> 00:18:19,789
adapting to suit your screen size rather

00:18:17,510 --> 00:18:23,780
than forcing a single aspect ratio or

00:18:19,789 --> 00:18:25,640
font size on all devices here we can see

00:18:23,780 --> 00:18:28,250
how a mobile portrait view would look

00:18:25,640 --> 00:18:31,370
with a larger font size and a rearranged

00:18:28,250 --> 00:18:33,679
view to include more of the map in the

00:18:31,370 --> 00:18:35,840
future we could also link content to

00:18:33,679 --> 00:18:37,789
your personal calendar or or the

00:18:35,840 --> 00:18:41,720
third-party data services and feature

00:18:37,789 --> 00:18:44,210
relevant local information as you can

00:18:41,720 --> 00:18:47,059
see the ability to send media elements

00:18:44,210 --> 00:18:49,280
or objects separately rather than as a

00:18:47,059 --> 00:18:51,650
single video stream gives much greater

00:18:49,280 --> 00:18:53,870
flexibility for playback allowing

00:18:51,650 --> 00:18:55,549
content automatically adapt to the

00:18:53,870 --> 00:18:59,659
screen size and preferences of the

00:18:55,549 --> 00:19:01,340
viewer the flexibility of an object

00:18:59,659 --> 00:19:02,799
based approach won't just benefits

00:19:01,340 --> 00:19:05,840
audiences though

00:19:02,799 --> 00:19:08,059
BBC R&D is also testing how it could

00:19:05,840 --> 00:19:10,100
make production more efficient giving

00:19:08,059 --> 00:19:12,990
programme makers time to flex their

00:19:10,100 --> 00:19:14,580
creative muscles in new ways

00:19:12,990 --> 00:19:16,890
we hope you've enjoyed the sneak peek

00:19:14,580 --> 00:19:19,200
into the potential of IP production in

00:19:16,890 --> 00:19:21,090
the future this demonstrator does not

00:19:19,200 --> 00:19:25,529
represent a new service and has used

00:19:21,090 --> 00:19:36,390
non-broadcast maps and feeds only I love

00:19:25,529 --> 00:19:39,149
that disclaimer again thank you so in

00:19:36,390 --> 00:19:41,669
that you heard the phrase object based

00:19:39,149 --> 00:19:44,520
media and this is what R&D are calling

00:19:41,669 --> 00:19:46,289
this new approach to broadcasting and it

00:19:44,520 --> 00:19:49,140
might feel quite familiar if you've been

00:19:46,289 --> 00:19:50,700
on the web for a while but we like to

00:19:49,140 --> 00:19:52,890
think of it as bringing responsive

00:19:50,700 --> 00:19:56,159
design to broadcasting making content

00:19:52,890 --> 00:19:58,559
that adapts to the user to the device

00:19:56,159 --> 00:20:00,029
and to the environment are in and that

00:19:58,559 --> 00:20:04,140
was one of a bunch of experiments we're

00:20:00,029 --> 00:20:09,690
building to explore this area more so

00:20:04,140 --> 00:20:12,090
finally as well as a new way to deliver

00:20:09,690 --> 00:20:15,270
content the web is a new medium for

00:20:12,090 --> 00:20:16,799
storytelling in and of itself and we're

00:20:15,270 --> 00:20:18,899
really excited to be exploring this area

00:20:16,799 --> 00:20:20,190
and we hope that by releasing this layer

00:20:18,899 --> 00:20:22,830
we make it a bit easier for the people

00:20:20,190 --> 00:20:24,730
to do so as well and super excited to

00:20:22,830 --> 00:20:26,410
see what you might make with it thanks

00:20:24,730 --> 00:20:29,730
[Applause]

00:20:26,410 --> 00:20:36,470
[Music]

00:20:29,730 --> 00:20:36,470

YouTube URL: https://www.youtube.com/watch?v=GsvAdTyXN8o


