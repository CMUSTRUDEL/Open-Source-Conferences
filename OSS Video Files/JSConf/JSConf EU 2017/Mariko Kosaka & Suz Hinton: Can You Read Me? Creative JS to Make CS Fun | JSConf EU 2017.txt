Title: Mariko Kosaka & Suz Hinton: Can You Read Me? Creative JS to Make CS Fun | JSConf EU 2017
Publication date: 2017-05-20
Playlist: JSConf EU 2017
Description: 
	http://2017.jsconf.eu/speakers/mariko-kosaka-suz-hinton-can-you-read-me-creative-javascript-to-make-computer-science-fun.html

Two web developers who are full of curiosity to learn all about machines and code met at a meetup. Unsatisfied with traditional computer science textbook and what we felt like not so learner friendly software engineering landscape, we decided to learn by working together in the format we enjoy the most - creative project.

We are building machines (both software and hardware) in JavaScript to send secret messages to each other. Different forms of data blob are exchanged periodically as a message. In order to read those messages, each has to learn and build a system to decode the data.

This talk will tell the story of the machines, their parts, and the possibilities of remote creative collaboration. Youâ€™ll come away with fresh inspiration on how JavaScript can be used to learn computer science concepts the enjoyable way.
Captions: 
	00:00:51,440 --> 00:00:52,440
Hi, welcome to our talk.

00:00:52,440 --> 00:00:53,440
My name is Mariko Kosaka.

00:00:53,440 --> 00:00:55,000
My Twitter handle is @kosamari.

00:00:55,000 --> 00:01:00,340
SUZ: And I'm Suz Hinton, and my Twitter is @noopkat.

00:01:00,340 --> 00:01:07,640
MARIKO: And we are web developers, not exclusively JavaScript but we like to use JavaScript in

00:01:07,640 --> 00:01:08,900
weird places.

00:01:08,900 --> 00:01:14,560
So, for example, Suz makes this awesome, awesome library to control hardware and to put pixels

00:01:14,560 --> 00:01:17,520
in hardware with JavaScript.

00:01:17,520 --> 00:01:25,710
I'm involved in a project to make an electric knitting machine so that I can make textile

00:01:25,710 --> 00:01:26,710
design.

00:01:26,710 --> 00:01:28,740
That was convoluted.

00:01:28,740 --> 00:01:31,550
Anyways, so we basically go to same meetups.

00:01:31,550 --> 00:01:38,700
We see each other pretty much every week, maybe and we, at this point, we are like BFFs

00:01:38,700 --> 00:01:40,979
that finish each other's sentences.

00:01:40,979 --> 00:01:46,610
Yesterday we flew in red eye, super jetlagged, some tired.

00:01:46,610 --> 00:01:55,170
We were rehearsing this talk and we just couldn't -- but we were shouting same words at the

00:01:55,170 --> 00:01:56,610
same time.

00:01:56,610 --> 00:01:57,610
[ Laughter ]

00:01:57,610 --> 00:02:04,340
So a year ago at one of the meetups in New York, Suz proposed to me saying, like, hey,

00:02:04,340 --> 00:02:08,090
do you want to maybe sometimes work on projects together?

00:02:08,090 --> 00:02:12,120
And maybe sometimes, like, talk at a conference together?

00:02:12,120 --> 00:02:16,680
And without thinking anything about what it's going to be, I just said, "Heck yes!"

00:02:16,680 --> 00:02:20,849
But we didn't really figure out what we wanted to do immediately.

00:02:20,849 --> 00:02:25,439
We talked about, what about this, what about that, we spent months and months just talking

00:02:25,439 --> 00:02:29,719
about the idea of doing this secret project together.

00:02:29,719 --> 00:02:36,761
But that quickly ended when October 6th, 2016 last year, I saw this tweet from Jan, one

00:02:36,761 --> 00:02:44,360
of the curators of this conference said, can you give us an update to the fax machine.

00:02:44,360 --> 00:02:50,889
And one of my other friends in Melbourne said, is this still in use?

00:02:50,889 --> 00:02:56,909
I have a secret wish that we own one and send each other little drawings and I thought this

00:02:56,909 --> 00:02:58,480
was a perfect idea.

00:02:58,480 --> 00:03:03,489
Suz, immediately saying, like, hey, do you want to do a fax machine, and without me explaining,

00:03:03,489 --> 00:03:07,330
she replied, "Love it!"

00:03:07,330 --> 00:03:09,260
SUZ: Great.

00:03:09,260 --> 00:03:14,019
We had to come up with a few more constraints other than we're just going to make some fax-machine-related

00:03:14,019 --> 00:03:15,019
thing.

00:03:15,019 --> 00:03:20,309
So what we ended up deciding on is we were going to build two separate machines and that's

00:03:20,309 --> 00:03:22,169
where the project was going to diverge.

00:03:22,169 --> 00:03:29,010
And so what our machine needed to do was it needed to be able to accept any kind of data

00:03:29,010 --> 00:03:34,699
type that one of us sent to it, and then it would be able to interpret that, and then

00:03:34,699 --> 00:03:37,260
output it in whatever way we chose to.

00:03:37,260 --> 00:03:42,599
So, essentially, if Mariko sent my machine an audio file, or an image file, or some kind

00:03:42,599 --> 00:03:46,680
of binary data, it knew what to do with that data and vice versa.

00:03:46,680 --> 00:03:50,140
So if I spent something to Mariko's machine, it would be able to understand what to do

00:03:50,140 --> 00:03:52,590
that, and what it was.

00:03:52,590 --> 00:03:57,599
MARIKO: So on top of that -- SUZ: So on top of that, we ended up even with

00:03:57,599 --> 00:04:05,109
more constraints, Mariko decided to create her interpreter on the browser, and I decided

00:04:05,109 --> 00:04:10,250
to create mine only on the command line console, no browser allowed.

00:04:10,250 --> 00:04:11,809
Scary for me, but yeah.

00:04:11,809 --> 00:04:18,650
MARIKO: And we decided how we're going to do this project and how every day of each

00:04:18,650 --> 00:04:25,550
transaction, we're going to make a journal on documenting whatever we did on our own,

00:04:25,550 --> 00:04:28,159
and kind of sharing that journal together.

00:04:28,159 --> 00:04:31,020
But every project needs a good name.

00:04:31,020 --> 00:04:35,970
Like, we are the kind of person who starts thinking about logo even before we start the

00:04:35,970 --> 00:04:36,970
project.

00:04:36,970 --> 00:04:42,060
And so we talked about this idea of fax machine and we were looking at Wikipedia, fax machine

00:04:42,060 --> 00:04:54,290
comes from facsimile and we really liked the idea of getting binary data and interpreting

00:04:54,290 --> 00:04:56,940
it so that we can make something like what they sent.

00:04:56,940 --> 00:04:58,699
And so we decided to call it Make Alike.

00:04:58,699 --> 00:05:01,500
SUZ: We thought it was a really adorable name so...

00:05:01,500 --> 00:05:09,550
MARIKO: So we did one data exchange and we wrote our own journal and that's what we won't

00:05:09,550 --> 00:05:10,830
do today.

00:05:10,830 --> 00:05:13,610
So I'm going to go into my presentation.

00:05:13,610 --> 00:05:18,699
So my bit, I called my Journal Code, Journal 00 because I'm a JavaScript developer.

00:05:18,699 --> 00:05:25,349
Like Elly has to start from zero and then I titled, when I decided we were going to

00:05:25,349 --> 00:05:31,590
look at binary data and decode it in the browser, I was super, super excited.

00:05:31,590 --> 00:05:42,610
I love looking at hex code.

00:05:42,610 --> 00:05:47,419
But looking at this I can exactly tell you how many patterns are in this pattern code,

00:05:47,419 --> 00:05:54,320
and about how how big that is, and to the point of I kind of notice, like, certain sequences

00:05:54,320 --> 00:05:57,300
and then I can tell the color collection of those things.

00:05:57,300 --> 00:06:01,990
I spent a lot of times looking at those things, and it's like a puzzle.

00:06:01,990 --> 00:06:08,490
So Suz told me that she committed the binary file so I pulled down.

00:06:08,490 --> 00:06:15,080
We use GitHub -- and so I pulled down on GitHub and by just habit, I typed next command, open,

00:06:15,080 --> 00:06:21,439
dot, for the next whatever command to send and we talked about because it is a project,

00:06:21,439 --> 00:06:24,150
it would be like no cheating.

00:06:24,150 --> 00:06:28,789
No putting on external software, no putting on, you know, easy way out, we were going

00:06:28,789 --> 00:06:32,509
to do the hard work, the groundwork ourselves.

00:06:32,509 --> 00:06:40,930
But in through that, it was so fucking helpful that they decoded that binary for me on cassette

00:06:40,930 --> 00:06:48,219
tape on preview, and so I messaged Suz and said, I'm sorry, the OS decoded for me already.

00:06:48,219 --> 00:06:54,879
SUZ: I was so devastated because it took me hours to pick this particular image and then

00:06:54,879 --> 00:06:58,530
I had to start from scratch and find something really quickly.

00:06:58,530 --> 00:07:06,440
MARIKO: So after that, she sent me a new file, and this time with even the preview finder,

00:07:06,440 --> 00:07:07,530
it was a text file.

00:07:07,530 --> 00:07:12,510
She told me it was an image, that was the only clue she gave me, but it was a text file,

00:07:12,510 --> 00:07:15,939
and I got to be a binary detective.

00:07:15,939 --> 00:07:21,750
And so the first thing I thought was what if I miss inform the HTML element, what if

00:07:21,750 --> 00:07:27,189
I give the HTML element text file, are they going to be unhappy and give me an error message

00:07:27,189 --> 00:07:40,240
and then I have to investigate -- so I got through the HTML and the browser is also helpful.

00:07:40,240 --> 00:07:46,319
So even though I was thinking that this is a binary text file into source of image element,

00:07:46,319 --> 00:07:52,280
so they should, like -- but they would go ahead and interpret it, and show me the picture.

00:07:52,280 --> 00:07:54,779
So the this is second picture.

00:07:54,779 --> 00:07:58,719
And Suz keeps talking to me about, like, the order is really important.

00:07:58,719 --> 00:08:01,280
And, like, giving me clues or something.

00:08:01,280 --> 00:08:02,400
So can you, like, elaborate?

00:08:02,400 --> 00:08:07,430
Because I haven't figured out any connection between the cassette tape and that.

00:08:07,430 --> 00:08:11,620
SUZ: Yeah, so there's a lot of clues in this picture but I think it's going to unfold as

00:08:11,620 --> 00:08:12,620
we send you more.

00:08:12,620 --> 00:08:19,229
So I'm going to send you more files and this is the first clue and I think this is the

00:08:19,229 --> 00:08:22,410
hardest one because you won't see the pattern yet.

00:08:22,410 --> 00:08:28,460
The format is a clue, the color palette is a clue, and the subject matter is a clue.

00:08:28,460 --> 00:08:33,580
MARIKO: That's good to know because I've actually investigated the format for this journal.

00:08:33,580 --> 00:08:40,630
So at this point I was like, I can't really be a browser detective because OSes are super

00:08:40,630 --> 00:08:44,940
helpful, and browsers are even more helpful because they're decoding for me.

00:08:44,940 --> 00:08:49,270
So this plan on being a browser detective isn't working.

00:08:49,270 --> 00:08:55,630
Instead I'm going to be a browser anthropologist, and observe the habitat of the HTML element

00:08:55,630 --> 00:09:00,980
and how they're interpretation my binary data.

00:09:00,980 --> 00:09:04,850
So this was my first research.

00:09:04,850 --> 00:09:12,150
I picked other media elements and put the text over it to test, is browser really smart

00:09:12,150 --> 00:09:16,710
enough to know that the file is image, or the file is audio.

00:09:16,710 --> 00:09:22,460
I load it in the browser, and then, indeed, browser only decoded the file as image and

00:09:22,460 --> 00:09:24,270
then failed on audio and video.

00:09:24,270 --> 00:09:26,410
It didn't play at all.

00:09:26,410 --> 00:09:33,660
So this proves the hypothesis of those media elements knows more than input because when

00:09:33,660 --> 00:09:40,120
we code, the form inputFileElement, we can access the data about file name, type, size,

00:09:40,120 --> 00:09:45,400
last date modified, it's kind of what you get, like, on the browser finder, the metadata,

00:09:45,400 --> 00:09:49,890
and those come back as, like, text, or as type text, plain.

00:09:49,890 --> 00:09:56,650
So input level, they think it's a text file but when you send it down to the media element,

00:09:56,650 --> 00:10:00,900
they somehow figure out that that is a media source file.

00:10:00,900 --> 00:10:07,880
So I kind of mentioned that the input element, looking at the metadata is, like, previewing

00:10:07,880 --> 00:10:09,080
in the Finder.

00:10:09,080 --> 00:10:14,020
So when we double-click on the files, the files open up, or iTunes start.

00:10:14,020 --> 00:10:18,720
So what's the equivalent of double-clicking on those files and letting the computer figure

00:10:18,720 --> 00:10:19,720
it out?

00:10:19,720 --> 00:10:25,540
So in browser you can use something called FileReader API which basically reads the file

00:10:25,540 --> 00:10:31,000
for you, and returns the value, and the value, you can specify what kind of value you want.

00:10:31,000 --> 00:10:39,190
So, for example, the leadAsUrl, you basically gets the C4 stream back, so that's something

00:10:39,190 --> 00:10:49,950
you can use, by letting your user quote-unquote, upload the image, but, in fact, it's all done

00:10:49,950 --> 00:10:53,240
on client side and changing the background.

00:10:53,240 --> 00:10:59,650
You can also do leadAsText which returns the text of the things.

00:10:59,650 --> 00:11:02,290
Sorry, my words are not coming out.

00:11:02,290 --> 00:11:03,290
[ Laughter ]

00:11:03,290 --> 00:11:09,230
You can also leadAsBinaryString, which somehow turns out, figures out the string.

00:11:09,230 --> 00:11:14,360
The last one that's interesting is leadAsArrayBuffer.

00:11:14,360 --> 00:11:20,690
And this is one that you can't console.log because it's an arrayBuffer.

00:11:20,690 --> 00:11:27,590
Any even know what buffer means, and as a web developer, I ran into MDN, and here's

00:11:27,590 --> 00:11:29,120
what I learned about it.

00:11:29,120 --> 00:11:36,500
Array buffer is, like, a masterpiece that belongs to a museum that belongs in the glass

00:11:36,500 --> 00:11:37,500
case.

00:11:37,500 --> 00:11:44,410
You can examine it, you can examine the cutout of it, but you can't touch it.

00:11:44,410 --> 00:11:49,960
In order to touch it, or do any work on it, you have to do it on your own, whatever tool,

00:11:49,960 --> 00:11:56,950
whatever format, whatever binary format you want, you have to create a new observe representative

00:11:56,950 --> 00:12:02,740
of the array buffer in order to do work on it and the way to create those are things

00:12:02,740 --> 00:12:08,670
like typeArray and dataView.

00:12:08,670 --> 00:12:20,040
So on lead on load, you put the and then you access it, toString it, and then lead in hex

00:12:20,040 --> 00:12:24,110
and then something like 42 comes back.

00:12:24,110 --> 00:12:31,420
So in doing so, I noticed that if I do it in text, I see a lot of, like, metadata already.

00:12:31,420 --> 00:12:36,720
I noticed that there is a pattern that they are putting image from data on top of a file.

00:12:36,720 --> 00:12:42,800
And, you know, looking at these, and being an awesome JavaScript web developer, I was,

00:12:42,800 --> 00:12:50,070
like, can I maybe just, you know, like, you know, and quickly I was like, never mind because,

00:12:50,070 --> 00:12:55,100
like, A, I know enough that it's a bad idea.

00:12:55,100 --> 00:13:00,140
But also, it wasn't the point of, like, me figuring out how to do it, my investigation

00:13:00,140 --> 00:13:04,870
of being a browser anthropologist was figuring out how the browser does it.

00:13:04,870 --> 00:13:10,550
So thinking about browser, I was like, how the hell all the different kinds of browser

00:13:10,550 --> 00:13:16,720
takes one single code that I wrote, and all displayed somewhat similar and then came down

00:13:16,720 --> 00:13:17,790
to web standards.

00:13:17,790 --> 00:13:22,920
So all the way a browser should behave is all defined in web standards.

00:13:22,920 --> 00:13:30,450
So I was like, okay, great, is still web standards for leading how to lead what the file is -- what

00:13:30,450 --> 00:13:33,790
the file type is, I guess -- there is?

00:13:33,790 --> 00:13:40,220
It's called MIME insisting on WG Standards and if you read the introduction, you don't

00:13:40,220 --> 00:13:41,610
have to read it.

00:13:41,610 --> 00:13:52,640
It basically solves the same problem of what if a malicious user uploads a script, or wrapped

00:13:52,640 --> 00:13:56,900
up as HTML and you accidentally execute it?

00:13:56,900 --> 00:14:02,110
You have to make sure that the binary level, what that actual looks like and this was,

00:14:02,110 --> 00:14:03,630
in the introduction, that was great.

00:14:03,630 --> 00:14:04,630
Okay.

00:14:04,630 --> 00:14:06,550
Give me the specification to that image.

00:14:06,550 --> 00:14:12,920
And this is the graph for the image type pattern and I was like, great, those are the steps

00:14:12,920 --> 00:14:18,520
for doing those things, and step-by-step defining it.

00:14:18,520 --> 00:14:21,620
SUZ: You went deep, Mariko.

00:14:21,620 --> 00:14:28,870
MARIKO: Read the byte sequence to be matched, and the MIME standard.

00:14:28,870 --> 00:14:34,870
And I was like, am I supposed to understand this?

00:14:34,870 --> 00:14:39,400
Is there a hidden web development class that I took and I missed?

00:14:39,400 --> 00:14:42,420
Like, you're a native English speaker, do you understand this?

00:14:42,420 --> 00:14:47,530
SUZ: I think it feels more philosophical and Shakespeare than the actual spec.

00:14:47,530 --> 00:14:53,570
MARIKO: So I asked some of my friends who works on standards and edited the standards,

00:14:53,570 --> 00:15:02,370
and Alex roughly said that this standard specification is a particular dialect of English that compiles

00:15:02,370 --> 00:15:03,410
to C++.

00:15:03,410 --> 00:15:09,590
So I was like, okay, these documents, even though they're in English, the compiler target

00:15:09,590 --> 00:15:11,690
is computer, and not me.

00:15:11,690 --> 00:15:17,880
And so I spent a few hours over the weekend.

00:15:17,880 --> 00:15:21,190
You can see, I pretty much visited all the links except for bytes.

00:15:21,190 --> 00:15:24,600
Bytes are still left in blue.

00:15:24,600 --> 00:15:30,550
Somehow figure that out, what they're saying is lead the first bytes of the file and then

00:15:30,550 --> 00:15:35,850
compare it to the one on that column, and then compare that result to that one on the

00:15:35,850 --> 00:15:40,170
second column to make sure that pattern mark, whatever that is is correct.

00:15:40,170 --> 00:15:42,550
So I'm like, okay, great!

00:15:42,550 --> 00:15:48,540
I'm going to code, I'm going to make that thing that is 100% compact.

00:15:48,540 --> 00:15:52,870
And this is the part of the talk that I'm supposed to tell you that I made this npm

00:15:52,870 --> 00:15:58,590
module that is 100% spec compatible, and I published it today at the conference.

00:15:58,590 --> 00:15:59,590
But in fact, I didn't.

00:15:59,590 --> 00:16:02,090
Because I'm still figuring out the configuration.

00:16:02,090 --> 00:16:07,600
It's like, give me a break.

00:16:07,600 --> 00:16:15,770
So what I did, I still took the uploads of sniffing the binary, but not 100% compact

00:16:15,770 --> 00:16:16,770
way.

00:16:16,770 --> 00:16:21,630
So what I made at the end is, like, this little app that has a fileInput element.

00:16:21,630 --> 00:16:28,670
You can give them any file, and then I sniffed the MIME type and then put into appropriate

00:16:28,670 --> 00:16:29,670
media tag.

00:16:29,670 --> 00:16:35,290
So if you give a text file that's actually an audio file, it puts in the audio tag.

00:16:35,290 --> 00:16:40,170
Image file that is not having a file type can just go to image.

00:16:40,170 --> 00:16:41,920
And that was my first pass.

00:16:41,920 --> 00:16:43,260
And now I'll move on to Suz.

00:16:43,260 --> 00:16:46,860
SUZ: I have one question for you: What format was the image I sent you?

00:16:46,860 --> 00:16:49,540
MARIKO: That was bitmap?

00:16:49,540 --> 00:16:54,951
SUZ: She figured it out.

00:16:54,951 --> 00:16:55,951
Awesome.

00:16:55,951 --> 00:16:57,600
So I'll start my part off with building blocks.

00:16:57,600 --> 00:17:05,780
So if you'll remember, I only the command line available because I like using the browser

00:17:05,780 --> 00:17:12,490
as a crutch, but one of the things that I really love about the command line is pipes.

00:17:12,490 --> 00:17:16,760
Pipes are awesome because this, for example, takes the processes that are currently running

00:17:16,760 --> 00:17:23,110
and pipes that into grep and with grep, you can kind of keyword within that list.

00:17:23,110 --> 00:17:26,620
And this is what it looks like when you're running it.

00:17:26,620 --> 00:17:31,100
You could pipe into grep and you could look at your batch processes for example.

00:17:31,100 --> 00:17:38,290
So really what PS Pig is saying, hey, grep, I have this list of processes and grep total

00:17:38,290 --> 00:17:42,530
says, hey, thanks, I'm just grabbing that from the pipe and I'm just going to list out

00:17:42,530 --> 00:17:44,930
the ones that have bash in them.

00:17:44,930 --> 00:17:46,620
So that's pretty straightforward.

00:17:46,620 --> 00:17:51,470
So the first thing that I wrote was a really simple pipe such as a hello world so I know

00:17:51,470 --> 00:17:56,840
how that works in things like Node.js because if you remember, like it was in JavaScript,

00:17:56,840 --> 00:17:58,610
and mine were in command line only.

00:17:58,610 --> 00:18:03,110
So mine are, like, shell scripts that you can run in Node.js.

00:18:03,110 --> 00:18:08,830
So that wasn't really useful, and so I thought, cat is a highly useful command that people

00:18:08,830 --> 00:18:10,740
use, and they pipe it into lots of things.

00:18:10,740 --> 00:18:16,420
So, for example, you can do file.text, I could supply that to cat, cat is going to dump out

00:18:16,420 --> 00:18:21,520
onto the console, exactly how that file was, and then from there, I can actually take that

00:18:21,520 --> 00:18:23,500
output and pipe it into something else.

00:18:23,500 --> 00:18:28,810
MARIKO: Can I just stop and comment on what that cat is saying?

00:18:28,810 --> 00:18:30,230
SUZ: Yeah.

00:18:30,230 --> 00:18:31,230
[ Laughter ]

00:18:31,230 --> 00:18:33,790
MARIKO: I'm just commenting.

00:18:33,790 --> 00:18:39,420
SUZ: And so I've just simplified this slightly because cat has a lot of different things

00:18:39,420 --> 00:18:44,920
but I've done the basic cat command which is to basically open the file and pipe that

00:18:44,920 --> 00:18:50,600
into the standard process, which is to the command line console.

00:18:50,600 --> 00:18:54,750
So that was kind of out of the way, so the way that I tested it was I made the file executable

00:18:54,750 --> 00:19:03,360
and then I fed through Ada Lovelace quote and I thought, okay, I'm fine for Mariko sending

00:19:03,360 --> 00:19:09,050
me the first piece of binary data and then she opened a pull request and then she promptly

00:19:09,050 --> 00:19:10,050
merged it easier had.

00:19:10,050 --> 00:19:17,320
MARIKO: Because I can.

00:19:17,320 --> 00:19:18,890
I didn't have attenuate for you.

00:19:18,890 --> 00:19:22,120
SUZ: There's no rules when you're on GitHub with creative projects.

00:19:22,120 --> 00:19:27,790
It arrived mysteriously missing a file extension now when I merged this down, I was so scared

00:19:27,790 --> 00:19:31,630
that I was going to accidentally open it, and this was before you accidentally opened

00:19:31,630 --> 00:19:33,640
mine that I was just super weird.

00:19:33,640 --> 00:19:35,420
I just closed all my Finder windows.

00:19:35,420 --> 00:19:38,910
I was terrified of the open command so I just left it.

00:19:38,910 --> 00:19:42,470
So I ran it through my cat program, and this is what I saw.

00:19:42,470 --> 00:19:48,120
And so you can see here that it's just a whole pile of gobbledygook, but when I looked the

00:19:48,120 --> 00:19:53,900
the headers of the file, I saw the clues, that kind of audio file is this so I can start

00:19:53,900 --> 00:19:55,150
decoding it?

00:19:55,150 --> 00:19:59,090
So the first thing that I started here was this id3 tag.

00:19:59,090 --> 00:20:07,090
Id3 tags were a standard that was made for MP3 files.

00:20:07,090 --> 00:20:13,380
And the next thing I was was what is this GarageBand tag in here?

00:20:13,380 --> 00:20:16,290
Did Mariko make me a song?

00:20:16,290 --> 00:20:21,500
MARIKO: This is just a confirmation that I didn't have time to learn the full Web Audio

00:20:21,500 --> 00:20:22,500
API.

00:20:22,500 --> 00:20:24,120
Which I didn't have time to do.

00:20:24,120 --> 00:20:25,190
SUZ: I loved it.

00:20:25,190 --> 00:20:26,190
It was a great detail.

00:20:26,190 --> 00:20:28,120
And I loved this eye tune here.

00:20:28,120 --> 00:20:31,320
Which is totally meaningless meaning that GarageBand --

00:20:31,320 --> 00:20:34,180
[ Lapse in Audio ]

00:20:34,180 --> 00:20:44,870
-- so what I did know was that it was an mp3 made in iTunes and I could move on.

00:20:44,870 --> 00:20:52,790
So with my browser as my crutch, I was able to find a Node.js module that emulates the

00:20:52,790 --> 00:20:54,270
API to a degree.

00:20:54,270 --> 00:20:58,520
So you do have to spin up an additional module called Speaker.

00:20:58,520 --> 00:21:03,100
Speaker is great because it can attach directly to your drive on your computer.

00:21:03,100 --> 00:21:07,530
And so I was trying to make this on a Raspberry Pi because I wanted to make a machine.

00:21:07,530 --> 00:21:17,750
But also created a function with the actual data in it with the audio file, and I had

00:21:17,750 --> 00:21:22,760
to play that to the actual destination so I could play it to the system.

00:21:22,760 --> 00:21:31,650
And from there I had to use fs to open the file, and so you can type the command file

00:21:31,650 --> 00:21:35,430
and then the actual file to open it, so I did that.

00:21:35,430 --> 00:21:39,920
So this is what the command ended up looking like when I ran it on the command line.

00:21:39,920 --> 00:21:43,920
And then this was when I heard the sound for the very first time.

00:21:43,920 --> 00:21:46,430
So this is what I heard.

00:21:46,430 --> 00:21:51,910
Hopefully... oh, no.

00:21:51,910 --> 00:21:53,740
Okay.

00:21:53,740 --> 00:22:00,580
Maybe we can go back.

00:22:00,580 --> 00:22:11,570
MARIKO: This was, like, a particularly, like, hand-picked, hand-crafted piece of music.

00:22:11,570 --> 00:22:15,010
SUZ: Clearly, it was, like, worthy.

00:22:15,010 --> 00:22:18,130
And I thought, this is really weird.

00:22:18,130 --> 00:22:24,300
She did this in GarageBand, and it's not really following normal musical aesthetic taste.

00:22:24,300 --> 00:22:29,660
But I was like, wait a second, Mariko sent me a video several months ago, and it was

00:22:29,660 --> 00:22:37,820
this video here.

00:22:37,820 --> 00:22:55,500
MARIKO: That one sounds more like actual music.

00:22:55,500 --> 00:23:00,850
SUZ: So that was really cool, and it was something about Mariko's audio file and the give-away

00:23:00,850 --> 00:23:06,330
in the GarageBand file that told me that she made a picture.

00:23:06,330 --> 00:23:09,380
But here's the thing, I don't have the GarageBand file.

00:23:09,380 --> 00:23:13,930
And I only have the command line, so how do I visualize the picture she made for me, and

00:23:13,930 --> 00:23:17,440
maybe she didn't even make a picture and she's messing with me.

00:23:17,440 --> 00:23:25,080
So what I ended up doing is, this is Raspberry Pi, and I can't use Chrome on it, I have to

00:23:25,080 --> 00:23:26,190
use Chromium.

00:23:26,190 --> 00:23:31,590
I had to kind of stream the GUI channel over to the virtual frame buffer.

00:23:31,590 --> 00:23:37,760
So X Virtual Framebuffer is a really great tool for doing that.

00:23:37,760 --> 00:23:46,960
That then runs a HTML file on localhost with a canvas in it and an audio element in it.

00:23:46,960 --> 00:23:52,770
And essentially the Web Audio API analyzes the frequencies because the frequencies can

00:23:52,770 --> 00:23:56,640
be mapped to notes which we learned earlier if you went to Ruth's talk, and I said, maybe

00:23:56,640 --> 00:24:01,900
I can map the frequencies like that and I could see a picture come out.

00:24:01,900 --> 00:24:07,610
But I had to run this headless so I had to figure out a way to get the image from the

00:24:07,610 --> 00:24:12,600
canvas out and actually look at it, so I ended up taking the result in canvas after mapping

00:24:12,600 --> 00:24:17,140
all the frequency graphs on it, and I made that a basic coded string that I was able

00:24:17,140 --> 00:24:21,750
to DOM out into the console, I was able to take that string and pipe it out into another

00:24:21,750 --> 00:24:30,250
program I wrote, that's 64, and then converts that to a png file itself.

00:24:30,250 --> 00:24:35,530
And then that would console.log the path to where that file is, and then I could pipe

00:24:35,530 --> 00:24:42,890
that into a great npm package called picture-tube which allows me to look at pictures in my

00:24:42,890 --> 00:24:43,890
console.

00:24:43,890 --> 00:24:48,370
And so all of this was JavaScript from beginning to end, and this is the way that I had to

00:24:48,370 --> 00:24:49,850
do it all on the command line.

00:24:49,850 --> 00:24:50,850
Good times.

00:24:50,850 --> 00:24:57,950
MARIKO: Can I just comment the fact that I sounded super mean...

00:24:57,950 --> 00:25:00,320
I wasn't trying to be mean.

00:25:00,320 --> 00:25:01,520
I thought it was cool.

00:25:01,520 --> 00:25:06,309
SUZ: I was expecting PCM data and I was a little offended that you sent me compressed

00:25:06,309 --> 00:25:10,190
audio data since I'm used to working with PCM.

00:25:10,190 --> 00:25:13,730
So this is the headless Chromium job.

00:25:13,730 --> 00:25:20,190
I set it with a query parameter, so it could go fetch it in the API.

00:25:20,190 --> 00:25:26,650
And there would be cases where I would have a bug in the code and the bug wouldn't send

00:25:26,650 --> 00:25:30,900
properly and so I had to put a 60-second timer on it and kill the process.

00:25:30,900 --> 00:25:32,830
So that was fun.

00:25:32,830 --> 00:25:41,050
The base-64 process there is taking the image data from the standard and it's -- sorry,

00:25:41,050 --> 00:25:47,610
it's taking the base-64 string and then it's piping that into an actual file, and then

00:25:47,610 --> 00:25:50,440
this is kind of what my final command ended up looking like.

00:25:50,440 --> 00:25:51,810
So it's a rather long run.

00:25:51,810 --> 00:25:56,290
It took me a while to write because I'm not a super fast typer.

00:25:56,290 --> 00:26:05,380
So I'm drawing the canvas and then I use that as an argument to picture-tube in order to

00:26:05,380 --> 00:26:06,940
view the image.

00:26:06,940 --> 00:26:08,940
MARIKO: This is what it looks like.

00:26:08,940 --> 00:26:13,860
SUZ: Is this what you drew me because it's really not that good.

00:26:13,860 --> 00:26:14,970
It doesn't look that good.

00:26:14,970 --> 00:26:19,020
I mean if you squint, it kind of looks like a puppy that's kind of facing that way.

00:26:19,020 --> 00:26:23,370
MARIKO: I can see how you might get this is what I would send because this is like what

00:26:23,370 --> 00:26:26,850
I would do for my textile patterns.

00:26:26,850 --> 00:26:30,380
SUZ: I was expecting something different.

00:26:30,380 --> 00:26:36,950
And so I managed to shell into the pi, and I managed to drag down to it, into a computer

00:26:36,950 --> 00:26:41,980
that has a graphical user interface.

00:26:41,980 --> 00:26:46,340
So here's the thing, if Mariko layered several notes on top of each other playing at the

00:26:46,340 --> 00:26:49,740
same time, I don't really have access to that.

00:26:49,740 --> 00:26:54,990
That's very hard for me to pull out pixels that are kind of laid on top of each other.

00:26:54,990 --> 00:26:56,059
So this is the best I could do.

00:26:56,059 --> 00:27:00,670
I ended up just pumping out a whole bunch of different frequencies to see if I could

00:27:00,670 --> 00:27:12,090
see patterns emerging.

00:27:12,090 --> 00:27:13,800
This is actually what it looks like.

00:27:13,800 --> 00:27:15,260
Not that great.

00:27:15,260 --> 00:27:21,330
MARIKO: And this is the file name of the emoji that I used, it was heart, heart, heart, wink.

00:27:21,330 --> 00:27:25,940
SUZ: So she mapped it to the file name, so I should have known all along.

00:27:25,940 --> 00:27:31,970
But in my defense, if you look at it, when you layer it on top of, you can see the bits

00:27:31,970 --> 00:27:34,800
of silence between the shapes.

00:27:34,800 --> 00:27:39,740
And if you really squint, I think that you can kind of make out, like, the peaks on the

00:27:39,740 --> 00:27:43,150
heart shape at the top, but yeah, I thought that was pretty cool.

00:27:43,150 --> 00:27:47,559
So that was kind of my exploration of trying to figure out the mystery that Mariko had

00:27:47,559 --> 00:27:49,620
encoded in the MP3 file.

00:27:49,620 --> 00:27:53,610
MARIKO: So what did we learn from this entire experience?

00:27:53,610 --> 00:27:55,750
We had a few thoughts of what we thought we learned.

00:27:55,750 --> 00:27:57,260
SUZ: We learned a lot.

00:27:57,260 --> 00:28:04,929
MARIKO: So the journey, we realized that it's not about the end result; it's about the process.

00:28:04,929 --> 00:28:10,340
The end result -- the tiny app that I made is super simple -- you could have made it

00:28:10,340 --> 00:28:16,300
in a few hours if you know your thing but I didn't know any of those standards, or binary,

00:28:16,300 --> 00:28:22,890
or array buffer or anything, and I learned a whole ton by making a tiny thing that does

00:28:22,890 --> 00:28:24,220
a maybe simple thing.

00:28:24,220 --> 00:28:28,630
SUZ: I didn't have time to cover this in my section but I went a deep rabbit hole about

00:28:28,630 --> 00:28:34,330
the MP3 file format, learned a ton about that and then started writing a decoder, and started

00:28:34,330 --> 00:28:37,890
realizing that this is probably a path that I didn't want to go down under.

00:28:37,890 --> 00:28:40,740
But that's why I cheated with the Web Audio API.

00:28:40,740 --> 00:28:41,850
Yeah, learned a lot.

00:28:41,850 --> 00:28:50,920
MARIKO: Next one, it doesn't have to have a point.

00:28:50,920 --> 00:28:55,870
Many times when we mention to people, that, hey, Suz and I are doing a special project.

00:28:55,870 --> 00:29:00,520
Everybody is like, what are doing with that special project?

00:29:00,520 --> 00:29:05,710
You guys are starting stuff all the time.

00:29:05,710 --> 00:29:07,820
Just do a project for fun.

00:29:07,820 --> 00:29:10,060
It's like you learn a ton.

00:29:10,060 --> 00:29:11,100
SUZ: It's your personal time.

00:29:11,100 --> 00:29:15,990
So really do what makes you passionate and if that's a business, that's okay.

00:29:15,990 --> 00:29:20,310
But for us, we just want to make a thing together, play jokes on each other along the way, and

00:29:20,310 --> 00:29:22,530
yeah, just teach each other stuff, too.

00:29:22,530 --> 00:29:27,679
MARIKO: And a lot of times people think that we're doing this side project really seriously

00:29:27,679 --> 00:29:32,530
and then ask for, like, what's the weekly update kind of thing but it's a side project.

00:29:32,530 --> 00:29:33,960
We have day jobs.

00:29:33,960 --> 00:29:37,670
SUZ: Yeah, we went for weeks without hearing from each other, and, again, I never got to

00:29:37,670 --> 00:29:40,760
see that GarageBand file until we got to Berlin.

00:29:40,760 --> 00:29:47,720
MARIKO: And lastly, having a friend who has a similar, like-minded understanding of what

00:29:47,720 --> 00:29:49,390
we do together.

00:29:49,390 --> 00:29:53,799
I don't know if that language made sense, that might sound like spec language, was great.

00:29:53,799 --> 00:30:00,429
One thing that I learned from this experience was not the few months be or the few weeks

00:30:00,429 --> 00:30:05,880
that we actually did the data exchange but the six or eight months leading up to it.

00:30:05,880 --> 00:30:08,830
We decided to do a project, we were in it.

00:30:08,830 --> 00:30:14,170
And then every meetup, every conference, every subway ride, if we see something that we like,

00:30:14,170 --> 00:30:18,170
we just wink at each other, hey, what do you think about that thing?

00:30:18,170 --> 00:30:22,600
And it's so nice to have somebody who don't have to, like, worry about.

00:30:22,600 --> 00:30:27,560
Like, hey, if I mention this thing and it didn't use like the latest Babel Translate,

00:30:27,560 --> 00:30:30,850
is she going to judge me?

00:30:30,850 --> 00:30:33,429
It's like, this sounds cool, let's do it.

00:30:33,429 --> 00:30:39,990
SUZ: You should always find your code weirdos that are weird in the same way as you.

00:30:39,990 --> 00:30:44,160
And that's what I learned.

00:30:44,160 --> 00:30:48,890
And on that note, we are going to part ways but we are just going to tell you about just

00:30:48,890 --> 00:30:50,670
a couple of quick things that we're working on.

00:30:50,670 --> 00:31:00,100
I do a live twit stream almost every Sunday so I kind of code on open source and also

00:31:00,100 --> 00:31:02,270
on weird projects like this.

00:31:02,270 --> 00:31:07,240
I secretly coded on the next step -- I don't know if you knew that -- I was was secretly

00:31:07,240 --> 00:31:09,980
coding on the next step.

00:31:09,980 --> 00:31:19,560
It's switch.db/noopkat, and I call it multipaired programming because I just implement the suggestions

00:31:19,560 --> 00:31:20,740
that people have on the chat.

00:31:20,740 --> 00:31:21,930
Which is cool.

00:31:21,930 --> 00:31:31,290
MARIKO: And I started joining a tech concept called tiny humans in colorful boxes and this

00:31:31,290 --> 00:31:35,330
was something I was thinking, like, a data infrastructure.

00:31:35,330 --> 00:31:39,230
I wanted to build an infrastructure and I wanted to make sure that our data is secure.

00:31:39,230 --> 00:31:43,429
So I started reading up on encryption and secured Internet connections and things, so

00:31:43,429 --> 00:31:44,429
I started learning that stuff and put it on my Twitter.

00:31:44,429 --> 00:31:45,429
So if you're interested, check out my Twitter.

00:31:45,429 --> 00:31:46,429
And on that note... thank you very much.

00:31:46,429 --> 00:31:47,429
SUZ: Thank you.

00:31:47,429 --> 00:31:48,429
[ Applause ]

00:31:48,429 --> 00:31:49,429
>> Thank you so much.

00:31:49,429 --> 00:31:50,429
That was amazing.

00:31:50,429 --> 00:31:51,429
I think you really cornered the market on having fun with JavaScript.

00:31:51,429 --> 00:31:52,429
I don't think anyone is doing it better than you.

00:31:52,429 --> 00:31:53,429
So we're going to have a quick break now.

00:31:53,429 --> 00:31:54,429
Get caffeinated, get beered up if you want to start early.

00:31:54,429 --> 00:31:55,429
You can also get your butts to the Community Lounge during this break and there's a lightning

00:31:55,429 --> 00:31:56,429
talk there that's what is live.js.

00:31:56,429 --> 00:31:57,429
And these are the people who are doing the music during the breaks.

00:31:57,429 --> 00:31:58,429
So if you want to go see that, check back here at 5:45.

00:31:58,429 --> 00:31:58,929

YouTube URL: https://www.youtube.com/watch?v=6qd2RZsRNUE


