Title: Christoph Nakazawa:  Building High-Quality JavaScript Tools | JSConf EU 2017
Publication date: 2017-06-02
Playlist: JSConf EU 2017
Description: 
	http://2017.jsconf.eu/speakers/chris-pojer-building-high-quality-javascript-tools.html

Jest was adopted widely across 100s of companies recently and provides an immersive testing experience. Weâ€™ll take a deeper look at JavaScript Testing with Jest and what it takes to turn a tool into a product with a delightful experience.
Captions: 
	00:00:02,510 --> 00:00:04,870
How are you, everyone?

00:00:30,440 --> 00:00:31,440
[ Applause ]

00:00:31,440 --> 00:00:32,440
CHRIS: I'm Chris.

00:00:32,440 --> 00:00:33,440
I work at Facebook.

00:00:33,440 --> 00:00:38,019
I'm an engineering manager on the JavaScript Tools Team in London and today I'm going to

00:00:38,019 --> 00:00:39,640
talk about building high-quality --

00:00:39,640 --> 00:00:46,819
[ Lapse in Audio ]

00:00:46,819 --> 00:00:54,589
-- and to make -- and I'd like to show you how we applied a product mindset to Jest,

00:00:54,589 --> 00:00:59,329
our JavaScript framework that aims to make testing painless and I want to show you how

00:00:59,329 --> 00:01:03,030
it works to rebuild it.

00:01:03,030 --> 00:01:08,180
By a quick show of hands, how many people have heard of Jest?

00:01:08,180 --> 00:01:09,780
Who is using Jest?

00:01:09,780 --> 00:01:10,909
Okay.

00:01:10,909 --> 00:01:12,120
That's awesome.

00:01:12,120 --> 00:01:16,230
If you're using it already, I'm not going to try to convince you but if you're not using

00:01:16,230 --> 00:01:20,850
it, I want to convince you more.

00:01:20,850 --> 00:01:29,680
So unfortunately, testing with Jest wasn't as painless as we wanted it to be.

00:01:29,680 --> 00:01:36,990
Everyone was starting to adopt Jest, you know?

00:01:36,990 --> 00:01:38,890
And I'm not making this up.

00:01:38,890 --> 00:01:42,580
This is an actual tweet about Jest from about two years ago.

00:01:42,580 --> 00:01:45,760
This is never something you want to hear from a project.

00:01:45,760 --> 00:01:49,020
We knew we had some work to do.

00:01:49,020 --> 00:01:52,280
And at Facebook, it wasn't that much better.

00:01:52,280 --> 00:01:57,550
Jest worked okay as a tool so, you know, write tests for your JavaScript applications but

00:01:57,550 --> 00:02:02,920
here's the thing, in this oil painting, you can see a party going on here.

00:02:02,920 --> 00:02:06,170
And this Jester, he's so gloomy, and sad.

00:02:06,170 --> 00:02:10,009
And this is literally the experience that people had at Facebook when they were dealing

00:02:10,009 --> 00:02:12,260
with JavaScript testing.

00:02:12,260 --> 00:02:16,430
Everybody was super excited about building React applications but we found that no one

00:02:16,430 --> 00:02:21,139
was actually writing any tests because scripting with Jest wasn't great.

00:02:21,139 --> 00:02:29,670
And so we decided to rebuild Jest and turn that sad Jester to a happy one.

00:02:29,670 --> 00:02:32,349
But you might be asking yourself: Hold on.

00:02:32,349 --> 00:02:33,719
Who needs testing?

00:02:33,719 --> 00:02:34,719
Who cares?

00:02:34,719 --> 00:02:41,010
We realize that Jest isn't great, but maybe we can get by without any testing.

00:02:41,010 --> 00:02:46,810
But, of course, testing is an important part of the engineering process.

00:02:46,810 --> 00:02:52,299
It significantly influences engineering behavior and we learn that people write differently

00:02:52,299 --> 00:02:56,670
with or without a test framework.

00:02:56,670 --> 00:03:02,290
And to be specific about this, it helps by enabling a faster iterative development cycle.

00:03:02,290 --> 00:03:09,340
It makes sure you have four bugs in your applications and you can make releases more often.

00:03:09,340 --> 00:03:13,930
So when we go on to improve testing, we can look at it as we would at any product.

00:03:13,930 --> 00:03:18,700
You know, like, what do you do with it and how can we make that experience better?

00:03:18,700 --> 00:03:23,549
So for Jest, it's about what do you want when you're writing a test runner, and what do

00:03:23,549 --> 00:03:25,230
you want when you're writing tests?

00:03:25,230 --> 00:03:31,209
For running tests, I should get feedback as soon as possible, it should give me a signal

00:03:31,209 --> 00:03:33,150
for failing immediately.

00:03:33,150 --> 00:03:39,799
But for writing tests, I want to have all of them available to me but also I want great

00:03:39,799 --> 00:03:46,329
documentation to I can learn how to write effective tests and as we developed these

00:03:46,329 --> 00:03:49,400
requirements, we can come up with three things.

00:03:49,400 --> 00:03:55,799
One of them is performance, the other one is features, and then adoptability.

00:03:55,799 --> 00:03:58,999
All three of these requirements, they're equally important.

00:03:58,999 --> 00:04:04,090
You need to fulfill all of them at the same time to make a successful product.

00:04:04,090 --> 00:04:08,529
For example, if you're building the most feature rich test runner, but then it's really, really

00:04:08,529 --> 00:04:13,549
slow, nobody is going to adopt it, and, at the same time, if you're building a really,

00:04:13,549 --> 00:04:17,680
really fast test runner, with no features, again, nobody will adopt it.

00:04:17,680 --> 00:04:21,590
And, of course, if you are building the most amazing test runner, and nobody's using it,

00:04:21,590 --> 00:04:23,650
then what's the point of all of this?

00:04:23,650 --> 00:04:29,250
So I gave you a bunch of buzzwords but if we peel this product layer back a little bit

00:04:29,250 --> 00:04:34,260
and look at an emoji, about what it was like an engineer working on this, this was really,

00:04:34,260 --> 00:04:36,580
really hard and painful.

00:04:36,580 --> 00:04:40,920
We had something that didn't work well and we had to fix it.

00:04:40,920 --> 00:04:46,751
And I came up with these three things that help -- that help you understand this process

00:04:46,751 --> 00:04:50,940
to make something great and it's: Fix, rewrite, and polish.

00:04:50,940 --> 00:04:55,350
It's kind of like FRP, functional reactive programming, but this is fix, rewrite, and

00:04:55,350 --> 00:04:56,500
polish.

00:04:56,500 --> 00:05:01,170
And let me take you through this journey by talking about the three major requirements.

00:05:01,170 --> 00:05:04,720
And first is performance.

00:05:04,720 --> 00:05:08,540
Performance at scale is really important actually.

00:05:08,540 --> 00:05:13,940
At Facebook, we realized we had thousand of test suites and a slow test runner and so

00:05:13,940 --> 00:05:15,980
we fixed that.

00:05:15,980 --> 00:05:23,710
And, naturally, your instincts would tell you, let's rebuild the new thing.

00:05:23,710 --> 00:05:26,700
But at Facebook we couldn't do that.

00:05:26,700 --> 00:05:33,720
But we learned from past experience that big rewrites take longer than anticipated and

00:05:33,720 --> 00:05:36,760
sometimes they don't even work out at all.

00:05:36,760 --> 00:05:44,380
So we decided to improve our testing framework by not explicitly rewriting the whole thing,

00:05:44,380 --> 00:05:50,960
but by making major changes incrementally in small parts of the framework itself.

00:05:50,960 --> 00:05:56,190
And I want to stress that it's enough to make 1% improvements over time.

00:05:56,190 --> 00:05:59,330
Here's where it helped.

00:05:59,330 --> 00:06:04,900
Internally, at Facebook, we have thousands of test files and tens of thousands of modules.

00:06:04,900 --> 00:06:09,270
You know, we have a lot of information that we need to keep track of to run tests.

00:06:09,270 --> 00:06:14,420
It's not just which tests are associated with which modules, it's also which modules are

00:06:14,420 --> 00:06:21,720
associated with which tests so that we can run the correct tests when files are changing.

00:06:21,720 --> 00:06:26,800
So we rebuild the system that analyzes the entire file system, and then extracts metadata

00:06:26,800 --> 00:06:30,320
from all the files that we care about, and then also tracks dependencies.

00:06:30,320 --> 00:06:37,610
For example, if you're using Jest and you're using the store file up there, it knows not

00:06:37,610 --> 00:06:43,690
to use the entire store test, with all the thousands of files we have.

00:06:43,690 --> 00:06:53,860
We also have a system that parallelizes across worker processes by looking at data from previous

00:06:53,860 --> 00:06:56,090
test runs.

00:06:56,090 --> 00:06:58,860
That makes tests a lot faster.

00:06:58,860 --> 00:07:02,120
And then as a told you, we made a lot of small improvements over time.

00:07:02,120 --> 00:07:06,300
We changed how we cached transform files to make them more effective.

00:07:06,300 --> 00:07:17,000
We improved the -- because we haven't, like, worked at Jest for a while, and then we just

00:07:17,000 --> 00:07:21,500
figured out what alternatives have been created since then.

00:07:21,500 --> 00:07:26,380
So now that we have performance in a good state and we can run Jest with tens of thousands

00:07:26,380 --> 00:07:33,460
of test files, we need to look at features.

00:07:33,460 --> 00:07:37,730
Jest comes with dozens of awesome features out of the box, but today I'll only focus

00:07:37,730 --> 00:07:39,610
on three of them.

00:07:39,610 --> 00:07:44,200
First one is the improved output, then we'll talk about this immersive watch mode that

00:07:44,200 --> 00:07:48,170
sucks you into Jest, and you just kind of stay there, and it's an awesome unit-testing

00:07:48,170 --> 00:07:53,460
experience, and then we'll also talk briefly about the snapshot assertion.

00:07:53,460 --> 00:07:57,460
So let's focus on the improved output first.

00:07:57,460 --> 00:07:59,400
This is Jest used to look like.

00:07:59,400 --> 00:08:05,020
Log messages all over, and stack traces that didn't matter, and you have a stack assertion

00:08:05,020 --> 00:08:09,450
where you're comparing two objects and you have no idea what's going on, right?

00:08:09,450 --> 00:08:15,010
We realized that Jest was okay when tests were passing but the value of a test framework

00:08:15,010 --> 00:08:19,050
is to actually give you a signal about failing tests and helping you resolve those issues

00:08:19,050 --> 00:08:25,639
and so we just rewrote the assertion library with the product mindset to see, what do engineers

00:08:25,639 --> 00:08:27,870
want to see when a test is failing.

00:08:27,870 --> 00:08:33,130
So, for example, we color-coded everything so that you know what is green and what is

00:08:33,130 --> 00:08:38,320
red and we're also showing you a div when two objects don't match up so you know exactly

00:08:38,320 --> 00:08:39,690
what's going on.

00:08:39,690 --> 00:08:43,370
The exciting thing about this is we gave Jest its own identity.

00:08:43,370 --> 00:08:46,700
When you see a screenshot of this framework, you instantly know that it's Jest.

00:08:46,700 --> 00:08:47,750
It's awesome.

00:08:47,750 --> 00:08:51,390
We also have this concurrent runner which is awesome.

00:08:51,390 --> 00:08:59,690
It tells you which test is running right now, and how long it's going to take based on previous

00:08:59,690 --> 00:09:02,030
test runs.

00:09:02,030 --> 00:09:07,430
What's also awesome is Jest takes a note when it's failing, and next time you run it, it

00:09:07,430 --> 00:09:12,680
actually runs the failed test first to give you a signal immediately because that's probably

00:09:12,680 --> 00:09:17,250
what you care most at that point in time.

00:09:17,250 --> 00:09:23,140
The next thing I want to talk about is the immersive watch mode.

00:09:23,140 --> 00:09:26,450
It just runs tests quickly and then shows you what's happening and then what you want

00:09:26,450 --> 00:09:28,120
to do with it.

00:09:28,120 --> 00:09:36,140
So when you call it, you call it with --watch, and then you have the p, for example, where

00:09:36,140 --> 00:09:41,960
you have this pattern mode, and then you have this typing mode where you can select from

00:09:41,960 --> 00:09:47,670
a dropdown, Jest knows everything about your system, and your and knows exactly which version

00:09:47,670 --> 00:09:49,570
you have.

00:09:49,570 --> 00:09:52,940
In the next version of Jest, we extended this a little further.

00:09:52,940 --> 00:09:55,190
You even have keyboard navigation in this.

00:09:55,190 --> 00:10:00,420
I know I've been talking about CLI tools, but these are all great CLI tools and a great

00:10:00,420 --> 00:10:03,560
developer experience in them.

00:10:03,560 --> 00:10:07,450
And then finally I want to talk about snapshots.

00:10:07,450 --> 00:10:12,550
Have you ever written an assertion like this, and then you don't know exactly what you're

00:10:12,550 --> 00:10:16,830
going to put in your test, you don't know exactly what the output of your function is?

00:10:16,830 --> 00:10:19,910
It happens quite often, right?

00:10:19,910 --> 00:10:26,560
We do what we always do, we comment out this assertion, and we log the value and we take

00:10:26,560 --> 00:10:30,720
that and put it back in our test and we know what is going on here.

00:10:30,720 --> 00:10:37,800
And judging from the faces that I see, I know that you are as guilty as I am.

00:10:37,800 --> 00:10:45,300
So we found that people weren't writing inform tests from code that could benefit from this.

00:10:45,300 --> 00:10:51,529
And so we introduced this new assertion that's called toMatchSnapshot() and here's how it

00:10:51,529 --> 00:10:53,320
works.

00:10:53,320 --> 00:11:00,270
The first time you used it, it will inspect the output of your code, and Jest will record

00:11:00,270 --> 00:11:02,430
it a snapshot, in a snapshot file.

00:11:02,430 --> 00:11:08,240
And then the next time you run it, it compares the output of your code.

00:11:08,240 --> 00:11:15,001
For example, here we're changing a React component from Facebook.com to instagram.com, and Jest

00:11:15,001 --> 00:11:20,870
will yell at you and say, change in your code has changed, is this intentional or not?

00:11:20,870 --> 00:11:26,520
And you can say, I'll pass in a flag to update all the snapshots.

00:11:26,520 --> 00:11:28,460
All right.

00:11:28,460 --> 00:11:32,750
And a bunch of you might be looking at me like, hold on, Christoph, what are you doing

00:11:32,750 --> 00:11:33,750
here?

00:11:33,750 --> 00:11:34,880
This is not testing here at all.

00:11:34,880 --> 00:11:42,100
But we found that it's actually better to be able to create these kinds of tests for

00:11:42,100 --> 00:11:47,740
regression testing, for example, really quickly instead of just waiting until that code hits

00:11:47,740 --> 00:11:51,230
production and that is the first time that anybody is ever running that code, right?

00:11:51,230 --> 00:11:55,270
So it's preventing a lot of issues for people.

00:11:55,270 --> 00:12:02,270
And snapshots, I want to be clear about that: They don't replace conventional testing, or

00:12:02,270 --> 00:12:04,350
all the other assertions.

00:12:04,350 --> 00:12:06,190
It's just an addition on top of those.

00:12:06,190 --> 00:12:12,110
It's just one assertion among 20, or 30, or however many ships with Jest.

00:12:12,110 --> 00:12:17,620
The difference isn't between snapshot testing and utter assertions, the difference is between

00:12:17,620 --> 00:12:20,650
snapshot testing or no testing at all.

00:12:20,650 --> 00:12:26,990
There are products like the JavaScript Farmer, where I'm not confident it would exist in

00:12:26,990 --> 00:12:29,730
its current form if it weren't for snapshot testing.

00:12:29,730 --> 00:12:34,490
It just couldn't have moved as quickly.

00:12:34,490 --> 00:12:40,970
And as you know by now because I've told you, Jest is a great test runner, like this jester

00:12:40,970 --> 00:12:44,630
in this photo, it takes care of everything.

00:12:44,630 --> 00:12:48,230
Which brings me to a really exciting announcement.

00:12:48,230 --> 00:12:51,850
It's actually really big but in the end, it's kind of impressive.

00:12:51,850 --> 00:12:55,770
I'm going to show you one more feature.

00:12:55,770 --> 00:12:59,980
Have you ever found yourself, like, juggling multiple projects in one day and you have,

00:12:59,980 --> 00:13:03,660
like, a really hard time.

00:13:03,660 --> 00:13:08,270
Imagine you're building a React front end and a Node.js backend, or you're working at

00:13:08,270 --> 00:13:09,910
Facebook and you're having a terrible day.

00:13:09,910 --> 00:13:14,551
You're trying to debug a bunch of projects in a single day, and you have a bunch of test

00:13:14,551 --> 00:13:19,870
runs on a bunch of different products and that's not really fun.

00:13:19,870 --> 00:13:27,550
So we taught Jest how to juggle and we call this the multiprocess runner which leads me

00:13:27,550 --> 00:13:30,930
to this incredibly unimpressive demo.

00:13:30,930 --> 00:13:41,880
In the next version of Jest, Jest 20, you'll be able to pass anything that you want.

00:13:41,880 --> 00:13:47,410
It will watch all your projects at the same time in a single instance.

00:13:47,410 --> 00:13:50,940
Here, it's going to be running a few tests in watch mode.

00:13:50,940 --> 00:13:55,190
I'm starting it up with a bunch of products like Yarn, and Jest, and Relay, and React,

00:13:55,190 --> 00:14:04,480
and you can run these tests across you will of these products.

00:14:04,480 --> 00:14:09,920
So that's going to be shipping in the next version of Jest.

00:14:09,920 --> 00:14:14,029
And finally about features, I want to say that the experience should be delightful.

00:14:14,029 --> 00:14:21,779
I don't want to fight with my test runner because only if the experience is enjoyable,

00:14:21,779 --> 00:14:26,839
then that will actually make people want to write more tests.

00:14:26,839 --> 00:14:31,050
So now that we've looked at performance and features, we should also talk a little bit

00:14:31,050 --> 00:14:35,430
about adoptability because we spent all of this time at Facebook to make Jest really,

00:14:35,430 --> 00:14:39,640
really good and now it's -- we just want to you give it a try, right?

00:14:39,640 --> 00:14:42,190
How do you get started with this?

00:14:42,190 --> 00:14:47,440
The great thing about Jest is we've turned it into this zero-configuration framework.

00:14:47,440 --> 00:14:51,300
It ships with a ton of features out of the box, and all you have to do is install it

00:14:51,300 --> 00:14:52,640
with Yarn.

00:14:52,640 --> 00:14:57,180
And then you go on to do a simple test.

00:14:57,180 --> 00:15:05,279
And then you just run it.

00:15:05,279 --> 00:15:11,000
We also managed to bundle Jest with other JavaScript tools to form a more cohesive development

00:15:11,000 --> 00:15:12,050
experience.

00:15:12,050 --> 00:15:21,670
If you're using React Native, or Create React App, you don't need to set anything up.

00:15:21,670 --> 00:15:24,640
This also leads me to another small announcement.

00:15:24,640 --> 00:15:30,640
So the JavaScript tools team in London at Facebook is also working on Yarn, the passenger

00:15:30,640 --> 00:15:31,840
manager.

00:15:31,840 --> 00:15:34,920
Next week, we're going to ship a really tiny command that I'm excited about.

00:15:34,920 --> 00:15:40,500
It's called YarnCreate and it's extendible and you can look at it as your new entry point

00:15:40,500 --> 00:15:43,380
for any new reaction.

00:15:43,380 --> 00:15:49,260
So you can say yarn create react app, or yarn create native file and you can create your

00:15:49,260 --> 00:15:50,260
own like that.

00:15:50,260 --> 00:15:55,610
So this is a super sweet way to get started with something new.

00:15:55,610 --> 00:15:59,603
These low-friction ways are something great and you might even get started on your next

00:15:59,603 --> 00:16:02,790
project with Jest, right?

00:16:02,790 --> 00:16:05,590
That's not enough.

00:16:05,590 --> 00:16:11,930
We also need to figure out how to make Jest work for you when you're already using -- when

00:16:11,930 --> 00:16:13,980
you already have a big project.

00:16:13,980 --> 00:16:19,709
When you peel back the outer layer of Jest, you should ideally also find things that make

00:16:19,709 --> 00:16:22,769
sense on its own.

00:16:22,769 --> 00:16:25,230
And that wasn't always the case.

00:16:25,230 --> 00:16:29,220
Not long ago, Jest was one big repository without much internal structure.

00:16:29,220 --> 00:16:34,220
So we did something super obvious, we introduced structure by turning it into one big module

00:16:34,220 --> 00:16:35,589
in a repository.

00:16:35,589 --> 00:16:41,880
We actually split up Jest into 13 individual packages that can be reused in many different

00:16:41,880 --> 00:16:43,300
contexts.

00:16:43,300 --> 00:16:48,720
We're talking about pulling things apart from one big giant thing into many, many small

00:16:48,720 --> 00:16:50,510
packages.

00:16:50,510 --> 00:16:55,580
This helped with the separation of concerns between the different modules and it naturally

00:16:55,580 --> 00:16:58,920
led us to learning Jest into a platform.

00:16:58,920 --> 00:17:05,360
We actually ship all of these packages to npm and you can install of them individually

00:17:05,360 --> 00:17:10,179
and use them in contexts that sometimes don't even have anything to do with testing.

00:17:10,179 --> 00:17:15,480
They range from just like an ESLint plugin, or a port plugin, or a snapshot implementation,

00:17:15,480 --> 00:17:21,510
or all the low-level implementations of Jest.

00:17:21,510 --> 00:17:29,059
In Facebook, we use this hastemap package, in Instagram, for React's native packager,

00:17:29,059 --> 00:17:37,090
and and the snapshot package has also been adopted by another -- and React development

00:17:37,090 --> 00:17:44,420
libraries like storybook, and style guides.

00:17:44,420 --> 00:17:48,850
And then the Jest Validate Package is a tool that can help you for your own JavaScript

00:17:48,850 --> 00:17:54,710
tools to make them easier to set them up and, give meaningful error messages to your users

00:17:54,710 --> 00:17:58,190
and I'll show you a quick example of this one because I think it's pretty cool.

00:17:58,190 --> 00:18:05,580
I think I'm sure all of you can agree with me that it's -- if you drop Jest Validate

00:18:05,580 --> 00:18:08,570
into your own projects, you can make it easier for everybody.

00:18:08,570 --> 00:18:12,309
So in this case, if you're setting up Jest for the first time, and you have a typo in

00:18:12,309 --> 00:18:17,590
your configuration, it will yell at you and that's very easy to set up.

00:18:17,590 --> 00:18:22,870
So packages help you to consolidate infrastructure and share best practices.

00:18:22,870 --> 00:18:27,530
It's a good case when all the parts together, Jest, is pretty good.

00:18:27,530 --> 00:18:31,970
But the parts, individually, they're also great.

00:18:31,970 --> 00:18:36,549
And by sharing best practices, the way I see it, the more we can standardized in how we

00:18:36,549 --> 00:18:42,860
write tests, the easier it will be for people to write effective tests.

00:18:42,860 --> 00:18:48,049
And then the other effect of the separation of concerns had was it made Jest more hackable

00:18:48,049 --> 00:18:53,070
and we were able to make a great open source community around it.

00:18:53,070 --> 00:19:06,970
For example, which is the editor integration in VS have interesting code for Jest.

00:19:06,970 --> 00:19:12,230
And we managed to merge the generic pieces back into Jest so that other ADEs could adopt

00:19:12,230 --> 00:19:17,210
and provide a great user experience to Jest.

00:19:17,210 --> 00:19:22,679
We managed to add two core contributes to Jest who are not working at Facebook and they're

00:19:22,679 --> 00:19:24,720
contributing to Jest on their own time.

00:19:24,720 --> 00:19:32,540
So I'll show you an example of that.

00:19:32,540 --> 00:19:37,341
So Rahelian Miguel joined, and I was like, I should just build this type ahead like I

00:19:37,341 --> 00:19:38,809
did earlier, right?

00:19:38,809 --> 00:19:44,440
And it's a fairly complex feature, and one day I woke up and Rahelian was like, I found

00:19:44,440 --> 00:19:47,690
this really interesting, and I went ahead and built it.

00:19:47,690 --> 00:19:54,330
And I came back and I said, wow, this is amazing, we have to use that.

00:19:54,330 --> 00:20:02,679
And then a couple of days later, he just came back and said, here's another pull request,

00:20:02,679 --> 00:20:04,510
and I rewrote the entire test.

00:20:04,510 --> 00:20:05,620
It's awesome.

00:20:05,620 --> 00:20:07,299
Let's ship it.

00:20:07,299 --> 00:20:09,740
And that was a great experience.

00:20:09,740 --> 00:20:15,740
And Rahelian did a ton of great work with Jest and even presented it at React Conf.

00:20:15,740 --> 00:20:21,630
And so the Jest project is easily contributable to everybody.

00:20:21,630 --> 00:20:28,820
We know that there's new contributors to Jest every week that we haven't even known about

00:20:28,820 --> 00:20:29,820
before.

00:20:29,820 --> 00:20:31,400
So that's awesome.

00:20:31,400 --> 00:20:42,830
And the -- conferences like this one -- there's tutorials, blog posts, books even written

00:20:42,830 --> 00:20:48,070
about Jest, and then, finally, I feel like we have new conventions about simplifying

00:20:48,070 --> 00:20:53,350
testing and writing new tests and I find that really exciting.

00:20:53,350 --> 00:20:58,960
One thing that I'm going to ask you, the JavaScript community is -- we need help with translations.

00:20:58,960 --> 00:21:03,880
Documentation is essential to teach people how to write tests and if documentation is

00:21:03,880 --> 00:21:08,530
not written in the language that you're most familiar with, it's really hard to get started.

00:21:08,530 --> 00:21:14,520
So if you have some time, if you speak another language, please help us translate the documentation

00:21:14,520 --> 00:21:15,520
for Jest.

00:21:15,520 --> 00:21:17,620
We would really appreciate it.

00:21:17,620 --> 00:21:21,230
But that's still not enough to get people to adopt Jest.

00:21:21,230 --> 00:21:23,680
We need something more if you have an existing project.

00:21:23,680 --> 00:21:28,110
And some people might have seen this slide before and they're catching on to what I'm

00:21:28,110 --> 00:21:30,000
trying to do here.

00:21:30,000 --> 00:21:35,510
So I was here about two years ago, and I announced this concept of code mods to the JavaScript

00:21:35,510 --> 00:21:36,510
community, right?

00:21:36,510 --> 00:21:43,750
It's, like, this system of how you can transform entire codebases to new APIs, right?

00:21:43,750 --> 00:21:49,361
So there's this project called jest-codemods, and with jscodeshift, you can convert a project

00:21:49,361 --> 00:21:53,530
to Jest.

00:21:53,530 --> 00:21:54,850
Here's a small refresher.

00:21:54,850 --> 00:22:01,180
Say you have this test with jscodeshift, and jest-codemods, you can automatically convert

00:22:01,180 --> 00:22:07,290
this and print all of your files in a way as if you have written themselves and export

00:22:07,290 --> 00:22:16,630
them immediately in a couple of seconds and I have a short demo of this.

00:22:16,630 --> 00:22:17,700
So I found this project.

00:22:17,700 --> 00:22:23,080
All I did so far, I've added Jest, it has a couple hundred tests and then I just type

00:22:23,080 --> 00:22:24,520
jest-codemods.

00:22:24,520 --> 00:22:27,580
Not codemod, codemods.

00:22:27,580 --> 00:22:36,340
And I've looked at this before, and I hit inspect.

00:22:36,340 --> 00:22:39,200
Codemods break down silos between frameworks.

00:22:39,200 --> 00:22:45,290
They allow you to move from one framework to other frameworks in a couple of seconds.

00:22:45,290 --> 00:22:52,309
And all we need to do now is run Jest, and I've tested it before, so you get a nice performance

00:22:52,309 --> 00:22:53,309
speed-up.

00:22:53,309 --> 00:22:56,430
That is the wrong version of Jest, also.

00:22:56,430 --> 00:22:58,760
I apologize.

00:22:58,760 --> 00:22:59,980
We need Yarn for this.

00:22:59,980 --> 00:23:00,980
Okay.

00:23:00,980 --> 00:23:02,330
This is going to take a couple of seconds.

00:23:02,330 --> 00:23:03,510
So this is super exciting.

00:23:03,510 --> 00:23:06,250
You can just go to a new test runner.

00:23:06,250 --> 00:23:08,290
All right.

00:23:08,290 --> 00:23:10,000
There's only about eight tests failing out of 300.

00:23:10,000 --> 00:23:14,340
So I feel pretty good about this.

00:23:14,340 --> 00:23:36,049
So I just wanted to send a quick -- it is not -- there it is.

00:23:36,049 --> 00:23:47,770
I'll explain a bit more later.

00:23:47,770 --> 00:23:51,679
All right.

00:23:51,679 --> 00:23:57,620
We got this, cool.

00:23:57,620 --> 00:24:01,750
The best part of this story that Jest code mods was entirely community driven.

00:24:01,750 --> 00:24:06,150
The project was created by the community, iterated on by the community, and is maintained

00:24:06,150 --> 00:24:07,240
by the community.

00:24:07,240 --> 00:24:09,030
This is awesome.

00:24:09,030 --> 00:24:14,070
As a result, more than 100 companies have told us they've adopted Jest in the last six

00:24:14,070 --> 00:24:15,100
months alone.

00:24:15,100 --> 00:24:17,789
Some of them are really big, some of them are really small.

00:24:17,789 --> 00:24:19,320
So it's impossible without code mods.

00:24:19,320 --> 00:24:24,760
If we look at metrics at Facebook, the number of tests people wrote in the last six months

00:24:24,760 --> 00:24:31,200
has grown by 35%, which is more than twice as much as it has grown ever before.

00:24:31,200 --> 00:24:36,179
When we improved our testing experience, people at Facebook naturally started writing more

00:24:36,179 --> 00:24:37,179
tests.

00:24:37,179 --> 00:24:44,570
And after all this, the experience of writing tests with Jest is not painful anymore.

00:24:44,570 --> 00:24:51,070
And I would even say that it's more than just painless.

00:24:51,070 --> 00:24:55,380
It's now a product that gives confidence to engineers when they're building software.

00:24:55,380 --> 00:25:00,820
And not only did we accomplish that, we also made testing fun and exciting.

00:25:00,820 --> 00:25:07,330
And, finally, I've been mentioning Jest a few times in the last 20 minutes and I've

00:25:07,330 --> 00:25:10,030
pointed out a bunch of major features that we are going to do ship.

00:25:10,030 --> 00:25:13,960
It's been a while since we've had a major release and we've worked really, really hard

00:25:13,960 --> 00:25:14,960
on this.

00:25:14,960 --> 00:25:20,590
It's the biggest Jest release that we've ever made and I was gonna show and ship this to

00:25:20,590 --> 00:25:24,800
you right now.

00:25:24,800 --> 00:25:31,970
We just need to publish it with Yarn and Lerna and this is going to be a major -- of course,

00:25:31,970 --> 00:25:33,870
it's going to be awesome.

00:25:33,870 --> 00:25:36,750
And then I need to merge this.

00:25:36,750 --> 00:25:39,260
I'll send another pull request right now, quick.

00:25:39,260 --> 00:25:42,150
Just one moment.

00:25:42,150 --> 00:25:47,610
All right.

00:25:47,610 --> 00:25:50,340
Sweet.

00:25:50,340 --> 00:25:53,930
So that's two pull requests.

00:25:53,930 --> 00:25:56,470
I think that's enough for today.

00:25:56,470 --> 00:25:58,150
[ Applause ]

00:25:58,150 --> 00:26:01,520
Thank you.

00:26:01,520 --> 00:26:07,660
What you've seen today is that building tools is successful when you look beyond your own

00:26:07,660 --> 00:26:12,000
walls and you collaborate with the wider JavaScript community.

00:26:12,000 --> 00:26:16,110
With Jest, which was a lesson that we learned the hard way, you know?

00:26:16,110 --> 00:26:20,770
But the best part about working together is that the best ideas often come from people

00:26:20,770 --> 00:26:24,630
who you don't work with every day and the result is products that we can turn with a

00:26:24,630 --> 00:26:25,630
delightful experience.

00:26:25,630 --> 00:26:26,630
Thank you very much.

00:26:26,630 --> 00:26:27,630
>> Thank you, Chris.

00:26:27,630 --> 00:26:28,630
How's everyone?

00:26:28,630 --> 00:26:29,630
Falling asleep?

00:26:29,630 --> 00:26:30,630
Getting more coffee?

00:26:30,630 --> 00:26:31,630
Where? save?

00:26:31,630 --> 00:26:32,630
Well, okay.

00:26:32,630 --> 00:26:33,630
I was thinking of an interpretive dance but I feel like not everyone wants to see that,

00:26:33,630 --> 00:26:34,630
so maybe we're going to skip that part.

00:26:34,630 --> 00:26:35,630
All right.

00:26:35,630 --> 00:26:36,630
We skipped the awkward part of me trying to dance, which is great for you and we have

00:26:36,630 --> 00:26:37,630
our next speaker, Matthew, who's working at BBC, and he's going to tell you all the awesome

00:26:37,630 --> 00:26:38,630
things that you can do with video and the browser.

00:26:38,630 --> 00:26:39,130

YouTube URL: https://www.youtube.com/watch?v=PvabBs_utr8


