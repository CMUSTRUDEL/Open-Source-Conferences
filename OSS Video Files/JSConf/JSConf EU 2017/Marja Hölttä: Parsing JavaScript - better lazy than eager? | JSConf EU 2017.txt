Title: Marja Hölttä: Parsing JavaScript - better lazy than eager? | JSConf EU 2017
Publication date: 2017-05-18
Playlist: JSConf EU 2017
Description: 
	http://2017.jsconf.eu/speakers/marja-hoelttae-parsing-javascript-better-lazy-than-eager.html

Parsing JavaScript fast is critical for fast web page startup. We’ll look at challenges posed by complex frameworks and new language features and how V8, the JavaScript engine behind Google Chrome, solves them. You’ll learn how to write and bundle your code in a way that is fast to parse.

Some topics I’ll cover in the talk:

- How does V8 parse JavaScript and how does it decide what parts to parse / compile upfront?
- Recent and upcoming improvements in the area of parsing JavaScript better
- What should developers do to make parsing be less of a bottleneck?
- Why is benchmarking parsing hard?
Captions: 
	00:00:03,139 --> 00:00:10,580
Marja Hoeltta Parsing JavaScript - better lazy than eager.

00:00:27,320 --> 00:00:30,119
MARJA: Hi, everybody.

00:00:30,119 --> 00:00:32,840
I'm super excited to be here.

00:00:32,840 --> 00:00:38,079
I work in the V8 team as a software engineer and I will talk about parsing JavaScript.

00:00:38,079 --> 00:00:44,039
This talk is going to be about V8, the engine behind Google Chrome and how we parse JavaScript.

00:00:44,039 --> 00:00:49,039
I figure if I'm going to give a parser talk, I should tell you what parsing is to get everybody

00:00:49,039 --> 00:00:53,290
on the same page and why you should care about it.

00:00:53,290 --> 00:00:59,170
I'm going to talk about how V8 parses JavaScript and what you as a web developer can do to

00:00:59,170 --> 00:01:02,940
help us parse better.

00:01:02,940 --> 00:01:04,620
What is parsing?

00:01:04,620 --> 00:01:09,720
So, for those who didn't see the previous talk, the parser gets the JavaScript source

00:01:09,720 --> 00:01:15,259
code and constructs data structures called AST and scopes based on it.

00:01:15,259 --> 00:01:17,980
I will tell you in a minute what those are.

00:01:17,980 --> 00:01:22,520
Then the bytecode generator walks those structures and generates bytecode.

00:01:22,520 --> 00:01:28,280
It is then interpreted by the interpreter and the optimising compiler also gets the

00:01:28,280 --> 00:01:35,799
bytecode and machine code based on it and the machine code is executed directly.

00:01:35,799 --> 00:01:39,500
So let's look at some simple source code and what the parser does with it.

00:01:39,500 --> 00:01:44,909
The parser constructs an AST, an abstract syntax tree, that describes the structure

00:01:44,909 --> 00:01:46,490
of the source code.

00:01:46,490 --> 00:01:52,539
For the function, there is a function literal and there is a variable declaration and an

00:01:52,539 --> 00:01:54,310
an assignment.

00:01:54,310 --> 00:01:58,890
Every time we see a variable name, we create a variable proxy for it.

00:01:58,890 --> 00:02:04,820
We don't know what proxy it is, it represents the variable.

00:02:04,820 --> 00:02:07,920
The zero is the literal.

00:02:07,920 --> 00:02:09,520
Then there is an if statement.

00:02:09,520 --> 00:02:15,810
It has the condition which is empty here.

00:02:15,810 --> 00:02:18,090
The "then" part contains for code.

00:02:18,090 --> 00:02:22,920
There is another variable declaration and an assignment and we create variable proxy

00:02:22,920 --> 00:02:28,310
objects to recreate the name of the available and then there is a return statement again

00:02:28,310 --> 00:02:30,540
with a variable proxy.

00:02:30,540 --> 00:02:34,819
This is the AST that the parser generates based on the code.

00:02:34,819 --> 00:02:42,431
In addition to the AST, the parser also generates scopes where the variables are declared, so

00:02:42,431 --> 00:02:47,760
now for the function, there is one declaration scope, and for the if-statement body, there

00:02:47,760 --> 00:02:49,830
is another scope.

00:02:49,830 --> 00:02:54,230
The declaration scope Danes the variable A and the if statement contains the variable

00:02:54,230 --> 00:03:04,620
B. The variable proxies occur in the code which belongs to that scope.

00:03:04,620 --> 00:03:05,709
Then we do scope analysis.

00:03:05,709 --> 00:03:12,970
This means we connect the variable proxies to the declared variables, so, in this phase,

00:03:12,970 --> 00:03:18,900
we figure out that all references to A actually mean the variable declared in the function,

00:03:18,900 --> 00:03:23,500
and all references to B mean a different variable.

00:03:23,500 --> 00:03:28,480
And, to do this, it's not enough to just look at the current scope where we are in, for

00:03:28,480 --> 00:03:33,209
example, with the returns statement, there is return A but A is not declared in that

00:03:33,209 --> 00:03:34,209
scope.

00:03:34,209 --> 00:03:39,621
Instead, what we need to do is that we walk up the scope chain to find where the variable

00:03:39,621 --> 00:03:43,569
is declared and now we find it in the parent scope in the declaration scope.

00:03:43,569 --> 00:03:48,830
Okay, so, this is quite a lot of detail on one side, and, in reality, it is even more

00:03:48,830 --> 00:03:49,830
interconnected.

00:03:49,830 --> 00:03:52,319
I just couldn't draw all the arrows on the slide.

00:03:52,319 --> 00:03:56,990
This was exhausting to make and also probably super exhausting to look at.

00:03:56,990 --> 00:04:06,159
Look at this for a second!

00:04:06,159 --> 00:04:09,629
Why should you care about parsing?

00:04:09,629 --> 00:04:14,599
Here is a diagram where real world spend their time in V8.

00:04:14,599 --> 00:04:22,070
Parsing is the orange blob on the left and turns out the web pages around 15 to 20 per

00:04:22,070 --> 00:04:25,690
cent of their V8 time in parsing.

00:04:25,690 --> 00:04:31,010
Parsing is on the critical path for web page start-up.

00:04:31,010 --> 00:04:41,630
According to Google's production web app study a typical page spends around 370 milliseconds

00:04:41,630 --> 00:04:46,760
passing it on mobile, so that's quite a lot of time, if you think about it.

00:04:46,760 --> 00:04:51,960
So this means that our parsing speed is roughly one megabyte per second on mobile.

00:04:51,960 --> 00:04:57,440
How does V8 parse JavaScript?

00:04:57,440 --> 00:05:03,410
I'm going to talk about the two parsing modes, eager and lazy, and why parsing is hard and

00:05:03,410 --> 00:05:07,880
why benchmarking it is hard.

00:05:07,880 --> 00:05:11,400
We don't actually have one parsers, we have two.

00:05:11,400 --> 00:05:16,450
They are called parser and pre-parser, for historical reasons.

00:05:16,450 --> 00:05:22,440
Parser is the full eager one.

00:05:22,440 --> 00:05:31,220
It builds the AST and the scopes and finds the syntax errors in the code.

00:05:31,220 --> 00:05:36,430
The pre-parser is the fast, lazy one.

00:05:36,430 --> 00:05:44,350
So, it basically just finds where the function ends so that we can carry on.

00:05:44,350 --> 00:05:46,720
It doesn't build an AST.

00:05:46,720 --> 00:05:51,690
It build scopes but it doesn't put variable references or variable declarations in the

00:05:51,690 --> 00:05:52,690
scopes.

00:05:52,690 --> 00:05:58,430
It is approximately twice as fast as parser, and it only finds a restricted set of errors,

00:05:58,430 --> 00:06:02,970
so it doesn't actually comply with the ECMAScript spec but we are somehow getting away with

00:06:02,970 --> 00:06:06,750
it!

00:06:06,750 --> 00:06:11,570
Here's an example of how we use the two parsers to parse your JavaScript code.

00:06:11,570 --> 00:06:13,320
All top-level code is eager.

00:06:13,320 --> 00:06:16,210
We use an actual parser to parse it.

00:06:16,210 --> 00:06:29,130
We see an - in there example, there is a - this is because

00:06:29,130 --> 00:06:31,950
you want to call the function right after.

00:06:31,950 --> 00:06:33,000
So we should eager-parse that.

00:06:33,000 --> 00:06:39,250
In this case, the guess is correct, and there actually is a call to this function so this

00:06:39,250 --> 00:06:41,270
is eager parse.

00:06:41,270 --> 00:06:46,310
Other top-level function are lazy parsed.

00:06:46,310 --> 00:06:50,250
So we use the pre-parser for parsing that function body.

00:06:50,250 --> 00:06:55,770
Later on, at some point in time, you might want to call this function so at that point

00:06:55,770 --> 00:07:03,490
when you call the function, it is eager-parsed, compiled and executed.

00:07:03,490 --> 00:07:05,420
There are some other heuristics.

00:07:05,420 --> 00:07:10,300
If there is an exclamation before the function, it turns it eager.

00:07:10,300 --> 00:07:16,980
If there is another comma, it turns it eager.

00:07:16,980 --> 00:07:19,060
These are all eager.

00:07:19,060 --> 00:07:23,410
Here are some trickier lazy versus eager cases.

00:07:23,410 --> 00:07:28,470
The problem is we need to make the decision which parser to use before we use the function

00:07:28,470 --> 00:07:31,740
body or anything that follows it.

00:07:31,740 --> 00:07:36,380
We need to see it when we see the function took.

00:07:36,380 --> 00:07:38,240
We assign a function to a variable.

00:07:38,240 --> 00:07:40,250
This function is lazy.

00:07:40,250 --> 00:07:42,330
There is no par 11 before it.

00:07:42,330 --> 00:07:46,130
We use the - there is no paren before it.

00:07:46,130 --> 00:07:52,610
The second example looks just like the first one except we call this function an assigned

00:07:52,610 --> 00:07:59,240
return value of that call to F2, but we cannot know it when we need to make decision on whether

00:07:59,240 --> 00:08:03,850
to parse or pre-parse, or whether to eager parse or lazy-parse this function, so we end

00:08:03,850 --> 00:08:10,650
up making the exact same decision in both cases, so, in the second one, we also lazy-parse

00:08:10,650 --> 00:08:17,880
this, and, when this line is execute the, we need to eager-parse it right after and

00:08:17,880 --> 00:08:20,640
compile it.

00:08:20,640 --> 00:08:24,390
But it was kind of the wrong decision but we just couldn't know based on the code that

00:08:24,390 --> 00:08:27,280
we have seen so far.

00:08:27,280 --> 00:08:31,480
So these lazy versus eager rules are not specified in the spec.

00:08:31,480 --> 00:08:35,680
Each engine is free to implement them as they see fit, or they don't need to implement lazy

00:08:35,680 --> 00:08:38,000
parsing at all if they don't like to.

00:08:38,000 --> 00:08:44,650
V8 just tries to guess based on the syntax which functions are probably called and then

00:08:44,650 --> 00:08:49,180
eager-parse those functions and lazy-parse the rest.

00:08:49,180 --> 00:08:51,450
So why is this relevant for you?

00:08:51,450 --> 00:08:56,630
So, it turns out we need lazy-parsing because web pages ship a lot of code they don't execute

00:08:56,630 --> 00:09:04,300
- at least not on start-up - so we want to use as little work for doing, to do as little

00:09:04,300 --> 00:09:07,540
work for processing that code that is not needed.

00:09:07,540 --> 00:09:11,960
It is also important that we pick the right unto use.

00:09:11,960 --> 00:09:17,070
If we eager-parse something that is not needed, we're just wasting time, it is not necessary.

00:09:17,070 --> 00:09:22,670
On the other hand, if we lazy-parse something that's needed then we pay the cost at pre-parse

00:09:22,670 --> 00:09:25,500
at the cost of parse.

00:09:25,500 --> 00:09:32,020
The pre-parse is half the cost cost, so it's like nun and a half times the parse cost we

00:09:32,020 --> 00:09:34,390
need to pay.

00:09:34,390 --> 00:09:39,210
The problem is knowing what code is executed at start-up.

00:09:39,210 --> 00:09:43,752
You can also force eager parsing by wrapping function that is are critical functions for

00:09:43,752 --> 00:09:49,900
start-up in parens.

00:09:49,900 --> 00:09:58,430
There is a library called optimise- just that does this so it should have use and that results

00:09:58,430 --> 00:10:09,920
in speed -ups with most of the browsers -- optimize-just.

00:10:09,920 --> 00:10:14,930
We should also minimise the cost for cases where cases where we get the guess wrong.

00:10:14,930 --> 00:10:18,560
This is an area where we are actively working on in the attempt.

00:10:18,560 --> 00:10:27,460
Lazy parse be inner function assist nor complicated than lazy-parsing top-level code top to understand

00:10:27,460 --> 00:10:30,740
why, we need to look at context allocation.

00:10:30,740 --> 00:10:32,670
Here is some example code.

00:10:32,670 --> 00:10:39,830
There is a function outer which is an so we eager-parse.

00:10:39,830 --> 00:10:45,120
That is a local variable called a.

00:10:45,120 --> 00:10:50,320
Then it has an inner function that returns this local variable.

00:10:50,320 --> 00:10:55,060
And then this function outer returns a reference to the inner function.

00:10:55,060 --> 00:10:59,550
Now we call this function and assign the return fall to f.

00:10:59,550 --> 00:11:03,750
Now, f will be a reference to inner.

00:11:03,750 --> 00:11:06,740
And then we call f and we print out the return value.

00:11:06,740 --> 00:11:13,210
So, this will print out to any, as you might expect, but where is it coming from?

00:11:13,210 --> 00:11:19,330
Normally, when you call a function, it is local or variables are put on the stack, but

00:11:19,330 --> 00:11:25,240
here, when we are calling f, we're not inside a call to outer, so it definitely cannot be

00:11:25,240 --> 00:11:26,970
on the stack.

00:11:26,970 --> 00:11:28,050
So where is it?

00:11:28,050 --> 00:11:31,960
The answer is it is in the function context.

00:11:31,960 --> 00:11:37,680
So a function context is an object which the inner function also refers to and keeps it

00:11:37,680 --> 00:11:41,290
alive, so now we have the reference to the inner function because f is a reference to

00:11:41,290 --> 00:11:45,330
it, so that is how the function context is then kept alive.

00:11:45,330 --> 00:11:56,360
When f accesses when inner accesses the variable a, it reads it from the function context.

00:11:56,360 --> 00:12:01,279
If you want to lazy-parse inner in this case, we need to know which variables they refer

00:12:01,279 --> 00:12:07,350
to so that we can put those variables in the function context and not put other variables

00:12:07,350 --> 00:12:08,350
there.

00:12:08,350 --> 00:12:12,150
We don't want to put all variables to the function context because accessing them from

00:12:12,150 --> 00:12:17,000
there, it just is way slower than accessing them from the stack.

00:12:17,000 --> 00:12:26,380
So normally, ... need to, so we need something like lazy parsing with names, and the speed

00:12:26,380 --> 00:12:30,880
for doing that is somewhere between parser and pre-parser.

00:12:30,880 --> 00:12:36,540
So this means that lazy-parsing inner functions will always be heavier than top-level functions

00:12:36,540 --> 00:12:38,670
just because of the semantics.

00:12:38,670 --> 00:12:47,490
Modern JavaScript is heavily nested.

00:12:47,490 --> 00:12:50,930
Everything is wrapped in functions, everything is a module now.

00:12:50,930 --> 00:12:56,779
This is a price you have to pay for, nesting functions like that.

00:12:56,779 --> 00:13:02,070
In some situations, V8 has to reparse code that it has already lazy-parsed.

00:13:02,070 --> 00:13:08,970
In this example, there is a lazy outer function, no paren before the function so we lazy-parse

00:13:08,970 --> 00:13:14,290
it and lazy-parse everything inside the function too.

00:13:14,290 --> 00:13:19,380
When we call this lazy outer function, we need to do something for inner, and how it

00:13:19,380 --> 00:13:24,850
currently works is that we need to pre-parse or lazy-parse inner again even though we have

00:13:24,850 --> 00:13:27,750
done it already once.

00:13:27,750 --> 00:13:30,930
It gets even worse if you nest more.

00:13:30,930 --> 00:13:37,940
So now, in the first run, when we go through the code, we lazy-parse lazy outer and lazy-parse

00:13:37,940 --> 00:13:48,870
everything in it, at some point, you call lazy outer, so we eager-parse lazy outer and

00:13:48,870 --> 00:13:53,970
then lazy lazy-parse parse inner 2.

00:13:53,970 --> 00:14:00,900
We inner parse, and need to lazy-parse inner 2 for the third time.

00:14:00,900 --> 00:14:02,230
Obviously, this is quite bad.

00:14:02,230 --> 00:14:03,600
This is not how it should work.

00:14:03,600 --> 00:14:06,420
This is something I'm working on.

00:14:06,420 --> 00:14:13,100
Instead of lazy-parsing we should keep those functions if we have already lazy-parsed them

00:14:13,100 --> 00:14:14,320
once.

00:14:14,320 --> 00:14:16,190
Why is parsing hard?

00:14:16,190 --> 00:14:21,360
The JavaScript grammar is not ambiguous as such, but it contains some constructs where

00:14:21,360 --> 00:14:24,279
we don't know up front what we are parsing.

00:14:24,279 --> 00:14:28,310
One is parameter list and comma expressions.

00:14:28,310 --> 00:14:30,640
They just the same.

00:14:30,640 --> 00:14:35,589
If you see (abc), you don't know what that is.

00:14:35,589 --> 00:14:39,440
Maybe it is a comma expression.

00:14:39,440 --> 00:14:44,310
It is also possible that it is a valid comma expression but not a valid error function

00:14:44,310 --> 00:14:45,529
parameter list.

00:14:45,529 --> 00:14:54,230
If you see A12, that's a valid comma expression, but A12 is not a valid comma parameter list.

00:14:54,230 --> 00:15:01,279
We don't know if it is an expression or not until we see an arrow following the expression.

00:15:01,279 --> 00:15:03,270
We cannot know.

00:15:03,270 --> 00:15:05,450
For example, when we see the 1.

00:15:05,450 --> 00:15:12,690
The other way round is also possible, the A, B is okay.

00:15:12,690 --> 00:15:21,830
It is arrow function with the rest, but a..B is not okay and this is not something we can

00:15:21,830 --> 00:15:25,940
know when we are parsing, we don't know whether the user intends to use it as an arrow function

00:15:25,940 --> 00:15:27,800
list.

00:15:27,800 --> 00:15:32,390
How the parser solves this is it never rewinds.

00:15:32,390 --> 00:15:39,950
Instead, when it is parsing an unknown construct, it is parsing a very permissive grammar that

00:15:39,950 --> 00:15:45,900
allows both kinds of constructs, and then it records whether it has seen something that

00:15:45,900 --> 00:15:51,390
makes it the invalid function list or an invalid comma expression.

00:15:51,390 --> 00:15:56,770
Then, when we see the closing paren we can check if there is an arrow, and if there is

00:15:56,770 --> 00:16:05,870
an arrow was it - so we just the check of information that we recorded when we - we

00:16:05,870 --> 00:16:12,850
don't jump back and reparse it or anything like that.

00:16:12,850 --> 00:16:18,149
So the parser has high-feature complexity and new language features are added to it

00:16:18,149 --> 00:16:19,630
all the tile.

00:16:19,630 --> 00:16:22,330
Here is a typical parser bug that I found some time ago.

00:16:22,330 --> 00:16:29,200
It is eager parsing failings with that code, but like what is this even?

00:16:29,200 --> 00:16:34,920
So, there is a variable g, and we assign to g an arrow function.

00:16:34,920 --> 00:16:38,890
The arrow function has two parameters.

00:16:38,890 --> 00:16:47,899
There is the destructuring x and then there is g, and the parameter g has a default value.

00:16:47,899 --> 00:16:55,339
That's again an arrow function with a body, and the body is eval x.

00:16:55,339 --> 00:17:03,660
So now, if I force eager parsing, if I disable lazy-parsing, this fails.

00:17:03,660 --> 00:17:10,140
We call the function g without providing a value for g, so the default value kicks in

00:17:10,140 --> 00:17:14,380
and this eval is confused and says, "I have no idea what are you talking about?

00:17:14,380 --> 00:17:19,890
What is this x even though it should resolve to the parameter x."

00:17:19,890 --> 00:17:25,780
The features involved in this bug are lazy versus eager, a destructuring - destructuring

00:17:25,780 --> 00:17:35,530
x, turns out this is not relevant - there are default parameters, there are arrow functions,

00:17:35,530 --> 00:17:41,030
and now an arrow function is used as a default parameter to another rather row function and

00:17:41,030 --> 00:17:46,650
then there is eval, and it's important that the eval is in the body of an arrow function

00:17:46,650 --> 00:17:51,270
which is a default parameter, so this is to give you an idea of the complexity we are

00:17:51,270 --> 00:17:56,520
dealing with in our everyday work.

00:17:56,520 --> 00:17:59,900
Benchmarking parsing is also also non-trivial.

00:17:59,900 --> 00:18:02,309
Here I have some mock benchmarks.

00:18:02,309 --> 00:18:06,430
Benchmark one is not a bench - parsing benchmark.

00:18:06,430 --> 00:18:08,920
It is lots of function with lots of code.

00:18:08,920 --> 00:18:16,000
It is it looks like a lazy function, there is no paren before it, and then the actual

00:18:16,000 --> 00:18:22,130
benchmark starts the timer, calls this function, and measures how long it took.

00:18:22,130 --> 00:18:28,380
But now, if you implement lazy parsing the way I described, we need to parse the function

00:18:28,380 --> 00:18:33,050
when the timer is running, and this is really bad for the benchmark, for the benchmark,

00:18:33,050 --> 00:18:38,850
it would way better just to do as much work upfront as we can, and like parse and compile

00:18:38,850 --> 00:18:43,550
everything when the timer is not running yet.

00:18:43,550 --> 00:18:48,620
Even though we need lazy-parsing for the web, it really makes the benchmark score here worse.

00:18:48,620 --> 00:18:52,230
It's a tiff trade-off.

00:18:52,230 --> 00:18:59,330
There is another benchmark, benchmark 2, that tries to be a benching bench marsh.

00:18:59,330 --> 00:19:05,880
We start the timer, eval a lot of code and then measure how long it took.

00:19:05,880 --> 00:19:13,470
Okay, this is fair, like this definitely exercises parsing when the timer is running, but this

00:19:13,470 --> 00:19:16,610
is totally not how you load JavaScript.

00:19:16,610 --> 00:19:21,620
When you load JavaScript from a file from a resource, a wholly different code path kicks

00:19:21,620 --> 00:19:23,520
in as in here.

00:19:23,520 --> 00:19:29,060
And, for example, there are some improvements we do for the standard code path for the normal

00:19:29,060 --> 00:19:35,460
code path, for example, we download and parse scripts in parallel, and these kind of improvements

00:19:35,460 --> 00:19:40,679
don't benefit this kind of benchmark at all, because eval is just not using the same code

00:19:40,679 --> 00:19:42,390
path.

00:19:42,390 --> 00:19:47,130
So, what can you do to help us parse better?

00:19:47,130 --> 00:19:52,410
So, none of the stuff I talk about can be sort of black and white, like, "Do this or

00:19:52,410 --> 00:19:56,910
absolutely don't do that," I can only tell you how things look from the parser point

00:19:56,910 --> 00:20:00,730
of view and then you can sort of figure out what's the good trade-off for you and your

00:20:00,730 --> 00:20:02,870
use case.

00:20:02,870 --> 00:20:10,010
So, a lot of this stuff you can find in a blog post called "JavaScript start-up performance".

00:20:10,010 --> 00:20:18,430
The first is sheetless JavaScript so we don't need to parse so much.

00:20:18,430 --> 00:20:22,360
[Applause].

00:20:22,360 --> 00:20:28,980
You can also the code coverage, functionality in dev tools to see what parts of your codes

00:20:28,980 --> 00:20:33,730
are not needed or not needed on start-up so maybe it is possible to lazy-load some of

00:20:33,730 --> 00:20:35,430
that code.

00:20:35,430 --> 00:20:41,760
You can measure the parse of your code and the dependencies with the Chrome tracing and

00:20:41,760 --> 00:20:48,540
runtime stats in it and you can see the concrete number of milliseconds that it spends parsing

00:20:48,540 --> 00:20:51,440
your code.

00:20:51,440 --> 00:21:06,200
We have the code-caching, when you load the same script, V8 detects that and butts it

00:21:06,200 --> 00:21:07,660
in the cache.

00:21:07,660 --> 00:21:13,200
The next time you load the script, we don't need to parse it, compile it, we just read

00:21:13,200 --> 00:21:15,400
the bytecode directly from the cache.

00:21:15,400 --> 00:21:17,929
This affects bundling.

00:21:17,929 --> 00:21:23,280
If you bundle a lot of your JavaScript libraries into one file and then you want to update

00:21:23,280 --> 00:21:26,750
one part of it, you lose the code cache for the full bundle.

00:21:26,750 --> 00:21:31,270
We won't be able to figure out that you have updated just one part of the bundle, so this

00:21:31,270 --> 00:21:36,570
is something to be aware of when bundling and updating your code.

00:21:36,570 --> 00:21:39,420
I already mentioned streaming.

00:21:39,420 --> 00:21:44,770
That means we start parsing a script while it's downloading, before it has finishing

00:21:44,770 --> 00:21:50,950
downloading the full script, so it makes sense to use this for big scripts, and to use them

00:21:50,950 --> 00:21:55,310
optimally, you should load them as early as possible and async and so the streamer kicks

00:21:55,310 --> 00:22:04,190
in, and you can also make sure that the streamer is streaming your with Chrome tracing.

00:22:04,190 --> 00:22:09,890
In the event thread, there will be a background and you can see the name of the script that

00:22:09,890 --> 00:22:14,049
got streamed.

00:22:14,049 --> 00:22:16,260
There is very little we can do for eval.

00:22:16,260 --> 00:22:18,760
So, there won't be streaming for that.

00:22:18,760 --> 00:22:20,470
There won't be code cache for that.

00:22:20,470 --> 00:22:28,510
It makes sense to avoid it, avoid evaling big chunks of code if you can.

00:22:28,510 --> 00:22:34,420
In some situations it makes sense to use the parens hack to force the compilation of the

00:22:34,420 --> 00:22:37,040
critical path in your code.

00:22:37,040 --> 00:22:41,160
This makes sense, for example, in if you need to support older Chrome versions.

00:22:41,160 --> 00:22:46,170
If you need performance across browsers or if you need performance right now and can

00:22:46,170 --> 00:22:49,420
wait for us to fix our - can't wait for us to fix our code.

00:22:49,420 --> 00:22:57,030
We are working on making these hacks less and less relevant in the future.

00:22:57,030 --> 00:22:58,710
There is time for bonus content.

00:22:58,710 --> 00:23:01,820
This is code from the V8 parser.

00:23:01,820 --> 00:23:20,059
It is a hand-written recurse descent parser, so here we are inside this parsing statement.

00:23:20,059 --> 00:23:22,880
So the return of that is statement.

00:23:22,880 --> 00:23:27,910
And the first thing we expect to see is token "if".

00:23:27,910 --> 00:23:34,970
This is already checked above for calling this function, and then we expect to see a

00:23:34,970 --> 00:23:36,500
left paren.

00:23:36,500 --> 00:23:48,960
If there is no left paren, then this is a syntax error and we bail out of this function.

00:23:48,960 --> 00:23:50,700
So then we recurse.

00:23:50,700 --> 00:24:00,330
We call a function called ParseExpression and then we expect the right paren after it.

00:24:00,330 --> 00:24:04,590
We recurse again.

00:24:04,590 --> 00:24:18,650
Now it is possible that the if part - thin part - we check is in a token: ELSE?

00:24:18,650 --> 00:24:22,929
If there is, we recurse again for parsing the ELSE part.

00:24:22,929 --> 00:24:31,059
If there is no ELSE, we do nothing, and in the end, we construct the node for the statement.

00:24:31,059 --> 00:24:39,360
It is handwritten, not generated by any rule file or anything like that.

00:24:39,360 --> 00:24:42,000
Here are some things you might want to remember from the talk.

00:24:42,000 --> 00:24:46,460
If you have further questions or comments or want to talk about parsing in general,

00:24:46,460 --> 00:24:47,669
just please get in in touch.

00:24:47,669 --> 00:24:48,669
Thanks for listening.

00:24:48,669 --> 00:24:49,669
[Applause].

00:24:49,669 --> 00:24:50,669
[Music].

00:24:50,669 --> 00:24:51,669
>> Hello, everyone, as you're going for the break for the wonderful coffee, remember that

00:24:51,669 --> 00:24:52,669
we have a community track.

00:24:52,669 --> 00:24:53,669
There will be a lightning talk from a couple of local meet-ups, including Up Front, and

00:24:53,669 --> 00:24:54,669
a few user groups.

00:24:54,669 --> 00:24:55,669
If you're curious how we organise events in Berlin, go and check out the community lounge.

00:24:55,669 --> 00:24:56,169

YouTube URL: https://www.youtube.com/watch?v=Fg7niTmNNLg


