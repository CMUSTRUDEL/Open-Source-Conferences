Title: Jason Miller: Preact: Into the void 0 | JSConf EU 2017
Publication date: 2017-05-16
Playlist: JSConf EU 2017
Description: 
	http://2017.jsconf.eu/speakers/jason-miller-preact.html

Front-end developers sit atop a massive amount of technology, often treating whole pieces of our application as opaque functionality. Grab a hard hat and follow me down into the internals of Preact, a tiny 3kb alternative to React. Along the way we’ll shed light on fundamentals like JSX & Virtual DOM, demystify DOM diffing, and see how keys work up-close. On our way back to the surface, we’ll stop at the Museum of Lost Hours to see some performance and size optimizations. Hope you’re not afraid of the dark!
Captions: 
	00:00:03,110 --> 00:00:11,440
Jason Miller - Preact - Into the void 0 >> I was really hoping for the music to keep

00:00:46,120 --> 00:00:47,120
JASON: Hi, everybody.

00:00:47,120 --> 00:00:48,120
I'm Jason, as was advertised before when the slides came up.

00:00:48,120 --> 00:00:49,120
I'm a developer.

00:00:49,120 --> 00:00:53,440
I'm a serial library author, as some of you may know - that's self-diagnosed.

00:00:53,440 --> 00:00:57,980
I like donuts and poutine and axes which means I'm Canadian.

00:00:57,980 --> 00:01:00,920
I like constraints.

00:01:00,920 --> 00:01:05,130
I've been developing for the mobile web before the mobile web was something anybody would

00:01:05,130 --> 00:01:07,930
wilfully use.

00:01:07,930 --> 00:01:11,560
I've written a bunch of UI frameworks.

00:01:11,560 --> 00:01:16,560
It is a serious problem I've developed that I'm trying to work around, and the reason

00:01:16,560 --> 00:01:20,390
why is I find constraints to be interesting challenges.

00:01:20,390 --> 00:01:26,150
I have something called ADHD - you're probably familiar with that - it basically means that,

00:01:26,150 --> 00:01:31,120
in order to do something effectively, it is best if I can hyperfocus on it and the interesting

00:01:31,120 --> 00:01:36,689
constraint challenges provide me a situation where it is true.

00:01:36,689 --> 00:01:43,330
I wrote Preact and called into the void zero.

00:01:43,330 --> 00:01:49,360
That's the only semicolon you will see in these slides!

00:01:49,360 --> 00:01:51,090
You might be wondering what is Preact.

00:01:51,090 --> 00:01:53,780
This is it in its entirety.

00:01:53,780 --> 00:01:56,570
I did remove the source map comment.

00:01:56,570 --> 00:02:02,799
Today we're going to be to touch that on and that.

00:02:02,799 --> 00:02:03,840
Mostly the second one.

00:02:03,840 --> 00:02:09,190
We can't even talk about them before we even talk about this stuff up here, and this is

00:02:09,190 --> 00:02:14,910
a Preact presentation, so naturally, we need something in purple, so, whatever that is,

00:02:14,910 --> 00:02:17,540
that will be the last thing we touch on.

00:02:17,540 --> 00:02:21,640
Before we did get to any of this, we need to talk about jsx.

00:02:21,640 --> 00:02:26,840
If you're not familiar with it, I don't know what ruck you've been living under.

00:02:26,840 --> 00:02:29,950
Don't worry, it is really, really easy to understand.

00:02:29,950 --> 00:02:33,330
Jsx is simple at its core.

00:02:33,330 --> 00:02:38,660
By the end of my talk, you will be starting to rewrite your webpack configuration in jsx

00:02:38,660 --> 00:02:44,150
which makes is it longer and complex which is a good thing.

00:02:44,150 --> 00:02:51,860
If you don't believe me, go and look at the webpack 2docs and that is in them.

00:02:51,860 --> 00:02:52,860
What is JSX?

00:02:52,860 --> 00:02:58,810
It's an XML-like expression compiled to a function call.

00:02:58,810 --> 00:03:05,379
We write the thing that you see on the left - we write in these HTML-looking angle-bracket

00:03:05,379 --> 00:03:10,930
syntaxes and on the right is what we get out of the transpiler like Babel or Bubl� - there

00:03:10,930 --> 00:03:13,220
are ten transpilers now.

00:03:13,220 --> 00:03:21,150
The whole point to me of JSX is I would be happy writing the thing on the right.

00:03:21,150 --> 00:03:26,380
This is verified by the fact that I'm constantly Tweeted at by people who much prefer the thing

00:03:26,380 --> 00:03:27,380
on the right.

00:03:27,380 --> 00:03:28,769
I think telling.

00:03:28,769 --> 00:03:32,910
I like JSX because I like parity with the DOM.

00:03:32,910 --> 00:03:35,830
The thing on the right is something people are happy to write.

00:03:35,830 --> 00:03:42,550
It is important this is a transparent thing sitting in front of an understandable thing.

00:03:42,550 --> 00:03:47,650
There is one little complexity on top of this from JSX and it is you can get back into JavaScript

00:03:47,650 --> 00:03:50,050
from these angle-bracket syntaxes.

00:03:50,050 --> 00:03:58,330
You can see on the left one and the variable "world" are on the right.

00:03:58,330 --> 00:04:05,769
If you use the capital letter as the first letter of a tag name, resulted in a generating

00:04:05,769 --> 00:04:07,290
code.

00:04:07,290 --> 00:04:12,310
So, the essence of JSX is this factory function we saw.

00:04:12,310 --> 00:04:13,730
It is really simple.

00:04:13,730 --> 00:04:21,459
It just has a signature that accepts the things that you ... tag name, the same thing, which

00:04:21,459 --> 00:04:22,699
will be a string or function.

00:04:22,699 --> 00:04:23,699
Really, it could be anything.

00:04:23,699 --> 00:04:24,839
It's going to be one of these two.

00:04:24,839 --> 00:04:28,379
You have attributes which could be optional, an object, and the rest of the arguments are

00:04:28,379 --> 00:04:31,960
children, and this is how we do composition.

00:04:31,960 --> 00:04:36,159
You might be thinking to yourself, aren't you just writing hyperscript, right?

00:04:36,159 --> 00:04:38,800
Isn't really what this is under the hood?

00:04:38,800 --> 00:04:41,050
You wouldn't be wrong.

00:04:41,050 --> 00:04:48,089
Hyperscript is very similar in, in some cases, it is a slight super set of JSX because of

00:04:48,089 --> 00:04:50,819
this.

00:04:50,819 --> 00:04:53,550
This!

00:04:53,550 --> 00:04:58,639
So hyperscript supports this additional tag syntax where you can use essentially CSS selectors

00:04:58,639 --> 00:05:04,430
to predefined attributes on the element and JSX does not have that.

00:05:04,430 --> 00:05:13,400
So, what JSX does have is the ability to use these sort of extended tag names, so, it is

00:05:13,400 --> 00:05:18,840
important that we have a solid understanding of JSX because the concept is simple and direct,

00:05:18,840 --> 00:05:23,849
but it is the interface through which we access all of these virtual DOM libraries.

00:05:23,849 --> 00:05:30,270
Please remember that JSX is not DOM, not related to DOM, it is just a syntax.

00:05:30,270 --> 00:05:33,379
It doesn't know anything about your code or how it is intended to work.

00:05:33,379 --> 00:05:35,379
You can use this to write your webpack configuration.

00:05:35,379 --> 00:05:36,889
Please don't.

00:05:36,889 --> 00:05:41,499
You could use it to write XML, so if you want to write a soap client and you want to use

00:05:41,499 --> 00:05:44,389
parsing and serialisation, you could use JSX for that.

00:05:44,389 --> 00:05:48,280
I would recommend that as an interesting solution to a problem.

00:05:48,280 --> 00:05:49,879
That's JSX on the way.

00:05:49,879 --> 00:05:53,649
The next step in our adventure is virtual DOM.

00:05:53,649 --> 00:05:58,629
Virtual DOM are objects that represent a tree structure.

00:05:58,629 --> 00:05:59,629
That's it.

00:05:59,629 --> 00:06:00,629
There's nothing else going on.

00:06:00,629 --> 00:06:05,939
I like to think of it as configuration that you're passing to a DOM builder of some kind

00:06:05,939 --> 00:06:10,800
and we are going to walk through in making the DOM builder not so theoretical.

00:06:10,800 --> 00:06:15,939
The first thing we need to understand how do we get from JSX to V-DOM.

00:06:15,939 --> 00:06:22,919
It is fairly straightforward.

00:06:22,919 --> 00:06:26,879
We know that we wrote our JSX, we got our H function calls.

00:06:26,879 --> 00:06:32,580
We need to have an H define such that it produces these objects.

00:06:32,580 --> 00:06:33,729
This is Virtual Dom.

00:06:33,729 --> 00:06:36,979
Sometimes, it gets trumped up beyond this.

00:06:36,979 --> 00:06:38,800
This is what is it looks like.

00:06:38,800 --> 00:06:41,729
It's just nested objects.

00:06:41,729 --> 00:06:44,099
This is surprisingly easy to do.

00:06:44,099 --> 00:06:46,059
This is how you do it.

00:06:46,059 --> 00:06:49,449
It is a one-line function.

00:06:49,449 --> 00:06:54,830
You could normalise children, remove empty values, coalesce adjacent string nodes - lots

00:06:54,830 --> 00:06:59,860
of stuff - but at its volunteer, you could write a virtual DOM renderer using this function.

00:06:59,860 --> 00:07:04,569
Let's do that and write a virtual DOM renderer.

00:07:04,569 --> 00:07:07,580
We will pass ourselves a V node.

00:07:07,580 --> 00:07:13,059
This is the object we saw up there on the right of the scroll bar.

00:07:13,059 --> 00:07:18,189
So the first thing is, we need to create a DOM element that matches the type of the V

00:07:18,189 --> 00:07:24,899
DOM element so we can use that using "create element" pretty straightforward.

00:07:24,899 --> 00:07:34,009
One ID equals foo and then set up recursion so we're going to loop over children, pass

00:07:34,009 --> 00:07:38,469
them back to render and take the resulting DOM element and append it to our current DOM

00:07:38,469 --> 00:07:39,469
element.

00:07:39,469 --> 00:07:44,789
There is one slight complexity here you might have noticed: one of the children is a string.

00:07:44,789 --> 00:07:47,089
One of these things is not like the other.

00:07:47,089 --> 00:07:48,789
We need to deal with that hello text.

00:07:48,789 --> 00:07:56,919
The way we do that, if it is a string, we bail out with a text note.

00:07:56,919 --> 00:07:58,739
That's our virtual DOM renderer.

00:07:58,739 --> 00:08:04,490
There is one slight complexity here in attributes - notice I've called them attributes.

00:08:04,490 --> 00:08:10,509
If anyone has used React, you're probably getting hot under the collar about that.

00:08:10,509 --> 00:08:11,509
They're not attributes.

00:08:11,509 --> 00:08:13,800
Don't let anyone tell you that except me.

00:08:13,800 --> 00:08:17,839
I don't know why I've chosen why I can get away with it - forth duration of the talk

00:08:17,839 --> 00:08:19,129
I can!

00:08:19,129 --> 00:08:27,590
They're props - they're an abstraction between these two things.

00:08:27,590 --> 00:08:34,180
Most HTML elements can accept data as attributes, and they can also accept similar, often typed

00:08:34,180 --> 00:08:38,539
data, as properties through something called DOM property reflection.

00:08:38,539 --> 00:08:40,050
But both of these are technically wrong.

00:08:40,050 --> 00:08:43,539
There are things we can do with attributes that we can't do with properties and things

00:08:43,539 --> 00:08:46,170
we can't do with properties that we can do with attributes.

00:08:46,170 --> 00:08:49,620
What we need is a way to have both.

00:08:49,620 --> 00:08:56,480
Thinking about Preact, with you can't use whitelists.

00:08:56,480 --> 00:09:02,990
Self-closing tag names, that's not a thing that Preact could never do.

00:09:02,990 --> 00:09:08,691
Instead, we have a reference to a DOM node and we ask the DOM node, "Do you have a support

00:09:08,691 --> 00:09:10,440
for a property foo"?

00:09:10,440 --> 00:09:14,940
If it does, we use the property, if not, we fall back on the attribute.

00:09:14,940 --> 00:09:24,509
It is good for custom elements, and we use those and move forward.

00:09:24,509 --> 00:09:28,380
So the question you may be asking yourself is, "Does it work?"

00:09:28,380 --> 00:09:32,079
Sorry, I have a really bad Sean Connery impression.

00:09:32,079 --> 00:09:36,540
I promised someone I wouldn't do that and I had to do it in order to break the promise!

00:09:36,540 --> 00:09:38,070
Here's the virtual DOM we wrote.

00:09:38,070 --> 00:09:45,200
We will pass the through the render function we note.

00:09:45,200 --> 00:09:52,199
Here is the output in JSFiddle and it works.

00:09:52,199 --> 00:09:53,199
Deploy to production.

00:09:53,199 --> 00:09:57,649
Be thankful you don't work with me!

00:09:57,649 --> 00:09:59,850
We build a simple virtual DOM renderer.

00:09:59,850 --> 00:10:08,670
It is a terrible virtual DOM renderer, it's a version 0, but it is terrible because it

00:10:08,670 --> 00:10:10,100
doesn't diff.

00:10:10,100 --> 00:10:15,199
It doesn't look at the current state of the DOM and update the DOM to reflect anything.

00:10:15,199 --> 00:10:23,379
It just blows away the whole DOM and replaces it with something.

00:10:23,379 --> 00:10:27,940
The debate is warranted because there are trade-offs here that you can't treat as black

00:10:27,940 --> 00:10:35,959
and white things.

00:10:35,959 --> 00:10:41,870
Diffing is basically this idea of instead of rendering top down and creating a new as

00:10:41,870 --> 00:10:45,620
we rendered top down, we're going to pass ourselves a reference to what the DOM looks

00:10:45,620 --> 00:10:53,940
like now and then mutate it to look like what this JSX-derived looks like, our virtual DOM,

00:10:53,940 --> 00:10:55,460
just apply the differences.

00:10:55,460 --> 00:11:02,000
On the left, you can see what the virtual DOM looks like.

00:11:02,000 --> 00:11:04,399
On the right, you can see what the actual DOM looks like.

00:11:04,399 --> 00:11:08,089
You can see that the nails are the name or similar.

00:11:08,089 --> 00:11:11,810
There is actually a DOM children property, it just include text nodes so we don't use

00:11:11,810 --> 00:11:12,920
that.

00:11:12,920 --> 00:11:17,500
You can see how you can run through this and perform a comparison left to right and apply

00:11:17,500 --> 00:11:19,519
the changes on the right.

00:11:19,519 --> 00:11:24,490
So, it's basically a three-step process to run through the diff.

00:11:24,490 --> 00:11:26,970
First step is type.

00:11:26,970 --> 00:11:32,470
Before we can do anything, we need to create an element with the correct node name.

00:11:32,470 --> 00:11:35,490
This is pretty straightforward, but that's kind of step one here.

00:11:35,490 --> 00:11:39,690
The second step is we are going to loop over the children, perform a by-directional comparison

00:11:39,690 --> 00:11:43,589
and figure out whether we need to add, remove children, rearrange them, et cetera.

00:11:43,589 --> 00:11:51,899
The last step is to update the attribute/props with the new values from our virtual DOM tree.

00:11:51,899 --> 00:11:54,160
We set up incursion by looping over the children.

00:11:54,160 --> 00:11:56,120
Let's start with type.

00:11:56,120 --> 00:11:59,310
We enter your our diff.

00:11:59,310 --> 00:12:01,519
Is this node owned by a component?

00:12:01,519 --> 00:12:04,620
If it is not owned by a component, things are really easy.

00:12:04,620 --> 00:12:09,870
We look at the node type - in this case, node name - if it is the same, we will update it

00:12:09,870 --> 00:12:13,509
in place and render it.

00:12:13,509 --> 00:12:19,709
If it is different, we're going to throw out the node and create a new one and then continue

00:12:19,709 --> 00:12:22,769
diffing down the tree, setting attributes and trees and so on.

00:12:22,769 --> 00:12:28,170
If a node was owned by a component and things are a little bit more complex, basically we

00:12:28,170 --> 00:12:30,860
needed to create a backing instance.

00:12:30,860 --> 00:12:33,500
Create it if it doesn't exist and update it if it does.

00:12:33,500 --> 00:12:41,000
Then things get easy, we call rending on that backing instance which we pass back into the

00:12:41,000 --> 00:12:45,300
same diff function so it's not that complex.

00:12:45,300 --> 00:12:50,949
There are intricacies here with life cycle, but as far as a chart on a slide goes, it

00:12:50,949 --> 00:12:52,459
is pretty simple.

00:12:52,459 --> 00:12:55,509
So, children is even easier than that.

00:12:55,509 --> 00:12:57,490
It is basically three steps.

00:12:57,490 --> 00:13:01,699
The first step is we loop all over the existing children in the DOM and put them in the lists.

00:13:01,699 --> 00:13:06,160
There is an unkeyed list which is ordered and a keyed list which is named.

00:13:06,160 --> 00:13:11,160
The second step is we move over the new virtual children which are these lightweight objects

00:13:11,160 --> 00:13:18,509
or strings and we find the first match in our list of unkeyed or our map of keyed, and

00:13:18,509 --> 00:13:29,379
we find that or null, an element, and diff that against our virtual DOM child objection.

00:13:29,379 --> 00:13:38,200
We have a specification for that and we insert that in the current index we're at in the

00:13:38,200 --> 00:13:40,220
virtual loop.

00:13:40,220 --> 00:13:45,170
The last stuff is the easiest: if there are any kids left, we delete them because they're

00:13:45,170 --> 00:13:49,050
not used in the updated definition of what the DOM should look like.

00:13:49,050 --> 00:13:53,740
You might be wondering about the keyed versus unkeyed lists.

00:13:53,740 --> 00:13:58,059
This is probably the worst understood of virtual DOMs.

00:13:58,059 --> 00:14:06,199
I tried to explain this on Stack Overflow and butchered it.

00:14:06,199 --> 00:14:13,680
Keys attribute meaningful order to virtual DOM elements when they have uniform type.

00:14:13,680 --> 00:14:18,440
So we can see in in example, we have three list its - one, two, and three.

00:14:18,440 --> 00:14:23,480
In the second render here, we only have two list items, and it is clear to you and I as

00:14:23,480 --> 00:14:31,230
humans that we've deleted item 2, that the text 2 is gone so we know logically, we deleted

00:14:31,230 --> 00:14:34,070
the second item and the third one has moved up.

00:14:34,070 --> 00:14:37,410
A virtual DOM renderer does not know that.

00:14:37,410 --> 00:14:41,699
There is nothing saying that item 2 is item 2 in the second render.

00:14:41,699 --> 00:14:43,350
It receives a new tree each time.

00:14:43,350 --> 00:14:46,260
There's no way for it to correlate these things.

00:14:46,260 --> 00:14:49,949
So what it is going to do is going to look at one - one is unchanged.

00:14:49,949 --> 00:14:50,949
That's easy.

00:14:50,949 --> 00:14:51,949
Nothing happens.

00:14:51,949 --> 00:14:56,559
It is going to look at 2 and it says, "Oh, no, they changed the context of 2 to 3.

00:14:56,559 --> 00:14:59,050
That's fine, I will update that."

00:14:59,050 --> 00:15:01,880
It gets to three and it's gone in the second render.

00:15:01,880 --> 00:15:03,170
It will kill that node.

00:15:03,170 --> 00:15:07,029
The thing to understand here is by default for a list of uniform elements in virtual

00:15:07,029 --> 00:15:11,080
DOM it will always push off and pop at the end.

00:15:11,080 --> 00:15:17,190
It has no concept of removing and adding to the middle of the child list.

00:15:17,190 --> 00:15:20,819
Contrast this with a keyed approach.

00:15:20,819 --> 00:15:26,509
In a keyed approach, we give each element a unique key - they do have to be unique.

00:15:26,509 --> 00:15:28,130
In the first render, we've got one, two, and three.

00:15:28,130 --> 00:15:30,040
In the second render, one and three.

00:15:30,040 --> 00:15:33,760
It's obvious the element with key 2 has been removed.

00:15:33,760 --> 00:15:41,850
Now we tell the DOM renderer what to do, so it knows when it loops over the list, it will

00:15:41,850 --> 00:15:45,500
delete it and move to item 3 which will move up in its place.

00:15:45,500 --> 00:15:48,069
It makes things really, really simple for the renderer.

00:15:48,069 --> 00:15:49,069
It is kind of cheating.

00:15:49,069 --> 00:15:52,660
You're essentially telling the diff to do its own job, but in the where you would like

00:15:52,660 --> 00:15:56,329
to control the diff, it is nice to have the escape hatch.

00:15:56,329 --> 00:16:01,339
The last step for the diff process is attributes.

00:16:01,339 --> 00:16:03,259
This is really easy.

00:16:03,259 --> 00:16:06,199
We give ourselves the old properties in the new properties.

00:16:06,199 --> 00:16:10,509
We loop over the old ones, find the ones that are not in the new property bag and set them

00:16:10,509 --> 00:16:13,850
to undefine in the DOM and then we do the exact opposite.

00:16:13,850 --> 00:16:19,090
For each new attribute, we check if it is new values, check if it was defined and now

00:16:19,090 --> 00:16:25,050
undefined, it is going undefined to some value and then we set its value in the DOM to the

00:16:25,050 --> 00:16:28,820
corresponding property.

00:16:28,820 --> 00:16:35,161
So we solved all of life's problems and now our app is as fast as it could possibly, except

00:16:35,161 --> 00:16:36,850
this is not the case.

00:16:36,850 --> 00:16:44,319
All we've done is move our problems into a library, in Preact, React, Inferno - the list

00:16:44,319 --> 00:16:46,129
goes on.

00:16:46,129 --> 00:16:49,639
I want to tell you guys a little bit about the performance journey I've been on in writing

00:16:49,639 --> 00:16:55,450
Preact, trying to benchmark it and take it further than it currently is.

00:16:55,450 --> 00:17:01,850
This is something you will often see people say, especially if you hang out on Twitter

00:17:01,850 --> 00:17:03,439
for various reasons.

00:17:03,439 --> 00:17:06,890
We often hear complaints the DOM is slow, the DOM is a source of slowness.

00:17:06,890 --> 00:17:11,199
It is true that the DOM is not as fast an immediate-mode drawing API.

00:17:11,199 --> 00:17:13,020
It is not designed to be.

00:17:13,020 --> 00:17:15,480
They're different things.

00:17:15,480 --> 00:17:20,270
But the DOM has all these different things that if we compare it an immediate-drawing

00:17:20,270 --> 00:17:24,089
API we're not taking into account.

00:17:24,089 --> 00:17:28,120
The first one is that the DOM offers accessibility bit in.

00:17:28,120 --> 00:17:33,900
You can an know date the DOM and you're going to get screenreader support for basically

00:17:33,900 --> 00:17:35,210
free.

00:17:35,210 --> 00:17:38,570
Other platforms have ways of doing this, but the DOM's way of doing this is incredibly

00:17:38,570 --> 00:17:39,570
easy.

00:17:39,570 --> 00:17:46,710
You almost don't need to know how it works if you're writing semantic mark-up.

00:17:46,710 --> 00:17:50,990
If I'm using Twitter on windows and I want to add emoji support to Twitter, I install

00:17:50,990 --> 00:17:58,320
a browser extension and I can type in an emijo.

00:17:58,320 --> 00:17:59,840
Twitter don't know about this.

00:17:59,840 --> 00:18:01,180
They don't care about this.

00:18:01,180 --> 00:18:09,770
This is one of the values of the DOM, this substrate that is extensible without our knowledge.

00:18:09,770 --> 00:18:14,130
That's the same thing saying the DOM is framework agnostic.

00:18:14,130 --> 00:18:18,600
You can write two widgets in two different frameworks, and as long as they're rendering

00:18:18,600 --> 00:18:21,870
elements, you can append them to a common parent and they don't have to know or care

00:18:21,870 --> 00:18:23,940
about each other.

00:18:23,940 --> 00:18:33,809
Preact at its core is essentially a DOM renderer.

00:18:33,809 --> 00:18:39,049
On him going to share a couple of lessons I've learned since writing a DOM library.

00:18:39,049 --> 00:18:44,029
The first is use text nodes for text.

00:18:44,029 --> 00:18:48,360
This sounds stupid, I'm aware of that!

00:18:48,360 --> 00:18:53,400
It's surprising how often you will see this either miss construed or misinterpreted.

00:18:53,400 --> 00:18:59,260
The DOM has an API for working with text that we often ignore.

00:18:59,260 --> 00:19:04,890
You concede an initial value, insert these, move them around like any other elements.

00:19:04,890 --> 00:19:08,230
They don't inherit from element, they inherit from node but and so that you can set its

00:19:08,230 --> 00:19:10,669
text.

00:19:10,669 --> 00:19:16,140
I don't remember.

00:19:16,140 --> 00:19:21,169
So, this is a perch mark showing that that is the case.

00:19:21,169 --> 00:19:26,440
We've got text content, and then text.node value just for an a-topic update.

00:19:26,440 --> 00:19:28,700
No value is clearly faster here.

00:19:28,700 --> 00:19:34,780
If you do a library that does text update, you would be crazy to use the first one.

00:19:34,780 --> 00:19:43,170
It is not unjustified in its slowness, it is removing elements that don't belong there.

00:19:43,170 --> 00:19:49,240
It does a lot of work but in a lot of cases, we're using text content in a situation where

00:19:49,240 --> 00:19:51,530
we don't need any of that work.

00:19:51,530 --> 00:19:59,140
So the next DOM lesson - I think that's an ArrowSmith joke - is just avoid getters entirely.

00:19:59,140 --> 00:20:00,190
Don't use them.

00:20:00,190 --> 00:20:05,140
Don't rely on them, or, when you are using them, be incredibly cognizant of the fact

00:20:05,140 --> 00:20:08,000
that they are.

00:20:08,000 --> 00:20:13,320
Here is a snippet from Chrome dev tools sake if we look at the node-type property of a

00:20:13,320 --> 00:20:19,860
next node, it should be the integer three which is the corresponding type.

00:20:19,860 --> 00:20:28,230
It's undefined on the text prototype which is counterintuitive.

00:20:28,230 --> 00:20:33,130
This is a huge red flag that I have highlighted as a red flag.

00:20:33,130 --> 00:20:36,630
The idea is everything is going to have this inheritance from node.

00:20:36,630 --> 00:20:37,679
They implemented it in one place.

00:20:37,679 --> 00:20:39,690
I'm sure there's some reason for this.

00:20:39,690 --> 00:20:42,990
This is a red flag for anybody writing a DOM library.

00:20:42,990 --> 00:20:49,149
This means that, when we write code that relies on node type, by drought, this is not going

00:20:49,149 --> 00:20:50,860
to run as fast as it could.

00:20:50,860 --> 00:20:55,280
Instead, we can use duck-typing to improve the performance of this.

00:20:55,280 --> 00:20:59,170
They have split text.

00:20:59,170 --> 00:21:01,529
Split text is much faster because it is not a getter.

00:21:01,529 --> 00:21:04,080
All we're doing is checking the property exists.

00:21:04,080 --> 00:21:07,200
I know Benedict would tell you this if I didn't.

00:21:07,200 --> 00:21:10,899
You can check to see the if the property exists.

00:21:10,899 --> 00:21:16,580
The problem with the second check is that it will check if it is existing and truthy,

00:21:16,580 --> 00:21:20,090
which is two operations where the second one we don't care about.

00:21:20,090 --> 00:21:23,779
This is a performance test showing that that is true.

00:21:23,779 --> 00:21:27,799
You can see here we've got instance of a couple of different variants there, instance of is

00:21:27,799 --> 00:21:33,529
not great because if you have after text node from a different document, it is a different

00:21:33,529 --> 00:21:35,770
parent class so it is kind of useless.

00:21:35,770 --> 00:21:40,220
The getters are relatively slow but the property accesses are surprisingly fast.

00:21:40,220 --> 00:21:43,510
This is how to Preact reacts to text node.

00:21:43,510 --> 00:21:45,380
Live load lists.

00:21:45,380 --> 00:21:47,789
Please try not to use these.

00:21:47,789 --> 00:21:51,250
They were a good-intentioned thing but they end up hurt performance.

00:21:51,250 --> 00:21:55,710
Here is an example of trying to clear out children of a parent element.

00:21:55,710 --> 00:22:01,880
You do a backwards loop over what appears to be an array because the indexes are going

00:22:01,880 --> 00:22:06,860
to be all screwy if you loop forwards because it is a live node list, they change as you

00:22:06,860 --> 00:22:07,929
mutate.

00:22:07,929 --> 00:22:09,779
But we're removing the children as we go through the list.

00:22:09,779 --> 00:22:12,110
Eventually, we will get back to none and we're good.

00:22:12,110 --> 00:22:17,360
The second one is much faster though because we are accessing one property at each point

00:22:17,360 --> 00:22:18,360
in the loop.

00:22:18,360 --> 00:22:22,279
We never have to go back and ask for child nodes again.

00:22:22,279 --> 00:22:26,610
We never have to access an offset in essentially an array.

00:22:26,610 --> 00:22:28,399
We're just using references.

00:22:28,399 --> 00:22:29,500
So here's a performance benchmark.

00:22:29,500 --> 00:22:33,850
One thing to remember with the benchmark is that a lot is set up overhead, I can benchmark

00:22:33,850 --> 00:22:40,710
the elements, and in the last case, the last child is always faster.

00:22:40,710 --> 00:22:48,029
I've been doing performance optimisation for quite a while.

00:22:48,029 --> 00:22:54,990
Benchmarks were run a loop five million times, check the date before and after, and cross

00:22:54,990 --> 00:22:55,990
your fingers.

00:22:55,990 --> 00:22:59,310
It is still the way stuff works.

00:22:59,310 --> 00:23:02,070
Chrome dev tools has advanced this.

00:23:02,070 --> 00:23:09,490
It is having a tiny copy of Sam in your browser and you can ask him to run performance tests.

00:23:09,490 --> 00:23:18,000
It is far and away the best tab in chrome dev tools to use in a slide!

00:23:18,000 --> 00:23:24,070
One metric is the total time to render a tree of components.

00:23:24,070 --> 00:23:26,240
The value here is that you can see it visually.

00:23:26,240 --> 00:23:34,059
It is 3.18 milliseconds to render this but I can see it is consistently around that same

00:23:34,059 --> 00:23:35,059
value.

00:23:35,059 --> 00:23:37,730
It's good to be able to visualise that.

00:23:37,730 --> 00:23:46,190
The next tool is from a V8 engineer, and this actually touches on what Lin was talking about

00:23:46,190 --> 00:23:47,400
DOps and compilers.

00:23:47,400 --> 00:23:52,620
I can slip over this slide.

00:23:52,620 --> 00:24:01,480
It will show you visually when your code is going to de-opt.

00:24:01,480 --> 00:24:05,670
You run this with flags, and, if you want to know the flags and figure out how to run

00:24:05,670 --> 00:24:12,840
Chrome to get the flags with the tracing output, and go to the - that only works on Mac iOS

00:24:12,840 --> 00:24:18,760
for now.

00:24:18,760 --> 00:24:25,289
This is unsurprisingly the first app built Preact in September of 2015 and it hasn't

00:24:25,289 --> 00:24:26,500
been updated since then.

00:24:26,500 --> 00:24:29,380
There are a whole bunch of UX flaws.

00:24:29,380 --> 00:24:40,370
The goals of the bench is to give you a simple user interface on top of Babble and benchmark.js.

00:24:40,370 --> 00:24:45,660
You can do comparisons of various different implementations of a given function and literally

00:24:45,660 --> 00:24:47,299
just figure out which runs fastest.

00:24:47,299 --> 00:24:53,169
You can do it in a bunch of different browsers, check it as new Chrome diseases come out,

00:24:53,169 --> 00:24:55,770
and suddenly the benchmarks have inverted.

00:24:55,770 --> 00:25:00,090
It is useful to know, that way we're not doing performance optimisations and a year down

00:25:00,090 --> 00:25:04,880
the line, suffering because of them.

00:25:04,880 --> 00:25:08,520
The first lesson is be explicit.

00:25:08,520 --> 00:25:14,240
Don't task something to a Boolean if you have no reason to do that.

00:25:14,240 --> 00:25:19,529
So, in this case, we're checking what looks like the existence of props on an object,

00:25:19,529 --> 00:25:22,850
but really what we are doing is checking that it exists and that it isn't zero, an empty

00:25:22,850 --> 00:25:23,850
string, null, false.

00:25:23,850 --> 00:25:29,850
The next one is explicit checking to see if props are defined.

00:25:29,850 --> 00:25:36,250
Reading this as a programmer, it makes more sense and faster for V8 to be able to run.

00:25:36,250 --> 00:25:39,919
The next lesson is inline helper.

00:25:39,919 --> 00:25:44,090
Functions can be way too develop and JavaScript developers because this is a language that

00:25:44,090 --> 00:25:47,980
will let you do anything you want, this is really, really common.

00:25:47,980 --> 00:25:50,760
So this is a hook function that was in Preact.

00:25:50,760 --> 00:25:51,909
It does way too much stuff.

00:25:51,909 --> 00:25:59,909
It gets deopted immediately and the solution is to rewrite it as an inline functions call.

00:25:59,909 --> 00:26:05,500
Here is a quote by me!

00:26:05,500 --> 00:26:09,500
But basically the idea is if you can avoid making a function call, avoid it.

00:26:09,500 --> 00:26:11,980
Sometimes, there's just no reason to do certain things.

00:26:11,980 --> 00:26:17,250
In the case of Preact, it would be like if you're dipping a virtual DOM tree and there

00:26:17,250 --> 00:26:27,070
is one contextual child, it will update the diff and then bail.

00:26:27,070 --> 00:26:33,260
Probably the most significant performance that has ever gone into Preact is that particular

00:26:33,260 --> 00:26:35,909
early return.

00:26:35,909 --> 00:26:40,980
So the point of all this is to say please make decisions based on actual data.

00:26:40,980 --> 00:26:47,779
Find a way to get data, whether it is a benchmarking tool, dev tools or any of these solutions.

00:26:47,779 --> 00:26:51,400
Collect better data through benchmarks and performance tests and then act on that by

00:26:51,400 --> 00:26:52,400
setting better goals.

00:26:52,400 --> 00:26:57,850
If I can leave you with a message, it is remember we have a shared goal making the web faster

00:26:57,850 --> 00:27:00,210
and more accessible.

00:27:00,210 --> 00:27:04,760
That's how we provide better experiences to frustrated users of the mobile web.

00:27:04,760 --> 00:27:08,810
It is how we're going to make the mobile web the platform of choice in the next three and

00:27:08,810 --> 00:27:13,590
a half years - I suspect that number - and then finally, it is how we get the next billion

00:27:13,590 --> 00:27:17,960
people online so they can benefit from the access to the same resources that we have

00:27:17,960 --> 00:27:20,090
had opportunities from.

00:27:20,090 --> 00:27:21,090
So that's my talk.

00:27:21,090 --> 00:27:21,590

YouTube URL: https://www.youtube.com/watch?v=LY6y3HbDVmg


