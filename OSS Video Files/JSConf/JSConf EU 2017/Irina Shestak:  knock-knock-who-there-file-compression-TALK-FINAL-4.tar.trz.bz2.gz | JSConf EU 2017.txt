Title: Irina Shestak:  knock-knock-who-there-file-compression-TALK-FINAL-4.tar.trz.bz2.gz | JSConf EU 2017
Publication date: 2017-05-30
Playlist: JSConf EU 2017
Description: 
	http://2017.jsconf.eu/speakers/irina-shestak-knockknockwhotherefilecompressiontalkfinal4tartrzbz2gz.html

Fade in. An opened terminal window. iTerm2 is the flavour. Dracula, the theme. You split the panes in two. You are at it again: a stash of audio buffers and that dream of manipulating a lossless file. With node as your language of choice you embark on the night. You manipulate, you transform, you have your byte order sorted, on their own accord your fingers type gzip -f yourFavPhilCollinsSong.mp3. All of a sudden, a whisper:

But what if.

we stream.

file compression.

on the fly.

Fade to black.

In this talk we will walk through file compression algorithms in node as well compression standards. We will cover working with streams, audio buffers, and typed arrays to get us to compress and decompress files, and yourFavPhilCollinsSong.mp3.
Captions: 
	00:00:01,870 --> 00:00:08,420
knock-knock-who-there-file-compression-TALK-FINAL-4.tar.trz.bz2.gz By

00:00:08,420 --> 00:00:14,969
Irina Shestak

00:01:27,760 --> 00:01:32,540
Hey, everyone, my name is Irina.

00:01:32,540 --> 00:01:37,500
I write code over at Scripto.

00:01:37,500 --> 00:01:40,980
And today I'll be talking about compression.

00:01:40,980 --> 00:01:45,820
So when I start off on preparing talks to kind of go into this research mode and I read

00:01:45,820 --> 00:01:47,201
a bunch of papers about stuff.

00:01:47,201 --> 00:01:51,810
So I was reading stuff� certain papers on compression.

00:01:51,810 --> 00:01:57,100
Kind of minifying your code and being faster on the Internet and found this quote.

00:01:57,100 --> 00:02:05,950
Rules of JavaScript are beyond� it was cute to find it in a paper.

00:02:05,950 --> 00:02:13,909
A bunch of people said we do so much JavaScript and JavaScript takes up so much of our space

00:02:13,909 --> 00:02:14,909
on the Internet.

00:02:14,909 --> 00:02:18,790
Everything on the Internet, kept taking up space.

00:02:18,790 --> 00:02:21,690
So we're writing a ton of java script.

00:02:21,690 --> 00:02:29,410
And in fact, by using compression, we were saving about 50% of all that JavaScript traffic.

00:02:29,410 --> 00:02:31,849
So that's why I wanted to talk about compression.

00:02:31,849 --> 00:02:39,620
I know I lured you in here by Phil Collins, but we won't actually do any Phil Collins.

00:02:39,620 --> 00:02:40,909
It's just HTTP compression.

00:02:40,909 --> 00:02:43,299
I'm really sorry.

00:02:43,299 --> 00:02:45,800
So what is compression?

00:02:45,800 --> 00:02:52,909
You start off with a file that, for example, index HTML will look something like this.

00:02:52,909 --> 00:02:53,909
Right?

00:02:53,909 --> 00:02:55,560
You compress it.

00:02:55,560 --> 00:02:57,810
And hopefully it works.

00:02:57,810 --> 00:03:00,420
Compress it, compress it, compress it.

00:03:00,420 --> 00:03:05,109
And then at some point you end up with a much smaller output.

00:03:05,109 --> 00:03:10,650
So if you were to, like, the compress file, looks wonkier, much different than the first

00:03:10,650 --> 00:03:13,730
one we had to begin with.

00:03:13,730 --> 00:03:14,730
Cool.

00:03:14,730 --> 00:03:20,190
And a bunch of that, if you think about it, if it happens over HTTP, you have the client

00:03:20,190 --> 00:03:25,620
talking with each other and you want to pass in the information.

00:03:25,620 --> 00:03:32,379
What the client says, is I'm going to accept some types of compression.

00:03:32,379 --> 00:03:39,560
These and these, that goes under code header.

00:03:39,560 --> 00:03:47,459
Cool, I'm reading that through, but I'll send it based on whatever you can accept.

00:03:47,459 --> 00:03:56,629
So if the client says I'll do Deflate, G zip, it will send in whatever it feels is necessary.

00:03:56,629 --> 00:03:57,830
What are these names?

00:03:57,830 --> 00:04:00,629
They're a little bit confusing.

00:04:00,629 --> 00:04:05,110
Let's kind of work through these as we go through the talk.

00:04:05,110 --> 00:04:11,180
So if you were to actually look into your headers and stuff like that in your console,

00:04:11,180 --> 00:04:17,419
you can see that the accept encoding could be seen through the request headers and then

00:04:17,419 --> 00:04:21,120
if you were to look at the response headers, they're just the same.

00:04:21,120 --> 00:04:25,800
And that's what the� that's what the page sends you back.

00:04:25,800 --> 00:04:28,550
Finally, this is from acceptance coding.

00:04:28,550 --> 00:04:29,569
Cool.

00:04:29,569 --> 00:04:37,130
So a lot of these� a lot of these compression things started off with something called Deflate.

00:04:37,130 --> 00:04:42,560
That's kind of the basic algorithm that most of these will use.

00:04:42,560 --> 00:04:45,920
Things like Gzip.

00:04:45,920 --> 00:04:51,629
But Deflate is a basis of two Huffman and LZ77.

00:04:51,629 --> 00:04:56,250
And these are kind of compression algorithms that take in a bunch of data and see whether

00:04:56,250 --> 00:05:03,160
or not it's similar in one way or another and look at distances between similar codings.

00:05:03,160 --> 00:05:09,020
I won't talk too much about them because it's a little bit boring.

00:05:09,020 --> 00:05:13,949
So I have a bunch of sketched notes on those two in particular so you can look at those

00:05:13,949 --> 00:05:14,949
later.

00:05:14,949 --> 00:05:16,240
But I will talk about Deflate.

00:05:16,240 --> 00:05:20,330
Deflate is the basis for everything else to begin with.

00:05:20,330 --> 00:05:27,030
So Deflate's used to quite� quite primarily with PNGs and Gzip.

00:05:27,030 --> 00:05:30,010
Those are the ones we're used to seeing to begin with.

00:05:30,010 --> 00:05:32,099
What it is a stream of blocks.

00:05:32,099 --> 00:05:34,699
All of these compression things are streams.

00:05:34,699 --> 00:05:37,979
With Deflate, stream of blocks.

00:05:37,979 --> 00:05:40,880
That each block is individually made up of three different bits.

00:05:40,880 --> 00:05:45,159
And the first one is the one that indicates whether or not there will be more data coming

00:05:45,159 --> 00:05:47,889
through in your stream of data.

00:05:47,889 --> 00:05:52,200
One means we're done here, we can close out that stream.

00:05:52,200 --> 00:05:54,759
And zero means there will be more stuff coming in.

00:05:54,759 --> 00:05:56,889
So it's binary.

00:05:56,889 --> 00:06:02,970
The second bit, it passes on the actual raw data and the block.

00:06:02,970 --> 00:06:08,849
The ones they talked about that I won't actually mention as much.

00:06:08,849 --> 00:06:10,759
And the rest of it is a little bit more dynamic.

00:06:10,759 --> 00:06:18,379
So it's the dynamic blocks and the table that kind of references all the other ones to themselves.

00:06:18,379 --> 00:06:20,780
And there's like a little bit that you don't touch.

00:06:20,780 --> 00:06:26,250
So that's kind of what a single individual Deflate look looks like.

00:06:26,250 --> 00:06:27,560
Awesome.

00:06:27,560 --> 00:06:35,380
And so the mention that I will do with LZAT77 and Huffman, is the compression works with

00:06:35,380 --> 00:06:39,509
the pointers, and the pointers are handled by the 77.

00:06:39,509 --> 00:06:44,889
And when we talk about weighted symbols with and symbols in general and how these are a

00:06:44,889 --> 00:06:50,080
lot more than a letter A, has a lot more meaning.

00:06:50,080 --> 00:06:51,080
So that's Deflate.

00:06:51,080 --> 00:06:55,240
And all of these other ones are basis of that.

00:06:55,240 --> 00:07:00,300
And the one we hear a lot more about than Deflate is Gzip compression.

00:07:00,300 --> 00:07:04,199
Those are the ones that most of the content on the Internet actually moves through.

00:07:04,199 --> 00:07:06,820
So Gzip is kind of cool.

00:07:06,820 --> 00:07:12,819
And an implementation of that, that's probably the mostused software library out there, maybe

00:07:12,819 --> 00:07:16,229
after like MySQL lite, is zlib.

00:07:16,229 --> 00:07:24,199
It's the one that actually has a noted limitation.

00:07:24,199 --> 00:07:26,150
That's the one we'll talk about in a bit.

00:07:26,150 --> 00:07:30,729
So you get a little bit more control over processing and memory.

00:07:30,729 --> 00:07:35,830
So that means that you can create a tradeoff as to Whether or not you want a more compressed

00:07:35,830 --> 00:07:38,349
content or you want it to be faster.

00:07:38,349 --> 00:07:40,539
That's how you get around it.

00:07:40,539 --> 00:07:45,860
And it comes with three levels that you can do to create that kind of compression.

00:07:45,860 --> 00:07:49,699
So on level one or level zero, you don't do any compression.

00:07:49,699 --> 00:07:54,960
But on level nine you are able to compress content a lot further and you are able to

00:07:54,960 --> 00:08:01,300
go back further in your static blocks to copy content over and pass it through.

00:08:01,300 --> 00:08:06,800
So what would be cool is if we do a little bit of work with zlib.

00:08:06,800 --> 00:08:08,830
So I mostly wrote node.

00:08:08,830 --> 00:08:15,120
And so zlib is a builtin API in Node.

00:08:15,120 --> 00:08:19,750
So I want to� what I want to do is actually� let's work through it and see what we can

00:08:19,750 --> 00:08:27,440
do in terms of compressing content as we serve our files over to the client.

00:08:27,440 --> 00:08:33,889
So let's actually do that.

00:08:33,889 --> 00:08:35,909
Awesome.

00:08:35,909 --> 00:08:42,430
So I kind of started us off� yeah.

00:08:42,430 --> 00:08:48,040
There's a lull in case of forget file.

00:08:48,040 --> 00:08:52,399
So I started us off with having an HTTP.

00:08:52,399 --> 00:08:55,550
We'll have assessed because we wanted to create a stream.

00:08:55,550 --> 00:08:57,950
When we serve stuff over.

00:08:57,950 --> 00:09:00,980
And I've started us off with actually having a server.

00:09:00,980 --> 00:09:01,980
Cool.

00:09:01,980 --> 00:09:10,649
And so when I was mentioning previously what the client does is it says, I'm going to accept

00:09:10,649 --> 00:09:12,650
certain types of encoding.

00:09:12,650 --> 00:09:19,560
And based on those types of encoding, we should be able to work with certain types of data.

00:09:19,560 --> 00:09:21,320
So I said we'll be working with zlib.

00:09:21,320 --> 00:09:28,720
So actually, let's get zlib in here.

00:09:28,720 --> 00:09:30,200
And we'll be using streams.

00:09:30,200 --> 00:09:34,510
So I'm just going to require pump.

00:09:34,510 --> 00:09:39,370
And pump is a nonbroken version of pipe.

00:09:39,370 --> 00:09:40,720
[ Laughter ] Whoops.

00:09:40,720 --> 00:09:44,790
Did I say that out loud?

00:09:44,790 --> 00:09:48,670
I was just getting there� cool.

00:09:48,670 --> 00:09:53,700
So what we want to be able to do is we want to have a source.

00:09:53,700 --> 00:10:01,190
So this will be our stream.

00:10:01,190 --> 00:10:05,100
So we'll have a stream that takes in our indexed HTML.

00:10:05,100 --> 00:10:11,430
And I should have an indexed HTML�in here.

00:10:11,430 --> 00:10:13,060
Cool.

00:10:13,060 --> 00:10:17,670
And what we want to be able to do is based on this accept header that we get, we want

00:10:17,670 --> 00:10:22,899
to do different types of content.

00:10:22,899 --> 00:10:44,790
So this would be a basic match for Gzip and I'll get the index in a bit because I forgot.

00:10:44,790 --> 00:10:59,200
So we'll be working with either Gzip or Deflate.

00:10:59,200 --> 00:11:12,199
Now we'll actually copy the matches over because there's a little bit easier.

00:11:12,199 --> 00:11:17,709
And then based on that particular match that is Deflate, I want to be able to create a

00:11:17,709 --> 00:11:20,640
Deflate compressed file.

00:11:20,640 --> 00:11:27,150
And what pump does is it takes your source and it handles your operation, handles your

00:11:27,150 --> 00:11:30,339
output, which is the response.

00:11:30,339 --> 00:11:34,040
And I also have a handler that does the error handling for us.

00:11:34,040 --> 00:11:41,120
And then what else I want is just like to be able to make sure that whatever's the response

00:11:41,120 --> 00:11:43,029
that comes out is fine.

00:11:43,029 --> 00:11:50,620
So our content encoding here is� I'm stuck.

00:11:50,620 --> 00:11:52,589
Oh.

00:11:52,589 --> 00:11:54,199
I'm on a different keyboard.

00:11:54,199 --> 00:11:55,500
I'm sorry.

00:11:55,500 --> 00:12:03,360
Persian is not going to work in� neither will Russian.

00:12:03,360 --> 00:12:05,029
Cool.

00:12:05,029 --> 00:12:13,180
So I'll copy these over as well to go a little bit faster.

00:12:13,180 --> 00:12:18,519
And then if we have a Gzip kind of content we will then do the same thing.

00:12:18,519 --> 00:12:20,380
Zlib has a Gzip implementation.

00:12:20,380 --> 00:12:27,509
Zlib will always have a G zip implementation, the Node API.

00:12:27,509 --> 00:12:30,070
And do the same thing.

00:12:30,070 --> 00:12:31,079
Pump it over.

00:12:31,079 --> 00:12:32,079
Okay.

00:12:32,079 --> 00:12:33,079
Awesome.

00:12:33,079 --> 00:12:35,130
So let's actually test this out.

00:12:35,130 --> 00:12:40,639
Because we want to be able to see whether the content will actually get.

00:12:40,639 --> 00:12:48,389
So let's start up a Node server.

00:12:48,389 --> 00:12:55,700
And what we want to do is we want to be able to curl the command.

00:12:55,700 --> 00:12:57,079
And we need to pass in headers.

00:12:57,079 --> 00:12:59,009
Because that's what basically we're looking for.

00:12:59,009 --> 00:13:09,790
So the headers is accept encoding.

00:13:09,790 --> 00:13:12,070
And that would be Gzip.

00:13:12,070 --> 00:13:19,509
Let's start off with G zip and local host.

00:13:19,509 --> 00:13:26,300
And I've done this literally every time the command is header.

00:13:26,300 --> 00:13:29,779
Yeah.

00:13:29,779 --> 00:13:42,440
Funny story, my track pad stopped working yesterday.

00:13:42,440 --> 00:13:43,480
Okay.

00:13:43,480 --> 00:13:48,690
We'll type it out again.

00:13:48,690 --> 00:13:56,490
And we'll actually get the information right away to be able to see this.

00:13:56,490 --> 00:14:01,649
So header is accept encoding.

00:14:01,649 --> 00:14:04,690
And it's G zip, again.

00:14:04,690 --> 00:14:08,190
And local host.

00:14:08,190 --> 00:14:10,760
Cool.

00:14:10,760 --> 00:14:13,529
That actually did not get zipped.

00:14:13,529 --> 00:14:18,149
That's not cool.

00:14:18,149 --> 00:14:21,209
But what we can see is it's going through okay.

00:14:21,209 --> 00:14:24,759
Well, at least we get the file back.

00:14:24,759 --> 00:14:27,920
So let's go back to our editor.

00:14:27,920 --> 00:14:36,220
So that's� should be lower cased is the issue.

00:14:36,220 --> 00:14:38,500
And if we go back.

00:14:38,500 --> 00:14:39,500
No.

00:14:39,500 --> 00:14:40,910
That's still not working.

00:14:40,910 --> 00:14:41,910
Cool.

00:14:41,910 --> 00:14:42,910
Yeah.

00:14:42,910 --> 00:14:47,480
Probably a good idea.

00:14:47,480 --> 00:14:49,899
Ha.

00:14:49,899 --> 00:14:52,309
Cool.

00:14:52,309 --> 00:14:56,560
[ Applause ] And what would be kind of interesting to see

00:14:56,560 --> 00:15:00,649
here is actually how much space this takes.

00:15:00,649 --> 00:15:04,660
So what we can do is� huh?

00:15:04,660 --> 00:15:08,520
Okay, you can't see the bottom.

00:15:08,520 --> 00:15:10,300
Cool.

00:15:10,300 --> 00:15:17,440
That would be important.

00:15:17,440 --> 00:15:22,009
I think my keyboard also stopped working.

00:15:22,009 --> 00:15:25,440
Awesome.

00:15:25,440 --> 00:15:37,720
So what we also want to do is� is maybe just see some output.

00:15:37,720 --> 00:15:41,370
Okay.

00:15:41,370 --> 00:15:45,850
We'll silence everything else and then we'll still pass it in the header.

00:15:45,850 --> 00:16:02,000
Which is accept encoding, G zip� and then what we'll do is we'll pipe it over and just

00:16:02,000 --> 00:16:05,500
look at the word count.

00:16:05,500 --> 00:16:07,650
Which is 235 with Deflate.

00:16:07,650 --> 00:16:12,880
I'm going to minus this a bit.

00:16:12,880 --> 00:16:22,730
Just for a second.

00:16:22,730 --> 00:16:30,340
And then what else we wanted to do is compare it to what a Deflate output would look like

00:16:30,340 --> 00:16:31,649
instead.

00:16:31,649 --> 00:16:33,990
And kind of do the same thing.

00:16:33,990 --> 00:16:37,819
So it will also compress, but the word count should be a little bit different.

00:16:37,819 --> 00:16:40,060
There is 305.

00:16:40,060 --> 00:16:45,320
So Gzip is smaller than what a Deflatecompatible thing is.

00:16:45,320 --> 00:16:47,860
Which is kind of interesting.

00:16:47,860 --> 00:16:53,640
So that was kind of the Zlib example I wanted to show you, which is neat.

00:16:53,640 --> 00:16:59,410
And then let's look at other methods that you could use.

00:16:59,410 --> 00:17:07,980
So we looked at like 305 Deflate, 235 Gzip just so you keep those in mind.

00:17:07,980 --> 00:17:10,000
Cool.

00:17:10,000 --> 00:17:11,699
Another one I wanted to talk about is Broccoli.

00:17:11,699 --> 00:17:17,689
It's been in out in the wild for about a year or two.

00:17:17,689 --> 00:17:21,309
So it's a fairly new kind of way of compressing.

00:17:21,309 --> 00:17:25,959
And what it does, it's specifically was made to handle HTTP compression.

00:17:25,959 --> 00:17:28,209
So it's made specifically for web development.

00:17:28,209 --> 00:17:29,809
Which is kind of cool.

00:17:29,809 --> 00:17:35,460
If we look and go back into this stream of blocks that Deflate does.

00:17:35,460 --> 00:17:40,510
A single block has the literals, if you don't think about it in bits that I was talking

00:17:40,510 --> 00:17:41,600
about before.

00:17:41,600 --> 00:17:44,440
Has literals and a length and a distance.

00:17:44,440 --> 00:17:49,100
So like the pointers and then the weighted symbols.

00:17:49,100 --> 00:17:50,100
That's Deflate.

00:17:50,100 --> 00:17:54,440
And for Broccoli, a single block is actually a set of commands.

00:17:54,440 --> 00:17:55,650
You can see at the bottom.

00:17:55,650 --> 00:18:01,020
So instead of just actually these interpretations, it's a set of commands.

00:18:01,020 --> 00:18:07,420
And then what it has is insert, copy, distance, and actual insert literals.

00:18:07,420 --> 00:18:13,059
And what's interesting about this is that normally weighted symbols have a dictionary

00:18:13,059 --> 00:18:17,559
that you only insert while working in a specific window.

00:18:17,559 --> 00:18:22,850
But what you can do is go back further at any point in time instead of just in a specific

00:18:22,850 --> 00:18:25,590
window and apply that dictionary.

00:18:25,590 --> 00:18:28,440
Which makes for a much smaller compressed file.

00:18:28,440 --> 00:18:30,130
Which is neat.

00:18:30,130 --> 00:18:36,620
But it also comes with a dictionary of commonlyused HTML terms, which is, again, specifically

00:18:36,620 --> 00:18:41,120
made for HTTP compression so makes for a much smaller file.

00:18:41,120 --> 00:18:43,830
But at the base, you can tweak it.

00:18:43,830 --> 00:18:50,870
But at its base it's much slower and you have to wait a little bit longer for the compression

00:18:50,870 --> 00:18:51,870
to happen.

00:18:51,870 --> 00:18:57,560
So a lot of the times it gets used when it's static content rather than doing it on the

00:18:57,560 --> 00:18:58,950
fly.

00:18:58,950 --> 00:19:05,600
And what I wanted to show you now is actually being able to use this library I found called

00:19:05,600 --> 00:19:10,960
Broccoli backwards, because I can pronounce that.

00:19:10,960 --> 00:19:22,250
And actually, so you should be able to see the difference kind of between the two things.

00:19:22,250 --> 00:19:26,180
Okay.

00:19:26,180 --> 00:19:29,010
So let's start up another file.

00:19:29,010 --> 00:19:41,320
And

00:19:41,320 --> 00:19:42,320
what will� oh.

00:19:42,320 --> 00:19:48,090
What we'll need is kind of the same deal.

00:19:48,090 --> 00:19:54,110
It's just copied over.

00:19:54,110 --> 00:20:03,549
We need Zlib and I'll just call it compress.

00:20:03,549 --> 00:20:07,020
Okay, backwards.

00:20:07,020 --> 00:20:10,480
Tr� no.

00:20:10,480 --> 00:20:19,770
Oh, so we'll use pump and we'll still use this.

00:20:19,770 --> 00:20:27,510
And we'll still do it on the fly rather than actually compressing files� static files.

00:20:27,510 --> 00:20:30,779
Just so you see the difference.

00:20:30,779 --> 00:20:33,159
Okay.

00:20:33,159 --> 00:20:34,710
Let's not worry about the headers.

00:20:34,710 --> 00:20:36,179
We'll still need a source.

00:20:36,179 --> 00:20:42,750
Let's not worry about having these.

00:20:42,750 --> 00:20:54,670
What we'll have is, then, instead of having compressed, we'll create a stream with this

00:20:54,670 --> 00:20:56,450
stuff.

00:20:56,450 --> 00:21:05,370
I think it's "Create stream"?

00:21:05,370 --> 00:21:07,150
Ah.

00:21:07,150 --> 00:21:08,940
Maybe.

00:21:08,940 --> 00:21:14,190
That is correct.

00:21:14,190 --> 00:21:26,700
It's called this��create stream.

00:21:26,700 --> 00:21:29,830
Awesome.

00:21:29,830 --> 00:21:35,470
Let's again start up a server.

00:21:35,470 --> 00:21:37,870
Yeah.

00:21:37,870 --> 00:21:41,950
And let's look at� I mean, the compressed file is going to look the same.

00:21:41,950 --> 00:21:45,779
I want to look at what the word count is like.

00:21:45,779 --> 00:21:49,559
So we'll do the same thing.

00:21:49,559 --> 00:21:53,850
We kind of don't need to send in headers, I think, but it doesn't matter.

00:21:53,850 --> 00:21:56,090
And also look at the word count.

00:21:56,090 --> 00:21:57,090
Oh.

00:21:57,090 --> 00:22:00,080
Well, the word count didn't work.

00:22:00,080 --> 00:22:05,529
Create stream is not a function.

00:22:05,529 --> 00:22:10,270
Okay.

00:22:10,270 --> 00:22:20,370
There's a bunch of different methods, so you can do asynchronous.

00:22:20,370 --> 00:22:21,460
I like this stuff.

00:22:21,460 --> 00:22:28,700
It's create stream� cool.

00:22:28,700 --> 00:22:31,669
That would make sense.

00:22:31,669 --> 00:22:36,360
You're compressing.

00:22:36,360 --> 00:22:38,720
Okay.

00:22:38,720 --> 00:22:44,659
And we were going to need a server again.

00:22:44,659 --> 00:22:50,690
Which is like 148, which is neat.

00:22:50,690 --> 00:22:51,690
Yeah.

00:22:51,690 --> 00:22:53,669
So there's that.

00:22:53,669 --> 00:22:56,840
And that's how Broccoli works.

00:22:56,840 --> 00:23:07,049
If we need to, actually, I think, in� I think it's super neat to be able to work with

00:23:07,049 --> 00:23:11,270
something that's more static so you're probably going to have a ton of images.

00:23:11,270 --> 00:23:15,360
You're probably going to have a ton of static assets you want to share.

00:23:15,360 --> 00:23:21,299
If they're taking up your space, it's nice to use it.

00:23:21,299 --> 00:23:24,230
And most major browsers will accept it.

00:23:24,230 --> 00:23:27,200
All� the big four.

00:23:27,200 --> 00:23:34,820
The big four are all on board, so Edge, Firefox, the big three and Chrome are all accepting.

00:23:34,820 --> 00:23:36,230
I'm to the sure about Safari.

00:23:36,230 --> 00:23:37,309
So you'll have that.

00:23:37,309 --> 00:23:44,320
And then when you're working with your usual kind of bundles of JavaScript and CSS, working

00:23:44,320 --> 00:23:49,760
with something like G zip if you're not already doing that.

00:23:49,760 --> 00:23:53,960
We went through the example.

00:23:53,960 --> 00:24:00,510
So I wanted to kind of show you what it is like to kind of work with HTTP compression.

00:24:00,510 --> 00:24:06,020
I hope you learned something about Zlib and I hope you get to use it in your daytoday

00:24:06,020 --> 00:24:07,020
work.

00:24:07,020 --> 00:24:08,020
Thanks.

00:24:08,020 --> 00:24:08,520

YouTube URL: https://www.youtube.com/watch?v=IgP6BFLyQuw


