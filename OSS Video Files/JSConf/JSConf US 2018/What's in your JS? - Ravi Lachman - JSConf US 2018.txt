Title: What's in your JS? - Ravi Lachman - JSConf US 2018
Publication date: 2018-11-06
Playlist: JSConf US 2018
Description: 
	
Captions: 
	00:00:00,320 --> 00:00:03,840
[Music]

00:00:02,070 --> 00:00:05,660
[Applause]

00:00:03,840 --> 00:00:07,410
[Music]

00:00:05,660 --> 00:00:09,280
[Applause]

00:00:07,410 --> 00:00:11,020
[Music]

00:00:09,280 --> 00:00:12,780
[Applause]

00:00:11,020 --> 00:00:15,920
[Music]

00:00:12,780 --> 00:00:15,920
[Applause]

00:00:16,870 --> 00:00:24,050
[Music]

00:00:27,480 --> 00:00:31,410
can everybody hear me okay good I was

00:00:29,770 --> 00:00:33,430
worried the mic was not working okay

00:00:31,410 --> 00:00:37,510
well thank you everybody for coming to

00:00:33,430 --> 00:00:39,430
see my talk a little bit so slight

00:00:37,510 --> 00:00:41,770
change of pace you'll see a few themes

00:00:39,430 --> 00:00:44,530
in it but the main question I want to

00:00:41,770 --> 00:00:46,270
answer and unfortunately I missed boss's

00:00:44,530 --> 00:00:47,980
talk so if some of this is repetitive I

00:00:46,270 --> 00:00:50,200
was right here just let me know

00:00:47,980 --> 00:00:52,150
it was repetitive it's what's in your je

00:00:50,200 --> 00:00:54,010
s a little bit about myself really

00:00:52,150 --> 00:00:56,140
quickly I'm a Technical Evangelist and

00:00:54,010 --> 00:00:57,430
epidemics um prior worked some

00:00:56,140 --> 00:01:00,190
distributed systems companies like

00:00:57,430 --> 00:01:01,600
mesosphere Red Hat and they keep me out

00:01:00,190 --> 00:01:03,730
of production now I had some very

00:01:01,600 --> 00:01:05,710
large-scale corruption issues and

00:01:03,730 --> 00:01:07,600
different types of databases and I'm not

00:01:05,710 --> 00:01:08,920
good at math so slider calculations if

00:01:07,600 --> 00:01:11,020
you're familiar with them I'm not I

00:01:08,920 --> 00:01:12,640
don't know you divide by 8 divided by 16

00:01:11,020 --> 00:01:15,700
it's kind of the same thing to me so

00:01:12,640 --> 00:01:16,770
what's not so what are we gonna learn

00:01:15,700 --> 00:01:19,330
today

00:01:16,770 --> 00:01:21,400
pretty interactive quick quick show of

00:01:19,330 --> 00:01:23,830
hands if you can't caught Patras talk

00:01:21,400 --> 00:01:26,229
about extensions how many of you

00:01:23,830 --> 00:01:28,330
actually want NPM install the extension

00:01:26,229 --> 00:01:31,060
if you're in the talk did anybody try

00:01:28,330 --> 00:01:33,280
that right after so we okay a little

00:01:31,060 --> 00:01:34,810
less than I expected but the next

00:01:33,280 --> 00:01:37,900
question would be you know did you do it

00:01:34,810 --> 00:01:39,610
on your work laptop right ah see and say

00:01:37,900 --> 00:01:42,430
what are some takeaways that we're gonna

00:01:39,610 --> 00:01:44,409
learn about today is that don't add

00:01:42,430 --> 00:01:45,640
things willy-nilly all right and I'm

00:01:44,409 --> 00:01:47,470
gonna keep this is gonna be very clear

00:01:45,640 --> 00:01:49,780
do not add things willy-nilly into your

00:01:47,470 --> 00:01:50,950
project I've been bit in a few times and

00:01:49,780 --> 00:01:52,900
some of my peers have been bit in a few

00:01:50,950 --> 00:01:56,619
times also a lot of my a lot of my

00:01:52,900 --> 00:01:58,810
background I was a je a Java like a cor

00:01:56,619 --> 00:02:00,909
distributed systems engineer for on

00:01:58,810 --> 00:02:02,560
several Java projects and what you know

00:02:00,909 --> 00:02:04,990
one transitioning into node what were

00:02:02,560 --> 00:02:06,549
some analogies I was missing and looking

00:02:04,990 --> 00:02:08,349
for and really it shows the importance

00:02:06,549 --> 00:02:11,079
of this conference and how quickly the

00:02:08,349 --> 00:02:13,299
Java Script your systems changing and

00:02:11,079 --> 00:02:16,090
also what are the equivalents right so

00:02:13,299 --> 00:02:17,680
you know Java Java fanboy here like hey

00:02:16,090 --> 00:02:20,050
if you're preaching about all this

00:02:17,680 --> 00:02:22,420
what's you know what's going on and so

00:02:20,050 --> 00:02:24,250
you thought this was a JavaScript

00:02:22,420 --> 00:02:28,240
conference right what is Duke doing

00:02:24,250 --> 00:02:30,490
the screen in Java so a lot if you look

00:02:28,240 --> 00:02:33,520
at the lineage of the Java language of

00:02:30,490 --> 00:02:35,650
je from when it came out in 1999 to now

00:02:33,520 --> 00:02:37,750
is that what really pushed the language

00:02:35,650 --> 00:02:39,010
Ford was a governing body right so if

00:02:37,750 --> 00:02:41,560
there was a change have a very tight

00:02:39,010 --> 00:02:42,970
structure in the Java language and so if

00:02:41,560 --> 00:02:44,620
there was a change they have something

00:02:42,970 --> 00:02:46,209
called a JCP a Java community of

00:02:44,620 --> 00:02:48,760
practice and people would vote on future

00:02:46,209 --> 00:02:51,910
editions the closest thing that

00:02:48,760 --> 00:02:55,420
JavaScript has is the ECMA right and so

00:02:51,910 --> 00:02:56,440
JavaScript aka ECMAScript is the

00:02:55,420 --> 00:02:57,820
governing body in the standards

00:02:56,440 --> 00:02:58,840
organization and so as we have current

00:02:57,820 --> 00:03:02,530
road issues I think we remember just an

00:02:58,840 --> 00:03:03,700
eight right now or nine and 2018 is that

00:03:02,530 --> 00:03:05,170
that's that governing body right so

00:03:03,700 --> 00:03:06,940
without a governing particular strong

00:03:05,170 --> 00:03:08,739
governing body how do you get standards

00:03:06,940 --> 00:03:11,800
into the language and so let's take a

00:03:08,739 --> 00:03:13,420
look at what would be you do be a common

00:03:11,800 --> 00:03:15,670
theme here if you're going to start

00:03:13,420 --> 00:03:17,800
building a more distributed system your

00:03:15,670 --> 00:03:20,590
npm install' is gonna get quite you know

00:03:17,800 --> 00:03:22,480
quite big right so what are some things

00:03:20,590 --> 00:03:24,130
okay so as a core services developer

00:03:22,480 --> 00:03:27,400
that I am what are some things that I

00:03:24,130 --> 00:03:29,019
expect in my particular packages or how

00:03:27,400 --> 00:03:31,450
my application interacts and so

00:03:29,019 --> 00:03:34,120
transactions right so the the common

00:03:31,450 --> 00:03:35,799
myth that server-side JavaScript it's

00:03:34,120 --> 00:03:37,420
not good in transactions actually

00:03:35,799 --> 00:03:38,380
because of the ecosystem it's not true

00:03:37,420 --> 00:03:40,150
anymore if you think about what a

00:03:38,380 --> 00:03:41,590
transaction is pretend I'm dealing out

00:03:40,150 --> 00:03:43,780
money to people in the room okay did you

00:03:41,590 --> 00:03:45,519
did I give you money yes no that's what

00:03:43,780 --> 00:03:46,660
most people kind of pop in there how

00:03:45,519 --> 00:03:48,880
about transaction is but if you take a

00:03:46,660 --> 00:03:50,350
look at how an actual transaction

00:03:48,880 --> 00:03:51,280
actually occurs or what actually

00:03:50,350 --> 00:03:53,410
transaction means when you look at

00:03:51,280 --> 00:03:54,880
system boundaries applications kind of

00:03:53,410 --> 00:03:56,799
look like this right so it's more than

00:03:54,880 --> 00:03:58,690
this front-end we might be taking it

00:03:56,799 --> 00:04:01,120
data from sensors you might be taking in

00:03:58,690 --> 00:04:03,370
data from other users or inputs there

00:04:01,120 --> 00:04:05,920
might be a message broker attached to it

00:04:03,370 --> 00:04:07,090
there's definitely databases that are

00:04:05,920 --> 00:04:09,760
attached to it and all of these systems

00:04:07,090 --> 00:04:12,519
have to have to interact with each other

00:04:09,760 --> 00:04:14,459
and so what what one of the the core

00:04:12,519 --> 00:04:16,359
differences between the Java ecosystem

00:04:14,459 --> 00:04:17,829
well I would call it one of the top

00:04:16,359 --> 00:04:19,540
three things that put Java in the

00:04:17,829 --> 00:04:21,850
enterprise it something called JTA under

00:04:19,540 --> 00:04:24,310
the Java transaction API and what the

00:04:21,850 --> 00:04:25,840
Java transaction API is and there is an

00:04:24,310 --> 00:04:28,990
ogee a circle instance but what the Java

00:04:25,840 --> 00:04:31,360
transaction API is is that it allows

00:04:28,990 --> 00:04:33,039
even non Java clients right so you go

00:04:31,360 --> 00:04:34,810
database and they were to see they have

00:04:33,039 --> 00:04:36,010
the ability to do a rollback in a commit

00:04:34,810 --> 00:04:37,600
right so you can even participate in

00:04:36,010 --> 00:04:39,700
something called X a transaction is

00:04:37,600 --> 00:04:42,790
every transaction so if you go back to

00:04:39,700 --> 00:04:44,410
our diagram here we're crossing several

00:04:42,790 --> 00:04:47,020
transaction boundaries we're interacting

00:04:44,410 --> 00:04:48,970
with systems JTA is what put it on the

00:04:47,020 --> 00:04:51,040
map but we are at a JavaScript

00:04:48,970 --> 00:04:53,230
conference right so what one of how in

00:04:51,040 --> 00:04:55,120
JavaScript land that we have and so a

00:04:53,230 --> 00:04:57,130
lot of times this is delegated to the

00:04:55,120 --> 00:04:58,510
actual database right and so a lot of

00:04:57,130 --> 00:05:00,100
the concurrency or a lot of the

00:04:58,510 --> 00:05:01,900
transaction handling it's actually

00:05:00,100 --> 00:05:04,840
delegated to the database and why is it

00:05:01,900 --> 00:05:05,980
delegated to the database is that so if

00:05:04,840 --> 00:05:08,080
you take a look at how your work is

00:05:05,980 --> 00:05:09,400
actually distributed and here's a

00:05:08,080 --> 00:05:12,220
perfect example a node you might have

00:05:09,400 --> 00:05:13,810
multiple instances of uh nodes let's say

00:05:12,220 --> 00:05:15,700
a client or a node a piece of server

00:05:13,810 --> 00:05:18,190
infrastructure but the incoming

00:05:15,700 --> 00:05:19,570
transactions the the incoming a let's

00:05:18,190 --> 00:05:21,280
say partitions are all managed by

00:05:19,570 --> 00:05:23,410
database right so did someone pay you

00:05:21,280 --> 00:05:27,010
money well yes we have a record here in

00:05:23,410 --> 00:05:28,330
the database and so just skip skipping

00:05:27,010 --> 00:05:30,250
along a little bit about you know what's

00:05:28,330 --> 00:05:33,160
just why this is important you know

00:05:30,250 --> 00:05:35,080
captain consistency availability

00:05:33,160 --> 00:05:37,000
partition tolerance again you know core

00:05:35,080 --> 00:05:41,550
services developer you're looking at

00:05:37,000 --> 00:05:43,860
these particular things now in Java land

00:05:41,550 --> 00:05:46,090
there's so there's just another

00:05:43,860 --> 00:05:48,880
difference in how Java Script is handled

00:05:46,090 --> 00:05:50,860
is in threads right and so in the drama

00:05:48,880 --> 00:05:52,150
the Java rendition there's a concept of

00:05:50,860 --> 00:05:55,030
pools right so if you have an incoming

00:05:52,150 --> 00:05:57,100
request you have the ability to pull

00:05:55,030 --> 00:05:59,680
those threads so the JVM gets bigger and

00:05:57,100 --> 00:06:01,630
bigger and bigger not like in the and

00:05:59,680 --> 00:06:02,740
nodejs it's Agnon on blocking thread or

00:06:01,630 --> 00:06:04,300
they have threatened and the covers out

00:06:02,740 --> 00:06:05,830
the integer written but in the

00:06:04,300 --> 00:06:07,300
JavaScript rendition is something called

00:06:05,830 --> 00:06:08,790
promise right so how many people use

00:06:07,300 --> 00:06:11,050
promises in here before

00:06:08,790 --> 00:06:12,310
okay good seems like there's most people

00:06:11,050 --> 00:06:14,830
use promises the promises were something

00:06:12,310 --> 00:06:16,330
that was new to me a few years ago and

00:06:14,830 --> 00:06:19,120
that again was something that was

00:06:16,330 --> 00:06:20,500
blocking me from doing doing development

00:06:19,120 --> 00:06:21,760
that's say okay we can't you know we

00:06:20,500 --> 00:06:22,840
don't have ability to call back but for

00:06:21,760 --> 00:06:25,570
folks who haven't used a promise

00:06:22,840 --> 00:06:27,250
basically what I promise is you can

00:06:25,570 --> 00:06:28,900
either succeed or fail at one time right

00:06:27,250 --> 00:06:33,700
and so it's like a callback on steroids

00:06:28,900 --> 00:06:36,010
and a very particular another of large

00:06:33,700 --> 00:06:38,980
promise package is Bluebird jazz so

00:06:36,010 --> 00:06:40,450
Bluebird jeaious allows you to had hop

00:06:38,980 --> 00:06:41,730
types as callbacks is anybody in here

00:06:40,450 --> 00:06:45,070
use Bluebird

00:06:41,730 --> 00:06:46,720
Wow good very good it was again this is

00:06:45,070 --> 00:06:47,650
new to me a year ago but the reason why

00:06:46,720 --> 00:06:49,810
I bring this up in these particular

00:06:47,650 --> 00:06:51,249
features up is that as we're going along

00:06:49,810 --> 00:06:53,199
this journey okay how do I

00:06:51,249 --> 00:06:55,419
have you know how do I have a proper

00:06:53,199 --> 00:06:57,249
promise if I happen in traffic database

00:06:55,419 --> 00:07:00,369
another client and all this entire time

00:06:57,249 --> 00:07:01,919
we keep adding things into our package

00:07:00,369 --> 00:07:04,089
of JSON right so what ends up happening

00:07:01,919 --> 00:07:05,469
eventually is that this package keeps

00:07:04,089 --> 00:07:08,469
growing grow so keep that in the back of

00:07:05,469 --> 00:07:10,269
your head when going along what kind of

00:07:08,469 --> 00:07:12,459
last about you know how work just

00:07:10,269 --> 00:07:13,569
actually distributed well and why is

00:07:12,459 --> 00:07:15,039
this problem becoming even more

00:07:13,569 --> 00:07:16,179
important is that if you take a look at

00:07:15,039 --> 00:07:18,789
where your applications are actually

00:07:16,179 --> 00:07:20,309
headed comparing it to a Java model it

00:07:18,789 --> 00:07:22,209
actually looks like this right so no

00:07:20,309 --> 00:07:23,499
more and more out if you're looking at

00:07:22,209 --> 00:07:25,599
JavaScript or distributed application

00:07:23,499 --> 00:07:27,189
there's way more renditions of your

00:07:25,599 --> 00:07:29,379
application out there so if I taking

00:07:27,189 --> 00:07:31,360
okay I have a java application that

00:07:29,379 --> 00:07:33,459
might be deployed one place your

00:07:31,360 --> 00:07:34,929
JavaScript application as here so the

00:07:33,459 --> 00:07:37,089
isolation is handled by the container

00:07:34,929 --> 00:07:39,309
right it's distributed multiple places

00:07:37,089 --> 00:07:41,589
so as your application gets more and

00:07:39,309 --> 00:07:43,899
more dependencies it actually goes more

00:07:41,589 --> 00:07:46,209
places taking a look at some more of

00:07:43,899 --> 00:07:47,739
these dependencies again so what-what

00:07:46,209 --> 00:07:49,899
would be something that a core Java

00:07:47,739 --> 00:07:53,229
developer be looking for debugging and

00:07:49,899 --> 00:07:55,169
tracing right so if I was in Java land

00:07:53,229 --> 00:07:57,809
you can have aid distributed tracer and

00:07:55,169 --> 00:07:59,679
part of the distribute tracing is

00:07:57,809 --> 00:08:00,849
instrumentation also so you can

00:07:59,679 --> 00:08:03,339
introspect the bytecode

00:08:00,849 --> 00:08:05,979
but what about in the nodejs land right

00:08:03,339 --> 00:08:07,779
about the dough's equivalents one of my

00:08:05,979 --> 00:08:09,639
favorite projects out there right now is

00:08:07,779 --> 00:08:11,529
something called Jaeger I like because

00:08:09,639 --> 00:08:13,029
of the name I thought I'd run me the

00:08:11,529 --> 00:08:15,219
alcohol race I was like oh yeah this is

00:08:13,029 --> 00:08:17,559
a really cool project but a little bit

00:08:15,219 --> 00:08:19,119
about Jaeger anybody familiar is again

00:08:17,559 --> 00:08:22,689
pull I love to pull the audience anybody

00:08:19,119 --> 00:08:24,869
who's used Jaeger in here before or okay

00:08:22,689 --> 00:08:26,919
so that I can add some value here so

00:08:24,869 --> 00:08:29,019
vaguer is a cloud native compute

00:08:26,919 --> 00:08:32,110
foundation project it came from uber and

00:08:29,019 --> 00:08:34,209
so over it if you look at how their

00:08:32,110 --> 00:08:35,979
applications written maybe 2008 it was

00:08:34,209 --> 00:08:37,899
very heavy in Java but what as they

00:08:35,979 --> 00:08:40,209
became a bigger organization they

00:08:37,899 --> 00:08:41,379
clearly became more polyglot and so they

00:08:40,209 --> 00:08:44,350
have to support other languages like

00:08:41,379 --> 00:08:46,540
Python or especially nodejs now and so

00:08:44,350 --> 00:08:47,920
one of the limiting factors for them was

00:08:46,540 --> 00:08:49,990
the ability to get trace information

00:08:47,920 --> 00:08:52,600
from their nodejs applications and so

00:08:49,990 --> 00:08:53,589
you can act up I'm wrong suggest taking

00:08:52,600 --> 00:08:55,059
a look at Jaeger if you have a

00:08:53,589 --> 00:08:57,430
distributed application or let's say a

00:08:55,059 --> 00:08:59,319
application of scale is that you can

00:08:57,430 --> 00:09:02,110
actually implement a Jaeger client to be

00:08:59,319 --> 00:09:05,020
included in your node application Oh in

00:09:02,110 --> 00:09:07,210
your node application and so you can

00:09:05,020 --> 00:09:08,800
interact with traps right so okay part

00:09:07,210 --> 00:09:10,660
of the trouble when I was making single

00:09:08,800 --> 00:09:12,550
page or known applications in the

00:09:10,660 --> 00:09:14,950
beginning was the hooks for us to get

00:09:12,550 --> 00:09:16,180
user data out was tremendous it took as

00:09:14,950 --> 00:09:17,650
much horsepower for us to instrument the

00:09:16,180 --> 00:09:19,300
application that it was the build

00:09:17,650 --> 00:09:21,100
features a lot of us I was working in

00:09:19,300 --> 00:09:22,540
the federal sector for this and a

00:09:21,100 --> 00:09:24,280
project like eager with really important

00:09:22,540 --> 00:09:28,270
that help captures specific information

00:09:24,280 --> 00:09:29,590
and now getting into kind of the gist of

00:09:28,270 --> 00:09:31,510
the talk right so okay why is this guy

00:09:29,590 --> 00:09:33,700
babbling a lot about Java the whole time

00:09:31,510 --> 00:09:35,710
it gets to what I call the fog of

00:09:33,700 --> 00:09:37,270
development and what is a fog of

00:09:35,710 --> 00:09:39,820
development let's all pretend we all

00:09:37,270 --> 00:09:42,490
started a new project right and so we

00:09:39,820 --> 00:09:44,200
the very first time we run now spotted a

00:09:42,490 --> 00:09:45,550
few folks about this earlier today we

00:09:44,200 --> 00:09:47,950
started a new project today we're all in

00:09:45,550 --> 00:09:51,970
the same journey and we have to learn

00:09:47,950 --> 00:09:53,410
about how is our project structured went

00:09:51,970 --> 00:09:54,910
the first the very first time I did no

00:09:53,410 --> 00:09:56,920
development but I think there was like

00:09:54,910 --> 00:09:58,780
300 packages in the package.json I was

00:09:56,920 --> 00:10:01,210
like what is this how do I even go about

00:09:58,780 --> 00:10:03,070
figuring out what's what and this is in

00:10:01,210 --> 00:10:04,690
the fog of development right people is

00:10:03,070 --> 00:10:07,180
kind of willy-nilly again don't

00:10:04,690 --> 00:10:08,770
willy-nilly include things we're adding

00:10:07,180 --> 00:10:09,880
package to the package.json or we didn't

00:10:08,770 --> 00:10:11,290
know why certain things weren't

00:10:09,880 --> 00:10:13,180
resolving like okay go ahead and add

00:10:11,290 --> 00:10:16,210
those other packages well until we beat

00:10:13,180 --> 00:10:18,040
it together to sort of work but

00:10:16,210 --> 00:10:19,840
comparing so let's look at the problem

00:10:18,040 --> 00:10:21,790
again I missed some of AUSA's talk so

00:10:19,840 --> 00:10:23,590
I'm gonna talk about how NPM resolves

00:10:21,790 --> 00:10:26,040
things if any of that's changed in 2018

00:10:23,590 --> 00:10:28,450
just tell me I missed part of his talk

00:10:26,040 --> 00:10:29,560
if you look at what what I call

00:10:28,450 --> 00:10:31,570
dependency health so if you've been

00:10:29,560 --> 00:10:33,250
working in software for a while you'll

00:10:31,570 --> 00:10:35,350
see that oh you know what do you

00:10:33,250 --> 00:10:37,240
definitely include things that you don't

00:10:35,350 --> 00:10:39,130
have that in your software project

00:10:37,240 --> 00:10:40,420
you've written so quite a quote I didn't

00:10:39,130 --> 00:10:43,150
write half of these things I included

00:10:40,420 --> 00:10:45,280
them as dependencies dependency hell in

00:10:43,150 --> 00:10:46,750
Java and there is a a particular

00:10:45,280 --> 00:10:49,600
hierarchy that you have so this this is

00:10:46,750 --> 00:10:51,400
a typical Java project but there is a

00:10:49,600 --> 00:10:53,560
hierarchy that the Java bootloader will

00:10:51,400 --> 00:10:57,640
take to resolve class resolution or

00:10:53,560 --> 00:10:59,820
class conflicts and not so much in the

00:10:57,640 --> 00:11:01,960
NPM Lance if you take a look at what

00:10:59,820 --> 00:11:05,260
mental picture this is what it looks

00:11:01,960 --> 00:11:07,180
like in Java typical trace what it looks

00:11:05,260 --> 00:11:08,980
like for real estate but a jquery

00:11:07,180 --> 00:11:11,620
rendition it's actually very complicated

00:11:08,980 --> 00:11:13,060
the packages are very incent you another

00:11:11,620 --> 00:11:15,400
that let's say you're working on

00:11:13,060 --> 00:11:17,440
particular this is actually a profile of

00:11:15,400 --> 00:11:18,520
an application that oh we call jQuery

00:11:17,440 --> 00:11:19,960
eight times or there

00:11:18,520 --> 00:11:22,660
eight renditions of the package in there

00:11:19,960 --> 00:11:25,360
and so this really loose itself to some

00:11:22,660 --> 00:11:27,430
very funky problems that you have and so

00:11:25,360 --> 00:11:30,670
this might be a little bit cliche to say

00:11:27,430 --> 00:11:31,930
here but and anybody in the room runs

00:11:30,670 --> 00:11:33,700
this problem so you you work on an

00:11:31,930 --> 00:11:36,370
application and in the JavaScript land

00:11:33,700 --> 00:11:38,650
its first to load will win right so when

00:11:36,370 --> 00:11:40,630
the ast loads it's actually the first to

00:11:38,650 --> 00:11:43,000
load that will win so let's say in a

00:11:40,630 --> 00:11:44,440
this really gets them to share around if

00:11:43,000 --> 00:11:46,480
it worked on your computer versus at

00:11:44,440 --> 00:11:47,770
work it doesn't work in production if I

00:11:46,480 --> 00:11:50,920
was writing a particular package or a

00:11:47,770 --> 00:11:52,510
particularly on my desktop it might have

00:11:50,920 --> 00:11:54,160
certain performance implications that oh

00:11:52,510 --> 00:11:57,010
you know what my my first package loaded

00:11:54,160 --> 00:11:58,630
before my second package enough let's

00:11:57,010 --> 00:12:00,100
say my first package had jQuery one

00:11:58,630 --> 00:12:02,110
point two point four and there's some

00:12:00,100 --> 00:12:03,460
other renditions had one point three you

00:12:02,110 --> 00:12:05,290
might start getting inconsistent states

00:12:03,460 --> 00:12:07,390
right saying oh we don't know exactly

00:12:05,290 --> 00:12:09,610
why this particular function failed in

00:12:07,390 --> 00:12:11,470
production because it was working fine

00:12:09,610 --> 00:12:14,020
on my laptop but what it's really hard

00:12:11,470 --> 00:12:15,700
to debug like oh there was a transitive

00:12:14,020 --> 00:12:17,800
dependency to another version of jQuery

00:12:15,700 --> 00:12:19,240
that lookout loaded in the browser first

00:12:17,800 --> 00:12:20,140
and that's actually something very very

00:12:19,240 --> 00:12:22,750
hard to tell

00:12:20,140 --> 00:12:25,180
and so like answering this very basic

00:12:22,750 --> 00:12:30,100
question you know what is in your npm

00:12:25,180 --> 00:12:31,990
install so so what are some things that

00:12:30,100 --> 00:12:34,420
we can do or what are some things we can

00:12:31,990 --> 00:12:36,700
take immediately as teams to start

00:12:34,420 --> 00:12:38,710
addressing this particular sue what's in

00:12:36,700 --> 00:12:41,740
your npm install so the first thing is

00:12:38,710 --> 00:12:43,600
is hygiene right so unfortunately Tyler

00:12:41,740 --> 00:12:44,890
couldn't make the talk he was in talking

00:12:43,600 --> 00:12:47,800
so some of this will overlap with

00:12:44,890 --> 00:12:49,090
Tyler's talk but he's not trying to

00:12:47,800 --> 00:12:51,250
steal so much a his sundar from earlier

00:12:49,090 --> 00:12:53,020
is that you what answering this

00:12:51,250 --> 00:12:55,030
infringing question it really comes down

00:12:53,020 --> 00:12:57,280
to Deb practices in def hygiene right so

00:12:55,030 --> 00:13:00,610
the JavaScript ecosystem is it's not

00:12:57,280 --> 00:13:02,950
immune to certain types of attacks like

00:13:00,610 --> 00:13:05,410
typos squatting you know let's say I

00:13:02,950 --> 00:13:07,570
made a particular package called jja why

00:13:05,410 --> 00:13:10,090
Cory like a name and someone mistyped

00:13:07,570 --> 00:13:12,820
that I can really inject nefarious items

00:13:10,090 --> 00:13:14,020
into your NPM install but first thing is

00:13:12,820 --> 00:13:16,450
really understand where your particular

00:13:14,020 --> 00:13:17,650
package just came from and this this is

00:13:16,450 --> 00:13:19,360
pretty true you know when you read an

00:13:17,650 --> 00:13:21,630
emptyness all for the first time when we

00:13:19,360 --> 00:13:24,610
look on three well I got 300 300 75

00:13:21,630 --> 00:13:26,650
packages is really asking some questions

00:13:24,610 --> 00:13:28,570
why right so it goes going back to dev

00:13:26,650 --> 00:13:30,400
hygiene hey why are these particular

00:13:28,570 --> 00:13:32,170
packages in there but a lot of time to

00:13:30,400 --> 00:13:33,760
be coming to projects after the fact

00:13:32,170 --> 00:13:35,410
right and it becomes really hard to

00:13:33,760 --> 00:13:36,910
answer that question why did someone

00:13:35,410 --> 00:13:39,190
include this why did someone not include

00:13:36,910 --> 00:13:40,990
this why why is there a JSON file you

00:13:39,190 --> 00:13:45,220
know 400 lines long to even do at MPM

00:13:40,990 --> 00:13:46,210
install I gets very difficult the first

00:13:45,220 --> 00:13:47,440
thing is actually getting a bill of

00:13:46,210 --> 00:13:48,970
materials right for that particular

00:13:47,440 --> 00:13:50,350
project so if you can Javal and you can

00:13:48,970 --> 00:13:52,180
look at the dependency tree or look at

00:13:50,350 --> 00:13:54,910
like a maven install for the coordinates

00:13:52,180 --> 00:13:56,080
in the npm install' again understanding

00:13:54,910 --> 00:13:58,930
those transit dependencies to get a

00:13:56,080 --> 00:14:03,460
little bit harder harder to do you know

00:13:58,930 --> 00:14:04,930
let's see here and so going back to you

00:14:03,460 --> 00:14:07,330
know what's actually in your npm install

00:14:04,930 --> 00:14:08,860
the profiling becomes extremely

00:14:07,330 --> 00:14:10,570
important does anybody use any sort of

00:14:08,860 --> 00:14:13,510
profiler but they're in JavaScript

00:14:10,570 --> 00:14:15,490
packages or so a few people use a

00:14:13,510 --> 00:14:17,140
profile I got it yeah what's really

00:14:15,490 --> 00:14:18,760
important when the profile profiler can

00:14:17,140 --> 00:14:20,440
do imagine go back to you just started

00:14:18,760 --> 00:14:22,330
on that particular project it's actually

00:14:20,440 --> 00:14:24,910
looking at the culture is right saying

00:14:22,330 --> 00:14:26,770
okay let's figure out exactly what's

00:14:24,910 --> 00:14:29,290
being used where cuz if what happens and

00:14:26,770 --> 00:14:31,060
it might be it's kind of a delegate that

00:14:29,290 --> 00:14:32,560
it's easy to include certain things

00:14:31,060 --> 00:14:34,440
right it's a JavaScript it's plain text

00:14:32,560 --> 00:14:37,210
so I can include anything on the fly

00:14:34,440 --> 00:14:39,040
really taking a look at into deeper

00:14:37,210 --> 00:14:40,540
context what am I actually including

00:14:39,040 --> 00:14:44,110
right what does this functionality and

00:14:40,540 --> 00:14:46,000
having this maybe a go going back to

00:14:44,110 --> 00:14:47,380
practical experience oh you know part of

00:14:46,000 --> 00:14:49,180
our stand-up meetings or dead meetings

00:14:47,380 --> 00:14:52,240
anytime you're introducing a particular

00:14:49,180 --> 00:14:53,950
change is why you're introducing that

00:14:52,240 --> 00:14:55,210
particular change or why why do we need

00:14:53,950 --> 00:14:57,580
it because you can actually introduce

00:14:55,210 --> 00:14:58,990
yourself to undo risk right so from a

00:14:57,580 --> 00:15:00,400
license standpoint am i including

00:14:58,990 --> 00:15:01,870
something that has a nefarious license

00:15:00,400 --> 00:15:05,170
am i including something that has a

00:15:01,870 --> 00:15:07,540
particular vulnerability the big one and

00:15:05,170 --> 00:15:09,520
no js' was eastland so they have a type

00:15:07,540 --> 00:15:11,500
of squad or sat there and was able to

00:15:09,520 --> 00:15:13,750
intercept and so that that particular

00:15:11,500 --> 00:15:15,190
information is key and I think there's a

00:15:13,750 --> 00:15:17,730
lot of work that the NPM community is

00:15:15,190 --> 00:15:21,130
doing around that every round that arena

00:15:17,730 --> 00:15:24,100
let's see here so some other tooling

00:15:21,130 --> 00:15:25,450
that you can use when if something quick

00:15:24,100 --> 00:15:27,670
and easy and dirty you can use for free

00:15:25,450 --> 00:15:28,060
I don't have a slide for this but it's

00:15:27,670 --> 00:15:29,680
called

00:15:28,060 --> 00:15:31,540
a wasp but the open web app security

00:15:29,680 --> 00:15:33,490
group they have something called

00:15:31,540 --> 00:15:35,590
dependency checker right so it'll

00:15:33,490 --> 00:15:37,900
actually introspect your package JSON

00:15:35,590 --> 00:15:39,850
and give you a list of all in appendices

00:15:37,900 --> 00:15:40,900
so if your team's not using a wasp's

00:15:39,850 --> 00:15:42,640
dependency checker that would be

00:15:40,900 --> 00:15:43,810
something I would highly recommend it

00:15:42,640 --> 00:15:45,040
looks I'll give you a printout of all

00:15:43,810 --> 00:15:45,939
the dependencies that you have and also

00:15:45,040 --> 00:15:48,669
something

00:15:45,939 --> 00:15:52,239
for free and that they actually tie back

00:15:48,669 --> 00:15:54,669
the package information to mitre CVE so

00:15:52,239 --> 00:15:57,129
if I see a CVE show of hands like if you

00:15:54,669 --> 00:16:00,609
know what a CBE is so okay you may be

00:15:57,129 --> 00:16:02,169
better so more education so a CVS it's

00:16:00,609 --> 00:16:04,809
something called a common vulnerability

00:16:02,169 --> 00:16:08,799
enumeration right and so what a CVA is

00:16:04,809 --> 00:16:10,179
is that if a defect or a particular

00:16:08,799 --> 00:16:12,249
vulnerabilities found there's a way to

00:16:10,179 --> 00:16:13,869
report it there's certain aspects that

00:16:12,249 --> 00:16:15,579
how severe it is there's a score right

00:16:13,869 --> 00:16:18,399
so it's a metric how use we're impacting

00:16:15,579 --> 00:16:20,529
how much it can it be remotely launched

00:16:18,399 --> 00:16:23,139
and so it does SUVs built for

00:16:20,529 --> 00:16:25,329
vulnerabilities now what if you if you

00:16:23,139 --> 00:16:26,829
might have if used github and this is

00:16:25,329 --> 00:16:28,059
going off off kilter here but for using

00:16:26,829 --> 00:16:30,489
github you might be getting as email

00:16:28,059 --> 00:16:32,859
notifications Oh a particular package in

00:16:30,489 --> 00:16:35,919
your github repo is vulnerable to CVE

00:16:32,859 --> 00:16:38,669
XYZ this is exactly what a whilst with

00:16:35,919 --> 00:16:41,679
Penske checker is doing for that so

00:16:38,669 --> 00:16:44,169
great tool to use to give you give you a

00:16:41,679 --> 00:16:46,239
call stack for that but other other

00:16:44,169 --> 00:16:51,819
tooling that's out there let me see what

00:16:46,239 --> 00:16:55,239
we got going on sue firm from a trans

00:16:51,819 --> 00:16:57,249
that were from a particular performance

00:16:55,239 --> 00:16:58,869
standpoint there's there several

00:16:57,249 --> 00:17:00,939
profilers that are out there will help

00:16:58,869 --> 00:17:03,729
you a catalog the application take a

00:17:00,939 --> 00:17:05,529
take a profiling look at it there is a

00:17:03,729 --> 00:17:07,179
commercial version just free plug I've

00:17:05,529 --> 00:17:09,370
worked for epidemic so our profiler

00:17:07,179 --> 00:17:10,839
actually will help intercept the call

00:17:09,370 --> 00:17:15,809
trace and give you a pretty clean clean

00:17:10,839 --> 00:17:15,809
out of what's actually being called I

00:17:16,110 --> 00:17:21,610
think I blew through everything in like

00:17:18,009 --> 00:17:23,110
twenty minutes going through but I

00:17:21,610 --> 00:17:25,509
wanted to be a little more interactive I

00:17:23,110 --> 00:17:26,799
do have little flamingos so that's

00:17:25,509 --> 00:17:28,720
something I was gonna do before the talk

00:17:26,799 --> 00:17:30,340
but didn't get time to do it was I was

00:17:28,720 --> 00:17:32,200
gonna make a fake project called project

00:17:30,340 --> 00:17:34,029
flamingo if you can see my shirt there's

00:17:32,200 --> 00:17:35,649
flamingos here and just see how many

00:17:34,029 --> 00:17:37,750
people would actually download it and

00:17:35,649 --> 00:17:39,909
just to prove a point that hey don't

00:17:37,750 --> 00:17:41,259
install things willy-nilly I was gonna

00:17:39,909 --> 00:17:43,210
make up some very good store like oh

00:17:41,259 --> 00:17:45,340
yeah my flamingo and the associated

00:17:43,210 --> 00:17:46,539
Flocker project that I have with it we

00:17:45,340 --> 00:17:47,889
really solve a lot of your tracing

00:17:46,539 --> 00:17:50,529
problems that you have it'll do mocks

00:17:47,889 --> 00:17:51,820
relief efficiently and you know you're

00:17:50,529 --> 00:17:53,649
going to worry about things and just try

00:17:51,820 --> 00:17:55,809
to get metrics on how many people

00:17:53,649 --> 00:17:59,139
actually after a talk did npm install

00:17:55,809 --> 00:17:59,950
install flamingo ryan say oh you had no

00:17:59,139 --> 00:18:02,230
idea what I just did

00:17:59,950 --> 00:18:04,419
made it look cool but what was it so but

00:18:02,230 --> 00:18:06,010
now something I didn't get to do right

00:18:04,419 --> 00:18:08,200
before the talk and I have a little pink

00:18:06,010 --> 00:18:10,059
flamingos I was gonna hand out to people

00:18:08,200 --> 00:18:11,620
who had questions but I would like to

00:18:10,059 --> 00:18:13,179
open up for questions if anybody has

00:18:11,620 --> 00:18:14,799
questions I know I threw a lot of kind

00:18:13,179 --> 00:18:16,899
of disparate information at the folks in

00:18:14,799 --> 00:18:19,809
the audience maybe practices that I've

00:18:16,899 --> 00:18:20,470
missed if you ask a question I would

00:18:19,809 --> 00:18:21,820
give you a flamingo

00:18:20,470 --> 00:18:24,490
does anybody have one in the audience of

00:18:21,820 --> 00:18:25,630
lingo you can show yeah do you want a

00:18:24,490 --> 00:18:31,269
cool flu bug someone asked me a question

00:18:25,630 --> 00:18:39,100
earlier yeah oh okay

00:18:31,269 --> 00:18:41,289
yeah any questions any comments any

00:18:39,100 --> 00:18:47,380
thoughts what is this guy talking about

00:18:41,289 --> 00:18:48,700
Java to Josh your conference well I got

00:18:47,380 --> 00:18:50,679
a blue bird is that it has you can

00:18:48,700 --> 00:18:54,519
actually associate types with the

00:18:50,679 --> 00:18:56,289
callbacks and so it again being a being

00:18:54,519 --> 00:18:58,000
full disclosure being a fan of type

00:18:56,289 --> 00:18:59,470
languages I might want to associate a

00:18:58,000 --> 00:19:01,899
certain type of error a blue bird right

00:18:59,470 --> 00:19:02,860
saying okay the error exception for I'm

00:19:01,899 --> 00:19:05,139
gonna pretend we're trying to get the

00:19:02,860 --> 00:19:06,820
weather might be a certain type of cast

00:19:05,139 --> 00:19:08,380
that we have and so instead of having a

00:19:06,820 --> 00:19:09,760
generic blue bird allow you to have a

00:19:08,380 --> 00:19:11,860
specific type saying oh this is a

00:19:09,760 --> 00:19:13,570
whether or not found exception so big

00:19:11,860 --> 00:19:17,880
fan of it co-worker turned me on to blue

00:19:13,570 --> 00:19:24,720
bird so like a lot flamingo for you sir

00:19:17,880 --> 00:19:29,380
hey did anybody else have any questions

00:19:24,720 --> 00:19:31,179
if not a warm round of applause it was

00:19:29,380 --> 00:19:33,639
there anything else that you had no

00:19:31,179 --> 00:19:34,080
those it then yeah a warm and applause -

00:19:33,639 --> 00:19:38,210
Ravi

00:19:34,080 --> 00:19:38,210

YouTube URL: https://www.youtube.com/watch?v=44ahlcq7QwI


