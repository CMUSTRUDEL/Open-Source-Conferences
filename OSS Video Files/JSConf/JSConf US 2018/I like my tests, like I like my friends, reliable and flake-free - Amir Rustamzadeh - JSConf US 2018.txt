Title: I like my tests, like I like my friends, reliable and flake-free - Amir Rustamzadeh - JSConf US 2018
Publication date: 2018-11-06
Playlist: JSConf US 2018
Description: 
	
Captions: 
	00:00:00,320 --> 00:00:03,840
[Music]

00:00:02,070 --> 00:00:05,660
[Applause]

00:00:03,840 --> 00:00:07,410
[Music]

00:00:05,660 --> 00:00:09,280
[Applause]

00:00:07,410 --> 00:00:11,020
[Music]

00:00:09,280 --> 00:00:12,780
[Applause]

00:00:11,020 --> 00:00:15,920
[Music]

00:00:12,780 --> 00:00:15,920
[Applause]

00:00:16,870 --> 00:00:25,110
[Music]

00:00:22,740 --> 00:00:28,059
all right

00:00:25,110 --> 00:00:30,640
Lovelace out here well thanks everyone

00:00:28,059 --> 00:00:32,110
for for coming and thanks to all the

00:00:30,640 --> 00:00:34,989
event organizers before putting together

00:00:32,110 --> 00:00:38,160
this great event today I'm going to be

00:00:34,989 --> 00:00:41,410
talking to you about end-to-end testing

00:00:38,160 --> 00:00:44,200
my talk is titled I like my tests like I

00:00:41,410 --> 00:00:48,239
like my friends flake-free and reliable

00:00:44,200 --> 00:00:51,220
and some of your laughing but you know

00:00:48,239 --> 00:00:54,070
the reason why I chose a picture of

00:00:51,220 --> 00:00:56,020
friends camping outside together is

00:00:54,070 --> 00:00:58,420
because if you've ever planned the

00:00:56,020 --> 00:01:00,250
camping trip with your friends you know

00:00:58,420 --> 00:01:01,660
that some of them are not reliable they

00:01:00,250 --> 00:01:03,370
flake they don't show up they don't

00:01:01,660 --> 00:01:08,670
bring the right things and the

00:01:03,370 --> 00:01:11,310
experience isn't that enjoyable but I

00:01:08,670 --> 00:01:14,920
want to show you that end-to-end testing

00:01:11,310 --> 00:01:17,440
can be enjoyable and it can be

00:01:14,920 --> 00:01:23,200
flake-free and it can be reliable if

00:01:17,440 --> 00:01:25,870
done properly so Who am I I am Amira

00:01:23,200 --> 00:01:28,720
Sam's a bit I am an engineer on the

00:01:25,870 --> 00:01:31,390
Cypress i/o team feel free to reach out

00:01:28,720 --> 00:01:34,299
to me Twitter or email if you have any

00:01:31,390 --> 00:01:37,900
questions about the talk so Before we

00:01:34,299 --> 00:01:41,350
jump into things let's visit the testing

00:01:37,900 --> 00:01:42,820
pyramid this is the pyramid that's

00:01:41,350 --> 00:01:45,909
typically shown when people talk about

00:01:42,820 --> 00:01:48,939
testing at the bottom of the pyramid

00:01:45,909 --> 00:01:51,010
here we have unit tests and then we move

00:01:48,939 --> 00:01:53,619
up to integration tests and end-to-end

00:01:51,010 --> 00:01:55,119
tests finally the reason why unit tests

00:01:53,619 --> 00:01:58,840
are at the very bottom of the pyramid is

00:01:55,119 --> 00:02:01,090
because developers love to write a bunch

00:01:58,840 --> 00:02:03,520
of these unit tests right they're very

00:02:01,090 --> 00:02:07,060
easy to write we have a lot of fantastic

00:02:03,520 --> 00:02:09,369
tools to write them with but as we move

00:02:07,060 --> 00:02:11,709
up the pyramid and get to end-to-end

00:02:09,369 --> 00:02:16,209
testing we find that writing end-to-end

00:02:11,709 --> 00:02:18,909
tests can be difficult costly slow flaky

00:02:16,209 --> 00:02:20,680
and this leads to a lot of people

00:02:18,909 --> 00:02:24,489
actually just not writing end-to-end

00:02:20,680 --> 00:02:27,939
tests which is not very good because

00:02:24,489 --> 00:02:30,430
the best kind of test to ensure a great

00:02:27,939 --> 00:02:32,290
experience for users is Antoine tests

00:02:30,430 --> 00:02:33,700
it's great for them it's great for the

00:02:32,290 --> 00:02:38,920
business it's great for everyone

00:02:33,700 --> 00:02:41,319
but it's difficult so before I get into

00:02:38,920 --> 00:02:44,769
the nitty-gritty parts let's kind of

00:02:41,319 --> 00:02:46,060
step back and look at the Renaissance of

00:02:44,769 --> 00:02:48,159
the web we've been seeing for the past

00:02:46,060 --> 00:02:50,230
decade or so and this is just within the

00:02:48,159 --> 00:02:52,000
context of frameworks that have come out

00:02:50,230 --> 00:02:54,400
that have made web development

00:02:52,000 --> 00:02:56,919
significantly easier you know around

00:02:54,400 --> 00:02:58,840
2005 or so we had things like Ruby on

00:02:56,919 --> 00:03:00,849
Rails and Django come out and they made

00:02:58,840 --> 00:03:03,430
it significantly easier to write

00:03:00,849 --> 00:03:05,169
applications this is their in time we we

00:03:03,430 --> 00:03:06,639
had things like Twitter and Shopify and

00:03:05,169 --> 00:03:08,260
things like that come out it was just

00:03:06,639 --> 00:03:10,030
the hell of a lot easier to write these

00:03:08,260 --> 00:03:12,329
types of apps it gave us a nice

00:03:10,030 --> 00:03:15,129
construct to think and reason about

00:03:12,329 --> 00:03:17,650
shortly after we had things like jQuery

00:03:15,129 --> 00:03:20,200
come out which made it really easy to

00:03:17,650 --> 00:03:21,819
write JavaScript across multiple

00:03:20,200 --> 00:03:23,829
browsers that kind of no more normalized

00:03:21,819 --> 00:03:27,750
all those little edge cases that you

00:03:23,829 --> 00:03:30,400
would experience writing JavaScript and

00:03:27,750 --> 00:03:32,109
during this time frame you know 2006

00:03:30,400 --> 00:03:35,250
then we have like smartphones come out

00:03:32,109 --> 00:03:38,290
around 2007 and more and more people

00:03:35,250 --> 00:03:39,849
started using actual software as part of

00:03:38,290 --> 00:03:41,439
their daily life they started to rely on

00:03:39,849 --> 00:03:43,900
and more and more and they were

00:03:41,439 --> 00:03:45,609
experiencing and very well done

00:03:43,900 --> 00:03:47,260
applications they were very snappy they

00:03:45,609 --> 00:03:50,079
were very user friendly and this is what

00:03:47,260 --> 00:03:54,159
people majority of people not us techie

00:03:50,079 --> 00:03:56,079
guys but you know they started to to

00:03:54,159 --> 00:03:57,790
demand these types of experiences about

00:03:56,079 --> 00:04:01,659
every about all the software they were

00:03:57,790 --> 00:04:03,129
experiencing and this essentially you

00:04:01,659 --> 00:04:04,629
know at around the same time browsers

00:04:03,129 --> 00:04:05,979
got their act together right they

00:04:04,629 --> 00:04:09,220
started actually playing nice with

00:04:05,979 --> 00:04:11,590
standards and computers got a little

00:04:09,220 --> 00:04:14,109
faster too and then we ended up with

00:04:11,590 --> 00:04:16,329
very fancy frameworks like react and

00:04:14,109 --> 00:04:19,750
view j/s so now we're starting to write

00:04:16,329 --> 00:04:21,820
very rich web applications which are

00:04:19,750 --> 00:04:25,919
very snappy they give a really good user

00:04:21,820 --> 00:04:29,490
experience and just fantastic overall

00:04:25,919 --> 00:04:32,919
one important thing to note here is that

00:04:29,490 --> 00:04:35,349
this progress is essentially led to the

00:04:32,919 --> 00:04:37,169
movement of complexity from the back end

00:04:35,349 --> 00:04:38,909
to the front end

00:04:37,169 --> 00:04:41,099
the past we would just render very

00:04:38,909 --> 00:04:44,629
simple HTML and ship it down the wire

00:04:41,099 --> 00:04:47,340
but now we're sending really large

00:04:44,629 --> 00:04:49,439
JavaScript applications down the wire so

00:04:47,340 --> 00:04:52,680
the way we write applications have

00:04:49,439 --> 00:04:55,499
significantly changed but the way we've

00:04:52,680 --> 00:04:57,360
been testing them has not changed we you

00:04:55,499 --> 00:04:59,819
know we now tools have always improved

00:04:57,360 --> 00:05:01,560
they have always progressed but the way

00:04:59,819 --> 00:05:05,370
we've done end-to-end testing has

00:05:01,560 --> 00:05:06,930
changed very little before all this new

00:05:05,370 --> 00:05:09,419
fancy frameworks came out all the way

00:05:06,930 --> 00:05:11,300
back in 2004 selenium came out which

00:05:09,419 --> 00:05:15,210
many of you probably have used to

00:05:11,300 --> 00:05:17,370
end-to-end test your websites you know

00:05:15,210 --> 00:05:19,580
shortly after you know selenium

00:05:17,370 --> 00:05:22,229
webdriver came out and there have been

00:05:19,580 --> 00:05:24,919
other wrappers and tools that have made

00:05:22,229 --> 00:05:28,919
using selenium much more easier to use

00:05:24,919 --> 00:05:29,460
to kind of give a shame work of time

00:05:28,919 --> 00:05:34,469
here

00:05:29,460 --> 00:05:36,569
Seifer sale came out in 2014 so the just

00:05:34,469 --> 00:05:38,219
at this point here is that the way we've

00:05:36,569 --> 00:05:40,469
been writing applications has changed by

00:05:38,219 --> 00:05:44,310
the way we're testing them has changed

00:05:40,469 --> 00:05:47,129
very little let's look at the status quo

00:05:44,310 --> 00:05:49,409
of n2n testing which is selenium now the

00:05:47,129 --> 00:05:51,180
architecture of selenium is like this

00:05:49,409 --> 00:05:54,930
you write your tests in any language you

00:05:51,180 --> 00:05:58,139
want and your tests essentially talk to

00:05:54,930 --> 00:06:00,020
the proxy server of selenium selenium

00:05:58,139 --> 00:06:03,180
server is just the proxy server and

00:06:00,020 --> 00:06:05,039
selenium server makes request to the web

00:06:03,180 --> 00:06:08,629
drivers that are actually controlling

00:06:05,039 --> 00:06:11,460
the browser to make your test happen and

00:06:08,629 --> 00:06:13,770
what we have here is the classical

00:06:11,460 --> 00:06:15,539
sinking dilemma we have two separate

00:06:13,770 --> 00:06:18,149
systems and we're constantly trying to

00:06:15,539 --> 00:06:20,399
keep them in sync together this is very

00:06:18,149 --> 00:06:22,499
difficult to do the selenium can only

00:06:20,399 --> 00:06:24,779
ask about what's going on in the browser

00:06:22,499 --> 00:06:28,289
it doesn't actually know what's going on

00:06:24,779 --> 00:06:30,719
at the right time this is what

00:06:28,289 --> 00:06:34,529
essentially leads to flakiness and

00:06:30,719 --> 00:06:36,360
non-deterministic tests selenium has to

00:06:34,529 --> 00:06:37,830
go through this proxy server and has to

00:06:36,360 --> 00:06:39,180
wait for all these Network hops to

00:06:37,830 --> 00:06:42,270
happen before it can actually know

00:06:39,180 --> 00:06:44,490
what's going on it's not it isn't

00:06:42,270 --> 00:06:48,629
exactly it doesn't know exactly when an

00:06:44,490 --> 00:06:50,590
event took place in the browser and so

00:06:48,629 --> 00:06:52,840
you might say well the hell with

00:06:50,590 --> 00:06:54,640
at all I'll just use a stone or some

00:06:52,840 --> 00:06:56,200
other type of dom emulation well the

00:06:54,640 --> 00:06:57,880
thing is none of the users are using

00:06:56,200 --> 00:07:01,720
Jaya stomp to run your application

00:06:57,880 --> 00:07:05,520
none of them zero so you have to do real

00:07:01,720 --> 00:07:09,400
browser testing and that enables you to

00:07:05,520 --> 00:07:10,990
test your users real actions it's the

00:07:09,400 --> 00:07:12,580
best way to do end-to-end testing and

00:07:10,990 --> 00:07:13,810
it's the primary reason you would do end

00:07:12,580 --> 00:07:15,640
to end testing because you want to

00:07:13,810 --> 00:07:19,870
simulate your at your users actual

00:07:15,640 --> 00:07:22,570
actions the thing is which I really want

00:07:19,870 --> 00:07:25,030
to emphasize is that don't let your your

00:07:22,570 --> 00:07:26,320
users be the first ones to test your app

00:07:25,030 --> 00:07:28,420
the answer and test your application

00:07:26,320 --> 00:07:30,970
right it's gonna be a bad experience for

00:07:28,420 --> 00:07:31,930
them and it's gonna cost you time and

00:07:30,970 --> 00:07:34,240
money

00:07:31,930 --> 00:07:36,820
and it's just not good all around for

00:07:34,240 --> 00:07:38,410
for anyone some people will like to rely

00:07:36,820 --> 00:07:40,090
on let's say you know like a crash

00:07:38,410 --> 00:07:41,770
reporting service or error reporting

00:07:40,090 --> 00:07:44,410
service or like well I'll ship my

00:07:41,770 --> 00:07:46,120
application out and if anything goes

00:07:44,410 --> 00:07:47,590
wrong well my error reporting service is

00:07:46,120 --> 00:07:49,330
gonna tell me what went wrong and I can

00:07:47,590 --> 00:07:51,280
just go ahead and fix it well the thing

00:07:49,330 --> 00:07:52,900
is not all errors are perfect errors

00:07:51,280 --> 00:07:54,190
that can be caught by your you know a

00:07:52,900 --> 00:07:55,930
crash reporter they don't all have

00:07:54,190 --> 00:07:58,960
stacked races that could be simply

00:07:55,930 --> 00:08:01,300
experienced user experience problems and

00:07:58,960 --> 00:08:03,760
frankly most users don't actually report

00:08:01,300 --> 00:08:06,070
problems when one day when they see them

00:08:03,760 --> 00:08:09,070
so this is not the way to go you need to

00:08:06,070 --> 00:08:10,600
be testing the exact experience of your

00:08:09,070 --> 00:08:13,620
users before you ship yourself where

00:08:10,600 --> 00:08:15,370
it's the only way you can confidently

00:08:13,620 --> 00:08:19,060
expect that everything is gonna go

00:08:15,370 --> 00:08:21,220
smoothly so let's get back to kind of

00:08:19,060 --> 00:08:21,790
the historical context of things in the

00:08:21,220 --> 00:08:25,920
past

00:08:21,790 --> 00:08:28,960
we mostly wrote stateless websites right

00:08:25,920 --> 00:08:31,570
very simple stuff ship HTML down the

00:08:28,960 --> 00:08:34,120
wire now we're running writing very

00:08:31,570 --> 00:08:36,430
stateful apps and it's a completely

00:08:34,120 --> 00:08:37,990
different ballgame they they're just

00:08:36,430 --> 00:08:41,110
completely different beasts and we need

00:08:37,990 --> 00:08:43,060
a much more optimal way of testing these

00:08:41,110 --> 00:08:46,030
types of applications and this is why

00:08:43,060 --> 00:08:48,490
Cypress exists so Cypress is a really

00:08:46,030 --> 00:08:50,050
nice and fast and easy way for you to

00:08:48,490 --> 00:08:52,180
test anything that runs in the browser

00:08:50,050 --> 00:08:55,750
it's completely free it's open source

00:08:52,180 --> 00:08:57,640
and it's MIT license it's very easy to

00:08:55,750 --> 00:09:00,250
install all you got to do is just NPM

00:08:57,640 --> 00:09:02,350
install Cypress and with that you're

00:09:00,250 --> 00:09:04,329
gonna get everything you need you're

00:09:02,350 --> 00:09:06,399
gonna get the familiar tools

00:09:04,329 --> 00:09:09,910
you you've probably seen before like

00:09:06,399 --> 00:09:14,139
mocha test framework chai assertions and

00:09:09,910 --> 00:09:16,929
sign-on for subbing and mocking so with

00:09:14,139 --> 00:09:18,720
a simple install line you're gonna get

00:09:16,929 --> 00:09:21,939
everything all in one tool

00:09:18,720 --> 00:09:31,809
alright so let's go ahead and see it in

00:09:21,939 --> 00:09:34,509
action for a little bit okay so I'm

00:09:31,809 --> 00:09:37,569
going to demonstrate to do MBC app if

00:09:34,509 --> 00:09:39,579
you're not familiar with to do MBC it's

00:09:37,569 --> 00:09:42,160
essentially a to do application that's

00:09:39,579 --> 00:09:45,220
implemented in various frameworks to

00:09:42,160 --> 00:09:47,049
kind of show how you know how we'll look

00:09:45,220 --> 00:09:49,600
in those frameworks if you're working to

00:09:47,049 --> 00:09:53,230
write it to do that so the way I

00:09:49,600 --> 00:09:54,850
launched Cyprus is by just typing in

00:09:53,230 --> 00:09:59,910
after I've installed it I can just type

00:09:54,850 --> 00:09:59,910
in MPX let me make it a little bigger

00:10:00,239 --> 00:10:04,989
Cyprus is a binary that you know just

00:10:02,980 --> 00:10:07,059
goes into my node modules so that's why

00:10:04,989 --> 00:10:09,579
I'm using MPX right here to run the

00:10:07,059 --> 00:10:14,949
local version of Cyprus and I'm just

00:10:09,579 --> 00:10:16,569
going to type in Cyprus open let's get

00:10:14,949 --> 00:10:18,339
the sizing down here and give some

00:10:16,569 --> 00:10:21,040
people a chance to sit down new people

00:10:18,339 --> 00:10:23,410
coming in so the Cyprus command is going

00:10:21,040 --> 00:10:26,079
to bring up the desktop GUI

00:10:23,410 --> 00:10:29,889
that is Cyprus this is the electron

00:10:26,079 --> 00:10:32,470
application and what it shows you when

00:10:29,889 --> 00:10:34,929
it first launches is all the spec files

00:10:32,470 --> 00:10:37,119
that exist in your project directory

00:10:34,929 --> 00:10:38,470
this is a simple to do application

00:10:37,119 --> 00:10:41,259
there's only one spec file to test

00:10:38,470 --> 00:10:43,089
everything so the way I can start my

00:10:41,259 --> 00:10:44,709
test I just have to select the spec file

00:10:43,089 --> 00:10:46,869
that I want simply click on it and

00:10:44,709 --> 00:10:49,959
Cyprus is going to immediately bring up

00:10:46,869 --> 00:10:52,119
a browser electron in this case and it's

00:10:49,959 --> 00:10:54,639
going to start running my tests after it

00:10:52,119 --> 00:10:57,939
has pulled in that to do application as

00:10:54,639 --> 00:11:00,489
you can see Cyprus runs very fast and

00:10:57,939 --> 00:11:01,869
actually once the once the GUI is up

00:11:00,489 --> 00:11:04,660
it's going to start up the browser very

00:11:01,869 --> 00:11:05,980
fast as well so right now this is a

00:11:04,660 --> 00:11:07,749
to-do app it's going through all the

00:11:05,980 --> 00:11:09,730
various permutations of a to-do

00:11:07,749 --> 00:11:11,410
application creating new to do's marking

00:11:09,730 --> 00:11:13,449
them complete making sure they're right

00:11:11,410 --> 00:11:16,569
that they're the right count'em to do is

00:11:13,449 --> 00:11:18,949
exist and so on so let's hit that lets

00:11:16,569 --> 00:11:21,629
get that finished

00:11:18,949 --> 00:11:26,029
but I mean but and we're done

00:11:21,629 --> 00:11:29,600
all test pass yay so this is your

00:11:26,029 --> 00:11:32,279
cypress experiences how will look like

00:11:29,600 --> 00:11:34,889
Cypress runs right alongside your

00:11:32,279 --> 00:11:36,779
application it runs within the same run

00:11:34,889 --> 00:11:38,309
loop as your application so it knows

00:11:36,779 --> 00:11:40,139
exactly what's going on in your

00:11:38,309 --> 00:11:42,389
application it can react quickly it can

00:11:40,139 --> 00:11:44,429
make assertions right away

00:11:42,389 --> 00:11:46,980
unlike let's say selenium where it has

00:11:44,429 --> 00:11:48,629
to just make make a request over over

00:11:46,980 --> 00:11:50,809
the wire and hopefully it will get back

00:11:48,629 --> 00:11:52,859
the right information in needs in time

00:11:50,809 --> 00:11:55,589
so let's look at what we what we're

00:11:52,859 --> 00:11:57,660
seeing here on the right hand side this

00:11:55,589 --> 00:11:59,609
is your application we reloaded an

00:11:57,660 --> 00:12:01,769
iframe on on that's on the right hand

00:11:59,609 --> 00:12:04,139
side and up top this is the URL that

00:12:01,769 --> 00:12:06,540
correlates to what you're seeing on on

00:12:04,139 --> 00:12:08,279
the page and on the left hand side this

00:12:06,540 --> 00:12:10,470
is what's called a command log this

00:12:08,279 --> 00:12:13,649
shows all your test Suites and all the

00:12:10,470 --> 00:12:16,529
tests that were executed let's look at

00:12:13,649 --> 00:12:20,249
the first one which is we're very

00:12:16,529 --> 00:12:21,959
certain that when the app loads the the

00:12:20,249 --> 00:12:23,639
cursor should be focused in the input

00:12:21,959 --> 00:12:25,079
box which makes sense because you know

00:12:23,639 --> 00:12:26,339
right when you open it to do app you

00:12:25,079 --> 00:12:31,009
want to immediately start typing in

00:12:26,339 --> 00:12:33,209
to-do items and as we hover over

00:12:31,009 --> 00:12:38,069
different Cypress commands that were

00:12:33,209 --> 00:12:40,109
executed right here we'll see the app on

00:12:38,069 --> 00:12:42,929
the right-hand side change Cypress takes

00:12:40,109 --> 00:12:44,730
a dump snapshot of you know whenever it

00:12:42,929 --> 00:12:46,519
runs a command so it can show you

00:12:44,730 --> 00:12:49,139
exactly what happened with each command

00:12:46,519 --> 00:12:50,699
so the first thing we do is we visit the

00:12:49,139 --> 00:12:52,259
root directory of this app which is

00:12:50,699 --> 00:12:54,959
that's why we're not seeing anything yet

00:12:52,259 --> 00:12:57,829
after we visited it we're going to use

00:12:54,959 --> 00:13:01,230
the Cypress focus command to assert that

00:12:57,829 --> 00:13:02,730
we are focused in this input box and as

00:13:01,230 --> 00:13:06,209
I hover over that you know it will

00:13:02,730 --> 00:13:07,919
actually select that input box if you

00:13:06,209 --> 00:13:09,269
look at another test right here actually

00:13:07,919 --> 00:13:12,119
we're going to create a new to do with

00:13:09,269 --> 00:13:14,369
this test we're going to go ahead and

00:13:12,119 --> 00:13:18,569
make it to do item for buying some

00:13:14,369 --> 00:13:20,549
cheese so as you can see if I'm hovering

00:13:18,569 --> 00:13:22,529
my mouse over that command its

00:13:20,549 --> 00:13:24,239
alternating the before and after

00:13:22,529 --> 00:13:26,939
snapshot so I can see what happened

00:13:24,239 --> 00:13:30,269
before this command ran and I can

00:13:26,939 --> 00:13:31,440
actually pin that Dom snapshot and I can

00:13:30,269 --> 00:13:33,180
just see what how the

00:13:31,440 --> 00:13:36,779
look like before and after myself and I

00:13:33,180 --> 00:13:38,279
can unpin that so what's cool about this

00:13:36,779 --> 00:13:41,370
is you can hover and you can essentially

00:13:38,279 --> 00:13:43,589
travel back in time and see how how

00:13:41,370 --> 00:13:45,509
things look like it's a very nice way to

00:13:43,589 --> 00:13:48,420
inspect how your application is

00:13:45,509 --> 00:13:51,000
functioning another cool thing is that

00:13:48,420 --> 00:13:53,310
Cypress you know is just running a

00:13:51,000 --> 00:13:56,910
normal chromium browser so you get

00:13:53,310 --> 00:13:58,920
access to dev tools right here and

00:13:56,910 --> 00:14:01,620
whenever you hover and click on a

00:13:58,920 --> 00:14:03,029
command it clears the console log out

00:14:01,620 --> 00:14:05,610
and it gives you relevant information

00:14:03,029 --> 00:14:07,009
about that command that ran so this is

00:14:05,610 --> 00:14:09,839
great when we're you know especially

00:14:07,009 --> 00:14:11,310
inspecting you know requests and things

00:14:09,839 --> 00:14:13,920
like that we can see the request and

00:14:11,310 --> 00:14:17,100
response payload it's it's very nice so

00:14:13,920 --> 00:14:19,139
it's very easy to to debug because you

00:14:17,100 --> 00:14:21,990
get access to dev tools right

00:14:19,139 --> 00:14:23,850
out-of-the-box now let's look at

00:14:21,990 --> 00:14:29,160
something interesting I'm going to go

00:14:23,850 --> 00:14:30,750
ahead and let's go bring it let's go

00:14:29,160 --> 00:14:34,259
look at that tests we were writing so

00:14:30,750 --> 00:14:36,000
here's that test for making an ascension

00:14:34,259 --> 00:14:38,759
that assertion that when the app is

00:14:36,000 --> 00:14:41,579
loaded we're focused on the input box

00:14:38,759 --> 00:14:43,949
and this is how the test for that looks

00:14:41,579 --> 00:14:46,500
like all ciphers commands start with

00:14:43,949 --> 00:14:48,269
this global CY command and then you

00:14:46,500 --> 00:14:52,290
essentially have a chain of commands

00:14:48,269 --> 00:14:54,089
that you can execute and that's our

00:14:52,290 --> 00:14:56,550
ciphers tests are written so we're doing

00:14:54,089 --> 00:14:58,740
sideout focused which is asserting that

00:14:56,550 --> 00:15:00,269
hey are we focused on the input box and

00:14:58,740 --> 00:15:03,230
it's how that looks like so let's only

00:15:00,269 --> 00:15:03,230
run this test

00:15:15,810 --> 00:15:30,540
oh there we go that's alright okay so

00:15:28,800 --> 00:15:32,550
now we're only running that one test now

00:15:30,540 --> 00:15:35,940
this test passes let's go ahead and

00:15:32,550 --> 00:15:37,740
break this app right now so I'm going to

00:15:35,940 --> 00:15:39,540
go in this app and I'm seeing that the

00:15:37,740 --> 00:15:41,040
autofocus for this input box is set to

00:15:39,540 --> 00:15:43,260
true well let's go ahead and break in

00:15:41,040 --> 00:15:48,420
and set set it to false which is going

00:15:43,260 --> 00:15:49,500
to make this make this test fail so

00:15:48,420 --> 00:15:51,660
everyone's going to wait and be like hey

00:15:49,500 --> 00:15:54,029
I kept I kept retrying to see if this

00:15:51,660 --> 00:15:55,890
test will pass but it didn't and notice

00:15:54,029 --> 00:15:59,339
this is how it looks like when problems

00:15:55,890 --> 00:16:02,070
occur and we go out of our way to give

00:15:59,339 --> 00:16:05,339
you very human readable messages these

00:16:02,070 --> 00:16:06,960
are all handwritten messages so I'm very

00:16:05,339 --> 00:16:09,630
proud of that so nobody wants to see a

00:16:06,960 --> 00:16:12,120
kid garbled you know nonsense when

00:16:09,630 --> 00:16:15,270
something goes wrong so let's go ahead

00:16:12,120 --> 00:16:16,680
and rerun this test and Cypress is

00:16:15,270 --> 00:16:18,450
trying to make this assertion but I'm

00:16:16,680 --> 00:16:21,570
going to click the info box myself and

00:16:18,450 --> 00:16:22,860
force this test to pass so the stat when

00:16:21,570 --> 00:16:24,660
you're Cypress loads the app this is

00:16:22,860 --> 00:16:26,940
your actual app you can play with it you

00:16:24,660 --> 00:16:28,920
can type things in right here it's it's

00:16:26,940 --> 00:16:33,240
not some weird version of your app it's

00:16:28,920 --> 00:16:35,250
the full thing and me in focusing on the

00:16:33,240 --> 00:16:36,780
input boxes is essentially changing the

00:16:35,250 --> 00:16:45,620
state of the Dom and making this test

00:16:36,780 --> 00:16:48,210
pass alright so exit out of here and

00:16:45,620 --> 00:16:51,150
it's actually fix this before we move on

00:16:48,210 --> 00:16:54,930
and let's get back to our discussion all

00:16:51,150 --> 00:16:58,350
right so very overly simplified view of

00:16:54,930 --> 00:17:00,630
Cyprus architecture it's that the Cyprus

00:16:58,350 --> 00:17:02,820
test runner runs right alongside your

00:17:00,630 --> 00:17:04,800
app on the same run loop as your

00:17:02,820 --> 00:17:08,640
application which is drastically

00:17:04,800 --> 00:17:10,230
different than anything out there so the

00:17:08,640 --> 00:17:11,850
benefits of this as I said before you

00:17:10,230 --> 00:17:14,150
get direct native access to the DOM and

00:17:11,850 --> 00:17:17,010
therefore your app and this allows for

00:17:14,150 --> 00:17:19,230
interesting types of tests you can run

00:17:17,010 --> 00:17:21,420
and we'll see some of that shortly your

00:17:19,230 --> 00:17:23,010
tests run very fast they can they'd run

00:17:21,420 --> 00:17:25,709
actually just as fast as your

00:17:23,010 --> 00:17:26,880
application so it's that's just

00:17:25,709 --> 00:17:29,130
fantastic you're just going to get a

00:17:26,880 --> 00:17:29,900
hell of a lot faster tests and as you

00:17:29,130 --> 00:17:32,580
saw

00:17:29,900 --> 00:17:34,260
Cypress there was no weight command

00:17:32,580 --> 00:17:34,950
there was no like timeouts or anything

00:17:34,260 --> 00:17:37,260
like that

00:17:34,950 --> 00:17:40,050
Cyprus automatically retries and keeps

00:17:37,260 --> 00:17:42,300
me trying to assert the state of the Dom

00:17:40,050 --> 00:17:43,770
that you're expecting so you don't have

00:17:42,300 --> 00:17:45,720
to mess with timeouts or weights or

00:17:43,770 --> 00:17:48,000
anything like that and I get full access

00:17:45,720 --> 00:17:51,810
to dev tools which you know it helps a

00:17:48,000 --> 00:17:54,810
lot for debugging my app and I can have

00:17:51,810 --> 00:17:57,330
my editor and Cyprus side-by-side and as

00:17:54,810 --> 00:17:59,340
I'm changing the mice my my test specs

00:17:57,330 --> 00:18:01,460
Cyprus will automatically reload and run

00:17:59,340 --> 00:18:03,900
the test so that's just fantastic and

00:18:01,460 --> 00:18:08,550
what this all leads to is flake-free

00:18:03,900 --> 00:18:12,480
consistent and reliable tests so how the

00:18:08,550 --> 00:18:14,190
Cyprus make this happen well here's an

00:18:12,480 --> 00:18:16,620
example we got three commands that are

00:18:14,190 --> 00:18:19,380
running these are very simple they're

00:18:16,620 --> 00:18:21,330
just trying to you know select the three

00:18:19,380 --> 00:18:23,880
Dom elements Cyprus will look at this

00:18:21,330 --> 00:18:25,500
and it will essentially queue these

00:18:23,880 --> 00:18:27,870
commands up and run them in the order

00:18:25,500 --> 00:18:29,760
that you've declared them so we'll you

00:18:27,870 --> 00:18:31,500
know you'd find the first one second one

00:18:29,760 --> 00:18:33,300
third one exactly how you've written it

00:18:31,500 --> 00:18:39,180
in this way things happen

00:18:33,300 --> 00:18:40,830
deterministically so as I said you get

00:18:39,180 --> 00:18:43,680
direct access to the Dom and this allows

00:18:40,830 --> 00:18:45,780
for cool types of tests my brilliant

00:18:43,680 --> 00:18:48,900
colleague Gleb amitabh has written a

00:18:45,780 --> 00:18:51,240
series of component testing libraries

00:18:48,900 --> 00:18:53,760
for all your favorite frameworks out

00:18:51,240 --> 00:18:56,880
there and with this essentially

00:18:53,760 --> 00:18:59,160
essentially allows you to do is take one

00:18:56,880 --> 00:19:01,410
of your components here in let's say in

00:18:59,160 --> 00:19:04,170
react you can just take just that one

00:19:01,410 --> 00:19:06,840
component you know in isolation and

00:19:04,170 --> 00:19:10,050
mount it to a real browser Dom and then

00:19:06,840 --> 00:19:11,640
you can run Cypress tests against it so

00:19:10,050 --> 00:19:15,990
let's go ahead and see an example of

00:19:11,640 --> 00:19:22,070
this I will be showing this to you in

00:19:15,990 --> 00:19:22,070
the view version so let's go ahead and

00:19:25,670 --> 00:19:32,000
but wait for that to open up so this is

00:19:30,140 --> 00:19:36,140
essentially an example within the

00:19:32,000 --> 00:19:38,690
Cypress V unit test library it's a it's

00:19:36,140 --> 00:19:41,270
a simple counter

00:19:38,690 --> 00:19:42,920
component but which is not interesting

00:19:41,270 --> 00:19:46,010
but if the part that is interesting is

00:19:42,920 --> 00:19:47,660
that this counter uses view X to manage

00:19:46,010 --> 00:19:49,520
its state if you're not familiar view X

00:19:47,660 --> 00:19:59,060
it's like Redux it's just a central

00:19:49,520 --> 00:20:02,230
state store just see how it runs there

00:19:59,060 --> 00:20:04,580
we go whew we got a nice little counter

00:20:02,230 --> 00:20:05,930
so that's how it looks like but more

00:20:04,580 --> 00:20:09,890
importantly we want to look at the code

00:20:05,930 --> 00:20:12,590
for this so the Cypress view unit test

00:20:09,890 --> 00:20:14,840
library is going to give you this Mount

00:20:12,590 --> 00:20:17,000
View function if you were using Cypress

00:20:14,840 --> 00:20:19,040
react unit test you would get a mount

00:20:17,000 --> 00:20:22,840
function for mounting react components

00:20:19,040 --> 00:20:26,300
and before each test I can go ahead and

00:20:22,840 --> 00:20:27,980
mount my component however I wish so I'm

00:20:26,300 --> 00:20:30,350
passing in the template for my component

00:20:27,980 --> 00:20:32,180
the central store instance for it to use

00:20:30,350 --> 00:20:33,620
any extensions or anything else I want

00:20:32,180 --> 00:20:35,540
to use along with it and it would just

00:20:33,620 --> 00:20:39,290
take that component and mount it to the

00:20:35,540 --> 00:20:41,330
dom and here's the cool part i can

00:20:39,290 --> 00:20:45,260
directly manipulate the state of this

00:20:41,330 --> 00:20:46,940
app with just plain old JavaScript the

00:20:45,260 --> 00:20:50,240
Cypress for unit test library is going

00:20:46,940 --> 00:20:52,340
to give me a view instance on the

00:20:50,240 --> 00:20:54,650
Cypress global variable right here and I

00:20:52,340 --> 00:20:57,260
can directly get access to the central

00:20:54,650 --> 00:20:59,360
store and I can get the state of the

00:20:57,260 --> 00:21:01,640
count in the counter or I can change the

00:20:59,360 --> 00:21:05,600
state I can I can change this directly

00:21:01,640 --> 00:21:07,370
in my tests now a real world example of

00:21:05,600 --> 00:21:09,950
this is let's say you want to test your

00:21:07,370 --> 00:21:11,510
login page right and you need you need

00:21:09,950 --> 00:21:12,590
to authenticate before you can do other

00:21:11,510 --> 00:21:15,380
things in your test

00:21:12,590 --> 00:21:18,080
well maybe you only need to do that once

00:21:15,380 --> 00:21:19,700
if via the UI of your app right you you

00:21:18,080 --> 00:21:21,560
go ahead and you type in your username

00:21:19,700 --> 00:21:24,500
password then you hit the login button

00:21:21,560 --> 00:21:25,940
in your tests but you really need to do

00:21:24,500 --> 00:21:29,090
that every single time you want to

00:21:25,940 --> 00:21:30,590
authenticate to run on one test no you

00:21:29,090 --> 00:21:32,420
just want to do it once you had now you

00:21:30,590 --> 00:21:34,490
have confidence that the login UI works

00:21:32,420 --> 00:21:36,320
and then every other time you need

00:21:34,490 --> 00:21:39,140
authentication in your test you would

00:21:36,320 --> 00:21:40,670
simply authenticate that user via

00:21:39,140 --> 00:21:42,140
javascript directly you don't have to

00:21:40,670 --> 00:21:44,030
keep going through the UI just to

00:21:42,140 --> 00:21:46,280
authenticate you can just do it in plain

00:21:44,030 --> 00:21:50,080
old JavaScript and this is going to be a

00:21:46,280 --> 00:21:50,080
much faster way of running your tests

00:21:50,620 --> 00:21:59,360
let's close that out okay so so far I've

00:21:57,830 --> 00:22:01,220
just been showing you the ciphers open

00:21:59,360 --> 00:22:03,530
command you've constantly seen me run

00:22:01,220 --> 00:22:05,780
Cypress open and that's great for your

00:22:03,530 --> 00:22:07,720
everyday you know developmental workflow

00:22:05,780 --> 00:22:10,340
Cypress on one side editor on one side

00:22:07,720 --> 00:22:11,630
test-driven development whoa ah well

00:22:10,340 --> 00:22:13,460
there's a whole other side to Cypress

00:22:11,630 --> 00:22:16,370
and that's you can run it headless lis

00:22:13,460 --> 00:22:18,230
using the Cypress run command this is

00:22:16,370 --> 00:22:20,930
great for writing Cypress tests in your

00:22:18,230 --> 00:22:22,460
CI and it's a much more efficient way of

00:22:20,930 --> 00:22:24,410
running all your tests you know any

00:22:22,460 --> 00:22:26,810
real-world app has like hundreds of

00:22:24,410 --> 00:22:28,970
thousands of tests and I there's no need

00:22:26,810 --> 00:22:30,440
to run that like visually you can but

00:22:28,970 --> 00:22:33,530
it's just a hell of a lot faster running

00:22:30,440 --> 00:22:37,250
headless Lee and the cool thing about

00:22:33,530 --> 00:22:39,080
running Cypress headless Lee is that you

00:22:37,250 --> 00:22:41,780
can actually get a recording a video

00:22:39,080 --> 00:22:43,340
recording of your entire test run by

00:22:41,780 --> 00:22:49,300
just you know passing in this record

00:22:43,340 --> 00:22:53,840
flag and we'll see that let's go then so

00:22:49,300 --> 00:22:56,450
that to do NBC app I had now we fixed it

00:22:53,840 --> 00:22:59,090
right here and let's go ahead and remove

00:22:56,450 --> 00:23:03,470
this only right here and let's bring it

00:22:59,090 --> 00:23:06,830
back up okay so now I'm going to run

00:23:03,470 --> 00:23:09,410
Cypress run past the record flag and

00:23:06,830 --> 00:23:11,330
there's also this key flag this is this

00:23:09,410 --> 00:23:13,460
this key flag is provided by Cypress and

00:23:11,330 --> 00:23:15,620
a uniquely identifies your project and

00:23:13,460 --> 00:23:17,180
this is useful when you're using the

00:23:15,620 --> 00:23:18,890
Cypress dashboard which is a

00:23:17,180 --> 00:23:21,380
complimentary service to Cypress and

00:23:18,890 --> 00:23:23,870
we'll see that shortly but I'm going to

00:23:21,380 --> 00:23:27,470
go ahead and run this and this is going

00:23:23,870 --> 00:23:30,350
to bring up a headless browser and it's

00:23:27,470 --> 00:23:39,230
going to start running Cypress headless

00:23:30,350 --> 00:23:40,700
Lee great now it's brought them up so I

00:23:39,230 --> 00:23:41,930
don't think I have proper internet

00:23:40,700 --> 00:23:44,930
connection here that's probably why it

00:23:41,930 --> 00:23:47,770
didn't said that message your votes

00:23:44,930 --> 00:23:47,770
ringing let's see

00:24:00,800 --> 00:24:03,400
hope

00:24:07,980 --> 00:24:13,070
that's the one anyone know the password

00:24:13,940 --> 00:24:17,240
what is it

00:24:19,399 --> 00:24:33,409
who is sports horse okay that's right

00:24:30,769 --> 00:24:36,240
thank you

00:24:33,409 --> 00:24:40,139
Wow cool

00:24:36,240 --> 00:24:43,380
so while that's doing that my my test

00:24:40,139 --> 00:24:46,740
run ran and and it ran headless Lee and

00:24:43,380 --> 00:24:49,950
after was done it gave me this this the

00:24:46,740 --> 00:24:53,010
path to the video it took of my test so

00:24:49,950 --> 00:24:57,090
I can actually bring that up and I can

00:24:53,010 --> 00:24:59,909
play that and so this is exactly what

00:24:57,090 --> 00:25:03,529
you were seeing in the browser it's the

00:24:59,909 --> 00:25:03,529
exact video of that entire test run

00:25:11,690 --> 00:25:16,409
okay so now this leads to the whole

00:25:14,970 --> 00:25:18,179
other part of Cyprus which is this

00:25:16,409 --> 00:25:21,179
complimentary dashboard service which is

00:25:18,179 --> 00:25:22,950
actually also optional to use but it's

00:25:21,179 --> 00:25:25,259
great one your writing test in CI

00:25:22,950 --> 00:25:26,549
because when it's running a CI you have

00:25:25,259 --> 00:25:27,749
no idea how what's going on in the

00:25:26,549 --> 00:25:29,369
browser you don't know how it looks like

00:25:27,749 --> 00:25:33,179
you need a way to see what's going on

00:25:29,369 --> 00:25:35,789
and the dashboard it records all your

00:25:33,179 --> 00:25:37,440
tests it tells you which specs ran which

00:25:35,789 --> 00:25:39,119
ones passed or fail will show you error

00:25:37,440 --> 00:25:40,619
messages it will show you video

00:25:39,119 --> 00:25:42,809
recordings that like the ones you just

00:25:40,619 --> 00:25:44,429
saw will show you screen shots automatic

00:25:42,809 --> 00:25:47,759
screen shots are taking when something

00:25:44,429 --> 00:25:50,039
goes goes wrong so it's it's a it's

00:25:47,759 --> 00:25:53,309
great for that and we can actually take

00:25:50,039 --> 00:25:55,289
a quick look at that so here's an

00:25:53,309 --> 00:25:57,779
example of actually one of our own tests

00:25:55,289 --> 00:25:59,820
this is test for the Cyprus dashboard we

00:25:57,779 --> 00:26:01,499
use Cyprus internally obviously if to

00:25:59,820 --> 00:26:05,639
test everything we use Cyprus to test

00:26:01,499 --> 00:26:09,090
Cyprus so yeah so that's works great

00:26:05,639 --> 00:26:11,190
great for that this is an example of a

00:26:09,090 --> 00:26:14,850
test run where you know things fail for

00:26:11,190 --> 00:26:17,389
whatever reason and we have those exact

00:26:14,850 --> 00:26:19,739
error messages of things went wrong

00:26:17,389 --> 00:26:21,359
there there right here is a key I assume

00:26:19,739 --> 00:26:22,980
you can see the exact standard output

00:26:21,359 --> 00:26:27,539
kind of like how you would see them main

00:26:22,980 --> 00:26:31,460
CI you get to see screenshots that of

00:26:27,539 --> 00:26:33,929
the problem place and you can see videos

00:26:31,460 --> 00:26:37,379
kind of like the one you just saw right

00:26:33,929 --> 00:26:38,999
now so it's great for then you can

00:26:37,379 --> 00:26:44,940
actually you know it's you look at

00:26:38,999 --> 00:26:46,379
everyone that like passed so a passing

00:26:44,940 --> 00:26:48,210
test will look like this

00:26:46,379 --> 00:26:54,450
and we'll get to some of this cool stuff

00:26:48,210 --> 00:26:56,580
in a little bit so until recently you

00:26:54,450 --> 00:26:57,960
know the dashboard was just for seeing

00:26:56,580 --> 00:27:00,570
what's going on in your CI environment

00:26:57,960 --> 00:27:02,190
it was great for that you know it's also

00:27:00,570 --> 00:27:03,749
great for collaboration because you can

00:27:02,190 --> 00:27:05,009
like link your co-workers like here this

00:27:03,749 --> 00:27:07,159
is the exact thing that we're on here's

00:27:05,009 --> 00:27:11,100
a video of it here's a screenshot of it

00:27:07,159 --> 00:27:14,249
but now you know we recently released

00:27:11,100 --> 00:27:16,739
the Cyprus 3.1 which adds the

00:27:14,249 --> 00:27:18,600
parallelization feature and we've kind

00:27:16,739 --> 00:27:20,159
of been you know not very vocal about

00:27:18,600 --> 00:27:21,419
this feature and we haven't talked too

00:27:20,159 --> 00:27:22,830
much about it publicly so this is the

00:27:21,419 --> 00:27:25,470
first time we've ever talked about it

00:27:22,830 --> 00:27:29,550
publicly so you know congratulations

00:27:25,470 --> 00:27:31,320
so yeah 3.1 is out it's been and we're

00:27:29,550 --> 00:27:33,240
offering parallelization in that and

00:27:31,320 --> 00:27:35,580
it's been along the way this feature and

00:27:33,240 --> 00:27:39,960
what parallelization allows you to do is

00:27:35,580 --> 00:27:44,100
it can automatically load balance your

00:27:39,960 --> 00:27:46,140
test runs across your CI resources and

00:27:44,100 --> 00:27:48,270
all you got to do is bring up how many

00:27:46,140 --> 00:27:50,760
CI resources you want you know three

00:27:48,270 --> 00:27:52,320
machines time machines whatever and all

00:27:50,760 --> 00:27:54,360
you got to do is just pass this new

00:27:52,320 --> 00:27:56,610
parallel flag in when you're running

00:27:54,360 --> 00:27:58,650
your tests let's go ahead and see how

00:27:56,610 --> 00:28:00,960
this works so let's say you you

00:27:58,650 --> 00:28:03,690
configure your CI environment to you

00:28:00,960 --> 00:28:05,220
know use three machines and this is

00:28:03,690 --> 00:28:06,930
what's going to happen the first machine

00:28:05,220 --> 00:28:08,670
is going to contact Cypress and it's

00:28:06,930 --> 00:28:10,620
gonna be like hey buddy I'm ready for

00:28:08,670 --> 00:28:12,870
some work and here all the tests they

00:28:10,620 --> 00:28:15,150
need to run for this project we're like

00:28:12,870 --> 00:28:17,460
cool great we're going to now

00:28:15,150 --> 00:28:20,250
intelligently figure out what is the

00:28:17,460 --> 00:28:22,020
first thing this new machine is supposed

00:28:20,250 --> 00:28:25,410
to do which test specs should this

00:28:22,020 --> 00:28:27,690
machine run well we determine and we'll

00:28:25,410 --> 00:28:29,250
see how that's done that this machine

00:28:27,690 --> 00:28:32,190
should go ahead and start with the login

00:28:29,250 --> 00:28:33,210
spec to test the login page and then the

00:28:32,190 --> 00:28:35,250
second machine is going to like alright

00:28:33,210 --> 00:28:36,960
I'm ready to and then we're like okay

00:28:35,250 --> 00:28:39,120
great you can do the signup page and

00:28:36,960 --> 00:28:41,100
then the third one here you can test

00:28:39,120 --> 00:28:45,810
this widget and this all happens

00:28:41,100 --> 00:28:50,100
obviously in parallel so as you can see

00:28:45,810 --> 00:28:53,190
you know now we can optimally use our CI

00:28:50,100 --> 00:28:55,710
resources now how do we know which

00:28:53,190 --> 00:28:57,900
respect to give first and which to do

00:28:55,710 --> 00:29:00,660
second which to give third right how do

00:28:57,900 --> 00:29:04,140
we go about doing that well this is how

00:29:00,660 --> 00:29:05,970
we do load balancing when you start

00:29:04,140 --> 00:29:08,580
using the cypress dashboard you know

00:29:05,970 --> 00:29:09,870
you're recording your test to it and you

00:29:08,580 --> 00:29:12,120
know Cypress is in a very intimate

00:29:09,870 --> 00:29:14,520
relationship with with your test and

00:29:12,120 --> 00:29:16,800
that was everything you know about them

00:29:14,520 --> 00:29:20,430
how long it takes to run each of your

00:29:16,800 --> 00:29:24,420
specs and so we have a test duration

00:29:20,430 --> 00:29:26,550
history of any given spec and then we do

00:29:24,420 --> 00:29:29,190
some clever math do some analysis on

00:29:26,550 --> 00:29:31,980
that and then we can forecast how long

00:29:29,190 --> 00:29:35,280
the next test run for a given spec will

00:29:31,980 --> 00:29:37,050
take once we have that information we've

00:29:35,280 --> 00:29:39,600
configured it so that we'll run the

00:29:37,050 --> 00:29:41,100
longest test first because

00:29:39,600 --> 00:29:42,690
it's gonna take the longest we should

00:29:41,100 --> 00:29:48,059
probably get started on that first right

00:29:42,690 --> 00:29:50,519
and and we do this on the fly for every

00:29:48,059 --> 00:29:52,529
test spec that you want to test so we'll

00:29:50,519 --> 00:29:54,929
go ahead and automatically compute and

00:29:52,529 --> 00:29:57,210
forecast how long it's going to take to

00:29:54,929 --> 00:29:59,820
run the log in spec and sign up spec and

00:29:57,210 --> 00:30:02,330
widget spec and then this is how we go

00:29:59,820 --> 00:30:06,720
about load-balancing them across your CI

00:30:02,330 --> 00:30:09,359
environment and so what this allows you

00:30:06,720 --> 00:30:12,899
to do is you know get the most bang for

00:30:09,359 --> 00:30:15,059
buck from your CI right because yes you

00:30:12,899 --> 00:30:16,919
can say like that you're using circle CI

00:30:15,059 --> 00:30:19,409
and you can configure it to have 10

00:30:16,919 --> 00:30:20,759
machines running it's great but it's

00:30:19,409 --> 00:30:22,859
kind of like having a really powerful

00:30:20,759 --> 00:30:24,690
computer and not having the proper

00:30:22,859 --> 00:30:27,629
software to use all the cores and all

00:30:24,690 --> 00:30:31,919
the memory right but Cypress allows you

00:30:27,629 --> 00:30:34,529
to optimize your test runs across your

00:30:31,919 --> 00:30:36,840
CI resources and what this essentially

00:30:34,529 --> 00:30:39,899
leads to is you saving a lot of time and

00:30:36,840 --> 00:30:44,820
money because your tests run faster and

00:30:39,899 --> 00:30:46,830
the developers cost a lot so we can

00:30:44,820 --> 00:30:51,019
actually go ahead and look at how a

00:30:46,830 --> 00:30:53,639
parallelized test run looks like this is

00:30:51,019 --> 00:30:58,979
for actually our cypress dashboard thing

00:30:53,639 --> 00:31:01,970
I had another one there we go this one's

00:30:58,979 --> 00:31:01,970
good okay

00:31:11,010 --> 00:31:16,890
all right

00:31:12,910 --> 00:31:21,640
so this is showing you three different

00:31:16,890 --> 00:31:23,500
test runs over here and we've labeled

00:31:21,640 --> 00:31:25,000
them and I'll show you how that labeling

00:31:23,500 --> 00:31:28,120
works it's actually a new feature as

00:31:25,000 --> 00:31:32,110
well and you see like this one says 2x

00:31:28,120 --> 00:31:34,300
chrome zoom that a little bit 2x chrome

00:31:32,110 --> 00:31:35,890
another next one says like 1x electron

00:31:34,300 --> 00:31:37,960
4x electron this is just a naming

00:31:35,890 --> 00:31:41,860
convention we're using to say okay this

00:31:37,960 --> 00:31:44,530
test run was testing in chrome and it

00:31:41,860 --> 00:31:46,600
used to you know to machine CI machines

00:31:44,530 --> 00:31:48,910
to run this test and this one uses four

00:31:46,600 --> 00:31:50,950
machines so if you look at the duration

00:31:48,910 --> 00:31:54,250
history of each one of these for example

00:31:50,950 --> 00:31:55,810
if we look at the the electron tests the

00:31:54,250 --> 00:31:58,900
one that just used one machine it took

00:31:55,810 --> 00:32:01,450
two minutes 38 seconds and the one we

00:31:58,900 --> 00:32:04,240
use for machines only took 46 seconds

00:32:01,450 --> 00:32:05,920
and you know 2 minutes 38 seconds is not

00:32:04,240 --> 00:32:07,540
a lot but when you're looking this is

00:32:05,920 --> 00:32:10,420
just the example project but when you're

00:32:07,540 --> 00:32:12,400
running this against a real big project

00:32:10,420 --> 00:32:15,370
you're really gonna see the time time

00:32:12,400 --> 00:32:21,630
savings here and it only aggregates over

00:32:15,370 --> 00:32:25,690
over time and the next thing we have

00:32:21,630 --> 00:32:28,390
that's with 3.1 is now we enable you to

00:32:25,690 --> 00:32:30,430
group all your test runs together it's

00:32:28,390 --> 00:32:32,170
it's like a nice general-purpose way of

00:32:30,430 --> 00:32:34,630
grouping different test runs so for

00:32:32,170 --> 00:32:37,240
example you want to test your main user

00:32:34,630 --> 00:32:39,370
facing front-end app and you want to

00:32:37,240 --> 00:32:41,860
label that as like front-end and then

00:32:39,370 --> 00:32:43,750
you want to test like your admin page or

00:32:41,860 --> 00:32:46,660
your ad in an application then you can

00:32:43,750 --> 00:32:48,700
you know label that as admin so then

00:32:46,660 --> 00:32:52,120
when you go to the dashboard kind of

00:32:48,700 --> 00:32:54,910
like you saw here we use like the names

00:32:52,120 --> 00:32:57,850
2x chrome 1x electron whatever but these

00:32:54,910 --> 00:33:00,490
are the group names we chose and and

00:32:57,850 --> 00:33:02,200
we're able to see them all in one test

00:33:00,490 --> 00:33:05,020
run we group them all together you get

00:33:02,200 --> 00:33:06,640
to see them all in one page and this is

00:33:05,020 --> 00:33:08,980
how like you can associate them all

00:33:06,640 --> 00:33:11,110
together and so if we kind of look at

00:33:08,980 --> 00:33:14,050
these parallelized tests use and this is

00:33:11,110 --> 00:33:16,080
kind of like a timeline view it's very

00:33:14,050 --> 00:33:19,510
similar to like how the dev tools

00:33:16,080 --> 00:33:21,160
waterfall network of you looks like so

00:33:19,510 --> 00:33:23,470
you can see like we ran the action spec

00:33:21,160 --> 00:33:26,040
first and then you know and so on and

00:33:23,470 --> 00:33:28,590
the longest one ran first and as

00:33:26,040 --> 00:33:30,090
go down the duration of the test specs

00:33:28,590 --> 00:33:31,170
get smaller and you can like hover over

00:33:30,090 --> 00:33:34,260
them and get some more information about

00:33:31,170 --> 00:33:36,510
them and then there's this lower number

00:33:34,260 --> 00:33:39,060
that shows you like which machine ran

00:33:36,510 --> 00:33:43,220
this so this tells me that you know this

00:33:39,060 --> 00:33:43,220
spec was ran with machine number two

00:33:43,670 --> 00:33:52,380
cool alright and another thing to know

00:33:50,280 --> 00:33:54,450
about Cypress is that it has fantastic

00:33:52,380 --> 00:33:56,340
document documentation something that

00:33:54,450 --> 00:33:57,780
we're actually very proud of so whenever

00:33:56,340 --> 00:33:59,100
you have any questions it's like the

00:33:57,780 --> 00:34:01,620
first place you shoot you should go to

00:33:59,100 --> 00:34:05,040
has also a great search so you get to

00:34:01,620 --> 00:34:07,590
see everything there and we have

00:34:05,040 --> 00:34:11,370
literally have a command to do anything

00:34:07,590 --> 00:34:14,370
and so refer to that please and then we

00:34:11,370 --> 00:34:15,990
also have a best practices page and

00:34:14,370 --> 00:34:17,610
there's actually a video of the creator

00:34:15,990 --> 00:34:20,040
of Cypress he gave a talk on best

00:34:17,610 --> 00:34:22,020
practices and there's the link for that

00:34:20,040 --> 00:34:23,700
and I'll be sharing these slides so

00:34:22,020 --> 00:34:24,990
that's another one I recommend that you

00:34:23,700 --> 00:34:29,160
know he goes over how to you know

00:34:24,990 --> 00:34:31,230
organize and write your tests and you

00:34:29,160 --> 00:34:33,179
know to conclude you know Cypress you

00:34:31,230 --> 00:34:35,400
know we're completely trying to change

00:34:33,179 --> 00:34:36,390
the status quo of end-to-end testing

00:34:35,400 --> 00:34:38,880
it's something that's been very

00:34:36,390 --> 00:34:41,130
difficult to do properly in the past and

00:34:38,880 --> 00:34:42,600
we're hell-bent on just completely

00:34:41,130 --> 00:34:44,820
changing that and creating the best

00:34:42,600 --> 00:34:48,570
testing experience that this industry

00:34:44,820 --> 00:34:50,700
has ever seen and I'm you know I'm here

00:34:48,570 --> 00:34:52,260
with Randal Kent he's one of the

00:34:50,700 --> 00:34:54,000
cofounders of Cypress so we'll be around

00:34:52,260 --> 00:34:56,550
if you guys want to talk to us and chat

00:34:54,000 --> 00:34:59,540
with us and thank you happy testing and

00:34:56,550 --> 00:34:59,540
go ahead and try out Cypress

00:35:01,060 --> 00:35:03,120

YouTube URL: https://www.youtube.com/watch?v=LqR7t2-U0WA


