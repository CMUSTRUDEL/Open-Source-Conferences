Title: Please don't mock me - Justin Searls - JSConf US 2018
Publication date: 2018-11-11
Playlist: JSConf US 2018
Description: 
	
Captions: 
	00:00:00,320 --> 00:00:03,840
[Music]

00:00:02,070 --> 00:00:05,660
[Applause]

00:00:03,840 --> 00:00:07,410
[Music]

00:00:05,660 --> 00:00:09,280
[Applause]

00:00:07,410 --> 00:00:11,020
[Music]

00:00:09,280 --> 00:00:12,780
[Applause]

00:00:11,020 --> 00:00:15,920
[Music]

00:00:12,780 --> 00:00:15,920
[Applause]

00:00:16,870 --> 00:00:28,700
[Music]

00:00:32,070 --> 00:00:36,430
the title of this presentation is please

00:00:34,390 --> 00:00:38,440
don't mock me that's what my face looked

00:00:36,430 --> 00:00:40,000
like seven years ago my name is Justin I

00:00:38,440 --> 00:00:41,829
go by Searles my last name I'm most

00:00:40,000 --> 00:00:44,350
internet things if you'd like my contact

00:00:41,829 --> 00:00:45,610
info you may npm install' me i am the

00:00:44,350 --> 00:00:46,900
creator and the current maintainer of

00:00:45,610 --> 00:00:48,760
the world's second most popular

00:00:46,900 --> 00:00:50,860
javascript mocking library if you don't

00:00:48,760 --> 00:00:52,960
count jest or jasmine here's the

00:00:50,860 --> 00:00:54,489
download chart that right there is sign

00:00:52,960 --> 00:00:57,100
on the most popular one and that's us

00:00:54,489 --> 00:00:58,600
test double way down there this was a

00:00:57,100 --> 00:01:00,370
big day for us is the day we finally

00:00:58,600 --> 00:01:03,309
caught up but the npm rebooted all their

00:01:00,370 --> 00:01:04,989
servers so we're still fighting you

00:01:03,309 --> 00:01:06,970
could totally help goose our numbers by

00:01:04,989 --> 00:01:09,250
NPM installing testable today all of the

00:01:06,970 --> 00:01:10,840
illustrations that i do will be just

00:01:09,250 --> 00:01:13,570
musing testable by happenstance it's

00:01:10,840 --> 00:01:15,460
what I know best I'm here today to

00:01:13,570 --> 00:01:17,260
convince you that the popularity of a

00:01:15,460 --> 00:01:19,330
JavaScript mocking library doesn't

00:01:17,260 --> 00:01:20,260
matter and you should be saying well

00:01:19,330 --> 00:01:21,750
you're just saying that because your

00:01:20,260 --> 00:01:24,580
thing's not popular and you'd be right

00:01:21,750 --> 00:01:25,600
but additionally I'm here because I've

00:01:24,580 --> 00:01:28,330
been practicing test-driven development

00:01:25,600 --> 00:01:29,740
with mocks for a decade now and I really

00:01:28,330 --> 00:01:31,780
come to believe that literally nobody

00:01:29,740 --> 00:01:33,100
knows how to use mocks and of course

00:01:31,780 --> 00:01:34,299
that's a terrible thing to say I

00:01:33,100 --> 00:01:37,510
shouldn't say that I should say

00:01:34,299 --> 00:01:38,890
figuratively nobody knows and let's

00:01:37,510 --> 00:01:40,630
break it down because there's a group of

00:01:38,890 --> 00:01:42,070
people who can explain how to best mock

00:01:40,630 --> 00:01:43,330
things in any given situation and

00:01:42,070 --> 00:01:45,030
there's another group of people who

00:01:43,330 --> 00:01:46,780
always mock things out consistently

00:01:45,030 --> 00:01:48,400
unfortunately for all of us there's a

00:01:46,780 --> 00:01:50,590
much larger group of people who use

00:01:48,400 --> 00:01:52,900
mocking libraries without belonging to

00:01:50,590 --> 00:01:54,670
either previous group and so you know

00:01:52,900 --> 00:01:56,049
when we initially wrote test double J s

00:01:54,670 --> 00:01:57,369
it was really to like target that

00:01:56,049 --> 00:01:59,110
intersection of developers who already

00:01:57,369 --> 00:02:02,259
knew really how to like make the most of

00:01:59,110 --> 00:02:04,330
their tests and my goal is not just to

00:02:02,259 --> 00:02:05,350
become more popular to grow the

00:02:04,330 --> 00:02:06,520
intersection people who really

00:02:05,350 --> 00:02:08,200
understand and get the most out of their

00:02:06,520 --> 00:02:09,549
mocking library and them as a result the

00:02:08,200 --> 00:02:11,110
most out of their tests so that's what

00:02:09,549 --> 00:02:12,310
we're here to do today but to do that we

00:02:11,110 --> 00:02:14,409
have to define a few terms first

00:02:12,310 --> 00:02:16,450
whenever I say the word subject I'm

00:02:14,409 --> 00:02:18,939
referring to the thing being tested like

00:02:16,450 --> 00:02:20,739
a like an experimental test subject as

00:02:18,939 --> 00:02:22,209
where it gets that name whenever I say

00:02:20,739 --> 00:02:24,280
dependency like if you're testing a

00:02:22,209 --> 00:02:26,380
module anything that that thing import

00:02:24,280 --> 00:02:28,390
so relies upon that is external to it is

00:02:26,380 --> 00:02:29,950
a dependency and whenever I say unit

00:02:28,390 --> 00:02:32,440
test I'm not using a really like fancy

00:02:29,950 --> 00:02:33,520
definition or nuance term really like if

00:02:32,440 --> 00:02:34,840
you're invoking a function and you

00:02:33,520 --> 00:02:36,810
assert certain things come out the other

00:02:34,840 --> 00:02:39,400
end congratulations you have a unit test

00:02:36,810 --> 00:02:41,709
the catch-all term for all types of

00:02:39,400 --> 00:02:43,450
mocks is testing double whether you're

00:02:41,709 --> 00:02:45,520
talking about a stub or a spy or a mock

00:02:43,450 --> 00:02:47,200
or a fake but today I'm gonna like you

00:02:45,520 --> 00:02:48,720
know disregard all of that and just use

00:02:47,200 --> 00:02:52,150
mock because it's the most common

00:02:48,720 --> 00:02:54,190
vernacular coincidentally and sort of

00:02:52,150 --> 00:02:55,810
unfortunately from like a branding

00:02:54,190 --> 00:02:59,530
perspective I'm also from a company

00:02:55,810 --> 00:03:01,510
called test double we are not a mocking

00:02:59,530 --> 00:03:03,580
library manufacturer instead we're

00:03:01,510 --> 00:03:05,440
actually a consultancy and what we do is

00:03:03,580 --> 00:03:06,820
we pair up with teams maybe like yours

00:03:05,440 --> 00:03:09,040
who are looking for additional senior

00:03:06,820 --> 00:03:11,020
developer talent and we join you on

00:03:09,040 --> 00:03:12,370
contract to work alongside you get

00:03:11,020 --> 00:03:14,380
things done and hopefully with an eye to

00:03:12,370 --> 00:03:16,000
helping you make things better along the

00:03:14,380 --> 00:03:18,760
way you can learn more about us online

00:03:16,000 --> 00:03:22,030
this talk has four parts the first part

00:03:18,760 --> 00:03:24,459
is obvious abuses of mocking we're gonna

00:03:22,030 --> 00:03:26,020
move on to the less obvious abuses and

00:03:24,459 --> 00:03:27,730
then we're going to move right along to

00:03:26,020 --> 00:03:29,860
the questionable uses that might have

00:03:27,730 --> 00:03:31,720
some value but people often mess up and

00:03:29,860 --> 00:03:33,430
finally the one good use for mocking

00:03:31,720 --> 00:03:35,680
that I found in you know all this

00:03:33,430 --> 00:03:37,989
practice so first let's start with the

00:03:35,680 --> 00:03:40,269
obvious uses and that is using partial

00:03:37,989 --> 00:03:41,769
mocks so you like mocked out part of a

00:03:40,269 --> 00:03:43,600
thing but left part of the other stuff

00:03:41,769 --> 00:03:46,120
real and to illustrate let's say that

00:03:43,600 --> 00:03:47,799
you run a park ticket kiosk machine

00:03:46,120 --> 00:03:49,959
you know people tap on the screen and

00:03:47,799 --> 00:03:52,209
then you know they say hey I'm 12 years

00:03:49,959 --> 00:03:53,860
old and so we check our inventory module

00:03:52,209 --> 00:03:55,570
to ensure that the child tickets are

00:03:53,860 --> 00:03:57,070
available before we try to sell them if

00:03:55,570 --> 00:03:58,840
they'd said they were 13 we check for

00:03:57,070 --> 00:04:00,430
adult tickets and either way because we

00:03:58,840 --> 00:04:01,660
want to like upsell them during the

00:04:00,430 --> 00:04:03,940
checkout phase we make sure that we have

00:04:01,660 --> 00:04:05,530
Express passes available to sell the

00:04:03,940 --> 00:04:07,150
logic like might be implemented in code

00:04:05,530 --> 00:04:08,170
like this you know if they're under 13

00:04:07,150 --> 00:04:09,730
and sure we have a child ticket

00:04:08,170 --> 00:04:11,440
otherwise ensure we have an adult ticket

00:04:09,730 --> 00:04:12,910
the Express module thing is turned on

00:04:11,440 --> 00:04:14,769
make sure we have those and so on and so

00:04:12,910 --> 00:04:16,120
forth a test for this how would that

00:04:14,769 --> 00:04:17,680
look well we'd create another test

00:04:16,120 --> 00:04:19,720
module over here and we did invoke the

00:04:17,680 --> 00:04:21,070
code just like we normally would but

00:04:19,720 --> 00:04:22,360
what about this insurer child ticket

00:04:21,070 --> 00:04:24,160
because it's like a Boyd function it

00:04:22,360 --> 00:04:25,780
doesn't return anything useful so like

00:04:24,160 --> 00:04:27,400
how would we assert on that well we

00:04:25,780 --> 00:04:29,740
could mock out that method on the

00:04:27,400 --> 00:04:31,540
inventory and then return back and

00:04:29,740 --> 00:04:33,310
verify that that call took place and a

00:04:31,540 --> 00:04:34,960
way to do that we just replace poke a

00:04:33,310 --> 00:04:35,670
hole in reality replace that method and

00:04:34,960 --> 00:04:37,380
then fit

00:04:35,670 --> 00:04:39,210
code path me again we just invoke it

00:04:37,380 --> 00:04:40,440
like normal and then you know testable

00:04:39,210 --> 00:04:41,730
and a lot of mocking libraries come with

00:04:40,440 --> 00:04:44,040
a way to like verify a particular

00:04:41,730 --> 00:04:45,630
invocation happen just how you like it

00:04:44,040 --> 00:04:47,760
for the other code path for the adult

00:04:45,630 --> 00:04:50,100
we'd write another test case we poke a

00:04:47,760 --> 00:04:51,300
second hole in reality and while we're

00:04:50,100 --> 00:04:52,800
there we can make sure we don't call

00:04:51,300 --> 00:04:54,180
that one during the child code bat that

00:04:52,800 --> 00:04:56,400
wouldn't make sense and then mostly just

00:04:54,180 --> 00:04:58,800
copy paste and then update the values we

00:04:56,400 --> 00:04:59,580
can run this test great test passes

00:04:58,800 --> 00:05:02,340
looks good

00:04:59,580 --> 00:05:03,480
fortunately time marches on and you

00:05:02,340 --> 00:05:05,190
didn't do anything but you get a phone

00:05:03,480 --> 00:05:07,020
call that the build is broken and your

00:05:05,190 --> 00:05:08,700
test is the one failing so you run the

00:05:07,020 --> 00:05:11,280
test again and sure enough it's failing

00:05:08,700 --> 00:05:13,530
in two places we're calling the adult

00:05:11,280 --> 00:05:15,990
code the adult inventory insure adult

00:05:13,530 --> 00:05:17,640
thing an extra time when we didn't

00:05:15,990 --> 00:05:18,960
expect to and that doesn't make any

00:05:17,640 --> 00:05:20,280
sense to us cuz we haven't changed this

00:05:18,960 --> 00:05:22,860
code we look at it nothing's different

00:05:20,280 --> 00:05:24,930
here so we look at the only thing that's

00:05:22,860 --> 00:05:26,730
actually external still a real method

00:05:24,930 --> 00:05:27,930
ensure Express pass that's still getting

00:05:26,730 --> 00:05:29,490
called so that means we have to go now

00:05:27,930 --> 00:05:31,050
load up this inventory module and we can

00:05:29,490 --> 00:05:33,510
see the maintainer of that module

00:05:31,050 --> 00:05:34,680
actually added an intrinsic call to

00:05:33,510 --> 00:05:36,000
ensure adult ticket maybe they don't

00:05:34,680 --> 00:05:37,590
want to sell Express passes if they're

00:05:36,000 --> 00:05:38,910
out of stock and that might make sense

00:05:37,590 --> 00:05:40,320
to them but like can we really blame

00:05:38,910 --> 00:05:42,360
them for breaking our tests like were

00:05:40,320 --> 00:05:44,010
they expecting this zombie half real

00:05:42,360 --> 00:05:45,690
half fake inventory module to be

00:05:44,010 --> 00:05:47,910
floating around somewhere probably not

00:05:45,690 --> 00:05:49,680
so we don't have really any recourse

00:05:47,910 --> 00:05:51,900
except to poke a third hole in reality

00:05:49,680 --> 00:05:53,700
and we can make the test work but

00:05:51,900 --> 00:05:55,290
something feels wrong it's almost like

00:05:53,700 --> 00:05:58,710
our ship is sinking and our solution is

00:05:55,290 --> 00:06:00,420
to poke more holes in it so in this case

00:05:58,710 --> 00:06:02,040
you know the test felt good initially

00:06:00,420 --> 00:06:03,510
because it was superficially simple it

00:06:02,040 --> 00:06:05,730
was terse and only said what we cared

00:06:03,510 --> 00:06:07,200
about but underlying that was that we

00:06:05,730 --> 00:06:08,250
didn't really have good experimental

00:06:07,200 --> 00:06:09,960
control from what we're trying to

00:06:08,250 --> 00:06:12,630
specify so instead what I'd recommend

00:06:09,960 --> 00:06:14,580
you do fake out the whole thing that way

00:06:12,630 --> 00:06:16,290
it's really clear what the contract line

00:06:14,580 --> 00:06:18,690
is and then require your thing and test

00:06:16,290 --> 00:06:20,130
as usual in short if you have a

00:06:18,690 --> 00:06:21,570
dependency and it's a totally real

00:06:20,130 --> 00:06:22,920
dependency that's really easy to

00:06:21,570 --> 00:06:25,140
maintain because we're used to invoking

00:06:22,920 --> 00:06:26,790
code that's real if you have code that's

00:06:25,140 --> 00:06:28,770
like a dependency that you've completely

00:06:26,790 --> 00:06:30,780
faked out whether what the tool or not

00:06:28,770 --> 00:06:32,040
at least you have total experimental

00:06:30,780 --> 00:06:33,780
control so the expectations are clear

00:06:32,040 --> 00:06:35,340
but if you have this like dependency

00:06:33,780 --> 00:06:37,590
that's like half real a half fake it's

00:06:35,340 --> 00:06:39,870
going to fail for surprising reasons and

00:06:37,590 --> 00:06:41,280
you're gonna have a bad time the second

00:06:39,870 --> 00:06:43,890
obvious abuse that I see of mocking is

00:06:41,280 --> 00:06:45,180
people partially mocking out the actual

00:06:43,890 --> 00:06:47,580
thing the subject the thing that they're

00:06:45,180 --> 00:06:49,080
testing this advice is short please

00:06:47,580 --> 00:06:50,849
don't fake out part of the thing

00:06:49,080 --> 00:06:52,379
that you're testing you know I get

00:06:50,849 --> 00:06:54,210
pushed back sometimes like oh well we

00:06:52,379 --> 00:06:55,259
have a very very large module it's got

00:06:54,210 --> 00:06:56,789
all these methods and they call each

00:06:55,259 --> 00:06:58,259
other and there's just no other way to

00:06:56,789 --> 00:06:59,939
get coverage of this little thing right

00:06:58,259 --> 00:07:01,139
here so we need to poke holes here and

00:06:59,939 --> 00:07:02,699
there and there to get our test running

00:07:01,139 --> 00:07:04,139
a problem with that is like now you have

00:07:02,699 --> 00:07:05,669
two problems you have a big thing that

00:07:04,139 --> 00:07:09,180
nobody understands and tests of it that

00:07:05,669 --> 00:07:11,490
nobody trusts so please don't do that

00:07:09,180 --> 00:07:13,349
third obvious thing that we see is when

00:07:11,490 --> 00:07:15,419
people replace some of a dependent of

00:07:13,349 --> 00:07:17,219
the dependencies under tests but not all

00:07:15,419 --> 00:07:20,189
of them for a given subject and so to

00:07:17,219 --> 00:07:22,469
explain I'd like to use a word over

00:07:20,189 --> 00:07:23,610
mocking if you've heard this term I

00:07:22,469 --> 00:07:25,349
think it's kind of like a prevailing

00:07:23,610 --> 00:07:27,240
ideology of how people think about

00:07:25,349 --> 00:07:29,340
mocking and tests as if it's an

00:07:27,240 --> 00:07:30,150
affordance to be moderated like you have

00:07:29,340 --> 00:07:31,680
this manometer

00:07:30,150 --> 00:07:33,539
that's like slowly building up as you

00:07:31,680 --> 00:07:35,340
mock things but watch out because you

00:07:33,539 --> 00:07:36,810
don't want to over mock you've crossed

00:07:35,340 --> 00:07:37,050
some invisible threshold so don't do

00:07:36,810 --> 00:07:39,060
that

00:07:37,050 --> 00:07:40,259
and it's a strange way to think about it

00:07:39,060 --> 00:07:43,169
so let's talk about it let's say that

00:07:40,259 --> 00:07:45,120
you write a system that handles airplane

00:07:43,169 --> 00:07:47,490
seat reservations and your great your

00:07:45,120 --> 00:07:48,509
pair programming together at work and so

00:07:47,490 --> 00:07:50,370
you think about the different

00:07:48,509 --> 00:07:52,379
dependencies that you need to implement

00:07:50,370 --> 00:07:53,580
this subject that's under test and then

00:07:52,379 --> 00:07:55,560
you talk about the different test cases

00:07:53,580 --> 00:07:57,690
that you need to implement and because

00:07:55,560 --> 00:07:59,310
you're pairing you try to normalize on

00:07:57,690 --> 00:08:00,659
approach and so you know person on the

00:07:59,310 --> 00:08:02,069
right says hey I like mocking out my

00:08:00,659 --> 00:08:03,690
dependency isn't the person on the left

00:08:02,069 --> 00:08:05,460
you know doesn't like mocking tries to

00:08:03,690 --> 00:08:06,839
avoid so you know you're pairing so what

00:08:05,460 --> 00:08:10,050
do you do you compromise and just mock

00:08:06,839 --> 00:08:12,389
out half the things that is not a laugh

00:08:10,050 --> 00:08:14,940
line that's just how people really do

00:08:12,389 --> 00:08:17,039
this so you might got half the things

00:08:14,940 --> 00:08:18,719
and as far as this ideology of mock

00:08:17,039 --> 00:08:22,020
commoners ago you're looking good you're

00:08:18,719 --> 00:08:23,550
46 percent or whatever but time passes

00:08:22,020 --> 00:08:25,500
and you get another call because the

00:08:23,550 --> 00:08:27,240
build is failing and it's your fault and

00:08:25,500 --> 00:08:29,129
so you can see here you know request see

00:08:27,240 --> 00:08:30,779
our module is calling this seat map with

00:08:29,129 --> 00:08:32,789
a particular address and then it gives

00:08:30,779 --> 00:08:34,140
the seat object back and you can see

00:08:32,789 --> 00:08:35,430
it's like a string right well the

00:08:34,140 --> 00:08:37,199
problem is that they've updated that

00:08:35,430 --> 00:08:39,779
contract and now they expect it to be a

00:08:37,199 --> 00:08:41,849
- arised address and so our test blew up

00:08:39,779 --> 00:08:43,260
well the person on the right who prefers

00:08:41,849 --> 00:08:44,730
to isolate their dependency says hey

00:08:43,260 --> 00:08:46,920
this failure has nothing to do with the

00:08:44,730 --> 00:08:48,510
subject and you know she'd be right like

00:08:46,920 --> 00:08:50,310
you see the seat number is just kind of

00:08:48,510 --> 00:08:52,260
passed in like a baton we don't do any

00:08:50,310 --> 00:08:54,329
of the string manipulation stuff here

00:08:52,260 --> 00:08:57,120
and so she changes that real dependency

00:08:54,329 --> 00:08:59,279
to a fake dependency fixes the test now

00:08:57,120 --> 00:09:01,470
more time passes but this time worse

00:08:59,279 --> 00:09:02,980
thing production is broken so let's dig

00:09:01,470 --> 00:09:05,050
in you know here we have

00:09:02,980 --> 00:09:06,459
this thing that actually fires the book

00:09:05,050 --> 00:09:08,680
seat and for obvious reasons we've

00:09:06,459 --> 00:09:09,970
knocked that out and you can see if it

00:09:08,680 --> 00:09:12,130
takes these three arguments well the

00:09:09,970 --> 00:09:13,510
maintainer of that transposed the second

00:09:12,130 --> 00:09:15,910
and third argument for whatever reason

00:09:13,510 --> 00:09:18,760
and our test continued to pass it was a

00:09:15,910 --> 00:09:20,110
fantasy green test and as a result

00:09:18,760 --> 00:09:21,670
production blew up because the build was

00:09:20,110 --> 00:09:22,990
Green now the person on the Left who

00:09:21,670 --> 00:09:24,070
hates mocking would point out hey this

00:09:22,990 --> 00:09:25,600
wouldn't have happened if we hadn't

00:09:24,070 --> 00:09:27,639
knocked this thing out and he's right -

00:09:25,600 --> 00:09:29,139
so he goes into the test and replaces

00:09:27,639 --> 00:09:30,940
the fake thing with the real thing and

00:09:29,139 --> 00:09:32,050
gets you back to passing and I don't

00:09:30,940 --> 00:09:34,750
think this is what people meant by

00:09:32,050 --> 00:09:36,130
ping-pong pier programming but this kind

00:09:34,750 --> 00:09:38,079
of passive-aggressive back-and-forth is

00:09:36,130 --> 00:09:39,730
exactly what you get people don't know

00:09:38,079 --> 00:09:42,279
why they're using a particular tool for

00:09:39,730 --> 00:09:44,889
a given job instead and this is kind of

00:09:42,279 --> 00:09:48,160
maybe surprising to hear like a test

00:09:44,889 --> 00:09:49,839
that never fails is a bad test because

00:09:48,160 --> 00:09:52,360
it hasn't told you anything it's just

00:09:49,839 --> 00:09:55,660
consumed countless cycles of cloud cpu

00:09:52,360 --> 00:09:57,160
time in your CI server instead you know

00:09:55,660 --> 00:09:58,779
it's gonna fail there hopefully it'll

00:09:57,160 --> 00:10:00,610
fail so think at the time that you're

00:09:58,779 --> 00:10:02,230
writing it what should failure mean for

00:10:00,610 --> 00:10:04,329
this test and design that instead of

00:10:02,230 --> 00:10:05,649
like how you actually write tests for

00:10:04,329 --> 00:10:07,329
example if you're writing a unit test

00:10:05,649 --> 00:10:09,850
it's all wired up all those dependencies

00:10:07,329 --> 00:10:11,560
are real sure nothing is mocked but

00:10:09,850 --> 00:10:13,569
let's think about like when it fails and

00:10:11,560 --> 00:10:15,130
you know intuitively you can say well

00:10:13,569 --> 00:10:17,350
it'll fail whenever the subject or its

00:10:15,130 --> 00:10:19,510
dependencies logics changes that's great

00:10:17,350 --> 00:10:21,670
it encourages you to be mindful though

00:10:19,510 --> 00:10:25,240
of what I call redundant code coverage

00:10:21,670 --> 00:10:27,519
and that is if you have a module that's

00:10:25,240 --> 00:10:29,500
depended by 35 different things and you

00:10:27,519 --> 00:10:30,639
change that module you don't want to set

00:10:29,500 --> 00:10:32,829
yourself up for a situation where you

00:10:30,639 --> 00:10:35,500
have to now go update 36 different tests

00:10:32,829 --> 00:10:37,360
so be thinking about that now if we have

00:10:35,500 --> 00:10:39,519
isolated unit tests where all the things

00:10:37,360 --> 00:10:42,010
are faked out 100% mocks or our my

00:10:39,519 --> 00:10:44,019
comedy readings are beeping loudly or

00:10:42,010 --> 00:10:45,399
something but when it fails we have a

00:10:44,019 --> 00:10:46,990
clear definition of what failure means

00:10:45,399 --> 00:10:48,730
it means in the contract between the

00:10:46,990 --> 00:10:50,470
subject and its dependency has changed

00:10:48,730 --> 00:10:52,480
and so it should encourage us though to

00:10:50,470 --> 00:10:54,370
like be mindful that like we probably

00:10:52,480 --> 00:10:55,660
want to have another smoke test some

00:10:54,370 --> 00:10:56,709
integrated thing that just make sure

00:10:55,660 --> 00:10:58,810
that when everything is plugged together

00:10:56,709 --> 00:11:01,269
the app basically seems to work so

00:10:58,810 --> 00:11:02,470
that's important too but what do we what

00:11:01,269 --> 00:11:03,579
do we do in this case we're half the

00:11:02,470 --> 00:11:05,470
things are real and half the things are

00:11:03,579 --> 00:11:06,880
fake you know it looks good under the

00:11:05,470 --> 00:11:09,040
prevailing ideology of like you know

00:11:06,880 --> 00:11:11,319
mocking is moderation but when does it

00:11:09,040 --> 00:11:13,600
fail well it can fail for like multiple

00:11:11,319 --> 00:11:15,220
numerous nonsensical reasons and so it

00:11:13,600 --> 00:11:16,200
should encourage us do not write just

00:11:15,220 --> 00:11:18,180
like this so

00:11:16,200 --> 00:11:20,010
please don't do that and so instead of

00:11:18,180 --> 00:11:22,230
critiquing how much mocking you see in

00:11:20,010 --> 00:11:23,820
the codebase critique why people are

00:11:22,230 --> 00:11:25,590
using box at all like what's the broader

00:11:23,820 --> 00:11:27,390
strategy here and I guarantee you'll

00:11:25,590 --> 00:11:28,620
have more productive discussions the

00:11:27,390 --> 00:11:30,690
common thread between all three of these

00:11:28,620 --> 00:11:33,720
things is that I think that you know

00:11:30,690 --> 00:11:36,120
just we all tend to have this sensation

00:11:33,720 --> 00:11:37,020
that like realism is very important in

00:11:36,120 --> 00:11:38,160
testing because we want to make sure

00:11:37,020 --> 00:11:40,220
things are gonna work and they're not

00:11:38,160 --> 00:11:44,040
gonna explode but that can actually

00:11:40,220 --> 00:11:45,750
cause problems where we forget that what

00:11:44,040 --> 00:11:47,370
testing is really about is like setting

00:11:45,750 --> 00:11:48,570
up clear experimental control to get

00:11:47,370 --> 00:11:49,830
consistent results that tell us

00:11:48,570 --> 00:11:52,200
something that we need to know and

00:11:49,830 --> 00:11:53,880
that's important to all right so let's

00:11:52,200 --> 00:11:55,800
move on to like the less obvious abuses

00:11:53,880 --> 00:11:57,960
and that's I want to start with talking

00:11:55,800 --> 00:12:00,330
about mocking out third-party libraries

00:11:57,960 --> 00:12:01,800
so say that you depend on an awesome Lib

00:12:00,330 --> 00:12:03,540
it's an NPM package and there's

00:12:01,800 --> 00:12:05,730
references to it all over your codebase

00:12:03,540 --> 00:12:08,040
it's got a kind of funky API though

00:12:05,730 --> 00:12:09,810
first you call it and then you pass it a

00:12:08,040 --> 00:12:11,700
config file so we read that from disk

00:12:09,810 --> 00:12:13,590
that returns an instance of the library

00:12:11,700 --> 00:12:14,910
that we can then call an optimized

00:12:13,590 --> 00:12:16,920
method on and we get all these really

00:12:14,910 --> 00:12:19,320
cool interpreter hints that we can use

00:12:16,920 --> 00:12:20,820
to speed up our code problem with that

00:12:19,320 --> 00:12:23,040
is that song and dance is kind of weird

00:12:20,820 --> 00:12:25,560
and so it's really hard to mock awesome

00:12:23,040 --> 00:12:27,450
live and here's like how you might you

00:12:25,560 --> 00:12:28,680
know try to go about it you fake up the

00:12:27,450 --> 00:12:30,510
file system and then you fake out

00:12:28,680 --> 00:12:32,070
awesome Lib and then you create a an

00:12:30,510 --> 00:12:33,870
artificial instance to represent

00:12:32,070 --> 00:12:35,640
creating one then you fake out the file

00:12:33,870 --> 00:12:36,630
system to say hey if we pass the right

00:12:35,640 --> 00:12:38,280
path I'll give you something to

00:12:36,630 --> 00:12:40,050
represent the config and then when we

00:12:38,280 --> 00:12:41,310
get the config will return that instance

00:12:40,050 --> 00:12:42,840
and then when you call optimize on the

00:12:41,310 --> 00:12:44,520
instance we'll call back with some hints

00:12:42,840 --> 00:12:45,720
that's a lot of setup and so you'd be

00:12:44,520 --> 00:12:47,430
right to look at that and get really

00:12:45,720 --> 00:12:48,960
frustrated how much you know mocking

00:12:47,430 --> 00:12:50,220
logic you have at the top of your test

00:12:48,960 --> 00:12:52,770
and a lot of people complain about that

00:12:50,220 --> 00:12:53,970
but the root cause here has nothing to

00:12:52,770 --> 00:12:55,860
do with the mocking library the root

00:12:53,970 --> 00:12:58,530
cause is that that was hard to use code

00:12:55,860 --> 00:13:00,180
and that like mocking libraries job is

00:12:58,530 --> 00:13:02,610
to specify interactions you have with

00:13:00,180 --> 00:13:04,170
public API s and so what the mocking

00:13:02,610 --> 00:13:07,200
library is doing is it screaming at you

00:13:04,170 --> 00:13:09,060
that this is a bad design so instead we

00:13:07,200 --> 00:13:10,740
just like force it and so we like copy

00:13:09,060 --> 00:13:14,070
paste that set up across all of our

00:13:10,740 --> 00:13:16,080
tests and and you know JavaScript we

00:13:14,070 --> 00:13:17,670
march along very quickly new major

00:13:16,080 --> 00:13:19,110
update is announced to Awesome Lib and

00:13:17,670 --> 00:13:20,460
we're really excited that maybe they'll

00:13:19,110 --> 00:13:23,330
fix this for us but all they did was

00:13:20,460 --> 00:13:26,010
change the callbacks to promises and so

00:13:23,330 --> 00:13:28,260
now we have to go over here and J and

00:13:26,010 --> 00:13:28,480
just add then resolve so that these are

00:13:28,260 --> 00:13:29,980
not

00:13:28,480 --> 00:13:32,649
promise resolutions and we have to do it

00:13:29,980 --> 00:13:34,990
in 18 different places javascript

00:13:32,649 --> 00:13:37,209
marches on and nobody uses awesome lib

00:13:34,990 --> 00:13:39,550
anymore we find out that like the new

00:13:37,209 --> 00:13:41,199
hotness is mind blow and and everyone's

00:13:39,550 --> 00:13:43,149
pressuring us to go and switch as fast

00:13:41,199 --> 00:13:44,680
as possible and so now we're just angry

00:13:43,149 --> 00:13:46,930
because we have all this pain festering

00:13:44,680 --> 00:13:48,820
throughout our system what I found is

00:13:46,930 --> 00:13:50,440
that like if code is hard to mock and

00:13:48,820 --> 00:13:51,880
it's something that you own it's a

00:13:50,440 --> 00:13:53,980
module that's in your codebase and you

00:13:51,880 --> 00:13:56,010
can readily change it that that feedback

00:13:53,980 --> 00:13:58,570
is fantastic because the remedy has

00:13:56,010 --> 00:13:59,949
improved the code design but if it's a

00:13:58,570 --> 00:14:01,089
third party thing that you don't control

00:13:59,949 --> 00:14:02,170
what are you gonna do like send a pull

00:14:01,089 --> 00:14:05,019
request and ask them to change their

00:14:02,170 --> 00:14:06,730
public API adjust for you no it's it's

00:14:05,019 --> 00:14:09,040
not gonna work out so well it's it's an

00:14:06,730 --> 00:14:10,839
example of useless pain and how people

00:14:09,040 --> 00:14:12,820
go about testing is full of useless pain

00:14:10,839 --> 00:14:14,170
so be on the lookout because it's money

00:14:12,820 --> 00:14:16,000
out the window so if you care about

00:14:14,170 --> 00:14:17,290
testing you need to minimize the amount

00:14:16,000 --> 00:14:18,970
of drudgery or else people are gonna

00:14:17,290 --> 00:14:21,579
come to value at less and view it as a

00:14:18,970 --> 00:14:22,750
waste of time so instead of mocking out

00:14:21,579 --> 00:14:26,230
third-party things I write little

00:14:22,750 --> 00:14:27,579
wrappers for them instead an example of

00:14:26,230 --> 00:14:29,230
this one might here be here just as

00:14:27,579 --> 00:14:31,060
Questor it off to the periphery of my

00:14:29,230 --> 00:14:32,620
application this is the only time I'm

00:14:31,060 --> 00:14:34,540
ever going to require awesome live in my

00:14:32,620 --> 00:14:37,089
app and instead I'm going to expose this

00:14:34,540 --> 00:14:38,980
simple awesome callback API that I wish

00:14:37,089 --> 00:14:40,589
that it did and sweep under the rug all

00:14:38,980 --> 00:14:43,779
the other complexity that I have to have

00:14:40,589 --> 00:14:45,399
additionally doing this by habit gives

00:14:43,779 --> 00:14:47,290
you some like additional mental space to

00:14:45,399 --> 00:14:49,000
think hey maybe we should be caching

00:14:47,290 --> 00:14:51,160
this file a read that's kind of silly or

00:14:49,000 --> 00:14:52,690
you know we could translate the awesome

00:14:51,160 --> 00:14:54,310
Lib errors into something that's like

00:14:52,690 --> 00:14:55,990
more concordant with like how we write

00:14:54,310 --> 00:14:57,940
error handling for the rest of the

00:14:55,990 --> 00:15:00,910
application and you can just do all that

00:14:57,940 --> 00:15:02,260
there additionally all that test setup

00:15:00,910 --> 00:15:03,370
you know that gets a lot simpler right

00:15:02,260 --> 00:15:04,660
because now we're just faking out

00:15:03,370 --> 00:15:07,420
something that we understand that's

00:15:04,660 --> 00:15:09,730
simple to use and create so much extra

00:15:07,420 --> 00:15:11,380
room in each test to be thinking about

00:15:09,730 --> 00:15:13,060
like what am I actually trying to

00:15:11,380 --> 00:15:15,220
specify instead of getting distracted in

00:15:13,060 --> 00:15:17,199
all sorts of mocking related rabbit

00:15:15,220 --> 00:15:19,149
holes and you don't have to worry about

00:15:17,199 --> 00:15:20,199
writing unit tests of these things for

00:15:19,149 --> 00:15:21,699
the same reason you're not going to

00:15:20,199 --> 00:15:23,110
improve their design just trust the

00:15:21,699 --> 00:15:25,839
framework to work because otherwise this

00:15:23,110 --> 00:15:27,639
is money out the window then the next

00:15:25,839 --> 00:15:29,230
lesser of the obvious things that I see

00:15:27,639 --> 00:15:31,510
folks do is when they read a lot of code

00:15:29,230 --> 00:15:32,980
that tangles up logic with delegation

00:15:31,510 --> 00:15:34,779
let's explain so let's say that you own

00:15:32,980 --> 00:15:36,339
a fencing studio and you rent out swords

00:15:34,779 --> 00:15:37,930
and your boss says hey how many swords

00:15:36,339 --> 00:15:39,040
are we gonna have on Tuesday and so

00:15:37,930 --> 00:15:40,839
instead of like being like a normal

00:15:39,040 --> 00:15:41,880
person you write it function that takes

00:15:40,839 --> 00:15:44,830
in a date

00:15:41,880 --> 00:15:46,060
you call a network requests to fetch out

00:15:44,830 --> 00:15:47,950
all the rentals that are currently

00:15:46,060 --> 00:15:49,390
outstanding you get those back and then

00:15:47,950 --> 00:15:50,860
you filter those down first by

00:15:49,390 --> 00:15:52,030
calculating the duration of that rental

00:15:50,860 --> 00:15:53,920
and then figuring out when did the

00:15:52,030 --> 00:15:55,780
rental start so that I can figure out

00:15:53,920 --> 00:15:57,970
what's going to be do then plucking the

00:15:55,780 --> 00:15:59,530
swords out of it now you also have an

00:15:57,970 --> 00:16:01,180
inventory the stuff that's not currently

00:15:59,530 --> 00:16:02,470
being rented so you call that - you get

00:16:01,180 --> 00:16:03,610
the inventory back you can catenate the

00:16:02,470 --> 00:16:05,470
- and then those are the swords that

00:16:03,610 --> 00:16:07,900
you're gonna get back so you can report

00:16:05,470 --> 00:16:09,820
success how might you test this well you

00:16:07,900 --> 00:16:11,350
start by creating a fake rental object

00:16:09,820 --> 00:16:13,570
properly that has the right properties

00:16:11,350 --> 00:16:14,920
on it you stub that out so that fetch

00:16:13,570 --> 00:16:16,930
rentals calls back with it when it's

00:16:14,920 --> 00:16:18,760
invoked you step out the inventory as

00:16:16,930 --> 00:16:20,380
well maybe with a second sword and then

00:16:18,760 --> 00:16:22,630
with a very particular date argument you

00:16:20,380 --> 00:16:23,980
call the subject under test and you

00:16:22,630 --> 00:16:25,390
assert that like you get the two swords

00:16:23,980 --> 00:16:26,950
that you expect and this works and you

00:16:25,390 --> 00:16:29,380
have some other test cases - so it's a

00:16:26,950 --> 00:16:30,940
little complicated time passes though

00:16:29,380 --> 00:16:32,830
it's working fine and somebody on the

00:16:30,940 --> 00:16:34,690
team points up hey you know we can speed

00:16:32,830 --> 00:16:36,640
this code path up now because we have a

00:16:34,690 --> 00:16:38,200
primed synchronous cache that you can

00:16:36,640 --> 00:16:39,460
call you can go into the code and you

00:16:38,200 --> 00:16:41,470
can eliminate one of these network

00:16:39,460 --> 00:16:43,060
requests so you just call that instead

00:16:41,470 --> 00:16:45,610
I've done this and now that looks good

00:16:43,060 --> 00:16:48,280
the code is faster but of course what it

00:16:45,610 --> 00:16:50,800
broke the test so we're we're frustrated

00:16:48,280 --> 00:16:52,420
by that if you look here yes sure enough

00:16:50,800 --> 00:16:54,490
we are we are mocking out this other

00:16:52,420 --> 00:16:55,900
thing for that part of the behavior it's

00:16:54,490 --> 00:16:57,280
not going to do what we want the test is

00:16:55,900 --> 00:16:58,870
gonna break and somebody on the team

00:16:57,280 --> 00:17:00,400
might point out like oh well the test is

00:16:58,870 --> 00:17:01,960
coupled to the implementation this is

00:17:00,400 --> 00:17:03,760
very bad this is a common criticism

00:17:01,960 --> 00:17:05,470
against mocking but I don't think it's

00:17:03,760 --> 00:17:07,780
necessarily bad I think it's a little

00:17:05,470 --> 00:17:09,580
bit of naive criticism because like we

00:17:07,780 --> 00:17:12,160
write a test and then we assume that

00:17:09,580 --> 00:17:14,230
it's going to save us in 800 different

00:17:12,160 --> 00:17:16,360
types of change that the system might

00:17:14,230 --> 00:17:17,860
undergo but like at most it can help us

00:17:16,360 --> 00:17:20,230
from one or two so when you're writing

00:17:17,860 --> 00:17:22,959
tests think about like you know this

00:17:20,230 --> 00:17:25,240
test is going to make me safe for a

00:17:22,959 --> 00:17:27,100
certain kind of change maybe but design

00:17:25,240 --> 00:17:28,990
that upfront so for example if you have

00:17:27,100 --> 00:17:30,430
your writing test or something it

00:17:28,990 --> 00:17:32,470
doesn't have any dependencies it's

00:17:30,430 --> 00:17:34,390
probably a pure function specifying

00:17:32,470 --> 00:17:36,730
logic and that means that if the rules

00:17:34,390 --> 00:17:38,440
to that logic change the tests need to

00:17:36,730 --> 00:17:40,090
change if you're just refactoring from a

00:17:38,440 --> 00:17:41,890
for loop to a for each or something

00:17:40,090 --> 00:17:43,930
you're probably going to be fine but

00:17:41,890 --> 00:17:45,760
like if you're adding a grace period to

00:17:43,930 --> 00:17:47,050
these rental durations the rules of the

00:17:45,760 --> 00:17:48,760
game change so you have to update all of

00:17:47,050 --> 00:17:51,610
your code examples it is coupled to the

00:17:48,760 --> 00:17:53,530
implementation in that way so if you

00:17:51,610 --> 00:17:54,190
have like another test though and you're

00:17:53,530 --> 00:17:56,529
mocking all

00:17:54,190 --> 00:17:59,080
dependencies of the subject what it does

00:17:56,529 --> 00:18:00,460
is it specifies those relationships and

00:17:59,080 --> 00:18:02,289
so when the contracts change the test

00:18:00,460 --> 00:18:03,759
needs to change the previous example

00:18:02,289 --> 00:18:05,799
like if the duration has a grace period

00:18:03,759 --> 00:18:08,110
one of its dependencies that's internal

00:18:05,799 --> 00:18:09,399
to that that's that's arm's length we

00:18:08,110 --> 00:18:11,289
don't have to worry about that this test

00:18:09,399 --> 00:18:13,539
should keep passing but if we literally

00:18:11,289 --> 00:18:15,190
change what we depend on to do our job

00:18:13,539 --> 00:18:18,490
of course that just is going to change

00:18:15,190 --> 00:18:20,080
gonna break and you need to fix it where

00:18:18,490 --> 00:18:22,360
this really flies off the rails is when

00:18:20,080 --> 00:18:24,519
people are right subjects that have you

00:18:22,360 --> 00:18:26,409
know both the mocking out dependencies

00:18:24,519 --> 00:18:28,809
and also implement some amount of logic

00:18:26,409 --> 00:18:31,179
it gets really painful so to illustrate

00:18:28,809 --> 00:18:32,710
our own example does this right we have

00:18:31,179 --> 00:18:33,940
this current inventory we're calling

00:18:32,710 --> 00:18:35,620
this fetch rental service that we're

00:18:33,940 --> 00:18:37,539
calling but then we kind of like a joint

00:18:35,620 --> 00:18:40,480
on to that this responsibility to like

00:18:37,539 --> 00:18:41,769
calculate windswords or do and you can

00:18:40,480 --> 00:18:43,659
see it right here it screams off the

00:18:41,769 --> 00:18:45,129
page if you know what to look for you

00:18:43,659 --> 00:18:46,840
know I've got network requests here and

00:18:45,129 --> 00:18:48,009
I got all this logic and it's same thing

00:18:46,840 --> 00:18:49,360
in the test I've got the network

00:18:48,009 --> 00:18:51,549
requests here and then all this logic

00:18:49,360 --> 00:18:52,659
floating around and what this is what

00:18:51,549 --> 00:18:54,340
we've called it like if we're given a

00:18:52,659 --> 00:18:56,139
design critique of this module we'd say

00:18:54,340 --> 00:18:58,029
that this is mixed levels of abstraction

00:18:56,139 --> 00:18:59,590
because two of the things that we're

00:18:58,029 --> 00:19:00,850
doing are happening with like business

00:18:59,590 --> 00:19:04,120
domain objects that speak in our

00:19:00,850 --> 00:19:05,919
language like like like peers throughout

00:19:04,120 --> 00:19:07,570
the app but then we're also dealing with

00:19:05,919 --> 00:19:09,279
all this primitive gunk we're

00:19:07,570 --> 00:19:11,110
implementing logic and multiplying

00:19:09,279 --> 00:19:13,779
primitive you know values like integers

00:19:11,110 --> 00:19:15,129
and such and that's a classic example of

00:19:13,779 --> 00:19:16,419
a code smell and the way that you'd

00:19:15,129 --> 00:19:18,730
remediated that code smell is by

00:19:16,419 --> 00:19:20,019
spinning off that third thing so that

00:19:18,730 --> 00:19:21,700
sword stock now has a single

00:19:20,019 --> 00:19:23,080
responsibility its job is to break up

00:19:21,700 --> 00:19:25,470
the work into these three other parts

00:19:23,080 --> 00:19:28,450
and let them do the real heavy lifting

00:19:25,470 --> 00:19:30,159
and and that thing that we just spun off

00:19:28,450 --> 00:19:31,480
is now a lot easier to maintain because

00:19:30,159 --> 00:19:33,009
it just takes in a couple arguments

00:19:31,480 --> 00:19:35,139
spits out an outcome it's a pure

00:19:33,009 --> 00:19:37,269
function really easy to test really easy

00:19:35,139 --> 00:19:39,669
to maintain so if a test is specifying

00:19:37,269 --> 00:19:41,440
pure logic there's no easier test to

00:19:39,669 --> 00:19:43,419
write inputs and outputs there's there's

00:19:41,440 --> 00:19:45,100
nothing else to deal with if it tests

00:19:43,419 --> 00:19:47,139
specifies relationships and only

00:19:45,100 --> 00:19:48,909
relationships those are completely under

00:19:47,139 --> 00:19:50,679
your control they tend to not change

00:19:48,909 --> 00:19:52,059
unless the contract changes but if it

00:19:50,679 --> 00:19:53,649
specifies both you're gonna have really

00:19:52,059 --> 00:19:55,210
really long test cases that change for

00:19:53,649 --> 00:19:57,399
all sorts of different reasons it's more

00:19:55,210 --> 00:19:59,649
useless pain so if you need a sticky

00:19:57,399 --> 00:20:02,740
note to like put on your team wall or

00:19:59,649 --> 00:20:04,869
something I encourage everyone to write

00:20:02,740 --> 00:20:06,900
functions that either do something or

00:20:04,869 --> 00:20:10,380
delegate to someone but

00:20:06,900 --> 00:20:12,780
both all right the last lesser of the

00:20:10,380 --> 00:20:14,490
obvious things that I see people do is

00:20:12,780 --> 00:20:16,920
when they mock dependencies like halfway

00:20:14,490 --> 00:20:19,290
down the call stack so what I mean by

00:20:16,920 --> 00:20:21,210
that let's take that we have writing a

00:20:19,290 --> 00:20:22,890
system to handle travel expenses

00:20:21,210 --> 00:20:24,540
so we have our invoicing app and then

00:20:22,890 --> 00:20:26,670
we're communicating via HTTP to get some

00:20:24,540 --> 00:20:28,620
JSON back from our expense system and so

00:20:26,670 --> 00:20:30,060
we have a method send invoice which

00:20:28,620 --> 00:20:32,040
calls build invoice which calls to

00:20:30,060 --> 00:20:33,510
filter the approved ones should groups

00:20:32,040 --> 00:20:35,190
in buy purchase order and then loads the

00:20:33,510 --> 00:20:36,960
expenses and then that breaks out to

00:20:35,190 --> 00:20:38,760
HTTP to like load them from the expense

00:20:36,960 --> 00:20:40,530
system and then all the way back up the

00:20:38,760 --> 00:20:42,840
chain with this intermediary D or data

00:20:40,530 --> 00:20:44,250
models for those actors so you might ask

00:20:42,840 --> 00:20:46,110
hey I'm writing a test to this send

00:20:44,250 --> 00:20:48,330
invoice thing which layer do I mock it

00:20:46,110 --> 00:20:49,230
it's a good question so what my answer

00:20:48,330 --> 00:20:49,590
depends on what kind of test you're

00:20:49,230 --> 00:20:51,030
writing

00:20:49,590 --> 00:20:52,500
so if you're writing an isolated unit

00:20:51,030 --> 00:20:55,350
test as you develop it I would always

00:20:52,500 --> 00:20:56,520
say depend not out the direct dependency

00:20:55,350 --> 00:20:58,230
because you're gonna get designed

00:20:56,520 --> 00:20:59,910
feedback what it's like to invoke that

00:20:58,230 --> 00:21:01,710
thing and the test data is going to be

00:20:59,910 --> 00:21:03,270
completely minimal so the contract

00:21:01,710 --> 00:21:04,980
between those two things is really clear

00:21:03,270 --> 00:21:06,630
if you're trying to get regression

00:21:04,980 --> 00:21:08,070
safety just make sure that things work I

00:21:06,630 --> 00:21:10,380
would either mock out nothing or say

00:21:08,070 --> 00:21:11,850
mock out only like external system so

00:21:10,380 --> 00:21:14,430
that you're using the system like a real

00:21:11,850 --> 00:21:16,590
user would benefits here are that like

00:21:14,430 --> 00:21:18,300
your test data is going to be

00:21:16,590 --> 00:21:19,980
representative of real life they're

00:21:18,300 --> 00:21:22,380
probably gonna like look like HTTP

00:21:19,980 --> 00:21:23,790
fixtures and additionally if it breaks

00:21:22,380 --> 00:21:26,250
you know what that means it doesn't work

00:21:23,790 --> 00:21:27,750
anymore but I see a lot of teams reach

00:21:26,250 --> 00:21:29,430
for the convenience of just mocking it

00:21:27,750 --> 00:21:30,900
whatever arbitrary depth comes to mind

00:21:29,430 --> 00:21:32,970
and this is kind of the worst of both

00:21:30,900 --> 00:21:34,260
worlds because when it fails it doesn't

00:21:32,970 --> 00:21:35,340
mean anything other than somebody might

00:21:34,260 --> 00:21:37,830
have changed something and now you have

00:21:35,340 --> 00:21:39,180
to update this test or like the the data

00:21:37,830 --> 00:21:40,920
that you're loading the fixtures are all

00:21:39,180 --> 00:21:42,570
kind of coupled to that thing and so

00:21:40,920 --> 00:21:44,100
your data could fall out of sync at any

00:21:42,570 --> 00:21:45,930
moment and yet this is probably like 80%

00:21:44,100 --> 00:21:47,280
of the way that I see people knocking

00:21:45,930 --> 00:21:51,210
out data providers and their JavaScript

00:21:47,280 --> 00:21:52,920
apps so to summarize if you mock out a

00:21:51,210 --> 00:21:54,360
direct dependency the failure is

00:21:52,920 --> 00:21:55,110
meaningful because it means the contract

00:21:54,360 --> 00:21:57,180
had changed

00:21:55,110 --> 00:21:59,310
if you mock out an external system again

00:21:57,180 --> 00:22:01,050
it's a meaningful failure it means your

00:21:59,310 --> 00:22:02,490
thing is broken but if you mock out this

00:22:01,050 --> 00:22:03,840
intermediate layer it probably just

00:22:02,490 --> 00:22:05,760
means that you have to go and do the

00:22:03,840 --> 00:22:07,770
chore of like updating that test now a

00:22:05,760 --> 00:22:09,360
probably it's going to like your eyes

00:22:07,770 --> 00:22:10,500
will glaze over when the build fails cuz

00:22:09,360 --> 00:22:12,510
you know you just have to go update

00:22:10,500 --> 00:22:14,370
stuff the common thread between all of

00:22:12,510 --> 00:22:16,320
these is that when we reach for mocks is

00:22:14,370 --> 00:22:18,780
just a tool of convenience they undercut

00:22:16,320 --> 00:22:20,520
our overall test strategies return on

00:22:18,780 --> 00:22:22,830
investment and

00:22:20,520 --> 00:22:24,630
tends to make mocks a four-letter word

00:22:22,830 --> 00:22:26,160
on a lot of teams I said that just

00:22:24,630 --> 00:22:30,330
realizing Mach was already a four-letter

00:22:26,160 --> 00:22:31,730
word but you get my point let's move on

00:22:30,330 --> 00:22:33,960
to the questionable uses of mocking

00:22:31,730 --> 00:22:36,720
first one I see a lot is when people

00:22:33,960 --> 00:22:38,640
write mocked out tests for existing code

00:22:36,720 --> 00:22:41,010
bases let's say that you work at an

00:22:38,640 --> 00:22:42,330
internet of things doorbell company and

00:22:41,010 --> 00:22:44,520
your startups you got a lot of spaghetti

00:22:42,330 --> 00:22:45,840
code but you just got a lot more funding

00:22:44,520 --> 00:22:47,460
so you can finally write all those unit

00:22:45,840 --> 00:22:48,660
tests that you never did and you've been

00:22:47,460 --> 00:22:51,000
really ashamed of the fact that you at

00:22:48,660 --> 00:22:52,320
0% code coverage in your system and so

00:22:51,000 --> 00:22:53,370
you think well what's the first test

00:22:52,320 --> 00:22:55,080
that I could write let's write something

00:22:53,370 --> 00:22:56,850
real simple and integral to like what

00:22:55,080 --> 00:22:59,490
our system does that when you ring the

00:22:56,850 --> 00:23:01,380
door the ding count goes up and so we

00:22:59,490 --> 00:23:03,540
require a doorbell and then we require

00:23:01,380 --> 00:23:04,980
the thing that rings the doorbell we

00:23:03,540 --> 00:23:06,360
create a new doorbell we passes the

00:23:04,980 --> 00:23:09,059
subject and make sure that the ding

00:23:06,360 --> 00:23:11,400
count has been incremented we run this

00:23:09,059 --> 00:23:13,440
test and oh well we got the stupid error

00:23:11,400 --> 00:23:15,630
because you got to have a door for a

00:23:13,440 --> 00:23:17,730
doorbell no problem I'm gonna import the

00:23:15,630 --> 00:23:20,160
door it's actually the door passes to

00:23:17,730 --> 00:23:22,170
the doorbell run my test except for the

00:23:20,160 --> 00:23:22,679
fact that a door requires a house it's

00:23:22,170 --> 00:23:23,750
fine

00:23:22,679 --> 00:23:25,410
you're gonna import the house

00:23:23,750 --> 00:23:26,970
instantiate a passing the door which

00:23:25,410 --> 00:23:28,590
passes the doorbell oh just passing the

00:23:26,970 --> 00:23:29,970
subject run the test and a house

00:23:28,590 --> 00:23:31,590
requires a paid subscription network

00:23:29,970 --> 00:23:33,420
connection to this other service and you

00:23:31,590 --> 00:23:35,250
know what now you're just upset and

00:23:33,420 --> 00:23:37,470
frustrated because like the thing about

00:23:35,250 --> 00:23:38,580
untested code is very often lots of code

00:23:37,470 --> 00:23:40,800
paths especially when we're creating

00:23:38,580 --> 00:23:43,050
values are only ever invoked in one

00:23:40,800 --> 00:23:44,820
place and so this kind of crapped you

00:23:43,050 --> 00:23:46,170
can just like accrue one of the best

00:23:44,820 --> 00:23:48,150
things about testing is all your code

00:23:46,170 --> 00:23:49,320
gets like lots of exercise in lots of

00:23:48,150 --> 00:23:50,850
different contexts so you're

00:23:49,320 --> 00:23:52,950
incentivized to make value objects that

00:23:50,850 --> 00:23:54,600
are cheap and easy to construct so the

00:23:52,950 --> 00:23:56,670
right thing to do here is like make your

00:23:54,600 --> 00:23:57,660
value objects easier to construct but of

00:23:56,670 --> 00:23:59,040
course what they do instead is they

00:23:57,660 --> 00:24:00,990
knock all that stuff out replace it with

00:23:59,040 --> 00:24:03,150
a fake doorbell set add in count on it

00:24:00,990 --> 00:24:07,080
and then get to get to passing but this

00:24:03,150 --> 00:24:08,970
is not the right reaction I like if I

00:24:07,080 --> 00:24:11,100
had to summarize that into like a motto

00:24:08,970 --> 00:24:12,330
I say like mock out independencies mock

00:24:11,100 --> 00:24:15,090
out things that have like application

00:24:12,330 --> 00:24:16,890
logic that do the work but pass in real

00:24:15,090 --> 00:24:19,140
values that type information should be

00:24:16,890 --> 00:24:21,240
valuable it should be easy to construct

00:24:19,140 --> 00:24:22,320
them and besides tests like this aren't

00:24:21,240 --> 00:24:24,690
going to get you they're not gonna move

00:24:22,320 --> 00:24:26,880
the needle very much in this person

00:24:24,690 --> 00:24:29,280
situation instead what you probably want

00:24:26,880 --> 00:24:31,110
with an untested system is more safety

00:24:29,280 --> 00:24:32,830
to aggressively refactor it in which

00:24:31,110 --> 00:24:35,200
case I recommend you to

00:24:32,830 --> 00:24:36,789
the distance so think of ring Bell in

00:24:35,200 --> 00:24:38,440
the context of its application maybe

00:24:36,789 --> 00:24:39,970
there's an HTTP router in front of that

00:24:38,440 --> 00:24:41,919
and then we could write a test that runs

00:24:39,970 --> 00:24:43,480
in a separate process that interrogate

00:24:41,919 --> 00:24:45,309
that thing just the way a real user

00:24:43,480 --> 00:24:46,630
would so we can send a post request to

00:24:45,309 --> 00:24:49,029
like exercise the behavior that we want

00:24:46,630 --> 00:24:50,679
to test you know assume that maybe

00:24:49,029 --> 00:24:52,840
writes to a data store somewhere and

00:24:50,679 --> 00:24:54,519
then after we've done that we can run

00:24:52,840 --> 00:24:56,140
another request and see whether or not

00:24:54,519 --> 00:24:57,370
they'd had the impact that we want it or

00:24:56,140 --> 00:24:59,080
we maybe could look directly at the

00:24:57,370 --> 00:25:01,299
database and this is gonna provide way

00:24:59,080 --> 00:25:02,710
more safety to like actually start

00:25:01,299 --> 00:25:05,620
changing and improving the design of

00:25:02,710 --> 00:25:07,480
that ring bell subject now integrated

00:25:05,620 --> 00:25:09,519
tests they are indeed slower and they

00:25:07,480 --> 00:25:11,380
fail for more nonsensical reasons but

00:25:09,519 --> 00:25:12,490
they do provide more refactor safety and

00:25:11,380 --> 00:25:14,200
if you knew you're in this situation

00:25:12,490 --> 00:25:15,519
they're going to be a way more bang for

00:25:14,200 --> 00:25:17,049
your buck from a code coverage

00:25:15,519 --> 00:25:18,309
perspective and actually providing some

00:25:17,049 --> 00:25:19,450
sort of sense that your build means

00:25:18,309 --> 00:25:21,340
something

00:25:19,450 --> 00:25:23,440
the next questionable use I see people

00:25:21,340 --> 00:25:26,559
do a lot is enabling highly layered

00:25:23,440 --> 00:25:27,909
designs by leveraging mocks you know

00:25:26,559 --> 00:25:29,950
something I've seen over the years is

00:25:27,909 --> 00:25:32,470
that testing tends to push us to make

00:25:29,950 --> 00:25:35,590
smaller objects so instead of like one

00:25:32,470 --> 00:25:37,860
gigantic horse sized duck module we're

00:25:35,590 --> 00:25:40,269
writing like a hundred duck-sized horse

00:25:37,860 --> 00:25:42,039
so instead of having a gigantic order

00:25:40,269 --> 00:25:43,659
j/s method with like 800 methods all

00:25:42,039 --> 00:25:44,769
over it we might have like a bunch of

00:25:43,659 --> 00:25:47,049
carefully named different

00:25:44,769 --> 00:25:50,080
responsibilities in our app in separate

00:25:47,049 --> 00:25:52,029
files and so forth now I can talk all

00:25:50,080 --> 00:25:54,220
day about like why big modules are bad

00:25:52,029 --> 00:25:55,630
but it's not the case that smaller

00:25:54,220 --> 00:25:58,120
modules are better just because they're

00:25:55,630 --> 00:25:59,409
smaller in fact if you're like every

00:25:58,120 --> 00:26:00,639
time you pick up a new feature and you

00:25:59,409 --> 00:26:03,220
go to implement it you're just kind of

00:26:00,639 --> 00:26:05,049
creating these six cookie cutter objects

00:26:03,220 --> 00:26:06,850
over and over and over again you're not

00:26:05,049 --> 00:26:08,620
actually like improving the design

00:26:06,850 --> 00:26:11,049
that's just large objects with extra

00:26:08,620 --> 00:26:12,220
steps like you're still you're adding a

00:26:11,049 --> 00:26:13,570
bunch of new direction you're adding a

00:26:12,220 --> 00:26:15,789
bunch of files you're not really like

00:26:13,570 --> 00:26:17,799
improving things so you might ask hey

00:26:15,789 --> 00:26:19,570
what is this like unsolicited design

00:26:17,799 --> 00:26:22,299
feedback have to do with mocking well

00:26:19,570 --> 00:26:24,519
I'll tell ya if we were testing all this

00:26:22,299 --> 00:26:26,289
stuff and we made a change to this like

00:26:24,519 --> 00:26:28,360
a bottom layer that's really heavily

00:26:26,289 --> 00:26:30,490
dependent on module of course we would

00:26:28,360 --> 00:26:31,960
have to update that test but normally it

00:26:30,490 --> 00:26:33,220
would also fail all the tests of the

00:26:31,960 --> 00:26:35,799
things and depend on that thing and

00:26:33,220 --> 00:26:38,590
would disincentivize from a layering

00:26:35,799 --> 00:26:39,940
like this but mocking comes in a lot of

00:26:38,590 --> 00:26:41,710
teams will be like alright cool i can

00:26:39,940 --> 00:26:43,779
just fake out all the layers beneath me

00:26:41,710 --> 00:26:45,490
and so that means that i can create

00:26:43,779 --> 00:26:47,740
these arbitrarily injury

00:26:45,490 --> 00:26:49,570
stacked up applications with with the

00:26:47,740 --> 00:26:51,429
test not no longer providing me that

00:26:49,570 --> 00:26:53,559
feedback so mocks actually add a blind

00:26:51,429 --> 00:26:55,179
spot to teams in this situation and I

00:26:53,559 --> 00:26:57,280
would caution you to that like layering

00:26:55,179 --> 00:26:59,080
is not the same thing as abstraction

00:26:57,280 --> 00:27:00,549
you're not doing domain modeling if all

00:26:59,080 --> 00:27:03,250
you're doing is adding more and more

00:27:00,549 --> 00:27:04,929
layers of indirection so of course I

00:27:03,250 --> 00:27:06,940
love small modules I love small things

00:27:04,929 --> 00:27:08,440
make small things but make sure that

00:27:06,940 --> 00:27:09,940
they're meaningful that they sell of a

00:27:08,440 --> 00:27:11,770
distinct purpose the name means

00:27:09,940 --> 00:27:13,960
something and that you're not just like

00:27:11,770 --> 00:27:15,700
creating a bunch of files for no reason

00:27:13,960 --> 00:27:17,470
so what I'd rather see is an application

00:27:15,700 --> 00:27:19,690
that only has like one controller but

00:27:17,470 --> 00:27:21,460
like it knows who to call at the right

00:27:19,690 --> 00:27:23,650
time so you know maybe there is a

00:27:21,460 --> 00:27:25,510
responsibility to create an order and

00:27:23,650 --> 00:27:27,309
then I just use that it's like an escape

00:27:25,510 --> 00:27:29,500
hatch like a main method for the create

00:27:27,309 --> 00:27:31,090
order thing so that it can only focus on

00:27:29,500 --> 00:27:32,470
what's special about creating orders and

00:27:31,090 --> 00:27:33,970
doesn't get sucked into all this sort of

00:27:32,470 --> 00:27:35,409
like carrying the water that is

00:27:33,970 --> 00:27:36,549
necessary for every single feature if

00:27:35,409 --> 00:27:38,620
you're just kind of copy and paste the

00:27:36,549 --> 00:27:39,730
same stack over and over again so if

00:27:38,620 --> 00:27:41,289
you're in this situation and you're

00:27:39,730 --> 00:27:42,640
finding that like you're isolated unit

00:27:41,289 --> 00:27:45,309
tests aren't providing you with like

00:27:42,640 --> 00:27:47,500
useful design feedback they're not

00:27:45,309 --> 00:27:49,630
providing you value don't do it anymore

00:27:47,500 --> 00:27:51,460
in fact maybe question whether or not

00:27:49,630 --> 00:27:53,049
like your architecture is too repetitive

00:27:51,460 --> 00:27:55,240
and redundant and could be improved

00:27:53,049 --> 00:27:57,280
the last questionable thing I see is

00:27:55,240 --> 00:27:59,110
folks who rely too heavily on call

00:27:57,280 --> 00:28:00,400
verification where you know a mocking

00:27:59,110 --> 00:28:01,720
library lets you verify that a call

00:28:00,400 --> 00:28:03,549
happened a lot of people will get really

00:28:01,720 --> 00:28:05,710
excited about that and I'm a big

00:28:03,549 --> 00:28:07,419
believer like in general terms that we

00:28:05,710 --> 00:28:09,730
come to value whatever it is we measure

00:28:07,419 --> 00:28:11,830
and an assertion is a measurement and so

00:28:09,730 --> 00:28:14,049
our assertions tend to steer the design

00:28:11,830 --> 00:28:14,770
of our systems so let's say that we run

00:28:14,049 --> 00:28:16,990
a petting zoo

00:28:14,770 --> 00:28:18,190
and you were given a copy of test double

00:28:16,990 --> 00:28:20,950
J s and your birthday so you're really

00:28:18,190 --> 00:28:22,539
excited to go mock things out and you

00:28:20,950 --> 00:28:23,710
know you're what you're excited about is

00:28:22,539 --> 00:28:25,120
like you love petting the pets but now

00:28:23,710 --> 00:28:26,830
you can finally assert when that happens

00:28:25,120 --> 00:28:29,080
so you know you put the sheep one time

00:28:26,830 --> 00:28:31,659
you pet the llama you can even say hey I

00:28:29,080 --> 00:28:33,159
put the Sheep two times you don't pet

00:28:31,659 --> 00:28:34,720
the crocodile you can ascertain that -

00:28:33,159 --> 00:28:36,940
sorry crocodile

00:28:34,720 --> 00:28:38,950
we could write a test for this right you

00:28:36,940 --> 00:28:40,720
know like when we passed in this like

00:28:38,950 --> 00:28:42,700
function a kid and the sheep it'll

00:28:40,720 --> 00:28:44,350
return true as well as for the llama and

00:28:42,700 --> 00:28:45,700
false for the crocodile we invoked that

00:28:44,350 --> 00:28:47,409
subject with those three animals and

00:28:45,700 --> 00:28:49,539
then we verify that the sheep and the

00:28:47,409 --> 00:28:51,490
llama got pet but the crocodile didn't

00:28:49,539 --> 00:28:53,080
and to implement something that passes

00:28:51,490 --> 00:28:55,149
this test we import for those two things

00:28:53,080 --> 00:28:56,860
and then we pass in the kid and the

00:28:55,149 --> 00:28:58,179
animals for each of those animals

00:28:56,860 --> 00:28:59,920
it likes the animal that pets the animal

00:28:58,179 --> 00:29:02,080
now we got to a passing test great

00:28:59,920 --> 00:29:03,970
there's one problem though which is like

00:29:02,080 --> 00:29:05,530
kids have dirty hams and the pet

00:29:03,970 --> 00:29:06,910
function doesn't say how dirty and we

00:29:05,530 --> 00:29:09,190
gotta clean the animals in this petting

00:29:06,910 --> 00:29:10,990
zoo and so you just have to guess and so

00:29:09,190 --> 00:29:13,540
you set up a cron job to hose down the

00:29:10,990 --> 00:29:15,460
llamas every night at 10:00 p.m. which

00:29:13,540 --> 00:29:18,429
is a tremendous waste of water so we

00:29:15,460 --> 00:29:20,049
want to do better what happened here is

00:29:18,429 --> 00:29:22,000
actually an example of like where tools

00:29:20,049 --> 00:29:23,890
can mislead us because tools are awesome

00:29:22,000 --> 00:29:25,809
because they save us time by reducing

00:29:23,890 --> 00:29:27,580
the necessary thoughts and actions we

00:29:25,809 --> 00:29:29,380
need to take in order to get a job done

00:29:27,580 --> 00:29:31,179
but if we're not careful sometimes our

00:29:29,380 --> 00:29:33,549
tools can actually eliminate useful

00:29:31,179 --> 00:29:35,950
thoughts and and that happened in this

00:29:33,549 --> 00:29:37,540
case now just because you're able to

00:29:35,950 --> 00:29:40,090
verify calls with your mocking library

00:29:37,540 --> 00:29:42,100
you have to realize that it might

00:29:40,090 --> 00:29:44,200
encourage you to write more impure

00:29:42,100 --> 00:29:45,429
functions and impure functions those

00:29:44,200 --> 00:29:47,500
that have side effects are harder to

00:29:45,429 --> 00:29:49,510
maintain than pure functions those that

00:29:47,500 --> 00:29:50,860
return values because nowhere when I was

00:29:49,510 --> 00:29:52,480
writing this code I think to ask

00:29:50,860 --> 00:29:53,890
hey what value should pet returned

00:29:52,480 --> 00:29:56,020
because I had a convenient way to assert

00:29:53,890 --> 00:29:57,490
that it was just called and if I had to

00:29:56,020 --> 00:29:59,410
think about that I'd say well you know

00:29:57,490 --> 00:30:01,419
the pet function should probably take an

00:29:59,410 --> 00:30:03,309
animal and then return a dirtier version

00:30:01,419 --> 00:30:05,860
of that animal I guess so let's pretend

00:30:03,309 --> 00:30:07,210
we did that and here we're gonna stub

00:30:05,860 --> 00:30:08,470
out that when we pet the sheep we get a

00:30:07,210 --> 00:30:10,480
dirty sheep when you pet the llama we

00:30:08,470 --> 00:30:11,799
get a dirty llama now we care about this

00:30:10,480 --> 00:30:13,120
result and we're gonna assert that we

00:30:11,799 --> 00:30:14,530
get a dirty sheep a dirty llama on a

00:30:13,120 --> 00:30:16,090
clean crocodile so other parts of our

00:30:14,530 --> 00:30:17,710
system know which animals to clean at

00:30:16,090 --> 00:30:18,880
the end of the day we update the

00:30:17,710 --> 00:30:20,950
implementation like this first we're

00:30:18,880 --> 00:30:22,780
gonna take away this for each whenever

00:30:20,950 --> 00:30:24,730
you see a for each anywhere any kind of

00:30:22,780 --> 00:30:26,440
loop you know that like your application

00:30:24,730 --> 00:30:27,790
is just screaming side effects because

00:30:26,440 --> 00:30:29,049
it doesn't return anything so we're

00:30:27,790 --> 00:30:31,240
going to change that to a map instead

00:30:29,049 --> 00:30:33,400
and trade one array for another and

00:30:31,240 --> 00:30:34,600
return the value of that pet call and

00:30:33,400 --> 00:30:36,100
the parse of the kid doesn't like the

00:30:34,600 --> 00:30:39,280
animal will just return the animal as it

00:30:36,100 --> 00:30:40,870
was and this pad passes the test so now

00:30:39,280 --> 00:30:43,630
we know to wash these first two and we

00:30:40,870 --> 00:30:45,910
can spare the third there's just one

00:30:43,630 --> 00:30:47,650
last thing here is if you actually run

00:30:45,910 --> 00:30:48,880
this test you're you know really big

00:30:47,650 --> 00:30:50,200
warning up at the top because I'm gonna

00:30:48,880 --> 00:30:52,210
tell you that you stubbed and verified

00:30:50,200 --> 00:30:54,040
exactly the same call and that that was

00:30:52,210 --> 00:30:55,690
probably redundant and what does that

00:30:54,040 --> 00:30:58,450
mean well if you look at this test we're

00:30:55,690 --> 00:31:00,010
now like verifying explicitly every

00:30:58,450 --> 00:31:01,210
single thing that happens but we no

00:31:00,010 --> 00:31:03,250
longer need to be because we're like

00:31:01,210 --> 00:31:03,900
also stubbing these things and asserting

00:31:03,250 --> 00:31:05,670
on the values

00:31:03,900 --> 00:31:07,500
come back and so it's almost provably

00:31:05,670 --> 00:31:09,870
redundant now we can just remove that

00:31:07,500 --> 00:31:11,130
stuff simplified the test and so in

00:31:09,870 --> 00:31:12,660
general after years and years and years

00:31:11,130 --> 00:31:14,400
of writing and using mocking libraries

00:31:12,660 --> 00:31:16,350
I've come to view verification as just

00:31:14,400 --> 00:31:17,880
the assertion of last resort only if it

00:31:16,350 --> 00:31:19,410
really makes sense for the thing I'm

00:31:17,880 --> 00:31:20,610
calling to not return a value or if I'm

00:31:19,410 --> 00:31:23,160
it's out of my hands out of my control

00:31:20,610 --> 00:31:24,900
do I actually write assertions using

00:31:23,160 --> 00:31:26,910
verification the common thread between

00:31:24,900 --> 00:31:28,140
all three of these things is we forget

00:31:26,910 --> 00:31:30,120
that like mocking libraries were

00:31:28,140 --> 00:31:32,010
invented to provide rich design feedback

00:31:30,120 --> 00:31:34,050
to improve the design the simplicity of

00:31:32,010 --> 00:31:35,640
our systems and if we ignore that then

00:31:34,050 --> 00:31:38,100
we're just introducing yet more useless

00:31:35,640 --> 00:31:40,290
pain all right so that was like a lot of

00:31:38,100 --> 00:31:42,480
things to not do the one thing that I

00:31:40,290 --> 00:31:44,160
really like and let's talk about that so

00:31:42,480 --> 00:31:45,630
I was really inspired by this book

00:31:44,160 --> 00:31:48,240
called growing object-oriented software

00:31:45,630 --> 00:31:50,910
guided by tests by Steve Freeman and NAT

00:31:48,240 --> 00:31:52,770
Price years ago and I've iterated on it

00:31:50,910 --> 00:31:55,140
enough that Matt has kindly asked me to

00:31:52,770 --> 00:31:56,430
call what I do something else so I call

00:31:55,140 --> 00:31:58,500
a discovery testing we're gonna do a

00:31:56,430 --> 00:32:00,660
quick demo so suppose that you write

00:31:58,500 --> 00:32:02,940
conference talks but it takes too long

00:32:00,660 --> 00:32:05,130
there's just too much emoji and fiddling

00:32:02,940 --> 00:32:06,510
and stuff so you decide let's meet it

00:32:05,130 --> 00:32:08,310
and so you take something that loads up

00:32:06,510 --> 00:32:10,350
all your notes you run it through a

00:32:08,310 --> 00:32:12,090
sentiment I'll sentiment analyzer to

00:32:10,350 --> 00:32:14,430
find what emoji should match up and then

00:32:12,090 --> 00:32:15,930
you generate a keynote file you know if

00:32:14,430 --> 00:32:17,400
we start a test like this and we're

00:32:15,930 --> 00:32:18,750
practicing discovery testing I always

00:32:17,400 --> 00:32:21,240
start with the setup at the very top

00:32:18,750 --> 00:32:23,400
layer and I ask myself what's the code

00:32:21,240 --> 00:32:25,230
that I wish I had because I'm lazy and

00:32:23,400 --> 00:32:27,420
I'm also relatively incompetent and like

00:32:25,230 --> 00:32:29,040
when I'm looking at a blank code listing

00:32:27,420 --> 00:32:31,050
I just panic and assume that I'm too

00:32:29,040 --> 00:32:32,520
dumb to figure it out but if I could

00:32:31,050 --> 00:32:34,230
just say hey I wish I had something that

00:32:32,520 --> 00:32:35,970
loads notes and something that pairs

00:32:34,230 --> 00:32:37,380
those notes up with emoji to create

00:32:35,970 --> 00:32:38,790
slides and then finally something to

00:32:37,380 --> 00:32:40,770
create the keynote file for me that I

00:32:38,790 --> 00:32:42,120
can understand and then you know I load

00:32:40,770 --> 00:32:44,070
up my subject and I can start thinking

00:32:42,120 --> 00:32:45,510
about the test well of course the test

00:32:44,070 --> 00:32:47,970
should be it creates the keynote from

00:32:45,510 --> 00:32:49,650
the notes I run this test and it fails

00:32:47,970 --> 00:32:51,570
because I'm talking about code that

00:32:49,650 --> 00:32:53,250
doesn't exist so it says hey this module

00:32:51,570 --> 00:32:55,320
isn't real so I just touch it and I run

00:32:53,250 --> 00:32:57,000
it again and then this other one the

00:32:55,320 --> 00:32:59,340
second pair emoji isn't real touch it

00:32:57,000 --> 00:33:01,800
run again and then create file isn't

00:32:59,340 --> 00:33:03,570
realized cetera et cetera and I got that

00:33:01,800 --> 00:33:05,790
too passing and what I love about that

00:33:03,570 --> 00:33:07,440
is that it gives me small incremental

00:33:05,790 --> 00:33:09,120
forward progress throughout the day even

00:33:07,440 --> 00:33:11,430
if all I accomplished just then was like

00:33:09,120 --> 00:33:12,830
the plumbing of my application it feels

00:33:11,430 --> 00:33:16,340
like paint by number and

00:33:12,830 --> 00:33:18,679
you know programming is an area of just

00:33:16,340 --> 00:33:21,049
professional life where we I really wish

00:33:18,679 --> 00:33:23,000
that things could we'd get more feedback

00:33:21,049 --> 00:33:25,460
through the day like hey good job bad

00:33:23,000 --> 00:33:27,169
job and sometimes people go days weeks

00:33:25,460 --> 00:33:29,330
months without any real feedback that

00:33:27,169 --> 00:33:31,580
they're on the right path so so testing

00:33:29,330 --> 00:33:33,860
this way provide like soothes my anxiety

00:33:31,580 --> 00:33:35,539
and now you know I've broken this work

00:33:33,860 --> 00:33:38,090
up to at least three responsibilities

00:33:35,539 --> 00:33:39,830
here so I can start writing the actual

00:33:38,090 --> 00:33:41,600
tests now I assume I'm gonna need

00:33:39,830 --> 00:33:44,870
something to represent notes so I create

00:33:41,600 --> 00:33:46,760
like an ode note domain module and when

00:33:44,870 --> 00:33:48,200
I stub you know for given a search

00:33:46,760 --> 00:33:50,179
string you know I should call back with

00:33:48,200 --> 00:33:52,429
those notes I assume I'm gonna need like

00:33:50,179 --> 00:33:54,409
a slide value as well and so when I call

00:33:52,429 --> 00:33:55,399
this pair emoji thing with the notes it

00:33:54,409 --> 00:33:57,440
just should return these slides

00:33:55,399 --> 00:33:58,850
synchronously I call my subject with

00:33:57,440 --> 00:34:00,830
that search string and the given path

00:33:58,850 --> 00:34:02,360
that I want to ready to file - and then

00:34:00,830 --> 00:34:04,490
I verify that create file was called

00:34:02,360 --> 00:34:06,710
with those slides at that path run my

00:34:04,490 --> 00:34:07,940
test again and here's the message I've

00:34:06,710 --> 00:34:10,639
been working for it's all this time

00:34:07,940 --> 00:34:12,679
right I expected this to be called with

00:34:10,639 --> 00:34:14,450
these slides at that path I can make

00:34:12,679 --> 00:34:16,609
this test pass by importing the three

00:34:14,450 --> 00:34:18,770
you know still empty modules we're gonna

00:34:16,609 --> 00:34:21,200
fake that out at run time passing the

00:34:18,770 --> 00:34:24,080
the topic to load notes get the callback

00:34:21,200 --> 00:34:25,429
callback create the slides and then

00:34:24,080 --> 00:34:27,349
create the file with those slides in

00:34:25,429 --> 00:34:30,440
that given path I run this test and now

00:34:27,349 --> 00:34:32,659
it passes now you'd be right to ask like

00:34:30,440 --> 00:34:34,730
that was a lot of words and minutes for

00:34:32,659 --> 00:34:36,230
five lines of code like how is this

00:34:34,730 --> 00:34:38,089
actually a productive use of your time

00:34:36,230 --> 00:34:39,800
and the answer is I've actually done a

00:34:38,089 --> 00:34:42,109
lot of work here just by thinking

00:34:39,800 --> 00:34:43,580
through all these things I just like

00:34:42,109 --> 00:34:45,889
agreed to like hey this is our public

00:34:43,580 --> 00:34:47,510
API of these two strings I know that

00:34:45,889 --> 00:34:49,520
when I pass a topic into load notes I

00:34:47,510 --> 00:34:51,200
get notes back I know pair emoji trades

00:34:49,520 --> 00:34:53,240
notes for slides and I know that we

00:34:51,200 --> 00:34:55,580
passed slides and path to some other

00:34:53,240 --> 00:34:57,440
responsibilities the subject at this

00:34:55,580 --> 00:34:58,970
point the entry point is done I'm not

00:34:57,440 --> 00:35:00,680
kidding when I say often never look at

00:34:58,970 --> 00:35:03,080
that top level again I've successfully

00:35:00,680 --> 00:35:04,520
broken it up into three problems the

00:35:03,080 --> 00:35:05,900
work is broken down into three things

00:35:04,520 --> 00:35:07,040
that we know the contract so you don't

00:35:05,900 --> 00:35:08,359
have to worry about the fiddly bits

00:35:07,040 --> 00:35:09,920
giving all tangled together at some

00:35:08,359 --> 00:35:12,080
point they have different jobs that we

00:35:09,920 --> 00:35:13,760
know in advance and we already proven

00:35:12,080 --> 00:35:15,109
out the contract between those things so

00:35:13,760 --> 00:35:16,280
we know what to call them with because

00:35:15,109 --> 00:35:18,890
there's already something calling them

00:35:16,280 --> 00:35:20,780
and that's great so additionally you

00:35:18,890 --> 00:35:22,490
know we we sussed out a couple of value

00:35:20,780 --> 00:35:24,650
types that we want to be passing through

00:35:22,490 --> 00:35:25,980
these methods you know we have some

00:35:24,650 --> 00:35:28,110
notes and

00:35:25,980 --> 00:35:30,180
and the next step is like it's a tree

00:35:28,110 --> 00:35:31,890
right it's just recursion so we ask like

00:35:30,180 --> 00:35:33,270
okay so how do you what do we want load

00:35:31,890 --> 00:35:35,850
notes to do well it's got to read from

00:35:33,270 --> 00:35:37,140
some note file parse our outline and

00:35:35,850 --> 00:35:39,180
then flatten those points so that we're

00:35:37,140 --> 00:35:41,310
having a linear presentation and the

00:35:39,180 --> 00:35:42,780
first is IO and the second and third are

00:35:41,310 --> 00:35:44,070
just pure functions and the writing test

00:35:42,780 --> 00:35:45,510
for pure functions like we talked about

00:35:44,070 --> 00:35:48,720
it's really easy so we want to maximize

00:35:45,510 --> 00:35:50,370
those the pear emoji thing maybe we

00:35:48,720 --> 00:35:52,650
tokenize those notes and then we run

00:35:50,370 --> 00:35:54,090
that off to a sentiment analyzer and

00:35:52,650 --> 00:35:55,560
then we convert them to slides and the

00:35:54,090 --> 00:35:56,760
first things are pure function the

00:35:55,560 --> 00:35:58,170
second thing is a good probably gonna be

00:35:56,760 --> 00:36:00,180
a wrapper because I don't want to figure

00:35:58,170 --> 00:36:03,060
out how to do sentiment analysis oh not

00:36:00,180 --> 00:36:04,440
another pure function this last bit you

00:36:03,060 --> 00:36:06,360
know we want to build some kind of

00:36:04,440 --> 00:36:08,550
layout from those slides like text goes

00:36:06,360 --> 00:36:09,990
on top emoji down here or whatever then

00:36:08,550 --> 00:36:11,940
we need to generate Apple script

00:36:09,990 --> 00:36:13,350
commands so we can actually know like

00:36:11,940 --> 00:36:15,330
have a big array of like everything we

00:36:13,350 --> 00:36:16,710
need to automate with keynote and then

00:36:15,330 --> 00:36:18,960
finally something who's responsible for

00:36:16,710 --> 00:36:21,000
rifling through all of those commands

00:36:18,960 --> 00:36:22,860
and and generating the file for us the

00:36:21,000 --> 00:36:24,510
first and second again pure functions

00:36:22,860 --> 00:36:26,550
real easy and the last one would just

00:36:24,510 --> 00:36:28,410
like shell out to this thing called OS a

00:36:26,550 --> 00:36:29,580
script that's gonna like open up Apple

00:36:28,410 --> 00:36:31,770
script in automate keynote

00:36:29,580 --> 00:36:33,570
what I love about this process is it

00:36:31,770 --> 00:36:35,820
gives me reliable incremental progress

00:36:33,570 --> 00:36:36,780
throughout my day what shakes out the

00:36:35,820 --> 00:36:38,730
other end is a bunch of single

00:36:36,780 --> 00:36:41,280
responsibility units with intention

00:36:38,730 --> 00:36:42,240
revealing names the the organization of

00:36:41,280 --> 00:36:44,130
all these small things is actually

00:36:42,240 --> 00:36:45,780
discoverable like if I create a new

00:36:44,130 --> 00:36:46,980
directory every time i recurse well if

00:36:45,780 --> 00:36:48,210
you're reading my code you only have to

00:36:46,980 --> 00:36:49,890
dive as deep as you seem to be

00:36:48,210 --> 00:36:51,930
interested and to answer the question

00:36:49,890 --> 00:36:53,880
you're looking for it separates out all

00:36:51,930 --> 00:36:55,830
of the values from the logic by default

00:36:53,880 --> 00:36:57,300
so it doesn't tangle those up and I

00:36:55,830 --> 00:36:59,220
spend most of my time writing really

00:36:57,300 --> 00:37:00,690
easy like synchronous pure functions

00:36:59,220 --> 00:37:04,650
which are the easiest kind of code to

00:37:00,690 --> 00:37:06,450
maintain that's all I got so I thank you

00:37:04,650 --> 00:37:09,110
for being patient really grateful that

00:37:06,450 --> 00:37:11,850
you showed up at a talk late in the day

00:37:09,110 --> 00:37:13,890
you know like I mentioned testable we're

00:37:11,850 --> 00:37:16,820
a consultancy if your team is looking

00:37:13,890 --> 00:37:18,780
for you know experienced developers

00:37:16,820 --> 00:37:20,580
maybe you're only thinking about hiring

00:37:18,780 --> 00:37:21,990
but you might be open to talking to us

00:37:20,580 --> 00:37:23,430
instead about how we might be able to

00:37:21,990 --> 00:37:24,990
help out and integrate with your team

00:37:23,430 --> 00:37:27,060
I'd love to meet you check out our

00:37:24,990 --> 00:37:28,800
website we're also hiring so if you'd

00:37:27,060 --> 00:37:30,120
like to work remotely you kind of share

00:37:28,800 --> 00:37:31,770
our passion for improving how the world

00:37:30,120 --> 00:37:33,360
write software and you want to share

00:37:31,770 --> 00:37:35,850
your experience with others check out

00:37:33,360 --> 00:37:37,410
our join page video of this talk I've

00:37:35,850 --> 00:37:39,020
got a previous one from a cert J s in

00:37:37,410 --> 00:37:40,849
February I've already I buffered

00:37:39,020 --> 00:37:42,730
so it's gonna be tweeting the video link

00:37:40,849 --> 00:37:44,869
momentarily to my Twitter accounts URLs

00:37:42,730 --> 00:37:47,720
would also love to see your feedback

00:37:44,869 --> 00:37:50,000
through our website forum also I've got

00:37:47,720 --> 00:37:52,369
brand new testable stickers are a new

00:37:50,000 --> 00:37:53,960
alternate logo I'm gonna be here all

00:37:52,369 --> 00:37:56,450
week and if you ask for a sticker I'd be

00:37:53,960 --> 00:37:57,619
happy to give you one there's just one

00:37:56,450 --> 00:38:01,040
last thing I want to share before we go

00:37:57,619 --> 00:38:02,599
which is my wonderful wife Becky down in

00:38:01,040 --> 00:38:04,790
front she put in a lot of work this

00:38:02,599 --> 00:38:08,060
morning I took a lift out to the store

00:38:04,790 --> 00:38:10,550
and she she just for your all's benefit

00:38:08,060 --> 00:38:11,900
I'm not the generous type but she is but

00:38:10,550 --> 00:38:15,109
I am like the head of marketing for

00:38:11,900 --> 00:38:18,170
testable so I saw an opportunity and she

00:38:15,109 --> 00:38:26,000
purchased like every last bug spray at

00:38:18,170 --> 00:38:30,560
the target nearby so Thank You Becky

00:38:26,000 --> 00:38:32,420
and then I affixed branded stickers on

00:38:30,560 --> 00:38:33,619
to each of them so here's the deal

00:38:32,420 --> 00:38:36,560
because there's not enough of these for

00:38:33,619 --> 00:38:38,119
everybody if you come and meet us at

00:38:36,560 --> 00:38:39,770
dinner and you talk a little bit and you

00:38:38,119 --> 00:38:41,720
say just enough to demonstrate that you

00:38:39,770 --> 00:38:43,700
actually showed up to a 5:45 p.m. talk

00:38:41,720 --> 00:38:45,619
we will happily give you a bug spray

00:38:43,700 --> 00:38:47,599
until we run out of them that's our

00:38:45,619 --> 00:38:49,040
little gift to you thank you for your

00:38:47,599 --> 00:38:50,780
patience I had a really good time

00:38:49,040 --> 00:38:53,879
speaking here today

00:38:50,780 --> 00:38:53,879
[Music]

00:38:55,450 --> 00:38:57,510

YouTube URL: https://www.youtube.com/watch?v=x8sKpJwq6lY


