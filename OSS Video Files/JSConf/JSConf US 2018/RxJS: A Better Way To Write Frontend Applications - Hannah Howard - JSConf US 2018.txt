Title: RxJS: A Better Way To Write Frontend Applications - Hannah Howard - JSConf US 2018
Publication date: 2018-11-14
Playlist: JSConf US 2018
Description: 
	
Captions: 
	00:00:00,320 --> 00:00:03,840
[Music]

00:00:02,070 --> 00:00:05,660
[Applause]

00:00:03,840 --> 00:00:07,410
[Music]

00:00:05,660 --> 00:00:09,280
[Applause]

00:00:07,410 --> 00:00:11,020
[Music]

00:00:09,280 --> 00:00:12,780
[Applause]

00:00:11,020 --> 00:00:15,920
[Music]

00:00:12,780 --> 00:00:15,920
[Applause]

00:00:16,870 --> 00:00:27,579
[Music]

00:00:22,980 --> 00:00:30,520
so my name is Hannah Howard you heard a

00:00:27,579 --> 00:00:32,140
little bit about me just so if you want

00:00:30,520 --> 00:00:35,079
to find me on the Internet's that's my

00:00:32,140 --> 00:00:37,780
little icon and my handle act Edgar

00:00:35,079 --> 00:00:40,000
Wonder will work for almost any social

00:00:37,780 --> 00:00:43,900
media site that I wish for the public to

00:00:40,000 --> 00:00:47,050
have access to to find me um and I work

00:00:43,900 --> 00:00:50,470
for a company called carbon five we're a

00:00:47,050 --> 00:00:52,030
product development agency and we

00:00:50,470 --> 00:00:54,640
basically work with all kinds of clients

00:00:52,030 --> 00:00:56,620
from startups all the way to like big

00:00:54,640 --> 00:00:59,470
enterprises trying to help them take

00:00:56,620 --> 00:01:02,290
their products from from concept all the

00:00:59,470 --> 00:01:03,430
way to completion and I definitely need

00:01:02,290 --> 00:01:06,100
to give that spiel because they pay for

00:01:03,430 --> 00:01:08,020
me to be here which is really cool so um

00:01:06,100 --> 00:01:12,500
this talk is called

00:01:08,020 --> 00:01:13,710
oh wait I'm a little lost here in my dad

00:01:12,500 --> 00:01:17,670
[Music]

00:01:13,710 --> 00:01:17,670
sorry okay let's try this again

00:01:18,510 --> 00:01:24,340
okay rxjs a better way to write

00:01:21,370 --> 00:01:31,659
front-end applications what's going on

00:01:24,340 --> 00:01:33,549
here sorry I'm here we go I'm really

00:01:31,659 --> 00:01:42,340
sorry just give me one second this is

00:01:33,549 --> 00:01:44,110
not how it's supposed to work I'm giving

00:01:42,340 --> 00:01:46,990
away all the secrets this is terrible oh

00:01:44,110 --> 00:01:49,200
my god oh no now you all know everything

00:01:46,990 --> 00:01:54,670
about it maybe that's it what's okay

00:01:49,200 --> 00:01:58,770
yeah Wow okay how about now okay

00:01:54,670 --> 00:02:09,420
whoo one more time what

00:01:58,770 --> 00:02:11,660
yeah okay sorry I am going yes brief

00:02:09,420 --> 00:02:13,560
contact warning before we start okay

00:02:11,660 --> 00:02:17,819
well now you've already seen the whole

00:02:13,560 --> 00:02:18,300
talk so it's really great it's a great

00:02:17,819 --> 00:02:21,110
talk

00:02:18,300 --> 00:02:23,519
you could leave now if you want anyway

00:02:21,110 --> 00:02:26,190
there is as you might have noticed some

00:02:23,519 --> 00:02:28,080
possibly jarring animation in this talk

00:02:26,190 --> 00:02:30,510
so I'm trying to be a little more

00:02:28,080 --> 00:02:31,650
sensitive to those issues so if you are

00:02:30,510 --> 00:02:34,500
someone who's sensitive to that

00:02:31,650 --> 00:02:35,640
definitely this mean it's not super

00:02:34,500 --> 00:02:38,549
jarring but you may want to be aware of

00:02:35,640 --> 00:02:39,959
that and then the other thing this isn't

00:02:38,549 --> 00:02:41,910
really a Content warning but there will

00:02:39,959 --> 00:02:43,890
be heavy pop-culture references because

00:02:41,910 --> 00:02:49,950
I'm from Los Angeles and that is what we

00:02:43,890 --> 00:02:53,310
do so good evening ladies a good evening

00:02:49,950 --> 00:02:56,310
and good morning to all of you legendary

00:02:53,310 --> 00:02:59,790
children and welcome to the functional

00:02:56,310 --> 00:03:04,730
reactive programming ball tonight the

00:02:59,790 --> 00:03:08,760
category is what is a computer program

00:03:04,730 --> 00:03:11,010
so I refer to a very important computer

00:03:08,760 --> 00:03:14,040
science textbook and often in my

00:03:11,010 --> 00:03:16,200
programming and it defines a computer

00:03:14,040 --> 00:03:20,700
program as a sequence of instructions

00:03:16,200 --> 00:03:22,079
designed to solve specific problems and

00:03:20,700 --> 00:03:23,220
I think that phrase is really

00:03:22,079 --> 00:03:25,769
interesting it's the one I always get

00:03:23,220 --> 00:03:27,510
focused on sequence of instructions it

00:03:25,769 --> 00:03:29,010
makes it sound like our programming

00:03:27,510 --> 00:03:30,930
programming is just like writing a to-do

00:03:29,010 --> 00:03:34,230
list you're like do this and that not

00:03:30,930 --> 00:03:35,519
noting that um and or if you were to

00:03:34,230 --> 00:03:38,190
think about it in maybe a different

00:03:35,519 --> 00:03:40,769
context you might think of it like a

00:03:38,190 --> 00:03:43,230
lesson plan basically a you know a

00:03:40,769 --> 00:03:44,819
series of steps to do a lesson but is it

00:03:43,230 --> 00:03:47,040
really like that is that an accurate

00:03:44,819 --> 00:03:48,870
description maybe if we were writing a

00:03:47,040 --> 00:03:52,170
command line tool that would be accurate

00:03:48,870 --> 00:03:54,389
but we're Java programmers right so I

00:03:52,170 --> 00:03:56,459
imagine there's one of one or two of you

00:03:54,389 --> 00:03:58,709
who writes front-end programs for the

00:03:56,459 --> 00:04:00,180
web and this is the metaphor that I

00:03:58,709 --> 00:04:04,200
think is more apt for how front-end

00:04:00,180 --> 00:04:06,840
program run basically front-end programs

00:04:04,200 --> 00:04:09,239
don't run sequentially they the flow of

00:04:06,840 --> 00:04:12,060
execution is constantly interrupted by

00:04:09,239 --> 00:04:14,220
user input and responses from servers

00:04:12,060 --> 00:04:15,600
and a million other things we have way

00:04:14,220 --> 00:04:19,100
less control it's like an unruly

00:04:15,600 --> 00:04:21,209
classroom so in a way I think that

00:04:19,100 --> 00:04:25,260
interruptions are kind of the central

00:04:21,209 --> 00:04:27,630
challenge of front-end programming so

00:04:25,260 --> 00:04:30,570
how do we deal with them well let's

00:04:27,630 --> 00:04:32,310
let's learn from our history and look at

00:04:30,570 --> 00:04:36,449
a brief history of how we've dealt with

00:04:32,310 --> 00:04:38,870
interruptions on the front end so the

00:04:36,449 --> 00:04:41,190
first idea we came up with or that

00:04:38,870 --> 00:04:41,759
programmers came up with I wasn't one of

00:04:41,190 --> 00:04:43,979
them

00:04:41,759 --> 00:04:45,870
is something called the global event bus

00:04:43,979 --> 00:04:47,880
and so I want to take you all the way

00:04:45,870 --> 00:04:50,460
back to the very first programming that

00:04:47,880 --> 00:04:54,000
I ever did which was writing games in

00:04:50,460 --> 00:04:59,120
DOS that was an operating system in the

00:04:54,000 --> 00:04:59,120
early 90s and 80s for those of y'all who

00:05:00,740 --> 00:05:07,949
anyway one thing you could do in Dass is

00:05:05,610 --> 00:05:09,300
you could actually like take over the

00:05:07,949 --> 00:05:11,310
keyboard you could do something called

00:05:09,300 --> 00:05:14,220
overriding the bios and basically take

00:05:11,310 --> 00:05:16,050
control of the keyboard and so that you

00:05:14,220 --> 00:05:17,880
were stepping in between yourself and

00:05:16,050 --> 00:05:20,669
the hardware and like the rest of the

00:05:17,880 --> 00:05:22,889
computer and you would write some code

00:05:20,669 --> 00:05:24,600
they would basically take every key that

00:05:22,889 --> 00:05:28,320
got pressed and you put it in some kind

00:05:24,600 --> 00:05:29,970
of a buffer and then your main program

00:05:28,320 --> 00:05:32,729
would be some kind of a loop like this

00:05:29,970 --> 00:05:36,330
one right it would essentially be a loop

00:05:32,729 --> 00:05:39,419
that looked at the last user input and

00:05:36,330 --> 00:05:41,699
then did something with it and you know

00:05:39,419 --> 00:05:43,169
essentially on each step you'd have to

00:05:41,699 --> 00:05:46,110
check all of your inputs not just the

00:05:43,169 --> 00:05:48,600
keyboard this is a simpler version and

00:05:46,110 --> 00:05:50,789
then act on it until whatever happened

00:05:48,600 --> 00:05:52,320
that was gonna quit the program what

00:05:50,789 --> 00:05:54,240
happened there was an issue with that

00:05:52,320 --> 00:05:57,210
which is that if you wrote a bad

00:05:54,240 --> 00:05:59,460
keyboard handler like this this is not

00:05:57,210 --> 00:06:01,800
only gonna loop forever but you can't

00:05:59,460 --> 00:06:04,470
type anything on the keyboard so your

00:06:01,800 --> 00:06:06,509
computer will be fixed by pressing the

00:06:04,470 --> 00:06:08,850
button at the bottom of it back when we

00:06:06,509 --> 00:06:11,030
had desktop computers anyway this is

00:06:08,850 --> 00:06:13,259
improved upon a little bit with a

00:06:11,030 --> 00:06:16,050
Windows program in which I touched on

00:06:13,259 --> 00:06:17,849
which I did just a tiny bit of but it's

00:06:16,050 --> 00:06:20,099
basically the same idea the operating

00:06:17,849 --> 00:06:21,900
system took over talking directly to the

00:06:20,099 --> 00:06:24,550
hardware so you couldn't do that sort of

00:06:21,900 --> 00:06:26,620
mistake there but the basic

00:06:24,550 --> 00:06:30,010
is the same you read process and

00:06:26,620 --> 00:06:33,370
dispatch messages and then the main

00:06:30,010 --> 00:06:36,760
logic of your program would be to handle

00:06:33,370 --> 00:06:38,440
different messages right and they

00:06:36,760 --> 00:06:41,200
usually ended up looking like a big

00:06:38,440 --> 00:06:44,380
switch statement where you did something

00:06:41,200 --> 00:06:46,720
based on the message that was passed and

00:06:44,380 --> 00:06:48,780
that is that's sort of the pattern and

00:06:46,720 --> 00:06:52,870
that takes us all the way up to like

00:06:48,780 --> 00:06:54,550
1999 or so right um and and when we

00:06:52,870 --> 00:06:57,130
moved on and let that in the dust for

00:06:54,550 --> 00:07:00,160
much better things but actually if

00:06:57,130 --> 00:07:03,190
you've been programming recently that

00:07:00,160 --> 00:07:05,110
sort of pattern for like dealing for

00:07:03,190 --> 00:07:07,480
updating state based on dispatched

00:07:05,110 --> 00:07:09,640
messages if you happen to be programming

00:07:07,480 --> 00:07:13,690
react you might notice that that looks a

00:07:09,640 --> 00:07:15,910
lot like a reducer and in fact Redux

00:07:13,690 --> 00:07:17,140
contains a whole lot of the global event

00:07:15,910 --> 00:07:21,550
bus pattern

00:07:17,140 --> 00:07:26,410
so while Redux may be programming like

00:07:21,550 --> 00:07:27,760
it's 1999 in in in reality there are

00:07:26,410 --> 00:07:30,610
some good reasons they went that way and

00:07:27,760 --> 00:07:33,880
we're gonna see in a second but I want

00:07:30,610 --> 00:07:36,340
to go ahead and move on to the observer

00:07:33,880 --> 00:07:37,720
pattern which is basic from redux this

00:07:36,340 --> 00:07:39,510
is how we've written front-end

00:07:37,720 --> 00:07:42,640
applications for the last several years

00:07:39,510 --> 00:07:44,500
to do before we get into that I want to

00:07:42,640 --> 00:07:45,940
I need to make a short digression if you

00:07:44,500 --> 00:07:49,900
all don't mind into the world of

00:07:45,940 --> 00:07:51,610
influencers so and and it's gonna help

00:07:49,900 --> 00:07:55,630
us understand the observer pattern I

00:07:51,610 --> 00:07:58,600
promise so let's say you are a content

00:07:55,630 --> 00:07:59,950
creator on the internet and you know

00:07:58,600 --> 00:08:01,090
with your typewriter you have something

00:07:59,950 --> 00:08:03,850
very important to say and you're

00:08:01,090 --> 00:08:06,850
wondering how will people see my content

00:08:03,850 --> 00:08:08,530
right so in the pre-internet age you

00:08:06,850 --> 00:08:11,260
kind of had to be like Liam Neeson and

00:08:08,530 --> 00:08:12,940
you had to track down anybody who you

00:08:11,260 --> 00:08:16,390
wanted to see your content and just like

00:08:12,940 --> 00:08:19,720
force them to watch it but fortunately

00:08:16,390 --> 00:08:22,570
now we have a better way we we see we

00:08:19,720 --> 00:08:25,540
have like a contract I is a contract

00:08:22,570 --> 00:08:28,860
content creator promise to publish

00:08:25,540 --> 00:08:33,400
content and then you as my adoring fans

00:08:28,860 --> 00:08:36,250
use one of our many and numerous scary

00:08:33,400 --> 00:08:38,230
social media surveillance platforms to

00:08:36,250 --> 00:08:41,340
subscribe to it

00:08:38,230 --> 00:08:43,800
and then when I publish new content you

00:08:41,340 --> 00:08:46,120
will get you'll essentially

00:08:43,800 --> 00:08:48,520
automatically get notified without me

00:08:46,120 --> 00:08:51,540
having to go track you down right so

00:08:48,520 --> 00:08:54,340
this in short is the observer pattern

00:08:51,540 --> 00:08:56,770
here our influencer is called the

00:08:54,340 --> 00:08:58,570
subject and they essentially promise

00:08:56,770 --> 00:09:02,550
that they will admit events in the

00:08:58,570 --> 00:09:05,020
future and then you have an observer who

00:09:02,550 --> 00:09:07,420
subscribes to those events and then can

00:09:05,020 --> 00:09:09,190
act on them so that's the that's the

00:09:07,420 --> 00:09:11,170
basic pattern and you actually probably

00:09:09,190 --> 00:09:12,730
use it every day you probably use this

00:09:11,170 --> 00:09:14,560
in your JavaScript code without knowing

00:09:12,730 --> 00:09:20,890
it I'm gonna look at a really short

00:09:14,560 --> 00:09:24,550
real-world example and so we use this

00:09:20,890 --> 00:09:26,740
Paso Sun yeah still I'm still like

00:09:24,550 --> 00:09:28,420
rewinding myself from the beginning of

00:09:26,740 --> 00:09:32,070
this and getting myself under the right

00:09:28,420 --> 00:09:33,480
slides so sorry if I'm catching up but

00:09:32,070 --> 00:09:37,030
okay

00:09:33,480 --> 00:09:41,650
so let's say that we have like a DOM and

00:09:37,030 --> 00:09:44,110
the Dom has a toggle switch and and we

00:09:41,650 --> 00:09:46,270
want to make it so that when you click

00:09:44,110 --> 00:09:48,190
on that toggle switch it changes

00:09:46,270 --> 00:09:49,930
something from on to off so we have our

00:09:48,190 --> 00:09:52,600
toggle switch there's there there we've

00:09:49,930 --> 00:09:54,940
looked it up and then we have a function

00:09:52,600 --> 00:09:56,770
that is going to look at another element

00:09:54,940 --> 00:09:58,870
in the Dom and basically switch its

00:09:56,770 --> 00:10:01,270
value from on to off right so this is a

00:09:58,870 --> 00:10:02,770
pure function and then we have the and

00:10:01,270 --> 00:10:06,180
then we have this element so the way

00:10:02,770 --> 00:10:12,370
that we connect these two is we

00:10:06,180 --> 00:10:14,500
essentially subscribe the we subscribe

00:10:12,370 --> 00:10:18,160
to mouse clicks on the toggle switch and

00:10:14,500 --> 00:10:20,890
then pass it to this function which is

00:10:18,160 --> 00:10:23,380
now an event handler right it's it is

00:10:20,890 --> 00:10:25,150
now an observer of the quick events on

00:10:23,380 --> 00:10:26,380
the toggle switch and that means that

00:10:25,150 --> 00:10:28,990
when we click the toggle switch will

00:10:26,380 --> 00:10:31,240
switch the the text in that other

00:10:28,990 --> 00:10:32,800
element so that's the basics of the

00:10:31,240 --> 00:10:38,140
observer pattern you've probably been

00:10:32,800 --> 00:10:39,550
using it without knowing so um cool so

00:10:38,140 --> 00:10:41,820
there's some really cool advantages here

00:10:39,550 --> 00:10:41,820
right

00:10:45,010 --> 00:10:48,940
it's way simpler than the global event

00:10:47,200 --> 00:10:51,340
bus right like we didn't have to write a

00:10:48,940 --> 00:10:53,260
giant loop we didn't have to write a big

00:10:51,340 --> 00:10:54,970
switch statement we just attached to

00:10:53,260 --> 00:10:55,750
what we cared about and so it's really

00:10:54,970 --> 00:10:57,550
localized

00:10:55,750 --> 00:10:59,050
right you just subscribe to the only the

00:10:57,550 --> 00:11:01,210
things you care about and then you

00:10:59,050 --> 00:11:03,280
process them when they happen the

00:11:01,210 --> 00:11:06,700
downside is that you have to set up

00:11:03,280 --> 00:11:09,490
subscriptions which start initially

00:11:06,700 --> 00:11:12,400
doesn't sound like a pain too much of a

00:11:09,490 --> 00:11:14,080
pain but there's a take home exercise I

00:11:12,400 --> 00:11:15,580
highly encourage you to try implementing

00:11:14,080 --> 00:11:17,080
drag and drop or if you've ever done

00:11:15,580 --> 00:11:19,500
this implementing drag and drop with

00:11:17,080 --> 00:11:23,140
like Mouse down mouse up and mouse over

00:11:19,500 --> 00:11:24,310
it's it's quite a challenge and a lot of

00:11:23,140 --> 00:11:26,920
the problem is that you're actually

00:11:24,310 --> 00:11:28,030
mixing concerns right you have you're on

00:11:26,920 --> 00:11:32,320
the one hand you're handling events

00:11:28,030 --> 00:11:33,670
right you are so you have these event

00:11:32,320 --> 00:11:37,030
handlers but then the event handlers

00:11:33,670 --> 00:11:39,550
themselves have to also set up other

00:11:37,030 --> 00:11:41,230
subscribers other event handlers cuz

00:11:39,550 --> 00:11:42,580
like basically when you when you do the

00:11:41,230 --> 00:11:44,200
Mouse down then you want to start

00:11:42,580 --> 00:11:45,460
tracking Mouse move and then when you do

00:11:44,200 --> 00:11:47,170
that get the mouse up you want to stop

00:11:45,460 --> 00:11:48,250
tracking Mouse move so there's a lot of

00:11:47,170 --> 00:11:52,300
different logic it gets pretty

00:11:48,250 --> 00:11:53,770
complicated and the observer pattern is

00:11:52,300 --> 00:11:56,200
really great and it's been around a long

00:11:53,770 --> 00:11:58,480
time it's reliable but it's not really

00:11:56,200 --> 00:12:00,880
perfect so this is my theory of how

00:11:58,480 --> 00:12:04,660
redux got created is that the Redux

00:12:00,880 --> 00:12:07,030
creators we're looking at this global

00:12:04,660 --> 00:12:08,170
event bus we're looking at the observer

00:12:07,030 --> 00:12:09,580
pattern and then they saw the global

00:12:08,170 --> 00:12:11,380
event bus and they were like maybe

00:12:09,580 --> 00:12:13,270
there's something valuable going on here

00:12:11,380 --> 00:12:15,580
but you might be wondering like maybe

00:12:13,270 --> 00:12:16,630
there's just a better way to do all this

00:12:15,580 --> 00:12:18,970
yeah

00:12:16,630 --> 00:12:21,840
so that's kind of the rest of my talk

00:12:18,970 --> 00:12:24,550
this is about how you can reuse a

00:12:21,840 --> 00:12:27,910
functional reactive programming to write

00:12:24,550 --> 00:12:31,690
front ends like a boss I want to return

00:12:27,910 --> 00:12:35,560
to my original metaphor of the the

00:12:31,690 --> 00:12:37,330
middle school classroom and actually in

00:12:35,560 --> 00:12:38,920
reference to the speaker I did actually

00:12:37,330 --> 00:12:41,080
teach but the lies that I taught middle

00:12:38,920 --> 00:12:42,460
school not high school which is arguably

00:12:41,080 --> 00:12:44,190
even harder but it wouldn't matter

00:12:42,460 --> 00:12:47,440
either way because I was terrible at it

00:12:44,190 --> 00:12:49,150
and and this this is not a talk about

00:12:47,440 --> 00:12:51,400
how to be a bad teachers is about how

00:12:49,150 --> 00:12:53,170
good teachers handle situations and if

00:12:51,400 --> 00:12:55,060
you've ever like watched a good teacher

00:12:53,170 --> 00:12:57,100
in action they're kind of like they're

00:12:55,060 --> 00:12:58,870
cut a Jedi like right like they have

00:12:57,100 --> 00:13:01,810
this ability to like like Oh

00:12:58,870 --> 00:13:03,430
be one the students into like thinking

00:13:01,810 --> 00:13:06,220
this is the lesson they're looking for

00:13:03,430 --> 00:13:09,910
right and and so how do they do that

00:13:06,220 --> 00:13:12,160
right they they do it the first rule is

00:13:09,910 --> 00:13:14,020
that like the lesson plan is not like a

00:13:12,160 --> 00:13:16,630
series of steps it's not a plan it's

00:13:14,020 --> 00:13:18,130
kind of more of a guide because if they

00:13:16,630 --> 00:13:21,820
treat it like a plan they're just gonna

00:13:18,130 --> 00:13:23,740
get interrupted instead teaching you'd

00:13:21,820 --> 00:13:26,830
almost think of actual teaching as a

00:13:23,740 --> 00:13:30,010
series of plan responses to

00:13:26,830 --> 00:13:33,550
interruptions right and really good

00:13:30,010 --> 00:13:34,720
teachers know how to not just respond to

00:13:33,550 --> 00:13:38,080
the interruption but to sort of like

00:13:34,720 --> 00:13:40,570
fold that interruption back into the

00:13:38,080 --> 00:13:41,920
rest of the lesson right and they and

00:13:40,570 --> 00:13:44,500
they have this wayward just sort of like

00:13:41,920 --> 00:13:47,770
each interruption gets folded into the

00:13:44,500 --> 00:13:49,240
stream of learning that always ends up

00:13:47,770 --> 00:13:51,400
on the key objectives of what they're

00:13:49,240 --> 00:13:53,850
trying to teach um so in that sense it

00:13:51,400 --> 00:13:55,870
almost is Jedi mind control um

00:13:53,850 --> 00:13:58,029
PSA is someone who's really bad at

00:13:55,870 --> 00:14:06,880
teaching I highly encourage our society

00:13:58,029 --> 00:14:08,800
to pay teachers a lot so what does this

00:14:06,880 --> 00:14:12,670
have to do with programming how do we

00:14:08,800 --> 00:14:15,070
write programs that where we where we

00:14:12,670 --> 00:14:17,830
write them as planned reactions to

00:14:15,070 --> 00:14:20,200
interruptions as our core concept well

00:14:17,830 --> 00:14:21,970
so I want to take a another digression

00:14:20,200 --> 00:14:24,400
into just some pure conceptual stuff

00:14:21,970 --> 00:14:26,950
let's look at this statement really

00:14:24,400 --> 00:14:29,110
basic y equals x plus three you've

00:14:26,950 --> 00:14:30,790
probably written something of this sort

00:14:29,110 --> 00:14:33,880
in your programs at some point in your

00:14:30,790 --> 00:14:35,709
programming career and if we think about

00:14:33,880 --> 00:14:40,209
it in our traditional sense in the

00:14:35,709 --> 00:14:42,940
imperative programming world this is an

00:14:40,209 --> 00:14:45,010
assignment right you're saying that Y is

00:14:42,940 --> 00:14:47,860
gonna be equal to whatever the current

00:14:45,010 --> 00:14:49,180
value of x is plus three one time and

00:14:47,860 --> 00:14:52,480
now it has that value and it will be

00:14:49,180 --> 00:14:54,130
that way for a while um but and I can

00:14:52,480 --> 00:14:55,360
tell you already there's a missing image

00:14:54,130 --> 00:14:58,570
coming up in this one I'm not sure what

00:14:55,360 --> 00:15:00,000
happened if if we think about math in

00:14:58,570 --> 00:15:03,279
math it actually has a different meaning

00:15:00,000 --> 00:15:05,770
in math y equals x plus three can

00:15:03,279 --> 00:15:08,350
express an entire graph right you can

00:15:05,770 --> 00:15:11,230
express its expresses uh what is it like

00:15:08,350 --> 00:15:12,610
I slope-intercept thing on a graph I'll

00:15:11,230 --> 00:15:15,220
have to talk to the math majors

00:15:12,610 --> 00:15:16,660
afterwards but anyway that's what it

00:15:15,220 --> 00:15:21,160
should there should be a graph there

00:15:16,660 --> 00:15:23,260
there's not so so it doesn't have to

00:15:21,160 --> 00:15:26,529
mean that and if we look at reactive

00:15:23,260 --> 00:15:29,320
programming we we could with this

00:15:26,529 --> 00:15:31,649
statement y equals x plus three could

00:15:29,320 --> 00:15:35,110
actually express a relationship between

00:15:31,649 --> 00:15:38,260
y and X and it's essentially saying that

00:15:35,110 --> 00:15:40,930
X is a value that could change over time

00:15:38,260 --> 00:15:44,260
and Y is a value that will always be

00:15:40,930 --> 00:15:46,870
that value plus 3 right so do you

00:15:44,260 --> 00:15:56,260
imagine oh my god what's going on with

00:15:46,870 --> 00:15:57,190
my images okay I'm not gonna

00:15:56,260 --> 00:15:59,890
troubleshoot this cuz we don't have

00:15:57,190 --> 00:16:03,130
enough time sorry this was working as of

00:15:59,890 --> 00:16:09,940
like two seconds ago you can imagine a

00:16:03,130 --> 00:16:13,060
line with lots of expo and you can

00:16:09,940 --> 00:16:16,140
imagine why as another line that doesn't

00:16:13,060 --> 00:16:18,670
look like a broken piece of paper and

00:16:16,140 --> 00:16:20,709
and and there's another there's another

00:16:18,670 --> 00:16:23,410
line of values under it and each value

00:16:20,709 --> 00:16:26,680
for X has a value for Y underneath it

00:16:23,410 --> 00:16:32,529
that is that value plus 3 and then you

00:16:26,680 --> 00:16:34,540
can even get another missing and so

00:16:32,529 --> 00:16:37,300
you've said those are both like a stream

00:16:34,540 --> 00:16:39,250
of data values over time but a stream of

00:16:37,300 --> 00:16:40,810
could be a stream of anything it could

00:16:39,250 --> 00:16:43,360
be a stream of mouse-clicks over time

00:16:40,810 --> 00:16:45,339
you can imagine just like every time the

00:16:43,360 --> 00:16:47,860
user clicks a mouse you add a new value

00:16:45,339 --> 00:16:50,260
onto this stream right um

00:16:47,860 --> 00:16:52,839
so reactive programming is essentially

00:16:50,260 --> 00:16:57,850
programming with data with streams of

00:16:52,839 --> 00:17:00,070
data and that's all well and good but

00:16:57,850 --> 00:17:02,980
how would we program this on a computer

00:17:00,070 --> 00:17:05,470
which is basically written to use to

00:17:02,980 --> 00:17:07,929
work imperative ly to execute

00:17:05,470 --> 00:17:10,750
instructions we need some kind of

00:17:07,929 --> 00:17:14,380
pattern where like every time a value

00:17:10,750 --> 00:17:17,199
changes the you could like subscribe to

00:17:14,380 --> 00:17:19,959
it and get notified that it was changing

00:17:17,199 --> 00:17:21,400
and I feel like we've heard of that

00:17:19,959 --> 00:17:23,620
pattern it's actually the observer

00:17:21,400 --> 00:17:24,419
pattern we just need to basically extend

00:17:23,620 --> 00:17:26,819
it make it a

00:17:24,419 --> 00:17:31,169
better to handle kind of like arbitrary

00:17:26,819 --> 00:17:32,999
things right so in reactive programming

00:17:31,169 --> 00:17:36,960
we have a concept called an observable

00:17:32,999 --> 00:17:39,210
and an observable is a is essentially a

00:17:36,960 --> 00:17:40,919
value that changes over time that we can

00:17:39,210 --> 00:17:45,539
listen for changes on but it could be

00:17:40,919 --> 00:17:47,700
anything so let's imagine a value as an

00:17:45,539 --> 00:17:50,039
observable so let's imagine we have a

00:17:47,700 --> 00:17:52,080
value X that is a value that changes

00:17:50,039 --> 00:17:54,389
over time that we can subscribe to and

00:17:52,080 --> 00:17:57,960
here you could write out the changes to

00:17:54,389 --> 00:18:00,600
X and then you can imagine if you wanted

00:17:57,960 --> 00:18:02,909
to write out the values of Y you could

00:18:00,600 --> 00:18:07,320
just subscribe to the changes on X and

00:18:02,909 --> 00:18:09,840
log X plus 3 right but what if we

00:18:07,320 --> 00:18:14,669
actually wanted to listen to the values

00:18:09,840 --> 00:18:16,830
on Y right so to figure this out let's

00:18:14,669 --> 00:18:19,649
uh let's rewind for a second and just

00:18:16,830 --> 00:18:22,049
imagine X as an array right so it's an

00:18:19,649 --> 00:18:25,139
array of values and if we wanted to get

00:18:22,049 --> 00:18:26,879
the array of Y values from this in

00:18:25,139 --> 00:18:28,739
JavaScript and a lot of programming

00:18:26,879 --> 00:18:30,450
languages we could use the map operation

00:18:28,739 --> 00:18:32,759
which takes essentially an array of

00:18:30,450 --> 00:18:34,950
values goes through each one transforms

00:18:32,759 --> 00:18:36,509
it and gives you back the array where

00:18:34,950 --> 00:18:40,980
each values been transformed by the

00:18:36,509 --> 00:18:42,989
function so an observable actually works

00:18:40,980 --> 00:18:45,779
the exact same way here we have an

00:18:42,989 --> 00:18:47,669
observable of these numbers and here

00:18:45,779 --> 00:18:49,080
they would just be output it immediately

00:18:47,669 --> 00:18:53,549
but we could think of them as happening

00:18:49,080 --> 00:18:57,149
over time and we could think of Y as the

00:18:53,549 --> 00:18:59,549
observable X mapped so that each value

00:18:57,149 --> 00:19:01,409
is the emitted value plus 3 and that

00:18:59,549 --> 00:19:03,600
produces another observable we could

00:19:01,409 --> 00:19:07,019
subscribe to so this is where the magic

00:19:03,600 --> 00:19:08,789
of reactive programming happens you have

00:19:07,019 --> 00:19:10,980
these observables which you can compose

00:19:08,789 --> 00:19:12,899
and continue to sort of like build up to

00:19:10,980 --> 00:19:15,450
do really awesome things so let's look

00:19:12,899 --> 00:19:17,220
at some cool stuff um it's gonna be our

00:19:15,450 --> 00:19:19,139
first interactive demo and I need to get

00:19:17,220 --> 00:19:22,379
over to the confidence screen given

00:19:19,139 --> 00:19:25,169
there ok so here we have a ball right

00:19:22,379 --> 00:19:27,899
and uh PS a full disclosure this is

00:19:25,169 --> 00:19:29,759
animated with a library but we could

00:19:27,899 --> 00:19:33,529
let's say we have these two buttons

00:19:29,759 --> 00:19:36,599
right and the buttons we can use them to

00:19:33,529 --> 00:19:38,250
we can use them to make the ball go left

00:19:36,599 --> 00:19:41,250
and right right

00:19:38,250 --> 00:19:43,289
so let's imagine that each time we click

00:19:41,250 --> 00:19:46,350
on one of these buttons it's an

00:19:43,289 --> 00:19:47,730
observable right and so we have our left

00:19:46,350 --> 00:19:50,159
button clicks and a right button clicks

00:19:47,730 --> 00:19:52,110
and if I click on the right button you

00:19:50,159 --> 00:19:55,590
we can imagine that we would get a quick

00:19:52,110 --> 00:19:57,450
right so then what if we take each right

00:19:55,590 --> 00:19:59,730
button click and translate it to the

00:19:57,450 --> 00:20:01,260
string right and each left button click

00:19:59,730 --> 00:20:05,460
and translate it to the string left

00:20:01,260 --> 00:20:07,590
right so now if I quick it becomes right

00:20:05,460 --> 00:20:11,640
and if I could if I click left it

00:20:07,590 --> 00:20:13,500
becomes left so then let's now further

00:20:11,640 --> 00:20:15,240
imagine that we make an observable that

00:20:13,500 --> 00:20:17,370
uses the left click position in the

00:20:15,240 --> 00:20:20,490
right position and just takes whatever

00:20:17,370 --> 00:20:22,650
the last the last one to admit is so now

00:20:20,490 --> 00:20:25,200
we have like a left click a left click

00:20:22,650 --> 00:20:27,210
and a left click so the position is left

00:20:25,200 --> 00:20:29,220
and if we had a right click then the

00:20:27,210 --> 00:20:31,440
position is right so you can see that

00:20:29,220 --> 00:20:33,600
basically by doing this the position is

00:20:31,440 --> 00:20:36,150
now an observable of the correct

00:20:33,600 --> 00:20:37,860
position for the ball to be in right now

00:20:36,150 --> 00:20:40,080
the actual animation in this case is

00:20:37,860 --> 00:20:43,169
being done with this library called pose

00:20:40,080 --> 00:20:46,350
but um you can you could I met but it's

00:20:43,169 --> 00:20:48,090
not that complicated to do so um how

00:20:46,350 --> 00:20:49,440
this actually works in code and here's

00:20:48,090 --> 00:20:51,330
where we're gonna introduce the library

00:20:49,440 --> 00:20:54,030
that I that we used to do reactive

00:20:51,330 --> 00:20:56,850
programming in JavaScript it's called rx

00:20:54,030 --> 00:20:58,950
yes and we have two functions here to

00:20:56,850 --> 00:21:01,230
create observables one that it makes it

00:20:58,950 --> 00:21:03,150
observable from an event and one called

00:21:01,230 --> 00:21:05,610
merge which takes two observables and

00:21:03,150 --> 00:21:08,309
outputs that observable that emits both

00:21:05,610 --> 00:21:10,230
of that both of their events so um and

00:21:08,309 --> 00:21:12,929
then we have some operators we have a

00:21:10,230 --> 00:21:14,400
map operator a start with operator and

00:21:12,929 --> 00:21:15,900
delay we actually aren't using here but

00:21:14,400 --> 00:21:20,669
that's what is being used in those

00:21:15,900 --> 00:21:22,770
animations of the actual signals and so

00:21:20,669 --> 00:21:25,409
here you have like a left button and a

00:21:22,770 --> 00:21:26,909
right button that are we just looked up

00:21:25,409 --> 00:21:30,090
from the Dom and then we've made an

00:21:26,909 --> 00:21:33,900
event stream of both of their clicks and

00:21:30,090 --> 00:21:37,289
then this is actually mapping each one

00:21:33,900 --> 00:21:40,770
from a quick to a string and in actual

00:21:37,289 --> 00:21:42,539
rxjs code we use this pipe operator and

00:21:40,770 --> 00:21:43,710
then we put our different operations in

00:21:42,539 --> 00:21:45,630
the middle and the cool thing about that

00:21:43,710 --> 00:21:48,840
is you can do multiple of them so here

00:21:45,630 --> 00:21:51,150
we're piping left the left and right to

00:21:48,840 --> 00:21:53,400
position oh sorry

00:21:51,150 --> 00:21:55,650
and then finally we're merging them

00:21:53,400 --> 00:21:57,210
right we are merging we're using that

00:21:55,650 --> 00:21:58,680
merge operator to take the two of them

00:21:57,210 --> 00:22:00,059
and we're adding one other thing which

00:21:58,680 --> 00:22:04,620
is we want to start it in the left

00:22:00,059 --> 00:22:08,760
position cool so how do I actually use

00:22:04,620 --> 00:22:10,410
this in my daily life you're all excited

00:22:08,760 --> 00:22:13,200
this looks cool you saw a bouncy ball

00:22:10,410 --> 00:22:15,210
but how do we actually do this um well I

00:22:13,200 --> 00:22:16,530
want our first stop talk about something

00:22:15,210 --> 00:22:19,860
that I noticed how many of you all went

00:22:16,530 --> 00:22:21,720
to Laurie boss's talk on NPM yeah a

00:22:19,860 --> 00:22:23,490
bunch of you you all remember this graph

00:22:21,720 --> 00:22:26,730
about the react ecosystem so when he

00:22:23,490 --> 00:22:29,220
headed up I was looking at it and I was

00:22:26,730 --> 00:22:33,570
like wait a second what's that green

00:22:29,220 --> 00:22:35,880
line wait isn't that I was like holy

00:22:33,570 --> 00:22:40,559
moly it's rjs and it's got more

00:22:35,880 --> 00:22:42,030
downloads than a react so this short the

00:22:40,559 --> 00:22:43,920
short answer we actually spent some time

00:22:42,030 --> 00:22:45,960
yesterday I spent the time with Laurie

00:22:43,920 --> 00:22:48,780
try to figure out how this happened as

00:22:45,960 --> 00:22:52,140
it turns out rxjs is used by some key

00:22:48,780 --> 00:22:54,600
libraries namely angular and es lint or

00:22:52,140 --> 00:22:55,530
dependencies thereof so it's it's

00:22:54,600 --> 00:22:57,270
installed by that

00:22:55,530 --> 00:23:00,000
um so even if you are programming with

00:22:57,270 --> 00:23:01,500
rxjs you actually are it's somewhere

00:23:00,000 --> 00:23:02,910
it's it's a lot of the people whose

00:23:01,500 --> 00:23:08,940
libraries you depend on program with

00:23:02,910 --> 00:23:10,140
rxjs um so but i want to talk about how

00:23:08,940 --> 00:23:12,270
you would use it to actually write

00:23:10,140 --> 00:23:14,100
programs of your own I mean I want to

00:23:12,270 --> 00:23:15,600
address two areas one is first how do I

00:23:14,100 --> 00:23:19,520
actually architect a real application

00:23:15,600 --> 00:23:24,809
with rxjs and how do i integrate this

00:23:19,520 --> 00:23:26,550
into my like applications today so let's

00:23:24,809 --> 00:23:29,250
talk briefly about a much more

00:23:26,550 --> 00:23:31,500
real-world example I mean here we have a

00:23:29,250 --> 00:23:34,530
login form one of our classic you know

00:23:31,500 --> 00:23:36,480
software challenges you have to like be

00:23:34,530 --> 00:23:38,309
able to enter a user and password when

00:23:36,480 --> 00:23:40,110
you submit you probably want to disable

00:23:38,309 --> 00:23:42,750
everything until it comes back with the

00:23:40,110 --> 00:23:44,340
response you have like a user you want

00:23:42,750 --> 00:23:46,110
to give a message or something you know

00:23:44,340 --> 00:23:47,850
the server tells you that something went

00:23:46,110 --> 00:23:51,059
wrong you've got somewhere in here an

00:23:47,850 --> 00:23:53,520
asynchronous call out to a back-end so

00:23:51,059 --> 00:23:55,920
there's a lot going on here right and so

00:23:53,520 --> 00:23:57,900
what so in assembling this we could

00:23:55,920 --> 00:24:00,620
start with three observables a username

00:23:57,900 --> 00:24:03,090
a password and a submit button and

00:24:00,620 --> 00:24:04,490
basically the user name would emit any

00:24:03,090 --> 00:24:06,830
time that I changed

00:24:04,490 --> 00:24:09,020
the value of the username and the

00:24:06,830 --> 00:24:10,880
password would admit every time that I

00:24:09,020 --> 00:24:13,310
changed the value of the password and

00:24:10,880 --> 00:24:15,890
the submit button you can think of just

00:24:13,310 --> 00:24:18,650
going whenever I quit the Smith so then

00:24:15,890 --> 00:24:20,690
if I were to express the act of

00:24:18,650 --> 00:24:24,050
attempting to login it would essentially

00:24:20,690 --> 00:24:26,690
be the every time I click the submit

00:24:24,050 --> 00:24:28,640
button take the last value of the

00:24:26,690 --> 00:24:31,310
username and password and it's an

00:24:28,640 --> 00:24:32,930
attempt a login with them so here like

00:24:31,310 --> 00:24:35,510
so essentially with that if I actually

00:24:32,930 --> 00:24:37,280
do is if I Smith here it takes those

00:24:35,510 --> 00:24:39,740
last values and you can see those the

00:24:37,280 --> 00:24:42,740
username and password there are the last

00:24:39,740 --> 00:24:45,800
thing that was emitted from those from

00:24:42,740 --> 00:24:49,190
these input boxes and so then once I

00:24:45,800 --> 00:24:51,500
have a login attempt then I need to

00:24:49,190 --> 00:24:52,790
process the response that gets backward

00:24:51,500 --> 00:24:54,380
then I get back from the server and that

00:24:52,790 --> 00:24:56,960
could be either a success or a fail

00:24:54,380 --> 00:25:00,590
right so I can so basically once that

00:24:56,960 --> 00:25:02,870
comes back I'm gonna go ahead and I get

00:25:00,590 --> 00:25:05,270
my attempt and then I get a response in

00:25:02,870 --> 00:25:07,280
that case it's a failure right once I

00:25:05,270 --> 00:25:10,130
have that I can do some more stuff I

00:25:07,280 --> 00:25:12,290
could filter down to just failures and

00:25:10,130 --> 00:25:15,260
just successes I might be able to derive

00:25:12,290 --> 00:25:18,250
like a login in progress from the time

00:25:15,260 --> 00:25:20,480
between a login attempt and a login

00:25:18,250 --> 00:25:22,310
login response and that might be useful

00:25:20,480 --> 00:25:25,100
for like disabling all these inputs

00:25:22,310 --> 00:25:28,400
while the logon is happening and then I

00:25:25,100 --> 00:25:30,110
might have then once I have a failure I

00:25:28,400 --> 00:25:32,150
don't want to convert it to a message so

00:25:30,110 --> 00:25:33,950
I can display it on the screen and

00:25:32,150 --> 00:25:36,020
lastly if I have a success I might have

00:25:33,950 --> 00:25:38,380
a user token and I might use that to get

00:25:36,020 --> 00:25:41,780
some like protected data from the server

00:25:38,380 --> 00:25:43,220
so all taken all together you have like

00:25:41,780 --> 00:25:44,990
Kourt you could do quite a bit of

00:25:43,220 --> 00:25:46,250
functionality with observables and I'll

00:25:44,990 --> 00:25:49,340
show you the actual code for this in a

00:25:46,250 --> 00:25:51,530
second but you can see here like you see

00:25:49,340 --> 00:25:54,560
a failure message sort of trickling down

00:25:51,530 --> 00:25:56,420
into the fail the the final fail message

00:25:54,560 --> 00:25:58,820
and then over here on the login in

00:25:56,420 --> 00:26:00,350
progress you have like the you know it

00:25:58,820 --> 00:26:02,600
tracks whether or not you're logging in

00:26:00,350 --> 00:26:10,900
and then if we were to do a success

00:26:02,600 --> 00:26:10,900
which is J is calm and awesome then

00:26:11,220 --> 00:26:15,480
we get a success and that gets a user

00:26:13,830 --> 00:26:18,930
token and that gets a protected resource

00:26:15,480 --> 00:26:23,130
and then we get your final like save

00:26:18,930 --> 00:26:24,150
data so that's you can imagine it

00:26:23,130 --> 00:26:26,040
filtering around

00:26:24,150 --> 00:26:28,050
how would that actually happen in code

00:26:26,040 --> 00:26:29,970
it's not actually as complicated as you

00:26:28,050 --> 00:26:32,280
might think making that little graph is

00:26:29,970 --> 00:26:33,840
pretty complicated but um but writing

00:26:32,280 --> 00:26:35,940
the code to do this is not terrible

00:26:33,840 --> 00:26:39,570
let's just imagine we have an API with a

00:26:35,940 --> 00:26:41,400
login and a pretend with the login

00:26:39,570 --> 00:26:45,090
endpoint and a protected resource

00:26:41,400 --> 00:26:47,100
endpoint of some sort so there's our API

00:26:45,090 --> 00:26:49,500
and then let's just say we have our

00:26:47,100 --> 00:26:52,440
username password and submit button I

00:26:49,500 --> 00:26:55,710
will get to how those work tie into the

00:26:52,440 --> 00:26:57,900
actual UI in a second and then we can do

00:26:55,710 --> 00:27:02,220
our login attempt it just becomes the

00:26:57,900 --> 00:27:03,960
submit button with an operator from rxjs

00:27:02,220 --> 00:27:06,210
called with latest from which basically

00:27:03,960 --> 00:27:08,250
just says take the latest username and

00:27:06,210 --> 00:27:11,460
password and add it to whatever the

00:27:08,250 --> 00:27:15,360
login attempt whatever the whenever the

00:27:11,460 --> 00:27:17,790
submit button is quick and then we have

00:27:15,360 --> 00:27:22,440
a login response uses this amazing

00:27:17,790 --> 00:27:25,110
operator called merge map in in rxjs and

00:27:22,440 --> 00:27:27,000
here we actually make an API call which

00:27:25,110 --> 00:27:29,070
returns a promise which is not something

00:27:27,000 --> 00:27:32,250
that has an immediate value but if you

00:27:29,070 --> 00:27:33,600
use merge map it essentially takes you

00:27:32,250 --> 00:27:35,880
know you what you do when you make the

00:27:33,600 --> 00:27:37,830
API call if you were to just use map you

00:27:35,880 --> 00:27:40,560
would get a stream of promises but merge

00:27:37,830 --> 00:27:43,080
map will reduce those down to just their

00:27:40,560 --> 00:27:44,850
underlying values when they arrive so

00:27:43,080 --> 00:27:49,050
this actually gives you a stream of the

00:27:44,850 --> 00:27:51,840
responses and then the login in progress

00:27:49,050 --> 00:27:54,870
is just expressed as essentially every

00:27:51,840 --> 00:27:56,610
login attempt flipping it to true and

00:27:54,870 --> 00:27:59,880
every login response flipping it to

00:27:56,610 --> 00:28:02,820
false and starting with false right the

00:27:59,880 --> 00:28:04,770
login successes can be expressed by

00:28:02,820 --> 00:28:06,000
taking the login response and just like

00:28:04,770 --> 00:28:07,920
we would with an array we can use a

00:28:06,000 --> 00:28:09,930
filter operator right and here we're

00:28:07,920 --> 00:28:13,350
filtering and just taking the status and

00:28:09,930 --> 00:28:15,090
converting it to a success um and then a

00:28:13,350 --> 00:28:17,580
login failure would just be the same

00:28:15,090 --> 00:28:20,640
thing but but filtering on the status

00:28:17,580 --> 00:28:22,950
being failure a login failure message

00:28:20,640 --> 00:28:24,809
would be taking all the login failures

00:28:22,950 --> 00:28:26,820
and just piping them to extract

00:28:24,809 --> 00:28:30,720
to a map operation to extract the

00:28:26,820 --> 00:28:32,850
message a user token would be extracting

00:28:30,720 --> 00:28:34,440
a token out of the success responses and

00:28:32,850 --> 00:28:36,600
then we could start the whole set the

00:28:34,440 --> 00:28:38,580
whole sequence all over again to get the

00:28:36,600 --> 00:28:40,559
protected resource and here we're taking

00:28:38,580 --> 00:28:43,080
the user tokens and piping those to make

00:28:40,559 --> 00:28:46,200
an API request with the user token to

00:28:43,080 --> 00:28:47,519
get a protected resource so that's how

00:28:46,200 --> 00:28:49,080
you could do some very complex

00:28:47,519 --> 00:28:51,870
functionality and not a whole lot of

00:28:49,080 --> 00:28:53,429
code using arcs yes know that graph

00:28:51,870 --> 00:28:56,490
you've seen it's a really important

00:28:53,429 --> 00:28:57,749
concept in rxjs that the more you get

00:28:56,490 --> 00:28:59,700
into it I wish more people knew about

00:28:57,749 --> 00:29:02,519
this it's called a signal graph right

00:28:59,700 --> 00:29:04,259
and it's how data propagates through

00:29:02,519 --> 00:29:06,149
your program and it's a really useful

00:29:04,259 --> 00:29:08,009
tool for thinking about your programs

00:29:06,149 --> 00:29:12,990
and gosh darn it oh I figured it out

00:29:08,009 --> 00:29:16,619
it's SVG's so that's an SVG but it's an

00:29:12,990 --> 00:29:17,759
SVG of a real signal graph and we i've

00:29:16,619 --> 00:29:19,139
actually programmed on production

00:29:17,759 --> 00:29:21,600
applications where the whole team

00:29:19,139 --> 00:29:23,220
maintains this signal breath as a way of

00:29:21,600 --> 00:29:25,649
like producing a shared understanding

00:29:23,220 --> 00:29:27,179
between the whole team about how you're

00:29:25,649 --> 00:29:29,429
doing you know about basically how the

00:29:27,179 --> 00:29:32,399
data model of your entire application

00:29:29,429 --> 00:29:36,360
works so how would you use this in real

00:29:32,399 --> 00:29:37,919
life I'm getting real close so let's

00:29:36,360 --> 00:29:40,230
talk about integrating at natural stuff

00:29:37,919 --> 00:29:42,179
first of all if you use angular and I

00:29:40,230 --> 00:29:44,009
actually don't use angular but if you do

00:29:42,179 --> 00:29:45,600
use angular it's like basically baked

00:29:44,009 --> 00:29:47,129
into the framework at a million ways and

00:29:45,600 --> 00:29:50,129
there's a million really easy ways to

00:29:47,129 --> 00:29:51,960
use rxjs and angular also you might want

00:29:50,129 --> 00:29:54,330
to check out our ng rx do I also

00:29:51,960 --> 00:29:56,009
encourage you to like not that's sort of

00:29:54,330 --> 00:29:57,749
like a big library that kind of operates

00:29:56,009 --> 00:30:00,419
like Redux and I encourage you to like

00:29:57,749 --> 00:30:02,549
not jump right to using the the library

00:30:00,419 --> 00:30:04,919
and try learning a little bit more about

00:30:02,549 --> 00:30:07,350
how our X works but let's get to the

00:30:04,919 --> 00:30:09,210
question on everybody's mind about react

00:30:07,350 --> 00:30:11,129
because if you're if you're writing a

00:30:09,210 --> 00:30:12,960
program in react and you have reactive

00:30:11,129 --> 00:30:16,980
Jas wouldn't it be better to have like

00:30:12,960 --> 00:30:19,889
reactive in your react so there's good

00:30:16,980 --> 00:30:22,649
news I am here to offer you something in

00:30:19,889 --> 00:30:26,490
this there's actually a whole bunch of

00:30:22,649 --> 00:30:29,129
different ways to do to to integrate

00:30:26,490 --> 00:30:31,980
react with rxjs and and full disclosure

00:30:29,129 --> 00:30:34,710
i'm going to present my way as in the

00:30:31,980 --> 00:30:36,779
software that i wrote because i cause

00:30:34,710 --> 00:30:38,250
i'm talking but there are a lot of other

00:30:36,779 --> 00:30:39,570
great alternatives and i highly

00:30:38,250 --> 00:30:41,580
heard you to look at them so I wrote a

00:30:39,570 --> 00:30:43,560
library called rx react and it's a

00:30:41,580 --> 00:30:46,890
series of tools for integrating react

00:30:43,560 --> 00:30:48,930
with rxjs and in fact everything you've

00:30:46,890 --> 00:30:51,810
seen in those interactive demos was

00:30:48,930 --> 00:30:54,150
written with this with rx react and the

00:30:51,810 --> 00:30:56,850
way it works it's pretty simple actually

00:30:54,150 --> 00:30:58,500
right let's say you how this is in this

00:30:56,850 --> 00:31:00,420
example this is our box that's like

00:30:58,500 --> 00:31:04,230
moving backward and forward in our inner

00:31:00,420 --> 00:31:06,120
screen right and what we do with rx

00:31:04,230 --> 00:31:08,670
react is we define something called a

00:31:06,120 --> 00:31:10,140
view model this is similar to this is

00:31:08,670 --> 00:31:12,450
basically drawing from a pattern called

00:31:10,140 --> 00:31:14,400
model view viewmodel which basically a

00:31:12,450 --> 00:31:16,860
view model is like the thing that

00:31:14,400 --> 00:31:19,020
supplies the data to the to the view

00:31:16,860 --> 00:31:22,080
which just does the presentation right

00:31:19,020 --> 00:31:24,480
um in this case with a view model it

00:31:22,080 --> 00:31:27,630
connects our observables into props in

00:31:24,480 --> 00:31:32,130
react in this case here's our inputs and

00:31:27,630 --> 00:31:33,750
the and for each input it's going to

00:31:32,130 --> 00:31:36,030
convert the observable here we have a

00:31:33,750 --> 00:31:37,830
position observable into a prop called

00:31:36,030 --> 00:31:40,320
position any time it up that's gonna

00:31:37,830 --> 00:31:41,580
update any time it updates right oh

00:31:40,320 --> 00:31:45,120
sorry

00:31:41,580 --> 00:31:46,860
and and so each inputs an observable it

00:31:45,120 --> 00:31:48,960
becomes a prop and you define this as a

00:31:46,860 --> 00:31:51,990
view model and then you import from this

00:31:48,960 --> 00:31:56,220
library rx react core because rx react

00:31:51,990 --> 00:31:58,620
was already taken on NPM you import a

00:31:56,220 --> 00:32:00,330
function called with view model and view

00:31:58,620 --> 00:32:03,360
model is just a higher-order component

00:32:00,330 --> 00:32:06,450
that takes your view model and binds it

00:32:03,360 --> 00:32:07,950
to your regular components so now this

00:32:06,450 --> 00:32:10,920
component anytime the positions

00:32:07,950 --> 00:32:12,720
observable updates it will rerender with

00:32:10,920 --> 00:32:17,040
a new position prop and you can do the

00:32:12,720 --> 00:32:18,690
same thing actually for for events you

00:32:17,040 --> 00:32:21,630
can you you have these things called

00:32:18,690 --> 00:32:24,600
outputs and it for an output each value

00:32:21,630 --> 00:32:26,190
here is some kind of is a special type

00:32:24,600 --> 00:32:28,980
of observable called a subject and you

00:32:26,190 --> 00:32:32,340
saw those in the slide earlier and

00:32:28,980 --> 00:32:34,530
essentially it converts it from so this

00:32:32,340 --> 00:32:36,300
subject the left click subject you will

00:32:34,530 --> 00:32:38,700
get in your component you'll get a

00:32:36,300 --> 00:32:41,580
property called on click which is itself

00:32:38,700 --> 00:32:44,250
a function that when you call will put a

00:32:41,580 --> 00:32:46,770
new value on to this on click observable

00:32:44,250 --> 00:32:49,170
and omit it right so this basically it

00:32:46,770 --> 00:32:51,970
converts from an observable emitting of

00:32:49,170 --> 00:32:54,519
a from a function to an emission

00:32:51,970 --> 00:32:56,529
an event on an observable you can

00:32:54,519 --> 00:32:58,570
actually and and actually you can do

00:32:56,529 --> 00:33:00,820
pretty complicated stuff pretty easily

00:32:58,570 --> 00:33:03,460
this is this right here is the code for

00:33:00,820 --> 00:33:05,289
that entire login form that I showed you

00:33:03,460 --> 00:33:08,320
a second ago we have our username and

00:33:05,289 --> 00:33:10,389
our password as inputs log you know our

00:33:08,320 --> 00:33:13,539
login and progress state our login

00:33:10,389 --> 00:33:15,549
failure messages and then we have we

00:33:13,539 --> 00:33:16,990
also have a username and password change

00:33:15,549 --> 00:33:18,759
which are the outgoing and this has to

00:33:16,990 --> 00:33:20,230
do with the way that react does inputs

00:33:18,759 --> 00:33:21,909
where you have to both like send it the

00:33:20,230 --> 00:33:23,379
new value and read the events if you

00:33:21,909 --> 00:33:24,700
want to do a controlled input and you

00:33:23,379 --> 00:33:27,129
have a submit button and that's all

00:33:24,700 --> 00:33:29,919
that's needed to connect that login form

00:33:27,129 --> 00:33:31,929
um so now we come to the final portion

00:33:29,919 --> 00:33:33,370
of this talk which is called the used

00:33:31,929 --> 00:33:35,049
car sales portion because I'm gonna go

00:33:33,370 --> 00:33:37,029
very quickly through all the amazing

00:33:35,049 --> 00:33:38,830
cool things you get when you use RX

00:33:37,029 --> 00:33:43,179
react if you act now

00:33:38,830 --> 00:33:44,649
so one thing it has is these view model

00:33:43,179 --> 00:33:48,159
factories like let's say you want to

00:33:44,649 --> 00:33:50,799
change the observables based on the

00:33:48,159 --> 00:33:52,899
props external to the component changing

00:33:50,799 --> 00:33:55,570
well so you can use a view model Factory

00:33:52,899 --> 00:33:57,610
to do that and that you use the same

00:33:55,570 --> 00:33:59,500
function the with view model and you're

00:33:57,610 --> 00:34:02,590
probably wondering but what about tight

00:33:59,500 --> 00:34:04,779
script because you care about your stuff

00:34:02,590 --> 00:34:08,139
not breaking you are concerned about the

00:34:04,779 --> 00:34:10,659
security of your so the good news

00:34:08,139 --> 00:34:13,050
is that rx react is written in tight

00:34:10,659 --> 00:34:15,730
script cuz I love tight script too and

00:34:13,050 --> 00:34:17,139
it actually has here I'm not gonna get

00:34:15,730 --> 00:34:18,940
into it but if you're in tight script it

00:34:17,139 --> 00:34:21,099
has really awesome type checking where

00:34:18,940 --> 00:34:22,659
like all the props have to line up and

00:34:21,099 --> 00:34:24,730
all the observables have to line up and

00:34:22,659 --> 00:34:28,540
like you won't mess up and whatnot

00:34:24,730 --> 00:34:31,300
or so I claim what if you're like I like

00:34:28,540 --> 00:34:33,159
observables but I also like reducers um

00:34:31,300 --> 00:34:36,490
cuz they're very hot right now well what

00:34:33,159 --> 00:34:39,369
if you could write a view model based on

00:34:36,490 --> 00:34:41,500
a reducer function similar to sort of

00:34:39,369 --> 00:34:44,230
the syntax of reason ml which is

00:34:41,500 --> 00:34:46,990
Facebook's new hotness in terms of like

00:34:44,230 --> 00:34:49,000
the way they want to take react in the

00:34:46,990 --> 00:34:51,940
future well guess what there's another

00:34:49,000 --> 00:34:54,280
package called rx react a slash reducer

00:34:51,940 --> 00:34:55,690
and it is also somewhat available now I

00:34:54,280 --> 00:35:00,280
actually don't know if I published it

00:34:55,690 --> 00:35:02,290
but what else and the rule need the

00:35:00,280 --> 00:35:03,859
coolest thing that fascinates me is like

00:35:02,290 --> 00:35:06,619
those signal graphs and

00:35:03,859 --> 00:35:08,779
just imagine I would really like to be

00:35:06,619 --> 00:35:10,400
able to automatically render one of

00:35:08,779 --> 00:35:13,039
those interactive diagrams so I could

00:35:10,400 --> 00:35:15,650
watch my programs do that doesn't exist

00:35:13,039 --> 00:35:17,239
right now but I've got a lot of ideas

00:35:15,650 --> 00:35:19,759
and I'm really working and one day there

00:35:17,239 --> 00:35:21,259
will be our X react flash signal but in

00:35:19,759 --> 00:35:24,230
the meantime I highly recommend our X

00:35:21,259 --> 00:35:27,489
react slash core I used it enough that I

00:35:24,230 --> 00:35:31,369
think it's not terrible so that's all

00:35:27,489 --> 00:35:33,259
you can find my slides right there and

00:35:31,369 --> 00:35:37,900
the github will be on the slides when

00:35:33,259 --> 00:35:37,900

YouTube URL: https://www.youtube.com/watch?v=zz_o7A0HET8


