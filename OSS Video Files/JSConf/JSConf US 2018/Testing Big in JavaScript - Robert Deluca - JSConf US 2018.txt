Title: Testing Big in JavaScript - Robert Deluca - JSConf US 2018
Publication date: 2018-11-10
Playlist: JSConf US 2018
Description: 
	
Captions: 
	00:00:00,320 --> 00:00:03,840
[Music]

00:00:02,070 --> 00:00:05,660
[Applause]

00:00:03,840 --> 00:00:07,410
[Music]

00:00:05,660 --> 00:00:09,280
[Applause]

00:00:07,410 --> 00:00:11,020
[Music]

00:00:09,280 --> 00:00:12,780
[Applause]

00:00:11,020 --> 00:00:15,920
[Music]

00:00:12,780 --> 00:00:15,920
[Applause]

00:00:16,870 --> 00:00:24,050
[Music]

00:00:26,489 --> 00:00:33,579
well awesome I'm happy to be here thank

00:00:29,590 --> 00:00:35,110
you for coming to my talk I did not plan

00:00:33,579 --> 00:00:36,910
the talk before me so if you were here

00:00:35,110 --> 00:00:39,040
before and it's all to talk about Cyprus

00:00:36,910 --> 00:00:41,200
we're gonna be talking about testing and

00:00:39,040 --> 00:00:42,610
we're gonna be talking about not end to

00:00:41,200 --> 00:00:44,500
end but we are going to be talking and

00:00:42,610 --> 00:00:47,079
we are going to be testing a to do NBC

00:00:44,500 --> 00:00:48,760
app so in Cyprus will be mentioned in

00:00:47,079 --> 00:00:51,790
this talk so that was kind of a perfect

00:00:48,760 --> 00:00:55,329
setup so my talk is about testing big

00:00:51,790 --> 00:00:57,940
and with big tests and hello everyone

00:00:55,329 --> 00:00:59,980
I'm Robert De Luca you can find me at

00:00:57,940 --> 00:01:03,520
Rob Dell 12 on the internet anywhere

00:00:59,980 --> 00:01:06,159
basically github Twitter anything on the

00:01:03,520 --> 00:01:08,229
internet I work for a consultancy called

00:01:06,159 --> 00:01:09,790
the front side we build software that

00:01:08,229 --> 00:01:12,340
you can secure your future on we do

00:01:09,790 --> 00:01:14,380
basically UI and JavaScript consulting

00:01:12,340 --> 00:01:18,370
and at the front side we care deeply

00:01:14,380 --> 00:01:21,880
about testing and specifically is unit

00:01:18,370 --> 00:01:24,390
tests or integration tests I ran across

00:01:21,880 --> 00:01:26,770
this tweet that I know Kent C Dodds

00:01:24,390 --> 00:01:29,680
really likes and I also really like it

00:01:26,770 --> 00:01:32,530
write tests not too many

00:01:29,680 --> 00:01:35,140
mostly integration and I agree with this

00:01:32,530 --> 00:01:36,760
so much and so much so in some of our

00:01:35,140 --> 00:01:38,470
applications we probably have about five

00:01:36,760 --> 00:01:40,150
or six unit tests and the rest ring in

00:01:38,470 --> 00:01:42,970
our integration tests and I'll show you

00:01:40,150 --> 00:01:45,760
at the end of this talk about how how we

00:01:42,970 --> 00:01:48,610
get there so to kind of get on the same

00:01:45,760 --> 00:01:51,040
page I want to talk about UI tests what

00:01:48,610 --> 00:01:52,530
are you eye tests so yeah let's make

00:01:51,040 --> 00:01:55,540
sure we get on the same page about it

00:01:52,530 --> 00:01:58,000
I'm talking about rendering the full

00:01:55,540 --> 00:02:00,150
application in the browser not just a

00:01:58,000 --> 00:02:04,030
single component the whole enchilada

00:02:00,150 --> 00:02:06,100
and I want to rerender a fresh

00:02:04,030 --> 00:02:07,840
application for each assertion I don't

00:02:06,100 --> 00:02:10,260
want any leftover State from the

00:02:07,840 --> 00:02:12,489
previous test run I want to make sure

00:02:10,260 --> 00:02:14,290
that I can put the application

00:02:12,489 --> 00:02:17,920
repeatedly into the same exact state

00:02:14,290 --> 00:02:19,930
each time I want to test the application

00:02:17,920 --> 00:02:21,640
like it's used a user isn't going to be

00:02:19,930 --> 00:02:22,690
unit testing your app they're not going

00:02:21,640 --> 00:02:23,260
to be looking up a function that's

00:02:22,690 --> 00:02:24,819
passed

00:02:23,260 --> 00:02:26,560
click Handler and calling that directly

00:02:24,819 --> 00:02:29,709
they're gonna be clicking there to be

00:02:26,560 --> 00:02:32,349
typing they're gonna be scrolling I want

00:02:29,709 --> 00:02:34,269
to mock my network requests this is the

00:02:32,349 --> 00:02:38,590
big difference between a dentists and UI

00:02:34,269 --> 00:02:40,269
tests and an dentist can be slow and it

00:02:38,590 --> 00:02:41,680
requires some work to set up and

00:02:40,269 --> 00:02:42,959
sanitizer data to make sure that you

00:02:41,680 --> 00:02:46,480
don't have any leftover data that's

00:02:42,959 --> 00:02:49,930
control you and future tests which is

00:02:46,480 --> 00:02:50,730
not fun so what are the benefits of UI

00:02:49,930 --> 00:02:53,650
testing

00:02:50,730 --> 00:02:55,000
well they test the integration of all

00:02:53,650 --> 00:02:56,769
the components together I want to make

00:02:55,000 --> 00:02:59,909
sure that my application works together

00:02:56,769 --> 00:03:01,989
as a whole not individually in pieces

00:02:59,909 --> 00:03:03,639
like I talked about earlier I want to

00:03:01,989 --> 00:03:05,019
test like a user I want to be clicking I

00:03:03,639 --> 00:03:06,760
want to be scrolling I want to be

00:03:05,019 --> 00:03:08,409
dragging and dropping I want to be doing

00:03:06,760 --> 00:03:10,000
all the things that I do while I

00:03:08,409 --> 00:03:13,060
interact with my app and I want to test

00:03:10,000 --> 00:03:16,090
that way and test test the loop between

00:03:13,060 --> 00:03:17,620
the browser and application I want to

00:03:16,090 --> 00:03:20,079
make sure when the browser sends an

00:03:17,620 --> 00:03:22,569
event my application can handle that

00:03:20,079 --> 00:03:24,609
properly we all know cross browser bugs

00:03:22,569 --> 00:03:27,310
exists and sometimes an event that's

00:03:24,609 --> 00:03:29,139
sent has different properties than other

00:03:27,310 --> 00:03:31,389
browsers or something quirky will go on

00:03:29,139 --> 00:03:34,239
even though there's a spec there's still

00:03:31,389 --> 00:03:36,940
bugs I want to test on many different

00:03:34,239 --> 00:03:38,049
browsers and platforms my my users

00:03:36,940 --> 00:03:39,370
aren't going to be just using Chrome

00:03:38,049 --> 00:03:41,440
they're not going to be just using

00:03:39,370 --> 00:03:44,669
Firefox and they definitely are not

00:03:41,440 --> 00:03:49,540
using jsm I want to test an IE edge

00:03:44,669 --> 00:03:52,599
Firefox iOS Chrome or iOS Safari Android

00:03:49,540 --> 00:03:55,629
Chrome I want to test on all of those so

00:03:52,599 --> 00:04:00,190
that's great but what are the trade-offs

00:03:55,629 --> 00:04:01,810
here UI tests can be hard to set up a

00:04:00,190 --> 00:04:04,750
lot of times you can end up in

00:04:01,810 --> 00:04:06,480
configuration hell and I think some of

00:04:04,750 --> 00:04:08,829
us have probably been there before

00:04:06,480 --> 00:04:11,650
they're typically hard to maintain I've

00:04:08,829 --> 00:04:14,230
been on - I've worked the two companies

00:04:11,650 --> 00:04:16,150
that have entire teams dedicated to

00:04:14,230 --> 00:04:19,079
writing these Suites and maintaining

00:04:16,150 --> 00:04:21,970
them they can be slow we've all seen

00:04:19,079 --> 00:04:23,560
sleep 10 or you know when they somebody

00:04:21,970 --> 00:04:25,330
commits something and it broke a test or

00:04:23,560 --> 00:04:29,919
it broke a test and they just increment

00:04:25,330 --> 00:04:31,840
the sleep I don't want that you can have

00:04:29,919 --> 00:04:34,860
flaky tests false positives or false

00:04:31,840 --> 00:04:36,590
negatives the elements are not existing

00:04:34,860 --> 00:04:38,720
but

00:04:36,590 --> 00:04:41,690
that that's something that we don't want

00:04:38,720 --> 00:04:44,330
in our tests so what what frameworks can

00:04:41,690 --> 00:04:46,160
do this UI testing all of these they can

00:04:44,330 --> 00:04:47,690
do UI testing I'm gonna mention a lot of

00:04:46,160 --> 00:04:49,880
these I can do and n testing but you can

00:04:47,690 --> 00:04:52,790
mock the network as you wish

00:04:49,880 --> 00:04:53,960
so with whatever method you want so the

00:04:52,790 --> 00:04:56,870
first one everybody's probably heard of

00:04:53,960 --> 00:04:59,120
is selenium or at least I worked with or

00:04:56,870 --> 00:05:00,380
at least heard of the new kid on the

00:04:59,120 --> 00:05:03,800
block which we just heard about which

00:05:00,380 --> 00:05:06,200
was Cypress and then protractor which is

00:05:03,800 --> 00:05:09,470
pretty popular with angular apps just

00:05:06,200 --> 00:05:11,000
and puppeteer which is interesting set

00:05:09,470 --> 00:05:15,020
up I've seen a couple articles pop up

00:05:11,000 --> 00:05:17,900
about this but as a whole UI testing

00:05:15,020 --> 00:05:20,780
hasn't changed very much so this is what

00:05:17,900 --> 00:05:22,640
some tests with like in selenium you're

00:05:20,780 --> 00:05:23,900
gonna get the browser you're gonna set

00:05:22,640 --> 00:05:25,970
up the driver or you get a drive it

00:05:23,900 --> 00:05:28,910
around with Cypress everything's

00:05:25,970 --> 00:05:32,600
prefixed through the side command and so

00:05:28,910 --> 00:05:35,450
I thought get side I contains those

00:05:32,600 --> 00:05:37,790
things I got paws protractor is a little

00:05:35,450 --> 00:05:39,370
bit more towards the modern scale like a

00:05:37,790 --> 00:05:42,200
modern scale however you want to

00:05:39,370 --> 00:05:44,360
classify that it has some page object II

00:05:42,200 --> 00:05:46,370
like things like it number but you still

00:05:44,360 --> 00:05:49,400
see in there like browser dot get title

00:05:46,370 --> 00:05:53,150
browser go here and then just then

00:05:49,400 --> 00:05:54,230
puppeteer which I I don't think you can

00:05:53,150 --> 00:05:57,740
see it up there in the slides but

00:05:54,230 --> 00:05:59,150
there's two sleeps in there that are 1.6

00:05:57,740 --> 00:06:02,870
million milliseconds which is about a

00:05:59,150 --> 00:06:05,300
half hour that's that's pretty high so

00:06:02,870 --> 00:06:07,640
it's just a lot of directing the browser

00:06:05,300 --> 00:06:10,550
to do things browser do this browser do

00:06:07,640 --> 00:06:13,070
that wait for this element but the way

00:06:10,550 --> 00:06:16,130
we've built UI has changed in a really

00:06:13,070 --> 00:06:18,770
big way and the way we have tested

00:06:16,130 --> 00:06:21,260
typically hasn't and we can thank

00:06:18,770 --> 00:06:24,860
libraries like this backbone view and

00:06:21,260 --> 00:06:26,090
Euler ember react and like a hundred

00:06:24,860 --> 00:06:28,880
thousand other JavaScript libraries that

00:06:26,090 --> 00:06:30,800
are out there I learned today that dojo

00:06:28,880 --> 00:06:33,890
has made a big comeback so we could

00:06:30,800 --> 00:06:36,490
throw that in there and the changes that

00:06:33,890 --> 00:06:38,540
they've brought are faster rendering

00:06:36,490 --> 00:06:41,060
components everywhere in a very

00:06:38,540 --> 00:06:42,560
componentized world everything can be

00:06:41,060 --> 00:06:44,360
broken down into digestible and

00:06:42,560 --> 00:06:47,300
shareable and composable components

00:06:44,360 --> 00:06:49,010
there's a lot more asynchrony we're

00:06:47,300 --> 00:06:50,059
doing a lot more get requests and a lot

00:06:49,010 --> 00:06:53,069
more

00:06:50,059 --> 00:06:56,669
Ajax and generally just became more

00:06:53,069 --> 00:06:57,899
interactive and basically the too long

00:06:56,669 --> 00:06:59,969
didn't read it is their more

00:06:57,899 --> 00:07:02,189
feature-rich we've been racing towards

00:06:59,969 --> 00:07:05,399
becoming as feature-rich as native apps

00:07:02,189 --> 00:07:09,059
and with that there's been massive

00:07:05,399 --> 00:07:12,119
booming boom and tooling to become more

00:07:09,059 --> 00:07:13,529
feature-rich and and handle all of the

00:07:12,119 --> 00:07:15,959
problems that come along with being more

00:07:13,529 --> 00:07:19,859
feature-rich in our ecosystem so tools

00:07:15,959 --> 00:07:21,809
like babel web pack yes land parcel type

00:07:19,859 --> 00:07:23,639
scripts all the things that we all

00:07:21,809 --> 00:07:26,999
probably use or use one of these tools

00:07:23,639 --> 00:07:29,549
daily has really changed the way that

00:07:26,999 --> 00:07:33,359
we've developed java scripts in the past

00:07:29,549 --> 00:07:35,669
10 years but UI testing tools haven't

00:07:33,359 --> 00:07:37,289
necessarily moved or evolved with the

00:07:35,669 --> 00:07:41,099
the front-end tooling world and that's

00:07:37,289 --> 00:07:43,109
that's a pretty bold claim right so what

00:07:41,099 --> 00:07:45,899
are we looking for what's missing then

00:07:43,109 --> 00:07:48,329
well I want my test framework to be it

00:07:45,899 --> 00:07:51,209
will be built with components in mind I

00:07:48,329 --> 00:07:53,399
want composability in my tests that are

00:07:51,209 --> 00:07:54,269
similar to composability and our

00:07:53,399 --> 00:07:57,569
components

00:07:54,269 --> 00:07:59,009
I want reliable Dom interactions I don't

00:07:57,569 --> 00:08:01,379
want anything flaky of course I don't

00:07:59,009 --> 00:08:04,019
want false positives or false negatives

00:08:01,379 --> 00:08:06,239
I want chainable interactions when I'm

00:08:04,019 --> 00:08:07,799
running a test that's filling in a form

00:08:06,239 --> 00:08:09,869
I want to be able to fill in a couple

00:08:07,799 --> 00:08:14,039
inputs chain one off one after another

00:08:09,869 --> 00:08:16,349
and then click Submit and of course we

00:08:14,039 --> 00:08:18,389
all want speed that's just a given I

00:08:16,349 --> 00:08:20,669
feel like I probably didn't even need to

00:08:18,389 --> 00:08:23,639
put that in my slides but we all want

00:08:20,669 --> 00:08:24,959
speed and I want to take advantage of

00:08:23,639 --> 00:08:27,389
our modern tooling things like

00:08:24,959 --> 00:08:29,209
typescript anything like that and when

00:08:27,389 --> 00:08:31,559
I'm thinking about this specifically

00:08:29,209 --> 00:08:33,719
things like stripping data attributes

00:08:31,559 --> 00:08:35,729
out of your your application for a

00:08:33,719 --> 00:08:37,349
production build so when you're testing

00:08:35,729 --> 00:08:39,360
you're not using brittle CSS selectors

00:08:37,349 --> 00:08:41,159
that are also testing or that are also

00:08:39,360 --> 00:08:43,439
providing style right like if I have a

00:08:41,159 --> 00:08:45,749
button that is read with the class name

00:08:43,439 --> 00:08:47,309
read and I wrote a test that selects

00:08:45,749 --> 00:08:49,620
from that and I change the color and the

00:08:47,309 --> 00:08:52,470
behavior didn't change my test shouldn't

00:08:49,620 --> 00:08:55,920
fail I want maintainability and

00:08:52,470 --> 00:08:58,769
scalability UI tests tend to become very

00:08:55,920 --> 00:09:00,269
fragile a lot of the time there are

00:08:58,769 --> 00:09:03,149
those dedicated teams that are writing

00:09:00,269 --> 00:09:04,499
those tests and not developed by

00:09:03,149 --> 00:09:06,809
the team that's actually developing the

00:09:04,499 --> 00:09:08,160
code and that's not something that we

00:09:06,809 --> 00:09:10,079
like to do with the front side we think

00:09:08,160 --> 00:09:12,120
that the developers should be writing

00:09:10,079 --> 00:09:13,220
the tests alongside of implementing the

00:09:12,120 --> 00:09:17,009
features because they know the features

00:09:13,220 --> 00:09:18,720
I want full control over the network I

00:09:17,009 --> 00:09:20,519
want to be able to create data as I need

00:09:18,720 --> 00:09:22,319
to put the application in the weirdest

00:09:20,519 --> 00:09:24,930
States at that that the user finds

00:09:22,319 --> 00:09:27,600
themselves in I want to be able to slow

00:09:24,930 --> 00:09:29,309
timings down increase or make the

00:09:27,600 --> 00:09:33,209
timings faster to test different loading

00:09:29,309 --> 00:09:35,759
States I want it to be cross framework

00:09:33,209 --> 00:09:37,439
we're consultants so we want something

00:09:35,759 --> 00:09:39,569
that we can take on any client project

00:09:37,439 --> 00:09:41,999
so that means it needs to work and react

00:09:39,569 --> 00:09:45,389
or view or basically anywhere there's

00:09:41,999 --> 00:09:47,069
Dom or JavaScript and we're consultants

00:09:45,389 --> 00:09:48,990
and we want it to work across test

00:09:47,069 --> 00:09:50,459
frameworks too because we're typically

00:09:48,990 --> 00:09:52,110
not able to be there in a greenfield

00:09:50,459 --> 00:09:54,089
project to make that decision or help

00:09:52,110 --> 00:09:57,720
them make that decision there's a little

00:09:54,089 --> 00:09:59,129
asterisk there on just because I am

00:09:57,720 --> 00:10:00,779
talking about UI testing in the browser

00:09:59,129 --> 00:10:04,559
and technically just can't run on the

00:10:00,779 --> 00:10:05,399
browser but you you can tack it I wanted

00:10:04,559 --> 00:10:08,189
to be cross browser

00:10:05,399 --> 00:10:09,569
this is a hard requirement we must be

00:10:08,189 --> 00:10:11,249
able to test in many different browsers

00:10:09,569 --> 00:10:12,839
and in today's day and age a lot of our

00:10:11,249 --> 00:10:15,120
users are using mobile so I want to be

00:10:12,839 --> 00:10:17,790
able to I must be able to test and

00:10:15,120 --> 00:10:21,269
mobile our users aren't going to be

00:10:17,790 --> 00:10:23,160
using JSON like I said and none of these

00:10:21,269 --> 00:10:25,679
frame current frameworks out there kind

00:10:23,160 --> 00:10:27,870
of meet these criteria for us each one

00:10:25,679 --> 00:10:30,509
check a few of the boxes Cypress is

00:10:27,870 --> 00:10:32,160
absolutely the closest but as far as I

00:10:30,509 --> 00:10:34,980
can tell her I know it only works in

00:10:32,160 --> 00:10:36,600
Chrome and Firefox is hot on its heels

00:10:34,980 --> 00:10:40,620
but it also doesn't really take

00:10:36,600 --> 00:10:42,149
components into consideration so we set

00:10:40,620 --> 00:10:46,529
out and built the thing that we wanted

00:10:42,149 --> 00:10:47,970
and the name of that is big tests it's

00:10:46,529 --> 00:10:51,600
called big tests because we're testing

00:10:47,970 --> 00:10:54,809
Bigley right unit tests are small and UI

00:10:51,600 --> 00:10:57,209
tests are big big tests can work

00:10:54,809 --> 00:10:59,459
anywhere there's Dom or JavaScript we

00:10:57,209 --> 00:11:01,740
use a server to run the tests so if your

00:10:59,459 --> 00:11:04,980
browser can visit a URL it can run the

00:11:01,740 --> 00:11:07,529
tests I wanted to be cross framework

00:11:04,980 --> 00:11:09,689
it's so or it is cross framework so it

00:11:07,529 --> 00:11:12,120
is written and plain JavaScript it can

00:11:09,689 --> 00:11:14,579
be used and adapted in any any frame

00:11:12,120 --> 00:11:16,790
to use and is cross test framework bring

00:11:14,579 --> 00:11:19,800
your favorite test framework or a runner

00:11:16,790 --> 00:11:21,509
and we tend to like mocha so that's

00:11:19,800 --> 00:11:24,629
that's what we're gonna be using in the

00:11:21,509 --> 00:11:26,790
future examples give you we give you

00:11:24,629 --> 00:11:28,350
full control over the network so you can

00:11:26,790 --> 00:11:30,269
create data as you wish you can slow

00:11:28,350 --> 00:11:32,399
those timings down you can throw 500

00:11:30,269 --> 00:11:34,379
errors to test that your client side you

00:11:32,399 --> 00:11:36,749
error handling is working you can do

00:11:34,379 --> 00:11:39,449
whatever you wish and it's built with

00:11:36,749 --> 00:11:41,670
components in mind components are at the

00:11:39,449 --> 00:11:44,339
center of big tests we ship these things

00:11:41,670 --> 00:11:46,680
called interactors with our component

00:11:44,339 --> 00:11:49,050
framework and the consuming app can

00:11:46,680 --> 00:11:51,689
import those interactors and use them

00:11:49,050 --> 00:11:53,129
directly because the the component

00:11:51,689 --> 00:11:54,779
framework is already testing its

00:11:53,129 --> 00:11:56,730
components rights so i don't need to

00:11:54,779 --> 00:11:58,680
write tests specifically around

00:11:56,730 --> 00:12:00,829
interacting with that component i can

00:11:58,680 --> 00:12:04,199
just import it and use what they wrote

00:12:00,829 --> 00:12:06,470
so someone once told me if you have a

00:12:04,199 --> 00:12:08,939
complicated problem such as UI testing

00:12:06,470 --> 00:12:10,790
give a simple example don't use a

00:12:08,939 --> 00:12:14,309
complicated example with a complicated

00:12:10,790 --> 00:12:15,029
testing so UI testing got me in my

00:12:14,309 --> 00:12:18,329
feelings

00:12:15,029 --> 00:12:20,699
everybody likes some Drake so I'm going

00:12:18,329 --> 00:12:23,040
to use to do MVC as a simple example and

00:12:20,699 --> 00:12:25,559
I'm gonna do it a little bit harder I'm

00:12:23,040 --> 00:12:31,019
going to a big test to two MVC with an

00:12:25,559 --> 00:12:34,399
API so this is a gift example of what

00:12:31,019 --> 00:12:36,779
these tests might look like when running

00:12:34,399 --> 00:12:37,949
so what are our goals here what do we

00:12:36,779 --> 00:12:38,610
want to accomplish by the end of this

00:12:37,949 --> 00:12:42,779
talk

00:12:38,610 --> 00:12:46,290
well I want to set up big test in an

00:12:42,779 --> 00:12:48,329
existing project I want to introduce and

00:12:46,290 --> 00:12:50,519
build a component interactors together

00:12:48,329 --> 00:12:54,569
I want to mock the network layer and

00:12:50,519 --> 00:12:57,720
let's write some big tests so we have a

00:12:54,569 --> 00:13:01,110
to do MVC starter app and what's the

00:12:57,720 --> 00:13:03,839
structure there it's kind of just a

00:13:01,110 --> 00:13:05,429
typical react up there we have a source

00:13:03,839 --> 00:13:09,329
folder with components inside of it we

00:13:05,429 --> 00:13:10,769
have a models folder for handling state

00:13:09,329 --> 00:13:12,540
in this application and then we have an

00:13:10,769 --> 00:13:14,490
index and some some styles and stuff so

00:13:12,540 --> 00:13:16,740
it's just basically a typical react

00:13:14,490 --> 00:13:18,720
project you might run across we use

00:13:16,740 --> 00:13:20,819
parcel to build because parcel is

00:13:18,720 --> 00:13:22,259
awesome you can use webpack or whatever

00:13:20,819 --> 00:13:24,520
you want but in this example we're using

00:13:22,259 --> 00:13:27,970
parcel if people

00:13:24,520 --> 00:13:29,230
familiar with what to do MVC is this is

00:13:27,970 --> 00:13:31,210
how the app works right you can create

00:13:29,230 --> 00:13:34,780
some - dues you can filter them and you

00:13:31,210 --> 00:13:37,360
can complete them so let's get big test

00:13:34,780 --> 00:13:39,280
set up this has no test it's just a

00:13:37,360 --> 00:13:40,780
fresh project so we need to install some

00:13:39,280 --> 00:13:43,150
dependencies we're going to install the

00:13:40,780 --> 00:13:45,700
big test CLI the big test interactors

00:13:43,150 --> 00:13:48,460
are a wrapper around mocha which is not

00:13:45,700 --> 00:13:51,070
necessarily needed but if you use mocha

00:13:48,460 --> 00:13:52,330
and you want to write in that style go

00:13:51,070 --> 00:13:55,000
ahead and use it and then we're going to

00:13:52,330 --> 00:13:57,550
include the big test react helper we're

00:13:55,000 --> 00:13:59,350
going to use MPX to run the init command

00:13:57,550 --> 00:14:01,750
which is going to create all the files

00:13:59,350 --> 00:14:05,590
that we need if you haven't used MPX

00:14:01,750 --> 00:14:07,240
it's pretty rad should use it so when we

00:14:05,590 --> 00:14:10,450
run big tests in it it's going to create

00:14:07,240 --> 00:14:11,740
this folder structure in your project so

00:14:10,450 --> 00:14:13,120
we have the big test folder and then we

00:14:11,740 --> 00:14:15,220
have our helpers folder inside of that

00:14:13,120 --> 00:14:16,600
which one helper and then we have our

00:14:15,220 --> 00:14:17,980
interactors folder which is where all

00:14:16,600 --> 00:14:21,160
interactions happen where our

00:14:17,980 --> 00:14:22,240
application and all of our tests so

00:14:21,160 --> 00:14:23,920
that's the test that are actually

00:14:22,240 --> 00:14:28,480
running and it also creates an index

00:14:23,920 --> 00:14:30,790
file and a big test options file so we

00:14:28,480 --> 00:14:32,920
need to tell big test launcher how to

00:14:30,790 --> 00:14:34,150
serve our application big test works by

00:14:32,920 --> 00:14:37,480
bundling all your tests together

00:14:34,150 --> 00:14:39,370
alongside your application so we need to

00:14:37,480 --> 00:14:42,220
change your bundlers entry point to the

00:14:39,370 --> 00:14:44,860
big test folder with parcel that's

00:14:42,220 --> 00:14:46,930
pretty easy because it's parcel right so

00:14:44,860 --> 00:14:48,160
we're going to create an index.html file

00:14:46,930 --> 00:14:51,550
because that's what they recommend to

00:14:48,160 --> 00:14:55,360
serve from an HTML and we're gonna point

00:14:51,550 --> 00:14:56,800
the entry of that that of the parcel

00:14:55,360 --> 00:14:59,590
want alert to our big test file that we

00:14:56,800 --> 00:15:02,470
just created so if we look at our npm or

00:14:59,590 --> 00:15:04,240
package JSON file and our scripts we've

00:15:02,470 --> 00:15:07,110
created a new script that is start :

00:15:04,240 --> 00:15:09,310
tests and points to the big test

00:15:07,110 --> 00:15:13,360
index.html this is gonna bundle all our

00:15:09,310 --> 00:15:16,210
things together if you're using webpack

00:15:13,360 --> 00:15:18,850
you can or whatever you want you can do

00:15:16,210 --> 00:15:20,320
it in this style the runner and CLI when

00:15:18,850 --> 00:15:22,690
you run it automatically sets the node M

00:15:20,320 --> 00:15:25,600
to test so you can just change when

00:15:22,690 --> 00:15:27,610
you're in test mode to change the entry

00:15:25,600 --> 00:15:30,130
from just the normal entry to the big

00:15:27,610 --> 00:15:32,950
tests entry file so the next thing we

00:15:30,130 --> 00:15:35,350
need to do is set up big test run which

00:15:32,950 --> 00:15:36,370
actually runs the tests we're going to

00:15:35,350 --> 00:15:37,710
go back into our scripts file we're

00:15:36,370 --> 00:15:40,740
going to add a new test command here

00:15:37,710 --> 00:15:41,760
five which just does big test run which

00:15:40,740 --> 00:15:44,100
is good to call it directly from the

00:15:41,760 --> 00:15:46,320
binary that's installed on our project

00:15:44,100 --> 00:15:47,430
from the dependencies and then we're

00:15:46,320 --> 00:15:49,410
gonna edit our big test

00:15:47,430 --> 00:15:52,770
ops file we have to tell the launcher

00:15:49,410 --> 00:15:55,020
how to do three things for us the first

00:15:52,770 --> 00:15:57,630
thing is how to serve that app and we're

00:15:55,020 --> 00:15:58,830
going to point it to the command that we

00:15:57,630 --> 00:16:00,060
just created if you're using webpack

00:15:58,830 --> 00:16:02,010
like you showed earlier you don't even

00:16:00,060 --> 00:16:03,930
have to you can just pass yarn tests or

00:16:02,010 --> 00:16:05,700
yarn start just like you would normally

00:16:03,930 --> 00:16:07,140
start your application the next one

00:16:05,700 --> 00:16:08,720
we're gonna do is we're gonna tell the

00:16:07,140 --> 00:16:11,970
application where to actually serve to

00:16:08,720 --> 00:16:13,440
and in our case it's going to be

00:16:11,970 --> 00:16:15,090
localhost one-two-three-four because

00:16:13,440 --> 00:16:18,120
that's a default port number for parcel

00:16:15,090 --> 00:16:21,030
which i think is awesome and lastly

00:16:18,120 --> 00:16:22,470
you're gonna tell big test what adaptor

00:16:21,030 --> 00:16:24,330
and what framework test framework you're

00:16:22,470 --> 00:16:25,890
using I'm like I said you can use any

00:16:24,330 --> 00:16:28,290
one that you want so we're gonna pass

00:16:25,890 --> 00:16:31,020
mocha here and currently we only have

00:16:28,290 --> 00:16:33,060
support for mocha but as I talk right

00:16:31,020 --> 00:16:36,120
now one of my co-workers is building

00:16:33,060 --> 00:16:38,490
other adapters so let's take a look at

00:16:36,120 --> 00:16:41,280
these test files they're just it's just

00:16:38,490 --> 00:16:44,460
a fresh sweet these are our mocha tests

00:16:41,280 --> 00:16:45,930
and in this test on line 15 we are

00:16:44,460 --> 00:16:47,730
asserting that the title of the

00:16:45,930 --> 00:16:51,060
application equals to do and it has an

00:16:47,730 --> 00:16:54,510
h1 and this is what an interact or looks

00:16:51,060 --> 00:16:56,310
like we have a class that has a property

00:16:54,510 --> 00:16:58,260
on it called title title text and we're

00:16:56,310 --> 00:17:00,930
gonna grab the text from the h1 element

00:16:58,260 --> 00:17:02,190
on the page now we're going to learn a

00:17:00,930 --> 00:17:04,650
lot more about interactors in a little

00:17:02,190 --> 00:17:07,440
bit so let's finish setting up last

00:17:04,650 --> 00:17:09,180
thing we need to do is set up the setup

00:17:07,440 --> 00:17:11,339
app helper this is this is the thing

00:17:09,180 --> 00:17:14,010
that actually renders your application

00:17:11,339 --> 00:17:16,620
into the browser and this is what that

00:17:14,010 --> 00:17:18,570
that that file looks like we're going to

00:17:16,620 --> 00:17:21,930
import our route app for a route

00:17:18,570 --> 00:17:23,430
component and pass it to set up a for

00:17:21,930 --> 00:17:25,830
testing the helper that we provide for

00:17:23,430 --> 00:17:29,220
from big tests react this is typically

00:17:25,830 --> 00:17:30,630
whatever you pass to react Dom but in

00:17:29,220 --> 00:17:32,520
some cases and applications that we've

00:17:30,630 --> 00:17:33,630
seen you might wrap it around with the

00:17:32,520 --> 00:17:35,490
test harness component that provides

00:17:33,630 --> 00:17:38,030
some other things and like fake loggers

00:17:35,490 --> 00:17:40,200
and in redux or whatever you might want

00:17:38,030 --> 00:17:42,390
big tests react also provides other

00:17:40,200 --> 00:17:44,040
things like you can pass props to it

00:17:42,390 --> 00:17:46,650
initial props or whatever you want and

00:17:44,040 --> 00:17:48,030
you can also if you're using react

00:17:46,650 --> 00:17:49,559
router it'll automatically hook in a

00:17:48,030 --> 00:17:52,409
reactor outer for you so you can use the

00:17:49,559 --> 00:17:57,720
at command to visit relics in your tests

00:17:52,409 --> 00:17:59,210
so let's run some tests and we have a

00:17:57,720 --> 00:18:02,009
single passing test

00:17:59,210 --> 00:18:03,960
so let's there's a good place to take a

00:18:02,009 --> 00:18:05,309
break and review where we're at we have

00:18:03,960 --> 00:18:07,980
successfully set up big tests and

00:18:05,309 --> 00:18:10,110
existing project the next thing we're

00:18:07,980 --> 00:18:12,179
gonna do is build some component

00:18:10,110 --> 00:18:15,120
interactors together so I think this is

00:18:12,179 --> 00:18:16,399
a good spot to pause and and talk about

00:18:15,120 --> 00:18:19,200
interactors and what they are

00:18:16,399 --> 00:18:21,389
interactors allow you to think about how

00:18:19,200 --> 00:18:24,299
to interact with your component and your

00:18:21,389 --> 00:18:27,629
application as a whole click this drag

00:18:24,299 --> 00:18:29,039
this scroll here focus this they will

00:18:27,629 --> 00:18:30,450
wait for elements to exist before

00:18:29,039 --> 00:18:34,230
interacting with them so you don't have

00:18:30,450 --> 00:18:35,399
to worry about timing or or getting to

00:18:34,230 --> 00:18:38,429
sync up with a run loop or anything

00:18:35,399 --> 00:18:40,289
it'll just work for you I don't have

00:18:38,429 --> 00:18:41,759
enough time to get into how it all

00:18:40,289 --> 00:18:43,619
actually works in the architecture

00:18:41,759 --> 00:18:45,899
underneath that's a whole talk in itself

00:18:43,619 --> 00:18:48,720
but just know that it takes care of that

00:18:45,899 --> 00:18:50,639
for you interactors our core two big

00:18:48,720 --> 00:18:52,769
tests they're the heart and soul of a

00:18:50,639 --> 00:18:55,830
big test and I think arguably probably

00:18:52,769 --> 00:18:57,869
the coolest feature and even though

00:18:55,830 --> 00:19:00,059
we're saying the big test is a testing

00:18:57,869 --> 00:19:01,889
framework you could take interactors and

00:19:00,059 --> 00:19:03,600
plug it into Cypress if you want or

00:19:01,889 --> 00:19:05,009
whatever testing framework that you want

00:19:03,600 --> 00:19:09,240
because these are just a collection of

00:19:05,009 --> 00:19:12,149
modules so you don't have to wait for

00:19:09,240 --> 00:19:13,499
the ability to interact and interactors

00:19:12,149 --> 00:19:14,850
abstract that away for you so you don't

00:19:13,499 --> 00:19:17,100
have to worry about that timing or

00:19:14,850 --> 00:19:19,409
anything it'll do it interact or

00:19:17,100 --> 00:19:21,240
properties are lazy so they don't

00:19:19,409 --> 00:19:22,309
actually run until you try to access the

00:19:21,240 --> 00:19:24,929
getter on it

00:19:22,309 --> 00:19:29,549
they're composable and they are

00:19:24,929 --> 00:19:31,230
chainable and I think very powerful so

00:19:29,549 --> 00:19:33,809
if you want to go check out the API dots

00:19:31,230 --> 00:19:36,269
and go to big tests JSI o slash guides

00:19:33,809 --> 00:19:38,369
to interactors and we have three or four

00:19:36,269 --> 00:19:40,110
guides there for you about creating

00:19:38,369 --> 00:19:42,749
custom interactors composing them with

00:19:40,110 --> 00:19:44,759
other interactors if you want to go and

00:19:42,749 --> 00:19:47,179
learn at your own pace or take a look at

00:19:44,759 --> 00:19:50,610
the all the API Doc's that we have so

00:19:47,179 --> 00:19:54,480
let's start filling in our interactor we

00:19:50,610 --> 00:19:56,549
to give like a simplest view of what we

00:19:54,480 --> 00:19:58,080
were doing here is where we have set up

00:19:56,549 --> 00:19:59,909
our application where we've rendered it

00:19:58,080 --> 00:20:02,250
into the browser and now we're gonna

00:19:59,909 --> 00:20:06,300
start driving the application around

00:20:02,250 --> 00:20:09,120
with interactors so this begs a question

00:20:06,300 --> 00:20:12,090
of how do we actually even interact with

00:20:09,120 --> 00:20:15,480
our application and even for something

00:20:12,090 --> 00:20:16,860
that's as simple as to do MVC there's a

00:20:15,480 --> 00:20:18,270
lot that's going on here there's a lot

00:20:16,860 --> 00:20:21,510
of different ways you can interact with

00:20:18,270 --> 00:20:22,950
your application so let's stop and break

00:20:21,510 --> 00:20:26,100
this down and just tackle adding it to

00:20:22,950 --> 00:20:27,990
do first let's look back at the slim

00:20:26,100 --> 00:20:31,620
diagram here just for adding it to do

00:20:27,990 --> 00:20:33,000
you have input here where you type it in

00:20:31,620 --> 00:20:36,630
the input and then you press ENTER to

00:20:33,000 --> 00:20:40,980
submit you can also toggle a button on

00:20:36,630 --> 00:20:43,590
the left to complete all to Do's so

00:20:40,980 --> 00:20:46,110
we're at the top here we're already

00:20:43,590 --> 00:20:48,240
asserting that we have our two dues or

00:20:46,110 --> 00:20:49,410
two dues title there so that's done for

00:20:48,240 --> 00:20:52,340
us now we just need to wire up our

00:20:49,410 --> 00:20:54,660
interactor for actually submitting or

00:20:52,340 --> 00:20:58,170
actually entering data into the input

00:20:54,660 --> 00:21:00,410
and then submitting that that to do so

00:20:58,170 --> 00:21:03,600
our actor is grown a little bit here I

00:21:00,410 --> 00:21:05,250
want to call out line 12 we have a new

00:21:03,600 --> 00:21:07,290
to do property which is equal to a

00:21:05,250 --> 00:21:09,180
fillable method that we provide from

00:21:07,290 --> 00:21:11,100
interactor and what fillable is going to

00:21:09,180 --> 00:21:13,680
do is allow you to fill an input with

00:21:11,100 --> 00:21:16,170
whatever data you want in your test and

00:21:13,680 --> 00:21:18,000
then here on lines 15 to 17 we have a

00:21:16,170 --> 00:21:20,070
submit to do property that we have equal

00:21:18,000 --> 00:21:23,160
to a trigger Abul method that's provided

00:21:20,070 --> 00:21:24,810
from interactor also which allows us to

00:21:23,160 --> 00:21:26,640
trigger whatever event that we want in

00:21:24,810 --> 00:21:29,550
this case we're going to trigger a

00:21:26,640 --> 00:21:32,250
keydown event and send the key code 13

00:21:29,550 --> 00:21:36,060
which is the enter key on the new to do

00:21:32,250 --> 00:21:37,410
input field so that's that's great I

00:21:36,060 --> 00:21:40,140
guess

00:21:37,410 --> 00:21:43,650
so let's route this in reality and see

00:21:40,140 --> 00:21:45,780
how we actually use this in a test so

00:21:43,650 --> 00:21:47,370
same from earlier test suite that we

00:21:45,780 --> 00:21:48,630
have right but we have a new describe

00:21:47,370 --> 00:21:50,460
block and I want to kind of walk through

00:21:48,630 --> 00:21:52,830
how interactors are playing a role here

00:21:50,460 --> 00:21:55,260
first we're going to import the

00:21:52,830 --> 00:21:56,400
interactor from the folder and at the

00:21:55,260 --> 00:21:59,370
very top of the file we're going to

00:21:56,400 --> 00:22:03,300
instantiate our enter actor and then

00:21:59,370 --> 00:22:04,710
down here on lines 22 23 we're gonna

00:22:03,300 --> 00:22:08,460
actually start interacting with our app

00:22:04,710 --> 00:22:10,890
we named our to do to the or interact or

00:22:08,460 --> 00:22:12,570
to do app so when we call that

00:22:10,890 --> 00:22:14,110
interactor we're gonna do to do app dot

00:22:12,570 --> 00:22:15,640
new to do and then

00:22:14,110 --> 00:22:16,870
we passed two is actually going to be

00:22:15,640 --> 00:22:18,970
the value of that's entered into the

00:22:16,870 --> 00:22:22,030
input fields and then we just chain on a

00:22:18,970 --> 00:22:25,960
submit to do interactor and bam we're

00:22:22,030 --> 00:22:27,340
going to submit so we actually don't

00:22:25,960 --> 00:22:29,350
have anything to assert against right

00:22:27,340 --> 00:22:31,030
now all right if we look back at the

00:22:29,350 --> 00:22:32,920
tests here you can see the assertion

00:22:31,030 --> 00:22:36,640
down at the bottom is just a comment

00:22:32,920 --> 00:22:42,130
that says oh so let's take a look back

00:22:36,640 --> 00:22:44,950
at our diagram here and look at a to-do

00:22:42,130 --> 00:22:47,740
item so we have our adding it to do

00:22:44,950 --> 00:22:50,850
interactor kind of all fleshed out so in

00:22:47,740 --> 00:22:53,440
order for us to assert we have an

00:22:50,850 --> 00:22:56,520
infinite number of to-do items in this

00:22:53,440 --> 00:22:59,020
list and when we built this application

00:22:56,520 --> 00:23:01,390
we recognized that we could pull that

00:22:59,020 --> 00:23:03,640
out onto a component right we could

00:23:01,390 --> 00:23:07,270
build something and it's called to do I

00:23:03,640 --> 00:23:09,400
don't so naturally with each component

00:23:07,270 --> 00:23:10,929
there can be an interact or that maps

00:23:09,400 --> 00:23:13,179
directly to and how you interact with

00:23:10,929 --> 00:23:15,280
that component so we're going to try and

00:23:13,179 --> 00:23:17,049
we're going to match that composability

00:23:15,280 --> 00:23:19,780
that we get from the component with our

00:23:17,049 --> 00:23:22,780
tests so let's create a new interactor

00:23:19,780 --> 00:23:24,669
called to-do item and we're gonna create

00:23:22,780 --> 00:23:26,650
one property for now on it called to do

00:23:24,669 --> 00:23:28,450
text and that's just going to grab text

00:23:26,650 --> 00:23:32,200
from the label element on the to-do item

00:23:28,450 --> 00:23:34,419
and then we're to compose or to do item

00:23:32,200 --> 00:23:36,669
interactor with our to-do MVC interactor

00:23:34,419 --> 00:23:39,190
the same way that we compose the to-do

00:23:36,669 --> 00:23:41,830
item component in the two MVC

00:23:39,190 --> 00:23:43,210
application when we built it so we're

00:23:41,830 --> 00:23:45,520
going to go back to the to-do MVC

00:23:43,210 --> 00:23:47,679
interactor and add a new property on

00:23:45,520 --> 00:23:49,200
line 16 called to-do list and it's going

00:23:47,679 --> 00:23:51,820
to be set to a collection and

00:23:49,200 --> 00:23:53,410
collections from interactor are just a

00:23:51,820 --> 00:23:56,500
way for you to scope your nested

00:23:53,410 --> 00:23:58,450
interactors to a specific selector so if

00:23:56,500 --> 00:24:00,880
we go back here you remember how I'm

00:23:58,450 --> 00:24:03,070
just pulling off text from a label which

00:24:00,880 --> 00:24:06,340
is pretty vague right we can do that

00:24:03,070 --> 00:24:08,169
because we have we have it scoped with a

00:24:06,340 --> 00:24:11,980
collection and it's only going to look

00:24:08,169 --> 00:24:13,210
for the label inside of to-do list Li so

00:24:11,980 --> 00:24:15,520
we don't have to worry about it trying

00:24:13,210 --> 00:24:18,580
to grab some label that's way out of the

00:24:15,520 --> 00:24:20,770
scope of the component now we can assert

00:24:18,580 --> 00:24:22,660
that the to do was created right so

00:24:20,770 --> 00:24:25,390
let's fill in that test since our to-do

00:24:22,660 --> 00:24:26,790
list is a collection when we select from

00:24:25,390 --> 00:24:29,370
what we're going to do

00:24:26,790 --> 00:24:31,050
to do app dot to-do list and pass the

00:24:29,370 --> 00:24:32,700
index of the item in the list that we

00:24:31,050 --> 00:24:33,690
want to select so we want to select the

00:24:32,700 --> 00:24:36,120
first one so we're going to pass the

00:24:33,690 --> 00:24:38,010
zero index and then from there we can

00:24:36,120 --> 00:24:39,810
just call the properties of the interact

00:24:38,010 --> 00:24:42,570
on it so we're going to do to-do list

00:24:39,810 --> 00:24:44,070
item zero the part the first item and

00:24:42,570 --> 00:24:46,920
then get the text off of it and we're to

00:24:44,070 --> 00:24:51,540
assert that equals my to do so let's run

00:24:46,920 --> 00:24:53,220
the tests BAM there the other thing

00:24:51,540 --> 00:24:56,040
about big test is is super fast or that

00:24:53,220 --> 00:24:57,650
that ran on about three milliseconds I

00:24:56,040 --> 00:25:00,420
think it says up there it's pretty best

00:24:57,650 --> 00:25:02,280
so let's fill in the rest of our to-do

00:25:00,420 --> 00:25:04,110
item interactor and and think about all

00:25:02,280 --> 00:25:08,160
the ways that we can interact with just

00:25:04,110 --> 00:25:11,580
a to-do item we can click the check box

00:25:08,160 --> 00:25:13,500
to toggle the item so on line 13 there

00:25:11,580 --> 00:25:15,270
we're setting a property called toggle

00:25:13,500 --> 00:25:18,090
to a clickable element so it's going to

00:25:15,270 --> 00:25:19,590
click that item when we call it we can

00:25:18,090 --> 00:25:22,020
delete the item doing the same thing by

00:25:19,590 --> 00:25:24,620
clicking we can check properties on

00:25:22,020 --> 00:25:26,700
different elements and attributes also

00:25:24,620 --> 00:25:28,470
but for this instance we're going to

00:25:26,700 --> 00:25:30,870
check if the to do is completed by

00:25:28,470 --> 00:25:33,750
checking the checked property on the

00:25:30,870 --> 00:25:35,670
checkbox we're going to double click in

00:25:33,750 --> 00:25:37,800
to and we're going to trigger a double

00:25:35,670 --> 00:25:39,540
click event by to enter into edit mode

00:25:37,800 --> 00:25:42,240
and then we're going to fill in that

00:25:39,540 --> 00:25:46,860
edit input to edit it and then we can

00:25:42,240 --> 00:25:48,720
press ENTER to submit that edit so let's

00:25:46,860 --> 00:25:51,390
take a second there's a lot being thrown

00:25:48,720 --> 00:25:54,210
at you and it's just positive check our

00:25:51,390 --> 00:25:56,220
progress we've set a big test in an

00:25:54,210 --> 00:25:58,080
existing project and we've kind of

00:25:56,220 --> 00:25:58,940
introduced interactors and built some

00:25:58,080 --> 00:26:02,040
together

00:25:58,940 --> 00:26:04,800
so let's write some more tests for this

00:26:02,040 --> 00:26:06,980
application right let's write test for

00:26:04,800 --> 00:26:09,390
editing completing and deleting it to do

00:26:06,980 --> 00:26:11,310
but we have a problem here

00:26:09,390 --> 00:26:14,370
all these tests are end to end right now

00:26:11,310 --> 00:26:16,380
and leftover data is causing issues and

00:26:14,370 --> 00:26:17,910
we're still technically in this instance

00:26:16,380 --> 00:26:20,130
of the application these are going

00:26:17,910 --> 00:26:23,100
straight to production so that's not

00:26:20,130 --> 00:26:24,930
good if you look at the gif here each

00:26:23,100 --> 00:26:26,520
time i refresh the page here it's going

00:26:24,930 --> 00:26:28,500
to make a network request and actually

00:26:26,520 --> 00:26:30,240
submit it to do so by the time I'm done

00:26:28,500 --> 00:26:32,220
refreshing here we have 6 to do's there

00:26:30,240 --> 00:26:35,040
which isn't good if you're trying to

00:26:32,220 --> 00:26:36,840
test the state in between each tests so

00:26:35,040 --> 00:26:37,920
we're to use a thing called big test

00:26:36,840 --> 00:26:40,590
Mirage

00:26:37,920 --> 00:26:42,900
and what Mirage does is it creates a

00:26:40,590 --> 00:26:47,580
client-side server that mimics your API

00:26:42,900 --> 00:26:49,380
it has a fully featured database ORM and

00:26:47,580 --> 00:26:51,600
allows you to have full control over the

00:26:49,380 --> 00:26:53,790
data in your tests do you need 200

00:26:51,600 --> 00:26:56,280
records the test pagination go for it

00:26:53,790 --> 00:26:58,380
do you need zero records the check to

00:26:56,280 --> 00:26:59,760
test an empty State awesome what about

00:26:58,380 --> 00:27:02,220
throwing a 500 error from when

00:26:59,760 --> 00:27:04,140
submitting at a forum and making sure

00:27:02,220 --> 00:27:06,800
that your client side validation is

00:27:04,140 --> 00:27:09,330
worked there great go for it it'll work

00:27:06,800 --> 00:27:11,700
so I want to give a shout out to Sam

00:27:09,330 --> 00:27:13,830
Celica for building Mirage if your an

00:27:11,700 --> 00:27:14,550
ember developer you might be familiar

00:27:13,830 --> 00:27:17,040
with that name

00:27:14,550 --> 00:27:18,420
he built ember CLI Mirage and we just

00:27:17,040 --> 00:27:20,100
pulled it out into a base JavaScript

00:27:18,420 --> 00:27:22,770
library so everybody that uses

00:27:20,100 --> 00:27:26,100
JavaScript can benefit from this awesome

00:27:22,770 --> 00:27:28,020
library so we're to use big tests in it

00:27:26,100 --> 00:27:29,550
and we're going to pass a network flag

00:27:28,020 --> 00:27:31,560
here now so it can do all the

00:27:29,550 --> 00:27:32,760
bootstrapping that we need because we

00:27:31,560 --> 00:27:34,830
don't want to do all this work manually

00:27:32,760 --> 00:27:36,920
and then we're going to add the big test

00:27:34,830 --> 00:27:39,630
Mirage dependency as a dev dependency

00:27:36,920 --> 00:27:42,360
and what that does is it creates this

00:27:39,630 --> 00:27:45,390
this structure with some with some more

00:27:42,360 --> 00:27:47,460
full subfolders here so alongside of our

00:27:45,390 --> 00:27:49,470
helpers interactors and test file we

00:27:47,460 --> 00:27:50,880
also have a network folder now that has

00:27:49,470 --> 00:27:52,080
a bunch of other folders inside of it

00:27:50,880 --> 00:27:55,620
but just you don't have to worry about

00:27:52,080 --> 00:27:58,050
that right now just know it exists when

00:27:55,620 --> 00:28:00,690
we run the big test in it with Network

00:27:58,050 --> 00:28:02,760
it does update the setup app helper with

00:28:00,690 --> 00:28:04,380
a few changes so let's take a look at

00:28:02,760 --> 00:28:06,300
that the first thing that changes is

00:28:04,380 --> 00:28:09,630
we're importing a start Mirage command

00:28:06,300 --> 00:28:12,030
from the network folder and then we have

00:28:09,630 --> 00:28:14,910
two new methods on the setup app for

00:28:12,030 --> 00:28:16,980
testing helper here one is setup and one

00:28:14,910 --> 00:28:18,420
is teardown so setup is called before

00:28:16,980 --> 00:28:20,550
the application is actually rendered and

00:28:18,420 --> 00:28:22,590
we're going to start the Mirage server

00:28:20,550 --> 00:28:23,850
the client-side server we're gonna turn

00:28:22,590 --> 00:28:26,040
logging off because that can be annoying

00:28:23,850 --> 00:28:28,890
to see your test output but you can turn

00:28:26,040 --> 00:28:30,780
that back on if you are debugging and

00:28:28,890 --> 00:28:32,220
then after the test run we're going to

00:28:30,780 --> 00:28:35,970
clean up after ourselves and shut down

00:28:32,220 --> 00:28:37,830
the test server so what happens now that

00:28:35,970 --> 00:28:39,270
we've run the big test in the command

00:28:37,830 --> 00:28:41,640
with network and

00:28:39,270 --> 00:28:45,900
I set up this and what happens when we

00:28:41,640 --> 00:28:47,400
run our tests they're gonna fail and

00:28:45,900 --> 00:28:49,350
something funny is going on here we're

00:28:47,400 --> 00:28:50,870
gonna see a ton of errors here in our

00:28:49,350 --> 00:28:54,150
console what's what's up with that

00:28:50,870 --> 00:28:56,070
so Mirage intercepts all of your network

00:28:54,150 --> 00:28:58,950
requests it's not gonna let any of them

00:28:56,070 --> 00:29:00,510
out unless you actually let it or want

00:28:58,950 --> 00:29:03,060
it so you can do a pass-through and or

00:29:00,510 --> 00:29:04,170
actually talk to the real network but by

00:29:03,060 --> 00:29:07,410
the default state it's not gonna let

00:29:04,170 --> 00:29:10,290
anything talk to the network so let's go

00:29:07,410 --> 00:29:11,670
ahead and mock our get endpoint so when

00:29:10,290 --> 00:29:13,170
the application actually loads it's

00:29:11,670 --> 00:29:15,960
gonna fetch all the to Do's

00:29:13,170 --> 00:29:18,930
so let's mock that if we go into our big

00:29:15,960 --> 00:29:21,300
test Network config folder or file we're

00:29:18,930 --> 00:29:23,970
going to I'm gonna explain a couple

00:29:21,300 --> 00:29:25,530
things here first thing you notice here

00:29:23,970 --> 00:29:27,390
on line two is we're setting a URL

00:29:25,530 --> 00:29:29,580
prefix which is a fully qualified URL

00:29:27,390 --> 00:29:31,110
and this is a URL of our API this is

00:29:29,580 --> 00:29:34,260
where an actual network request is going

00:29:31,110 --> 00:29:36,420
out to and then here on line four since

00:29:34,260 --> 00:29:38,400
we pass the URL the fully qualified URLs

00:29:36,420 --> 00:29:39,990
or prefix we don't have to actually use

00:29:38,400 --> 00:29:41,850
that in each endpoint that we're mocking

00:29:39,990 --> 00:29:43,920
and we can just say that we're getting

00:29:41,850 --> 00:29:45,510
on the route from that and when that

00:29:43,920 --> 00:29:47,070
function is invoked you get a two

00:29:45,510 --> 00:29:48,900
arguments to your function which is the

00:29:47,070 --> 00:29:52,710
schema and the request that was actually

00:29:48,900 --> 00:29:54,300
sent along with that network request and

00:29:52,710 --> 00:29:55,710
in our case we're just going to return

00:29:54,300 --> 00:29:59,880
some fixture data it's going to be an

00:29:55,710 --> 00:30:02,820
array of one item that says my to do so

00:29:59,880 --> 00:30:05,700
if we run the test again we get a little

00:30:02,820 --> 00:30:09,600
bit further but it's still some errors

00:30:05,700 --> 00:30:11,640
so let's mock the post endpoint and do

00:30:09,600 --> 00:30:12,990
the same thing so we're gonna do the

00:30:11,640 --> 00:30:15,120
exact same thing we're gonna pass the

00:30:12,990 --> 00:30:18,030
same exact data back through and these

00:30:15,120 --> 00:30:20,760
tests well pass right in this exact

00:30:18,030 --> 00:30:22,500
configuration they will always pass no

00:30:20,760 --> 00:30:27,000
matter what you do

00:30:22,500 --> 00:30:29,670
since we're posting and getting the same

00:30:27,000 --> 00:30:32,310
exact data type or the data style it

00:30:29,670 --> 00:30:33,870
would always pass and fixtures just

00:30:32,310 --> 00:30:35,580
don't get us very far

00:30:33,870 --> 00:30:38,370
the second you need to test a different

00:30:35,580 --> 00:30:40,530
state of your application it's gonna get

00:30:38,370 --> 00:30:42,450
very complicated we managed fixtures and

00:30:40,530 --> 00:30:45,120
an application about three years ago and

00:30:42,450 --> 00:30:46,890
it was a nightmare to say the least so

00:30:45,120 --> 00:30:48,630
let's just do some dynamic factories

00:30:46,890 --> 00:30:51,040
factories allow us to create specific

00:30:48,630 --> 00:30:53,110
data as we need throughout

00:30:51,040 --> 00:30:56,140
our tests and have full control over the

00:30:53,110 --> 00:30:57,700
data so if we look back at our folder

00:30:56,140 --> 00:31:00,160
structure here we have two folders that

00:30:57,700 --> 00:31:02,070
we're going to care about here it's a we

00:31:00,160 --> 00:31:05,110
need to create a model and any factory

00:31:02,070 --> 00:31:08,020
in the very near future probably like in

00:31:05,110 --> 00:31:10,150
a week or two from now the CLI will take

00:31:08,020 --> 00:31:12,250
care of this for us but conference

00:31:10,150 --> 00:31:14,290
driven development isn't good enough for

00:31:12,250 --> 00:31:17,410
for me here so we have to mean then we

00:31:14,290 --> 00:31:18,940
water this up so we're gonna go into our

00:31:17,410 --> 00:31:20,919
models folder and our index file and

00:31:18,940 --> 00:31:23,080
we're going to uncomment and export the

00:31:20,919 --> 00:31:24,010
file that we're about to create and then

00:31:23,080 --> 00:31:26,740
we're going to go into our models

00:31:24,010 --> 00:31:28,150
directory and create it to do model and

00:31:26,740 --> 00:31:30,760
this is a place where you can create

00:31:28,150 --> 00:31:32,710
relationships to other models and other

00:31:30,760 --> 00:31:35,470
other data that you might have that your

00:31:32,710 --> 00:31:36,490
application has or epi might have but

00:31:35,470 --> 00:31:37,720
we're not doing anything special so

00:31:36,490 --> 00:31:39,760
we're just gonna extend the model and

00:31:37,720 --> 00:31:42,070
send it through we're gonna do the same

00:31:39,760 --> 00:31:45,160
thing with factories and index and then

00:31:42,070 --> 00:31:47,350
in our to do J's Factory we're gonna do

00:31:45,160 --> 00:31:50,230
we're gonna create a factory that

00:31:47,350 --> 00:31:52,840
matches the shape of our api's data I

00:31:50,230 --> 00:31:55,150
want to call out something here for the

00:31:52,840 --> 00:31:59,049
title you notice that we're using faker

00:31:55,150 --> 00:32:00,549
which we import from Vic tests Mirage to

00:31:59,049 --> 00:32:02,530
create something random so each time we

00:32:00,549 --> 00:32:04,570
create a factory it's gonna create a

00:32:02,530 --> 00:32:06,250
random title and at any given point if

00:32:04,570 --> 00:32:07,840
you want you can override these by

00:32:06,250 --> 00:32:09,669
passing a second argument to the create

00:32:07,840 --> 00:32:11,320
command and you can create whatever

00:32:09,669 --> 00:32:13,030
title you want whatever I do you want

00:32:11,320 --> 00:32:15,700
whatever could state that you want you

00:32:13,030 --> 00:32:16,840
have full control over that the last

00:32:15,700 --> 00:32:19,210
thing that we need to do is we need to

00:32:16,840 --> 00:32:22,299
uncomment imports and our big test

00:32:19,210 --> 00:32:24,760
networks start file so we're gonna go in

00:32:22,299 --> 00:32:27,700
and alliance 514 and set 16 and

00:32:24,760 --> 00:32:29,200
uncomment those and make sure that those

00:32:27,700 --> 00:32:31,000
those imports are being passed to the

00:32:29,200 --> 00:32:32,890
Mirage constructor like I said in a very

00:32:31,000 --> 00:32:34,390
very future that will be taken care of

00:32:32,890 --> 00:32:37,570
for you but if you do this right now you

00:32:34,390 --> 00:32:39,880
have to do it manually so now we can

00:32:37,570 --> 00:32:42,040
manage dynamic data creation we don't

00:32:39,880 --> 00:32:45,760
have to return fixtures from our API

00:32:42,040 --> 00:32:49,059
mocks anymore right so with this updated

00:32:45,760 --> 00:32:51,220
we are in our get we are destructuring

00:32:49,059 --> 00:32:54,429
the to dues collection from the schema

00:32:51,220 --> 00:32:55,960
that's passed to us and then since I get

00:32:54,429 --> 00:32:57,340
we're just going to return to dues at

00:32:55,960 --> 00:32:59,830
all I'll just return all of the to dues

00:32:57,340 --> 00:33:02,480
that are in the database which is the

00:32:59,830 --> 00:33:05,179
fake database right and then for our

00:33:02,480 --> 00:33:06,290
host we're going to do the same thing in

00:33:05,179 --> 00:33:08,450
destructuring out of the database

00:33:06,290 --> 00:33:12,620
collection but we're also going to use

00:33:08,450 --> 00:33:14,240
the request body from the request which

00:33:12,620 --> 00:33:15,950
is what's sent along with your post

00:33:14,240 --> 00:33:18,650
request and we're going to parse that

00:33:15,950 --> 00:33:20,179
and then create a new to do based off of

00:33:18,650 --> 00:33:22,070
that so it's all dynamic data for you

00:33:20,179 --> 00:33:23,570
and then in the middle there we do some

00:33:22,070 --> 00:33:26,000
updating of the record to make sure that

00:33:23,570 --> 00:33:28,700
has the right property on it that our

00:33:26,000 --> 00:33:32,860
API expects since we're using a MongoDB

00:33:28,700 --> 00:33:35,510
here so Mirage has a concept of

00:33:32,860 --> 00:33:37,250
scenarios where you can well create

00:33:35,510 --> 00:33:40,490
scenarios from the data that you need

00:33:37,250 --> 00:33:42,080
these can be really useful i we have an

00:33:40,490 --> 00:33:43,669
application that uses all of this and

00:33:42,080 --> 00:33:46,340
it's really nice when you're developing

00:33:43,669 --> 00:33:48,440
new features I keep on giving the

00:33:46,340 --> 00:33:49,460
client-side error handling example

00:33:48,440 --> 00:33:50,929
because that's something that I actually

00:33:49,460 --> 00:33:53,450
had to do I to make sure that I added

00:33:50,929 --> 00:33:56,600
all of those improperly responded to the

00:33:53,450 --> 00:33:58,280
API 500 errors so instead of actually

00:33:56,600 --> 00:34:00,470
going through and trying to make the API

00:33:58,280 --> 00:34:02,630
break I just created a Mirage scenario

00:34:00,470 --> 00:34:04,730
and went to town on making sure that all

00:34:02,630 --> 00:34:07,220
worked so we're going to create a

00:34:04,730 --> 00:34:10,460
default scenario which is created by the

00:34:07,220 --> 00:34:13,129
the CLI for you you can leave this blank

00:34:10,460 --> 00:34:14,929
this will create this data for each test

00:34:13,129 --> 00:34:18,139
run so be very sure this is what you

00:34:14,929 --> 00:34:20,060
want to do if not you can create data

00:34:18,139 --> 00:34:22,609
for your tests you need as you need when

00:34:20,060 --> 00:34:24,260
you go to write those tests so in this

00:34:22,609 --> 00:34:25,970
scenario we're just going to create four

00:34:24,260 --> 00:34:29,090
to do's and it's just going to create

00:34:25,970 --> 00:34:31,520
what's back and gave it so let's run the

00:34:29,090 --> 00:34:34,570
test this year well that's that's a

00:34:31,520 --> 00:34:35,720
weird error what's going on there oh

00:34:34,570 --> 00:34:38,480
okay

00:34:35,720 --> 00:34:42,139
so our response here from Mirage it has

00:34:38,480 --> 00:34:44,210
a root object on it right as a to do key

00:34:42,139 --> 00:34:45,980
and then inside of it an array of to

00:34:44,210 --> 00:34:48,320
Do's and we're not expecting that we're

00:34:45,980 --> 00:34:50,659
just expecting an array of objects so

00:34:48,320 --> 00:34:52,429
let's we need to serialize our data to

00:34:50,659 --> 00:34:54,169
match the shape that our API has that's

00:34:52,429 --> 00:34:57,619
create a serialize err Mirage you can do

00:34:54,169 --> 00:34:59,210
this for us so Mirage comes with three

00:34:57,619 --> 00:35:01,310
serializers out-of-the-box for you you

00:34:59,210 --> 00:35:04,070
can use a rest an active model or a JSON

00:35:01,310 --> 00:35:05,270
API to réaliser you can also write your

00:35:04,070 --> 00:35:08,000
own so you realize err if you really

00:35:05,270 --> 00:35:09,680
want what we're just gonna use the basic

00:35:08,000 --> 00:35:11,609
rest adapter here and

00:35:09,680 --> 00:35:13,200
the same story here you have to make

00:35:11,609 --> 00:35:15,420
sure the update your index file and I

00:35:13,200 --> 00:35:18,530
make sure you import that to the Mirage

00:35:15,420 --> 00:35:21,150
constructor so if we run the tests here

00:35:18,530 --> 00:35:22,320
they're gonna pass and we have some fake

00:35:21,150 --> 00:35:24,090
data in there so you can see that we

00:35:22,320 --> 00:35:27,359
have a bunch of faker created records

00:35:24,090 --> 00:35:29,070
there so congratulations we have

00:35:27,359 --> 00:35:31,380
successfully mocked the network layer of

00:35:29,070 --> 00:35:34,350
this really simple app that was a lot to

00:35:31,380 --> 00:35:35,850
cover there I know but it's fully setup

00:35:34,350 --> 00:35:38,160
with dynamic data that we can create

00:35:35,850 --> 00:35:41,100
control whatever test scenario we please

00:35:38,160 --> 00:35:43,290
like if we wanted to create 9002 dues we

00:35:41,100 --> 00:35:46,680
can do that I don't recommend it though

00:35:43,290 --> 00:35:48,660
it sounds like like a lot of anxiety so

00:35:46,680 --> 00:35:50,820
now we can fill in the rest of our tests

00:35:48,660 --> 00:35:53,400
things like editing toggling deleting

00:35:50,820 --> 00:35:55,650
whatever you want to do with - dues so

00:35:53,400 --> 00:35:57,690
nested interactors are pretty awesome

00:35:55,650 --> 00:36:01,560
right so you can see they're on lines 4

00:35:57,690 --> 00:36:03,570
to 7 we're doing some some nesting calls

00:36:01,560 --> 00:36:06,930
to our to-do item interactor that we

00:36:03,570 --> 00:36:07,980
created but writing to-do lists zero for

00:36:06,930 --> 00:36:09,780
each interaction that we're gonna

00:36:07,980 --> 00:36:13,020
perform is a little bit verbose and a

00:36:09,780 --> 00:36:15,300
little bit annoying so let's let's not

00:36:13,020 --> 00:36:17,100
do that and interactor provides us a way

00:36:15,300 --> 00:36:20,010
to not have to do that we can just pass

00:36:17,100 --> 00:36:22,320
and only after the chained interactor or

00:36:20,010 --> 00:36:23,430
the Nessen interactor and now all the

00:36:22,320 --> 00:36:25,560
interactions that we have under there

00:36:23,430 --> 00:36:27,480
which is a double click filling the

00:36:25,560 --> 00:36:29,940
input and then press enter will all

00:36:27,480 --> 00:36:37,500
happen on the nested a nested interactor

00:36:29,940 --> 00:36:39,570
there so let's skip the slide so this is

00:36:37,500 --> 00:36:42,660
what our mocking endpoint looks like for

00:36:39,570 --> 00:36:45,600
the edit which is a patch and deleting

00:36:42,660 --> 00:36:51,119
which is a delete we're going to find

00:36:45,600 --> 00:36:52,650
the parameter in our database collection

00:36:51,119 --> 00:36:54,030
and then just pass it along and update

00:36:52,650 --> 00:36:56,790
it with the attributes that are given in

00:36:54,030 --> 00:36:58,200
the request and then similar story for

00:36:56,790 --> 00:36:59,970
the delete we're gonna look up the

00:36:58,200 --> 00:37:01,710
request ID and then actually just

00:36:59,970 --> 00:37:05,340
destroy and then return the collection

00:37:01,710 --> 00:37:09,300
that has the destroyed look so let's go

00:37:05,340 --> 00:37:10,890
run our tests we have about 13 tests

00:37:09,300 --> 00:37:12,700
here I didn't write a full-on test suite

00:37:10,890 --> 00:37:16,010
but I could have

00:37:12,700 --> 00:37:18,290
and I think those run pretty fast and so

00:37:16,010 --> 00:37:22,130
you don't think I'm lying to you here is

00:37:18,290 --> 00:37:26,060
big test running an iOS Safari Firefox

00:37:22,130 --> 00:37:27,890
and Chrome also here so these are all

00:37:26,060 --> 00:37:29,210
running our tests anywhere there's a

00:37:27,890 --> 00:37:32,590
browser you could actually run this on a

00:37:29,210 --> 00:37:35,270
physical device so like if you had my

00:37:32,590 --> 00:37:37,070
network IP address and I started the

00:37:35,270 --> 00:37:40,370
server you all could start running tests

00:37:37,070 --> 00:37:41,840
just by visiting that URL so you can

00:37:40,370 --> 00:37:45,800
find the full suite I can't fit it all

00:37:41,840 --> 00:37:48,500
into a slide here at my github Rockdale

00:37:45,800 --> 00:37:53,060
12 and big desk to do MVC so you can

00:37:48,500 --> 00:37:55,100
check that out so we did it we set up

00:37:53,060 --> 00:37:58,400
two MVC running big tests running in

00:37:55,100 --> 00:38:00,170
cross browser and we learned how to what

00:37:58,400 --> 00:38:01,310
interactor is we mocked our entire

00:38:00,170 --> 00:38:04,400
network layers so we don't have to

00:38:01,310 --> 00:38:07,450
actually talk to a real network and we

00:38:04,400 --> 00:38:09,440
wrote some big tests so coming back to

00:38:07,450 --> 00:38:12,040
complicated problems needs simple

00:38:09,440 --> 00:38:14,270
examples I want to show a couple more

00:38:12,040 --> 00:38:16,310
examples of what big test looks like in

00:38:14,270 --> 00:38:18,230
interactors in a real production app

00:38:16,310 --> 00:38:20,660
that we've been developing for one of

00:38:18,230 --> 00:38:24,440
our clients so the first one would be

00:38:20,660 --> 00:38:26,480
here where we're actually creating data

00:38:24,440 --> 00:38:29,000
that we specifically need for this test

00:38:26,480 --> 00:38:30,260
so we're testing that this thing called

00:38:29,000 --> 00:38:31,400
a resource I'm not going to get into the

00:38:30,260 --> 00:38:33,110
data model of this application because

00:38:31,400 --> 00:38:34,850
it's really complicated but we're gonna

00:38:33,110 --> 00:38:35,930
create a resource and create that it's

00:38:34,850 --> 00:38:38,000
hidden and we're going to make some

00:38:35,930 --> 00:38:40,430
assertions that in the UI that it

00:38:38,000 --> 00:38:42,290
actually hides this thing from us and

00:38:40,430 --> 00:38:44,660
then when we create that data we're

00:38:42,290 --> 00:38:48,080
going to visit the URL of that data

00:38:44,660 --> 00:38:51,800
that's created so on line 5 we set the

00:38:48,080 --> 00:38:54,440
resource variable equal to the data that

00:38:51,800 --> 00:38:56,750
we created and then when we visit that

00:38:54,440 --> 00:38:58,550
route on line 11 we're actually picking

00:38:56,750 --> 00:39:00,440
the ID off that that record that we

00:38:58,550 --> 00:39:03,820
created and visiting it so it's the it's

00:39:00,440 --> 00:39:06,470
a full control over the data there I

00:39:03,820 --> 00:39:09,110
wanted to show you what filling in a

00:39:06,470 --> 00:39:12,530
form looks like with an interactive so

00:39:09,110 --> 00:39:14,480
we can change things as long as we want

00:39:12,530 --> 00:39:16,910
here and the thing I kinda want to point

00:39:14,480 --> 00:39:18,920
out here is this is interacting with a

00:39:16,910 --> 00:39:20,510
date picker component which is actually

00:39:18,920 --> 00:39:22,099
taken from our component library that's

00:39:20,510 --> 00:39:23,839
shared between many like

00:39:22,099 --> 00:39:25,849
ten or fifteen other UI applications

00:39:23,839 --> 00:39:27,499
when we just import that interactor and

00:39:25,849 --> 00:39:29,059
then just using our test suite we didn't

00:39:27,499 --> 00:39:31,009
have to write interactions for how to

00:39:29,059 --> 00:39:32,269
fill in and in a date picker for

00:39:31,009 --> 00:39:33,499
selecting dates or anything like that

00:39:32,269 --> 00:39:36,319
because that was already written for us

00:39:33,499 --> 00:39:39,170
when we built the the component in our

00:39:36,319 --> 00:39:40,460
component library so we fill in what

00:39:39,170 --> 00:39:44,359
we're doing here is we're testing that

00:39:40,460 --> 00:39:45,710
the application when we fill in a bunch

00:39:44,359 --> 00:39:48,229
of bad data it'll give us client-side

00:39:45,710 --> 00:39:50,269
errors so this is what the tests looked

00:39:48,229 --> 00:39:52,720
like when they run as soon as I

00:39:50,269 --> 00:39:55,460
interacted like interaction pops in and

00:39:52,720 --> 00:39:58,700
we assert that those errors exist on the

00:39:55,460 --> 00:40:00,799
page and the last one I wanted to give

00:39:58,700 --> 00:40:02,329
as a more complicated example as

00:40:00,799 --> 00:40:04,549
accessibility because I love

00:40:02,329 --> 00:40:07,220
accessibility it's very near and dear to

00:40:04,549 --> 00:40:09,049
my heart and this application we're

00:40:07,220 --> 00:40:11,119
we're testing that our focus management

00:40:09,049 --> 00:40:15,769
for the single page app actually still

00:40:11,119 --> 00:40:17,119
works so when we travel our routes we're

00:40:15,769 --> 00:40:19,400
making sure that it's focusing the

00:40:17,119 --> 00:40:22,489
proper thing from each route transition

00:40:19,400 --> 00:40:23,960
and making sure that it when we go from

00:40:22,489 --> 00:40:25,339
one route on the transition back it's

00:40:23,960 --> 00:40:28,969
selecting the the right item and an

00:40:25,339 --> 00:40:32,690
infinite scrolling list so that's this

00:40:28,969 --> 00:40:33,979
is what these tests look like so it's

00:40:32,690 --> 00:40:35,299
running through all those navigating

00:40:33,979 --> 00:40:36,829
routes going back and forth and making

00:40:35,299 --> 00:40:37,190
sure that the focus is actually still

00:40:36,829 --> 00:40:40,789
there

00:40:37,190 --> 00:40:42,710
so I singled those tests out for you if

00:40:40,789 --> 00:40:45,200
you want to see this application it's a

00:40:42,710 --> 00:40:47,150
hundred percent open source so this is

00:40:45,200 --> 00:40:48,650
where it lives its folio org folio

00:40:47,150 --> 00:40:51,440
stands for the future of libraries is

00:40:48,650 --> 00:40:53,719
open and we're building the holdings

00:40:51,440 --> 00:40:54,799
application this app uses big tests

00:40:53,719 --> 00:40:57,559
that's actually where big test was

00:40:54,799 --> 00:40:59,930
developed it has over a thousand UI

00:40:57,559 --> 00:41:02,930
tests and they all run about six minutes

00:40:59,930 --> 00:41:04,039
on CI which are slower machines and your

00:41:02,930 --> 00:41:06,559
local machine

00:41:04,039 --> 00:41:08,210
we have 96% test coverage there we have

00:41:06,559 --> 00:41:09,680
all kinds of tests there ranging from

00:41:08,210 --> 00:41:11,359
all kinds of complexity so if you want

00:41:09,680 --> 00:41:14,059
to dip your toes in and see what that

00:41:11,359 --> 00:41:16,759
actually looks like go ahead and take a

00:41:14,059 --> 00:41:20,029
look there are they're about like five

00:41:16,759 --> 00:41:23,690
unit tests there and that's for testing

00:41:20,029 --> 00:41:25,609
the Redux relationship merging so the

00:41:23,690 --> 00:41:28,130
one question I get a lot is what about

00:41:25,609 --> 00:41:29,869
graphic UL well with graph QL it's

00:41:28,130 --> 00:41:32,089
actually even easier to use with big

00:41:29,869 --> 00:41:33,890
tests and mock your data layer they have

00:41:32,089 --> 00:41:34,820
helpers out there for creating a mock

00:41:33,890 --> 00:41:36,560
server and

00:41:34,820 --> 00:41:38,750
QL has a schema you just pass your

00:41:36,560 --> 00:41:39,980
schema from your your epi and it can

00:41:38,750 --> 00:41:42,980
come off all that data for you so you

00:41:39,980 --> 00:41:45,230
just skip more lunch basically so

00:41:42,980 --> 00:41:46,460
interactors are awesome and it seems

00:41:45,230 --> 00:41:49,100
like they're a great pairing for testing

00:41:46,460 --> 00:41:51,020
just components and you absolutely can

00:41:49,100 --> 00:41:52,760
do that and we do do that like I

00:41:51,020 --> 00:41:56,060
mentioned earlier so instead of

00:41:52,760 --> 00:41:58,000
importing the setup app for testing

00:41:56,060 --> 00:42:00,260
we're going to import the amount

00:41:58,000 --> 00:42:03,790
component and a helper and we're just

00:42:00,260 --> 00:42:05,870
going to mount a component here and I

00:42:03,790 --> 00:42:08,360
wanted to point this one out so it's

00:42:05,870 --> 00:42:10,880
from the same component here we're we're

00:42:08,360 --> 00:42:12,560
passing a prop here called warning and

00:42:10,880 --> 00:42:15,020
then on line 13 we're asserting that

00:42:12,560 --> 00:42:17,480
that Prop exists with a feedback text

00:42:15,020 --> 00:42:20,390
item on our interactor and if you look

00:42:17,480 --> 00:42:22,010
at feedback text here on line 22 it's

00:42:20,390 --> 00:42:24,440
actually using a CSS module so

00:42:22,010 --> 00:42:26,480
interactors work with CSS modules -

00:42:24,440 --> 00:42:28,430
those were built with in mind with them

00:42:26,480 --> 00:42:31,010
in mind so you can just import those CSS

00:42:28,430 --> 00:42:32,840
modules and use them as selectors so you

00:42:31,010 --> 00:42:36,680
can get started by visiting big tests GS

00:42:32,840 --> 00:42:39,320
do the CLI isn't quite ready yet but

00:42:36,680 --> 00:42:42,290
give it like a week and we'll be there I

00:42:39,320 --> 00:42:43,610
promise and big test is still in its

00:42:42,290 --> 00:42:45,110
early days and we would love to have you

00:42:43,610 --> 00:42:48,110
as a contributor if you're interested

00:42:45,110 --> 00:42:51,110
I'm always open to pair and and help

00:42:48,110 --> 00:42:53,390
people get there getting into it and get

00:42:51,110 --> 00:42:55,640
their feet wet I love I love working

00:42:53,390 --> 00:42:56,900
with anybody in the community so we

00:42:55,640 --> 00:42:59,240
still have a lot of work to do this is

00:42:56,900 --> 00:43:02,150
what our fully fleshed out emoji map

00:42:59,240 --> 00:43:03,920
looks like so with zero config in mind

00:43:02,150 --> 00:43:05,960
we want to build CLI that will handle

00:43:03,920 --> 00:43:07,760
all the most mundane tasks for you you

00:43:05,960 --> 00:43:10,070
don't so you can focus on writing tests

00:43:07,760 --> 00:43:12,710
boilerplate snow fun we want to have

00:43:10,070 --> 00:43:15,370
computers take care of that for you CLI

00:43:12,710 --> 00:43:17,180
will also help and take care of

00:43:15,370 --> 00:43:18,560
launching for you so you don't have to

00:43:17,180 --> 00:43:20,600
use karma or test them but if you would

00:43:18,560 --> 00:43:24,080
like you can still use those launchers

00:43:20,600 --> 00:43:25,250
for your project also if you want the

00:43:24,080 --> 00:43:27,770
last two items on this list are

00:43:25,250 --> 00:43:29,300
longer-term goals we want to replace

00:43:27,770 --> 00:43:31,400
mirage with something more modern that

00:43:29,300 --> 00:43:33,470
uses serviceworkers and intercept

00:43:31,400 --> 00:43:37,550
network requests so you have full access

00:43:33,470 --> 00:43:40,310
to your network pane but for now mirage

00:43:37,550 --> 00:43:41,540
does an amazing job for us and we don't

00:43:40,310 --> 00:43:43,190
need to replace that so that's a

00:43:41,540 --> 00:43:44,660
longer-term goal we have a lot of cool

00:43:43,190 --> 00:43:46,280
ideas for what we can do with service

00:43:44,660 --> 00:43:48,080
workers but

00:43:46,280 --> 00:43:50,180
that's in the future and the last one

00:43:48,080 --> 00:43:53,660
which is even further out maybe like mid

00:43:50,180 --> 00:43:55,880
or early 2019 would be writing our own

00:43:53,660 --> 00:43:57,860
runner so while you can still use it

00:43:55,880 --> 00:43:59,390
with mocha or jasmine or jest or

00:43:57,860 --> 00:44:01,490
whatever you want we want to write our

00:43:59,390 --> 00:44:02,900
own runner that we can smartly split

00:44:01,490 --> 00:44:05,570
your tests and paralyze them to make it

00:44:02,900 --> 00:44:07,940
even faster like like I said we have

00:44:05,570 --> 00:44:09,350
like 1,200 1,100 tests and that sweet

00:44:07,940 --> 00:44:10,580
and they run in about six minutes we

00:44:09,350 --> 00:44:13,640
think we can probably cut that down to

00:44:10,580 --> 00:44:16,400
about two and we're looking at adding

00:44:13,640 --> 00:44:20,360
other features like recording or honest

00:44:16,400 --> 00:44:21,800
fail or screenshotting on fail but those

00:44:20,360 --> 00:44:23,780
are further down the road I would like

00:44:21,800 --> 00:44:27,350
to give a big thanks to will Lisbon he

00:44:23,780 --> 00:44:29,510
basically wrote big tests himself I have

00:44:27,350 --> 00:44:31,610
helped a little bit but this is all

00:44:29,510 --> 00:44:33,440
mostly his work so I'd like to give big

00:44:31,610 --> 00:44:35,150
thanks to him and I'd like you to give a

00:44:33,440 --> 00:44:36,440
big thanks to front side for sponsoring

00:44:35,150 --> 00:44:38,690
all the work on this for us to be able

00:44:36,440 --> 00:44:45,690
to do it so thanks

00:44:38,690 --> 00:44:45,690

YouTube URL: https://www.youtube.com/watch?v=243TCc5qP-g


