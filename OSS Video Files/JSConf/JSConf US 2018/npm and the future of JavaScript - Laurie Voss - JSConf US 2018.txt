Title: npm and the future of JavaScript - Laurie Voss - JSConf US 2018
Publication date: 2018-11-10
Playlist: JSConf US 2018
Description: 
	
Captions: 
	00:00:00,320 --> 00:00:03,840
[Music]

00:00:02,070 --> 00:00:05,660
[Applause]

00:00:03,840 --> 00:00:07,410
[Music]

00:00:05,660 --> 00:00:09,280
[Applause]

00:00:07,410 --> 00:00:11,020
[Music]

00:00:09,280 --> 00:00:12,780
[Applause]

00:00:11,020 --> 00:00:15,920
[Music]

00:00:12,780 --> 00:00:15,920
[Applause]

00:00:16,870 --> 00:00:24,050
[Music]

00:00:26,550 --> 00:00:33,640
hello everybody would just sort of stay

00:00:31,689 --> 00:00:35,110
in room be out of momentum but that

00:00:33,640 --> 00:00:37,570
didn't happen

00:00:35,110 --> 00:00:39,969
hello everybody I am thrilled to be here

00:00:37,570 --> 00:00:42,160
I am thrilled to be back at JS comp and

00:00:39,969 --> 00:00:46,900
thrilled that J's conf itself is back I

00:00:42,160 --> 00:00:48,850
was so sad I was so sad when it had to

00:00:46,900 --> 00:00:51,460
shut down and I'm so glad that it is

00:00:48,850 --> 00:00:53,200
back but before we get started and is

00:00:51,460 --> 00:00:55,210
very important that the first order of

00:00:53,200 --> 00:00:58,000
business is that I take a crowd selfie

00:00:55,210 --> 00:01:02,110
because if I don't take a selfie with

00:00:58,000 --> 00:01:03,239
you did this even really happen all

00:01:02,110 --> 00:01:05,470
right

00:01:03,239 --> 00:01:10,329
important things out of the way I can

00:01:05,470 --> 00:01:13,479
just wing it from now I'm Laurie vos I

00:01:10,329 --> 00:01:15,310
am the the co-founder of NPM Inc my

00:01:13,479 --> 00:01:16,900
title is CEO but don't take that too

00:01:15,310 --> 00:01:18,720
seriously they had to give me a title

00:01:16,900 --> 00:01:21,310
and that one happened to be unoccupied

00:01:18,720 --> 00:01:23,950
what I am is a web developer I've been a

00:01:21,310 --> 00:01:26,670
web developer for 22 years now and I

00:01:23,950 --> 00:01:29,260
really really care about web development

00:01:26,670 --> 00:01:31,810
and today I'm going to be talking to you

00:01:29,260 --> 00:01:34,030
about what's going on in the world of

00:01:31,810 --> 00:01:36,220
JavaScript because NPM has a lot of

00:01:34,030 --> 00:01:38,619
information about what's going on in the

00:01:36,220 --> 00:01:40,090
world of JavaScript we have real usage

00:01:38,619 --> 00:01:41,950
numbers not just hype about you know

00:01:40,090 --> 00:01:44,950
what you should use this is what you're

00:01:41,950 --> 00:01:46,299
actually using and we know and we're

00:01:44,950 --> 00:01:47,830
gonna share it with you with the hope

00:01:46,299 --> 00:01:49,540
that it'll help you make technical

00:01:47,830 --> 00:01:50,770
decisions if you know what's really

00:01:49,540 --> 00:01:52,150
getting usage if you know it's really

00:01:50,770 --> 00:01:54,369
going up and what's really going down

00:01:52,150 --> 00:01:55,840
then you can plan your 20:19 and go I

00:01:54,369 --> 00:01:59,560
should learn that I should stop using

00:01:55,840 --> 00:02:01,060
that I should move on so there's three

00:01:59,560 --> 00:02:02,500
parts to this talk first

00:02:01,060 --> 00:02:03,729
there's gonna be a quick tour of stuff

00:02:02,500 --> 00:02:05,530
that you should know about NPM

00:02:03,729 --> 00:02:07,960
especially our newer features because

00:02:05,530 --> 00:02:10,209
not that information is not perfectly

00:02:07,960 --> 00:02:13,720
distributed yet and second I'm gonna

00:02:10,209 --> 00:02:15,610
talk about what NPM knows about you who

00:02:13,720 --> 00:02:17,860
you are and what kind of tools you use

00:02:15,610 --> 00:02:19,989
right now and finally I'm going to make

00:02:17,860 --> 00:02:20,520
some predictions about what tools that

00:02:19,989 --> 00:02:23,310
you should

00:02:20,520 --> 00:02:25,260
in 2019 and where javascript is going to

00:02:23,310 --> 00:02:26,970
go in the next couple of years so you

00:02:25,260 --> 00:02:33,000
should stick around because you can

00:02:26,970 --> 00:02:34,290
watch me be extremely wrong so the first

00:02:33,000 --> 00:02:37,230
thing you should know about NPM is that

00:02:34,290 --> 00:02:39,720
NPM is extremely popular NPM has more

00:02:37,230 --> 00:02:41,400
than 10 million users these days and

00:02:39,720 --> 00:02:45,840
they download more than 6 billion

00:02:41,400 --> 00:02:47,760
packages every 7 days we think about 85%

00:02:45,840 --> 00:02:50,670
of the people who use JavaScript for

00:02:47,760 --> 00:02:52,350
anything are already using NPM and it's

00:02:50,670 --> 00:02:55,920
gonna hit a hundred percent we don't

00:02:52,350 --> 00:02:57,230
think that there's any limit to that and

00:02:55,920 --> 00:02:59,250
that's even more amazing because

00:02:57,230 --> 00:03:01,290
javascript is by some measure is the

00:02:59,250 --> 00:03:03,060
most popular programming language in the

00:03:01,290 --> 00:03:06,780
world right now it is the biggest

00:03:03,060 --> 00:03:08,430
language on github by a long way and 70%

00:03:06,780 --> 00:03:10,410
of people who responded to Stack

00:03:08,430 --> 00:03:13,320
Overflow survey said that they use

00:03:10,410 --> 00:03:14,760
JavaScript which means that if you

00:03:13,320 --> 00:03:18,480
believe those numbers and you could do

00:03:14,760 --> 00:03:21,570
the math it's possible that 50% of all

00:03:18,480 --> 00:03:24,270
programmers in the world are using NPM

00:03:21,570 --> 00:03:27,480
right now regardless of what they do as

00:03:24,270 --> 00:03:29,220
a programmer the next thing to know

00:03:27,480 --> 00:03:31,140
about NPM is that NPM is being used

00:03:29,220 --> 00:03:33,780
everywhere javascript is being used and

00:03:31,140 --> 00:03:35,550
javascript is being used everywhere

00:03:33,780 --> 00:03:36,930
people are building websites in it

00:03:35,550 --> 00:03:38,550
obviously but they're also building

00:03:36,930 --> 00:03:40,170
mobile apps they're building desktop

00:03:38,550 --> 00:03:42,660
apps they're writing server-side code

00:03:40,170 --> 00:03:44,370
they're doing robotics and IOT and

00:03:42,660 --> 00:03:48,120
JavaScript and all of these people are

00:03:44,370 --> 00:03:50,690
using NPM to do it NPM has become the

00:03:48,120 --> 00:03:54,320
package manager for all of JavaScript

00:03:50,690 --> 00:03:57,330
but above all NPM is for web developers

00:03:54,320 --> 00:03:59,310
93% of people who use NPM say that the

00:03:57,330 --> 00:04:01,860
code that they write is used in a

00:03:59,310 --> 00:04:05,460
browser at least some of the time that

00:04:01,860 --> 00:04:08,010
is a huge shift for NPM NPM came to life

00:04:05,460 --> 00:04:10,320
thinking of itself as the node package

00:04:08,010 --> 00:04:12,210
manner it manager thought of itself as a

00:04:10,320 --> 00:04:14,280
tool for server-side JavaScript and

00:04:12,210 --> 00:04:16,020
that's no longer true it is primarily a

00:04:14,280 --> 00:04:22,410
tool that people use to put websites

00:04:16,020 --> 00:04:24,360
together and in fact 97% of the code in

00:04:22,410 --> 00:04:26,850
a modern web app is downloaded from NPM

00:04:24,360 --> 00:04:29,220
you as the application developer are

00:04:26,850 --> 00:04:30,390
responsible only for the last 3% all of

00:04:29,220 --> 00:04:32,190
the interesting parts of your

00:04:30,390 --> 00:04:33,780
application the parts that you write are

00:04:32,190 --> 00:04:35,520
only three percent of the total

00:04:33,780 --> 00:04:39,360
code base in a modern rich web

00:04:35,520 --> 00:04:41,070
application the current version of NPM

00:04:39,360 --> 00:04:43,260
is NPM six which means that if you are

00:04:41,070 --> 00:04:45,300
using NPM three or NPM four which

00:04:43,260 --> 00:04:47,490
something like 40% of you are then you

00:04:45,300 --> 00:04:52,590
are woefully behind the times and it is

00:04:47,490 --> 00:04:54,750
time to upgrade and PM six is twenty

00:04:52,590 --> 00:04:56,280
times faster than NPM four was so that

00:04:54,750 --> 00:04:59,460
by itself should be enough reason for

00:04:56,280 --> 00:05:01,080
you to upgrade and because I said that

00:04:59,460 --> 00:05:04,500
NPM is faster now somebody is going to

00:05:01,080 --> 00:05:06,960
ask is it faster than yarn the answer is

00:05:04,500 --> 00:05:09,090
yes it is faster than yarn or more

00:05:06,960 --> 00:05:11,520
accurately all of the package managers

00:05:09,090 --> 00:05:13,080
are about the same speed now because

00:05:11,520 --> 00:05:15,060
open-source worked the way that

00:05:13,080 --> 00:05:17,490
open-source is supposed to work and the

00:05:15,060 --> 00:05:19,080
makers of yarn and NPM and P NPM and all

00:05:17,490 --> 00:05:21,060
of the other JavaScript package managers

00:05:19,080 --> 00:05:22,560
got together and started talking to each

00:05:21,060 --> 00:05:24,630
other and sharing code and sharing

00:05:22,560 --> 00:05:26,340
expertise and all of the package

00:05:24,630 --> 00:05:28,680
managers got a lot faster in the last

00:05:26,340 --> 00:05:30,840
two years but as a result they're now

00:05:28,680 --> 00:05:32,460
all roughly the same speed because all

00:05:30,840 --> 00:05:36,810
of the low-hanging fruit has been taken

00:05:32,460 --> 00:05:39,840
away part of how this speed came about

00:05:36,810 --> 00:05:42,660
in NPM six is one of the biggest changes

00:05:39,840 --> 00:05:44,970
in NPM recently which is that NPM five

00:05:42,660 --> 00:05:47,340
and six they lock by default whenever

00:05:44,970 --> 00:05:50,250
you install a package lock JSON is

00:05:47,340 --> 00:05:51,570
created which means that the packages

00:05:50,250 --> 00:05:53,580
that you are using in development are

00:05:51,570 --> 00:05:55,110
exactly the same packages that turn upon

00:05:53,580 --> 00:05:57,720
production this was yarns biggest

00:05:55,110 --> 00:05:59,430
innovation and it became absolutely

00:05:57,720 --> 00:06:01,050
essential because of the number of

00:05:59,430 --> 00:06:04,050
modules involved the average web

00:06:01,050 --> 00:06:05,880
application uses a thousand modules you

00:06:04,050 --> 00:06:07,500
need a package lock in that situation

00:06:05,880 --> 00:06:09,510
and yarn was correct to notice that and

00:06:07,500 --> 00:06:13,410
so we followed their we followed their

00:06:09,510 --> 00:06:16,140
example and it was a good idea and pm6

00:06:13,410 --> 00:06:18,150
also introduces NPM CI this is an

00:06:16,140 --> 00:06:19,950
alternative way of calling NPM for use

00:06:18,150 --> 00:06:21,510
in continuous integration environments

00:06:19,950 --> 00:06:24,810
and continuous integration environments

00:06:21,510 --> 00:06:26,190
there are certain constraints that are

00:06:24,810 --> 00:06:27,510
released we know that there's not going

00:06:26,190 --> 00:06:28,890
to be a node modules folder we know a

00:06:27,510 --> 00:06:30,870
couple other things because it's running

00:06:28,890 --> 00:06:32,700
in CI and that means that we can run npm

00:06:30,870 --> 00:06:35,669
install in a mode that is twice as fast

00:06:32,700 --> 00:06:38,010
as an ordinary install and loses nothing

00:06:35,669 --> 00:06:39,419
so if you're using NPM install in your

00:06:38,010 --> 00:06:41,909
continuous integration you can just

00:06:39,419 --> 00:06:43,440
introduce NPM CI and your builds will

00:06:41,909 --> 00:06:44,840
suddenly be twice as fast as they were

00:06:43,440 --> 00:06:48,480
before

00:06:44,840 --> 00:06:50,040
as NPM has got bigger security has

00:06:48,480 --> 00:06:51,390
become an even bigger concern for us

00:06:50,040 --> 00:06:53,640
earlier this year

00:06:51,390 --> 00:06:56,940
NPM acquired lift security that was new

00:06:53,640 --> 00:06:58,320
we've never acquired anybody before and

00:06:56,940 --> 00:06:59,940
the first thing that we did was take

00:06:58,320 --> 00:07:02,820
their node security platform and

00:06:59,940 --> 00:07:04,380
integrated into NPM itself that resulted

00:07:02,820 --> 00:07:07,290
in a bunch of new features the first of

00:07:04,380 --> 00:07:08,640
which was two-factor off to factor auth

00:07:07,290 --> 00:07:10,200
is important for everyone but it's

00:07:08,640 --> 00:07:12,180
especially important if you publish

00:07:10,200 --> 00:07:13,800
packages if you're a package author you

00:07:12,180 --> 00:07:15,600
should be using two-factor off to make

00:07:13,800 --> 00:07:19,920
sure that nobody can publish your

00:07:15,600 --> 00:07:23,070
packages as you in May we also launched

00:07:19,920 --> 00:07:24,690
NPM quick audits you've probably already

00:07:23,070 --> 00:07:26,190
seen them if you're running NPM because

00:07:24,690 --> 00:07:28,470
they happen every time you install now

00:07:26,190 --> 00:07:30,300
you get notices if any of the packages

00:07:28,470 --> 00:07:33,390
that you are installing have any known

00:07:30,300 --> 00:07:34,890
vulnerabilities this works in nearly

00:07:33,390 --> 00:07:38,160
every version of NPM but if you're using

00:07:34,890 --> 00:07:39,420
NPM 6 the warnings are more detailed and

00:07:38,160 --> 00:07:43,350
the information that you get out of them

00:07:39,420 --> 00:07:45,000
is better we do about three and a half

00:07:43,350 --> 00:07:46,230
of these quick audits every week and the

00:07:45,000 --> 00:07:48,200
stats that we're getting from these

00:07:46,230 --> 00:07:50,460
quick audits are a little bit alarming

00:07:48,200 --> 00:07:52,350
something like 11 percent of the

00:07:50,460 --> 00:07:54,120
packages installed right now have

00:07:52,350 --> 00:07:55,980
critical vulnerabilities in them

00:07:54,120 --> 00:07:57,990
critical vulnerabilities we don't give

00:07:55,980 --> 00:08:00,300
those away like candy those are sort of

00:07:57,990 --> 00:08:02,730
stop everything you are going to get

00:08:00,300 --> 00:08:05,820
hacked problem and 11 percent of

00:08:02,730 --> 00:08:07,590
installs have them in them 37 percent

00:08:05,820 --> 00:08:10,230
had a high vulnerability which is still

00:08:07,590 --> 00:08:12,810
nothing to sneeze at but fortunately

00:08:10,230 --> 00:08:15,300
improving that is easy because running

00:08:12,810 --> 00:08:16,740
NPM audit will give you all of will give

00:08:15,300 --> 00:08:18,510
you a detailed report of all of the

00:08:16,740 --> 00:08:20,400
vulnerabilities in your application and

00:08:18,510 --> 00:08:22,680
what to do about them and the good news

00:08:20,400 --> 00:08:23,880
is that it's usually pretty easy to fix

00:08:22,680 --> 00:08:25,980
the vulnerability in a JavaScript

00:08:23,880 --> 00:08:27,840
application because usually the fix

00:08:25,980 --> 00:08:29,520
already exists all you have to do is

00:08:27,840 --> 00:08:31,410
find the vulnerable package and upgrade

00:08:29,520 --> 00:08:33,630
it and that's interesting because the

00:08:31,410 --> 00:08:35,550
way that you upgrade it is you run NPM

00:08:33,630 --> 00:08:37,260
so if NPM is giving you this advice that

00:08:35,550 --> 00:08:40,470
you should run NPM why doesn't MPM just

00:08:37,260 --> 00:08:42,900
run NPM and save you that step that's

00:08:40,470 --> 00:08:45,730
exactly what NPM does

00:08:42,900 --> 00:08:47,710
npm audit fix will automatically follow

00:08:45,730 --> 00:08:49,690
the advice that npm audit gives you and

00:08:47,710 --> 00:08:52,210
run the upgrades as long as it can

00:08:49,690 --> 00:08:53,920
safely do so by safely I mean it's

00:08:52,210 --> 00:08:56,350
following semver so it's only going to

00:08:53,920 --> 00:08:58,690
bring in patch versions if the fix is in

00:08:56,350 --> 00:09:00,700
a braking version then you need to run -

00:08:58,690 --> 00:09:03,420
- force to bring in the braking version

00:09:00,700 --> 00:09:05,860
obviously NPM isn't going to like

00:09:03,420 --> 00:09:07,450
magically solve the halting problem and

00:09:05,860 --> 00:09:09,580
promise that your code is going to still

00:09:07,450 --> 00:09:10,840
work after we've done this upgrade you

00:09:09,580 --> 00:09:12,550
should still be running your tests and

00:09:10,840 --> 00:09:14,590
making sure that NPM has left your

00:09:12,550 --> 00:09:16,270
software in a working state but it takes

00:09:14,590 --> 00:09:20,140
a lot of the grunt work out of keeping

00:09:16,270 --> 00:09:22,960
your packages up-to-date and secure this

00:09:20,140 --> 00:09:25,000
brings me briefly back to yarn we used

00:09:22,960 --> 00:09:26,560
to say that we didn't care which client

00:09:25,000 --> 00:09:28,360
people use to access the NPM registry

00:09:26,560 --> 00:09:30,280
because open source and open standards

00:09:28,360 --> 00:09:32,280
and everything like that but we can no

00:09:30,280 --> 00:09:34,870
longer say that with a straight face

00:09:32,280 --> 00:09:37,000
after NPM caught up to yarn in terms of

00:09:34,870 --> 00:09:40,000
speed and with the addition of two FA

00:09:37,000 --> 00:09:41,890
and NPM audits NPM is now safer than a

00:09:40,000 --> 00:09:43,690
yarn and if it's safer then you should

00:09:41,890 --> 00:09:45,310
be using NPM like it's a huge shocker

00:09:43,690 --> 00:09:49,630
obviously that NPM recommends you should

00:09:45,310 --> 00:09:51,670
use NPM but we do these links are to a

00:09:49,630 --> 00:09:53,740
blog posts from a company that switched

00:09:51,670 --> 00:09:55,120
to yarn and then switched back and a

00:09:53,740 --> 00:09:58,750
tool that they built that allows them to

00:09:55,120 --> 00:10:00,340
switch from yarn back to NPM one more

00:09:58,750 --> 00:10:02,500
big recent change with NPM that I should

00:10:00,340 --> 00:10:05,290
mention is that we shut down our github

00:10:02,500 --> 00:10:08,200
issue tracker we still use github for

00:10:05,290 --> 00:10:09,940
the code itself but NPM is one of the

00:10:08,200 --> 00:10:12,160
world's largest open source projects and

00:10:09,940 --> 00:10:14,350
the issue tracker was just not scaling

00:10:12,160 --> 00:10:16,600
to meet our needs so now we have a

00:10:14,350 --> 00:10:20,170
discourse at NPM community which is a

00:10:16,600 --> 00:10:21,730
URL because this is 2018 it's a sort of

00:10:20,170 --> 00:10:24,070
combination of an issue tracker in the

00:10:21,730 --> 00:10:26,050
forum where you can get help with your

00:10:24,070 --> 00:10:27,670
issues and your calls also track bug

00:10:26,050 --> 00:10:31,000
fixes and you can track new features as

00:10:27,670 --> 00:10:32,830
they get developed and the last thing to

00:10:31,000 --> 00:10:34,330
know about NPM because and I keep

00:10:32,830 --> 00:10:36,400
including it because people keep asking

00:10:34,330 --> 00:10:37,780
this question is so how does that make

00:10:36,400 --> 00:10:43,150
money are you a charity or something

00:10:37,780 --> 00:10:45,250
buck no we are a company the registry

00:10:43,150 --> 00:10:47,230
costs millions of dollars a year to run

00:10:45,250 --> 00:10:49,870
and we earn those millions of dollars by

00:10:47,230 --> 00:10:52,300
producing services that NPM developers

00:10:49,870 --> 00:10:54,520
NPM users love like private package

00:10:52,300 --> 00:10:55,430
hosting and now security services as

00:10:54,520 --> 00:10:57,290
well

00:10:55,430 --> 00:10:59,089
you should really look into them because

00:10:57,290 --> 00:11:03,680
the registry costs millions of dollars

00:10:59,089 --> 00:11:05,960
to run so let's move on to what NPM

00:11:03,680 --> 00:11:07,880
knows about you first off how do I know

00:11:05,960 --> 00:11:10,399
all of this stuff well there's two ways

00:11:07,880 --> 00:11:12,440
first you're all constantly downloading

00:11:10,399 --> 00:11:13,610
stuff from NPM so we can tell what

00:11:12,440 --> 00:11:14,750
you're downloading we can tell you if

00:11:13,610 --> 00:11:16,430
you're downloading more of it or you're

00:11:14,750 --> 00:11:18,500
downloading less of it

00:11:16,430 --> 00:11:20,540
and secondly we asked you we ran a

00:11:18,500 --> 00:11:23,240
survey at the beginning of this year of

00:11:20,540 --> 00:11:24,920
sixteen thousand NPM users and we asked

00:11:23,240 --> 00:11:28,459
them directly what it is that you're up

00:11:24,920 --> 00:11:31,190
to and the results were fascinating but

00:11:28,459 --> 00:11:33,520
first I want to try a party trick and I

00:11:31,190 --> 00:11:40,100
have no idea if this is going to work if

00:11:33,520 --> 00:11:41,660
everybody could stand up I'm gonna make

00:11:40,100 --> 00:11:43,760
if you can't stand up just raise a hand

00:11:41,660 --> 00:11:46,190
or something I'm gonna make a series of

00:11:43,760 --> 00:11:48,500
statements about you and if the

00:11:46,190 --> 00:11:54,760
statement isn't true you can sit back

00:11:48,500 --> 00:11:54,760
down so stay standing if you use NPM

00:11:54,910 --> 00:12:01,310
stay standing if you write JavaScript

00:11:57,380 --> 00:12:05,300
for browsers you write JavaScript at

00:12:01,310 --> 00:12:07,190
work you're concerned that maybe the

00:12:05,300 --> 00:12:12,380
open source code you use isn't always

00:12:07,190 --> 00:12:16,640
secure some of you are lying you mostly

00:12:12,380 --> 00:12:19,700
taught yourself JavaScript in addition

00:12:16,640 --> 00:12:23,180
to JavaScript you also write PHP or Java

00:12:19,700 --> 00:12:26,660
sometimes I'm gonna start losing people

00:12:23,180 --> 00:12:30,400
fast now you work at a company that

00:12:26,660 --> 00:12:33,560
isn't really considered a tech company

00:12:30,400 --> 00:12:42,900
you started using NPM less than two

00:12:33,560 --> 00:12:47,680
years ago you're using webpack and Babel

00:12:42,900 --> 00:12:52,300
you're writing a react app using

00:12:47,680 --> 00:12:53,350
typescript my god I got all the way to

00:12:52,300 --> 00:12:55,360
the end and there are still people

00:12:53,350 --> 00:12:58,440
standing this is how much NPM knows

00:12:55,360 --> 00:12:58,440
about you thank you very much

00:13:01,410 --> 00:13:04,660
but that was all really fast let's go

00:13:03,580 --> 00:13:06,670
back to a couple of those because those

00:13:04,660 --> 00:13:08,740
are really interesting the first one

00:13:06,670 --> 00:13:11,320
that's interesting to dig into is that

00:13:08,740 --> 00:13:14,650
not everybody who is writing stuff with

00:13:11,320 --> 00:13:17,980
NPM considers themselves a JavaScript

00:13:14,650 --> 00:13:19,810
developer 30% of you are writing Java or

00:13:17,980 --> 00:13:21,580
PHP or Python and tend to consider

00:13:19,810 --> 00:13:23,620
yourselves primarily those kinds of

00:13:21,580 --> 00:13:25,870
developers c-sharp is also pretty

00:13:23,620 --> 00:13:28,690
popular and go and C++ and Ruby are in

00:13:25,870 --> 00:13:30,580
there and it should and maybe it was

00:13:28,690 --> 00:13:31,780
surprising that a lot of NPM users don't

00:13:30,580 --> 00:13:33,250
consider themselves JavaScript

00:13:31,780 --> 00:13:36,280
developers but it probably shouldn't

00:13:33,250 --> 00:13:37,960
have been there's a guy at UC Berkeley

00:13:36,280 --> 00:13:40,360
called Leo Maravich who did a study of

00:13:37,960 --> 00:13:41,650
what makes people pick a programming

00:13:40,360 --> 00:13:43,090
language is it because they like it is

00:13:41,650 --> 00:13:44,800
it because it's performant is it because

00:13:43,090 --> 00:13:47,050
of the language features is it because

00:13:44,800 --> 00:13:48,760
it's familiar he discovered that the

00:13:47,050 --> 00:13:50,950
dominant reason that people pick a

00:13:48,760 --> 00:13:53,170
programming language is the availability

00:13:50,950 --> 00:13:55,390
of open source libraries in that

00:13:53,170 --> 00:13:57,100
language whether or not they like the

00:13:55,390 --> 00:13:59,230
language if there's a library that lets

00:13:57,100 --> 00:14:02,260
them get done they will pick that

00:13:59,230 --> 00:14:05,050
language to do it in and that is exactly

00:14:02,260 --> 00:14:07,120
what you said when we asked you people

00:14:05,050 --> 00:14:09,220
say they pick JavaScript because of the

00:14:07,120 --> 00:14:11,440
libraries available another way of

00:14:09,220 --> 00:14:14,680
putting that is people pick JavaScript

00:14:11,440 --> 00:14:15,970
because of NPM there were a bunch of

00:14:14,680 --> 00:14:17,260
other reasons that people mentioned

00:14:15,970 --> 00:14:19,420
about why they picked JavaScript

00:14:17,260 --> 00:14:21,040
including a sad 15% who said that they

00:14:19,420 --> 00:14:23,830
didn't get to choose whether they use

00:14:21,040 --> 00:14:27,390
JavaScript interestingly this group was

00:14:23,830 --> 00:14:27,390
almost exclusively Ruby developers

00:14:29,029 --> 00:14:34,110
another important finding was how big a

00:14:31,889 --> 00:14:37,019
concern to most people's security of

00:14:34,110 --> 00:14:38,370
open source JavaScript was 77% of people

00:14:37,019 --> 00:14:40,010
said that they are concerned about the

00:14:38,370 --> 00:14:43,380
security of their open source JavaScript

00:14:40,010 --> 00:14:46,050
and more concerning lis 52% of people

00:14:43,380 --> 00:14:48,089
said that the tools to do to check that

00:14:46,050 --> 00:14:52,529
open source JavaScript is secure and

00:14:48,089 --> 00:14:53,579
reliable were not good enough I talked

00:14:52,529 --> 00:14:55,050
about all the security features that

00:14:53,579 --> 00:14:56,730
we've been adding this is the data that

00:14:55,050 --> 00:14:58,260
made us do that we looked at what you

00:14:56,730 --> 00:15:00,060
said and you were like holy it

00:14:58,260 --> 00:15:01,529
needs to be more secure so we built a

00:15:00,060 --> 00:15:05,639
bunch of security features and we bought

00:15:01,529 --> 00:15:07,589
a security company so now would be a

00:15:05,639 --> 00:15:09,240
good time to mention NPM Enterprise if

00:15:07,589 --> 00:15:10,740
you're a big company and you're worried

00:15:09,240 --> 00:15:12,660
about the security of your job open

00:15:10,740 --> 00:15:15,540
source JavaScript well first off good

00:15:12,660 --> 00:15:17,070
call it's scary out there and secondly

00:15:15,540 --> 00:15:18,839
we can help you with that

00:15:17,070 --> 00:15:21,000
NPM enterprise service will give you

00:15:18,839 --> 00:15:22,620
your own registry domain that allows you

00:15:21,000 --> 00:15:24,329
to completely control what Travis crypt

00:15:22,620 --> 00:15:25,860
makes it into your network it'll give

00:15:24,329 --> 00:15:27,720
you security alerts and ton of other

00:15:25,860 --> 00:15:29,459
great security features and I promise

00:15:27,720 --> 00:15:33,690
this is the last paid plug for our

00:15:29,459 --> 00:15:35,880
wonderful delightful paid features so

00:15:33,690 --> 00:15:37,680
that's a little about and who we are as

00:15:35,880 --> 00:15:41,160
NPM users but what I promised you

00:15:37,680 --> 00:15:43,050
was information about what tools you can

00:15:41,160 --> 00:15:45,899
use or what tools you might want to use

00:15:43,050 --> 00:15:51,750
in 2019 and to do that we need to look

00:15:45,899 --> 00:15:53,430
at what tools you're using right now the

00:15:51,750 --> 00:15:54,720
thing about developers when you tell

00:15:53,430 --> 00:15:57,600
them about what tools are getting

00:15:54,720 --> 00:15:59,550
unpopular and more popular is that they

00:15:57,600 --> 00:16:01,769
get really passionate about their tools

00:15:59,550 --> 00:16:03,300
and if I tell somebody that the tool

00:16:01,769 --> 00:16:05,040
that they love is getting less popular

00:16:03,300 --> 00:16:09,240
they tend to get really defensive and

00:16:05,040 --> 00:16:10,649
kind of rude on Twitter and all I'm

00:16:09,240 --> 00:16:12,209
saying is that these are the numbers

00:16:10,649 --> 00:16:14,430
that we're seeing we could be wrong

00:16:12,209 --> 00:16:16,319
these things are going up these things

00:16:14,430 --> 00:16:17,880
are going down I don't have a dog in

00:16:16,319 --> 00:16:20,459
this fight I'm not here to tell you that

00:16:17,880 --> 00:16:22,139
your framework is a piece of I'm

00:16:20,459 --> 00:16:23,880
here to tell you that the numbers are

00:16:22,139 --> 00:16:25,230
going down if you want me to tell you

00:16:23,880 --> 00:16:27,269
that your framework is a piece of

00:16:25,230 --> 00:16:29,660
that is what the pool party is for

00:16:27,269 --> 00:16:29,660
afterwards

00:16:30,089 --> 00:16:35,920
so before I show you a bunch of angry

00:16:33,879 --> 00:16:37,569
making graphs I need you to get

00:16:35,920 --> 00:16:40,569
something into your head which is this

00:16:37,569 --> 00:16:43,990
is how the registry grows it grows 10%

00:16:40,569 --> 00:16:46,269
month on month every month for years

00:16:43,990 --> 00:16:48,069
this is extremely difficult to get a

00:16:46,269 --> 00:16:53,949
human brain around the registry has

00:16:48,069 --> 00:16:55,269
grown 14,000 percent since 2014 the fact

00:16:53,949 --> 00:16:57,519
that the registry is growing so

00:16:55,269 --> 00:17:00,100
ridiculously fast means that new users

00:16:57,519 --> 00:17:01,360
are constantly showing up in fact as I

00:17:00,100 --> 00:17:03,699
was showing you earlier when you were

00:17:01,360 --> 00:17:06,069
standing up and sitting down 51 percent

00:17:03,699 --> 00:17:08,350
of NPM users have been using it for less

00:17:06,069 --> 00:17:10,929
than two years that means that

00:17:08,350 --> 00:17:13,150
everything in the registry always has

00:17:10,929 --> 00:17:14,500
more users everyone's graph is going up

00:17:13,150 --> 00:17:16,720
into the right even the shittiest

00:17:14,500 --> 00:17:19,720
packages are constantly acquiring new

00:17:16,720 --> 00:17:21,730
users just because there's so many

00:17:19,720 --> 00:17:24,699
people showing up and trying out new

00:17:21,730 --> 00:17:26,559
stuff so look at the blind at the top of

00:17:24,699 --> 00:17:28,659
this graph that is Express Express is

00:17:26,559 --> 00:17:32,650
bedrock to NPM practically everyone who

00:17:28,659 --> 00:17:35,200
uses NPM uses Express eventually here's

00:17:32,650 --> 00:17:37,630
a graph of the Express downloads as a

00:17:35,200 --> 00:17:38,740
share of the registry this is the metric

00:17:37,630 --> 00:17:41,140
we're going to use for the rest of these

00:17:38,740 --> 00:17:43,510
graphs this is not how absolutely

00:17:41,140 --> 00:17:46,120
popular Express is and Express is

00:17:43,510 --> 00:17:48,309
acquiring users incredibly quickly this

00:17:46,120 --> 00:17:50,830
is how popular it is relative to

00:17:48,309 --> 00:17:53,679
everything else in the registry and read

00:17:50,830 --> 00:17:57,360
so Xpress used to be 1.5% of the

00:17:53,679 --> 00:18:00,730
registry all by itself now Express is

00:17:57,360 --> 00:18:03,970
0.1% of the registry 0.1% of the

00:18:00,730 --> 00:18:06,760
registry is enormous ly popular 0.1% of

00:18:03,970 --> 00:18:09,940
the registry is 4.8 million downloads a

00:18:06,760 --> 00:18:12,190
week it is staggeringly popular it's

00:18:09,940 --> 00:18:14,230
just less relatively popular than it was

00:18:12,190 --> 00:18:16,150
before and all of these graphs are gonna

00:18:14,230 --> 00:18:20,650
use this strange and slightly confusing

00:18:16,150 --> 00:18:22,000
but very revealing metric so let's first

00:18:20,650 --> 00:18:24,070
take a look at some front-end frameworks

00:18:22,000 --> 00:18:26,980
starting with backbone as you can see

00:18:24,070 --> 00:18:30,280
back in 2013 backbone was the it

00:18:26,980 --> 00:18:32,230
was almost as popular as Express but now

00:18:30,280 --> 00:18:35,110
basically nobody uses backbone and by

00:18:32,230 --> 00:18:37,860
basically nobody I mean 250,000

00:18:35,110 --> 00:18:37,860
downloads a week

00:18:37,970 --> 00:18:41,360
the thing that you can see with the

00:18:40,070 --> 00:18:43,580
backbone graph better than any other

00:18:41,360 --> 00:18:45,889
framework any other graph is the pattern

00:18:43,580 --> 00:18:47,840
of how a framework dies people do not

00:18:45,889 --> 00:18:49,639
switch horses midstream they do not

00:18:47,840 --> 00:18:51,200
change what framework a project is

00:18:49,639 --> 00:18:53,750
written in after the project has started

00:18:51,200 --> 00:18:55,580
they continue to maintain old projects

00:18:53,750 --> 00:18:57,740
and they start new projects in the new

00:18:55,580 --> 00:18:59,090
framework and they slowly retire old

00:18:57,740 --> 00:19:01,309
pieces of software written in old

00:18:59,090 --> 00:19:03,649
frameworks so framework usage never

00:19:01,309 --> 00:19:07,669
falls off a cliff it has this long slow

00:19:03,649 --> 00:19:09,440
decay because nobody's reading new

00:19:07,669 --> 00:19:11,240
projects in backbone these days it's

00:19:09,440 --> 00:19:12,980
safe to say what's happening is that a

00:19:11,240 --> 00:19:14,990
lot of people are maintaining legacy

00:19:12,980 --> 00:19:18,649
applications written in backbone written

00:19:14,990 --> 00:19:19,820
raise your hand if that's you write two

00:19:18,649 --> 00:19:22,850
hundred and fifty thousand dollars a

00:19:19,820 --> 00:19:25,970
week so now let's take a look at react

00:19:22,850 --> 00:19:29,690
react is goddamn running away with the

00:19:25,970 --> 00:19:31,340
web 60% of people who use NPM report

00:19:29,690 --> 00:19:32,929
that they are using react at least some

00:19:31,340 --> 00:19:34,610
of the time and I told you there were 10

00:19:32,929 --> 00:19:36,559
million of you so that means there are 6

00:19:34,610 --> 00:19:40,129
million developers working in react

00:19:36,559 --> 00:19:41,809
these days that is huge usage and really

00:19:40,129 --> 00:19:44,600
impressive growth considering how big it

00:19:41,809 --> 00:19:45,919
already is but it's no longer runaway

00:19:44,600 --> 00:19:47,929
growth if you look at that graph it

00:19:45,919 --> 00:19:49,519
seems to be sort of may be slowing down

00:19:47,929 --> 00:19:52,429
we're gonna look at that a little bit

00:19:49,519 --> 00:19:53,659
later to see what's going on there but

00:19:52,429 --> 00:19:55,279
first we're gonna look at angular

00:19:53,659 --> 00:19:58,129
angular is an extremely popular

00:19:55,279 --> 00:20:00,649
framework when I get that out of the way

00:19:58,129 --> 00:20:01,970
in our survey in January about 40% of

00:20:00,649 --> 00:20:04,580
our users said that they used angular

00:20:01,970 --> 00:20:07,039
which is to say about 2/3 as many as use

00:20:04,580 --> 00:20:08,240
react but our downloads data says

00:20:07,039 --> 00:20:09,889
something a bit different now downloads

00:20:08,240 --> 00:20:13,070
data says about half as many people to

00:20:09,889 --> 00:20:15,019
use angular the angular community was

00:20:13,070 --> 00:20:16,850
very quick to point out this discrepancy

00:20:15,019 --> 00:20:20,570
and to yell at me angrily on Twitter

00:20:16,850 --> 00:20:21,710
about why that might be so I'm not going

00:20:20,570 --> 00:20:22,850
to say that angular is getting less

00:20:21,710 --> 00:20:25,550
popular

00:20:22,850 --> 00:20:26,960
I don't have enough data to be sure that

00:20:25,550 --> 00:20:29,210
angular is getting less popular what I

00:20:26,960 --> 00:20:32,690
do know is that angular is seeing fewer

00:20:29,210 --> 00:20:34,970
downloads than it used to and the

00:20:32,690 --> 00:20:38,210
Downloads peaked in 2017 and are now in

00:20:34,970 --> 00:20:40,820
a pattern of slow decline ember is an

00:20:38,210 --> 00:20:43,370
unusual story ember was pretty popular

00:20:40,820 --> 00:20:46,700
in 2015 and then it went through a sort

00:20:43,370 --> 00:20:48,860
of rough patch but in 2017 and 2018 it's

00:20:46,700 --> 00:20:51,110
making a comeback this is really unusual

00:20:48,860 --> 00:20:54,710
I've never seen a framework bounce back

00:20:51,110 --> 00:20:57,320
before but now amber is seeing really

00:20:54,710 --> 00:20:58,820
healthy growth in January about 4% of

00:20:57,320 --> 00:21:00,140
NPM users said that they were using

00:20:58,820 --> 00:21:03,770
ember and you could expect that number

00:21:00,140 --> 00:21:06,020
to be about twice as big now roughly as

00:21:03,770 --> 00:21:07,520
popular as ember is view but view is a

00:21:06,020 --> 00:21:10,100
different growth story view is just

00:21:07,520 --> 00:21:12,620
taking off like a rocket right now if I

00:21:10,100 --> 00:21:14,570
had to guess why Reax growth appears to

00:21:12,620 --> 00:21:16,670
be slowing down I would say that it is

00:21:14,570 --> 00:21:18,710
because new users are adopting view and

00:21:16,670 --> 00:21:21,650
the ones who aren't adopting view are

00:21:18,710 --> 00:21:23,360
probably adopting ember I don't have a

00:21:21,650 --> 00:21:24,770
perfect picture I could still be wrong

00:21:23,360 --> 00:21:26,330
about this there are a zillion other

00:21:24,770 --> 00:21:28,070
frameworks that might be contributing

00:21:26,330 --> 00:21:31,340
but that's what it looks like to me

00:21:28,070 --> 00:21:33,140
right now I want to dig a little bit

00:21:31,340 --> 00:21:35,390
deeper into the Reax ecosystem partly

00:21:33,140 --> 00:21:37,370
because so many of you are using it and

00:21:35,390 --> 00:21:40,010
partly because it's unique react isn't

00:21:37,370 --> 00:21:41,600
really a framework react is a solution

00:21:40,010 --> 00:21:44,150
to one part of the web development

00:21:41,600 --> 00:21:46,250
problem specifically react as a way of

00:21:44,150 --> 00:21:48,560
making components that share state and

00:21:46,250 --> 00:21:50,480
there are lots of types of applications

00:21:48,560 --> 00:21:52,310
where sharing where being able to use

00:21:50,480 --> 00:21:54,410
Rios reusable components that share

00:21:52,310 --> 00:21:56,870
state is useful so rich web apps

00:21:54,410 --> 00:21:59,960
obviously but also mobile apps and

00:21:56,870 --> 00:22:01,280
desktop apps but rich web apps have

00:21:59,960 --> 00:22:04,940
another requirement which is they need

00:22:01,280 --> 00:22:06,920
to be able to map URLs to state in the

00:22:04,940 --> 00:22:08,990
application to be able to do that you

00:22:06,920 --> 00:22:11,630
need to use react router or some other

00:22:08,990 --> 00:22:14,030
kind of plug-in router much like react

00:22:11,630 --> 00:22:15,440
itself react router grew quickly and

00:22:14,030 --> 00:22:17,570
that has now leveled off but as you see

00:22:15,440 --> 00:22:20,900
it's leveled off at about half the level

00:22:17,570 --> 00:22:22,430
of popularity of react itself and that's

00:22:20,900 --> 00:22:24,350
really interesting because it's one of

00:22:22,430 --> 00:22:26,120
the triumphs of react as a piece of

00:22:24,350 --> 00:22:28,040
technology it's part of why react is so

00:22:26,120 --> 00:22:31,040
popular they managed to successfully

00:22:28,040 --> 00:22:33,380
decouple these functions every framework

00:22:31,040 --> 00:22:35,640
that I was aware of prior to react was a

00:22:33,380 --> 00:22:37,170
sort of kitchen sink framework they had

00:22:35,640 --> 00:22:38,940
own component model their own router

00:22:37,170 --> 00:22:42,480
their own data model their own

00:22:38,940 --> 00:22:44,670
everything reacts only has a component

00:22:42,480 --> 00:22:46,140
model and by letting people choose their

00:22:44,670 --> 00:22:47,820
own solutions for the router and the

00:22:46,140 --> 00:22:50,040
data model and everything else it has

00:22:47,820 --> 00:22:51,360
created a more flexible design and that

00:22:50,040 --> 00:22:53,700
means that it's getting greater adoption

00:22:51,360 --> 00:22:57,510
simply because it's adopting - it's

00:22:53,700 --> 00:22:59,130
adapting to more use cases so react is

00:22:57,510 --> 00:23:00,210
more than twice as popular as a react

00:22:59,130 --> 00:23:02,190
router because there are lots of

00:23:00,210 --> 00:23:03,900
applications that use routers other than

00:23:02,190 --> 00:23:05,250
react router and there are also lots of

00:23:03,900 --> 00:23:06,630
react applications that don't need a

00:23:05,250 --> 00:23:08,360
router at all like mobile apps and

00:23:06,630 --> 00:23:11,010
desktop apps

00:23:08,360 --> 00:23:12,929
so speaking of reacts decoupled model

00:23:11,010 --> 00:23:15,240
let's look at flux flux was introduced

00:23:12,929 --> 00:23:17,220
by Facebook at roughly the same time as

00:23:15,240 --> 00:23:19,830
react and it was coupled with graph QL

00:23:17,220 --> 00:23:21,510
flux was how Facebook expected that you

00:23:19,830 --> 00:23:23,970
would manage state in large web

00:23:21,510 --> 00:23:26,030
applications and as you can see that

00:23:23,970 --> 00:23:28,320
didn't happen at all

00:23:26,030 --> 00:23:29,940
imagine if Facebook had coupled these

00:23:28,320 --> 00:23:31,530
together imagine if you couldn't use

00:23:29,940 --> 00:23:33,840
react without using flux at the same

00:23:31,530 --> 00:23:35,850
time fluxes unpopularity would have

00:23:33,840 --> 00:23:37,980
dragged react down with it and that

00:23:35,850 --> 00:23:40,110
isn't what happened instead what

00:23:37,980 --> 00:23:42,210
happened is react took off and people

00:23:40,110 --> 00:23:44,850
use Redux instead to manage their state

00:23:42,210 --> 00:23:46,740
as you can see fluxes downturn coincides

00:23:44,850 --> 00:23:48,799
exactly with the introduction of Redux

00:23:46,740 --> 00:23:52,830
as soon as Redux became available people

00:23:48,799 --> 00:23:53,520
abandoned flux our mass then Redux and

00:23:52,830 --> 00:23:55,710
Redux router

00:23:53,520 --> 00:23:56,910
Redux and react router track each other

00:23:55,710 --> 00:23:58,320
they are very popular combination

00:23:56,910 --> 00:24:02,429
they're almost always used at the same

00:23:58,320 --> 00:24:04,470
time I mentioned graph QL earlier graph

00:24:02,429 --> 00:24:07,080
QL started in react land and has now

00:24:04,470 --> 00:24:09,210
expanded beyond it and it is red hot

00:24:07,080 --> 00:24:10,950
right now there are two big libraries

00:24:09,210 --> 00:24:12,419
for using graph QL on the browser one is

00:24:10,950 --> 00:24:14,040
Apollo and one is real a but as you can

00:24:12,419 --> 00:24:17,340
see Apollo is the one that's really

00:24:14,040 --> 00:24:18,600
running away with it right now so far

00:24:17,340 --> 00:24:21,990
I've spent a lot of time focused on

00:24:18,600 --> 00:24:24,299
front-end and that is because that's

00:24:21,990 --> 00:24:25,530
what NPM users mostly are but 70% of you

00:24:24,299 --> 00:24:27,210
are also writing server-side

00:24:25,530 --> 00:24:28,950
applications

00:24:27,210 --> 00:24:30,840
so what frameworks are people using on

00:24:28,950 --> 00:24:32,730
the on the server side well they're

00:24:30,840 --> 00:24:34,500
using a whole lot of Express in fact

00:24:32,730 --> 00:24:38,730
relative to Express nothing else even

00:24:34,500 --> 00:24:41,160
shows up so what if we take Express out

00:24:38,730 --> 00:24:43,590
of the picture what does it look like in

00:24:41,160 --> 00:24:45,330
blue is Khoa KO is a sort of spiritual

00:24:43,590 --> 00:24:47,550
successor to Express

00:24:45,330 --> 00:24:49,530
Co is relative popularity is pretty flat

00:24:47,550 --> 00:24:51,480
but keep in mind that

00:24:49,530 --> 00:24:55,560
flat relative popularity means that koa

00:24:51,480 --> 00:24:59,370
grew 14,000 percent so ko is doing

00:24:55,560 --> 00:25:01,560
really well and this is why share of

00:24:59,370 --> 00:25:04,980
registry is this useful but confusing

00:25:01,560 --> 00:25:07,320
metric sales is as the name suggests a

00:25:04,980 --> 00:25:09,240
straight up quart of Ruby on Rails to

00:25:07,320 --> 00:25:12,440
node and as the graph suggests that

00:25:09,240 --> 00:25:12,440
seemed like a good idea at the time

00:25:14,690 --> 00:25:19,500
happy is a framework that NPM used to

00:25:17,250 --> 00:25:21,050
use on our own site we switched earlier

00:25:19,500 --> 00:25:23,280
this year to using react instead

00:25:21,050 --> 00:25:25,440
happiest relative growth is also pretty

00:25:23,280 --> 00:25:28,140
flat which again means 14,000 percent

00:25:25,440 --> 00:25:30,660
growth pretty healthy and then there's

00:25:28,140 --> 00:25:32,790
next jeaious which is from site next

00:25:30,660 --> 00:25:34,500
jeaious is a sort of all in kitchen sink

00:25:32,790 --> 00:25:36,630
framework but it uses react for its

00:25:34,500 --> 00:25:37,590
component model so if you like react but

00:25:36,630 --> 00:25:39,270
you don't have to make all of these

00:25:37,590 --> 00:25:40,380
pain-in-the-ass decisions about routers

00:25:39,270 --> 00:25:42,690
and tooling and all of that other stuff

00:25:40,380 --> 00:25:44,190
you just you know fire up a next

00:25:42,690 --> 00:25:45,360
application and you get a react app

00:25:44,190 --> 00:25:47,490
without having to think too hard about

00:25:45,360 --> 00:25:49,740
it I think that I personally think

00:25:47,490 --> 00:25:51,870
that's pretty cool and people seem to

00:25:49,740 --> 00:25:54,590
agree with me because in red in relative

00:25:51,870 --> 00:25:57,150
terms it is growing really really fast

00:25:54,590 --> 00:25:58,770
so how are we doing so far

00:25:57,150 --> 00:26:00,240
for the next part of this talk I need to

00:25:58,770 --> 00:26:02,370
split the room into two pieces so

00:26:00,240 --> 00:26:04,860
everybody on this side of the line is

00:26:02,370 --> 00:26:08,210
team a everybody on this side of the

00:26:04,860 --> 00:26:15,380
line is team B let's hear it from team a

00:26:08,210 --> 00:26:17,280
team B team a again team B again

00:26:15,380 --> 00:26:18,810
fantastic I'm not gonna use that for

00:26:17,280 --> 00:26:23,370
anything it's just to wake you up after

00:26:18,810 --> 00:26:24,930
20 minutes of grass so we've talked

00:26:23,370 --> 00:26:27,690
about frameworks

00:26:24,930 --> 00:26:29,950
[Applause]

00:26:27,690 --> 00:26:31,930
we've talked about frameworks a lot but

00:26:29,950 --> 00:26:34,570
a big part of what people use NPM for is

00:26:31,930 --> 00:26:36,070
tooling to helping their boo chain and

00:26:34,570 --> 00:26:39,730
their tooling and everything else we

00:26:36,070 --> 00:26:41,559
have fantastic data here the first of

00:26:39,730 --> 00:26:43,270
that data is that people want less

00:26:41,559 --> 00:26:44,710
tooling people hate tooling they would

00:26:43,270 --> 00:26:46,059
like to not use any tooling at all

00:26:44,710 --> 00:26:49,020
please could we just burn it all down

00:26:46,059 --> 00:26:51,250
and have it built in that would be great

00:26:49,020 --> 00:26:52,300
but to be able to do that we need to

00:26:51,250 --> 00:26:56,260
know what tooling it is that we're using

00:26:52,300 --> 00:26:58,270
in the first place so 85% of us use web

00:26:56,260 --> 00:26:59,950
frameworks unsurprisingly that compares

00:26:58,270 --> 00:27:02,020
to the 93 percent of us who are writing

00:26:59,950 --> 00:27:06,030
web apps which means that eight percent

00:27:02,020 --> 00:27:06,030
of us are rolling our own dare god

00:27:06,090 --> 00:27:11,100
seventy four percent of us are using

00:27:08,050 --> 00:27:13,690
transpilers 69 percent are using linters

00:27:11,100 --> 00:27:17,080
sixty seven percent are using bundlers

00:27:13,690 --> 00:27:18,520
and 80% of those are using webpack 58

00:27:17,080 --> 00:27:20,500
percent of us are using CSS

00:27:18,520 --> 00:27:22,720
preprocessors and 58 percent are using

00:27:20,500 --> 00:27:23,890
testing frameworks there's a couple of

00:27:22,720 --> 00:27:27,460
those that I want to dig into a little

00:27:23,890 --> 00:27:28,809
bit more transpilers are tools to

00:27:27,460 --> 00:27:30,370
translate other languages into

00:27:28,809 --> 00:27:33,700
JavaScript and the most popular one is

00:27:30,370 --> 00:27:35,110
obviously bable bable translates mostly

00:27:33,700 --> 00:27:37,330
JavaScript into other flavors of

00:27:35,110 --> 00:27:39,160
JavaScript with one big exception which

00:27:37,330 --> 00:27:41,110
is JSX which isn't really part of

00:27:39,160 --> 00:27:42,730
JavaScript but at this point given the

00:27:41,110 --> 00:27:44,440
massive adoption of reacts and how many

00:27:42,730 --> 00:27:46,960
people who write JavaScript are writing

00:27:44,440 --> 00:27:49,090
JSX we should probably reconsider that

00:27:46,960 --> 00:27:51,160
we should probably be thinking about how

00:27:49,090 --> 00:27:54,270
JSX becomes a first-class part of

00:27:51,160 --> 00:27:55,960
javascript if it's that popular

00:27:54,270 --> 00:27:57,910
CoffeeScript is still in there an

00:27:55,960 --> 00:27:59,559
element closure script have small

00:27:57,910 --> 00:28:04,000
followings but the really big surprise

00:27:59,559 --> 00:28:07,540
here is typescript 46% of us are writing

00:28:04,000 --> 00:28:09,240
typescript who knew that well 46% of you

00:28:07,540 --> 00:28:11,590
I guess

00:28:09,240 --> 00:28:13,090
typescript is mostly JavaScript it just

00:28:11,590 --> 00:28:15,790
adds types there was a talk about it too

00:28:13,090 --> 00:28:17,590
talks ago and types are just a sort of

00:28:15,790 --> 00:28:19,900
form of built-in testing that allows

00:28:17,590 --> 00:28:22,990
large teams to scale up by making things

00:28:19,900 --> 00:28:24,640
a little bit safer Microsoft launched

00:28:22,990 --> 00:28:26,200
typescript with its own package manager

00:28:24,640 --> 00:28:27,820
but the community sort of rebelled and

00:28:26,200 --> 00:28:31,179
was like we hate using to package

00:28:27,820 --> 00:28:34,120
managers let's just use NPM and to their

00:28:31,179 --> 00:28:36,130
credit they did Microsoft switched types

00:28:34,120 --> 00:28:37,690
into using NPM is their main reg

00:28:36,130 --> 00:28:40,480
three which is very new Microsoft of

00:28:37,690 --> 00:28:42,070
them and they did it without asking us

00:28:40,480 --> 00:28:49,180
if that was okay which is very old

00:28:42,070 --> 00:28:51,820
Microsoft of that linters as 70% of you

00:28:49,180 --> 00:28:54,040
know linters are tools that tell you if

00:28:51,820 --> 00:28:56,260
your code is nice they will check for

00:28:54,040 --> 00:28:57,580
obvious errors they will you know fix

00:28:56,260 --> 00:28:58,990
your syntax for you they will add a

00:28:57,580 --> 00:29:01,780
style guide if that's what you want

00:28:58,990 --> 00:29:03,790
they're super popular and by far the

00:29:01,780 --> 00:29:05,530
most popular of them is es lint and you

00:29:03,790 --> 00:29:06,970
may have heard about es lint recently

00:29:05,530 --> 00:29:11,440
because there was a security incident

00:29:06,970 --> 00:29:13,150
involving the eslint yes like most

00:29:11,440 --> 00:29:14,950
open-source is maintained by a team of

00:29:13,150 --> 00:29:16,510
volunteers and those team of that team

00:29:14,950 --> 00:29:18,300
of volunteers are mostly experienced

00:29:16,510 --> 00:29:20,740
developers who know what they're doing

00:29:18,300 --> 00:29:23,020
but unfortunately one of them was being

00:29:20,740 --> 00:29:24,940
a little bit lazy and he hadn't turned

00:29:23,020 --> 00:29:27,070
on two-factor off for his account on npm

00:29:24,940 --> 00:29:28,420
and to make matters worse he was using a

00:29:27,070 --> 00:29:30,670
password that he'd used on another

00:29:28,420 --> 00:29:32,560
website that other website was

00:29:30,670 --> 00:29:34,780
compromised the password was stolen and

00:29:32,560 --> 00:29:36,730
long story short somebody got that

00:29:34,780 --> 00:29:39,310
password and used it on NPM and got

00:29:36,730 --> 00:29:41,560
access to his account what that attacker

00:29:39,310 --> 00:29:43,960
then did was published a new version of

00:29:41,560 --> 00:29:45,760
es lint and that version of es lint had

00:29:43,960 --> 00:29:48,450
a credentials harvester in it if you

00:29:45,760 --> 00:29:50,890
download and installed es lint that day

00:29:48,450 --> 00:29:52,600
you're NPM login tokens would be

00:29:50,890 --> 00:29:55,390
transmitted back up to the Internet and

00:29:52,600 --> 00:29:56,920
stolen this could have been a disaster

00:29:55,390 --> 00:29:58,930
this is the kind of thing it keeps us up

00:29:56,920 --> 00:30:01,240
at night it would have been possible to

00:29:58,930 --> 00:30:02,920
take those stolen tokens to hijack other

00:30:01,240 --> 00:30:04,870
packages to publish a compromised

00:30:02,920 --> 00:30:06,760
versions of them hijack more people

00:30:04,870 --> 00:30:09,670
suddenly you have a huge huge problem

00:30:06,760 --> 00:30:11,980
but what happened instead is that people

00:30:09,670 --> 00:30:13,930
noticed really quickly because there's

00:30:11,980 --> 00:30:17,890
10 million of you and you're all

00:30:13,930 --> 00:30:19,750
developers within 30 minutes of people

00:30:17,890 --> 00:30:21,970
noticing we had put an advisory up and

00:30:19,750 --> 00:30:23,560
taken down the offending package and NPM

00:30:21,970 --> 00:30:24,910
audit was warning anybody who installed

00:30:23,560 --> 00:30:26,260
the bad version of the package that it

00:30:24,910 --> 00:30:29,230
was bad

00:30:26,260 --> 00:30:32,410
and then we reset the login tokens of

00:30:29,230 --> 00:30:34,120
all 10 million unpaid users in case any

00:30:32,410 --> 00:30:35,950
of those tokens had been stolen and as

00:30:34,120 --> 00:30:39,490
far as we can tell it's been a couple of

00:30:35,950 --> 00:30:41,590
weeks now it worked nobody else's tokens

00:30:39,490 --> 00:30:43,390
were used and no other packages seem to

00:30:41,590 --> 00:30:44,980
have been compromised so far and we had

00:30:43,390 --> 00:30:48,550
a bunch of third parties double-check

00:30:44,980 --> 00:30:49,990
our work on that one but this is why NPM

00:30:48,550 --> 00:30:52,360
is taking security system

00:30:49,990 --> 00:30:54,610
because with ten million users the very

00:30:52,360 --> 00:30:56,650
small percentage of users who are bad is

00:30:54,610 --> 00:30:59,710
still a very large absolute number of

00:30:56,650 --> 00:31:01,720
people so you have to use two factor

00:30:59,710 --> 00:31:05,590
auth it is now possible to enforce

00:31:01,720 --> 00:31:07,210
two-factor off on a package so that the

00:31:05,590 --> 00:31:09,550
es Ihnen team for instance can enforce

00:31:07,210 --> 00:31:11,590
that nobody is able to publish a copy of

00:31:09,550 --> 00:31:14,530
es lint unless they have used two-factor

00:31:11,590 --> 00:31:16,090
off to do so and you should use NPM six

00:31:14,530 --> 00:31:19,210
because it will warn you about these

00:31:16,090 --> 00:31:21,850
things so now back to our tooling stats

00:31:19,210 --> 00:31:23,970
I mentioned testing frameworks testing

00:31:21,850 --> 00:31:27,160
for of great deal of you are using mocha

00:31:23,970 --> 00:31:28,600
Jasmine is also very popular gest is

00:31:27,160 --> 00:31:30,700
extremely popular which is unsurprising

00:31:28,600 --> 00:31:33,250
given its connection to react and how

00:31:30,700 --> 00:31:37,150
popular react is but sitting up there at

00:31:33,250 --> 00:31:39,010
number three is none come on

00:31:37,150 --> 00:31:43,210
21% of you can't be bothered to write

00:31:39,010 --> 00:31:46,929
any tests at all surely you can do

00:31:43,210 --> 00:31:48,220
better and the fun part is I know that

00:31:46,929 --> 00:31:49,990
you can do better and in fact I know

00:31:48,220 --> 00:31:52,570
that you will do better because the data

00:31:49,990 --> 00:31:53,950
told me that you would we first noticed

00:31:52,570 --> 00:31:55,210
this effect when we were looking at

00:31:53,950 --> 00:31:56,980
security and we were building our

00:31:55,210 --> 00:31:59,170
security features we looked into how

00:31:56,980 --> 00:32:01,059
developers approach security and we

00:31:59,170 --> 00:32:03,429
split them up by how much experience

00:32:01,059 --> 00:32:05,559
they had and we discovered this really

00:32:03,429 --> 00:32:07,179
clear linear progression the more

00:32:05,559 --> 00:32:08,679
experience you have writing javascript

00:32:07,179 --> 00:32:12,340
the more seriously you take your

00:32:08,679 --> 00:32:13,960
security we discovered that this was

00:32:12,340 --> 00:32:16,240
true for nearly everything considered a

00:32:13,960 --> 00:32:17,920
best practice these bars are comparing

00:32:16,240 --> 00:32:19,240
just the most experienced group the ten

00:32:17,920 --> 00:32:20,710
plus years group to the least

00:32:19,240 --> 00:32:23,770
experienced group the less than one year

00:32:20,710 --> 00:32:25,570
group and in every single case the same

00:32:23,770 --> 00:32:28,630
linear progression happened there was in

00:32:25,570 --> 00:32:29,950
bundling linting security steps like

00:32:28,630 --> 00:32:32,320
code reviews and audits and code

00:32:29,950 --> 00:32:35,260
scanning they all get more popular the

00:32:32,320 --> 00:32:36,940
more experienced you are so I know that

00:32:35,260 --> 00:32:38,620
you'll do better because the more time

00:32:36,940 --> 00:32:41,650
you spend doing this the more likely you

00:32:38,620 --> 00:32:45,070
are to do this stuff in particular we

00:32:41,650 --> 00:32:46,900
noticed this effect in security in the

00:32:45,070 --> 00:32:48,580
least-experienced group only about 58

00:32:46,900 --> 00:32:50,559
percent of people use any security tools

00:32:48,580 --> 00:32:52,750
at all but in the most experienced group

00:32:50,559 --> 00:32:54,460
eighty-five percent of people do and the

00:32:52,750 --> 00:32:55,960
good news is that you can get into the

00:32:54,460 --> 00:32:57,730
eighty-five percent group just by

00:32:55,960 --> 00:33:00,760
upgrading to NPM six because you'll get

00:32:57,730 --> 00:33:02,110
automatic scans this again was the data

00:33:00,760 --> 00:33:03,470
that made us build that feature we

00:33:02,110 --> 00:33:05,720
didn't just build it for no reason we

00:33:03,470 --> 00:33:10,429
because 16,000 people said could you

00:33:05,720 --> 00:33:12,679
build this feature already so we did so

00:33:10,429 --> 00:33:14,629
now we come to the future of Java

00:33:12,679 --> 00:33:16,250
scripts this is the part where I must

00:33:14,629 --> 00:33:17,809
make some bad predictions and you get to

00:33:16,250 --> 00:33:19,580
take pictures of me standing in front of

00:33:17,809 --> 00:33:20,990
slides where I make bad predictions so

00:33:19,580 --> 00:33:22,850
when the predictions turn out to be bad

00:33:20,990 --> 00:33:24,169
you can make fun of me with this big

00:33:22,850 --> 00:33:29,330
picture where I say something that's

00:33:24,169 --> 00:33:30,740
obviously wrong so let's begin the

00:33:29,330 --> 00:33:33,169
biggest prediction that I can make is

00:33:30,740 --> 00:33:34,669
that nothing and most likely to be

00:33:33,169 --> 00:33:37,490
accurate is that nothing lasts forever

00:33:34,669 --> 00:33:40,159
backbone was once the dominant framework

00:33:37,490 --> 00:33:41,990
and it is now an afterthought jQuery

00:33:40,159 --> 00:33:43,789
which revolutionized web development

00:33:41,990 --> 00:33:46,879
pour one out for jQuery it's not

00:33:43,789 --> 00:33:50,029
relevant anymore it's been superseded

00:33:46,879 --> 00:33:51,769
any framework or tool has a heyday that

00:33:50,029 --> 00:33:55,490
is measured in a handful of years and

00:33:51,769 --> 00:33:57,500
then a long slow lingering death so

00:33:55,490 --> 00:33:59,600
don't cling too tightly to your tools

00:33:57,500 --> 00:34:00,919
you should expect five years from now

00:33:59,600 --> 00:34:02,870
that your tools will have rolled over

00:34:00,919 --> 00:34:05,480
because that's about how long that's

00:34:02,870 --> 00:34:06,830
about as long as they live on the

00:34:05,480 --> 00:34:09,740
front-end frameworks side it would be

00:34:06,830 --> 00:34:11,179
unwise to bet against Reax at least for

00:34:09,740 --> 00:34:12,919
the next few years react has a ton of

00:34:11,179 --> 00:34:14,990
users but possibly more importantly

00:34:12,919 --> 00:34:17,839
react has a ton of modules

00:34:14,990 --> 00:34:19,879
the reason reacts having lots of modules

00:34:17,839 --> 00:34:21,859
is important is because as I mentioned

00:34:19,879 --> 00:34:24,319
before the reason people choose

00:34:21,859 --> 00:34:27,790
libraries is we choose languages is

00:34:24,319 --> 00:34:30,020
because of the availability of libraries

00:34:27,790 --> 00:34:31,609
people put up with all of this pain in

00:34:30,020 --> 00:34:33,889
the ass tooling in JavaScript that they

00:34:31,609 --> 00:34:35,690
tell us that they hate because NPM has

00:34:33,889 --> 00:34:38,060
seven hundred and seventy thousand

00:34:35,690 --> 00:34:40,099
packages in it and that huge pile of

00:34:38,060 --> 00:34:41,629
delicious delicious libraries keeps

00:34:40,099 --> 00:34:44,750
everybody coming back even though it's

00:34:41,629 --> 00:34:46,970
kind of a pain in the ass to do so reiax

00:34:44,750 --> 00:34:48,919
might be able to pull off the same trick

00:34:46,970 --> 00:34:49,609
and if it does it's going to be

00:34:48,919 --> 00:34:51,560
unstoppable

00:34:49,609 --> 00:34:53,899
there are react components that you can

00:34:51,560 --> 00:34:56,000
npm install if you npm install react

00:34:53,899 --> 00:34:57,380
color you get a color picker in your web

00:34:56,000 --> 00:34:59,270
app you don't have to do anything other

00:34:57,380 --> 00:35:01,579
than drop a tag into your web app to use

00:34:59,270 --> 00:35:03,829
it that my friends has been the dream of

00:35:01,579 --> 00:35:05,660
web development for a long time and

00:35:03,829 --> 00:35:09,829
react is the first time i've really seen

00:35:05,660 --> 00:35:11,930
it work will react become the UI library

00:35:09,829 --> 00:35:13,400
for the web will react components become

00:35:11,930 --> 00:35:14,780
the way that we put websites together

00:35:13,400 --> 00:35:16,099
and will stop building things from

00:35:14,780 --> 00:35:16,780
scratch and just dump a bunch of

00:35:16,099 --> 00:35:19,630
components in

00:35:16,780 --> 00:35:22,390
at webapp it is too soon to know but it

00:35:19,630 --> 00:35:25,210
could do it's too soon to predict that

00:35:22,390 --> 00:35:27,520
because as we said react is kind of

00:35:25,210 --> 00:35:29,500
slowing down is it view that's causing

00:35:27,520 --> 00:35:31,510
that is an ember that's causing that or

00:35:29,500 --> 00:35:34,870
maybe it's just that react while very

00:35:31,510 --> 00:35:36,730
very flexible more flexible in any web

00:35:34,870 --> 00:35:39,340
framework has ever been before is still

00:35:36,730 --> 00:35:41,830
not flexible enough to cover 100% of web

00:35:39,340 --> 00:35:44,110
development use cases it could be that

00:35:41,830 --> 00:35:46,210
no framework can ever win no framework

00:35:44,110 --> 00:35:48,730
can ever be the single framework that

00:35:46,210 --> 00:35:50,620
every web app is built-in in fact that's

00:35:48,730 --> 00:35:51,850
a pretty safe guess but not a terribly

00:35:50,620 --> 00:35:54,280
useful one if you're trying to decide

00:35:51,850 --> 00:35:56,050
what to use so I would say in the

00:35:54,280 --> 00:35:59,560
meantime you should probably bet on

00:35:56,050 --> 00:36:01,420
react react has the users and the number

00:35:59,560 --> 00:36:03,670
of users you have is a big deal when it

00:36:01,420 --> 00:36:05,170
comes to picking a framework because you

00:36:03,670 --> 00:36:06,820
want to be where everybody else is you

00:36:05,170 --> 00:36:08,950
want them to write the tutorials you

00:36:06,820 --> 00:36:10,690
want them to find the bugs you want them

00:36:08,950 --> 00:36:14,140
to answer your questions on Stack

00:36:10,690 --> 00:36:17,350
Overflow for you and for that react is

00:36:14,140 --> 00:36:18,610
the safest bed right now if you don't

00:36:17,350 --> 00:36:21,370
like react there are a couple of good

00:36:18,610 --> 00:36:23,140
reasons to pick other things angular has

00:36:21,370 --> 00:36:23,950
the support of Google and since Google

00:36:23,140 --> 00:36:26,470
isn't going anywhere

00:36:23,950 --> 00:36:27,970
angular isn't going anywhere view has

00:36:26,470 --> 00:36:30,880
the momentum and it is definitely the

00:36:27,970 --> 00:36:34,300
new hotness right now and keep an eye on

00:36:30,880 --> 00:36:35,860
next Jas because it's the power of react

00:36:34,300 --> 00:36:38,860
with a lot more convenience and I think

00:36:35,860 --> 00:36:40,300
that has a lot of power and as I said

00:36:38,860 --> 00:36:41,650
amber has a bit of everything it has

00:36:40,300 --> 00:36:45,000
lots of users it has good corporate

00:36:41,650 --> 00:36:47,710
support and it's got some new momentum

00:36:45,000 --> 00:36:49,150
in 2019 if you're looking for something

00:36:47,710 --> 00:36:50,590
new to learn if you're looking for sense

00:36:49,150 --> 00:36:52,570
to really get your head around for the

00:36:50,590 --> 00:36:55,240
first time graph QL is the thing that it

00:36:52,570 --> 00:36:56,800
should be graph QL is about to be huge

00:36:55,240 --> 00:36:59,410
there are whole startups built around

00:36:56,800 --> 00:37:00,790
providing services for graph QL the

00:36:59,410 --> 00:37:02,380
tooling around it is getting better and

00:37:00,790 --> 00:37:04,510
it has some real advantages if you are

00:37:02,380 --> 00:37:06,220
building server-side api's or you are

00:37:04,510 --> 00:37:07,900
consuming server-side api's you should

00:37:06,220 --> 00:37:11,140
look into weather graph QL can help you

00:37:07,900 --> 00:37:12,760
do that better and when it comes to

00:37:11,140 --> 00:37:14,380
bundling transpiling and linting i can

00:37:12,760 --> 00:37:16,720
safely predict that if you don't already

00:37:14,380 --> 00:37:17,800
you will start doing these things the

00:37:16,720 --> 00:37:21,910
data says that as you gain experience

00:37:17,800 --> 00:37:23,080
you will pick these up webpack is 80% of

00:37:21,910 --> 00:37:24,400
bundling and it seems like a safe bet

00:37:23,080 --> 00:37:26,410
for a while

00:37:24,400 --> 00:37:28,450
es lint will almost certainly stay the

00:37:26,410 --> 00:37:29,509
most popular linter and babble will

00:37:28,450 --> 00:37:32,380
remain the transpiler

00:37:29,509 --> 00:37:34,459
choice but don't forget about typescript

00:37:32,380 --> 00:37:36,589
46% of you are already using typescript

00:37:34,459 --> 00:37:37,819
and that's still surprising to me even

00:37:36,589 --> 00:37:40,399
though I've been staring in this data

00:37:37,819 --> 00:37:42,439
for months so the biggest prediction of

00:37:40,399 --> 00:37:43,939
this talk may be that you will stop

00:37:42,439 --> 00:37:47,449
writing JavaScript and start writing

00:37:43,939 --> 00:37:48,829
typescript instead an obvious question

00:37:47,449 --> 00:37:50,749
that comes out of that prediction is

00:37:48,829 --> 00:37:52,189
what happens to NPM if everybody stops

00:37:50,749 --> 00:37:54,559
writing javascript and start starting

00:37:52,189 --> 00:37:56,329
typescript instead and the answer is

00:37:54,559 --> 00:37:57,949
nothing and the way that I know that is

00:37:56,329 --> 00:38:01,459
because it already happened and you

00:37:57,949 --> 00:38:03,559
didn't even notice a big percentage of

00:38:01,459 --> 00:38:06,229
the modules on NPM right now are native

00:38:03,559 --> 00:38:07,789
code there see they compile when you

00:38:06,229 --> 00:38:09,229
install them and you use them in

00:38:07,789 --> 00:38:11,359
JavaScript without even noticing that

00:38:09,229 --> 00:38:13,219
you are using a pile of see even more

00:38:11,359 --> 00:38:14,779
packages are written in es6 which is

00:38:13,219 --> 00:38:15,709
JavaScript but not the JavaScript you

00:38:14,779 --> 00:38:17,569
can actually use a new browser

00:38:15,709 --> 00:38:19,130
everything just gets transpiled before

00:38:17,569 --> 00:38:21,439
it goes to the before it goes to the

00:38:19,130 --> 00:38:23,059
browser all of react is written in es6

00:38:21,439 --> 00:38:26,239
which is a version of javascript that

00:38:23,059 --> 00:38:27,799
doesn't really exist yet and you didn't

00:38:26,239 --> 00:38:29,209
notice react just happened and you

00:38:27,799 --> 00:38:30,799
didn't have to care about the fact that

00:38:29,209 --> 00:38:34,189
it's written in this imaginary version

00:38:30,799 --> 00:38:35,569
of javascript there are tons of packages

00:38:34,189 --> 00:38:36,649
written in CoffeeScript sand type

00:38:35,569 --> 00:38:38,149
scripts and a whole bunch of other

00:38:36,649 --> 00:38:39,829
languages and you've not noticed that

00:38:38,149 --> 00:38:43,219
any of them are there and that is great

00:38:39,829 --> 00:38:44,719
that interoperability is amazing one of

00:38:43,219 --> 00:38:46,249
the most exciting developments on this

00:38:44,719 --> 00:38:49,519
front is wisdom

00:38:46,249 --> 00:38:51,289
that's webassembly to you and me whether

00:38:49,519 --> 00:38:53,959
simply lets you write in any language

00:38:51,289 --> 00:38:55,609
any compiled language and turn it into

00:38:53,959 --> 00:38:57,889
java scripts but unlike transpile

00:38:55,609 --> 00:38:59,389
javascript it runs as fast as native

00:38:57,889 --> 00:39:02,209
code you can get desktop like

00:38:59,389 --> 00:39:04,309
performance in the browser using wasm to

00:39:02,209 --> 00:39:06,829
compile native code that's a really

00:39:04,309 --> 00:39:08,809
really interesting idea it provides a

00:39:06,829 --> 00:39:10,219
way to give web apps really amazing

00:39:08,809 --> 00:39:13,279
performance for computationally

00:39:10,219 --> 00:39:15,380
expensive tasks and the best part of it

00:39:13,279 --> 00:39:17,539
is that it's already here and again you

00:39:15,380 --> 00:39:19,759
didn't notice woz impac is a tool from

00:39:17,539 --> 00:39:21,859
mozilla that lets you write code in rust

00:39:19,759 --> 00:39:23,539
and then publish it to npm just like any

00:39:21,859 --> 00:39:25,969
other javascript package and use it from

00:39:23,539 --> 00:39:27,889
javascript without noticing in fact that

00:39:25,969 --> 00:39:29,689
seems like it's already leaking its way

00:39:27,889 --> 00:39:31,459
into the registry so whaza might already

00:39:29,689 --> 00:39:35,029
be in your stack without you noticing

00:39:31,459 --> 00:39:36,380
and that brings me to my other big

00:39:35,029 --> 00:39:38,449
prediction which is no matter what

00:39:36,380 --> 00:39:40,579
happens npm is here to stay

00:39:38,449 --> 00:39:42,229
whether javascript stays big or whether

00:39:40,579 --> 00:39:42,850
web development becomes writing a bunch

00:39:42,229 --> 00:39:46,240
of application

00:39:42,850 --> 00:39:47,800
in rust the huge pile of delicious

00:39:46,240 --> 00:39:49,930
delicious packages is going to keep us

00:39:47,800 --> 00:39:52,330
coming back to npm for a long time

00:39:49,930 --> 00:39:53,830
NPM might one day be a registry that's

00:39:52,330 --> 00:39:55,570
not full of Java scripts but it will

00:39:53,830 --> 00:39:59,320
still be the way that you put websites

00:39:55,570 --> 00:40:01,600
together I've been doing web development

00:39:59,320 --> 00:40:03,370
now for 22 years and it has always

00:40:01,600 --> 00:40:05,950
thrilled me and no less so than right

00:40:03,370 --> 00:40:08,950
now the stuff that we can do on the web

00:40:05,950 --> 00:40:11,260
is amazing and wonderful and scary and

00:40:08,950 --> 00:40:14,470
the tools that we use to make it are ad

00:40:11,260 --> 00:40:16,960
hoc and broken and partially fixed and

00:40:14,470 --> 00:40:20,410
my final prediction is that that's the

00:40:16,960 --> 00:40:22,300
way it's always gonna be we remake the

00:40:20,410 --> 00:40:24,010
web's so quickly that the tools are

00:40:22,300 --> 00:40:25,390
never gonna be done it's never gonna be

00:40:24,010 --> 00:40:28,240
finished it's never gonna be a perfect

00:40:25,390 --> 00:40:30,130
story and that is how you know that the

00:40:28,240 --> 00:40:32,080
web is growing that's why the web has

00:40:30,130 --> 00:40:34,510
managed to stay so vibrant for so long

00:40:32,080 --> 00:40:35,230
because it reinvents itself every five

00:40:34,510 --> 00:40:37,600
years

00:40:35,230 --> 00:40:39,610
I find that tremendously exciting I hope

00:40:37,600 --> 00:40:41,080
you find it tremendously exciting and I

00:40:39,610 --> 00:40:42,790
hope you all stick around for the next

00:40:41,080 --> 00:40:45,780
22 years to see what happens

00:40:42,790 --> 00:40:45,780
thank you very much

00:40:49,319 --> 00:40:51,380

YouTube URL: https://www.youtube.com/watch?v=mSQh0gcDXkc


