Title: No Time for Types - Nick Nisi - JSConf US 2018
Publication date: 2018-11-11
Playlist: JSConf US 2018
Description: 
	
Captions: 
	00:00:00,320 --> 00:00:03,840
[Music]

00:00:02,070 --> 00:00:05,660
[Applause]

00:00:03,840 --> 00:00:07,410
[Music]

00:00:05,660 --> 00:00:09,280
[Applause]

00:00:07,410 --> 00:00:11,020
[Music]

00:00:09,280 --> 00:00:12,780
[Applause]

00:00:11,020 --> 00:00:15,920
[Music]

00:00:12,780 --> 00:00:15,920
[Applause]

00:00:16,870 --> 00:00:24,050
[Music]

00:00:25,079 --> 00:00:31,419
all right hello welcome

00:00:29,169 --> 00:00:33,250
as Erin mentioned I'm Nick and I see I'm

00:00:31,419 --> 00:00:35,320
a JavaScript developer like many of you

00:00:33,250 --> 00:00:41,350
and I work for a company called site

00:00:35,320 --> 00:00:44,260
Penn they're sorry and we're hiring

00:00:41,350 --> 00:00:46,660
I'm also on two podcasts j/s party and

00:00:44,260 --> 00:00:48,280
talk script both of which are here yes

00:00:46,660 --> 00:00:50,500
party just had the stage in the last

00:00:48,280 --> 00:00:53,650
over lunch in the last in the other room

00:00:50,500 --> 00:00:55,300
and come stop by either of those booths

00:00:53,650 --> 00:00:57,700
I'll be over at the talks crit booth

00:00:55,300 --> 00:00:59,530
throughout the day so please stop by and

00:00:57,700 --> 00:01:03,309
we're interviewing speakers and

00:00:59,530 --> 00:01:05,500
attendees so I am a dynamic language

00:01:03,309 --> 00:01:07,149
enthusiast I'm a full-stack JavaScript

00:01:05,500 --> 00:01:09,460
developer and this is how I would

00:01:07,149 --> 00:01:11,110
describe myself I really like JavaScript

00:01:09,460 --> 00:01:12,369
and I think I like it and I think I got

00:01:11,110 --> 00:01:14,740
into it because it was a dynamic

00:01:12,369 --> 00:01:16,270
language so I'd like to tell you a

00:01:14,740 --> 00:01:17,320
little bit about my story and how I got

00:01:16,270 --> 00:01:21,970
here

00:01:17,320 --> 00:01:23,560
I graduated from college in 2008 and the

00:01:21,970 --> 00:01:26,909
primary languages that were taught in my

00:01:23,560 --> 00:01:29,140
computer science classes were C and C++

00:01:26,909 --> 00:01:30,880
these were really nice languages I

00:01:29,140 --> 00:01:32,320
learned a lot from them and learned I

00:01:30,880 --> 00:01:34,450
think I became a better programmer I was

00:01:32,320 --> 00:01:36,760
actually the last class that took C and

00:01:34,450 --> 00:01:38,500
C++ they switched over to Java after

00:01:36,760 --> 00:01:40,030
that I think I got the better education

00:01:38,500 --> 00:01:43,270
so I'm happy about that

00:01:40,030 --> 00:01:44,860
I also took an elective Perl class and

00:01:43,270 --> 00:01:47,170
this is my first real introduction to a

00:01:44,860 --> 00:01:49,450
dynamic language and I loved how

00:01:47,170 --> 00:01:50,740
productive I could be quickly I didn't

00:01:49,450 --> 00:01:53,140
have to worry about a make file which I

00:01:50,740 --> 00:01:54,430
didn't understand at the time and I

00:01:53,140 --> 00:01:56,080
didn't have to worry about all of this

00:01:54,430 --> 00:01:58,330
setup and how I was gonna run and how

00:01:56,080 --> 00:01:59,799
like freeing memory and all of that I

00:01:58,330 --> 00:02:02,110
think that was the most freeing part I

00:01:59,799 --> 00:02:03,580
could just start writing code run it and

00:02:02,110 --> 00:02:06,040
if there was errors I'd get those thrown

00:02:03,580 --> 00:02:08,500
at me and then I could deal with them so

00:02:06,040 --> 00:02:11,890
that was my first real dynamic language

00:02:08,500 --> 00:02:14,680
I did experiment once in college with

00:02:11,890 --> 00:02:17,470
JavaScript but Perl was was the first

00:02:14,680 --> 00:02:20,709
real one I just loved how flexible it

00:02:17,470 --> 00:02:23,770
was so the the JavaScript that I wrote

00:02:20,709 --> 00:02:26,710
in college was just for one

00:02:23,770 --> 00:02:28,600
and it was just an add-on to a software

00:02:26,710 --> 00:02:30,610
engineering project that I was working

00:02:28,600 --> 00:02:33,040
on with a few other developers and this

00:02:30,610 --> 00:02:35,460
was probably around 2007 and this is

00:02:33,040 --> 00:02:38,140
what the code looked like it was

00:02:35,460 --> 00:02:39,460
exceptionally terrible I think I should

00:02:38,140 --> 00:02:41,200
get bonus points for how terrible it was

00:02:39,460 --> 00:02:44,280
if you look in there there is a with

00:02:41,200 --> 00:02:47,860
statement in there that's amazing and

00:02:44,280 --> 00:02:50,560
what this code did was we wanted to add

00:02:47,860 --> 00:02:52,120
a gmail style loading indicator like you

00:02:50,560 --> 00:02:55,150
see in the top right corner Gmail used

00:02:52,120 --> 00:02:56,560
to look like that in 2007 and we wanted

00:02:55,150 --> 00:02:59,350
to add that to our page but we weren't

00:02:56,560 --> 00:03:00,460
really doing any kind of xhr calls or

00:02:59,350 --> 00:03:03,670
anything like that we were just had

00:03:00,460 --> 00:03:06,970
serving PHP pages but we wanted to have

00:03:03,670 --> 00:03:09,160
this fancy look and feel so I found in a

00:03:06,970 --> 00:03:11,200
book some code that looked like this

00:03:09,160 --> 00:03:13,540
that was making the Gmail loading

00:03:11,200 --> 00:03:15,280
indicator happen and I wanted to make

00:03:13,540 --> 00:03:17,380
that happen I didn't really understand

00:03:15,280 --> 00:03:20,440
the code at all so I pretty much copied

00:03:17,380 --> 00:03:22,900
it verbatim as you do and that ended up

00:03:20,440 --> 00:03:25,330
with me in the page that I was

00:03:22,900 --> 00:03:27,250
requesting making Ajax requests for the

00:03:25,330 --> 00:03:28,630
page that I was on just so that I would

00:03:27,250 --> 00:03:29,800
have an asynchronous request in there

00:03:28,630 --> 00:03:32,260
that would take a little bit of time I

00:03:29,800 --> 00:03:33,970
even had a math dot random on there so

00:03:32,260 --> 00:03:36,250
that the URL was different each time and

00:03:33,970 --> 00:03:37,870
then it would load the page and then

00:03:36,250 --> 00:03:39,190
once that was actually loaded it would

00:03:37,870 --> 00:03:40,180
remove the loading indicator so the

00:03:39,190 --> 00:03:42,400
loading indicator didn't actually

00:03:40,180 --> 00:03:43,870
signify a loading of anything other than

00:03:42,400 --> 00:03:46,600
the page that you were already on so we

00:03:43,870 --> 00:03:49,000
were just wasting time but it was a lot

00:03:46,600 --> 00:03:51,070
of fun and I didn't touch that was good

00:03:49,000 --> 00:03:53,980
for a few years after this but it got me

00:03:51,070 --> 00:03:55,270
thinking it got me thinking do you

00:03:53,980 --> 00:03:57,010
remember the first lines of JavaScript

00:03:55,270 --> 00:03:59,650
that you might have written and so I

00:03:57,010 --> 00:04:01,540
asked this on Twitter last week and I

00:03:59,650 --> 00:04:03,400
got a few responses that came back and

00:04:01,540 --> 00:04:05,500
most of them were pretty much the same

00:04:03,400 --> 00:04:07,390
exact thing they were oh yeah I was just

00:04:05,500 --> 00:04:09,910
changing the color of something or as I

00:04:07,390 --> 00:04:12,490
was hovering over a link I wanted to

00:04:09,910 --> 00:04:14,770
change the opacity of it and a few of

00:04:12,490 --> 00:04:16,720
them were I wanted to modify the page

00:04:14,770 --> 00:04:19,510
with jQuery specifically so jQuery and

00:04:16,720 --> 00:04:22,380
JavaScript were synonymous back then in

00:04:19,510 --> 00:04:24,460
a lot of ways and so this was really

00:04:22,380 --> 00:04:26,550
most people's introduction to the

00:04:24,460 --> 00:04:29,169
language through this dhtml style

00:04:26,550 --> 00:04:31,180
modifying of the page and that's because

00:04:29,169 --> 00:04:33,010
javascript is just not really the best

00:04:31,180 --> 00:04:34,840
language we were using it the way that

00:04:33,010 --> 00:04:35,950
it was designed it's not really it never

00:04:34,840 --> 00:04:37,660
really was designed to be the

00:04:35,950 --> 00:04:41,080
to be used the way that we use it today

00:04:37,660 --> 00:04:42,610
and that's proven by this quote from

00:04:41,080 --> 00:04:45,130
Brendan Eich where he's talking about

00:04:42,610 --> 00:04:46,870
JavaScript being the glue language that

00:04:45,130 --> 00:04:49,840
part-time developers and designers would

00:04:46,870 --> 00:04:51,160
use to glue together the components that

00:04:49,840 --> 00:04:54,130
the real programmers who were writing

00:04:51,160 --> 00:04:55,630
Java would be writing and obviously

00:04:54,130 --> 00:04:57,520
we've moved past that but in a lot of

00:04:55,630 --> 00:05:00,550
ways this was how a lot of us got

00:04:57,520 --> 00:05:02,890
started including me my first job was

00:05:00,550 --> 00:05:07,630
writing Java I was working on a big java

00:05:02,890 --> 00:05:09,280
application and it was also a portable

00:05:07,630 --> 00:05:10,840
application so we were designing several

00:05:09,280 --> 00:05:12,820
portlets that would go into the page and

00:05:10,840 --> 00:05:14,860
it did have a lot of JavaScript on the

00:05:12,820 --> 00:05:17,830
pages that were doing things like event

00:05:14,860 --> 00:05:20,380
handling and some simple client-side

00:05:17,830 --> 00:05:21,880
validation things like that but we

00:05:20,380 --> 00:05:23,380
didn't really treat JavaScript like a

00:05:21,880 --> 00:05:25,900
real language and so we didn't test

00:05:23,380 --> 00:05:27,280
JavaScript we didn't architect it we

00:05:25,900 --> 00:05:28,930
just kind of threw it in wherever we

00:05:27,280 --> 00:05:31,420
wanted it and that meant that any

00:05:28,930 --> 00:05:33,550
portlet that was going to use some

00:05:31,420 --> 00:05:35,050
JavaScript method we would just use that

00:05:33,550 --> 00:05:37,600
to pollute the global namespace with

00:05:35,050 --> 00:05:39,460
whatever methods that it needed and that

00:05:37,600 --> 00:05:40,960
ended up being where we'd have like a

00:05:39,460 --> 00:05:43,810
click handler function that was

00:05:40,960 --> 00:05:45,250
duplicated on in every single portlet

00:05:43,810 --> 00:05:46,330
and it would just pollute the global

00:05:45,250 --> 00:05:48,910
namespace with all of that so it was

00:05:46,330 --> 00:05:51,720
really exceptionally terrible but that's

00:05:48,910 --> 00:05:55,210
just what we ended up doing on this also

00:05:51,720 --> 00:05:56,860
this application specifically only had

00:05:55,210 --> 00:05:58,570
to work in ie6 it did not work in

00:05:56,860 --> 00:06:01,150
Firefox and Chrome wasn't really a thing

00:05:58,570 --> 00:06:03,670
back then it only worked in ie6 and

00:06:01,150 --> 00:06:04,360
nothing else not a 7 or anything just

00:06:03,670 --> 00:06:08,080
ie6

00:06:04,360 --> 00:06:11,380
and it relied on some weird quirks mode

00:06:08,080 --> 00:06:13,000
bugs to get the the drop down navigation

00:06:11,380 --> 00:06:14,440
to work so if you tried to load it in

00:06:13,000 --> 00:06:17,620
another browser it actually wouldn't

00:06:14,440 --> 00:06:21,490
work at all and so I did a lot of Java

00:06:17,620 --> 00:06:23,830
and a lot of JavaScript and but it was

00:06:21,490 --> 00:06:26,440
just this simple JavaScript but then we

00:06:23,830 --> 00:06:28,030
got the opportunity to create the first

00:06:26,440 --> 00:06:30,580
real JavaScript component that we would

00:06:28,030 --> 00:06:32,950
use in this application but of course I

00:06:30,580 --> 00:06:35,700
didn't want to have to do this in ie6

00:06:32,950 --> 00:06:38,230
because ie6 was just terrible so I

00:06:35,700 --> 00:06:40,390
started looking at greasemonkey and

00:06:38,230 --> 00:06:41,530
writing a script that would modify the

00:06:40,390 --> 00:06:43,330
page in real time without actually

00:06:41,530 --> 00:06:45,130
changing our source code so that it

00:06:43,330 --> 00:06:47,620
would work in Firefox and we could

00:06:45,130 --> 00:06:49,540
navigate through the pages and use

00:06:47,620 --> 00:06:51,100
Firebug to actually do some testing

00:06:49,540 --> 00:06:55,510
and so the first real component that I

00:06:51,100 --> 00:06:56,740
created was a slide navigator so kind of

00:06:55,510 --> 00:06:59,470
like a PowerPoint in the browser a

00:06:56,740 --> 00:07:01,000
little bit but way way simpler and it

00:06:59,470 --> 00:07:02,980
was all written in JavaScript we started

00:07:01,000 --> 00:07:05,710
with prototype and then moved on to

00:07:02,980 --> 00:07:08,590
jQuery and it was awesome but it was

00:07:05,710 --> 00:07:09,970
terrible code but I really embraced that

00:07:08,590 --> 00:07:12,640
spaghetti code that I was writing it was

00:07:09,970 --> 00:07:14,970
a lot of fun to write not a lot of fun

00:07:12,640 --> 00:07:18,220
to test or to debug later on of course

00:07:14,970 --> 00:07:19,900
but I didn't know that at the time it's

00:07:18,220 --> 00:07:23,650
just a lot of fun to to be a part of

00:07:19,900 --> 00:07:25,360
that so there's this this quote from

00:07:23,650 --> 00:07:28,420
Brendan Eich always bet on JavaScript

00:07:25,360 --> 00:07:30,160
and this saying kind of accurately

00:07:28,420 --> 00:07:32,590
depicts the past present and future of

00:07:30,160 --> 00:07:34,930
the language since this is the language

00:07:32,590 --> 00:07:37,480
of the web the language is kind of set

00:07:34,930 --> 00:07:38,800
off at a disadvantage from the start I'm

00:07:37,480 --> 00:07:40,360
sorry at an advantage from the start

00:07:38,800 --> 00:07:42,670
over any other language because if you

00:07:40,360 --> 00:07:46,300
were writing code in the browser it is

00:07:42,670 --> 00:07:49,660
JavaScript so we're using this language

00:07:46,300 --> 00:07:52,300
that was never really designed to to

00:07:49,660 --> 00:07:54,520
have the role that it does but we can't

00:07:52,300 --> 00:07:56,050
really get away from it so I saw this on

00:07:54,520 --> 00:07:58,360
reddit last week and thought it was

00:07:56,050 --> 00:08:00,250
really funny

00:07:58,360 --> 00:08:03,630
the nice thing about this language

00:08:00,250 --> 00:08:06,430
though is that because of its unique

00:08:03,630 --> 00:08:08,020
position as the language of the web that

00:08:06,430 --> 00:08:09,760
means that if you're working on an

00:08:08,020 --> 00:08:14,500
application in another language like

00:08:09,760 --> 00:08:16,210
Java or Ruby or dotnet or named anything

00:08:14,500 --> 00:08:17,920
else if it's touching the web that

00:08:16,210 --> 00:08:19,840
project probably has JavaScript in it

00:08:17,920 --> 00:08:21,570
somewhere and that's a really cool thing

00:08:19,840 --> 00:08:23,320
because that means that these

00:08:21,570 --> 00:08:24,910
programmers that are programming in

00:08:23,320 --> 00:08:28,300
other languages get to bring all of

00:08:24,910 --> 00:08:31,630
their experiences and their design

00:08:28,300 --> 00:08:33,430
decisions and their ideas over to this

00:08:31,630 --> 00:08:35,800
language and try and influence it and so

00:08:33,430 --> 00:08:36,690
Java JavaScript really gets to grow out

00:08:35,800 --> 00:08:40,750
of that

00:08:36,690 --> 00:08:42,880
some ways better than others a lot of

00:08:40,750 --> 00:08:44,400
times people have tried to come in and

00:08:42,880 --> 00:08:47,520
change the language into something else

00:08:44,400 --> 00:08:51,190
that's true with flash or GWT or

00:08:47,520 --> 00:08:54,100
CoffeeScript Dart these languages that

00:08:51,190 --> 00:08:55,360
try to usurp JavaScript as the language

00:08:54,100 --> 00:08:58,480
of the web and change it into something

00:08:55,360 --> 00:09:00,160
else that it's clearly not they are all

00:08:58,480 --> 00:09:01,630
failures they're still around in a lot

00:09:00,160 --> 00:09:02,470
of way but their failure failures and

00:09:01,630 --> 00:09:04,360
that they don't really have a say

00:09:02,470 --> 00:09:06,400
get market share not in the way the

00:09:04,360 --> 00:09:08,170
JavaScript does and they never will and

00:09:06,400 --> 00:09:11,920
the reason is they didn't bet on

00:09:08,170 --> 00:09:13,150
JavaScript they instead tried to change

00:09:11,920 --> 00:09:15,310
it into something else they didn't

00:09:13,150 --> 00:09:17,580
embrace it we're kind of going through

00:09:15,310 --> 00:09:19,840
this again potentially with webassembly

00:09:17,580 --> 00:09:23,110
it's not trying to be a replacement for

00:09:19,840 --> 00:09:25,000
JavaScript but will it be time will tell

00:09:23,110 --> 00:09:26,110
I guess on that there's a lot of really

00:09:25,000 --> 00:09:27,730
cool stuff that you can do and I'm

00:09:26,110 --> 00:09:30,460
really excited for what's coming down

00:09:27,730 --> 00:09:32,740
with webassembly but from their own

00:09:30,460 --> 00:09:34,810
website it talks about it being a

00:09:32,740 --> 00:09:36,880
compliment to JavaScript where you can

00:09:34,810 --> 00:09:38,530
do the computationally intensive stuff

00:09:36,880 --> 00:09:40,540
in web assembly in a language that

00:09:38,530 --> 00:09:41,980
transpose to web assembly and then hand

00:09:40,540 --> 00:09:43,540
that off to JavaScript and work with it

00:09:41,980 --> 00:09:46,420
like that they also have this

00:09:43,540 --> 00:09:48,160
interesting quote that JavaScript has an

00:09:46,420 --> 00:09:50,260
incredible amount of momentum and will

00:09:48,160 --> 00:09:52,870
remain the single privileged dynamic

00:09:50,260 --> 00:09:54,220
language of the web and that's true

00:09:52,870 --> 00:09:57,280
but it makes me wonder if their

00:09:54,220 --> 00:10:00,480
intentions are to to bring forth another

00:09:57,280 --> 00:10:03,760
competitor that's not a dynamic language

00:10:00,480 --> 00:10:06,040
so there's a lot of benefits to both

00:10:03,760 --> 00:10:08,740
static and dynamic dynamically typed

00:10:06,040 --> 00:10:10,240
languages javascript obviously is a

00:10:08,740 --> 00:10:13,120
dynamically typed language and that

00:10:10,240 --> 00:10:14,800
means that it's very flexible it's less

00:10:13,120 --> 00:10:16,090
verbose there's not as much syntax or

00:10:14,800 --> 00:10:18,100
ceremony that we have to do to get

00:10:16,090 --> 00:10:19,960
things done and it's more tolerant to

00:10:18,100 --> 00:10:21,700
change because it does a lot of type

00:10:19,960 --> 00:10:23,980
coercion which is not necessarily a good

00:10:21,700 --> 00:10:26,860
thing but it's something that a lot of

00:10:23,980 --> 00:10:29,230
our code might do from time to time it

00:10:26,860 --> 00:10:30,760
also relies less on semantics and it's

00:10:29,230 --> 00:10:32,650
easier to test because we don't have

00:10:30,760 --> 00:10:34,690
these nominal types that we have to meet

00:10:32,650 --> 00:10:36,520
before we can mock things out for

00:10:34,690 --> 00:10:38,500
example and it does provide us with a

00:10:36,520 --> 00:10:40,330
console and a Ruppel statically typed

00:10:38,500 --> 00:10:43,060
languages do provide a lot of benefits

00:10:40,330 --> 00:10:45,670
as well though they will bubble the

00:10:43,060 --> 00:10:47,320
errors up to the top earlier we don't

00:10:45,670 --> 00:10:50,320
have to run our code or run our code in

00:10:47,320 --> 00:10:53,860
a specific way to see the error if there

00:10:50,320 --> 00:10:56,380
is a syntax error or a logic error the

00:10:53,860 --> 00:10:58,030
compiler can usually catch those we get

00:10:56,380 --> 00:10:59,740
better in code documentation through

00:10:58,030 --> 00:11:03,040
things like type definitions and

00:10:59,740 --> 00:11:06,720
interfaces and the compiler is a big a

00:11:03,040 --> 00:11:08,470
big advantage in that it allows for a

00:11:06,720 --> 00:11:09,940
disconnect between the language you're

00:11:08,470 --> 00:11:13,270
writing and the the code that's running

00:11:09,940 --> 00:11:15,310
and in there they can optimize the

00:11:13,270 --> 00:11:16,120
performance and runtime efficiency of

00:11:15,310 --> 00:11:18,220
the application

00:11:16,120 --> 00:11:20,499
and overall it can provide a better

00:11:18,220 --> 00:11:23,649
design time experience over time because

00:11:20,499 --> 00:11:25,240
you get a lot of benefits in tooling

00:11:23,649 --> 00:11:28,569
that you don't really get with dynamic

00:11:25,240 --> 00:11:29,680
languages so why I have there been all

00:11:28,569 --> 00:11:34,300
of these attempts to replace

00:11:29,680 --> 00:11:36,069
JavaScript's role in on the web well

00:11:34,300 --> 00:11:38,410
it's because JavaScript like we

00:11:36,069 --> 00:11:39,819
mentioned it's not an application or a

00:11:38,410 --> 00:11:41,920
language that was built to handle the

00:11:39,819 --> 00:11:43,449
responsibilities that it has and the

00:11:41,920 --> 00:11:44,829
responsibilities that it has are just

00:11:43,449 --> 00:11:47,559
too important now because the web is

00:11:44,829 --> 00:11:50,410
just huge and JavaScript projects are

00:11:47,559 --> 00:11:52,240
changing as well so we are continuing on

00:11:50,410 --> 00:11:54,610
with the language it's a great language

00:11:52,240 --> 00:11:57,490
it's had a lot of changes that I'll get

00:11:54,610 --> 00:12:00,579
to more recently but the way that it was

00:11:57,490 --> 00:12:02,920
designed it wasn't really an set up to

00:12:00,579 --> 00:12:05,350
handle these tasks but jeaious projects

00:12:02,920 --> 00:12:07,899
they do share a lot of similar

00:12:05,350 --> 00:12:10,209
characteristics as we use them more and

00:12:07,899 --> 00:12:11,379
more and create them the sizes of

00:12:10,209 --> 00:12:12,999
JavaScript projects are growing

00:12:11,379 --> 00:12:15,129
exponentially they're getting bigger and

00:12:12,999 --> 00:12:17,949
bigger and the amount of time that they

00:12:15,129 --> 00:12:20,079
survive is getting longer and longer so

00:12:17,949 --> 00:12:22,600
they survived several iterations with

00:12:20,079 --> 00:12:24,009
different frameworks different different

00:12:22,600 --> 00:12:25,089
developers that's a lifetime of the

00:12:24,009 --> 00:12:26,439
project so we might have several

00:12:25,089 --> 00:12:27,699
developers coming and going on the

00:12:26,439 --> 00:12:30,249
project and they're getting really

00:12:27,699 --> 00:12:31,870
complex to where you don't have just a

00:12:30,249 --> 00:12:33,790
single person that understands every

00:12:31,870 --> 00:12:35,649
intricacy of the application you have

00:12:33,790 --> 00:12:39,279
several people and then they may come

00:12:35,649 --> 00:12:40,660
and go over time so these these

00:12:39,279 --> 00:12:43,089
characteristics do introduce some

00:12:40,660 --> 00:12:45,040
bottlenecks to understanding the code

00:12:43,089 --> 00:12:46,749
and this leads to some increased risks

00:12:45,040 --> 00:12:48,939
as we try and change and refactor the

00:12:46,749 --> 00:12:51,249
code and in dynamic languages this can

00:12:48,939 --> 00:12:54,790
be a little difficult to to work with

00:12:51,249 --> 00:12:59,410
and JavaScript just wasn't designed for

00:12:54,790 --> 00:13:01,329
this so over the years we have worked

00:12:59,410 --> 00:13:03,309
out ways to mitigate this risk that's

00:13:01,329 --> 00:13:05,980
imposed by and not just in JavaScript

00:13:03,309 --> 00:13:08,649
but in several languages but we really

00:13:05,980 --> 00:13:11,230
try and follow key practices like

00:13:08,649 --> 00:13:14,170
encapsulation reuse module is a module

00:13:11,230 --> 00:13:16,870
organization error detection code style

00:13:14,170 --> 00:13:19,329
and annotation and we've done that

00:13:16,870 --> 00:13:21,129
through frameworks that have come out so

00:13:19,329 --> 00:13:22,749
the language itself doesn't provide us

00:13:21,129 --> 00:13:24,519
with a whole lot or it hasn't in the

00:13:22,749 --> 00:13:26,379
past so we had to fill that in and

00:13:24,519 --> 00:13:28,480
that's where frameworks like dojo

00:13:26,379 --> 00:13:29,769
originally filled in a lot of missing

00:13:28,480 --> 00:13:32,769
functionality with things like

00:13:29,769 --> 00:13:35,559
Jules and promises and things like that

00:13:32,769 --> 00:13:37,809
and then jQuery really redefined the way

00:13:35,559 --> 00:13:41,800
that we enter we interact with the Dom

00:13:37,809 --> 00:13:44,920
requirejs a whole module framework and

00:13:41,800 --> 00:13:46,480
then component libraries like backbone

00:13:44,920 --> 00:13:49,329
and angular really helped you define

00:13:46,480 --> 00:13:50,829
that so this has all been in userland

00:13:49,329 --> 00:13:52,449
where we've been innovating in

00:13:50,829 --> 00:13:55,059
JavaScript to make up for the

00:13:52,449 --> 00:13:57,279
shortcomings in the language but of

00:13:55,059 --> 00:13:59,429
course this is 2018 and I'm talking

00:13:57,279 --> 00:14:01,899
about JavaScript from from years ago

00:13:59,429 --> 00:14:03,639
2018 javascript is much much better and

00:14:01,899 --> 00:14:06,189
much much better equipped to handle a

00:14:03,639 --> 00:14:09,069
lot of the responsibilities that it has

00:14:06,189 --> 00:14:10,329
and that's because it has changed in a

00:14:09,069 --> 00:14:12,879
lot of ways we've had several new

00:14:10,329 --> 00:14:15,369
features to the language to make it has

00:14:12,879 --> 00:14:17,049
better syntactic sugar so that we can be

00:14:15,369 --> 00:14:18,519
more expressive in our code and adding

00:14:17,049 --> 00:14:21,220
new features that we need to do things

00:14:18,519 --> 00:14:22,769
like asynchronous code in a more

00:14:21,220 --> 00:14:25,600
readable way a more human readable way

00:14:22,769 --> 00:14:29,769
and introducing our own module syntax

00:14:25,600 --> 00:14:32,980
and so these things combined with newer

00:14:29,769 --> 00:14:35,160
features and tools things like NPM NPM

00:14:32,980 --> 00:14:37,299
being the the package manager for

00:14:35,160 --> 00:14:40,839
JavaScript meaning the package manager

00:14:37,299 --> 00:14:42,610
for the web really allows us to fulfill

00:14:40,839 --> 00:14:46,600
the encapsulation reuse and modular

00:14:42,610 --> 00:14:50,799
modular ization risk mitigators that are

00:14:46,600 --> 00:14:53,860
defined here others include static

00:14:50,799 --> 00:14:55,990
analysis tools like es lint for advanced

00:14:53,860 --> 00:14:57,519
error detection earlier with with

00:14:55,990 --> 00:14:59,649
javascript wherever we can we want to

00:14:57,519 --> 00:15:01,600
get that feedback back to the developer

00:14:59,649 --> 00:15:04,089
as fast as possible we also introduced a

00:15:01,600 --> 00:15:05,439
compile step with babel now because we

00:15:04,089 --> 00:15:07,029
want to run tomorrow's JavaScript today

00:15:05,439 --> 00:15:08,889
and the only way to do that is to

00:15:07,029 --> 00:15:11,619
transpile back to a link to a version of

00:15:08,889 --> 00:15:13,089
javascript that can run and then

00:15:11,619 --> 00:15:16,899
advanced testing frameworks javascript

00:15:13,089 --> 00:15:19,809
has really adopted a a community of

00:15:16,899 --> 00:15:21,639
testing and so that has really advanced

00:15:19,809 --> 00:15:24,249
the tooling around that as well and that

00:15:21,639 --> 00:15:27,819
really helps to get error messages back

00:15:24,249 --> 00:15:30,129
to developers quickly and then code

00:15:27,819 --> 00:15:32,619
style we've we've kind of standardized

00:15:30,129 --> 00:15:35,230
quite a bit on the language itself

00:15:32,619 --> 00:15:36,610
providing better syntactic sugar for us

00:15:35,230 --> 00:15:38,379
to be more expressive in the ways we

00:15:36,610 --> 00:15:41,110
want to do things that's things like D

00:15:38,379 --> 00:15:42,990
structuring arrow functions rest and

00:15:41,110 --> 00:15:44,459
spread and default values we don't

00:15:42,990 --> 00:15:46,260
have to have some obscure syntax to do

00:15:44,459 --> 00:15:49,290
that now our code is much more readable

00:15:46,260 --> 00:15:53,100
as a result but then beyond that whether

00:15:49,290 --> 00:15:55,200
we have spaces or tabs or single or

00:15:53,100 --> 00:15:56,580
double quotes or any of that we can kind

00:15:55,200 --> 00:15:58,200
of watch all of that away with a

00:15:56,580 --> 00:15:59,970
prettier config which is really great so

00:15:58,200 --> 00:16:01,320
we can rewrite the code we can write the

00:15:59,970 --> 00:16:04,380
code any way we want and then rewrite it

00:16:01,320 --> 00:16:06,570
to the way that everyone agrees on but

00:16:04,380 --> 00:16:09,540
the big missing thing is annotation and

00:16:06,570 --> 00:16:11,160
we can provide annotations in JavaScript

00:16:09,540 --> 00:16:14,730
by annotating our code with comments

00:16:11,160 --> 00:16:17,360
like J's comments or or other things but

00:16:14,730 --> 00:16:23,940
if we really want to take advantage of

00:16:17,360 --> 00:16:25,620
any real enforceable annotations we need

00:16:23,940 --> 00:16:29,430
to switch to something like flow or

00:16:25,620 --> 00:16:30,870
typescript and so ask code these code

00:16:29,430 --> 00:16:32,520
bases are getting bigger it's getting

00:16:30,870 --> 00:16:35,250
really difficult to rely on unit tests

00:16:32,520 --> 00:16:37,700
alone for any kind of large refactoring

00:16:35,250 --> 00:16:40,560
efforts and as this quote points out

00:16:37,700 --> 00:16:42,839
just relying on a test suite to do any

00:16:40,560 --> 00:16:44,730
kind of large refactoring it's a huge

00:16:42,839 --> 00:16:46,380
coefficient of friction on actually

00:16:44,730 --> 00:16:47,880
doing that because you don't really want

00:16:46,380 --> 00:16:50,279
to break the entire application in

00:16:47,880 --> 00:16:51,690
subtle ways that you may not realize and

00:16:50,279 --> 00:16:53,190
that your tests may not be catching and

00:16:51,690 --> 00:16:54,899
so unit tests really aren't cut out for

00:16:53,190 --> 00:16:57,600
that I'm not saying that the types

00:16:54,899 --> 00:16:59,820
should replace unit tests but they are a

00:16:57,600 --> 00:17:02,160
good complement to that and so that's

00:16:59,820 --> 00:17:05,660
where I start talking about typescript

00:17:02,160 --> 00:17:08,390
now so typescript was created in

00:17:05,660 --> 00:17:11,660
Microsoft by Andrew Salzburg who created

00:17:08,390 --> 00:17:15,120
c-sharp and turbo Pascal and Delfy and

00:17:11,660 --> 00:17:17,579
it was released publicly in 2012 and it

00:17:15,120 --> 00:17:20,100
adds type annotations interfaces and

00:17:17,579 --> 00:17:21,689
generics and more to the language so

00:17:20,100 --> 00:17:24,569
it's it's really a layer on top of

00:17:21,689 --> 00:17:27,059
JavaScript that adds all of this to give

00:17:24,569 --> 00:17:30,030
us these statically typed advantages in

00:17:27,059 --> 00:17:32,010
our dynamic JavaScript language it's

00:17:30,030 --> 00:17:34,380
very active community version 3 was just

00:17:32,010 --> 00:17:35,490
released and it's a strict superset of

00:17:34,380 --> 00:17:37,500
JavaScript and I think that that's

00:17:35,490 --> 00:17:40,110
probably the biggest take away with it

00:17:37,500 --> 00:17:42,210
is it's not a language like CoffeeScript

00:17:40,110 --> 00:17:43,920
or Dart that's trying to change

00:17:42,210 --> 00:17:46,070
javascript into something else it's

00:17:43,920 --> 00:17:49,020
fully embracing JavaScript and then

00:17:46,070 --> 00:17:51,630
extending it with types on top of it and

00:17:49,020 --> 00:17:53,970
so it's not changing that in any way and

00:17:51,630 --> 00:17:54,800
as long as that is one of its core

00:17:53,970 --> 00:17:58,910
design goals

00:17:54,800 --> 00:18:00,380
I'm a fan of that but the types are

00:17:58,910 --> 00:18:02,990
really the least interesting part of

00:18:00,380 --> 00:18:05,180
JavaScript of typescript it's really

00:18:02,990 --> 00:18:07,970
what they enable so bringing back that

00:18:05,180 --> 00:18:10,250
slide that I had the benefits of dynamic

00:18:07,970 --> 00:18:13,130
and Static languages we really get a lot

00:18:10,250 --> 00:18:14,720
of the static side over with Java so

00:18:13,130 --> 00:18:17,630
with all of the benefits of JavaScript

00:18:14,720 --> 00:18:19,640
as well we get a compile step so we get

00:18:17,630 --> 00:18:21,050
earlier detection of mistakes in real

00:18:19,640 --> 00:18:23,630
time we also get that with the language

00:18:21,050 --> 00:18:25,100
service we get better built in

00:18:23,630 --> 00:18:26,990
documentation because we can annotate

00:18:25,100 --> 00:18:28,760
our code with types so that we know

00:18:26,990 --> 00:18:32,690
exactly what method signatures look like

00:18:28,760 --> 00:18:34,930
and we can't really call methods in an

00:18:32,690 --> 00:18:37,490
incorrect way like we can in JavaScript

00:18:34,930 --> 00:18:39,560
and we also get a better design time

00:18:37,490 --> 00:18:43,730
developer experience through tooling so

00:18:39,560 --> 00:18:46,100
we get a lot of benefits through the the

00:18:43,730 --> 00:18:49,100
language server that it provides and so

00:18:46,100 --> 00:18:52,040
with that we now have this ability to

00:18:49,100 --> 00:18:53,480
easily refactor our code we get

00:18:52,040 --> 00:18:55,220
intellisense so we can have Auto

00:18:53,480 --> 00:18:56,840
completion that makes sense and that is

00:18:55,220 --> 00:18:59,240
accurate and we get a continuous

00:18:56,840 --> 00:19:00,170
feedback loop through that that language

00:18:59,240 --> 00:19:01,430
service that will give us back

00:19:00,170 --> 00:19:04,550
information about the code that we're

00:19:01,430 --> 00:19:06,050
running and how how we can use it and

00:19:04,550 --> 00:19:09,380
maybe what's wrong with it as we're

00:19:06,050 --> 00:19:11,660
typing it so the best part of all of

00:19:09,380 --> 00:19:13,760
this is the the best part of typescript

00:19:11,660 --> 00:19:15,350
I think is that you really don't have to

00:19:13,760 --> 00:19:18,410
switch to typescript to reap some

00:19:15,350 --> 00:19:20,630
benefits from it you can add in this

00:19:18,410 --> 00:19:23,270
comment this at TS check to your

00:19:20,630 --> 00:19:24,680
javascript file and anything that

00:19:23,270 --> 00:19:26,270
javascript are the type the type of

00:19:24,680 --> 00:19:27,830
language service can infer about your

00:19:26,270 --> 00:19:29,270
code it will warn you about so it will

00:19:27,830 --> 00:19:32,360
let you know if there are any problems

00:19:29,270 --> 00:19:33,590
in your code that you may that may be

00:19:32,360 --> 00:19:35,210
subtle enough that you're not seeing

00:19:33,590 --> 00:19:36,710
them all without changing anything

00:19:35,210 --> 00:19:39,050
except adding a single comment to the

00:19:36,710 --> 00:19:41,450
page or you can add a J's config dot

00:19:39,050 --> 00:19:44,510
JSON to your project and Visual Studio

00:19:41,450 --> 00:19:45,710
code embraces this and uses that on all

00:19:44,510 --> 00:19:47,450
of your JavaScript so you get that

00:19:45,710 --> 00:19:51,560
automatically but you can get it in any

00:19:47,450 --> 00:19:54,500
any editor as well so I've got an

00:19:51,560 --> 00:19:55,970
example some example code here that is

00:19:54,500 --> 00:19:59,540
just a JavaScript file that has two

00:19:55,970 --> 00:20:02,570
methods on it a add method and a to

00:19:59,540 --> 00:20:05,900
relative date method and we can just add

00:20:02,570 --> 00:20:08,210
in the TS check call a TS check comment

00:20:05,900 --> 00:20:10,100
at the top and when we do that

00:20:08,210 --> 00:20:11,900
it's not really going to do anything yet

00:20:10,100 --> 00:20:13,520
because there's nothing really wrong and

00:20:11,900 --> 00:20:14,990
that's because the way that we have it

00:20:13,520 --> 00:20:19,340
set up I'm telling it not to worry about

00:20:14,990 --> 00:20:21,350
implicit any's so if I disable that now

00:20:19,340 --> 00:20:22,970
it will warn me if it doesn't really

00:20:21,350 --> 00:20:24,140
know what a value is it's not just going

00:20:22,970 --> 00:20:27,380
to implicitly assume that these

00:20:24,140 --> 00:20:28,820
arguments are any instead I need to tell

00:20:27,380 --> 00:20:30,650
it what they are and I can do that

00:20:28,820 --> 00:20:33,590
through J s comments so now I can use

00:20:30,650 --> 00:20:35,300
these these comments and I get feedback

00:20:33,590 --> 00:20:37,190
from the compiler whether things are

00:20:35,300 --> 00:20:39,170
right or wrong so here I immediately can

00:20:37,190 --> 00:20:41,330
see that because I told it I pass in two

00:20:39,170 --> 00:20:43,580
numbers when I actually called it I was

00:20:41,330 --> 00:20:46,100
passing in a string it warned me about

00:20:43,580 --> 00:20:48,530
that now in here if I change that and

00:20:46,100 --> 00:20:50,270
say the J's comment is this argument is

00:20:48,530 --> 00:20:52,520
a date well date doesn't have a replace

00:20:50,270 --> 00:20:53,810
method on it so it's giving me a warning

00:20:52,520 --> 00:20:56,390
about that but if I change it to a

00:20:53,810 --> 00:20:58,340
string then everything is good I can

00:20:56,390 --> 00:21:00,500
also if I don't want to use J s comments

00:20:58,340 --> 00:21:01,700
I can just give JavaScript away or the

00:21:00,500 --> 00:21:04,220
typescript language service a way to

00:21:01,700 --> 00:21:07,010
infer about my code what the value

00:21:04,220 --> 00:21:09,020
should be and I did that through adding

00:21:07,010 --> 00:21:12,620
a default argument to it which is just

00:21:09,020 --> 00:21:15,500
an empty string implying that the iso

00:21:12,620 --> 00:21:18,020
string argument is going to be a string

00:21:15,500 --> 00:21:20,420
it's the JavaScript or typescript just

00:21:18,020 --> 00:21:22,100
immediately lets me see that and get

00:21:20,420 --> 00:21:24,530
feedback without even having to change

00:21:22,100 --> 00:21:28,730
over to JavaScript there are two types

00:21:24,530 --> 00:21:31,460
script the next best bar next best part

00:21:28,730 --> 00:21:33,740
is that JavaScript and typescript can

00:21:31,460 --> 00:21:35,570
co-exist together in the same project so

00:21:33,740 --> 00:21:38,720
if you decide that you want to rewrite

00:21:35,570 --> 00:21:40,280
over to a statically typed language like

00:21:38,720 --> 00:21:42,500
JavaScript or like Ted script you don't

00:21:40,280 --> 00:21:44,630
have to do it all at once you can

00:21:42,500 --> 00:21:46,430
incrementally do it slowly in any way

00:21:44,630 --> 00:21:47,870
that you like you can change one file or

00:21:46,430 --> 00:21:50,210
you can change all new files going

00:21:47,870 --> 00:21:53,620
forward or you can slowly convert

00:21:50,210 --> 00:21:56,570
everything over time and that is a huge

00:21:53,620 --> 00:21:59,720
that lessens the barrier to adoption of

00:21:56,570 --> 00:22:01,970
typescript which is really great so in

00:21:59,720 --> 00:22:03,320
this code I have a javascript file

00:22:01,970 --> 00:22:06,620
called article service and I'm just

00:22:03,320 --> 00:22:08,900
running my build step to show that it's

00:22:06,620 --> 00:22:10,610
all green and then I'm going to go in

00:22:08,900 --> 00:22:12,200
and rename the file to TS and

00:22:10,610 --> 00:22:15,050
immediately the build will fail and I

00:22:12,200 --> 00:22:17,330
will get a few errors because again it

00:22:15,050 --> 00:22:18,770
doesn't know what API key is so I can go

00:22:17,330 --> 00:22:20,540
ahead and type that and give it a string

00:22:18,770 --> 00:22:21,100
and then the article service doesn't

00:22:20,540 --> 00:22:22,870
have an ape

00:22:21,100 --> 00:22:25,450
Heike on it so I have to tell it that

00:22:22,870 --> 00:22:27,190
this class does have that kind of that

00:22:25,450 --> 00:22:29,620
property on it and that it's a string

00:22:27,190 --> 00:22:32,380
and then the fetch articles method has a

00:22:29,620 --> 00:22:34,299
string that you pass into it and then I

00:22:32,380 --> 00:22:35,980
can also do things like delete my

00:22:34,299 --> 00:22:38,770
command J s specific code and switch

00:22:35,980 --> 00:22:41,200
this over to the es module syntax

00:22:38,770 --> 00:22:43,210
because the compile step will convert it

00:22:41,200 --> 00:22:45,669
to common J's or whatever module format

00:22:43,210 --> 00:22:47,860
I'd like now here I'm changing that over

00:22:45,669 --> 00:22:49,240
from a string to be a new source type

00:22:47,860 --> 00:22:50,950
which is a type that I'm creating I'm

00:22:49,240 --> 00:22:53,919
actually creating an enum up here by

00:22:50,950 --> 00:22:55,630
converting this object into an enum

00:22:53,919 --> 00:22:57,820
because I don't want it to just be any

00:22:55,630 --> 00:22:59,650
string I want it to be explicitly these

00:22:57,820 --> 00:23:01,659
six strings one of these if it's

00:22:59,650 --> 00:23:04,330
anything other than those six then you

00:23:01,659 --> 00:23:06,970
should give me an error and then finally

00:23:04,330 --> 00:23:09,400
I'm creating an interface because the

00:23:06,970 --> 00:23:11,169
fetch article's method should return an

00:23:09,400 --> 00:23:12,909
array of articles but I don't really

00:23:11,169 --> 00:23:14,650
know what that looks like and so I can

00:23:12,909 --> 00:23:16,120
express that in my code you can't really

00:23:14,650 --> 00:23:18,940
see it on this projector but there's

00:23:16,120 --> 00:23:21,280
comments there that are showing exactly

00:23:18,940 --> 00:23:24,190
what values were on there and there were

00:23:21,280 --> 00:23:25,299
those values there but now instead of

00:23:24,190 --> 00:23:26,559
just having them in comments which

00:23:25,299 --> 00:23:29,320
aren't enforceable I have them in an

00:23:26,559 --> 00:23:31,480
enforceable way with this interface that

00:23:29,320 --> 00:23:32,980
I can type check against and I can

00:23:31,480 --> 00:23:34,690
specifically say that the fetch

00:23:32,980 --> 00:23:38,580
article's method now will return a

00:23:34,690 --> 00:23:42,760
promise that's going to resolve to a

00:23:38,580 --> 00:23:45,250
article array so that's a really great

00:23:42,760 --> 00:23:48,250
benefit and then another one is that the

00:23:45,250 --> 00:23:50,289
the type system can be subverted so one

00:23:48,250 --> 00:23:52,210
big benefit of dynamic languages is you

00:23:50,289 --> 00:23:53,500
don't have to worry about the exact way

00:23:52,210 --> 00:23:54,789
the API will look and you don't have to

00:23:53,500 --> 00:23:57,460
code all of that up and create these

00:23:54,789 --> 00:23:59,590
interfaces you can subvert the type

00:23:57,460 --> 00:24:02,799
system in any way that you at any time

00:23:59,590 --> 00:24:08,200
with these compiler checks but you can

00:24:02,799 --> 00:24:10,030
also do it by using aliases - custom

00:24:08,200 --> 00:24:11,470
types that you might create so in the

00:24:10,030 --> 00:24:12,760
previous example where I was using an

00:24:11,470 --> 00:24:13,929
article instead of defining that

00:24:12,760 --> 00:24:15,970
interface maybe I don't know exactly

00:24:13,929 --> 00:24:17,679
what an article will look like well I

00:24:15,970 --> 00:24:21,760
can still take advantage of that by

00:24:17,679 --> 00:24:23,500
aliasing article to be the any type and

00:24:21,760 --> 00:24:25,480
then use that throughout my code and

00:24:23,500 --> 00:24:28,270
when I want to change it over to be an

00:24:25,480 --> 00:24:29,620
article interface I can just replace

00:24:28,270 --> 00:24:31,630
that and import the interface from

00:24:29,620 --> 00:24:33,640
anywhere and use that and all of my code

00:24:31,630 --> 00:24:34,260
will line up and I'm not just littering

00:24:33,640 --> 00:24:37,860
it with any

00:24:34,260 --> 00:24:39,950
statements anywhere everywhere so

00:24:37,860 --> 00:24:42,480
typescript really encourages you to

00:24:39,950 --> 00:24:44,910
develop by exposing these interfaces

00:24:42,480 --> 00:24:47,850
really by creating these contracts that

00:24:44,910 --> 00:24:49,770
you adhere to and its really simple to

00:24:47,850 --> 00:24:51,930
introduce this type checking into your

00:24:49,770 --> 00:24:54,660
project as we've seen without really

00:24:51,930 --> 00:24:56,220
having to go fully into typescript and

00:24:54,660 --> 00:24:57,600
converting everything all at once you

00:24:56,220 --> 00:25:00,120
can do as much or as little as you like

00:24:57,600 --> 00:25:01,280
the more that you do the more advantages

00:25:00,120 --> 00:25:04,020
that you'll get from it though

00:25:01,280 --> 00:25:05,910
so it provides this better ergonomics

00:25:04,020 --> 00:25:07,800
story for developers on your project

00:25:05,910 --> 00:25:10,290
it's easier for everyone to understand

00:25:07,800 --> 00:25:11,490
what the API sar it's easier for new

00:25:10,290 --> 00:25:13,590
developers who come on to the project

00:25:11,490 --> 00:25:16,100
they get the smart tooling to help them

00:25:13,590 --> 00:25:18,720
navigate the codebase and learn it and

00:25:16,100 --> 00:25:21,140
it makes it easier to maintain that over

00:25:18,720 --> 00:25:23,820
time especially as you need to refactor

00:25:21,140 --> 00:25:26,130
so I work on an open source project

00:25:23,820 --> 00:25:27,990
called dojo which received a complete

00:25:26,130 --> 00:25:30,000
rewrite earlier this year completely

00:25:27,990 --> 00:25:32,400
over to typescript and specifically to

00:25:30,000 --> 00:25:35,610
strict typescript because one main focus

00:25:32,400 --> 00:25:36,960
is on developer experience and we think

00:25:35,610 --> 00:25:39,750
that typescript really helps us to

00:25:36,960 --> 00:25:41,280
deliver on that so it's a really cool

00:25:39,750 --> 00:25:43,710
project and I encourage you to check it

00:25:41,280 --> 00:25:47,610
out and so I'll leave you with should

00:25:43,710 --> 00:25:49,380
you use typescript probably yes but you

00:25:47,610 --> 00:25:51,450
can decide at which level you want to

00:25:49,380 --> 00:25:54,720
adopt it and then slowly increment that

00:25:51,450 --> 00:25:57,120
over time this quote from Ken wheeler

00:25:54,720 --> 00:25:58,860
these days if you aren't typing your JS

00:25:57,120 --> 00:26:01,380
you're driving without a seat belt on I

00:25:58,860 --> 00:26:04,980
think that that's totally totally

00:26:01,380 --> 00:26:06,900
realistic and I believe that and so I'll

00:26:04,980 --> 00:26:11,010
leave you with always bet on JavaScript

00:26:06,900 --> 00:26:13,920
or a strict superset so thank you again

00:26:11,010 --> 00:26:15,420
I'm going to be over at the the talk

00:26:13,920 --> 00:26:19,370
script podcast booth so come check us

00:26:15,420 --> 00:26:19,370
out and thank you very much

00:26:20,960 --> 00:26:23,020

YouTube URL: https://www.youtube.com/watch?v=qGK541P2xII


