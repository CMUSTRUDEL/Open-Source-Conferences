Title: Data-Driven CSS with Grid & Custom Properties - Miriam Suzanne - JSConf US 2018
Publication date: 2018-11-14
Playlist: JSConf US 2018
Description: 
	
Captions: 
	00:00:00,320 --> 00:00:03,840
[Music]

00:00:02,070 --> 00:00:05,660
[Applause]

00:00:03,840 --> 00:00:07,410
[Music]

00:00:05,660 --> 00:00:09,280
[Applause]

00:00:07,410 --> 00:00:11,020
[Music]

00:00:09,280 --> 00:00:12,780
[Applause]

00:00:11,020 --> 00:00:15,920
[Music]

00:00:12,780 --> 00:00:15,920
[Applause]

00:00:16,870 --> 00:00:28,679
[Music]

00:00:23,570 --> 00:00:28,679
[Applause]

00:00:29,579 --> 00:00:35,649
hello hey my mic is on that's awesome

00:00:33,850 --> 00:00:38,860
is the text here large enough do I need

00:00:35,649 --> 00:00:42,070
a bump for anything I do things in HTML

00:00:38,860 --> 00:00:44,920
so that you know you can do that

00:00:42,070 --> 00:00:49,239
oh my clicker is not going though let's

00:00:44,920 --> 00:00:56,200
get that fixed you know what I didn't do

00:00:49,239 --> 00:01:00,329
I didn't plug in the dongle so with a

00:00:56,200 --> 00:01:05,110
quick pause for dongles there we go hi

00:01:00,329 --> 00:01:08,310
I'm Miriam Suzanne that is definitely a

00:01:05,110 --> 00:01:12,729
picture of me and I'm glad to be here

00:01:08,310 --> 00:01:16,990
thanks Jen in case you don't know me I

00:01:12,729 --> 00:01:20,080
run a bird with my brother

00:01:16,990 --> 00:01:22,360
we're a full-stack agency small team

00:01:20,080 --> 00:01:24,190
doing client work for various people I

00:01:22,360 --> 00:01:26,860
recently started learning JavaScript

00:01:24,190 --> 00:01:29,610
sorry being introduced to JavaScript

00:01:26,860 --> 00:01:35,229
it's the one language you cannot learn

00:01:29,610 --> 00:01:38,650
everything else is learn about so mostly

00:01:35,229 --> 00:01:43,720
I've done lots of HTML and CSS and then

00:01:38,650 --> 00:01:47,049
dabbled wherever I need to so I've

00:01:43,720 --> 00:01:48,640
mostly been known for Susie which I was

00:01:47,049 --> 00:01:50,350
told to use as an introduction because

00:01:48,640 --> 00:01:52,720
people might know it even if you don't

00:01:50,350 --> 00:01:54,520
know me and then show like that it's got

00:01:52,720 --> 00:01:56,369
lots of downloads but I don't want to do

00:01:54,520 --> 00:02:01,020
that I want to tell you not to use it

00:01:56,369 --> 00:02:03,430
because grids are so let's say six peas

00:02:01,020 --> 00:02:06,220
right that's going back a little too far

00:02:03,430 --> 00:02:07,840
but good so while you were all surfing

00:02:06,220 --> 00:02:10,569
yesterday I was just on my way here

00:02:07,840 --> 00:02:14,049
sorry I showed up late but I'm here now

00:02:10,569 --> 00:02:16,379
the TSA took my toothpaste so you're

00:02:14,049 --> 00:02:16,379
safe

00:02:17,180 --> 00:02:25,549
but fortunately the hotel has given me

00:02:21,349 --> 00:02:27,349
some more so you're safe but let's talk

00:02:25,549 --> 00:02:32,439
about CSS and we're going to start with

00:02:27,349 --> 00:02:32,439
a little bit of history thanks Jen

00:02:33,650 --> 00:02:43,730
so in 1993 we got the first HTML spec

00:02:37,359 --> 00:02:46,489
that's this is my company in 93 we were

00:02:43,730 --> 00:02:50,239
just doing our first client planning I

00:02:46,489 --> 00:02:53,329
think their card sort of some kind a

00:02:50,239 --> 00:02:55,639
little bit later we got the font tag in

00:02:53,329 --> 00:02:57,530
tables which was great we could start

00:02:55,639 --> 00:02:59,959
styling these documents that we had

00:02:57,530 --> 00:03:02,030
these HTML documents and in case nobody

00:02:59,959 --> 00:03:07,010
screamed it out you recently yes tables

00:03:02,030 --> 00:03:08,540
are for data a little bit later actually

00:03:07,010 --> 00:03:10,400
earlier if you're looking at when the

00:03:08,540 --> 00:03:11,480
spec was first released but later if

00:03:10,400 --> 00:03:14,469
you're talking about when it was

00:03:11,480 --> 00:03:18,409
implemented in browsers we finally got

00:03:14,469 --> 00:03:19,969
CSS cascading style sheets and HTML and

00:03:18,409 --> 00:03:22,579
CSS were both built around this

00:03:19,969 --> 00:03:24,409
principle of least power what is the

00:03:22,579 --> 00:03:27,590
least powerful language we can build

00:03:24,409 --> 00:03:30,139
that will solve this problem we need and

00:03:27,590 --> 00:03:31,549
that was a guiding principle of the

00:03:30,139 --> 00:03:32,900
design of these languages which is

00:03:31,549 --> 00:03:36,919
important to know when we're looking at

00:03:32,900 --> 00:03:38,389
the history of them so we got CSS and

00:03:36,919 --> 00:03:43,069
it's awesome thank you

00:03:38,389 --> 00:03:45,620
that's my talk you've all seen this I

00:03:43,069 --> 00:03:48,680
you should know I think that this is

00:03:45,620 --> 00:03:51,229
absolutely a feature if you had a design

00:03:48,680 --> 00:03:53,629
tool that could not handle overflow of a

00:03:51,229 --> 00:03:55,909
box you would ditch that design tool

00:03:53,629 --> 00:03:58,790
immediately you need to be able to

00:03:55,909 --> 00:04:01,519
handle overflow this is a feature of CSS

00:03:58,790 --> 00:04:04,220
and we CSS actually gives you various

00:04:01,519 --> 00:04:06,169
ways you can handle it and that's good

00:04:04,220 --> 00:04:11,500
the problem with this is just that a

00:04:06,169 --> 00:04:14,439
designer didn't look at it also in 2000

00:04:11,500 --> 00:04:18,590
same time that browsers were picking up

00:04:14,439 --> 00:04:20,840
CSS we got the DAO of web design from

00:04:18,590 --> 00:04:25,550
john Alsop how many of you have read

00:04:20,840 --> 00:04:30,409
that article or know of it a few so

00:04:25,550 --> 00:04:33,889
that's an early manifesto saying

00:04:30,409 --> 00:04:36,259
limitation of the printed page is that

00:04:33,889 --> 00:04:37,849
it's the same everywhere and we have to

00:04:36,259 --> 00:04:39,949
stop thinking about that as an advantage

00:04:37,849 --> 00:04:42,080
of the printed page that we should

00:04:39,949 --> 00:04:44,330
achieve with CSS and instead think of

00:04:42,080 --> 00:04:46,189
that as a limitation that we can now go

00:04:44,330 --> 00:04:48,439
beyond we can start thinking dynamically

00:04:46,189 --> 00:04:49,999
we can start thinking about how things

00:04:48,439 --> 00:04:51,559
are gonna look for different people in

00:04:49,999 --> 00:04:55,610
different places on different browsers

00:04:51,559 --> 00:04:57,889
so this is actually the first time we're

00:04:55,610 --> 00:04:59,539
talking about should everything look the

00:04:57,889 --> 00:05:04,909
same in every browser and John Alsop

00:04:59,539 --> 00:05:07,159
says no around 2007 to 2010 and this is

00:05:04,909 --> 00:05:09,679
when I was starting my company we got

00:05:07,159 --> 00:05:14,779
the major grid frameworks blueprint oo

00:05:09,679 --> 00:05:16,699
CSS 960 at this time grids were starting

00:05:14,779 --> 00:05:18,649
to become popular you had 12 columns

00:05:16,699 --> 00:05:21,619
gutters between them you were able to

00:05:18,649 --> 00:05:23,779
span the columns and this made sense to

00:05:21,619 --> 00:05:26,959
me that grid systems would become hugely

00:05:23,779 --> 00:05:29,449
popular at this point because we were

00:05:26,959 --> 00:05:31,729
using floats and we were dealing with

00:05:29,449 --> 00:05:33,769
lots of browser bugs with floats so

00:05:31,729 --> 00:05:35,809
every time you made a float you had to

00:05:33,769 --> 00:05:38,029
set it to display inline and then you

00:05:35,809 --> 00:05:40,219
had to handle various bugs across

00:05:38,029 --> 00:05:44,119
different browsers and it was a mess

00:05:40,219 --> 00:05:47,569
so these CSS frameworks which were as

00:05:44,119 --> 00:05:51,490
far as I recall the first open source

00:05:47,569 --> 00:05:54,829
tools that we had as CSS developers

00:05:51,490 --> 00:05:58,309
maybe Eric Meyers reset was in there

00:05:54,829 --> 00:06:01,279
somewhere but these allowed us to skip

00:05:58,309 --> 00:06:03,769
most of the hacks and ignore that part

00:06:01,279 --> 00:06:05,360
of the process which was nice so those

00:06:03,769 --> 00:06:06,969
became very big that's the same time

00:06:05,360 --> 00:06:11,599
that I was actually starting my company

00:06:06,969 --> 00:06:14,569
and I saw this talk not live because I

00:06:11,599 --> 00:06:17,239
was not in London but thanks to the

00:06:14,569 --> 00:06:19,759
Internet if you ever have a chance to

00:06:17,239 --> 00:06:21,979
watch this talk it's still relevant

00:06:19,759 --> 00:06:25,309
there's a few things in it that are out

00:06:21,979 --> 00:06:28,189
of date since 2008 but Natalie down was

00:06:25,309 --> 00:06:33,339
proposing a different way of working

00:06:28,189 --> 00:06:37,729
with CSS moving away from those

00:06:33,339 --> 00:06:41,749
frameworks that were a library of CSS

00:06:37,729 --> 00:06:43,280
code and with plain CSS all that we have

00:06:41,749 --> 00:06:46,220
is an API when we give you

00:06:43,280 --> 00:06:48,980
CSS framework the only API available is

00:06:46,220 --> 00:06:52,250
selectors so these were just lists of

00:06:48,980 --> 00:06:53,900
selectors that you could use and some

00:06:52,250 --> 00:06:55,790
people still use things like that today

00:06:53,900 --> 00:06:58,190
she was proposing that instead of a

00:06:55,790 --> 00:07:01,850
library full of selectors we could

00:06:58,190 --> 00:07:03,940
instead have a system and use consistent

00:07:01,850 --> 00:07:08,620
systems so that would be more like BEM

00:07:03,940 --> 00:07:12,500
or oo CSS now OS ESS had its framework

00:07:08,620 --> 00:07:15,190
but sort of these systems of thinking

00:07:12,500 --> 00:07:17,360
about CSS systems of naming things

00:07:15,190 --> 00:07:20,450
conventions that we can use across every

00:07:17,360 --> 00:07:23,390
site to build consistent grids without

00:07:20,450 --> 00:07:26,030
having to use the same grid for every

00:07:23,390 --> 00:07:28,120
site that we work on so she was also

00:07:26,030 --> 00:07:32,260
working with fluid grids she would put

00:07:28,120 --> 00:07:34,910
fluid percent based grids inside of a M

00:07:32,260 --> 00:07:38,450
based container and that way it was

00:07:34,910 --> 00:07:42,400
responsive to both font size and window

00:07:38,450 --> 00:07:46,760
size and this was before responsive

00:07:42,400 --> 00:07:48,740
trademark became a thing and really the

00:07:46,760 --> 00:07:52,550
the basic difference with responsive was

00:07:48,740 --> 00:07:54,800
that it involved media queries I used

00:07:52,550 --> 00:07:57,350
her system quite a bit but the math was

00:07:54,800 --> 00:08:00,080
really ugly I simplified it here target

00:07:57,350 --> 00:08:03,200
divided by context times 100% that's how

00:08:00,080 --> 00:08:06,100
you do fluid math but figuring out what

00:08:03,200 --> 00:08:09,530
context and target is once you include

00:08:06,100 --> 00:08:12,260
gutters can be very complex and at that

00:08:09,530 --> 00:08:13,880
point we didn't have sass so actually I

00:08:12,260 --> 00:08:18,890
think it existed but nobody knew about

00:08:13,880 --> 00:08:20,810
it so my CSS looked like this I was

00:08:18,890 --> 00:08:23,840
typing that into a calculator and then

00:08:20,810 --> 00:08:26,840
copying and pasting it and nobody had

00:08:23,840 --> 00:08:29,750
any idea what my CSS meant there's no

00:08:26,840 --> 00:08:33,140
way to know what that's for

00:08:29,750 --> 00:08:36,050
soon after that compass and sass did

00:08:33,140 --> 00:08:37,070
become more popular and finally our CSS

00:08:36,050 --> 00:08:40,550
is turing-complete

00:08:37,070 --> 00:08:43,219
it sort of breaks that principle of

00:08:40,550 --> 00:08:45,710
least power but I looked at that and

00:08:43,219 --> 00:08:48,940
said ok great I can start writing out my

00:08:45,710 --> 00:08:48,940
math that's meaningful

00:08:49,140 --> 00:08:54,130
not perfect so that's where Susie came

00:08:53,649 --> 00:08:56,500
in

00:08:54,130 --> 00:08:58,300
I wrote Susie just to take that math and

00:08:56,500 --> 00:09:00,310
make it readable that was the entire

00:08:58,300 --> 00:09:04,750
point it only does that one equation

00:09:00,310 --> 00:09:07,779
good done but what we're going for is

00:09:04,750 --> 00:09:10,959
code that's readable both to humans and

00:09:07,779 --> 00:09:13,630
to machines that's what we want from the

00:09:10,959 --> 00:09:16,779
start we want code that can be read by

00:09:13,630 --> 00:09:21,040
other developers as well as read by our

00:09:16,779 --> 00:09:23,290
browsers so that it's rendered and

00:09:21,040 --> 00:09:25,769
that's the goal and SAS helps with that

00:09:23,290 --> 00:09:28,450
we're naming things we get to take this

00:09:25,769 --> 00:09:30,370
HSL which some people aren't gonna

00:09:28,450 --> 00:09:33,670
understand necessarily what exactly

00:09:30,370 --> 00:09:37,060
color that is and we give it a name and

00:09:33,670 --> 00:09:38,829
we say not only what color is this but

00:09:37,060 --> 00:09:40,029
we can say what do we use it for why is

00:09:38,829 --> 00:09:42,820
it here

00:09:40,029 --> 00:09:45,670
we can give it a purpose so as Sarah

00:09:42,820 --> 00:09:47,260
Dresner says code is communication and I

00:09:45,670 --> 00:09:48,970
always have to mention she only said

00:09:47,260 --> 00:09:54,490
that once and she complains every time I

00:09:48,970 --> 00:09:57,910
quote her on it so sorry Sarah in 2009

00:09:54,490 --> 00:10:01,149
we get media queries and then in 2011 we

00:09:57,910 --> 00:10:02,529
get calc and calc is really interesting

00:10:01,149 --> 00:10:06,000
and it has been around for quite a while

00:10:02,529 --> 00:10:09,279
and well-supported more than its used

00:10:06,000 --> 00:10:12,279
kal gives us the first ability to mix

00:10:09,279 --> 00:10:15,160
units in our CSS finally we can add a

00:10:12,279 --> 00:10:18,040
pixel to a percentage and get a result

00:10:15,160 --> 00:10:20,200
because calc is calculated by the

00:10:18,040 --> 00:10:22,540
browser the browser has access to the

00:10:20,200 --> 00:10:26,350
Dom it can figure out both of these

00:10:22,540 --> 00:10:28,270
numbers and then add them together so

00:10:26,350 --> 00:10:29,920
that's something that SAS will never be

00:10:28,270 --> 00:10:34,660
able to do because SAS will never have

00:10:29,920 --> 00:10:38,670
access to the browser given all of those

00:10:34,660 --> 00:10:42,310
pieces Ethan Marcotte writes his article

00:10:38,670 --> 00:10:45,399
gives a talk announces responsive web

00:10:42,310 --> 00:10:48,880
design basically saying we need to

00:10:45,399 --> 00:10:51,070
target all these things and this is a

00:10:48,880 --> 00:10:53,260
fraction of what we're looking at and

00:10:51,070 --> 00:10:56,230
it's not just devices we're trying to go

00:10:53,260 --> 00:10:59,589
beyond targeting one man with yellow

00:10:56,230 --> 00:11:02,140
hair and beyond this and beyond this and

00:10:59,589 --> 00:11:03,820
you know we don't even know

00:11:02,140 --> 00:11:05,589
things about these people just from

00:11:03,820 --> 00:11:09,300
their pictures but we're trying to

00:11:05,589 --> 00:11:13,779
target lots of people in lots of places

00:11:09,300 --> 00:11:16,930
so we need to remember that though CSS

00:11:13,779 --> 00:11:21,760
has a declarative syntax CSS is in no

00:11:16,930 --> 00:11:24,700
way static CSS is built for from the

00:11:21,760 --> 00:11:27,970
start it is built to give us ability to

00:11:24,700 --> 00:11:29,890
make change and to style change how does

00:11:27,970 --> 00:11:31,959
this look different in one place versus

00:11:29,890 --> 00:11:34,329
another place and those are the sorts of

00:11:31,959 --> 00:11:38,110
rules that were writing in CSS it's not

00:11:34,329 --> 00:11:40,540
here's how it is forever but here's how

00:11:38,110 --> 00:11:43,690
it should handle different situations

00:11:40,540 --> 00:11:47,140
that's what CSS is written for so part

00:11:43,690 --> 00:11:49,300
of that is going with the flow you may

00:11:47,140 --> 00:11:51,700
know the concept of the flow these

00:11:49,300 --> 00:11:53,290
things are in an inline flow and they

00:11:51,700 --> 00:11:56,140
move in relationship to each other

00:11:53,290 --> 00:11:59,760
we can toggle that to a block flow and

00:11:56,140 --> 00:12:02,320
see that they move in a different axis

00:11:59,760 --> 00:12:05,079
but the flow is useful because it sets

00:12:02,320 --> 00:12:07,480
up relationships between objects rather

00:12:05,079 --> 00:12:09,640
than having each object on its own on

00:12:07,480 --> 00:12:11,740
the page if you've got if each object

00:12:09,640 --> 00:12:14,740
was on its own when I change the size of

00:12:11,740 --> 00:12:16,420
one I would have to hard-code this size

00:12:14,740 --> 00:12:19,720
change for every other object in the

00:12:16,420 --> 00:12:23,470
flow but the flow gives us ability to

00:12:19,720 --> 00:12:24,940
just let those relationships move so

00:12:23,470 --> 00:12:27,579
responsive design said we're going to

00:12:24,940 --> 00:12:30,490
use fluid grids flexible images and

00:12:27,579 --> 00:12:32,529
media queries to manage how the flow

00:12:30,490 --> 00:12:34,839
changes at different sized screens on

00:12:32,529 --> 00:12:36,399
different devices that was a new idea

00:12:34,839 --> 00:12:38,019
putting all that together it's

00:12:36,399 --> 00:12:39,579
interesting media queries were available

00:12:38,019 --> 00:12:41,890
much earlier but nobody was really

00:12:39,579 --> 00:12:46,240
paying attention to them until Ethan

00:12:41,890 --> 00:12:50,320
wrote that article in 2014 and I was

00:12:46,240 --> 00:12:53,699
surprised by how long ago this was we

00:12:50,320 --> 00:12:56,829
got CSS variables Firefox 31

00:12:53,699 --> 00:12:59,110
unless you count current color current

00:12:56,829 --> 00:13:02,410
color has been a variable that we've had

00:12:59,110 --> 00:13:07,600
since the beginning it stores the

00:13:02,410 --> 00:13:10,029
current color in your CSS and that's

00:13:07,600 --> 00:13:13,350
figured out by where you are in the Dom

00:13:10,029 --> 00:13:16,089
not just where you are in the CSS file

00:13:13,350 --> 00:13:18,759
but a variable we didn't have

00:13:16,089 --> 00:13:21,040
access to changing at that point now we

00:13:18,759 --> 00:13:24,509
have access to change these and tab

00:13:21,040 --> 00:13:29,110
Atkins wrote the spec for this it looks

00:13:24,509 --> 00:13:33,339
like this you can define the color and

00:13:29,110 --> 00:13:36,600
you can then call it so it's basically

00:13:33,339 --> 00:13:41,350
an empty browser prefix on a property

00:13:36,600 --> 00:13:43,660
and the goal there he says was that he

00:13:41,350 --> 00:13:45,819
was actually trying to slip in a new

00:13:43,660 --> 00:13:47,589
feature called custom properties nobody

00:13:45,819 --> 00:13:49,029
would go for it he called it variables

00:13:47,589 --> 00:13:50,980
and they bought it

00:13:49,029 --> 00:13:54,550
so he's now working on the next step of

00:13:50,980 --> 00:13:57,579
that which is to make it more powerful

00:13:54,550 --> 00:13:59,980
as a custom property this is how you

00:13:57,579 --> 00:14:02,889
access it you use the VAR function in

00:13:59,980 --> 00:14:05,160
CSS now you can call the property name

00:14:02,889 --> 00:14:08,920
and then you can also give it a fallback

00:14:05,160 --> 00:14:12,939
so that's useful if the property may or

00:14:08,920 --> 00:14:14,889
may not be defined in some ways that's

00:14:12,939 --> 00:14:16,839
similar to variables in sass we've all

00:14:14,889 --> 00:14:20,259
worked with variables before I hear

00:14:16,839 --> 00:14:22,360
JavaScript also has variables though I

00:14:20,259 --> 00:14:24,850
can't guarantee it

00:14:22,360 --> 00:14:26,410
so sass variables were rad when we got

00:14:24,850 --> 00:14:29,470
those we were able to clean up a lot of

00:14:26,410 --> 00:14:32,410
our code they hold beta they're useful

00:14:29,470 --> 00:14:34,990
for that they store something they make

00:14:32,410 --> 00:14:39,610
it reusable they help us make our code

00:14:34,990 --> 00:14:42,939
more dry that's great but sass variables

00:14:39,610 --> 00:14:45,759
use scope the way we understand it in

00:14:42,939 --> 00:14:50,470
most languages where we look at the file

00:14:45,759 --> 00:14:53,050
and we can see the scope because columns

00:14:50,470 --> 00:14:55,720
two is defined inside of example and

00:14:53,050 --> 00:14:58,209
even though nested class is nested in

00:14:55,720 --> 00:15:00,870
the Dom we don't know that it's nested

00:14:58,209 --> 00:15:03,730
in our code so it has no access to

00:15:00,870 --> 00:15:08,559
columns two and when we change something

00:15:03,730 --> 00:15:10,660
at a media query we can change the value

00:15:08,559 --> 00:15:14,319
of columns there but it only changes for

00:15:10,660 --> 00:15:18,490
that scope so it again isn't changing

00:15:14,319 --> 00:15:20,949
for everything in the media query or

00:15:18,490 --> 00:15:22,899
everything that uses it it has no access

00:15:20,949 --> 00:15:24,429
to the Dom it's just scoped in the file

00:15:22,899 --> 00:15:26,769
like we would with in other programming

00:15:24,429 --> 00:15:29,799
languages that's the big difference here

00:15:26,769 --> 00:15:29,990
with CSS variables we finally have a way

00:15:29,799 --> 00:15:32,720
of

00:15:29,990 --> 00:15:36,680
scoping to the Dom the same way that CSS

00:15:32,720 --> 00:15:41,180
does that cascade that we're used to or

00:15:36,680 --> 00:15:43,550
maybe not used to so what that means is

00:15:41,180 --> 00:15:46,910
that when we set columns to in example

00:15:43,550 --> 00:15:50,420
all of the children nodes in the Dom of

00:15:46,910 --> 00:15:51,860
example will have that value even if

00:15:50,420 --> 00:15:54,920
they are not nested in the style sheet

00:15:51,860 --> 00:15:57,260
and that means that we can now change a

00:15:54,920 --> 00:16:00,880
value at a media query and have that

00:15:57,260 --> 00:16:03,740
trickle down to everything at that size

00:16:00,880 --> 00:16:06,260
in the browser so that's a very

00:16:03,740 --> 00:16:07,610
different way that these work and really

00:16:06,260 --> 00:16:13,370
changes how we think about them and how

00:16:07,610 --> 00:16:16,910
we use them in order for them the by

00:16:13,370 --> 00:16:19,339
default they inherit everywhere if we

00:16:16,910 --> 00:16:22,520
put them in the root tag then I really

00:16:19,339 --> 00:16:24,260
mean everywhere everywhere that makes

00:16:22,520 --> 00:16:27,020
this color available throughout our

00:16:24,260 --> 00:16:29,180
entire document so that's something that

00:16:27,020 --> 00:16:34,459
we can do if we really don't want things

00:16:29,180 --> 00:16:37,430
to inherit we can set them to reset to

00:16:34,459 --> 00:16:40,070
their initial value on every property so

00:16:37,430 --> 00:16:42,350
this is a useful way to say certain

00:16:40,070 --> 00:16:46,700
things should not inherit let's reset

00:16:42,350 --> 00:16:48,529
them every time if you need that one of

00:16:46,700 --> 00:16:50,600
the things that I most love about them

00:16:48,529 --> 00:16:52,880
and have started using them for right

00:16:50,600 --> 00:16:55,399
away is that they make inline Styles

00:16:52,880 --> 00:16:59,000
totally safe there's always been a

00:16:55,399 --> 00:17:01,250
problem with inline Styles being too

00:16:59,000 --> 00:17:03,260
specific it's impossible to override an

00:17:01,250 --> 00:17:05,199
inline style if you need to but when

00:17:03,260 --> 00:17:07,670
you're just defining a variable inline

00:17:05,199 --> 00:17:11,179
you don't need to override it you can

00:17:07,670 --> 00:17:12,860
just ignore it so it's totally safe to

00:17:11,179 --> 00:17:16,250
set any variables you want to in your

00:17:12,860 --> 00:17:20,000
HTML which is a great way to pass data

00:17:16,250 --> 00:17:22,280
between JavaScript and CSS you can set

00:17:20,000 --> 00:17:24,260
the variable in the HTML it's totally

00:17:22,280 --> 00:17:27,260
safe CSS can ignore it when it needs to

00:17:24,260 --> 00:17:29,230
has access to it when it wants and

00:17:27,260 --> 00:17:34,700
you're still separating those concerns

00:17:29,230 --> 00:17:36,230
while communicating between them yeah I

00:17:34,700 --> 00:17:38,300
already showed you how to use them so I

00:17:36,230 --> 00:17:39,650
don't know what this slide is for so

00:17:38,300 --> 00:17:42,250
I'll just give you a moment with it

00:17:39,650 --> 00:17:49,030
while I have a drink

00:17:42,250 --> 00:17:56,110
think on that you know what about that

00:17:49,030 --> 00:17:59,380
fallback color it's a bit bright right

00:17:56,110 --> 00:18:00,940
so you can call it there or you can

00:17:59,380 --> 00:18:02,590
ignore it so that was the point of those

00:18:00,940 --> 00:18:05,530
than I just should have gone through my

00:18:02,590 --> 00:18:07,390
slides faster another thing that you can

00:18:05,530 --> 00:18:11,470
do that I've used it for a lot is if I

00:18:07,390 --> 00:18:15,370
don't want excessive nesting in my CSS

00:18:11,470 --> 00:18:18,400
if I don't want really specific long

00:18:15,370 --> 00:18:22,630
selector strings I can avoid it by

00:18:18,400 --> 00:18:24,970
changing a variable at the at the root

00:18:22,630 --> 00:18:27,039
string where I want it to change

00:18:24,970 --> 00:18:29,289
and then just grabbing that variable in

00:18:27,039 --> 00:18:30,580
the button so I can suddenly make

00:18:29,289 --> 00:18:33,100
buttons look different in different

00:18:30,580 --> 00:18:37,059
places without adding any specificity to

00:18:33,100 --> 00:18:39,539
my button selector I like that that's a

00:18:37,059 --> 00:18:42,659
really nice way to avoid increasing

00:18:39,539 --> 00:18:46,210
specificity when you don't want to

00:18:42,659 --> 00:18:49,020
another way to use it you can start to

00:18:46,210 --> 00:18:54,730
create defaults where they're missing

00:18:49,020 --> 00:18:57,039
and missing longhand so box-shadow for

00:18:54,730 --> 00:18:59,770
example only has the shorthand property

00:18:57,039 --> 00:19:02,020
if you wanted to change any one part of

00:18:59,770 --> 00:19:03,159
a box-shadow you would have to redefine

00:19:02,020 --> 00:19:06,789
the entire box-shadow

00:19:03,159 --> 00:19:08,799
but with variables we can set each

00:19:06,789 --> 00:19:10,240
property as a variable and then we have

00:19:08,799 --> 00:19:12,549
access to change that variable

00:19:10,240 --> 00:19:16,590
individually that's also really useful

00:19:12,549 --> 00:19:19,059
for things like transition transform

00:19:16,590 --> 00:19:23,320
that have different properties you want

00:19:19,059 --> 00:19:25,299
to transform and then a last way and

00:19:23,320 --> 00:19:28,929
this is less and less needed this auto

00:19:25,299 --> 00:19:31,360
prefixing but you can create mix-ins in

00:19:28,929 --> 00:19:34,900
a way if you have multiple properties

00:19:31,360 --> 00:19:35,860
that need the same value we can use them

00:19:34,900 --> 00:19:41,110
that way

00:19:35,860 --> 00:19:42,730
like we would use mix-ins in SAS but

00:19:41,110 --> 00:19:44,700
where I start to get excited is when we

00:19:42,730 --> 00:19:48,510
start combining them with calculations

00:19:44,700 --> 00:19:54,090
so now I can pass data in to CSS and

00:19:48,510 --> 00:19:56,760
manipulate it and return a new value so

00:19:54,090 --> 00:19:59,970
as a test the first thing I did was I

00:19:56,760 --> 00:20:04,890
rebuilt Susy entirely in CSS

00:19:59,970 --> 00:20:07,470
there's no sass involved here and it

00:20:04,890 --> 00:20:10,770
works in in fact the background images

00:20:07,470 --> 00:20:15,179
are also generated by CSS variables calc

00:20:10,770 --> 00:20:17,130
and a background gradient and you can

00:20:15,179 --> 00:20:20,549
see the full demo there if you go to the

00:20:17,130 --> 00:20:22,470
link and this is how it works

00:20:20,549 --> 00:20:26,340
I'm just setting the same global

00:20:22,470 --> 00:20:27,809
settings that Suzy has the columns the

00:20:26,340 --> 00:20:32,010
gutter the spread the container spread

00:20:27,809 --> 00:20:36,240
and then I have 50 of these functions or

00:20:32,010 --> 00:20:38,669
so the interesting thing about using CSS

00:20:36,240 --> 00:20:41,970
variables as functions is that they can

00:20:38,669 --> 00:20:46,110
only hold one value at a time so you can

00:20:41,970 --> 00:20:49,380
only have one calculation per element

00:20:46,110 --> 00:20:55,049
which is not particularly useful but it

00:20:49,380 --> 00:20:57,720
works so then in use using it this is

00:20:55,049 --> 00:20:58,649
all of the code for defining the final

00:20:57,720 --> 00:21:00,899
layout

00:20:58,649 --> 00:21:04,169
I just set how many columns there are

00:21:00,899 --> 00:21:05,880
and then say how many I want to span and

00:21:04,169 --> 00:21:08,909
I can change how many columns are

00:21:05,880 --> 00:21:12,059
available for nested context and all of

00:21:08,909 --> 00:21:16,850
that works very smoothly so and then the

00:21:12,059 --> 00:21:19,830
background images also uses that and

00:21:16,850 --> 00:21:23,370
calculates out the background it don't

00:21:19,830 --> 00:21:26,250
use it really like this is overkill it's

00:21:23,370 --> 00:21:29,490
totally not worthwhile but that concept

00:21:26,250 --> 00:21:34,200
is useful if you do want a grid system

00:21:29,490 --> 00:21:36,630
in your HTML passing in columns and

00:21:34,200 --> 00:21:40,200
gutters and then defining how they're

00:21:36,630 --> 00:21:41,640
used in the CSS that's a that's a good

00:21:40,200 --> 00:21:43,590
way to go the reason you shouldn't use

00:21:41,640 --> 00:21:45,840
mine is because I tried to solve all

00:21:43,590 --> 00:21:47,279
layout problems at once and you don't

00:21:45,840 --> 00:21:51,559
need to solve all they are problems at

00:21:47,279 --> 00:21:51,559
once you have your one layout problem

00:21:51,679 --> 00:21:56,549
another thing that I just started

00:21:53,520 --> 00:21:59,580
playing with and this is there's a

00:21:56,549 --> 00:22:03,649
article on CSS tricks that inspired some

00:21:59,580 --> 00:22:07,230
of this is manipulating individual

00:22:03,649 --> 00:22:08,250
values of the HSL function as variables

00:22:07,230 --> 00:22:11,190
and then

00:22:08,250 --> 00:22:13,740
getting to change them individually for

00:22:11,190 --> 00:22:15,390
example creating a darken and a

00:22:13,740 --> 00:22:18,510
compliment

00:22:15,390 --> 00:22:21,000
and being able to use those where I want

00:22:18,510 --> 00:22:24,810
so I can start to create a theme based

00:22:21,000 --> 00:22:26,970
on CSS variables so the fun thing that

00:22:24,810 --> 00:22:30,150
they were showing in the article is the

00:22:26,970 --> 00:22:33,600
way you can use clamped values so this

00:22:30,150 --> 00:22:38,480
would be to say the the color wheel

00:22:33,600 --> 00:22:41,520
no the lightness scale from 0 to 100

00:22:38,480 --> 00:22:44,760
will clamp at 0 and 100 so if you go

00:22:41,520 --> 00:22:47,010
under 0 it will stay at 0 if you go over

00:22:44,760 --> 00:22:48,720
100 it will stay at 100 so you can use

00:22:47,010 --> 00:22:50,910
that to toggle back and forth between a

00:22:48,720 --> 00:22:53,600
black and a white by multiplying with a

00:22:50,910 --> 00:22:59,070
negative value or with a positive value

00:22:53,600 --> 00:23:01,410
you can do something similar with the

00:22:59,070 --> 00:23:03,960
color wheel if you go over 360 you're

00:23:01,410 --> 00:23:08,790
still on the wheel so you can simply add

00:23:03,960 --> 00:23:10,170
to get the complement so here's a little

00:23:08,790 --> 00:23:13,590
tool that I built that just lets me

00:23:10,170 --> 00:23:16,530
adjust so the threshold is where we're

00:23:13,590 --> 00:23:21,150
doing the toggle what lightness do we

00:23:16,530 --> 00:23:25,740
want to switch our main color at and

00:23:21,150 --> 00:23:29,010
then as we change color when we go past

00:23:25,740 --> 00:23:32,310
the threshold we change so this is a

00:23:29,010 --> 00:23:34,500
rudimentary way of doing color ratio

00:23:32,310 --> 00:23:37,850
accessibility it fails a little bit

00:23:34,500 --> 00:23:41,730
because you'll notice that if we have a

00:23:37,850 --> 00:23:43,350
blue and a yellow say there are

00:23:41,730 --> 00:23:47,040
different times when they ought to

00:23:43,350 --> 00:23:48,120
switch so it's not perfect because we

00:23:47,040 --> 00:23:52,980
don't actually see color

00:23:48,120 --> 00:23:55,890
purely by lightness so again probably

00:23:52,980 --> 00:23:57,420
not useful right away but the concept is

00:23:55,890 --> 00:24:00,480
fun to play with we can now start

00:23:57,420 --> 00:24:02,820
creating themes purely in our CSS

00:24:00,480 --> 00:24:06,030
passing in one color and generating the

00:24:02,820 --> 00:24:08,340
other colors that we need through

00:24:06,030 --> 00:24:11,610
JavaScript I here this is a JavaScript

00:24:08,340 --> 00:24:15,510
conference so I threw in this slide you

00:24:11,610 --> 00:24:17,400
can access and change the custom

00:24:15,510 --> 00:24:20,040
properties like you would access and

00:24:17,400 --> 00:24:20,980
change any other property in CSS there's

00:24:20,040 --> 00:24:23,980
a lot more come

00:24:20,980 --> 00:24:29,260
sorry that's all that I know I've only

00:24:23,980 --> 00:24:30,940
been introduced and actually I should

00:24:29,260 --> 00:24:33,520
jump to this one first there's a lot

00:24:30,940 --> 00:24:39,429
more coming in terms of JavaScript mean

00:24:33,520 --> 00:24:41,980
manipulation of CSS variables right now

00:24:39,429 --> 00:24:43,360
it's all behind a flag in Chrome but you

00:24:41,980 --> 00:24:46,360
can start playing with it it's called

00:24:43,360 --> 00:24:52,390
Houdini because it helps you escape from

00:24:46,360 --> 00:24:55,210
the confines of CSS something so there's

00:24:52,390 --> 00:25:00,090
a few issues when you start playing a

00:24:55,210 --> 00:25:01,900
few gotchas types aren't defined

00:25:00,090 --> 00:25:05,169
currently and that's part of what

00:25:01,900 --> 00:25:08,049
Houdini is gonna help us solve so when I

00:25:05,169 --> 00:25:09,610
put in a string or a color CSS doesn't

00:25:08,049 --> 00:25:12,669
yet know the browser doesn't yet know

00:25:09,610 --> 00:25:15,100
what it is so it has trouble animating

00:25:12,669 --> 00:25:18,090
it so at this point you have to animate

00:25:15,100 --> 00:25:21,220
the property that it's put on not the

00:25:18,090 --> 00:25:23,080
CSS variable itself because the browser

00:25:21,220 --> 00:25:27,270
doesn't know how to animate an unknown

00:25:23,080 --> 00:25:30,610
type they don't work inside of the URL

00:25:27,270 --> 00:25:32,710
function which is too bad I've had

00:25:30,610 --> 00:25:36,700
problems with that several times and

00:25:32,710 --> 00:25:39,150
then another thing you'll notice the VAR

00:25:36,700 --> 00:25:42,309
size M I can't

00:25:39,150 --> 00:25:47,049
concatenate things like that so I have

00:25:42,309 --> 00:25:51,400
to use instead calc var size times 1/m

00:25:47,049 --> 00:25:53,590
the browser can do that math adding an M

00:25:51,400 --> 00:25:56,080
unit that way but it can't do string

00:25:53,590 --> 00:25:59,260
concatenation so that's unfortunate

00:25:56,080 --> 00:26:01,600
hopefully we'll get that eventually part

00:25:59,260 --> 00:26:04,030
of what we're gonna get from Houdini is

00:26:01,600 --> 00:26:06,460
this ability to register properties and

00:26:04,030 --> 00:26:08,799
define their syntax define their type

00:26:06,460 --> 00:26:10,510
and that will start to allow the browser

00:26:08,799 --> 00:26:14,679
to do some of these things that we can't

00:26:10,510 --> 00:26:18,070
yet do so if I were tab I would show you

00:26:14,679 --> 00:26:20,140
a demo of that but I'm not you can learn

00:26:18,070 --> 00:26:22,150
a lot more from leav rule on this she's

00:26:20,140 --> 00:26:24,610
done some amazing talks that just dive

00:26:22,150 --> 00:26:25,750
into variables and everything you can do

00:26:24,610 --> 00:26:27,730
with them and if you've never seen her

00:26:25,750 --> 00:26:33,140
talk her talks are amazing she live

00:26:27,730 --> 00:26:36,540
codes the whole thing and I can't

00:26:33,140 --> 00:26:38,370
so I'm gonna start to put that together

00:26:36,540 --> 00:26:41,910
with CSS grid instead of going more into

00:26:38,370 --> 00:26:44,370
depth with that CSS grid was fun because

00:26:41,910 --> 00:26:44,850
it suddenly landed in three browsers all

00:26:44,370 --> 00:26:48,960
at once

00:26:44,850 --> 00:26:50,910
in March of 2017 it was one day not

00:26:48,960 --> 00:26:53,850
usable and the next day I woke up and

00:26:50,910 --> 00:26:58,020
could use grid and production which was

00:26:53,850 --> 00:27:01,400
fun we were in the future now or more

00:26:58,020 --> 00:27:01,400
relatable we're in the future now that

00:27:01,460 --> 00:27:10,410
boat is awesome whoever built that there

00:27:06,150 --> 00:27:12,780
is seriously nothing like it it so.when

00:27:10,410 --> 00:27:14,850
CSS grid landed I stopped getting

00:27:12,780 --> 00:27:17,040
invited to conferences because I was

00:27:14,850 --> 00:27:20,580
known for Suzy and Suzy was dead that

00:27:17,040 --> 00:27:23,520
day like that was dead CSS grid is

00:27:20,580 --> 00:27:28,440
totally unique it can do way more than

00:27:23,520 --> 00:27:32,880
any sass a library that there is if any

00:27:28,440 --> 00:27:36,120
sass library claims or or what's that

00:27:32,880 --> 00:27:37,679
other one post CSS if any of them claim

00:27:36,120 --> 00:27:40,380
that they can do what CSS grid does

00:27:37,679 --> 00:27:43,350
they're lying to you don't believe them

00:27:40,380 --> 00:27:45,000
it's really unique because all of the

00:27:43,350 --> 00:27:48,300
calculations are run by the browser it

00:27:45,000 --> 00:27:51,150
has access to the Dom it can do mixed

00:27:48,300 --> 00:27:53,100
units in a way that nothing else can the

00:27:51,150 --> 00:27:55,260
spec is very complex and I've seen lots

00:27:53,100 --> 00:27:57,990
of talks on grid go into detail on the

00:27:55,260 --> 00:28:00,809
spec and people are scared away getting

00:27:57,990 --> 00:28:02,220
started doesn't have to be reading the

00:28:00,809 --> 00:28:05,190
whole spec there's a lot of ways to get

00:28:02,220 --> 00:28:07,260
started very quickly it basically looks

00:28:05,190 --> 00:28:10,530
like this the grid is defined on the

00:28:07,260 --> 00:28:14,040
container so you can say display grid

00:28:10,530 --> 00:28:16,230
it's just a display property you can

00:28:14,040 --> 00:28:21,030
define columns and rows I only showed

00:28:16,230 --> 00:28:23,340
columns there but our normal historic

00:28:21,030 --> 00:28:26,370
twelve column grid we can create with

00:28:23,340 --> 00:28:29,300
that line of code repeat twelve one

00:28:26,370 --> 00:28:32,330
fraction and then we can put in gutters

00:28:29,300 --> 00:28:35,190
without having to do any math of our own

00:28:32,330 --> 00:28:39,059
optionally so that was defining it on

00:28:35,190 --> 00:28:42,690
the container optionally we can pass

00:28:39,059 --> 00:28:45,770
control of sizing on the grid back to

00:28:42,690 --> 00:28:49,400
our elements using the auto keyword

00:28:45,770 --> 00:28:50,210
and so what Auto does is it just returns

00:28:49,400 --> 00:28:51,980
to the flow

00:28:50,210 --> 00:28:53,480
what would this element do naturally on

00:28:51,980 --> 00:28:56,470
its own and we looked at the flow

00:28:53,480 --> 00:29:01,220
earlier on the inline axis and on the

00:28:56,470 --> 00:29:05,570
block axis if it's confusing

00:29:01,220 --> 00:29:08,360
there are several different units in CSS

00:29:05,570 --> 00:29:11,270
now that all have to do with percentages

00:29:08,360 --> 00:29:13,970
of the space this is your cheat sheet

00:29:11,270 --> 00:29:16,010
for them so a percent is relative to the

00:29:13,970 --> 00:29:18,260
parent with actually that's available

00:29:16,010 --> 00:29:22,010
space in the parent so that wouldn't

00:29:18,260 --> 00:29:26,030
include padding the VW unit is relative

00:29:22,010 --> 00:29:29,570
to the entire viewpoint viewport so 100

00:29:26,030 --> 00:29:33,080
VW is the entire width of the window and

00:29:29,570 --> 00:29:37,400
fraction is the new one added in CSS

00:29:33,080 --> 00:29:41,180
grid and what it means is how to share

00:29:37,400 --> 00:29:43,520
remaining space so a fraction unit takes

00:29:41,180 --> 00:29:45,920
up a percentage of remaining space

00:29:43,520 --> 00:29:48,890
that's similar if you've used flex box

00:29:45,920 --> 00:29:51,500
to the Flex grow in Flex shrink which

00:29:48,890 --> 00:29:53,960
have no units it's exactly the same

00:29:51,500 --> 00:29:56,900
context how fast should this shrink or

00:29:53,960 --> 00:30:00,230
grow to give up or take up remaining

00:29:56,900 --> 00:30:02,690
space one tricky thing about the

00:30:00,230 --> 00:30:05,870
fraction unit if you define something as

00:30:02,690 --> 00:30:09,380
one fraction it automatically assumes

00:30:05,870 --> 00:30:12,860
you mean min max Auto one fraction so it

00:30:09,380 --> 00:30:16,520
will only grow and not shrink because

00:30:12,860 --> 00:30:18,170
auto is the minimum and then it's

00:30:16,520 --> 00:30:20,570
allowed to grow to one fraction so if

00:30:18,170 --> 00:30:23,180
you actually want something to shrink

00:30:20,570 --> 00:30:25,880
and grow you have to set a new minimum

00:30:23,180 --> 00:30:28,670
so I have quite a few of these in my

00:30:25,880 --> 00:30:31,880
code min max zero one fraction to allow

00:30:28,670 --> 00:30:34,400
something to shrink completely grids

00:30:31,880 --> 00:30:36,530
wants you to find a grid you get a

00:30:34,400 --> 00:30:39,080
layout like this you have your grid

00:30:36,530 --> 00:30:41,150
lines and they're one indexed and then

00:30:39,080 --> 00:30:43,490
they're also negative one indexed so you

00:30:41,150 --> 00:30:47,570
can access them from the front or from

00:30:43,490 --> 00:30:49,370
the back and you have this sort of

00:30:47,570 --> 00:30:52,700
single source of truth that you can

00:30:49,370 --> 00:30:55,280
create this is starting to build out

00:30:52,700 --> 00:30:57,320
more complex defining different parts of

00:30:55,280 --> 00:30:59,520
how we're going to relate to this grid

00:30:57,320 --> 00:31:03,780
but we can basically draw this

00:30:59,520 --> 00:31:07,350
ASCII art of our layout and then say the

00:31:03,780 --> 00:31:12,600
header takes up both columns and is

00:31:07,350 --> 00:31:14,490
sized Auto for its vertical and then nav

00:31:12,600 --> 00:31:15,930
is on one side main and is on the other

00:31:14,490 --> 00:31:19,160
side and then the footer goes across

00:31:15,930 --> 00:31:23,760
again and then we define the column

00:31:19,160 --> 00:31:28,500
widths at the bottom and then for the

00:31:23,760 --> 00:31:31,500
layout similar to the Suzy demonstration

00:31:28,500 --> 00:31:32,940
we just pass in the name and it

00:31:31,500 --> 00:31:36,480
automatically goes there and actually

00:31:32,940 --> 00:31:38,970
this ignores the order of the elements

00:31:36,480 --> 00:31:41,970
in the Dom so no matter what order these

00:31:38,970 --> 00:31:44,160
are in the Dom we can pass them to the

00:31:41,970 --> 00:31:47,250
right area of the grid so there's a lot

00:31:44,160 --> 00:31:50,790
of power there be careful with mixing up

00:31:47,250 --> 00:31:52,950
code order Dom order and visual order

00:31:50,790 --> 00:31:54,870
but there's good reasons for it

00:31:52,950 --> 00:31:57,810
sometimes so right away with those

00:31:54,870 --> 00:32:00,420
couple lines of code we have a full

00:31:57,810 --> 00:32:02,070
standard layout and that's it and really

00:32:00,420 --> 00:32:05,520
CSS developers are all going to get

00:32:02,070 --> 00:32:12,120
fired because this is gonna be just too

00:32:05,520 --> 00:32:16,250
easy so Jen Simmons who's been doing

00:32:12,120 --> 00:32:18,690
lots of the work on the grid spec and on

00:32:16,250 --> 00:32:20,790
informing people about it

00:32:18,690 --> 00:32:23,910
has sorted call this intrinsic web

00:32:20,790 --> 00:32:26,700
design the next step after responsive so

00:32:23,910 --> 00:32:29,060
instead of just being fluid it's both

00:32:26,700 --> 00:32:32,160
fluid and fixed we can mix the two now

00:32:29,060 --> 00:32:35,880
they can live together we dealing with

00:32:32,160 --> 00:32:40,320
stages of squishiness so something can

00:32:35,880 --> 00:32:43,080
be fixed or it can use fractions to take

00:32:40,320 --> 00:32:45,780
up remaining space to be somewhat fluid

00:32:43,080 --> 00:32:49,920
we can use min max to let something be

00:32:45,780 --> 00:32:51,840
fluid until it is fixed and we can use

00:32:49,920 --> 00:32:54,540
auto to return to the flow so we've got

00:32:51,840 --> 00:32:57,510
all these different stages of how we're

00:32:54,540 --> 00:32:59,460
handling squishiness in our elements we

00:32:57,510 --> 00:33:03,090
finally have truly two-dimensional

00:32:59,460 --> 00:33:07,680
layouts we get columns and rows which is

00:33:03,090 --> 00:33:11,220
totally new in CSS revolutionary to

00:33:07,680 --> 00:33:12,899
dimensions and we can start to mix these

00:33:11,220 --> 00:33:15,839
things there's no reason that

00:33:12,899 --> 00:33:17,779
floats are gone forever I've already

00:33:15,839 --> 00:33:20,339
heard some people talking about floats

00:33:17,779 --> 00:33:22,769
like we talked about tables for a little

00:33:20,339 --> 00:33:24,779
where a teacher was refusing to allow

00:33:22,769 --> 00:33:27,299
their students to float anything that's

00:33:24,779 --> 00:33:29,279
absurd floats are still useful for what

00:33:27,299 --> 00:33:32,339
they were invented for which is floating

00:33:29,279 --> 00:33:35,549
images in text they have a narrower use

00:33:32,339 --> 00:33:36,899
case they're not gone but we can start

00:33:35,549 --> 00:33:39,779
to mix these things so when we want

00:33:36,899 --> 00:33:41,629
things to align and flow in one

00:33:39,779 --> 00:33:43,559
dimension flexbox is better for that

00:33:41,629 --> 00:33:46,710
when we want to go into two dimensions

00:33:43,559 --> 00:33:49,349
grid works great sometimes I go back and

00:33:46,710 --> 00:33:52,919
forth on those between whether I'm want

00:33:49,349 --> 00:33:54,389
to define the spacing from the child or

00:33:52,919 --> 00:33:56,070
from the parent so there's different

00:33:54,389 --> 00:34:00,089
reasons to use them and we can start to

00:33:56,070 --> 00:34:02,339
nest those and get different outcomes we

00:34:00,089 --> 00:34:04,849
can expand and contract our content in

00:34:02,339 --> 00:34:08,520
new ways we can change justification

00:34:04,849 --> 00:34:11,579
very simply we can change how things

00:34:08,520 --> 00:34:14,940
wrap for the flow we can start to flex

00:34:11,579 --> 00:34:16,490
things using the fraction unit etc and

00:34:14,940 --> 00:34:19,980
then media queries are only needed

00:34:16,490 --> 00:34:22,470
sometimes because we get things like

00:34:19,980 --> 00:34:24,950
autofit and autofit that figure out for

00:34:22,470 --> 00:34:29,129
us how many columns we have space for

00:34:24,950 --> 00:34:31,669
and then it just fills them in which can

00:34:29,129 --> 00:34:33,240
be really useful for something like

00:34:31,669 --> 00:34:39,149
image gallery

00:34:33,240 --> 00:34:42,149
or masonry like layout but I want to put

00:34:39,149 --> 00:34:44,879
all these things together and we started

00:34:42,149 --> 00:34:48,079
playing with this right away on a client

00:34:44,879 --> 00:34:52,730
project last year being able to pass in

00:34:48,079 --> 00:34:55,679
values from JavaScript just pure data

00:34:52,730 --> 00:34:57,990
gets passed in we're building a

00:34:55,679 --> 00:35:01,140
scheduling app we want to know when an

00:34:57,990 --> 00:35:04,400
event starts and how long it is so we

00:35:01,140 --> 00:35:07,799
passed that in as CSS variables and

00:35:04,400 --> 00:35:11,430
using calc and grid we manipulate that

00:35:07,799 --> 00:35:13,619
data and we can say we have this many

00:35:11,430 --> 00:35:15,180
minutes in a day let's create a column

00:35:13,619 --> 00:35:17,789
on the grid for every minute of the day

00:35:15,180 --> 00:35:21,000
and then we're just passing in a start

00:35:17,789 --> 00:35:26,310
and an end and we use those as grid

00:35:21,000 --> 00:35:29,340
lines to tell every session on this

00:35:26,310 --> 00:35:32,790
schedule where to start an end so we got

00:35:29,340 --> 00:35:36,120
a layout in about 10 minutes using just

00:35:32,790 --> 00:35:41,780
some CSS variables and some grid and it

00:35:36,120 --> 00:35:45,750
builds our schedule for us which I love

00:35:41,780 --> 00:35:46,740
the limitation here is I don't remember

00:35:45,750 --> 00:35:50,040
the exact number

00:35:46,740 --> 00:35:51,720
there's only we were able to do 16 hours

00:35:50,040 --> 00:35:54,900
and then you hit the limit of how many

00:35:51,720 --> 00:35:57,630
columns a grid can have so if you need a

00:35:54,900 --> 00:36:01,260
24 hour you're gonna have to step back a

00:35:57,630 --> 00:36:05,240
level and do two minutes per column but

00:36:01,260 --> 00:36:07,410
you can get to 16 hours worth of grid

00:36:05,240 --> 00:36:11,400
then I've played with this with bar

00:36:07,410 --> 00:36:13,320
charts this is just the HTML for a bar

00:36:11,400 --> 00:36:18,000
chart you could also use tables for this

00:36:13,320 --> 00:36:20,430
I decided on definition lists but just

00:36:18,000 --> 00:36:23,250
some simple semantic markup and I pass

00:36:20,430 --> 00:36:26,660
in the value of 45 value 100 and I can

00:36:23,250 --> 00:36:32,550
even change the scale up top in my chart

00:36:26,660 --> 00:36:38,130
and then this is the math I take each

00:36:32,550 --> 00:36:41,730
chart starts at the scale plus 1 because

00:36:38,130 --> 00:36:45,470
to handle the indexing minus the value

00:36:41,730 --> 00:36:48,930
of where we're wanting to start and

00:36:45,470 --> 00:36:50,910
again I played then with how it adjusts

00:36:48,930 --> 00:36:54,780
color based on the value that's passed

00:36:50,910 --> 00:36:57,060
in and using just those variables I have

00:36:54,780 --> 00:36:59,790
this completely fluid grid and I'm

00:36:57,060 --> 00:37:04,550
actually going to inspect it here so

00:36:59,790 --> 00:37:04,550
that I can let's see where's this scale

00:37:04,790 --> 00:37:12,930
let's change that to 200 there we go and

00:37:09,500 --> 00:37:14,370
everything adjusts so I don't know why

00:37:12,930 --> 00:37:20,430
you need to change the scale on your

00:37:14,370 --> 00:37:23,070
chart but you can and I love this idea

00:37:20,430 --> 00:37:27,450
of being able to manipulate raw data in

00:37:23,070 --> 00:37:31,290
CSS so that JavaScript only has to pass

00:37:27,450 --> 00:37:33,510
us what is known and then the Styles can

00:37:31,290 --> 00:37:35,550
decide how actually to use that data to

00:37:33,510 --> 00:37:38,299
generate something next I want to play

00:37:35,550 --> 00:37:40,759
with see if I can do line graphs and

00:37:38,299 --> 00:37:42,949
plot charts I think plot charts will be

00:37:40,759 --> 00:37:47,059
easy in line graphs will be much more

00:37:42,949 --> 00:37:48,650
difficult but have fun with that start

00:37:47,059 --> 00:37:51,259
playing with those things here's another

00:37:48,650 --> 00:37:54,979
one that I did somebody presented some

00:37:51,259 --> 00:38:02,619
generated art they had done so I redid

00:37:54,979 --> 00:38:08,239
it in view and I can start adding

00:38:02,619 --> 00:38:10,429
invaders or removing invaders and I can

00:38:08,239 --> 00:38:13,779
click on them to change them and I can

00:38:10,429 --> 00:38:17,920
shuffle them and then I can kick ass and

00:38:13,779 --> 00:38:27,859
like drive around shooting them yes yeah

00:38:17,920 --> 00:38:30,499
give them so that's important if you

00:38:27,859 --> 00:38:33,979
want to dig more into grids grid by

00:38:30,499 --> 00:38:37,880
example comm is a great place to go this

00:38:33,979 --> 00:38:40,939
is Rachel Andrew site it has not only

00:38:37,880 --> 00:38:46,130
lessons on the different aspects of grid

00:38:40,939 --> 00:38:49,369
but also common layouts built in grid

00:38:46,130 --> 00:38:51,259
with fallbacks already built so if you

00:38:49,369 --> 00:38:53,420
have one of the common layout needs or

00:38:51,259 --> 00:38:54,920
something similar to it you can copy and

00:38:53,420 --> 00:38:56,859
paste her code

00:38:54,920 --> 00:39:01,759
and already have your layout written

00:38:56,859 --> 00:39:04,039
also Jenn Simmons has youtube.com slash

00:39:01,759 --> 00:39:06,769
layout land where she does various

00:39:04,039 --> 00:39:10,119
YouTube videos going into much more

00:39:06,769 --> 00:39:12,829
detail she also has Jenn Simmons labs

00:39:10,119 --> 00:39:16,699
where you can see lots of experiments

00:39:12,829 --> 00:39:23,239
her doing various art sites playing with

00:39:16,699 --> 00:39:28,509
what grid can do so this is I just want

00:39:23,239 --> 00:39:31,660
to remind you CSS is in fact awesome

00:39:28,509 --> 00:39:31,660
thank you

00:39:33,740 --> 00:39:35,800

YouTube URL: https://www.youtube.com/watch?v=uwgBz748t-g


