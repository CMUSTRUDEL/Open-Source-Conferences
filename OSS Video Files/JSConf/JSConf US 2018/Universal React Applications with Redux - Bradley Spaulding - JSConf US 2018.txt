Title: Universal React Applications with Redux - Bradley Spaulding - JSConf US 2018
Publication date: 2018-11-14
Playlist: JSConf US 2018
Description: 
	
Captions: 
	00:00:00,320 --> 00:00:03,840
[Music]

00:00:02,070 --> 00:00:05,660
[Applause]

00:00:03,840 --> 00:00:07,410
[Music]

00:00:05,660 --> 00:00:09,280
[Applause]

00:00:07,410 --> 00:00:11,020
[Music]

00:00:09,280 --> 00:00:12,780
[Applause]

00:00:11,020 --> 00:00:15,920
[Music]

00:00:12,780 --> 00:00:15,920
[Applause]

00:00:16,870 --> 00:00:24,050
[Music]

00:00:25,949 --> 00:00:31,329
all right thank you very much

00:00:29,380 --> 00:00:33,550
where should I put this I'm gonna put it

00:00:31,329 --> 00:00:34,629
up here y'all can check that out all

00:00:33,550 --> 00:00:37,180
right so welcome to my talk

00:00:34,629 --> 00:00:40,930
this is universal react applications

00:00:37,180 --> 00:00:43,270
with redux which is the most buzzword II

00:00:40,930 --> 00:00:46,690
title I can think of in the 5 seconds I

00:00:43,270 --> 00:00:49,890
was trying to sign up for a talk what

00:00:46,690 --> 00:00:55,570
happened oh we went to sleep

00:00:49,890 --> 00:00:59,230
are we back yet alright we're back I'll

00:00:55,570 --> 00:01:01,870
try to remember to poke that thing okay

00:00:59,230 --> 00:01:04,089
so by way of introduction my name is

00:01:01,870 --> 00:01:06,490
Brad I build things with react and redux

00:01:04,089 --> 00:01:09,570
at spread fast which is based in Austin

00:01:06,490 --> 00:01:13,030
Texas anyone from Austin shout out

00:01:09,570 --> 00:01:17,110
excellent yes it's too hot there though

00:01:13,030 --> 00:01:19,479
so but good on you my first passion is

00:01:17,110 --> 00:01:20,799
actually music that's the most

00:01:19,479 --> 00:01:23,229
embarrassing photo I've ever shown this

00:01:20,799 --> 00:01:24,490
many people you can't really see it but

00:01:23,229 --> 00:01:26,220
that is a true mullet

00:01:24,490 --> 00:01:28,090
there there's a little bit you can see

00:01:26,220 --> 00:01:30,240
and I obviously know what I'm doing

00:01:28,090 --> 00:01:32,590
because the guitar is upside down I

00:01:30,240 --> 00:01:34,000
promise you I know more now so if you're

00:01:32,590 --> 00:01:37,000
into like guitar shredding videos

00:01:34,000 --> 00:01:41,470
there's an Instagram shameless plug and

00:01:37,000 --> 00:01:44,680
I'm also recently a dad this is my son

00:01:41,470 --> 00:01:48,189
Remington thank you

00:01:44,680 --> 00:01:52,570
as of July 1st so if my talk seems

00:01:48,189 --> 00:01:54,580
underprepared it's his fault so I just

00:01:52,570 --> 00:01:57,220
want to start out by saying I love Redux

00:01:54,580 --> 00:01:58,780
how many of you use Redux at work I'm

00:01:57,220 --> 00:02:00,970
assuming most of you because you came to

00:01:58,780 --> 00:02:02,140
this talk hopefully but I just want to

00:02:00,970 --> 00:02:04,030
say that because I feel like it gets a

00:02:02,140 --> 00:02:06,329
lot of crap and I think it's awesome and

00:02:04,030 --> 00:02:12,849
it has made my day job a lot easier

00:02:06,329 --> 00:02:13,480
so why this talk I saw this tweet when

00:02:12,849 --> 00:02:16,829
did this happen

00:02:13,480 --> 00:02:19,090
I don't know a little bit ago mid-july

00:02:16,829 --> 00:02:20,860
was asking is anyone doing this is

00:02:19,090 --> 00:02:22,510
anyone using Redux on the web and

00:02:20,860 --> 00:02:25,360
sharing their Redux code with react

00:02:22,510 --> 00:02:28,300
native project but not sharing you

00:02:25,360 --> 00:02:29,770
and we've been doing this for years and

00:02:28,300 --> 00:02:31,690
I thought is this interesting for people

00:02:29,770 --> 00:02:33,580
to know maybe actually give an

00:02:31,690 --> 00:02:34,570
experience report and just talk about

00:02:33,580 --> 00:02:37,450
some of the challenges and what works

00:02:34,570 --> 00:02:39,190
well and what doesn't so this talk might

00:02:37,450 --> 00:02:40,810
be interesting to you if you have a

00:02:39,190 --> 00:02:42,310
Redux app and you're looking about

00:02:40,810 --> 00:02:44,740
thinking about making a mobile app

00:02:42,310 --> 00:02:46,780
you're looking at react native maybe

00:02:44,740 --> 00:02:48,010
you're just curious about mobile or

00:02:46,780 --> 00:02:50,170
maybe for some other reason you're

00:02:48,010 --> 00:02:51,910
looking to recompose your Redux

00:02:50,170 --> 00:02:56,410
applications together into other

00:02:51,910 --> 00:02:58,030
applications so this is kind of what's

00:02:56,410 --> 00:02:59,380
going to be important is to understand

00:02:58,030 --> 00:03:00,880
the decisions that we've made is to

00:02:59,380 --> 00:03:02,800
understand the organizational structure

00:03:00,880 --> 00:03:05,170
so for us our org kind of looks like

00:03:02,800 --> 00:03:07,300
this we have many different web apps

00:03:05,170 --> 00:03:10,000
that are all standardized on react and

00:03:07,300 --> 00:03:12,120
redux and there's a lot of different

00:03:10,000 --> 00:03:15,100
teams and they're basically independent

00:03:12,120 --> 00:03:17,380
we have to or in the past we've had two

00:03:15,100 --> 00:03:19,620
mobile developers a native iOS developer

00:03:17,380 --> 00:03:21,760
and a native Android developer and they

00:03:19,620 --> 00:03:24,610
try to keep up you can see they're very

00:03:21,760 --> 00:03:26,530
worried about keeping up with features

00:03:24,610 --> 00:03:29,500
that are being deployed on the web apps

00:03:26,530 --> 00:03:32,140
and so what we've done is added a few

00:03:29,500 --> 00:03:34,720
people like myself who are comfortable

00:03:32,140 --> 00:03:37,450
with JavaScript also mildly comfortable

00:03:34,720 --> 00:03:39,640
with doing native stuff and also told

00:03:37,450 --> 00:03:41,170
the native developers they will be

00:03:39,640 --> 00:03:45,160
writing JavaScript which you can see

00:03:41,170 --> 00:03:49,540
they're super excited about so how does

00:03:45,160 --> 00:03:51,700
this work here's an example here's the

00:03:49,540 --> 00:03:53,680
web app we're using react and redux that

00:03:51,700 --> 00:03:55,360
stuff goes through web pack there's a

00:03:53,680 --> 00:03:57,850
bundle that gets deployed perfect you

00:03:55,360 --> 00:04:01,840
guys know that part what we chose to do

00:03:57,850 --> 00:04:03,880
is I'll go in and drop a rollup config

00:04:01,840 --> 00:04:05,560
in each of those repos and make a

00:04:03,880 --> 00:04:07,870
separate bundle that's just the stuff

00:04:05,560 --> 00:04:09,190
that we want to consume so we'll see

00:04:07,870 --> 00:04:11,770
what's in that bundle is just your your

00:04:09,190 --> 00:04:13,510
reducers your actions your selectors and

00:04:11,770 --> 00:04:19,359
there's an asterisk which we'll talk

00:04:13,510 --> 00:04:22,240
about later so how to make a bundle it

00:04:19,359 --> 00:04:25,150
looks something like this you create a

00:04:22,240 --> 00:04:27,850
new entry point and then just import

00:04:25,150 --> 00:04:29,440
just the things that you need so here

00:04:27,850 --> 00:04:31,210
we're importing everything from this

00:04:29,440 --> 00:04:32,650
widget reducer and we're kind of giving

00:04:31,210 --> 00:04:34,180
ourselves some kind of standard

00:04:32,650 --> 00:04:35,770
structure for this package is going to

00:04:34,180 --> 00:04:38,020
export reducers and actions and

00:04:35,770 --> 00:04:39,580
selectors you can use whatever

00:04:38,020 --> 00:04:44,229
format organization works for you this

00:04:39,580 --> 00:04:46,419
is just what we do and you will not want

00:04:44,229 --> 00:04:47,949
to import everything there's going to be

00:04:46,419 --> 00:04:50,550
stuff that's web specific like your

00:04:47,949 --> 00:04:53,889
router reducer if you're doing that

00:04:50,550 --> 00:04:57,460
things that are web specific that you

00:04:53,889 --> 00:04:59,530
will not want to import so I want to

00:04:57,460 --> 00:05:01,960
take a second and talk about why you

00:04:59,530 --> 00:05:04,539
should bundle or why do that because

00:05:01,960 --> 00:05:06,729
it's not actually the standard in react

00:05:04,539 --> 00:05:08,560
native applications to bundle your

00:05:06,729 --> 00:05:12,880
JavaScript most react native libraries

00:05:08,560 --> 00:05:15,370
just ship JavaScript source why would

00:05:12,880 --> 00:05:18,610
you do that that sounds insane it kind

00:05:15,370 --> 00:05:20,860
of is but the reasons we chose to do a

00:05:18,610 --> 00:05:23,380
bundle is because hey it provides us a

00:05:20,860 --> 00:05:27,190
chance to catch things at compile time

00:05:23,380 --> 00:05:29,650
so these are things like there was one

00:05:27,190 --> 00:05:32,710
project that had a selector that was

00:05:29,650 --> 00:05:34,300
returning SPG's based on some state

00:05:32,710 --> 00:05:36,490
that's obviously not something we can

00:05:34,300 --> 00:05:38,830
use on mobile so that had to get

00:05:36,490 --> 00:05:40,449
reflected out into the component and so

00:05:38,830 --> 00:05:41,590
this you have a chance now to catch

00:05:40,449 --> 00:05:43,240
things like that that aren't going to

00:05:41,590 --> 00:05:45,699
work on mobile at compile time

00:05:43,240 --> 00:05:48,880
the second reason which is really the

00:05:45,699 --> 00:05:52,000
bigger reason is that a single point of

00:05:48,880 --> 00:05:54,849
entry provides you some encapsulation so

00:05:52,000 --> 00:05:56,529
that a developer can't just go require

00:05:54,849 --> 00:05:57,909
into source of your application that you

00:05:56,529 --> 00:05:59,889
shipped and use something you didn't

00:05:57,909 --> 00:06:01,719
intend to be used in your mobile

00:05:59,889 --> 00:06:05,099
application so I think those two things

00:06:01,719 --> 00:06:08,169
were enough to make that choice for us

00:06:05,099 --> 00:06:12,009
some of the issues with bundling the ES

00:06:08,169 --> 00:06:15,580
target is weird but it's not that weird

00:06:12,009 --> 00:06:19,090
there's react native implements its own

00:06:15,580 --> 00:06:20,710
version of Babel helpers and so you want

00:06:19,090 --> 00:06:23,139
to use external helpers it also

00:06:20,710 --> 00:06:25,690
implements async/await natively and

00:06:23,139 --> 00:06:28,960
that's because of performance and

00:06:25,690 --> 00:06:30,279
reasons and so you don't want you want

00:06:28,960 --> 00:06:32,710
to use external helpers and you don't

00:06:30,279 --> 00:06:34,300
want to compile async/await

00:06:32,710 --> 00:06:36,699
and so it's actually really easy to do

00:06:34,300 --> 00:06:38,560
that if you're using roll-up at least

00:06:36,699 --> 00:06:40,449
you say I want external helpers this is

00:06:38,560 --> 00:06:42,759
your babel config and roll up and you

00:06:40,449 --> 00:06:43,719
say transform syntax async functions so

00:06:42,759 --> 00:06:46,509
the battle knows what you're talking

00:06:43,719 --> 00:06:47,889
about but it won't touch it and then you

00:06:46,509 --> 00:06:51,669
have something that you can consume in

00:06:47,889 --> 00:06:52,300
your react native application some other

00:06:51,669 --> 00:06:54,220
gotchas

00:06:52,300 --> 00:06:56,740
you're obviously if you're not familiar

00:06:54,220 --> 00:06:58,990
I'll just do a quick review the react

00:06:56,740 --> 00:07:02,620
native is running in a JavaScript

00:06:58,990 --> 00:07:06,100
context that does not have any access to

00:07:02,620 --> 00:07:07,600
Dom api's or any other wave api's that

00:07:06,100 --> 00:07:08,410
you're normally used to it is a

00:07:07,600 --> 00:07:10,930
bare-bones

00:07:08,410 --> 00:07:13,660
like JavaScript interpreter environment

00:07:10,930 --> 00:07:16,330
so anything in your web code that is

00:07:13,660 --> 00:07:19,510
referencing window or Dom like if you're

00:07:16,330 --> 00:07:21,340
doing local storage get item as the

00:07:19,510 --> 00:07:22,630
default value in your reducer which you

00:07:21,340 --> 00:07:26,500
shouldn't do but if you're doing that

00:07:22,630 --> 00:07:27,790
and I've seen that move that out just

00:07:26,500 --> 00:07:29,320
move that into your components anything

00:07:27,790 --> 00:07:33,330
that's web specific should probably live

00:07:29,320 --> 00:07:35,560
in your components anyways so that's my

00:07:33,330 --> 00:07:37,060
thought there the other part of this

00:07:35,560 --> 00:07:40,000
which is really sort of the same thing

00:07:37,060 --> 00:07:43,660
is if you have some static config so

00:07:40,000 --> 00:07:45,250
most web projects can just generate a

00:07:43,660 --> 00:07:48,460
bundle with some static config and

00:07:45,250 --> 00:07:49,750
that's going to be the same for each

00:07:48,460 --> 00:07:51,430
host you just make a different bundle

00:07:49,750 --> 00:07:53,830
for each host that you deploy to right

00:07:51,430 --> 00:07:58,840
so you can do all that at compile time

00:07:53,830 --> 00:08:01,180
and that's easy at on mobile you're

00:07:58,840 --> 00:08:02,260
probably going to want to hit multiple

00:08:01,180 --> 00:08:04,330
different environments and switch

00:08:02,260 --> 00:08:05,560
between them at runtime right you're

00:08:04,330 --> 00:08:07,180
going to want to have some kind of like

00:08:05,560 --> 00:08:09,700
dev settings interface where you say

00:08:07,180 --> 00:08:11,950
okay go look at this other environment

00:08:09,700 --> 00:08:15,190
or just for the pure effect that you

00:08:11,950 --> 00:08:16,900
might hit you might be doing like third

00:08:15,190 --> 00:08:18,040
tier domain stuff where this company is

00:08:16,900 --> 00:08:19,600
on this domain this company is on that

00:08:18,040 --> 00:08:22,180
domain and you might need to switch

00:08:19,600 --> 00:08:23,770
between them and that's now needs to

00:08:22,180 --> 00:08:25,300
happen at runtime rather than on at

00:08:23,770 --> 00:08:27,340
compile time so you have to care about

00:08:25,300 --> 00:08:28,720
that and so the solution for that is

00:08:27,340 --> 00:08:30,550
really simple you just move it to your

00:08:28,720 --> 00:08:34,900
components this is one possible solution

00:08:30,550 --> 00:08:36,460
that we do is to just do the same static

00:08:34,900 --> 00:08:38,440
config but then dispatch that from your

00:08:36,460 --> 00:08:41,080
components and move that stuff to state

00:08:38,440 --> 00:08:42,700
and then in your actions later on you

00:08:41,080 --> 00:08:45,700
can select that information out of state

00:08:42,700 --> 00:08:46,660
and it's all in sync and nice there's

00:08:45,700 --> 00:08:50,170
probably some other ways you can solve

00:08:46,660 --> 00:08:52,690
that but that's how we did it another

00:08:50,170 --> 00:08:55,420
thing declaring externals this is not

00:08:52,690 --> 00:08:56,890
really an issue so much as just a

00:08:55,420 --> 00:08:58,450
reality so it's something to be aware of

00:08:56,890 --> 00:09:02,080
and you should probably be aware of this

00:08:58,450 --> 00:09:03,310
with your web bundles anyways is do you

00:09:02,080 --> 00:09:04,870
want to declare all of your period

00:09:03,310 --> 00:09:06,100
appendices to be external because you

00:09:04,870 --> 00:09:09,220
can definitely end up ship

00:09:06,100 --> 00:09:11,350
like react Tom and you didn't mean to in

00:09:09,220 --> 00:09:13,110
your bundle and you don't want to do

00:09:11,350 --> 00:09:17,470
that so just a friendly reminder

00:09:13,110 --> 00:09:19,720
probably the biggest well this is not

00:09:17,470 --> 00:09:22,240
really a huge issue at the end of the

00:09:19,720 --> 00:09:23,769
day you can't use NPM link with the

00:09:22,240 --> 00:09:25,180
react native packager it just doesn't

00:09:23,769 --> 00:09:27,610
work so if you were thinking that you

00:09:25,180 --> 00:09:30,339
could debug creating your entry point

00:09:27,610 --> 00:09:32,170
file and your bundle and use NPM link to

00:09:30,339 --> 00:09:34,110
nicely do that while you're consuming it

00:09:32,170 --> 00:09:36,339
and test it in the consuming application

00:09:34,110 --> 00:09:37,959
you can't do that and you're gonna end

00:09:36,339 --> 00:09:40,959
up copying files on the file system

00:09:37,959 --> 00:09:42,730
that's you'll notice this is issue

00:09:40,959 --> 00:09:45,069
number one when they moved to Metro

00:09:42,730 --> 00:09:48,850
bundler it was copied over from the old

00:09:45,069 --> 00:09:50,110
react native repo so I guess you could

00:09:48,850 --> 00:09:51,940
be a hero if you want to fix this I'm

00:09:50,110 --> 00:09:56,970
sure there's many people who would give

00:09:51,940 --> 00:09:56,970
you beer ah let's take a break

00:09:57,360 --> 00:10:04,480
you will see him twice more I apologize

00:10:00,100 --> 00:10:06,240
if you don't think he's cute he's pretty

00:10:04,480 --> 00:10:13,600
cute though

00:10:06,240 --> 00:10:16,300
alright so using the bundle so now we've

00:10:13,600 --> 00:10:17,980
moved from your web application who's

00:10:16,300 --> 00:10:20,529
making a bundle and publishing some code

00:10:17,980 --> 00:10:23,829
to your mobile application that's trying

00:10:20,529 --> 00:10:24,939
to consume it and so you may have only

00:10:23,829 --> 00:10:26,529
one application that you're trying to

00:10:24,939 --> 00:10:28,689
share in our case we were trying to

00:10:26,529 --> 00:10:30,730
compose multiple web applications down

00:10:28,689 --> 00:10:32,439
into one mobile application that is

00:10:30,730 --> 00:10:36,430
trying to implement all of them in one

00:10:32,439 --> 00:10:39,699
native app and so here you can see we're

00:10:36,430 --> 00:10:42,130
importing reducers we're aliasing them

00:10:39,699 --> 00:10:43,810
and we're combining them into one

00:10:42,130 --> 00:10:46,089
reducer and you notice we export

00:10:43,810 --> 00:10:48,630
selectors to get at each of those pieces

00:10:46,089 --> 00:10:51,670
of state which will be important later

00:10:48,630 --> 00:10:53,139
and then this is what a container would

00:10:51,670 --> 00:10:55,620
look like basically what you're doing

00:10:53,139 --> 00:10:57,850
most of your work in the mobile app is

00:10:55,620 --> 00:11:01,600
wiring up new containers and creating

00:10:57,850 --> 00:11:03,579
new user interface in components and

00:11:01,600 --> 00:11:05,199
you're reusing the same actions and

00:11:03,579 --> 00:11:07,360
selectors that you would use so here

00:11:05,199 --> 00:11:10,839
we're importing some actions we're

00:11:07,360 --> 00:11:12,790
importing some selectors and we create a

00:11:10,839 --> 00:11:14,589
container and this is too much code for

00:11:12,790 --> 00:11:17,889
one slide I apologize this is the

00:11:14,589 --> 00:11:19,450
important bit you'll notice here we're

00:11:17,889 --> 00:11:21,130
using reselect as anyone

00:11:19,450 --> 00:11:23,980
use reselect how many of you are

00:11:21,130 --> 00:11:28,180
familiar with reselect have used it okay

00:11:23,980 --> 00:11:30,040
some hands not a ton of hands basically

00:11:28,180 --> 00:11:32,650
the important thing to know is that a

00:11:30,040 --> 00:11:34,570
selector is doing something to get State

00:11:32,650 --> 00:11:36,160
right it's it's grabbing your state and

00:11:34,570 --> 00:11:37,950
it's going dot whatever it out whatever

00:11:36,160 --> 00:11:40,630
that whatever to get you some value out

00:11:37,950 --> 00:11:44,020
and it does fancier things because

00:11:40,630 --> 00:11:46,900
performance so what we're doing here you

00:11:44,020 --> 00:11:49,720
notice we're wrapping our selectors that

00:11:46,900 --> 00:11:52,480
we imported in a transform to get at the

00:11:49,720 --> 00:11:54,700
state and that's because we moved State

00:11:52,480 --> 00:11:56,620
around right those selectors would be

00:11:54,700 --> 00:11:58,360
looking at the wrong state shape if we

00:11:56,620 --> 00:12:01,420
didn't do this but this is an easy

00:11:58,360 --> 00:12:04,480
solution and this that selector that we

00:12:01,420 --> 00:12:06,970
exported before it can be a simple just

00:12:04,480 --> 00:12:08,860
property access like it is here and it

00:12:06,970 --> 00:12:12,070
might actually be more complex and we'll

00:12:08,860 --> 00:12:16,620
see an example of why later on so great

00:12:12,070 --> 00:12:21,190
this works we're done thank you bye

00:12:16,620 --> 00:12:24,850
could this be a trap maybe there's some

00:12:21,190 --> 00:12:28,000
gotchas so like we were just talking

00:12:24,850 --> 00:12:32,100
about how many of you use Redux func to

00:12:28,000 --> 00:12:37,260
do your async stuff so a lot of people

00:12:32,100 --> 00:12:41,290
quick survey redux promise no no means

00:12:37,260 --> 00:12:42,820
Sagas okay I think you have this problem

00:12:41,290 --> 00:12:44,560
everywhere if you're changing your state

00:12:42,820 --> 00:12:47,890
shape this is how we solved it with

00:12:44,560 --> 00:12:49,300
thunks because we use thunks so the

00:12:47,890 --> 00:12:50,560
selectors that are in your thunks

00:12:49,300 --> 00:12:52,840
remember they're in your web app code

00:12:50,560 --> 00:12:55,000
they depend on the shape of the state

00:12:52,840 --> 00:12:56,920
that your web app expected in the first

00:12:55,000 --> 00:12:58,900
place when it was written and so it's

00:12:56,920 --> 00:13:00,550
coupled to that state shape so just an

00:12:58,900 --> 00:13:02,800
example here let's pretend that load

00:13:00,550 --> 00:13:04,810
which widgets uses the get page number

00:13:02,800 --> 00:13:05,980
selector right this is going to blow up

00:13:04,810 --> 00:13:07,870
when you try to run it in your mobile

00:13:05,980 --> 00:13:10,450
application if you move that state

00:13:07,870 --> 00:13:14,500
around like we did so how do you fix

00:13:10,450 --> 00:13:16,480
this this is a bad name for a thing I'm

00:13:14,500 --> 00:13:19,440
sorry naming is hard but this is the

00:13:16,480 --> 00:13:22,000
name that I came up with a func adaptor

00:13:19,440 --> 00:13:24,250
basically what it does is it wraps your

00:13:22,000 --> 00:13:26,290
thunk it returns you another thunk you

00:13:24,250 --> 00:13:28,090
give it a transform and it'll make sure

00:13:26,290 --> 00:13:31,150
that when your thunk calls get state and

00:13:28,090 --> 00:13:33,430
any it gets the transformed state and

00:13:31,150 --> 00:13:34,840
not your original station

00:13:33,430 --> 00:13:36,430
and then it also makes sure that when

00:13:34,840 --> 00:13:38,890
you dispatch other thunks from that

00:13:36,430 --> 00:13:42,790
thunk that those also get the transform

00:13:38,890 --> 00:13:45,610
state and this works this is an example

00:13:42,790 --> 00:13:47,590
of usage pretend that that create func

00:13:45,610 --> 00:13:50,260
adapter exists and it does that what I

00:13:47,590 --> 00:13:52,000
just described so you can it works kind

00:13:50,260 --> 00:13:53,380
of like connect where you call it with

00:13:52,000 --> 00:13:55,810
the transform it gives you a function

00:13:53,380 --> 00:13:58,690
that you can then use to wrap your

00:13:55,810 --> 00:14:01,300
thunks and so that's what that looks

00:13:58,690 --> 00:14:03,190
like you can just copy this code if you

00:14:01,300 --> 00:14:06,100
want it's just it's a small function

00:14:03,190 --> 00:14:10,420
it's not a big deal but that exists okay

00:14:06,100 --> 00:14:13,210
so if you we we survived that our app

00:14:10,420 --> 00:14:15,070
can now run it can be compiled consumed

00:14:13,210 --> 00:14:24,070
and we can actually run and dispatch

00:14:15,070 --> 00:14:30,370
actions and things work okay so Q he's

00:14:24,070 --> 00:14:33,490
so fat all right so this next section of

00:14:30,370 --> 00:14:34,900
things is going to be more less like

00:14:33,490 --> 00:14:36,940
issues and fixing things because we

00:14:34,900 --> 00:14:38,320
already got our app working there's

00:14:36,940 --> 00:14:40,480
going to be situations where either

00:14:38,320 --> 00:14:43,890
because of design or because of what you

00:14:40,480 --> 00:14:45,970
want to achieve you're going to want to

00:14:43,890 --> 00:14:47,890
augment the behavior or enhance the

00:14:45,970 --> 00:14:49,420
behavior that the web application gave

00:14:47,890 --> 00:14:51,700
you to do something that's more specific

00:14:49,420 --> 00:14:54,400
to what you want on mobile and you want

00:14:51,700 --> 00:14:57,870
to try to do that in as least as little

00:14:54,400 --> 00:15:00,190
obtrusive not intrusive ly as possible

00:14:57,870 --> 00:15:04,120
so that these are the there's an example

00:15:00,190 --> 00:15:05,790
of that so on your web application you

00:15:04,120 --> 00:15:07,930
might have like a search and filter and

00:15:05,790 --> 00:15:10,180
those changes are happening live you

00:15:07,930 --> 00:15:12,790
click the buttons the request has made

00:15:10,180 --> 00:15:14,680
it you see the results it's all changing

00:15:12,790 --> 00:15:17,170
live but on mobile your designs maybe

00:15:14,680 --> 00:15:18,490
have like a cancel apply pattern where

00:15:17,170 --> 00:15:19,839
you don't want to actually make the

00:15:18,490 --> 00:15:23,550
request until later and you want to be

00:15:19,839 --> 00:15:25,930
able to cancel back to some old state

00:15:23,550 --> 00:15:28,330
that's not functionality that your web

00:15:25,930 --> 00:15:30,310
app built and you shouldn't necessarily

00:15:28,330 --> 00:15:33,760
have to refactor your entire web app

00:15:30,310 --> 00:15:37,300
just to get this on mobile right so how

00:15:33,760 --> 00:15:39,370
could we do this we can use a

00:15:37,300 --> 00:15:41,800
higher-order reducer reducer enhancer or

00:15:39,370 --> 00:15:45,010
whatever word you want to call that this

00:15:41,800 --> 00:15:45,850
function takes this is imaginary this is

00:15:45,010 --> 00:15:46,990
something that we've written in our

00:15:45,850 --> 00:15:49,510
application but here it's

00:15:46,990 --> 00:15:51,310
imaginary we're passing in a reducer

00:15:49,510 --> 00:15:53,320
that controls some state that we want to

00:15:51,310 --> 00:15:56,350
be able to cancel back to and it takes

00:15:53,320 --> 00:15:58,149
an action type to mark the value of

00:15:56,350 --> 00:16:00,459
state that you want to potentially go

00:15:58,149 --> 00:16:01,870
back to so like this would be the action

00:16:00,459 --> 00:16:04,510
that you fire when you navigate to that

00:16:01,870 --> 00:16:06,520
modal screen and then it also takes a

00:16:04,510 --> 00:16:07,990
cancel action which tells it yeah we

00:16:06,520 --> 00:16:09,580
actually do want to cancel back please

00:16:07,990 --> 00:16:13,089
restore the state that you marked

00:16:09,580 --> 00:16:15,279
previously and then your state is going

00:16:13,089 --> 00:16:16,930
to look like this right here this is it

00:16:15,279 --> 00:16:18,610
was flow I changed it to typescript

00:16:16,930 --> 00:16:21,070
because of the NPM talk I guess more

00:16:18,610 --> 00:16:22,870
people use typescript and flow but

00:16:21,070 --> 00:16:25,000
that's okay your state's gonna look

00:16:22,870 --> 00:16:26,830
something like this right where your

00:16:25,000 --> 00:16:28,959
state is now wrapped into properties

00:16:26,830 --> 00:16:31,089
mark state and state and you just want

00:16:28,959 --> 00:16:33,640
to select out the current state and

00:16:31,089 --> 00:16:35,980
that's the situation where remember

00:16:33,640 --> 00:16:37,649
earlier we talked about your state

00:16:35,980 --> 00:16:40,029
selectors when you change state around

00:16:37,649 --> 00:16:41,470
may just be simple or they may be more

00:16:40,029 --> 00:16:43,420
complex this is a case where it may be

00:16:41,470 --> 00:16:47,470
more complex where you want to be able

00:16:43,420 --> 00:16:49,810
to present the web applications code the

00:16:47,470 --> 00:16:53,860
actual pass-through state and not this

00:16:49,810 --> 00:16:54,040
cancelable State thing cool so we fixed

00:16:53,860 --> 00:16:57,160
that

00:16:54,040 --> 00:17:01,300
what's another use case maybe you want

00:16:57,160 --> 00:17:02,790
to be able to reset data here I'm

00:17:01,300 --> 00:17:05,110
talking about pagination this could be

00:17:02,790 --> 00:17:08,770
any other type of situation where you

00:17:05,110 --> 00:17:10,660
need to reset data say you have your web

00:17:08,770 --> 00:17:13,120
app is has an interface where it's

00:17:10,660 --> 00:17:14,500
paging data and because that's all they

00:17:13,120 --> 00:17:18,069
were doing they're throwing the data

00:17:14,500 --> 00:17:19,750
away every time you change the page but

00:17:18,069 --> 00:17:21,339
on mobile the designs are that you have

00:17:19,750 --> 00:17:23,410
an infinite scroll and you need to keep

00:17:21,339 --> 00:17:25,540
that data around do you have to refactor

00:17:23,410 --> 00:17:29,190
you could refactor your web application

00:17:25,540 --> 00:17:31,179
to instead like window into that data

00:17:29,190 --> 00:17:33,820
but remember we're trying to be

00:17:31,179 --> 00:17:36,400
unobtrusive can we do this we can do

00:17:33,820 --> 00:17:41,080
this in a similar way by in having a

00:17:36,400 --> 00:17:42,790
higher-order reducer here we're here is

00:17:41,080 --> 00:17:45,220
the case where we want to keep data

00:17:42,790 --> 00:17:46,900
around but the consuming reducer is

00:17:45,220 --> 00:17:49,420
throwing it away you know we can

00:17:46,900 --> 00:17:51,429
intercept this data loaded imaginary

00:17:49,420 --> 00:17:53,710
data loaded action we can get the old

00:17:51,429 --> 00:17:55,929
value from state and then we can call

00:17:53,710 --> 00:17:57,730
the reducer that we're consuming and do

00:17:55,929 --> 00:17:59,980
some glue code to merge those together

00:17:57,730 --> 00:18:00,310
which Java is pretty simple to do right

00:17:59,980 --> 00:18:01,660
you

00:18:00,310 --> 00:18:05,500
you're using like an immutable

00:18:01,660 --> 00:18:06,280
collection you just merge those or go

00:18:05,500 --> 00:18:08,650
the opposite way

00:18:06,280 --> 00:18:10,840
right you could instead before you call

00:18:08,650 --> 00:18:14,860
the reducer you're consuming clear out

00:18:10,840 --> 00:18:18,220
the data that's there to get the paging

00:18:14,860 --> 00:18:19,330
behavior and obviously you can solve

00:18:18,220 --> 00:18:21,280
those in multiple different ways these

00:18:19,330 --> 00:18:22,720
are examples of ways in which you can do

00:18:21,280 --> 00:18:24,370
it without refactoring your web

00:18:22,720 --> 00:18:26,230
application which for us was important

00:18:24,370 --> 00:18:28,360
because those teams are independent of

00:18:26,230 --> 00:18:29,710
the mobile team and we can't just go

00:18:28,360 --> 00:18:32,170
stomping all over their code for no

00:18:29,710 --> 00:18:36,150
reason even if we have what we think is

00:18:32,170 --> 00:18:38,500
a good reason so this in the last part

00:18:36,150 --> 00:18:40,930
just a friendly reminder that middleware

00:18:38,500 --> 00:18:42,430
is cool I know some developers on my

00:18:40,930 --> 00:18:44,920
team are kind of reticent to like write

00:18:42,430 --> 00:18:46,660
custom middleware they think it's scary

00:18:44,920 --> 00:18:48,430
it's not that scary

00:18:46,660 --> 00:18:49,990
you should be using it in fact these

00:18:48,430 --> 00:18:53,650
examples analytics and crash reporting

00:18:49,990 --> 00:18:55,900
are right on the tutorial so friendly

00:18:53,650 --> 00:18:58,810
reminder there but also you can use them

00:18:55,900 --> 00:19:02,770
to implement integration with native

00:18:58,810 --> 00:19:05,260
features like handoff and linking and so

00:19:02,770 --> 00:19:08,560
we'll look at an example of handoff now

00:19:05,260 --> 00:19:09,970
how that might work so does anyone

00:19:08,560 --> 00:19:14,350
actually know what handoff is have you

00:19:09,970 --> 00:19:19,840
ever actually used this feature like two

00:19:14,350 --> 00:19:22,750
hands so handoff just for context is an

00:19:19,840 --> 00:19:25,620
iOS feature where you can pass data

00:19:22,750 --> 00:19:28,720
between your running applications and

00:19:25,620 --> 00:19:33,760
generally it's for going from iOS to Mac

00:19:28,720 --> 00:19:35,260
or iOS to iOS or vice versa but perhaps

00:19:33,760 --> 00:19:37,540
a little-known feature of handoff is

00:19:35,260 --> 00:19:40,900
that you can actually handoff from a

00:19:37,540 --> 00:19:43,570
website from your domain to your native

00:19:40,900 --> 00:19:46,090
application and vice versa so that if

00:19:43,570 --> 00:19:47,770
someone is using your web app and they

00:19:46,090 --> 00:19:49,270
pull up their phone they can actually

00:19:47,770 --> 00:19:52,780
get a handoff recommendation says Oh

00:19:49,270 --> 00:19:54,310
open this in my app and vice versa they

00:19:52,780 --> 00:19:55,870
can be using your app on their phone and

00:19:54,310 --> 00:19:57,460
then get a handoff recommendation on

00:19:55,870 --> 00:20:01,090
their laptop that says go to this web

00:19:57,460 --> 00:20:03,570
URL and that is pretty cool I think I

00:20:01,090 --> 00:20:05,830
don't know why more apps don't use that

00:20:03,570 --> 00:20:07,600
but we can imagine we could do this in

00:20:05,830 --> 00:20:11,740
middleware without changing any of the

00:20:07,600 --> 00:20:13,960
application logic code at all if we have

00:20:11,740 --> 00:20:15,640
this what here is an imaginary custom

00:20:13,960 --> 00:20:19,149
that we wrote just pretend this API

00:20:15,640 --> 00:20:21,070
exists it basically looks like this and

00:20:19,149 --> 00:20:23,320
are in our hand off middleware we could

00:20:21,070 --> 00:20:25,270
you know subscribe to a hook that says

00:20:23,320 --> 00:20:27,520
okay when we get a hand off event we get

00:20:25,270 --> 00:20:29,289
some data in this case handing off from

00:20:27,520 --> 00:20:31,419
the web will just get a URL that's the

00:20:29,289 --> 00:20:33,159
only thing we'll get unfortunately but

00:20:31,419 --> 00:20:35,529
we should be able to take that URL and

00:20:33,159 --> 00:20:37,360
transform it into some navigation state

00:20:35,529 --> 00:20:39,580
in our application which we can do just

00:20:37,360 --> 00:20:42,940
by in our case we have all of our

00:20:39,580 --> 00:20:45,159
navigation state inside of Redux but if

00:20:42,940 --> 00:20:46,630
you were using some sort of navigator

00:20:45,159 --> 00:20:48,159
pattern you could also just call

00:20:46,630 --> 00:20:49,419
functions on the navigator you know do

00:20:48,159 --> 00:20:52,270
whatever you need to do to restore that

00:20:49,419 --> 00:20:53,740
URL presumably you have an analogue to

00:20:52,270 --> 00:20:58,270
that URL state in your native

00:20:53,740 --> 00:21:01,809
application and then going the other way

00:20:58,270 --> 00:21:03,220
you can observe either you know methods

00:21:01,809 --> 00:21:05,320
on your navigator hook into those calls

00:21:03,220 --> 00:21:07,110
or observe navigation actions if you're

00:21:05,320 --> 00:21:10,690
just dispatching navigation actions and

00:21:07,110 --> 00:21:13,179
let your the handoff native module know

00:21:10,690 --> 00:21:15,220
this is this is a URL you know you build

00:21:13,179 --> 00:21:16,779
a URL that represents the current

00:21:15,220 --> 00:21:18,640
navigation state and say that's the

00:21:16,779 --> 00:21:20,770
current URL I would want the user to

00:21:18,640 --> 00:21:23,020
resume - if they chose to do so

00:21:20,770 --> 00:21:25,240
and that's it we didn't change any of

00:21:23,020 --> 00:21:27,940
the web code we didn't write wrap any

00:21:25,240 --> 00:21:31,929
actions or anything like that so use

00:21:27,940 --> 00:21:35,710
middleware it's great cool

00:21:31,929 --> 00:21:38,740
so in summary this has been a pretty big

00:21:35,710 --> 00:21:40,210
success for us so far you might look at

00:21:38,740 --> 00:21:42,419
the thunk adapter thing and say that's

00:21:40,210 --> 00:21:44,830
crazy I can't believe you're doing that

00:21:42,419 --> 00:21:47,260
and that it's a heck it probably is

00:21:44,830 --> 00:21:49,059
that's okay it's working for us and

00:21:47,260 --> 00:21:49,690
we're shipping a lot of code on mobile

00:21:49,059 --> 00:21:53,350
really fast

00:21:49,690 --> 00:21:55,960
so that's valuable some of the

00:21:53,350 --> 00:21:59,020
challenges are keeping up to date with

00:21:55,960 --> 00:22:00,490
the web projects there's a lot of things

00:21:59,020 --> 00:22:02,919
that aren't caught in that compile step

00:22:00,490 --> 00:22:05,169
that only get caught at runtime like

00:22:02,919 --> 00:22:06,820
right now if they added a new if someone

00:22:05,169 --> 00:22:09,820
again went into a reducer and said local

00:22:06,820 --> 00:22:11,350
storage docket item it would not blow up

00:22:09,820 --> 00:22:12,850
until we pulled in the new version of

00:22:11,350 --> 00:22:17,470
the package and then we would have to go

00:22:12,850 --> 00:22:19,600
back and fix it and then do it again so

00:22:17,470 --> 00:22:21,700
that's kind of an annoying thing and is

00:22:19,600 --> 00:22:22,809
just kind of a manual process of talking

00:22:21,700 --> 00:22:25,419
to the teams and seeing what they're

00:22:22,809 --> 00:22:27,250
working on so that could be better also

00:22:25,419 --> 00:22:27,790
training I don't know if you guys have

00:22:27,250 --> 00:22:30,070
found this

00:22:27,790 --> 00:22:32,170
training people in react and redux if

00:22:30,070 --> 00:22:34,930
they are not familiar with functional

00:22:32,170 --> 00:22:36,760
programming is hard it takes a little

00:22:34,930 --> 00:22:41,020
bit longer than I would assume it does

00:22:36,760 --> 00:22:42,610
and that's especially true for remember

00:22:41,020 --> 00:22:45,330
our excited mobile developers who were

00:22:42,610 --> 00:22:47,770
thrilled to be riding with Jas before

00:22:45,330 --> 00:22:49,570
it's especially true for them because if

00:22:47,770 --> 00:22:51,880
you've been in that world that's a very

00:22:49,570 --> 00:22:52,510
object oriented this is very very

00:22:51,880 --> 00:22:55,690
different

00:22:52,510 --> 00:22:58,930
and it is hard for them to learn they're

00:22:55,690 --> 00:23:00,250
smart people obviously but it's just a

00:22:58,930 --> 00:23:02,470
hard thing it's a complete paradigm

00:23:00,250 --> 00:23:05,500
shift and so that is a challenge not

00:23:02,470 --> 00:23:08,980
insurmountable but is a challenge some

00:23:05,500 --> 00:23:12,670
future things that we would like to do

00:23:08,980 --> 00:23:14,110
have automatic pull requests when new

00:23:12,670 --> 00:23:15,790
packages are deployed this is just kind

00:23:14,110 --> 00:23:17,920
of like a nice logistical thing that

00:23:15,790 --> 00:23:19,600
could be great and this means we could

00:23:17,920 --> 00:23:21,520
also write integration tests with their

00:23:19,600 --> 00:23:23,160
thunks and make sure that everything

00:23:21,520 --> 00:23:25,450
works right

00:23:23,160 --> 00:23:27,070
then there's acceptance testing going

00:23:25,450 --> 00:23:30,520
one step further acceptance testing on

00:23:27,070 --> 00:23:33,300
mobile is hard because there at least

00:23:30,520 --> 00:23:36,430
with react native there isn't a way to

00:23:33,300 --> 00:23:39,160
do this headless Lee you have to use a

00:23:36,430 --> 00:23:41,200
simulator or you'd have to go like use

00:23:39,160 --> 00:23:43,630
react native web and render your mobile

00:23:41,200 --> 00:23:45,610
application in a webview and then use

00:23:43,630 --> 00:23:49,630
the web tools to do acceptance testing

00:23:45,610 --> 00:23:51,820
which is seems to me too much work to

00:23:49,630 --> 00:23:54,010
maintain just to get acceptance testing

00:23:51,820 --> 00:23:55,930
on your mobile application so you're

00:23:54,010 --> 00:24:00,820
stuck with like running in simulator and

00:23:55,930 --> 00:24:02,050
using those api's which is hard that's

00:24:00,820 --> 00:24:05,080
just a challenge but something that we

00:24:02,050 --> 00:24:07,450
would like to solve and like I mentioned

00:24:05,080 --> 00:24:10,360
before catching more things at bundle

00:24:07,450 --> 00:24:12,850
time caching references to window

00:24:10,360 --> 00:24:15,580
objects or Dom API is that or SVG's

00:24:12,850 --> 00:24:17,530
things that we don't that are going to

00:24:15,580 --> 00:24:19,900
fail at runtime we'd like to move that

00:24:17,530 --> 00:24:25,450
catch to compile time if possible and

00:24:19,900 --> 00:24:26,380
and then lastly I'm going to go next

00:24:25,450 --> 00:24:28,420
door and learn about how I should

00:24:26,380 --> 00:24:31,960
replace Redux with rxjs because

00:24:28,420 --> 00:24:34,000
apparently that's the new hotness that's

00:24:31,960 --> 00:24:36,370
it for me and a little bit early please

00:24:34,000 --> 00:24:37,750
if you have questions I really want to

00:24:36,370 --> 00:24:39,040
talk about all this stuff and if there

00:24:37,750 --> 00:24:40,540
are better ways to do it please come

00:24:39,040 --> 00:24:41,470
tell me if you're doing this I would

00:24:40,540 --> 00:24:42,850
love to hear about that thing

00:24:41,470 --> 00:24:50,020
to you very much

00:24:42,850 --> 00:24:50,020

YouTube URL: https://www.youtube.com/watch?v=GlmWtL9tEUA


