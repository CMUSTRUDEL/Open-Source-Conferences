Title: Learning through Art: An Introduction to VR - Billy Roh - JSConf US 2018
Publication date: 2018-10-30
Playlist: JSConf US 2018
Description: 
	
Captions: 
	00:00:29,420 --> 00:00:30,560
>> Hi, everyone.

00:00:30,560 --> 00:00:37,070
My name is Billy and I am here to talk to you about making art with virtual reality.

00:00:37,070 --> 00:00:40,820
A bit about myself, I work in San Francisco at a company called Opendoor.

00:00:40,820 --> 00:00:49,170
We buy, renovate and sell homes.

00:00:49,170 --> 00:00:52,960
Please come say hi if you would like to chat with me about it.

00:00:52,960 --> 00:00:55,890
I organize a MOJT monthly meet up called WaffleJS.

00:00:55,890 --> 00:01:03,370
We just celebrated our three-year anniversary so I am pretty happy.

00:01:03,370 --> 00:01:07,990
This is my handle on Twitter where I will tweet out a link to my slides and demo later

00:01:07,990 --> 00:01:11,500
today.

00:01:11,500 --> 00:01:15,360
Let's start talking about the buzzy thing of the moment, virtual reality.

00:01:15,360 --> 00:01:19,660
When I think of virtual reality I find it a bit overwhelming.

00:01:19,660 --> 00:01:24,440
At least in terms of the harder choices there is a wide gamut.

00:01:24,440 --> 00:01:29,729
You have the phone and box model where you put your phone into Google card board and

00:01:29,729 --> 00:01:30,740
play around with it.

00:01:30,740 --> 00:01:42,009
At the highest end you have things like Vire and hardware to show you where you are in

00:01:42,009 --> 00:01:46,350
the room and trackers for your hands, as well.

00:01:46,350 --> 00:01:49,610
On the software side, there is a lot of excitement.

00:01:49,610 --> 00:01:57,740
Games with PlayStation, videos on YouTube but none of these hit the mark and make me

00:01:57,740 --> 00:02:00,460
think I really need to get a headset.

00:02:00,460 --> 00:02:06,119
What is missing from the conversation is its potential for making art.

00:02:06,119 --> 00:02:11,730
Most of the mediums of art we interact with have a lot of inherent restrictions.

00:02:11,730 --> 00:02:14,680
There is only one given painting.

00:02:14,680 --> 00:02:17,340
You cannot replicate or easy remix it.

00:02:17,340 --> 00:02:21,790
For music and videos, you can duplicate them but it is ultimately a one-way street and

00:02:21,790 --> 00:02:24,520
you cannot meaningful interact with them.

00:02:24,520 --> 00:02:27,550
For video games, you can interact but you can't change them.

00:02:27,550 --> 00:02:32,480
You are always playing within the confines of the game.

00:02:32,480 --> 00:02:36,730
With VR, we reached a paradigm shift.

00:02:36,730 --> 00:02:41,209
It is interactive.

00:02:41,209 --> 00:02:45,599
But with VR there is a large opportunity for play and exploration especially with the ability

00:02:45,599 --> 00:02:48,629
to remix other's work.

00:02:48,629 --> 00:02:53,790
Because it is in its infancy we have the opportunity to make interesting things.

00:02:53,790 --> 00:03:00,819
I would like to re-create an instillation piece by Yayoi Kusama called obliteration.

00:03:00,819 --> 00:03:08,349
Yayoi Kusama is a Japanese artist and known for large scale sculptures and instillation

00:03:08,349 --> 00:03:09,349
pieces.

00:03:09,349 --> 00:03:16,690
Procedure her signature motif is polka dots.

00:03:16,690 --> 00:03:17,849
This is in Singapore.

00:03:17,849 --> 00:03:23,010
In the center, you will see a pair of heels with flowers coming out of them and that is

00:03:23,010 --> 00:03:24,939
at San Francisco airport.

00:03:24,939 --> 00:03:29,930
And then you have the mannequins covered in wigs.

00:03:29,930 --> 00:03:37,160
If you have been on Instagram you seen her work.

00:03:37,160 --> 00:03:42,290
Infinity room is her most famous work.

00:03:42,290 --> 00:03:48,440
It feels like you are suspended in space which is an interesting sensation.

00:03:48,440 --> 00:03:51,080
The piece I would like to re-create is called obliteration room.

00:03:51,080 --> 00:04:00,769
It is an all-white room and visitors are given stickers and invited to stick them all over

00:04:00,769 --> 00:04:03,379
the room.

00:04:03,379 --> 00:04:05,879
This piece is radically different.

00:04:05,879 --> 00:04:10,980
With most art pieces, there is a divided line between the viewer and artist.

00:04:10,980 --> 00:04:19,500
The artist is mentally separated by having to know a lot about the artist, piece itself

00:04:19,500 --> 00:04:22,670
and historical context to understand it.

00:04:22,670 --> 00:04:32,410
Even if the viewer is allowed to interact, it is not meaningfully changed as a result.

00:04:32,410 --> 00:04:36,900
Obliteration breaks down the barrier between the artist and viewer.

00:04:36,900 --> 00:04:42,020
The piece changes as the visitor interacts.

00:04:42,020 --> 00:04:47,250
I found this striking because when was the last time you saw both parents and children

00:04:47,250 --> 00:04:48,970
having fun in a museum together?

00:04:48,970 --> 00:04:51,660
This piece is meant for everyone.

00:04:51,660 --> 00:04:56,040
The young, old, and the everyday person.

00:04:56,040 --> 00:04:59,040
This is what I meant by us reaching a paradigm shift with VR.

00:04:59,040 --> 00:05:07,020
It is not like video games where it is interact but not meaningful changed through interaction.

00:05:07,020 --> 00:05:12,220
It is like all these things and a new medium for us to play with.

00:05:12,220 --> 00:05:16,940
As I thought about re-creating the obliteration room, I throughout about making it personal.

00:05:16,940 --> 00:05:23,250
Instead of having to pay to go to museums to interact with an art piece, anyone could

00:05:23,250 --> 00:05:26,490
come into my apartment and put stickers everywhere.

00:05:26,490 --> 00:05:30,690
The thought of making art more accessible to a larger group of people made it really

00:05:30,690 --> 00:05:34,001
exciting to me.

00:05:34,001 --> 00:05:37,040
To re-create this piece, we are going to use a framework called A-Frame.

00:05:37,040 --> 00:05:40,420
First we will create an all-white scene with white furniture.

00:05:40,420 --> 00:05:43,270
Then we will create stickers on the fly in the scene.

00:05:43,270 --> 00:05:47,830
Then we will add an interaction and physics to the scene to make the stickers fly around

00:05:47,830 --> 00:05:50,090
and stick to things.

00:05:50,090 --> 00:05:57,400
A-Frame is a WebVR framework created by Mozilla build on top of Three.js.

00:05:57,400 --> 00:06:04,780
It is easy to set-up and has syntax that you can declare A box in HTML and it will render

00:06:04,780 --> 00:06:08,430
A box like you are seeing.

00:06:08,430 --> 00:06:10,910
It is really powerful, too.

00:06:10,910 --> 00:06:15,910
You can use it to create hypnotic visualizations like this with -- which kind of look like

00:06:15,910 --> 00:06:21,240
a '60s music video.

00:06:21,240 --> 00:06:25,770
And you can create interact games like this where for some reason you are shooting a bunch

00:06:25,770 --> 00:06:33,080
of smiley faces flying around in space.

00:06:33,080 --> 00:06:39,490
It supports the full range of devices from the phone in a box model to dedicated devices

00:06:39,490 --> 00:06:44,260
like HCC vibe with positional trackers.

00:06:44,260 --> 00:06:46,500
So, let's get started.

00:06:46,500 --> 00:06:52,570
We will first create the scene for us to pour walls and furniture into it.

00:06:52,570 --> 00:06:55,600
We can start by setting up a scene by declaring a scene at the top.

00:06:55,600 --> 00:07:01,380
You will notice I am using pug instead of regular HTML and we will declare a scene at

00:07:01,380 --> 00:07:13,380
the top and create the floor by declaring A-plane and the dividing wall with A-box.

00:07:13,380 --> 00:07:16,150
Now that we have set-up the structure of the room let's start adding furniture.

00:07:16,150 --> 00:07:22,710
For the demo, we can use Google Poly which is a library of 3D models.

00:07:22,710 --> 00:07:28,630
You can download ones and remix them or create new ones yourself and update them.

00:07:28,630 --> 00:07:37,000
You can find single models which is a snake that kind of looks like a boot Emoji which

00:07:37,000 --> 00:07:43,280
is fun or you can find complex ones like this where it is a composite of many models.

00:07:43,280 --> 00:07:53,330
You have a tree, campfire, sleeping bag, and a lot of things going on in this one.

00:07:53,330 --> 00:07:57,581
For these 3D models you will notice you get two files instead of one.

00:07:57,581 --> 00:08:03,060
One is the object file which represents the skeleton of the model, the physical shape

00:08:03,060 --> 00:08:07,401
of the thing, and the other is the material file which represents the skin of the model

00:08:07,401 --> 00:08:11,060
as in the materials and the colors of the thing.

00:08:11,060 --> 00:08:16,980
In this example, one dining set is rendered with both object and material file and the

00:08:16,980 --> 00:08:19,350
other one is rendered with just the object file.

00:08:19,350 --> 00:08:25,800
So you can see here that the one that is rendered with just the object file is pure white which

00:08:25,800 --> 00:08:26,800
is what we want.

00:08:26,800 --> 00:08:31,680
Since that is what we want, we will be rendering all models with just the object file instead

00:08:31,680 --> 00:08:37,130
of both the object and material file.

00:08:37,130 --> 00:08:41,260
To load these files into our scene, we will first need to use A-Frame's asset management

00:08:41,260 --> 00:08:42,310
system.

00:08:42,310 --> 00:08:51,260
A-frame preloads and caches 3 D models before rendering.

00:08:51,260 --> 00:08:59,410
With the asset management system, we can store 3D models and audio and other things.

00:08:59,410 --> 00:09:06,540
At the top we will be declaring A assets and for each object we want to load in we will

00:09:06,540 --> 00:09:12,610
declare A-asset item and for each item giving it a unique ID we will use later in the scene

00:09:12,610 --> 00:09:15,800
for reference it.

00:09:15,800 --> 00:09:20,899
Later on, the file will be declaring A entity which as a generic container for things.

00:09:20,899 --> 00:09:23,029
It is like the div for A-frame.

00:09:23,029 --> 00:09:36,089
We will load in an object model file we declare using the unique ID we declared earlier on.

00:09:36,089 --> 00:09:41,889
So as we load object into our system, sometimes they will be way too big or too small and

00:09:41,889 --> 00:09:47,130
I personally find it hard to reason about 3D spaces on a 2 D screen.

00:09:47,130 --> 00:09:50,889
A-frame's debugging helps with this.

00:09:50,889 --> 00:09:57,699
You can scale things up and down, move it around, just to get the riot placement.

00:09:57,699 --> 00:10:04,199
It is like the building in Sims when you are buying furniture and building walls and things

00:10:04,199 --> 00:10:08,810
like that.

00:10:08,810 --> 00:10:13,370
As you look through the Google Poly library you may not find what you want.

00:10:13,370 --> 00:10:19,190
I was looking for a coffee table like this and this is an opportunity to create a model

00:10:19,190 --> 00:10:22,200
of our own using primitives.

00:10:22,200 --> 00:10:30,500
The coffee table can be broken down into a cylinder and four box elements for the legs.

00:10:30,500 --> 00:10:36,829
You can right code like this to create a coffee table out of primitives.

00:10:36,829 --> 00:10:44,120
First declaring A-cylinder to create the surface, and adding in boxes for the legs, and then

00:10:44,120 --> 00:10:50,529
wrapping in a single A-entity tag to make it clear this is just one thing.

00:10:50,529 --> 00:10:54,680
Here is how it looks in the demo.

00:10:54,680 --> 00:11:01,579
You can see that because we created it ourselves using primitives you can play around with

00:11:01,579 --> 00:11:03,819
it more in the debugging interface.

00:11:03,819 --> 00:11:08,499
If you don't feel like the leg placement is right, or the surface could be bigger or smaller,

00:11:08,499 --> 00:11:13,040
you can get a feel for it in the debugging interface instead of changing numbers and

00:11:13,040 --> 00:11:15,440
refreshing constantly.

00:11:15,440 --> 00:11:19,740
We can do the same thing for other bits of furniture, too.

00:11:19,740 --> 00:11:23,319
I wanted to put in a console like this but I could not find a Google Poly with so I tried

00:11:23,319 --> 00:11:31,730
to make it myself.

00:11:31,730 --> 00:11:34,939
This one didn't turn out quite well like the other one.

00:11:34,939 --> 00:11:41,730
I think I will try to make it better in the next version.

00:11:41,730 --> 00:11:47,110
So far we have built our apartment, moved in, and arranged our furniture.

00:11:47,110 --> 00:11:51,749
You can see that it is a bit eerie and hard to see because of the low contrast.

00:11:51,749 --> 00:11:58,310
It kind of reminds me of the white room in 2001 space Odyssey but in kind of a bad way.

00:11:58,310 --> 00:12:01,420
To make it better, let's try adding some lighting.

00:12:01,420 --> 00:12:06,139
A-frame makes it easy to at -- add lighting.

00:12:06,139 --> 00:12:13,940
There are five types and we will use ambient and point to build our scene.

00:12:13,940 --> 00:12:17,220
Ambient lights affect all entities in a scene are not dependent on position.

00:12:17,220 --> 00:12:28,309
You can use this to make sure the darkest shadow in the scene is not black but dark

00:12:28,309 --> 00:12:29,309
gray.

00:12:29,309 --> 00:12:33,999
Point lights affect entities all-around them in all directions and are dependent on positioning.

00:12:33,999 --> 00:12:37,509
This is useful to simulate things like light bulbs which we will be doing in our scene.

00:12:37,509 --> 00:12:42,410
Next, I will go over the three other lighting types briefly.

00:12:42,410 --> 00:12:47,070
So, spotlights are kind of like point lights but they don't light up in all directions.

00:12:47,070 --> 00:12:53,079
They only point in one direction like a spotlight.

00:12:53,079 --> 00:12:58,130
Directional lights simulate things like the sun and shines at a specific direction, but

00:12:58,130 --> 00:13:00,399
it is positioned agnostic.

00:13:00,399 --> 00:13:04,230
For our scene here, it would kind of make it look too moody like Sin City so that is

00:13:04,230 --> 00:13:07,129
no good.

00:13:07,129 --> 00:13:11,470
And hemisphere lights are the last one.

00:13:11,470 --> 00:13:24,040
This might be useful for creating a hot bling video.

00:13:24,040 --> 00:13:30,220
You can declare a type here which are ambient, directional, hemisphere or spot.

00:13:30,220 --> 00:13:36,569
For each lighting type there are additional primers.

00:13:36,569 --> 00:13:43,920
You can set decay and distance, for example.

00:13:43,920 --> 00:13:50,389
In this example, you will notice as soon as you add lighting to any object in the scene

00:13:50,389 --> 00:13:54,749
it turns off the default lights meaning we have to be more intentional about where and

00:13:54,749 --> 00:14:00,089
how we place our lighting elements.

00:14:00,089 --> 00:14:04,120
To figure out the exact coordinates in the lighting options we can play around with it

00:14:04,120 --> 00:14:05,120
in the debugger.

00:14:05,120 --> 00:14:09,829
Here we are playing with decay, distance, and intensity to see what feels right for

00:14:09,829 --> 00:14:17,480
the scene.

00:14:17,480 --> 00:14:22,309
For each additional lighting source you add, it add said performance implications because

00:14:22,309 --> 00:14:28,019
the engine has to calculate how each lighting interacts with each other.

00:14:28,019 --> 00:14:36,170
I had around 12 lighting sources at the beginning of the demo and gave me below 11LPS and it

00:14:36,170 --> 00:14:37,170
was terrible.

00:14:37,170 --> 00:14:45,199
I went down to three and that keeps it above 30.

00:14:45,199 --> 00:14:47,720
This is what the finished product looks like.

00:14:47,720 --> 00:14:52,880
With custom lighting, there is higher contrast and you can see the dining room set, TV and

00:14:52,880 --> 00:15:00,499
the rest of the apartment sed of looking eerie and low contrast and, kind of, bizarre.

00:15:00,499 --> 00:15:06,939
Now that we have placed our lighting sources, we can start thinking about stickers.

00:15:06,939 --> 00:15:10,290
First how to generate the stickers and orient them in the right direction and then how to

00:15:10,290 --> 00:15:13,880
throw them and get them to stick on things.

00:15:13,880 --> 00:15:20,619
We need to generate the sticker where the user is and query the A-camera element for

00:15:20,619 --> 00:15:21,939
the position.

00:15:21,939 --> 00:15:24,699
Here is our code on how to add a sticker to the scene.

00:15:24,699 --> 00:15:26,699
It is pretty simple.

00:15:26,699 --> 00:15:32,430
First you get there coordinates of the camera, then we generate a cylinder of the appropriate

00:15:32,430 --> 00:15:38,339
size, then we set the position value to be where the camera is positioned, and finally

00:15:38,339 --> 00:15:41,889
we append it to the scene.

00:15:41,889 --> 00:15:49,660
You can see here as we spun the sticker, you will notice the sticker is also facing up.

00:15:49,660 --> 00:15:55,560
It feels more natural for the sticker to face you as you spun it and we need to know the

00:15:55,560 --> 00:15:57,779
direction the camera is facing.

00:15:57,779 --> 00:16:02,959
This part is more complicated than grabbing the camera and requires a bit more vector

00:16:02,959 --> 00:16:04,389
math.

00:16:04,389 --> 00:16:09,910
As you play around in the inspector, we can see we want to rotate the sticker along the

00:16:09,910 --> 00:16:14,649
X axis up and down and Y axis as you look side to side.

00:16:14,649 --> 00:16:21,429
These rotations should be set in a way they are always facing us.

00:16:21,429 --> 00:16:26,089
When you call this function, you mean get back three numbers that represent which direction

00:16:26,089 --> 00:16:27,870
you are looking at in 3D space.

00:16:27,870 --> 00:16:33,610
X is side to side and Y is up or down.

00:16:33,610 --> 00:16:38,440
Here is a diagram that might help explain what is going on.

00:16:38,440 --> 00:16:48,929
The camera is facing due north, X is 0, Z is 1, when facing south, X is 0 and Z is negative

00:16:48,929 --> 00:16:50,529
1.

00:16:50,529 --> 00:16:54,470
The issue here is that regardless of whichever direction we are facing the stickers are spawning

00:16:54,470 --> 00:16:56,970
up.

00:16:56,970 --> 00:17:01,779
We want to position the sticker where the camera is facing and rotate the sticker in

00:17:01,779 --> 00:17:04,100
such a way it is facing the camera.

00:17:04,100 --> 00:17:09,640
We can do this by taking input of X and Y coordinates and its direction and use those

00:17:09,640 --> 00:17:15,330
numbers to output the correct X and Y rotations of the stickers.

00:17:15,330 --> 00:17:19,650
For me, it is hard to think about taking three directional values and output two rotational

00:17:19,650 --> 00:17:20,810
values.

00:17:20,810 --> 00:17:26,050
Let's considered the case when the camera's direction is pointed at the northern half

00:17:26,050 --> 00:17:34,900
of the screen when Z is greater than or equal to 0 and then we can flip the Y value for

00:17:34,900 --> 00:17:39,290
when Z is less than 0.

00:17:39,290 --> 00:17:44,980
You can see the rotation remains the same whether you are facing due north or south,

00:17:44,980 --> 00:17:50,000
but when facing northeast, the rotation is a mirror image when you are facing southwest

00:17:50,000 --> 00:17:55,160
and same for northwest.

00:17:55,160 --> 00:17:59,910
After playing around with the inspector, we can determine the directional value of Y and

00:17:59,910 --> 00:18:03,970
negative and positive 1 should match 0-180.

00:18:03,970 --> 00:18:08,430
We can create a linear scale with the appropriate domain and range.

00:18:08,430 --> 00:18:14,540
We do the same for the X axis rotation taking in the directional X value.

00:18:14,540 --> 00:18:21,230
When we detect the Z value is less than 0 we multiply and flip it.

00:18:21,230 --> 00:18:28,660
After you make the calculation, we set the rotation values.

00:18:28,660 --> 00:18:33,430
This is a reminder this is how the stickers used to spun.

00:18:33,430 --> 00:18:41,640
They would always face up no matter where you are or which way you are facing.

00:18:41,640 --> 00:18:44,780
With the changes, you can see the stickers are always facing us no matter which way we

00:18:44,780 --> 00:18:46,990
face.

00:18:46,990 --> 00:18:51,630
We have covered how to position the sticker correctly and set the rotation such that it

00:18:51,630 --> 00:18:55,770
always faces us and next is figuring how to launch the sticker.

00:18:55,770 --> 00:19:03,060
A-Frame doesn't come with physics out of the box and doesn't have gravity, collision events

00:19:03,060 --> 00:19:06,790
and dynamic motion.

00:19:06,790 --> 00:19:10,160
Thankfully there is a great package called A-Frame physic systems which is built on top

00:19:10,160 --> 00:19:15,560
of canyon.js.

00:19:15,560 --> 00:19:20,400
Before I can get started with adding emotions, we should talk about bodies.

00:19:20,400 --> 00:19:26,630
Bodies can interact and surround with the entity.

00:19:26,630 --> 00:19:38,130
There is dynamic bodies that move freely and they also fall if gravity is enabled.

00:19:38,130 --> 00:19:41,650
Static bodies are fixed or animated in a fix way and when they collide with other objects

00:19:41,650 --> 00:19:46,540
their static bodies are unaffected.

00:19:46,540 --> 00:19:58,540
If produced with the static bodies, for example, yeah, the sofa's dynamic body would go flying

00:19:58,540 --> 00:20:00,010
as we put stickers on it.

00:20:00,010 --> 00:20:05,950
We would want furniture and walls to be static so when the sticker collides with them they

00:20:05,950 --> 00:20:10,590
should not move.

00:20:10,590 --> 00:20:13,820
We want the stickers to be dynamic as they fly through the air but when they hit something

00:20:13,820 --> 00:20:16,440
they should stick and remain stuck.

00:20:16,440 --> 00:20:20,770
With this in mind, let's start putting motion into scene.

00:20:20,770 --> 00:20:27,430
We need to get the vector the direction the camera is facing so we can set the velocity.

00:20:27,430 --> 00:20:36,070
Keep in mind, we do this after the physics body has loaded which happens after the initial

00:20:36,070 --> 00:20:41,500
rendering.

00:20:41,500 --> 00:20:50,390
At this point, we have managed to generate stickers in the correct position and launch

00:20:50,390 --> 00:20:52,610
them in the in the direction we are looking at.

00:20:52,610 --> 00:20:56,930
We can see the sticker is simply bouncing off the furniture and walls instead of sticking

00:20:56,930 --> 00:21:00,730
and this is because the stickers remain dynamic bodies after colliding.

00:21:00,730 --> 00:21:08,180
We will create coalition event listeners on the stickers to fix this.

00:21:08,180 --> 00:21:12,310
When the sticker collides with an object, we can check to see if it collided with a

00:21:12,310 --> 00:21:16,140
static body and then we know it is the walls or furniture and it should stick.

00:21:16,140 --> 00:21:22,560
At that point, we can have it remain stationary by turning it into a static body.

00:21:22,560 --> 00:21:27,300
Here we can see as soon as the sticker hits a static body it turns into a static body

00:21:27,300 --> 00:21:28,300
itself.

00:21:28,300 --> 00:21:35,310
That makes it stop moving and makes it look like it is sticking to the sofa.

00:21:35,310 --> 00:21:38,590
In the previous clip you will notice the stickers don't stick perfectly on the surface of the

00:21:38,590 --> 00:21:43,620
models and this is because how the physic engine interprets models.

00:21:43,620 --> 00:21:49,840
They don't respect the curvature or the individual cushions on the sofa and this is because the

00:21:49,840 --> 00:21:58,250
physic engine interprets them as primitive shapes and this makes the engine more performing.

00:21:58,250 --> 00:22:01,310
You can see how the physic engine sees each model in the debug mode.

00:22:01,310 --> 00:22:07,300
You can see the engine sees the plant is a box instead of the individual leaves or pot

00:22:07,300 --> 00:22:08,300
it sits in.

00:22:08,300 --> 00:22:12,220
There is a slight bug with the physics engine.

00:22:12,220 --> 00:22:17,790
With you create a custom non-primitive entity and rotate it, the custom is rotated but the

00:22:17,790 --> 00:22:19,080
physic body is not.

00:22:19,080 --> 00:22:24,830
You can see it is orthogonal to the thing.

00:22:24,830 --> 00:22:29,150
We can manually create the physics body.

00:22:29,150 --> 00:22:33,740
First, create a primitive that most closely fits the model.

00:22:33,740 --> 00:22:41,560
A-box element that is a static body and then place it like so; then make it invisible and

00:22:41,560 --> 00:22:44,710
you are done.

00:22:44,710 --> 00:22:53,010
I like to close out with the demo of what the actual final product looks like.

00:22:53,010 --> 00:22:58,370
The demo is obviously not a perfect creation of the obliteration room but I think we managed

00:22:58,370 --> 00:23:02,060
to get pretty far.

00:23:02,060 --> 00:23:06,360
We covered a few things like generating a scene, adding in models and lighting, dynamically

00:23:06,360 --> 00:23:12,430
generating elements, adding in a physic engine and interaction, and modifying bodies.

00:23:12,430 --> 00:23:15,900
This barely scratches the surface of what you can do in VR.

00:23:15,900 --> 00:23:22,510
Some of my favorite VR paintings are till brush paintings.

00:23:22,510 --> 00:23:33,410
You can see this accomplishes what you can't do with other paintings and conveys depth.

00:23:33,410 --> 00:23:36,440
You can see under the water, there are fish swimming in the water.

00:23:36,440 --> 00:23:39,850
You can see underneath the boat and inside the house.

00:23:39,850 --> 00:23:45,370
Unlike a sculpture, you can download and remix it to make your own and others can download

00:23:45,370 --> 00:23:47,540
and remix it.

00:23:47,540 --> 00:23:52,760
Because it is VR it can be meaningful interactive.

00:23:52,760 --> 00:23:57,510
I encourage all of you to go out there and make something.

00:23:57,510 --> 00:24:04,330
A 360-video game, a 360 video, a game, a till brush painting.

00:24:04,330 --> 00:24:08,110
VR is still unchartered territory and everybody is trying to figure it out.

00:24:08,110 --> 00:24:09,870
Embrace the novelty of it.

00:24:09,870 --> 00:24:20,900
Thank you for coming to my talk and thank you to JSConf for having me.

00:24:20,900 --> 00:24:24,360
And you can find the demo in this reel over here.

00:24:24,360 --> 00:24:27,780
This is my handle on Twitter where I will tweet out a link to my slides later on today.

00:24:27,780 --> 00:24:28,780
Thank you.

00:24:28,780 --> 00:24:28,950

YouTube URL: https://www.youtube.com/watch?v=jUfaJ1hsfqQ


