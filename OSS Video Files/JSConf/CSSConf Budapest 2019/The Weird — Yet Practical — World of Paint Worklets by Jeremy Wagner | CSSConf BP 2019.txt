Title: The Weird — Yet Practical — World of Paint Worklets by Jeremy Wagner | CSSConf BP 2019
Publication date: 2019-10-29
Playlist: CSSConf Budapest 2019
Description: 
	http://cssconfbp.rocks/speakers/jeremy/

Of all the fun stuff in Houdini, paint worklets are arguably the most fun. It’s blends what’s great about the Canvas API, and makes the art you can create with it easily usable in CSS. Such a blend of technologies can only lead to very best kind of fun and experimentation the web is known for.

Come to this session and you’ll understand how paint worklets, well, work. But the really good stuff will be in all the inspired experimentation that can come from experimenting with the programatic generation of art and graphics, and how we can practically use it in our designs. If the intersection between weird and usable is your thing, you’ll feel right at home with paint worklets!

Jeremy Wagner is a web performance consultant working for Siteimprove in The United States. He frequently speaks and writes about the web, and the importance of making it faster and more usable for everyone, everywhere.
Captions: 
	00:00:00,060 --> 00:00:07,049
all right okay then okay

00:00:04,740 --> 00:00:08,670
so hello thank you all I really

00:00:07,049 --> 00:00:13,080
appreciate the opportunity to be a part

00:00:08,670 --> 00:00:15,000
of CSS comp Budapest just massive thanks

00:00:13,080 --> 00:00:18,350
to the organizers and most importantly

00:00:15,000 --> 00:00:20,369
you all for welcoming me into your

00:00:18,350 --> 00:00:21,600
ridiculously beautiful and picturesque

00:00:20,369 --> 00:00:24,240
City

00:00:21,600 --> 00:00:25,970
my name is Jeremy Wagner and I'm a web

00:00:24,240 --> 00:00:28,349
performance consultant for site improve

00:00:25,970 --> 00:00:30,539
my job is to do all I can to make the

00:00:28,349 --> 00:00:32,550
web faster for our clients and I also

00:00:30,539 --> 00:00:34,920
write and talk about performance a bit

00:00:32,550 --> 00:00:37,770
I'm just repeating everything or that

00:00:34,920 --> 00:00:40,079
our wonderful emcee has already said but

00:00:37,770 --> 00:00:41,010
this talk is about paint worklets which

00:00:40,079 --> 00:00:42,989
is a little weird for me because I

00:00:41,010 --> 00:00:44,789
always talk about performance which has

00:00:42,989 --> 00:00:46,620
comparably little to do performance well

00:00:44,789 --> 00:00:48,120
mostly we'll get there

00:00:46,620 --> 00:00:52,320
and right about now you might be

00:00:48,120 --> 00:00:54,809
wondering Oh Jeremy what the hell are

00:00:52,320 --> 00:00:56,430
paint worklets and it's a good question

00:00:54,809 --> 00:00:58,530
and since I don't want to assume

00:00:56,430 --> 00:01:00,719
everyone knows about this here's a quick

00:00:58,530 --> 00:01:03,149
tour of what they are and what they can

00:01:00,719 --> 00:01:05,610
do paint worklets are part of a

00:01:03,149 --> 00:01:09,689
developing set of specifications called

00:01:05,610 --> 00:01:11,790
Houdini and with the api's Houdini

00:01:09,689 --> 00:01:14,460
provides you can write what are what are

00:01:11,790 --> 00:01:16,619
called worklets and they let you develop

00:01:14,460 --> 00:01:19,650
expressive and stateful animations

00:01:16,619 --> 00:01:21,990
custom layout modes even that's a

00:01:19,650 --> 00:01:23,460
developing thing and as is the sole

00:01:21,990 --> 00:01:26,009
focus of this talk

00:01:23,460 --> 00:01:30,750
generative artwork using the CSS paint

00:01:26,009 --> 00:01:31,979
API seriously so I haven't answered your

00:01:30,750 --> 00:01:33,869
question yet and out there you're

00:01:31,979 --> 00:01:36,030
thinking ok fine journey buying that

00:01:33,869 --> 00:01:37,950
whatever but what even is a worklet will

00:01:36,030 --> 00:01:41,009
you get to the point worklets are

00:01:37,950 --> 00:01:42,119
similar to web workers but unlike web

00:01:41,009 --> 00:01:44,579
workers worklets

00:01:42,119 --> 00:01:47,009
offer developers lower level access to

00:01:44,579 --> 00:01:49,049
rendering pipelines for completing very

00:01:47,009 --> 00:01:52,140
narrowly defined but super specific

00:01:49,049 --> 00:01:54,060
tasks and in the case of paint worklets

00:01:52,140 --> 00:01:55,920
we're talking about artwork that we can

00:01:54,060 --> 00:01:59,670
generate with JavaScript and control

00:01:55,920 --> 00:02:02,490
with CSS now I know Jay s comp is

00:01:59,670 --> 00:02:03,840
tomorrow and not today so you're

00:02:02,490 --> 00:02:05,280
probably thinking well with what the

00:02:03,840 --> 00:02:09,989
hell is this I didn't ask for no

00:02:05,280 --> 00:02:13,090
JavaScript at a CSS calm woo and I feel

00:02:09,989 --> 00:02:17,620
you as much as I love JavaScript

00:02:13,090 --> 00:02:20,410
the web can sometimes feel like this but

00:02:17,620 --> 00:02:22,690
I feel that this technology is relevant

00:02:20,410 --> 00:02:25,150
here even at CSS cough because even if

00:02:22,690 --> 00:02:27,880
you're not a JavaScript devotee or

00:02:25,150 --> 00:02:29,410
superfan you can still use paint

00:02:27,880 --> 00:02:31,540
worklets which have already been written

00:02:29,410 --> 00:02:33,400
in your designs without ever having to

00:02:31,540 --> 00:02:34,930
do more than write a little CSS here

00:02:33,400 --> 00:02:38,140
there so they're still relevant to you

00:02:34,930 --> 00:02:40,030
and this is possible because while paint

00:02:38,140 --> 00:02:43,090
worklets are written in JavaScript

00:02:40,030 --> 00:02:44,769
they're embeddable in CSS and this is

00:02:43,090 --> 00:02:46,330
what I mean by an embeddable when you

00:02:44,769 --> 00:02:47,620
look at this lonely background image

00:02:46,330 --> 00:02:48,790
property you might be thinking what

00:02:47,620 --> 00:02:51,220
that's not right

00:02:48,790 --> 00:02:53,440
isn't background image supposed to take

00:02:51,220 --> 00:02:56,140
a URL well that's certainly the

00:02:53,440 --> 00:02:58,690
prevailing use case but in browsers that

00:02:56,140 --> 00:03:00,670
support paint worklets the background

00:02:58,690 --> 00:03:03,220
image property can also take this little

00:03:00,670 --> 00:03:06,190
nifty paint syntax too so if you think

00:03:03,220 --> 00:03:08,709
of the URL syntax and CSS is a function

00:03:06,190 --> 00:03:11,170
that accepts a URL string to an image

00:03:08,709 --> 00:03:13,330
you can similarly think of paint as a

00:03:11,170 --> 00:03:15,640
function which accepts a string that

00:03:13,330 --> 00:03:17,950
represents and invokes a paintwork clip

00:03:15,640 --> 00:03:19,810
and in that worklet is where you write

00:03:17,950 --> 00:03:22,510
the JavaScript to generate background

00:03:19,810 --> 00:03:24,700
images that CSS can use so in this

00:03:22,510 --> 00:03:26,560
example we're calling paint to invoke a

00:03:24,700 --> 00:03:29,319
worklet that is registered under the

00:03:26,560 --> 00:03:32,230
name amazing but until we actually

00:03:29,319 --> 00:03:34,120
register a worklet to that name this bit

00:03:32,230 --> 00:03:37,420
of CSS won't do anything and therefore

00:03:34,120 --> 00:03:39,100
will not be very amazing and this is

00:03:37,420 --> 00:03:41,200
what that registration process looks

00:03:39,100 --> 00:03:44,620
like which is done in JavaScript on your

00:03:41,200 --> 00:03:46,540
page or your main app code that runs on

00:03:44,620 --> 00:03:48,310
the main thread because the paint API

00:03:46,540 --> 00:03:50,260
isn't available in all browsers you'll

00:03:48,310 --> 00:03:52,420
need to do a quick check to see if

00:03:50,260 --> 00:03:55,150
window dot CSS dot paintwork late' is a

00:03:52,420 --> 00:03:57,160
thing that you can use and if it is you

00:03:55,150 --> 00:03:59,290
can then use its add module method to

00:03:57,160 --> 00:04:01,900
load your worklet from a separate

00:03:59,290 --> 00:04:03,730
JavaScript file and what is a paint

00:04:01,900 --> 00:04:05,889
worker worklet really I mean what is it

00:04:03,730 --> 00:04:08,230
it turns out it's a class with a

00:04:05,889 --> 00:04:12,190
predetermined shape which consists of a

00:04:08,230 --> 00:04:14,170
method called well paint and with that

00:04:12,190 --> 00:04:16,329
within that method is where all the code

00:04:14,170 --> 00:04:17,739
that draws the artwork goes and the

00:04:16,329 --> 00:04:19,539
shape of a paint worklet is not

00:04:17,739 --> 00:04:22,150
restrictive at all so you're free to use

00:04:19,539 --> 00:04:24,099
all their class features to organize and

00:04:22,150 --> 00:04:26,710
and do like whatever to organize your

00:04:24,099 --> 00:04:28,930
drawing code any way that you prefer and

00:04:26,710 --> 00:04:31,360
it's nifty because without a little

00:04:28,930 --> 00:04:34,509
organization your drawing code can start

00:04:31,360 --> 00:04:39,069
to look like this and we really don't

00:04:34,509 --> 00:04:42,039
want that do we then moving on in the

00:04:39,069 --> 00:04:42,910
same file after and outside of your

00:04:42,039 --> 00:04:45,130
paintwork Lit class

00:04:42,910 --> 00:04:47,770
you can call register paint which

00:04:45,130 --> 00:04:49,780
requires two arguments the first is the

00:04:47,770 --> 00:04:51,970
name the string name that the paintwork

00:04:49,780 --> 00:04:54,460
should be registered under and then the

00:04:51,970 --> 00:04:56,169
second this that allows it to be

00:04:54,460 --> 00:04:58,060
accessed by the paint function and then

00:04:56,169 --> 00:04:59,770
the second is the reference to the class

00:04:58,060 --> 00:05:00,940
that you just wrote that does all of the

00:04:59,770 --> 00:05:03,940
painting and when this all comes

00:05:00,940 --> 00:05:07,720
together a paint worklet finally becomes

00:05:03,940 --> 00:05:11,380
usable by CSS but how do we draw stuff

00:05:07,720 --> 00:05:13,870
what does that even look like well the

00:05:11,380 --> 00:05:16,780
API you use conveniently to draw stuff

00:05:13,870 --> 00:05:18,460
is really just the canvas API is 2d

00:05:16,780 --> 00:05:20,710
drawing context something that's been

00:05:18,460 --> 00:05:23,020
around for a very long time that some of

00:05:20,710 --> 00:05:25,270
us have good familiarity with and that

00:05:23,020 --> 00:05:27,610
makes sense why why develop a separate

00:05:25,270 --> 00:05:29,820
API for drawing in 2d when a perfectly

00:05:27,610 --> 00:05:32,289
good one is like right there you know

00:05:29,820 --> 00:05:34,690
the second argument is the canvas

00:05:32,289 --> 00:05:36,789
geometry which offers the dimensions of

00:05:34,690 --> 00:05:39,610
the drawing space and this is essential

00:05:36,789 --> 00:05:41,380
to ensuring your artwork responds to the

00:05:39,610 --> 00:05:42,969
available space because you know your

00:05:41,380 --> 00:05:45,310
elements can kind of shift and change

00:05:42,969 --> 00:05:47,590
size that sort of thing happens and in

00:05:45,310 --> 00:05:48,820
this madly responsive world that we live

00:05:47,590 --> 00:05:51,880
in we want to make sure that our artwork

00:05:48,820 --> 00:05:54,880
adapts to the container that it's in so

00:05:51,880 --> 00:05:57,099
here's an example of a minimally viable

00:05:54,880 --> 00:06:00,159
paint method which draws a solid black

00:05:57,099 --> 00:06:01,810
circle with a 64 pixel radius smack dab

00:06:00,159 --> 00:06:04,870
in the middle of the canvas no matter

00:06:01,810 --> 00:06:07,060
what the size of that canvas is and so

00:06:04,870 --> 00:06:09,490
if we assume this super basic paint

00:06:07,060 --> 00:06:10,120
worklet gets registered under the not at

00:06:09,490 --> 00:06:12,310
all

00:06:10,120 --> 00:06:16,110
ironic name of amazing and we apply it

00:06:12,310 --> 00:06:19,719
to an element will get this this totally

00:06:16,110 --> 00:06:24,190
amazing thing that in no way could be

00:06:19,719 --> 00:06:26,789
replaced by a static image whatsoever so

00:06:24,190 --> 00:06:29,440
this might be you right about now but

00:06:26,789 --> 00:06:31,659
that simplistic example was meant to

00:06:29,440 --> 00:06:33,460
illustrate how we get from one line of

00:06:31,659 --> 00:06:36,039
CSS to something that lets you generate

00:06:33,460 --> 00:06:38,469
background images using a familiar API

00:06:36,039 --> 00:06:40,180
there is so much more that this

00:06:38,469 --> 00:06:42,520
technology is capable of so let

00:06:40,180 --> 00:06:44,400
take a look at it and just think what if

00:06:42,520 --> 00:06:46,810
you could use this API to create

00:06:44,400 --> 00:06:48,840
randomly generated artwork that could

00:06:46,810 --> 00:06:50,949
enhance your designs and practical yet

00:06:48,840 --> 00:06:52,030
spontaneous ways that are just a little

00:06:50,949 --> 00:06:54,160
bit different a little bit of chaos

00:06:52,030 --> 00:06:55,720
right and that's what we're going to do

00:06:54,160 --> 00:06:57,580
we're going to talk about the other

00:06:55,720 --> 00:07:00,190
important aspects of this technology as

00:06:57,580 --> 00:07:01,810
well so what we're done here the only

00:07:00,190 --> 00:07:05,470
thing that we'll be able to cage your

00:07:01,810 --> 00:07:07,720
creativity is you so let's see what's

00:07:05,470 --> 00:07:12,010
possible with this expressive and cool

00:07:07,720 --> 00:07:15,729
technology but still and I sense a

00:07:12,010 --> 00:07:18,639
little bit of hesitancy knowing where or

00:07:15,729 --> 00:07:20,440
just how to start can be kind of

00:07:18,639 --> 00:07:22,419
paralyzing so it's a good frame of mind

00:07:20,440 --> 00:07:25,030
you know a good frame of mind to get

00:07:22,419 --> 00:07:27,160
into is to think of the canvas is like a

00:07:25,030 --> 00:07:29,530
set of tiles where all the tiles are

00:07:27,160 --> 00:07:31,300
separate but potentially overlapping or

00:07:29,530 --> 00:07:34,539
connected pieces which are randomly

00:07:31,300 --> 00:07:37,389
generated this mindset trains your focus

00:07:34,539 --> 00:07:39,400
conveniently only on what to do in each

00:07:37,389 --> 00:07:41,260
tile rather than allowing yourself to be

00:07:39,400 --> 00:07:43,690
overwhelmed by what to do with the

00:07:41,260 --> 00:07:45,220
entire space and once everything is done

00:07:43,690 --> 00:07:46,570
you can kind of step back and just see

00:07:45,220 --> 00:07:48,160
how all these things connect and

00:07:46,570 --> 00:07:51,190
interlock and how they come together and

00:07:48,160 --> 00:07:53,919
this helps us reach where I think is the

00:07:51,190 --> 00:07:57,160
sweet spot with the paint API we can get

00:07:53,919 --> 00:07:59,169
weird yes but that weirdness can

00:07:57,160 --> 00:08:01,090
intersect with what's practical and

00:07:59,169 --> 00:08:03,010
therefore usable and that to me is like

00:08:01,090 --> 00:08:06,070
the magical part of web development the

00:08:03,010 --> 00:08:07,570
weirdly practical stuff now some of what

00:08:06,070 --> 00:08:10,930
you're going to see here and I feel

00:08:07,570 --> 00:08:12,789
obliged to call this out is very much

00:08:10,930 --> 00:08:15,639
inspired by a wonderful talk that Tim

00:08:12,789 --> 00:08:17,530
Holman gave at JFK FAU last year where

00:08:15,639 --> 00:08:21,580
he talked about generative art using the

00:08:17,530 --> 00:08:23,349
canvas API I highly recommend you check

00:08:21,580 --> 00:08:25,349
it out on YouTube because he is way

00:08:23,349 --> 00:08:27,760
better at this stuff than I am and

00:08:25,349 --> 00:08:29,710
pretty much everything in that talk is

00:08:27,760 --> 00:08:32,349
something that you will then be able to

00:08:29,710 --> 00:08:36,310
apply to paint worklets in the CSS paint

00:08:32,349 --> 00:08:38,500
API so do check it out okay let's

00:08:36,310 --> 00:08:40,419
revisit that paint method in the amazing

00:08:38,500 --> 00:08:42,700
paint wirklich class and just maybe

00:08:40,419 --> 00:08:45,190
change things up a little bit there's

00:08:42,700 --> 00:08:47,140
more going on in this example then when

00:08:45,190 --> 00:08:49,260
we were just drawing this mundane lonely

00:08:47,140 --> 00:08:51,910
circle in the middle of a bleak canvas

00:08:49,260 --> 00:08:54,100
so first we establish the size of each

00:08:51,910 --> 00:08:56,860
tile which will be 32 pixels

00:08:54,100 --> 00:08:59,079
square then we divide the canvases width

00:08:56,860 --> 00:09:00,910
and height by the tile size and then

00:08:59,079 --> 00:09:04,449
we'll write two loops using those values

00:09:00,910 --> 00:09:07,029
to draw each individual tile the first

00:09:04,449 --> 00:09:08,759
loop deals with tiles on the y-axis and

00:09:07,029 --> 00:09:11,110
then the second loop deals with

00:09:08,759 --> 00:09:12,970
unsurprisingly tiles on the x-axis and

00:09:11,110 --> 00:09:14,230
the second loop is nested inside of the

00:09:12,970 --> 00:09:16,779
first one and this will end up

00:09:14,230 --> 00:09:19,180
populating or allow us to populate every

00:09:16,779 --> 00:09:21,550
tile available on the canvas with

00:09:19,180 --> 00:09:24,220
whatever it is we feel like drawing so

00:09:21,550 --> 00:09:26,380
what you do up here is up to you but in

00:09:24,220 --> 00:09:28,720
this example I'm going to draw a line in

00:09:26,380 --> 00:09:31,540
every tile but the random part a bit of

00:09:28,720 --> 00:09:34,149
it will be where the line goes in in the

00:09:31,540 --> 00:09:36,579
tile space right so in every iteration I

00:09:34,149 --> 00:09:39,100
call the context objects begin path

00:09:36,579 --> 00:09:41,680
method to begin drawing a line and then

00:09:39,100 --> 00:09:44,920
I leave it to math dot random or math

00:09:41,680 --> 00:09:47,410
dot pseudo random am i right to decide

00:09:44,920 --> 00:09:49,420
if the line will cross the tile space

00:09:47,410 --> 00:09:51,579
from the upper left corner to the lower

00:09:49,420 --> 00:09:53,319
lower right corner or draw a line

00:09:51,579 --> 00:09:56,019
straight line from the upper left corner

00:09:53,319 --> 00:09:58,120
to the lower left corner and after that

00:09:56,019 --> 00:10:00,069
I finish up Euler rate iteration by

00:09:58,120 --> 00:10:02,189
telling the context object to draw the

00:10:00,069 --> 00:10:05,410
strokes so what does that look like

00:10:02,189 --> 00:10:10,720
turns out it looks like a kind of cool

00:10:05,410 --> 00:10:12,610
thing that changes every single time and

00:10:10,720 --> 00:10:14,230
that is the kind of spontaneity and

00:10:12,610 --> 00:10:16,029
randomness I'm talking about here and

00:10:14,230 --> 00:10:18,130
that's just what you can do if you only

00:10:16,029 --> 00:10:20,319
know like just a teeny little bit of the

00:10:18,130 --> 00:10:23,350
canvas API but with a little ingenuity

00:10:20,319 --> 00:10:26,470
that little teeny bit of ingenuity can

00:10:23,350 --> 00:10:28,149
go extremely far like what if we just

00:10:26,470 --> 00:10:30,100
decided to throw in a little something

00:10:28,149 --> 00:10:31,870
extra and randomly decide whether or not

00:10:30,100 --> 00:10:34,509
to draw a dot in the upper left hand

00:10:31,870 --> 00:10:36,069
corner of each tile this gives the final

00:10:34,509 --> 00:10:37,540
artwork a sort of circuit board

00:10:36,069 --> 00:10:39,790
appearance which i think is kind of neat

00:10:37,540 --> 00:10:41,560
and we can also make the tile size a bit

00:10:39,790 --> 00:10:43,449
bigger and we can change the color and

00:10:41,560 --> 00:10:45,970
because a canvas background is

00:10:43,449 --> 00:10:49,269
transparent by default we can specify a

00:10:45,970 --> 00:10:51,339
CSS background color property to set to

00:10:49,269 --> 00:10:52,569
set this artwork on whatever color it is

00:10:51,339 --> 00:10:55,990
we want so I've kind of done like this

00:10:52,569 --> 00:10:58,060
off black grayish thing now imagine this

00:10:55,990 --> 00:10:59,740
pattern in a pages masthead background

00:10:58,060 --> 00:11:02,079
but maybe at a more subtle and lower

00:10:59,740 --> 00:11:04,660
opacity that just gives the design just

00:11:02,079 --> 00:11:07,460
a little bit of extra oof and like chaos

00:11:04,660 --> 00:11:09,020
but without overpowering the forward

00:11:07,460 --> 00:11:10,820
and like making things like you know

00:11:09,020 --> 00:11:14,630
just kind of subtle like you know being

00:11:10,820 --> 00:11:16,130
cool so that was cool but let's do a

00:11:14,630 --> 00:11:17,630
different take on this idea and let's

00:11:16,130 --> 00:11:18,620
like let's experiment a little bit more

00:11:17,630 --> 00:11:20,830
like what else can we do

00:11:18,620 --> 00:11:24,140
so here's a paint work I call blotto

00:11:20,830 --> 00:11:25,850
which draws circles of varying size and

00:11:24,140 --> 00:11:28,370
opacity in every tile like kind of an

00:11:25,850 --> 00:11:29,720
inkblot kind of thing and so there's a

00:11:28,370 --> 00:11:32,209
bit of code here so let's just walk

00:11:29,720 --> 00:11:34,820
through it at the very beginning a

00:11:32,209 --> 00:11:37,250
beginning of blah toes paint method we

00:11:34,820 --> 00:11:40,010
set some variables the tile size of

00:11:37,250 --> 00:11:42,560
course 8 by 8 pixels and then we define

00:11:40,010 --> 00:11:44,630
this amplitude variable which aids us in

00:11:42,560 --> 00:11:46,910
sort of generating randomly sized

00:11:44,630 --> 00:11:49,430
circles later on and then we calculate

00:11:46,910 --> 00:11:51,589
the number of tiles on both axes and

00:11:49,430 --> 00:11:53,779
then we store the result of pi times 2

00:11:51,589 --> 00:11:57,529
which means that the circle that we draw

00:11:53,779 --> 00:11:59,750
will be a full circle at 360 degrees and

00:11:57,529 --> 00:12:02,510
then finally we set the fill style to

00:11:59,750 --> 00:12:03,560
this sort of like nice little blue and

00:12:02,510 --> 00:12:05,690
now here's where we do the heavy lifting

00:12:03,560 --> 00:12:08,180
you'll note that the loops are the same

00:12:05,690 --> 00:12:10,370
as with the circuit board pattern and we

00:12:08,180 --> 00:12:12,920
we do all the work inside of the second

00:12:10,370 --> 00:12:15,290
nested loop now where it changes is that

00:12:12,920 --> 00:12:17,000
we generate a random alpha value by

00:12:15,290 --> 00:12:19,400
getting the remainder of math dot random

00:12:17,000 --> 00:12:22,029
divided against itself and this will get

00:12:19,400 --> 00:12:25,339
us a valid transparency value from 0 to

00:12:22,029 --> 00:12:27,950
1.0 and then we multiply the tile size

00:12:25,339 --> 00:12:30,020
by math dot random and our amplitude

00:12:27,950 --> 00:12:32,360
value from earlier and now all we do

00:12:30,020 --> 00:12:33,860
from here is just draw a circle with

00:12:32,360 --> 00:12:35,959
that information that we've just sort of

00:12:33,860 --> 00:12:37,820
come up with and then we register good

00:12:35,959 --> 00:12:40,430
ole blotto here like this just like

00:12:37,820 --> 00:12:43,190
usual and then we can use it and CSS

00:12:40,430 --> 00:12:45,410
like so and because paintwork let's draw

00:12:43,190 --> 00:12:47,420
like I said they draw on a transparent

00:12:45,410 --> 00:12:49,130
background by default we can add a nice

00:12:47,420 --> 00:12:50,600
little background color to sit for it to

00:12:49,130 --> 00:12:52,790
sit on I've chosen this sort of like

00:12:50,600 --> 00:12:55,690
off-white and so after all of that

00:12:52,790 --> 00:12:58,430
faffing about what does it look like

00:12:55,690 --> 00:12:59,990
pretty cool I think it's not bad if I do

00:12:58,430 --> 00:13:01,550
say so myself I mean I don't think

00:12:59,990 --> 00:13:04,910
anything I do is cool but I think that's

00:13:01,550 --> 00:13:07,459
kind of cool and as before we get a

00:13:04,910 --> 00:13:09,110
unique result every time the canvas

00:13:07,459 --> 00:13:11,149
redraws and it gives us again that

00:13:09,110 --> 00:13:14,390
organic feel that while stable and

00:13:11,149 --> 00:13:16,880
familiar is just slightly chaotic and

00:13:14,390 --> 00:13:21,650
spontaneous and I really like that every

00:13:16,880 --> 00:13:24,620
single time it draws ok so that was

00:13:21,650 --> 00:13:26,330
alright but let's think outside of tiles

00:13:24,620 --> 00:13:29,210
right tiles are fun in their convenient

00:13:26,330 --> 00:13:30,740
ways to draw like generative artwork but

00:13:29,210 --> 00:13:33,350
let's step into the world of

00:13:30,740 --> 00:13:35,000
trigonometry and I'm sure most of you

00:13:33,350 --> 00:13:38,090
are pretty comfortable with trig but if

00:13:35,000 --> 00:13:40,310
not don't worry it's it's not too hard

00:13:38,090 --> 00:13:42,110
and I never was a good math student so

00:13:40,310 --> 00:13:43,220
like I was brushing up on my trig last

00:13:42,110 --> 00:13:44,990
week

00:13:43,220 --> 00:13:48,260
here's another paint worklet I call

00:13:44,990 --> 00:13:50,270
flashy which randomly draw stylized rays

00:13:48,260 --> 00:13:52,550
of light sorry

00:13:50,270 --> 00:13:54,200
around a circle which flare outward

00:13:52,550 --> 00:13:56,360
which makes it sort of look like a

00:13:54,200 --> 00:13:58,850
stylized rendering of the Sun which i

00:13:56,360 --> 00:14:00,890
think is kind of cool so let's look at

00:13:58,850 --> 00:14:02,390
the paint method and as before we'll

00:14:00,890 --> 00:14:05,330
need to establish variables that we can

00:14:02,390 --> 00:14:06,890
use later the first is the radius of the

00:14:05,330 --> 00:14:09,230
main circle that the Rays will radiate

00:14:06,890 --> 00:14:12,890
from think like the Sun itself which

00:14:09,230 --> 00:14:15,110
we've set at 48 pixels next is the

00:14:12,890 --> 00:14:17,330
amount of deviation of each rays with

00:14:15,110 --> 00:14:19,490
and this is what we use to make it look

00:14:17,330 --> 00:14:22,640
like the Rays are flaring outward as

00:14:19,490 --> 00:14:25,130
they extend from the Sun itself out to

00:14:22,640 --> 00:14:27,650
the edge of the canvas and next is the

00:14:25,130 --> 00:14:31,730
outer radius which is sort of think like

00:14:27,650 --> 00:14:35,030
a giant circle around the entire canvas

00:14:31,730 --> 00:14:36,410
that you don't see we do this so that we

00:14:35,030 --> 00:14:38,240
ensure that the edges of the Rays will

00:14:36,410 --> 00:14:40,010
be drawn outside of the canvas bounds

00:14:38,240 --> 00:14:42,140
when we use our trigonometry functions

00:14:40,010 --> 00:14:44,690
to plot where those rays need to go and

00:14:42,140 --> 00:14:47,540
finally we have the X&Y coordinates from

00:14:44,690 --> 00:14:51,680
which the circle the main circle will be

00:14:47,540 --> 00:14:53,270
drawn and we calculate the position of

00:14:51,680 --> 00:14:55,250
this thing by multiplying the width and

00:14:53,270 --> 00:14:57,650
height of the canvases size by some

00:14:55,250 --> 00:14:59,630
static values to sort of ensure it sits

00:14:57,650 --> 00:15:02,150
proportionately somewhere in the upper

00:14:59,630 --> 00:15:04,400
left but if the element sizes changes

00:15:02,150 --> 00:15:07,130
it'll kind of adjust a little bit and

00:15:04,400 --> 00:15:08,810
now it's time to get drawing so first we

00:15:07,130 --> 00:15:10,430
set the fill color and then we draw the

00:15:08,810 --> 00:15:13,070
circle from which the rays will radiate

00:15:10,430 --> 00:15:15,200
pretty straightforward now here's where

00:15:13,070 --> 00:15:16,580
it gets a little interesting and this

00:15:15,200 --> 00:15:18,620
code will all be available so if you

00:15:16,580 --> 00:15:21,140
can't totally read it that's ok it will

00:15:18,620 --> 00:15:22,040
be available somewhere because we are

00:15:21,140 --> 00:15:23,930
drawing rays

00:15:22,040 --> 00:15:25,700
radiating around a circle we'll want to

00:15:23,930 --> 00:15:27,470
do one for loop that starts at zero

00:15:25,700 --> 00:15:30,110
degrees and then goes all the way around

00:15:27,470 --> 00:15:32,090
to 360 and then in each iteration will

00:15:30,110 --> 00:15:33,590
let math dot random decide if it wants

00:15:32,090 --> 00:15:34,670
to draw anything at all and if it

00:15:33,590 --> 00:15:36,950
decides okay we're going

00:15:34,670 --> 00:15:38,900
do that we'll calculate the x and

00:15:36,950 --> 00:15:41,090
y-coordinates at the edge of the larger

00:15:38,900 --> 00:15:42,830
circle that exists outside the canvas

00:15:41,090 --> 00:15:45,050
bounds and so then we do this by

00:15:42,830 --> 00:15:47,710
converting the edge of each ray from

00:15:45,050 --> 00:15:50,900
degrees represented by our incrementer

00:15:47,710 --> 00:15:52,820
i2 radians and from there we'll then

00:15:50,900 --> 00:15:54,620
draw this polyline shape that uses a

00:15:52,820 --> 00:15:56,570
trigonometry like two trigonometry

00:15:54,620 --> 00:15:58,760
functions to figure out the x and y

00:15:56,570 --> 00:16:01,100
coordinates to draw the lines for each

00:15:58,760 --> 00:16:02,510
ray once the shape is drawn we fill it

00:16:01,100 --> 00:16:05,000
with the same solid color as we used

00:16:02,510 --> 00:16:07,270
with the circle then like before we

00:16:05,000 --> 00:16:10,580
register that flashy little fella and

00:16:07,270 --> 00:16:12,200
then like before we use it in the CSS

00:16:10,580 --> 00:16:14,210
like this and give it a nice pinkish

00:16:12,200 --> 00:16:16,280
background color to sit on and what do

00:16:14,210 --> 00:16:19,010
you think that looks like something

00:16:16,280 --> 00:16:20,780
pretty cool I think right it looks kind

00:16:19,010 --> 00:16:23,300
of neat and a little bit of mass goes a

00:16:20,780 --> 00:16:26,420
long way into making this look really

00:16:23,300 --> 00:16:30,160
cool in stylish and like before we still

00:16:26,420 --> 00:16:31,970
get that spontaneity that gives it that

00:16:30,160 --> 00:16:34,010
familiar but slightly different

00:16:31,970 --> 00:16:38,090
appearance each and every time that it

00:16:34,010 --> 00:16:42,770
draws so and as an aside I sucked at

00:16:38,090 --> 00:16:46,070
math in school like like barely scraped

00:16:42,770 --> 00:16:48,050
pie through algebra to sucked so if I

00:16:46,070 --> 00:16:50,480
can make stuff like this pretty much

00:16:48,050 --> 00:16:52,970
anyone can make stuff that looks really

00:16:50,480 --> 00:16:55,130
cool with just a little bit of like you

00:16:52,970 --> 00:16:56,990
know even just some basic arithmetic can

00:16:55,130 --> 00:17:00,560
help you make some really cool stuff in

00:16:56,990 --> 00:17:02,270
this and so a case in point like this

00:17:00,560 --> 00:17:04,130
paint work that I like to call slapdash

00:17:02,270 --> 00:17:05,540
this one is kind of one of the easier

00:17:04,130 --> 00:17:08,060
ones to make and I use it on my website

00:17:05,540 --> 00:17:09,560
currently although it might not be long

00:17:08,060 --> 00:17:12,350
for this world I'm kind of getting tired

00:17:09,560 --> 00:17:13,910
of it but that's okay like because I've

00:17:12,350 --> 00:17:16,490
got some others up my sleeve like this

00:17:13,910 --> 00:17:20,750
one which I like to call bumpy because

00:17:16,490 --> 00:17:22,430
it's get it it's bumpy and then there's

00:17:20,750 --> 00:17:23,930
this alternate rendering of the blotto

00:17:22,430 --> 00:17:26,120
paint worklet which I showed you earlier

00:17:23,930 --> 00:17:28,460
but with just sort of a larger radius on

00:17:26,120 --> 00:17:30,350
the circles with a blend mode applied to

00:17:28,460 --> 00:17:32,570
give it a sort of inkblot gone wild

00:17:30,350 --> 00:17:33,890
effect that's kind of cool

00:17:32,570 --> 00:17:35,060
and then there's yeah this blend mode

00:17:33,890 --> 00:17:36,410
just kind of makes them like sort of

00:17:35,060 --> 00:17:38,870
overlay each other I think it uses

00:17:36,410 --> 00:17:41,150
multiply and then I started getting a

00:17:38,870 --> 00:17:42,910
little bit whack here and came up with

00:17:41,150 --> 00:17:45,710
this one which I like to call byte mare

00:17:42,910 --> 00:17:47,870
and even though it looks 3d it's really

00:17:45,710 --> 00:17:48,530
just a 2d drawing I don't think you can

00:17:47,870 --> 00:17:51,320
use a 3d

00:17:48,530 --> 00:17:53,180
context and paint worklets yet I use

00:17:51,320 --> 00:17:55,160
some trigonometry functions just to kind

00:17:53,180 --> 00:17:57,500
of fake that 3d look and I think it's

00:17:55,160 --> 00:17:59,480
pretty convincing and in that same vein

00:17:57,500 --> 00:18:03,710
here's my favorite one I made so far

00:17:59,480 --> 00:18:05,750
which I call parallel oh wow it also

00:18:03,710 --> 00:18:07,520
uses a little trig to fake that free D

00:18:05,750 --> 00:18:09,230
thing again and I don't know who knows

00:18:07,520 --> 00:18:10,790
where I'll go with with this next this

00:18:09,230 --> 00:18:13,070
is just the last one I made that I like

00:18:10,790 --> 00:18:14,390
but it's a lot of fun and if you're

00:18:13,070 --> 00:18:16,130
looking to know how I did some of these

00:18:14,390 --> 00:18:17,900
or where you can find that code I have a

00:18:16,130 --> 00:18:20,780
little surprise for you at the end of

00:18:17,900 --> 00:18:23,960
this talk but we got some other stuff to

00:18:20,780 --> 00:18:24,770
talk about first okay so we had some fun

00:18:23,960 --> 00:18:27,200
there for a minute

00:18:24,770 --> 00:18:28,940
right like it was a wild ride but the

00:18:27,200 --> 00:18:30,410
problem with paint worklets as I've

00:18:28,940 --> 00:18:35,150
described them is that they're just not

00:18:30,410 --> 00:18:37,400
well very flexible well as I described

00:18:35,150 --> 00:18:38,780
them you just you have to change the

00:18:37,400 --> 00:18:41,300
paint work look code itself to change

00:18:38,780 --> 00:18:43,340
its appearance and while that can work

00:18:41,300 --> 00:18:45,230
it's not very convenient and really just

00:18:43,340 --> 00:18:47,630
kind of a pain what if you wanted to

00:18:45,230 --> 00:18:49,430
reuse that same work lick code in

00:18:47,630 --> 00:18:51,430
different places on the same site what

00:18:49,430 --> 00:18:54,080
if you wanted to do wanted it to do

00:18:51,430 --> 00:18:56,300
basically the same thing but adapt it to

00:18:54,080 --> 00:18:58,400
different contexts solely by tweaking

00:18:56,300 --> 00:19:01,760
its appearance and CSS that'd be cool

00:18:58,400 --> 00:19:04,160
right guess what that is possible you

00:19:01,760 --> 00:19:05,990
can set you can set up your paint

00:19:04,160 --> 00:19:08,270
worklets so that their appearance can be

00:19:05,990 --> 00:19:10,040
altered by what are called custom CSS

00:19:08,270 --> 00:19:12,110
properties that you that you defined

00:19:10,040 --> 00:19:13,880
that are relevant to your paint worklet

00:19:12,110 --> 00:19:16,970
and this feature is not a part of the

00:19:13,880 --> 00:19:19,760
CSS paint API but rather another feature

00:19:16,970 --> 00:19:21,910
called the the custom properties or

00:19:19,760 --> 00:19:26,150
maybe just properties and values API

00:19:21,910 --> 00:19:28,100
seriously so let's go back to the CSS

00:19:26,150 --> 00:19:29,330
for the flashy paint worklet example

00:19:28,100 --> 00:19:31,940
from earlier

00:19:29,330 --> 00:19:33,950
what would the CSS for this look like if

00:19:31,940 --> 00:19:35,470
we could customize an aspect of its

00:19:33,950 --> 00:19:37,730
appearance through a custom property

00:19:35,470 --> 00:19:39,230
kind of something like this like if what

00:19:37,730 --> 00:19:41,480
if we wanted to control the size of the

00:19:39,230 --> 00:19:45,020
of the sun's radius right make that

00:19:41,480 --> 00:19:46,370
circle bigger if we wanted to well the

00:19:45,020 --> 00:19:48,560
the properties starting with double

00:19:46,370 --> 00:19:51,050
dashes is a custom property and when we

00:19:48,560 --> 00:19:53,270
set custom CSS properties on elements

00:19:51,050 --> 00:19:56,030
using a paint worklet we can access

00:19:53,270 --> 00:19:58,580
those values within that paint worklet

00:19:56,030 --> 00:20:00,860
and now this is where the power and

00:19:58,580 --> 00:20:02,390
practicality lies with this technology

00:20:00,860 --> 00:20:04,610
because if a paint work

00:20:02,390 --> 00:20:06,950
rendering can't be influenced by

00:20:04,610 --> 00:20:10,040
anything outside of the worklet code

00:20:06,950 --> 00:20:12,920
itself you'd have to change your worklet

00:20:10,040 --> 00:20:14,900
code every freakin time you wanted it to

00:20:12,920 --> 00:20:16,550
do something different or you'd have to

00:20:14,900 --> 00:20:18,470
make multiple versions of that same

00:20:16,550 --> 00:20:20,480
worklet in order to customize its

00:20:18,470 --> 00:20:23,690
appearance in CSS and that's just

00:20:20,480 --> 00:20:25,910
wasteful custom properties help us to

00:20:23,690 --> 00:20:29,450
make paint worklets infinitely more

00:20:25,910 --> 00:20:31,220
useful and reusable and they're like the

00:20:29,450 --> 00:20:33,110
hook and a good song that like just in a

00:20:31,220 --> 00:20:36,680
really good banging song that just makes

00:20:33,110 --> 00:20:38,210
it even better so the next step is to

00:20:36,680 --> 00:20:40,430
use a little thing called the properties

00:20:38,210 --> 00:20:43,280
and values API to establish the identity

00:20:40,430 --> 00:20:44,960
and shape of a custom property property

00:20:43,280 --> 00:20:46,460
in your application JavaScript like you

00:20:44,960 --> 00:20:48,350
would put this on the main thread in

00:20:46,460 --> 00:20:51,290
your app code and even though it's not

00:20:48,350 --> 00:20:53,750
strictly necessary to do this it's not a

00:20:51,290 --> 00:20:55,730
bad idea for a few reasons for one you

00:20:53,750 --> 00:20:57,380
can control what the data type is for

00:20:55,730 --> 00:20:59,360
the custom property via the syntax

00:20:57,380 --> 00:21:01,400
setting in this case you can see that

00:20:59,360 --> 00:21:03,590
we're specifying the property's value as

00:21:01,400 --> 00:21:06,320
an integer the value we set here is

00:21:03,590 --> 00:21:08,210
called a CSS syntax string and it helps

00:21:06,320 --> 00:21:10,640
the API to enforce what's considered a

00:21:08,210 --> 00:21:14,060
valid value for a given custom property

00:21:10,640 --> 00:21:16,130
and two we can decide whether or not the

00:21:14,060 --> 00:21:18,170
value for this property can be inherited

00:21:16,130 --> 00:21:18,680
by child elements using the inherits

00:21:18,170 --> 00:21:20,300
option

00:21:18,680 --> 00:21:21,980
I haven't found exactly where this is

00:21:20,300 --> 00:21:24,440
useful yet for paint worklets but I'm

00:21:21,980 --> 00:21:26,360
sure it's there somewhere I mean it's

00:21:24,440 --> 00:21:28,610
it's specified I'm sure it's useful and

00:21:26,360 --> 00:21:31,130
three we decide what the properties

00:21:28,610 --> 00:21:33,170
default value should be via the initial

00:21:31,130 --> 00:21:34,910
value option if that property is

00:21:33,170 --> 00:21:36,920
unspecified so that's kind of useful

00:21:34,910 --> 00:21:38,240
because properties have defaults that

00:21:36,920 --> 00:21:40,130
just sort of kick in if you don't

00:21:38,240 --> 00:21:43,280
specify them so we can do the same thing

00:21:40,130 --> 00:21:44,960
with our custom properties so what does

00:21:43,280 --> 00:21:47,780
it look like well you want paint

00:21:44,960 --> 00:21:50,750
worklets to access those custom property

00:21:47,780 --> 00:21:53,960
values it's not too ownerís really it's

00:21:50,750 --> 00:21:56,060
just a two-step process the first is to

00:21:53,960 --> 00:21:58,090
add a static getter method to your

00:21:56,060 --> 00:22:00,830
worklet class called input properties

00:21:58,090 --> 00:22:02,510
which returns an array of all the custom

00:22:00,830 --> 00:22:05,540
properties that we've registered and

00:22:02,510 --> 00:22:07,040
then in the worklet we can access these

00:22:05,540 --> 00:22:09,860
properties through a third argument in

00:22:07,040 --> 00:22:13,160
the paint method signature called

00:22:09,860 --> 00:22:14,870
properties unsurprisingly the arguments

00:22:13,160 --> 00:22:16,700
get method allows access

00:22:14,870 --> 00:22:19,430
to the custom property values passed in

00:22:16,700 --> 00:22:21,740
CSS here you can see that we like we

00:22:19,430 --> 00:22:23,870
pull it and then we cast it to an int I

00:22:21,740 --> 00:22:26,240
don't think the property properties and

00:22:23,870 --> 00:22:28,010
values API is at candid candidate

00:22:26,240 --> 00:22:30,770
recommendation so that might actually

00:22:28,010 --> 00:22:32,600
not be the final code for what that

00:22:30,770 --> 00:22:34,280
looks like

00:22:32,600 --> 00:22:35,840
but then we get it in there and then at

00:22:34,280 --> 00:22:38,450
this point we can then control the paint

00:22:35,840 --> 00:22:40,810
worklets presentation entirely with CSS

00:22:38,450 --> 00:22:43,130
and what we can achieve with this is

00:22:40,810 --> 00:22:45,860
super duper powerful when we

00:22:43,130 --> 00:22:47,630
parameterize paint worklets we make them

00:22:45,860 --> 00:22:49,610
customizable in ways we didn't even

00:22:47,630 --> 00:22:51,500
think was possible and here you can see

00:22:49,610 --> 00:22:54,950
that we can dynamically change the tile

00:22:51,500 --> 00:22:57,200
size of the blotto worklets output like

00:22:54,950 --> 00:22:58,670
we can on we can change the color as

00:22:57,200 --> 00:23:00,710
well as other influential properties

00:22:58,670 --> 00:23:03,470
like the amplitude the maximum o path

00:23:00,710 --> 00:23:06,790
opacity like the blend modes and stuff

00:23:03,470 --> 00:23:08,690
it's pretty cool we can make them fit

00:23:06,790 --> 00:23:10,490
practically anywhere and that's the

00:23:08,690 --> 00:23:12,530
beauty of generative artwork applied in

00:23:10,490 --> 00:23:13,910
this context it's one thing to generate

00:23:12,530 --> 00:23:16,010
art with JavaScript we've been doing

00:23:13,910 --> 00:23:17,780
that for a long time it's an entirely

00:23:16,010 --> 00:23:20,480
different thing to control it in this

00:23:17,780 --> 00:23:23,140
fashion and you can do it without having

00:23:20,480 --> 00:23:25,880
to tweak more than a couple properties

00:23:23,140 --> 00:23:29,570
so now that I've showed you all the cool

00:23:25,880 --> 00:23:32,510
stuff it's time I inform you of the

00:23:29,570 --> 00:23:34,400
unfortunate yet entirely predictable

00:23:32,510 --> 00:23:38,540
reality that you must eat your

00:23:34,400 --> 00:23:40,280
vegetables by which I mean it's time to

00:23:38,540 --> 00:23:41,690
tell your paint to tell you that paint

00:23:40,280 --> 00:23:44,750
worklets don't have solid browser

00:23:41,690 --> 00:23:46,160
support and that therefore that means

00:23:44,750 --> 00:23:48,380
you must treat them as a progressive

00:23:46,160 --> 00:23:48,830
enhancement and you'll need a back-up

00:23:48,380 --> 00:23:50,300
plan

00:23:48,830 --> 00:23:52,370
right so that's a lot of what we do on

00:23:50,300 --> 00:23:54,140
the web is feel like my official title

00:23:52,370 --> 00:23:58,250
is like back-up plan

00:23:54,140 --> 00:24:00,740
guy for everything furthermore because

00:23:58,250 --> 00:24:01,580
paint worklets are JavaScript you need

00:24:00,740 --> 00:24:04,130
that back-up plan

00:24:01,580 --> 00:24:05,690
even in browsers that do support them so

00:24:04,130 --> 00:24:06,770
support isn't terrible for the painting

00:24:05,690 --> 00:24:09,380
API when you look at the bigger picture

00:24:06,770 --> 00:24:11,240
in fact it's only one that's the only

00:24:09,380 --> 00:24:13,370
part of Houdini that currently is at the

00:24:11,240 --> 00:24:15,680
candidate recommendation stage at least

00:24:13,370 --> 00:24:17,660
at the time of this tables rendering but

00:24:15,680 --> 00:24:19,730
support for it just isn't universal so

00:24:17,660 --> 00:24:20,990
you need to know how to adapt and that

00:24:19,730 --> 00:24:23,780
said you shouldn't have to break your

00:24:20,990 --> 00:24:26,660
back to provide a fallback because CSS

00:24:23,780 --> 00:24:28,740
itself can usually solve this the thing

00:24:26,660 --> 00:24:31,679
to remember about resiliency

00:24:28,740 --> 00:24:34,289
when using the CSS pain API is that the

00:24:31,679 --> 00:24:35,970
order in which we specify CSS properties

00:24:34,289 --> 00:24:36,570
matters and that is what is going to

00:24:35,970 --> 00:24:39,029
save you

00:24:36,570 --> 00:24:41,549
going this route is usually enough for a

00:24:39,029 --> 00:24:44,760
fallback browsers that understand this

00:24:41,549 --> 00:24:46,980
API will use the second rule but those

00:24:44,760 --> 00:24:48,960
that don't will fall back to the first

00:24:46,980 --> 00:24:50,970
occurrence of that rule that they

00:24:48,960 --> 00:24:53,610
consider to be valid and in this case a

00:24:50,970 --> 00:24:55,020
browser like say Firefox which doesn't

00:24:53,610 --> 00:24:57,809
support paint worklets yet but it's

00:24:55,020 --> 00:24:59,580
coming will fall back to the first rule

00:24:57,809 --> 00:25:01,409
and most of the time this approach is

00:24:59,580 --> 00:25:03,809
enough the idea is that your fallback

00:25:01,409 --> 00:25:05,610
should resemble the paintwork tlit like

00:25:03,809 --> 00:25:06,929
someone right it doesn't usually have to

00:25:05,610 --> 00:25:08,760
be much more than an approximation

00:25:06,929 --> 00:25:10,710
because it's it's pretty rare that like

00:25:08,760 --> 00:25:12,899
somebody would see both renderings of

00:25:10,710 --> 00:25:15,990
like the fallback and the paintwork lid

00:25:12,899 --> 00:25:17,370
itself like next to each other so to

00:25:15,990 --> 00:25:19,679
illustrate this is my personal website

00:25:17,370 --> 00:25:20,909
in chrome with the paint worklet used in

00:25:19,679 --> 00:25:22,620
the backgrounds of different sections

00:25:20,909 --> 00:25:25,049
it's just like that kind of slapdash

00:25:22,620 --> 00:25:26,730
paintwork look that I had and now here

00:25:25,049 --> 00:25:29,190
it is in a browser that doesn't and it's

00:25:26,730 --> 00:25:31,070
not exactly the same but it's a

00:25:29,190 --> 00:25:33,600
reasonable like kind of approximation

00:25:31,070 --> 00:25:34,860
and it works well enough and just be

00:25:33,600 --> 00:25:36,690
sure that you're optimizing your

00:25:34,860 --> 00:25:38,340
fallback images that's the perf guy

00:25:36,690 --> 00:25:41,220
within me just can't help but tell you

00:25:38,340 --> 00:25:43,350
to do that if possible try to create

00:25:41,220 --> 00:25:44,970
like tileable smaller patterns to keep

00:25:43,350 --> 00:25:47,100
those fallback images as small as

00:25:44,970 --> 00:25:49,169
possible because simple paint worklets

00:25:47,100 --> 00:25:52,409
will usually just be smaller over the

00:25:49,169 --> 00:25:54,750
wire than images now for another

00:25:52,409 --> 00:25:56,610
question what if a paint work look just

00:25:54,750 --> 00:25:58,559
like fails to load for whatever reason

00:25:56,610 --> 00:26:00,539
and this is where promises are your

00:25:58,559 --> 00:26:02,940
friend you might recall that in order to

00:26:00,539 --> 00:26:05,090
load a paint work lift we have access to

00:26:02,940 --> 00:26:08,610
a promise when it completely loads or

00:26:05,090 --> 00:26:10,710
conversely when it fails to load and in

00:26:08,610 --> 00:26:13,590
this case we can compensate for this in

00:26:10,710 --> 00:26:15,240
the promises catch method which executes

00:26:13,590 --> 00:26:16,860
if the promise was rejected in this case

00:26:15,240 --> 00:26:18,809
if the paint work lead failed to load

00:26:16,860 --> 00:26:20,370
for some reason and if it does fail we

00:26:18,809 --> 00:26:22,649
can add a class the body element which

00:26:20,370 --> 00:26:24,950
we can then target with CSS to provide a

00:26:22,649 --> 00:26:24,950
fallback

00:26:25,020 --> 00:26:28,350
that's the SS would look something like

00:26:26,880 --> 00:26:31,289
this although that's a little weird

00:26:28,350 --> 00:26:32,850
I said body element so work with me with

00:26:31,289 --> 00:26:36,210
that inconsistency imagine it was

00:26:32,850 --> 00:26:37,470
applied to the element itself instead in

00:26:36,210 --> 00:26:39,510
the event that the paint work click

00:26:37,470 --> 00:26:41,100
fails to load we would still get a stall

00:26:39,510 --> 00:26:42,540
back background image that we can still

00:26:41,100 --> 00:26:44,610
use and it's important to note that

00:26:42,540 --> 00:26:47,220
least in chrome if a paint worklet fails

00:26:44,610 --> 00:26:48,810
to load the CSS only fallback for non

00:26:47,220 --> 00:26:51,900
supporting browsers described earlier

00:26:48,810 --> 00:26:53,550
will not kick in because that it still

00:26:51,900 --> 00:26:55,410
considers that paint syntax to be a

00:26:53,550 --> 00:26:56,490
valid value but that worklet hasn't

00:26:55,410 --> 00:26:59,070
loaded so you have to have a more

00:26:56,490 --> 00:27:00,510
specific rule to make that work so

00:26:59,070 --> 00:27:02,160
you'll need to provide an explicit

00:27:00,510 --> 00:27:05,640
fallback otherwise you just you'll just

00:27:02,160 --> 00:27:07,110
won't have a background at all okay most

00:27:05,640 --> 00:27:08,760
of the talks I give are about

00:27:07,110 --> 00:27:10,740
performance and I thought maybe I could

00:27:08,760 --> 00:27:14,910
get through this one without any perf

00:27:10,740 --> 00:27:17,160
talk but I was wrong it turns out that

00:27:14,910 --> 00:27:18,810
there's a couple things to keep in mind

00:27:17,160 --> 00:27:20,970
when it comes to keeping your paint work

00:27:18,810 --> 00:27:22,200
looks fast as well as being considerate

00:27:20,970 --> 00:27:24,420
with what with what can be a rather

00:27:22,200 --> 00:27:26,340
taxing API if it's not used carefully

00:27:24,420 --> 00:27:29,460
because if you don't you risk making the

00:27:26,340 --> 00:27:31,710
internet more like this for people so

00:27:29,460 --> 00:27:33,750
let's avoid that and talk about what you

00:27:31,710 --> 00:27:36,570
can do to make paint work let's work as

00:27:33,750 --> 00:27:38,820
optimally as they can because of their

00:27:36,570 --> 00:27:41,130
restricted scope paint worklets won't

00:27:38,820 --> 00:27:42,450
often be very large the ones I've

00:27:41,130 --> 00:27:45,780
written usually end up being less than

00:27:42,450 --> 00:27:47,640
two kilobytes before compression but if

00:27:45,780 --> 00:27:50,580
you can help it do not run your

00:27:47,640 --> 00:27:54,450
paintwork le'ts through Babel that is no

00:27:50,580 --> 00:27:56,580
nose no so let's look at the impact as

00:27:54,450 --> 00:27:58,290
an example that Babel transforms have by

00:27:56,580 --> 00:28:00,120
taking the circuitry worklet from the

00:27:58,290 --> 00:28:01,710
beginning of this talk even when it's uh

00:28:00,120 --> 00:28:02,940
notified it's very small and it also

00:28:01,710 --> 00:28:05,970
works in every browser that supports

00:28:02,940 --> 00:28:07,920
paint worklets without babbles help

00:28:05,970 --> 00:28:10,430
paint work 'let's do not need to be

00:28:07,920 --> 00:28:13,200
transformed in order for them to work

00:28:10,430 --> 00:28:14,940
now here's that same worklet after babel

00:28:13,200 --> 00:28:16,290
transforms it and if you can't read this

00:28:14,940 --> 00:28:18,540
code that's kind of the point there's a

00:28:16,290 --> 00:28:21,060
lot of cruft here which affects parsing

00:28:18,540 --> 00:28:22,890
compilation and execution time and the

00:28:21,060 --> 00:28:24,990
omnipresent question of web development

00:28:22,890 --> 00:28:27,030
seems to inevitably be should this work

00:28:24,990 --> 00:28:31,410
in every browser and in this case there

00:28:27,030 --> 00:28:33,600
are two answers no and hell no the Omni

00:28:31,410 --> 00:28:36,330
from the paint worklets aren't supported

00:28:33,600 --> 00:28:37,800
in all modern browsers yet so we don't

00:28:36,330 --> 00:28:39,900
need to treat them with the web

00:28:37,800 --> 00:28:42,930
compatibility mindset that we clung to

00:28:39,900 --> 00:28:44,760
in the 2000s if you must must

00:28:42,930 --> 00:28:46,530
if you must cut processed paint worklets

00:28:44,760 --> 00:28:48,150
with babel perhaps out of a matter of

00:28:46,530 --> 00:28:49,740
convenience and i can understand and

00:28:48,150 --> 00:28:51,720
sure you know how to configure it to

00:28:49,740 --> 00:28:53,730
minimize transforms I tend to avoid

00:28:51,720 --> 00:28:55,399
including them in the asset graph of any

00:28:53,730 --> 00:28:57,200
bundler until I know

00:28:55,399 --> 00:28:59,359
be able to process them the way I expect

00:28:57,200 --> 00:29:01,190
and this last piece of perfect base I

00:28:59,359 --> 00:29:02,809
have is to be considerate of your users

00:29:01,190 --> 00:29:05,960
particularly mobile ones

00:29:02,809 --> 00:29:07,879
not everyone has a pixel 3 or a 20 18

00:29:05,960 --> 00:29:08,929
macbook pro that can obliterate whatever

00:29:07,879 --> 00:29:11,149
comes down the rendering pipeline

00:29:08,929 --> 00:29:12,669
without turning into a fully functioning

00:29:11,149 --> 00:29:15,139
panini grill

00:29:12,669 --> 00:29:17,210
so when paint work let's draw in normal

00:29:15,139 --> 00:29:18,950
scenarios such as unload or when the

00:29:17,210 --> 00:29:20,479
orientation of the device changes they

00:29:18,950 --> 00:29:23,299
can be resource intensive but not

00:29:20,479 --> 00:29:25,309
ludicrously so but that does not mean

00:29:23,299 --> 00:29:26,989
that even though worklets do their work

00:29:25,309 --> 00:29:28,309
off the main thread like web workers

00:29:26,989 --> 00:29:30,469
that they can't impact page

00:29:28,309 --> 00:29:31,999
responsiveness this screenshot is from a

00:29:30,469 --> 00:29:34,609
performance profiling session where a

00:29:31,999 --> 00:29:36,580
browser was continuously resizing and a

00:29:34,609 --> 00:29:39,799
paint worklet was redrawing every time

00:29:36,580 --> 00:29:41,299
they worklets will redraw any time the

00:29:39,799 --> 00:29:42,979
dimensions of their container change or

00:29:41,299 --> 00:29:45,320
if CSS properties on that container

00:29:42,979 --> 00:29:46,969
change so please resist the temptation

00:29:45,320 --> 00:29:49,039
to like do stuff like make them redraw

00:29:46,969 --> 00:29:51,499
constantly to like make them like

00:29:49,039 --> 00:29:54,169
animate inefficiently or otherwise for

00:29:51,499 --> 00:29:55,999
no real sensible reason and additionally

00:29:54,169 --> 00:29:57,919
make a call on when it's not appropriate

00:29:55,999 --> 00:29:59,210
to use these things we can't look at the

00:29:57,919 --> 00:30:01,429
device's battery levels since the

00:29:59,210 --> 00:30:03,649
battery status API is no longer a thing

00:30:01,429 --> 00:30:05,570
but we do have another signal we can

00:30:03,649 --> 00:30:07,249
look at and that is the device memory

00:30:05,570 --> 00:30:08,719
API the amount of memory that the

00:30:07,249 --> 00:30:10,759
approximate amount of memory that the

00:30:08,719 --> 00:30:13,519
device has and as usual it's not

00:30:10,759 --> 00:30:15,469
supported everywhere but checking for

00:30:13,519 --> 00:30:17,389
support is as trivial as seeing if

00:30:15,469 --> 00:30:19,039
navigator dot device memory is defined

00:30:17,389 --> 00:30:20,989
and if it is we can get the course

00:30:19,039 --> 00:30:24,889
amount of memory and here we've decided

00:30:20,989 --> 00:30:26,389
that if a device has at least 4

00:30:24,889 --> 00:30:27,950
gigabytes or more of memory we'll

00:30:26,389 --> 00:30:29,719
register that paint worklet and then we

00:30:27,950 --> 00:30:31,429
can or otherwise we can like do the

00:30:29,719 --> 00:30:34,460
class hook where we decide to go to a

00:30:31,429 --> 00:30:35,749
fallback and in any case if you're

00:30:34,460 --> 00:30:37,070
concerned that any part of your paint

00:30:35,749 --> 00:30:39,559
where click code is inefficient

00:30:37,070 --> 00:30:41,269
anyway if you profile in chrome dev

00:30:39,559 --> 00:30:43,039
tools in the performance profiler and

00:30:41,269 --> 00:30:45,830
then after that go to the sources tab

00:30:43,039 --> 00:30:47,960
you can see the impact of each line like

00:30:45,830 --> 00:30:50,029
how much execution time and then you can

00:30:47,960 --> 00:30:52,249
just decide whether or not that you want

00:30:50,029 --> 00:30:57,229
to address any suboptimal behavior if

00:30:52,249 --> 00:30:58,669
you can well it's that time but before I

00:30:57,229 --> 00:31:00,289
properly part from you all I want to

00:30:58,669 --> 00:31:02,929
call it a few resources I think are well

00:31:00,289 --> 00:31:04,519
worth your time first off you know

00:31:02,929 --> 00:31:06,470
Kravitz has been jamming on paint

00:31:04,519 --> 00:31:08,419
worklets for a long time

00:31:06,470 --> 00:31:10,759
and if you feel like my quick intro to

00:31:08,419 --> 00:31:11,659
the technology just didn't cut it for

00:31:10,759 --> 00:31:14,149
you I understand

00:31:11,659 --> 00:31:16,460
then you Anna's article on the on the AP

00:31:14,149 --> 00:31:18,379
I just cannot fail you she is just it's

00:31:16,460 --> 00:31:20,360
superb at describing these things and

00:31:18,379 --> 00:31:22,250
secondly Sam Richards did a more broadly

00:31:20,360 --> 00:31:24,620
scoped talk on Houdini in general last

00:31:22,250 --> 00:31:26,059
year at CSS conf a you some of what he's

00:31:24,620 --> 00:31:28,129
talked about there may have changed a

00:31:26,059 --> 00:31:29,690
bit since as Houdini is evolving but

00:31:28,129 --> 00:31:31,669
it's still a great talk for anyone who

00:31:29,690 --> 00:31:33,049
wants to know more about this awesome

00:31:31,669 --> 00:31:35,659
set of API is that are coming down the

00:31:33,049 --> 00:31:38,419
pike and now remember when I said there

00:31:35,659 --> 00:31:40,159
was a surprise here it is if you're

00:31:38,419 --> 00:31:41,840
interested in seeing an open source

00:31:40,159 --> 00:31:43,700
showcase of the paintwork let's I've

00:31:41,840 --> 00:31:46,220
written you can check out a site I've

00:31:43,700 --> 00:31:48,590
made called paint lets its paint let's

00:31:46,220 --> 00:31:51,080
go Roku app calm but I got a little tiny

00:31:48,590 --> 00:31:53,629
URL thing there and I'll post the slide

00:31:51,080 --> 00:31:55,850
deck later this will show each paint

00:31:53,629 --> 00:31:57,320
worklet and it's custom properties so

00:31:55,850 --> 00:31:58,490
you can experiment with each one and

00:31:57,320 --> 00:32:00,200
they're free to download you can just

00:31:58,490 --> 00:32:01,340
use them if you want I don't care if you

00:32:00,200 --> 00:32:04,700
credit them I don't care what you do

00:32:01,340 --> 00:32:08,299
with them and Plus each paint workflow

00:32:04,700 --> 00:32:09,710
yeah I just said that so and if you have

00:32:08,299 --> 00:32:12,649
a paintwork look that you've written

00:32:09,710 --> 00:32:14,179
that you think is pretty cool I welcome

00:32:12,649 --> 00:32:15,799
you to submit a pull request to the repo

00:32:14,179 --> 00:32:17,389
or just show it to me and I can and I

00:32:15,799 --> 00:32:19,519
can pull it in for you because I'm kind

00:32:17,389 --> 00:32:21,950
of picky about how that gets done so if

00:32:19,519 --> 00:32:23,960
you'd like want that cool let's let's

00:32:21,950 --> 00:32:25,970
talk there's I'll post this you'll know

00:32:23,960 --> 00:32:27,379
where this is all at pretty soon and of

00:32:25,970 --> 00:32:28,549
course at the time I thought I was being

00:32:27,379 --> 00:32:30,289
a clever little

00:32:28,549 --> 00:32:32,029
when I wrote paint --let's but it

00:32:30,289 --> 00:32:34,730
unsurprisingly turns out that someone

00:32:32,029 --> 00:32:38,120
had the same idea and before I did and

00:32:34,730 --> 00:32:40,039
that person was not surprisingly Yoona

00:32:38,120 --> 00:32:41,960
Kravitz so if you want a different take

00:32:40,039 --> 00:32:43,850
on the idea check out her extra dot CSS

00:32:41,960 --> 00:32:45,500
site has some cool things that you can

00:32:43,850 --> 00:32:47,509
check out and pull into your project as

00:32:45,500 --> 00:32:50,029
well and with that I thank you for your

00:32:47,509 --> 00:32:51,830
time your interest your everlasting love

00:32:50,029 --> 00:32:53,990
of all things web which gives me no

00:32:51,830 --> 00:32:56,019
shortage of hope and admiration for this

00:32:53,990 --> 00:32:58,639
community and for welcoming me into your

00:32:56,019 --> 00:33:01,519
amazingly beautiful and historically

00:32:58,639 --> 00:33:04,279
awesome city here are my slides which

00:33:01,519 --> 00:33:07,009
will be available at that URL hopefully

00:33:04,279 --> 00:33:07,490
shortly if I can get Wi-Fi thing figured

00:33:07,009 --> 00:33:10,790
out

00:33:07,490 --> 00:33:17,470
and uh thank you all so very very much

00:33:10,790 --> 00:33:17,470

YouTube URL: https://www.youtube.com/watch?v=VccJldua8tc


