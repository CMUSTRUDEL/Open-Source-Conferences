Title: CSS Architecture for Modern Web Applications by Mike Riethmuller | CSSConf BP 2019
Publication date: 2019-10-30
Playlist: CSSConf Budapest 2019
Description: 
	http://cssconfbp.rocks/speakers/mike/

How we build and maintain style systems has changed in the last few year. Tasks that once required specific knowledge and careful management are now trusted to build tools and frameworks with better precision than was possible using conventions like BEM. Are all these conventions dead? If so, what has replaced them? Or, are some lessons from the past still relevant?

Mike is an independent web developer from Australia who has worked on some of Australiaâ€™s largest websites as well as some of the smallest community sites. He loves learning new things and finding techniques that challenge what we think is best practice. And when heâ€™s not exploring the digital landscape, he likes to explore the world. Currently trying to find a way to do both those things at the same time.
Captions: 
	00:00:01,700 --> 00:00:09,030
thank you although this Intex of CSS is

00:00:07,200 --> 00:00:10,380
relatively easy to learn and understand

00:00:09,030 --> 00:00:12,360
development teams around the world and

00:00:10,380 --> 00:00:14,790
especially large ones struggle to define

00:00:12,360 --> 00:00:17,880
and implement consistent maintainable

00:00:14,790 --> 00:00:19,500
and scalable CSS architecture now this

00:00:17,880 --> 00:00:20,880
isn't a new problem and in fact you

00:00:19,500 --> 00:00:23,160
probably know we have some fairly

00:00:20,880 --> 00:00:25,109
reliable and well tested solutions for

00:00:23,160 --> 00:00:26,400
these problems and you might even be

00:00:25,109 --> 00:00:28,529
surprised to learn that some of these

00:00:26,400 --> 00:00:31,500
solutions actually predates the SS

00:00:28,529 --> 00:00:33,110
itself but despite this unfortunately

00:00:31,500 --> 00:00:35,280
these solutions are often poorly applied

00:00:33,110 --> 00:00:37,320
or in the worst case they just simply

00:00:35,280 --> 00:00:40,140
disregarded in the context of modern

00:00:37,320 --> 00:00:41,579
JavaScript applications we're gonna

00:00:40,140 --> 00:00:43,230
discuss some of the reasons for this and

00:00:41,579 --> 00:00:44,280
what we can do about it and in the

00:00:43,230 --> 00:00:46,530
process of that we're going to take a

00:00:44,280 --> 00:00:48,239
look at some of the history of CSS

00:00:46,530 --> 00:00:49,590
architecture because I think that

00:00:48,239 --> 00:00:52,320
there'll be people in the audience today

00:00:49,590 --> 00:00:53,879
who don't have that context and sadly I

00:00:52,320 --> 00:00:55,199
think that the CSS community has done

00:00:53,879 --> 00:00:56,940
sometimes a pretty bad job at

00:00:55,199 --> 00:00:59,100
articulating this knowledge in ways that

00:00:56,940 --> 00:01:01,379
are relevant and accessible to new

00:00:59,100 --> 00:01:03,840
developers so let's try and do something

00:01:01,379 --> 00:01:08,010
about that today we're gonna start our

00:01:03,840 --> 00:01:09,479
story in 2009 yeah it was only ten years

00:01:08,010 --> 00:01:11,970
ago but it was a completely different

00:01:09,479 --> 00:01:13,590
time for front-end web development our

00:01:11,970 --> 00:01:16,650
chrome was virtually insignificant it

00:01:13,590 --> 00:01:18,240
had a market share of less than 1% the

00:01:16,650 --> 00:01:20,369
words responsive design didn't mean

00:01:18,240 --> 00:01:21,630
anything either support for media

00:01:20,369 --> 00:01:24,450
queries wasn't going to properly land

00:01:21,630 --> 00:01:26,729
until around 2010 and that would be the

00:01:24,450 --> 00:01:29,009
same year that even Marco would coin the

00:01:26,729 --> 00:01:29,549
words responsive web design in the

00:01:29,009 --> 00:01:32,280
now-famous

00:01:29,549 --> 00:01:34,350
a list a part article surprising to me

00:01:32,280 --> 00:01:36,299
when I did my research bootstrap was

00:01:34,350 --> 00:01:38,130
also yet to make its mark on the web

00:01:36,299 --> 00:01:41,579
it wasn't first published until early

00:01:38,130 --> 00:01:43,079
2011 and for the most part the few open

00:01:41,579 --> 00:01:45,420
source UI libraries that we had

00:01:43,079 --> 00:01:47,640
available to us at the time seemed to

00:01:45,420 --> 00:01:50,729
emulate the desktop interfaces of the

00:01:47,640 --> 00:01:52,740
early 2000s now shadow out if anyone

00:01:50,729 --> 00:01:55,680
remembers the Yui library it has an age

00:01:52,740 --> 00:01:58,710
particularly well but in 2006 it was

00:01:55,680 --> 00:02:00,000
absolutely indispensable the weather

00:01:58,710 --> 00:02:03,180
this time was also exceptionally

00:02:00,000 --> 00:02:05,610
fragmented between late 2009 and early

00:02:03,180 --> 00:02:07,710
2012 all of the major browsers were

00:02:05,610 --> 00:02:10,530
battling for market share we also had

00:02:07,710 --> 00:02:12,810
introduction of mobile browsers around

00:02:10,530 --> 00:02:13,650
this time as well and during that battle

00:02:12,810 --> 00:02:17,099
none of them really

00:02:13,650 --> 00:02:19,560
less than 10% of that market share the

00:02:17,099 --> 00:02:20,579
web was also maturing internet usage in

00:02:19,560 --> 00:02:23,790
developed countries had reached about

00:02:20,579 --> 00:02:25,230
70% of the population which was nice if

00:02:23,790 --> 00:02:28,799
you were living in a developed country I

00:02:25,230 --> 00:02:30,510
guess 2009 was also the year that we got

00:02:28,799 --> 00:02:32,250
preprocessors so we got less and sass

00:02:30,510 --> 00:02:34,739
and that's the old version of sass not

00:02:32,250 --> 00:02:36,090
the newest CSS one so anyway all this

00:02:34,739 --> 00:02:37,739
stuff was happening and I can't be sure

00:02:36,090 --> 00:02:39,030
which if any of these factors had

00:02:37,739 --> 00:02:40,170
anything to do with it but it was around

00:02:39,030 --> 00:02:42,569
this time too that there was this

00:02:40,170 --> 00:02:46,680
explosion of ideas and thinking around

00:02:42,569 --> 00:02:49,290
CSS architecture so in 2009 Nicole

00:02:46,680 --> 00:02:51,389
Sullivan introduced the idea of oo CSS

00:02:49,290 --> 00:02:53,849
or object-oriented CSS and this taught

00:02:51,389 --> 00:02:56,250
us a lot the main idea was to separate

00:02:53,849 --> 00:02:58,379
the layout styles from the visual styles

00:02:56,250 --> 00:03:01,049
which he called skins and the other

00:02:58,379 --> 00:03:02,639
really important idea of Ojo CSS was to

00:03:01,049 --> 00:03:04,950
treat class names like these objects

00:03:02,639 --> 00:03:07,530
that we can extend and modify in

00:03:04,950 --> 00:03:09,629
different ways as you might have guessed

00:03:07,530 --> 00:03:11,370
and as the name suggests one of the key

00:03:09,629 --> 00:03:13,799
influences for this concept was

00:03:11,370 --> 00:03:15,569
object-oriented programming now I don't

00:03:13,799 --> 00:03:17,310
know how many of you have done any

00:03:15,569 --> 00:03:18,750
object-oriented programming but for

00:03:17,310 --> 00:03:21,540
those that haven't it's a way of writing

00:03:18,750 --> 00:03:25,440
programs with properties and functions

00:03:21,540 --> 00:03:27,959
that can sort of emulate or represent

00:03:25,440 --> 00:03:30,449
objects in the real world so I want to

00:03:27,959 --> 00:03:33,629
give you an example of this so I might

00:03:30,449 --> 00:03:35,159
have a user object in an application and

00:03:33,629 --> 00:03:37,889
it might have properties like a user

00:03:35,159 --> 00:03:40,859
name and it might have a flag which says

00:03:37,889 --> 00:03:42,510
whether that user is logged in or not it

00:03:40,859 --> 00:03:43,889
might have functions as well so if I

00:03:42,510 --> 00:03:46,079
want to login a use of the functions

00:03:43,889 --> 00:03:49,500
would like typically change one of the

00:03:46,079 --> 00:03:51,150
values here so my logged in function

00:03:49,500 --> 00:03:52,620
just changed the value of logged in to

00:03:51,150 --> 00:03:53,190
true I should probably check a password

00:03:52,620 --> 00:03:55,919
or something

00:03:53,190 --> 00:03:57,690
but I think you get the example now when

00:03:55,919 --> 00:04:00,269
we group these together in an object

00:03:57,690 --> 00:04:02,940
like this many languages call this a

00:04:00,269 --> 00:04:04,859
class and this is how you write one in

00:04:02,940 --> 00:04:07,290
JavaScript and an interesting thing

00:04:04,859 --> 00:04:10,530
about a class is when we have a class we

00:04:07,290 --> 00:04:13,680
can instantiate a new object so I could

00:04:10,530 --> 00:04:15,120
say user Mike equals a new user and then

00:04:13,680 --> 00:04:16,709
I can call the login method for that

00:04:15,120 --> 00:04:19,139
specific user and that user will be

00:04:16,709 --> 00:04:21,359
logged in in my application so that's it

00:04:19,139 --> 00:04:23,099
that's sort of object-oriented

00:04:21,359 --> 00:04:24,810
programming in a little over two slides

00:04:23,099 --> 00:04:26,370
you're all experts now but you're

00:04:24,810 --> 00:04:27,000
probably thinking like this is great but

00:04:26,370 --> 00:04:28,110
what in

00:04:27,000 --> 00:04:30,120
in the world does this have to do with

00:04:28,110 --> 00:04:33,060
HTML and CSS right they're completely

00:04:30,120 --> 00:04:34,500
different but perhaps they're not so

00:04:33,060 --> 00:04:37,830
different I could give you a different

00:04:34,500 --> 00:04:39,750
type of example so I could have a button

00:04:37,830 --> 00:04:42,810
object and it might have properties like

00:04:39,750 --> 00:04:45,630
type and value and it might have methods

00:04:42,810 --> 00:04:48,450
or functions like on click now this is

00:04:45,630 --> 00:04:50,160
also a representation of an object now

00:04:48,450 --> 00:04:51,900
admittedly it is a slightly different

00:04:50,160 --> 00:04:54,150
example than the one I gave you before

00:04:51,900 --> 00:04:56,550
we're not writing a class we're creating

00:04:54,150 --> 00:04:59,760
a new instance of that object by writing

00:04:56,550 --> 00:05:02,130
HTML but somewhere in the browser's own

00:04:59,760 --> 00:05:05,010
source code is a representation of a

00:05:02,130 --> 00:05:06,240
button object and went once the HTML is

00:05:05,010 --> 00:05:08,400
passed and understood by the browser

00:05:06,240 --> 00:05:09,930
it's going to make a call to create a

00:05:08,400 --> 00:05:12,060
new button with the properties that we

00:05:09,930 --> 00:05:15,090
set in the HTML something probably looks

00:05:12,060 --> 00:05:17,010
exactly like this so what should be

00:05:15,090 --> 00:05:18,600
apparent here is elements in HTML or

00:05:17,010 --> 00:05:21,300
more specifically the Dom have this

00:05:18,600 --> 00:05:22,890
object oriented model it's inherently

00:05:21,300 --> 00:05:24,390
present and we can't really step outside

00:05:22,890 --> 00:05:26,430
of it so it probably should influence

00:05:24,390 --> 00:05:28,740
some of how we look at style

00:05:26,430 --> 00:05:30,330
architecture on the web so let's take a

00:05:28,740 --> 00:05:31,950
look at some other sort of like

00:05:30,330 --> 00:05:33,540
fundamental features of object-oriented

00:05:31,950 --> 00:05:37,800
programming and how they relate more

00:05:33,540 --> 00:05:39,300
directly to CSS so in object-oriented

00:05:37,800 --> 00:05:40,380
programming another really important

00:05:39,300 --> 00:05:42,960
feature that I want to mention is that

00:05:40,380 --> 00:05:44,970
classes can be extended when you extend

00:05:42,960 --> 00:05:46,800
a class it's going to inherit properties

00:05:44,970 --> 00:05:48,690
from the parent object so in this

00:05:46,800 --> 00:05:50,220
example the button component is going to

00:05:48,690 --> 00:05:52,020
inherit some properties from reacted or

00:05:50,220 --> 00:05:53,370
component that's if you've written any

00:05:52,020 --> 00:05:54,990
react this is where it gets its life

00:05:53,370 --> 00:05:56,610
cycle methods and other things all of

00:05:54,990 --> 00:06:00,150
this sort of like happens a little bit

00:05:56,610 --> 00:06:01,890
magically so most object-oriented

00:06:00,150 --> 00:06:03,060
languages support this kind of

00:06:01,890 --> 00:06:04,229
inheritance and you probably know that

00:06:03,060 --> 00:06:06,870
when you get something that you don't

00:06:04,229 --> 00:06:09,570
want you override it it turns out that

00:06:06,870 --> 00:06:11,250
CSS also supports something similar to

00:06:09,570 --> 00:06:13,200
this kind of inheritance so in this

00:06:11,250 --> 00:06:15,330
example here we've got background purple

00:06:13,200 --> 00:06:17,010
and text tomato classes applied to the

00:06:15,330 --> 00:06:18,510
paragraph and we know that it's going to

00:06:17,010 --> 00:06:21,479
have properties from both of those

00:06:18,510 --> 00:06:23,220
classes so this is kind of almost a

00:06:21,479 --> 00:06:25,500
little bit like saying text tomato

00:06:23,220 --> 00:06:27,120
extends background purple it's going to

00:06:25,500 --> 00:06:28,530
inherit all of the properties from the

00:06:27,120 --> 00:06:31,410
parent class unless we explicitly

00:06:28,530 --> 00:06:33,720
overwrite them in CSS and you'll all

00:06:31,410 --> 00:06:35,610
know how to do that and because CSS is

00:06:33,720 --> 00:06:37,080
decorative it's actually often harder to

00:06:35,610 --> 00:06:38,880
work out which is the parent class in

00:06:37,080 --> 00:06:40,950
this example that can depend on the

00:06:38,880 --> 00:06:43,770
Cascade and the HTML and other things

00:06:40,950 --> 00:06:45,180
so we all know that this can get pretty

00:06:43,770 --> 00:06:46,500
complicated right and when there's a

00:06:45,180 --> 00:06:48,510
risk of inheriting something that you

00:06:46,500 --> 00:06:50,130
didn't intend and you're probably

00:06:48,510 --> 00:06:52,580
thinking I'll CSS you scamp this

00:06:50,130 --> 00:06:55,650
wouldn't happen in any other language

00:06:52,580 --> 00:06:57,450
except it does and one of the challenges

00:06:55,650 --> 00:06:59,460
with object-oriented programming is that

00:06:57,450 --> 00:07:01,920
changes to the parent object can cascade

00:06:59,460 --> 00:07:04,950
down and have unintended consequences on

00:07:01,920 --> 00:07:09,360
child items does that sound familiar to

00:07:04,950 --> 00:07:11,130
anyone so coincidentally also in 2009

00:07:09,360 --> 00:07:12,870
computer scientist Joe Armstrong wrote

00:07:11,130 --> 00:07:14,220
in the book coders at work that the

00:07:12,870 --> 00:07:16,500
problem with object-oriented programming

00:07:14,220 --> 00:07:18,750
was you wanted a banana but what you got

00:07:16,500 --> 00:07:20,850
was a gorilla holding a banana and the

00:07:18,750 --> 00:07:22,620
entire jungle now there's many

00:07:20,850 --> 00:07:24,780
variations of this statement but what it

00:07:22,620 --> 00:07:25,890
means is when done badly classes in

00:07:24,780 --> 00:07:27,480
object-oriented programming and

00:07:25,890 --> 00:07:29,490
needlessly connected to all of these

00:07:27,480 --> 00:07:31,080
other things in the code you start

00:07:29,490 --> 00:07:33,390
having to override properties that you

00:07:31,080 --> 00:07:34,560
didn't intend to inherit and it starts

00:07:33,390 --> 00:07:36,600
to feel like you're carrying the legacy

00:07:34,560 --> 00:07:38,970
of the entire application any time you

00:07:36,600 --> 00:07:41,820
write something new once again that

00:07:38,970 --> 00:07:43,320
should be feeling familiar as it turns

00:07:41,820 --> 00:07:45,180
out there is also a well-established

00:07:43,320 --> 00:07:46,950
convention for avoiding this problem in

00:07:45,180 --> 00:07:47,520
object-oriented programming and you

00:07:46,950 --> 00:07:49,710
might have heard of the phrase

00:07:47,520 --> 00:07:51,390
composition over inheritance but what

00:07:49,710 --> 00:07:53,310
this means is that by combining these

00:07:51,390 --> 00:07:55,740
smaller independent and sometimes more

00:07:53,310 --> 00:07:57,990
abstract classes rather than just sort

00:07:55,740 --> 00:07:59,760
of in inheriting something and changing

00:07:57,990 --> 00:08:02,070
an existing object we end up with these

00:07:59,760 --> 00:08:04,430
smaller self-contained objects and this

00:08:02,070 --> 00:08:07,860
can help to reduce those unintended

00:08:04,430 --> 00:08:10,260
behaviors as a result of inheritance so

00:08:07,860 --> 00:08:11,880
in other words it's harder to turn

00:08:10,260 --> 00:08:14,010
something into something it's not

00:08:11,880 --> 00:08:16,170
than it is to build something new from a

00:08:14,010 --> 00:08:18,570
set of well considered and abstract

00:08:16,170 --> 00:08:20,100
building blocks that's how I like to

00:08:18,570 --> 00:08:23,250
think of it and that's how I like to

00:08:20,100 --> 00:08:26,460
think of CSS as well so object oriented

00:08:23,250 --> 00:08:28,170
CSS had this idea of abstract building

00:08:26,460 --> 00:08:30,270
blocks but I found that we're not really

00:08:28,170 --> 00:08:31,650
very good at considering what it is that

00:08:30,270 --> 00:08:33,750
makes an abstract building block in

00:08:31,650 --> 00:08:35,520
modern JavaScript applications and I

00:08:33,750 --> 00:08:37,229
want to ask the audience how reusable

00:08:35,520 --> 00:08:38,729
were the components in the last

00:08:37,229 --> 00:08:41,430
JavaScript application you've got to

00:08:38,729 --> 00:08:44,760
work on and I want to ask why is it so

00:08:41,430 --> 00:08:47,970
damn hard to make reusable components in

00:08:44,760 --> 00:08:50,910
JavaScript it really is so you might

00:08:47,970 --> 00:08:52,800
have seen this slide before the idea

00:08:50,910 --> 00:08:53,750
here is basically that we reject the

00:08:52,800 --> 00:08:55,820
separation of concern

00:08:53,750 --> 00:08:57,230
along these technology boundaries and

00:08:55,820 --> 00:08:59,210
instead that maybe components make a

00:08:57,230 --> 00:09:01,370
better separation of concerns and this

00:08:59,210 --> 00:09:03,350
idea resonated with a lot of people and

00:09:01,370 --> 00:09:05,390
I understand why I kind of agree with

00:09:03,350 --> 00:09:06,770
this and I've been co-locating a style

00:09:05,390 --> 00:09:08,840
sheets and JavaScript files for a long

00:09:06,770 --> 00:09:11,180
time but I feel like we've rushed to

00:09:08,840 --> 00:09:12,530
this without necessarily considering

00:09:11,180 --> 00:09:15,560
what is it about components that make

00:09:12,530 --> 00:09:17,810
them a good set or a good separation of

00:09:15,560 --> 00:09:20,030
concerns and when I think about that I

00:09:17,810 --> 00:09:22,430
think that good abstract building blocks

00:09:20,030 --> 00:09:24,260
for me the answer is not really as

00:09:22,430 --> 00:09:25,580
simple as the visual boundaries of a

00:09:24,260 --> 00:09:26,870
component you can't just draw a box

00:09:25,580 --> 00:09:29,270
around the design and be done with it

00:09:26,870 --> 00:09:32,750
and once again I feel like we have some

00:09:29,270 --> 00:09:35,240
answers to this problem in the history

00:09:32,750 --> 00:09:37,640
of CSS architecture so the meteor object

00:09:35,240 --> 00:09:39,470
was a classic example of this idea of an

00:09:37,640 --> 00:09:40,670
abstract building block and it was the

00:09:39,470 --> 00:09:43,520
probably the poster child of

00:09:40,670 --> 00:09:44,900
object-oriented CSS the idea is that you

00:09:43,520 --> 00:09:46,370
have like this title in this image and

00:09:44,900 --> 00:09:48,170
the image might be positioned to the

00:09:46,370 --> 00:09:50,480
left or the right and you might have a

00:09:48,170 --> 00:09:52,310
date or you might not it doesn't really

00:09:50,480 --> 00:09:53,720
matter the point is that the layout is

00:09:52,310 --> 00:09:54,890
separate from the content there's just

00:09:53,720 --> 00:09:56,510
these slots that the content gets

00:09:54,890 --> 00:09:58,370
rendered into and with these basic

00:09:56,510 --> 00:09:59,480
patterns and a few variations on this we

00:09:58,370 --> 00:10:01,880
can create a whole range of different

00:09:59,480 --> 00:10:04,160
types of content including user profiles

00:10:01,880 --> 00:10:06,740
comments it's the basic building block

00:10:04,160 --> 00:10:07,880
for sites like Twitter Facebook once you

00:10:06,740 --> 00:10:10,190
start looking for this on the web you'll

00:10:07,880 --> 00:10:11,930
see it absolutely everywhere and we can

00:10:10,190 --> 00:10:13,580
apply this concept to modern JavaScript

00:10:11,930 --> 00:10:16,010
applications too by thinking about the

00:10:13,580 --> 00:10:19,880
different types of responsibilities that

00:10:16,010 --> 00:10:22,580
UI components have so object oriented

00:10:19,880 --> 00:10:23,870
CSS gave us layouts and skins and I want

00:10:22,580 --> 00:10:25,370
to talk about some of some different

00:10:23,870 --> 00:10:28,040
types of components the first one I want

00:10:25,370 --> 00:10:30,020
to introduce you to is layout components

00:10:28,040 --> 00:10:31,550
now layout components are responsible

00:10:30,020 --> 00:10:33,620
for the positioning and spacing of

00:10:31,550 --> 00:10:35,660
themselves as well as the items inside

00:10:33,620 --> 00:10:38,120
them I have some tips for working with

00:10:35,660 --> 00:10:40,010
layout components so the first one is

00:10:38,120 --> 00:10:42,190
that layout components should own both

00:10:40,010 --> 00:10:45,020
sides of the parent-child relationship

00:10:42,190 --> 00:10:47,660
and what I mean by this is in modern CSS

00:10:45,020 --> 00:10:50,150
right in in layout in modern CSS there's

00:10:47,660 --> 00:10:52,100
usually a flex container and a flex item

00:10:50,150 --> 00:10:53,690
in a grid container and a grid item

00:10:52,100 --> 00:10:55,250
right there's these two things parent

00:10:53,690 --> 00:10:57,770
and child which together are responsible

00:10:55,250 --> 00:10:59,630
for layout and conflict arises when the

00:10:57,770 --> 00:11:01,850
Styles applied to these two things don't

00:10:59,630 --> 00:11:03,260
necessarily match and so when they're

00:11:01,850 --> 00:11:05,720
separate components that becomes very

00:11:03,260 --> 00:11:06,940
difficult so what you want to do is you

00:11:05,720 --> 00:11:09,520
want the layout components to own

00:11:06,940 --> 00:11:13,480
those concerns and there are a few

00:11:09,520 --> 00:11:15,400
different ways that we can do this so we

00:11:13,480 --> 00:11:17,410
can use the star selector to target all

00:11:15,400 --> 00:11:20,350
of the immediate children of a layout

00:11:17,410 --> 00:11:21,670
component this works even with CSS in

00:11:20,350 --> 00:11:23,740
jeaious libraries or at least all the

00:11:21,670 --> 00:11:24,880
ones that you should be using and you

00:11:23,740 --> 00:11:26,200
might be interested to know that the

00:11:24,880 --> 00:11:27,790
star selector doesn't increase

00:11:26,200 --> 00:11:31,750
specifically so if you need to actually

00:11:27,790 --> 00:11:34,540
override this with classic CSS that

00:11:31,750 --> 00:11:36,580
works as well this approach might seem a

00:11:34,540 --> 00:11:37,870
little bit simple but in most cases it

00:11:36,580 --> 00:11:39,760
just works and probably should be the

00:11:37,870 --> 00:11:46,030
first thing that you reach for in many

00:11:39,760 --> 00:11:47,440
situations another option is the layout

00:11:46,030 --> 00:11:49,150
component can be responsible for

00:11:47,440 --> 00:11:52,690
rendering the mark-up that wraps child

00:11:49,150 --> 00:11:54,580
items so this allows us to more directly

00:11:52,690 --> 00:11:56,710
own both sides of that parent-child

00:11:54,580 --> 00:11:58,300
relationship it also means that we can

00:11:56,710 --> 00:12:00,700
when we loop over something like a list

00:11:58,300 --> 00:12:02,140
we can ensure that those items have the

00:12:00,700 --> 00:12:04,000
right elements used and we can also

00:12:02,140 --> 00:12:05,980
ensure accessibility so this is a really

00:12:04,000 --> 00:12:08,200
great technique if you have a very

00:12:05,980 --> 00:12:11,250
structured thing and you want to insure

00:12:08,200 --> 00:12:13,030
specific accessible and semantic markup

00:12:11,250 --> 00:12:15,310
however this is a little bit problematic

00:12:13,030 --> 00:12:17,650
if we have like more items being passed

00:12:15,310 --> 00:12:19,030
down to that component we might have

00:12:17,650 --> 00:12:21,010
multiple slots that we want to render a

00:12:19,030 --> 00:12:23,170
things into they might be dynamic

00:12:21,010 --> 00:12:25,540
layouts and things like that so as a

00:12:23,170 --> 00:12:28,300
final escape hatch for more complicated

00:12:25,540 --> 00:12:30,040
components we can simply export these

00:12:28,300 --> 00:12:32,290
styles from the parent component from

00:12:30,040 --> 00:12:34,930
the layout component and then import

00:12:32,290 --> 00:12:37,000
these in child items where we want to

00:12:34,930 --> 00:12:39,550
use them so this allows you to co-locate

00:12:37,000 --> 00:12:42,430
those layout concerns but it also

00:12:39,550 --> 00:12:44,980
creates like a direct link or dependency

00:12:42,430 --> 00:12:47,500
between those two items which is always

00:12:44,980 --> 00:12:49,330
there but that actual link or that

00:12:47,500 --> 00:12:50,950
dependency in our code is usually absent

00:12:49,330 --> 00:12:52,540
and that's where a problem should have

00:12:50,950 --> 00:12:55,000
arise when we move things around and

00:12:52,540 --> 00:12:56,920
don't realize this dependency so that's

00:12:55,000 --> 00:12:59,670
that's my final tip for working with

00:12:56,920 --> 00:13:02,230
those in addition to layout components

00:12:59,670 --> 00:13:03,790
we also have these UI components which

00:13:02,230 --> 00:13:04,960
I've already sort of talked about and

00:13:03,790 --> 00:13:07,210
these are the things that get rendered

00:13:04,960 --> 00:13:08,650
inside of those layout slots now I have

00:13:07,210 --> 00:13:11,410
a few tips for working with those as

00:13:08,650 --> 00:13:13,690
well the first one is that UI components

00:13:11,410 --> 00:13:16,390
should be little more than decorated

00:13:13,690 --> 00:13:18,100
HTML elements and what I mean by this is

00:13:16,390 --> 00:13:20,260
you might have an input and a search

00:13:18,100 --> 00:13:20,740
button together like this I would call a

00:13:20,260 --> 00:13:24,100
structure

00:13:20,740 --> 00:13:25,959
like this layout but the button and the

00:13:24,100 --> 00:13:28,570
input individually are both UI

00:13:25,959 --> 00:13:30,610
components they might have styles like

00:13:28,570 --> 00:13:31,959
this that look absolutely ridiculous if

00:13:30,610 --> 00:13:34,630
they're not used together and they might

00:13:31,959 --> 00:13:36,700
always be used together but this this

00:13:34,630 --> 00:13:39,670
visual link is not the right reason to

00:13:36,700 --> 00:13:42,700
co-locate these Styles separately they

00:13:39,670 --> 00:13:46,899
make a far better set of reusable

00:13:42,700 --> 00:13:48,700
abstract building blocks my next tip is

00:13:46,899 --> 00:13:51,190
that UI components should be size

00:13:48,700 --> 00:13:52,649
agnostic and that means avoiding fixed

00:13:51,190 --> 00:13:55,390
widths and Heights wherever possible

00:13:52,649 --> 00:13:57,910
when UI components overflow the layout

00:13:55,390 --> 00:14:00,670
containers that means that something's

00:13:57,910 --> 00:14:03,279
probably not right with the layout and

00:14:00,670 --> 00:14:05,589
the solution is not to add CSS to the UI

00:14:03,279 --> 00:14:08,110
component to sort of fix that please

00:14:05,589 --> 00:14:10,209
please please please please

00:14:08,110 --> 00:14:12,279
fix this at the source because I've

00:14:10,209 --> 00:14:14,230
spent so much time on picking this in

00:14:12,279 --> 00:14:16,720
projects and the more patches we add the

00:14:14,230 --> 00:14:18,940
harder it becomes I know it's not always

00:14:16,720 --> 00:14:22,089
simple so if you need use utility

00:14:18,940 --> 00:14:24,839
classes utility components or props if

00:14:22,089 --> 00:14:26,920
you need to override specific components

00:14:24,839 --> 00:14:28,810
when you're working instead of like Java

00:14:26,920 --> 00:14:30,760
Script land here but whatever you do

00:14:28,810 --> 00:14:34,690
avoid hard coding fix widths and Heights

00:14:30,760 --> 00:14:36,910
wherever possible if nothing else other

00:14:34,690 --> 00:14:38,170
than visual consistency in the design

00:14:36,910 --> 00:14:40,440
it's important to know the number of

00:14:38,170 --> 00:14:42,940
variations that we have for UI component

00:14:40,440 --> 00:14:44,890
it sounds simple but it's actually

00:14:42,940 --> 00:14:46,690
incredibly hard to know when working

00:14:44,890 --> 00:14:48,430
with modern JavaScript applications and

00:14:46,690 --> 00:14:50,529
luckily again I feel like we have some

00:14:48,430 --> 00:14:56,380
solutions from CSS architecture that we

00:14:50,529 --> 00:14:57,940
can draw from in 2011 shortly after oCSS

00:14:56,380 --> 00:15:01,270
the wonderful Canadian gentleman

00:14:57,940 --> 00:15:02,890
Jonathan snook gave us max now Smacks

00:15:01,270 --> 00:15:04,450
taught us how to like categorize

00:15:02,890 --> 00:15:08,100
different parts of our stylesheet to

00:15:04,450 --> 00:15:10,329
deal with things like themes layouts

00:15:08,100 --> 00:15:14,079
global defaults but most importantly for

00:15:10,329 --> 00:15:15,850
my talk is application state jonathan

00:15:14,079 --> 00:15:17,260
reached many of the same conclusions as

00:15:15,850 --> 00:15:18,760
nicole did and i don't want to cover

00:15:17,260 --> 00:15:20,500
that ground again but unique to Smacks

00:15:18,760 --> 00:15:22,959
were these ideas of state in what he

00:15:20,500 --> 00:15:26,320
called modules I'm going to call them

00:15:22,959 --> 00:15:28,149
components so to paraphrase max we

00:15:26,320 --> 00:15:30,630
usually have or we can usually reduce

00:15:28,149 --> 00:15:32,930
the UI state down to three main types

00:15:30,630 --> 00:15:36,730
modifier states

00:15:32,930 --> 00:15:39,189
behavioral states and pseudo states

00:15:36,730 --> 00:15:42,410
typically you can only have one

00:15:39,189 --> 00:15:43,850
behavioral and one modifier state active

00:15:42,410 --> 00:15:45,319
at any time and smacks even had

00:15:43,850 --> 00:15:47,509
techniques for ensuring that we did this

00:15:45,319 --> 00:15:49,040
it suggested using data attributes so

00:15:47,509 --> 00:15:50,990
that selectors can only really target

00:15:49,040 --> 00:15:53,600
one item because the data attribute can

00:15:50,990 --> 00:15:55,220
only have one thing unlike a class the

00:15:53,600 --> 00:15:57,199
good thing is that like libraries like

00:15:55,220 --> 00:15:59,360
react and angular they actually make

00:15:57,199 --> 00:16:01,009
this even easier so when I when I'm

00:15:59,360 --> 00:16:03,199
trying to work this out right we should

00:16:01,009 --> 00:16:04,939
only have large say loading as a

00:16:03,199 --> 00:16:06,769
behavioral State and focus we should

00:16:04,939 --> 00:16:08,749
only have one of those columns active

00:16:06,769 --> 00:16:11,059
and when I start a project I like to map

00:16:08,749 --> 00:16:13,819
out the UI state for components like

00:16:11,059 --> 00:16:16,160
this if you find that it's possible to

00:16:13,819 --> 00:16:18,110
have two behavioral States active at any

00:16:16,160 --> 00:16:19,610
one time what you can do is you can

00:16:18,110 --> 00:16:21,649
split these into two categories say

00:16:19,610 --> 00:16:23,470
Network State and the red state if you

00:16:21,649 --> 00:16:25,879
can imagine for an article or something

00:16:23,470 --> 00:16:28,309
but be careful if you do this right

00:16:25,879 --> 00:16:29,899
because usually when I find this is the

00:16:28,309 --> 00:16:31,279
case I very quickly realized that I

00:16:29,899 --> 00:16:34,399
actually have two components here

00:16:31,279 --> 00:16:36,980
pretending to be one once I know how

00:16:34,399 --> 00:16:39,470
many components I have I can draw them

00:16:36,980 --> 00:16:40,939
like this because life's easier when

00:16:39,470 --> 00:16:43,970
that's not the case but this state is

00:16:40,939 --> 00:16:45,709
sometimes additive right behavioral

00:16:43,970 --> 00:16:47,209
states might change depending on the

00:16:45,709 --> 00:16:48,499
modifier state and the pseudo state

00:16:47,209 --> 00:16:52,639
might change depending on combination of

00:16:48,499 --> 00:16:54,050
the behavior and the modifier so if we

00:16:52,639 --> 00:16:56,929
think of these variations is kind of

00:16:54,050 --> 00:16:58,999
like one direction all right the

00:16:56,929 --> 00:17:00,529
behavior state becomes easy - sorry the

00:16:58,999 --> 00:17:03,980
total number of state becomes easy to

00:17:00,529 --> 00:17:05,569
work out it's just the total number of

00:17:03,980 --> 00:17:07,069
variations is that the number of state

00:17:05,569 --> 00:17:09,079
categories that you have times the

00:17:07,069 --> 00:17:10,399
number of possibilities for each so if

00:17:09,079 --> 00:17:13,250
we have three categories and three

00:17:10,399 --> 00:17:14,689
variations we can have 27 possible UI

00:17:13,250 --> 00:17:17,059
states for a component that's really

00:17:14,689 --> 00:17:18,470
important to know that it sounds like a

00:17:17,059 --> 00:17:20,659
lot right but obviously not every

00:17:18,470 --> 00:17:22,549
combination matters the disabled state

00:17:20,659 --> 00:17:25,699
might look the same for every single one

00:17:22,549 --> 00:17:27,380
of the modifiers and maybe the pseudo

00:17:25,699 --> 00:17:28,909
states are the same no matter what the

00:17:27,380 --> 00:17:30,200
the other state of the component is so

00:17:28,909 --> 00:17:33,380
you can just cross out items and you end

00:17:30,200 --> 00:17:35,179
up with a list like this now CSS

00:17:33,380 --> 00:17:37,039
actually forced us to flatten this state

00:17:35,179 --> 00:17:39,260
tree and to have usually a single

00:17:37,039 --> 00:17:40,669
selector that would represent every

00:17:39,260 --> 00:17:42,289
combination of state that we had

00:17:40,669 --> 00:17:44,120
available and although this was

00:17:42,289 --> 00:17:46,180
sometimes tedious this makes us acutely

00:17:44,120 --> 00:17:48,610
aware of how many different variations

00:17:46,180 --> 00:17:51,280
it has and assuming that the CSS is

00:17:48,610 --> 00:17:52,990
written well it's also fairly easy to

00:17:51,280 --> 00:17:54,940
see what styles were applied in any case

00:17:52,990 --> 00:17:57,160
you just sort of read the the selector

00:17:54,940 --> 00:17:58,990
that applies to the current state maybe

00:17:57,160 --> 00:18:00,280
you have to read to and add them in your

00:17:58,990 --> 00:18:02,770
head but that's not too bad

00:18:00,280 --> 00:18:04,600
now don't please don't read this but

00:18:02,770 --> 00:18:06,640
JavaScript doesn't force us to flatten

00:18:04,600 --> 00:18:08,620
the state tree in any way this concept

00:18:06,640 --> 00:18:11,200
of different categories of state is

00:18:08,620 --> 00:18:12,670
often completely lost and at worst and

00:18:11,200 --> 00:18:15,490
sadly on a lot of projects I've worked

00:18:12,670 --> 00:18:18,460
on the resolution of CSS properties

00:18:15,490 --> 00:18:20,650
comes down to business logic in the

00:18:18,460 --> 00:18:21,910
style function so you've probably all

00:18:20,650 --> 00:18:24,970
seen examples like that we can vastly

00:18:21,910 --> 00:18:26,560
improve this by giving a better

00:18:24,970 --> 00:18:28,750
resolution of props before we pass them

00:18:26,560 --> 00:18:30,390
to the style function and although this

00:18:28,750 --> 00:18:32,440
is an improvement and probably

00:18:30,390 --> 00:18:34,690
representative of the vast majority of

00:18:32,440 --> 00:18:37,810
large CSS and J's projects that I've

00:18:34,690 --> 00:18:39,870
worked on this is not ideal as this

00:18:37,810 --> 00:18:42,280
scales you need to consider how each

00:18:39,870 --> 00:18:44,890
individual property here affects each

00:18:42,280 --> 00:18:46,840
individual CSS property and if that is a

00:18:44,890 --> 00:18:47,590
complex set of logic that's really hard

00:18:46,840 --> 00:18:49,150
to work out

00:18:47,590 --> 00:18:50,710
you can't quickly know how many

00:18:49,150 --> 00:18:54,040
variations there are for a UI component

00:18:50,710 --> 00:18:57,610
and this makes Mike sad and that should

00:18:54,040 --> 00:18:59,830
be a goal to avoid on any project so

00:18:57,610 --> 00:19:01,240
furthermore if the props that we pass

00:18:59,830 --> 00:19:04,420
down to the style function don't

00:19:01,240 --> 00:19:06,550
represent a set of finite sort of state

00:19:04,420 --> 00:19:07,990
categories how do we know that the

00:19:06,550 --> 00:19:09,730
values that we resolving in that style

00:19:07,990 --> 00:19:12,220
function are valid and something that is

00:19:09,730 --> 00:19:13,690
intended by the design and this is not

00:19:12,220 --> 00:19:15,940
something that typescript is going to

00:19:13,690 --> 00:19:18,430
tell you right so being able to have

00:19:15,940 --> 00:19:19,720
these finite categories allows you to

00:19:18,430 --> 00:19:21,040
know that you're not going to end up

00:19:19,720 --> 00:19:22,900
with large and small active at the same

00:19:21,040 --> 00:19:24,160
time or loading an error if you can't

00:19:22,900 --> 00:19:26,050
read that thing if your stars aren't

00:19:24,160 --> 00:19:28,540
organ or make in that way that can be

00:19:26,050 --> 00:19:30,760
problematic I think David's going to

00:19:28,540 --> 00:19:32,650
touch more on state machines in in here

00:19:30,760 --> 00:19:34,690
or CSS state machines and his talk after

00:19:32,650 --> 00:19:38,050
me so I'm not going to go into much more

00:19:34,690 --> 00:19:39,700
detail there I do want to share a

00:19:38,050 --> 00:19:41,200
solution but it doesn't des matter

00:19:39,700 --> 00:19:42,910
matter to me whether you're sort of like

00:19:41,200 --> 00:19:47,290
composing these these states through

00:19:42,910 --> 00:19:48,880
class names template strings or objects

00:19:47,290 --> 00:19:51,340
in JavaScript what's important is that

00:19:48,880 --> 00:19:53,830
we have a single representation for each

00:19:51,340 --> 00:19:56,040
of the different UI States one of the

00:19:53,830 --> 00:19:58,360
challenges in modern JavaScript is that

00:19:56,040 --> 00:19:59,890
there's actually too many ways to try

00:19:58,360 --> 00:20:01,080
and do this

00:19:59,890 --> 00:20:03,070
I think that we need some better

00:20:01,080 --> 00:20:05,020
standardization around how we approach

00:20:03,070 --> 00:20:07,420
problems like this in CSS in jeaious

00:20:05,020 --> 00:20:09,070
because we kind of had that for CSS and

00:20:07,420 --> 00:20:10,750
then we've largely disregarded a lot of

00:20:09,070 --> 00:20:13,540
that knowledge and I'm not saying that

00:20:10,750 --> 00:20:14,980
this here should be the solution but I'm

00:20:13,540 --> 00:20:16,420
not saying that it shouldn't either so

00:20:14,980 --> 00:20:18,640
if you want to adopt this that's fine

00:20:16,420 --> 00:20:21,630
but what I like to do is I like to have

00:20:18,640 --> 00:20:25,360
a property that I passed to a style

00:20:21,630 --> 00:20:27,520
function a modifier and a behavior and I

00:20:25,360 --> 00:20:29,710
can only have one of those these values

00:20:27,520 --> 00:20:31,960
then get passed on to a function like

00:20:29,710 --> 00:20:34,840
this which will resolve the actual

00:20:31,960 --> 00:20:36,370
Styles so what's happening here is I've

00:20:34,840 --> 00:20:38,350
got some default Styles like font size

00:20:36,370 --> 00:20:41,680
and then I'm just kind of grabbed from

00:20:38,350 --> 00:20:44,740
an object here with the key that I

00:20:41,680 --> 00:20:46,510
passed a specific set of styles and I'm

00:20:44,740 --> 00:20:47,980
going to add those to this object that

00:20:46,510 --> 00:20:50,010
I'm building up in this function here

00:20:47,980 --> 00:20:52,720
and I'm gonna do the same for behaviors

00:20:50,010 --> 00:20:54,460
now what that means is we can quickly

00:20:52,720 --> 00:20:58,720
read sort of what's being added there's

00:20:54,460 --> 00:21:00,370
no resolution of state here so the real

00:20:58,720 --> 00:21:02,890
beauty in this approach is that using

00:21:00,370 --> 00:21:04,930
custom properties here we can set the

00:21:02,890 --> 00:21:07,390
modifier value so we can set the value

00:21:04,930 --> 00:21:08,950
in the modifier here that can then be

00:21:07,390 --> 00:21:11,950
used by the behavior so that gives you

00:21:08,950 --> 00:21:14,470
that branching capability that we had

00:21:11,950 --> 00:21:17,860
while keeping this this object flat and

00:21:14,470 --> 00:21:20,560
readable and I think like using modern

00:21:17,860 --> 00:21:22,930
features in CSS like this together with

00:21:20,560 --> 00:21:24,640
JavaScript applications can be really a

00:21:22,930 --> 00:21:26,890
useful pattern and that's the kind of

00:21:24,640 --> 00:21:29,170
thing that like probably most of us here

00:21:26,890 --> 00:21:31,900
should be bringing to our team so I want

00:21:29,170 --> 00:21:33,370
to encourage you to do that I absolutely

00:21:31,900 --> 00:21:35,470
love this pattern if you don't that's

00:21:33,370 --> 00:21:38,410
okay now you might notice some

00:21:35,470 --> 00:21:40,840
inspiration from the terms here from

00:21:38,410 --> 00:21:43,330
been things like modifiers and behaviors

00:21:40,840 --> 00:21:46,870
and it wouldn't be a CSS architecture

00:21:43,330 --> 00:21:48,340
talk really without mentioning Ben so

00:21:46,870 --> 00:21:50,680
the history of BEM is actually slightly

00:21:48,340 --> 00:21:52,840
harder to trace it started with the

00:21:50,680 --> 00:21:55,480
Russian tech company Yandex just a small

00:21:52,840 --> 00:21:57,010
company and it it might have been used

00:21:55,480 --> 00:21:58,930
internally before many of us

00:21:57,010 --> 00:22:00,940
particularly in the West became aware of

00:21:58,930 --> 00:22:03,700
it but I can say that it exploded in

00:22:00,940 --> 00:22:05,530
popularity around 2012 when people like

00:22:03,700 --> 00:22:07,950
Nicholas Gallagher and Harry Roberts

00:22:05,530 --> 00:22:11,490
started writing and talking about this

00:22:07,950 --> 00:22:13,560
so in 2012 Nicholas Gallagher wrote this

00:22:11,490 --> 00:22:14,880
article about HTML semantics and

00:22:13,560 --> 00:22:16,770
front-end architecture I encourage you

00:22:14,880 --> 00:22:18,870
to look it up I absolutely loved this

00:22:16,770 --> 00:22:21,270
article still nicolas doesn't mention

00:22:18,870 --> 00:22:23,000
CSS architecture once in the entire

00:22:21,270 --> 00:22:27,960
article but he mentions components and

00:22:23,000 --> 00:22:29,550
unbelievable 47 times in 2012 it's also

00:22:27,960 --> 00:22:32,010
in this article that Nicolas first talks

00:22:29,550 --> 00:22:34,320
about his experiences with Bam and what

00:22:32,010 --> 00:22:36,870
I think he realized that many don't is

00:22:34,320 --> 00:22:38,550
that many people think that Bam is just

00:22:36,870 --> 00:22:41,190
is like naming convention that that

00:22:38,550 --> 00:22:43,170
helps them to avoid specificity clashes

00:22:41,190 --> 00:22:46,260
in the terrifying global scope of CSS

00:22:43,170 --> 00:22:48,090
but the concepts of block element and

00:22:46,260 --> 00:22:50,400
modify are actually a really solid

00:22:48,090 --> 00:22:52,350
expression of different concerns

00:22:50,400 --> 00:22:54,390
relating to component architecture on

00:22:52,350 --> 00:22:56,940
the web so that should be really useful

00:22:54,390 --> 00:22:59,430
in modern JavaScript applications I

00:22:56,940 --> 00:23:01,920
think part of the reason for the success

00:22:59,430 --> 00:23:03,660
of BEM is that its strong and obvious

00:23:01,920 --> 00:23:05,430
naming conventions allowed developers to

00:23:03,660 --> 00:23:09,060
use this without necessarily

00:23:05,430 --> 00:23:10,890
understanding the reasons behind the

00:23:09,060 --> 00:23:14,160
principles and understanding everything

00:23:10,890 --> 00:23:16,500
behind the concept and that's okay so

00:23:14,160 --> 00:23:19,020
Ben gave semantic meaning to different

00:23:16,500 --> 00:23:20,400
parts of components and I think this is

00:23:19,020 --> 00:23:22,140
something that we sorely need in modern

00:23:20,400 --> 00:23:23,850
JavaScript applications they can be

00:23:22,140 --> 00:23:24,870
components can be so many things right

00:23:23,850 --> 00:23:27,270
but we don't have to make these

00:23:24,870 --> 00:23:28,860
distinctions and I've been like kind of

00:23:27,270 --> 00:23:31,830
drawing a few distinctions here which

00:23:28,860 --> 00:23:33,450
you may have picked up on and I think

00:23:31,830 --> 00:23:34,830
when we don't do this when we don't have

00:23:33,450 --> 00:23:36,240
these distinctions it leads to an

00:23:34,830 --> 00:23:40,110
unhealthy mix of different concerns

00:23:36,240 --> 00:23:42,030
within our UI components so to help us

00:23:40,110 --> 00:23:45,090
avoid this my final tip is consider

00:23:42,030 --> 00:23:46,980
naming some kind of naming conventions

00:23:45,090 --> 00:23:48,600
for your components I don't care what

00:23:46,980 --> 00:23:52,530
you use but it helps me to understand

00:23:48,600 --> 00:23:54,120
what your intentions are so for me what

00:23:52,530 --> 00:23:56,280
I do for you I components is I just call

00:23:54,120 --> 00:23:57,720
it by the component name and when I see

00:23:56,280 --> 00:23:59,430
this I immediately know that this is a

00:23:57,720 --> 00:24:01,740
UI component it should be just a visual

00:23:59,430 --> 00:24:03,090
element I know that it should have no

00:24:01,740 --> 00:24:04,410
width and height properties and it

00:24:03,090 --> 00:24:06,630
probably doesn't have many display

00:24:04,410 --> 00:24:08,910
properties either I should know that it

00:24:06,630 --> 00:24:10,680
can have state modifiers and I should

00:24:08,910 --> 00:24:13,560
know that it contains no business logic

00:24:10,680 --> 00:24:16,020
if I prefix a component with layout I

00:24:13,560 --> 00:24:18,090
should know immediately but again it has

00:24:16,020 --> 00:24:20,550
no visual styles I should know that it

00:24:18,090 --> 00:24:22,139
has state modifiers it might affect the

00:24:20,550 --> 00:24:23,609
layout of child

00:24:22,139 --> 00:24:26,369
but I know also that this component

00:24:23,609 --> 00:24:27,419
isn't going to contain business logic so

00:24:26,369 --> 00:24:28,979
I've talked about two types of

00:24:27,419 --> 00:24:31,049
components and I've said they both don't

00:24:28,979 --> 00:24:32,820
own business logic and this introduces

00:24:31,049 --> 00:24:34,229
you to the final type of component that

00:24:32,820 --> 00:24:36,929
I want to talk about today and that's a

00:24:34,229 --> 00:24:39,869
container component this is where the

00:24:36,929 --> 00:24:41,549
application logic lives so it resolves

00:24:39,869 --> 00:24:43,499
that modifier and behavior state before

00:24:41,549 --> 00:24:46,259
passing it off to to a style function or

00:24:43,499 --> 00:24:48,089
something a confection resolve data can

00:24:46,259 --> 00:24:49,889
set up callbacks events all of the

00:24:48,089 --> 00:24:51,659
things that applications need to do and

00:24:49,889 --> 00:24:55,919
this is what should wrap your layout and

00:24:51,659 --> 00:24:57,239
UI components you don't need to use the

00:24:55,919 --> 00:24:59,070
conventions that I'm mentioning here you

00:24:57,239 --> 00:25:00,899
don't need to prefix that with component

00:24:59,070 --> 00:25:02,129
or layout if you don't want you can

00:25:00,899 --> 00:25:04,829
group them in different folders you can

00:25:02,129 --> 00:25:06,089
add comments at the top of your source

00:25:04,829 --> 00:25:07,889
code if that's convenient for you

00:25:06,089 --> 00:25:09,419
whatever works for your team the

00:25:07,889 --> 00:25:11,429
important thing is to give semantic

00:25:09,419 --> 00:25:13,709
meaning to components just like BEM did

00:25:11,429 --> 00:25:15,329
for class names so that we can

00:25:13,709 --> 00:25:16,679
immediately transfer this knowledge of

00:25:15,329 --> 00:25:19,169
what our intentions are for this

00:25:16,679 --> 00:25:21,029
component as we build things together

00:25:19,169 --> 00:25:22,440
because that's what most projects are

00:25:21,029 --> 00:25:23,249
we're building things together and I

00:25:22,440 --> 00:25:25,139
think that's where a lot of the

00:25:23,249 --> 00:25:28,889
difficulty is and that's a lot of what

00:25:25,139 --> 00:25:31,200
CSS architecture was about so in summary

00:25:28,889 --> 00:25:33,869
it's the same problems that we've been

00:25:31,200 --> 00:25:36,149
trying to solve here the challenges that

00:25:33,869 --> 00:25:37,889
we face with style architecture in

00:25:36,149 --> 00:25:41,219
modern JavaScript applications

00:25:37,889 --> 00:25:42,539
component-based architecture are the

00:25:41,219 --> 00:25:44,249
same problems that we face with class

00:25:42,539 --> 00:25:47,429
names are the only difference is that

00:25:44,249 --> 00:25:49,229
the composition methods have changed so

00:25:47,429 --> 00:25:50,639
if you're a talented JavaScript

00:25:49,229 --> 00:25:54,389
developer and you're telling me that you

00:25:50,639 --> 00:25:55,559
know nothing about CSS then I'm sorry

00:25:54,389 --> 00:25:57,089
but you're not even trying and I know

00:25:55,559 --> 00:25:58,799
that's like a little bit mean but I'm

00:25:57,089 --> 00:26:02,899
gonna be mean to CSS people in a moment

00:25:58,799 --> 00:26:04,979
as well so so many of the architecture

00:26:02,899 --> 00:26:08,759
sorry many of the style architecture

00:26:04,979 --> 00:26:11,940
solutions applying knowledge and

00:26:08,759 --> 00:26:13,859
understanding from software architecture

00:26:11,940 --> 00:26:15,779
and and foundations in computer science

00:26:13,859 --> 00:26:18,089
right and I know many people who

00:26:15,779 --> 00:26:19,559
understand these complex problems but

00:26:18,089 --> 00:26:21,419
they fail to see similarities or worse

00:26:19,559 --> 00:26:23,369
yet they choose not to apply this

00:26:21,419 --> 00:26:26,339
knowledge to decorative front-end code

00:26:23,369 --> 00:26:28,049
and this disappoints me again should be

00:26:26,339 --> 00:26:29,789
a goal not to so my colleagues and

00:26:28,049 --> 00:26:31,529
friends who helped to establish some of

00:26:29,789 --> 00:26:33,569
these conventions in CSS architecture

00:26:31,529 --> 00:26:35,010
were skilled engineers with broad skills

00:26:33,569 --> 00:26:36,870
who applied knowledge

00:26:35,010 --> 00:26:38,910
different disciplines and I think that's

00:26:36,870 --> 00:26:41,010
what we should all be trying to do at

00:26:38,910 --> 00:26:43,799
the moment we're not the worlds apart

00:26:41,010 --> 00:26:45,360
that we pretend to be so I think the

00:26:43,799 --> 00:26:47,400
message here is to encourage us to start

00:26:45,360 --> 00:26:50,309
talking about these problems with with

00:26:47,400 --> 00:26:52,950
each of our understandings to the CSS

00:26:50,309 --> 00:26:54,630
people here in the audience we need to

00:26:52,950 --> 00:26:57,570
do better when we're engaging with these

00:26:54,630 --> 00:26:59,220
problems new tools like CSS nsj they can

00:26:57,570 --> 00:27:01,410
help us and they also bring about a

00:26:59,220 --> 00:27:03,299
whole bunch of new challenges and these

00:27:01,410 --> 00:27:05,669
are challenges that all of you people

00:27:03,299 --> 00:27:08,429
are really well positioned to understand

00:27:05,669 --> 00:27:10,200
and solve and we need to do better at

00:27:08,429 --> 00:27:11,549
articulating our experience and

00:27:10,200 --> 00:27:13,950
knowledge and ways that's relevant and

00:27:11,549 --> 00:27:15,240
accessible to to new developers or

00:27:13,950 --> 00:27:18,240
developers that come from from a

00:27:15,240 --> 00:27:19,350
different world to us and to that end I

00:27:18,240 --> 00:27:20,970
want to leave you with some practical

00:27:19,350 --> 00:27:24,630
suggestions for questions that you can

00:27:20,970 --> 00:27:26,700
ask on any project the first one is how

00:27:24,630 --> 00:27:28,230
many UI states can a component have this

00:27:26,700 --> 00:27:31,020
is a really important discussion point

00:27:28,230 --> 00:27:33,660
how can you easily validate which states

00:27:31,020 --> 00:27:36,840
are currently applied and that they're

00:27:33,660 --> 00:27:38,730
valid States intended by design how

00:27:36,840 --> 00:27:40,950
organ Amish are your stars this means

00:27:38,730 --> 00:27:43,320
how quickly can you read knowing that

00:27:40,950 --> 00:27:45,090
like the particular modifier or a

00:27:43,320 --> 00:27:47,220
particular behavior is currently active

00:27:45,090 --> 00:27:49,559
how quickly can you know and understand

00:27:47,220 --> 00:27:51,570
what CSS properties get applied in that

00:27:49,559 --> 00:27:54,299
case and if you can't do it in a few

00:27:51,570 --> 00:27:56,309
seconds then that's problematic are you

00:27:54,299 --> 00:27:58,320
creating sensible abstract building

00:27:56,309 --> 00:27:59,790
blocks or are you just drawing boxes

00:27:58,320 --> 00:28:01,830
around the design and building your

00:27:59,790 --> 00:28:04,590
components this way do they reflect a

00:28:01,830 --> 00:28:07,140
unit of visual design and if they do ask

00:28:04,590 --> 00:28:08,820
why are you separating the layout from

00:28:07,140 --> 00:28:11,910
the visual design where that is a

00:28:08,820 --> 00:28:13,830
sensible and appropriate are you

00:28:11,910 --> 00:28:16,080
separating application logic from UI

00:28:13,830 --> 00:28:18,090
components that's another big one even

00:28:16,080 --> 00:28:20,640
with how we pass props down even small

00:28:18,090 --> 00:28:22,080
bits of logic we've got to keep on top

00:28:20,640 --> 00:28:24,000
of those things

00:28:22,080 --> 00:28:25,590
and finally and probably the most

00:28:24,000 --> 00:28:27,120
important one how do we give semantic

00:28:25,590 --> 00:28:29,669
meaning how do we communicate our

00:28:27,120 --> 00:28:31,860
intentions and meanings to other

00:28:29,669 --> 00:28:33,150
developers on our team and I think

00:28:31,860 --> 00:28:34,710
that's really important and that's one

00:28:33,150 --> 00:28:36,570
that I'm gonna leave for all of us to

00:28:34,710 --> 00:28:38,549
discuss itself together thank you

00:28:36,570 --> 00:28:39,900
Budapest's I hope that you've left you

00:28:38,549 --> 00:28:42,090
with some practical tips or at least

00:28:39,900 --> 00:28:43,260
something to think about on your next

00:28:42,090 --> 00:28:45,919
project it was an absolute pleasure

00:28:43,260 --> 00:28:45,919
thank you so much

00:28:49,460 --> 00:28:52,460

YouTube URL: https://www.youtube.com/watch?v=ZWPMzJfJHnc


