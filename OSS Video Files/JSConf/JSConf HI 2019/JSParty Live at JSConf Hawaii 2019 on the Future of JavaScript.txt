Title: JSParty Live at JSConf Hawaii 2019 on the Future of JavaScript
Publication date: 2019-06-24
Playlist: JSConf HI 2019
Description: 
	Kevin Ball of JSParty (center) hosts a live broadcast at JSConf Hawaii with (from left to right) Willian Martins, Shawn "swyx" Wang, Lin Clark, and Till Schneidereit on the future of JavaScript, including some discussion of TC39 and WebAssembly.

JSConf Hawaii is returning in 2020. Learn more at https://www.jsconfhi.com/
Captions: 
	00:00:05,650 --> 00:00:13,690
all right hello jazz comp for ye before

00:00:12,160 --> 00:00:15,400
we get started I want to talk a little

00:00:13,690 --> 00:00:16,480
bit about how amazing this conference

00:00:15,400 --> 00:00:19,930
has been right I mean he was just

00:00:16,480 --> 00:00:23,560
talking about Hawaii but how about like

00:00:19,930 --> 00:00:28,900
the variety that we've seen on stage we

00:00:23,560 --> 00:00:33,670
have seen Moana we have seen natural

00:00:28,900 --> 00:00:35,559
hair we have seen Tamagotchis I mean

00:00:33,670 --> 00:00:36,610
let's give it up for the organizers a

00:00:35,559 --> 00:00:43,870
little bit for putting this thing

00:00:36,610 --> 00:00:45,430
together right so for those who are not

00:00:43,870 --> 00:00:49,300
from actually show of hands who knows

00:00:45,430 --> 00:00:52,300
what J s party is a few of you alright

00:00:49,300 --> 00:00:54,280
so J s party is a podcast but more than

00:00:52,300 --> 00:00:56,410
that it is a weekly celebration of

00:00:54,280 --> 00:00:59,649
JavaScript and the web we get together

00:00:56,410 --> 00:01:01,510
every week and talk about cutting edge

00:00:59,649 --> 00:01:03,430
content what's going on with JavaScript

00:01:01,510 --> 00:01:05,320
what's going on with related topics I've

00:01:03,430 --> 00:01:06,940
heard conferences described as the place

00:01:05,320 --> 00:01:09,430
you go to learn what you should be

00:01:06,940 --> 00:01:11,259
learning about well if you can't make it

00:01:09,430 --> 00:01:12,759
out to conferences every week you can

00:01:11,259 --> 00:01:16,810
get that anyway by listening to Jay s

00:01:12,759 --> 00:01:18,250
party we do come to conferences today

00:01:16,810 --> 00:01:20,530
we're here we're going to do a live

00:01:18,250 --> 00:01:22,119
episode this is you are live with us

00:01:20,530 --> 00:01:24,190
typically when we do an episode we

00:01:22,119 --> 00:01:25,660
broadcast it live as we do it there's a

00:01:24,190 --> 00:01:27,429
slack channel you can come and slack

00:01:25,660 --> 00:01:29,050
with us as we do it here we don't have

00:01:27,429 --> 00:01:33,190
the slack channel so I'm relying on you

00:01:29,050 --> 00:01:34,899
all to give us that live feel but we are

00:01:33,190 --> 00:01:36,550
going to be digging in with our some of

00:01:34,899 --> 00:01:38,050
our amazing speakers from yesterday and

00:01:36,550 --> 00:01:39,849
kind of going a little deeper and trying

00:01:38,050 --> 00:01:42,099
to make me make them uncomfortable and

00:01:39,849 --> 00:01:43,259
ask questions that they hadn't thought

00:01:42,099 --> 00:01:46,060
about

00:01:43,259 --> 00:01:48,399
so before we again I'm Kay ball I'm one

00:01:46,060 --> 00:01:50,979
of the hosts I'm a regular on Jays party

00:01:48,399 --> 00:01:54,130
if you want to find Jay s party go to

00:01:50,979 --> 00:01:56,380
any podcast app search for Jay s party

00:01:54,130 --> 00:01:57,459
you'll find it last night somebody was

00:01:56,380 --> 00:01:58,929
trying to do that on Spotify and it

00:01:57,459 --> 00:02:00,580
didn't work and so I was frantically

00:01:58,929 --> 00:02:03,069
slacking people what's going on it turns

00:02:00,580 --> 00:02:05,560
out the search term was not matched

00:02:03,069 --> 00:02:07,420
properly so we fixed that but search for

00:02:05,560 --> 00:02:10,690
Jays party wherever you do podcasts you

00:02:07,420 --> 00:02:15,760
will find us alright so I am joined

00:02:10,690 --> 00:02:17,200
today with four amazing speakers they

00:02:15,760 --> 00:02:18,920
spoke yesterday but I'm going to

00:02:17,200 --> 00:02:24,080
introduce them anyway

00:02:18,920 --> 00:02:27,230
Willian spoke about tc39 the future of

00:02:24,080 --> 00:02:28,970
JavaScript Shawn spoke about Babylon

00:02:27,230 --> 00:02:30,800
some amazing things you can do with that

00:02:28,970 --> 00:02:32,239
with the language I don't know if I even

00:02:30,800 --> 00:02:34,910
need to introduce you to you're so

00:02:32,239 --> 00:02:36,590
famous but we have Lin until who both

00:02:34,910 --> 00:02:38,780
spoke about webassembly

00:02:36,590 --> 00:02:42,140
and what we're gonna dig a little deeper

00:02:38,780 --> 00:02:44,780
on today is this idea of the future of

00:02:42,140 --> 00:02:47,959
JavaScript of web development where is

00:02:44,780 --> 00:02:49,700
this going you know how can we take all

00:02:47,959 --> 00:02:51,620
of these talks that happen independently

00:02:49,700 --> 00:02:53,660
and sort of try to weave a picture

00:02:51,620 --> 00:02:57,860
together of of where this is going in

00:02:53,660 --> 00:03:00,590
the future so we'll just start I had

00:02:57,860 --> 00:03:02,959
prepared a few questions if you all get

00:03:00,590 --> 00:03:04,069
a burning need to ask questions you can

00:03:02,959 --> 00:03:06,350
raise your hand and I'll probably call

00:03:04,069 --> 00:03:08,840
out to you but we've got plenty so don't

00:03:06,350 --> 00:03:10,340
stress so I want to start actually

00:03:08,840 --> 00:03:11,810
talking about the JavaScript language

00:03:10,340 --> 00:03:15,080
itself

00:03:11,810 --> 00:03:16,790
Willian introduced us to some of the

00:03:15,080 --> 00:03:20,000
proposals that are there for advancing

00:03:16,790 --> 00:03:24,700
the language and I noticed that there

00:03:20,000 --> 00:03:26,959
were a lot of operators involved in the

00:03:24,700 --> 00:03:28,549
pattern matching there was a new arrow

00:03:26,959 --> 00:03:29,870
operator it wasn't the fat arrow were

00:03:28,549 --> 00:03:33,500
used to with arrow functions it was the

00:03:29,870 --> 00:03:35,480
thin arrow with the piping there was a

00:03:33,500 --> 00:03:36,410
pipeline operator and I'm kind of

00:03:35,480 --> 00:03:38,120
wondering I'm gonna throw this to

00:03:36,410 --> 00:03:39,799
Willian first but any of the panelists

00:03:38,120 --> 00:03:42,260
you're welcome to answer are we gonna

00:03:39,799 --> 00:03:43,640
run out of syntax and operators like is

00:03:42,260 --> 00:03:46,400
there room for a tamagotchi operator

00:03:43,640 --> 00:03:51,109
where are we going I think this is a

00:03:46,400 --> 00:03:52,820
good question for to you right so I

00:03:51,109 --> 00:03:56,989
think there are sort of two different

00:03:52,820 --> 00:03:59,900
answers to this um one is we can and see

00:03:56,989 --> 00:04:02,060
if we invent an arbitrary amount of

00:03:59,900 --> 00:04:06,769
additional operators and make them work

00:04:02,060 --> 00:04:08,299
somehow just put two characters next to

00:04:06,769 --> 00:04:12,650
each other that currently would be

00:04:08,299 --> 00:04:14,930
invalid and say listen you operator and

00:04:12,650 --> 00:04:16,340
cynic was actually an example where we

00:04:14,930 --> 00:04:20,539
could have done that when we introduced

00:04:16,340 --> 00:04:22,220
the federal there the committee was

00:04:20,539 --> 00:04:24,350
pretty close to also in producing a

00:04:22,220 --> 00:04:28,490
scenario variant that didn't capture

00:04:24,350 --> 00:04:30,560
this the this value but otherwise what

00:04:28,490 --> 00:04:32,420
if we actually operate it exactly the

00:04:30,560 --> 00:04:35,660
same and the reason

00:04:32,420 --> 00:04:40,400
this is not done was mention complexity

00:04:35,660 --> 00:04:41,480
budget and that is really what a lot of

00:04:40,400 --> 00:04:45,650
this is about that

00:04:41,480 --> 00:04:49,370
an operator has to carry its weight it

00:04:45,650 --> 00:04:53,060
has to be specialized in a way that

00:04:49,370 --> 00:04:55,880
allows people to use it as a an

00:04:53,060 --> 00:04:58,790
efficient mental abstraction instead of

00:04:55,880 --> 00:05:00,920
just some weird characters on the page

00:04:58,790 --> 00:05:02,720
that make things unreadable and if we

00:05:00,920 --> 00:05:04,700
didn't keep that in mind then the

00:05:02,720 --> 00:05:06,650
language would be more and more just

00:05:04,700 --> 00:05:10,880
sort of this weird stuff on the page

00:05:06,650 --> 00:05:13,400
that nobody can clock and so yes we will

00:05:10,880 --> 00:05:15,410
over time it would use new upgrade earth

00:05:13,400 --> 00:05:18,950
but we have to be extremely careful

00:05:15,410 --> 00:05:22,550
about which ones and make sure that they

00:05:18,950 --> 00:05:24,830
are actually useful enough that leads

00:05:22,550 --> 00:05:27,710
into kind of a question about the

00:05:24,830 --> 00:05:30,290
process of deciding what goes into this

00:05:27,710 --> 00:05:34,010
language you know we talked about tc39

00:05:30,290 --> 00:05:35,690
and the stage one that was going on

00:05:34,010 --> 00:05:37,310
there but maybe can one of the panelists

00:05:35,690 --> 00:05:39,320
spell out the stages that things go

00:05:37,310 --> 00:05:42,680
through as they advance in the

00:05:39,320 --> 00:05:46,490
JavaScript language okay I can try that

00:05:42,680 --> 00:05:49,520
one okay we have like a five stage and

00:05:46,490 --> 00:05:51,590
d'Oro like that is the stromwell

00:05:49,520 --> 00:05:53,590
it's like you have a conversation bar

00:05:51,590 --> 00:05:56,060
and we are kind of drunk and say yeah

00:05:53,590 --> 00:05:58,910
where if with those days in JavaScript

00:05:56,060 --> 00:06:00,440
let's try like and and you try to

00:05:58,910 --> 00:06:03,650
present this token to the committee and

00:06:00,440 --> 00:06:07,040
then if they and if you find a champion

00:06:03,650 --> 00:06:09,110
and and this proposal its I tried to

00:06:07,040 --> 00:06:11,750
solve a problem like yeah you should

00:06:09,110 --> 00:06:15,470
shake the the the the the the problem

00:06:11,750 --> 00:06:18,740
first and then if I have a simple four

00:06:15,470 --> 00:06:20,360
champion in this and you you and the

00:06:18,740 --> 00:06:23,180
committee decides that this is like

00:06:20,360 --> 00:06:26,990
something that worth more investigation

00:06:23,180 --> 00:06:30,650
so they goes to the stage one so then

00:06:26,990 --> 00:06:33,620
they try to do a little bit more

00:06:30,650 --> 00:06:36,650
research on that and shaped like if it's

00:06:33,620 --> 00:06:39,320
a syntax like shape the syntax or in the

00:06:36,650 --> 00:06:42,890
semantics of the this proposal and then

00:06:39,320 --> 00:06:45,720
goes to the draft which is the stage two

00:06:42,890 --> 00:06:49,760
so then they start to

00:06:45,720 --> 00:06:53,820
right the draft of the of this

00:06:49,760 --> 00:06:56,610
specification and then sometimes they

00:06:53,820 --> 00:07:00,540
have some implementation bubble and and

00:06:56,610 --> 00:07:04,680
and sent to the to the developers to try

00:07:00,540 --> 00:07:07,200
that out and then after after they find

00:07:04,680 --> 00:07:09,440
some consensus on and syntax I'm in send

00:07:07,200 --> 00:07:13,050
mailings of the the proposal that goes

00:07:09,440 --> 00:07:16,440
that this proposal goes to the go stage

00:07:13,050 --> 00:07:19,860
3 which is the time that they wait for

00:07:16,440 --> 00:07:21,480
some permutation the browsers and and I

00:07:19,860 --> 00:07:26,120
think like then you see this

00:07:21,480 --> 00:07:30,150
implementation coming to the nightly

00:07:26,120 --> 00:07:33,750
version of Firefox or Chrome Canary and

00:07:30,150 --> 00:07:38,450
so on and then after everything's done

00:07:33,750 --> 00:07:41,730
and the final consensus will seem to

00:07:38,450 --> 00:07:43,590
stage 4 which is the last stage and then

00:07:41,730 --> 00:07:46,800
they have a cohort I think in March

00:07:43,590 --> 00:07:51,150
right and and then this goes to the next

00:07:46,800 --> 00:07:53,820
spec which is in July then you talked

00:07:51,150 --> 00:07:56,130
about similar feature advancement

00:07:53,820 --> 00:07:57,720
happening in the web assembly is the

00:07:56,130 --> 00:07:59,460
process they're similar or how does the

00:07:57,720 --> 00:08:01,890
web assembly working group deal with

00:07:59,460 --> 00:08:05,190
this there are a lot of similarities and

00:08:01,890 --> 00:08:07,970
a couple of differences so for a web

00:08:05,190 --> 00:08:11,790
assembly you do have also four stages

00:08:07,970 --> 00:08:14,430
that look pretty similar there is a

00:08:11,790 --> 00:08:19,590
difference in advancing between the

00:08:14,430 --> 00:08:21,600
stages which is that with tc39 you need

00:08:19,590 --> 00:08:24,450
really full consensus that happens at a

00:08:21,600 --> 00:08:28,050
meeting individuals from different

00:08:24,450 --> 00:08:31,950
companies can object whereas with

00:08:28,050 --> 00:08:34,700
webassembly it's more the different

00:08:31,950 --> 00:08:34,700
implementers

00:08:34,789 --> 00:08:39,240
really it's what they do is technically

00:08:37,560 --> 00:08:42,120
they take a vote and people can say I

00:08:39,240 --> 00:08:43,110
strongly disagree I disagree I'm neutral

00:08:42,120 --> 00:08:47,460
I agree

00:08:43,110 --> 00:08:51,570
strong agree and practice really as long

00:08:47,460 --> 00:08:54,630
as the engines as a whole all agree

00:08:51,570 --> 00:08:56,970
things will advance so there are some

00:08:54,630 --> 00:08:59,410
some technical differences but it really

00:08:56,970 --> 00:09:03,290
is fairly similar

00:08:59,410 --> 00:09:05,540
nice digging into one of those proposals

00:09:03,290 --> 00:09:09,770
that Willian talked about there's this

00:09:05,540 --> 00:09:14,860
concept of binary a STS and essentially

00:09:09,770 --> 00:09:17,360
having a much easier to parse version of

00:09:14,860 --> 00:09:19,520
JavaScript what's that going to do to

00:09:17,360 --> 00:09:22,430
the demand for web assembly we're one of

00:09:19,520 --> 00:09:24,230
at least the initial value propositions

00:09:22,430 --> 00:09:25,520
was hey this stuff can be compiled so

00:09:24,230 --> 00:09:28,880
fast that we don't need to worry about

00:09:25,520 --> 00:09:31,610
that initial startup phase so um I'd say

00:09:28,880 --> 00:09:33,890
that it's actually pretty useful to look

00:09:31,610 --> 00:09:36,380
at the different kinds of use cases that

00:09:33,890 --> 00:09:40,280
these two that inspired work on these

00:09:36,380 --> 00:09:42,500
two so for web assembly a lot of the use

00:09:40,280 --> 00:09:43,940
cases were around desktop applications

00:09:42,500 --> 00:09:45,230
and games at least the first inspired it

00:09:43,940 --> 00:09:48,560
we're seeing a lot of other use cases

00:09:45,230 --> 00:09:51,020
now but and what needed to happen there

00:09:48,560 --> 00:09:52,880
was actually a start up time is

00:09:51,020 --> 00:09:55,040
important but that wasn't the critical

00:09:52,880 --> 00:09:58,100
thing there it was execution how fast

00:09:55,040 --> 00:10:05,420
the code is running rather than how fast

00:09:58,100 --> 00:10:09,440
it starts up and for so it was really at

00:10:05,420 --> 00:10:11,150
the time about bringing new things to

00:10:09,440 --> 00:10:12,890
the web that weren't already on the web

00:10:11,150 --> 00:10:14,660
now we're seeing that you can actually

00:10:12,890 --> 00:10:17,030
speed up things that are on the web like

00:10:14,660 --> 00:10:20,180
the parser that I mentioned that is used

00:10:17,030 --> 00:10:21,980
in web packet and our dev tools or the

00:10:20,180 --> 00:10:24,860
Gutenberg part which is 86 times faster

00:10:21,980 --> 00:10:27,380
but that's really a different use case

00:10:24,860 --> 00:10:28,970
than taking something like Facebook or

00:10:27,380 --> 00:10:34,220
Gmail and trying to make it start up

00:10:28,970 --> 00:10:37,480
faster binary AST is really specifically

00:10:34,220 --> 00:10:44,270
targeted at the problem of startup cost

00:10:37,480 --> 00:10:46,460
and so with binary AST we take this

00:10:44,270 --> 00:10:49,250
process that's really complicated and

00:10:46,460 --> 00:10:50,780
manual today where you have to do all of

00:10:49,250 --> 00:10:53,260
these things to improve your startup

00:10:50,780 --> 00:10:57,020
times like code splitting and we

00:10:53,260 --> 00:11:01,340
automate a lot of that to make it so

00:10:57,020 --> 00:11:04,670
that um you don't have to think so much

00:11:01,340 --> 00:11:06,590
about how to design your system to

00:11:04,670 --> 00:11:09,530
optimize for start-up cost you can just

00:11:06,590 --> 00:11:10,370
automate this process of getting a quick

00:11:09,530 --> 00:11:12,860
startup

00:11:10,370 --> 00:11:15,260
you know just to put a bit more on top

00:11:12,860 --> 00:11:20,480
of that like they are trying to it's

00:11:15,260 --> 00:11:23,180
different problems like for like binary

00:11:20,480 --> 00:11:25,730
it is something that targets the code

00:11:23,180 --> 00:11:28,820
start of a JavaScript application so it

00:11:25,730 --> 00:11:32,150
tries to make the compiler face it start

00:11:28,820 --> 00:11:35,089
faster and and and where the same is

00:11:32,150 --> 00:11:38,390
more about like runtime so how fast your

00:11:35,089 --> 00:11:42,529
how performing your code could be so

00:11:38,390 --> 00:11:44,779
it's and pre its different kind of

00:11:42,529 --> 00:11:46,760
things and they are I think as far as I

00:11:44,779 --> 00:11:49,310
know like the community is not even sure

00:11:46,760 --> 00:11:52,790
that if binary ST is something that

00:11:49,310 --> 00:11:55,420
needs to proceed because for example v8

00:11:52,790 --> 00:11:57,410
has a different way to parse the the

00:11:55,420 --> 00:11:59,750
JavaScript like they have like extend

00:11:57,410 --> 00:12:04,610
their parts JavaScript in a streamlined

00:11:59,750 --> 00:12:08,300
way so and and the POC that did so far

00:12:04,610 --> 00:12:10,910
is it was only in spider monkey so they

00:12:08,300 --> 00:12:13,250
they need to try to assess this if this

00:12:10,910 --> 00:12:14,990
solution is even true it's a performance

00:12:13,250 --> 00:12:24,640
win for the other browser vendors as

00:12:14,990 --> 00:12:27,710
well we are in Firefox we're working on

00:12:24,640 --> 00:12:31,100
moving this out and I think it is right

00:12:27,710 --> 00:12:34,490
for other vendors to say well show us

00:12:31,100 --> 00:12:37,339
the numbers before we go and duplicate

00:12:34,490 --> 00:12:40,250
the effort here and the good thing is

00:12:37,339 --> 00:12:41,990
frankly is T it's a format where this or

00:12:40,250 --> 00:12:43,520
is is a proposal where this is possible

00:12:41,990 --> 00:12:45,770
if we were shipping a language feature

00:12:43,520 --> 00:12:47,690
and then at some point said I know we

00:12:45,770 --> 00:12:49,760
changed our mind and stopped shipping it

00:12:47,690 --> 00:12:52,160
we would wake code that depends on it

00:12:49,760 --> 00:12:55,940
that's not the case with binary ST it's

00:12:52,160 --> 00:12:58,670
really much like a minification step

00:12:55,940 --> 00:13:00,589
where nobody would only ship by anyway

00:12:58,670 --> 00:13:03,260
as G at least for the foreseeable future

00:13:00,589 --> 00:13:05,480
so if we at some point stopped sending

00:13:03,260 --> 00:13:09,740
the header saying we understand binary

00:13:05,480 --> 00:13:13,279
AST then we'll just instead get aj s

00:13:09,740 --> 00:13:16,459
file and nothing quakes so that's good

00:13:13,279 --> 00:13:19,190
I don't want to say something more about

00:13:16,459 --> 00:13:20,870
the motivation here I think it's really

00:13:19,190 --> 00:13:23,960
important to look at this holistically

00:13:20,870 --> 00:13:26,899
we want the web to be

00:13:23,960 --> 00:13:29,690
platform where you can ship or do you

00:13:26,899 --> 00:13:33,920
deploy applications of all sizes to and

00:13:29,690 --> 00:13:35,779
to make that work we need to pull all

00:13:33,920 --> 00:13:37,880
the levers that we have access to we

00:13:35,779 --> 00:13:40,910
can't just say well this seems kind of

00:13:37,880 --> 00:13:43,480
good enough so let's let's not continue

00:13:40,910 --> 00:13:46,070
working in this direction we need to do

00:13:43,480 --> 00:13:47,600
what we can for start-up performance in

00:13:46,070 --> 00:13:49,520
all kinds of ways we need to optimize

00:13:47,600 --> 00:13:52,370
one-time performance using the right

00:13:49,520 --> 00:13:54,529
language for the job for individual

00:13:52,370 --> 00:13:56,510
modules and going forward we'll

00:13:54,529 --> 00:13:58,010
eventually also want to look at similar

00:13:56,510 --> 00:14:02,120
things for the other parts of the

00:13:58,010 --> 00:14:04,940
platform like HTML and CSS and stopping

00:14:02,120 --> 00:14:06,380
at some point because we feel like this

00:14:04,940 --> 00:14:13,700
is fast enough for what people are doing

00:14:06,380 --> 00:14:19,190
now is selling the platform short so in

00:14:13,700 --> 00:14:20,899
Shaun's talk we in Shaun's talk you

00:14:19,190 --> 00:14:23,540
talked a lot about compile time

00:14:20,899 --> 00:14:25,730
optimizations and I think this is

00:14:23,540 --> 00:14:27,410
something that clearly lends itself well

00:14:25,730 --> 00:14:29,540
in the web assembly world what you were

00:14:27,410 --> 00:14:31,550
talking about with treating binary

00:14:29,540 --> 00:14:35,839
estie's is essentially a minification or

00:14:31,550 --> 00:14:41,300
compile step where do you all feel we

00:14:35,839 --> 00:14:43,070
are in the sort of build systems around

00:14:41,300 --> 00:14:44,660
web development you know it feels like

00:14:43,070 --> 00:14:46,540
we've come a long way in the last few

00:14:44,660 --> 00:14:49,160
years but does that mean that we're at

00:14:46,540 --> 00:14:51,740
about as good as it's going to get or we

00:14:49,160 --> 00:14:55,610
are at step one of 10 or you know how

00:14:51,740 --> 00:14:59,029
far is this stuff going to go it's a

00:14:55,610 --> 00:15:02,240
very broad question I am far from an

00:14:59,029 --> 00:15:03,950
authority on this but I think I think we

00:15:02,240 --> 00:15:07,370
were definitely at the beginning of

00:15:03,950 --> 00:15:09,370
build system innovation in fact like you

00:15:07,370 --> 00:15:12,200
know a lot of these pieces were were

00:15:09,370 --> 00:15:13,610
cobbled together and invented separately

00:15:12,200 --> 00:15:16,160
and that's why people complain that

00:15:13,610 --> 00:15:18,890
there's no integrated end-to-end thing

00:15:16,160 --> 00:15:21,950
from from you know NPM installed to web

00:15:18,890 --> 00:15:23,420
packed Babel and and and in having

00:15:21,950 --> 00:15:25,970
conflicts between like all this all

00:15:23,420 --> 00:15:28,370
these different parts of the system make

00:15:25,970 --> 00:15:30,620
on boarding to web home and difficult I

00:15:28,370 --> 00:15:34,600
think there is some reason there is some

00:15:30,620 --> 00:15:37,670
struggle against like mning such a

00:15:34,600 --> 00:15:39,500
complicated build system is a

00:15:37,670 --> 00:15:41,180
it's the original spirit of the web you

00:15:39,500 --> 00:15:43,820
know like you used to be able to just

00:15:41,180 --> 00:15:46,190
drop some JSON to HTML and that's true

00:15:43,820 --> 00:15:48,590
but the same time the way we use the web

00:15:46,190 --> 00:15:52,760
has also changed a lot and so our tools

00:15:48,590 --> 00:15:53,750
should evolved accordingly and there

00:15:52,760 --> 00:15:59,360
should be there should be more

00:15:53,750 --> 00:16:02,750
innovation on this yeah I mean and like

00:15:59,360 --> 00:16:05,810
as much as you know I talk about Trent

00:16:02,750 --> 00:16:08,630
compiling to JavaScript but I think that

00:16:05,810 --> 00:16:10,930
obviously there's a huge case for

00:16:08,630 --> 00:16:13,880
compiling to web assembly

00:16:10,930 --> 00:16:15,980
well I think that as you point out the

00:16:13,880 --> 00:16:18,380
the use cases that we're doing web

00:16:15,980 --> 00:16:20,750
development for have changed and I think

00:16:18,380 --> 00:16:22,460
in your talk yesterday on web assembly

00:16:20,750 --> 00:16:25,310
you talked about taking this concept of

00:16:22,460 --> 00:16:27,650
the web platform and expanding it beyond

00:16:25,310 --> 00:16:30,470
what we traditionally think of as the

00:16:27,650 --> 00:16:32,270
web how far do you think that goes is

00:16:30,470 --> 00:16:34,250
eventually every type of development

00:16:32,270 --> 00:16:40,130
using the web development model and

00:16:34,250 --> 00:16:44,710
platform so in in the talk yesterday I

00:16:40,130 --> 00:16:47,780
made this sort of offhand joke about

00:16:44,710 --> 00:16:53,080
stealing your Bitcoin wallet which of

00:16:47,780 --> 00:16:59,630
course is based on real world events and

00:16:53,080 --> 00:17:03,920
it's no joke it's it's something that

00:16:59,630 --> 00:17:08,270
has actually happened applications an

00:17:03,920 --> 00:17:10,790
application that you trust where you

00:17:08,270 --> 00:17:13,550
rightfully trust the author of that

00:17:10,790 --> 00:17:16,610
application still going behind your back

00:17:13,550 --> 00:17:17,330
and stealing your money literally well

00:17:16,610 --> 00:17:24,830
almost

00:17:17,330 --> 00:17:27,620
blockchain and this problem won't go

00:17:24,830 --> 00:17:31,220
away without us doing anything about it

00:17:27,620 --> 00:17:33,820
and the way I see it we can do something

00:17:31,220 --> 00:17:37,280
about it in two different ways either by

00:17:33,820 --> 00:17:40,390
locking everything down through

00:17:37,280 --> 00:17:45,560
Authority going through app stores and

00:17:40,390 --> 00:17:48,020
letting the apples of this world dictate

00:17:45,560 --> 00:17:50,160
what you can and cannot consume in terms

00:17:48,020 --> 00:17:57,600
of applications in media

00:17:50,160 --> 00:18:00,930
or by going away from something that is

00:17:57,600 --> 00:18:02,299
otherwise incredibly helpful and

00:18:00,930 --> 00:18:06,179
[Music]

00:18:02,299 --> 00:18:08,100
increases the stability and product of

00:18:06,179 --> 00:18:09,809
our applications and the productivity of

00:18:08,100 --> 00:18:12,750
developers and there is code we use

00:18:09,809 --> 00:18:17,179
screw platforms like NPM or for West we

00:18:12,750 --> 00:18:20,490
have kway teow which is very similar and

00:18:17,179 --> 00:18:24,570
it's not scalable to try to weave you

00:18:20,490 --> 00:18:26,840
the entire code therefore the hundreds

00:18:24,570 --> 00:18:29,580
of thousands of packages published there

00:18:26,840 --> 00:18:31,799
all the time and we see that it's not

00:18:29,580 --> 00:18:35,940
scalable because nobody is doing and

00:18:31,799 --> 00:18:38,820
nobody could possibly do it and so we

00:18:35,940 --> 00:18:41,370
can give up on this code we use or we

00:18:38,820 --> 00:18:43,500
can say well let's work on things such

00:18:41,370 --> 00:18:45,780
that you don't have to trust all of this

00:18:43,500 --> 00:18:48,990
code and to do that we need wrapper

00:18:45,780 --> 00:18:52,080
sandboxing we need to be able to say I I

00:18:48,990 --> 00:18:54,059
don't as long as the application can

00:18:52,080 --> 00:18:55,950
only run in this directory you say I

00:18:54,059 --> 00:18:58,049
don't usually care about whether it

00:18:55,950 --> 00:18:58,770
tries to steal my Bitcoin wallet because

00:18:58,049 --> 00:19:00,960
it can't

00:18:58,770 --> 00:19:04,080
I need don't need to trusted him in this

00:19:00,960 --> 00:19:05,850
regard and for that we need to bring a

00:19:04,080 --> 00:19:09,020
sandboxing model that is essentially

00:19:05,850 --> 00:19:11,789
similar to what the web provides to

00:19:09,020 --> 00:19:14,940
development outside the web in a way

00:19:11,789 --> 00:19:16,950
that still allows these applications to

00:19:14,940 --> 00:19:21,570
provide the value you want from them and

00:19:16,950 --> 00:19:24,179
we are working on that when I was

00:19:21,570 --> 00:19:25,919
tweeting about your talk I had a someone

00:19:24,179 --> 00:19:28,950
who does native development respond and

00:19:25,919 --> 00:19:30,299
say hey do I really want my applications

00:19:28,950 --> 00:19:31,890
running in a browser isn't that going to

00:19:30,299 --> 00:19:33,510
be a little heavy wait isn't that going

00:19:31,890 --> 00:19:36,630
to slow everything down and will that

00:19:33,510 --> 00:19:39,870
give me the access that I need how do we

00:19:36,630 --> 00:19:41,700
address those concerns from folks who

00:19:39,870 --> 00:19:44,309
are used to being able to essentially

00:19:41,700 --> 00:19:47,760
access everything and run at a

00:19:44,309 --> 00:19:49,830
bare-metal level so that I'm glad you

00:19:47,760 --> 00:19:52,340
mentioned the access everything he

00:19:49,830 --> 00:19:55,830
mentioned me in that tweet as well and

00:19:52,340 --> 00:19:58,020
this idea of a developer accessing

00:19:55,830 --> 00:20:00,059
anything on your system that is great

00:19:58,020 --> 00:20:02,940
for the developer is really not great

00:20:00,059 --> 00:20:04,139
for the user as till was just talking

00:20:02,940 --> 00:20:09,029
about

00:20:04,139 --> 00:20:11,419
it opens up it opens you up to so many

00:20:09,029 --> 00:20:15,090
different security vulnerabilities so

00:20:11,419 --> 00:20:16,649
it's not just the web that has locked

00:20:15,090 --> 00:20:18,419
down on these things you're actually

00:20:16,649 --> 00:20:20,279
seeing the operating system start to

00:20:18,419 --> 00:20:22,649
lock down in these things as well

00:20:20,279 --> 00:20:24,749
Apple is actually starting to lock down

00:20:22,649 --> 00:20:31,229
on what their application developers can

00:20:24,749 --> 00:20:34,739
do and I think that as developers see

00:20:31,229 --> 00:20:38,249
better systems for providing this kind

00:20:34,739 --> 00:20:41,489
of ability capabilities but with a

00:20:38,249 --> 00:20:43,739
security around them they'll start to

00:20:41,489 --> 00:20:45,359
accept it too because it protects them

00:20:43,739 --> 00:20:48,029
if they're reusing code from other

00:20:45,359 --> 00:20:50,220
people it protects their applications

00:20:48,029 --> 00:20:52,859
from the kinds of exploits that they

00:20:50,220 --> 00:20:56,039
could potentially be vulnerable to which

00:20:52,859 --> 00:20:58,919
I think most aboveboard developers are

00:20:56,039 --> 00:21:03,960
in favor of not putting their user

00:20:58,919 --> 00:21:07,739
systems at risk there's also actually a

00:21:03,960 --> 00:21:11,039
kind of funny part to this when I looked

00:21:07,739 --> 00:21:12,690
at this Twitter conversation yesterday I

00:21:11,039 --> 00:21:14,820
then looked at the timeline of this

00:21:12,690 --> 00:21:20,450
person who had posed these questions and

00:21:14,820 --> 00:21:24,749
just a few days ago they had compared

00:21:20,450 --> 00:21:26,729
iTunes and epimutations about how badly

00:21:24,749 --> 00:21:28,859
it works and had compared it to Spotify

00:21:26,729 --> 00:21:31,529
and said this is how an application

00:21:28,859 --> 00:21:34,229
should be done it went smoothly and it's

00:21:31,529 --> 00:21:36,809
really well done and at the same time

00:21:34,229 --> 00:21:40,139
they complained about how all these web

00:21:36,809 --> 00:21:41,999
apps need an entire browser quantum well

00:21:40,139 --> 00:21:44,940
Spotify turns out to be an electron app

00:21:41,999 --> 00:21:46,950
that brings its own browser wizard so

00:21:44,940 --> 00:21:51,559
turns out the web platform actually is

00:21:46,950 --> 00:21:51,559
maybe further ahead and they realize

00:21:52,729 --> 00:21:57,239
awesome so coming back a little bit to

00:21:54,989 --> 00:22:00,330
the languages that we're using to build

00:21:57,239 --> 00:22:02,789
this out you know Lynn you highlighted

00:22:00,330 --> 00:22:06,470
the need for easy and fast data exchange

00:22:02,789 --> 00:22:08,759
and we saw yesterday some discussion of

00:22:06,470 --> 00:22:10,649
typescript and I know there's a lot of

00:22:08,759 --> 00:22:12,869
type discussion the JavaScript community

00:22:10,649 --> 00:22:14,759
right now we also one of the things that

00:22:12,869 --> 00:22:16,349
web assembly gives us is you know the

00:22:14,759 --> 00:22:17,410
ability to use languages like rust and

00:22:16,349 --> 00:22:20,320
other things that have these

00:22:17,410 --> 00:22:21,550
guarantees when we're talking back and

00:22:20,320 --> 00:22:23,610
forth between these different

00:22:21,550 --> 00:22:24,940
environments is there a mechanism within

00:22:23,610 --> 00:22:30,660
webassembly

00:22:24,940 --> 00:22:30,660
for translating those type guarantees

00:22:30,810 --> 00:22:36,520
kept only that is up to tooling and the

00:22:34,450 --> 00:22:39,030
rest - webisode mutual chain that we are

00:22:36,520 --> 00:22:41,740
working on actually could uses

00:22:39,030 --> 00:22:44,800
typescript definition files for the web

00:22:41,740 --> 00:22:46,450
assembly modules so that you can work

00:22:44,800 --> 00:22:48,550
with them in a sporran a type way and

00:22:46,450 --> 00:22:51,550
you have to you have to pass in the

00:22:48,550 --> 00:22:53,020
pride types and you have something to

00:22:51,550 --> 00:22:56,440
have some kind of layer that converts

00:22:53,020 --> 00:22:57,970
what the web assembly module could uses

00:22:56,440 --> 00:23:01,150
into something that you as a JavaScript

00:22:57,970 --> 00:23:04,570
developer can consume and currently all

00:23:01,150 --> 00:23:06,910
you have to interact with the episode

00:23:04,570 --> 00:23:09,630
new module are numbers instant float so

00:23:06,910 --> 00:23:12,820
all that that one we can understand

00:23:09,630 --> 00:23:17,140
going forward that'll change Lynn talked

00:23:12,820 --> 00:23:21,580
about the garbage collection proposal

00:23:17,140 --> 00:23:25,660
for web assembly and I'm actually the

00:23:21,580 --> 00:23:27,880
tc39 champion for the accompanying typed

00:23:25,660 --> 00:23:31,240
objects proposal where we will have

00:23:27,880 --> 00:23:32,680
strongly typed JavaScript objects where

00:23:31,240 --> 00:23:34,930
you don't only have the type of the

00:23:32,680 --> 00:23:38,380
object itself but all the fields on that

00:23:34,930 --> 00:23:40,930
object are strongly typed and in a fixed

00:23:38,380 --> 00:23:42,670
location in memory so that they can be

00:23:40,930 --> 00:23:45,790
efficiently accessed both in web

00:23:42,670 --> 00:23:48,220
assembly and in JavaScript but you will

00:23:45,790 --> 00:23:50,590
still want to have typescript definition

00:23:48,220 --> 00:23:52,780
files to see what that structure is and

00:23:50,590 --> 00:23:55,150
to have you editor give you hints about

00:23:52,780 --> 00:23:56,680
how to interact with that object so that

00:23:55,150 --> 00:23:59,290
won't go away and actually think

00:23:56,680 --> 00:24:04,450
typescript definition files are the

00:23:59,290 --> 00:24:07,270
right way to quote - that there's some

00:24:04,450 --> 00:24:09,340
so I'm not too clear about this but

00:24:07,270 --> 00:24:11,470
there's some discussion about the the

00:24:09,340 --> 00:24:15,450
soundness of like the soundness of a

00:24:11,470 --> 00:24:18,070
type system and I'm told that typescript

00:24:15,450 --> 00:24:21,400
isn't well it's not something by default

00:24:18,070 --> 00:24:24,310
and that could be a hurdle I don't fully

00:24:21,400 --> 00:24:29,490
like is that something that you all

00:24:24,310 --> 00:24:29,490
consider in terms of your discussions

00:24:29,619 --> 00:24:36,739
so the parts of the type system that we

00:24:32,809 --> 00:24:40,249
need for this are about the most really

00:24:36,739 --> 00:24:44,450
oh yes they fake ones and that part is

00:24:40,249 --> 00:24:48,499
sound there's a subset yes it's

00:24:44,450 --> 00:24:49,549
absolutely small Chinese anything there

00:24:48,499 --> 00:24:50,960
is something interesting for the

00:24:49,549 --> 00:24:53,149
typescript team to consider going

00:24:50,960 --> 00:24:55,399
forward once we add garbage collection

00:24:53,149 --> 00:24:59,090
support to webassembly they could

00:24:55,399 --> 00:25:01,309
actually go and compile parts of your

00:24:59,090 --> 00:25:04,730
typescript to webassembly to make it run

00:25:01,309 --> 00:25:06,619
fast but because the types of type

00:25:04,730 --> 00:25:07,940
system is unsound and because even

00:25:06,619 --> 00:25:10,369
without that it doesn't make sense to

00:25:07,940 --> 00:25:12,080
compile all code to Java to to whoever's

00:25:10,369 --> 00:25:14,989
in me instead of JavaScript they could

00:25:12,080 --> 00:25:17,450
do it on a per function level and if all

00:25:14,989 --> 00:25:18,799
engines have these fast calls said

00:25:17,450 --> 00:25:20,239
Linden talked about yesterday and

00:25:18,799 --> 00:25:22,909
actually published a blog post about a

00:25:20,239 --> 00:25:25,999
few months ago then itself doesn't

00:25:22,909 --> 00:25:27,470
matter which part of the system a

00:25:25,999 --> 00:25:29,749
function is implemented in and the

00:25:27,470 --> 00:25:32,509
JavaScript compiler could really that we

00:25:29,749 --> 00:25:33,590
find way and decide back and forth back

00:25:32,509 --> 00:25:35,299
web but something is good for this

00:25:33,590 --> 00:25:40,129
javascript is good for this let's

00:25:35,299 --> 00:25:43,999
optimize all the things I want to

00:25:40,129 --> 00:25:46,909
mention that there are two experiments

00:25:43,999 --> 00:25:51,320
done on JavaScript to compile to

00:25:46,909 --> 00:25:55,580
webassembly one is about the double-a LT

00:25:51,320 --> 00:25:58,399
which is kind of you write a JA

00:25:55,580 --> 00:26:00,470
JavaScript ish language that combines

00:25:58,399 --> 00:26:02,570
that with the whoever thing and there is

00:26:00,470 --> 00:26:06,289
another one called a same script script

00:26:02,570 --> 00:26:08,480
which is a subset of typescript that

00:26:06,289 --> 00:26:11,960
compiles down to the web assembly so

00:26:08,480 --> 00:26:14,419
yeah I'm interested in see how they they

00:26:11,960 --> 00:26:17,509
do this and how this can work out like

00:26:14,419 --> 00:26:20,509
maybe this could be a good starting

00:26:17,509 --> 00:26:22,100
point for writing JavaScript and see how

00:26:20,509 --> 00:26:28,840
this goes like back and forth on

00:26:22,100 --> 00:26:31,869
webassembly all of this discussion about

00:26:28,840 --> 00:26:34,519
the many fold possibilities here

00:26:31,869 --> 00:26:36,169
reminded me of an ongoing conversation

00:26:34,519 --> 00:26:39,769
that that folks are having about how we

00:26:36,169 --> 00:26:42,470
preserve the on-ramps to web development

00:26:39,769 --> 00:26:43,040
it used to be that you just get started

00:26:42,470 --> 00:26:44,720
you do a

00:26:43,040 --> 00:26:46,070
little bit of HTML you can do your CSS

00:26:44,720 --> 00:26:48,950
and JavaScript right there and you're

00:26:46,070 --> 00:26:50,390
already in and it's straightforward and

00:26:48,950 --> 00:26:52,490
easy and now we're getting into this

00:26:50,390 --> 00:26:54,320
polyglot language world we're getting

00:26:52,490 --> 00:26:57,290
into complex build chains we're getting

00:26:54,320 --> 00:26:58,940
into complex frameworks Lin I know you

00:26:57,290 --> 00:27:02,720
do a lot of thinking about how to

00:26:58,940 --> 00:27:04,610
explain code concepts to people I know

00:27:02,720 --> 00:27:05,900
that this is a surprised question

00:27:04,610 --> 00:27:07,580
because it just came up now I didn't

00:27:05,900 --> 00:27:09,590
prep you on this but do you have

00:27:07,580 --> 00:27:13,340
thoughts on how we make keep making this

00:27:09,590 --> 00:27:16,190
accessible to folks that is a question

00:27:13,340 --> 00:27:20,690
that has come up a number of times

00:27:16,190 --> 00:27:22,520
because people are worried that when you

00:27:20,690 --> 00:27:24,620
introduce something like web assembly

00:27:22,520 --> 00:27:26,600
does everyone then have to learn web

00:27:24,620 --> 00:27:31,790
assembly in order to be a web developer

00:27:26,600 --> 00:27:35,090
and I think that the answer is no I

00:27:31,790 --> 00:27:37,790
think that we can actually all of the

00:27:35,090 --> 00:27:39,440
web developers can benefit from web

00:27:37,790 --> 00:27:42,740
assembly without ever having to learn it

00:27:39,440 --> 00:27:46,310
if we have people like the react core

00:27:42,740 --> 00:27:49,910
developers re-implementing core parts of

00:27:46,310 --> 00:27:53,180
react then people who are using it won't

00:27:49,910 --> 00:27:55,910
actually have to know anything about web

00:27:53,180 --> 00:27:57,590
assembly they'll just see that the you

00:27:55,910 --> 00:28:01,670
know Dom deafening algorithm is going

00:27:57,590 --> 00:28:04,550
faster because the api's that are on top

00:28:01,670 --> 00:28:10,520
of it will stay the same and so I think

00:28:04,550 --> 00:28:13,070
that we can provide kind of this ladder

00:28:10,520 --> 00:28:14,960
basically add another few rungs to the

00:28:13,070 --> 00:28:16,820
ladder that you don't actually need to

00:28:14,960 --> 00:28:18,590
climb if you want to you can climb those

00:28:16,820 --> 00:28:20,390
extra wrongs and learn how to do web

00:28:18,590 --> 00:28:22,610
assembly development but that you don't

00:28:20,390 --> 00:28:24,050
need to to have the same level of

00:28:22,610 --> 00:28:26,300
proficiency that you do today and

00:28:24,050 --> 00:28:30,110
actually benefit from web assembly

00:28:26,300 --> 00:28:33,710
without having to learn it yeah I have

00:28:30,110 --> 00:28:36,040
thoughts I mean I agree I think as we

00:28:33,710 --> 00:28:39,080
like this industry is still super young

00:28:36,040 --> 00:28:42,080
you know you don't and and as we

00:28:39,080 --> 00:28:43,700
professionalize and go deeper it's the

00:28:42,080 --> 00:28:46,970
the the learning curve is going to steep

00:28:43,700 --> 00:28:48,890
in and like that's not it's not an

00:28:46,970 --> 00:28:51,590
argument to stop development you know

00:28:48,890 --> 00:28:53,870
and I think it's an argument for more

00:28:51,590 --> 00:28:55,670
people at every level particularly

00:28:53,870 --> 00:28:58,160
intermedia to

00:28:55,670 --> 00:29:00,500
to do to produce content to teach each

00:28:58,160 --> 00:29:02,990
other I'm a big proponent of learning in

00:29:00,500 --> 00:29:05,300
public what you know whatever you just

00:29:02,990 --> 00:29:09,140
learned you are the world's most recent

00:29:05,300 --> 00:29:10,550
expert at even though you may be you may

00:29:09,140 --> 00:29:12,050
not have like a hundred percent of the

00:29:10,550 --> 00:29:14,090
knowledge or you may be me

00:29:12,050 --> 00:29:16,730
maybe incomplete and missing out some of

00:29:14,090 --> 00:29:18,800
the history of something but you're our

00:29:16,730 --> 00:29:20,120
best place to explain to other beginners

00:29:18,800 --> 00:29:21,380
as well because you you have the

00:29:20,120 --> 00:29:24,260
beginner's mind and that's something

00:29:21,380 --> 00:29:28,640
that experts don't so I think that we

00:29:24,260 --> 00:29:29,840
should have more of that awesome I think

00:29:28,640 --> 00:29:32,540
we're getting close to where we're gonna

00:29:29,840 --> 00:29:33,980
have to wrap up for the next speakers to

00:29:32,540 --> 00:29:35,990
come in but I want to go around

00:29:33,980 --> 00:29:38,930
potentially to each of our panelists and

00:29:35,990 --> 00:29:40,040
ask you for a quick hit you know what is

00:29:38,930 --> 00:29:42,320
one of the things that you are most

00:29:40,040 --> 00:29:43,520
excited about coming in the future of

00:29:42,320 --> 00:29:45,290
web development and that can be

00:29:43,520 --> 00:29:47,570
JavaScript specific that can be

00:29:45,290 --> 00:29:49,520
webassembly specific that can be kind of

00:29:47,570 --> 00:29:51,950
global big picture of where the platform

00:29:49,520 --> 00:29:53,990
is going whatever layer you want to hit

00:29:51,950 --> 00:29:55,460
it at and in whatever order because I

00:29:53,990 --> 00:29:58,430
once again I didn't prep you on this

00:29:55,460 --> 00:29:59,810
sorry throwing you a few curveballs but

00:29:58,430 --> 00:30:01,490
what is something that gets you really

00:29:59,810 --> 00:30:02,990
excited about the future of web

00:30:01,490 --> 00:30:03,590
development cuz I mean from where I'm

00:30:02,990 --> 00:30:06,410
sitting

00:30:03,590 --> 00:30:07,820
we're where it's at like this is amazing

00:30:06,410 --> 00:30:10,760
the stuff going on in this industry is

00:30:07,820 --> 00:30:12,200
phenomenal and you know this is an

00:30:10,760 --> 00:30:17,120
exciting time to be alive

00:30:12,200 --> 00:30:21,890
I personally am very excited about how

00:30:17,120 --> 00:30:24,170
far the the web as a platform is going

00:30:21,890 --> 00:30:28,100
out of just for the web for example now

00:30:24,170 --> 00:30:31,160
you can create a PWA and install an

00:30:28,100 --> 00:30:33,470
unknown Windows machine so I'm very

00:30:31,160 --> 00:30:36,860
excited about that because like as a web

00:30:33,470 --> 00:30:38,810
developer I would I I'd like to do

00:30:36,860 --> 00:30:43,390
something more than just like web sites

00:30:38,810 --> 00:30:43,390
so yeah I'm pretty excited about it

00:30:44,500 --> 00:30:49,880
so I do a lot of I spend a lot of my

00:30:48,140 --> 00:30:50,660
time in the reactor wall ecosystem I

00:30:49,880 --> 00:30:53,720
guess

00:30:50,660 --> 00:30:55,010
and so concurrent reactors kind of like

00:30:53,720 --> 00:30:56,720
the next thing that's that's being

00:30:55,010 --> 00:30:59,300
released by the by the VI team and it's

00:30:56,720 --> 00:31:01,460
seems to be like you think that we're

00:30:59,300 --> 00:31:03,550
kind of done with like rendering thing

00:31:01,460 --> 00:31:06,560
rendering like lists of items on a page

00:31:03,550 --> 00:31:09,570
but there's so many nuances and and ways

00:31:06,560 --> 00:31:11,190
to declaratively make

00:31:09,570 --> 00:31:14,040
you know user and if declare user

00:31:11,190 --> 00:31:15,600
interface that's better and I you know

00:31:14,040 --> 00:31:19,470
I'm very much looking forward to the

00:31:15,600 --> 00:31:21,180
release of that over the next year I

00:31:19,470 --> 00:31:23,460
think that there there are a bunch of

00:31:21,180 --> 00:31:25,110
things that I'm excited about I talked

00:31:23,460 --> 00:31:27,300
about a bunch of them in the talk

00:31:25,110 --> 00:31:30,330
yesterday but I think the thing I'm most

00:31:27,300 --> 00:31:32,670
excited for is web assemblies

00:31:30,330 --> 00:31:33,960
integration with the garbage collector

00:31:32,670 --> 00:31:36,960
in the browser because I think that that

00:31:33,960 --> 00:31:38,790
opens the door to so many different use

00:31:36,960 --> 00:31:41,070
cases where we use javascript and web

00:31:38,790 --> 00:31:44,100
assembly together and where we use web

00:31:41,070 --> 00:31:46,200
assembly for the parts of an app that it

00:31:44,100 --> 00:31:51,840
really makes sense for and speed up a

00:31:46,200 --> 00:31:55,410
whole bunch of these apps I'm excited

00:31:51,840 --> 00:31:59,160
about tearing down barriers between the

00:31:55,410 --> 00:32:01,500
web and all other platforms in both

00:31:59,160 --> 00:32:04,440
directions so Kevin Lee if you want to

00:32:01,500 --> 00:32:07,020
have or in the past really we this is

00:32:04,440 --> 00:32:08,640
has sort of changed now in the past if

00:32:07,020 --> 00:32:12,750
you wanted to have a an application

00:32:08,640 --> 00:32:17,630
available on desktop systems and Android

00:32:12,750 --> 00:32:21,000
and iOS and also the web you built one

00:32:17,630 --> 00:32:23,430
portable application core for all these

00:32:21,000 --> 00:32:25,860
other platforms and then individual user

00:32:23,430 --> 00:32:28,140
interfaces for all of them and then you

00:32:25,860 --> 00:32:30,990
built the web version completely

00:32:28,140 --> 00:32:33,360
independent from all the quest or you

00:32:30,990 --> 00:32:35,520
have to choose to not have that or not

00:32:33,360 --> 00:32:38,880
have the other ones and we are changing

00:32:35,520 --> 00:32:40,560
that where the web platform can be one

00:32:38,880 --> 00:32:42,780
of the others where you have a portable

00:32:40,560 --> 00:32:45,000
core and you build a web specific user

00:32:42,780 --> 00:32:47,390
interface using web technologies that's

00:32:45,000 --> 00:32:51,540
the one direction the other direction is

00:32:47,390 --> 00:32:54,750
bringing webassembly to other use cases

00:32:51,540 --> 00:32:57,060
in similar ways to how node what

00:32:54,750 --> 00:32:59,340
javascript you are the use cases and to

00:32:57,060 --> 00:33:02,070
the degree that web developers get more

00:32:59,340 --> 00:33:05,630
comfortable with using web assembly and

00:33:02,070 --> 00:33:10,050
not all of them have to of course but

00:33:05,630 --> 00:33:13,950
those that do we open new worlds for

00:33:10,050 --> 00:33:18,750
them we open the ability to go into tiny

00:33:13,950 --> 00:33:22,110
Nicias where javascript would not be the

00:33:18,750 --> 00:33:22,770
quiet language and apply their abilities

00:33:22,110 --> 00:33:24,960
there

00:33:22,770 --> 00:33:27,330
really blurring the lines between these

00:33:24,960 --> 00:33:31,110
very two different platforms that's what

00:33:27,330 --> 00:33:33,690
I'm really excited about all right so as

00:33:31,110 --> 00:33:36,270
we wrap up I want to get a hand for all

00:33:33,690 --> 00:33:42,870
of our panelists here they're pretty

00:33:36,270 --> 00:33:44,370
amazing yeah I mean I don't know how I

00:33:42,870 --> 00:33:46,710
got so lucky to get to pick the brains

00:33:44,370 --> 00:33:47,940
of these types of folks but it's it's a

00:33:46,710 --> 00:33:51,330
pretty amazing thing and if you like

00:33:47,940 --> 00:33:54,720
hearing from folks like this every week

00:33:51,330 --> 00:33:57,870
take out your phone right now look up

00:33:54,720 --> 00:33:59,070
j/s party you can listen on the web if

00:33:57,870 --> 00:34:02,280
you really don't want to subscribe you

00:33:59,070 --> 00:34:04,770
can listen wherever you want and we

00:34:02,280 --> 00:34:07,260
bring content from conferences we have

00:34:04,770 --> 00:34:08,970
regular guests we've had you know folks

00:34:07,260 --> 00:34:13,169
like John Risa Khan the show we've had

00:34:08,970 --> 00:34:15,840
folks you know just incredible stuff and

00:34:13,169 --> 00:34:17,820
you know I I listen to every episode not

00:34:15,840 --> 00:34:19,320
just because I'm on the show a lot of

00:34:17,820 --> 00:34:20,520
times I'm not on the show and I just I'm

00:34:19,320 --> 00:34:23,909
like alright I got to hear what they

00:34:20,520 --> 00:34:26,730
said that's amazing so check it out

00:34:23,909 --> 00:34:27,070
thank you all for coming thank you thank

00:34:26,730 --> 00:34:33,829
you

00:34:27,070 --> 00:34:33,829

YouTube URL: https://www.youtube.com/watch?v=HkRrJvvnlvU


