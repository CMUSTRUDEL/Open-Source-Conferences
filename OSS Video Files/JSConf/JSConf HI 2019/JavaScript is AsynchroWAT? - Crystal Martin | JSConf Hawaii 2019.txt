Title: JavaScript is AsynchroWAT? - Crystal Martin | JSConf Hawaii 2019
Publication date: 2019-06-24
Playlist: JSConf HI 2019
Description: 
	Crystal Martin teaches JSConf about two things at the same time: Natural hair and asynchronous operations in JavaScript. Crystal uses the her hair care routine as an analogy for using async JavaScript operations effectively.

JSConf Hawaii is returning in 2020. Learn more at https://www.jsconfhi.com/
Captions: 
	00:00:05,620 --> 00:00:14,320
okay Aloha my J is Koko Hana well I'm

00:00:12,040 --> 00:00:16,770
crystal Martin I am originally from

00:00:14,320 --> 00:00:20,200
Detroit Michigan I currently live yeah

00:00:16,770 --> 00:00:23,020
right Marvin

00:00:20,200 --> 00:00:24,940
I currently live in st. Louis working as

00:00:23,020 --> 00:00:27,789
a Salesforce developer X while I'm

00:00:24,940 --> 00:00:29,199
consulting so Ivan this Lee Louis office

00:00:27,789 --> 00:00:34,090
we're all over the country all over the

00:00:29,199 --> 00:00:38,110
world and I am a proud cat mom of two so

00:00:34,090 --> 00:00:40,360
I want to start with a story once upon a

00:00:38,110 --> 00:00:42,640
time there was a junior deaf that was

00:00:40,360 --> 00:00:44,590
given the task of integrating stripe

00:00:42,640 --> 00:00:46,840
payments with Salesforce using

00:00:44,590 --> 00:00:50,500
javascript and sells horses Java based

00:00:46,840 --> 00:00:53,980
proprietary language apex some of the

00:00:50,500 --> 00:00:58,719
questions that mr. your dad asks what is

00:00:53,980 --> 00:01:02,770
an HTTP request what do you mean there

00:00:58,719 --> 00:01:08,399
is no stripe library for apex what is

00:01:02,770 --> 00:01:11,289
Ajax I thought this is what Ajax was

00:01:08,399 --> 00:01:15,280
like none of this made any sense to me I

00:01:11,289 --> 00:01:17,679
was lost and my use of confused parrot

00:01:15,280 --> 00:01:21,550
here when slacking my senior colleagues

00:01:17,679 --> 00:01:25,929
increased immensely he's my BFF I am

00:01:21,550 --> 00:01:27,819
confused parent we are one you see I was

00:01:25,929 --> 00:01:29,550
writing code on the proprietary

00:01:27,819 --> 00:01:32,259
Salesforce framework caught lightning

00:01:29,550 --> 00:01:34,840
which is based on the aura framework and

00:01:32,259 --> 00:01:37,569
it utilizes Ajax requests for server

00:01:34,840 --> 00:01:40,179
calls and a lot of things are taken care

00:01:37,569 --> 00:01:42,789
of under the hood so much like any other

00:01:40,179 --> 00:01:46,420
junior dev does once I got the hang of

00:01:42,789 --> 00:01:48,130
the pattern I knew what I had to do I go

00:01:46,420 --> 00:01:51,429
okay I have to have a Java Script

00:01:48,130 --> 00:01:52,959
controller and it calls helper functions

00:01:51,429 --> 00:01:55,030
and another jobs could control there and

00:01:52,959 --> 00:01:57,190
then it somehow calls my server call to

00:01:55,030 --> 00:02:00,209
get David so sure my user okay great

00:01:57,190 --> 00:02:04,300
why is he this working and I kept saying

00:02:00,209 --> 00:02:06,819
my logic is correct the way in which I

00:02:04,300 --> 00:02:08,560
made the request was correct the logic I

00:02:06,819 --> 00:02:11,500
had to process the request was the

00:02:08,560 --> 00:02:13,659
response that I got was right but there

00:02:11,500 --> 00:02:16,480
was a fundamental misunderstanding I was

00:02:13,659 --> 00:02:17,290
having I was trying to act on data that

00:02:16,480 --> 00:02:20,409
I hadn't even got

00:02:17,290 --> 00:02:22,900
back yet and I was assuming things were

00:02:20,409 --> 00:02:24,670
happening in order but I don't

00:02:22,900 --> 00:02:26,200
understand it at the time and when my

00:02:24,670 --> 00:02:29,409
colleague looked at what I was trying to

00:02:26,200 --> 00:02:34,090
do he goes it doesn't work that way and

00:02:29,409 --> 00:02:36,180
I go wah and he says because javascript

00:02:34,090 --> 00:02:41,700
is asynchronous

00:02:36,180 --> 00:02:44,349
what okay yeah okay

00:02:41,700 --> 00:02:46,719
javascript is a secret what like what

00:02:44,349 --> 00:02:48,519
does that mean I mean I know what

00:02:46,719 --> 00:02:51,430
synchronous and asynchronous mean as

00:02:48,519 --> 00:02:53,409
words like dictionary words but like I

00:02:51,430 --> 00:02:56,620
had no idea but this meant when it came

00:02:53,409 --> 00:02:58,629
to programming no idea now let me just

00:02:56,620 --> 00:02:59,139
stop here we're not gonna get into this

00:02:58,629 --> 00:03:02,049
nerds

00:02:59,139 --> 00:03:04,209
listen yes javascript is asynchronous

00:03:02,049 --> 00:03:06,129
right I know the JavaScript isn't any

00:03:04,209 --> 00:03:08,769
synchronous language but it has

00:03:06,129 --> 00:03:10,359
capabilities that allow it to to have

00:03:08,769 --> 00:03:12,209
asynchronous behavior but just roll with

00:03:10,359 --> 00:03:16,060
it oh okay

00:03:12,209 --> 00:03:19,540
you see part of the problem here is how

00:03:16,060 --> 00:03:21,639
many self-taught coders learn online we

00:03:19,540 --> 00:03:25,030
learn JavaScript like it always runs

00:03:21,639 --> 00:03:27,400
line by line one thing at a time and we

00:03:25,030 --> 00:03:29,769
get taught to solve puzzles rather than

00:03:27,400 --> 00:03:32,340
solve problems with the tool that we're

00:03:29,769 --> 00:03:35,650
using in the context of its intended use

00:03:32,340 --> 00:03:37,840
so sure I need to know what else what if

00:03:35,650 --> 00:03:39,970
else's are and I need to know what for

00:03:37,840 --> 00:03:42,549
loops are but they really discuss why

00:03:39,970 --> 00:03:46,959
javascript is the way it is what does it

00:03:42,549 --> 00:03:48,340
enable a developer to actually do so you

00:03:46,959 --> 00:03:50,500
know starting out this isn't super

00:03:48,340 --> 00:03:52,599
apparent to a junior devs we don't know

00:03:50,500 --> 00:03:54,579
about asynchronous Nissen till we're

00:03:52,599 --> 00:03:57,449
dumped in a coding job and have to write

00:03:54,579 --> 00:03:59,620
JavaScript for I don't know the web and

00:03:57,449 --> 00:04:01,510
then we're like where am I like

00:03:59,620 --> 00:04:05,590
for loops and count that I need to count

00:04:01,510 --> 00:04:06,430
like I've lost so you know you're

00:04:05,590 --> 00:04:08,319
probably thinking why you're talking

00:04:06,430 --> 00:04:10,689
about all this but I want this talk to

00:04:08,319 --> 00:04:11,889
do two things one I want it to be

00:04:10,689 --> 00:04:14,379
something that can be helpful for new

00:04:11,889 --> 00:04:16,329
depths to understand JavaScript a bit

00:04:14,379 --> 00:04:17,620
better and to show an overview over

00:04:16,329 --> 00:04:19,419
different ways that you can do

00:04:17,620 --> 00:04:21,459
asynchronous programming with JavaScript

00:04:19,419 --> 00:04:22,509
and I want it I basically wrote this

00:04:21,459 --> 00:04:24,880
talk because I wanted to break it down

00:04:22,509 --> 00:04:27,849
for myself I was using something that I

00:04:24,880 --> 00:04:30,169
had no idea what was happening in to our

00:04:27,849 --> 00:04:32,090
mid-career and senior developers and the

00:04:30,169 --> 00:04:33,770
to remember that most of the time we

00:04:32,090 --> 00:04:35,629
don't get topless stuff if you don't

00:04:33,770 --> 00:04:38,689
didn't get a siesta career even if you

00:04:35,629 --> 00:04:40,550
did and it's kind of confusing and it's

00:04:38,689 --> 00:04:42,740
possible you take your understanding of

00:04:40,550 --> 00:04:44,990
this for granted so my hope is that this

00:04:42,740 --> 00:04:46,580
talk will give you some intuition onto

00:04:44,990 --> 00:04:49,009
how to help someone better understand

00:04:46,580 --> 00:04:50,689
this so let's get into it but before we

00:04:49,009 --> 00:04:55,300
can talk about what asynchronous means

00:04:50,689 --> 00:04:55,300
let's talk about what synchronous means

00:04:57,400 --> 00:05:03,020
so essentially it means that things

00:05:00,139 --> 00:05:05,870
happen in order right synchronously one

00:05:03,020 --> 00:05:08,240
thing after another step-by-step but

00:05:05,870 --> 00:05:10,849
sometimes you need to make a call out to

00:05:08,240 --> 00:05:12,439
request data from an external system and

00:05:10,849 --> 00:05:14,330
because those things take time

00:05:12,439 --> 00:05:15,860
it can hold up processing of other

00:05:14,330 --> 00:05:18,650
actions that are independent of that

00:05:15,860 --> 00:05:20,120
data that you need so if you wait for it

00:05:18,650 --> 00:05:21,289
to come back before you go on to the

00:05:20,120 --> 00:05:24,159
next step in your part of your process

00:05:21,289 --> 00:05:26,300
you're wasting precious resources and

00:05:24,159 --> 00:05:30,430
that can't be used to do something else

00:05:26,300 --> 00:05:32,930
it's kind of like doing household chores

00:05:30,430 --> 00:05:36,199
say you need to clean up your house and

00:05:32,930 --> 00:05:38,629
do laundry so usually I put a load of

00:05:36,199 --> 00:05:40,819
clothes in before I start cleaning to

00:05:38,629 --> 00:05:43,370
get that process going I don't know

00:05:40,819 --> 00:05:45,800
about you and if you're doing chores in

00:05:43,370 --> 00:05:49,460
a totally synchronous way this will

00:05:45,800 --> 00:05:52,159
require us to put our dirty clothes in

00:05:49,460 --> 00:05:53,810
the washer and then proceed to stand

00:05:52,159 --> 00:05:57,740
there for thirty minutes as they wash

00:05:53,810 --> 00:05:59,569
rinse and spin before we can put them in

00:05:57,740 --> 00:06:00,969
the dryer for the next part of the

00:05:59,569 --> 00:06:05,990
process

00:06:00,969 --> 00:06:08,629
two hours later you're still standing

00:06:05,990 --> 00:06:10,219
there the Sun is going down and in the

00:06:08,629 --> 00:06:12,589
meantime I can't get anything else done

00:06:10,219 --> 00:06:14,960
I can't move on to clean the bathroom or

00:06:12,589 --> 00:06:17,680
load the dishwasher which leads us to a

00:06:14,960 --> 00:06:20,060
conversation on asynchronous programming

00:06:17,680 --> 00:06:24,969
so what is it it means things are

00:06:20,060 --> 00:06:24,969
happening at different times not in sync

00:06:26,250 --> 00:06:30,570
process and the rest of the code doesn't

00:06:28,110 --> 00:06:33,540
stop if there's a process that requires

00:06:30,570 --> 00:06:35,190
time so we just go along doing our own

00:06:33,540 --> 00:06:37,320
thing and in this case if you the rest

00:06:35,190 --> 00:06:40,080
of our chores and when there's an

00:06:37,320 --> 00:06:42,300
indication that our sequence process has

00:06:40,080 --> 00:06:44,730
completed we'll go on to the next step

00:06:42,300 --> 00:06:46,860
relate it to that so you don't need to

00:06:44,730 --> 00:06:48,810
you do have to wait for your clothes to

00:06:46,860 --> 00:06:51,630
dry before you can fold them unless

00:06:48,810 --> 00:06:53,550
you're weird but you don't need to stand

00:06:51,630 --> 00:06:56,820
there and wait for them to get other

00:06:53,550 --> 00:06:58,710
 done and why don't we use

00:06:56,820 --> 00:07:00,600
JavaScript for this well JavaScript was

00:06:58,710 --> 00:07:03,120
written to deal with user and user

00:07:00,600 --> 00:07:05,790
interactions in real time in the browser

00:07:03,120 --> 00:07:07,260
so users don't use the web in a

00:07:05,790 --> 00:07:08,670
synchronous way which is something I

00:07:07,260 --> 00:07:11,400
would have liked kind of like to learn

00:07:08,670 --> 00:07:12,720
about your interacting over a network

00:07:11,400 --> 00:07:15,960
connection pulling data from external

00:07:12,720 --> 00:07:18,740
sources which just takes time and

00:07:15,960 --> 00:07:21,419
JavaScript was created to actually

00:07:18,740 --> 00:07:23,880
ensure seamless experiences for users on

00:07:21,419 --> 00:07:25,200
the web so let's continue our

00:07:23,880 --> 00:07:28,200
conversation about asynchronous

00:07:25,200 --> 00:07:29,460
programming with JavaScript with a fun

00:07:28,200 --> 00:07:31,700
example that will help you learn

00:07:29,460 --> 00:07:35,130
something new about two things

00:07:31,700 --> 00:07:37,669
javascript and the natural haircare

00:07:35,130 --> 00:07:37,669
process

00:07:39,740 --> 00:07:46,919
black robe magic for you and Black

00:07:42,210 --> 00:07:50,040
History Month okay let's go so Naturals

00:07:46,919 --> 00:07:53,510
had this little thing called wash day

00:07:50,040 --> 00:07:56,940
hashtag wash man hear you I hear you yes

00:07:53,510 --> 00:07:59,280
and so clearly does meme is a joke but

00:07:56,940 --> 00:08:01,590
it isn't too far from the truth yes

00:07:59,280 --> 00:08:05,340
sometimes I need the Holy Bible to help

00:08:01,590 --> 00:08:06,750
me with this process but it's not far

00:08:05,340 --> 00:08:09,360
away from what a lot of naturals

00:08:06,750 --> 00:08:10,800
experience and generally I do this on a

00:08:09,360 --> 00:08:12,419
weekend day where I have some other

00:08:10,800 --> 00:08:15,660
chores as well so I can kind of

00:08:12,419 --> 00:08:16,860
multitask so if you don't know about the

00:08:15,660 --> 00:08:19,680
natural hair process okay you're gonna

00:08:16,860 --> 00:08:22,080
learn it's fine just roll with it so

00:08:19,680 --> 00:08:23,400
this is my do hair function and just you

00:08:22,080 --> 00:08:25,290
know this stuff is pseudocode it so

00:08:23,400 --> 00:08:30,060
don't get all judgy JavaScript

00:08:25,290 --> 00:08:31,560
developers but here's here's my main

00:08:30,060 --> 00:08:33,870
process this is not do hair functions

00:08:31,560 --> 00:08:36,060
I'm gonna walk you through it so first I

00:08:33,870 --> 00:08:37,590
have to do something called a pre-poo

00:08:36,060 --> 00:08:40,260
treatment what is that

00:08:37,590 --> 00:08:41,909
poof well sometimes I have my hair and

00:08:40,260 --> 00:08:44,340
like protective styles like this braids

00:08:41,909 --> 00:08:45,870
right or I have afro and it stays like

00:08:44,340 --> 00:08:48,270
that so I'm not calming my hair every

00:08:45,870 --> 00:08:51,120
day so I have to put some conditioner

00:08:48,270 --> 00:08:53,610
and oil in my hair first and let it fit

00:08:51,120 --> 00:08:55,890
so my hair can get soft and then I can

00:08:53,610 --> 00:08:57,420
go on to detangling right cuz I get

00:08:55,890 --> 00:08:59,970
softer and I can get those shed hair and

00:08:57,420 --> 00:09:02,190
I can detangle it and then I'll go ahead

00:08:59,970 --> 00:09:04,080
and shampoo my hair rinse that stuff out

00:09:02,190 --> 00:09:05,190
and then I have to do conditioner

00:09:04,080 --> 00:09:07,529
because I have to you know put the

00:09:05,190 --> 00:09:11,010
moisture back in let that sit for a

00:09:07,529 --> 00:09:13,170
while rinse it out and then air dry it

00:09:11,010 --> 00:09:15,830
air drying also takes time and then I'll

00:09:13,170 --> 00:09:18,360
restart I would turn my styled hair and

00:09:15,830 --> 00:09:19,740
this is what my Saturday generally looks

00:09:18,360 --> 00:09:23,010
like so I have my chores here I usually

00:09:19,740 --> 00:09:25,230
do my hair do laundry clean litter boxes

00:09:23,010 --> 00:09:28,410
clean the kitchen clean the bathroom so

00:09:25,230 --> 00:09:30,210
if I did this synchronously in order it

00:09:28,410 --> 00:09:31,800
would take a long time look at this this

00:09:30,210 --> 00:09:34,380
is what my day would look like right I'd

00:09:31,800 --> 00:09:36,540
have my do here function here and I'd

00:09:34,380 --> 00:09:38,070
have to go through all that before I

00:09:36,540 --> 00:09:40,560
actually got to anything else in my do

00:09:38,070 --> 00:09:42,990
chores function and I'm gonna go into

00:09:40,560 --> 00:09:45,000
detail so again pre-poo treatment

00:09:42,990 --> 00:09:47,550
requires me to put conditioner oil on my

00:09:45,000 --> 00:09:49,650
hair and do what wait right so I have to

00:09:47,550 --> 00:09:51,750
let it sit before I go on to detangle so

00:09:49,650 --> 00:09:53,490
I'm waiting and then I have another

00:09:51,750 --> 00:09:55,680
asynchronous process and then do here

00:09:53,490 --> 00:09:59,910
again right I have to deep condition my

00:09:55,680 --> 00:10:02,040
hair let it sit wait and then I have to

00:09:59,910 --> 00:10:03,930
go ahead and do another you synchronous

00:10:02,040 --> 00:10:06,420
process which is air drying my hair and

00:10:03,930 --> 00:10:08,040
I have to wait and it takes even more

00:10:06,420 --> 00:10:10,110
time so looking at the do chores

00:10:08,040 --> 00:10:12,330
function again here I have three

00:10:10,110 --> 00:10:15,180
asynchronous processes and it would take

00:10:12,330 --> 00:10:15,690
forever before I started doing anything

00:10:15,180 --> 00:10:17,400
else

00:10:15,690 --> 00:10:19,310
cleaning the lot you know clean the

00:10:17,400 --> 00:10:22,050
litter boxes doing laundry any of that

00:10:19,310 --> 00:10:24,420
so there's got to be a better way to do

00:10:22,050 --> 00:10:27,900
this right and there is thanks

00:10:24,420 --> 00:10:33,089
JavaScript let's do it asynchronously

00:10:27,900 --> 00:10:35,220
with callbacks so what is a car back a

00:10:33,089 --> 00:10:37,440
callback is a function that is passed as

00:10:35,220 --> 00:10:39,089
an argument to an asynchronous function

00:10:37,440 --> 00:10:41,790
ie a function it takes a while to

00:10:39,089 --> 00:10:44,130
complete some time and it's called once

00:10:41,790 --> 00:10:46,110
the asynchronous side takes it's called

00:10:44,130 --> 00:10:47,130
sir it's called once the ace even is

00:10:46,110 --> 00:10:49,640
function completes

00:10:47,130 --> 00:10:51,420
so to give you a little example here

00:10:49,640 --> 00:10:54,120
this is

00:10:51,420 --> 00:10:56,910
that function if I take a scared Kitty

00:10:54,120 --> 00:11:00,990
to the vet I need to comfort it when it

00:10:56,910 --> 00:11:03,240
comes back and so I have an asynchronous

00:11:00,990 --> 00:11:04,980
function here called take cat to vet

00:11:03,240 --> 00:11:07,320
where the kitty gets his temperature

00:11:04,980 --> 00:11:09,630
taken gets a shot and then it's brought

00:11:07,320 --> 00:11:11,640
back home this is the asynchronous

00:11:09,630 --> 00:11:15,120
function that takes a call back as an

00:11:11,640 --> 00:11:18,300
argument so as you see here the call

00:11:15,120 --> 00:11:20,820
back function gets passed by reference

00:11:18,300 --> 00:11:22,620
to take cat to vet so the front and

00:11:20,820 --> 00:11:27,410
Kitty get some TLC after visiting the

00:11:22,620 --> 00:11:29,790
big bag vet Viktor happy kitty

00:11:27,410 --> 00:11:31,050
so let's look all bags and the do hare

00:11:29,790 --> 00:11:32,610
function so to remind you the process

00:11:31,050 --> 00:11:33,570
here we're going to look at pre food

00:11:32,610 --> 00:11:35,160
treatments this is our first

00:11:33,570 --> 00:11:38,730
asynchronous function and it kicks off

00:11:35,160 --> 00:11:40,920
the do hair function so this is pre-poo

00:11:38,730 --> 00:11:43,140
without a callback this is what I do

00:11:40,920 --> 00:11:45,420
here so the function would just sit here

00:11:43,140 --> 00:11:48,000
while pre-poo was was finishing right

00:11:45,420 --> 00:11:50,010
and this function will be considered a

00:11:48,000 --> 00:11:51,600
blocking operation you know you can't go

00:11:50,010 --> 00:11:53,610
on and do anything else in the do hair

00:11:51,600 --> 00:11:57,450
function but I also can't do anything

00:11:53,610 --> 00:11:59,100
else in my overall chores function so I

00:11:57,450 --> 00:12:01,590
have to I'm going to go ahead and

00:11:59,100 --> 00:12:09,630
rewrite this as a callback that way we

00:12:01,590 --> 00:12:10,500
don't get stuck here I'm sorry so I have

00:12:09,630 --> 00:12:13,170
I have it

00:12:10,500 --> 00:12:15,300
taking the callback let's look at it so

00:12:13,170 --> 00:12:17,340
sorry I have this function here as we've

00:12:15,300 --> 00:12:18,990
written as a function that takes a

00:12:17,340 --> 00:12:22,410
callback and we'll look at it in more

00:12:18,990 --> 00:12:25,620
detail from this point so here is my

00:12:22,410 --> 00:12:27,960
pre-poo function declaration it

00:12:25,620 --> 00:12:32,580
indicates that I am going to have a

00:12:27,960 --> 00:12:34,230
function that takes a callback and so

00:12:32,580 --> 00:12:35,610
this was my pre food treatment does

00:12:34,230 --> 00:12:39,300
right misses the function does I put

00:12:35,610 --> 00:12:40,620
conditioner oil my hair and I wait and I

00:12:39,300 --> 00:12:42,270
come upon completion of the

00:12:40,620 --> 00:12:44,130
aforementioned process of putting the

00:12:42,270 --> 00:12:46,020
conditioner oil in my hair I will cause

00:12:44,130 --> 00:12:47,940
that timeout which is a method that will

00:12:46,020 --> 00:12:53,310
call a function which in this case is

00:12:47,940 --> 00:12:54,330
our call back after a waiting period and

00:12:53,310 --> 00:12:57,090
now I'm going to go ahead and actually

00:12:54,330 --> 00:12:58,650
call the people treatment but I'm going

00:12:57,090 --> 00:13:00,810
to go ahead and pass in my function

00:12:58,650 --> 00:13:02,790
which in this case is an anonymous

00:13:00,810 --> 00:13:03,220
function that contains the rest of the

00:13:02,790 --> 00:13:05,439
natural

00:13:03,220 --> 00:13:06,910
process and I've abbreviated it here but

00:13:05,439 --> 00:13:09,970
you can see that just for clarity's sake

00:13:06,910 --> 00:13:11,319
that's what we passed in now you can

00:13:09,970 --> 00:13:13,870
also instantiate the callback function

00:13:11,319 --> 00:13:15,519
and set it equal to a variable and

00:13:13,870 --> 00:13:18,490
pacify reference but you'll see this

00:13:15,519 --> 00:13:21,550
done both ways so this looks pretty good

00:13:18,490 --> 00:13:25,000
but you know what I need to add error

00:13:21,550 --> 00:13:27,250
handling you know sometimes my hair just

00:13:25,000 --> 00:13:28,720
isn't quite soft enough yet you know I

00:13:27,250 --> 00:13:31,209
put it in there - still flunk out of

00:13:28,720 --> 00:13:34,779
tough so if I started detangling my

00:13:31,209 --> 00:13:36,639
curly fragile strands it would not be

00:13:34,779 --> 00:13:38,529
good so I have to add some arrogantly

00:13:36,639 --> 00:13:40,209
here so it's not soft enough I'm gonna

00:13:38,529 --> 00:13:42,100
go ahead and not do anything right

00:13:40,209 --> 00:13:43,720
otherwise if it's okay I'm going to go

00:13:42,100 --> 00:13:48,459
ahead and go on to the next step of

00:13:43,720 --> 00:13:50,079
detangling and shampooing oh but you

00:13:48,459 --> 00:13:51,610
know what else I have some other

00:13:50,079 --> 00:13:54,009
asynchronous processes in here right I

00:13:51,610 --> 00:13:56,290
have to dis Hangul and shampoo which

00:13:54,009 --> 00:13:57,819
happened back-to-back but deep

00:13:56,290 --> 00:13:59,350
conditioning takes time right I have to

00:13:57,819 --> 00:14:03,639
wait for that one to let have to let it

00:13:59,350 --> 00:14:06,670
sit and you know what I heard Ryan takes

00:14:03,639 --> 00:14:08,350
time too so now I have a function that

00:14:06,670 --> 00:14:12,040
takes callbacks with functions that take

00:14:08,350 --> 00:14:14,230
callbacks and this is what the doTERRA

00:14:12,040 --> 00:14:16,329
function ends up looking like right now

00:14:14,230 --> 00:14:19,209
partially this is great because I have

00:14:16,329 --> 00:14:21,009
this asynchronous behavior right that

00:14:19,209 --> 00:14:23,410
allows me to go on and continue doing

00:14:21,009 --> 00:14:27,220
other things while I you know wait for

00:14:23,410 --> 00:14:29,079
my hair to be done but this target part

00:14:27,220 --> 00:14:30,490
to read right and what if there was

00:14:29,079 --> 00:14:31,809
another fellow like natural these

00:14:30,490 --> 00:14:34,269
wouldn't want to embrace our curls and

00:14:31,809 --> 00:14:36,189
follow my process this will get really

00:14:34,269 --> 00:14:39,129
really confusing to look at and this is

00:14:36,189 --> 00:14:40,389
what developers call callback hell it's

00:14:39,129 --> 00:14:42,009
kind of confusing to figure out what's

00:14:40,389 --> 00:14:44,620
happening here you know it makes

00:14:42,009 --> 00:14:46,269
tracking down bugs difficult and what if

00:14:44,620 --> 00:14:48,490
I added more asynchronous processes

00:14:46,269 --> 00:14:51,220
y'all believe it or not I'm going gray

00:14:48,490 --> 00:14:53,709
at the age of 31 so sometimes I have to

00:14:51,220 --> 00:14:56,439
put color in my hair and let that

00:14:53,709 --> 00:14:58,180
sit right you know and then sometimes I

00:14:56,439 --> 00:14:59,410
have to like I have to do a clarifying

00:14:58,180 --> 00:15:00,939
tree because I have to put some of the

00:14:59,410 --> 00:15:02,980
stuff in my hair so that's another

00:15:00,939 --> 00:15:04,269
asynchronous function or process that I

00:15:02,980 --> 00:15:06,279
would have to put in this do hair

00:15:04,269 --> 00:15:08,889
function like this would get confusing

00:15:06,279 --> 00:15:11,500
after a while so this functionality is

00:15:08,889 --> 00:15:14,410
great but the readability is not so

00:15:11,500 --> 00:15:15,670
great but there is a way you can rewrite

00:15:14,410 --> 00:15:17,100
asynchronous code

00:15:15,670 --> 00:15:20,080
so that it looks some more synchronous

00:15:17,100 --> 00:15:27,850
making it easier to follow and that can

00:15:20,080 --> 00:15:30,400
be done by using promises ah promises so

00:15:27,850 --> 00:15:31,510
useful yet so difficult to understand

00:15:30,400 --> 00:15:34,450
what you're starting out but I'm gonna

00:15:31,510 --> 00:15:36,400
try to break it down sorrell with me so

00:15:34,450 --> 00:15:38,380
what is a promise a promise is a

00:15:36,400 --> 00:15:41,040
JavaScript object that will produce a

00:15:38,380 --> 00:15:44,290
value at some point in the future

00:15:41,040 --> 00:15:45,580
promises basically promise that they'll

00:15:44,290 --> 00:15:48,790
let you know what happened right either

00:15:45,580 --> 00:15:51,850
it was fulfilled reject it or pending

00:15:48,790 --> 00:15:53,950
and it allows you to act on other your

00:15:51,850 --> 00:15:56,620
results with other methods and then I

00:15:53,950 --> 00:15:59,800
have a promise object here and this has

00:15:56,620 --> 00:16:02,980
two internal state and result properties

00:15:59,800 --> 00:16:05,050
and two method properties resolve and

00:16:02,980 --> 00:16:08,470
reject which will call about a minute

00:16:05,050 --> 00:16:10,780
and then I have dot VIN and dot catch

00:16:08,470 --> 00:16:13,210
which are handlers for the asynchronous

00:16:10,780 --> 00:16:15,070
calls result so it waits for a Stephan

00:16:13,210 --> 00:16:18,130
is code to complete to then go on to the

00:16:15,070 --> 00:16:22,900
next process and dot then takes two

00:16:18,130 --> 00:16:24,130
methods as arguments one the first

00:16:22,900 --> 00:16:27,190
function is what happens when everything

00:16:24,130 --> 00:16:28,660
goes well and the other one is what's

00:16:27,190 --> 00:16:32,800
good cause when this doesn't go well and

00:16:28,660 --> 00:16:35,320
that catch handles errors so let's look

00:16:32,800 --> 00:16:37,750
at the process and anatomy with a pizza

00:16:35,320 --> 00:16:39,520
promise so here I have a pizza promise

00:16:37,750 --> 00:16:42,580
I'm sure you'd all like to have a pizza

00:16:39,520 --> 00:16:45,850
promise Valentine's Day is coming up

00:16:42,580 --> 00:16:47,920
these Frances the so the promises object

00:16:45,850 --> 00:16:50,110
of promise object constructor has a

00:16:47,920 --> 00:16:53,590
function that takes the resolve and

00:16:50,110 --> 00:16:55,420
reject methods as parameters and then

00:16:53,590 --> 00:16:57,130
there's an executing cold that will

00:16:55,420 --> 00:17:00,520
return some kind of result and so in

00:16:57,130 --> 00:17:01,780
this case it's big pizza right so we

00:17:00,520 --> 00:17:05,380
have big pizza that's our executing

00:17:01,780 --> 00:17:07,930
close gonna do something and you know

00:17:05,380 --> 00:17:12,700
what baked pizza returns will either

00:17:07,930 --> 00:17:15,040
reject or resolve this promise so here

00:17:12,700 --> 00:17:17,080
if there's an error and say the pizza

00:17:15,040 --> 00:17:21,550
got burnt I'm gonna go ahead and reject

00:17:17,080 --> 00:17:23,890
with pizza era sabar pizza otherwise

00:17:21,550 --> 00:17:25,930
everything's great this pizza is perfect

00:17:23,890 --> 00:17:28,770
I'm gonna resolve with the perfect pizza

00:17:25,930 --> 00:17:30,600
and so now

00:17:28,770 --> 00:17:33,539
I can look at this and I'm going to go

00:17:30,600 --> 00:17:34,890
ahead and now I have a flow piece of

00:17:33,539 --> 00:17:37,529
promise here and I'm gonna go ahead and

00:17:34,890 --> 00:17:41,909
call it or call it kids promise with

00:17:37,529 --> 00:17:42,750
that then and again my first function in

00:17:41,909 --> 00:17:44,220
there is what's going to happen

00:17:42,750 --> 00:17:45,929
everything goes well so if I have a

00:17:44,220 --> 00:17:50,130
perfect pizza I'm gonna go ahead and eat

00:17:45,929 --> 00:17:51,480
that pizza or if it's burnt it's trash

00:17:50,130 --> 00:17:57,029
I'm gonna go ahead and throw away that

00:17:51,480 --> 00:17:59,789
pizza promises so we can rewrite pre-poo

00:17:57,029 --> 00:18:01,470
the function paper as a function that

00:17:59,789 --> 00:18:04,830
returns a promise and this enables us to

00:18:01,470 --> 00:18:07,679
go ahead and call other things on it so

00:18:04,830 --> 00:18:09,990
here I have pre pretreatment equal to a

00:18:07,679 --> 00:18:12,149
function of anonymous function takes

00:18:09,990 --> 00:18:13,679
here it returns a promise if

00:18:12,149 --> 00:18:15,390
everything's okay I'm sorry everything

00:18:13,679 --> 00:18:17,700
goes wrong I'm gonna go ahead and reject

00:18:15,390 --> 00:18:20,250
with an error huh that's awesome I can't

00:18:17,700 --> 00:18:22,440
drive into it otherwise it's okay I'm

00:18:20,250 --> 00:18:24,210
gonna go ahead and detangle it Shampoo

00:18:22,440 --> 00:18:26,010
it and then resolve this promise with

00:18:24,210 --> 00:18:30,240
shampooed hair so I can go on to the

00:18:26,010 --> 00:18:32,460
next step and know I could have do hair

00:18:30,240 --> 00:18:35,480
return a promise and this allows us to

00:18:32,460 --> 00:18:37,590
change our promises with dot bins a

00:18:35,480 --> 00:18:40,049
point completion of an asynchronous

00:18:37,590 --> 00:18:42,600
functions processing we can go on to the

00:18:40,049 --> 00:18:44,220
next step that returns a promise which

00:18:42,600 --> 00:18:46,919
means that we can do another that then

00:18:44,220 --> 00:18:50,789
and complete another step in the process

00:18:46,919 --> 00:18:52,350
and also notice that that things come

00:18:50,789 --> 00:18:55,590
after the return of an asynchronous

00:18:52,350 --> 00:18:57,179
function so this also means that we can

00:18:55,590 --> 00:18:58,470
handle errors in one place

00:18:57,179 --> 00:18:59,880
which allows us to remove all those it

00:18:58,470 --> 00:19:01,529
else as we had in our callback channel

00:18:59,880 --> 00:19:05,250
and clean up our code with that dot

00:19:01,529 --> 00:19:08,610
catch hair then dot then go out on the

00:19:05,250 --> 00:19:09,750
town oh and here's a side-by-side

00:19:08,610 --> 00:19:12,000
comparison

00:19:09,750 --> 00:19:14,370
and so now it's much easier to read you

00:19:12,000 --> 00:19:16,140
know no more pyramid of do whom just say

00:19:14,370 --> 00:19:19,980
synchronous Kol their reads

00:19:16,140 --> 00:19:27,470
synchronously but this can be improved

00:19:19,980 --> 00:19:27,470
even more with a sync awaked oh my god

00:19:28,560 --> 00:19:33,820
so this is kind of cool if you put the

00:19:31,660 --> 00:19:35,380
async keyword in front of a function it

00:19:33,820 --> 00:19:36,520
automatically makes it a function that

00:19:35,380 --> 00:19:39,160
returns a promise

00:19:36,520 --> 00:19:41,230
and if executing code returns a non

00:19:39,160 --> 00:19:43,990
promise value it'll just wrap it in a

00:19:41,230 --> 00:19:46,060
promise and a wait mix jeaious wait

00:19:43,990 --> 00:19:47,620
until the promise is settled and then

00:19:46,060 --> 00:19:49,510
returns the result and this only works

00:19:47,620 --> 00:19:51,880
with async function so faction but that

00:19:49,510 --> 00:19:53,620
keyword just the disclaimer here like

00:19:51,880 --> 00:19:55,930
this is a newer feature of JavaScript so

00:19:53,620 --> 00:19:57,190
you might have to figure out how to make

00:19:55,930 --> 00:19:59,650
it compatible browsers and all that

00:19:57,190 --> 00:20:06,880
stuff but it is a cool new way to handle

00:19:59,650 --> 00:20:09,000
asynchronous behavior and so now I can

00:20:06,880 --> 00:20:11,470
go ahead and rewrite my do here function

00:20:09,000 --> 00:20:13,060
with an async in front and then wherever

00:20:11,470 --> 00:20:15,190
I have an asynchronous process I just

00:20:13,060 --> 00:20:16,690
put in a weight there the function Waits

00:20:15,190 --> 00:20:20,190
and it allows me to go onto other things

00:20:16,690 --> 00:20:23,560
in my chore chart Detroit's function and

00:20:20,190 --> 00:20:25,420
so looking at this you can see all three

00:20:23,560 --> 00:20:27,460
approaches here now these are all

00:20:25,420 --> 00:20:30,850
correct ways for handling asynchronous

00:20:27,460 --> 00:20:32,620
behavior but as you can see it gets

00:20:30,850 --> 00:20:38,230
progressively easier to see what is

00:20:32,620 --> 00:20:40,810
happening in the code look at this looks

00:20:38,230 --> 00:20:42,430
so nice and easy to follow someone that

00:20:40,810 --> 00:20:44,590
didn't know JavaScript could probably

00:20:42,430 --> 00:20:45,970
guess what's happening here so now I

00:20:44,590 --> 00:20:48,550
might do here function is rewritten with

00:20:45,970 --> 00:20:50,170
async await I can go ahead and call the

00:20:48,550 --> 00:20:52,390
chores and everything works - maybe

00:20:50,170 --> 00:20:54,070
expensive we can start my hair go do

00:20:52,390 --> 00:20:55,720
something else come back to another step

00:20:54,070 --> 00:21:01,470
to something else come back to another

00:20:55,720 --> 00:21:06,790
step and now I have officially

00:21:01,470 --> 00:21:17,290
officially finished my arm my chores and

00:21:06,790 --> 00:21:20,830
my hair and not only do you know now how

00:21:17,290 --> 00:21:22,300
to slay natural hair but you can also

00:21:20,830 --> 00:21:27,280
display a sleeping this program with

00:21:22,300 --> 00:21:30,010
JavaScript real watch so in closing I

00:21:27,280 --> 00:21:32,230
just want to say being a junior dev is

00:21:30,010 --> 00:21:34,750
no joke it is not for the faint of heart

00:21:32,230 --> 00:21:36,580
and if you're feeling like a dummy it's

00:21:34,750 --> 00:21:39,400
okay you're a you were dummy and if so

00:21:36,580 --> 00:21:41,740
is everyone else you work with

00:21:39,400 --> 00:21:43,120
but seriously all jokes aside this is

00:21:41,740 --> 00:21:44,620
what it's exciting about being and

00:21:43,120 --> 00:21:46,270
programming right like everyone is

00:21:44,620 --> 00:21:47,559
trying to just figure things out we

00:21:46,270 --> 00:21:50,740
don't always have the answers we're

00:21:47,559 --> 00:21:52,720
always learning everyday and if you're a

00:21:50,740 --> 00:21:53,910
senior dev training a team or someone

00:21:52,720 --> 00:21:56,380
that's new to development may be

00:21:53,910 --> 00:21:58,540
non-traditional background like myself I

00:21:56,380 --> 00:22:00,910
was in education and non practice before

00:21:58,540 --> 00:22:02,950
I came to tech again just know this

00:22:00,910 --> 00:22:04,360
stuff isn't always apparent try to

00:22:02,950 --> 00:22:06,820
remember where you were here when you

00:22:04,360 --> 00:22:08,500
were here have some empathy you know and

00:22:06,820 --> 00:22:11,380
share your knowledge you know what they

00:22:08,500 --> 00:22:12,670
say those who can teach and those who

00:22:11,380 --> 00:22:16,210
can't just sit in the corner and call by

00:22:12,670 --> 00:22:17,950
themselves and if you create tech

00:22:16,210 --> 00:22:19,960
training materials think about how you

00:22:17,950 --> 00:22:22,540
can represent all the diverse people in

00:22:19,960 --> 00:22:24,130
this field that make up tech originally

00:22:22,540 --> 00:22:26,080
I was gonna write this whole talk with

00:22:24,130 --> 00:22:29,230
laundry as my main example that is

00:22:26,080 --> 00:22:31,480
boring and I started having flashbacks

00:22:29,230 --> 00:22:33,070
to my days watching online tutorials

00:22:31,480 --> 00:22:35,500
looking at stupid ass examples about

00:22:33,070 --> 00:22:37,179
torpedoes and like counting cattle for

00:22:35,500 --> 00:22:40,480
real some of y'all know what class I'm

00:22:37,179 --> 00:22:41,790
talking about and it was just so

00:22:40,480 --> 00:22:44,710
irritating to me that there were no

00:22:41,790 --> 00:22:45,880
examples like none of the materials were

00:22:44,710 --> 00:22:48,160
anything like anything that I had

00:22:45,880 --> 00:22:49,480
personally experienced and frankly

00:22:48,160 --> 00:22:50,800
sometimes it just made it hard for me to

00:22:49,480 --> 00:22:52,750
understand the content that I was

00:22:50,800 --> 00:22:54,460
supposed to be learning so it's

00:22:52,750 --> 00:22:56,170
important to me that everyone sees

00:22:54,460 --> 00:22:59,590
themselves in this field no matter who

00:22:56,170 --> 00:23:03,910
you are it makes a difference and I

00:22:59,590 --> 00:23:06,610
always like to give shout outs to my

00:23:03,910 --> 00:23:08,440
inspiration so I always just when I do a

00:23:06,610 --> 00:23:10,990
talk these are the people who helped me

00:23:08,440 --> 00:23:13,000
shape this idea who inspired it how give

00:23:10,990 --> 00:23:14,800
me feedback so the people on this slide

00:23:13,000 --> 00:23:17,290
are my friends my co-workers my

00:23:14,800 --> 00:23:19,630
boyfriend's up here too

00:23:17,290 --> 00:23:22,630
and I also want to do a special

00:23:19,630 --> 00:23:24,940
shout-out to Amy because she is actually

00:23:22,630 --> 00:23:27,100
like inspired this talks I did a zine

00:23:24,940 --> 00:23:30,610
workshop with her at a conference caught

00:23:27,100 --> 00:23:34,090
right speed code which yeah where

00:23:30,610 --> 00:23:36,160
my girls it can be that yeah this

00:23:34,090 --> 00:23:38,260
conference focuses on getting women and

00:23:36,160 --> 00:23:41,110
I'm binary people writing and speaking

00:23:38,260 --> 00:23:45,309
and tech and it works oh yeah you should

00:23:41,110 --> 00:23:47,110
sponsor it and I do this because people

00:23:45,309 --> 00:23:48,490
think that people think that like people

00:23:47,110 --> 00:23:51,070
who do conference talks has come up with

00:23:48,490 --> 00:23:52,300
like amazing ideas on their own and just

00:23:51,070 --> 00:23:52,750
like brilliant ideas falling from the

00:23:52,300 --> 00:23:55,060
sky and

00:23:52,750 --> 00:23:57,250
is not the truth for me my brilliant

00:23:55,060 --> 00:23:59,050
ideas are always a combination of the

00:23:57,250 --> 00:24:01,180
awesome brilliant people around me who I

00:23:59,050 --> 00:24:02,620
draw inspiration from so if you're

00:24:01,180 --> 00:24:04,420
thinking about doing a conference talk

00:24:02,620 --> 00:24:07,120
just know that you have a community of

00:24:04,420 --> 00:24:11,210
support then you can tap into it takes a

00:24:07,120 --> 00:24:18,579
village and we have your back thank you

00:24:11,210 --> 00:24:18,579

YouTube URL: https://www.youtube.com/watch?v=el9fhSbby5E


