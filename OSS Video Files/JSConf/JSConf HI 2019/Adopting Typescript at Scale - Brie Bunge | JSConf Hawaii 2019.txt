Title: Adopting Typescript at Scale - Brie Bunge | JSConf Hawaii 2019
Publication date: 2019-06-16
Playlist: JSConf HI 2019
Description: 
	Brie Bunge talks about the process AirBnB went through to adopt TypeScript throughout their organization.
Captions: 
	00:00:06,009 --> 00:00:13,250
Aloha my name is Bree and I work at

00:00:10,219 --> 00:00:14,900
Airbnb big changes at big organizations

00:00:13,250 --> 00:00:16,940
is hard there's a lot of people to

00:00:14,900 --> 00:00:18,800
convince and a lot of code to migrate

00:00:16,940 --> 00:00:21,040
I'd like to share with you how we

00:00:18,800 --> 00:00:23,330
brought typescript to Airbnb I

00:00:21,040 --> 00:00:24,650
appreciate you all being here with me I

00:00:23,330 --> 00:00:26,990
know you could be out at the beach with

00:00:24,650 --> 00:00:28,700
your snazzy new towel but I hope there's

00:00:26,990 --> 00:00:30,200
something in here for everyone whether

00:00:28,700 --> 00:00:31,760
you're navigating a big change at your

00:00:30,200 --> 00:00:33,680
company and this could be used as a sort

00:00:31,760 --> 00:00:35,809
of case study whether you're actively

00:00:33,680 --> 00:00:37,010
migrating to typescript now and there

00:00:35,809 --> 00:00:38,780
are tools and techniques that we'll talk

00:00:37,010 --> 00:00:40,850
about that can help or if you've heard a

00:00:38,780 --> 00:00:44,089
bit about typescript and want to learn

00:00:40,850 --> 00:00:48,229
more first we'll cover what typescript

00:00:44,089 --> 00:00:50,769
is what we mean by at scale the process

00:00:48,229 --> 00:00:52,909
of proposing typescript at this scale

00:00:50,769 --> 00:00:55,940
addressing questions and concerns along

00:00:52,909 --> 00:00:57,589
the way in response to the proposal how

00:00:55,940 --> 00:01:00,139
we gradually adopted typescript and

00:00:57,589 --> 00:01:03,469
migration strategies that we're using to

00:01:00,139 --> 00:01:05,120
move from JavaScript to typescript by a

00:01:03,469 --> 00:01:07,880
quick show of hands how many people have

00:01:05,120 --> 00:01:10,250
used typescript before oh cool that's a

00:01:07,880 --> 00:01:11,360
big number of you not everybody raise

00:01:10,250 --> 00:01:13,369
our hands so let's give a quick

00:01:11,360 --> 00:01:14,149
introductions so that everybody is on

00:01:13,369 --> 00:01:16,759
the same page

00:01:14,149 --> 00:01:18,860
suppose we had this greeter function it

00:01:16,759 --> 00:01:20,479
takes a name and returns hello that name

00:01:18,860 --> 00:01:24,380
so if we pass it in J's cough it would

00:01:20,479 --> 00:01:25,490
say hello J's cough how friendly here's

00:01:24,380 --> 00:01:27,259
what that code would look like in

00:01:25,490 --> 00:01:28,549
typescript notice that it's quite

00:01:27,259 --> 00:01:30,289
similar the only difference is that

00:01:28,549 --> 00:01:32,320
we've annotated the parameter with what

00:01:30,289 --> 00:01:34,939
type it is

00:01:32,320 --> 00:01:37,189
so if we use this function in our

00:01:34,939 --> 00:01:39,740
typescript project and we pass a string

00:01:37,189 --> 00:01:41,479
everything compiles fine but if we pass

00:01:39,740 --> 00:01:43,340
something that's not a string in this

00:01:41,479 --> 00:01:45,829
case an array of strings typescript will

00:01:43,340 --> 00:01:47,149
give us an error that a string array is

00:01:45,829 --> 00:01:49,939
not assignable to a parameter of type

00:01:47,149 --> 00:01:52,280
string we didn't have to refresh the

00:01:49,939 --> 00:01:53,600
page click through our flow look at the

00:01:52,280 --> 00:01:55,429
error in our console and trace back

00:01:53,600 --> 00:01:57,409
through where the error happened we got

00:01:55,429 --> 00:02:01,429
this era immediately in our editor right

00:01:57,409 --> 00:02:02,960
after we typed it we can express the

00:02:01,429 --> 00:02:04,549
type of other objects as well

00:02:02,960 --> 00:02:06,109
this interface describes a shape of a

00:02:04,549 --> 00:02:08,030
person object that has a first name and

00:02:06,109 --> 00:02:11,410
a last name and you can describe types

00:02:08,030 --> 00:02:13,250
for more complicated constructs

00:02:11,410 --> 00:02:15,590
typescript normally comes with a

00:02:13,250 --> 00:02:17,330
compiler that can tell you when

00:02:15,590 --> 00:02:19,130
something has gone wrong it also has a

00:02:17,330 --> 00:02:21,680
language server that editors can hook

00:02:19,130 --> 00:02:23,840
- for things like auto-completion find

00:02:21,680 --> 00:02:26,000
usages for factoring and more in this

00:02:23,840 --> 00:02:27,860
example we've hooked up the type for our

00:02:26,000 --> 00:02:29,960
with styles react higher cut order

00:02:27,860 --> 00:02:31,940
component so we get autocomplete for the

00:02:29,960 --> 00:02:34,820
hundreds of CSS properties it accepts

00:02:31,940 --> 00:02:36,410
including inline documentation amazing I

00:02:34,820 --> 00:02:38,090
didn't have to flip back and forth to

00:02:36,410 --> 00:02:40,820
the docs pages I got all of this in my

00:02:38,090 --> 00:02:42,830
editor with types with types throughout

00:02:40,820 --> 00:02:45,500
our code we can do more as it's being

00:02:42,830 --> 00:02:48,410
authored this just scratches the surface

00:02:45,500 --> 00:02:49,790
of what typescript is capable of but

00:02:48,410 --> 00:02:51,470
gives you a sense of the kind of areas

00:02:49,790 --> 00:02:55,940
that can help catch and the tooling it

00:02:51,470 --> 00:02:59,720
enables so that's the typescript part

00:02:55,940 --> 00:03:06,320
what about the at scale part Oh is there

00:02:59,720 --> 00:03:08,210
a problem oh thanks tied scripts I'm not

00:03:06,320 --> 00:03:09,770
actually making all this up if you did

00:03:08,210 --> 00:03:11,210
typo a variable that would give you an

00:03:09,770 --> 00:03:15,610
area that looked like that so it

00:03:11,210 --> 00:03:19,370
actually is real thing so let's fix that

00:03:15,610 --> 00:03:21,380
so the scale changes a conversation I've

00:03:19,370 --> 00:03:23,390
been on small teams before where it was

00:03:21,380 --> 00:03:25,820
just hey you wanna use typescript yeah

00:03:23,390 --> 00:03:27,950
sounds cool let's use it but as you

00:03:25,820 --> 00:03:29,750
scale up to hundreds of engineers and

00:03:27,950 --> 00:03:32,510
more and more code that conversation

00:03:29,750 --> 00:03:34,190
changes we would have changed that we

00:03:32,510 --> 00:03:35,870
were proposing is using typescript in

00:03:34,190 --> 00:03:36,920
our main repo the one that powers

00:03:35,870 --> 00:03:38,900
airbnb.com

00:03:36,920 --> 00:03:41,210
and making it a primary language for

00:03:38,900 --> 00:03:42,830
front-end development more people are

00:03:41,210 --> 00:03:44,960
affected by the change and more code

00:03:42,830 --> 00:03:47,840
would have to be migrated let's quantify

00:03:44,960 --> 00:03:50,090
what we mean by at scale an error maybe

00:03:47,840 --> 00:03:51,320
we have lots of JavaScript there's over

00:03:50,090 --> 00:03:53,780
two billion lines with JavaScript

00:03:51,320 --> 00:03:56,240
checked into our main repo and over 100

00:03:53,780 --> 00:03:57,500
internal NPM packages these are separate

00:03:56,240 --> 00:03:59,720
repos that we've packaged up to an

00:03:57,500 --> 00:04:00,590
internal NPM registry that we can share

00:03:59,720 --> 00:04:02,810
across repos

00:04:00,590 --> 00:04:04,010
that's a lot of code we still got some

00:04:02,810 --> 00:04:05,570
backbone in there talk about Shaun's

00:04:04,010 --> 00:04:09,080
history of JavaScript we got some

00:04:05,570 --> 00:04:10,610
history over the the Airbnb decade so we

00:04:09,080 --> 00:04:12,530
we also have lots of Engineers

00:04:10,610 --> 00:04:15,050
interacting with this code there are

00:04:12,530 --> 00:04:17,060
over 1300 at the company 200 of which

00:04:15,050 --> 00:04:18,680
are fronting the majority of these

00:04:17,060 --> 00:04:22,550
front-end engineers contribute to that

00:04:18,680 --> 00:04:24,020
main mono repo those numbers paint a

00:04:22,550 --> 00:04:26,540
picture of the environment in which we

00:04:24,020 --> 00:04:28,990
were proposing typescript and what did

00:04:26,540 --> 00:04:32,000
it what did it look like at that scale

00:04:28,990 --> 00:04:32,780
every month we have a fun meeting where

00:04:32,000 --> 00:04:33,889
all the front-end

00:04:32,780 --> 00:04:35,960
engineers around the company get

00:04:33,889 --> 00:04:38,180
together and we geek out about new

00:04:35,960 --> 00:04:39,590
front-end technologies and patterns for

00:04:38,180 --> 00:04:42,020
things we want to consider in more depth

00:04:39,590 --> 00:04:43,790
we draft proposals that outline things

00:04:42,020 --> 00:04:45,950
like benefits trade-offs alternatives

00:04:43,790 --> 00:04:48,290
considered exit strategy and long-term

00:04:45,950 --> 00:04:50,180
owners people weigh in on the pros and

00:04:48,290 --> 00:04:51,950
cons of these proposals and we decided

00:04:50,180 --> 00:04:53,840
as a group whether it makes sense to

00:04:51,950 --> 00:04:55,190
move forward this ensures we make

00:04:53,840 --> 00:04:56,840
deliberate decisions about what we

00:04:55,190 --> 00:04:58,760
commit to as a broader team and avoid

00:04:56,840 --> 00:05:02,180
hopping on the hype train without

00:04:58,760 --> 00:05:03,620
legitimate technical justification we've

00:05:02,180 --> 00:05:06,620
been exploring typescript at Airbnb

00:05:03,620 --> 00:05:08,390
since 2016 on smaller teams and a static

00:05:06,620 --> 00:05:10,820
type system was a top request from a

00:05:08,390 --> 00:05:13,070
20-17 front end survey given this

00:05:10,820 --> 00:05:16,970
positive signal Joe and I shout out to

00:05:13,070 --> 00:05:18,890
Joe second row there we drafted a

00:05:16,970 --> 00:05:20,900
proposal for typescript and presented it

00:05:18,890 --> 00:05:22,669
to the front end working group the

00:05:20,900 --> 00:05:24,530
proposal detailed why typescript made

00:05:22,669 --> 00:05:27,770
sense at Airbnb let's highlight some of

00:05:24,530 --> 00:05:30,729
the main reasons everybody's mission is

00:05:27,770 --> 00:05:33,200
to make it so anyone can belong anywhere

00:05:30,729 --> 00:05:34,520
every issue a user encounters with our

00:05:33,200 --> 00:05:36,680
product gets in the way of that mission

00:05:34,520 --> 00:05:39,020
the same is true of the products you all

00:05:36,680 --> 00:05:42,460
are working on typescript helps prevent

00:05:39,020 --> 00:05:44,419
bugs which in turn helps our end users

00:05:42,460 --> 00:05:46,070
typescript also enables a wealth of

00:05:44,419 --> 00:05:48,050
developer productivity benefits and

00:05:46,070 --> 00:05:49,970
tooling like editor auto completion and

00:05:48,050 --> 00:05:51,650
refactoring like we saw earlier with

00:05:49,970 --> 00:05:55,400
typescript engineers can move faster

00:05:51,650 --> 00:05:57,650
more safely we're investing in graph QL

00:05:55,400 --> 00:05:59,750
and Apollo at Airbnb which lets us

00:05:57,650 --> 00:06:02,600
generate typescript types from our graph

00:05:59,750 --> 00:06:04,789
ul schemas this means that we can get

00:06:02,600 --> 00:06:06,320
end to end size type safety because the

00:06:04,789 --> 00:06:08,120
types used by the back end and the front

00:06:06,320 --> 00:06:10,220
end share a single source of truth a

00:06:08,120 --> 00:06:12,289
back-end engineer can make a change to

00:06:10,220 --> 00:06:14,210
the API without unknowingly breaking

00:06:12,289 --> 00:06:16,100
clients and front-end engineers can be

00:06:14,210 --> 00:06:18,200
confident about what data will be coming

00:06:16,100 --> 00:06:19,789
back from the server type mismatches

00:06:18,200 --> 00:06:22,010
have been a major source of bugs for us

00:06:19,789 --> 00:06:25,690
so this end-to-end type safety was a

00:06:22,010 --> 00:06:29,660
major selling point sounds great right

00:06:25,690 --> 00:06:31,280
but there were lots of questions and

00:06:29,660 --> 00:06:34,370
concerns in response to our initial

00:06:31,280 --> 00:06:36,789
proposal let's look at a few of them in

00:06:34,370 --> 00:06:36,789
more depth

00:06:37,570 --> 00:06:42,620
our mono repo depends on our internal

00:06:40,280 --> 00:06:44,330
NPM packages do we need to convert those

00:06:42,620 --> 00:06:46,250
to typescript first in order to get

00:06:44,330 --> 00:06:48,260
autocomplete and type checking

00:06:46,250 --> 00:06:50,270
so this is the predicament we have we

00:06:48,260 --> 00:06:53,240
have our tiger project that depends on a

00:06:50,270 --> 00:06:55,250
jsm PM package how do we get types for

00:06:53,240 --> 00:06:56,570
that package it would seem like the

00:06:55,250 --> 00:06:57,620
package needs to be converted to

00:06:56,570 --> 00:06:59,330
typescript first

00:06:57,620 --> 00:07:00,800
but that's problematic because we be

00:06:59,330 --> 00:07:02,600
blocked on the maintainer converting it

00:07:00,800 --> 00:07:03,980
and maybe they're reluctant to do so

00:07:02,600 --> 00:07:05,360
because at the early phases of our

00:07:03,980 --> 00:07:07,790
proposal it wasn't sure we were going to

00:07:05,360 --> 00:07:09,260
move forward with it but on the flip

00:07:07,790 --> 00:07:10,880
side in order for developers to have a

00:07:09,260 --> 00:07:13,910
good experience with typescript we

00:07:10,880 --> 00:07:15,260
needed that type safety so how do we get

00:07:13,910 --> 00:07:16,840
around the seeming chicken and egg

00:07:15,260 --> 00:07:18,650
problem

00:07:16,840 --> 00:07:21,530
typescript has a feature called

00:07:18,650 --> 00:07:23,960
declaration files files with a DTS

00:07:21,530 --> 00:07:26,480
extension which we can define types for

00:07:23,960 --> 00:07:28,250
JavaScript files let's look at an

00:07:26,480 --> 00:07:29,690
example so we have the greeter function

00:07:28,250 --> 00:07:32,510
that we saw earlier and the

00:07:29,690 --> 00:07:34,100
corresponding DTS file on the top there

00:07:32,510 --> 00:07:36,400
are no implementation details here it

00:07:34,100 --> 00:07:39,020
only describes what the types are

00:07:36,400 --> 00:07:40,669
typescript stitches these together such

00:07:39,020 --> 00:07:42,680
that the Declaration file is used at

00:07:40,669 --> 00:07:45,530
compile time and the original JavaScript

00:07:42,680 --> 00:07:47,000
is used at runtime so let's go back to

00:07:45,530 --> 00:07:50,690
our original scenario and see how

00:07:47,000 --> 00:07:52,640
declaration files can help sure if that

00:07:50,690 --> 00:07:55,669
project had been converted to typescript

00:07:52,640 --> 00:07:57,110
we couldn't generate a DDS file as part

00:07:55,669 --> 00:07:59,080
of the typescript build but we were

00:07:57,110 --> 00:08:01,760
considering that that wasn't an option

00:07:59,080 --> 00:08:05,360
so instead we could put the declaration

00:08:01,760 --> 00:08:07,010
file in our typescript project another

00:08:05,360 --> 00:08:08,720
choice is that we can create a separate

00:08:07,010 --> 00:08:10,760
NPM package and put the declaration

00:08:08,720 --> 00:08:12,590
files there this is nice because now we

00:08:10,760 --> 00:08:15,890
can share the declaration files across

00:08:12,590 --> 00:08:17,930
several repos and this is how types for

00:08:15,890 --> 00:08:19,669
things like react work you have a you

00:08:17,930 --> 00:08:23,300
install react and you can install a

00:08:19,669 --> 00:08:25,520
types react package the types for react

00:08:23,300 --> 00:08:27,650
along with those for 5,000 other

00:08:25,520 --> 00:08:30,710
packages live indefinitely types a

00:08:27,650 --> 00:08:32,330
community maintained repository the vast

00:08:30,710 --> 00:08:33,919
majority of public dependencies we had

00:08:32,330 --> 00:08:35,810
in our main repo were already typed and

00:08:33,919 --> 00:08:37,190
definitely typed the active community

00:08:35,810 --> 00:08:39,140
around typescript was a major selling

00:08:37,190 --> 00:08:40,339
point and we've contribute back I'm sure

00:08:39,140 --> 00:08:42,490
they're people around this room that

00:08:40,339 --> 00:08:45,020
have contributed back thank you

00:08:42,490 --> 00:08:47,570
type definitely typed works great for

00:08:45,020 --> 00:08:51,220
public NPM packages but what about the

00:08:47,570 --> 00:08:53,660
internal ones we mirrored this

00:08:51,220 --> 00:08:56,209
definitely type setup internally by

00:08:53,660 --> 00:08:57,770
creating a separate NPM scope so instead

00:08:56,209 --> 00:08:59,120
of installing from types you did install

00:08:57,770 --> 00:09:01,070
from Airbnb types

00:08:59,120 --> 00:09:02,960
and the repo is set up similar to how

00:09:01,070 --> 00:09:05,150
definitely type is so we could add our

00:09:02,960 --> 00:09:09,950
types there and publish these types

00:09:05,150 --> 00:09:11,720
internally and we've open-sourced a

00:09:09,950 --> 00:09:13,250
starter kit if you are interested in

00:09:11,720 --> 00:09:14,660
setting up this sort of thing it doesn't

00:09:13,250 --> 00:09:16,700
have any types in it it's more just the

00:09:14,660 --> 00:09:21,350
setup for how you can add tests and

00:09:16,700 --> 00:09:25,220
publish your own types how many bugs can

00:09:21,350 --> 00:09:28,400
typescript help prevent a recent study

00:09:25,220 --> 00:09:30,320
to type or not to type show that 15% of

00:09:28,400 --> 00:09:33,650
bugs in a selection of github repos were

00:09:30,320 --> 00:09:35,600
preventable with typescript internally

00:09:33,650 --> 00:09:37,520
we have a process for documenting

00:09:35,600 --> 00:09:39,560
incidents that occur in production this

00:09:37,520 --> 00:09:40,880
is a blameless process the point is so

00:09:39,560 --> 00:09:43,370
that we can learn from our mistakes so

00:09:40,880 --> 00:09:45,470
we don't repeat them in the future so I

00:09:43,370 --> 00:09:47,900
literally sat down and read through six

00:09:45,470 --> 00:09:50,960
months worth of post mortems super-fun

00:09:47,900 --> 00:09:54,320
reading right so my favorites like tale

00:09:50,960 --> 00:09:56,720
of the uncut type error the peril of the

00:09:54,320 --> 00:09:59,060
per muted parameters okay maybe they

00:09:56,720 --> 00:10:01,190
didn't have such exciting names in any

00:09:59,060 --> 00:10:02,960
case I categorize them as JavaScript

00:10:01,190 --> 00:10:04,220
related or not and determine which of

00:10:02,960 --> 00:10:06,589
those could have been prevented with

00:10:04,220 --> 00:10:09,740
typescript let's look at example where

00:10:06,589 --> 00:10:11,180
typescript would have helped we made a

00:10:09,740 --> 00:10:13,029
change to our shared input component

00:10:11,180 --> 00:10:15,290
that broke a form on a settings page

00:10:13,029 --> 00:10:17,470
users were unable to submit the form

00:10:15,290 --> 00:10:19,760
because it no longer passed validation

00:10:17,470 --> 00:10:22,130
here is a simplified version of that

00:10:19,760 --> 00:10:24,740
shared and can put component before the

00:10:22,130 --> 00:10:26,720
change it takes an on blur prop and

00:10:24,740 --> 00:10:29,990
passes it straight through to the input

00:10:26,720 --> 00:10:33,920
element a change was made to add a new

00:10:29,990 --> 00:10:40,190
in on blur handler but there was a

00:10:33,920 --> 00:10:42,080
subtle bug can you spot it the event

00:10:40,190 --> 00:10:45,589
parameter was no longer being passed to

00:10:42,080 --> 00:10:47,420
the on blur prop this caused an issue

00:10:45,589 --> 00:10:49,670
several hops away in a different repo

00:10:47,420 --> 00:10:51,800
the input component was being consumed

00:10:49,670 --> 00:10:53,540
as part of a redux form which expects an

00:10:51,800 --> 00:10:56,420
event or value to be passed in order for

00:10:53,540 --> 00:10:58,100
the validation to work properly without

00:10:56,420 --> 00:10:59,720
the event the form no longer pass

00:10:58,100 --> 00:11:02,140
validation which meant the submit button

00:10:59,720 --> 00:11:05,470
was always disabled

00:11:02,140 --> 00:11:08,180
how could typescript have helped us here

00:11:05,470 --> 00:11:10,459
the types for redux form capture the

00:11:08,180 --> 00:11:12,410
constraint we saw in the docs the on

00:11:10,459 --> 00:11:15,440
blur prop must be passed an event

00:11:12,410 --> 00:11:17,840
value so if we had been using typescript

00:11:15,440 --> 00:11:19,040
with Redux form types hooked up we would

00:11:17,840 --> 00:11:22,540
have seen an error at the call site

00:11:19,040 --> 00:11:22,540
where the event wasn't being passed

00:11:23,500 --> 00:11:28,040
another common class of issues involved

00:11:26,180 --> 00:11:29,930
strict mill checks where you use a

00:11:28,040 --> 00:11:30,950
property to structure or try to invoke

00:11:29,930 --> 00:11:33,110
something that could be null or

00:11:30,950 --> 00:11:34,300
undefined you've probably seen that one

00:11:33,110 --> 00:11:37,400
before

00:11:34,300 --> 00:11:38,870
another was type mismatches typescript

00:11:37,400 --> 00:11:42,860
tells us when we try to use types that

00:11:38,870 --> 00:11:43,820
are not assignable to one another so now

00:11:42,860 --> 00:11:45,320
that we have a better sense of the

00:11:43,820 --> 00:11:47,210
common kinds of post-mortem bugs

00:11:45,320 --> 00:11:53,630
typescript can help prevent what's the

00:11:47,210 --> 00:11:55,820
overall percentage 38% we found that 38%

00:11:53,630 --> 00:11:57,860
of incident causing bugs that reach

00:11:55,820 --> 00:11:59,810
production bugs that have real effects

00:11:57,860 --> 00:12:00,920
on our users and bottom line could have

00:11:59,810 --> 00:12:03,620
been prevented with typescript

00:12:00,920 --> 00:12:05,720
this was a huge finding for us it helped

00:12:03,620 --> 00:12:07,430
make the impact real we saw light bulbs

00:12:05,720 --> 00:12:08,900
go off as we replicated some of the

00:12:07,430 --> 00:12:11,060
incidents and showed people the arrow

00:12:08,900 --> 00:12:12,800
type script would have given sure we

00:12:11,060 --> 00:12:14,060
could have written tests to catch these

00:12:12,800 --> 00:12:16,970
sort of things but static type checking

00:12:14,060 --> 00:12:18,650
adds an extra layer of protection so if

00:12:16,970 --> 00:12:20,540
you access to a similar history at your

00:12:18,650 --> 00:12:22,070
company it could be worth taking a look

00:12:20,540 --> 00:12:25,390
with someone who knows typescript to see

00:12:22,070 --> 00:12:30,770
what this percentage looks like for you

00:12:25,390 --> 00:12:32,420
do teams want to switch to typescript we

00:12:30,770 --> 00:12:34,610
pilot a typescript on several teams

00:12:32,420 --> 00:12:35,840
specifically targeting teams that hadn't

00:12:34,610 --> 00:12:37,970
used typescript before to gain

00:12:35,840 --> 00:12:39,640
additional perspective we help them get

00:12:37,970 --> 00:12:42,680
set up and gather feedback along the way

00:12:39,640 --> 00:12:44,420
after using it for a while we sent a

00:12:42,680 --> 00:12:46,700
survey to them asking whether we should

00:12:44,420 --> 00:12:48,670
continue investing in typescript and the

00:12:46,700 --> 00:12:50,990
feedback was overwhelmingly positive

00:12:48,670 --> 00:12:52,610
we'd recommend using this sort of trial

00:12:50,990 --> 00:12:54,710
period for testing out a new technology

00:12:52,610 --> 00:12:56,330
or pattern the front-end working group

00:12:54,710 --> 00:12:57,620
was on board with it because it was

00:12:56,330 --> 00:12:59,180
self-contained and it was easy to

00:12:57,620 --> 00:13:01,490
rollback should we not move forward with

00:12:59,180 --> 00:13:02,780
it and it helped the proposal because we

00:13:01,490 --> 00:13:06,650
could gauge whether teams actually liked

00:13:02,780 --> 00:13:08,930
using typescript there were concerns

00:13:06,650 --> 00:13:11,840
around build times we measured it and

00:13:08,930 --> 00:13:13,670
found no significant impact we have over

00:13:11,840 --> 00:13:15,770
500 e eslint rules enabled in our main

00:13:13,670 --> 00:13:17,390
repo with the typescript eslint parser

00:13:15,770 --> 00:13:20,390
we were happy to discover that most of

00:13:17,390 --> 00:13:21,950
them just worked if we were to ever move

00:13:20,390 --> 00:13:23,510
away from typescript in the future we

00:13:21,950 --> 00:13:25,040
could strip off the types and end up

00:13:23,510 --> 00:13:26,030
with roughly the same JavaScript who

00:13:25,040 --> 00:13:29,300
would have written otherwise

00:13:26,030 --> 00:13:31,790
so one by one we documented considered

00:13:29,300 --> 00:13:34,010
followed up and came up with solutions

00:13:31,790 --> 00:13:35,420
to the questions and concerns raised it

00:13:34,010 --> 00:13:36,740
was important to us to work with

00:13:35,420 --> 00:13:39,080
detractors and hear out their concerns

00:13:36,740 --> 00:13:40,820
we converted many of them to advocates

00:13:39,080 --> 00:13:44,960
in the end and our proposal became

00:13:40,820 --> 00:13:46,640
stronger from their feedback after

00:13:44,960 --> 00:13:48,260
sufficiently addressing concerns we

00:13:46,640 --> 00:13:52,970
surveyed all front-end engineers on

00:13:48,260 --> 00:13:54,710
whether we should adopt typescript given

00:13:52,970 --> 00:13:56,360
the positive response we had enough

00:13:54,710 --> 00:14:03,200
evidence to move forward and the

00:13:56,360 --> 00:14:06,230
proposal was approved from there we

00:14:03,200 --> 00:14:07,790
gradually expanded adoption and at this

00:14:06,230 --> 00:14:09,440
point we had completed the pilot phase

00:14:07,790 --> 00:14:10,970
that was valuable for proving out

00:14:09,440 --> 00:14:13,670
typescript and getting the foundation in

00:14:10,970 --> 00:14:15,500
place we ironed out frictions early and

00:14:13,670 --> 00:14:16,790
improved tooling and documentation so

00:14:15,500 --> 00:14:19,280
later teams would have a smoother

00:14:16,790 --> 00:14:21,350
on-ramp we have ongoing contact with the

00:14:19,280 --> 00:14:23,000
typescript team and help surface issues

00:14:21,350 --> 00:14:25,730
like prioritizing better handling of

00:14:23,000 --> 00:14:27,350
default props as one example this phase

00:14:25,730 --> 00:14:29,390
also grew our internal typescript

00:14:27,350 --> 00:14:30,800
community most people had Airbnb don't

00:14:29,390 --> 00:14:33,130
know typescript yet so this meant more

00:14:30,800 --> 00:14:35,780
people could help and answer questions

00:14:33,130 --> 00:14:38,450
next we moved into a beta status and

00:14:35,780 --> 00:14:40,190
teams could opt into using it to help

00:14:38,450 --> 00:14:41,840
onboard teams we created internal

00:14:40,190 --> 00:14:45,290
documentation and a style guide and

00:14:41,840 --> 00:14:46,850
hosted learning sessions we set up a

00:14:45,290 --> 00:14:49,040
slack channel an internal Stack Overflow

00:14:46,850 --> 00:14:51,140
tag at Google email group of github

00:14:49,040 --> 00:14:52,760
group people could use on their PRS we

00:14:51,140 --> 00:14:56,480
wanted to make sure people could get the

00:14:52,760 --> 00:14:57,890
help they needed the final step is

00:14:56,480 --> 00:14:59,960
graduating typescript to general

00:14:57,890 --> 00:15:02,030
availability meaning it's stable and

00:14:59,960 --> 00:15:03,350
everyone should start using it we're

00:15:02,030 --> 00:15:05,390
actively approaching this at the moment

00:15:03,350 --> 00:15:07,490
the remaining steps are solidifying

00:15:05,390 --> 00:15:09,680
style guide documentation ramping up

00:15:07,490 --> 00:15:12,380
internal education efforts and migrating

00:15:09,680 --> 00:15:14,570
more code we're about 50% of teams using

00:15:12,380 --> 00:15:16,840
typescript and 10% of the files in our

00:15:14,570 --> 00:15:19,520
mono repo have been converted so far

00:15:16,840 --> 00:15:21,800
using this gradual approach made for

00:15:19,520 --> 00:15:23,300
smoother adoption if we've said from day

00:15:21,800 --> 00:15:25,070
one that everybody should start using

00:15:23,300 --> 00:15:26,900
typescript person after person would

00:15:25,070 --> 00:15:29,840
have run into the same issues or had the

00:15:26,900 --> 00:15:31,310
same questions instead we could figure

00:15:29,840 --> 00:15:33,620
things out on the smaller scale and

00:15:31,310 --> 00:15:37,090
carry forward and those answers would

00:15:33,620 --> 00:15:37,090
carry forward as we expand it out

00:15:38,040 --> 00:15:42,770
we've been exploring a couple options

00:15:39,600 --> 00:15:45,420
for migrating our code to type scripts

00:15:42,770 --> 00:15:48,900
our original migration strategy was a

00:15:45,420 --> 00:15:50,730
JavaScript type script hybrid let's see

00:15:48,900 --> 00:15:53,640
how this strategy works in the context

00:15:50,730 --> 00:15:55,470
of our mono repo this is a simplified

00:15:53,640 --> 00:15:57,030
version that I came up with by literally

00:15:55,470 --> 00:15:58,710
going to airbnb.com and giving

00:15:57,030 --> 00:16:02,670
reasonable names to the things I saw so

00:15:58,710 --> 00:16:04,350
no company secrets here let's zoom in on

00:16:02,670 --> 00:16:05,730
the homes project and see what it would

00:16:04,350 --> 00:16:09,660
look like to convert it using the hybrid

00:16:05,730 --> 00:16:11,790
strategy we added a typescript config

00:16:09,660 --> 00:16:16,590
file and renamed individual files from

00:16:11,790 --> 00:16:20,600
jst TS or JSX to TS x typescript errors

00:16:16,590 --> 00:16:22,710
pop up and we proceeded to fix them an

00:16:20,600 --> 00:16:24,870
awesome feature of typescript is that

00:16:22,710 --> 00:16:27,390
not all code has to be converted before

00:16:24,870 --> 00:16:29,490
it can compile and run the allow JSF

00:16:27,390 --> 00:16:30,750
configuration option allows javascript

00:16:29,490 --> 00:16:33,240
and typescript files to live

00:16:30,750 --> 00:16:35,220
side-by-side so at this point we can

00:16:33,240 --> 00:16:37,200
check in what we have so far and the

00:16:35,220 --> 00:16:38,970
site still works we don't have to pause

00:16:37,200 --> 00:16:43,140
development migrate the whole project

00:16:38,970 --> 00:16:46,620
and then my and then do that first we

00:16:43,140 --> 00:16:49,080
can migrate instead file by file we

00:16:46,620 --> 00:16:52,620
repeat this process over time until the

00:16:49,080 --> 00:16:54,120
whole project is migrated on the topic

00:16:52,620 --> 00:16:55,590
of migration I wanted to take a brief

00:16:54,120 --> 00:16:59,370
moment and share some tips we found

00:16:55,590 --> 00:17:01,470
helpful the first is TS fixed me we

00:16:59,370 --> 00:17:03,540
added a global type alias for typescript

00:17:01,470 --> 00:17:04,020
any type which means something could be

00:17:03,540 --> 00:17:06,720
anything

00:17:04,020 --> 00:17:08,760
we called it TS fix me to indicate that

00:17:06,720 --> 00:17:11,220
it should be revisited and fixed up

00:17:08,760 --> 00:17:13,170
later on best practice is to avoid any

00:17:11,220 --> 00:17:16,010
because it loses type safety but it can

00:17:13,170 --> 00:17:19,050
be helpful during the migration process

00:17:16,010 --> 00:17:21,900
the TS ignore comment silences the error

00:17:19,050 --> 00:17:24,030
on the following line properly typing a

00:17:21,900 --> 00:17:26,400
file might involve unraveling some deep

00:17:24,030 --> 00:17:28,199
chain of dependent types we try to avoid

00:17:26,400 --> 00:17:30,390
this by like converting leaf files first

00:17:28,199 --> 00:17:32,370
but sometimes it's inevitable so TS

00:17:30,390 --> 00:17:34,170
fixed me and TS ignore can help split

00:17:32,370 --> 00:17:36,840
things up such that incremental work can

00:17:34,170 --> 00:17:38,340
be checked in these are intended to be

00:17:36,840 --> 00:17:40,350
temporary and we're planning on adding

00:17:38,340 --> 00:17:44,810
type coverage tooling to help remove

00:17:40,350 --> 00:17:47,160
them as we refine the types over time in

00:17:44,810 --> 00:17:48,920
JSX we use prop types on a react

00:17:47,160 --> 00:17:51,280
components for runtime type checking

00:17:48,920 --> 00:17:53,140
when converting a JSX

00:17:51,280 --> 00:17:54,730
to tsx we can either remove the prop

00:17:53,140 --> 00:17:57,490
types in favour of a tight script type

00:17:54,730 --> 00:17:59,980
or keep the prop types and add a type

00:17:57,490 --> 00:18:01,990
script type in addition in our react

00:17:59,980 --> 00:18:03,760
component library for example we wanted

00:18:01,990 --> 00:18:05,530
to keep prop types so that JavaScript

00:18:03,760 --> 00:18:07,900
consumers could still get runtime checks

00:18:05,530 --> 00:18:09,550
but to avoid declaring a second type

00:18:07,900 --> 00:18:11,800
that would need to be kept in sync with

00:18:09,550 --> 00:18:14,140
those prop types we created a props type

00:18:11,800 --> 00:18:15,910
utility that is able to derive the type

00:18:14,140 --> 00:18:19,810
script type given the prop types and the

00:18:15,910 --> 00:18:21,340
default props in this case the prop

00:18:19,810 --> 00:18:23,950
types and default props get combined

00:18:21,340 --> 00:18:25,390
into this final type if you're curious

00:18:23,950 --> 00:18:29,460
how this works under the hood

00:18:25,390 --> 00:18:29,460
I created a gist that you can check out

00:18:30,600 --> 00:18:35,860
recently we've been experimenting with a

00:18:33,340 --> 00:18:38,530
revised all in typescript migration

00:18:35,860 --> 00:18:40,150
strategy so let's go back to that Holmes

00:18:38,530 --> 00:18:42,820
project we were looking at before and

00:18:40,150 --> 00:18:45,040
use The Awl end strategy instead to see

00:18:42,820 --> 00:18:48,910
how it works we start off with all j/s

00:18:45,040 --> 00:18:51,280
we convert everything over to TS get the

00:18:48,910 --> 00:18:53,080
project compiling perhaps we use some

00:18:51,280 --> 00:18:55,390
looser types than we'd like but we still

00:18:53,080 --> 00:18:57,700
have type scripts strictest options turn

00:18:55,390 --> 00:18:59,770
on and then we proceed to refine the

00:18:57,700 --> 00:19:03,550
types over time removing the TS fix

00:18:59,770 --> 00:19:06,130
means NTS ignores this has some

00:19:03,550 --> 00:19:08,170
advantages over the hybrid strategy it's

00:19:06,130 --> 00:19:10,360
easier to refine type I type rather than

00:19:08,170 --> 00:19:11,800
file-by-file if you're developing a

00:19:10,360 --> 00:19:13,750
feature and you only care about adding

00:19:11,800 --> 00:19:15,400
one type it's a much lower barrier to

00:19:13,750 --> 00:19:17,290
entry to just fix up that type in

00:19:15,400 --> 00:19:18,790
isolation rather than having to convert

00:19:17,290 --> 00:19:20,320
the whole file first fix up all the

00:19:18,790 --> 00:19:23,500
errors and then add the type you care

00:19:20,320 --> 00:19:25,030
about not having to rename the file also

00:19:23,500 --> 00:19:27,370
means that it's easier to review

00:19:25,030 --> 00:19:28,750
sometimes if a file is renamed in one

00:19:27,370 --> 00:19:30,730
commit then changes are made in another

00:19:28,750 --> 00:19:32,410
they show up separately in code review

00:19:30,730 --> 00:19:35,140
and the reviewer has to piece together

00:19:32,410 --> 00:19:37,450
what happens it also makes it clear what

00:19:35,140 --> 00:19:39,100
types are missing type scripts inference

00:19:37,450 --> 00:19:41,050
is powerful and we can leverage it for

00:19:39,100 --> 00:19:43,240
large portions of a file some files

00:19:41,050 --> 00:19:45,880
require a few to know TS fixed means in

00:19:43,240 --> 00:19:50,380
order to in order to compile type script

00:19:45,880 --> 00:19:52,150
can figure out the rest another is that

00:19:50,380 --> 00:19:54,010
developers can use a consistent mental

00:19:52,150 --> 00:19:55,750
model they don't have to contact switch

00:19:54,010 --> 00:19:58,360
depending on what file extension they're

00:19:55,750 --> 00:19:59,830
in like why can't I add a type here why

00:19:58,360 --> 00:20:02,410
am I not getting compilations errors

00:19:59,830 --> 00:20:04,620
there types can be added consumed and

00:20:02,410 --> 00:20:08,080
type checked in all files

00:20:04,620 --> 00:20:12,430
yeah that sounds great but how do we

00:20:08,080 --> 00:20:14,200
migrate all the code code mods are a

00:20:12,430 --> 00:20:16,930
powerful tool for large-scale code

00:20:14,200 --> 00:20:18,490
modifications in their simplest form a

00:20:16,930 --> 00:20:20,260
codemod could be a global find and

00:20:18,490 --> 00:20:21,790
replace across a project you might have

00:20:20,260 --> 00:20:23,830
done this in your editor before and

00:20:21,790 --> 00:20:26,410
there are code mod libraries that do use

00:20:23,830 --> 00:20:27,790
read exes but they are brittle because

00:20:26,410 --> 00:20:31,300
they might break depending on subtle

00:20:27,790 --> 00:20:33,250
code style variations alternatively we

00:20:31,300 --> 00:20:34,570
can use an abstract syntax tree which is

00:20:33,250 --> 00:20:37,060
something that the speaker's earlier

00:20:34,570 --> 00:20:40,530
brought up to so this is the ast

00:20:37,060 --> 00:20:44,200
representation of this code notice how

00:20:40,530 --> 00:20:46,090
for every piece of code on the left it

00:20:44,200 --> 00:20:51,190
has a corresponding node in the tree on

00:20:46,090 --> 00:20:52,810
the right so just for fun say we wanted

00:20:51,190 --> 00:20:55,420
to write a code mod that reverses all

00:20:52,810 --> 00:20:58,600
the identifiers in our code we'd start

00:20:55,420 --> 00:21:03,220
with our code as the input creating the

00:20:58,600 --> 00:21:06,400
ast out of it modify that ast and emit

00:21:03,220 --> 00:21:07,690
new source code out the power here is

00:21:06,400 --> 00:21:10,210
that we are making this change

00:21:07,690 --> 00:21:12,580
programmatically the alternative would

00:21:10,210 --> 00:21:13,840
be editing each file to make the change

00:21:12,580 --> 00:21:15,970
and this works fine if you only have a

00:21:13,840 --> 00:21:18,070
handful but once it gets to be more like

00:21:15,970 --> 00:21:21,120
thousand files the thought of manually

00:21:18,070 --> 00:21:23,530
changing them gets really sad

00:21:21,120 --> 00:21:26,170
Facebook's J's code shift is a popular

00:21:23,530 --> 00:21:28,180
tool we use for code mods at Airbnb this

00:21:26,170 --> 00:21:29,950
transform captures the modifications we

00:21:28,180 --> 00:21:33,610
just made to that ast to reverse the

00:21:29,950 --> 00:21:37,000
identifiers we find all nodes that

00:21:33,610 --> 00:21:39,100
correspond to identify errs replace

00:21:37,000 --> 00:21:43,810
those nodes with new ones with the name

00:21:39,100 --> 00:21:46,690
reversed and then return the new source

00:21:43,810 --> 00:21:50,460
code back out Missy Elliott would be

00:21:46,690 --> 00:21:58,350
proud of us so we flip the m reversed it

00:21:50,460 --> 00:22:00,919
I got laughs that's great I was debating

00:21:58,350 --> 00:22:04,230
goes like Joy Division I do it

00:22:00,919 --> 00:22:06,509
we took the code and we modded it found

00:22:04,230 --> 00:22:10,169
the identifier slip the member stump is

00:22:06,509 --> 00:22:18,450
your friend you oh yeah

00:22:10,169 --> 00:22:20,249
a tool that cannot help you with your

00:22:18,450 --> 00:22:24,419
rap skills but can help you with your

00:22:20,249 --> 00:22:26,399
code mods is ast xplornet which Sean

00:22:24,419 --> 00:22:28,289
pointed out earlier it has a source code

00:22:26,399 --> 00:22:31,710
that transform and the output and an

00:22:28,289 --> 00:22:33,899
interactive ast all in one place also I

00:22:31,710 --> 00:22:35,879
just landed a definitely type here to

00:22:33,899 --> 00:22:37,769
add types for Jaz code shift that makes

00:22:35,879 --> 00:22:42,090
it easier to author code mods and type

00:22:37,769 --> 00:22:44,009
scripts several patterns emerged while

00:22:42,090 --> 00:22:46,590
migrating JavaScript code to typescript

00:22:44,009 --> 00:22:48,450
we repeatedly moved static class

00:22:46,590 --> 00:22:50,269
properties into the class body for react

00:22:48,450 --> 00:22:53,279
components created a props type

00:22:50,269 --> 00:22:55,379
annotated react lifecycle methods we

00:22:53,279 --> 00:22:57,360
were encoded these as code mods so that

00:22:55,379 --> 00:22:59,639
we can run them repeatedly over more

00:22:57,360 --> 00:23:02,730
code and we package them up in the tool

00:22:59,639 --> 00:23:04,350
called TS migrate the goal is to send a

00:23:02,730 --> 00:23:06,960
JavaScript project in and get a

00:23:04,350 --> 00:23:08,879
compiling typescript project out now you

00:23:06,960 --> 00:23:10,649
you'd still need to find the types over

00:23:08,879 --> 00:23:13,950
time but it gives you a baseline to work

00:23:10,649 --> 00:23:15,809
from we applied this tool to our

00:23:13,950 --> 00:23:19,730
internal shared react components library

00:23:15,809 --> 00:23:22,230
which is used everywhere across the site

00:23:19,730 --> 00:23:24,299
we had types for this in our internal

00:23:22,230 --> 00:23:25,799
definitely typed but it was hard to keep

00:23:24,299 --> 00:23:28,409
those up-to-date with the rapid

00:23:25,799 --> 00:23:30,450
development of the shared react

00:23:28,409 --> 00:23:32,100
components library so instead we wanted

00:23:30,450 --> 00:23:34,139
to emit types directly from the source

00:23:32,100 --> 00:23:37,710
so it was our first target for TS

00:23:34,139 --> 00:23:39,960
migrate we converted over 30,000 lines

00:23:37,710 --> 00:23:41,639
of code to typescript and instead of

00:23:39,960 --> 00:23:43,440
devoting the whole team's time four

00:23:41,639 --> 00:23:45,929
weeks to do this we could run our suite

00:23:43,440 --> 00:23:47,669
of code mods and do it in minutes we use

00:23:45,929 --> 00:23:49,740
the type information from prop types and

00:23:47,669 --> 00:23:51,659
made use of TS fixme and we are

00:23:49,740 --> 00:23:53,789
continuing to refine from this baseline

00:23:51,659 --> 00:23:55,409
but even with this we generated

00:23:53,789 --> 00:23:59,190
meaningful typescript declaration files

00:23:55,409 --> 00:24:00,690
we can consume in other repos in case

00:23:59,190 --> 00:24:03,400
that PR line count looks a bit scary

00:24:00,690 --> 00:24:05,590
with the typescript compiler half

00:24:03,400 --> 00:24:07,930
for visual regression testing and our

00:24:05,590 --> 00:24:09,250
just test running in CI I felt confident

00:24:07,930 --> 00:24:11,110
that my changes wouldn't break anything

00:24:09,250 --> 00:24:11,680
and of course we made sure the site was

00:24:11,110 --> 00:24:16,690
still working

00:24:11,680 --> 00:24:18,430
no regressions whew we have since run TS

00:24:16,690 --> 00:24:20,830
migrate in other places and we're

00:24:18,430 --> 00:24:22,960
iterating on it and we're planning on

00:24:20,830 --> 00:24:24,850
using it across more and more code we

00:24:22,960 --> 00:24:29,530
plan to open source it so that you can

00:24:24,850 --> 00:24:30,910
use it to migrate your code to thank you

00:24:29,530 --> 00:24:33,250
for following along this journey with me

00:24:30,910 --> 00:24:34,840
I'd like to leave you some key takeaways

00:24:33,250 --> 00:24:37,890
that we can draw from this typescript

00:24:34,840 --> 00:24:40,360
transition that apply more generally

00:24:37,890 --> 00:24:41,440
effecting change at a large organization

00:24:40,360 --> 00:24:43,000
can be a challenge

00:24:41,440 --> 00:24:45,130
but strong evidence and addressing

00:24:43,000 --> 00:24:48,700
questions and concerns make a compelling

00:24:45,130 --> 00:24:50,890
case adopting change gradually helps

00:24:48,700 --> 00:24:55,000
reduce friction and prove out the value

00:24:50,890 --> 00:24:57,130
a clear migration path helps teams move

00:24:55,000 --> 00:25:00,490
over to new patterns and tooling can

00:24:57,130 --> 00:25:01,780
help expedite the transition I started

00:25:00,490 --> 00:25:04,600
this work while on a product team

00:25:01,780 --> 00:25:06,280
feeling dissatisfied with my tools when

00:25:04,600 --> 00:25:07,540
I learned that there were others in the

00:25:06,280 --> 00:25:09,760
company who also wanted to make this

00:25:07,540 --> 00:25:11,770
change I partnered with them and carried

00:25:09,760 --> 00:25:13,600
the initiative forward it's all too easy

00:25:11,770 --> 00:25:16,120
to complain about things accept the

00:25:13,600 --> 00:25:17,620
status quo positive change can come

00:25:16,120 --> 00:25:19,600
about through actions of people who care

00:25:17,620 --> 00:25:20,920
so I'd encourage you to pursue the

00:25:19,600 --> 00:25:22,870
things that you're passionate about your

00:25:20,920 --> 00:25:25,020
organization to make life better for you

00:25:22,870 --> 00:25:27,520
and those around you

00:25:25,020 --> 00:25:28,690
thank you all for listening and thank

00:25:27,520 --> 00:25:29,770
you to everyone at Airbnb who

00:25:28,690 --> 00:25:31,780
contributed to this effort

00:25:29,770 --> 00:25:33,690
shout out to Joe and Mohsen who are in

00:25:31,780 --> 00:25:36,190
the audience and miles and Portland's

00:25:33,690 --> 00:25:37,750
and there are a bunch of other awesome

00:25:36,190 --> 00:25:39,970
Airbnb engineers who would love to talk

00:25:37,750 --> 00:25:42,730
to you I also have some typescript

00:25:39,970 --> 00:25:44,800
stickers and some Balogh keychains for

00:25:42,730 --> 00:25:48,910
the like the first 30 people that come

00:25:44,800 --> 00:25:50,240
find me so just as an incentive yeah

00:25:48,910 --> 00:25:56,710
thank you so much

00:25:50,240 --> 00:25:56,710

YouTube URL: https://www.youtube.com/watch?v=P-J9Eg7hJwE


