Title: What Tamagotchis Can Teach You About ES6 Generators - Jenn Creighton | JSConf Hawaii 2019
Publication date: 2019-06-24
Playlist: JSConf HI 2019
Description: 
	Jenn Creighton uses a Tamagotchi app to explain how ES6 Generators work, showing how you create an infinite loops in JavaScript that yield to other functions when necessary.

Check out the repo: https://github.com/jcreighton/tamagotchi

JSConf Hawaii is returning in 2020. Learn more at https://www.jsconfhi.com/
Captions: 
	00:00:05,520 --> 00:00:11,670
all right so yes I'm here to talk to you

00:00:09,179 --> 00:00:14,070
about tamagotchis and generators

00:00:11,670 --> 00:00:15,450
excited that crystal went before me cuz

00:00:14,070 --> 00:00:17,480
she already explained some concepts that

00:00:15,450 --> 00:00:21,630
I'm gonna go into in this talk as well

00:00:17,480 --> 00:00:23,730
so again hello I'm Jen software engineer

00:00:21,630 --> 00:00:25,500
based in New York if you want to reach

00:00:23,730 --> 00:00:27,630
out to me on twitter my handle is girl

00:00:25,500 --> 00:00:29,220
code you know definitely tweet at me I

00:00:27,630 --> 00:00:31,080
post like a lot of cat pictures and

00:00:29,220 --> 00:00:34,320
stuff but there's also some JavaScript

00:00:31,080 --> 00:00:37,830
usage all right how many of you had a

00:00:34,320 --> 00:00:41,670
tamagotchi growing up oh yeah I see a

00:00:37,830 --> 00:00:44,070
lot of hands sweet okay so if you aren't

00:00:41,670 --> 00:00:46,949
familiar with them Tamagotchis were

00:00:44,070 --> 00:00:49,650
really popular digital pets in the 1990s

00:00:46,949 --> 00:00:52,110
so they looked like this and when the

00:00:49,650 --> 00:00:54,870
game would start an egg would appear and

00:00:52,110 --> 00:00:57,360
then hatch and out would come your

00:00:54,870 --> 00:01:00,030
Tamagotchi as a baby and you want to

00:00:57,360 --> 00:01:01,979
raise it from a baby to an adult so you

00:01:00,030 --> 00:01:03,989
would clean up after it you would play

00:01:01,979 --> 00:01:05,940
with it you would feed it it would be

00:01:03,989 --> 00:01:08,580
Pat you would it needed things it could

00:01:05,940 --> 00:01:11,220
get sick as well and then you didn't

00:01:08,580 --> 00:01:14,040
actually know what type of Tamagotchi it

00:01:11,220 --> 00:01:15,990
was gonna grow up to be as an adult so

00:01:14,040 --> 00:01:18,840
that was the fun like surprise of the

00:01:15,990 --> 00:01:20,549
game now when I was growing up i

00:01:18,840 --> 00:01:24,509
nurtured a lot of Tamagotchis to

00:01:20,549 --> 00:01:27,600
adulthood some didn't make it that's

00:01:24,509 --> 00:01:29,700
okay but I really loved this game and I

00:01:27,600 --> 00:01:32,969
just want to build my own like web-based

00:01:29,700 --> 00:01:36,420
version of it so my version of a

00:01:32,969 --> 00:01:39,049
Tamagotchi includes an SVG shell the

00:01:36,420 --> 00:01:40,829
controls which are just HTML divs to

00:01:39,049 --> 00:01:43,679
actually interact with the Tamagotchi

00:01:40,829 --> 00:01:46,439
and then the game screen is actually

00:01:43,679 --> 00:01:49,229
built in canvas so if you aren't

00:01:46,439 --> 00:01:51,210
familiar with canvas to use it we're

00:01:49,229 --> 00:01:53,999
going to query the Dom for a canvas

00:01:51,210 --> 00:01:57,210
we're going to ask for the context so in

00:01:53,999 --> 00:01:59,219
this case we want to D to draw on the

00:01:57,210 --> 00:02:00,990
canvas we're going to use context draw

00:01:59,219 --> 00:02:03,509
image and we're going to pass it the

00:02:00,990 --> 00:02:05,280
image to draw as well as some XY

00:02:03,509 --> 00:02:07,170
coordinates that I'm not gonna get into

00:02:05,280 --> 00:02:08,490
right now but that's gonna draw the

00:02:07,170 --> 00:02:10,410
image to the screen so at the bottom you

00:02:08,490 --> 00:02:14,400
can see our Tamagotchi has been drawn to

00:02:10,410 --> 00:02:17,460
the screen now for all the animations in

00:02:14,400 --> 00:02:20,239
this game I used a sprite sheet so below

00:02:17,460 --> 00:02:23,970
is the sprite to bounce the Tamagotchi

00:02:20,239 --> 00:02:25,140
so if each frame of the sprite is at 200

00:02:23,970 --> 00:02:27,140
pixels

00:02:25,140 --> 00:02:31,620
then I need to draw the image at zero

00:02:27,140 --> 00:02:33,120
then 200 and then 400 pixels so that's

00:02:31,620 --> 00:02:35,460
going to bounce the Tamagotchi up and

00:02:33,120 --> 00:02:38,310
then I'd go back down to bounce Tamaki

00:02:35,460 --> 00:02:39,990
down now you'll notice that I'm doing

00:02:38,310 --> 00:02:41,850
contexts that clear between these

00:02:39,990 --> 00:02:44,370
drawings and that's to avoid this

00:02:41,850 --> 00:02:46,230
situation so if you don't clear the

00:02:44,370 --> 00:02:49,020
context between drawings all the frames

00:02:46,230 --> 00:02:52,800
just draw on top of each other all right

00:02:49,020 --> 00:02:55,590
so as it's written now this isn't going

00:02:52,800 --> 00:02:57,810
to work it's actually drawing and

00:02:55,590 --> 00:03:01,440
clearing so quickly that you're only

00:02:57,810 --> 00:03:05,010
seeing the last frame of this so that's

00:03:01,440 --> 00:03:07,410
not going to work but I can delay the

00:03:05,010 --> 00:03:09,170
animation with that timeout so I'm

00:03:07,410 --> 00:03:12,480
looking for this really old-school

00:03:09,170 --> 00:03:14,340
choppy Pixley animation like the

00:03:12,480 --> 00:03:16,110
original game and I'm not going to build

00:03:14,340 --> 00:03:19,590
out a sprite sheet that is actually 60

00:03:16,110 --> 00:03:21,600
frames right so I'm gonna animate from

00:03:19,590 --> 00:03:24,600
frame 1 through 3 and then back to 2 and

00:03:21,600 --> 00:03:28,320
1 for a full bounce using set timeout to

00:03:24,600 --> 00:03:32,700
do this to delay the frame drawings so

00:03:28,320 --> 00:03:37,140
this is going to work now ah bouncing

00:03:32,700 --> 00:03:37,560
tamagotchi but I've created a problem

00:03:37,140 --> 00:03:42,209
here

00:03:37,560 --> 00:03:45,510
because now my animations are async so

00:03:42,209 --> 00:03:47,220
how do I know when this animation is

00:03:45,510 --> 00:03:48,540
done like I have to know the actual

00:03:47,220 --> 00:03:50,400
amount of time that this is going to

00:03:48,540 --> 00:03:52,920
take and that's in order to kick off

00:03:50,400 --> 00:03:55,200
another animation after this or to not

00:03:52,920 --> 00:03:58,100
you know overwrite another animation or

00:03:55,200 --> 00:04:00,780
have a weird long delay between them and

00:03:58,100 --> 00:04:04,470
you know this just isn't sustainable for

00:04:00,780 --> 00:04:08,040
a game that's full of animations what I

00:04:04,470 --> 00:04:11,459
want is to resolve an animation and then

00:04:08,040 --> 00:04:13,680
handle another animation and this sounds

00:04:11,459 --> 00:04:15,930
a lot like a promise now crystal REI

00:04:13,680 --> 00:04:18,239
talked about promises but you know they

00:04:15,930 --> 00:04:20,609
represent an adventure all value so

00:04:18,239 --> 00:04:22,919
inside a promise I can run the animation

00:04:20,609 --> 00:04:26,430
code and then when it's done I can

00:04:22,919 --> 00:04:28,590
resolve the promise and since I can do a

00:04:26,430 --> 00:04:31,910
dot then on the promise I can use that

00:04:28,590 --> 00:04:34,680
to run an animation after it's complete

00:04:31,910 --> 00:04:37,979
so for the first version of this game

00:04:34,680 --> 00:04:38,370
that's what I did I used promises for

00:04:37,979 --> 00:04:40,850
all

00:04:38,370 --> 00:04:43,590
animations I made a general-purpose

00:04:40,850 --> 00:04:45,449
animate function that takes in a draw

00:04:43,590 --> 00:04:48,690
function and the milliseconds for the

00:04:45,449 --> 00:04:51,840
delay animate always returns a new

00:04:48,690 --> 00:04:53,639
promise and inside that promise an inner

00:04:51,840 --> 00:04:56,669
function is going to run the draw

00:04:53,639 --> 00:04:59,190
function and we delegate resolving the

00:04:56,669 --> 00:05:01,050
promise to the draw function if drawl

00:04:59,190 --> 00:05:04,800
resolves the promise and returns true

00:05:01,050 --> 00:05:06,479
we're done otherwise set timeout is

00:05:04,800 --> 00:05:11,550
called with the inner function and

00:05:06,479 --> 00:05:12,750
another loop of this function occurs so

00:05:11,550 --> 00:05:14,520
here we're going to actually use the

00:05:12,750 --> 00:05:17,280
animate function to create a bounce up

00:05:14,520 --> 00:05:19,919
animation we're gonna pass a function

00:05:17,280 --> 00:05:22,289
that draws the correct frame clears the

00:05:19,919 --> 00:05:25,229
context and increments the current frame

00:05:22,289 --> 00:05:27,210
count when the current frame is greater

00:05:25,229 --> 00:05:30,090
than the frame count the promise is

00:05:27,210 --> 00:05:31,979
resolved and we return true so this

00:05:30,090 --> 00:05:36,570
would stop the function from setting

00:05:31,979 --> 00:05:38,430
another loop via set timeout and so now

00:05:36,570 --> 00:05:40,830
we can create a simple bounce function

00:05:38,430 --> 00:05:43,080
using our bounce up animation and it

00:05:40,830 --> 00:05:45,419
bounced down animation using the same

00:05:43,080 --> 00:05:48,240
animate function and as you can see our

00:05:45,419 --> 00:05:51,120
Tamagotchi is bouncing wonderful

00:05:48,240 --> 00:05:54,180
beautiful and so now that that's working

00:05:51,120 --> 00:05:57,360
we can move on to creating the main game

00:05:54,180 --> 00:05:59,190
loop so when you're not interacting with

00:05:57,360 --> 00:06:01,950
the Tamagotchi it's going to show this

00:05:59,190 --> 00:06:03,840
idle animation so it's going to bounce

00:06:01,950 --> 00:06:06,060
it's going to move to the right move to

00:06:03,840 --> 00:06:08,669
the left keeps bouncing it's so on and

00:06:06,060 --> 00:06:10,490
so forth and to set up the main loop

00:06:08,669 --> 00:06:13,590
we're going to create a loop function

00:06:10,490 --> 00:06:15,120
will call the idle animation and when

00:06:13,590 --> 00:06:16,860
that's complete we call the loop

00:06:15,120 --> 00:06:21,449
function again so just continuously

00:06:16,860 --> 00:06:23,940
loops there okay but I've created some

00:06:21,449 --> 00:06:26,250
more problems here there's two main

00:06:23,940 --> 00:06:27,410
issues I noticed when using promises to

00:06:26,250 --> 00:06:32,970
build the animations

00:06:27,410 --> 00:06:35,669
the first one is venable health so once

00:06:32,970 --> 00:06:37,889
upon time we used callbacks to handle

00:06:35,669 --> 00:06:39,900
async calls and you know this created

00:06:37,889 --> 00:06:42,840
the dreaded triangle of doom okay

00:06:39,900 --> 00:06:44,550
callback health and one of the issues I

00:06:42,840 --> 00:06:46,620
noticed when making this game was that

00:06:44,550 --> 00:06:49,349
promises really didn't alleviate

00:06:46,620 --> 00:06:50,630
callback hell like you're still in hell

00:06:49,349 --> 00:06:55,430
it's just

00:06:50,630 --> 00:06:57,290
looking how so the left side is a more

00:06:55,430 --> 00:07:00,230
realistic version of how these

00:06:57,290 --> 00:07:02,420
animations might work so I might need to

00:07:00,230 --> 00:07:04,970
pass in information to functions or

00:07:02,420 --> 00:07:08,090
check information to make a decision and

00:07:04,970 --> 00:07:11,810
this all gets just as unwieldy and as

00:07:08,090 --> 00:07:13,220
unmanageable as callback hell and you

00:07:11,810 --> 00:07:15,830
know don't mistake me for hating

00:07:13,220 --> 00:07:18,080
promises they're really great but when

00:07:15,830 --> 00:07:21,170
you're doing like more large-scale async

00:07:18,080 --> 00:07:24,980
work the ease of promises really breaks

00:07:21,170 --> 00:07:29,150
down and I noticed another larger issue

00:07:24,980 --> 00:07:32,180
with using promises for animations so

00:07:29,150 --> 00:07:35,270
the point of the Tamagotchi is that the

00:07:32,180 --> 00:07:37,640
user can interact with it I mean the

00:07:35,270 --> 00:07:41,360
whole game is about interacting with the

00:07:37,640 --> 00:07:44,510
Tamagotchi so at some point I need to

00:07:41,360 --> 00:07:47,570
suspend the idle animation in favor of a

00:07:44,510 --> 00:07:48,640
user-generated event so like feeding the

00:07:47,570 --> 00:07:51,470
Tamagotchi

00:07:48,640 --> 00:07:54,860
so here I've added an array to hold

00:07:51,470 --> 00:07:56,900
pending events the loop function checks

00:07:54,860 --> 00:07:59,060
if there are any pending events and if

00:07:56,900 --> 00:08:03,770
there are the handle event function is

00:07:59,060 --> 00:08:05,900
run and the loop is terminated so handle

00:08:03,770 --> 00:08:07,850
event is going to take the first event

00:08:05,900 --> 00:08:09,680
off the queue of events and run it and

00:08:07,850 --> 00:08:12,110
when it's complete we're gonna restart

00:08:09,680 --> 00:08:14,140
the loop if there's another event in the

00:08:12,110 --> 00:08:17,180
queue handle event will get called again

00:08:14,140 --> 00:08:22,340
otherwise we continue the loop until the

00:08:17,180 --> 00:08:24,050
next event and so this didn't work you

00:08:22,340 --> 00:08:26,150
can see I'm requesting to feed the

00:08:24,050 --> 00:08:28,220
Tamagotchi

00:08:26,150 --> 00:08:30,890
but the feed animation is delayed until

00:08:28,220 --> 00:08:33,740
the idle animation completes its current

00:08:30,890 --> 00:08:36,440
loop and that can be upwards of seven to

00:08:33,740 --> 00:08:39,020
eight seconds so that's not going to

00:08:36,440 --> 00:08:42,340
work what I need is to actually cancel

00:08:39,020 --> 00:08:47,270
the promise that runs the idle animation

00:08:42,340 --> 00:08:51,490
except you can't cancel a promise think

00:08:47,270 --> 00:08:51,490
of promises as unbreakable valves

00:08:51,959 --> 00:08:59,290
rest in peace snake so you can throw

00:08:56,949 --> 00:09:01,839
errors and promises and you can catch

00:08:59,290 --> 00:09:04,629
those errors but you can't actually

00:09:01,839 --> 00:09:08,199
cancel a promise all of the attached

00:09:04,629 --> 00:09:10,749
debt functions are going to fire what I

00:09:08,199 --> 00:09:13,809
actually want is to pause an animation

00:09:10,749 --> 00:09:16,809
and yield to an event and that sounds a

00:09:13,809 --> 00:09:18,579
lot like a generator so generators are

00:09:16,809 --> 00:09:21,759
amazing because their code that can be

00:09:18,579 --> 00:09:24,069
paused so most of the code that you

00:09:21,759 --> 00:09:26,199
write is run to completion once it

00:09:24,069 --> 00:09:28,660
starts there's no actually stopping it

00:09:26,199 --> 00:09:30,579
even if you're doing async work you're

00:09:28,660 --> 00:09:32,470
throwing it onto the event loop and it's

00:09:30,579 --> 00:09:34,839
going to come back around you can't tell

00:09:32,470 --> 00:09:37,300
it like to cancel itself and stop can't

00:09:34,839 --> 00:09:40,629
pause it both generators you can pause

00:09:37,300 --> 00:09:44,740
and resume code so let's take a look at

00:09:40,629 --> 00:09:46,420
them so this is a generator and I know

00:09:44,740 --> 00:09:48,279
it's a generator because of the asterisk

00:09:46,420 --> 00:09:49,749
next to the function keyword that's

00:09:48,279 --> 00:09:51,429
actually all you need to do to turn a

00:09:49,749 --> 00:09:53,829
regular function into a generator

00:09:51,429 --> 00:09:56,350
function and then inside you'll notice

00:09:53,829 --> 00:09:57,790
the yield statement so yield is a

00:09:56,350 --> 00:10:02,800
special keyword and generators that

00:09:57,790 --> 00:10:04,600
means pause to use the generator we're

00:10:02,800 --> 00:10:08,019
going to call it and that's going to

00:10:04,600 --> 00:10:10,120
return to us the generator object now on

00:10:08,019 --> 00:10:12,309
the generator object is a method called

00:10:10,120 --> 00:10:14,499
next and that actually tells the

00:10:12,309 --> 00:10:17,829
generator to run until it encounters a

00:10:14,499 --> 00:10:20,019
yield statement when that happens it's

00:10:17,829 --> 00:10:23,470
going to return to you an object with a

00:10:20,019 --> 00:10:25,120
value key and a done key so if there's a

00:10:23,470 --> 00:10:25,809
value to the right of the yield

00:10:25,120 --> 00:10:28,149
statement

00:10:25,809 --> 00:10:30,519
it'll be passed via the value key and

00:10:28,149 --> 00:10:33,790
then done provides the status of the

00:10:30,519 --> 00:10:35,410
generator is it done true or false so in

00:10:33,790 --> 00:10:39,100
this case this generator is not done so

00:10:35,410 --> 00:10:42,459
we're getting false now you don't need

00:10:39,100 --> 00:10:44,829
to yield values yield is just a key word

00:10:42,459 --> 00:10:47,189
that means pause so you don't need to

00:10:44,829 --> 00:10:49,299
return a value with it so in that case

00:10:47,189 --> 00:10:51,160
yielding no value is going to return

00:10:49,299 --> 00:10:54,639
undefined and as you can see were still

00:10:51,160 --> 00:10:57,790
not done done false so now we're calling

00:10:54,639 --> 00:11:00,040
next again reading 3 so the value is 3

00:10:57,790 --> 00:11:01,360
and done is false but done is still

00:11:00,040 --> 00:11:04,329
false right like we haven't actually

00:11:01,360 --> 00:11:10,209
finished yet it's on the next call

00:11:04,329 --> 00:11:12,579
but now we're actually truly done you

00:11:10,209 --> 00:11:15,339
can also pass values into the generators

00:11:12,579 --> 00:11:18,279
next function and so here we're passing

00:11:15,339 --> 00:11:20,559
two into the second next function and

00:11:18,279 --> 00:11:22,179
this seems a little odd at first like

00:11:20,559 --> 00:11:26,290
why aren't we doing this on the first

00:11:22,179 --> 00:11:29,379
call to next but when you call next what

00:11:26,290 --> 00:11:31,660
you're saying is hey generator do

00:11:29,379 --> 00:11:35,170
whatever you need to do until you

00:11:31,660 --> 00:11:36,610
encounter a yield statement so in this

00:11:35,170 --> 00:11:38,829
case there's actually nothing for the

00:11:36,610 --> 00:11:41,829
generator to do before the first yield

00:11:38,829 --> 00:11:43,420
statement so when next is called it sees

00:11:41,829 --> 00:11:46,179
that yield statement it's going to pause

00:11:43,420 --> 00:11:48,730
there and the yield statement has no

00:11:46,179 --> 00:11:53,079
value associated with it so the value is

00:11:48,730 --> 00:11:55,660
undefined on the second next call we

00:11:53,079 --> 00:11:58,540
pass in a value and that value is going

00:11:55,660 --> 00:12:00,699
to take the place of yield and now

00:11:58,540 --> 00:12:03,309
because we've called next and we've said

00:12:00,699 --> 00:12:05,860
hey do whatever you need to do until you

00:12:03,309 --> 00:12:09,009
see a yield statement the value is now

00:12:05,860 --> 00:12:11,019
being assigned to the variable num the

00:12:09,009 --> 00:12:14,230
generator runs until the next statement

00:12:11,019 --> 00:12:18,399
and this time we do have a value yielded

00:12:14,230 --> 00:12:20,350
back to plus Nam or four on the next

00:12:18,399 --> 00:12:24,129
call the generator yields four plus num

00:12:20,350 --> 00:12:27,879
or six then it's done no more yield

00:12:24,129 --> 00:12:32,139
statements you can also create an

00:12:27,879 --> 00:12:36,759
infinite generator so how many of you

00:12:32,139 --> 00:12:40,480
use while loops yeah just just a handful

00:12:36,759 --> 00:12:43,989
of you like in production it very few

00:12:40,480 --> 00:12:45,399
okay generally we don't I mean when I

00:12:43,989 --> 00:12:48,699
was learning while loops obviously what

00:12:45,399 --> 00:12:52,119
I did was crash my browser I think we

00:12:48,699 --> 00:12:53,470
all did so in this example like first

00:12:52,119 --> 00:12:56,019
we're gonna pass in an initial value

00:12:53,470 --> 00:12:58,299
into the generator function and this is

00:12:56,019 --> 00:13:01,299
going to avoid relying on next to set

00:12:58,299 --> 00:13:02,949
the initial value of num and then you're

00:13:01,299 --> 00:13:07,209
gonna see the while loop right we're

00:13:02,949 --> 00:13:09,129
doing wild true so this should crash my

00:13:07,209 --> 00:13:11,350
computer like this is an infinite loop

00:13:09,129 --> 00:13:14,799
and should crash my browser and I'll be

00:13:11,350 --> 00:13:17,559
annoyed with myself but actually because

00:13:14,799 --> 00:13:18,259
generators can pause it's actually

00:13:17,559 --> 00:13:22,100
pausing

00:13:18,259 --> 00:13:24,169
while loop so it's not gonna cause a

00:13:22,100 --> 00:13:26,089
crash the yield statements going to

00:13:24,169 --> 00:13:29,209
pause it for us and it's only gonna

00:13:26,089 --> 00:13:31,609
resume again when we call next and so as

00:13:29,209 --> 00:13:33,019
long as you keep calling next this is

00:13:31,609 --> 00:13:34,160
going to keep running

00:13:33,019 --> 00:13:35,720
so this couldn't be an infinite

00:13:34,160 --> 00:13:37,459
generator but you don't have to worry

00:13:35,720 --> 00:13:39,649
about overloading the event loop with

00:13:37,459 --> 00:13:44,089
the while loop because generators can

00:13:39,649 --> 00:13:47,419
pause now you can also run a generator

00:13:44,089 --> 00:13:48,709
from inside of another generator and to

00:13:47,419 --> 00:13:50,509
do that you're going to use the yield

00:13:48,709 --> 00:13:51,499
asterisk expression I'm gonna call it

00:13:50,509 --> 00:13:55,009
yield star because it's just a little

00:13:51,499 --> 00:13:57,139
bit easier to say but to illustrate this

00:13:55,009 --> 00:14:00,169
I have a generator function called

00:13:57,139 --> 00:14:03,859
powder and a generator function called

00:14:00,169 --> 00:14:05,720
inner and you'll notice that outer is

00:14:03,859 --> 00:14:10,850
calling inner with the yield star

00:14:05,720 --> 00:14:12,470
expression so same as before we're going

00:14:10,850 --> 00:14:15,829
to call outer and that's gonna return to

00:14:12,470 --> 00:14:18,019
us the generator object so the first

00:14:15,829 --> 00:14:21,649
time we call next what we expect to

00:14:18,019 --> 00:14:23,720
happen happens the January runs until it

00:14:21,649 --> 00:14:26,119
encounters a yield statement so this

00:14:23,720 --> 00:14:28,759
runs encounters yield and the value to

00:14:26,119 --> 00:14:33,649
the right one is passed back as the

00:14:28,759 --> 00:14:35,539
value but when we call next again the

00:14:33,649 --> 00:14:38,089
generator isn't going to pause at the

00:14:35,539 --> 00:14:39,589
yield star you can see it's pausing at

00:14:38,089 --> 00:14:42,470
the first yield statement in the inner

00:14:39,589 --> 00:14:45,019
generator and the value being returned

00:14:42,470 --> 00:14:48,049
isn't the generator itself but the value

00:14:45,019 --> 00:14:50,839
a from the inner generator so yield star

00:14:48,049 --> 00:14:52,759
is a delegate so when you call next and

00:14:50,839 --> 00:14:55,220
it encounters a yield star expression it

00:14:52,759 --> 00:14:58,910
delegates the generator to the right of

00:14:55,220 --> 00:15:01,850
that expression and it will continue to

00:14:58,910 --> 00:15:04,339
do so as you call next until that

00:15:01,850 --> 00:15:06,409
generator is complete so when we call

00:15:04,339 --> 00:15:10,850
next again the inner generator isn't

00:15:06,409 --> 00:15:13,129
done yet so now the value is B now the

00:15:10,850 --> 00:15:14,720
inner generator is complete and so we

00:15:13,129 --> 00:15:19,279
move on to the next yield statement in

00:15:14,720 --> 00:15:21,769
the outer function and in addition to

00:15:19,279 --> 00:15:24,159
being paused generators can be cancelled

00:15:21,769 --> 00:15:26,689
and you can do this one of two ways so

00:15:24,159 --> 00:15:29,089
the first is with the return statement

00:15:26,689 --> 00:15:31,639
so this generator because it's using a

00:15:29,089 --> 00:15:32,160
while true it should run for as long as

00:15:31,639 --> 00:15:35,610
I call

00:15:32,160 --> 00:15:37,199
the next method but instead when this

00:15:35,610 --> 00:15:40,350
generator encounters the return

00:15:37,199 --> 00:15:43,889
statement it's going to cancel itself so

00:15:40,350 --> 00:15:45,690
you can see that done is now true and it

00:15:43,889 --> 00:15:50,939
doesn't matter how many times I call

00:15:45,690 --> 00:15:53,189
next this generator is done and you can

00:15:50,939 --> 00:15:55,829
also cancel a generator from outside of

00:15:53,189 --> 00:15:59,189
itself so here again the generator

00:15:55,829 --> 00:16:01,920
should be infinite but when I call the

00:15:59,189 --> 00:16:05,189
return method on it it cancels the

00:16:01,920 --> 00:16:06,959
generator and this is really interesting

00:16:05,189 --> 00:16:10,350
that you can cancel a generator from

00:16:06,959 --> 00:16:13,259
within or outside because you can only

00:16:10,350 --> 00:16:16,769
resume the generator from outside of it

00:16:13,259 --> 00:16:20,100
so generators are paused via yield and

00:16:16,769 --> 00:16:23,819
restarted via next but a generator

00:16:20,100 --> 00:16:25,500
cannot call next on itself if I never

00:16:23,819 --> 00:16:29,490
call next on this generator it will

00:16:25,500 --> 00:16:31,019
never yield to it stays paused and this

00:16:29,490 --> 00:16:33,480
is the thing I really struggled with

00:16:31,019 --> 00:16:36,870
when I was converting the game from

00:16:33,480 --> 00:16:41,100
promises to generators because who runs

00:16:36,870 --> 00:16:43,500
the generator so if control happens

00:16:41,100 --> 00:16:46,050
outside like something has to be pulling

00:16:43,500 --> 00:16:47,880
the strings like how do you know to keep

00:16:46,050 --> 00:16:49,290
calling dot next on something or how

00:16:47,880 --> 00:16:52,079
many yield statements there are in

00:16:49,290 --> 00:16:56,579
something and so this is where

00:16:52,079 --> 00:16:58,410
co-routines come into play so carbo

00:16:56,579 --> 00:17:00,720
teens are a general control structure

00:16:58,410 --> 00:17:03,740
where control flow is cooperatively

00:17:00,720 --> 00:17:05,850
passed between two different routines I

00:17:03,740 --> 00:17:08,610
like to think of kuru teens as

00:17:05,850 --> 00:17:11,010
cooperative partners because the

00:17:08,610 --> 00:17:15,600
generator can't resume itself you need a

00:17:11,010 --> 00:17:18,150
cooperative partner to help out so this

00:17:15,600 --> 00:17:20,039
function is a basic example of a Co

00:17:18,150 --> 00:17:22,439
routine it's going to take in a

00:17:20,039 --> 00:17:26,130
generator it's going to call it which

00:17:22,439 --> 00:17:28,980
returns the generator object the inner

00:17:26,130 --> 00:17:31,770
function next response calls the

00:17:28,980 --> 00:17:33,750
generators next method this starts the

00:17:31,770 --> 00:17:36,270
generator which will run until it

00:17:33,750 --> 00:17:38,490
encounters a yield statement at this

00:17:36,270 --> 00:17:41,370
time the generator returns an object

00:17:38,490 --> 00:17:43,620
with the value key and the done key next

00:17:41,370 --> 00:17:45,130
response evaluates whether the generator

00:17:43,620 --> 00:17:47,440
is done or not

00:17:45,130 --> 00:17:48,850
calls itself and if not it calls itself

00:17:47,440 --> 00:17:51,580
with the value from the generators

00:17:48,850 --> 00:17:55,780
response and this loop continues until

00:17:51,580 --> 00:17:57,429
the generator is done so the co routine

00:17:55,780 --> 00:18:00,400
is the cooperative partner to the

00:17:57,429 --> 00:18:02,620
generator the co routine function passes

00:18:00,400 --> 00:18:04,900
control to the generator and when the

00:18:02,620 --> 00:18:07,150
generator pauses control is yielded back

00:18:04,900 --> 00:18:09,250
to the co routine and these two

00:18:07,150 --> 00:18:14,260
functions cooperatively pass control

00:18:09,250 --> 00:18:17,549
until completion so now I can rewrite

00:18:14,260 --> 00:18:21,250
the bounce animation as a generator and

00:18:17,549 --> 00:18:23,140
use a Co routine to run it except you'll

00:18:21,250 --> 00:18:25,990
notice that this code suffers from the

00:18:23,140 --> 00:18:28,059
same issue I had in the beginning the

00:18:25,990 --> 00:18:30,400
animation still happens too quickly I

00:18:28,059 --> 00:18:34,030
still actually need set timeout and I

00:18:30,400 --> 00:18:36,100
actually still need promises but my

00:18:34,030 --> 00:18:38,740
generator doesn't care if I'm using

00:18:36,100 --> 00:18:41,919
promises it's not going to wait for each

00:18:38,740 --> 00:18:44,230
individual promise to resolve and then

00:18:41,919 --> 00:18:48,330
resume itself like it can't resume

00:18:44,230 --> 00:18:51,909
itself but a cooperative partner could

00:18:48,330 --> 00:18:54,940
so I can amend my Co routine to handle

00:18:51,909 --> 00:18:57,250
async requests instead of calling next

00:18:54,940 --> 00:18:59,710
response we'll call a handle async

00:18:57,250 --> 00:19:01,900
function we'll pass it the value of the

00:18:59,710 --> 00:19:05,799
generators response which is a promise

00:19:01,900 --> 00:19:08,409
and now we can prevent the generator

00:19:05,799 --> 00:19:11,260
from resuming until the promise is

00:19:08,409 --> 00:19:13,450
resolved when it's resolved we'll call

00:19:11,260 --> 00:19:15,419
next response which will resume the

00:19:13,450 --> 00:19:18,460
generator

00:19:15,419 --> 00:19:20,799
so with this amended Co routine these

00:19:18,460 --> 00:19:22,780
functions are now equivalent so

00:19:20,799 --> 00:19:25,270
previously we chained promises together

00:19:22,780 --> 00:19:28,000
for the animation and now we can yield

00:19:25,270 --> 00:19:30,520
promises and our cooperative partner the

00:19:28,000 --> 00:19:33,510
KO routine will handle resuming the

00:19:30,520 --> 00:19:36,250
generator when the promise is resolved

00:19:33,510 --> 00:19:38,230
so you can do more than yield promises

00:19:36,250 --> 00:19:40,330
you can yield all sorts of async things

00:19:38,230 --> 00:19:42,669
like callback functions and generators

00:19:40,330 --> 00:19:44,500
themselves and more and there's a really

00:19:42,669 --> 00:19:46,299
great library called Co if you want to

00:19:44,500 --> 00:19:49,000
play around with that I really highly

00:19:46,299 --> 00:19:52,240
recommend it kuru teens are very very

00:19:49,000 --> 00:19:54,520
powerful and the reason they're so

00:19:52,240 --> 00:19:58,630
powerful is that they allow you to think

00:19:54,520 --> 00:19:58,900
sequentially about async code because

00:19:58,630 --> 00:20:00,700
the

00:19:58,900 --> 00:20:02,950
her routine is your cooperative partner

00:20:00,700 --> 00:20:05,470
and handling the messy business of

00:20:02,950 --> 00:20:07,810
chaining and dealing with async code for

00:20:05,470 --> 00:20:12,910
you in the background you can write your

00:20:07,810 --> 00:20:14,710
code as if it ran sequentially so for

00:20:12,910 --> 00:20:17,230
the second version of this game I

00:20:14,710 --> 00:20:19,390
rewrote all the animations with promises

00:20:17,230 --> 00:20:21,430
and generators so what you're seeing

00:20:19,390 --> 00:20:23,830
here is actually the same idle animation

00:20:21,430 --> 00:20:26,740
but with generators and promises and run

00:20:23,830 --> 00:20:28,990
by a KO routine and I had two goals with

00:20:26,740 --> 00:20:31,390
this rewrite I wanted to be able to

00:20:28,990 --> 00:20:33,460
pause animations and I want to take

00:20:31,390 --> 00:20:37,960
advantage of thinking sequentially about

00:20:33,460 --> 00:20:39,550
async code so to do that I started with

00:20:37,960 --> 00:20:40,540
rewriting the function that delays the

00:20:39,550 --> 00:20:43,330
animation

00:20:40,540 --> 00:20:44,770
so this is our async function and it

00:20:43,330 --> 00:20:47,170
doesn't need to hold the animation

00:20:44,770 --> 00:20:49,770
itself it just needs to delay with a

00:20:47,170 --> 00:20:51,940
promise that's its sole responsibility

00:20:49,770 --> 00:20:54,340
so when this function is called it

00:20:51,940 --> 00:20:57,520
returns a new promise and resolved that

00:20:54,340 --> 00:20:59,230
when the timeout is complete it also

00:20:57,520 --> 00:21:01,480
broke out the context clearing it to its

00:20:59,230 --> 00:21:04,960
own function and the drawing of the

00:21:01,480 --> 00:21:07,060
image into its own function and now we

00:21:04,960 --> 00:21:09,580
can combine these new functions to

00:21:07,060 --> 00:21:13,060
replace the previous animation function

00:21:09,580 --> 00:21:14,980
and we can do so inside a generator so

00:21:13,060 --> 00:21:16,630
we'll clear whatever was previously on

00:21:14,980 --> 00:21:20,560
the canvas and then draw the new frame

00:21:16,630 --> 00:21:22,570
and those can occur synchronously will

00:21:20,560 --> 00:21:25,210
yield the delay that's the asynchronous

00:21:22,570 --> 00:21:26,920
part of this function but because we're

00:21:25,210 --> 00:21:29,560
handing it off to the co-routine our

00:21:26,920 --> 00:21:32,740
cooperative partner this looks and feels

00:21:29,560 --> 00:21:34,720
very synchronous the KO routine will

00:21:32,740 --> 00:21:37,990
handle the resolve promise when the

00:21:34,720 --> 00:21:41,440
timeout completes and so here is our

00:21:37,990 --> 00:21:43,810
draw frame generator in use this dislike

00:21:41,440 --> 00:21:45,910
animation draws two frames and because

00:21:43,810 --> 00:21:48,780
draw frame is a generator we're using

00:21:45,910 --> 00:21:51,220
yield star to delegate yield calls to it

00:21:48,780 --> 00:21:53,140
so for each call and draw frame we're

00:21:51,220 --> 00:21:56,380
clearing the context drawing the frame

00:21:53,140 --> 00:21:57,820
and then delaying and then this is what

00:21:56,380 --> 00:22:00,490
the dislike animation looks like you can

00:21:57,820 --> 00:22:03,940
see it's a very unhappy tamagotchi just

00:22:00,490 --> 00:22:06,370
really pissed okay and now we can

00:22:03,940 --> 00:22:09,370
rewrite also the main game loop and take

00:22:06,370 --> 00:22:12,010
advantage of canceling the generator so

00:22:09,370 --> 00:22:13,059
our loop generator function will be run

00:22:12,010 --> 00:22:15,010
by ko

00:22:13,059 --> 00:22:17,440
so we can rely on it to handle any

00:22:15,010 --> 00:22:19,179
values yielded to it we'll create a

00:22:17,440 --> 00:22:21,610
variable to save the status of the

00:22:19,179 --> 00:22:24,150
generator done or not and we'll preset

00:22:21,610 --> 00:22:26,710
the animation to idle

00:22:24,150 --> 00:22:29,110
we'll use a while loop to create a

00:22:26,710 --> 00:22:30,610
never-ending generator so this way the

00:22:29,110 --> 00:22:33,670
game loop is going to continue forever

00:22:30,610 --> 00:22:35,470
if we have a pending user event we'll

00:22:33,670 --> 00:22:37,720
cancel the current animation and

00:22:35,470 --> 00:22:40,179
delegate to the event using yield star

00:22:37,720 --> 00:22:44,410
and whatever the event yields will be

00:22:40,179 --> 00:22:46,450
passed to the co routine otherwise a

00:22:44,410 --> 00:22:48,640
second while loop will handle running

00:22:46,450 --> 00:22:49,780
the animation a while loop inside a

00:22:48,640 --> 00:22:50,559
while loop I want you to understand

00:22:49,780 --> 00:22:54,040
though this is nuts

00:22:50,559 --> 00:22:56,530
as long as the animation is not complete

00:22:54,040 --> 00:22:58,630
and there are no pending events this

00:22:56,530 --> 00:23:00,220
loop will yield the generators values to

00:22:58,630 --> 00:23:02,140
the KO routine to handle and these are

00:23:00,220 --> 00:23:05,740
promises so the KO routine is going to

00:23:02,140 --> 00:23:08,110
handle the chaining but if the animation

00:23:05,740 --> 00:23:10,419
is done or there is a pending user event

00:23:08,110 --> 00:23:11,830
the loop is going to terminate stopping

00:23:10,419 --> 00:23:14,559
the animation generator from running

00:23:11,830 --> 00:23:16,390
again and will reassign animation to the

00:23:14,559 --> 00:23:19,179
idle generator to start from fresh and

00:23:16,390 --> 00:23:20,890
it will reset done to false and on the

00:23:19,179 --> 00:23:23,080
next iteration of this while loop

00:23:20,890 --> 00:23:26,950
pending will be true and will handle the

00:23:23,080 --> 00:23:28,660
user event instead so this is the

00:23:26,950 --> 00:23:31,240
generator function for the feed action

00:23:28,660 --> 00:23:34,419
it evaluates if the Tamagotchi is hungry

00:23:31,240 --> 00:23:36,429
or not if it's not it delegates future

00:23:34,419 --> 00:23:38,610
calls to the dislike anim generator

00:23:36,429 --> 00:23:40,809
which will run the dislike animation

00:23:38,610 --> 00:23:42,429
otherwise we're gonna decrease the

00:23:40,809 --> 00:23:43,900
hunger count and use the yield star

00:23:42,429 --> 00:23:46,990
we're gonna delegate to the eat

00:23:43,900 --> 00:23:49,690
generator that runs that animation all

00:23:46,990 --> 00:23:51,400
right so will this work all right so

00:23:49,690 --> 00:23:52,570
we're idling I'm gonna say yeah I want

00:23:51,400 --> 00:23:54,760
to feed you I'm gonna feed you a burger

00:23:52,570 --> 00:23:58,210
he's eating all right so the idle engine

00:23:54,760 --> 00:24:01,650
canceled I'm gonna do it again but this

00:23:58,210 --> 00:24:05,890
time I'm a feedom candy in a second

00:24:01,650 --> 00:24:06,309
cuz you know a well-balanced meal there

00:24:05,890 --> 00:24:09,549
we go

00:24:06,309 --> 00:24:11,460
cool all right he seems fine so idle

00:24:09,549 --> 00:24:13,360
animation keeps running again

00:24:11,460 --> 00:24:15,910
all right let's feed him one more time

00:24:13,360 --> 00:24:18,830
cuz I think maybe he's still hungry now

00:24:15,910 --> 00:24:22,279
he's mad he doesn't like that alright

00:24:18,830 --> 00:24:24,110
so that's LL for me if you want to check

00:24:22,279 --> 00:24:27,330
out the code for this there's the link

00:24:24,110 --> 00:24:35,119
to the repository for it and huh

00:24:27,330 --> 00:24:35,119

YouTube URL: https://www.youtube.com/watch?v=09V_JAGTs2E


