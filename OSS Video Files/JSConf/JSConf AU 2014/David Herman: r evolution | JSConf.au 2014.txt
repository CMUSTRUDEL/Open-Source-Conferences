Title: David Herman: r evolution | JSConf.au 2014
Publication date: 2014-12-01
Playlist: JSConf AU 2014
Description: 
	The opening keynote for jsconf.au 2014
Captions: 
	00:00:00,000 --> 00:00:02,030
Oh

00:00:06,510 --> 00:00:13,480
okay I want to talk about how we change

00:00:10,120 --> 00:00:16,779
the web that's my job at Mozilla is to

00:00:13,480 --> 00:00:18,449
change the web and forgive me if this

00:00:16,779 --> 00:00:21,760
talk it's a little philosophical

00:00:18,449 --> 00:00:26,109
hopefully things will get more juicy and

00:00:21,760 --> 00:00:28,150
technical as the day goes on in fact I'm

00:00:26,109 --> 00:00:29,560
probably the most awake person here my

00:00:28,150 --> 00:00:32,469
body thinks it's like four or five in

00:00:29,560 --> 00:00:33,340
the afternoon so you can all sleep

00:00:32,469 --> 00:00:37,809
through this if you don't like

00:00:33,340 --> 00:00:39,340
philosophy alright so whenever people

00:00:37,809 --> 00:00:41,710
talk about changing technology you can

00:00:39,340 --> 00:00:43,120
you see them start to divide into two

00:00:41,710 --> 00:00:45,070
different camps there's the revolution

00:00:43,120 --> 00:00:46,840
style and the evolution style and that's

00:00:45,070 --> 00:00:49,059
what I'm going to talk about today and

00:00:46,840 --> 00:00:51,489
I'm not going to try to convince you

00:00:49,059 --> 00:00:53,039
that one is right or wrong but i do want

00:00:51,489 --> 00:00:55,870
to convince you that evolution works

00:00:53,039 --> 00:00:57,610
remarkably well and sometimes when you

00:00:55,870 --> 00:00:59,050
think it's time for a revolution maybe

00:00:57,610 --> 00:01:02,500
you should stop and think would

00:00:59,050 --> 00:01:06,539
evolution work better so again i'm not

00:01:02,500 --> 00:01:09,630
i'm not a anti revolution here in fact

00:01:06,539 --> 00:01:12,670
the organization that I work for Mozilla

00:01:09,630 --> 00:01:16,299
was actually founded on a kind of

00:01:12,670 --> 00:01:18,219
revolution and I think at this it's in

00:01:16,299 --> 00:01:20,349
2014 it's been long enough that a lot of

00:01:18,219 --> 00:01:23,109
people don't actually know the sort of

00:01:20,349 --> 00:01:24,369
creation story of Mozilla I was pretty

00:01:23,109 --> 00:01:26,950
young when this happened I think I was

00:01:24,369 --> 00:01:31,749
in my early 20s I'm betting a lot of you

00:01:26,950 --> 00:01:33,909
were even younger than that so it's a

00:01:31,749 --> 00:01:35,619
really fascinating story back then

00:01:33,909 --> 00:01:38,049
Netscape and Microsoft were the two

00:01:35,619 --> 00:01:39,329
dominant browser you know the two

00:01:38,049 --> 00:01:41,859
companies with the dominant browsers

00:01:39,329 --> 00:01:43,959
netscape communicator i think it was

00:01:41,859 --> 00:01:46,599
called at the time and internet explorer

00:01:43,959 --> 00:01:48,039
and netscape was doomed internet

00:01:46,599 --> 00:01:49,749
explorer had undercut their business

00:01:48,039 --> 00:01:52,479
model and they suddenly found themselves

00:01:49,749 --> 00:01:54,639
a company with no source of revenue and

00:01:52,479 --> 00:01:55,810
they knew this this was not they weren't

00:01:54,639 --> 00:01:59,649
fooling themselves into thinking that

00:01:55,810 --> 00:02:01,869
they had some some way to survive so

00:01:59,649 --> 00:02:03,609
they could see that Microsoft was really

00:02:01,869 --> 00:02:07,689
poised to basically take over the web

00:02:03,609 --> 00:02:09,640
and in this kind of desperate situation

00:02:07,689 --> 00:02:12,459
they actually pulled a pretty amazing

00:02:09,640 --> 00:02:14,090
move particularly for that time when

00:02:12,459 --> 00:02:18,650
open source was not as

00:02:14,090 --> 00:02:22,310
as popular common a thing on the

00:02:18,650 --> 00:02:24,230
thirty-first of march in 1998 they

00:02:22,310 --> 00:02:27,410
decided to open the source to netscape

00:02:24,230 --> 00:02:30,400
and create mozilla org which was going

00:02:27,410 --> 00:02:33,920
to be this worldwide organization of

00:02:30,400 --> 00:02:35,390
open-source collaborators now this was

00:02:33,920 --> 00:02:37,099
really sort of it there was a kind of

00:02:35,390 --> 00:02:40,340
two parts to this to what makes us a

00:02:37,099 --> 00:02:42,560
revolution one was this was maybe

00:02:40,340 --> 00:02:45,709
possibly going to rescue netscape from

00:02:42,560 --> 00:02:48,590
almost certain death and we know how

00:02:45,709 --> 00:02:51,380
that story ends but more importantly I

00:02:48,590 --> 00:02:53,390
think this move saved the web I think if

00:02:51,380 --> 00:02:56,900
they hadn't done this there would have

00:02:53,390 --> 00:02:59,420
been very little that anybody could do

00:02:56,900 --> 00:03:03,200
to stop Microsoft from from taking over

00:02:59,420 --> 00:03:07,269
the web as it turns out this revolution

00:03:03,200 --> 00:03:09,650
was actually televised so I have a

00:03:07,269 --> 00:03:12,680
little clip here I want to show you from

00:03:09,650 --> 00:03:15,049
a documentary called code rush which was

00:03:12,680 --> 00:03:17,690
actually they followed Netscape people

00:03:15,049 --> 00:03:20,480
around during this period and they

00:03:17,690 --> 00:03:23,090
actually filmed the moment when Jamie's

00:03:20,480 --> 00:03:24,920
a winski who was a well-known developer

00:03:23,090 --> 00:03:27,530
at Netscape pushed the code out to the

00:03:24,920 --> 00:03:29,090
web and for me this is a pretty heady

00:03:27,530 --> 00:03:31,819
moment in the history of the web this

00:03:29,090 --> 00:03:33,650
was this was a moment of revolution and

00:03:31,819 --> 00:03:36,829
what led up to this was a whole bunch of

00:03:33,650 --> 00:03:38,120
pressure they were behind schedule they

00:03:36,829 --> 00:03:39,799
were finding out at the last minute that

00:03:38,120 --> 00:03:41,030
they had potentially patent encumbered

00:03:39,799 --> 00:03:42,919
code that they were going to have to

00:03:41,030 --> 00:03:44,660
replace and there were people pulling

00:03:42,919 --> 00:03:46,160
all nighters to replace patent and come

00:03:44,660 --> 00:03:47,840
pre code with open source code so it was

00:03:46,160 --> 00:03:50,840
really down to the wire and the

00:03:47,840 --> 00:03:52,250
documentary kind of plays that up so

00:03:50,840 --> 00:03:55,010
here they are on March 31st that's

00:03:52,250 --> 00:03:57,620
American style sorry one way to learn to

00:03:55,010 --> 00:03:59,989
run a marathon is put a person now 26

00:03:57,620 --> 00:04:01,489
miles into the desert and say you know

00:03:59,989 --> 00:04:02,660
that there's this bomb on your back

00:04:01,489 --> 00:04:04,130
that's going to go off in a certain

00:04:02,660 --> 00:04:06,709
length of time if you don't get into the

00:04:04,130 --> 00:04:08,180
town well that'll motivate you to get in

00:04:06,709 --> 00:04:10,640
but there's a certain chance that you'll

00:04:08,180 --> 00:04:14,120
be blown up

00:04:10,640 --> 00:04:16,850
bye i'm 55 well i'm so going to be late

00:04:14,120 --> 00:04:18,109
hurry up welcome everybody to the

00:04:16,850 --> 00:04:20,959
conference call thanks for joining us

00:04:18,109 --> 00:04:22,700
this morning today a Netscape announced

00:04:20,959 --> 00:04:25,130
that the first developer release of its

00:04:22,700 --> 00:04:27,370
communicator 50 source code is available

00:04:25,130 --> 00:04:33,290
for download from the mozilla org

00:04:27,370 --> 00:04:35,780
website and you know where tarus go

00:04:33,290 --> 00:04:37,910
second floor it's the first floor like

00:04:35,780 --> 00:04:39,590
way on the other side and then today on

00:04:37,910 --> 00:04:41,840
the end of March as we announced we are

00:04:39,590 --> 00:04:43,490
pushing the code out to the web as they

00:04:41,840 --> 00:04:44,840
say and we're delighted to be part of it

00:04:43,490 --> 00:04:47,390
and we're very excited to see what

00:04:44,840 --> 00:04:48,919
happens the good news is the marathoner

00:04:47,390 --> 00:04:50,360
is now coming into town with that bomb

00:04:48,919 --> 00:04:57,070
on his back and it looks like he's going

00:04:50,360 --> 00:04:59,930
to make it this is the moment of truth

00:04:57,070 --> 00:05:01,910
they don't have a theoretical framework

00:04:59,930 --> 00:05:08,840
to write software they're just writing

00:05:01,910 --> 00:05:11,870
it hi just like hitting the baseball if

00:05:08,840 --> 00:05:14,000
their code gets a home run nobody's

00:05:11,870 --> 00:05:15,620
asking questions well this doesn't make

00:05:14,000 --> 00:05:29,210
sense or why do you do that why does it

00:05:15,620 --> 00:05:34,490
work nobody cares why it works wait

00:05:29,210 --> 00:05:37,729
what's good um well it's not connected

00:05:34,490 --> 00:05:40,070
to the machine that controls the ftp

00:05:37,729 --> 00:05:44,180
push it's like not answering is it Lotus

00:05:40,070 --> 00:05:49,430
its blast that flash oh yeah maybe Reba

00:05:44,180 --> 00:05:51,140
to uh hmm oh yeah right yay Super Max

00:05:49,430 --> 00:05:53,830
there Phoenix is there and just there

00:05:51,140 --> 00:05:53,830
we're done

00:06:05,740 --> 00:06:11,780
jamie is here i'm told that means that

00:06:09,890 --> 00:06:17,560
we have now pushed the source out on the

00:06:11,780 --> 00:06:23,180
note that's correct i decided not to a

00:06:17,560 --> 00:06:25,720
stupid idea that's a story interesting

00:06:23,180 --> 00:06:25,720
to go

00:06:35,860 --> 00:06:41,529
for a moment everyone at Netscape takes

00:06:39,199 --> 00:06:41,529
a breather

00:06:43,050 --> 00:06:47,529
he said I think it's going to work out

00:06:45,219 --> 00:06:48,969
there at the end I think my favorite

00:06:47,529 --> 00:06:52,719
part of that is the little Duran Duran

00:06:48,969 --> 00:06:56,949
playing in the background alright this

00:06:52,719 --> 00:06:58,300
was a this was a seriously revolutionary

00:06:56,949 --> 00:07:00,610
move and they knew what they were doing

00:06:58,300 --> 00:07:03,550
this wasn't just about saving Netscape

00:07:00,610 --> 00:07:06,129
they understood that they were also

00:07:03,550 --> 00:07:08,080
creating a parachute to rescue a

00:07:06,129 --> 00:07:12,819
competition on the web to be able to

00:07:08,080 --> 00:07:15,249
have another another option after the

00:07:12,819 --> 00:07:17,169
end of Netscape so Jamie Zielinski was

00:07:15,249 --> 00:07:18,819
replying a year later after AOL had

00:07:17,169 --> 00:07:22,599
acquired Netscape and people were kind

00:07:18,819 --> 00:07:24,659
of facepalming and giving up and he was

00:07:22,599 --> 00:07:28,810
saying don't don't forget what we did

00:07:24,659 --> 00:07:31,509
because we opened the the source code

00:07:28,810 --> 00:07:33,249
because legally nobody can close that

00:07:31,509 --> 00:07:34,839
source code back up he's saying nobody

00:07:33,249 --> 00:07:36,610
can undo what has been done the Mozilla

00:07:34,839 --> 00:07:39,639
code is out there and nobody can ever

00:07:36,610 --> 00:07:40,870
take that away from you ever so that you

00:07:39,639 --> 00:07:42,189
know it took a couple of years for that

00:07:40,870 --> 00:07:43,990
source code to really land on its feet

00:07:42,189 --> 00:07:46,839
and for Firefox to become a big thing

00:07:43,990 --> 00:07:52,360
but this was a big a big bold move in

00:07:46,839 --> 00:07:54,729
the history of of the web so revolution

00:07:52,360 --> 00:07:56,680
is really exciting and it lets you raise

00:07:54,729 --> 00:07:58,120
guns over your head and and red flags

00:07:56,680 --> 00:07:59,800
and it's it's pretty hard to get excited

00:07:58,120 --> 00:08:02,439
about things like evolution because

00:07:59,800 --> 00:08:04,949
evolution tends to not be quite as

00:08:02,439 --> 00:08:10,029
pretty not maybe not quite as exciting

00:08:04,949 --> 00:08:11,289
it produces some interesting effects but

00:08:10,029 --> 00:08:13,930
i'm going to try anyway to convince you

00:08:11,289 --> 00:08:15,759
that there's there's there's times for

00:08:13,930 --> 00:08:17,080
revolution but there's also times when

00:08:15,759 --> 00:08:18,339
maybe revolution isn't what's called for

00:08:17,080 --> 00:08:21,669
and maybe evolution would actually work

00:08:18,339 --> 00:08:23,560
better so you know when they saw where

00:08:21,669 --> 00:08:25,719
we're at death's door here the web is

00:08:23,560 --> 00:08:28,270
almost over okay that's time for

00:08:25,719 --> 00:08:29,860
revolution but often you hear people say

00:08:28,270 --> 00:08:31,389
you know you read on like hacker news oh

00:08:29,860 --> 00:08:33,699
this you know JavaScript such an ugly

00:08:31,389 --> 00:08:36,069
language oh it has with we should just

00:08:33,699 --> 00:08:37,959
start over again but look every

00:08:36,069 --> 00:08:39,760
technology has words and maybe having

00:08:37,959 --> 00:08:45,040
warts isn't actually enough cause for

00:08:39,760 --> 00:08:47,079
revolution so one of the one of the

00:08:45,040 --> 00:08:50,290
topics where you see people asking for

00:08:47,079 --> 00:08:51,459
revolution all the time is this you know

00:08:50,290 --> 00:08:52,260
why don't you have a byte code language

00:08:51,459 --> 00:08:54,720
on the

00:08:52,260 --> 00:08:58,440
and for a long time was ill argued

00:08:54,720 --> 00:09:02,310
against trying to standardize a bytecode

00:08:58,440 --> 00:09:04,110
vm but it was hard to really it's hard

00:09:02,310 --> 00:09:07,890
to just say no you really want to offer

00:09:04,110 --> 00:09:09,810
an alternative and so when we look at

00:09:07,890 --> 00:09:11,730
the the calls for a byte code language

00:09:09,810 --> 00:09:13,050
it's actually better to take a step back

00:09:11,730 --> 00:09:14,790
and say what are the problems that

00:09:13,050 --> 00:09:16,560
people are actually trying to solve the

00:09:14,790 --> 00:09:18,120
problems that that they're identifying

00:09:16,560 --> 00:09:21,450
these are real actual problems are

00:09:18,120 --> 00:09:23,880
things like JavaScript lacks the

00:09:21,450 --> 00:09:25,710
features that you need for other

00:09:23,880 --> 00:09:27,900
languages to compile to the web so if

00:09:25,710 --> 00:09:29,430
you want the web to be a compiled target

00:09:27,900 --> 00:09:30,630
for some other language if you want to

00:09:29,430 --> 00:09:32,400
be able to port some other code to the

00:09:30,630 --> 00:09:33,650
web there are some features missing in

00:09:32,400 --> 00:09:36,300
JavaScript that make that difficult

00:09:33,650 --> 00:09:38,160
another one is is performance you know

00:09:36,300 --> 00:09:39,390
JavaScript historically has been slow or

00:09:38,160 --> 00:09:40,950
maybe it's not always slow sometimes

00:09:39,390 --> 00:09:42,570
it's fast but it's very hard to predict

00:09:40,950 --> 00:09:45,270
when it's going to be fast because jits

00:09:42,570 --> 00:09:47,400
are extremely dynamic heuristic systems

00:09:45,270 --> 00:09:49,620
it's very hard to get repeatedly

00:09:47,400 --> 00:09:51,000
repeatable reliable performance it's

00:09:49,620 --> 00:09:54,240
hard to get reliable performance across

00:09:51,000 --> 00:09:55,830
multiple browsers and for people who

00:09:54,240 --> 00:09:57,030
really wanted to squeeze out maximum

00:09:55,830 --> 00:09:59,010
performance particularly the games

00:09:57,030 --> 00:10:01,410
industry jit compilation can also

00:09:59,010 --> 00:10:03,690
provide produce performance problems of

00:10:01,410 --> 00:10:06,720
its own just the act of compiling code

00:10:03,690 --> 00:10:09,060
can itself introduce jank in your in

00:10:06,720 --> 00:10:11,160
your code so these were all real issues

00:10:09,060 --> 00:10:12,650
but instead of just saying well let's

00:10:11,160 --> 00:10:14,910
start from scratch and lets you know

00:10:12,650 --> 00:10:17,220
create a new standards body and try to

00:10:14,910 --> 00:10:19,080
get all the companies together and and

00:10:17,220 --> 00:10:21,480
come up with something out of whole

00:10:19,080 --> 00:10:24,540
cloth we decided to take a different

00:10:21,480 --> 00:10:27,090
approach at Mozilla so the first step

00:10:24,540 --> 00:10:28,230
was well we know that we can compile to

00:10:27,090 --> 00:10:30,150
JavaScript there's lots of languages

00:10:28,230 --> 00:10:32,820
that compiled to JavaScript let's try

00:10:30,150 --> 00:10:35,610
compiling high-performance programs to

00:10:32,820 --> 00:10:37,350
JavaScript and see how well we can do so

00:10:35,610 --> 00:10:39,960
my colleague alone zack i created the

00:10:37,350 --> 00:10:42,420
Emscripten compiler this was sort of the

00:10:39,960 --> 00:10:45,000
first step of our process it was just to

00:10:42,420 --> 00:10:46,140
say okay it's probably impossible to

00:10:45,000 --> 00:10:47,520
commit this is actually what he told me

00:10:46,140 --> 00:10:50,190
he said he was sure that this was

00:10:47,520 --> 00:10:51,780
impossible to compile C++ to JavaScript

00:10:50,190 --> 00:10:55,290
but he might as well give it a try and

00:10:51,780 --> 00:10:56,610
see where it falls down and he along

00:10:55,290 --> 00:10:58,070
with everyone else was shocked to see

00:10:56,610 --> 00:11:00,630
that it worked better than he expected

00:10:58,070 --> 00:11:02,730
and he was able to leverage a lot of the

00:11:00,630 --> 00:11:03,840
hard work of the l a-- vm toolchain so

00:11:02,730 --> 00:11:06,660
he didn't have to write a lot

00:11:03,840 --> 00:11:08,040
back end code but even so it was a

00:11:06,660 --> 00:11:11,280
pretty amazing feat to take a low-level

00:11:08,040 --> 00:11:12,750
language and compiler to JavaScript the

00:11:11,280 --> 00:11:14,400
next step was to figure out well how can

00:11:12,750 --> 00:11:16,650
we get better performance out of this so

00:11:14,400 --> 00:11:18,180
he's built this compiler that produces

00:11:16,650 --> 00:11:19,530
JavaScript now we look need to look at

00:11:18,180 --> 00:11:21,480
our JavaScript engine and figure out

00:11:19,530 --> 00:11:23,100
well what kinds of performance

00:11:21,480 --> 00:11:25,320
bottlenecks are we hitting there how can

00:11:23,100 --> 00:11:26,610
we optimize our JavaScript engine it

00:11:25,320 --> 00:11:29,220
turns out that he wasn't the only one

00:11:26,610 --> 00:11:31,680
doing this there were other compilers

00:11:29,220 --> 00:11:33,530
being used on the web and so multiple

00:11:31,680 --> 00:11:35,220
engines were actually starting to

00:11:33,530 --> 00:11:37,140
multiple JavaScript engines were

00:11:35,220 --> 00:11:39,150
starting to improve the performance for

00:11:37,140 --> 00:11:43,260
this sort of strange style of code that

00:11:39,150 --> 00:11:44,430
was being generated by compilers and so

00:11:43,260 --> 00:11:46,590
over time we were closing those

00:11:44,430 --> 00:11:49,800
performance gaps and then the final step

00:11:46,590 --> 00:11:51,990
was when we got together alone Zac i

00:11:49,800 --> 00:11:53,760
Luke Wagner another colleague of mine

00:11:51,990 --> 00:11:57,960
and I got together and said can we

00:11:53,760 --> 00:12:00,570
actually formalize what this dialect of

00:11:57,960 --> 00:12:02,430
javascript is that we're generating from

00:12:00,570 --> 00:12:04,350
the inscription compiler in a way that

00:12:02,430 --> 00:12:06,600
we could actually recognize that code

00:12:04,350 --> 00:12:09,810
ahead of time in our JavaScript engine

00:12:06,600 --> 00:12:11,760
validate it and actually prove that we

00:12:09,810 --> 00:12:14,670
can get a higher degree of optimizations

00:12:11,760 --> 00:12:16,230
that are guaranteed to be correct so

00:12:14,670 --> 00:12:21,120
basically it was can we lock in that

00:12:16,230 --> 00:12:24,060
last level of performance and this

00:12:21,120 --> 00:12:27,390
worked really well and it also turned a

00:12:24,060 --> 00:12:29,040
lot of stomachs so you know I showed you

00:12:27,390 --> 00:12:31,200
those pictures of evolution evolution

00:12:29,040 --> 00:12:33,360
doesn't always provide the the prettiest

00:12:31,200 --> 00:12:35,640
results so one of the one of the things

00:12:33,360 --> 00:12:38,970
that bothers people about as MJS is that

00:12:35,640 --> 00:12:40,770
it's this very bizarre style of code so

00:12:38,970 --> 00:12:42,600
you know I could I could defend myself

00:12:40,770 --> 00:12:44,250
and say well you know any machine

00:12:42,600 --> 00:12:45,630
generated code is ugly you know you can

00:12:44,250 --> 00:12:47,280
look at any bytecode language and it's

00:12:45,630 --> 00:12:49,590
going to look just as ugly but that's

00:12:47,280 --> 00:12:52,820
really not the point the point here is

00:12:49,590 --> 00:12:55,920
that this is an evolutionary strategy

00:12:52,820 --> 00:12:57,330
where a bytecode language has to get

00:12:55,920 --> 00:13:00,510
over this initial hump that's very

00:12:57,330 --> 00:13:02,370
difficult which is that no content

00:13:00,510 --> 00:13:05,520
authors nobody who's actually building

00:13:02,370 --> 00:13:07,620
web apps could start to use a new byte

00:13:05,520 --> 00:13:09,090
code language until enough browsers had

00:13:07,620 --> 00:13:11,520
actually implemented that byte code

00:13:09,090 --> 00:13:13,620
language and it had reached enough end

00:13:11,520 --> 00:13:15,900
users and this creates a kind of chicken

00:13:13,620 --> 00:13:17,230
and egg problem where developers aren't

00:13:15,900 --> 00:13:18,970
creating demand because they're

00:13:17,230 --> 00:13:20,800
building it so browser vendors aren't

00:13:18,970 --> 00:13:22,330
don't have the incentive to build it and

00:13:20,800 --> 00:13:24,040
so browser vendors aren't building it

00:13:22,330 --> 00:13:25,390
which means that developers aren't using

00:13:24,040 --> 00:13:27,370
it it's very hard to get off the ground

00:13:25,390 --> 00:13:28,930
whereas with as MJ s what we did was we

00:13:27,370 --> 00:13:32,350
said well this is just JavaScript this

00:13:28,930 --> 00:13:34,090
actually works in any JavaScript engine

00:13:32,350 --> 00:13:35,740
as long as it has typed arrays support

00:13:34,090 --> 00:13:38,770
and typed arrays are you know had long

00:13:35,740 --> 00:13:40,810
been standardized so from the get-go as

00:13:38,770 --> 00:13:43,360
andreas worked in multiple browsers once

00:13:40,810 --> 00:13:45,910
ie10 added typed array support it

00:13:43,360 --> 00:13:47,470
started working in IE as well so you can

00:13:45,910 --> 00:13:52,360
write as MJ s code that works in IE

00:13:47,470 --> 00:13:54,580
safari opera chrome firefox so this was

00:13:52,360 --> 00:13:57,400
a technology that could work from the

00:13:54,580 --> 00:13:59,230
start and it was one that web developers

00:13:57,400 --> 00:14:01,030
could start using and that meant that we

00:13:59,230 --> 00:14:02,830
could bootstrap this evolutionary

00:14:01,030 --> 00:14:04,990
process and actually get things moving

00:14:02,830 --> 00:14:07,360
faster so just to prove that this is

00:14:04,990 --> 00:14:10,450
real and because I love to show off my

00:14:07,360 --> 00:14:21,240
colleagues work I'm going to do just one

00:14:10,450 --> 00:14:21,240
as MJ s demo so what this demo is is the

00:14:21,360 --> 00:14:24,970
the Triple A game company epic they do

00:14:23,860 --> 00:14:28,180
some of the sort of Hollywood

00:14:24,970 --> 00:14:33,720
blockbuster style games their latest

00:14:28,180 --> 00:14:42,880
engine is called Unreal Engine 4 and

00:14:33,720 --> 00:14:45,880
this is a port see oh this isn't fitting

00:14:42,880 --> 00:14:49,080
on the screen here we go so this is a

00:14:45,880 --> 00:14:53,290
port of a demo of Unreal Engine 4

00:14:49,080 --> 00:14:55,780
running with no plugins in a nightly

00:14:53,290 --> 00:14:57,820
build of Firefox I don't know how many

00:14:55,780 --> 00:15:00,370
lines of C++ code it is but I think it's

00:14:57,820 --> 00:15:03,150
at least a million lines it's about a 68

00:15:00,370 --> 00:15:03,150
megabyte payload

00:15:03,939 --> 00:15:07,929
you can see there's some pretty nice

00:15:05,949 --> 00:15:10,959
lighting effects this is actually not

00:15:07,929 --> 00:15:13,029
even finished so unreal 4 is not I think

00:15:10,959 --> 00:15:14,169
it hasn't even been released or maybe

00:15:13,029 --> 00:15:18,339
it's just in the process of being

00:15:14,169 --> 00:15:21,220
released so when we first met with

00:15:18,339 --> 00:15:24,699
unreal or with epic to help them port

00:15:21,220 --> 00:15:27,489
unreal 3 a year ago they got it working

00:15:24,699 --> 00:15:29,709
in less than a week so we're proving

00:15:27,489 --> 00:15:31,389
that it's actually possible to compile

00:15:29,709 --> 00:15:35,769
high-performance JavaScript code or hype

00:15:31,389 --> 00:15:37,389
upon its native code to the web mostly

00:15:35,769 --> 00:15:40,569
push button and that's getting better

00:15:37,389 --> 00:15:41,649
and better but at this point now they're

00:15:40,569 --> 00:15:45,759
taking products they haven't even

00:15:41,649 --> 00:15:49,499
released yet so let's see if we can go

00:15:45,759 --> 00:15:49,499
to some fun

00:15:53,020 --> 00:15:56,640
I like this demo because i'm not a big

00:15:54,670 --> 00:16:04,900
gamer and I like the atmosphere of it

00:15:56,640 --> 00:16:09,760
it's not as violent so we have other

00:16:04,900 --> 00:16:12,600
partners to the other really big name is

00:16:09,760 --> 00:16:15,130
the city the other really big name in

00:16:12,600 --> 00:16:16,090
game engines is unity and we just

00:16:15,130 --> 00:16:18,340
announced with them at the game

00:16:16,090 --> 00:16:22,080
developers conference that the unity

00:16:18,340 --> 00:16:22,080
engine has also been ported to as MJS

00:16:28,110 --> 00:16:34,990
somewhere there's like a big thing that

00:16:30,130 --> 00:16:36,670
takes me wise me away I don't know like

00:16:34,990 --> 00:16:40,750
I say I'm not much of a game game player

00:16:36,670 --> 00:16:43,360
but anyway so there's a taste of native

00:16:40,750 --> 00:16:51,070
code running in the browser with no

00:16:43,360 --> 00:16:55,000
plugins alright so the next thing I want

00:16:51,070 --> 00:16:56,650
to talk about is a sort of mini movement

00:16:55,000 --> 00:17:00,100
that we started calling one javascript

00:16:56,650 --> 00:17:02,110
or one j/s my nanny tells me that my

00:17:00,100 --> 00:17:04,150
infant daughter really loves one

00:17:02,110 --> 00:17:09,490
direction so i don't think i could name

00:17:04,150 --> 00:17:11,920
their songs if I heard them so when I

00:17:09,490 --> 00:17:13,660
first got involved with tc39 the

00:17:11,920 --> 00:17:15,760
standards committee they were in the

00:17:13,660 --> 00:17:19,180
process of doing addition for of ECMO

00:17:15,760 --> 00:17:20,830
scripts and let me kind of get you into

00:17:19,180 --> 00:17:23,230
the heads of people who do standards

00:17:20,830 --> 00:17:25,900
people who do standards have to cope

00:17:23,230 --> 00:17:27,790
every day with the mistakes that were

00:17:25,900 --> 00:17:29,050
made in the past in a technology and

00:17:27,790 --> 00:17:32,050
they desperately wish that they could

00:17:29,050 --> 00:17:34,390
fix them and the web is enormous and you

00:17:32,050 --> 00:17:37,200
can't take anything back and so when

00:17:34,390 --> 00:17:39,070
you're looking at you know billions of

00:17:37,200 --> 00:17:40,510
applications that are all using these

00:17:39,070 --> 00:17:41,650
broken features and you really wish you

00:17:40,510 --> 00:17:42,880
could get rid of the features but you

00:17:41,650 --> 00:17:45,340
can't do it without breaking them

00:17:42,880 --> 00:17:47,860
there's this enormous temptation to say

00:17:45,340 --> 00:17:49,840
let's let's create a clean slate by

00:17:47,860 --> 00:17:51,460
having a some sort of opt-in where you

00:17:49,840 --> 00:17:53,230
can choose a new version of the language

00:17:51,460 --> 00:17:54,790
and there we can actually throw away

00:17:53,230 --> 00:17:56,380
some features that we never liked or

00:17:54,790 --> 00:17:58,720
that get in the way or cause problems

00:17:56,380 --> 00:18:00,250
for other features that we want so when

00:17:58,720 --> 00:18:01,360
I first joined that was the plan of

00:18:00,250 --> 00:18:03,220
action that was the plan of record for

00:18:01,360 --> 00:18:05,290
addition for we were going to have this

00:18:03,220 --> 00:18:07,750
new mime type application / JavaScript

00:18:05,290 --> 00:18:09,700
semicolon version equals 4 and that was

00:18:07,750 --> 00:18:12,880
going to be this grand new utopia that

00:18:09,700 --> 00:18:14,050
everyone was going to program in I say I

00:18:12,880 --> 00:18:15,400
have to get you in the mind of a

00:18:14,050 --> 00:18:17,920
standards person because any developer

00:18:15,400 --> 00:18:22,270
looks at this and thinks that they're

00:18:17,920 --> 00:18:23,710
out of their minds but when you really

00:18:22,270 --> 00:18:25,570
really wish that you could change the

00:18:23,710 --> 00:18:27,340
technology it's very natural to want to

00:18:25,570 --> 00:18:28,600
do that so the kinds of things that we

00:18:27,340 --> 00:18:30,220
were talking about doing back then were

00:18:28,600 --> 00:18:32,620
we wanted to introduce these generator

00:18:30,220 --> 00:18:34,000
functions and at the time the the

00:18:32,620 --> 00:18:35,650
problem we were running into was they

00:18:34,000 --> 00:18:37,180
needed this new yield keyword but yield

00:18:35,650 --> 00:18:39,460
wasn't a reserved word and there's

00:18:37,180 --> 00:18:41,440
actual code out there on the web that

00:18:39,460 --> 00:18:43,090
uses yield as an identifier so this was

00:18:41,440 --> 00:18:45,490
just an incompatibility how could we do

00:18:43,090 --> 00:18:47,560
this and the easy answer was well we'll

00:18:45,490 --> 00:18:48,970
just force them to opt into the new

00:18:47,560 --> 00:18:52,300
language and then with the new language

00:18:48,970 --> 00:18:53,860
we can reserve new keywords so edition 4

00:18:52,300 --> 00:18:56,800
got cancelled for all sorts of various

00:18:53,860 --> 00:18:58,240
reasons if if you want to hear the story

00:18:56,800 --> 00:19:02,470
you're going to have to get me a beer

00:18:58,240 --> 00:19:06,880
but even though that got canceled then

00:19:02,470 --> 00:19:08,200
when we moved on to addition 5 did a few

00:19:06,880 --> 00:19:09,520
things but then when we moved on to

00:19:08,200 --> 00:19:11,050
addition 6 we kind of went back to the

00:19:09,520 --> 00:19:12,220
same plan again we were we're going to

00:19:11,050 --> 00:19:13,480
have this version opt-in and we were

00:19:12,220 --> 00:19:14,260
going to be able to break things and so

00:19:13,480 --> 00:19:16,090
we were going to be able to have

00:19:14,260 --> 00:19:19,240
generator functions that that had this

00:19:16,090 --> 00:19:21,220
reserved keyword yield that was the plan

00:19:19,240 --> 00:19:23,140
for a long time and it was allowing us

00:19:21,220 --> 00:19:24,490
to think big thoughts about really

00:19:23,140 --> 00:19:26,100
breaking compatibility and changing

00:19:24,490 --> 00:19:29,260
things and doing things in new ways and

00:19:26,100 --> 00:19:31,210
one day my colleague Sam Tobin Hawk said

00:19:29,260 --> 00:19:34,120
who's a professor at Indiana University

00:19:31,210 --> 00:19:35,350
back in the states he and I were I am I

00:19:34,120 --> 00:19:36,790
and he said you know I just had this

00:19:35,350 --> 00:19:40,420
nagging feeling in the back of my head

00:19:36,790 --> 00:19:42,400
that maybe we were so close to

00:19:40,420 --> 00:19:43,960
compatibility with the existing versions

00:19:42,400 --> 00:19:45,970
of Java Script maybe we actually don't

00:19:43,960 --> 00:19:47,920
need the opt-in and that was like this

00:19:45,970 --> 00:19:49,300
big you know being slapped by a

00:19:47,920 --> 00:19:52,960
two-by-four over the head it had just

00:19:49,300 --> 00:19:55,120
never occurred to me before that that we

00:19:52,960 --> 00:19:56,710
should reconsider that so we worked

00:19:55,120 --> 00:19:57,970
through it and we realize we can do

00:19:56,710 --> 00:20:00,640
everything we're trying to do without

00:19:57,970 --> 00:20:03,160
actually needing an opt-in so for

00:20:00,640 --> 00:20:06,460
generators for example by giving a

00:20:03,160 --> 00:20:07,900
special distinct syntax for what a

00:20:06,460 --> 00:20:10,480
generator function looks like that

00:20:07,900 --> 00:20:12,010
allows us to contextually reserved the

00:20:10,480 --> 00:20:15,010
keyword yield basically there are sort

00:20:12,010 --> 00:20:15,860
of feature by feature you could call

00:20:15,010 --> 00:20:22,880
them hacks or you

00:20:15,860 --> 00:20:24,559
you call them finesses so this allows us

00:20:22,880 --> 00:20:26,090
to add new features to javascript in

00:20:24,559 --> 00:20:27,799
such a way that you don't have to decide

00:20:26,090 --> 00:20:29,240
I'm going all-in for the new language

00:20:27,799 --> 00:20:31,130
version if I just want this one feature

00:20:29,240 --> 00:20:32,870
and that's really critical for the

00:20:31,130 --> 00:20:35,809
evolution story for people to be able to

00:20:32,870 --> 00:20:37,580
piece by piece adopt new technology they

00:20:35,809 --> 00:20:38,960
need to not have to worry about if I

00:20:37,580 --> 00:20:40,429
pull in this one piece am I going to

00:20:38,960 --> 00:20:43,340
pull in all these other pieces as well

00:20:40,429 --> 00:20:45,500
is that going to break other parts of my

00:20:43,340 --> 00:20:47,570
code that already exists can I just you

00:20:45,500 --> 00:20:50,090
know can I just adopt one piece at a

00:20:47,570 --> 00:20:52,010
time and the easier you make it for

00:20:50,090 --> 00:20:53,510
people to adopt one piece at a time the

00:20:52,010 --> 00:20:57,890
faster you get to turn that evolutionary

00:20:53,510 --> 00:20:59,990
crank so I sent an email to the mailing

00:20:57,890 --> 00:21:02,210
list called es6 doesn't need opt-in and

00:20:59,990 --> 00:21:05,299
I and I coined the slogan just one

00:21:02,210 --> 00:21:09,140
JavaScript and that has become a sort of

00:21:05,299 --> 00:21:11,179
a guiding principle for us all along is

00:21:09,140 --> 00:21:13,780
let's not fork the language let's keep

00:21:11,179 --> 00:21:16,460
within one language and add new features

00:21:13,780 --> 00:21:18,650
piece by piece rather than trying to

00:21:16,460 --> 00:21:20,390
create whole new versions of JavaScript

00:21:18,650 --> 00:21:24,100
this is important for several reasons it

00:21:20,390 --> 00:21:26,270
helps focus our work it prevents us from

00:21:24,100 --> 00:21:28,580
going off in directions that are just

00:21:26,270 --> 00:21:30,230
kind of pointless anyway it enforces

00:21:28,580 --> 00:21:31,520
consistency the more we fork the

00:21:30,230 --> 00:21:33,500
language the more we have the more

00:21:31,520 --> 00:21:35,929
developers have to deal with well what

00:21:33,500 --> 00:21:36,919
happens if I have es5 code in es6 code

00:21:35,929 --> 00:21:39,679
and they need to interact with each

00:21:36,919 --> 00:21:42,010
other and like i said it helps adoption

00:21:39,679 --> 00:21:44,630
because it allows people to pick up

00:21:42,010 --> 00:21:45,980
features one at a time and of course

00:21:44,630 --> 00:21:48,200
when you're talking about language

00:21:45,980 --> 00:21:50,150
features they can't just use them like

00:21:48,200 --> 00:21:51,890
libraries and use standard polyfills

00:21:50,150 --> 00:21:53,870
like they can with api's then they need

00:21:51,890 --> 00:21:57,799
to use things like compilers but that's

00:21:53,870 --> 00:22:00,020
a real thing now compilers aren't just a

00:21:57,799 --> 00:22:02,419
theoretical possibility there's a

00:22:00,020 --> 00:22:05,330
standard tool these days for JavaScript

00:22:02,419 --> 00:22:07,460
development so in between es for in es6

00:22:05,330 --> 00:22:10,190
there was actually another little mode

00:22:07,460 --> 00:22:13,880
that gets snuck in there and that was

00:22:10,190 --> 00:22:15,500
strict mode and i'm not going to get

00:22:13,880 --> 00:22:16,700
into the vagaries of you know what's

00:22:15,500 --> 00:22:18,559
good and what's bad about strict mode

00:22:16,700 --> 00:22:20,570
except just to say that it's once again

00:22:18,559 --> 00:22:22,870
another opt-in mode and it is another

00:22:20,570 --> 00:22:24,740
kind of forking of the language and

00:22:22,870 --> 00:22:27,290
again it was one of those things where

00:22:24,740 --> 00:22:28,880
it was very tempting for people on a

00:22:27,290 --> 00:22:31,130
Standards Committee to use

00:22:28,880 --> 00:22:33,260
has there are all these pain points so

00:22:31,130 --> 00:22:36,590
one of the main ones is function

00:22:33,260 --> 00:22:38,540
declarations inside of a block have just

00:22:36,590 --> 00:22:39,770
completely incompatible semantics across

00:22:38,540 --> 00:22:41,540
different browsers they were actually

00:22:39,770 --> 00:22:43,190
never part of the ACMA script standard

00:22:41,540 --> 00:22:45,500
and so each browser added it in a

00:22:43,190 --> 00:22:47,210
non-standard way and they have some

00:22:45,500 --> 00:22:49,310
parts that have overlapping semantics in

00:22:47,210 --> 00:22:50,810
some parts that are incompatible and so

00:22:49,310 --> 00:22:52,220
it was just hopeless every time we tried

00:22:50,810 --> 00:22:53,930
to figure out how can we actually

00:22:52,220 --> 00:22:56,060
standardized what the behavior should be

00:22:53,930 --> 00:22:57,740
it was impossible to find something that

00:22:56,060 --> 00:22:59,780
worked on all browsers and that wouldn't

00:22:57,740 --> 00:23:01,430
break existing content so strict mode

00:22:59,780 --> 00:23:03,440
gave us an in for doing that we could

00:23:01,430 --> 00:23:05,450
say oh well for new code that ops into

00:23:03,440 --> 00:23:07,070
strict mode we can fix the semantics we

00:23:05,450 --> 00:23:09,830
can make it clean we can make it what we

00:23:07,070 --> 00:23:11,780
want it to be but the problem is again

00:23:09,830 --> 00:23:14,990
you're forcing people to opt into this

00:23:11,780 --> 00:23:17,750
new mode strict mode had some some

00:23:14,990 --> 00:23:19,460
issues of its own as far as like you

00:23:17,750 --> 00:23:22,430
know how to mash together non strict

00:23:19,460 --> 00:23:24,590
code and strict code so in equus crypt 6

00:23:22,430 --> 00:23:26,950
what we're doing is instead of an opt-in

00:23:24,590 --> 00:23:29,210
mode or tying strict mode two modules

00:23:26,950 --> 00:23:30,380
now modules aren't tied to a whole bunch

00:23:29,210 --> 00:23:33,080
of different things this is the one

00:23:30,380 --> 00:23:35,270
piece that's tied together but I think

00:23:33,080 --> 00:23:36,860
it's really important so for one I think

00:23:35,270 --> 00:23:38,150
node has proved to us that people want

00:23:36,860 --> 00:23:39,590
to write their code in modules that's

00:23:38,150 --> 00:23:42,440
the style that people want to write

00:23:39,590 --> 00:23:44,840
programs in so I think that once modules

00:23:42,440 --> 00:23:47,150
start landing in all of the browsers or

00:23:44,840 --> 00:23:48,650
even once the compilers that people are

00:23:47,150 --> 00:23:50,210
building today start becoming prevalent

00:23:48,650 --> 00:23:51,890
enough people are really going to want

00:23:50,210 --> 00:23:54,350
to use equi script six modules for

00:23:51,890 --> 00:23:56,450
writing their code and just by using a

00:23:54,350 --> 00:23:58,520
module you'll automatically be put into

00:23:56,450 --> 00:24:00,530
strict mode and that means some of those

00:23:58,520 --> 00:24:02,570
cleanups that we got to introduce into

00:24:00,530 --> 00:24:04,070
the language for strict mode will now

00:24:02,570 --> 00:24:05,570
just be applied everywhere and some of

00:24:04,070 --> 00:24:08,330
the worst mistakes of Java scripts past

00:24:05,570 --> 00:24:09,770
will sort of be automatically fixed for

00:24:08,330 --> 00:24:11,840
the vast majority of code that you write

00:24:09,770 --> 00:24:13,580
as long as as long as you want to be

00:24:11,840 --> 00:24:16,760
using models which I think again is

00:24:13,580 --> 00:24:18,080
going to be popular so this is a

00:24:16,760 --> 00:24:19,580
one-time fixed we don't get to do this

00:24:18,080 --> 00:24:20,810
all the time but modules were an

00:24:19,580 --> 00:24:22,340
opportunity and they were up an

00:24:20,810 --> 00:24:23,990
opportunity to do this in a way that

00:24:22,340 --> 00:24:26,510
didn't force people to use that that

00:24:23,990 --> 00:24:28,250
language for king so the basic theme

00:24:26,510 --> 00:24:30,260
here is that features are better than

00:24:28,250 --> 00:24:33,080
Forks introducing fixes to the language

00:24:30,260 --> 00:24:35,540
on a case-by-case basis works much

00:24:33,080 --> 00:24:37,490
better than forcing programmers to deal

00:24:35,540 --> 00:24:39,690
with sort of a combinatorial explosion

00:24:37,490 --> 00:24:43,000
of different versions of ECMO

00:24:39,690 --> 00:24:44,950
and modules are just a better tool to

00:24:43,000 --> 00:24:46,450
use for opting into strict mode than

00:24:44,950 --> 00:24:47,440
modes and it's my hope that in the

00:24:46,450 --> 00:24:48,880
future people aren't going to really

00:24:47,440 --> 00:24:50,020
think about strict mode anymore it's

00:24:48,880 --> 00:24:51,760
just going to be well there's some old

00:24:50,020 --> 00:24:54,880
code that's kind of sloppy in this what

00:24:51,760 --> 00:24:56,320
we call sloppy mood but but the vast

00:24:54,880 --> 00:24:57,820
majority of code will be in modules in

00:24:56,320 --> 00:25:01,930
their odd they'll automatically be

00:24:57,820 --> 00:25:04,570
strict okay so the last thing I want to

00:25:01,930 --> 00:25:07,150
talk about is hermeneutics this is no

00:25:04,570 --> 00:25:13,960
relation to my name it's named after the

00:25:07,150 --> 00:25:16,050
Greek god Hermes so hermeneutics is the

00:25:13,960 --> 00:25:17,740
philosophy of interpretation it's

00:25:16,050 --> 00:25:19,480
particularly was invented for

00:25:17,740 --> 00:25:21,910
understanding for talking about how do

00:25:19,480 --> 00:25:23,530
we understand texts and in the early

00:25:21,910 --> 00:25:27,330
days it was all about religious texts

00:25:23,530 --> 00:25:29,440
and in particular there's this idea that

00:25:27,330 --> 00:25:32,320
was introduced I think in the 20th

00:25:29,440 --> 00:25:35,500
century by Heidegger and then some some

00:25:32,320 --> 00:25:38,320
later philosophers like gadamer and Max

00:25:35,500 --> 00:25:40,840
Weber built on the idea called the

00:25:38,320 --> 00:25:43,180
hermeneutic circle so the idea of the

00:25:40,840 --> 00:25:44,590
hermeneutic circle you know again this

00:25:43,180 --> 00:25:46,900
stuff started out with textual

00:25:44,590 --> 00:25:48,250
interpretation but over time it started

00:25:46,900 --> 00:25:50,170
to be applied to how do we understand

00:25:48,250 --> 00:25:52,750
things in general and the idea was that

00:25:50,170 --> 00:25:53,950
if you're reading a book to understand

00:25:52,750 --> 00:25:56,290
the book you have to read the individual

00:25:53,950 --> 00:25:57,640
parts but then once you've read all of

00:25:56,290 --> 00:25:58,780
those individual parts you kind of get

00:25:57,640 --> 00:26:00,270
an understanding of the whole and you

00:25:58,780 --> 00:26:02,440
can start to interpret the whole book

00:26:00,270 --> 00:26:03,730
but once you've got this better

00:26:02,440 --> 00:26:05,320
interpretation of the book that would

00:26:03,730 --> 00:26:06,520
actually color how you read the part so

00:26:05,320 --> 00:26:08,590
you could go back and reread the book

00:26:06,520 --> 00:26:10,330
again and refine your understanding of

00:26:08,590 --> 00:26:12,210
the book and you can kind of go around

00:26:10,330 --> 00:26:17,010
and around in the circle and iteratively

00:26:12,210 --> 00:26:20,470
deepen your understanding of the text so

00:26:17,010 --> 00:26:21,970
this idea i think is very intuitive for

00:26:20,470 --> 00:26:27,130
us because we're used to iterate

00:26:21,970 --> 00:26:29,230
oppresses in software and in particular

00:26:27,130 --> 00:26:32,620
when it comes to designing web

00:26:29,230 --> 00:26:34,900
technology there's kind of an analog of

00:26:32,620 --> 00:26:37,210
that big picture small small picture

00:26:34,900 --> 00:26:38,610
that micro and macro the macro is that

00:26:37,210 --> 00:26:41,320
good design has to be motivated by

00:26:38,610 --> 00:26:42,880
end-to-end use cases and workflows we

00:26:41,320 --> 00:26:44,230
have to think about what does the the

00:26:42,880 --> 00:26:46,150
whole system look like what does the

00:26:44,230 --> 00:26:48,900
development model look like does this

00:26:46,150 --> 00:26:51,990
language feel good to program in

00:26:48,900 --> 00:26:53,340
what does a normal program look like but

00:26:51,990 --> 00:26:55,410
in order to actually build that

00:26:53,340 --> 00:26:57,720
programming model you have to design the

00:26:55,410 --> 00:26:59,790
individual pieces and anyone who spent

00:26:57,720 --> 00:27:01,380
time working in design learns that just

00:26:59,790 --> 00:27:03,000
like software you want to build things

00:27:01,380 --> 00:27:05,190
in small modular pieces little

00:27:03,000 --> 00:27:07,170
orthogonal composable pieces that you

00:27:05,190 --> 00:27:08,520
can fit together so if you take feature

00:27:07,170 --> 00:27:10,070
a and feature be and you put them

00:27:08,520 --> 00:27:13,860
together you don't get something

00:27:10,070 --> 00:27:17,760
unexpected they just work as the sort of

00:27:13,860 --> 00:27:19,860
expected combination of a and B so in

00:27:17,760 --> 00:27:21,540
the design process we can really go

00:27:19,860 --> 00:27:24,180
through that same harman dudek circle

00:27:21,540 --> 00:27:25,200
you design at the individual pieces for

00:27:24,180 --> 00:27:27,780
a while and then you have to evaluate

00:27:25,200 --> 00:27:29,880
the big picture and you have to go

00:27:27,780 --> 00:27:32,610
around the block multiple times I think

00:27:29,880 --> 00:27:34,410
this is just a feature of any learning

00:27:32,610 --> 00:27:35,940
process is that you're going to get it

00:27:34,410 --> 00:27:38,060
wrong in the beginning you're going to

00:27:35,940 --> 00:27:40,140
have to learn to throw some parts away

00:27:38,060 --> 00:27:41,940
and we understand this in software

00:27:40,140 --> 00:27:43,680
completely we talk about you know plan

00:27:41,940 --> 00:27:45,180
to throw one away we talk about move

00:27:43,680 --> 00:27:49,590
fast and break things we're all used to

00:27:45,180 --> 00:27:52,440
the idea of of changing our minds as we

00:27:49,590 --> 00:27:54,480
deepen our understanding of things so

00:27:52,440 --> 00:27:56,700
when you're developing a product we kind

00:27:54,480 --> 00:27:58,320
of have a pretty good handle on this you

00:27:56,700 --> 00:27:59,790
sort of have this iterative process

00:27:58,320 --> 00:28:01,920
where we develop the product for a while

00:27:59,790 --> 00:28:04,590
we ship it we get some user feedback we

00:28:01,920 --> 00:28:06,030
evaluate it and invariably it's not

00:28:04,590 --> 00:28:10,020
perfect and we go back around the block

00:28:06,030 --> 00:28:11,130
again and we refine our product but what

00:28:10,020 --> 00:28:13,500
happens when you try to do this with a

00:28:11,130 --> 00:28:15,210
standard there's a major problem you

00:28:13,500 --> 00:28:17,280
develop the standard for a while you

00:28:15,210 --> 00:28:19,800
ship it you evaluate it you get some

00:28:17,280 --> 00:28:21,750
developer feedback but now it's out

00:28:19,800 --> 00:28:24,210
there on the web and you'll break User

00:28:21,750 --> 00:28:26,700
Content if you change it and you can't

00:28:24,210 --> 00:28:28,320
break the web and you're stuck you go

00:28:26,700 --> 00:28:30,360
one time around the block and you can

00:28:28,320 --> 00:28:34,500
never change it again this is just a

00:28:30,360 --> 00:28:36,360
broken way for us to evolve the web

00:28:34,500 --> 00:28:38,250
because none of us is going to get it

00:28:36,360 --> 00:28:41,400
right the first time we're just not good

00:28:38,250 --> 00:28:43,800
enough so this is where this movement

00:28:41,400 --> 00:28:45,750
called the extensible web came from so

00:28:43,800 --> 00:28:47,250
if you go to if you google for

00:28:45,750 --> 00:28:50,040
extensible web manifesto you'll find

00:28:47,250 --> 00:28:51,900
this website and I'm one of the

00:28:50,040 --> 00:28:54,570
undersigned and the basic idea of the

00:28:51,900 --> 00:28:57,960
extensible web manifesto was we want to

00:28:54,570 --> 00:28:59,790
change the priorities of web standards

00:28:57,960 --> 00:29:01,140
and in particular we want to change them

00:28:59,790 --> 00:29:01,760
so that we can tighten that feedback

00:29:01,140 --> 00:29:03,860
loop

00:29:01,760 --> 00:29:05,300
between the editors of the web standards

00:29:03,860 --> 00:29:07,520
the ones who are actually creating these

00:29:05,300 --> 00:29:11,840
standards and the web developers who are

00:29:07,520 --> 00:29:15,980
the ones who are the best equipped to

00:29:11,840 --> 00:29:17,540
evaluate to evaluate the work and really

00:29:15,980 --> 00:29:20,480
should actually be directly involved in

00:29:17,540 --> 00:29:23,750
that work so this is this is where you

00:29:20,480 --> 00:29:25,340
come in this is the part where I want to

00:29:23,750 --> 00:29:28,510
encourage web developers to take an

00:29:25,340 --> 00:29:30,710
active role in evolving the web

00:29:28,510 --> 00:29:32,930
historically if you look at the

00:29:30,710 --> 00:29:35,930
conversations in standards it's

00:29:32,930 --> 00:29:37,640
completely dominated by people who work

00:29:35,930 --> 00:29:40,070
for browser vendors people like me and

00:29:37,640 --> 00:29:42,770
there's a few hardy developers who are

00:29:40,070 --> 00:29:45,110
willing to weather the storm of shouting

00:29:42,770 --> 00:29:46,790
matches on mailing lists and well why

00:29:45,110 --> 00:29:48,860
didn't you read the last three years of

00:29:46,790 --> 00:29:50,960
back messages on this topic before you

00:29:48,860 --> 00:29:52,130
came in and and ask that silly question

00:29:50,960 --> 00:29:54,290
that I've answered so many times before

00:29:52,130 --> 00:29:56,360
or you just don't understand what goes

00:29:54,290 --> 00:29:57,830
on in building a web browser or you

00:29:56,360 --> 00:30:00,890
missed a security constraint it's

00:29:57,830 --> 00:30:04,010
actually incredibly difficult to get up

00:30:00,890 --> 00:30:07,250
to speed on all of those things so we

00:30:04,010 --> 00:30:08,720
want to get to a world where there's

00:30:07,250 --> 00:30:10,790
more of a balance between browser

00:30:08,720 --> 00:30:13,040
vendors and web developers who are

00:30:10,790 --> 00:30:14,690
thinking about the web platform who are

00:30:13,040 --> 00:30:18,200
designing the web platform and evolving

00:30:14,690 --> 00:30:21,980
the web platform and I don't have

00:30:18,200 --> 00:30:25,970
answers for all of this I do see some

00:30:21,980 --> 00:30:27,890
culprits for what's not working in

00:30:25,970 --> 00:30:29,660
particular after eight years in this

00:30:27,890 --> 00:30:31,640
business I believe that mailing lists

00:30:29,660 --> 00:30:35,060
are a failed model of communication I

00:30:31,640 --> 00:30:36,530
don't think that they work I also think

00:30:35,060 --> 00:30:39,200
that arguing on twitter is a new failed

00:30:36,530 --> 00:30:41,000
model of communication I think that

00:30:39,200 --> 00:30:43,880
doesn't work either I think Twitter does

00:30:41,000 --> 00:30:45,140
have its place I've had a lot of good

00:30:43,880 --> 00:30:46,790
conversations where people just want a

00:30:45,140 --> 00:30:48,740
quick point of clarification it's an

00:30:46,790 --> 00:30:50,120
easier way to get sort of a targeted

00:30:48,740 --> 00:30:51,770
answer to something but as soon as

00:30:50,120 --> 00:30:53,900
people start disagreeing about something

00:30:51,770 --> 00:30:56,030
it is a horrible place to continue a

00:30:53,900 --> 00:30:58,280
conversation so I don't have all the

00:30:56,030 --> 00:31:02,030
answers I do think an important piece of

00:30:58,280 --> 00:31:05,720
this puzzle is github I think that well

00:31:02,030 --> 00:31:07,660
we're certainly seeing the w3c and to

00:31:05,720 --> 00:31:09,890
some degree tc39 there's more coming

00:31:07,660 --> 00:31:11,270
moving more and more of their work to

00:31:09,890 --> 00:31:12,620
get hub and I think that's important I

00:31:11,270 --> 00:31:13,940
think for ones are socially it's

00:31:12,620 --> 00:31:14,550
important it's the world where web

00:31:13,940 --> 00:31:16,470
developers

00:31:14,550 --> 00:31:18,240
and that's where you know you need to

00:31:16,470 --> 00:31:20,160
come to the turf of the people that you

00:31:18,240 --> 00:31:21,660
want to engage with but there's also

00:31:20,160 --> 00:31:23,130
some tools that I think work better it

00:31:21,660 --> 00:31:24,960
allows you to focus conversations a

00:31:23,130 --> 00:31:28,410
little bit better by having individual

00:31:24,960 --> 00:31:30,330
github issues instead of endless mailing

00:31:28,410 --> 00:31:31,980
list threads it helps you focus a little

00:31:30,330 --> 00:31:33,360
bit I certainly don't think github

00:31:31,980 --> 00:31:36,720
issues are a panacea I don't think

00:31:33,360 --> 00:31:39,600
they're perfect but I'm very much

00:31:36,720 --> 00:31:43,110
interested in improving the model of

00:31:39,600 --> 00:31:46,200
collaboration between web web browser

00:31:43,110 --> 00:31:47,430
vendors and web developers so I'd very

00:31:46,200 --> 00:31:50,970
much encourage anybody who's interested

00:31:47,430 --> 00:31:52,920
to talk to me and and just have some

00:31:50,970 --> 00:31:55,020
conversations about ways that we can do

00:31:52,920 --> 00:31:56,610
this better but i will say that there's

00:31:55,020 --> 00:31:59,730
something very concrete that I think all

00:31:56,610 --> 00:32:00,750
of you have the opportunity to do and I

00:31:59,730 --> 00:32:02,280
think really does change the

00:32:00,750 --> 00:32:03,510
conversation this is a phenomenon I've

00:32:02,280 --> 00:32:05,670
seen in the last couple of years and

00:32:03,510 --> 00:32:09,450
that is to actually take part in

00:32:05,670 --> 00:32:10,860
building polyfills and the variation of

00:32:09,450 --> 00:32:12,120
polyfills is prolly phils which is

00:32:10,860 --> 00:32:14,250
really probably the most relevant thing

00:32:12,120 --> 00:32:15,840
here for those of you who aren't

00:32:14,250 --> 00:32:17,790
familiar with the idea polyfill is

00:32:15,840 --> 00:32:19,680
simply a shim it's a library that

00:32:17,790 --> 00:32:22,910
implements a feature in case it's not

00:32:19,680 --> 00:32:25,710
there yet so it's filling a gap in

00:32:22,910 --> 00:32:28,560
what's currently deployed by a

00:32:25,710 --> 00:32:31,020
particular version of a browser a prolly

00:32:28,560 --> 00:32:33,090
Phil is the same idea except it's

00:32:31,020 --> 00:32:35,430
applied to a proposed library that

00:32:33,090 --> 00:32:38,700
hasn't yet been standardized so if you

00:32:35,430 --> 00:32:39,990
want to demonstrate what a feature might

00:32:38,700 --> 00:32:42,510
look like a feature that you're

00:32:39,990 --> 00:32:43,890
proposing you can build a sort of

00:32:42,510 --> 00:32:46,800
candidate polyfill and that's what

00:32:43,890 --> 00:32:48,600
people call prolly fills but the other

00:32:46,800 --> 00:32:50,550
half is building compilers so if you're

00:32:48,600 --> 00:32:53,910
interested in new language features you

00:32:50,550 --> 00:32:55,560
can build you can either take one of the

00:32:53,910 --> 00:32:58,530
existing compilers such as Google's

00:32:55,560 --> 00:33:00,630
tracer or there's a handful of

00:32:58,530 --> 00:33:03,000
individual features for es6 that are

00:33:00,630 --> 00:33:05,070
being built as individual compilers and

00:33:03,000 --> 00:33:06,330
over time people are starting to figure

00:33:05,070 --> 00:33:08,730
out ways that they can put those

00:33:06,330 --> 00:33:11,130
together so if you actually look at

00:33:08,730 --> 00:33:12,930
participating in those you actually are

00:33:11,130 --> 00:33:14,880
becoming a kind of browser vendor of

00:33:12,930 --> 00:33:17,040
your own you're basically becoming an

00:33:14,880 --> 00:33:19,590
implementer of a feature and you will

00:33:17,040 --> 00:33:21,030
have a level of depth of insight that

00:33:19,590 --> 00:33:22,410
actually many of the browser vendors who

00:33:21,030 --> 00:33:24,330
haven't gone through the exercise of

00:33:22,410 --> 00:33:26,340
building the future don't and you will

00:33:24,330 --> 00:33:28,080
find that you're able to have very high

00:33:26,340 --> 00:33:29,700
value conversations

00:33:28,080 --> 00:33:32,279
with other people involved in standards

00:33:29,700 --> 00:33:33,330
so I just want to give a couple of shout

00:33:32,279 --> 00:33:35,100
outs to people who have done a fantastic

00:33:33,330 --> 00:33:36,929
job of this so far because I think

00:33:35,100 --> 00:33:39,510
they're models that we want to follow so

00:33:36,929 --> 00:33:42,450
one of those is ben newman who has built

00:33:39,510 --> 00:33:46,950
a tool called regenerator which is an

00:33:42,450 --> 00:33:49,590
es6 generator compiler another group of

00:33:46,950 --> 00:33:51,630
people I think three of the leaders of

00:33:49,590 --> 00:33:53,549
the project are are Brian Donovan

00:33:51,630 --> 00:33:55,500
Jhoulys and Thomas Boyd but there's

00:33:53,549 --> 00:33:57,899
actually 16 contributors listed on the

00:33:55,500 --> 00:34:00,149
github repo this is for the es6 module

00:33:57,899 --> 00:34:02,850
transpiler so these are people who are

00:34:00,149 --> 00:34:04,380
actually engaging with the standards as

00:34:02,850 --> 00:34:06,210
they're going they're there they're

00:34:04,380 --> 00:34:08,429
working with us together as

00:34:06,210 --> 00:34:10,589
collaborators and they're finding that

00:34:08,429 --> 00:34:12,270
in this process they're actually getting

00:34:10,589 --> 00:34:14,550
brought into the conversation because

00:34:12,270 --> 00:34:17,070
they have as much or more valuable

00:34:14,550 --> 00:34:20,760
feedback to give as the people who are

00:34:17,070 --> 00:34:22,770
building the browsers so the TLDR of the

00:34:20,760 --> 00:34:23,970
extensible web is if they're missing

00:34:22,770 --> 00:34:25,589
primitives in the platform we've got a

00:34:23,970 --> 00:34:26,730
priority to prioritize those first

00:34:25,589 --> 00:34:29,190
because those primitives are what you

00:34:26,730 --> 00:34:30,869
use to build these polyfills prolly

00:34:29,190 --> 00:34:33,659
fills and compilers on top of them and

00:34:30,869 --> 00:34:35,280
then from there we enable evolution to

00:34:33,659 --> 00:34:38,580
happen out in user land we enable

00:34:35,280 --> 00:34:40,919
evolution to happen in JavaScript

00:34:38,580 --> 00:34:44,940
implementations of language features or

00:34:40,919 --> 00:34:46,740
sorry of library features or pre

00:34:44,940 --> 00:34:48,419
compilers that compile language features

00:34:46,740 --> 00:34:51,690
and then we can work together both

00:34:48,419 --> 00:34:55,440
browser vendors and web developers to

00:34:51,690 --> 00:34:57,750
actually together design the web that we

00:34:55,440 --> 00:35:00,440
want to see and that's all I have to say

00:34:57,750 --> 00:35:00,440

YouTube URL: https://www.youtube.com/watch?v=hMXkLgXZzS4


