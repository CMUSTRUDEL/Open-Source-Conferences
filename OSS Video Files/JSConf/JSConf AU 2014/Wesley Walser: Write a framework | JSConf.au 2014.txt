Title: Wesley Walser: Write a framework | JSConf.au 2014
Publication date: 2014-12-01
Playlist: JSConf AU 2014
Description: 
	
Captions: 
	00:00:05,470 --> 00:00:11,209
about the fact or the idea at least to

00:00:08,750 --> 00:00:15,049
start a conversation about you writing a

00:00:11,209 --> 00:00:17,300
framework I'm Wes I write JavaScript

00:00:15,049 --> 00:00:21,230
atlassian there's a twitter handle but

00:00:17,300 --> 00:00:23,960
not really much happens there the i

00:00:21,230 --> 00:00:25,280
guess the premise is that whether you

00:00:23,960 --> 00:00:26,600
write something that's micro or

00:00:25,280 --> 00:00:28,550
monolithic something that's supposed to

00:00:26,600 --> 00:00:30,740
handle something very small or handle

00:00:28,550 --> 00:00:36,140
things that are really big i think that

00:00:30,740 --> 00:00:38,989
you can make some lives easier so first

00:00:36,140 --> 00:00:43,999
i think it's useful to define framework

00:00:38,989 --> 00:00:46,609
for the sake of the talk wikipedia for a

00:00:43,999 --> 00:00:48,109
long time helpfully define framework the

00:00:46,609 --> 00:00:50,870
word framework in the programming

00:00:48,109 --> 00:00:53,239
context as a buzzword so that didn't

00:00:50,870 --> 00:00:54,559
help but actually over the last about a

00:00:53,239 --> 00:00:56,749
year and a half there's been a really

00:00:54,559 --> 00:00:58,789
sort of healthy debate around what

00:00:56,749 --> 00:01:00,579
pieces of things make up a framework or

00:00:58,789 --> 00:01:04,010
what differentiates a framework from

00:01:00,579 --> 00:01:07,000
libraries or api's I'm not going to use

00:01:04,010 --> 00:01:10,659
that frame that that definition strictly

00:01:07,000 --> 00:01:15,610
but what I do want to talk about is

00:01:10,659 --> 00:01:18,079
sorry just to say the idea of taking

00:01:15,610 --> 00:01:20,000
moving from a place where as app

00:01:18,079 --> 00:01:21,950
application developers we think about

00:01:20,000 --> 00:01:24,439
our apps as our app and the whole code

00:01:21,950 --> 00:01:26,270
is our appt to thinking about how we can

00:01:24,439 --> 00:01:28,460
up level things to be sort of a level up

00:01:26,270 --> 00:01:30,590
out from our app and be sort of upstream

00:01:28,460 --> 00:01:33,229
from us and our app doesn't change that

00:01:30,590 --> 00:01:35,479
code our app maybe hand stuff to that

00:01:33,229 --> 00:01:38,420
code and it handles maybe control flow

00:01:35,479 --> 00:01:41,329
or something for us or it it helps us

00:01:38,420 --> 00:01:43,700
out in some way but it's above the app

00:01:41,329 --> 00:01:47,450
so the app doesn't sort of modify its

00:01:43,700 --> 00:01:50,000
internals so basically going from one

00:01:47,450 --> 00:01:51,920
big app to having something upstream

00:01:50,000 --> 00:01:54,500
from us I'm going to talk about how we

00:01:51,920 --> 00:01:56,000
can begin thinking about doing that and

00:01:54,500 --> 00:01:57,530
I know they're certainly people here

00:01:56,000 --> 00:02:00,979
already doing that but I want to talk

00:01:57,530 --> 00:02:02,840
about and encourage you to if you're not

00:02:00,979 --> 00:02:04,219
already to start doing that and what

00:02:02,840 --> 00:02:06,979
sort of things I think about when I'm

00:02:04,219 --> 00:02:10,789
going through that process and how I

00:02:06,979 --> 00:02:12,770
think it helps helps you up level as a

00:02:10,789 --> 00:02:17,050
developer

00:02:12,770 --> 00:02:20,210
and so yeah it's there's nothing I guess

00:02:17,050 --> 00:02:26,210
about my definition that differentiates

00:02:20,210 --> 00:02:29,450
you from from an API or from libraries

00:02:26,210 --> 00:02:31,010
except that whatever that layer is it's

00:02:29,450 --> 00:02:33,740
something that may encapsulate multiple

00:02:31,010 --> 00:02:38,590
things and then expose a single API to

00:02:33,740 --> 00:02:40,520
itself again the Wikipedia article

00:02:38,590 --> 00:02:43,160
insinuates that there must be some

00:02:40,520 --> 00:02:45,890
inversion of control right where the

00:02:43,160 --> 00:02:47,360
framework handles lifecycle I don't

00:02:45,890 --> 00:02:48,980
think that's necessary right out of the

00:02:47,360 --> 00:02:50,710
gate as you begin pulling components out

00:02:48,980 --> 00:02:53,410
of your app and putting them up stream

00:02:50,710 --> 00:02:55,370
what I think is important is that

00:02:53,410 --> 00:02:57,320
whenever you take those components

00:02:55,370 --> 00:02:59,930
libraries or interfaces you put them all

00:02:57,320 --> 00:03:03,740
inside of a container and then interface

00:02:59,930 --> 00:03:07,340
only with that container so that's the

00:03:03,740 --> 00:03:11,300
definition I'm going with for now so

00:03:07,340 --> 00:03:12,710
yeah why what should you why should you

00:03:11,300 --> 00:03:14,030
framework what should you framework how

00:03:12,710 --> 00:03:16,730
should you go about it how do you think

00:03:14,030 --> 00:03:19,430
when you're writing framework code and

00:03:16,730 --> 00:03:21,560
then I'll do a little I think advocacy

00:03:19,430 --> 00:03:23,140
around the Java JavaScript community

00:03:21,560 --> 00:03:25,730
specifically because I think we're

00:03:23,140 --> 00:03:29,540
positioned in an interesting place right

00:03:25,730 --> 00:03:32,090
now so work for atlassian atlassian

00:03:29,540 --> 00:03:34,940
rights I think about eight different

00:03:32,090 --> 00:03:39,200
applications all but two of them are

00:03:34,940 --> 00:03:41,390
just big java applications and whenever

00:03:39,200 --> 00:03:42,740
you read Java code and one of the sort

00:03:41,390 --> 00:03:43,970
of interesting transitions that I had

00:03:42,740 --> 00:03:45,800
when I came to the company I was in a

00:03:43,970 --> 00:03:47,840
place with a lamp stack before that I

00:03:45,800 --> 00:03:49,340
was very comfortable if I met a bug that

00:03:47,840 --> 00:03:51,260
could potentially be in the framework

00:03:49,340 --> 00:03:54,770
level with just walking the stack trace

00:03:51,260 --> 00:03:56,480
up to that point and you know modifying

00:03:54,770 --> 00:03:58,340
it if I needed to or understanding that

00:03:56,480 --> 00:04:00,770
abstraction better whereas JavaScript

00:03:58,340 --> 00:04:02,810
avada developers tend to really trust

00:04:00,770 --> 00:04:07,760
their abstractions and I think that

00:04:02,810 --> 00:04:10,820
that's in some part due to the maturity

00:04:07,760 --> 00:04:11,959
of that of that group but it's also

00:04:10,820 --> 00:04:13,310
something that I think the JavaScript

00:04:11,959 --> 00:04:17,390
community is getting to a place where it

00:04:13,310 --> 00:04:20,989
could be it that comfortable as well so

00:04:17,390 --> 00:04:22,760
and in in a recent project I've been

00:04:20,989 --> 00:04:26,120
writing what is essentially a single

00:04:22,760 --> 00:04:27,229
page app and if you go

00:04:26,120 --> 00:04:29,169
to the server the only thing that's

00:04:27,229 --> 00:04:31,669
really there is a REST API for

00:04:29,169 --> 00:04:33,710
persistence you know we're using we're

00:04:31,669 --> 00:04:34,790
using the server to persist data the

00:04:33,710 --> 00:04:37,130
client is doing most of the heavy

00:04:34,790 --> 00:04:39,380
lifting for business logic and whenever

00:04:37,130 --> 00:04:42,020
you look at the rest endpoints for this

00:04:39,380 --> 00:04:47,470
application if you go to look at one

00:04:42,020 --> 00:04:56,350
specifically you'll get to a place where

00:04:47,470 --> 00:05:01,610
another sex sorry okay there we go

00:04:56,350 --> 00:05:03,590
you'll get to a place where the um where

00:05:01,610 --> 00:05:05,630
the rest in point is implemented and in

00:05:03,590 --> 00:05:07,130
the comment above that method it's just

00:05:05,630 --> 00:05:09,889
going to be a method and in the comment

00:05:07,130 --> 00:05:12,110
above it there will be a part of the

00:05:09,889 --> 00:05:13,370
comment that tells you it's an

00:05:12,110 --> 00:05:16,490
annotation and it will tell you exactly

00:05:13,370 --> 00:05:18,560
the route that is required for an HTTP

00:05:16,490 --> 00:05:20,210
request to invoke that method and then

00:05:18,560 --> 00:05:23,539
the parameters to that method are going

00:05:20,210 --> 00:05:25,639
to be the get or post parameters that

00:05:23,539 --> 00:05:27,800
are sent as a part of that call and then

00:05:25,639 --> 00:05:29,419
the return value is just an a Java

00:05:27,800 --> 00:05:32,030
object there's nothing special about it

00:05:29,419 --> 00:05:34,570
and all the serialization d civilization

00:05:32,030 --> 00:05:37,190
all the parts of an HTTP request headers

00:05:34,570 --> 00:05:39,139
cookies sessions all that's just handled

00:05:37,190 --> 00:05:41,360
for you and it's hidden from you and you

00:05:39,139 --> 00:05:42,770
just trust it and it works and so you

00:05:41,360 --> 00:05:44,030
see things like this and you think man

00:05:42,770 --> 00:05:45,080
frameworks are really useful so you go

00:05:44,030 --> 00:05:46,669
back to your JavaScript friends and

00:05:45,080 --> 00:05:48,410
you're like frameworks we're gonna write

00:05:46,669 --> 00:05:50,930
a framework and they kind of look at you

00:05:48,410 --> 00:05:53,169
like framework and I think that

00:05:50,930 --> 00:05:56,630
JavaScript developers so far have been

00:05:53,169 --> 00:05:58,849
really skeptical of frameworks it's no

00:05:56,630 --> 00:06:01,270
accident that backbone is so popular

00:05:58,849 --> 00:06:04,520
it's it's popular because it's simple

00:06:01,270 --> 00:06:07,490
it's also no accident that just huge

00:06:04,520 --> 00:06:09,889
parts of huge numbers of Java JavaScript

00:06:07,490 --> 00:06:12,050
developers have this death grip on

00:06:09,889 --> 00:06:15,470
jQuery as the thing that they're going

00:06:12,050 --> 00:06:17,180
to use in their framework it's because

00:06:15,470 --> 00:06:18,889
you can go and read a hundred percent of

00:06:17,180 --> 00:06:20,690
that code you can go and understand all

00:06:18,889 --> 00:06:21,560
of it really really easily and it's

00:06:20,690 --> 00:06:25,160
because they don't trust their

00:06:21,560 --> 00:06:27,470
abstractions so why do I think we should

00:06:25,160 --> 00:06:30,110
move beyond that and begin building

00:06:27,470 --> 00:06:31,970
either bigger pieces of things and trust

00:06:30,110 --> 00:06:36,409
that code to handle a lot of the major

00:06:31,970 --> 00:06:37,849
repetition pieces for us I'm going to go

00:06:36,409 --> 00:06:39,280
with sort of a soft argument and then a

00:06:37,849 --> 00:06:43,940
hard argument

00:06:39,280 --> 00:06:46,160
so and hackers and painters Paul Graham

00:06:43,940 --> 00:06:50,360
encourages this encourages us to think

00:06:46,160 --> 00:06:54,440
of our trade as a craft and to consider

00:06:50,360 --> 00:06:57,890
our code art and to take on that art and

00:06:54,440 --> 00:06:59,690
to consider ourselves artists to take on

00:06:57,890 --> 00:07:02,710
the hard decisions in the the trade-offs

00:06:59,690 --> 00:07:07,550
and treat them as things that have

00:07:02,710 --> 00:07:11,480
subtlety to them another artist Kurt

00:07:07,550 --> 00:07:13,640
Vonnegut was written to by a primary

00:07:11,480 --> 00:07:16,340
school classroom and they were asking

00:07:13,640 --> 00:07:17,900
essentially had a how to be awesome like

00:07:16,340 --> 00:07:19,400
he is I don't know what they asked but

00:07:17,900 --> 00:07:21,710
they asked something and he writes back

00:07:19,400 --> 00:07:23,390
to them which is pretty cool and his

00:07:21,710 --> 00:07:26,420
advice is essentially to just practice

00:07:23,390 --> 00:07:29,210
any art whatever your art is to practice

00:07:26,420 --> 00:07:32,030
it no matter how well or badly you're

00:07:29,210 --> 00:07:34,250
going to go at it to practice it and his

00:07:32,030 --> 00:07:37,970
main advocacy is to do it for the sake

00:07:34,250 --> 00:07:39,950
of the experience of becoming not to not

00:07:37,970 --> 00:07:43,700
to put it on github for the world to

00:07:39,950 --> 00:07:46,670
consume but just to experience becoming

00:07:43,700 --> 00:07:49,040
just a little better at that thing he

00:07:46,670 --> 00:07:50,680
goes so far as to advocate that you tear

00:07:49,040 --> 00:07:53,420
it up right after you're done with it

00:07:50,680 --> 00:07:54,830
like I said I think for a lot of us that

00:07:53,420 --> 00:07:57,290
looks like putting it up on github you

00:07:54,830 --> 00:08:01,880
know there's the bin or the whole world

00:07:57,290 --> 00:08:04,250
can view it whatever so that's that's

00:08:01,880 --> 00:08:05,510
the soft side right that's the I think

00:08:04,250 --> 00:08:08,330
you should do this in order to practice

00:08:05,510 --> 00:08:10,070
there's also like much more pragmatic

00:08:08,330 --> 00:08:12,860
matters which is I think it makes you a

00:08:10,070 --> 00:08:15,140
better developer so application

00:08:12,860 --> 00:08:16,760
developers in my experience and as an

00:08:15,140 --> 00:08:18,530
app developer mice like it someone who

00:08:16,760 --> 00:08:20,420
writes is concerned with applications on

00:08:18,530 --> 00:08:22,880
a regular basis myself I'm very

00:08:20,420 --> 00:08:25,520
interested in how to make my box

00:08:22,880 --> 00:08:27,560
transparent and how to fit that cat into

00:08:25,520 --> 00:08:29,090
the box and how to get that to the

00:08:27,560 --> 00:08:32,150
market and how the market is going to

00:08:29,090 --> 00:08:33,620
respond to that cat in that box and as a

00:08:32,150 --> 00:08:34,940
framework developer I think you have to

00:08:33,620 --> 00:08:36,950
think about how you're going to build a

00:08:34,940 --> 00:08:38,930
system that is going to make transparent

00:08:36,950 --> 00:08:40,820
or opaque boxes depending on what the

00:08:38,930 --> 00:08:44,780
people using it need and how it's going

00:08:40,820 --> 00:08:47,420
to fit any sized object so it teaches us

00:08:44,780 --> 00:08:50,110
how to be intentional about the edges

00:08:47,420 --> 00:08:52,329
that we expose to the rest of the world

00:08:50,110 --> 00:08:56,110
applications tend to

00:08:52,329 --> 00:08:57,730
be built with concerns separated but

00:08:56,110 --> 00:09:01,149
then as you go about writing them you

00:08:57,730 --> 00:09:03,790
end up using the things so each of these

00:09:01,149 --> 00:09:08,829
objects expose a number of AP is and

00:09:03,790 --> 00:09:10,869
they basically serve one concern but all

00:09:08,829 --> 00:09:12,249
the other pieces need to interoperate

00:09:10,869 --> 00:09:14,410
with those concerns and so you end up

00:09:12,249 --> 00:09:20,139
with an undirected ace of the graph of

00:09:14,410 --> 00:09:21,850
objects and I think that in writing

00:09:20,139 --> 00:09:23,439
frameworks in learning how to think

00:09:21,850 --> 00:09:25,179
about writing a framework you sort of

00:09:23,439 --> 00:09:28,509
uplevel into thinking about how you can

00:09:25,179 --> 00:09:30,910
better encapsulate those concerns so in

00:09:28,509 --> 00:09:32,980
an app integration can be tight because

00:09:30,910 --> 00:09:36,069
there's only one instance of this thing

00:09:32,980 --> 00:09:37,360
in the world and when a feature needs to

00:09:36,069 --> 00:09:39,069
be implemented and this is where some of

00:09:37,360 --> 00:09:41,170
those extra lines come from whenever a

00:09:39,069 --> 00:09:43,689
new feature needs to be implemented you

00:09:41,170 --> 00:09:47,350
just add one more connection right you

00:09:43,689 --> 00:09:49,209
just add one more line in order to eke

00:09:47,350 --> 00:09:51,519
out that one new thing you want it to do

00:09:49,209 --> 00:09:55,329
and you stretch the limits of your

00:09:51,519 --> 00:09:57,699
originally intended boundaries and I

00:09:55,329 --> 00:10:00,129
think that in learning to move things

00:09:57,699 --> 00:10:03,129
upstream from ourselves we'll learn how

00:10:00,129 --> 00:10:05,049
to go about taking those separated

00:10:03,129 --> 00:10:07,600
objects and packaging them up and then

00:10:05,049 --> 00:10:12,459
from that package of objects exposing

00:10:07,600 --> 00:10:15,399
one coherent API I think that it teaches

00:10:12,459 --> 00:10:19,749
us also how to go into this process with

00:10:15,399 --> 00:10:22,949
eyes open about how what we expose will

00:10:19,749 --> 00:10:25,569
affect those that consume the framework

00:10:22,949 --> 00:10:26,889
so I guess this is I don't I didn't put

00:10:25,569 --> 00:10:28,929
a lot of thought into what each of these

00:10:26,889 --> 00:10:30,639
things says but I suppose if you were

00:10:28,929 --> 00:10:33,989
building if you were a company that was

00:10:30,639 --> 00:10:37,059
concerned with sending email well and

00:10:33,989 --> 00:10:38,649
you always wanted your email to generate

00:10:37,059 --> 00:10:40,179
statistics so that your customers could

00:10:38,649 --> 00:10:42,189
come look at when it was sent and when

00:10:40,179 --> 00:10:43,600
it was opened and all that you would

00:10:42,189 --> 00:10:45,339
have something that looks something like

00:10:43,600 --> 00:10:47,079
this and if you built a framework out of

00:10:45,339 --> 00:10:49,299
this and expose those things to the

00:10:47,079 --> 00:10:50,829
world and then someone wanted to send an

00:10:49,299 --> 00:10:52,329
email without tracking it you know maybe

00:10:50,829 --> 00:10:53,589
that would be a problem I don't know

00:10:52,329 --> 00:10:56,259
because you've expressed that opinion

00:10:53,589 --> 00:10:58,149
write the opinion being that messages

00:10:56,259 --> 00:11:01,660
when they're sent get statistics

00:10:58,149 --> 00:11:03,490
attached to them but that's that's the

00:11:01,660 --> 00:11:04,790
eyes open part that's where you go in

00:11:03,490 --> 00:11:08,160
knowing

00:11:04,790 --> 00:11:09,989
if i make you know i can either make

00:11:08,160 --> 00:11:11,850
generating statistics really easy for

00:11:09,989 --> 00:11:13,889
everyone who uses my framework or i can

00:11:11,850 --> 00:11:15,720
add make them do a little more work and

00:11:13,889 --> 00:11:17,790
then anyone who uses this framework can

00:11:15,720 --> 00:11:20,699
send it with or without statistics so

00:11:17,790 --> 00:11:24,479
those are the sorts of trade-offs that I

00:11:20,699 --> 00:11:28,859
think make this into an art so what what

00:11:24,479 --> 00:11:30,539
to framework so I'm standing on stage in

00:11:28,859 --> 00:11:32,609
front of a room full of JavaScript

00:11:30,539 --> 00:11:36,299
developers and JavaScript frameworks

00:11:32,609 --> 00:11:38,669
there are a few of those they've been

00:11:36,299 --> 00:11:40,289
around for a while and I'm not

00:11:38,669 --> 00:11:42,600
advocating that you build a new

00:11:40,289 --> 00:11:45,869
framework to build web applications I

00:11:42,600 --> 00:11:47,579
think that's been done in a pretty good

00:11:45,869 --> 00:11:50,279
article defending not invented here

00:11:47,579 --> 00:11:53,939
syndrome Joel sapolsky says that you

00:11:50,279 --> 00:11:55,470
should reinvent things even if they've

00:11:53,939 --> 00:11:57,989
been invented you should reinvent them

00:11:55,470 --> 00:11:59,999
if it's something that differentiates

00:11:57,989 --> 00:12:02,100
your application from the rest of the

00:11:59,999 --> 00:12:03,959
applications in the world if that's your

00:12:02,100 --> 00:12:06,419
defining factor if it's what makes you

00:12:03,959 --> 00:12:08,429
in the market you should probably

00:12:06,419 --> 00:12:11,069
reinvent it because chances are you're

00:12:08,429 --> 00:12:14,789
very concerned with doing it better than

00:12:11,069 --> 00:12:16,350
anyone else so if you're at an org that

00:12:14,789 --> 00:12:18,749
because of the industry you're in needs

00:12:16,350 --> 00:12:20,309
to send faxes you know maybe you write a

00:12:18,749 --> 00:12:22,769
framework that makes all the apps that

00:12:20,309 --> 00:12:25,350
send faxes do it in the same way right

00:12:22,769 --> 00:12:27,449
if you're sending email similarly maybe

00:12:25,350 --> 00:12:32,039
you really want how you send email to be

00:12:27,449 --> 00:12:33,209
done better and again since I'm not

00:12:32,039 --> 00:12:35,339
using the inversion of control

00:12:33,209 --> 00:12:37,499
definition of framework I don't want you

00:12:35,339 --> 00:12:39,499
to be too concerned with when you up

00:12:37,499 --> 00:12:41,789
level things when you push them upstream

00:12:39,499 --> 00:12:44,789
about whether or not they need to handle

00:12:41,789 --> 00:12:46,230
the whole lifecycle of your app and I

00:12:44,789 --> 00:12:48,329
think that that actually comes out in

00:12:46,230 --> 00:12:50,669
reality a lot of really great frameworks

00:12:48,329 --> 00:12:52,679
have come out of individual products

00:12:50,669 --> 00:12:55,169
where the creator of that product began

00:12:52,679 --> 00:12:56,519
to slowly pull library after library out

00:12:55,169 --> 00:12:59,339
of their product and into something

00:12:56,519 --> 00:13:01,019
upstream and that eventually that that

00:12:59,339 --> 00:13:02,939
thing that they were building upstream

00:13:01,019 --> 00:13:06,259
from their app became a framework and

00:13:02,939 --> 00:13:08,579
began to take on control of the sort of

00:13:06,259 --> 00:13:11,269
operational control of how the app runs

00:13:08,579 --> 00:13:15,329
and became sort of sovereign

00:13:11,269 --> 00:13:17,510
full-fledged frameworks so don't be i

00:13:15,329 --> 00:13:18,830
guess don't be allowed don't be

00:13:17,510 --> 00:13:20,510
learned about letting things build

00:13:18,830 --> 00:13:25,040
organically and pulling more more stuff

00:13:20,510 --> 00:13:28,250
into your upstream so how'd it go about

00:13:25,040 --> 00:13:31,220
building a framework I'll talk this

00:13:28,250 --> 00:13:34,630
isn't I'm not about to go on a tutorial

00:13:31,220 --> 00:13:36,920
for how to build frameworks but I will

00:13:34,630 --> 00:13:39,320
go through some practical steps that I

00:13:36,920 --> 00:13:41,240
find myself thinking about when sort of

00:13:39,320 --> 00:13:52,430
trying to pull things upstream from my

00:13:41,240 --> 00:13:54,260
application so I guess consider which

00:13:52,430 --> 00:13:56,240
pieces of code our framework in which

00:13:54,260 --> 00:14:02,480
are downstream from your from that

00:13:56,240 --> 00:14:05,690
framework oh sorry I'm going to start

00:14:02,480 --> 00:14:07,490
with reading code so I'm going to talk

00:14:05,690 --> 00:14:09,080
about reading other frameworks and how I

00:14:07,490 --> 00:14:11,180
think that's a good practice to learn

00:14:09,080 --> 00:14:14,660
how to think in sort of framework level

00:14:11,180 --> 00:14:17,060
terms then it's deciding what to pull up

00:14:14,660 --> 00:14:20,960
stream and what to push downstream so

00:14:17,060 --> 00:14:23,630
what to push on to implementers and what

00:14:20,960 --> 00:14:26,210
to pull into a framework and then I'll

00:14:23,630 --> 00:14:29,240
talk about how that decision has to be

00:14:26,210 --> 00:14:30,860
gone into with with intention and

00:14:29,240 --> 00:14:32,360
knowing that you're making trade-offs

00:14:30,860 --> 00:14:34,280
and knowing that you're making decisions

00:14:32,360 --> 00:14:37,360
about the complexity that either you'll

00:14:34,280 --> 00:14:42,220
take on or your consumers will take on

00:14:37,360 --> 00:14:44,930
so you should read a lot of code that's

00:14:42,220 --> 00:14:46,880
probably just generic advice across all

00:14:44,930 --> 00:14:49,040
programmers if you want to become better

00:14:46,880 --> 00:14:53,240
you read lots and lots and lots of other

00:14:49,040 --> 00:14:58,580
people's code I would assume that though

00:14:53,240 --> 00:15:02,420
that I get paid to output new features

00:14:58,580 --> 00:15:04,070
and new programs in to fix bugs actually

00:15:02,420 --> 00:15:05,420
spend a larger portion of time reading

00:15:04,070 --> 00:15:07,520
other people's code than I do out

00:15:05,420 --> 00:15:09,110
putting my own and in reading framework

00:15:07,520 --> 00:15:11,270
code you're going to wet out every now

00:15:09,110 --> 00:15:12,650
and then it's going to be a little

00:15:11,270 --> 00:15:14,960
confusing here and there because

00:15:12,650 --> 00:15:16,790
framework developers do crazy stuff in

00:15:14,960 --> 00:15:19,850
order to sort of automatically connect

00:15:16,790 --> 00:15:21,140
things that are just named similarly

00:15:19,850 --> 00:15:24,620
right like they're going to concatenate

00:15:21,140 --> 00:15:26,510
that function name with this other

00:15:24,620 --> 00:15:28,430
function name and then use them as an

00:15:26,510 --> 00:15:31,370
array look up in this hash that contains

00:15:28,430 --> 00:15:32,930
methods and call invoke that

00:15:31,370 --> 00:15:34,760
the function that is the concatenation

00:15:32,930 --> 00:15:37,190
of those two things that a user passed

00:15:34,760 --> 00:15:41,870
in in order to connect you know the

00:15:37,190 --> 00:15:44,210
route to the controller and but I guess

00:15:41,870 --> 00:15:46,160
the point being that wedding out when

00:15:44,210 --> 00:15:48,290
you are reading framework code is rarely

00:15:46,160 --> 00:15:53,000
the result of bad code it's often an

00:15:48,290 --> 00:15:55,150
opportunity to learn something it's

00:15:53,000 --> 00:15:58,460
often doing something pretty cool

00:15:55,150 --> 00:16:01,190
reading the dependency injection stuff

00:15:58,460 --> 00:16:03,350
in angular can kind of do your head in

00:16:01,190 --> 00:16:07,640
but it's pretty sweet when you realize

00:16:03,350 --> 00:16:09,560
what all the pieces are doing if it's

00:16:07,640 --> 00:16:12,589
actually bad code just remember

00:16:09,560 --> 00:16:14,810
everyone's every bad idea was someone's

00:16:12,589 --> 00:16:16,490
good idea and it was more likely a

00:16:14,810 --> 00:16:18,650
compromise this is just generically

00:16:16,490 --> 00:16:19,520
truer across all all programming right

00:16:18,650 --> 00:16:21,380
when you're reading someone else's

00:16:19,520 --> 00:16:23,180
garbage code it's because they had to

00:16:21,380 --> 00:16:24,290
make trade-offs right they needed to get

00:16:23,180 --> 00:16:27,020
it out the door on time where they

00:16:24,290 --> 00:16:29,540
needed to to shim that thing into a

00:16:27,020 --> 00:16:30,740
system that already existed if you're

00:16:29,540 --> 00:16:32,210
going to read code if you're going to

00:16:30,740 --> 00:16:34,250
read framework level code for the first

00:16:32,210 --> 00:16:36,860
time backbone is just an amazing place

00:16:34,250 --> 00:16:38,300
to start I wasn't trashing it earlier

00:16:36,860 --> 00:16:40,400
when I said that it's popular because

00:16:38,300 --> 00:16:42,410
it's simple it's great because it's

00:16:40,400 --> 00:16:43,670
simple it's simple it's also a great

00:16:42,410 --> 00:16:47,120
place to start if you're just starting

00:16:43,670 --> 00:16:48,620
out in reading framework code if if

00:16:47,120 --> 00:16:52,760
you're comfortable with the language and

00:16:48,620 --> 00:16:53,930
you're comfortable reading sort of if

00:16:52,760 --> 00:16:57,470
you've read frameworks and other

00:16:53,930 --> 00:16:59,260
languages you can have a really good

00:16:57,470 --> 00:17:01,850
reading of backbone in a single sitting

00:16:59,260 --> 00:17:03,200
like an honest I really understand

00:17:01,850 --> 00:17:05,300
everything that's going on and why these

00:17:03,200 --> 00:17:07,880
pieces exist in about probably three

00:17:05,300 --> 00:17:09,230
hours if you're new the language you're

00:17:07,880 --> 00:17:11,030
slightly uncomfortable with it or you've

00:17:09,230 --> 00:17:13,459
never read frameworks before it's really

00:17:11,030 --> 00:17:15,079
easy to set up to split up into

00:17:13,459 --> 00:17:18,439
conceptual pieces and read each one a

00:17:15,079 --> 00:17:20,059
night for four or five nights make sure

00:17:18,439 --> 00:17:22,459
you're reading the annotated source the

00:17:20,059 --> 00:17:25,429
authors were super intentional about how

00:17:22,459 --> 00:17:27,050
they come at their code and how they go

00:17:25,429 --> 00:17:30,370
about documenting it so that you can

00:17:27,050 --> 00:17:33,470
understand each chunk so that's reading

00:17:30,370 --> 00:17:35,809
next we'll talk about how you or how I

00:17:33,470 --> 00:17:37,160
think what sort of types of things I

00:17:35,809 --> 00:17:40,130
think about when I think about pushing

00:17:37,160 --> 00:17:43,160
things upstream from my app so this is

00:17:40,130 --> 00:17:44,710
the this is a well-understood model if

00:17:43,160 --> 00:17:47,200
you're writing node

00:17:44,710 --> 00:17:48,970
replace the word client with server if

00:17:47,200 --> 00:17:50,799
you're writing browser-based code you

00:17:48,970 --> 00:17:52,390
always sort of understand that you

00:17:50,799 --> 00:17:55,419
interoperate with AP is that our

00:17:52,390 --> 00:17:58,210
upstream from you so you your

00:17:55,419 --> 00:18:01,210
application sits below sort of the

00:17:58,210 --> 00:18:02,710
client and the the goal being to take

00:18:01,210 --> 00:18:05,260
things that are repetitive or that are

00:18:02,710 --> 00:18:07,990
causing pain or that make things painful

00:18:05,260 --> 00:18:11,679
for new developers on your team and put

00:18:07,990 --> 00:18:15,039
it in between your the client and the

00:18:11,679 --> 00:18:17,559
application so that if you're writing a

00:18:15,039 --> 00:18:19,419
sort of a sovereign framework then you

00:18:17,559 --> 00:18:25,240
sort of constancy start to consider that

00:18:19,419 --> 00:18:28,899
your application is interfacing with

00:18:25,240 --> 00:18:30,700
this framework and then that hides stuff

00:18:28,899 --> 00:18:32,320
from the client right like the

00:18:30,700 --> 00:18:34,419
application almost never talks to

00:18:32,320 --> 00:18:36,190
directly to the client for stuff anymore

00:18:34,419 --> 00:18:39,250
it talks to the framework if you're just

00:18:36,190 --> 00:18:41,140
building if you go back to the examples

00:18:39,250 --> 00:18:43,240
with sending email right like maybe your

00:18:41,140 --> 00:18:45,760
app no longer ever talks to the message

00:18:43,240 --> 00:18:48,669
queue it never talks to the statistic

00:18:45,760 --> 00:18:50,080
subsystem it always just talks to the

00:18:48,669 --> 00:18:54,039
framework that handles that stuff for

00:18:50,080 --> 00:18:58,210
you the goal is just to find pieces that

00:18:54,039 --> 00:18:59,919
need to be up leveled so look for code

00:18:58,210 --> 00:19:04,090
that's being repeated at every every

00:18:59,919 --> 00:19:06,970
turn things that are repeated multiple

00:19:04,090 --> 00:19:09,399
times and are consistently hard pieces

00:19:06,970 --> 00:19:12,549
that caused problems for new developers

00:19:09,399 --> 00:19:13,779
if you know if the new guy if every time

00:19:12,549 --> 00:19:16,390
there's a new guy for the first month

00:19:13,779 --> 00:19:19,539
they write bugs and X X could probably

00:19:16,390 --> 00:19:21,640
be moved upstream and made easier right

00:19:19,539 --> 00:19:25,029
you could make doing something hard easy

00:19:21,640 --> 00:19:27,340
for people if you're going after domain

00:19:25,029 --> 00:19:28,720
specific problems think about the domain

00:19:27,340 --> 00:19:30,220
specific solutions that your company

00:19:28,720 --> 00:19:33,039
offers are that your application offers

00:19:30,220 --> 00:19:34,630
over its competitors so if you're trying

00:19:33,039 --> 00:19:37,480
to not reinvent things that have been

00:19:34,630 --> 00:19:45,270
invented elsewhere you know what are the

00:19:37,480 --> 00:19:48,210
things that set your appt apart one

00:19:45,270 --> 00:19:50,440
really convenient place I've found to

00:19:48,210 --> 00:19:52,539
start thinking about what things need to

00:19:50,440 --> 00:19:55,240
be moved upstream from the application

00:19:52,539 --> 00:19:56,780
is well sort of two pieces it's in

00:19:55,240 --> 00:19:58,310
testing so

00:19:56,780 --> 00:20:00,170
for one for one thing you should always

00:19:58,310 --> 00:20:02,990
consider your test downstream from your

00:20:00,170 --> 00:20:06,170
app if your if your tests are sort of

00:20:02,990 --> 00:20:08,030
just a part of your app you're probably

00:20:06,170 --> 00:20:09,220
going about it slightly wrong and

00:20:08,030 --> 00:20:11,390
especially if you find yourself

00:20:09,220 --> 00:20:17,930
modifying application code for the sake

00:20:11,390 --> 00:20:19,430
of testing so this is both a good way to

00:20:17,930 --> 00:20:21,980
begin thinking about the boundaries

00:20:19,430 --> 00:20:24,260
between components but it's also a good

00:20:21,980 --> 00:20:26,300
way to find things that could be moved

00:20:24,260 --> 00:20:27,770
upstream from the app so if there's

00:20:26,300 --> 00:20:29,630
something that needs to be mocked in

00:20:27,770 --> 00:20:32,510
every test it should probably be

00:20:29,630 --> 00:20:34,970
upstream and then just the framework

00:20:32,510 --> 00:20:37,880
tier needs to be mocked if there's

00:20:34,970 --> 00:20:40,250
something that the setup function in

00:20:37,880 --> 00:20:42,350
every test does then whatever that's

00:20:40,250 --> 00:20:43,730
doing can probably be moved upstream

00:20:42,350 --> 00:20:45,710
from your application and then that

00:20:43,730 --> 00:20:47,150
framework can be tested and then all the

00:20:45,710 --> 00:20:49,460
other applications within your

00:20:47,150 --> 00:20:51,170
organization don't need to do that

00:20:49,460 --> 00:20:56,680
duplication in their tests they just

00:20:51,170 --> 00:20:59,540
need to use that framework so that's

00:20:56,680 --> 00:21:02,390
reading code and that's how I out some

00:20:59,540 --> 00:21:05,210
sort of pragmatic tips around how I

00:21:02,390 --> 00:21:07,070
think about beginning to separate how to

00:21:05,210 --> 00:21:09,710
move how to begin moving things upstream

00:21:07,070 --> 00:21:14,360
from your application and now it's sort

00:21:09,710 --> 00:21:15,740
of the art piece of it so when deciding

00:21:14,360 --> 00:21:18,800
what opinions to express from a

00:21:15,740 --> 00:21:21,710
framework you're basically deciding what

00:21:18,800 --> 00:21:25,580
complexity to push downstream so every

00:21:21,710 --> 00:21:27,290
time you separate a new component and

00:21:25,580 --> 00:21:31,040
you say this thing is only concerned

00:21:27,290 --> 00:21:34,520
with this one task you're essentially

00:21:31,040 --> 00:21:37,130
pushing complexity into someone

00:21:34,520 --> 00:21:38,930
downstream so the fewer opinions your

00:21:37,130 --> 00:21:41,930
framework expresses the more complexity

00:21:38,930 --> 00:21:44,060
you're pushing to the implementer so

00:21:41,930 --> 00:21:45,440
this this is a system that has very few

00:21:44,060 --> 00:21:46,940
opinions right each of these things is

00:21:45,440 --> 00:21:48,740
isolated it has its own separate

00:21:46,940 --> 00:21:50,840
concerned but everything else that needs

00:21:48,740 --> 00:21:52,670
to have anything to do with that concern

00:21:50,840 --> 00:21:55,430
takes on the complexity of connecting

00:21:52,670 --> 00:21:57,650
all the different pieces whereas this is

00:21:55,430 --> 00:22:00,290
something that's quite opinionated right

00:21:57,650 --> 00:22:01,880
so yes internally these things are

00:22:00,290 --> 00:22:03,440
connected to one another and they're

00:22:01,880 --> 00:22:05,270
coupled they are coupled it's just a

00:22:03,440 --> 00:22:06,980
fact they're pieces of your of your

00:22:05,270 --> 00:22:10,130
framework are going to be coupled but

00:22:06,980 --> 00:22:10,929
the interface that they push out to

00:22:10,130 --> 00:22:14,660
consume

00:22:10,929 --> 00:22:18,710
allows them to allows those consumers to

00:22:14,660 --> 00:22:21,830
take on less complexity so just go in

00:22:18,710 --> 00:22:24,470
with eyes open about that and there

00:22:21,830 --> 00:22:28,150
there's a whole range of these in the

00:22:24,470 --> 00:22:30,799
JavaScript world as things exist so

00:22:28,150 --> 00:22:33,110
backbone philosophically doesn't take on

00:22:30,799 --> 00:22:35,570
many opinions it's the goal was not to

00:22:33,110 --> 00:22:38,720
make application development easy the

00:22:35,570 --> 00:22:40,520
goal for them was to take to make a set

00:22:38,720 --> 00:22:42,350
of components that every web app needs

00:22:40,520 --> 00:22:45,559
so they were trying to find the minimum

00:22:42,350 --> 00:22:48,770
viable set that are generically useful

00:22:45,559 --> 00:22:50,540
all web apps need x y and z whereas on

00:22:48,770 --> 00:22:53,390
the other end of that opinion spectrum

00:22:50,540 --> 00:22:57,770
is something like ember where their goal

00:22:53,390 --> 00:22:59,690
was to codify common idioms so this is

00:22:57,770 --> 00:23:01,790
the one true way that we've decided that

00:22:59,690 --> 00:23:04,730
framework has decided that you need to

00:23:01,790 --> 00:23:06,320
go about doing things and then you only

00:23:04,730 --> 00:23:09,110
focus on what differentiates you are at

00:23:06,320 --> 00:23:10,460
from other apps so there they've been

00:23:09,110 --> 00:23:16,100
quite opinionated about their framework

00:23:10,460 --> 00:23:18,590
and that all essentially comes back to

00:23:16,100 --> 00:23:21,410
you know if you're writing backbone code

00:23:18,590 --> 00:23:23,510
and your controller needs to take on

00:23:21,410 --> 00:23:25,880
multiple pieces from your model and then

00:23:23,510 --> 00:23:28,340
push things out to views whereas ember

00:23:25,880 --> 00:23:31,730
might automatically connect the route

00:23:28,340 --> 00:23:43,070
Model View and controller during its

00:23:31,730 --> 00:23:46,700
bootstrap phase so JavaScript

00:23:43,070 --> 00:23:52,480
specifically I think we're an

00:23:46,700 --> 00:23:52,480
interesting position as a community

00:23:52,809 --> 00:23:57,200
historically it's people have been

00:23:55,280 --> 00:24:01,790
interested in languages that are either

00:23:57,200 --> 00:24:02,990
server only or client only so for a long

00:24:01,790 --> 00:24:04,429
time we weren't doing a whole lot of

00:24:02,990 --> 00:24:06,410
heavy lifting in decline at all and you

00:24:04,429 --> 00:24:11,870
had a couple of different languages but

00:24:06,410 --> 00:24:15,020
it was Java Ruby Python PHP and I assume

00:24:11,870 --> 00:24:20,300
Java was the first one to do it fairly

00:24:15,020 --> 00:24:22,400
well where you would implement a Model

00:24:20,300 --> 00:24:23,929
View controller on the server and then

00:24:22,400 --> 00:24:26,029
use the client is essentially

00:24:23,929 --> 00:24:30,440
done paint and that's how the web's the

00:24:26,029 --> 00:24:32,720
web worked for just a very long time so

00:24:30,440 --> 00:24:34,820
the the server is where all the business

00:24:32,720 --> 00:24:37,039
logic is performed data is sent to the

00:24:34,820 --> 00:24:38,899
client and it's used to paint that that

00:24:37,039 --> 00:24:40,759
data and then it also has some concerns

00:24:38,899 --> 00:24:43,970
around user input right the user clicked

00:24:40,759 --> 00:24:46,580
on position to 39 x 48 and that's a

00:24:43,970 --> 00:24:48,649
button so we're going to send this the

00:24:46,580 --> 00:24:50,869
information about the the form that

00:24:48,649 --> 00:24:53,090
we're going to send a post thats related

00:24:50,869 --> 00:24:55,070
to that form back to the server and then

00:24:53,090 --> 00:24:56,389
the server recalculates what it needs to

00:24:55,070 --> 00:24:59,179
draw in response to that and sends it

00:24:56,389 --> 00:25:03,830
back for another paint then we started

00:24:59,179 --> 00:25:06,110
doing sort of single page apps or doing

00:25:03,830 --> 00:25:07,999
a lot of heavy lifting on the the client

00:25:06,110 --> 00:25:09,830
and we realized we could do a lot of our

00:25:07,999 --> 00:25:11,029
JavaScript had become good enough or

00:25:09,830 --> 00:25:13,039
maybe it was good enough all along I'm

00:25:11,029 --> 00:25:14,210
not sure but we had it had become good

00:25:13,039 --> 00:25:17,559
enough that we can begin doing our

00:25:14,210 --> 00:25:19,759
business logic in the in the client and

00:25:17,559 --> 00:25:22,129
we began to use the server as

00:25:19,759 --> 00:25:23,840
essentially a dump data store so it's

00:25:22,129 --> 00:25:25,399
it's there for persistence you know the

00:25:23,840 --> 00:25:27,409
user has done some things our model has

00:25:25,399 --> 00:25:29,960
changed let's sync it you know it's

00:25:27,409 --> 00:25:32,059
essentially a sink call the business

00:25:29,960 --> 00:25:34,940
logic is a base is essentially contained

00:25:32,059 --> 00:25:36,980
inside the the client and this is not

00:25:34,940 --> 00:25:38,990
entirely true if you were doing more

00:25:36,980 --> 00:25:40,789
complex stuff on top of that data sync

00:25:38,990 --> 00:25:42,649
right like if your server was doing some

00:25:40,789 --> 00:25:45,289
hard number crunching you could have

00:25:42,649 --> 00:25:49,309
things in the server but by and large

00:25:45,289 --> 00:25:51,919
for simple crud apps that were doing

00:25:49,309 --> 00:25:53,509
heavy lifting in the client the data was

00:25:51,919 --> 00:26:00,139
just or the server was just there for

00:25:53,509 --> 00:26:04,220
data access and persistence and now now

00:26:00,139 --> 00:26:07,460
we're building things in node and well

00:26:04,220 --> 00:26:10,340
this is splat side NBC but really it's

00:26:07,460 --> 00:26:12,230
it's splat side splat right does it need

00:26:10,340 --> 00:26:14,389
to be MVC I don't think we're all

00:26:12,230 --> 00:26:17,419
convinced or at least I hope no one's

00:26:14,389 --> 00:26:21,740
convinced one because NBC is sort of a

00:26:17,419 --> 00:26:22,850
bad term and otherwise because I don't

00:26:21,740 --> 00:26:26,179
think we found I don't think we've

00:26:22,850 --> 00:26:27,980
arrived I don't think we're there yet so

00:26:26,179 --> 00:26:32,149
I think that the JavaScript community is

00:26:27,980 --> 00:26:33,649
uniquely positioned itself because we're

00:26:32,149 --> 00:26:36,580
comfortable writing code both on the

00:26:33,649 --> 00:26:39,830
server and on the client

00:26:36,580 --> 00:26:42,669
we have an opportunity to build complete

00:26:39,830 --> 00:26:45,320
into in solutions to a problem that's

00:26:42,669 --> 00:26:47,299
consistently hard and we have the

00:26:45,320 --> 00:26:48,919
opportunity to make that easy and it's

00:26:47,299 --> 00:26:52,580
essentially if I make writing code that

00:26:48,919 --> 00:26:53,989
can run in either place I think that

00:26:52,580 --> 00:26:57,139
meteor and Derby are the closest

00:26:53,989 --> 00:26:59,239
approximations to this so far I don't

00:26:57,139 --> 00:27:02,809
think that neither of those projects are

00:26:59,239 --> 00:27:04,610
done by their creators standards so you

00:27:02,809 --> 00:27:05,749
can go get involved in them or you can

00:27:04,610 --> 00:27:08,720
begin writing frameworks that are

00:27:05,749 --> 00:27:10,340
similar to them so we're still driving

00:27:08,720 --> 00:27:15,320
towards solutions and I don't think

00:27:10,340 --> 00:27:16,519
anyone thinks that we've arrived but go

00:27:15,320 --> 00:27:19,519
take a look at one of those if you

00:27:16,519 --> 00:27:22,669
haven't already they're essentially

00:27:19,519 --> 00:27:24,320
doing you know major major pieces of the

00:27:22,669 --> 00:27:26,629
lifting on both sides depending on what

00:27:24,320 --> 00:27:28,639
you want to do there are also some

00:27:26,629 --> 00:27:33,440
components that are doing things quite

00:27:28,639 --> 00:27:35,119
well doing one thing quite well and have

00:27:33,440 --> 00:27:37,549
the opportunity to evolve into the

00:27:35,119 --> 00:27:39,289
canonical way of doing something so

00:27:37,549 --> 00:27:41,299
reacts already been presented on here

00:27:39,289 --> 00:27:43,309
but it's something that does views very

00:27:41,299 --> 00:27:48,200
well and it's a new approach to drawing

00:27:43,309 --> 00:27:52,700
the view with the virtual Dom I couldn't

00:27:48,200 --> 00:27:55,100
find a logo for 4q but venable promises

00:27:52,700 --> 00:27:56,629
are coming about as a new and interests

00:27:55,100 --> 00:27:58,999
or not new but they're an interesting

00:27:56,629 --> 00:28:02,239
way of going about doing a sink

00:27:58,999 --> 00:28:04,850
programming and a node the node devs

00:28:02,239 --> 00:28:06,409
have opinions about that but it's

00:28:04,850 --> 00:28:08,119
certainly a new and it and an

00:28:06,409 --> 00:28:11,840
interesting way of going about acing

00:28:08,119 --> 00:28:16,700
programming moment is obviously it like

00:28:11,840 --> 00:28:18,350
of the things that do that do times it's

00:28:16,700 --> 00:28:21,080
probably the one doing it the best at

00:28:18,350 --> 00:28:23,210
this point and if a framework comes

00:28:21,080 --> 00:28:25,039
along that needs to draw to the dom

00:28:23,210 --> 00:28:27,259
maybe it'll take on react is the

00:28:25,039 --> 00:28:28,759
canonical way if at some point the

00:28:27,259 --> 00:28:32,330
community decides that that's a great

00:28:28,759 --> 00:28:35,840
way to do it I'm pretty consistently

00:28:32,330 --> 00:28:38,119
using venable promises in in all of my

00:28:35,840 --> 00:28:40,489
code just because I'm fairly sure it's

00:28:38,119 --> 00:28:44,090
better than callback passing to method

00:28:40,489 --> 00:28:45,919
to methods but I guess what I want to

00:28:44,090 --> 00:28:47,269
say about that is that if we move into a

00:28:45,919 --> 00:28:48,679
space where we're solving into n

00:28:47,269 --> 00:28:50,629
solutions will need

00:28:48,679 --> 00:28:53,570
solutions to these individual problems

00:28:50,629 --> 00:28:56,960
that are quite good and we may be

00:28:53,570 --> 00:28:58,220
getting close to some of those so if you

00:28:56,960 --> 00:28:59,720
if you decide to write a framework

00:28:58,220 --> 00:29:03,379
that's going to be exposed to the rest

00:28:59,720 --> 00:29:06,919
of the world go about doing the

00:29:03,379 --> 00:29:08,240
individual things well go consume pieces

00:29:06,919 --> 00:29:13,090
that already exist on the web and are

00:29:08,240 --> 00:29:13,090

YouTube URL: https://www.youtube.com/watch?v=ep8isfiV7Ec


