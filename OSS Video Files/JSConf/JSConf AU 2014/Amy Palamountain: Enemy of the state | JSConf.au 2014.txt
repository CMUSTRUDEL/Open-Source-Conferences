Title: Amy Palamountain: Enemy of the state | JSConf.au 2014
Publication date: 2014-12-01
Playlist: JSConf AU 2014
Description: 
	
Captions: 
	00:00:05,630 --> 00:00:11,910
so now that we're all friends and see me

00:00:09,360 --> 00:00:14,099
little round of my machine I'm just

00:00:11,910 --> 00:00:15,690
going to cut right to the chase and kind

00:00:14,099 --> 00:00:17,760
of be a bit straight up I think building

00:00:15,690 --> 00:00:20,220
and front-end JavaScript applications is

00:00:17,760 --> 00:00:21,570
pretty damn hard and I think there are a

00:00:20,220 --> 00:00:23,550
bunch of factors that contribute to this

00:00:21,570 --> 00:00:25,260
and one of those factors is that they're

00:00:23,550 --> 00:00:27,840
just giant balls or state which is what

00:00:25,260 --> 00:00:29,190
Pete was talking about so I thought

00:00:27,840 --> 00:00:31,080
would be kind of interesting to take a

00:00:29,190 --> 00:00:33,629
bit of a step back and and maybe play

00:00:31,080 --> 00:00:34,890
the devil's advocate and take a critical

00:00:33,629 --> 00:00:37,860
look at some of the patterns that we see

00:00:34,890 --> 00:00:40,020
being applied on front-end JavaScript

00:00:37,860 --> 00:00:42,270
code bases and see if they give us ways

00:00:40,020 --> 00:00:45,829
of handling state and events in a

00:00:42,270 --> 00:00:47,790
scalable and maintainable fashion and

00:00:45,829 --> 00:00:49,710
then maybe we'll take a look at some of

00:00:47,790 --> 00:00:52,170
the tactics that we can use to help us

00:00:49,710 --> 00:00:54,770
better embrace state and events without

00:00:52,170 --> 00:00:57,210
sacrificing clarity in our architecture

00:00:54,770 --> 00:00:59,730
so I'll just introduce myself that's not

00:00:57,210 --> 00:01:00,930
me I'm Amy I've come from New Zealand if

00:00:59,730 --> 00:01:02,130
you're ever in Wellington and you want

00:01:00,930 --> 00:01:04,229
to hang out just give me a shout on

00:01:02,130 --> 00:01:06,390
twitter i'm a meep and it's jared see

00:01:04,229 --> 00:01:08,310
that i work at github I'm if you want

00:01:06,390 --> 00:01:10,040
some stickers my buddy Marcus's down

00:01:08,310 --> 00:01:13,820
front he's got a whole pile of them

00:01:10,040 --> 00:01:16,740
direct all of your attention that way um

00:01:13,820 --> 00:01:19,500
I've also got a tiny confession I don't

00:01:16,740 --> 00:01:21,540
write any JavaScript yet github I build

00:01:19,500 --> 00:01:24,180
the github windows clients I'm a windows

00:01:21,540 --> 00:01:26,490
developer I'm actually pretty new to

00:01:24,180 --> 00:01:28,680
github and before that I was writing a

00:01:26,490 --> 00:01:31,680
whole ton of JavaScript building epson

00:01:28,680 --> 00:01:34,320
and backbone so in terms of architecture

00:01:31,680 --> 00:01:35,520
front end-front end apps to have

00:01:34,320 --> 00:01:36,869
actually quite a bit in common with

00:01:35,520 --> 00:01:38,610
desktop applications and the thing that

00:01:36,869 --> 00:01:41,040
ties them together is that they have

00:01:38,610 --> 00:01:42,869
heaps and heaps of state so front-end

00:01:41,040 --> 00:01:44,070
javascript ads contain lots of different

00:01:42,869 --> 00:01:46,619
kinds of state they've got the state of

00:01:44,070 --> 00:01:48,330
the court entities are models they've

00:01:46,619 --> 00:01:50,159
got that state that needs to be kept in

00:01:48,330 --> 00:01:51,930
sync with the server we've got the state

00:01:50,159 --> 00:01:53,189
of the address bar we've got the state

00:01:51,930 --> 00:01:54,630
of all the different views that are

00:01:53,189 --> 00:01:56,280
presenting various bits of information

00:01:54,630 --> 00:01:58,439
on the screen at any given point in time

00:01:56,280 --> 00:02:00,420
and then we've got the overall state of

00:01:58,439 --> 00:02:03,180
our application memory management all of

00:02:00,420 --> 00:02:05,400
those kinds of things so on its own

00:02:03,180 --> 00:02:07,020
state isn't very interesting what makes

00:02:05,400 --> 00:02:09,060
an application interesting is the

00:02:07,020 --> 00:02:10,590
interaction with that stage so we're

00:02:09,060 --> 00:02:13,650
able to interact with the state and

00:02:10,590 --> 00:02:14,630
force new transitions new states on the

00:02:13,650 --> 00:02:15,470
system in some

00:02:14,630 --> 00:02:18,230
we have something that's way more

00:02:15,470 --> 00:02:19,760
compelling so traditionally state

00:02:18,230 --> 00:02:21,920
transitions are going to occur by our

00:02:19,760 --> 00:02:23,930
events so for example you've got some

00:02:21,920 --> 00:02:25,610
data on the screen at xbox somebody into

00:02:23,930 --> 00:02:27,650
some information they click Save the

00:02:25,610 --> 00:02:29,450
model gets updated and we transition

00:02:27,650 --> 00:02:32,240
into a new state it might be an invalid

00:02:29,450 --> 00:02:34,760
state so the thing about these

00:02:32,240 --> 00:02:36,530
heavy-duty thick client JavaScript apps

00:02:34,760 --> 00:02:37,940
is that basically this brought these

00:02:36,530 --> 00:02:39,380
blobs of code that kind of just sit

00:02:37,940 --> 00:02:41,750
there and wait for interesting things to

00:02:39,380 --> 00:02:43,250
happen and we have a bunch of ways that

00:02:41,750 --> 00:02:44,930
we can make interesting things happens

00:02:43,250 --> 00:02:47,150
we've got Dom events which I like click

00:02:44,930 --> 00:02:49,070
drag k out there's a whole pile of them

00:02:47,150 --> 00:02:50,990
and we've got model events so that might

00:02:49,070 --> 00:02:52,730
be when we transition into that invalid

00:02:50,990 --> 00:02:54,410
state our model might raise a signal to

00:02:52,730 --> 00:02:55,730
say hey I'm actually in a valid state

00:02:54,410 --> 00:02:58,820
and people who are interested in that

00:02:55,730 --> 00:03:01,070
and we subscribe to those events we've

00:02:58,820 --> 00:03:03,140
also got router events so these are kept

00:03:01,070 --> 00:03:04,880
off when the address bar changes and we

00:03:03,140 --> 00:03:08,060
need to do interesting things to the

00:03:04,880 --> 00:03:09,530
overall view state of our application so

00:03:08,060 --> 00:03:11,630
we've got lots of steak and we've got

00:03:09,530 --> 00:03:14,540
lots of means and they all need to be

00:03:11,630 --> 00:03:16,490
managed and if we don't manage them in a

00:03:14,540 --> 00:03:18,590
way that kind of accurately separates

00:03:16,490 --> 00:03:20,300
all of the concerns out and state and

00:03:18,590 --> 00:03:23,120
events they're going to get really tough

00:03:20,300 --> 00:03:26,090
to manage so I've got a really contrived

00:03:23,120 --> 00:03:29,960
example here of estate and events being

00:03:26,090 --> 00:03:32,030
managed in a pretty sub optimal way so

00:03:29,960 --> 00:03:33,710
we've got a view it's a part of you

00:03:32,030 --> 00:03:36,550
there's a there's a there's just one

00:03:33,710 --> 00:03:38,360
lone party animal at the party party dog

00:03:36,550 --> 00:03:41,840
and we're going to have an invitation

00:03:38,360 --> 00:03:43,580
list as well so here we can input a new

00:03:41,840 --> 00:03:45,230
enemy Warner right to the invite to the

00:03:43,580 --> 00:03:48,890
party and we've got a button with an

00:03:45,230 --> 00:03:51,680
onclick handler shout out awesome so

00:03:48,890 --> 00:03:52,910
don't please don't do this and so when

00:03:51,680 --> 00:03:54,740
somebody clicks that button to invite

00:03:52,910 --> 00:03:56,150
the animal we're going to use jQuery to

00:03:54,740 --> 00:03:57,560
reach into the dome to grab the state of

00:03:56,150 --> 00:03:58,880
the textbox we're going to pull that bit

00:03:57,560 --> 00:04:00,290
of information out we're going to invite

00:03:58,880 --> 00:04:02,000
it and more to the party we're going to

00:04:00,290 --> 00:04:03,650
build up a new view we're going to reach

00:04:02,000 --> 00:04:05,660
back into the Brahman and put that in

00:04:03,650 --> 00:04:08,900
there we're doing a whole pile of like

00:04:05,660 --> 00:04:10,370
just it's spaghetti code basically so if

00:04:08,900 --> 00:04:13,610
you're going to extrapolate that kind of

00:04:10,370 --> 00:04:15,110
code to its natural conclusion it's it's

00:04:13,610 --> 00:04:16,760
easy to see that we've got a state and

00:04:15,110 --> 00:04:19,130
state changes state and state

00:04:16,760 --> 00:04:20,480
transitions being intertwined and we're

00:04:19,130 --> 00:04:23,810
very quickly going to end up with an

00:04:20,480 --> 00:04:26,060
unmaintained codebase so the more state

00:04:23,810 --> 00:04:27,210
you have the harder it is to manipulate

00:04:26,060 --> 00:04:28,560
state and then

00:04:27,210 --> 00:04:31,319
the trickier it all becomes to manage

00:04:28,560 --> 00:04:32,729
and so this is where people are going

00:04:31,319 --> 00:04:34,470
hey we've got design patterns and that's

00:04:32,729 --> 00:04:38,699
awesome we totally do they've come to

00:04:34,470 --> 00:04:39,960
save our souls so the thing that I think

00:04:38,699 --> 00:04:41,699
find really interesting about design

00:04:39,960 --> 00:04:42,870
patterns is I contrast what's going on

00:04:41,699 --> 00:04:44,490
in like the physical world of

00:04:42,870 --> 00:04:46,639
engineering to what's going on in the

00:04:44,490 --> 00:04:48,360
software and world of engineering like

00:04:46,639 --> 00:04:49,620
physical engineers are going to build

00:04:48,360 --> 00:04:51,300
buildings like this and they have a

00:04:49,620 --> 00:04:52,530
specific way that they need to construct

00:04:51,300 --> 00:04:54,419
the building so that it doesn't kind of

00:04:52,530 --> 00:04:55,620
collapse and kill everybody inside and

00:04:54,419 --> 00:04:58,080
they're going to need to do that

00:04:55,620 --> 00:04:59,550
regardless of the outcome of the

00:04:58,080 --> 00:05:03,180
building whether it's going to be a meat

00:04:59,550 --> 00:05:05,520
market or whatever but in software we we

00:05:03,180 --> 00:05:07,259
kind of had these these loser ideas that

00:05:05,520 --> 00:05:10,050
we can apply in very different contexts

00:05:07,259 --> 00:05:12,930
so I mean I guess was me not bound by

00:05:10,050 --> 00:05:14,099
the laws of physics to a point so it's

00:05:12,930 --> 00:05:15,720
interesting because it means that we can

00:05:14,099 --> 00:05:17,699
take patterns that have been applied and

00:05:15,720 --> 00:05:20,159
very very different contexts and start

00:05:17,699 --> 00:05:22,080
applying them to help us solve

00:05:20,159 --> 00:05:24,750
interesting problems and new contexts

00:05:22,080 --> 00:05:26,130
and it means those ideas kind of evolve

00:05:24,750 --> 00:05:28,020
a little bit like memes on the internet

00:05:26,130 --> 00:05:30,060
right like mean actually means anything

00:05:28,020 --> 00:05:31,699
that's spread or inherited in an on

00:05:30,060 --> 00:05:35,970
genetic fashion which basically means

00:05:31,699 --> 00:05:37,409
memes or ideas so their ideas it stuck

00:05:35,970 --> 00:05:39,120
because they're funny or because

00:05:37,409 --> 00:05:40,770
everyone thinks that they contain an

00:05:39,120 --> 00:05:44,610
interesting solution to a tricky problem

00:05:40,770 --> 00:05:46,560
and I think that in v-star the MV star

00:05:44,610 --> 00:05:49,590
family of patents is an example of this

00:05:46,560 --> 00:05:51,539
so originally presentation patterns that

00:05:49,590 --> 00:05:53,969
fall under this category they actually

00:05:51,539 --> 00:05:56,820
originated from building desktop clients

00:05:53,969 --> 00:05:58,409
and then over time web and web server

00:05:56,820 --> 00:06:00,210
programming became really popular and

00:05:58,409 --> 00:06:03,300
these presentation patterns were applied

00:06:00,210 --> 00:06:05,120
in that context so we end up with web

00:06:03,300 --> 00:06:07,680
server frameworks like rails which

00:06:05,120 --> 00:06:09,539
implementations of MVC and then we've

00:06:07,680 --> 00:06:11,190
got these kick-ass front-end JavaScript

00:06:09,539 --> 00:06:14,039
frameworks which are also claiming to be

00:06:11,190 --> 00:06:15,509
implementations of an MVC pattern and I

00:06:14,039 --> 00:06:17,490
really don't want to turn this into a

00:06:15,509 --> 00:06:19,139
conversation about like who's doing in

00:06:17,490 --> 00:06:21,120
bc by the book because that's not

00:06:19,139 --> 00:06:23,400
particularly interesting but what is

00:06:21,120 --> 00:06:26,219
interesting is to take a look at how

00:06:23,400 --> 00:06:28,139
each of those flavors are being applied

00:06:26,219 --> 00:06:30,210
in the different contexts and how they

00:06:28,139 --> 00:06:33,389
affect how we manage state and how we

00:06:30,210 --> 00:06:37,440
manage state transitions so I'm going to

00:06:33,389 --> 00:06:38,880
take a quick look at how we manage state

00:06:37,440 --> 00:06:39,870
and the web server environment so

00:06:38,880 --> 00:06:42,210
hopefully some of this is going

00:06:39,870 --> 00:06:44,130
mostly a reminder so we've got models

00:06:42,210 --> 00:06:45,840
they are the guts of our application

00:06:44,130 --> 00:06:48,330
it's where all the interesting domain

00:06:45,840 --> 00:06:50,370
logic is going to occur we've got views

00:06:48,330 --> 00:06:52,740
and though the presentation of that of

00:06:50,370 --> 00:06:54,990
those models and typically this is going

00:06:52,740 --> 00:06:56,880
to be like a JSON document or an HTML

00:06:54,990 --> 00:06:58,680
document so the interesting thing about

00:06:56,880 --> 00:07:02,640
views in this context is that they are a

00:06:58,680 --> 00:07:04,140
snapshot of the models current state and

00:07:02,640 --> 00:07:05,760
then we have controllers which are

00:07:04,140 --> 00:07:08,220
responsible for sending commands down to

00:07:05,760 --> 00:07:10,020
the model maybe they will transition the

00:07:08,220 --> 00:07:12,030
model into a new state mr. step back

00:07:10,020 --> 00:07:13,650
maybe just query it and then they're

00:07:12,030 --> 00:07:15,390
going to return a snapshot of that

00:07:13,650 --> 00:07:18,320
current state a representation of that

00:07:15,390 --> 00:07:20,640
current state and then we have routers

00:07:18,320 --> 00:07:21,990
so they are responsible for doing some

00:07:20,640 --> 00:07:24,480
pattern matching of an incoming web

00:07:21,990 --> 00:07:26,430
request routing that off to a designated

00:07:24,480 --> 00:07:28,710
designated controller and then to an

00:07:26,430 --> 00:07:30,600
action which is the action selection is

00:07:28,710 --> 00:07:33,090
normally done with a combination of the

00:07:30,600 --> 00:07:35,910
URL that's come in and the HTTP verb

00:07:33,090 --> 00:07:37,380
that's being used so how does this

00:07:35,910 --> 00:07:39,300
relate to how state as miniature on the

00:07:37,380 --> 00:07:40,590
web server environment or hopefully

00:07:39,300 --> 00:07:41,730
you're going what are you talking about

00:07:40,590 --> 00:07:43,350
we don't have state on the web server

00:07:41,730 --> 00:07:44,580
environment we want to be stateless

00:07:43,350 --> 00:07:48,480
because we want to be able to scalar

00:07:44,580 --> 00:07:50,220
applications so how are we achieving the

00:07:48,480 --> 00:07:53,270
stainless pneus while we persisting our

00:07:50,220 --> 00:07:56,040
models to a data store of some kind and

00:07:53,270 --> 00:07:58,020
so in this environment where state is

00:07:56,040 --> 00:08:00,900
persisted to a data store and we're able

00:07:58,020 --> 00:08:03,300
to address that state via HTTP like we

00:08:00,900 --> 00:08:05,610
can say HTTP get me all the animals at

00:08:03,300 --> 00:08:07,500
the party and then if we find out one of

00:08:05,610 --> 00:08:09,050
the animals is causing a bit of a

00:08:07,500 --> 00:08:12,810
commotion and we want to kick them out

00:08:09,050 --> 00:08:15,150
we can just execute an HTTP HTTP delete

00:08:12,810 --> 00:08:16,740
against that same resource so what we've

00:08:15,150 --> 00:08:19,260
essentially done here is we've simulated

00:08:16,740 --> 00:08:20,940
a state transition across the HTTP

00:08:19,260 --> 00:08:23,520
boundary across the client-server

00:08:20,940 --> 00:08:25,620
boundary and what that means is all

00:08:23,520 --> 00:08:30,210
states and all state transitions are

00:08:25,620 --> 00:08:31,710
necessarily addressable via HTTP so

00:08:30,210 --> 00:08:33,450
quick example we've got a couple of

00:08:31,710 --> 00:08:35,670
routes here that we're defining against

00:08:33,450 --> 00:08:38,400
the same party resource get post and

00:08:35,670 --> 00:08:40,500
delete the get example is going to take

00:08:38,400 --> 00:08:41,670
the incoming perimeter it's going to go

00:08:40,500 --> 00:08:43,260
to the data store and find the

00:08:41,670 --> 00:08:45,810
particular animal and return a snapshot

00:08:43,260 --> 00:08:47,460
of that current state we're going to add

00:08:45,810 --> 00:08:49,170
an animal to the party we're going to

00:08:47,460 --> 00:08:51,390
grab that and come with parameter again

00:08:49,170 --> 00:08:53,209
we're going to modify the state persist

00:08:51,390 --> 00:08:55,160
it down to the data store and then rich

00:08:53,209 --> 00:08:59,119
a new snapshot of the pub the parties

00:08:55,160 --> 00:09:00,529
are state with an extra attendee and the

00:08:59,119 --> 00:09:01,699
same goes for the delete when we want to

00:09:00,529 --> 00:09:03,319
kick somebody out we're going to modify

00:09:01,699 --> 00:09:04,879
the state of the party persist that back

00:09:03,319 --> 00:09:08,540
to the data store and then return a new

00:09:04,879 --> 00:09:10,490
snapshot so routers are matching a web

00:09:08,540 --> 00:09:12,499
request pattern it's handing it off to a

00:09:10,490 --> 00:09:13,699
controller and invoking an action who's

00:09:12,499 --> 00:09:16,249
going to do a model look out in an

00:09:13,699 --> 00:09:20,779
update and return a snapshot of the new

00:09:16,249 --> 00:09:23,449
view so because of that client-server

00:09:20,779 --> 00:09:25,129
boundary all of the states and all of

00:09:23,449 --> 00:09:28,399
our interesting events are addressable

00:09:25,129 --> 00:09:30,379
via HTTP and the way that we use rounds

00:09:28,399 --> 00:09:33,499
means that our architecture is very

00:09:30,379 --> 00:09:34,939
linear so requests come in something may

00:09:33,499 --> 00:09:37,459
or may not happen to change the model

00:09:34,939 --> 00:09:38,929
state and a snapshot has returned so

00:09:37,459 --> 00:09:44,629
we've gone down the stack and up the

00:09:38,929 --> 00:09:46,519
stack again so the key difference for

00:09:44,629 --> 00:09:47,809
the way that we implement MVC on the

00:09:46,519 --> 00:09:50,209
server and the way that we're going to

00:09:47,809 --> 00:09:52,490
implement NBC on the client is that the

00:09:50,209 --> 00:09:55,910
implementation on the client has a lot

00:09:52,490 --> 00:09:57,499
of state we don't need to try super hard

00:09:55,910 --> 00:09:59,509
to be stateless anymore in fact we want

00:09:57,499 --> 00:10:01,309
to embrace stage so we're keeping a

00:09:59,509 --> 00:10:03,499
bunch of things in memory here to form a

00:10:01,309 --> 00:10:05,720
cohesive application and it all comes

00:10:03,499 --> 00:10:09,230
together to form a very rich and non

00:10:05,720 --> 00:10:11,240
linear state-space we've got our models

00:10:09,230 --> 00:10:12,589
they usually coupled with a snapshot

00:10:11,240 --> 00:10:14,540
that's coming back from a server that

00:10:12,589 --> 00:10:16,759
JSON document that might come back and

00:10:14,540 --> 00:10:18,529
then we add an extra layer of complexity

00:10:16,759 --> 00:10:21,889
on top of that we've got validation

00:10:18,529 --> 00:10:23,809
security we are playing new behaviors

00:10:21,889 --> 00:10:25,459
through other functions we've got to

00:10:23,809 --> 00:10:26,990
decide when we keep that state and sync

00:10:25,459 --> 00:10:30,110
with the server so we're keeping that in

00:10:26,990 --> 00:10:31,759
mind at all times the number of possible

00:10:30,110 --> 00:10:34,249
states that we've just put on top of

00:10:31,759 --> 00:10:37,790
that snapshot has just has blown out

00:10:34,249 --> 00:10:39,379
proportionally on the screen at any one

00:10:37,790 --> 00:10:40,970
time we've got many different views that

00:10:39,379 --> 00:10:43,309
are each presenting different model

00:10:40,970 --> 00:10:45,889
states and together those views to find

00:10:43,309 --> 00:10:47,990
the overall view state so what many

00:10:45,889 --> 00:10:50,329
items can we see in the sidebar like are

00:10:47,990 --> 00:10:52,129
we able to eat it the that the Palean

00:10:50,329 --> 00:10:54,379
kick somebody out are we able to invite

00:10:52,129 --> 00:10:55,970
a new animal to the party and are we

00:10:54,379 --> 00:10:57,589
even able to see what's going on the

00:10:55,970 --> 00:10:59,389
shenanigans going on inside this party

00:10:57,589 --> 00:11:01,759
so this is adding again to the

00:10:59,389 --> 00:11:03,910
complexity that we have in the state

00:11:01,759 --> 00:11:03,910
space

00:11:04,080 --> 00:11:08,100
and with overall we've got the overall

00:11:06,180 --> 00:11:10,140
application state as well so this is

00:11:08,100 --> 00:11:12,180
things like which models which modules

00:11:10,140 --> 00:11:13,740
and controllers are currently active and

00:11:12,180 --> 00:11:16,320
which ones are no longer active and

00:11:13,740 --> 00:11:20,670
should be cleaned up in order to free up

00:11:16,320 --> 00:11:23,190
that memory that we hogging and of

00:11:20,670 --> 00:11:25,320
course that state our state boundary

00:11:23,190 --> 00:11:26,960
that we had on the server that client

00:11:25,320 --> 00:11:29,310
super boundary is no longer relevant

00:11:26,960 --> 00:11:31,860
suddenly we don't have to emulate state

00:11:29,310 --> 00:11:33,480
transitions across a boundary state and

00:11:31,860 --> 00:11:35,820
the transitions occur within the same

00:11:33,480 --> 00:11:37,440
execution context which is awesome

00:11:35,820 --> 00:11:39,360
because it means we have a much much

00:11:37,440 --> 00:11:45,150
richer set of concepts if we can

00:11:39,360 --> 00:11:46,440
architect a replication around so as the

00:11:45,150 --> 00:11:48,180
state space grows and we're moving

00:11:46,440 --> 00:11:50,970
around the state space in a very

00:11:48,180 --> 00:11:53,430
nonlinear fashion things get complicated

00:11:50,970 --> 00:11:54,870
really really quickly it has a

00:11:53,430 --> 00:11:56,970
dimensionality to the problem which

00:11:54,870 --> 00:11:59,100
makes managing all of this really really

00:11:56,970 --> 00:12:00,900
tricky so we need to have a plan we need

00:11:59,100 --> 00:12:03,630
to apply some memes some ideas some

00:12:00,900 --> 00:12:08,490
patterns to help us out here and not end

00:12:03,630 --> 00:12:10,200
up in a spaghetti code soup so we

00:12:08,490 --> 00:12:11,790
originally brought over these

00:12:10,200 --> 00:12:13,440
presentation patterns onto the client to

00:12:11,790 --> 00:12:14,970
help us deal with complexity the

00:12:13,440 --> 00:12:17,370
complexity that we saw on the client

00:12:14,970 --> 00:12:19,740
we've got models we've got our views in

00:12:17,370 --> 00:12:21,720
our controllers these concepts that we

00:12:19,740 --> 00:12:23,250
were saw on the server I mean whatever

00:12:21,720 --> 00:12:26,400
you want to call that controller part

00:12:23,250 --> 00:12:29,610
I'm I have weird feelings about that

00:12:26,400 --> 00:12:31,650
name and then we've got routes okay and

00:12:29,610 --> 00:12:35,160
we add those to the equations so that we

00:12:31,650 --> 00:12:36,900
can so that we can address parts of our

00:12:35,160 --> 00:12:38,760
state space so I look at this and I

00:12:36,900 --> 00:12:40,500
think this is a little weird like why do

00:12:38,760 --> 00:12:42,390
we have right routes here like on the

00:12:40,500 --> 00:12:44,730
server the the purpose that they served

00:12:42,390 --> 00:12:46,650
was that we needed to be able to address

00:12:44,730 --> 00:12:48,810
all the transitions and all the states

00:12:46,650 --> 00:12:50,970
and here we don't really need to do that

00:12:48,810 --> 00:12:52,470
and then I remember okay it's actually

00:12:50,970 --> 00:12:53,790
not weird at all because we still need

00:12:52,470 --> 00:12:56,400
to be able to address parts of that

00:12:53,790 --> 00:12:58,230
state space we absolutely need to be

00:12:56,400 --> 00:12:59,820
able to take the URL in the address bar

00:12:58,230 --> 00:13:03,170
and give that to your friend and have

00:12:59,820 --> 00:13:06,390
them see exactly the same state on the

00:13:03,170 --> 00:13:08,640
the web page so address ability and the

00:13:06,390 --> 00:13:13,640
support of routes are still a really key

00:13:08,640 --> 00:13:13,640
part of our of our design

00:13:14,800 --> 00:13:19,450
so let's take a little look at the

00:13:17,980 --> 00:13:21,220
typical way that we might structure some

00:13:19,450 --> 00:13:23,019
of our client side code to account for

00:13:21,220 --> 00:13:24,820
the need to be able to address all parts

00:13:23,019 --> 00:13:28,660
of the state space so I'm going to give

00:13:24,820 --> 00:13:31,420
this example in backbone so we've got an

00:13:28,660 --> 00:13:34,120
animal and a collection of partying

00:13:31,420 --> 00:13:36,190
animals we've got a party view which has

00:13:34,120 --> 00:13:37,300
a template and a render function and

00:13:36,190 --> 00:13:38,829
what it's going to do is it's going to

00:13:37,300 --> 00:13:40,000
take the template it's going to take the

00:13:38,829 --> 00:13:41,470
model and it's going to mash them

00:13:40,000 --> 00:13:45,700
together expect something out onto the

00:13:41,470 --> 00:13:46,990
view and then we've got our router and

00:13:45,700 --> 00:13:49,450
we're defining a couple of routes here

00:13:46,990 --> 00:13:52,300
we can start the party and and turn the

00:13:49,450 --> 00:13:54,730
music on and let them go and we can also

00:13:52,300 --> 00:13:56,709
uninvite any misbehavior people so we're

00:13:54,730 --> 00:13:58,029
going to revoke party rights what we're

00:13:56,709 --> 00:13:59,950
doing here is we're taking an incoming

00:13:58,029 --> 00:14:01,779
parameter from the URL we're grabbing

00:13:59,950 --> 00:14:03,040
that collection we are finding the

00:14:01,779 --> 00:14:04,600
animal in the collection we're

00:14:03,040 --> 00:14:07,269
destroying the model and we're reaching

00:14:04,600 --> 00:14:10,930
back into the into the Dom to remove the

00:14:07,269 --> 00:14:13,269
view and in the starting the party case

00:14:10,930 --> 00:14:15,519
it's very similar we're creating we're

00:14:13,269 --> 00:14:18,760
creating of you doing a fish and a

00:14:15,519 --> 00:14:20,170
render so what's going on here we're

00:14:18,760 --> 00:14:22,149
breaking encapsulation to push

00:14:20,170 --> 00:14:25,440
everything up into the Russian portion

00:14:22,149 --> 00:14:28,149
of our code so we've got this view

00:14:25,440 --> 00:14:30,970
controller thing that's responsible for

00:14:28,149 --> 00:14:33,640
doing some initial rendering and then

00:14:30,970 --> 00:14:34,839
when it's got a reference to our model

00:14:33,640 --> 00:14:35,920
and then the round kicks off and the

00:14:34,839 --> 00:14:38,890
first thing that it does it does an

00:14:35,920 --> 00:14:41,170
active look up for the model so we've

00:14:38,890 --> 00:14:42,459
got these stateful concepts where our

00:14:41,170 --> 00:14:43,600
view already has a reference to the

00:14:42,459 --> 00:14:45,160
model but we're going to grab the

00:14:43,600 --> 00:14:47,500
collection and do look up anywhere okay

00:14:45,160 --> 00:14:48,910
that's fine and then we're going to

00:14:47,500 --> 00:14:50,649
perform an extra the hints that model

00:14:48,910 --> 00:14:53,709
and we're going to transition it into a

00:14:50,649 --> 00:14:55,839
new state and then the next thing we

00:14:53,709 --> 00:14:58,690
need to do is deal with some view

00:14:55,839 --> 00:15:01,149
concerns by ie we need to remove that

00:14:58,690 --> 00:15:03,339
few from from the screen so again we're

00:15:01,149 --> 00:15:05,290
breaking encapsulation here the view

00:15:03,339 --> 00:15:07,270
controller thing already has a reference

00:15:05,290 --> 00:15:08,980
to the Dom element why are we creating

00:15:07,270 --> 00:15:10,570
the spaghetti code in the router why

00:15:08,980 --> 00:15:12,310
wouldn't we just let the view be in

00:15:10,570 --> 00:15:16,269
charge over time that's going to become

00:15:12,310 --> 00:15:18,190
very difficult to maintain over time so

00:15:16,269 --> 00:15:19,810
on the client side we're often working

00:15:18,190 --> 00:15:21,670
with these heavily stateful frameworks

00:15:19,810 --> 00:15:23,470
and all the objects that we need in

00:15:21,670 --> 00:15:25,510
order to perform a state transition that

00:15:23,470 --> 00:15:28,080
already instantiated and already held in

00:15:25,510 --> 00:15:30,030
memory we don't need to structure

00:15:28,080 --> 00:15:32,190
application in the same way as we were

00:15:30,030 --> 00:15:34,770
on the server because on the client we

00:15:32,190 --> 00:15:36,810
can fully embrace stayed we don't need

00:15:34,770 --> 00:15:39,060
to manipulate our models like they arose

00:15:36,810 --> 00:15:43,740
in a database a models can be rich

00:15:39,060 --> 00:15:46,110
interactive real objects so we took

00:15:43,740 --> 00:15:48,000
these ideas these flavors of MVC that we

00:15:46,110 --> 00:15:50,580
saw on the server and we try to apply

00:15:48,000 --> 00:15:52,530
that very linear approach to the client

00:15:50,580 --> 00:15:55,320
and we started to break encapsulation

00:15:52,530 --> 00:15:57,420
pretty quickly an order 200 application

00:15:55,320 --> 00:15:59,850
around the design and and the need to

00:15:57,420 --> 00:16:02,490
support routes we started to treat state

00:15:59,850 --> 00:16:04,500
and events and the very things that give

00:16:02,490 --> 00:16:06,150
us that rich interactivity on the client

00:16:04,500 --> 00:16:10,140
side we started to treat that like a

00:16:06,150 --> 00:16:12,120
second-class citizen at the side of the

00:16:10,140 --> 00:16:15,890
talk I showed you that or fall jQuery

00:16:12,120 --> 00:16:18,540
madness we were doing weird things like

00:16:15,890 --> 00:16:21,210
triggering events from the DOM and then

00:16:18,540 --> 00:16:22,620
I reaching into the Dom to grab the

00:16:21,210 --> 00:16:24,600
state and then persisting that state

00:16:22,620 --> 00:16:26,580
back into the diamond it was all kind of

00:16:24,600 --> 00:16:28,650
crazy we were executing that state

00:16:26,580 --> 00:16:30,990
transition to update the DOM and show

00:16:28,650 --> 00:16:33,300
the new state and that code doesn't

00:16:30,990 --> 00:16:35,760
scale very well beyond a very simple use

00:16:33,300 --> 00:16:38,190
case and the reason is because it breaks

00:16:35,760 --> 00:16:39,810
encapsulation and I kind of feel like

00:16:38,190 --> 00:16:41,280
we're back at this again we're using

00:16:39,810 --> 00:16:43,410
routes heavily because they're

00:16:41,280 --> 00:16:46,400
convenient but in doing this we're

00:16:43,410 --> 00:16:49,920
sacrificing clarity in our architecture

00:16:46,400 --> 00:16:51,900
so to build accessible single page

00:16:49,920 --> 00:16:54,090
JavaScript apps we still need to use

00:16:51,900 --> 00:16:55,590
rounds and it's critical that we're able

00:16:54,090 --> 00:16:58,260
to address portions of the state space

00:16:55,590 --> 00:17:00,750
but in my mind routes are a feature

00:16:58,260 --> 00:17:03,150
they're not the cornerstone of our

00:17:00,750 --> 00:17:05,040
architecture the cornerstone of our

00:17:03,150 --> 00:17:08,339
design and architecture should really be

00:17:05,040 --> 00:17:10,740
concerned with state and events so I

00:17:08,339 --> 00:17:11,850
routes the problem here I don't I don't

00:17:10,740 --> 00:17:13,620
think right so the problem here I think

00:17:11,850 --> 00:17:15,270
the thing that's causing us pain is only

00:17:13,620 --> 00:17:17,280
using routes as the part of the

00:17:15,270 --> 00:17:19,320
architecture breaking that encapsulation

00:17:17,280 --> 00:17:21,120
of the views and the models in order to

00:17:19,320 --> 00:17:25,650
get it done as quickly as possible it's

00:17:21,120 --> 00:17:27,540
not giving us a way to scale a design so

00:17:25,650 --> 00:17:30,030
separating concerns as we've seen is

00:17:27,540 --> 00:17:32,190
super important we've implemented that

00:17:30,030 --> 00:17:33,420
NBC design pattern on the client and the

00:17:32,190 --> 00:17:35,910
first place to get rid of all that

00:17:33,420 --> 00:17:37,470
tangled mess but somewhere in the course

00:17:35,910 --> 00:17:39,550
of that doing that with two closely

00:17:37,470 --> 00:17:41,140
emulated the designs that we see

00:17:39,550 --> 00:17:42,760
on the server the things that work

00:17:41,140 --> 00:17:45,010
really well for stateless with

00:17:42,760 --> 00:17:48,010
applications and as the complexity grows

00:17:45,010 --> 00:17:49,210
in our various state full application we

00:17:48,010 --> 00:17:53,050
start to see the cracks and that

00:17:49,210 --> 00:17:54,670
approach so thankfully I think we can

00:17:53,050 --> 00:17:56,110
find a happy medium where we can embrace

00:17:54,670 --> 00:17:59,170
the need for routes on the client

00:17:56,110 --> 00:18:01,750
without relying on them to drive state

00:17:59,170 --> 00:18:04,330
and state changes within our application

00:18:01,750 --> 00:18:06,250
we can use events in a composable

00:18:04,330 --> 00:18:09,940
architecture to help us separate out our

00:18:06,250 --> 00:18:11,800
concerns so let's first take a look at

00:18:09,940 --> 00:18:15,280
the bloated router code example that I

00:18:11,800 --> 00:18:17,050
gave hopefully it's starting to start to

00:18:15,280 --> 00:18:19,090
be apparent that addressing a state

00:18:17,050 --> 00:18:21,490
transition like a delete is probably not

00:18:19,090 --> 00:18:23,140
the best thing to do in this case so

00:18:21,490 --> 00:18:25,330
we've still got our models we've got our

00:18:23,140 --> 00:18:27,880
animal model and our party animal

00:18:25,330 --> 00:18:29,980
collection we've got a party animal view

00:18:27,880 --> 00:18:32,020
which as before has a template but now

00:18:29,980 --> 00:18:34,120
it has an event hash which is cool

00:18:32,020 --> 00:18:36,970
because it means that this view is now

00:18:34,120 --> 00:18:38,710
listening for click events on a link and

00:18:36,970 --> 00:18:42,640
it's going to write that down to a

00:18:38,710 --> 00:18:44,230
delete function that delete function is

00:18:42,640 --> 00:18:45,970
able to say hey I'm just going to delete

00:18:44,230 --> 00:18:48,340
the model that I have a reference to and

00:18:45,970 --> 00:18:50,950
then I'm going to close myself which is

00:18:48,340 --> 00:18:54,390
so much more simpler than looking up a

00:18:50,950 --> 00:18:56,800
model and look reaching into the DOM and

00:18:54,390 --> 00:18:59,460
removing this debt from from the Dom

00:18:56,800 --> 00:19:03,820
it's kind of the concerns are way more

00:18:59,460 --> 00:19:04,870
way more encapsulated in this case so as

00:19:03,820 --> 00:19:07,840
I say we don't need to do that

00:19:04,870 --> 00:19:10,030
unnecessary look up anymore we're also

00:19:07,840 --> 00:19:12,400
using declarative events so we combine

00:19:10,030 --> 00:19:15,040
the delete link to the delete the delete

00:19:12,400 --> 00:19:16,900
function on the view and it allows us to

00:19:15,040 --> 00:19:19,180
call destroy on the model directly which

00:19:16,900 --> 00:19:22,780
is a huge one and for bonus points we

00:19:19,180 --> 00:19:24,460
live interview take care of itself so

00:19:22,780 --> 00:19:26,440
that's fine but I said earlier that

00:19:24,460 --> 00:19:27,850
routing is still a key part of the

00:19:26,440 --> 00:19:30,190
client-side code and we need to support

00:19:27,850 --> 00:19:32,860
this feature of addressability and some

00:19:30,190 --> 00:19:34,120
of the state space our application is

00:19:32,860 --> 00:19:35,800
going to suck if we don't do this we

00:19:34,120 --> 00:19:37,660
need to be able to give those URLs to

00:19:35,800 --> 00:19:40,900
our friends so that they can arrive at

00:19:37,660 --> 00:19:43,900
the same state that we did so how can we

00:19:40,900 --> 00:19:45,940
better embrace the need for an event

00:19:43,900 --> 00:19:48,250
rich envy whatever you want to call it

00:19:45,940 --> 00:19:50,710
pattern and the need for routes in a

00:19:48,250 --> 00:19:52,440
clear architecture so I just want to

00:19:50,710 --> 00:19:54,810
show you a couple of ideas

00:19:52,440 --> 00:19:58,640
it means and you guys can apply them in

00:19:54,810 --> 00:20:00,660
whichever way you choose as appropriate

00:19:58,640 --> 00:20:03,120
so we're going to take those models

00:20:00,660 --> 00:20:04,920
those rich objects those views which are

00:20:03,120 --> 00:20:07,530
responsible for rendering templates and

00:20:04,920 --> 00:20:09,960
then the views mediating any interaction

00:20:07,530 --> 00:20:11,940
between the template and sorry the DOM

00:20:09,960 --> 00:20:13,620
and translating that back down to the

00:20:11,940 --> 00:20:15,270
model and we've got a controller object

00:20:13,620 --> 00:20:17,250
which is responsible for keeping track

00:20:15,270 --> 00:20:18,780
of those models and views and we're

00:20:17,250 --> 00:20:19,920
going to take all of those and we're

00:20:18,780 --> 00:20:23,090
going to put them into a single

00:20:19,920 --> 00:20:25,350
component logical component and module

00:20:23,090 --> 00:20:27,270
so module was responsible for

00:20:25,350 --> 00:20:30,780
coordinating all of the state and events

00:20:27,270 --> 00:20:31,800
that we have at a very micro level so

00:20:30,780 --> 00:20:33,210
we're not talking a one-to-one

00:20:31,800 --> 00:20:36,570
relationship here we're talking about

00:20:33,210 --> 00:20:38,670
many views mini models all aggregated

00:20:36,570 --> 00:20:40,380
within a module because they are related

00:20:38,670 --> 00:20:44,250
to each other on some level of

00:20:40,380 --> 00:20:46,290
functionality so it's a discrete area of

00:20:44,250 --> 00:20:50,190
a discrete functional unit I guess you

00:20:46,290 --> 00:20:52,200
could say so those modules are free to

00:20:50,190 --> 00:20:54,030
present views and raise events within

00:20:52,200 --> 00:20:57,240
themselves and keep track of their own

00:20:54,030 --> 00:20:58,800
internal state so just to briefly note

00:20:57,240 --> 00:21:02,130
that while these models are kind of

00:20:58,800 --> 00:21:05,040
motor sonic not models modules are free

00:21:02,130 --> 00:21:06,780
to present their views I don't think

00:21:05,040 --> 00:21:08,580
they should be directly free to start

00:21:06,780 --> 00:21:10,290
placing themselves on the Dom because

00:21:08,580 --> 00:21:12,840
then your coupling those modules to the

00:21:10,290 --> 00:21:14,610
state of the Dom at any given time so

00:21:12,840 --> 00:21:17,040
rather what should happen is we should

00:21:14,610 --> 00:21:19,140
delegate that responsibility to another

00:21:17,040 --> 00:21:21,930
component or some another component

00:21:19,140 --> 00:21:23,820
responsible for making a choice of how

00:21:21,930 --> 00:21:25,890
our overall view state is going to be

00:21:23,820 --> 00:21:28,200
composed and so this is going to be the

00:21:25,890 --> 00:21:31,080
job of some kind of layout manager thing

00:21:28,200 --> 00:21:32,880
naming things as hard it's

00:21:31,080 --> 00:21:36,660
responsibility is going to be to compose

00:21:32,880 --> 00:21:39,540
the UI so the layout manager is going to

00:21:36,660 --> 00:21:41,190
define a top-level view a shell and it's

00:21:39,540 --> 00:21:43,260
going to have areas that the modules are

00:21:41,190 --> 00:21:47,460
able to render within so like a sidebar

00:21:43,260 --> 00:21:49,410
for two main content region and when a

00:21:47,460 --> 00:21:51,510
new module is activated the layout

00:21:49,410 --> 00:21:54,480
manager is going to be responsible for

00:21:51,510 --> 00:21:56,820
swapping out existing views with the new

00:21:54,480 --> 00:21:58,290
views that this module is presenting so

00:21:56,820 --> 00:22:00,390
internally the module can figure out

00:21:58,290 --> 00:22:01,800
which control are in which view and all

00:22:00,390 --> 00:22:04,140
of that kind of stuff needs to be

00:22:01,800 --> 00:22:06,070
presented but the layout manager is

00:22:04,140 --> 00:22:08,000
responsible for that composite

00:22:06,070 --> 00:22:09,440
so it's going to look a little bit like

00:22:08,000 --> 00:22:11,299
this we've got a bunch of modules

00:22:09,440 --> 00:22:13,220
presenting Mike reviews and a layout

00:22:11,299 --> 00:22:16,100
composer working out how they all work

00:22:13,220 --> 00:22:19,400
together responsible for composing that

00:22:16,100 --> 00:22:21,530
you I so this placement is going to

00:22:19,400 --> 00:22:24,740
occur when our new module is activated

00:22:21,530 --> 00:22:26,900
how does that work so the thing I think

00:22:24,740 --> 00:22:28,669
should be responsible for this is

00:22:26,900 --> 00:22:30,230
forgiving the modules to the layout

00:22:28,669 --> 00:22:32,120
manager as some kind of dispatcher

00:22:30,230 --> 00:22:33,919
object it's going to listen for

00:22:32,120 --> 00:22:36,799
interesting events which indicate that a

00:22:33,919 --> 00:22:39,650
new module needs to be involved and when

00:22:36,799 --> 00:22:41,210
it when it asks when when it receives

00:22:39,650 --> 00:22:42,440
these interesting events it's going to

00:22:41,210 --> 00:22:43,850
load the target module it's going to

00:22:42,440 --> 00:22:46,700
instantiate it and it's going to give it

00:22:43,850 --> 00:22:51,500
to the layout manager who will then in

00:22:46,700 --> 00:22:53,510
turn compose the application shell so

00:22:51,500 --> 00:22:55,640
one of the interesting events that this

00:22:53,510 --> 00:22:59,870
dispatcher object thing might listen to

00:22:55,640 --> 00:23:01,220
our our routes so a routing event might

00:22:59,870 --> 00:23:03,260
fire and the router is going to

00:23:01,220 --> 00:23:05,570
facilitate the mapping between a URL and

00:23:03,260 --> 00:23:08,090
a module or even a collection of modules

00:23:05,570 --> 00:23:10,610
it's responsible for observing on and

00:23:08,090 --> 00:23:12,530
acting on URL changes but it doesn't

00:23:10,610 --> 00:23:14,539
actually do anything with it other than

00:23:12,530 --> 00:23:15,710
say hey the routes changed and these are

00:23:14,539 --> 00:23:18,919
the modules that I know you need to

00:23:15,710 --> 00:23:21,200
invoke now it's going to delegate over

00:23:18,919 --> 00:23:22,669
to the dispatcher and the really cool

00:23:21,200 --> 00:23:24,860
thing about this as it means that other

00:23:22,669 --> 00:23:26,720
events have the opportunity to be raised

00:23:24,860 --> 00:23:28,039
and signal to the dispatcher that new

00:23:26,720 --> 00:23:30,230
module should be loaded we're not

00:23:28,039 --> 00:23:32,059
hinging our design around route changes

00:23:30,230 --> 00:23:35,590
or out changes kind of sit on the side

00:23:32,059 --> 00:23:35,590
as a feature

00:23:42,360 --> 00:23:48,330
and then the last thing that we have is

00:23:45,180 --> 00:23:49,710
the bootstrap over application so this

00:23:48,330 --> 00:23:51,420
is the entry point and the extra point

00:23:49,710 --> 00:23:53,610
of our application and it's responsible

00:23:51,420 --> 00:23:55,950
for composing the the top level

00:23:53,610 --> 00:23:58,440
architecture that we've kind of got

00:23:55,950 --> 00:24:02,460
going on here and it also acts as an

00:23:58,440 --> 00:24:03,900
extension point for your life cycle so

00:24:02,460 --> 00:24:06,840
we've split up some of those concerns

00:24:03,900 --> 00:24:08,070
that we had around state and events and

00:24:06,840 --> 00:24:09,420
all the many views that we were

00:24:08,070 --> 00:24:12,060
displaying at any given point in time

00:24:09,420 --> 00:24:13,860
and the state of the address bar we've

00:24:12,060 --> 00:24:15,960
come up with a much more composable

00:24:13,860 --> 00:24:17,580
design where we're using events to

00:24:15,960 --> 00:24:21,540
transition into new states and a

00:24:17,580 --> 00:24:24,930
nonlinear fashion so I've actually gone

00:24:21,540 --> 00:24:27,240
really quick so if it was too long and

00:24:24,930 --> 00:24:29,430
you didn't read it because reasons I'll

00:24:27,240 --> 00:24:30,900
sum it up for you so the management of

00:24:29,430 --> 00:24:33,420
our state's basically it's really hard

00:24:30,900 --> 00:24:35,160
when we don't separate our concerns when

00:24:33,420 --> 00:24:37,590
when the complexity starts to blow out

00:24:35,160 --> 00:24:39,330
on the client we should be using routes

00:24:37,590 --> 00:24:41,280
were dressed state but never state

00:24:39,330 --> 00:24:43,920
transitions and we should be taking

00:24:41,280 --> 00:24:45,690
ideas from one context from it from

00:24:43,920 --> 00:24:47,490
another and applying them and taking

00:24:45,690 --> 00:24:49,950
inspiration server that's great that's

00:24:47,490 --> 00:24:51,540
how new ideas form but if we're not

00:24:49,950 --> 00:24:54,720
careful and we treat this like a

00:24:51,540 --> 00:24:57,390
rulebook we start to apply patterns that

00:24:54,720 --> 00:24:59,820
work well for a linear for a linear

00:24:57,390 --> 00:25:01,530
architecture in an estate space where

00:24:59,820 --> 00:25:04,380
it's nonlinear and the cracks start to

00:25:01,530 --> 00:25:06,030
show so we need to mold these ideas to

00:25:04,380 --> 00:25:10,140
support the new requirements the

00:25:06,030 --> 00:25:11,880
requirement to be stifled so we need to

00:25:10,140 --> 00:25:14,340
embrace events within the same xicon

00:25:11,880 --> 00:25:17,970
execution context and we don't want to

00:25:14,340 --> 00:25:19,410
make everything into our router we need

00:25:17,970 --> 00:25:22,050
to make sure that we're architecting our

00:25:19,410 --> 00:25:24,360
client side code lists like it's a web

00:25:22,050 --> 00:25:29,360
server because let's face it it's not a

00:25:24,360 --> 00:25:29,360

YouTube URL: https://www.youtube.com/watch?v=YPJ20nCEAuA


