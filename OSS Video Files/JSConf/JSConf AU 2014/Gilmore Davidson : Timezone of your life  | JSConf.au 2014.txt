Title: Gilmore Davidson : Timezone of your life  | JSConf.au 2014
Publication date: 2014-12-01
Playlist: JSConf AU 2014
Description: 
	Detecting time zones in the browser.
Captions: 
	00:00:00,000 --> 00:00:02,060
Oh

00:00:05,950 --> 00:00:10,940
titled my talk is detecting time zones

00:00:08,840 --> 00:00:14,570
in the browser are you a freaking

00:00:10,940 --> 00:00:17,090
masochist because time zones are hard

00:00:14,570 --> 00:00:20,150
and time zones have had a lot of

00:00:17,090 --> 00:00:22,420
problems with developers this joke that

00:00:20,150 --> 00:00:24,740
goes around Twitter every now and then

00:00:22,420 --> 00:00:26,090
you can tell the developer by just

00:00:24,740 --> 00:00:29,210
mentioning the word time zones and

00:00:26,090 --> 00:00:31,760
watching them cringe I will start with a

00:00:29,210 --> 00:00:33,410
quick introduction though you'll find on

00:00:31,760 --> 00:00:35,839
the internet generally looking like one

00:00:33,410 --> 00:00:39,350
of the top two pictures so I'm Gil more

00:00:35,839 --> 00:00:42,409
or less in various different systems I

00:00:39,350 --> 00:00:43,729
am NOT your broom on Twitter and I very

00:00:42,409 --> 00:00:47,780
occasionally right things at a site that

00:00:43,729 --> 00:00:52,010
doesn't have a logo so I'll start with a

00:00:47,780 --> 00:00:55,609
common problem on the web which is the

00:00:52,010 --> 00:00:58,159
server has a concept of now and outputs

00:00:55,609 --> 00:00:59,510
a date or a time because all right there

00:00:58,159 --> 00:01:01,609
you go that's that's what time this

00:00:59,510 --> 00:01:05,210
thing happened but depending on where

00:01:01,609 --> 00:01:06,590
your users are that now isn't actually

00:01:05,210 --> 00:01:09,110
now for them it could be in the future

00:01:06,590 --> 00:01:11,210
it could be in the past but there's no

00:01:09,110 --> 00:01:12,829
indication given and this is actually a

00:01:11,210 --> 00:01:16,520
very common problem in Australia where a

00:01:12,829 --> 00:01:19,909
lot of servers are in the San Francisco

00:01:16,520 --> 00:01:23,149
and times that are of 17 hours behind us

00:01:19,909 --> 00:01:25,759
on particularly useful it's even worse

00:01:23,149 --> 00:01:29,060
when you're presented with you I that

00:01:25,759 --> 00:01:32,659
makes you write the time for scheduling

00:01:29,060 --> 00:01:35,450
system there's some examples there from

00:01:32,659 --> 00:01:36,740
Bob your software if there's no

00:01:35,450 --> 00:01:38,810
indication of what time the server

00:01:36,740 --> 00:01:41,719
thinks that is how you meant to know

00:01:38,810 --> 00:01:43,100
when something's going to happen so

00:01:41,719 --> 00:01:45,469
there's actually a very very simple

00:01:43,100 --> 00:01:49,280
solution to this which is to just not

00:01:45,469 --> 00:01:52,820
ever show date or time it's perfect

00:01:49,280 --> 00:01:54,049
we're done thanks for listening except

00:01:52,820 --> 00:01:56,630
that's not actually particularly

00:01:54,049 --> 00:02:00,740
practical so we'll try a different

00:01:56,630 --> 00:02:03,109
solution basically you can make the

00:02:00,740 --> 00:02:06,200
conscious choice the output only server

00:02:03,109 --> 00:02:08,210
time and at least indicate what time

00:02:06,200 --> 00:02:11,060
zone that's in and say alright deal with

00:02:08,210 --> 00:02:12,069
it you work it out but here's what we've

00:02:11,060 --> 00:02:14,680
got

00:02:12,069 --> 00:02:16,359
but really that's not actually a

00:02:14,680 --> 00:02:21,370
solution either it's just the problem

00:02:16,359 --> 00:02:24,189
again so to have a look at why this is a

00:02:21,370 --> 00:02:28,209
problem let's actually look at how time

00:02:24,189 --> 00:02:34,780
zones work this is this is clearly a

00:02:28,209 --> 00:02:36,879
draft edition alright so time hundreds

00:02:34,780 --> 00:02:38,859
of years ago there was just the concept

00:02:36,879 --> 00:02:40,329
of local time and it was based on the

00:02:38,859 --> 00:02:43,780
Sun when the sun's at the highest point

00:02:40,329 --> 00:02:45,340
in the sky it's noon but depending on

00:02:43,780 --> 00:02:47,849
where you were that everyone had

00:02:45,340 --> 00:02:50,919
different versions of local time and

00:02:47,849 --> 00:02:53,549
this wasn't a problem that the village

00:02:50,919 --> 00:02:56,980
down the road was eight minutes off

00:02:53,549 --> 00:02:58,750
until you got to Telegraph's and

00:02:56,980 --> 00:03:00,310
railways and people started traveling

00:02:58,750 --> 00:03:03,370
long distances and suddenly it actually

00:03:00,310 --> 00:03:05,079
became a bit of a problem so obviously

00:03:03,370 --> 00:03:09,430
they need some work out some sort of

00:03:05,079 --> 00:03:12,069
standardized system and back in eighteen

00:03:09,430 --> 00:03:14,349
seventy nine I think it was some kind of

00:03:12,069 --> 00:03:16,479
came up with the idea of well there's 24

00:03:14,349 --> 00:03:20,139
hours in a day he divided the world up

00:03:16,479 --> 00:03:22,689
into 24 bands works out to 15 degree

00:03:20,139 --> 00:03:25,780
longer dude bands you just work out

00:03:22,689 --> 00:03:28,329
where you are in the world and assign a

00:03:25,780 --> 00:03:31,209
time based on that so it was a nice

00:03:28,329 --> 00:03:32,650
perfect solution it was mathematical it

00:03:31,209 --> 00:03:35,680
was precise it was easy to calculate

00:03:32,650 --> 00:03:38,169
especially for software later on and

00:03:35,680 --> 00:03:40,449
like all perfect solutions it remained

00:03:38,169 --> 00:03:41,709
perfect right up until the time it met

00:03:40,449 --> 00:03:44,319
reality and became completely

00:03:41,709 --> 00:03:48,280
impractical because this is what it

00:03:44,319 --> 00:03:50,709
actually looks like the nice neat bands

00:03:48,280 --> 00:03:52,389
aren't quite so neat anymore because I

00:03:50,709 --> 00:03:56,620
hit country boundaries and state

00:03:52,389 --> 00:03:57,729
boundaries and politics and this doesn't

00:03:56,620 --> 00:04:00,790
even include daylight saving time

00:03:57,729 --> 00:04:02,680
differences so obviously there are

00:04:00,790 --> 00:04:05,769
discrepancies when you're starting to

00:04:02,680 --> 00:04:08,049
walk boundaries like this and this is

00:04:05,769 --> 00:04:11,289
actually some great work by a guy called

00:04:08,049 --> 00:04:13,620
Stefano mo kio low volumes and can

00:04:11,289 --> 00:04:16,479
assume I'm pronouncing that right

00:04:13,620 --> 00:04:19,419
basically be the green on this map is

00:04:16,479 --> 00:04:21,489
where the times only is ahead of means

00:04:19,419 --> 00:04:23,979
all the time and the red is where it's

00:04:21,489 --> 00:04:25,680
behind so you can see Russia and China

00:04:23,979 --> 00:04:28,590
are particularly behind

00:04:25,680 --> 00:04:31,800
due to using the China touches I think

00:04:28,590 --> 00:04:33,660
something like eight different time

00:04:31,800 --> 00:04:36,479
zones across its borders because it

00:04:33,660 --> 00:04:38,580
comportas 15 countries but it's all on

00:04:36,479 --> 00:04:40,530
one time zone so the parts in the Far

00:04:38,580 --> 00:04:45,930
West of China are actually three hours

00:04:40,530 --> 00:04:47,250
behind means all the time so obviously

00:04:45,930 --> 00:04:49,949
if you're trying to write a system based

00:04:47,250 --> 00:04:51,210
on this it's a real headache and you

00:04:49,949 --> 00:04:55,139
need some sort of common reference

00:04:51,210 --> 00:04:57,960
reference point now everyone will divert

00:04:55,139 --> 00:05:00,180
of greenwich mean time but this is a

00:04:57,960 --> 00:05:04,199
tech conference so we use the technical

00:05:00,180 --> 00:05:06,300
definition which is UTC so what is UTC

00:05:04,199 --> 00:05:10,110
actually stand for well the answer is

00:05:06,300 --> 00:05:11,789
nothing the International

00:05:10,110 --> 00:05:14,699
Telecommunication Union and the

00:05:11,789 --> 00:05:15,960
international astronomical union when

00:05:14,699 --> 00:05:19,169
they were defining the standard they

00:05:15,960 --> 00:05:22,020
wanted to have the same acronym for

00:05:19,169 --> 00:05:23,639
every language in the world and the

00:05:22,020 --> 00:05:25,139
English in the French of course didn't

00:05:23,639 --> 00:05:27,960
actually agree on what that acronym

00:05:25,139 --> 00:05:31,699
should be so in the end the compromise

00:05:27,960 --> 00:05:31,699
was made and everyone is equally wrong

00:05:32,990 --> 00:05:39,919
so how does UTC actually relate to gmt

00:05:37,070 --> 00:05:43,260
well if we use javascript notation and

00:05:39,919 --> 00:05:45,360
equality checks they're pretty much the

00:05:43,260 --> 00:05:48,090
same it's just that you TC is more

00:05:45,360 --> 00:05:50,010
scientifically precise if you want to

00:05:48,090 --> 00:05:56,340
think of it in software terms gmt is

00:05:50,010 --> 00:05:58,039
deprecated ok so we're gone looked at

00:05:56,340 --> 00:06:01,050
the history of time zones a little bit

00:05:58,039 --> 00:06:03,360
so now you think all right I know a

00:06:01,050 --> 00:06:05,610
solution I can get the user to pick

00:06:03,360 --> 00:06:10,099
their own time zone and I'll just

00:06:05,610 --> 00:06:14,610
convert all the dates into that which

00:06:10,099 --> 00:06:17,250
now presents other problems so my talk

00:06:14,610 --> 00:06:19,229
is actually briefly it's mostly about

00:06:17,250 --> 00:06:20,460
the browser but I'll give a quick toke

00:06:19,229 --> 00:06:24,720
invention to know to make sure my

00:06:20,460 --> 00:06:27,539
presentation is web-scale you'd set

00:06:24,720 --> 00:06:29,789
process damage opti z equals x 0 name

00:06:27,539 --> 00:06:32,070
and all your fake calculations after

00:06:29,789 --> 00:06:36,360
that we'll be in the appropriate time

00:06:32,070 --> 00:06:38,330
zone so you can the user an option to

00:06:36,360 --> 00:06:42,770
select from a nice simple

00:06:38,330 --> 00:06:45,889
list this is how to pick Sydney time

00:06:42,770 --> 00:06:49,099
zone for various pieces of popular

00:06:45,889 --> 00:06:51,289
software so as I mentioned in the slide

00:06:49,099 --> 00:06:53,270
before there are four hundred and twenty

00:06:51,289 --> 00:06:55,129
three times no definitions at the moment

00:06:53,270 --> 00:06:57,949
that's there's still more being added

00:06:55,129 --> 00:07:00,469
all the time so every time zone picker

00:06:57,949 --> 00:07:03,379
that you give your user is a trade-off

00:07:00,469 --> 00:07:07,009
between the ease of use and the actual

00:07:03,379 --> 00:07:08,960
comprehensiveness of the list so at this

00:07:07,009 --> 00:07:10,400
point you need to ask yourself do you

00:07:08,960 --> 00:07:13,819
even really need to store the use of

00:07:10,400 --> 00:07:15,259
preference because what what are you

00:07:13,819 --> 00:07:17,419
really trying to achieve you're just

00:07:15,259 --> 00:07:21,169
trying to take a date and a time and

00:07:17,419 --> 00:07:25,400
display it in a way that's relative for

00:07:21,169 --> 00:07:28,759
your users so what you do is you only

00:07:25,400 --> 00:07:31,849
ever reference UTC your server stores

00:07:28,759 --> 00:07:33,620
UTC you'll see the output to TC and as a

00:07:31,849 --> 00:07:34,940
side note you should only ever store UDC

00:07:33,620 --> 00:07:36,889
anyway because otherwise your day

00:07:34,940 --> 00:07:39,919
calculations for adding and subtracting

00:07:36,889 --> 00:07:42,020
data is going to get really hard so the

00:07:39,919 --> 00:07:44,270
server just output to UTC and then you

00:07:42,020 --> 00:07:46,580
convert it to local time in the browser

00:07:44,270 --> 00:07:49,490
without actually knowing what the time

00:07:46,580 --> 00:07:52,279
zone is this is by far the best solution

00:07:49,490 --> 00:07:54,349
and it's used by a few popular sites

00:07:52,279 --> 00:07:56,659
like I'm sure the github people can tell

00:07:54,349 --> 00:08:00,319
you that's what they use in the web UI

00:07:56,659 --> 00:08:03,169
and the really really basic

00:08:00,319 --> 00:08:06,800
implementation looks like this you have

00:08:03,169 --> 00:08:09,500
a html5 time element which has the

00:08:06,800 --> 00:08:13,490
date-time attribute this is using the

00:08:09,500 --> 00:08:15,379
iso standard date time format the Z at

00:08:13,490 --> 00:08:20,690
the end of the string stands for Zulu

00:08:15,379 --> 00:08:23,669
which is just another word for UTC this

00:08:20,690 --> 00:08:26,139
of course it is

00:08:23,669 --> 00:08:29,860
zillow actually come from a nautical

00:08:26,139 --> 00:08:31,599
term where they had defined letters of

00:08:29,860 --> 00:08:34,229
the alphabet for each zone that they

00:08:31,599 --> 00:08:39,399
went through and Zed was their reference

00:08:34,229 --> 00:08:42,550
so you grab the elements you quickly

00:08:39,399 --> 00:08:45,370
look through them you get the date-time

00:08:42,550 --> 00:08:48,160
attribute pass that straight into a new

00:08:45,370 --> 00:08:52,240
date object which recognizes the iso

00:08:48,160 --> 00:08:54,790
format but that is then converted that

00:08:52,240 --> 00:08:59,500
UTC absolute time stamp into your local

00:08:54,790 --> 00:09:01,570
time and you can just out put it in some

00:08:59,500 --> 00:09:04,209
way that probably is more friendly than

00:09:01,570 --> 00:09:09,160
to string you could use a library like

00:09:04,209 --> 00:09:12,510
moment to get friendlier dates so do you

00:09:09,160 --> 00:09:15,040
really need to store user preference

00:09:12,510 --> 00:09:16,899
unfortunately sometimes you do because

00:09:15,040 --> 00:09:18,520
you could be working with software that

00:09:16,899 --> 00:09:20,920
needs to reference it in the back end

00:09:18,520 --> 00:09:26,980
for some reason it could be scheduling

00:09:20,920 --> 00:09:29,290
automated alerts so now we come to the

00:09:26,980 --> 00:09:32,950
part what you really need to ask

00:09:29,290 --> 00:09:36,160
yourself what you're doing because okay

00:09:32,950 --> 00:09:37,839
you just put some times and information

00:09:36,160 --> 00:09:43,810
in the browser surely we can just detect

00:09:37,839 --> 00:09:49,570
it for them yeah good luck so the idea

00:09:43,810 --> 00:09:51,160
is simple you grab a new date you use

00:09:49,570 --> 00:09:53,079
the one method that we have available

00:09:51,160 --> 00:09:56,230
that has anything to do with time zones

00:09:53,079 --> 00:09:59,440
just get time zone offset and this

00:09:56,230 --> 00:10:02,079
returns your local time minus UTC as a

00:09:59,440 --> 00:10:04,770
value in minutes so for where we are

00:10:02,079 --> 00:10:08,170
right now that returns minus six hundred

00:10:04,770 --> 00:10:09,670
if it was a couple of weeks ago before

00:10:08,170 --> 00:10:13,600
we moved out of daylight savings that

00:10:09,670 --> 00:10:16,329
would be 660 so the idea is then you

00:10:13,600 --> 00:10:19,089
just map the offset to a list of time

00:10:16,329 --> 00:10:24,700
zones and do a quick look up and we're

00:10:19,089 --> 00:10:27,510
done not at all so to understand why

00:10:24,700 --> 00:10:33,310
this is a problem we'll take another

00:10:27,510 --> 00:10:36,040
little detour about four years ago guy

00:10:33,310 --> 00:10:37,810
called Patrick McKenzie read blog post

00:10:36,040 --> 00:10:42,759
falsehoods programmers believe about

00:10:37,810 --> 00:10:45,850
names and this was a very very widely

00:10:42,759 --> 00:10:48,009
spread article i highly recommend right

00:10:45,850 --> 00:10:52,089
there highly recommend you go find it if

00:10:48,009 --> 00:10:53,949
you haven't read it this was based on

00:10:52,089 --> 00:10:57,550
his experience working in translation

00:10:53,949 --> 00:10:59,500
software and he's named he went by any

00:10:57,550 --> 00:11:01,540
one of six different names and he

00:10:59,500 --> 00:11:03,370
generally broke software whenever he

00:11:01,540 --> 00:11:04,750
tries to use it because it made certain

00:11:03,370 --> 00:11:08,980
assumptions about the way names will

00:11:04,750 --> 00:11:11,430
formatted now this was referenced a

00:11:08,980 --> 00:11:14,829
couple of years later by Noah Sussman

00:11:11,430 --> 00:11:18,160
who wrote falsehoods programmers believe

00:11:14,829 --> 00:11:20,440
about time and this was mostly to do

00:11:18,160 --> 00:11:23,339
with hours minutes seconds timestamps

00:11:20,440 --> 00:11:26,649
and include a fun example that

00:11:23,339 --> 00:11:29,170
particular vm software if it suspended

00:11:26,649 --> 00:11:31,990
the vm it suspended the clock and when

00:11:29,170 --> 00:11:34,949
it resumed perhaps an hour later that

00:11:31,990 --> 00:11:37,690
one second could have lasted an hour

00:11:34,949 --> 00:11:40,000
this got spread around reddit and

00:11:37,690 --> 00:11:42,970
metafilter and hacker news and he got

00:11:40,000 --> 00:11:45,870
overwhelmed with the responses and three

00:11:42,970 --> 00:11:49,540
days later he wrote his follow-up post

00:11:45,870 --> 00:11:54,940
which contained 79 different falsehoods

00:11:49,540 --> 00:11:57,220
all gleamed from user comments all of

00:11:54,940 --> 00:12:00,760
which were mistakes that people had seen

00:11:57,220 --> 00:12:03,069
in software dealing with time now I'm

00:12:00,760 --> 00:12:04,630
not going to there's a full list on the

00:12:03,069 --> 00:12:07,449
right but I won't read out all of them I

00:12:04,630 --> 00:12:11,410
will just pick out a few of my favorite

00:12:07,449 --> 00:12:14,610
ones like the local time will not change

00:12:11,410 --> 00:12:17,170
during office hours which is wrong

00:12:14,610 --> 00:12:18,880
reading the clients clock and comparing

00:12:17,170 --> 00:12:22,510
to UTC is a good way to determine their

00:12:18,880 --> 00:12:26,069
time zone ya know and i can easily

00:12:22,510 --> 00:12:26,069
maintain the time zone with myself

00:12:29,380 --> 00:12:36,530
so problem number one with time zones

00:12:32,600 --> 00:12:38,630
stay alight saving time first of all

00:12:36,530 --> 00:12:42,530
some countries use daylight saving some

00:12:38,630 --> 00:12:44,420
countries time for those countries that

00:12:42,530 --> 00:12:46,970
do not all the states and territories

00:12:44,420 --> 00:12:50,990
use daylight saving Australia is a great

00:12:46,970 --> 00:12:53,210
example of this when they do use it they

00:12:50,990 --> 00:12:55,370
don't all change at the same time of

00:12:53,210 --> 00:12:56,900
year and if they do change on the same

00:12:55,370 --> 00:13:02,300
day they change at different hours of

00:12:56,900 --> 00:13:05,570
the day some countries don't change only

00:13:02,300 --> 00:13:09,560
twice a year Morocco for example bases

00:13:05,570 --> 00:13:11,600
its dates on Ramadan so they go into

00:13:09,560 --> 00:13:13,460
daylight savings and when Ramadan starts

00:13:11,600 --> 00:13:15,560
they come out of daylight savings one

00:13:13,460 --> 00:13:17,570
month so that it's easier to fast during

00:13:15,560 --> 00:13:20,000
daylight hours and then they go back

00:13:17,570 --> 00:13:24,760
into daylight savings for about a month

00:13:20,000 --> 00:13:27,530
and a half and then come out again and

00:13:24,760 --> 00:13:30,920
not every change into daylight savings

00:13:27,530 --> 00:13:35,630
is by one hour most of them are but Lord

00:13:30,920 --> 00:13:37,700
Howe Island changes by half an hour so

00:13:35,630 --> 00:13:40,430
that for six months of the year in

00:13:37,700 --> 00:13:42,830
winter it's half an hour ahead of Sydney

00:13:40,430 --> 00:13:44,600
and for the other half of the year it's

00:13:42,830 --> 00:13:46,940
on the same time as Sydney when City

00:13:44,600 --> 00:13:49,730
jumps forward an hour why they do this I

00:13:46,940 --> 00:13:52,640
have no idea but it's something software

00:13:49,730 --> 00:13:55,160
has to account for now when i was

00:13:52,640 --> 00:13:57,380
looking at time zones actually gave

00:13:55,160 --> 00:14:01,610
myself an excuse to play with d3 and did

00:13:57,380 --> 00:14:02,690
a visualization of different time zones

00:14:01,610 --> 00:14:06,440
and their daylight savings

00:14:02,690 --> 00:14:08,570
implementation now the details aren't

00:14:06,440 --> 00:14:13,250
really important but what it shows is

00:14:08,570 --> 00:14:15,800
there a hell of a lot of variation and

00:14:13,250 --> 00:14:17,870
now we come into the second major

00:14:15,800 --> 00:14:20,810
problem which is changing the rules

00:14:17,870 --> 00:14:23,920
because that is make up the rules all

00:14:20,810 --> 00:14:26,270
the time countries and regions are

00:14:23,920 --> 00:14:29,420
constantly changing what their base

00:14:26,270 --> 00:14:31,850
offset from UTC is russia is the prime

00:14:29,420 --> 00:14:33,350
case of this where they are arguing

00:14:31,850 --> 00:14:35,270
every year about whether they are in

00:14:33,350 --> 00:14:36,890
permanent wintertime or permanent

00:14:35,270 --> 00:14:38,390
summertime and they've changed their

00:14:36,890 --> 00:14:40,610
minds about three times over the last

00:14:38,390 --> 00:14:43,030
five years they're still trying to

00:14:40,610 --> 00:14:43,030
change it again

00:14:43,950 --> 00:14:49,240
regions can decide to start or stop

00:14:46,630 --> 00:14:52,360
using daylight saving time even while

00:14:49,240 --> 00:14:56,829
they were in daylight saving time Jordan

00:14:52,360 --> 00:14:59,529
for example in March 2012 just before

00:14:56,829 --> 00:15:00,910
daylight saving time ended always Judah

00:14:59,529 --> 00:15:02,760
and they decided you know what we're

00:15:00,910 --> 00:15:06,519
just staying in summer time all the time

00:15:02,760 --> 00:15:08,529
permanently they actually thought that

00:15:06,519 --> 00:15:11,380
it would save them electricity costs

00:15:08,529 --> 00:15:13,660
throughout the year and they wanted to

00:15:11,380 --> 00:15:16,630
see if it worked a year and a half later

00:15:13,660 --> 00:15:18,100
after massive protests from amongst

00:15:16,630 --> 00:15:19,959
others the Jordanian Teachers

00:15:18,100 --> 00:15:21,639
Association who were worried about

00:15:19,959 --> 00:15:24,339
students walking to school in the dark

00:15:21,639 --> 00:15:28,269
in the morning they ended up switching

00:15:24,339 --> 00:15:29,769
back the start and end dates of daylight

00:15:28,269 --> 00:15:32,709
saving time they're constantly changing

00:15:29,769 --> 00:15:36,730
and sometimes you get advance notice and

00:15:32,709 --> 00:15:41,019
sometimes you don't and then my favorite

00:15:36,730 --> 00:15:46,269
example is that for Samoa the date of

00:15:41,019 --> 00:15:48,730
December 30 2011 doesn't exist so they

00:15:46,269 --> 00:15:50,260
went straight from December 29 across

00:15:48,730 --> 00:15:53,380
the international date line at midnight

00:15:50,260 --> 00:15:54,640
and went straight into December 31 the

00:15:53,380 --> 00:15:56,440
reason they did this actually made

00:15:54,640 --> 00:15:57,850
senses they wanted to increase the

00:15:56,440 --> 00:16:00,279
number of days they could trade with

00:15:57,850 --> 00:16:02,800
Australia New Zealand but their nearest

00:16:00,279 --> 00:16:05,740
neighbor American Samoa wanted to stay

00:16:02,800 --> 00:16:08,019
trading with America and so the two

00:16:05,740 --> 00:16:12,209
neighboring islands are now separated by

00:16:08,019 --> 00:16:12,209
48 kilometres and 24 hours

00:16:14,720 --> 00:16:19,890
which brings me to the big point which

00:16:17,580 --> 00:16:21,480
is politics because this actually just

00:16:19,890 --> 00:16:25,080
causes most of the other problems we've

00:16:21,480 --> 00:16:27,630
seen if you want a great example of

00:16:25,080 --> 00:16:31,290
politics Spain is currently in debate as

00:16:27,630 --> 00:16:33,120
to whether they should change their UTC

00:16:31,290 --> 00:16:36,140
offset the currently new TC plus one

00:16:33,120 --> 00:16:40,019
hour but that only happened because

00:16:36,140 --> 00:16:42,029
Franco wanted to align with his Nazi

00:16:40,019 --> 00:16:44,670
allies and so switched at the same time

00:16:42,029 --> 00:16:46,769
as then a lot of Spaniards don't like

00:16:44,670 --> 00:16:49,829
this and they want to move back still in

00:16:46,769 --> 00:16:53,459
debate there are non official rules

00:16:49,829 --> 00:16:54,839
there's a town called you club near the

00:16:53,459 --> 00:16:58,709
border of Western Australia and South

00:16:54,839 --> 00:17:00,540
Australia which actually has decided to

00:16:58,709 --> 00:17:03,899
pick for itself at I'm halfway between

00:17:00,540 --> 00:17:07,370
Adelaide and Perth so it's they use UTC

00:17:03,899 --> 00:17:07,370
plus eight hours and 45 minutes

00:17:09,490 --> 00:17:13,460
the best thing about this is that the

00:17:12,020 --> 00:17:16,970
australian government doesn't recognize

00:17:13,460 --> 00:17:19,070
that time zone so australia actually has

00:17:16,970 --> 00:17:20,780
eight different time zone rules but the

00:17:19,070 --> 00:17:22,400
government only recognizes said not them

00:17:20,780 --> 00:17:23,930
but software still has to account for

00:17:22,400 --> 00:17:27,770
because this is what the people in that

00:17:23,930 --> 00:17:34,640
town say they use there are one-off

00:17:27,770 --> 00:17:38,080
changes sydney decided to extend

00:17:34,640 --> 00:17:43,340
daylight savings earlier during the

00:17:38,080 --> 00:17:49,550
2011-12 is one day because they had

00:17:43,340 --> 00:17:52,490
local elections and then there's the

00:17:49,550 --> 00:17:54,590
ones that are just made up on a whim so

00:17:52,490 --> 00:17:57,830
the decision for jordan that i mentioned

00:17:54,590 --> 00:17:59,960
before ah we're just going to stay in

00:17:57,830 --> 00:18:01,820
summertime they announced that only two

00:17:59,960 --> 00:18:03,230
days before daylight savings went to end

00:18:01,820 --> 00:18:06,470
which actually caused havoc with

00:18:03,230 --> 00:18:07,820
pre-printed flight tickets and they just

00:18:06,470 --> 00:18:09,230
had to tell everyone to turn up to the

00:18:07,820 --> 00:18:14,450
airport an hour earlier than their

00:18:09,230 --> 00:18:18,650
ticket thankfully the airlines use UTC

00:18:14,450 --> 00:18:21,140
and they weren't affected morocco

00:18:18,650 --> 00:18:23,000
extended daylight saving time by a month

00:18:21,140 --> 00:18:26,270
only one day before it was meant to end

00:18:23,000 --> 00:18:29,270
and as i mentioned their dates are based

00:18:26,270 --> 00:18:30,770
on ramadan which is a lunar cycle so the

00:18:29,270 --> 00:18:33,410
dates in the future are currently does

00:18:30,770 --> 00:18:35,780
the best guess so how do you keep up

00:18:33,410 --> 00:18:38,840
with all of this well there is the

00:18:35,780 --> 00:18:41,420
official iono timezone database which

00:18:38,840 --> 00:18:44,470
was started by arthur David Olson back

00:18:41,420 --> 00:18:47,530
in the 80s and has been kept up by

00:18:44,470 --> 00:18:50,540
steady list of dedicated maintained errs

00:18:47,530 --> 00:18:52,910
and it moved to iono after there were

00:18:50,540 --> 00:18:55,640
some legal complications which did get

00:18:52,910 --> 00:18:59,510
resolved but now it's it's got a better

00:18:55,640 --> 00:19:02,590
controlling master and this is actually

00:18:59,510 --> 00:19:07,460
used in most software that we use today

00:19:02,590 --> 00:19:09,350
so linux and mac operating systems they

00:19:07,460 --> 00:19:11,750
have this as their standard reference

00:19:09,350 --> 00:19:16,070
windows of course doesn't they use their

00:19:11,750 --> 00:19:17,920
own shed but the key thing is that you

00:19:16,070 --> 00:19:20,940
need to keep your definitions up to date

00:19:17,920 --> 00:19:24,690
because as we've seen countries a change

00:19:20,940 --> 00:19:27,450
a dime by my count there are five

00:19:24,690 --> 00:19:29,000
different places in your website where

00:19:27,450 --> 00:19:31,380
these definitions could get out of date

00:19:29,000 --> 00:19:33,420
so you've got the service operating

00:19:31,380 --> 00:19:35,610
system the software which could just be

00:19:33,420 --> 00:19:36,600
the programming language the libraries

00:19:35,610 --> 00:19:39,090
that are built for that which could

00:19:36,600 --> 00:19:40,500
bundle their own definitions the users

00:19:39,090 --> 00:19:43,770
operating system and then if you're

00:19:40,500 --> 00:19:45,960
adding in client-side libraries all of

00:19:43,770 --> 00:19:47,610
these can have different definitions of

00:19:45,960 --> 00:19:50,880
what a time zone is and what its rules

00:19:47,610 --> 00:19:52,800
are so the question I'm asking is do you

00:19:50,880 --> 00:19:56,550
really need to add in a client-side

00:19:52,800 --> 00:20:01,590
library the deals with time zones having

00:19:56,550 --> 00:20:03,030
said that there are there are actually

00:20:01,590 --> 00:20:05,040
some people who have put an impressive

00:20:03,030 --> 00:20:08,070
amount of work into trying to get this

00:20:05,040 --> 00:20:10,950
to work in JavaScript moment time zone

00:20:08,070 --> 00:20:12,930
for example pulls in the iono database

00:20:10,950 --> 00:20:16,110
as a get sub module and then compiles it

00:20:12,930 --> 00:20:18,150
using grunt you can select which zones

00:20:16,110 --> 00:20:21,030
you want the the Jason definition for

00:20:18,150 --> 00:20:23,580
but the problem is that if you want all

00:20:21,030 --> 00:20:26,010
the time zones that JSON file is going

00:20:23,580 --> 00:20:27,060
to be over a hundred kilobytes and if

00:20:26,010 --> 00:20:30,260
you're loading that into a mobile

00:20:27,060 --> 00:20:32,310
browser you can imagine especially

00:20:30,260 --> 00:20:35,580
there's more definition comes through

00:20:32,310 --> 00:20:37,520
that's not actually a great thing so I'm

00:20:35,580 --> 00:20:40,200
trying to avoid the problem completely

00:20:37,520 --> 00:20:43,910
because this is not just a historical

00:20:40,200 --> 00:20:46,560
problem this is a list of all the IR

00:20:43,910 --> 00:20:50,130
database changes in time zone rules

00:20:46,560 --> 00:20:52,500
since the start of 2012 which doesn't

00:20:50,130 --> 00:20:55,550
look like a particularly long list until

00:20:52,500 --> 00:20:55,550
you actually scroll through it

00:20:57,780 --> 00:21:02,950
there we go but that doesn't actually

00:21:00,010 --> 00:21:05,710
include the latest change because as I

00:21:02,950 --> 00:21:07,810
was writing this presentation a change

00:21:05,710 --> 00:21:09,940
came through which summed up the whole

00:21:07,810 --> 00:21:11,920
lot of my points really neatly it was a

00:21:09,940 --> 00:21:15,180
hard to predict in advance and it was

00:21:11,920 --> 00:21:15,180
really politically motivated

00:21:17,250 --> 00:21:24,600
so two weeks ago Crimea jump for two

00:21:20,260 --> 00:21:24,600
hours to align themselves with Moscow

00:21:25,230 --> 00:21:31,320
but should you actually care well

00:21:28,690 --> 00:21:34,660
unfortunately the users of your software

00:21:31,320 --> 00:21:40,570
really might care I can tell you from

00:21:34,660 --> 00:21:46,510
bitter personal experience so to finish

00:21:40,570 --> 00:21:49,540
up at lessons issue tracker JIRA it's

00:21:46,510 --> 00:21:52,240
widely used around the world and just

00:21:49,540 --> 00:21:53,860
after I started lycian it gained the

00:21:52,240 --> 00:21:56,980
ability to set a user timezone

00:21:53,860 --> 00:21:58,960
preference now I felt that this feature

00:21:56,980 --> 00:22:01,570
wasn't getting enough use of looking at

00:21:58,960 --> 00:22:05,470
the stats on our biggest public issue

00:22:01,570 --> 00:22:08,620
instance of JIRA and almost no one was

00:22:05,470 --> 00:22:10,990
using the timezone feature that is so I

00:22:08,620 --> 00:22:13,510
am in twenty percent time I wrote a

00:22:10,990 --> 00:22:16,390
little plug in to try and detect the

00:22:13,510 --> 00:22:19,780
timezone in the browser before I knew

00:22:16,390 --> 00:22:22,150
all of this background and just make it

00:22:19,780 --> 00:22:23,740
a one-click operation so I used one of

00:22:22,150 --> 00:22:26,380
those libraries I mentioned before Jay's

00:22:23,740 --> 00:22:29,470
timezone detect which worked really well

00:22:26,380 --> 00:22:32,410
for what I wanted and showed a little

00:22:29,470 --> 00:22:33,670
banner saying we think your browsers in

00:22:32,410 --> 00:22:36,040
a different time zone from what your

00:22:33,670 --> 00:22:41,650
preference specifies just click here and

00:22:36,040 --> 00:22:44,350
it's set the lib the library is one

00:22:41,650 --> 00:22:46,360
hundred percent accurate because it just

00:22:44,350 --> 00:22:49,090
picks one major city / collection of

00:22:46,360 --> 00:22:51,970
time zones so most of Western Europe is

00:22:49,090 --> 00:22:54,820
just detected as Berlin which works fine

00:22:51,970 --> 00:22:57,220
for what I wanted because the rules are

00:22:54,820 --> 00:22:59,440
all the same it actually goes through

00:22:57,220 --> 00:23:01,570
and has some disambiguation code for

00:22:59,440 --> 00:23:03,070
rules the zones that are similar but

00:23:01,570 --> 00:23:05,980
have different daylight saving start

00:23:03,070 --> 00:23:10,059
dates and so can now work on that was

00:23:05,980 --> 00:23:12,790
certain start and end dates about a year

00:23:10,059 --> 00:23:15,630
later I wrote a blog post amount

00:23:12,790 --> 00:23:18,580
developer blog showing statistical

00:23:15,630 --> 00:23:20,950
analysis of how it had been used the

00:23:18,580 --> 00:23:23,770
timezone feature usage and increased

00:23:20,950 --> 00:23:27,610
16-fold in the year that had been

00:23:23,770 --> 00:23:29,750
implemented during the time I've been

00:23:27,610 --> 00:23:32,540
aware that the feature Whitney main

00:23:29,750 --> 00:23:34,940
q his own updates and I've committed

00:23:32,540 --> 00:23:38,540
back to the library by pull requests

00:23:34,940 --> 00:23:40,700
when somewhere across the date line but

00:23:38,540 --> 00:23:44,960
I didn't realize how bad things could

00:23:40,700 --> 00:23:48,050
actually get so the problem started last

00:23:44,960 --> 00:23:50,960
year when Israel change the starting

00:23:48,050 --> 00:23:52,520
date of daylight savings time which

00:23:50,960 --> 00:23:55,720
wasn't a particularly big deal on its

00:23:52,520 --> 00:23:58,820
own but when it was combined with the

00:23:55,720 --> 00:24:02,650
hard-coded date disambiguation code in

00:23:58,820 --> 00:24:07,550
the library it caused quite a problem

00:24:02,650 --> 00:24:09,530
but this didn't happen so Israel changed

00:24:07,550 --> 00:24:11,420
the rules then I had to go into the eye

00:24:09,530 --> 00:24:15,110
on our database and that had to be

00:24:11,420 --> 00:24:17,630
compiled into software updates and then

00:24:15,110 --> 00:24:18,920
it finally came down to the users and

00:24:17,630 --> 00:24:21,620
when they uploaded their operating

00:24:18,920 --> 00:24:30,770
system JIRA started telling them they

00:24:21,620 --> 00:24:33,080
were in Gaza so down the bottom is the

00:24:30,770 --> 00:24:34,010
the public bug that we raised about in

00:24:33,080 --> 00:24:35,960
one of the comments where they actually

00:24:34,010 --> 00:24:38,320
say this is both incorrect and very

00:24:35,960 --> 00:24:38,320
offensive

00:24:39,009 --> 00:24:43,609
now I don't know about you but when I

00:24:41,329 --> 00:24:45,289
started in the tech industry I didn't

00:24:43,609 --> 00:24:48,200
really have career goals of us that I'd

00:24:45,289 --> 00:24:50,269
play it by ear but I'm pretty sure that

00:24:48,200 --> 00:24:52,579
if I did have career goals that on that

00:24:50,269 --> 00:24:54,409
list would not be increased political

00:24:52,579 --> 00:25:01,039
tension in the long-standing conflict in

00:24:54,409 --> 00:25:03,559
the Middle East so obviously couldn't

00:25:01,039 --> 00:25:05,269
just let this go ahead fix it and the

00:25:03,559 --> 00:25:08,570
quickest way would just be submit a

00:25:05,269 --> 00:25:12,079
fixed the JS x undertake library try and

00:25:08,570 --> 00:25:14,269
work it out two problems with this in

00:25:12,079 --> 00:25:16,369
the year and a bit since i first wrote

00:25:14,269 --> 00:25:18,739
the feature the library had had a

00:25:16,369 --> 00:25:20,629
refactor and had removed an API that I

00:25:18,739 --> 00:25:23,299
relied on so I couldn't just quickly

00:25:20,629 --> 00:25:25,639
patch it and the other one was that I

00:25:23,299 --> 00:25:27,499
realized this could probably happen

00:25:25,639 --> 00:25:30,139
again in the future with a different set

00:25:27,499 --> 00:25:33,559
of countries so it was actually time to

00:25:30,139 --> 00:25:35,809
just completely rethink the approach so

00:25:33,559 --> 00:25:38,749
some basic architecture is this how it

00:25:35,809 --> 00:25:40,129
was working I would check the user

00:25:38,749 --> 00:25:42,799
preference at the head stored in zero

00:25:40,129 --> 00:25:46,369
call out to the detection library if

00:25:42,799 --> 00:25:50,629
they differed give the user an option to

00:25:46,369 --> 00:25:53,239
set the new zone and the way JS x

00:25:50,629 --> 00:25:55,159
undertake actually worked basically is

00:25:53,239 --> 00:25:59,119
that it will create a date in January

00:25:55,159 --> 00:26:02,389
and create a date in june to compare the

00:25:59,119 --> 00:26:03,709
gene to us or the UTC offset and if they

00:26:02,389 --> 00:26:05,239
differed well that country had daylight

00:26:03,709 --> 00:26:08,329
savings and they could be further

00:26:05,239 --> 00:26:09,789
calculations from there so what I wanted

00:26:08,329 --> 00:26:14,690
to do is actually get rid of that bit

00:26:09,789 --> 00:26:17,719
and we already had times and definitions

00:26:14,690 --> 00:26:22,099
on the server so I started detecting the

00:26:17,719 --> 00:26:24,079
offsets myself asked JIRA back end to

00:26:22,099 --> 00:26:26,899
find all the zones that it had defined

00:26:24,079 --> 00:26:29,329
that matched that offset pair and then

00:26:26,899 --> 00:26:33,079
show the user list so that I could

00:26:29,329 --> 00:26:36,889
select which one was relevant to them so

00:26:33,079 --> 00:26:38,149
this is the newer version not zoom in on

00:26:36,889 --> 00:26:41,690
that so that's for where we are right

00:26:38,149 --> 00:26:45,409
now and for anyone wondering curry is a

00:26:41,690 --> 00:26:48,409
zone for an island in the best rate but

00:26:45,409 --> 00:26:50,539
all these for zone definitions he have

00:26:48,409 --> 00:26:50,990
the exact same time switching but they

00:26:50,539 --> 00:26:55,070
have their

00:26:50,990 --> 00:26:57,110
own names for historical reasons so

00:26:55,070 --> 00:26:58,610
obviously we're this working one hundred

00:26:57,110 --> 00:27:00,470
percent correctly still relies on the

00:26:58,610 --> 00:27:01,990
backend having the right definitions but

00:27:00,470 --> 00:27:04,280
we already had that problem anyway and

00:27:01,990 --> 00:27:06,620
now if things are going to be out of

00:27:04,280 --> 00:27:11,260
date the front end of the back end or at

00:27:06,620 --> 00:27:13,550
least add update in a consistent way and

00:27:11,260 --> 00:27:16,790
there are extra hassles I found while

00:27:13,550 --> 00:27:18,260
doing this so automated testing you can

00:27:16,790 --> 00:27:22,640
never be sure what time zone you're

00:27:18,260 --> 00:27:25,160
build server is running in so I tried to

00:27:22,640 --> 00:27:26,870
mock the date object and given how many

00:27:25,160 --> 00:27:30,980
different arguments its constructor can

00:27:26,870 --> 00:27:33,140
take that not a good idea so in the end

00:27:30,980 --> 00:27:35,630
i actually just created an abstract

00:27:33,140 --> 00:27:37,940
method i can called something like get

00:27:35,630 --> 00:27:39,679
off set for month and then I just mopped

00:27:37,940 --> 00:27:44,960
that to return hard coded by using my

00:27:39,679 --> 00:27:47,900
tests manual testing when you change

00:27:44,960 --> 00:27:49,010
your computer's timezone so you can test

00:27:47,900 --> 00:27:51,530
that the features working properly

00:27:49,010 --> 00:27:53,960
firefox gets the update just fine it

00:27:51,530 --> 00:27:55,580
changes its own in you date calculation

00:27:53,960 --> 00:27:57,590
to find chrome just ignores it

00:27:55,580 --> 00:27:59,720
completely but that's actually better

00:27:57,590 --> 00:28:03,890
than what it used to do which was reset

00:27:59,720 --> 00:28:06,470
to UTC the worst part though is when you

00:28:03,890 --> 00:28:08,900
have changed your machine time then you

00:28:06,470 --> 00:28:10,730
forget to change it back and wonder why

00:28:08,900 --> 00:28:13,420
all your instant messenger conversations

00:28:10,730 --> 00:28:15,830
are logged at two o'clock in the morning

00:28:13,420 --> 00:28:18,860
windows as I say it doesn't use the eye

00:28:15,830 --> 00:28:20,660
on a database this wasn't specifically a

00:28:18,860 --> 00:28:23,210
problem for me with the giro

00:28:20,660 --> 00:28:25,130
implementation but other software

00:28:23,210 --> 00:28:26,900
providers do actually have to worry

00:28:25,130 --> 00:28:30,500
about this there's a standardized

00:28:26,900 --> 00:28:33,440
mapping between windows time zones and

00:28:30,500 --> 00:28:35,740
iono tongue time zones and then mostly

00:28:33,440 --> 00:28:39,590
similar but there are some discrepancies

00:28:35,740 --> 00:28:40,850
and I had some people ask me that I why

00:28:39,590 --> 00:28:47,420
don't you just try and detect their

00:28:40,850 --> 00:28:50,150
location yet so if you think timezone

00:28:47,420 --> 00:28:53,530
disputes are bad don't even start

00:28:50,150 --> 00:28:53,530
looking into border disputes

00:28:54,390 --> 00:29:01,270
basically windows used to have a map for

00:28:58,840 --> 00:29:03,070
selecting a time zone in software they

00:29:01,270 --> 00:29:05,440
removed that because the number of

00:29:03,070 --> 00:29:07,540
people who complained from India and

00:29:05,440 --> 00:29:10,240
Pakistan about where the border should

00:29:07,540 --> 00:29:14,260
be on the map just four senators go nuts

00:29:10,240 --> 00:29:17,140
screw it we're just taking it out and if

00:29:14,260 --> 00:29:18,790
you worry about a hundred K of just time

00:29:17,140 --> 00:29:22,390
zone definitions I can't imagine what

00:29:18,790 --> 00:29:26,590
the polygon data for timezone shapes

00:29:22,390 --> 00:29:30,190
would be so I'll just finish quickly

00:29:26,590 --> 00:29:32,170
with some big takeaways and as an aside

00:29:30,190 --> 00:29:36,750
if you do a google image search for

00:29:32,170 --> 00:29:36,750
world record food it's really disturbing

00:29:38,640 --> 00:29:46,030
so the first one is do you really need a

00:29:42,490 --> 00:29:48,370
time zone or do you just need to output

00:29:46,030 --> 00:29:51,910
the time in a way that's relative for

00:29:48,370 --> 00:29:54,250
the user most of the time or you're

00:29:51,910 --> 00:29:56,470
going to need is just relative time but

00:29:54,250 --> 00:29:59,350
if you are going to do a time zone make

00:29:56,470 --> 00:30:01,000
sure you do it properly which brings me

00:29:59,350 --> 00:30:05,560
to the next point which is don't ignore

00:30:01,000 --> 00:30:06,910
history despite what some people in the

00:30:05,560 --> 00:30:08,860
JavaScript community might think

00:30:06,910 --> 00:30:11,670
problems existed before JavaScript and

00:30:08,860 --> 00:30:15,220
problems were solved before JavaScript

00:30:11,670 --> 00:30:18,280
we are not special time zones are really

00:30:15,220 --> 00:30:20,680
freaking hard and a lot of people have

00:30:18,280 --> 00:30:22,900
spent decades trying to make them easier

00:30:20,680 --> 00:30:27,390
for everyone and we should learn from

00:30:22,900 --> 00:30:27,390

YouTube URL: https://www.youtube.com/watch?v=FvTcR2NTobo


