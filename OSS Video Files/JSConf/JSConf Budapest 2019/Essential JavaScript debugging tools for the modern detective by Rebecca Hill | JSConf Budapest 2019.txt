Title: Essential JavaScript debugging tools for the modern detective by Rebecca Hill | JSConf Budapest 2019
Publication date: 2019-10-22
Playlist: JSConf Budapest 2019
Description: 
	https://2019.jsconfbp.com/speakers/rebecca_hill

Debugging JavaScript can drive developers crazy. It’s not surprising when so many us stick to the trusty console.log - but there are better ways. From tracking down a critical issue in production, to simply struggling to add a new feature and not realising you’ve misread some documentation - debugging skills are used every day but it's difficult to take the time to improve those skills when the pressure is on. This talk will show you some really handy techniques that will level up your skills of deductive reasoning.

Rebecca Hill is a software engineer, team lead and international speaker, currently attempting to herd cats (aka developers) and wrangle JavaScript at WeTransfer. Originally from Auckland, New Zealand, she is now based in Amsterdam, which makes it much easier to travel to conferences around the world to share her love for software development - teaching and learning with all the amazing people in this community.
Captions: 
	00:00:04,879 --> 00:00:10,590
so yes this is me

00:00:07,080 --> 00:00:12,599
at my day job detecting bugs yeah so I

00:00:10,590 --> 00:00:15,420
work at wetransfer as a front-end

00:00:12,599 --> 00:00:18,810
engineer and team Li and for me that

00:00:15,420 --> 00:00:22,260
means that I write mostly react HTML CSS

00:00:18,810 --> 00:00:25,080
a little bit of Ruby everyone again and

00:00:22,260 --> 00:00:27,180
I also manage a team of six and I'm

00:00:25,080 --> 00:00:30,630
responsible for the day-to-day delivery

00:00:27,180 --> 00:00:32,850
for that team and this is also me about

00:00:30,630 --> 00:00:35,460
six years ago I was helping run a

00:00:32,850 --> 00:00:38,010
workshop for young girls in New Zealand

00:00:35,460 --> 00:00:40,770
which is yeah where I'm from and yes I'm

00:00:38,010 --> 00:00:42,690
a very long way away from home but the

00:00:40,770 --> 00:00:44,460
idea was that we would get these young

00:00:42,690 --> 00:00:46,170
women into the company to sort of show

00:00:44,460 --> 00:00:47,149
them what it was actually like to be a

00:00:46,170 --> 00:00:50,039
software engineer

00:00:47,149 --> 00:00:51,539
they were about 14 years old and they

00:00:50,039 --> 00:00:53,940
were all in the same tech class at

00:00:51,539 --> 00:00:56,129
school and honestly I think we kind of

00:00:53,940 --> 00:00:58,109
blew their minds on how cool this

00:00:56,129 --> 00:01:00,480
actually is compared to what they were

00:00:58,109 --> 00:01:02,460
learning and but yeah I really want to

00:01:00,480 --> 00:01:04,409
encourage people to do as many of these

00:01:02,460 --> 00:01:06,650
kinds of programs as you can because

00:01:04,409 --> 00:01:09,240
it's incredibly rewarding and also

00:01:06,650 --> 00:01:11,700
inspirational because this was one of

00:01:09,240 --> 00:01:14,280
the inspirations for this talk having

00:01:11,700 --> 00:01:15,990
worked with junior devs quite a lot it's

00:01:14,280 --> 00:01:18,119
one of these things that I've noticed is

00:01:15,990 --> 00:01:20,549
they really struggle with debugging and

00:01:18,119 --> 00:01:22,530
I think that's kind of because we don't

00:01:20,549 --> 00:01:23,790
really teach it as a skill it's one of

00:01:22,530 --> 00:01:26,600
those things that you sort of expect

00:01:23,790 --> 00:01:29,549
developers to just pick up naturally and

00:01:26,600 --> 00:01:32,509
there's so much there to learn if you

00:01:29,549 --> 00:01:35,909
really focus on that and that's why I

00:01:32,509 --> 00:01:37,229
decided to write this talk hopefully

00:01:35,909 --> 00:01:39,180
there will be something useful in here

00:01:37,229 --> 00:01:41,640
no matter how deep down this hole you've

00:01:39,180 --> 00:01:44,399
been before but err yeah so a quick look

00:01:41,640 --> 00:01:46,320
at the process itself how often have you

00:01:44,399 --> 00:01:49,350
actually spent time thinking about how

00:01:46,320 --> 00:01:51,270
you debug it's easy to forget that it's

00:01:49,350 --> 00:01:52,770
a difficult skill that it's it's

00:01:51,270 --> 00:01:54,630
something that you need to master in

00:01:52,770 --> 00:01:57,000
order to become a really experienced

00:01:54,630 --> 00:01:58,950
developer and it's learnt over time and

00:01:57,000 --> 00:02:00,540
improve with experience and it's not

00:01:58,950 --> 00:02:02,430
just about the tools you use but it's

00:02:00,540 --> 00:02:04,530
the mindset in the process and how you

00:02:02,430 --> 00:02:07,320
actually work through your debugging

00:02:04,530 --> 00:02:09,270
tasks and it becomes particularly clear

00:02:07,320 --> 00:02:12,450
when we compare those new developers

00:02:09,270 --> 00:02:13,560
with more experienced ones often new

00:02:12,450 --> 00:02:15,270
developers will jump

00:02:13,560 --> 00:02:17,099
straight into the code they'll go and

00:02:15,270 --> 00:02:18,450
change a whole bunch of things they

00:02:17,099 --> 00:02:19,500
won't remember what they've changed and

00:02:18,450 --> 00:02:21,120
what they haven't and what actually

00:02:19,500 --> 00:02:23,160
might have fixed the problem and what

00:02:21,120 --> 00:02:24,330
was maybe just some extra bit of code

00:02:23,160 --> 00:02:26,610
that they stuck in there that wasn't

00:02:24,330 --> 00:02:29,220
useful at all but it's something we do

00:02:26,610 --> 00:02:31,620
pretty much every single day and so in

00:02:29,220 --> 00:02:34,440
this talk I won't go into the detail of

00:02:31,620 --> 00:02:37,019
how important it is to reproduce the bug

00:02:34,440 --> 00:02:39,630
be methodical only change one thing at a

00:02:37,019 --> 00:02:42,330
time how to narrow down where the bug is

00:02:39,630 --> 00:02:44,190
but it's surprising how often the stuff

00:02:42,330 --> 00:02:45,989
is not taught so if you're a junior

00:02:44,190 --> 00:02:48,239
developer or you're teaching junior

00:02:45,989 --> 00:02:49,580
developers I hope you're one of either

00:02:48,239 --> 00:02:52,200
of these two things

00:02:49,580 --> 00:02:55,080
ya do spend the time really looking into

00:02:52,200 --> 00:02:56,310
this stuff with them so there is one

00:02:55,080 --> 00:02:58,230
step that I do want to cover really

00:02:56,310 --> 00:02:59,580
quickly because even the most senior

00:02:58,230 --> 00:03:02,370
developers I've worked with and

00:02:59,580 --> 00:03:04,709
including myself sometimes I forget to

00:03:02,370 --> 00:03:06,660
write tests like this is the first thing

00:03:04,709 --> 00:03:09,000
that you do right if you've discovered a

00:03:06,660 --> 00:03:11,610
bug write a test that reproduces it

00:03:09,000 --> 00:03:14,400
because it not only will keep your focus

00:03:11,610 --> 00:03:16,560
on just that one bug it'll also speed

00:03:14,400 --> 00:03:18,750
you up because you no longer need to

00:03:16,560 --> 00:03:20,340
launch your app and click about to get

00:03:18,750 --> 00:03:23,940
to the state of where your bug actually

00:03:20,340 --> 00:03:27,329
is and of course it'll help your bug can

00:03:23,940 --> 00:03:29,340
never return so let's move on to the

00:03:27,329 --> 00:03:32,060
tools starting with the console well the

00:03:29,340 --> 00:03:34,709
polls are in as you can see we've got

00:03:32,060 --> 00:03:35,970
56% of developers on the left-hand side

00:03:34,709 --> 00:03:39,510
use console.log

00:03:35,970 --> 00:03:42,840
and 67 on the right-hand side and it's

00:03:39,510 --> 00:03:45,090
it's not surprising right because we've

00:03:42,840 --> 00:03:47,730
been conditioned to use it alongside

00:03:45,090 --> 00:03:51,060
simple text editors like sublime text

00:03:47,730 --> 00:03:53,220
atom notepad etc and a large portion of

00:03:51,060 --> 00:03:55,620
web developers have also just simply

00:03:53,220 --> 00:03:57,720
missed the exposure to a formal or

00:03:55,620 --> 00:04:00,540
Street or structured debugging process

00:03:57,720 --> 00:04:02,430
like myself and the browser consult is a

00:04:00,540 --> 00:04:03,060
pretty nice way to inspect the results

00:04:02,430 --> 00:04:06,660
of your logs

00:04:03,060 --> 00:04:09,090
so it works and and it's easy well why

00:04:06,660 --> 00:04:12,389
change it well because there is so much

00:04:09,090 --> 00:04:15,329
more so even if we just take a closer

00:04:12,389 --> 00:04:16,530
look at console Tarlac you'll see that

00:04:15,329 --> 00:04:19,169
there are lots of different ways to

00:04:16,530 --> 00:04:21,659
optimize it so here on top we have the

00:04:19,169 --> 00:04:23,570
normal console dot log usage for logging

00:04:21,659 --> 00:04:26,570
out these two variables pin 1 and pin

00:04:23,570 --> 00:04:29,390
- and here they yeah but on the bottom

00:04:26,570 --> 00:04:32,750
if you just add two extra cat characters

00:04:29,390 --> 00:04:35,450
to turn this log into an object yeah you

00:04:32,750 --> 00:04:38,330
not only get the results of the log but

00:04:35,450 --> 00:04:40,460
of the the value of the variable but you

00:04:38,330 --> 00:04:42,170
also get the variable context so it's

00:04:40,460 --> 00:04:44,540
much easier to see at a glance what

00:04:42,170 --> 00:04:46,070
you're logging it can be really useful

00:04:44,540 --> 00:04:48,550
especially when you're logging a lot of

00:04:46,070 --> 00:04:51,050
different things in your application and

00:04:48,550 --> 00:04:53,690
you can also really add easily add

00:04:51,050 --> 00:04:55,910
styling to your lives by including this

00:04:53,690 --> 00:04:57,980
percentage sign see at the beginning and

00:04:55,910 --> 00:04:59,930
then passing through some styling as the

00:04:57,980 --> 00:05:03,470
second parameter you can get really

00:04:59,930 --> 00:05:05,360
pretty colors so sticking to the console

00:05:03,470 --> 00:05:07,190
for now did you know that there are

00:05:05,360 --> 00:05:09,740
actually a whole bunch of different more

00:05:07,190 --> 00:05:11,210
methods on that object so I'm gonna show

00:05:09,740 --> 00:05:13,310
you my favorites but googling will

00:05:11,210 --> 00:05:15,620
reveal a hell of a lot more for instance

00:05:13,310 --> 00:05:19,040
console table is super useful if you

00:05:15,620 --> 00:05:20,720
want to log out an array of objects so

00:05:19,040 --> 00:05:22,400
here you can see it's much easier to

00:05:20,720 --> 00:05:25,760
kind of compare at a glance the

00:05:22,400 --> 00:05:29,870
different values and next we have

00:05:25,760 --> 00:05:32,360
console group which is when I don't know

00:05:29,870 --> 00:05:34,400
about you but have you ever ended up

00:05:32,360 --> 00:05:35,990
adding so many logs in your application

00:05:34,400 --> 00:05:36,980
that you can't tell which was the one

00:05:35,990 --> 00:05:39,560
that you just added

00:05:36,980 --> 00:05:41,450
well group and group collapse are really

00:05:39,560 --> 00:05:43,730
useful for structuring your logs and to

00:05:41,450 --> 00:05:45,680
collapsible groups creating less noise

00:05:43,730 --> 00:05:49,670
in the console for you to analyze which

00:05:45,680 --> 00:05:51,350
is really the aim of game another useful

00:05:49,670 --> 00:05:53,030
function you can use in the console is

00:05:51,350 --> 00:05:55,070
the dollar selector so it works

00:05:53,030 --> 00:05:58,070
similarly similarly to the jQuery

00:05:55,070 --> 00:06:01,160
selector it's an alias for the document

00:05:58,070 --> 00:06:03,770
selector function in the console if you

00:06:01,160 --> 00:06:06,590
include a 0 after it as I've done here

00:06:03,770 --> 00:06:09,830
you can get the most recently inspected

00:06:06,590 --> 00:06:11,300
HTML element or JavaScript object a 1

00:06:09,830 --> 00:06:15,080
gets you the second most recently

00:06:11,300 --> 00:06:17,030
selected etc etc up to 4 super useful if

00:06:15,080 --> 00:06:19,550
you want to quickly see what properties

00:06:17,030 --> 00:06:20,870
or attributes are on the Dom node or

00:06:19,550 --> 00:06:24,170
JavaScript objects that you're looking

00:06:20,870 --> 00:06:26,420
at and if you use Dola Dola it's the

00:06:24,170 --> 00:06:28,760
equivalent of document query selector or

00:06:26,420 --> 00:06:31,280
even better it returns you a proper

00:06:28,760 --> 00:06:35,240
array rather than a node list so you can

00:06:31,280 --> 00:06:37,470
manipulate it straight away console dot

00:06:35,240 --> 00:06:40,210
trace has been a lifesaver for me

00:06:37,470 --> 00:06:42,550
especially when you're working in a new

00:06:40,210 --> 00:06:43,900
code base and you can't actually you

00:06:42,550 --> 00:06:47,680
don't have that you know inherent

00:06:43,900 --> 00:06:50,380
knowledge of what is calling what and so

00:06:47,680 --> 00:06:53,470
in here I added a consult up trace on

00:06:50,380 --> 00:06:55,330
this handle filter click function to

00:06:53,470 --> 00:06:56,920
figure out what was calling it and you

00:06:55,330 --> 00:06:59,290
can see that it's now telling me that it

00:06:56,920 --> 00:07:04,180
was called by a handle click in filter

00:06:59,290 --> 00:07:06,010
jeaious and consular is great when you

00:07:04,180 --> 00:07:08,530
want to inspect a Dom node as a

00:07:06,010 --> 00:07:10,630
JavaScript object rather than as its

00:07:08,530 --> 00:07:13,240
markup which is what console.log returns

00:07:10,630 --> 00:07:17,770
you so you can see all the properties on

00:07:13,240 --> 00:07:20,110
that Dom node much more easily and no

00:07:17,770 --> 00:07:22,270
though it's even more useful as you can

00:07:20,110 --> 00:07:24,790
see console logs let's spit out the

00:07:22,270 --> 00:07:27,370
objects in black and white and it only

00:07:24,790 --> 00:07:28,780
displays two levels deep consult order

00:07:27,370 --> 00:07:31,330
on the other hand allows you to add some

00:07:28,780 --> 00:07:34,060
really handy configuration so here we've

00:07:31,330 --> 00:07:36,490
just added this extra object where we've

00:07:34,060 --> 00:07:39,400
said colors true depth null and it means

00:07:36,490 --> 00:07:40,630
that we get logs or pretty with lots of

00:07:39,400 --> 00:07:43,930
different colors and you can now access

00:07:40,630 --> 00:07:47,830
the lat and long properties on that geo

00:07:43,930 --> 00:07:49,930
object so let's say we've been working

00:07:47,830 --> 00:07:52,570
with console functions for a while and

00:07:49,930 --> 00:07:54,520
want to step it up well let's dive into

00:07:52,570 --> 00:07:55,750
the diff tools so I'm going to focus on

00:07:54,520 --> 00:07:57,850
Chrome because it's what I'm most

00:07:55,750 --> 00:07:59,140
familiar with but the Firefox dev tools

00:07:57,850 --> 00:08:01,660
are also really great and have a lot of

00:07:59,140 --> 00:08:03,910
the same functionality browser dev tools

00:08:01,660 --> 00:08:09,340
have some really handy features for

00:08:03,910 --> 00:08:11,650
debugging so the dev tools debugger is

00:08:09,340 --> 00:08:13,510
the best one of them one of the simplest

00:08:11,650 --> 00:08:15,520
ways to activate this is by using a

00:08:13,510 --> 00:08:18,130
debugger keyword in your code so this

00:08:15,520 --> 00:08:21,280
debugger keyword I typed this in into my

00:08:18,130 --> 00:08:23,890
editor and opened it up in chrome and

00:08:21,280 --> 00:08:27,280
when I refreshed it hit the debugger

00:08:23,890 --> 00:08:29,950
keyword there at that break point and so

00:08:27,280 --> 00:08:31,720
now you can see sorry I'm having video

00:08:29,950 --> 00:08:35,140
issues as well but hopefully you'll be

00:08:31,720 --> 00:08:37,120
able to see that we can log out the

00:08:35,140 --> 00:08:38,740
value of the variables in scope at the

00:08:37,120 --> 00:08:42,630
moment we can also inspect the entire

00:08:38,740 --> 00:08:46,590
scope at this point of execution and we

00:08:42,630 --> 00:08:46,590
can also step through the code

00:08:47,910 --> 00:08:53,460
and speaking of stepping just in case

00:08:51,270 --> 00:08:55,110
you've never used a debugger before here

00:08:53,460 --> 00:08:57,170
are your main options they're pretty

00:08:55,110 --> 00:08:59,460
much the same no matter what kind of

00:08:57,170 --> 00:09:02,340
language you're writing or what kind of

00:08:59,460 --> 00:09:04,470
tool you're using first we have resume

00:09:02,340 --> 00:09:06,450
which is when you're on a breakpoint and

00:09:04,470 --> 00:09:07,890
you press this and you'll be able to

00:09:06,450 --> 00:09:10,110
resume the script until the next

00:09:07,890 --> 00:09:11,700
breakpoint is hit if you hold this

00:09:10,110 --> 00:09:13,980
button down you'll also have the option

00:09:11,700 --> 00:09:15,660
to play through without hitting any more

00:09:13,980 --> 00:09:18,030
breakpoints which can be useful when you

00:09:15,660 --> 00:09:20,490
just want to get the code running the

00:09:18,030 --> 00:09:22,230
next is step over which executes the

00:09:20,490 --> 00:09:24,510
next function after your breakpoint and

00:09:22,230 --> 00:09:26,820
stops afterwards and then we have the

00:09:24,510 --> 00:09:28,170
step into and out of functions and note

00:09:26,820 --> 00:09:30,840
that these are functions that we're

00:09:28,170 --> 00:09:32,700
stepping over into and out of not lines

00:09:30,840 --> 00:09:36,150
of code they can take a little bit to

00:09:32,700 --> 00:09:37,740
kind of get that and yeah so what we've

00:09:36,150 --> 00:09:39,810
been doing here is adding a line of code

00:09:37,740 --> 00:09:41,910
breakpoint with the debugger keyword in

00:09:39,810 --> 00:09:44,100
our IDE but if you set these breakpoints

00:09:41,910 --> 00:09:46,020
in the dev tools or in your editor

00:09:44,100 --> 00:09:48,210
you'll see where this can be much more

00:09:46,020 --> 00:09:50,040
efficient than using console.log it's

00:09:48,210 --> 00:09:51,450
almost as if you've peppered your whole

00:09:50,040 --> 00:09:53,460
code base with console logs without

00:09:51,450 --> 00:09:55,890
actually having to do so and having to

00:09:53,460 --> 00:09:57,840
clean anything up simply click on the

00:09:55,890 --> 00:10:01,590
line number so here I've clicked on 14

00:09:57,840 --> 00:10:04,200
21 and 26 and then run your code as

00:10:01,590 --> 00:10:06,900
usual and the execution will stop on

00:10:04,200 --> 00:10:08,820
your set line of code break points which

00:10:06,900 --> 00:10:11,070
you can then press resume to hit the

00:10:08,820 --> 00:10:12,990
next one and go through as opposed to

00:10:11,070 --> 00:10:15,450
needing to step through or over every

00:10:12,990 --> 00:10:17,070
single function and when you're doing

00:10:15,450 --> 00:10:19,020
this you may also want to use a watch

00:10:17,070 --> 00:10:21,690
expression so that's what I've got here

00:10:19,020 --> 00:10:23,220
on the right hand side I've just decided

00:10:21,690 --> 00:10:25,950
to I've clicked the little plus button

00:10:23,220 --> 00:10:27,690
there and I've just decided to watch

00:10:25,950 --> 00:10:28,680
this dot state don't Mysteries because I

00:10:27,690 --> 00:10:30,960
want to see what's happening to that

00:10:28,680 --> 00:10:33,990
data and then as you step through the

00:10:30,960 --> 00:10:35,250
code that expression will update so

00:10:33,990 --> 00:10:39,570
you'll be able to see the value of

00:10:35,250 --> 00:10:41,070
whatever you're watching there are lots

00:10:39,570 --> 00:10:43,200
of different types of breakpoints and

00:10:41,070 --> 00:10:45,450
you can see these as sit these directly

00:10:43,200 --> 00:10:47,280
in the dev tools so for example example

00:10:45,450 --> 00:10:48,200
we've got the line of code which is what

00:10:47,280 --> 00:10:50,490
we've just been talking about

00:10:48,200 --> 00:10:53,250
conditional line of code which I'll show

00:10:50,490 --> 00:10:57,480
in a second daaamn so if a Dom node

00:10:53,250 --> 00:11:00,819
changes xhr so if you want to break on a

00:10:57,480 --> 00:11:05,379
particular HTTP request event listeners

00:11:00,819 --> 00:11:07,509
exceptions and functions so here on the

00:11:05,379 --> 00:11:09,639
left you can see how to add breakpoints

00:11:07,509 --> 00:11:12,429
just on certain event listeners so here

00:11:09,639 --> 00:11:14,589
just by ticking click there means that

00:11:12,429 --> 00:11:19,149
anytime I click on my app a breakpoint

00:11:14,589 --> 00:11:22,839
will be hit and then we have the Dom

00:11:19,149 --> 00:11:26,879
nodes so here I'm gonna break on when a

00:11:22,839 --> 00:11:28,809
Dom nodes attribute is modified and then

00:11:26,879 --> 00:11:31,479
conditional breakpoints down the bottom

00:11:28,809 --> 00:11:34,929
can be really useful for when a certain

00:11:31,479 --> 00:11:37,869
function say a scroll hander or a react

00:11:34,929 --> 00:11:39,549
render is called multiple times but you

00:11:37,869 --> 00:11:41,829
only want to stop execution when

00:11:39,549 --> 00:11:43,389
something has a certain value so here

00:11:41,829 --> 00:11:46,269
I'm creating a breakpoint that will only

00:11:43,389 --> 00:11:50,919
be hit if the length of my Mysteries

00:11:46,269 --> 00:11:53,799
array is more than zero so I here only

00:11:50,919 --> 00:11:56,139
want to stop when the API has actually

00:11:53,799 --> 00:11:58,059
returned my data because I only actually

00:11:56,139 --> 00:12:00,639
care about the data for this particular

00:11:58,059 --> 00:12:03,129
debugging case I know that the API is

00:12:00,639 --> 00:12:04,929
returning so I don't need to stop when

00:12:03,129 --> 00:12:09,279
the API hasn't returned but the react

00:12:04,929 --> 00:12:11,499
render is run so you can always click on

00:12:09,279 --> 00:12:12,579
the pause on exceptions button if you

00:12:11,499 --> 00:12:16,029
want a breakpoint when there's an error

00:12:12,579 --> 00:12:18,279
and the tick box to pause on court

00:12:16,029 --> 00:12:19,569
exceptions can be really useful for

00:12:18,279 --> 00:12:21,519
instance if you've got a try-catch

00:12:19,569 --> 00:12:23,769
that's swallowing your errors and you're

00:12:21,519 --> 00:12:27,579
not sure why then you can find out more

00:12:23,769 --> 00:12:29,350
about those exceptions when you have a

00:12:27,579 --> 00:12:32,079
bunch of breakpoints in your app it can

00:12:29,350 --> 00:12:34,659
be useful to disable one or more when

00:12:32,079 --> 00:12:36,909
you're focused on something specific so

00:12:34,659 --> 00:12:39,039
this check mark in the breakpoints list

00:12:36,909 --> 00:12:41,619
here will just disable that breakpoint

00:12:39,039 --> 00:12:43,869
temporarily and in the debugging toolbar

00:12:41,619 --> 00:12:45,579
you can disable all breakpoints in case

00:12:43,869 --> 00:12:47,319
you want to just check how your app runs

00:12:45,579 --> 00:12:51,429
while you're checking some changes

00:12:47,319 --> 00:12:53,289
you've made for example and a tool

00:12:51,429 --> 00:12:55,779
that's really useful when you're using

00:12:53,289 --> 00:12:57,669
the debugger is like boxing this lets us

00:12:55,779 --> 00:13:00,039
prevent the debugger from stepping into

00:12:57,669 --> 00:13:02,859
certain scripts when we're debugging

00:13:00,039 --> 00:13:05,409
code so here I was debugging a reaction

00:13:02,859 --> 00:13:08,199
lifecycle function and I jumped into the

00:13:05,409 --> 00:13:10,389
react Dom library I can be pretty sure

00:13:08,199 --> 00:13:13,850
that my bug is not in the react Dom

00:13:10,389 --> 00:13:15,800
library so I blackbox the script

00:13:13,850 --> 00:13:17,840
and this way next time I step through

00:13:15,800 --> 00:13:19,940
into a function that comes from this

00:13:17,840 --> 00:13:21,790
file the debugger will simply ignore it

00:13:19,940 --> 00:13:24,560
and I can focus on my application code

00:13:21,790 --> 00:13:26,810
you can also include file patterns in

00:13:24,560 --> 00:13:30,940
the dev tool settings - black box entire

00:13:26,810 --> 00:13:30,940
folders like node modules for example

00:13:31,450 --> 00:13:36,200
another useful trick when you're really

00:13:33,980 --> 00:13:38,750
unfamiliar with a code base is command +

00:13:36,200 --> 00:13:40,850
backslash if you press this shortcut

00:13:38,750 --> 00:13:42,530
when javascript is executing it will add

00:13:40,850 --> 00:13:44,900
a breakpoint to the code straight away

00:13:42,530 --> 00:13:46,760
and stop it executing you'll be able to

00:13:44,900 --> 00:13:49,240
instantly see what is happening the

00:13:46,760 --> 00:13:52,040
moment you press that shortcut and you

00:13:49,240 --> 00:13:54,320
can also not add log points and chrome

00:13:52,040 --> 00:13:56,150
dev tools which is essentially a console

00:13:54,320 --> 00:13:58,670
log that you don't have to remember to

00:13:56,150 --> 00:14:00,110
delete from your code the debugger won't

00:13:58,670 --> 00:14:03,800
pause on these points but you'll still

00:14:00,110 --> 00:14:05,360
get the results in the console another

00:14:03,800 --> 00:14:07,400
really useful tool when debugging and

00:14:05,360 --> 00:14:09,860
the dev tools is the snippets option

00:14:07,400 --> 00:14:11,720
under the sources panel here you can

00:14:09,860 --> 00:14:13,580
save your own code snippets to run in

00:14:11,720 --> 00:14:15,590
the console and there are some really

00:14:13,580 --> 00:14:18,500
great collections of snippets available

00:14:15,590 --> 00:14:20,840
online in different libraries so one of

00:14:18,500 --> 00:14:23,180
my favorites augments the console with a

00:14:20,840 --> 00:14:25,730
function called console dot save which

00:14:23,180 --> 00:14:28,160
you can use and pass anything to it

00:14:25,730 --> 00:14:30,140
which then gets downloaded as a JSON

00:14:28,160 --> 00:14:32,510
file this is really handy especially

00:14:30,140 --> 00:14:35,120
when you have a big JSON object that you

00:14:32,510 --> 00:14:38,050
want to open maybe in an IDE or you want

00:14:35,120 --> 00:14:40,820
to send it to a colleague for example

00:14:38,050 --> 00:14:43,640
another useful tool is live expressions

00:14:40,820 --> 00:14:45,530
you can click the I icon here to type

00:14:43,640 --> 00:14:48,290
something into the console and create a

00:14:45,530 --> 00:14:50,210
live expression this pins it to the top

00:14:48,290 --> 00:14:52,430
of the console and it updates real time

00:14:50,210 --> 00:14:54,500
it can be really useful when something

00:14:52,430 --> 00:14:56,750
in your code needs to respond to a

00:14:54,500 --> 00:14:58,370
window width or scroll position for

00:14:56,750 --> 00:15:02,210
example and you'll be able to see it

00:14:58,370 --> 00:15:03,530
update as you scroll down the side so

00:15:02,210 --> 00:15:06,220
what about when you want to actually

00:15:03,530 --> 00:15:08,720
test some of your bug fixing hypotheses

00:15:06,220 --> 00:15:12,590
well a really great feature in chrome is

00:15:08,720 --> 00:15:15,350
called local overrides so here we go to

00:15:12,590 --> 00:15:19,400
the sources panel and go to overheads

00:15:15,350 --> 00:15:23,750
and we can set them up by selecting a

00:15:19,400 --> 00:15:25,140
folder on in this case my desktop I

00:15:23,750 --> 00:15:26,620
think and

00:15:25,140 --> 00:15:29,690
[Music]

00:15:26,620 --> 00:15:32,329
we then need to give chrome access to

00:15:29,690 --> 00:15:37,100
that folder and then we can go and

00:15:32,329 --> 00:15:42,199
change any of the code on this site for

00:15:37,100 --> 00:15:45,050
example this part of the reddit website

00:15:42,199 --> 00:15:48,199
and add whatever we want so I'm going to

00:15:45,050 --> 00:15:50,120
add a background color of purple and now

00:15:48,199 --> 00:15:52,100
if I go come and save you can see I've

00:15:50,120 --> 00:15:55,339
got this little purple dot up here on

00:15:52,100 --> 00:15:57,980
the file and then when i refresh the

00:15:55,339 --> 00:16:00,170
changes I persisted which is really

00:15:57,980 --> 00:16:02,589
really useful if I close the dev tools

00:16:00,170 --> 00:16:05,089
and refresh the changes are gone

00:16:02,589 --> 00:16:06,769
this approach is really useful for

00:16:05,089 --> 00:16:08,300
making smallest changes to production

00:16:06,769 --> 00:16:10,699
websites when you're trying to debug

00:16:08,300 --> 00:16:12,290
something in particular when you want to

00:16:10,699 --> 00:16:14,420
fix something quickly and you have a

00:16:12,290 --> 00:16:16,010
reasonably good idea of where it is you

00:16:14,420 --> 00:16:18,199
don't need to have your local

00:16:16,010 --> 00:16:19,579
environment running you don't even have

00:16:18,199 --> 00:16:21,320
to have the original code on your

00:16:19,579 --> 00:16:25,250
computer this can be done with just

00:16:21,320 --> 00:16:26,329
about any computer setup so what happens

00:16:25,250 --> 00:16:28,790
when you want to go further and make

00:16:26,329 --> 00:16:31,160
bigger changes that you not only want to

00:16:28,790 --> 00:16:33,199
persist on browser refresh but persist

00:16:31,160 --> 00:16:35,360
to your own project file sitting locally

00:16:33,199 --> 00:16:36,800
on your computer well the diff tools

00:16:35,360 --> 00:16:39,860
also have a really interesting feature

00:16:36,800 --> 00:16:42,079
called workspaces so here's a little app

00:16:39,860 --> 00:16:44,779
I made for calculating insulin dosage

00:16:42,079 --> 00:16:46,970
for diabetics note it's a production app

00:16:44,779 --> 00:16:49,360
on Heroku not on my localhost

00:16:46,970 --> 00:16:53,899
so this could could be any website right

00:16:49,360 --> 00:16:55,970
so in the file system tab I can add the

00:16:53,899 --> 00:16:59,389
folder this is my actual folder on my

00:16:55,970 --> 00:17:01,940
desktop for this application and again

00:16:59,389 --> 00:17:03,709
give the dev tools access to it and now

00:17:01,940 --> 00:17:05,600
you can see my applications loaded here

00:17:03,709 --> 00:17:07,939
in the sources panel I'm gonna make a

00:17:05,600 --> 00:17:12,860
change I'm just gonna add a console log

00:17:07,939 --> 00:17:14,419
of hi why not and if I save that and go

00:17:12,860 --> 00:17:17,630
to my IDE you can see that the file

00:17:14,419 --> 00:17:19,850
itself has been updated and I can also

00:17:17,630 --> 00:17:22,819
go back the other way so I'm gonna add

00:17:19,850 --> 00:17:26,030
every one here and see that it's

00:17:22,819 --> 00:17:28,040
persisted here to the dev tools this

00:17:26,030 --> 00:17:30,260
could be super useful and really

00:17:28,040 --> 00:17:32,059
powerful and in fact for some people it

00:17:30,260 --> 00:17:34,610
allows them to use just the dev tools

00:17:32,059 --> 00:17:37,370
debugger as a sorry dev tools as their

00:17:34,610 --> 00:17:39,470
IDE however it can be a little flaky and

00:17:37,370 --> 00:17:39,720
it's still not as good as a full idea in

00:17:39,470 --> 00:17:41,909
my

00:17:39,720 --> 00:17:44,130
opinion in particular it struggles with

00:17:41,909 --> 00:17:45,830
more complicated build systems but if

00:17:44,130 --> 00:17:49,020
you have a project that you built with

00:17:45,830 --> 00:17:50,850
create react out or view so yeah CLA for

00:17:49,020 --> 00:17:53,010
example you can actually just drag the

00:17:50,850 --> 00:17:56,940
entire folder onto the sources panel and

00:17:53,010 --> 00:17:58,919
it's all set up for you so if you like

00:17:56,940 --> 00:18:00,630
this idea of being able to persist

00:17:58,919 --> 00:18:02,490
changes on your production website

00:18:00,630 --> 00:18:05,669
there's one last way I want to show you

00:18:02,490 --> 00:18:07,679
this is the concept of proxying your

00:18:05,669 --> 00:18:08,400
production files to local files on your

00:18:07,679 --> 00:18:10,380
hard drive

00:18:08,400 --> 00:18:12,570
similar to workspaces but without the

00:18:10,380 --> 00:18:14,549
dev tools persistence but with a lot

00:18:12,570 --> 00:18:16,950
more other features that better support

00:18:14,549 --> 00:18:18,840
complicated build systems the simplest

00:18:16,950 --> 00:18:21,179
is a Chrome extension called resource

00:18:18,840 --> 00:18:23,179
overrate so say you have a version of

00:18:21,179 --> 00:18:25,860
your application running on localhost

00:18:23,179 --> 00:18:27,630
using this extension you could proxy the

00:18:25,860 --> 00:18:29,970
call that your production website is

00:18:27,630 --> 00:18:34,080
making in this case on the left hand

00:18:29,970 --> 00:18:37,830
side bandolce is - the version of that

00:18:34,080 --> 00:18:42,990
file and on your local drive so that's

00:18:37,830 --> 00:18:44,970
my local host is and this allows you to

00:18:42,990 --> 00:18:46,289
change your code and test it within the

00:18:44,970 --> 00:18:48,900
larger environment where the bug

00:18:46,289 --> 00:18:50,940
actually occurred applications like

00:18:48,900 --> 00:18:53,010
fiddler and Charles proxy which is my

00:18:50,940 --> 00:18:54,360
personal favorite also allow you to do

00:18:53,010 --> 00:18:57,030
this but with a lot more features

00:18:54,360 --> 00:18:58,799
including the ability to monitor and

00:18:57,030 --> 00:19:01,470
inspect all the calls that your website

00:18:58,799 --> 00:19:03,299
is making I've been on teams that have

00:19:01,470 --> 00:19:05,490
literally used Charles proxy for their

00:19:03,299 --> 00:19:07,710
entire front-end development flow many

00:19:05,490 --> 00:19:09,840
big applications can be tricky to set up

00:19:07,710 --> 00:19:12,090
locally and trying to keep the backend

00:19:09,840 --> 00:19:13,950
architecture and api's up-to-date as

00:19:12,090 --> 00:19:16,080
people are working on them as well as

00:19:13,950 --> 00:19:18,450
your own front-end code base across

00:19:16,080 --> 00:19:20,309
multiple teams can be a pain in the ass

00:19:18,450 --> 00:19:22,679
that can take quite a lot of time if

00:19:20,309 --> 00:19:24,179
however you have a reliable staging

00:19:22,679 --> 00:19:26,370
environment that everyone's pushing to

00:19:24,179 --> 00:19:30,870
then proxying your front-end files is a

00:19:26,370 --> 00:19:32,190
nice way to skip that set up entirely so

00:19:30,870 --> 00:19:34,140
a lot of the technology I'm covering

00:19:32,190 --> 00:19:36,110
either is seriously enhanced by or

00:19:34,140 --> 00:19:38,580
doesn't work at all without source Maps

00:19:36,110 --> 00:19:40,890
so a source map is a file that allows

00:19:38,580 --> 00:19:43,380
the browser or other technology to map

00:19:40,890 --> 00:19:45,419
the compiled or compressed code back to

00:19:43,380 --> 00:19:47,039
its original file it's a really

00:19:45,419 --> 00:19:49,470
important tool that helps with debugging

00:19:47,039 --> 00:19:51,780
minified code is almost impossible to

00:19:49,470 --> 00:19:53,389
debug properly on the top we're

00:19:51,780 --> 00:19:55,339
inspecting a website without source man

00:19:53,389 --> 00:19:57,829
and you can see all the variables have

00:19:55,339 --> 00:19:59,950
met beam angles and the ESX class has

00:19:57,829 --> 00:20:02,690
been transposed whereas on the bottom

00:19:59,950 --> 00:20:04,309
source maps have been setup and it's way

00:20:02,690 --> 00:20:06,079
easier to understand what's going on

00:20:04,309 --> 00:20:09,349
because it's the code we actually wrote

00:20:06,079 --> 00:20:10,609
and depending on your build process it

00:20:09,349 --> 00:20:13,129
should be pretty straightforward to set

00:20:10,609 --> 00:20:15,019
up here's the config for web pack and at

00:20:13,129 --> 00:20:16,700
the top is the way to tell web pack to

00:20:15,019 --> 00:20:18,950
use its standard development

00:20:16,700 --> 00:20:21,739
configuration which includes source maps

00:20:18,950 --> 00:20:23,989
by default if you want more control you

00:20:21,739 --> 00:20:26,149
can define it separately I've chosen

00:20:23,989 --> 00:20:28,849
cheap module evil because I like the

00:20:26,149 --> 00:20:30,729
balance between speed and support but

00:20:28,849 --> 00:20:33,079
your choice will depend on your use case

00:20:30,729 --> 00:20:34,759
then beneath that we have the config for

00:20:33,079 --> 00:20:36,229
production and the only thing you

00:20:34,759 --> 00:20:38,690
actually need here is the dev tool

00:20:36,229 --> 00:20:41,209
property but if you're using uglify

00:20:38,690 --> 00:20:42,859
jeaious to minify your code you'll want

00:20:41,209 --> 00:20:44,989
to see it source map to true when you

00:20:42,859 --> 00:20:46,369
declare that plug-in and if you want to

00:20:44,989 --> 00:20:48,859
set the file name of the source map you

00:20:46,369 --> 00:20:50,719
can get to when you build your project

00:20:48,859 --> 00:20:54,279
you should see your source map file like

00:20:50,719 --> 00:20:54,279
we have over on the right hand side so

00:20:57,099 --> 00:21:01,999
what about deploying source maps to

00:20:59,599 --> 00:21:04,369
production well I am a big believer in

00:21:01,999 --> 00:21:05,839
doing this because production behaves

00:21:04,369 --> 00:21:08,690
when you really want to know what's

00:21:05,839 --> 00:21:10,399
going on you're in a hurry and you want

00:21:08,690 --> 00:21:12,679
to decipher the code pretty quickly so

00:21:10,399 --> 00:21:14,450
the good thing about source maps is that

00:21:12,679 --> 00:21:16,279
they only get downloaded when the dev

00:21:14,450 --> 00:21:18,079
tools are opened so then they have no

00:21:16,279 --> 00:21:20,389
effect on your application or on its

00:21:18,079 --> 00:21:22,099
performance and if you're really worried

00:21:20,389 --> 00:21:23,329
about people being able to look at your

00:21:22,099 --> 00:21:25,700
source code and a metaphor unhhhh

00:21:23,329 --> 00:21:27,489
minified and keep in mind that security

00:21:25,700 --> 00:21:29,359
through obscurity is never a good idea

00:21:27,489 --> 00:21:32,690
then there's a pretty straightforward

00:21:29,359 --> 00:21:34,820
solution so here you can indicate in the

00:21:32,690 --> 00:21:37,459
javascript file a source map your source

00:21:34,820 --> 00:21:39,440
mapping URL configurable with webpack

00:21:37,459 --> 00:21:40,789
that points to the source map that's

00:21:39,440 --> 00:21:43,820
been uploaded to a different location

00:21:40,789 --> 00:21:45,320
say one that's only accessible by your

00:21:43,820 --> 00:21:47,959
team like an s3 bucket

00:21:45,320 --> 00:21:51,709
maybe that's only set up for your

00:21:47,959 --> 00:21:53,899
company's VPN to access and if you're

00:21:51,709 --> 00:21:55,459
not able to setup source maps say you're

00:21:53,899 --> 00:21:57,619
just being nosy and checking out someone

00:21:55,459 --> 00:21:59,119
else's website you can always click on

00:21:57,619 --> 00:22:02,749
the format' button to make the code at

00:21:59,119 --> 00:22:04,789
least slightly more readable so moving

00:22:02,749 --> 00:22:06,680
on now to performance debugging and I do

00:22:04,789 --> 00:22:08,300
not have time to do it justice

00:22:06,680 --> 00:22:10,940
there's so much you can learn about here

00:22:08,300 --> 00:22:12,620
and it's easily another entire talk but

00:22:10,940 --> 00:22:15,590
I wanted to quickly illustrate where you

00:22:12,620 --> 00:22:17,180
could start and the key is to find the

00:22:15,590 --> 00:22:19,250
code that you wrote right

00:22:17,180 --> 00:22:20,870
so these flame charts to be a little bit

00:22:19,250 --> 00:22:23,000
indecipherable until you actually figure

00:22:20,870 --> 00:22:24,920
out where your code is so if you click

00:22:23,000 --> 00:22:26,660
to open the main panel you'll see all

00:22:24,920 --> 00:22:27,110
the activity that occurred on the main

00:22:26,660 --> 00:22:29,110
thread

00:22:27,110 --> 00:22:31,370
including the execution of JavaScript

00:22:29,110 --> 00:22:33,350
usually a lot of the stuff here is found

00:22:31,370 --> 00:22:34,940
in frameworks but if you scan through

00:22:33,350 --> 00:22:36,920
the orange sections you'll be able to

00:22:34,940 --> 00:22:38,470
find your JavaScript files which is

00:22:36,920 --> 00:22:42,050
usually what you're looking for right in

00:22:38,470 --> 00:22:44,300
this case it's my main J's file and know

00:22:42,050 --> 00:22:47,270
this is a very basic one page app which

00:22:44,300 --> 00:22:48,890
is why it's so small you can then zoom

00:22:47,270 --> 00:22:50,480
in further and find the functions in

00:22:48,890 --> 00:22:52,970
your app and compare the time that

00:22:50,480 --> 00:22:55,310
they're taking with each other here we

00:22:52,970 --> 00:22:56,780
can see a call to app in child and fetch

00:22:55,310 --> 00:23:00,500
which should be a little bit more

00:22:56,780 --> 00:23:02,390
familiar to us and the easiest way to

00:23:00,500 --> 00:23:04,430
debug in apps performance poor

00:23:02,390 --> 00:23:06,500
performance is by doing a performance

00:23:04,430 --> 00:23:08,900
audit with lighthouse this is a tool

00:23:06,500 --> 00:23:10,880
inside the audits panel here you can see

00:23:08,900 --> 00:23:13,220
the results on the same small one-page

00:23:10,880 --> 00:23:15,740
app and the best bit here is the

00:23:13,220 --> 00:23:17,360
opportunities section where they have a

00:23:15,740 --> 00:23:20,480
where you've got a list of the resources

00:23:17,360 --> 00:23:25,160
that you should optimize and it has

00:23:20,480 --> 00:23:26,750
specific details on how to do so the

00:23:25,160 --> 00:23:28,850
audits panel also allows you to order

00:23:26,750 --> 00:23:30,560
other things like accessibility which is

00:23:28,850 --> 00:23:32,660
really great it makes something so

00:23:30,560 --> 00:23:34,640
important it's so much easier and if you

00:23:32,660 --> 00:23:36,650
follow the expense the specific advice

00:23:34,640 --> 00:23:38,570
in the audit your app will be so much

00:23:36,650 --> 00:23:41,030
more usable for so many more people and

00:23:38,570 --> 00:23:43,250
in many cases improve the experience

00:23:41,030 --> 00:23:44,900
everyone keep in mind though there is no

00:23:43,250 --> 00:23:49,400
substitute for proper manual

00:23:44,900 --> 00:23:51,410
accessibility testing so when it comes

00:23:49,400 --> 00:23:53,750
to debugging specific elements for their

00:23:51,410 --> 00:23:57,710
accessibility the elements pane comes in

00:23:53,750 --> 00:23:59,210
handy here you can inspect elements and

00:23:57,710 --> 00:24:01,160
see which properties are correctly

00:23:59,210 --> 00:24:04,160
filled out so in this case we're

00:24:01,160 --> 00:24:08,000
inspecting a text input you can see that

00:24:04,160 --> 00:24:09,380
the name property is searched and this

00:24:08,000 --> 00:24:11,780
is what screen readers will read out

00:24:09,380 --> 00:24:13,940
when the user focuses on this input you

00:24:11,780 --> 00:24:16,730
can see that the name was computed by

00:24:13,940 --> 00:24:18,230
looking at the placeholder property this

00:24:16,730 --> 00:24:19,820
input should really have a proper label

00:24:18,230 --> 00:24:21,620
or an area label but

00:24:19,820 --> 00:24:23,240
at least it has a placeholder so all

00:24:21,620 --> 00:24:24,950
users would now be able to know what

00:24:23,240 --> 00:24:29,210
it's for rather than a screen reader

00:24:24,950 --> 00:24:31,040
just reading out text input so the last

00:24:29,210 --> 00:24:32,870
thing for the dev tools did you know

00:24:31,040 --> 00:24:35,240
that you can even debug node in the dev

00:24:32,870 --> 00:24:38,000
tools you just need to run your node

00:24:35,240 --> 00:24:39,560
script with the inspect flag BR came by

00:24:38,000 --> 00:24:41,150
the way it means break before the code

00:24:39,560 --> 00:24:43,310
starts so that you can add your

00:24:41,150 --> 00:24:45,950
breakpoints straight away then either

00:24:43,310 --> 00:24:47,750
click on this green node icon down here

00:24:45,950 --> 00:24:50,090
on the left or go to Chrome slash

00:24:47,750 --> 00:24:52,640
inspect and click on open dedicated dev

00:24:50,090 --> 00:24:54,260
tools for node if you like this workflow

00:24:52,640 --> 00:24:56,270
you should check out the node inspection

00:24:54,260 --> 00:24:59,720
manager extension which manages all your

00:24:56,270 --> 00:25:01,240
scripts and work and windows for you so

00:24:59,720 --> 00:25:03,440
let's get to the really good stuff

00:25:01,240 --> 00:25:06,050
integrated debugging in the editor has

00:25:03,440 --> 00:25:08,810
been around for ages but many JavaScript

00:25:06,050 --> 00:25:11,000
developers are either not aware of it

00:25:08,810 --> 00:25:12,140
they think it's too tricky to setup or

00:25:11,000 --> 00:25:13,640
they don't want to change their

00:25:12,140 --> 00:25:15,350
debugging mindset because they don't

00:25:13,640 --> 00:25:17,920
think it's worth it well I'll let you be

00:25:15,350 --> 00:25:19,670
the judge but do give it a go first

00:25:17,920 --> 00:25:23,570
unfortunately we have a lot more

00:25:19,670 --> 00:25:25,430
front-end editor options these days some

00:25:23,570 --> 00:25:27,590
of which include an inbuilt debugger I'm

00:25:25,430 --> 00:25:29,270
gonna focus on vs code because it's

00:25:27,590 --> 00:25:31,130
super light and fast and it's what I use

00:25:29,270 --> 00:25:32,660
every day and I promise I'm not trying

00:25:31,130 --> 00:25:35,060
to sell you anything because well that

00:25:32,660 --> 00:25:37,430
would be stupid because it's free but

00:25:35,060 --> 00:25:39,560
yeah other ideas like webstorm also

00:25:37,430 --> 00:25:41,510
include an inbuilt debugger and the idea

00:25:39,560 --> 00:25:43,100
is pretty similar I'm gonna take you

00:25:41,510 --> 00:25:45,380
through my debugging process and how I

00:25:43,100 --> 00:25:47,540
set it up with a mini front-end react

00:25:45,380 --> 00:25:49,460
app that talks to an express server

00:25:47,540 --> 00:25:51,350
I've added a couple of spelling mistakes

00:25:49,460 --> 00:25:54,440
to simulate a real bug that you might be

00:25:51,350 --> 00:25:56,330
trying to fix so typical process for

00:25:54,440 --> 00:25:58,490
debugging a front-end application might

00:25:56,330 --> 00:26:00,530
look something like this we open the

00:25:58,490 --> 00:26:03,620
browser we see an error in the console

00:26:00,530 --> 00:26:06,590
we go to our editor we log out some of

00:26:03,620 --> 00:26:08,890
the variables back to the browser and

00:26:06,590 --> 00:26:11,930
refresh or maybe a hot module reloading

00:26:08,890 --> 00:26:13,880
if we're lucky we've chosen a variable

00:26:11,930 --> 00:26:17,360
that helps us determine how to fix the

00:26:13,880 --> 00:26:19,310
bug back to the editor make the fix back

00:26:17,360 --> 00:26:22,010
to the browser refresh okay great

00:26:19,310 --> 00:26:24,140
perfect well that's a hell of a lot of

00:26:22,010 --> 00:26:26,330
guesswork and switching back and forth I

00:26:24,140 --> 00:26:29,210
mean we're we're used to it but but it

00:26:26,330 --> 00:26:31,010
doesn't need to be this way vias code

00:26:29,210 --> 00:26:32,950
has a bunch of extensions that let you

00:26:31,010 --> 00:26:35,169
debug tons of different languages

00:26:32,950 --> 00:26:37,059
in different configurations the most

00:26:35,169 --> 00:26:39,370
useful for us is the debugger for Chrome

00:26:37,059 --> 00:26:41,049
extension it's actually framework

00:26:39,370 --> 00:26:43,090
agnostic so you could be working with

00:26:41,049 --> 00:26:44,470
angular if you react whatever you like

00:26:43,090 --> 00:26:47,230
but I'm going to show you the

00:26:44,470 --> 00:26:49,470
configuration for my app so first of all

00:26:47,230 --> 00:26:52,539
I'm going to the extensions and

00:26:49,470 --> 00:26:57,179
searching for the debug of Chrome I'm

00:26:52,539 --> 00:26:57,179
going to install that and reload vs code

00:26:58,200 --> 00:27:04,899
and now I can go to configurations and

00:27:02,289 --> 00:27:07,210
add a new configuration and I'm gonna

00:27:04,899 --> 00:27:10,210
choose the launch Chrome one here and

00:27:07,210 --> 00:27:12,309
I'm gonna change the URL to localhost

00:27:10,210 --> 00:27:16,409
3000 because that's what create react

00:27:12,309 --> 00:27:20,500
app uses by default and save that and

00:27:16,409 --> 00:27:23,289
then press play and you can see that the

00:27:20,500 --> 00:27:25,480
app is loaded there's absolutely no

00:27:23,289 --> 00:27:29,289
other setup or settings it's really

00:27:25,480 --> 00:27:32,230
really easy and the debugging experience

00:27:29,289 --> 00:27:33,970
it's also really nice so here I have a

00:27:32,230 --> 00:27:37,750
bug because there's supposed to be some

00:27:33,970 --> 00:27:41,289
quotes showing up in my app and if I add

00:27:37,750 --> 00:27:43,870
a debugging breakpoint about where I

00:27:41,289 --> 00:27:46,330
think that the bug probably is and then

00:27:43,870 --> 00:27:48,490
refresh I can see I've hit my breakpoint

00:27:46,330 --> 00:27:53,980
and I can see that QWOP is undefined

00:27:48,490 --> 00:27:56,380
I wonder why and if I go into the

00:27:53,980 --> 00:27:59,019
variables here and inspect the actual

00:27:56,380 --> 00:28:00,039
data I can see oh the data calls it

00:27:59,019 --> 00:28:04,450
quote okay

00:28:00,039 --> 00:28:07,830
well then I can go and edit the variable

00:28:04,450 --> 00:28:11,409
fix the bug remove the breakpoint and

00:28:07,830 --> 00:28:12,779
then restart and hey it's fixed and I

00:28:11,409 --> 00:28:15,340
didn't even need to touch the browser

00:28:12,779 --> 00:28:17,220
obviously this is a pretty fake example

00:28:15,340 --> 00:28:19,600
but you get the idea

00:28:17,220 --> 00:28:22,090
so before I finished I should just

00:28:19,600 --> 00:28:24,220
quickly mention that in no way have I

00:28:22,090 --> 00:28:27,010
covered the space I've obviously had to

00:28:24,220 --> 00:28:28,960
focus on one browser and one IDE and I

00:28:27,010 --> 00:28:30,789
didn't even touch on mobile and network

00:28:28,960 --> 00:28:32,409
and Service Worker debugging to name a

00:28:30,789 --> 00:28:34,779
few there is so much more to explore

00:28:32,409 --> 00:28:37,149
here and of course accurate and

00:28:34,779 --> 00:28:39,399
realistic test coverage is an extremely

00:28:37,149 --> 00:28:41,440
important and useful way to prevent bugs

00:28:39,399 --> 00:28:43,629
in the first place provide a quick and

00:28:41,440 --> 00:28:44,679
easy way to test fixes and prevent them

00:28:43,629 --> 00:28:46,870
from occurring again

00:28:44,679 --> 00:28:49,000
the golden rule my golden rule

00:28:46,870 --> 00:28:51,610
whenever you fix your bug make sure

00:28:49,000 --> 00:28:53,380
there's a test for it so the last thing

00:28:51,610 --> 00:28:54,910
I'm gonna leave you with is this if you

00:28:53,380 --> 00:28:57,550
want to stick to the good old console

00:28:54,910 --> 00:28:59,200
log then that's cool by me I still use a

00:28:57,550 --> 00:29:01,630
combo of different tools including

00:28:59,200 --> 00:29:03,460
console.log but please at least set

00:29:01,630 --> 00:29:05,350
yourself up with a good code snippet so

00:29:03,460 --> 00:29:08,530
you're not wasting your life typing it

00:29:05,350 --> 00:29:10,290
out by hand every single time that's it

00:29:08,530 --> 00:29:19,980
thank you

00:29:10,290 --> 00:29:19,980

YouTube URL: https://www.youtube.com/watch?v=TtsvMRxmfGA


