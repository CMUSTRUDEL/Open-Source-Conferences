Title: JS in Extreme Conditions: WebApps for the Refugee Aid Movement by Taylor Fairbank | JSConf Bp 2019
Publication date: 2019-11-07
Playlist: JSConf Budapest 2019
Description: 
	https://2019.jsconfbp.com/speakers/taylor_fairbank

Building web applications to power the refugee aid movement results in some interesting performance considerations. Will it load on a refugee camp’s wifi, shared by 500 people and beamed in from a town 4km away? Can it work offline, so that aid workers in the field can still get their job done even if they lose cell signal? Will it run on anything from a decade old donated laptop running Windows Vista to a brand new iPhone X? Is it easy to use by the hundreds of short term volunteers who show up each week? This talk will discuss performance considerations for these questions, explore tradeoffs, and describe our current solution. It will focus on javascript, but also touch on other web technologies or organizational considerations where appropriate.

More details on the Taylor's work:

https://gitlab.com/distribute-aid/toolbox
https://www.facebook.com/DistributeAidDotOrg
https://twitter.com/DistributeAid

I like building ethical technology and operational planning, which is what I'm lucky enough to do every day at Distribute Aid. I studied computer science at the University of Illinois, and have previously founded a startup which was accepted into Y Combinator. When I’m not coding or organizing, I enjoy hiking and learning to cook new vegetarian dishes.
Captions: 
	00:00:00,040 --> 00:00:02,230
[Applause]

00:00:04,190 --> 00:00:09,840
hey everybody I'm Taylor thanks so much

00:00:08,130 --> 00:00:12,300
for the introduction Paul and today

00:00:09,840 --> 00:00:14,219
we're going to talk about JavaScript's

00:00:12,300 --> 00:00:16,470
performance in extreme environments

00:00:14,219 --> 00:00:20,369
through the lens of our production web

00:00:16,470 --> 00:00:21,930
app for refugee aid groups so start off

00:00:20,369 --> 00:00:23,640
with some background on the aid movement

00:00:21,930 --> 00:00:26,279
look at those extreme environments

00:00:23,640 --> 00:00:28,050
setting performance goals is always a

00:00:26,279 --> 00:00:30,630
great place to start when diving into

00:00:28,050 --> 00:00:32,369
this stuff and outlining a strategy and

00:00:30,630 --> 00:00:34,290
then look at the tools and techniques we

00:00:32,369 --> 00:00:38,219
use to improve performance in our own

00:00:34,290 --> 00:00:43,160
app this is my first-ever Tech Talk both

00:00:38,219 --> 00:00:43,160
as an attendee and a speaker so I really

00:00:46,250 --> 00:00:51,899
and I just want to emphasize like I'm

00:00:49,170 --> 00:00:53,879
nothing special I'm just like an average

00:00:51,899 --> 00:00:56,280
web dev I needed to do this to make our

00:00:53,879 --> 00:00:58,559
stuff work in the field but to take away

00:00:56,280 --> 00:01:00,149
from that is that you can do this too

00:00:58,559 --> 00:01:01,980
you don't have to be an expert it's not

00:01:00,149 --> 00:01:04,320
using some really advanced API or

00:01:01,980 --> 00:01:06,270
anything so hopefully on Monday you can

00:01:04,320 --> 00:01:08,430
go in take a look at some performance in

00:01:06,270 --> 00:01:13,280
your own apps maybe do some improvements

00:01:08,430 --> 00:01:16,950
who knows cool so the refugee movement

00:01:13,280 --> 00:01:18,869
is one of the largest grassroots you

00:01:16,950 --> 00:01:19,229
know volunteer-driven things in the

00:01:18,869 --> 00:01:21,479
world

00:01:19,229 --> 00:01:23,790
it has had tens of thousands of

00:01:21,479 --> 00:01:26,130
volunteers working with hundreds of

00:01:23,790 --> 00:01:29,340
grassroots aid groups welcomed millions

00:01:26,130 --> 00:01:31,200
of newcomers to Europe it's kind of this

00:01:29,340 --> 00:01:33,329
interesting network of distributed

00:01:31,200 --> 00:01:35,400
autonomous groups they each do their own

00:01:33,329 --> 00:01:38,189
part independently which means they can

00:01:35,400 --> 00:01:41,729
respond really quickly to changing

00:01:38,189 --> 00:01:45,420
conditions or new needs that governments

00:01:41,729 --> 00:01:47,009
or larger multinational NGOs can't but

00:01:45,420 --> 00:01:49,500
there's lots of communication overhead

00:01:47,009 --> 00:01:53,700
and lots of in efficiencies around these

00:01:49,500 --> 00:01:55,920
administrative processes so it's a

00:01:53,700 --> 00:01:59,759
diverse movement it's led by women you

00:01:55,920 --> 00:02:03,210
can see our board there on the left is

00:01:59,759 --> 00:02:04,920
Stephanie who's a admin at movement on

00:02:03,210 --> 00:02:06,390
the ground we'll be talking about some

00:02:04,920 --> 00:02:09,060
of their work on the island of Lesbos

00:02:06,390 --> 00:02:11,610
later the middle is our own director

00:02:09,060 --> 00:02:12,720
Sarah say hi if you see her around the

00:02:11,610 --> 00:02:15,570
conference

00:02:12,720 --> 00:02:18,720
and on the right is Regina who has

00:02:15,570 --> 00:02:21,210
started an aid group that takes donated

00:02:18,720 --> 00:02:22,710
laptops and equipment loads educational

00:02:21,210 --> 00:02:25,050
content on them and sends them to

00:02:22,710 --> 00:02:26,970
informal schools in camps so I think

00:02:25,050 --> 00:02:30,360
it's really cool to see women at the

00:02:26,970 --> 00:02:32,460
forefront of this movement and this is

00:02:30,360 --> 00:02:36,060
something that's not going to be solved

00:02:32,460 --> 00:02:38,400
within our lifetimes there's 70 million

00:02:36,060 --> 00:02:40,410
displaced people in the world today 20

00:02:38,400 --> 00:02:44,280
million of them are refugees in another

00:02:40,410 --> 00:02:47,070
country and due to climate change we're

00:02:44,280 --> 00:02:50,520
looking at up to 1 billion displaced

00:02:47,070 --> 00:02:51,900
people in the world by 2050 so this is

00:02:50,520 --> 00:02:53,640
something that we need to pay attention

00:02:51,900 --> 00:02:56,070
to now we need to build the

00:02:53,640 --> 00:02:58,200
infrastructure for now and I'm really

00:02:56,070 --> 00:03:01,470
grateful to indigenous people all over

00:02:58,200 --> 00:03:04,170
the world and our youth like Greta who

00:03:01,470 --> 00:03:08,670
are fighting you know to reduce the

00:03:04,170 --> 00:03:10,830
impact of climate change so a little

00:03:08,670 --> 00:03:12,959
overview of our tech leave three main

00:03:10,830 --> 00:03:14,400
areas of our platform there's kind of

00:03:12,959 --> 00:03:17,190
discovery and networking

00:03:14,400 --> 00:03:19,940
there's the aid supply chain so tools

00:03:17,190 --> 00:03:23,010
around getting things from A to B and

00:03:19,940 --> 00:03:25,080
there's the knowledge sharing section to

00:03:23,010 --> 00:03:27,989
help you know share knowledge things

00:03:25,080 --> 00:03:30,870
like that so our goal is to increase

00:03:27,989 --> 00:03:33,570
collaboration save time and help groups

00:03:30,870 --> 00:03:35,550
make smarter better decisions really by

00:03:33,570 --> 00:03:37,350
just surfacing more information in a

00:03:35,550 --> 00:03:39,570
centralized place and then easy to

00:03:37,350 --> 00:03:41,570
consume and structured way but the

00:03:39,570 --> 00:03:43,950
important thing is that our tech

00:03:41,570 --> 00:03:45,780
empowers groups which means if they

00:03:43,950 --> 00:03:48,470
can't use it if it doesn't work where

00:03:45,780 --> 00:03:54,390
they're at then what are we doing right

00:03:48,470 --> 00:03:57,269
so yeah it were free as in freedom and

00:03:54,390 --> 00:04:00,239
beer best of both worlds right we're

00:03:57,269 --> 00:04:02,130
using the a GPL and we're nonprofit so

00:04:00,239 --> 00:04:03,510
it's free for aid groups and this is

00:04:02,130 --> 00:04:06,239
going to be important when we talk about

00:04:03,510 --> 00:04:08,519
testing strategies and stuff I'm the

00:04:06,239 --> 00:04:11,580
only full-time dev on our team we have a

00:04:08,519 --> 00:04:13,260
great team of remote volunteers so we

00:04:11,580 --> 00:04:16,019
need to approach kind of performance

00:04:13,260 --> 00:04:19,410
testing through the lens of a scrappy

00:04:16,019 --> 00:04:21,479
you know the volunteer-driven nonprofit

00:04:19,410 --> 00:04:22,770
not through like a million dollar lab or

00:04:21,479 --> 00:04:26,240
something that you can just have a bunch

00:04:22,770 --> 00:04:28,610
of boxes like automate all of this away

00:04:26,240 --> 00:04:31,100
cool just a couple of slides here about

00:04:28,610 --> 00:04:33,620
our tech that's the profile this is the

00:04:31,100 --> 00:04:35,090
aid marketplace the the inventory

00:04:33,620 --> 00:04:38,450
manager or you can see what's available

00:04:35,090 --> 00:04:40,130
and what people need and then we have

00:04:38,450 --> 00:04:42,290
the shipment coordinator helps you keep

00:04:40,130 --> 00:04:44,120
track of decisions that you make where

00:04:42,290 --> 00:04:46,010
things are going and this is great cuz

00:04:44,120 --> 00:04:47,660
it it shows you hey the town next door

00:04:46,010 --> 00:04:49,760
is sending the shipment I can just throw

00:04:47,660 --> 00:04:51,440
some stuff on there and they can include

00:04:49,760 --> 00:04:52,480
it rather than sending another one

00:04:51,440 --> 00:04:56,960
myself

00:04:52,480 --> 00:04:58,820
cool so the impact in the real world we

00:04:56,960 --> 00:05:00,980
coordinated a shipment of a hundred and

00:04:58,820 --> 00:05:04,370
eighty thousand bars of soap from

00:05:00,980 --> 00:05:07,100
Glasgow to caring City in Scotland it

00:05:04,370 --> 00:05:09,680
went to central warehouses in Athens and

00:05:07,100 --> 00:05:12,830
Thessaloniki and they distributed it to

00:05:09,680 --> 00:05:14,840
dozens of aid groups all over Greece

00:05:12,830 --> 00:05:16,910
including the islands and most

00:05:14,840 --> 00:05:20,410
importantly the end result we get this

00:05:16,910 --> 00:05:23,390
to the people who need it most so that

00:05:20,410 --> 00:05:25,580
was kind of the intro section I'm glad

00:05:23,390 --> 00:05:27,620
I'm doing well on time and now we're

00:05:25,580 --> 00:05:31,060
gonna take a look at some of the extreme

00:05:27,620 --> 00:05:37,420
environments that our users operate in

00:05:31,060 --> 00:05:38,600
okay maybe not that extreme so this is

00:05:37,420 --> 00:05:41,630
Moria

00:05:38,600 --> 00:05:44,000
it's the largest refugee camp in Europe

00:05:41,630 --> 00:05:46,480
it's on the remote and Greek island of

00:05:44,000 --> 00:05:49,360
Lesbos right next to the Turkish border

00:05:46,480 --> 00:05:52,970
it's a former prison designed to hold

00:05:49,360 --> 00:05:54,680
2,000 inmates and that's the kind of

00:05:52,970 --> 00:05:57,680
prison section right there

00:05:54,680 --> 00:06:00,020
there are currently 10,000 newcomers

00:05:57,680 --> 00:06:02,390
living in the Moria refugee camp and you

00:06:00,020 --> 00:06:04,040
can see the massive overflow area and

00:06:02,390 --> 00:06:06,530
kind of an informal camp in the four

00:06:04,040 --> 00:06:10,220
grounds there that's called the olive

00:06:06,530 --> 00:06:12,730
grove so this is the kind of border

00:06:10,220 --> 00:06:16,310
outside Moria surrounded by barbed wire

00:06:12,730 --> 00:06:18,080
and this is what you see every day as an

00:06:16,310 --> 00:06:19,700
aid worker you're going into camp you're

00:06:18,080 --> 00:06:23,060
doing all sorts of things to help people

00:06:19,700 --> 00:06:25,160
out 10 to 12 hours a day it's like an

00:06:23,060 --> 00:06:27,290
all-day thing you don't get a lot of

00:06:25,160 --> 00:06:29,120
time to rest relax you don't get a lot

00:06:27,290 --> 00:06:31,130
of time to go back to the office and

00:06:29,120 --> 00:06:33,620
jump on the Wi-Fi or charge your phone

00:06:31,130 --> 00:06:35,840
up as you can see there's not really any

00:06:33,620 --> 00:06:38,210
power infrastructure there the cell

00:06:35,840 --> 00:06:40,610
signal is spotty

00:06:38,210 --> 00:06:42,350
and so we have to take all of this into

00:06:40,610 --> 00:06:44,900
account when we're trying to figure out

00:06:42,350 --> 00:06:47,539
how to make our app work for for the aid

00:06:44,900 --> 00:06:49,310
workers so we don't operate here but

00:06:47,539 --> 00:06:51,380
there's a little bit of interesting like

00:06:49,310 --> 00:06:53,570
other extreme environments you have

00:06:51,380 --> 00:06:55,960
search and rescue ships at sea who are

00:06:53,570 --> 00:07:00,889
on the ocean for months at a time and

00:06:55,960 --> 00:07:02,650
you have human rights like observers who

00:07:00,889 --> 00:07:06,199
are on borders this is a photo of the

00:07:02,650 --> 00:07:09,350
Hungarian Serbian border which has 500

00:07:06,199 --> 00:07:10,580
kilometers of razor wire and so the

00:07:09,350 --> 00:07:12,440
human rights observers are going to be

00:07:10,580 --> 00:07:15,020
out in remote parts of the country

00:07:12,440 --> 00:07:16,669
remote villages I'm kind of monitoring

00:07:15,020 --> 00:07:20,000
for things like border pushback stuff

00:07:16,669 --> 00:07:23,060
like that and last but not least my

00:07:20,000 --> 00:07:25,720
favorite place which is warehouses so

00:07:23,060 --> 00:07:30,349
this is really cool that warehouse was

00:07:25,720 --> 00:07:33,349
actually the old 2003 Olympic basketball

00:07:30,349 --> 00:07:36,440
Stadium in Greece like just a ton of fun

00:07:33,349 --> 00:07:38,000
to walk around and explore and aid

00:07:36,440 --> 00:07:39,470
groups really like they just popped up

00:07:38,000 --> 00:07:41,030
overnight they asked the government hey

00:07:39,470 --> 00:07:42,830
can we have some space and they have to

00:07:41,030 --> 00:07:45,080
work with what they're given so it's not

00:07:42,830 --> 00:07:47,030
something where they can design a

00:07:45,080 --> 00:07:48,590
connected infrastructure set up the

00:07:47,030 --> 00:07:50,449
Wi-Fi through the whole thing you know

00:07:48,590 --> 00:07:52,880
it's like here's a shed in my backyard

00:07:50,449 --> 00:07:57,860
here's a converted basketball Stadium

00:07:52,880 --> 00:08:00,020
you know make it work so the storage

00:07:57,860 --> 00:08:03,409
space there is in the ring in kind of

00:08:00,020 --> 00:08:05,659
that concession area you know outside of

00:08:03,409 --> 00:08:08,210
the main stadium and that's what it

00:08:05,659 --> 00:08:11,419
looks like inside there so they have

00:08:08,210 --> 00:08:14,210
self-service don't have Wi-Fi they do

00:08:11,419 --> 00:08:16,190
have power but again people are dealing

00:08:14,210 --> 00:08:17,270
with inventory and stuff all day every

00:08:16,190 --> 00:08:19,909
day

00:08:17,270 --> 00:08:21,110
so let's actually take a look at what we

00:08:19,909 --> 00:08:24,380
mean when we're talking about

00:08:21,110 --> 00:08:26,840
performance high speed situations this

00:08:24,380 --> 00:08:29,389
is Amsterdam this is the office in San

00:08:26,840 --> 00:08:32,209
Francisco low speed might be my own

00:08:29,389 --> 00:08:34,190
office in Serbia you know gets the job

00:08:32,209 --> 00:08:37,579
done sometimes the video calls are a bit

00:08:34,190 --> 00:08:40,130
flaky but it's okay no speed there are

00:08:37,579 --> 00:08:41,990
lots of situations we talked about some

00:08:40,130 --> 00:08:43,789
of them like at sea on the borders and

00:08:41,990 --> 00:08:47,089
then we have this fun one I like to call

00:08:43,789 --> 00:08:50,180
maybe speed so this is really where

00:08:47,089 --> 00:08:51,900
house is this is camps you might have

00:08:50,180 --> 00:08:55,590
some cell signal you might have

00:08:51,900 --> 00:08:57,960
and Wi-Fi there will be dead zones and

00:08:55,590 --> 00:09:01,020
that produces a lot of problems it's not

00:08:57,960 --> 00:09:03,270
just online offline online its

00:09:01,020 --> 00:09:05,190
ping-ponging you back and forth so you

00:09:03,270 --> 00:09:09,480
have random latency spikes race

00:09:05,190 --> 00:09:11,580
conditions are a huge issue and the from

00:09:09,480 --> 00:09:13,470
a UI standpoint you have to deal with

00:09:11,580 --> 00:09:14,910
this back and forth between the

00:09:13,470 --> 00:09:16,740
different states you don't want to just

00:09:14,910 --> 00:09:19,530
be showing up the pop-up your online

00:09:16,740 --> 00:09:23,100
your offline your online very rapid

00:09:19,530 --> 00:09:24,500
succession so when we're talking about

00:09:23,100 --> 00:09:28,470
speed we're really talking about latency

00:09:24,500 --> 00:09:30,450
bandwidth and throughput that's an

00:09:28,470 --> 00:09:32,610
example of a warehouse so that's the

00:09:30,450 --> 00:09:35,310
office with the Wi-Fi there this is

00:09:32,610 --> 00:09:37,320
about the size of the football field as

00:09:35,310 --> 00:09:38,790
you can see that Wi-Fi is not going to

00:09:37,320 --> 00:09:41,970
extend throughout the whole place it's

00:09:38,790 --> 00:09:46,380
kind of like a giant Faraday cage and

00:09:41,970 --> 00:09:48,780
then this is a fun one so to get Wi-Fi

00:09:46,380 --> 00:09:51,720
in the olive grove which is that

00:09:48,780 --> 00:09:53,220
overflow area outside of Moria this is

00:09:51,720 --> 00:09:55,860
the town of MIT's aleady it's the

00:09:53,220 --> 00:09:57,270
largest town in the islands they send

00:09:55,860 --> 00:10:00,480
they have a satellite dish or something

00:09:57,270 --> 00:10:02,820
that sends it to a water tower another

00:10:00,480 --> 00:10:05,250
satellite dish there bounces it off to

00:10:02,820 --> 00:10:07,260
the camp that's about 4 kilometers right

00:10:05,250 --> 00:10:07,860
there just beaming that off a water

00:10:07,260 --> 00:10:11,190
tower

00:10:07,860 --> 00:10:12,720
it goes into a satellite dish on the the

00:10:11,190 --> 00:10:16,080
the office there and then they have a

00:10:12,720 --> 00:10:16,440
series of Wi-Fi repeaters around the

00:10:16,080 --> 00:10:19,140
camp

00:10:16,440 --> 00:10:21,270
so clearly dealing with super high

00:10:19,140 --> 00:10:22,710
latency they're intermittent

00:10:21,270 --> 00:10:24,600
connectivity

00:10:22,710 --> 00:10:27,200
you know storm or something like can

00:10:24,600 --> 00:10:29,700
just knock out that infrastructure

00:10:27,200 --> 00:10:31,590
there's the office right there

00:10:29,700 --> 00:10:33,420
and that's an example of a telephone

00:10:31,590 --> 00:10:37,350
pole with one of the Wi-Fi routers or

00:10:33,420 --> 00:10:41,760
the repeaters on it so something else we

00:10:37,350 --> 00:10:43,890
need to consider is data and power so

00:10:41,760 --> 00:10:46,140
you have like unmetered Wi-Fi you have

00:10:43,890 --> 00:10:48,750
mobile data or you just don't have data

00:10:46,140 --> 00:10:51,300
same thing with power you plugged into

00:10:48,750 --> 00:10:54,360
the wall you're on the go or your

00:10:51,300 --> 00:10:57,360
devices debt and these are all resources

00:10:54,360 --> 00:10:59,190
that our users have in our context

00:10:57,360 --> 00:11:01,140
they're very limited you're out and

00:10:59,190 --> 00:11:03,210
about using your phone using our app all

00:11:01,140 --> 00:11:04,980
day long we can't kill that battery

00:11:03,210 --> 00:11:05,570
right you know you have a certain amount

00:11:04,980 --> 00:11:06,980
of time

00:11:05,570 --> 00:11:09,350
then your phone's dead and then you're

00:11:06,980 --> 00:11:12,110
back to pit the old pen-and-paper way

00:11:09,350 --> 00:11:13,550
same thing with data you know it's it's

00:11:12,110 --> 00:11:16,280
nice when you have an unlimited plan

00:11:13,550 --> 00:11:19,250
most aid workers that I know they might

00:11:16,280 --> 00:11:20,810
buy one or two gigabytes at a time so

00:11:19,250 --> 00:11:23,030
they're constantly having like running

00:11:20,810 --> 00:11:24,650
out of data having to wait a day go back

00:11:23,030 --> 00:11:26,810
to the cell phone store plug some more

00:11:24,650 --> 00:11:27,380
data in and if your stuff just stops

00:11:26,810 --> 00:11:29,300
working

00:11:27,380 --> 00:11:31,790
when they run out of data again back to

00:11:29,300 --> 00:11:33,770
the pen and paper way it's a bug it's my

00:11:31,790 --> 00:11:35,860
problem you know it's it's their size

00:11:33,770 --> 00:11:38,990
they're not gonna make it their problem

00:11:35,860 --> 00:11:41,720
and then we have hardware so lots of old

00:11:38,990 --> 00:11:43,930
donated equipment I'm gonna speed up a

00:11:41,720 --> 00:11:47,210
little bit to make sure I stay on time

00:11:43,930 --> 00:11:49,160
but this is an example with my friends

00:11:47,210 --> 00:11:51,320
computer it just doesn't have a battery

00:11:49,160 --> 00:11:53,180
right like she just leaves it plugged

00:11:51,320 --> 00:11:54,980
into the wall if there's a gentle breeze

00:11:53,180 --> 00:11:57,530
that knocks the cable out then she

00:11:54,980 --> 00:11:59,660
immediately you know loses all her state

00:11:57,530 --> 00:12:02,330
of what she's been working on it's my

00:11:59,660 --> 00:12:04,340
friend's phone different friends he

00:12:02,330 --> 00:12:05,930
can't use about half his screen so I

00:12:04,340 --> 00:12:07,580
think that's maybe a different tech talk

00:12:05,930 --> 00:12:10,070
like how to make your app work with a

00:12:07,580 --> 00:12:13,000
busted phone but that's the type of

00:12:10,070 --> 00:12:16,340
equipment that we're dealing with here

00:12:13,000 --> 00:12:16,760
this is all more relevant than you might

00:12:16,340 --> 00:12:19,760
think

00:12:16,760 --> 00:12:21,940
right so a slow connection is a slow

00:12:19,760 --> 00:12:24,140
connection where houses have dead zones

00:12:21,940 --> 00:12:26,540
offices have dead zones there's some

00:12:24,140 --> 00:12:28,310
poor guy in the basement you know trying

00:12:26,540 --> 00:12:30,530
to just get the printer to work and yes

00:12:28,310 --> 00:12:31,820
run up and down the stairs every time he

00:12:30,530 --> 00:12:34,400
wants to print something they connect to

00:12:31,820 --> 00:12:36,140
the Wi-Fi if you don't have a connection

00:12:34,400 --> 00:12:37,100
you don't have a connection it doesn't

00:12:36,140 --> 00:12:39,080
matter if you're in the middle of a

00:12:37,100 --> 00:12:41,480
refugee camp or if you're on a six-hour

00:12:39,080 --> 00:12:44,510
plane to come talk you know at ge'ez con

00:12:41,480 --> 00:12:46,790
free to past a dead battery is a dead

00:12:44,510 --> 00:12:50,540
battery regardless of how fancy your

00:12:46,790 --> 00:12:53,630
phone is and old hardware exists in many

00:12:50,540 --> 00:12:56,050
real-world businesses hospitals are a

00:12:53,630 --> 00:12:59,270
great example where due to budget or

00:12:56,050 --> 00:13:04,760
regulations they're running sometimes

00:12:59,270 --> 00:13:07,180
internet explorer in 2019 right so let's

00:13:04,760 --> 00:13:09,890
take a look at some performance goals

00:13:07,180 --> 00:13:10,910
and you want to start here really

00:13:09,890 --> 00:13:12,800
important when you have these

00:13:10,910 --> 00:13:15,080
conversations with your managers you

00:13:12,800 --> 00:13:17,720
know everyone the marketing department

00:13:15,080 --> 00:13:18,630
the DevOps people they want their stuff

00:13:17,720 --> 00:13:20,610
included

00:13:18,630 --> 00:13:22,470
in that page-load and so you need to be

00:13:20,610 --> 00:13:24,480
realistic and set those goals which will

00:13:22,470 --> 00:13:26,610
then help you prioritize what's

00:13:24,480 --> 00:13:31,050
necessary what can you cut what can you

00:13:26,610 --> 00:13:33,840
delay so in our case we're looking at a

00:13:31,050 --> 00:13:37,710
mid-range Android device on we're gonna

00:13:33,840 --> 00:13:41,400
say a bad 3G connection 400 kilobytes a

00:13:37,710 --> 00:13:44,100
second bandwidth and 400 milliseconds

00:13:41,400 --> 00:13:47,340
latency we want to minimize data and

00:13:44,100 --> 00:13:50,550
power usage and we're gonna focus for

00:13:47,340 --> 00:13:53,820
speed on two key indicators there's time

00:13:50,550 --> 00:13:58,800
to first paint and time to interactive

00:13:53,820 --> 00:14:01,370
so we want on an initial load less than

00:13:58,800 --> 00:14:03,660
two seconds to first paint and

00:14:01,370 --> 00:14:06,330
subsequent loads less than one second

00:14:03,660 --> 00:14:09,030
and for interactivity we want less than

00:14:06,330 --> 00:14:12,120
five seconds on an initial load and less

00:14:09,030 --> 00:14:14,670
than two seconds after that and remember

00:14:12,120 --> 00:14:16,860
that latency here is the killer so

00:14:14,670 --> 00:14:20,220
that's going to take up you know easily

00:14:16,860 --> 00:14:24,180
twenty to forty percent just ping the

00:14:20,220 --> 00:14:24,510
server for a roundtrip we have product

00:14:24,180 --> 00:14:26,520
goals

00:14:24,510 --> 00:14:28,830
hopefully we're building stuff to do

00:14:26,520 --> 00:14:31,050
useful things whether that's relax and

00:14:28,830 --> 00:14:33,900
have fun or you know make something that

00:14:31,050 --> 00:14:36,600
people want to use in our case we try to

00:14:33,900 --> 00:14:38,940
support modern browsers on desktop and

00:14:36,600 --> 00:14:43,670
mobile we're not supporting Internet

00:14:38,940 --> 00:14:48,060
Explorer and we need it to work offline

00:14:43,670 --> 00:14:50,430
so it's ok we can cut some content on

00:14:48,060 --> 00:14:52,140
functionality like our Maps page we need

00:14:50,430 --> 00:14:54,150
to get tiles from a server if you're

00:14:52,140 --> 00:14:55,590
offline we're just gonna say you know

00:14:54,150 --> 00:14:57,420
don't use the maps wait until you

00:14:55,590 --> 00:15:00,090
connect but there's lots of other stuff

00:14:57,420 --> 00:15:05,730
that that doesn't need to work and I

00:15:00,090 --> 00:15:07,770
think that ok so business goals no

00:15:05,730 --> 00:15:09,270
ultimatums I think that performance is

00:15:07,770 --> 00:15:11,250
something you should take an incremental

00:15:09,270 --> 00:15:13,170
approach to you know make one

00:15:11,250 --> 00:15:14,040
performance change at a time something

00:15:13,170 --> 00:15:16,740
is better than nothing

00:15:14,040 --> 00:15:19,020
build an offline support one step at a

00:15:16,740 --> 00:15:22,140
time starting with the most used or most

00:15:19,020 --> 00:15:24,270
impactful workflows in our case we need

00:15:22,140 --> 00:15:27,870
reasonable testing overhead like I said

00:15:24,270 --> 00:15:29,370
it's a volunteer team so we have to kind

00:15:27,870 --> 00:15:32,170
of keep that in mind we're not gonna

00:15:29,370 --> 00:15:36,310
have you know if you budget for extra

00:15:32,170 --> 00:15:38,080
or lab and we need to balance you know

00:15:36,310 --> 00:15:40,440
this sort of performance testing with

00:15:38,080 --> 00:15:43,510
new feature development adding on there

00:15:40,440 --> 00:15:45,730
and I think that one of the best things

00:15:43,510 --> 00:15:48,160
you can do is if you're talking to your

00:15:45,730 --> 00:15:50,650
users talk to them about performance

00:15:48,160 --> 00:15:52,450
right it's you know you have your

00:15:50,650 --> 00:15:55,240
product and application bugs and stuff

00:15:52,450 --> 00:15:57,310
like that but tell them listen if it

00:15:55,240 --> 00:15:59,800
takes too long to load and that makes

00:15:57,310 --> 00:16:01,360
you frustrated that's a bug like talk to

00:15:59,800 --> 00:16:03,310
me tell me about that I want to know

00:16:01,360 --> 00:16:05,920
what device you're using what the the

00:16:03,310 --> 00:16:08,620
connection was like go to speedtest.net

00:16:05,920 --> 00:16:10,690
and send me a copy of the results so

00:16:08,620 --> 00:16:12,040
that I can have realistic benchmarks you

00:16:10,690 --> 00:16:14,680
know when we're doing our internal

00:16:12,040 --> 00:16:16,810
testing I think that we have lots of

00:16:14,680 --> 00:16:20,590
great conversations with users we should

00:16:16,810 --> 00:16:24,940
definitely extend that to performance so

00:16:20,590 --> 00:16:28,030
I'm gonna dive in here and look at our

00:16:24,940 --> 00:16:31,300
strategy to make these improvements look

00:16:28,030 --> 00:16:33,010
at the tools that we're using and look

00:16:31,300 --> 00:16:39,130
at the techniques and results that we

00:16:33,010 --> 00:16:41,830
had in our production application so our

00:16:39,130 --> 00:16:45,340
stack I can hear the groans already yes

00:16:41,830 --> 00:16:48,160
we're using jQuery in production in 2019

00:16:45,340 --> 00:16:53,920
I think 2009 called and they want their

00:16:48,160 --> 00:16:56,380
developer back so it's pretty modern on

00:16:53,920 --> 00:16:59,830
the back ends we have elixir and phonics

00:16:56,380 --> 00:17:01,720
I'm sitting behind an engines proxy we

00:16:59,830 --> 00:17:03,700
used web back of course to kind of

00:17:01,720 --> 00:17:06,459
bundle up all of our front-end assets

00:17:03,700 --> 00:17:07,990
the reason for jQuery is that I love the

00:17:06,459 --> 00:17:10,380
data tables plug-in and when you're

00:17:07,990 --> 00:17:12,640
prototyping none of this matters right

00:17:10,380 --> 00:17:14,589
we're going to be cutting that out and

00:17:12,640 --> 00:17:17,650
probably go with no framework on the

00:17:14,589 --> 00:17:19,660
front ends but this is good in this case

00:17:17,650 --> 00:17:22,990
raise your hand if you're building a

00:17:19,660 --> 00:17:26,650
single page application view react it's

00:17:22,990 --> 00:17:28,209
a lot of hands so we're not I'm gonna

00:17:26,650 --> 00:17:30,340
have some stuff that touches on

00:17:28,209 --> 00:17:32,590
performance considerations with single

00:17:30,340 --> 00:17:34,960
page applications but just in terms of

00:17:32,590 --> 00:17:37,420
the numbers I'm showing on screen jQuery

00:17:34,960 --> 00:17:40,060
is kind of halfway between you and react

00:17:37,420 --> 00:17:44,540
in terms of in terms of like library

00:17:40,060 --> 00:17:47,360
size so some realistic numbers there

00:17:44,540 --> 00:17:49,310
so let's look at how our usage what's

00:17:47,360 --> 00:17:52,310
really going to drain that device

00:17:49,310 --> 00:17:55,010
battery it's gonna be two things it's

00:17:52,310 --> 00:17:58,070
gonna be the antenna and it's going to

00:17:55,010 --> 00:18:01,730
be running that CPU or on the laptop the

00:17:58,070 --> 00:18:03,770
GPU and stuff like that so how to

00:18:01,730 --> 00:18:06,050
minimize antennas just minimizing

00:18:03,770 --> 00:18:07,550
networking right batch requests if

00:18:06,050 --> 00:18:10,730
you're sending telemetry or something

00:18:07,550 --> 00:18:12,710
you know if you could if you could batch

00:18:10,730 --> 00:18:14,420
those collect all the data every 50

00:18:12,710 --> 00:18:16,490
milliseconds or whatever you want but

00:18:14,420 --> 00:18:18,800
only send it up to the server once a

00:18:16,490 --> 00:18:23,420
second or once every 10 seconds or on

00:18:18,800 --> 00:18:25,310
the next load we don't want to use

00:18:23,420 --> 00:18:27,080
polling because that's going to send a

00:18:25,310 --> 00:18:29,090
heartbeat out so there's some great tech

00:18:27,080 --> 00:18:32,470
out there like WebSockets which do a

00:18:29,090 --> 00:18:36,370
much better job of keeping a TCP

00:18:32,470 --> 00:18:40,790
connection open without that heartbeat

00:18:36,370 --> 00:18:42,890
we want to limit animations as much as

00:18:40,790 --> 00:18:45,440
possible every time that you have an

00:18:42,890 --> 00:18:47,630
animation going it's going to be

00:18:45,440 --> 00:18:50,330
repainting on the browser running that

00:18:47,630 --> 00:18:51,940
CPU and I'll show you some performance

00:18:50,330 --> 00:18:54,890
stats on that in just a minute

00:18:51,940 --> 00:18:56,330
sinking timers is important as well if

00:18:54,890 --> 00:18:58,310
you have like 10 different timers

00:18:56,330 --> 00:19:00,290
going off that aren't synchronized

00:18:58,310 --> 00:19:03,320
that's gonna wake the CPU up every time

00:19:00,290 --> 00:19:05,510
if you have something that you know 50

00:19:03,320 --> 00:19:07,430
millisecond interval and then every

00:19:05,510 --> 00:19:09,230
third time it goes off you run some

00:19:07,430 --> 00:19:12,050
other function and synchronize it that

00:19:09,230 --> 00:19:14,390
way it's a much better strategy and for

00:19:12,050 --> 00:19:16,700
common events like the scroll events or

00:19:14,390 --> 00:19:18,890
you know whenever a user types on the

00:19:16,700 --> 00:19:21,740
keyboard things that are gonna fire a

00:19:18,890 --> 00:19:23,690
lot like that you want to use timeouts

00:19:21,740 --> 00:19:25,700
and just kind of take samples of them

00:19:23,690 --> 00:19:29,210
rather than responding to every single

00:19:25,700 --> 00:19:31,340
one so we're using the chrome dev tools

00:19:29,210 --> 00:19:33,800
this is the network panel this is

00:19:31,340 --> 00:19:36,350
Google's homepage and every time you

00:19:33,800 --> 00:19:38,600
type in a character it makes another

00:19:36,350 --> 00:19:40,220
Network request so this is what I'm

00:19:38,600 --> 00:19:42,080
talking about with those events with

00:19:40,220 --> 00:19:44,990
that networking this is going to keep

00:19:42,080 --> 00:19:47,720
the antenna on your phone on that whole

00:19:44,990 --> 00:19:49,940
time it's okay I think when you're

00:19:47,720 --> 00:19:53,570
looking at really optimizing performance

00:19:49,940 --> 00:19:54,950
this is great on a desktop but it's fine

00:19:53,570 --> 00:19:56,270
to just let the use our type in their

00:19:54,950 --> 00:19:57,200
search query and hit the search button

00:19:56,270 --> 00:19:59,840
and make it

00:19:57,200 --> 00:20:04,580
single requests up or to do it once a

00:19:59,840 --> 00:20:06,980
second or once every half second this is

00:20:04,580 --> 00:20:10,070
I've loaded up some page with like a

00:20:06,980 --> 00:20:11,720
spinning loading animation on there and

00:20:10,070 --> 00:20:14,120
this is what it looks like using

00:20:11,720 --> 00:20:16,370
Chrome's dev tools performance panel you

00:20:14,120 --> 00:20:20,120
can see all of that activity all of that

00:20:16,370 --> 00:20:25,840
repainting constantly which is going to

00:20:20,120 --> 00:20:29,510
run that CPU and drain that battery so

00:20:25,840 --> 00:20:32,840
another strategy is minimizing a data

00:20:29,510 --> 00:20:35,000
usage this is just small bundles is

00:20:32,840 --> 00:20:37,250
really the answer and aggressive caching

00:20:35,000 --> 00:20:41,990
you want to compress your payloads you

00:20:37,250 --> 00:20:44,029
need to cache everything you can load

00:20:41,990 --> 00:20:45,980
content as needed which means if you

00:20:44,029 --> 00:20:49,279
don't need it up front just grab it in

00:20:45,980 --> 00:20:51,919
the background if it's not on that you

00:20:49,279 --> 00:20:53,750
know above the fold then load it as the

00:20:51,919 --> 00:20:55,279
user Scrolls down if they scroll down

00:20:53,750 --> 00:20:56,840
there's oftentimes they're just gonna

00:20:55,279 --> 00:20:59,139
click a link on the main menu and then

00:20:56,840 --> 00:21:03,289
never need that second half of the page

00:20:59,139 --> 00:21:05,090
and then I think for pre-caching with a

00:21:03,289 --> 00:21:07,460
serviceworker or something like that you

00:21:05,090 --> 00:21:09,380
want to get your app working offline ask

00:21:07,460 --> 00:21:11,000
for consent just a simple button like

00:21:09,380 --> 00:21:13,700
hey would you like to download the

00:21:11,000 --> 00:21:15,529
offline experience I think it's

00:21:13,700 --> 00:21:19,070
important when you're looking at people

00:21:15,529 --> 00:21:21,230
with low data like they're on a limited

00:21:19,070 --> 00:21:23,929
metered plan to just give them a heads

00:21:21,230 --> 00:21:25,970
up it's the white thing to do and then

00:21:23,929 --> 00:21:28,700
improving speed a lot of the same thing

00:21:25,970 --> 00:21:31,549
you need to compress payloads cache a

00:21:28,700 --> 00:21:33,529
guest of Lee server-side rendering is

00:21:31,549 --> 00:21:35,659
super useful here that's really going to

00:21:33,529 --> 00:21:37,730
reduce the amount of time it takes to

00:21:35,659 --> 00:21:38,990
get to that first paint which means if

00:21:37,730 --> 00:21:41,389
you're building a single page

00:21:38,990 --> 00:21:43,549
application you do need to do a little

00:21:41,389 --> 00:21:46,039
bit of extra work and actually send down

00:21:43,549 --> 00:21:48,049
some HTML at least send down an

00:21:46,039 --> 00:21:50,600
application shell send down the the

00:21:48,049 --> 00:21:52,580
header and the footer and a sidebar and

00:21:50,600 --> 00:21:55,279
you know maybe a little loading message

00:21:52,580 --> 00:21:57,350
or something to just get something on

00:21:55,279 --> 00:21:59,539
the screen and then once your JavaScript

00:21:57,350 --> 00:22:02,269
loads and pulls in the rest of the

00:21:59,539 --> 00:22:03,500
content and compiles the templates it'll

00:22:02,269 --> 00:22:06,010
it'll fill out the rest of the

00:22:03,500 --> 00:22:06,010
experience

00:22:07,340 --> 00:22:13,380
so images are going to delay

00:22:10,980 --> 00:22:15,840
interactivity it'll-it'll show useful

00:22:13,380 --> 00:22:17,400
stuff on the the browser right away but

00:22:15,840 --> 00:22:19,890
it's not going to run the JavaScript

00:22:17,400 --> 00:22:21,570
until after the images are loading so we

00:22:19,890 --> 00:22:23,610
try to delay that as much as possible

00:22:21,570 --> 00:22:26,280
there's also in limited bandwidth

00:22:23,610 --> 00:22:27,780
situations you can be pulling multiple

00:22:26,280 --> 00:22:30,059
things from the network at the same time

00:22:27,780 --> 00:22:32,750
but if your pipes are really small like

00:22:30,059 --> 00:22:35,820
trying to send it to the refugee camp

00:22:32,750 --> 00:22:38,100
then you don't want your JavaScript

00:22:35,820 --> 00:22:42,510
download to be competing with a bunch of

00:22:38,100 --> 00:22:45,179
user uploaded images and minimizing the

00:22:42,510 --> 00:22:46,679
amount of stuff on the critical path is

00:22:45,179 --> 00:22:49,410
definitely a good technique especially

00:22:46,679 --> 00:22:52,740
for single page applications you don't

00:22:49,410 --> 00:22:54,630
need all of your templates at once load

00:22:52,740 --> 00:22:56,790
the current template load the

00:22:54,630 --> 00:22:58,740
interactivity above the fold and then

00:22:56,790 --> 00:23:02,070
asynchronously grab the rest of that

00:22:58,740 --> 00:23:05,400
once the page is up and running so we're

00:23:02,070 --> 00:23:08,040
gonna be taking a look now at our groups

00:23:05,400 --> 00:23:10,559
list page this has static content

00:23:08,040 --> 00:23:12,900
static sections of the site user

00:23:10,559 --> 00:23:15,030
uploaded text and images and some

00:23:12,900 --> 00:23:16,860
JavaScript functionality you can sort

00:23:15,030 --> 00:23:21,150
the table by name you can do a search

00:23:16,860 --> 00:23:24,750
and we're using really for tools like

00:23:21,150 --> 00:23:27,059
keeping it simple for our team is chrome

00:23:24,750 --> 00:23:30,419
dev tools Network and performance panels

00:23:27,059 --> 00:23:33,780
there is some setup here so to simulate

00:23:30,419 --> 00:23:37,500
a bad 3G connection we're slowing down

00:23:33,780 --> 00:23:41,250
the CPU as much as dev tools will allow

00:23:37,500 --> 00:23:44,250
and we're putting in a custom network

00:23:41,250 --> 00:23:47,309
throttling profile so remember it's 400

00:23:44,250 --> 00:23:51,929
milliseconds latency and a 400 kilobyte

00:23:47,309 --> 00:23:53,880
a second connection and we're gonna take

00:23:51,929 --> 00:23:57,510
a look at a baseline this was our app

00:23:53,880 --> 00:23:59,370
two weeks ago we already do have some

00:23:57,510 --> 00:24:01,080
goodies so because we're doing a

00:23:59,370 --> 00:24:04,320
server-side rendering model with onyx

00:24:01,080 --> 00:24:06,299
and elixir that's there what pack

00:24:04,320 --> 00:24:09,650
already does some minimization for us

00:24:06,299 --> 00:24:11,880
and Phonics has built-in cache busting

00:24:09,650 --> 00:24:17,669
raise your hand if you know what cache

00:24:11,880 --> 00:24:19,759
busting is okay 50/50 so basically what

00:24:17,669 --> 00:24:22,249
you do you compile your ass

00:24:19,759 --> 00:24:24,259
and generate a hash of the file and

00:24:22,249 --> 00:24:27,679
you're actually gonna serve up a file

00:24:24,259 --> 00:24:31,549
with like you know app - the hash j/s

00:24:27,679 --> 00:24:33,559
what this means is that you can send

00:24:31,549 --> 00:24:35,659
your your caching headers right just

00:24:33,559 --> 00:24:38,480
tell the browser to hold on to that

00:24:35,659 --> 00:24:40,009
forever they never need to load it again

00:24:38,480 --> 00:24:42,169
from your server as long as they have a

00:24:40,009 --> 00:24:44,090
local copy when you make a change in

00:24:42,169 --> 00:24:45,860
your application it generates a new hash

00:24:44,090 --> 00:24:48,529
and you actually just download a

00:24:45,860 --> 00:24:51,110
different file which is I think a pretty

00:24:48,529 --> 00:24:53,419
good way of dealing with caching and

00:24:51,110 --> 00:24:59,929
just trying to hold on to that data as

00:24:53,419 --> 00:25:03,230
long as it's needed so likes this is our

00:24:59,929 --> 00:25:05,809
initial load time it took five seconds

00:25:03,230 --> 00:25:08,840
on our simulated connection to to paint

00:25:05,809 --> 00:25:11,840
the page it took 22 seconds to become

00:25:08,840 --> 00:25:16,100
interactive and we downloaded basically

00:25:11,840 --> 00:25:20,330
a megabyte of content this seems really

00:25:16,100 --> 00:25:22,700
bad it is a bad 3G connection in 2017

00:25:20,330 --> 00:25:25,190
this was the average load time for

00:25:22,700 --> 00:25:28,999
mobile there's 22 seconds to to just

00:25:25,190 --> 00:25:32,929
grab a page so I think we can do better

00:25:28,999 --> 00:25:35,690
than that this is the performance pane

00:25:32,929 --> 00:25:39,139
and dev tools you see really long load

00:25:35,690 --> 00:25:41,359
times grabbing that javascript file to

00:25:39,139 --> 00:25:44,779
get to interactivity even just grabbing

00:25:41,359 --> 00:25:49,909
the images and the HTML took quite a

00:25:44,779 --> 00:25:51,739
while so secondary loads are better we

00:25:49,909 --> 00:25:55,220
can take advantage of browser caching

00:25:51,739 --> 00:25:58,399
takes about a second to paint the page

00:25:55,220 --> 00:26:00,559
and become interactive and because we're

00:25:58,399 --> 00:26:02,749
using cache busting we're just grabbing

00:26:00,559 --> 00:26:05,149
the updated content so it's just the

00:26:02,749 --> 00:26:07,909
HTML file this might be something with a

00:26:05,149 --> 00:26:09,440
single page application it's cached all

00:26:07,909 --> 00:26:11,179
your JavaScript and you just have to

00:26:09,440 --> 00:26:16,940
make a JSON request or something like

00:26:11,179 --> 00:26:17,720
that so you can see there it's it's

00:26:16,940 --> 00:26:21,080
loading

00:26:17,720 --> 00:26:24,799
just about everything compassion for the

00:26:21,080 --> 00:26:28,369
HTML page so we're gonna focus on some

00:26:24,799 --> 00:26:30,559
speed improvements here we didn't I

00:26:28,369 --> 00:26:32,480
thought that we had gzip going it turns

00:26:30,559 --> 00:26:32,800
out I got a configuration file wrong and

00:26:32,480 --> 00:26:35,500
we do

00:26:32,800 --> 00:26:38,080
at all so I did some research and I

00:26:35,500 --> 00:26:41,860
threw on broadly it's basically the new

00:26:38,080 --> 00:26:43,510
gzip it has about a 25% smaller file

00:26:41,860 --> 00:26:47,410
sizes when the compression is done

00:26:43,510 --> 00:26:50,050
I added HTTP to two engines which

00:26:47,410 --> 00:26:51,550
multiplex requests it can reuse TCP

00:26:50,050 --> 00:26:53,620
connections which means you don't have

00:26:51,550 --> 00:26:55,480
to deal with that latency for every

00:26:53,620 --> 00:26:57,370
single pipe that you have open you just

00:26:55,480 --> 00:26:59,560
open up a handful of them at the start

00:26:57,370 --> 00:27:02,770
and then you can load up more stuff and

00:26:59,560 --> 00:27:05,590
through those pipes I implemented a

00:27:02,770 --> 00:27:08,650
fairly simple bundle splitting strategy

00:27:05,590 --> 00:27:11,260
in web pack and so I think that there we

00:27:08,650 --> 00:27:13,630
could do even more here but for now I

00:27:11,260 --> 00:27:17,020
just wanted to separate our application

00:27:13,630 --> 00:27:18,940
code and styles from our vendor code and

00:27:17,020 --> 00:27:21,640
styles because the libraries and stuff

00:27:18,940 --> 00:27:24,220
we use don't change nearly as often as

00:27:21,640 --> 00:27:26,800
updates to our actual business logic and

00:27:24,220 --> 00:27:30,190
in front-end code this will allow me to

00:27:26,800 --> 00:27:33,070
cache that vendor file and just keep it

00:27:30,190 --> 00:27:34,600
there for weeks at a time until we throw

00:27:33,070 --> 00:27:39,460
in the new import while we're making

00:27:34,600 --> 00:27:41,550
daily changes to the application yeah

00:27:39,460 --> 00:27:44,290
some image resizing just cutting down

00:27:41,550 --> 00:27:46,320
take a look like you're throwing on fun

00:27:44,290 --> 00:27:48,430
awesome or something you don't need a

00:27:46,320 --> 00:27:51,690
thousand icons you're probably just

00:27:48,430 --> 00:27:55,660
using 50 in your app double check that

00:27:51,690 --> 00:27:57,310
and lazy load user-generated images you

00:27:55,660 --> 00:28:01,390
can grab them after you get

00:27:57,310 --> 00:28:03,400
interactivity so we hit our goals with

00:28:01,390 --> 00:28:06,730
these improvements alone we got it down

00:28:03,400 --> 00:28:09,040
to just under two seconds to first paint

00:28:06,730 --> 00:28:12,970
four and a half seconds to interactive

00:28:09,040 --> 00:28:14,560
and really cut down on the amount of

00:28:12,970 --> 00:28:16,810
data we're transferring and the the

00:28:14,560 --> 00:28:18,580
overall size there so just with some

00:28:16,810 --> 00:28:20,800
like simple improvements a couple of

00:28:18,580 --> 00:28:23,260
server configurations lazy loading the

00:28:20,800 --> 00:28:27,040
images and doing some bundle splitting

00:28:23,260 --> 00:28:28,750
with web pack we see you know over sixty

00:28:27,040 --> 00:28:32,470
percent performance improvement in the

00:28:28,750 --> 00:28:36,160
metrics that matter you can see here

00:28:32,470 --> 00:28:38,680
that that side that's those images that

00:28:36,160 --> 00:28:40,840
were lazy loading so the paint happens

00:28:38,680 --> 00:28:44,470
really quickly we're reusing a lot of

00:28:40,840 --> 00:28:46,490
the you know same TCP connections with

00:28:44,470 --> 00:28:48,470
HTTP to it gets to

00:28:46,490 --> 00:28:52,429
activity and then we just grab the rest

00:28:48,470 --> 00:28:54,290
of that user content subsequent loads

00:28:52,429 --> 00:28:57,190
similar source of improvement we're down

00:28:54,290 --> 00:29:00,700
to under a second on a bad connection

00:28:57,190 --> 00:29:04,490
for first paint and interactivity and

00:29:00,700 --> 00:29:08,179
we're only serving up 2.6 kilobytes just

00:29:04,490 --> 00:29:10,840
the updated content on the page so I got

00:29:08,179 --> 00:29:14,240
one minute and I'm just gonna touch on

00:29:10,840 --> 00:29:16,670
serviceworkers really quickly here our

00:29:14,240 --> 00:29:21,020
basic strategy we want to cache all the

00:29:16,670 --> 00:29:23,090
static assets on install and serve them

00:29:21,020 --> 00:29:24,650
with a cache first approach so this is

00:29:23,090 --> 00:29:26,929
where cache busting comes in really

00:29:24,650 --> 00:29:29,030
useful is that if you have that file

00:29:26,929 --> 00:29:31,130
there just serve it up no need to go to

00:29:29,030 --> 00:29:33,170
the network if you don't then fall back

00:29:31,130 --> 00:29:36,440
to the network grab it cache it for next

00:29:33,170 --> 00:29:37,640
time and then for the pages because

00:29:36,440 --> 00:29:40,520
those might be updated with

00:29:37,640 --> 00:29:42,650
user-generated content we want to do a

00:29:40,520 --> 00:29:44,120
network first approach but keep them

00:29:42,650 --> 00:29:46,960
cached so grab them from the network

00:29:44,120 --> 00:29:50,150
grab the latest copy if you go offline

00:29:46,960 --> 00:29:51,740
be able to serve that copy from your

00:29:50,150 --> 00:29:57,020
cache so we're using service workers

00:29:51,740 --> 00:30:00,070
we're using the cache API yeah and it

00:29:57,020 --> 00:30:03,590
gets really fast so this is with online

00:30:00,070 --> 00:30:06,590
we have half a second to interactivity

00:30:03,590 --> 00:30:10,700
and most of that is a 400 millisecond

00:30:06,590 --> 00:30:16,520
latency to to grab the updated HTML page

00:30:10,700 --> 00:30:18,050
and that's what we see here so it's just

00:30:16,520 --> 00:30:20,000
grabbing that stuff and then loading

00:30:18,050 --> 00:30:23,990
everything from cache what's really

00:30:20,000 --> 00:30:25,940
interesting is that offline is actually

00:30:23,990 --> 00:30:27,710
the best performance because we don't

00:30:25,940 --> 00:30:29,809
have that latency we don't have to hit

00:30:27,710 --> 00:30:31,880
the network up it just loads the the

00:30:29,809 --> 00:30:34,309
last version of everything we cached a

00:30:31,880 --> 00:30:36,080
hundred milliseconds to get there in one

00:30:34,309 --> 00:30:38,570
hundred and fifty know day to day

00:30:36,080 --> 00:30:41,090
transferred so once we kind of wrap this

00:30:38,570 --> 00:30:43,010
up you know make a couple more touch-ups

00:30:41,090 --> 00:30:44,960
to our service workers I'm just gonna

00:30:43,010 --> 00:30:46,580
tell aid workers in the field hit

00:30:44,960 --> 00:30:48,530
airplane mode like download the latest

00:30:46,580 --> 00:30:50,660
copy in the morning hit airplane mode do

00:30:48,530 --> 00:30:53,830
your work all day on hit airplane mode

00:30:50,660 --> 00:30:57,679
and and upload it at the end of the day

00:30:53,830 --> 00:30:59,300
cool so thank you so much that's kind of

00:30:57,679 --> 00:30:59,929
my talk I hoped it served as like a good

00:30:59,300 --> 00:31:02,330
overview

00:30:59,929 --> 00:31:04,279
of performance optimizations you can

00:31:02,330 --> 00:31:07,909
make and JavaScript and a little bit

00:31:04,279 --> 00:31:09,919
about the refugee aid movement you can

00:31:07,909 --> 00:31:12,679
check out the offline functionality on

00:31:09,919 --> 00:31:14,990
our app all the code is publicly

00:31:12,679 --> 00:31:16,879
available on github and I'll be throwing

00:31:14,990 --> 00:31:18,860
the slides up along with some links to

00:31:16,879 --> 00:31:21,010
further research and tutorials on our

00:31:18,860 --> 00:31:30,630
Twitter cool enjoy your lunch

00:31:21,010 --> 00:31:30,630

YouTube URL: https://www.youtube.com/watch?v=3VW2Q9kZ_MA


