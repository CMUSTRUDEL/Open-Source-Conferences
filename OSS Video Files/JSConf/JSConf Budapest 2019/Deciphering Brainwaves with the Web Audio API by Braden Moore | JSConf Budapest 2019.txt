Title: Deciphering Brainwaves with the Web Audio API by Braden Moore | JSConf Budapest 2019
Publication date: 2019-10-25
Playlist: JSConf Budapest 2019
Description: 
	https://2019.jsconfbp.com/speakers/braden_moore

Early last year, my colleagues and I did something amazing — using only JavaScript, the browser, and the Web Audio API, we were able to decipher brainwaves. It sounds sensational, but it’s (mostly) true. This is a story about how we converted brainwaves into audio signals — and then back again — to solve the problem of epilepsy diagnosis on the web.

In this talk, you’ll get to see a new browser API being used in a novel and unprecedented way, combined with world-leading innovations in the field of epilepsy diagnosis. You’ll learn about the challenges of real-time brainwave filtering and how we solved them. As you’ll see, the technologies we use each day can sometimes be applied in unexpected ways. And sometimes, they make a huge difference in the lives of others.

Come along for the journey as we decipher brainwaves in the browser.

A former particle physicist, Braden left behind the world of hadron colliders and dark matter to become a web developer. After picking up JavaScript, he's never looked back. In his spare time, Braden is an avid writer and an aspiring fencer, and hopes to one day compete in the Olympics.
Captions: 
	00:00:00,700 --> 00:00:05,170
[Applause]

00:00:06,170 --> 00:00:11,130
so last year my colleagues and I did

00:00:08,790 --> 00:00:12,809
something pretty exciting using only the

00:00:11,130 --> 00:00:15,690
browser a little bit of JavaScript and

00:00:12,809 --> 00:00:18,270
something called the Web Audio API we

00:00:15,690 --> 00:00:19,710
were able to decipher brain waves now

00:00:18,270 --> 00:00:22,260
that sounds a little pretty a little bit

00:00:19,710 --> 00:00:23,609
sensational but it's mostly true so

00:00:22,260 --> 00:00:25,140
today I'd like to tell you the story of

00:00:23,609 --> 00:00:27,119
our journey through the lows and highs

00:00:25,140 --> 00:00:30,090
of web audio on a quest to decipher

00:00:27,119 --> 00:00:32,160
brain waves in the browser so this is

00:00:30,090 --> 00:00:34,110
story of discovery it's about finding

00:00:32,160 --> 00:00:36,059
out what the web can offer it's a story

00:00:34,110 --> 00:00:38,670
of exploration about pushing the

00:00:36,059 --> 00:00:41,700
boundaries of web technologies to differ

00:00:38,670 --> 00:00:43,260
to make a difference and last it's well

00:00:41,700 --> 00:00:46,770
it's a story that has a really cool demo

00:00:43,260 --> 00:00:48,719
at the end so stay tuned but before I

00:00:46,770 --> 00:00:51,239
can tell you that story have to tell you

00:00:48,719 --> 00:00:52,800
this one so my name is Braden Moore I'm

00:00:51,239 --> 00:00:55,590
a full-stack developer at an Australian

00:00:52,800 --> 00:00:57,600
medical technology startup called C R so

00:00:55,590 --> 00:00:59,760
C R provides Australia's largest

00:00:57,600 --> 00:01:01,410
epilepsy management and diagnostic

00:00:59,760 --> 00:01:03,899
service in fact the tagline of our

00:01:01,410 --> 00:01:06,000
corporate website is epileptic diagnosis

00:01:03,899 --> 00:01:07,380
made easy now I didn't know anything

00:01:06,000 --> 00:01:10,049
about epilepsy before I started working

00:01:07,380 --> 00:01:11,880
at C R and I guess that's kind of true

00:01:10,049 --> 00:01:14,100
for a lot of people so let me give you

00:01:11,880 --> 00:01:15,689
some of the facts so epilepsy is a

00:01:14,100 --> 00:01:18,060
chronic condition that affects over 6

00:01:15,689 --> 00:01:19,860
million people worldwide now the

00:01:18,060 --> 00:01:21,869
symptoms of EPs can vary from person to

00:01:19,860 --> 00:01:23,460
person but could range from loss of

00:01:21,869 --> 00:01:26,280
awareness loss of bodily control to

00:01:23,460 --> 00:01:28,409
full-body seizures now these events can

00:01:26,280 --> 00:01:30,270
vary in frequency summer times happening

00:01:28,409 --> 00:01:32,280
multiple times a day up to once a month

00:01:30,270 --> 00:01:33,810
or even just as rare as once a year but

00:01:32,280 --> 00:01:36,659
the results can be devastating

00:01:33,810 --> 00:01:38,939
regardless and there's no known cure for

00:01:36,659 --> 00:01:40,500
all types of epilepsy but with their

00:01:38,939 --> 00:01:44,009
diagnosis some of the symptoms can be

00:01:40,500 --> 00:01:46,079
treated so the way that epilepsy

00:01:44,009 --> 00:01:48,180
diagnose is by reviewing a patient's

00:01:46,079 --> 00:01:50,610
brain waves in what's called an EEG or

00:01:48,180 --> 00:01:52,979
electroencephalogram so each of these

00:01:50,610 --> 00:01:55,049
traces they represent the electoral

00:01:52,979 --> 00:01:56,219
signals from certain parts of a

00:01:55,049 --> 00:01:58,649
patient's brain captured using

00:01:56,219 --> 00:02:00,689
electrodes on the head so a clinical

00:01:58,649 --> 00:02:03,240
team uses EEG just like these to help

00:02:00,689 --> 00:02:04,320
provide a diagnosis now the service that

00:02:03,240 --> 00:02:06,299
we offer to see it looks like this

00:02:04,320 --> 00:02:07,590
patient comes to our clinics where they

00:02:06,299 --> 00:02:09,539
get connected with his electrodes to

00:02:07,590 --> 00:02:11,340
monitor their brainwaves over the next

00:02:09,539 --> 00:02:12,510
seven days we send them home they can

00:02:11,340 --> 00:02:13,890
live their life in a comfort of their

00:02:12,510 --> 00:02:15,569
own home while being monitored

00:02:13,890 --> 00:02:17,850
then after that time they come back to

00:02:15,569 --> 00:02:20,610
our clinic they get disconnected and

00:02:17,850 --> 00:02:22,140
then we spent a few weeks looking

00:02:20,610 --> 00:02:23,900
through our data and looking for

00:02:22,140 --> 00:02:26,280
something that might give us a diagnosis

00:02:23,900 --> 00:02:27,630
so we've got seven days with the data

00:02:26,280 --> 00:02:29,400
what is it that the scientists are

00:02:27,630 --> 00:02:30,540
looking for well look sometimes they're

00:02:29,400 --> 00:02:31,680
looking for the obvious they're looking

00:02:30,540 --> 00:02:33,030
for something like these minute long

00:02:31,680 --> 00:02:35,190
seizures that are pretty easy to capture

00:02:33,030 --> 00:02:36,690
on tape but if these are very rare

00:02:35,190 --> 00:02:37,800
events happening once a month or even

00:02:36,690 --> 00:02:39,660
once a year it's not guaranteed that

00:02:37,800 --> 00:02:41,459
will capture that during the seven days

00:02:39,660 --> 00:02:42,510
of getting wanted so more often they're

00:02:41,459 --> 00:02:43,890
looking for something a bit smaller

00:02:42,510 --> 00:02:46,470
they're looking for something like a

00:02:43,890 --> 00:02:47,670
needle in a haystack well in epilepsy

00:02:46,470 --> 00:02:49,800
there's something called the

00:02:47,670 --> 00:02:51,630
characteristic signal of epilepsy which

00:02:49,800 --> 00:02:54,630
is called a spike wave so it's these

00:02:51,630 --> 00:02:56,760
little spikes and little waves that

00:02:54,630 --> 00:02:57,690
around half a second long each and so

00:02:56,760 --> 00:02:59,640
while a patient might only have a

00:02:57,690 --> 00:03:02,340
seizure once a month they might have

00:02:59,640 --> 00:03:04,260
dozens of these little spike waves every

00:03:02,340 --> 00:03:05,459
day and so it's these needle and

00:03:04,260 --> 00:03:07,050
haystack so they're scientists are

00:03:05,459 --> 00:03:09,150
looking for in fact you're looking at a

00:03:07,050 --> 00:03:12,239
whole kind of run of little spike waves

00:03:09,150 --> 00:03:13,769
right there okay that's great but what

00:03:12,239 --> 00:03:15,720
does a web developer have to do with it

00:03:13,769 --> 00:03:17,580
I mentioned before that our clinical

00:03:15,720 --> 00:03:18,690
team gets this data and then they start

00:03:17,580 --> 00:03:21,750
reviewing it but that's not the full

00:03:18,690 --> 00:03:22,920
story like every second Plattner company

00:03:21,750 --> 00:03:26,430
these days we have our own cloud

00:03:22,920 --> 00:03:28,110
platform and it's a platform for secure

00:03:26,430 --> 00:03:30,660
management of storage and review of

00:03:28,110 --> 00:03:32,459
medical data so and one of the powerful

00:03:30,660 --> 00:03:35,220
things about this platform is it allows

00:03:32,459 --> 00:03:37,739
a clinical team to upload this EEG brain

00:03:35,220 --> 00:03:40,530
wave data and then review it anywhere at

00:03:37,739 --> 00:03:42,200
anytime or through a browser one of the

00:03:40,530 --> 00:03:44,250
major technical challenges of this

00:03:42,200 --> 00:03:46,440
building this platform is the ability to

00:03:44,250 --> 00:03:47,910
view or they start on the platform so to

00:03:46,440 --> 00:03:49,500
tackle this problem we've built

00:03:47,910 --> 00:03:52,590
something that's very creatively called

00:03:49,500 --> 00:03:54,360
our viewer to view the data an Emmy

00:03:52,590 --> 00:03:57,060
because it's hard and it looks something

00:03:54,360 --> 00:03:58,320
like this in fact it looks exactly like

00:03:57,060 --> 00:04:00,660
this this is a screen shot I just took

00:03:58,320 --> 00:04:02,880
you know a few minutes ago and so it's

00:04:00,660 --> 00:04:05,130
this data viewer that our clinical team

00:04:02,880 --> 00:04:05,549
uses to review these seven days worth of

00:04:05,130 --> 00:04:08,250
data

00:04:05,549 --> 00:04:11,220
and to label events and to eventually

00:04:08,250 --> 00:04:13,500
deliver a diagnosis one of the big

00:04:11,220 --> 00:04:16,320
challenges in getting us scientists to

00:04:13,500 --> 00:04:17,459
move from traditional so one of the big

00:04:16,320 --> 00:04:19,109
challenges sorry that we face in splat

00:04:17,459 --> 00:04:20,880
form is getting neurophysiologists as

00:04:19,109 --> 00:04:23,370
they called to move from traditional

00:04:20,880 --> 00:04:25,960
desktop based software's into a cloud

00:04:23,370 --> 00:04:28,810
platform now

00:04:25,960 --> 00:04:30,220
they often neurophysiologist often flick

00:04:28,810 --> 00:04:32,620
through EEG data very quickly they're

00:04:30,220 --> 00:04:33,819
going for pages a second so flick flick

00:04:32,620 --> 00:04:35,289
flick that is looking very quickly

00:04:33,819 --> 00:04:36,610
through this because if you want to get

00:04:35,289 --> 00:04:39,759
through lots of data you don't wanna be

00:04:36,610 --> 00:04:41,080
spending a lot of time on each page the

00:04:39,759 --> 00:04:42,310
way they are able to accomplish that is

00:04:41,080 --> 00:04:43,630
because they're trained to look at for

00:04:42,310 --> 00:04:44,830
patterns they're looking for certain

00:04:43,630 --> 00:04:47,229
things like these spike in waves

00:04:44,830 --> 00:04:48,580
remember that's a half second thing in a

00:04:47,229 --> 00:04:50,530
10 second page that you're looking at

00:04:48,580 --> 00:04:52,180
for these pages per second so you're

00:04:50,530 --> 00:04:53,710
looking for a needle in a haystack but

00:04:52,180 --> 00:04:56,319
what happens when a needle doesn't look

00:04:53,710 --> 00:04:57,520
like a needle what happens when the EEG

00:04:56,319 --> 00:04:59,860
data that you're trained to look for

00:04:57,520 --> 00:05:01,449
doesn't look quite right well in cases

00:04:59,860 --> 00:05:04,199
like those those could lead to

00:05:01,449 --> 00:05:08,110
misdiagnosis and awful patient outcomes

00:05:04,199 --> 00:05:11,400
so this is our problem how can we take a

00:05:08,110 --> 00:05:14,020
ETA review from desktop to the browser

00:05:11,400 --> 00:05:16,270
so there's one particular aspect of

00:05:14,020 --> 00:05:17,919
displaying this EEG that's very

00:05:16,270 --> 00:05:20,169
important but also a little bit tricky

00:05:17,919 --> 00:05:21,669
and that's called signal filtering so if

00:05:20,169 --> 00:05:24,490
this problem of signal filtering that

00:05:21,669 --> 00:05:26,560
we're going to explore today so let's

00:05:24,490 --> 00:05:28,810
illustrate the problem on the Left

00:05:26,560 --> 00:05:30,909
here's some EEG data that has signal

00:05:28,810 --> 00:05:33,400
filters applied that's great on the

00:05:30,909 --> 00:05:35,440
right is that same data with filters

00:05:33,400 --> 00:05:37,570
turned off so clearly there's a very big

00:05:35,440 --> 00:05:39,039
difference between these two so why is

00:05:37,570 --> 00:05:40,960
this you know where we store it's still

00:05:39,039 --> 00:05:42,849
you know recording the brain here well

00:05:40,960 --> 00:05:44,460
like most electrical signals when you're

00:05:42,849 --> 00:05:46,300
recording something you're not just

00:05:44,460 --> 00:05:48,190
recording that brain activity you're

00:05:46,300 --> 00:05:50,229
also recording a bunch of extra noise

00:05:48,190 --> 00:05:51,580
and artifact so some of this noise can

00:05:50,229 --> 00:05:53,580
come from let's say hi if we're gonna

00:05:51,580 --> 00:05:57,159
see muscle contractions could come from

00:05:53,580 --> 00:05:59,050
like a DC drift or it can come from like

00:05:57,159 --> 00:06:01,060
the mains electricity noise so all of

00:05:59,050 --> 00:06:04,599
these things aren't brain waves but they

00:06:01,060 --> 00:06:06,940
still show up in this EEG so what does

00:06:04,599 --> 00:06:09,759
it filter after all well no it's not

00:06:06,940 --> 00:06:12,009
that one let me explain what a filter is

00:06:09,759 --> 00:06:14,409
by talking a bit about music we all like

00:06:12,009 --> 00:06:16,870
music so this is an audio spectrograph

00:06:14,409 --> 00:06:18,940
it's a visual representation of all the

00:06:16,870 --> 00:06:20,469
frequencies of a piece of audio like

00:06:18,940 --> 00:06:22,659
your favorite song at a given point in

00:06:20,469 --> 00:06:24,460
time so it has like low frequency is

00:06:22,659 --> 00:06:26,289
like the Bass & Drums mid frequencies

00:06:24,460 --> 00:06:28,930
like another spoken voice and maybe

00:06:26,289 --> 00:06:30,219
higher frequencies like wind chimes or

00:06:28,930 --> 00:06:32,320
pan flutes or other you know super

00:06:30,219 --> 00:06:34,810
common instruments that you'd hear so

00:06:32,320 --> 00:06:36,159
just like audio your brain wave is also

00:06:34,810 --> 00:06:37,690
composed of a range of different

00:06:36,159 --> 00:06:38,669
frequencies all happening at the same

00:06:37,690 --> 00:06:40,590
time

00:06:38,669 --> 00:06:42,270
so think about music imagine you're

00:06:40,590 --> 00:06:43,499
producing a song but you've got this

00:06:42,270 --> 00:06:44,580
kind of bass noise you're not really

00:06:43,499 --> 00:06:46,560
wanting in the air or there's too much

00:06:44,580 --> 00:06:48,599
pan-flute well one way to get rid of

00:06:46,560 --> 00:06:50,039
that is by filtering out like the lower

00:06:48,599 --> 00:06:53,430
frequencies or filtering out the higher

00:06:50,039 --> 00:06:55,289
frequencies and so for eg there's kind

00:06:53,430 --> 00:06:57,599
of three main filters we'd like to apply

00:06:55,289 --> 00:06:59,699
you can have a high-pass filter which is

00:06:57,599 --> 00:07:00,900
like this it lets everything higher than

00:06:59,699 --> 00:07:03,389
the filter frequency pass through

00:07:00,900 --> 00:07:06,479
there's a notch filter which notches or

00:07:03,389 --> 00:07:08,129
cuts out the the frequent range of

00:07:06,479 --> 00:07:09,629
frequencies and the low pass which is

00:07:08,129 --> 00:07:10,800
the opposite of your high pass filter

00:07:09,629 --> 00:07:13,080
everything lower than the filter if we

00:07:10,800 --> 00:07:14,610
can see passes through you can also

00:07:13,080 --> 00:07:16,830
combine them you can have multiple of

00:07:14,610 --> 00:07:20,159
these filters running at once and that's

00:07:16,830 --> 00:07:22,259
exactly what we'd like to do so okay how

00:07:20,159 --> 00:07:23,930
can we go about implementing filters in

00:07:22,259 --> 00:07:26,490
javascript in the browser on the cloud

00:07:23,930 --> 00:07:27,810
well look first could we not have a

00:07:26,490 --> 00:07:30,539
filter at all you know the best code is

00:07:27,810 --> 00:07:32,580
the code you don't have to write but now

00:07:30,539 --> 00:07:34,500
remember a couple of slides back with

00:07:32,580 --> 00:07:35,639
filtering without filtering that's it's

00:07:34,500 --> 00:07:38,129
kind of night and day right there so

00:07:35,639 --> 00:07:40,469
that's a bit of a no-go I mean how would

00:07:38,129 --> 00:07:42,659
have been happy with it but so could we

00:07:40,469 --> 00:07:45,659
write our own filter implementation well

00:07:42,659 --> 00:07:48,779
it's kind of a maybe and because of

00:07:45,659 --> 00:07:50,250
stuff like this and and this and all

00:07:48,779 --> 00:07:51,839
this stuff so I trained as a particle

00:07:50,250 --> 00:07:53,610
physicist not an electrical engineer so

00:07:51,839 --> 00:07:54,810
don't know too much about filtering but

00:07:53,610 --> 00:07:56,699
I've been told that there's a bit of

00:07:54,810 --> 00:07:59,490
subtleties involved in implementing a

00:07:56,699 --> 00:08:00,750
filter and I'm sure you could agree that

00:07:59,490 --> 00:08:02,430
JavaScript probably isn't the best

00:08:00,750 --> 00:08:05,129
language to handle you know complex

00:08:02,430 --> 00:08:07,199
mathematical processes so put that on

00:08:05,129 --> 00:08:08,550
the back burner maybe could we use a

00:08:07,199 --> 00:08:09,539
package you know where JavaScript

00:08:08,550 --> 00:08:12,240
developers after all it's what we're

00:08:09,539 --> 00:08:12,779
trying to do so how about this one this

00:08:12,240 --> 00:08:14,430
is promising

00:08:12,779 --> 00:08:15,659
DSP kit it's a digital signal processing

00:08:14,430 --> 00:08:18,409
library it seems like Inc process

00:08:15,659 --> 00:08:21,539
signals it is not intended to be used

00:08:18,409 --> 00:08:21,960
it's good Fairplay to them how about

00:08:21,539 --> 00:08:23,969
this one

00:08:21,960 --> 00:08:26,490
DSP Jas now actually this one is I think

00:08:23,969 --> 00:08:27,990
it's the most starred signal processing

00:08:26,490 --> 00:08:29,909
library in JavaScript so you thought you

00:08:27,990 --> 00:08:31,919
think this is probably the way to go but

00:08:29,909 --> 00:08:36,240
it hasn't had a meaningful update in

00:08:31,919 --> 00:08:37,560
nine years I mean I wasn't even coding

00:08:36,240 --> 00:08:39,479
nine years ago so I think of this

00:08:37,560 --> 00:08:40,680
happened in the web since then so maybe

00:08:39,479 --> 00:08:43,019
maybe that's not the way either

00:08:40,680 --> 00:08:45,690
so those three options are exhausted now

00:08:43,019 --> 00:08:47,069
what are we left with well if you've

00:08:45,690 --> 00:08:49,050
read the title of this talk you probably

00:08:47,069 --> 00:08:52,640
know what's coming next I want I won't

00:08:49,050 --> 00:08:52,640
leave you in suspense so introducing

00:08:55,260 --> 00:08:59,620
there's very quiet drum rolls that you

00:08:57,520 --> 00:09:02,620
could've just heard them but the Web

00:08:59,620 --> 00:09:04,779
Audio API so this is a Web API that's

00:09:02,620 --> 00:09:06,430
designed for processing audio it's

00:09:04,779 --> 00:09:08,230
standardized while maintained as decent

00:09:06,430 --> 00:09:09,880
browser support and it's gonna active

00:09:08,230 --> 00:09:10,690
group of contributors and users so look

00:09:09,880 --> 00:09:12,600
you're looking for something that works

00:09:10,690 --> 00:09:14,980
now Web Audio is probably the way to go

00:09:12,600 --> 00:09:16,300
well when I was first starting to use

00:09:14,980 --> 00:09:18,490
Web Audio are the Mozilla developer

00:09:16,300 --> 00:09:19,899
Network or mdn Doc's were invaluable and

00:09:18,490 --> 00:09:21,700
actually just learned at this conference

00:09:19,899 --> 00:09:23,890
that many of these Doc's are written by

00:09:21,700 --> 00:09:26,310
live GS is very own routes so big shout

00:09:23,890 --> 00:09:28,390
out so Ruth for helping me learn this

00:09:26,310 --> 00:09:30,730
but let me take you through some of the

00:09:28,390 --> 00:09:32,050
basic concepts here so how do you use

00:09:30,730 --> 00:09:33,010
the Web Audio API how to actually use it

00:09:32,050 --> 00:09:34,779
to process this data

00:09:33,010 --> 00:09:35,950
well first you create an audio context

00:09:34,779 --> 00:09:37,839
this is kind of the canvas where

00:09:35,950 --> 00:09:39,670
everything happens inside this audio

00:09:37,839 --> 00:09:41,440
context you create a bunch of nodes one

00:09:39,670 --> 00:09:42,790
of which being your input node so this

00:09:41,440 --> 00:09:44,320
might be an oscilloscope or this might

00:09:42,790 --> 00:09:46,360
be like you're feeding microphone into

00:09:44,320 --> 00:09:48,820
there next you can make a bunch of a fix

00:09:46,360 --> 00:09:51,100
nodes so you could do things like reverb

00:09:48,820 --> 00:09:52,360
or compression panning and many more all

00:09:51,100 --> 00:09:53,950
the things that you know greatly with

00:09:52,360 --> 00:09:57,370
audio maybe you wanna put reverb on your

00:09:53,950 --> 00:09:59,200
IEG just just me you could also and then

00:09:57,370 --> 00:10:00,370
you've got to specify the destination so

00:09:59,200 --> 00:10:01,750
where is this all getting output to

00:10:00,370 --> 00:10:04,779
conventionally that's gonna be your

00:10:01,750 --> 00:10:06,220
speakers alright so after you do that

00:10:04,779 --> 00:10:07,600
you string all those things together you

00:10:06,220 --> 00:10:08,709
know one two one two one and then you

00:10:07,600 --> 00:10:11,560
process the entire thing and there you

00:10:08,709 --> 00:10:13,180
go stage your process audio okay that's

00:10:11,560 --> 00:10:17,410
good but I might have jumped the gun a

00:10:13,180 --> 00:10:20,800
little bit here what does an audio api

00:10:17,410 --> 00:10:22,570
have to do with processing eg data like

00:10:20,800 --> 00:10:24,790
why why did I jump from you know

00:10:22,570 --> 00:10:26,830
packages and JavaScript to this well it

00:10:24,790 --> 00:10:28,600
all comes down to one of the effects

00:10:26,830 --> 00:10:30,630
nodes so the effects nodes can do really

00:10:28,600 --> 00:10:33,370
cool things on your data such as reverb

00:10:30,630 --> 00:10:35,920
compression padding it can also do

00:10:33,370 --> 00:10:37,209
filtering so we had that audio

00:10:35,920 --> 00:10:39,250
spectrograph where those filters were

00:10:37,209 --> 00:10:41,110
applied you know turns out filtering is

00:10:39,250 --> 00:10:43,180
a thing that musicians and music

00:10:41,110 --> 00:10:44,680
engineers actually do so it makes sense

00:10:43,180 --> 00:10:47,380
that they'd have really well implemented

00:10:44,680 --> 00:10:49,930
filters in this API so if we could

00:10:47,380 --> 00:10:52,060
somehow leverage these filters and use

00:10:49,930 --> 00:10:56,640
them for our energy filtering then we'd

00:10:52,060 --> 00:10:59,320
be set okay so in particular we want one

00:10:56,640 --> 00:11:01,660
one method that's really useful for us

00:10:59,320 --> 00:11:03,820
called the create IR filter method now

00:11:01,660 --> 00:11:06,269
quick electro engineering lesson I R

00:11:03,820 --> 00:11:08,139
stands for infinite impulse response

00:11:06,269 --> 00:11:10,329
it's all you need to know you know

00:11:08,139 --> 00:11:11,829
anything about it else about that but

00:11:10,329 --> 00:11:13,269
it's the filter you can generate with

00:11:11,829 --> 00:11:15,939
this crate I feel to know it crates an

00:11:13,269 --> 00:11:17,109
IR filter and that's super configurable

00:11:15,939 --> 00:11:19,269
so you can make it high pass low pass

00:11:17,109 --> 00:11:22,689
notch whatever you want in there so

00:11:19,269 --> 00:11:24,699
here's the plan first we need to make

00:11:22,689 --> 00:11:27,339
some way of reading or getting the web

00:11:24,699 --> 00:11:29,350
audio to read out EEG data once it's

00:11:27,339 --> 00:11:31,419
there we can process this data we can

00:11:29,350 --> 00:11:32,769
apply the filters and finally we output

00:11:31,419 --> 00:11:35,230
this back under brainwaves displayed on

00:11:32,769 --> 00:11:39,040
the screen cool that's all well and good

00:11:35,230 --> 00:11:42,220
but how exactly do you read eg with an

00:11:39,040 --> 00:11:44,319
audio API I'm glad that you asked you

00:11:42,220 --> 00:11:46,209
you asked that question because we're

00:11:44,319 --> 00:11:48,819
about to find out so here are the six

00:11:46,209 --> 00:11:50,679
steps that you need to decipher your own

00:11:48,819 --> 00:11:54,429
brain waves in the browser with the Web

00:11:50,679 --> 00:11:58,209
Audio API let's go alright entering vs

00:11:54,429 --> 00:12:00,309
code mode now so first we need to set up

00:11:58,209 --> 00:12:03,009
an audio context remember this is the

00:12:00,309 --> 00:12:04,720
canvas where everything happens next you

00:12:03,009 --> 00:12:06,069
need to you know create an audio context

00:12:04,720 --> 00:12:07,359
that's as simple as you know calling a

00:12:06,069 --> 00:12:08,619
constructor you pass in the number of

00:12:07,359 --> 00:12:10,179
channels the number of samples for each

00:12:08,619 --> 00:12:12,629
channel and your sample rate on there

00:12:10,179 --> 00:12:15,100
now this is an offline audio context and

00:12:12,629 --> 00:12:16,809
kind of this - audio context you can use

00:12:15,100 --> 00:12:18,519
the offline audio context in the Web

00:12:16,809 --> 00:12:21,160
Audio API or something called the audio

00:12:18,519 --> 00:12:22,660
context makes sense so the thing about

00:12:21,160 --> 00:12:23,889
the audio context is this is the one

00:12:22,660 --> 00:12:25,389
you'd usually want to use if you're

00:12:23,889 --> 00:12:26,739
processing audio if you're making like a

00:12:25,389 --> 00:12:29,769
multitrack mixer or you want to apply

00:12:26,739 --> 00:12:31,689
some reverb in the web that's great the

00:12:29,769 --> 00:12:34,230
problem with it though is that it plays

00:12:31,689 --> 00:12:36,730
back the audio more or less in real time

00:12:34,230 --> 00:12:38,860
so it's good if you actually you know

00:12:36,730 --> 00:12:41,049
want to apply your effects in real time

00:12:38,860 --> 00:12:43,089
on music but if you've got 7 days with

00:12:41,049 --> 00:12:44,679
an EDD artist look through you really

00:12:43,089 --> 00:12:46,959
don't want to be waiting you know 7 days

00:12:44,679 --> 00:12:48,789
for that to process so that's maybe not

00:12:46,959 --> 00:12:50,350
the way to go there's another type of

00:12:48,789 --> 00:12:52,660
offer of audio context you could use

00:12:50,350 --> 00:12:54,160
called the offline audio context so it's

00:12:52,660 --> 00:12:56,619
quite similar to the regular audio

00:12:54,160 --> 00:12:59,189
context except just taken directly from

00:12:56,619 --> 00:13:01,209
and again in contrast with a standard

00:12:59,189 --> 00:13:02,410
standard audio context and offer an

00:13:01,209 --> 00:13:04,149
audio context it doesn't render the

00:13:02,410 --> 00:13:05,829
audio to the device Hardware instead it

00:13:04,149 --> 00:13:08,019
generates it as fast as a cannon and

00:13:05,829 --> 00:13:09,660
outputs the result to an audio buffer

00:13:08,019 --> 00:13:13,779
now that sounds brilliant

00:13:09,660 --> 00:13:15,189
so basically audio context is slow often

00:13:13,779 --> 00:13:16,509
open to this super fast what we're

00:13:15,189 --> 00:13:17,250
trying to do so that's why we're going

00:13:16,509 --> 00:13:19,660
with it

00:13:17,250 --> 00:13:21,300
cool we've made this audio contacts next

00:13:19,660 --> 00:13:23,620
we have to set up our source notes

00:13:21,300 --> 00:13:25,330
pretty straightforward create a buffer

00:13:23,620 --> 00:13:26,830
source and note that these methods are

00:13:25,330 --> 00:13:29,110
all coming off the audio context so you

00:13:26,830 --> 00:13:31,210
can't actually create nodes in the web

00:13:29,110 --> 00:13:34,570
audio without actually being attached to

00:13:31,210 --> 00:13:37,300
this context next up we need to create

00:13:34,570 --> 00:13:38,830
and fill this audio buffer so first up

00:13:37,300 --> 00:13:40,000
we're going to create a buffer it's got

00:13:38,830 --> 00:13:42,640
the number of channel samples sample

00:13:40,000 --> 00:13:44,530
rate that we want go to loop over our

00:13:42,640 --> 00:13:46,690
channels and then for each channel I'm

00:13:44,530 --> 00:13:48,220
going to kind of get the channel buffer

00:13:46,690 --> 00:13:50,890
that I just created to remove this is

00:13:48,220 --> 00:13:52,170
like an empty empty audio buffer so get

00:13:50,890 --> 00:13:54,430
the channel buffer for that channel

00:13:52,170 --> 00:13:57,040
gonna iterate over all the samples and

00:13:54,430 --> 00:13:58,720
then right here I'm going to you know go

00:13:57,040 --> 00:14:01,360
to our channel buffer I'm going to fill

00:13:58,720 --> 00:14:03,970
that with pal EEG data which is in the

00:14:01,360 --> 00:14:06,550
very credibly named data array so our

00:14:03,970 --> 00:14:08,320
EEG data is just in an array of an array

00:14:06,550 --> 00:14:09,850
of floats in this data and something

00:14:08,320 --> 00:14:11,740
really exciting is happening here so

00:14:09,850 --> 00:14:14,770
right there on the left

00:14:11,740 --> 00:14:15,910
that's an audio buffer that's audio that

00:14:14,770 --> 00:14:19,330
stuff you can process through the Web

00:14:15,910 --> 00:14:21,730
Audio API on the right is your EEG data

00:14:19,330 --> 00:14:23,170
and in the middle is an equal sign so

00:14:21,730 --> 00:14:25,450
what you're doing is you're moving your

00:14:23,170 --> 00:14:28,150
EEG data into an audio buffer which

00:14:25,450 --> 00:14:29,260
means right now you can put filter and

00:14:28,150 --> 00:14:30,940
reverb and compression all this cool

00:14:29,260 --> 00:14:34,780
stuff that you really shouldn't do on eg

00:14:30,940 --> 00:14:37,720
but you can just like that that's really

00:14:34,780 --> 00:14:38,890
cool next you just assign you know two

00:14:37,720 --> 00:14:40,510
audio buffer to your source and there

00:14:38,890 --> 00:14:44,680
you go you've got your input you've fed

00:14:40,510 --> 00:14:45,970
your EG data into the Web Audio API okay

00:14:44,680 --> 00:14:50,680
next step we need to generate the

00:14:45,970 --> 00:14:51,400
filters well a bit of a bit of

00:14:50,680 --> 00:14:53,740
background on this

00:14:51,400 --> 00:14:55,900
so the create IR filter method remember

00:14:53,740 --> 00:14:57,760
that's kind of super configurable but

00:14:55,900 --> 00:14:59,440
it's super configurable in the way you

00:14:57,760 --> 00:15:01,300
have to provide certain what's called

00:14:59,440 --> 00:15:03,910
coefficients to define what the filter

00:15:01,300 --> 00:15:05,260
looks like now there many different

00:15:03,910 --> 00:15:06,820
filter types one can use and are all

00:15:05,260 --> 00:15:08,770
slightly different from our research we

00:15:06,820 --> 00:15:09,880
found out is that desktop software's

00:15:08,770 --> 00:15:11,590
usually use something called a

00:15:09,880 --> 00:15:13,120
Butterworth filter and that's you know

00:15:11,590 --> 00:15:16,540
pretty standard across a lot of filter

00:15:13,120 --> 00:15:17,860
types surprisingly you know JavaScript

00:15:16,540 --> 00:15:19,350
doesn't have its own generate

00:15:17,860 --> 00:15:20,950
Butterworth filter coefficient

00:15:19,350 --> 00:15:22,840
implementation so we kind of had to

00:15:20,950 --> 00:15:26,260
write our own which looks something like

00:15:22,840 --> 00:15:27,940
this and this and this and it just keeps

00:15:26,260 --> 00:15:28,870
going so many more pages there's one

00:15:27,940 --> 00:15:30,259
more page there's about two hundred

00:15:28,870 --> 00:15:32,419
lines of code there

00:15:30,259 --> 00:15:34,459
users like complex numbers and polls and

00:15:32,419 --> 00:15:35,720
transforms and actually ported it from

00:15:34,459 --> 00:15:38,119
MATLAB code one of our colleagues wrote

00:15:35,720 --> 00:15:40,040
into JavaScript so it's possible a bit

00:15:38,119 --> 00:15:41,479
messy a bit long but there you go so

00:15:40,040 --> 00:15:44,119
we've got our butterworth coefficients

00:15:41,479 --> 00:15:46,279
once we have that we can generate to the

00:15:44,119 --> 00:15:48,049
IR filter by passing these coefficients

00:15:46,279 --> 00:15:50,929
in so there you go that's you know six

00:15:48,049 --> 00:15:53,479
lines we have our filter nodes next up

00:15:50,929 --> 00:15:55,549
we need to connect the source of the

00:15:53,479 --> 00:15:57,169
destination so what's happening here is

00:15:55,549 --> 00:15:58,789
we're connecting the source to the low

00:15:57,169 --> 00:16:00,949
pass the low pass the high pass high

00:15:58,789 --> 00:16:03,589
pass to the notch not to the destination

00:16:00,949 --> 00:16:05,119
all the way through simple proof finally

00:16:03,589 --> 00:16:06,889
we need to process an app with this

00:16:05,119 --> 00:16:08,479
audio so we just set up this big audio

00:16:06,889 --> 00:16:11,809
graph as it's called now we need to

00:16:08,479 --> 00:16:14,239
render this audio graph so step one is

00:16:11,809 --> 00:16:15,229
setting what our start point is you know

00:16:14,239 --> 00:16:16,279
makes sense that you want to start

00:16:15,229 --> 00:16:18,529
processing from the start which is

00:16:16,279 --> 00:16:20,239
what's happening here then we need to

00:16:18,529 --> 00:16:21,499
call this start rendering method so this

00:16:20,239 --> 00:16:23,869
is on the offline audio context you can

00:16:21,499 --> 00:16:25,939
do this and it's super cool because it

00:16:23,869 --> 00:16:29,089
returns a promise which resolves to your

00:16:25,939 --> 00:16:30,529
process to buffer what I'm gonna do now

00:16:29,089 --> 00:16:32,569
is you know just initialize where the

00:16:30,529 --> 00:16:33,739
output data is going to go and then kind

00:16:32,569 --> 00:16:35,239
of do the reverse of what we did to feed

00:16:33,739 --> 00:16:37,519
it in gonna loop over all these channels

00:16:35,239 --> 00:16:38,539
get the channel buffer and get the here

00:16:37,519 --> 00:16:39,919
the channel buffer for those but now

00:16:38,539 --> 00:16:42,619
this is full of data instead of empties

00:16:39,919 --> 00:16:44,600
before and for some reason here this

00:16:42,619 --> 00:16:46,459
channel buffer is returns a typed array

00:16:44,600 --> 00:16:48,289
rather than a regular ol array now the

00:16:46,459 --> 00:16:49,939
way to convert from a typed array to a

00:16:48,289 --> 00:16:51,619
regular array is build a stack overflow

00:16:49,939 --> 00:16:52,850
and type how do I to convert from a

00:16:51,619 --> 00:16:54,799
typed array to a regular array and copy

00:16:52,850 --> 00:16:57,679
paste of the code they tell you right

00:16:54,799 --> 00:17:00,649
there so that's that's the simplest way

00:16:57,679 --> 00:17:03,139
I found it works cool now we'll return

00:17:00,649 --> 00:17:05,389
our process can loop data and there you

00:17:03,139 --> 00:17:06,559
go six steps we put our dial we've fed

00:17:05,389 --> 00:17:11,959
it through a filter that we process it

00:17:06,559 --> 00:17:14,059
this is filtered EEG data right there so

00:17:11,959 --> 00:17:17,120
after our six steps we're able to turn

00:17:14,059 --> 00:17:18,679
that to that and we've got so much

00:17:17,120 --> 00:17:19,639
mileage out of these these images is

00:17:18,679 --> 00:17:22,339
like the third time we've used at this

00:17:19,639 --> 00:17:23,750
talk so look you know now is what we the

00:17:22,339 --> 00:17:25,129
time where I would you know bring out a

00:17:23,750 --> 00:17:26,389
demo and show you how it all works and

00:17:25,129 --> 00:17:28,459
then get on a plane back to Australia

00:17:26,389 --> 00:17:31,100
but you know life life isn't that simple

00:17:28,459 --> 00:17:32,809
we there was a few kind of problems with

00:17:31,100 --> 00:17:38,049
this and one of the biggest problems is

00:17:32,809 --> 00:17:41,629
it was very slow like very very slow so

00:17:38,049 --> 00:17:44,270
some further now our scientists they

00:17:41,629 --> 00:17:46,640
want to review like four pages of data

00:17:44,270 --> 00:17:50,390
second so that's 250 milliseconds per

00:17:46,640 --> 00:17:52,730
page okay well to apply these filters it

00:17:50,390 --> 00:17:54,830
takes 300 milliseconds so already we're

00:17:52,730 --> 00:17:56,210
over budget and then you need to factor

00:17:54,830 --> 00:17:56,690
in you know fetching and downloading

00:17:56,210 --> 00:17:57,590
this data

00:17:56,690 --> 00:17:59,390
you're doing the filtering and then

00:17:57,590 --> 00:18:01,610
rendering that all then clearly you know

00:17:59,390 --> 00:18:02,330
you're nowhere near what we need to get

00:18:01,610 --> 00:18:04,280
that goal

00:18:02,330 --> 00:18:07,010
so this is what I call you know just

00:18:04,280 --> 00:18:09,230
some minor roadblocks so what's the

00:18:07,010 --> 00:18:11,450
problem the problem is this crate IR

00:18:09,230 --> 00:18:12,800
filter method you know it takes around a

00:18:11,450 --> 00:18:14,960
hundred milliseconds to generate a

00:18:12,800 --> 00:18:16,070
filter which is look reasonable because

00:18:14,960 --> 00:18:17,570
you have to provide these coefficients

00:18:16,070 --> 00:18:20,240
generate a new filter super configurable

00:18:17,570 --> 00:18:21,440
from scratch that's okay but you're

00:18:20,240 --> 00:18:23,690
doing that you know not just once but

00:18:21,440 --> 00:18:26,090
one two three times that's four three

00:18:23,690 --> 00:18:28,460
times which is you know three one

00:18:26,090 --> 00:18:30,380
hundred three hundred milliseconds the

00:18:28,460 --> 00:18:33,680
pain doesn't end there because now you

00:18:30,380 --> 00:18:35,720
have lots and lots of things because

00:18:33,680 --> 00:18:37,670
every page of data that you're looking

00:18:35,720 --> 00:18:39,680
at has to generate its own filters so

00:18:37,670 --> 00:18:41,480
one page 300 millisecond another page

00:18:39,680 --> 00:18:43,280
300 milliseconds so it just goes on and

00:18:41,480 --> 00:18:46,070
on and on so clearly this is not gonna

00:18:43,280 --> 00:18:48,710
work so where can we go from here well

00:18:46,070 --> 00:18:49,640
look we could use web workers maybe I'm

00:18:48,710 --> 00:18:51,800
just putting that there haven't actually

00:18:49,640 --> 00:18:53,780
tried it but you know even if we could

00:18:51,800 --> 00:18:55,160
get web workers to use web audio it

00:18:53,780 --> 00:18:56,690
still has the problem of the brows are

00:18:55,160 --> 00:18:57,710
still taking that 300 millisecond so it

00:18:56,690 --> 00:18:59,960
might be off the main thread but it's

00:18:57,710 --> 00:19:01,700
still that waiting time there use

00:18:59,960 --> 00:19:03,230
webassembly maybe you know rust didn't

00:19:01,700 --> 00:19:04,940
see those languages are far better

00:19:03,230 --> 00:19:06,590
suited to writing your own filter

00:19:04,940 --> 00:19:09,500
implementation than javascript which is

00:19:06,590 --> 00:19:11,360
what we talked about before but you know

00:19:09,500 --> 00:19:12,650
we're so close we're so close for almost

00:19:11,360 --> 00:19:14,210
got there we've got our data filter I

00:19:12,650 --> 00:19:15,980
don't want to jump ship and go to you

00:19:14,210 --> 00:19:18,020
know rust or C just just right now so

00:19:15,980 --> 00:19:20,240
maybe could you feel from the backend

00:19:18,020 --> 00:19:21,290
you know similar to web assembly perhaps

00:19:20,240 --> 00:19:23,020
there's server-side languages that are

00:19:21,290 --> 00:19:25,580
better at writing filtering permutations

00:19:23,020 --> 00:19:27,110
but there's a bit of latency in having

00:19:25,580 --> 00:19:28,460
to you know change the filter fetch some

00:19:27,110 --> 00:19:29,870
data change the filter again fetch some

00:19:28,460 --> 00:19:32,510
more data it's just a lot of data flow

00:19:29,870 --> 00:19:34,730
through maybe is this something else we

00:19:32,510 --> 00:19:36,110
can do all right well when you're in the

00:19:34,730 --> 00:19:38,630
end and so I'll tell you about a Taylor

00:19:36,110 --> 00:19:41,350
to filters now so what is that problem a

00:19:38,630 --> 00:19:44,210
problem is this the great IR filter

00:19:41,350 --> 00:19:45,980
filter method it's good it's super

00:19:44,210 --> 00:19:47,180
configurable it you know represent the

00:19:45,980 --> 00:19:48,440
second order filter configurable with

00:19:47,180 --> 00:19:50,750
several different common filter types

00:19:48,440 --> 00:19:51,230
but it's a bit slow to make so what's

00:19:50,750 --> 00:19:54,140
the solution

00:19:51,230 --> 00:19:56,700
well the solution is

00:19:54,140 --> 00:19:59,040
there's an old proverb to hide a tree

00:19:56,700 --> 00:20:00,720
use a forest so you know how about you

00:19:59,040 --> 00:20:03,210
know the je s come for the past 2019

00:20:00,720 --> 00:20:05,310
take on it to solve a filter problem use

00:20:03,210 --> 00:20:07,080
a filter alright just two notes about

00:20:05,310 --> 00:20:09,450
this I don't know if my my proverb

00:20:07,080 --> 00:20:12,000
actually makes any sense maybe not and

00:20:09,450 --> 00:20:13,140
secondly I thought that top when I was

00:20:12,000 --> 00:20:14,460
writing this I thought the top row was

00:20:13,140 --> 00:20:17,250
actually a super you know real ancient

00:20:14,460 --> 00:20:20,460
wise proverb but it turns out it's just

00:20:17,250 --> 00:20:21,720
from ninja boy in Pokemon emerald so

00:20:20,460 --> 00:20:24,540
it's just something it's stuck with me

00:20:21,720 --> 00:20:28,380
for 14 years but you know there you go

00:20:24,540 --> 00:20:30,480
so anyway filters there's another filter

00:20:28,380 --> 00:20:32,460
that we can actually use in Web Audio

00:20:30,480 --> 00:20:34,890
and it's called the by quad filter node

00:20:32,460 --> 00:20:36,930
now if you look if it seems like that

00:20:34,890 --> 00:20:38,250
description looks pretty similar to the

00:20:36,930 --> 00:20:41,150
one we just saw before you know you'd be

00:20:38,250 --> 00:20:43,590
right those are the different the two

00:20:41,150 --> 00:20:45,050
descriptions written the mdn Doc's give

00:20:43,590 --> 00:20:47,340
you a second to spot the difference

00:20:45,050 --> 00:20:51,300
there's not really much there so let's

00:20:47,340 --> 00:20:52,470
do our own kind of comparison so are

00:20:51,300 --> 00:20:55,440
they both do they both generate

00:20:52,470 --> 00:20:56,550
second-order filters yep that's good

00:20:55,440 --> 00:20:58,830
that's important because desktop

00:20:56,550 --> 00:21:00,240
software's use second-order filters can

00:20:58,830 --> 00:21:02,760
you create your own custom filter with

00:21:00,240 --> 00:21:04,020
it well yes for the IR filter know for

00:21:02,760 --> 00:21:06,110
the bicoid filter you kind of use what's

00:21:04,020 --> 00:21:09,090
given to you okay that's that's alright

00:21:06,110 --> 00:21:10,530
is it a Butterworth filter so remember

00:21:09,090 --> 00:21:12,600
we generate our own Butterworth filter

00:21:10,530 --> 00:21:14,370
with the create our filter method but

00:21:12,600 --> 00:21:17,040
for the life of me I couldn't find out

00:21:14,370 --> 00:21:19,260
what exact filter algorithm was used to

00:21:17,040 --> 00:21:20,730
create the bicoid filter and that's

00:21:19,260 --> 00:21:21,870
important because if something is

00:21:20,730 --> 00:21:23,160
filtered slightly different it's gonna

00:21:21,870 --> 00:21:24,510
look slightly different and it's looking

00:21:23,160 --> 00:21:25,590
slightly different you might not see it

00:21:24,510 --> 00:21:28,470
when you're flicking through four pages

00:21:25,590 --> 00:21:30,240
a second finally kind of the big the big

00:21:28,470 --> 00:21:33,600
one is the time taken to generate these

00:21:30,240 --> 00:21:34,890
filters so clearly the bicoid filter is

00:21:33,600 --> 00:21:36,270
a big winner here taking ten

00:21:34,890 --> 00:21:38,940
milliseconds versus the hundred

00:21:36,270 --> 00:21:41,640
milliseconds for the great IR filter

00:21:38,940 --> 00:21:44,370
note so the question still remains is

00:21:41,640 --> 00:21:46,770
does this filter filter the way we

00:21:44,370 --> 00:21:49,910
wanted to do after a bit of research we

00:21:46,770 --> 00:21:52,890
can say with with success yes

00:21:49,910 --> 00:21:54,870
so the filtered data coming out of a

00:21:52,890 --> 00:21:56,700
bipod filter is basically more or less

00:21:54,870 --> 00:21:58,710
the same as the data coming through our

00:21:56,700 --> 00:21:59,870
desktop software so my quad filter node

00:21:58,710 --> 00:22:02,700
we just works

00:21:59,870 --> 00:22:04,560
another big upside on this is that

00:22:02,700 --> 00:22:07,440
remember before we had our Butterworth

00:22:04,560 --> 00:22:10,080
filter code 200 lines of matlab ported

00:22:07,440 --> 00:22:11,220
we transforms in complex numbers well

00:22:10,080 --> 00:22:14,160
there's the coach a writer Butterworth

00:22:11,220 --> 00:22:14,610
filter a bipod filter yeah that's nine

00:22:14,160 --> 00:22:16,350
lines

00:22:14,610 --> 00:22:18,150
let's change if you you know can

00:22:16,350 --> 00:22:24,929
compress things a little bit so I call

00:22:18,150 --> 00:22:27,500
this an absolute win so success things

00:22:24,929 --> 00:22:30,299
are working so let me give you a demo of

00:22:27,500 --> 00:22:33,570
these filters actually being applied so

00:22:30,299 --> 00:22:35,910
that's not the way all right so right

00:22:33,570 --> 00:22:37,530
now we have some of our EEG data and

00:22:35,910 --> 00:22:39,419
this is you know usually what the

00:22:37,530 --> 00:22:40,380
clinicians would do and would look at so

00:22:39,419 --> 00:22:42,929
right now none of the filters are

00:22:40,380 --> 00:22:45,150
applied and usually they'd be here

00:22:42,929 --> 00:22:47,010
looking through this data and looks

00:22:45,150 --> 00:22:48,390
alright you know without a filter but

00:22:47,010 --> 00:22:49,980
sometimes you get really noisy parts

00:22:48,390 --> 00:22:51,210
like this this might be where you're you

00:22:49,980 --> 00:22:52,919
know muscle artifacts coming in or

00:22:51,210 --> 00:22:53,909
signal noise so if you're trying to

00:22:52,919 --> 00:22:55,320
review something in here there could be

00:22:53,909 --> 00:22:57,480
all these spike waves underneath this

00:22:55,320 --> 00:22:59,460
noise and you'd never see it so what you

00:22:57,480 --> 00:23:06,630
can do though is you can just turn on

00:22:59,460 --> 00:23:08,250
your filters yeah and right there that's

00:23:06,630 --> 00:23:10,679
so much easy to see this is so much

00:23:08,250 --> 00:23:12,169
closer to what the real EEG data looks

00:23:10,679 --> 00:23:14,220
like you know you can also specify

00:23:12,169 --> 00:23:16,140
exactly what filter you want you want to

00:23:14,220 --> 00:23:19,890
make a you know I forty Hertz low-pass

00:23:16,140 --> 00:23:24,409
you want to put a high-pass at say no

00:23:19,890 --> 00:23:24,409
three cool you can do that on the fly

00:23:24,770 --> 00:23:30,090
now right here I've got another bit of

00:23:27,840 --> 00:23:32,630
EEG so this is without filters applied

00:23:30,090 --> 00:23:35,059
let me just turn these filters on and

00:23:32,630 --> 00:23:39,659
what you see underneath all of this

00:23:35,059 --> 00:23:40,770
right here there's a spike and way so if

00:23:39,659 --> 00:23:42,450
you're looking at this and it's a bit

00:23:40,770 --> 00:23:44,490
noisy and you're flicking through page

00:23:42,450 --> 00:23:45,840
after page you might not see this appear

00:23:44,490 --> 00:23:47,130
right here but if you have these filters

00:23:45,840 --> 00:23:49,169
applied you'll be able to see the

00:23:47,130 --> 00:23:52,049
underlying epileptic signal there and be

00:23:49,169 --> 00:23:55,010
able to give the correct diagnosis so

00:23:52,049 --> 00:23:55,010
filters in the web

00:23:57,149 --> 00:24:00,570
all right so we've come a long way

00:23:59,279 --> 00:24:02,999
together we've learned a bit about

00:24:00,570 --> 00:24:04,979
epilepsy about EEG about brainwaves and

00:24:02,999 --> 00:24:06,839
how we can use the Web Audio API to the

00:24:04,979 --> 00:24:08,489
help decipher these brain waves now

00:24:06,839 --> 00:24:10,169
before I fly back home to the land of a

00:24:08,489 --> 00:24:12,649
great beyond let me leave you with some

00:24:10,169 --> 00:24:14,879
closing remarks so why does this matter

00:24:12,649 --> 00:24:17,159
you know why am i giving a talk about

00:24:14,879 --> 00:24:18,839
Web Audio and brain waves well look

00:24:17,159 --> 00:24:19,859
there's many kind of other better talks

00:24:18,839 --> 00:24:21,389
that could have been given about Web

00:24:19,859 --> 00:24:22,649
Audio could have taught you how to make

00:24:21,389 --> 00:24:23,099
your own motor track mixer and how do

00:24:22,649 --> 00:24:24,989
you know

00:24:23,099 --> 00:24:27,869
apply reverb and do these cool things

00:24:24,989 --> 00:24:30,570
instead I gave you this one well the

00:24:27,869 --> 00:24:31,679
reason is at my company seer you know we

00:24:30,570 --> 00:24:32,999
help we try to help people you know

00:24:31,679 --> 00:24:34,589
we've helped over a thousand patients

00:24:32,999 --> 00:24:36,599
over our last two years of operation

00:24:34,589 --> 00:24:38,909
we're seeing over 40 patients a week

00:24:36,599 --> 00:24:40,529
coming through our services and so at

00:24:38,909 --> 00:24:42,830
the end of the day what they want what

00:24:40,529 --> 00:24:45,839
these patients want is a diagnosis and

00:24:42,830 --> 00:24:47,159
as we saw if you don't see the right

00:24:45,839 --> 00:24:48,479
data you're not going to get the right

00:24:47,159 --> 00:24:49,589
diagnosis you don't get the right

00:24:48,479 --> 00:24:51,719
diagnosis you can't get the right

00:24:49,589 --> 00:24:53,669
treatment and you know in some small way

00:24:51,719 --> 00:24:56,940
the Web Audio API is actually helping

00:24:53,669 --> 00:24:59,099
with this so kind of technology you can

00:24:56,940 --> 00:25:00,269
make a difference here you know it's at

00:24:59,099 --> 00:25:01,679
the heart of what we're doing and it's a

00:25:00,269 --> 00:25:04,469
heart of what we and I mean all of us

00:25:01,679 --> 00:25:06,179
are kind of doing so I'm not sure that

00:25:04,469 --> 00:25:07,859
the riders of the Web Audio API spit

00:25:06,179 --> 00:25:10,049
kind of envisioned you know filters

00:25:07,859 --> 00:25:12,690
being used for epilepsy diagnoses but it

00:25:10,049 --> 00:25:14,549
is and it's getting done right here so

00:25:12,690 --> 00:25:16,679
take nobody can make a difference but

00:25:14,549 --> 00:25:18,509
it's only when you apply technology in

00:25:16,679 --> 00:25:19,769
the right way that really can so at the

00:25:18,509 --> 00:25:21,450
end of the day it's you know we're the

00:25:19,769 --> 00:25:22,710
ones that making the difference we get

00:25:21,450 --> 00:25:24,330
to choose how this technology is used

00:25:22,710 --> 00:25:26,519
you know we get to choose where I spend

00:25:24,330 --> 00:25:27,809
our time and look look we're not we're

00:25:26,519 --> 00:25:29,070
not all you know volunteering in foreign

00:25:27,809 --> 00:25:31,379
countries are working off for profits

00:25:29,070 --> 00:25:32,969
you know but we can still use the web

00:25:31,379 --> 00:25:35,549
technologies to make a difference in the

00:25:32,969 --> 00:25:37,019
lives of others all right on a bit of a

00:25:35,549 --> 00:25:41,159
lot of note I'd like to leave you with

00:25:37,019 --> 00:25:43,529
one more final demo so perhaps there's a

00:25:41,159 --> 00:25:45,749
question on everyone's mind previously

00:25:43,529 --> 00:25:49,229
we did this we converted brain waves to

00:25:45,749 --> 00:25:53,820
audio back to brain waves but what if we

00:25:49,229 --> 00:25:56,549
did this brain waves to audio let's

00:25:53,820 --> 00:25:59,309
leave it there all right well for the

00:25:56,549 --> 00:26:01,259
first time on on any or at least this

00:25:59,309 --> 00:26:02,940
particular J's comp stage I'd like to

00:26:01,259 --> 00:26:07,460
present to you the the symphony of the

00:26:02,940 --> 00:26:07,460
mind let's see how we go

00:26:08,210 --> 00:26:16,260
you know one house there it is alright

00:26:14,580 --> 00:26:19,370
I've got a super cool enable cool demo

00:26:16,260 --> 00:26:22,790
button here cool demo is enabled

00:26:19,370 --> 00:26:22,790
alright let's begin

00:26:33,190 --> 00:26:37,449
put on the noise

00:26:34,380 --> 00:26:37,449
[Music]

00:26:45,750 --> 00:26:54,850
like an airplane noise now it's very

00:26:47,860 --> 00:26:57,299
peaceful slow just got it down to

00:26:54,850 --> 00:26:57,299
nothing

00:27:09,010 --> 00:27:12,610
all right there you go

00:27:13,780 --> 00:27:23,470

YouTube URL: https://www.youtube.com/watch?v=k46qeHzKbuY


