Title: Taming `Git`osaurus Using Mystical Trees by Damini Satya Kammakomati | JSConf Budapest 2019
Publication date: 2019-10-22
Playlist: JSConf Budapest 2019
Description: 
	https://2019.jsconfbp.com/speakers/damini_satya

Raise your hands if you all start to panic when you mess up your local git workflow, trying frantically to save your work and eventually giving in to the complications thereby deleting your repository. Well, Git isn’t the terrible dinosaur you think it is, on the contrary, the messier it becomes, the more interesting it gets. This session aims to make friends with Git and to express the hidden gems in the mysterious git land which will definitely help you to become more productive and look cool in front of your peers struggling with a git-gone-wild.

Damini Satya is a software engineer at Salesforce building compelling user interfaces and experiences to the world’s leading CRM solutions. Previously, she was a speaker at Grace Hopper Celebration 2018 with a talk titled “Elsa, A conversational agent aimed at improving women’s mental health”, which garnered huge applause from the attendees both at the conference and on social media. She also spoke at GHC 2017 and GHC India 2016 on a wide variety of technical topics. Apart from her presence at GHC, she also presented tech talks at conferences like ReactConf & FOSSASIA. A passionate developer and with a desire to mentor students, she transitioned from her role as a student in Google summer of Code (GSoC) 2016 with the FOSSASIA organization working on a peer to peer scraper system, Loklak, and became a mentor for the organization during GSoC 2017. She is an active open source contributor and a part of various open source communities while continually aiming to bringing more women into contributing to open source software.
Captions: 
	00:00:03,890 --> 00:00:10,590
thank you for the grin welcome this is

00:00:08,309 --> 00:00:12,300
not my first dog but still it feels like

00:00:10,590 --> 00:00:16,289
I'm giving for the first time this

00:00:12,300 --> 00:00:19,710
awkward feeling is undescribable but

00:00:16,289 --> 00:00:22,590
let's get started so let's team get

00:00:19,710 --> 00:00:24,390
ulcers I just wanted to give it the get

00:00:22,590 --> 00:00:27,599
workflow we deal with every day as

00:00:24,390 --> 00:00:31,380
ketosis because it's yeah it's just

00:00:27,599 --> 00:00:34,260
crazy so why I talk on Kate I'm pretty

00:00:31,380 --> 00:00:36,329
sure like many of you want to know why

00:00:34,260 --> 00:00:38,940
because we have a lot of resources

00:00:36,329 --> 00:00:41,670
online and we have a lot of thoughts but

00:00:38,940 --> 00:00:44,309
I have certain incidents which I wanted

00:00:41,670 --> 00:00:46,710
to share I have seen a lot of developers

00:00:44,309 --> 00:00:48,899
and some of the students have mentored

00:00:46,710 --> 00:00:51,210
in the past they have a set of three to

00:00:48,899 --> 00:00:53,460
four get commands written on a text file

00:00:51,210 --> 00:00:55,500
and that they just use them so that they

00:00:53,460 --> 00:00:58,590
can create a protic West something which

00:00:55,500 --> 00:01:00,329
goes bi beyond those commands that's it

00:00:58,590 --> 00:01:02,219
they try to delete there and I'll clone

00:01:00,329 --> 00:01:04,619
for whatever it is and redo everything

00:01:02,219 --> 00:01:06,540
and we have to admit it we must have

00:01:04,619 --> 00:01:09,990
started off like that and not only that

00:01:06,540 --> 00:01:11,610
um one of my friends said that I just

00:01:09,990 --> 00:01:13,560
are like can you explain me what get is

00:01:11,610 --> 00:01:16,799
the first time I was trying to learn

00:01:13,560 --> 00:01:19,740
about git git is a magical tool and

00:01:16,799 --> 00:01:22,740
there's something magic happening yes

00:01:19,740 --> 00:01:24,060
it's a magical tool but it's what's

00:01:22,740 --> 00:01:26,430
happening behind the scenes is not

00:01:24,060 --> 00:01:29,220
really magic we can understand what's

00:01:26,430 --> 00:01:34,350
happening there so with that let's get

00:01:29,220 --> 00:01:35,790
started okay so a small introduction

00:01:34,350 --> 00:01:38,670
about myself I am a software engineer

00:01:35,790 --> 00:01:43,049
Salesforce a disclaimer I'm not a friend

00:01:38,670 --> 00:01:44,790
and developer written at the end and I'm

00:01:43,049 --> 00:01:48,090
a released lead for documentation and

00:01:44,790 --> 00:01:51,479
communities if you have any complaints

00:01:48,090 --> 00:01:54,540
about Docs related to humanities come to

00:01:51,479 --> 00:01:57,149
me and I'm an ardent open source

00:01:54,540 --> 00:01:59,369
contributor if you want to know how to

00:01:57,149 --> 00:02:01,259
get started with any open source project

00:01:59,369 --> 00:02:03,630
and there and that's my twitter handle

00:02:01,259 --> 00:02:08,280
if you want to just say hello my teams

00:02:03,630 --> 00:02:09,989
are open that's about me so some quick

00:02:08,280 --> 00:02:11,879
things to understand about it so I don't

00:02:09,989 --> 00:02:13,350
want to give a definition but some

00:02:11,879 --> 00:02:16,800
things which I feel like we need

00:02:13,350 --> 00:02:19,830
to know about get so yes we know it's a

00:02:16,800 --> 00:02:22,440
version control system but first get

00:02:19,830 --> 00:02:25,500
what it does it simply tracks your

00:02:22,440 --> 00:02:27,600
content it's a simple content tracker it

00:02:25,500 --> 00:02:29,760
tracks all the files and folders you

00:02:27,600 --> 00:02:33,900
have in your repository that's it

00:02:29,760 --> 00:02:35,880
and just remember that and the second

00:02:33,900 --> 00:02:38,490
part is the dot git folder

00:02:35,880 --> 00:02:42,360
it's a magical folder because it's

00:02:38,490 --> 00:02:44,460
hidden but you can still find it so it

00:02:42,360 --> 00:02:47,400
is the heart and soul of your git

00:02:44,460 --> 00:02:50,310
repository so when you initialize a git

00:02:47,400 --> 00:02:52,470
repository either by cloning an existing

00:02:50,310 --> 00:02:55,440
one or initiating an empty repository

00:02:52,470 --> 00:02:58,530
the first thing it does is create this

00:02:55,440 --> 00:03:00,930
dot git folder and this is the folder

00:02:58,530 --> 00:03:02,490
that stores all the data history

00:03:00,930 --> 00:03:07,140
everything related to your repository

00:03:02,490 --> 00:03:09,120
and when you when I say that when you

00:03:07,140 --> 00:03:10,950
clone someone else's repository so what

00:03:09,120 --> 00:03:13,320
exactly is happening there is it just

00:03:10,950 --> 00:03:18,000
copies all the contents which are inside

00:03:13,320 --> 00:03:20,160
that git folder that's it and try to

00:03:18,000 --> 00:03:22,650
open the get folder which you have your

00:03:20,160 --> 00:03:24,840
any of the repository and just explore

00:03:22,650 --> 00:03:25,980
what's happening there going further

00:03:24,840 --> 00:03:31,050
we'll be talking about some of the

00:03:25,980 --> 00:03:33,210
important files we need to know and the

00:03:31,050 --> 00:03:36,510
third important point which I wanted to

00:03:33,210 --> 00:03:37,800
make sure is git is a tool which wants

00:03:36,510 --> 00:03:41,130
to make your distributed development

00:03:37,800 --> 00:03:43,230
workflow life simpler like every

00:03:41,130 --> 00:03:45,660
repository in your workflow is important

00:03:43,230 --> 00:03:47,730
and it have the capability to replace

00:03:45,660 --> 00:03:51,170
the other one at any given point of time

00:03:47,730 --> 00:03:54,960
so no repository is central over here

00:03:51,170 --> 00:03:58,830
with that I want to discuss some of the

00:03:54,960 --> 00:04:00,840
important terminology we we kind of come

00:03:58,830 --> 00:04:02,670
across these different terms whenever we

00:04:00,840 --> 00:04:06,180
get to see some get errors or whenever

00:04:02,670 --> 00:04:07,680
BDD read some good documentation often

00:04:06,180 --> 00:04:10,290
get confused with some of these so I

00:04:07,680 --> 00:04:14,760
just want to clarify or give a clear

00:04:10,290 --> 00:04:19,560
definition remote repository local

00:04:14,760 --> 00:04:21,600
repository index working tree stash so I

00:04:19,560 --> 00:04:26,400
will explain these files terms together

00:04:21,600 --> 00:04:27,150
so that this diagram it it all it

00:04:26,400 --> 00:04:30,419
actually define

00:04:27,150 --> 00:04:35,400
your get workflow so let's start with

00:04:30,419 --> 00:04:37,050
the first one remote repository people

00:04:35,400 --> 00:04:41,280
also say it's a upstream repository or

00:04:37,050 --> 00:04:43,289
an origin so in most of the cases your

00:04:41,280 --> 00:04:45,900
remote repository is to which all your

00:04:43,289 --> 00:04:48,620
team members push changes or FET changes

00:04:45,900 --> 00:04:51,180
from and such a remote repository

00:04:48,620 --> 00:04:53,389
actually exists on some cold hosting

00:04:51,180 --> 00:04:55,680
sites like github gate lab or whatever

00:04:53,389 --> 00:04:58,650
if you have an internal server forcing

00:04:55,680 --> 00:05:01,770
yes it exists and that is called as that

00:04:58,650 --> 00:05:03,720
is known as report remote repository now

00:05:01,770 --> 00:05:08,250
coming to the second term local

00:05:03,720 --> 00:05:10,410
repository git local repository is the

00:05:08,250 --> 00:05:13,289
one which we make all the local changes

00:05:10,410 --> 00:05:15,560
to it is in simple terms it's nothing

00:05:13,289 --> 00:05:20,490
but your dot git folder in your computer

00:05:15,560 --> 00:05:24,570
that's it and the third reporting term

00:05:20,490 --> 00:05:27,690
index kit index is used as a staging

00:05:24,570 --> 00:05:30,690
area we have we might have heard the

00:05:27,690 --> 00:05:33,030
term staged staged area right so that's

00:05:30,690 --> 00:05:36,210
nothing but the index area it actually

00:05:33,030 --> 00:05:38,880
sits between your working tree and the

00:05:36,210 --> 00:05:42,060
local repository so the significance of

00:05:38,880 --> 00:05:44,940
this particular area is whatever file

00:05:42,060 --> 00:05:47,909
you add into your staging area come

00:05:44,940 --> 00:05:49,710
whenever you commit the file or whenever

00:05:47,909 --> 00:05:51,120
you want to make a commit it will pick

00:05:49,710 --> 00:05:53,250
the files which are there in the index

00:05:51,120 --> 00:05:55,020
area it won't pick the files which are

00:05:53,250 --> 00:05:56,669
in your working tree or your local

00:05:55,020 --> 00:05:57,960
repository now it will just touch the

00:05:56,669 --> 00:06:03,930
files which are sitting in your index

00:05:57,960 --> 00:06:07,260
and it plays a very significant role for

00:06:03,930 --> 00:06:09,900
example when you run git status you

00:06:07,260 --> 00:06:14,070
usually see files in your staging area

00:06:09,900 --> 00:06:16,620
and green text that means you can only

00:06:14,070 --> 00:06:20,639
commit the file which is in green text

00:06:16,620 --> 00:06:22,949
and also get status is a very helpful

00:06:20,639 --> 00:06:24,750
command when you actually sit and read

00:06:22,949 --> 00:06:26,400
what's going on there it will give you

00:06:24,750 --> 00:06:27,900
all the details it will give you

00:06:26,400 --> 00:06:30,199
instructions on how you can stay your

00:06:27,900 --> 00:06:36,599
file and stage your file or check out

00:06:30,199 --> 00:06:38,729
it's a very helpful command and also

00:06:36,599 --> 00:06:41,430
when you expand the dot git folder and

00:06:38,729 --> 00:06:43,979
see look out for the index file

00:06:41,430 --> 00:06:46,530
it's it exists there whenever you add a

00:06:43,979 --> 00:06:49,199
new file it will be making some changes

00:06:46,530 --> 00:06:50,759
to that index file and if you want to

00:06:49,199 --> 00:06:54,389
open this particular file and see what's

00:06:50,759 --> 00:06:57,860
getting edited it's actually some weird

00:06:54,389 --> 00:07:00,210
code I will not be understanding but yes

00:06:57,860 --> 00:07:05,400
there'll be something in that particular

00:07:00,210 --> 00:07:08,310
file now coming to the food term working

00:07:05,400 --> 00:07:12,000
tree okay so this is also a very

00:07:08,310 --> 00:07:15,150
important term it consists of what your

00:07:12,000 --> 00:07:17,099
current your current working snapshot

00:07:15,150 --> 00:07:18,539
when I say that if you have two

00:07:17,099 --> 00:07:20,970
different branches if you have a feature

00:07:18,539 --> 00:07:22,889
branch and you're working on that your

00:07:20,970 --> 00:07:24,030
working tree will just contain the files

00:07:22,889 --> 00:07:25,949
which are there in that particular

00:07:24,030 --> 00:07:27,090
feature branch it won't contain the

00:07:25,949 --> 00:07:29,130
files which are in the master branch

00:07:27,090 --> 00:07:31,680
unless you switch so this context

00:07:29,130 --> 00:07:36,569
switching is taken by they can take

00:07:31,680 --> 00:07:40,500
taken care of the working tree area now

00:07:36,569 --> 00:07:45,509
coming to the fifth the most term if

00:07:40,500 --> 00:07:47,729
node area or terms - the only one the

00:07:45,509 --> 00:07:51,840
only duty of stash is to keep your

00:07:47,729 --> 00:07:53,400
working tree area a little clean so

00:07:51,840 --> 00:07:55,590
there are certain situations where you

00:07:53,400 --> 00:07:58,349
try to switch a branch or make some

00:07:55,590 --> 00:08:00,240
changes when you have certain

00:07:58,349 --> 00:08:02,940
uncommitted files in your working tree

00:08:00,240 --> 00:08:04,680
it won't let you do that and in that

00:08:02,940 --> 00:08:06,479
scenario you can actually save those

00:08:04,680 --> 00:08:08,400
files into your stash area and then

00:08:06,479 --> 00:08:10,949
reapply them whenever you want them in

00:08:08,400 --> 00:08:16,139
your working tree and it's actually a

00:08:10,949 --> 00:08:19,849
very helpful area it comes in handy ok

00:08:16,139 --> 00:08:23,310
now comes another important term head

00:08:19,849 --> 00:08:25,469
the question now is when you run git

00:08:23,310 --> 00:08:28,289
branch some branch name

00:08:25,469 --> 00:08:31,110
how does get know the SHA of the last

00:08:28,289 --> 00:08:34,860
commit a it's because of the contents in

00:08:31,110 --> 00:08:36,930
this file um head is a reference to the

00:08:34,860 --> 00:08:39,839
last commit in the currently checked out

00:08:36,930 --> 00:08:41,459
branch and other useful in forensics you

00:08:39,839 --> 00:08:43,800
can get from this particular head

00:08:41,459 --> 00:08:47,310
pointer is it determines your current

00:08:43,800 --> 00:08:49,500
working branch so normally when you

00:08:47,310 --> 00:08:51,630
check out to a proper branch name it

00:08:49,500 --> 00:08:54,120
automatically moves the head pointer

00:08:51,630 --> 00:08:55,020
along whenever you create a new comment

00:08:54,120 --> 00:08:57,420
in that

00:08:55,020 --> 00:08:58,890
so we will actually um see the

00:08:57,420 --> 00:09:03,570
significance of this pointer when we

00:08:58,890 --> 00:09:05,460
learn about branching and if you want to

00:09:03,570 --> 00:09:17,490
know more about this particular pointer

00:09:05,460 --> 00:09:20,280
you can simply run git log and so that's

00:09:17,490 --> 00:09:24,660
a commit hash and beside you always see

00:09:20,280 --> 00:09:27,270
some thumbs so what you can infer from

00:09:24,660 --> 00:09:29,220
this is that head is actually pointing

00:09:27,270 --> 00:09:32,040
to your master branch and your current

00:09:29,220 --> 00:09:34,050
branch is master and there are also

00:09:32,040 --> 00:09:35,460
other terms like origin master and

00:09:34,050 --> 00:09:38,190
origin head

00:09:35,460 --> 00:09:41,340
they are the pointers which are in your

00:09:38,190 --> 00:09:43,350
upstream repository and that's where you

00:09:41,340 --> 00:09:45,150
option repository is there so if I

00:09:43,350 --> 00:09:48,780
actually show you a visualization of

00:09:45,150 --> 00:09:50,730
this the box above is option depository

00:09:48,780 --> 00:09:53,580
if you assume that it's name is origin

00:09:50,730 --> 00:09:56,280
and those are the pointers in they're

00:09:53,580 --> 00:09:58,080
pointing to the commits III and the box

00:09:56,280 --> 00:10:00,510
below is what is there in your local

00:09:58,080 --> 00:10:02,760
repository so it always carries those

00:10:00,510 --> 00:10:05,010
remote pointers so that it will let you

00:10:02,760 --> 00:10:07,080
know whenever your local repository is

00:10:05,010 --> 00:10:08,970
not up to date with the option for

00:10:07,080 --> 00:10:14,070
Satori and that's so didn't knows that

00:10:08,970 --> 00:10:16,860
and also when you are expand and see

00:10:14,070 --> 00:10:18,390
what's there in the head head file it

00:10:16,860 --> 00:10:21,810
actually exists inside the dot git

00:10:18,390 --> 00:10:23,990
folder it actually tells gate what is

00:10:21,810 --> 00:10:27,420
the parent for your next commit and

00:10:23,990 --> 00:10:30,870
that's how it tracks the branching and

00:10:27,420 --> 00:10:33,090
all the magical stuff but don't worry

00:10:30,870 --> 00:10:36,390
I'll be clearly explaining with examples

00:10:33,090 --> 00:10:38,790
going further um and not only of

00:10:36,390 --> 00:10:41,270
guitarists so some of the important

00:10:38,790 --> 00:10:44,400
internals of gate which we need to know

00:10:41,270 --> 00:10:46,500
it's nothing but the contents which are

00:10:44,400 --> 00:10:49,320
inside the dot git folder we have

00:10:46,500 --> 00:10:51,570
already seen what head file is index

00:10:49,320 --> 00:10:52,860
file is there some other important

00:10:51,570 --> 00:10:58,800
folders and files which I want to

00:10:52,860 --> 00:11:03,750
discuss dot git slash config we how many

00:10:58,800 --> 00:11:07,230
of you are familiar with this ok ok ok

00:11:03,750 --> 00:11:08,520
lot of them so this is the first

00:11:07,230 --> 00:11:10,200
internal file we

00:11:08,520 --> 00:11:12,390
I would like to talk about because this

00:11:10,200 --> 00:11:14,700
is where all your git configurations

00:11:12,390 --> 00:11:16,770
related to your git goes in over here

00:11:14,700 --> 00:11:18,660
you can define what is your option

00:11:16,770 --> 00:11:21,240
repository is what your origin

00:11:18,660 --> 00:11:23,100
repository is do some branch

00:11:21,240 --> 00:11:24,660
configuration push configurations

00:11:23,100 --> 00:11:28,590
everything goes in there this is the

00:11:24,660 --> 00:11:30,120
central configuration file and and this

00:11:28,590 --> 00:11:34,590
is quite important it actually sits

00:11:30,120 --> 00:11:36,720
Center inside the target folder and now

00:11:34,590 --> 00:11:40,740
coming to the next important folder that

00:11:36,720 --> 00:11:43,770
is dot get slash rest so what exactly is

00:11:40,740 --> 00:11:47,040
a ref a ref is an indirect way of

00:11:43,770 --> 00:11:49,890
referring to a commit and you can think

00:11:47,040 --> 00:11:52,830
of it as a user friendly alias for

00:11:49,890 --> 00:11:54,900
commit hash we need not really remember

00:11:52,830 --> 00:11:59,610
thee it doesn't really have to remember

00:11:54,900 --> 00:12:02,130
the entire 40 character hash so it it

00:11:59,610 --> 00:12:05,730
simply keeps a track of the files under

00:12:02,130 --> 00:12:08,460
this folder and riffs are stored in a

00:12:05,730 --> 00:12:11,190
normal text files and the dot git slash

00:12:08,460 --> 00:12:14,490
refs directory for example if you open

00:12:11,190 --> 00:12:18,180
the head directory the head directory

00:12:14,490 --> 00:12:20,490
inside the refs you will have the list

00:12:18,180 --> 00:12:23,070
of files which are nothing but your

00:12:20,490 --> 00:12:24,840
local branches so suppose I have master

00:12:23,070 --> 00:12:27,090
branch in my local repository I will be

00:12:24,840 --> 00:12:29,940
seeing over there and if I actually open

00:12:27,090 --> 00:12:32,130
what's inside the master folder there'll

00:12:29,940 --> 00:12:34,590
be another file which contains the

00:12:32,130 --> 00:12:38,070
latest commits in my master branch and

00:12:34,590 --> 00:12:41,370
that's how it keeps track of branching

00:12:38,070 --> 00:12:46,170
even this particular folder plays a role

00:12:41,370 --> 00:12:49,530
in branching now comes to the dot git

00:12:46,170 --> 00:12:52,440
slash objects folder this this is the

00:12:49,530 --> 00:12:54,540
meat of the entire target or your gate

00:12:52,440 --> 00:12:57,240
apposite ori i say that because it

00:12:54,540 --> 00:12:59,510
contains all the files and folders which

00:12:57,240 --> 00:13:01,890
are present in your local repository and

00:12:59,510 --> 00:13:03,930
the files are actually stored by the

00:13:01,890 --> 00:13:08,270
char values over here

00:13:03,930 --> 00:13:10,860
you can see those weird characters so

00:13:08,270 --> 00:13:12,630
the way it arranges them is like in

00:13:10,860 --> 00:13:16,770
folder structures so you need not really

00:13:12,630 --> 00:13:18,720
worry about that and so I would like to

00:13:16,770 --> 00:13:22,120
discuss more about git objects because

00:13:18,720 --> 00:13:25,629
all your data actually goes into it so

00:13:22,120 --> 00:13:28,120
first thing it's the meat of your local

00:13:25,629 --> 00:13:30,939
repository so that means it contains the

00:13:28,120 --> 00:13:34,689
actual data of your get repository and

00:13:30,939 --> 00:13:37,569
the second thing is how does get tract

00:13:34,689 --> 00:13:40,120
or stole all your files and folders in

00:13:37,569 --> 00:13:41,740
the form of objects and in the form of

00:13:40,120 --> 00:13:45,160
those four different types of objects

00:13:41,740 --> 00:13:47,170
blob tree commit and tag so I will be

00:13:45,160 --> 00:13:51,490
talking about the first three object

00:13:47,170 --> 00:13:54,730
four three object types and yes they are

00:13:51,490 --> 00:13:56,129
stored by the char values as you have

00:13:54,730 --> 00:13:58,990
seen before

00:13:56,129 --> 00:14:00,819
okay let's take an example that we have

00:13:58,990 --> 00:14:02,949
this particular repository and folder

00:14:00,819 --> 00:14:06,100
structure in your local repository so we

00:14:02,949 --> 00:14:08,499
have a root folder we have two text

00:14:06,100 --> 00:14:11,439
files readme and make file and a slash

00:14:08,499 --> 00:14:14,399
SRC folder and a dot C folder file

00:14:11,439 --> 00:14:16,839
inside the SRC folder so let's see how

00:14:14,399 --> 00:14:21,269
it actually stores them in the form of

00:14:16,839 --> 00:14:24,639
objects so coming to the first basic

00:14:21,269 --> 00:14:28,089
object type git stores your file

00:14:24,639 --> 00:14:30,370
contents as blocks so it is important to

00:14:28,089 --> 00:14:33,519
know that it just tows the contents of

00:14:30,370 --> 00:14:35,889
your files but not the file name so the

00:14:33,519 --> 00:14:38,050
names and modes of the files are not

00:14:35,889 --> 00:14:42,129
stored within the block I am just trying

00:14:38,050 --> 00:14:45,370
to repeat it again and get will only

00:14:42,129 --> 00:14:47,800
store our blob only once so when I say

00:14:45,370 --> 00:14:50,620
that what it means is if you have two

00:14:47,800 --> 00:14:53,379
different file names but with same file

00:14:50,620 --> 00:14:55,179
content block kit will be storing that

00:14:53,379 --> 00:14:57,329
particular file as one single blob

00:14:55,179 --> 00:15:00,610
because the file contents are saying and

00:14:57,329 --> 00:15:03,309
what does what it also means is whenever

00:15:00,610 --> 00:15:05,529
you try to transfer some of the blobs

00:15:03,309 --> 00:15:09,480
from your repository to to the other

00:15:05,529 --> 00:15:11,860
repository if it's the same blob but

00:15:09,480 --> 00:15:13,629
coming from two different file names it

00:15:11,860 --> 00:15:15,850
will just transfer that single blob and

00:15:13,629 --> 00:15:23,370
then it will expand it into a different

00:15:15,850 --> 00:15:26,679
different files and for our example

00:15:23,370 --> 00:15:29,459
repository those files those files are

00:15:26,679 --> 00:15:34,269
being stored as blob with different

00:15:29,459 --> 00:15:35,800
shards now coming to the next type of

00:15:34,269 --> 00:15:38,589
gate object

00:15:35,800 --> 00:15:40,990
three it's all the problem of storing

00:15:38,589 --> 00:15:43,510
the filename and it also allows you to

00:15:40,990 --> 00:15:46,959
store the group of files together that

00:15:43,510 --> 00:15:48,880
is the directory or folder and a tree is

00:15:46,959 --> 00:15:52,660
nothing but a simple list of trees and

00:15:48,880 --> 00:15:55,420
blobs combined together along with the

00:15:52,660 --> 00:15:58,600
names and the file modes of those blobs

00:15:55,420 --> 00:16:01,269
entries and when you actually go and

00:15:58,600 --> 00:16:03,850
expand one of the tree object you get to

00:16:01,269 --> 00:16:07,029
see something like this if you um it

00:16:03,850 --> 00:16:10,920
actually contains entries of the blog

00:16:07,029 --> 00:16:12,040
under that particular tree the file mode

00:16:10,920 --> 00:16:17,440
charcoaled

00:16:12,040 --> 00:16:19,269
and the file name and just try to you

00:16:17,440 --> 00:16:22,089
know experiment with some of the tree

00:16:19,269 --> 00:16:24,940
objects you will definitely get a get I

00:16:22,089 --> 00:16:27,579
get an idea about it and for the same

00:16:24,940 --> 00:16:30,579
example if you see every folder is

00:16:27,579 --> 00:16:35,260
actually stored as a tree with whatever

00:16:30,579 --> 00:16:39,220
file it have within it okay now coming

00:16:35,260 --> 00:16:41,410
to the third object type commit um so we

00:16:39,220 --> 00:16:43,480
are storing the files and folders where

00:16:41,410 --> 00:16:46,180
exactly does the history part comes in

00:16:43,480 --> 00:16:48,640
this is where commit objects are coming

00:16:46,180 --> 00:16:50,709
handy so the commit object is very

00:16:48,640 --> 00:16:52,959
simple is much like a tree it simply

00:16:50,709 --> 00:16:56,170
points to a tree and keeps a track of

00:16:52,959 --> 00:16:59,140
the author the the commit message and

00:16:56,170 --> 00:17:02,490
some time stamp around it along with

00:16:59,140 --> 00:17:05,620
that any parent commit it's pointing to

00:17:02,490 --> 00:17:11,020
so if you if you actually open a commit

00:17:05,620 --> 00:17:14,740
object you will get to see the snapshot

00:17:11,020 --> 00:17:18,010
of that particular commit suppose it's a

00:17:14,740 --> 00:17:20,439
tree and the hash along with that and if

00:17:18,010 --> 00:17:23,949
there is any parent commit it's pointing

00:17:20,439 --> 00:17:26,290
to the hash of that particular previous

00:17:23,949 --> 00:17:29,350
commit along with the author committed

00:17:26,290 --> 00:17:31,600
information and the commit message so

00:17:29,350 --> 00:17:32,950
you will you will actually see all these

00:17:31,600 --> 00:17:37,300
things when you try to open up these

00:17:32,950 --> 00:17:41,500
objects and see alright done with the

00:17:37,300 --> 00:17:44,260
boring stuff we have understood how file

00:17:41,500 --> 00:17:46,690
stores are your data and some of the

00:17:44,260 --> 00:17:48,910
important terms let's discuss with

00:17:46,690 --> 00:17:49,780
discuss about some of the scenarios and

00:17:48,910 --> 00:17:52,450
concepts with

00:17:49,780 --> 00:17:56,110
with which we struggle every day first

00:17:52,450 --> 00:17:58,270
thing is branching um as developers we

00:17:56,110 --> 00:18:00,280
all know how important branching is um

00:17:58,270 --> 00:18:03,340
in order to maintain a cleaner workflow

00:18:00,280 --> 00:18:05,289
and if you're open-source maintainer for

00:18:03,340 --> 00:18:09,280
any big project you definitely know the

00:18:05,289 --> 00:18:10,960
pain of merging branches and sometimes

00:18:09,280 --> 00:18:13,210
you know it's very important to know how

00:18:10,960 --> 00:18:14,799
exactly get does this patching it will

00:18:13,210 --> 00:18:18,070
definitely make your life little easier

00:18:14,799 --> 00:18:21,850
so let's understand what how branching

00:18:18,070 --> 00:18:25,360
is done in gating okay let's say we have

00:18:21,850 --> 00:18:28,570
these three commits on your master

00:18:25,360 --> 00:18:32,440
branch where my head is pointing to the

00:18:28,570 --> 00:18:35,260
latest commit c3 let's examine the state

00:18:32,440 --> 00:18:38,370
of a branch so how can I do that I

00:18:35,260 --> 00:18:41,740
simply run git log so that I can see

00:18:38,370 --> 00:18:44,980
what is exactly happening in my work

00:18:41,740 --> 00:18:47,440
working tree so what I do I don't get

00:18:44,980 --> 00:18:49,570
log and I get to see the list of three

00:18:47,440 --> 00:18:52,500
commits and some important details

00:18:49,570 --> 00:18:55,600
beside the latest commit the top one

00:18:52,500 --> 00:18:58,000
this is the J's count for Budapest

00:18:55,600 --> 00:19:04,480
official website app I have cloned it

00:18:58,000 --> 00:19:06,250
and it's exposing some email ids and so

00:19:04,480 --> 00:19:09,010
what exactly you can infer from this it

00:19:06,250 --> 00:19:10,600
says that the head is pointing to the

00:19:09,010 --> 00:19:12,789
master branch and you can also see your

00:19:10,600 --> 00:19:17,559
upstream pointers along with the latest

00:19:12,789 --> 00:19:21,159
commit hash as we have already seen now

00:19:17,559 --> 00:19:25,559
what do I want to do next I want to

00:19:21,159 --> 00:19:28,240
create a new branch called reactor meter

00:19:25,559 --> 00:19:29,860
so that's the only branch name I got it

00:19:28,240 --> 00:19:32,280
to my mind when I was preparing the

00:19:29,860 --> 00:19:34,929
slides a sensible name so I just used it

00:19:32,280 --> 00:19:37,299
so we can do so by running the command

00:19:34,929 --> 00:19:41,530
as you can see git branch and the branch

00:19:37,299 --> 00:19:43,120
name now if you want to see the list of

00:19:41,530 --> 00:19:45,370
branches you have in your local

00:19:43,120 --> 00:19:47,669
repository and also some important

00:19:45,370 --> 00:19:50,650
details on what is your current branch

00:19:47,669 --> 00:19:52,870
you can run git branch and then it will

00:19:50,650 --> 00:19:58,990
clearly tell you that hey you're on

00:19:52,870 --> 00:20:03,910
master branch I'm making it in green ok

00:19:58,990 --> 00:20:07,220
now I have created a new branch

00:20:03,910 --> 00:20:09,950
what has happened held my head pointer

00:20:07,220 --> 00:20:12,350
is still pointing to the master but

00:20:09,950 --> 00:20:16,130
because I haven't switched to the newly

00:20:12,350 --> 00:20:19,040
created branch yet so let's so let's

00:20:16,130 --> 00:20:22,160
just see what get log talks about this

00:20:19,040 --> 00:20:24,680
workflow so when I run git git log it

00:20:22,160 --> 00:20:27,490
still shows that the latest commit is

00:20:24,680 --> 00:20:30,140
pointing to master we still have our

00:20:27,490 --> 00:20:32,600
origin or upstream repository pointers

00:20:30,140 --> 00:20:35,030
pointing to the latest commit and we

00:20:32,600 --> 00:20:37,400
have the reactor meter the newly created

00:20:35,030 --> 00:20:40,670
branch still pointing to the let us

00:20:37,400 --> 00:20:43,130
commit okay

00:20:40,670 --> 00:20:45,380
now let's switch to the newly created

00:20:43,130 --> 00:20:47,840
branch how can I do that I'll just run

00:20:45,380 --> 00:20:51,680
git checkout the branch name which I

00:20:47,840 --> 00:20:55,220
have already created and you can verify

00:20:51,680 --> 00:20:57,620
it by running it branch okay now I am

00:20:55,220 --> 00:21:01,460
going to react to meter branch so what

00:20:57,620 --> 00:21:03,950
has happened the head has moved to the

00:21:01,460 --> 00:21:04,340
newly created branch so it's pointing

00:21:03,950 --> 00:21:07,370
now

00:21:04,340 --> 00:21:10,040
to the reactive meter now your working

00:21:07,370 --> 00:21:11,690
tree will will be whatever you whatever

00:21:10,040 --> 00:21:14,990
changes you make from now on will be

00:21:11,690 --> 00:21:18,110
going into your reactor meter branch now

00:21:14,990 --> 00:21:20,240
if I run lick git git log for this

00:21:18,110 --> 00:21:24,470
particular workflow what what exactly it

00:21:20,240 --> 00:21:26,450
shows you can see the difference right

00:21:24,470 --> 00:21:27,980
so the head is actually pointing to the

00:21:26,450 --> 00:21:31,430
reactor meet up the newly create a

00:21:27,980 --> 00:21:34,400
branch and my master is still having

00:21:31,430 --> 00:21:37,840
this latest commit in its workflow and

00:21:34,400 --> 00:21:41,420
my upstream pointers are still on the

00:21:37,840 --> 00:21:43,370
latest commits the last commit okay

00:21:41,420 --> 00:21:45,860
awesome now we are able to create branch

00:21:43,370 --> 00:21:49,130
we have understood how git actually

00:21:45,860 --> 00:21:50,510
moves the pointers the significance of

00:21:49,130 --> 00:21:53,090
the head pointer when it comes to

00:21:50,510 --> 00:21:55,400
branching okay let's let's do something

00:21:53,090 --> 00:21:58,280
more to it let's add some more commits

00:21:55,400 --> 00:22:00,770
to the reactor meter branch so have

00:21:58,280 --> 00:22:02,990
added some commits and this is how my

00:22:00,770 --> 00:22:05,810
workflow would look look like now so I

00:22:02,990 --> 00:22:08,060
have added C 4 and C 5 commits to my

00:22:05,810 --> 00:22:09,740
reactor meter branch and my head is

00:22:08,060 --> 00:22:12,230
still pointing to reactive meter branch

00:22:09,740 --> 00:22:15,330
everything is awesome now I'll run git

00:22:12,230 --> 00:22:17,940
log what it actually tells

00:22:15,330 --> 00:22:19,650
it tells that my head have actually

00:22:17,940 --> 00:22:21,240
moved little forward it's actually

00:22:19,650 --> 00:22:23,010
diverged

00:22:21,240 --> 00:22:25,290
it's pointing to the reactive meter

00:22:23,010 --> 00:22:27,990
branch the LA the top commit is nothing

00:22:25,290 --> 00:22:31,020
but the c5 which have which have shown

00:22:27,990 --> 00:22:32,940
you in the previous diagram and if you

00:22:31,020 --> 00:22:36,270
go to commits below you will see the

00:22:32,940 --> 00:22:40,130
master branch it's it's somewhere behind

00:22:36,270 --> 00:22:45,150
right so now you can we can read git log

00:22:40,130 --> 00:22:48,960
clearly alright um now let's switch back

00:22:45,150 --> 00:22:51,660
to master branch and see what else we

00:22:48,960 --> 00:22:54,480
can do so have switched back ironically

00:22:51,660 --> 00:22:56,490
check out master and I'm back on master

00:22:54,480 --> 00:23:00,210
branch I have verified it by running git

00:22:56,490 --> 00:23:03,240
branch command so what exactly that

00:23:00,210 --> 00:23:05,490
commanded the check out master it

00:23:03,240 --> 00:23:08,760
actually did two things in move the head

00:23:05,490 --> 00:23:11,250
pointer back to the master master branch

00:23:08,760 --> 00:23:14,100
and it reverted the files in your local

00:23:11,250 --> 00:23:16,890
or in your working directory back to the

00:23:14,100 --> 00:23:18,810
snapshot the master is pointing to so

00:23:16,890 --> 00:23:21,090
this also means that the changes you

00:23:18,810 --> 00:23:24,110
make from this point forward will get

00:23:21,090 --> 00:23:27,690
diverged from your reactor meter branch

00:23:24,110 --> 00:23:30,540
okay let's let's see what git log tells

00:23:27,690 --> 00:23:34,680
now so I run git log in this current

00:23:30,540 --> 00:23:36,570
situation hey it's bad now I won't be

00:23:34,680 --> 00:23:38,160
seeing those top two newly added

00:23:36,570 --> 00:23:40,560
comments on reactor meter because I have

00:23:38,160 --> 00:23:42,240
switched completely to master and my

00:23:40,560 --> 00:23:46,140
head is clearly pointing to the master

00:23:42,240 --> 00:23:49,590
branch awesome now I'll go ahead and add

00:23:46,140 --> 00:23:52,470
some commits on master branch you can

00:23:49,590 --> 00:23:54,930
clearly see it has diverged from the

00:23:52,470 --> 00:23:57,690
reactor meter branch and the head

00:23:54,930 --> 00:24:01,890
pointer is yes it moved to my late newly

00:23:57,690 --> 00:24:04,560
added commit okay awesome so far now

00:24:01,890 --> 00:24:08,580
where exactly is my origin slash master

00:24:04,560 --> 00:24:12,210
the are stream repository markers it's

00:24:08,580 --> 00:24:14,100
still behind because that's where it is

00:24:12,210 --> 00:24:16,470
in the upstream repository and the newly

00:24:14,100 --> 00:24:19,230
added changes are in my local repository

00:24:16,470 --> 00:24:22,020
so if you actually run git log for this

00:24:19,230 --> 00:24:23,790
scenario you will clearly see it will

00:24:22,020 --> 00:24:24,850
clearly tell you that hair head is

00:24:23,790 --> 00:24:26,920
pointing to master

00:24:24,850 --> 00:24:29,440
and the top one is a newly added commit

00:24:26,920 --> 00:24:34,270
and my upstream markers are somewhere

00:24:29,440 --> 00:24:38,800
behind the latest commit so awesome

00:24:34,270 --> 00:24:41,740
everything is like going great now let's

00:24:38,800 --> 00:24:44,410
come back to our current working state

00:24:41,740 --> 00:24:49,990
of our working directory now if I just

00:24:44,410 --> 00:24:52,870
want to UM change the commit c6 I mean I

00:24:49,990 --> 00:24:55,930
just want to move the commit c6 into my

00:24:52,870 --> 00:24:57,790
reactor meter branch I don't want to

00:24:55,930 --> 00:25:00,640
merge them or do anything else I just

00:24:57,790 --> 00:25:03,370
want that single commit into my reactor

00:25:00,640 --> 00:25:05,320
meter something like this like I just

00:25:03,370 --> 00:25:08,490
want to move it into my reactor meter

00:25:05,320 --> 00:25:11,350
branch um here comes the concept

00:25:08,490 --> 00:25:14,320
cherry-picking who doesn't love

00:25:11,350 --> 00:25:18,010
cherry-picking yeah and get it's more

00:25:14,320 --> 00:25:20,800
fun so what exactly is cherry-picking is

00:25:18,010 --> 00:25:23,320
the act of picking a commit from a back

00:25:20,800 --> 00:25:25,840
branch and applying it to another branch

00:25:23,320 --> 00:25:30,280
that's it and get cherry-pick can be

00:25:25,840 --> 00:25:32,590
very useful for undoing changes so these

00:25:30,280 --> 00:25:35,470
are the steps how exactly can do it copy

00:25:32,590 --> 00:25:37,060
the commit ID the commit hash switch to

00:25:35,470 --> 00:25:40,030
the branch to which you want to apply

00:25:37,060 --> 00:25:42,030
the commit so in my case I want to

00:25:40,030 --> 00:25:47,170
switch to the reactor meter branch and

00:25:42,030 --> 00:25:49,630
I'll run cherry-pick so here I do I

00:25:47,170 --> 00:25:51,910
check out to the reactor meter branch

00:25:49,630 --> 00:25:55,080
that's where I want to add the commit to

00:25:51,910 --> 00:25:57,640
and then I will do the cherry picking of

00:25:55,080 --> 00:25:59,760
the comment which is there in the master

00:25:57,640 --> 00:26:04,470
branch okay awesome

00:25:59,760 --> 00:26:05,850
awesome but hey I got too much conflict

00:26:04,470 --> 00:26:10,210
yeah

00:26:05,850 --> 00:26:14,410
when you see this message first thing do

00:26:10,210 --> 00:26:17,410
not panic okay don't panic don't even

00:26:14,410 --> 00:26:20,680
try to delete anything it's okay

00:26:17,410 --> 00:26:23,470
and always remember git status is your

00:26:20,680 --> 00:26:26,860
friend so whenever you see a merge

00:26:23,470 --> 00:26:28,930
conflict doing something just type git

00:26:26,860 --> 00:26:30,460
status and see what it tells it will

00:26:28,930 --> 00:26:33,460
give you some helpful commands and

00:26:30,460 --> 00:26:37,000
helpful steps you can do so when when I

00:26:33,460 --> 00:26:38,200
language status for this workflow I have

00:26:37,000 --> 00:26:40,540
clearly seen

00:26:38,200 --> 00:26:44,350
clearly says that hey your readme dot MD

00:26:40,540 --> 00:26:47,140
file have a conflict and what you can do

00:26:44,350 --> 00:26:49,660
is resolve those conflict

00:26:47,140 --> 00:26:52,000
add your file to the index area and

00:26:49,660 --> 00:26:54,490
simply continue the cherry-picking

00:26:52,000 --> 00:26:56,170
command so it clearly gives you the

00:26:54,490 --> 00:26:59,710
instructions saying fix the conflicts

00:26:56,170 --> 00:27:01,060
and run git cherry-pick - - continue

00:26:59,710 --> 00:27:05,620
super helpful

00:27:01,060 --> 00:27:08,020
okay never forget this command so okay

00:27:05,620 --> 00:27:11,680
fine that's fine but how do I convert

00:27:08,020 --> 00:27:12,790
resolve the conflict yes um using some

00:27:11,680 --> 00:27:16,810
of the tools with which you are

00:27:12,790 --> 00:27:19,150
comfortable is it's great but it's still

00:27:16,810 --> 00:27:25,060
important to know how to read the

00:27:19,150 --> 00:27:27,550
commits conflict markers so first thing

00:27:25,060 --> 00:27:30,010
is we need to understand what git is

00:27:27,550 --> 00:27:36,160
trying to say so anything between the

00:27:30,010 --> 00:27:40,000
first two markers I wish this work okay

00:27:36,160 --> 00:27:44,410
yes awesome so anything between this and

00:27:40,000 --> 00:27:46,360
this two markers it it these changes are

00:27:44,410 --> 00:27:48,240
actually what are present in your

00:27:46,360 --> 00:27:52,030
currently checked out branch and

00:27:48,240 --> 00:27:54,670
anything between these two markers are

00:27:52,030 --> 00:27:56,170
the changes which are present in your

00:27:54,670 --> 00:27:58,390
master branch from the cherry-picking

00:27:56,170 --> 00:28:02,110
Komaki or cherry-picking

00:27:58,390 --> 00:28:04,120
commit changes this these are this so

00:28:02,110 --> 00:28:06,670
always remember anything which goes in

00:28:04,120 --> 00:28:09,730
these two are the changes which are

00:28:06,670 --> 00:28:12,010
locally you are on so these changes are

00:28:09,730 --> 00:28:14,020
the first to chair this particular line

00:28:12,010 --> 00:28:16,530
is present on a reactive meter branch

00:28:14,020 --> 00:28:19,510
and these changes are actually present

00:28:16,530 --> 00:28:23,110
in in the commit which is present on the

00:28:19,510 --> 00:28:24,940
master branch okay once you know what

00:28:23,110 --> 00:28:33,190
change you want to make sure you delete

00:28:24,940 --> 00:28:35,320
those beard markers and also the make

00:28:33,190 --> 00:28:38,560
sure you delete the extra all these

00:28:35,320 --> 00:28:42,190
extra markers and also the unnecessary

00:28:38,560 --> 00:28:46,390
change use your best knowledge and

00:28:42,190 --> 00:28:50,680
judgment when to make to have what you

00:28:46,390 --> 00:28:51,940
want - okay awesome now I have resolved

00:28:50,680 --> 00:28:54,039
my conflict

00:28:51,940 --> 00:28:57,450
continue with the cherry pick and this

00:28:54,039 --> 00:29:00,820
is what my current workflow contains

00:28:57,450 --> 00:29:03,399
okay so I have successfully cherry

00:29:00,820 --> 00:29:06,009
picked this particular c6 commit into my

00:29:03,399 --> 00:29:07,539
reactive meetup commit my head pointer

00:29:06,009 --> 00:29:10,240
is automatically moved to the latest

00:29:07,539 --> 00:29:12,330
commit awesome so I have all these

00:29:10,240 --> 00:29:14,529
commits in my current working directory

00:29:12,330 --> 00:29:16,629
okay one more thing which we need to

00:29:14,529 --> 00:29:20,110
remember is whenever you do run

00:29:16,629 --> 00:29:25,870
cherry-pick come command it won't delete

00:29:20,110 --> 00:29:27,730
the this old oil commit so I don't want

00:29:25,870 --> 00:29:35,470
that to be on master branch what can I

00:29:27,730 --> 00:29:39,179
do first thing I will um switch back to

00:29:35,470 --> 00:29:41,710
the master branch so if you remember I

00:29:39,179 --> 00:29:43,389
was on the reactor meter branch I'll

00:29:41,710 --> 00:29:45,100
switch back to the master branch because

00:29:43,389 --> 00:29:47,860
the comment which I want to delete is on

00:29:45,100 --> 00:29:50,259
master branch c6 so I'll switch back to

00:29:47,860 --> 00:29:53,230
master as you can see the head is

00:29:50,259 --> 00:29:56,740
pointing to a master branch and also

00:29:53,230 --> 00:29:58,600
note the parent commit for c6 the

00:29:56,740 --> 00:30:04,240
comment which I want to delete is c3

00:29:58,600 --> 00:30:05,919
okay I run the reset command very very

00:30:04,240 --> 00:30:08,320
helpful you know sometimes when you want

00:30:05,919 --> 00:30:09,850
to just undo your commits you're you're

00:30:08,320 --> 00:30:12,879
embarrassed of the commit message you

00:30:09,850 --> 00:30:16,090
have done just run git reset so I don't

00:30:12,879 --> 00:30:19,809
get reset - - hard head till one so I'm

00:30:16,090 --> 00:30:22,450
saying what I'm saying is I'm telling it

00:30:19,809 --> 00:30:24,580
to move the head pointer of one commit

00:30:22,450 --> 00:30:26,019
backward that is moved to the pedal

00:30:24,580 --> 00:30:29,049
commit of the command which I want to

00:30:26,019 --> 00:30:31,299
delete and yeah that's it you will not

00:30:29,049 --> 00:30:33,730
have the changes in your local working

00:30:31,299 --> 00:30:36,159
directory so they are getting a lot of

00:30:33,730 --> 00:30:40,659
arguments related to it but I will not

00:30:36,159 --> 00:30:42,730
go further from here again one thing you

00:30:40,659 --> 00:30:46,600
need to remember whenever you delete

00:30:42,730 --> 00:30:50,139
this c6 commit it's it is deleted from

00:30:46,600 --> 00:30:53,139
your branching the pointer is like

00:30:50,139 --> 00:30:55,259
removed from it but the get arm but the

00:30:53,139 --> 00:30:58,809
commit will be still existing in your

00:30:55,259 --> 00:31:00,399
local directory if you actually open the

00:30:58,809 --> 00:31:02,110
get object folder you will still see

00:31:00,399 --> 00:31:04,690
that hanging around there so that's

00:31:02,110 --> 00:31:05,960
where the gate GC command comes in handy

00:31:04,690 --> 00:31:08,559
it's a garbage collector come

00:31:05,960 --> 00:31:10,789
but get just running it removes all the

00:31:08,559 --> 00:31:16,639
commits which are hanging around there

00:31:10,789 --> 00:31:19,690
pointing to nothing okay the time but

00:31:16,639 --> 00:31:23,119
this is the last one okay two minutes

00:31:19,690 --> 00:31:24,409
merging a I won't talk about it so I

00:31:23,119 --> 00:31:27,980
will not leave the stage without

00:31:24,409 --> 00:31:30,080
completing this so so if you are a

00:31:27,980 --> 00:31:34,159
maintainer of any project I feel you

00:31:30,080 --> 00:31:37,039
okay merging is not easy so let's assume

00:31:34,159 --> 00:31:39,289
that this is my current workflow okay I

00:31:37,039 --> 00:31:41,749
have these comments on my reactor meter

00:31:39,289 --> 00:31:45,019
branch and that's my master branch so

00:31:41,749 --> 00:31:48,470
now I want to merge the reactive meter

00:31:45,019 --> 00:31:51,080
branch into my master branch okay so how

00:31:48,470 --> 00:31:52,820
do I do it I switch to the master branch

00:31:51,080 --> 00:31:57,110
because that's where I want to merge the

00:31:52,820 --> 00:32:00,429
changes into so I switched back the head

00:31:57,110 --> 00:32:04,399
is pointing to my master branch now and

00:32:00,429 --> 00:32:06,619
I run git merge react to meet up that's

00:32:04,399 --> 00:32:10,549
the branch which I want to merging much

00:32:06,619 --> 00:32:12,289
the changes from and again I warn you if

00:32:10,549 --> 00:32:14,240
there are any merge conflicts it will

00:32:12,289 --> 00:32:16,580
tell you and you know what to do if you

00:32:14,240 --> 00:32:20,389
see a merge conflict right I'm sure

00:32:16,580 --> 00:32:23,629
you're confident now and what exactly

00:32:20,389 --> 00:32:26,539
good does is it creates a new snapshot

00:32:23,629 --> 00:32:30,710
and it automatically creates a new

00:32:26,539 --> 00:32:35,200
commit pointing to both of these commits

00:32:30,710 --> 00:32:37,700
over here the commit c6 and c7 and

00:32:35,200 --> 00:32:40,129
something which is special about c8 is

00:32:37,700 --> 00:32:42,679
it's known as much commit it points it

00:32:40,129 --> 00:32:47,509
has two parent commits that c7 and c6

00:32:42,679 --> 00:32:49,399
and this once the merge is successful

00:32:47,509 --> 00:32:52,369
the head pointer is automatically moved

00:32:49,399 --> 00:32:53,809
to c8 and always remember if you are

00:32:52,369 --> 00:32:56,769
done with the branch please please

00:32:53,809 --> 00:32:59,990
PLEASE delete it it will just makes your

00:32:56,769 --> 00:33:02,840
log looks the branching workflow looks

00:32:59,990 --> 00:33:04,549
shitty so please remember that and the

00:33:02,840 --> 00:33:06,769
merge which I have just shown you is a

00:33:04,549 --> 00:33:08,360
three-way merge there there's another

00:33:06,769 --> 00:33:10,460
type of a merge which I don't which I

00:33:08,360 --> 00:33:13,999
don't want to talk about right now but

00:33:10,460 --> 00:33:16,220
yeah that's about merging as a final

00:33:13,999 --> 00:33:19,500
conclusion get is not has Gary as you

00:33:16,220 --> 00:33:21,990
think like if you just sit some arm

00:33:19,500 --> 00:33:24,180
sit on some git workflow and spend some

00:33:21,990 --> 00:33:26,700
time to understand no branching and

00:33:24,180 --> 00:33:29,670
these all day-to-day commands we run you

00:33:26,700 --> 00:33:34,290
will become a professor and some of the

00:33:29,670 --> 00:33:36,570
important resources yes the

00:33:34,290 --> 00:33:39,000
documentation we are scared of it

00:33:36,570 --> 00:33:40,770
but it's it's very useful if you

00:33:39,000 --> 00:33:43,290
actually understand some of the terms

00:33:40,770 --> 00:33:46,890
it's it's very useful and also the GUID

00:33:43,290 --> 00:33:48,810
Pro book is amazing ok just Google

00:33:46,890 --> 00:33:50,870
forget Pro book it's it's open source

00:33:48,810 --> 00:33:53,370
it's it talks about different scenarios

00:33:50,870 --> 00:33:54,630
merging rebasing all these different

00:33:53,370 --> 00:33:57,120
concepts it's amazing

00:33:54,630 --> 00:33:59,760
give it a try and hey that's how you can

00:33:57,120 --> 00:34:01,670
tame the guitar Souris be confident in

00:33:59,760 --> 00:34:04,350
what your command you run you can

00:34:01,670 --> 00:34:05,950
definitely do it and that's the end

00:34:04,350 --> 00:34:13,800
thank you

00:34:05,950 --> 00:34:13,800

YouTube URL: https://www.youtube.com/watch?v=j4UMWk6Zr0Q


