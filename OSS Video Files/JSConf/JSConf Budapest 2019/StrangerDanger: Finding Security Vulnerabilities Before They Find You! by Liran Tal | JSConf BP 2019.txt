Title: StrangerDanger: Finding Security Vulnerabilities Before They Find You! by Liran Tal | JSConf BP 2019
Publication date: 2019-10-18
Playlist: JSConf Budapest 2019
Description: 
	https://2019.jsconfbp.com/speakers/liran_tal

Open source modules on the NPM ecosystem are undoubtedly awesome. However, they also represent an undeniable and massive risk. You’re introducing someone else’s code into your system, often with little or no scrutiny. The wrong package can introduce severe vulnerabilities into your application, exposing your application and your user's data. This talk will use a sample application, Goof, which uses various vulnerable dependencies, which we will exploit as an attacker would. For each issue, we'll explain why it happened, show its impact, and – most importantly – see how to avoid or fix it.

Liran Tal is a Developer Advocate at Snyk and a member of the Node.js Security working group. He is a JSHeroes ambassador, passionate about building communities and the open source movement and greatly enjoys pizza, wine, web technologies, and CLIs. Liran is also the author of Essential Node.js Security, a core contributor to OWASP NodeGoat project and loves to dabble about code, testing, and software philosophy.
Captions: 
	00:00:05,330 --> 00:00:10,080
thank ball all right so let's talk about

00:00:08,519 --> 00:00:12,090
a little bit about security today I'll

00:00:10,080 --> 00:00:14,070
introduce myself first my name is Ron

00:00:12,090 --> 00:00:16,500
Ptolemy developer advocate at sneakin

00:00:14,070 --> 00:00:19,080
from Israel I sneak we build developer

00:00:16,500 --> 00:00:20,580
tooling real for security tooling to

00:00:19,080 --> 00:00:23,010
help developers and empower them to

00:00:20,580 --> 00:00:24,269
actually fix security vulnerabilities

00:00:23,010 --> 00:00:26,640
that they have in their open-source

00:00:24,269 --> 00:00:28,680
projects I am also actively involved in

00:00:26,640 --> 00:00:31,170
an OG air security working group to help

00:00:28,680 --> 00:00:33,660
improve the state of security of no GS

00:00:31,170 --> 00:00:35,430
and the NPM ecosystem as well and to a

00:00:33,660 --> 00:00:37,530
lot of other projects like OS node goat

00:00:35,430 --> 00:00:38,969
and some books I wrote about security if

00:00:37,530 --> 00:00:40,230
you're interested in any of those and

00:00:38,969 --> 00:00:41,870
getting involved I'll be happy to help

00:00:40,230 --> 00:00:45,270
so just ping me on Twitter and we can

00:00:41,870 --> 00:00:47,160
take it offline so open source is

00:00:45,270 --> 00:00:49,920
awesome right we're all using virtually

00:00:47,160 --> 00:00:51,960
everyone is using open source in one way

00:00:49,920 --> 00:00:54,449
or the other it is a great way for us to

00:00:51,960 --> 00:00:55,980
go ahead and just focus on the business

00:00:54,449 --> 00:00:59,070
logic of things that we need to build

00:00:55,980 --> 00:01:01,289
and reuse what we need what we can from

00:00:59,070 --> 00:01:02,789
the ecosystem we can also go ahead and

00:01:01,289 --> 00:01:04,260
contribute back some of us even

00:01:02,789 --> 00:01:06,689
contribute and create and maintain

00:01:04,260 --> 00:01:07,920
project which is amazing and they

00:01:06,689 --> 00:01:09,960
probably don't need to convince you that

00:01:07,920 --> 00:01:12,270
you probably already know that and true

00:01:09,960 --> 00:01:14,640
as a testament of that we have seen a

00:01:12,270 --> 00:01:16,830
lot of growth in all the NPM all the

00:01:14,640 --> 00:01:21,180
packaged ecosystems of different

00:01:16,830 --> 00:01:22,799
languages even Java as it seems I don't

00:01:21,180 --> 00:01:25,350
know if virtual T or not but generally

00:01:22,799 --> 00:01:27,720
we've seen this growth going up through

00:01:25,350 --> 00:01:30,810
all of them actually in just 2018

00:01:27,720 --> 00:01:33,210
yes last year NPM has added 250 K

00:01:30,810 --> 00:01:35,579
packages to the repository earlier this

00:01:33,210 --> 00:01:38,610
year in June we already crossed 1

00:01:35,579 --> 00:01:40,710
million packages on NPM which I probably

00:01:38,610 --> 00:01:42,600
don't need to tell you that because all

00:01:40,710 --> 00:01:46,640
of you are pulling half the universe

00:01:42,600 --> 00:01:49,439
when you're done doing an NPM install so

00:01:46,640 --> 00:01:51,540
really the question is how much do we

00:01:49,439 --> 00:01:53,520
know about the NPM dependencies that

00:01:51,540 --> 00:01:55,649
we're pulling into the project try to do

00:01:53,520 --> 00:01:57,570
a mental exercise just now yourselves

00:01:55,649 --> 00:01:59,850
try to imagine your package is on your

00:01:57,570 --> 00:02:01,439
package manifest how many packages do

00:01:59,850 --> 00:02:04,409
you know do you recognize those direct

00:02:01,439 --> 00:02:06,899
dependencies and how many transitive

00:02:04,409 --> 00:02:08,250
dependencies do you also pull in so

00:02:06,899 --> 00:02:10,500
there's a lot of dependencies a lot of

00:02:08,250 --> 00:02:12,690
unknown that we are using in our

00:02:10,500 --> 00:02:14,580
projects and you know possibly involving

00:02:12,690 --> 00:02:17,350
some risks

00:02:14,580 --> 00:02:18,640
an interesting article or a research

00:02:17,350 --> 00:02:20,380
paper that was actually published

00:02:18,640 --> 00:02:22,810
earlier this year that I had a chance to

00:02:20,380 --> 00:02:24,220
read and write about is something that

00:02:22,810 --> 00:02:27,190
actually compared a Python hacker system

00:02:24,220 --> 00:02:30,790
with the NPM ecosystem and it found that

00:02:27,190 --> 00:02:33,010
61% of all NPM packages could be

00:02:30,790 --> 00:02:35,020
considered abandoned now abandoned is a

00:02:33,010 --> 00:02:36,640
very open to interpretation you know

00:02:35,020 --> 00:02:39,070
different people have different opinions

00:02:36,640 --> 00:02:41,320
on it for the sake of the research what

00:02:39,070 --> 00:02:42,910
they did is considered any package that

00:02:41,320 --> 00:02:45,700
didn't have a release in the last 12

00:02:42,910 --> 00:02:46,930
months is abandoned which is arguable

00:02:45,700 --> 00:02:49,300
because you could just say that you know

00:02:46,930 --> 00:02:53,350
the package is well known it's mature

00:02:49,300 --> 00:02:55,540
it's reached its and state and go except

00:02:53,350 --> 00:02:58,120
in 2018 some of us may remember the

00:02:55,540 --> 00:02:59,890
event stream incident probably the most

00:02:58,120 --> 00:03:02,770
sophisticated attack that we've seen on

00:02:59,890 --> 00:03:04,750
NPM happening happened to a package

00:03:02,770 --> 00:03:07,030
called event stream which has been there

00:03:04,750 --> 00:03:08,530
for almost a decade like eight years did

00:03:07,030 --> 00:03:10,380
not have any release for the last two or

00:03:08,530 --> 00:03:12,910
three years depending how you count it

00:03:10,380 --> 00:03:15,040
but someone was actually able to

00:03:12,910 --> 00:03:18,010
socially engineer their way into getting

00:03:15,040 --> 00:03:20,110
into gaining NPM publish permissions to

00:03:18,010 --> 00:03:22,330
publish a module injected a malicious

00:03:20,110 --> 00:03:24,940
package in the dependency tree of event

00:03:22,330 --> 00:03:27,190
stream itself and in this way we're able

00:03:24,940 --> 00:03:29,860
to steal money from cryptocurrency

00:03:27,190 --> 00:03:31,180
wallets this actually happened there's a

00:03:29,860 --> 00:03:33,370
whole post more than one chain events if

00:03:31,180 --> 00:03:35,500
you're interested in following that as

00:03:33,370 --> 00:03:38,560
well but also what that research paper

00:03:35,500 --> 00:03:41,050
actually you know highlighted is an

00:03:38,560 --> 00:03:42,790
important note about that the dependency

00:03:41,050 --> 00:03:45,160
tree that we are always pulling in so it

00:03:42,790 --> 00:03:48,160
actually found that on average we'll be

00:03:45,160 --> 00:03:49,930
pulling in four and PM packages nested

00:03:48,160 --> 00:03:52,720
deep in every time we'll go ahead and

00:03:49,930 --> 00:03:54,310
install and be an NPM package so this

00:03:52,720 --> 00:03:56,080
actually is you know very interesting in

00:03:54,310 --> 00:03:57,280
terms of how many packages are we

00:03:56,080 --> 00:03:59,049
pulling in and what do we know about

00:03:57,280 --> 00:04:00,489
those packages and all of those nested

00:03:59,049 --> 00:04:03,430
dependencies in the tree watch go to

00:04:00,489 --> 00:04:04,930
vulnerabilities they may have so as an

00:04:03,430 --> 00:04:06,850
example and security vulnerabilities

00:04:04,930 --> 00:04:08,380
happen all the time we just usually less

00:04:06,850 --> 00:04:10,180
hear about them as we're less conscious

00:04:08,380 --> 00:04:14,530
on this but where do we go with yawn

00:04:10,180 --> 00:04:16,450
yawn is popular NPM package manager it

00:04:14,530 --> 00:04:18,280
was it was found to be vulnerable to a

00:04:16,450 --> 00:04:19,840
man-in-the-middle attack so for example

00:04:18,280 --> 00:04:21,789
if you were here on the workshop or in a

00:04:19,840 --> 00:04:23,590
coffee shop you are using a you were

00:04:21,789 --> 00:04:25,360
doing a yarn install someone could

00:04:23,590 --> 00:04:27,430
actually eavesdrop the connection and

00:04:25,360 --> 00:04:29,740
get the NPM tokens that you were

00:04:27,430 --> 00:04:32,229
sending off to to npm itself because

00:04:29,740 --> 00:04:34,930
that was sent off on an insecure medium

00:04:32,229 --> 00:04:37,240
so not on an HTTP so that's that's one

00:04:34,930 --> 00:04:39,010
and I could probably do a safe a safe

00:04:37,240 --> 00:04:40,990
estimation and guess that no one is

00:04:39,010 --> 00:04:42,810
using this latest version of yarn that

00:04:40,990 --> 00:04:45,160
was just released a few months ago

00:04:42,810 --> 00:04:47,650
another example is markdown marked down

00:04:45,160 --> 00:04:49,750
for j6 this package is actually pretty

00:04:47,650 --> 00:04:52,270
popular it's used for a storybook UI in

00:04:49,750 --> 00:04:55,210
several gatsby teams obviously in

00:04:52,270 --> 00:04:57,160
several UJ s and n react.js components

00:04:55,210 --> 00:04:58,960
as well and it is also vulnerable to

00:04:57,160 --> 00:05:02,350
some XSS vulnerabilities which were

00:04:58,960 --> 00:05:04,090
again only recently fixed sequel is

00:05:02,350 --> 00:05:07,630
another even more the most up-to-date

00:05:04,090 --> 00:05:09,460
example of an SQL injection SQL

00:05:07,630 --> 00:05:12,550
abstraction library that is usually

00:05:09,460 --> 00:05:14,289
popularly used on OJ's project actually

00:05:12,550 --> 00:05:16,690
was found to be vulnerable to several

00:05:14,289 --> 00:05:18,760
SQL injections and was just fixed last

00:05:16,690 --> 00:05:20,050
month so if you know that one of your

00:05:18,760 --> 00:05:21,430
teams is using that you should probably

00:05:20,050 --> 00:05:25,270
scan and make sure that you're fixing it

00:05:21,430 --> 00:05:26,979
and upgrading very quickly now this

00:05:25,270 --> 00:05:28,419
means that a lot of open open source is

00:05:26,979 --> 00:05:30,310
amazing and it's written by humans but

00:05:28,419 --> 00:05:33,130
you know as we come to think about all

00:05:30,310 --> 00:05:35,020
of this risk we come to also understand

00:05:33,130 --> 00:05:36,220
and realize that we do not know who

00:05:35,020 --> 00:05:38,080
wrote them and you know what is their

00:05:36,220 --> 00:05:40,060
proficiency what is going on with those

00:05:38,080 --> 00:05:41,349
packages for example we actually

00:05:40,060 --> 00:05:43,599
conducted a state of open source

00:05:41,349 --> 00:05:45,250
security in February 2019

00:05:43,599 --> 00:05:46,960
we found a lot of interesting fact for

00:05:45,250 --> 00:05:49,419
example this one where maintainer x'

00:05:46,960 --> 00:05:51,130
would feel less confident in fixing

00:05:49,419 --> 00:05:53,229
security issues once they are disclosed

00:05:51,130 --> 00:05:54,639
because they do not think that they have

00:05:53,229 --> 00:05:56,440
a strong enough security knowledge to

00:05:54,639 --> 00:05:58,740
actually fix that and do something about

00:05:56,440 --> 00:06:02,020
it similar to that for example

00:05:58,740 --> 00:06:03,880
maintainer is usually or a 26% of the

00:06:02,020 --> 00:06:06,070
time will not add a to their packages

00:06:03,880 --> 00:06:07,900
they will not have any such kind of

00:06:06,070 --> 00:06:09,430
security testing that static application

00:06:07,900 --> 00:06:12,070
dynamic application security testing not

00:06:09,430 --> 00:06:13,870
even a security code review so imagine

00:06:12,070 --> 00:06:16,120
your projects although dependencies

00:06:13,870 --> 00:06:18,099
count one out of four that did not go

00:06:16,120 --> 00:06:19,930
any kind of security test now that

00:06:18,099 --> 00:06:21,280
pretty is pretty easy to do an hour on a

00:06:19,930 --> 00:06:22,690
direct dependency but just think about

00:06:21,280 --> 00:06:23,949
how all of those are indirect

00:06:22,690 --> 00:06:27,669
dependencies that you're pulling in as

00:06:23,949 --> 00:06:29,500
well so as we come to talk about you

00:06:27,669 --> 00:06:31,090
know the code that we have and how much

00:06:29,500 --> 00:06:33,400
we rely on open source it's a it's a

00:06:31,090 --> 00:06:34,750
simple app I built based on vgs and a UI

00:06:33,400 --> 00:06:36,550
framework called Bouma so it doesn't

00:06:34,750 --> 00:06:38,020
have a lot of dependencies but you can

00:06:36,550 --> 00:06:39,490
already see that what a code is

00:06:38,020 --> 00:06:40,810
generated from my app and from the

00:06:39,490 --> 00:06:42,370
bundle of all the vendors

00:06:40,810 --> 00:06:45,150
that you know I'm actually dependent

00:06:42,370 --> 00:06:47,680
upon you know it's only represents 0.2%

00:06:45,150 --> 00:06:49,270
my code through the whole app and I

00:06:47,680 --> 00:06:51,340
think this is the most thing that you

00:06:49,270 --> 00:06:53,710
know struck lightning in terms of being

00:06:51,340 --> 00:06:55,419
able to understand and realize how much

00:06:53,710 --> 00:06:57,040
we're using open-source because this is

00:06:55,419 --> 00:06:59,139
a common misconception for me as a

00:06:57,040 --> 00:07:01,480
developer were I'm building code pushing

00:06:59,139 --> 00:07:04,600
it to production and you know this is my

00:07:01,480 --> 00:07:07,120
app except my app is actually you know

00:07:04,600 --> 00:07:08,680
it is that but my code what I write you

00:07:07,120 --> 00:07:11,290
know my own responsibility is actually a

00:07:08,680 --> 00:07:12,490
very small piece or that whole thing and

00:07:11,290 --> 00:07:14,050
when I'm pushing this whole thing I'm

00:07:12,490 --> 00:07:15,790
pushing a lot of code into production a

00:07:14,050 --> 00:07:18,760
lot of risk that you know other people

00:07:15,790 --> 00:07:19,930
would usually catch such as DevOps and

00:07:18,760 --> 00:07:21,040
security engineers and figure out that

00:07:19,930 --> 00:07:24,850
there's a lot of risk that I'm actually

00:07:21,040 --> 00:07:26,290
pushing in so at this point I guess some

00:07:24,850 --> 00:07:27,520
of us are wondering you know we're

00:07:26,290 --> 00:07:29,530
talking about security vulnerabilities

00:07:27,520 --> 00:07:32,530
in open-source libraries and how much

00:07:29,530 --> 00:07:33,970
are we dependent upon so how do we jump

00:07:32,530 --> 00:07:36,580
from a security vulnerability in a

00:07:33,970 --> 00:07:38,050
package in a dependency that we're using

00:07:36,580 --> 00:07:39,940
to a security vulnerability in our

00:07:38,050 --> 00:07:47,260
application it actually puts it into

00:07:39,940 --> 00:07:48,820
risk so let's go ahead and go to the

00:07:47,260 --> 00:07:55,030
hands-on part of this of this

00:07:48,820 --> 00:07:57,729
presentation so over here I have a

00:07:55,030 --> 00:08:02,800
simple goof to do application you can do

00:07:57,729 --> 00:08:04,419
things like I'm pretty nervous here and

00:08:02,800 --> 00:08:06,280
it's basically a to-do app that I can

00:08:04,419 --> 00:08:08,260
just add some stuff into it as the

00:08:06,280 --> 00:08:10,330
security conscious developer you might

00:08:08,260 --> 00:08:11,889
start already to think about how you

00:08:10,330 --> 00:08:13,960
could go ahead and you know attack this

00:08:11,889 --> 00:08:15,910
one so it has an SQL injection input

00:08:13,960 --> 00:08:18,820
maybe I can do something around it maybe

00:08:15,910 --> 00:08:20,800
I can do an exercise several things

00:08:18,820 --> 00:08:23,650
right so maybe I would go ahead and add

00:08:20,800 --> 00:08:25,780
something like that maybe it works maybe

00:08:23,650 --> 00:08:27,729
it doesn't work I don't think that we

00:08:25,780 --> 00:08:30,669
should know about this is I've built

00:08:27,729 --> 00:08:33,000
this using marked so marked I'll go

00:08:30,669 --> 00:08:36,450
ahead and increase that so you can see

00:08:33,000 --> 00:08:39,610
mark is a fairly popular as well package

00:08:36,450 --> 00:08:41,320
for doing work down one example of

00:08:39,610 --> 00:08:43,659
understanding security and being aware

00:08:41,320 --> 00:08:45,880
of this is this is a bad example of it

00:08:43,659 --> 00:08:48,610
in terms of you need to opt in to

00:08:45,880 --> 00:08:50,980
security right to sanitize the data

00:08:48,610 --> 00:08:52,209
that's coming in when you use it so it's

00:08:50,980 --> 00:08:54,130
not turned on by default you actually

00:08:52,209 --> 00:08:55,120
need to know to do that so as a

00:08:54,130 --> 00:08:56,230
developer if you

00:08:55,120 --> 00:08:57,910
if you're reading this you have to like

00:08:56,230 --> 00:08:59,230
understand the API is read I need

00:08:57,910 --> 00:09:02,500
security disclosure and then then turn

00:08:59,230 --> 00:09:03,760
it on so we have marked her and I have

00:09:02,500 --> 00:09:06,100
marked down support so I can go ahead

00:09:03,760 --> 00:09:08,710
and do stuff and actually scan this up

00:09:06,100 --> 00:09:10,750
with weed snake and I can see that you

00:09:08,710 --> 00:09:12,820
know I have I am vulnerable to

00:09:10,750 --> 00:09:15,880
cross-site scripting right and I'm part

00:09:12,820 --> 00:09:17,790
of like 448 libraries that I have read

00:09:15,880 --> 00:09:21,400
so again like how what could I do next

00:09:17,790 --> 00:09:23,529
to go ahead and cause maybe an XSS as of

00:09:21,400 --> 00:09:25,300
sin how about if we try a different

00:09:23,529 --> 00:09:30,880
vector we know that there is markdown so

00:09:25,300 --> 00:09:32,620
I can do like this and get something

00:09:30,880 --> 00:09:34,810
bold but then I also have this vector of

00:09:32,620 --> 00:09:36,460
attack where I can add things so imagine

00:09:34,810 --> 00:09:40,140
someone adding a JavaScript link into

00:09:36,460 --> 00:09:40,140
this so maybe something like this

00:09:43,529 --> 00:09:48,310
right and then we have links so now I

00:09:45,910 --> 00:09:54,580
can go ahead and take this one step

00:09:48,310 --> 00:09:56,520
further and perhaps I want to change

00:09:54,580 --> 00:10:00,310
this with something else

00:09:56,520 --> 00:10:02,800
this is a good way to start except it

00:10:00,310 --> 00:10:04,480
doesn't work because markdown is

00:10:02,800 --> 00:10:06,760
actually sanitizing it as we actually

00:10:04,480 --> 00:10:08,320
provided it so it's doing something with

00:10:06,760 --> 00:10:12,910
the data just you know we're not yet

00:10:08,320 --> 00:10:15,040
there one thing that is common is to go

00:10:12,910 --> 00:10:17,920
ahead and represent data in a different

00:10:15,040 --> 00:10:19,480
way so we can go ahead and say : on a on

00:10:17,920 --> 00:10:21,400
a web page could represent that by the

00:10:19,480 --> 00:10:29,250
HTML entity for that so we could go

00:10:21,400 --> 00:10:33,400
ahead and do something like this

00:10:29,250 --> 00:10:34,690
represent this as well and do it and the

00:10:33,400 --> 00:10:36,130
way that I know this I do not need to

00:10:34,690 --> 00:10:37,540
reverse engineer something that is you

00:10:36,130 --> 00:10:38,770
know very difficult because markdown is

00:10:37,540 --> 00:10:41,200
open source I can just go to the

00:10:38,770 --> 00:10:43,180
repository figure out what sanitize true

00:10:41,200 --> 00:10:45,459
does and just reverse engineer that so

00:10:43,180 --> 00:10:46,750
it's pretty easy to figure this out so I

00:10:45,459 --> 00:10:49,060
can do this I can already see that

00:10:46,750 --> 00:10:50,410
something different is happening so

00:10:49,060 --> 00:10:53,410
perhaps I'm on the right path

00:10:50,410 --> 00:10:55,150
and at this point again I can go into

00:10:53,410 --> 00:10:56,740
markdown source code and figure out why

00:10:55,150 --> 00:10:57,130
did these get sanitized in a different

00:10:56,740 --> 00:11:02,440
way

00:10:57,130 --> 00:11:04,089
the true it is the sanitization process

00:11:02,440 --> 00:11:06,790
in marked work this way that it actually

00:11:04,089 --> 00:11:08,889
rejects as disco part of the string so

00:11:06,790 --> 00:11:11,170
it actually looks for this kind of code

00:11:08,889 --> 00:11:14,049
strips this out so while I'm trying to

00:11:11,170 --> 00:11:16,299
be outsmarting it it is actually someone

00:11:14,049 --> 00:11:18,509
as a developer that wrote it was able to

00:11:16,299 --> 00:11:21,480
actually think about this vector as well

00:11:18,509 --> 00:11:24,249
what they hadn't took into account is

00:11:21,480 --> 00:11:26,529
something that that happens in the

00:11:24,249 --> 00:11:28,809
browser and that is router are usually

00:11:26,529 --> 00:11:31,029
very nice in terms of they help us to if

00:11:28,809 --> 00:11:32,589
we write like bad code but you know

00:11:31,029 --> 00:11:33,730
broken divs or brought off forgotten

00:11:32,589 --> 00:11:36,309
deals or stuff like that they would go

00:11:33,730 --> 00:11:38,799
ahead and complete that so if I would

00:11:36,309 --> 00:11:40,509
just write something like this like

00:11:38,799 --> 00:11:43,209
literally this I know it's hard in

00:11:40,509 --> 00:11:45,999
JavaScript bear with me but if I her if

00:11:43,209 --> 00:11:48,399
I put a valid JavaScript statement like

00:11:45,999 --> 00:11:50,169
this as a keyword it will go ahead and

00:11:48,399 --> 00:11:53,819
pass the sanitization process by marked

00:11:50,169 --> 00:11:56,470
because marked does not look for this it

00:11:53,819 --> 00:11:58,480
looks for a specific string as someone

00:11:56,470 --> 00:12:01,899
trying to hack this out so when I do

00:11:58,480 --> 00:12:04,449
this I get this link actually working

00:12:01,899 --> 00:12:08,319
and what the browser does is it says

00:12:04,449 --> 00:12:10,839
well I think you meant to end that a 58

00:12:08,319 --> 00:12:12,699
character with a with a semicolon so let

00:12:10,839 --> 00:12:14,220
me do that for you it adds it and

00:12:12,699 --> 00:12:17,379
because this is a valid JavaScript

00:12:14,220 --> 00:12:19,149
statement the whole thing gets validated

00:12:17,379 --> 00:12:24,129
as far as well and we have an XSS in our

00:12:19,149 --> 00:12:26,439
application so one example of dust of

00:12:24,129 --> 00:12:30,509
that is this we can go ahead and figure

00:12:26,439 --> 00:12:30,509
out some other examples for example I

00:12:30,959 --> 00:12:35,860
have this about page which is based on

00:12:34,329 --> 00:12:37,569
so this is I'm not doing anything

00:12:35,860 --> 00:12:40,329
dynamically I'm actually using a

00:12:37,569 --> 00:12:42,459
template engine for nodejs called dust

00:12:40,329 --> 00:12:43,929
J's developed by LinkedIn for a

00:12:42,459 --> 00:12:45,549
framework called cracker and it's

00:12:43,929 --> 00:12:48,610
actually pretty secure project etc but

00:12:45,549 --> 00:12:50,619
bit of an oldie reference here anyway

00:12:48,610 --> 00:12:54,399
what I have is an about page on this app

00:12:50,619 --> 00:12:56,169
and you can see how I'm like really

00:12:54,399 --> 00:13:03,309
great at CSS because I have this skill

00:12:56,169 --> 00:13:06,519
to make it big make it alright so let's

00:13:03,309 --> 00:13:07,600
go back to this so it is a mobile first

00:13:06,519 --> 00:13:11,230
application you can see it actually

00:13:07,600 --> 00:13:12,789
responds reactivate to what I do and at

00:13:11,230 --> 00:13:14,379
this point again I'm trying to figure

00:13:12,789 --> 00:13:18,419
out what can I do with us as a

00:13:14,379 --> 00:13:21,730
templating engine on this application so

00:13:18,419 --> 00:13:22,720
give you a bit more context into what's

00:13:21,730 --> 00:13:28,420
going on

00:13:22,720 --> 00:13:30,610
no this is a template for it right about

00:13:28,420 --> 00:13:32,110
you it has the test extension I have

00:13:30,610 --> 00:13:34,540
this condition where if something is a

00:13:32,110 --> 00:13:37,030
device equals the desktop or mobile it's

00:13:34,540 --> 00:13:39,760
gonna run through one of those branching

00:13:37,030 --> 00:13:42,370
statements in my conditions and draw it

00:13:39,760 --> 00:13:43,720
draw the draw the HTML for this so

00:13:42,370 --> 00:13:46,540
pretty straightforward but the question

00:13:43,720 --> 00:13:49,990
is what we can do with this if we were

00:13:46,540 --> 00:13:51,580
to figure out what is what is that's

00:13:49,990 --> 00:13:52,930
viable for you know if you would scan

00:13:51,580 --> 00:13:55,150
your app you could scan it with whatever

00:13:52,930 --> 00:13:56,350
you want sneak or NPM audit or OS

00:13:55,150 --> 00:13:57,850
dependency check doesn't really matter

00:13:56,350 --> 00:13:59,320
but you would find something like this

00:13:57,850 --> 00:14:01,270
like dust is vulnerable to a code

00:13:59,320 --> 00:14:02,500
injection what does it mean a code

00:14:01,270 --> 00:14:04,930
injection how does that really happen

00:14:02,500 --> 00:14:10,530
how does that impact from a library to

00:14:04,930 --> 00:14:10,530
my own application so the thing is

00:14:11,010 --> 00:14:15,160
there's a user input here so we can go

00:14:13,210 --> 00:14:17,320
ahead and start and doing something with

00:14:15,160 --> 00:14:20,830
it and for example I can go ahead and

00:14:17,320 --> 00:14:22,510
put maybe a quote because maybe I'm

00:14:20,830 --> 00:14:23,980
trying to escape this whole quote

00:14:22,510 --> 00:14:26,830
condition and do something with this

00:14:23,980 --> 00:14:28,750
part of the code maybe I would do

00:14:26,830 --> 00:14:30,460
something like this except that seems to

00:14:28,750 --> 00:14:32,290
be okay dust it's probably behind the

00:14:30,460 --> 00:14:40,990
scenes and coding it doing it properly

00:14:32,290 --> 00:14:44,650
etc and we can actually see that dust

00:14:40,990 --> 00:14:47,440
has this escape HTML part of the code so

00:14:44,650 --> 00:14:48,910
it's actually taking a string trying to

00:14:47,440 --> 00:14:50,290
see if there's anything malicious that

00:14:48,910 --> 00:14:51,460
should be encoded you know something

00:14:50,290 --> 00:14:53,140
dangerous that should go trying to

00:14:51,460 --> 00:14:54,580
encoding and then it's going to go and

00:14:53,140 --> 00:14:56,710
encode it so it's gonna replace it with

00:14:54,580 --> 00:14:59,440
the HTML entity for it and this way try

00:14:56,710 --> 00:15:01,060
and you know not use the original quote

00:14:59,440 --> 00:15:04,750
or whatever fragment or I was trying to

00:15:01,060 --> 00:15:08,080
do to circumvent the app this is great

00:15:04,750 --> 00:15:09,970
except it is actually only going into

00:15:08,080 --> 00:15:12,790
this safe condition when I'm giving it a

00:15:09,970 --> 00:15:14,620
string at this point is it too

00:15:12,790 --> 00:15:17,200
interesting to figure out how do i hack

00:15:14,620 --> 00:15:18,880
through that and do not give it a string

00:15:17,200 --> 00:15:20,740
because I need to put something else but

00:15:18,880 --> 00:15:24,460
to bypass this part which is not a

00:15:20,740 --> 00:15:29,380
string so one example one way to do that

00:15:24,460 --> 00:15:30,970
is to think about array parameters for

00:15:29,380 --> 00:15:33,460
the way that you could go ahead and do

00:15:30,970 --> 00:15:35,110
our request poisoning like this with an

00:15:33,460 --> 00:15:35,420
HTTP parameter pollution and you would

00:15:35,110 --> 00:15:38,120
say

00:15:35,420 --> 00:15:39,770
Desktop is now actually an array this is

00:15:38,120 --> 00:15:42,020
very common where you have like end user

00:15:39,770 --> 00:15:43,100
ID equals something and use ready equals

00:15:42,020 --> 00:15:45,530
something and you want to pass an array

00:15:43,100 --> 00:15:48,130
to a request parameter or you can also

00:15:45,530 --> 00:15:51,020
use the bracket notation to go ahead and

00:15:48,130 --> 00:15:53,090
convey the same the same in terms as you

00:15:51,020 --> 00:15:56,210
can see when I'm doing that this

00:15:53,090 --> 00:16:04,220
continues to work just fine because when

00:15:56,210 --> 00:16:06,590
the evaluation happens over here over

00:16:04,220 --> 00:16:08,180
here I'm just go ahead going ahead and

00:16:06,590 --> 00:16:11,630
doing a two string for an array that's

00:16:08,180 --> 00:16:12,980
gonna give me the first item under so it

00:16:11,630 --> 00:16:16,610
seems that the app is actually working

00:16:12,980 --> 00:16:18,650
well but what's interesting is if I go

00:16:16,610 --> 00:16:22,100
ahead and try to put a quote or

00:16:18,650 --> 00:16:24,290
something fails and we can already see

00:16:22,100 --> 00:16:26,120
what's going on so to understand a

00:16:24,290 --> 00:16:27,530
little bit better what what is actually

00:16:26,120 --> 00:16:30,760
going on behind the hood with the

00:16:27,530 --> 00:16:33,860
security issue is this if condition is

00:16:30,760 --> 00:16:35,390
actually something that gets evaluated

00:16:33,860 --> 00:16:37,520
through runtime because this is

00:16:35,390 --> 00:16:40,940
generally how the template engines work

00:16:37,520 --> 00:16:42,950
and dust has this helper were for if

00:16:40,940 --> 00:16:47,330
it's going to go take that condition and

00:16:42,950 --> 00:16:48,470
evaluates it so knowing this I can go

00:16:47,330 --> 00:16:50,180
ahead and figure out well if that

00:16:48,470 --> 00:16:54,680
condition works maybe I can provide a

00:16:50,180 --> 00:17:01,040
specific string to do something let's

00:16:54,680 --> 00:17:03,460
try to run a commander so we're at a

00:17:01,040 --> 00:17:03,460
request

00:17:09,210 --> 00:17:13,870
probably a life so we can do this

00:17:10,990 --> 00:17:16,480
together and I'm gonna go and see that

00:17:13,870 --> 00:17:20,200
everything is okay I will add a quote

00:17:16,480 --> 00:17:23,740
see that everything is okay again I'm

00:17:20,200 --> 00:17:25,210
gonna go and add this to do the whole

00:17:23,740 --> 00:17:26,470
thing and reproduce the whole bag and

00:17:25,210 --> 00:17:29,740
you know now I have a working example I

00:17:26,470 --> 00:17:31,630
can actually work with and this is where

00:17:29,740 --> 00:17:34,030
the fun begins right because we know

00:17:31,630 --> 00:17:36,660
it's an evaluation statement so it is a

00:17:34,030 --> 00:17:43,500
simple for me as doing something like

00:17:36,660 --> 00:17:43,500
sorry note and then evaluating desktop

00:17:43,980 --> 00:17:49,480
equals desktop for example it's gonna be

00:17:47,500 --> 00:17:51,070
true but now that I know that I have a

00:17:49,480 --> 00:17:53,860
way to inject data there that is not

00:17:51,070 --> 00:17:57,540
being treated in any others a safe way I

00:17:53,860 --> 00:17:57,540
can go ahead and do something like this

00:17:58,080 --> 00:18:02,620
which is trying to evaluate an

00:18:00,520 --> 00:18:05,050
expression for a place that expects a

00:18:02,620 --> 00:18:06,640
value so as I do this I don't really

00:18:05,050 --> 00:18:07,960
care about whether that's false or true

00:18:06,640 --> 00:18:09,570
I care about the fact that I was

00:18:07,960 --> 00:18:15,700
actually able to invoke a function

00:18:09,570 --> 00:18:20,710
through this evil statement so going

00:18:15,700 --> 00:18:24,610
back to a request I can do something

00:18:20,710 --> 00:18:26,440
similar and I will make this a bit

00:18:24,610 --> 00:18:28,540
bigger so you could see I was able to go

00:18:26,440 --> 00:18:30,430
ahead and put on the server side a

00:18:28,540 --> 00:18:32,530
function expression write a function

00:18:30,430 --> 00:18:35,020
invocation that actually did a console

00:18:32,530 --> 00:18:36,490
log so remove the code injection now

00:18:35,020 --> 00:18:38,500
this is just for the example right just

00:18:36,490 --> 00:18:40,300
for us to be very fast in this example

00:18:38,500 --> 00:18:42,550
in the demo but imagine what I could do

00:18:40,300 --> 00:18:44,560
here just require process child process

00:18:42,550 --> 00:18:46,390
invoke something that I want to get from

00:18:44,560 --> 00:18:49,120
your application or anything else all of

00:18:46,390 --> 00:18:50,800
this is done through dust if this page

00:18:49,120 --> 00:18:52,420
was not even authorized you know

00:18:50,800 --> 00:18:54,190
anonymous it means everyone are able to

00:18:52,420 --> 00:19:02,710
do this so it's kind of a remote code

00:18:54,190 --> 00:19:04,120
injection so we're talking about all

00:19:02,710 --> 00:19:06,790
these examples with open source

00:19:04,120 --> 00:19:08,050
libraries and and how much you know how

00:19:06,790 --> 00:19:09,880
much they affect us and what's the risk

00:19:08,050 --> 00:19:11,680
that we have in them and the thing is

00:19:09,880 --> 00:19:13,450
for attackers that's a really easy way

00:19:11,680 --> 00:19:15,160
to do it because it's easy to think

00:19:13,450 --> 00:19:16,660
about attackers and you know hackers as

00:19:15,160 --> 00:19:18,190
those with hoodies

00:19:16,660 --> 00:19:19,360
you know worrying that trying to hide

00:19:18,190 --> 00:19:21,100
the Pentagon or something else but

00:19:19,360 --> 00:19:22,720
mostly like the easy for the low-hanging

00:19:21,100 --> 00:19:24,250
fruits the easy stuff that they can do

00:19:22,720 --> 00:19:25,870
is just figure out all of those

00:19:24,250 --> 00:19:27,340
non-public vulnerabilities that you know

00:19:25,870 --> 00:19:29,470
everyone know about it's publicly known

00:19:27,340 --> 00:19:30,910
but people are really late in terms of

00:19:29,470 --> 00:19:33,100
patching and keeping up to date with

00:19:30,910 --> 00:19:35,740
them so one vulnerability that they find

00:19:33,100 --> 00:19:37,450
in an ecosystem like NPM for example

00:19:35,740 --> 00:19:39,070
will mean many victims because everyone

00:19:37,450 --> 00:19:40,600
are using open-source you know millions

00:19:39,070 --> 00:19:42,340
of downloads for its press sample our

00:19:40,600 --> 00:19:45,130
react whatever vulnerability that they

00:19:42,340 --> 00:19:46,750
find and apps act is pretty hard right

00:19:45,130 --> 00:19:48,730
that's one example of it and there's so

00:19:46,750 --> 00:19:50,940
many things that need to happen in a

00:19:48,730 --> 00:19:53,350
secure application development lifecycle

00:19:50,940 --> 00:19:55,540
just one example but what's really

00:19:53,350 --> 00:19:57,730
challenging is software delivery has

00:19:55,540 --> 00:19:59,110
sped up it is really fast everyone

00:19:57,730 --> 00:20:01,600
trying to be really mature in terms of

00:19:59,110 --> 00:20:05,020
CI CD pushing value pushing data out

00:20:01,600 --> 00:20:06,760
pushing code out etc but do we forget do

00:20:05,020 --> 00:20:08,140
we do we actually do to actually embed

00:20:06,760 --> 00:20:09,700
security testing in part of our

00:20:08,140 --> 00:20:11,470
application in what would and what we

00:20:09,700 --> 00:20:12,880
develop and what we push out do we have

00:20:11,470 --> 00:20:15,130
this confidence that everything we push

00:20:12,880 --> 00:20:16,270
out is really tested very well and does

00:20:15,130 --> 00:20:20,140
not have any kind of security

00:20:16,270 --> 00:20:22,750
vulnerabilities like this we're also

00:20:20,140 --> 00:20:24,490
outnumbered in organizations right in

00:20:22,750 --> 00:20:27,220
organizations the ratio that like

00:20:24,490 --> 00:20:28,750
Gartner report was was saying is one

00:20:27,220 --> 00:20:32,170
security person for 100 developers

00:20:28,750 --> 00:20:33,610
that's actually a good example of it

00:20:32,170 --> 00:20:36,490
because in most organization it's

00:20:33,610 --> 00:20:38,230
actually pretty worse than that how

00:20:36,490 --> 00:20:41,470
about the fact that as developers we do

00:20:38,230 --> 00:20:43,780
not really get any knowledge or any

00:20:41,470 --> 00:20:46,000
experimental experience or expertise on

00:20:43,780 --> 00:20:47,920
security for example these are the top

00:20:46,000 --> 00:20:50,110
computer science programs in the United

00:20:47,920 --> 00:20:52,960
States of America I imagine that you're

00:20:50,110 --> 00:20:56,140
able to recognize some of them I

00:20:52,960 --> 00:20:57,790
filtered at least to show all those that

00:20:56,140 --> 00:21:02,110
actually have a requirement for a

00:20:57,790 --> 00:21:04,810
software security course yep

00:21:02,110 --> 00:21:06,430
so no wonder that you know as developers

00:21:04,810 --> 00:21:08,440
we sometimes feel that we do not have

00:21:06,430 --> 00:21:10,360
that that knowledge then that gap that

00:21:08,440 --> 00:21:11,490
exists for us to build applications that

00:21:10,360 --> 00:21:14,410
are secure

00:21:11,490 --> 00:21:16,030
how how equipped do we fill in terms of

00:21:14,410 --> 00:21:18,070
not just finding but actually fixing a

00:21:16,030 --> 00:21:19,480
vulnerability actually being able to

00:21:18,070 --> 00:21:21,580
remediate it but because at the end of

00:21:19,480 --> 00:21:23,590
the day it is our responsibility and

00:21:21,580 --> 00:21:24,790
it's great that it is like that open

00:21:23,590 --> 00:21:28,390
source is awesome we just need to do it

00:21:24,790 --> 00:21:30,550
in a very good way it is not so easy to

00:21:28,390 --> 00:21:31,840
fix of vulnerability and another thing

00:21:30,550 --> 00:21:33,940
that we learned from that state of open

00:21:31,840 --> 00:21:35,980
source security report is as we looked

00:21:33,940 --> 00:21:37,570
at the data that sneak has on all of its

00:21:35,980 --> 00:21:38,830
users we just can't package manifest

00:21:37,570 --> 00:21:40,810
file so we really care just about the

00:21:38,830 --> 00:21:43,720
dependency that you're using and what we

00:21:40,810 --> 00:21:45,370
try to pull it out is how does that work

00:21:43,720 --> 00:21:46,390
in terms of different ecosystems like

00:21:45,370 --> 00:21:48,610
where do we find security

00:21:46,390 --> 00:21:51,490
vulnerabilities so for NPM for example

00:21:48,610 --> 00:21:53,230
you can see that 78% of the time we will

00:21:51,490 --> 00:21:55,450
find security vulnerabilities in

00:21:53,230 --> 00:21:57,190
transitive dependencies so even if

00:21:55,450 --> 00:21:59,230
you're like a conscious developer and

00:21:57,190 --> 00:22:01,540
very responsible and you track all the

00:21:59,230 --> 00:22:03,790
change logs for no reactive you whatever

00:22:01,540 --> 00:22:06,160
it is and you go through each code

00:22:03,790 --> 00:22:08,050
change one by one most of the time we'll

00:22:06,160 --> 00:22:10,720
find the issues in the vulnerabilities

00:22:08,050 --> 00:22:15,220
that those dependencies pull in and the

00:22:10,720 --> 00:22:16,690
problems that exist err so what if

00:22:15,220 --> 00:22:18,580
security was a bit easier right what if

00:22:16,690 --> 00:22:20,350
it was something that is actionable that

00:22:18,580 --> 00:22:23,350
is really friendly for me to interact

00:22:20,350 --> 00:22:24,910
with that I as a developer it is aligned

00:22:23,350 --> 00:22:27,040
with the way that I work it's not a

00:22:24,910 --> 00:22:29,190
security system that I need to log into

00:22:27,040 --> 00:22:31,810
and find out about all of these things

00:22:29,190 --> 00:22:34,450
what if for example the same way that

00:22:31,810 --> 00:22:36,040
you have a Travis or a circle CIO code

00:22:34,450 --> 00:22:38,620
coverage running in your in your you

00:22:36,040 --> 00:22:39,940
know pull request you would have another

00:22:38,620 --> 00:22:41,140
test and you can you can replace

00:22:39,940 --> 00:22:42,970
sneakier with anything else that you

00:22:41,140 --> 00:22:44,500
want generally but what if you had if

00:22:42,970 --> 00:22:47,080
you add that right what if a new

00:22:44,500 --> 00:22:48,730
developer was now introducing a security

00:22:47,080 --> 00:22:50,530
Vaughn a package that has security

00:22:48,730 --> 00:22:52,150
vulnerabilities whether on it or it's

00:22:50,530 --> 00:22:53,380
transitive dependency you would go ahead

00:22:52,150 --> 00:22:54,880
and fill the build because you already

00:22:53,380 --> 00:22:56,920
detected it right there you do not need

00:22:54,880 --> 00:23:00,040
to find it as you go to production and

00:22:56,920 --> 00:23:01,840
find it you know a few months later what

00:23:00,040 --> 00:23:04,450
if that security tooling was really

00:23:01,840 --> 00:23:06,100
really good in terms of not just opening

00:23:04,450 --> 00:23:07,840
a pull request for you and fixing it

00:23:06,100 --> 00:23:09,550
which is a great step and doing that but

00:23:07,840 --> 00:23:11,410
also doing that in a smart way so in

00:23:09,550 --> 00:23:13,540
terms of if the dependency had a

00:23:11,410 --> 00:23:15,340
vulnerability and then a fix in a major

00:23:13,540 --> 00:23:15,850
version it will actually try and fold

00:23:15,340 --> 00:23:17,680
the

00:23:15,850 --> 00:23:20,290
the most minor and minimal version it

00:23:17,680 --> 00:23:22,450
can to resolve the security fix so to

00:23:20,290 --> 00:23:25,480
not you know get you through the hurdle

00:23:22,450 --> 00:23:26,980
of actually taking in a major change or

00:23:25,480 --> 00:23:28,870
breaking change or future changes that

00:23:26,980 --> 00:23:31,630
you may not want to pull in with that

00:23:28,870 --> 00:23:33,760
security fix so I'm going to leave you

00:23:31,630 --> 00:23:35,770
with that notion open-source is awesome

00:23:33,760 --> 00:23:37,920
just please join it responsibly thank

00:23:35,770 --> 00:23:37,920
you

00:23:43,010 --> 00:23:47,460
you

00:23:44,210 --> 00:23:47,460

YouTube URL: https://www.youtube.com/watch?v=3H8pF6yoSgU


