Title: Mastering UIs with Finite State Machines by RubÃ©n Sospedra | JSConf Budapest 2019
Publication date: 2019-11-04
Playlist: JSConf Budapest 2019
Description: 
	https://2019.jsconfbp.com/speakers/ruben-sospedra/

Did you ever feel like monkey patching your UI component? Adding too many if/else, handling a lot of complexity or hacking several non-desired side effects. Did you ever have a problem with double-clicking an async button? Fetching multiple times the same resource in a row? Did you have problems translating UX interfaces and mock-ups into your applications scenes?

All this kind of problems can be properly fixed by applying a different point of view. An architecture based upon Mealy state machines. Also known as finite state machines or automatas. These machines are deterministic, pure and idempotents. Opening a new set of possibilities from predictable components to autogenerated tests.

Let's take a look to this new paradigm for UI components. You'll discover a better and cleaner world ;)

Ruben is a Javascript hacker, crossfiter and paleo-chef. He plays the ukelele and read about political science. Gamer and cinephile
Captions: 
	00:00:00,000 --> 00:00:08,490
[Applause]

00:00:04,190 --> 00:00:10,290
okayyyy so yeah my name is Ruben sauce

00:00:08,490 --> 00:00:13,559
better and here today to speak about

00:00:10,290 --> 00:00:15,179
fantasy machines which for those of you

00:00:13,559 --> 00:00:18,000
they've been here on Wednesday you

00:00:15,179 --> 00:00:20,250
probably been on David talk about fancy

00:00:18,000 --> 00:00:22,560
machines it is related it's not the same

00:00:20,250 --> 00:00:24,900
hopefully at the end of my talk you will

00:00:22,560 --> 00:00:27,630
have more insight and feel empowered

00:00:24,900 --> 00:00:29,929
enough to try for your own before

00:00:27,630 --> 00:00:32,610
starting you see we have this picture

00:00:29,929 --> 00:00:35,460
and at the end I'm gonna ask you if any

00:00:32,610 --> 00:00:36,690
on the audience know what it is don't

00:00:35,460 --> 00:00:38,309
answer now it's gonna be at the end

00:00:36,690 --> 00:00:41,850
because the talk is going to give you

00:00:38,309 --> 00:00:43,379
some clues about it I'm a JavaScript

00:00:41,850 --> 00:00:45,149
hacker I'm working as an independent

00:00:43,379 --> 00:00:47,730
contractor so if you need something just

00:00:45,149 --> 00:00:50,520
pick me out and I love capybaras is

00:00:47,730 --> 00:00:52,680
majestic and excellent friendly shaped

00:00:50,520 --> 00:00:54,600
animal if you don't know about him just

00:00:52,680 --> 00:00:56,129
please check out I always find someone

00:00:54,600 --> 00:00:58,710
in the audience that agree with me with

00:00:56,129 --> 00:01:01,469
it animal is the biggest rodent in the

00:00:58,710 --> 00:01:04,799
world and in Venezuela they eat eat it

00:01:01,469 --> 00:01:06,210
and another thing yeah another thing is

00:01:04,799 --> 00:01:07,530
that I just want to share with you this

00:01:06,210 --> 00:01:09,689
special moment because you see this

00:01:07,530 --> 00:01:11,430
t-shirt this t-shirt is from the 2015

00:01:09,689 --> 00:01:14,130
edition of the Jesus come for the base

00:01:11,430 --> 00:01:15,659
it was my first conference ever also my

00:01:14,130 --> 00:01:17,970
first business travel outside of my

00:01:15,659 --> 00:01:20,460
country and I remember being there it

00:01:17,970 --> 00:01:24,390
was super exciting it was when I was

00:01:20,460 --> 00:01:26,009
like starting ending being a junior

00:01:24,390 --> 00:01:27,930
developer and it was mind-blowing

00:01:26,009 --> 00:01:31,799
experience and I remember being there

00:01:27,930 --> 00:01:34,350
I'm feeling like man if ever I need I

00:01:31,799 --> 00:01:35,850
have the sense to give back something to

00:01:34,350 --> 00:01:38,130
a community I went to speak in that

00:01:35,850 --> 00:01:43,490
conference so I'm here four years later

00:01:38,130 --> 00:01:45,750
dreama chief thank you that's it no so

00:01:43,490 --> 00:01:47,100
thank you the organizer to the

00:01:45,750 --> 00:01:49,619
organization for that

00:01:47,100 --> 00:01:52,740
that's definitely well anyway going to a

00:01:49,619 --> 00:01:56,460
topic actually David he was hearing

00:01:52,740 --> 00:01:58,590
Wednesday he said this develop user

00:01:56,460 --> 00:02:02,340
interfaces is not easy in the reactor

00:01:58,590 --> 00:02:04,920
alley in 2017 and it was I think this is

00:02:02,340 --> 00:02:07,020
was this this thought of him was like

00:02:04,920 --> 00:02:09,300
kind of the beginning or the find steam

00:02:07,020 --> 00:02:11,280
machines coming back to the UI scene and

00:02:09,300 --> 00:02:12,890
fronting and so on and there is

00:02:11,280 --> 00:02:16,580
explanation for that first

00:02:12,890 --> 00:02:18,950
machines is a concept that started like

00:02:16,580 --> 00:02:23,120
in the late 60s so it's super all

00:02:18,950 --> 00:02:24,800
actually probably you hear about finding

00:02:23,120 --> 00:02:26,480
machines when you were studying software

00:02:24,800 --> 00:02:29,030
engineer in the university or something

00:02:26,480 --> 00:02:30,860
like that it's very useful if you want

00:02:29,030 --> 00:02:33,320
to reason about logics and they kind of

00:02:30,860 --> 00:02:36,290
stuff but probably you never use it in

00:02:33,320 --> 00:02:39,260
production like never even I don't know

00:02:36,290 --> 00:02:40,970
in your hobby or pet project and that's

00:02:39,260 --> 00:02:42,739
basically because for so long we were

00:02:40,970 --> 00:02:46,459
doing front-ends that they were let's

00:02:42,739 --> 00:02:49,220
call it simple right it was a static

00:02:46,459 --> 00:02:51,980
HTML with some CSS or then we have I

00:02:49,220 --> 00:02:54,500
don't know PHP with tweaked rendering

00:02:51,980 --> 00:02:56,090
engine templates whatever you get it you

00:02:54,500 --> 00:02:59,150
know what it means speaking about but

00:02:56,090 --> 00:03:01,280
now we're doing very complex foreign

00:02:59,150 --> 00:03:03,170
applications and these run applications

00:03:01,280 --> 00:03:06,890
as you know for example yesterday's

00:03:03,170 --> 00:03:09,019
explained soorma and Jake well you have

00:03:06,890 --> 00:03:10,580
web packs and roll ups and plugins and

00:03:09,019 --> 00:03:12,650
configurations and performance and

00:03:10,580 --> 00:03:15,200
latencies and different assets and

00:03:12,650 --> 00:03:17,450
caching is super complex we're reaching

00:03:15,200 --> 00:03:19,850
upon a point where we're moving a lot of

00:03:17,450 --> 00:03:22,040
business logics and responsibilities to

00:03:19,850 --> 00:03:23,980
a foreign applications and what does the

00:03:22,040 --> 00:03:26,959
mean is that we're generating a lot of

00:03:23,980 --> 00:03:31,760
box rest conditions and the sorry side

00:03:26,959 --> 00:03:34,180
effects and so on and we find that our

00:03:31,760 --> 00:03:37,400
UI it's maybe are not perfect our using

00:03:34,180 --> 00:03:41,420
our users follow our instructions

00:03:37,400 --> 00:03:46,040
blindly and this generates even even

00:03:41,420 --> 00:03:47,630
more VAX we have side effects and rest

00:03:46,040 --> 00:03:50,510
condition for example this is a race

00:03:47,630 --> 00:03:52,579
condition against the disk like do you

00:03:50,510 --> 00:03:55,040
think if I press cancel button this is

00:03:52,579 --> 00:03:57,739
going to stop no it won't stop never

00:03:55,040 --> 00:04:00,290
like this is the cancel button is just

00:03:57,739 --> 00:04:02,299
like a psychology thingy so you can

00:04:00,290 --> 00:04:05,510
smash it and release your anger it's

00:04:02,299 --> 00:04:07,280
only for that oh that one which is also

00:04:05,510 --> 00:04:09,320
I hate that one like personally I

00:04:07,280 --> 00:04:10,880
 hate this one this is also like

00:04:09,320 --> 00:04:13,730
when you want to share something on an

00:04:10,880 --> 00:04:16,220
Android device and then it suddenly pops

00:04:13,730 --> 00:04:18,380
up your your recent chats and then you

00:04:16,220 --> 00:04:21,709
send a link to someone else I just hated

00:04:18,380 --> 00:04:24,590
this is also a race condition in this

00:04:21,709 --> 00:04:26,270
case against the network so the problem

00:04:24,590 --> 00:04:27,680
is that we're doing the fancy fur

00:04:26,270 --> 00:04:29,270
this is the first concert that we need

00:04:27,680 --> 00:04:31,460
to understand defensive programming is

00:04:29,270 --> 00:04:33,410
basically when what we're calling

00:04:31,460 --> 00:04:35,720
something we find an issue and then we

00:04:33,410 --> 00:04:36,050
straightaway try to fix that issue we've

00:04:35,720 --> 00:04:38,210
done

00:04:36,050 --> 00:04:40,370
as David said we don't plan ahead so

00:04:38,210 --> 00:04:44,810
let's see an example that probably all

00:04:40,370 --> 00:04:46,759
of you have experienced at some point in

00:04:44,810 --> 00:04:49,819
the past we're making a call

00:04:46,759 --> 00:04:52,130
this is react but don't don't really

00:04:49,819 --> 00:04:54,770
follow the the code it's just to

00:04:52,130 --> 00:04:57,680
exemplify so we're making a call to fix

00:04:54,770 --> 00:05:00,860
the user and then we render the name and

00:04:57,680 --> 00:05:03,440
then we also want at some point to have

00:05:00,860 --> 00:05:05,780
a lull instead right because I mean if I

00:05:03,440 --> 00:05:07,580
don't know network is slow we don't when

00:05:05,780 --> 00:05:10,759
the user to stay there turning on a

00:05:07,580 --> 00:05:13,789
blank screen and then came out so they

00:05:10,759 --> 00:05:15,770
Pio and say it's a but something can be

00:05:13,789 --> 00:05:17,240
read we need some error state and

00:05:15,770 --> 00:05:20,210
explain the user what happens and

00:05:17,240 --> 00:05:22,400
recover and make against the call so we

00:05:20,210 --> 00:05:24,800
start having these conditionals that

00:05:22,400 --> 00:05:27,680
render different things also different

00:05:24,800 --> 00:05:29,599
catches depending on what happens it's a

00:05:27,680 --> 00:05:32,240
long request so maybe we need to cancel

00:05:29,599 --> 00:05:34,759
at some points it has to be possible

00:05:32,240 --> 00:05:37,130
that you cancel so if you look closely

00:05:34,759 --> 00:05:41,560
while we're saying in this code like if

00:05:37,130 --> 00:05:46,580
you pay enough attention it's a shape

00:05:41,560 --> 00:05:48,500
okay and why why is a so this is

00:05:46,580 --> 00:05:50,449
this is really important because usually

00:05:48,500 --> 00:05:52,610
we start thinking about normalcy

00:05:50,449 --> 00:05:55,639
architecture if with you excitement on

00:05:52,610 --> 00:05:58,789
architecture this is not this won't

00:05:55,639 --> 00:06:02,479
happen or DDD or whatever is insourcing

00:05:58,789 --> 00:06:05,449
no no it's neither the technology like

00:06:02,479 --> 00:06:08,659
if you just react or angular or bu or

00:06:05,449 --> 00:06:11,030
circular even change technology is not

00:06:08,659 --> 00:06:13,340
related to that is neither the patterns

00:06:11,030 --> 00:06:15,919
I don't know if you are doing

00:06:13,340 --> 00:06:18,530
programming or not your code could be

00:06:15,919 --> 00:06:20,509
easier to understand or maintain but you

00:06:18,530 --> 00:06:24,650
are not addressing this kind of issues

00:06:20,509 --> 00:06:29,050
and actually that's why you are feeling

00:06:24,650 --> 00:06:31,370
that situation over and over for always

00:06:29,050 --> 00:06:33,469
right it doesn't matter the project you

00:06:31,370 --> 00:06:35,330
are the company you are working with or

00:06:33,469 --> 00:06:38,599
the team you are working with you are

00:06:35,330 --> 00:06:39,919
running to the situation every time the

00:06:38,599 --> 00:06:41,870
problem is the approach

00:06:39,919 --> 00:06:44,750
defensive programming is also known as

00:06:41,870 --> 00:06:47,620
bottom-up approach which is basically

00:06:44,750 --> 00:06:51,319
that we're facing one problem at a time

00:06:47,620 --> 00:06:54,800
every time the problem like reaches

00:06:51,319 --> 00:06:56,360
right so when we are doing bottom-up

00:06:54,800 --> 00:06:58,280
approaches is difficult for us to

00:06:56,360 --> 00:06:59,659
understand at the end what's the code is

00:06:58,280 --> 00:07:03,229
difficult to maintain is difficult to

00:06:59,659 --> 00:07:05,000
make changes there is out of its cases

00:07:03,229 --> 00:07:06,949
that we are not considering there is

00:07:05,000 --> 00:07:09,590
sort of mutation that we are starting to

00:07:06,949 --> 00:07:11,569
do it's really easy I'm prone to start

00:07:09,590 --> 00:07:14,779
doing some hacks around the code which

00:07:11,569 --> 00:07:16,430
is no good it's also difficult to test

00:07:14,779 --> 00:07:18,229
of course if you don't understand

00:07:16,430 --> 00:07:22,279
something it's going to be difficult to

00:07:18,229 --> 00:07:23,930
test also our code is not going to be

00:07:22,279 --> 00:07:27,469
pure most of the times because with

00:07:23,930 --> 00:07:29,900
those mutations well and we have these

00:07:27,469 --> 00:07:32,000
complex setups for testing I have seen

00:07:29,900 --> 00:07:33,979
projects small projects with ensign

00:07:32,000 --> 00:07:35,870
configurations longer than the actual

00:07:33,979 --> 00:07:38,389
project and I'm not joking this is

00:07:35,870 --> 00:07:40,189
something I've seen which is obviously a

00:07:38,389 --> 00:07:43,940
cough the smell is difficult in Haines

00:07:40,189 --> 00:07:45,949
obviously if you can test something it's

00:07:43,940 --> 00:07:48,469
also like dangerous thing hence you

00:07:45,949 --> 00:07:49,819
don't know if the testing is working it

00:07:48,469 --> 00:07:52,550
generates out of bugs and gonna make

00:07:49,819 --> 00:07:55,639
this I mean like a lot a lot of facts

00:07:52,550 --> 00:07:57,440
right we don't want a spaghetti code in

00:07:55,639 --> 00:08:00,490
case you don't notice we have a lot of

00:07:57,440 --> 00:08:02,870
posters around this venue that say so

00:08:00,490 --> 00:08:04,789
and refactoring is also going to be very

00:08:02,870 --> 00:08:07,940
difficult because we don't know what

00:08:04,789 --> 00:08:09,259
exactly we have to change so at the end

00:08:07,940 --> 00:08:11,509
you are gonna feel like this pooch

00:08:09,259 --> 00:08:13,339
reminder that you are just fixing one

00:08:11,509 --> 00:08:16,330
fire after the other and you're more

00:08:13,339 --> 00:08:18,939
like a fireman rather than a developer

00:08:16,330 --> 00:08:21,319
so what's the solution

00:08:18,939 --> 00:08:24,500
so the top-down approach which actually

00:08:21,319 --> 00:08:26,569
makes a lot of sense um the top-down

00:08:24,500 --> 00:08:29,750
approach is basically that you have this

00:08:26,569 --> 00:08:32,449
abstract concept and bu of your product

00:08:29,750 --> 00:08:36,169
and every time you have a problem you go

00:08:32,449 --> 00:08:38,870
back to that abstract definition and

00:08:36,169 --> 00:08:42,099
then analyze it from then and later on

00:08:38,870 --> 00:08:46,459
you implement it you stop reacting

00:08:42,099 --> 00:08:47,899
that's a pun and and basically how does

00:08:46,459 --> 00:08:49,430
this looks because so far everything is

00:08:47,899 --> 00:08:51,670
super abstract it looks like that it's a

00:08:49,430 --> 00:08:53,640
user flow or a diagram or whatever so

00:08:51,670 --> 00:08:57,150
this is a

00:08:53,640 --> 00:08:59,130
seen on a blog or whatever what you have

00:08:57,150 --> 00:09:01,530
like different states and transitions

00:08:59,130 --> 00:09:03,990
and you can be in the landing page and

00:09:01,530 --> 00:09:05,430
then you move to block but please and

00:09:03,990 --> 00:09:07,320
then from that you can click go to a

00:09:05,430 --> 00:09:09,060
blog whatever and then for example is

00:09:07,320 --> 00:09:11,880
interesting that the definition here

00:09:09,060 --> 00:09:13,830
that at the very right have the contact

00:09:11,880 --> 00:09:15,390
form and you see two are responding the

00:09:13,830 --> 00:09:18,360
contact form that means that there is

00:09:15,390 --> 00:09:21,320
only two ways to reach that page this is

00:09:18,360 --> 00:09:24,810
what we are doing when we reason about

00:09:21,320 --> 00:09:29,610
with a top-down approach from the

00:09:24,810 --> 00:09:32,520
abstract point of view so if this is so

00:09:29,610 --> 00:09:34,860
this is important because this is a

00:09:32,520 --> 00:09:37,380
common language for humans we can

00:09:34,860 --> 00:09:39,840
understand this as a developer's product

00:09:37,380 --> 00:09:41,730
owners can understand these designers

00:09:39,840 --> 00:09:43,830
can understand this our stakeholders can

00:09:41,730 --> 00:09:45,780
understand this so if this is a human

00:09:43,830 --> 00:09:48,210
language and we as developers basically

00:09:45,780 --> 00:09:50,460
what we do is translate human language

00:09:48,210 --> 00:09:52,460
the technical language of any kind then

00:09:50,460 --> 00:09:55,170
find some machines technical language

00:09:52,460 --> 00:09:58,350
first the machine is basically the

00:09:55,170 --> 00:10:01,080
easiest and more logic implementation of

00:09:58,350 --> 00:10:03,420
his user flows so what defines the

00:10:01,080 --> 00:10:05,130
machine super easy it's deterministic

00:10:03,420 --> 00:10:06,750
finds a machine or accept 30 minutes

00:10:05,130 --> 00:10:10,230
find the state machine is akin to pull

00:10:06,750 --> 00:10:13,080
not really this was me the first time as

00:10:10,230 --> 00:10:14,400
the definition I first sometimes I read

00:10:13,080 --> 00:10:16,950
some things and he could understand

00:10:14,400 --> 00:10:20,190
anything so I asked one of my friends

00:10:16,950 --> 00:10:23,460
who's math scientist to give me a hand

00:10:20,190 --> 00:10:25,050
and basically I think it's easier if we

00:10:23,460 --> 00:10:26,730
reason about in a language though I

00:10:25,050 --> 00:10:29,280
guess we are understanding here which is

00:10:26,730 --> 00:10:30,990
JavaScript so Sigma is the input

00:10:29,280 --> 00:10:33,150
alphabet is basically a dictionary it

00:10:30,990 --> 00:10:37,220
could be representing like that it's an

00:10:33,150 --> 00:10:42,270
object with keys we had seen this before

00:10:37,220 --> 00:10:43,890
the s is early stage the this is super

00:10:42,270 --> 00:10:45,660
nos that you can represent that like

00:10:43,890 --> 00:10:48,270
whatever you want in this case is an

00:10:45,660 --> 00:10:50,130
object where the keys matches the

00:10:48,270 --> 00:10:51,990
dictionary and then inside you have an

00:10:50,130 --> 00:10:53,850
object with whatever you want it doesn't

00:10:51,990 --> 00:10:56,370
matter what's inside is your state

00:10:53,850 --> 00:10:58,230
definition so this will depend on your

00:10:56,370 --> 00:11:01,490
business logics and your project

00:10:58,230 --> 00:11:04,680
whatsoever S sub 0 is the initial state

00:11:01,490 --> 00:11:06,460
okay easy the only important thing is

00:11:04,680 --> 00:11:09,430
that it has to be part of the States

00:11:06,460 --> 00:11:10,900
obviously and then Delta is a transition

00:11:09,430 --> 00:11:13,030
is how you move from one state to the

00:11:10,900 --> 00:11:16,960
other in this example for example the

00:11:13,030 --> 00:11:19,780
state is defined which means that one

00:11:16,960 --> 00:11:21,460
state only half a transition but another

00:11:19,780 --> 00:11:23,350
state there is no multiple states

00:11:21,460 --> 00:11:25,840
otherwise we will be doing something

00:11:23,350 --> 00:11:28,120
like machine from the current state I

00:11:25,840 --> 00:11:30,580
give you an action and then you give me

00:11:28,120 --> 00:11:32,740
back what's going to be the next day and

00:11:30,580 --> 00:11:36,670
there is a fine state machine that's it

00:11:32,740 --> 00:11:41,350
so the thing on the top is our like very

00:11:36,670 --> 00:11:43,240
easy simple short fine state machine

00:11:41,350 --> 00:11:45,190
this will be a turnstile like in the

00:11:43,240 --> 00:11:46,500
underground right you know we have this

00:11:45,190 --> 00:11:48,580
machine that moves from lock to unlock

00:11:46,500 --> 00:11:52,660
initially it's locked because we don't

00:11:48,580 --> 00:11:54,310
want the earthly word go for free and

00:11:52,660 --> 00:11:55,960
then we have the transition to move from

00:11:54,310 --> 00:11:58,210
one state to the other this is in these

00:11:55,960 --> 00:12:00,130
cases in JavaScript it's an object in

00:11:58,210 --> 00:12:02,650
Tepes clip could be a rapport or so in

00:12:00,130 --> 00:12:06,580
c-sharp or in Python it's it's called a

00:12:02,650 --> 00:12:07,750
tuple and in PHP in its be the call for

00:12:06,580 --> 00:12:11,800
help

00:12:07,750 --> 00:12:13,840
so way easier to reason about okay so so

00:12:11,800 --> 00:12:16,480
far we understand more or less the math

00:12:13,840 --> 00:12:19,240
concepts how does this looks in software

00:12:16,480 --> 00:12:22,060
engineering so let's see the anatomy of

00:12:19,240 --> 00:12:24,190
our example of a fetch request

00:12:22,060 --> 00:12:25,990
so usually you represent the ladies

00:12:24,190 --> 00:12:28,690
fancy machines you have initial state

00:12:25,990 --> 00:12:31,180
most of the times it's either my friends

00:12:28,690 --> 00:12:34,440
machine is doing nothing I have

00:12:31,180 --> 00:12:36,790
different states so we so far we see as

00:12:34,440 --> 00:12:40,600
subservient Ischl state and all these

00:12:36,790 --> 00:12:42,550
states yes we have some events or

00:12:40,600 --> 00:12:44,650
actions to move around the different

00:12:42,550 --> 00:12:47,380
states and then we have the two stations

00:12:44,650 --> 00:12:49,600
right you can be a needle after the

00:12:47,380 --> 00:12:51,460
action fetch will move to fetching and

00:12:49,600 --> 00:12:53,110
then there's two different actions and

00:12:51,460 --> 00:12:55,000
may happen and we end up in two

00:12:53,110 --> 00:12:58,480
different states this is something that

00:12:55,000 --> 00:13:00,430
can be like improve and it could be like

00:12:58,480 --> 00:13:03,250
super complex and then you move to state

00:13:00,430 --> 00:13:04,690
charts words and the kind of stuff that

00:13:03,250 --> 00:13:06,820
we are not going to look at that in this

00:13:04,690 --> 00:13:10,630
topic because I only have 25 minutes but

00:13:06,820 --> 00:13:12,610
definitely check it out later on that's

00:13:10,630 --> 00:13:14,770
it we know how are the mathematical

00:13:12,610 --> 00:13:16,930
definitions on the origin we know how

00:13:14,770 --> 00:13:19,010
this looks like for us so for engineers

00:13:16,930 --> 00:13:20,990
the only thing that we are missing

00:13:19,010 --> 00:13:23,440
are the three key features of feinstein

00:13:20,990 --> 00:13:25,580
machine first of all is deterministic

00:13:23,440 --> 00:13:28,100
which basically means that it's

00:13:25,580 --> 00:13:29,540
predictable and this is one of the most

00:13:28,100 --> 00:13:32,810
important features of the finite state

00:13:29,540 --> 00:13:35,690
machines and what gives you the benefit

00:13:32,810 --> 00:13:38,240
of being bug free this basically means

00:13:35,690 --> 00:13:41,450
that even the current state and an

00:13:38,240 --> 00:13:43,370
action I can predict what's going to be

00:13:41,450 --> 00:13:47,180
the next state and this is super

00:13:43,370 --> 00:13:49,340
powerful because you won't find rabbit

00:13:47,180 --> 00:13:50,900
holes or dead ends in your products

00:13:49,340 --> 00:13:54,140
anymore since everything is going to be

00:13:50,900 --> 00:13:56,860
defined is that how to get there is the

00:13:54,140 --> 00:13:59,420
what's coming next is you can put your

00:13:56,860 --> 00:14:02,330
hoops not as in react loops just like

00:13:59,420 --> 00:14:04,040
normal hoops and actions and data values

00:14:02,330 --> 00:14:05,290
everything goes because it's

00:14:04,040 --> 00:14:07,850
deterministic

00:14:05,290 --> 00:14:11,390
it's an automata which means it's a

00:14:07,850 --> 00:14:13,610
predetermined sequence so another way of

00:14:11,390 --> 00:14:16,190
written about this always happens in the

00:14:13,610 --> 00:14:18,110
same single way always acts in the same

00:14:16,190 --> 00:14:20,060
way let's say for example that the

00:14:18,110 --> 00:14:21,890
easiest example is a semaphore right in

00:14:20,060 --> 00:14:24,290
like in the streets you have this to the

00:14:21,890 --> 00:14:26,570
right for the cars and pedestrians it

00:14:24,290 --> 00:14:29,180
goes from red to green from green to

00:14:26,570 --> 00:14:31,700
yellow and then integrate I think and we

00:14:29,180 --> 00:14:34,550
want this to be always in that way we

00:14:31,700 --> 00:14:36,110
want this to be an isolated system not

00:14:34,550 --> 00:14:38,030
depending anything else city lights

00:14:36,110 --> 00:14:40,610
don't depend usually on the cars or

00:14:38,030 --> 00:14:43,220
pedestrians or whatsoever and we want

00:14:40,610 --> 00:14:45,560
this to work always in the same way

00:14:43,220 --> 00:14:47,320
because otherwise people will die this

00:14:45,560 --> 00:14:51,610
is bad we don't want people that

00:14:47,320 --> 00:14:53,840
basically and finally it's fine it and

00:14:51,610 --> 00:14:56,120
maybe it's not the most important thing

00:14:53,840 --> 00:14:57,440
is actually pretty obvious but this is

00:14:56,120 --> 00:15:00,500
important because we also have to

00:14:57,440 --> 00:15:02,120
infinity machines which are completely

00:15:00,500 --> 00:15:04,910
different and it doesn't it's a

00:15:02,120 --> 00:15:07,280
different topic but this is what makes

00:15:04,910 --> 00:15:10,280
possible that the finest the machines

00:15:07,280 --> 00:15:12,050
are this common language between non

00:15:10,280 --> 00:15:14,360
technical and technical people because

00:15:12,050 --> 00:15:15,490
we can do user flows and everything else

00:15:14,360 --> 00:15:18,560
that we saw before

00:15:15,490 --> 00:15:20,210
so basically science the machine is a

00:15:18,560 --> 00:15:22,190
pure assistant I can only be in one of a

00:15:20,210 --> 00:15:23,750
set of predefined stage this is me right

00:15:22,190 --> 00:15:25,580
now actually it's me 10 months ago

00:15:23,750 --> 00:15:30,380
because that was the first time I said

00:15:25,580 --> 00:15:32,510
but it works there's all types of things

00:15:30,380 --> 00:15:34,970
I see a lot of

00:15:32,510 --> 00:15:36,019
poker faces but it's fine because they

00:15:34,970 --> 00:15:39,199
think I'm going to be the first speaker

00:15:36,019 --> 00:15:42,649
doing some demo because I believe I'd

00:15:39,199 --> 00:15:49,279
like to live in danger so basically you

00:15:42,649 --> 00:15:50,959
can see my demo now yes so this is the

00:15:49,279 --> 00:15:52,399
application is very simple it's this

00:15:50,959 --> 00:15:54,709
example that I show you before the

00:15:52,399 --> 00:15:57,829
fetching things we fetch for users and

00:15:54,709 --> 00:16:00,380
then we're under the name right and now

00:15:57,829 --> 00:16:02,120
it's not working which is important I'm

00:16:00,380 --> 00:16:04,070
gonna spell you why but you can see that

00:16:02,120 --> 00:16:06,230
it start with the state IDO when they

00:16:04,070 --> 00:16:07,820
want to fetch something you moves to

00:16:06,230 --> 00:16:13,070
fetching and then you start searching

00:16:07,820 --> 00:16:16,490
and for example the fetching state

00:16:13,070 --> 00:16:20,240
doesn't have an action for fetch right

00:16:16,490 --> 00:16:23,240
so this is reflected in the UI that you

00:16:20,240 --> 00:16:24,740
cannot press the button again and this

00:16:23,240 --> 00:16:29,360
is when you start seeing the benefits

00:16:24,740 --> 00:16:32,959
and the back free feature of the file is

00:16:29,360 --> 00:16:35,810
a machine from that point if you want to

00:16:32,959 --> 00:16:38,810
know more move to the David talk of

00:16:35,810 --> 00:16:39,230
honor of Wednesday because his was about

00:16:38,810 --> 00:16:43,899
it

00:16:39,230 --> 00:16:43,899
and how this does how this looks

00:16:45,850 --> 00:16:55,250
can all you read it like in the end I

00:16:49,990 --> 00:17:00,970
see positive feedback oh so basically

00:16:55,250 --> 00:17:03,920
our machine is this thing here that's it

00:17:00,970 --> 00:17:05,569
it's a simple JavaScript object as I

00:17:03,920 --> 00:17:08,240
told you there is nothing else in this

00:17:05,569 --> 00:17:08,839
case I'm not using any library or

00:17:08,240 --> 00:17:10,520
nothing like that

00:17:08,839 --> 00:17:13,280
I'm gonna share with you the code later

00:17:10,520 --> 00:17:15,169
on so you can hide it around but I

00:17:13,280 --> 00:17:17,600
wanted to implement something like very

00:17:15,169 --> 00:17:20,270
nice and simple just using vanilla

00:17:17,600 --> 00:17:22,040
JavaScript and react for rendering so

00:17:20,270 --> 00:17:24,530
you can get all the concepts and don't

00:17:22,040 --> 00:17:26,150
get viruses but any library but this

00:17:24,530 --> 00:17:27,709
probably is something that I won't use

00:17:26,150 --> 00:17:29,900
for production applications but the

00:17:27,709 --> 00:17:31,760
concept of the machine being something

00:17:29,900 --> 00:17:34,549
completely isolated and independent is

00:17:31,760 --> 00:17:37,490
important so my machine has an initial

00:17:34,549 --> 00:17:40,640
state has some states if you are in ego

00:17:37,490 --> 00:17:44,059
you can move to fetching you get all all

00:17:40,640 --> 00:17:45,250
all the things and then here's the

00:17:44,059 --> 00:17:46,780
rendering right

00:17:45,250 --> 00:17:49,750
I have a normal reactor plication

00:17:46,780 --> 00:17:51,340
there's the thing as my main my takes

00:17:49,750 --> 00:17:53,110
render from machine this is what the

00:17:51,340 --> 00:17:55,419
title like but bear with me it works and

00:17:53,110 --> 00:17:56,380
I've render different components

00:17:55,419 --> 00:17:58,210
depending on the stage you are

00:17:56,380 --> 00:17:59,770
everything is pretty obvious actually

00:17:58,210 --> 00:18:02,049
it's super simple right

00:17:59,770 --> 00:18:04,510
why this doesn't work in because we're

00:18:02,049 --> 00:18:07,299
still missing one concept which is which

00:18:04,510 --> 00:18:12,280
are the Commons the Commons is a thing

00:18:07,299 --> 00:18:15,429
or concept of work to connect your is

00:18:12,280 --> 00:18:16,990
like the look for you finds the machine

00:18:15,429 --> 00:18:18,520
like you have to defines the machine

00:18:16,990 --> 00:18:21,100
which contains your transition business

00:18:18,520 --> 00:18:22,929
logics and so on and so forth maybe your

00:18:21,100 --> 00:18:24,909
data whatever and then you want to plug

00:18:22,929 --> 00:18:28,240
this to something like for example food

00:18:24,909 --> 00:18:29,890
react so you can do whatever you want

00:18:28,240 --> 00:18:32,710
with your friends the machine otherwise

00:18:29,890 --> 00:18:35,049
is just a bunch of declarations the

00:18:32,710 --> 00:18:38,230
commands is this thing that connects you

00:18:35,049 --> 00:18:41,650
frenched the machine with the for

00:18:38,230 --> 00:18:43,480
example the rendering service and it

00:18:41,650 --> 00:18:45,429
also the wondered resistor the side

00:18:43,480 --> 00:18:47,770
effects so the side effects is the

00:18:45,429 --> 00:18:49,059
actually the the most important thing

00:18:47,770 --> 00:18:51,309
and the most complex things to change

00:18:49,059 --> 00:18:53,470
the machines because you probably have

00:18:51,309 --> 00:18:54,789
this semaphore as we mentioned before

00:18:53,470 --> 00:18:57,010
but the semaphore is doing nothing

00:18:54,789 --> 00:18:59,020
that's why it's so easy but actually now

00:18:57,010 --> 00:19:00,460
we have an application that I defined

00:18:59,020 --> 00:19:02,260
that they want to move to wheedle to

00:19:00,460 --> 00:19:04,960
fetching and then to success or failure

00:19:02,260 --> 00:19:07,120
but they want to do something when this

00:19:04,960 --> 00:19:08,470
is doing fetching in this case it wants

00:19:07,120 --> 00:19:11,260
to fetch the user this is how you

00:19:08,470 --> 00:19:13,330
connect you finds the machine when the

00:19:11,260 --> 00:19:17,020
action is on fetching what's the action

00:19:13,330 --> 00:19:19,049
or wait is this action we're tweaking

00:19:17,020 --> 00:19:21,220
the action here so it's in my definition

00:19:19,049 --> 00:19:24,630
that I say when you're in the state

00:19:21,220 --> 00:19:27,159
fetching trigger the action fetching

00:19:24,630 --> 00:19:30,520
difficult aiming and in here I'm

00:19:27,159 --> 00:19:33,970
registering okay so in this case when

00:19:30,520 --> 00:19:36,370
you listen to the fetching action do

00:19:33,970 --> 00:19:38,289
this side effect and if you notice we

00:19:36,370 --> 00:19:40,630
are fetching and then we are also doing

00:19:38,289 --> 00:19:45,130
the transition here to move to the next

00:19:40,630 --> 00:19:48,600
one okay this is this is how you connect

00:19:45,130 --> 00:19:51,280
the parts so if we go back to the demo

00:19:48,600 --> 00:19:54,789
hopefully no one no one is breaking my

00:19:51,280 --> 00:19:57,490
Wi-Fi yeah it works cool

00:19:54,789 --> 00:19:58,669
so please see and the cool part of these

00:19:57,490 --> 00:20:00,440
is that you

00:19:58,669 --> 00:20:02,330
cannot break it it doesn't matter if you

00:20:00,440 --> 00:20:04,669
click licked like a madman here you

00:20:02,330 --> 00:20:06,889
cannot break it because every state has

00:20:04,669 --> 00:20:09,320
its own actions and different

00:20:06,889 --> 00:20:18,230
propagations and so on so hopefully it's

00:20:09,320 --> 00:20:20,299
clear what we see now yes the commands

00:20:18,230 --> 00:20:21,739
which are the side effects manager which

00:20:20,299 --> 00:20:24,529
is kind of the most important part and

00:20:21,739 --> 00:20:26,869
actually if you feel like you like what

00:20:24,529 --> 00:20:28,909
I'm telling you today and you go outside

00:20:26,869 --> 00:20:30,649
to the while and look for some libraries

00:20:28,909 --> 00:20:32,239
you will notice that most of the

00:20:30,649 --> 00:20:34,519
libraries basically focus on that part

00:20:32,239 --> 00:20:37,039
because it's the important one so well

00:20:34,519 --> 00:20:38,720
I'm just sorry that's that's like that's

00:20:37,039 --> 00:20:41,149
important thing what's the cool thing

00:20:38,720 --> 00:20:43,220
that we saw so far is that we don't have

00:20:41,149 --> 00:20:44,749
conditions remember our example and your

00:20:43,220 --> 00:20:46,909
example in the render for example we

00:20:44,749 --> 00:20:50,090
have this if the state is earlier than

00:20:46,909 --> 00:20:54,139
rendered these otherwise vendor that if

00:20:50,090 --> 00:20:56,570
I'm in a state fetching and you press

00:20:54,139 --> 00:20:58,429
cancel then change the state and go back

00:20:56,570 --> 00:21:00,379
those are all the conditions that will

00:20:58,429 --> 00:21:01,700
generate bugs in your application but

00:21:00,379 --> 00:21:03,889
when you're working with fancy machines

00:21:01,700 --> 00:21:06,379
you do not have conditions are old what

00:21:03,889 --> 00:21:08,210
we have is the for example in my

00:21:06,379 --> 00:21:11,179
implementation is a switch case which

00:21:08,210 --> 00:21:14,539
are not on well it's conditional that is

00:21:11,179 --> 00:21:16,159
not I don't remember the name in flicks

00:21:14,539 --> 00:21:17,899
operator I think it's an it wherever you

00:21:16,159 --> 00:21:20,149
get it will have the conditions like

00:21:17,899 --> 00:21:22,909
usually like an even an LS and depending

00:21:20,149 --> 00:21:24,649
on that do so Yallah Yallah Yallah so

00:21:22,909 --> 00:21:26,179
you can have freeze conditions also

00:21:24,649 --> 00:21:28,009
remember the first examples and the face

00:21:26,179 --> 00:21:31,249
the first gifts you don't run into the

00:21:28,009 --> 00:21:32,989
kind of issues let's see also what we

00:21:31,249 --> 00:21:36,769
have if you have a find a steam machine

00:21:32,989 --> 00:21:41,210
like this one it's a bit clumsy to move

00:21:36,769 --> 00:21:44,419
little silos my cursor now here it is so

00:21:41,210 --> 00:21:48,109
what we have also see the rendering part

00:21:44,419 --> 00:21:50,779
see thus those components right loading

00:21:48,109 --> 00:21:54,139
user error main text everything and

00:21:50,779 --> 00:21:56,239
getting them from here and this

00:21:54,139 --> 00:22:00,429
component is imported from components

00:21:56,239 --> 00:22:02,690
and is that file look at that because

00:22:00,429 --> 00:22:04,639
basically here what we're doing is I'm

00:22:02,690 --> 00:22:06,769
in an environment called web this is

00:22:04,639 --> 00:22:09,320
just an example but I'm an environment

00:22:06,769 --> 00:22:12,050
called web so give me my web components

00:22:09,320 --> 00:22:14,930
since your business logic

00:22:12,050 --> 00:22:17,000
actions data everything is the couple

00:22:14,930 --> 00:22:19,580
this is that the world is the couple

00:22:17,000 --> 00:22:21,410
from everything else you can just plug

00:22:19,580 --> 00:22:23,300
and play whatever system you want here

00:22:21,410 --> 00:22:26,750
you will say all you will say also know

00:22:23,300 --> 00:22:28,880
this is react environment but maybe I

00:22:26,750 --> 00:22:31,460
want to react environment when you're in

00:22:28,880 --> 00:22:33,110
a very low latency a high latency

00:22:31,460 --> 00:22:35,750
network for example as some explained

00:22:33,110 --> 00:22:37,850
yesterday right why don't can you move

00:22:35,750 --> 00:22:39,380
to different components and the end it

00:22:37,850 --> 00:22:41,510
doesn't really matter your business

00:22:39,380 --> 00:22:43,310
logic is completely isolated it will be

00:22:41,510 --> 00:22:45,560
also a problem that we have the Metro a

00:22:43,310 --> 00:22:48,170
native community which is quite big and

00:22:45,560 --> 00:22:50,300
it's how to reduce components and logics

00:22:48,170 --> 00:22:52,490
well just user finds the Machine and

00:22:50,300 --> 00:22:54,560
here you say my environment is native so

00:22:52,490 --> 00:22:57,160
give me my react needed components this

00:22:54,560 --> 00:23:00,200
will work perfectly no issue at all

00:22:57,160 --> 00:23:02,750
another option is to look at that from

00:23:00,200 --> 00:23:04,910
the other way around and what does that

00:23:02,750 --> 00:23:06,530
mean is that you can have your for

00:23:04,910 --> 00:23:08,900
example react web application that

00:23:06,530 --> 00:23:11,660
fetches you find the same machine to a

00:23:08,900 --> 00:23:13,490
server don't loss did this JSON that

00:23:11,660 --> 00:23:16,940
defines a machine and then everything

00:23:13,490 --> 00:23:19,730
works so if you want to do and you go

00:23:16,940 --> 00:23:21,590
have like your let's say for example our

00:23:19,730 --> 00:23:22,520
registration for write all the

00:23:21,590 --> 00:23:24,440
components are the same

00:23:22,520 --> 00:23:26,510
everything is done by your design system

00:23:24,440 --> 00:23:29,510
for example and then it's just about

00:23:26,510 --> 00:23:31,430
even a pro turner will change a JSON

00:23:29,510 --> 00:23:32,900
file to define a different transition

00:23:31,430 --> 00:23:36,170
and this will be automatically applied

00:23:32,900 --> 00:23:40,160
to all your clients which is super

00:23:36,170 --> 00:23:42,590
powerful so what we saw right now is

00:23:40,160 --> 00:23:45,950
that another benefit it was just a

00:23:42,590 --> 00:23:48,050
couple which is super important thing

00:23:45,950 --> 00:23:50,030
and one of the main benefits I try this

00:23:48,050 --> 00:23:52,640
simple action in the company was working

00:23:50,030 --> 00:23:56,930
before for any different we are web and

00:23:52,640 --> 00:23:58,610
it works smoothly and then for me one of

00:23:56,930 --> 00:24:01,100
the things that I liked the most is the

00:23:58,610 --> 00:24:06,230
testing that's gonna show you this is

00:24:01,100 --> 00:24:08,140
best we have around a 70% coverage what

00:24:06,230 --> 00:24:14,060
yours you are not seeing it

00:24:08,140 --> 00:24:18,440
sorry sorry yes sorry this is the test

00:24:14,060 --> 00:24:20,810
ok there is around 70% coverage not 70

00:24:18,440 --> 00:24:22,700
but close to that but the cool part is

00:24:20,810 --> 00:24:25,340
not the coverage and that everything

00:24:22,700 --> 00:24:26,660
passes the cool part is that this

00:24:25,340 --> 00:24:28,670
all the testing that I have in my

00:24:26,660 --> 00:24:30,890
application nothing else there is

00:24:28,670 --> 00:24:33,950
absolutely no other file for testing

00:24:30,890 --> 00:24:36,200
because remember that I told you is

00:24:33,950 --> 00:24:38,090
deterministic and it's an automata that

00:24:36,200 --> 00:24:40,310
means that you can just in this case for

00:24:38,090 --> 00:24:42,620
example we are starting the our

00:24:40,310 --> 00:24:45,890
application in different states of our

00:24:42,620 --> 00:24:47,690
machine it's it important so it doesn't

00:24:45,890 --> 00:24:49,490
matter what happened before if I'm in

00:24:47,690 --> 00:24:53,660
the state failure

00:24:49,490 --> 00:24:56,120
I don't need B my application to pass

00:24:53,660 --> 00:24:57,860
through evil and fetching if I start on

00:24:56,120 --> 00:25:00,500
error it's going to be error every time

00:24:57,860 --> 00:25:02,090
so I can just do this well this is the

00:25:00,500 --> 00:25:04,460
Uniting limitation but I can just go

00:25:02,090 --> 00:25:06,620
through all the different states of my

00:25:04,460 --> 00:25:09,470
friend state machine and do a snapshot

00:25:06,620 --> 00:25:12,230
testing and you just don't believe me

00:25:09,470 --> 00:25:14,360
watch it by yourself this is a snapshot

00:25:12,230 --> 00:25:16,190
so basically what's doing is like you

00:25:14,360 --> 00:25:18,080
are in needle so there is like the let's

00:25:16,190 --> 00:25:20,060
do search you remember the application

00:25:18,080 --> 00:25:23,750
before we are in fetching the eyes the

00:25:20,060 --> 00:25:27,710
searching button success and you're so

00:25:23,750 --> 00:25:35,600
far and so forth so this this is the

00:25:27,710 --> 00:25:38,180
testing and finally the last part is

00:25:35,600 --> 00:25:40,070
that I can break my application whatever

00:25:38,180 --> 00:25:43,130
I want so that was the caution is it

00:25:40,070 --> 00:25:44,510
okay you seen this nice so I can break

00:25:43,130 --> 00:25:48,320
my application whatever they want like

00:25:44,510 --> 00:25:52,910
and like for example here I guess this

00:25:48,320 --> 00:25:56,300
works so good no so it's very difficult

00:25:52,910 --> 00:25:58,550
because there is a lot of latency okay

00:25:56,300 --> 00:26:04,400
this will work I guess if not excuse me

00:25:58,550 --> 00:26:05,810
so yeah it's broken why because we

00:26:04,400 --> 00:26:07,340
define in our application that is

00:26:05,810 --> 00:26:09,320
something goes wrong you just basically

00:26:07,340 --> 00:26:11,570
go to their or state it doesn't matter

00:26:09,320 --> 00:26:13,400
like how this happens so we are just

00:26:11,570 --> 00:26:15,380
throwing our I wrote like anyway

00:26:13,400 --> 00:26:17,780
anywhere and this will break it is it

00:26:15,380 --> 00:26:19,490
will go here for example this something

00:26:17,780 --> 00:26:21,200
you can connect very easily and very

00:26:19,490 --> 00:26:23,450
smoothly with the react bound ever

00:26:21,200 --> 00:26:28,100
boundaries and it will be super smooth

00:26:23,450 --> 00:26:31,310
the transitions so I don't know about

00:26:28,100 --> 00:26:33,620
you but first time I try was like this

00:26:31,310 --> 00:26:37,580
is magic

00:26:33,620 --> 00:26:39,550
I really there is this there is these

00:26:37,580 --> 00:26:42,110
two things for me at least

00:26:39,550 --> 00:26:45,350
that are super good benefits first of

00:26:42,110 --> 00:26:47,600
all you basically consider all the edge

00:26:45,350 --> 00:26:50,300
cases corner cases and everything of

00:26:47,600 --> 00:26:50,900
your application once you end up doing

00:26:50,300 --> 00:26:54,200
this

00:26:50,900 --> 00:26:56,000
user flow or diagram whatsoever this is

00:26:54,200 --> 00:26:57,950
everything you got which is very useful

00:26:56,000 --> 00:27:02,180
for you as a developer implementing it

00:26:57,950 --> 00:27:04,070
but it's also very useful for your I

00:27:02,180 --> 00:27:05,630
don't know how to call it and you're

00:27:04,070 --> 00:27:08,000
just gonna give you an example so you

00:27:05,630 --> 00:27:10,310
and your company something's broken pro

00:27:08,000 --> 00:27:11,930
turner comes by and say hey this is not

00:27:10,310 --> 00:27:13,850
working as expected and you start this

00:27:11,930 --> 00:27:16,340
conversation oh no this is what you

00:27:13,850 --> 00:27:18,620
asked me for you've been there yeah I

00:27:16,340 --> 00:27:21,110
can see in your faces so now it's gonna

00:27:18,620 --> 00:27:23,630
be like no see the diagram you didn't

00:27:21,110 --> 00:27:26,330
define it so it's fine let's gonna fix

00:27:23,630 --> 00:27:29,210
it and we all know what happened before

00:27:26,330 --> 00:27:30,740
and what's the evolution and the second

00:27:29,210 --> 00:27:32,690
part at least for me that I was really

00:27:30,740 --> 00:27:34,880
impressed was the testing part because I

00:27:32,690 --> 00:27:36,680
don't like to do testing and I don't

00:27:34,880 --> 00:27:38,690
know a lot of people that really loves

00:27:36,680 --> 00:27:40,610
doing testing is something that we do

00:27:38,690 --> 00:27:41,930
because we know it's needed it's not

00:27:40,610 --> 00:27:49,630
something that we do because we love it

00:27:41,930 --> 00:27:54,320
it's basically like it eating healthy so

00:27:49,630 --> 00:27:56,900
yes for the end I want to show you some

00:27:54,320 --> 00:27:59,270
resources I'm I'm gonna share with you

00:27:56,900 --> 00:28:02,300
the slides like in five minutes on

00:27:59,270 --> 00:28:05,480
Twitter but if you have to check one

00:28:02,300 --> 00:28:08,860
just please go to the ex State Library

00:28:05,480 --> 00:28:11,150
from from David this is simply good and

00:28:08,860 --> 00:28:12,770
well this is the book that David also

00:28:11,150 --> 00:28:14,630
recommended the constructing the UA with

00:28:12,770 --> 00:28:17,390
state charts it's a ton of the original

00:28:14,630 --> 00:28:19,540
one but then you have also the the last

00:28:17,390 --> 00:28:24,560
one the stitchers with github dot you

00:28:19,540 --> 00:28:26,360
there is a lot of resources in there and

00:28:24,560 --> 00:28:27,920
also real wall examples because at the

00:28:26,360 --> 00:28:31,250
end what I want with this talk is that

00:28:27,920 --> 00:28:32,930
you feel empowered to do your own vs

00:28:31,250 --> 00:28:34,430
code telemetry for example which is so

00:28:32,930 --> 00:28:36,740
complex thing is when you share your

00:28:34,430 --> 00:28:38,150
connection with another fella in a

00:28:36,740 --> 00:28:39,800
different part of the wall and you can

00:28:38,150 --> 00:28:42,200
see how your you type in how is he

00:28:39,800 --> 00:28:46,790
typing and so on it's a fancy machine

00:28:42,200 --> 00:28:48,820
and then also does anyone knows what it

00:28:46,790 --> 00:28:48,820
is

00:28:50,250 --> 00:28:55,510
correct Marsh Robert it was kinda easy

00:28:53,769 --> 00:28:58,179
if you've been hearing Wednesday because

00:28:55,510 --> 00:29:00,100
they'd be the spoil my my picture that

00:28:58,179 --> 00:29:02,049
but this is this is a really good

00:29:00,100 --> 00:29:03,039
example and for all of you that were in

00:29:02,049 --> 00:29:05,710
here on Wednesday

00:29:03,039 --> 00:29:07,090
basically the marsh robber was was

00:29:05,710 --> 00:29:09,519
because it's working already

00:29:07,090 --> 00:29:11,799
I find the same machine so I guess that

00:29:09,519 --> 00:29:15,039
is the best software engineers in the

00:29:11,799 --> 00:29:17,049
world decided that they are going to

00:29:15,039 --> 00:29:19,330
invest the gazillion billion trillion

00:29:17,049 --> 00:29:22,299
whatever of dollars to send a

00:29:19,330 --> 00:29:24,580
robot to another planet you only have

00:29:22,299 --> 00:29:27,220
one shot and you cannot it up and

00:29:24,580 --> 00:29:30,880
they pick up the fancy machines to do so

00:29:27,220 --> 00:29:34,000
I get that's the best real-world example

00:29:30,880 --> 00:29:35,679
you can have that's basically it

00:29:34,000 --> 00:29:38,110
remember I'm independent contractor if

00:29:35,679 --> 00:29:39,450
you need a fighter you can call me thank

00:29:38,110 --> 00:29:47,950
you

00:29:39,450 --> 00:29:47,950

YouTube URL: https://www.youtube.com/watch?v=t9XBzM6Tdmk


