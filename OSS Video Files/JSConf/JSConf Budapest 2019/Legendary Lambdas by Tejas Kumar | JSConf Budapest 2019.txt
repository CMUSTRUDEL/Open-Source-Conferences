Title: Legendary Lambdas by Tejas Kumar | JSConf Budapest 2019
Publication date: 2019-10-15
Playlist: JSConf Budapest 2019
Description: 
	https://2019.jsconfbp.com/speakers/tejas_kumar/

The Serverless paradigm is one that is slowly taking over the internet. This talk dives deep into Serverless, particularly Serverless Lambda Functions, and their benefits and drawbacks to web applications.

We will also discuss how they can benefit business, being extremely cheap to implement and maintain. As a practical, technical case study, we will examine serverless performance across a number of popular front-end UI frameworks and measure various metrics relevant to a serverless application.

Tejas enjoys people, code, and talking about code to people. Having begun coding at age 8, today Tejas travels around the world, encouraging, educating and empowering developers in the web development community.
Captions: 
	00:00:00,000 --> 00:00:05,970
[Applause]

00:00:01,790 --> 00:00:08,670
yeah good good good yeah

00:00:05,970 --> 00:00:13,860
judging by the sound of the claps sounds

00:00:08,670 --> 00:00:15,389
very good judging by the sound of the

00:00:13,860 --> 00:00:17,789
claps that sounds very good

00:00:15,389 --> 00:00:19,230
did you tell you that than me I know it

00:00:17,789 --> 00:00:19,619
was the guy backstage do it again do it

00:00:19,230 --> 00:00:29,119
again

00:00:19,619 --> 00:00:32,669
I just wanted to applause hop you well

00:00:29,119 --> 00:00:34,230
five of you were well what's the matter

00:00:32,669 --> 00:00:34,800
was the last the last stop was good

00:00:34,230 --> 00:00:36,750
right

00:00:34,800 --> 00:00:39,809
you're feeling energized you're feeling

00:00:36,750 --> 00:00:41,879
inspired amazing

00:00:39,809 --> 00:00:43,980
my name is Tagus that's pronounced like

00:00:41,879 --> 00:00:45,629
contagious but don't worry I'm not

00:00:43,980 --> 00:00:47,480
contagious I'm not going to give you

00:00:45,629 --> 00:00:51,420
anything besides hopefully a good talk

00:00:47,480 --> 00:00:53,760
and I have to say I love this conference

00:00:51,420 --> 00:00:56,579
I was here for CSS conf and J's confi

00:00:53,760 --> 00:00:59,640
esterday learned the ton I learned a ton

00:00:56,579 --> 00:01:02,460
debugging performance it's all here can

00:00:59,640 --> 00:01:07,790
we hear it for the organizers of J's

00:01:02,460 --> 00:01:11,010
computer pest absolutely incredible

00:01:07,790 --> 00:01:13,110
and also and also the city the city is

00:01:11,010 --> 00:01:14,100
really beautiful if you live here who

00:01:13,110 --> 00:01:16,500
I'm jealous

00:01:14,100 --> 00:01:17,700
I'm jealous so as I said my name stages

00:01:16,500 --> 00:01:19,890
contagious is kind of like a way to

00:01:17,700 --> 00:01:22,740
remember it because it's a it's a bit of

00:01:19,890 --> 00:01:23,939
a different Indian name but really at

00:01:22,740 --> 00:01:27,659
this point you can just call me that

00:01:23,939 --> 00:01:33,150
joke guy from yesterday yesterday at the

00:01:27,659 --> 00:01:34,560
party it's like and so yes yes I'm

00:01:33,150 --> 00:01:36,509
hilarious

00:01:34,560 --> 00:01:40,259
I work in Germany at a company called

00:01:36,509 --> 00:01:42,060
con te amo and we you know the marketing

00:01:40,259 --> 00:01:44,549
way we like promote ourselves as we

00:01:42,060 --> 00:01:46,560
accelerate data access just means we we

00:01:44,549 --> 00:01:48,680
help people understand their data and do

00:01:46,560 --> 00:01:52,200
all kinds of cool data science II things

00:01:48,680 --> 00:01:55,680
but really for me what I love the most

00:01:52,200 --> 00:01:58,259
about my work is these people oh my good

00:01:55,680 --> 00:02:01,229
this is my team and they are some of the

00:01:58,259 --> 00:02:02,689
brightest funniest smartest all my good

00:02:01,229 --> 00:02:04,740
I love them very much and I'm very happy

00:02:02,689 --> 00:02:05,790
to work with them and you know I get to

00:02:04,740 --> 00:02:07,799
come here and tell you about how

00:02:05,790 --> 00:02:10,560
wonderful they are but that

00:02:07,799 --> 00:02:13,230
unfortunately is not what this talk is

00:02:10,560 --> 00:02:15,420
about sorry sad instead the talks about

00:02:13,230 --> 00:02:16,849
serverless service how do you even heard

00:02:15,420 --> 00:02:20,760
if serverless

00:02:16,849 --> 00:02:22,950
Wow everybody so nothing new will be

00:02:20,760 --> 00:02:24,239
learned here I'm just kidding we're

00:02:22,950 --> 00:02:27,750
gonna talk about certainly gonna look at

00:02:24,239 --> 00:02:29,989
some adoption some usage we look at what

00:02:27,750 --> 00:02:33,810
it means and why I think it is

00:02:29,989 --> 00:02:35,940
absolutely revolutionary and I mean that

00:02:33,810 --> 00:02:36,900
this talk is called legendary lambdas

00:02:35,940 --> 00:02:38,610
for a reason

00:02:36,900 --> 00:02:40,800
but before we get into that let's kind

00:02:38,610 --> 00:02:43,440
of look at some facts and figures these

00:02:40,800 --> 00:02:44,790
are from surveys this the citations on

00:02:43,440 --> 00:02:48,150
the bottom left I'd encourage you to go

00:02:44,790 --> 00:02:52,950
look it out look it up and according to

00:02:48,150 --> 00:02:54,840
the new stack some time ago about 78% of

00:02:52,950 --> 00:02:56,790
participants in the survey wanted to

00:02:54,840 --> 00:02:59,670
adopt serverless into their ecosystem

00:02:56,790 --> 00:03:02,129
into their internal service architecture

00:02:59,670 --> 00:03:05,250
70% which means by now they may have

00:03:02,129 --> 00:03:09,420
already another interesting statistic is

00:03:05,250 --> 00:03:12,209
75% of the problem space has been

00:03:09,420 --> 00:03:14,340
penetrated by serverless in the last 18

00:03:12,209 --> 00:03:18,920
months or so and that is really really

00:03:14,340 --> 00:03:21,599
really exciting it very quickly overtook

00:03:18,920 --> 00:03:23,700
the prior art if you will containers as

00:03:21,599 --> 00:03:26,909
a service and it's it's growing very

00:03:23,700 --> 00:03:29,340
fast and these are just numbers but

00:03:26,909 --> 00:03:32,489
there are real world use cases where

00:03:29,340 --> 00:03:35,010
serverless is doing amazing things and

00:03:32,489 --> 00:03:37,440
one such use cases by one of the biggest

00:03:35,010 --> 00:03:40,470
brands in the whole world

00:03:37,440 --> 00:03:42,150
coca-cola reduced their operating costs

00:03:40,470 --> 00:03:42,599
by about sixty five percent on

00:03:42,150 --> 00:03:44,459
serverless

00:03:42,599 --> 00:03:46,860
and how they did that is they had these

00:03:44,459 --> 00:03:49,019
these vending machines that were like 10

00:03:46,860 --> 00:03:50,760
to 12 years old and they would have to

00:03:49,019 --> 00:03:52,799
send some some telemetry they had a

00:03:50,760 --> 00:03:54,750
sense of information about like are

00:03:52,799 --> 00:03:57,840
there enough drinks and stuff to coke

00:03:54,750 --> 00:04:01,200
now these up until 2016 or run on

00:03:57,840 --> 00:04:03,299
Amazon's ec2 and cost about twelve

00:04:01,200 --> 00:04:05,900
thousand eight hundred sixty-four

00:04:03,299 --> 00:04:08,849
dollars a year okay

00:04:05,900 --> 00:04:11,760
after moving to server lists coca-cola

00:04:08,849 --> 00:04:14,310
pays 4490 roughly at the time of the

00:04:11,760 --> 00:04:16,650
case study for you that's that's a 65

00:04:14,310 --> 00:04:19,799
percent reduction and it they could

00:04:16,650 --> 00:04:21,090
serve 30 million requests at one time at

00:04:19,799 --> 00:04:23,880
the time of publishing of this study

00:04:21,090 --> 00:04:25,139
very very very interesting second if

00:04:23,880 --> 00:04:27,719
you've ever played or her

00:04:25,139 --> 00:04:28,620
of final fantasy square enix is a

00:04:27,719 --> 00:04:31,680
company behind some of the world's

00:04:28,620 --> 00:04:33,389
greatest MMORPGs massively multiplayer

00:04:31,680 --> 00:04:35,310
online role-playing games and they can

00:04:33,389 --> 00:04:37,560
have millions of players on at the same

00:04:35,310 --> 00:04:39,870
time and what players like to do at

00:04:37,560 --> 00:04:42,150
massive scale is take screenshots so

00:04:39,870 --> 00:04:45,199
they have an image processing function

00:04:42,150 --> 00:04:47,400
that would process these screenshots now

00:04:45,199 --> 00:04:49,919
processing these screenshots especially

00:04:47,400 --> 00:04:52,499
under heavy load would use that used to

00:04:49,919 --> 00:04:54,479
take several hours after moving to

00:04:52,499 --> 00:04:56,330
server list these take a little over 10

00:04:54,479 --> 00:04:58,949
seconds and more than that they can

00:04:56,330 --> 00:05:01,409
comfortably do this with traffic spikes

00:04:58,949 --> 00:05:02,939
of over 2 times so if there's a gaming

00:05:01,409 --> 00:05:05,460
tournament and there's like millions of

00:05:02,939 --> 00:05:08,750
people online this this function to

00:05:05,460 --> 00:05:11,969
process the images eats it for breakfast

00:05:08,750 --> 00:05:14,039
lastly if you've ever heard of a used a

00:05:11,969 --> 00:05:15,449
Wi-Fi router in your entire life there's

00:05:14,039 --> 00:05:17,009
a good chance on with a Thompson one and

00:05:15,449 --> 00:05:19,650
Thompson routers one of the world's

00:05:17,009 --> 00:05:23,009
biggest brands for routers is able to

00:05:19,650 --> 00:05:25,499
process 4,000 events per second on

00:05:23,009 --> 00:05:28,289
serverless what's really impressive

00:05:25,499 --> 00:05:30,800
about this is even you know under very

00:05:28,289 --> 00:05:35,699
heavy conditions there's no or minimal

00:05:30,800 --> 00:05:38,839
probably no data loss but for me and

00:05:35,699 --> 00:05:42,330
this is what I want to focus on today is

00:05:38,839 --> 00:05:44,460
they scheduled five months to get this

00:05:42,330 --> 00:05:46,620
into production according to the report

00:05:44,460 --> 00:05:47,939
and you know if you're at the scale of

00:05:46,620 --> 00:05:49,409
Thompson five months is a really short

00:05:47,939 --> 00:05:51,000
time I've heard people say that in

00:05:49,409 --> 00:05:53,069
larger companies things just take longer

00:05:51,000 --> 00:05:55,349
there's more meetings and more planning

00:05:53,069 --> 00:05:57,870
whatsoever and so five months is

00:05:55,349 --> 00:06:00,930
ambitious Thompson actually ended up

00:05:57,870 --> 00:06:03,719
moving this thing to server list two

00:06:00,930 --> 00:06:06,060
months ahead of schedule two months

00:06:03,719 --> 00:06:08,430
ahead of serverless is is you're able to

00:06:06,060 --> 00:06:10,500
get up and running really really fast

00:06:08,430 --> 00:06:13,199
and so I tell you all these things to

00:06:10,500 --> 00:06:14,969
tell you it's here and it's big and and

00:06:13,199 --> 00:06:17,399
people are talking about it but don't

00:06:14,969 --> 00:06:19,469
take my word for it I think one of my

00:06:17,399 --> 00:06:24,060
friends Nadder said it best he just says

00:06:19,469 --> 00:06:26,610
this serverless is the future and so if

00:06:24,060 --> 00:06:29,639
it is the future and we're all kind of

00:06:26,610 --> 00:06:31,770
going there anyway let's let's spend 30

00:06:29,639 --> 00:06:35,569
minutes talking about it in a little bit

00:06:31,770 --> 00:06:39,659
of detail so what is it what is

00:06:35,569 --> 00:06:41,959
serverless serverless in quotes

00:06:39,659 --> 00:06:43,769
it's a loaded term right it could mean

00:06:41,959 --> 00:06:46,019
functions which we talk about but it

00:06:43,769 --> 00:06:49,169
could just mean like static websites jam

00:06:46,019 --> 00:06:50,669
stack things I want to make a point here

00:06:49,169 --> 00:06:53,279
that may be controversial but you know

00:06:50,669 --> 00:06:57,569
what it's just it's you love me you know

00:06:53,279 --> 00:07:01,199
it's fine or whatever I think just the

00:06:57,569 --> 00:07:03,299
word serverless is kind of a lie like in

00:07:01,199 --> 00:07:05,639
english it's called a misnomer miss as a

00:07:03,299 --> 00:07:07,199
not not quite no more as a name now in

00:07:05,639 --> 00:07:09,569
software engineering naming things is

00:07:07,199 --> 00:07:12,839
hard and I think we may have missed

00:07:09,569 --> 00:07:14,369
serverless because I was talking to my

00:07:12,839 --> 00:07:16,110
wife about it she's you know she studies

00:07:14,369 --> 00:07:18,029
law and isn't very involved with tech

00:07:16,110 --> 00:07:20,879
and it sounds like well there's no

00:07:18,029 --> 00:07:23,309
servers at all which is a huge lie and

00:07:20,879 --> 00:07:28,610
so I'd like I couldn't I'd invite you to

00:07:23,309 --> 00:07:28,610
consider this it's a wireless charger

00:07:30,829 --> 00:07:36,360
also kind of a lie

00:07:33,809 --> 00:07:38,639
and so server this is kind of like that

00:07:36,360 --> 00:07:41,219
it means it doesn't mean there are no

00:07:38,639 --> 00:07:43,919
servers it means that they're not your

00:07:41,219 --> 00:07:45,599
problem you you do what you love you get

00:07:43,919 --> 00:07:47,579
to focus on building the apps the

00:07:45,599 --> 00:07:49,739
experiences you absolutely love and you

00:07:47,579 --> 00:07:51,719
pay Amazon or diet or neckla fire one of

00:07:49,739 --> 00:07:54,059
these some amount of money or use their

00:07:51,719 --> 00:07:56,309
feet here and your stuffs magically in

00:07:54,059 --> 00:07:58,169
the cloud server lists you can quote me

00:07:56,309 --> 00:08:03,119
on this server list brings the cloud

00:07:58,169 --> 00:08:04,919
down but but why and there's a number of

00:08:03,119 --> 00:08:05,939
reasons why server list is so popular

00:08:04,919 --> 00:08:08,039
and we'll go through them I think you

00:08:05,939 --> 00:08:11,099
know them they're not like rocket

00:08:08,039 --> 00:08:12,389
science or mind blowing but as I just

00:08:11,099 --> 00:08:14,129
said you can focus on the things you

00:08:12,389 --> 00:08:18,329
love you you delegate the responsibility

00:08:14,129 --> 00:08:20,879
of servers to someone else so you write

00:08:18,329 --> 00:08:23,489
your JavaScript you write your Python if

00:08:20,879 --> 00:08:25,559
you're into that yeah and and you put it

00:08:23,489 --> 00:08:28,139
in the cloud and the concerns of

00:08:25,559 --> 00:08:30,899
provisioning the server setting up the

00:08:28,139 --> 00:08:33,990
runtime putting it getting it up all of

00:08:30,899 --> 00:08:36,360
that you don't deal with if for some

00:08:33,990 --> 00:08:38,729
reason your server dies and you need to

00:08:36,360 --> 00:08:41,099
send traffic to a different machine for

00:08:38,729 --> 00:08:42,930
whatever reason handled for you that's

00:08:41,099 --> 00:08:45,269
already like I can breathe a little bit

00:08:42,930 --> 00:08:47,880
easier there were three scale like if

00:08:45,269 --> 00:08:49,860
for example you your Square Enix and

00:08:47,880 --> 00:08:50,970
there's a huge gaming tournament you

00:08:49,860 --> 00:08:52,710
don't have to think about scaling

00:08:50,970 --> 00:08:55,830
vertically by adding more

00:08:52,710 --> 00:08:57,030
memory or you know Hardware throwing

00:08:55,830 --> 00:08:58,890
hardware from you or scaling

00:08:57,030 --> 00:09:01,230
horizontally by adding more servers in

00:08:58,890 --> 00:09:03,180
your cluster you just doesn't matter you

00:09:01,230 --> 00:09:05,280
create the software you know and love

00:09:03,180 --> 00:09:07,560
and these are kind of the three tenets

00:09:05,280 --> 00:09:11,430
of service but I invite you to consider

00:09:07,560 --> 00:09:13,980
one more and that is this one you see

00:09:11,430 --> 00:09:15,540
most tech conferences I think it may be

00:09:13,980 --> 00:09:18,780
fair to say all tech conferences are on

00:09:15,540 --> 00:09:21,990
this spectrum of technology and

00:09:18,780 --> 00:09:23,460
community and jeaious Khan family

00:09:21,990 --> 00:09:25,230
conferences that I've been to usually

00:09:23,460 --> 00:09:28,140
lean a little bit more towards community

00:09:25,230 --> 00:09:29,790
and if we're in community we need to

00:09:28,140 --> 00:09:32,790
talk accessibility in case that's not

00:09:29,790 --> 00:09:37,680
big enough accessibility

00:09:32,790 --> 00:09:42,360
I think serverless makes the web so the

00:09:37,680 --> 00:09:45,600
cloud so accessible that everybody can

00:09:42,360 --> 00:09:48,330
play and this is huge you see I come

00:09:45,600 --> 00:09:52,320
from I was born in a country that is

00:09:48,330 --> 00:09:55,230
poor it's a developing country India in

00:09:52,320 --> 00:09:58,650
case you were wondering I love the food

00:09:55,230 --> 00:10:02,520
it's amazing but the country is is is

00:09:58,650 --> 00:10:04,530
it's growing right and the prior art of

00:10:02,520 --> 00:10:06,030
serverless means you have to have some

00:10:04,530 --> 00:10:08,700
type of server means you have to either

00:10:06,030 --> 00:10:10,740
get shared hosting if if money's tight

00:10:08,700 --> 00:10:13,560
or you get a virtual private server or a

00:10:10,740 --> 00:10:16,050
bare metal server now with these there's

00:10:13,560 --> 00:10:18,480
money involved and sometimes for some

00:10:16,050 --> 00:10:25,010
communities this money is too much it's

00:10:18,480 --> 00:10:28,050
not as accessible with lambda serverless

00:10:25,010 --> 00:10:29,190
helps these communities see India I

00:10:28,050 --> 00:10:30,840
think is home to some of the most

00:10:29,190 --> 00:10:33,390
brilliant minds on the face of the

00:10:30,840 --> 00:10:34,380
planet and if you need evidence of that

00:10:33,390 --> 00:10:37,200
don't you don't have to look very far

00:10:34,380 --> 00:10:38,130
CEO of Google CEO of Microsoft Sunil PI

00:10:37,200 --> 00:10:40,560
at Facebook

00:10:38,130 --> 00:10:42,270
there's react India is happening right

00:10:40,560 --> 00:10:45,360
now and there's a whole bunch of them

00:10:42,270 --> 00:10:48,060
ready to learn and grow the problem is

00:10:45,360 --> 00:10:50,820
the cloud is not accessible because you

00:10:48,060 --> 00:10:54,060
pay so much for a server it's

00:10:50,820 --> 00:10:56,550
unbelievable lambda has this pricing

00:10:54,060 --> 00:10:58,770
model that allows people from these

00:10:56,550 --> 00:11:01,890
communities to put stuff in the cloud

00:10:58,770 --> 00:11:03,600
you have an idea put it in there and how

00:11:01,890 --> 00:11:05,990
that's possible is because lambdas are

00:11:03,600 --> 00:11:07,370
functions they're just

00:11:05,990 --> 00:11:08,930
there's an excellent talk yesterday on

00:11:07,370 --> 00:11:10,940
functional programming their functions

00:11:08,930 --> 00:11:14,720
and as we saw functions what do they do

00:11:10,940 --> 00:11:16,850
you write them they start they do a job

00:11:14,720 --> 00:11:20,450
they run to completion they finish they

00:11:16,850 --> 00:11:23,150
return a value that's it in a perfect

00:11:20,450 --> 00:11:24,650
world your functions are stateless or as

00:11:23,150 --> 00:11:26,180
in they close over their own state they

00:11:24,650 --> 00:11:28,490
have no side effects and they're pure

00:11:26,180 --> 00:11:30,020
meaning for any given input they give

00:11:28,490 --> 00:11:31,490
you the same output without side effects

00:11:30,020 --> 00:11:33,890
so they're predictable if they're

00:11:31,490 --> 00:11:35,540
predictable they're testable you can

00:11:33,890 --> 00:11:37,130
unit test them and make sure they behave

00:11:35,540 --> 00:11:39,500
the way you want them to if they're

00:11:37,130 --> 00:11:41,090
testable they're scalable meaning you

00:11:39,500 --> 00:11:42,530
can run 50 different versions of the

00:11:41,090 --> 00:11:45,500
same function they do the same thing and

00:11:42,530 --> 00:11:48,740
if they're infinitely scalable you can

00:11:45,500 --> 00:11:51,800
go really really really far and so if

00:11:48,740 --> 00:11:55,160
the functions are invoked it presents an

00:11:51,800 --> 00:11:57,410
entirely different pricing model right

00:11:55,160 --> 00:11:59,330
previously you would pay monthly for a

00:11:57,410 --> 00:12:02,000
server people use it people don't I

00:11:59,330 --> 00:12:04,460
don't care I'm losing 350 euros a month

00:12:02,000 --> 00:12:06,650
just paying for a server I'm wildly

00:12:04,460 --> 00:12:09,290
unpopular I'm paying for a server I

00:12:06,650 --> 00:12:11,720
can't pay my rent but maybe someone will

00:12:09,290 --> 00:12:13,430
use it and it'll catch on I'll just keep

00:12:11,720 --> 00:12:17,060
hope and pay for this I lose money a

00:12:13,430 --> 00:12:18,920
whole year with lambda you pay for each

00:12:17,060 --> 00:12:21,080
time your function is invoked and I

00:12:18,920 --> 00:12:22,910
think that's a game changer I really do

00:12:21,080 --> 00:12:24,980
because if no one uses your thing you

00:12:22,910 --> 00:12:27,890
pay nothing and some with some providers

00:12:24,980 --> 00:12:31,670
if one person uses it you pay I think

00:12:27,890 --> 00:12:33,410
it's like 1/5 millionth of a dollar you

00:12:31,670 --> 00:12:34,820
pay for invocations and you pay for

00:12:33,410 --> 00:12:37,640
compute time we'll talk more about that

00:12:34,820 --> 00:12:39,530
it's it's almost free and if it's almost

00:12:37,640 --> 00:12:41,240
free no matter how much money you or

00:12:39,530 --> 00:12:42,590
your country has you can put stuff in if

00:12:41,240 --> 00:12:44,870
I think that's incredible and so I

00:12:42,590 --> 00:12:47,450
thought I could show you some examples

00:12:44,870 --> 00:12:50,900
if the internet cooperates if it doesn't

00:12:47,450 --> 00:12:52,310
you know we'll see what happens and so

00:12:50,900 --> 00:12:54,980
here's an example here's a server this

00:12:52,310 --> 00:12:58,070
function in JavaScript because it's J's

00:12:54,980 --> 00:13:00,620
convent I'm I'm sending so I have a

00:12:58,070 --> 00:13:02,810
request response a set of arguments and

00:13:00,620 --> 00:13:05,470
I'm sending through the response a

00:13:02,810 --> 00:13:07,970
heading off the current date and time

00:13:05,470 --> 00:13:09,710
let's put this in the cloud I want you

00:13:07,970 --> 00:13:11,120
to pay attention because this is super

00:13:09,710 --> 00:13:13,100
sophisticated to put stuff in the cloud

00:13:11,120 --> 00:13:15,560
on server list I'm using a provider as I

00:13:13,100 --> 00:13:17,840
there's others but I find this easy and

00:13:15,560 --> 00:13:18,620
I just enter one command literally one

00:13:17,840 --> 00:13:21,680
command

00:13:18,620 --> 00:13:25,670
and it says okay I'm deploying this

00:13:21,680 --> 00:13:27,770
function damn it's a van it's done and I

00:13:25,670 --> 00:13:29,480
open it and so what happens is that

00:13:27,770 --> 00:13:31,760
function is called when I open the

00:13:29,480 --> 00:13:33,500
function and it returns a value to the

00:13:31,760 --> 00:13:35,090
browser this calls the function and

00:13:33,500 --> 00:13:37,760
calls the function if I reload the page

00:13:35,090 --> 00:13:39,740
it calls the function every time you see

00:13:37,760 --> 00:13:42,530
and so I'm kind of running up a huge

00:13:39,740 --> 00:13:44,150
bill here by reloading this page but

00:13:42,530 --> 00:13:45,530
it's not very much I'm sure I can afford

00:13:44,150 --> 00:13:48,140
it I'm actually on their free tier so

00:13:45,530 --> 00:13:49,460
I'm sure I can afford it but another

00:13:48,140 --> 00:13:50,870
case for server lists if you want to get

00:13:49,460 --> 00:13:52,460
creative is this thing which will

00:13:50,870 --> 00:13:55,160
automatically give you a randomly

00:13:52,460 --> 00:13:57,740
generated thinking emoji on every

00:13:55,160 --> 00:13:59,510
invocation this one apparently is huge

00:13:57,740 --> 00:14:01,670
but every time you reload the page you

00:13:59,510 --> 00:14:04,700
just get a new one because the function

00:14:01,670 --> 00:14:08,510
is called on many I could do this all

00:14:04,700 --> 00:14:11,690
day okay moving on um so what we saw was

00:14:08,510 --> 00:14:14,210
cool I don't know why my doc is showing

00:14:11,690 --> 00:14:18,950
like Apple if you're watching please

00:14:14,210 --> 00:14:21,680
quality the pricing for that though is

00:14:18,950 --> 00:14:23,780
that much you pay for each time it's

00:14:21,680 --> 00:14:26,270
invoked you pay that much and you pay

00:14:23,780 --> 00:14:28,280
for the amount of gigabyte seconds you

00:14:26,270 --> 00:14:30,680
use and and this is on Amazon Web

00:14:28,280 --> 00:14:32,660
service that's it that's crazy but I

00:14:30,680 --> 00:14:34,130
spend a lot of time in a lot of tech

00:14:32,660 --> 00:14:36,650
conferences talking to a lot of people

00:14:34,130 --> 00:14:39,410
about things about server list about CSS

00:14:36,650 --> 00:14:42,050
about life in love and Romeo and Juliet

00:14:39,410 --> 00:14:45,230
whatever and as with everything there

00:14:42,050 --> 00:14:48,380
are concerns can it be that good is it

00:14:45,230 --> 00:14:51,290
too good to be true the two big concerns

00:14:48,380 --> 00:14:52,910
I hear often are acceptance of service

00:14:51,290 --> 00:14:54,560
so a traditional problem with servers is

00:14:52,910 --> 00:14:56,360
denial of service you get hit with too

00:14:54,560 --> 00:14:58,400
many requests and then your server is

00:14:56,360 --> 00:15:00,860
like I can't I can't deal with it I quit

00:14:58,400 --> 00:15:03,050
and and it denies service but would

00:15:00,860 --> 00:15:05,090
server list since it scales up the other

00:15:03,050 --> 00:15:07,400
side of the problem is true if you pay

00:15:05,090 --> 00:15:09,560
for each time your URL is accessed

00:15:07,400 --> 00:15:11,420
someone could just like wild crew and

00:15:09,560 --> 00:15:12,920
then fetch you every time you know what

00:15:11,420 --> 00:15:14,900
I mean and then they just send a request

00:15:12,920 --> 00:15:17,480
after request and then you get a bill of

00:15:14,900 --> 00:15:20,600
two million dollars how do you deal with

00:15:17,480 --> 00:15:21,680
that number two if you say pages if you

00:15:20,600 --> 00:15:24,650
say our lamb doesn't need to be

00:15:21,680 --> 00:15:27,410
stateless and pure but I need to say I

00:15:24,650 --> 00:15:29,090
need a database how do I do this we'll

00:15:27,410 --> 00:15:31,990
talk about those let's start with

00:15:29,090 --> 00:15:31,990
acceptance of service

00:15:32,000 --> 00:15:38,780
go down a hypothetical journey okay

00:15:34,070 --> 00:15:41,560
let's say your worst enemy sets up a

00:15:38,780 --> 00:15:44,780
network of a hundred thousand bucks okay

00:15:41,560 --> 00:15:47,720
and they just like keep hitting your

00:15:44,780 --> 00:15:50,300
server for sixty minutes one request per

00:15:47,720 --> 00:15:52,220
second okay that is a total of three

00:15:50,300 --> 00:15:55,280
hundred and sixty million in an hour

00:15:52,220 --> 00:15:57,290
lambda invocations big numbers big and

00:15:55,280 --> 00:16:01,610
scary it's even physically big on the

00:15:57,290 --> 00:16:03,170
screen so that's a lot let's add to the

00:16:01,610 --> 00:16:05,060
equation let's say your function takes

00:16:03,170 --> 00:16:08,240
two hundred milliseconds of compute time

00:16:05,060 --> 00:16:10,130
and uses a gigabyte of memory okay this

00:16:08,240 --> 00:16:13,100
is these are just factors for a little

00:16:10,130 --> 00:16:14,960
experiment know what Amazon Web Services

00:16:13,100 --> 00:16:18,740
with lambda this is this is what you

00:16:14,960 --> 00:16:21,860
would pay it's a two digit number for

00:16:18,740 --> 00:16:23,120
invocation seventy two dollars and since

00:16:21,860 --> 00:16:24,230
it's one gigabyte of memory over two

00:16:23,120 --> 00:16:27,110
hundred seconds

00:16:24,230 --> 00:16:30,530
it's 1024 dollars all of that to say in

00:16:27,110 --> 00:16:34,400
an attack at that scale we pay less than

00:16:30,530 --> 00:16:36,820
fifteen hundred dollars you would pay

00:16:34,400 --> 00:16:39,980
that anyway on virtual on a like

00:16:36,820 --> 00:16:42,589
previously server based solution if not

00:16:39,980 --> 00:16:43,790
more so this is an extreme case and I

00:16:42,589 --> 00:16:46,430
think if you're an early stage startup

00:16:43,790 --> 00:16:50,390
or a late stage startup or whatever

00:16:46,430 --> 00:16:51,860
that's within reach and if you're

00:16:50,390 --> 00:16:53,510
attacked at that scale you're probably

00:16:51,860 --> 00:16:57,830
famous enough to afford it

00:16:53,510 --> 00:16:58,940
maybe and there's at their services

00:16:57,830 --> 00:17:02,000
there's something called Amazon Cloud

00:16:58,940 --> 00:17:03,740
watch that will kind of watch your thing

00:17:02,000 --> 00:17:05,420
and warn you if you're getting too much

00:17:03,740 --> 00:17:07,370
crap so there are measures you can

00:17:05,420 --> 00:17:11,000
implement to prevent this I think that's

00:17:07,370 --> 00:17:14,150
pretty okay second problem the need for

00:17:11,000 --> 00:17:15,500
state I need state we all need state

00:17:14,150 --> 00:17:18,770
that kind of can't have an app for that

00:17:15,500 --> 00:17:20,060
state how do we do this every time I

00:17:18,770 --> 00:17:22,430
talk about server list at someone I

00:17:20,060 --> 00:17:24,020
don't know why but the the thinking goes

00:17:22,430 --> 00:17:26,150
to like okay everything needs to be a

00:17:24,020 --> 00:17:27,650
function everything everything's pure

00:17:26,150 --> 00:17:29,030
everything like we love this in

00:17:27,650 --> 00:17:30,560
JavaScript like someone says something I

00:17:29,030 --> 00:17:31,490
would got to be really move everything

00:17:30,560 --> 00:17:33,440
to Gatsby

00:17:31,490 --> 00:17:35,210
someone says something about react hooks

00:17:33,440 --> 00:17:38,930
were like hooks everywhere classes are

00:17:35,210 --> 00:17:42,770
evil you know like everything doesn't

00:17:38,930 --> 00:17:45,680
need to be a function okay use it in

00:17:42,770 --> 00:17:48,200
moderation use it with consideration

00:17:45,680 --> 00:17:50,630
but perhaps you have a MongoDB Atlas or

00:17:48,200 --> 00:17:53,450
a sewer database on Postgres the graphic

00:17:50,630 --> 00:17:55,280
API somewhere great maybe there's a

00:17:53,450 --> 00:17:57,860
place for your function at the API layer

00:17:55,280 --> 00:17:58,970
maybe there isn't but not everything

00:17:57,860 --> 00:18:01,600
needs to be from yes you can have your

00:17:58,970 --> 00:18:03,770
state you can even eat it if you want

00:18:01,600 --> 00:18:06,980
you didn't understand that that's okay

00:18:03,770 --> 00:18:10,270
uh-huh not everything needs to be a

00:18:06,980 --> 00:18:14,150
function and so that brings me to the

00:18:10,270 --> 00:18:16,550
the study part of this talk was to

00:18:14,150 --> 00:18:18,560
discuss briefly a study that I did

00:18:16,550 --> 00:18:21,080
literally for science I have to preface

00:18:18,560 --> 00:18:22,820
this multiple times by saying don't do

00:18:21,080 --> 00:18:25,430
this it's what it's one of those things

00:18:22,820 --> 00:18:28,130
that you do because you're curious don't

00:18:25,430 --> 00:18:32,540
do it in production there's better ways

00:18:28,130 --> 00:18:35,260
to do this Jam stack is a good way other

00:18:32,540 --> 00:18:39,950
ways to but anyway I wanted to try out

00:18:35,260 --> 00:18:41,810
serverless button but like with UI so it

00:18:39,950 --> 00:18:44,770
took some frameworks and did some stuff

00:18:41,810 --> 00:18:48,650
with lambdas and we'll see some results

00:18:44,770 --> 00:18:52,370
but how do you do like a UI as a far as

00:18:48,650 --> 00:18:58,400
you know so you have UI and you want to

00:18:52,370 --> 00:19:03,490
put it in the lambda but this is your UI

00:18:58,400 --> 00:19:03,490
of function or is it like divs and stuff

00:19:04,180 --> 00:19:09,410
yeah I've heard actually no wait a

00:19:07,610 --> 00:19:11,540
second new UI is a function of your

00:19:09,410 --> 00:19:13,880
state like this is like the e equals MC

00:19:11,540 --> 00:19:16,220
square of UI development isn't it like u

00:19:13,880 --> 00:19:19,220
UI is a function of your okay

00:19:16,220 --> 00:19:21,850
I didn't see that hmm wait a second that

00:19:19,220 --> 00:19:25,670
means you I can just be a lambda whoa

00:19:21,850 --> 00:19:28,130
okay cool let's try it let's write like

00:19:25,670 --> 00:19:29,810
react dong render to string on a on a

00:19:28,130 --> 00:19:35,330
lemon and that's exactly what we did

00:19:29,810 --> 00:19:36,950
we server rendered by UI as a server

00:19:35,330 --> 00:19:40,150
list lambda so I guess that's that's

00:19:36,950 --> 00:19:45,460
serverless server-side rendering is that

00:19:40,150 --> 00:19:49,040
SSSR us s no don't make that joke hmm

00:19:45,460 --> 00:19:52,670
seriously this study anyway the study we

00:19:49,040 --> 00:19:56,930
we looked at some leading UI frameworks

00:19:52,670 --> 00:19:58,490
and we looked at pre-act react lit idml

00:19:56,930 --> 00:20:02,600
that's the polymer icon

00:19:58,490 --> 00:20:05,270
don't be offended view and vie html5

00:20:02,600 --> 00:20:09,350
frameworks and what we wanted to do was

00:20:05,270 --> 00:20:11,960
we wanted to build a reddit phone and

00:20:09,350 --> 00:20:13,760
this is just a clone of reddit it uses a

00:20:11,960 --> 00:20:15,380
flat file as the backend so we don't

00:20:13,760 --> 00:20:17,690
really talk to the reddit API and that's

00:20:15,380 --> 00:20:19,580
to reduce latency and and standard

00:20:17,690 --> 00:20:20,780
deviation on your benchmark and the

00:20:19,580 --> 00:20:21,980
reason we chose server-side rendering

00:20:20,780 --> 00:20:23,929
there was an excellent talk yesterday

00:20:21,980 --> 00:20:25,100
actually by Surma and Jake about they

00:20:23,929 --> 00:20:26,660
talked a little bit about server-side

00:20:25,100 --> 00:20:28,550
rendering it's just better if you're not

00:20:26,660 --> 00:20:31,120
server rendering I think it can be

00:20:28,550 --> 00:20:33,470
better in many cases partly because

00:20:31,120 --> 00:20:36,080
everything's delivered to your users in

00:20:33,470 --> 00:20:37,429
one network hop like they visit your

00:20:36,080 --> 00:20:39,530
page BAM they get exactly what they want

00:20:37,429 --> 00:20:41,150
there is no like oh my JavaScript bundle

00:20:39,530 --> 00:20:42,590
is loading now like some of you have

00:20:41,150 --> 00:20:43,910
seen these experiences on the web where

00:20:42,590 --> 00:20:46,280
you get a shell of a nap and then

00:20:43,910 --> 00:20:48,100
spinners immediately server-side

00:20:46,280 --> 00:20:50,570
rendering this gives them what they need

00:20:48,100 --> 00:20:52,880
it's also better for you in terms of

00:20:50,570 --> 00:20:54,800
search engine marketing I heard at I

00:20:52,880 --> 00:20:56,510
think at Google i/o actually that it's

00:20:54,800 --> 00:21:00,140
significantly harder for search engines

00:20:56,510 --> 00:21:03,170
to index these things as well users

00:21:00,140 --> 00:21:04,580
don't like spinners but one benefit you

00:21:03,170 --> 00:21:06,559
get actually with serverless and

00:21:04,580 --> 00:21:09,170
server-side rendering again probably not

00:21:06,559 --> 00:21:12,410
a good idea is you get analytics out of

00:21:09,170 --> 00:21:15,950
the box so imagine you have a blog and

00:21:12,410 --> 00:21:18,020
each articles deployed as a lambda so if

00:21:15,950 --> 00:21:20,480
from article a your server list bill is

00:21:18,020 --> 00:21:23,030
$2 an article be your server list bill

00:21:20,480 --> 00:21:24,710
is $200 you kind of know what kind of

00:21:23,030 --> 00:21:29,179
content to be producing from there I

00:21:24,710 --> 00:21:30,620
thought that was interesting but but

00:21:29,179 --> 00:21:36,440
regardless so this is what we wanted to

00:21:30,620 --> 00:21:39,500
build and we wanted to track three key

00:21:36,440 --> 00:21:41,510
metrics metric number one is the cost of

00:21:39,500 --> 00:21:42,620
booting the function cold we'll talk a

00:21:41,510 --> 00:21:44,500
little bit more about this because it's

00:21:42,620 --> 00:21:46,880
a little bit exclusive to serverless

00:21:44,500 --> 00:21:48,470
number two is the lamina size or the

00:21:46,880 --> 00:21:49,940
package size this is a concept you're

00:21:48,470 --> 00:21:51,590
aware of and number three is the

00:21:49,940 --> 00:21:53,510
throughput I'm how many requests per

00:21:51,590 --> 00:21:56,450
second can this handle but let's talk a

00:21:53,510 --> 00:21:58,940
little bit about cold boot with lambdas

00:21:56,450 --> 00:22:01,280
how they execute is there these

00:21:58,940 --> 00:22:04,190
ephemeral containers like somebody

00:22:01,280 --> 00:22:07,250
accesses your URL and then a container

00:22:04,190 --> 00:22:09,260
spins up it npm installs JavaScript

00:22:07,250 --> 00:22:12,050
ecosystem NPM installs your dependencies

00:22:09,260 --> 00:22:14,030
gets ready then execute the

00:22:12,050 --> 00:22:16,340
function with importing your npm modules

00:22:14,030 --> 00:22:18,860
returns value there's a bit of ceremony

00:22:16,340 --> 00:22:20,660
there and that ceremony can take time

00:22:18,860 --> 00:22:23,840
that's called a cold boot this is best

00:22:20,660 --> 00:22:25,790
visualized with this graphic here so a

00:22:23,840 --> 00:22:27,920
request comes in and it downloads your

00:22:25,790 --> 00:22:31,160
code and boots and then your code runs

00:22:27,920 --> 00:22:33,140
once your code runs every the function

00:22:31,160 --> 00:22:35,150
is considered hot or warm it's ready to

00:22:33,140 --> 00:22:38,540
serve more requests and it stays hot for

00:22:35,150 --> 00:22:43,070
a while but after a while they wind down

00:22:38,540 --> 00:22:47,030
and go cold again there's a typo in the

00:22:43,070 --> 00:22:48,380
text I hope you don't see it and after a

00:22:47,030 --> 00:22:49,760
while late so that's kind of how cool

00:22:48,380 --> 00:22:51,920
boot work so we wanted to test which

00:22:49,760 --> 00:22:55,940
framework required the most resources to

00:22:51,920 --> 00:22:58,940
start let's talk briefly about the code

00:22:55,940 --> 00:23:03,530
involved the code for all of the reddit

00:22:58,940 --> 00:23:07,010
examples would react react and the HTML

00:23:03,530 --> 00:23:09,800
I believe was the same code exactly the

00:23:07,010 --> 00:23:11,810
same code how do you do that well using

00:23:09,800 --> 00:23:15,110
this thing how many of you have heard of

00:23:11,810 --> 00:23:18,140
hyper script I can count on my fingers

00:23:15,110 --> 00:23:20,450
like five hyper script is kind of just a

00:23:18,140 --> 00:23:22,520
function signature and it's the function

00:23:20,450 --> 00:23:25,160
signature of something year may be more

00:23:22,520 --> 00:23:26,990
familiar with react create element it

00:23:25,160 --> 00:23:29,510
takes the tag of the element the props

00:23:26,990 --> 00:23:31,250
and the children and pre-act and the

00:23:29,510 --> 00:23:33,740
HTML they implement this interface as

00:23:31,250 --> 00:23:35,480
well and so what we ended up doing was

00:23:33,740 --> 00:23:37,880
you just kind of assign h to one of

00:23:35,480 --> 00:23:39,110
these three and the rest of the code

00:23:37,880 --> 00:23:43,040
stays exactly the same

00:23:39,110 --> 00:23:44,210
it was really cool for view and lit HTML

00:23:43,040 --> 00:23:45,560
we had to take a different strategy

00:23:44,210 --> 00:23:49,340
because with view you work with view

00:23:45,560 --> 00:23:51,110
instances but we ended up copying the

00:23:49,340 --> 00:23:53,390
HTML string rendered and just

00:23:51,110 --> 00:23:55,280
interpolating with some view there it's

00:23:53,390 --> 00:23:57,890
important to note here let HTML doesn't

00:23:55,280 --> 00:24:02,210
have a note implementation I don't

00:23:57,890 --> 00:24:04,100
believe so we used a fork and so the

00:24:02,210 --> 00:24:06,980
moment we've all been waiting for

00:24:04,100 --> 00:24:10,550
the talk is almost over no we're gonna

00:24:06,980 --> 00:24:12,290
look at the results of this briefly but

00:24:10,550 --> 00:24:14,900
again as I said in the beginning there's

00:24:12,290 --> 00:24:16,790
better what do not have like a blog

00:24:14,900 --> 00:24:19,880
that's all lambdas I'm not sure that's

00:24:16,790 --> 00:24:22,040
the best way to do it the but if we're

00:24:19,880 --> 00:24:24,320
talking about the fastest the best

00:24:22,040 --> 00:24:25,220
framework on service the answer is very

00:24:24,320 --> 00:24:27,350
much no don't

00:24:25,220 --> 00:24:29,990
do it don't do it really just use the

00:24:27,350 --> 00:24:31,870
platform it's amazing seriously you can

00:24:29,990 --> 00:24:33,830
even use the jam stack or like vanilla

00:24:31,870 --> 00:24:34,720
seriously like just don't don't even

00:24:33,830 --> 00:24:39,260
anyway

00:24:34,720 --> 00:24:40,850
have I made my point but the results

00:24:39,260 --> 00:24:47,860
regardless in case you're curious about

00:24:40,850 --> 00:24:50,659
numbers are V hTML is really fast and

00:24:47,860 --> 00:24:52,370
you just write JSX it looks just like

00:24:50,659 --> 00:24:55,760
react but what ends up happening is it

00:24:52,370 --> 00:24:57,500
doesn't have a virtual Dom and that's

00:24:55,760 --> 00:25:00,980
why it's fast so what it does it takes

00:24:57,500 --> 00:25:03,409
your like JSX and turns it into a string

00:25:00,980 --> 00:25:06,289
of HTML that you can then return from

00:25:03,409 --> 00:25:08,870
your lambda and because of this super

00:25:06,289 --> 00:25:11,960
fast and super light coming in at 28

00:25:08,870 --> 00:25:13,820
kilobytes pre-act naturally was the

00:25:11,960 --> 00:25:17,030
second in fact if you chose to do this

00:25:13,820 --> 00:25:19,100
for Reno for science you could serve a

00:25:17,030 --> 00:25:20,750
render the HTML hydrate with pre-act and

00:25:19,100 --> 00:25:23,360
you have a really fast and pleasant

00:25:20,750 --> 00:25:27,020
experience unfortunately coming up at

00:25:23,360 --> 00:25:29,510
the rear was view which i don't think is

00:25:27,020 --> 00:25:32,299
necessarily a bad thing the purpose of

00:25:29,510 --> 00:25:35,600
this study kind of like the purpose of

00:25:32,299 --> 00:25:37,220
this talk is to get us a little bit more

00:25:35,600 --> 00:25:38,750
serious about service right is to get us

00:25:37,220 --> 00:25:42,650
to think about serverless a bit more

00:25:38,750 --> 00:25:44,630
it's not to bash view what is to think

00:25:42,650 --> 00:25:46,929
about service and so I was actually

00:25:44,630 --> 00:25:49,580
quite I feel like my work on this was

00:25:46,929 --> 00:25:53,450
was how do you say it was vindicated was

00:25:49,580 --> 00:25:57,320
was successful because the author of

00:25:53,450 --> 00:25:59,780
view noticed the study and responded

00:25:57,320 --> 00:26:02,090
with maybe will revisit this only

00:25:59,780 --> 00:26:04,100
optimized for service in the future of

00:26:02,090 --> 00:26:06,650
view and this is the goal I think

00:26:04,100 --> 00:26:09,230
because as Nadder said it's so

00:26:06,650 --> 00:26:11,059
eloquently service is the future because

00:26:09,230 --> 00:26:12,679
it's the future I think we all should

00:26:11,059 --> 00:26:16,820
start thinking and optimizing for

00:26:12,679 --> 00:26:19,700
service in the new future with that let

00:26:16,820 --> 00:26:21,860
us land this plane there's been a

00:26:19,700 --> 00:26:23,539
beautiful journey I enjoy talking I

00:26:21,860 --> 00:26:25,760
could talk all day I'm not sure if you

00:26:23,539 --> 00:26:29,870
could listen all day so we'll we'll wrap

00:26:25,760 --> 00:26:32,450
it up we talked about how serverless is

00:26:29,870 --> 00:26:34,429
the future we looked at how coca-cola

00:26:32,450 --> 00:26:36,590
square-enix others are really

00:26:34,429 --> 00:26:38,690
benefitting for serverless we looked at

00:26:36,590 --> 00:26:40,910
how community matters see I

00:26:38,690 --> 00:26:42,950
like some of you may not get the weight

00:26:40,910 --> 00:26:46,160
the potential of service to be truly

00:26:42,950 --> 00:26:49,940
legendary because for most of you you do

00:26:46,160 --> 00:26:53,150
your job and get push and your ops team

00:26:49,940 --> 00:26:56,900
puts it in the cloud your ops team

00:26:53,150 --> 00:27:00,130
though may be losing sleep your company

00:26:56,900 --> 00:27:02,900
may be spending more than necessary

00:27:00,130 --> 00:27:06,380
maybe it doesn't directly impact you but

00:27:02,900 --> 00:27:09,980
I truly believe serverless has a

00:27:06,380 --> 00:27:11,930
positive impact on your company and your

00:27:09,980 --> 00:27:15,320
team but by and large the positive

00:27:11,930 --> 00:27:18,230
impact as I mentioned is in poor

00:27:15,320 --> 00:27:20,240
communities financially it brings the

00:27:18,230 --> 00:27:23,090
cloud down it makes it respond it makes

00:27:20,240 --> 00:27:24,920
it available to the rest of us and I

00:27:23,090 --> 00:27:27,590
truly believe through these legendary

00:27:24,920 --> 00:27:29,870
lambdas we're going to see the world

00:27:27,590 --> 00:27:32,240
change for the better we're gonna see

00:27:29,870 --> 00:27:35,320
India develop and other nations like it

00:27:32,240 --> 00:27:37,540
develop faster that lead to human

00:27:35,320 --> 00:27:39,410
satisfaction happiness joy and

00:27:37,540 --> 00:27:42,590
flourishing and with that I want to say

00:27:39,410 --> 00:27:45,820
thank you very much for your time and

00:27:42,590 --> 00:27:45,820
for listening

00:27:46,669 --> 00:27:48,730

YouTube URL: https://www.youtube.com/watch?v=RluWQ8Lfyg8


