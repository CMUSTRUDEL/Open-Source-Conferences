Title: Making things fast in world of build tools by Surma & Jake Archibald | JSConf Budapest 2019
Publication date: 2019-11-07
Playlist: JSConf Budapest 2019
Description: 
	https://2019.jsconfbp.com/speakers/jake_surma

A lot of performance optimisations are easy on paper, but difficult in reality. Jake & Surma dig into look at the optimisations they made for https://proxx.app, and dig into the build tools that made them possible.
Captions: 
	00:00:00,000 --> 00:00:02,430
[Applause]

00:00:03,529 --> 00:00:16,410
we are anxiously waiting I mean oh the

00:00:15,210 --> 00:00:19,560
other way it's giveaway it's always the

00:00:16,410 --> 00:00:21,960
other way right yeah we good I think

00:00:19,560 --> 00:00:23,279
we're good press press the have to think

00:00:21,960 --> 00:00:25,099
right okay okay oh the full screen yeah

00:00:23,279 --> 00:00:30,150
yeah yeah

00:00:25,099 --> 00:00:34,079
f4 full screen there we go yeah oh okay

00:00:30,150 --> 00:00:35,760
right ah so earlier this year a few of

00:00:34,079 --> 00:00:37,530
us went on a fact-finding mission to

00:00:35,760 --> 00:00:39,000
India to see how folks use the in turn

00:00:37,530 --> 00:00:41,520
out there and one thing stood out to us

00:00:39,000 --> 00:00:43,800
and that is that feature phones are back

00:00:41,520 --> 00:00:45,989
yeah the future phone market doubled in

00:00:43,800 --> 00:00:48,329
2018 in India and the sale of

00:00:45,989 --> 00:00:50,219
smartphones by kind of flattened out and

00:00:48,329 --> 00:00:53,430
at the current rate to this projected

00:00:50,219 --> 00:00:55,829
that 400 million feature phones will be

00:00:53,430 --> 00:00:57,840
sold in India this year alone yes and

00:00:55,829 --> 00:00:59,940
the one on the right over there the very

00:00:57,840 --> 00:01:02,699
far end that is a geophone which is the

00:00:59,940 --> 00:01:05,159
most popular brand and it costs just 15

00:01:02,699 --> 00:01:07,979
pounds and I compared to all the phones

00:01:05,159 --> 00:01:10,250
you all have here everything about all

00:01:07,979 --> 00:01:13,110
of these phones is extremely it's

00:01:10,250 --> 00:01:15,900
240 pixels wide it's single pixel

00:01:13,110 --> 00:01:17,960
density there is no touchscreen and the

00:01:15,900 --> 00:01:21,509
CPU is god-awful

00:01:17,960 --> 00:01:23,880
but it's 15 quid and that allows people

00:01:21,509 --> 00:01:26,280
to be on the internet that previously

00:01:23,880 --> 00:01:27,659
couldn't afford to be there yes and also

00:01:26,280 --> 00:01:30,000
the geophone on the end there this is a

00:01:27,659 --> 00:01:32,729
web-based phone that is running Kai OS

00:01:30,000 --> 00:01:34,290
which is a fork of the old Firefox OS so

00:01:32,729 --> 00:01:36,630
this phone is kind of is running Firefox

00:01:34,290 --> 00:01:37,530
42 for pretty much everything so a

00:01:36,630 --> 00:01:44,899
little team of us got together

00:01:37,530 --> 00:01:44,899
consisting of Surma Jake and Mary Coe

00:01:45,950 --> 00:01:49,710
she's in America Mike Mike is in America

00:01:48,689 --> 00:01:51,990
America is that way

00:01:49,710 --> 00:01:54,689
if you actually think it's quicker to go

00:01:51,990 --> 00:01:58,380
that way that way yeah either way if you

00:01:54,689 --> 00:01:59,850
just keep your phone so yeah what we

00:01:58,380 --> 00:02:02,579
wanted to see if it could we build an

00:01:59,850 --> 00:02:05,399
interactive web experience that would

00:02:02,579 --> 00:02:07,560
run on devices like this but you know

00:02:05,399 --> 00:02:10,679
with responsive design and progressive

00:02:07,560 --> 00:02:13,060
enhancement and enabling it to also

00:02:10,679 --> 00:02:15,250
scale up to something that looks

00:02:13,060 --> 00:02:18,580
on a desktop yes and that thing became

00:02:15,250 --> 00:02:20,709
procs it is a game if you like

00:02:18,580 --> 00:02:23,550
minesweeper you will like procs because

00:02:20,709 --> 00:02:25,930
it's the same play it now on proxy a p--

00:02:23,550 --> 00:02:28,000
so here's on desktop and as you can tell

00:02:25,930 --> 00:02:30,250
like we through all the animations at it

00:02:28,000 --> 00:02:32,739
and like make it fancy but keep in mind

00:02:30,250 --> 00:02:35,380
this entire thing scales down nicely and

00:02:32,739 --> 00:02:37,840
is playable on one of these 15 quid

00:02:35,380 --> 00:02:39,400
feature phones with the exact same code

00:02:37,840 --> 00:02:41,200
base yeah so we put a lot of effort into

00:02:39,400 --> 00:02:42,280
making it run really fast so we figured

00:02:41,200 --> 00:02:43,989
we'd go through some of the tricks and

00:02:42,280 --> 00:02:46,000
techniques that we use because none of

00:02:43,989 --> 00:02:47,620
its really unique to this particular web

00:02:46,000 --> 00:02:50,440
app it's stuff that you can apply to any

00:02:47,620 --> 00:02:52,330
site or all right but before we dive in

00:02:50,440 --> 00:02:54,670
I think it's important that we address a

00:02:52,330 --> 00:02:58,810
question that we still often see on

00:02:54,670 --> 00:03:01,390
Twitter yes should I care about

00:02:58,810 --> 00:03:04,239
performance should I care about

00:03:01,390 --> 00:03:12,250
performance should I care about

00:03:04,239 --> 00:03:15,220
performance I'll go to article 4 this is

00:03:12,250 --> 00:03:18,100
this one on web fundamentals there by

00:03:15,220 --> 00:03:21,160
Jeremy Jeremy where are you where is it

00:03:18,100 --> 00:03:23,230
he's actually here is he here he's

00:03:21,160 --> 00:03:24,489
supposed to be here the guy said to me

00:03:23,230 --> 00:03:28,329
last night really looking forward to

00:03:24,489 --> 00:03:30,519
your talk Jake where are you man it's

00:03:28,329 --> 00:03:32,350
just rude fine

00:03:30,519 --> 00:03:35,110
well okay well if you want to read

00:03:32,350 --> 00:03:37,630
Jeremy's article whatever you can find

00:03:35,110 --> 00:03:39,430
it at this bitly link it's like your

00:03:37,630 --> 00:03:41,079
points to all these web performance

00:03:39,430 --> 00:03:44,519
studies carried out by a variety of

00:03:41,079 --> 00:03:47,859
companies such as Pinterest who reduced

00:03:44,519 --> 00:03:50,829
their perceived wait times by 40% and so

00:03:47,859 --> 00:03:52,090
on increase by 15% in signups or cookie

00:03:50,829 --> 00:03:53,200
reduced a load time by under 50

00:03:52,090 --> 00:03:54,459
milliseconds and saw an increase in

00:03:53,200 --> 00:03:55,810
conversions on session time or the BBC

00:03:54,459 --> 00:03:56,769
velocity initial times of users and

00:03:55,810 --> 00:03:58,090
everything that's how they paid it to

00:03:56,769 --> 00:03:59,799
load or also anything huge is playful

00:03:58,090 --> 00:04:02,380
time by half and some boost in sales

00:03:59,799 --> 00:04:04,359
well no but responded by 250 seconds

00:04:02,380 --> 00:04:06,220
terms ignition supply right although

00:04:04,359 --> 00:04:08,320
that's a large variety of sites like

00:04:06,220 --> 00:04:10,239
we'd still see folks saying like mmm

00:04:08,320 --> 00:04:12,220
this yeah it's all very interesting but

00:04:10,239 --> 00:04:14,140
it doesn't apply to my sites because

00:04:12,220 --> 00:04:15,790
like my site is somehow different yeah

00:04:14,140 --> 00:04:17,410
they sound like one aspect in the study

00:04:15,790 --> 00:04:18,789
that they feel like their own site

00:04:17,410 --> 00:04:21,729
doesn't match too and therefore the

00:04:18,789 --> 00:04:24,880
entire evidence provided is invalid we

00:04:21,729 --> 00:04:26,100
don't buy that now I think everyone in

00:04:24,880 --> 00:04:28,350
this room right is a you

00:04:26,100 --> 00:04:30,690
of software we know how frustrating it

00:04:28,350 --> 00:04:32,790
is when something performs badly and low

00:04:30,690 --> 00:04:34,110
time is just such a big part that the

00:04:32,790 --> 00:04:35,730
performance optimizations if you're

00:04:34,110 --> 00:04:38,790
going to talk about in this talk are

00:04:35,730 --> 00:04:42,210
pretty simple dead easy literally two

00:04:38,790 --> 00:04:44,340
minutes on paper but when you've got a

00:04:42,210 --> 00:04:46,530
build system wrapped around your project

00:04:44,340 --> 00:04:48,450
as most of us do just adding something

00:04:46,530 --> 00:04:49,650
like a tag to a page can become like a

00:04:48,450 --> 00:04:51,450
real pain so we're going to take a look

00:04:49,650 --> 00:04:54,180
at that side of things as well so let's

00:04:51,450 --> 00:04:56,730
rewind to the first alpha version of

00:04:54,180 --> 00:04:58,380
trucks before we had done any of our

00:04:56,730 --> 00:04:59,910
performance work yes this is totally the

00:04:58,380 --> 00:05:01,490
real alpha version not a version we just

00:04:59,910 --> 00:05:04,710
retrofitted for the sake of the shut up

00:05:01,490 --> 00:05:07,380
you're ruining the illusion I'm sorry so

00:05:04,710 --> 00:05:09,720
aside from being a bit slow it wasn't

00:05:07,380 --> 00:05:11,850
really all that different from your

00:05:09,720 --> 00:05:14,460
average everyday JavaScript driven app

00:05:11,850 --> 00:05:15,500
yeah so HTML was pretty basic right it

00:05:14,460 --> 00:05:17,220
content a little bit of metadata

00:05:15,500 --> 00:05:19,110
JavaScript file that took care of

00:05:17,220 --> 00:05:20,670
populating the page we've got a style

00:05:19,110 --> 00:05:23,340
sheet there that star sheet is just for

00:05:20,670 --> 00:05:25,430
a web font the rest of our CSS was

00:05:23,340 --> 00:05:28,320
embedded in our JavaScript via post CSS

00:05:25,430 --> 00:05:31,200
the notable difference from most web

00:05:28,320 --> 00:05:35,010
apps I think is that we used pre-act

00:05:31,200 --> 00:05:38,250
instead of react react is 33k pre-act is

00:05:35,010 --> 00:05:39,870
3k react can do much more but none of

00:05:38,250 --> 00:05:41,970
the things that it can do more we

00:05:39,870 --> 00:05:44,520
actually needed so for us was really

00:05:41,970 --> 00:05:45,930
like a no-brainer to be able to save 30k

00:05:44,520 --> 00:05:47,130
it's straight out the start yes

00:05:45,930 --> 00:05:49,380
absolutely any other difference is we

00:05:47,130 --> 00:05:50,940
used roll-up basically because we wanted

00:05:49,380 --> 00:05:52,470
to give it a try like we'd use roll-up

00:05:50,940 --> 00:05:55,140
in before for like libraries and stuff

00:05:52,470 --> 00:05:56,760
but but not for full web apps so if the

00:05:55,140 --> 00:06:00,150
last year we build a web app called

00:05:56,760 --> 00:06:03,180
sploosh and to build swoosh we used web

00:06:00,150 --> 00:06:07,500
hack and when I say we I really mean our

00:06:03,180 --> 00:06:13,740
colleague Jason handle the back side of

00:06:07,500 --> 00:06:16,920
things and he basically had to make use

00:06:13,740 --> 00:06:20,730
of lots of undocumented and internal web

00:06:16,920 --> 00:06:23,790
pack api's just to achieve basic stuff

00:06:20,730 --> 00:06:25,650
and he has years of web pack experiences

00:06:23,790 --> 00:06:28,650
really comfortable with it the two of us

00:06:25,650 --> 00:06:29,730
on the other hand don't yes so as a

00:06:28,650 --> 00:06:31,830
result like we didn't understand the

00:06:29,730 --> 00:06:34,140
project build system if something went

00:06:31,830 --> 00:06:35,610
wrong that was non-trivial which most of

00:06:34,140 --> 00:06:37,380
it was non-trivial

00:06:35,610 --> 00:06:38,500
we were kind of helpless until Jason

00:06:37,380 --> 00:06:40,690
woke up on the other side of the

00:06:38,500 --> 00:06:43,030
and talking to some other teams

00:06:40,690 --> 00:06:44,680
internally and exhale we hear similar

00:06:43,030 --> 00:06:46,090
stories there's like one or two people

00:06:44,680 --> 00:06:47,830
who are considered the webpack

00:06:46,090 --> 00:06:49,780
whisperers on the team it's their sole

00:06:47,830 --> 00:06:52,270
job to like maintain the built system

00:06:49,780 --> 00:06:54,250
and nobody else actually really dares to

00:06:52,270 --> 00:06:55,630
touch it and maybe this sounds too

00:06:54,250 --> 00:06:58,840
familiar to some of the people here in

00:06:55,630 --> 00:07:00,970
the room yes so when I use webpack I

00:06:58,840 --> 00:07:03,100
don't feel like I'm using JavaScript I

00:07:00,970 --> 00:07:04,360
feel like I'm switching like pulling

00:07:03,100 --> 00:07:06,700
levers switching switches and I get

00:07:04,360 --> 00:07:08,470
massive config objects like and herding

00:07:06,700 --> 00:07:09,730
lots of plugins around a varying quality

00:07:08,470 --> 00:07:11,830
that often don't really play well

00:07:09,730 --> 00:07:14,020
together yeah and so we tried roll up

00:07:11,830 --> 00:07:15,400
and we found lots of plugins of varying

00:07:14,020 --> 00:07:18,400
quality that don't really play well

00:07:15,400 --> 00:07:20,080
together but the big difference is mere

00:07:18,400 --> 00:07:21,820
mortals can write their own plugins roll

00:07:20,080 --> 00:07:23,380
up has this simple well-documented

00:07:21,820 --> 00:07:25,000
plug-in system so it's easy to get

00:07:23,380 --> 00:07:26,530
involved in the innards of the build now

00:07:25,000 --> 00:07:28,510
if you know enough JavaScript to wrangle

00:07:26,530 --> 00:07:30,430
a web pack config you know more than

00:07:28,510 --> 00:07:32,169
enough to write a rollup plug-in and we

00:07:30,430 --> 00:07:34,360
knew we were going to do unusual stuff

00:07:32,169 --> 00:07:36,730
if it was clear to us and on these super

00:07:34,360 --> 00:07:38,350
low end feature phones it's gonna be

00:07:36,730 --> 00:07:41,410
hard to have everything on the main

00:07:38,350 --> 00:07:43,270
thread so we wanted to make workers core

00:07:41,410 --> 00:07:43,720
part of our architecture straight from

00:07:43,270 --> 00:07:46,180
the start

00:07:43,720 --> 00:07:48,220
yes and there's you know the problem is

00:07:46,180 --> 00:07:49,840
that we now have multiple threads and

00:07:48,220 --> 00:07:52,000
the problem is that there's often shared

00:07:49,840 --> 00:07:53,860
dependencies between these multiple

00:07:52,000 --> 00:07:55,120
plant fats so to solve that we use

00:07:53,860 --> 00:07:56,500
common link and that facilitates the

00:07:55,120 --> 00:07:59,200
communication between workers the main

00:07:56,500 --> 00:08:00,790
thread library that you wrote but that

00:07:59,200 --> 00:08:02,320
means that library needs to appear you

00:08:00,790 --> 00:08:04,240
know on all of the workers and on the

00:08:02,320 --> 00:08:05,710
main thread now web pack can't share

00:08:04,240 --> 00:08:07,390
chunks between workers and the main

00:08:05,710 --> 00:08:09,580
thread so news would end up downloading

00:08:07,390 --> 00:08:11,500
it well at least twice once for every

00:08:09,580 --> 00:08:13,479
worker plus one and this would happen

00:08:11,500 --> 00:08:15,910
for each additional shared dependency

00:08:13,479 --> 00:08:17,530
and the roll-up kind of handles this for

00:08:15,910 --> 00:08:20,410
free out of the box because at least the

00:08:17,530 --> 00:08:21,669
choice of format up to you yeah it

00:08:20,410 --> 00:08:23,590
wasn't just JavaScript needed handle

00:08:21,669 --> 00:08:26,590
either because you know we needed HTML

00:08:23,590 --> 00:08:31,210
as well and there is what plugin for you

00:08:26,590 --> 00:08:34,270
to create HTML for your project but here

00:08:31,210 --> 00:08:37,030
is the code for that plugin and its

00:08:34,270 --> 00:08:39,789
massive and again it relies on loads of

00:08:37,030 --> 00:08:41,560
internal and undocumented parts of web

00:08:39,789 --> 00:08:44,530
pack yeah this booking is so big it has

00:08:41,560 --> 00:08:46,000
its own plug-in ecosystem as well and

00:08:44,530 --> 00:08:48,070
it's kind of the way it works it doesn't

00:08:46,000 --> 00:08:49,510
really want you touching the HTML itself

00:08:48,070 --> 00:08:50,810
instead it wants you to learn the

00:08:49,510 --> 00:08:52,759
configuration options and

00:08:50,810 --> 00:08:55,129
you know all of that and learn all of

00:08:52,759 --> 00:08:57,019
their quirks as well like it turns out

00:08:55,129 --> 00:08:58,430
that your skills in HTML which I imagine

00:08:57,019 --> 00:09:00,139
even many of us already have they are

00:08:58,430 --> 00:09:01,939
completely useless when you're using

00:09:00,139 --> 00:09:03,259
this plugin so we try to find the

00:09:01,939 --> 00:09:04,790
equivalent plugin for roll-up and

00:09:03,259 --> 00:09:08,209
couldn't find one to make us comparison

00:09:04,790 --> 00:09:10,579
fair so we decided to write our own so

00:09:08,209 --> 00:09:12,829
roller plugins are just functions that

00:09:10,579 --> 00:09:14,540
return objects and that object has a

00:09:12,829 --> 00:09:16,399
name key just so that your plugin can

00:09:14,540 --> 00:09:18,110
have a name and Rob can generate nice

00:09:16,399 --> 00:09:19,850
error messages and debug messages and

00:09:18,110 --> 00:09:22,970
the rest of his object are just

00:09:19,850 --> 00:09:24,459
callbacks for the various stages of the

00:09:22,970 --> 00:09:26,540
build and these are all very

00:09:24,459 --> 00:09:27,680
well-documented yeah so the one we're

00:09:26,540 --> 00:09:29,899
gonna use for this one so we're gonna

00:09:27,680 --> 00:09:31,639
use the generate bundle hook and this is

00:09:29,899 --> 00:09:33,740
called just before it writes everything

00:09:31,639 --> 00:09:35,389
to disk you get the options that roll-up

00:09:33,740 --> 00:09:37,449
was called with there and you also get

00:09:35,389 --> 00:09:40,040
this bundle object which looks like this

00:09:37,449 --> 00:09:42,529
this tells you everything about the the

00:09:40,040 --> 00:09:43,970
build you know so so as for the

00:09:42,529 --> 00:09:45,920
JavaScript files for example you get the

00:09:43,970 --> 00:09:48,079
initial path the path the source file

00:09:45,920 --> 00:09:50,930
you get the output filename which has

00:09:48,079 --> 00:09:53,149
been hashed for long paths which are

00:09:50,930 --> 00:09:56,089
caching and but it also loads of other

00:09:53,149 --> 00:10:00,050
data like dependencies and which exports

00:09:56,089 --> 00:10:02,449
it has and JavaScript files you do get a

00:10:00,050 --> 00:10:04,040
subset of this kind of information did I

00:10:02,449 --> 00:10:05,329
go too fast through my bit and not keep

00:10:04,040 --> 00:10:06,559
time to open the bottle I'm sorry is

00:10:05,329 --> 00:10:08,300
that the fizzy water or the still water

00:10:06,559 --> 00:10:14,089
I feel very strongly about this stuff

00:10:08,300 --> 00:10:15,920
which will that still okay right yes so

00:10:14,089 --> 00:10:17,389
this is the whole build config tells us

00:10:15,920 --> 00:10:19,819
everything about what's going on inside

00:10:17,389 --> 00:10:22,189
roll ups little world but we can use

00:10:19,819 --> 00:10:23,120
this to create our HTML so what we're

00:10:22,189 --> 00:10:26,149
going to do is we're going to load an

00:10:23,120 --> 00:10:27,589
ejs templates and compile it and now you

00:10:26,149 --> 00:10:29,209
know we're just using a GS as an example

00:10:27,589 --> 00:10:31,040
well it's the one we use but you can use

00:10:29,209 --> 00:10:33,679
any templating language you want like

00:10:31,040 --> 00:10:35,179
roll up doesn't care all we all it cares

00:10:33,679 --> 00:10:36,829
about is it wants to know about this

00:10:35,179 --> 00:10:38,720
HTML and it wants to know where to write

00:10:36,829 --> 00:10:41,300
it to so we're going to use roll-ups

00:10:38,720 --> 00:10:42,949
Amit file method there you tell it's an

00:10:41,300 --> 00:10:44,509
asset and you give it a file name and

00:10:42,949 --> 00:10:46,220
you give it the source of the HTML and

00:10:44,509 --> 00:10:48,709
now roll up will write that file along

00:10:46,220 --> 00:10:50,209
with everything else so here's our

00:10:48,709 --> 00:10:53,089
template now we've got a placeholder

00:10:50,209 --> 00:10:54,829
here for the JavaScript file name which

00:10:53,089 --> 00:10:57,199
we don't know ahead of time because as I

00:10:54,829 --> 00:10:59,899
said roll up will add a hash to the file

00:10:57,199 --> 00:11:01,910
name so we need to pass in that final

00:10:59,899 --> 00:11:02,810
file name into our templating engine

00:11:01,910 --> 00:11:05,600
after half

00:11:02,810 --> 00:11:07,490
and we can get this as I said from the

00:11:05,600 --> 00:11:09,290
bundle object since it tells us both the

00:11:07,490 --> 00:11:11,690
input path in the output path so we

00:11:09,290 --> 00:11:13,460
create little helper here called get J s

00:11:11,690 --> 00:11:16,550
which we just goes to the bundle and

00:11:13,460 --> 00:11:18,680
finds the corresponding file yes so now

00:11:16,550 --> 00:11:20,030
all we need to do is add that new

00:11:18,680 --> 00:11:21,770
plug-in into our rule of config and

00:11:20,030 --> 00:11:23,390
that's it we're done

00:11:21,770 --> 00:11:26,780
now you know everything you need to know

00:11:23,390 --> 00:11:28,520
to write a rollup plug-in and I realized

00:11:26,780 --> 00:11:30,620
that you know that it's a pretty quick

00:11:28,520 --> 00:11:33,170
introduction just throw at you but again

00:11:30,620 --> 00:11:36,020
compare it to the web pack version and

00:11:33,170 --> 00:11:38,540
I'd argue that what we wrote is simpler

00:11:36,020 --> 00:11:39,920
just a little bit and and the good thing

00:11:38,540 --> 00:11:41,540
is that everyone on our team I think

00:11:39,920 --> 00:11:43,190
felt like they were comfortable with

00:11:41,540 --> 00:11:45,410
touching that piece of code and

00:11:43,190 --> 00:11:47,600
adjusting the plugin if it needed any

00:11:45,410 --> 00:11:49,220
kind of changing and even better like

00:11:47,600 --> 00:11:51,320
we're writing code to do what we want

00:11:49,220 --> 00:11:52,640
rather than wrangling config so if we

00:11:51,320 --> 00:11:54,170
wanted our HTML to be a slightly

00:11:52,640 --> 00:11:55,520
different shape we could just go into

00:11:54,170 --> 00:11:57,790
the template and change it on to add a

00:11:55,520 --> 00:12:00,680
new tag rearrange things it's just HTML

00:11:57,790 --> 00:12:02,420
but what do we actually need to change

00:12:00,680 --> 00:12:04,310
to make things faster so I was slow on

00:12:02,420 --> 00:12:06,110
the slow end on the flow and phones but

00:12:04,310 --> 00:12:08,240
we need to figure out where procs was

00:12:06,110 --> 00:12:11,780
actually using performance our tool of

00:12:08,240 --> 00:12:13,220
choice for testing websites in as real

00:12:11,780 --> 00:12:16,070
world conditions as possible

00:12:13,220 --> 00:12:18,500
it's webpagetest.org it lets you run

00:12:16,070 --> 00:12:20,240
tests on real devices which makes a big

00:12:18,500 --> 00:12:23,060
difference and also has an excellent

00:12:20,240 --> 00:12:25,070
emulation of worse network connections

00:12:23,060 --> 00:12:28,220
yeah I always like to test on a moto G

00:12:25,070 --> 00:12:29,420
for this is a fairly old now phone it

00:12:28,220 --> 00:12:30,920
was a mid-range phone even when it came

00:12:29,420 --> 00:12:32,330
out but it's not dissimilar to the kind

00:12:30,920 --> 00:12:34,190
of phones that a lot of people have in

00:12:32,330 --> 00:12:36,170
the world we're also going to test on a

00:12:34,190 --> 00:12:37,400
3G connection and 3G is actually a

00:12:36,170 --> 00:12:39,950
really good speed to measure I know

00:12:37,400 --> 00:12:43,070
we're mostly used to here to like 4G and

00:12:39,950 --> 00:12:44,960
LTE and maybe even 5g soon but you know

00:12:43,070 --> 00:12:46,670
often due to signal strength and

00:12:44,960 --> 00:12:48,500
contention you will be experiencing

00:12:46,670 --> 00:12:50,690
speeds closer to 3G and sometimes even

00:12:48,500 --> 00:12:53,390
worse so here's the results for the very

00:12:50,690 --> 00:12:54,920
first version of procs before we'd

00:12:53,390 --> 00:12:56,240
optimized it and whenever I look at

00:12:54,920 --> 00:12:57,650
webpagetest the first thing I look at is

00:12:56,240 --> 00:12:59,390
this film strip along the top because

00:12:57,650 --> 00:13:02,360
there that shows us what the user sees

00:12:59,390 --> 00:13:05,870
as the site is downloading yeah so let's

00:13:02,360 --> 00:13:11,270
break that down for the first 4.2 second

00:13:05,870 --> 00:13:13,910
the user sees absolutely nothing that's

00:13:11,270 --> 00:13:16,200
what nothing looks like quite literally

00:13:13,910 --> 00:13:19,260
no things totally Finglas

00:13:16,200 --> 00:13:22,829
but out of nothing emerges our first

00:13:19,260 --> 00:13:24,600
render that's our first render we can't

00:13:22,829 --> 00:13:27,000
really count it as interactive though

00:13:24,600 --> 00:13:28,740
until let the user sees the full UI with

00:13:27,000 --> 00:13:30,240
with all of the interactivity and the

00:13:28,740 --> 00:13:31,829
user doesn't get that until they have

00:13:30,240 --> 00:13:33,120
been waiting five point one seconds so

00:13:31,829 --> 00:13:34,949
we're well over that three-second mark

00:13:33,120 --> 00:13:37,350
that causes fifty percent of people to

00:13:34,949 --> 00:13:39,810
abandon according to some studies but

00:13:37,350 --> 00:13:41,279
like we said we are targeting these 15

00:13:39,810 --> 00:13:42,870
dollar feature phones in these fifteen

00:13:41,279 --> 00:13:45,029
dollar feature phones are most popular

00:13:42,870 --> 00:13:48,209
in emerging markets like India and their

00:13:45,029 --> 00:13:51,170
speeds like 2g are much more on a daily

00:13:48,209 --> 00:13:53,910
basis happening so on 2g the user gets

00:13:51,170 --> 00:13:56,370
8.1 seconds of absolutely nothing than a

00:13:53,910 --> 00:13:58,829
pretty useless render and in total it

00:13:56,370 --> 00:14:01,560
takes almost 11 seconds until the user

00:13:58,829 --> 00:14:02,480
can actually start playing the game 11

00:14:01,560 --> 00:14:05,279
seconds let's put that into perspective

00:14:02,480 --> 00:14:06,870
Usain Bolt can run 100 meters quicker

00:14:05,279 --> 00:14:09,779
than it takes to load our dumb game

00:14:06,870 --> 00:14:12,839
right so so all in all the user had to

00:14:09,779 --> 00:14:15,930
load 62 kilobytes before the site was

00:14:12,839 --> 00:14:18,269
actually interactive surely we can do

00:14:15,930 --> 00:14:20,670
better but what is a realistic goal for

00:14:18,269 --> 00:14:22,199
us here and that's what I asked Jake to

00:14:20,670 --> 00:14:24,839
figure out yeah so I went and did some

00:14:22,199 --> 00:14:27,480
competitor analysis and here it is so

00:14:24,839 --> 00:14:30,269
this is a graph of the size of Windows

00:14:27,480 --> 00:14:33,360
minesweeper over time it starts off at

00:14:30,269 --> 00:14:35,040
11 kilobytes in windows 3.11 that's

00:14:33,360 --> 00:14:36,750
pretty small it actually gets smaller

00:14:35,040 --> 00:14:37,980
which is kind of amazing like 9.3

00:14:36,750 --> 00:14:40,170
kilobytes and Windows 95

00:14:37,980 --> 00:14:41,370
much smaller than procs the piece of

00:14:40,170 --> 00:14:44,820
 we made right like they're doing

00:14:41,370 --> 00:14:47,430
really well but then in Windows 2000 it

00:14:44,820 --> 00:14:50,040
became bigger seven times bigger in fact

00:14:47,430 --> 00:14:52,560
70 K now this is now bigger than procs

00:14:50,040 --> 00:14:57,570
the site's crept up again in Windows XP

00:14:52,560 --> 00:14:59,699
there so it's up to 80k but then BAM it

00:14:57,570 --> 00:15:03,329
became 50 times bigger three point eight

00:14:59,699 --> 00:15:09,360
four megabytes in Windows Vista roughly

00:15:03,329 --> 00:15:11,910
the same size in Windows 7 but then BAM

00:15:09,360 --> 00:15:13,980
it became 25 times bigger still it's a

00:15:11,910 --> 00:15:15,720
hundred and four megabytes in Windows 10

00:15:13,980 --> 00:15:17,160
absolutely seriously minesweeper is

00:15:15,720 --> 00:15:20,310
growing so fast we have to switch the

00:15:17,160 --> 00:15:21,959
graph to a logarithmic scale if you

00:15:20,310 --> 00:15:23,760
sometimes wake up at night and worrying

00:15:21,959 --> 00:15:25,290
about how you CSS code base is growing

00:15:23,760 --> 00:15:28,529
on proportion don't worry you're still

00:15:25,290 --> 00:15:30,720
doing better than Microsoft yeah and if

00:15:28,529 --> 00:15:35,310
you analyze this trend which we did by

00:15:30,720 --> 00:15:37,050
2025 - people would be 2 terabytes by

00:15:35,310 --> 00:15:38,190
2030 we predict two thirds of the

00:15:37,050 --> 00:15:40,230
planet's surface will be covered by a

00:15:38,190 --> 00:15:41,190
single hard drive containing one copy of

00:15:40,230 --> 00:15:51,600
Windows minesweeper

00:15:41,190 --> 00:15:52,860
I mean Rotenberg is doing some great

00:15:51,600 --> 00:15:54,449
outreach of raising awareness with

00:15:52,860 --> 00:15:55,439
climate change but really should be

00:15:54,449 --> 00:15:57,390
worrying about the biggest threat to

00:15:55,439 --> 00:15:59,850
mankind which is Microsoft minesweeper

00:15:57,390 --> 00:16:04,529
absolutely so you have my conclusion is

00:15:59,850 --> 00:16:06,600
really that procs is 62k not really

00:16:04,529 --> 00:16:07,949
doing that badly so there you go thank

00:16:06,600 --> 00:16:11,130
you good night thank you for this

00:16:07,949 --> 00:16:13,500
insightful report so but on the other

00:16:11,130 --> 00:16:16,589
hand we do know that my super can be

00:16:13,500 --> 00:16:19,140
done in like 11k 10k that kind of

00:16:16,589 --> 00:16:21,360
territory and so admittedly our version

00:16:19,140 --> 00:16:24,600
has a bit more going on graphically but

00:16:21,360 --> 00:16:26,910
still 62 kilobytes to interactive we

00:16:24,600 --> 00:16:28,110
should probably reduce that yeah we

00:16:26,910 --> 00:16:29,610
probably should so if you want to

00:16:28,110 --> 00:16:30,839
improve the performance of your site and

00:16:29,610 --> 00:16:31,230
you only have like a few minutes to

00:16:30,839 --> 00:16:32,970
spare

00:16:31,230 --> 00:16:35,850
identify the important resources that

00:16:32,970 --> 00:16:36,870
start loading too late and so we're

00:16:35,850 --> 00:16:38,310
looking at the timeline here we're

00:16:36,870 --> 00:16:40,740
getting stuff we're getting this render

00:16:38,310 --> 00:16:42,149
it like 4.2 seconds and our JavaScript

00:16:40,740 --> 00:16:44,600
is loaded at that point so the site is

00:16:42,149 --> 00:16:47,699
completely ready to go but it is useless

00:16:44,600 --> 00:16:49,980
because the text is not rendering you

00:16:47,699 --> 00:16:52,050
guessed it we are using a web font a web

00:16:49,980 --> 00:16:53,819
form so we're using space mono from

00:16:52,050 --> 00:16:56,399
google fonts both the normal and the

00:16:53,819 --> 00:16:58,740
bold version and they're about 10k each

00:16:56,399 --> 00:17:00,569
which as far as web fonts go is it

00:16:58,740 --> 00:17:02,699
actually not that bad so why are they

00:17:00,569 --> 00:17:04,140
giving us so much trouble yes and find

00:17:02,699 --> 00:17:06,720
out we need to dive into the network

00:17:04,140 --> 00:17:08,549
panel of webpagetest or in dev tools it

00:17:06,720 --> 00:17:09,540
gives you the same information and

00:17:08,549 --> 00:17:12,240
here's the pattern that we were seeing

00:17:09,540 --> 00:17:13,530
first off the HTML downloads the filler

00:17:12,240 --> 00:17:14,939
line here is a convention that both

00:17:13,530 --> 00:17:17,370
webpagetest and chrome dev tools

00:17:14,939 --> 00:17:19,890
actually use it means it's setting up a

00:17:17,370 --> 00:17:21,510
new HTTP connection and the thicker line

00:17:19,890 --> 00:17:23,640
is then the time it takes for

00:17:21,510 --> 00:17:25,890
request and response yes and once that's

00:17:23,640 --> 00:17:27,959
done it will download the CSS and then

00:17:25,890 --> 00:17:29,220
it downloads the actual fonts now when

00:17:27,959 --> 00:17:30,570
you're looking at these sort of diagrams

00:17:29,220 --> 00:17:32,130
especially compared to rendering it's

00:17:30,570 --> 00:17:33,930
worth noting that they don't always

00:17:32,130 --> 00:17:35,490
exactly align and that's because once

00:17:33,930 --> 00:17:37,410
the browser is downloaded something it

00:17:35,490 --> 00:17:39,090
then needs to parse and execute it and

00:17:37,410 --> 00:17:41,010
then paint it which takes time so

00:17:39,090 --> 00:17:42,540
there's like an offset compared to you

00:17:41,010 --> 00:17:44,430
know actual painted things on the screen

00:17:42,540 --> 00:17:46,410
anyway the red flag here is that both

00:17:44,430 --> 00:17:48,960
the CSS and the font files have their

00:17:46,410 --> 00:17:50,970
own thin line meaning there's a TP

00:17:48,960 --> 00:17:53,460
connection being set up and this is

00:17:50,970 --> 00:17:55,470
because the CSS is actually on another

00:17:53,460 --> 00:17:57,540
server it's on Fahnestock Google API

00:17:55,470 --> 00:17:58,710
it's calm and so it has to start a new

00:17:57,540 --> 00:18:00,810
connection to actually be able to

00:17:58,710 --> 00:18:02,640
download that file yes but if we look

00:18:00,810 --> 00:18:04,560
inside the actual CSS we can see the

00:18:02,640 --> 00:18:06,900
fonts are actually hosted on yet another

00:18:04,560 --> 00:18:08,790
server so this is fonts G static com so

00:18:06,900 --> 00:18:10,680
that's yet another connection and the

00:18:08,790 --> 00:18:13,050
quick fix here is to copy the CSS in the

00:18:10,680 --> 00:18:15,060
fonts to our own server that way the

00:18:13,050 --> 00:18:16,980
browser can reuse the already existing

00:18:15,060 --> 00:18:19,440
connection and in theory we feel safe

00:18:16,980 --> 00:18:21,240
around a second but wait you can't just

00:18:19,440 --> 00:18:22,980
do that fonts are protected by various

00:18:21,240 --> 00:18:24,600
intellectual property laws including

00:18:22,980 --> 00:18:26,580
trademarks copyrights and design patents

00:18:24,600 --> 00:18:29,490
Cottenham to your own server may violate

00:18:26,580 --> 00:18:31,800
the policy of the rights holder valid

00:18:29,490 --> 00:18:33,510
concerned but doesn't apply when you use

00:18:31,800 --> 00:18:34,740
Google phones all the phones on Google

00:18:33,510 --> 00:18:36,300
phones are open source and have

00:18:34,740 --> 00:18:38,880
permissive licenses that you can just

00:18:36,300 --> 00:18:39,570
copy to your own server Oh disaster

00:18:38,880 --> 00:18:42,210
averted

00:18:39,570 --> 00:18:43,830
I for one will sleep tonight in fact the

00:18:42,210 --> 00:18:46,200
CSS turns out to be so small that we

00:18:43,830 --> 00:18:48,930
might as well just inline it into our

00:18:46,200 --> 00:18:50,490
HTML all about these fonts now the

00:18:48,930 --> 00:18:51,660
browser tries to be smart here when it

00:18:50,490 --> 00:18:53,190
comes to font downloading it won't

00:18:51,660 --> 00:18:55,020
download fonts until it finds something

00:18:53,190 --> 00:18:56,850
on the page that actually needs them so

00:18:55,020 --> 00:18:59,340
that means it waits for the CSS to be

00:18:56,850 --> 00:19:02,190
loaded and then an element appearing on

00:18:59,340 --> 00:19:03,600
it in the dom that contains text that

00:19:02,190 --> 00:19:05,340
needs that font and this is good in some

00:19:03,600 --> 00:19:06,660
ways because it means the browser going

00:19:05,340 --> 00:19:09,780
to avoid downloading fonts it doesn't

00:19:06,660 --> 00:19:11,280
need but in this case we know it needs

00:19:09,780 --> 00:19:14,430
both of those fonts from the very start

00:19:11,280 --> 00:19:16,320
and the answer is a link rel preload tag

00:19:14,430 --> 00:19:17,640
in the head of the document these tags

00:19:16,320 --> 00:19:19,980
basically allow you to tell the browser

00:19:17,640 --> 00:19:21,570
that it should download a thing and keep

00:19:19,980 --> 00:19:23,220
it in memory until it's actually being

00:19:21,570 --> 00:19:25,530
requested by the page and then it's

00:19:23,220 --> 00:19:27,480
already there and with those small

00:19:25,530 --> 00:19:29,070
changes we should see the yellow line

00:19:27,480 --> 00:19:31,680
shrink when we pass it through

00:19:29,070 --> 00:19:32,890
webpagetest the next time that's dude so

00:19:31,680 --> 00:19:37,380
note that

00:19:32,890 --> 00:19:39,970
Wow let's go back let's do it again hey

00:19:37,380 --> 00:19:45,220
don't run Chrome Canary for your slides

00:19:39,970 --> 00:19:47,760
I should know this by now okay have some

00:19:45,220 --> 00:19:51,250
Atari yeah yeah I should have learned oh

00:19:47,760 --> 00:19:53,650
so in theory we should be saving a good

00:19:51,250 --> 00:19:55,210
amount of time here right but we have to

00:19:53,650 --> 00:19:57,429
get it working within the build tools we

00:19:55,210 --> 00:19:59,770
have so this is the plugin we saw before

00:19:57,429 --> 00:20:01,660
the one that creates the HTML what we

00:19:59,770 --> 00:20:03,460
need to do is inline the CSS for our

00:20:01,660 --> 00:20:04,929
fonts and we need to add a preload tag

00:20:03,460 --> 00:20:06,040
for each of them now

00:20:04,929 --> 00:20:07,840
I'm not gonna go for it step by step

00:20:06,040 --> 00:20:09,280
we've only got like 30 minutes or

00:20:07,840 --> 00:20:12,250
whatever but it looks a little bit like

00:20:09,280 --> 00:20:14,950
this whoo there it goes so at the start

00:20:12,250 --> 00:20:17,110
of the build we use roll-ups Amit method

00:20:14,950 --> 00:20:18,640
to bring the fun files into our build so

00:20:17,110 --> 00:20:20,290
now roll-up is aware of these files and

00:20:18,640 --> 00:20:21,669
we'll add hashes to the file name and

00:20:20,290 --> 00:20:23,080
put it into the output folder all these

00:20:21,669 --> 00:20:25,660
little things and when it comes to

00:20:23,080 --> 00:20:28,210
generating our HTML we pass that data

00:20:25,660 --> 00:20:29,770
into our template now so that we can

00:20:28,210 --> 00:20:32,260
where this helper will actually give us

00:20:29,770 --> 00:20:33,880
the final URL off the font files yes

00:20:32,260 --> 00:20:35,740
that means we need to go back into our

00:20:33,880 --> 00:20:38,169
template and we need to loop over that

00:20:35,740 --> 00:20:39,790
font data and output a style tag that

00:20:38,169 --> 00:20:40,990
defines the font and this is just all

00:20:39,790 --> 00:20:43,000
the stuff we passed into the template

00:20:40,990 --> 00:20:44,740
before there's the weight there's the

00:20:43,000 --> 00:20:46,030
source and then we're gonna add a

00:20:44,740 --> 00:20:47,830
preload type for each of those as well

00:20:46,030 --> 00:20:50,080
so what I really like about this that

00:20:47,830 --> 00:20:52,600
the roller plugin handles all the

00:20:50,080 --> 00:20:54,190
roll-up specific stuff like making it

00:20:52,600 --> 00:20:55,870
aware of the files putting them into the

00:20:54,190 --> 00:20:57,669
build pipeline and adding hashes blah

00:20:55,870 --> 00:21:01,450
blah blah blah blah but then for the

00:20:57,669 --> 00:21:03,490
HTML part we use our HTML skills there's

00:21:01,450 --> 00:21:05,200
nothing specific to roll up about this

00:21:03,490 --> 00:21:07,840
template so roll up isn't preventing us

00:21:05,200 --> 00:21:10,419
from rearranging or even adding new HTML

00:21:07,840 --> 00:21:12,280
tags to our markup but we are not done

00:21:10,419 --> 00:21:13,780
yet the fonts aren't the only asset that

00:21:12,280 --> 00:21:15,520
is loading too late at the same time

00:21:13,780 --> 00:21:17,140
like our main script loads and it also

00:21:15,520 --> 00:21:18,669
will load to the other scripts it needs

00:21:17,140 --> 00:21:19,179
so this is the code splitting thing we

00:21:18,669 --> 00:21:20,799
saw before

00:21:19,179 --> 00:21:23,320
because we're sharing scripts between

00:21:20,799 --> 00:21:26,740
the the main thread and workers they sit

00:21:23,320 --> 00:21:28,720
in different files but you know we know

00:21:26,740 --> 00:21:30,610
once again that the main page will

00:21:28,720 --> 00:21:32,590
always need all three of these scripts

00:21:30,610 --> 00:21:34,690
so we should be pre loading those as

00:21:32,590 --> 00:21:36,280
well yeah but the question is what what

00:21:34,690 --> 00:21:37,660
faults should be pre loading we know

00:21:36,280 --> 00:21:40,030
there are dependencies but what are

00:21:37,660 --> 00:21:42,010
their actual names and luckily the role

00:21:40,030 --> 00:21:44,260
of bundle object gives us the answer as

00:21:42,010 --> 00:21:45,230
I said for each JavaScript piece of

00:21:44,260 --> 00:21:47,240
output that we have

00:21:45,230 --> 00:21:49,760
it will list give us an array of files

00:21:47,240 --> 00:21:53,210
that are being directly or statically

00:21:49,760 --> 00:21:55,519
imported so in this case we pass that

00:21:53,210 --> 00:21:58,210
data into our template engine by just

00:21:55,519 --> 00:22:00,950
looking at the dot imports property and

00:21:58,210 --> 00:22:02,750
back over an hour EGS template we can

00:22:00,950 --> 00:22:05,269
now just loop over these dependencies

00:22:02,750 --> 00:22:06,769
and generate a preload tag for each of

00:22:05,269 --> 00:22:08,480
them yeah just like that

00:22:06,769 --> 00:22:10,460
so we've now moved our fonts onto our

00:22:08,480 --> 00:22:11,840
own server we've added some preload tags

00:22:10,460 --> 00:22:14,480
for them and for our scripts as well

00:22:11,840 --> 00:22:16,190
better in theory but what does

00:22:14,480 --> 00:22:19,130
webpagetest tell us about the real-world

00:22:16,190 --> 00:22:21,049
impact well we have eliminated the know

00:22:19,130 --> 00:22:23,450
fonts for I know the second anything is

00:22:21,049 --> 00:22:25,429
on screen its interactive and good to go

00:22:23,450 --> 00:22:27,169
and it's a one-second improvement on 3G

00:22:25,429 --> 00:22:30,500
and a massive three second improvement

00:22:27,169 --> 00:22:32,419
on 2g we haven't really impacted the red

00:22:30,500 --> 00:22:35,120
bar though the time where the user sees

00:22:32,419 --> 00:22:35,929
absolutely nothing yeah and four seconds

00:22:35,120 --> 00:22:38,929
that's a lot of nothing

00:22:35,929 --> 00:22:40,789
eight seconds is a lot a lot of nothing

00:22:38,929 --> 00:22:42,049
this is the part where the user is just

00:22:40,789 --> 00:22:44,899
staring at a white screen they don't

00:22:42,049 --> 00:22:46,700
even know if the server is even think

00:22:44,899 --> 00:22:48,610
about sending them a response so looking

00:22:46,700 --> 00:22:51,169
at webpage tests network waterfall

00:22:48,610 --> 00:22:53,240
confirms that we achieve what we set out

00:22:51,169 --> 00:22:56,659
to do everything that's important is now

00:22:53,240 --> 00:22:58,460
loading in parallel it's just taking too

00:22:56,659 --> 00:22:59,630
long yeah so we have two options here

00:22:58,460 --> 00:23:03,889
like we can have a try and make this

00:22:59,630 --> 00:23:06,380
just shorter by shipping less code or we

00:23:03,889 --> 00:23:08,840
can just make it matter less yep so

00:23:06,380 --> 00:23:11,899
right now we are fully reliant on Java

00:23:08,840 --> 00:23:14,769
Script to put anything on the screen so

00:23:11,899 --> 00:23:17,360
let's put a stop to that let's use

00:23:14,769 --> 00:23:19,340
server-side rendering but at build time

00:23:17,360 --> 00:23:21,740
and that's often called a pre render or

00:23:19,340 --> 00:23:23,630
a static render yeah so we want used to

00:23:21,740 --> 00:23:24,980
see something like this like it's not

00:23:23,630 --> 00:23:26,510
interactive at this stage so we've

00:23:24,980 --> 00:23:28,490
removed all of the the buttons that

00:23:26,510 --> 00:23:30,559
depend on JavaScript but this can appear

00:23:28,490 --> 00:23:31,940
while the JavaScript is loading and this

00:23:30,559 --> 00:23:33,350
really improves the perception of

00:23:31,940 --> 00:23:35,480
performance because the user sees that

00:23:33,350 --> 00:23:36,830
something is happening and then once the

00:23:35,480 --> 00:23:40,159
JavaScript loads it can sort of lazily

00:23:36,830 --> 00:23:42,559
enhance the page and there are a few

00:23:40,159 --> 00:23:44,179
ways to actually do this every Dom

00:23:42,559 --> 00:23:45,950
orchestration framework that is we're

00:23:44,179 --> 00:23:48,769
talking about has a way to generate an

00:23:45,950 --> 00:23:50,960
HTML string from its components and imp

00:23:48,769 --> 00:23:53,840
react and react land that is called

00:23:50,960 --> 00:23:55,460
render to string this is pretty fast

00:23:53,840 --> 00:23:57,769
it's not as fast as a general-purpose

00:23:55,460 --> 00:23:58,850
templating engine but pretty close to

00:23:57,769 --> 00:24:01,840
the point where actually

00:23:58,850 --> 00:24:04,340
people do run this on every request

00:24:01,840 --> 00:24:06,470
although we only want to use its built

00:24:04,340 --> 00:24:08,510
time so super high performance is not as

00:24:06,470 --> 00:24:12,380
big of a requirement for us in this

00:24:08,510 --> 00:24:14,570
particular use case however render to

00:24:12,380 --> 00:24:16,490
string runs an ode and we actually see

00:24:14,570 --> 00:24:18,980
that as kind of a downside because if

00:24:16,490 --> 00:24:19,970
you have any codes in your components

00:24:18,980 --> 00:24:22,280
that assumes to be running in the

00:24:19,970 --> 00:24:24,440
browser which usually is a fair

00:24:22,280 --> 00:24:26,750
assumption to make that will break and

00:24:24,440 --> 00:24:30,200
not so we had a component with index DB

00:24:26,750 --> 00:24:32,210
and that would just break we could fix

00:24:30,200 --> 00:24:34,220
that by adding like code branches for

00:24:32,210 --> 00:24:37,910
node versus browser but that will get

00:24:34,220 --> 00:24:40,130
really messy over time over all ready to

00:24:37,910 --> 00:24:42,110
string is probably ideal if you can bend

00:24:40,130 --> 00:24:44,300
your components that way it's not what

00:24:42,110 --> 00:24:46,130
we ended up using though no we looked at

00:24:44,300 --> 00:24:48,740
JSON which is kind of like a browser

00:24:46,130 --> 00:24:50,900
environment but it runs inside node the

00:24:48,740 --> 00:24:52,550
problem there is the word kind of like

00:24:50,900 --> 00:24:53,780
jest um it's like an entirely new

00:24:52,550 --> 00:24:55,310
browser that you end up having to

00:24:53,780 --> 00:24:56,390
support and we try to use it this is

00:24:55,310 --> 00:24:58,580
what we thought we were going to settle

00:24:56,390 --> 00:25:01,010
on but then we hit all these kind of

00:24:58,580 --> 00:25:02,480
weird quirks like as part of our

00:25:01,010 --> 00:25:04,310
inlining process we had some inline

00:25:02,480 --> 00:25:06,860
Styles and we resource some of those

00:25:04,310 --> 00:25:10,010
just going missing and it turns out that

00:25:06,860 --> 00:25:12,050
JSON doesn't understand linear gradients

00:25:10,010 --> 00:25:13,010
so it's just getting rid of them and

00:25:12,050 --> 00:25:14,750
this is the right thing for it to do

00:25:13,010 --> 00:25:16,100
this is what the the spec says the spec

00:25:14,750 --> 00:25:18,050
says if there's an inline style you

00:25:16,100 --> 00:25:20,450
don't understand it just just discard it

00:25:18,050 --> 00:25:22,310
and JSON was dutifully behaving like a

00:25:20,450 --> 00:25:23,660
browser according to that spec just it

00:25:22,310 --> 00:25:27,050
was a browser that doesn't understand

00:25:23,660 --> 00:25:28,850
linear gradients and also 4x12 is slower

00:25:27,050 --> 00:25:29,840
than render to string so it's not

00:25:28,850 --> 00:25:31,220
something you would want to be running

00:25:29,840 --> 00:25:33,920
on every request but it's really matter

00:25:31,220 --> 00:25:36,650
to us so in the end we ended up with

00:25:33,920 --> 00:25:39,080
puppeteer babbity launches a headless

00:25:36,650 --> 00:25:40,760
version of drone that you get to remote

00:25:39,080 --> 00:25:42,350
control you can load pages you can

00:25:40,760 --> 00:25:44,690
inject JavaScript you can inspect the

00:25:42,350 --> 00:25:47,480
Dom it can read back any results and so

00:25:44,690 --> 00:25:49,190
your code is running in an actual Chrome

00:25:47,480 --> 00:25:51,500
so you don't have to it's not a new

00:25:49,190 --> 00:25:53,720
browser for you to support it is however

00:25:51,500 --> 00:25:57,140
obviously slower than render to string

00:25:53,720 --> 00:25:59,620
it is also slower than j/s Dom but

00:25:57,140 --> 00:26:02,480
actually surprisingly only by a tiny bit

00:25:59,620 --> 00:26:04,460
but as I said we only to run it once per

00:26:02,480 --> 00:26:06,920
build so it's not really that big a deal

00:26:04,460 --> 00:26:08,570
it is really easy to install to you so

00:26:06,920 --> 00:26:10,160
if you haven't done that yet take a look

00:26:08,570 --> 00:26:12,440
at it and tell us what you think but

00:26:10,160 --> 00:26:14,780
let's be honest adding an entire

00:26:12,440 --> 00:26:17,060
from to your build setup is a pretty big

00:26:14,780 --> 00:26:18,920
jump in complexity it is what we ended

00:26:17,060 --> 00:26:20,890
up doing for procs though and it wasn't

00:26:18,920 --> 00:26:23,360
about yeah so how did we get it working

00:26:20,890 --> 00:26:26,000
well we wrote another plugin didn't we

00:26:23,360 --> 00:26:27,200
here it is I'm not gonna go through it

00:26:26,000 --> 00:26:28,900
line by line just wanting to show you

00:26:27,200 --> 00:26:31,280
it's a relatively small chunk of code

00:26:28,900 --> 00:26:33,290
puppeteer lets us launch this invisible

00:26:31,280 --> 00:26:34,700
version of Chrome we run our JavaScript

00:26:33,290 --> 00:26:38,270
and we collect the HTML that it

00:26:34,700 --> 00:26:40,430
generates as a nice bonus like since our

00:26:38,270 --> 00:26:41,810
CSS was inside our JavaScript it was

00:26:40,430 --> 00:26:43,160
creating style tags for all of the

00:26:41,810 --> 00:26:45,170
components that were used in that first

00:26:43,160 --> 00:26:46,550
render so we sort of got CSS inlining

00:26:45,170 --> 00:26:48,680
just for free yep

00:26:46,550 --> 00:26:51,500
so one thing we haven't covered is how

00:26:48,680 --> 00:26:53,410
do we prevent the pre renderer from

00:26:51,500 --> 00:26:56,930
rendering components that aren't

00:26:53,410 --> 00:26:59,180
interactive yet so we want this landing

00:26:56,930 --> 00:27:02,360
stream to actually look a bit more like

00:26:59,180 --> 00:27:04,010
this yeah so the simplest solution to

00:27:02,360 --> 00:27:05,840
get that is you know give a little bit

00:27:04,010 --> 00:27:07,640
of code to puppeteer just before we end

00:27:05,840 --> 00:27:09,710
it the rest of our script and that means

00:27:07,640 --> 00:27:11,630
in our app we can branch on that in an

00:27:09,710 --> 00:27:13,310
if statement and do stuff like you know

00:27:11,630 --> 00:27:15,290
hide buttons you know rearrange things

00:27:13,310 --> 00:27:17,060
whatever and since that is only ever

00:27:15,290 --> 00:27:20,300
going to be true in puppeteer land it

00:27:17,060 --> 00:27:21,680
won't run those steps for real users but

00:27:20,300 --> 00:27:23,810
it doesn't mean that you're shipping

00:27:21,680 --> 00:27:26,690
code to real users that they don't

00:27:23,810 --> 00:27:28,880
actually need but then again it's

00:27:26,690 --> 00:27:30,710
probably not a lot of code and it's

00:27:28,880 --> 00:27:34,730
probably not worth putting in the effort

00:27:30,710 --> 00:27:38,240
to strip it all out can we fix this

00:27:34,730 --> 00:27:40,310
please can we fix this all right so our

00:27:38,240 --> 00:27:42,530
aim is to remove this kind of code to

00:27:40,310 --> 00:27:45,860
ever-reaching the production bundle that

00:27:42,530 --> 00:27:48,200
is being shipped to use this here's our

00:27:45,860 --> 00:27:50,510
current set of plugins can you guess

00:27:48,200 --> 00:27:51,980
what we are gonna do now I don't know

00:27:50,510 --> 00:27:54,380
but I'm excited about it we are gonna

00:27:51,980 --> 00:27:57,020
write a plugin out yes so the plugin

00:27:54,380 --> 00:27:59,900
means that we can write code like this

00:27:57,020 --> 00:28:02,180
and the value of this pre-render will be

00:27:59,900 --> 00:28:05,840
exactly what the value of pre-render in

00:28:02,180 --> 00:28:07,190
our roll-up config script is yeah the

00:28:05,840 --> 00:28:08,540
plug-in like this is great for all kinds

00:28:07,190 --> 00:28:10,250
of constants like passing in late

00:28:08,540 --> 00:28:12,260
version numbers of things or different

00:28:10,250 --> 00:28:14,360
kinds of flags now I've seen similar

00:28:12,260 --> 00:28:16,190
plugins that do this they don't require

00:28:14,360 --> 00:28:17,960
the import statement they just go

00:28:16,190 --> 00:28:19,730
through your code and replace a variable

00:28:17,960 --> 00:28:22,070
of a given name with a particular value

00:28:19,730 --> 00:28:24,020
but I don't know I kind of hate that

00:28:22,070 --> 00:28:26,119
because to me it's not obvious on the

00:28:24,020 --> 00:28:28,189
source code that some build magic is

00:28:26,119 --> 00:28:29,779
going to happen where it's like here you

00:28:28,189 --> 00:28:31,819
look at that and you go well this import

00:28:29,779 --> 00:28:34,129
is not normal this is not how imports

00:28:31,819 --> 00:28:35,959
normally look so you can do a quick code

00:28:34,129 --> 00:28:37,999
search for like the start of that string

00:28:35,959 --> 00:28:40,009
the Const call on bit and then you'll

00:28:37,999 --> 00:28:41,419
find the the bill tool that's actually

00:28:40,009 --> 00:28:44,569
doing that it's really easy to discover

00:28:41,419 --> 00:28:47,149
and also roll up it's really smart here

00:28:44,569 --> 00:28:49,519
so if you do a build where preload is

00:28:47,149 --> 00:28:52,219
true it will actually optimize it to

00:28:49,519 --> 00:28:55,609
this and if you do a build where it is

00:28:52,219 --> 00:28:58,069
false it will optimize it to this and so

00:28:55,609 --> 00:29:00,799
that's what we did we created two builds

00:28:58,069 --> 00:29:03,859
one for the user and one for puppeteer

00:29:00,799 --> 00:29:06,499
so let's take a look this is legit the

00:29:03,859 --> 00:29:08,989
entire plugin the plugin only does

00:29:06,499 --> 00:29:11,179
anything when the import statement

00:29:08,989 --> 00:29:13,609
starts with Const school and if it does

00:29:11,179 --> 00:29:15,529
it just generates a string of JavaScript

00:29:13,609 --> 00:29:20,329
on the fly containing the value that is

00:29:15,529 --> 00:29:22,219
being imported that's it that's all yeah

00:29:20,329 --> 00:29:23,749
here is the comparable webpack plugin

00:29:22,219 --> 00:29:26,359
that does the same thing if you want to

00:29:23,749 --> 00:29:27,259
have the dead code elimination again

00:29:26,359 --> 00:29:30,289
it's not something I would feel

00:29:27,259 --> 00:29:31,789
comfortable hacking around with and you

00:29:30,289 --> 00:29:34,939
might feel like we're you know kicking

00:29:31,789 --> 00:29:36,559
web pack a lot here you were right we

00:29:34,939 --> 00:29:37,939
are but the honest truth is like the

00:29:36,559 --> 00:29:39,409
difference that we felt between working

00:29:37,939 --> 00:29:40,639
on a project with web pack and working

00:29:39,409 --> 00:29:42,859
on a project with roll-up was really

00:29:40,639 --> 00:29:44,269
really night and day for us like not

00:29:42,859 --> 00:29:45,859
only did we feel like we understood what

00:29:44,269 --> 00:29:47,149
was happening we felt capable of

00:29:45,859 --> 00:29:47,389
changing what was happening if we needed

00:29:47,149 --> 00:29:49,759
to

00:29:47,389 --> 00:29:51,739
especially with less Jordan past like

00:29:49,759 --> 00:29:53,899
you know making work as a core part of

00:29:51,739 --> 00:29:55,429
your architecture it was incredibly

00:29:53,899 --> 00:29:57,679
valuable to be able to go in and just

00:29:55,429 --> 00:30:01,399
change how roll-up handled these kind of

00:29:57,679 --> 00:30:03,349
things yes ok now we have an optimized

00:30:01,399 --> 00:30:06,199
server render what do we win what is the

00:30:03,349 --> 00:30:07,819
real world impacts let's take a look so

00:30:06,199 --> 00:30:09,439
we have pushed that read nothing

00:30:07,819 --> 00:30:11,569
rendered time right back we've put it to

00:30:09,439 --> 00:30:14,299
almost two seconds of white screen on 3G

00:30:11,569 --> 00:30:15,979
we've cut it by three seconds on 2g this

00:30:14,299 --> 00:30:17,899
is a massive improvement to the

00:30:15,979 --> 00:30:19,549
perception of performance so the yellow

00:30:17,899 --> 00:30:21,709
area represents where we have something

00:30:19,549 --> 00:30:23,989
on screen but the app isn't really

00:30:21,709 --> 00:30:26,359
interactive yet because the JavaScript

00:30:23,989 --> 00:30:27,859
hasn't loaded but at least the user is

00:30:26,359 --> 00:30:29,629
seeing something to feel like they're

00:30:27,859 --> 00:30:33,259
being informed about the progress of the

00:30:29,629 --> 00:30:35,449
app loading so what can we do next well

00:30:33,259 --> 00:30:37,489
looking at the network waterfall to

00:30:35,449 --> 00:30:38,989
remind you the thin blog is the setting

00:30:37,489 --> 00:30:39,720
of a connection and the stake block is

00:30:38,989 --> 00:30:41,580
the time it's

00:30:39,720 --> 00:30:43,710
for the request and the response to go

00:30:41,580 --> 00:30:45,240
with a wire but there's another feature

00:30:43,710 --> 00:30:46,559
of network waterfalls that we can look

00:30:45,240 --> 00:30:46,889
at here and that's the time to first

00:30:46,559 --> 00:30:48,929
byte

00:30:46,889 --> 00:30:51,690
now both webpagetest and chrome dev

00:30:48,929 --> 00:30:53,399
tools they highlight the area before the

00:30:51,690 --> 00:30:54,870
first byte of the responses received so

00:30:53,399 --> 00:30:56,909
this is the time taken up by the request

00:30:54,870 --> 00:30:58,799
and waiting for the server to start

00:30:56,909 --> 00:31:00,769
sending the response and as you can see

00:30:58,799 --> 00:31:03,779
there is a pretty big gap between

00:31:00,769 --> 00:31:06,179
receiving all of the HTML and receiving

00:31:03,779 --> 00:31:09,000
the first byte of any of the resources

00:31:06,179 --> 00:31:11,610
used in the HTML it's about 400

00:31:09,000 --> 00:31:14,490
milliseconds on 3G and about a second on

00:31:11,610 --> 00:31:17,940
2g there are two solutions to this one

00:31:14,490 --> 00:31:19,590
is HTTP to server push No

00:31:17,940 --> 00:31:22,139
so how achieved approach turned out to

00:31:19,590 --> 00:31:23,549
be incredibly difficult to get right we

00:31:22,139 --> 00:31:25,679
have seen a couple of teams with a good

00:31:23,549 --> 00:31:27,899
number of like networking experts try to

00:31:25,679 --> 00:31:30,750
use it and they struggle to just break

00:31:27,899 --> 00:31:32,610
even in terms of performance yeah so the

00:31:30,750 --> 00:31:34,110
alternative then is inlining like we

00:31:32,610 --> 00:31:36,210
take these assets and we just put them

00:31:34,110 --> 00:31:39,120
straight into our HTML so first up let's

00:31:36,210 --> 00:31:41,580
do that with our fonts aligning both

00:31:39,120 --> 00:31:44,009
ARRA funds would add about 20 kilobytes

00:31:41,580 --> 00:31:45,960
to our HTML which honestly is kind of a

00:31:44,009 --> 00:31:47,610
lot yeah that's why I took a look inside

00:31:45,960 --> 00:31:48,980
these font files and I found some

00:31:47,610 --> 00:31:52,440
interesting stuff

00:31:48,980 --> 00:31:56,610
3/4 an upside-down question mark and

00:31:52,440 --> 00:31:58,799
indecisive vowel the surprised face no

00:31:56,610 --> 00:32:01,470
one knows what this is that's an asset

00:31:58,799 --> 00:32:04,590
so what sorry it's an s10 no one knows

00:32:01,470 --> 00:32:06,779
what this is fine if you want a P and a

00:32:04,590 --> 00:32:09,600
B at the same time Scott you saw it and

00:32:06,779 --> 00:32:11,220
this which it kinda looks like a rotated

00:32:09,600 --> 00:32:13,710
elephants I think that's what that is

00:32:11,220 --> 00:32:16,200
for the point is that none of these

00:32:13,710 --> 00:32:17,610
characters are in this set which is the

00:32:16,200 --> 00:32:21,750
set of characters that we are actually

00:32:17,610 --> 00:32:24,210
using on our landing page so we figured

00:32:21,750 --> 00:32:26,789
we just inline the characters that we

00:32:24,210 --> 00:32:27,899
actually need which are these characters

00:32:26,789 --> 00:32:29,909
and that's you know it's kind of like

00:32:27,899 --> 00:32:32,549
tree shaking but for phones and for

00:32:29,909 --> 00:32:34,169
funds its called sub settings and there

00:32:32,549 --> 00:32:35,669
are command line tools that do this for

00:32:34,169 --> 00:32:41,250
you but they're written in Python and I

00:32:35,669 --> 00:32:42,720
kind of loathe Python and so - so

00:32:41,250 --> 00:32:46,500
there's a little feature about about

00:32:42,720 --> 00:32:48,929
google fonts the URL for the CSS of your

00:32:46,500 --> 00:32:50,820
font actually takes a parameter which

00:32:48,929 --> 00:32:52,120
looks like this but it was the first

00:32:50,820 --> 00:32:55,870
language I learned I know

00:32:52,120 --> 00:32:58,090
move on here so if you include this text

00:32:55,870 --> 00:33:00,279
parameter the CSS will contain a URL to

00:32:58,090 --> 00:33:02,080
a new font file which is specifically

00:33:00,279 --> 00:33:04,000
generated to just contain the characters

00:33:02,080 --> 00:33:07,029
that you are using in this text

00:33:04,000 --> 00:33:08,830
parameter yeah I still have - anyway so

00:33:07,029 --> 00:33:10,299
we used build script to go into these

00:33:08,830 --> 00:33:12,220
files we generated and open them and

00:33:10,299 --> 00:33:14,830
spit them into our template as base64

00:33:12,220 --> 00:33:17,350
URLs and this only added 4.5 k to the

00:33:14,830 --> 00:33:19,630
HTML which is much better than the 20k

00:33:17,350 --> 00:33:21,159
for the full fonts we do still load the

00:33:19,630 --> 00:33:22,510
full fonts because the future screens

00:33:21,159 --> 00:33:24,789
will have more than just that initial

00:33:22,510 --> 00:33:26,860
set of characters but you know they're

00:33:24,789 --> 00:33:28,240
an interactive 40 away so we can wait

00:33:26,860 --> 00:33:30,429
for like you know you load those lazily

00:33:28,240 --> 00:33:33,669
in the background so how do we do this

00:33:30,429 --> 00:33:36,610
well back to our create HTML plugin or

00:33:33,669 --> 00:33:38,590
at least the part that feeds data into

00:33:36,610 --> 00:33:40,840
our templating engine for each font

00:33:38,590 --> 00:33:42,970
we're passing in the weight and the URL

00:33:40,840 --> 00:33:46,000
but you're also going to pass in the

00:33:42,970 --> 00:33:47,289
inline fund as a base64 encoded string

00:33:46,000 --> 00:33:49,659
yeah and this is just using built-in

00:33:47,289 --> 00:33:51,549
node API is nothing special but we're

00:33:49,659 --> 00:33:53,049
also going to pass in the Unicode range

00:33:51,549 --> 00:33:54,399
for each font now if you've used web

00:33:53,049 --> 00:33:55,990
fonts before you'll have seen that you

00:33:54,399 --> 00:33:57,850
need to specify the Unicode range to

00:33:55,990 --> 00:33:59,529
tell the browser exactly what's inside

00:33:57,850 --> 00:34:01,809
the font there we use this little

00:33:59,529 --> 00:34:03,820
library from NPM which just takes a lot

00:34:01,809 --> 00:34:06,340
of characters and will give you a valid

00:34:03,820 --> 00:34:07,659
CSS unicode range for all of those so

00:34:06,340 --> 00:34:09,970
now we're passing everything into the

00:34:07,659 --> 00:34:13,690
template that we need to in the font but

00:34:09,970 --> 00:34:15,280
what about our JavaScript yeah so here's

00:34:13,690 --> 00:34:16,450
where we're getting the file name you

00:34:15,280 --> 00:34:19,240
know that we're passing into the

00:34:16,450 --> 00:34:22,839
template but roll up instead could just

00:34:19,240 --> 00:34:23,950
give us the entire code job done we're

00:34:22,839 --> 00:34:25,089
also passing in the file names for all

00:34:23,950 --> 00:34:27,399
the dependencies as we talked about

00:34:25,089 --> 00:34:30,580
earlier so instead we'll map over those

00:34:27,399 --> 00:34:32,080
and return the code for those instead so

00:34:30,580 --> 00:34:33,669
we had to change the HTML template as a

00:34:32,080 --> 00:34:35,530
result to handle that but again this is

00:34:33,669 --> 00:34:37,270
using our skills in HTML nothing plug-in

00:34:35,530 --> 00:34:39,040
specific so here's where we're doing the

00:34:37,270 --> 00:34:41,649
inline font there as part of the base64

00:34:39,040 --> 00:34:44,649
URL we can add the Unicode range there

00:34:41,649 --> 00:34:46,960
and there is the the inline script so

00:34:44,649 --> 00:34:50,020
we're done in theory but how does this

00:34:46,960 --> 00:34:51,730
impact our real-world performance we've

00:34:50,020 --> 00:34:54,220
already improved things a lot but with

00:34:51,730 --> 00:34:56,649
inlining we've reduced our interactive

00:34:54,220 --> 00:34:59,920
time by half a second on 3G and by about

00:34:56,649 --> 00:35:02,440
a second on 2g but we're not done yet

00:34:59,920 --> 00:35:03,580
now this javascript is inlined as well

00:35:02,440 --> 00:35:05,510
we've reached the point where the only

00:35:03,580 --> 00:35:07,100
thing that matters for first interactive

00:35:05,510 --> 00:35:09,560
everything that's inside of the HTML

00:35:07,100 --> 00:35:11,090
file like we've come a long way so even

00:35:09,560 --> 00:35:13,910
over 2g we're now interactive and just

00:35:11,090 --> 00:35:14,240
under six seconds not too bad but we can

00:35:13,910 --> 00:35:16,640
do better

00:35:14,240 --> 00:35:21,260
yeah like looking at our HTML file or

00:35:16,640 --> 00:35:23,360
index.html file it's 43 kilobytes and 32

00:35:21,260 --> 00:35:27,530
kilobytes of that our JavaScript and

00:35:23,360 --> 00:35:29,600
that is the code for everything it's all

00:35:27,530 --> 00:35:31,700
the fancy animations it's our rendering

00:35:29,600 --> 00:35:33,740
engines the WebGL bits it's the end

00:35:31,700 --> 00:35:36,140
screen and the user duty doesn't need

00:35:33,740 --> 00:35:38,210
the end screen at the start of the game

00:35:36,140 --> 00:35:40,430
yeah what we've done here is we've we've

00:35:38,210 --> 00:35:41,510
done a Photoshop right sure you've

00:35:40,430 --> 00:35:43,520
experienced this before where you're

00:35:41,510 --> 00:35:45,530
staring at this screen while it loads

00:35:43,520 --> 00:35:47,120
like a hundred plugins even though like

00:35:45,530 --> 00:35:50,450
the first interaction all you can really

00:35:47,120 --> 00:35:52,730
do when it when it starts up is create a

00:35:50,450 --> 00:35:54,470
new image or load an existing image you

00:35:52,730 --> 00:35:56,780
don't need all of those plugins until

00:35:54,470 --> 00:35:59,300
sometime later on yeah my my my favorite

00:35:56,780 --> 00:36:00,680
plugin is halida bottlenecks like series

00:35:59,300 --> 00:36:02,090
when you first showed me this I thought

00:36:00,680 --> 00:36:03,680
like well ironically I thought you'd

00:36:02,090 --> 00:36:05,150
Photoshop just a silly name in there

00:36:03,680 --> 00:36:07,340
like a poem oh I wasn't getting but this

00:36:05,150 --> 00:36:08,930
is a real it's a real pile of this it

00:36:07,340 --> 00:36:12,140
sounds like a Swedish folk singer like

00:36:08,930 --> 00:36:14,570
highlight the bottlenecks yeah so let's

00:36:12,140 --> 00:36:17,570
not load everything before the user can

00:36:14,570 --> 00:36:20,600
do anything let's prioritize the code to

00:36:17,570 --> 00:36:22,730
do this the first interaction is

00:36:20,600 --> 00:36:25,130
basically the user picking what kind of

00:36:22,730 --> 00:36:27,320
game they want to play and the only

00:36:25,130 --> 00:36:29,420
thing we to react to is the user hitting

00:36:27,320 --> 00:36:31,070
the start button and if for some reason

00:36:29,420 --> 00:36:33,200
the user manages to press the start

00:36:31,070 --> 00:36:35,060
button before our game logic has loaded

00:36:33,200 --> 00:36:38,210
that's when we can spin up a loading

00:36:35,060 --> 00:36:39,620
screen everything else can really just

00:36:38,210 --> 00:36:42,350
Louis liking later it won't really

00:36:39,620 --> 00:36:43,940
matter yes so this is where we need to

00:36:42,350 --> 00:36:45,470
code split at this point because this is

00:36:43,940 --> 00:36:47,270
our first interactive bit we don't have

00:36:45,470 --> 00:36:48,800
the fancy animated background or the

00:36:47,270 --> 00:36:51,350
logo that you know that stuff is

00:36:48,800 --> 00:36:52,910
non-essential really Co splitting in

00:36:51,350 --> 00:36:55,660
roll up works much the same as it does

00:36:52,910 --> 00:36:57,590
in WebKit and web pack and parcel

00:36:55,660 --> 00:37:00,170
imports like this this will cause

00:36:57,590 --> 00:37:02,690
whatever dot J's to be bundled into the

00:37:00,170 --> 00:37:06,080
same file if you want to be code split

00:37:02,690 --> 00:37:08,090
instead you'll use a dynamic import and

00:37:06,080 --> 00:37:09,470
this will return a promise so if you

00:37:08,090 --> 00:37:12,350
want to use that module sometimes later

00:37:09,470 --> 00:37:13,040
you will have to await it just in the

00:37:12,350 --> 00:37:14,720
usual way

00:37:13,040 --> 00:37:16,520
so the difference now is that whatever

00:37:14,720 --> 00:37:18,690
dot J's is not going to be bundled in it

00:37:16,520 --> 00:37:21,089
is going to be put into another chunk

00:37:18,690 --> 00:37:23,010
and that makes it a sink which can bring

00:37:21,089 --> 00:37:24,660
its own problems for example most of the

00:37:23,010 --> 00:37:27,030
UI framework we are using nowadays

00:37:24,660 --> 00:37:29,790
expect rendering to be synchronous and

00:37:27,030 --> 00:37:31,859
can't really handle promises so react

00:37:29,790 --> 00:37:34,079
suspense is aiming to change that by

00:37:31,859 --> 00:37:36,690
allowing you to lazy load components but

00:37:34,079 --> 00:37:39,920
pre-act doesn't have suspense so of

00:37:36,690 --> 00:37:42,780
course we wrote it ourselves in 20 lines

00:37:39,920 --> 00:37:45,150
seems like it obviously it can all half

00:37:42,780 --> 00:37:46,980
of the things of that react suspense can

00:37:45,150 --> 00:37:49,470
do but it can do everything that we need

00:37:46,980 --> 00:37:50,940
it that we needed to do so really well

00:37:49,470 --> 00:37:52,890
does if you give it a promise of a

00:37:50,940 --> 00:37:55,349
component it wrapped it and returns you

00:37:52,890 --> 00:37:57,359
a real component synchronously and you

00:37:55,349 --> 00:37:59,579
can use that component as a placeholder

00:37:57,359 --> 00:38:01,980
with two parameter spacing it will take

00:37:59,579 --> 00:38:03,540
a loading function which will read

00:38:01,980 --> 00:38:06,060
people used for rendering a placeholder

00:38:03,540 --> 00:38:07,710
until the underlying component is ready

00:38:06,060 --> 00:38:10,079
and at that point just switches over and

00:38:07,710 --> 00:38:13,170
uses the other function like for aura

00:38:10,079 --> 00:38:15,150
nebula yes so with that we moved all of

00:38:13,170 --> 00:38:16,230
our components to a lazy model except

00:38:15,150 --> 00:38:19,109
the ones that we needed for the first

00:38:16,230 --> 00:38:21,210
render and this cut off over 20k

00:38:19,109 --> 00:38:23,940
of the HTML that the JavaScript is now

00:38:21,210 --> 00:38:25,800
down to just 11 K now I mean honestly I

00:38:23,940 --> 00:38:27,569
think 11 K is a lot of JavaScript for

00:38:25,800 --> 00:38:29,790
but is basically just a simple form on a

00:38:27,569 --> 00:38:31,500
button but you know it's it's done its

00:38:29,790 --> 00:38:35,160
job it's given us like that really quick

00:38:31,500 --> 00:38:36,420
first bits of interactivity but you know

00:38:35,160 --> 00:38:38,369
you're going to develop this app you're

00:38:36,420 --> 00:38:40,380
gonna add stuff fix bugs how do we stop

00:38:38,369 --> 00:38:41,550
this creeping up over time and this

00:38:40,380 --> 00:38:43,530
turned out to be quite hard quite

00:38:41,550 --> 00:38:44,940
interesting so you know you're sitting

00:38:43,530 --> 00:38:46,920
there you write a new comp or you want

00:38:44,940 --> 00:38:48,150
to add a new feature to the app and you

00:38:46,920 --> 00:38:49,560
do everything right you think about

00:38:48,150 --> 00:38:51,960
performance you think about file size

00:38:49,560 --> 00:38:54,119
and it's Friday afternoon and none of

00:38:51,960 --> 00:38:56,160
your colleagues are looking and then and

00:38:54,119 --> 00:38:59,010
you have a weak moment and then you do

00:38:56,160 --> 00:39:01,530
it you use vias code autocomplete and

00:38:59,010 --> 00:39:04,170
bam suddenly you have a static import it

00:39:01,530 --> 00:39:06,210
pulls in 200k of more code and that that

00:39:04,170 --> 00:39:07,900
exactly is how Microsoft minesweeper

00:39:06,210 --> 00:39:11,109
happens

00:39:07,900 --> 00:39:12,700
yeah so we tried to know about how ways

00:39:11,109 --> 00:39:14,079
ways we could fix this we tried the

00:39:12,700 --> 00:39:17,349
comment system where we just put a

00:39:14,079 --> 00:39:18,130
warning in files that we should encode -

00:39:17,349 --> 00:39:20,859
yeah

00:39:18,130 --> 00:39:23,529
bulletproof isn't it it did help a

00:39:20,859 --> 00:39:24,999
little bit it was acted as a reminder it

00:39:23,529 --> 00:39:26,680
was something we'd look at and in diffs

00:39:24,999 --> 00:39:29,529
but yes we know it wasn't the best

00:39:26,680 --> 00:39:31,809
solution your tools not rules so we felt

00:39:29,529 --> 00:39:33,789
a little thing this hooks up to Travis

00:39:31,809 --> 00:39:34,839
CI and so on each build it will go and

00:39:33,789 --> 00:39:36,609
look at everything in the dist folder

00:39:34,839 --> 00:39:38,410
and it will record the sizes of it and

00:39:36,609 --> 00:39:40,839
that means when you create a PR it will

00:39:38,410 --> 00:39:42,579
compare that against master so it'll

00:39:40,839 --> 00:39:44,410
give us the Delta for all of the files

00:39:42,579 --> 00:39:46,329
and so that means for every PR we just

00:39:44,410 --> 00:39:48,130
go into this we have a look and you know

00:39:46,329 --> 00:39:50,289
we'll be able to see if that index.html

00:39:48,130 --> 00:39:52,359
file it's ballooning in a way that we

00:39:50,289 --> 00:39:54,309
didn't expect this this works for all

00:39:52,359 --> 00:39:56,410
projects that use Travis so you know

00:39:54,309 --> 00:39:58,150
feel free to give it a go so what do we

00:39:56,410 --> 00:40:00,249
win what do we gain since this is our

00:39:58,150 --> 00:40:01,839
last optimization let's rewind all the

00:40:00,249 --> 00:40:04,029
way back to the start to see where we

00:40:01,839 --> 00:40:06,789
started yeah we started at like five

00:40:04,029 --> 00:40:09,099
seconds until ready on 3G and 11 seconds

00:40:06,789 --> 00:40:10,660
already on 2g we moved upon since we're

00:40:09,099 --> 00:40:11,920
on server we pre-loaded the fonts and

00:40:10,660 --> 00:40:14,529
the scripts and that improved the time

00:40:11,920 --> 00:40:15,910
to interactive we added aesthetic render

00:40:14,529 --> 00:40:18,730
improving perceived loading performance

00:40:15,910 --> 00:40:20,890
and getting pixels on the screen earlier

00:40:18,730 --> 00:40:22,299
and then we aligned our scripts and

00:40:20,890 --> 00:40:24,160
subsided the fonts bringing down the

00:40:22,299 --> 00:40:26,170
time to interactive again and then we

00:40:24,160 --> 00:40:28,809
split the code we focus on the code that

00:40:26,170 --> 00:40:30,999
we needed for interactivity and split

00:40:28,809 --> 00:40:33,519
off everything else and that slashed the

00:40:30,999 --> 00:40:36,700
time to interactive by over a second on

00:40:33,519 --> 00:40:38,799
3G and by two seconds on 2g yeah so from

00:40:36,700 --> 00:40:40,509
the stying point we've like half the

00:40:38,799 --> 00:40:42,190
time to interactive and so let's

00:40:40,509 --> 00:40:43,809
actually feel what that difference is

00:40:42,190 --> 00:40:45,730
so here on the left is the original

00:40:43,809 --> 00:40:48,039
alpha version and on the right is the

00:40:45,730 --> 00:40:49,660
latest version this is loading over a 2g

00:40:48,039 --> 00:40:50,890
connection so it's all got a bit of a

00:40:49,660 --> 00:40:52,390
delay at the start because I think

00:40:50,890 --> 00:40:53,589
setting up connections but then our

00:40:52,390 --> 00:40:55,359
optimized version there it is and now

00:40:53,589 --> 00:40:57,160
it's interactive the user can use it the

00:40:55,359 --> 00:40:58,720
old version it gets there but come on

00:40:57,160 --> 00:41:00,579
it's like still not interactive because

00:40:58,720 --> 00:41:03,670
of the fonts and finally it's like so

00:41:00,579 --> 00:41:06,970
much later remember when you are at a

00:41:03,670 --> 00:41:09,670
festival or on a train on conference

00:41:06,970 --> 00:41:11,739
like here or you just on vacation and

00:41:09,670 --> 00:41:13,450
using roaming you will be experiencing

00:41:11,739 --> 00:41:17,200
speech like speeds that closer than 3G

00:41:13,450 --> 00:41:18,400
or even 2g sometimes yeah I also once

00:41:17,200 --> 00:41:19,779
they're playing the game we install the

00:41:18,400 --> 00:41:20,859
serviceworker because you know I'm not

00:41:19,779 --> 00:41:21,910
allowed to ship anything that doesn't

00:41:20,859 --> 00:41:23,650
have a

00:41:21,910 --> 00:41:25,330
and that means like it's going to work

00:41:23,650 --> 00:41:27,609
offline first but you know as a side

00:41:25,330 --> 00:41:29,530
effect it means it cuts down the timing

00:41:27,609 --> 00:41:31,420
to like well pretty much instantly just

00:41:29,530 --> 00:41:32,920
a second for all caches to split so you

00:41:31,420 --> 00:41:34,660
might be wondering where did we end up

00:41:32,920 --> 00:41:36,190
with our plugin counter well to be

00:41:34,660 --> 00:41:40,359
honest ii wrote way more plugins than we

00:41:36,190 --> 00:41:42,849
talked about in this talk so this is

00:41:40,359 --> 00:41:44,500
what our roller plugin looked like in

00:41:42,849 --> 00:41:46,300
the end it's probably easier to me to

00:41:44,500 --> 00:41:49,540
highlight the plugins that we did not

00:41:46,300 --> 00:41:56,530
write which is these and so in total

00:41:49,540 --> 00:41:58,540
that brings us to 16 plugins it's not a

00:41:56,530 --> 00:42:00,670
bad thing I don't know I'm not so sure

00:41:58,540 --> 00:42:02,230
I prefer wrangling code than I do

00:42:00,670 --> 00:42:03,670
wrangling come to give someone else's

00:42:02,230 --> 00:42:05,500
code I think it's really empowering to

00:42:03,670 --> 00:42:07,420
be able to go in and just fix stuff

00:42:05,500 --> 00:42:10,270
without spending days learning a new DSL

00:42:07,420 --> 00:42:11,950
or something like that we're not asking

00:42:10,270 --> 00:42:13,170
you to use our plugins absolutely not

00:42:11,950 --> 00:42:15,730
because they're kind of dependent

00:42:13,170 --> 00:42:17,590
interdependent and unique to procs but

00:42:15,730 --> 00:42:19,119
we're saying like write your own cuz it

00:42:17,590 --> 00:42:20,859
probably be quicker than using someone

00:42:19,119 --> 00:42:22,690
else's plugin for especially for a lot

00:42:20,859 --> 00:42:24,369
of fairly trivial stuff and if your

00:42:22,690 --> 00:42:25,300
current build system is in the way of

00:42:24,369 --> 00:42:27,580
shipping features that improve

00:42:25,300 --> 00:42:31,859
performance for your users get a better

00:42:27,580 --> 00:42:31,859
built system by right

00:42:35,420 --> 00:42:37,480

YouTube URL: https://www.youtube.com/watch?v=fWc3Zu6A3Ws


