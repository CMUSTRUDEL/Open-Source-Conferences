Title: Mark Dalgleish: The End of Global CSS - CSSConf.Asia 2015
Publication date: 2015-12-20
Playlist: CSSConf.Asia 2015
Description: 
	The global nature of CSS selectors is often at odds with the locally-scoped nature of component-based web applications. CSS Modules are a new, community-driven attempt to allow us to import CSS into our JavaScript files, bypassing the global scope and enabling powerful new patterns for writing CSS in the component age.

Mark is the co-creator of CSS Modules, lead organiser of MelbJS, and interaction craftsman at SEEKâ€”the most popular job site in Australia. Having got his start with HTML and UI design at a young age, he has since developed a love of open source and software engineering, but always as a means to creating elegant, usable experiences.

CSSConf.Asia - Red Dot Design Museum, Singapore - 18 November 2015.

Source: http://2015.cssconf.asia
Slides: http://markdalgleish.github.io/presentation-the-end-of-global-css/

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:17,490 --> 00:00:22,779
hi everybody as you heard my name is

00:00:20,050 --> 00:00:23,550
Marc devilish I'm here from Melbourne

00:00:22,779 --> 00:00:26,279
Australia

00:00:23,550 --> 00:00:29,020
and I'm here today to talk to you about

00:00:26,279 --> 00:00:31,420
the end of global CSS which is a lofty

00:00:29,020 --> 00:00:33,820
title but hopefully by the end of this

00:00:31,420 --> 00:00:36,309
you'll understand why a lot of things

00:00:33,820 --> 00:00:38,800
have been changing in the CSS space a

00:00:36,309 --> 00:00:40,180
lot of people trying new things and it's

00:00:38,800 --> 00:00:43,269
definitely something I've been a part of

00:00:40,180 --> 00:00:46,479
and I'm really excited today to share

00:00:43,269 --> 00:00:48,760
some of the work myself and a few others

00:00:46,479 --> 00:00:51,190
have been doing to really try and

00:00:48,760 --> 00:00:54,309
rethink how we build our applications

00:00:51,190 --> 00:00:56,350
with CSS so to put all of this in its

00:00:54,309 --> 00:00:58,119
proper context I think I first need to

00:00:56,350 --> 00:00:59,890
take you back to the beginning really to

00:00:58,119 --> 00:01:02,260
the beginning of my career essentially

00:00:59,890 --> 00:01:04,420
for me personally it all began with this

00:01:02,260 --> 00:01:06,670
book now this book is not a classic it's

00:01:04,420 --> 00:01:09,670
just a random HTML book I picked up in

00:01:06,670 --> 00:01:12,159
99 I wasn't a programmer I wasn't

00:01:09,670 --> 00:01:13,720
dreaming of becoming a programmer I just

00:01:12,159 --> 00:01:15,369
loved the web and I wanted to be part of

00:01:13,720 --> 00:01:18,790
it somehow and this for me was a natural

00:01:15,369 --> 00:01:20,860
place to start now it has a chapter in

00:01:18,790 --> 00:01:23,560
there chapter 13 which is all about CSS

00:01:20,860 --> 00:01:25,090
now at the time in 99 CSS wasn't quite

00:01:23,560 --> 00:01:27,880
ready for primetime and that's what this

00:01:25,090 --> 00:01:29,680
summary says but everyone knew that CSS

00:01:27,880 --> 00:01:33,490
was really gonna change the way we think

00:01:29,680 --> 00:01:34,780
about styling our our websites it's

00:01:33,490 --> 00:01:36,970
already been covered this morning

00:01:34,780 --> 00:01:40,450
actually that CSS is in garden is

00:01:36,970 --> 00:01:42,430
something that was was really what

00:01:40,450 --> 00:01:44,200
convinced me that that CSS was something

00:01:42,430 --> 00:01:46,420
you could really fall in love with CSS

00:01:44,200 --> 00:01:48,580
Zen garden the whole concept as you

00:01:46,420 --> 00:01:51,400
already heard today was was about taking

00:01:48,580 --> 00:01:53,770
a document and completely restyling it

00:01:51,400 --> 00:01:55,840
just by swapping out the CSS so just by

00:01:53,770 --> 00:01:57,610
changing the CSS you could go to a

00:01:55,840 --> 00:01:59,770
completely different look and feel and

00:01:57,610 --> 00:02:01,780
this really you know in it at the time

00:01:59,770 --> 00:02:03,130
proved out a completely opposite

00:02:01,780 --> 00:02:05,020
approach to what we were doing with

00:02:03,130 --> 00:02:07,330
things like table based layouts where

00:02:05,020 --> 00:02:10,299
and font tags where the design was

00:02:07,330 --> 00:02:12,280
tightly coupled to the markup so CSS Zen

00:02:10,299 --> 00:02:15,519
garden presented a really great way

00:02:12,280 --> 00:02:18,190
forward for us as a web community but as

00:02:15,519 --> 00:02:20,110
we move forward in time we get a bit of

00:02:18,190 --> 00:02:22,060
a clash between the the techniques

00:02:20,110 --> 00:02:24,300
presented in CSS Zen garden and how you

00:02:22,060 --> 00:02:26,560
build a complex web application

00:02:24,300 --> 00:02:28,990
while one is just a basic document

00:02:26,560 --> 00:02:31,330
basically a glorified version of what we

00:02:28,990 --> 00:02:33,250
were doing in things like word web apps

00:02:31,330 --> 00:02:37,150
are a very different environment and

00:02:33,250 --> 00:02:38,800
entirely and the problem with that is

00:02:37,150 --> 00:02:41,260
that when you when you're restarting a

00:02:38,800 --> 00:02:42,490
document the global scope of CSS is a

00:02:41,260 --> 00:02:44,770
good thing you want to be able to

00:02:42,490 --> 00:02:47,140
restyle any element on the page very

00:02:44,770 --> 00:02:49,300
quickly very easily but that comes with

00:02:47,140 --> 00:02:51,370
a maintenance cost when you get into the

00:02:49,300 --> 00:02:55,210
world of big complex applications with

00:02:51,370 --> 00:02:56,680
lots of nested components over the years

00:02:55,210 --> 00:02:58,900
in the CSS community we've come up with

00:02:56,680 --> 00:03:01,450
a lot of techniques to try and tame the

00:02:58,900 --> 00:03:03,550
the problems inherent with CSS at scale

00:03:01,450 --> 00:03:06,520
we've got things like oo CSS which

00:03:03,550 --> 00:03:09,420
arguably kicked us off other techniques

00:03:06,520 --> 00:03:11,260
like smacks BEM suits and now

00:03:09,420 --> 00:03:13,690
controversially in the react community

00:03:11,260 --> 00:03:16,960
inline Styles is actually a feasible

00:03:13,690 --> 00:03:18,850
solution to this problem but they are

00:03:16,960 --> 00:03:20,620
arguably the most popular solution out

00:03:18,850 --> 00:03:22,390
in the wild is been block element

00:03:20,620 --> 00:03:23,770
modifier and ultimately it's just a

00:03:22,390 --> 00:03:26,110
naming convention it's a way of

00:03:23,770 --> 00:03:29,020
restricting yourself in in the way that

00:03:26,110 --> 00:03:31,480
you use your CSS so that you can make

00:03:29,020 --> 00:03:33,760
this technology scale and you can scale

00:03:31,480 --> 00:03:35,980
it over a long period of time and have a

00:03:33,760 --> 00:03:37,930
code base that's actually able to be

00:03:35,980 --> 00:03:40,900
maintained able to be refactored which

00:03:37,930 --> 00:03:44,500
for legacy CSS code bases was basically

00:03:40,900 --> 00:03:45,940
impossible when you apply BEM to your

00:03:44,500 --> 00:03:49,390
markup you get something that looks like

00:03:45,940 --> 00:03:50,920
this it does get quite a bit noisy so

00:03:49,390 --> 00:03:52,630
obviously there was a bit of a cost in

00:03:50,920 --> 00:03:55,570
terms of the pure aesthetics of working

00:03:52,630 --> 00:03:58,959
with them but for those of us that kind

00:03:55,570 --> 00:04:01,000
of got over that that initial distaste

00:03:58,959 --> 00:04:02,830
of the markup we ended it was something

00:04:01,000 --> 00:04:07,270
that was definitely a big step ahead of

00:04:02,830 --> 00:04:09,610
where we were with CSS in the past the

00:04:07,270 --> 00:04:11,320
the challenge here though is that CSS at

00:04:09,610 --> 00:04:13,420
scale when you're using something like

00:04:11,320 --> 00:04:15,340
them feels completely different to what

00:04:13,420 --> 00:04:17,200
you were doing in the world of CSS is in

00:04:15,340 --> 00:04:19,480
garden the techniques you had to adopt

00:04:17,200 --> 00:04:22,030
were completely different and there was

00:04:19,480 --> 00:04:23,890
definitely a learning curve people who

00:04:22,030 --> 00:04:25,960
were good at CSS were not necessarily

00:04:23,890 --> 00:04:28,090
good at CSS at scale and that was a real

00:04:25,960 --> 00:04:30,730
problem particularly when you're working

00:04:28,090 --> 00:04:33,039
in a team environment but this problem

00:04:30,730 --> 00:04:34,780
of scaling interfaces is not unique to

00:04:33,039 --> 00:04:38,110
CSS of course this question has been

00:04:34,780 --> 00:04:40,270
asked everywhere and in the in

00:04:38,110 --> 00:04:41,919
javascript community in particular in

00:04:40,270 --> 00:04:44,289
particular we've now basically arrived

00:04:41,919 --> 00:04:46,030
in what I call the age of components if

00:04:44,289 --> 00:04:48,159
you look at the landscape at the moment

00:04:46,030 --> 00:04:50,770
and what people are using to build rich

00:04:48,159 --> 00:04:53,020
single page page applications you've got

00:04:50,770 --> 00:04:54,759
of course web components landing is a

00:04:53,020 --> 00:04:57,009
standard part of the web platform

00:04:54,759 --> 00:05:00,340
you've got polymer poly filling nuts you

00:04:57,009 --> 00:05:02,199
can try to use that today angular is is

00:05:00,340 --> 00:05:04,629
all about directives and directives are

00:05:02,199 --> 00:05:07,780
about basically turning HTML to a DSL

00:05:04,629 --> 00:05:09,970
powered by components but the one that

00:05:07,780 --> 00:05:11,620
I've been focusing on lately it's been

00:05:09,970 --> 00:05:13,210
getting a lot of traction is react for

00:05:11,620 --> 00:05:15,159
me the big reason I've picked react is I

00:05:13,210 --> 00:05:16,539
can render it on the server so I get all

00:05:15,159 --> 00:05:18,250
the benefit of components without

00:05:16,539 --> 00:05:21,940
sacrificing progressive enhancement

00:05:18,250 --> 00:05:23,620
which i think is very very important but

00:05:21,940 --> 00:05:26,800
components are nothing new components

00:05:23,620 --> 00:05:28,720
were not invented on the web but even in

00:05:26,800 --> 00:05:30,490
the earliest days of the web we had a

00:05:28,720 --> 00:05:32,919
basic set of components you had things

00:05:30,490 --> 00:05:36,550
like select select box with options in

00:05:32,919 --> 00:05:39,009
it its html5 date input these things

00:05:36,550 --> 00:05:40,750
came with a lot of inbuilt behavior you

00:05:39,009 --> 00:05:42,940
just got for free you just drop a simple

00:05:40,750 --> 00:05:45,280
tag in your markup and all of this rich

00:05:42,940 --> 00:05:47,400
run interactivity is now provided to you

00:05:45,280 --> 00:05:50,199
and the interface is very very simple

00:05:47,400 --> 00:05:51,460
but the the important thing to note here

00:05:50,199 --> 00:05:53,680
for the purposes of this talk is that

00:05:51,460 --> 00:05:55,449
CSS and images are private to a

00:05:53,680 --> 00:05:57,729
component at no point do you have to

00:05:55,449 --> 00:05:59,440
worry about the styling or the images

00:05:57,729 --> 00:06:00,940
that a browser might need to render

00:05:59,440 --> 00:06:03,969
these things they're completely abstract

00:06:00,940 --> 00:06:05,590
it away from you and that of course came

00:06:03,969 --> 00:06:07,690
to a screeching halt the second you

00:06:05,590 --> 00:06:09,130
wanted to use a third-party component so

00:06:07,690 --> 00:06:11,050
taking the canonical example of the

00:06:09,130 --> 00:06:13,270
jQuery UI date picker

00:06:11,050 --> 00:06:17,050
just having a date picker you've got

00:06:13,270 --> 00:06:19,150
over a dozen files images CSS JavaScript

00:06:17,050 --> 00:06:21,099
and it's your job to integrate this into

00:06:19,150 --> 00:06:23,770
your project which was not necessarily

00:06:21,099 --> 00:06:25,659
the simplest of tasks certainly doable

00:06:23,770 --> 00:06:26,310
but a lot more work than should be

00:06:25,659 --> 00:06:28,930
necessary

00:06:26,310 --> 00:06:31,090
and now El tools reflected this model

00:06:28,930 --> 00:06:32,949
for the longest time you look at a build

00:06:31,090 --> 00:06:34,930
tool like gulp for example and the

00:06:32,949 --> 00:06:36,490
standard way we would work our gulp

00:06:34,930 --> 00:06:38,919
files would look something like this you

00:06:36,490 --> 00:06:40,300
might have a task for your JavaScript

00:06:38,919 --> 00:06:42,940
that runs it through something like

00:06:40,300 --> 00:06:44,440
browserify maybe uglify you've got your

00:06:42,940 --> 00:06:47,740
CSS tasks which might run it through

00:06:44,440 --> 00:06:50,180
sass or less or post CSS you've got your

00:06:47,740 --> 00:06:51,919
images tasks as well and so on

00:06:50,180 --> 00:06:54,680
you were you would definitely sort of

00:06:51,919 --> 00:06:56,479
encourage to separate everything by file

00:06:54,680 --> 00:06:59,060
type and everything was in these silos

00:06:56,479 --> 00:07:01,639
this of course continued into tools like

00:06:59,060 --> 00:07:04,220
SAS where you know ultimately SAS only

00:07:01,639 --> 00:07:06,110
cares about your CSS so what that ends

00:07:04,220 --> 00:07:08,240
up causing is something like this an

00:07:06,110 --> 00:07:10,250
index dot s CSS for example where

00:07:08,240 --> 00:07:13,160
essentially it's just a wall of imports

00:07:10,250 --> 00:07:16,130
because SAS has to know the full tree of

00:07:13,160 --> 00:07:18,250
styles in your app but seth has to start

00:07:16,130 --> 00:07:21,020
somewhere and this is your entry point

00:07:18,250 --> 00:07:22,910
but what do we do in the component age

00:07:21,020 --> 00:07:25,070
like is there a way that we can rethink

00:07:22,910 --> 00:07:27,259
our tooling and luckily for us there's a

00:07:25,070 --> 00:07:29,360
really great example in the form of web

00:07:27,259 --> 00:07:31,880
pack web pack is basically the default

00:07:29,360 --> 00:07:34,490
choice in the react community and for

00:07:31,880 --> 00:07:36,229
really good reason because web pack

00:07:34,490 --> 00:07:38,449
encourages us to think in terms of a

00:07:36,229 --> 00:07:42,050
single dependency tree across all of our

00:07:38,449 --> 00:07:44,240
asset types so rather than the standard

00:07:42,050 --> 00:07:45,500
folder structure in your in your project

00:07:44,240 --> 00:07:47,840
where you might have JavaScript over

00:07:45,500 --> 00:07:50,120
here CSS images and fonts in a different

00:07:47,840 --> 00:07:51,979
place you're much more likely to

00:07:50,120 --> 00:07:54,110
structure up like this where you've got

00:07:51,979 --> 00:07:55,729
a components directory may be nested

00:07:54,110 --> 00:07:57,800
levels of components directories as well

00:07:55,729 --> 00:08:00,530
and inside each of those we have a

00:07:57,800 --> 00:08:03,050
folder for each component that component

00:08:00,530 --> 00:08:05,690
has the JavaScript or CSS and any images

00:08:03,050 --> 00:08:07,720
it needs to render and web pack gives us

00:08:05,690 --> 00:08:10,039
a really great way to manage this

00:08:07,720 --> 00:08:12,199
because if you look at here we've got a

00:08:10,039 --> 00:08:14,570
basic react component the very first

00:08:12,199 --> 00:08:17,030
line we're actually requiring a CSS file

00:08:14,570 --> 00:08:19,669
so we're making it very explicit that

00:08:17,030 --> 00:08:21,650
this component depends on some CSS in

00:08:19,669 --> 00:08:24,349
order to render correctly whereas

00:08:21,650 --> 00:08:26,630
previously that that dependency between

00:08:24,349 --> 00:08:28,220
the markup and the CSS was basically in

00:08:26,630 --> 00:08:31,639
your head and scattered throughout your

00:08:28,220 --> 00:08:33,320
entire project the great thing about web

00:08:31,639 --> 00:08:35,599
pack is it can traverse these links or

00:08:33,320 --> 00:08:37,909
even into your CSS so web pack follows

00:08:35,599 --> 00:08:39,560
follows the lead into that CSS file and

00:08:37,909 --> 00:08:43,579
it can see that you've got a background

00:08:39,560 --> 00:08:45,680
image here of an icon SVG and web pack

00:08:43,579 --> 00:08:49,279
knows that it now needs to include that

00:08:45,680 --> 00:08:51,050
image in your in your final output so

00:08:49,279 --> 00:08:54,230
here we have one build tool traversing

00:08:51,050 --> 00:08:55,430
multiple asset types and you can figure

00:08:54,230 --> 00:08:57,950
that with loaders so you've got things

00:08:55,430 --> 00:09:02,029
like style loader CSS loader post CSS

00:08:57,950 --> 00:09:03,900
less sass URL and there's a whole bunch

00:09:02,029 --> 00:09:05,310
more and this is the way you tell teach

00:09:03,900 --> 00:09:07,500
webpack about how to understand these

00:09:05,310 --> 00:09:09,090
different file types you can figure it

00:09:07,500 --> 00:09:11,100
like this you don't have to understand

00:09:09,090 --> 00:09:12,840
this to to any large degree right now

00:09:11,100 --> 00:09:15,840
but the point is that you tell webpack

00:09:12,840 --> 00:09:17,490
if you CSS c s CSS file i want you to

00:09:15,840 --> 00:09:21,150
run it through this chain of loaders go

00:09:17,490 --> 00:09:22,260
through post CSS CSS style and so on but

00:09:21,150 --> 00:09:23,850
what's great is that when you use these

00:09:22,260 --> 00:09:26,400
components you maintain the simple

00:09:23,850 --> 00:09:27,750
interface you just import a component

00:09:26,400 --> 00:09:29,580
and render it if you're building a

00:09:27,750 --> 00:09:31,080
reactor and all of the internals of the

00:09:29,580 --> 00:09:34,410
different asset types are obstructed

00:09:31,080 --> 00:09:37,740
from you so how does BEM fit into this

00:09:34,410 --> 00:09:40,440
world of components well luckily a block

00:09:37,740 --> 00:09:43,560
in BEM is really the same abstraction as

00:09:40,440 --> 00:09:45,390
a component in something like react it's

00:09:43,560 --> 00:09:48,300
dealing with the exact same problem in

00:09:45,390 --> 00:09:50,100
basically the same way so this leads to

00:09:48,300 --> 00:09:52,380
a very simple rule of thumb which is

00:09:50,100 --> 00:09:55,470
that you should never use a block in BEM

00:09:52,380 --> 00:09:56,700
outside a component of the same name so

00:09:55,470 --> 00:09:58,290
that looks something like this again if

00:09:56,700 --> 00:10:00,180
we revisit this folder structure we've

00:09:58,290 --> 00:10:03,870
got our component directory with the

00:10:00,180 --> 00:10:06,240
JavaScript the CSS in the image if you

00:10:03,870 --> 00:10:08,220
look inside that CSS file it's called my

00:10:06,240 --> 00:10:10,080
component dot CSS and inside you'll

00:10:08,220 --> 00:10:13,800
notice every single selector starts with

00:10:10,080 --> 00:10:16,080
my component we're essentially emulating

00:10:13,800 --> 00:10:18,180
local scope here that file only affects

00:10:16,080 --> 00:10:20,640
the the JavaScript in the same file in

00:10:18,180 --> 00:10:22,620
the same folder so to visualize that

00:10:20,640 --> 00:10:23,880
what we've got is for every CSS file in

00:10:22,620 --> 00:10:26,070
this project we've got a matching

00:10:23,880 --> 00:10:27,600
JavaScript file that forms a natural

00:10:26,070 --> 00:10:28,980
component boundary and the great thing

00:10:27,600 --> 00:10:30,990
about components of courses that they

00:10:28,980 --> 00:10:32,580
compose really nicely into a tree

00:10:30,990 --> 00:10:35,280
structure forming the basis of your

00:10:32,580 --> 00:10:38,820
whole UI so now we've got a way of

00:10:35,280 --> 00:10:41,010
scaling our CSS really really nicely now

00:10:38,820 --> 00:10:43,350
this is where personally I thought I was

00:10:41,010 --> 00:10:45,360
going to end with this technique for

00:10:43,350 --> 00:10:47,370
quite a long time I wrote about it in a

00:10:45,360 --> 00:10:49,230
blog post called block element modifying

00:10:47,370 --> 00:10:50,550
your JavaScript components and this was

00:10:49,230 --> 00:10:52,320
something that I thought was going to do

00:10:50,550 --> 00:10:55,110
us well for a long time work really

00:10:52,320 --> 00:10:56,670
really well but luckily in the meantime

00:10:55,110 --> 00:10:59,100
some really interesting developments

00:10:56,670 --> 00:11:02,190
were happening in the web pack space web

00:10:59,100 --> 00:11:04,290
pack landed in its CSS loader and an

00:11:02,190 --> 00:11:06,150
experimental feature called local scope

00:11:04,290 --> 00:11:06,920
and it basically looked something like

00:11:06,150 --> 00:11:09,780
this

00:11:06,920 --> 00:11:12,450
whereas in the previous example I just

00:11:09,780 --> 00:11:14,190
required a CSS file and it was a pure

00:11:12,450 --> 00:11:17,310
side-effect it was just telling web pack

00:11:14,190 --> 00:11:17,690
include the CSS file what you would do

00:11:17,310 --> 00:11:19,520
in

00:11:17,690 --> 00:11:20,930
you would actually import something from

00:11:19,520 --> 00:11:22,610
that stylesheet into the scope of your

00:11:20,930 --> 00:11:24,260
JavaScript so now you're importing

00:11:22,610 --> 00:11:26,390
styles from the stylesheet

00:11:24,260 --> 00:11:28,370
now you might look at that as I did and

00:11:26,390 --> 00:11:30,680
wonder what exactly is going on here

00:11:28,370 --> 00:11:33,620
like what does this Styles thing we've

00:11:30,680 --> 00:11:35,300
imported from a stylesheet evaluate - so

00:11:33,620 --> 00:11:38,780
to answer that first let's look at the

00:11:35,300 --> 00:11:40,640
CSS this is what you would see in the

00:11:38,780 --> 00:11:42,710
matching CSS file this was a new syntax

00:11:40,640 --> 00:11:45,170
custom syntax introduced into web pack

00:11:42,710 --> 00:11:46,760
you'd put colon local and wrap it around

00:11:45,170 --> 00:11:49,700
the selector so here we've got a local

00:11:46,760 --> 00:11:51,320
dot header and a dot footer so what that

00:11:49,700 --> 00:11:53,810
means now is that if you go over to your

00:11:51,320 --> 00:11:56,240
react component in this case we have

00:11:53,810 --> 00:11:58,160
access to Styles header and styles dot

00:11:56,240 --> 00:11:59,480
footer and these are just strict class

00:11:58,160 --> 00:12:01,400
strings that we're putting into our

00:11:59,480 --> 00:12:03,770
template so now we're being even more

00:12:01,400 --> 00:12:06,110
explicit in the link between this

00:12:03,770 --> 00:12:07,940
javascript file requiring CSS and then

00:12:06,110 --> 00:12:11,270
what classes it actually wants to use

00:12:07,940 --> 00:12:12,980
from that CSS file I'm sure you can

00:12:11,270 --> 00:12:14,650
imagine this is gonna scale even better

00:12:12,980 --> 00:12:17,810
than what we were looking at before so

00:12:14,650 --> 00:12:19,160
to understand what happens as part of

00:12:17,810 --> 00:12:21,440
the build process if you look at that

00:12:19,160 --> 00:12:23,450
simple CSS file or the local header and

00:12:21,440 --> 00:12:24,890
a local doc footer once it's come out

00:12:23,450 --> 00:12:27,200
the other end of web pack what you end

00:12:24,890 --> 00:12:30,260
up with is a hash globally unique class

00:12:27,200 --> 00:12:32,090
name so what what happens when you

00:12:30,260 --> 00:12:34,160
import it is that you get an object that

00:12:32,090 --> 00:12:36,980
maps from the name you gave it don't

00:12:34,160 --> 00:12:40,070
header to the global hash which I'm not

00:12:36,980 --> 00:12:41,720
going to try to pronounce of course the

00:12:40,070 --> 00:12:43,760
amazing thing here is that we have no

00:12:41,720 --> 00:12:46,220
more naming collisions you're free to

00:12:43,760 --> 00:12:49,100
have a dozen dot headers in your app and

00:12:46,220 --> 00:12:51,020
and dot root and footer dot title dot

00:12:49,100 --> 00:12:52,640
logo you can just call them basic

00:12:51,020 --> 00:12:56,660
classes like the good old days you don't

00:12:52,640 --> 00:12:57,710
have to worry too much and if you for

00:12:56,660 --> 00:12:58,850
whatever reason particularly in

00:12:57,710 --> 00:13:01,850
development you might want to give your

00:12:58,850 --> 00:13:03,320
classes nicer names than just hashes you

00:13:01,850 --> 00:13:05,420
have full control over it so you can

00:13:03,320 --> 00:13:07,580
configure the web pack loader to say

00:13:05,420 --> 00:13:09,980
that you want the identifier to be the

00:13:07,580 --> 00:13:11,720
the name of the file two underscores and

00:13:09,980 --> 00:13:12,770
the name of the local so in this case

00:13:11,720 --> 00:13:14,930
what's happening is we're basically

00:13:12,770 --> 00:13:16,850
having web pack right our Bend classes

00:13:14,930 --> 00:13:20,450
for us we don't have to do it by hand

00:13:16,850 --> 00:13:22,100
anymore now I work at a company in

00:13:20,450 --> 00:13:24,260
Australia called seek which is basically

00:13:22,100 --> 00:13:26,300
the number one job site there it's a

00:13:24,260 --> 00:13:27,950
household name and a new project we were

00:13:26,300 --> 00:13:30,570
working on was leveraging these

00:13:27,950 --> 00:13:33,150
techniques we were doing it in the the

00:13:30,570 --> 00:13:34,890
style mapping to classes and as soon as

00:13:33,150 --> 00:13:36,870
we saw this local scope we really

00:13:34,890 --> 00:13:38,730
couldn't help ourselves but port our

00:13:36,870 --> 00:13:40,440
entire app across to local scope it was

00:13:38,730 --> 00:13:42,380
a natural fit it was doing exactly what

00:13:40,440 --> 00:13:45,750
we were already doing in our application

00:13:42,380 --> 00:13:47,280
so what that resulted in is any CSS file

00:13:45,750 --> 00:13:49,140
in our application you would open it up

00:13:47,280 --> 00:13:51,690
and you would see this a wall of local

00:13:49,140 --> 00:13:56,220
local local local every single line with

00:13:51,690 --> 00:13:59,100
very few exceptions and that led to a

00:13:56,220 --> 00:14:02,100
very interesting question which was what

00:13:59,100 --> 00:14:04,290
if locally scoped CSS was the default

00:14:02,100 --> 00:14:06,330
why do we have to opt in every single

00:14:04,290 --> 00:14:08,370
selector into this when really when you

00:14:06,330 --> 00:14:11,100
look at any other sane module system

00:14:08,370 --> 00:14:12,780
local scoping is the default and global

00:14:11,100 --> 00:14:15,360
is the exception you should have to say

00:14:12,780 --> 00:14:16,920
I want a global select it not I want

00:14:15,360 --> 00:14:20,010
everything to be local specifically

00:14:16,920 --> 00:14:22,110
every time what if we could write this

00:14:20,010 --> 00:14:24,240
instead we opened up a new tab in our

00:14:22,110 --> 00:14:26,190
editor and we just wrote what we wish we

00:14:24,240 --> 00:14:28,920
could write and ultimately all that was

00:14:26,190 --> 00:14:30,690
was deleting all of the colon locals now

00:14:28,920 --> 00:14:32,430
when we came to what you see on that

00:14:30,690 --> 00:14:34,500
last line there one of the very few

00:14:32,430 --> 00:14:37,410
exceptions where we needed a global

00:14:34,500 --> 00:14:39,840
class because of the way transition

00:14:37,410 --> 00:14:41,310
group works and react we needed access

00:14:39,840 --> 00:14:43,650
to a global class so we flipped the

00:14:41,310 --> 00:14:45,450
model around we said if we say : global

00:14:43,650 --> 00:14:49,170
we want that class to be global but

00:14:45,450 --> 00:14:50,610
everything else is local now we were

00:14:49,170 --> 00:14:52,680
able to achieve this quite easily with

00:14:50,610 --> 00:14:54,360
post CSS which Lockland just covered in

00:14:52,680 --> 00:14:56,310
great details so obviously I don't have

00:14:54,360 --> 00:14:58,350
to go into too much detail here but post

00:14:56,310 --> 00:15:00,240
CSS is a really great tool for allowing

00:14:58,350 --> 00:15:01,200
you to do this sort of work where you

00:15:00,240 --> 00:15:04,350
want to have your own custom

00:15:01,200 --> 00:15:06,390
transformations on the CSS so as a

00:15:04,350 --> 00:15:08,340
result on the train ride home from work

00:15:06,390 --> 00:15:10,380
that day I was the same day I asked the

00:15:08,340 --> 00:15:13,320
question I was very it didn't take long

00:15:10,380 --> 00:15:14,910
to hack together an open-source project

00:15:13,320 --> 00:15:16,770
called post CSS local scope and

00:15:14,910 --> 00:15:18,810
ultimately all it did was it turned dot

00:15:16,770 --> 00:15:21,860
class into a colon local doc class and

00:15:18,810 --> 00:15:24,620
it turned : global dot class into class

00:15:21,860 --> 00:15:27,510
because that doesn't need to be hashed

00:15:24,620 --> 00:15:28,560
IRA I was very excited about where this

00:15:27,510 --> 00:15:30,600
was going

00:15:28,560 --> 00:15:33,090
I wrote a blog post called the end of

00:15:30,600 --> 00:15:34,980
global CSS just like this talk and to my

00:15:33,090 --> 00:15:37,500
surprise it picked up a lot of traction

00:15:34,980 --> 00:15:38,790
got a lot of views people were really

00:15:37,500 --> 00:15:42,450
excited about what we were doing with

00:15:38,790 --> 00:15:44,190
CSS in our application arguably the most

00:15:42,450 --> 00:15:45,960
important person to get excited about it

00:15:44,190 --> 00:15:48,420
was tobias koppers the creator of

00:15:45,960 --> 00:15:50,040
webpack he reached out to me and he said

00:15:48,420 --> 00:15:53,070
i hope it's okay if i integrate your

00:15:50,040 --> 00:15:55,710
post CSS local scope module into the CSS

00:15:53,070 --> 00:15:58,440
loader and of course the obvious answer

00:15:55,710 --> 00:16:02,400
the answer to that is yes so we started

00:15:58,440 --> 00:16:05,250
talking about doing exactly this very

00:16:02,400 --> 00:16:07,110
shortly after this CSS loader landed a

00:16:05,250 --> 00:16:08,850
new feature and another experimental

00:16:07,110 --> 00:16:10,770
feature called module mode so you just

00:16:08,850 --> 00:16:13,650
added question mark module to the end of

00:16:10,770 --> 00:16:15,030
your loader config and this became part

00:16:13,650 --> 00:16:17,940
of the way it worked you didn't need to

00:16:15,030 --> 00:16:20,610
use this post CSS plug-in with a post

00:16:17,940 --> 00:16:22,500
CSS pipeline it was all internal to the

00:16:20,610 --> 00:16:26,220
CSS loader and it all just worked for

00:16:22,500 --> 00:16:28,320
you out of the box as part of my blog

00:16:26,220 --> 00:16:30,510
post one of the things I talked about as

00:16:28,320 --> 00:16:32,310
a potential future was I said we could

00:16:30,510 --> 00:16:34,470
start generating shared classes between

00:16:32,310 --> 00:16:36,660
components automatically treating style

00:16:34,470 --> 00:16:39,390
reuse as an optimization at compile time

00:16:36,660 --> 00:16:40,950
what I meant by that was you know if you

00:16:39,390 --> 00:16:42,390
if you look at what's happening when you

00:16:40,950 --> 00:16:44,700
import the style object you've got an

00:16:42,390 --> 00:16:46,620
object that says styles dot foo maps to

00:16:44,700 --> 00:16:49,410
this global class in this case of BEM

00:16:46,620 --> 00:16:51,210
style class but when you use that in the

00:16:49,410 --> 00:16:53,220
template you know there's really no

00:16:51,210 --> 00:16:54,870
reason that that class could actually be

00:16:53,220 --> 00:16:57,090
a one-to-many mapping when you say

00:16:54,870 --> 00:16:58,980
Stiles dafu why does it have to be one

00:16:57,090 --> 00:17:00,480
class it could be three or four or a

00:16:58,980 --> 00:17:02,160
hundred for all you know you actually

00:17:00,480 --> 00:17:04,439
don't care and that creates a really

00:17:02,160 --> 00:17:06,569
interesting way for us to allow people

00:17:04,439 --> 00:17:08,430
to change their markup without having to

00:17:06,569 --> 00:17:12,209
change their CSS sorry without having to

00:17:08,430 --> 00:17:14,699
change the mark-up necessarily this

00:17:12,209 --> 00:17:17,339
feature then very quickly landed in web

00:17:14,699 --> 00:17:20,400
pack again under the name of composition

00:17:17,339 --> 00:17:21,569
after like much black shedding and it

00:17:20,400 --> 00:17:25,140
looks something like this so when you

00:17:21,569 --> 00:17:27,150
write a selector like dot foo inside of

00:17:25,140 --> 00:17:29,190
that you can say composes heading from

00:17:27,150 --> 00:17:31,710
typography and it composes box from

00:17:29,190 --> 00:17:33,630
layout and what that means now is that

00:17:31,710 --> 00:17:36,000
you this class is actually made out of

00:17:33,630 --> 00:17:38,160
three classes if you drill down further

00:17:36,000 --> 00:17:39,990
your typography CSS has a dot heading

00:17:38,160 --> 00:17:43,860
class again it's just locally scoped and

00:17:39,990 --> 00:17:46,290
layout CSS has a dot box these in the

00:17:43,860 --> 00:17:48,300
end end up being globally unique hashes

00:17:46,290 --> 00:17:50,760
but for in day-to-day development you

00:17:48,300 --> 00:17:54,630
don't have to worry about the names so

00:17:50,760 --> 00:17:56,730
again to really make this clear when you

00:17:54,630 --> 00:17:58,080
import the styles from this style sheet

00:17:56,730 --> 00:18:00,240
Styles dot foo is

00:17:58,080 --> 00:18:02,519
three classes from three different files

00:18:00,240 --> 00:18:04,289
and you don't have to do all that work

00:18:02,519 --> 00:18:09,090
of putting all these classes into your

00:18:04,289 --> 00:18:11,279
HTML it's just kind of done for you now

00:18:09,090 --> 00:18:13,380
I was really excited about what we were

00:18:11,279 --> 00:18:15,690
doing here but my big fear was that this

00:18:13,380 --> 00:18:18,210
was at the time really just a feature

00:18:15,690 --> 00:18:20,460
embedded within web pack not everyone

00:18:18,210 --> 00:18:22,350
uses web pack tools come and go but the

00:18:20,460 --> 00:18:24,210
ideas we had here I thought could really

00:18:22,350 --> 00:18:26,370
have a big impact on the future of CSS

00:18:24,210 --> 00:18:27,809
so I reached out to Tobias copper's and

00:18:26,370 --> 00:18:29,640
I said have you thought about writing a

00:18:27,809 --> 00:18:31,590
standard for CSS modules that others

00:18:29,640 --> 00:18:33,510
could implement I was particularly

00:18:31,590 --> 00:18:35,130
interested in where this could take the

00:18:33,510 --> 00:18:37,320
CSS community in the future when you

00:18:35,130 --> 00:18:38,460
look at something like NPM and what's

00:18:37,320 --> 00:18:40,350
happened to the JavaScript community

00:18:38,460 --> 00:18:42,510
there because everyone agreed on a

00:18:40,350 --> 00:18:44,429
module system I'm hoping that we can get

00:18:42,510 --> 00:18:46,350
there with CSS and this is really the

00:18:44,429 --> 00:18:50,789
first step we need to agree on a module

00:18:46,350 --> 00:18:53,190
system so the next step of course was a

00:18:50,789 --> 00:18:55,769
new repository a new organization on

00:18:53,190 --> 00:18:57,840
github called CSS modules the initial

00:18:55,769 --> 00:19:00,380
commit you can see here which was a big

00:18:57,840 --> 00:19:03,510
readme describing what a CSS module is

00:19:00,380 --> 00:19:05,519
and this got started to get a lot more

00:19:03,510 --> 00:19:07,590
visibility from people now that it had a

00:19:05,519 --> 00:19:09,269
name the missing thing of course was a

00:19:07,590 --> 00:19:13,980
logo which I threw together first as a

00:19:09,269 --> 00:19:16,320
joke but it kind of stuck and and it's

00:19:13,980 --> 00:19:18,929
now available in web packs official CSS

00:19:16,320 --> 00:19:22,049
loader as no longer no longer marked as

00:19:18,929 --> 00:19:24,179
experimental its CSS modules mode and

00:19:22,049 --> 00:19:26,100
everyone who's using webpack today we're

00:19:24,179 --> 00:19:28,230
CSS loader already has the ability to

00:19:26,100 --> 00:19:31,559
plug CSS modules into their pipeline

00:19:28,230 --> 00:19:32,909
today which is really exciting one of

00:19:31,559 --> 00:19:35,100
the big contributions I made was

00:19:32,909 --> 00:19:36,779
creating the CSS modules web page demo

00:19:35,100 --> 00:19:38,460
this runs through all the different

00:19:36,779 --> 00:19:40,889
features and tells you how they work and

00:19:38,460 --> 00:19:42,899
you get to get a sense of what it looks

00:19:40,889 --> 00:19:45,690
like in a in a somewhat more realistic

00:19:42,899 --> 00:19:47,700
application now an obvious question that

00:19:45,690 --> 00:19:50,220
might come up here is you know do we

00:19:47,700 --> 00:19:52,860
have a hard dependency on react here and

00:19:50,220 --> 00:19:55,169
the answer here luckily is no of course

00:19:52,860 --> 00:19:57,440
you've seen it working with react but it

00:19:55,169 --> 00:20:00,480
really works with any JavaScript

00:19:57,440 --> 00:20:01,799
framework you've got it works in mercury

00:20:00,480 --> 00:20:03,960
which is very similar to reactor we've

00:20:01,799 --> 00:20:07,470
got examples in angular angular 2 as

00:20:03,960 --> 00:20:10,260
well backbone and we've seen examples in

00:20:07,470 --> 00:20:12,750
just vanilla J's writing inner HTML or

00:20:10,260 --> 00:20:15,029
creating Dom nodes on the fly because as

00:20:12,750 --> 00:20:17,010
long as you can import styles into a

00:20:15,029 --> 00:20:20,010
JavaScript context you can use CSS

00:20:17,010 --> 00:20:21,779
modules the next obvious question from

00:20:20,010 --> 00:20:24,299
there is does that mean CSS modules has

00:20:21,779 --> 00:20:26,159
a JavaScript dependency I said I was a

00:20:24,299 --> 00:20:28,649
big fan of of progressive enhancement

00:20:26,159 --> 00:20:30,510
how do how does it work if we need

00:20:28,649 --> 00:20:32,730
JavaScript to be able to understand our

00:20:30,510 --> 00:20:34,559
Styles and luckily the answer to this as

00:20:32,730 --> 00:20:38,309
well is no there is no JavaScript

00:20:34,559 --> 00:20:41,370
runtime dependency only at Build time as

00:20:38,309 --> 00:20:42,720
an example of one way of many that you

00:20:41,370 --> 00:20:44,700
could solve this problem I created a

00:20:42,720 --> 00:20:46,730
project called static site generator web

00:20:44,700 --> 00:20:50,070
pack plug-in and it basically lets you

00:20:46,730 --> 00:20:51,929
run JavaScript at Build time to output a

00:20:50,070 --> 00:20:54,299
set of static HTML files but you get all

00:20:51,929 --> 00:20:56,279
the benefits of web pack including CSS

00:20:54,299 --> 00:20:57,960
modules so if you look at the source

00:20:56,279 --> 00:20:59,820
code for the web pack demo that I showed

00:20:57,960 --> 00:21:01,470
you earlier it actually has no

00:20:59,820 --> 00:21:04,500
JavaScript running in the browser it's a

00:21:01,470 --> 00:21:06,990
pure static bundle of HTML and CSS no

00:21:04,500 --> 00:21:08,760
JavaScript and if you view source you'll

00:21:06,990 --> 00:21:10,860
see that you basically have a bunch of

00:21:08,760 --> 00:21:11,970
BEM style classes that are very similar

00:21:10,860 --> 00:21:14,429
to what you would have written by hand

00:21:11,970 --> 00:21:16,950
but at development time it's all locally

00:21:14,429 --> 00:21:20,940
scoped CSS no manual BEM written out

00:21:16,950 --> 00:21:23,580
it's all done for you at Build time now

00:21:20,940 --> 00:21:25,710
the future of course it is going to

00:21:23,580 --> 00:21:27,120
require a lot more work because while we

00:21:25,710 --> 00:21:29,610
have a dependency on JavaScript at the

00:21:27,120 --> 00:21:31,409
moment we're really interested in

00:21:29,610 --> 00:21:33,240
solving the problem of taking CSS

00:21:31,409 --> 00:21:34,379
modules to the broader web community you

00:21:33,240 --> 00:21:36,510
know how does this fit in with things

00:21:34,379 --> 00:21:38,279
like rails for example what's the answer

00:21:36,510 --> 00:21:39,450
there we've got a bunch of ideas we're

00:21:38,279 --> 00:21:42,149
going to start a bunch of experiments

00:21:39,450 --> 00:21:43,620
and by way of course I mean the CSS

00:21:42,149 --> 00:21:45,149
modules team so we've attracted a lot of

00:21:43,620 --> 00:21:47,100
interest some really smart people

00:21:45,149 --> 00:21:48,600
helping us out with this including Glenn

00:21:47,100 --> 00:21:52,559
Madden who's also here today as a

00:21:48,600 --> 00:21:54,149
complete coincidence I swear and yeah I

00:21:52,559 --> 00:21:54,750
think the future looks really bright for

00:21:54,149 --> 00:21:56,820
CSS

00:21:54,750 --> 00:21:58,559
even if it's not necessarily CSS modules

00:21:56,820 --> 00:22:02,129
but what we're kicking off here I think

00:21:58,559 --> 00:22:03,389
is really really important so we've got

00:22:02,129 --> 00:22:05,309
it in web pack today but most

00:22:03,389 --> 00:22:07,289
importantly I think we've proved that we

00:22:05,309 --> 00:22:09,350
can spread it beyond a single tool we've

00:22:07,289 --> 00:22:12,299
also got it working in browserify

00:22:09,350 --> 00:22:13,799
JSP m and again if you feel like your

00:22:12,299 --> 00:22:15,179
build tool or your environment is

00:22:13,799 --> 00:22:18,210
missing from this list by all means

00:22:15,179 --> 00:22:22,020
please help us out and try to spread CSS

00:22:18,210 --> 00:22:23,669
modules beyond where it is today I think

00:22:22,020 --> 00:22:24,900
it's a fair response to this for a lot

00:22:23,669 --> 00:22:27,600
of people would be that this looks

00:22:24,900 --> 00:22:30,170
complicated you know we're making CSS

00:22:27,600 --> 00:22:32,100
feel a lot more heavy and tall driven

00:22:30,170 --> 00:22:34,110
but there's a really important point

00:22:32,100 --> 00:22:36,000
here I want to want to hone it on this

00:22:34,110 --> 00:22:38,310
model here of a component with

00:22:36,000 --> 00:22:40,050
everything localized is actually a much

00:22:38,310 --> 00:22:40,950
simpler model to work with and I think

00:22:40,050 --> 00:22:43,230
it's much easier for beginners

00:22:40,950 --> 00:22:44,760
importantly all of these CSS

00:22:43,230 --> 00:22:46,110
methodologies come with a very steep

00:22:44,760 --> 00:22:47,820
learning curve for people who are new

00:22:46,110 --> 00:22:51,120
and I think that this is actually a nice

00:22:47,820 --> 00:22:52,620
a starting point for people because each

00:22:51,120 --> 00:22:54,800
one of these components is a miniature

00:22:52,620 --> 00:22:56,790
CSS is in garden everything's

00:22:54,800 --> 00:22:58,500
everything's nice and simple within that

00:22:56,790 --> 00:23:00,630
boundary and you're basically back in

00:22:58,500 --> 00:23:02,610
the in the simple days of the early web

00:23:00,630 --> 00:23:05,760
where it was just basic pages and that

00:23:02,610 --> 00:23:07,200
scales really really nicely the main

00:23:05,760 --> 00:23:09,180
point I want to stress is that I think

00:23:07,200 --> 00:23:10,950
we need to have smarter tools not

00:23:09,180 --> 00:23:13,440
stricter methodologies these

00:23:10,950 --> 00:23:15,300
methodologies mean that onboarding

00:23:13,440 --> 00:23:17,370
people and upskilling people in CSS is a

00:23:15,300 --> 00:23:19,470
lot harder than it should be and if we

00:23:17,370 --> 00:23:21,120
get the smarts into the tools I think we

00:23:19,470 --> 00:23:23,370
can have a much better environment for

00:23:21,120 --> 00:23:26,580
beginners as well as solving the problem

00:23:23,370 --> 00:23:28,620
of scaling CSS so together I think with

00:23:26,580 --> 00:23:31,290
things like CSS and thinking more about

00:23:28,620 --> 00:23:34,170
scoping things together we can make big

00:23:31,290 --> 00:23:37,410
CSS feel like small CSS and that's what

00:23:34,170 --> 00:23:39,150
CSS modules is really all about that's

00:23:37,410 --> 00:23:48,180
it for me thank you so much for having

00:23:39,150 --> 00:23:51,840
me hey the buggin work you debugging

00:23:48,180 --> 00:23:53,760
yeah so so for me the fact that I can

00:23:51,840 --> 00:23:57,690
name my classes based on the file name

00:23:53,760 --> 00:23:59,520
and the local name is how we debug in

00:23:57,690 --> 00:24:02,040
our application and so what that means

00:23:59,520 --> 00:24:04,200
is that in development mode when you

00:24:02,040 --> 00:24:06,480
open the dev tools you can very quickly

00:24:04,200 --> 00:24:08,940
get a sense of where in your application

00:24:06,480 --> 00:24:11,310
it were in which file these selectors

00:24:08,940 --> 00:24:13,110
are coming from but the cool thing is

00:24:11,310 --> 00:24:16,290
that because it's completely

00:24:13,110 --> 00:24:17,790
configurable in your website config we

00:24:16,290 --> 00:24:19,560
actually have minified class names in

00:24:17,790 --> 00:24:23,100
production we have five character hashes

00:24:19,560 --> 00:24:25,170
so that's that's we found that that's

00:24:23,100 --> 00:24:27,150
actually plenty for us to debug

00:24:25,170 --> 00:24:28,800
we haven't neat had any need for

00:24:27,150 --> 00:24:29,910
anything like source maps or anything

00:24:28,800 --> 00:24:32,520
like that

00:24:29,910 --> 00:24:34,530
just being curious what happens when you

00:24:32,520 --> 00:24:36,960
have some global style

00:24:34,530 --> 00:24:41,130
absolutely have to include like like

00:24:36,960 --> 00:24:42,390
bootstrap or foundation CSS yeah so I

00:24:41,130 --> 00:24:44,130
guess there's a couple answers to this

00:24:42,390 --> 00:24:46,890
question like in our application we

00:24:44,130 --> 00:24:49,080
started with with the classic like Eric

00:24:46,890 --> 00:24:52,380
Meyer CSS reset that of course has to be

00:24:49,080 --> 00:24:55,080
global its styling tags so what we do is

00:24:52,380 --> 00:24:56,520
we wrap that we we wrap that in : global

00:24:55,080 --> 00:24:59,820
and just say all of these Styles have to

00:24:56,520 --> 00:25:01,500
be in the global scope the other I guess

00:24:59,820 --> 00:25:02,580
there's a broader answer or more of a

00:25:01,500 --> 00:25:06,780
discussion around something like

00:25:02,580 --> 00:25:07,980
bootstrap where I think the probably

00:25:06,780 --> 00:25:12,240
that one of the things I really want to

00:25:07,980 --> 00:25:13,440
focus on after this conference is is

00:25:12,240 --> 00:25:17,190
looking at how we can better support

00:25:13,440 --> 00:25:18,330
something like bootstrap so to use your

00:25:17,190 --> 00:25:20,070
bootstrap classes you would have to

00:25:18,330 --> 00:25:22,080
explicitly import them you can't just

00:25:20,070 --> 00:25:25,980
assume they're in the global scope but

00:25:22,080 --> 00:25:28,170
the I'd like to argue that if we

00:25:25,980 --> 00:25:30,450
introduce a module system to CSS I think

00:25:28,170 --> 00:25:33,510
that will need to usher in a new era of

00:25:30,450 --> 00:25:34,680
frameworks that are built you know

00:25:33,510 --> 00:25:36,140
understanding that there's a module

00:25:34,680 --> 00:25:37,950
system in the same way that that

00:25:36,140 --> 00:25:39,840
JavaScript kind of went through the same

00:25:37,950 --> 00:25:41,910
thing where every library assumed it was

00:25:39,840 --> 00:25:43,650
in the global scope and then slowly move

00:25:41,910 --> 00:25:47,100
towards things like commonjs now that we

00:25:43,650 --> 00:25:48,870
have NPM I think we might if CSS modules

00:25:47,100 --> 00:25:51,810
really takes off I'm hoping we'll see a

00:25:48,870 --> 00:25:54,210
similar transition where you have CSS

00:25:51,810 --> 00:25:55,950
frameworks that introduce classes that

00:25:54,210 --> 00:25:57,900
you never actually use in Europe you

00:25:55,950 --> 00:26:00,120
just compose from their classes and

00:25:57,900 --> 00:26:05,370
build up your own language on top of

00:26:00,120 --> 00:26:07,920
them for example but yeah how about

00:26:05,370 --> 00:26:11,790
documentation and customization of each

00:26:07,920 --> 00:26:14,130
of the component stylesheet so I'm not

00:26:11,790 --> 00:26:17,010
sure I understand I mean if I use the

00:26:14,130 --> 00:26:20,250
third-party CS module to my component

00:26:17,010 --> 00:26:22,950
how how do you suggest as as an author

00:26:20,250 --> 00:26:25,170
of the third-party module how do we

00:26:22,950 --> 00:26:27,230
document the usage and how to customize

00:26:25,170 --> 00:26:29,670
it

00:26:27,230 --> 00:26:32,550
yes so I'm not sure if I understand the

00:26:29,670 --> 00:26:34,020
question but basically it's it's not

00:26:32,550 --> 00:26:36,150
that different to how you might document

00:26:34,020 --> 00:26:39,210
a JavaScript project for example where

00:26:36,150 --> 00:26:41,250
you'll need to explain in what things

00:26:39,210 --> 00:26:42,660
you can import from that library you

00:26:41,250 --> 00:26:45,090
know what basically what's the public

00:26:42,660 --> 00:26:47,100
API of this thing and for a CSS module

00:26:45,090 --> 00:26:47,710
you know in the way that I was just

00:26:47,100 --> 00:26:49,149
talking about we

00:26:47,710 --> 00:26:52,929
might have a framework of things that

00:26:49,149 --> 00:26:55,000
you can pose your classes from you might

00:26:52,929 --> 00:26:57,070
document and say you know say there's a

00:26:55,000 --> 00:26:59,289
grid system you can say you can compose

00:26:57,070 --> 00:27:02,110
your class from these grid classes and

00:26:59,289 --> 00:27:04,000
and and that's kind of how you document

00:27:02,110 --> 00:27:05,649
the link between what what what are the

00:27:04,000 --> 00:27:11,919
building blocks that you provide in your

00:27:05,649 --> 00:27:16,090
in your CSS modules your package okay

00:27:11,919 --> 00:27:18,850
so let's say I don't want to use jQuery

00:27:16,090 --> 00:27:21,940
UI is 2,800 line of JavaScript

00:27:18,850 --> 00:27:23,799
datepicker and I want to you say

00:27:21,940 --> 00:27:26,710
something that you you know you built

00:27:23,799 --> 00:27:29,640
that's a component that's up there but I

00:27:26,710 --> 00:27:34,480
have a gigantic already existing CSS

00:27:29,640 --> 00:27:38,260
JavaScript how quickly can I get that

00:27:34,480 --> 00:27:40,990
running from npm install blank date

00:27:38,260 --> 00:27:43,450
picker to that thing working in my site

00:27:40,990 --> 00:27:45,130
that's that's a really good question and

00:27:43,450 --> 00:27:48,580
I'm not sure that we have a good answer

00:27:45,130 --> 00:27:51,159
for that yet web pack is a really great

00:27:48,580 --> 00:27:55,840
tool but in my opinion it's not that

00:27:51,159 --> 00:27:58,240
strong when you're crossing like package

00:27:55,840 --> 00:28:01,090
boundaries like you publishing something

00:27:58,240 --> 00:28:02,529
that depends on web pack to NPM in a way

00:28:01,090 --> 00:28:04,149
that you could install it and just use

00:28:02,529 --> 00:28:06,909
it in your app I don't think the story

00:28:04,149 --> 00:28:08,890
is that strong there and I think that's

00:28:06,909 --> 00:28:10,659
probably where development in the future

00:28:08,890 --> 00:28:13,260
is going to have to go to make that a

00:28:10,659 --> 00:28:13,260

YouTube URL: https://www.youtube.com/watch?v=W17YAEmjeqY


