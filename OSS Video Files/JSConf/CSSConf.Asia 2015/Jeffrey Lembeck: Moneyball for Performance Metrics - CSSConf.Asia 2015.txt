Title: Jeffrey Lembeck: Moneyball for Performance Metrics - CSSConf.Asia 2015
Publication date: 2015-12-19
Playlist: CSSConf.Asia 2015
Description: 
	The story behind Moneyball was centered around using metrics— newer, out-of-the-norm metrics— to build a better performing baseball team. This strategy of measurement was wildly successful, squeezing out more wins for less money. That works for baseball, why can’t it work for the web? Focusing on our most commonly measured stats only paints half the picture. In this talk, I’ll use those same ideas to give you better ways to determine the quickness at which users can access your site and help you turn up your speed.

Jeff is a developer over at npm, inc. He writes a whole lot of code and the occasional post for A List Apart, has guest lectured and TA'd for Ada Developers Academy, and is a former member of the jQuery Mobile team. Jeff lives in Seattle where he obsesses over oyster happy hours and how to make the best negroni. He dreams of someday owning a hot tub boat.

CSSConf.Asia - Red Dot Design Museum, Singapore - 18 November 2015.

Source: http://2015.cssconf.asia
Slides: http://www.slideshare.net/jlembeck/moneyball-for-performance-metrics

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:00,000 --> 00:00:02,030
I

00:00:12,650 --> 00:00:19,050
cool all right so my talk today is

00:00:16,230 --> 00:00:22,939
Moneyball for performance metrics my

00:00:19,050 --> 00:00:26,189
name is Jeff I a web developer at mpm i

00:00:22,939 --> 00:00:29,970
right as you can imagine then a lot of

00:00:26,189 --> 00:00:32,730
JavaScript but also CSS and HTML but

00:00:29,970 --> 00:00:36,720
today is a free time topic or a hobby

00:00:32,730 --> 00:00:41,730
topic and that is sports I'm actually a

00:00:36,720 --> 00:00:43,650
really really big fan of baseball so I

00:00:41,730 --> 00:00:45,510
don't know how much of the crowd is

00:00:43,650 --> 00:00:47,820
really into baseball but I'll keep the

00:00:45,510 --> 00:00:50,280
sports metaphors down as low as possible

00:00:47,820 --> 00:00:52,649
but baseball is a super interesting

00:00:50,280 --> 00:00:54,690
sport to me because I grew up near

00:00:52,649 --> 00:00:56,899
Seattle I live in Seattle and which

00:00:54,690 --> 00:01:01,050
makes my team the Seattle Mariners ah

00:00:56,899 --> 00:01:03,830
and that isn't necessarily a great team

00:01:01,050 --> 00:01:06,570
to be a fan of if you follow baseball

00:01:03,830 --> 00:01:09,960
because they're historically one of the

00:01:06,570 --> 00:01:11,789
worst teams of all time it's like

00:01:09,960 --> 00:01:14,759
they've never it's not that they've

00:01:11,789 --> 00:01:17,100
never won a World Series which is the US

00:01:14,759 --> 00:01:19,670
baseball championship they've never

00:01:17,100 --> 00:01:24,030
actually even been to it it's

00:01:19,670 --> 00:01:26,460
heartbreaking year after year and while

00:01:24,030 --> 00:01:28,350
I could spend like all of my time up

00:01:26,460 --> 00:01:30,689
here discussing the lifetime of

00:01:28,350 --> 00:01:33,450
disappointment that I've had being a fan

00:01:30,689 --> 00:01:35,460
of this team I'm not going to do that

00:01:33,450 --> 00:01:37,140
instead I'll discuss some of the better

00:01:35,460 --> 00:01:39,960
baseball that I've ever seen in my life

00:01:37,140 --> 00:01:42,570
which of course was played by a totally

00:01:39,960 --> 00:01:46,439
different team so let's talk about a

00:01:42,570 --> 00:01:48,930
division rival the Oakland A's so in

00:01:46,439 --> 00:01:50,640
2002 there's a man named Billy Beane and

00:01:48,930 --> 00:01:52,590
he was the general manager for the

00:01:50,640 --> 00:01:53,970
Oakland Athletics and their professional

00:01:52,590 --> 00:01:56,280
baseball team located in oakland

00:01:53,970 --> 00:01:58,920
california now Oakland has a

00:01:56,280 --> 00:02:00,920
disadvantage as far as teams go of being

00:01:58,920 --> 00:02:03,930
what's called a small-market team and

00:02:00,920 --> 00:02:06,240
this means that the team normally due to

00:02:03,930 --> 00:02:08,670
location doesn't have as big of a fan

00:02:06,240 --> 00:02:11,549
base as you know some of the bigger

00:02:08,670 --> 00:02:13,680
teams would and that means that they

00:02:11,549 --> 00:02:15,299
can't really generate the money that's

00:02:13,680 --> 00:02:19,260
needed to bring in some of the bigger

00:02:15,299 --> 00:02:20,790
name players now in baseball the general

00:02:19,260 --> 00:02:22,919
manager of a team controls all the

00:02:20,790 --> 00:02:25,530
contracts the hiring and the firing of

00:02:22,919 --> 00:02:28,020
players and since he was the GM

00:02:25,530 --> 00:02:30,270
of a small market team Billy Beane had

00:02:28,020 --> 00:02:32,819
the difficult challenge of attracting

00:02:30,270 --> 00:02:35,670
big-name players and hugely talented

00:02:32,819 --> 00:02:37,410
players to his team and because he

00:02:35,670 --> 00:02:39,600
couldn't pay them as much as one of the

00:02:37,410 --> 00:02:43,920
big popular teams would be say the new

00:02:39,600 --> 00:02:45,750
york yankees side note and whatever you

00:02:43,920 --> 00:02:47,670
know about baseball as little or as much

00:02:45,750 --> 00:02:49,050
as possible if you can take one thing

00:02:47,670 --> 00:02:54,060
away from this talk let it be that the

00:02:49,050 --> 00:02:57,450
yankees suck okay so fortunately for the

00:02:54,060 --> 00:02:59,489
A's Billy came up with a plan he decided

00:02:57,450 --> 00:03:02,160
that the traditional ways of measuring

00:02:59,489 --> 00:03:04,080
the quality of a player did not paint

00:03:02,160 --> 00:03:05,430
the entire picture and they weren't

00:03:04,080 --> 00:03:07,440
helpful for building a winning baseball

00:03:05,430 --> 00:03:08,700
team especially in the case of a team

00:03:07,440 --> 00:03:11,250
that couldn't afford to pay the biggest

00:03:08,700 --> 00:03:13,920
players the most amount of money Billy

00:03:11,250 --> 00:03:16,019
instead used newer aggregated statistics

00:03:13,920 --> 00:03:20,040
and formulas to put together a list of

00:03:16,019 --> 00:03:22,140
players who then we're could be measured

00:03:20,040 --> 00:03:24,450
against these new metrics and these

00:03:22,140 --> 00:03:26,730
metrics became far more valuable for

00:03:24,450 --> 00:03:30,150
these players because it could make it

00:03:26,730 --> 00:03:34,049
so Billy could get cheaper players who

00:03:30,150 --> 00:03:35,700
would win better games this is actually

00:03:34,049 --> 00:03:38,010
one of those formulas you saw the like

00:03:35,700 --> 00:03:40,110
early statistics this this is one of

00:03:38,010 --> 00:03:42,209
those big formulas it's for one called

00:03:40,110 --> 00:03:44,549
on base plus slugging percentage which I

00:03:42,209 --> 00:03:46,290
will not explain here today so the

00:03:44,549 --> 00:03:47,610
strategy ended up being very successful

00:03:46,290 --> 00:03:49,410
and it brought the A's to the playoffs

00:03:47,610 --> 00:03:51,360
multiple times in a row and it can be

00:03:49,410 --> 00:03:53,160
made them compete on the same level as

00:03:51,360 --> 00:03:55,470
the teams who spent more than doubled

00:03:53,160 --> 00:03:58,950
the amount of money in this new strategy

00:03:55,470 --> 00:04:00,840
it spread throughout the league and it

00:03:58,950 --> 00:04:03,000
became really really famous and there

00:04:00,840 --> 00:04:05,370
was a book named after it and there was

00:04:03,000 --> 00:04:08,370
even a movie made after it and it

00:04:05,370 --> 00:04:10,260
starred Brad Pitt and if Brad Pitt plays

00:04:08,370 --> 00:04:13,980
you in a movie you've done a pretty good

00:04:10,260 --> 00:04:16,680
job probably so we're here at Def

00:04:13,980 --> 00:04:20,609
estasia which is really beautiful thank

00:04:16,680 --> 00:04:24,539
you and uh I'm up here and I'm babbling

00:04:20,609 --> 00:04:26,370
about baseball and why and it's probably

00:04:24,539 --> 00:04:29,820
because I could talk at all of you about

00:04:26,370 --> 00:04:32,220
baseball all day long but also I think

00:04:29,820 --> 00:04:35,789
that Billy's ideas can be applied to all

00:04:32,220 --> 00:04:38,490
sorts of other fields so traditional

00:04:35,789 --> 00:04:39,240
tactics for measurement they need to be

00:04:38,490 --> 00:04:41,610
reanalyzed

00:04:39,240 --> 00:04:44,310
from time to time they need to be tested

00:04:41,610 --> 00:04:47,940
against new metrics to get a better idea

00:04:44,310 --> 00:04:50,220
of how things actually work I think this

00:04:47,940 --> 00:04:52,169
is especially true for one of my other

00:04:50,220 --> 00:04:54,870
great interests in life which is web

00:04:52,169 --> 00:04:58,340
performance we've spent a very long time

00:04:54,870 --> 00:05:01,470
focused on a few key indicators that

00:04:58,340 --> 00:05:03,660
tell us how fast our sites are but it's

00:05:01,470 --> 00:05:06,840
become pretty clear lately that that

00:05:03,660 --> 00:05:08,310
only paints half the picture so picture

00:05:06,840 --> 00:05:10,919
me for a minute like I'm the web version

00:05:08,310 --> 00:05:13,590
of Billy Beane which should be super

00:05:10,919 --> 00:05:16,919
easy for you especially if you're in the

00:05:13,590 --> 00:05:19,560
really really far back okay so let's

00:05:16,919 --> 00:05:21,000
talk about web sites to find out where

00:05:19,560 --> 00:05:23,580
we can start we have to know what we're

00:05:21,000 --> 00:05:25,199
up against we have to know and

00:05:23,580 --> 00:05:27,060
understand the enemies that play here

00:05:25,199 --> 00:05:29,280
and enemies in this case are the things

00:05:27,060 --> 00:05:32,550
that make up a slow ass web site because

00:05:29,280 --> 00:05:34,349
slow ass web sites lose so what are we

00:05:32,550 --> 00:05:38,940
up against let's take a look at what

00:05:34,349 --> 00:05:41,759
he'll means for a web developer so the

00:05:38,940 --> 00:05:43,650
state of javascript in android is really

00:05:41,759 --> 00:05:45,330
really poor and seriously android

00:05:43,650 --> 00:05:49,349
devices get a lot of heat for lagging on

00:05:45,330 --> 00:05:51,509
performance and they should but it's not

00:05:49,349 --> 00:05:53,580
just android that is killing us out

00:05:51,509 --> 00:05:55,740
there on performance it's kind of all of

00:05:53,580 --> 00:05:59,130
those little pocket computers we have a

00:05:55,740 --> 00:06:02,310
ton of them and they've taken over this

00:05:59,130 --> 00:06:07,080
chart right here is the the orange is

00:06:02,310 --> 00:06:12,270
the growth in data usage over the last

00:06:07,080 --> 00:06:14,069
five years for mobile devices the

00:06:12,270 --> 00:06:17,430
overall growth of mobile device used for

00:06:14,069 --> 00:06:19,680
browsing isn't something new responsive

00:06:17,430 --> 00:06:23,610
design has been the way for about five

00:06:19,680 --> 00:06:26,130
years now and in 2013 actually a twenty

00:06:23,610 --> 00:06:28,469
one percent of all cell phone owners use

00:06:26,130 --> 00:06:30,599
their phone as the primary device for

00:06:28,469 --> 00:06:32,960
internet access and this numbers only

00:06:30,599 --> 00:06:35,669
been increasing as the years go on and

00:06:32,960 --> 00:06:37,500
we don't just assume they'll do things

00:06:35,669 --> 00:06:39,449
with their devices while they're like on

00:06:37,500 --> 00:06:41,909
the go this mobile context thing turns

00:06:39,449 --> 00:06:44,449
out to be mostly but we know

00:06:41,909 --> 00:06:48,060
they'll do basically anything on them

00:06:44,449 --> 00:06:51,900
dogsitting dating making terrible

00:06:48,060 --> 00:06:52,440
comments on YouTube buying food buying a

00:06:51,900 --> 00:06:57,810
car

00:06:52,440 --> 00:06:59,640
are buying a house um we so we have

00:06:57,810 --> 00:07:01,350
these devices that everybody uses and

00:06:59,640 --> 00:07:03,030
we're we're kind of stuck with the fact

00:07:01,350 --> 00:07:03,990
that they do that but we have the

00:07:03,030 --> 00:07:06,750
knowledge that they're going to be used

00:07:03,990 --> 00:07:08,790
everywhere consistently for some

00:07:06,750 --> 00:07:11,040
generally weird stuff from time to time

00:07:08,790 --> 00:07:14,190
but you know they're super convenient so

00:07:11,040 --> 00:07:16,380
who cares if they're fast well it turns

00:07:14,190 --> 00:07:18,480
out basically everybody people expect

00:07:16,380 --> 00:07:22,410
mobile to be fast and will punish you

00:07:18,480 --> 00:07:24,660
for not making it so example etsy

00:07:22,410 --> 00:07:27,510
increased the kilobytes of images on

00:07:24,660 --> 00:07:31,350
their page by 160 kilobytes that's not a

00:07:27,510 --> 00:07:32,940
lot and eating it ended in a twelve

00:07:31,350 --> 00:07:35,130
percent increase in bounce rate for

00:07:32,940 --> 00:07:37,440
their site Edmonds on the other hand

00:07:35,130 --> 00:07:39,600
lowered their load time by seventy-seven

00:07:37,440 --> 00:07:42,120
percent and got twenty percent more page

00:07:39,600 --> 00:07:44,970
views and four percent drop and bounce

00:07:42,120 --> 00:07:48,960
rate and three percent drop and add

00:07:44,970 --> 00:07:51,330
impression variance and as you might

00:07:48,960 --> 00:07:53,010
like so those good examples there and as

00:07:51,330 --> 00:07:55,590
you might have experienced getting your

00:07:53,010 --> 00:07:57,810
site to be fast on mobile is really kind

00:07:55,590 --> 00:08:00,900
of difficult mobile traffic it is by

00:07:57,810 --> 00:08:03,300
default not very fast and latency on a

00:08:00,900 --> 00:08:05,400
bad network can bite you really really

00:08:03,300 --> 00:08:07,290
hard and it's rarely the case that

00:08:05,400 --> 00:08:10,320
somebody has access to a network where

00:08:07,290 --> 00:08:13,290
latency isn't an issue example given

00:08:10,320 --> 00:08:15,960
more people access facebook over 2g than

00:08:13,290 --> 00:08:20,160
4g this probably isn't that surprising

00:08:15,960 --> 00:08:23,430
to a lot of the crowd and that's where

00:08:20,160 --> 00:08:24,630
winning and losing comes into play what

00:08:23,430 --> 00:08:28,919
do I mean by winning and losing let's

00:08:24,630 --> 00:08:30,930
talk more numbers edem drop their load

00:08:28,919 --> 00:08:33,719
time from 1.2 seconds to 500

00:08:30,930 --> 00:08:34,979
milliseconds strap or this increased the

00:08:33,719 --> 00:08:37,110
time people spent on the site by

00:08:34,979 --> 00:08:38,839
21-percent it increased their

00:08:37,110 --> 00:08:41,550
conversions by twenty percent and

00:08:38,839 --> 00:08:46,440
increase the amount of pageviews visited

00:08:41,550 --> 00:08:49,440
by person twenty-eight percent walmart

00:08:46,440 --> 00:08:52,160
dropped their load time by one second

00:08:49,440 --> 00:08:54,839
just one second and it increased two

00:08:52,160 --> 00:08:57,089
percent of conversions and they found

00:08:54,839 --> 00:08:59,070
that for every 100 millisecond load time

00:08:57,089 --> 00:09:01,320
they drop after that they increase their

00:08:59,070 --> 00:09:03,390
revenue by one percent and if you have

00:09:01,320 --> 00:09:04,570
any concept of how much walmart

00:09:03,390 --> 00:09:06,370
sells

00:09:04,570 --> 00:09:10,750
one percent increase in revenue is

00:09:06,370 --> 00:09:13,000
really really really high Obama for

00:09:10,750 --> 00:09:15,220
America during his last campaign drop

00:09:13,000 --> 00:09:16,960
load time by sixty percent and that

00:09:15,220 --> 00:09:18,490
increased conversions by fourteen

00:09:16,960 --> 00:09:21,520
percent conversions in this case being

00:09:18,490 --> 00:09:23,560
donations in the u.s. if you have the

00:09:21,520 --> 00:09:27,610
most amount of donations you tend to win

00:09:23,560 --> 00:09:30,610
the presidency so that's probably pretty

00:09:27,610 --> 00:09:32,320
important and I can do this all day no I

00:09:30,610 --> 00:09:34,360
mean seriously we could be here for a

00:09:32,320 --> 00:09:36,340
really long while if I keep this there

00:09:34,360 --> 00:09:38,140
are a plethora of performance related

00:09:36,340 --> 00:09:39,550
stories out there for you to convince

00:09:38,140 --> 00:09:41,170
the people who have all the money in

00:09:39,550 --> 00:09:44,560
your company that you need to work on

00:09:41,170 --> 00:09:46,180
this stuff example again removing one

00:09:44,560 --> 00:09:48,130
client side redirect from google's

00:09:46,180 --> 00:09:51,790
doubleclick resulted in a twelve percent

00:09:48,130 --> 00:09:53,500
improvement click-through rate amazon

00:09:51,790 --> 00:09:55,000
season one percent decrease in revenue

00:09:53,500 --> 00:09:58,290
for every time they get hit a hundred

00:09:55,000 --> 00:10:00,910
millisecond increase in load time a

00:09:58,290 --> 00:10:02,850
one-second delay for bing turns into a

00:10:00,910 --> 00:10:05,200
two point eight percent drop in revenue

00:10:02,850 --> 00:10:08,980
two-second delay four point three

00:10:05,200 --> 00:10:11,830
percent drop Mozilla cut their load time

00:10:08,980 --> 00:10:13,690
x 2.2 seconds and saw download

00:10:11,830 --> 00:10:16,960
conversions increased by fifteen point

00:10:13,690 --> 00:10:19,780
four percent and so we have all this

00:10:16,960 --> 00:10:22,900
knowledge we know that sites need to be

00:10:19,780 --> 00:10:26,920
faster and the benefits of that but at

00:10:22,900 --> 00:10:29,080
the same time features frameworks new

00:10:26,920 --> 00:10:31,270
designs etc their bloating up our sites

00:10:29,080 --> 00:10:32,620
the average size of a website now is

00:10:31,270 --> 00:10:35,200
around two point one four megabytes

00:10:32,620 --> 00:10:37,390
which is a twelve percent or twelve

00:10:35,200 --> 00:10:42,370
point seven percent growth over just

00:10:37,390 --> 00:10:44,410
last year so we have an increasing use

00:10:42,370 --> 00:10:46,240
of under powered devices on shaky

00:10:44,410 --> 00:10:48,250
networks and those users are being

00:10:46,240 --> 00:10:51,010
delivered bigger website web sites all

00:10:48,250 --> 00:10:54,400
the time these same users are growing

00:10:51,010 --> 00:10:56,890
less and less patient over time with how

00:10:54,400 --> 00:10:58,060
slow our websites are how are we

00:10:56,890 --> 00:11:02,350
supposed to make a good experience

00:10:58,060 --> 00:11:04,870
happen well my favorite way to handle

00:11:02,350 --> 00:11:07,240
problems is to find definitive ways to

00:11:04,870 --> 00:11:09,820
measure those problems and then focus on

00:11:07,240 --> 00:11:11,830
improving those measurements we need to

00:11:09,820 --> 00:11:13,540
find out what we want and find different

00:11:11,830 --> 00:11:16,960
ways of gathering quantitative values by

00:11:13,540 --> 00:11:18,259
which we can solve this problem so

00:11:16,960 --> 00:11:20,540
there's actually kind of a big war

00:11:18,259 --> 00:11:22,459
this though just because something is

00:11:20,540 --> 00:11:25,309
difficult to measure does not mean it

00:11:22,459 --> 00:11:27,399
should be disregarded if you find

00:11:25,309 --> 00:11:31,040
something nearly impossible to measure

00:11:27,399 --> 00:11:33,589
keep it in mind at all times trying to

00:11:31,040 --> 00:11:35,600
approach it from other angles it's good

00:11:33,589 --> 00:11:38,059
you can make it part of other

00:11:35,600 --> 00:11:42,139
measurements if you if it can't be

00:11:38,059 --> 00:11:44,179
broken out just by itself yet and daniel

00:11:42,139 --> 00:11:46,309
ganc élevage which is who's this guy

00:11:44,179 --> 00:11:49,039
right here he had a great quote about

00:11:46,309 --> 00:11:51,470
this the first step is to measure

00:11:49,039 --> 00:11:54,529
whatever can be easily measured this is

00:11:51,470 --> 00:11:56,209
okay as far as it goes the second step

00:11:54,529 --> 00:11:58,069
is to disregard that which can't be

00:11:56,209 --> 00:12:01,069
easily measured or to give it an

00:11:58,069 --> 00:12:03,889
arbitrary quantitative value this is

00:12:01,069 --> 00:12:05,809
artificial and misleading the third step

00:12:03,889 --> 00:12:08,049
is to presume that what can't be

00:12:05,809 --> 00:12:12,139
measured easily really isn't important

00:12:08,049 --> 00:12:13,759
this is blindness the fourth step is to

00:12:12,139 --> 00:12:16,489
say that what can't be easily measured

00:12:13,759 --> 00:12:20,359
really doesn't exist this is gross

00:12:16,489 --> 00:12:22,039
negligence so keeping that in mind we've

00:12:20,359 --> 00:12:23,480
been using easy measurements for a while

00:12:22,039 --> 00:12:26,119
and what are those traditional

00:12:23,480 --> 00:12:29,509
measurements we've been using dawn

00:12:26,119 --> 00:12:31,279
complete so dumb complete is when a

00:12:29,509 --> 00:12:33,169
document object model tree has been

00:12:31,279 --> 00:12:35,299
completely built this is frequently

00:12:33,169 --> 00:12:37,369
known in the point in time which you can

00:12:35,299 --> 00:12:38,899
query for elements that's good you

00:12:37,369 --> 00:12:44,029
should definitely know that part of your

00:12:38,899 --> 00:12:45,649
page um or the load event on load is the

00:12:44,029 --> 00:12:49,730
point in time in which every single

00:12:45,649 --> 00:12:53,329
asset on the site has been loaded and

00:12:49,730 --> 00:12:54,739
Paige wait page weight is the size of

00:12:53,329 --> 00:12:56,389
everything the client ends up

00:12:54,739 --> 00:13:00,529
downloading to make the site work and

00:12:56,389 --> 00:13:03,049
soul some together the request to

00:13:00,529 --> 00:13:05,059
response timing so the request response

00:13:03,049 --> 00:13:07,339
timing is the amount of time from when

00:13:05,059 --> 00:13:08,989
your server receives the HTTP request

00:13:07,339 --> 00:13:11,269
until the time where it responds and

00:13:08,989 --> 00:13:13,359
that's fully encapsulated in server no

00:13:11,269 --> 00:13:15,619
latency taken into account there and

00:13:13,359 --> 00:13:16,999
there are plenty of options available

00:13:15,619 --> 00:13:18,919
for back-end measurement that I've had

00:13:16,999 --> 00:13:22,100
good experience with these three in

00:13:18,919 --> 00:13:25,970
particular so those measurements

00:13:22,100 --> 00:13:28,189
combined they can paint a bit part of

00:13:25,970 --> 00:13:29,419
the picture for us but if you only pay

00:13:28,189 --> 00:13:31,570
attention then because they're easy to

00:13:29,419 --> 00:13:33,430
track you're missing out on crucial

00:13:31,570 --> 00:13:35,920
pieces of performance and this can

00:13:33,430 --> 00:13:37,780
absolutely sink you don't get me wrong

00:13:35,920 --> 00:13:39,910
these metrics are useful and I actually

00:13:37,780 --> 00:13:41,260
pay attention to them but they're just

00:13:39,910 --> 00:13:44,920
part of what we're looking for when

00:13:41,260 --> 00:13:47,320
we're trying to measure speed so what's

00:13:44,920 --> 00:13:48,820
the new way what's the new strategy how

00:13:47,320 --> 00:13:50,290
do we fill in the blank spaces that are

00:13:48,820 --> 00:13:52,570
traditional measurements leave behind

00:13:50,290 --> 00:13:54,310
how do we find the best way to give our

00:13:52,570 --> 00:13:55,960
users what they want in the way we want

00:13:54,310 --> 00:13:58,360
to give it to them and as quickly as

00:13:55,960 --> 00:14:03,220
possible well that answer is kind of

00:13:58,360 --> 00:14:06,090
complicated but it sums up as we need to

00:14:03,220 --> 00:14:08,590
focus on the first usable time if

00:14:06,090 --> 00:14:11,080
instead of monitoring how long it takes

00:14:08,590 --> 00:14:13,330
for the entire page to load we instead

00:14:11,080 --> 00:14:15,100
measure how long it takes for the user

00:14:13,330 --> 00:14:16,930
to use the page for what they want to

00:14:15,100 --> 00:14:21,250
use it for we can get a more accurate

00:14:16,930 --> 00:14:23,320
gauge on general usability because it's

00:14:21,250 --> 00:14:25,060
incredibly frustrating to get to a page

00:14:23,320 --> 00:14:27,130
that clearly has all the content

00:14:25,060 --> 00:14:30,010
downloaded but the text is blank until

00:14:27,130 --> 00:14:32,320
the font loads this is the New York

00:14:30,010 --> 00:14:35,740
Times yesterday on Chrome note how I

00:14:32,320 --> 00:14:37,390
can't read the headlines and it's

00:14:35,740 --> 00:14:39,010
incredibly frustrated to get to a page

00:14:37,390 --> 00:14:40,210
that looks visually complete but has so

00:14:39,010 --> 00:14:43,060
many different scripts on it that you

00:14:40,210 --> 00:14:44,620
can't even interact with it so what

00:14:43,060 --> 00:14:48,610
kinds of things are people using now to

00:14:44,620 --> 00:14:50,610
find out if their site is usable I'd say

00:14:48,610 --> 00:14:54,970
the most popular measurement right now

00:14:50,610 --> 00:14:56,860
newer one at least is speed index speed

00:14:54,970 --> 00:14:58,780
index was invented by the fine folks who

00:14:56,860 --> 00:15:00,760
bring you web page test which is a

00:14:58,780 --> 00:15:02,170
fantastic tool that allows you to see

00:15:00,760 --> 00:15:04,600
video strips of your site and how it

00:15:02,170 --> 00:15:06,430
loads you can break it down to the tenth

00:15:04,600 --> 00:15:08,380
of a second and for those of us who like

00:15:06,430 --> 00:15:10,300
to nerd out about this kind of stuff you

00:15:08,380 --> 00:15:12,880
can roll through and really see how the

00:15:10,300 --> 00:15:14,920
browser puts your page together it's a

00:15:12,880 --> 00:15:17,050
fantastic tool I strongly recommend

00:15:14,920 --> 00:15:21,160
using it and maybe even buying the book

00:15:17,050 --> 00:15:23,530
about using it anyway the speed index

00:15:21,160 --> 00:15:26,040
metric is based upon visual completeness

00:15:23,530 --> 00:15:30,790
and how quickly your site can get there

00:15:26,040 --> 00:15:33,430
so let's talk about the formula it the

00:15:30,790 --> 00:15:35,890
speed index is calculated as an integral

00:15:33,430 --> 00:15:38,170
of 0 to end which is recorded in

00:15:35,890 --> 00:15:42,120
milliseconds of 1 minus the visual

00:15:38,170 --> 00:15:44,290
completion percentage / 100 so if

00:15:42,120 --> 00:15:44,720
integrals and calculus were not your

00:15:44,290 --> 00:15:46,220
strong so

00:15:44,720 --> 00:15:50,720
let's talk about this in the form of a

00:15:46,220 --> 00:15:53,959
chart with visual progress being on the

00:15:50,720 --> 00:15:56,449
y-axis and time being on the X the

00:15:53,959 --> 00:15:59,180
shaded area here is the part of your

00:15:56,449 --> 00:16:00,829
page that is visually incomplete you can

00:15:59,180 --> 00:16:05,449
tell right here that it eventually

00:16:00,829 --> 00:16:07,250
approaches zero this gives you something

00:16:05,449 --> 00:16:10,279
measurable and you can use web the web

00:16:07,250 --> 00:16:12,470
page test API to run several tests

00:16:10,279 --> 00:16:14,240
against your page and return median

00:16:12,470 --> 00:16:15,920
results which is something you can use

00:16:14,240 --> 00:16:17,800
as a benchmark to make sure you're not

00:16:15,920 --> 00:16:21,459
having serious performance regressions

00:16:17,800 --> 00:16:24,980
this example here is the NPM website it

00:16:21,459 --> 00:16:26,930
loads its content right there so you can

00:16:24,980 --> 00:16:30,410
see how it looks visually by tenth of a

00:16:26,930 --> 00:16:33,199
second and speed index isn't brand new

00:16:30,410 --> 00:16:35,540
but it's become accepted as another

00:16:33,199 --> 00:16:37,579
reliable data point to track that gets

00:16:35,540 --> 00:16:39,350
not just accepted it's suggested by

00:16:37,579 --> 00:16:43,160
Google and it's a fan favorite amongst

00:16:39,350 --> 00:16:44,750
the performance crowd so this is a great

00:16:43,160 --> 00:16:47,180
data point to add to those ones I

00:16:44,750 --> 00:16:49,009
mentioned before somebody else has made

00:16:47,180 --> 00:16:51,019
it easy for you to measure which is good

00:16:49,009 --> 00:16:53,509
it gives you a legitimate target to

00:16:51,019 --> 00:16:56,120
optimize for but what about when it

00:16:53,509 --> 00:16:57,680
doesn't capture quite what you need what

00:16:56,120 --> 00:16:59,509
if it's a detect what if it's detector

00:16:57,680 --> 00:17:01,610
for visual completeness is actually way

00:16:59,509 --> 00:17:06,199
off that happens from time to time but

00:17:01,610 --> 00:17:08,059
what else can we measure about the time

00:17:06,199 --> 00:17:11,839
it take or how about the time you take

00:17:08,059 --> 00:17:14,000
while blocking rendering like lowering

00:17:11,839 --> 00:17:16,309
this is the first key to making sure

00:17:14,000 --> 00:17:18,250
your users browsers are able to start as

00:17:16,309 --> 00:17:22,610
soon as they can or rendering your page

00:17:18,250 --> 00:17:24,559
so how do we do that you start by

00:17:22,610 --> 00:17:27,169
finding the files which are blocking

00:17:24,559 --> 00:17:29,480
rendering these include any CSS on your

00:17:27,169 --> 00:17:32,659
page and also any JavaScript that

00:17:29,480 --> 00:17:33,830
executes before the content does once

00:17:32,659 --> 00:17:35,570
you've found these you can use your

00:17:33,830 --> 00:17:36,919
network tab and your dev tools to read

00:17:35,570 --> 00:17:39,350
the total time you spent downloading

00:17:36,919 --> 00:17:41,530
these files but that's not necessarily

00:17:39,350 --> 00:17:44,600
sustainable for automating this process

00:17:41,530 --> 00:17:46,130
so let's have phantom j/s do it you know

00:17:44,600 --> 00:17:49,370
you can use phantom js2 right higher

00:17:46,130 --> 00:17:51,350
files okay so in case you don't know

00:17:49,370 --> 00:17:53,929
what a har file is our file stands for

00:17:51,350 --> 00:17:55,490
HTTP archive file they can be used to

00:17:53,929 --> 00:17:57,770
demonstrate the network traffic and

00:17:55,490 --> 00:17:58,790
assets loaded when visiting a page just

00:17:57,770 --> 00:18:01,780
like what the network

00:17:58,790 --> 00:18:04,520
we'll give you okay so back to Phantom

00:18:01,780 --> 00:18:07,130
by timing each assets request response

00:18:04,520 --> 00:18:09,470
cycle including start time and time and

00:18:07,130 --> 00:18:12,500
the size of the files you can do exactly

00:18:09,470 --> 00:18:14,920
what the network tab does in this case I

00:18:12,500 --> 00:18:18,740
ran a script that created a har file

00:18:14,920 --> 00:18:24,770
which is in JSON format and then I

00:18:18,740 --> 00:18:26,720
opened it in Charles to inspect it so

00:18:24,770 --> 00:18:28,850
you could get a good breakdown of how

00:18:26,720 --> 00:18:30,350
all of that stuff works and how it all

00:18:28,850 --> 00:18:33,170
looks and you can have it automatically

00:18:30,350 --> 00:18:36,410
produced and that's fantastic and useful

00:18:33,170 --> 00:18:39,250
what else how many round trips does it

00:18:36,410 --> 00:18:43,880
take to view your content is it over one

00:18:39,250 --> 00:18:47,930
let's talk about how that works so when

00:18:43,880 --> 00:18:51,560
you have a new HTTP request here's a

00:18:47,930 --> 00:18:54,080
thing out there use TCP to connect now

00:18:51,560 --> 00:18:55,850
did you know that TCP connections cannot

00:18:54,080 --> 00:18:59,270
use the full bandwidth available to them

00:18:55,850 --> 00:19:01,790
in order to prevent dropped packets TCP

00:18:59,270 --> 00:19:03,530
starts slow as it doesn't know the

00:19:01,790 --> 00:19:05,180
quality of the network it's sending data

00:19:03,530 --> 00:19:07,940
over and wants to avoid congestion of

00:19:05,180 --> 00:19:10,910
that network therefore it's a standard

00:19:07,940 --> 00:19:12,560
ascent at a maximum 10 TCP packets on a

00:19:10,910 --> 00:19:16,370
new connection for its first round trip

00:19:12,560 --> 00:19:19,330
at 1500 bytes per packet that's only

00:19:16,370 --> 00:19:21,470
fourteen point six five kilobytes at

00:19:19,330 --> 00:19:23,090
this point the client sends an

00:19:21,470 --> 00:19:25,910
acknowledgement that it has received the

00:19:23,090 --> 00:19:28,160
data and it sends it to the server so it

00:19:25,910 --> 00:19:30,560
will send more the server will slowly

00:19:28,160 --> 00:19:32,480
ramp up the amount that it sends with

00:19:30,560 --> 00:19:34,250
each trip but this can take a bit if

00:19:32,480 --> 00:19:36,980
you've got a huge first file you're

00:19:34,250 --> 00:19:39,230
sending so in this example here you just

00:19:36,980 --> 00:19:41,420
like jump left to right that client says

00:19:39,230 --> 00:19:44,420
hey I'd like you know to visit this page

00:19:41,420 --> 00:19:46,820
the server gives back that first 14.6 5k

00:19:44,420 --> 00:19:48,560
the client says I've got it so the

00:19:46,820 --> 00:19:50,270
server starts ramping up how much it can

00:19:48,560 --> 00:19:54,380
send with the client acknowledging each

00:19:50,270 --> 00:19:55,820
time how much that it received it so

00:19:54,380 --> 00:19:59,720
what does this actually mean for you in

00:19:55,820 --> 00:20:02,120
practice if you can keep all of what is

00:19:59,720 --> 00:20:05,210
needed to use the Site out of the gates

00:20:02,120 --> 00:20:07,820
in one request lower than or equal to 14

00:20:05,210 --> 00:20:09,440
points 6 for 8 kilobytes you're cutting

00:20:07,820 --> 00:20:11,660
the amount of round trips that need to

00:20:09,440 --> 00:20:15,290
happen for your site to be usable and in

00:20:11,660 --> 00:20:17,960
ibly fast speed even over high latency

00:20:15,290 --> 00:20:22,120
and low bandwidth networks the this will

00:20:17,960 --> 00:20:24,830
feel snappy what else can we measure

00:20:22,120 --> 00:20:27,470
what about timing differences on every

00:20:24,830 --> 00:20:31,040
event under the Sun have you used the

00:20:27,470 --> 00:20:33,680
performance timing API before it's

00:20:31,040 --> 00:20:36,890
awesome so let's do this we'll bring

00:20:33,680 --> 00:20:39,920
phantom Jas back out I can automate

00:20:36,890 --> 00:20:42,350
running this performance timing load

00:20:39,920 --> 00:20:44,240
event and minus performance timing got

00:20:42,350 --> 00:20:46,340
navigation start what this does is it

00:20:44,240 --> 00:20:47,810
gives you the time in milliseconds from

00:20:46,340 --> 00:20:50,240
the moment the browser starts the

00:20:47,810 --> 00:20:51,590
process of navigation to your page to

00:20:50,240 --> 00:20:53,720
the moment it's finished loading the

00:20:51,590 --> 00:20:56,060
page this is far more exact than

00:20:53,720 --> 00:21:00,560
anything on load could ever give you so

00:20:56,060 --> 00:21:02,330
it's really useful this would this right

00:21:00,560 --> 00:21:04,310
here performance not timing Dom

00:21:02,330 --> 00:21:06,500
interactive minus performance not timing

00:21:04,310 --> 00:21:07,670
gut response start this will give you

00:21:06,500 --> 00:21:09,260
the time from the moment where your

00:21:07,670 --> 00:21:11,600
server response comes back to your

00:21:09,260 --> 00:21:13,910
browser until the timer the browser is

00:21:11,600 --> 00:21:17,660
finished parsing all of the HTML and Dom

00:21:13,910 --> 00:21:20,900
construction is now complete are those

00:21:17,660 --> 00:21:24,500
not exact enough here are all the

00:21:20,900 --> 00:21:26,840
options available for timing for almost

00:21:24,500 --> 00:21:29,000
every measured point here you can record

00:21:26,840 --> 00:21:30,680
and report back your data this should

00:21:29,000 --> 00:21:35,960
push you along nicely to having your own

00:21:30,680 --> 00:21:38,450
real time user monitoring but sometimes

00:21:35,960 --> 00:21:40,010
things aren't so cut and dry and this is

00:21:38,450 --> 00:21:41,450
where a big caveat comes in in all this

00:21:40,010 --> 00:21:42,440
you can come up with all of your own

00:21:41,450 --> 00:21:44,840
statistics and all of your own

00:21:42,440 --> 00:21:47,210
monitoring but different websites need

00:21:44,840 --> 00:21:49,250
different measurements and it's great to

00:21:47,210 --> 00:21:51,470
line up your sites and compete over

00:21:49,250 --> 00:21:53,690
medium speed indexes and page weights

00:21:51,470 --> 00:21:55,640
and load times and seriously competing

00:21:53,690 --> 00:21:58,310
or without stuff makes a better web for

00:21:55,640 --> 00:22:00,320
all of us but what if your page cannot

00:21:58,310 --> 00:22:03,230
possibly be considered complete until

00:22:00,320 --> 00:22:04,730
the hero image is loaded what if you

00:22:03,230 --> 00:22:06,530
couldn't even think of your page of

00:22:04,730 --> 00:22:08,330
using your page until your menu can not

00:22:06,530 --> 00:22:11,660
only be clicked on but it can be used as

00:22:08,330 --> 00:22:13,970
well and this is where we end up

00:22:11,660 --> 00:22:15,650
building something of our own we can

00:22:13,970 --> 00:22:17,020
have all these well vetted formulas and

00:22:15,650 --> 00:22:20,480
ways to approach performance out there

00:22:17,020 --> 00:22:23,060
but to really approach our problems at

00:22:20,480 --> 00:22:24,840
their source we need something that fits

00:22:23,060 --> 00:22:26,340
our own personal sites

00:22:24,840 --> 00:22:28,289
for that we're going to need real-time

00:22:26,340 --> 00:22:30,419
user monitoring and we're also going to

00:22:28,289 --> 00:22:35,940
need some custom metrics luckily we've

00:22:30,419 --> 00:22:37,950
got those turd the user timing API these

00:22:35,940 --> 00:22:40,500
are timing API is still in recommended

00:22:37,950 --> 00:22:43,409
status by the w3c and it's not used by

00:22:40,500 --> 00:22:46,110
Safari yet including iOS or opera mini

00:22:43,409 --> 00:22:48,950
but there's a perfectly good poly fill

00:22:46,110 --> 00:22:51,990
out there for this so let's get going

00:22:48,950 --> 00:22:54,120
the user timing API provides a couple of

00:22:51,990 --> 00:22:55,650
really good methods that can help us

00:22:54,120 --> 00:22:57,809
better track what's going on on our page

00:22:55,650 --> 00:23:01,919
they attach right to the performance

00:22:57,809 --> 00:23:03,870
interface these methods include mark

00:23:01,919 --> 00:23:07,110
which allows you to take a quick time

00:23:03,870 --> 00:23:09,000
snapshot that is saved and measure which

00:23:07,110 --> 00:23:11,580
will give you a measurement between two

00:23:09,000 --> 00:23:13,620
marks with these you can very accurately

00:23:11,580 --> 00:23:16,200
time what's happening it's just how long

00:23:13,620 --> 00:23:18,240
it takes for these things to happen so

00:23:16,200 --> 00:23:20,640
let's use an example have a page that

00:23:18,240 --> 00:23:24,179
isn't considered ready until this image

00:23:20,640 --> 00:23:26,429
itself is front and center now with the

00:23:24,179 --> 00:23:28,770
regular performance timing API I can

00:23:26,429 --> 00:23:31,049
have the ability to grab the file that

00:23:28,770 --> 00:23:33,630
was requested and it can tell you how

00:23:31,049 --> 00:23:35,640
long it takes to get the file with get

00:23:33,630 --> 00:23:37,679
entries binding and then I can just

00:23:35,640 --> 00:23:39,179
check the duration of that but that's

00:23:37,679 --> 00:23:43,830
not the whole story to the file we need

00:23:39,179 --> 00:23:45,630
to see when it actually shows up so for

00:23:43,830 --> 00:23:47,700
that we can borrow a little trick that

00:23:45,630 --> 00:23:49,649
Steve Souders came up with and combine a

00:23:47,700 --> 00:23:52,590
few different methods for marketing we

00:23:49,649 --> 00:23:53,700
can start with an inline load man I

00:23:52,590 --> 00:23:57,120
always wanted to use the laser pointer

00:23:53,700 --> 00:23:59,760
on this in line on load on the image

00:23:57,120 --> 00:24:01,770
itself and then we can also put an

00:23:59,760 --> 00:24:03,750
inline script right behind the image tag

00:24:01,770 --> 00:24:06,750
so it will execute while the page is

00:24:03,750 --> 00:24:08,429
being rendered then we can check the

00:24:06,750 --> 00:24:11,190
start time with the start time is for

00:24:08,429 --> 00:24:12,510
each of these marks the highest in this

00:24:11,190 --> 00:24:13,860
case will give us the actual time that

00:24:12,510 --> 00:24:16,380
the image has been rendered on the page

00:24:13,860 --> 00:24:18,600
this is immensely useful for a hero

00:24:16,380 --> 00:24:20,309
image or for app image that the page

00:24:18,600 --> 00:24:22,830
actually relies upon to be considered

00:24:20,309 --> 00:24:24,240
usable such as if you're you have a site

00:24:22,830 --> 00:24:25,950
where people are buying things and they

00:24:24,240 --> 00:24:29,940
need to see the picture to be able to

00:24:25,950 --> 00:24:32,520
use the page that's pretty neat huh so

00:24:29,940 --> 00:24:34,380
hopefully you have an idea of something

00:24:32,520 --> 00:24:36,149
in your head that you can measure that

00:24:34,380 --> 00:24:37,789
will dramatically increase the actual

00:24:36,149 --> 00:24:40,399
visibility you have in

00:24:37,789 --> 00:24:41,830
to your site's performance but never be

00:24:40,399 --> 00:24:44,029
satisfied with just those measurements

00:24:41,830 --> 00:24:46,129
new techniques will continue to be

00:24:44,029 --> 00:24:49,070
developed and with them will come better

00:24:46,129 --> 00:24:50,989
insight along the way so pay attention

00:24:49,070 --> 00:24:52,309
to your statistics and tests across the

00:24:50,989 --> 00:24:56,200
board and you should have a lot of

00:24:52,309 --> 00:24:58,129
success and then you can dance so now

00:24:56,200 --> 00:24:59,840
now that you have your own measurements

00:24:58,129 --> 00:25:03,350
in order maybe we can focus on what we

00:24:59,840 --> 00:25:04,879
need to do to speed things up a bit so

00:25:03,350 --> 00:25:06,259
Layton sees a big one latency is the

00:25:04,879 --> 00:25:07,369
amount of time it takes for your request

00:25:06,259 --> 00:25:11,179
to make it from the client to the server

00:25:07,369 --> 00:25:12,830
the transmission is limited by first the

00:25:11,179 --> 00:25:14,989
speed of light but then the resistance

00:25:12,830 --> 00:25:17,389
provided by the copper used in the wire

00:25:14,989 --> 00:25:18,979
and the path taken from routing station

00:25:17,389 --> 00:25:22,009
or routing station for these HTTP

00:25:18,979 --> 00:25:24,349
requests since the path is such a factor

00:25:22,009 --> 00:25:26,440
in this case using a CDN can greatly

00:25:24,349 --> 00:25:28,549
limit the amount of latency your users

00:25:26,440 --> 00:25:31,909
incur by shortening the distance of the

00:25:28,549 --> 00:25:33,649
request testicle another way to avoid

00:25:31,909 --> 00:25:36,409
latency issues is cater to your critical

00:25:33,649 --> 00:25:39,229
path as I mentioned earlier the first

00:25:36,409 --> 00:25:40,460
request makes to the client they are the

00:25:39,229 --> 00:25:42,919
first request that the client makes to

00:25:40,460 --> 00:25:45,799
the server will be limited by tcp slow

00:25:42,919 --> 00:25:48,889
start this limit is roughly 14.6

00:25:45,799 --> 00:25:50,929
kilobytes with this in mind if you can

00:25:48,889 --> 00:25:52,639
inline your CSS that is critical for the

00:25:50,929 --> 00:25:54,739
page to load and then asynchronously

00:25:52,639 --> 00:25:56,840
load your full CSS file along with any

00:25:54,739 --> 00:25:59,359
unnecessary knee you know necessary

00:25:56,840 --> 00:26:00,979
JavaScript you can make sure little to

00:25:59,359 --> 00:26:03,049
no render blocking that relies on a

00:26:00,979 --> 00:26:05,059
network request occurs and your first

00:26:03,049 --> 00:26:07,909
round trip will have everything a user

00:26:05,059 --> 00:26:09,470
needs to use a site one of my favorite

00:26:07,909 --> 00:26:11,840
examples of this is the filament group

00:26:09,470 --> 00:26:14,749
website in this case I throttle the

00:26:11,840 --> 00:26:16,309
connection down at to just a 2g and the

00:26:14,749 --> 00:26:21,049
site was still usable in less than a

00:26:16,309 --> 00:26:22,970
second while sending an empty body and

00:26:21,049 --> 00:26:25,580
waiting for a script to load all of your

00:26:22,970 --> 00:26:28,159
assets may feel cleaner and and

00:26:25,580 --> 00:26:29,960
certainly nice for a lot of things it it

00:26:28,159 --> 00:26:31,070
guarantees that there will be a minimum

00:26:29,960 --> 00:26:33,259
of two requests before you can even

00:26:31,070 --> 00:26:35,090
start building the content for your page

00:26:33,259 --> 00:26:36,470
and once that happens if your user has

00:26:35,090 --> 00:26:38,869
an underpowered device then it can take

00:26:36,470 --> 00:26:40,609
even longer and that's why server-side

00:26:38,869 --> 00:26:42,499
rendering is important rendering your

00:26:40,609 --> 00:26:45,169
site on the server first and sending the

00:26:42,499 --> 00:26:48,080
HTML on the first response will almost

00:26:45,169 --> 00:26:50,299
always provide a faster first page load

00:26:48,080 --> 00:26:51,559
in the past we've been able to achieve

00:26:50,299 --> 00:26:54,730
this with progressive and hand

00:26:51,559 --> 00:26:56,870
which I'm a huge advocate for but now

00:26:54,730 --> 00:26:58,190
javascript frameworks libraries whatever

00:26:56,870 --> 00:27:00,320
you want to call them in this case

00:26:58,190 --> 00:27:02,389
they're catering to this performance

00:27:00,320 --> 00:27:05,299
necessity by allowing your first request

00:27:02,389 --> 00:27:08,029
to be served HTML ember does it with

00:27:05,299 --> 00:27:11,629
fastboot angular 2 does it I know you

00:27:08,029 --> 00:27:14,360
can build it in with backbone etc you

00:27:11,629 --> 00:27:16,159
can also use best practices which I

00:27:14,360 --> 00:27:18,529
never really liked that term it tends to

00:27:16,159 --> 00:27:20,299
mean hacks that involve tribal knowledge

00:27:18,529 --> 00:27:23,720
so we can work around limitations of our

00:27:20,299 --> 00:27:25,669
technology and with HTTP 1.1 we have a

00:27:23,720 --> 00:27:27,950
lot of those so let's talk about why

00:27:25,669 --> 00:27:31,610
they're actually recommended instead of

00:27:27,950 --> 00:27:33,440
hand waving around them for example due

00:27:31,610 --> 00:27:36,860
to the amount of concurrent requests a

00:27:33,440 --> 00:27:39,259
browser can make 6 which is a completely

00:27:36,860 --> 00:27:41,600
arbitrary number that we all for some

00:27:39,259 --> 00:27:43,399
reason need to memorize we suggest you

00:27:41,600 --> 00:27:45,049
concatenate all of your CSS and

00:27:43,399 --> 00:27:46,669
JavaScript files so as to limit the

00:27:45,049 --> 00:27:50,419
number of requests that your browser can

00:27:46,669 --> 00:27:52,490
make without stalling and since we're

00:27:50,419 --> 00:27:54,379
sending this big file of CSS or

00:27:52,490 --> 00:27:55,970
JavaScript we want to make sure that we

00:27:54,379 --> 00:27:58,070
can make it is syntactically small as

00:27:55,970 --> 00:27:59,450
possible we want to strip comments we

00:27:58,070 --> 00:28:01,909
want to make variable names as small as

00:27:59,450 --> 00:28:03,350
possible etc minification makes this

00:28:01,909 --> 00:28:05,799
possible by parsing your file and then

00:28:03,350 --> 00:28:09,139
recreating your coat in the smallest way

00:28:05,799 --> 00:28:10,789
then there's gzip I'm a huge fan of G's

00:28:09,139 --> 00:28:12,320
if I think it's really really great gzip

00:28:10,789 --> 00:28:15,799
works like the video you see on the

00:28:12,320 --> 00:28:17,659
screen it looks for repetition in the

00:28:15,799 --> 00:28:19,309
text that's being sent and it writes to

00:28:17,659 --> 00:28:22,220
file something that references said

00:28:19,309 --> 00:28:24,080
repetition if you can see the red text

00:28:22,220 --> 00:28:27,590
that's starting to pop up there that's

00:28:24,080 --> 00:28:29,690
the part that's rep that's repeating so

00:28:27,590 --> 00:28:31,549
this compression process actually is

00:28:29,690 --> 00:28:34,669
really really fast and it makes for some

00:28:31,549 --> 00:28:36,259
immensely smaller files for transfer so

00:28:34,669 --> 00:28:37,850
you should always gzip where you can

00:28:36,259 --> 00:28:39,529
you'll save money on bandwidth and

00:28:37,850 --> 00:28:41,480
provide a better experience for your

00:28:39,529 --> 00:28:45,919
users once again everything in the red

00:28:41,480 --> 00:28:48,230
there that gets compressed out so

00:28:45,919 --> 00:28:50,179
combining gzip and minification can be a

00:28:48,230 --> 00:28:52,389
huge for dropping your file size for

00:28:50,179 --> 00:28:59,119
example here's jquery dropping from

00:28:52,389 --> 00:29:00,710
247,000 597 bytes 220 9607 bytes so as I

00:28:59,119 --> 00:29:02,690
mentioned best practices are normally

00:29:00,710 --> 00:29:05,360
artifacts that come with limitations of

00:29:02,690 --> 00:29:06,500
your current ecosystem http/2 helps

00:29:05,360 --> 00:29:09,020
rest these issues in a lot of ways and

00:29:06,500 --> 00:29:10,790
best of all you can use it right now

00:29:09,020 --> 00:29:14,630
delivering your site based on what your

00:29:10,790 --> 00:29:15,799
client asks for so hopefully you have

00:29:14,630 --> 00:29:17,330
some ways in your mind to measure

00:29:15,799 --> 00:29:18,830
performance on your site with these

00:29:17,330 --> 00:29:20,900
measurements you can concentrate on the

00:29:18,830 --> 00:29:22,940
pain points in your site by focusing on

00:29:20,900 --> 00:29:24,440
methods to speed everything up this is

00:29:22,940 --> 00:29:28,010
great it's wonderful but let's bring it

00:29:24,440 --> 00:29:29,270
down to the last part never settling set

00:29:28,010 --> 00:29:30,890
a performance budget and stick to it

00:29:29,270 --> 00:29:33,320
know what you want your users to

00:29:30,890 --> 00:29:34,820
experience measure increases and

00:29:33,320 --> 00:29:36,410
decreases in your time and see how that

00:29:34,820 --> 00:29:38,299
affects your traffic your conversions

00:29:36,410 --> 00:29:40,160
your sales and make sure the continuous

00:29:38,299 --> 00:29:43,700
integration system tests if your budget

00:29:40,160 --> 00:29:46,669
is being met here's how etsy handles

00:29:43,700 --> 00:29:49,400
this they keep a video showing on a big

00:29:46,669 --> 00:29:51,620
wall in there a building how their site

00:29:49,400 --> 00:29:55,220
currently loads displayed front and

00:29:51,620 --> 00:29:56,540
center developers of the site see where

00:29:55,220 --> 00:29:58,610
their members or where their numbers

00:29:56,540 --> 00:30:00,500
currently are so they're empowered to

00:29:58,610 --> 00:30:01,940
act upon problems and what they're

00:30:00,500 --> 00:30:06,260
building to see if their success their

00:30:01,940 --> 00:30:08,360
successes firsthand so I've talked a lot

00:30:06,260 --> 00:30:10,490
up here about how performance affects

00:30:08,360 --> 00:30:12,230
the bottom line and I even named this

00:30:10,490 --> 00:30:13,790
talk after a baseball method of

00:30:12,230 --> 00:30:15,230
extracting the most you can out of your

00:30:13,790 --> 00:30:17,990
team without spending more money than

00:30:15,230 --> 00:30:19,850
necessary but performance web

00:30:17,990 --> 00:30:22,309
performance at least it's about more

00:30:19,850 --> 00:30:24,830
than that building a faster website

00:30:22,309 --> 00:30:26,660
makes for more money sure but it also

00:30:24,830 --> 00:30:29,450
increases the amount of people who can

00:30:26,660 --> 00:30:33,140
visit your site faster sites tend to be

00:30:29,450 --> 00:30:34,910
faster period all the way down and so

00:30:33,140 --> 00:30:36,320
that makes it your site more accessible

00:30:34,910 --> 00:30:38,809
for everybody including everybody who

00:30:36,320 --> 00:30:44,559
has a lagging network behind him and and

00:30:38,809 --> 00:30:44,559
that with the web's all about thanks

00:30:45,429 --> 00:30:53,120
thank you Jeff were wonderful talk a

00:30:49,480 --> 00:30:56,750
follow from my own experience about the

00:30:53,120 --> 00:30:59,750
performers API by the WTC I find the

00:30:56,750 --> 00:31:02,900
issue is whether it's really accurate

00:30:59,750 --> 00:31:05,000
for the use of all time like you add the

00:31:02,900 --> 00:31:08,720
marking your transcript but in fact it

00:31:05,000 --> 00:31:12,610
may be other time the pages do some

00:31:08,720 --> 00:31:17,059
harder unusable so that's a one issue we

00:31:12,610 --> 00:31:19,370
encountered yeah yeah no I I totally see

00:31:17,059 --> 00:31:21,410
that and that's why at least in the

00:31:19,370 --> 00:31:23,630
image hero part right there I had two

00:31:21,410 --> 00:31:26,000
different marks and that piece you'll

00:31:23,630 --> 00:31:28,010
find that the performance timing API in

00:31:26,000 --> 00:31:31,580
the user timing API occasionally need

00:31:28,010 --> 00:31:35,809
you to figure out first what you're

00:31:31,580 --> 00:31:37,520
trying to measure and so usability time

00:31:35,809 --> 00:31:40,400
as kind of arbitrary based on what your

00:31:37,520 --> 00:31:43,130
site is and so if you can pinpoint what

00:31:40,400 --> 00:31:46,430
it is you're exactly looking for it it

00:31:43,130 --> 00:31:50,870
tends to be able to help with your

00:31:46,430 --> 00:31:53,780
accuracy because you mentioned a Pollock

00:31:50,870 --> 00:31:56,240
on getting I just wonder if it's still

00:31:53,780 --> 00:31:59,750
worth to make some things like the

00:31:56,240 --> 00:32:02,570
Facebook speak pipe it's a legacy maybe

00:31:59,750 --> 00:32:05,059
legacy issue that we just try to

00:32:02,570 --> 00:32:08,030
optimize the doting with several bundles

00:32:05,059 --> 00:32:10,309
in in all just clear implementation but

00:32:08,030 --> 00:32:14,660
I don't know whether if we have the HTTP

00:32:10,309 --> 00:32:17,780
two we still need to do that yeah okay

00:32:14,660 --> 00:32:21,740
so this is actually where HTTP two comes

00:32:17,780 --> 00:32:23,600
in tremendously and fantastically so HED

00:32:21,740 --> 00:32:27,230
be too in case people McLeod don't know

00:32:23,600 --> 00:32:29,260
has a thing called server push which

00:32:27,230 --> 00:32:31,520
will basically deliver your assets

00:32:29,260 --> 00:32:35,660
immediately upon visiting the site it's

00:32:31,520 --> 00:32:37,309
pretty awesome and I'm so you can right

00:32:35,660 --> 00:32:40,160
now and it requires a little bit of

00:32:37,309 --> 00:32:43,160
finagling you can based on the header of

00:32:40,160 --> 00:32:47,300
the request you can direct your code to

00:32:43,160 --> 00:32:49,250
say load this stuff with HTTP two and if

00:32:47,300 --> 00:32:52,790
they're approaching with HTTP one dot

00:32:49,250 --> 00:32:55,250
one shoot them this way instead so with

00:32:52,790 --> 00:32:57,710
tooling you're still concatenated is

00:32:55,250 --> 00:33:00,590
part of your build process and you can

00:32:57,710 --> 00:33:04,250
say I want this one file to be served in

00:33:00,590 --> 00:33:06,440
the case of HTTP 1.1 but screw it load

00:33:04,250 --> 00:33:07,850
them all if they're coming with two

00:33:06,440 --> 00:33:09,410
because you can have a ton of parallel

00:33:07,850 --> 00:33:13,130
requests and they'll actually come out a

00:33:09,410 --> 00:33:15,100
lot faster that way hi I'm my name is

00:33:13,130 --> 00:33:18,590
Mitch I was just wondering your idea on

00:33:15,100 --> 00:33:20,780
how Facebook do it with a block ace like

00:33:18,590 --> 00:33:22,400
block certain elements with kind of non

00:33:20,780 --> 00:33:24,890
distinct distinguished shapes and

00:33:22,400 --> 00:33:27,560
whether that to the user is something

00:33:24,890 --> 00:33:29,510
that's feasible or not or does it does

00:33:27,560 --> 00:33:30,890
it appear to be faster or from the users

00:33:29,510 --> 00:33:32,810
perspective you think it works

00:33:30,890 --> 00:33:37,010
or like your opinions on that basically

00:33:32,810 --> 00:33:39,980
um so I'm I'm actually kind of a really

00:33:37,010 --> 00:33:44,930
big fan of the idea of building things

00:33:39,980 --> 00:33:50,500
that appear to be faster because that

00:33:44,930 --> 00:33:53,630
can well trick people into having your

00:33:50,500 --> 00:33:57,680
it it makes it so your site is still

00:33:53,630 --> 00:33:59,960
usable in a faster fashion and in

00:33:57,680 --> 00:34:01,520
Facebook's situation there that's what

00:33:59,960 --> 00:34:03,770
you're talking about that face image

00:34:01,520 --> 00:34:05,600
loading thing where it like gives you it

00:34:03,770 --> 00:34:06,740
turns out that that picture that your

00:34:05,600 --> 00:34:08,330
first saying there isn't necessarily

00:34:06,740 --> 00:34:11,270
what everybody is interested in right

00:34:08,330 --> 00:34:13,280
away it feels like that would be the

00:34:11,270 --> 00:34:14,390
case but mostly when you're looking at

00:34:13,280 --> 00:34:17,630
pictures you're thumbing through

00:34:14,390 --> 00:34:21,169
people's sorry I've cursed up here

00:34:17,630 --> 00:34:27,950
a lot today but yeah so I'm an advocate

00:34:21,169 --> 00:34:30,890
for it I work for a news agency and

00:34:27,950 --> 00:34:33,590
everything works fine till you inject

00:34:30,890 --> 00:34:35,330
the ads because the Moodle based on Ezra

00:34:33,590 --> 00:34:40,220
pending so how do you make the

00:34:35,330 --> 00:34:44,300
performance for it Oh God so performance

00:34:40,220 --> 00:34:45,740
on ads is yeah that's that's always

00:34:44,300 --> 00:34:47,210
difficult third-party javascript is

00:34:45,740 --> 00:34:50,060
something that it's difficult to wrap

00:34:47,210 --> 00:34:51,860
around I the only way that I've ever

00:34:50,060 --> 00:34:56,149
been found or I've ever found to make a

00:34:51,860 --> 00:34:58,460
site vastly more usable despite the ads

00:34:56,149 --> 00:35:02,480
on the page is to make sure they're lazy

00:34:58,460 --> 00:35:05,360
loaded in the most way possible put a

00:35:02,480 --> 00:35:08,750
sink put defer on those and shove them

00:35:05,360 --> 00:35:10,550
at the bottom of the page and everything

00:35:08,750 --> 00:35:12,890
else will be requested first and when

00:35:10,550 --> 00:35:15,640
there's time those will be requested in

00:35:12,890 --> 00:35:18,410
hopefully they don't cause a reflow

00:35:15,640 --> 00:35:22,300
that's that's my advice for you on that

00:35:18,410 --> 00:35:22,300

YouTube URL: https://www.youtube.com/watch?v=E7n7XThDewY


