Title: Glen Maddern: The Rise of Modular Style - CSSConf.Asia 2015
Publication date: 2015-12-24
Playlist: CSSConf.Asia 2015
Description: 
	There have been a lot of ideas and a lot of speculation about the future of CSS in the last year or so. Will we write styling code purely in JS? Will CSS still have a place, and if so, what will it look like? And how long will we have to wait before we can take the next step?
I'll be talking about two projects I've been heavily involved in â€” Interoperable CSS and CSS Modules. I'll show how they are fundamentally changing what CSS is capable of, drastically simplifying the areas that cause the most headaches. And, taking a lesson from the JS world and CSS preprocessors like Sass, why we don't have to wait for the browsers to catch up.

Glen is an independent front-end consultant from Melbourne, Australia. He's an organiser of CSS Conf AU, a co-creator of the CSS Modules standard, contributor to the JSPM ecosystem, and all-round builder of rad web things. But his true calling is to become the world's greatest GIF DJ (any day now...)

CSSConf.Asia - Red Dot Design Museum, Singapore - 18 November 2015.

Source: http://2015.cssconf.asia
Slides: http://glenmaddern.com/slides/modular-style

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:00,000 --> 00:00:02,030
I

00:00:13,000 --> 00:00:22,369
hi everybody my name is Glen Madden I

00:00:16,820 --> 00:00:23,840
work with mark on CSS modules in fact

00:00:22,369 --> 00:00:26,540
those conversations that he talked about

00:00:23,840 --> 00:00:29,119
with Tobias coppers we were away at a

00:00:26,540 --> 00:00:31,520
javascript event in Australia called

00:00:29,119 --> 00:00:35,329
Camp Jess and so we had this quite

00:00:31,520 --> 00:00:37,489
useful iteration cycle of wall Tobias

00:00:35,329 --> 00:00:38,899
was asleep we would talk about stuff and

00:00:37,489 --> 00:00:41,480
then mark would go away and talk to him

00:00:38,899 --> 00:00:44,809
online when he woke up in Germany and in

00:00:41,480 --> 00:00:48,769
three days we hashed out a big chunk of

00:00:44,809 --> 00:00:50,870
this of this project I'm going to be

00:00:48,769 --> 00:00:52,550
talking about CSS modules as well but

00:00:50,870 --> 00:00:58,339
from kind of a different direction

00:00:52,550 --> 00:01:01,100
because I when I got involved in the

00:00:58,339 --> 00:01:03,530
project I had my own kind of background

00:01:01,100 --> 00:01:05,870
the only with my own ways of doing style

00:01:03,530 --> 00:01:08,270
and Mark and I disagreed on a lot of

00:01:05,870 --> 00:01:10,460
points and CSS modules is really kind of

00:01:08,270 --> 00:01:12,890
a compromise of these two points of view

00:01:10,460 --> 00:01:15,170
that we think now has the resilience to

00:01:12,890 --> 00:01:16,670
cover a lot of use cases and I think

00:01:15,170 --> 00:01:19,520
it's a big benefit to have gone through

00:01:16,670 --> 00:01:21,890
that process but what I'm interested in

00:01:19,520 --> 00:01:24,619
talking about is the change I think it

00:01:21,890 --> 00:01:27,049
represents in CSS not necessarily CSS

00:01:24,619 --> 00:01:30,619
modules being successful but this shift

00:01:27,049 --> 00:01:32,570
this this progression and I'm calling

00:01:30,619 --> 00:01:35,450
this idea modular style which I've

00:01:32,570 --> 00:01:38,600
started to use a little bit and that's

00:01:35,450 --> 00:01:41,390
my talks going to be about that the

00:01:38,600 --> 00:01:45,229
first part of my talk is about the

00:01:41,390 --> 00:01:46,700
difference between a something that's

00:01:45,229 --> 00:01:49,820
designed for humans and something that's

00:01:46,700 --> 00:01:52,100
constrained by machines I'm gonna go all

00:01:49,820 --> 00:01:55,219
the way back to the invention of the

00:01:52,100 --> 00:02:00,170
compiler by grace hopper she wrote in a

00:01:55,219 --> 00:02:03,350
new magazine article in 1987 that in

00:02:00,170 --> 00:02:06,229
1952 she had a running compiler but

00:02:03,350 --> 00:02:08,860
nobody would touch it they thought that

00:02:06,229 --> 00:02:13,010
computers could only do arithmetic and

00:02:08,860 --> 00:02:14,870
really it it constitutes a breaking

00:02:13,010 --> 00:02:17,240
point where we were completely

00:02:14,870 --> 00:02:19,130
constrained by what the machine could do

00:02:17,240 --> 00:02:20,570
before that all you could give it was

00:02:19,130 --> 00:02:22,490
machine instructions you had to

00:02:20,570 --> 00:02:24,910
translate everything in your head and

00:02:22,490 --> 00:02:27,680
this you know it's what is a 60

00:02:24,910 --> 00:02:30,590
three years ago was the first time

00:02:27,680 --> 00:02:32,360
anybody had ever progressed written

00:02:30,590 --> 00:02:34,990
something that then the machine would

00:02:32,360 --> 00:02:37,730
translate to what the machine could run

00:02:34,990 --> 00:02:39,740
now scoot forward a little bit to

00:02:37,730 --> 00:02:43,490
September 2008 which is a far darker

00:02:39,740 --> 00:02:50,840
time in history at least in the history

00:02:43,490 --> 00:02:53,780
of the web in 2008 Firefox was at

00:02:50,840 --> 00:02:57,920
version too but 75% of the online world

00:02:53,780 --> 00:02:59,900
used IE and I II was at version 7 it was

00:02:57,920 --> 00:03:01,970
well basically if this is humans vs and

00:02:59,900 --> 00:03:05,450
machines in 2008 the machines were

00:03:01,970 --> 00:03:06,950
winning JavaScript of 2008 had started

00:03:05,450 --> 00:03:09,350
to mature though they were started some

00:03:06,950 --> 00:03:11,900
patterns that started to emerge jQuery

00:03:09,350 --> 00:03:13,370
had had really started to establish

00:03:11,900 --> 00:03:16,970
itself the plug-in ecosystem was pretty

00:03:13,370 --> 00:03:21,680
healthy and this was sort of the best

00:03:16,970 --> 00:03:24,709
practice in 2008 you would write

00:03:21,680 --> 00:03:25,910
everything attached it to window make

00:03:24,709 --> 00:03:27,680
sure that you weren't clobbering

00:03:25,910 --> 00:03:29,209
something that was already there attach

00:03:27,680 --> 00:03:33,019
your code somewhere that somebody else

00:03:29,209 --> 00:03:34,070
could find it and run what I mean

00:03:33,019 --> 00:03:36,950
there's nothing wrong with the way this

00:03:34,070 --> 00:03:40,790
code is written but it implies the fact

00:03:36,950 --> 00:03:42,620
that you have a global namespace you

00:03:40,790 --> 00:03:45,739
have nothing except what's on window and

00:03:42,620 --> 00:03:47,900
the only kind of conceptual method for

00:03:45,739 --> 00:03:49,700
execution is sequential if you want two

00:03:47,900 --> 00:03:53,900
things in the pot in the file simply

00:03:49,700 --> 00:03:56,720
concatenate them all so at the end of

00:03:53,900 --> 00:03:57,799
2008 Google came out with chrome I don't

00:03:56,720 --> 00:04:01,640
know if you remember they released this

00:03:57,799 --> 00:04:03,950
comic book to try to educate the 75

00:04:01,640 --> 00:04:06,680
percent of people who are using IE that

00:04:03,950 --> 00:04:08,480
you could choose a browser and if you

00:04:06,680 --> 00:04:12,880
could choose and obviously you wouldn't

00:04:08,480 --> 00:04:15,410
choose IE google chrome was quickly

00:04:12,880 --> 00:04:17,000
popular partly because of the

00:04:15,410 --> 00:04:18,500
performance of v8 which was its

00:04:17,000 --> 00:04:20,780
javascript interpreter and it was far

00:04:18,500 --> 00:04:23,720
faster than the javascript interpreters

00:04:20,780 --> 00:04:25,310
of the day and that helped to catalyze a

00:04:23,720 --> 00:04:26,930
movement that had already started around

00:04:25,310 --> 00:04:29,750
the idea of running JavaScript on the

00:04:26,930 --> 00:04:32,270
server this project at that point was

00:04:29,750 --> 00:04:35,270
called server jas Kevin dangle wrote in

00:04:32,270 --> 00:04:37,480
January of that of 2009 that for

00:04:35,270 --> 00:04:39,550
JavaScript to really come

00:04:37,480 --> 00:04:41,680
of age and to work on the server it

00:04:39,550 --> 00:04:43,780
needed a standard way to include modules

00:04:41,680 --> 00:04:46,720
the JavaScript specification as it was

00:04:43,780 --> 00:04:49,060
wasn't sufficient it needed those

00:04:46,720 --> 00:04:50,770
modules to live in discrete namespaces

00:04:49,060 --> 00:04:53,050
you could already do namespaces just by

00:04:50,770 --> 00:04:55,300
attaching things to window in a in a

00:04:53,050 --> 00:04:58,710
conventional way but you couldn't

00:04:55,300 --> 00:05:00,880
include other people's code just once

00:04:58,710 --> 00:05:02,680
then went on to write that server side

00:05:00,880 --> 00:05:04,090
JavaScript is very fragmented that if

00:05:02,680 --> 00:05:05,920
you wanted to do anything beyond what

00:05:04,090 --> 00:05:08,410
javascript was designed for like access

00:05:05,920 --> 00:05:10,450
a file and the file system you couldn't

00:05:08,410 --> 00:05:13,000
do that the same way on the to server

00:05:10,450 --> 00:05:15,430
side JavaScript interpreter is right on

00:05:13,000 --> 00:05:17,860
v8 SpiderMonkey JavaScript cool they

00:05:15,430 --> 00:05:19,990
couldn't load the same modules external

00:05:17,860 --> 00:05:21,760
modules in the same way and so every

00:05:19,990 --> 00:05:23,620
time somebody wanted to use javascript

00:05:21,760 --> 00:05:25,720
for a web framework they had to create a

00:05:23,620 --> 00:05:28,600
bunch of AP is that other programmers

00:05:25,720 --> 00:05:30,580
took for granted and what I think is

00:05:28,600 --> 00:05:33,460
interesting is if you replace the year

00:05:30,580 --> 00:05:35,800
2009 and you talk about CSS instead of

00:05:33,460 --> 00:05:38,170
server-side JavaScript there is this

00:05:35,800 --> 00:05:41,440
sort of sense of of a lack of legitimacy

00:05:38,170 --> 00:05:44,290
around the tooling around CSS and that

00:05:41,440 --> 00:05:46,450
if you want to write a framework like

00:05:44,290 --> 00:05:49,390
bootstrap it's either very tied to less

00:05:46,450 --> 00:05:51,910
as it was or SAS as it is now and that

00:05:49,390 --> 00:05:56,140
sass and less and the Perseus is plug in

00:05:51,910 --> 00:05:57,700
ecosystem do create ap is that other

00:05:56,140 --> 00:06:02,080
programming language is now including

00:05:57,700 --> 00:06:04,930
JavaScript take for granted okay so also

00:06:02,080 --> 00:06:07,660
in 2009 nodejs comes out I'm sure a lot

00:06:04,930 --> 00:06:11,590
of you aware no Jess even if you don't

00:06:07,660 --> 00:06:13,420
use JavaScript day today in March Chris

00:06:11,590 --> 00:06:15,430
Cole who was also blogging and

00:06:13,420 --> 00:06:17,410
influential around this time wrote that

00:06:15,430 --> 00:06:19,930
this year had begun with a combination

00:06:17,410 --> 00:06:21,430
of wondrous events in JavaScript he'd

00:06:19,930 --> 00:06:22,780
been struggling to promote the idea of a

00:06:21,430 --> 00:06:24,310
module system in JavaScript for several

00:06:22,780 --> 00:06:26,230
years now and there had been a sudden

00:06:24,310 --> 00:06:28,450
explosion of progress and I also feel

00:06:26,230 --> 00:06:30,220
that that's what's happening with CSS at

00:06:28,450 --> 00:06:31,960
the moment there's a lot of energy

00:06:30,220 --> 00:06:34,150
coming from the react community a lot of

00:06:31,960 --> 00:06:37,210
new ideas maybe some bad ones as well

00:06:34,150 --> 00:06:39,460
but the the collective kind of spirit is

00:06:37,210 --> 00:06:41,890
that CSS is undergoing a change and

00:06:39,460 --> 00:06:45,460
there are a lot of smart people working

00:06:41,890 --> 00:06:49,180
on this hard problem and that maybe we

00:06:45,460 --> 00:06:50,960
are stumbling across a solution so by

00:06:49,180 --> 00:06:52,460
the middle of 2009

00:06:50,960 --> 00:06:53,840
javascript had a new name the server

00:06:52,460 --> 00:06:56,600
side JavaScript had a new name common

00:06:53,840 --> 00:06:59,389
Jas and I'm sure a lot of you will know

00:06:56,600 --> 00:07:01,340
that term commonjs it's sort of not

00:06:59,389 --> 00:07:03,800
maybe what you think it is come a jess

00:07:01,340 --> 00:07:05,479
was trying to be a standard that handled

00:07:03,800 --> 00:07:08,120
all these different ways of handling and

00:07:05,479 --> 00:07:10,880
dependencies in JavaScript no Jess

00:07:08,120 --> 00:07:14,419
didn't really follow that on and node

00:07:10,880 --> 00:07:16,400
one whatever no does the thing that node

00:07:14,419 --> 00:07:19,639
does no jss module system is what we

00:07:16,400 --> 00:07:21,919
call comedy is today sub stack calls it

00:07:19,639 --> 00:07:23,449
command J desk which is a pretty good

00:07:21,919 --> 00:07:25,820
description of what it is it's kind of

00:07:23,449 --> 00:07:29,780
based around these two lines require and

00:07:25,820 --> 00:07:31,580
modular exports and what it did to that

00:07:29,780 --> 00:07:34,490
language what it did to javascript is

00:07:31,580 --> 00:07:36,770
quite profound because previously you

00:07:34,490 --> 00:07:40,430
had namespace widget through x equals

00:07:36,770 --> 00:07:42,199
function and now you have to explicitly

00:07:40,430 --> 00:07:44,380
require everything you need and

00:07:42,199 --> 00:07:48,080
explicitly export everything you make

00:07:44,380 --> 00:07:49,849
for something else to require but what I

00:07:48,080 --> 00:07:51,650
like about this example in this contrast

00:07:49,849 --> 00:07:53,389
is that the words window namespace

00:07:51,650 --> 00:07:55,340
widgets and fubar disappeared from your

00:07:53,389 --> 00:07:59,030
code because they're implied by the file

00:07:55,340 --> 00:08:00,740
system your file fubar j/s lives inside

00:07:59,030 --> 00:08:02,449
the widget which lives inside your

00:08:00,740 --> 00:08:03,650
namespace directory so of course that's

00:08:02,449 --> 00:08:05,690
what it's about you don't have to write

00:08:03,650 --> 00:08:09,320
it every time and that I think is a

00:08:05,690 --> 00:08:13,070
particularly relevant to CSS as what

00:08:09,320 --> 00:08:15,050
Mark was talking about before so no it

00:08:13,070 --> 00:08:17,300
must be thinking and this is CSS conf

00:08:15,050 --> 00:08:18,880
not Jas conf this is a great history

00:08:17,300 --> 00:08:22,159
lesson of JavaScript bet I mean

00:08:18,880 --> 00:08:23,719
javascript has a lot more power than CSS

00:08:22,159 --> 00:08:26,509
ever will we're not going to run CSS on

00:08:23,719 --> 00:08:29,990
the server all right you know operating

00:08:26,509 --> 00:08:32,060
systems in it and that's true but the

00:08:29,990 --> 00:08:35,209
change in the ecosystem around

00:08:32,060 --> 00:08:38,270
JavaScript can happen to CSS the change

00:08:35,209 --> 00:08:41,329
in JavaScript was pretty small these

00:08:38,270 --> 00:08:43,700
lines were valid before they just had no

00:08:41,329 --> 00:08:47,540
meaning the require and module will wear

00:08:43,700 --> 00:08:49,550
whatever you define them to be but if

00:08:47,540 --> 00:08:51,770
you wrap a module system around it and

00:08:49,550 --> 00:08:53,480
you wrap an ecosystem around it that can

00:08:51,770 --> 00:08:57,980
fundamentally change how people write

00:08:53,480 --> 00:09:02,350
JavaScript and it was successful npm

00:08:57,980 --> 00:09:04,430
came along not long after mpm is now

00:09:02,350 --> 00:09:06,920
extremely popular

00:09:04,430 --> 00:09:08,600
there is a module on NPM for literally

00:09:06,920 --> 00:09:10,339
everything absolutely everything and

00:09:08,600 --> 00:09:13,220
everything that ever will be is already

00:09:10,339 --> 00:09:17,810
on NPM by changing the ecosystem in

00:09:13,220 --> 00:09:19,610
JavaScript that revolutionized what have

00:09:17,810 --> 00:09:22,310
escaped was what it could be and what it

00:09:19,610 --> 00:09:24,860
is today and I think the key thing was

00:09:22,310 --> 00:09:26,480
that the human interface went from

00:09:24,860 --> 00:09:28,130
having to remember that all this other

00:09:26,480 --> 00:09:29,209
code was going to run before yours and

00:09:28,130 --> 00:09:31,520
all this code was going to run after

00:09:29,209 --> 00:09:35,300
yours to having an actual module system

00:09:31,520 --> 00:09:36,920
and having no mechanism for sharing code

00:09:35,300 --> 00:09:38,420
except putting one file in front of the

00:09:36,920 --> 00:09:40,760
other and including something off a CDN

00:09:38,420 --> 00:09:45,800
and then your script tag to having

00:09:40,760 --> 00:09:47,740
200,000 packages of NPM what makes that

00:09:45,800 --> 00:09:51,320
particularly relevant for us is

00:09:47,740 --> 00:09:53,029
browserify browserify is in the similar

00:09:51,320 --> 00:09:56,810
vein to web pack but it was the first to

00:09:53,029 --> 00:09:59,810
really to do this browser if I said you

00:09:56,810 --> 00:10:02,330
write your normal nodejs module code and

00:09:59,810 --> 00:10:04,610
I'll make it work in a browser it does

00:10:02,330 --> 00:10:06,589
that by because of the way JavaScript

00:10:04,610 --> 00:10:09,080
works it does that quite cleverly by

00:10:06,589 --> 00:10:11,120
simply taking your file wrapping it in a

00:10:09,080 --> 00:10:12,940
function making sure that it defines

00:10:11,120 --> 00:10:15,010
what require module and exports is

00:10:12,940 --> 00:10:17,240
concatenates all of those files together

00:10:15,010 --> 00:10:19,250
wise up all the dependencies and then

00:10:17,240 --> 00:10:21,410
with a little runtime shim basically

00:10:19,250 --> 00:10:22,910
boots that up and execute your code your

00:10:21,410 --> 00:10:24,800
code is none the wiser whether it's

00:10:22,910 --> 00:10:29,089
running on a browser or on a file system

00:10:24,800 --> 00:10:31,130
once it stubs out the AP is browserify

00:10:29,089 --> 00:10:33,950
proves that for the browser you could

00:10:31,130 --> 00:10:35,660
change the human interface of a language

00:10:33,950 --> 00:10:38,000
that we were using day to day without

00:10:35,660 --> 00:10:39,260
actually having to wait for JavaScript

00:10:38,000 --> 00:10:40,940
to change I mean if we were waiting for

00:10:39,260 --> 00:10:45,770
a new version JavaScript we'd still be

00:10:40,940 --> 00:10:47,209
waiting it's still not solidified so

00:10:45,770 --> 00:10:48,740
what about CSS now we've been talking a

00:10:47,209 --> 00:10:51,470
bit about CSS a lot of two talks have

00:10:48,740 --> 00:10:54,680
been about CSS and we have been changing

00:10:51,470 --> 00:10:57,140
this the human interface CSS as the

00:10:54,680 --> 00:11:00,589
language has had virtually no change in

00:10:57,140 --> 00:11:02,690
a long time but sass is incredibly

00:11:00,589 --> 00:11:04,700
popular there was a recent survey of fun

00:11:02,690 --> 00:11:07,670
and professionals who I think was

00:11:04,700 --> 00:11:10,070
sixty-four percent of people used sass

00:11:07,670 --> 00:11:11,810
in their projects less was more popular

00:11:10,070 --> 00:11:14,750
earlier and is dying in popularity now

00:11:11,810 --> 00:11:16,550
post CSS is kind of is rising in

00:11:14,750 --> 00:11:17,830
popularity because people can plug and

00:11:16,550 --> 00:11:20,750
choose the things they want

00:11:17,830 --> 00:11:23,300
but none of them actually change what

00:11:20,750 --> 00:11:27,470
CSS is they're just different ways of

00:11:23,300 --> 00:11:29,570
generating the same sort of code that's

00:11:27,470 --> 00:11:32,840
where I think CSS modules is different

00:11:29,570 --> 00:11:35,510
CSS modules wraps a file format called

00:11:32,840 --> 00:11:37,280
interoperable CSS which we finally sort

00:11:35,510 --> 00:11:41,360
of settled on in in the end of June this

00:11:37,280 --> 00:11:43,880
year I CSS is trying to be as small a

00:11:41,360 --> 00:11:47,150
change to the CSS language as possible

00:11:43,880 --> 00:11:51,530
to facilitate a module system so we add

00:11:47,150 --> 00:11:53,810
to inert sorry to pseudo selectors

00:11:51,530 --> 00:11:55,610
import and export they can pass the

00:11:53,810 --> 00:11:59,410
recess they can pass your post CSS they

00:11:55,610 --> 00:12:01,640
can go to the browser if you want

00:11:59,410 --> 00:12:05,150
nothing will choke on them they're valid

00:12:01,640 --> 00:12:06,710
CSS they just don't mean anything until

00:12:05,150 --> 00:12:09,800
you give it this ecosystem around it

00:12:06,710 --> 00:12:11,270
using webpack or something else the rest

00:12:09,800 --> 00:12:12,230
of the file is normal global CSS we

00:12:11,270 --> 00:12:14,780
didn't change anything there's no

00:12:12,230 --> 00:12:17,630
runtime dependencies it's just CSS you

00:12:14,780 --> 00:12:19,370
can concatenate it you can gzip it you

00:12:17,630 --> 00:12:22,910
can put it on a CD n you can do whatever

00:12:19,370 --> 00:12:24,710
you want with it and the way CSS modules

00:12:22,910 --> 00:12:26,960
uses this intermediate format is that

00:12:24,710 --> 00:12:30,530
when it sees a class like normal it

00:12:26,960 --> 00:12:34,370
compiles it it adds an export line as

00:12:30,530 --> 00:12:37,940
well as rewriting that class so now

00:12:34,370 --> 00:12:42,110
normal doesn't exist except in the

00:12:37,940 --> 00:12:43,670
metadata the export the Styles don't

00:12:42,110 --> 00:12:47,240
change the selectors don't change it's

00:12:43,670 --> 00:12:50,240
just the keys change then as Mark showed

00:12:47,240 --> 00:12:52,730
you import that across the boundary from

00:12:50,240 --> 00:12:54,140
CSS into your JavaScript component and

00:12:52,730 --> 00:12:58,150
you get that mapping so then if you

00:12:54,140 --> 00:13:03,380
change your markup to feed that class in

00:12:58,150 --> 00:13:06,230
you line up with now compiled output and

00:13:03,380 --> 00:13:08,990
I want to sort of talk about this in a

00:13:06,230 --> 00:13:11,089
little bit with another example if you

00:13:08,990 --> 00:13:14,870
have normal in two classes now into sort

00:13:11,089 --> 00:13:18,170
of CSS files they can't clash anymore

00:13:14,870 --> 00:13:20,120
they get compiled to different hashes or

00:13:18,170 --> 00:13:22,940
two different longer class names

00:13:20,120 --> 00:13:24,260
whatever you want them to be and they

00:13:22,940 --> 00:13:26,390
get exported into two different places

00:13:24,260 --> 00:13:28,400
the only way to see what's in menu is to

00:13:26,390 --> 00:13:29,459
import it the only way to see what's in

00:13:28,400 --> 00:13:33,899
button is to impor

00:13:29,459 --> 00:13:36,389
and that lack of global pneus lack of

00:13:33,899 --> 00:13:37,920
predictability about the output CSS

00:13:36,389 --> 00:13:41,999
means that you have to be explicit about

00:13:37,920 --> 00:13:46,050
where that code goes so for a dumb

00:13:41,999 --> 00:13:48,660
example let's pretend our button CSS had

00:13:46,050 --> 00:13:50,579
to know what was in menu CSS there's no

00:13:48,660 --> 00:13:52,410
way for me to write it as an author and

00:13:50,579 --> 00:13:55,019
guarantee i'm going to figure out what

00:13:52,410 --> 00:13:57,990
on the right-hand side but i can import

00:13:55,019 --> 00:13:59,879
it i can import that file I can give it

00:13:57,990 --> 00:14:02,970
my own alias and I say whatever you call

00:13:59,879 --> 00:14:04,860
normal I call menus normal and then I

00:14:02,970 --> 00:14:07,019
could use it now don't do this we don't

00:14:04,860 --> 00:14:08,519
expose this in CSS modules but this is

00:14:07,019 --> 00:14:10,410
the underlying mechanism under Lee

00:14:08,519 --> 00:14:12,990
underneath composition and a bunch of

00:14:10,410 --> 00:14:15,839
other techniques this idea that the only

00:14:12,990 --> 00:14:20,490
way for information to move between

00:14:15,839 --> 00:14:23,220
files is if your explicit about it when

00:14:20,490 --> 00:14:25,230
that gets compiled everything gets

00:14:23,220 --> 00:14:26,910
linked up so that your override class

00:14:25,230 --> 00:14:29,429
has the same class in that other file

00:14:26,910 --> 00:14:30,869
and because we knew that you had a

00:14:29,429 --> 00:14:32,879
dependency from this file to the other

00:14:30,869 --> 00:14:35,160
we know which order to concatenate them

00:14:32,879 --> 00:14:36,749
in so now you don't have this source

00:14:35,160 --> 00:14:39,179
order unpredictability that you might

00:14:36,749 --> 00:14:44,699
have by trying to concatenate a whole

00:14:39,179 --> 00:14:46,079
lot of potentially global CSS so I want

00:14:44,699 --> 00:14:48,480
to think about I CSS is being the

00:14:46,079 --> 00:14:51,139
browserify output it's the translation

00:14:48,480 --> 00:14:55,860
of the human interface into what

00:14:51,139 --> 00:14:57,540
browsers can understand so I success is

00:14:55,860 --> 00:14:59,970
a compiled target it's not a human

00:14:57,540 --> 00:15:01,949
interface she says modules uses it if

00:14:59,970 --> 00:15:03,959
you wanted to design your own module

00:15:01,949 --> 00:15:05,999
modular CSS framework you could target

00:15:03,959 --> 00:15:08,879
it as well and use all the other tools

00:15:05,999 --> 00:15:10,679
that we've built for CSS modules the

00:15:08,879 --> 00:15:12,420
file is completely isolated it can port

00:15:10,679 --> 00:15:14,610
others and what it really is is

00:15:12,420 --> 00:15:16,410
unlocking the power of web pack chase

00:15:14,610 --> 00:15:18,149
p.m. browserify it's a set of

00:15:16,410 --> 00:15:20,519
instructions i set a metadata to tell

00:15:18,149 --> 00:15:22,709
webpack what part of this file is CSS

00:15:20,519 --> 00:15:26,100
and what's JavaScript and how these

00:15:22,709 --> 00:15:29,309
things flow around so C says modules was

00:15:26,100 --> 00:15:32,309
with the best logo in the world takes

00:15:29,309 --> 00:15:33,959
this and the first thing it can do is as

00:15:32,309 --> 00:15:35,999
Mark already hinted at is be flexible

00:15:33,959 --> 00:15:38,970
with what you output you don't have to

00:15:35,999 --> 00:15:41,549
have normal f34 you can have in

00:15:38,970 --> 00:15:43,790
development mode a longer path now

00:15:41,549 --> 00:15:47,070
there's nothing preventing us

00:15:43,790 --> 00:15:48,750
source maps but we haven't needed it

00:15:47,070 --> 00:15:51,180
this in development mode seems to be

00:15:48,750 --> 00:15:52,829
enough if you go further you could put a

00:15:51,180 --> 00:15:55,470
line number of the first in you know you

00:15:52,829 --> 00:15:57,300
could go however you like in fact we saw

00:15:55,470 --> 00:15:59,250
this morning about selectors class

00:15:57,300 --> 00:16:02,579
selectors using characters you wouldn't

00:15:59,250 --> 00:16:05,339
normally type what school here is that

00:16:02,579 --> 00:16:06,990
all three of these the middle doesn't

00:16:05,339 --> 00:16:08,610
change you never interact with it in a

00:16:06,990 --> 00:16:10,170
different way it's just a compile out

00:16:08,610 --> 00:16:12,990
but why would you care your component

00:16:10,170 --> 00:16:17,550
needs the normal class so you know you

00:16:12,990 --> 00:16:19,620
don't mind what the output is marking to

00:16:17,550 --> 00:16:22,889
that it they use a min ified version a

00:16:19,620 --> 00:16:25,170
short hexadecimal string that works

00:16:22,889 --> 00:16:26,579
great it saves and bites but it's not as

00:16:25,170 --> 00:16:28,709
good as you could do the best you can do

00:16:26,579 --> 00:16:31,819
thus far as I'm concerned is minify to

00:16:28,709 --> 00:16:34,259
emoji emoji is the best bite for bite

00:16:31,819 --> 00:16:37,199
replacement of a perfectly

00:16:34,259 --> 00:16:40,920
understandable computer accessible term

00:16:37,199 --> 00:16:42,630
but also human recognizable and if you

00:16:40,920 --> 00:16:45,800
don't believe me i encourage you to have

00:16:42,630 --> 00:16:48,990
a look at my website glenn madden calm

00:16:45,800 --> 00:16:53,130
every selector in that site is an emoji

00:16:48,990 --> 00:16:55,529
so this time tag has a chicken bone

00:16:53,130 --> 00:16:58,319
class attached to it the firework up the

00:16:55,529 --> 00:17:00,720
firework down lantern love letter

00:16:58,319 --> 00:17:03,149
engagement ring a lot of other all the

00:17:00,720 --> 00:17:07,679
way to the last one which is fast poop i

00:17:03,149 --> 00:17:08,909
think it is and what's interesting about

00:17:07,679 --> 00:17:12,270
this because apart from being a min

00:17:08,909 --> 00:17:14,400
efficacious oak it's also actually

00:17:12,270 --> 00:17:17,159
easier to read than minified code

00:17:14,400 --> 00:17:18,929
normally is because if you look on the

00:17:17,159 --> 00:17:21,870
right hand side you can start to see

00:17:18,929 --> 00:17:23,130
duplicates of selectors you can see the

00:17:21,870 --> 00:17:24,569
same class applying at three places

00:17:23,130 --> 00:17:26,549
which you would never be able to do if

00:17:24,569 --> 00:17:28,439
it's just random hexadecimal strings so

00:17:26,549 --> 00:17:32,309
I actually think minifying to emoji is

00:17:28,439 --> 00:17:37,200
not just a joke I found it quite useful

00:17:32,309 --> 00:17:39,419
and yeah in real life and so this is

00:17:37,200 --> 00:17:42,140
sort of a two-fold approach the first is

00:17:39,419 --> 00:17:45,690
by defining a file format that unlocks

00:17:42,140 --> 00:17:47,730
webpack browserify giving a machine

00:17:45,690 --> 00:17:52,320
format that we're happy with we can do

00:17:47,730 --> 00:17:54,210
better we can better target a file

00:17:52,320 --> 00:17:55,750
format module system an ecosystem for

00:17:54,210 --> 00:17:58,850
humans

00:17:55,750 --> 00:18:01,190
hopeful that in the future maybe seven

00:17:58,850 --> 00:18:02,990
years from now if you see bem style code

00:18:01,190 --> 00:18:04,790
with their long class names that imply

00:18:02,990 --> 00:18:07,100
that this has to live in the global

00:18:04,790 --> 00:18:09,280
namespace and if I get this wrong things

00:18:07,100 --> 00:18:15,320
will go badly that that looks as

00:18:09,280 --> 00:18:17,600
redundant and unsafe as you know

00:18:15,320 --> 00:18:20,660
JavaScript before a module system and

00:18:17,600 --> 00:18:22,490
that this becomes the norm you have

00:18:20,660 --> 00:18:23,720
contextual styles not contextual just

00:18:22,490 --> 00:18:25,970
because they're local to that component

00:18:23,720 --> 00:18:27,980
but because the tool enforces it the

00:18:25,970 --> 00:18:31,520
tool says that you cannot possibly find

00:18:27,980 --> 00:18:33,790
out what Lodge becomes unless you make

00:18:31,520 --> 00:18:37,030
an explicit link across your project and

00:18:33,790 --> 00:18:40,280
that I think is a big that's a big win

00:18:37,030 --> 00:18:44,390
which takes me dude part two part two is

00:18:40,280 --> 00:18:48,740
now given the increased capability given

00:18:44,390 --> 00:18:51,440
the given a module system what might we

00:18:48,740 --> 00:18:53,270
use it for what like what uses all this

00:18:51,440 --> 00:18:55,400
unless we can write applications about

00:18:53,270 --> 00:18:59,240
our node and NPM wouldn't have taken off

00:18:55,400 --> 00:19:01,460
unless you could write algorithms more

00:18:59,240 --> 00:19:03,920
scalable and more maintainable using

00:19:01,460 --> 00:19:07,580
modules rather than Global's so what

00:19:03,920 --> 00:19:09,500
does it look like for CSS so I want to

00:19:07,580 --> 00:19:11,240
talk about a little example which is

00:19:09,500 --> 00:19:13,310
that you have to build two variants of a

00:19:11,240 --> 00:19:15,860
single button give a submit button

00:19:13,310 --> 00:19:19,190
delete button submit buttons blue delete

00:19:15,860 --> 00:19:20,450
buttons written in bem you would have

00:19:19,190 --> 00:19:23,780
your common styles in a submit button

00:19:20,450 --> 00:19:25,610
class your blue colors exhibit mine

00:19:23,780 --> 00:19:27,500
already the submit button danger should

00:19:25,610 --> 00:19:30,860
be pretty common to anybody who's seen

00:19:27,500 --> 00:19:33,260
them before then you apply both classes

00:19:30,860 --> 00:19:35,090
the button and the normal and the button

00:19:33,260 --> 00:19:38,990
and the danger and you get you two

00:19:35,090 --> 00:19:40,700
outputs the problem happens and this is

00:19:38,990 --> 00:19:42,040
a problem that I've encountered that

00:19:40,700 --> 00:19:46,850
started me on a bit of a journey into

00:19:42,040 --> 00:19:49,250
digging into CSS tooling when you forget

00:19:46,850 --> 00:19:51,500
one of those classes because there's

00:19:49,250 --> 00:19:54,080
nothing to enforce the fact that normal

00:19:51,500 --> 00:19:55,700
is also a button and if you do this you

00:19:54,080 --> 00:19:57,440
break your styles and if you're the

00:19:55,700 --> 00:19:59,180
person who built the style sheet and

00:19:57,440 --> 00:20:01,310
then somebody comes along and writes a

00:19:59,180 --> 00:20:03,230
component and they forget it then you

00:20:01,310 --> 00:20:06,890
might get angry right that if they've

00:20:03,230 --> 00:20:09,070
broken this convention and i would like

00:20:06,890 --> 00:20:11,860
to implore you to get less angry

00:20:09,070 --> 00:20:14,500
than you otherwise would because

00:20:11,860 --> 00:20:16,840
something I'm recognizing more and more

00:20:14,500 --> 00:20:20,200
is that if you're designing something

00:20:16,840 --> 00:20:22,120
for other people to use then if people

00:20:20,200 --> 00:20:23,860
keep making the same mistakes then you

00:20:22,120 --> 00:20:26,139
haven't finished designing you can get

00:20:23,860 --> 00:20:28,570
better you can make tools that enforce

00:20:26,139 --> 00:20:30,549
these things and so when somebody makes

00:20:28,570 --> 00:20:32,320
the mistake I want you to take it as a

00:20:30,549 --> 00:20:34,299
challenge to make your tool better

00:20:32,320 --> 00:20:36,190
there's plenty of stuff and CSS modules

00:20:34,299 --> 00:20:39,970
work that people get tripped up on and

00:20:36,190 --> 00:20:43,750
we're trying to fix it so that's my rant

00:20:39,970 --> 00:20:45,850
that was my little rant that's a topic

00:20:43,750 --> 00:20:48,039
very dear to me which is code for people

00:20:45,850 --> 00:20:51,009
who are new to coding whenever you can

00:20:48,039 --> 00:20:53,080
so anyway back to this problem you have

00:20:51,009 --> 00:20:54,610
this button and you've got the wrong

00:20:53,080 --> 00:20:56,679
styles on it and you think I'll look

00:20:54,610 --> 00:21:00,159
hang on they're all buttons so why don't

00:20:56,679 --> 00:21:02,080
we just make the thing the tag button

00:21:00,159 --> 00:21:05,909
and I think anybody who's done any

00:21:02,080 --> 00:21:08,590
amount of CSS should feel queasy at that

00:21:05,909 --> 00:21:10,899
because a button using a button in a

00:21:08,590 --> 00:21:12,940
HTML document is not a styling choice

00:21:10,899 --> 00:21:15,370
that's an accessibility and functional

00:21:12,940 --> 00:21:18,039
choice so attaching lots of style to

00:21:15,370 --> 00:21:19,210
that information means that every time

00:21:18,039 --> 00:21:20,169
you use a button and it doesn't have to

00:21:19,210 --> 00:21:22,889
look like the others you have to do a

00:21:20,169 --> 00:21:25,269
lot of overriding and overriding is bad

00:21:22,889 --> 00:21:26,620
so sask um long such as a function

00:21:25,269 --> 00:21:30,039
called extent which we had a question on

00:21:26,620 --> 00:21:33,070
just before extend does exactly this

00:21:30,039 --> 00:21:36,309
extend says hey if you use normal I know

00:21:33,070 --> 00:21:38,019
that you also meant the base class so

00:21:36,309 --> 00:21:42,490
submit my normal extend submit button

00:21:38,019 --> 00:21:44,860
danger extends submit button that works

00:21:42,490 --> 00:21:46,720
great it's exactly what we want we can

00:21:44,860 --> 00:21:50,019
use one name in our output and we can

00:21:46,720 --> 00:21:52,360
either get neither style or both it

00:21:50,019 --> 00:21:54,669
works by rewriting the CSS by injecting

00:21:52,360 --> 00:21:57,460
so that submit button normal matches the

00:21:54,669 --> 00:21:59,220
top line and the fourth line and danger

00:21:57,460 --> 00:22:02,200
matches the top and the third-to-last

00:21:59,220 --> 00:22:04,649
works great conceptually it's beautiful

00:22:02,200 --> 00:22:08,529
implementation wise it's dangerous I

00:22:04,649 --> 00:22:10,320
love it I used it a lot and then it bit

00:22:08,529 --> 00:22:13,029
me like a bit sever and bites everyone

00:22:10,320 --> 00:22:15,399
here's a quick example of how it gets

00:22:13,029 --> 00:22:17,889
bad you can have if you extend something

00:22:15,399 --> 00:22:20,049
that's used in multiple places then your

00:22:17,889 --> 00:22:21,669
selector gets used in multiple places if

00:22:20,049 --> 00:22:22,419
you have complicated selectors yourself

00:22:21,669 --> 00:22:24,149
and you

00:22:22,419 --> 00:22:29,230
stand something then it gets even worse

00:22:24,149 --> 00:22:34,090
it bloats it bloats and the i guess the

00:22:29,230 --> 00:22:36,369
worst case is a ryanair the airline that

00:22:34,090 --> 00:22:37,720
nobody particularly likes just released

00:22:36,369 --> 00:22:40,269
a responsive redesign that takes

00:22:37,720 --> 00:22:42,489
something like 30 seconds to render on

00:22:40,269 --> 00:22:45,759
an iphone 5 something like that even on

00:22:42,489 --> 00:22:48,539
4G even on a macbook pro I think it pegs

00:22:45,759 --> 00:22:51,399
the CPU just passing the see the CSS for

00:22:48,539 --> 00:22:52,480
one and a half seconds and nothing is

00:22:51,399 --> 00:22:53,739
accessible in that one and a half

00:22:52,480 --> 00:22:56,289
seconds it's just simply trying to

00:22:53,739 --> 00:22:58,960
understand this mess what I like about

00:22:56,289 --> 00:23:00,730
this example one it's rain air and I

00:22:58,960 --> 00:23:02,529
don't particular like them the other is

00:23:00,730 --> 00:23:05,759
that all of this code is to reset a

00:23:02,529 --> 00:23:08,109
border radius to zero which means

00:23:05,759 --> 00:23:12,090
somewhere else border radius is being

00:23:08,109 --> 00:23:14,590
set for everything to something else

00:23:12,090 --> 00:23:16,960
this is why extend gets a bad rap this

00:23:14,590 --> 00:23:21,129
is clearly using extend and it has this

00:23:16,960 --> 00:23:22,749
runaway output this is terrifying so you

00:23:21,129 --> 00:23:24,759
get blog posts that written like this

00:23:22,749 --> 00:23:27,100
what nobody told you why you should

00:23:24,759 --> 00:23:28,960
avoid extending SAS without creating a

00:23:27,100 --> 00:23:32,440
mess or my favorite which is SAS doesn't

00:23:28,960 --> 00:23:35,879
create bad code bad coders do just on

00:23:32,440 --> 00:23:38,019
the topic of coding for newcomers

00:23:35,879 --> 00:23:39,700
writing titles like this now the rest of

00:23:38,019 --> 00:23:42,489
the article is a lot more nuanced and a

00:23:39,700 --> 00:23:44,109
lot more clever but titles like this

00:23:42,489 --> 00:23:47,139
have the potential to harm people who

00:23:44,109 --> 00:23:49,090
are new to code who are potentially

00:23:47,139 --> 00:23:51,129
making the mistake that extend leaves

00:23:49,090 --> 00:23:52,330
there for them and if they suddenly see

00:23:51,129 --> 00:23:54,820
a headline saying that there are bad

00:23:52,330 --> 00:23:56,169
coders then maybe that contributes to a

00:23:54,820 --> 00:24:00,009
general hostility that doesn't need to

00:23:56,169 --> 00:24:01,899
be their dog in CSS modules how does it

00:24:00,009 --> 00:24:05,049
work well it's a one-to-one replacement

00:24:01,899 --> 00:24:07,600
for extend in this simple case so normal

00:24:05,049 --> 00:24:09,460
composer space danger composers base

00:24:07,600 --> 00:24:11,639
again we don't have to use submit button

00:24:09,460 --> 00:24:14,859
because that's implied by the file

00:24:11,639 --> 00:24:19,149
extending and composers are identical in

00:24:14,859 --> 00:24:21,730
this example we also have the benefit of

00:24:19,149 --> 00:24:23,799
still using just one name right normal

00:24:21,730 --> 00:24:25,239
in danger as we saw before doesn't

00:24:23,799 --> 00:24:26,980
really matter what the output is we

00:24:25,239 --> 00:24:28,899
always just use that one name and I

00:24:26,980 --> 00:24:30,999
can't harp on about that enough because

00:24:28,899 --> 00:24:33,549
being able to having confidence in your

00:24:30,999 --> 00:24:35,260
markup when you're typing the line for

00:24:33,549 --> 00:24:40,450
your markup that you only have to

00:24:35,260 --> 00:24:42,820
right one thing is is very comforting so

00:24:40,450 --> 00:24:46,420
go through how this works CSS module

00:24:42,820 --> 00:24:48,550
sees these three lines the first thing

00:24:46,420 --> 00:24:50,980
it does is it rewrites all those classes

00:24:48,550 --> 00:24:52,570
because the classes need to be safe for

00:24:50,980 --> 00:24:53,920
global consumption depending on whatever

00:24:52,570 --> 00:24:56,020
rules you're using it generates these

00:24:53,920 --> 00:24:57,460
classes it exports those classes so that

00:24:56,020 --> 00:24:59,320
your javascript the rest of your

00:24:57,460 --> 00:25:02,770
application can deal with it and inject

00:24:59,320 --> 00:25:06,870
it composers instead of changing the CSS

00:25:02,770 --> 00:25:09,370
in any way just moves the export so now

00:25:06,870 --> 00:25:11,880
normal when you use normal you get two

00:25:09,370 --> 00:25:15,040
classes as Mark already demonstrated and

00:25:11,880 --> 00:25:16,810
that severely reduces the number of

00:25:15,040 --> 00:25:18,550
places that you can use composers you

00:25:16,810 --> 00:25:20,200
can't use it in a pseudo selector you

00:25:18,550 --> 00:25:22,180
can't use it at a nested selector it has

00:25:20,200 --> 00:25:25,060
to be that simple relationship that this

00:25:22,180 --> 00:25:29,160
thing is something else which is all of

00:25:25,060 --> 00:25:32,350
the edge cases of extends just disappear

00:25:29,160 --> 00:25:35,710
so when you use it styles dot danger one

00:25:32,350 --> 00:25:39,580
word you get two classes out and that

00:25:35,710 --> 00:25:42,610
breaking the one-to-one mapping is a big

00:25:39,580 --> 00:25:44,020
deal it means you can change it means

00:25:42,610 --> 00:25:45,730
you have total flexibility of the number

00:25:44,020 --> 00:25:47,860
of classes the type of classes what the

00:25:45,730 --> 00:25:49,450
classes are how big they are when you

00:25:47,860 --> 00:25:53,650
compose them whether they have one line

00:25:49,450 --> 00:25:55,990
of CSS or a hundred that ends up being a

00:25:53,650 --> 00:26:00,400
big deal and how you change in changing

00:25:55,990 --> 00:26:02,020
how you style so the simple cases here

00:26:00,400 --> 00:26:03,460
where the blue and the light blue

00:26:02,020 --> 00:26:04,870
background we want to use from somewhere

00:26:03,460 --> 00:26:06,160
else we have a colors file we have a

00:26:04,870 --> 00:26:08,380
blue class we have a light blue

00:26:06,160 --> 00:26:10,690
background class and now our normal

00:26:08,380 --> 00:26:13,330
button is a base button but it's also a

00:26:10,690 --> 00:26:15,400
blue light blue background from colors

00:26:13,330 --> 00:26:17,740
and this is where the input syntax comes

00:26:15,400 --> 00:26:19,870
in so that I see a sense underneath is

00:26:17,740 --> 00:26:22,240
wiring up the dependencies building a

00:26:19,870 --> 00:26:26,680
dependency graph which webpack and

00:26:22,240 --> 00:26:28,720
others are very happy to consume that

00:26:26,680 --> 00:26:30,880
gets compiled the boot the colors file

00:26:28,720 --> 00:26:32,080
gets compiled the buttons file gets

00:26:30,880 --> 00:26:34,090
compiled and then they just get

00:26:32,080 --> 00:26:38,800
concatenated because it's just normal

00:26:34,090 --> 00:26:42,220
CSS your button when you use normal now

00:26:38,800 --> 00:26:45,340
generates for classes and what's good

00:26:42,220 --> 00:26:48,580
about this example is that normal now no

00:26:45,340 --> 00:26:51,399
longer has any rules it's simply a

00:26:48,580 --> 00:26:52,720
culmination of other rules elsewhere and

00:26:51,399 --> 00:26:54,929
in fact you put this through a min afire

00:26:52,720 --> 00:26:57,190
and that normal line will just disappear

00:26:54,929 --> 00:26:58,870
which means you built a novel piece of

00:26:57,190 --> 00:27:00,970
you I something that somebody asked you

00:26:58,870 --> 00:27:03,250
to build without adding a line of CSS

00:27:00,970 --> 00:27:06,370
the more times you can do that in your

00:27:03,250 --> 00:27:09,010
job the happier you will be from

00:27:06,370 --> 00:27:14,039
experience the more CSS every line of

00:27:09,010 --> 00:27:16,120
CSS you write is should earn its place

00:27:14,039 --> 00:27:17,350
and this turns you to this sort of

00:27:16,120 --> 00:27:20,669
structure now people already do this

00:27:17,350 --> 00:27:22,870
with sass and they do it fine they do a

00:27:20,669 --> 00:27:24,639
shared directory full of things like

00:27:22,870 --> 00:27:27,370
colors typography layout borders

00:27:24,639 --> 00:27:29,440
dividers sizes animations effects

00:27:27,370 --> 00:27:31,539
whatever and then a components directory

00:27:29,440 --> 00:27:34,960
probably alongside their JavaScript

00:27:31,539 --> 00:27:39,730
images tests whatever it is and that

00:27:34,960 --> 00:27:41,049
division is very beneficial it turns you

00:27:39,730 --> 00:27:42,730
towards this idea of using single

00:27:41,049 --> 00:27:45,010
purpose files using full of single

00:27:42,730 --> 00:27:48,490
purpose classes that's how I code at the

00:27:45,010 --> 00:27:50,860
moment to give another example a bit

00:27:48,490 --> 00:27:52,809
more scary let's say an article needs to

00:27:50,860 --> 00:27:55,990
be a vertical flexbox and a masthead

00:27:52,809 --> 00:27:59,260
needs to be 48 point bold serif centered

00:27:55,990 --> 00:28:01,289
with margin and padding we can pull

00:27:59,260 --> 00:28:04,389
those all those things from other places

00:28:01,289 --> 00:28:05,620
so lay out the word the class centered

00:28:04,389 --> 00:28:07,529
inside layup means something different

00:28:05,620 --> 00:28:10,510
from centered in typography which

00:28:07,529 --> 00:28:12,039
shouldn't be confusing because those do

00:28:10,510 --> 00:28:15,039
have meaning in those files you have

00:28:12,039 --> 00:28:16,600
context as well as names the output you

00:28:15,039 --> 00:28:19,299
get three classes for the article and

00:28:16,600 --> 00:28:22,720
seven classes for the div but you don't

00:28:19,299 --> 00:28:24,519
see that you just use the name and that

00:28:22,720 --> 00:28:28,440
breaking of what you get what you're

00:28:24,519 --> 00:28:28,440
generating from what you're putting in

00:28:28,620 --> 00:28:32,799
increases your confidence with what

00:28:30,549 --> 00:28:35,529
you're building what it's doing is

00:28:32,799 --> 00:28:38,260
defining an API into your styles you

00:28:35,529 --> 00:28:39,760
have the same same choices that you have

00:28:38,260 --> 00:28:44,950
designing other parts of your

00:28:39,760 --> 00:28:46,809
application in your CSS file so what a

00:28:44,950 --> 00:28:48,669
what is modular style then because I

00:28:46,809 --> 00:28:51,539
mean we talked about it it's less than

00:28:48,669 --> 00:28:53,860
six months since that first conversation

00:28:51,539 --> 00:28:56,049
about five months since the whole idea

00:28:53,860 --> 00:28:58,029
of interoperable CSS CSS modules hasn't

00:28:56,049 --> 00:28:59,950
has had a name for yet less than six

00:28:58,029 --> 00:29:02,000
months we don't wear the right at the

00:28:59,950 --> 00:29:04,130
beginning of this stuff so we don't

00:29:02,000 --> 00:29:05,660
know where this is going but the one

00:29:04,130 --> 00:29:08,900
thing I'm pretty confident on is that

00:29:05,660 --> 00:29:11,300
the module system that we built should

00:29:08,900 --> 00:29:14,090
be capable of supporting whatever the

00:29:11,300 --> 00:29:16,220
next big CSS technique is whether its

00:29:14,090 --> 00:29:18,320
CSS modules or something else because

00:29:16,220 --> 00:29:21,170
going from having one global context to

00:29:18,320 --> 00:29:24,230
having lots of individual contexts does

00:29:21,170 --> 00:29:25,460
change what you're capable of Four

00:29:24,230 --> 00:29:27,860
Seasons modules I think the key is

00:29:25,460 --> 00:29:31,430
flexibility there's one thing that I

00:29:27,860 --> 00:29:33,740
want to talk about a little bit even

00:29:31,430 --> 00:29:36,080
though running out of time which is this

00:29:33,740 --> 00:29:37,880
idea of atomic design type of design is

00:29:36,080 --> 00:29:40,640
a great metaphor for discussing

00:29:37,880 --> 00:29:43,040
different elements at different levels

00:29:40,640 --> 00:29:44,810
of resolution across an entire team

00:29:43,040 --> 00:29:47,000
between designers developers everybody

00:29:44,810 --> 00:29:48,230
it's a excellent metaphor if you haven't

00:29:47,000 --> 00:29:50,840
tried using it in your projects you

00:29:48,230 --> 00:29:53,300
should but as an implementer like myself

00:29:50,840 --> 00:29:55,340
I see all of those things and I just see

00:29:53,300 --> 00:29:56,900
a component and once you start working

00:29:55,340 --> 00:29:59,330
with react once you start moving two

00:29:56,900 --> 00:30:02,060
components you realize that the level at

00:29:59,330 --> 00:30:04,460
which or the size of which a component

00:30:02,060 --> 00:30:06,260
is doesn't change how you build it but

00:30:04,460 --> 00:30:08,870
it changes how you talk about it how

00:30:06,260 --> 00:30:12,920
many times it's used what parameters it

00:30:08,870 --> 00:30:14,900
takes and I think if modular UI is

00:30:12,920 --> 00:30:19,190
capable through components as I feel

00:30:14,900 --> 00:30:21,860
like it is then modular styling comes

00:30:19,190 --> 00:30:23,510
through composing classes being able to

00:30:21,860 --> 00:30:25,670
no matter what the metaphor whatever

00:30:23,510 --> 00:30:27,230
whatever style of code that you're

00:30:25,670 --> 00:30:29,030
writing knowing that you always have

00:30:27,230 --> 00:30:31,400
that one technique which is that each

00:30:29,030 --> 00:30:35,180
file has local scope and that you can

00:30:31,400 --> 00:30:36,470
compose glasses from other places as we

00:30:35,180 --> 00:30:38,150
talked about it one of the questions

00:30:36,470 --> 00:30:41,420
just before is this idea of reusable

00:30:38,150 --> 00:30:43,250
components so it's an area of intense

00:30:41,420 --> 00:30:44,930
discussion about what does this mean for

00:30:43,250 --> 00:30:46,820
the next bootstrap how am I going to

00:30:44,930 --> 00:30:48,290
publish something that I can consume the

00:30:46,820 --> 00:30:51,080
bits that i need and leave all the bits

00:30:48,290 --> 00:30:52,460
that don't it's still an open question

00:30:51,080 --> 00:30:56,150
we'd love you to contribute to the

00:30:52,460 --> 00:30:57,950
discussion but in the same way that npm

00:30:56,150 --> 00:30:59,450
took a little while after jeaious had

00:30:57,950 --> 00:31:00,980
this module system it's going to take a

00:30:59,450 --> 00:31:03,590
little while to figure out the best ways

00:31:00,980 --> 00:31:06,140
to do this and the other big thing for

00:31:03,590 --> 00:31:07,370
us is non javascript assistance mark

00:31:06,140 --> 00:31:09,440
already hinted at it it's a personal

00:31:07,370 --> 00:31:10,700
thing of mine which is that all of the

00:31:09,440 --> 00:31:13,910
fill of the things I've been talking

00:31:10,700 --> 00:31:15,470
about as making CSS easier for humans at

00:31:13,910 --> 00:31:15,779
the moment depends on JavaScript being

00:31:15,470 --> 00:31:18,299
involved

00:31:15,779 --> 00:31:20,190
at some point whether it's generating a

00:31:18,299 --> 00:31:23,639
static site or actually running your

00:31:20,190 --> 00:31:25,529
application and it doesn't need to be it

00:31:23,639 --> 00:31:27,539
can be completely offline the same way

00:31:25,529 --> 00:31:29,099
that SAS can be used everywhere I think

00:31:27,539 --> 00:31:34,619
CSS modules should be able to be used

00:31:29,099 --> 00:31:37,649
everywhere we have a team of people who

00:31:34,619 --> 00:31:39,570
are building stuff it's not just me the

00:31:37,649 --> 00:31:40,919
project has a lot of momentum behind it

00:31:39,570 --> 00:31:43,679
has a lot of issues a lot of people

00:31:40,919 --> 00:31:45,539
contributing discussions patches please

00:31:43,679 --> 00:31:47,369
if you are interested please get

00:31:45,539 --> 00:31:50,039
involved we're right at the beginning of

00:31:47,369 --> 00:31:52,379
this as I said my slides are up here

00:31:50,039 --> 00:31:54,809
cesar's modules is there if you like

00:31:52,379 --> 00:31:56,580
another introductory to the concept I

00:31:54,809 --> 00:32:02,419
wrote a blog about it that's me on

00:31:56,580 --> 00:32:05,879
Twitter thanks very much for time hey um

00:32:02,419 --> 00:32:07,679
let's say you have a like a layout CSS

00:32:05,879 --> 00:32:09,059
file would like all the different layout

00:32:07,679 --> 00:32:11,940
techniques that you could possibly

00:32:09,059 --> 00:32:14,969
imagine and you only use maybe half of

00:32:11,940 --> 00:32:18,089
them in your actual application will the

00:32:14,969 --> 00:32:19,710
CSS modules actually strip out the rest

00:32:18,089 --> 00:32:22,830
of it or will they remain in there when

00:32:19,710 --> 00:32:25,139
they're compiled or what at the moment

00:32:22,830 --> 00:32:26,729
they'll remain in but one of the

00:32:25,139 --> 00:32:29,369
benefits of actually encoding your

00:32:26,729 --> 00:32:31,799
dependencies and having written down

00:32:29,369 --> 00:32:34,710
that this thing needs this thing means

00:32:31,799 --> 00:32:36,539
that we can properly crawl the defensive

00:32:34,710 --> 00:32:39,809
graph and remove things that aren't

00:32:36,539 --> 00:32:42,539
needed one of the things I think that

00:32:39,809 --> 00:32:44,639
I've found as I've moved towards sharing

00:32:42,539 --> 00:32:46,889
more CSS putting more CSS into

00:32:44,639 --> 00:32:50,419
fundamental building blocks is the size

00:32:46,889 --> 00:32:53,279
of my output CSS is a lot smaller that

00:32:50,419 --> 00:32:55,889
when you have 100 components but they

00:32:53,279 --> 00:32:57,960
share most of their code it doesn't seem

00:32:55,889 --> 00:33:00,509
to bloat at the same speed as if you

00:32:57,960 --> 00:33:02,909
start with a fresh file and you include

00:33:00,509 --> 00:33:04,889
a whole lot of things and so it's been

00:33:02,909 --> 00:33:06,629
less we've had less pressure to do that

00:33:04,889 --> 00:33:07,979
but certainly we have the function at

00:33:06,629 --> 00:33:10,200
their capability to that in the future

00:33:07,979 --> 00:33:11,309
like okay so you're talking about like

00:33:10,200 --> 00:33:12,839
having like hundreds and hundreds of

00:33:11,309 --> 00:33:15,649
components say but I quite a big web app

00:33:12,839 --> 00:33:18,690
there's hundreds of components in there

00:33:15,649 --> 00:33:20,759
just thinking about like how you direct

00:33:18,690 --> 00:33:22,859
dive them like with the directives and

00:33:20,759 --> 00:33:25,139
stuff like that would you put components

00:33:22,859 --> 00:33:26,729
into direct into like specific folders

00:33:25,139 --> 00:33:27,730
or would you put them all in one area

00:33:26,729 --> 00:33:28,540
like

00:33:27,730 --> 00:33:30,280
one thing we've been trying to think

00:33:28,540 --> 00:33:32,560
about actually where we are is like how

00:33:30,280 --> 00:33:34,540
how we can go about creating directories

00:33:32,560 --> 00:33:35,800
with things that are easy to read and

00:33:34,540 --> 00:33:37,990
funnel through without having them all

00:33:35,800 --> 00:33:40,030
in one area yeah you thought about that

00:33:37,990 --> 00:33:43,240
I've thought about it I don't have a

00:33:40,030 --> 00:33:46,120
good answer i think the divisions your

00:33:43,240 --> 00:33:48,910
components is an art it's the same way

00:33:46,120 --> 00:33:53,200
is dividing your styles into fundamental

00:33:48,910 --> 00:33:55,000
blocks he's an art and it i found i've

00:33:53,200 --> 00:33:57,520
had that same progression using angular

00:33:55,000 --> 00:33:59,170
not react potentially react makes it a

00:33:57,520 --> 00:34:01,630
little bit easier but with angular i

00:33:59,170 --> 00:34:03,340
found that when you have 30 components

00:34:01,630 --> 00:34:05,080
you're fine but then one component needs

00:34:03,340 --> 00:34:06,400
five variants and you don't want all

00:34:05,080 --> 00:34:10,420
those five variants to live in one file

00:34:06,400 --> 00:34:13,420
and so tooling around that stuff is

00:34:10,420 --> 00:34:17,590
still still coming out it's still early

00:34:13,420 --> 00:34:19,270
days but it works well for the first 30

00:34:17,590 --> 00:34:21,250
and it feels like it should keep working

00:34:19,270 --> 00:34:24,520
as you have lots and lots of more

00:34:21,250 --> 00:34:25,840
variations one of the things that I've

00:34:24,520 --> 00:34:28,810
seen one of the approaches I've seen is

00:34:25,840 --> 00:34:30,910
encoding more things into arguments so

00:34:28,810 --> 00:34:34,630
there is a kind of upper level component

00:34:30,910 --> 00:34:36,670
that the whose sole responsibility is to

00:34:34,630 --> 00:34:38,380
dispatch to smaller components so that

00:34:36,670 --> 00:34:39,460
it gets all the inputs is common

00:34:38,380 --> 00:34:41,260
interface for everything but then the

00:34:39,460 --> 00:34:42,580
implementation that's more and they

00:34:41,260 --> 00:34:46,350
would live in a subdirectory or

00:34:42,580 --> 00:34:48,310
something but yeah it's it's a if

00:34:46,350 --> 00:34:50,820
everybody's mileage is varying at the

00:34:48,310 --> 00:34:50,820

YouTube URL: https://www.youtube.com/watch?v=O_kGKC7s4U8


