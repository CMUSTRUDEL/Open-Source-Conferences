Title: Apoorv Saxena: Performance Beyond Page Load - CSSConf.Asia 2015
Publication date: 2015-12-23
Playlist: CSSConf.Asia 2015
Description: 
	Performance is now considered as a requirement, after evolving from the evolutionary phase of being a feature. Web has also evolved and so has it's reach into several devices other than desktop, which are less capable in comparison of performance. Thus, it has made all the more important for us to dive deep to learn how our CSS code works inside browser and how it affects the rendering performance of our webpage. I'll suggest you to be prepared to receive a performance dose in this talk, while I share our experiences while performance auditing several web applications.

A web standards lover, performance coach and polygot programmer. Apoorv works as Software Artisan at Wingify. In his spare time he loves to experiment stuff in kitchen and travel.

CSSConf.Asia - Red Dot Design Museum, Singapore - 18 November 2015.

Source: http://2015.cssconf.asia
Slides: http://www.slideshare.net/ApoorvSaxena/performance-beyond-page-load

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:00,000 --> 00:00:02,030
I

00:00:13,120 --> 00:00:19,040
so the topic of this talk is going to be

00:00:16,400 --> 00:00:20,869
a performance beyond page load I'm glad

00:00:19,040 --> 00:00:22,160
that Jeffrey gave a real good

00:00:20,869 --> 00:00:23,779
introduction about the networking

00:00:22,160 --> 00:00:25,490
performance so when you say the

00:00:23,779 --> 00:00:27,260
performance of a web page is divided

00:00:25,490 --> 00:00:28,520
into two components that is networking

00:00:27,260 --> 00:00:30,619
performance and the rendering

00:00:28,520 --> 00:00:32,239
performance while networking performance

00:00:30,619 --> 00:00:35,330
takes care of your page load time and

00:00:32,239 --> 00:00:37,730
the start render time rendering

00:00:35,330 --> 00:00:40,190
performance will be taking care of the

00:00:37,730 --> 00:00:42,050
performance of your interactions on a

00:00:40,190 --> 00:00:44,660
web page so that is what we will be

00:00:42,050 --> 00:00:46,760
focusing upon our goal will be to build

00:00:44,660 --> 00:00:48,890
smooth interactions and even to

00:00:46,760 --> 00:00:51,829
understand as toward the issues are if

00:00:48,890 --> 00:00:54,079
there are any with your web page or your

00:00:51,829 --> 00:00:56,030
interactions on your web page and how

00:00:54,079 --> 00:00:58,969
you should take care of them so let's

00:00:56,030 --> 00:01:00,860
start on we start off with a small

00:00:58,969 --> 00:01:02,960
survey I guess with the show of friends

00:01:00,860 --> 00:01:05,869
you can actually tell whether you belong

00:01:02,960 --> 00:01:07,940
to it or not so my first question will

00:01:05,869 --> 00:01:12,070
be how many of you like animations in

00:01:07,940 --> 00:01:15,770
material design with a show friend okay

00:01:12,070 --> 00:01:17,659
some people not not all of you but i

00:01:15,770 --> 00:01:19,340
guess it's mostly related to the fact

00:01:17,659 --> 00:01:22,790
that animations haven't been performing

00:01:19,340 --> 00:01:24,710
very well on HTML right or it may be

00:01:22,790 --> 00:01:28,130
performing well on native devices but

00:01:24,710 --> 00:01:30,590
not on nom on your mobile in the mobile

00:01:28,130 --> 00:01:32,510
browser so we are going to tackle such

00:01:30,590 --> 00:01:33,890
issues in the coming in the coming

00:01:32,510 --> 00:01:38,720
slides and I will be discussing them

00:01:33,890 --> 00:01:40,909
briefly so you won't like animations if

00:01:38,720 --> 00:01:44,360
they are not smooth our goal will be to

00:01:40,909 --> 00:01:47,119
make sure that we have this things in

00:01:44,360 --> 00:01:49,790
place we follow the best practices but

00:01:47,119 --> 00:01:52,549
some people want to tell meet like hacks

00:01:49,790 --> 00:01:54,049
right because it's not up to you to

00:01:52,549 --> 00:01:58,040
actually take care of them it should be

00:01:54,049 --> 00:01:59,689
the I mean it should be for the browsers

00:01:58,040 --> 00:02:01,880
to actually make it sure that whatever

00:01:59,689 --> 00:02:04,340
you have put in in your code actually is

00:02:01,880 --> 00:02:06,439
performing and varied drones on the web

00:02:04,340 --> 00:02:09,290
browser eight runs performant Lee that

00:02:06,439 --> 00:02:10,700
is at 60fps so there is this a

00:02:09,290 --> 00:02:13,280
mix-and-match of different things that I

00:02:10,700 --> 00:02:15,200
will be talking about their hacks and

00:02:13,280 --> 00:02:18,739
there are best practices and we'll be

00:02:15,200 --> 00:02:21,169
discussing them so starting off with

00:02:18,739 --> 00:02:22,579
rendering performance I just told you

00:02:21,169 --> 00:02:24,950
about the goal which will be to build

00:02:22,579 --> 00:02:25,180
smooth interactions so let's start with

00:02:24,950 --> 00:02:27,879
the

00:02:25,180 --> 00:02:31,689
a steady Archy study is basically about

00:02:27,879 --> 00:02:34,560
a girl and a boy where the boy asks the

00:02:31,689 --> 00:02:37,840
girl to marry him he proposes her and

00:02:34,560 --> 00:02:42,939
luckily he is responded with an answer

00:02:37,840 --> 00:02:45,639
which is yes so what next is shopping

00:02:42,939 --> 00:02:48,489
shopping for that particular shopping

00:02:45,639 --> 00:02:51,159
for that wedding basically and it is a

00:02:48,489 --> 00:02:54,579
shopping that is up the the bride the

00:02:51,159 --> 00:02:58,450
bridal couple is is shopping on on a

00:02:54,579 --> 00:03:01,450
mobile website okay though what happens

00:02:58,450 --> 00:03:03,669
next is something that we didn't

00:03:01,450 --> 00:03:06,430
anticipate for but it is something what

00:03:03,669 --> 00:03:09,159
happened so this is the reaction of the

00:03:06,430 --> 00:03:10,659
girl after she was I mean going through

00:03:09,159 --> 00:03:14,230
the mobile website and trying to

00:03:10,659 --> 00:03:15,969
purchase from over there so it doesn't

00:03:14,230 --> 00:03:18,189
look happy right so we need to make sure

00:03:15,969 --> 00:03:22,480
that this reaction doesn't happen for

00:03:18,189 --> 00:03:25,060
your own customers as well so the bad

00:03:22,480 --> 00:03:28,060
performance of shopping portal it leads

00:03:25,060 --> 00:03:30,459
to do I need to tell you that the bad

00:03:28,060 --> 00:03:31,750
performance is basically the rendering

00:03:30,459 --> 00:03:33,190
performance and not the networking

00:03:31,750 --> 00:03:35,229
performance that will be discussing over

00:03:33,190 --> 00:03:37,180
here over here we are talking about the

00:03:35,229 --> 00:03:40,590
interactions that are there on a web

00:03:37,180 --> 00:03:44,590
page and how they affected the

00:03:40,590 --> 00:03:48,669
experience of that particular bride so

00:03:44,590 --> 00:03:50,349
this is that followed next after after

00:03:48,669 --> 00:03:52,090
that particular reaction this is

00:03:50,349 --> 00:03:55,150
basically a meeting between developers

00:03:52,090 --> 00:03:57,819
project managers and the testers to

00:03:55,150 --> 00:04:00,819
understand as to what went wrong or what

00:03:57,819 --> 00:04:02,799
can be the solution for improving the

00:04:00,819 --> 00:04:06,310
rendering performance of their of their

00:04:02,799 --> 00:04:08,079
mobile web application so i am not

00:04:06,310 --> 00:04:09,790
actually going to focus upon just the

00:04:08,079 --> 00:04:11,259
mobile web experience but it will be the

00:04:09,790 --> 00:04:15,909
performance it will be the rendering

00:04:11,259 --> 00:04:18,880
performance in general ok so wait up it

00:04:15,909 --> 00:04:20,500
is so as far as now i have just told you

00:04:18,880 --> 00:04:23,050
about the case study in general it was

00:04:20,500 --> 00:04:24,909
simply about tom about the experience of

00:04:23,050 --> 00:04:26,169
the customer how it impacted what are

00:04:24,909 --> 00:04:29,320
the different things that people are

00:04:26,169 --> 00:04:31,090
thinking about but let's take a

00:04:29,320 --> 00:04:32,889
technical perspective regarding this and

00:04:31,090 --> 00:04:34,930
understand as to what exactly happen

00:04:32,889 --> 00:04:37,930
what is the technical issue around it

00:04:34,930 --> 00:04:39,110
what what is it because of and what are

00:04:37,930 --> 00:04:42,550
the different solutions that

00:04:39,110 --> 00:04:45,860
you can actually use to overcome it okay

00:04:42,550 --> 00:04:49,280
so a small commercial break this is

00:04:45,860 --> 00:04:51,380
about me my name is a puta Saxena I hail

00:04:49,280 --> 00:04:54,110
from India I work as a first second

00:04:51,380 --> 00:04:56,300
junior and you can follow me at up would

00:04:54,110 --> 00:04:57,350
underscore Saxena if you have any sort

00:04:56,300 --> 00:04:59,630
of questions related to performance

00:04:57,350 --> 00:05:00,890
whether we eat a networking performance

00:04:59,630 --> 00:05:03,170
or the rendering performance you can

00:05:00,890 --> 00:05:07,700
simply tweet up to me and I'll make sure

00:05:03,170 --> 00:05:09,620
that I try to answer that the companies

00:05:07,700 --> 00:05:11,630
that I've worked with and I'm working

00:05:09,620 --> 00:05:13,220
with ving affair before that I had

00:05:11,630 --> 00:05:15,200
worked with LinkedIn which is now a

00:05:13,220 --> 00:05:18,230
SlideShare which was now linkedin and

00:05:15,200 --> 00:05:20,390
director some other conferences that I

00:05:18,230 --> 00:05:22,640
have contributed to before the talks

00:05:20,390 --> 00:05:25,430
mostly focused upon performance but it

00:05:22,640 --> 00:05:26,930
was more about networking and even a bit

00:05:25,430 --> 00:05:30,050
about gaming performance so in case you

00:05:26,930 --> 00:05:34,130
want to check them out please do so

00:05:30,050 --> 00:05:36,500
let's start off with basics ok so when I

00:05:34,130 --> 00:05:39,320
talk about basics I actually come to

00:05:36,500 --> 00:05:41,900
this I remember this picture from my

00:05:39,320 --> 00:05:43,640
childhood which is about a Bioscope so

00:05:41,900 --> 00:05:47,420
with a show of hands how many of you

00:05:43,640 --> 00:05:49,850
understand what is a Bioscope ok just

00:05:47,420 --> 00:05:51,260
one two three okay not not a lot of

00:05:49,850 --> 00:05:53,510
people understand what is Bioscope so

00:05:51,260 --> 00:05:55,130
basically it's a small device where

00:05:53,510 --> 00:05:57,260
there are different stills of a

00:05:55,130 --> 00:05:58,850
particular animation or a movie and they

00:05:57,260 --> 00:06:01,100
are moved manually by a particular

00:05:58,850 --> 00:06:03,380
person who is the owner of this

00:06:01,100 --> 00:06:05,150
particular device and people will be

00:06:03,380 --> 00:06:07,070
able to look through through these holes

00:06:05,150 --> 00:06:09,920
that you can see the aluminum shells and

00:06:07,070 --> 00:06:12,370
through that when a person moves those

00:06:09,920 --> 00:06:14,960
stills it appears like an animated movie

00:06:12,370 --> 00:06:18,260
so on the right you are able to see the

00:06:14,960 --> 00:06:19,730
stills of the animation that is that is

00:06:18,260 --> 00:06:22,580
played by the particular person and

00:06:19,730 --> 00:06:28,630
that's how it is so this is a similar

00:06:22,580 --> 00:06:30,800
concept that is followed when you even

00:06:28,630 --> 00:06:32,720
when you even display a particular

00:06:30,800 --> 00:06:35,120
picture on our on a screen so what

00:06:32,720 --> 00:06:38,150
happens is that the devices refresh the

00:06:35,120 --> 00:06:40,490
screen at 60 frames per second and that

00:06:38,150 --> 00:06:42,770
is how they say that they are able to

00:06:40,490 --> 00:06:45,530
display at 60fps or even more than that

00:06:42,770 --> 00:06:47,930
like 120 fps so what is happening is

00:06:45,530 --> 00:06:50,590
that there are 120 frames per second

00:06:47,930 --> 00:06:52,900
that are played on a particular screen

00:06:50,590 --> 00:06:54,940
the frame budget that

00:06:52,900 --> 00:06:58,570
comes to us to make our particular

00:06:54,940 --> 00:07:00,280
operation is 16 milliseconds how we did

00:06:58,570 --> 00:07:02,560
this calculation is that in once again

00:07:00,280 --> 00:07:04,419
you have to display 60 frames so you do

00:07:02,560 --> 00:07:07,780
a simple calculation that is divided and

00:07:04,419 --> 00:07:10,150
what you get is 16 milliseconds so in 16

00:07:07,780 --> 00:07:12,039
milliseconds you have to make sure that

00:07:10,150 --> 00:07:14,470
everything or every operation that you

00:07:12,039 --> 00:07:18,070
are performing is under 16 milliseconds

00:07:14,470 --> 00:07:19,990
if in case it exceeds 16 milliseconds

00:07:18,070 --> 00:07:22,690
then you will be able to encounter

00:07:19,990 --> 00:07:24,669
something that you won't want to though

00:07:22,690 --> 00:07:26,740
there are also some other householding

00:07:24,669 --> 00:07:29,320
works that a browser needs to needs to

00:07:26,740 --> 00:07:31,720
take a while while carrying out your

00:07:29,320 --> 00:07:34,240
operation which leaves you with just 10

00:07:31,720 --> 00:07:35,260
milliseconds in total so you need to

00:07:34,240 --> 00:07:36,940
actually make sure that whatever

00:07:35,260 --> 00:07:39,100
operation you are performing is

00:07:36,940 --> 00:07:42,880
completed in 10 milliseconds or less

00:07:39,100 --> 00:07:46,539
than that and 10 milliseconds isn't a

00:07:42,880 --> 00:07:48,610
lot of time when failing to meet 10

00:07:46,539 --> 00:07:50,500
milliseconds we come across the behavior

00:07:48,610 --> 00:07:53,440
which you don't like which is termed as

00:07:50,500 --> 00:07:55,990
jank okay so if there's a scroll that

00:07:53,440 --> 00:07:58,120
you're Rob doing and you see that there

00:07:55,990 --> 00:08:03,669
is a lag in between what you will term

00:07:58,120 --> 00:08:05,050
it with is will be jack so this is the

00:08:03,669 --> 00:08:07,180
experience that I was talking about a

00:08:05,050 --> 00:08:09,550
person is trying to scroll the page but

00:08:07,180 --> 00:08:11,789
he seems but he sees that it's actually

00:08:09,550 --> 00:08:15,190
not strolling the reason for it is that

00:08:11,789 --> 00:08:18,010
it is so some operation is taking some a

00:08:15,190 --> 00:08:21,880
lot of time okay which is not allowing

00:08:18,010 --> 00:08:23,949
the pager to paint okay and because of

00:08:21,880 --> 00:08:25,900
that he actually sees that there is a

00:08:23,949 --> 00:08:30,190
jitter or a lag or basically he's

00:08:25,900 --> 00:08:32,800
encountering jank so let's understand as

00:08:30,190 --> 00:08:35,740
to how a browser renders a particular

00:08:32,800 --> 00:08:39,940
draw a particular webpage or how a CSS

00:08:35,740 --> 00:08:41,709
operation is applied onto a web page so

00:08:39,940 --> 00:08:45,430
the pixel pipeline comprises of these

00:08:41,709 --> 00:08:46,990
five stages if I may say it starts off

00:08:45,430 --> 00:08:48,850
with JavaScript because most of the

00:08:46,990 --> 00:08:52,150
interactions may trigger from JavaScript

00:08:48,850 --> 00:08:54,339
it can also in the via CSS also which is

00:08:52,150 --> 00:08:55,779
the second stage but let's think that

00:08:54,339 --> 00:08:58,720
you have made some sort of interaction

00:08:55,779 --> 00:09:01,180
and it goes to your JavaScript okay what

00:08:58,720 --> 00:09:04,079
happens is that you do some sort of i

00:09:01,180 --> 00:09:06,490
mean Dom manipulation which basically

00:09:04,079 --> 00:09:09,240
creates us corresponding style

00:09:06,490 --> 00:09:12,130
and it is passed on to the next stage

00:09:09,240 --> 00:09:14,350
following the style there are three sort

00:09:12,130 --> 00:09:16,720
of operations that can be applied

00:09:14,350 --> 00:09:19,120
depending upon the CSS rule that is

00:09:16,720 --> 00:09:23,290
applied from the style style stage and

00:09:19,120 --> 00:09:25,899
these three operations are layout pane

00:09:23,290 --> 00:09:28,120
and composite I'll be briefly described

00:09:25,899 --> 00:09:29,649
are describing each one of them as to

00:09:28,120 --> 00:09:32,350
what they do what are they responsible

00:09:29,649 --> 00:09:37,000
for and what impact do they have on

00:09:32,350 --> 00:09:39,580
performance so first comes in is layout

00:09:37,000 --> 00:09:42,220
layout is is an operation which is

00:09:39,580 --> 00:09:44,620
triggered when you reposition or you

00:09:42,220 --> 00:09:46,779
change the size of a particular element

00:09:44,620 --> 00:09:50,589
so that basically triggers a layout

00:09:46,779 --> 00:09:52,600
operation so as you can see over here

00:09:50,589 --> 00:09:54,580
this is a particular web page where I

00:09:52,600 --> 00:09:57,010
have highlighted the boundaries of

00:09:54,580 --> 00:09:59,230
element and whenever you do some sort of

00:09:57,010 --> 00:10:01,089
change on the size or the position of a

00:09:59,230 --> 00:10:02,940
particular element the layout operation

00:10:01,089 --> 00:10:05,440
will be triggered in the pixel pipeline

00:10:02,940 --> 00:10:07,209
after the layout operation paint

00:10:05,440 --> 00:10:08,950
operation will be triggered and after

00:10:07,209 --> 00:10:11,440
paint it will be the composite operation

00:10:08,950 --> 00:10:14,079
that will be triggered so layout will be

00:10:11,440 --> 00:10:17,320
the most expensive operation when it

00:10:14,079 --> 00:10:18,760
gets triggered the CSS properties that

00:10:17,320 --> 00:10:21,820
are responsible for triggering the

00:10:18,760 --> 00:10:23,829
layout operation are all of these so you

00:10:21,820 --> 00:10:26,350
can basically go to them I will def I

00:10:23,829 --> 00:10:28,240
love I'll tell you as to what or what

00:10:26,350 --> 00:10:30,399
site you can go to and understand as to

00:10:28,240 --> 00:10:32,500
what CSS property corresponds to which

00:10:30,399 --> 00:10:34,779
operation or what operation does it

00:10:32,500 --> 00:10:37,480
trigger so over here you will be able to

00:10:34,779 --> 00:10:39,310
see the CSS property for example width

00:10:37,480 --> 00:10:41,170
it basically changes the size of a

00:10:39,310 --> 00:10:43,600
particular element and thus is labeled

00:10:41,170 --> 00:10:46,630
under the layout operation category that

00:10:43,600 --> 00:10:49,750
is it triggers a layout operation comes

00:10:46,630 --> 00:10:52,329
next is paint what is paint operation so

00:10:49,750 --> 00:10:54,070
the paint operation is about when the

00:10:52,329 --> 00:10:55,870
when the pixels of a particular element

00:10:54,070 --> 00:10:58,570
are changed or they need to get

00:10:55,870 --> 00:11:00,760
repainted that is that is how we define

00:10:58,570 --> 00:11:03,610
a paint operation so when you actually

00:11:00,760 --> 00:11:06,310
see that an element's layout has been

00:11:03,610 --> 00:11:08,380
changed that as its size or position has

00:11:06,310 --> 00:11:09,970
been changed so inside a web page there

00:11:08,380 --> 00:11:12,370
might be some elements right which are

00:11:09,970 --> 00:11:14,230
getting their pixels repainted so that

00:11:12,370 --> 00:11:16,779
is why the paint operation is triggered

00:11:14,230 --> 00:11:19,209
after layout but there are CSS rules

00:11:16,779 --> 00:11:20,170
that allow you to just trigger the paint

00:11:19,209 --> 00:11:22,690
operation

00:11:20,170 --> 00:11:25,180
so let's understand that over here you

00:11:22,690 --> 00:11:27,430
can see that paint comes after layout

00:11:25,180 --> 00:11:32,220
operation but it can be triggered by a

00:11:27,430 --> 00:11:34,720
CSS property directly also so this is a

00:11:32,220 --> 00:11:37,029
simple screenshot or we can see

00:11:34,720 --> 00:11:39,760
different colored pictures though this

00:11:37,029 --> 00:11:42,040
yes CSS property that is responsible for

00:11:39,760 --> 00:11:43,570
triggering a paint operation just a

00:11:42,040 --> 00:11:46,149
paint operation I am NOT saying about

00:11:43,570 --> 00:11:51,130
the layout are color background color

00:11:46,149 --> 00:11:53,019
and and all of these CSS properties

00:11:51,130 --> 00:11:56,910
they're all are responsible for

00:11:53,019 --> 00:11:59,820
triggering a paint operation directly ok

00:11:56,910 --> 00:12:02,320
the next comes in is composting

00:11:59,820 --> 00:12:04,870
composting is an operation which allows

00:12:02,320 --> 00:12:07,630
a browser to basically compose it

00:12:04,870 --> 00:12:10,779
different layers together and render a

00:12:07,630 --> 00:12:12,399
web page it comes the third in all of

00:12:10,779 --> 00:12:15,370
these operations and the last in the

00:12:12,399 --> 00:12:17,529
pixel pipeline ok so first comes in is a

00:12:15,370 --> 00:12:19,720
layout operation comes next is paint and

00:12:17,529 --> 00:12:23,949
then composition where all of the layers

00:12:19,720 --> 00:12:25,930
are composted together so this is how

00:12:23,949 --> 00:12:27,870
you can picture eyes a web page there

00:12:25,930 --> 00:12:31,449
are different layers on a webpage and

00:12:27,870 --> 00:12:33,610
upon upon the rendering of a webpage or

00:12:31,449 --> 00:12:35,560
when there is a change the last step

00:12:33,610 --> 00:12:39,670
that happens is this the composition of

00:12:35,560 --> 00:12:43,480
different layers to render a web page so

00:12:39,670 --> 00:12:44,980
this is the order of how what the

00:12:43,480 --> 00:12:48,490
performance impact of different

00:12:44,980 --> 00:12:51,220
operations have on in a pixel pipeline

00:12:48,490 --> 00:12:54,490
the most impacted or the most expensive

00:12:51,220 --> 00:12:56,949
operation to perform is layout followed

00:12:54,490 --> 00:12:58,540
by paint and followed by composite the

00:12:56,949 --> 00:13:01,420
reason being that layout triggers paint

00:12:58,540 --> 00:13:04,149
and composite aerosol paint just

00:13:01,420 --> 00:13:06,430
triggering itself but composite as well

00:13:04,149 --> 00:13:08,290
and composite is the last operation

00:13:06,430 --> 00:13:10,870
which is triggered by CSS properties

00:13:08,290 --> 00:13:13,060
like transform or opacity so you might

00:13:10,870 --> 00:13:15,730
have heard of people saying that you

00:13:13,060 --> 00:13:18,639
should use css3 animations or you should

00:13:15,730 --> 00:13:21,819
use css3 transform instead of using

00:13:18,639 --> 00:13:23,800
javascript or instead of using some of

00:13:21,819 --> 00:13:26,350
that paint operation so the reason

00:13:23,800 --> 00:13:28,750
because so the reason is that only the

00:13:26,350 --> 00:13:32,890
composition operation is applied in case

00:13:28,750 --> 00:13:33,939
of transform and opacity change okay so

00:13:32,890 --> 00:13:35,739
how do you analyze the

00:13:33,939 --> 00:13:37,089
moments of a web page now we have

00:13:35,739 --> 00:13:38,559
understood our theoretical knowledge

00:13:37,089 --> 00:13:40,659
right that there are three sort of

00:13:38,559 --> 00:13:44,439
operations but let's try to do something

00:13:40,659 --> 00:13:46,419
practical so the thing that we need to

00:13:44,439 --> 00:13:50,079
understand as to what how we can analyze

00:13:46,419 --> 00:13:51,879
our web page is first as an FPS meter I

00:13:50,079 --> 00:13:54,579
have mentioned about the chrome dev

00:13:51,879 --> 00:13:57,909
tools because it has a feature that it

00:13:54,579 --> 00:13:59,169
is able to display a frame rate on a

00:13:57,909 --> 00:14:01,059
particular web page while you are doing

00:13:59,169 --> 00:14:02,529
different sort of interactions though

00:14:01,059 --> 00:14:04,869
they are readily available in different

00:14:02,529 --> 00:14:07,149
other browsers and you just have to see

00:14:04,869 --> 00:14:09,459
for it there are several other libraries

00:14:07,149 --> 00:14:11,319
also that you can include in your web

00:14:09,459 --> 00:14:14,049
page and you can actually see as to what

00:14:11,319 --> 00:14:17,139
frame rate is running for a while you

00:14:14,049 --> 00:14:19,689
are doing is some sort of interaction so

00:14:17,139 --> 00:14:22,479
this is the screenshot a way you can see

00:14:19,689 --> 00:14:24,789
on the top right I have my frame rate

00:14:22,479 --> 00:14:27,489
which is running when I enable it on

00:14:24,789 --> 00:14:29,529
chrome I even display as to how you can

00:14:27,489 --> 00:14:32,379
enable it by yourself though it's simply

00:14:29,529 --> 00:14:34,839
a I mean I have made a screenshot where

00:14:32,379 --> 00:14:36,909
while doing an interaction I was able to

00:14:34,839 --> 00:14:40,059
see that the frame rate frame rate was

00:14:36,909 --> 00:14:48,519
dripping even below 30 FPS which was the

00:14:40,059 --> 00:14:52,059
reason of the jank to come in next comes

00:14:48,519 --> 00:14:54,429
in is enables paint flashing so what is

00:14:52,059 --> 00:14:56,519
paint flashing allowing you to do it

00:14:54,429 --> 00:14:59,619
allows you to see as to what all

00:14:56,519 --> 00:15:01,959
elements are undergoing a repaint okay

00:14:59,619 --> 00:15:03,669
so when you see a lot of paint

00:15:01,959 --> 00:15:05,349
operations happening while you are doing

00:15:03,669 --> 00:15:07,720
some sort of interaction you will be

00:15:05,349 --> 00:15:09,699
able to see as to whether a particular

00:15:07,720 --> 00:15:12,129
element that you wanted to repaint is

00:15:09,699 --> 00:15:14,499
repainted or not and what other

00:15:12,129 --> 00:15:16,479
components are affected because you

00:15:14,499 --> 00:15:18,099
might trigger a layout operation which

00:15:16,479 --> 00:15:20,049
can further repaint all of the elements

00:15:18,099 --> 00:15:24,369
on a web page and which is a warning

00:15:20,049 --> 00:15:26,559
sign for you right so this is how a web

00:15:24,369 --> 00:15:29,049
page looks like when you have enabled

00:15:26,559 --> 00:15:34,089
flash painting and you can see a lot of

00:15:29,049 --> 00:15:36,579
elements getting repainted the site that

00:15:34,089 --> 00:15:40,419
I have audited for it was material up

00:15:36,579 --> 00:15:41,919
calm and as of now so i'll be explaining

00:15:40,419 --> 00:15:45,100
as to what was the reason behind it

00:15:41,919 --> 00:15:46,329
because of this this situation to

00:15:45,100 --> 00:15:47,160
comment where you can see the entire

00:15:46,329 --> 00:15:50,730
screen to

00:15:47,160 --> 00:15:53,519
repainted the next is chrome devtools

00:15:50,730 --> 00:15:55,649
timeline so the timeline allows you to

00:15:53,519 --> 00:15:58,139
actually see as to what all operations

00:15:55,649 --> 00:15:59,879
are performed when you do a record of a

00:15:58,139 --> 00:16:01,649
particular timeline or when you do a

00:15:59,879 --> 00:16:04,620
record of the interactions for your web

00:16:01,649 --> 00:16:07,470
page so this looks something like this

00:16:04,620 --> 00:16:10,050
and what you are able to see below is

00:16:07,470 --> 00:16:13,019
that there are different frames that are

00:16:10,050 --> 00:16:15,540
that you can see and with every frame

00:16:13,019 --> 00:16:17,399
that is exceeding the 16 millisecond

00:16:15,540 --> 00:16:20,339
window you can actually see them going

00:16:17,399 --> 00:16:23,339
above 30 frames per second line which is

00:16:20,339 --> 00:16:26,519
the top most in this okay below that is

00:16:23,339 --> 00:16:30,209
60 fps so over here you can see that at

00:16:26,519 --> 00:16:32,550
a lot of times javascript is taking a

00:16:30,209 --> 00:16:34,670
lot of time and because of that the next

00:16:32,550 --> 00:16:38,579
operation that happens which is paint is

00:16:34,670 --> 00:16:40,860
is taking its own time which is because

00:16:38,579 --> 00:16:43,319
of which the total time taken in a

00:16:40,860 --> 00:16:45,870
single frame exceeds 10 millisecond or

00:16:43,319 --> 00:16:48,000
16 millisecond in total this is the

00:16:45,870 --> 00:16:51,990
reason for you to understand that a jank

00:16:48,000 --> 00:16:53,670
is happening so what are the performance

00:16:51,990 --> 00:16:55,860
best practices as I mentioned earlier

00:16:53,670 --> 00:16:58,350
you might want to think of it like best

00:16:55,860 --> 00:17:00,180
practices or even hacks but yeah if you

00:16:58,350 --> 00:17:02,939
want to make your customers experience

00:17:00,180 --> 00:17:07,650
sir I mean smooth then this is the way

00:17:02,939 --> 00:17:12,030
to go forward with so first in this is

00:17:07,650 --> 00:17:13,559
CPU versus GPU so CPU is not efficient

00:17:12,030 --> 00:17:15,510
in handling the graphics related

00:17:13,559 --> 00:17:18,270
operations while GPU is built for it

00:17:15,510 --> 00:17:21,209
right so we need to understand that

00:17:18,270 --> 00:17:23,069
JavaScript utilizes CPU which is

00:17:21,209 --> 00:17:26,250
followed by GPU when it is manipulating

00:17:23,069 --> 00:17:29,309
style so what you want to avoid is using

00:17:26,250 --> 00:17:31,919
javascript to trigger style operations

00:17:29,309 --> 00:17:34,440
or to manipulate your dome so in that in

00:17:31,919 --> 00:17:37,049
those cases you will want to use CSS

00:17:34,440 --> 00:17:39,480
instead of using javascript though with

00:17:37,049 --> 00:17:41,309
the animation API coming the web

00:17:39,480 --> 00:17:43,409
animation API coming to JavaScript it

00:17:41,309 --> 00:17:46,200
will be hardware accelerated and we'll

00:17:43,409 --> 00:17:47,909
be using GPU though I mean its support

00:17:46,200 --> 00:17:50,100
is very limited as the Florence still in

00:17:47,909 --> 00:17:52,350
the beta stage it's not very stable so

00:17:50,100 --> 00:17:55,230
it's yet to be there so as of now you

00:17:52,350 --> 00:17:56,610
can think of using styles for

00:17:55,230 --> 00:17:59,760
manipulating your Dom instead of

00:17:56,610 --> 00:18:00,720
JavaScript a rule of thumb is as simple

00:17:59,760 --> 00:18:03,210
as that

00:18:00,720 --> 00:18:05,610
use glasses to update element styling

00:18:03,210 --> 00:18:08,490
instead of using javascript an example

00:18:05,610 --> 00:18:11,700
for this will be a will be the following

00:18:08,490 --> 00:18:14,429
code where earlier in the first part i

00:18:11,700 --> 00:18:16,890
am using CSS and i am removing and

00:18:14,429 --> 00:18:19,730
adding classes to basically apply some

00:18:16,890 --> 00:18:21,510
sort of style to a particular element in

00:18:19,730 --> 00:18:24,539
javascript what you will be doing

00:18:21,510 --> 00:18:26,610
similarly if when not using CSS will be

00:18:24,539 --> 00:18:28,230
something of this operation where you

00:18:26,610 --> 00:18:30,990
define as to what all the properties you

00:18:28,230 --> 00:18:33,330
want to change and you simply apply and

00:18:30,990 --> 00:18:35,940
you simply change the style of the

00:18:33,330 --> 00:18:38,850
javascript element the process that's

00:18:35,940 --> 00:18:41,100
followed is comprised of another step in

00:18:38,850 --> 00:18:43,309
javascript which is rasterization and

00:18:41,100 --> 00:18:45,390
which takes a lot of time and as

00:18:43,309 --> 00:18:47,789
continuously improved by the web

00:18:45,390 --> 00:18:50,280
browsers though when you compare it with

00:18:47,789 --> 00:18:54,480
the house ESS is doing it it's a lot

00:18:50,280 --> 00:18:57,720
more performant so style calculations

00:18:54,480 --> 00:19:02,549
are the reference will be a CSS triggers

00:18:57,720 --> 00:19:06,030
com so let me open it up over here our

00:19:02,549 --> 00:19:07,770
CSS triggers is a great contribution by

00:19:06,030 --> 00:19:09,840
a developer advocate by the name Paul

00:19:07,770 --> 00:19:12,299
Lewis and what you can do over here as

00:19:09,840 --> 00:19:15,059
you can see as to what CSS property

00:19:12,299 --> 00:19:17,070
triggers what all operations so if I

00:19:15,059 --> 00:19:20,220
write or in the filter over here like

00:19:17,070 --> 00:19:22,350
color so you can see that it triggers a

00:19:20,220 --> 00:19:25,200
paint operation followed by a composite

00:19:22,350 --> 00:19:27,570
operation right and it doesn't trigger a

00:19:25,200 --> 00:19:30,809
layout operation if you change it to

00:19:27,570 --> 00:19:33,480
width you'll be able to see that it

00:19:30,809 --> 00:19:35,940
triggers a layout operation followed by

00:19:33,480 --> 00:19:39,090
paint followed by composer I am NOT

00:19:35,940 --> 00:19:41,250
asking you to mug these CSS rules and

00:19:39,090 --> 00:19:43,919
their corresponding operations but have

00:19:41,250 --> 00:19:46,140
a thought about it so that when you are

00:19:43,919 --> 00:19:47,010
using it in your daily workflow you'll

00:19:46,140 --> 00:19:49,409
be able to have that particular

00:19:47,010 --> 00:19:52,320
understanding and gradually it can

00:19:49,409 --> 00:19:54,150
become a habit so you are more so you

00:19:52,320 --> 00:19:55,830
have a better understanding as to what

00:19:54,150 --> 00:19:57,990
CSS property applies what sort of

00:19:55,830 --> 00:20:00,510
functions what sort of operation and

00:19:57,990 --> 00:20:07,530
what performance impact has it has on a

00:20:00,510 --> 00:20:09,330
web page performance coming back so

00:20:07,530 --> 00:20:11,720
these are some of the things that one

00:20:09,330 --> 00:20:11,720
must follow

00:20:12,480 --> 00:20:17,070
what needs to really understand as to

00:20:14,730 --> 00:20:19,020
what impact a rendering performance has

00:20:17,070 --> 00:20:21,240
on the webpage or how is their running

00:20:19,020 --> 00:20:23,220
performance so what you need to do is

00:20:21,240 --> 00:20:25,350
you need to profile you need to profile

00:20:23,220 --> 00:20:28,380
your page you might not want to go to

00:20:25,350 --> 00:20:31,049
the extent of using timeline as I

00:20:28,380 --> 00:20:32,850
displayed before but you might want to

00:20:31,049 --> 00:20:34,799
actually see as to what all elements are

00:20:32,850 --> 00:20:37,710
getting repainted upon some sort of

00:20:34,799 --> 00:20:39,570
interaction I guess while you you are

00:20:37,710 --> 00:20:42,299
doing a code review you can look for

00:20:39,570 --> 00:20:45,780
these these subtleties subtle things and

00:20:42,299 --> 00:20:48,210
maybe help each other to uh to do it

00:20:45,780 --> 00:20:50,970
better and that's how you can make it a

00:20:48,210 --> 00:20:52,679
habit comes next is choosing your CSS

00:20:50,970 --> 00:20:54,870
rules wisely once you are able to

00:20:52,679 --> 00:20:57,299
understand as to what the issues is you

00:20:54,870 --> 00:21:00,120
will be able to see as to what is the

00:20:57,299 --> 00:21:01,919
CSS properties that are getting applied

00:21:00,120 --> 00:21:04,530
when you are making some sort of

00:21:01,919 --> 00:21:06,570
operation and you can see as to what

00:21:04,530 --> 00:21:08,520
operations are triggered that is layout

00:21:06,570 --> 00:21:10,650
paint or trick or composite and

00:21:08,520 --> 00:21:13,380
depending upon that you can take

00:21:10,650 --> 00:21:15,990
decisions whether some sort of operation

00:21:13,380 --> 00:21:19,290
is possible in an animation or not

00:21:15,990 --> 00:21:23,370
without a without having less than 30

00:21:19,290 --> 00:21:25,530
FPS or 60 FPS next comes in is avoid

00:21:23,370 --> 00:21:28,080
triggering layout / paint operation

00:21:25,530 --> 00:21:29,850
repeatedly on when animating so as I

00:21:28,080 --> 00:21:32,880
mentioned just before when you're

00:21:29,850 --> 00:21:35,220
animating try to just use the composite

00:21:32,880 --> 00:21:37,860
operation or the CSS property that only

00:21:35,220 --> 00:21:41,179
trigger a composite operation and not a

00:21:37,860 --> 00:21:44,610
paint because that's really expensive

00:21:41,179 --> 00:21:49,110
comes next is a prefer using transform

00:21:44,610 --> 00:21:51,510
and opacity as I just mentioned next

00:21:49,110 --> 00:21:55,890
comes in reducing the complexity of CSS

00:21:51,510 --> 00:21:58,290
selectors so this is a code by a one of

00:21:55,890 --> 00:22:01,799
the developers at opera and what they

00:21:58,290 --> 00:22:03,390
said is that when applying a CSS rule on

00:22:01,799 --> 00:22:06,450
a particular element fifty percent of

00:22:03,390 --> 00:22:08,520
the time is actually spent on on getting

00:22:06,450 --> 00:22:10,830
that sell us on getting on finding the

00:22:08,520 --> 00:22:13,260
particular element why the selector so

00:22:10,830 --> 00:22:15,720
in case you are having a very complex

00:22:13,260 --> 00:22:18,929
selector you might want to have it less

00:22:15,720 --> 00:22:20,340
complex okay and have it that way

00:22:18,929 --> 00:22:22,740
because otherwise it will take a lot of

00:22:20,340 --> 00:22:25,980
time I guess in the last slide what he

00:22:22,740 --> 00:22:29,130
mentioned was that it was like maybe a

00:22:25,980 --> 00:22:31,740
20 or even more than that the selector

00:22:29,130 --> 00:22:33,840
the entire length of the selector and in

00:22:31,740 --> 00:22:36,900
those cases it took a lot of time for

00:22:33,840 --> 00:22:39,090
the mobile to render that particular web

00:22:36,900 --> 00:22:41,130
page and apply that particular CSS rule

00:22:39,090 --> 00:22:42,960
on on a particular element so need to

00:22:41,130 --> 00:22:44,630
make sure that you don't go into such

00:22:42,960 --> 00:22:47,220
cases especially when using

00:22:44,630 --> 00:22:51,780
preprocessors for example says or less

00:22:47,220 --> 00:22:53,850
right so this is a small example over

00:22:51,780 --> 00:22:56,400
here i have mentioned a class where i am

00:22:53,850 --> 00:22:59,669
applying some sort of rules which is dot

00:22:56,400 --> 00:23:01,919
title and on the next side I have a box

00:22:59,669 --> 00:23:05,400
which is the parent element and on the

00:23:01,919 --> 00:23:08,429
last child I am having inside it I have

00:23:05,400 --> 00:23:11,760
the title div or an element which is

00:23:08,429 --> 00:23:14,610
having a class if I can basically use

00:23:11,760 --> 00:23:17,070
dot title instead of using this sort of

00:23:14,610 --> 00:23:20,030
CSS selectivity I should use dot title

00:23:17,070 --> 00:23:22,740
okay because it's a bit more performant

00:23:20,030 --> 00:23:24,390
now the next thing that comes in is that

00:23:22,740 --> 00:23:26,340
CSS selectors have already been

00:23:24,390 --> 00:23:28,140
optimized I won't ask you to actually

00:23:26,340 --> 00:23:29,549
spend your time over this but please

00:23:28,140 --> 00:23:32,250
make sure that you have an understanding

00:23:29,549 --> 00:23:35,580
about this the next comes in remove

00:23:32,250 --> 00:23:38,370
unused CSS rules the CSS selectors as I

00:23:35,580 --> 00:23:41,070
said are already performant though if

00:23:38,370 --> 00:23:43,770
you have those CSS rules which are not

00:23:41,070 --> 00:23:45,809
used browsers pay spends a lot more time

00:23:43,770 --> 00:23:47,970
to see as to what element it means to

00:23:45,809 --> 00:23:49,500
apply it on so you'll want to actually

00:23:47,970 --> 00:23:52,020
automate this particular task of

00:23:49,500 --> 00:23:55,530
removing the CSS that's not used at all

00:23:52,020 --> 00:23:57,750
on your webpage so there are several I

00:23:55,530 --> 00:24:00,059
mean tasks and plugins that are

00:23:57,750 --> 00:24:03,510
available both for Gulf and grant that

00:24:00,059 --> 00:24:07,440
you can use for removing the unused CSS

00:24:03,510 --> 00:24:10,740
rules comes next is reduced the number

00:24:07,440 --> 00:24:12,120
of elements being style so when when a

00:24:10,740 --> 00:24:14,460
particular interaction is happening on a

00:24:12,120 --> 00:24:17,130
web page please see to it that only the

00:24:14,460 --> 00:24:19,530
elements that need to be updated or

00:24:17,130 --> 00:24:21,570
repainted and not each of the element on

00:24:19,530 --> 00:24:23,850
the web page is getting updated an

00:24:21,570 --> 00:24:26,190
example will be google com i will be

00:24:23,850 --> 00:24:27,630
sharing it later as to what all elements

00:24:26,190 --> 00:24:29,580
are affected with some sort of

00:24:27,630 --> 00:24:30,900
interaction and you will be able to

00:24:29,580 --> 00:24:34,770
understand as to how you can implement

00:24:30,900 --> 00:24:38,220
it on your web page also comes next is

00:24:34,770 --> 00:24:39,240
measure your style recalculation cost so

00:24:38,220 --> 00:24:41,220
when you're animate

00:24:39,240 --> 00:24:43,260
there's a recalculation that is

00:24:41,220 --> 00:24:45,380
happening with every frame you need to

00:24:43,260 --> 00:24:47,490
make sure that the styles that you are

00:24:45,380 --> 00:24:50,340
that you are applying on a particular

00:24:47,490 --> 00:24:53,640
element when you are animating they are

00:24:50,340 --> 00:24:56,940
not very expensive an example for this

00:24:53,640 --> 00:24:59,790
is this there's a Elaine and I have

00:24:56,940 --> 00:25:02,640
applied a hover over that I have an even

00:24:59,790 --> 00:25:04,770
bounded on which I change the background

00:25:02,640 --> 00:25:07,350
color now background color is a paint

00:25:04,770 --> 00:25:10,920
operation so I need to make sure that

00:25:07,350 --> 00:25:13,260
that no other thing or I am NOT term I

00:25:10,920 --> 00:25:17,160
am NOT doing something in parallel which

00:25:13,260 --> 00:25:20,070
may exceed my frame window an example

00:25:17,160 --> 00:25:22,350
would have been on caring is calm when

00:25:20,070 --> 00:25:24,300
we perforated them so what happened was

00:25:22,350 --> 00:25:26,790
that there were several Li elements and

00:25:24,300 --> 00:25:29,309
there was a whole property and on top of

00:25:26,790 --> 00:25:31,830
it the color was changing while we were

00:25:29,309 --> 00:25:33,720
hovering and when we were scrolling the

00:25:31,830 --> 00:25:36,330
particular webpage over those li

00:25:33,720 --> 00:25:39,450
elements which had the background color

00:25:36,330 --> 00:25:42,330
change on her property it basically made

00:25:39,450 --> 00:25:43,650
it exceed the frame window of 16

00:25:42,330 --> 00:25:46,290
milliseconds order 10 millisecond window

00:25:43,650 --> 00:25:48,540
so in those cases we were able to see

00:25:46,290 --> 00:25:50,429
Jack and such is the case that you can

00:25:48,540 --> 00:25:52,950
find when you have a style recalculation

00:25:50,429 --> 00:25:57,090
on a particular event which is happening

00:25:52,950 --> 00:25:59,610
repeatedly comes next is reducing paint

00:25:57,090 --> 00:26:02,340
area or don't paint unnecessarily and

00:25:59,610 --> 00:26:04,770
avoid union of damage reasons what I

00:26:02,340 --> 00:26:06,059
mean by this is in this picture you are

00:26:04,770 --> 00:26:08,309
able to see that there are different

00:26:06,059 --> 00:26:09,809
elements getting updated from the

00:26:08,309 --> 00:26:12,780
boundaries you are able to see as to

00:26:09,809 --> 00:26:14,910
what elements are getting updated though

00:26:12,780 --> 00:26:18,540
because the entire screen is getting

00:26:14,910 --> 00:26:21,240
repainted what is kicking into place is

00:26:18,540 --> 00:26:23,550
union of damage regions so let's say

00:26:21,240 --> 00:26:25,860
that there are three there are three

00:26:23,550 --> 00:26:27,929
elements on a web page which are big and

00:26:25,860 --> 00:26:30,390
they are getting updated so the browser

00:26:27,929 --> 00:26:32,880
says that instead of repainting just

00:26:30,390 --> 00:26:35,700
three elements why not paint the entire

00:26:32,880 --> 00:26:37,860
page so that it takes a lot a lot less

00:26:35,700 --> 00:26:39,600
time for me instead of for repainting

00:26:37,860 --> 00:26:42,900
those three elements individually one

00:26:39,600 --> 00:26:44,520
after the other or simultaneously so you

00:26:42,900 --> 00:26:46,350
need to make sure that something of this

00:26:44,520 --> 00:26:50,100
sort is not happening because it might

00:26:46,350 --> 00:26:53,070
lead to a janky experience comes next is

00:26:50,100 --> 00:26:54,990
CSS animations as I mentioned before

00:26:53,070 --> 00:26:58,820
you should use composite operations

00:26:54,990 --> 00:27:02,100
while your CSS animating a lot of other

00:26:58,820 --> 00:27:05,789
JavaScript libraries also capitalize on

00:27:02,100 --> 00:27:08,309
this on this on this behavior of

00:27:05,789 --> 00:27:10,980
browsers for example famous it simply

00:27:08,309 --> 00:27:13,950
uses transformation to make animations

00:27:10,980 --> 00:27:20,659
and run them at 60fps so you might want

00:27:13,950 --> 00:27:23,730
to explore it further comes next is

00:27:20,659 --> 00:27:25,710
debouncing the input handlers the input

00:27:23,730 --> 00:27:28,549
handlers can be even the actions or the

00:27:25,710 --> 00:27:30,720
association on a particular event an

00:27:28,549 --> 00:27:32,549
example that I have taken is disabling

00:27:30,720 --> 00:27:35,519
over event listener while scrolling and

00:27:32,549 --> 00:27:37,710
this is the example that I made earlier

00:27:35,519 --> 00:27:40,289
this is can I use com and as you can see

00:27:37,710 --> 00:27:41,700
there are lot of allies and on the right

00:27:40,289 --> 00:27:45,210
you are able to see that there is a

00:27:41,700 --> 00:27:47,850
hover property in which I am changing

00:27:45,210 --> 00:27:50,070
the color so this this was the reason

00:27:47,850 --> 00:27:52,259
that we were able to see a janky

00:27:50,070 --> 00:27:54,179
experience and when we disabled that

00:27:52,259 --> 00:27:57,299
covert we were able to see the jank

00:27:54,179 --> 00:27:59,250
being gone so how you can do this is a

00:27:57,299 --> 00:28:01,200
simple hack that you can incorporate in

00:27:59,250 --> 00:28:03,779
your own web pages is that when you're

00:28:01,200 --> 00:28:07,320
scrolling you can actually disable all

00:28:03,779 --> 00:28:09,600
of the CSS / events that are associated

00:28:07,320 --> 00:28:11,309
on a particular element by doing a

00:28:09,600 --> 00:28:13,320
pointer events none property on a

00:28:11,309 --> 00:28:15,750
particular class and you can apply that

00:28:13,320 --> 00:28:17,909
same class on top of body so when you're

00:28:15,750 --> 00:28:20,370
scrolling you can add a class of pointer

00:28:17,909 --> 00:28:22,200
events none to the body and it will make

00:28:20,370 --> 00:28:24,000
sure that no such home where property

00:28:22,200 --> 00:28:25,860
gets activated while you're scrolling

00:28:24,000 --> 00:28:27,389
once you are done with it it will

00:28:25,860 --> 00:28:29,009
restore it back by removing that

00:28:27,389 --> 00:28:30,779
particular class and you'll be in a

00:28:29,009 --> 00:28:34,860
situation and you'll be in the normal

00:28:30,779 --> 00:28:36,899
behavior of your oval properties comes

00:28:34,860 --> 00:28:39,120
next promoting elements that update

00:28:36,899 --> 00:28:41,730
frequently we just saw a great talk

00:28:39,120 --> 00:28:43,710
about SVG animations a lot of time what

00:28:41,730 --> 00:28:46,950
happens is that the animations are

00:28:43,710 --> 00:28:48,899
happening and and because of an

00:28:46,950 --> 00:28:51,120
animation that element is getting

00:28:48,899 --> 00:28:53,070
repainted now because that element is

00:28:51,120 --> 00:28:54,929
getting repainted you might want to

00:28:53,070 --> 00:28:57,629
actually promote it to its own layer so

00:28:54,929 --> 00:28:59,940
that it's just composited it the time is

00:28:57,629 --> 00:29:01,889
actually not spent in repainted it again

00:28:59,940 --> 00:29:04,919
and again but you need to make sure that

00:29:01,889 --> 00:29:06,340
whatever you are promoting is done after

00:29:04,919 --> 00:29:09,429
you have profiled and

00:29:06,340 --> 00:29:11,380
seeing that it may or that it may affect

00:29:09,429 --> 00:29:13,809
your pace performance because otherwise

00:29:11,380 --> 00:29:15,940
you'll just you can do a similar thing

00:29:13,809 --> 00:29:18,100
where you can now where you can update

00:29:15,940 --> 00:29:19,809
where you can promote every element to

00:29:18,100 --> 00:29:23,710
its own layer right but that will

00:29:19,809 --> 00:29:26,020
consume a lot more memory so this is an

00:29:23,710 --> 00:29:27,820
example where you can see a particular

00:29:26,020 --> 00:29:30,760
image which is having its own layer and

00:29:27,820 --> 00:29:32,529
the text which is after this there might

00:29:30,760 --> 00:29:34,360
be some sort of animation that can be

00:29:32,529 --> 00:29:39,429
applied to the image which is displayed

00:29:34,360 --> 00:29:41,980
over here so here is the fun fact or did

00:29:39,429 --> 00:29:44,950
against know that position fixed

00:29:41,980 --> 00:29:47,020
elements and scrollable elements are do

00:29:44,950 --> 00:29:49,000
get repainted every time you do some

00:29:47,020 --> 00:29:51,039
sort of interaction with them so

00:29:49,000 --> 00:29:53,710
whenever so I guess a lot of us are

00:29:51,039 --> 00:29:55,750
using headers right which are position

00:29:53,710 --> 00:29:58,210
fixed headers or fixed elements on top

00:29:55,750 --> 00:30:01,779
of a web page in those cases those

00:29:58,210 --> 00:30:04,090
elements get repainted there there are

00:30:01,779 --> 00:30:05,440
hacks are there is actually a hacked

00:30:04,090 --> 00:30:07,600
which allows you to go over it and

00:30:05,440 --> 00:30:08,890
basically promote it to own layer but

00:30:07,600 --> 00:30:11,039
you need to make sure that you have

00:30:08,890 --> 00:30:13,510
profiles it before you go ahead with it

00:30:11,039 --> 00:30:16,149
so this is the hack that I was talking

00:30:13,510 --> 00:30:18,010
about will change transform is a CSS

00:30:16,149 --> 00:30:20,529
property that allows you to tell the

00:30:18,010 --> 00:30:23,020
browser that hey this element is getting

00:30:20,529 --> 00:30:24,970
repainted a lot a lot of times and you

00:30:23,020 --> 00:30:27,100
need to make sure that it's promoted to

00:30:24,970 --> 00:30:30,460
its own layer the other hack is

00:30:27,100 --> 00:30:33,250
transformed translate Z 0 though will

00:30:30,460 --> 00:30:35,289
change transform is is available in most

00:30:33,250 --> 00:30:37,029
of the browsers and as a fallback you

00:30:35,289 --> 00:30:39,399
might want to use transform translate 0

00:30:37,029 --> 00:30:40,870
as well both of their functions is to

00:30:39,399 --> 00:30:44,380
basically promote a particular element

00:30:40,870 --> 00:30:45,850
to its own layer I'll basically go

00:30:44,380 --> 00:30:48,130
through a live performance audit so that

00:30:45,850 --> 00:30:50,380
you guys can understand as to what I'm

00:30:48,130 --> 00:30:52,750
telling in general as of now about the

00:30:50,380 --> 00:30:55,409
best practices but follow along with me

00:30:52,750 --> 00:30:59,200
till we do a performance audit alive

00:30:55,409 --> 00:31:00,820
comes next is gifs and performance so

00:30:59,200 --> 00:31:02,980
gifs and performance don't go hand in

00:31:00,820 --> 00:31:04,779
hand obviously because Jeff's get

00:31:02,980 --> 00:31:07,929
repainted every time they have a new

00:31:04,779 --> 00:31:09,520
frame so because of them material up

00:31:07,929 --> 00:31:11,890
calm which is a great website about

00:31:09,520 --> 00:31:14,500
showcasing the material design projects

00:31:11,890 --> 00:31:16,870
it was getting a lot of janky experience

00:31:14,500 --> 00:31:18,280
it was able to see that lag and

00:31:16,870 --> 00:31:20,110
performance in the rendering performance

00:31:18,280 --> 00:31:21,790
the reason for it was

00:31:20,110 --> 00:31:24,580
a lot of elements were getting repainted

00:31:21,790 --> 00:31:28,270
and a lot of time union of damage

00:31:24,580 --> 00:31:30,490
regions was was what getting applied by

00:31:28,270 --> 00:31:32,770
the browser so their entire page was

00:31:30,490 --> 00:31:38,350
getting repainted when the small ships

00:31:32,770 --> 00:31:40,660
over there so this is an example of the

00:31:38,350 --> 00:31:44,350
screenshot that I took both of these are

00:31:40,660 --> 00:31:46,360
images and when I enabled paint flashing

00:31:44,350 --> 00:31:49,600
I was able to see that both of them are

00:31:46,360 --> 00:31:51,820
getting updated every time every time

00:31:49,600 --> 00:31:53,740
there was a change in the frame of that

00:31:51,820 --> 00:31:56,380
particular jiff so you might want to

00:31:53,740 --> 00:31:58,419
disable gifs once they are not in the

00:31:56,380 --> 00:32:00,640
viewport so that so that they don't

00:31:58,419 --> 00:32:02,110
actually contribute to the impact of

00:32:00,640 --> 00:32:06,010
their running of the rendering

00:32:02,110 --> 00:32:10,780
performance of your web page so now it's

00:32:06,010 --> 00:32:13,210
time to do a live performance audit so I

00:32:10,780 --> 00:32:14,650
have opened up this console of mine I'm

00:32:13,210 --> 00:32:17,860
using chrome dev tools you can use any

00:32:14,650 --> 00:32:20,110
other browser devtools lady want it's a

00:32:17,860 --> 00:32:22,630
bit more simpler in Chrome so that is

00:32:20,110 --> 00:32:25,900
why I'm using it so as of now you can

00:32:22,630 --> 00:32:27,669
see the that I have enabled paint

00:32:25,900 --> 00:32:29,260
flashing and because of that you are

00:32:27,669 --> 00:32:31,540
able to see as to what elements are

00:32:29,260 --> 00:32:35,559
getting repainted so let me go above and

00:32:31,540 --> 00:32:38,590
the lookout for for its Jeff animation

00:32:35,559 --> 00:32:41,200
ok so now i'm not into the viewport and

00:32:38,590 --> 00:32:43,480
you can see that a jiff is getting

00:32:41,200 --> 00:32:46,750
repainted every time it has a new frame

00:32:43,480 --> 00:32:50,440
right it's on the top right that you can

00:32:46,750 --> 00:32:52,780
see over here now what you can what you

00:32:50,440 --> 00:32:54,429
need to make sure that if such a such

00:32:52,780 --> 00:32:56,500
thing is happening on your web page as

00:32:54,429 --> 00:32:59,020
well you might want to disable it by

00:32:56,500 --> 00:33:02,020
removing its source by replacing it with

00:32:59,020 --> 00:33:05,350
another static image per se or you can

00:33:02,020 --> 00:33:08,080
use some other technique comes next is

00:33:05,350 --> 00:33:10,570
show layer borders so it allows us to

00:33:08,080 --> 00:33:12,790
see actually what are the different

00:33:10,570 --> 00:33:15,429
layers on a web page it might not be

00:33:12,790 --> 00:33:18,100
making a lot of sense but let me do

00:33:15,429 --> 00:33:19,960
something as if now so over here I'm

00:33:18,100 --> 00:33:22,840
interacting with this particular element

00:33:19,960 --> 00:33:24,760
and I am just crawling a I mean up and

00:33:22,840 --> 00:33:27,280
bottom on this particular element can

00:33:24,760 --> 00:33:30,309
you see that entire list is getting

00:33:27,280 --> 00:33:31,990
repainted when I am scrolling it was a

00:33:30,309 --> 00:33:33,940
fun fact that I said before that

00:33:31,990 --> 00:33:36,610
scrollable element skate repainted

00:33:33,940 --> 00:33:38,409
so this is something that you that you

00:33:36,610 --> 00:33:40,240
would want to avoid that when you are

00:33:38,409 --> 00:33:42,340
actually scrolling our particulars a

00:33:40,240 --> 00:33:44,860
particular element what is the need for

00:33:42,340 --> 00:33:47,529
the entire element to get repainted so

00:33:44,860 --> 00:33:52,690
the hack in this case would be to simply

00:33:47,529 --> 00:34:03,039
inspect this fuel and apply a will

00:33:52,690 --> 00:34:05,049
change transform property yep and now

00:34:03,039 --> 00:34:06,580
when you stall you are able to see that

00:34:05,049 --> 00:34:09,490
the entire element is not getting

00:34:06,580 --> 00:34:12,579
repainted so this is a hack that people

00:34:09,490 --> 00:34:14,710
say that it's a hack but if you want to

00:34:12,579 --> 00:34:16,270
improve your page performance this is

00:34:14,710 --> 00:34:21,250
something that you can incorporate as

00:34:16,270 --> 00:34:22,750
well so this is it and there are several

00:34:21,250 --> 00:34:24,490
other things that I just mentioned

00:34:22,750 --> 00:34:26,679
before that you can apply to do a

00:34:24,490 --> 00:34:29,800
similar thing over here also there are

00:34:26,679 --> 00:34:32,829
the as you can see the entire element is

00:34:29,800 --> 00:34:35,319
getting repainted which comprises of

00:34:32,829 --> 00:34:38,319
different pics so you might want to

00:34:35,319 --> 00:34:40,149
avoid this so a similar hack that we did

00:34:38,319 --> 00:34:45,690
for hacker news widget you can do a

00:34:40,149 --> 00:34:49,750
similar one for dribble as well okay and

00:34:45,690 --> 00:34:52,690
after after we have applied this

00:34:49,750 --> 00:34:55,389
particular will change transform

00:34:52,690 --> 00:34:57,129
property I said that it has been

00:34:55,389 --> 00:35:00,369
promoted to its own layer now let's

00:34:57,129 --> 00:35:02,650
verify now when I say show layer borders

00:35:00,369 --> 00:35:05,710
you are actually able to see a blue line

00:35:02,650 --> 00:35:07,990
on the hacker news widget right so this

00:35:05,710 --> 00:35:10,329
is because this element is now upgraded

00:35:07,990 --> 00:35:13,150
to its own layer now actually let me

00:35:10,329 --> 00:35:17,020
remove this will change transform okay

00:35:13,150 --> 00:35:19,810
and now let's show layer Boris okay I

00:35:17,020 --> 00:35:21,190
guess it has been already upgraded to

00:35:19,810 --> 00:35:23,619
its own layer this is the reason for it

00:35:21,190 --> 00:35:25,990
but otherwise it would not display that

00:35:23,619 --> 00:35:34,780
blue border around that particular

00:35:25,990 --> 00:35:36,940
element so coming back at H con 2012 and

00:35:34,780 --> 00:35:38,950
I guess we are all all aware about the

00:35:36,940 --> 00:35:41,140
rendering performance that they have a

00:35:38,950 --> 00:35:43,480
serious impact about the customers

00:35:41,140 --> 00:35:45,520
experience so this is a case study which

00:35:43,480 --> 00:35:47,770
facebook mentioned that when it reduced

00:35:45,520 --> 00:35:51,730
the frame rate from 16 millisecond

00:35:47,770 --> 00:35:53,830
from 60 FPS to 30fps they saw a decrease

00:35:51,730 --> 00:35:55,270
in the user engagement so this is the

00:35:53,830 --> 00:35:57,040
reason that you should really think of

00:35:55,270 --> 00:36:01,420
improving your rendering performance of

00:35:57,040 --> 00:36:04,270
your webpages part 2 performance will be

00:36:01,420 --> 00:36:06,670
to practice it and make it a continuous

00:36:04,270 --> 00:36:08,770
habit we have put in / for dead calm

00:36:06,670 --> 00:36:11,410
which allows you to actually see as to

00:36:08,770 --> 00:36:13,690
when we are performance or a different

00:36:11,410 --> 00:36:16,210
web applications we make them live so

00:36:13,690 --> 00:36:18,400
that developers like you can see as to

00:36:16,210 --> 00:36:20,980
how we performance or it did and do by

00:36:18,400 --> 00:36:22,810
the same by yourself so this is what we

00:36:20,980 --> 00:36:25,750
intend to do with / for it we have also

00:36:22,810 --> 00:36:28,120
put in our documentation which we are

00:36:25,750 --> 00:36:30,310
updating regularly where you can see as

00:36:28,120 --> 00:36:31,690
to what are the different things related

00:36:30,310 --> 00:36:33,640
to rendering performance what are the

00:36:31,690 --> 00:36:35,470
issues what are the different articles

00:36:33,640 --> 00:36:38,440
that you should look out for when there

00:36:35,470 --> 00:36:39,940
is a particular impact of your web

00:36:38,440 --> 00:36:42,160
performance so you might want to check

00:36:39,940 --> 00:36:44,080
out perforate calm in those cases in

00:36:42,160 --> 00:36:46,120
case you have done a performance audit

00:36:44,080 --> 00:36:48,460
by yourself you might want to ping us at

00:36:46,120 --> 00:36:52,210
afford it and we will be happy to add it

00:36:48,460 --> 00:36:58,450
in our repository as well so that's it

00:36:52,210 --> 00:37:00,250
thanks everyone I have noticed when we

00:36:58,450 --> 00:37:03,850
were working on animation on mobile

00:37:00,250 --> 00:37:07,510
devices different type like iphone 6 6

00:37:03,850 --> 00:37:08,860
s5 there is difference and the lagging

00:37:07,510 --> 00:37:11,950
of performance when it comes to

00:37:08,860 --> 00:37:15,040
rendering so do you have any idea why it

00:37:11,950 --> 00:37:16,360
happens so so when you say that you are

00:37:15,040 --> 00:37:19,660
able to see a lagging lag and

00:37:16,360 --> 00:37:22,210
performance there are different reasons

00:37:19,660 --> 00:37:23,980
for it and the way I would want to

00:37:22,210 --> 00:37:26,650
explain is that over in the slides over

00:37:23,980 --> 00:37:28,480
here I simply discussed as to how CSS

00:37:26,650 --> 00:37:29,980
can impact your page performance though

00:37:28,480 --> 00:37:32,410
it can be triggered by a JavaScript as

00:37:29,980 --> 00:37:34,120
well for example there is a consecutive

00:37:32,410 --> 00:37:36,040
Dom read and write which might be

00:37:34,120 --> 00:37:38,620
happening and impacting its performance

00:37:36,040 --> 00:37:40,780
and there are several other issues that

00:37:38,620 --> 00:37:42,850
can be related to it so the way that I

00:37:40,780 --> 00:37:44,560
did up offered it for the rendering

00:37:42,850 --> 00:37:46,030
performance you can do a similar for

00:37:44,560 --> 00:37:48,370
your own application and understand as

00:37:46,030 --> 00:37:51,610
to what is the thing that which is the

00:37:48,370 --> 00:37:53,980
reason for the jank eNOS in your case it

00:37:51,610 --> 00:37:55,030
won't be a generic answer but you need

00:37:53,980 --> 00:37:57,430
to understand as to what are the

00:37:55,030 --> 00:37:58,990
different issues that can impact a page

00:37:57,430 --> 00:38:01,690
performance and that's how you can

00:37:58,990 --> 00:38:06,700
resolve it there is a way to like

00:38:01,690 --> 00:38:09,850
debug this on native iOS like a instead

00:38:06,700 --> 00:38:11,440
of using chrome tools so i have because

00:38:09,850 --> 00:38:13,930
in chrome tools it does not show any

00:38:11,440 --> 00:38:16,810
difference even when you try to

00:38:13,930 --> 00:38:18,610
reproduce it in the same way but on

00:38:16,810 --> 00:38:23,560
native iOS devices it shows the

00:38:18,610 --> 00:38:25,990
difference ok I because these issues are

00:38:23,560 --> 00:38:27,850
like generic they happen the same way on

00:38:25,990 --> 00:38:30,580
the desktop and the mobile devices as

00:38:27,850 --> 00:38:33,010
well so I didn't actually had da I mean

00:38:30,580 --> 00:38:34,600
much much difference between the while

00:38:33,010 --> 00:38:36,130
analyzing the performance of a

00:38:34,600 --> 00:38:39,160
particular application on desktop and

00:38:36,130 --> 00:38:41,440
mobile but I have to see in that case as

00:38:39,160 --> 00:38:43,360
to what what is the exact thing which is

00:38:41,440 --> 00:38:47,410
making a difference between the two

00:38:43,360 --> 00:38:50,640
devices so yeah not sure about the exact

00:38:47,410 --> 00:38:50,640

YouTube URL: https://www.youtube.com/watch?v=Wx1tpF57swY


