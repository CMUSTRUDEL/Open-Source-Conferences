Title: Mathias Bynens: 3.14 Things You Didn't Know About CSS (Updated) - CSSConf.Asia 2015
Publication date: 2015-12-18
Playlist: CSSConf.Asia 2015
Description: 
	This talk will showcase a series of obscure CSS fun facts, such as CSS syntax gimmicks and quirks, weird tricks that involve CSS in one way or another, and security vulnerabilities that are enabled by (ab)using CSS in unexpected ways.

Mathias is a Belgian web standards enthusiast. He likes HTML, CSS, JavaScript, Unicode, performance, and security. At Opera Software heâ€™s a member of the Developer Relations team.

CSSConf.Asia - Red Dot Design Museum, Singapore - 18 November 2015.

Source: http://2015.cssconf.asia
Slides: https://speakerdeck.com/mathiasbynens/3-dot-14-things-i-didnt-know-about-css-at-cssconf-dot-asia-2015

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:14,300 --> 00:00:19,560
hi everyone so yeah today I'm gonna talk

00:00:17,220 --> 00:00:21,300
about a couple of CSS fun facts that

00:00:19,560 --> 00:00:24,029
I've collected over the years the kind

00:00:21,300 --> 00:00:25,950
of things that were interesting to me

00:00:24,029 --> 00:00:27,570
when I finally did understand them or

00:00:25,950 --> 00:00:29,640
took me a very long time to figure out

00:00:27,570 --> 00:00:31,770
and it is my hope that some of these

00:00:29,640 --> 00:00:33,480
things are new to you or at least that

00:00:31,770 --> 00:00:35,550
they are entertaining in some way and

00:00:33,480 --> 00:00:37,530
I'm sure that at the end of the talk

00:00:35,550 --> 00:00:39,780
you'll agree that CSS is much more

00:00:37,530 --> 00:00:41,580
powerful and even more beautiful than

00:00:39,780 --> 00:00:46,230
what we end up using it for in our day

00:00:41,580 --> 00:00:49,290
to day jobs so first let me just quickly

00:00:46,230 --> 00:00:50,910
introduce myself hi I'm Matthias I work

00:00:49,290 --> 00:00:52,829
for Opera Software in developer

00:00:50,910 --> 00:00:54,780
relations and before that I used to

00:00:52,829 --> 00:00:56,610
freelance as a web developer a front-end

00:00:54,780 --> 00:00:58,760
web developer so you could say I have

00:00:56,610 --> 00:01:01,469
been dealing with CSS for a lot of years

00:00:58,760 --> 00:01:03,870
now I like web standards in general

00:01:01,469 --> 00:01:06,630
programming web security and working on

00:01:03,870 --> 00:01:08,399
open source projects now if you have any

00:01:06,630 --> 00:01:09,960
questions at all during this talk like

00:01:08,399 --> 00:01:11,759
if you're watching the live stream or

00:01:09,960 --> 00:01:13,680
whatever or watching this video later

00:01:11,759 --> 00:01:16,229
just send me a message on twitter my

00:01:13,680 --> 00:01:18,060
handle is just my first name Mattias and

00:01:16,229 --> 00:01:19,500
I'll be sure to get back to you of

00:01:18,060 --> 00:01:21,659
course if you're here today just come

00:01:19,500 --> 00:01:24,750
talk to me afterwards and I'll be happy

00:01:21,659 --> 00:01:27,210
to answer any questions you have now

00:01:24,750 --> 00:01:28,560
let's get started let's start off with

00:01:27,210 --> 00:01:32,790
everyone's favorite CSS feature

00:01:28,560 --> 00:01:34,560
important yeah I'm sure you're all

00:01:32,790 --> 00:01:36,689
familiar with what important does right

00:01:34,560 --> 00:01:38,610
in a situation like this for example all

00:01:36,689 --> 00:01:40,860
the elements with class bar get the

00:01:38,610 --> 00:01:42,750
green color but all the elements with

00:01:40,860 --> 00:01:45,960
class bar within an element with class

00:01:42,750 --> 00:01:47,460
foo get a red color I'm sure I'm not

00:01:45,960 --> 00:01:49,439
telling you anything new here and that

00:01:47,460 --> 00:01:50,729
looks something like this so whenever

00:01:49,439 --> 00:01:53,250
there is a conflict between two

00:01:50,729 --> 00:01:55,590
selectors in CSS then by default the

00:01:53,250 --> 00:01:57,540
last one in the source code wins but in

00:01:55,590 --> 00:01:59,939
this case the specificity for both

00:01:57,540 --> 00:02:02,520
selectors is different the one with the

00:01:59,939 --> 00:02:04,650
highest specificity wins regardless of

00:02:02,520 --> 00:02:06,360
the order in the source code so here the

00:02:04,650 --> 00:02:07,890
specificity of the first selector with

00:02:06,360 --> 00:02:09,989
the two class selectors in it is

00:02:07,890 --> 00:02:11,940
actually higher than the specificity of

00:02:09,989 --> 00:02:15,269
the last one and that's why the color is

00:02:11,940 --> 00:02:17,910
red and not green again I'm sure this is

00:02:15,269 --> 00:02:19,860
nothing new to you now in some

00:02:17,910 --> 00:02:22,470
situations you may need to override an

00:02:19,860 --> 00:02:24,150
earlier rule set so in this case you

00:02:22,470 --> 00:02:25,900
want all elements with class bar to be

00:02:24,150 --> 00:02:28,720
green despite of that other

00:02:25,900 --> 00:02:30,760
is rule at the top there and it's cases

00:02:28,720 --> 00:02:32,890
like this where important can be useful

00:02:30,760 --> 00:02:34,750
you can just add importance to that last

00:02:32,890 --> 00:02:38,230
statement there and it boosts that

00:02:34,750 --> 00:02:40,209
single declaration precedents in CSS so

00:02:38,230 --> 00:02:43,269
if you do that then the color in fact

00:02:40,209 --> 00:02:45,099
will become green and again I'm sure

00:02:43,269 --> 00:02:46,390
this is nothing new to you you know how

00:02:45,099 --> 00:02:48,849
important works right

00:02:46,390 --> 00:02:50,709
well what one surprised me here is that

00:02:48,849 --> 00:02:52,870
important actually has nothing to do at

00:02:50,709 --> 00:02:55,299
all with specificity it's actually a

00:02:52,870 --> 00:02:57,370
completely different thing it boosts a

00:02:55,299 --> 00:02:59,109
single declarations precedence without

00:02:57,370 --> 00:03:03,430
affecting the specificity for the whole

00:02:59,109 --> 00:03:04,900
selector now you may have heard that to

00:03:03,430 --> 00:03:06,970
use of important is actually a bad

00:03:04,900 --> 00:03:09,159
practice so you're not actually supposed

00:03:06,970 --> 00:03:11,500
to be using it even though sometimes we

00:03:09,159 --> 00:03:12,549
all do now the good news is now that we

00:03:11,500 --> 00:03:15,670
know that there's a difference between

00:03:12,549 --> 00:03:17,620
specificity and the use of importance we

00:03:15,670 --> 00:03:20,310
can actually fake importance we can use

00:03:17,620 --> 00:03:22,420
important without using importance and

00:03:20,310 --> 00:03:24,010
instead of boosting the declarations

00:03:22,420 --> 00:03:26,560
precedence we can just increase the

00:03:24,010 --> 00:03:28,720
selector specificity so all we have to

00:03:26,560 --> 00:03:29,859
do is just repeat the class name in the

00:03:28,720 --> 00:03:32,709
last lecture a couple of hundred times

00:03:29,859 --> 00:03:34,569
and every time you do that you boost the

00:03:32,709 --> 00:03:36,579
selector specificity so if you just do

00:03:34,569 --> 00:03:40,750
that enough times automatically this

00:03:36,579 --> 00:03:42,220
selector will eventually win and just to

00:03:40,750 --> 00:03:44,349
show you that this actually works it

00:03:42,220 --> 00:03:47,319
does and in this case we only need to

00:03:44,349 --> 00:03:49,629
repeat the class name once if it's twice

00:03:47,319 --> 00:03:51,159
there if it's there twice it will be the

00:03:49,629 --> 00:03:53,769
strongest one the specificity will be

00:03:51,159 --> 00:03:55,000
highest and it will win so there you

00:03:53,769 --> 00:03:56,379
have it I know it's still early in the

00:03:55,000 --> 00:03:59,260
morning but already we've established

00:03:56,379 --> 00:04:03,489
our new best practice of the day yay

00:03:59,260 --> 00:04:07,359
not really okay so let's talk about farm

00:04:03,489 --> 00:04:08,709
family names and CSS now let's do a show

00:04:07,359 --> 00:04:10,870
of hands if you've heard this one before

00:04:08,709 --> 00:04:15,400
if there's whitespace in the font family

00:04:10,870 --> 00:04:17,199
name it must be quoted no no one is

00:04:15,400 --> 00:04:20,650
certain before okay I got this off the

00:04:17,199 --> 00:04:22,840
w3c CSS validator it used to give this

00:04:20,650 --> 00:04:25,720
message to anywhere when you had some

00:04:22,840 --> 00:04:27,760
CSS like this one font family come comic

00:04:25,720 --> 00:04:29,919
sans ms and you forgot the quotes around

00:04:27,760 --> 00:04:31,360
it it would give you the warning hey you

00:04:29,919 --> 00:04:34,240
should you're supposed to be quoting

00:04:31,360 --> 00:04:35,979
this so for a very long time I was

00:04:34,240 --> 00:04:37,450
afraid of having white space in font

00:04:35,979 --> 00:04:38,139
family names without using quotes around

00:04:37,450 --> 00:04:40,300
it

00:04:38,139 --> 00:04:42,400
but a couple of years later I actually

00:04:40,300 --> 00:04:44,379
found out that this doesn't really make

00:04:42,400 --> 00:04:46,030
a lot of sense at all spaces are not

00:04:44,379 --> 00:04:48,189
problematic and found family names

00:04:46,030 --> 00:04:50,439
usually if the font family name is a

00:04:48,189 --> 00:04:51,939
space separated set of CSS identifiers

00:04:50,439 --> 00:04:53,650
there's no problem at all

00:04:51,939 --> 00:04:55,360
so if you want to use Comic Sans a mess

00:04:53,650 --> 00:04:57,249
you don't actually need the codes the

00:04:55,360 --> 00:04:58,930
CSS will still be valid and it will

00:04:57,249 --> 00:05:01,659
still work exactly the same way in all

00:04:58,930 --> 00:05:03,490
browsers now there's a lot of exact

00:05:01,659 --> 00:05:05,379
rules and description and exceptions

00:05:03,490 --> 00:05:06,879
here if you want you can check out the

00:05:05,379 --> 00:05:09,490
URL in the middle of this slide for all

00:05:06,879 --> 00:05:11,020
the details but trust me when I say that

00:05:09,490 --> 00:05:12,610
in this case we can simply omit the

00:05:11,020 --> 00:05:15,009
quotes and everything will still work

00:05:12,610 --> 00:05:16,389
exactly the same way in fact there are

00:05:15,009 --> 00:05:18,520
other things that are much more

00:05:16,389 --> 00:05:21,189
dangerous than whitespace in film family

00:05:18,520 --> 00:05:24,849
names here's an example let's say we

00:05:21,189 --> 00:05:26,409
have a Fonz named 4 5 6 . street now

00:05:24,849 --> 00:05:28,509
because this film family name starts

00:05:26,409 --> 00:05:32,139
with a digit it's no longer of valid CSS

00:05:28,509 --> 00:05:34,289
identifiers so this rule won't actually

00:05:32,139 --> 00:05:37,360
silently be ignored it's not valid CSS

00:05:34,289 --> 00:05:38,979
now the way to fix that is to make it a

00:05:37,360 --> 00:05:41,169
valid identifier and we can do that by

00:05:38,979 --> 00:05:44,229
escaping that first digit there and that

00:05:41,169 --> 00:05:47,349
will look something like this now we get

00:05:44,229 --> 00:05:48,819
backslash 3 4 5 6 . street and that's

00:05:47,349 --> 00:05:51,339
kind of weird right because the font

00:05:48,819 --> 00:05:54,669
family name is 4 5 6 birria street but

00:05:51,339 --> 00:05:56,110
now it says 3 4 5 6 and there's a space

00:05:54,669 --> 00:05:58,060
and there's a backslash and it's all

00:05:56,110 --> 00:05:59,379
just a little bit crazy and this is

00:05:58,060 --> 00:06:03,490
probably not code that you want to be

00:05:59,379 --> 00:06:04,899
writing or maintaining now how else can

00:06:03,490 --> 00:06:07,180
we resolve this problem well of course

00:06:04,899 --> 00:06:10,719
you guessed it we can just use quotes

00:06:07,180 --> 00:06:12,699
around the font family name so whenever

00:06:10,719 --> 00:06:14,740
you're in doubt I would say just always

00:06:12,699 --> 00:06:17,139
use the quotes it avoids a lot of

00:06:14,740 --> 00:06:18,370
problems and it's you know it that way

00:06:17,139 --> 00:06:20,620
you don't have to think about all these

00:06:18,370 --> 00:06:22,089
issues that might pop up but the thing I

00:06:20,620 --> 00:06:23,319
learned here is that there is no need to

00:06:22,089 --> 00:06:27,759
use the quotes just because of

00:06:23,319 --> 00:06:29,349
whitespace that's just not true now I

00:06:27,759 --> 00:06:32,169
really wanted to understand how all this

00:06:29,349 --> 00:06:34,330
works and so I ended up making a small

00:06:32,169 --> 00:06:35,949
tool for it so you can enter any font

00:06:34,330 --> 00:06:38,229
family name in there and it will tell

00:06:35,949 --> 00:06:43,120
you if it can be used without the quotes

00:06:38,229 --> 00:06:45,550
in CSS or not now let's take a closer

00:06:43,120 --> 00:06:49,839
look at attribute values in HTML and CSS

00:06:45,550 --> 00:06:51,000
as you probably know in both HTML CSS we

00:06:49,839 --> 00:06:53,520
can use quotes around

00:06:51,000 --> 00:06:54,210
tribute failures I'm sure that's not big

00:06:53,520 --> 00:06:55,890
news for you

00:06:54,210 --> 00:06:58,680
so here we have an anchor element with

00:06:55,890 --> 00:07:00,930
an HR f of foo and then in the CSS style

00:06:58,680 --> 00:07:03,600
block we select that same element based

00:07:00,930 --> 00:07:07,380
on its attribute value and then we give

00:07:03,600 --> 00:07:09,240
it a nice hot pink background now in

00:07:07,380 --> 00:07:10,590
some cases like in this example we can

00:07:09,240 --> 00:07:12,780
actually omit these quotes and

00:07:10,590 --> 00:07:14,520
everything still works fine the HTML is

00:07:12,780 --> 00:07:16,380
still valid the CSS is still valid and

00:07:14,520 --> 00:07:18,980
the result looks the same in every

00:07:16,380 --> 00:07:22,170
browser there's no problems whatsoever

00:07:18,980 --> 00:07:23,100
however it's important to note that the

00:07:22,170 --> 00:07:24,840
rules for unquoted

00:07:23,100 --> 00:07:28,560
attribute values actually differ between

00:07:24,840 --> 00:07:30,600
HTML and CSS in this example the HTML is

00:07:28,560 --> 00:07:33,870
valid the attribute value is through

00:07:30,600 --> 00:07:35,730
pipe bar but the CSS actually is invalid

00:07:33,870 --> 00:07:37,800
in this case and it won't work it will

00:07:35,730 --> 00:07:40,290
actually silently be ignored and there

00:07:37,800 --> 00:07:43,680
will no be no beautiful hot pink in this

00:07:40,290 --> 00:07:45,750
example at all so how do we resolve this

00:07:43,680 --> 00:07:49,110
again you guessed it all you have to do

00:07:45,750 --> 00:07:51,210
is just use the quotes and in this case

00:07:49,110 --> 00:07:54,450
it's only really necessary to use quotes

00:07:51,210 --> 00:07:56,190
for the CSS version but in general the

00:07:54,450 --> 00:07:58,050
same advice holds it's probably best to

00:07:56,190 --> 00:08:00,390
just always wrap your attribute values

00:07:58,050 --> 00:08:02,370
in quotes both in HTML and in CSS

00:08:00,390 --> 00:08:03,750
because it's that way you just don't

00:08:02,370 --> 00:08:05,490
have to think about all these potential

00:08:03,750 --> 00:08:10,050
issues and about the difference between

00:08:05,490 --> 00:08:12,600
HTML and CSS rules I really wanted to

00:08:10,050 --> 00:08:15,060
understand this as well so and all these

00:08:12,600 --> 00:08:17,340
real differences between HTML and CSS so

00:08:15,060 --> 00:08:18,930
I ended up making another tool and you

00:08:17,340 --> 00:08:20,400
can enter any value it will instantly

00:08:18,930 --> 00:08:21,030
tell you if it can be used as an

00:08:20,400 --> 00:08:23,700
uncrowded

00:08:21,030 --> 00:08:25,650
attribute value in HTML and in CSS and

00:08:23,700 --> 00:08:27,240
as you can see in some cases the result

00:08:25,650 --> 00:08:31,830
is actually different between these two

00:08:27,240 --> 00:08:35,839
languages okay another thing I learned

00:08:31,830 --> 00:08:38,849
something new about is CSS comment as

00:08:35,839 --> 00:08:41,099
you probably know this is the only

00:08:38,849 --> 00:08:43,289
common syntax that CSS sports it starts

00:08:41,099 --> 00:08:44,850
with a slash followed by an asterisk and

00:08:43,289 --> 00:08:46,770
then it ends with an asterisk followed

00:08:44,850 --> 00:08:48,630
by another slash and anything in between

00:08:46,770 --> 00:08:50,880
those two things will become part of a

00:08:48,630 --> 00:08:52,860
comment even if it's like a newline

00:08:50,880 --> 00:08:57,089
character so it becomes it can become a

00:08:52,860 --> 00:08:58,500
multi-line comments that way now that's

00:08:57,089 --> 00:09:00,990
why this example works the way you

00:08:58,500 --> 00:09:03,600
expect it to the color colon rats rule

00:09:00,990 --> 00:09:05,190
it won't up be affected

00:09:03,600 --> 00:09:10,079
it will silently big nor because it's

00:09:05,190 --> 00:09:11,490
part of a commons now lots of other

00:09:10,079 --> 00:09:14,519
programming language have another

00:09:11,490 --> 00:09:16,980
comment line syntax as well this is the

00:09:14,519 --> 00:09:19,410
single line comments index and it uses

00:09:16,980 --> 00:09:21,569
just two slashes and everything else on

00:09:19,410 --> 00:09:23,730
the same line will be ignored in that

00:09:21,569 --> 00:09:25,470
case however CSS doesn't support this

00:09:23,730 --> 00:09:27,899
syntax it doesn't have the concept of

00:09:25,470 --> 00:09:29,040
single line comments so this is actually

00:09:27,899 --> 00:09:31,470
invalid CSS

00:09:29,040 --> 00:09:33,870
however what surprised me about this is

00:09:31,470 --> 00:09:35,459
that this specific example would

00:09:33,870 --> 00:09:37,740
actually work the way we'd expect it to

00:09:35,459 --> 00:09:40,230
the line with color : rat

00:09:37,740 --> 00:09:42,839
will not have any effect so what's going

00:09:40,230 --> 00:09:44,880
on there well it turns out that property

00:09:42,839 --> 00:09:49,500
names in CSS are supposed to be valid

00:09:44,880 --> 00:09:51,389
CSS identifiers and identifiers cannot

00:09:49,500 --> 00:09:53,579
contain unescape slashes and because of

00:09:51,389 --> 00:09:55,649
that this one rule fails to parse and

00:09:53,579 --> 00:09:58,949
CSS just skips it moves on to the next

00:09:55,649 --> 00:10:00,480
one and then applies that now it would

00:09:58,949 --> 00:10:02,430
be different if the property name that

00:10:00,480 --> 00:10:04,199
we're using was a valid identifier

00:10:02,430 --> 00:10:07,440
because then the CSS would be parsed

00:10:04,199 --> 00:10:09,630
just fine however CSS grammar also

00:10:07,440 --> 00:10:11,910
states that rules for unknown properties

00:10:09,630 --> 00:10:13,800
are silently ignored so this gives us

00:10:11,910 --> 00:10:16,800
another way to fake a single line

00:10:13,800 --> 00:10:18,930
comment in CSS we could just use the

00:10:16,800 --> 00:10:20,430
British spelling or we could just make

00:10:18,930 --> 00:10:22,079
some typos in the property name and

00:10:20,430 --> 00:10:24,029
that's kind of crazy and you should

00:10:22,079 --> 00:10:26,009
never deliberately do this probably but

00:10:24,029 --> 00:10:30,569
it kind of works in the sense that the

00:10:26,009 --> 00:10:32,939
rule is silently ignored now tap Atkins

00:10:30,569 --> 00:10:34,589
has an excellent blog post that explains

00:10:32,939 --> 00:10:36,689
these tricks and it's a good way to

00:10:34,589 --> 00:10:39,720
learn a little bit about CSS grammar and

00:10:36,689 --> 00:10:43,560
about how CSS error handling works so

00:10:39,720 --> 00:10:45,180
check it out there's something else

00:10:43,560 --> 00:10:46,889
that's related to CSS that I would like

00:10:45,180 --> 00:10:48,750
to show you but before I can do that we

00:10:46,889 --> 00:10:50,759
need to talk about HTML tags for a

00:10:48,750 --> 00:10:52,500
little while now does anyone know the

00:10:50,759 --> 00:10:54,569
difference between HTML tags and

00:10:52,500 --> 00:10:56,759
elements let's do a quick show of hands

00:10:54,569 --> 00:10:58,079
okay not a lot of people are confident

00:10:56,759 --> 00:11:00,930
in the difference so I'll just briefly

00:10:58,079 --> 00:11:02,819
explain it tags are the things that you

00:11:00,930 --> 00:11:05,250
type into your code editor when you're

00:11:02,819 --> 00:11:06,779
editing an HTML page so for example if

00:11:05,250 --> 00:11:09,810
you have a paragraph element on your

00:11:06,779 --> 00:11:11,970
page you can have a star tag to open the

00:11:09,810 --> 00:11:15,120
paragraph element and an end tag to

00:11:11,970 --> 00:11:17,030
close that P elements those are tags but

00:11:15,120 --> 00:11:19,190
as soon as your document is part

00:11:17,030 --> 00:11:20,960
by the browser it becomes a Dom a

00:11:19,190 --> 00:11:22,640
document object model it becomes this

00:11:20,960 --> 00:11:26,270
tree based thing that you interact with

00:11:22,640 --> 00:11:28,010
in JavaScript or in CSS and once that

00:11:26,270 --> 00:11:29,780
happens we no longer think in terms of

00:11:28,010 --> 00:11:33,170
start and end tags we think in terms of

00:11:29,780 --> 00:11:37,040
elements so that's pretty much

00:11:33,170 --> 00:11:39,110
difference as soon as the page is open

00:11:37,040 --> 00:11:40,370
in the browser its elements and melt

00:11:39,110 --> 00:11:42,260
tags that we're thinking about and

00:11:40,370 --> 00:11:44,270
that's important to realize because if

00:11:42,260 --> 00:11:45,860
you're dealing with CSS or JavaScript

00:11:44,270 --> 00:11:48,410
you're always interacting with these

00:11:45,860 --> 00:11:51,500
elements not with tags or star tags or

00:11:48,410 --> 00:11:54,710
end tags so anyway here's an example

00:11:51,500 --> 00:11:56,390
this is a very simple HTML document so

00:11:54,710 --> 00:11:58,970
you see the HTML and the head and the

00:11:56,390 --> 00:12:01,220
body tags there well it turns out that

00:11:58,970 --> 00:12:04,160
they're closing tags their end tags are

00:12:01,220 --> 00:12:07,250
optional you can just omit them and the

00:12:04,160 --> 00:12:09,080
result is a compact but still valid HTML

00:12:07,250 --> 00:12:12,980
document that results in exactly the

00:12:09,080 --> 00:12:14,810
same Dom as the one before but it gets

00:12:12,980 --> 00:12:18,110
even better it turns out that you can

00:12:14,810 --> 00:12:20,630
also omit their start tags for these

00:12:18,110 --> 00:12:23,300
elements and that way you end up with

00:12:20,630 --> 00:12:25,100
this very minimal but still valid HTML

00:12:23,300 --> 00:12:27,740
document that still results in exactly

00:12:25,100 --> 00:12:29,360
the same Dom so that's really important

00:12:27,740 --> 00:12:31,040
here the HTML the hat and the body

00:12:29,360 --> 00:12:32,950
elements will still be there in the Dom

00:12:31,040 --> 00:12:35,870
even though they're Clark techs are

00:12:32,950 --> 00:12:37,250
omitted from the source code and that's

00:12:35,870 --> 00:12:38,990
because these elements are special

00:12:37,250 --> 00:12:41,000
they're kind of implied and the browser

00:12:38,990 --> 00:12:42,650
will automatically insert them into the

00:12:41,000 --> 00:12:45,890
document for you even if they're not

00:12:42,650 --> 00:12:48,530
part of the source code so with that in

00:12:45,890 --> 00:12:50,780
mind this is probably the most useless -

00:12:48,530 --> 00:12:52,610
to ever I mean if you're going to get an

00:12:50,780 --> 00:12:56,150
HTML - at least you should pick some

00:12:52,610 --> 00:12:58,910
tags that aren't implies right now

00:12:56,150 --> 00:13:01,280
anyway that minimal HTML document that I

00:12:58,910 --> 00:13:03,020
just showed you got me thinking how far

00:13:01,280 --> 00:13:05,150
can we really take this and what more

00:13:03,020 --> 00:13:07,490
can we remove from our HTML source code

00:13:05,150 --> 00:13:11,540
if we stop caring about what's valid and

00:13:07,490 --> 00:13:13,690
what isn't and then I came across Martin

00:13:11,540 --> 00:13:16,250
Cole's experiment called no JavaScript

00:13:13,690 --> 00:13:19,040
so he attempted to recreate a game using

00:13:16,250 --> 00:13:21,710
CSS only and his goal was to use no

00:13:19,040 --> 00:13:23,960
JavaScript at all and as little as HTML

00:13:21,710 --> 00:13:25,790
as little HTML as possible and in fact

00:13:23,960 --> 00:13:27,980
this is the full HTML source code for

00:13:25,790 --> 00:13:29,000
his project it's just one line that

00:13:27,980 --> 00:13:29,600
includes a stylesheet

00:13:29,000 --> 00:13:32,120
on to the page

00:13:29,600 --> 00:13:35,000
and really you should check this out for

00:13:32,120 --> 00:13:36,260
yourself the URL is right there but just

00:13:35,000 --> 00:13:40,370
to give you a quick idea of what it

00:13:36,260 --> 00:13:42,710
looks like well here it is so remember

00:13:40,370 --> 00:13:44,810
this is all CSS and I'm not sure if you

00:13:42,710 --> 00:13:46,340
can see this but the spaceship at the

00:13:44,810 --> 00:13:48,800
bottom is actually following my mouse

00:13:46,340 --> 00:13:50,900
cursor which sounds simple if you have

00:13:48,800 --> 00:13:53,450
the other script axis but if you want to

00:13:50,900 --> 00:13:56,900
do this using only CSS it's actually

00:13:53,450 --> 00:13:58,850
very tricky now the elements that are

00:13:56,900 --> 00:14:00,650
being styled here are the ones that

00:13:58,850 --> 00:14:02,300
we've talked about before the ones that

00:14:00,650 --> 00:14:03,710
the browser automatically creates for

00:14:02,300 --> 00:14:04,460
you even if they're not part of the

00:14:03,710 --> 00:14:07,970
source code

00:14:04,460 --> 00:14:09,860
so HTML hat and body and then there's

00:14:07,970 --> 00:14:13,340
also that one link element that he had

00:14:09,860 --> 00:14:14,900
there in the source code so of course

00:14:13,340 --> 00:14:16,670
the link and the hat elements are

00:14:14,900 --> 00:14:18,710
invisible by default but you can just

00:14:16,670 --> 00:14:20,480
apply this play block to them to make

00:14:18,710 --> 00:14:22,250
them visible then you can start styling

00:14:20,480 --> 00:14:25,130
them giving them a background image and

00:14:22,250 --> 00:14:28,400
all that stuff so anyway we have HTML

00:14:25,130 --> 00:14:31,220
hat link and body that's four different

00:14:28,400 --> 00:14:33,530
elements then we can also use the before

00:14:31,220 --> 00:14:35,180
and after pseudo elements on these

00:14:33,530 --> 00:14:38,210
elements and that totals up to twelve

00:14:35,180 --> 00:14:40,340
unique style blocks so what you're

00:14:38,210 --> 00:14:42,500
looking at here is just twelve unique

00:14:40,340 --> 00:14:45,260
style blocks and that's enough to create

00:14:42,500 --> 00:14:47,200
this apparently it's kind of crazy and

00:14:45,260 --> 00:14:50,900
it just really blew my mind still demo

00:14:47,200 --> 00:14:52,970
so I created a demo of my own it's not

00:14:50,900 --> 00:14:55,640
nearly as impressive as this one but I

00:14:52,970 --> 00:14:58,730
still want to talk about it this is what

00:14:55,640 --> 00:14:59,990
it looks like yeah I know right it's not

00:14:58,730 --> 00:15:01,790
nearly as impressive to look at that as

00:14:59,990 --> 00:15:04,280
the previous one but it looks fairly

00:15:01,790 --> 00:15:06,140
simple and if I were to see this on a

00:15:04,280 --> 00:15:08,180
random website I would probably think it

00:15:06,140 --> 00:15:10,730
was just some basic HTML like a

00:15:08,180 --> 00:15:13,520
paragraph element or something and with

00:15:10,730 --> 00:15:15,020
some very basic CSS to style it but in

00:15:13,520 --> 00:15:17,420
fact if you look at the source code for

00:15:15,020 --> 00:15:19,940
this page you'll see that it's

00:15:17,420 --> 00:15:24,230
completely empty so what is going on

00:15:19,940 --> 00:15:27,650
here well this is the trick that I used

00:15:24,230 --> 00:15:29,270
I'm using the link HTTP header here so

00:15:27,650 --> 00:15:30,970
in theory this header can be used

00:15:29,270 --> 00:15:32,810
instead of the link element in HTML

00:15:30,970 --> 00:15:34,850
anything you can do with the link

00:15:32,810 --> 00:15:37,280
element in HTML can also be done with

00:15:34,850 --> 00:15:39,410
the link HTTP header in browsers that

00:15:37,280 --> 00:15:42,350
support it and at the moment only

00:15:39,410 --> 00:15:43,350
Firefox supported supports it's Oprah I

00:15:42,350 --> 00:15:45,120
used to support it

00:15:43,350 --> 00:15:48,060
before we switch to blank but ever since

00:15:45,120 --> 00:15:52,380
we brought support so if you want to try

00:15:48,060 --> 00:15:53,970
this out visit this page in Firefox so

00:15:52,380 --> 00:15:55,800
anyway this gives us a completely empty

00:15:53,970 --> 00:15:57,360
HTML documents as you can see the

00:15:55,800 --> 00:15:58,920
content length is zero so I'm not

00:15:57,360 --> 00:16:01,890
cheating there I'm not using any special

00:15:58,920 --> 00:16:03,870
weird tricks it's really an empty HTML

00:16:01,890 --> 00:16:07,590
document but we still get a CSS file

00:16:03,870 --> 00:16:09,300
applied to it so the next step is to

00:16:07,590 --> 00:16:11,490
make the document look like it contains

00:16:09,300 --> 00:16:14,400
some actual text and for this I used two

00:16:11,490 --> 00:16:15,570
CSS content property so I select the

00:16:14,400 --> 00:16:17,820
body element which the browser

00:16:15,570 --> 00:16:19,380
automatically creates for me even though

00:16:17,820 --> 00:16:21,450
I don't have the tag for it in the

00:16:19,380 --> 00:16:23,250
source code then I target the after

00:16:21,450 --> 00:16:25,080
pseudo element and then I just give that

00:16:23,250 --> 00:16:27,930
some contents and that's how I made the

00:16:25,080 --> 00:16:30,180
texture up there so that is how this

00:16:27,930 --> 00:16:33,810
demo without any HTML source code at all

00:16:30,180 --> 00:16:35,130
works now is this really useful well I

00:16:33,810 --> 00:16:36,840
don't know maybe you can prank your

00:16:35,130 --> 00:16:39,150
colleagues with this knowledge a little

00:16:36,840 --> 00:16:41,040
bit or if you're really evil you could

00:16:39,150 --> 00:16:44,430
use it as part of an interview question

00:16:41,040 --> 00:16:46,620
imagine this so you give an interview

00:16:44,430 --> 00:16:49,200
candidate URL and tell them to open it

00:16:46,620 --> 00:16:51,270
in Firefox and this URL points to an

00:16:49,200 --> 00:16:54,480
HTML document that contains some inline

00:16:51,270 --> 00:16:56,760
SVG for example the SVG that displays a

00:16:54,480 --> 00:16:59,160
circle as you can see here now the

00:16:56,760 --> 00:17:00,420
circles fill attribute is set to red and

00:16:59,160 --> 00:17:02,760
that's when you ask the interview

00:17:00,420 --> 00:17:06,030
candidate why is the circle green

00:17:02,760 --> 00:17:07,350
instead of red and it will probably take

00:17:06,030 --> 00:17:09,540
them very long time to realize that

00:17:07,350 --> 00:17:12,180
there's a hidden CSS file that magically

00:17:09,540 --> 00:17:13,380
gets applied to these documents even

00:17:12,180 --> 00:17:15,240
though you can't see it in the source

00:17:13,380 --> 00:17:17,579
code I mean the Styles are not even

00:17:15,240 --> 00:17:19,680
visible if you inspect the elements in

00:17:17,579 --> 00:17:22,170
the dev tools so yeah good luck with

00:17:19,680 --> 00:17:26,910
that I hope none of that ever happens to

00:17:22,170 --> 00:17:29,190
you in an interview ok if you want to

00:17:26,910 --> 00:17:31,350
talk about Unicode in CSS we need to

00:17:29,190 --> 00:17:34,620
talk about Unicode in HTML too so let's

00:17:31,350 --> 00:17:36,780
start there the first thing you should

00:17:34,620 --> 00:17:39,300
know is that the class attribute accepts

00:17:36,780 --> 00:17:41,610
every possible character every possible

00:17:39,300 --> 00:17:44,760
unicode character is valid in a class

00:17:41,610 --> 00:17:48,810
attribute value and it will also work in

00:17:44,760 --> 00:17:50,700
every browser so for example 404 - ever

00:17:48,810 --> 00:17:52,950
is a valid class name which is probably

00:17:50,700 --> 00:17:54,660
not very surprising to you but you could

00:17:52,950 --> 00:17:56,430
also use the copyright sign as a class

00:17:54,660 --> 00:17:57,159
name for an element containing a legal

00:17:56,430 --> 00:18:00,849
disclaimer

00:17:57,159 --> 00:18:02,830
for example now in html5 in the standard

00:18:00,849 --> 00:18:04,570
there is this new feature that says that

00:18:02,830 --> 00:18:06,999
the same thing now finally goes for the

00:18:04,570 --> 00:18:08,799
ID attributes so this is new and aspect

00:18:06,999 --> 00:18:09,399
with browser as I've always supported

00:18:08,799 --> 00:18:12,279
this

00:18:09,399 --> 00:18:15,729
this means that IDs can contain any

00:18:12,279 --> 00:18:17,679
symbol at all except for whitespace but

00:18:15,729 --> 00:18:20,289
everything else is valid as part of an

00:18:17,679 --> 00:18:22,479
ID attribute so you could use the heart

00:18:20,289 --> 00:18:24,849
symbol as the ID for a paragraph for

00:18:22,479 --> 00:18:27,129
example or you could use curly quotes as

00:18:24,849 --> 00:18:28,450
a class name for block code elements you

00:18:27,129 --> 00:18:30,580
can do all kinds of stuff you can even

00:18:28,450 --> 00:18:31,809
use hidden emoji to passive-aggressively

00:18:30,580 --> 00:18:36,779
tell people you are using a shitty

00:18:31,809 --> 00:18:36,779
browser and all of this is valid HTML

00:18:37,379 --> 00:18:41,859
this also means that we can do stuff

00:18:39,759 --> 00:18:48,039
like this where you give an element an

00:18:41,859 --> 00:18:51,249
ID of hash ID or let's say a class of

00:18:48,039 --> 00:18:53,950
adult class or you can even combine it

00:18:51,249 --> 00:18:56,109
to an ad colon hover braces at the end

00:18:53,950 --> 00:18:58,119
or even use a value that resembles an

00:18:56,109 --> 00:19:00,039
attribute selector you see where this is

00:18:58,119 --> 00:19:01,869
going right all these classes and ID's

00:19:00,039 --> 00:19:05,619
already look like they're a CSS selector

00:19:01,869 --> 00:19:07,299
so how would you write as use a selector

00:19:05,619 --> 00:19:11,349
to select these elements based on these

00:19:07,299 --> 00:19:13,450
IDs and classes well the answer is we

00:19:11,349 --> 00:19:15,220
need to escape these values first so

00:19:13,450 --> 00:19:17,679
that they become valid identifier and

00:19:15,220 --> 00:19:20,259
only then we can use them as part of a

00:19:17,679 --> 00:19:23,679
CSS selector and this is what that will

00:19:20,259 --> 00:19:25,720
look like the hash symbol for example

00:19:23,679 --> 00:19:28,210
has special meaning in CSS so it cannot

00:19:25,720 --> 00:19:31,389
be used as it is we must escape it as

00:19:28,210 --> 00:19:33,609
backslash hash first and the same thing

00:19:31,389 --> 00:19:35,619
goes for the dot character has special

00:19:33,609 --> 00:19:38,440
meaning so that becomes backslash dot

00:19:35,619 --> 00:19:40,149
the colon character leads escaping too

00:19:38,440 --> 00:19:42,609
and theoretically you could escape that

00:19:40,149 --> 00:19:44,830
as backslash colon but that doesn't work

00:19:42,609 --> 00:19:46,659
in old versions of Internet Explorer so

00:19:44,830 --> 00:19:49,149
a more compatible way to escape it is to

00:19:46,659 --> 00:19:52,090
use backslash 3 a followed by a space

00:19:49,149 --> 00:19:54,820
and 3 a is the unicode code point that

00:19:52,090 --> 00:19:56,619
refers to this character so you could

00:19:54,820 --> 00:19:59,470
use this type of escape for any Unicode

00:19:56,619 --> 00:20:01,509
symbol if you want to anyway as you can

00:19:59,470 --> 00:20:03,249
see many characters need escaping but

00:20:01,509 --> 00:20:07,599
take a look at that last example the

00:20:03,249 --> 00:20:09,549
element with ID 404 - error because that

00:20:07,599 --> 00:20:10,870
ID starts with a digit it needs to be

00:20:09,549 --> 00:20:12,490
escaped as well

00:20:10,870 --> 00:20:14,020
and I remember that this really

00:20:12,490 --> 00:20:15,430
surprised me at some point because I was

00:20:14,020 --> 00:20:17,380
trying to figure out why it was

00:20:15,430 --> 00:20:19,720
impossible to style such an element

00:20:17,380 --> 00:20:22,059
using CSS well it turned out I just had

00:20:19,720 --> 00:20:25,540
to escape it and that looks like

00:20:22,059 --> 00:20:27,490
backslash three for space oh four dash

00:20:25,540 --> 00:20:28,510
error which is kind of weird if you

00:20:27,490 --> 00:20:29,950
think about it

00:20:28,510 --> 00:20:32,200
so if you'd ever need to style an

00:20:29,950 --> 00:20:33,880
element whose class or ID starts with a

00:20:32,200 --> 00:20:35,860
digit I'm sure you will think back on

00:20:33,880 --> 00:20:39,790
this moment because it took me a long

00:20:35,860 --> 00:20:41,140
time to figure this out now as for the

00:20:39,790 --> 00:20:43,540
other examples with the non ASCII

00:20:41,140 --> 00:20:44,830
Unicode symbols well those can just be

00:20:43,540 --> 00:20:46,390
used without escaping them at all

00:20:44,830 --> 00:20:48,640
because they don't have any special

00:20:46,390 --> 00:20:50,290
meaning in CSS now you could still

00:20:48,640 --> 00:20:52,000
escape them if you wanted to based on

00:20:50,290 --> 00:20:57,700
the Unicode code point value and that

00:20:52,000 --> 00:20:59,230
will look like this now to help me

00:20:57,700 --> 00:21:01,390
understand all this I built another one

00:20:59,230 --> 00:21:04,030
of those tools so it allows you to enter

00:21:01,390 --> 00:21:05,950
any ID or class name even the crazy ones

00:21:04,030 --> 00:21:07,929
and then it will automatically tell you

00:21:05,950 --> 00:21:10,540
how to select that element in CSS or

00:21:07,929 --> 00:21:12,160
using the selectors API in JavaScript so

00:21:10,540 --> 00:21:14,200
if you're using documental career

00:21:12,160 --> 00:21:14,559
selector or jQuery or something like

00:21:14,200 --> 00:21:16,179
that

00:21:14,559 --> 00:21:18,490
it will tell you what the selector would

00:21:16,179 --> 00:21:22,809
look like after the double escaping that

00:21:18,490 --> 00:21:24,640
you need for that nowadays there's a

00:21:22,809 --> 00:21:27,100
standardized utility method for this in

00:21:24,640 --> 00:21:29,500
the form of a JavaScript API called CSS

00:21:27,100 --> 00:21:31,600
escape and this is part of the CSS

00:21:29,500 --> 00:21:33,309
object model specification it's already

00:21:31,600 --> 00:21:35,050
two supported in Opera Chrome and

00:21:33,309 --> 00:21:36,910
Firefox so you can actually already

00:21:35,050 --> 00:21:38,700
start using this today if you need

00:21:36,910 --> 00:21:41,080
support for older browsers as well

00:21:38,700 --> 00:21:44,380
there's a polyfill available that you

00:21:41,080 --> 00:21:46,000
can use now the thing is you probably

00:21:44,380 --> 00:21:48,250
need this functionality much more often

00:21:46,000 --> 00:21:50,860
than you would think and here's some

00:21:48,250 --> 00:21:52,300
examples of that I'm sure many of you

00:21:50,860 --> 00:21:54,940
have just some I've done something like

00:21:52,300 --> 00:21:57,610
this at some point I know I have so you

00:21:54,940 --> 00:21:59,350
read the hash from the URL and then you

00:21:57,610 --> 00:22:01,600
use it to select an element in

00:21:59,350 --> 00:22:03,580
JavaScript this is fairly common if you

00:22:01,600 --> 00:22:06,940
use a taps widget on your page for

00:22:03,580 --> 00:22:08,620
example so look at this code and imagine

00:22:06,940 --> 00:22:11,230
what happens if the location hash

00:22:08,620 --> 00:22:12,940
contains a space for example now the

00:22:11,230 --> 00:22:14,290
entire meaning of the selector that we

00:22:12,940 --> 00:22:16,210
dynamically generate would suddenly

00:22:14,290 --> 00:22:18,550
change because instead of selecting an

00:22:16,210 --> 00:22:22,990
element based on that ID it would now

00:22:18,550 --> 00:22:24,280
become a descendant selector now here's

00:22:22,990 --> 00:22:26,870
another example

00:22:24,280 --> 00:22:32,150
very dynamically construct a CSS

00:22:26,870 --> 00:22:35,300
selector what if some value in this case

00:22:32,150 --> 00:22:37,130
contains double quotes the CSS selector

00:22:35,300 --> 00:22:39,140
would actually be broken because the

00:22:37,130 --> 00:22:41,960
attribute selector would be closed by

00:22:39,140 --> 00:22:43,730
the double quote this might throw a

00:22:41,960 --> 00:22:45,950
javascript error and otherwise break

00:22:43,730 --> 00:22:48,860
your site so this code is actually

00:22:45,950 --> 00:22:53,929
broken but it's not really obvious to

00:22:48,860 --> 00:22:55,970
see that now how can we avoid these

00:22:53,929 --> 00:22:57,679
problems well all we need to do is just

00:22:55,970 --> 00:22:59,900
wrap the variable parts of these

00:22:57,679 --> 00:23:02,059
selectors in a call to CSS dot escape

00:22:59,900 --> 00:23:06,410
and that magically makes it work and

00:23:02,059 --> 00:23:07,910
protects against these cases now that

00:23:06,410 --> 00:23:10,400
we're on the subject of breaking things

00:23:07,910 --> 00:23:13,059
using malformed CSS selectors let's take

00:23:10,400 --> 00:23:15,230
a look at how CSS can be used for evil

00:23:13,059 --> 00:23:18,110
now first we need to talk about

00:23:15,230 --> 00:23:21,110
cross-site scripting or XSS has anyone

00:23:18,110 --> 00:23:23,440
ever heard of that before okay yeah some

00:23:21,110 --> 00:23:25,429
people some evil hackers in the room

00:23:23,440 --> 00:23:26,809
even if you have heard of cross-site

00:23:25,429 --> 00:23:28,850
scripting I would recommend checking out

00:23:26,809 --> 00:23:30,500
Google's cross-site scripting game it's

00:23:28,850 --> 00:23:32,059
a really great way to learn about how

00:23:30,500 --> 00:23:34,010
these cross-site scripting attacks work

00:23:32,059 --> 00:23:36,110
and how you can exploit them yourself

00:23:34,010 --> 00:23:38,179
and actually if you give this a try you

00:23:36,110 --> 00:23:42,620
would be surprised how simple it is to

00:23:38,179 --> 00:23:45,470
perform these attacks yourself now most

00:23:42,620 --> 00:23:47,210
websites nowadays contain display or

00:23:45,470 --> 00:23:49,370
they display use of supplied contents in

00:23:47,210 --> 00:23:52,730
different contexts within an HTML

00:23:49,370 --> 00:23:54,740
document so here a custom user color is

00:23:52,730 --> 00:23:57,080
inserted in the context of a CSS value

00:23:54,740 --> 00:23:59,600
then the user name is inserted in an

00:23:57,080 --> 00:24:02,990
HTML text context as part of a paragraph

00:23:59,600 --> 00:24:05,809
element the user profile URL is injected

00:24:02,990 --> 00:24:08,240
in a quoted HTML attribute value the

00:24:05,809 --> 00:24:10,010
user ID is inserted in a JavaScript

00:24:08,240 --> 00:24:12,290
context on the right hand side of a

00:24:10,010 --> 00:24:14,120
variable declaration and finally some

00:24:12,290 --> 00:24:15,950
server generated debug information is

00:24:14,120 --> 00:24:19,070
inserted as part of a comments in HTML

00:24:15,950 --> 00:24:21,320
so all of these things are variable

00:24:19,070 --> 00:24:23,540
content which can somehow be controlled

00:24:21,320 --> 00:24:25,340
or at least influenced by the user and

00:24:23,540 --> 00:24:27,710
the website that displays this

00:24:25,340 --> 00:24:29,000
information in the HTML code needs to

00:24:27,710 --> 00:24:31,640
make sure that the user input is

00:24:29,000 --> 00:24:33,470
properly sanitized and escaped for the

00:24:31,640 --> 00:24:34,820
context that it gets inserted to and

00:24:33,470 --> 00:24:36,800
that is the main problem

00:24:34,820 --> 00:24:39,170
each of these five different contexts

00:24:36,800 --> 00:24:43,040
requires its own different escaping

00:24:39,170 --> 00:24:44,390
rules so usually web application hackers

00:24:43,040 --> 00:24:46,160
look for cross-site scripting

00:24:44,390 --> 00:24:48,740
vulnerabilities which enable them to

00:24:46,160 --> 00:24:51,560
execute custom JavaScript code in the

00:24:48,740 --> 00:24:53,360
context of the targeted website once

00:24:51,560 --> 00:24:55,070
they found such a vulnerability they can

00:24:53,360 --> 00:24:57,590
basically do anything they want in

00:24:55,070 --> 00:24:59,420
JavaScript to that website so the hacker

00:24:57,590 --> 00:25:01,340
could add a script that listens for

00:24:59,420 --> 00:25:03,830
keyboard events for example and then

00:25:01,340 --> 00:25:06,020
logs whatever you like it locks your

00:25:03,830 --> 00:25:07,880
keystrokes that the victim enters to

00:25:06,020 --> 00:25:10,370
their own server for example it would

00:25:07,880 --> 00:25:12,620
essentially be a key logger or it could

00:25:10,370 --> 00:25:14,510
just read sensitive information from the

00:25:12,620 --> 00:25:16,550
Dom and then leaked it to the attacker

00:25:14,510 --> 00:25:21,110
server so that they basically steal that

00:25:16,550 --> 00:25:23,660
data now that's using JavaScript but

00:25:21,110 --> 00:25:28,340
this is a CSS conference so let's shift

00:25:23,660 --> 00:25:31,430
our perspective here what can we do if

00:25:28,340 --> 00:25:32,210
we have full control over pages CSS but

00:25:31,430 --> 00:25:33,980
nothing else

00:25:32,210 --> 00:25:37,730
what's the worst thing we can do as an

00:25:33,980 --> 00:25:39,800
evil hacker in that case in other words

00:25:37,730 --> 00:25:41,500
what if all these injections that we

00:25:39,800 --> 00:25:46,130
talked about are all sanitized properly

00:25:41,500 --> 00:25:48,050
except for the first one this one so for

00:25:46,130 --> 00:25:49,640
the sake of the example assume that

00:25:48,050 --> 00:25:51,260
there is some sort of sanitation going

00:25:49,640 --> 00:25:54,020
on there that makes it impossible to

00:25:51,260 --> 00:25:55,880
close this tile element in the HTML but

00:25:54,020 --> 00:25:58,520
everything else is allowed to you can

00:25:55,880 --> 00:26:01,640
inject any CSS you want but you cannot

00:25:58,520 --> 00:26:04,820
inject arbitrary HTML what damage can

00:26:01,640 --> 00:26:08,840
you do with that well does anyone

00:26:04,820 --> 00:26:12,260
remember the CSS Zen garden yeah some

00:26:08,840 --> 00:26:14,330
people if you look this up you'll end up

00:26:12,260 --> 00:26:16,850
at this website it's just a very simple

00:26:14,330 --> 00:26:19,940
HTML document and it can be styled using

00:26:16,850 --> 00:26:21,890
CSS and anything is anyone is free to

00:26:19,940 --> 00:26:23,960
contribute a CSS file with a custom

00:26:21,890 --> 00:26:27,230
design and if it looks good it will be

00:26:23,960 --> 00:26:29,780
added to the site so here's a bunch of

00:26:27,230 --> 00:26:33,260
different designs designs there's over

00:26:29,780 --> 00:26:35,000
200 on this website already and they all

00:26:33,260 --> 00:26:37,970
look beautiful and completely different

00:26:35,000 --> 00:26:39,680
and the main thing here is that the only

00:26:37,970 --> 00:26:42,440
thing that is really changing between

00:26:39,680 --> 00:26:44,960
these designs is the CSS the HTML is

00:26:42,440 --> 00:26:47,540
exactly the same for every page that you

00:26:44,960 --> 00:26:51,300
see here so this is a very powerful

00:26:47,540 --> 00:26:53,260
demonstration of what CSS can do

00:26:51,300 --> 00:26:55,660
now if you look at this from the

00:26:53,260 --> 00:26:57,430
perspective of an evil hacker imagine

00:26:55,660 --> 00:26:59,590
having that kind of power over a website

00:26:57,430 --> 00:27:01,420
that you're targeting the obvious thing

00:26:59,590 --> 00:27:03,640
to do as an evil hacker is of course to

00:27:01,420 --> 00:27:05,830
completely deface the website you can

00:27:03,640 --> 00:27:08,980
make it look like at whatever you want

00:27:05,830 --> 00:27:11,590
basically so here's the original CSS

00:27:08,980 --> 00:27:13,510
comp website for example now if you had

00:27:11,590 --> 00:27:15,220
full control over the CSS but nothing

00:27:13,510 --> 00:27:18,400
else you could make it look like this

00:27:15,220 --> 00:27:19,990
and I'm not sure they would sell any

00:27:18,400 --> 00:27:21,700
tickets this way because it's a CSS

00:27:19,990 --> 00:27:24,250
conference and you have you know some

00:27:21,700 --> 00:27:28,540
certain expectations about their use of

00:27:24,250 --> 00:27:30,340
CSS so when an attacker is able to

00:27:28,540 --> 00:27:32,040
control the CSS of your page in such a

00:27:30,340 --> 00:27:34,900
way that's probably or not what you want

00:27:32,040 --> 00:27:36,640
it could be even worse I mean they could

00:27:34,900 --> 00:27:38,470
just hide all the existing content and

00:27:36,640 --> 00:27:40,120
then just apply a background image that

00:27:38,470 --> 00:27:42,340
contains some text of their own for

00:27:40,120 --> 00:27:44,020
example so they could basically replace

00:27:42,340 --> 00:27:47,170
all the existing content of the site

00:27:44,020 --> 00:27:48,400
with whatever they want there's

00:27:47,170 --> 00:27:50,440
something else that you could do and

00:27:48,400 --> 00:27:52,720
this is kind of similar to defacing but

00:27:50,440 --> 00:27:54,730
it's much more subtle you wouldn't touch

00:27:52,720 --> 00:27:56,860
the design but you would just inject

00:27:54,730 --> 00:27:59,020
some really annoying CSS rules and

00:27:56,860 --> 00:28:01,000
there's a project that collects CSS

00:27:59,020 --> 00:28:03,400
rules like that it's called evil dot CSS

00:28:01,000 --> 00:28:06,280
and it's just a CSS file basically with

00:28:03,400 --> 00:28:08,170
a bunch of really annoying CSS rules it

00:28:06,280 --> 00:28:10,510
also contains some rules that are just

00:28:08,170 --> 00:28:13,630
super bad for performance just for the

00:28:10,510 --> 00:28:17,460
fun of it and yeah again here's the

00:28:13,630 --> 00:28:20,290
original CSS deaf West web site and

00:28:17,460 --> 00:28:22,960
here's that same web site with evil dot

00:28:20,290 --> 00:28:24,940
CSS enables so there's no extra scroll

00:28:22,960 --> 00:28:26,950
bars everywhere the layout is slightly

00:28:24,940 --> 00:28:30,100
broken some of the content is flickering

00:28:26,950 --> 00:28:32,380
or missing the text is slightly blurry

00:28:30,100 --> 00:28:34,240
I'm not sure how easy to see that is

00:28:32,380 --> 00:28:36,220
yeah there's a lot of content just

00:28:34,240 --> 00:28:38,440
missing suddenly

00:28:36,220 --> 00:28:40,150
scrolling also feels really really slow

00:28:38,440 --> 00:28:42,490
because of all those terrible

00:28:40,150 --> 00:28:45,250
performance-wise CSS that is added to

00:28:42,490 --> 00:28:47,590
the page and my favorite part is the

00:28:45,250 --> 00:28:50,290
first letter in each element is slightly

00:28:47,590 --> 00:28:51,370
smaller than all the other ones so

00:28:50,290 --> 00:28:53,980
annoying

00:28:51,370 --> 00:28:55,480
anyway so both defacing and doing this

00:28:53,980 --> 00:28:57,429
sort of thing to web sites can be

00:28:55,480 --> 00:28:59,590
annoying for both the administrators and

00:28:57,429 --> 00:29:01,510
the visitors of the web site but it

00:28:59,590 --> 00:29:03,820
could be much worse right because if we

00:29:01,510 --> 00:29:05,529
look back at cross-site scripting

00:29:03,820 --> 00:29:07,419
well you could steal sensitive

00:29:05,529 --> 00:29:10,619
information that way and this is not

00:29:07,419 --> 00:29:13,409
possible using just TSS right or is it

00:29:10,619 --> 00:29:16,090
well let's see

00:29:13,409 --> 00:29:18,789
CSS kind of allows you to leak the value

00:29:16,090 --> 00:29:20,679
for any attribute value in the Dom so

00:29:18,789 --> 00:29:22,600
some attribute values contain security

00:29:20,679 --> 00:29:25,570
sensitive information like a CSRF token

00:29:22,600 --> 00:29:27,639
for example now if you were an attacker

00:29:25,570 --> 00:29:29,799
or a hacker you wanted to steal this

00:29:27,639 --> 00:29:33,149
value attribute here using nothing but

00:29:29,799 --> 00:29:36,190
CSS injection how would you go about it

00:29:33,149 --> 00:29:39,759
well one way to do it is to write a

00:29:36,190 --> 00:29:41,889
bunch of CSS like this you could use the

00:29:39,759 --> 00:29:44,259
CSS attribute starts with selector and

00:29:41,889 --> 00:29:46,330
that way it's trivial to figure out the

00:29:44,259 --> 00:29:48,340
first character of the CSRF token just

00:29:46,330 --> 00:29:50,080
by brute forcing it you just try every

00:29:48,340 --> 00:29:54,009
possible value for that first character

00:29:50,080 --> 00:29:56,830
and you include a unique background

00:29:54,009 --> 00:29:59,259
image URL on your own server for each

00:29:56,830 --> 00:30:01,029
character and when the browser makes the

00:29:59,259 --> 00:30:03,190
request to your server you know that

00:30:01,029 --> 00:30:05,080
that character matches and then you can

00:30:03,190 --> 00:30:06,909
start doing the same thing for the first

00:30:05,080 --> 00:30:09,340
two characters to guess the second

00:30:06,909 --> 00:30:13,690
character and so on until you have brute

00:30:09,340 --> 00:30:15,460
force the entire token so in the worst

00:30:13,690 --> 00:30:17,349
case scenario you could just enumerate

00:30:15,460 --> 00:30:19,239
all the possible values for the CSRF

00:30:17,349 --> 00:30:21,279
token but in practice you don't really

00:30:19,239 --> 00:30:23,559
need to test all of them it's a bit

00:30:21,279 --> 00:30:25,690
faster than that and here's an actual

00:30:23,559 --> 00:30:27,999
proof of concept for this sort of attack

00:30:25,690 --> 00:30:30,759
it doesn't use any JavaScript at all so

00:30:27,999 --> 00:30:33,309
only a lot of CSS rules and it's not

00:30:30,759 --> 00:30:35,200
very efficient or fast but it shows that

00:30:33,309 --> 00:30:37,419
it is possible to actually exfiltrate

00:30:35,200 --> 00:30:44,499
the sensitive data this way by using

00:30:37,419 --> 00:30:46,359
nothing but CSS now that was about

00:30:44,499 --> 00:30:48,700
stealing information that was hidden in

00:30:46,359 --> 00:30:50,619
an HTML attribute what if you want to

00:30:48,700 --> 00:30:55,869
steal data from the Dom that is part of

00:30:50,619 --> 00:30:57,460
a text node using nothing but CSS so

00:30:55,869 --> 00:30:59,769
let's say we have some HTML like this

00:30:57,460 --> 00:31:01,629
that contains let's say a username or

00:30:59,769 --> 00:31:03,549
something else that we want to find out

00:31:01,629 --> 00:31:05,559
or maybe it's the balance of your bank

00:31:03,549 --> 00:31:07,269
accounts something like that but you

00:31:05,559 --> 00:31:11,039
can't use JavaScript you can only use

00:31:07,269 --> 00:31:14,320
CSS injection how can we do this well

00:31:11,039 --> 00:31:16,690
you could use Unicode range to define

00:31:14,320 --> 00:31:17,740
web fonts to be used only for specific

00:31:16,690 --> 00:31:19,870
character

00:31:17,740 --> 00:31:21,580
so if you create a separate Fontes

00:31:19,870 --> 00:31:24,220
declaration for each individual

00:31:21,580 --> 00:31:26,230
character with a unique URL for each

00:31:24,220 --> 00:31:28,060
font you can essentially figure out

00:31:26,230 --> 00:31:32,980
which characters are being used as part

00:31:28,060 --> 00:31:35,860
of the CSS content and here's a proof of

00:31:32,980 --> 00:31:38,530
concept of that the demo was made by a

00:31:35,860 --> 00:31:40,690
guy named masato Kanagawa and as you can

00:31:38,530 --> 00:31:42,370
see the browser makes a request for each

00:31:40,690 --> 00:31:45,700
of the characters that is being used

00:31:42,370 --> 00:31:48,190
as part of this sensitive content now

00:31:45,700 --> 00:31:50,620
one downside is that it wouldn't show

00:31:48,190 --> 00:31:52,540
you the repeated characters like for

00:31:50,620 --> 00:31:54,400
example the letter a is being used three

00:31:52,540 --> 00:31:56,290
times in this case and of course the

00:31:54,400 --> 00:31:58,440
browser will only make one request for

00:31:56,290 --> 00:32:01,930
the font that is used for the letter A

00:31:58,440 --> 00:32:03,160
but in many cases like it really depends

00:32:01,930 --> 00:32:05,140
on the use case of course but in many

00:32:03,160 --> 00:32:09,660
cases just knowing which characters are

00:32:05,140 --> 00:32:09,660
being used is enough to guess the rest

00:32:10,740 --> 00:32:17,590
now still it could be worse there could

00:32:13,240 --> 00:32:20,110
be an easy way to steal sensitive data

00:32:17,590 --> 00:32:22,450
that is fast it's efficient that doesn't

00:32:20,110 --> 00:32:24,190
require us to write a lots of CSS and it

00:32:22,450 --> 00:32:26,830
turns out there is such a thing as well

00:32:24,190 --> 00:32:29,380
and CSS ie5 introduced this proprietary

00:32:26,830 --> 00:32:31,540
feature called CSS expressions to make

00:32:29,380 --> 00:32:33,400
it possibly to dynamically calculate the

00:32:31,540 --> 00:32:36,450
values for certain CSS properties and

00:32:33,400 --> 00:32:38,560
this feature was supported up until I 7

00:32:36,450 --> 00:32:40,060
now even if you've never seen this

00:32:38,560 --> 00:32:41,770
before if you just look at the syntax

00:32:40,060 --> 00:32:43,360
closely you'll note that the code

00:32:41,770 --> 00:32:46,480
wrapped in the expression part is

00:32:43,360 --> 00:32:48,370
actually JavaScript so yes these as

00:32:46,480 --> 00:32:52,030
expressions are basically a way to run

00:32:48,370 --> 00:32:53,620
JavaScript in your CSS it's a great idea

00:32:52,030 --> 00:32:56,040
I'm not sure what could possibly go

00:32:53,620 --> 00:32:56,040
wrong here

00:32:56,220 --> 00:33:01,960
anyway because it's all just JavaScript

00:32:59,530 --> 00:33:04,090
it means you can use browser specific

00:33:01,960 --> 00:33:06,460
JavaScript methods as well like alert

00:33:04,090 --> 00:33:08,080
for example this example would show an

00:33:06,460 --> 00:33:11,710
alert message and that looks something

00:33:08,080 --> 00:33:15,190
like this but it also means you can use

00:33:11,710 --> 00:33:17,860
Dom related methods like window that

00:33:15,190 --> 00:33:20,440
open so you can actually open a new

00:33:17,860 --> 00:33:22,450
window with the URL of our choice using

00:33:20,440 --> 00:33:24,550
nothing but CSS and that of course could

00:33:22,450 --> 00:33:27,010
be the URL for a malicious web site like

00:33:24,550 --> 00:33:28,660
a phishing website that pretends to be

00:33:27,010 --> 00:33:29,710
the original website and then asks you

00:33:28,660 --> 00:33:31,299
for your password

00:33:29,710 --> 00:33:33,159
soon as you enter it of course the

00:33:31,299 --> 00:33:36,549
attacker has stolen your password now

00:33:33,159 --> 00:33:39,279
you may be thinking okay this really

00:33:36,549 --> 00:33:41,200
sucks but if this only affects i7 and

00:33:39,279 --> 00:33:42,940
older versions of ie then what's the big

00:33:41,200 --> 00:33:45,309
deal no one really supports those

00:33:42,940 --> 00:33:49,390
browsers anymore and not a lot of people

00:33:45,309 --> 00:33:50,950
use IE 7 well that's true but the thing

00:33:49,390 --> 00:33:53,470
is Internet Explorer has this thing

00:33:50,950 --> 00:33:56,289
called browser modes and the last four

00:33:53,470 --> 00:33:58,330
major IE releases each shipped multiple

00:33:56,289 --> 00:34:02,980
rendering engines that emulated the bugs

00:33:58,330 --> 00:34:04,600
in their older IE versions their f12

00:34:02,980 --> 00:34:09,490
developer tools allow you to easily

00:34:04,600 --> 00:34:12,220
switch between them now that's all good

00:34:09,490 --> 00:34:14,139
but it's also possible to trigger a

00:34:12,220 --> 00:34:16,450
specific rendering mode for your website

00:34:14,139 --> 00:34:18,639
by using an HTTP header or an HTML meta

00:34:16,450 --> 00:34:20,619
elements the meta tag on this slide

00:34:18,639 --> 00:34:22,210
ensures that your document is rendered

00:34:20,619 --> 00:34:24,639
in the latest available rendering mode

00:34:22,210 --> 00:34:26,859
so this means that if someone using ie

00:34:24,639 --> 00:34:29,290
11 visits your site it will render it

00:34:26,859 --> 00:34:30,820
using the OEE 11 rendering mode which as

00:34:29,290 --> 00:34:33,940
a developer is probably what you want

00:34:30,820 --> 00:34:37,470
and I tend to use ie 10 mode in IE 9 to

00:34:33,940 --> 00:34:41,050
use ie 9 mode that makes sense however

00:34:37,470 --> 00:34:44,260
this meta tag would trigger i7 mode even

00:34:41,050 --> 00:34:46,240
in ie8 or I 9 or I 10 and the thing is

00:34:44,260 --> 00:34:48,760
this mode not only emulates the known

00:34:46,240 --> 00:34:51,129
bugs that i7 used to have but it also

00:34:48,760 --> 00:34:53,109
brings back the old deprecated or even

00:34:51,129 --> 00:34:57,700
removed features that i7 used to have

00:34:53,109 --> 00:34:59,530
such as CSS expressions so our initial

00:34:57,700 --> 00:35:01,480
example it only worked in i7 and older

00:34:59,530 --> 00:35:05,080
versions can be made to work even in IE

00:35:01,480 --> 00:35:07,150
8 9 and 10 just by adding a meta tag it

00:35:05,080 --> 00:35:09,130
even works in AI 11 if the site is in

00:35:07,150 --> 00:35:11,349
the so called trust its own so that's

00:35:09,130 --> 00:35:13,080
why I did I include ie 11 in the title

00:35:11,349 --> 00:35:15,880
here because it's a little bit trickier

00:35:13,080 --> 00:35:17,530
so okay that's pretty cool but in our

00:35:15,880 --> 00:35:20,530
attack scenario from before we could

00:35:17,530 --> 00:35:22,839
only inject CSS and we couldn't inject

00:35:20,530 --> 00:35:25,390
HTML so we had no way to add the meta

00:35:22,839 --> 00:35:29,109
tag there so how can we still make use

00:35:25,390 --> 00:35:30,790
of this trick well it turns out that the

00:35:29,109 --> 00:35:33,849
attacker can just create a web page of

00:35:30,790 --> 00:35:35,890
their own hosted on their own server at

00:35:33,849 --> 00:35:38,050
the meta tag there and trigger ie7

00:35:35,890 --> 00:35:40,150
compatibility mode and then they could

00:35:38,050 --> 00:35:42,859
embed the targeted website with their

00:35:40,150 --> 00:35:46,069
CSS payload inside of an iframe

00:35:42,859 --> 00:35:47,959
in that case the documents the document

00:35:46,069 --> 00:35:50,089
mode of the parent document is inherited

00:35:47,959 --> 00:35:52,039
by the targeted website in the iframe

00:35:50,089 --> 00:35:53,359
even if the targeted website would

00:35:52,039 --> 00:35:55,849
normally use the latest available

00:35:53,359 --> 00:35:57,920
rendering mode so this allows the

00:35:55,849 --> 00:36:00,380
attacker to use CSS expressions in the

00:35:57,920 --> 00:36:01,209
context of the target website even in

00:36:00,380 --> 00:36:03,769
ie10

00:36:01,209 --> 00:36:06,140
so just to recap there's two conditions

00:36:03,769 --> 00:36:09,229
here if a target website allows you to

00:36:06,140 --> 00:36:12,109
inject arbitrary CSS and it allows

00:36:09,229 --> 00:36:14,299
framing then this enables attackers to

00:36:12,109 --> 00:36:16,099
perform cross-site scripting attacks on

00:36:14,299 --> 00:36:19,219
your site and Internet Explorer using

00:36:16,099 --> 00:36:22,219
nothing but CSS I thought that was kind

00:36:19,219 --> 00:36:24,979
of crazy now what can you do about this

00:36:22,219 --> 00:36:27,380
how can we avoid these CSS expression

00:36:24,979 --> 00:36:29,420
vulnerabilities as a web web site

00:36:27,380 --> 00:36:31,609
administrator well of course all of this

00:36:29,420 --> 00:36:33,799
can be avoided if you just sanitize all

00:36:31,609 --> 00:36:36,289
your intrusted input before injecting it

00:36:33,799 --> 00:36:38,180
into your HTML responses all you have to

00:36:36,289 --> 00:36:41,420
do is never make a single mistake and

00:36:38,180 --> 00:36:42,319
everything will be fine sure like that's

00:36:41,420 --> 00:36:44,719
ever going to happen

00:36:42,319 --> 00:36:47,359
so failing that you could use the X

00:36:44,719 --> 00:36:49,369
frame options HTTP header to prohibit

00:36:47,359 --> 00:36:50,959
framing of your web page and this makes

00:36:49,369 --> 00:36:53,269
it impossible for an attacker to easily

00:36:50,959 --> 00:36:55,819
pick your page into i7 compatibility

00:36:53,269 --> 00:36:58,940
mode and thereby enable CSS expressions

00:36:55,819 --> 00:37:00,249
and last but not least and this is

00:36:58,940 --> 00:37:02,959
another thing that really surprised me

00:37:00,249 --> 00:37:05,719
you could use the so-called html5

00:37:02,959 --> 00:37:07,430
doctype you know the short one and it

00:37:05,719 --> 00:37:09,979
turns out that Internet Explorer uses

00:37:07,430 --> 00:37:11,930
this doctype as a heuristic whenever a

00:37:09,979 --> 00:37:14,539
page is rendered using this doctype it

00:37:11,930 --> 00:37:16,369
will automatically disable CSS

00:37:14,539 --> 00:37:18,999
expressions even if your page gets

00:37:16,369 --> 00:37:21,499
framed and inherits the i7 document mode

00:37:18,999 --> 00:37:23,599
CSS expressions won't work with this

00:37:21,499 --> 00:37:25,759
doctype and this is not true for any

00:37:23,599 --> 00:37:28,430
other dog type so if you have a lot of

00:37:25,759 --> 00:37:29,809
old HTML pages on your server lying

00:37:28,430 --> 00:37:31,969
around that you don't even maintain

00:37:29,809 --> 00:37:33,769
anymore it's definitely a good idea to

00:37:31,969 --> 00:37:35,690
just do a simple search replace on them

00:37:33,769 --> 00:37:37,819
and just update their doctype to use

00:37:35,690 --> 00:37:39,499
this one it won't break anything and

00:37:37,819 --> 00:37:42,859
will actually make your site more secure

00:37:39,499 --> 00:37:44,509
in Internet Explorer so to me this is

00:37:42,859 --> 00:37:46,699
really kind of crazy to think about

00:37:44,509 --> 00:37:49,009
because you need to add an HTTP header

00:37:46,699 --> 00:37:51,999
and use a specific duck type in your

00:37:49,009 --> 00:37:56,360
HTML just to prevent people from running

00:37:51,999 --> 00:37:58,550
JavaScript in your CSS well

00:37:56,360 --> 00:38:01,940
it's a bit too much for me really but

00:37:58,550 --> 00:38:04,730
that's the Internet Explorer I guess now

00:38:01,940 --> 00:38:07,220
it's not just ie there's other browsers

00:38:04,730 --> 00:38:09,920
that used to have books with JavaScript

00:38:07,220 --> 00:38:11,510
and CSS you can kind of execute

00:38:09,920 --> 00:38:13,370
JavaScript using nothing but CSS in

00:38:11,510 --> 00:38:15,590
other browsers like old versions of

00:38:13,370 --> 00:38:17,390
Firefox used to have a bug if you assign

00:38:15,590 --> 00:38:20,150
a background image to an element and

00:38:17,390 --> 00:38:22,130
point it to a JavaScript URL the script

00:38:20,150 --> 00:38:24,110
would be executed however it would be

00:38:22,130 --> 00:38:25,850
executed in a sandbox so it was not

00:38:24,110 --> 00:38:28,010
possible to actually steal any data from

00:38:25,850 --> 00:38:30,790
the Dom or do anything really malicious

00:38:28,010 --> 00:38:33,680
but what you could do is for example

00:38:30,790 --> 00:38:36,470
trigger an infinite loop and that would

00:38:33,680 --> 00:38:38,330
essentially hang Firefox so if someone

00:38:36,470 --> 00:38:40,970
was able to inject this CSS into your

00:38:38,330 --> 00:38:43,810
page someone would try to visit the site

00:38:40,970 --> 00:38:46,640
in Firefox they would basically just get

00:38:43,810 --> 00:38:53,600
this yeah well it would look like this

00:38:46,640 --> 00:38:55,220
and then if we just crash now fire from

00:38:53,600 --> 00:38:57,110
Mozilla has since fixed the bug so this

00:38:55,220 --> 00:38:59,270
is not a problem anymore but it really

00:38:57,110 --> 00:39:02,750
makes you think about how powerful CSS

00:38:59,270 --> 00:39:04,220
is okay and because I know it's still

00:39:02,750 --> 00:39:07,970
early and I've just been talking about a

00:39:04,220 --> 00:39:11,330
lot of random different things let's do

00:39:07,970 --> 00:39:14,780
a quick CSS quiz who is up for that yeah

00:39:11,330 --> 00:39:21,020
oh yeah that's the spirit okay so what

00:39:14,780 --> 00:39:24,310
band is this I hope you like music you

00:39:21,020 --> 00:39:26,840
can just shout if you want to guess

00:39:24,310 --> 00:39:31,490
could be yeah that's the one the Black

00:39:26,840 --> 00:39:38,000
Keys yeah these guys okay next one what

00:39:31,490 --> 00:39:41,080
band is this you can just shout your

00:39:38,000 --> 00:39:41,080
guesses it's fine to guess

00:39:43,260 --> 00:39:53,060
what color is that foo fight oh that

00:39:50,700 --> 00:39:55,920
would be good no it's not that

00:39:53,060 --> 00:39:59,040
it's actually simply rat yeah it's just

00:39:55,920 --> 00:40:03,780
ref that was a terrible one okay let's

00:39:59,040 --> 00:40:05,370
try another one what band is this this

00:40:03,780 --> 00:40:17,760
requires some knowledge of the Unicode

00:40:05,370 --> 00:40:18,150
standard yeah its Radiohead okay one

00:40:17,760 --> 00:40:21,450
more

00:40:18,150 --> 00:40:27,980
what band is this I think someone said

00:40:21,450 --> 00:40:31,740
it already yeah the white stripes

00:40:27,980 --> 00:40:38,720
alright okay now let's try a song the

00:40:31,740 --> 00:40:41,820
famous pop song what song is this yep

00:40:38,720 --> 00:40:43,710
painted black by the Rolling Stones like

00:40:41,820 --> 00:40:45,480
if you have a red door and CSS you want

00:40:43,710 --> 00:40:51,300
to paint it black you can use CSS blend

00:40:45,480 --> 00:40:57,420
modes for that turns out okay what band

00:40:51,300 --> 00:41:03,950
is this yep Green Day wow that was quick

00:40:57,420 --> 00:41:03,950
respect okay let's try some more

00:41:08,460 --> 00:41:16,230
editor's yeah that one might have been a

00:41:13,470 --> 00:41:23,490
little bit too geeky okay one last one

00:41:16,230 --> 00:41:26,450
before I go what band is this yep it's

00:41:23,490 --> 00:41:26,450
the Black Eyed Peas

00:41:26,869 --> 00:41:31,230
there they are

00:41:28,380 --> 00:41:32,010
okay so with that I'd like to thank you

00:41:31,230 --> 00:41:33,599
for your attention

00:41:32,010 --> 00:41:36,080
and thanks to everyone whose research

00:41:33,599 --> 00:41:36,080
I've been using

00:41:48,800 --> 00:41:50,860

YouTube URL: https://www.youtube.com/watch?v=KPL-mA77bDo


