Title: Robin Drexler: 7 Web technologies you might not know yet | JSUnconf 2017
Publication date: 2017-06-23
Playlist: JSUnconf 2017
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:05,460
provides JavaScript and the thing is I

00:00:02,399 --> 00:00:08,040
think that asset server security is

00:00:05,460 --> 00:00:10,590
often a little bit underestimated so as

00:00:08,040 --> 00:00:13,019
soon as an attacker has the ability to

00:00:10,590 --> 00:00:14,610
alter your JavaScript your JavaScript

00:00:13,019 --> 00:00:17,279
content they can basically do anything

00:00:14,610 --> 00:00:19,949
there for example stage login pages

00:00:17,279 --> 00:00:21,480
under your domain and then wait for the

00:00:19,949 --> 00:00:24,390
user to enter the password or they can

00:00:21,480 --> 00:00:26,340
also do all the editing cuts that you

00:00:24,390 --> 00:00:28,980
can do and then send the information to

00:00:26,340 --> 00:00:30,359
their server or yeah stuff like that

00:00:28,980 --> 00:00:31,859
and I really hope we'll never see the

00:00:30,359 --> 00:00:33,899
day where somebody gets access to the

00:00:31,859 --> 00:00:36,210
Google Analytics JavaScript servers or

00:00:33,899 --> 00:00:38,129
the Facebook like buttons JavaScript

00:00:36,210 --> 00:00:40,230
shows because this stuff ones basically

00:00:38,129 --> 00:00:43,890
everywhere on the world from one hundred

00:00:40,230 --> 00:00:46,020
and millions of websites there's also a

00:00:43,890 --> 00:00:48,270
way to mitigate that at least for stuff

00:00:46,020 --> 00:00:50,460
that you feel yourself or for libraries

00:00:48,270 --> 00:00:53,489
that don't change to us this is instead

00:00:50,460 --> 00:00:58,680
of just embedding scripts on stacks you

00:00:53,489 --> 00:01:01,649
also add an integrity attribute which

00:00:58,680 --> 00:01:04,080
includes a Content hash of your your

00:01:01,649 --> 00:01:05,519
JavaScript file and this way which helps

00:01:04,080 --> 00:01:09,390
the browser to okay download download

00:01:05,519 --> 00:01:11,670
the JavaScript and if the the content of

00:01:09,390 --> 00:01:13,200
the delicate doesn't match this hash or

00:01:11,670 --> 00:01:15,509
the hashed content of the Joseph doesn't

00:01:13,200 --> 00:01:17,430
national attention please do not execute

00:01:15,509 --> 00:01:21,229
it and then you're safe the site will be

00:01:17,430 --> 00:01:23,970
broken but at least nobody will get hurt

00:01:21,229 --> 00:01:26,070
and the cool thing about this is that

00:01:23,970 --> 00:01:28,799
it's 100% backwards compatible so for

00:01:26,070 --> 00:01:31,020
browsers that do not support the exactly

00:01:28,799 --> 00:01:33,780
integrity attribute they will just

00:01:31,020 --> 00:01:38,490
download and execute JavaScript as it

00:01:33,780 --> 00:01:41,009
used to be so now that we've made pages

00:01:38,490 --> 00:01:45,270
a little bit more secure let's make them

00:01:41,009 --> 00:01:47,070
a little bit faster too and this is how

00:01:45,270 --> 00:01:50,369
to really really really really catch a

00:01:47,070 --> 00:01:52,470
cache effort so you might think that

00:01:50,369 --> 00:01:54,689
once you have a Mac a cache control

00:01:52,470 --> 00:01:58,259
max-age header which is maybe for a year

00:01:54,689 --> 00:02:01,829
that the browser will always serve that

00:01:58,259 --> 00:02:04,439
file out of the cache until the cache

00:02:01,829 --> 00:02:06,299
expires and I just important that this

00:02:04,439 --> 00:02:09,690
is not true by default and what will

00:02:06,299 --> 00:02:12,819
also show a way how to actually achieve

00:02:09,690 --> 00:02:17,049
this and I want to do this by an example

00:02:12,819 --> 00:02:19,620
our little web page with a bunch of the

00:02:17,049 --> 00:02:22,239
middle let's pretend it's 40 maybe 50

00:02:19,620 --> 00:02:23,319
and those are your measures and you are

00:02:22,239 --> 00:02:25,389
pretty sure that they will never change

00:02:23,319 --> 00:02:27,310
on the LEDs not in a year and if they

00:02:25,389 --> 00:02:29,139
change you can just change ul and then

00:02:27,310 --> 00:02:34,569
basketball castle which is more safe

00:02:29,139 --> 00:02:36,519
anyway and I would like to to go through

00:02:34,569 --> 00:02:38,560
what actually happens if the browser we

00:02:36,519 --> 00:02:40,000
pressed in one of those images for the

00:02:38,560 --> 00:02:44,319
first time and then for the second time

00:02:40,000 --> 00:02:45,879
and then explain the problem so what

00:02:44,319 --> 00:02:47,829
happens is the browser requests the

00:02:45,879 --> 00:02:50,620
image and your server will basically

00:02:47,829 --> 00:02:52,090
answer will to run it okay because the

00:02:50,620 --> 00:02:53,650
image is found and fine

00:02:52,090 --> 00:02:55,389
then there's the image content of course

00:02:53,650 --> 00:02:57,219
but there are headers in between and the

00:02:55,389 --> 00:02:59,469
for example cache control header with

00:02:57,219 --> 00:03:03,010
the next page those this is one year and

00:02:59,469 --> 00:03:05,829
second and an e-check which is the

00:03:03,010 --> 00:03:08,260
content hash of the image and then the

00:03:05,829 --> 00:03:11,500
browser will will cache this image in

00:03:08,260 --> 00:03:13,540
the cache stored in the cache and then

00:03:11,500 --> 00:03:17,169
whenever you navigate through the page

00:03:13,540 --> 00:03:19,269
will will liberate from a cache but when

00:03:17,169 --> 00:03:20,769
you do a reload which actually happens

00:03:19,269 --> 00:03:24,250
more often than you might think

00:03:20,769 --> 00:03:29,079
then it won't serve it directly from the

00:03:24,250 --> 00:03:31,750
cache but will initiate a request in

00:03:29,079 --> 00:03:34,090
your server although you specify before

00:03:31,750 --> 00:03:37,180
that the image will be fine for you it's

00:03:34,090 --> 00:03:40,109
a so called conditional request and the

00:03:37,180 --> 00:03:44,109
browser will adder is non-match tag

00:03:40,109 --> 00:03:46,509
header in this case with the with the

00:03:44,109 --> 00:03:47,979
hash key tag you have provided before

00:03:46,509 --> 00:03:51,069
and will basically ask your back-end

00:03:47,979 --> 00:03:53,680
server is the image it's still still

00:03:51,069 --> 00:03:55,509
matches this hash and this is the case

00:03:53,680 --> 00:03:56,739
because you are sure that this will be

00:03:55,509 --> 00:04:00,040
the case for the next year and therefore

00:03:56,739 --> 00:04:04,840
the browser answers with a we owe for

00:04:00,040 --> 00:04:06,669
not modified response omitting the

00:04:04,840 --> 00:04:08,859
header omitting the body so there the

00:04:06,669 --> 00:04:10,780
body has not to be transferred again but

00:04:08,859 --> 00:04:12,699
you still have to make the request with

00:04:10,780 --> 00:04:15,430
a lot of agency and if you have 40

00:04:12,699 --> 00:04:16,780
images this is done for 40 images and if

00:04:15,430 --> 00:04:19,840
you are talking about a scale like

00:04:16,780 --> 00:04:22,660
Facebook then this will result into

00:04:19,840 --> 00:04:28,120
millions and millions of unnecessary

00:04:22,660 --> 00:04:30,040
and Mozilla pioneered something that is

00:04:28,120 --> 00:04:32,470
going to fix this which is called

00:04:30,040 --> 00:04:35,620
cache-control immutable and with

00:04:32,470 --> 00:04:39,550
cache-control immutable which is a HTTP

00:04:35,620 --> 00:04:41,440
header you can tell the browser to like

00:04:39,550 --> 00:04:43,390
I am really really sure that this image

00:04:41,440 --> 00:04:45,850
will not change in the year and this is

00:04:43,390 --> 00:04:48,460
how the request then looks like for the

00:04:45,850 --> 00:04:50,230
first request to the image again we get

00:04:48,460 --> 00:04:52,060
requests and you will receive the image

00:04:50,230 --> 00:04:55,120
content again but this time the cache

00:04:52,060 --> 00:04:57,730
control in addition to the max H also

00:04:55,120 --> 00:05:00,070
has an immutable flag and when the

00:04:57,730 --> 00:05:01,030
browser or user refreshes the page the

00:05:00,070 --> 00:05:03,160
next time then

00:05:01,030 --> 00:05:05,680
the browser will simply observe it from

00:05:03,160 --> 00:05:07,870
its cache and not ask you move ever

00:05:05,680 --> 00:05:10,030
again at least for this year and I guess

00:05:07,870 --> 00:05:12,160
this is pretty cool the issue is now if

00:05:10,030 --> 00:05:13,990
you if you if you go to Chrome and want

00:05:12,160 --> 00:05:15,490
to try this then you won't have you will

00:05:13,990 --> 00:05:17,410
have a bad time because they were asked

00:05:15,490 --> 00:05:20,470
to implement this as well and then they

00:05:17,410 --> 00:05:22,600
just almost switches the entire

00:05:20,470 --> 00:05:25,030
condition to accept and you don't need

00:05:22,600 --> 00:05:31,120
be headed there it just works out of the

00:05:25,030 --> 00:05:33,010
box map which is cool as well so now we

00:05:31,120 --> 00:05:34,630
improve caching a bit but no matter how

00:05:33,010 --> 00:05:36,700
good your caching might be there's

00:05:34,630 --> 00:05:38,740
always the first unfished

00:05:36,700 --> 00:05:40,410
request to be made to a website and this

00:05:38,740 --> 00:05:44,430
is why I would like to talk about

00:05:40,410 --> 00:05:48,730
results in and especially the preload

00:05:44,430 --> 00:05:51,460
resources my example is a such totally

00:05:48,730 --> 00:05:54,669
awesome website which is a blog post

00:05:51,460 --> 00:05:56,860
about dancing pedestrians and with a

00:05:54,669 --> 00:05:58,330
with a large viewer image which which

00:05:56,860 --> 00:06:02,260
icons which I would consider pretty

00:05:58,330 --> 00:06:04,300
important for this page so yeah this is

00:06:02,260 --> 00:06:06,360
how it looks like this is maybe how we

00:06:04,300 --> 00:06:09,490
had stuff like so there's a stylesheet

00:06:06,360 --> 00:06:13,960
precisely this and a bunch of JavaScript

00:06:09,490 --> 00:06:15,970
files nothing too uncommon I'd say this

00:06:13,960 --> 00:06:17,980
is Caesar so there's only background

00:06:15,970 --> 00:06:21,160
image for yes the dancing finish you

00:06:17,980 --> 00:06:22,960
intimate the issue is what when the

00:06:21,160 --> 00:06:26,980
users on a slow Network this is how it

00:06:22,960 --> 00:06:31,210
probably will look like when they open

00:06:26,980 --> 00:06:32,530
the page so going to wait for image it's

00:06:31,210 --> 00:06:34,120
going to take a while until it appears

00:06:32,530 --> 00:06:36,100
on this tax in this case because the

00:06:34,120 --> 00:06:38,080
image is super super important

00:06:36,100 --> 00:06:41,080
and you can also see them in this

00:06:38,080 --> 00:06:43,330
waterfall graphic options and yes that

00:06:41,080 --> 00:06:45,250
the image is the last item and it is

00:06:43,330 --> 00:06:48,850
only downloaded after all these scripts

00:06:45,250 --> 00:06:51,970
and and the see is that and this is

00:06:48,850 --> 00:06:54,790
because in if you specify a background

00:06:51,970 --> 00:06:56,080
image and CSS it won't be it will only

00:06:54,790 --> 00:06:58,150
be downloaded different selector

00:06:56,080 --> 00:06:59,710
measures and the browser can only know

00:06:58,150 --> 00:07:02,470
if these selector matches if it has

00:06:59,710 --> 00:07:03,850
downloaded and parsed the disease that's

00:07:02,470 --> 00:07:05,980
entirely and also there's rip

00:07:03,850 --> 00:07:08,470
synchronous quits let's follow it so

00:07:05,980 --> 00:07:13,210
this is why the image download starts at

00:07:08,470 --> 00:07:16,360
the very very end what you can do is you

00:07:13,210 --> 00:07:18,910
can add a link tag to your have in the

00:07:16,360 --> 00:07:22,390
state the bucket a sheet with relation

00:07:18,910 --> 00:07:24,190
cetera preload and the atria is your

00:07:22,390 --> 00:07:27,970
background image and this tells the

00:07:24,190 --> 00:07:31,240
browser that you want this this asset to

00:07:27,970 --> 00:07:34,300
be downloaded as fast as possibly as

00:07:31,240 --> 00:07:37,230
fast as it can and so you don't need to

00:07:34,300 --> 00:07:40,570
wait until it finds it into InDesign and

00:07:37,230 --> 00:07:42,820
the resulting water shot what a full

00:07:40,570 --> 00:07:45,850
chart looks like this so the background

00:07:42,820 --> 00:07:48,190
image is now downloaded in parallel with

00:07:45,850 --> 00:07:50,950
all the other assets and we will get

00:07:48,190 --> 00:07:52,570
much much earlier and before and you can

00:07:50,950 --> 00:07:54,100
use it for for other things as well for

00:07:52,570 --> 00:07:57,820
JavaScript that you will load as

00:07:54,100 --> 00:08:00,730
inclusive or use for I think this keys

00:07:57,820 --> 00:08:02,590
as no name - so but if they're still

00:08:00,730 --> 00:08:04,840
under they are not enough and you really

00:08:02,590 --> 00:08:06,880
want those you there's actually a way to

00:08:04,840 --> 00:08:09,700
tell the browser even earlier about

00:08:06,880 --> 00:08:13,020
resources that you might need

00:08:09,700 --> 00:08:15,370
enter early hint so this one is a

00:08:13,020 --> 00:08:17,320
request for comment that isn't

00:08:15,370 --> 00:08:19,420
implemented in any browser yet I guess

00:08:17,320 --> 00:08:23,260
but I think it's so cool I wanted to

00:08:19,420 --> 00:08:26,110
mention it anyway but before I will dive

00:08:23,260 --> 00:08:29,350
into that there's one thing I'd like to

00:08:26,110 --> 00:08:32,229
emphasize that is that an HTTP one

00:08:29,350 --> 00:08:35,380
request doesn't necessarily result in

00:08:32,229 --> 00:08:37,360
only one response and the spec states a

00:08:35,380 --> 00:08:39,460
client must be Pichette prepare to

00:08:37,360 --> 00:08:42,640
accept one or more status responses

00:08:39,460 --> 00:08:43,900
prior to a regular response also I'd

00:08:42,640 --> 00:08:45,930
like to give an example of something

00:08:43,900 --> 00:08:48,560
that has been in place for years already

00:08:45,930 --> 00:08:52,069
to give a better understanding

00:08:48,560 --> 00:08:55,160
which is the status code 100 continue

00:08:52,069 --> 00:08:58,220
and so imagine you you are youtuber and

00:08:55,160 --> 00:09:01,100
you want to upload a large 8 gigabyte

00:08:58,220 --> 00:09:02,389
video to YouTube but you're not sure if

00:09:01,100 --> 00:09:04,370
you're allowed to so if you're still

00:09:02,389 --> 00:09:06,019
logged in what you could do is simply

00:09:04,370 --> 00:09:07,790
send the 8 gigabyte of video along with

00:09:06,019 --> 00:09:09,680
your request and then get injected and

00:09:07,790 --> 00:09:13,670
have congested the network but what you

00:09:09,680 --> 00:09:15,110
can also do is spend your your your

00:09:13,670 --> 00:09:17,389
cookie information and the content

00:09:15,110 --> 00:09:19,279
length or that the video will have a but

00:09:17,389 --> 00:09:21,800
not sent the body right away and then

00:09:19,279 --> 00:09:23,629
also the expect 100 continue header

00:09:21,800 --> 00:09:26,059
which basically tells the server that

00:09:23,629 --> 00:09:30,800
you will not send the video right away

00:09:26,059 --> 00:09:32,209
but expect its response so and if then

00:09:30,800 --> 00:09:33,920
the solar check if you'll still log in

00:09:32,209 --> 00:09:36,470
and allows you a video and if that's the

00:09:33,920 --> 00:09:38,899
case will enter with 100 and only then

00:09:36,470 --> 00:09:41,449
you will go on uploading the video which

00:09:38,899 --> 00:09:44,589
will then result in an HTTP code of 200

00:09:41,449 --> 00:09:50,629
or 201 depending on the implementation

00:09:44,589 --> 00:09:53,629
or something 400 if it fails this and

00:09:50,629 --> 00:09:54,230
this same mechanism is used in the 103

00:09:53,629 --> 00:09:57,230
early hand

00:09:54,230 --> 00:09:58,970
so when you make the request to the

00:09:57,230 --> 00:10:02,860
server then the backend server can

00:09:58,970 --> 00:10:05,899
generate your HTML by talking to API or

00:10:02,860 --> 00:10:08,629
make it or contacting the database for

00:10:05,899 --> 00:10:11,209
information but while the server is

00:10:08,629 --> 00:10:12,740
added the web server can already give

00:10:11,209 --> 00:10:14,480
you the response with the resources that

00:10:12,740 --> 00:10:16,910
you will need once the pages done

00:10:14,480 --> 00:10:19,339
generated a window that you will need

00:10:16,910 --> 00:10:21,980
when the page is generated so and once

00:10:19,339 --> 00:10:23,540
this when once this happens the image of

00:10:21,980 --> 00:10:25,939
the image will already have started

00:10:23,540 --> 00:10:29,240
downloading and will even will be there

00:10:25,939 --> 00:10:34,160
even even further faster with a really

00:10:29,240 --> 00:10:36,769
cool and we are yeah the last thing I'd

00:10:34,160 --> 00:10:41,050
like to talk about is addeventlistener

00:10:36,769 --> 00:10:44,449
or better yet the third parameter of

00:10:41,050 --> 00:10:46,600
activated nerve so who of you has seen

00:10:44,449 --> 00:10:51,980
that before

00:10:46,600 --> 00:10:54,230
quite a few so what it basically changes

00:10:51,980 --> 00:10:56,420
the propagation model or how the hell

00:10:54,230 --> 00:10:58,639
did all events you know so if you set it

00:10:56,420 --> 00:11:01,279
to false or don't set it at all then

00:10:58,639 --> 00:11:01,710
event flow basically like this look at

00:11:01,279 --> 00:11:04,800
my offer

00:11:01,710 --> 00:11:08,040
we'll be gone when you click on the

00:11:04,800 --> 00:11:10,140
target then we click target event

00:11:08,040 --> 00:11:12,240
handlers will will be called first and

00:11:10,140 --> 00:11:14,400
then the event will basically bubble up

00:11:12,240 --> 00:11:16,020
or flow up all through all the interface

00:11:14,400 --> 00:11:20,160
and the event handlers there will be

00:11:16,020 --> 00:11:22,830
cost blended the default nowadays

00:11:20,160 --> 00:11:27,060
then there's the it should set it to

00:11:22,830 --> 00:11:28,680
true then it changes to to something

00:11:27,060 --> 00:11:32,130
called capturing and this basically

00:11:28,680 --> 00:11:34,620
reverses the way events flow so the

00:11:32,130 --> 00:11:37,050
ancestors will get the events first and

00:11:34,620 --> 00:11:42,240
the inner target the click target itself

00:11:37,050 --> 00:11:44,760
will receive the event laughs so that

00:11:42,240 --> 00:11:46,800
even allows outer containers to cancel

00:11:44,760 --> 00:11:49,110
the event before it even arrives at the

00:11:46,800 --> 00:11:52,020
click target and you might now ask

00:11:49,110 --> 00:11:54,690
yourself why is why are two in place I

00:11:52,020 --> 00:11:57,810
guess is just for circling there were

00:11:54,690 --> 00:12:00,570
two teams that came up with different

00:11:57,810 --> 00:12:04,860
solutions for the same problem and now

00:12:00,570 --> 00:12:08,160
we are we have both vividly but we are

00:12:04,860 --> 00:12:10,830
pedal for bubbling as we thought ah so

00:12:08,160 --> 00:12:13,230
that this parameter actually has changed

00:12:10,830 --> 00:12:18,680
in the last year say so it's not doing

00:12:13,230 --> 00:12:21,830
it anymore it is now become an object

00:12:18,680 --> 00:12:25,530
which allows us to configure even more

00:12:21,830 --> 00:12:26,640
event handler option so the first one

00:12:25,530 --> 00:12:28,620
which is still in place of course

00:12:26,640 --> 00:12:30,870
capturing because it was most there

00:12:28,620 --> 00:12:32,430
before you'll need to be supported but

00:12:30,870 --> 00:12:34,730
there though there are also two new ones

00:12:32,430 --> 00:12:38,910
which I would like to talk about briefly

00:12:34,730 --> 00:12:42,420
the first one being one so if you set

00:12:38,910 --> 00:12:45,750
one to two then when your event handler

00:12:42,420 --> 00:12:48,030
is being called then it will be removed

00:12:45,750 --> 00:12:50,940
automatically for you so it will only be

00:12:48,030 --> 00:12:52,470
called once the parameter orbiter and

00:12:50,940 --> 00:12:53,010
that saves us from writing a lot of

00:12:52,470 --> 00:12:55,110
rollerplate

00:12:53,010 --> 00:12:58,110
for all using jquery ladies for that

00:12:55,110 --> 00:13:00,900
matter and then the another one it's a

00:12:58,110 --> 00:13:04,740
little bit more interesting i say which

00:13:00,900 --> 00:13:06,630
is passive and so there's one problem

00:13:04,740 --> 00:13:08,910
with mobile phones so have you ever

00:13:06,630 --> 00:13:11,460
tried scrolling web page this is awesome

00:13:08,910 --> 00:13:13,200
pretty janky and this is because when

00:13:11,460 --> 00:13:15,420
you when you scroll and use for example

00:13:13,200 --> 00:13:18,120
then you are as a developer

00:13:15,420 --> 00:13:21,150
able to prevent this touchmove from from

00:13:18,120 --> 00:13:24,030
happening which is good only one time

00:13:21,150 --> 00:13:26,190
because it allows to be to be flexible

00:13:24,030 --> 00:13:28,410
but is also bad because browsers need to

00:13:26,190 --> 00:13:30,750
wait until all touchmove event vendors

00:13:28,410 --> 00:13:32,250
are done with their work before they can

00:13:30,750 --> 00:13:34,920
actually paint a scroll because you

00:13:32,250 --> 00:13:37,320
could cancel it and then they brother

00:13:34,920 --> 00:13:40,830
where wouldn't be allowed to scroll and

00:13:37,320 --> 00:13:42,930
with passive if you can cast pepper true

00:13:40,830 --> 00:13:45,050
and you are promising the browser that

00:13:42,930 --> 00:13:47,790
you that you will never ever call

00:13:45,050 --> 00:13:49,380
prevent default in your codec in your

00:13:47,790 --> 00:13:52,980
event handler and that allows the

00:13:49,380 --> 00:13:55,290
browser to adjust painter scrolling and

00:13:52,980 --> 00:13:57,420
you still can complement before but it

00:13:55,290 --> 00:14:01,140
won't do anything because you promise

00:13:57,420 --> 00:14:04,920
that you won't arm one last thing is if

00:14:01,140 --> 00:14:08,250
you want to use the new version also the

00:14:04,920 --> 00:14:09,500
object version instead of the full

00:14:08,250 --> 00:14:11,760
version

00:14:09,500 --> 00:14:14,910
now you need to feature detected first

00:14:11,760 --> 00:14:16,980
because imagine you are using something

00:14:14,910 --> 00:14:19,230
like this in an unsupported browser then

00:14:16,980 --> 00:14:21,360
so you're giving the option the option

00:14:19,230 --> 00:14:22,800
object will capture false but what

00:14:21,360 --> 00:14:25,590
you're what you're actually getting is

00:14:22,800 --> 00:14:27,300
kept a true because this is an object in

00:14:25,590 --> 00:14:30,000
a JavaScript object so truthfully and

00:14:27,300 --> 00:14:32,310
therefore if you capture is true and

00:14:30,000 --> 00:14:35,880
then you're in for a surprise

00:14:32,310 --> 00:14:37,590
and the the last thing I'd like to show

00:14:35,880 --> 00:14:39,360
us how to feature the check so basically

00:14:37,590 --> 00:14:41,000
a quick and dirty way how to do it and I

00:14:39,360 --> 00:14:43,560
want to show it because it involves

00:14:41,000 --> 00:14:46,080
something I've mentioned earlier which

00:14:43,560 --> 00:14:48,180
is Gator Gator something so what you

00:14:46,080 --> 00:14:50,550
what you can do is just add an event

00:14:48,180 --> 00:14:53,520
listener to any event it doesn't ever

00:14:50,550 --> 00:14:56,040
have to be called at all and then you

00:14:53,520 --> 00:14:58,890
use capture but use the getter Center or

00:14:56,040 --> 00:15:01,410
capture and if the browser supports the

00:14:58,890 --> 00:15:03,540
object version it will ask you will ask

00:15:01,410 --> 00:15:05,280
the object that captures will force you

00:15:03,540 --> 00:15:07,800
to read it and use it and if that's the

00:15:05,280 --> 00:15:11,910
case then you know it got caught and

00:15:07,800 --> 00:15:19,080
know that it's supported or not I hope

00:15:11,910 --> 00:15:22,530
that makes sense now that's basically it

00:15:19,080 --> 00:15:24,480
already so thank you very much if you

00:15:22,530 --> 00:15:26,510
still have some that you have questions

00:15:24,480 --> 00:15:28,910
then don't hesitate these are still

00:15:26,510 --> 00:15:30,970
eight minutes or so

00:15:28,910 --> 00:15:30,970

YouTube URL: https://www.youtube.com/watch?v=4ev8zWpKhzI


