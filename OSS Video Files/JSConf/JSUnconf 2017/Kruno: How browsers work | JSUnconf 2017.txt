Title: Kruno: How browsers work | JSUnconf 2017
Publication date: 2017-06-23
Playlist: JSUnconf 2017
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:05,730
about how browsers work I always had the

00:00:03,720 --> 00:00:08,730
passion to understand the underlying

00:00:05,730 --> 00:00:11,400
principles of how things actually work

00:00:08,730 --> 00:00:14,400
and by understanding those underlying

00:00:11,400 --> 00:00:18,779
principles it helped me to develop

00:00:14,400 --> 00:00:21,600
things on top of it so recently I've

00:00:18,779 --> 00:00:24,390
decided that I don't really know how

00:00:21,600 --> 00:00:29,519
browsers work and I wanted to learn more

00:00:24,390 --> 00:00:33,719
about it so beforehand I had to have a

00:00:29,519 --> 00:00:38,390
very big disclaimer I'm not a browser

00:00:33,719 --> 00:00:41,190
engineer I'm not my work is not

00:00:38,390 --> 00:00:44,670
developing browsers but they still wants

00:00:41,190 --> 00:00:49,079
to explore what browsers are all about

00:00:44,670 --> 00:00:52,770
and how they do their magic this is just

00:00:49,079 --> 00:00:55,140
me being humble that in any there might

00:00:52,770 --> 00:01:01,530
be questions from the audience that I

00:00:55,140 --> 00:01:03,830
might not be able to answer so let's

00:01:01,530 --> 00:01:07,020
start with the browser components a

00:01:03,830 --> 00:01:10,130
browser consists of user interface layer

00:01:07,020 --> 00:01:13,590
a browser engine a rendering engine

00:01:10,130 --> 00:01:17,250
networking JavaScript interpreter UI

00:01:13,590 --> 00:01:21,390
beckoned and data persistence user

00:01:17,250 --> 00:01:24,799
interface I would define as everything

00:01:21,390 --> 00:01:28,740
which you see but you can't manipulate

00:01:24,799 --> 00:01:31,020
so the address bar the settings of your

00:01:28,740 --> 00:01:34,890
browser's you can't really manipulate it

00:01:31,020 --> 00:01:37,470
and that is a user interface user

00:01:34,890 --> 00:01:42,119
interface is working together with the

00:01:37,470 --> 00:01:47,399
UI back end and this UI back end is the

00:01:42,119 --> 00:01:50,430
design to develop basic widgets browser

00:01:47,399 --> 00:01:55,170
engine works as a mediator between user

00:01:50,430 --> 00:01:58,920
interface and the rendering engine so if

00:01:55,170 --> 00:02:02,759
you are to press refresh on your browser

00:01:58,920 --> 00:02:08,000
then the browser engine would take that

00:02:02,759 --> 00:02:13,840
command and execute it for you and

00:02:08,000 --> 00:02:18,099
refresh the webpage so rendering engine

00:02:13,840 --> 00:02:21,879
the part which parses the HTML CSS in

00:02:18,099 --> 00:02:24,730
JavaScript and based on the results of

00:02:21,879 --> 00:02:29,980
that which is being parsed it's going to

00:02:24,730 --> 00:02:33,280
display the page so networking it's like

00:02:29,980 --> 00:02:36,849
just when you have an HTTPS or an HTTP

00:02:33,280 --> 00:02:39,340
request networking layer is going to

00:02:36,849 --> 00:02:42,010
make sure that the resources are loaded

00:02:39,340 --> 00:02:44,379
JavaScript interpreter is going to

00:02:42,010 --> 00:02:47,769
interpret the JavaScript and the data

00:02:44,379 --> 00:02:51,299
persistence so here we are talking about

00:02:47,769 --> 00:02:56,470
cookies local storage index DB

00:02:51,299 --> 00:03:00,069
filesystem etc so as you can see browser

00:02:56,470 --> 00:03:02,170
consists of lots of layers and it it

00:03:00,069 --> 00:03:05,950
would be very challenging to cover every

00:03:02,170 --> 00:03:08,650
single one of them in one talk and since

00:03:05,950 --> 00:03:14,500
this is a front-end conference I'm going

00:03:08,650 --> 00:03:17,319
to focus on the rendering engine so

00:03:14,500 --> 00:03:20,200
first of all let's take a look at the

00:03:17,319 --> 00:03:22,660
basic rendering engine flow so what

00:03:20,200 --> 00:03:25,690
happens first time when you open the

00:03:22,660 --> 00:03:30,299
website and the rendering engine is

00:03:25,690 --> 00:03:33,910
being started first is being parsed then

00:03:30,299 --> 00:03:36,970
after the parsing step the tree is

00:03:33,910 --> 00:03:39,880
rendered then after that tree is

00:03:36,970 --> 00:03:43,540
rendered then something called layout is

00:03:39,880 --> 00:03:47,799
executed and depending on the browser it

00:03:43,540 --> 00:03:50,500
may be called layout or reflow and after

00:03:47,799 --> 00:03:53,139
that step comes the final step called

00:03:50,500 --> 00:04:00,250
paint which just goes out the objects

00:03:53,139 --> 00:04:02,260
with colors so right now I'm going to

00:04:00,250 --> 00:04:07,180
focus on each of those steps in detail

00:04:02,260 --> 00:04:09,790
starting first with the parsing if you

00:04:07,180 --> 00:04:11,650
were to develop the parser you would

00:04:09,790 --> 00:04:13,870
soon see that there are two types of

00:04:11,650 --> 00:04:18,840
parsers there could be a conventional

00:04:13,870 --> 00:04:21,820
parser and unconventional parser for

00:04:18,840 --> 00:04:24,849
conventional parsers you can use them to

00:04:21,820 --> 00:04:27,050
parse CSS and JavaScript but for the

00:04:24,849 --> 00:04:29,090
unconventional parsers you are

00:04:27,050 --> 00:04:31,819
of unconventional parts you are going to

00:04:29,090 --> 00:04:34,099
need to use for HTML I'm going to

00:04:31,819 --> 00:04:37,190
explain first the conventional parsers

00:04:34,099 --> 00:04:40,129
and then I'm going to explain why

00:04:37,190 --> 00:04:47,180
HTML requires an unconventional parser

00:04:40,129 --> 00:04:51,250
and how it uses it so this is parsing

00:04:47,180 --> 00:04:53,960
one on one if you were to go to

00:04:51,250 --> 00:04:56,930
Wikipedia you would soon find that

00:04:53,960 --> 00:04:58,909
parsing can be defined as translating a

00:04:56,930 --> 00:05:02,710
document into a structure that code can

00:04:58,909 --> 00:05:06,169
use so let's now focus what that means

00:05:02,710 --> 00:05:09,940
you see this picture over here it

00:05:06,169 --> 00:05:13,419
consists of a mathematical equation and

00:05:09,940 --> 00:05:16,129
we need to parse somehow parse this

00:05:13,419 --> 00:05:22,210
equation to a certain tree which our

00:05:16,129 --> 00:05:27,949
code can later on use so the parsing

00:05:22,210 --> 00:05:31,900
actually consists of a tooth like

00:05:27,949 --> 00:05:35,889
parsing consists of grammar and grammar

00:05:31,900 --> 00:05:39,680
entails vocabulary and syntax rules

00:05:35,889 --> 00:05:43,400
vocabulary is like in our language we

00:05:39,680 --> 00:05:48,139
have ABCD or more specifically we have

00:05:43,400 --> 00:05:50,000
words and here you have instead of the

00:05:48,139 --> 00:05:53,110
words you have numbers for this

00:05:50,000 --> 00:05:55,940
particular case and you have these

00:05:53,110 --> 00:06:00,379
mathematical symbols like plus and the

00:05:55,940 --> 00:06:03,379
multiplication sign so those those

00:06:00,379 --> 00:06:07,090
numbers and those symbols are going to

00:06:03,379 --> 00:06:10,699
be our vocabulary syntax rules is

00:06:07,090 --> 00:06:13,759
basically how those integers so

00:06:10,699 --> 00:06:18,289
basically how vocabulary interacts so

00:06:13,759 --> 00:06:21,289
you know that the multiplication sign

00:06:18,289 --> 00:06:23,900
can be only be between two integers

00:06:21,289 --> 00:06:25,400
floats or whatever but in this specific

00:06:23,900 --> 00:06:29,629
case let's focus on it being just

00:06:25,400 --> 00:06:32,120
integers and plus can be before an

00:06:29,629 --> 00:06:36,919
integer or an author an integer or

00:06:32,120 --> 00:06:39,710
between two injured integers and once we

00:06:36,919 --> 00:06:40,500
take a look and how that's being parsed

00:06:39,710 --> 00:06:45,510
we can see

00:06:40,500 --> 00:06:48,600
that that plus is that Gaza is at the

00:06:45,510 --> 00:06:51,140
top at left side of the three you can

00:06:48,600 --> 00:06:53,340
see one on the right side you see

00:06:51,140 --> 00:06:58,200
multiplication sign together with

00:06:53,340 --> 00:07:00,630
numbers two and three and you can feed

00:06:58,200 --> 00:07:02,850
this to a certain code which is going to

00:07:00,630 --> 00:07:08,640
take advantage of it and generate some

00:07:02,850 --> 00:07:12,380
kind of result so let's go a little bit

00:07:08,640 --> 00:07:15,680
deeper into it so parsing contains

00:07:12,380 --> 00:07:19,410
lexical analysis and syntax analysis

00:07:15,680 --> 00:07:23,930
lexical analysis is usually being also

00:07:19,410 --> 00:07:27,960
called lectures or tokenizer z' it is

00:07:23,930 --> 00:07:31,470
the that part of parser is basically

00:07:27,960 --> 00:07:35,400
creating the tokens and tokens are the

00:07:31,470 --> 00:07:41,150
smallest elements that a parser can use

00:07:35,400 --> 00:07:44,580
if here and the second thing is parsers

00:07:41,150 --> 00:07:48,630
parses apply the syntax rules here we

00:07:44,580 --> 00:07:51,870
can see a diagram where we have a lexer

00:07:48,630 --> 00:07:55,460
and parser parser is going to constantly

00:07:51,870 --> 00:07:58,380
request tokens from the lecture and

00:07:55,460 --> 00:08:02,310
lecture is going to reply with with

00:07:58,380 --> 00:08:05,550
sending the tokens parser is always

00:08:02,310 --> 00:08:07,770
going to try to use the token based on

00:08:05,550 --> 00:08:10,380
the syntax rules but if that is not

00:08:07,770 --> 00:08:13,860
possible it is going to store the token

00:08:10,380 --> 00:08:17,810
and at later time is going to see if

00:08:13,860 --> 00:08:17,810
that token can be matched to something

00:08:18,470 --> 00:08:25,800
so you could go the route of developing

00:08:22,229 --> 00:08:29,490
your own parsers and that might be a

00:08:25,800 --> 00:08:32,280
good thing to do but usually there are

00:08:29,490 --> 00:08:36,120
ready available parsers like flex legs

00:08:32,280 --> 00:08:38,099
yak and BISM and for these parsers you

00:08:36,120 --> 00:08:42,320
had to just feed it with your grammar

00:08:38,099 --> 00:08:45,540
and they are going to work using it and

00:08:42,320 --> 00:08:48,930
the funny thing is even WebKit is using

00:08:45,540 --> 00:08:52,800
two of these parsers WebKit is using a

00:08:48,930 --> 00:08:55,040
flex four lecture as lecture and bison

00:08:52,800 --> 00:08:55,040
as a

00:08:56,570 --> 00:09:04,710
so right now let's move to the

00:09:00,120 --> 00:09:07,520
unconventional parsers I said that for

00:09:04,710 --> 00:09:12,120
the conventional parses you could use

00:09:07,520 --> 00:09:16,410
them for parsing CSS and JavaScript but

00:09:12,120 --> 00:09:19,440
for but for HTML that doesn't work and

00:09:16,410 --> 00:09:23,970
it doesn't work because hTML is not

00:09:19,440 --> 00:09:29,160
context-free grammar to be to put it in

00:09:23,970 --> 00:09:32,840
layman's terms that means that as you

00:09:29,160 --> 00:09:37,290
are trying as you're parsing the code

00:09:32,840 --> 00:09:39,930
the HTML the h the browser is going to

00:09:37,290 --> 00:09:41,060
try to immediately recover from any

00:09:39,930 --> 00:09:43,710
[Music]

00:09:41,060 --> 00:09:47,820
errors that might occur on the way and

00:09:43,710 --> 00:09:50,160
here we can see two images one image is

00:09:47,820 --> 00:09:53,640
displaying a perfectly valid html5

00:09:50,160 --> 00:09:56,580
document and the other one is not

00:09:53,640 --> 00:09:59,430
displaying a no-bail html5 document you

00:09:56,580 --> 00:10:01,860
can see that on the right picture the

00:09:59,430 --> 00:10:05,310
closing text for paragraphs and div tag

00:10:01,860 --> 00:10:07,380
is missing but even because those two

00:10:05,310 --> 00:10:09,600
tags are missing those cool two closing

00:10:07,380 --> 00:10:13,590
tags are missing the browser is still

00:10:09,600 --> 00:10:17,300
going to render the render it correctly

00:10:13,590 --> 00:10:20,460
how it's going to do that exactly it is

00:10:17,300 --> 00:10:23,850
automatically going to add closing tags

00:10:20,460 --> 00:10:26,220
for the paragraphs and the closing tag

00:10:23,850 --> 00:10:29,130
for the DES and then you're going to get

00:10:26,220 --> 00:10:33,170
your page rendered because of that you

00:10:29,130 --> 00:10:37,890
can't use regular conventional parsers

00:10:33,170 --> 00:10:39,720
so for there's still even though you're

00:10:37,890 --> 00:10:42,020
not using conventional parsers they

00:10:39,720 --> 00:10:44,940
still have to be some kind of rules and

00:10:42,020 --> 00:10:48,140
those rules are defined by the HTML

00:10:44,940 --> 00:10:54,360
document type definition defined by the

00:10:48,140 --> 00:10:57,780
World Wide Web Consortium this is one

00:10:54,360 --> 00:11:01,320
more rule or one more example where you

00:10:57,780 --> 00:11:05,340
might go so this example is obviously

00:11:01,320 --> 00:11:06,340
going to work but if you try to have

00:11:05,340 --> 00:11:08,770
maximum

00:11:06,340 --> 00:11:11,710
of month of text at some point browser

00:11:08,770 --> 00:11:14,830
is just going to ignore them there is

00:11:11,710 --> 00:11:18,840
one website which has approximately 1000

00:11:14,830 --> 00:11:22,390
and 500 texts going one after each other

00:11:18,840 --> 00:11:24,910
which are all of the same kind and even

00:11:22,390 --> 00:11:30,790
though that website has so many text it

00:11:24,910 --> 00:11:35,320
is displaying perfectly normally so how

00:11:30,790 --> 00:11:39,460
do you parse the HTML document is fairly

00:11:35,320 --> 00:11:42,220
simple you have you have your valid

00:11:39,460 --> 00:11:44,920
html5 document and if you remember the

00:11:42,220 --> 00:11:48,850
principle from the conventional parsers

00:11:44,920 --> 00:11:50,860
the same thing can be applied here so

00:11:48,850 --> 00:11:52,779
here the only difference would be that

00:11:50,860 --> 00:11:55,779
your first look going to try to look for

00:11:52,779 --> 00:11:57,640
the opening tag and then you are going

00:11:55,779 --> 00:11:59,860
to try to match that tag with the

00:11:57,640 --> 00:12:03,190
closing tag then that's how you're going

00:11:59,860 --> 00:12:06,940
to slowly and incrementally build your

00:12:03,190 --> 00:12:13,210
three which you later can use to render

00:12:06,940 --> 00:12:16,710
things so right now let's move on to the

00:12:13,210 --> 00:12:19,510
next step which is called render tree

00:12:16,710 --> 00:12:22,240
render tree is generated while the Dom

00:12:19,510 --> 00:12:24,520
tree is constructed so on one side you

00:12:22,240 --> 00:12:26,770
have done 3 which is being constructed

00:12:24,520 --> 00:12:29,200
and at the same time rendering of the

00:12:26,770 --> 00:12:31,750
render tree of render 3 is being

00:12:29,200 --> 00:12:35,170
constructed so render tree is basically

00:12:31,750 --> 00:12:39,370
visual elements and in in which order

00:12:35,170 --> 00:12:42,010
they need to be displayed again based on

00:12:39,370 --> 00:12:44,050
the browser you might have the

00:12:42,010 --> 00:12:46,060
terminology might be different for

00:12:44,050 --> 00:12:48,610
example it might be called the renderer

00:12:46,060 --> 00:12:50,800
or it might be called render objects

00:12:48,610 --> 00:12:54,610
those are the small elements which this

00:12:50,800 --> 00:12:56,920
3 consists of and one important thing to

00:12:54,610 --> 00:12:58,630
note is that those render objects those

00:12:56,920 --> 00:13:03,570
smallest elements are basically

00:12:58,630 --> 00:13:07,180
rectangles now when you go and try to

00:13:03,570 --> 00:13:09,160
render it down and you try to

00:13:07,180 --> 00:13:11,440
investigate hope codes how it works

00:13:09,160 --> 00:13:15,310
at some point you are going to stumble

00:13:11,440 --> 00:13:19,790
upon a switch case which based on the

00:13:15,310 --> 00:13:22,459
whether it is whether it is render not

00:13:19,790 --> 00:13:24,679
based on the definition of Dom element

00:13:22,459 --> 00:13:27,529
it's going to render it as render non

00:13:24,679 --> 00:13:31,759
render a line rendered block inline

00:13:27,529 --> 00:13:36,410
block or list item now let's move on to

00:13:31,759 --> 00:13:40,669
the layout so layout or also called

00:13:36,410 --> 00:13:44,089
reflow in Mozilla browsers calculates

00:13:40,669 --> 00:13:46,279
position and the size so most of the

00:13:44,089 --> 00:13:48,709
times it is possibly to calculate every

00:13:46,279 --> 00:13:50,629
single thing in one path but in the off

00:13:48,709 --> 00:13:53,480
chance that it is not possible then it

00:13:50,629 --> 00:13:57,169
is going to do multiple times and try to

00:13:53,480 --> 00:13:59,959
calculate the size and position of each

00:13:57,169 --> 00:14:02,809
and every element it is a recursive

00:13:59,959 --> 00:14:08,419
process and usually it begins as the

00:14:02,809 --> 00:14:10,910
root object which is in HTML tag now it

00:14:08,419 --> 00:14:15,290
also has something called dirty bed

00:14:10,910 --> 00:14:19,119
system this system make sure that you

00:14:15,290 --> 00:14:22,040
don't have to run to lay out on each

00:14:19,119 --> 00:14:29,149
browser interaction so let's say you

00:14:22,040 --> 00:14:32,509
just you just modify - no - nodes - Dom

00:14:29,149 --> 00:14:34,699
elements a way inside of the tree there

00:14:32,509 --> 00:14:38,299
is no need to re render the whole tree

00:14:34,699 --> 00:14:44,179
you could just rear-entry layout those

00:14:38,299 --> 00:14:47,059
two and not worry about the rest but it

00:14:44,179 --> 00:14:51,289
is so there is also this global and

00:14:47,059 --> 00:14:56,029
incremental layout global layout is when

00:14:51,289 --> 00:15:00,079
you're doing a resize of your browser or

00:14:56,029 --> 00:15:02,600
you apply new font then the whole layout

00:15:00,079 --> 00:15:06,259
is going to be executed through the

00:15:02,600 --> 00:15:09,379
whole page and the incremental layout is

00:15:06,259 --> 00:15:10,939
basically using the dirty bit system to

00:15:09,379 --> 00:15:17,139
render some of the things but not

00:15:10,939 --> 00:15:21,739
everything so here I have a video about

00:15:17,139 --> 00:15:28,220
get quarry flow so as you can notice in

00:15:21,739 --> 00:15:30,049
Mozilla it's called reflow this is this

00:15:28,220 --> 00:15:32,839
is just showing you how to layout

00:15:30,049 --> 00:15:34,040
process happens if you see those

00:15:32,839 --> 00:15:36,710
rectangles

00:15:34,040 --> 00:15:40,790
and if you paid attention those render

00:15:36,710 --> 00:15:42,980
objects are these rectangles and layout

00:15:40,790 --> 00:15:45,020
process just calculates where each step

00:15:42,980 --> 00:15:49,820
where each rectangle needs to be

00:15:45,020 --> 00:15:53,110
positioned this was done by some

00:15:49,820 --> 00:16:00,440
Japanese hackers or something like that

00:15:53,110 --> 00:16:02,600
and afterwards afterwards they share

00:16:00,440 --> 00:16:06,430
this and it was very beneficial in

00:16:02,600 --> 00:16:06,430
understanding how browsers actually work

00:16:08,920 --> 00:16:14,870
the final step is painting so you saw

00:16:12,920 --> 00:16:17,390
those rectangles you just now need to

00:16:14,870 --> 00:16:20,840
fill them with the color and that's what

00:16:17,390 --> 00:16:23,740
the paint layer is doing paint is going

00:16:20,840 --> 00:16:27,140
through the render tree and basically

00:16:23,740 --> 00:16:32,210
executing recursively the paint method

00:16:27,140 --> 00:16:36,170
which displays things on the page again

00:16:32,210 --> 00:16:40,340
like with the layout there is a global

00:16:36,170 --> 00:16:42,350
and incremental painting global if it

00:16:40,340 --> 00:16:44,390
good there is global painting needed

00:16:42,350 --> 00:16:46,700
then the whole page is going to be

00:16:44,390 --> 00:16:49,250
repainted and incremental painting is

00:16:46,700 --> 00:16:51,680
using the same dirty bit system so only

00:16:49,250 --> 00:16:56,270
some crucial parts are being repainted

00:16:51,680 --> 00:16:58,550
while other are being as it is the

00:16:56,270 --> 00:17:00,800
painting order II is usually background

00:16:58,550 --> 00:17:03,830
color than background image and bored a

00:17:00,800 --> 00:17:07,130
border and children and finally outline

00:17:03,830 --> 00:17:08,959
if you ever had a div which has a

00:17:07,130 --> 00:17:11,450
background color and then they cross

00:17:08,959 --> 00:17:14,480
image and let's say the background image

00:17:11,450 --> 00:17:18,200
was particularly big you might have seen

00:17:14,480 --> 00:17:19,820
that the first thing is going to be the

00:17:18,200 --> 00:17:26,270
background color and other words you're

00:17:19,820 --> 00:17:29,870
going to get your image now I know that

00:17:26,270 --> 00:17:33,590
this thought was very basic but I I

00:17:29,870 --> 00:17:36,170
wanted to do it basic and understand the

00:17:33,590 --> 00:17:39,470
principles behind of the web browsers

00:17:36,170 --> 00:17:42,170
and I would like to impart few words of

00:17:39,470 --> 00:17:45,280
wisdom which is I hear and I forget I

00:17:42,170 --> 00:17:47,120
see and I remember I do and I understand

00:17:45,280 --> 00:17:50,330
what it was

00:17:47,120 --> 00:17:52,760
by Confucius and it basically means you

00:17:50,330 --> 00:17:56,950
really understand something when you try

00:17:52,760 --> 00:18:01,130
to build something so I would try to

00:17:56,950 --> 00:18:03,919
invite you if you have the time the

00:18:01,130 --> 00:18:06,620
resolve and the interest develop your

00:18:03,919 --> 00:18:08,929
own browser rendering engine because

00:18:06,620 --> 00:18:10,970
only then you're going to truly

00:18:08,929 --> 00:18:13,460
understand right now you saw this

00:18:10,970 --> 00:18:17,029
presentation and you might remember it

00:18:13,460 --> 00:18:19,789
but until you get dirty get your hands

00:18:17,029 --> 00:18:23,260
dirty you're not going to understand the

00:18:19,789 --> 00:18:26,840
peculiar intricacies of the browser if

00:18:23,260 --> 00:18:29,029
you were to go that step and you want to

00:18:26,840 --> 00:18:31,399
build your own browser rendering engine

00:18:29,029 --> 00:18:33,950
account two very interesting links that

00:18:31,399 --> 00:18:39,440
I decided to share the first one is how

00:18:33,950 --> 00:18:43,429
browsers work it is it is basically what

00:18:39,440 --> 00:18:47,090
this talk is about Barry have a woman

00:18:43,429 --> 00:18:51,890
who decides to do the very same thing as

00:18:47,090 --> 00:18:54,460
I did but way before me and she took the

00:18:51,890 --> 00:18:56,289
source code of Chrome and tried to see

00:18:54,460 --> 00:18:59,090
how chrome works

00:18:56,289 --> 00:19:02,299
this presentation was based on her work

00:18:59,090 --> 00:19:06,100
and later on I stumbled upon about let's

00:19:02,299 --> 00:19:10,010
build a browser engine a person from

00:19:06,100 --> 00:19:12,950
Mozilla team decided that just working

00:19:10,010 --> 00:19:16,149
on on a browser as a part of the big

00:19:12,950 --> 00:19:19,429
unit is not enough and he decides

00:19:16,149 --> 00:19:21,409
through the small seven part series to

00:19:19,429 --> 00:19:23,539
develop a toy rendering engine

00:19:21,409 --> 00:19:26,840
particularly because he wanted to see

00:19:23,539 --> 00:19:30,950
how it is to develop it on your own he

00:19:26,840 --> 00:19:32,720
managed to in approximately thousand

00:19:30,950 --> 00:19:35,659
lines of code to develop the rendering

00:19:32,720 --> 00:19:42,350
engine which is able to display basic

00:19:35,659 --> 00:19:43,970
stuff yeah I mean this is the the end of

00:19:42,350 --> 00:19:48,830
the presentation if you want to follow

00:19:43,970 --> 00:19:51,669
me on Twitter - my username is here and

00:19:48,830 --> 00:19:51,669
that's

00:19:56,390 --> 00:20:00,620

YouTube URL: https://www.youtube.com/watch?v=0IsQqJ7pwhw


