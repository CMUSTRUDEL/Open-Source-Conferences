Title: Henrik Wenz: Start building server rendered web apps using next.js | JSUnconf 2017
Publication date: 2017-06-26
Playlist: JSUnconf 2017
Description: 
	
Captions: 
	00:00:00,030 --> 00:00:05,430
my name is Henrik and today I want to

00:00:02,520 --> 00:00:08,880
talk to you about server-side rendering

00:00:05,430 --> 00:00:11,480
and why we broke the web first I'll

00:00:08,880 --> 00:00:14,730
introduce you to the problem with

00:00:11,480 --> 00:00:19,260
client-side rendering only and after

00:00:14,730 --> 00:00:23,189
that I'll show you a solution and how I

00:00:19,260 --> 00:00:27,080
solve the problem using next share which

00:00:23,189 --> 00:00:29,939
is a framework that really solve

00:00:27,080 --> 00:00:36,540
server-side rendering and client-side

00:00:29,939 --> 00:00:39,809
rendering really well so what's wrong

00:00:36,540 --> 00:00:44,969
with client rendered Web Apps in the

00:00:39,809 --> 00:00:48,780
first way when a user comes on on to my

00:00:44,969 --> 00:00:52,320
app the app responds with an empty HTML

00:00:48,780 --> 00:00:55,530
page after then after that they'll

00:00:52,320 --> 00:00:59,969
download like 10 gigabytes of my awesome

00:00:55,530 --> 00:01:03,390
JSF 10 to 20 seconds later the user sees

00:00:59,969 --> 00:01:06,320
the first thing on my page this is like

00:01:03,390 --> 00:01:12,810
the pattern we use when we're building

00:01:06,320 --> 00:01:15,060
client only web and this has in my

00:01:12,810 --> 00:01:17,729
opinion many problems that are still not

00:01:15,060 --> 00:01:20,070
really solved most people say okay you

00:01:17,729 --> 00:01:23,400
don't need server-side rendering because

00:01:20,070 --> 00:01:24,900
Google is able to index our page on the

00:01:23,400 --> 00:01:28,740
client side they use something like

00:01:24,900 --> 00:01:31,829
phantom shares and can in index our page

00:01:28,740 --> 00:01:34,200
so search engine optimization is not any

00:01:31,829 --> 00:01:37,380
more topic but there are other user

00:01:34,200 --> 00:01:41,759
groups on the internet that depend on

00:01:37,380 --> 00:01:45,659
your server serving HTML and not some

00:01:41,759 --> 00:01:50,009
cryptic JavaScript code one example is

00:01:45,659 --> 00:01:52,860
for example Open Graph many services who

00:01:50,009 --> 00:01:58,350
want to provide Rich Snippets to your

00:01:52,860 --> 00:02:00,840
page what's app guide Facebook and they

00:01:58,350 --> 00:02:04,890
need Open Graph text and only some of

00:02:00,840 --> 00:02:07,590
them are able to index these Open Graph

00:02:04,890 --> 00:02:08,459
text or the title of your page on the

00:02:07,590 --> 00:02:12,480
client side

00:02:08,459 --> 00:02:15,060
so saying Google saw solves the problem

00:02:12,480 --> 00:02:19,050
server-side rendering is not really true

00:02:15,060 --> 00:02:20,790
but we in our community decided to say

00:02:19,050 --> 00:02:23,670
okay server-side rendering is a bit

00:02:20,790 --> 00:02:27,480
complex so Google says we can index out

00:02:23,670 --> 00:02:30,959
your page so we drop this part

00:02:27,480 --> 00:02:35,910
many of us are ignoring this and I did

00:02:30,959 --> 00:02:39,890
many years so my solution to that is

00:02:35,910 --> 00:02:43,500
next year next year is the minimalistic

00:02:39,890 --> 00:02:45,690
JavaScript framework that solves in the

00:02:43,500 --> 00:02:50,569
first place place server-side rendering

00:02:45,690 --> 00:02:57,780
and by using a universal approach and

00:02:50,569 --> 00:03:01,920
react so if we use next year what what

00:02:57,780 --> 00:03:04,799
do we get out of the box the first thing

00:03:01,920 --> 00:03:07,650
of course is server-side rendering but

00:03:04,799 --> 00:03:10,349
only code listed but also code splitting

00:03:07,650 --> 00:03:13,170
is a big issue in that part like how do

00:03:10,349 --> 00:03:17,489
we split our code on the different

00:03:13,170 --> 00:03:19,980
routes or sub pages of our app so the

00:03:17,489 --> 00:03:24,180
client doesn't have to download the

00:03:19,980 --> 00:03:27,440
entire fjf on the first request the

00:03:24,180 --> 00:03:31,980
second has a third thing it solves our

00:03:27,440 --> 00:03:34,859
client-side page transitions if we have

00:03:31,980 --> 00:03:37,500
multiple routes in our app and we do a

00:03:34,859 --> 00:03:41,700
normal page transition to another route

00:03:37,500 --> 00:03:44,220
we are losing state for example in redux

00:03:41,700 --> 00:03:47,010
when you navigate to another route the

00:03:44,220 --> 00:03:49,500
entire page gets loaded again and our

00:03:47,010 --> 00:03:53,010
redux tour will be empty so we need to

00:03:49,500 --> 00:03:55,290
reinitialize it if we have client-side

00:03:53,010 --> 00:04:00,060
page transitions this is not an issue

00:03:55,290 --> 00:04:02,400
anymore I think the first big client

00:04:00,060 --> 00:04:07,019
side page transition was something like

00:04:02,400 --> 00:04:09,870
towable links in Rio in Ruby but I'm not

00:04:07,019 --> 00:04:14,430
really sure and this is a bit different

00:04:09,870 --> 00:04:18,299
and we get out of the box a build system

00:04:14,430 --> 00:04:22,200
we don't have to read tons of web pack

00:04:18,299 --> 00:04:23,620
Doc's and guard dogs and needs two weeks

00:04:22,200 --> 00:04:26,770
to

00:04:23,620 --> 00:04:27,909
get started with our project we can get

00:04:26,770 --> 00:04:31,960
started immediately

00:04:27,909 --> 00:04:35,080
but if we want to extend this build

00:04:31,960 --> 00:04:37,360
system we still can add our own web pack

00:04:35,080 --> 00:04:39,879
loader so it's really extendable and it

00:04:37,360 --> 00:04:43,300
works pretty well the build system is

00:04:39,879 --> 00:04:47,199
based on web pack - so we get free

00:04:43,300 --> 00:04:50,919
shaking out of the box which solves the

00:04:47,199 --> 00:04:53,909
problems of two big bundles in addition

00:04:50,919 --> 00:04:57,430
to that they come with their own CSS

00:04:53,909 --> 00:05:03,159
solution which is similar to style

00:04:57,430 --> 00:05:05,889
components but um works a bit better

00:05:03,159 --> 00:05:08,620
with server-side rendering but you can

00:05:05,889 --> 00:05:18,159
still disable the solution and use your

00:05:08,620 --> 00:05:24,240
own favorite CSS solution so guys let's

00:05:18,159 --> 00:05:24,240
do some live coding and girls and

00:05:32,090 --> 00:05:38,870
oh here we are so we want to start from

00:05:37,100 --> 00:05:42,560
scratch because I want to show to you

00:05:38,870 --> 00:05:47,050
that how fast you can get started using

00:05:42,560 --> 00:05:51,530
this kind of approach so we starting by

00:05:47,050 --> 00:05:54,560
yarn initialize you can use NPM of

00:05:51,530 --> 00:05:59,410
course and so now we have the package

00:05:54,560 --> 00:06:05,930
Jason created and now we need to install

00:05:59,410 --> 00:06:09,080
our dependencies at first we install the

00:06:05,930 --> 00:06:12,979
next beta version next has evolved in

00:06:09,080 --> 00:06:16,370
the past month and they have are close

00:06:12,979 --> 00:06:19,010
to the 2.0 version which we already use

00:06:16,370 --> 00:06:23,020
in production but it's still in beta so

00:06:19,010 --> 00:06:26,389
things may change then we need react

00:06:23,020 --> 00:06:28,729
next could have bundled react with they

00:06:26,389 --> 00:06:31,550
are packaged but the cool thing having

00:06:28,729 --> 00:06:34,100
react as a peer dependency is you can

00:06:31,550 --> 00:06:38,180
use react if you want or something

00:06:34,100 --> 00:06:42,440
similar to react and and last but not

00:06:38,180 --> 00:06:45,520
least we use I install just for our demo

00:06:42,440 --> 00:06:48,200
isomorphic such a ponytail would

00:06:45,520 --> 00:06:54,110
probably a better way but for simplicity

00:06:48,200 --> 00:06:56,750
reasons I use this so and now everything

00:06:54,110 --> 00:07:01,490
that's downloaded hopefully the internet

00:06:56,750 --> 00:07:03,500
will do everything cool we are done we

00:07:01,490 --> 00:07:11,250
have installed everything we need let's

00:07:03,500 --> 00:07:14,940
start coding so

00:07:11,250 --> 00:07:17,460
we have a package.json file next year in

00:07:14,940 --> 00:07:20,270
order to get started really quick we

00:07:17,460 --> 00:07:24,450
don't need an entry fire oh my god just

00:07:20,270 --> 00:07:30,720
say that you can't see anything so here

00:07:24,450 --> 00:07:33,720
we go and so we can drop the main entry

00:07:30,720 --> 00:07:40,260
point next year we'll add this for us

00:07:33,720 --> 00:07:45,440
but later we can do it on our own way so

00:07:40,260 --> 00:07:48,900
we are still flexible on this let's add

00:07:45,440 --> 00:07:51,030
two tasks to get started I think it's

00:07:48,900 --> 00:07:57,020
always a good convention to like add

00:07:51,030 --> 00:07:57,020
some script so first we add a desktop

00:07:57,590 --> 00:08:07,890
careful this getting really complicated

00:08:01,669 --> 00:08:10,830
done so and this allows us to start a

00:08:07,890 --> 00:08:14,730
death task which will do life reloading

00:08:10,830 --> 00:08:17,280
code splitting and we'll compile our app

00:08:14,730 --> 00:08:20,250
in a really performant way so if we have

00:08:17,280 --> 00:08:22,200
a really big app we won't have to wait

00:08:20,250 --> 00:08:29,240
like two minutes until the bundle is

00:08:22,200 --> 00:08:29,240
filled next let's add production tasks

00:08:30,260 --> 00:08:36,479
we combine the build tasks and the

00:08:33,770 --> 00:08:39,860
starting of the server and one task this

00:08:36,479 --> 00:08:39,860
is just for this demo

00:08:45,329 --> 00:08:56,740
Wow complicated so now next year f has

00:08:53,199 --> 00:09:00,279
one important convention they introduced

00:08:56,740 --> 00:09:02,170
a new component if you're familiar with

00:09:00,279 --> 00:09:04,689
react you already probably know

00:09:02,170 --> 00:09:08,290
functional components higher-order

00:09:04,689 --> 00:09:11,949
components dumb components and next yes

00:09:08,290 --> 00:09:14,860
it's just one more component it's called

00:09:11,949 --> 00:09:17,730
top level component the top level

00:09:14,860 --> 00:09:23,679
component is the component in our app

00:09:17,730 --> 00:09:27,339
that gets initialized at the top level

00:09:23,679 --> 00:09:29,759
so if we call a route this component is

00:09:27,339 --> 00:09:37,800
the first component in the hora

00:09:29,759 --> 00:09:44,410
we call these component pages okay

00:09:37,800 --> 00:09:46,889
so let's create an index page here you

00:09:44,410 --> 00:09:46,889
can see it

00:09:48,770 --> 00:09:50,800
Oh

00:10:05,560 --> 00:10:12,430
so we are important react and for

00:10:10,269 --> 00:10:16,379
simplicity reasons we use like a

00:10:12,430 --> 00:10:30,430
functional component this component

00:10:16,379 --> 00:10:35,889
returns our knives hello world let's

00:10:30,430 --> 00:10:38,079
start the dev server we are calling our

00:10:35,889 --> 00:10:40,360
stripped tasks from the package Jason

00:10:38,079 --> 00:10:45,759
you could call next if you have it

00:10:40,360 --> 00:10:47,769
installed globally please ignore the

00:10:45,759 --> 00:10:52,019
depo creation warning it's a web pack to

00:10:47,769 --> 00:10:52,019
issue there's nothing to do with next

00:10:55,949 --> 00:11:02,139
next listens on port 3000 for default

00:10:59,559 --> 00:11:06,430
that you can change it if you want so

00:11:02,139 --> 00:11:07,870
awesome we got our first page nothing

00:11:06,430 --> 00:11:10,480
special you think

00:11:07,870 --> 00:11:15,430
but this page actually rendered on the

00:11:10,480 --> 00:11:17,860
server the initial request was rendered

00:11:15,430 --> 00:11:20,129
on the service we disable JavaScript we

00:11:17,860 --> 00:11:22,720
get the same result

00:11:20,129 --> 00:11:25,329
nothing special react Doom can be

00:11:22,720 --> 00:11:30,160
rendered on the server so why is this

00:11:25,329 --> 00:11:34,180
guy telling us so let's create a second

00:11:30,160 --> 00:11:36,160
route let's call it cookie actually what

00:11:34,180 --> 00:11:39,670
I want to build is like a little app

00:11:36,160 --> 00:11:41,889
that and shows you some cookie messages

00:11:39,670 --> 00:11:47,290
from from these fortune cookies if you

00:11:41,889 --> 00:11:50,370
know them so we create a new route

00:11:47,290 --> 00:11:50,370
called cookie

00:11:59,279 --> 00:12:02,550
all right

00:12:02,650 --> 00:12:11,940
let's check if it worked that is if we

00:12:09,280 --> 00:12:13,900
navigate between these two pages and

00:12:11,940 --> 00:12:16,570
we're losing states

00:12:13,900 --> 00:12:19,390
nothing is special about that but next

00:12:16,570 --> 00:12:21,370
year has helped us here the first cool

00:12:19,390 --> 00:12:25,000
thing about it they have their own

00:12:21,370 --> 00:12:27,520
router probably you'll think why don't

00:12:25,000 --> 00:12:30,850
they use react router for this that is

00:12:27,520 --> 00:12:34,030
awesome but when you do server-side

00:12:30,850 --> 00:12:35,220
rendering react router for doesn't solve

00:12:34,030 --> 00:12:38,410
all your issues

00:12:35,220 --> 00:12:41,770
next is build so it doesn't need to know

00:12:38,410 --> 00:12:44,400
all routes in advance and in react

00:12:41,770 --> 00:12:47,830
router you need to tell the app or

00:12:44,400 --> 00:12:50,320
inform the every route of all the other

00:12:47,830 --> 00:12:53,500
rows and that's pretty difficult so

00:12:50,320 --> 00:13:03,210
that's important link component from

00:12:53,500 --> 00:13:03,210
next and link to another page

00:13:10,950 --> 00:13:17,880
since the link component the hrs will be

00:13:14,670 --> 00:13:22,670
populated by the link component we put

00:13:17,880 --> 00:13:22,670
the href to the to the link component

00:13:26,120 --> 00:13:42,060
let's do the same on the oh this didn't

00:13:32,130 --> 00:13:48,510
work sorry so since we are on the cookie

00:13:42,060 --> 00:13:50,279
route it doesn't make sense to reference

00:13:48,510 --> 00:13:55,500
the cookie route here but the landing

00:13:50,279 --> 00:13:58,160
page on the landing page we just do the

00:13:55,500 --> 00:13:58,160
same for now

00:14:03,470 --> 00:14:06,580
[Music]

00:14:07,589 --> 00:14:14,399
of course we need to link component

00:14:10,089 --> 00:14:17,620
these two files are kind of isolated and

00:14:14,399 --> 00:14:22,110
this is since we have these entry files

00:14:17,620 --> 00:14:26,020
like in the good old PHP days and you

00:14:22,110 --> 00:14:28,029
isolate each route from each other if

00:14:26,020 --> 00:14:32,649
you work in a big development team and

00:14:28,029 --> 00:14:35,709
your friend is putting minesweeper on

00:14:32,649 --> 00:14:37,450
his routes for example and which may

00:14:35,709 --> 00:14:39,700
have a lot of code

00:14:37,450 --> 00:14:42,730
he won't influence your part of the

00:14:39,700 --> 00:14:47,110
application which is pretty much meeting

00:14:42,730 --> 00:14:51,550
so let's look what we just built wow we

00:14:47,110 --> 00:14:54,190
have a link if I disable JavaScript on

00:14:51,550 --> 00:14:57,959
this page the page will be still

00:14:54,190 --> 00:15:01,390
completely functional will fall back on

00:14:57,959 --> 00:15:04,300
websites like in the 90s so this is a

00:15:01,390 --> 00:15:07,240
great way of progressive enhancement the

00:15:04,300 --> 00:15:10,630
user even if he has no JavaScript or a

00:15:07,240 --> 00:15:13,420
big latency he can use your JavaScript

00:15:10,630 --> 00:15:17,820
app immediately so javascript is not a

00:15:13,420 --> 00:15:21,490
real important dependency just for like

00:15:17,820 --> 00:15:23,890
small javascript things like account or

00:15:21,490 --> 00:15:26,310
so they won't work us you need something

00:15:23,890 --> 00:15:29,350
like state management but links and

00:15:26,310 --> 00:15:37,720
showing the initial content will always

00:15:29,350 --> 00:15:40,570
work so if we open the counter and we

00:15:37,720 --> 00:15:47,380
click this link we get a client-side

00:15:40,570 --> 00:15:51,250
page transition one second I need to

00:15:47,380 --> 00:15:55,839
reference the right atria click the

00:15:51,250 --> 00:15:58,649
cookie the build system just received

00:15:55,839 --> 00:16:00,730
that the request that a cookie route and

00:15:58,649 --> 00:16:03,579
it's not built yet

00:16:00,730 --> 00:16:05,380
so he's doing it really fast so he just

00:16:03,579 --> 00:16:08,079
builded the cookie route if we go back

00:16:05,380 --> 00:16:10,959
the entire thing gets even quicker then

00:16:08,079 --> 00:16:15,420
and we don't have the full page

00:16:10,959 --> 00:16:18,910
transition but we could call this route

00:16:15,420 --> 00:16:21,660
directly and we get just the code we

00:16:18,910 --> 00:16:21,660
need for this route

00:16:21,750 --> 00:16:27,670
this approach comes with another nifty

00:16:24,610 --> 00:16:32,350
feature we can use prefetching out of

00:16:27,670 --> 00:16:39,370
the box just add the prefetch param to

00:16:32,350 --> 00:16:41,800
the link component and you are done so

00:16:39,370 --> 00:16:46,050
when we now load this hello world

00:16:41,800 --> 00:16:50,620
example we first get an initial response

00:16:46,050 --> 00:16:53,800
with HTML then the JavaScript is

00:16:50,620 --> 00:16:57,130
evaluated and may put extra

00:16:53,800 --> 00:17:00,430
functionality to our HTML page and after

00:16:57,130 --> 00:17:02,380
that we prefetch the next page so it's

00:17:00,430 --> 00:17:06,160
already loaded when the user has read

00:17:02,380 --> 00:17:08,590
like the caption of our page the the

00:17:06,160 --> 00:17:11,080
next page is already there so if I click

00:17:08,590 --> 00:17:14,410
cookie now it's there immediately which

00:17:11,080 --> 00:17:16,750
is pretty nice we're not losing state we

00:17:14,410 --> 00:17:19,810
just improve performance of our website

00:17:16,750 --> 00:17:22,170
we use code splitting we use common

00:17:19,810 --> 00:17:25,240
chunk so common parts of the application

00:17:22,170 --> 00:17:28,180
will be bundled into a common chunk file

00:17:25,240 --> 00:17:34,900
so we don't have to reload this on every

00:17:28,180 --> 00:17:36,850
route right now I just showed you

00:17:34,900 --> 00:17:40,060
something similar to a static page

00:17:36,850 --> 00:17:42,340
generator we haven't populated any of

00:17:40,060 --> 00:17:44,230
these components with props and that's

00:17:42,340 --> 00:17:46,360
what we're the reason what's really

00:17:44,230 --> 00:17:55,290
interesting about it so let's add that

00:17:46,360 --> 00:17:55,290
real quick ok I'm cheating a bit

00:17:59,490 --> 00:18:01,520
Oh

00:18:06,169 --> 00:18:13,659
instead of returning a functional

00:18:09,590 --> 00:18:18,669
component we can return a normal reactor

00:18:13,659 --> 00:18:18,669
so right now we on the cookie route

00:18:25,740 --> 00:18:33,040
so you probably all know this pattern we

00:18:29,980 --> 00:18:36,850
create a react class for the random

00:18:33,040 --> 00:18:40,480
method and actually nothing has changed

00:18:36,850 --> 00:18:42,660
okay we try to get some props but right

00:18:40,480 --> 00:18:48,340
now the app doesn't have any props so

00:18:42,660 --> 00:18:52,540
let's add them next yet at one static

00:18:48,340 --> 00:18:56,440
method nothing more just one method it's

00:18:52,540 --> 00:18:58,750
called get initial props in this static

00:18:56,440 --> 00:19:01,810
method we have access to the request

00:18:58,750 --> 00:19:04,270
object if this component was rendered on

00:19:01,810 --> 00:19:10,000
the server we have access to the

00:19:04,270 --> 00:19:12,580
response object and if we are declined

00:19:10,000 --> 00:19:16,080
these objects are new finds so let's

00:19:12,580 --> 00:19:16,080
check out if we on the server

00:19:25,680 --> 00:19:34,980
easy as that in the beginning I told you

00:19:30,990 --> 00:19:36,810
we need isomorphic fetch fetch I hope

00:19:34,980 --> 00:19:42,090
you're familiar with it it's like the

00:19:36,810 --> 00:19:45,360
new HTML request so the new way of using

00:19:42,090 --> 00:19:48,150
Hayek's requests this API is not part of

00:19:45,360 --> 00:19:52,200
note but we can like polyfill or pony

00:19:48,150 --> 00:19:57,200
fill this API and so we can call fetch

00:19:52,200 --> 00:20:00,180
and our some external restful RP and

00:19:57,200 --> 00:20:03,800
from the client or from the server so

00:20:00,180 --> 00:20:07,500
this is the universal part of our app

00:20:03,800 --> 00:20:12,390
after we got the response will return

00:20:07,500 --> 00:20:14,850
adjacent we're using a weight here so

00:20:12,390 --> 00:20:16,740
adding functions if you're not familiar

00:20:14,850 --> 00:20:18,810
with them and don't want to use them you

00:20:16,740 --> 00:20:21,180
can just simply return a promise from

00:20:18,810 --> 00:20:26,520
this function or just an object if you

00:20:21,180 --> 00:20:30,180
don't do any I think stuff and after we

00:20:26,520 --> 00:20:33,870
fetch the JSON we use destructuring here

00:20:30,180 --> 00:20:36,210
to simplify a few things so please

00:20:33,870 --> 00:20:42,300
ignore these they are not next specific

00:20:36,210 --> 00:20:50,250
and we return the initial props let's

00:20:42,300 --> 00:20:52,770
real quick look at home at this cookie

00:20:50,250 --> 00:20:55,700
RP this is the response we get

00:20:52,770 --> 00:20:59,040
we only interested in the fortune part

00:20:55,700 --> 00:21:02,220
object so we use destructuring to

00:20:59,040 --> 00:21:05,670
extract it and we feed our top level

00:21:02,220 --> 00:21:10,130
component and with a fortune object so

00:21:05,670 --> 00:21:10,130
we have access to the ID or the message

00:21:16,990 --> 00:21:29,200
let's check if we get a cookie I love

00:21:22,320 --> 00:21:31,650
life coding fun you don't need this

00:21:29,200 --> 00:21:31,650
right now

00:21:44,900 --> 00:21:52,970
here we are I just loaded this route

00:21:50,750 --> 00:21:55,790
directly in order to show you the

00:21:52,970 --> 00:21:58,460
advantages I want to compile our new

00:21:55,790 --> 00:22:01,250
next up in production mode so you won't

00:21:58,460 --> 00:22:03,590
see all the build systems specific stuff

00:22:01,250 --> 00:22:05,860
this is not interesting to show the

00:22:03,590 --> 00:22:05,860
point

00:22:12,480 --> 00:22:24,450
so stop the desk server start the

00:22:17,260 --> 00:22:28,330
production task or script and start yes

00:22:24,450 --> 00:22:31,570
so this is now compiling our entire

00:22:28,330 --> 00:22:34,410
application and starting the note server

00:22:31,570 --> 00:22:34,410
to serve this

00:22:42,480 --> 00:22:53,570
as you can see we try to reference the

00:22:49,770 --> 00:22:53,570
route that didn't exist sorry for that

00:22:55,820 --> 00:23:00,840
we could use we could disable JavaScript

00:22:59,010 --> 00:23:04,169
now and the app will still work as

00:23:00,840 --> 00:23:06,540
expected if we navigate to the landing

00:23:04,169 --> 00:23:14,760
page we get a client-side page

00:23:06,540 --> 00:23:17,549
transition or a 2 1 X 1 minute and we

00:23:14,760 --> 00:23:23,700
want to go back this is where they act

00:23:17,549 --> 00:23:27,480
the error comes from just like to recap

00:23:23,700 --> 00:23:31,290
we're showing like the props message

00:23:27,480 --> 00:23:35,870
there so we get the props from the

00:23:31,290 --> 00:23:35,870
static method get initial props

00:23:57,680 --> 00:24:06,590
okay just saw a spelling mistake please

00:24:01,700 --> 00:24:09,380
excuse me for that so now we are calling

00:24:06,590 --> 00:24:14,090
the cookie route what now will happen is

00:24:09,380 --> 00:24:16,430
we get the next route via I ox

00:24:14,090 --> 00:24:18,530
so the top level component from the

00:24:16,430 --> 00:24:22,520
cookie route will be executed on

00:24:18,530 --> 00:24:24,490
declined and not on the server this is

00:24:22,520 --> 00:24:28,250
just because of the client-side

00:24:24,490 --> 00:24:37,550
transition this was really fast because

00:24:28,250 --> 00:24:41,690
we prefetch this route so let's recap in

00:24:37,550 --> 00:24:45,080
the network inspector inspector first we

00:24:41,690 --> 00:24:48,110
call the localhost route or the landing

00:24:45,080 --> 00:24:50,360
page and after nine milliseconds the

00:24:48,110 --> 00:24:54,920
user could always already use our page

00:24:50,360 --> 00:24:58,730
he was able to immediate read some stuff

00:24:54,920 --> 00:25:01,370
then he has to wait another four

00:24:58,730 --> 00:25:04,160
milliseconds until the JavaScript

00:25:01,370 --> 00:25:07,100
functionality initially got loaded maybe

00:25:04,160 --> 00:25:10,600
five milliseconds until he could use our

00:25:07,100 --> 00:25:16,280
route like all the kind specific stuff

00:25:10,600 --> 00:25:19,690
after that the prefetching kicked in we

00:25:16,280 --> 00:25:22,250
got the cookie page with an IX request

00:25:19,690 --> 00:25:26,270
which took us another six milliseconds

00:25:22,250 --> 00:25:29,540
and from that now on we are done but the

00:25:26,270 --> 00:25:33,110
cookie page needed to call an external

00:25:29,540 --> 00:25:36,440
RP you see some here will go up some

00:25:33,110 --> 00:25:38,750
Hague web so that was called on the

00:25:36,440 --> 00:25:45,470
client now we got the cookie

00:25:38,750 --> 00:25:47,900
informations and that's it so if we do

00:25:45,470 --> 00:25:51,670
this again with a direct request so we

00:25:47,900 --> 00:25:56,060
don't transition to that route with a

00:25:51,670 --> 00:25:58,100
with a client request we get at the page

00:25:56,060 --> 00:26:02,170
immediately and this is like really

00:25:58,100 --> 00:26:05,390
awesome if you believe it or not so

00:26:02,170 --> 00:26:08,830
let's stop live coding for now and let's

00:26:05,390 --> 00:26:08,830
recap what we just did

00:26:13,630 --> 00:26:21,650
so I'm just a recap we have like these

00:26:18,800 --> 00:26:23,540
three basic components and next share as

00:26:21,650 --> 00:26:26,450
introduced like this new top level

00:26:23,540 --> 00:26:29,600
component which is similar to add any

00:26:26,450 --> 00:26:33,980
other react component just add the get

00:26:29,600 --> 00:26:36,830
initial props static method so we just

00:26:33,980 --> 00:26:38,900
created a react up in a few minutes we

00:26:36,830 --> 00:26:42,590
solve the complex problem of server-side

00:26:38,900 --> 00:26:45,710
rendering we added prefetching we added

00:26:42,590 --> 00:26:48,800
client-side page transitions on end code

00:26:45,710 --> 00:26:53,510
splitting which works on a big scale as

00:26:48,800 --> 00:26:56,930
well next year as comes with a lot of

00:26:53,510 --> 00:26:59,600
other features that you don't need to

00:26:56,930 --> 00:27:02,180
use but you can use them and it's really

00:26:59,600 --> 00:27:04,280
convenient to use those first of all as

00:27:02,180 --> 00:27:08,410
I already mentioned the web pack to

00:27:04,280 --> 00:27:13,040
build system which is extendable it

00:27:08,410 --> 00:27:16,790
comes with a server route handler so if

00:27:13,040 --> 00:27:19,040
you and you just saw it looked similar

00:27:16,790 --> 00:27:22,760
to static site generator but if you want

00:27:19,040 --> 00:27:25,280
to use express to do your routing at all

00:27:22,760 --> 00:27:30,230
you want to use core so you can use

00:27:25,280 --> 00:27:33,320
similar literally every server-side

00:27:30,230 --> 00:27:37,040
node.js framework so you're not bound to

00:27:33,320 --> 00:27:42,380
any of these next year as has a lot of

00:27:37,040 --> 00:27:49,670
community examples and which all you

00:27:42,380 --> 00:27:52,400
which will point you in the right way so

00:27:49,670 --> 00:27:56,480
in the next repository just take a look

00:27:52,400 --> 00:28:00,230
at the examples what parts are supported

00:27:56,480 --> 00:28:02,960
so one interesting example is the

00:28:00,230 --> 00:28:05,750
server-side caching example we can

00:28:02,960 --> 00:28:08,420
actually cache our server rendered web

00:28:05,750 --> 00:28:11,210
apps if we have a big web app we can get

00:28:08,420 --> 00:28:15,530
there in addition and extra performance

00:28:11,210 --> 00:28:18,680
and extra performance boost by caching a

00:28:15,530 --> 00:28:19,190
server-side rendered response in some

00:28:18,680 --> 00:28:23,690
kind

00:28:19,190 --> 00:28:27,370
of cash like Reddit and get speed like

00:28:23,690 --> 00:28:30,950
an aesthetic app in addition to that

00:28:27,370 --> 00:28:33,410
it's support state management libraries

00:28:30,950 --> 00:28:37,580
the community contributed for example

00:28:33,410 --> 00:28:42,370
examples for react form of X or and you

00:28:37,580 --> 00:28:45,290
can use whatever styling library you and

00:28:42,370 --> 00:28:48,800
would like to so you don't you're not

00:28:45,290 --> 00:28:52,040
bound to and they are styling solution

00:28:48,800 --> 00:28:59,270
for example with solid Ron post CSS

00:28:52,040 --> 00:29:01,430
shallow yeah and many more so I hope you

00:28:59,270 --> 00:29:03,980
got some insights into next shares

00:29:01,430 --> 00:29:07,580
please take a look when you're at home

00:29:03,980 --> 00:29:09,230
and I promise you it's really awesome

00:29:07,580 --> 00:29:13,750
because you get really fast and

00:29:09,230 --> 00:29:18,730
developing and quite impressive web apps

00:29:13,750 --> 00:29:18,730
so thanks a lot for your attention

00:29:19,180 --> 00:29:27,880
[Applause]

00:29:24,840 --> 00:29:32,500
if you have any questions I'll be here

00:29:27,880 --> 00:29:37,390
around you can ask now if we still have

00:29:32,500 --> 00:29:40,760
time and all will see each other on the

00:29:37,390 --> 00:29:44,940
conference thanks

00:29:40,760 --> 00:29:44,940

YouTube URL: https://www.youtube.com/watch?v=uKN8Vyl_fBc


