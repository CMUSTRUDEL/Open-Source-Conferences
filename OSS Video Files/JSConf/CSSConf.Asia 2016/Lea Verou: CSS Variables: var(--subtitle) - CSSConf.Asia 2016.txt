Title: Lea Verou: CSS Variables: var(--subtitle) - CSSConf.Asia 2016
Publication date: 2016-12-16
Playlist: CSSConf.Asia 2016
Description: 
	You may have heard about CSS Variables (aka CSS Custom Properties), but think it’s not something you can use yet. Plus, you already have your preprocessor pipeline in place, why should you care? This talk will show how CSS Variables are much more powerful than static preprocessor variables and can be used today without compromising progressive enhancement. You will also learn several creative tips and tricks to take full advantage of them. As is customary with Lea’s CSS talks, expect a swath of live demos to demonstrate the material.

Lea is currently busy doing research in Human-Computer Interaction at MIT CSAIL.
She has previously written a bestselling CSS book for O’Reilly (CSS Secrets) and worked as a Developer Advocate at W3C.
She has a long-standing passion for open web standards, and is one of the few Invited Experts in the CSS Working Group.
Lea has also started several popular open source projects and web applications, such as Prism, Dabblet and -prefix-free and maintains a technical blog at lea.verou.me.
Despite her academic pursuits in Computer Science, Lea is one of the few misfits who love code and design equally.


CSSConf.Asia - Capitol Theatre, Singapore - 24 November 2016.

Source: https://2016.cssconf.asia/
Slides: https://leaverou.github.io/css-variables/#for-browser

License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.
Captions: 
	00:00:11,139 --> 00:00:16,279
hello everyone it's great to be here

00:00:13,630 --> 00:00:18,650
even though I was already introduced I

00:00:16,279 --> 00:00:22,250
feel I should introduce myself to you hi

00:00:18,650 --> 00:00:23,119
I'm Lea here's a fun fact you might not

00:00:22,250 --> 00:00:25,100
know about me

00:00:23,119 --> 00:00:27,550
I'm originally from Greece and

00:00:25,100 --> 00:00:29,359
specifically from the island of lesbos

00:00:27,550 --> 00:00:31,490
which technically makes me

00:00:29,359 --> 00:00:35,030
geographically lesbian probably one of

00:00:31,490 --> 00:00:37,549
the very few you'll ever meet in other

00:00:35,030 --> 00:00:40,159
news I like making stuff you might have

00:00:37,549 --> 00:00:43,220
used some of my work most all of it is

00:00:40,159 --> 00:00:46,040
on github I'm an invited expert in the

00:00:43,220 --> 00:00:47,360
CSS working group my day job is doing

00:00:46,040 --> 00:00:50,140
HCI research at MIT

00:00:47,360 --> 00:00:54,049
HCI is just a fancy term for usability

00:00:50,140 --> 00:00:57,799
and I've written a book people like it

00:00:54,049 --> 00:00:59,479
on Amazon and actually there is a it's

00:00:57,799 --> 00:01:02,689
one of the prizes for the competition

00:00:59,479 --> 00:01:06,650
afterwards so go to the competition and

00:01:02,689 --> 00:01:09,020
you might win one of them so CSS

00:01:06,650 --> 00:01:10,790
variables not to be confused with sass

00:01:09,020 --> 00:01:14,630
or less variables completely different

00:01:10,790 --> 00:01:16,820
things so the first ever CSS variable we

00:01:14,630 --> 00:01:18,860
probably got was current color it came

00:01:16,820 --> 00:01:21,110
from SVG and by now it's supported

00:01:18,860 --> 00:01:23,660
everywhere the way it worked is it

00:01:21,110 --> 00:01:26,600
always resolves to the value of color so

00:01:23,660 --> 00:01:28,400
if I change the color property here the

00:01:26,600 --> 00:01:31,880
color the the current color and the

00:01:28,400 --> 00:01:33,260
gradient changes as well however even

00:01:31,880 --> 00:01:35,600
though this is great this was great

00:01:33,260 --> 00:01:36,710
before we got native CSS variables and

00:01:35,600 --> 00:01:39,020
we could hack a lot of things with

00:01:36,710 --> 00:01:42,620
current color as you can imagine it's

00:01:39,020 --> 00:01:45,409
very very limited so CSS variables are

00:01:42,620 --> 00:01:48,020
kind of an expansion of this concept

00:01:45,409 --> 00:01:49,580
it's like current color on steroids CSS

00:01:48,020 --> 00:01:51,140
variables are basically custom

00:01:49,580 --> 00:01:56,690
properties that start with a double dash

00:01:51,140 --> 00:02:00,820
like this and we used we refer to them

00:01:56,690 --> 00:02:02,990
like this and we can use them everywhere

00:02:00,820 --> 00:02:04,659
so basically I can replicate the

00:02:02,990 --> 00:02:08,479
functionality of current color like that

00:02:04,659 --> 00:02:12,069
before I move on I'm sure you might be

00:02:08,479 --> 00:02:15,650
thinking this is a terrible syntax a

00:02:12,069 --> 00:02:16,790
double dash that is disgusting why not

00:02:15,650 --> 00:02:21,500
just use the dollar or

00:02:16,790 --> 00:02:24,049
the up sign like less and sass so there

00:02:21,500 --> 00:02:26,420
are two reasons for this the first is

00:02:24,049 --> 00:02:28,430
that we want people to be able to use

00:02:26,420 --> 00:02:30,620
less and sass variables and CSS

00:02:28,430 --> 00:02:31,939
variables as you'll see the stock CSS

00:02:30,620 --> 00:02:34,790
variables do a lot of things you cannot

00:02:31,939 --> 00:02:37,099
do with less and sass variables so the

00:02:34,790 --> 00:02:40,069
idea is you keep using your preprocessor

00:02:37,099 --> 00:02:42,170
of choice for the things you can do with

00:02:40,069 --> 00:02:43,849
preprocessor variables and you use CSS

00:02:42,170 --> 00:02:47,000
variables for the things you cannot do

00:02:43,849 --> 00:02:48,859
with sass so because the syntax is

00:02:47,000 --> 00:02:50,629
different you can use the dollar

00:02:48,859 --> 00:02:53,299
variables of sass and you can use the -

00:02:50,629 --> 00:02:55,970
- variables of CSS and they both work

00:02:53,299 --> 00:02:59,780
together just great you could even have

00:02:55,970 --> 00:03:02,480
a dollar blue sass variable and set it

00:02:59,780 --> 00:03:04,519
aside and set the CSS variable with it

00:03:02,480 --> 00:03:05,810
and it would just work so you might be

00:03:04,519 --> 00:03:09,709
thinking okay I understand that the

00:03:05,810 --> 00:03:13,129
syntax had to be different but why does

00:03:09,709 --> 00:03:15,739
it have to be so ugly so the other

00:03:13,129 --> 00:03:18,819
reason is we wanted something that is

00:03:15,739 --> 00:03:21,590
compatible with existing CSS parsers and

00:03:18,819 --> 00:03:24,889
CSS properties can only contain letters

00:03:21,590 --> 00:03:27,440
and dashes so we needed something that a

00:03:24,889 --> 00:03:29,060
can be parsed by existing parsers and B

00:03:27,440 --> 00:03:31,069
will not clash with any properties we

00:03:29,060 --> 00:03:33,319
define in the future and that's where

00:03:31,069 --> 00:03:36,290
the double dash comes from essentially

00:03:33,319 --> 00:03:39,530
it the inspiration for it was the the

00:03:36,290 --> 00:03:41,870
prefixed properties like - WebKit - it's

00:03:39,530 --> 00:03:48,680
basically and a prefixed property with

00:03:41,870 --> 00:03:51,440
an empty prefix through story so after

00:03:48,680 --> 00:03:53,780
this little parenthesis you might be

00:03:51,440 --> 00:03:55,430
thinking okay you replicated current

00:03:53,780 --> 00:03:57,979
color with CSS variables but I could I

00:03:55,430 --> 00:04:00,019
can do that with current color and have

00:03:57,979 --> 00:04:02,180
wider browser support so why are you CSS

00:04:00,019 --> 00:04:05,689
variables useful why should I care let's

00:04:02,180 --> 00:04:11,290
define another property corners and we

00:04:05,689 --> 00:04:16,880
can go here and say 100% minus whatever

00:04:11,290 --> 00:04:18,409
value corners has and now I have made

00:04:16,880 --> 00:04:21,229
another custom property that controls

00:04:18,409 --> 00:04:23,720
the size of these corners that I can use

00:04:21,229 --> 00:04:25,130
anywhere and you might be thinking okay

00:04:23,720 --> 00:04:28,550
in this in this case you could just

00:04:25,130 --> 00:04:30,529
write 20 pixels right there or 1m or

00:04:28,550 --> 00:04:32,079
whatever but you

00:04:30,529 --> 00:04:35,779
haven't really gained anything right

00:04:32,079 --> 00:04:38,239
however when I say anywhere I mean

00:04:35,779 --> 00:04:41,269
anywhere I can take this corners

00:04:38,239 --> 00:04:46,939
declaration and put it in an inline

00:04:41,269 --> 00:04:48,949
style and it still works and since I can

00:04:46,939 --> 00:04:50,599
put it in an inline style I could also

00:04:48,949 --> 00:04:52,219
set this with JavaScript and actually

00:04:50,599 --> 00:04:53,869
the last section of this talk is exactly

00:04:52,219 --> 00:04:55,399
about this all the cool things we can do

00:04:53,869 --> 00:04:56,989
when we combine CSS variables with

00:04:55,399 --> 00:04:59,239
JavaScript because that's the biggest

00:04:56,989 --> 00:05:02,389
difference of CSS variables and sass

00:04:59,239 --> 00:05:04,669
variable CSS variables are live they can

00:05:02,389 --> 00:05:07,519
be updated at any point even by a pseudo

00:05:04,669 --> 00:05:13,069
class or JavaScript or inline Styles

00:05:07,519 --> 00:05:14,959
anything so beyond the syntax of the

00:05:13,069 --> 00:05:17,029
double dash to define the variable and

00:05:14,959 --> 00:05:20,209
the VAR function to call it there's also

00:05:17,029 --> 00:05:26,449
another thing which is the full-back

00:05:20,209 --> 00:05:31,789
value let's say deep pink here and let's

00:05:26,449 --> 00:05:34,759
give this black or whatever and this

00:05:31,789 --> 00:05:38,269
fallback is applied when the variable is

00:05:34,759 --> 00:05:41,329
not set which is also useful and we'll

00:05:38,269 --> 00:05:42,860
see some caveats later on this talk so

00:05:41,329 --> 00:05:45,259
the first takeaway is that CSS variables

00:05:42,860 --> 00:05:47,479
work exactly like normal CSS properties

00:05:45,259 --> 00:05:49,549
in fact the spec for it for them it's

00:05:47,479 --> 00:05:51,949
not called CSS variable variables it's

00:05:49,549 --> 00:05:53,569
called CSS custom properties for

00:05:51,949 --> 00:05:59,149
cascading variables yeah it's kind of a

00:05:53,569 --> 00:06:02,089
long title so here's a simple HTML

00:05:59,149 --> 00:06:06,529
structure just six divs three parent

00:06:02,089 --> 00:06:09,049
tips and three child dibs and here I

00:06:06,529 --> 00:06:11,389
mean I'm using I'm setting a dash dash

00:06:09,049 --> 00:06:14,389
outline variable on the first one just

00:06:11,389 --> 00:06:16,639
this outer div the white one and I'm

00:06:14,389 --> 00:06:19,039
also saying that everywhere that the

00:06:16,639 --> 00:06:21,349
outline variable is set set the outline

00:06:19,039 --> 00:06:23,839
property to that so you might have

00:06:21,349 --> 00:06:26,599
noticed that even though the inner div

00:06:23,839 --> 00:06:29,929
doesn't have any dash dash outline set

00:06:26,599 --> 00:06:32,719
it still gets an outline and the reason

00:06:29,929 --> 00:06:35,899
is that CSS variables are inherited

00:06:32,719 --> 00:06:37,729
properties which is useful in many cases

00:06:35,899 --> 00:06:39,889
for example you can set them on the HTML

00:06:37,729 --> 00:06:42,589
element and access them from any element

00:06:39,889 --> 00:06:43,820
but in some cases you might not want

00:06:42,589 --> 00:06:46,670
this behavior

00:06:43,820 --> 00:06:50,350
for that you can use the universal

00:06:46,670 --> 00:06:52,670
selector and set them to initial and

00:06:50,350 --> 00:06:55,970
because inheritance always has lower

00:06:52,670 --> 00:06:57,320
precedence than explicitly referencing

00:06:55,970 --> 00:07:00,620
the element even with the zero

00:06:57,320 --> 00:07:02,780
specificity of the star selector then if

00:07:00,620 --> 00:07:05,450
you haven't set the outline variable

00:07:02,780 --> 00:07:07,670
explicitly on the element then it will

00:07:05,450 --> 00:07:09,770
just be initial which means no value

00:07:07,670 --> 00:07:14,390
which means this declaration is not

00:07:09,770 --> 00:07:16,400
applied so the second takeaway is that

00:07:14,390 --> 00:07:18,650
CSS variables are inherited properties

00:07:16,400 --> 00:07:20,300
but you can change that so you get you

00:07:18,650 --> 00:07:23,960
get the best of both worlds there is a

00:07:20,300 --> 00:07:26,210
default but you can change it so you

00:07:23,960 --> 00:07:28,190
might be thinking ah I couldn't think of

00:07:26,210 --> 00:07:29,990
a cool use case for variables I have

00:07:28,190 --> 00:07:32,660
this image folder and I have these

00:07:29,990 --> 00:07:35,420
complicated backgrounds and maybe I can

00:07:32,660 --> 00:07:39,590
use variables to set my background image

00:07:35,420 --> 00:07:44,060
so you might try something like this for

00:07:39,590 --> 00:07:46,790
your first attempt and then you might

00:07:44,060 --> 00:07:48,800
think hmmm how do I concatenate a

00:07:46,790 --> 00:07:50,690
variable with a string maybe I should

00:07:48,800 --> 00:07:52,400
drive it's the same thing I do with the

00:07:50,690 --> 00:07:55,070
content property which is placing the

00:07:52,400 --> 00:07:58,130
strings next to each other so you try

00:07:55,070 --> 00:07:59,900
something like this and you're

00:07:58,130 --> 00:08:02,810
disappointed to find it doesn't really

00:07:59,900 --> 00:08:05,330
work so at this point we're like okay

00:08:02,810 --> 00:08:07,070
let's let's explore this maybe we should

00:08:05,330 --> 00:08:13,130
try something else maybe we should put

00:08:07,070 --> 00:08:16,700
the entire URL here and just put var

00:08:13,130 --> 00:08:20,060
inside the URL here and maybe that will

00:08:16,700 --> 00:08:22,160
work nope that doesn't work either so at

00:08:20,060 --> 00:08:23,540
this point we're kind of desperate and

00:08:22,160 --> 00:08:25,430
we're like ok I'm gonna put the entire

00:08:23,540 --> 00:08:28,480
URL in here that that must work right

00:08:25,430 --> 00:08:32,630
this must work nope

00:08:28,480 --> 00:08:36,800
why is this so these are three different

00:08:32,630 --> 00:08:38,780
issues with three different reasons the

00:08:36,800 --> 00:08:40,729
first one that we tried is a CSS

00:08:38,780 --> 00:08:41,919
limitation we currently cannot

00:08:40,729 --> 00:08:44,810
concatenate strings

00:08:41,919 --> 00:08:46,550
the content property is an exception

00:08:44,810 --> 00:08:48,110
it's defined that in the content

00:08:46,550 --> 00:08:49,760
property you can put strings next to

00:08:48,110 --> 00:08:51,890
each other and they're concatenated it's

00:08:49,760 --> 00:08:54,070
not a CSS wide thing we will probably

00:08:51,890 --> 00:08:58,070
eventually get some syntax to do this

00:08:54,070 --> 00:09:01,140
but right now we don't have any

00:08:58,070 --> 00:09:04,710
the second one that we tried is a CSS

00:09:01,140 --> 00:09:06,840
bug the URL function is very peculiar it

00:09:04,710 --> 00:09:08,850
has very weird parsing rules one of

00:09:06,840 --> 00:09:12,060
which is that if you see a closing

00:09:08,850 --> 00:09:13,950
parenthesis then the whole thing is

00:09:12,060 --> 00:09:15,540
terminated so it does not really

00:09:13,950 --> 00:09:17,850
understand variables it was written

00:09:15,540 --> 00:09:19,830
before variables and it's an exception

00:09:17,850 --> 00:09:21,510
you can use variables in any other CSS

00:09:19,830 --> 00:09:24,000
function we've seen them in the

00:09:21,510 --> 00:09:26,250
beginning in radial gradient but not in

00:09:24,000 --> 00:09:27,600
the URL function this will also be

00:09:26,250 --> 00:09:31,110
solved eventually but right now you

00:09:27,600 --> 00:09:32,850
can't and the last one is a chrome bug

00:09:31,110 --> 00:09:37,260
I'm using Chrome for this presentation

00:09:32,850 --> 00:09:40,890
and it has a bug so and the actual bug

00:09:37,260 --> 00:09:42,720
is it's not that it doesn't understand

00:09:40,890 --> 00:09:45,570
URLs in variables is that it doesn't

00:09:42,720 --> 00:09:50,370
understand relative URLs in variables so

00:09:45,570 --> 00:09:54,180
if I go here and copy my URL and put it

00:09:50,370 --> 00:09:56,580
here it works if I make it absolute go

00:09:54,180 --> 00:10:00,180
figure well actually there I can explain

00:09:56,580 --> 00:10:03,270
this issue in a bit more detail so the

00:10:00,180 --> 00:10:05,250
reason that chrome has this bug and it

00:10:03,270 --> 00:10:07,170
works on Firefox but not in some edge

00:10:05,250 --> 00:10:09,830
cases is that it's actually under

00:10:07,170 --> 00:10:14,640
specified how browsers should resolve

00:10:09,830 --> 00:10:16,650
you a relative URLs in variables and you

00:10:14,640 --> 00:10:18,150
might be thinking well what is there to

00:10:16,650 --> 00:10:21,000
resolve it's pretty obvious what should

00:10:18,150 --> 00:10:22,470
happen yes if all your CSS is in one

00:10:21,000 --> 00:10:25,470
file it's pretty obvious what should

00:10:22,470 --> 00:10:27,510
happen but what happens if you have your

00:10:25,470 --> 00:10:29,790
variable declarations all over the place

00:10:27,510 --> 00:10:32,040
if you have one CSS with some variables

00:10:29,790 --> 00:10:34,560
another CSS that calls these variables

00:10:32,040 --> 00:10:37,620
and the third CSS that calls variables

00:10:34,560 --> 00:10:40,260
from the second one so do these

00:10:37,620 --> 00:10:44,490
variables resolve relative to to a B or

00:10:40,260 --> 00:10:47,940
C and actually this is this is debated

00:10:44,490 --> 00:10:50,250
in the CSS working group right now so if

00:10:47,940 --> 00:10:52,530
you go to that github issue if you have

00:10:50,250 --> 00:10:54,720
an opinion on this because basically

00:10:52,530 --> 00:10:56,370
what should happen based on the current

00:10:54,720 --> 00:10:58,590
definition of CSS is that variables

00:10:56,370 --> 00:11:01,650
resolve based on the place where you

00:10:58,590 --> 00:11:03,660
call them which is C but some people

00:11:01,650 --> 00:11:06,060
have said maybe this is not very useful

00:11:03,660 --> 00:11:09,420
so if you have an opinion please come

00:11:06,060 --> 00:11:10,510
and tell us keep in mind that most

00:11:09,420 --> 00:11:12,160
people in the CSS

00:11:10,510 --> 00:11:13,630
are not actually web developers so they

00:11:12,160 --> 00:11:19,240
have no idea what web developers

00:11:13,630 --> 00:11:21,329
actually want so input is very useful so

00:11:19,240 --> 00:11:24,610
right now until these issues are sold

00:11:21,329 --> 00:11:29,620
CSS variables + URL equals chocolate ice

00:11:24,610 --> 00:11:34,199
cream some more WT apps because this is

00:11:29,620 --> 00:11:37,779
CSS after all an empty value is invalid

00:11:34,199 --> 00:11:40,060
- - foo colon semicolon is invalid

00:11:37,779 --> 00:11:42,550
that's not a WTF that's pretty expected

00:11:40,060 --> 00:11:45,399
what might not be expected it is that

00:11:42,550 --> 00:11:50,740
this is valid and the value of foo is is

00:11:45,399 --> 00:11:52,420
a space character also lowercase foo is

00:11:50,740 --> 00:11:54,490
different than uppercase foo CSS

00:11:52,420 --> 00:12:01,029
variables are case sensitive unlike any

00:11:54,490 --> 00:12:01,839
other CSS property yeah so I mentioned

00:12:01,029 --> 00:12:05,050
fullbacks

00:12:01,839 --> 00:12:06,760
earlier which is the second parameter to

00:12:05,050 --> 00:12:10,029
the VAR function and you might be

00:12:06,760 --> 00:12:12,430
thinking wait a second CSS is cascading

00:12:10,029 --> 00:12:14,670
stylesheets after all isn't the Cascade

00:12:12,430 --> 00:12:17,529
supposed to provide a fallback like

00:12:14,670 --> 00:12:19,899
can't I just specify a declaration

00:12:17,529 --> 00:12:25,420
before the one with the var and that's

00:12:19,899 --> 00:12:28,180
my fallback not quite so this the

00:12:25,420 --> 00:12:29,800
fallback is applied not when not when

00:12:28,180 --> 00:12:31,029
the browser doesn't understand variables

00:12:29,800 --> 00:12:35,230
but when the browser understands

00:12:31,029 --> 00:12:37,089
variables but they are not set so as you

00:12:35,230 --> 00:12:38,709
might imagine if the browser doesn't

00:12:37,089 --> 00:12:41,230
understand variables at all the VAR

00:12:38,709 --> 00:12:44,019
function is invalid so the second

00:12:41,230 --> 00:12:46,930
declaration is ignored and the first one

00:12:44,019 --> 00:12:49,720
is in effect so if there's no series as

00:12:46,930 --> 00:12:54,970
variable supports the entire background

00:12:49,720 --> 00:12:58,839
will be read however if the browser does

00:12:54,970 --> 00:13:01,569
support CSS variables but accent color

00:12:58,839 --> 00:13:03,490
is not set anywhere or it's set to its

00:13:01,569 --> 00:13:07,180
initial value explicitly like - there's

00:13:03,490 --> 00:13:11,110
accent color initial then we get orange

00:13:07,180 --> 00:13:12,819
and of course if we set accent color to

00:13:11,110 --> 00:13:14,199
a specific color we get that one

00:13:12,819 --> 00:13:15,000
otherwise variables would be pretty

00:13:14,199 --> 00:13:17,470
useless

00:13:15,000 --> 00:13:20,890
so if accent colors yellow green we get

00:13:17,470 --> 00:13:24,519
yellow green so here's the thing what if

00:13:20,890 --> 00:13:26,319
we set accent color but we set it not

00:13:24,519 --> 00:13:29,470
but to something nonsensical for the

00:13:26,319 --> 00:13:33,100
background property what if we set it to

00:13:29,470 --> 00:13:36,970
I don't know 42 degrees which is

00:13:33,100 --> 00:13:37,690
completely useless in backgrounds what

00:13:36,970 --> 00:13:41,740
happens then

00:13:37,690 --> 00:13:43,240
how many think it's gonna be red raise

00:13:41,740 --> 00:13:48,100
your hands how many think it's gonna be

00:13:43,240 --> 00:13:54,420
red nobody correct how many think it's

00:13:48,100 --> 00:13:57,329
gonna be orange if you shake hands there

00:13:54,420 --> 00:14:01,079
that's a good guess but it's not correct

00:13:57,329 --> 00:14:05,680
the actual color we will get is

00:14:01,079 --> 00:14:09,069
transparent which may seem completely

00:14:05,680 --> 00:14:11,920
crazy but hear me there there's a reason

00:14:09,069 --> 00:14:13,480
and the reason is we cannot get of

00:14:11,920 --> 00:14:15,189
course we cannot get red by the time

00:14:13,480 --> 00:14:16,540
we've gone to the second declaration the

00:14:15,189 --> 00:14:20,259
browser has already thrown away the

00:14:16,540 --> 00:14:23,110
first one we can't get red we can't get

00:14:20,259 --> 00:14:25,810
orange because accent color is actually

00:14:23,110 --> 00:14:29,230
said we have a value for it what happens

00:14:25,810 --> 00:14:31,779
is that the second declaration becomes

00:14:29,230 --> 00:14:35,470
what we say invalid that computed value

00:14:31,779 --> 00:14:38,380
time and this means we we have thrown

00:14:35,470 --> 00:14:40,149
away all other declarations by then we

00:14:38,380 --> 00:14:42,399
cannot use them we cannot fall back to

00:14:40,149 --> 00:14:44,259
red we cannot fall back to orange what

00:14:42,399 --> 00:14:47,220
do we do we go to our initial value

00:14:44,259 --> 00:14:50,610
which for background is transparent for

00:14:47,220 --> 00:14:53,110
the color property would be black for

00:14:50,610 --> 00:14:55,300
you know if for border would be known

00:14:53,110 --> 00:14:59,310
every property has an initial value we

00:14:55,300 --> 00:15:01,630
jump back to that so forth take away

00:14:59,310 --> 00:15:04,540
invalid that computed value time is a

00:15:01,630 --> 00:15:07,470
new concept that we defined when we

00:15:04,540 --> 00:15:09,759
defined variables and it means initial

00:15:07,470 --> 00:15:15,040
it's exactly the same as the keyword

00:15:09,759 --> 00:15:17,079
initial so oh and these fullbacks is

00:15:15,040 --> 00:15:19,870
something we can also daisy chain the

00:15:17,079 --> 00:15:22,269
fallback for color one can be color two

00:15:19,870 --> 00:15:30,220
and the fallback for color two could be

00:15:22,269 --> 00:15:33,380
color three and so on also

00:15:30,220 --> 00:15:34,700
you might think if especially if you're

00:15:33,380 --> 00:15:37,399
coming from a prop from a programming

00:15:34,700 --> 00:15:40,490
background you might try to do something

00:15:37,399 --> 00:15:44,540
like this in the second day of the one

00:15:40,490 --> 00:15:49,700
that's inverted maybe I want its size to

00:15:44,540 --> 00:15:56,600
be one and bigger so I do something like

00:15:49,700 --> 00:16:00,470
this for size plus 1 M and I'm like why

00:15:56,600 --> 00:16:03,920
doesn't this work instead of getting 9ms

00:16:00,470 --> 00:16:05,810
I got either something very small or no

00:16:03,920 --> 00:16:08,570
height it's like no height has been said

00:16:05,810 --> 00:16:10,850
at all what's happening here so the

00:16:08,570 --> 00:16:13,700
thing is CSS is declarative there is no

00:16:10,850 --> 00:16:17,360
instruction order for a given state and

00:16:13,700 --> 00:16:20,000
a given element appropriately only has

00:16:17,360 --> 00:16:22,040
one value you cannot have this is the

00:16:20,000 --> 00:16:23,450
value of the property before this

00:16:22,040 --> 00:16:25,399
instruction or after this instruction

00:16:23,450 --> 00:16:30,740
there is no such thing there is no such

00:16:25,399 --> 00:16:33,680
concept of instruction order so actually

00:16:30,740 --> 00:16:36,050
because because every property needs to

00:16:33,680 --> 00:16:38,839
have one value it's not possible for it

00:16:36,050 --> 00:16:41,200
to be both its previous value and its

00:16:38,839 --> 00:16:45,230
value plus 1 M that's just nonsensical

00:16:41,200 --> 00:16:47,209
so in case such cycles are detected and

00:16:45,230 --> 00:16:49,550
this is a very trivial cycle you might

00:16:47,209 --> 00:16:51,140
also have cycles like a refers to B in B

00:16:49,550 --> 00:16:54,200
refers to a and so on

00:16:51,140 --> 00:16:56,720
if such cycles are detected it's exactly

00:16:54,200 --> 00:16:58,610
the same thing as if the variable was

00:16:56,720 --> 00:17:00,230
set with initial value and if the

00:16:58,610 --> 00:17:02,990
variable is set to its initial value

00:17:00,230 --> 00:17:04,429
this is also set to its initial value

00:17:02,990 --> 00:17:07,179
because this has this doesn't have a

00:17:04,429 --> 00:17:10,250
fallback and its initial value is also

00:17:07,179 --> 00:17:12,800
so it's exactly the same as if we

00:17:10,250 --> 00:17:17,660
haven't specified any height for that

00:17:12,800 --> 00:17:19,610
element so fifth takeaway cycles make it

00:17:17,660 --> 00:17:24,620
make variables invalid at computed value

00:17:19,610 --> 00:17:26,780
time so here is a small trick question

00:17:24,620 --> 00:17:30,740
there so let's see how many have been

00:17:26,780 --> 00:17:32,840
paying attention so far so the last two

00:17:30,740 --> 00:17:34,790
lines are exactly what you've seen in

00:17:32,840 --> 00:17:35,660
the previous example when I explained

00:17:34,790 --> 00:17:38,809
for bucks

00:17:35,660 --> 00:17:40,400
background red and then background var

00:17:38,809 --> 00:17:42,410
accent color with a fallback of orange

00:17:40,400 --> 00:17:43,640
and then we have to accent color

00:17:42,410 --> 00:17:46,130
declarations

00:17:43,640 --> 00:17:50,000
one that sets it to a nonsensical value

00:17:46,130 --> 00:17:51,590
and one that sets it to itself so how

00:17:50,000 --> 00:17:55,210
many think that the result is gonna be

00:17:51,590 --> 00:17:55,210
read show of hands

00:17:55,540 --> 00:18:04,220
nobody correct it's not gonna be read

00:17:59,170 --> 00:18:09,020
how many think it's gonna be orange once

00:18:04,220 --> 00:18:11,950
I found their second a few hands and you

00:18:09,020 --> 00:18:17,120
are correct it is orange

00:18:11,950 --> 00:18:19,250
why why why did this happen so remember

00:18:17,120 --> 00:18:20,570
before we said that if it's fits

00:18:19,250 --> 00:18:22,100
forty-two degrees we will get

00:18:20,570 --> 00:18:23,780
transparent because it's invalid that

00:18:22,100 --> 00:18:25,820
computed value time and it goes back to

00:18:23,780 --> 00:18:29,240
initial which is transparent the thing

00:18:25,820 --> 00:18:32,450
is right now the value of accent color

00:18:29,240 --> 00:18:35,930
is itself which means it computes to

00:18:32,450 --> 00:18:38,240
initial because it's a cycle the first

00:18:35,930 --> 00:18:41,660
declaration is actually red hearing it's

00:18:38,240 --> 00:18:43,610
completely ignored the second one

00:18:41,660 --> 00:18:45,290
overrides it so it's as if it wasn't

00:18:43,610 --> 00:18:47,150
there so the trick here is that the

00:18:45,290 --> 00:18:50,200
second declaration is exactly the same

00:18:47,150 --> 00:18:52,370
as if we said accent color initial and

00:18:50,200 --> 00:18:54,860
because accent color is set to its

00:18:52,370 --> 00:18:57,380
initial value we get the fallback which

00:18:54,860 --> 00:19:01,190
is orange because that's when the that's

00:18:57,380 --> 00:19:02,900
when the fallback is applied of course

00:19:01,190 --> 00:19:05,660
if the second declaration is not there

00:19:02,900 --> 00:19:08,690
we get transparent which I find kind of

00:19:05,660 --> 00:19:11,270
ironic we get the fallback when we have

00:19:08,690 --> 00:19:14,990
an invalid declaration there but when we

00:19:11,270 --> 00:19:18,140
don't have it we get transparent I think

00:19:14,990 --> 00:19:19,970
that was kind of interesting so I know

00:19:18,140 --> 00:19:21,470
that at sample at this point many of you

00:19:19,970 --> 00:19:23,210
might be thinking okay oh this is cool

00:19:21,470 --> 00:19:25,000
but what somebody please think of

00:19:23,210 --> 00:19:27,710
browser support

00:19:25,000 --> 00:19:29,300
how many browsers really support CSS

00:19:27,710 --> 00:19:31,640
variable surely it's not many it's

00:19:29,300 --> 00:19:34,850
probably just Chrome right I've heard

00:19:31,640 --> 00:19:37,340
this from so many people actually it is

00:19:34,850 --> 00:19:43,610
not just Chrome it's every single

00:19:37,340 --> 00:19:44,960
browser except edge and actually even

00:19:43,610 --> 00:19:46,850
though I know that you might be thinking

00:19:44,960 --> 00:19:48,650
oh god why are these Microsoft guys

00:19:46,850 --> 00:19:50,870
spoiling my life continuously I hate

00:19:48,650 --> 00:19:52,550
them I want to change from being a web

00:19:50,870 --> 00:19:55,730
developer and go raise farm animals

00:19:52,550 --> 00:19:56,710
because of Microsoft don't think that

00:19:55,730 --> 00:19:58,779
way

00:19:56,710 --> 00:20:00,880
has changed they're actually quite nice

00:19:58,779 --> 00:20:02,649
now they're trying to support standards

00:20:00,880 --> 00:20:03,850
they actually support some standards

00:20:02,649 --> 00:20:06,429
that other browsers don't and

00:20:03,850 --> 00:20:09,370
specifically about CSS variables they

00:20:06,429 --> 00:20:11,080
have announced that it's in development

00:20:09,370 --> 00:20:14,799
and it will be in the next version of

00:20:11,080 --> 00:20:18,090
edge so very very soon every single

00:20:14,799 --> 00:20:21,309
browser will support CSS variables and

00:20:18,090 --> 00:20:24,429
of course until then we have a lot of

00:20:21,309 --> 00:20:26,440
tools at our disposal we have the

00:20:24,429 --> 00:20:29,200
Cascade as usual background red

00:20:26,440 --> 00:20:31,809
background var which we can always use

00:20:29,200 --> 00:20:35,080
to provide for bugs we have app supports

00:20:31,809 --> 00:20:37,169
which as you can see here is supported

00:20:35,080 --> 00:20:41,440
by every single browser including edge

00:20:37,169 --> 00:20:43,480
since that's 13 so if you want to apply

00:20:41,440 --> 00:20:46,029
some different CSS for browsers that

00:20:43,480 --> 00:20:48,340
support CSS variables and some different

00:20:46,029 --> 00:20:51,399
CSS for browsers that don't you can use

00:20:48,340 --> 00:20:53,620
the app supports rule and any CSS

00:20:51,399 --> 00:20:57,070
variable and any value works there so I

00:20:53,620 --> 00:20:58,600
just news - - CSS : variables just to

00:20:57,070 --> 00:21:01,600
remind myself what this is about

00:20:58,600 --> 00:21:05,440
and of course you can also use the not

00:21:01,600 --> 00:21:09,039
keyword to apply some CSS to browsers

00:21:05,440 --> 00:21:10,570
that do not support CSS variables and of

00:21:09,039 --> 00:21:12,789
course as you can see here this is red

00:21:10,570 --> 00:21:14,590
now because Chrome does support CSS

00:21:12,789 --> 00:21:20,470
variables so it's ignoring the entire at

00:21:14,590 --> 00:21:22,539
supports block another interesting thing

00:21:20,470 --> 00:21:24,850
about variables and especially a

00:21:22,539 --> 00:21:27,429
difference that CSS variables have from

00:21:24,850 --> 00:21:28,990
SAS variables so or less variables let's

00:21:27,429 --> 00:21:30,659
assume that every time I say SAS I mean

00:21:28,990 --> 00:21:35,620
less as well I'm not trying to like show

00:21:30,659 --> 00:21:40,960
preferences there so in this case we

00:21:35,620 --> 00:21:45,250
have a div that is sized 33 V H sorry 33

00:21:40,960 --> 00:21:46,960
V W horizontally 33 V H vertically which

00:21:45,250 --> 00:21:49,510
basically means it has exactly the same

00:21:46,960 --> 00:21:53,649
aspect ratios the viewport and it's one

00:21:49,510 --> 00:21:56,399
third of the viewport so we might be we

00:21:53,649 --> 00:21:59,110
might think I don't like repeating this

00:21:56,399 --> 00:22:01,020
33 like what if I want to set it to 30

00:21:59,110 --> 00:22:04,570
and I have to do it twice

00:22:01,020 --> 00:22:08,799
that's not very dry right so I want to

00:22:04,570 --> 00:22:10,029
set a variable that says size and I set

00:22:08,799 --> 00:22:14,840
it to

00:22:10,029 --> 00:22:21,830
so then I go here when I save our size

00:22:14,840 --> 00:22:24,669
be a VW and var size be age and then I

00:22:21,830 --> 00:22:27,130
look at what I've done and I'm like what

00:22:24,669 --> 00:22:29,840
suddenly nothing works anymore

00:22:27,130 --> 00:22:32,029
so the reason this doesn't work is that

00:22:29,840 --> 00:22:33,890
variable values are basically token

00:22:32,029 --> 00:22:36,110
lists the browser doesn't see this as a

00:22:33,890 --> 00:22:37,900
string that says 30 that it we can just

00:22:36,110 --> 00:22:43,760
put next to V 8bw

00:22:37,900 --> 00:22:47,360
it sees it as a number and then it sees

00:22:43,760 --> 00:22:50,120
VW as an identifier so essentially for

00:22:47,360 --> 00:22:52,880
the browser it based it resolves exactly

00:22:50,120 --> 00:22:55,640
the same as this which is an invalid

00:22:52,880 --> 00:22:58,100
value so width width and height are

00:22:55,640 --> 00:22:59,659
invalid at computed value time actually

00:22:58,100 --> 00:23:05,270
not even a computed value time they're

00:22:59,659 --> 00:23:08,960
invalid values and you just get their

00:23:05,270 --> 00:23:12,220
initial values which is Auto so what can

00:23:08,960 --> 00:23:16,250
we do in this case what we can do is

00:23:12,220 --> 00:23:21,760
it's a little more syntax but we can use

00:23:16,250 --> 00:23:29,140
calc and multiply the number with one VW

00:23:21,760 --> 00:23:32,840
and of course here let me copy this and

00:23:29,140 --> 00:23:35,149
here we multiply with 1 vh yes it's a

00:23:32,840 --> 00:23:36,350
little more syntax than SAS but that's

00:23:35,149 --> 00:23:37,929
what you get when you have live

00:23:36,350 --> 00:23:42,640
variables that have structure to them

00:23:37,929 --> 00:23:45,830
it's not just old spitting out strings

00:23:42,640 --> 00:23:49,760
you might think what if I try to save

00:23:45,830 --> 00:23:54,260
myself at least one calc so what if I

00:23:49,760 --> 00:23:58,909
say 30 VW here so I set the width to

00:23:54,260 --> 00:24:02,330
just var size and then here I go and

00:23:58,909 --> 00:24:06,320
divide it by 1 VW and I see that this

00:24:02,330 --> 00:24:09,169
doesn't work why doesn't it work I would

00:24:06,320 --> 00:24:12,529
expect it to work 30 VW divided by 1 VW

00:24:09,169 --> 00:24:15,260
it's like elementary school maths the

00:24:12,529 --> 00:24:18,080
reason it doesn't work is that dividing

00:24:15,260 --> 00:24:20,330
by lengths is not supported in calc yet

00:24:18,080 --> 00:24:22,700
and the reason it's not supported is

00:24:20,330 --> 00:24:24,530
that when we specified calc the

00:24:22,700 --> 00:24:26,120
whole concept of something being invalid

00:24:24,530 --> 00:24:30,280
that computed value time did not exist

00:24:26,120 --> 00:24:32,840
yet so we were like but what if the

00:24:30,280 --> 00:24:34,700
denominator ends up being zero and then

00:24:32,840 --> 00:24:37,160
what do we do in that case its division

00:24:34,700 --> 00:24:38,420
by zero and we couldn't make it invalid

00:24:37,160 --> 00:24:40,610
that computed value time because the

00:24:38,420 --> 00:24:45,080
concept didn't exist so we can only

00:24:40,610 --> 00:24:46,610
divide by numbers so take away if you

00:24:45,080 --> 00:24:48,440
have a number in a variable you can

00:24:46,610 --> 00:24:51,110
always convert it to any unit you want

00:24:48,440 --> 00:24:53,780
by just multiplying with one and that

00:24:51,110 --> 00:24:57,050
unit in calc but if you have a unit

00:24:53,780 --> 00:24:59,810
there is absolutely no way to convert it

00:24:57,050 --> 00:25:01,400
to a number you just can't do this maybe

00:24:59,810 --> 00:25:02,510
you can do it of course you can do it

00:25:01,400 --> 00:25:04,910
with JavaScript you can do everything

00:25:02,510 --> 00:25:08,300
with JavaScript but with CSS there is

00:25:04,910 --> 00:25:10,940
just no way to do this so which brings

00:25:08,300 --> 00:25:14,030
us to our six takeaway you should use

00:25:10,940 --> 00:25:16,730
variables for pure data not CSS values

00:25:14,030 --> 00:25:18,050
only use variables for CSS values if

00:25:16,730 --> 00:25:21,740
it's something very quick that you've

00:25:18,050 --> 00:25:24,050
defined like in this specific rule and

00:25:21,740 --> 00:25:26,360
you're just gonna use it in there but in

00:25:24,050 --> 00:25:28,610
most cases just use variables for pure

00:25:26,360 --> 00:25:30,380
data you can do anything to pure data if

00:25:28,610 --> 00:25:32,330
it's just numbers you can always convert

00:25:30,380 --> 00:25:34,520
them to anything you want if it seems as

00:25:32,330 --> 00:25:38,690
values like 10 pixels you can't really

00:25:34,520 --> 00:25:43,000
do very much so many how many of you

00:25:38,690 --> 00:25:43,000
have used CSS animations or transitions

00:25:43,270 --> 00:25:48,680
about half the rest of you should

00:25:46,070 --> 00:25:52,190
definitely try them out they're very

00:25:48,680 --> 00:25:54,800
cool so those of you that have tried

00:25:52,190 --> 00:25:58,070
using CSS transitions and animations

00:25:54,800 --> 00:25:59,840
might be thinking at this point hmm CSS

00:25:58,070 --> 00:26:02,090
variables are cool you know what would

00:25:59,840 --> 00:26:04,700
be even cooler CSS variables and

00:26:02,090 --> 00:26:09,020
animations you might be a bit

00:26:04,700 --> 00:26:11,000
disappointed so here I have an animation

00:26:09,020 --> 00:26:15,530
very simple animation going from yellow

00:26:11,000 --> 00:26:18,160
to blue and I'm thinking what if instead

00:26:15,530 --> 00:26:23,650
of animating background color I say

00:26:18,160 --> 00:26:26,210
background color is the BG variable and

00:26:23,650 --> 00:26:31,760
here instead of setting background color

00:26:26,210 --> 00:26:33,500
we set the BG variable it should work

00:26:31,760 --> 00:26:35,000
right conceptually it should work I'm

00:26:33,500 --> 00:26:36,330
animating this value and background

00:26:35,000 --> 00:26:39,710
color is always set to this

00:26:36,330 --> 00:26:42,929
in this values live why doesn't it work

00:26:39,710 --> 00:26:45,149
so the reason it doesn't work is that

00:26:42,929 --> 00:26:47,610
even though variables are token streams

00:26:45,149 --> 00:26:49,590
and they're lightly parse the browser

00:26:47,610 --> 00:26:51,899
kind of pretends that it doesn't exactly

00:26:49,590 --> 00:26:53,730
know what type they are so they're like

00:26:51,899 --> 00:26:56,880
the browser is like oh I don't I don't

00:26:53,730 --> 00:26:59,279
really know how to interpolate this so

00:26:56,880 --> 00:27:01,409
nothing really happens actually there's

00:26:59,279 --> 00:27:03,539
also a browser bug in play here what

00:27:01,409 --> 00:27:07,320
should happen is that you should see

00:27:03,539 --> 00:27:08,820
yellow and blue abruptly going from one

00:27:07,320 --> 00:27:10,679
to the other with no transition you

00:27:08,820 --> 00:27:15,149
shouldn't be seeing transparent that's

00:27:10,679 --> 00:27:23,760
that's a bug but you wouldn't be seeing

00:27:15,149 --> 00:27:25,950
a transition sadly so this is the actual

00:27:23,760 --> 00:27:28,860
quote from the spec from anybody who is

00:27:25,950 --> 00:27:30,720
into that CSS variables can even be

00:27:28,860 --> 00:27:32,309
transitioned or animated but since the

00:27:30,720 --> 00:27:35,190
UI has no way to interpret their

00:27:32,309 --> 00:27:37,350
contents they always use the flips at

00:27:35,190 --> 00:27:38,580
50% behavior that is used for any other

00:27:37,350 --> 00:27:41,549
pair of values that can't be

00:27:38,580 --> 00:27:43,350
intelligently interpolated so this is

00:27:41,549 --> 00:27:45,600
also what it's supposed to happen when

00:27:43,350 --> 00:27:47,700
you use display for example in your key

00:27:45,600 --> 00:27:50,070
frames or any property that doesn't have

00:27:47,700 --> 00:27:51,960
a defined interpolation many browsers

00:27:50,070 --> 00:27:55,470
don't actually follow that so it's kind

00:27:51,960 --> 00:27:58,559
of a mess right now but yeah at this

00:27:55,470 --> 00:28:03,480
point CSS variables + animations equals

00:27:58,559 --> 00:28:05,360
chocolate ice cream of course Oh in the

00:28:03,480 --> 00:28:08,429
future you'll be able to define what

00:28:05,360 --> 00:28:14,399
type your variables are by using

00:28:08,429 --> 00:28:17,820
javascript so you'll define a CSS

00:28:14,399 --> 00:28:22,019
property a CSS variable in your CSS you

00:28:17,820 --> 00:28:23,669
will animate it with a CSS animation but

00:28:22,019 --> 00:28:26,610
to tell the browser how to animate it

00:28:23,669 --> 00:28:33,990
you'll have to use JavaScript okay

00:28:26,610 --> 00:28:35,639
that makes sense so one thing is even

00:28:33,990 --> 00:28:38,340
though you cannot animate the variables

00:28:35,639 --> 00:28:40,830
themselves you can use variables in key

00:28:38,340 --> 00:28:45,799
frames so if instead of having yellow

00:28:40,830 --> 00:28:49,440
and 0ca I wanted to have color 1 and

00:28:45,799 --> 00:28:51,779
color 2 and this would also be defined

00:28:49,440 --> 00:28:59,789
in the root element or whatever because

00:28:51,779 --> 00:29:03,659
they inherit so let me copy this and I

00:28:59,789 --> 00:29:05,519
can go to my animation here now returned

00:29:03,659 --> 00:29:11,250
it to its original state and now I'm

00:29:05,519 --> 00:29:13,279
gonna use variables in it as you can see

00:29:11,250 --> 00:29:15,990
this works just fine

00:29:13,279 --> 00:29:17,610
so using variable references and

00:29:15,990 --> 00:29:20,549
animation keyframes is fine

00:29:17,610 --> 00:29:26,519
it's animating the actual variables that

00:29:20,549 --> 00:29:28,110
you can't do also you here's here's

00:29:26,519 --> 00:29:29,730
something that might baffle you at first

00:29:28,110 --> 00:29:33,389
it did buffle me when I first discovered

00:29:29,730 --> 00:29:35,519
it so here is a transition when I'm

00:29:33,389 --> 00:29:38,039
clicking on the slide notice the active

00:29:35,519 --> 00:29:40,620
pseudo-class there when I'm clicking on

00:29:38,039 --> 00:29:43,470
the slide it turns blue because of the

00:29:40,620 --> 00:29:50,149
second pseudo class and I'm using CSS

00:29:43,470 --> 00:29:58,169
transitions for that but what if I said

00:29:50,149 --> 00:30:04,500
background VAR color and then I said

00:29:58,169 --> 00:30:08,190
colored here through yellow and color

00:30:04,500 --> 00:30:13,440
here to blue as you can see this

00:30:08,190 --> 00:30:17,070
actually does animate so when I first

00:30:13,440 --> 00:30:19,799
came across this I tweeted so it turns

00:30:17,070 --> 00:30:21,779
out we can use CSS variables in

00:30:19,799 --> 00:30:25,259
transitions but not animations this is

00:30:21,779 --> 00:30:28,169
very weird and I got a reply I think by

00:30:25,259 --> 00:30:30,779
table Atkins that basically what's

00:30:28,169 --> 00:30:33,029
happening in this case is that it's not

00:30:30,779 --> 00:30:35,340
the variable that is animate there is

00:30:33,029 --> 00:30:37,889
transitioning it's that the change of

00:30:35,340 --> 00:30:40,799
the variable is triggering a transition

00:30:37,889 --> 00:30:43,679
in background so if I restrict my

00:30:40,799 --> 00:30:45,570
transition here and I say only

00:30:43,679 --> 00:30:47,909
transition the color the darkest color

00:30:45,570 --> 00:30:49,500
property there's no transition anymore

00:30:47,909 --> 00:30:52,649
because that's not the actual transition

00:30:49,500 --> 00:30:55,230
I'm seeing if I change it to background

00:30:52,649 --> 00:30:56,700
color now I get my transition back

00:30:55,230 --> 00:30:59,720
because that's the property that is

00:30:56,700 --> 00:30:59,720
actually transitioning

00:31:00,930 --> 00:31:08,590
so now that I've discussed the basic

00:31:06,360 --> 00:31:10,870
syntax of variables some common use

00:31:08,590 --> 00:31:13,210
cases this is probably one of the most

00:31:10,870 --> 00:31:15,580
basic components that we all use but

00:31:13,210 --> 00:31:17,620
when I say in this slide pretty much

00:31:15,580 --> 00:31:19,600
extends to every component including web

00:31:17,620 --> 00:31:21,720
components but this is probably the

00:31:19,600 --> 00:31:25,510
simplest one ever it's just a button

00:31:21,720 --> 00:31:27,550
it's a flat design button so the the

00:31:25,510 --> 00:31:29,530
border is the same color as the text and

00:31:27,550 --> 00:31:31,090
then when I hover over it the border

00:31:29,530 --> 00:31:33,540
color becomes the background color and

00:31:31,090 --> 00:31:34,780
same here and I have a pink variation

00:31:33,540 --> 00:31:38,320
whoops

00:31:34,780 --> 00:31:41,920
with the pink class where I define

00:31:38,320 --> 00:31:44,260
different colors so that when I hover

00:31:41,920 --> 00:31:45,820
over it and everything it every color

00:31:44,260 --> 00:31:48,490
that was black in the previous one is

00:31:45,820 --> 00:31:50,730
now pink and as you can see I had to

00:31:48,490 --> 00:31:54,280
basically define my colors three times

00:31:50,730 --> 00:31:57,930
on every variation so how can CSS

00:31:54,280 --> 00:32:01,960
variables help with that I can define a

00:31:57,930 --> 00:32:07,570
color variable and set the color

00:32:01,960 --> 00:32:10,600
property to that variable and I can set

00:32:07,570 --> 00:32:15,610
it here as well and here as well and now

00:32:10,600 --> 00:32:17,650
I can go here and just set the dash dash

00:32:15,610 --> 00:32:19,570
Cola variable and we get rid of all this

00:32:17,650 --> 00:32:23,170
code and it just works exactly the same

00:32:19,570 --> 00:32:25,120
way even more importantly I don't need

00:32:23,170 --> 00:32:28,870
to have predefined variations anymore I

00:32:25,120 --> 00:32:36,850
can ditch this altogether and I can go

00:32:28,870 --> 00:32:39,220
here and I can say this and I can have

00:32:36,850 --> 00:32:40,180
infinite variations and of course I

00:32:39,220 --> 00:32:42,130
don't have to do it with an inline style

00:32:40,180 --> 00:32:43,690
but say this is a more complicated

00:32:42,130 --> 00:32:45,370
component and I've released it to the

00:32:43,690 --> 00:32:47,140
public and people want to skin it I

00:32:45,370 --> 00:32:48,580
don't need to provide predefined

00:32:47,140 --> 00:32:50,860
variations for them they can just set a

00:32:48,580 --> 00:32:54,070
color property and set it to whatever

00:32:50,860 --> 00:32:56,080
color they want which means both smaller

00:32:54,070 --> 00:32:58,660
CSS and more flexibility for people

00:32:56,080 --> 00:33:00,070
using the component and also it's not

00:32:58,660 --> 00:33:01,540
just about greater flexibility and

00:33:00,070 --> 00:33:03,880
smaller CSS it's also about

00:33:01,540 --> 00:33:06,600
encapsulation encapsulation is a concept

00:33:03,880 --> 00:33:09,700
from software engineering which means

00:33:06,600 --> 00:33:12,550
basically that people using a component

00:33:09,700 --> 00:33:13,720
don't have to know how it works

00:33:12,550 --> 00:33:15,880
internally and they can

00:33:13,720 --> 00:33:18,820
they can use it and its internal

00:33:15,880 --> 00:33:19,980
implementation can change and they don't

00:33:18,820 --> 00:33:23,380
have to change their code

00:33:19,980 --> 00:33:26,380
so notice how the background just

00:33:23,380 --> 00:33:29,500
abruptly changes when I hover what if I

00:33:26,380 --> 00:33:33,130
wanted to use a transition and I wanted

00:33:29,500 --> 00:33:36,220
to say instead of using a background on

00:33:33,130 --> 00:33:42,850
hover I want to use a book a book shadow

00:33:36,220 --> 00:33:46,480
an inset box shadow with no blur and a

00:33:42,850 --> 00:33:50,640
spread of one and instead has to be

00:33:46,480 --> 00:33:53,490
after the color right so as you can see

00:33:50,640 --> 00:33:57,190
and let's restrict this to book shadow

00:33:53,490 --> 00:34:00,070
so as you can see now I've changed how

00:33:57,190 --> 00:34:02,410
the cacao the hover works and if it was

00:34:00,070 --> 00:34:04,060
if I was using if people use it seeming

00:34:02,410 --> 00:34:06,160
my component had to override my

00:34:04,060 --> 00:34:07,690
declarations I would need to notify

00:34:06,160 --> 00:34:09,340
every single one of them that actually I

00:34:07,690 --> 00:34:11,110
changed how the component works and now

00:34:09,340 --> 00:34:12,430
you don't override the background you

00:34:11,110 --> 00:34:15,340
override the book shadow and they would

00:34:12,430 --> 00:34:18,310
have to repeat my book shadow now their

00:34:15,340 --> 00:34:19,990
existing code works notes no notice how

00:34:18,310 --> 00:34:22,570
I themed the second button by just

00:34:19,990 --> 00:34:24,370
saying color blue it still works even

00:34:22,570 --> 00:34:29,110
though I changed how the button

00:34:24,370 --> 00:34:31,000
component is implemented so it's take

00:34:29,110 --> 00:34:33,460
away CSS variables enable theming

00:34:31,000 --> 00:34:35,860
independent of CSS structure which i

00:34:33,460 --> 00:34:37,960
think is very important especially if

00:34:35,860 --> 00:34:40,090
you're you're using third-party

00:34:37,960 --> 00:34:41,680
components or your developer your

00:34:40,090 --> 00:34:46,210
JavaScript developer and your CSS

00:34:41,680 --> 00:34:47,920
developer at different people also one

00:34:46,210 --> 00:34:49,840
last thing you might be you might not

00:34:47,920 --> 00:34:51,160
you might have noticed that I I set the

00:34:49,840 --> 00:34:52,870
color to black here

00:34:51,160 --> 00:34:55,840
this means that everybody theming my

00:34:52,870 --> 00:34:57,640
component has to override this with

00:34:55,840 --> 00:35:00,580
their own color declaration which is

00:34:57,640 --> 00:35:05,560
easy if my component is just a tag but

00:35:00,580 --> 00:35:08,670
if it's like button dot my components

00:35:05,560 --> 00:35:11,380
don't my framework whatever you know

00:35:08,670 --> 00:35:13,150
some weird selector like that they would

00:35:11,380 --> 00:35:14,800
need to have something with was at least

00:35:13,150 --> 00:35:18,430
the same specificity and it gets really

00:35:14,800 --> 00:35:24,190
messy so it's actually better if I

00:35:18,430 --> 00:35:25,630
provide a fallback like this but then I

00:35:24,190 --> 00:35:26,320
have to repeat the fallback three times

00:35:25,630 --> 00:35:32,590
with

00:35:26,320 --> 00:35:36,880
kind of not dry it's very wet we enjoy

00:35:32,590 --> 00:35:38,530
typing it stands for so you might be

00:35:36,880 --> 00:35:40,150
thinking the whole point of variables it

00:35:38,530 --> 00:35:42,370
is to reduce repetition now you're

00:35:40,150 --> 00:35:45,580
repeating this fall back like multiple

00:35:42,370 --> 00:35:49,120
times one thing you can do is use

00:35:45,580 --> 00:35:51,520
variables for that as well let you can

00:35:49,120 --> 00:35:57,870
define a different variable whose value

00:35:51,520 --> 00:36:00,940
is this and then instead of using this

00:35:57,870 --> 00:36:04,210
Kolar coma black everywhere you can just

00:36:00,940 --> 00:36:05,740
use this internal variable and when you

00:36:04,210 --> 00:36:07,540
release your component you just tell

00:36:05,740 --> 00:36:08,980
people you don't tell people about -

00:36:07,540 --> 00:36:10,690
there's color if they don't see your

00:36:08,980 --> 00:36:11,770
code they don't know about it if they

00:36:10,690 --> 00:36:14,470
say you're cold well they're on their

00:36:11,770 --> 00:36:16,030
own and you just tell them if you want

00:36:14,470 --> 00:36:18,100
to change the color of the component use

00:36:16,030 --> 00:36:21,990
that color it's kind of like private

00:36:18,100 --> 00:36:24,850
variables but by convention instead of

00:36:21,990 --> 00:36:26,500
actual private variables which is

00:36:24,850 --> 00:36:30,310
basically what JavaScript had for ages

00:36:26,500 --> 00:36:32,680
so I guess it's fine so the ninth

00:36:30,310 --> 00:36:34,330
takeaway is that default default values

00:36:32,680 --> 00:36:36,910
are possible and yes I totally made up

00:36:34,330 --> 00:36:40,540
this term default default values but I'm

00:36:36,910 --> 00:36:42,520
convinced it will catch on so you can

00:36:40,540 --> 00:36:44,290
define another variable and set it to

00:36:42,520 --> 00:36:48,940
your your public variable with a

00:36:44,290 --> 00:36:51,370
fallback another huge use for CSS

00:36:48,940 --> 00:36:54,730
variables is responsive design there's

00:36:51,370 --> 00:36:56,770
often a gutter variable and then people

00:36:54,730 --> 00:36:59,410
set margins and padding's related to

00:36:56,770 --> 00:37:01,420
that and now you can have a media query

00:36:59,410 --> 00:37:02,920
that just changes this one variable and

00:37:01,420 --> 00:37:05,560
you don't have to change anything in the

00:37:02,920 --> 00:37:08,470
rest of your design this is of course

00:37:05,560 --> 00:37:10,690
this is a very simple case of this it's

00:37:08,470 --> 00:37:13,090
only using it in one place but you can

00:37:10,690 --> 00:37:15,100
still see how when I resize the window

00:37:13,090 --> 00:37:17,400
at some point I get the smaller gutter

00:37:15,100 --> 00:37:17,400
size

00:37:20,630 --> 00:37:26,720
and of course there the common use cases

00:37:23,000 --> 00:37:28,610
that you use SAS variables for these are

00:37:26,720 --> 00:37:30,050
kind of obvious so I don't think they're

00:37:28,610 --> 00:37:35,840
particularly interesting you can always

00:37:30,050 --> 00:37:38,750
use SAS for them still so it's I think

00:37:35,840 --> 00:37:40,340
these are kind of implied so the fence

00:37:38,750 --> 00:37:45,650
takeaways the CSS variables make

00:37:40,340 --> 00:37:47,600
responsive design easier so after the

00:37:45,650 --> 00:37:51,830
common use cases let's see some cool use

00:37:47,600 --> 00:37:54,380
cases prefixed properties are one are

00:37:51,830 --> 00:37:56,300
one of them sure many people use

00:37:54,380 --> 00:37:58,430
autoprefixer Zoar prefix free or

00:37:56,300 --> 00:37:59,990
something like that but these days were

00:37:58,430 --> 00:38:01,640
moving towards not having that many

00:37:59,990 --> 00:38:03,590
prefix properties so it's kind of

00:38:01,640 --> 00:38:06,050
overkill often to use another prefix

00:38:03,590 --> 00:38:09,890
surfer like this one property so CSS

00:38:06,050 --> 00:38:12,320
variables can help with that let's so

00:38:09,890 --> 00:38:13,670
you can use the universal selector use

00:38:12,320 --> 00:38:16,970
the trick I mentioned earlier about

00:38:13,670 --> 00:38:20,570
canceling inheritance which is setting

00:38:16,970 --> 00:38:21,890
the variable to initial and then you set

00:38:20,570 --> 00:38:25,310
both of the properties you want to

00:38:21,890 --> 00:38:29,660
replace with that variable and now I can

00:38:25,310 --> 00:38:31,760
use that variable everywhere and it

00:38:29,660 --> 00:38:38,030
works exactly the same as the normal

00:38:31,760 --> 00:38:41,930
clip path property so let's try doing a

00:38:38,030 --> 00:38:43,010
clip path here a polygon let's hope this

00:38:41,930 --> 00:38:44,960
works

00:38:43,010 --> 00:38:48,320
because writing a clip path on stage is

00:38:44,960 --> 00:38:52,100
kind of tricky than 50-percent

00:38:48,320 --> 00:38:56,720
horizontal and 100% vertical I'm trying

00:38:52,100 --> 00:38:59,870
to do a diamond like a rhombus shape and

00:38:56,720 --> 00:39:02,720
then zero horizontal and 50% variable

00:38:59,870 --> 00:39:05,360
okay that is it that's it it worked and

00:39:02,720 --> 00:39:06,880
now I can apply it on any of these tips

00:39:05,360 --> 00:39:10,730
I want you can see it's not

00:39:06,880 --> 00:39:12,200
inadvertently inherited I can apply it

00:39:10,730 --> 00:39:14,210
the same clip paths everywhere basically

00:39:12,200 --> 00:39:16,700
works exactly the same as the normal

00:39:14,210 --> 00:39:19,190
clip path the only caveat is that you

00:39:16,700 --> 00:39:21,020
cannot animate it which is a pretty big

00:39:19,190 --> 00:39:22,160
one because clip animated clip paths are

00:39:21,020 --> 00:39:25,670
pretty awesome but if you don't need

00:39:22,160 --> 00:39:27,650
animation that could be a solution so

00:39:25,670 --> 00:39:31,420
CSS variables enable you to set multiple

00:39:27,650 --> 00:39:33,650
properties at once if you use this trick

00:39:31,420 --> 00:39:35,660
also CSS variable

00:39:33,650 --> 00:39:38,660
unable you to set property shortcuts

00:39:35,660 --> 00:39:41,630
kind of like mix-ins with only one

00:39:38,660 --> 00:39:46,520
property so in this case I wanted to

00:39:41,630 --> 00:39:51,079
have a purple shadow and only define the

00:39:46,520 --> 00:39:52,640
X Y in the XY and blur of Ambler offsets

00:39:51,079 --> 00:39:55,220
instead of having to define the color

00:39:52,640 --> 00:39:56,839
every time so I used the same trick for

00:39:55,220 --> 00:40:00,079
canceling inheritance you'll see it in

00:39:56,839 --> 00:40:01,700
all of these demos and I say I set box

00:40:00,079 --> 00:40:04,369
shadow to whatever the value of purple

00:40:01,700 --> 00:40:06,410
shadow is if it's defined plus Rebecca

00:40:04,369 --> 00:40:08,420
purple because I wanted the color to

00:40:06,410 --> 00:40:12,799
always be Rebecca purple and then I can

00:40:08,420 --> 00:40:17,270
provide only the extra parts that are

00:40:12,799 --> 00:40:24,380
missing oh of course like I could always

00:40:17,270 --> 00:40:31,190
do something like this instead and here

00:40:24,380 --> 00:40:33,920
specify poke shadow with four of this

00:40:31,190 --> 00:40:35,750
color it's two ways to do the same thing

00:40:33,920 --> 00:40:38,089
and which ones better depends on your

00:40:35,750 --> 00:40:41,690
specific use case and how big this part

00:40:38,089 --> 00:40:43,279
is and it you should use critical

00:40:41,690 --> 00:40:47,200
thinking and decide what's better for

00:40:43,279 --> 00:40:49,369
your specific use case but it's

00:40:47,200 --> 00:40:51,440
interesting to keep in mind that CSS

00:40:49,369 --> 00:40:53,390
variables let you create single property

00:40:51,440 --> 00:40:55,130
mix-ins like shortcuts to properties

00:40:53,390 --> 00:40:57,380
what programmers would call function

00:40:55,130 --> 00:40:59,270
carrying in a way like it's kind of

00:40:57,380 --> 00:41:04,490
similar to function carry property

00:40:59,270 --> 00:41:06,529
carrying CSS variables also lets you

00:41:04,490 --> 00:41:09,500
create your own long hands like poke

00:41:06,529 --> 00:41:11,299
shadow is a property that just has that

00:41:09,500 --> 00:41:13,490
we only have box shadow we don't have

00:41:11,299 --> 00:41:15,950
box shadow XY blur spread all those

00:41:13,490 --> 00:41:18,170
separately but we can hack it with CSS

00:41:15,950 --> 00:41:20,119
variables so here I've defined all this

00:41:18,170 --> 00:41:22,220
property all these variables I've set

00:41:20,119 --> 00:41:24,500
book shadow to all these variables

00:41:22,220 --> 00:41:26,630
all of them have fall backs notice that

00:41:24,500 --> 00:41:31,250
in this one the fallback is actually a

00:41:26,630 --> 00:41:34,369
whitespace character except blur which

00:41:31,250 --> 00:41:37,130
means I have to set at least blur and

00:41:34,369 --> 00:41:39,589
then I can set all the other ones so

00:41:37,130 --> 00:41:43,339
let's set it to 10 pixels and then let's

00:41:39,589 --> 00:41:45,650
get box shadow color set it to blue I

00:41:43,339 --> 00:41:46,460
don't know something let's make this

00:41:45,650 --> 00:41:57,680
bigger

00:41:46,460 --> 00:42:01,130
okay and then on let's say on hover this

00:41:57,680 --> 00:42:06,160
I think I've run into a small bug with

00:42:01,130 --> 00:42:16,790
my editor let's hope this works

00:42:06,160 --> 00:42:18,470
book shadow color red and it works so

00:42:16,790 --> 00:42:20,450
you can see how I was able to override

00:42:18,470 --> 00:42:22,369
the call only the color of the book

00:42:20,450 --> 00:42:24,950
shadow without having to override all

00:42:22,369 --> 00:42:26,839
the other parameters so Thirteen's take

00:42:24,950 --> 00:42:32,660
away CSS variables enable you to create

00:42:26,839 --> 00:42:34,040
custom long hands and also you know how

00:42:32,660 --> 00:42:35,570
it's really on knowing how every time if

00:42:34,040 --> 00:42:37,820
even if you just want to prepare a

00:42:35,570 --> 00:42:39,980
little text some text somewhere and

00:42:37,820 --> 00:42:43,400
nothing more you have to write an entire

00:42:39,980 --> 00:42:47,240
rule well you don't have to you can just

00:42:43,400 --> 00:42:49,430
set a prepend variable and then you can

00:42:47,240 --> 00:42:53,119
set a before rule on the universal

00:42:49,430 --> 00:42:55,609
selector this is implied and the content

00:42:53,119 --> 00:42:57,530
is the value of the prepend variable

00:42:55,609 --> 00:42:59,330
which means if the prepend variables not

00:42:57,530 --> 00:43:04,400
set we don't get anything as you can see

00:42:59,330 --> 00:43:07,280
right now but if you want you can set

00:43:04,400 --> 00:43:11,900
prepend to some value like let's say

00:43:07,280 --> 00:43:13,609
Yolo and you get that text without

00:43:11,900 --> 00:43:15,770
having to write a whole new rule like

00:43:13,609 --> 00:43:19,930
you could have other CSS properties here

00:43:15,770 --> 00:43:24,260
and of course this also works from an

00:43:19,930 --> 00:43:27,230
inline style as well if this is for the

00:43:24,260 --> 00:43:28,940
cases where this is useful so CSS

00:43:27,230 --> 00:43:30,740
variables also enable you to kind of

00:43:28,940 --> 00:43:34,670
define your own properties in some cases

00:43:30,740 --> 00:43:38,030
which i think is cool so CSS variables

00:43:34,670 --> 00:43:42,050
aren't just useful for with HTML they're

00:43:38,030 --> 00:43:45,560
also useful with SVG here is a pair of

00:43:42,050 --> 00:43:47,960
eyes this is the SVG used to define them

00:43:45,560 --> 00:43:53,030
it's okay if you don't understand it the

00:43:47,960 --> 00:43:56,150
main thing to understand is that is I've

00:43:53,030 --> 00:43:58,170
assigned the class of iris to the actual

00:43:56,150 --> 00:44:00,930
iris here

00:43:58,170 --> 00:44:02,849
and I've applied some CSS to it and and

00:44:00,930 --> 00:44:07,079
I can change the CSS and have the eyes

00:44:02,849 --> 00:44:08,849
move however this is these are kind of

00:44:07,079 --> 00:44:10,769
arbitrary values if I want the eyes to

00:44:08,849 --> 00:44:14,849
look all the way there well all the way

00:44:10,769 --> 00:44:16,799
here it's 25 pixels and if I want them

00:44:14,849 --> 00:44:20,670
to look although all the other way all

00:44:16,799 --> 00:44:22,859
the way there it's 75 pixels which is

00:44:20,670 --> 00:44:26,130
kind of a weird value to remember so

00:44:22,859 --> 00:44:30,210
instead I can use a CSS variable which

00:44:26,130 --> 00:44:35,190
goes from 0 to 1 and use calc here and

00:44:30,210 --> 00:44:37,829
say if it's from 25 pixels to 75 so plus

00:44:35,190 --> 00:44:43,710
50 pixels multiplied by the value of the

00:44:37,829 --> 00:44:47,130
look variable and now I can move the

00:44:43,710 --> 00:44:57,089
variable from 0 to 1 and it just works

00:44:47,130 --> 00:44:58,680
so CSS variables + SVG equals love CSS

00:44:57,089 --> 00:45:02,670
variables and JavaScript are also very

00:44:58,680 --> 00:45:05,630
interesting combination you can use the

00:45:02,670 --> 00:45:10,950
normal methods that we already have to

00:45:05,630 --> 00:45:12,390
get in set CSS variables how many of

00:45:10,950 --> 00:45:15,779
your chrome are not comfortable with

00:45:12,390 --> 00:45:19,170
javascript by the way how many of you

00:45:15,779 --> 00:45:20,460
are comfortable with javascript how many

00:45:19,170 --> 00:45:25,140
of you did not raise your hands in any

00:45:20,460 --> 00:45:26,190
of the two questions anyway for those of

00:45:25,140 --> 00:45:28,349
you that are not comfortable with

00:45:26,190 --> 00:45:30,150
JavaScript I promise that the code in

00:45:28,349 --> 00:45:31,500
this section is very short and I will I

00:45:30,150 --> 00:45:37,680
will explain it as I go

00:45:31,500 --> 00:45:39,809
so get property value lets you get the

00:45:37,680 --> 00:45:42,029
value of the of whatever CSS property

00:45:39,809 --> 00:45:44,519
you pass into it from the end line style

00:45:42,029 --> 00:45:46,109
if it's if your property is not

00:45:44,519 --> 00:45:48,779
necessarily on the end line style you

00:45:46,109 --> 00:45:51,750
can use get computed style with the same

00:45:48,779 --> 00:45:53,130
function name and to set the variable on

00:45:51,750 --> 00:45:55,710
the inline style you can use set

00:45:53,130 --> 00:45:57,900
property why is it set property and get

00:45:55,710 --> 00:46:02,240
property value I have no idea I think it

00:45:57,900 --> 00:46:05,369
should be get property but who knows and

00:46:02,240 --> 00:46:07,950
just with these few functions we can do

00:46:05,369 --> 00:46:10,230
really cool things for example this is

00:46:07,950 --> 00:46:11,480
setting one event listener to on the

00:46:10,230 --> 00:46:13,430
mousemove event

00:46:11,480 --> 00:46:15,770
every time I move the mouse it's setting

00:46:13,430 --> 00:46:18,590
to CSS variables on the root element on

00:46:15,770 --> 00:46:23,840
the HTML element Mouse X and Mouse y and

00:46:18,590 --> 00:46:25,430
their values are go from 0 to 1 and they

00:46:23,840 --> 00:46:27,590
reflect how much I've moved my cursor

00:46:25,430 --> 00:46:29,780
relative to the viewport width and the

00:46:27,590 --> 00:46:32,869
viewport height so let's see how I could

00:46:29,780 --> 00:46:36,980
use this here I have a simple radial

00:46:32,869 --> 00:46:40,480
gradient in the center and I can replace

00:46:36,980 --> 00:46:44,330
the static 50 percent with 100 percent x

00:46:40,480 --> 00:46:46,820
mouse X and you can see that now it

00:46:44,330 --> 00:46:51,410
moves with my cursor horizontally and I

00:46:46,820 --> 00:46:54,380
can even do this vertically and now it

00:46:51,410 --> 00:46:58,070
moves with my cursor and I can change my

00:46:54,380 --> 00:47:01,340
gradient and I I don't have to change my

00:46:58,070 --> 00:47:02,869
JavaScript because my variables are

00:47:01,340 --> 00:47:05,060
generic enough that I can just transform

00:47:02,869 --> 00:47:07,190
them as I need in my CSS which is

00:47:05,060 --> 00:47:08,660
excellent if the CSS developer and the

00:47:07,190 --> 00:47:10,070
JavaScript developer different people

00:47:08,660 --> 00:47:12,530
because you don't have to go to the

00:47:10,070 --> 00:47:15,500
JavaScript developer and say hey I

00:47:12,530 --> 00:47:17,990
actually changed my mind could you like

00:47:15,500 --> 00:47:21,560
make a small change there and they're

00:47:17,990 --> 00:47:23,630
like bloody hell you keep doing this I'm

00:47:21,560 --> 00:47:26,359
so fed up with you you designers you

00:47:23,630 --> 00:47:29,210
keep changing you keep changing your

00:47:26,359 --> 00:47:31,310
mind and I can't do this anymore no no

00:47:29,210 --> 00:47:34,070
more of that you just know the developer

00:47:31,310 --> 00:47:36,020
to set some basic CSS variables and you

00:47:34,070 --> 00:47:37,520
use them in your CSS as you see fit and

00:47:36,020 --> 00:47:39,740
if they're generic enough you can use

00:47:37,520 --> 00:47:43,280
them in multiple cases here I've used

00:47:39,740 --> 00:47:45,050
them for a gradient remember this I can

00:47:43,280 --> 00:47:47,180
actually change this variable to Mouse X

00:47:45,050 --> 00:47:50,359
and now the eyes move with my mouse

00:47:47,180 --> 00:47:51,859
cursor and it's exactly the same

00:47:50,359 --> 00:47:55,730
variable I didn't have to check to write

00:47:51,859 --> 00:47:59,210
any new JavaScript code for this also I

00:47:55,730 --> 00:48:01,670
can now use the values of inputs in my

00:47:59,210 --> 00:48:03,410
CSS if I just you if I just write a few

00:48:01,670 --> 00:48:07,850
lines of JavaScript that set a value

00:48:03,410 --> 00:48:10,480
variable on every input element so

00:48:07,850 --> 00:48:12,710
here's a slider it has a gradient on it

00:48:10,480 --> 00:48:15,020
it's just an input type equals range

00:48:12,710 --> 00:48:16,490
there is a bit styled and it has this

00:48:15,020 --> 00:48:20,500
gradient on it and the gradient is

00:48:16,490 --> 00:48:23,060
static but I can change it to be dynamic

00:48:20,500 --> 00:48:25,200
so the values of the slider is zero to a

00:48:23,060 --> 00:48:29,400
hundred so I will multiply one

00:48:25,200 --> 00:48:31,380
percent with the value of the slider and

00:48:29,400 --> 00:48:34,230
now you can see that as I move the

00:48:31,380 --> 00:48:36,500
slider the gradient moves which can be

00:48:34,230 --> 00:48:39,930
very useful for some styled sliders and

00:48:36,500 --> 00:48:41,760
this doesn't look very nice but I'm sure

00:48:39,930 --> 00:48:45,270
the designers among you can come up with

00:48:41,760 --> 00:48:47,490
a lot more interesting use cases also

00:48:45,270 --> 00:48:49,950
I'm sure you've seen all these

00:48:47,490 --> 00:48:51,510
containers that scroll and you and they

00:48:49,950 --> 00:48:53,220
do cool things as you scroll they show

00:48:51,510 --> 00:48:55,170
progress bars and things like that you

00:48:53,220 --> 00:48:56,400
can just have a scrolling class go over

00:48:55,170 --> 00:48:59,940
all the elements with the scrolling

00:48:56,400 --> 00:49:02,430
class add an S scroll event and then set

00:48:59,940 --> 00:49:04,650
the scroll variable that is how much

00:49:02,430 --> 00:49:08,310
have you scrolled and it goes from 0 to

00:49:04,650 --> 00:49:10,560
1 again and you can use it here I have a

00:49:08,310 --> 00:49:12,330
linear gradient nothing happens if I

00:49:10,560 --> 00:49:21,900
scroll right now but I can change this

00:49:12,330 --> 00:49:25,440
20% to calc 100% x 4 scroll I'm trying

00:49:21,900 --> 00:49:29,540
to go a bit fast because of way ran out

00:49:25,440 --> 00:49:33,750
of time but I hope you guys are enjoying

00:49:29,540 --> 00:49:36,660
so as you can see now I if I scroll I

00:49:33,750 --> 00:49:39,270
get this background progress bar and

00:49:36,660 --> 00:49:42,440
again with the same variable I can do a

00:49:39,270 --> 00:49:48,120
huge range of things if I want to change

00:49:42,440 --> 00:49:51,420
the the background and make it red and

00:49:48,120 --> 00:49:54,990
only at the top I can do that I can even

00:49:51,420 --> 00:50:00,350
go and say actually I want the

00:49:54,990 --> 00:50:09,900
background to be a color and HSL color

00:50:00,350 --> 00:50:14,220
whose hue changes from 0 to 360 not

00:50:09,900 --> 00:50:18,750
serially 50% lightness depending on how

00:50:14,220 --> 00:50:22,850
much I've scrolled which is kind of

00:50:18,750 --> 00:50:26,730
crazy but I mean the sky's the limit

00:50:22,850 --> 00:50:28,290
so the last takeaway is that CSS

00:50:26,730 --> 00:50:32,060
variables are a revolution for

00:50:28,290 --> 00:50:34,650
separation of style and behavior CSS

00:50:32,060 --> 00:50:37,310
developers and JavaScript developers can

00:50:34,650 --> 00:50:39,080
work in the in their preferred way and

00:50:37,310 --> 00:50:42,200
ss variables basically define an API

00:50:39,080 --> 00:50:45,440
between the CSS code and the JavaScript

00:50:42,200 --> 00:50:47,870
code so one of the arguments that react

00:50:45,440 --> 00:50:50,780
people often used for moving all the CSS

00:50:47,870 --> 00:50:53,510
code to JavaScript is that CSS is not

00:50:50,780 --> 00:50:55,730
flexible enough and you cannot have CSS

00:50:53,510 --> 00:50:59,120
response to like scroll events and

00:50:55,730 --> 00:51:01,610
resize events and input events and all

00:50:59,120 --> 00:51:03,200
sorts of things well now you can and you

00:51:01,610 --> 00:51:05,240
don't have to move your presentation to

00:51:03,200 --> 00:51:09,950
JavaScript to achieve it you can just

00:51:05,240 --> 00:51:12,230
set CSS variables so you can keep your

00:51:09,950 --> 00:51:13,730
style where it belongs and you can keep

00:51:12,230 --> 00:51:17,630
your behavior where it belongs and

00:51:13,730 --> 00:51:23,150
everyone's happy so these are the URLs

00:51:17,630 --> 00:51:24,550
of the specs and one last slide about

00:51:23,150 --> 00:51:27,680
what's coming in the future

00:51:24,550 --> 00:51:29,750
mix-ins and variables are not the future

00:51:27,680 --> 00:51:31,550
by the way this is variables are the

00:51:29,750 --> 00:51:34,040
present every browser supports them

00:51:31,550 --> 00:51:36,050
except edge which is coming

00:51:34,040 --> 00:51:39,950
mix-ins are the future because they only

00:51:36,050 --> 00:51:42,320
have chrome support right now you define

00:51:39,950 --> 00:51:43,790
mix-ins basically by a variable whose

00:51:42,320 --> 00:51:46,340
value is multiple decorative

00:51:43,790 --> 00:51:49,850
declarations I can add a border here for

00:51:46,340 --> 00:51:52,730
example and then you call it with an at

00:51:49,850 --> 00:51:55,370
apply rule which is useful for things

00:51:52,730 --> 00:51:56,960
that are static mix-ins sadly it's not

00:51:55,370 --> 00:51:59,810
very useful for things that need

00:51:56,960 --> 00:52:04,190
variables because if I use a variable

00:51:59,810 --> 00:52:07,610
here for example let's say color and I

00:52:04,190 --> 00:52:09,980
set the variable here to let's say

00:52:07,610 --> 00:52:12,560
orange I get as you can see nothing

00:52:09,980 --> 00:52:14,480
changes the variable is resolved based

00:52:12,560 --> 00:52:16,250
on the calling scope which is here which

00:52:14,480 --> 00:52:18,230
is kind of useless because why would you

00:52:16,250 --> 00:52:21,080
declare your variables well you've where

00:52:18,230 --> 00:52:23,300
you've declared your mixin but still

00:52:21,080 --> 00:52:24,950
it's it's it's something for example it

00:52:23,300 --> 00:52:28,280
would be useful for clear fix or all

00:52:24,950 --> 00:52:30,110
these mixes that don't really change so

00:52:28,280 --> 00:52:32,650
that's about it thank you very much I

00:52:30,110 --> 00:52:32,650
hope you enjoy it

00:52:33,070 --> 00:52:35,130
you

00:52:42,040 --> 00:52:44,100

YouTube URL: https://www.youtube.com/watch?v=kZOJCVvyF-4


