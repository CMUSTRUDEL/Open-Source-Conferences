Title: The Etymology of Programming - Brittany Storoz - JSConf EU 2018
Publication date: 2018-06-26
Playlist: JSConf EU 2018
Description: 
	Developers are constantly throwing around jargon and buzz words when describing applications and talking through code. To a new engineer, it can seem like we’re speaking an entirely different language. One might assume we’ve tried come up with semantic metaphors for what we’re doing, but how often do we actually stop to think about where these terms came from? This talk will dig deep into the origins of our lingo and how we’ve built a vocabulary full of quirky terms and mysterious phrases.

OMG JSConf EU is coming back in 2019 https://2019.jsconf.eu/
Captions: 
	00:00:09,540 --> 00:00:12,660
Hi, everybody.

00:00:12,670 --> 00:00:18,609
My name is Brittany, and, like I to mention ed, I recently moved out to Denver to be an

00:00:18,609 --> 00:00:22,679
instructor at Turing School of Software and Design.

00:00:22,679 --> 00:00:31,679
I've been teaching front-end web development for two years now, and one of the things we

00:00:31,679 --> 00:00:39,200
emphasise with our students is they should be using proper vocabulary, and articulating

00:00:39,200 --> 00:00:43,100
themselves appropriately.

00:00:43,100 --> 00:00:48,850
Our student had a tendency to have a block of code and described it by saying things

00:00:48,850 --> 00:00:56,680
like, "This thing called this over here, and then that moves over here, and this things

00:00:56,680 --> 00:00:59,560
calls this and sends information over there."

00:00:59,560 --> 00:01:03,120
We are like I don't understand what you're saying.

00:01:03,120 --> 00:01:10,450
We were teaching them the proper terms to use and the terms they should avoid as well.

00:01:10,450 --> 00:01:18,179
In doing so, I started to realise we have a lot of bizarre jargony words in our industry

00:01:18,179 --> 00:01:22,829
that we use, words that I wouldn't normally think twice about.

00:01:22,829 --> 00:01:28,670
My students would either laugh at or ask me questions about, and I realised I didn't know

00:01:28,670 --> 00:01:30,829
how to explain some of them.

00:01:30,829 --> 00:01:37,170
So that prompted me to do a little bit of research, and look some of the terminology

00:01:37,170 --> 00:01:39,850
we use.

00:01:39,850 --> 00:01:46,930
I made a tiny list of words I'm going to talk about today with all of you.

00:01:46,930 --> 00:01:53,610
Our first example is the term "bug".

00:01:53,610 --> 00:02:01,729
And this is one of the most classic origin stories that we have in programming.

00:02:01,729 --> 00:02:11,760
The term "bug" was popularised in the 1940s by a Harvard University technical team.

00:02:11,760 --> 00:02:18,680
They found an actual moth in one of their machines causing it to malfunction, so, noted

00:02:18,680 --> 00:02:27,840
computer scientist Grace Hopper removed that moth and taped it to a bug log, if you will

00:02:27,840 --> 00:02:32,780
with the caption "first actual case of bug being found".

00:02:32,780 --> 00:02:39,849
So, this was not the very first instance of that term being used in programming.

00:02:39,849 --> 00:02:44,690
The phrase "bugs in a computer" had been used frequently before then.

00:02:44,690 --> 00:02:51,220
Back in that day, computers were really big, and they were really hot, so they often attracted

00:02:51,220 --> 00:02:55,989
flies and moths that would cause the machines to malfunction.

00:02:55,989 --> 00:03:04,019
Even though this team didn't coin the term, this incident caused the widespread popularity

00:03:04,019 --> 00:03:11,069
of the term "bug" which led rise to the term "debugging" as well.

00:03:11,069 --> 00:03:19,510
Since then, a couple of people have criticised the term "bug", because it distances the developers

00:03:19,510 --> 00:03:21,150
from blame.

00:03:21,150 --> 00:03:26,109
It implies that it was something other than developer error that caused the programme

00:03:26,109 --> 00:03:27,109
to malfunction.

00:03:27,109 --> 00:03:33,370
So, some computer scientists have offered up a couple of alternatives, like "defect"

00:03:33,370 --> 00:03:37,879
and, my favourite, "blunder".

00:03:37,879 --> 00:03:42,930
Neither of them really took off, although I would love to see us create "blunder reports"

00:03:42,930 --> 00:03:44,670
— I think that would be hilarious.

00:03:44,670 --> 00:03:49,360
I think "bug" is pretty much here to stay.

00:03:49,360 --> 00:03:53,650
That's one of the most concrete examples of an origin story that we have for a term that

00:03:53,650 --> 00:03:55,590
we are using in programming.

00:03:55,590 --> 00:04:00,099
Other words are a little bit hazier, or it's a little bit more difficult to track down

00:04:00,099 --> 00:04:03,109
concrete origins of where they came from.

00:04:03,109 --> 00:04:08,250
But they still have really interesting theories behind them, and interesting metaphors that

00:04:08,250 --> 00:04:10,129
we can pull out of them.

00:04:10,129 --> 00:04:15,910
One of my favourite is "throw" and "catch".

00:04:15,910 --> 00:04:22,970
When you're programming, maybe you have some try catch blocks, and you're going to throw

00:04:22,970 --> 00:04:27,220
an exception that is going to be caught.

00:04:27,220 --> 00:04:35,370
The first appearance of these terms in programming was in MacLisp which is a dialect of the Lisp

00:04:35,370 --> 00:04:37,240
language in 1972.

00:04:37,240 --> 00:04:44,410
They had two more error-handling primitives which were throw and catch.

00:04:44,410 --> 00:04:51,580
The lead developers working on this language at the time were American, and in America,

00:04:51,580 --> 00:04:55,140
the sport of baseball is really popular.

00:04:55,140 --> 00:05:01,949
I know it's not very widespread elsewhere — probably because it is incredibly boring!

00:05:01,949 --> 00:05:09,710
— but it offers an insight to the explanation of these terms.

00:05:09,710 --> 00:05:14,699
In baseball, a player can commit a throwing error.

00:05:14,699 --> 00:05:21,199
The player might throw the ball just slightly out of reach for their team-mates, or the

00:05:21,199 --> 00:05:27,560
ball might take an un-Special Constable bounce, or maybe it hits team-mate, or a base.

00:05:27,560 --> 00:05:29,910
Any number of things could go wrong there.

00:05:29,910 --> 00:05:36,560
But ultimately, the goal for each one of these throws, is to catch that ball, to reduce the

00:05:36,560 --> 00:05:41,660
amount of damage that that error is actually going to do, right?

00:05:41,660 --> 00:05:48,139
So we have the same concept in programming, where we want to catch any exceptions that

00:05:48,139 --> 00:05:54,069
are thrown, and surface those errors as soon as possible, as provide as much information

00:05:54,069 --> 00:06:00,449
about what went wrong so our programmes don't fail in these catastrophic ways, Day okay?

00:06:00,449 --> 00:06:06,340
That's an example of one of the theories that is not completely set in stone.

00:06:06,340 --> 00:06:11,120
A little bit more speculative, but still offers us a metaphor on how to think about these

00:06:11,120 --> 00:06:17,180
terms that we work with every day.

00:06:17,180 --> 00:06:20,060
Let's talk about foobar a little bit.

00:06:20,060 --> 00:06:26,100
Who uses foobar bath?

00:06:26,100 --> 00:06:27,100
Me to.

00:06:27,100 --> 00:06:28,100
I used to.

00:06:28,100 --> 00:06:33,590
I stopped recently, and I will get into that in a little bit.

00:06:33,590 --> 00:06:34,970
People understand why?

00:06:34,970 --> 00:06:35,970
Yep.

00:06:35,970 --> 00:06:44,490
So, foobar was first used in programming by MIT's tech model railroad club, and this club

00:06:44,490 --> 00:06:51,729
was essentially a bunch of nerds or kid playing with model train sets, right?

00:06:51,729 --> 00:06:59,720
They built this complex system for automating train sets, and these systems had a bunch

00:06:59,720 --> 00:07:07,229
of kill switches where you would trigger one if something catastrophic was going to happen,

00:07:07,229 --> 00:07:14,230
a train was going to crash in another train or other obstruction.

00:07:14,230 --> 00:07:21,780
They had had little dashboard alongside their system that usually showed, like, a counter

00:07:21,780 --> 00:07:27,069
or a clock — something of that sort — but whenever one of these kill switches was engaged,

00:07:27,069 --> 00:07:31,500
the dashboard instead flashed the word "foo".

00:07:31,500 --> 00:07:37,050
So thing about how "foo" was being used here to represent and denote that something terrible

00:07:37,050 --> 00:07:40,169
happened, okay?

00:07:40,169 --> 00:07:44,220
This leads us into the origin of where foobar came from.

00:07:44,220 --> 00:07:50,900
As an instructor, I do a lot of demonstrative coding for my students, and I was using foobar

00:07:50,900 --> 00:07:58,820
for a biochemical, until one of my students, who was a veteran, was explaining that foobar

00:07:58,820 --> 00:08:02,470
was a military slang term.

00:08:02,470 --> 00:08:07,889
That stood for "messed up beyond all recognition", right?

00:08:07,889 --> 00:08:13,400
So people would use this term talking about the missions that they were on, often sometimes

00:08:13,400 --> 00:08:17,789
the severity of the injuries that soldiers sustained, right?

00:08:17,789 --> 00:08:25,159
And, in the tech world, we decided to try to soften the definition of this acronym and

00:08:25,159 --> 00:08:30,880
like, "It doesn't stand for it, it actually stands for fouled up beyond all repair for

00:08:30,880 --> 00:08:36,800
our software", and we changed the spelling a little bit, but we still maintained that

00:08:36,800 --> 00:08:40,680
phonetic composition that we have with this they remember, right?

00:08:40,680 --> 00:08:42,409
So even — with this term.

00:08:42,409 --> 00:08:48,589
Even though we try to soften the way we use these terms or make them more gentle, those

00:08:48,589 --> 00:08:53,370
original conceptions are still there, right?

00:08:53,370 --> 00:08:57,770
This term can still be very triggering for certain people.

00:08:57,770 --> 00:09:04,810
The software engineering community has no lack of terms with negative connotations to

00:09:04,810 --> 00:09:05,810
them.

00:09:05,810 --> 00:09:07,920
Think about the terms "master/slave".

00:09:07,920 --> 00:09:14,680
We've done a decent job of trying to get that out of our vocabulary but it won't easy.

00:09:14,680 --> 00:09:23,600
In 2003, the city of Los Angeles, or county of Los Angeles, had filed a request that manufacturers

00:09:23,600 --> 00:09:30,510
stop using those terms in their products, and the tech industry being the tech industry

00:09:30,510 --> 00:09:36,620
was, "No, we want to keep our terms master/slave, don't tell us what to do," and they got really

00:09:36,620 --> 00:09:38,899
angry about it.

00:09:38,899 --> 00:09:44,670
Los Angeles was, "Sorry, never mind, it was just a request," and kind of backed off.

00:09:44,670 --> 00:09:52,730
But the following year, the global language monitor decided to name master/slave as the

00:09:52,730 --> 00:09:56,370
most politically incorrect term of 2004.

00:09:56,370 --> 00:09:59,870
Which was really great response to that incident, I thought.

00:09:59,870 --> 00:10:07,630
"Whitelist, blacklist" — I had another scenario in class one day where one of my students

00:10:07,630 --> 00:10:12,700
some some documentation on MDM that used a variable called "whitelist", and they were

00:10:12,700 --> 00:10:17,350
trying to rework some of the code in that example but were putting things that should

00:10:17,350 --> 00:10:20,920
be blocked into this whitelist array.

00:10:20,920 --> 00:10:26,820
As I was trying to explain to him what it meant, I was, "Think about the difference

00:10:26,820 --> 00:10:29,901
between a whitelist and a blacklist".

00:10:29,901 --> 00:10:35,160
I kind of stopped myself short realising how negative those terms are in the modern-day

00:10:35,160 --> 00:10:39,160
connotations that those have nowadays.

00:10:39,160 --> 00:10:44,900
The origin of those terms, for anyone that might not be following, they imply anything

00:10:44,900 --> 00:10:49,200
that is white is good, and anything that is black is bad.

00:10:49,200 --> 00:10:54,990
There are a lot of different reasons for the origins of those terms, and maybe perhaps,

00:10:54,990 --> 00:10:59,410
when they came around, they weren't necessarily racist, or they didn't hold the connotations

00:10:59,410 --> 00:11:04,279
that they do today, but a because they hold those connotations today, they should definitely

00:11:04,279 --> 00:11:08,260
be removed from our vernacular as well, our vocabulary.

00:11:08,260 --> 00:11:10,040
I'm going on tangents here.

00:11:10,040 --> 00:11:15,130
Let me get back to a couple of other words.

00:11:15,130 --> 00:11:26,200
Thunks — sub routines used to inject additional logic or calculations into other sub routines.

00:11:26,200 --> 00:11:32,680
So I teach React and Redux at Turing, and this is where we introduce our students to

00:11:32,680 --> 00:11:39,149
thunks, they use them for asynchronous actions that they are creating.

00:11:39,149 --> 00:11:43,050
And they're what on earth is a thunk?

00:11:43,050 --> 00:11:50,350
A lot of people thought this term originated because of a sound.

00:11:50,350 --> 00:11:54,990
They think clearly about a sound that would be occurring from this, so maybe it was the

00:11:54,990 --> 00:12:03,930
sound of data hitting the information — information hitting the stack, or data hitting an accumulator

00:12:03,930 --> 00:12:07,709
— that is what a lot of people reference this term to.

00:12:07,709 --> 00:12:17,779
But the origin is from a late night of programming years ago where a couple of developers were

00:12:17,779 --> 00:12:22,740
thinking really hard about how they needed this type of argument at a certain point in

00:12:22,740 --> 00:12:27,880
execution of their programme, and they didn't have that value right away but they realised

00:12:27,880 --> 00:12:34,760
that they could get that information in advance with a — by adding a couple of extra calculations

00:12:34,760 --> 00:12:36,910
at compile time.

00:12:36,910 --> 00:12:41,699
In their minds, they thought, "Okay, if we add these calculations ahead of time, now

00:12:41,699 --> 00:12:48,769
this variable, this value, has already been thought of, it has already been thought about,"

00:12:48,769 --> 00:12:55,300
hence "thunk" is the past-tense version of think, or past tense of think.

00:12:55,300 --> 00:12:57,920
So that is what that term actually means here.

00:12:57,920 --> 00:13:05,389
Shell: this was a fun one to research.

00:13:05,389 --> 00:13:11,270
This is, this was a fun one to research.

00:13:11,270 --> 00:13:28,079
It is a command line or our terminal, what we are actually interacting with is our shell,

00:13:28,079 --> 00:13:34,440
and we are interacting with this shell rather than the kernel or the central core of our

00:13:34,440 --> 00:13:36,530
operating system, right?

00:13:36,530 --> 00:13:39,410
So nuts work the same exact way.

00:13:39,410 --> 00:13:46,279
They have — they're a fruit, and they have this very hard external shell that does not

00:13:46,279 --> 00:13:52,300
allow you access to that inner seed, or that inner kernel.

00:13:52,300 --> 00:13:53,480
That's the metaphor there.

00:13:53,480 --> 00:14:00,060
When I was researching this one, there were a lot of threads where people were getting

00:14:00,060 --> 00:14:05,480
very philosophical about things, and really deep about what it could possibly mean.

00:14:05,480 --> 00:14:11,370
They were like, "Oh, the shell is like a sea shell from the ocean, and there this concept

00:14:11,370 --> 00:14:16,460
of listeners, and you can listen to the ocean when you put a sea shell up to your ear,"

00:14:16,460 --> 00:14:23,000
and people were making up these convoluted metaphors, and someone said, listen, it is

00:14:23,000 --> 00:14:24,899
just a nut, that's all it is.

00:14:24,899 --> 00:14:28,270
And the conversation stopped after he mentioned that.

00:14:28,270 --> 00:14:33,020
We have a tendency to overthinking things, for sure, when we try to come up with metaphors

00:14:33,020 --> 00:14:36,270
and examples of what things might mean, okay?

00:14:36,270 --> 00:14:43,940
So that is just a handful of words that I have picked out from a very long list.

00:14:43,940 --> 00:14:48,610
If you're interested in learning more words, and learning more terminology, there's a book

00:14:48,610 --> 00:14:54,910
called the New Hackers' Dictionary, which isn't quite new any more, it is actually pretty

00:14:54,910 --> 00:14:55,910
dated.

00:14:55,910 --> 00:15:03,209
I think it was around 1996 when it was being actively updated, but there are a lot of other

00:15:03,209 --> 00:15:16,120
terms in that dictionary are that are humorous like woga-woga, barfulation, nasal demons.

00:15:16,120 --> 00:15:19,920
These are considered hacker terms.

00:15:19,920 --> 00:15:27,269
I got a good laugh as I was looking through the glossary, reading of some these terms.

00:15:27,269 --> 00:15:34,190
But, at the same time, alongside these more humorous and more interesting terms in this

00:15:34,190 --> 00:15:41,560
dictionary, there are a lot of upsetting words, words that very clearly indicate some of the

00:15:41,560 --> 00:15:47,520
cultural issues that we are still dealing with today in programming.

00:15:47,520 --> 00:15:51,329
Words like "tits on a keyboard".

00:15:51,329 --> 00:16:07,519
"Tar and feather", "rape", these are all considered programming terms according to that dictionary,

00:16:07,519 --> 00:16:09,740
right?

00:16:09,740 --> 00:16:15,769
In the beginning of that book, they say, "All human cultures use slang in this three-fold

00:16:15,769 --> 00:16:23,100
way: as a tool of communication, and of inclusion, and of exclusion."

00:16:23,100 --> 00:16:30,740
I want to take the last part of this talk to talk a little bit about this exclusion

00:16:30,740 --> 00:16:33,600
piece.

00:16:33,600 --> 00:16:39,080
One of the ways in which the language that we use in programming is the most exclusion

00:16:39,080 --> 00:16:47,600
ry lies in how biased it is towards native English speakers, how much it favours native

00:16:47,600 --> 00:16:50,800
English speakers.

00:16:50,800 --> 00:16:55,880
I had a student recently who was a perfectly talented developer.

00:16:55,880 --> 00:17:02,130
She was very able to write all of the code and build all of the application s, but where

00:17:02,130 --> 00:17:10,110
she felt she was falling behind as a native Spanish speaker was that gasping that articulation

00:17:10,110 --> 00:17:17,500
piece, so, talking about the code, and listening to others speak about it.

00:17:17,500 --> 00:17:24,330
The terms and metaphors that we use that might make perfect accepts to you might be absolutely

00:17:24,330 --> 00:17:26,870
meaningless to someone else.

00:17:26,870 --> 00:17:35,620
There is a discussion on a GitHub thread recently where a developer was discussing how the terms

00:17:35,620 --> 00:17:42,770
"property" and "attribute" translate to the exact same word in Chinese.

00:17:42,770 --> 00:17:47,060
Even though they mean slightly different things when we talk about them in English.

00:17:47,060 --> 00:17:54,530
So, their solution to overcome this is to prefix that word with either DOM, when they

00:17:54,530 --> 00:18:00,350
were talking about a DOM property, or HTML, when they were talking about an HTML attribute.

00:18:00,350 --> 00:18:05,190
That would help them avoid any confusion they might have ran into.

00:18:05,190 --> 00:18:11,820
This was eye-opening to me, and I wanted to hear more stories what else was out there,

00:18:11,820 --> 00:18:16,570
and how are people struggling within this industry dominated by English?

00:18:16,570 --> 00:18:22,950
So I interviewed a couple of developers, and I surveyed about 30 which is still a small

00:18:22,950 --> 00:18:23,960
sample set.

00:18:23,960 --> 00:18:33,430
But I surveyed non-English speakers about their experiences being engineers, developers,

00:18:33,430 --> 00:18:36,610
tech-based biased towards English speakers.

00:18:36,610 --> 00:18:46,300
Before the themes came up was that there was a longer learning curve for these developers,

00:18:46,300 --> 00:18:52,030
so not only were they trying to learn the programming language, at the same time, they

00:18:52,030 --> 00:18:59,930
were trying to learn the written and spoken language that explained it in the first place.

00:18:59,930 --> 00:19:05,170
Sometimes, there were no translations for certain terms that we use in programming;

00:19:05,170 --> 00:19:10,670
sometimes, there would be a translation, but maybe it would cause even more confusion if

00:19:10,670 --> 00:19:17,100
that translation was not a perfect one-to-one correlation with the original term.

00:19:17,100 --> 00:19:23,830
A developer at the New York Times and native Polish speaker said, "I have no idea what

00:19:23,830 --> 00:19:27,420
Polish people call a variable in Polish.

00:19:27,420 --> 00:19:33,150
Not knowing the words in my native language definitely adds some sense of artificiality

00:19:33,150 --> 00:19:35,440
to the programming terms."

00:19:35,440 --> 00:19:40,800
So it is very difficult to derive meaning from terms that seem like they're mid-up,

00:19:40,800 --> 00:19:47,510
terms that you have not recognised in your native language, right?

00:19:47,510 --> 00:19:53,230
Another theme I noticed was that people had difficulty getting help also recognising when

00:19:53,230 --> 00:19:59,370
they actually needed help, so, some people mentioned that it was challenging to find

00:19:59,370 --> 00:20:03,890
the right search terms to use when tackling a bug that they were encountering.

00:20:03,890 --> 00:20:08,400
I know I still have problems with that as a native English speaker, so there's an added

00:20:08,400 --> 00:20:10,201
layer of complexity there for some people.

00:20:10,201 --> 00:20:17,530
A loft people mentioned — a lot of people mentioned reading issue threads and pull requests

00:20:17,530 --> 00:20:22,980
wasn't worth it because there was too much slang involved in those threads that convoluted

00:20:22,980 --> 00:20:27,660
the discussion, and made it really difficult for them to follow.

00:20:27,660 --> 00:20:33,820
The developer I was talking about, Ana, was also mentioning that, when she would read

00:20:33,820 --> 00:20:37,440
documentation, she would have to double-check with her co-workers?

00:20:37,440 --> 00:20:42,660
Do I is not not understand this because it is poorly written or do I not understand this

00:20:42,660 --> 00:20:47,310
because of a gap in my English proficiency?

00:20:47,310 --> 00:20:51,900
So this was another check that people had to do for themselves in order to understand

00:20:51,900 --> 00:20:58,040
whether or not it was them, or something that was prewritten poorly.

00:20:58,040 --> 00:21:01,960
We all know how much documentation is written poorly out there, and how many bad resources

00:21:01,960 --> 00:21:07,590
there are out there, so I can't imagine having that additional challenge.

00:21:07,590 --> 00:21:13,560
By far one of the biggest barriers for people seems to be community involvement, and the

00:21:13,560 --> 00:21:20,750
judgment that came along with that, so, I think everyone here can agree that community

00:21:20,750 --> 00:21:29,340
involvement is so essential for your growth, and your learning, and enjoyment, and success

00:21:29,340 --> 00:21:30,510
in the industry, right?

00:21:30,510 --> 00:21:32,400
In your career.

00:21:32,400 --> 00:21:39,650
It is such a vital part of being involved in this industry that it is a shame that people

00:21:39,650 --> 00:21:41,500
start to feel less out of it.

00:21:41,500 --> 00:21:46,020
Some people mentioned that they would have a hard time following a technical conversation,

00:21:46,020 --> 00:21:50,400
not because they weren't skilled enough, or because they didn't have the technical knowledge,

00:21:50,400 --> 00:21:55,310
but simply because it would be a large group of people talking very fast about a particular

00:21:55,310 --> 00:21:59,770
topic, and that made it challenging for them to follow along which made it look as if they

00:21:59,770 --> 00:22:02,280
didn't know what people were talking about.

00:22:02,280 --> 00:22:08,070
My friend Bella mentioned that she produces materials in English, like screencasts, articles,

00:22:08,070 --> 00:22:14,380
and talks, and sometimes, people will question her materials, or her technical prowess, her

00:22:14,380 --> 00:22:19,130
skill set because of a spelling or grammar mistake or an accent.

00:22:19,130 --> 00:22:20,980
Very simple things.

00:22:20,980 --> 00:22:27,220
There's this added layer of having to prove yourself now if you have this barrier that

00:22:27,220 --> 00:22:30,570
most of us are un familiar with.

00:22:30,570 --> 00:22:36,731
So a lot of people did say some positive things about their community involvement but overall,

00:22:36,731 --> 00:22:40,440
the tone felt kind of lonely, and I think this is something we should definitely be

00:22:40,440 --> 00:22:43,100
working on as an industry.

00:22:43,100 --> 00:22:47,230
And based on some of the responses that I was getting, there were definitely some things

00:22:47,230 --> 00:22:51,811
that stood out to me that we could start doing, and things that people mentioned, so, one

00:22:51,811 --> 00:22:58,560
of those was when you're creating resources, try to use more illustrations and charts,

00:22:58,560 --> 00:22:59,720
and graphs.

00:22:59,720 --> 00:23:06,060
Those are more universal, and often help clarify things where written text falls short.

00:23:06,060 --> 00:23:10,800
Lynn Clark got a really great shout out from one of the respondents for all the work she's

00:23:10,800 --> 00:23:11,800
been doing there.

00:23:11,800 --> 00:23:17,050
If we could make an effort to do something like that, that would be super helpful.

00:23:17,050 --> 00:23:21,170
Limiting the slang in issues we use in PR threads.

00:23:21,170 --> 00:23:25,150
If we can aim for words that might be translated more easily in other languages.

00:23:25,150 --> 00:23:31,860
It might feel sill y and robot ic at first but it will help break town barriers for developers

00:23:31,860 --> 00:23:33,850
that would be super helpful.

00:23:33,850 --> 00:23:38,960
Lastly, we need to be working with native speakers of other languages to create these

00:23:38,960 --> 00:23:43,260
resources, to create better resources, more universal resources.

00:23:43,260 --> 00:23:48,890
I'm not exactly sure just what this looks like yet, but I'm hoping to collect more data

00:23:48,890 --> 00:23:52,870
and more experiences, so that we can figure that out.

00:23:52,870 --> 00:23:57,790
I'm sure a lot of people here have dealt with some of these issues.

00:23:57,790 --> 00:23:59,660
They've experienced these things.

00:23:59,660 --> 00:24:02,130
I would love to hear from all of you if you have.

00:24:02,130 --> 00:24:07,240
I plan on keeping my survey open indefinitely so that people can continue to respond to

00:24:07,240 --> 00:24:10,780
it, so I will tweet that out in a little bit.

00:24:10,780 --> 00:24:14,560
But any experiences that you have, anything that you think we can be doing to alleviate

00:24:14,560 --> 00:24:19,240
some of these difficulties that we're causing for other developers, I would love to talk

00:24:19,240 --> 00:24:21,550
with you more about that, okay?

00:24:21,550 --> 00:24:26,170
Feel free to find me during the breaks, or after all the talks.

00:24:26,170 --> 00:24:30,520
If you have any insight or experiences you want to share, or maybe some other terms and

00:24:30,520 --> 00:24:35,200
origin stories that you find with interesting, I would love to hear about them.

00:24:35,200 --> 00:24:36,300
Hope you enjoy the rest of the conference.

00:24:36,300 --> 00:24:37,300
Thank you.

00:24:37,300 --> 00:24:37,800

YouTube URL: https://www.youtube.com/watch?v=2KTK2qD4-gs


